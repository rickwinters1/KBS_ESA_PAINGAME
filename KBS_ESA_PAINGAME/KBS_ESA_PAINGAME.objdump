
KBS_ESA_PAINGAME.elf:     file format elf32-littlenios2
KBS_ESA_PAINGAME.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00026034 memsz 0x00026034 flags r-x
    LOAD off    0x00027054 vaddr 0x00026054 paddr 0x00027f84 align 2**12
         filesz 0x00001f30 memsz 0x00001f30 flags rw-
    LOAD off    0x00029eb4 vaddr 0x00029eb4 paddr 0x00029eb4 align 2**12
         filesz 0x00000000 memsz 0x00025ae4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00024f5c  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000eb4  000251a0  000251a0  000261a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f30  00026054  00027f84  00027054  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00025ae4  00029eb4  00029eb4  00029eb4  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0004f998  0004f998  00028f84  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  00028f84  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00028f84  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001290  00000000  00000000  00028fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00038454  00000000  00000000  0002a238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000cae7  00000000  00000000  0006268c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011dcc  00000000  00000000  0006f173  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000047d8  00000000  00000000  00080f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006454  00000000  00000000  00085718  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b65a  00000000  00000000  0008bb6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  000a71c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a98  00000000  00000000  000a71e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000af919  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000af91f  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000af924  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000af925  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000af926  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000af92a  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000af92e  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000af932  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000af93b  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000af944  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000af94d  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  000af958  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  000af9b6  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  000ba57b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
000251a0 l    d  .rodata	00000000 .rodata
00026054 l    d  .rwdata	00000000 .rwdata
00029eb4 l    d  .bss	00000000 .bss
0004f998 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/rickert/Documents/GitHub/KBS_ESA_PAINGAME/KBS_ESA_PAINGAME_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Contoller.c
00000000 l    df *ABS*	00000000 Game.c
00000000 l    df *ABS*	00000000 Menu.c
00000000 l    df *ABS*	00000000 Singleplayer.c
00000000 l    df *ABS*	00000000 Tutorial.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 bzero.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00025aa2 l     O .rodata	00000010 zeroes.4240
00025ab2 l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 vfprintf.c
00025ac2 l     O .rodata	00000010 zeroes.4255
0000871c l     F .text	000000bc __sbprintf
00025ad2 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000892c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000a4e8 l     F .text	00000008 __fp_lock
0000a4f0 l     F .text	00000008 __fp_unlock
0000a504 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00026054 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00026498 l     O .rwdata	00000020 lc_ctype_charset
00026478 l     O .rwdata	00000020 lc_message_charset
000264b8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00025b04 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00025c28 l     O .rodata	00000010 zeroes.4184
00025c38 l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 vfprintf.c
0000ebc0 l     F .text	000000fc __sprint_r.part.0
00025c58 l     O .rodata	00000010 blanks.4199
00025c48 l     O .rodata	00000010 zeroes.4200
0000ffc8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000114cc l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00013bf8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00013d18 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013d44 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00013e44 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00013f38 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001401c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00014214 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00027ef8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00014470 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00027efc l     O .rwdata	00000004 lockid
00029f70 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00027f00 l     O .rwdata	00000004 lockid
00029f78 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00015ea4 l     F .text	00000044 OS_InitMisc
00015ee8 l     F .text	00000068 OS_InitRdyList
00016048 l     F .text	000000e0 OS_InitTCBList
00015dc8 l     F .text	000000dc OS_InitEventList
00015f50 l     F .text	0000007c OS_InitTaskIdle
00015fcc l     F .text	0000007c OS_InitTaskStat
000162a8 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
000180ac l     F .text	00000110 OS_FlagTaskRdy
00017e04 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001d0dc l     F .text	00000038 alt_dev_reg
00026aa0 l     O .rwdata	0000106c JTAG_UART
00027b0c l     O .rwdata	00000030 AV_Config
00027b3c l     O .rwdata	00000030 Audio_Subsystem_Audio
00027b6c l     O .rwdata	0000002c Char_LCD_16x2
00027b98 l     O .rwdata	0000002c IrDA
00027bc4 l     O .rwdata	0000002c Expansion_JP5
00027bf0 l     O .rwdata	0000002c Green_LEDs
00027c1c l     O .rwdata	0000002c HEX3_HEX0
00027c48 l     O .rwdata	0000002c HEX7_HEX4
00027c74 l     O .rwdata	0000002c Pushbuttons
00027ca0 l     O .rwdata	0000002c Red_LEDs
00027ccc l     O .rwdata	0000002c Slider_Switches
00027cf8 l     O .rwdata	00000038 PS2_Port
00027d30 l     O .rwdata	00000038 PS2_Port_Dual
00027d68 l     O .rwdata	0000002c Serial_Port
00027d94 l     O .rwdata	00000034 USB
00027dc8 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
00027e10 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
00027e64 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00021b68 l     F .text	000002a8 altera_avalon_jtag_uart_irq
00021e10 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000225e8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00023e04 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00024070 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00024358 l     F .text	00000050 alt_get_errno
000243a8 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0002a010 g     O .bss	00000004 alt_instruction_exception_handler
00029fd8 g     O .bss	00000004 aux_status_register
000044d0 g     F .text	00000018 putchar
0000cec8 g     F .text	00000074 _mprec_log10
00027f4e g     O .rwdata	00000002 OSTaskNameSize
0000cfb4 g     F .text	0000008c __any_on
00010688 g     F .text	00000054 _isatty_r
00025b10 g     O .rodata	00000028 __mprec_tinytens
00014140 g     F .text	000000d4 alt_main
000046f0 g     F .text	00000090 strcpy
000044e8 g     F .text	000000a8 _puts_r
0004f898 g     O .bss	00000100 alt_irq
000231c4 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
000106dc g     F .text	0000005c _lseek_r
00019498 g     F .text	000000d0 OS_MemInit
00027f84 g       *ABS*	00000000 __flash_rwdata_start
0001d078 g     F .text	00000064 OSTimeSet
00022754 g     F .text	0000003c alt_up_character_lcd_send_cmd
00012760 g     F .text	00000084 .hidden __eqdf2
0001d88c g     F .text	000001ac Check_for_Master_Boot_Record
00014b20 g     F .text	00000610 OSEventPendMulti
0004f998 g       *ABS*	00000000 __alt_heap_start
000249b4 g     F .text	00000020 OSTaskCreateHook
00021708 g     F .text	000001bc alt_up_sd_card_fclose
0000448c g     F .text	0000003c printf
00027f26 g     O .rwdata	00000002 OSMboxEn
00029ee4 g     O .bss	00000004 random
00015184 g     F .text	0000007c OSIntEnter
00010794 g     F .text	0000009c _wcrtomb_r
0000d8b4 g     F .text	0000005c __sseek
00000d94 g     F .text	0000021c collision
0000a838 g     F .text	00000010 __sinit
00023b4c g     F .text	00000100 alt_up_char_buffer_string
00010084 g     F .text	00000138 __swbuf_r
00022fe4 g     F .text	00000034 read_CE_bit
00029ee8 g     O .bss	00000002 b
00027f36 g     O .rwdata	00000002 OSQEn
000020cc g     F .text	000002a0 Tutorial
0000b2e4 g     F .text	0000007c _setlocale_r
0000a6a0 g     F .text	00000068 __sfmoreglue
000147f4 g     F .text	000000d0 __malloc_unlock
00024a10 g     F .text	0000001c OSTaskStatHook
00023368 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
0002385c g     F .text	00000090 alt_up_rs232_read_fd
00029f80 g     O .bss	00000001 OSLockNesting
00029ffc g     O .bss	00000004 current_sector_modified
00002d3c g     F .text	000000ec menu
00027f74 g     O .rwdata	00000002 OSDataSize
00029f81 g     O .bss	00000001 OSRunning
00023a80 g     F .text	000000cc alt_up_char_buffer_draw
0002a0a0 g     O .bss	00009c40 Singleplayer_stk
00029eb4 g     O .bss	00000004 counter3
0000bf44 g     F .text	0000015c memmove
00024a48 g     F .text	0000001c OSInitHookBegin
00027f6c g     O .rwdata	00000002 OSTmrSize
0000a820 g     F .text	00000018 _cleanup
0000c0a0 g     F .text	000000a8 _Balloc
00027ea0 g     O .rwdata	00000004 gameModeMenu
00020234 g     F .text	000000c4 alt_up_sd_card_is_Present
0001d5d4 g     F .text	0000004c Save_Modified_Sector
00029f84 g     O .bss	00000004 OSIdleCtr
000127e4 g     F .text	000000e0 .hidden __gtdf2
00027ea8 g     O .rwdata	00000004 xRechts
00024768 g     F .text	00000020 altera_nios2_gen2_irq_init
00024834 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
000226e0 g     F .text	00000074 get_DDRAM_addr
000165e0 g     F .text	000002d4 OS_TCBInit
00027eb8 g     O .rwdata	00000004 yMenu
00000000 g     F .entry	0000001c __reset
00029ff4 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
00027f72 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00027f12 g     O .rwdata	00000002 OSEventSize
00029f88 g     O .bss	00000001 OSPrioHighRdy
00010630 g     F .text	00000058 _fstat_r
000249d4 g     F .text	00000020 OSTaskDelHook
00029f5c g     O .bss	00000004 errno
0000d830 g     F .text	00000008 __seofread
00024814 g       .text	00000000 OSStartHighRdy
00029eec g     O .bss	00000004 pixel_buffer_y
0001b97c g     F .text	000001ec OSTaskCreateExt
0000db88 g     F .text	00001038 ___svfiprintf_internal_r
00017950 g     F .text	00000068 OSFlagPendGetFlagsRdy
00027f52 g     O .rwdata	00000002 OSTaskStatStkSize
00016a40 g     F .text	00000308 OSFlagAccept
00019b6c g     F .text	000000b8 OSQFlush
00019568 g     F .text	00000140 OSQAccept
00029f68 g     O .bss	00000004 alt_argv
00001e3c g     F .text	00000290 endTutorial
00029ef0 g     O .bss	00000004 score1
0002fe90 g       *ABS*	00000000 _gp
000207e0 g     F .text	00000384 alt_up_sd_card_fopen
00020364 g     F .text	000000d0 alt_up_sd_card_find_first
0001b7c0 g     F .text	000001bc OSTaskCreate
00029fe8 g     O .bss	00000004 command_argument_register
0001b280 g     F .text	00000540 OSTaskChangePrio
00029f7c g     O .bss	00000004 alt_heapsem
00003b68 g     F .text	0000003c del_middenlijn
000168b4 g     F .text	0000018c OSDebugInit
0001bb68 g     F .text	000003e0 OSTaskDel
00027eac g     O .rwdata	00000004 xBoven
00026920 g     O .rwdata	00000180 alt_fd_list
00027ec0 g     O .rwdata	00000004 onePress
0004c10c g     O .bss	00000370 OSFlagTbl
000044c8 g     F .text	00000008 _putchar_r
00015bb4 g     F .text	000000b4 OS_EventTaskRemove
0001fab8 g     F .text	0000012c find_first_empty_record_in_root_directory
00023fb0 g     F .text	00000090 alt_find_dev
0000be0c g     F .text	00000138 memcpy
00027f3c g     O .rwdata	00000002 OSRdyTblSize
000228f0 g     F .text	00000050 alt_up_character_lcd_write_fd
00023c4c g     F .text	0000005c alt_up_char_buffer_clear
0000a4f8 g     F .text	0000000c _cleanup_r
00013a20 g     F .text	000000d0 .hidden __floatsidf
00024130 g     F .text	00000078 alt_io_redirect
000128c4 g     F .text	000000e0 .hidden __ltdf2
000251a0 g       *ABS*	00000000 __DTOR_END__
00022e70 g     F .text	00000090 alt_up_irda_write_fd
000237e8 g     F .text	00000074 alt_up_rs232_read_data
00004590 g     F .text	00000014 puts
00024d58 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000148c4 g     F .text	00000120 OSEventNameGet
00027f20 g     O .rwdata	00000002 OSFlagMax
0001f6c8 g     F .text	000001a4 find_first_empty_cluster
0000d714 g     F .text	00000074 __fpclassifyd
00029f34 g     O .bss	00000004 last
0000ce24 g     F .text	000000a4 __ratio
00020174 g     F .text	000000c0 alt_up_sd_card_open_dev
00015200 g     F .text	000000f4 OSIntExit
0000ffa4 g     F .text	00000024 __vfiprintf_internal
00027f5a g     O .rwdata	00000002 OSTCBSize
00029f89 g     O .bss	00000001 OSPrioCur
00022c6c g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
00022074 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00004460 g     F .text	0000002c _printf_r
000115e8 g     F .text	00000008 .hidden __udivsi3
00013e94 g     F .text	000000a4 isatty
00027f40 g     O .rwdata	00000002 OSStkWidth
00025b60 g     O .rodata	000000c8 __mprec_tens
00027f34 g     O .rwdata	00000002 OSPtrSize
0000b360 g     F .text	0000000c __locale_charset
00027f14 g     O .rwdata	00000002 OSEventTblSize
00022c10 g     F .text	0000005c alt_up_irda_disable_read_interrupt
00027eb4 g     O .rwdata	00000004 xMenu
00024788 g       .text	00000000 OSCtxSw
00024ccc g     F .text	0000008c alt_icache_flush
00029f58 g     O .bss	00000004 __malloc_top_pad
00000688 g     F .text	00000104 moveDown
00029f8c g     O .bss	00000004 OSTCBList
00029eb8 g     O .bss	00000004 gpio_dev
00027e98 g     O .rwdata	00000004 leven
00029f60 g     O .bss	00000004 alt_fd_list_lock
00027ed0 g     O .rwdata	00000004 __mb_cur_max
0000b390 g     F .text	0000000c _localeconv_r
0000c4ac g     F .text	0000003c __i2b
0000ac9c g     F .text	000004c0 __sfvwrite_r
0001e9e0 g     F .text	000000b8 get_dir_divider_location
0004c47c g     O .bss	00000c30 OSMemTbl
00029f90 g     O .bss	00000001 OSTickStepState
0000d788 g     F .text	00000054 _sbrk_r
00033ce0 g     O .bss	00002004 menu_stk
0001e6b4 g     F .text	000000c0 filename_to_upper_case
00027f38 g     O .rwdata	00000002 OSQMax
00020b64 g     F .text	00000084 alt_up_sd_card_set_attributes
0004d0ac g     O .bss	00000800 OSTaskStatStk
000190c8 g     F .text	000000f8 OSMemNameGet
0001da38 g     F .text	0000027c Read_File_Record_At_Offset
00027f18 g     O .rwdata	00000002 OSFlagEn
00010738 g     F .text	0000005c _read_r
00027f5e g     O .rwdata	00000002 OSTimeTickHookEn
0001a08c g     F .text	00000168 OSQPost
000181bc g     F .text	000000a0 OS_FlagUnlink
00027ef0 g     O .rwdata	00000004 alt_max_fd
00023764 g     F .text	00000044 alt_up_rs232_check_parity
00016178 g     F .text	00000064 OS_MemCopy
000161dc g     F .text	000000cc OS_Sched
0001f260 g     F .text	00000468 find_file_in_directory
0001034c g     F .text	000000f0 _fclose_r
00018fd8 g     F .text	000000f0 OSMemGet
00018cd4 g     F .text	00000110 OSMboxQuery
0001c248 g     F .text	000001c0 OSTaskNameSet
00023018 g     F .text	00000030 read_num_bytes_available
0000a4b8 g     F .text	00000030 fflush
00029f54 g     O .bss	00000004 __malloc_max_sbrked_mem
00029f94 g     O .bss	00000004 OSCtxSwCtr
00024a2c g     F .text	0000001c OSTimeTickHook
000241a8 g     F .text	000001b0 alt_irq_register
00027f22 g     O .rwdata	00000002 OSFlagNameSize
00022f80 g     F .text	00000034 read_RI_bit
00000d14 g     F .text	00000080 schuifScores
00015c68 g     F .text	000000fc OS_EventTaskRemoveMulti
00029ebc g     O .bss	00000004 controllerSem
000202f8 g     F .text	0000006c alt_up_sd_card_is_FAT16
000115f8 g     F .text	0000089c .hidden __adddf3
00015a68 g     F .text	0000014c OS_EventTaskWaitMulti
0000cbcc g     F .text	0000011c __b2d
00027f3a g     O .rwdata	00000002 OSQSize
00010f3c g     F .text	00000590 .hidden __umoddi3
0001406c g     F .text	000000d4 lseek
0001ab90 g     F .text	00000268 OSSemPend
00027ec8 g     O .rwdata	00000004 _global_impure_ptr
0001ed34 g     F .text	0000052c get_home_directory_cluster_for_file
0000d1ac g     F .text	00000568 _realloc_r
00029f30 g     O .bss	00000004 vorige
00027f24 g     O .rwdata	00000002 OSLowestPrio
0004f998 g       *ABS*	00000000 __bss_end
00024a9c g     F .text	00000020 OSTCBInitHook
00027f6a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00024664 g     F .text	00000104 alt_tick
00004324 g     F .text	00000018 bzero
00018a68 g     F .text	00000110 OSMboxPost
0002a014 g     O .bss	00000064 highscores
00029ec0 g     O .bss	00000004 counter1
0001097c g     F .text	000005c0 .hidden __udivdi3
00010450 g     F .text	00000184 _fputwc_r
00027f0c g     O .rwdata	00000002 OSEventEn
00025b38 g     O .rodata	00000028 __mprec_bigtens
0000c290 g     F .text	00000104 __s2b
00027f66 g     O .rwdata	00000002 OSTmrCfgNameSize
00001714 g     F .text	00000040 dakjeOmlaag
00013af0 g     F .text	000000a4 .hidden __floatunsidf
0000c974 g     F .text	00000060 __mcmp
0002a000 g     O .bss	00000004 current_sector_index
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0002307c g     F .text	0000002c read_data_byte
00002cf0 g     F .text	0000004c terugMenu
0000a858 g     F .text	00000018 __fp_lock_all
00027e9c g     O .rwdata	00000004 oneTime
00017fc8 g     F .text	000000e4 OS_FlagInit
000245cc g     F .text	00000098 alt_alarm_stop
00029ec4 g     O .bss	00000004 Flags_Games
00002464 g     F .text	0000009c clearHighscoreText
00022fb4 g     F .text	00000030 read_RE_bit
0001d7ac g     F .text	000000e0 mark_cluster
00027f48 g     O .rwdata	00000002 OSTaskIdleStkSize
0002a004 g     O .bss	00000004 alt_irq_active
0001a778 g     F .text	000000b0 OSSemAccept
00003a70 g     F .text	00000090 VGA_text
000192d8 g     F .text	000000d8 OSMemPut
00029ef4 g     O .bss	00000004 pixel_buffer_x
00018de4 g     F .text	000001f4 OSMemCreate
00029f98 g     O .bss	00000004 OSIdleCtrMax
00035ce4 g     O .bss	00002004 controller1_stk
00022cac g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
000268f8 g     O .rwdata	00000028 alt_dev_null
00027f5c g     O .rwdata	00000002 OSTicksPerSec
00029ef8 g     O .bss	00000004 Flags_Highscores
0001fbe4 g     F .text	00000188 convert_filename_to_name_extension
00022b84 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00022f40 g     F .text	00000040 alt_up_parallel_port_open_dev
00024788 g       .text	00000000 OSIntCtxSw
00023220 g     F .text	00000074 alt_up_ps2_write_data_byte
00001558 g     F .text	0000017c endGame
00023de8 g     F .text	0000001c alt_dcache_flush_all
0000c394 g     F .text	00000068 __hi0bits
00029fd4 g     O .bss	00000004 is_sd_card_formated_as_FAT16
00013998 g     F .text	00000088 .hidden __fixdfsi
000016d4 g     F .text	00000040 dakjeOmhoog
0001f86c g     F .text	0000024c find_first_empty_record_in_a_subdirectory
00029f9c g     O .bss	00000004 OSTCBFreeList
00027f84 g       *ABS*	00000000 __ram_rwdata_end
0001adf8 g     F .text	0000016c OSSemPendAbort
00027ee8 g     O .rwdata	00000008 alt_dev_list
000144c0 g     F .text	000000f8 write
0000d040 g     F .text	000000a0 _putc_r
00029efc g     O .bss	00000004 verandert
00037ce8 g     O .bss	00002004 Tutorial_stk
00029ff8 g     O .bss	00000004 device_pointer
00027f60 g     O .rwdata	00000002 OSVersionNbr
00026054 g       *ABS*	00000000 __ram_rodata_end
00013d94 g     F .text	000000b0 fstat
000238ec g     F .text	00000094 alt_up_rs232_write_fd
00002e28 g     F .text	0000049c selecteerMenu
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000128c4 g     F .text	000000e0 .hidden __ledf2
00004668 g     F .text	00000088 strcat
00027f08 g     O .rwdata	00000004 OSEndiannessTest
0000c6e4 g     F .text	00000140 __pow5mult
0000ecd4 g     F .text	000012d0 ___vfiprintf_internal_r
00029f4c g     O .bss	00000004 __nlocale_changed
000115f0 g     F .text	00000008 .hidden __umodsi3
00027f1a g     O .rwdata	00000002 OSFlagGrpSize
00000280 g     F .text	0000011c controllers
000009b8 g     F .text	0000035c sorteer
0004f998 g       *ABS*	00000000 end
0002355c g     F .text	00000098 alt_up_ps2_write_fd
00022ce8 g     F .text	00000044 alt_up_irda_check_parity
000239c0 g     F .text	00000080 alt_up_char_buffer_init
00003484 g     F .text	00000238 teken_menu
00021a28 g     F .text	00000140 altera_avalon_jtag_uart_init
0001643c g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00000fb0 g     F .text	00000378 Game
00027e94 g     O .rwdata	00000004 check
000251a0 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00022660 g     F .text	00000080 alt_avalon_timer_sc_init
00013b94 g     F .text	00000064 .hidden __clzsi2
00022328 g     F .text	000002c0 altera_avalon_jtag_uart_write
0000a848 g     F .text	00000004 __sfp_lock_acquire
0000bd24 g     F .text	000000e8 memchr
00016128 g     F .text	00000050 OS_MemClr
00022804 g     F .text	00000078 alt_up_character_lcd_write
000067a8 g     F .text	00001f50 ___vfprintf_internal_r
00024858 g     F .text	0000015c OSTaskStkInit
000045a4 g     F .text	00000058 _sprintf_r
0000a9ac g     F .text	000002f0 _free_r
0000b36c g     F .text	00000010 __locale_mb_cur_max
000157c4 g     F .text	00000198 OS_EventTaskRdy
00024fd0 g     F .text	00000194 __call_exitprocs
00029fa0 g     O .bss	00000001 OSCPUUsage
00029f48 g     O .bss	00000004 __mlocale_changed
00027ed4 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00003c14 g     F .text	0000003c deleteNummer
0002a008 g     O .bss	00000004 _alt_tick_rate
00019c24 g     F .text	000002fc OSQPend
00039cec g     O .bss	00002004 newHighscores_stk
0001cb74 g     F .text	00000148 OSTimeDly
0000078c g     F .text	0000013c read_file
0003bcf0 g     O .bss	00002004 controller2_stk
0000c824 g     F .text	00000150 __lshift
0002a00c g     O .bss	00000004 _alt_nticks
00014264 g     F .text	000000fc read
0001d148 g     F .text	000003d8 alt_sys_init
00022a3c g     F .text	00000088 alt_up_character_lcd_shift_display
0000d9bc g     F .text	000001cc __ssprint_r
00024ebc g     F .text	00000114 __register_exitproc
00029fa1 g     O .bss	00000001 OSTaskCtr
0002347c g     F .text	00000054 alt_up_ps2_clear_fifo
00023728 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00029edc g     O .bss	00000004 score2
00029ec8 g     O .bss	00000004 MailBox2
000039bc g     F .text	000000b4 VGA_box
0001ccbc g     F .text	00000168 OSTimeDlyHMSM
000018d4 g     F .text	00000414 Singleplayer
0000c4e8 g     F .text	000001fc __multiply
00022ac4 g     F .text	0000008c alt_up_character_lcd_erase_pos
00021f20 g     F .text	00000068 altera_avalon_jtag_uart_close
00026054 g       *ABS*	00000000 __ram_rwdata_start
000251a0 g       *ABS*	00000000 __ram_rodata_start
0002a078 g     O .bss	00000028 __malloc_current_mallinfo
00027f0e g     O .rwdata	00000002 OSEventMax
0000cce8 g     F .text	0000013c __d2b
0001af64 g     F .text	00000110 OSSemPost
00029fd0 g     O .bss	00000004 initialized
0000236c g     F .text	000000f8 endNewHighscores
00029f00 g     O .bss	00000002 c
0001537c g     F .text	000000d8 OSSchedUnlock
00003b00 g     F .text	00000068 draw_middenlijn
000218c4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00024bd0 g     F .text	000000fc alt_get_fd
00029fa4 g     O .bss	00000004 OSMemFreeList
000154c0 g     F .text	000000ac OSStatInit
0004f330 g     O .bss	00000014 search_data
00017d40 g     F .text	000000c4 OSFlagQuery
00027f44 g     O .rwdata	00000002 OSTaskCreateExtEn
00010234 g     F .text	00000054 _close_r
00024e40 g     F .text	0000007c memcmp
000157a8 g     F .text	0000001c OS_Dummy
00021984 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0004f998 g       *ABS*	00000000 __alt_stack_base
000219d4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00029f38 g     O .bss	00000004 changed
00022bb8 g     F .text	00000058 alt_up_irda_enable_read_interrupt
000087d8 g     F .text	00000154 __swsetup_r
0003dcf4 g     O .bss	00002004 Highscores_stk
0004d8ac g     O .bss	000001e0 OSQTbl
0000039c g     F .text	000001a0 controller
00011e94 g     F .text	000008cc .hidden __divdf3
0000a708 g     F .text	00000118 __sfp
0004f344 g     O .bss	00000054 boot_sector_data
0000cf3c g     F .text	00000078 __copybits
000264f0 g     O .rwdata	00000408 __malloc_av_
00029f04 g     O .bss	00000004 ALT_y
0000a854 g     F .text	00000004 __sinit_lock_release
00029fa8 g     O .bss	00000004 OSTCBHighRdy
000129a4 g     F .text	00000724 .hidden __muldf3
0000d7dc g     F .text	00000054 __sread
00029fac g     O .bss	00000004 OSQFreeList
0002368c g     F .text	0000005c alt_up_rs232_disable_read_interrupt
00024abc g     F .text	00000114 alt_find_file
00023e54 g     F .text	000000a4 alt_dev_llist_insert
000146d4 g     F .text	00000120 __malloc_lock
000143c0 g     F .text	000000b0 sbrk
00004818 g     F .text	00001f90 ___svfprintf_internal_r
00029f08 g     O .bss	00000004 textWeg
00029f0c g     O .bss	00000004 ALT_inc_y
000149e4 g     F .text	0000013c OSEventNameSet
0000a45c g     F .text	0000005c _fflush_r
00010288 g     F .text	000000c4 _calloc_r
00029fb0 g     O .bss	00000001 OSRdyGrp
00029eb4 g       *ABS*	00000000 __bss_start
0000433c g     F .text	00000124 memset
000036bc g     F .text	00000300 main
00029f6c g     O .bss	00000004 alt_envp
00029f50 g     O .bss	00000004 __malloc_max_total_mem
00023a40 g     F .text	00000040 alt_up_char_buffer_open_dev
00021924 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000101bc g     F .text	0000001c __swbuf
00025d84 g     O .rodata	00000100 OSUnMapTbl
00020be8 g     F .text	00000088 alt_up_sd_card_get_attributes
00027f3e g     O .rwdata	00000002 OSSemEn
0001d520 g     F .text	000000b4 Write_Sector_Data
00020fe8 g     F .text	00000720 alt_up_sd_card_write
000229b4 g     F .text	00000088 alt_up_character_lcd_shift_cursor
000179b8 g     F .text	00000388 OSFlagPost
0000d910 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0001043c g     F .text	00000014 fclose
0001595c g     F .text	0000010c OS_EventTaskWait
0002340c g     F .text	00000070 alt_up_ps2_read_data_byte
00029f40 g     O .bss	00000004 timeout
00016518 g     F .text	000000c8 OS_TaskStatStkChk
0001bf48 g     F .text	00000158 OSTaskDelReq
00008b2c g     F .text	00001728 _dtoa_r
0000b57c g     F .text	000007a8 _malloc_r
000108f0 g     F .text	00000030 __ascii_wctomb
00027ef4 g     O .rwdata	00000004 alt_errno
00015454 g     F .text	0000006c OSStart
00029f10 g     O .bss	00000004 Flags_newHighscores
00014678 g     F .text	0000005c __env_unlock
0000b15c g     F .text	000000c4 _fwalk
0001c408 g     F .text	000001f8 OSTaskResume
000193b0 g     F .text	000000e8 OSMemQuery
00027f50 g     O .rwdata	00000002 OSTaskStatEn
0003fcf8 g     O .bss	00009c40 Game_stk
00022d2c g     F .text	00000040 alt_up_irda_write_data
00027f2a g     O .rwdata	00000002 OSMemMax
0001a1f4 g     F .text	00000170 OSQPostFront
000235f4 g     F .text	00000040 alt_up_ps2_open_dev
0000d0e0 g     F .text	000000cc putc
00011538 g     F .text	00000054 .hidden __divsi3
00029fb1 g     O .bss	00000003 OSRdyTbl
00027f04 g     O .rwdata	00000002 OSDebugEn
000227c4 g     F .text	00000040 alt_up_character_lcd_open_dev
0000a888 g     F .text	00000124 _malloc_trim_r
0002316c g     F .text	00000058 alt_up_ps2_enable_read_interrupt
000251a0 g       *ABS*	00000000 __CTOR_END__
000008c8 g     F .text	000000f0 write_file
00027f1c g     O .rwdata	00000002 OSFlagNodeSize
00029fdc g     O .bss	00000004 status_register
00027f64 g     O .rwdata	00000002 OSTmrCfgMax
00022790 g     F .text	00000034 alt_up_character_lcd_init
0000d918 g     F .text	000000a4 strcmp
00029fe4 g     O .bss	00000004 command_register
000196a8 g     F .text	000001fc OSQCreate
0001c0a0 g     F .text	000001a8 OSTaskNameGet
000251a0 g       *ABS*	00000000 __flash_rodata_start
0001a364 g     F .text	0000020c OSQPostOpt
0001556c g     F .text	0000021c OSTimeTick
00027f4c g     O .rwdata	00000002 OSTaskMax
000251a0 g       *ABS*	00000000 __DTOR_LIST__
0001a828 g     F .text	00000100 OSSemCreate
00027f70 g     O .rwdata	00000002 OSTmrWheelSize
00023980 g     F .text	00000040 alt_up_rs232_open_dev
00029f14 g     O .bss	00000004 gameSem
00012760 g     F .text	00000084 .hidden __nedf2
00027f46 g     O .rwdata	00000002 OSTaskDelEn
0001b074 g     F .text	00000110 OSSemQuery
000198a4 g     F .text	000002c8 OSQDel
00019f20 g     F .text	0000016c OSQPendAbort
0001d114 g     F .text	00000034 alt_irq_init
00014360 g     F .text	00000060 alt_release_fd
0001d6f8 g     F .text	000000b4 get_cluster_flag
0000053c g     F .text	0000004c checkID
00023048 g     F .text	00000034 read_data_valid
000045fc g     F .text	0000006c sprintf
00022b50 g     F .text	00000034 alt_up_character_lcd_cursor_off
00025c68 g     O .rodata	00000100 .hidden __clz_tab
0001dcb4 g     F .text	0000028c Write_File_Record_At_Offset
00002500 g     F .text	00000520 newHighscores
00029f44 g     O .bss	00000004 _PathLocale
00023304 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00024df4 g     F .text	00000014 atexit
00002a20 g     F .text	000001b0 endHighscores
00003ba4 g     F .text	00000070 del_number
000101d8 g     F .text	0000005c _write_r
000152f4 g     F .text	00000088 OSSchedLock
0000b39c g     F .text	0000001c setlocale
00016d48 g     F .text	00000128 OSFlagCreate
0001df40 g     F .text	00000688 Check_for_DOS_FAT
0001fd6c g     F .text	000002c4 create_file
00027ecc g     O .rwdata	00000004 _impure_ptr
00029fe0 g     O .bss	00000004 CSD_register_w0
00029f64 g     O .bss	00000004 alt_argc
0000a254 g     F .text	00000208 __sflush_r
00023f54 g     F .text	0000005c _do_dtors
0000b388 g     F .text	00000008 __locale_cjk_lang
00027f16 g     O .rwdata	00000002 OSEventMultiEn
00029f18 g     O .bss	00000004 newHighscoreSelect
00016e70 g     F .text	00000270 OSFlagDel
00029fb4 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
000188fc g     F .text	0000016c OSMboxPendAbort
0000cb6c g     F .text	00000060 __ulp
00027f62 g     O .rwdata	00000002 OSTmrEn
00017360 g     F .text	000005f0 OSFlagPend
0000a870 g     F .text	00000018 __fp_unlock_all
00027ee0 g     O .rwdata	00000008 alt_fs_list
0001e774 g     F .text	0000026c check_file_name_for_FAT16_compliance
00016318 g     F .text	00000074 OS_StrCopy
00029fec g     O .bss	00000004 buffer_memory
00023634 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
000237a8 g     F .text	00000040 alt_up_rs232_write_data
00000588 g     F .text	00000100 moveUp
00027f2c g     O .rwdata	00000002 OSMemNameSize
00029f1c g     O .bss	00000004 ALT_x1
00024a64 g     F .text	0000001c OSInitHookEnd
00049938 g     O .bss	000007d0 Messages
00003c50 g     F .text	00000674 draw_number
00000020 g       *ABS*	00000000 __ram_exceptions_start
00027f58 g     O .rwdata	00000002 OSTCBPrioTblMax
0000b3b8 g     F .text	0000000c localeconv
00027f54 g     O .rwdata	00000002 OSTaskStatStkChkEn
000182f4 g     F .text	000000fc OSMboxCreate
00027f28 g     O .rwdata	00000002 OSMemEn
00027e90 g     O .rwdata	00000004 first
00029ff0 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
00027f32 g     O .rwdata	00000002 OSMutexEn
00029ee0 g     O .bss	00000004 score3
00027f84 g       *ABS*	00000000 _edata
00027ec4 g     O .rwdata	00000004 interval_timer_ptr
0004f998 g       *ABS*	00000000 _end
0004f398 g     O .bss	00000500 active_files
00029fb8 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
00020030 g     F .text	00000144 copy_file_record_name_to_string
00021f88 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0001ce24 g     F .text	000001f0 OSTimeDlyResume
0001e5c8 g     F .text	000000ec Look_for_FAT16
00017210 g     F .text	00000150 OSFlagNameSet
00003304 g     F .text	000000a0 clearText
00018658 g     F .text	000002a4 OSMboxPend
0001c600 g     F .text	000001c8 OSTaskStkChk
00027f2e g     O .rwdata	00000002 OSMemSize
0000d838 g     F .text	0000007c __swrite
00027ed8 g     O .rwdata	00000004 __malloc_trim_threshold
0000b37c g     F .text	0000000c __locale_msgcharset
00029fbc g     O .bss	00000004 OSTCBCur
00024e08 g     F .text	00000038 exit
000042c4 g     F .text	00000060 checkIDScore
00022d6c g     F .text	00000074 alt_up_irda_read_data
00029f20 g     O .bss	00000002 a
00020434 g     F .text	000003ac alt_up_sd_card_find_next
00027f30 g     O .rwdata	00000002 OSMemTblSize
0000b220 g     F .text	000000c4 _fwalk_reent
000230a8 g     F .text	000000c4 alt_up_ps2_init
0000c9d4 g     F .text	00000198 __mdiff
0001158c g     F .text	0000005c .hidden __modsi3
0004a108 g     O .bss	00002004 menu_stk2
0001d620 g     F .text	000000d8 Read_Sector_Data
0001825c g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000a84c g     F .text	00000004 __sfp_lock_release
00015130 g     F .text	00000054 OSInit
0001c9dc g     F .text	0000012c OSTaskQuery
0002287c g     F .text	00000074 alt_up_character_lcd_string
0001a6cc g     F .text	000000ac OS_QInit
0001638c g     F .text	00000054 OS_StrLen
00022f00 g     F .text	00000040 alt_up_irda_open_dev
000191c0 g     F .text	00000118 OSMemNameSet
00001328 g     F .text	00000230 gescoord
00027f4a g     O .rwdata	00000002 OSTaskProfileEn
00001ce8 g     F .text	00000154 tutorialUitleg
00029fc0 g     O .bss	00000004 OSTime
00029ecc g     O .bss	00000004 Flags
000033a4 g     F .text	00000058 tekenBox
0004da8c g     O .bss	00000800 OSTaskIdleStk
00025164 g     F .text	0000003c _exit
00029f24 g     O .bss	00000004 ALT_inc_x
00018b78 g     F .text	0000015c OSMboxPostOpt
00023ca8 g     F .text	00000140 alt_alarm_start
000170e0 g     F .text	00000130 OSFlagNameGet
0001d014 g     F .text	00000064 OSTimeGet
00020c70 g     F .text	00000378 alt_up_sd_card_read
0000b3c4 g     F .text	000001b8 __smakebuf_r
00023294 g     F .text	00000070 alt_up_ps2_wait_for_ack
00004780 g     F .text	00000098 strlen
000249f4 g     F .text	0000001c OSTaskSwHook
00024474 g     F .text	00000158 open
0004e28c g     O .bss	00000b40 OSEventTbl
000127e4 g     F .text	000000e0 .hidden __gedf2
0004edcc g     O .bss	00000510 OSTCBTbl
0001b184 g     F .text	000000fc OSSemSet
00027ebc g     O .rwdata	00000004 eenkeer
000032c4 g     F .text	00000040 clearScreen
00027edc g     O .rwdata	00000004 __wctomb
0000ecbc g     F .text	00000018 __sprint_r
00029f28 g     O .bss	00000004 ALT_x2
00024040 g     F .text	00000030 alt_icache_flush_all
00002bd0 g     F .text	00000120 Highscores
00022940 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00027f78 g     O .rwdata	00000004 alt_priority_mask
0001a928 g     F .text	00000268 OSSemDel
00029fc4 g     O .bss	00000004 OSFlagFreeList
00027f10 g     O .rwdata	00000002 OSEventNameSize
000183f0 g     F .text	00000268 OSMboxDel
000086f8 g     F .text	00000024 __vfprintf_internal
00029fc8 g     O .bss	00000001 OSStatRdy
00029ed0 g     O .bss	00000004 MailBox
0004f2dc g     O .bss	00000054 OSTCBPrioTbl
00010920 g     F .text	0000005c _wctomb_r
000145b8 g     F .text	000000c0 __env_lock
000234d0 g     F .text	0000008c alt_up_ps2_read_fd
00027f56 g     O .rwdata	00000002 OSTaskSwHookEn
00027ea4 g     O .rwdata	00000004 xLinks
000130c8 g     F .text	000008d0 .hidden __subdf3
00022de0 g     F .text	00000090 alt_up_irda_read_fd
0000c3fc g     F .text	000000b0 __lo0bits
00027f7c g     O .rwdata	00000008 alt_alarm_list
00027f1e g     O .rwdata	00000002 OSFlagWidth
00023ef8 g     F .text	0000005c _do_ctors
000236e8 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00010830 g     F .text	000000c0 wcrtomb
00013c48 g     F .text	000000d0 close
00029f74 g     O .bss	00000004 alt_envsem
00029fcc g     O .bss	00000004 OSIdleCtrRun
00027eb0 g     O .rwdata	00000004 xOnder
00015788 g     F .text	00000020 OSVersion
00027f68 g     O .rwdata	00000002 OSTmrCfgWheelSize
00013f9c g     F .text	00000080 alt_load
0001cb08 g     F .text	0000006c OS_TaskStkClr
000033fc g     F .text	00000088 tekenBox2
00027f42 g     O .rwdata	00000002 OSTaskCreateEn
00029f3c g     O .bss	00000004 menuSem
0001ea98 g     F .text	0000029c match_file_record_to_name_ext
00015d64 g     F .text	00000064 OS_EventWaitListInit
000105d4 g     F .text	0000005c fputwc
00024a80 g     F .text	0000001c OSTaskIdleHook
00029f2c g     O .bss	00000004 X
00000000  w      *UND*	00000000 free
0000a850 g     F .text	00000004 __sinit_lock_acquire
0000c170 g     F .text	00000120 __multadd
00001754 g     F .text	00000180 endSingleplayer
0001c7c8 g     F .text	00000214 OSTaskSuspend
0000c148 g     F .text	00000028 _Bfree
00029ed4 g     O .bss	00000004 counter2
00029ed8 g     O .bss	00000004 Flags_Tutorial
000163e0 g     F .text	0000005c OS_TaskIdle
00027f6e g     O .rwdata	00000002 OSTmrTblSize
0001a570 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00151840 	call	15184 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800174 	movhi	r2,5
 140:	10be2604 	addi	r2,r2,-1896
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800174 	movhi	r2,5
 158:	10be2604 	addi	r2,r2,-1896
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	00152000 	call	15200 <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a86017 	ldw	r2,-24192(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a86017 	ldw	r2,-24192(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d6bfa414 	ori	gp,gp,65168
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     258:	10a7ad14 	ori	r2,r2,40628

    movhi r3, %hi(__bss_end)
     25c:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
     260:	18fe6614 	ori	r3,r3,63896

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	0013f9c0 	call	13f9c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	00141400 	call	14140 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <controllers>:
}Balk;

alt_up_parallel_port_dev *gpio_dev; //	gpio device


void controllers(void* pdata) {
     280:	defff804 	addi	sp,sp,-32
     284:	dfc00715 	stw	ra,28(sp)
     288:	df000615 	stw	fp,24(sp)
     28c:	df000604 	addi	fp,sp,24
     290:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	int ID = (int*) pdata;
     294:	e0bfff17 	ldw	r2,-4(fp)
     298:	e0bffc15 	stw	r2,-16(fp)
	int hoogte = 50;
     29c:	00800c84 	movi	r2,50
     2a0:	e0bffb15 	stw	r2,-20(fp)

	Balk balkje;

	while (1) {
		OSFlagPend(Flags, C1_Flag + C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     2a4:	d0e80f17 	ldw	r3,-24516(gp)
     2a8:	e0bffd04 	addi	r2,fp,-12
     2ac:	d8800015 	stw	r2,0(sp)
     2b0:	1809883a 	mov	r4,r3
     2b4:	01400304 	movi	r5,12
     2b8:	01800044 	movi	r6,1
     2bc:	000f883a 	mov	r7,zero
     2c0:	00173600 	call	17360 <OSFlagPend>
		balkje.Hoogte = hoogte;
     2c4:	e0bffb17 	ldw	r2,-20(fp)
     2c8:	e0bffe15 	stw	r2,-8(fp)

		if (controller(ID) == 1) {
     2cc:	e13ffc17 	ldw	r4,-16(fp)
     2d0:	000039c0 	call	39c <controller>
     2d4:	10800058 	cmpnei	r2,r2,1
     2d8:	1000051e 	bne	r2,zero,2f0 <controllers+0x70>
			hoogte = moveDown(ID, hoogte);
     2dc:	e13ffc17 	ldw	r4,-16(fp)
     2e0:	e17ffb17 	ldw	r5,-20(fp)
     2e4:	00006880 	call	688 <moveDown>
     2e8:	e0bffb15 	stw	r2,-20(fp)
     2ec:	00000706 	br	30c <controllers+0x8c>
		} else if (controller(ID) == 0) {
     2f0:	e13ffc17 	ldw	r4,-16(fp)
     2f4:	000039c0 	call	39c <controller>
     2f8:	1000041e 	bne	r2,zero,30c <controllers+0x8c>
			hoogte = moveUp(ID, hoogte);
     2fc:	e13ffc17 	ldw	r4,-16(fp)
     300:	e17ffb17 	ldw	r5,-20(fp)
     304:	00005880 	call	588 <moveUp>
     308:	e0bffb15 	stw	r2,-20(fp)
		}

		if(ID == 1){
     30c:	e0bffc17 	ldw	r2,-16(fp)
     310:	10800058 	cmpnei	r2,r2,1
     314:	10000e1e 	bne	r2,zero,350 <controllers+0xd0>
			OSFlagPend(Flags, C1_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     318:	d0e80f17 	ldw	r3,-24516(gp)
     31c:	e0bffd04 	addi	r2,fp,-12
     320:	d8800015 	stw	r2,0(sp)
     324:	1809883a 	mov	r4,r3
     328:	01400104 	movi	r5,4
     32c:	01800044 	movi	r6,1
     330:	000f883a 	mov	r7,zero
     334:	00173600 	call	17360 <OSFlagPend>
			OSMboxPost(MailBox, (void*)&balkje);
     338:	d0e81017 	ldw	r3,-24512(gp)
     33c:	e0bffe04 	addi	r2,fp,-8
     340:	1809883a 	mov	r4,r3
     344:	100b883a 	mov	r5,r2
     348:	0018a680 	call	18a68 <OSMboxPost>
     34c:	00001006 	br	390 <controllers+0x110>
		}else if(ID == 2){
     350:	e0bffc17 	ldw	r2,-16(fp)
     354:	10800098 	cmpnei	r2,r2,2
     358:	10000d1e 	bne	r2,zero,390 <controllers+0x110>
			OSFlagPend(Flags, C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     35c:	d0e80f17 	ldw	r3,-24516(gp)
     360:	e0bffd04 	addi	r2,fp,-12
     364:	d8800015 	stw	r2,0(sp)
     368:	1809883a 	mov	r4,r3
     36c:	01400204 	movi	r5,8
     370:	01800044 	movi	r6,1
     374:	000f883a 	mov	r7,zero
     378:	00173600 	call	17360 <OSFlagPend>
			OSMboxPost(MailBox2, (void*)&balkje);
     37c:	d0e80e17 	ldw	r3,-24520(gp)
     380:	e0bffe04 	addi	r2,fp,-8
     384:	1809883a 	mov	r4,r3
     388:	100b883a 	mov	r5,r2
     38c:	0018a680 	call	18a68 <OSMboxPost>
		}

		OSTimeDly(1);
     390:	01000044 	movi	r4,1
     394:	001cb740 	call	1cb74 <OSTimeDly>
	}
     398:	003fc206 	br	2a4 <__alt_mem_Flash_flash_data+0xf40002a4>

0000039c <controller>:

}

int controller(int ID) {
     39c:	defff804 	addi	sp,sp,-32
     3a0:	dfc00715 	stw	ra,28(sp)
     3a4:	df000615 	stw	fp,24(sp)
     3a8:	df000604 	addi	fp,sp,24
     3ac:	e13fff15 	stw	r4,-4(fp)
	alt_up_parallel_port_dev * KEY_ptr = alt_up_parallel_port_open_dev(
     3b0:	010000b4 	movhi	r4,2
     3b4:	21146804 	addi	r4,r4,20896
     3b8:	0022f400 	call	22f40 <alt_up_parallel_port_open_dev>
     3bc:	e0bffa15 	stw	r2,-24(fp)
			"/dev/Pushbuttons");
	alt_up_parallel_port_dev * SW_switch_ptr = alt_up_parallel_port_open_dev(
     3c0:	010000b4 	movhi	r4,2
     3c4:	21146d04 	addi	r4,r4,20916
     3c8:	0022f400 	call	22f40 <alt_up_parallel_port_open_dev>
     3cc:	e0bffb15 	stw	r2,-20(fp)
			"/dev/Slider_Switches");
	gpio_dev = alt_up_parallel_port_open_dev("/dev/Expansion_JP5");		//	DE2-115 gpio
     3d0:	010000b4 	movhi	r4,2
     3d4:	21147304 	addi	r4,r4,20940
     3d8:	0022f400 	call	22f40 <alt_up_parallel_port_open_dev>
     3dc:	d0a80a15 	stw	r2,-24536(gp)
	alt_up_parallel_port_set_port_direction(gpio_dev, 0x00000001);		// 1-0-1-1	(1 = output; 0 = input)
     3e0:	d0a80a17 	ldw	r2,-24536(gp)
     3e4:	10800a17 	ldw	r2,40(r2)
     3e8:	10800104 	addi	r2,r2,4
     3ec:	1007883a 	mov	r3,r2
     3f0:	00800044 	movi	r2,1
     3f4:	18800035 	stwio	r2,0(r3)

	int KEY_value, SW_value, gpio_values;
	INT8U err;

	SW_value = alt_up_parallel_port_read_data(SW_switch_ptr);
     3f8:	e0bffb17 	ldw	r2,-20(fp)
     3fc:	10800a17 	ldw	r2,40(r2)
     400:	10800037 	ldwio	r2,0(r2)
     404:	e0bffc15 	stw	r2,-16(fp)
	KEY_value = alt_up_parallel_port_read_data(KEY_ptr); // read the pushbutton KEY values
     408:	e0bffa17 	ldw	r2,-24(fp)
     40c:	10800a17 	ldw	r2,40(r2)
     410:	10800037 	ldwio	r2,0(r2)
     414:	e0bffd15 	stw	r2,-12(fp)
	gpio_values = alt_up_parallel_port_read_data(gpio_dev);
     418:	d0a80a17 	ldw	r2,-24536(gp)
     41c:	10800a17 	ldw	r2,40(r2)
     420:	10800037 	ldwio	r2,0(r2)
     424:	e0bffe15 	stw	r2,-8(fp)

	//printf("gpio_value is: %d\n", gpio_values);

	if (ID == 2) {
     428:	e0bfff17 	ldw	r2,-4(fp)
     42c:	10800098 	cmpnei	r2,r2,2
     430:	1000131e 	bne	r2,zero,480 <controller+0xe4>
		if (KEY_value != 0) {
     434:	e0bffd17 	ldw	r2,-12(fp)
     438:	10000f26 	beq	r2,zero,478 <controller+0xdc>
			if (KEY_value == 8) {
     43c:	e0bffd17 	ldw	r2,-12(fp)
     440:	10800218 	cmpnei	r2,r2,8
     444:	1000021e 	bne	r2,zero,450 <controller+0xb4>
				return 1;
     448:	00800044 	movi	r2,1
     44c:	00003606 	br	528 <controller+0x18c>
			}
			if (KEY_value == 4) {
     450:	e0bffd17 	ldw	r2,-12(fp)
     454:	10800118 	cmpnei	r2,r2,4
     458:	1000021e 	bne	r2,zero,464 <controller+0xc8>
				return 0;
     45c:	0005883a 	mov	r2,zero
     460:	00003106 	br	528 <controller+0x18c>
			}
			if (KEY_value == 2) {
     464:	e0bffd17 	ldw	r2,-12(fp)
     468:	10800098 	cmpnei	r2,r2,2
     46c:	10002b1e 	bne	r2,zero,51c <controller+0x180>
				return 2;
     470:	00800084 	movi	r2,2
     474:	00002c06 	br	528 <controller+0x18c>
			}
		} else {
			return 3;
     478:	008000c4 	movi	r2,3
     47c:	00002a06 	br	528 <controller+0x18c>
		}

	} else if (ID == 1) {
     480:	e0bfff17 	ldw	r2,-4(fp)
     484:	10800058 	cmpnei	r2,r2,1
     488:	10000e1e 	bne	r2,zero,4c4 <controller+0x128>
		if (SW_value != 0) {
     48c:	e0bffc17 	ldw	r2,-16(fp)
     490:	10000a26 	beq	r2,zero,4bc <controller+0x120>
			if (SW_value == 131072) {
     494:	e0fffc17 	ldw	r3,-16(fp)
     498:	008000b4 	movhi	r2,2
     49c:	1880021e 	bne	r3,r2,4a8 <controller+0x10c>
				return 0;
     4a0:	0005883a 	mov	r2,zero
     4a4:	00002006 	br	528 <controller+0x18c>
			}else if(SW_value == 4){
     4a8:	e0bffc17 	ldw	r2,-16(fp)
     4ac:	10800118 	cmpnei	r2,r2,4
     4b0:	10001a1e 	bne	r2,zero,51c <controller+0x180>
				return 4;
     4b4:	00800104 	movi	r2,4
     4b8:	00001b06 	br	528 <controller+0x18c>
			}
		} else {
			return 1;
     4bc:	00800044 	movi	r2,1
     4c0:	00001906 	br	528 <controller+0x18c>
		}
	} else if(ID == 3){
     4c4:	e0bfff17 	ldw	r2,-4(fp)
     4c8:	108000d8 	cmpnei	r2,r2,3
     4cc:	1000131e 	bne	r2,zero,51c <controller+0x180>
		if(gpio_values != 0){
     4d0:	e0bffe17 	ldw	r2,-8(fp)
     4d4:	10000f26 	beq	r2,zero,514 <controller+0x178>
			if(gpio_values == -1){
     4d8:	e0bffe17 	ldw	r2,-8(fp)
     4dc:	10bfffd8 	cmpnei	r2,r2,-1
     4e0:	1000021e 	bne	r2,zero,4ec <controller+0x150>
				return 1;
     4e4:	00800044 	movi	r2,1
     4e8:	00000f06 	br	528 <controller+0x18c>
			} else if(gpio_values == -2){
     4ec:	e0bffe17 	ldw	r2,-8(fp)
     4f0:	10bfff98 	cmpnei	r2,r2,-2
     4f4:	1000021e 	bne	r2,zero,500 <controller+0x164>
				return 2;
     4f8:	00800084 	movi	r2,2
     4fc:	00000a06 	br	528 <controller+0x18c>
			} else if(gpio_values == -3){
     500:	e0bffe17 	ldw	r2,-8(fp)
     504:	10bfff58 	cmpnei	r2,r2,-3
     508:	1000041e 	bne	r2,zero,51c <controller+0x180>
				return 3;
     50c:	008000c4 	movi	r2,3
     510:	00000506 	br	528 <controller+0x18c>
			}
		}else{
			return 0;
     514:	0005883a 	mov	r2,zero
     518:	00000306 	br	528 <controller+0x18c>
		}
	}
	gpio_values &= 0x80000000;		//	negeer alle andere bits, die zijn waarschijnlijk HOOG !
     51c:	e0bffe17 	ldw	r2,-8(fp)
     520:	10a0002c 	andhi	r2,r2,32768
     524:	e0bffe15 	stw	r2,-8(fp)

}
     528:	e037883a 	mov	sp,fp
     52c:	dfc00117 	ldw	ra,4(sp)
     530:	df000017 	ldw	fp,0(sp)
     534:	dec00204 	addi	sp,sp,8
     538:	f800283a 	ret

0000053c <checkID>:

int checkID(int ID) {
     53c:	defffe04 	addi	sp,sp,-8
     540:	df000115 	stw	fp,4(sp)
     544:	df000104 	addi	fp,sp,4
     548:	e13fff15 	stw	r4,-4(fp)
	if (ID == 1) {
     54c:	e0bfff17 	ldw	r2,-4(fp)
     550:	10800058 	cmpnei	r2,r2,1
     554:	1000021e 	bne	r2,zero,560 <checkID+0x24>
		return 15;
     558:	008003c4 	movi	r2,15
     55c:	00000606 	br	578 <checkID+0x3c>
	} else if (ID == 2) {
     560:	e0bfff17 	ldw	r2,-4(fp)
     564:	10800098 	cmpnei	r2,r2,2
     568:	1000021e 	bne	r2,zero,574 <checkID+0x38>
		return 300;
     56c:	00804b04 	movi	r2,300
     570:	00000106 	br	578 <checkID+0x3c>

	}
	return 0;
     574:	0005883a 	mov	r2,zero
}
     578:	e037883a 	mov	sp,fp
     57c:	df000017 	ldw	fp,0(sp)
     580:	dec00104 	addi	sp,sp,4
     584:	f800283a 	ret

00000588 <moveUp>:

int moveUp(int ID, int current) {
     588:	defff904 	addi	sp,sp,-28
     58c:	dfc00615 	stw	ra,24(sp)
     590:	df000515 	stw	fp,20(sp)
     594:	df000504 	addi	fp,sp,20
     598:	e13ffe15 	stw	r4,-8(fp)
     59c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     5a0:	e0bfff17 	ldw	r2,-4(fp)
     5a4:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     5a8:	e13ffe17 	ldw	r4,-8(fp)
     5ac:	000053c0 	call	53c <checkID>
     5b0:	e0bffd15 	stw	r2,-12(fp)

	if (boven >= 4 && boven <= 184) {
     5b4:	e0bffc17 	ldw	r2,-16(fp)
     5b8:	10800110 	cmplti	r2,r2,4
     5bc:	10001c1e 	bne	r2,zero,630 <moveUp+0xa8>
     5c0:	e0bffc17 	ldw	r2,-16(fp)
     5c4:	10802e48 	cmpgei	r2,r2,185
     5c8:	1000191e 	bne	r2,zero,630 <moveUp+0xa8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
     5cc:	e0bffd17 	ldw	r2,-12(fp)
     5d0:	11800144 	addi	r6,r2,5
     5d4:	e0bffc17 	ldw	r2,-16(fp)
     5d8:	10c00044 	addi	r3,r2,1
     5dc:	00803fc4 	movi	r2,255
     5e0:	d8800015 	stw	r2,0(sp)
     5e4:	e13ffd17 	ldw	r4,-12(fp)
     5e8:	e17ffc17 	ldw	r5,-16(fp)
     5ec:	180f883a 	mov	r7,r3
     5f0:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
     5f4:	e0bffc17 	ldw	r2,-16(fp)
     5f8:	11400c84 	addi	r5,r2,50
     5fc:	e0bffd17 	ldw	r2,-12(fp)
     600:	10c00144 	addi	r3,r2,5
     604:	e0bffc17 	ldw	r2,-16(fp)
     608:	10800cc4 	addi	r2,r2,51
     60c:	d8000015 	stw	zero,0(sp)
     610:	e13ffd17 	ldw	r4,-12(fp)
     614:	180d883a 	mov	r6,r3
     618:	100f883a 	mov	r7,r2
     61c:	00039bc0 	call	39bc <VGA_box>
		boven--;
     620:	e0bffc17 	ldw	r2,-16(fp)
     624:	10bfffc4 	addi	r2,r2,-1
     628:	e0bffc15 	stw	r2,-16(fp)
int moveUp(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven >= 4 && boven <= 184) {
     62c:	00001006 	br	670 <moveUp+0xe8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
		boven--;
	} else if (boven > 184) {
     630:	e0bffc17 	ldw	r2,-16(fp)
     634:	10802e50 	cmplti	r2,r2,185
     638:	10000d1e 	bne	r2,zero,670 <moveUp+0xe8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
     63c:	e0bffd17 	ldw	r2,-12(fp)
     640:	11800144 	addi	r6,r2,5
     644:	e0bffc17 	ldw	r2,-16(fp)
     648:	10c00044 	addi	r3,r2,1
     64c:	00803fc4 	movi	r2,255
     650:	d8800015 	stw	r2,0(sp)
     654:	e13ffd17 	ldw	r4,-12(fp)
     658:	e17ffc17 	ldw	r5,-16(fp)
     65c:	180f883a 	mov	r7,r3
     660:	00039bc0 	call	39bc <VGA_box>
		boven--;
     664:	e0bffc17 	ldw	r2,-16(fp)
     668:	10bfffc4 	addi	r2,r2,-1
     66c:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     670:	e0bffc17 	ldw	r2,-16(fp)

}
     674:	e037883a 	mov	sp,fp
     678:	dfc00117 	ldw	ra,4(sp)
     67c:	df000017 	ldw	fp,0(sp)
     680:	dec00204 	addi	sp,sp,8
     684:	f800283a 	ret

00000688 <moveDown>:
int moveDown(int ID, int current) {
     688:	defff904 	addi	sp,sp,-28
     68c:	dfc00615 	stw	ra,24(sp)
     690:	df000515 	stw	fp,20(sp)
     694:	df000504 	addi	fp,sp,20
     698:	e13ffe15 	stw	r4,-8(fp)
     69c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     6a0:	e0bfff17 	ldw	r2,-4(fp)
     6a4:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     6a8:	e13ffe17 	ldw	r4,-8(fp)
     6ac:	000053c0 	call	53c <checkID>
     6b0:	e0bffd15 	stw	r2,-12(fp)

	if (boven <= 184 && boven >= 4) {
     6b4:	e0bffc17 	ldw	r2,-16(fp)
     6b8:	10802e48 	cmpgei	r2,r2,185
     6bc:	10001c1e 	bne	r2,zero,730 <moveDown+0xa8>
     6c0:	e0bffc17 	ldw	r2,-16(fp)
     6c4:	10800110 	cmplti	r2,r2,4
     6c8:	1000191e 	bne	r2,zero,730 <moveDown+0xa8>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
     6cc:	e0bffc17 	ldw	r2,-16(fp)
     6d0:	11400c84 	addi	r5,r2,50
     6d4:	e0bffd17 	ldw	r2,-12(fp)
     6d8:	11800144 	addi	r6,r2,5
     6dc:	e0bffc17 	ldw	r2,-16(fp)
     6e0:	10c00cc4 	addi	r3,r2,51
     6e4:	00803fc4 	movi	r2,255
     6e8:	d8800015 	stw	r2,0(sp)
     6ec:	e13ffd17 	ldw	r4,-12(fp)
     6f0:	180f883a 	mov	r7,r3
     6f4:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, boven, X + 5, boven + 1, 0);
     6f8:	e0bffd17 	ldw	r2,-12(fp)
     6fc:	10c00144 	addi	r3,r2,5
     700:	e0bffc17 	ldw	r2,-16(fp)
     704:	10800044 	addi	r2,r2,1
     708:	d8000015 	stw	zero,0(sp)
     70c:	e13ffd17 	ldw	r4,-12(fp)
     710:	e17ffc17 	ldw	r5,-16(fp)
     714:	180d883a 	mov	r6,r3
     718:	100f883a 	mov	r7,r2
     71c:	00039bc0 	call	39bc <VGA_box>
		boven++;
     720:	e0bffc17 	ldw	r2,-16(fp)
     724:	10800044 	addi	r2,r2,1
     728:	e0bffc15 	stw	r2,-16(fp)
int moveDown(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven <= 184 && boven >= 4) {
     72c:	00001106 	br	774 <moveDown+0xec>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
		VGA_box(X, boven, X + 5, boven + 1, 0);
		boven++;
	} else if (boven < 4) {
     730:	e0bffc17 	ldw	r2,-16(fp)
     734:	10800108 	cmpgei	r2,r2,4
     738:	10000e1e 	bne	r2,zero,774 <moveDown+0xec>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
     73c:	e0bffc17 	ldw	r2,-16(fp)
     740:	11400c84 	addi	r5,r2,50
     744:	e0bffd17 	ldw	r2,-12(fp)
     748:	11800144 	addi	r6,r2,5
     74c:	e0bffc17 	ldw	r2,-16(fp)
     750:	10c00cc4 	addi	r3,r2,51
     754:	00803fc4 	movi	r2,255
     758:	d8800015 	stw	r2,0(sp)
     75c:	e13ffd17 	ldw	r4,-12(fp)
     760:	180f883a 	mov	r7,r3
     764:	00039bc0 	call	39bc <VGA_box>
		boven++;
     768:	e0bffc17 	ldw	r2,-16(fp)
     76c:	10800044 	addi	r2,r2,1
     770:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     774:	e0bffc17 	ldw	r2,-16(fp)

}
     778:	e037883a 	mov	sp,fp
     77c:	dfc00117 	ldw	ra,4(sp)
     780:	df000017 	ldw	fp,0(sp)
     784:	dec00204 	addi	sp,sp,8
     788:	f800283a 	ret

0000078c <read_file>:
typedef struct balk {
	int Hoogte;
} Balk;

void read_file()
{
     78c:	defff804 	addi	sp,sp,-32
     790:	dfc00715 	stw	ra,28(sp)
     794:	df000615 	stw	fp,24(sp)
     798:	df000604 	addi	fp,sp,24
	short int Read;
	Read = alt_up_sd_card_fopen("hoi.txt", false);
     79c:	010000b4 	movhi	r4,2
     7a0:	21147804 	addi	r4,r4,20960
     7a4:	000b883a 	mov	r5,zero
     7a8:	00207e00 	call	207e0 <alt_up_sd_card_fopen>
     7ac:	e0bffd0d 	sth	r2,-12(fp)

	bzero(highscores, 200);
     7b0:	010000f4 	movhi	r4,3
     7b4:	21280504 	addi	r4,r4,-24556
     7b8:	01403204 	movi	r5,200
     7bc:	00043240 	call	4324 <bzero>

	int i = 0;
     7c0:	e03ffa15 	stw	zero,-24(fp)
	int k = 0;
     7c4:	e03ffe15 	stw	zero,-8(fp)

	char buffer[1] = "";
     7c8:	e03fff05 	stb	zero,-4(fp)
	short int c = 1;
     7cc:	00800044 	movi	r2,1
     7d0:	e0bffb0d 	sth	r2,-20(fp)

	c = alt_up_sd_card_read(Read);
     7d4:	e0bffd0f 	ldh	r2,-12(fp)
     7d8:	1009883a 	mov	r4,r2
     7dc:	0020c700 	call	20c70 <alt_up_sd_card_read>
     7e0:	e0bffb0d 	sth	r2,-20(fp)

	while (c != -1){
     7e4:	00001b06 	br	854 <read_file+0xc8>
		if(c == '|'){		//check voor komma
     7e8:	e0bffb0f 	ldh	r2,-20(fp)
     7ec:	10801f18 	cmpnei	r2,r2,124
     7f0:	1000041e 	bne	r2,zero,804 <read_file+0x78>
			i++;
     7f4:	e0bffa17 	ldw	r2,-24(fp)
     7f8:	10800044 	addi	r2,r2,1
     7fc:	e0bffa15 	stw	r2,-24(fp)
     800:	00001006 	br	844 <read_file+0xb8>
		}else{
			sprintf(buffer, "%c", c);
     804:	e0bffb0f 	ldh	r2,-20(fp)
     808:	e0ffff04 	addi	r3,fp,-4
     80c:	1809883a 	mov	r4,r3
     810:	014000b4 	movhi	r5,2
     814:	29547a04 	addi	r5,r5,20968
     818:	100d883a 	mov	r6,r2
     81c:	00045fc0 	call	45fc <sprintf>
			strcat(highscores[i], buffer);
     820:	e0bffa17 	ldw	r2,-24(fp)
     824:	10c00524 	muli	r3,r2,20
     828:	008000f4 	movhi	r2,3
     82c:	10a80504 	addi	r2,r2,-24556
     830:	1887883a 	add	r3,r3,r2
     834:	e0bfff04 	addi	r2,fp,-4
     838:	1809883a 	mov	r4,r3
     83c:	100b883a 	mov	r5,r2
     840:	00046680 	call	4668 <strcat>
		}
		c = alt_up_sd_card_read(Read);		//lees volgende char
     844:	e0bffd0f 	ldh	r2,-12(fp)
     848:	1009883a 	mov	r4,r2
     84c:	0020c700 	call	20c70 <alt_up_sd_card_read>
     850:	e0bffb0d 	sth	r2,-20(fp)
	char buffer[1] = "";
	short int c = 1;

	c = alt_up_sd_card_read(Read);

	while (c != -1){
     854:	e0bffb0f 	ldh	r2,-20(fp)
     858:	10bfffd8 	cmpnei	r2,r2,-1
     85c:	103fe21e 	bne	r2,zero,7e8 <__alt_mem_Flash_flash_data+0xf40007e8>
		}
		c = alt_up_sd_card_read(Read);		//lees volgende char
	}

	int j;
	for(j = 0; j < 5; j++){
     860:	e03ffc15 	stw	zero,-16(fp)
     864:	00000d06 	br	89c <read_file+0x110>
		printf("Number is : %d data :%s\n",j , highscores[j]);
     868:	e0bffc17 	ldw	r2,-16(fp)
     86c:	10c00524 	muli	r3,r2,20
     870:	008000f4 	movhi	r2,3
     874:	10a80504 	addi	r2,r2,-24556
     878:	1885883a 	add	r2,r3,r2
     87c:	010000b4 	movhi	r4,2
     880:	21147b04 	addi	r4,r4,20972
     884:	e17ffc17 	ldw	r5,-16(fp)
     888:	100d883a 	mov	r6,r2
     88c:	000448c0 	call	448c <printf>
		}
		c = alt_up_sd_card_read(Read);		//lees volgende char
	}

	int j;
	for(j = 0; j < 5; j++){
     890:	e0bffc17 	ldw	r2,-16(fp)
     894:	10800044 	addi	r2,r2,1
     898:	e0bffc15 	stw	r2,-16(fp)
     89c:	e0bffc17 	ldw	r2,-16(fp)
     8a0:	10800150 	cmplti	r2,r2,5
     8a4:	103ff01e 	bne	r2,zero,868 <__alt_mem_Flash_flash_data+0xf4000868>
		printf("Number is : %d data :%s\n",j , highscores[j]);
	}

	alt_up_sd_card_fclose(Read);						//sluit het bestand
     8a8:	e0bffd0f 	ldh	r2,-12(fp)
     8ac:	1009883a 	mov	r4,r2
     8b0:	00217080 	call	21708 <alt_up_sd_card_fclose>
}
     8b4:	e037883a 	mov	sp,fp
     8b8:	dfc00117 	ldw	ra,4(sp)
     8bc:	df000017 	ldw	fp,0(sp)
     8c0:	dec00204 	addi	sp,sp,8
     8c4:	f800283a 	ret

000008c8 <write_file>:
void write_file(char input[]){
     8c8:	defffb04 	addi	sp,sp,-20
     8cc:	dfc00415 	stw	ra,16(sp)
     8d0:	df000315 	stw	fp,12(sp)
     8d4:	df000304 	addi	fp,sp,12
     8d8:	e13fff15 	stw	r4,-4(fp)
	short int Write;
	Write = alt_up_sd_card_fopen("hoi.txt", false);
     8dc:	010000b4 	movhi	r4,2
     8e0:	21147804 	addi	r4,r4,20960
     8e4:	000b883a 	mov	r5,zero
     8e8:	00207e00 	call	207e0 <alt_up_sd_card_fopen>
     8ec:	e0bffe0d 	sth	r2,-8(fp)
	int i = 0;
     8f0:	e03ffd15 	stw	zero,-12(fp)
	bool writing;
	if(Write < 0){
     8f4:	e0bffe0f 	ldh	r2,-8(fp)
     8f8:	1000040e 	bge	r2,zero,90c <write_file+0x44>
		printf("Can't open\n");
     8fc:	010000b4 	movhi	r4,2
     900:	21148204 	addi	r4,r4,21000
     904:	00045900 	call	4590 <puts>
     908:	00002606 	br	9a4 <write_file+0xdc>
	}else{
		while(input[i] != '\0'){
     90c:	00001706 	br	96c <write_file+0xa4>
			writing = alt_up_sd_card_write(Write, input[i]);
     910:	e13ffe0f 	ldh	r4,-8(fp)
     914:	e0bffd17 	ldw	r2,-12(fp)
     918:	e0ffff17 	ldw	r3,-4(fp)
     91c:	1885883a 	add	r2,r3,r2
     920:	10800003 	ldbu	r2,0(r2)
     924:	10803fcc 	andi	r2,r2,255
     928:	1080201c 	xori	r2,r2,128
     92c:	10bfe004 	addi	r2,r2,-128
     930:	100b883a 	mov	r5,r2
     934:	0020fe80 	call	20fe8 <alt_up_sd_card_write>
     938:	e0bffe85 	stb	r2,-6(fp)
			printf("%c", input[i]);
     93c:	e0bffd17 	ldw	r2,-12(fp)
     940:	e0ffff17 	ldw	r3,-4(fp)
     944:	1885883a 	add	r2,r3,r2
     948:	10800003 	ldbu	r2,0(r2)
     94c:	10803fcc 	andi	r2,r2,255
     950:	1080201c 	xori	r2,r2,128
     954:	10bfe004 	addi	r2,r2,-128
     958:	1009883a 	mov	r4,r2
     95c:	00044d00 	call	44d0 <putchar>
			i++;
     960:	e0bffd17 	ldw	r2,-12(fp)
     964:	10800044 	addi	r2,r2,1
     968:	e0bffd15 	stw	r2,-12(fp)
	int i = 0;
	bool writing;
	if(Write < 0){
		printf("Can't open\n");
	}else{
		while(input[i] != '\0'){
     96c:	e0bffd17 	ldw	r2,-12(fp)
     970:	e0ffff17 	ldw	r3,-4(fp)
     974:	1885883a 	add	r2,r3,r2
     978:	10800003 	ldbu	r2,0(r2)
     97c:	10803fcc 	andi	r2,r2,255
     980:	1080201c 	xori	r2,r2,128
     984:	10bfe004 	addi	r2,r2,-128
     988:	103fe11e 	bne	r2,zero,910 <__alt_mem_Flash_flash_data+0xf4000910>
			writing = alt_up_sd_card_write(Write, input[i]);
			printf("%c", input[i]);
			i++;
		}
		alt_up_sd_card_fclose(Write);
     98c:	e0bffe0f 	ldh	r2,-8(fp)
     990:	1009883a 	mov	r4,r2
     994:	00217080 	call	21708 <alt_up_sd_card_fclose>
		printf("\nFile is geschreven\n");
     998:	010000b4 	movhi	r4,2
     99c:	21148504 	addi	r4,r4,21012
     9a0:	00045900 	call	4590 <puts>
	}

}
     9a4:	e037883a 	mov	sp,fp
     9a8:	dfc00117 	ldw	ra,4(sp)
     9ac:	df000017 	ldw	fp,0(sp)
     9b0:	dec00204 	addi	sp,sp,8
     9b4:	f800283a 	ret

000009b8 <sorteer>:
void sorteer(){
     9b8:	deffe304 	addi	sp,sp,-116
     9bc:	dfc01c15 	stw	ra,112(sp)
     9c0:	df001b15 	stw	fp,108(sp)
     9c4:	dc001a15 	stw	r16,104(sp)
     9c8:	df001b04 	addi	fp,sp,108
	char letter1, letter2, letter3;


	char cijfers[4];

	if(score3 < 100){
     9cc:	d0a81417 	ldw	r2,-24496(gp)
     9d0:	10801908 	cmpgei	r2,r2,100
     9d4:	10000c1e 	bne	r2,zero,a08 <sorteer+0x50>
		cijfers[0] = 0;
     9d8:	e03fea05 	stb	zero,-88(fp)
		cijfers[1] = score3 / 10;
     9dc:	d0e81417 	ldw	r3,-24496(gp)
     9e0:	00800284 	movi	r2,10
     9e4:	1885283a 	div	r2,r3,r2
     9e8:	e0bfea45 	stb	r2,-87(fp)
		cijfers[2] = score3 %10;
     9ec:	d0a81417 	ldw	r2,-24496(gp)
     9f0:	00c00284 	movi	r3,10
     9f4:	10c7283a 	div	r3,r2,r3
     9f8:	18c002a4 	muli	r3,r3,10
     9fc:	10c5c83a 	sub	r2,r2,r3
     a00:	e0bfea85 	stb	r2,-86(fp)
     a04:	00001d06 	br	a7c <sorteer+0xc4>
	}else if(score3 < 10){
     a08:	d0a81417 	ldw	r2,-24496(gp)
     a0c:	10800288 	cmpgei	r2,r2,10
     a10:	1000051e 	bne	r2,zero,a28 <sorteer+0x70>
		cijfers[0] = 0;
     a14:	e03fea05 	stb	zero,-88(fp)
		cijfers[1] = 0;
     a18:	e03fea45 	stb	zero,-87(fp)
		cijfers[2] = score3;
     a1c:	d0a81417 	ldw	r2,-24496(gp)
     a20:	e0bfea85 	stb	r2,-86(fp)
     a24:	00001506 	br	a7c <sorteer+0xc4>
	}else if(score3 > 100){
     a28:	d0a81417 	ldw	r2,-24496(gp)
     a2c:	10801950 	cmplti	r2,r2,101
     a30:	1000121e 	bne	r2,zero,a7c <sorteer+0xc4>
		cijfers[0] = score3 /100;
     a34:	d0e81417 	ldw	r3,-24496(gp)
     a38:	00801904 	movi	r2,100
     a3c:	1885283a 	div	r2,r3,r2
     a40:	e0bfea05 	stb	r2,-88(fp)
		cijfers[1] = score3 /10 %10;
     a44:	d0e81417 	ldw	r3,-24496(gp)
     a48:	00800284 	movi	r2,10
     a4c:	1885283a 	div	r2,r3,r2
     a50:	00c00284 	movi	r3,10
     a54:	10c7283a 	div	r3,r2,r3
     a58:	18c002a4 	muli	r3,r3,10
     a5c:	10c5c83a 	sub	r2,r2,r3
     a60:	e0bfea45 	stb	r2,-87(fp)
		cijfers[2] = score3 %10;
     a64:	d0a81417 	ldw	r2,-24496(gp)
     a68:	00c00284 	movi	r3,10
     a6c:	10c7283a 	div	r3,r2,r3
     a70:	18c002a4 	muli	r3,r3,10
     a74:	10c5c83a 	sub	r2,r2,r3
     a78:	e0bfea85 	stb	r2,-86(fp)
	}


	char buffer[30] = "";
     a7c:	e03feb15 	stw	zero,-84(fp)
     a80:	e03fec15 	stw	zero,-80(fp)
     a84:	e03fed15 	stw	zero,-76(fp)
     a88:	e03fee15 	stw	zero,-72(fp)
     a8c:	e03fef15 	stw	zero,-68(fp)
     a90:	e03ff015 	stw	zero,-64(fp)
     a94:	e03ff115 	stw	zero,-60(fp)
     a98:	e03ff20d 	sth	zero,-56(fp)
	char input[50] = "";
     a9c:	e03ff28d 	sth	zero,-54(fp)
     aa0:	e03ff30d 	sth	zero,-52(fp)
     aa4:	e0fff384 	addi	r3,fp,-50
     aa8:	00800b84 	movi	r2,46
     aac:	1809883a 	mov	r4,r3
     ab0:	000b883a 	mov	r5,zero
     ab4:	100d883a 	mov	r6,r2
     ab8:	000433c0 	call	433c <memset>

	for(i = 0; i < 5; i++){
     abc:	e03fe515 	stw	zero,-108(fp)
     ac0:	00008a06 	br	cec <sorteer+0x334>
		hoogste = ((highscores[i][4] - '0') *100) +
     ac4:	008000f4 	movhi	r2,3
     ac8:	10a80504 	addi	r2,r2,-24556
     acc:	e0ffe517 	ldw	r3,-108(fp)
     ad0:	18c00524 	muli	r3,r3,20
     ad4:	18c00104 	addi	r3,r3,4
     ad8:	10c5883a 	add	r2,r2,r3
     adc:	10800003 	ldbu	r2,0(r2)
     ae0:	10803fcc 	andi	r2,r2,255
     ae4:	1080201c 	xori	r2,r2,128
     ae8:	10bfe004 	addi	r2,r2,-128
     aec:	10bff404 	addi	r2,r2,-48
     af0:	10c01924 	muli	r3,r2,100
				   ((highscores[i][5] - '0') *10) +
     af4:	008000f4 	movhi	r2,3
     af8:	10a80504 	addi	r2,r2,-24556
     afc:	e13fe517 	ldw	r4,-108(fp)
     b00:	21000524 	muli	r4,r4,20
     b04:	21000144 	addi	r4,r4,5
     b08:	1105883a 	add	r2,r2,r4
     b0c:	10800003 	ldbu	r2,0(r2)
     b10:	10803fcc 	andi	r2,r2,255
     b14:	1080201c 	xori	r2,r2,128
     b18:	10bfe004 	addi	r2,r2,-128
     b1c:	10bff404 	addi	r2,r2,-48
     b20:	108002a4 	muli	r2,r2,10

	char buffer[30] = "";
	char input[50] = "";

	for(i = 0; i < 5; i++){
		hoogste = ((highscores[i][4] - '0') *100) +
     b24:	1887883a 	add	r3,r3,r2
				   ((highscores[i][5] - '0') *10) +
				   (highscores[i][6] - '0');
     b28:	008000f4 	movhi	r2,3
     b2c:	10a80504 	addi	r2,r2,-24556
     b30:	e13fe517 	ldw	r4,-108(fp)
     b34:	21000524 	muli	r4,r4,20
     b38:	21000184 	addi	r4,r4,6
     b3c:	1105883a 	add	r2,r2,r4
     b40:	10800003 	ldbu	r2,0(r2)
     b44:	10803fcc 	andi	r2,r2,255
     b48:	1080201c 	xori	r2,r2,128
     b4c:	10bfe004 	addi	r2,r2,-128
     b50:	10bff404 	addi	r2,r2,-48

	char buffer[30] = "";
	char input[50] = "";

	for(i = 0; i < 5; i++){
		hoogste = ((highscores[i][4] - '0') *100) +
     b54:	1885883a 	add	r2,r3,r2
     b58:	e0bfe915 	stw	r2,-92(fp)
				   ((highscores[i][5] - '0') *10) +
				   (highscores[i][6] - '0');
		if(hoogste < score3){
     b5c:	d0a81417 	ldw	r2,-24496(gp)
     b60:	e0ffe917 	ldw	r3,-92(fp)
     b64:	18805b0e 	bge	r3,r2,cd4 <sorteer+0x31c>

			schuifScores(i);
     b68:	e13fe517 	ldw	r4,-108(fp)
     b6c:	0000d140 	call	d14 <schuifScores>
			printf("score = hoger dan %de score\n", i);
     b70:	010000b4 	movhi	r4,2
     b74:	21148a04 	addi	r4,r4,21032
     b78:	e17fe517 	ldw	r5,-108(fp)
     b7c:	000448c0 	call	448c <printf>
			buffer[0] = a[0];
     b80:	d0a82403 	ldbu	r2,-24432(gp)
     b84:	e0bfeb05 	stb	r2,-84(fp)
			buffer[1] = b[0];
     b88:	d0a81603 	ldbu	r2,-24488(gp)
     b8c:	e0bfeb45 	stb	r2,-83(fp)
			buffer[2] = c[0];
     b90:	d0a81c03 	ldbu	r2,-24464(gp)
     b94:	e0bfeb85 	stb	r2,-82(fp)
			buffer[3] = ' ';
     b98:	00800804 	movi	r2,32
     b9c:	e0bfebc5 	stb	r2,-81(fp)
			for(k = 4; k < 7; k++){
     ba0:	00800104 	movi	r2,4
     ba4:	e0bfe615 	stw	r2,-104(fp)
     ba8:	00000e06 	br	be4 <sorteer+0x22c>
				buffer[k] = cijfers[k - 4] + '0';
     bac:	e0bfe617 	ldw	r2,-104(fp)
     bb0:	10bfff04 	addi	r2,r2,-4
     bb4:	e0ffea04 	addi	r3,fp,-88
     bb8:	1885883a 	add	r2,r3,r2
     bbc:	10800003 	ldbu	r2,0(r2)
     bc0:	10800c04 	addi	r2,r2,48
     bc4:	1009883a 	mov	r4,r2
     bc8:	e0ffeb04 	addi	r3,fp,-84
     bcc:	e0bfe617 	ldw	r2,-104(fp)
     bd0:	1885883a 	add	r2,r3,r2
     bd4:	11000005 	stb	r4,0(r2)
			printf("score = hoger dan %de score\n", i);
			buffer[0] = a[0];
			buffer[1] = b[0];
			buffer[2] = c[0];
			buffer[3] = ' ';
			for(k = 4; k < 7; k++){
     bd8:	e0bfe617 	ldw	r2,-104(fp)
     bdc:	10800044 	addi	r2,r2,1
     be0:	e0bfe615 	stw	r2,-104(fp)
     be4:	e0bfe617 	ldw	r2,-104(fp)
     be8:	108001d0 	cmplti	r2,r2,7
     bec:	103fef1e 	bne	r2,zero,bac <__alt_mem_Flash_flash_data+0xf4000bac>
				buffer[k] = cijfers[k - 4] + '0';
			}

			for(l = 0; l < 8; l++){
     bf0:	e03fe715 	stw	zero,-100(fp)
     bf4:	00000f06 	br	c34 <sorteer+0x27c>
				highscores[i][l] = buffer[l];
     bf8:	e0ffeb04 	addi	r3,fp,-84
     bfc:	e0bfe717 	ldw	r2,-100(fp)
     c00:	1885883a 	add	r2,r3,r2
     c04:	10c00003 	ldbu	r3,0(r2)
     c08:	008000f4 	movhi	r2,3
     c0c:	10a80504 	addi	r2,r2,-24556
     c10:	e13fe517 	ldw	r4,-108(fp)
     c14:	21400524 	muli	r5,r4,20
     c18:	e13fe717 	ldw	r4,-100(fp)
     c1c:	2909883a 	add	r4,r5,r4
     c20:	1105883a 	add	r2,r2,r4
     c24:	10c00005 	stb	r3,0(r2)
			buffer[3] = ' ';
			for(k = 4; k < 7; k++){
				buffer[k] = cijfers[k - 4] + '0';
			}

			for(l = 0; l < 8; l++){
     c28:	e0bfe717 	ldw	r2,-100(fp)
     c2c:	10800044 	addi	r2,r2,1
     c30:	e0bfe715 	stw	r2,-100(fp)
     c34:	e0bfe717 	ldw	r2,-100(fp)
     c38:	10800210 	cmplti	r2,r2,8
     c3c:	103fee1e 	bne	r2,zero,bf8 <__alt_mem_Flash_flash_data+0xf4000bf8>
				highscores[i][l] = buffer[l];
			}

			for(o = 0; o <5; o++){
     c40:	e03fe815 	stw	zero,-96(fp)
     c44:	00001706 	br	ca4 <sorteer+0x2ec>
				strcat(highscores[o], "|");
     c48:	e0bfe817 	ldw	r2,-96(fp)
     c4c:	10c00524 	muli	r3,r2,20
     c50:	008000f4 	movhi	r2,3
     c54:	10a80504 	addi	r2,r2,-24556
     c58:	18a1883a 	add	r16,r3,r2
     c5c:	8009883a 	mov	r4,r16
     c60:	00047800 	call	4780 <strlen>
     c64:	8085883a 	add	r2,r16,r2
     c68:	00c01f04 	movi	r3,124
     c6c:	10c00005 	stb	r3,0(r2)
     c70:	10000045 	stb	zero,1(r2)
				strcat(input, highscores[o]);
     c74:	e0bfe817 	ldw	r2,-96(fp)
     c78:	10c00524 	muli	r3,r2,20
     c7c:	008000f4 	movhi	r2,3
     c80:	10a80504 	addi	r2,r2,-24556
     c84:	1885883a 	add	r2,r3,r2
     c88:	e0fff284 	addi	r3,fp,-54
     c8c:	1809883a 	mov	r4,r3
     c90:	100b883a 	mov	r5,r2
     c94:	00046680 	call	4668 <strcat>

			for(l = 0; l < 8; l++){
				highscores[i][l] = buffer[l];
			}

			for(o = 0; o <5; o++){
     c98:	e0bfe817 	ldw	r2,-96(fp)
     c9c:	10800044 	addi	r2,r2,1
     ca0:	e0bfe815 	stw	r2,-96(fp)
     ca4:	e0bfe817 	ldw	r2,-96(fp)
     ca8:	10800150 	cmplti	r2,r2,5
     cac:	103fe61e 	bne	r2,zero,c48 <__alt_mem_Flash_flash_data+0xf4000c48>
				strcat(highscores[o], "|");
				strcat(input, highscores[o]);
			}

			printf("%s\nde uiteindelijke string!\n", input);
     cb0:	e0bff284 	addi	r2,fp,-54
     cb4:	010000b4 	movhi	r4,2
     cb8:	21149204 	addi	r4,r4,21064
     cbc:	100b883a 	mov	r5,r2
     cc0:	000448c0 	call	448c <printf>
			//[i] = buffer;

			write_file(input);
     cc4:	e0bff284 	addi	r2,fp,-54
     cc8:	1009883a 	mov	r4,r2
     ccc:	00008c80 	call	8c8 <write_file>
			break;
     cd0:	00000906 	br	cf8 <sorteer+0x340>
		}

		else{
			printf("score is niet hoger\n");
     cd4:	010000b4 	movhi	r4,2
     cd8:	21149a04 	addi	r4,r4,21096
     cdc:	00045900 	call	4590 <puts>


	char buffer[30] = "";
	char input[50] = "";

	for(i = 0; i < 5; i++){
     ce0:	e0bfe517 	ldw	r2,-108(fp)
     ce4:	10800044 	addi	r2,r2,1
     ce8:	e0bfe515 	stw	r2,-108(fp)
     cec:	e0bfe517 	ldw	r2,-108(fp)
     cf0:	10800150 	cmplti	r2,r2,5
     cf4:	103f731e 	bne	r2,zero,ac4 <__alt_mem_Flash_flash_data+0xf4000ac4>
			printf("score is niet hoger\n");
		}


	}
	read_file();
     cf8:	000078c0 	call	78c <read_file>

}
     cfc:	e6ffff04 	addi	sp,fp,-4
     d00:	dfc00217 	ldw	ra,8(sp)
     d04:	df000117 	ldw	fp,4(sp)
     d08:	dc000017 	ldw	r16,0(sp)
     d0c:	dec00304 	addi	sp,sp,12
     d10:	f800283a 	ret

00000d14 <schuifScores>:
void schuifScores(int nummer){
     d14:	defffc04 	addi	sp,sp,-16
     d18:	dfc00315 	stw	ra,12(sp)
     d1c:	df000215 	stw	fp,8(sp)
     d20:	df000204 	addi	fp,sp,8
     d24:	e13fff15 	stw	r4,-4(fp)
	int i;

	for(i = 5; i > nummer; i--){
     d28:	00800144 	movi	r2,5
     d2c:	e0bffe15 	stw	r2,-8(fp)
     d30:	00001006 	br	d74 <schuifScores+0x60>
		strcpy(highscores[i], highscores[i-1]);
     d34:	e0bffe17 	ldw	r2,-8(fp)
     d38:	10c00524 	muli	r3,r2,20
     d3c:	008000f4 	movhi	r2,3
     d40:	10a80504 	addi	r2,r2,-24556
     d44:	1889883a 	add	r4,r3,r2
     d48:	e0bffe17 	ldw	r2,-8(fp)
     d4c:	10bfffc4 	addi	r2,r2,-1
     d50:	10c00524 	muli	r3,r2,20
     d54:	008000f4 	movhi	r2,3
     d58:	10a80504 	addi	r2,r2,-24556
     d5c:	1885883a 	add	r2,r3,r2
     d60:	100b883a 	mov	r5,r2
     d64:	00046f00 	call	46f0 <strcpy>

}
void schuifScores(int nummer){
	int i;

	for(i = 5; i > nummer; i--){
     d68:	e0bffe17 	ldw	r2,-8(fp)
     d6c:	10bfffc4 	addi	r2,r2,-1
     d70:	e0bffe15 	stw	r2,-8(fp)
     d74:	e0bffe17 	ldw	r2,-8(fp)
     d78:	e0ffff17 	ldw	r3,-4(fp)
     d7c:	18bfed16 	blt	r3,r2,d34 <__alt_mem_Flash_flash_data+0xf4000d34>
		strcpy(highscores[i], highscores[i-1]);
	}

}
     d80:	e037883a 	mov	sp,fp
     d84:	dfc00117 	ldw	ra,4(sp)
     d88:	df000017 	ldw	fp,0(sp)
     d8c:	dec00204 	addi	sp,sp,8
     d90:	f800283a 	ret

00000d94 <collision>:

void collision(int aantal){
     d94:	defffa04 	addi	sp,sp,-24
     d98:	dfc00515 	stw	ra,20(sp)
     d9c:	df000415 	stw	fp,16(sp)
     da0:	df000404 	addi	fp,sp,16
     da4:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	Balk * balkje;
	Balk * balkje2;

	balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
     da8:	d0e81017 	ldw	r3,-24512(gp)
     dac:	e0bffe04 	addi	r2,fp,-8
     db0:	1809883a 	mov	r4,r3
     db4:	000b883a 	mov	r5,zero
     db8:	100d883a 	mov	r6,r2
     dbc:	00186580 	call	18658 <OSMboxPend>
     dc0:	e0bffc15 	stw	r2,-16(fp)
	balkje2 = (Balk*) OSMboxPend(MailBox2, 0, &err);
     dc4:	d0e80e17 	ldw	r3,-24520(gp)
     dc8:	e0bffe04 	addi	r2,fp,-8
     dcc:	1809883a 	mov	r4,r3
     dd0:	000b883a 	mov	r5,zero
     dd4:	100d883a 	mov	r6,r2
     dd8:	00186580 	call	18658 <OSMboxPend>
     ddc:	e0bffd15 	stw	r2,-12(fp)

	//collision linker balkje
	//lange zijde
	if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte - 6 && ALT_y < balkje->Hoogte + 50) || ((ALT_y + 5 > balkje->Hoogte && ALT_y < balkje->Hoogte +5) && ALT_x1 == 21) ){
     de0:	d0a82317 	ldw	r2,-24436(gp)
     de4:	10800558 	cmpnei	r2,r2,21
     de8:	10000a1e 	bne	r2,zero,e14 <collision+0x80>
     dec:	e0bffc17 	ldw	r2,-16(fp)
     df0:	10800017 	ldw	r2,0(r2)
     df4:	10fffe84 	addi	r3,r2,-6
     df8:	d0a81d17 	ldw	r2,-24460(gp)
     dfc:	1880050e 	bge	r3,r2,e14 <collision+0x80>
     e00:	e0bffc17 	ldw	r2,-16(fp)
     e04:	10800017 	ldw	r2,0(r2)
     e08:	10800c84 	addi	r2,r2,50
     e0c:	d0e81d17 	ldw	r3,-24460(gp)
     e10:	18800d16 	blt	r3,r2,e48 <collision+0xb4>
     e14:	d0a81d17 	ldw	r2,-24460(gp)
     e18:	10800144 	addi	r2,r2,5
     e1c:	e0fffc17 	ldw	r3,-16(fp)
     e20:	18c00017 	ldw	r3,0(r3)
     e24:	18800b0e 	bge	r3,r2,e54 <collision+0xc0>
     e28:	e0bffc17 	ldw	r2,-16(fp)
     e2c:	10800017 	ldw	r2,0(r2)
     e30:	10800144 	addi	r2,r2,5
     e34:	d0e81d17 	ldw	r3,-24460(gp)
     e38:	1880060e 	bge	r3,r2,e54 <collision+0xc0>
     e3c:	d0a82317 	ldw	r2,-24436(gp)
     e40:	10800558 	cmpnei	r2,r2,21
     e44:	1000031e 	bne	r2,zero,e54 <collision+0xc0>
		ALT_inc_x = -(ALT_inc_x);
     e48:	d0a82517 	ldw	r2,-24428(gp)
     e4c:	0085c83a 	sub	r2,zero,r2
     e50:	d0a82515 	stw	r2,-24428(gp)
	}
	//boven
	if(((ALT_x1 <= 20 && ALT_x1 >= 15) && ALT_y == balkje->Hoogte - 6) || ((ALT_x1 <= 20 && ALT_x1 >= 15) && ALT_y == balkje->Hoogte + 50)){
     e54:	d0a82317 	ldw	r2,-24436(gp)
     e58:	10800548 	cmpgei	r2,r2,21
     e5c:	1000081e 	bne	r2,zero,e80 <collision+0xec>
     e60:	d0a82317 	ldw	r2,-24436(gp)
     e64:	108003d0 	cmplti	r2,r2,15
     e68:	1000051e 	bne	r2,zero,e80 <collision+0xec>
     e6c:	e0bffc17 	ldw	r2,-16(fp)
     e70:	10800017 	ldw	r2,0(r2)
     e74:	10fffe84 	addi	r3,r2,-6
     e78:	d0a81d17 	ldw	r2,-24460(gp)
     e7c:	18800b26 	beq	r3,r2,eac <collision+0x118>
     e80:	d0a82317 	ldw	r2,-24436(gp)
     e84:	10800548 	cmpgei	r2,r2,21
     e88:	10000b1e 	bne	r2,zero,eb8 <collision+0x124>
     e8c:	d0a82317 	ldw	r2,-24436(gp)
     e90:	108003d0 	cmplti	r2,r2,15
     e94:	1000081e 	bne	r2,zero,eb8 <collision+0x124>
     e98:	e0bffc17 	ldw	r2,-16(fp)
     e9c:	10800017 	ldw	r2,0(r2)
     ea0:	10c00c84 	addi	r3,r2,50
     ea4:	d0a81d17 	ldw	r2,-24460(gp)
     ea8:	1880031e 	bne	r3,r2,eb8 <collision+0x124>
		ALT_inc_y = -(ALT_inc_y);
     eac:	d0a81f17 	ldw	r2,-24452(gp)
     eb0:	0085c83a 	sub	r2,zero,r2
     eb4:	d0a81f15 	stw	r2,-24452(gp)
	}

	if(aantal == 2){
     eb8:	e0bfff17 	ldw	r2,-4(fp)
     ebc:	10800098 	cmpnei	r2,r2,2
     ec0:	1000361e 	bne	r2,zero,f9c <collision+0x208>
		//collision rechter balkje
		//lange zijde
		if(ALT_x2 == 299 && (ALT_y > balkje2->Hoogte - 6 && ALT_y < balkje2->Hoogte + 50) || ((ALT_y + 5 > balkje2->Hoogte && ALT_y < balkje2->Hoogte +5) && ALT_x2 == 299) ){
     ec4:	d0a82617 	ldw	r2,-24424(gp)
     ec8:	10804ad8 	cmpnei	r2,r2,299
     ecc:	10000a1e 	bne	r2,zero,ef8 <collision+0x164>
     ed0:	e0bffd17 	ldw	r2,-12(fp)
     ed4:	10800017 	ldw	r2,0(r2)
     ed8:	10fffe84 	addi	r3,r2,-6
     edc:	d0a81d17 	ldw	r2,-24460(gp)
     ee0:	1880050e 	bge	r3,r2,ef8 <collision+0x164>
     ee4:	e0bffd17 	ldw	r2,-12(fp)
     ee8:	10800017 	ldw	r2,0(r2)
     eec:	10800c84 	addi	r2,r2,50
     ef0:	d0e81d17 	ldw	r3,-24460(gp)
     ef4:	18800d16 	blt	r3,r2,f2c <collision+0x198>
     ef8:	d0a81d17 	ldw	r2,-24460(gp)
     efc:	10800144 	addi	r2,r2,5
     f00:	e0fffd17 	ldw	r3,-12(fp)
     f04:	18c00017 	ldw	r3,0(r3)
     f08:	18800b0e 	bge	r3,r2,f38 <collision+0x1a4>
     f0c:	e0bffd17 	ldw	r2,-12(fp)
     f10:	10800017 	ldw	r2,0(r2)
     f14:	10800144 	addi	r2,r2,5
     f18:	d0e81d17 	ldw	r3,-24460(gp)
     f1c:	1880060e 	bge	r3,r2,f38 <collision+0x1a4>
     f20:	d0a82617 	ldw	r2,-24424(gp)
     f24:	10804ad8 	cmpnei	r2,r2,299
     f28:	1000031e 	bne	r2,zero,f38 <collision+0x1a4>
			ALT_inc_x = -(ALT_inc_x);
     f2c:	d0a82517 	ldw	r2,-24428(gp)
     f30:	0085c83a 	sub	r2,zero,r2
     f34:	d0a82515 	stw	r2,-24428(gp)
		}
		//boven
		if(((ALT_x2 <= 305 && ALT_x2 >= 300) && ALT_y == balkje2->Hoogte - 6) || ((ALT_x2 <= 305 && ALT_x2 >= 300) && ALT_y == balkje2->Hoogte + 50)){
     f38:	d0a82617 	ldw	r2,-24424(gp)
     f3c:	10804c88 	cmpgei	r2,r2,306
     f40:	1000081e 	bne	r2,zero,f64 <collision+0x1d0>
     f44:	d0a82617 	ldw	r2,-24424(gp)
     f48:	10804b10 	cmplti	r2,r2,300
     f4c:	1000051e 	bne	r2,zero,f64 <collision+0x1d0>
     f50:	e0bffd17 	ldw	r2,-12(fp)
     f54:	10800017 	ldw	r2,0(r2)
     f58:	10fffe84 	addi	r3,r2,-6
     f5c:	d0a81d17 	ldw	r2,-24460(gp)
     f60:	18800b26 	beq	r3,r2,f90 <collision+0x1fc>
     f64:	d0a82617 	ldw	r2,-24424(gp)
     f68:	10804c88 	cmpgei	r2,r2,306
     f6c:	10000b1e 	bne	r2,zero,f9c <collision+0x208>
     f70:	d0a82617 	ldw	r2,-24424(gp)
     f74:	10804b10 	cmplti	r2,r2,300
     f78:	1000081e 	bne	r2,zero,f9c <collision+0x208>
     f7c:	e0bffd17 	ldw	r2,-12(fp)
     f80:	10800017 	ldw	r2,0(r2)
     f84:	10c00c84 	addi	r3,r2,50
     f88:	d0a81d17 	ldw	r2,-24460(gp)
     f8c:	1880031e 	bne	r3,r2,f9c <collision+0x208>
			ALT_inc_y = -(ALT_inc_y);
     f90:	d0a81f17 	ldw	r2,-24452(gp)
     f94:	0085c83a 	sub	r2,zero,r2
     f98:	d0a81f15 	stw	r2,-24452(gp)
		}
	}



}
     f9c:	e037883a 	mov	sp,fp
     fa0:	dfc00117 	ldw	ra,4(sp)
     fa4:	df000017 	ldw	fp,0(sp)
     fa8:	dec00204 	addi	sp,sp,8
     fac:	f800283a 	ret

00000fb0 <Game>:

void Game(void* pdata) {
     fb0:	defff604 	addi	sp,sp,-40
     fb4:	dfc00915 	stw	ra,36(sp)
     fb8:	df000815 	stw	fp,32(sp)
     fbc:	df000804 	addi	fp,sp,32
     fc0:	e13ffd15 	stw	r4,-12(fp)
	Balk * balkje;
	Balk * balkje2;



	ALT_x1 = 0;
     fc4:	d0282315 	stw	zero,-24436(gp)
	ALT_x2 = 165;
     fc8:	00802944 	movi	r2,165
     fcc:	d0a82615 	stw	r2,-24424(gp)
	ALT_y = 100;
     fd0:	00801904 	movi	r2,100
     fd4:	d0a81d15 	stw	r2,-24460(gp)
	ALT_inc_x = 1;
     fd8:	00800044 	movi	r2,1
     fdc:	d0a82515 	stw	r2,-24428(gp)
	ALT_inc_y = 1;
     fe0:	00800044 	movi	r2,1
     fe4:	d0a81f15 	stw	r2,-24452(gp)

	pixel_buffer_x = 319;
     fe8:	00804fc4 	movi	r2,319
     fec:	d0a81915 	stw	r2,-24476(gp)
	pixel_buffer_y = 230;
     ff0:	00803984 	movi	r2,230
     ff4:	d0a81715 	stw	r2,-24484(gp)
	int i;
	int hoogte;
	int ID;
	int count;

	balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
     ff8:	d0e81017 	ldw	r3,-24512(gp)
     ffc:	e0bffc04 	addi	r2,fp,-16
    1000:	1809883a 	mov	r4,r3
    1004:	000b883a 	mov	r5,zero
    1008:	100d883a 	mov	r6,r2
    100c:	00186580 	call	18658 <OSMboxPend>
    1010:	e0bffa15 	stw	r2,-24(fp)
	balkje2 = (Balk*) OSMboxPend(MailBox2, 0, &err);
    1014:	d0e80e17 	ldw	r3,-24520(gp)
    1018:	e0bffc04 	addi	r2,fp,-16
    101c:	1809883a 	mov	r4,r3
    1020:	000b883a 	mov	r5,zero
    1024:	100d883a 	mov	r6,r2
    1028:	00186580 	call	18658 <OSMboxPend>
    102c:	e0bffb15 	stw	r2,-20(fp)
	
	VGA_box (316, 5, 319, 235, zwart); 					// singleplayer balk weghalen voor de zekerheid
    1030:	d8000015 	stw	zero,0(sp)
    1034:	01004f04 	movi	r4,316
    1038:	01400144 	movi	r5,5
    103c:	01804fc4 	movi	r6,319
    1040:	01c03ac4 	movi	r7,235
    1044:	00039bc0 	call	39bc <VGA_box>
	//char_buffer_x = 79; char_buffer_y = 59;

	//blue_x1 = 28; blue_x2 = 52; blue_y1 = 26; blue_y2 = 34;

	while (1) {
		OSFlagPend(Flags_Games, Game_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
    1048:	d0e80d17 	ldw	r3,-24524(gp)
    104c:	e0bffc04 	addi	r2,fp,-16
    1050:	d8800015 	stw	r2,0(sp)
    1054:	1809883a 	mov	r4,r3
    1058:	01400084 	movi	r5,2
    105c:	01800044 	movi	r6,1
    1060:	000f883a 	mov	r7,zero
    1064:	00173600 	call	17360 <OSFlagPend>





		for (i = 0; i <= 9; i++) {
    1068:	e03ff915 	stw	zero,-28(fp)
    106c:	00001706 	br	10cc <Game+0x11c>

			if (score1 == i) {
    1070:	d0e81817 	ldw	r3,-24480(gp)
    1074:	e0bff917 	ldw	r2,-28(fp)
    1078:	1880031e 	bne	r3,r2,1088 <Game+0xd8>
				draw_number(i, 1);
    107c:	e13ff917 	ldw	r4,-28(fp)
    1080:	01400044 	movi	r5,1
    1084:	0003c500 	call	3c50 <draw_number>
			}
			if (score2 == i) {
    1088:	d0e81317 	ldw	r3,-24500(gp)
    108c:	e0bff917 	ldw	r2,-28(fp)
    1090:	1880031e 	bne	r3,r2,10a0 <Game+0xf0>
				draw_number(i, 3);
    1094:	e13ff917 	ldw	r4,-28(fp)
    1098:	014000c4 	movi	r5,3
    109c:	0003c500 	call	3c50 <draw_number>
			}
			if(score1 == 9 || score2 == 9){
    10a0:	d0a81817 	ldw	r2,-24480(gp)
    10a4:	10800260 	cmpeqi	r2,r2,9
    10a8:	1000031e 	bne	r2,zero,10b8 <Game+0x108>
    10ac:	d0a81317 	ldw	r2,-24500(gp)
    10b0:	10800258 	cmpnei	r2,r2,9
    10b4:	1000021e 	bne	r2,zero,10c0 <Game+0x110>
				score1 =0;
    10b8:	d0281815 	stw	zero,-24480(gp)
				score2 =0;
    10bc:	d0281315 	stw	zero,-24500(gp)





		for (i = 0; i <= 9; i++) {
    10c0:	e0bff917 	ldw	r2,-28(fp)
    10c4:	10800044 	addi	r2,r2,1
    10c8:	e0bff915 	stw	r2,-28(fp)
    10cc:	e0bff917 	ldw	r2,-28(fp)
    10d0:	10800290 	cmplti	r2,r2,10
    10d4:	103fe61e 	bne	r2,zero,1070 <__alt_mem_Flash_flash_data+0xf4001070>
				score1 =0;
				score2 =0;

			}
		}
		draw_middenlijn();
    10d8:	0003b000 	call	3b00 <draw_middenlijn>
		if (check == 1) {
    10dc:	d0a00117 	ldw	r2,-32764(gp)
    10e0:	10800058 	cmpnei	r2,r2,1
    10e4:	1000231e 	bne	r2,zero,1174 <Game+0x1c4>
			del_middenlijn();
    10e8:	0003b680 	call	3b68 <del_middenlijn>

			VGA_box(300, balkje2->Hoogte, 305, balkje2->Hoogte + 50, blauw);
    10ec:	e0bffb17 	ldw	r2,-20(fp)
    10f0:	11400017 	ldw	r5,0(r2)
    10f4:	e0bffb17 	ldw	r2,-20(fp)
    10f8:	10800017 	ldw	r2,0(r2)
    10fc:	10c00c84 	addi	r3,r2,50
    1100:	00803fc4 	movi	r2,255
    1104:	d8800015 	stw	r2,0(sp)
    1108:	01004b04 	movi	r4,300
    110c:	01804c44 	movi	r6,305
    1110:	180f883a 	mov	r7,r3
    1114:	00039bc0 	call	39bc <VGA_box>

			VGA_text(20, 20, "Houdt de knop ingedrukt om te spelen");
    1118:	01000504 	movi	r4,20
    111c:	01400504 	movi	r5,20
    1120:	018000b4 	movhi	r6,2
    1124:	31949f04 	addi	r6,r6,21116
    1128:	0003a700 	call	3a70 <VGA_text>
			OSTimeDlyHMSM(0, 1, 0, 0);
    112c:	0009883a 	mov	r4,zero
    1130:	01400044 	movi	r5,1
    1134:	000d883a 	mov	r6,zero
    1138:	000f883a 	mov	r7,zero
    113c:	001ccbc0 	call	1ccbc <OSTimeDlyHMSM>
			VGA_text(20, 20, "                                    ");
    1140:	01000504 	movi	r4,20
    1144:	01400504 	movi	r5,20
    1148:	018000b4 	movhi	r6,2
    114c:	3194a904 	addi	r6,r6,21156
    1150:	0003a700 	call	3a70 <VGA_text>



			del_number(1);
    1154:	01000044 	movi	r4,1
    1158:	0003ba40 	call	3ba4 <del_number>
			del_number(2);
    115c:	01000084 	movi	r4,2
    1160:	0003ba40 	call	3ba4 <del_number>

			score1 = 0;
    1164:	d0281815 	stw	zero,-24480(gp)
			score2 = 0;
    1168:	d0281315 	stw	zero,-24500(gp)

			i = 0;
    116c:	e03ff915 	stw	zero,-28(fp)

			check = 0;
    1170:	d0200115 	stw	zero,-32764(gp)
		}

		if (controller(3) == 1) {
    1174:	010000c4 	movi	r4,3
    1178:	000039c0 	call	39c <controller>
    117c:	10800058 	cmpnei	r2,r2,1
    1180:	1000541e 	bne	r2,zero,12d4 <Game+0x324>

			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1184:	d1282317 	ldw	r4,-24436(gp)
    1188:	d1681d17 	ldw	r5,-24460(gp)
    118c:	d0a82317 	ldw	r2,-24436(gp)
    1190:	10c00144 	addi	r3,r2,5
    1194:	d0a81d17 	ldw	r2,-24460(gp)
    1198:	10800144 	addi	r2,r2,5
    119c:	d8000015 	stw	zero,0(sp)
    11a0:	180d883a 	mov	r6,r3
    11a4:	100f883a 	mov	r7,r2
    11a8:	00039bc0 	call	39bc <VGA_box>
			if (first == 1) {
    11ac:	d0a00017 	ldw	r2,-32768(gp)
    11b0:	10800058 	cmpnei	r2,r2,1
    11b4:	10000f1e 	bne	r2,zero,11f4 <Game+0x244>
				ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
    11b8:	d0a82317 	ldw	r2,-24436(gp)
    11bc:	10c02804 	addi	r3,r2,160
    11c0:	d0a82517 	ldw	r2,-24428(gp)
    11c4:	1885883a 	add	r2,r3,r2
    11c8:	d0a82315 	stw	r2,-24436(gp)
				ALT_x2 += ALT_inc_x;
    11cc:	d0e82617 	ldw	r3,-24424(gp)
    11d0:	d0a82517 	ldw	r2,-24428(gp)
    11d4:	1885883a 	add	r2,r3,r2
    11d8:	d0a82615 	stw	r2,-24424(gp)
				ALT_y += ALT_inc_y;
    11dc:	d0e81d17 	ldw	r3,-24460(gp)
    11e0:	d0a81f17 	ldw	r2,-24452(gp)
    11e4:	1885883a 	add	r2,r3,r2
    11e8:	d0a81d15 	stw	r2,-24460(gp)
				first = 0;
    11ec:	d0200015 	stw	zero,-32768(gp)
    11f0:	00000c06 	br	1224 <Game+0x274>
			} else {
				ALT_x1 += ALT_inc_x;
    11f4:	d0e82317 	ldw	r3,-24436(gp)
    11f8:	d0a82517 	ldw	r2,-24428(gp)
    11fc:	1885883a 	add	r2,r3,r2
    1200:	d0a82315 	stw	r2,-24436(gp)
				ALT_x2 += ALT_inc_x;
    1204:	d0e82617 	ldw	r3,-24424(gp)
    1208:	d0a82517 	ldw	r2,-24428(gp)
    120c:	1885883a 	add	r2,r3,r2
    1210:	d0a82615 	stw	r2,-24424(gp)
				ALT_y += ALT_inc_y;
    1214:	d0e81d17 	ldw	r3,-24460(gp)
    1218:	d0a81f17 	ldw	r2,-24452(gp)
    121c:	1885883a 	add	r2,r3,r2
    1220:	d0a81d15 	stw	r2,-24460(gp)
			}
			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
    1224:	d1282317 	ldw	r4,-24436(gp)
    1228:	d1681d17 	ldw	r5,-24460(gp)
    122c:	d0a82317 	ldw	r2,-24436(gp)
    1230:	11800144 	addi	r6,r2,5
    1234:	d0a81d17 	ldw	r2,-24460(gp)
    1238:	10c00144 	addi	r3,r2,5
    123c:	00804034 	movhi	r2,256
    1240:	10bfffc4 	addi	r2,r2,-1
    1244:	d8800015 	stw	r2,0(sp)
    1248:	180f883a 	mov	r7,r3
    124c:	00039bc0 	call	39bc <VGA_box>

			//collision rand boven en onder
			if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
    1250:	d0e81d17 	ldw	r3,-24460(gp)
    1254:	d0a81717 	ldw	r2,-24484(gp)
    1258:	18800326 	beq	r3,r2,1268 <Game+0x2b8>
    125c:	d0a81d17 	ldw	r2,-24460(gp)
    1260:	10800118 	cmpnei	r2,r2,4
    1264:	1000031e 	bne	r2,zero,1274 <Game+0x2c4>
				ALT_inc_y = -(ALT_inc_y);
    1268:	d0a81f17 	ldw	r2,-24452(gp)
    126c:	0085c83a 	sub	r2,zero,r2
    1270:	d0a81f15 	stw	r2,-24452(gp)
			//collision rand rechts en links
			if ((ALT_x2 == pixel_buffer_x) || (ALT_x1 == 0)) {
				//ALT_inc_x = -(ALT_inc_x);
			}

			collision(2);
    1274:	01000084 	movi	r4,2
    1278:	0000d940 	call	d94 <collision>

			//links dood
			if (ALT_x1 == 0) {
    127c:	d0a82317 	ldw	r2,-24436(gp)
    1280:	1000071e 	bne	r2,zero,12a0 <Game+0x2f0>
				score2++;
    1284:	d0a81317 	ldw	r2,-24500(gp)
    1288:	10800044 	addi	r2,r2,1
    128c:	d0a81315 	stw	r2,-24500(gp)
				gescoord(2);
    1290:	01000084 	movi	r4,2
    1294:	00013280 	call	1328 <gescoord>
				del_number(2);
    1298:	01000084 	movi	r4,2
    129c:	0003ba40 	call	3ba4 <del_number>
			}

			//rechts dood
			if (ALT_x2 == pixel_buffer_x) {
    12a0:	d0e82617 	ldw	r3,-24424(gp)
    12a4:	d0a81917 	ldw	r2,-24476(gp)
    12a8:	1880071e 	bne	r3,r2,12c8 <Game+0x318>
				score1++;
    12ac:	d0a81817 	ldw	r2,-24480(gp)
    12b0:	10800044 	addi	r2,r2,1
    12b4:	d0a81815 	stw	r2,-24480(gp)
				gescoord(1);
    12b8:	01000044 	movi	r4,1
    12bc:	00013280 	call	1328 <gescoord>
				del_number(1);
    12c0:	01000044 	movi	r4,1
    12c4:	0003ba40 	call	3ba4 <del_number>





			OSTimeDly(1);
    12c8:	01000044 	movi	r4,1
    12cc:	001cb740 	call	1cb74 <OSTimeDly>
    12d0:	00001406 	br	1324 <Game+0x374>

		} else if (controller(3) == 2) {
    12d4:	010000c4 	movi	r4,3
    12d8:	000039c0 	call	39c <controller>
    12dc:	10800098 	cmpnei	r2,r2,2
    12e0:	1000031e 	bne	r2,zero,12f0 <Game+0x340>
			//links
			endGame(2);
    12e4:	01000084 	movi	r4,2
    12e8:	00015580 	call	1558 <endGame>
    12ec:	00000d06 	br	1324 <Game+0x374>
		}else if(controller(3) == 3){
    12f0:	010000c4 	movi	r4,3
    12f4:	000039c0 	call	39c <controller>
    12f8:	108000d8 	cmpnei	r2,r2,3
    12fc:	1000031e 	bne	r2,zero,130c <Game+0x35c>
			//rechts
			endGame(1);
    1300:	01000044 	movi	r4,1
    1304:	00015580 	call	1558 <endGame>
    1308:	00000606 	br	1324 <Game+0x374>
		} else if(controller(2) != 2){
    130c:	01000084 	movi	r4,2
    1310:	000039c0 	call	39c <controller>
    1314:	108000a0 	cmpeqi	r2,r2,2
    1318:	1000021e 	bne	r2,zero,1324 <Game+0x374>
			endGame(1);
    131c:	01000044 	movi	r4,1
    1320:	00015580 	call	1558 <endGame>
		}

	}
    1324:	003f4806 	br	1048 <__alt_mem_Flash_flash_data+0xf4001048>

00001328 <gescoord>:
}

void gescoord(int ID){
    1328:	defffc04 	addi	sp,sp,-16
    132c:	dfc00315 	stw	ra,12(sp)
    1330:	df000215 	stw	fp,8(sp)
    1334:	df000204 	addi	fp,sp,8
    1338:	e13fff15 	stw	r4,-4(fp)

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    133c:	d1282317 	ldw	r4,-24436(gp)
    1340:	d1681d17 	ldw	r5,-24460(gp)
    1344:	d0a82317 	ldw	r2,-24436(gp)
    1348:	10c00144 	addi	r3,r2,5
    134c:	d0a81d17 	ldw	r2,-24460(gp)
    1350:	10800144 	addi	r2,r2,5
    1354:	d8000015 	stw	zero,0(sp)
    1358:	180d883a 	mov	r6,r3
    135c:	100f883a 	mov	r7,r2
    1360:	00039bc0 	call	39bc <VGA_box>

	first = 1;
    1364:	00800044 	movi	r2,1
    1368:	d0a00015 	stw	r2,-32768(gp)

	if(ID == 1){
    136c:	e0bfff17 	ldw	r2,-4(fp)
    1370:	10800058 	cmpnei	r2,r2,1
    1374:	1000251e 	bne	r2,zero,140c <gescoord+0xe4>
		VGA_text(30, 25, "Speler 1 heeft gescoord!");
    1378:	01000784 	movi	r4,30
    137c:	01400644 	movi	r5,25
    1380:	018000b4 	movhi	r6,2
    1384:	3194b304 	addi	r6,r6,21196
    1388:	0003a700 	call	3a70 <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
    138c:	0009883a 	mov	r4,zero
    1390:	000b883a 	mov	r5,zero
    1394:	018008c4 	movi	r6,35
    1398:	000f883a 	mov	r7,zero
    139c:	001ccbc0 	call	1ccbc <OSTimeDlyHMSM>
		VGA_text(30, 25, "                        ");
    13a0:	01000784 	movi	r4,30
    13a4:	01400644 	movi	r5,25
    13a8:	018000b4 	movhi	r6,2
    13ac:	3194ba04 	addi	r6,r6,21224
    13b0:	0003a700 	call	3a70 <VGA_text>
		ALT_x1 = 0;
    13b4:	d0282315 	stw	zero,-24436(gp)
		ALT_x2 = 165;
    13b8:	00802944 	movi	r2,165
    13bc:	d0a82615 	stw	r2,-24424(gp)
		ALT_y = 100;
    13c0:	00801904 	movi	r2,100
    13c4:	d0a81d15 	stw	r2,-24460(gp)
		ALT_inc_x = -1;
    13c8:	00bfffc4 	movi	r2,-1
    13cc:	d0a82515 	stw	r2,-24428(gp)
		if(random == 1){
    13d0:	d0a81517 	ldw	r2,-24492(gp)
    13d4:	10800058 	cmpnei	r2,r2,1
    13d8:	1000041e 	bne	r2,zero,13ec <gescoord+0xc4>
			ALT_inc_y = -1;
    13dc:	00bfffc4 	movi	r2,-1
    13e0:	d0a81f15 	stw	r2,-24452(gp)
			random = 0;
    13e4:	d0281515 	stw	zero,-24492(gp)
    13e8:	00000706 	br	1408 <gescoord+0xe0>
		}else if(random == 0){
    13ec:	d0a81517 	ldw	r2,-24492(gp)
    13f0:	1000051e 	bne	r2,zero,1408 <gescoord+0xe0>
			ALT_inc_y = 1;
    13f4:	00800044 	movi	r2,1
    13f8:	d0a81f15 	stw	r2,-24452(gp)
			random = 1;
    13fc:	00800044 	movi	r2,1
    1400:	d0a81515 	stw	r2,-24492(gp)
    1404:	00004f06 	br	1544 <gescoord+0x21c>
    1408:	00004e06 	br	1544 <gescoord+0x21c>
		}
	}else if(ID == 2){
    140c:	e0bfff17 	ldw	r2,-4(fp)
    1410:	10800098 	cmpnei	r2,r2,2
    1414:	1000251e 	bne	r2,zero,14ac <gescoord+0x184>
		VGA_text(30, 25, "Speler 2 heeft gescoord!");
    1418:	01000784 	movi	r4,30
    141c:	01400644 	movi	r5,25
    1420:	018000b4 	movhi	r6,2
    1424:	3194c104 	addi	r6,r6,21252
    1428:	0003a700 	call	3a70 <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
    142c:	0009883a 	mov	r4,zero
    1430:	000b883a 	mov	r5,zero
    1434:	018008c4 	movi	r6,35
    1438:	000f883a 	mov	r7,zero
    143c:	001ccbc0 	call	1ccbc <OSTimeDlyHMSM>
		VGA_text(30, 25, "                        ");
    1440:	01000784 	movi	r4,30
    1444:	01400644 	movi	r5,25
    1448:	018000b4 	movhi	r6,2
    144c:	3194ba04 	addi	r6,r6,21224
    1450:	0003a700 	call	3a70 <VGA_text>
		ALT_x1 = 0;
    1454:	d0282315 	stw	zero,-24436(gp)
		ALT_x2 = 165;
    1458:	00802944 	movi	r2,165
    145c:	d0a82615 	stw	r2,-24424(gp)
		ALT_y = 100;
    1460:	00801904 	movi	r2,100
    1464:	d0a81d15 	stw	r2,-24460(gp)
		ALT_inc_x = 1;
    1468:	00800044 	movi	r2,1
    146c:	d0a82515 	stw	r2,-24428(gp)
		if(random == 1){
    1470:	d0a81517 	ldw	r2,-24492(gp)
    1474:	10800058 	cmpnei	r2,r2,1
    1478:	1000041e 	bne	r2,zero,148c <gescoord+0x164>
			ALT_inc_y = 1;
    147c:	00800044 	movi	r2,1
    1480:	d0a81f15 	stw	r2,-24452(gp)
			random = 0;
    1484:	d0281515 	stw	zero,-24492(gp)
    1488:	00000706 	br	14a8 <gescoord+0x180>
		}else if(random == 0){
    148c:	d0a81517 	ldw	r2,-24492(gp)
    1490:	1000051e 	bne	r2,zero,14a8 <gescoord+0x180>
			ALT_inc_y = -1;
    1494:	00bfffc4 	movi	r2,-1
    1498:	d0a81f15 	stw	r2,-24452(gp)
			random = 1;
    149c:	00800044 	movi	r2,1
    14a0:	d0a81515 	stw	r2,-24492(gp)
    14a4:	00002706 	br	1544 <gescoord+0x21c>
    14a8:	00002606 	br	1544 <gescoord+0x21c>
		}
	}else if(ID == 3){
    14ac:	e0bfff17 	ldw	r2,-4(fp)
    14b0:	108000d8 	cmpnei	r2,r2,3
    14b4:	1000231e 	bne	r2,zero,1544 <gescoord+0x21c>
		VGA_text(30, 25, "De computer heeft gescoord!");
    14b8:	01000784 	movi	r4,30
    14bc:	01400644 	movi	r5,25
    14c0:	018000b4 	movhi	r6,2
    14c4:	3194c804 	addi	r6,r6,21280
    14c8:	0003a700 	call	3a70 <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
    14cc:	0009883a 	mov	r4,zero
    14d0:	000b883a 	mov	r5,zero
    14d4:	018008c4 	movi	r6,35
    14d8:	000f883a 	mov	r7,zero
    14dc:	001ccbc0 	call	1ccbc <OSTimeDlyHMSM>
		VGA_text(30, 25, "                           ");
    14e0:	01000784 	movi	r4,30
    14e4:	01400644 	movi	r5,25
    14e8:	018000b4 	movhi	r6,2
    14ec:	3194cf04 	addi	r6,r6,21308
    14f0:	0003a700 	call	3a70 <VGA_text>
		ALT_x1 = 0;
    14f4:	d0282315 	stw	zero,-24436(gp)
		ALT_x2 = 165;
    14f8:	00802944 	movi	r2,165
    14fc:	d0a82615 	stw	r2,-24424(gp)
		ALT_y = 100;
    1500:	00801904 	movi	r2,100
    1504:	d0a81d15 	stw	r2,-24460(gp)
		ALT_inc_x = -1;
    1508:	00bfffc4 	movi	r2,-1
    150c:	d0a82515 	stw	r2,-24428(gp)
		if(random == 1){
    1510:	d0a81517 	ldw	r2,-24492(gp)
    1514:	10800058 	cmpnei	r2,r2,1
    1518:	1000041e 	bne	r2,zero,152c <gescoord+0x204>
			ALT_inc_y = 1;
    151c:	00800044 	movi	r2,1
    1520:	d0a81f15 	stw	r2,-24452(gp)
			random = 0;
    1524:	d0281515 	stw	zero,-24492(gp)
    1528:	00000606 	br	1544 <gescoord+0x21c>
		}else if(random == 0){
    152c:	d0a81517 	ldw	r2,-24492(gp)
    1530:	1000041e 	bne	r2,zero,1544 <gescoord+0x21c>
			ALT_inc_y = -1;
    1534:	00bfffc4 	movi	r2,-1
    1538:	d0a81f15 	stw	r2,-24452(gp)
			random = 1;
    153c:	00800044 	movi	r2,1
    1540:	d0a81515 	stw	r2,-24492(gp)
		}
	}

}
    1544:	e037883a 	mov	sp,fp
    1548:	dfc00117 	ldw	ra,4(sp)
    154c:	df000017 	ldw	fp,0(sp)
    1550:	dec00204 	addi	sp,sp,8
    1554:	f800283a 	ret

00001558 <endGame>:

void endGame(int ID) {
    1558:	defffb04 	addi	sp,sp,-20
    155c:	dfc00415 	stw	ra,16(sp)
    1560:	df000315 	stw	fp,12(sp)
    1564:	df000304 	addi	fp,sp,12
    1568:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	printf("end game\n");
    156c:	010000b4 	movhi	r4,2
    1570:	2114d604 	addi	r4,r4,21336
    1574:	00045900 	call	4590 <puts>

	clearScreen();
    1578:	00032c40 	call	32c4 <clearScreen>

	OSFlagPost(Flags, C1_Flag + C2_Flag, OS_FLAG_SET, &err);
    157c:	d0a80f17 	ldw	r2,-24516(gp)
    1580:	1009883a 	mov	r4,r2
    1584:	01400304 	movi	r5,12
    1588:	01800044 	movi	r6,1
    158c:	e1fffe04 	addi	r7,fp,-8
    1590:	00179b80 	call	179b8 <OSFlagPost>
	OSFlagPost(Flags_Games, Game_Flag, OS_FLAG_SET, &err);
    1594:	d0a80d17 	ldw	r2,-24524(gp)
    1598:	1009883a 	mov	r4,r2
    159c:	01400084 	movi	r5,2
    15a0:	01800044 	movi	r6,1
    15a4:	e1fffe04 	addi	r7,fp,-8
    15a8:	00179b80 	call	179b8 <OSFlagPost>


	if(ID == 1){
    15ac:	e0bfff17 	ldw	r2,-4(fp)
    15b0:	10800058 	cmpnei	r2,r2,1
    15b4:	1000101e 	bne	r2,zero,15f8 <endGame+0xa0>
		VGA_text(35, 25, "Player 1 lost");
    15b8:	010008c4 	movi	r4,35
    15bc:	01400644 	movi	r5,25
    15c0:	018000b4 	movhi	r6,2
    15c4:	3194d904 	addi	r6,r6,21348
    15c8:	0003a700 	call	3a70 <VGA_text>
		OSTimeDlyHMSM(0, 0, 40, 0);
    15cc:	0009883a 	mov	r4,zero
    15d0:	000b883a 	mov	r5,zero
    15d4:	01800a04 	movi	r6,40
    15d8:	000f883a 	mov	r7,zero
    15dc:	001ccbc0 	call	1ccbc <OSTimeDlyHMSM>
		VGA_text(35, 25, "             ");
    15e0:	010008c4 	movi	r4,35
    15e4:	01400644 	movi	r5,25
    15e8:	018000b4 	movhi	r6,2
    15ec:	3194dd04 	addi	r6,r6,21364
    15f0:	0003a700 	call	3a70 <VGA_text>
    15f4:	00001206 	br	1640 <endGame+0xe8>
	} else if(ID == 2){
    15f8:	e0bfff17 	ldw	r2,-4(fp)
    15fc:	10800098 	cmpnei	r2,r2,2
    1600:	10000f1e 	bne	r2,zero,1640 <endGame+0xe8>
		VGA_text(35, 25, "Player 2 lost");
    1604:	010008c4 	movi	r4,35
    1608:	01400644 	movi	r5,25
    160c:	018000b4 	movhi	r6,2
    1610:	3194e104 	addi	r6,r6,21380
    1614:	0003a700 	call	3a70 <VGA_text>
		OSTimeDlyHMSM(0, 0, 40, 0);
    1618:	0009883a 	mov	r4,zero
    161c:	000b883a 	mov	r5,zero
    1620:	01800a04 	movi	r6,40
    1624:	000f883a 	mov	r7,zero
    1628:	001ccbc0 	call	1ccbc <OSTimeDlyHMSM>
		VGA_text(35, 25, "             ");
    162c:	010008c4 	movi	r4,35
    1630:	01400644 	movi	r5,25
    1634:	018000b4 	movhi	r6,2
    1638:	3194dd04 	addi	r6,r6,21364
    163c:	0003a700 	call	3a70 <VGA_text>
	}


	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    1640:	d0a80f17 	ldw	r2,-24516(gp)
    1644:	1009883a 	mov	r4,r2
    1648:	01400444 	movi	r5,17
    164c:	000d883a 	mov	r6,zero
    1650:	e1fffe04 	addi	r7,fp,-8
    1654:	00179b80 	call	179b8 <OSFlagPost>

	teken_menu(2);
    1658:	01000084 	movi	r4,2
    165c:	00034840 	call	3484 <teken_menu>
	deleteNummer();
    1660:	0003c140 	call	3c14 <deleteNummer>


	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1664:	d1282317 	ldw	r4,-24436(gp)
    1668:	d1681d17 	ldw	r5,-24460(gp)
    166c:	d0a82317 	ldw	r2,-24436(gp)
    1670:	10c00144 	addi	r3,r2,5
    1674:	d0a81d17 	ldw	r2,-24460(gp)
    1678:	10800144 	addi	r2,r2,5
    167c:	d8000015 	stw	zero,0(sp)
    1680:	180d883a 	mov	r6,r3
    1684:	100f883a 	mov	r7,r2
    1688:	00039bc0 	call	39bc <VGA_box>

	ALT_x1 = 0;
    168c:	d0282315 	stw	zero,-24436(gp)
	ALT_x2 = 165;
    1690:	00802944 	movi	r2,165
    1694:	d0a82615 	stw	r2,-24424(gp)
	ALT_y = 100;
    1698:	00801904 	movi	r2,100
    169c:	d0a81d15 	stw	r2,-24460(gp)
	ALT_inc_x = 1;
    16a0:	00800044 	movi	r2,1
    16a4:	d0a82515 	stw	r2,-24428(gp)
	ALT_inc_y = 1;
    16a8:	00800044 	movi	r2,1
    16ac:	d0a81f15 	stw	r2,-24452(gp)

	check = 1;
    16b0:	00800044 	movi	r2,1
    16b4:	d0a00115 	stw	r2,-32764(gp)
	first = 1;
    16b8:	00800044 	movi	r2,1
    16bc:	d0a00015 	stw	r2,-32768(gp)

}
    16c0:	e037883a 	mov	sp,fp
    16c4:	dfc00117 	ldw	ra,4(sp)
    16c8:	df000017 	ldw	fp,0(sp)
    16cc:	dec00204 	addi	sp,sp,8
    16d0:	f800283a 	ret

000016d4 <dakjeOmhoog>:

void dakjeOmhoog(int omhoogX, int omhoogY){
    16d4:	defffc04 	addi	sp,sp,-16
    16d8:	dfc00315 	stw	ra,12(sp)
    16dc:	df000215 	stw	fp,8(sp)
    16e0:	df000204 	addi	fp,sp,8
    16e4:	e13ffe15 	stw	r4,-8(fp)
    16e8:	e17fff15 	stw	r5,-4(fp)
	VGA_text(omhoogX, omhoogY, "/\\"); //= dakje omhoog
    16ec:	e13ffe17 	ldw	r4,-8(fp)
    16f0:	e17fff17 	ldw	r5,-4(fp)
    16f4:	018000b4 	movhi	r6,2
    16f8:	3194e504 	addi	r6,r6,21396
    16fc:	0003a700 	call	3a70 <VGA_text>
}
    1700:	e037883a 	mov	sp,fp
    1704:	dfc00117 	ldw	ra,4(sp)
    1708:	df000017 	ldw	fp,0(sp)
    170c:	dec00204 	addi	sp,sp,8
    1710:	f800283a 	ret

00001714 <dakjeOmlaag>:

void dakjeOmlaag(int omlaagX, int omlaagY){
    1714:	defffc04 	addi	sp,sp,-16
    1718:	dfc00315 	stw	ra,12(sp)
    171c:	df000215 	stw	fp,8(sp)
    1720:	df000204 	addi	fp,sp,8
    1724:	e13ffe15 	stw	r4,-8(fp)
    1728:	e17fff15 	stw	r5,-4(fp)
	VGA_text(omlaagX, omlaagY, "\\/"); //= dakje omlaag
    172c:	e13ffe17 	ldw	r4,-8(fp)
    1730:	e17fff17 	ldw	r5,-4(fp)
    1734:	018000b4 	movhi	r6,2
    1738:	3194e604 	addi	r6,r6,21400
    173c:	0003a700 	call	3a70 <VGA_text>
}
    1740:	e037883a 	mov	sp,fp
    1744:	dfc00117 	ldw	ra,4(sp)
    1748:	df000017 	ldw	fp,0(sp)
    174c:	dec00204 	addi	sp,sp,8
    1750:	f800283a 	ret

00001754 <endSingleplayer>:

void endSingleplayer(){
    1754:	defffc04 	addi	sp,sp,-16
    1758:	dfc00315 	stw	ra,12(sp)
    175c:	df000215 	stw	fp,8(sp)
    1760:	df000204 	addi	fp,sp,8
	INT8U err;

	printf("end Singleplayer\n");
    1764:	010000b4 	movhi	r4,2
    1768:	2114e704 	addi	r4,r4,21404
    176c:	00045900 	call	4590 <puts>

	clearScreen();
    1770:	00032c40 	call	32c4 <clearScreen>

	OSFlagPost(Flags, C1_Flag, OS_FLAG_SET, &err);
    1774:	d0a80f17 	ldw	r2,-24516(gp)
    1778:	1009883a 	mov	r4,r2
    177c:	01400104 	movi	r5,4
    1780:	01800044 	movi	r6,1
    1784:	e1ffff04 	addi	r7,fp,-4
    1788:	00179b80 	call	179b8 <OSFlagPost>

	VGA_text(35, 25, "GAME OVER");
    178c:	010008c4 	movi	r4,35
    1790:	01400644 	movi	r5,25
    1794:	018000b4 	movhi	r6,2
    1798:	3194ec04 	addi	r6,r6,21424
    179c:	0003a700 	call	3a70 <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
    17a0:	0009883a 	mov	r4,zero
    17a4:	000b883a 	mov	r5,zero
    17a8:	01800a04 	movi	r6,40
    17ac:	000f883a 	mov	r7,zero
    17b0:	001ccbc0 	call	1ccbc <OSTimeDlyHMSM>
	VGA_text(35, 25, "         ");
    17b4:	010008c4 	movi	r4,35
    17b8:	01400644 	movi	r5,25
    17bc:	018000b4 	movhi	r6,2
    17c0:	3194ef04 	addi	r6,r6,21436
    17c4:	0003a700 	call	3a70 <VGA_text>


	VGA_text(6,5, "           ");
    17c8:	01000184 	movi	r4,6
    17cc:	01400144 	movi	r5,5
    17d0:	018000b4 	movhi	r6,2
    17d4:	3194f204 	addi	r6,r6,21448
    17d8:	0003a700 	call	3a70 <VGA_text>

	leven = beginLevens;
    17dc:	008000c4 	movi	r2,3
    17e0:	d0a00215 	stw	r2,-32760(gp)

	if(score3 > 0){
    17e4:	d0a81417 	ldw	r2,-24496(gp)
    17e8:	00800e0e 	bge	zero,r2,1824 <endSingleplayer+0xd0>

		clearScreen();
    17ec:	00032c40 	call	32c4 <clearScreen>
		OSFlagPost(Flags_newHighscores, newHighscores_Flag, OS_FLAG_CLR, &err);
    17f0:	d0a82017 	ldw	r2,-24448(gp)
    17f4:	1009883a 	mov	r4,r2
    17f8:	01404004 	movi	r5,256
    17fc:	000d883a 	mov	r6,zero
    1800:	e1ffff04 	addi	r7,fp,-4
    1804:	00179b80 	call	179b8 <OSFlagPost>
		OSFlagPost(Flags_Games, Singleplayer_Flag, OS_FLAG_SET, &err);
    1808:	d0a80d17 	ldw	r2,-24524(gp)
    180c:	1009883a 	mov	r4,r2
    1810:	01400804 	movi	r5,32
    1814:	01800044 	movi	r6,1
    1818:	e1ffff04 	addi	r7,fp,-4
    181c:	00179b80 	call	179b8 <OSFlagPost>
    1820:	00002706 	br	18c0 <endSingleplayer+0x16c>
		//knop links is bevestig van alle 3 letters in 1 keer
		//knop rechts is letter naar rechts, ook naar bevestig, eenmaal op bevestig en druk nogmaals op rechts, opnieuw bij de meeste linkse letter.



		teken_menu(1);
    1824:	01000044 	movi	r4,1
    1828:	00034840 	call	3484 <teken_menu>

		VGA_box (316, 4, 319, 235, zwart); 					// singleplayer balk weghalen voor de zekerheid
    182c:	d8000015 	stw	zero,0(sp)
    1830:	01004f04 	movi	r4,316
    1834:	01400104 	movi	r5,4
    1838:	01804fc4 	movi	r6,319
    183c:	01c03ac4 	movi	r7,235
    1840:	00039bc0 	call	39bc <VGA_box>

		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1844:	d1282317 	ldw	r4,-24436(gp)
    1848:	d1681d17 	ldw	r5,-24460(gp)
    184c:	d0a82317 	ldw	r2,-24436(gp)
    1850:	10c00144 	addi	r3,r2,5
    1854:	d0a81d17 	ldw	r2,-24460(gp)
    1858:	10800144 	addi	r2,r2,5
    185c:	d8000015 	stw	zero,0(sp)
    1860:	180d883a 	mov	r6,r3
    1864:	100f883a 	mov	r7,r2
    1868:	00039bc0 	call	39bc <VGA_box>
		deleteNummer();
    186c:	0003c140 	call	3c14 <deleteNummer>


		ALT_x1 = 0;
    1870:	d0282315 	stw	zero,-24436(gp)
		ALT_x2 = 165;
    1874:	00802944 	movi	r2,165
    1878:	d0a82615 	stw	r2,-24424(gp)
		ALT_y = 100;
    187c:	00801904 	movi	r2,100
    1880:	d0a81d15 	stw	r2,-24460(gp)
		ALT_inc_x = -1;
    1884:	00bfffc4 	movi	r2,-1
    1888:	d0a82515 	stw	r2,-24428(gp)
		ALT_inc_y = 1;
    188c:	00800044 	movi	r2,1
    1890:	d0a81f15 	stw	r2,-24452(gp)
	
		leven = beginLevens;
    1894:	008000c4 	movi	r2,3
    1898:	d0a00215 	stw	r2,-32760(gp)
		score3 = 0;
    189c:	d0281415 	stw	zero,-24496(gp)
		first = 1;
    18a0:	00800044 	movi	r2,1
    18a4:	d0a00015 	stw	r2,-32768(gp)
	
		OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    18a8:	d0a80f17 	ldw	r2,-24516(gp)
    18ac:	1009883a 	mov	r4,r2
    18b0:	01400444 	movi	r5,17
    18b4:	000d883a 	mov	r6,zero
    18b8:	e1ffff04 	addi	r7,fp,-4
    18bc:	00179b80 	call	179b8 <OSFlagPost>
	

	}

}
    18c0:	e037883a 	mov	sp,fp
    18c4:	dfc00117 	ldw	ra,4(sp)
    18c8:	df000017 	ldw	fp,0(sp)
    18cc:	dec00204 	addi	sp,sp,8
    18d0:	f800283a 	ret

000018d4 <Singleplayer>:

void Singleplayer(void* pdata){
    18d4:	defff704 	addi	sp,sp,-36
    18d8:	dfc00815 	stw	ra,32(sp)
    18dc:	df000715 	stw	fp,28(sp)
    18e0:	df000704 	addi	fp,sp,28
    18e4:	e13fff15 	stw	r4,-4(fp)
	
	ALT_x1 = 0;
    18e8:	d0282315 	stw	zero,-24436(gp)
	ALT_x2 = 165;
    18ec:	00802944 	movi	r2,165
    18f0:	d0a82615 	stw	r2,-24424(gp)
	ALT_y = 100;
    18f4:	00801904 	movi	r2,100
    18f8:	d0a81d15 	stw	r2,-24460(gp)
	ALT_inc_x = -1;
    18fc:	00bfffc4 	movi	r2,-1
    1900:	d0a82515 	stw	r2,-24428(gp)
	ALT_inc_y = 1;
    1904:	00800044 	movi	r2,1
    1908:	d0a81f15 	stw	r2,-24452(gp)

	pixel_buffer_x = 315;
    190c:	00804ec4 	movi	r2,315
    1910:	d0a81915 	stw	r2,-24476(gp)
	pixel_buffer_y = 230;
    1914:	00803984 	movi	r2,230
    1918:	d0a81715 	stw	r2,-24484(gp)
	char levens[10];

	

	while (1) {
		OSFlagPend(Flags_Games, Singleplayer_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    191c:	d0e80d17 	ldw	r3,-24524(gp)
    1920:	e0bffc04 	addi	r2,fp,-16
    1924:	d8800015 	stw	r2,0(sp)
    1928:	1809883a 	mov	r4,r3
    192c:	01400804 	movi	r5,32
    1930:	000d883a 	mov	r6,zero
    1934:	000f883a 	mov	r7,zero
    1938:	00173600 	call	17360 <OSFlagPend>

		//printf("Single flag is set\n");

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
    193c:	d0e81017 	ldw	r3,-24512(gp)
    1940:	e0bffc04 	addi	r2,fp,-16
    1944:	1809883a 	mov	r4,r3
    1948:	000b883a 	mov	r5,zero
    194c:	100d883a 	mov	r6,r2
    1950:	00186580 	call	18658 <OSMboxPend>
    1954:	e0bffb15 	stw	r2,-20(fp)
		//printf("ID is: %d\tHoogte is: %d\n", balkje->ID, balkje->Hoogte);




		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1958:	d1282317 	ldw	r4,-24436(gp)
    195c:	d1681d17 	ldw	r5,-24460(gp)
    1960:	d0a82317 	ldw	r2,-24436(gp)
    1964:	10c00144 	addi	r3,r2,5
    1968:	d0a81d17 	ldw	r2,-24460(gp)
    196c:	10800144 	addi	r2,r2,5
    1970:	d8000015 	stw	zero,0(sp)
    1974:	180d883a 	mov	r6,r3
    1978:	100f883a 	mov	r7,r2
    197c:	00039bc0 	call	39bc <VGA_box>

		if (first == 1) {
    1980:	d0a00017 	ldw	r2,-32768(gp)
    1984:	10800058 	cmpnei	r2,r2,1
    1988:	1000201e 	bne	r2,zero,1a0c <Singleplayer+0x138>
			printf("FIRST");
    198c:	010000b4 	movhi	r4,2
    1990:	2114f504 	addi	r4,r4,21460
    1994:	000448c0 	call	448c <printf>
			ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
    1998:	d0a82317 	ldw	r2,-24436(gp)
    199c:	10c02804 	addi	r3,r2,160
    19a0:	d0a82517 	ldw	r2,-24428(gp)
    19a4:	1885883a 	add	r2,r3,r2
    19a8:	d0a82315 	stw	r2,-24436(gp)
			ALT_x2 += ALT_inc_x;
    19ac:	d0e82617 	ldw	r3,-24424(gp)
    19b0:	d0a82517 	ldw	r2,-24428(gp)
    19b4:	1885883a 	add	r2,r3,r2
    19b8:	d0a82615 	stw	r2,-24424(gp)
			ALT_y += ALT_inc_y;
    19bc:	d0e81d17 	ldw	r3,-24460(gp)
    19c0:	d0a81f17 	ldw	r2,-24452(gp)
    19c4:	1885883a 	add	r2,r3,r2
    19c8:	d0a81d15 	stw	r2,-24460(gp)

			del_middenlijn();
    19cc:	0003b680 	call	3b68 <del_middenlijn>
			VGA_box (316, 0, 319, 239, groen); 					// rechts
    19d0:	0081a5c4 	movi	r2,1687
    19d4:	d8800015 	stw	r2,0(sp)
    19d8:	01004f04 	movi	r4,316
    19dc:	000b883a 	mov	r5,zero
    19e0:	01804fc4 	movi	r6,319
    19e4:	01c03bc4 	movi	r7,239
    19e8:	00039bc0 	call	39bc <VGA_box>
			VGA_box(300, 4, 305, 235, zwart);
    19ec:	d8000015 	stw	zero,0(sp)
    19f0:	01004b04 	movi	r4,300
    19f4:	01400104 	movi	r5,4
    19f8:	01804c44 	movi	r6,305
    19fc:	01c03ac4 	movi	r7,235
    1a00:	00039bc0 	call	39bc <VGA_box>

			first = 0;
    1a04:	d0200015 	stw	zero,-32768(gp)
    1a08:	00000c06 	br	1a3c <Singleplayer+0x168>
		} else {
			ALT_x1 += ALT_inc_x;
    1a0c:	d0e82317 	ldw	r3,-24436(gp)
    1a10:	d0a82517 	ldw	r2,-24428(gp)
    1a14:	1885883a 	add	r2,r3,r2
    1a18:	d0a82315 	stw	r2,-24436(gp)
			ALT_x2 += ALT_inc_x;
    1a1c:	d0e82617 	ldw	r3,-24424(gp)
    1a20:	d0a82517 	ldw	r2,-24428(gp)
    1a24:	1885883a 	add	r2,r3,r2
    1a28:	d0a82615 	stw	r2,-24424(gp)
			ALT_y += ALT_inc_y;
    1a2c:	d0e81d17 	ldw	r3,-24460(gp)
    1a30:	d0a81f17 	ldw	r2,-24452(gp)
    1a34:	1885883a 	add	r2,r3,r2
    1a38:	d0a81d15 	stw	r2,-24460(gp)
		}


		//collision rand boven en onder
		if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
    1a3c:	d0e81d17 	ldw	r3,-24460(gp)
    1a40:	d0a81717 	ldw	r2,-24484(gp)
    1a44:	18800326 	beq	r3,r2,1a54 <Singleplayer+0x180>
    1a48:	d0a81d17 	ldw	r2,-24460(gp)
    1a4c:	10800118 	cmpnei	r2,r2,4
    1a50:	1000031e 	bne	r2,zero,1a60 <Singleplayer+0x18c>
			ALT_inc_y = -(ALT_inc_y);
    1a54:	d0a81f17 	ldw	r2,-24452(gp)
    1a58:	0085c83a 	sub	r2,zero,r2
    1a5c:	d0a81f15 	stw	r2,-24452(gp)
		}
		//collision rand rechts en links
		if ((ALT_x2 == pixel_buffer_x)) {
    1a60:	d0e82617 	ldw	r3,-24424(gp)
    1a64:	d0a81917 	ldw	r2,-24476(gp)
    1a68:	1880071e 	bne	r3,r2,1a88 <Singleplayer+0x1b4>
			ALT_inc_x = -(ALT_inc_x);
    1a6c:	d0a82517 	ldw	r2,-24428(gp)
    1a70:	0085c83a 	sub	r2,zero,r2
    1a74:	d0a82515 	stw	r2,-24428(gp)
			deleteNummer();
    1a78:	0003c140 	call	3c14 <deleteNummer>
			score3++;
    1a7c:	d0a81417 	ldw	r2,-24496(gp)
    1a80:	10800044 	addi	r2,r2,1
    1a84:	d0a81415 	stw	r2,-24496(gp)

		}

		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
    1a88:	d1282317 	ldw	r4,-24436(gp)
    1a8c:	d1681d17 	ldw	r5,-24460(gp)
    1a90:	d0a82317 	ldw	r2,-24436(gp)
    1a94:	11800144 	addi	r6,r2,5
    1a98:	d0a81d17 	ldw	r2,-24460(gp)
    1a9c:	10c00144 	addi	r3,r2,5
    1aa0:	00804034 	movhi	r2,256
    1aa4:	10bfffc4 	addi	r2,r2,-1
    1aa8:	d8800015 	stw	r2,0(sp)
    1aac:	180f883a 	mov	r7,r3
    1ab0:	00039bc0 	call	39bc <VGA_box>

		//links dood
		if (ALT_x1 == 0) {
    1ab4:	d0a82317 	ldw	r2,-24436(gp)
    1ab8:	1000051e 	bne	r2,zero,1ad0 <Singleplayer+0x1fc>
			leven--;
    1abc:	d0a00217 	ldw	r2,-32760(gp)
    1ac0:	10bfffc4 	addi	r2,r2,-1
    1ac4:	d0a00215 	stw	r2,-32760(gp)
			gescoord(3);
    1ac8:	010000c4 	movi	r4,3
    1acc:	00013280 	call	1328 <gescoord>
//				score3++;
//			}

		//collision linker balkje
		//lange zijde
		if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte && ALT_y < balkje->Hoogte + 50)){
    1ad0:	d0a82317 	ldw	r2,-24436(gp)
    1ad4:	10800558 	cmpnei	r2,r2,21
    1ad8:	10000c1e 	bne	r2,zero,1b0c <Singleplayer+0x238>
    1adc:	e0bffb17 	ldw	r2,-20(fp)
    1ae0:	10c00017 	ldw	r3,0(r2)
    1ae4:	d0a81d17 	ldw	r2,-24460(gp)
    1ae8:	1880080e 	bge	r3,r2,1b0c <Singleplayer+0x238>
    1aec:	e0bffb17 	ldw	r2,-20(fp)
    1af0:	10800017 	ldw	r2,0(r2)
    1af4:	10800c84 	addi	r2,r2,50
    1af8:	d0e81d17 	ldw	r3,-24460(gp)
    1afc:	1880030e 	bge	r3,r2,1b0c <Singleplayer+0x238>
			ALT_inc_x = -(ALT_inc_x);
    1b00:	d0a82517 	ldw	r2,-24428(gp)
    1b04:	0085c83a 	sub	r2,zero,r2
    1b08:	d0a82515 	stw	r2,-24428(gp)
		}
		//boven
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte){
    1b0c:	d0a82317 	ldw	r2,-24436(gp)
    1b10:	10800608 	cmpgei	r2,r2,24
    1b14:	10000a1e 	bne	r2,zero,1b40 <Singleplayer+0x26c>
    1b18:	d0a82317 	ldw	r2,-24436(gp)
    1b1c:	10800590 	cmplti	r2,r2,22
    1b20:	1000071e 	bne	r2,zero,1b40 <Singleplayer+0x26c>
    1b24:	e0bffb17 	ldw	r2,-20(fp)
    1b28:	10c00017 	ldw	r3,0(r2)
    1b2c:	d0a81d17 	ldw	r2,-24460(gp)
    1b30:	1880031e 	bne	r3,r2,1b40 <Singleplayer+0x26c>
			ALT_inc_y = -(ALT_inc_y);
    1b34:	d0a81f17 	ldw	r2,-24452(gp)
    1b38:	0085c83a 	sub	r2,zero,r2
    1b3c:	d0a81f15 	stw	r2,-24452(gp)
		}
		//onder
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte + 50){
    1b40:	d0a82317 	ldw	r2,-24436(gp)
    1b44:	10800608 	cmpgei	r2,r2,24
    1b48:	10000b1e 	bne	r2,zero,1b78 <Singleplayer+0x2a4>
    1b4c:	d0a82317 	ldw	r2,-24436(gp)
    1b50:	10800590 	cmplti	r2,r2,22
    1b54:	1000081e 	bne	r2,zero,1b78 <Singleplayer+0x2a4>
    1b58:	e0bffb17 	ldw	r2,-20(fp)
    1b5c:	10800017 	ldw	r2,0(r2)
    1b60:	10c00c84 	addi	r3,r2,50
    1b64:	d0a81d17 	ldw	r2,-24460(gp)
    1b68:	1880031e 	bne	r3,r2,1b78 <Singleplayer+0x2a4>
			ALT_inc_y = -(ALT_inc_y);
    1b6c:	d0a81f17 	ldw	r2,-24452(gp)
    1b70:	0085c83a 	sub	r2,zero,r2
    1b74:	d0a81f15 	stw	r2,-24452(gp)
		}


		sprintf(levens, "LEVENS: %d", leven);
    1b78:	d0a00217 	ldw	r2,-32760(gp)
    1b7c:	e0fffc44 	addi	r3,fp,-15
    1b80:	1809883a 	mov	r4,r3
    1b84:	014000b4 	movhi	r5,2
    1b88:	2954f704 	addi	r5,r5,21468
    1b8c:	100d883a 	mov	r6,r2
    1b90:	00045fc0 	call	45fc <sprintf>
		VGA_text(6,5, levens);
    1b94:	e0bffc44 	addi	r2,fp,-15
    1b98:	01000184 	movi	r4,6
    1b9c:	01400144 	movi	r5,5
    1ba0:	100d883a 	mov	r6,r2
    1ba4:	0003a700 	call	3a70 <VGA_text>
		OSTimeDly(1);
    1ba8:	01000044 	movi	r4,1
    1bac:	001cb740 	call	1cb74 <OSTimeDly>

		for (i = 0; i <= 999; i++) {
    1bb0:	e03ffa15 	stw	zero,-24(fp)
    1bb4:	00004806 	br	1cd8 <Singleplayer+0x404>

			if(score3 == i){
    1bb8:	d0e81417 	ldw	r3,-24496(gp)
    1bbc:	e0bffa17 	ldw	r2,-24(fp)
    1bc0:	18803c1e 	bne	r3,r2,1cb4 <Singleplayer+0x3e0>

				if (score3 >= 0 && score3 <= 9){
    1bc4:	d0a81417 	ldw	r2,-24496(gp)
    1bc8:	10000716 	blt	r2,zero,1be8 <Singleplayer+0x314>
    1bcc:	d0a81417 	ldw	r2,-24496(gp)
    1bd0:	10800288 	cmpgei	r2,r2,10
    1bd4:	1000041e 	bne	r2,zero,1be8 <Singleplayer+0x314>
					draw_number(i, 3);
    1bd8:	e13ffa17 	ldw	r4,-24(fp)
    1bdc:	014000c4 	movi	r5,3
    1be0:	0003c500 	call	3c50 <draw_number>

		for (i = 0; i <= 999; i++) {

			if(score3 == i){

				if (score3 >= 0 && score3 <= 9){
    1be4:	00003306 	br	1cb4 <Singleplayer+0x3e0>
					draw_number(i, 3);
				} else if (score3 >= 10 && score3 <= 99){
    1be8:	d0a81417 	ldw	r2,-24496(gp)
    1bec:	10800290 	cmplti	r2,r2,10
    1bf0:	1000121e 	bne	r2,zero,1c3c <Singleplayer+0x368>
    1bf4:	d0a81417 	ldw	r2,-24496(gp)
    1bf8:	10801908 	cmpgei	r2,r2,100
    1bfc:	10000f1e 	bne	r2,zero,1c3c <Singleplayer+0x368>
					draw_number(i /10 , 2);
    1c00:	e0fffa17 	ldw	r3,-24(fp)
    1c04:	00800284 	movi	r2,10
    1c08:	1885283a 	div	r2,r3,r2
    1c0c:	1009883a 	mov	r4,r2
    1c10:	01400084 	movi	r5,2
    1c14:	0003c500 	call	3c50 <draw_number>
					draw_number(i %10, 3);
    1c18:	e0bffa17 	ldw	r2,-24(fp)
    1c1c:	00c00284 	movi	r3,10
    1c20:	10c7283a 	div	r3,r2,r3
    1c24:	18c002a4 	muli	r3,r3,10
    1c28:	10c5c83a 	sub	r2,r2,r3
    1c2c:	1009883a 	mov	r4,r2
    1c30:	014000c4 	movi	r5,3
    1c34:	0003c500 	call	3c50 <draw_number>

			if(score3 == i){

				if (score3 >= 0 && score3 <= 9){
					draw_number(i, 3);
				} else if (score3 >= 10 && score3 <= 99){
    1c38:	00001e06 	br	1cb4 <Singleplayer+0x3e0>
					draw_number(i /10 , 2);
					draw_number(i %10, 3);
				} else if (score3 >= 100 && score3 <= 999){
    1c3c:	d0a81417 	ldw	r2,-24496(gp)
    1c40:	10801910 	cmplti	r2,r2,100
    1c44:	10001b1e 	bne	r2,zero,1cb4 <Singleplayer+0x3e0>
    1c48:	d0a81417 	ldw	r2,-24496(gp)
    1c4c:	1080fa08 	cmpgei	r2,r2,1000
    1c50:	1000181e 	bne	r2,zero,1cb4 <Singleplayer+0x3e0>
					draw_number(i /100 , 1);
    1c54:	e0fffa17 	ldw	r3,-24(fp)
    1c58:	00801904 	movi	r2,100
    1c5c:	1885283a 	div	r2,r3,r2
    1c60:	1009883a 	mov	r4,r2
    1c64:	01400044 	movi	r5,1
    1c68:	0003c500 	call	3c50 <draw_number>
					draw_number(i /10 %10, 2);
    1c6c:	e0fffa17 	ldw	r3,-24(fp)
    1c70:	00800284 	movi	r2,10
    1c74:	1885283a 	div	r2,r3,r2
    1c78:	00c00284 	movi	r3,10
    1c7c:	10c7283a 	div	r3,r2,r3
    1c80:	18c002a4 	muli	r3,r3,10
    1c84:	10c5c83a 	sub	r2,r2,r3
    1c88:	1009883a 	mov	r4,r2
    1c8c:	01400084 	movi	r5,2
    1c90:	0003c500 	call	3c50 <draw_number>
					draw_number(i %10, 3);
    1c94:	e0bffa17 	ldw	r2,-24(fp)
    1c98:	00c00284 	movi	r3,10
    1c9c:	10c7283a 	div	r3,r2,r3
    1ca0:	18c002a4 	muli	r3,r3,10
    1ca4:	10c5c83a 	sub	r2,r2,r3
    1ca8:	1009883a 	mov	r4,r2
    1cac:	014000c4 	movi	r5,3
    1cb0:	0003c500 	call	3c50 <draw_number>
				}
			}
			if((score3 == 999) || (leven == 0)){ // max score of geen levens meer, spel eindigt.
    1cb4:	d0a81417 	ldw	r2,-24496(gp)
    1cb8:	1080f9e0 	cmpeqi	r2,r2,999
    1cbc:	1000021e 	bne	r2,zero,1cc8 <Singleplayer+0x3f4>
    1cc0:	d0a00217 	ldw	r2,-32760(gp)
    1cc4:	1000011e 	bne	r2,zero,1ccc <Singleplayer+0x3f8>
				endSingleplayer();
    1cc8:	00017540 	call	1754 <endSingleplayer>

		sprintf(levens, "LEVENS: %d", leven);
		VGA_text(6,5, levens);
		OSTimeDly(1);

		for (i = 0; i <= 999; i++) {
    1ccc:	e0bffa17 	ldw	r2,-24(fp)
    1cd0:	10800044 	addi	r2,r2,1
    1cd4:	e0bffa15 	stw	r2,-24(fp)
    1cd8:	e0bffa17 	ldw	r2,-24(fp)
    1cdc:	1080fa10 	cmplti	r2,r2,1000
    1ce0:	103fb51e 	bne	r2,zero,1bb8 <__alt_mem_Flash_flash_data+0xf4001bb8>





	}
    1ce4:	003f0d06 	br	191c <__alt_mem_Flash_flash_data+0xf400191c>

00001ce8 <tutorialUitleg>:
	
}

void tutorialUitleg(){
    1ce8:	defffe04 	addi	sp,sp,-8
    1cec:	dfc00115 	stw	ra,4(sp)
    1cf0:	df000015 	stw	fp,0(sp)
    1cf4:	d839883a 	mov	fp,sp
	INT8U err;
	
	VGA_text(10, 5, "Er zijn twee soorten spellen: Singleplayer en Multiplayer.");
    1cf8:	01000284 	movi	r4,10
    1cfc:	01400144 	movi	r5,5
    1d00:	018000b4 	movhi	r6,2
    1d04:	3194fa04 	addi	r6,r6,21480
    1d08:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 7, "In Singleplayer speel je tegen de computer, waarbij je");
    1d0c:	01000284 	movi	r4,10
    1d10:	014001c4 	movi	r5,7
    1d14:	018000b4 	movhi	r6,2
    1d18:	31950904 	addi	r6,r6,21540
    1d1c:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 8, "zoveel mogelijk aantal punten moet bereiken door de bal");
    1d20:	01000284 	movi	r4,10
    1d24:	01400204 	movi	r5,8
    1d28:	018000b4 	movhi	r6,2
    1d2c:	31951704 	addi	r6,r6,21596
    1d30:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 9, "tegen de muur te kaatsen. Hierbij heb je 3 levens.");
    1d34:	01000284 	movi	r4,10
    1d38:	01400244 	movi	r5,9
    1d3c:	018000b4 	movhi	r6,2
    1d40:	31952504 	addi	r6,r6,21652
    1d44:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 11, "In Multiplayer gaat het er om dat je de bal in het doel");
    1d48:	01000284 	movi	r4,10
    1d4c:	014002c4 	movi	r5,11
    1d50:	018000b4 	movhi	r6,2
    1d54:	31953204 	addi	r6,r6,21704
    1d58:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 12, "van de tegenstander krijgt. Het doel bevindt zich achter");
    1d5c:	01000284 	movi	r4,10
    1d60:	01400304 	movi	r5,12
    1d64:	018000b4 	movhi	r6,2
    1d68:	31954004 	addi	r6,r6,21760
    1d6c:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 13, "het balkje van de tegenstander. Wanneer je scoort krijg je");
    1d70:	01000284 	movi	r4,10
    1d74:	01400344 	movi	r5,13
    1d78:	018000b4 	movhi	r6,2
    1d7c:	31954f04 	addi	r6,r6,21820
    1d80:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 14, "1 punt.");
    1d84:	01000284 	movi	r4,10
    1d88:	01400384 	movi	r5,14
    1d8c:	018000b4 	movhi	r6,2
    1d90:	31955e04 	addi	r6,r6,21880
    1d94:	0003a700 	call	3a70 <VGA_text>
	
	VGA_text(10, 38, "De besturing gaat als volgt:");
    1d98:	01000284 	movi	r4,10
    1d9c:	01400984 	movi	r5,38
    1da0:	018000b4 	movhi	r6,2
    1da4:	31956004 	addi	r6,r6,21888
    1da8:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 40, "De linker balk wordt bestuurd door het op en neer bewegen");
    1dac:	01000284 	movi	r4,10
    1db0:	01400a04 	movi	r5,40
    1db4:	018000b4 	movhi	r6,2
    1db8:	31956804 	addi	r6,r6,21920
    1dbc:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 41, "van switch 17. Bij de multiplayer wordt ook nog vereist om");
    1dc0:	01000284 	movi	r4,10
    1dc4:	01400a44 	movi	r5,41
    1dc8:	018000b4 	movhi	r6,2
    1dcc:	31957704 	addi	r6,r6,21980
    1dd0:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 42, "de linker knop in te houden, anders ben je af. Dit geldt ook");
    1dd4:	01000284 	movi	r4,10
    1dd8:	01400a84 	movi	r5,42
    1ddc:	018000b4 	movhi	r6,2
    1de0:	31958604 	addi	r6,r6,22040
    1de4:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 43, "voor de rechter knop voor de rechter balk.");
    1de8:	01000284 	movi	r4,10
    1dec:	01400ac4 	movi	r5,43
    1df0:	018000b4 	movhi	r6,2
    1df4:	31959604 	addi	r6,r6,22104
    1df8:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 45, "De rechter balk wordt bestuurd KEY3 en KEY2. KEY3 = omlaag,");
    1dfc:	01000284 	movi	r4,10
    1e00:	01400b44 	movi	r5,45
    1e04:	018000b4 	movhi	r6,2
    1e08:	3195a104 	addi	r6,r6,22148
    1e0c:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 46, "KEY2 = omhoog.");
    1e10:	01000284 	movi	r4,10
    1e14:	01400b84 	movi	r5,46
    1e18:	018000b4 	movhi	r6,2
    1e1c:	3195b004 	addi	r6,r6,22208
    1e20:	0003a700 	call	3a70 <VGA_text>
	
	terugMenu();
    1e24:	0002cf00 	call	2cf0 <terugMenu>
}
    1e28:	e037883a 	mov	sp,fp
    1e2c:	dfc00117 	ldw	ra,4(sp)
    1e30:	df000017 	ldw	fp,0(sp)
    1e34:	dec00204 	addi	sp,sp,8
    1e38:	f800283a 	ret

00001e3c <endTutorial>:

void endTutorial(){
    1e3c:	defffc04 	addi	sp,sp,-16
    1e40:	dfc00315 	stw	ra,12(sp)
    1e44:	df000215 	stw	fp,8(sp)
    1e48:	df000204 	addi	fp,sp,8
	INT8U err;

	printf("end Tutorial\n");
    1e4c:	010000b4 	movhi	r4,2
    1e50:	2115b404 	addi	r4,r4,22224
    1e54:	00045900 	call	4590 <puts>

	//clearScreen();
	VGA_text(10, 5, "                                                                              ");
    1e58:	01000284 	movi	r4,10
    1e5c:	01400144 	movi	r5,5
    1e60:	018000b4 	movhi	r6,2
    1e64:	3195b804 	addi	r6,r6,22240
    1e68:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 6, "                                                                              ");
    1e6c:	01000284 	movi	r4,10
    1e70:	01400184 	movi	r5,6
    1e74:	018000b4 	movhi	r6,2
    1e78:	3195b804 	addi	r6,r6,22240
    1e7c:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 7, "                                                                              ");
    1e80:	01000284 	movi	r4,10
    1e84:	014001c4 	movi	r5,7
    1e88:	018000b4 	movhi	r6,2
    1e8c:	3195b804 	addi	r6,r6,22240
    1e90:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 8, "                                                                              ");
    1e94:	01000284 	movi	r4,10
    1e98:	01400204 	movi	r5,8
    1e9c:	018000b4 	movhi	r6,2
    1ea0:	3195b804 	addi	r6,r6,22240
    1ea4:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 9, "                                                                              ");
    1ea8:	01000284 	movi	r4,10
    1eac:	01400244 	movi	r5,9
    1eb0:	018000b4 	movhi	r6,2
    1eb4:	3195b804 	addi	r6,r6,22240
    1eb8:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 11, "                                                                              ");
    1ebc:	01000284 	movi	r4,10
    1ec0:	014002c4 	movi	r5,11
    1ec4:	018000b4 	movhi	r6,2
    1ec8:	3195b804 	addi	r6,r6,22240
    1ecc:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 12, "                                                                              ");
    1ed0:	01000284 	movi	r4,10
    1ed4:	01400304 	movi	r5,12
    1ed8:	018000b4 	movhi	r6,2
    1edc:	3195b804 	addi	r6,r6,22240
    1ee0:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 13, "                                                                              ");
    1ee4:	01000284 	movi	r4,10
    1ee8:	01400344 	movi	r5,13
    1eec:	018000b4 	movhi	r6,2
    1ef0:	3195b804 	addi	r6,r6,22240
    1ef4:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 14, "                                                                              ");
    1ef8:	01000284 	movi	r4,10
    1efc:	01400384 	movi	r5,14
    1f00:	018000b4 	movhi	r6,2
    1f04:	3195b804 	addi	r6,r6,22240
    1f08:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 38, "                                                                              ");
    1f0c:	01000284 	movi	r4,10
    1f10:	01400984 	movi	r5,38
    1f14:	018000b4 	movhi	r6,2
    1f18:	3195b804 	addi	r6,r6,22240
    1f1c:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 40, "                                                                              ");
    1f20:	01000284 	movi	r4,10
    1f24:	01400a04 	movi	r5,40
    1f28:	018000b4 	movhi	r6,2
    1f2c:	3195b804 	addi	r6,r6,22240
    1f30:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 41, "                                                                              ");
    1f34:	01000284 	movi	r4,10
    1f38:	01400a44 	movi	r5,41
    1f3c:	018000b4 	movhi	r6,2
    1f40:	3195b804 	addi	r6,r6,22240
    1f44:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 42, "                                                                              ");
    1f48:	01000284 	movi	r4,10
    1f4c:	01400a84 	movi	r5,42
    1f50:	018000b4 	movhi	r6,2
    1f54:	3195b804 	addi	r6,r6,22240
    1f58:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 43, "                                                                              ");
    1f5c:	01000284 	movi	r4,10
    1f60:	01400ac4 	movi	r5,43
    1f64:	018000b4 	movhi	r6,2
    1f68:	3195b804 	addi	r6,r6,22240
    1f6c:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 45, "                                                                              ");
    1f70:	01000284 	movi	r4,10
    1f74:	01400b44 	movi	r5,45
    1f78:	018000b4 	movhi	r6,2
    1f7c:	3195b804 	addi	r6,r6,22240
    1f80:	0003a700 	call	3a70 <VGA_text>
	VGA_text(10, 46, "                                                                              ");
    1f84:	01000284 	movi	r4,10
    1f88:	01400b84 	movi	r5,46
    1f8c:	018000b4 	movhi	r6,2
    1f90:	3195b804 	addi	r6,r6,22240
    1f94:	0003a700 	call	3a70 <VGA_text>
	
	VGA_text(63, 56, "              ");
    1f98:	01000fc4 	movi	r4,63
    1f9c:	01400e04 	movi	r5,56
    1fa0:	018000b4 	movhi	r6,2
    1fa4:	3195cc04 	addi	r6,r6,22320
    1fa8:	0003a700 	call	3a70 <VGA_text>
	VGA_text(63, 57, "               ");
    1fac:	01000fc4 	movi	r4,63
    1fb0:	01400e44 	movi	r5,57
    1fb4:	018000b4 	movhi	r6,2
    1fb8:	3195d004 	addi	r6,r6,22336
    1fbc:	0003a700 	call	3a70 <VGA_text>

	OSFlagPost(Flags, C1_Flag, OS_FLAG_SET, &err);
    1fc0:	d0a80f17 	ldw	r2,-24516(gp)
    1fc4:	1009883a 	mov	r4,r2
    1fc8:	01400104 	movi	r5,4
    1fcc:	01800044 	movi	r6,1
    1fd0:	e1ffff04 	addi	r7,fp,-4
    1fd4:	00179b80 	call	179b8 <OSFlagPost>

	VGA_text(35, 25, "Einde Tutorial");
    1fd8:	010008c4 	movi	r4,35
    1fdc:	01400644 	movi	r5,25
    1fe0:	018000b4 	movhi	r6,2
    1fe4:	3195d404 	addi	r6,r6,22352
    1fe8:	0003a700 	call	3a70 <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
    1fec:	0009883a 	mov	r4,zero
    1ff0:	000b883a 	mov	r5,zero
    1ff4:	01800a04 	movi	r6,40
    1ff8:	000f883a 	mov	r7,zero
    1ffc:	001ccbc0 	call	1ccbc <OSTimeDlyHMSM>
	VGA_text(35, 25, "              ");
    2000:	010008c4 	movi	r4,35
    2004:	01400644 	movi	r5,25
    2008:	018000b4 	movhi	r6,2
    200c:	3195cc04 	addi	r6,r6,22320
    2010:	0003a700 	call	3a70 <VGA_text>




	teken_menu(4);
    2014:	01000104 	movi	r4,4
    2018:	00034840 	call	3484 <teken_menu>

	VGA_box (316, 4, 319, 235, zwart); 					// singleplayer/tutorial balk weghalen voor de zekerheid
    201c:	d8000015 	stw	zero,0(sp)
    2020:	01004f04 	movi	r4,316
    2024:	01400104 	movi	r5,4
    2028:	01804fc4 	movi	r6,319
    202c:	01c03ac4 	movi	r7,235
    2030:	00039bc0 	call	39bc <VGA_box>

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    2034:	d1282317 	ldw	r4,-24436(gp)
    2038:	d1681d17 	ldw	r5,-24460(gp)
    203c:	d0a82317 	ldw	r2,-24436(gp)
    2040:	10c00144 	addi	r3,r2,5
    2044:	d0a81d17 	ldw	r2,-24460(gp)
    2048:	10800144 	addi	r2,r2,5
    204c:	d8000015 	stw	zero,0(sp)
    2050:	180d883a 	mov	r6,r3
    2054:	100f883a 	mov	r7,r2
    2058:	00039bc0 	call	39bc <VGA_box>


	ALT_x1 = 0;
    205c:	d0282315 	stw	zero,-24436(gp)
	ALT_x2 = 165;
    2060:	00802944 	movi	r2,165
    2064:	d0a82615 	stw	r2,-24424(gp)
	ALT_y = 100;
    2068:	00801904 	movi	r2,100
    206c:	d0a81d15 	stw	r2,-24460(gp)
	ALT_inc_x = -1;
    2070:	00bfffc4 	movi	r2,-1
    2074:	d0a82515 	stw	r2,-24428(gp)
	ALT_inc_y = 1;
    2078:	00800044 	movi	r2,1
    207c:	d0a81f15 	stw	r2,-24452(gp)

	first = 1;
    2080:	00800044 	movi	r2,1
    2084:	d0a00015 	stw	r2,-32768(gp)

	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    2088:	d0a80f17 	ldw	r2,-24516(gp)
    208c:	1009883a 	mov	r4,r2
    2090:	01400444 	movi	r5,17
    2094:	000d883a 	mov	r6,zero
    2098:	e1ffff04 	addi	r7,fp,-4
    209c:	00179b80 	call	179b8 <OSFlagPost>

	OSFlagPost(Flags_Tutorial, Tutorial_Flag, OS_FLAG_SET, &err);
    20a0:	d0a81217 	ldw	r2,-24504(gp)
    20a4:	1009883a 	mov	r4,r2
    20a8:	01401004 	movi	r5,64
    20ac:	01800044 	movi	r6,1
    20b0:	e1ffff04 	addi	r7,fp,-4
    20b4:	00179b80 	call	179b8 <OSFlagPost>

}
    20b8:	e037883a 	mov	sp,fp
    20bc:	dfc00117 	ldw	ra,4(sp)
    20c0:	df000017 	ldw	fp,0(sp)
    20c4:	dec00204 	addi	sp,sp,8
    20c8:	f800283a 	ret

000020cc <Tutorial>:

void Tutorial(void* pdata){
    20cc:	defffa04 	addi	sp,sp,-24
    20d0:	dfc00515 	stw	ra,20(sp)
    20d4:	df000415 	stw	fp,16(sp)
    20d8:	df000404 	addi	fp,sp,16
    20dc:	e13fff15 	stw	r4,-4(fp)
	
	ALT_x1 = 0;
    20e0:	d0282315 	stw	zero,-24436(gp)
	ALT_x2 = 165;
    20e4:	00802944 	movi	r2,165
    20e8:	d0a82615 	stw	r2,-24424(gp)
	ALT_y = 100;
    20ec:	00801904 	movi	r2,100
    20f0:	d0a81d15 	stw	r2,-24460(gp)
	ALT_inc_x = 1;
    20f4:	00800044 	movi	r2,1
    20f8:	d0a82515 	stw	r2,-24428(gp)
	ALT_inc_y = 1;
    20fc:	00800044 	movi	r2,1
    2100:	d0a81f15 	stw	r2,-24452(gp)

	pixel_buffer_x = 315;
    2104:	00804ec4 	movi	r2,315
    2108:	d0a81915 	stw	r2,-24476(gp)
	pixel_buffer_y = 230;
    210c:	00803984 	movi	r2,230
    2110:	d0a81715 	stw	r2,-24484(gp)
	int count;
	int q;
	Balk * balkje;
	
	while (1) {
		OSFlagPend(Flags_Tutorial, Tutorial_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
    2114:	d0e81217 	ldw	r3,-24504(gp)
    2118:	e0bffe04 	addi	r2,fp,-8
    211c:	d8800015 	stw	r2,0(sp)
    2120:	1809883a 	mov	r4,r3
    2124:	01401004 	movi	r5,64
    2128:	01800044 	movi	r6,1
    212c:	000f883a 	mov	r7,zero
    2130:	00173600 	call	17360 <OSFlagPend>

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
    2134:	d0e81017 	ldw	r3,-24512(gp)
    2138:	e0bffe04 	addi	r2,fp,-8
    213c:	1809883a 	mov	r4,r3
    2140:	000b883a 	mov	r5,zero
    2144:	100d883a 	mov	r6,r2
    2148:	00186580 	call	18658 <OSMboxPend>
    214c:	e0bffd15 	stw	r2,-12(fp)

		//printf("TUTORIAL SET\n");

		//printf("ID is: %d\tHoogte is: %d\n", balkje->ID, balkje->Hoogte);

		tutorialUitleg();
    2150:	0001ce80 	call	1ce8 <tutorialUitleg>
		
		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    2154:	d1282317 	ldw	r4,-24436(gp)
    2158:	d1681d17 	ldw	r5,-24460(gp)
    215c:	d0a82317 	ldw	r2,-24436(gp)
    2160:	10c00144 	addi	r3,r2,5
    2164:	d0a81d17 	ldw	r2,-24460(gp)
    2168:	10800144 	addi	r2,r2,5
    216c:	d8000015 	stw	zero,0(sp)
    2170:	180d883a 	mov	r6,r3
    2174:	100f883a 	mov	r7,r2
    2178:	00039bc0 	call	39bc <VGA_box>


		if (first == 1) {
    217c:	d0a00017 	ldw	r2,-32768(gp)
    2180:	10800058 	cmpnei	r2,r2,1
    2184:	10001d1e 	bne	r2,zero,21fc <Tutorial+0x130>
			ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
    2188:	d0a82317 	ldw	r2,-24436(gp)
    218c:	10c02804 	addi	r3,r2,160
    2190:	d0a82517 	ldw	r2,-24428(gp)
    2194:	1885883a 	add	r2,r3,r2
    2198:	d0a82315 	stw	r2,-24436(gp)
			ALT_x2 += ALT_inc_x;
    219c:	d0e82617 	ldw	r3,-24424(gp)
    21a0:	d0a82517 	ldw	r2,-24428(gp)
    21a4:	1885883a 	add	r2,r3,r2
    21a8:	d0a82615 	stw	r2,-24424(gp)
			ALT_y += ALT_inc_y;
    21ac:	d0e81d17 	ldw	r3,-24460(gp)
    21b0:	d0a81f17 	ldw	r2,-24452(gp)
    21b4:	1885883a 	add	r2,r3,r2
    21b8:	d0a81d15 	stw	r2,-24460(gp)

			del_middenlijn();
    21bc:	0003b680 	call	3b68 <del_middenlijn>
			VGA_box (316, 0, 319, 239, groen); 					// rechts
    21c0:	0081a5c4 	movi	r2,1687
    21c4:	d8800015 	stw	r2,0(sp)
    21c8:	01004f04 	movi	r4,316
    21cc:	000b883a 	mov	r5,zero
    21d0:	01804fc4 	movi	r6,319
    21d4:	01c03bc4 	movi	r7,239
    21d8:	00039bc0 	call	39bc <VGA_box>
			VGA_box(300, 4, 305, 235, zwart);
    21dc:	d8000015 	stw	zero,0(sp)
    21e0:	01004b04 	movi	r4,300
    21e4:	01400104 	movi	r5,4
    21e8:	01804c44 	movi	r6,305
    21ec:	01c03ac4 	movi	r7,235
    21f0:	00039bc0 	call	39bc <VGA_box>

			first = 0;
    21f4:	d0200015 	stw	zero,-32768(gp)
    21f8:	00000c06 	br	222c <Tutorial+0x160>
		} else {
			ALT_x1 += ALT_inc_x;
    21fc:	d0e82317 	ldw	r3,-24436(gp)
    2200:	d0a82517 	ldw	r2,-24428(gp)
    2204:	1885883a 	add	r2,r3,r2
    2208:	d0a82315 	stw	r2,-24436(gp)
			ALT_x2 += ALT_inc_x;
    220c:	d0e82617 	ldw	r3,-24424(gp)
    2210:	d0a82517 	ldw	r2,-24428(gp)
    2214:	1885883a 	add	r2,r3,r2
    2218:	d0a82615 	stw	r2,-24424(gp)
			ALT_y += ALT_inc_y;
    221c:	d0e81d17 	ldw	r3,-24460(gp)
    2220:	d0a81f17 	ldw	r2,-24452(gp)
    2224:	1885883a 	add	r2,r3,r2
    2228:	d0a81d15 	stw	r2,-24460(gp)
		



		//collision rand boven en onder
		if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
    222c:	d0e81d17 	ldw	r3,-24460(gp)
    2230:	d0a81717 	ldw	r2,-24484(gp)
    2234:	18800326 	beq	r3,r2,2244 <Tutorial+0x178>
    2238:	d0a81d17 	ldw	r2,-24460(gp)
    223c:	10800118 	cmpnei	r2,r2,4
    2240:	1000031e 	bne	r2,zero,2250 <Tutorial+0x184>
			ALT_inc_y = -(ALT_inc_y);
    2244:	d0a81f17 	ldw	r2,-24452(gp)
    2248:	0085c83a 	sub	r2,zero,r2
    224c:	d0a81f15 	stw	r2,-24452(gp)
		}
		//collision rand rechts en links
		if ((ALT_x2 == pixel_buffer_x)) {
    2250:	d0e82617 	ldw	r3,-24424(gp)
    2254:	d0a81917 	ldw	r2,-24476(gp)
    2258:	1880031e 	bne	r3,r2,2268 <Tutorial+0x19c>
			ALT_inc_x = -(ALT_inc_x);
    225c:	d0a82517 	ldw	r2,-24428(gp)
    2260:	0085c83a 	sub	r2,zero,r2
    2264:	d0a82515 	stw	r2,-24428(gp)

		}

		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
    2268:	d1282317 	ldw	r4,-24436(gp)
    226c:	d1681d17 	ldw	r5,-24460(gp)
    2270:	d0a82317 	ldw	r2,-24436(gp)
    2274:	11800144 	addi	r6,r2,5
    2278:	d0a81d17 	ldw	r2,-24460(gp)
    227c:	10c00144 	addi	r3,r2,5
    2280:	00804034 	movhi	r2,256
    2284:	10bfffc4 	addi	r2,r2,-1
    2288:	d8800015 	stw	r2,0(sp)
    228c:	180f883a 	mov	r7,r3
    2290:	00039bc0 	call	39bc <VGA_box>
		
		//links dood
		if (ALT_x1 == 0) {
    2294:	d0a82317 	ldw	r2,-24436(gp)
    2298:	1000021e 	bne	r2,zero,22a4 <Tutorial+0x1d8>
			gescoord(3);
    229c:	010000c4 	movi	r4,3
    22a0:	00013280 	call	1328 <gescoord>
//				score3++;
//			}

		//collision linker balkje
		//lange zijde
		if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte && ALT_y < balkje->Hoogte + 50)){
    22a4:	d0a82317 	ldw	r2,-24436(gp)
    22a8:	10800558 	cmpnei	r2,r2,21
    22ac:	10000c1e 	bne	r2,zero,22e0 <Tutorial+0x214>
    22b0:	e0bffd17 	ldw	r2,-12(fp)
    22b4:	10c00017 	ldw	r3,0(r2)
    22b8:	d0a81d17 	ldw	r2,-24460(gp)
    22bc:	1880080e 	bge	r3,r2,22e0 <Tutorial+0x214>
    22c0:	e0bffd17 	ldw	r2,-12(fp)
    22c4:	10800017 	ldw	r2,0(r2)
    22c8:	10800c84 	addi	r2,r2,50
    22cc:	d0e81d17 	ldw	r3,-24460(gp)
    22d0:	1880030e 	bge	r3,r2,22e0 <Tutorial+0x214>
			ALT_inc_x = -(ALT_inc_x);
    22d4:	d0a82517 	ldw	r2,-24428(gp)
    22d8:	0085c83a 	sub	r2,zero,r2
    22dc:	d0a82515 	stw	r2,-24428(gp)
		}
		//boven
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte){
    22e0:	d0a82317 	ldw	r2,-24436(gp)
    22e4:	10800608 	cmpgei	r2,r2,24
    22e8:	10000a1e 	bne	r2,zero,2314 <Tutorial+0x248>
    22ec:	d0a82317 	ldw	r2,-24436(gp)
    22f0:	10800590 	cmplti	r2,r2,22
    22f4:	1000071e 	bne	r2,zero,2314 <Tutorial+0x248>
    22f8:	e0bffd17 	ldw	r2,-12(fp)
    22fc:	10c00017 	ldw	r3,0(r2)
    2300:	d0a81d17 	ldw	r2,-24460(gp)
    2304:	1880031e 	bne	r3,r2,2314 <Tutorial+0x248>
			ALT_inc_y = -(ALT_inc_y);
    2308:	d0a81f17 	ldw	r2,-24452(gp)
    230c:	0085c83a 	sub	r2,zero,r2
    2310:	d0a81f15 	stw	r2,-24452(gp)
		}
		//onder
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte + 50){
    2314:	d0a82317 	ldw	r2,-24436(gp)
    2318:	10800608 	cmpgei	r2,r2,24
    231c:	10000b1e 	bne	r2,zero,234c <Tutorial+0x280>
    2320:	d0a82317 	ldw	r2,-24436(gp)
    2324:	10800590 	cmplti	r2,r2,22
    2328:	1000081e 	bne	r2,zero,234c <Tutorial+0x280>
    232c:	e0bffd17 	ldw	r2,-12(fp)
    2330:	10800017 	ldw	r2,0(r2)
    2334:	10c00c84 	addi	r3,r2,50
    2338:	d0a81d17 	ldw	r2,-24460(gp)
    233c:	1880031e 	bne	r3,r2,234c <Tutorial+0x280>
			ALT_inc_y = -(ALT_inc_y);
    2340:	d0a81f17 	ldw	r2,-24452(gp)
    2344:	0085c83a 	sub	r2,zero,r2
    2348:	d0a81f15 	stw	r2,-24452(gp)
		}

		
		if (controller(3) == 3) {
    234c:	010000c4 	movi	r4,3
    2350:	000039c0 	call	39c <controller>
    2354:	108000d8 	cmpnei	r2,r2,3
    2358:	1000011e 	bne	r2,zero,2360 <Tutorial+0x294>
			endTutorial();
    235c:	0001e3c0 	call	1e3c <endTutorial>
		}

		OSTimeDly(1);
    2360:	01000044 	movi	r4,1
    2364:	001cb740 	call	1cb74 <OSTimeDly>


	}
    2368:	003f6a06 	br	2114 <__alt_mem_Flash_flash_data+0xf4002114>

0000236c <endNewHighscores>:
	
}

void endNewHighscores(){
    236c:	defffd04 	addi	sp,sp,-12
    2370:	dfc00215 	stw	ra,8(sp)
    2374:	df000115 	stw	fp,4(sp)
    2378:	df000104 	addi	fp,sp,4
	
	INT8U err;

	printf("end newHighscores\n");
    237c:	010000b4 	movhi	r4,2
    2380:	2115d804 	addi	r4,r4,22368
    2384:	00045900 	call	4590 <puts>

	//clearScreen();
	
	for (textWeg = 0; textWeg < 60; textWeg++){
    2388:	d0281e15 	stw	zero,-24456(gp)
    238c:	00000906 	br	23b4 <endNewHighscores+0x48>
	VGA_text(1, textWeg, "                                                                                ");
    2390:	d0a81e17 	ldw	r2,-24456(gp)
    2394:	01000044 	movi	r4,1
    2398:	100b883a 	mov	r5,r2
    239c:	018000b4 	movhi	r6,2
    23a0:	3195dd04 	addi	r6,r6,22388
    23a4:	0003a700 	call	3a70 <VGA_text>

	printf("end newHighscores\n");

	//clearScreen();
	
	for (textWeg = 0; textWeg < 60; textWeg++){
    23a8:	d0a81e17 	ldw	r2,-24456(gp)
    23ac:	10800044 	addi	r2,r2,1
    23b0:	d0a81e15 	stw	r2,-24456(gp)
    23b4:	d0a81e17 	ldw	r2,-24456(gp)
    23b8:	10800f10 	cmplti	r2,r2,60
    23bc:	103ff41e 	bne	r2,zero,2390 <__alt_mem_Flash_flash_data+0xf4002390>
	VGA_text(1, textWeg, "                                                                                ");
	}
	

	OSFlagPost(Flags, C1_Flag, OS_FLAG_SET, &err);
    23c0:	d0a80f17 	ldw	r2,-24516(gp)
    23c4:	1009883a 	mov	r4,r2
    23c8:	01400104 	movi	r5,4
    23cc:	01800044 	movi	r6,1
    23d0:	e1ffff04 	addi	r7,fp,-4
    23d4:	00179b80 	call	179b8 <OSFlagPost>

	VGA_text(35, 25, "Einde Nieuwe Highscores");
    23d8:	010008c4 	movi	r4,35
    23dc:	01400644 	movi	r5,25
    23e0:	018000b4 	movhi	r6,2
    23e4:	3195f204 	addi	r6,r6,22472
    23e8:	0003a700 	call	3a70 <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
    23ec:	0009883a 	mov	r4,zero
    23f0:	000b883a 	mov	r5,zero
    23f4:	01800a04 	movi	r6,40
    23f8:	000f883a 	mov	r7,zero
    23fc:	001ccbc0 	call	1ccbc <OSTimeDlyHMSM>
	VGA_text(35, 25, "                           ");
    2400:	010008c4 	movi	r4,35
    2404:	01400644 	movi	r5,25
    2408:	018000b4 	movhi	r6,2
    240c:	3194cf04 	addi	r6,r6,21308
    2410:	0003a700 	call	3a70 <VGA_text>


	score3 = 0;
    2414:	d0281415 	stw	zero,-24496(gp)

	teken_menu(1);
    2418:	01000044 	movi	r4,1
    241c:	00034840 	call	3484 <teken_menu>

	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    2420:	d0a80f17 	ldw	r2,-24516(gp)
    2424:	1009883a 	mov	r4,r2
    2428:	01400444 	movi	r5,17
    242c:	000d883a 	mov	r6,zero
    2430:	e1ffff04 	addi	r7,fp,-4
    2434:	00179b80 	call	179b8 <OSFlagPost>

	OSFlagPost(Flags_newHighscores, newHighscores_Flag, OS_FLAG_SET, &err);
    2438:	d0a82017 	ldw	r2,-24448(gp)
    243c:	1009883a 	mov	r4,r2
    2440:	01404004 	movi	r5,256
    2444:	01800044 	movi	r6,1
    2448:	e1ffff04 	addi	r7,fp,-4
    244c:	00179b80 	call	179b8 <OSFlagPost>
	
}
    2450:	e037883a 	mov	sp,fp
    2454:	dfc00117 	ldw	ra,4(sp)
    2458:	df000017 	ldw	fp,0(sp)
    245c:	dec00204 	addi	sp,sp,8
    2460:	f800283a 	ret

00002464 <clearHighscoreText>:

void clearHighscoreText(){
    2464:	defffe04 	addi	sp,sp,-8
    2468:	dfc00115 	stw	ra,4(sp)
    246c:	df000015 	stw	fp,0(sp)
    2470:	d839883a 	mov	fp,sp
	
	VGA_text(20, 35, "  ");
    2474:	01000504 	movi	r4,20
    2478:	014008c4 	movi	r5,35
    247c:	018000b4 	movhi	r6,2
    2480:	3195f804 	addi	r6,r6,22496
    2484:	0003a700 	call	3a70 <VGA_text>
	VGA_text(30, 35, "  ");
    2488:	01000784 	movi	r4,30
    248c:	014008c4 	movi	r5,35
    2490:	018000b4 	movhi	r6,2
    2494:	3195f804 	addi	r6,r6,22496
    2498:	0003a700 	call	3a70 <VGA_text>
	VGA_text(40, 35, "  ");
    249c:	01000a04 	movi	r4,40
    24a0:	014008c4 	movi	r5,35
    24a4:	018000b4 	movhi	r6,2
    24a8:	3195f804 	addi	r6,r6,22496
    24ac:	0003a700 	call	3a70 <VGA_text>
	VGA_text(50, 35, "           ");
    24b0:	01000c84 	movi	r4,50
    24b4:	014008c4 	movi	r5,35
    24b8:	018000b4 	movhi	r6,2
    24bc:	3194f204 	addi	r6,r6,21448
    24c0:	0003a700 	call	3a70 <VGA_text>
	
	VGA_text(20, 30, "                                                                        ");
    24c4:	01000504 	movi	r4,20
    24c8:	01400784 	movi	r5,30
    24cc:	018000b4 	movhi	r6,2
    24d0:	3195f904 	addi	r6,r6,22500
    24d4:	0003a700 	call	3a70 <VGA_text>
	VGA_text(20, 40, "                                                                        ");
    24d8:	01000504 	movi	r4,20
    24dc:	01400a04 	movi	r5,40
    24e0:	018000b4 	movhi	r6,2
    24e4:	3195f904 	addi	r6,r6,22500
    24e8:	0003a700 	call	3a70 <VGA_text>
	
}
    24ec:	e037883a 	mov	sp,fp
    24f0:	dfc00117 	ldw	ra,4(sp)
    24f4:	df000017 	ldw	fp,0(sp)
    24f8:	dec00204 	addi	sp,sp,8
    24fc:	f800283a 	ret

00002500 <newHighscores>:

void newHighscores(void *pdata){
    2500:	defffb04 	addi	sp,sp,-20
    2504:	dfc00415 	stw	ra,16(sp)
    2508:	df000315 	stw	fp,12(sp)
    250c:	df000304 	addi	fp,sp,12
    2510:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	a[0] = 'A';
    2514:	00801044 	movi	r2,65
    2518:	d0a82405 	stb	r2,-24432(gp)
	a[1] = '\0';
    251c:	d0a82444 	addi	r2,gp,-24431
    2520:	10000005 	stb	zero,0(r2)

	b[0] = 'B';
    2524:	00801084 	movi	r2,66
    2528:	d0a81605 	stb	r2,-24488(gp)
	b[1] = '\0';
    252c:	d0a81644 	addi	r2,gp,-24487
    2530:	10000005 	stb	zero,0(r2)

	c[0] = 'C';
    2534:	008010c4 	movi	r2,67
    2538:	d0a81c05 	stb	r2,-24464(gp)
	c[1] = '\0';
    253c:	d0a81c44 	addi	r2,gp,-24463
    2540:	10000005 	stb	zero,0(r2)
	newHighscoreSelect = 1;
    2544:	00800044 	movi	r2,1
    2548:	d0a82215 	stw	r2,-24440(gp)
	
	while(1){
		OSFlagPend(Flags_newHighscores, newHighscores_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
    254c:	d0a82017 	ldw	r2,-24448(gp)
    2550:	e0fffe04 	addi	r3,fp,-8
    2554:	d8c00015 	stw	r3,0(sp)
    2558:	1009883a 	mov	r4,r2
    255c:	01404004 	movi	r5,256
    2560:	01800044 	movi	r6,1
    2564:	000f883a 	mov	r7,zero
    2568:	00173600 	call	17360 <OSFlagPend>

		VGA_text(35, 15, "New Highscore!");
    256c:	010008c4 	movi	r4,35
    2570:	014003c4 	movi	r5,15
    2574:	018000b4 	movhi	r6,2
    2578:	31960c04 	addi	r6,r6,22576
    257c:	0003a700 	call	3a70 <VGA_text>
		
		if (controller(3) == 3){
    2580:	010000c4 	movi	r4,3
    2584:	000039c0 	call	39c <controller>
    2588:	108000d8 	cmpnei	r2,r2,3
    258c:	1000251e 	bne	r2,zero,2624 <newHighscores+0x124>
			if(verandert != 0){
    2590:	d0a81b17 	ldw	r2,-24468(gp)
    2594:	10001e26 	beq	r2,zero,2610 <newHighscores+0x110>
				newHighscoreSelect++;
    2598:	d0a82217 	ldw	r2,-24440(gp)
    259c:	10800044 	addi	r2,r2,1
    25a0:	d0a82215 	stw	r2,-24440(gp)
				oneTime = 1;
    25a4:	00800044 	movi	r2,1
    25a8:	d0a00315 	stw	r2,-32756(gp)
				verandert = 0;
    25ac:	d0281b15 	stw	zero,-24468(gp)
				VGA_box(19 *4, 34 * 4, 22 * 4, 37 * 4, zwart);
    25b0:	d8000015 	stw	zero,0(sp)
    25b4:	01001304 	movi	r4,76
    25b8:	01402204 	movi	r5,136
    25bc:	01801604 	movi	r6,88
    25c0:	01c02504 	movi	r7,148
    25c4:	00039bc0 	call	39bc <VGA_box>
				VGA_box(29 * 4, 34 * 4, 32 * 4, 37 * 4, zwart);
    25c8:	d8000015 	stw	zero,0(sp)
    25cc:	01001d04 	movi	r4,116
    25d0:	01402204 	movi	r5,136
    25d4:	01802004 	movi	r6,128
    25d8:	01c02504 	movi	r7,148
    25dc:	00039bc0 	call	39bc <VGA_box>
				VGA_box(39 * 4, 34 * 4, 42 * 4, 37 * 4, zwart);
    25e0:	d8000015 	stw	zero,0(sp)
    25e4:	01002704 	movi	r4,156
    25e8:	01402204 	movi	r5,136
    25ec:	01802a04 	movi	r6,168
    25f0:	01c02504 	movi	r7,148
    25f4:	00039bc0 	call	39bc <VGA_box>
				VGA_box(49 * 4, 34 * 4, 59 * 4, 37 * 4, zwart);
    25f8:	d8000015 	stw	zero,0(sp)
    25fc:	01003104 	movi	r4,196
    2600:	01402204 	movi	r5,136
    2604:	01803b04 	movi	r6,236
    2608:	01c02504 	movi	r7,148
    260c:	00039bc0 	call	39bc <VGA_box>
			}			
			if (newHighscoreSelect >= 5){
    2610:	d0a82217 	ldw	r2,-24440(gp)
    2614:	10800150 	cmplti	r2,r2,5
    2618:	1000021e 	bne	r2,zero,2624 <newHighscores+0x124>
			newHighscoreSelect = 1;
    261c:	00800044 	movi	r2,1
    2620:	d0a82215 	stw	r2,-24440(gp)
			}
		}

		if(controller(2) == 1 && newHighscoreSelect == 1){
    2624:	01000084 	movi	r4,2
    2628:	000039c0 	call	39c <controller>
    262c:	10800058 	cmpnei	r2,r2,1
    2630:	1000131e 	bne	r2,zero,2680 <newHighscores+0x180>
    2634:	d0a82217 	ldw	r2,-24440(gp)
    2638:	10800058 	cmpnei	r2,r2,1
    263c:	1000101e 	bne	r2,zero,2680 <newHighscores+0x180>
			if(a[0] >= '[' && controller(2) == 1){
    2640:	d0a82403 	ldbu	r2,-24432(gp)
    2644:	10803fcc 	andi	r2,r2,255
    2648:	1080201c 	xori	r2,r2,128
    264c:	10bfe004 	addi	r2,r2,-128
    2650:	108016d0 	cmplti	r2,r2,91
    2654:	1000061e 	bne	r2,zero,2670 <newHighscores+0x170>
    2658:	01000084 	movi	r4,2
    265c:	000039c0 	call	39c <controller>
    2660:	10800058 	cmpnei	r2,r2,1
    2664:	1000021e 	bne	r2,zero,2670 <newHighscores+0x170>
				a[0] = '@';
    2668:	00801004 	movi	r2,64
    266c:	d0a82405 	stb	r2,-24432(gp)
			}
			a[0]++;
    2670:	d0a82403 	ldbu	r2,-24432(gp)
    2674:	10800044 	addi	r2,r2,1
    2678:	d0a82405 	stb	r2,-24432(gp)
    267c:	00001406 	br	26d0 <newHighscores+0x1d0>
		} else if (controller(2) == 0 && newHighscoreSelect == 1){
    2680:	01000084 	movi	r4,2
    2684:	000039c0 	call	39c <controller>
    2688:	1000111e 	bne	r2,zero,26d0 <newHighscores+0x1d0>
    268c:	d0a82217 	ldw	r2,-24440(gp)
    2690:	10800058 	cmpnei	r2,r2,1
    2694:	10000e1e 	bne	r2,zero,26d0 <newHighscores+0x1d0>
			if (a[0] <= '@' && controller(2) == 0){
    2698:	d0a82403 	ldbu	r2,-24432(gp)
    269c:	10803fcc 	andi	r2,r2,255
    26a0:	1080201c 	xori	r2,r2,128
    26a4:	10bfe004 	addi	r2,r2,-128
    26a8:	10801048 	cmpgei	r2,r2,65
    26ac:	1000051e 	bne	r2,zero,26c4 <newHighscores+0x1c4>
    26b0:	01000084 	movi	r4,2
    26b4:	000039c0 	call	39c <controller>
    26b8:	1000021e 	bne	r2,zero,26c4 <newHighscores+0x1c4>
				a[0] = '[';
    26bc:	008016c4 	movi	r2,91
    26c0:	d0a82405 	stb	r2,-24432(gp)
			}
			a[0]--;
    26c4:	d0a82403 	ldbu	r2,-24432(gp)
    26c8:	10bfffc4 	addi	r2,r2,-1
    26cc:	d0a82405 	stb	r2,-24432(gp)
		}
		
		if (controller(2) == 1 && newHighscoreSelect == 2){
    26d0:	01000084 	movi	r4,2
    26d4:	000039c0 	call	39c <controller>
    26d8:	10800058 	cmpnei	r2,r2,1
    26dc:	1000131e 	bne	r2,zero,272c <newHighscores+0x22c>
    26e0:	d0a82217 	ldw	r2,-24440(gp)
    26e4:	10800098 	cmpnei	r2,r2,2
    26e8:	1000101e 	bne	r2,zero,272c <newHighscores+0x22c>
			if(b[0] >= '[' && controller(2) == 1){
    26ec:	d0a81603 	ldbu	r2,-24488(gp)
    26f0:	10803fcc 	andi	r2,r2,255
    26f4:	1080201c 	xori	r2,r2,128
    26f8:	10bfe004 	addi	r2,r2,-128
    26fc:	108016d0 	cmplti	r2,r2,91
    2700:	1000061e 	bne	r2,zero,271c <newHighscores+0x21c>
    2704:	01000084 	movi	r4,2
    2708:	000039c0 	call	39c <controller>
    270c:	10800058 	cmpnei	r2,r2,1
    2710:	1000021e 	bne	r2,zero,271c <newHighscores+0x21c>
				b[0] = '@';
    2714:	00801004 	movi	r2,64
    2718:	d0a81605 	stb	r2,-24488(gp)
			}
			b[0]++;
    271c:	d0a81603 	ldbu	r2,-24488(gp)
    2720:	10800044 	addi	r2,r2,1
    2724:	d0a81605 	stb	r2,-24488(gp)
    2728:	00001406 	br	277c <newHighscores+0x27c>
		} else if (controller(2) == 0 && newHighscoreSelect == 2){
    272c:	01000084 	movi	r4,2
    2730:	000039c0 	call	39c <controller>
    2734:	1000111e 	bne	r2,zero,277c <newHighscores+0x27c>
    2738:	d0a82217 	ldw	r2,-24440(gp)
    273c:	10800098 	cmpnei	r2,r2,2
    2740:	10000e1e 	bne	r2,zero,277c <newHighscores+0x27c>
			if(b[0] <= '@' && controller(2) == 0){
    2744:	d0a81603 	ldbu	r2,-24488(gp)
    2748:	10803fcc 	andi	r2,r2,255
    274c:	1080201c 	xori	r2,r2,128
    2750:	10bfe004 	addi	r2,r2,-128
    2754:	10801048 	cmpgei	r2,r2,65
    2758:	1000051e 	bne	r2,zero,2770 <newHighscores+0x270>
    275c:	01000084 	movi	r4,2
    2760:	000039c0 	call	39c <controller>
    2764:	1000021e 	bne	r2,zero,2770 <newHighscores+0x270>
				b[0] = '[';
    2768:	008016c4 	movi	r2,91
    276c:	d0a81605 	stb	r2,-24488(gp)
			}
			b[0]--;
    2770:	d0a81603 	ldbu	r2,-24488(gp)
    2774:	10bfffc4 	addi	r2,r2,-1
    2778:	d0a81605 	stb	r2,-24488(gp)
		}
		
		if (controller(2) == 1 && newHighscoreSelect == 3){
    277c:	01000084 	movi	r4,2
    2780:	000039c0 	call	39c <controller>
    2784:	10800058 	cmpnei	r2,r2,1
    2788:	1000131e 	bne	r2,zero,27d8 <newHighscores+0x2d8>
    278c:	d0a82217 	ldw	r2,-24440(gp)
    2790:	108000d8 	cmpnei	r2,r2,3
    2794:	1000101e 	bne	r2,zero,27d8 <newHighscores+0x2d8>
			if(c[0] >= '[' && controller(2) == 1){
    2798:	d0a81c03 	ldbu	r2,-24464(gp)
    279c:	10803fcc 	andi	r2,r2,255
    27a0:	1080201c 	xori	r2,r2,128
    27a4:	10bfe004 	addi	r2,r2,-128
    27a8:	108016d0 	cmplti	r2,r2,91
    27ac:	1000061e 	bne	r2,zero,27c8 <newHighscores+0x2c8>
    27b0:	01000084 	movi	r4,2
    27b4:	000039c0 	call	39c <controller>
    27b8:	10800058 	cmpnei	r2,r2,1
    27bc:	1000021e 	bne	r2,zero,27c8 <newHighscores+0x2c8>
				c[0] = '@';
    27c0:	00801004 	movi	r2,64
    27c4:	d0a81c05 	stb	r2,-24464(gp)
			}
			c[0]++;
    27c8:	d0a81c03 	ldbu	r2,-24464(gp)
    27cc:	10800044 	addi	r2,r2,1
    27d0:	d0a81c05 	stb	r2,-24464(gp)
    27d4:	00001506 	br	282c <newHighscores+0x32c>
		} else if (controller(2) == 0 && newHighscoreSelect == 3){
    27d8:	01000084 	movi	r4,2
    27dc:	000039c0 	call	39c <controller>
    27e0:	1000121e 	bne	r2,zero,282c <newHighscores+0x32c>
    27e4:	d0a82217 	ldw	r2,-24440(gp)
    27e8:	108000d8 	cmpnei	r2,r2,3
    27ec:	10000f1e 	bne	r2,zero,282c <newHighscores+0x32c>
			if(c[0] <= '@' && controller(2) == 1){
    27f0:	d0a81c03 	ldbu	r2,-24464(gp)
    27f4:	10803fcc 	andi	r2,r2,255
    27f8:	1080201c 	xori	r2,r2,128
    27fc:	10bfe004 	addi	r2,r2,-128
    2800:	10801048 	cmpgei	r2,r2,65
    2804:	1000061e 	bne	r2,zero,2820 <newHighscores+0x320>
    2808:	01000084 	movi	r4,2
    280c:	000039c0 	call	39c <controller>
    2810:	10800058 	cmpnei	r2,r2,1
    2814:	1000021e 	bne	r2,zero,2820 <newHighscores+0x320>
				c[0] = '[';
    2818:	008016c4 	movi	r2,91
    281c:	d0a81c05 	stb	r2,-24464(gp)
			}
			c[0]--;
    2820:	d0a81c03 	ldbu	r2,-24464(gp)
    2824:	10bfffc4 	addi	r2,r2,-1
    2828:	d0a81c05 	stb	r2,-24464(gp)
		}		
		
		if (newHighscoreSelect == 1){
    282c:	d0a82217 	ldw	r2,-24440(gp)
    2830:	10800058 	cmpnei	r2,r2,1
    2834:	10000f1e 	bne	r2,zero,2874 <newHighscores+0x374>
			if(oneTime == 1){
    2838:	d0a00317 	ldw	r2,-32756(gp)
    283c:	10800058 	cmpnei	r2,r2,1
    2840:	1000411e 	bne	r2,zero,2948 <newHighscores+0x448>
				VGA_box(19 *4, 34 * 4, 22 * 4, 37 * 4, geel);
    2844:	00804034 	movhi	r2,256
    2848:	10bfc004 	addi	r2,r2,-256
    284c:	d8800015 	stw	r2,0(sp)
    2850:	01001304 	movi	r4,76
    2854:	01402204 	movi	r5,136
    2858:	01801604 	movi	r6,88
    285c:	01c02504 	movi	r7,148
    2860:	00039bc0 	call	39bc <VGA_box>
				oneTime = 0;
    2864:	d0200315 	stw	zero,-32756(gp)
				verandert = 1;
    2868:	00800044 	movi	r2,1
    286c:	d0a81b15 	stw	r2,-24468(gp)
    2870:	00003506 	br	2948 <newHighscores+0x448>
			}
		} else if (newHighscoreSelect == 2){
    2874:	d0a82217 	ldw	r2,-24440(gp)
    2878:	10800098 	cmpnei	r2,r2,2
    287c:	10000f1e 	bne	r2,zero,28bc <newHighscores+0x3bc>
			if(oneTime == 1){
    2880:	d0a00317 	ldw	r2,-32756(gp)
    2884:	10800058 	cmpnei	r2,r2,1
    2888:	10002f1e 	bne	r2,zero,2948 <newHighscores+0x448>
				VGA_box(29 * 4, 34 * 4, 32 * 4, 37 * 4, geel);
    288c:	00804034 	movhi	r2,256
    2890:	10bfc004 	addi	r2,r2,-256
    2894:	d8800015 	stw	r2,0(sp)
    2898:	01001d04 	movi	r4,116
    289c:	01402204 	movi	r5,136
    28a0:	01802004 	movi	r6,128
    28a4:	01c02504 	movi	r7,148
    28a8:	00039bc0 	call	39bc <VGA_box>
				oneTime = 0;
    28ac:	d0200315 	stw	zero,-32756(gp)
				verandert = 1;
    28b0:	00800044 	movi	r2,1
    28b4:	d0a81b15 	stw	r2,-24468(gp)
    28b8:	00002306 	br	2948 <newHighscores+0x448>
			}
		} else if (newHighscoreSelect == 3){
    28bc:	d0a82217 	ldw	r2,-24440(gp)
    28c0:	108000d8 	cmpnei	r2,r2,3
    28c4:	10000f1e 	bne	r2,zero,2904 <newHighscores+0x404>
			if(oneTime == 1){
    28c8:	d0a00317 	ldw	r2,-32756(gp)
    28cc:	10800058 	cmpnei	r2,r2,1
    28d0:	10001d1e 	bne	r2,zero,2948 <newHighscores+0x448>
				VGA_box(39 * 4, 34 * 4, 42 * 4, 37 * 4, geel);
    28d4:	00804034 	movhi	r2,256
    28d8:	10bfc004 	addi	r2,r2,-256
    28dc:	d8800015 	stw	r2,0(sp)
    28e0:	01002704 	movi	r4,156
    28e4:	01402204 	movi	r5,136
    28e8:	01802a04 	movi	r6,168
    28ec:	01c02504 	movi	r7,148
    28f0:	00039bc0 	call	39bc <VGA_box>
				oneTime = 0;
    28f4:	d0200315 	stw	zero,-32756(gp)
				verandert = 1;
    28f8:	00800044 	movi	r2,1
    28fc:	d0a81b15 	stw	r2,-24468(gp)
    2900:	00001106 	br	2948 <newHighscores+0x448>
			}
		} else if (newHighscoreSelect == 4){
    2904:	d0a82217 	ldw	r2,-24440(gp)
    2908:	10800118 	cmpnei	r2,r2,4
    290c:	10000e1e 	bne	r2,zero,2948 <newHighscores+0x448>
			if(oneTime == 1){
    2910:	d0a00317 	ldw	r2,-32756(gp)
    2914:	10800058 	cmpnei	r2,r2,1
    2918:	10000b1e 	bne	r2,zero,2948 <newHighscores+0x448>
				VGA_box(49 * 4, 34 * 4, 59 * 4, 37 * 4, geel);
    291c:	00804034 	movhi	r2,256
    2920:	10bfc004 	addi	r2,r2,-256
    2924:	d8800015 	stw	r2,0(sp)
    2928:	01003104 	movi	r4,196
    292c:	01402204 	movi	r5,136
    2930:	01803b04 	movi	r6,236
    2934:	01c02504 	movi	r7,148
    2938:	00039bc0 	call	39bc <VGA_box>
				oneTime = 0;
    293c:	d0200315 	stw	zero,-32756(gp)
				verandert = 1;
    2940:	00800044 	movi	r2,1
    2944:	d0a81b15 	stw	r2,-24468(gp)
			}
		}
		
		dakjeOmhoog(20, 30);
    2948:	01000504 	movi	r4,20
    294c:	01400784 	movi	r5,30
    2950:	00016d40 	call	16d4 <dakjeOmhoog>
		VGA_text(20, 35, a);
    2954:	01000504 	movi	r4,20
    2958:	014008c4 	movi	r5,35
    295c:	d1a82404 	addi	r6,gp,-24432
    2960:	0003a700 	call	3a70 <VGA_text>
		dakjeOmlaag(20, 40);
    2964:	01000504 	movi	r4,20
    2968:	01400a04 	movi	r5,40
    296c:	00017140 	call	1714 <dakjeOmlaag>
		
		dakjeOmhoog(30, 30);
    2970:	01000784 	movi	r4,30
    2974:	01400784 	movi	r5,30
    2978:	00016d40 	call	16d4 <dakjeOmhoog>
		VGA_text(30, 35, b);
    297c:	01000784 	movi	r4,30
    2980:	014008c4 	movi	r5,35
    2984:	d1a81604 	addi	r6,gp,-24488
    2988:	0003a700 	call	3a70 <VGA_text>
		dakjeOmlaag(30, 40);
    298c:	01000784 	movi	r4,30
    2990:	01400a04 	movi	r5,40
    2994:	00017140 	call	1714 <dakjeOmlaag>
		
		dakjeOmhoog(40, 30);
    2998:	01000a04 	movi	r4,40
    299c:	01400784 	movi	r5,30
    29a0:	00016d40 	call	16d4 <dakjeOmhoog>
		VGA_text(40, 35, c);
    29a4:	01000a04 	movi	r4,40
    29a8:	014008c4 	movi	r5,35
    29ac:	d1a81c04 	addi	r6,gp,-24464
    29b0:	0003a700 	call	3a70 <VGA_text>
		dakjeOmlaag(40, 40);
    29b4:	01000a04 	movi	r4,40
    29b8:	01400a04 	movi	r5,40
    29bc:	00017140 	call	1714 <dakjeOmlaag>
		
		VGA_text(50, 35, "Bevestig");
    29c0:	01000c84 	movi	r4,50
    29c4:	014008c4 	movi	r5,35
    29c8:	018000b4 	movhi	r6,2
    29cc:	31961004 	addi	r6,r6,22592
    29d0:	0003a700 	call	3a70 <VGA_text>
		


					//controller(3) == 3 ??	
		if (controller(3) == 2 && newHighscoreSelect == 4) {
    29d4:	010000c4 	movi	r4,3
    29d8:	000039c0 	call	39c <controller>
    29dc:	10800098 	cmpnei	r2,r2,2
    29e0:	10000c1e 	bne	r2,zero,2a14 <newHighscores+0x514>
    29e4:	d0a82217 	ldw	r2,-24440(gp)
    29e8:	10800118 	cmpnei	r2,r2,4
    29ec:	1000091e 	bne	r2,zero,2a14 <newHighscores+0x514>
			//save highscores naar SD kaart
			sorteer();
    29f0:	00009b80 	call	9b8 <sorteer>

			VGA_box(48 * 4, 33 * 4, 60 * 4, 37 * 4, zwart); //omdat je alleen terug kan op bevestig, moet daar het gele selecteer gebied zitten, dus die schrijven we alleen weg.
    29f4:	d8000015 	stw	zero,0(sp)
    29f8:	01003004 	movi	r4,192
    29fc:	01402104 	movi	r5,132
    2a00:	01803c04 	movi	r6,240
    2a04:	01c02504 	movi	r7,148
    2a08:	00039bc0 	call	39bc <VGA_box>
			clearHighscoreText();
    2a0c:	00024640 	call	2464 <clearHighscoreText>
			
			endNewHighscores();
    2a10:	000236c0 	call	236c <endNewHighscores>

		}
		
		OSTimeDly(20);
    2a14:	01000504 	movi	r4,20
    2a18:	001cb740 	call	1cb74 <OSTimeDly>
		
	}
    2a1c:	003ecb06 	br	254c <__alt_mem_Flash_flash_data+0xf400254c>

00002a20 <endHighscores>:
	
}

void endHighscores(){
    2a20:	defffc04 	addi	sp,sp,-16
    2a24:	dfc00315 	stw	ra,12(sp)
    2a28:	df000215 	stw	fp,8(sp)
    2a2c:	df000204 	addi	fp,sp,8
	INT8U err;

	printf("end Highscores\n");
    2a30:	010000b4 	movhi	r4,2
    2a34:	21161304 	addi	r4,r4,22604
    2a38:	00045900 	call	4590 <puts>

	//clearScreen();

	VGA_text(35, 18, "                 ");
    2a3c:	010008c4 	movi	r4,35
    2a40:	01400484 	movi	r5,18
    2a44:	018000b4 	movhi	r6,2
    2a48:	31961704 	addi	r6,r6,22620
    2a4c:	0003a700 	call	3a70 <VGA_text>
	VGA_text(35, 20, "                 ");
    2a50:	010008c4 	movi	r4,35
    2a54:	01400504 	movi	r5,20
    2a58:	018000b4 	movhi	r6,2
    2a5c:	31961704 	addi	r6,r6,22620
    2a60:	0003a700 	call	3a70 <VGA_text>
	VGA_text(35, 22, "                 ");
    2a64:	010008c4 	movi	r4,35
    2a68:	01400584 	movi	r5,22
    2a6c:	018000b4 	movhi	r6,2
    2a70:	31961704 	addi	r6,r6,22620
    2a74:	0003a700 	call	3a70 <VGA_text>
	VGA_text(35, 24, "                 ");
    2a78:	010008c4 	movi	r4,35
    2a7c:	01400604 	movi	r5,24
    2a80:	018000b4 	movhi	r6,2
    2a84:	31961704 	addi	r6,r6,22620
    2a88:	0003a700 	call	3a70 <VGA_text>
	VGA_text(35, 26, "                 ");
    2a8c:	010008c4 	movi	r4,35
    2a90:	01400684 	movi	r5,26
    2a94:	018000b4 	movhi	r6,2
    2a98:	31961704 	addi	r6,r6,22620
    2a9c:	0003a700 	call	3a70 <VGA_text>
	
	VGA_text(63, 56, "              ");
    2aa0:	01000fc4 	movi	r4,63
    2aa4:	01400e04 	movi	r5,56
    2aa8:	018000b4 	movhi	r6,2
    2aac:	3195cc04 	addi	r6,r6,22320
    2ab0:	0003a700 	call	3a70 <VGA_text>
	VGA_text(63, 57, "               ");
    2ab4:	01000fc4 	movi	r4,63
    2ab8:	01400e44 	movi	r5,57
    2abc:	018000b4 	movhi	r6,2
    2ac0:	3195d004 	addi	r6,r6,22336
    2ac4:	0003a700 	call	3a70 <VGA_text>
	
	VGA_text(35, 15, "                          ");
    2ac8:	010008c4 	movi	r4,35
    2acc:	014003c4 	movi	r5,15
    2ad0:	018000b4 	movhi	r6,2
    2ad4:	31961c04 	addi	r6,r6,22640
    2ad8:	0003a700 	call	3a70 <VGA_text>
	VGA_text(35, 25, "Einde Highscores");
    2adc:	010008c4 	movi	r4,35
    2ae0:	01400644 	movi	r5,25
    2ae4:	018000b4 	movhi	r6,2
    2ae8:	31962304 	addi	r6,r6,22668
    2aec:	0003a700 	call	3a70 <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
    2af0:	0009883a 	mov	r4,zero
    2af4:	000b883a 	mov	r5,zero
    2af8:	01800a04 	movi	r6,40
    2afc:	000f883a 	mov	r7,zero
    2b00:	001ccbc0 	call	1ccbc <OSTimeDlyHMSM>
	VGA_text(35, 25, "                  ");
    2b04:	010008c4 	movi	r4,35
    2b08:	01400644 	movi	r5,25
    2b0c:	018000b4 	movhi	r6,2
    2b10:	31962804 	addi	r6,r6,22688
    2b14:	0003a700 	call	3a70 <VGA_text>




	teken_menu(3);
    2b18:	010000c4 	movi	r4,3
    2b1c:	00034840 	call	3484 <teken_menu>

	VGA_box (316, 4, 319, 235, zwart); 					// singleplayer/tutorial balk weghalen voor de zekerheid
    2b20:	d8000015 	stw	zero,0(sp)
    2b24:	01004f04 	movi	r4,316
    2b28:	01400104 	movi	r5,4
    2b2c:	01804fc4 	movi	r6,319
    2b30:	01c03ac4 	movi	r7,235
    2b34:	00039bc0 	call	39bc <VGA_box>

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    2b38:	d1282317 	ldw	r4,-24436(gp)
    2b3c:	d1681d17 	ldw	r5,-24460(gp)
    2b40:	d0a82317 	ldw	r2,-24436(gp)
    2b44:	10c00144 	addi	r3,r2,5
    2b48:	d0a81d17 	ldw	r2,-24460(gp)
    2b4c:	10800144 	addi	r2,r2,5
    2b50:	d8000015 	stw	zero,0(sp)
    2b54:	180d883a 	mov	r6,r3
    2b58:	100f883a 	mov	r7,r2
    2b5c:	00039bc0 	call	39bc <VGA_box>


	ALT_x1 = 0;
    2b60:	d0282315 	stw	zero,-24436(gp)
	ALT_x2 = 165;
    2b64:	00802944 	movi	r2,165
    2b68:	d0a82615 	stw	r2,-24424(gp)
	ALT_y = 100;
    2b6c:	00801904 	movi	r2,100
    2b70:	d0a81d15 	stw	r2,-24460(gp)
	ALT_inc_x = -1;
    2b74:	00bfffc4 	movi	r2,-1
    2b78:	d0a82515 	stw	r2,-24428(gp)
	ALT_inc_y = 1;
    2b7c:	00800044 	movi	r2,1
    2b80:	d0a81f15 	stw	r2,-24452(gp)

	first = 1;
    2b84:	00800044 	movi	r2,1
    2b88:	d0a00015 	stw	r2,-32768(gp)

	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    2b8c:	d0a80f17 	ldw	r2,-24516(gp)
    2b90:	1009883a 	mov	r4,r2
    2b94:	01400444 	movi	r5,17
    2b98:	000d883a 	mov	r6,zero
    2b9c:	e1ffff04 	addi	r7,fp,-4
    2ba0:	00179b80 	call	179b8 <OSFlagPost>

	OSFlagPost(Flags_Highscores, Highscores_Flag, OS_FLAG_SET, &err);
    2ba4:	d0a81a17 	ldw	r2,-24472(gp)
    2ba8:	1009883a 	mov	r4,r2
    2bac:	01402004 	movi	r5,128
    2bb0:	01800044 	movi	r6,1
    2bb4:	e1ffff04 	addi	r7,fp,-4
    2bb8:	00179b80 	call	179b8 <OSFlagPost>

}
    2bbc:	e037883a 	mov	sp,fp
    2bc0:	dfc00117 	ldw	ra,4(sp)
    2bc4:	df000017 	ldw	fp,0(sp)
    2bc8:	dec00204 	addi	sp,sp,8
    2bcc:	f800283a 	ret

00002bd0 <Highscores>:

void Highscores(void* pdata){
    2bd0:	defffa04 	addi	sp,sp,-24
    2bd4:	dfc00515 	stw	ra,20(sp)
    2bd8:	df000415 	stw	fp,16(sp)
    2bdc:	df000404 	addi	fp,sp,16
    2be0:	e13fff15 	stw	r4,-4(fp)
	int ID;
	int count;
	int q;
	
	while(1){
		OSFlagPend(Flags_Highscores, Highscores_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
    2be4:	d0e81a17 	ldw	r3,-24472(gp)
    2be8:	e0bffe04 	addi	r2,fp,-8
    2bec:	d8800015 	stw	r2,0(sp)
    2bf0:	1809883a 	mov	r4,r3
    2bf4:	01402004 	movi	r5,128
    2bf8:	01800044 	movi	r6,1
    2bfc:	000f883a 	mov	r7,zero
    2c00:	00173600 	call	17360 <OSFlagPend>
		VGA_text(35, 17, "Highscores");
    2c04:	010008c4 	movi	r4,35
    2c08:	01400444 	movi	r5,17
    2c0c:	018000b4 	movhi	r6,2
    2c10:	31962d04 	addi	r6,r6,22708
    2c14:	0003a700 	call	3a70 <VGA_text>
		


		// highscores 1 t/m 5

		for(j = 0; j < 5; j++){
    2c18:	e03ffd15 	stw	zero,-12(fp)
    2c1c:	00000f06 	br	2c5c <Highscores+0x8c>
			VGA_text(38, 20 + 2 * j, highscores[j]);
    2c20:	e0bffd17 	ldw	r2,-12(fp)
    2c24:	10800284 	addi	r2,r2,10
    2c28:	1085883a 	add	r2,r2,r2
    2c2c:	100b883a 	mov	r5,r2
    2c30:	e0bffd17 	ldw	r2,-12(fp)
    2c34:	10c00524 	muli	r3,r2,20
    2c38:	008000f4 	movhi	r2,3
    2c3c:	10a80504 	addi	r2,r2,-24556
    2c40:	1885883a 	add	r2,r3,r2
    2c44:	01000984 	movi	r4,38
    2c48:	100d883a 	mov	r6,r2
    2c4c:	0003a700 	call	3a70 <VGA_text>
		


		// highscores 1 t/m 5

		for(j = 0; j < 5; j++){
    2c50:	e0bffd17 	ldw	r2,-12(fp)
    2c54:	10800044 	addi	r2,r2,1
    2c58:	e0bffd15 	stw	r2,-12(fp)
    2c5c:	e0bffd17 	ldw	r2,-12(fp)
    2c60:	10800150 	cmplti	r2,r2,5
    2c64:	103fee1e 	bne	r2,zero,2c20 <__alt_mem_Flash_flash_data+0xf4002c20>
			VGA_text(38, 20 + 2 * j, highscores[j]);
		}
		
		VGA_text(35, 20, "1.");
    2c68:	010008c4 	movi	r4,35
    2c6c:	01400504 	movi	r5,20
    2c70:	018000b4 	movhi	r6,2
    2c74:	31963004 	addi	r6,r6,22720
    2c78:	0003a700 	call	3a70 <VGA_text>
		VGA_text(35, 22, "2.");
    2c7c:	010008c4 	movi	r4,35
    2c80:	01400584 	movi	r5,22
    2c84:	018000b4 	movhi	r6,2
    2c88:	31963104 	addi	r6,r6,22724
    2c8c:	0003a700 	call	3a70 <VGA_text>
		VGA_text(35, 24, "3.");
    2c90:	010008c4 	movi	r4,35
    2c94:	01400604 	movi	r5,24
    2c98:	018000b4 	movhi	r6,2
    2c9c:	31963204 	addi	r6,r6,22728
    2ca0:	0003a700 	call	3a70 <VGA_text>
		VGA_text(35, 26, "4.");
    2ca4:	010008c4 	movi	r4,35
    2ca8:	01400684 	movi	r5,26
    2cac:	018000b4 	movhi	r6,2
    2cb0:	31963304 	addi	r6,r6,22732
    2cb4:	0003a700 	call	3a70 <VGA_text>
		VGA_text(35, 28, "5.");
    2cb8:	010008c4 	movi	r4,35
    2cbc:	01400704 	movi	r5,28
    2cc0:	018000b4 	movhi	r6,2
    2cc4:	31963404 	addi	r6,r6,22736
    2cc8:	0003a700 	call	3a70 <VGA_text>

		terugMenu();
    2ccc:	0002cf00 	call	2cf0 <terugMenu>
		
		
		if (controller(3) == 3) {
    2cd0:	010000c4 	movi	r4,3
    2cd4:	000039c0 	call	39c <controller>
    2cd8:	108000d8 	cmpnei	r2,r2,3
    2cdc:	1000011e 	bne	r2,zero,2ce4 <Highscores+0x114>
			endHighscores();
    2ce0:	0002a200 	call	2a20 <endHighscores>
		}
		
		OSTimeDly(1);
    2ce4:	01000044 	movi	r4,1
    2ce8:	001cb740 	call	1cb74 <OSTimeDly>
		
	}
    2cec:	003fbd06 	br	2be4 <__alt_mem_Flash_flash_data+0xf4002be4>

00002cf0 <terugMenu>:
	
}

void terugMenu(){
    2cf0:	defffe04 	addi	sp,sp,-8
    2cf4:	dfc00115 	stw	ra,4(sp)
    2cf8:	df000015 	stw	fp,0(sp)
    2cfc:	d839883a 	mov	fp,sp
	
	INT8U err;
	
	VGA_text(63, 56, "Rechter knop =");
    2d00:	01000fc4 	movi	r4,63
    2d04:	01400e04 	movi	r5,56
    2d08:	018000b4 	movhi	r6,2
    2d0c:	31963504 	addi	r6,r6,22740
    2d10:	0003a700 	call	3a70 <VGA_text>
	VGA_text(63, 57, "terug naar menu");
    2d14:	01000fc4 	movi	r4,63
    2d18:	01400e44 	movi	r5,57
    2d1c:	018000b4 	movhi	r6,2
    2d20:	31963904 	addi	r6,r6,22756
    2d24:	0003a700 	call	3a70 <VGA_text>
	
}
    2d28:	e037883a 	mov	sp,fp
    2d2c:	dfc00117 	ldw	ra,4(sp)
    2d30:	df000017 	ldw	fp,0(sp)
    2d34:	dec00204 	addi	sp,sp,8
    2d38:	f800283a 	ret

00002d3c <menu>:
int eenkeer = 1;
int onePress = 1;
int last;
int changed;

void menu(void* pdata){
    2d3c:	defffa04 	addi	sp,sp,-24
    2d40:	dfc00515 	stw	ra,20(sp)
    2d44:	df000415 	stw	fp,16(sp)
    2d48:	df000404 	addi	fp,sp,16
    2d4c:	e13fff15 	stw	r4,-4(fp)
	int ID = (int*)pdata;
    2d50:	e0bfff17 	ldw	r2,-4(fp)
    2d54:	e0bffd15 	stw	r2,-12(fp)
	INT8U err;

	teken_menu();
    2d58:	00034840 	call	3484 <teken_menu>

	while(1){
		OSFlagPend(Flags, Menu_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    2d5c:	d0e80f17 	ldw	r3,-24516(gp)
    2d60:	e0bffe04 	addi	r2,fp,-8
    2d64:	d8800015 	stw	r2,0(sp)
    2d68:	1809883a 	mov	r4,r3
    2d6c:	01400044 	movi	r5,1
    2d70:	000d883a 	mov	r6,zero
    2d74:	000f883a 	mov	r7,zero
    2d78:	00173600 	call	17360 <OSFlagPend>

		if (controller(ID) == 1){
    2d7c:	e13ffd17 	ldw	r4,-12(fp)
    2d80:	000039c0 	call	39c <controller>
    2d84:	10800058 	cmpnei	r2,r2,1
    2d88:	1000111e 	bne	r2,zero,2dd0 <menu+0x94>
			if(changed != 0){
    2d8c:	d0a82a17 	ldw	r2,-24408(gp)
    2d90:	10000926 	beq	r2,zero,2db8 <menu+0x7c>
				gameModeMenu++;
    2d94:	d0a00417 	ldw	r2,-32752(gp)
    2d98:	10800044 	addi	r2,r2,1
    2d9c:	d0a00415 	stw	r2,-32752(gp)
				eenkeer = 1;
    2da0:	00800044 	movi	r2,1
    2da4:	d0a00b15 	stw	r2,-32724(gp)
				changed=0;
    2da8:	d0282a15 	stw	zero,-24408(gp)
				printf("heeft 1 gereturned \n");
    2dac:	010000b4 	movhi	r4,2
    2db0:	21163d04 	addi	r4,r4,22772
    2db4:	00045900 	call	4590 <puts>
			}
			if (gameModeMenu >= 5){
    2db8:	d0a00417 	ldw	r2,-32752(gp)
    2dbc:	10800150 	cmplti	r2,r2,5
    2dc0:	1000161e 	bne	r2,zero,2e1c <menu+0xe0>
				gameModeMenu = 1;
    2dc4:	00800044 	movi	r2,1
    2dc8:	d0a00415 	stw	r2,-32752(gp)
    2dcc:	00001306 	br	2e1c <menu+0xe0>
			}
		} else if (controller(ID) == 0){
    2dd0:	e13ffd17 	ldw	r4,-12(fp)
    2dd4:	000039c0 	call	39c <controller>
    2dd8:	1000101e 	bne	r2,zero,2e1c <menu+0xe0>
			if(changed !=0){
    2ddc:	d0a82a17 	ldw	r2,-24408(gp)
    2de0:	10000a26 	beq	r2,zero,2e0c <menu+0xd0>
				gameModeMenu--;
    2de4:	d0a00417 	ldw	r2,-32752(gp)
    2de8:	10bfffc4 	addi	r2,r2,-1
    2dec:	d0a00415 	stw	r2,-32752(gp)
				last=0;
    2df0:	d0282915 	stw	zero,-24412(gp)
				changed=0;
    2df4:	d0282a15 	stw	zero,-24408(gp)
				eenkeer = 1;
    2df8:	00800044 	movi	r2,1
    2dfc:	d0a00b15 	stw	r2,-32724(gp)
				printf("heeft 0 gereturned \n");
    2e00:	010000b4 	movhi	r4,2
    2e04:	21164204 	addi	r4,r4,22792
    2e08:	00045900 	call	4590 <puts>
			}
			if (gameModeMenu <= 0){
    2e0c:	d0a00417 	ldw	r2,-32752(gp)
    2e10:	00800216 	blt	zero,r2,2e1c <menu+0xe0>
				gameModeMenu = 4;
    2e14:	00800104 	movi	r2,4
    2e18:	d0a00415 	stw	r2,-32752(gp)
			}
		}
		OSTimeDly(20);
    2e1c:	01000504 	movi	r4,20
    2e20:	001cb740 	call	1cb74 <OSTimeDly>
	}
    2e24:	003fcd06 	br	2d5c <__alt_mem_Flash_flash_data+0xf4002d5c>

00002e28 <selecteerMenu>:

}

void selecteerMenu(void *pdata){
    2e28:	defffa04 	addi	sp,sp,-24
    2e2c:	dfc00515 	stw	ra,20(sp)
    2e30:	df000415 	stw	fp,16(sp)
    2e34:	df000404 	addi	fp,sp,16
    2e38:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	int ID = (int*)pdata;
    2e3c:	e0bfff17 	ldw	r2,-4(fp)
    2e40:	e0bffd15 	stw	r2,-12(fp)



	while(1){
	OSFlagPend(Flags, Menu2_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    2e44:	d0e80f17 	ldw	r3,-24516(gp)
    2e48:	e0bffe04 	addi	r2,fp,-8
    2e4c:	d8800015 	stw	r2,0(sp)
    2e50:	1809883a 	mov	r4,r3
    2e54:	01400404 	movi	r5,16
    2e58:	000d883a 	mov	r6,zero
    2e5c:	000f883a 	mov	r7,zero
    2e60:	00173600 	call	17360 <OSFlagPend>

		if (gameModeMenu == 1){
    2e64:	d0a00417 	ldw	r2,-32752(gp)
    2e68:	10800058 	cmpnei	r2,r2,1
    2e6c:	1000411e 	bne	r2,zero,2f74 <selecteerMenu+0x14c>
			if(eenkeer == 1){
    2e70:	d0a00b17 	ldw	r2,-32724(gp)
    2e74:	10800058 	cmpnei	r2,r2,1
    2e78:	10001f1e 	bne	r2,zero,2ef8 <selecteerMenu+0xd0>
				clearScreen();
    2e7c:	00032c40 	call	32c4 <clearScreen>
				VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
    2e80:	d0a00517 	ldw	r2,-32748(gp)
    2e84:	1085883a 	add	r2,r2,r2
    2e88:	1085883a 	add	r2,r2,r2
    2e8c:	1009883a 	mov	r4,r2
    2e90:	d0a00717 	ldw	r2,-32740(gp)
    2e94:	1085883a 	add	r2,r2,r2
    2e98:	1085883a 	add	r2,r2,r2
    2e9c:	100b883a 	mov	r5,r2
    2ea0:	d0a00617 	ldw	r2,-32744(gp)
    2ea4:	1085883a 	add	r2,r2,r2
    2ea8:	1085883a 	add	r2,r2,r2
    2eac:	100d883a 	mov	r6,r2
    2eb0:	d0a00817 	ldw	r2,-32736(gp)
    2eb4:	1085883a 	add	r2,r2,r2
    2eb8:	1085883a 	add	r2,r2,r2
    2ebc:	1007883a 	mov	r3,r2
    2ec0:	00be0014 	movui	r2,63488
    2ec4:	d8800015 	stw	r2,0(sp)
    2ec8:	180f883a 	mov	r7,r3
    2ecc:	00039bc0 	call	39bc <VGA_box>
				VGA_text (xMenu, yMenu, "Singleplayer");
    2ed0:	d0e00917 	ldw	r3,-32732(gp)
    2ed4:	d0a00a17 	ldw	r2,-32728(gp)
    2ed8:	1809883a 	mov	r4,r3
    2edc:	100b883a 	mov	r5,r2
    2ee0:	018000b4 	movhi	r6,2
    2ee4:	31964704 	addi	r6,r6,22812
    2ee8:	0003a700 	call	3a70 <VGA_text>
				eenkeer = 0;
    2eec:	d0200b15 	stw	zero,-32724(gp)
				changed = 1;
    2ef0:	00800044 	movi	r2,1
    2ef4:	d0a82a15 	stw	r2,-24408(gp)
			}
			if(controller(ID) == 2){
    2ef8:	e13ffd17 	ldw	r4,-12(fp)
    2efc:	000039c0 	call	39c <controller>
    2f00:	10800098 	cmpnei	r2,r2,2
    2f04:	1000ec1e 	bne	r2,zero,32b8 <selecteerMenu+0x490>
				clearScreen();
    2f08:	00032c40 	call	32c4 <clearScreen>
				clearText();
    2f0c:	00033040 	call	3304 <clearText>
				printf("start Singleplayer\n");
    2f10:	010000b4 	movhi	r4,2
    2f14:	21164b04 	addi	r4,r4,22828
    2f18:	00045900 	call	4590 <puts>
				OSFlagPost(Flags,C1_Flag, OS_FLAG_CLR, &err);
    2f1c:	d0e80f17 	ldw	r3,-24516(gp)
    2f20:	e0bffe04 	addi	r2,fp,-8
    2f24:	1809883a 	mov	r4,r3
    2f28:	01400104 	movi	r5,4
    2f2c:	000d883a 	mov	r6,zero
    2f30:	100f883a 	mov	r7,r2
    2f34:	00179b80 	call	179b8 <OSFlagPost>
				OSFlagPost(Flags_Games, Singleplayer_Flag, OS_FLAG_CLR, &err);
    2f38:	d0e80d17 	ldw	r3,-24524(gp)
    2f3c:	e0bffe04 	addi	r2,fp,-8
    2f40:	1809883a 	mov	r4,r3
    2f44:	01400804 	movi	r5,32
    2f48:	000d883a 	mov	r6,zero
    2f4c:	100f883a 	mov	r7,r2
    2f50:	00179b80 	call	179b8 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    2f54:	d0e80f17 	ldw	r3,-24516(gp)
    2f58:	e0bffe04 	addi	r2,fp,-8
    2f5c:	1809883a 	mov	r4,r3
    2f60:	01400444 	movi	r5,17
    2f64:	01800044 	movi	r6,1
    2f68:	100f883a 	mov	r7,r2
    2f6c:	00179b80 	call	179b8 <OSFlagPost>
    2f70:	0000d106 	br	32b8 <selecteerMenu+0x490>
			}
		} else if (gameModeMenu == 2){
    2f74:	d0a00417 	ldw	r2,-32752(gp)
    2f78:	10800098 	cmpnei	r2,r2,2
    2f7c:	1000481e 	bne	r2,zero,30a0 <selecteerMenu+0x278>
			if(eenkeer == 1){
    2f80:	d0a00b17 	ldw	r2,-32724(gp)
    2f84:	10800058 	cmpnei	r2,r2,1
    2f88:	1000221e 	bne	r2,zero,3014 <selecteerMenu+0x1ec>
				clearScreen();
    2f8c:	00032c40 	call	32c4 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    2f90:	d0a00517 	ldw	r2,-32748(gp)
    2f94:	1085883a 	add	r2,r2,r2
    2f98:	1085883a 	add	r2,r2,r2
    2f9c:	1009883a 	mov	r4,r2
    2fa0:	d0a00717 	ldw	r2,-32740(gp)
    2fa4:	10800104 	addi	r2,r2,4
    2fa8:	1085883a 	add	r2,r2,r2
    2fac:	1085883a 	add	r2,r2,r2
    2fb0:	100b883a 	mov	r5,r2
    2fb4:	d0a00617 	ldw	r2,-32744(gp)
    2fb8:	1085883a 	add	r2,r2,r2
    2fbc:	1085883a 	add	r2,r2,r2
    2fc0:	100d883a 	mov	r6,r2
    2fc4:	d0a00817 	ldw	r2,-32736(gp)
    2fc8:	10800104 	addi	r2,r2,4
    2fcc:	1085883a 	add	r2,r2,r2
    2fd0:	1085883a 	add	r2,r2,r2
    2fd4:	1007883a 	mov	r3,r2
    2fd8:	00be0014 	movui	r2,63488
    2fdc:	d8800015 	stw	r2,0(sp)
    2fe0:	180f883a 	mov	r7,r3
    2fe4:	00039bc0 	call	39bc <VGA_box>
				VGA_text (xMenu, yMenu + 4, "Multiplayer");
    2fe8:	d0e00917 	ldw	r3,-32732(gp)
    2fec:	d0a00a17 	ldw	r2,-32728(gp)
    2ff0:	10800104 	addi	r2,r2,4
    2ff4:	1809883a 	mov	r4,r3
    2ff8:	100b883a 	mov	r5,r2
    2ffc:	018000b4 	movhi	r6,2
    3000:	31965004 	addi	r6,r6,22848
    3004:	0003a700 	call	3a70 <VGA_text>
				eenkeer = 0;
    3008:	d0200b15 	stw	zero,-32724(gp)
				changed = 1;
    300c:	00800044 	movi	r2,1
    3010:	d0a82a15 	stw	r2,-24408(gp)
			}
			if(controller(ID) == 2 || controller(ID) == 1){
    3014:	e13ffd17 	ldw	r4,-12(fp)
    3018:	000039c0 	call	39c <controller>
    301c:	108000a0 	cmpeqi	r2,r2,2
    3020:	1000041e 	bne	r2,zero,3034 <selecteerMenu+0x20c>
    3024:	e13ffd17 	ldw	r4,-12(fp)
    3028:	000039c0 	call	39c <controller>
    302c:	10800058 	cmpnei	r2,r2,1
    3030:	1000a11e 	bne	r2,zero,32b8 <selecteerMenu+0x490>
				clearScreen();
    3034:	00032c40 	call	32c4 <clearScreen>
				clearText();
    3038:	00033040 	call	3304 <clearText>
				printf("start game\n");
    303c:	010000b4 	movhi	r4,2
    3040:	21165304 	addi	r4,r4,22860
    3044:	00045900 	call	4590 <puts>
				OSFlagPost(Flags, C1_Flag + C2_Flag, OS_FLAG_CLR, &err);
    3048:	d0e80f17 	ldw	r3,-24516(gp)
    304c:	e0bffe04 	addi	r2,fp,-8
    3050:	1809883a 	mov	r4,r3
    3054:	01400304 	movi	r5,12
    3058:	000d883a 	mov	r6,zero
    305c:	100f883a 	mov	r7,r2
    3060:	00179b80 	call	179b8 <OSFlagPost>
				OSFlagPost(Flags_Games,Game_Flag, OS_FLAG_CLR, &err);
    3064:	d0e80d17 	ldw	r3,-24524(gp)
    3068:	e0bffe04 	addi	r2,fp,-8
    306c:	1809883a 	mov	r4,r3
    3070:	01400084 	movi	r5,2
    3074:	000d883a 	mov	r6,zero
    3078:	100f883a 	mov	r7,r2
    307c:	00179b80 	call	179b8 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    3080:	d0e80f17 	ldw	r3,-24516(gp)
    3084:	e0bffe04 	addi	r2,fp,-8
    3088:	1809883a 	mov	r4,r3
    308c:	01400444 	movi	r5,17
    3090:	01800044 	movi	r6,1
    3094:	100f883a 	mov	r7,r2
    3098:	00179b80 	call	179b8 <OSFlagPost>
    309c:	00008606 	br	32b8 <selecteerMenu+0x490>
			}

		} else if (gameModeMenu == 3){
    30a0:	d0a00417 	ldw	r2,-32752(gp)
    30a4:	108000d8 	cmpnei	r2,r2,3
    30a8:	10003d1e 	bne	r2,zero,31a0 <selecteerMenu+0x378>
			if(eenkeer == 1){
    30ac:	d0a00b17 	ldw	r2,-32724(gp)
    30b0:	10800058 	cmpnei	r2,r2,1
    30b4:	1000221e 	bne	r2,zero,3140 <selecteerMenu+0x318>
				clearScreen();
    30b8:	00032c40 	call	32c4 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 32, xRechts*4, xOnder*4 + 32, rood);
    30bc:	d0a00517 	ldw	r2,-32748(gp)
    30c0:	1085883a 	add	r2,r2,r2
    30c4:	1085883a 	add	r2,r2,r2
    30c8:	1009883a 	mov	r4,r2
    30cc:	d0a00717 	ldw	r2,-32740(gp)
    30d0:	10800204 	addi	r2,r2,8
    30d4:	1085883a 	add	r2,r2,r2
    30d8:	1085883a 	add	r2,r2,r2
    30dc:	100b883a 	mov	r5,r2
    30e0:	d0a00617 	ldw	r2,-32744(gp)
    30e4:	1085883a 	add	r2,r2,r2
    30e8:	1085883a 	add	r2,r2,r2
    30ec:	100d883a 	mov	r6,r2
    30f0:	d0a00817 	ldw	r2,-32736(gp)
    30f4:	10800204 	addi	r2,r2,8
    30f8:	1085883a 	add	r2,r2,r2
    30fc:	1085883a 	add	r2,r2,r2
    3100:	1007883a 	mov	r3,r2
    3104:	00be0014 	movui	r2,63488
    3108:	d8800015 	stw	r2,0(sp)
    310c:	180f883a 	mov	r7,r3
    3110:	00039bc0 	call	39bc <VGA_box>
				VGA_text (xMenu, yMenu +  8, "Highscores");
    3114:	d0e00917 	ldw	r3,-32732(gp)
    3118:	d0a00a17 	ldw	r2,-32728(gp)
    311c:	10800204 	addi	r2,r2,8
    3120:	1809883a 	mov	r4,r3
    3124:	100b883a 	mov	r5,r2
    3128:	018000b4 	movhi	r6,2
    312c:	31965604 	addi	r6,r6,22872
    3130:	0003a700 	call	3a70 <VGA_text>
				eenkeer = 0;
    3134:	d0200b15 	stw	zero,-32724(gp)
				changed = 1;				
    3138:	00800044 	movi	r2,1
    313c:	d0a82a15 	stw	r2,-24408(gp)
			}
			if(controller(ID) == 2){
    3140:	e13ffd17 	ldw	r4,-12(fp)
    3144:	000039c0 	call	39c <controller>
    3148:	10800098 	cmpnei	r2,r2,2
    314c:	10005a1e 	bne	r2,zero,32b8 <selecteerMenu+0x490>
				clearScreen();
    3150:	00032c40 	call	32c4 <clearScreen>
				clearText();
    3154:	00033040 	call	3304 <clearText>
				printf("Start Highscores\n");
    3158:	010000b4 	movhi	r4,2
    315c:	21165904 	addi	r4,r4,22884
    3160:	00045900 	call	4590 <puts>
				OSFlagPost(Flags_Highscores, Highscores_Flag, OS_FLAG_CLR, &err);
    3164:	d0e81a17 	ldw	r3,-24472(gp)
    3168:	e0bffe04 	addi	r2,fp,-8
    316c:	1809883a 	mov	r4,r3
    3170:	01402004 	movi	r5,128
    3174:	000d883a 	mov	r6,zero
    3178:	100f883a 	mov	r7,r2
    317c:	00179b80 	call	179b8 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    3180:	d0e80f17 	ldw	r3,-24516(gp)
    3184:	e0bffe04 	addi	r2,fp,-8
    3188:	1809883a 	mov	r4,r3
    318c:	01400444 	movi	r5,17
    3190:	01800044 	movi	r6,1
    3194:	100f883a 	mov	r7,r2
    3198:	00179b80 	call	179b8 <OSFlagPost>
    319c:	00004606 	br	32b8 <selecteerMenu+0x490>
			}
		} else if (gameModeMenu == 4){
    31a0:	d0a00417 	ldw	r2,-32752(gp)
    31a4:	10800118 	cmpnei	r2,r2,4
    31a8:	1000431e 	bne	r2,zero,32b8 <selecteerMenu+0x490>
			if(eenkeer == 1){
    31ac:	d0a00b17 	ldw	r2,-32724(gp)
    31b0:	10800058 	cmpnei	r2,r2,1
    31b4:	1000221e 	bne	r2,zero,3240 <selecteerMenu+0x418>
				clearScreen();
    31b8:	00032c40 	call	32c4 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 48, xRechts*4, xOnder*4 + 48, rood);
    31bc:	d0a00517 	ldw	r2,-32748(gp)
    31c0:	1085883a 	add	r2,r2,r2
    31c4:	1085883a 	add	r2,r2,r2
    31c8:	1009883a 	mov	r4,r2
    31cc:	d0a00717 	ldw	r2,-32740(gp)
    31d0:	10800304 	addi	r2,r2,12
    31d4:	1085883a 	add	r2,r2,r2
    31d8:	1085883a 	add	r2,r2,r2
    31dc:	100b883a 	mov	r5,r2
    31e0:	d0a00617 	ldw	r2,-32744(gp)
    31e4:	1085883a 	add	r2,r2,r2
    31e8:	1085883a 	add	r2,r2,r2
    31ec:	100d883a 	mov	r6,r2
    31f0:	d0a00817 	ldw	r2,-32736(gp)
    31f4:	10800304 	addi	r2,r2,12
    31f8:	1085883a 	add	r2,r2,r2
    31fc:	1085883a 	add	r2,r2,r2
    3200:	1007883a 	mov	r3,r2
    3204:	00be0014 	movui	r2,63488
    3208:	d8800015 	stw	r2,0(sp)
    320c:	180f883a 	mov	r7,r3
    3210:	00039bc0 	call	39bc <VGA_box>
				VGA_text (xMenu, yMenu + 12, "Tutorial");
    3214:	d0e00917 	ldw	r3,-32732(gp)
    3218:	d0a00a17 	ldw	r2,-32728(gp)
    321c:	10800304 	addi	r2,r2,12
    3220:	1809883a 	mov	r4,r3
    3224:	100b883a 	mov	r5,r2
    3228:	018000b4 	movhi	r6,2
    322c:	31965e04 	addi	r6,r6,22904
    3230:	0003a700 	call	3a70 <VGA_text>
				eenkeer = 0;
    3234:	d0200b15 	stw	zero,-32724(gp)
				changed = 1;
    3238:	00800044 	movi	r2,1
    323c:	d0a82a15 	stw	r2,-24408(gp)

			}
			
			if(controller(ID) == 2){
    3240:	e13ffd17 	ldw	r4,-12(fp)
    3244:	000039c0 	call	39c <controller>
    3248:	10800098 	cmpnei	r2,r2,2
    324c:	10001a1e 	bne	r2,zero,32b8 <selecteerMenu+0x490>
				clearScreen();
    3250:	00032c40 	call	32c4 <clearScreen>
				clearText();
    3254:	00033040 	call	3304 <clearText>
				printf("Start Tutorial\n");
    3258:	010000b4 	movhi	r4,2
    325c:	21166104 	addi	r4,r4,22916
    3260:	00045900 	call	4590 <puts>
				OSFlagPost(Flags, C1_Flag, OS_FLAG_CLR, &err);
    3264:	d0e80f17 	ldw	r3,-24516(gp)
    3268:	e0bffe04 	addi	r2,fp,-8
    326c:	1809883a 	mov	r4,r3
    3270:	01400104 	movi	r5,4
    3274:	000d883a 	mov	r6,zero
    3278:	100f883a 	mov	r7,r2
    327c:	00179b80 	call	179b8 <OSFlagPost>
				OSFlagPost(Flags_Tutorial,Tutorial_Flag, OS_FLAG_CLR, &err);
    3280:	d0e81217 	ldw	r3,-24504(gp)
    3284:	e0bffe04 	addi	r2,fp,-8
    3288:	1809883a 	mov	r4,r3
    328c:	01401004 	movi	r5,64
    3290:	000d883a 	mov	r6,zero
    3294:	100f883a 	mov	r7,r2
    3298:	00179b80 	call	179b8 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    329c:	d0e80f17 	ldw	r3,-24516(gp)
    32a0:	e0bffe04 	addi	r2,fp,-8
    32a4:	1809883a 	mov	r4,r3
    32a8:	01400444 	movi	r5,17
    32ac:	01800044 	movi	r6,1
    32b0:	100f883a 	mov	r7,r2
    32b4:	00179b80 	call	179b8 <OSFlagPost>
			}
		}

		OSTimeDly(20);
    32b8:	01000504 	movi	r4,20
    32bc:	001cb740 	call	1cb74 <OSTimeDly>
	}
    32c0:	003ee006 	br	2e44 <__alt_mem_Flash_flash_data+0xf4002e44>

000032c4 <clearScreen>:
}

void clearScreen(){
    32c4:	defffd04 	addi	sp,sp,-12
    32c8:	dfc00215 	stw	ra,8(sp)
    32cc:	df000115 	stw	fp,4(sp)
    32d0:	df000104 	addi	fp,sp,4
	VGA_box(25,70, 200,135, 0);
    32d4:	d8000015 	stw	zero,0(sp)
    32d8:	01000644 	movi	r4,25
    32dc:	01401184 	movi	r5,70
    32e0:	01803204 	movi	r6,200
    32e4:	01c021c4 	movi	r7,135
    32e8:	00039bc0 	call	39bc <VGA_box>
	del_middenlijn();
    32ec:	0003b680 	call	3b68 <del_middenlijn>
}
    32f0:	e037883a 	mov	sp,fp
    32f4:	dfc00117 	ldw	ra,4(sp)
    32f8:	df000017 	ldw	fp,0(sp)
    32fc:	dec00204 	addi	sp,sp,8
    3300:	f800283a 	ret

00003304 <clearText>:

void clearText(){
    3304:	defffe04 	addi	sp,sp,-8
    3308:	dfc00115 	stw	ra,4(sp)
    330c:	df000015 	stw	fp,0(sp)
    3310:	d839883a 	mov	fp,sp
	VGA_text (xMenu, yMenu, "            ");
    3314:	d0e00917 	ldw	r3,-32732(gp)
    3318:	d0a00a17 	ldw	r2,-32728(gp)
    331c:	1809883a 	mov	r4,r3
    3320:	100b883a 	mov	r5,r2
    3324:	018000b4 	movhi	r6,2
    3328:	31966504 	addi	r6,r6,22932
    332c:	0003a700 	call	3a70 <VGA_text>
	VGA_text (xMenu, yMenu + 4, "           ");
    3330:	d0e00917 	ldw	r3,-32732(gp)
    3334:	d0a00a17 	ldw	r2,-32728(gp)
    3338:	10800104 	addi	r2,r2,4
    333c:	1809883a 	mov	r4,r3
    3340:	100b883a 	mov	r5,r2
    3344:	018000b4 	movhi	r6,2
    3348:	31966904 	addi	r6,r6,22948
    334c:	0003a700 	call	3a70 <VGA_text>
	VGA_text (xMenu, yMenu+8, "          ");
    3350:	d0e00917 	ldw	r3,-32732(gp)
    3354:	d0a00a17 	ldw	r2,-32728(gp)
    3358:	10800204 	addi	r2,r2,8
    335c:	1809883a 	mov	r4,r3
    3360:	100b883a 	mov	r5,r2
    3364:	018000b4 	movhi	r6,2
    3368:	31966c04 	addi	r6,r6,22960
    336c:	0003a700 	call	3a70 <VGA_text>
	VGA_text (xMenu, yMenu+12, "        ");
    3370:	d0e00917 	ldw	r3,-32732(gp)
    3374:	d0a00a17 	ldw	r2,-32728(gp)
    3378:	10800304 	addi	r2,r2,12
    337c:	1809883a 	mov	r4,r3
    3380:	100b883a 	mov	r5,r2
    3384:	018000b4 	movhi	r6,2
    3388:	31966f04 	addi	r6,r6,22972
    338c:	0003a700 	call	3a70 <VGA_text>
}
    3390:	e037883a 	mov	sp,fp
    3394:	dfc00117 	ldw	ra,4(sp)
    3398:	df000017 	ldw	fp,0(sp)
    339c:	dec00204 	addi	sp,sp,8
    33a0:	f800283a 	ret

000033a4 <tekenBox>:

void tekenBox(int Links, int Boven, int Rechts, int Onder, short Kleur){
    33a4:	defff804 	addi	sp,sp,-32
    33a8:	dfc00715 	stw	ra,28(sp)
    33ac:	df000615 	stw	fp,24(sp)
    33b0:	df000604 	addi	fp,sp,24
    33b4:	e13ffb15 	stw	r4,-20(fp)
    33b8:	e17ffc15 	stw	r5,-16(fp)
    33bc:	e1bffd15 	stw	r6,-12(fp)
    33c0:	e1fffe15 	stw	r7,-8(fp)
    33c4:	e0800217 	ldw	r2,8(fp)
    33c8:	e0bfff0d 	sth	r2,-4(fp)
	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    33cc:	e0bfff0f 	ldh	r2,-4(fp)
    33d0:	d8800015 	stw	r2,0(sp)
    33d4:	e13ffb17 	ldw	r4,-20(fp)
    33d8:	e17ffc17 	ldw	r5,-16(fp)
    33dc:	e1bffd17 	ldw	r6,-12(fp)
    33e0:	e1fffe17 	ldw	r7,-8(fp)
    33e4:	00039bc0 	call	39bc <VGA_box>
}
    33e8:	e037883a 	mov	sp,fp
    33ec:	dfc00117 	ldw	ra,4(sp)
    33f0:	df000017 	ldw	fp,0(sp)
    33f4:	dec00204 	addi	sp,sp,8
    33f8:	f800283a 	ret

000033fc <tekenBox2>:
// tekenBox en tekenBox2 maken samen het visuele effect van het selecteren van een menu optie.
void tekenBox2(int Links, int Boven, int Rechts, int Onder, short Kleur){
    33fc:	defff804 	addi	sp,sp,-32
    3400:	dfc00715 	stw	ra,28(sp)
    3404:	df000615 	stw	fp,24(sp)
    3408:	df000604 	addi	fp,sp,24
    340c:	e13ffb15 	stw	r4,-20(fp)
    3410:	e17ffc15 	stw	r5,-16(fp)
    3414:	e1bffd15 	stw	r6,-12(fp)
    3418:	e1fffe15 	stw	r7,-8(fp)
    341c:	e0800217 	ldw	r2,8(fp)
    3420:	e0bfff0d 	sth	r2,-4(fp)
	Links = Links + 1;
    3424:	e0bffb17 	ldw	r2,-20(fp)
    3428:	10800044 	addi	r2,r2,1
    342c:	e0bffb15 	stw	r2,-20(fp)
	Boven = Boven + 1;
    3430:	e0bffc17 	ldw	r2,-16(fp)
    3434:	10800044 	addi	r2,r2,1
    3438:	e0bffc15 	stw	r2,-16(fp)
	Rechts = Rechts - 1;
    343c:	e0bffd17 	ldw	r2,-12(fp)
    3440:	10bfffc4 	addi	r2,r2,-1
    3444:	e0bffd15 	stw	r2,-12(fp)
	Onder = Onder -1;
    3448:	e0bffe17 	ldw	r2,-8(fp)
    344c:	10bfffc4 	addi	r2,r2,-1
    3450:	e0bffe15 	stw	r2,-8(fp)

	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    3454:	e0bfff0f 	ldh	r2,-4(fp)
    3458:	d8800015 	stw	r2,0(sp)
    345c:	e13ffb17 	ldw	r4,-20(fp)
    3460:	e17ffc17 	ldw	r5,-16(fp)
    3464:	e1bffd17 	ldw	r6,-12(fp)
    3468:	e1fffe17 	ldw	r7,-8(fp)
    346c:	00039bc0 	call	39bc <VGA_box>
}
    3470:	e037883a 	mov	sp,fp
    3474:	dfc00117 	ldw	ra,4(sp)
    3478:	df000017 	ldw	fp,0(sp)
    347c:	dec00204 	addi	sp,sp,8
    3480:	f800283a 	ret

00003484 <teken_menu>:

void teken_menu(int ID){
    3484:	defffc04 	addi	sp,sp,-16
    3488:	dfc00315 	stw	ra,12(sp)
    348c:	df000215 	stw	fp,8(sp)
    3490:	df000204 	addi	fp,sp,8
    3494:	e13fff15 	stw	r4,-4(fp)
	VGA_text (xMenu, yMenu, "Singleplayer");
    3498:	d0e00917 	ldw	r3,-32732(gp)
    349c:	d0a00a17 	ldw	r2,-32728(gp)
    34a0:	1809883a 	mov	r4,r3
    34a4:	100b883a 	mov	r5,r2
    34a8:	018000b4 	movhi	r6,2
    34ac:	31964704 	addi	r6,r6,22812
    34b0:	0003a700 	call	3a70 <VGA_text>
	VGA_text (xMenu, yMenu + 4, "Multiplayer");
    34b4:	d0e00917 	ldw	r3,-32732(gp)
    34b8:	d0a00a17 	ldw	r2,-32728(gp)
    34bc:	10800104 	addi	r2,r2,4
    34c0:	1809883a 	mov	r4,r3
    34c4:	100b883a 	mov	r5,r2
    34c8:	018000b4 	movhi	r6,2
    34cc:	31965004 	addi	r6,r6,22848
    34d0:	0003a700 	call	3a70 <VGA_text>
	VGA_text (xMenu, yMenu+8, "Highscores");
    34d4:	d0e00917 	ldw	r3,-32732(gp)
    34d8:	d0a00a17 	ldw	r2,-32728(gp)
    34dc:	10800204 	addi	r2,r2,8
    34e0:	1809883a 	mov	r4,r3
    34e4:	100b883a 	mov	r5,r2
    34e8:	018000b4 	movhi	r6,2
    34ec:	31965604 	addi	r6,r6,22872
    34f0:	0003a700 	call	3a70 <VGA_text>
	VGA_text (xMenu, yMenu+12, "Tutorial");
    34f4:	d0e00917 	ldw	r3,-32732(gp)
    34f8:	d0a00a17 	ldw	r2,-32728(gp)
    34fc:	10800304 	addi	r2,r2,12
    3500:	1809883a 	mov	r4,r3
    3504:	100b883a 	mov	r5,r2
    3508:	018000b4 	movhi	r6,2
    350c:	31965e04 	addi	r6,r6,22904
    3510:	0003a700 	call	3a70 <VGA_text>
	if(ID == 1){
    3514:	e0bfff17 	ldw	r2,-4(fp)
    3518:	10800058 	cmpnei	r2,r2,1
    351c:	1000151e 	bne	r2,zero,3574 <teken_menu+0xf0>
		VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
    3520:	d0a00517 	ldw	r2,-32748(gp)
    3524:	1085883a 	add	r2,r2,r2
    3528:	1085883a 	add	r2,r2,r2
    352c:	1009883a 	mov	r4,r2
    3530:	d0a00717 	ldw	r2,-32740(gp)
    3534:	1085883a 	add	r2,r2,r2
    3538:	1085883a 	add	r2,r2,r2
    353c:	100b883a 	mov	r5,r2
    3540:	d0a00617 	ldw	r2,-32744(gp)
    3544:	1085883a 	add	r2,r2,r2
    3548:	1085883a 	add	r2,r2,r2
    354c:	100d883a 	mov	r6,r2
    3550:	d0a00817 	ldw	r2,-32736(gp)
    3554:	1085883a 	add	r2,r2,r2
    3558:	1085883a 	add	r2,r2,r2
    355c:	1007883a 	mov	r3,r2
    3560:	00be0014 	movui	r2,63488
    3564:	d8800015 	stw	r2,0(sp)
    3568:	180f883a 	mov	r7,r3
    356c:	00039bc0 	call	39bc <VGA_box>
    3570:	00004d06 	br	36a8 <teken_menu+0x224>
	}else if(ID == 2){
    3574:	e0bfff17 	ldw	r2,-4(fp)
    3578:	10800098 	cmpnei	r2,r2,2
    357c:	1000171e 	bne	r2,zero,35dc <teken_menu+0x158>
		VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    3580:	d0a00517 	ldw	r2,-32748(gp)
    3584:	1085883a 	add	r2,r2,r2
    3588:	1085883a 	add	r2,r2,r2
    358c:	1009883a 	mov	r4,r2
    3590:	d0a00717 	ldw	r2,-32740(gp)
    3594:	10800104 	addi	r2,r2,4
    3598:	1085883a 	add	r2,r2,r2
    359c:	1085883a 	add	r2,r2,r2
    35a0:	100b883a 	mov	r5,r2
    35a4:	d0a00617 	ldw	r2,-32744(gp)
    35a8:	1085883a 	add	r2,r2,r2
    35ac:	1085883a 	add	r2,r2,r2
    35b0:	100d883a 	mov	r6,r2
    35b4:	d0a00817 	ldw	r2,-32736(gp)
    35b8:	10800104 	addi	r2,r2,4
    35bc:	1085883a 	add	r2,r2,r2
    35c0:	1085883a 	add	r2,r2,r2
    35c4:	1007883a 	mov	r3,r2
    35c8:	00be0014 	movui	r2,63488
    35cc:	d8800015 	stw	r2,0(sp)
    35d0:	180f883a 	mov	r7,r3
    35d4:	00039bc0 	call	39bc <VGA_box>
    35d8:	00003306 	br	36a8 <teken_menu+0x224>
	}else if(ID == 3){
    35dc:	e0bfff17 	ldw	r2,-4(fp)
    35e0:	108000d8 	cmpnei	r2,r2,3
    35e4:	1000171e 	bne	r2,zero,3644 <teken_menu+0x1c0>
		VGA_box(xLinks*4, xBoven*4 + 32, xRechts*4, xOnder*4 + 32, rood);
    35e8:	d0a00517 	ldw	r2,-32748(gp)
    35ec:	1085883a 	add	r2,r2,r2
    35f0:	1085883a 	add	r2,r2,r2
    35f4:	1009883a 	mov	r4,r2
    35f8:	d0a00717 	ldw	r2,-32740(gp)
    35fc:	10800204 	addi	r2,r2,8
    3600:	1085883a 	add	r2,r2,r2
    3604:	1085883a 	add	r2,r2,r2
    3608:	100b883a 	mov	r5,r2
    360c:	d0a00617 	ldw	r2,-32744(gp)
    3610:	1085883a 	add	r2,r2,r2
    3614:	1085883a 	add	r2,r2,r2
    3618:	100d883a 	mov	r6,r2
    361c:	d0a00817 	ldw	r2,-32736(gp)
    3620:	10800204 	addi	r2,r2,8
    3624:	1085883a 	add	r2,r2,r2
    3628:	1085883a 	add	r2,r2,r2
    362c:	1007883a 	mov	r3,r2
    3630:	00be0014 	movui	r2,63488
    3634:	d8800015 	stw	r2,0(sp)
    3638:	180f883a 	mov	r7,r3
    363c:	00039bc0 	call	39bc <VGA_box>
    3640:	00001906 	br	36a8 <teken_menu+0x224>
	}else if(ID == 4){
    3644:	e0bfff17 	ldw	r2,-4(fp)
    3648:	10800118 	cmpnei	r2,r2,4
    364c:	1000161e 	bne	r2,zero,36a8 <teken_menu+0x224>
		VGA_box(xLinks*4, xBoven*4 + 48, xRechts*4, xOnder*4 + 48, rood);
    3650:	d0a00517 	ldw	r2,-32748(gp)
    3654:	1085883a 	add	r2,r2,r2
    3658:	1085883a 	add	r2,r2,r2
    365c:	1009883a 	mov	r4,r2
    3660:	d0a00717 	ldw	r2,-32740(gp)
    3664:	10800304 	addi	r2,r2,12
    3668:	1085883a 	add	r2,r2,r2
    366c:	1085883a 	add	r2,r2,r2
    3670:	100b883a 	mov	r5,r2
    3674:	d0a00617 	ldw	r2,-32744(gp)
    3678:	1085883a 	add	r2,r2,r2
    367c:	1085883a 	add	r2,r2,r2
    3680:	100d883a 	mov	r6,r2
    3684:	d0a00817 	ldw	r2,-32736(gp)
    3688:	10800304 	addi	r2,r2,12
    368c:	1085883a 	add	r2,r2,r2
    3690:	1085883a 	add	r2,r2,r2
    3694:	1007883a 	mov	r3,r2
    3698:	00be0014 	movui	r2,63488
    369c:	d8800015 	stw	r2,0(sp)
    36a0:	180f883a 	mov	r7,r3
    36a4:	00039bc0 	call	39bc <VGA_box>
	}


}
    36a8:	e037883a 	mov	sp,fp
    36ac:	dfc00117 	ldw	ra,4(sp)
    36b0:	df000017 	ldw	fp,0(sp)
    36b4:	dec00204 	addi	sp,sp,8
    36b8:	f800283a 	ret

000036bc <main>:
void * Messages[500];


/* The main function creates two task and starts multi-tasking */
int main(void)
{
    36bc:	defffa04 	addi	sp,sp,-24
    36c0:	dfc00515 	stw	ra,20(sp)
    36c4:	df000415 	stw	fp,16(sp)
    36c8:	df000404 	addi	fp,sp,16
	INT8U err;
	OSInit();
    36cc:	00151300 	call	15130 <OSInit>
	int counter = 0x50500;				// 1/(50 MHz) x (0x960000) ~= 200 msec
    36d0:	00800174 	movhi	r2,5
    36d4:	10814004 	addi	r2,r2,1280
    36d8:	e0bffd15 	stw	r2,-12(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
    36dc:	d0a00d17 	ldw	r2,-32716(gp)
    36e0:	10800204 	addi	r2,r2,8
    36e4:	e0fffd17 	ldw	r3,-12(fp)
    36e8:	18ffffcc 	andi	r3,r3,65535
    36ec:	10c00015 	stw	r3,0(r2)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
    36f0:	d0a00d17 	ldw	r2,-32716(gp)
    36f4:	10800304 	addi	r2,r2,12
    36f8:	e0fffd17 	ldw	r3,-12(fp)
    36fc:	1806d43a 	srli	r3,r3,16
    3700:	10c00015 	stw	r3,0(r2)

	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
    3704:	d0a00d17 	ldw	r2,-32716(gp)
    3708:	10800104 	addi	r2,r2,4
    370c:	00c001c4 	movi	r3,7
    3710:	10c00015 	stw	r3,0(r2)

	Flags = OSFlagCreate(C1_Flag + C2_Flag, &err);
    3714:	e0bfff04 	addi	r2,fp,-4
    3718:	01000304 	movi	r4,12
    371c:	100b883a 	mov	r5,r2
    3720:	0016d480 	call	16d48 <OSFlagCreate>
    3724:	d0a80f15 	stw	r2,-24516(gp)
	Flags_Games = OSFlagCreate(Game_Flag + Singleplayer_Flag, &err);
    3728:	e0bfff04 	addi	r2,fp,-4
    372c:	01000884 	movi	r4,34
    3730:	100b883a 	mov	r5,r2
    3734:	0016d480 	call	16d48 <OSFlagCreate>
    3738:	d0a80d15 	stw	r2,-24524(gp)
	Flags_Tutorial = OSFlagCreate(Tutorial_Flag, &err);
    373c:	e0bfff04 	addi	r2,fp,-4
    3740:	01001004 	movi	r4,64
    3744:	100b883a 	mov	r5,r2
    3748:	0016d480 	call	16d48 <OSFlagCreate>
    374c:	d0a81215 	stw	r2,-24504(gp)
	Flags_Highscores = OSFlagCreate(Highscores_Flag, &err);
    3750:	e0bfff04 	addi	r2,fp,-4
    3754:	01002004 	movi	r4,128
    3758:	100b883a 	mov	r5,r2
    375c:	0016d480 	call	16d48 <OSFlagCreate>
    3760:	d0a81a15 	stw	r2,-24472(gp)
	Flags_newHighscores = OSFlagCreate(newHighscores_Flag, &err);
    3764:	e0bfff04 	addi	r2,fp,-4
    3768:	01004004 	movi	r4,256
    376c:	100b883a 	mov	r5,r2
    3770:	0016d480 	call	16d48 <OSFlagCreate>
    3774:	d0a82015 	stw	r2,-24448(gp)

	alt_up_sd_card_dev * sd_card;
	sd_card = alt_up_sd_card_open_dev("/dev/SD_Card");
    3778:	010000b4 	movhi	r4,2
    377c:	21167204 	addi	r4,r4,22984
    3780:	00201740 	call	20174 <alt_up_sd_card_open_dev>
    3784:	e0bffe15 	stw	r2,-8(fp)

 	 if (sd_card!=NULL){
    3788:	e0bffe17 	ldw	r2,-8(fp)
    378c:	10001726 	beq	r2,zero,37ec <main+0x130>
		if (alt_up_sd_card_is_Present()){
    3790:	00202340 	call	20234 <alt_up_sd_card_is_Present>
    3794:	10000626 	beq	r2,zero,37b0 <main+0xf4>
			printf("An SD Card was found!\n");
    3798:	010000b4 	movhi	r4,2
    379c:	21167604 	addi	r4,r4,23000
    37a0:	00045900 	call	4590 <puts>
		else {
			printf("No SD Card Found. \n Exiting the program.");
			return -1;
		}

 		if (alt_up_sd_card_is_FAT16()){
    37a4:	00202f80 	call	202f8 <alt_up_sd_card_is_FAT16>
    37a8:	10000b26 	beq	r2,zero,37d8 <main+0x11c>
    37ac:	00000506 	br	37c4 <main+0x108>
		if (alt_up_sd_card_is_Present()){
			printf("An SD Card was found!\n");

		}
		else {
			printf("No SD Card Found. \n Exiting the program.");
    37b0:	010000b4 	movhi	r4,2
    37b4:	21167c04 	addi	r4,r4,23024
    37b8:	000448c0 	call	448c <printf>
			return -1;
    37bc:	00bfffc4 	movi	r2,-1
    37c0:	00007906 	br	39a8 <main+0x2ec>
		}

 		if (alt_up_sd_card_is_FAT16()){
			printf("FAT-16 partiton found!\n");
    37c4:	010000b4 	movhi	r4,2
    37c8:	21168704 	addi	r4,r4,23068
    37cc:	00045900 	call	4590 <puts>
		else{
			printf("No FAT-16 partition found - Exiting!\n");
			return -1;
		}

 		read_file();
    37d0:	000078c0 	call	78c <read_file>
    37d4:	00000506 	br	37ec <main+0x130>

 		if (alt_up_sd_card_is_FAT16()){
			printf("FAT-16 partiton found!\n");
		}
		else{
			printf("No FAT-16 partition found - Exiting!\n");
    37d8:	010000b4 	movhi	r4,2
    37dc:	21168d04 	addi	r4,r4,23092
    37e0:	00045900 	call	4590 <puts>
			return -1;
    37e4:	00bfffc4 	movi	r2,-1
    37e8:	00006f06 	br	39a8 <main+0x2ec>
		}

 		read_file();
	}

	gameSem = OSSemCreate(0);
    37ec:	0009883a 	mov	r4,zero
    37f0:	001a8280 	call	1a828 <OSSemCreate>
    37f4:	d0a82115 	stw	r2,-24444(gp)
	controllerSem = OSSemCreate(0);
    37f8:	0009883a 	mov	r4,zero
    37fc:	001a8280 	call	1a828 <OSSemCreate>
    3800:	d0a80b15 	stw	r2,-24532(gp)

	MailBox = OSMboxCreate((void *)0);
    3804:	0009883a 	mov	r4,zero
    3808:	00182f40 	call	182f4 <OSMboxCreate>
    380c:	d0a81015 	stw	r2,-24512(gp)
	MailBox2 = OSMboxCreate((void *)0);
    3810:	0009883a 	mov	r4,zero
    3814:	00182f40 	call	182f4 <OSMboxCreate>
    3818:	d0a80e15 	stw	r2,-24520(gp)


	VGA_box (0, 0, 319, 239, 0);						//clear screen
    381c:	d8000015 	stw	zero,0(sp)
    3820:	0009883a 	mov	r4,zero
    3824:	000b883a 	mov	r5,zero
    3828:	01804fc4 	movi	r6,319
    382c:	01c03bc4 	movi	r7,239
    3830:	00039bc0 	call	39bc <VGA_box>
	VGA_box (15, 50, 20, 100, 0x0000ff);				// links
    3834:	00803fc4 	movi	r2,255
    3838:	d8800015 	stw	r2,0(sp)
    383c:	010003c4 	movi	r4,15
    3840:	01400c84 	movi	r5,50
    3844:	01800504 	movi	r6,20
    3848:	01c01904 	movi	r7,100
    384c:	00039bc0 	call	39bc <VGA_box>
	VGA_box (300, 50, 305, 100, 0x0000ff);				// rechts
    3850:	00803fc4 	movi	r2,255
    3854:	d8800015 	stw	r2,0(sp)
    3858:	01004b04 	movi	r4,300
    385c:	01400c84 	movi	r5,50
    3860:	01804c44 	movi	r6,305
    3864:	01c01904 	movi	r7,100
    3868:	00039bc0 	call	39bc <VGA_box>

	VGA_box (0, 0, 319, 3, groen);					// boven
    386c:	0081a5c4 	movi	r2,1687
    3870:	d8800015 	stw	r2,0(sp)
    3874:	0009883a 	mov	r4,zero
    3878:	000b883a 	mov	r5,zero
    387c:	01804fc4 	movi	r6,319
    3880:	01c000c4 	movi	r7,3
    3884:	00039bc0 	call	39bc <VGA_box>
	VGA_box (0, 236, 319, 239, groen);				// onder
    3888:	0081a5c4 	movi	r2,1687
    388c:	d8800015 	stw	r2,0(sp)
    3890:	0009883a 	mov	r4,zero
    3894:	01403b04 	movi	r5,236
    3898:	01804fc4 	movi	r6,319
    389c:	01c03bc4 	movi	r7,239
    38a0:	00039bc0 	call	39bc <VGA_box>


	OSTaskCreate(controllers,(void*) 1,&controller1_stk[TASK_STACKSIZE-1],controller1_PRIORITY);
    38a4:	01000034 	movhi	r4,0
    38a8:	2100a004 	addi	r4,r4,640
    38ac:	01400044 	movi	r5,1
    38b0:	018000f4 	movhi	r6,3
    38b4:	319f3904 	addi	r6,r6,31972
    38b8:	01c002c4 	movi	r7,11
    38bc:	001b7c00 	call	1b7c0 <OSTaskCreate>
	OSTaskCreate(controllers,(void*) 2,&controller2_stk[TASK_STACKSIZE-1],controller2_PRIORITY);
    38c0:	01000034 	movhi	r4,0
    38c4:	2100a004 	addi	r4,r4,640
    38c8:	01400084 	movi	r5,2
    38cc:	01800134 	movhi	r6,4
    38d0:	31b73c04 	addi	r6,r6,-8976
    38d4:	01c00304 	movi	r7,12
    38d8:	001b7c00 	call	1b7c0 <OSTaskCreate>
	OSTaskCreate(Game,(void*) 0, &Game_stk[TASK_STACKSIZE-1],Game_PRIORITY);
    38dc:	01000034 	movhi	r4,0
    38e0:	2103ec04 	addi	r4,r4,4016
    38e4:	000b883a 	mov	r5,zero
    38e8:	01800134 	movhi	r6,4
    38ec:	31873e04 	addi	r6,r6,7416
    38f0:	01c00184 	movi	r7,6
    38f4:	001b7c00 	call	1b7c0 <OSTaskCreate>
	OSTaskCreate(Singleplayer,(void*) 0, &Singleplayer_stk[TASK_STACKSIZE-1],Singleplayer_PRIORITY);
    38f8:	01000034 	movhi	r4,0
    38fc:	21063504 	addi	r4,r4,6356
    3900:	000b883a 	mov	r5,zero
    3904:	018000f4 	movhi	r6,3
    3908:	31b02804 	addi	r6,r6,-16224
    390c:	01c001c4 	movi	r7,7
    3910:	001b7c00 	call	1b7c0 <OSTaskCreate>
	OSTaskCreate(Tutorial,(void*) 0, &Tutorial_stk[TASK_STACKSIZE-1],Tutorial_PRIORITY);
    3914:	01000034 	movhi	r4,0
    3918:	21083304 	addi	r4,r4,8396
    391c:	000b883a 	mov	r5,zero
    3920:	01800134 	movhi	r6,4
    3924:	31a73a04 	addi	r6,r6,-25368
    3928:	01c00204 	movi	r7,8
    392c:	001b7c00 	call	1b7c0 <OSTaskCreate>
	OSTaskCreate(Highscores,(void*) 0, &Highscores_stk[TASK_STACKSIZE-1],Highscores_PRIORITY);
    3930:	01000034 	movhi	r4,0
    3934:	210af404 	addi	r4,r4,11216
    3938:	000b883a 	mov	r5,zero
    393c:	01800134 	movhi	r6,4
    3940:	31bf3d04 	addi	r6,r6,-780
    3944:	01c00344 	movi	r7,13
    3948:	001b7c00 	call	1b7c0 <OSTaskCreate>
	OSTaskCreate(newHighscores,(void*) 0, &newHighscores_stk[TASK_STACKSIZE-1],newHighscores_PRIORITY);
    394c:	01000034 	movhi	r4,0
    3950:	21094004 	addi	r4,r4,9472
    3954:	000b883a 	mov	r5,zero
    3958:	01800134 	movhi	r6,4
    395c:	31af3b04 	addi	r6,r6,-17172
    3960:	01c00384 	movi	r7,14
    3964:	001b7c00 	call	1b7c0 <OSTaskCreate>


	OSTaskCreate(menu, (void*) 2, &menu_stk[TASK_STACKSIZE-1],menu_PRIORITY);
    3968:	01000034 	movhi	r4,0
    396c:	210b4f04 	addi	r4,r4,11580
    3970:	01400084 	movi	r5,2
    3974:	018000f4 	movhi	r6,3
    3978:	31973804 	addi	r6,r6,23776
    397c:	01c00244 	movi	r7,9
    3980:	001b7c00 	call	1b7c0 <OSTaskCreate>
	OSTaskCreate(selecteerMenu, (void*) 3, &menu_stk2[TASK_STACKSIZE-1], menu_PRIORITY +1);
    3984:	01000034 	movhi	r4,0
    3988:	210b8a04 	addi	r4,r4,11816
    398c:	014000c4 	movi	r5,3
    3990:	01800174 	movhi	r6,5
    3994:	31b04204 	addi	r6,r6,-16120
    3998:	01c00284 	movi	r7,10
    399c:	001b7c00 	call	1b7c0 <OSTaskCreate>
	OSStart();
    39a0:	00154540 	call	15454 <OSStart>
	return 0;
    39a4:	0005883a 	mov	r2,zero
}
    39a8:	e037883a 	mov	sp,fp
    39ac:	dfc00117 	ldw	ra,4(sp)
    39b0:	df000017 	ldw	fp,0(sp)
    39b4:	dec00204 	addi	sp,sp,8
    39b8:	f800283a 	ret

000039bc <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
    39bc:	defff604 	addi	sp,sp,-40
    39c0:	df000915 	stw	fp,36(sp)
    39c4:	df000904 	addi	fp,sp,36
    39c8:	e13ffb15 	stw	r4,-20(fp)
    39cc:	e17ffc15 	stw	r5,-16(fp)
    39d0:	e1bffd15 	stw	r6,-12(fp)
    39d4:	e1fffe15 	stw	r7,-8(fp)
    39d8:	e0800117 	ldw	r2,4(fp)
    39dc:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
    39e0:	00820034 	movhi	r2,2048
    39e4:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    39e8:	e0bffc17 	ldw	r2,-16(fp)
    39ec:	e0bff715 	stw	r2,-36(fp)
    39f0:	00001806 	br	3a54 <VGA_box+0x98>
	{
		col = x1;
    39f4:	e0bffb17 	ldw	r2,-20(fp)
    39f8:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
    39fc:	00000f06 	br	3a3c <VGA_box+0x80>
		{
			offset = (row << 9) + col;
    3a00:	e0bff717 	ldw	r2,-36(fp)
    3a04:	1006927a 	slli	r3,r2,9
    3a08:	e0bff817 	ldw	r2,-32(fp)
    3a0c:	1885883a 	add	r2,r3,r2
    3a10:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
    3a14:	e0bffa17 	ldw	r2,-24(fp)
    3a18:	1085883a 	add	r2,r2,r2
    3a1c:	1007883a 	mov	r3,r2
    3a20:	e0bff917 	ldw	r2,-28(fp)
    3a24:	10c5883a 	add	r2,r2,r3
    3a28:	e0ffff0b 	ldhu	r3,-4(fp)
    3a2c:	10c0000d 	sth	r3,0(r2)
			++col;
    3a30:	e0bff817 	ldw	r2,-32(fp)
    3a34:	10800044 	addi	r2,r2,1
    3a38:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
    3a3c:	e0bff817 	ldw	r2,-32(fp)
    3a40:	e0fffd17 	ldw	r3,-12(fp)
    3a44:	18bfee0e 	bge	r3,r2,3a00 <__alt_mem_Flash_flash_data+0xf4003a00>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    3a48:	e0bff717 	ldw	r2,-36(fp)
    3a4c:	10800044 	addi	r2,r2,1
    3a50:	e0bff715 	stw	r2,-36(fp)
    3a54:	e0bff717 	ldw	r2,-36(fp)
    3a58:	e0fffe17 	ldw	r3,-8(fp)
    3a5c:	18bfe50e 	bge	r3,r2,39f4 <__alt_mem_Flash_flash_data+0xf40039f4>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
    3a60:	e037883a 	mov	sp,fp
    3a64:	df000017 	ldw	fp,0(sp)
    3a68:	dec00104 	addi	sp,sp,4
    3a6c:	f800283a 	ret

00003a70 <VGA_text>:

void VGA_text(int x, int y, char * text_ptr)
{
    3a70:	defffa04 	addi	sp,sp,-24
    3a74:	df000515 	stw	fp,20(sp)
    3a78:	df000504 	addi	fp,sp,20
    3a7c:	e13ffd15 	stw	r4,-12(fp)
    3a80:	e17ffe15 	stw	r5,-8(fp)
    3a84:	e1bfff15 	stw	r6,-4(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer
    3a88:	00824034 	movhi	r2,2304
    3a8c:	e0bffc15 	stw	r2,-16(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
    3a90:	e0bffe17 	ldw	r2,-8(fp)
    3a94:	100691fa 	slli	r3,r2,7
    3a98:	e0bffd17 	ldw	r2,-12(fp)
    3a9c:	1885883a 	add	r2,r3,r2
    3aa0:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
    3aa4:	00000c06 	br	3ad8 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
    3aa8:	e0bffb17 	ldw	r2,-20(fp)
    3aac:	e0fffc17 	ldw	r3,-16(fp)
    3ab0:	1885883a 	add	r2,r3,r2
    3ab4:	e0ffff17 	ldw	r3,-4(fp)
    3ab8:	18c00003 	ldbu	r3,0(r3)
    3abc:	10c00005 	stb	r3,0(r2)
		++text_ptr;
    3ac0:	e0bfff17 	ldw	r2,-4(fp)
    3ac4:	10800044 	addi	r2,r2,1
    3ac8:	e0bfff15 	stw	r2,-4(fp)
		++offset;
    3acc:	e0bffb17 	ldw	r2,-20(fp)
    3ad0:	10800044 	addi	r2,r2,1
    3ad4:	e0bffb15 	stw	r2,-20(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
    3ad8:	e0bfff17 	ldw	r2,-4(fp)
    3adc:	10800003 	ldbu	r2,0(r2)
    3ae0:	10803fcc 	andi	r2,r2,255
    3ae4:	1080201c 	xori	r2,r2,128
    3ae8:	10bfe004 	addi	r2,r2,-128
    3aec:	103fee1e 	bne	r2,zero,3aa8 <__alt_mem_Flash_flash_data+0xf4003aa8>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
    3af0:	e037883a 	mov	sp,fp
    3af4:	df000017 	ldw	fp,0(sp)
    3af8:	dec00104 	addi	sp,sp,4
    3afc:	f800283a 	ret

00003b00 <draw_middenlijn>:

void draw_middenlijn(){
    3b00:	defffc04 	addi	sp,sp,-16
    3b04:	dfc00315 	stw	ra,12(sp)
    3b08:	df000215 	stw	fp,8(sp)
    3b0c:	df000204 	addi	fp,sp,8
	int i = 0;
    3b10:	e03fff15 	stw	zero,-4(fp)
	while(i < 240){
    3b14:	00000c06 	br	3b48 <draw_middenlijn+0x48>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
    3b18:	e0bfff17 	ldw	r2,-4(fp)
    3b1c:	10c001c4 	addi	r3,r2,7
    3b20:	0081a5c4 	movi	r2,1687
    3b24:	d8800015 	stw	r2,0(sp)
    3b28:	010027c4 	movi	r4,159
    3b2c:	e17fff17 	ldw	r5,-4(fp)
    3b30:	01802804 	movi	r6,160
    3b34:	180f883a 	mov	r7,r3
    3b38:	00039bc0 	call	39bc <VGA_box>
		i = i + 11;
    3b3c:	e0bfff17 	ldw	r2,-4(fp)
    3b40:	108002c4 	addi	r2,r2,11
    3b44:	e0bfff15 	stw	r2,-4(fp)
	}
}

void draw_middenlijn(){
	int i = 0;
	while(i < 240){
    3b48:	e0bfff17 	ldw	r2,-4(fp)
    3b4c:	10803c10 	cmplti	r2,r2,240
    3b50:	103ff11e 	bne	r2,zero,3b18 <__alt_mem_Flash_flash_data+0xf4003b18>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
		i = i + 11;
	}
}
    3b54:	e037883a 	mov	sp,fp
    3b58:	dfc00117 	ldw	ra,4(sp)
    3b5c:	df000017 	ldw	fp,0(sp)
    3b60:	dec00204 	addi	sp,sp,8
    3b64:	f800283a 	ret

00003b68 <del_middenlijn>:

void del_middenlijn(){
    3b68:	defffd04 	addi	sp,sp,-12
    3b6c:	dfc00215 	stw	ra,8(sp)
    3b70:	df000115 	stw	fp,4(sp)
    3b74:	df000104 	addi	fp,sp,4
	VGA_box(159, 4, 160, 235, 0);
    3b78:	d8000015 	stw	zero,0(sp)
    3b7c:	010027c4 	movi	r4,159
    3b80:	01400104 	movi	r5,4
    3b84:	01802804 	movi	r6,160
    3b88:	01c03ac4 	movi	r7,235
    3b8c:	00039bc0 	call	39bc <VGA_box>
}
    3b90:	e037883a 	mov	sp,fp
    3b94:	dfc00117 	ldw	ra,4(sp)
    3b98:	df000017 	ldw	fp,0(sp)
    3b9c:	dec00204 	addi	sp,sp,8
    3ba0:	f800283a 	ret

00003ba4 <del_number>:

void del_number(int side){
    3ba4:	defffc04 	addi	sp,sp,-16
    3ba8:	dfc00315 	stw	ra,12(sp)
    3bac:	df000215 	stw	fp,8(sp)
    3bb0:	df000204 	addi	fp,sp,8
    3bb4:	e13fff15 	stw	r4,-4(fp)
	if(side == 1){
    3bb8:	e0bfff17 	ldw	r2,-4(fp)
    3bbc:	10800058 	cmpnei	r2,r2,1
    3bc0:	1000061e 	bne	r2,zero,3bdc <del_number+0x38>
		VGA_box(120, 20, 140, 60, 0);
    3bc4:	d8000015 	stw	zero,0(sp)
    3bc8:	01001e04 	movi	r4,120
    3bcc:	01400504 	movi	r5,20
    3bd0:	01802304 	movi	r6,140
    3bd4:	01c00f04 	movi	r7,60
    3bd8:	00039bc0 	call	39bc <VGA_box>
	}
	if(side == 2){
    3bdc:	e0bfff17 	ldw	r2,-4(fp)
    3be0:	10800098 	cmpnei	r2,r2,2
    3be4:	1000061e 	bne	r2,zero,3c00 <del_number+0x5c>
		VGA_box(180, 20, 200, 60, 0);
    3be8:	d8000015 	stw	zero,0(sp)
    3bec:	01002d04 	movi	r4,180
    3bf0:	01400504 	movi	r5,20
    3bf4:	01803204 	movi	r6,200
    3bf8:	01c00f04 	movi	r7,60
    3bfc:	00039bc0 	call	39bc <VGA_box>
	}
}
    3c00:	e037883a 	mov	sp,fp
    3c04:	dfc00117 	ldw	ra,4(sp)
    3c08:	df000017 	ldw	fp,0(sp)
    3c0c:	dec00204 	addi	sp,sp,8
    3c10:	f800283a 	ret

00003c14 <deleteNummer>:

void deleteNummer(){
    3c14:	defffd04 	addi	sp,sp,-12
    3c18:	dfc00215 	stw	ra,8(sp)
    3c1c:	df000115 	stw	fp,4(sp)
    3c20:	df000104 	addi	fp,sp,4
	VGA_box(120, 20, 200, 60, 0);
    3c24:	d8000015 	stw	zero,0(sp)
    3c28:	01001e04 	movi	r4,120
    3c2c:	01400504 	movi	r5,20
    3c30:	01803204 	movi	r6,200
    3c34:	01c00f04 	movi	r7,60
    3c38:	00039bc0 	call	39bc <VGA_box>
}
    3c3c:	e037883a 	mov	sp,fp
    3c40:	dfc00117 	ldw	ra,4(sp)
    3c44:	df000017 	ldw	fp,0(sp)
    3c48:	dec00204 	addi	sp,sp,8
    3c4c:	f800283a 	ret

00003c50 <draw_number>:

void draw_number(int nummer, int ID){
    3c50:	defffa04 	addi	sp,sp,-24
    3c54:	dfc00515 	stw	ra,20(sp)
    3c58:	df000415 	stw	fp,16(sp)
    3c5c:	df000404 	addi	fp,sp,16
    3c60:	e13ffe15 	stw	r4,-8(fp)
    3c64:	e17fff15 	stw	r5,-4(fp)

	int X = checkIDScore(ID);
    3c68:	e13fff17 	ldw	r4,-4(fp)
    3c6c:	00042c40 	call	42c4 <checkIDScore>
    3c70:	e0bffd15 	stw	r2,-12(fp)

	if(nummer == 1){
    3c74:	e0bffe17 	ldw	r2,-8(fp)
    3c78:	10800058 	cmpnei	r2,r2,1
    3c7c:	10000b1e 	bne	r2,zero,3cac <draw_number+0x5c>
		VGA_box(X + 9, 20, X+12, 60, wit);
    3c80:	e0bffd17 	ldw	r2,-12(fp)
    3c84:	11000244 	addi	r4,r2,9
    3c88:	e0bffd17 	ldw	r2,-12(fp)
    3c8c:	10c00304 	addi	r3,r2,12
    3c90:	00bfffc4 	movi	r2,-1
    3c94:	d8800015 	stw	r2,0(sp)
    3c98:	01400504 	movi	r5,20
    3c9c:	180d883a 	mov	r6,r3
    3ca0:	01c00f04 	movi	r7,60
    3ca4:	00039bc0 	call	39bc <VGA_box>
    3ca8:	00018106 	br	42b0 <draw_number+0x660>
	}else if(nummer == 2){
    3cac:	e0bffe17 	ldw	r2,-8(fp)
    3cb0:	10800098 	cmpnei	r2,r2,2
    3cb4:	10002f1e 	bne	r2,zero,3d74 <draw_number+0x124>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    3cb8:	e0bffd17 	ldw	r2,-12(fp)
    3cbc:	10c00504 	addi	r3,r2,20
    3cc0:	00bfffc4 	movi	r2,-1
    3cc4:	d8800015 	stw	r2,0(sp)
    3cc8:	e13ffd17 	ldw	r4,-12(fp)
    3ccc:	01400504 	movi	r5,20
    3cd0:	180d883a 	mov	r6,r3
    3cd4:	01c00584 	movi	r7,22
    3cd8:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 38, wit);			//lijn naar beneden
    3cdc:	e0bffd17 	ldw	r2,-12(fp)
    3ce0:	11000484 	addi	r4,r2,18
    3ce4:	e0bffd17 	ldw	r2,-12(fp)
    3ce8:	10c00504 	addi	r3,r2,20
    3cec:	00bfffc4 	movi	r2,-1
    3cf0:	d8800015 	stw	r2,0(sp)
    3cf4:	01400584 	movi	r5,22
    3cf8:	180d883a 	mov	r6,r3
    3cfc:	01c00984 	movi	r7,38
    3d00:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    3d04:	e0bffd17 	ldw	r2,-12(fp)
    3d08:	10c00504 	addi	r3,r2,20
    3d0c:	00bfffc4 	movi	r2,-1
    3d10:	d8800015 	stw	r2,0(sp)
    3d14:	e13ffd17 	ldw	r4,-12(fp)
    3d18:	01400984 	movi	r5,38
    3d1c:	180d883a 	mov	r6,r3
    3d20:	01c00a04 	movi	r7,40
    3d24:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 40, X+ 2, 58, wit);					//lijn naar beneden
    3d28:	e0bffd17 	ldw	r2,-12(fp)
    3d2c:	10c00084 	addi	r3,r2,2
    3d30:	00bfffc4 	movi	r2,-1
    3d34:	d8800015 	stw	r2,0(sp)
    3d38:	e13ffd17 	ldw	r4,-12(fp)
    3d3c:	01400a04 	movi	r5,40
    3d40:	180d883a 	mov	r6,r3
    3d44:	01c00e84 	movi	r7,58
    3d48:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    3d4c:	e0bffd17 	ldw	r2,-12(fp)
    3d50:	10c00504 	addi	r3,r2,20
    3d54:	00bfffc4 	movi	r2,-1
    3d58:	d8800015 	stw	r2,0(sp)
    3d5c:	e13ffd17 	ldw	r4,-12(fp)
    3d60:	01400e84 	movi	r5,58
    3d64:	180d883a 	mov	r6,r3
    3d68:	01c00f04 	movi	r7,60
    3d6c:	00039bc0 	call	39bc <VGA_box>
    3d70:	00014f06 	br	42b0 <draw_number+0x660>
	}else if(nummer == 3){
    3d74:	e0bffe17 	ldw	r2,-8(fp)
    3d78:	108000d8 	cmpnei	r2,r2,3
    3d7c:	1000261e 	bne	r2,zero,3e18 <draw_number+0x1c8>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    3d80:	e0bffd17 	ldw	r2,-12(fp)
    3d84:	10c00504 	addi	r3,r2,20
    3d88:	00bfffc4 	movi	r2,-1
    3d8c:	d8800015 	stw	r2,0(sp)
    3d90:	e13ffd17 	ldw	r4,-12(fp)
    3d94:	01400504 	movi	r5,20
    3d98:	180d883a 	mov	r6,r3
    3d9c:	01c00584 	movi	r7,22
    3da0:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 60, wit);			//rechter lijn
    3da4:	e0bffd17 	ldw	r2,-12(fp)
    3da8:	11000484 	addi	r4,r2,18
    3dac:	e0bffd17 	ldw	r2,-12(fp)
    3db0:	10c00504 	addi	r3,r2,20
    3db4:	00bfffc4 	movi	r2,-1
    3db8:	d8800015 	stw	r2,0(sp)
    3dbc:	01400584 	movi	r5,22
    3dc0:	180d883a 	mov	r6,r3
    3dc4:	01c00f04 	movi	r7,60
    3dc8:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 39, X+ 20, 41, wit);					//midden lijn
    3dcc:	e0bffd17 	ldw	r2,-12(fp)
    3dd0:	10c00504 	addi	r3,r2,20
    3dd4:	00bfffc4 	movi	r2,-1
    3dd8:	d8800015 	stw	r2,0(sp)
    3ddc:	e13ffd17 	ldw	r4,-12(fp)
    3de0:	014009c4 	movi	r5,39
    3de4:	180d883a 	mov	r6,r3
    3de8:	01c00a44 	movi	r7,41
    3dec:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    3df0:	e0bffd17 	ldw	r2,-12(fp)
    3df4:	10c00504 	addi	r3,r2,20
    3df8:	00bfffc4 	movi	r2,-1
    3dfc:	d8800015 	stw	r2,0(sp)
    3e00:	e13ffd17 	ldw	r4,-12(fp)
    3e04:	01400e84 	movi	r5,58
    3e08:	180d883a 	mov	r6,r3
    3e0c:	01c00f04 	movi	r7,60
    3e10:	00039bc0 	call	39bc <VGA_box>
    3e14:	00012606 	br	42b0 <draw_number+0x660>
	}else if(nummer == 4){
    3e18:	e0bffe17 	ldw	r2,-8(fp)
    3e1c:	10800118 	cmpnei	r2,r2,4
    3e20:	10001d1e 	bne	r2,zero,3e98 <draw_number+0x248>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    3e24:	e0bffd17 	ldw	r2,-12(fp)
    3e28:	10c00084 	addi	r3,r2,2
    3e2c:	00bfffc4 	movi	r2,-1
    3e30:	d8800015 	stw	r2,0(sp)
    3e34:	e13ffd17 	ldw	r4,-12(fp)
    3e38:	01400504 	movi	r5,20
    3e3c:	180d883a 	mov	r6,r3
    3e40:	01c00a04 	movi	r7,40
    3e44:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    3e48:	e0bffd17 	ldw	r2,-12(fp)
    3e4c:	10c00504 	addi	r3,r2,20
    3e50:	00bfffc4 	movi	r2,-1
    3e54:	d8800015 	stw	r2,0(sp)
    3e58:	e13ffd17 	ldw	r4,-12(fp)
    3e5c:	014009c4 	movi	r5,39
    3e60:	180d883a 	mov	r6,r3
    3e64:	01c00a44 	movi	r7,41
    3e68:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    3e6c:	e0bffd17 	ldw	r2,-12(fp)
    3e70:	11000484 	addi	r4,r2,18
    3e74:	e0bffd17 	ldw	r2,-12(fp)
    3e78:	10c00504 	addi	r3,r2,20
    3e7c:	00bfffc4 	movi	r2,-1
    3e80:	d8800015 	stw	r2,0(sp)
    3e84:	01400504 	movi	r5,20
    3e88:	180d883a 	mov	r6,r3
    3e8c:	01c00f04 	movi	r7,60
    3e90:	00039bc0 	call	39bc <VGA_box>
    3e94:	00010606 	br	42b0 <draw_number+0x660>
	}else if(nummer == 5){
    3e98:	e0bffe17 	ldw	r2,-8(fp)
    3e9c:	10800158 	cmpnei	r2,r2,5
    3ea0:	10002f1e 	bne	r2,zero,3f60 <draw_number+0x310>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    3ea4:	e0bffd17 	ldw	r2,-12(fp)
    3ea8:	10c00504 	addi	r3,r2,20
    3eac:	00bfffc4 	movi	r2,-1
    3eb0:	d8800015 	stw	r2,0(sp)
    3eb4:	e13ffd17 	ldw	r4,-12(fp)
    3eb8:	01400504 	movi	r5,20
    3ebc:	180d883a 	mov	r6,r3
    3ec0:	01c00584 	movi	r7,22
    3ec4:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 22, X+ 2, 38, wit);					//lijn naar beneden
    3ec8:	e0bffd17 	ldw	r2,-12(fp)
    3ecc:	10c00084 	addi	r3,r2,2
    3ed0:	00bfffc4 	movi	r2,-1
    3ed4:	d8800015 	stw	r2,0(sp)
    3ed8:	e13ffd17 	ldw	r4,-12(fp)
    3edc:	01400584 	movi	r5,22
    3ee0:	180d883a 	mov	r6,r3
    3ee4:	01c00984 	movi	r7,38
    3ee8:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    3eec:	e0bffd17 	ldw	r2,-12(fp)
    3ef0:	10c00504 	addi	r3,r2,20
    3ef4:	00bfffc4 	movi	r2,-1
    3ef8:	d8800015 	stw	r2,0(sp)
    3efc:	e13ffd17 	ldw	r4,-12(fp)
    3f00:	01400984 	movi	r5,38
    3f04:	180d883a 	mov	r6,r3
    3f08:	01c00a04 	movi	r7,40
    3f0c:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn naar beneden
    3f10:	e0bffd17 	ldw	r2,-12(fp)
    3f14:	11000484 	addi	r4,r2,18
    3f18:	e0bffd17 	ldw	r2,-12(fp)
    3f1c:	10c00504 	addi	r3,r2,20
    3f20:	00bfffc4 	movi	r2,-1
    3f24:	d8800015 	stw	r2,0(sp)
    3f28:	01400a04 	movi	r5,40
    3f2c:	180d883a 	mov	r6,r3
    3f30:	01c00e84 	movi	r7,58
    3f34:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    3f38:	e0bffd17 	ldw	r2,-12(fp)
    3f3c:	10c00504 	addi	r3,r2,20
    3f40:	00bfffc4 	movi	r2,-1
    3f44:	d8800015 	stw	r2,0(sp)
    3f48:	e13ffd17 	ldw	r4,-12(fp)
    3f4c:	01400e84 	movi	r5,58
    3f50:	180d883a 	mov	r6,r3
    3f54:	01c00f04 	movi	r7,60
    3f58:	00039bc0 	call	39bc <VGA_box>
    3f5c:	0000d406 	br	42b0 <draw_number+0x660>
	}else if(nummer == 6){
    3f60:	e0bffe17 	ldw	r2,-8(fp)
    3f64:	10800198 	cmpnei	r2,r2,6
    3f68:	10002f1e 	bne	r2,zero,4028 <draw_number+0x3d8>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    3f6c:	e0bffd17 	ldw	r2,-12(fp)
    3f70:	10c00084 	addi	r3,r2,2
    3f74:	00bfffc4 	movi	r2,-1
    3f78:	d8800015 	stw	r2,0(sp)
    3f7c:	e13ffd17 	ldw	r4,-12(fp)
    3f80:	01400504 	movi	r5,20
    3f84:	180d883a 	mov	r6,r3
    3f88:	01c00f04 	movi	r7,60
    3f8c:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    3f90:	e0bffd17 	ldw	r2,-12(fp)
    3f94:	10c00504 	addi	r3,r2,20
    3f98:	00bfffc4 	movi	r2,-1
    3f9c:	d8800015 	stw	r2,0(sp)
    3fa0:	e13ffd17 	ldw	r4,-12(fp)
    3fa4:	01400504 	movi	r5,20
    3fa8:	180d883a 	mov	r6,r3
    3fac:	01c00584 	movi	r7,22
    3fb0:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    3fb4:	e0bffd17 	ldw	r2,-12(fp)
    3fb8:	10c00504 	addi	r3,r2,20
    3fbc:	00bfffc4 	movi	r2,-1
    3fc0:	d8800015 	stw	r2,0(sp)
    3fc4:	e13ffd17 	ldw	r4,-12(fp)
    3fc8:	01400e84 	movi	r5,58
    3fcc:	180d883a 	mov	r6,r3
    3fd0:	01c00f04 	movi	r7,60
    3fd4:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn rechts
    3fd8:	e0bffd17 	ldw	r2,-12(fp)
    3fdc:	11000484 	addi	r4,r2,18
    3fe0:	e0bffd17 	ldw	r2,-12(fp)
    3fe4:	10c00504 	addi	r3,r2,20
    3fe8:	00bfffc4 	movi	r2,-1
    3fec:	d8800015 	stw	r2,0(sp)
    3ff0:	01400a04 	movi	r5,40
    3ff4:	180d883a 	mov	r6,r3
    3ff8:	01c00e84 	movi	r7,58
    3ffc:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    4000:	e0bffd17 	ldw	r2,-12(fp)
    4004:	10c00504 	addi	r3,r2,20
    4008:	00bfffc4 	movi	r2,-1
    400c:	d8800015 	stw	r2,0(sp)
    4010:	e13ffd17 	ldw	r4,-12(fp)
    4014:	014009c4 	movi	r5,39
    4018:	180d883a 	mov	r6,r3
    401c:	01c00a44 	movi	r7,41
    4020:	00039bc0 	call	39bc <VGA_box>
    4024:	0000a206 	br	42b0 <draw_number+0x660>
	}else if(nummer == 7){
    4028:	e0bffe17 	ldw	r2,-8(fp)
    402c:	108001d8 	cmpnei	r2,r2,7
    4030:	1000141e 	bne	r2,zero,4084 <draw_number+0x434>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    4034:	e0bffd17 	ldw	r2,-12(fp)
    4038:	11000484 	addi	r4,r2,18
    403c:	e0bffd17 	ldw	r2,-12(fp)
    4040:	10c00504 	addi	r3,r2,20
    4044:	00bfffc4 	movi	r2,-1
    4048:	d8800015 	stw	r2,0(sp)
    404c:	01400504 	movi	r5,20
    4050:	180d883a 	mov	r6,r3
    4054:	01c00f04 	movi	r7,60
    4058:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    405c:	e0bffd17 	ldw	r2,-12(fp)
    4060:	10c00504 	addi	r3,r2,20
    4064:	00bfffc4 	movi	r2,-1
    4068:	d8800015 	stw	r2,0(sp)
    406c:	e13ffd17 	ldw	r4,-12(fp)
    4070:	01400504 	movi	r5,20
    4074:	180d883a 	mov	r6,r3
    4078:	01c00584 	movi	r7,22
    407c:	00039bc0 	call	39bc <VGA_box>
    4080:	00008b06 	br	42b0 <draw_number+0x660>
	}else if(nummer == 8){
    4084:	e0bffe17 	ldw	r2,-8(fp)
    4088:	10800218 	cmpnei	r2,r2,8
    408c:	10002f1e 	bne	r2,zero,414c <draw_number+0x4fc>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    4090:	e0bffd17 	ldw	r2,-12(fp)
    4094:	11000484 	addi	r4,r2,18
    4098:	e0bffd17 	ldw	r2,-12(fp)
    409c:	10c00504 	addi	r3,r2,20
    40a0:	00bfffc4 	movi	r2,-1
    40a4:	d8800015 	stw	r2,0(sp)
    40a8:	01400504 	movi	r5,20
    40ac:	180d883a 	mov	r6,r3
    40b0:	01c00f04 	movi	r7,60
    40b4:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    40b8:	e0bffd17 	ldw	r2,-12(fp)
    40bc:	10c00084 	addi	r3,r2,2
    40c0:	00bfffc4 	movi	r2,-1
    40c4:	d8800015 	stw	r2,0(sp)
    40c8:	e13ffd17 	ldw	r4,-12(fp)
    40cc:	01400504 	movi	r5,20
    40d0:	180d883a 	mov	r6,r3
    40d4:	01c00f04 	movi	r7,60
    40d8:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    40dc:	e0bffd17 	ldw	r2,-12(fp)
    40e0:	10c00504 	addi	r3,r2,20
    40e4:	00bfffc4 	movi	r2,-1
    40e8:	d8800015 	stw	r2,0(sp)
    40ec:	e13ffd17 	ldw	r4,-12(fp)
    40f0:	01400504 	movi	r5,20
    40f4:	180d883a 	mov	r6,r3
    40f8:	01c00584 	movi	r7,22
    40fc:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    4100:	e0bffd17 	ldw	r2,-12(fp)
    4104:	10c00504 	addi	r3,r2,20
    4108:	00bfffc4 	movi	r2,-1
    410c:	d8800015 	stw	r2,0(sp)
    4110:	e13ffd17 	ldw	r4,-12(fp)
    4114:	014009c4 	movi	r5,39
    4118:	180d883a 	mov	r6,r3
    411c:	01c00a44 	movi	r7,41
    4120:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    4124:	e0bffd17 	ldw	r2,-12(fp)
    4128:	10c00504 	addi	r3,r2,20
    412c:	00bfffc4 	movi	r2,-1
    4130:	d8800015 	stw	r2,0(sp)
    4134:	e13ffd17 	ldw	r4,-12(fp)
    4138:	01400e84 	movi	r5,58
    413c:	180d883a 	mov	r6,r3
    4140:	01c00f04 	movi	r7,60
    4144:	00039bc0 	call	39bc <VGA_box>
    4148:	00005906 	br	42b0 <draw_number+0x660>
	}else if(nummer == 9){
    414c:	e0bffe17 	ldw	r2,-8(fp)
    4150:	10800258 	cmpnei	r2,r2,9
    4154:	10002f1e 	bne	r2,zero,4214 <draw_number+0x5c4>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    4158:	e0bffd17 	ldw	r2,-12(fp)
    415c:	11000484 	addi	r4,r2,18
    4160:	e0bffd17 	ldw	r2,-12(fp)
    4164:	10c00504 	addi	r3,r2,20
    4168:	00bfffc4 	movi	r2,-1
    416c:	d8800015 	stw	r2,0(sp)
    4170:	01400504 	movi	r5,20
    4174:	180d883a 	mov	r6,r3
    4178:	01c00f04 	movi	r7,60
    417c:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    4180:	e0bffd17 	ldw	r2,-12(fp)
    4184:	10c00084 	addi	r3,r2,2
    4188:	00bfffc4 	movi	r2,-1
    418c:	d8800015 	stw	r2,0(sp)
    4190:	e13ffd17 	ldw	r4,-12(fp)
    4194:	01400504 	movi	r5,20
    4198:	180d883a 	mov	r6,r3
    419c:	01c00a04 	movi	r7,40
    41a0:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    41a4:	e0bffd17 	ldw	r2,-12(fp)
    41a8:	10c00504 	addi	r3,r2,20
    41ac:	00bfffc4 	movi	r2,-1
    41b0:	d8800015 	stw	r2,0(sp)
    41b4:	e13ffd17 	ldw	r4,-12(fp)
    41b8:	01400504 	movi	r5,20
    41bc:	180d883a 	mov	r6,r3
    41c0:	01c00584 	movi	r7,22
    41c4:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    41c8:	e0bffd17 	ldw	r2,-12(fp)
    41cc:	10c00504 	addi	r3,r2,20
    41d0:	00bfffc4 	movi	r2,-1
    41d4:	d8800015 	stw	r2,0(sp)
    41d8:	e13ffd17 	ldw	r4,-12(fp)
    41dc:	014009c4 	movi	r5,39
    41e0:	180d883a 	mov	r6,r3
    41e4:	01c00a44 	movi	r7,41
    41e8:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    41ec:	e0bffd17 	ldw	r2,-12(fp)
    41f0:	10c00504 	addi	r3,r2,20
    41f4:	00bfffc4 	movi	r2,-1
    41f8:	d8800015 	stw	r2,0(sp)
    41fc:	e13ffd17 	ldw	r4,-12(fp)
    4200:	01400e84 	movi	r5,58
    4204:	180d883a 	mov	r6,r3
    4208:	01c00f04 	movi	r7,60
    420c:	00039bc0 	call	39bc <VGA_box>
    4210:	00002706 	br	42b0 <draw_number+0x660>
	}else if(nummer == 0){
    4214:	e0bffe17 	ldw	r2,-8(fp)
    4218:	1000251e 	bne	r2,zero,42b0 <draw_number+0x660>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    421c:	e0bffd17 	ldw	r2,-12(fp)
    4220:	11000484 	addi	r4,r2,18
    4224:	e0bffd17 	ldw	r2,-12(fp)
    4228:	10c00504 	addi	r3,r2,20
    422c:	00bfffc4 	movi	r2,-1
    4230:	d8800015 	stw	r2,0(sp)
    4234:	01400504 	movi	r5,20
    4238:	180d883a 	mov	r6,r3
    423c:	01c00f04 	movi	r7,60
    4240:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    4244:	e0bffd17 	ldw	r2,-12(fp)
    4248:	10c00084 	addi	r3,r2,2
    424c:	00bfffc4 	movi	r2,-1
    4250:	d8800015 	stw	r2,0(sp)
    4254:	e13ffd17 	ldw	r4,-12(fp)
    4258:	01400504 	movi	r5,20
    425c:	180d883a 	mov	r6,r3
    4260:	01c00f04 	movi	r7,60
    4264:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    4268:	e0bffd17 	ldw	r2,-12(fp)
    426c:	10c00504 	addi	r3,r2,20
    4270:	00bfffc4 	movi	r2,-1
    4274:	d8800015 	stw	r2,0(sp)
    4278:	e13ffd17 	ldw	r4,-12(fp)
    427c:	01400504 	movi	r5,20
    4280:	180d883a 	mov	r6,r3
    4284:	01c00584 	movi	r7,22
    4288:	00039bc0 	call	39bc <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    428c:	e0bffd17 	ldw	r2,-12(fp)
    4290:	10c00504 	addi	r3,r2,20
    4294:	00bfffc4 	movi	r2,-1
    4298:	d8800015 	stw	r2,0(sp)
    429c:	e13ffd17 	ldw	r4,-12(fp)
    42a0:	01400e84 	movi	r5,58
    42a4:	180d883a 	mov	r6,r3
    42a8:	01c00f04 	movi	r7,60
    42ac:	00039bc0 	call	39bc <VGA_box>
	}
}
    42b0:	e037883a 	mov	sp,fp
    42b4:	dfc00117 	ldw	ra,4(sp)
    42b8:	df000017 	ldw	fp,0(sp)
    42bc:	dec00204 	addi	sp,sp,8
    42c0:	f800283a 	ret

000042c4 <checkIDScore>:

int checkIDScore(int ID){
    42c4:	defffe04 	addi	sp,sp,-8
    42c8:	df000115 	stw	fp,4(sp)
    42cc:	df000104 	addi	fp,sp,4
    42d0:	e13fff15 	stw	r4,-4(fp)
	if(ID == 1){
    42d4:	e0bfff17 	ldw	r2,-4(fp)
    42d8:	10800058 	cmpnei	r2,r2,1
    42dc:	1000021e 	bne	r2,zero,42e8 <checkIDScore+0x24>
		return 120;
    42e0:	00801e04 	movi	r2,120
    42e4:	00000b06 	br	4314 <checkIDScore+0x50>
	}else if(ID == 2){
    42e8:	e0bfff17 	ldw	r2,-4(fp)
    42ec:	10800098 	cmpnei	r2,r2,2
    42f0:	1000021e 	bne	r2,zero,42fc <checkIDScore+0x38>
		return 150;
    42f4:	00802584 	movi	r2,150
    42f8:	00000606 	br	4314 <checkIDScore+0x50>
	}else if(ID == 3){
    42fc:	e0bfff17 	ldw	r2,-4(fp)
    4300:	108000d8 	cmpnei	r2,r2,3
    4304:	1000021e 	bne	r2,zero,4310 <checkIDScore+0x4c>
		return 180;
    4308:	00802d04 	movi	r2,180
    430c:	00000106 	br	4314 <checkIDScore+0x50>
	}
	
	return 0;
    4310:	0005883a 	mov	r2,zero
}
    4314:	e037883a 	mov	sp,fp
    4318:	df000017 	ldw	fp,0(sp)
    431c:	dec00104 	addi	sp,sp,4
    4320:	f800283a 	ret

00004324 <bzero>:
    4324:	28000426 	beq	r5,zero,4338 <bzero+0x14>
    4328:	214b883a 	add	r5,r4,r5
    432c:	20000005 	stb	zero,0(r4)
    4330:	21000044 	addi	r4,r4,1
    4334:	217ffd1e 	bne	r4,r5,432c <__alt_mem_Flash_flash_data+0xf400432c>
    4338:	f800283a 	ret

0000433c <memset>:
    433c:	20c000cc 	andi	r3,r4,3
    4340:	2005883a 	mov	r2,r4
    4344:	18004326 	beq	r3,zero,4454 <memset+0x118>
    4348:	31ffffc4 	addi	r7,r6,-1
    434c:	30004026 	beq	r6,zero,4450 <memset+0x114>
    4350:	2813883a 	mov	r9,r5
    4354:	200d883a 	mov	r6,r4
    4358:	2007883a 	mov	r3,r4
    435c:	00000406 	br	4370 <memset+0x34>
    4360:	3a3fffc4 	addi	r8,r7,-1
    4364:	31800044 	addi	r6,r6,1
    4368:	38003926 	beq	r7,zero,4450 <memset+0x114>
    436c:	400f883a 	mov	r7,r8
    4370:	18c00044 	addi	r3,r3,1
    4374:	32400005 	stb	r9,0(r6)
    4378:	1a0000cc 	andi	r8,r3,3
    437c:	403ff81e 	bne	r8,zero,4360 <__alt_mem_Flash_flash_data+0xf4004360>
    4380:	010000c4 	movi	r4,3
    4384:	21c02d2e 	bgeu	r4,r7,443c <memset+0x100>
    4388:	29803fcc 	andi	r6,r5,255
    438c:	3008923a 	slli	r4,r6,8
    4390:	218cb03a 	or	r6,r4,r6
    4394:	3008943a 	slli	r4,r6,16
    4398:	218cb03a 	or	r6,r4,r6
    439c:	010003c4 	movi	r4,15
    43a0:	21c0182e 	bgeu	r4,r7,4404 <memset+0xc8>
    43a4:	3b3ffc04 	addi	r12,r7,-16
    43a8:	6018d13a 	srli	r12,r12,4
    43ac:	1a000104 	addi	r8,r3,4
    43b0:	1ac00204 	addi	r11,r3,8
    43b4:	6008913a 	slli	r4,r12,4
    43b8:	1a800304 	addi	r10,r3,12
    43bc:	1813883a 	mov	r9,r3
    43c0:	21000504 	addi	r4,r4,20
    43c4:	1909883a 	add	r4,r3,r4
    43c8:	49800015 	stw	r6,0(r9)
    43cc:	41800015 	stw	r6,0(r8)
    43d0:	59800015 	stw	r6,0(r11)
    43d4:	51800015 	stw	r6,0(r10)
    43d8:	42000404 	addi	r8,r8,16
    43dc:	4a400404 	addi	r9,r9,16
    43e0:	5ac00404 	addi	r11,r11,16
    43e4:	52800404 	addi	r10,r10,16
    43e8:	413ff71e 	bne	r8,r4,43c8 <__alt_mem_Flash_flash_data+0xf40043c8>
    43ec:	63000044 	addi	r12,r12,1
    43f0:	6018913a 	slli	r12,r12,4
    43f4:	39c003cc 	andi	r7,r7,15
    43f8:	010000c4 	movi	r4,3
    43fc:	1b07883a 	add	r3,r3,r12
    4400:	21c00e2e 	bgeu	r4,r7,443c <memset+0x100>
    4404:	1813883a 	mov	r9,r3
    4408:	3811883a 	mov	r8,r7
    440c:	010000c4 	movi	r4,3
    4410:	49800015 	stw	r6,0(r9)
    4414:	423fff04 	addi	r8,r8,-4
    4418:	4a400104 	addi	r9,r9,4
    441c:	223ffc36 	bltu	r4,r8,4410 <__alt_mem_Flash_flash_data+0xf4004410>
    4420:	393fff04 	addi	r4,r7,-4
    4424:	2008d0ba 	srli	r4,r4,2
    4428:	39c000cc 	andi	r7,r7,3
    442c:	21000044 	addi	r4,r4,1
    4430:	2109883a 	add	r4,r4,r4
    4434:	2109883a 	add	r4,r4,r4
    4438:	1907883a 	add	r3,r3,r4
    443c:	38000426 	beq	r7,zero,4450 <memset+0x114>
    4440:	19cf883a 	add	r7,r3,r7
    4444:	19400005 	stb	r5,0(r3)
    4448:	18c00044 	addi	r3,r3,1
    444c:	19fffd1e 	bne	r3,r7,4444 <__alt_mem_Flash_flash_data+0xf4004444>
    4450:	f800283a 	ret
    4454:	2007883a 	mov	r3,r4
    4458:	300f883a 	mov	r7,r6
    445c:	003fc806 	br	4380 <__alt_mem_Flash_flash_data+0xf4004380>

00004460 <_printf_r>:
    4460:	defffd04 	addi	sp,sp,-12
    4464:	dfc00015 	stw	ra,0(sp)
    4468:	d9800115 	stw	r6,4(sp)
    446c:	d9c00215 	stw	r7,8(sp)
    4470:	280d883a 	mov	r6,r5
    4474:	21400217 	ldw	r5,8(r4)
    4478:	d9c00104 	addi	r7,sp,4
    447c:	00067a80 	call	67a8 <___vfprintf_internal_r>
    4480:	dfc00017 	ldw	ra,0(sp)
    4484:	dec00304 	addi	sp,sp,12
    4488:	f800283a 	ret

0000448c <printf>:
    448c:	defffc04 	addi	sp,sp,-16
    4490:	dfc00015 	stw	ra,0(sp)
    4494:	d9400115 	stw	r5,4(sp)
    4498:	d9800215 	stw	r6,8(sp)
    449c:	d9c00315 	stw	r7,12(sp)
    44a0:	008000b4 	movhi	r2,2
    44a4:	109fb304 	addi	r2,r2,32460
    44a8:	10800017 	ldw	r2,0(r2)
    44ac:	200b883a 	mov	r5,r4
    44b0:	d9800104 	addi	r6,sp,4
    44b4:	11000217 	ldw	r4,8(r2)
    44b8:	00086f80 	call	86f8 <__vfprintf_internal>
    44bc:	dfc00017 	ldw	ra,0(sp)
    44c0:	dec00404 	addi	sp,sp,16
    44c4:	f800283a 	ret

000044c8 <_putchar_r>:
    44c8:	21800217 	ldw	r6,8(r4)
    44cc:	000d0401 	jmpi	d040 <_putc_r>

000044d0 <putchar>:
    44d0:	008000b4 	movhi	r2,2
    44d4:	109fb304 	addi	r2,r2,32460
    44d8:	200b883a 	mov	r5,r4
    44dc:	11000017 	ldw	r4,0(r2)
    44e0:	21800217 	ldw	r6,8(r4)
    44e4:	000d0401 	jmpi	d040 <_putc_r>

000044e8 <_puts_r>:
    44e8:	defff604 	addi	sp,sp,-40
    44ec:	dc000715 	stw	r16,28(sp)
    44f0:	2021883a 	mov	r16,r4
    44f4:	2809883a 	mov	r4,r5
    44f8:	dc400815 	stw	r17,32(sp)
    44fc:	dfc00915 	stw	ra,36(sp)
    4500:	2823883a 	mov	r17,r5
    4504:	00047800 	call	4780 <strlen>
    4508:	81400217 	ldw	r5,8(r16)
    450c:	11000044 	addi	r4,r2,1
    4510:	d8800115 	stw	r2,4(sp)
    4514:	008000b4 	movhi	r2,2
    4518:	2980030b 	ldhu	r6,12(r5)
    451c:	10969704 	addi	r2,r2,23132
    4520:	d8800215 	stw	r2,8(sp)
    4524:	00800044 	movi	r2,1
    4528:	d8800315 	stw	r2,12(sp)
    452c:	00800084 	movi	r2,2
    4530:	d8800515 	stw	r2,20(sp)
    4534:	dc400015 	stw	r17,0(sp)
    4538:	d9000615 	stw	r4,24(sp)
    453c:	dec00415 	stw	sp,16(sp)
    4540:	3088000c 	andi	r2,r6,8192
    4544:	1000061e 	bne	r2,zero,4560 <_puts_r+0x78>
    4548:	29001917 	ldw	r4,100(r5)
    454c:	00b7ffc4 	movi	r2,-8193
    4550:	31880014 	ori	r6,r6,8192
    4554:	2084703a 	and	r2,r4,r2
    4558:	2980030d 	sth	r6,12(r5)
    455c:	28801915 	stw	r2,100(r5)
    4560:	8009883a 	mov	r4,r16
    4564:	d9800404 	addi	r6,sp,16
    4568:	000ac9c0 	call	ac9c <__sfvwrite_r>
    456c:	1000061e 	bne	r2,zero,4588 <_puts_r+0xa0>
    4570:	00800284 	movi	r2,10
    4574:	dfc00917 	ldw	ra,36(sp)
    4578:	dc400817 	ldw	r17,32(sp)
    457c:	dc000717 	ldw	r16,28(sp)
    4580:	dec00a04 	addi	sp,sp,40
    4584:	f800283a 	ret
    4588:	00bfffc4 	movi	r2,-1
    458c:	003ff906 	br	4574 <__alt_mem_Flash_flash_data+0xf4004574>

00004590 <puts>:
    4590:	008000b4 	movhi	r2,2
    4594:	109fb304 	addi	r2,r2,32460
    4598:	200b883a 	mov	r5,r4
    459c:	11000017 	ldw	r4,0(r2)
    45a0:	00044e81 	jmpi	44e8 <_puts_r>

000045a4 <_sprintf_r>:
    45a4:	deffe404 	addi	sp,sp,-112
    45a8:	2807883a 	mov	r3,r5
    45ac:	dfc01a15 	stw	ra,104(sp)
    45b0:	d9c01b15 	stw	r7,108(sp)
    45b4:	00a00034 	movhi	r2,32768
    45b8:	10bfffc4 	addi	r2,r2,-1
    45bc:	02008204 	movi	r8,520
    45c0:	d8800215 	stw	r2,8(sp)
    45c4:	d8800515 	stw	r2,20(sp)
    45c8:	d80b883a 	mov	r5,sp
    45cc:	d9c01b04 	addi	r7,sp,108
    45d0:	00bfffc4 	movi	r2,-1
    45d4:	d8c00015 	stw	r3,0(sp)
    45d8:	d8c00415 	stw	r3,16(sp)
    45dc:	da00030d 	sth	r8,12(sp)
    45e0:	d880038d 	sth	r2,14(sp)
    45e4:	00048180 	call	4818 <___svfprintf_internal_r>
    45e8:	d8c00017 	ldw	r3,0(sp)
    45ec:	18000005 	stb	zero,0(r3)
    45f0:	dfc01a17 	ldw	ra,104(sp)
    45f4:	dec01c04 	addi	sp,sp,112
    45f8:	f800283a 	ret

000045fc <sprintf>:
    45fc:	deffe304 	addi	sp,sp,-116
    4600:	2007883a 	mov	r3,r4
    4604:	dfc01a15 	stw	ra,104(sp)
    4608:	d9801b15 	stw	r6,108(sp)
    460c:	d9c01c15 	stw	r7,112(sp)
    4610:	010000b4 	movhi	r4,2
    4614:	211fb304 	addi	r4,r4,32460
    4618:	21000017 	ldw	r4,0(r4)
    461c:	00a00034 	movhi	r2,32768
    4620:	10bfffc4 	addi	r2,r2,-1
    4624:	280d883a 	mov	r6,r5
    4628:	02008204 	movi	r8,520
    462c:	d8800215 	stw	r2,8(sp)
    4630:	d8800515 	stw	r2,20(sp)
    4634:	d80b883a 	mov	r5,sp
    4638:	d9c01b04 	addi	r7,sp,108
    463c:	00bfffc4 	movi	r2,-1
    4640:	d8c00015 	stw	r3,0(sp)
    4644:	d8c00415 	stw	r3,16(sp)
    4648:	da00030d 	sth	r8,12(sp)
    464c:	d880038d 	sth	r2,14(sp)
    4650:	00048180 	call	4818 <___svfprintf_internal_r>
    4654:	d8c00017 	ldw	r3,0(sp)
    4658:	18000005 	stb	zero,0(r3)
    465c:	dfc01a17 	ldw	ra,104(sp)
    4660:	dec01d04 	addi	sp,sp,116
    4664:	f800283a 	ret

00004668 <strcat>:
    4668:	defffe04 	addi	sp,sp,-8
    466c:	dc000015 	stw	r16,0(sp)
    4670:	dfc00115 	stw	ra,4(sp)
    4674:	208000cc 	andi	r2,r4,3
    4678:	2021883a 	mov	r16,r4
    467c:	1000111e 	bne	r2,zero,46c4 <strcat+0x5c>
    4680:	20800017 	ldw	r2,0(r4)
    4684:	027fbff4 	movhi	r9,65279
    4688:	4a7fbfc4 	addi	r9,r9,-257
    468c:	0086303a 	nor	r3,zero,r2
    4690:	02202074 	movhi	r8,32897
    4694:	1245883a 	add	r2,r2,r9
    4698:	42202004 	addi	r8,r8,-32640
    469c:	10c4703a 	and	r2,r2,r3
    46a0:	1204703a 	and	r2,r2,r8
    46a4:	1000071e 	bne	r2,zero,46c4 <strcat+0x5c>
    46a8:	21000104 	addi	r4,r4,4
    46ac:	21800017 	ldw	r6,0(r4)
    46b0:	324f883a 	add	r7,r6,r9
    46b4:	018c303a 	nor	r6,zero,r6
    46b8:	398c703a 	and	r6,r7,r6
    46bc:	320c703a 	and	r6,r6,r8
    46c0:	303ff926 	beq	r6,zero,46a8 <__alt_mem_Flash_flash_data+0xf40046a8>
    46c4:	20800007 	ldb	r2,0(r4)
    46c8:	10000326 	beq	r2,zero,46d8 <strcat+0x70>
    46cc:	21000044 	addi	r4,r4,1
    46d0:	21800007 	ldb	r6,0(r4)
    46d4:	303ffd1e 	bne	r6,zero,46cc <__alt_mem_Flash_flash_data+0xf40046cc>
    46d8:	00046f00 	call	46f0 <strcpy>
    46dc:	8005883a 	mov	r2,r16
    46e0:	dfc00117 	ldw	ra,4(sp)
    46e4:	dc000017 	ldw	r16,0(sp)
    46e8:	dec00204 	addi	sp,sp,8
    46ec:	f800283a 	ret

000046f0 <strcpy>:
    46f0:	2906b03a 	or	r3,r5,r4
    46f4:	18c000cc 	andi	r3,r3,3
    46f8:	2005883a 	mov	r2,r4
    46fc:	1800161e 	bne	r3,zero,4758 <strcpy+0x68>
    4700:	29c00017 	ldw	r7,0(r5)
    4704:	02ffbff4 	movhi	r11,65279
    4708:	5affbfc4 	addi	r11,r11,-257
    470c:	02a02074 	movhi	r10,32897
    4710:	01c8303a 	nor	r4,zero,r7
    4714:	3ac7883a 	add	r3,r7,r11
    4718:	52a02004 	addi	r10,r10,-32640
    471c:	20c6703a 	and	r3,r4,r3
    4720:	1a86703a 	and	r3,r3,r10
    4724:	18000c1e 	bne	r3,zero,4758 <strcpy+0x68>
    4728:	1011883a 	mov	r8,r2
    472c:	41c00015 	stw	r7,0(r8)
    4730:	29400104 	addi	r5,r5,4
    4734:	29c00017 	ldw	r7,0(r5)
    4738:	41800104 	addi	r6,r8,4
    473c:	3011883a 	mov	r8,r6
    4740:	01d2303a 	nor	r9,zero,r7
    4744:	3ac7883a 	add	r3,r7,r11
    4748:	48c6703a 	and	r3,r9,r3
    474c:	1a86703a 	and	r3,r3,r10
    4750:	183ff626 	beq	r3,zero,472c <__alt_mem_Flash_flash_data+0xf400472c>
    4754:	00000106 	br	475c <strcpy+0x6c>
    4758:	100d883a 	mov	r6,r2
    475c:	28c00003 	ldbu	r3,0(r5)
    4760:	31800044 	addi	r6,r6,1
    4764:	29400044 	addi	r5,r5,1
    4768:	30ffffc5 	stb	r3,-1(r6)
    476c:	18c03fcc 	andi	r3,r3,255
    4770:	18c0201c 	xori	r3,r3,128
    4774:	18ffe004 	addi	r3,r3,-128
    4778:	183ff81e 	bne	r3,zero,475c <__alt_mem_Flash_flash_data+0xf400475c>
    477c:	f800283a 	ret

00004780 <strlen>:
    4780:	208000cc 	andi	r2,r4,3
    4784:	10002026 	beq	r2,zero,4808 <strlen+0x88>
    4788:	20800007 	ldb	r2,0(r4)
    478c:	10002026 	beq	r2,zero,4810 <strlen+0x90>
    4790:	2005883a 	mov	r2,r4
    4794:	00000206 	br	47a0 <strlen+0x20>
    4798:	10c00007 	ldb	r3,0(r2)
    479c:	18001826 	beq	r3,zero,4800 <strlen+0x80>
    47a0:	10800044 	addi	r2,r2,1
    47a4:	10c000cc 	andi	r3,r2,3
    47a8:	183ffb1e 	bne	r3,zero,4798 <__alt_mem_Flash_flash_data+0xf4004798>
    47ac:	10c00017 	ldw	r3,0(r2)
    47b0:	01ffbff4 	movhi	r7,65279
    47b4:	39ffbfc4 	addi	r7,r7,-257
    47b8:	00ca303a 	nor	r5,zero,r3
    47bc:	01a02074 	movhi	r6,32897
    47c0:	19c7883a 	add	r3,r3,r7
    47c4:	31a02004 	addi	r6,r6,-32640
    47c8:	1946703a 	and	r3,r3,r5
    47cc:	1986703a 	and	r3,r3,r6
    47d0:	1800091e 	bne	r3,zero,47f8 <strlen+0x78>
    47d4:	10800104 	addi	r2,r2,4
    47d8:	10c00017 	ldw	r3,0(r2)
    47dc:	19cb883a 	add	r5,r3,r7
    47e0:	00c6303a 	nor	r3,zero,r3
    47e4:	28c6703a 	and	r3,r5,r3
    47e8:	1986703a 	and	r3,r3,r6
    47ec:	183ff926 	beq	r3,zero,47d4 <__alt_mem_Flash_flash_data+0xf40047d4>
    47f0:	00000106 	br	47f8 <strlen+0x78>
    47f4:	10800044 	addi	r2,r2,1
    47f8:	10c00007 	ldb	r3,0(r2)
    47fc:	183ffd1e 	bne	r3,zero,47f4 <__alt_mem_Flash_flash_data+0xf40047f4>
    4800:	1105c83a 	sub	r2,r2,r4
    4804:	f800283a 	ret
    4808:	2005883a 	mov	r2,r4
    480c:	003fe706 	br	47ac <__alt_mem_Flash_flash_data+0xf40047ac>
    4810:	0005883a 	mov	r2,zero
    4814:	f800283a 	ret

00004818 <___svfprintf_internal_r>:
    4818:	deffb504 	addi	sp,sp,-300
    481c:	dfc04a15 	stw	ra,296(sp)
    4820:	ddc04815 	stw	r23,288(sp)
    4824:	d9002f15 	stw	r4,188(sp)
    4828:	282f883a 	mov	r23,r5
    482c:	d9802915 	stw	r6,164(sp)
    4830:	d9c02d15 	stw	r7,180(sp)
    4834:	df004915 	stw	fp,292(sp)
    4838:	dd804715 	stw	r22,284(sp)
    483c:	dd404615 	stw	r21,280(sp)
    4840:	dd004515 	stw	r20,276(sp)
    4844:	dcc04415 	stw	r19,272(sp)
    4848:	dc804315 	stw	r18,268(sp)
    484c:	dc404215 	stw	r17,264(sp)
    4850:	dc004115 	stw	r16,260(sp)
    4854:	000b3900 	call	b390 <_localeconv_r>
    4858:	10800017 	ldw	r2,0(r2)
    485c:	1009883a 	mov	r4,r2
    4860:	d8803515 	stw	r2,212(sp)
    4864:	00047800 	call	4780 <strlen>
    4868:	d8803915 	stw	r2,228(sp)
    486c:	b880030b 	ldhu	r2,12(r23)
    4870:	1080200c 	andi	r2,r2,128
    4874:	10000226 	beq	r2,zero,4880 <___svfprintf_internal_r+0x68>
    4878:	b8800417 	ldw	r2,16(r23)
    487c:	10065f26 	beq	r2,zero,61fc <___svfprintf_internal_r+0x19e4>
    4880:	db001dc4 	addi	r12,sp,119
    4884:	dd801e04 	addi	r22,sp,120
    4888:	d8800404 	addi	r2,sp,16
    488c:	050000b4 	movhi	r20,2
    4890:	b317c83a 	sub	r11,r22,r12
    4894:	a516a884 	addi	r20,r20,23202
    4898:	db002815 	stw	r12,160(sp)
    489c:	d8801e15 	stw	r2,120(sp)
    48a0:	d8002015 	stw	zero,128(sp)
    48a4:	d8001f15 	stw	zero,124(sp)
    48a8:	d8003315 	stw	zero,204(sp)
    48ac:	d8003715 	stw	zero,220(sp)
    48b0:	d8003815 	stw	zero,224(sp)
    48b4:	1011883a 	mov	r8,r2
    48b8:	d8003b15 	stw	zero,236(sp)
    48bc:	d8003a15 	stw	zero,232(sp)
    48c0:	d8003015 	stw	zero,192(sp)
    48c4:	dac03d15 	stw	r11,244(sp)
    48c8:	db002917 	ldw	r12,164(sp)
    48cc:	60800007 	ldb	r2,0(r12)
    48d0:	1000ab26 	beq	r2,zero,4b80 <___svfprintf_internal_r+0x368>
    48d4:	00c00944 	movi	r3,37
    48d8:	10c0a926 	beq	r2,r3,4b80 <___svfprintf_internal_r+0x368>
    48dc:	6021883a 	mov	r16,r12
    48e0:	00000106 	br	48e8 <___svfprintf_internal_r+0xd0>
    48e4:	10c08426 	beq	r2,r3,4af8 <___svfprintf_internal_r+0x2e0>
    48e8:	84000044 	addi	r16,r16,1
    48ec:	80800007 	ldb	r2,0(r16)
    48f0:	103ffc1e 	bne	r2,zero,48e4 <__alt_mem_Flash_flash_data+0xf40048e4>
    48f4:	dac02917 	ldw	r11,164(sp)
    48f8:	82e3c83a 	sub	r17,r16,r11
    48fc:	88000f26 	beq	r17,zero,493c <___svfprintf_internal_r+0x124>
    4900:	d8c02017 	ldw	r3,128(sp)
    4904:	d8801f17 	ldw	r2,124(sp)
    4908:	dac02917 	ldw	r11,164(sp)
    490c:	1c47883a 	add	r3,r3,r17
    4910:	10800044 	addi	r2,r2,1
    4914:	d8c02015 	stw	r3,128(sp)
    4918:	42c00015 	stw	r11,0(r8)
    491c:	44400115 	stw	r17,4(r8)
    4920:	d8801f15 	stw	r2,124(sp)
    4924:	00c001c4 	movi	r3,7
    4928:	18807616 	blt	r3,r2,4b04 <___svfprintf_internal_r+0x2ec>
    492c:	42000204 	addi	r8,r8,8
    4930:	db003017 	ldw	r12,192(sp)
    4934:	6459883a 	add	r12,r12,r17
    4938:	db003015 	stw	r12,192(sp)
    493c:	80800007 	ldb	r2,0(r16)
    4940:	10007726 	beq	r2,zero,4b20 <___svfprintf_internal_r+0x308>
    4944:	80800044 	addi	r2,r16,1
    4948:	84000047 	ldb	r16,1(r16)
    494c:	d8002785 	stb	zero,158(sp)
    4950:	000d883a 	mov	r6,zero
    4954:	027fffc4 	movi	r9,-1
    4958:	d8002e15 	stw	zero,184(sp)
    495c:	0023883a 	mov	r17,zero
    4960:	01001604 	movi	r4,88
    4964:	01400244 	movi	r5,9
    4968:	02800a84 	movi	r10,42
    496c:	01c01b04 	movi	r7,108
    4970:	10c00044 	addi	r3,r2,1
    4974:	80bff804 	addi	r2,r16,-32
    4978:	2082e636 	bltu	r4,r2,5514 <___svfprintf_internal_r+0xcfc>
    497c:	100490ba 	slli	r2,r2,2
    4980:	02c00034 	movhi	r11,0
    4984:	5ad26504 	addi	r11,r11,18836
    4988:	12c5883a 	add	r2,r2,r11
    498c:	10800017 	ldw	r2,0(r2)
    4990:	1000683a 	jmp	r2
    4994:	000052f4 	movhi	zero,331
    4998:	00005514 	movui	zero,340
    499c:	00005514 	movui	zero,340
    49a0:	00005314 	movui	zero,332
    49a4:	00005514 	movui	zero,340
    49a8:	00005514 	movui	zero,340
    49ac:	00005514 	movui	zero,340
    49b0:	00005514 	movui	zero,340
    49b4:	00005514 	movui	zero,340
    49b8:	00005514 	movui	zero,340
    49bc:	00005324 	muli	zero,zero,332
    49c0:	00005350 	cmplti	zero,zero,333
    49c4:	00005514 	movui	zero,340
    49c8:	00004b88 	cmpgei	zero,zero,302
    49cc:	00004b98 	cmpnei	zero,zero,302
    49d0:	00005514 	movui	zero,340
    49d4:	00004bd8 	cmpnei	zero,zero,303
    49d8:	000051b8 	rdprs	zero,zero,326
    49dc:	000051b8 	rdprs	zero,zero,326
    49e0:	000051b8 	rdprs	zero,zero,326
    49e4:	000051b8 	rdprs	zero,zero,326
    49e8:	000051b8 	rdprs	zero,zero,326
    49ec:	000051b8 	rdprs	zero,zero,326
    49f0:	000051b8 	rdprs	zero,zero,326
    49f4:	000051b8 	rdprs	zero,zero,326
    49f8:	000051b8 	rdprs	zero,zero,326
    49fc:	00005514 	movui	zero,340
    4a00:	00005514 	movui	zero,340
    4a04:	00005514 	movui	zero,340
    4a08:	00005514 	movui	zero,340
    4a0c:	00005514 	movui	zero,340
    4a10:	00005514 	movui	zero,340
    4a14:	00005514 	movui	zero,340
    4a18:	00005514 	movui	zero,340
    4a1c:	00005514 	movui	zero,340
    4a20:	00005514 	movui	zero,340
    4a24:	00004be8 	cmpgeui	zero,zero,303
    4a28:	00005068 	cmpgeui	zero,zero,321
    4a2c:	00005514 	movui	zero,340
    4a30:	00005068 	cmpgeui	zero,zero,321
    4a34:	00005514 	movui	zero,340
    4a38:	00005514 	movui	zero,340
    4a3c:	00005514 	movui	zero,340
    4a40:	00005514 	movui	zero,340
    4a44:	0000510c 	andi	zero,zero,324
    4a48:	00005514 	movui	zero,340
    4a4c:	00005514 	movui	zero,340
    4a50:	000054a8 	cmpgeui	zero,zero,338
    4a54:	00005514 	movui	zero,340
    4a58:	00005514 	movui	zero,340
    4a5c:	00005514 	movui	zero,340
    4a60:	00005514 	movui	zero,340
    4a64:	00005514 	movui	zero,340
    4a68:	0000511c 	xori	zero,zero,324
    4a6c:	00005514 	movui	zero,340
    4a70:	00005514 	movui	zero,340
    4a74:	0000515c 	xori	zero,zero,325
    4a78:	00005514 	movui	zero,340
    4a7c:	00005514 	movui	zero,340
    4a80:	00005514 	movui	zero,340
    4a84:	00005514 	movui	zero,340
    4a88:	00005514 	movui	zero,340
    4a8c:	00005514 	movui	zero,340
    4a90:	00005514 	movui	zero,340
    4a94:	00005514 	movui	zero,340
    4a98:	00005514 	movui	zero,340
    4a9c:	00005514 	movui	zero,340
    4aa0:	00005400 	call	540 <checkID+0x4>
    4aa4:	00005440 	call	544 <checkID+0x8>
    4aa8:	00005068 	cmpgeui	zero,zero,321
    4aac:	00005068 	cmpgeui	zero,zero,321
    4ab0:	00005068 	cmpgeui	zero,zero,321
    4ab4:	00005360 	cmpeqi	zero,zero,333
    4ab8:	00005440 	call	544 <checkID+0x8>
    4abc:	00005514 	movui	zero,340
    4ac0:	00005514 	movui	zero,340
    4ac4:	00005370 	cmpltui	zero,zero,333
    4ac8:	00005514 	movui	zero,340
    4acc:	00005384 	movi	zero,334
    4ad0:	000054d8 	cmpnei	zero,zero,339
    4ad4:	000053b8 	rdprs	zero,zero,334
    4ad8:	000051ec 	andhi	zero,zero,327
    4adc:	00005514 	movui	zero,340
    4ae0:	000051fc 	xorhi	zero,zero,327
    4ae4:	00005514 	movui	zero,340
    4ae8:	00005274 	movhi	zero,329
    4aec:	00005514 	movui	zero,340
    4af0:	00005514 	movui	zero,340
    4af4:	000052b4 	movhi	zero,330
    4af8:	db002917 	ldw	r12,164(sp)
    4afc:	8323c83a 	sub	r17,r16,r12
    4b00:	003f7e06 	br	48fc <__alt_mem_Flash_flash_data+0xf40048fc>
    4b04:	d9002f17 	ldw	r4,188(sp)
    4b08:	b80b883a 	mov	r5,r23
    4b0c:	b00d883a 	mov	r6,r22
    4b10:	000d9bc0 	call	d9bc <__ssprint_r>
    4b14:	1000081e 	bne	r2,zero,4b38 <___svfprintf_internal_r+0x320>
    4b18:	da000404 	addi	r8,sp,16
    4b1c:	003f8406 	br	4930 <__alt_mem_Flash_flash_data+0xf4004930>
    4b20:	d8802017 	ldw	r2,128(sp)
    4b24:	10000426 	beq	r2,zero,4b38 <___svfprintf_internal_r+0x320>
    4b28:	d9002f17 	ldw	r4,188(sp)
    4b2c:	b80b883a 	mov	r5,r23
    4b30:	d9801e04 	addi	r6,sp,120
    4b34:	000d9bc0 	call	d9bc <__ssprint_r>
    4b38:	b880030b 	ldhu	r2,12(r23)
    4b3c:	1080100c 	andi	r2,r2,64
    4b40:	10000d1e 	bne	r2,zero,4b78 <___svfprintf_internal_r+0x360>
    4b44:	d8803017 	ldw	r2,192(sp)
    4b48:	dfc04a17 	ldw	ra,296(sp)
    4b4c:	df004917 	ldw	fp,292(sp)
    4b50:	ddc04817 	ldw	r23,288(sp)
    4b54:	dd804717 	ldw	r22,284(sp)
    4b58:	dd404617 	ldw	r21,280(sp)
    4b5c:	dd004517 	ldw	r20,276(sp)
    4b60:	dcc04417 	ldw	r19,272(sp)
    4b64:	dc804317 	ldw	r18,268(sp)
    4b68:	dc404217 	ldw	r17,264(sp)
    4b6c:	dc004117 	ldw	r16,260(sp)
    4b70:	dec04b04 	addi	sp,sp,300
    4b74:	f800283a 	ret
    4b78:	00bfffc4 	movi	r2,-1
    4b7c:	003ff206 	br	4b48 <__alt_mem_Flash_flash_data+0xf4004b48>
    4b80:	dc002917 	ldw	r16,164(sp)
    4b84:	003f6d06 	br	493c <__alt_mem_Flash_flash_data+0xf400493c>
    4b88:	1805883a 	mov	r2,r3
    4b8c:	8c400114 	ori	r17,r17,4
    4b90:	1c000007 	ldb	r16,0(r3)
    4b94:	003f7606 	br	4970 <__alt_mem_Flash_flash_data+0xf4004970>
    4b98:	1c000007 	ldb	r16,0(r3)
    4b9c:	18800044 	addi	r2,r3,1
    4ba0:	8286e726 	beq	r16,r10,6740 <___svfprintf_internal_r+0x1f28>
    4ba4:	82fff404 	addi	r11,r16,-48
    4ba8:	1007883a 	mov	r3,r2
    4bac:	0013883a 	mov	r9,zero
    4bb0:	2aff7036 	bltu	r5,r11,4974 <__alt_mem_Flash_flash_data+0xf4004974>
    4bb4:	1c000007 	ldb	r16,0(r3)
    4bb8:	4a4002a4 	muli	r9,r9,10
    4bbc:	18c00044 	addi	r3,r3,1
    4bc0:	5a53883a 	add	r9,r11,r9
    4bc4:	82fff404 	addi	r11,r16,-48
    4bc8:	2afffa2e 	bgeu	r5,r11,4bb4 <__alt_mem_Flash_flash_data+0xf4004bb4>
    4bcc:	483f690e 	bge	r9,zero,4974 <__alt_mem_Flash_flash_data+0xf4004974>
    4bd0:	027fffc4 	movi	r9,-1
    4bd4:	003f6706 	br	4974 <__alt_mem_Flash_flash_data+0xf4004974>
    4bd8:	8c402014 	ori	r17,r17,128
    4bdc:	1805883a 	mov	r2,r3
    4be0:	1c000007 	ldb	r16,0(r3)
    4be4:	003f6206 	br	4970 <__alt_mem_Flash_flash_data+0xf4004970>
    4be8:	8c400414 	ori	r17,r17,16
    4bec:	d8c02915 	stw	r3,164(sp)
    4bf0:	d9802785 	stb	r6,158(sp)
    4bf4:	8880080c 	andi	r2,r17,32
    4bf8:	d8c02d17 	ldw	r3,180(sp)
    4bfc:	10021526 	beq	r2,zero,5454 <___svfprintf_internal_r+0xc3c>
    4c00:	db002d17 	ldw	r12,180(sp)
    4c04:	18800117 	ldw	r2,4(r3)
    4c08:	1cc00017 	ldw	r19,0(r3)
    4c0c:	63000204 	addi	r12,r12,8
    4c10:	db002d15 	stw	r12,180(sp)
    4c14:	1039883a 	mov	fp,r2
    4c18:	10021916 	blt	r2,zero,5480 <___svfprintf_internal_r+0xc68>
    4c1c:	dd402783 	ldbu	r21,158(sp)
    4c20:	da403215 	stw	r9,200(sp)
    4c24:	00800044 	movi	r2,1
    4c28:	9f06b03a 	or	r3,r19,fp
    4c2c:	48000216 	blt	r9,zero,4c38 <___svfprintf_internal_r+0x420>
    4c30:	013fdfc4 	movi	r4,-129
    4c34:	8922703a 	and	r17,r17,r4
    4c38:	1802461e 	bne	r3,zero,5554 <___svfprintf_internal_r+0xd3c>
    4c3c:	48035426 	beq	r9,zero,5990 <___svfprintf_internal_r+0x1178>
    4c40:	10803fcc 	andi	r2,r2,255
    4c44:	00c00044 	movi	r3,1
    4c48:	10c26726 	beq	r2,r3,55e8 <___svfprintf_internal_r+0xdd0>
    4c4c:	00c00084 	movi	r3,2
    4c50:	10c2ea26 	beq	r2,r3,57fc <___svfprintf_internal_r+0xfe4>
    4c54:	b007883a 	mov	r3,r22
    4c58:	9808d0fa 	srli	r4,r19,3
    4c5c:	e00a977a 	slli	r5,fp,29
    4c60:	e038d0fa 	srli	fp,fp,3
    4c64:	9cc001cc 	andi	r19,r19,7
    4c68:	98800c04 	addi	r2,r19,48
    4c6c:	18ffffc4 	addi	r3,r3,-1
    4c70:	2926b03a 	or	r19,r5,r4
    4c74:	18800005 	stb	r2,0(r3)
    4c78:	9f08b03a 	or	r4,r19,fp
    4c7c:	203ff61e 	bne	r4,zero,4c58 <__alt_mem_Flash_flash_data+0xf4004c58>
    4c80:	8900004c 	andi	r4,r17,1
    4c84:	d8c03115 	stw	r3,196(sp)
    4c88:	2002ea26 	beq	r4,zero,5834 <___svfprintf_internal_r+0x101c>
    4c8c:	10803fcc 	andi	r2,r2,255
    4c90:	1080201c 	xori	r2,r2,128
    4c94:	10bfe004 	addi	r2,r2,-128
    4c98:	01000c04 	movi	r4,48
    4c9c:	11057526 	beq	r2,r4,6274 <___svfprintf_internal_r+0x1a5c>
    4ca0:	dac03117 	ldw	r11,196(sp)
    4ca4:	193fffc5 	stb	r4,-1(r3)
    4ca8:	5affffc4 	addi	r11,r11,-1
    4cac:	dac03115 	stw	r11,196(sp)
    4cb0:	b2e5c83a 	sub	r18,r22,r11
    4cb4:	9005883a 	mov	r2,r18
    4cb8:	9240010e 	bge	r18,r9,4cc0 <___svfprintf_internal_r+0x4a8>
    4cbc:	4805883a 	mov	r2,r9
    4cc0:	d8802a15 	stw	r2,168(sp)
    4cc4:	d8003415 	stw	zero,208(sp)
    4cc8:	a8803fcc 	andi	r2,r21,255
    4ccc:	1080201c 	xori	r2,r2,128
    4cd0:	10bfe004 	addi	r2,r2,-128
    4cd4:	10000326 	beq	r2,zero,4ce4 <___svfprintf_internal_r+0x4cc>
    4cd8:	d8c02a17 	ldw	r3,168(sp)
    4cdc:	18c00044 	addi	r3,r3,1
    4ce0:	d8c02a15 	stw	r3,168(sp)
    4ce4:	8ac0008c 	andi	r11,r17,2
    4ce8:	dac02b15 	stw	r11,172(sp)
    4cec:	58000326 	beq	r11,zero,4cfc <___svfprintf_internal_r+0x4e4>
    4cf0:	db002a17 	ldw	r12,168(sp)
    4cf4:	63000084 	addi	r12,r12,2
    4cf8:	db002a15 	stw	r12,168(sp)
    4cfc:	88c0210c 	andi	r3,r17,132
    4d00:	d8c02c15 	stw	r3,176(sp)
    4d04:	1802111e 	bne	r3,zero,554c <___svfprintf_internal_r+0xd34>
    4d08:	dac02e17 	ldw	r11,184(sp)
    4d0c:	db002a17 	ldw	r12,168(sp)
    4d10:	5b39c83a 	sub	fp,r11,r12
    4d14:	07020d0e 	bge	zero,fp,554c <___svfprintf_internal_r+0xd34>
    4d18:	02400404 	movi	r9,16
    4d1c:	d8c02017 	ldw	r3,128(sp)
    4d20:	d8801f17 	ldw	r2,124(sp)
    4d24:	4f058c0e 	bge	r9,fp,6358 <___svfprintf_internal_r+0x1b40>
    4d28:	014000b4 	movhi	r5,2
    4d2c:	e009883a 	mov	r4,fp
    4d30:	2956ac84 	addi	r5,r5,23218
    4d34:	dc003c15 	stw	r16,240(sp)
    4d38:	9039883a 	mov	fp,r18
    4d3c:	d9403615 	stw	r5,216(sp)
    4d40:	8825883a 	mov	r18,r17
    4d44:	482b883a 	mov	r21,r9
    4d48:	04c001c4 	movi	r19,7
    4d4c:	dc002f17 	ldw	r16,188(sp)
    4d50:	2023883a 	mov	r17,r4
    4d54:	00000306 	br	4d64 <___svfprintf_internal_r+0x54c>
    4d58:	8c7ffc04 	addi	r17,r17,-16
    4d5c:	42000204 	addi	r8,r8,8
    4d60:	ac40130e 	bge	r21,r17,4db0 <___svfprintf_internal_r+0x598>
    4d64:	02c000b4 	movhi	r11,2
    4d68:	18c00404 	addi	r3,r3,16
    4d6c:	10800044 	addi	r2,r2,1
    4d70:	5ad6ac84 	addi	r11,r11,23218
    4d74:	42c00015 	stw	r11,0(r8)
    4d78:	45400115 	stw	r21,4(r8)
    4d7c:	d8c02015 	stw	r3,128(sp)
    4d80:	d8801f15 	stw	r2,124(sp)
    4d84:	98bff40e 	bge	r19,r2,4d58 <__alt_mem_Flash_flash_data+0xf4004d58>
    4d88:	8009883a 	mov	r4,r16
    4d8c:	b80b883a 	mov	r5,r23
    4d90:	b00d883a 	mov	r6,r22
    4d94:	000d9bc0 	call	d9bc <__ssprint_r>
    4d98:	103f671e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    4d9c:	8c7ffc04 	addi	r17,r17,-16
    4da0:	d8c02017 	ldw	r3,128(sp)
    4da4:	d8801f17 	ldw	r2,124(sp)
    4da8:	da000404 	addi	r8,sp,16
    4dac:	ac7fed16 	blt	r21,r17,4d64 <__alt_mem_Flash_flash_data+0xf4004d64>
    4db0:	dc003c17 	ldw	r16,240(sp)
    4db4:	8809883a 	mov	r4,r17
    4db8:	9023883a 	mov	r17,r18
    4dbc:	e025883a 	mov	r18,fp
    4dc0:	2039883a 	mov	fp,r4
    4dc4:	db003617 	ldw	r12,216(sp)
    4dc8:	e0c7883a 	add	r3,fp,r3
    4dcc:	10800044 	addi	r2,r2,1
    4dd0:	43000015 	stw	r12,0(r8)
    4dd4:	47000115 	stw	fp,4(r8)
    4dd8:	d8c02015 	stw	r3,128(sp)
    4ddc:	d8801f15 	stw	r2,124(sp)
    4de0:	010001c4 	movi	r4,7
    4de4:	20834416 	blt	r4,r2,5af8 <___svfprintf_internal_r+0x12e0>
    4de8:	d8802787 	ldb	r2,158(sp)
    4dec:	42000204 	addi	r8,r8,8
    4df0:	10000c26 	beq	r2,zero,4e24 <___svfprintf_internal_r+0x60c>
    4df4:	d8801f17 	ldw	r2,124(sp)
    4df8:	d9002784 	addi	r4,sp,158
    4dfc:	18c00044 	addi	r3,r3,1
    4e00:	10800044 	addi	r2,r2,1
    4e04:	41000015 	stw	r4,0(r8)
    4e08:	01000044 	movi	r4,1
    4e0c:	41000115 	stw	r4,4(r8)
    4e10:	d8c02015 	stw	r3,128(sp)
    4e14:	d8801f15 	stw	r2,124(sp)
    4e18:	010001c4 	movi	r4,7
    4e1c:	2082f616 	blt	r4,r2,59f8 <___svfprintf_internal_r+0x11e0>
    4e20:	42000204 	addi	r8,r8,8
    4e24:	dac02b17 	ldw	r11,172(sp)
    4e28:	58000c26 	beq	r11,zero,4e5c <___svfprintf_internal_r+0x644>
    4e2c:	d8801f17 	ldw	r2,124(sp)
    4e30:	d9002704 	addi	r4,sp,156
    4e34:	18c00084 	addi	r3,r3,2
    4e38:	10800044 	addi	r2,r2,1
    4e3c:	41000015 	stw	r4,0(r8)
    4e40:	01000084 	movi	r4,2
    4e44:	41000115 	stw	r4,4(r8)
    4e48:	d8c02015 	stw	r3,128(sp)
    4e4c:	d8801f15 	stw	r2,124(sp)
    4e50:	010001c4 	movi	r4,7
    4e54:	2082e016 	blt	r4,r2,59d8 <___svfprintf_internal_r+0x11c0>
    4e58:	42000204 	addi	r8,r8,8
    4e5c:	db002c17 	ldw	r12,176(sp)
    4e60:	00802004 	movi	r2,128
    4e64:	60822f26 	beq	r12,r2,5724 <___svfprintf_internal_r+0xf0c>
    4e68:	db003217 	ldw	r12,200(sp)
    4e6c:	64abc83a 	sub	r21,r12,r18
    4e70:	0540310e 	bge	zero,r21,4f38 <___svfprintf_internal_r+0x720>
    4e74:	07000404 	movi	fp,16
    4e78:	d8801f17 	ldw	r2,124(sp)
    4e7c:	e544270e 	bge	fp,r21,5f1c <___svfprintf_internal_r+0x1704>
    4e80:	014000b4 	movhi	r5,2
    4e84:	a809883a 	mov	r4,r21
    4e88:	2956a884 	addi	r5,r5,23202
    4e8c:	dc002c15 	stw	r16,176(sp)
    4e90:	902b883a 	mov	r21,r18
    4e94:	d9402b15 	stw	r5,172(sp)
    4e98:	8825883a 	mov	r18,r17
    4e9c:	04c001c4 	movi	r19,7
    4ea0:	dc002f17 	ldw	r16,188(sp)
    4ea4:	2023883a 	mov	r17,r4
    4ea8:	00000306 	br	4eb8 <___svfprintf_internal_r+0x6a0>
    4eac:	8c7ffc04 	addi	r17,r17,-16
    4eb0:	42000204 	addi	r8,r8,8
    4eb4:	e440110e 	bge	fp,r17,4efc <___svfprintf_internal_r+0x6e4>
    4eb8:	18c00404 	addi	r3,r3,16
    4ebc:	10800044 	addi	r2,r2,1
    4ec0:	45000015 	stw	r20,0(r8)
    4ec4:	47000115 	stw	fp,4(r8)
    4ec8:	d8c02015 	stw	r3,128(sp)
    4ecc:	d8801f15 	stw	r2,124(sp)
    4ed0:	98bff60e 	bge	r19,r2,4eac <__alt_mem_Flash_flash_data+0xf4004eac>
    4ed4:	8009883a 	mov	r4,r16
    4ed8:	b80b883a 	mov	r5,r23
    4edc:	b00d883a 	mov	r6,r22
    4ee0:	000d9bc0 	call	d9bc <__ssprint_r>
    4ee4:	103f141e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    4ee8:	8c7ffc04 	addi	r17,r17,-16
    4eec:	d8c02017 	ldw	r3,128(sp)
    4ef0:	d8801f17 	ldw	r2,124(sp)
    4ef4:	da000404 	addi	r8,sp,16
    4ef8:	e47fef16 	blt	fp,r17,4eb8 <__alt_mem_Flash_flash_data+0xf4004eb8>
    4efc:	dc002c17 	ldw	r16,176(sp)
    4f00:	8809883a 	mov	r4,r17
    4f04:	9023883a 	mov	r17,r18
    4f08:	a825883a 	mov	r18,r21
    4f0c:	202b883a 	mov	r21,r4
    4f10:	dac02b17 	ldw	r11,172(sp)
    4f14:	1d47883a 	add	r3,r3,r21
    4f18:	10800044 	addi	r2,r2,1
    4f1c:	42c00015 	stw	r11,0(r8)
    4f20:	45400115 	stw	r21,4(r8)
    4f24:	d8c02015 	stw	r3,128(sp)
    4f28:	d8801f15 	stw	r2,124(sp)
    4f2c:	010001c4 	movi	r4,7
    4f30:	2082a116 	blt	r4,r2,59b8 <___svfprintf_internal_r+0x11a0>
    4f34:	42000204 	addi	r8,r8,8
    4f38:	8880400c 	andi	r2,r17,256
    4f3c:	1001b01e 	bne	r2,zero,5600 <___svfprintf_internal_r+0xde8>
    4f40:	d8801f17 	ldw	r2,124(sp)
    4f44:	db003117 	ldw	r12,196(sp)
    4f48:	1c87883a 	add	r3,r3,r18
    4f4c:	10800044 	addi	r2,r2,1
    4f50:	43000015 	stw	r12,0(r8)
    4f54:	44800115 	stw	r18,4(r8)
    4f58:	d8c02015 	stw	r3,128(sp)
    4f5c:	d8801f15 	stw	r2,124(sp)
    4f60:	010001c4 	movi	r4,7
    4f64:	20828216 	blt	r4,r2,5970 <___svfprintf_internal_r+0x1158>
    4f68:	42000204 	addi	r8,r8,8
    4f6c:	8c40010c 	andi	r17,r17,4
    4f70:	88003226 	beq	r17,zero,503c <___svfprintf_internal_r+0x824>
    4f74:	db002e17 	ldw	r12,184(sp)
    4f78:	dac02a17 	ldw	r11,168(sp)
    4f7c:	62e1c83a 	sub	r16,r12,r11
    4f80:	04002e0e 	bge	zero,r16,503c <___svfprintf_internal_r+0x824>
    4f84:	04400404 	movi	r17,16
    4f88:	d8801f17 	ldw	r2,124(sp)
    4f8c:	8c05330e 	bge	r17,r16,645c <___svfprintf_internal_r+0x1c44>
    4f90:	010000b4 	movhi	r4,2
    4f94:	2116ac84 	addi	r4,r4,23218
    4f98:	d9003615 	stw	r4,216(sp)
    4f9c:	048001c4 	movi	r18,7
    4fa0:	dcc02f17 	ldw	r19,188(sp)
    4fa4:	00000306 	br	4fb4 <___svfprintf_internal_r+0x79c>
    4fa8:	843ffc04 	addi	r16,r16,-16
    4fac:	42000204 	addi	r8,r8,8
    4fb0:	8c00130e 	bge	r17,r16,5000 <___svfprintf_internal_r+0x7e8>
    4fb4:	014000b4 	movhi	r5,2
    4fb8:	18c00404 	addi	r3,r3,16
    4fbc:	10800044 	addi	r2,r2,1
    4fc0:	2956ac84 	addi	r5,r5,23218
    4fc4:	41400015 	stw	r5,0(r8)
    4fc8:	44400115 	stw	r17,4(r8)
    4fcc:	d8c02015 	stw	r3,128(sp)
    4fd0:	d8801f15 	stw	r2,124(sp)
    4fd4:	90bff40e 	bge	r18,r2,4fa8 <__alt_mem_Flash_flash_data+0xf4004fa8>
    4fd8:	9809883a 	mov	r4,r19
    4fdc:	b80b883a 	mov	r5,r23
    4fe0:	b00d883a 	mov	r6,r22
    4fe4:	000d9bc0 	call	d9bc <__ssprint_r>
    4fe8:	103ed31e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    4fec:	843ffc04 	addi	r16,r16,-16
    4ff0:	d8c02017 	ldw	r3,128(sp)
    4ff4:	d8801f17 	ldw	r2,124(sp)
    4ff8:	da000404 	addi	r8,sp,16
    4ffc:	8c3fed16 	blt	r17,r16,4fb4 <__alt_mem_Flash_flash_data+0xf4004fb4>
    5000:	dac03617 	ldw	r11,216(sp)
    5004:	1c07883a 	add	r3,r3,r16
    5008:	10800044 	addi	r2,r2,1
    500c:	42c00015 	stw	r11,0(r8)
    5010:	44000115 	stw	r16,4(r8)
    5014:	d8c02015 	stw	r3,128(sp)
    5018:	d8801f15 	stw	r2,124(sp)
    501c:	010001c4 	movi	r4,7
    5020:	2080060e 	bge	r4,r2,503c <___svfprintf_internal_r+0x824>
    5024:	d9002f17 	ldw	r4,188(sp)
    5028:	b80b883a 	mov	r5,r23
    502c:	b00d883a 	mov	r6,r22
    5030:	000d9bc0 	call	d9bc <__ssprint_r>
    5034:	103ec01e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    5038:	d8c02017 	ldw	r3,128(sp)
    503c:	d8802a17 	ldw	r2,168(sp)
    5040:	db002e17 	ldw	r12,184(sp)
    5044:	1300010e 	bge	r2,r12,504c <___svfprintf_internal_r+0x834>
    5048:	6005883a 	mov	r2,r12
    504c:	dac03017 	ldw	r11,192(sp)
    5050:	5897883a 	add	r11,r11,r2
    5054:	dac03015 	stw	r11,192(sp)
    5058:	1802331e 	bne	r3,zero,5928 <___svfprintf_internal_r+0x1110>
    505c:	d8001f15 	stw	zero,124(sp)
    5060:	da000404 	addi	r8,sp,16
    5064:	003e1806 	br	48c8 <__alt_mem_Flash_flash_data+0xf40048c8>
    5068:	db002d17 	ldw	r12,180(sp)
    506c:	dac02d17 	ldw	r11,180(sp)
    5070:	d8c02915 	stw	r3,164(sp)
    5074:	63000017 	ldw	r12,0(r12)
    5078:	5ac00117 	ldw	r11,4(r11)
    507c:	d9802785 	stb	r6,158(sp)
    5080:	6009883a 	mov	r4,r12
    5084:	580b883a 	mov	r5,r11
    5088:	db003715 	stw	r12,220(sp)
    508c:	da004015 	stw	r8,256(sp)
    5090:	da403f15 	stw	r9,252(sp)
    5094:	dac03815 	stw	r11,224(sp)
    5098:	000d7140 	call	d714 <__fpclassifyd>
    509c:	db002d17 	ldw	r12,180(sp)
    50a0:	04800044 	movi	r18,1
    50a4:	da004017 	ldw	r8,256(sp)
    50a8:	64c00204 	addi	r19,r12,8
    50ac:	da403f17 	ldw	r9,252(sp)
    50b0:	d9003717 	ldw	r4,220(sp)
    50b4:	d9403817 	ldw	r5,224(sp)
    50b8:	1483561e 	bne	r2,r18,5e14 <___svfprintf_internal_r+0x15fc>
    50bc:	000d883a 	mov	r6,zero
    50c0:	000f883a 	mov	r7,zero
    50c4:	00128c40 	call	128c4 <__ledf2>
    50c8:	da004017 	ldw	r8,256(sp)
    50cc:	1004ee16 	blt	r2,zero,6488 <___svfprintf_internal_r+0x1c70>
    50d0:	dd402783 	ldbu	r21,158(sp)
    50d4:	008011c4 	movi	r2,71
    50d8:	1404440e 	bge	r2,r16,61ec <___svfprintf_internal_r+0x19d4>
    50dc:	00c000b4 	movhi	r3,2
    50e0:	18d69904 	addi	r3,r3,23140
    50e4:	d8c03115 	stw	r3,196(sp)
    50e8:	02c000c4 	movi	r11,3
    50ec:	00bfdfc4 	movi	r2,-129
    50f0:	dac02a15 	stw	r11,168(sp)
    50f4:	88a2703a 	and	r17,r17,r2
    50f8:	dcc02d15 	stw	r19,180(sp)
    50fc:	5825883a 	mov	r18,r11
    5100:	d8003215 	stw	zero,200(sp)
    5104:	d8003415 	stw	zero,208(sp)
    5108:	003eef06 	br	4cc8 <__alt_mem_Flash_flash_data+0xf4004cc8>
    510c:	8c400214 	ori	r17,r17,8
    5110:	1805883a 	mov	r2,r3
    5114:	1c000007 	ldb	r16,0(r3)
    5118:	003e1506 	br	4970 <__alt_mem_Flash_flash_data+0xf4004970>
    511c:	8c400414 	ori	r17,r17,16
    5120:	d8c02915 	stw	r3,164(sp)
    5124:	88c0080c 	andi	r3,r17,32
    5128:	d8802d17 	ldw	r2,180(sp)
    512c:	18005526 	beq	r3,zero,5284 <___svfprintf_internal_r+0xa6c>
    5130:	dac02d17 	ldw	r11,180(sp)
    5134:	14c00017 	ldw	r19,0(r2)
    5138:	17000117 	ldw	fp,4(r2)
    513c:	5ac00204 	addi	r11,r11,8
    5140:	dac02d15 	stw	r11,180(sp)
    5144:	00800044 	movi	r2,1
    5148:	9f06b03a 	or	r3,r19,fp
    514c:	d8002785 	stb	zero,158(sp)
    5150:	da403215 	stw	r9,200(sp)
    5154:	002b883a 	mov	r21,zero
    5158:	003eb406 	br	4c2c <__alt_mem_Flash_flash_data+0xf4004c2c>
    515c:	030000b4 	movhi	r12,2
    5160:	63169c04 	addi	r12,r12,23152
    5164:	d8c02915 	stw	r3,164(sp)
    5168:	d9802785 	stb	r6,158(sp)
    516c:	db003b15 	stw	r12,236(sp)
    5170:	88c0080c 	andi	r3,r17,32
    5174:	d8802d17 	ldw	r2,180(sp)
    5178:	18005626 	beq	r3,zero,52d4 <___svfprintf_internal_r+0xabc>
    517c:	dac02d17 	ldw	r11,180(sp)
    5180:	14c00017 	ldw	r19,0(r2)
    5184:	17000117 	ldw	fp,4(r2)
    5188:	5ac00204 	addi	r11,r11,8
    518c:	dac02d15 	stw	r11,180(sp)
    5190:	8880004c 	andi	r2,r17,1
    5194:	10029326 	beq	r2,zero,5be4 <___svfprintf_internal_r+0x13cc>
    5198:	9f06b03a 	or	r3,r19,fp
    519c:	18033526 	beq	r3,zero,5e74 <___svfprintf_internal_r+0x165c>
    51a0:	00800c04 	movi	r2,48
    51a4:	d8802705 	stb	r2,156(sp)
    51a8:	dc002745 	stb	r16,157(sp)
    51ac:	8c400094 	ori	r17,r17,2
    51b0:	00800084 	movi	r2,2
    51b4:	003fe506 	br	514c <__alt_mem_Flash_flash_data+0xf400514c>
    51b8:	1805883a 	mov	r2,r3
    51bc:	d8002e15 	stw	zero,184(sp)
    51c0:	82fff404 	addi	r11,r16,-48
    51c4:	0019883a 	mov	r12,zero
    51c8:	14000007 	ldb	r16,0(r2)
    51cc:	630002a4 	muli	r12,r12,10
    51d0:	18c00044 	addi	r3,r3,1
    51d4:	1805883a 	mov	r2,r3
    51d8:	62d9883a 	add	r12,r12,r11
    51dc:	82fff404 	addi	r11,r16,-48
    51e0:	2afff92e 	bgeu	r5,r11,51c8 <__alt_mem_Flash_flash_data+0xf40051c8>
    51e4:	db002e15 	stw	r12,184(sp)
    51e8:	003de206 	br	4974 <__alt_mem_Flash_flash_data+0xf4004974>
    51ec:	8c400814 	ori	r17,r17,32
    51f0:	1805883a 	mov	r2,r3
    51f4:	1c000007 	ldb	r16,0(r3)
    51f8:	003ddd06 	br	4970 <__alt_mem_Flash_flash_data+0xf4004970>
    51fc:	dac02d17 	ldw	r11,180(sp)
    5200:	db002d17 	ldw	r12,180(sp)
    5204:	d8c02915 	stw	r3,164(sp)
    5208:	5ac00017 	ldw	r11,0(r11)
    520c:	d8002785 	stb	zero,158(sp)
    5210:	64c00104 	addi	r19,r12,4
    5214:	dac03115 	stw	r11,196(sp)
    5218:	58048126 	beq	r11,zero,6420 <___svfprintf_internal_r+0x1c08>
    521c:	d9003117 	ldw	r4,196(sp)
    5220:	48041716 	blt	r9,zero,6280 <___svfprintf_internal_r+0x1a68>
    5224:	480d883a 	mov	r6,r9
    5228:	000b883a 	mov	r5,zero
    522c:	da004015 	stw	r8,256(sp)
    5230:	da403f15 	stw	r9,252(sp)
    5234:	000bd240 	call	bd24 <memchr>
    5238:	da004017 	ldw	r8,256(sp)
    523c:	da403f17 	ldw	r9,252(sp)
    5240:	1004db26 	beq	r2,zero,65b0 <___svfprintf_internal_r+0x1d98>
    5244:	d8c03117 	ldw	r3,196(sp)
    5248:	10e5c83a 	sub	r18,r2,r3
    524c:	4c80010e 	bge	r9,r18,5254 <___svfprintf_internal_r+0xa3c>
    5250:	4825883a 	mov	r18,r9
    5254:	9005883a 	mov	r2,r18
    5258:	90040e16 	blt	r18,zero,6294 <___svfprintf_internal_r+0x1a7c>
    525c:	dd402783 	ldbu	r21,158(sp)
    5260:	d8802a15 	stw	r2,168(sp)
    5264:	dcc02d15 	stw	r19,180(sp)
    5268:	d8003215 	stw	zero,200(sp)
    526c:	d8003415 	stw	zero,208(sp)
    5270:	003e9506 	br	4cc8 <__alt_mem_Flash_flash_data+0xf4004cc8>
    5274:	d8c02915 	stw	r3,164(sp)
    5278:	88c0080c 	andi	r3,r17,32
    527c:	d8802d17 	ldw	r2,180(sp)
    5280:	183fab1e 	bne	r3,zero,5130 <__alt_mem_Flash_flash_data+0xf4005130>
    5284:	88c0040c 	andi	r3,r17,16
    5288:	1802681e 	bne	r3,zero,5c2c <___svfprintf_internal_r+0x1414>
    528c:	88c0100c 	andi	r3,r17,64
    5290:	18026626 	beq	r3,zero,5c2c <___svfprintf_internal_r+0x1414>
    5294:	dac02d17 	ldw	r11,180(sp)
    5298:	14c0000b 	ldhu	r19,0(r2)
    529c:	0039883a 	mov	fp,zero
    52a0:	5ac00104 	addi	r11,r11,4
    52a4:	dac02d15 	stw	r11,180(sp)
    52a8:	00800044 	movi	r2,1
    52ac:	9807883a 	mov	r3,r19
    52b0:	003fa606 	br	514c <__alt_mem_Flash_flash_data+0xf400514c>
    52b4:	008000b4 	movhi	r2,2
    52b8:	1096a104 	addi	r2,r2,23172
    52bc:	d8c02915 	stw	r3,164(sp)
    52c0:	d8803b15 	stw	r2,236(sp)
    52c4:	d9802785 	stb	r6,158(sp)
    52c8:	88c0080c 	andi	r3,r17,32
    52cc:	d8802d17 	ldw	r2,180(sp)
    52d0:	183faa1e 	bne	r3,zero,517c <__alt_mem_Flash_flash_data+0xf400517c>
    52d4:	88c0040c 	andi	r3,r17,16
    52d8:	1802e826 	beq	r3,zero,5e7c <___svfprintf_internal_r+0x1664>
    52dc:	db002d17 	ldw	r12,180(sp)
    52e0:	14c00017 	ldw	r19,0(r2)
    52e4:	0039883a 	mov	fp,zero
    52e8:	63000104 	addi	r12,r12,4
    52ec:	db002d15 	stw	r12,180(sp)
    52f0:	003fa706 	br	5190 <__alt_mem_Flash_flash_data+0xf4005190>
    52f4:	30803fcc 	andi	r2,r6,255
    52f8:	1080201c 	xori	r2,r2,128
    52fc:	10bfe004 	addi	r2,r2,-128
    5300:	1002d91e 	bne	r2,zero,5e68 <___svfprintf_internal_r+0x1650>
    5304:	1805883a 	mov	r2,r3
    5308:	01800804 	movi	r6,32
    530c:	1c000007 	ldb	r16,0(r3)
    5310:	003d9706 	br	4970 <__alt_mem_Flash_flash_data+0xf4004970>
    5314:	8c400054 	ori	r17,r17,1
    5318:	1805883a 	mov	r2,r3
    531c:	1c000007 	ldb	r16,0(r3)
    5320:	003d9306 	br	4970 <__alt_mem_Flash_flash_data+0xf4004970>
    5324:	dac02d17 	ldw	r11,180(sp)
    5328:	db002d17 	ldw	r12,180(sp)
    532c:	5ac00017 	ldw	r11,0(r11)
    5330:	dac02e15 	stw	r11,184(sp)
    5334:	62c00104 	addi	r11,r12,4
    5338:	db002e17 	ldw	r12,184(sp)
    533c:	60033e16 	blt	r12,zero,6038 <___svfprintf_internal_r+0x1820>
    5340:	dac02d15 	stw	r11,180(sp)
    5344:	1805883a 	mov	r2,r3
    5348:	1c000007 	ldb	r16,0(r3)
    534c:	003d8806 	br	4970 <__alt_mem_Flash_flash_data+0xf4004970>
    5350:	1805883a 	mov	r2,r3
    5354:	01800ac4 	movi	r6,43
    5358:	1c000007 	ldb	r16,0(r3)
    535c:	003d8406 	br	4970 <__alt_mem_Flash_flash_data+0xf4004970>
    5360:	8c401014 	ori	r17,r17,64
    5364:	1805883a 	mov	r2,r3
    5368:	1c000007 	ldb	r16,0(r3)
    536c:	003d8006 	br	4970 <__alt_mem_Flash_flash_data+0xf4004970>
    5370:	1c000007 	ldb	r16,0(r3)
    5374:	81c33626 	beq	r16,r7,6050 <___svfprintf_internal_r+0x1838>
    5378:	8c400414 	ori	r17,r17,16
    537c:	1805883a 	mov	r2,r3
    5380:	003d7b06 	br	4970 <__alt_mem_Flash_flash_data+0xf4004970>
    5384:	d8c02915 	stw	r3,164(sp)
    5388:	d9802785 	stb	r6,158(sp)
    538c:	8880080c 	andi	r2,r17,32
    5390:	1002c226 	beq	r2,zero,5e9c <___svfprintf_internal_r+0x1684>
    5394:	db002d17 	ldw	r12,180(sp)
    5398:	dac03017 	ldw	r11,192(sp)
    539c:	60800017 	ldw	r2,0(r12)
    53a0:	5807d7fa 	srai	r3,r11,31
    53a4:	63000104 	addi	r12,r12,4
    53a8:	db002d15 	stw	r12,180(sp)
    53ac:	12c00015 	stw	r11,0(r2)
    53b0:	10c00115 	stw	r3,4(r2)
    53b4:	003d4406 	br	48c8 <__alt_mem_Flash_flash_data+0xf40048c8>
    53b8:	db002d17 	ldw	r12,180(sp)
    53bc:	00800c04 	movi	r2,48
    53c0:	d8802705 	stb	r2,156(sp)
    53c4:	64c00017 	ldw	r19,0(r12)
    53c8:	00801e04 	movi	r2,120
    53cc:	d8802745 	stb	r2,157(sp)
    53d0:	008000b4 	movhi	r2,2
    53d4:	1096a104 	addi	r2,r2,23172
    53d8:	63000104 	addi	r12,r12,4
    53dc:	d8c02915 	stw	r3,164(sp)
    53e0:	d8803b15 	stw	r2,236(sp)
    53e4:	0039883a 	mov	fp,zero
    53e8:	8c400094 	ori	r17,r17,2
    53ec:	db002d15 	stw	r12,180(sp)
    53f0:	00800084 	movi	r2,2
    53f4:	04001e04 	movi	r16,120
    53f8:	9807883a 	mov	r3,r19
    53fc:	003f5306 	br	514c <__alt_mem_Flash_flash_data+0xf400514c>
    5400:	db002d17 	ldw	r12,180(sp)
    5404:	d8c02915 	stw	r3,164(sp)
    5408:	dac01404 	addi	r11,sp,80
    540c:	60800017 	ldw	r2,0(r12)
    5410:	00c00044 	movi	r3,1
    5414:	63000104 	addi	r12,r12,4
    5418:	d8801405 	stb	r2,80(sp)
    541c:	d8c02a15 	stw	r3,168(sp)
    5420:	d8002785 	stb	zero,158(sp)
    5424:	db002d15 	stw	r12,180(sp)
    5428:	1825883a 	mov	r18,r3
    542c:	d8003215 	stw	zero,200(sp)
    5430:	d8003415 	stw	zero,208(sp)
    5434:	dac03115 	stw	r11,196(sp)
    5438:	0005883a 	mov	r2,zero
    543c:	003e2906 	br	4ce4 <__alt_mem_Flash_flash_data+0xf4004ce4>
    5440:	d8c02915 	stw	r3,164(sp)
    5444:	d9802785 	stb	r6,158(sp)
    5448:	8880080c 	andi	r2,r17,32
    544c:	d8c02d17 	ldw	r3,180(sp)
    5450:	103deb1e 	bne	r2,zero,4c00 <__alt_mem_Flash_flash_data+0xf4004c00>
    5454:	8880040c 	andi	r2,r17,16
    5458:	1001e51e 	bne	r2,zero,5bf0 <___svfprintf_internal_r+0x13d8>
    545c:	8880100c 	andi	r2,r17,64
    5460:	1001e326 	beq	r2,zero,5bf0 <___svfprintf_internal_r+0x13d8>
    5464:	1cc0000f 	ldh	r19,0(r3)
    5468:	db002d17 	ldw	r12,180(sp)
    546c:	9839d7fa 	srai	fp,r19,31
    5470:	63000104 	addi	r12,r12,4
    5474:	db002d15 	stw	r12,180(sp)
    5478:	e005883a 	mov	r2,fp
    547c:	103de70e 	bge	r2,zero,4c1c <__alt_mem_Flash_flash_data+0xf4004c1c>
    5480:	04e7c83a 	sub	r19,zero,r19
    5484:	9804c03a 	cmpne	r2,r19,zero
    5488:	0739c83a 	sub	fp,zero,fp
    548c:	e0b9c83a 	sub	fp,fp,r2
    5490:	05400b44 	movi	r21,45
    5494:	dd402785 	stb	r21,158(sp)
    5498:	da403215 	stw	r9,200(sp)
    549c:	00800044 	movi	r2,1
    54a0:	9f06b03a 	or	r3,r19,fp
    54a4:	003de106 	br	4c2c <__alt_mem_Flash_flash_data+0xf4004c2c>
    54a8:	8c400414 	ori	r17,r17,16
    54ac:	d8c02915 	stw	r3,164(sp)
    54b0:	8880080c 	andi	r2,r17,32
    54b4:	10000b26 	beq	r2,zero,54e4 <___svfprintf_internal_r+0xccc>
    54b8:	db002d17 	ldw	r12,180(sp)
    54bc:	0005883a 	mov	r2,zero
    54c0:	64c00017 	ldw	r19,0(r12)
    54c4:	67000117 	ldw	fp,4(r12)
    54c8:	63000204 	addi	r12,r12,8
    54cc:	db002d15 	stw	r12,180(sp)
    54d0:	9f06b03a 	or	r3,r19,fp
    54d4:	003f1d06 	br	514c <__alt_mem_Flash_flash_data+0xf400514c>
    54d8:	d8c02915 	stw	r3,164(sp)
    54dc:	8880080c 	andi	r2,r17,32
    54e0:	103ff51e 	bne	r2,zero,54b8 <__alt_mem_Flash_flash_data+0xf40054b8>
    54e4:	8880040c 	andi	r2,r17,16
    54e8:	1001c81e 	bne	r2,zero,5c0c <___svfprintf_internal_r+0x13f4>
    54ec:	8880100c 	andi	r2,r17,64
    54f0:	1001c626 	beq	r2,zero,5c0c <___svfprintf_internal_r+0x13f4>
    54f4:	db002d17 	ldw	r12,180(sp)
    54f8:	0039883a 	mov	fp,zero
    54fc:	0005883a 	mov	r2,zero
    5500:	64c0000b 	ldhu	r19,0(r12)
    5504:	63000104 	addi	r12,r12,4
    5508:	db002d15 	stw	r12,180(sp)
    550c:	9807883a 	mov	r3,r19
    5510:	003f0e06 	br	514c <__alt_mem_Flash_flash_data+0xf400514c>
    5514:	d8c02915 	stw	r3,164(sp)
    5518:	d9802785 	stb	r6,158(sp)
    551c:	803d8026 	beq	r16,zero,4b20 <__alt_mem_Flash_flash_data+0xf4004b20>
    5520:	02c00044 	movi	r11,1
    5524:	db001404 	addi	r12,sp,80
    5528:	dac02a15 	stw	r11,168(sp)
    552c:	dc001405 	stb	r16,80(sp)
    5530:	d8002785 	stb	zero,158(sp)
    5534:	5825883a 	mov	r18,r11
    5538:	d8003215 	stw	zero,200(sp)
    553c:	d8003415 	stw	zero,208(sp)
    5540:	db003115 	stw	r12,196(sp)
    5544:	0005883a 	mov	r2,zero
    5548:	003de606 	br	4ce4 <__alt_mem_Flash_flash_data+0xf4004ce4>
    554c:	d8c02017 	ldw	r3,128(sp)
    5550:	003e2706 	br	4df0 <__alt_mem_Flash_flash_data+0xf4004df0>
    5554:	10803fcc 	andi	r2,r2,255
    5558:	00c00044 	movi	r3,1
    555c:	10fdbb1e 	bne	r2,r3,4c4c <__alt_mem_Flash_flash_data+0xf4004c4c>
    5560:	e000021e 	bne	fp,zero,556c <___svfprintf_internal_r+0xd54>
    5564:	00800244 	movi	r2,9
    5568:	14c01f2e 	bgeu	r2,r19,55e8 <___svfprintf_internal_r+0xdd0>
    556c:	dc002a15 	stw	r16,168(sp)
    5570:	dc402b15 	stw	r17,172(sp)
    5574:	9821883a 	mov	r16,r19
    5578:	e023883a 	mov	r17,fp
    557c:	b025883a 	mov	r18,r22
    5580:	4827883a 	mov	r19,r9
    5584:	4039883a 	mov	fp,r8
    5588:	8009883a 	mov	r4,r16
    558c:	880b883a 	mov	r5,r17
    5590:	01800284 	movi	r6,10
    5594:	000f883a 	mov	r7,zero
    5598:	0010f3c0 	call	10f3c <__umoddi3>
    559c:	10800c04 	addi	r2,r2,48
    55a0:	94bfffc4 	addi	r18,r18,-1
    55a4:	8009883a 	mov	r4,r16
    55a8:	880b883a 	mov	r5,r17
    55ac:	01800284 	movi	r6,10
    55b0:	000f883a 	mov	r7,zero
    55b4:	90800005 	stb	r2,0(r18)
    55b8:	001097c0 	call	1097c <__udivdi3>
    55bc:	1021883a 	mov	r16,r2
    55c0:	10c4b03a 	or	r2,r2,r3
    55c4:	1823883a 	mov	r17,r3
    55c8:	103fef1e 	bne	r2,zero,5588 <__alt_mem_Flash_flash_data+0xf4005588>
    55cc:	dc803115 	stw	r18,196(sp)
    55d0:	dc002a17 	ldw	r16,168(sp)
    55d4:	dc402b17 	ldw	r17,172(sp)
    55d8:	9813883a 	mov	r9,r19
    55dc:	e011883a 	mov	r8,fp
    55e0:	b4a5c83a 	sub	r18,r22,r18
    55e4:	003db306 	br	4cb4 <__alt_mem_Flash_flash_data+0xf4004cb4>
    55e8:	9cc00c04 	addi	r19,r19,48
    55ec:	db001dc4 	addi	r12,sp,119
    55f0:	dcc01dc5 	stb	r19,119(sp)
    55f4:	dc803d17 	ldw	r18,244(sp)
    55f8:	db003115 	stw	r12,196(sp)
    55fc:	003dad06 	br	4cb4 <__alt_mem_Flash_flash_data+0xf4004cb4>
    5600:	00801944 	movi	r2,101
    5604:	14008d0e 	bge	r2,r16,583c <___svfprintf_internal_r+0x1024>
    5608:	d9003717 	ldw	r4,220(sp)
    560c:	d9403817 	ldw	r5,224(sp)
    5610:	000d883a 	mov	r6,zero
    5614:	000f883a 	mov	r7,zero
    5618:	d8c03e15 	stw	r3,248(sp)
    561c:	da004015 	stw	r8,256(sp)
    5620:	00127600 	call	12760 <__eqdf2>
    5624:	d8c03e17 	ldw	r3,248(sp)
    5628:	da004017 	ldw	r8,256(sp)
    562c:	1000fd1e 	bne	r2,zero,5a24 <___svfprintf_internal_r+0x120c>
    5630:	d8801f17 	ldw	r2,124(sp)
    5634:	010000b4 	movhi	r4,2
    5638:	2116a804 	addi	r4,r4,23200
    563c:	18c00044 	addi	r3,r3,1
    5640:	10800044 	addi	r2,r2,1
    5644:	41000015 	stw	r4,0(r8)
    5648:	01000044 	movi	r4,1
    564c:	41000115 	stw	r4,4(r8)
    5650:	d8c02015 	stw	r3,128(sp)
    5654:	d8801f15 	stw	r2,124(sp)
    5658:	010001c4 	movi	r4,7
    565c:	20823316 	blt	r4,r2,5f2c <___svfprintf_internal_r+0x1714>
    5660:	42000204 	addi	r8,r8,8
    5664:	d8802617 	ldw	r2,152(sp)
    5668:	dac03317 	ldw	r11,204(sp)
    566c:	12c00216 	blt	r2,r11,5678 <___svfprintf_internal_r+0xe60>
    5670:	8880004c 	andi	r2,r17,1
    5674:	103e3d26 	beq	r2,zero,4f6c <__alt_mem_Flash_flash_data+0xf4004f6c>
    5678:	db003917 	ldw	r12,228(sp)
    567c:	d8801f17 	ldw	r2,124(sp)
    5680:	dac03517 	ldw	r11,212(sp)
    5684:	1b07883a 	add	r3,r3,r12
    5688:	10800044 	addi	r2,r2,1
    568c:	42c00015 	stw	r11,0(r8)
    5690:	43000115 	stw	r12,4(r8)
    5694:	d8c02015 	stw	r3,128(sp)
    5698:	d8801f15 	stw	r2,124(sp)
    569c:	010001c4 	movi	r4,7
    56a0:	20826f16 	blt	r4,r2,6060 <___svfprintf_internal_r+0x1848>
    56a4:	42000204 	addi	r8,r8,8
    56a8:	db003317 	ldw	r12,204(sp)
    56ac:	643fffc4 	addi	r16,r12,-1
    56b0:	043e2e0e 	bge	zero,r16,4f6c <__alt_mem_Flash_flash_data+0xf4004f6c>
    56b4:	04800404 	movi	r18,16
    56b8:	d8801f17 	ldw	r2,124(sp)
    56bc:	9400a00e 	bge	r18,r16,5940 <___svfprintf_internal_r+0x1128>
    56c0:	014000b4 	movhi	r5,2
    56c4:	2956a884 	addi	r5,r5,23202
    56c8:	d9402b15 	stw	r5,172(sp)
    56cc:	054001c4 	movi	r21,7
    56d0:	dcc02f17 	ldw	r19,188(sp)
    56d4:	00000306 	br	56e4 <___svfprintf_internal_r+0xecc>
    56d8:	42000204 	addi	r8,r8,8
    56dc:	843ffc04 	addi	r16,r16,-16
    56e0:	94009a0e 	bge	r18,r16,594c <___svfprintf_internal_r+0x1134>
    56e4:	18c00404 	addi	r3,r3,16
    56e8:	10800044 	addi	r2,r2,1
    56ec:	45000015 	stw	r20,0(r8)
    56f0:	44800115 	stw	r18,4(r8)
    56f4:	d8c02015 	stw	r3,128(sp)
    56f8:	d8801f15 	stw	r2,124(sp)
    56fc:	a8bff60e 	bge	r21,r2,56d8 <__alt_mem_Flash_flash_data+0xf40056d8>
    5700:	9809883a 	mov	r4,r19
    5704:	b80b883a 	mov	r5,r23
    5708:	b00d883a 	mov	r6,r22
    570c:	000d9bc0 	call	d9bc <__ssprint_r>
    5710:	103d091e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    5714:	d8c02017 	ldw	r3,128(sp)
    5718:	d8801f17 	ldw	r2,124(sp)
    571c:	da000404 	addi	r8,sp,16
    5720:	003fee06 	br	56dc <__alt_mem_Flash_flash_data+0xf40056dc>
    5724:	dac02e17 	ldw	r11,184(sp)
    5728:	db002a17 	ldw	r12,168(sp)
    572c:	5b2bc83a 	sub	r21,r11,r12
    5730:	057dcd0e 	bge	zero,r21,4e68 <__alt_mem_Flash_flash_data+0xf4004e68>
    5734:	07000404 	movi	fp,16
    5738:	d8801f17 	ldw	r2,124(sp)
    573c:	e5435d0e 	bge	fp,r21,64b4 <___svfprintf_internal_r+0x1c9c>
    5740:	014000b4 	movhi	r5,2
    5744:	a809883a 	mov	r4,r21
    5748:	2956a884 	addi	r5,r5,23202
    574c:	dc002c15 	stw	r16,176(sp)
    5750:	902b883a 	mov	r21,r18
    5754:	d9402b15 	stw	r5,172(sp)
    5758:	8825883a 	mov	r18,r17
    575c:	04c001c4 	movi	r19,7
    5760:	dc002f17 	ldw	r16,188(sp)
    5764:	2023883a 	mov	r17,r4
    5768:	00000306 	br	5778 <___svfprintf_internal_r+0xf60>
    576c:	8c7ffc04 	addi	r17,r17,-16
    5770:	42000204 	addi	r8,r8,8
    5774:	e440110e 	bge	fp,r17,57bc <___svfprintf_internal_r+0xfa4>
    5778:	18c00404 	addi	r3,r3,16
    577c:	10800044 	addi	r2,r2,1
    5780:	45000015 	stw	r20,0(r8)
    5784:	47000115 	stw	fp,4(r8)
    5788:	d8c02015 	stw	r3,128(sp)
    578c:	d8801f15 	stw	r2,124(sp)
    5790:	98bff60e 	bge	r19,r2,576c <__alt_mem_Flash_flash_data+0xf400576c>
    5794:	8009883a 	mov	r4,r16
    5798:	b80b883a 	mov	r5,r23
    579c:	b00d883a 	mov	r6,r22
    57a0:	000d9bc0 	call	d9bc <__ssprint_r>
    57a4:	103ce41e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    57a8:	8c7ffc04 	addi	r17,r17,-16
    57ac:	d8c02017 	ldw	r3,128(sp)
    57b0:	d8801f17 	ldw	r2,124(sp)
    57b4:	da000404 	addi	r8,sp,16
    57b8:	e47fef16 	blt	fp,r17,5778 <__alt_mem_Flash_flash_data+0xf4005778>
    57bc:	dc002c17 	ldw	r16,176(sp)
    57c0:	8809883a 	mov	r4,r17
    57c4:	9023883a 	mov	r17,r18
    57c8:	a825883a 	mov	r18,r21
    57cc:	202b883a 	mov	r21,r4
    57d0:	dac02b17 	ldw	r11,172(sp)
    57d4:	1d47883a 	add	r3,r3,r21
    57d8:	10800044 	addi	r2,r2,1
    57dc:	42c00015 	stw	r11,0(r8)
    57e0:	45400115 	stw	r21,4(r8)
    57e4:	d8c02015 	stw	r3,128(sp)
    57e8:	d8801f15 	stw	r2,124(sp)
    57ec:	010001c4 	movi	r4,7
    57f0:	20818016 	blt	r4,r2,5df4 <___svfprintf_internal_r+0x15dc>
    57f4:	42000204 	addi	r8,r8,8
    57f8:	003d9b06 	br	4e68 <__alt_mem_Flash_flash_data+0xf4004e68>
    57fc:	d9403b17 	ldw	r5,236(sp)
    5800:	b007883a 	mov	r3,r22
    5804:	988003cc 	andi	r2,r19,15
    5808:	e008973a 	slli	r4,fp,28
    580c:	2885883a 	add	r2,r5,r2
    5810:	9826d13a 	srli	r19,r19,4
    5814:	10800003 	ldbu	r2,0(r2)
    5818:	e038d13a 	srli	fp,fp,4
    581c:	18ffffc4 	addi	r3,r3,-1
    5820:	24e6b03a 	or	r19,r4,r19
    5824:	18800005 	stb	r2,0(r3)
    5828:	9f04b03a 	or	r2,r19,fp
    582c:	103ff51e 	bne	r2,zero,5804 <__alt_mem_Flash_flash_data+0xf4005804>
    5830:	d8c03115 	stw	r3,196(sp)
    5834:	b0e5c83a 	sub	r18,r22,r3
    5838:	003d1e06 	br	4cb4 <__alt_mem_Flash_flash_data+0xf4004cb4>
    583c:	db003317 	ldw	r12,204(sp)
    5840:	00800044 	movi	r2,1
    5844:	18c00044 	addi	r3,r3,1
    5848:	13014b0e 	bge	r2,r12,5d78 <___svfprintf_internal_r+0x1560>
    584c:	dc001f17 	ldw	r16,124(sp)
    5850:	dac03117 	ldw	r11,196(sp)
    5854:	00800044 	movi	r2,1
    5858:	84000044 	addi	r16,r16,1
    585c:	40800115 	stw	r2,4(r8)
    5860:	42c00015 	stw	r11,0(r8)
    5864:	d8c02015 	stw	r3,128(sp)
    5868:	dc001f15 	stw	r16,124(sp)
    586c:	008001c4 	movi	r2,7
    5870:	14014e16 	blt	r2,r16,5dac <___svfprintf_internal_r+0x1594>
    5874:	42000204 	addi	r8,r8,8
    5878:	db003917 	ldw	r12,228(sp)
    587c:	dac03517 	ldw	r11,212(sp)
    5880:	84000044 	addi	r16,r16,1
    5884:	1b07883a 	add	r3,r3,r12
    5888:	42c00015 	stw	r11,0(r8)
    588c:	43000115 	stw	r12,4(r8)
    5890:	d8c02015 	stw	r3,128(sp)
    5894:	dc001f15 	stw	r16,124(sp)
    5898:	008001c4 	movi	r2,7
    589c:	14014c16 	blt	r2,r16,5dd0 <___svfprintf_internal_r+0x15b8>
    58a0:	44800204 	addi	r18,r8,8
    58a4:	d9003717 	ldw	r4,220(sp)
    58a8:	d9403817 	ldw	r5,224(sp)
    58ac:	000d883a 	mov	r6,zero
    58b0:	000f883a 	mov	r7,zero
    58b4:	d8c03e15 	stw	r3,248(sp)
    58b8:	00127600 	call	12760 <__eqdf2>
    58bc:	d8c03e17 	ldw	r3,248(sp)
    58c0:	db003317 	ldw	r12,204(sp)
    58c4:	10009526 	beq	r2,zero,5b1c <___svfprintf_internal_r+0x1304>
    58c8:	dac03117 	ldw	r11,196(sp)
    58cc:	60bfffc4 	addi	r2,r12,-1
    58d0:	1887883a 	add	r3,r3,r2
    58d4:	59000044 	addi	r4,r11,1
    58d8:	84000044 	addi	r16,r16,1
    58dc:	90800115 	stw	r2,4(r18)
    58e0:	91000015 	stw	r4,0(r18)
    58e4:	d8c02015 	stw	r3,128(sp)
    58e8:	dc001f15 	stw	r16,124(sp)
    58ec:	008001c4 	movi	r2,7
    58f0:	1400b316 	blt	r2,r16,5bc0 <___svfprintf_internal_r+0x13a8>
    58f4:	94800204 	addi	r18,r18,8
    58f8:	dac03a17 	ldw	r11,232(sp)
    58fc:	dd4022c4 	addi	r21,sp,139
    5900:	84000044 	addi	r16,r16,1
    5904:	1ac7883a 	add	r3,r3,r11
    5908:	95400015 	stw	r21,0(r18)
    590c:	92c00115 	stw	r11,4(r18)
    5910:	d8c02015 	stw	r3,128(sp)
    5914:	dc001f15 	stw	r16,124(sp)
    5918:	008001c4 	movi	r2,7
    591c:	14001416 	blt	r2,r16,5970 <___svfprintf_internal_r+0x1158>
    5920:	92000204 	addi	r8,r18,8
    5924:	003d9106 	br	4f6c <__alt_mem_Flash_flash_data+0xf4004f6c>
    5928:	d9002f17 	ldw	r4,188(sp)
    592c:	b80b883a 	mov	r5,r23
    5930:	b00d883a 	mov	r6,r22
    5934:	000d9bc0 	call	d9bc <__ssprint_r>
    5938:	103dc826 	beq	r2,zero,505c <__alt_mem_Flash_flash_data+0xf400505c>
    593c:	003c7e06 	br	4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    5940:	010000b4 	movhi	r4,2
    5944:	2116a884 	addi	r4,r4,23202
    5948:	d9002b15 	stw	r4,172(sp)
    594c:	dac02b17 	ldw	r11,172(sp)
    5950:	1c07883a 	add	r3,r3,r16
    5954:	44000115 	stw	r16,4(r8)
    5958:	42c00015 	stw	r11,0(r8)
    595c:	10800044 	addi	r2,r2,1
    5960:	d8c02015 	stw	r3,128(sp)
    5964:	d8801f15 	stw	r2,124(sp)
    5968:	010001c4 	movi	r4,7
    596c:	20bd7e0e 	bge	r4,r2,4f68 <__alt_mem_Flash_flash_data+0xf4004f68>
    5970:	d9002f17 	ldw	r4,188(sp)
    5974:	b80b883a 	mov	r5,r23
    5978:	b00d883a 	mov	r6,r22
    597c:	000d9bc0 	call	d9bc <__ssprint_r>
    5980:	103c6d1e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    5984:	d8c02017 	ldw	r3,128(sp)
    5988:	da000404 	addi	r8,sp,16
    598c:	003d7706 	br	4f6c <__alt_mem_Flash_flash_data+0xf4004f6c>
    5990:	10803fcc 	andi	r2,r2,255
    5994:	1000201e 	bne	r2,zero,5a18 <___svfprintf_internal_r+0x1200>
    5998:	8880004c 	andi	r2,r17,1
    599c:	10001e26 	beq	r2,zero,5a18 <___svfprintf_internal_r+0x1200>
    59a0:	00800c04 	movi	r2,48
    59a4:	d8c01dc4 	addi	r3,sp,119
    59a8:	d8801dc5 	stb	r2,119(sp)
    59ac:	dc803d17 	ldw	r18,244(sp)
    59b0:	d8c03115 	stw	r3,196(sp)
    59b4:	003cbf06 	br	4cb4 <__alt_mem_Flash_flash_data+0xf4004cb4>
    59b8:	d9002f17 	ldw	r4,188(sp)
    59bc:	b80b883a 	mov	r5,r23
    59c0:	b00d883a 	mov	r6,r22
    59c4:	000d9bc0 	call	d9bc <__ssprint_r>
    59c8:	103c5b1e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    59cc:	d8c02017 	ldw	r3,128(sp)
    59d0:	da000404 	addi	r8,sp,16
    59d4:	003d5806 	br	4f38 <__alt_mem_Flash_flash_data+0xf4004f38>
    59d8:	d9002f17 	ldw	r4,188(sp)
    59dc:	b80b883a 	mov	r5,r23
    59e0:	b00d883a 	mov	r6,r22
    59e4:	000d9bc0 	call	d9bc <__ssprint_r>
    59e8:	103c531e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    59ec:	d8c02017 	ldw	r3,128(sp)
    59f0:	da000404 	addi	r8,sp,16
    59f4:	003d1906 	br	4e5c <__alt_mem_Flash_flash_data+0xf4004e5c>
    59f8:	d9002f17 	ldw	r4,188(sp)
    59fc:	b80b883a 	mov	r5,r23
    5a00:	b00d883a 	mov	r6,r22
    5a04:	000d9bc0 	call	d9bc <__ssprint_r>
    5a08:	103c4b1e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    5a0c:	d8c02017 	ldw	r3,128(sp)
    5a10:	da000404 	addi	r8,sp,16
    5a14:	003d0306 	br	4e24 <__alt_mem_Flash_flash_data+0xf4004e24>
    5a18:	0025883a 	mov	r18,zero
    5a1c:	dd803115 	stw	r22,196(sp)
    5a20:	003ca406 	br	4cb4 <__alt_mem_Flash_flash_data+0xf4004cb4>
    5a24:	dc002617 	ldw	r16,152(sp)
    5a28:	0401480e 	bge	zero,r16,5f4c <___svfprintf_internal_r+0x1734>
    5a2c:	db003117 	ldw	r12,196(sp)
    5a30:	dac03317 	ldw	r11,204(sp)
    5a34:	62e1883a 	add	r16,r12,r11
    5a38:	db003417 	ldw	r12,208(sp)
    5a3c:	5825883a 	mov	r18,r11
    5a40:	62c0010e 	bge	r12,r11,5a48 <___svfprintf_internal_r+0x1230>
    5a44:	6025883a 	mov	r18,r12
    5a48:	04800b0e 	bge	zero,r18,5a78 <___svfprintf_internal_r+0x1260>
    5a4c:	d8801f17 	ldw	r2,124(sp)
    5a50:	dac03117 	ldw	r11,196(sp)
    5a54:	1c87883a 	add	r3,r3,r18
    5a58:	10800044 	addi	r2,r2,1
    5a5c:	42c00015 	stw	r11,0(r8)
    5a60:	44800115 	stw	r18,4(r8)
    5a64:	d8c02015 	stw	r3,128(sp)
    5a68:	d8801f15 	stw	r2,124(sp)
    5a6c:	010001c4 	movi	r4,7
    5a70:	20823f16 	blt	r4,r2,6370 <___svfprintf_internal_r+0x1b58>
    5a74:	42000204 	addi	r8,r8,8
    5a78:	90023b16 	blt	r18,zero,6368 <___svfprintf_internal_r+0x1b50>
    5a7c:	db003417 	ldw	r12,208(sp)
    5a80:	64a5c83a 	sub	r18,r12,r18
    5a84:	0480780e 	bge	zero,r18,5c68 <___svfprintf_internal_r+0x1450>
    5a88:	05400404 	movi	r21,16
    5a8c:	d8801f17 	ldw	r2,124(sp)
    5a90:	ac81140e 	bge	r21,r18,5ee4 <___svfprintf_internal_r+0x16cc>
    5a94:	014000b4 	movhi	r5,2
    5a98:	2956a884 	addi	r5,r5,23202
    5a9c:	d9402b15 	stw	r5,172(sp)
    5aa0:	070001c4 	movi	fp,7
    5aa4:	dcc02f17 	ldw	r19,188(sp)
    5aa8:	00000306 	br	5ab8 <___svfprintf_internal_r+0x12a0>
    5aac:	42000204 	addi	r8,r8,8
    5ab0:	94bffc04 	addi	r18,r18,-16
    5ab4:	ac810e0e 	bge	r21,r18,5ef0 <___svfprintf_internal_r+0x16d8>
    5ab8:	18c00404 	addi	r3,r3,16
    5abc:	10800044 	addi	r2,r2,1
    5ac0:	45000015 	stw	r20,0(r8)
    5ac4:	45400115 	stw	r21,4(r8)
    5ac8:	d8c02015 	stw	r3,128(sp)
    5acc:	d8801f15 	stw	r2,124(sp)
    5ad0:	e0bff60e 	bge	fp,r2,5aac <__alt_mem_Flash_flash_data+0xf4005aac>
    5ad4:	9809883a 	mov	r4,r19
    5ad8:	b80b883a 	mov	r5,r23
    5adc:	b00d883a 	mov	r6,r22
    5ae0:	000d9bc0 	call	d9bc <__ssprint_r>
    5ae4:	103c141e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    5ae8:	d8c02017 	ldw	r3,128(sp)
    5aec:	d8801f17 	ldw	r2,124(sp)
    5af0:	da000404 	addi	r8,sp,16
    5af4:	003fee06 	br	5ab0 <__alt_mem_Flash_flash_data+0xf4005ab0>
    5af8:	d9002f17 	ldw	r4,188(sp)
    5afc:	b80b883a 	mov	r5,r23
    5b00:	b00d883a 	mov	r6,r22
    5b04:	000d9bc0 	call	d9bc <__ssprint_r>
    5b08:	103c0b1e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    5b0c:	d8c02017 	ldw	r3,128(sp)
    5b10:	d8802787 	ldb	r2,158(sp)
    5b14:	da000404 	addi	r8,sp,16
    5b18:	003cb506 	br	4df0 <__alt_mem_Flash_flash_data+0xf4004df0>
    5b1c:	657fffc4 	addi	r21,r12,-1
    5b20:	057f750e 	bge	zero,r21,58f8 <__alt_mem_Flash_flash_data+0xf40058f8>
    5b24:	07000404 	movi	fp,16
    5b28:	e542ed0e 	bge	fp,r21,66e0 <___svfprintf_internal_r+0x1ec8>
    5b2c:	010000b4 	movhi	r4,2
    5b30:	2116a884 	addi	r4,r4,23202
    5b34:	d9002b15 	stw	r4,172(sp)
    5b38:	01c001c4 	movi	r7,7
    5b3c:	dcc02f17 	ldw	r19,188(sp)
    5b40:	00000306 	br	5b50 <___svfprintf_internal_r+0x1338>
    5b44:	ad7ffc04 	addi	r21,r21,-16
    5b48:	94800204 	addi	r18,r18,8
    5b4c:	e540130e 	bge	fp,r21,5b9c <___svfprintf_internal_r+0x1384>
    5b50:	18c00404 	addi	r3,r3,16
    5b54:	84000044 	addi	r16,r16,1
    5b58:	95000015 	stw	r20,0(r18)
    5b5c:	97000115 	stw	fp,4(r18)
    5b60:	d8c02015 	stw	r3,128(sp)
    5b64:	dc001f15 	stw	r16,124(sp)
    5b68:	3c3ff60e 	bge	r7,r16,5b44 <__alt_mem_Flash_flash_data+0xf4005b44>
    5b6c:	9809883a 	mov	r4,r19
    5b70:	b80b883a 	mov	r5,r23
    5b74:	b00d883a 	mov	r6,r22
    5b78:	d9c03e15 	stw	r7,248(sp)
    5b7c:	000d9bc0 	call	d9bc <__ssprint_r>
    5b80:	d9c03e17 	ldw	r7,248(sp)
    5b84:	103bec1e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    5b88:	ad7ffc04 	addi	r21,r21,-16
    5b8c:	d8c02017 	ldw	r3,128(sp)
    5b90:	dc001f17 	ldw	r16,124(sp)
    5b94:	dc800404 	addi	r18,sp,16
    5b98:	e57fed16 	blt	fp,r21,5b50 <__alt_mem_Flash_flash_data+0xf4005b50>
    5b9c:	dac02b17 	ldw	r11,172(sp)
    5ba0:	1d47883a 	add	r3,r3,r21
    5ba4:	84000044 	addi	r16,r16,1
    5ba8:	92c00015 	stw	r11,0(r18)
    5bac:	95400115 	stw	r21,4(r18)
    5bb0:	d8c02015 	stw	r3,128(sp)
    5bb4:	dc001f15 	stw	r16,124(sp)
    5bb8:	008001c4 	movi	r2,7
    5bbc:	143f4d0e 	bge	r2,r16,58f4 <__alt_mem_Flash_flash_data+0xf40058f4>
    5bc0:	d9002f17 	ldw	r4,188(sp)
    5bc4:	b80b883a 	mov	r5,r23
    5bc8:	b00d883a 	mov	r6,r22
    5bcc:	000d9bc0 	call	d9bc <__ssprint_r>
    5bd0:	103bd91e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    5bd4:	d8c02017 	ldw	r3,128(sp)
    5bd8:	dc001f17 	ldw	r16,124(sp)
    5bdc:	dc800404 	addi	r18,sp,16
    5be0:	003f4506 	br	58f8 <__alt_mem_Flash_flash_data+0xf40058f8>
    5be4:	00800084 	movi	r2,2
    5be8:	9f06b03a 	or	r3,r19,fp
    5bec:	003d5706 	br	514c <__alt_mem_Flash_flash_data+0xf400514c>
    5bf0:	1cc00017 	ldw	r19,0(r3)
    5bf4:	dac02d17 	ldw	r11,180(sp)
    5bf8:	9839d7fa 	srai	fp,r19,31
    5bfc:	5ac00104 	addi	r11,r11,4
    5c00:	dac02d15 	stw	r11,180(sp)
    5c04:	e005883a 	mov	r2,fp
    5c08:	003c0306 	br	4c18 <__alt_mem_Flash_flash_data+0xf4004c18>
    5c0c:	dac02d17 	ldw	r11,180(sp)
    5c10:	0039883a 	mov	fp,zero
    5c14:	0005883a 	mov	r2,zero
    5c18:	5cc00017 	ldw	r19,0(r11)
    5c1c:	5ac00104 	addi	r11,r11,4
    5c20:	dac02d15 	stw	r11,180(sp)
    5c24:	9807883a 	mov	r3,r19
    5c28:	003d4806 	br	514c <__alt_mem_Flash_flash_data+0xf400514c>
    5c2c:	db002d17 	ldw	r12,180(sp)
    5c30:	14c00017 	ldw	r19,0(r2)
    5c34:	0039883a 	mov	fp,zero
    5c38:	63000104 	addi	r12,r12,4
    5c3c:	db002d15 	stw	r12,180(sp)
    5c40:	00800044 	movi	r2,1
    5c44:	9807883a 	mov	r3,r19
    5c48:	003d4006 	br	514c <__alt_mem_Flash_flash_data+0xf400514c>
    5c4c:	d9002f17 	ldw	r4,188(sp)
    5c50:	b80b883a 	mov	r5,r23
    5c54:	b00d883a 	mov	r6,r22
    5c58:	000d9bc0 	call	d9bc <__ssprint_r>
    5c5c:	103bb61e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    5c60:	d8c02017 	ldw	r3,128(sp)
    5c64:	da000404 	addi	r8,sp,16
    5c68:	db003117 	ldw	r12,196(sp)
    5c6c:	dac03417 	ldw	r11,208(sp)
    5c70:	d8802617 	ldw	r2,152(sp)
    5c74:	62e5883a 	add	r18,r12,r11
    5c78:	db003317 	ldw	r12,204(sp)
    5c7c:	13000216 	blt	r2,r12,5c88 <___svfprintf_internal_r+0x1470>
    5c80:	8900004c 	andi	r4,r17,1
    5c84:	20000c26 	beq	r4,zero,5cb8 <___svfprintf_internal_r+0x14a0>
    5c88:	dac03917 	ldw	r11,228(sp)
    5c8c:	d9001f17 	ldw	r4,124(sp)
    5c90:	db003517 	ldw	r12,212(sp)
    5c94:	1ac7883a 	add	r3,r3,r11
    5c98:	21000044 	addi	r4,r4,1
    5c9c:	43000015 	stw	r12,0(r8)
    5ca0:	42c00115 	stw	r11,4(r8)
    5ca4:	d8c02015 	stw	r3,128(sp)
    5ca8:	d9001f15 	stw	r4,124(sp)
    5cac:	014001c4 	movi	r5,7
    5cb0:	2901b716 	blt	r5,r4,6390 <___svfprintf_internal_r+0x1b78>
    5cb4:	42000204 	addi	r8,r8,8
    5cb8:	dac03317 	ldw	r11,204(sp)
    5cbc:	8489c83a 	sub	r4,r16,r18
    5cc0:	5885c83a 	sub	r2,r11,r2
    5cc4:	1021883a 	mov	r16,r2
    5cc8:	2080010e 	bge	r4,r2,5cd0 <___svfprintf_internal_r+0x14b8>
    5ccc:	2021883a 	mov	r16,r4
    5cd0:	04000a0e 	bge	zero,r16,5cfc <___svfprintf_internal_r+0x14e4>
    5cd4:	d9001f17 	ldw	r4,124(sp)
    5cd8:	1c07883a 	add	r3,r3,r16
    5cdc:	44800015 	stw	r18,0(r8)
    5ce0:	21000044 	addi	r4,r4,1
    5ce4:	44000115 	stw	r16,4(r8)
    5ce8:	d8c02015 	stw	r3,128(sp)
    5cec:	d9001f15 	stw	r4,124(sp)
    5cf0:	014001c4 	movi	r5,7
    5cf4:	2901bf16 	blt	r5,r4,63f4 <___svfprintf_internal_r+0x1bdc>
    5cf8:	42000204 	addi	r8,r8,8
    5cfc:	8001bb16 	blt	r16,zero,63ec <___svfprintf_internal_r+0x1bd4>
    5d00:	1421c83a 	sub	r16,r2,r16
    5d04:	043c990e 	bge	zero,r16,4f6c <__alt_mem_Flash_flash_data+0xf4004f6c>
    5d08:	04800404 	movi	r18,16
    5d0c:	d8801f17 	ldw	r2,124(sp)
    5d10:	943f0b0e 	bge	r18,r16,5940 <__alt_mem_Flash_flash_data+0xf4005940>
    5d14:	014000b4 	movhi	r5,2
    5d18:	2956a884 	addi	r5,r5,23202
    5d1c:	d9402b15 	stw	r5,172(sp)
    5d20:	054001c4 	movi	r21,7
    5d24:	dcc02f17 	ldw	r19,188(sp)
    5d28:	00000306 	br	5d38 <___svfprintf_internal_r+0x1520>
    5d2c:	42000204 	addi	r8,r8,8
    5d30:	843ffc04 	addi	r16,r16,-16
    5d34:	943f050e 	bge	r18,r16,594c <__alt_mem_Flash_flash_data+0xf400594c>
    5d38:	18c00404 	addi	r3,r3,16
    5d3c:	10800044 	addi	r2,r2,1
    5d40:	45000015 	stw	r20,0(r8)
    5d44:	44800115 	stw	r18,4(r8)
    5d48:	d8c02015 	stw	r3,128(sp)
    5d4c:	d8801f15 	stw	r2,124(sp)
    5d50:	a8bff60e 	bge	r21,r2,5d2c <__alt_mem_Flash_flash_data+0xf4005d2c>
    5d54:	9809883a 	mov	r4,r19
    5d58:	b80b883a 	mov	r5,r23
    5d5c:	b00d883a 	mov	r6,r22
    5d60:	000d9bc0 	call	d9bc <__ssprint_r>
    5d64:	103b741e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    5d68:	d8c02017 	ldw	r3,128(sp)
    5d6c:	d8801f17 	ldw	r2,124(sp)
    5d70:	da000404 	addi	r8,sp,16
    5d74:	003fee06 	br	5d30 <__alt_mem_Flash_flash_data+0xf4005d30>
    5d78:	8888703a 	and	r4,r17,r2
    5d7c:	203eb31e 	bne	r4,zero,584c <__alt_mem_Flash_flash_data+0xf400584c>
    5d80:	dc001f17 	ldw	r16,124(sp)
    5d84:	db003117 	ldw	r12,196(sp)
    5d88:	40800115 	stw	r2,4(r8)
    5d8c:	84000044 	addi	r16,r16,1
    5d90:	43000015 	stw	r12,0(r8)
    5d94:	d8c02015 	stw	r3,128(sp)
    5d98:	dc001f15 	stw	r16,124(sp)
    5d9c:	008001c4 	movi	r2,7
    5da0:	143f8716 	blt	r2,r16,5bc0 <__alt_mem_Flash_flash_data+0xf4005bc0>
    5da4:	44800204 	addi	r18,r8,8
    5da8:	003ed306 	br	58f8 <__alt_mem_Flash_flash_data+0xf40058f8>
    5dac:	d9002f17 	ldw	r4,188(sp)
    5db0:	b80b883a 	mov	r5,r23
    5db4:	b00d883a 	mov	r6,r22
    5db8:	000d9bc0 	call	d9bc <__ssprint_r>
    5dbc:	103b5e1e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    5dc0:	d8c02017 	ldw	r3,128(sp)
    5dc4:	dc001f17 	ldw	r16,124(sp)
    5dc8:	da000404 	addi	r8,sp,16
    5dcc:	003eaa06 	br	5878 <__alt_mem_Flash_flash_data+0xf4005878>
    5dd0:	d9002f17 	ldw	r4,188(sp)
    5dd4:	b80b883a 	mov	r5,r23
    5dd8:	b00d883a 	mov	r6,r22
    5ddc:	000d9bc0 	call	d9bc <__ssprint_r>
    5de0:	103b551e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    5de4:	d8c02017 	ldw	r3,128(sp)
    5de8:	dc001f17 	ldw	r16,124(sp)
    5dec:	dc800404 	addi	r18,sp,16
    5df0:	003eac06 	br	58a4 <__alt_mem_Flash_flash_data+0xf40058a4>
    5df4:	d9002f17 	ldw	r4,188(sp)
    5df8:	b80b883a 	mov	r5,r23
    5dfc:	b00d883a 	mov	r6,r22
    5e00:	000d9bc0 	call	d9bc <__ssprint_r>
    5e04:	103b4c1e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    5e08:	d8c02017 	ldw	r3,128(sp)
    5e0c:	da000404 	addi	r8,sp,16
    5e10:	003c1506 	br	4e68 <__alt_mem_Flash_flash_data+0xf4004e68>
    5e14:	da004015 	stw	r8,256(sp)
    5e18:	da403f15 	stw	r9,252(sp)
    5e1c:	000d7140 	call	d714 <__fpclassifyd>
    5e20:	da004017 	ldw	r8,256(sp)
    5e24:	da403f17 	ldw	r9,252(sp)
    5e28:	1000951e 	bne	r2,zero,6080 <___svfprintf_internal_r+0x1868>
    5e2c:	008011c4 	movi	r2,71
    5e30:	1400fb16 	blt	r2,r16,6220 <___svfprintf_internal_r+0x1a08>
    5e34:	030000b4 	movhi	r12,2
    5e38:	63169a04 	addi	r12,r12,23144
    5e3c:	db003115 	stw	r12,196(sp)
    5e40:	00c000c4 	movi	r3,3
    5e44:	00bfdfc4 	movi	r2,-129
    5e48:	d8c02a15 	stw	r3,168(sp)
    5e4c:	88a2703a 	and	r17,r17,r2
    5e50:	dd402783 	ldbu	r21,158(sp)
    5e54:	dcc02d15 	stw	r19,180(sp)
    5e58:	1825883a 	mov	r18,r3
    5e5c:	d8003215 	stw	zero,200(sp)
    5e60:	d8003415 	stw	zero,208(sp)
    5e64:	003b9806 	br	4cc8 <__alt_mem_Flash_flash_data+0xf4004cc8>
    5e68:	1c000007 	ldb	r16,0(r3)
    5e6c:	1805883a 	mov	r2,r3
    5e70:	003abf06 	br	4970 <__alt_mem_Flash_flash_data+0xf4004970>
    5e74:	00800084 	movi	r2,2
    5e78:	003cb406 	br	514c <__alt_mem_Flash_flash_data+0xf400514c>
    5e7c:	88c0100c 	andi	r3,r17,64
    5e80:	1800f626 	beq	r3,zero,625c <___svfprintf_internal_r+0x1a44>
    5e84:	dac02d17 	ldw	r11,180(sp)
    5e88:	14c0000b 	ldhu	r19,0(r2)
    5e8c:	0039883a 	mov	fp,zero
    5e90:	5ac00104 	addi	r11,r11,4
    5e94:	dac02d15 	stw	r11,180(sp)
    5e98:	003cbd06 	br	5190 <__alt_mem_Flash_flash_data+0xf4005190>
    5e9c:	8880040c 	andi	r2,r17,16
    5ea0:	1000091e 	bne	r2,zero,5ec8 <___svfprintf_internal_r+0x16b0>
    5ea4:	8c40100c 	andi	r17,r17,64
    5ea8:	88000726 	beq	r17,zero,5ec8 <___svfprintf_internal_r+0x16b0>
    5eac:	db002d17 	ldw	r12,180(sp)
    5eb0:	dac03017 	ldw	r11,192(sp)
    5eb4:	60800017 	ldw	r2,0(r12)
    5eb8:	63000104 	addi	r12,r12,4
    5ebc:	db002d15 	stw	r12,180(sp)
    5ec0:	12c0000d 	sth	r11,0(r2)
    5ec4:	003a8006 	br	48c8 <__alt_mem_Flash_flash_data+0xf40048c8>
    5ec8:	db002d17 	ldw	r12,180(sp)
    5ecc:	dac03017 	ldw	r11,192(sp)
    5ed0:	60800017 	ldw	r2,0(r12)
    5ed4:	63000104 	addi	r12,r12,4
    5ed8:	db002d15 	stw	r12,180(sp)
    5edc:	12c00015 	stw	r11,0(r2)
    5ee0:	003a7906 	br	48c8 <__alt_mem_Flash_flash_data+0xf40048c8>
    5ee4:	010000b4 	movhi	r4,2
    5ee8:	2116a884 	addi	r4,r4,23202
    5eec:	d9002b15 	stw	r4,172(sp)
    5ef0:	dac02b17 	ldw	r11,172(sp)
    5ef4:	1c87883a 	add	r3,r3,r18
    5ef8:	10800044 	addi	r2,r2,1
    5efc:	42c00015 	stw	r11,0(r8)
    5f00:	44800115 	stw	r18,4(r8)
    5f04:	d8c02015 	stw	r3,128(sp)
    5f08:	d8801f15 	stw	r2,124(sp)
    5f0c:	010001c4 	movi	r4,7
    5f10:	20bf4e16 	blt	r4,r2,5c4c <__alt_mem_Flash_flash_data+0xf4005c4c>
    5f14:	42000204 	addi	r8,r8,8
    5f18:	003f5306 	br	5c68 <__alt_mem_Flash_flash_data+0xf4005c68>
    5f1c:	010000b4 	movhi	r4,2
    5f20:	2116a884 	addi	r4,r4,23202
    5f24:	d9002b15 	stw	r4,172(sp)
    5f28:	003bf906 	br	4f10 <__alt_mem_Flash_flash_data+0xf4004f10>
    5f2c:	d9002f17 	ldw	r4,188(sp)
    5f30:	b80b883a 	mov	r5,r23
    5f34:	b00d883a 	mov	r6,r22
    5f38:	000d9bc0 	call	d9bc <__ssprint_r>
    5f3c:	103afe1e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    5f40:	d8c02017 	ldw	r3,128(sp)
    5f44:	da000404 	addi	r8,sp,16
    5f48:	003dc606 	br	5664 <__alt_mem_Flash_flash_data+0xf4005664>
    5f4c:	d8801f17 	ldw	r2,124(sp)
    5f50:	030000b4 	movhi	r12,2
    5f54:	01000044 	movi	r4,1
    5f58:	18c00044 	addi	r3,r3,1
    5f5c:	10800044 	addi	r2,r2,1
    5f60:	6316a804 	addi	r12,r12,23200
    5f64:	41000115 	stw	r4,4(r8)
    5f68:	43000015 	stw	r12,0(r8)
    5f6c:	d8c02015 	stw	r3,128(sp)
    5f70:	d8801f15 	stw	r2,124(sp)
    5f74:	010001c4 	movi	r4,7
    5f78:	2080ad16 	blt	r4,r2,6230 <___svfprintf_internal_r+0x1a18>
    5f7c:	42000204 	addi	r8,r8,8
    5f80:	8000041e 	bne	r16,zero,5f94 <___svfprintf_internal_r+0x177c>
    5f84:	dac03317 	ldw	r11,204(sp)
    5f88:	5800021e 	bne	r11,zero,5f94 <___svfprintf_internal_r+0x177c>
    5f8c:	8880004c 	andi	r2,r17,1
    5f90:	103bf626 	beq	r2,zero,4f6c <__alt_mem_Flash_flash_data+0xf4004f6c>
    5f94:	db003917 	ldw	r12,228(sp)
    5f98:	d8801f17 	ldw	r2,124(sp)
    5f9c:	dac03517 	ldw	r11,212(sp)
    5fa0:	1b07883a 	add	r3,r3,r12
    5fa4:	10800044 	addi	r2,r2,1
    5fa8:	42c00015 	stw	r11,0(r8)
    5fac:	43000115 	stw	r12,4(r8)
    5fb0:	d8c02015 	stw	r3,128(sp)
    5fb4:	d8801f15 	stw	r2,124(sp)
    5fb8:	010001c4 	movi	r4,7
    5fbc:	20818616 	blt	r4,r2,65d8 <___svfprintf_internal_r+0x1dc0>
    5fc0:	42000204 	addi	r8,r8,8
    5fc4:	0421c83a 	sub	r16,zero,r16
    5fc8:	0400bc0e 	bge	zero,r16,62bc <___svfprintf_internal_r+0x1aa4>
    5fcc:	04800404 	movi	r18,16
    5fd0:	9400f80e 	bge	r18,r16,63b4 <___svfprintf_internal_r+0x1b9c>
    5fd4:	010000b4 	movhi	r4,2
    5fd8:	2116a884 	addi	r4,r4,23202
    5fdc:	d9002b15 	stw	r4,172(sp)
    5fe0:	054001c4 	movi	r21,7
    5fe4:	dcc02f17 	ldw	r19,188(sp)
    5fe8:	00000306 	br	5ff8 <___svfprintf_internal_r+0x17e0>
    5fec:	42000204 	addi	r8,r8,8
    5ff0:	843ffc04 	addi	r16,r16,-16
    5ff4:	9400f20e 	bge	r18,r16,63c0 <___svfprintf_internal_r+0x1ba8>
    5ff8:	18c00404 	addi	r3,r3,16
    5ffc:	10800044 	addi	r2,r2,1
    6000:	45000015 	stw	r20,0(r8)
    6004:	44800115 	stw	r18,4(r8)
    6008:	d8c02015 	stw	r3,128(sp)
    600c:	d8801f15 	stw	r2,124(sp)
    6010:	a8bff60e 	bge	r21,r2,5fec <__alt_mem_Flash_flash_data+0xf4005fec>
    6014:	9809883a 	mov	r4,r19
    6018:	b80b883a 	mov	r5,r23
    601c:	b00d883a 	mov	r6,r22
    6020:	000d9bc0 	call	d9bc <__ssprint_r>
    6024:	103ac41e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    6028:	d8c02017 	ldw	r3,128(sp)
    602c:	d8801f17 	ldw	r2,124(sp)
    6030:	da000404 	addi	r8,sp,16
    6034:	003fee06 	br	5ff0 <__alt_mem_Flash_flash_data+0xf4005ff0>
    6038:	db002e17 	ldw	r12,184(sp)
    603c:	1805883a 	mov	r2,r3
    6040:	dac02d15 	stw	r11,180(sp)
    6044:	0319c83a 	sub	r12,zero,r12
    6048:	db002e15 	stw	r12,184(sp)
    604c:	003acf06 	br	4b8c <__alt_mem_Flash_flash_data+0xf4004b8c>
    6050:	18800044 	addi	r2,r3,1
    6054:	8c400814 	ori	r17,r17,32
    6058:	1c000047 	ldb	r16,1(r3)
    605c:	003a4406 	br	4970 <__alt_mem_Flash_flash_data+0xf4004970>
    6060:	d9002f17 	ldw	r4,188(sp)
    6064:	b80b883a 	mov	r5,r23
    6068:	b00d883a 	mov	r6,r22
    606c:	000d9bc0 	call	d9bc <__ssprint_r>
    6070:	103ab11e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    6074:	d8c02017 	ldw	r3,128(sp)
    6078:	da000404 	addi	r8,sp,16
    607c:	003d8a06 	br	56a8 <__alt_mem_Flash_flash_data+0xf40056a8>
    6080:	057ff7c4 	movi	r21,-33
    6084:	00bfffc4 	movi	r2,-1
    6088:	856a703a 	and	r21,r16,r21
    608c:	48807126 	beq	r9,r2,6254 <___svfprintf_internal_r+0x1a3c>
    6090:	008011c4 	movi	r2,71
    6094:	a8814d26 	beq	r21,r2,65cc <___svfprintf_internal_r+0x1db4>
    6098:	db003817 	ldw	r12,224(sp)
    609c:	8ac04014 	ori	r11,r17,256
    60a0:	dac02d15 	stw	r11,180(sp)
    60a4:	60015616 	blt	r12,zero,6600 <___svfprintf_internal_r+0x1de8>
    60a8:	dc803817 	ldw	r18,224(sp)
    60ac:	d8002a05 	stb	zero,168(sp)
    60b0:	00801984 	movi	r2,102
    60b4:	80808c26 	beq	r16,r2,62e8 <___svfprintf_internal_r+0x1ad0>
    60b8:	00801184 	movi	r2,70
    60bc:	80808a26 	beq	r16,r2,62e8 <___svfprintf_internal_r+0x1ad0>
    60c0:	00801144 	movi	r2,69
    60c4:	a8815226 	beq	r21,r2,6610 <___svfprintf_internal_r+0x1df8>
    60c8:	4839883a 	mov	fp,r9
    60cc:	d8802604 	addi	r2,sp,152
    60d0:	d8800115 	stw	r2,4(sp)
    60d4:	d9002f17 	ldw	r4,188(sp)
    60d8:	d8802504 	addi	r2,sp,148
    60dc:	d9403717 	ldw	r5,220(sp)
    60e0:	d8800215 	stw	r2,8(sp)
    60e4:	d8802104 	addi	r2,sp,132
    60e8:	df000015 	stw	fp,0(sp)
    60ec:	d8800315 	stw	r2,12(sp)
    60f0:	900d883a 	mov	r6,r18
    60f4:	01c00084 	movi	r7,2
    60f8:	da004015 	stw	r8,256(sp)
    60fc:	da403f15 	stw	r9,252(sp)
    6100:	0008b2c0 	call	8b2c <_dtoa_r>
    6104:	d8803115 	stw	r2,196(sp)
    6108:	008019c4 	movi	r2,103
    610c:	da004017 	ldw	r8,256(sp)
    6110:	da403f17 	ldw	r9,252(sp)
    6114:	80800226 	beq	r16,r2,6120 <___svfprintf_internal_r+0x1908>
    6118:	008011c4 	movi	r2,71
    611c:	8080841e 	bne	r16,r2,6330 <___svfprintf_internal_r+0x1b18>
    6120:	8880004c 	andi	r2,r17,1
    6124:	10014f26 	beq	r2,zero,6664 <___svfprintf_internal_r+0x1e4c>
    6128:	db003117 	ldw	r12,196(sp)
    612c:	6715883a 	add	r10,r12,fp
    6130:	d9003717 	ldw	r4,220(sp)
    6134:	900b883a 	mov	r5,r18
    6138:	000d883a 	mov	r6,zero
    613c:	000f883a 	mov	r7,zero
    6140:	da004015 	stw	r8,256(sp)
    6144:	da403f15 	stw	r9,252(sp)
    6148:	da803e15 	stw	r10,248(sp)
    614c:	00127600 	call	12760 <__eqdf2>
    6150:	da004017 	ldw	r8,256(sp)
    6154:	da403f17 	ldw	r9,252(sp)
    6158:	da803e17 	ldw	r10,248(sp)
    615c:	1000d926 	beq	r2,zero,64c4 <___svfprintf_internal_r+0x1cac>
    6160:	d8802117 	ldw	r2,132(sp)
    6164:	1280062e 	bgeu	r2,r10,6180 <___svfprintf_internal_r+0x1968>
    6168:	01000c04 	movi	r4,48
    616c:	10c00044 	addi	r3,r2,1
    6170:	d8c02115 	stw	r3,132(sp)
    6174:	11000005 	stb	r4,0(r2)
    6178:	d8802117 	ldw	r2,132(sp)
    617c:	12bffb36 	bltu	r2,r10,616c <__alt_mem_Flash_flash_data+0xf400616c>
    6180:	db003117 	ldw	r12,196(sp)
    6184:	1305c83a 	sub	r2,r2,r12
    6188:	d8803315 	stw	r2,204(sp)
    618c:	008011c4 	movi	r2,71
    6190:	a880b626 	beq	r21,r2,646c <___svfprintf_internal_r+0x1c54>
    6194:	00801944 	movi	r2,101
    6198:	14017c0e 	bge	r2,r16,678c <___svfprintf_internal_r+0x1f74>
    619c:	00801984 	movi	r2,102
    61a0:	80812626 	beq	r16,r2,663c <___svfprintf_internal_r+0x1e24>
    61a4:	db002617 	ldw	r12,152(sp)
    61a8:	db003415 	stw	r12,208(sp)
    61ac:	db003417 	ldw	r12,208(sp)
    61b0:	dac03317 	ldw	r11,204(sp)
    61b4:	62c11816 	blt	r12,r11,6618 <___svfprintf_internal_r+0x1e00>
    61b8:	8c40004c 	andi	r17,r17,1
    61bc:	88013b1e 	bne	r17,zero,66ac <___svfprintf_internal_r+0x1e94>
    61c0:	6005883a 	mov	r2,r12
    61c4:	60012516 	blt	r12,zero,665c <___svfprintf_internal_r+0x1e44>
    61c8:	dc803417 	ldw	r18,208(sp)
    61cc:	df002a07 	ldb	fp,168(sp)
    61d0:	e000b01e 	bne	fp,zero,6494 <___svfprintf_internal_r+0x1c7c>
    61d4:	dc402d17 	ldw	r17,180(sp)
    61d8:	dd402783 	ldbu	r21,158(sp)
    61dc:	d8802a15 	stw	r2,168(sp)
    61e0:	dcc02d15 	stw	r19,180(sp)
    61e4:	d8003215 	stw	zero,200(sp)
    61e8:	003ab706 	br	4cc8 <__alt_mem_Flash_flash_data+0xf4004cc8>
    61ec:	008000b4 	movhi	r2,2
    61f0:	10969804 	addi	r2,r2,23136
    61f4:	d8803115 	stw	r2,196(sp)
    61f8:	003bbb06 	br	50e8 <__alt_mem_Flash_flash_data+0xf40050e8>
    61fc:	d9002f17 	ldw	r4,188(sp)
    6200:	04001004 	movi	r16,64
    6204:	800b883a 	mov	r5,r16
    6208:	000b57c0 	call	b57c <_malloc_r>
    620c:	b8800015 	stw	r2,0(r23)
    6210:	b8800415 	stw	r2,16(r23)
    6214:	10015f26 	beq	r2,zero,6794 <___svfprintf_internal_r+0x1f7c>
    6218:	bc000515 	stw	r16,20(r23)
    621c:	00399806 	br	4880 <__alt_mem_Flash_flash_data+0xf4004880>
    6220:	008000b4 	movhi	r2,2
    6224:	10969b04 	addi	r2,r2,23148
    6228:	d8803115 	stw	r2,196(sp)
    622c:	003f0406 	br	5e40 <__alt_mem_Flash_flash_data+0xf4005e40>
    6230:	d9002f17 	ldw	r4,188(sp)
    6234:	b80b883a 	mov	r5,r23
    6238:	b00d883a 	mov	r6,r22
    623c:	000d9bc0 	call	d9bc <__ssprint_r>
    6240:	103a3d1e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    6244:	dc002617 	ldw	r16,152(sp)
    6248:	d8c02017 	ldw	r3,128(sp)
    624c:	da000404 	addi	r8,sp,16
    6250:	003f4b06 	br	5f80 <__alt_mem_Flash_flash_data+0xf4005f80>
    6254:	02400184 	movi	r9,6
    6258:	003f8f06 	br	6098 <__alt_mem_Flash_flash_data+0xf4006098>
    625c:	db002d17 	ldw	r12,180(sp)
    6260:	14c00017 	ldw	r19,0(r2)
    6264:	0039883a 	mov	fp,zero
    6268:	63000104 	addi	r12,r12,4
    626c:	db002d15 	stw	r12,180(sp)
    6270:	003bc706 	br	5190 <__alt_mem_Flash_flash_data+0xf4005190>
    6274:	d8c03117 	ldw	r3,196(sp)
    6278:	b0e5c83a 	sub	r18,r22,r3
    627c:	003a8d06 	br	4cb4 <__alt_mem_Flash_flash_data+0xf4004cb4>
    6280:	da004015 	stw	r8,256(sp)
    6284:	00047800 	call	4780 <strlen>
    6288:	1025883a 	mov	r18,r2
    628c:	da004017 	ldw	r8,256(sp)
    6290:	903bf20e 	bge	r18,zero,525c <__alt_mem_Flash_flash_data+0xf400525c>
    6294:	0005883a 	mov	r2,zero
    6298:	003bf006 	br	525c <__alt_mem_Flash_flash_data+0xf400525c>
    629c:	d9002f17 	ldw	r4,188(sp)
    62a0:	b80b883a 	mov	r5,r23
    62a4:	b00d883a 	mov	r6,r22
    62a8:	000d9bc0 	call	d9bc <__ssprint_r>
    62ac:	103a221e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    62b0:	d8c02017 	ldw	r3,128(sp)
    62b4:	d8801f17 	ldw	r2,124(sp)
    62b8:	da000404 	addi	r8,sp,16
    62bc:	db003317 	ldw	r12,204(sp)
    62c0:	dac03117 	ldw	r11,196(sp)
    62c4:	10800044 	addi	r2,r2,1
    62c8:	1b07883a 	add	r3,r3,r12
    62cc:	42c00015 	stw	r11,0(r8)
    62d0:	43000115 	stw	r12,4(r8)
    62d4:	d8c02015 	stw	r3,128(sp)
    62d8:	d8801f15 	stw	r2,124(sp)
    62dc:	010001c4 	movi	r4,7
    62e0:	20bb210e 	bge	r4,r2,4f68 <__alt_mem_Flash_flash_data+0xf4004f68>
    62e4:	003da206 	br	5970 <__alt_mem_Flash_flash_data+0xf4005970>
    62e8:	d8802604 	addi	r2,sp,152
    62ec:	d8800115 	stw	r2,4(sp)
    62f0:	d9002f17 	ldw	r4,188(sp)
    62f4:	d8802504 	addi	r2,sp,148
    62f8:	d9403717 	ldw	r5,220(sp)
    62fc:	d8800215 	stw	r2,8(sp)
    6300:	d8802104 	addi	r2,sp,132
    6304:	da400015 	stw	r9,0(sp)
    6308:	d8800315 	stw	r2,12(sp)
    630c:	900d883a 	mov	r6,r18
    6310:	01c000c4 	movi	r7,3
    6314:	da004015 	stw	r8,256(sp)
    6318:	da403f15 	stw	r9,252(sp)
    631c:	0008b2c0 	call	8b2c <_dtoa_r>
    6320:	da403f17 	ldw	r9,252(sp)
    6324:	da004017 	ldw	r8,256(sp)
    6328:	d8803115 	stw	r2,196(sp)
    632c:	4839883a 	mov	fp,r9
    6330:	dac03117 	ldw	r11,196(sp)
    6334:	00801184 	movi	r2,70
    6338:	5f15883a 	add	r10,r11,fp
    633c:	a8bf7c1e 	bne	r21,r2,6130 <__alt_mem_Flash_flash_data+0xf4006130>
    6340:	59000007 	ldb	r4,0(r11)
    6344:	00800c04 	movi	r2,48
    6348:	2080c826 	beq	r4,r2,666c <___svfprintf_internal_r+0x1e54>
    634c:	d8c02617 	ldw	r3,152(sp)
    6350:	50d5883a 	add	r10,r10,r3
    6354:	003f7606 	br	6130 <__alt_mem_Flash_flash_data+0xf4006130>
    6358:	010000b4 	movhi	r4,2
    635c:	2116ac84 	addi	r4,r4,23218
    6360:	d9003615 	stw	r4,216(sp)
    6364:	003a9706 	br	4dc4 <__alt_mem_Flash_flash_data+0xf4004dc4>
    6368:	0025883a 	mov	r18,zero
    636c:	003dc306 	br	5a7c <__alt_mem_Flash_flash_data+0xf4005a7c>
    6370:	d9002f17 	ldw	r4,188(sp)
    6374:	b80b883a 	mov	r5,r23
    6378:	b00d883a 	mov	r6,r22
    637c:	000d9bc0 	call	d9bc <__ssprint_r>
    6380:	1039ed1e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    6384:	d8c02017 	ldw	r3,128(sp)
    6388:	da000404 	addi	r8,sp,16
    638c:	003dba06 	br	5a78 <__alt_mem_Flash_flash_data+0xf4005a78>
    6390:	d9002f17 	ldw	r4,188(sp)
    6394:	b80b883a 	mov	r5,r23
    6398:	b00d883a 	mov	r6,r22
    639c:	000d9bc0 	call	d9bc <__ssprint_r>
    63a0:	1039e51e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    63a4:	d8802617 	ldw	r2,152(sp)
    63a8:	d8c02017 	ldw	r3,128(sp)
    63ac:	da000404 	addi	r8,sp,16
    63b0:	003e4106 	br	5cb8 <__alt_mem_Flash_flash_data+0xf4005cb8>
    63b4:	030000b4 	movhi	r12,2
    63b8:	6316a884 	addi	r12,r12,23202
    63bc:	db002b15 	stw	r12,172(sp)
    63c0:	dac02b17 	ldw	r11,172(sp)
    63c4:	1c07883a 	add	r3,r3,r16
    63c8:	10800044 	addi	r2,r2,1
    63cc:	42c00015 	stw	r11,0(r8)
    63d0:	44000115 	stw	r16,4(r8)
    63d4:	d8c02015 	stw	r3,128(sp)
    63d8:	d8801f15 	stw	r2,124(sp)
    63dc:	010001c4 	movi	r4,7
    63e0:	20bfae16 	blt	r4,r2,629c <__alt_mem_Flash_flash_data+0xf400629c>
    63e4:	42000204 	addi	r8,r8,8
    63e8:	003fb406 	br	62bc <__alt_mem_Flash_flash_data+0xf40062bc>
    63ec:	0021883a 	mov	r16,zero
    63f0:	003e4306 	br	5d00 <__alt_mem_Flash_flash_data+0xf4005d00>
    63f4:	d9002f17 	ldw	r4,188(sp)
    63f8:	b80b883a 	mov	r5,r23
    63fc:	b00d883a 	mov	r6,r22
    6400:	000d9bc0 	call	d9bc <__ssprint_r>
    6404:	1039cc1e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    6408:	d8802617 	ldw	r2,152(sp)
    640c:	db003317 	ldw	r12,204(sp)
    6410:	d8c02017 	ldw	r3,128(sp)
    6414:	da000404 	addi	r8,sp,16
    6418:	6085c83a 	sub	r2,r12,r2
    641c:	003e3706 	br	5cfc <__alt_mem_Flash_flash_data+0xf4005cfc>
    6420:	00800184 	movi	r2,6
    6424:	1240012e 	bgeu	r2,r9,642c <___svfprintf_internal_r+0x1c14>
    6428:	1013883a 	mov	r9,r2
    642c:	4825883a 	mov	r18,r9
    6430:	4805883a 	mov	r2,r9
    6434:	4800a216 	blt	r9,zero,66c0 <___svfprintf_internal_r+0x1ea8>
    6438:	d8802a15 	stw	r2,168(sp)
    643c:	008000b4 	movhi	r2,2
    6440:	1096a604 	addi	r2,r2,23192
    6444:	d8803115 	stw	r2,196(sp)
    6448:	dcc02d15 	stw	r19,180(sp)
    644c:	d8003215 	stw	zero,200(sp)
    6450:	d8003415 	stw	zero,208(sp)
    6454:	0005883a 	mov	r2,zero
    6458:	003a2206 	br	4ce4 <__alt_mem_Flash_flash_data+0xf4004ce4>
    645c:	030000b4 	movhi	r12,2
    6460:	6316ac84 	addi	r12,r12,23218
    6464:	db003615 	stw	r12,216(sp)
    6468:	003ae506 	br	5000 <__alt_mem_Flash_flash_data+0xf4005000>
    646c:	d8c02617 	ldw	r3,152(sp)
    6470:	00bfff44 	movi	r2,-3
    6474:	18801516 	blt	r3,r2,64cc <___svfprintf_internal_r+0x1cb4>
    6478:	48c01416 	blt	r9,r3,64cc <___svfprintf_internal_r+0x1cb4>
    647c:	d8c03415 	stw	r3,208(sp)
    6480:	040019c4 	movi	r16,103
    6484:	003f4906 	br	61ac <__alt_mem_Flash_flash_data+0xf40061ac>
    6488:	05400b44 	movi	r21,45
    648c:	dd402785 	stb	r21,158(sp)
    6490:	003b1006 	br	50d4 <__alt_mem_Flash_flash_data+0xf40050d4>
    6494:	00c00b44 	movi	r3,45
    6498:	d8802a15 	stw	r2,168(sp)
    649c:	dc402d17 	ldw	r17,180(sp)
    64a0:	d8c02785 	stb	r3,158(sp)
    64a4:	dcc02d15 	stw	r19,180(sp)
    64a8:	d8003215 	stw	zero,200(sp)
    64ac:	00800b44 	movi	r2,45
    64b0:	003a0906 	br	4cd8 <__alt_mem_Flash_flash_data+0xf4004cd8>
    64b4:	010000b4 	movhi	r4,2
    64b8:	2116a884 	addi	r4,r4,23202
    64bc:	d9002b15 	stw	r4,172(sp)
    64c0:	003cc306 	br	57d0 <__alt_mem_Flash_flash_data+0xf40057d0>
    64c4:	5005883a 	mov	r2,r10
    64c8:	003f2d06 	br	6180 <__alt_mem_Flash_flash_data+0xf4006180>
    64cc:	843fff84 	addi	r16,r16,-2
    64d0:	1f3fffc4 	addi	fp,r3,-1
    64d4:	df002615 	stw	fp,152(sp)
    64d8:	dc0022c5 	stb	r16,139(sp)
    64dc:	e000a016 	blt	fp,zero,6760 <___svfprintf_internal_r+0x1f48>
    64e0:	00800ac4 	movi	r2,43
    64e4:	d8802305 	stb	r2,140(sp)
    64e8:	00800244 	movi	r2,9
    64ec:	1700800e 	bge	r2,fp,66f0 <___svfprintf_internal_r+0x1ed8>
    64f0:	dd4022c4 	addi	r21,sp,139
    64f4:	dc002b15 	stw	r16,172(sp)
    64f8:	4025883a 	mov	r18,r8
    64fc:	a821883a 	mov	r16,r21
    6500:	e009883a 	mov	r4,fp
    6504:	01400284 	movi	r5,10
    6508:	001158c0 	call	1158c <__modsi3>
    650c:	10800c04 	addi	r2,r2,48
    6510:	843fffc4 	addi	r16,r16,-1
    6514:	e009883a 	mov	r4,fp
    6518:	01400284 	movi	r5,10
    651c:	80800005 	stb	r2,0(r16)
    6520:	00115380 	call	11538 <__divsi3>
    6524:	1039883a 	mov	fp,r2
    6528:	00800244 	movi	r2,9
    652c:	173ff416 	blt	r2,fp,6500 <__alt_mem_Flash_flash_data+0xf4006500>
    6530:	9011883a 	mov	r8,r18
    6534:	e0800c04 	addi	r2,fp,48
    6538:	8025883a 	mov	r18,r16
    653c:	913fffc4 	addi	r4,r18,-1
    6540:	90bfffc5 	stb	r2,-1(r18)
    6544:	dc002b17 	ldw	r16,172(sp)
    6548:	25408e2e 	bgeu	r4,r21,6784 <___svfprintf_internal_r+0x1f6c>
    654c:	d9402384 	addi	r5,sp,142
    6550:	2c8bc83a 	sub	r5,r5,r18
    6554:	d8c02344 	addi	r3,sp,141
    6558:	a94b883a 	add	r5,r21,r5
    655c:	00000106 	br	6564 <___svfprintf_internal_r+0x1d4c>
    6560:	20800003 	ldbu	r2,0(r4)
    6564:	18800005 	stb	r2,0(r3)
    6568:	18c00044 	addi	r3,r3,1
    656c:	21000044 	addi	r4,r4,1
    6570:	197ffb1e 	bne	r3,r5,6560 <__alt_mem_Flash_flash_data+0xf4006560>
    6574:	d8802304 	addi	r2,sp,140
    6578:	1485c83a 	sub	r2,r2,r18
    657c:	d8c02344 	addi	r3,sp,141
    6580:	1885883a 	add	r2,r3,r2
    6584:	dac03317 	ldw	r11,204(sp)
    6588:	156bc83a 	sub	r21,r2,r21
    658c:	dd403a15 	stw	r21,232(sp)
    6590:	00800044 	movi	r2,1
    6594:	5d65883a 	add	r18,r11,r21
    6598:	12c0770e 	bge	r2,r11,6778 <___svfprintf_internal_r+0x1f60>
    659c:	94800044 	addi	r18,r18,1
    65a0:	9005883a 	mov	r2,r18
    65a4:	90007216 	blt	r18,zero,6770 <___svfprintf_internal_r+0x1f58>
    65a8:	d8003415 	stw	zero,208(sp)
    65ac:	003f0706 	br	61cc <__alt_mem_Flash_flash_data+0xf40061cc>
    65b0:	da402a15 	stw	r9,168(sp)
    65b4:	dd402783 	ldbu	r21,158(sp)
    65b8:	4825883a 	mov	r18,r9
    65bc:	dcc02d15 	stw	r19,180(sp)
    65c0:	d8003215 	stw	zero,200(sp)
    65c4:	d8003415 	stw	zero,208(sp)
    65c8:	0039bf06 	br	4cc8 <__alt_mem_Flash_flash_data+0xf4004cc8>
    65cc:	483eb21e 	bne	r9,zero,6098 <__alt_mem_Flash_flash_data+0xf4006098>
    65d0:	9013883a 	mov	r9,r18
    65d4:	003eb006 	br	6098 <__alt_mem_Flash_flash_data+0xf4006098>
    65d8:	d9002f17 	ldw	r4,188(sp)
    65dc:	b80b883a 	mov	r5,r23
    65e0:	b00d883a 	mov	r6,r22
    65e4:	000d9bc0 	call	d9bc <__ssprint_r>
    65e8:	1039531e 	bne	r2,zero,4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    65ec:	dc002617 	ldw	r16,152(sp)
    65f0:	d8c02017 	ldw	r3,128(sp)
    65f4:	d8801f17 	ldw	r2,124(sp)
    65f8:	da000404 	addi	r8,sp,16
    65fc:	003e7106 	br	5fc4 <__alt_mem_Flash_flash_data+0xf4005fc4>
    6600:	00c00b44 	movi	r3,45
    6604:	64a0003c 	xorhi	r18,r12,32768
    6608:	d8c02a05 	stb	r3,168(sp)
    660c:	003ea806 	br	60b0 <__alt_mem_Flash_flash_data+0xf40060b0>
    6610:	4f000044 	addi	fp,r9,1
    6614:	003ead06 	br	60cc <__alt_mem_Flash_flash_data+0xf40060cc>
    6618:	d8c03417 	ldw	r3,208(sp)
    661c:	00c0410e 	bge	zero,r3,6724 <___svfprintf_internal_r+0x1f0c>
    6620:	04800044 	movi	r18,1
    6624:	dac03317 	ldw	r11,204(sp)
    6628:	92e5883a 	add	r18,r18,r11
    662c:	9005883a 	mov	r2,r18
    6630:	903ee60e 	bge	r18,zero,61cc <__alt_mem_Flash_flash_data+0xf40061cc>
    6634:	0005883a 	mov	r2,zero
    6638:	003ee406 	br	61cc <__alt_mem_Flash_flash_data+0xf40061cc>
    663c:	d8c02617 	ldw	r3,152(sp)
    6640:	d8c03415 	stw	r3,208(sp)
    6644:	00c0310e 	bge	zero,r3,670c <___svfprintf_internal_r+0x1ef4>
    6648:	48001f1e 	bne	r9,zero,66c8 <___svfprintf_internal_r+0x1eb0>
    664c:	8c40004c 	andi	r17,r17,1
    6650:	88001d1e 	bne	r17,zero,66c8 <___svfprintf_internal_r+0x1eb0>
    6654:	1805883a 	mov	r2,r3
    6658:	183edb0e 	bge	r3,zero,61c8 <__alt_mem_Flash_flash_data+0xf40061c8>
    665c:	0005883a 	mov	r2,zero
    6660:	003ed906 	br	61c8 <__alt_mem_Flash_flash_data+0xf40061c8>
    6664:	d8802117 	ldw	r2,132(sp)
    6668:	003ec506 	br	6180 <__alt_mem_Flash_flash_data+0xf4006180>
    666c:	d9003717 	ldw	r4,220(sp)
    6670:	900b883a 	mov	r5,r18
    6674:	000d883a 	mov	r6,zero
    6678:	000f883a 	mov	r7,zero
    667c:	da004015 	stw	r8,256(sp)
    6680:	da403f15 	stw	r9,252(sp)
    6684:	da803e15 	stw	r10,248(sp)
    6688:	00127600 	call	12760 <__eqdf2>
    668c:	da004017 	ldw	r8,256(sp)
    6690:	da403f17 	ldw	r9,252(sp)
    6694:	da803e17 	ldw	r10,248(sp)
    6698:	103f2c26 	beq	r2,zero,634c <__alt_mem_Flash_flash_data+0xf400634c>
    669c:	00800044 	movi	r2,1
    66a0:	1707c83a 	sub	r3,r2,fp
    66a4:	d8c02615 	stw	r3,152(sp)
    66a8:	003f2906 	br	6350 <__alt_mem_Flash_flash_data+0xf4006350>
    66ac:	db003417 	ldw	r12,208(sp)
    66b0:	64800044 	addi	r18,r12,1
    66b4:	9005883a 	mov	r2,r18
    66b8:	903ec40e 	bge	r18,zero,61cc <__alt_mem_Flash_flash_data+0xf40061cc>
    66bc:	003fdd06 	br	6634 <__alt_mem_Flash_flash_data+0xf4006634>
    66c0:	0005883a 	mov	r2,zero
    66c4:	003f5c06 	br	6438 <__alt_mem_Flash_flash_data+0xf4006438>
    66c8:	dac03417 	ldw	r11,208(sp)
    66cc:	4a400044 	addi	r9,r9,1
    66d0:	5a65883a 	add	r18,r11,r9
    66d4:	9005883a 	mov	r2,r18
    66d8:	903ebc0e 	bge	r18,zero,61cc <__alt_mem_Flash_flash_data+0xf40061cc>
    66dc:	003fd506 	br	6634 <__alt_mem_Flash_flash_data+0xf4006634>
    66e0:	008000b4 	movhi	r2,2
    66e4:	1096a884 	addi	r2,r2,23202
    66e8:	d8802b15 	stw	r2,172(sp)
    66ec:	003d2b06 	br	5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    66f0:	00800c04 	movi	r2,48
    66f4:	e0c00c04 	addi	r3,fp,48
    66f8:	d8802345 	stb	r2,141(sp)
    66fc:	d8c02385 	stb	r3,142(sp)
    6700:	d88023c4 	addi	r2,sp,143
    6704:	dd4022c4 	addi	r21,sp,139
    6708:	003f9e06 	br	6584 <__alt_mem_Flash_flash_data+0xf4006584>
    670c:	4800081e 	bne	r9,zero,6730 <___svfprintf_internal_r+0x1f18>
    6710:	8c40004c 	andi	r17,r17,1
    6714:	8800061e 	bne	r17,zero,6730 <___svfprintf_internal_r+0x1f18>
    6718:	00800044 	movi	r2,1
    671c:	1025883a 	mov	r18,r2
    6720:	003eaa06 	br	61cc <__alt_mem_Flash_flash_data+0xf40061cc>
    6724:	04800084 	movi	r18,2
    6728:	90e5c83a 	sub	r18,r18,r3
    672c:	003fbd06 	br	6624 <__alt_mem_Flash_flash_data+0xf4006624>
    6730:	4c800084 	addi	r18,r9,2
    6734:	9005883a 	mov	r2,r18
    6738:	903ea40e 	bge	r18,zero,61cc <__alt_mem_Flash_flash_data+0xf40061cc>
    673c:	003fbd06 	br	6634 <__alt_mem_Flash_flash_data+0xf4006634>
    6740:	dac02d17 	ldw	r11,180(sp)
    6744:	5a400017 	ldw	r9,0(r11)
    6748:	5ac00104 	addi	r11,r11,4
    674c:	dac02d15 	stw	r11,180(sp)
    6750:	483e410e 	bge	r9,zero,6058 <__alt_mem_Flash_flash_data+0xf4006058>
    6754:	027fffc4 	movi	r9,-1
    6758:	1c000047 	ldb	r16,1(r3)
    675c:	00388406 	br	4970 <__alt_mem_Flash_flash_data+0xf4004970>
    6760:	00800b44 	movi	r2,45
    6764:	0739c83a 	sub	fp,zero,fp
    6768:	d8802305 	stb	r2,140(sp)
    676c:	003f5e06 	br	64e8 <__alt_mem_Flash_flash_data+0xf40064e8>
    6770:	0005883a 	mov	r2,zero
    6774:	003f8c06 	br	65a8 <__alt_mem_Flash_flash_data+0xf40065a8>
    6778:	88a2703a 	and	r17,r17,r2
    677c:	883f8826 	beq	r17,zero,65a0 <__alt_mem_Flash_flash_data+0xf40065a0>
    6780:	003f8606 	br	659c <__alt_mem_Flash_flash_data+0xf400659c>
    6784:	d8802344 	addi	r2,sp,141
    6788:	003f7e06 	br	6584 <__alt_mem_Flash_flash_data+0xf4006584>
    678c:	d8c02617 	ldw	r3,152(sp)
    6790:	003f4f06 	br	64d0 <__alt_mem_Flash_flash_data+0xf40064d0>
    6794:	dac02f17 	ldw	r11,188(sp)
    6798:	00800304 	movi	r2,12
    679c:	58800015 	stw	r2,0(r11)
    67a0:	00bfffc4 	movi	r2,-1
    67a4:	0038e806 	br	4b48 <__alt_mem_Flash_flash_data+0xf4004b48>

000067a8 <___vfprintf_internal_r>:
    67a8:	deffb604 	addi	sp,sp,-296
    67ac:	dfc04915 	stw	ra,292(sp)
    67b0:	ddc04715 	stw	r23,284(sp)
    67b4:	dd804615 	stw	r22,280(sp)
    67b8:	282f883a 	mov	r23,r5
    67bc:	202d883a 	mov	r22,r4
    67c0:	d9802a15 	stw	r6,168(sp)
    67c4:	d9c02d15 	stw	r7,180(sp)
    67c8:	df004815 	stw	fp,288(sp)
    67cc:	dd404515 	stw	r21,276(sp)
    67d0:	dd004415 	stw	r20,272(sp)
    67d4:	dcc04315 	stw	r19,268(sp)
    67d8:	dc804215 	stw	r18,264(sp)
    67dc:	dc404115 	stw	r17,260(sp)
    67e0:	dc004015 	stw	r16,256(sp)
    67e4:	000b3900 	call	b390 <_localeconv_r>
    67e8:	10800017 	ldw	r2,0(r2)
    67ec:	1009883a 	mov	r4,r2
    67f0:	d8803515 	stw	r2,212(sp)
    67f4:	00047800 	call	4780 <strlen>
    67f8:	d8803815 	stw	r2,224(sp)
    67fc:	b0000226 	beq	r22,zero,6808 <___vfprintf_internal_r+0x60>
    6800:	b0800e17 	ldw	r2,56(r22)
    6804:	1000e126 	beq	r2,zero,6b8c <___vfprintf_internal_r+0x3e4>
    6808:	b880030b 	ldhu	r2,12(r23)
    680c:	10c8000c 	andi	r3,r2,8192
    6810:	1800061e 	bne	r3,zero,682c <___vfprintf_internal_r+0x84>
    6814:	b9001917 	ldw	r4,100(r23)
    6818:	00f7ffc4 	movi	r3,-8193
    681c:	10880014 	ori	r2,r2,8192
    6820:	20c6703a 	and	r3,r4,r3
    6824:	b880030d 	sth	r2,12(r23)
    6828:	b8c01915 	stw	r3,100(r23)
    682c:	10c0020c 	andi	r3,r2,8
    6830:	1800a726 	beq	r3,zero,6ad0 <___vfprintf_internal_r+0x328>
    6834:	b8c00417 	ldw	r3,16(r23)
    6838:	1800a526 	beq	r3,zero,6ad0 <___vfprintf_internal_r+0x328>
    683c:	1080068c 	andi	r2,r2,26
    6840:	00c00284 	movi	r3,10
    6844:	10c0aa26 	beq	r2,r3,6af0 <___vfprintf_internal_r+0x348>
    6848:	dac01e04 	addi	r11,sp,120
    684c:	db001dc4 	addi	r12,sp,119
    6850:	d8800404 	addi	r2,sp,16
    6854:	050000b4 	movhi	r20,2
    6858:	dac02815 	stw	r11,160(sp)
    685c:	5b17c83a 	sub	r11,r11,r12
    6860:	a516b084 	addi	r20,r20,23234
    6864:	db002915 	stw	r12,164(sp)
    6868:	d8801e15 	stw	r2,120(sp)
    686c:	d8002015 	stw	zero,128(sp)
    6870:	d8001f15 	stw	zero,124(sp)
    6874:	d8003315 	stw	zero,204(sp)
    6878:	d8003715 	stw	zero,220(sp)
    687c:	d8003915 	stw	zero,228(sp)
    6880:	1011883a 	mov	r8,r2
    6884:	d8003b15 	stw	zero,236(sp)
    6888:	d8003a15 	stw	zero,232(sp)
    688c:	d8002f15 	stw	zero,188(sp)
    6890:	dac03c15 	stw	r11,240(sp)
    6894:	db002a17 	ldw	r12,168(sp)
    6898:	60800007 	ldb	r2,0(r12)
    689c:	1000be26 	beq	r2,zero,6b98 <___vfprintf_internal_r+0x3f0>
    68a0:	00c00944 	movi	r3,37
    68a4:	10c0bc26 	beq	r2,r3,6b98 <___vfprintf_internal_r+0x3f0>
    68a8:	6021883a 	mov	r16,r12
    68ac:	00000106 	br	68b4 <___vfprintf_internal_r+0x10c>
    68b0:	10c08426 	beq	r2,r3,6ac4 <___vfprintf_internal_r+0x31c>
    68b4:	84000044 	addi	r16,r16,1
    68b8:	80800007 	ldb	r2,0(r16)
    68bc:	103ffc1e 	bne	r2,zero,68b0 <__alt_mem_Flash_flash_data+0xf40068b0>
    68c0:	dac02a17 	ldw	r11,168(sp)
    68c4:	82e3c83a 	sub	r17,r16,r11
    68c8:	88000f26 	beq	r17,zero,6908 <___vfprintf_internal_r+0x160>
    68cc:	d8c02017 	ldw	r3,128(sp)
    68d0:	d8801f17 	ldw	r2,124(sp)
    68d4:	dac02a17 	ldw	r11,168(sp)
    68d8:	1c47883a 	add	r3,r3,r17
    68dc:	10800044 	addi	r2,r2,1
    68e0:	d8c02015 	stw	r3,128(sp)
    68e4:	42c00015 	stw	r11,0(r8)
    68e8:	44400115 	stw	r17,4(r8)
    68ec:	d8801f15 	stw	r2,124(sp)
    68f0:	00c001c4 	movi	r3,7
    68f4:	18809316 	blt	r3,r2,6b44 <___vfprintf_internal_r+0x39c>
    68f8:	42000204 	addi	r8,r8,8
    68fc:	db002f17 	ldw	r12,188(sp)
    6900:	6459883a 	add	r12,r12,r17
    6904:	db002f15 	stw	r12,188(sp)
    6908:	80800007 	ldb	r2,0(r16)
    690c:	10009426 	beq	r2,zero,6b60 <___vfprintf_internal_r+0x3b8>
    6910:	80800044 	addi	r2,r16,1
    6914:	84000047 	ldb	r16,1(r16)
    6918:	d8002785 	stb	zero,158(sp)
    691c:	000d883a 	mov	r6,zero
    6920:	027fffc4 	movi	r9,-1
    6924:	d8002e15 	stw	zero,184(sp)
    6928:	0023883a 	mov	r17,zero
    692c:	01001604 	movi	r4,88
    6930:	01400244 	movi	r5,9
    6934:	02800a84 	movi	r10,42
    6938:	01c01b04 	movi	r7,108
    693c:	10c00044 	addi	r3,r2,1
    6940:	80bff804 	addi	r2,r16,-32
    6944:	2082cd36 	bltu	r4,r2,747c <___vfprintf_internal_r+0xcd4>
    6948:	100490ba 	slli	r2,r2,2
    694c:	02c00034 	movhi	r11,0
    6950:	5ada5804 	addi	r11,r11,26976
    6954:	12c5883a 	add	r2,r2,r11
    6958:	10800017 	ldw	r2,0(r2)
    695c:	1000683a 	jmp	r2
    6960:	00007294 	movui	zero,458
    6964:	0000747c 	xorhi	zero,zero,465
    6968:	0000747c 	xorhi	zero,zero,465
    696c:	000073e4 	muli	zero,zero,463
    6970:	0000747c 	xorhi	zero,zero,465
    6974:	0000747c 	xorhi	zero,zero,465
    6978:	0000747c 	xorhi	zero,zero,465
    697c:	0000747c 	xorhi	zero,zero,465
    6980:	0000747c 	xorhi	zero,zero,465
    6984:	0000747c 	xorhi	zero,zero,465
    6988:	000072b4 	movhi	zero,458
    698c:	000072e0 	cmpeqi	zero,zero,459
    6990:	0000747c 	xorhi	zero,zero,465
    6994:	00006ba0 	cmpeqi	zero,zero,430
    6998:	00006bb0 	cmpltui	zero,zero,430
    699c:	0000747c 	xorhi	zero,zero,465
    69a0:	00006bf0 	cmpltui	zero,zero,431
    69a4:	00006c00 	call	6c0 <moveDown+0x38>
    69a8:	00006c00 	call	6c0 <moveDown+0x38>
    69ac:	00006c00 	call	6c0 <moveDown+0x38>
    69b0:	00006c00 	call	6c0 <moveDown+0x38>
    69b4:	00006c00 	call	6c0 <moveDown+0x38>
    69b8:	00006c00 	call	6c0 <moveDown+0x38>
    69bc:	00006c00 	call	6c0 <moveDown+0x38>
    69c0:	00006c00 	call	6c0 <moveDown+0x38>
    69c4:	00006c00 	call	6c0 <moveDown+0x38>
    69c8:	0000747c 	xorhi	zero,zero,465
    69cc:	0000747c 	xorhi	zero,zero,465
    69d0:	0000747c 	xorhi	zero,zero,465
    69d4:	0000747c 	xorhi	zero,zero,465
    69d8:	0000747c 	xorhi	zero,zero,465
    69dc:	0000747c 	xorhi	zero,zero,465
    69e0:	0000747c 	xorhi	zero,zero,465
    69e4:	0000747c 	xorhi	zero,zero,465
    69e8:	0000747c 	xorhi	zero,zero,465
    69ec:	0000747c 	xorhi	zero,zero,465
    69f0:	00006c34 	movhi	zero,432
    69f4:	000070a4 	muli	zero,zero,450
    69f8:	0000747c 	xorhi	zero,zero,465
    69fc:	000070a4 	muli	zero,zero,450
    6a00:	0000747c 	xorhi	zero,zero,465
    6a04:	0000747c 	xorhi	zero,zero,465
    6a08:	0000747c 	xorhi	zero,zero,465
    6a0c:	0000747c 	xorhi	zero,zero,465
    6a10:	00007190 	cmplti	zero,zero,454
    6a14:	0000747c 	xorhi	zero,zero,465
    6a18:	0000747c 	xorhi	zero,zero,465
    6a1c:	00007038 	rdprs	zero,zero,448
    6a20:	0000747c 	xorhi	zero,zero,465
    6a24:	0000747c 	xorhi	zero,zero,465
    6a28:	0000747c 	xorhi	zero,zero,465
    6a2c:	0000747c 	xorhi	zero,zero,465
    6a30:	0000747c 	xorhi	zero,zero,465
    6a34:	00007074 	movhi	zero,449
    6a38:	0000747c 	xorhi	zero,zero,465
    6a3c:	0000747c 	xorhi	zero,zero,465
    6a40:	00007238 	rdprs	zero,zero,456
    6a44:	0000747c 	xorhi	zero,zero,465
    6a48:	0000747c 	xorhi	zero,zero,465
    6a4c:	0000747c 	xorhi	zero,zero,465
    6a50:	0000747c 	xorhi	zero,zero,465
    6a54:	0000747c 	xorhi	zero,zero,465
    6a58:	0000747c 	xorhi	zero,zero,465
    6a5c:	0000747c 	xorhi	zero,zero,465
    6a60:	0000747c 	xorhi	zero,zero,465
    6a64:	0000747c 	xorhi	zero,zero,465
    6a68:	0000747c 	xorhi	zero,zero,465
    6a6c:	000072f0 	cmpltui	zero,zero,459
    6a70:	000071a0 	cmpeqi	zero,zero,454
    6a74:	000070a4 	muli	zero,zero,450
    6a78:	000070a4 	muli	zero,zero,450
    6a7c:	000070a4 	muli	zero,zero,450
    6a80:	000071e0 	cmpeqi	zero,zero,455
    6a84:	000071a0 	cmpeqi	zero,zero,454
    6a88:	0000747c 	xorhi	zero,zero,465
    6a8c:	0000747c 	xorhi	zero,zero,465
    6a90:	000071f0 	cmpltui	zero,zero,455
    6a94:	0000747c 	xorhi	zero,zero,465
    6a98:	00007204 	movi	zero,456
    6a9c:	00007440 	call	744 <moveDown+0xbc>
    6aa0:	00007148 	cmpgei	zero,zero,453
    6aa4:	000073f4 	movhi	zero,463
    6aa8:	0000747c 	xorhi	zero,zero,465
    6aac:	00007330 	cmpltui	zero,zero,460
    6ab0:	0000747c 	xorhi	zero,zero,465
    6ab4:	00007404 	movi	zero,464
    6ab8:	0000747c 	xorhi	zero,zero,465
    6abc:	0000747c 	xorhi	zero,zero,465
    6ac0:	000073a4 	muli	zero,zero,462
    6ac4:	db002a17 	ldw	r12,168(sp)
    6ac8:	8323c83a 	sub	r17,r16,r12
    6acc:	003f7e06 	br	68c8 <__alt_mem_Flash_flash_data+0xf40068c8>
    6ad0:	b009883a 	mov	r4,r22
    6ad4:	b80b883a 	mov	r5,r23
    6ad8:	00087d80 	call	87d8 <__swsetup_r>
    6adc:	10000c1e 	bne	r2,zero,6b10 <___vfprintf_internal_r+0x368>
    6ae0:	b880030b 	ldhu	r2,12(r23)
    6ae4:	00c00284 	movi	r3,10
    6ae8:	1080068c 	andi	r2,r2,26
    6aec:	10ff561e 	bne	r2,r3,6848 <__alt_mem_Flash_flash_data+0xf4006848>
    6af0:	b880038f 	ldh	r2,14(r23)
    6af4:	103f5416 	blt	r2,zero,6848 <__alt_mem_Flash_flash_data+0xf4006848>
    6af8:	d9802a17 	ldw	r6,168(sp)
    6afc:	d9c02d17 	ldw	r7,180(sp)
    6b00:	b009883a 	mov	r4,r22
    6b04:	b80b883a 	mov	r5,r23
    6b08:	000871c0 	call	871c <__sbprintf>
    6b0c:	00000106 	br	6b14 <___vfprintf_internal_r+0x36c>
    6b10:	00bfffc4 	movi	r2,-1
    6b14:	dfc04917 	ldw	ra,292(sp)
    6b18:	df004817 	ldw	fp,288(sp)
    6b1c:	ddc04717 	ldw	r23,284(sp)
    6b20:	dd804617 	ldw	r22,280(sp)
    6b24:	dd404517 	ldw	r21,276(sp)
    6b28:	dd004417 	ldw	r20,272(sp)
    6b2c:	dcc04317 	ldw	r19,268(sp)
    6b30:	dc804217 	ldw	r18,264(sp)
    6b34:	dc404117 	ldw	r17,260(sp)
    6b38:	dc004017 	ldw	r16,256(sp)
    6b3c:	dec04a04 	addi	sp,sp,296
    6b40:	f800283a 	ret
    6b44:	b009883a 	mov	r4,r22
    6b48:	b80b883a 	mov	r5,r23
    6b4c:	d9801e04 	addi	r6,sp,120
    6b50:	000ecbc0 	call	ecbc <__sprint_r>
    6b54:	1000081e 	bne	r2,zero,6b78 <___vfprintf_internal_r+0x3d0>
    6b58:	da000404 	addi	r8,sp,16
    6b5c:	003f6706 	br	68fc <__alt_mem_Flash_flash_data+0xf40068fc>
    6b60:	d8802017 	ldw	r2,128(sp)
    6b64:	10000426 	beq	r2,zero,6b78 <___vfprintf_internal_r+0x3d0>
    6b68:	b009883a 	mov	r4,r22
    6b6c:	b80b883a 	mov	r5,r23
    6b70:	d9801e04 	addi	r6,sp,120
    6b74:	000ecbc0 	call	ecbc <__sprint_r>
    6b78:	b880030b 	ldhu	r2,12(r23)
    6b7c:	1080100c 	andi	r2,r2,64
    6b80:	103fe31e 	bne	r2,zero,6b10 <__alt_mem_Flash_flash_data+0xf4006b10>
    6b84:	d8802f17 	ldw	r2,188(sp)
    6b88:	003fe206 	br	6b14 <__alt_mem_Flash_flash_data+0xf4006b14>
    6b8c:	b009883a 	mov	r4,r22
    6b90:	000a8380 	call	a838 <__sinit>
    6b94:	003f1c06 	br	6808 <__alt_mem_Flash_flash_data+0xf4006808>
    6b98:	dc002a17 	ldw	r16,168(sp)
    6b9c:	003f5a06 	br	6908 <__alt_mem_Flash_flash_data+0xf4006908>
    6ba0:	1805883a 	mov	r2,r3
    6ba4:	8c400114 	ori	r17,r17,4
    6ba8:	1c000007 	ldb	r16,0(r3)
    6bac:	003f6306 	br	693c <__alt_mem_Flash_flash_data+0xf400693c>
    6bb0:	1c000007 	ldb	r16,0(r3)
    6bb4:	18800044 	addi	r2,r3,1
    6bb8:	8286ad26 	beq	r16,r10,8670 <___vfprintf_internal_r+0x1ec8>
    6bbc:	82fff404 	addi	r11,r16,-48
    6bc0:	1007883a 	mov	r3,r2
    6bc4:	0013883a 	mov	r9,zero
    6bc8:	2aff5d36 	bltu	r5,r11,6940 <__alt_mem_Flash_flash_data+0xf4006940>
    6bcc:	1c000007 	ldb	r16,0(r3)
    6bd0:	4a4002a4 	muli	r9,r9,10
    6bd4:	18c00044 	addi	r3,r3,1
    6bd8:	5a53883a 	add	r9,r11,r9
    6bdc:	82fff404 	addi	r11,r16,-48
    6be0:	2afffa2e 	bgeu	r5,r11,6bcc <__alt_mem_Flash_flash_data+0xf4006bcc>
    6be4:	483f560e 	bge	r9,zero,6940 <__alt_mem_Flash_flash_data+0xf4006940>
    6be8:	027fffc4 	movi	r9,-1
    6bec:	003f5406 	br	6940 <__alt_mem_Flash_flash_data+0xf4006940>
    6bf0:	8c402014 	ori	r17,r17,128
    6bf4:	1805883a 	mov	r2,r3
    6bf8:	1c000007 	ldb	r16,0(r3)
    6bfc:	003f4f06 	br	693c <__alt_mem_Flash_flash_data+0xf400693c>
    6c00:	1805883a 	mov	r2,r3
    6c04:	d8002e15 	stw	zero,184(sp)
    6c08:	82fff404 	addi	r11,r16,-48
    6c0c:	0019883a 	mov	r12,zero
    6c10:	14000007 	ldb	r16,0(r2)
    6c14:	630002a4 	muli	r12,r12,10
    6c18:	18c00044 	addi	r3,r3,1
    6c1c:	1805883a 	mov	r2,r3
    6c20:	62d9883a 	add	r12,r12,r11
    6c24:	82fff404 	addi	r11,r16,-48
    6c28:	2afff92e 	bgeu	r5,r11,6c10 <__alt_mem_Flash_flash_data+0xf4006c10>
    6c2c:	db002e15 	stw	r12,184(sp)
    6c30:	003f4306 	br	6940 <__alt_mem_Flash_flash_data+0xf4006940>
    6c34:	8c400414 	ori	r17,r17,16
    6c38:	d8c02a15 	stw	r3,168(sp)
    6c3c:	d9802785 	stb	r6,158(sp)
    6c40:	8880080c 	andi	r2,r17,32
    6c44:	d8c02d17 	ldw	r3,180(sp)
    6c48:	10015a26 	beq	r2,zero,71b4 <___vfprintf_internal_r+0xa0c>
    6c4c:	db002d17 	ldw	r12,180(sp)
    6c50:	18800117 	ldw	r2,4(r3)
    6c54:	1cc00017 	ldw	r19,0(r3)
    6c58:	63000204 	addi	r12,r12,8
    6c5c:	db002d15 	stw	r12,180(sp)
    6c60:	1039883a 	mov	fp,r2
    6c64:	10044516 	blt	r2,zero,7d7c <___vfprintf_internal_r+0x15d4>
    6c68:	dd402783 	ldbu	r21,158(sp)
    6c6c:	da403215 	stw	r9,200(sp)
    6c70:	00800044 	movi	r2,1
    6c74:	9f06b03a 	or	r3,r19,fp
    6c78:	48000216 	blt	r9,zero,6c84 <___vfprintf_internal_r+0x4dc>
    6c7c:	013fdfc4 	movi	r4,-129
    6c80:	8922703a 	and	r17,r17,r4
    6c84:	1802071e 	bne	r3,zero,74a4 <___vfprintf_internal_r+0xcfc>
    6c88:	4802fa26 	beq	r9,zero,7874 <___vfprintf_internal_r+0x10cc>
    6c8c:	10803fcc 	andi	r2,r2,255
    6c90:	00c00044 	movi	r3,1
    6c94:	10c22926 	beq	r2,r3,753c <___vfprintf_internal_r+0xd94>
    6c98:	00c00084 	movi	r3,2
    6c9c:	10c31726 	beq	r2,r3,78fc <___vfprintf_internal_r+0x1154>
    6ca0:	d8c01e04 	addi	r3,sp,120
    6ca4:	9808d0fa 	srli	r4,r19,3
    6ca8:	e00a977a 	slli	r5,fp,29
    6cac:	e038d0fa 	srli	fp,fp,3
    6cb0:	9cc001cc 	andi	r19,r19,7
    6cb4:	98800c04 	addi	r2,r19,48
    6cb8:	18ffffc4 	addi	r3,r3,-1
    6cbc:	2926b03a 	or	r19,r5,r4
    6cc0:	18800005 	stb	r2,0(r3)
    6cc4:	9f08b03a 	or	r4,r19,fp
    6cc8:	203ff61e 	bne	r4,zero,6ca4 <__alt_mem_Flash_flash_data+0xf4006ca4>
    6ccc:	8900004c 	andi	r4,r17,1
    6cd0:	d8c03115 	stw	r3,196(sp)
    6cd4:	2003931e 	bne	r4,zero,7b24 <___vfprintf_internal_r+0x137c>
    6cd8:	dac02817 	ldw	r11,160(sp)
    6cdc:	58e5c83a 	sub	r18,r11,r3
    6ce0:	9005883a 	mov	r2,r18
    6ce4:	9240010e 	bge	r18,r9,6cec <___vfprintf_internal_r+0x544>
    6ce8:	4805883a 	mov	r2,r9
    6cec:	d8802b15 	stw	r2,172(sp)
    6cf0:	d8003415 	stw	zero,208(sp)
    6cf4:	a8803fcc 	andi	r2,r21,255
    6cf8:	1080201c 	xori	r2,r2,128
    6cfc:	10bfe004 	addi	r2,r2,-128
    6d00:	10000326 	beq	r2,zero,6d10 <___vfprintf_internal_r+0x568>
    6d04:	db002b17 	ldw	r12,172(sp)
    6d08:	63000044 	addi	r12,r12,1
    6d0c:	db002b15 	stw	r12,172(sp)
    6d10:	88c0008c 	andi	r3,r17,2
    6d14:	d8c02c15 	stw	r3,176(sp)
    6d18:	18000326 	beq	r3,zero,6d28 <___vfprintf_internal_r+0x580>
    6d1c:	dac02b17 	ldw	r11,172(sp)
    6d20:	5ac00084 	addi	r11,r11,2
    6d24:	dac02b15 	stw	r11,172(sp)
    6d28:	8b00210c 	andi	r12,r17,132
    6d2c:	db003015 	stw	r12,192(sp)
    6d30:	6001da1e 	bne	r12,zero,749c <___vfprintf_internal_r+0xcf4>
    6d34:	dac02e17 	ldw	r11,184(sp)
    6d38:	db002b17 	ldw	r12,172(sp)
    6d3c:	5b39c83a 	sub	fp,r11,r12
    6d40:	0701d60e 	bge	zero,fp,749c <___vfprintf_internal_r+0xcf4>
    6d44:	02400404 	movi	r9,16
    6d48:	d8c02017 	ldw	r3,128(sp)
    6d4c:	d8801f17 	ldw	r2,124(sp)
    6d50:	4f053c0e 	bge	r9,fp,8244 <___vfprintf_internal_r+0x1a9c>
    6d54:	014000b4 	movhi	r5,2
    6d58:	2956b484 	addi	r5,r5,23250
    6d5c:	d9403615 	stw	r5,216(sp)
    6d60:	482b883a 	mov	r21,r9
    6d64:	04c001c4 	movi	r19,7
    6d68:	00000306 	br	6d78 <___vfprintf_internal_r+0x5d0>
    6d6c:	e73ffc04 	addi	fp,fp,-16
    6d70:	42000204 	addi	r8,r8,8
    6d74:	af00130e 	bge	r21,fp,6dc4 <___vfprintf_internal_r+0x61c>
    6d78:	02c000b4 	movhi	r11,2
    6d7c:	18c00404 	addi	r3,r3,16
    6d80:	10800044 	addi	r2,r2,1
    6d84:	5ad6b484 	addi	r11,r11,23250
    6d88:	42c00015 	stw	r11,0(r8)
    6d8c:	45400115 	stw	r21,4(r8)
    6d90:	d8c02015 	stw	r3,128(sp)
    6d94:	d8801f15 	stw	r2,124(sp)
    6d98:	98bff40e 	bge	r19,r2,6d6c <__alt_mem_Flash_flash_data+0xf4006d6c>
    6d9c:	b009883a 	mov	r4,r22
    6da0:	b80b883a 	mov	r5,r23
    6da4:	d9801e04 	addi	r6,sp,120
    6da8:	000ecbc0 	call	ecbc <__sprint_r>
    6dac:	103f721e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    6db0:	e73ffc04 	addi	fp,fp,-16
    6db4:	d8c02017 	ldw	r3,128(sp)
    6db8:	d8801f17 	ldw	r2,124(sp)
    6dbc:	da000404 	addi	r8,sp,16
    6dc0:	af3fed16 	blt	r21,fp,6d78 <__alt_mem_Flash_flash_data+0xf4006d78>
    6dc4:	db003617 	ldw	r12,216(sp)
    6dc8:	e0c7883a 	add	r3,fp,r3
    6dcc:	10800044 	addi	r2,r2,1
    6dd0:	43000015 	stw	r12,0(r8)
    6dd4:	47000115 	stw	fp,4(r8)
    6dd8:	d8c02015 	stw	r3,128(sp)
    6ddc:	d8801f15 	stw	r2,124(sp)
    6de0:	010001c4 	movi	r4,7
    6de4:	20830e16 	blt	r4,r2,7a20 <___vfprintf_internal_r+0x1278>
    6de8:	d8802787 	ldb	r2,158(sp)
    6dec:	42000204 	addi	r8,r8,8
    6df0:	10000c26 	beq	r2,zero,6e24 <___vfprintf_internal_r+0x67c>
    6df4:	d8801f17 	ldw	r2,124(sp)
    6df8:	d9002784 	addi	r4,sp,158
    6dfc:	18c00044 	addi	r3,r3,1
    6e00:	10800044 	addi	r2,r2,1
    6e04:	41000015 	stw	r4,0(r8)
    6e08:	01000044 	movi	r4,1
    6e0c:	41000115 	stw	r4,4(r8)
    6e10:	d8c02015 	stw	r3,128(sp)
    6e14:	d8801f15 	stw	r2,124(sp)
    6e18:	010001c4 	movi	r4,7
    6e1c:	2082a716 	blt	r4,r2,78bc <___vfprintf_internal_r+0x1114>
    6e20:	42000204 	addi	r8,r8,8
    6e24:	dac02c17 	ldw	r11,176(sp)
    6e28:	58000c26 	beq	r11,zero,6e5c <___vfprintf_internal_r+0x6b4>
    6e2c:	d8801f17 	ldw	r2,124(sp)
    6e30:	d9002704 	addi	r4,sp,156
    6e34:	18c00084 	addi	r3,r3,2
    6e38:	10800044 	addi	r2,r2,1
    6e3c:	41000015 	stw	r4,0(r8)
    6e40:	01000084 	movi	r4,2
    6e44:	41000115 	stw	r4,4(r8)
    6e48:	d8c02015 	stw	r3,128(sp)
    6e4c:	d8801f15 	stw	r2,124(sp)
    6e50:	010001c4 	movi	r4,7
    6e54:	2082a116 	blt	r4,r2,78dc <___vfprintf_internal_r+0x1134>
    6e58:	42000204 	addi	r8,r8,8
    6e5c:	db003017 	ldw	r12,192(sp)
    6e60:	00802004 	movi	r2,128
    6e64:	60820326 	beq	r12,r2,7674 <___vfprintf_internal_r+0xecc>
    6e68:	db003217 	ldw	r12,200(sp)
    6e6c:	64abc83a 	sub	r21,r12,r18
    6e70:	0540260e 	bge	zero,r21,6f0c <___vfprintf_internal_r+0x764>
    6e74:	07000404 	movi	fp,16
    6e78:	d8801f17 	ldw	r2,124(sp)
    6e7c:	e544570e 	bge	fp,r21,7fdc <___vfprintf_internal_r+0x1834>
    6e80:	014000b4 	movhi	r5,2
    6e84:	2956b084 	addi	r5,r5,23234
    6e88:	d9402c15 	stw	r5,176(sp)
    6e8c:	04c001c4 	movi	r19,7
    6e90:	00000306 	br	6ea0 <___vfprintf_internal_r+0x6f8>
    6e94:	ad7ffc04 	addi	r21,r21,-16
    6e98:	42000204 	addi	r8,r8,8
    6e9c:	e540110e 	bge	fp,r21,6ee4 <___vfprintf_internal_r+0x73c>
    6ea0:	18c00404 	addi	r3,r3,16
    6ea4:	10800044 	addi	r2,r2,1
    6ea8:	45000015 	stw	r20,0(r8)
    6eac:	47000115 	stw	fp,4(r8)
    6eb0:	d8c02015 	stw	r3,128(sp)
    6eb4:	d8801f15 	stw	r2,124(sp)
    6eb8:	98bff60e 	bge	r19,r2,6e94 <__alt_mem_Flash_flash_data+0xf4006e94>
    6ebc:	b009883a 	mov	r4,r22
    6ec0:	b80b883a 	mov	r5,r23
    6ec4:	d9801e04 	addi	r6,sp,120
    6ec8:	000ecbc0 	call	ecbc <__sprint_r>
    6ecc:	103f2a1e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    6ed0:	ad7ffc04 	addi	r21,r21,-16
    6ed4:	d8c02017 	ldw	r3,128(sp)
    6ed8:	d8801f17 	ldw	r2,124(sp)
    6edc:	da000404 	addi	r8,sp,16
    6ee0:	e57fef16 	blt	fp,r21,6ea0 <__alt_mem_Flash_flash_data+0xf4006ea0>
    6ee4:	dac02c17 	ldw	r11,176(sp)
    6ee8:	1d47883a 	add	r3,r3,r21
    6eec:	10800044 	addi	r2,r2,1
    6ef0:	42c00015 	stw	r11,0(r8)
    6ef4:	45400115 	stw	r21,4(r8)
    6ef8:	d8c02015 	stw	r3,128(sp)
    6efc:	d8801f15 	stw	r2,124(sp)
    6f00:	010001c4 	movi	r4,7
    6f04:	20826516 	blt	r4,r2,789c <___vfprintf_internal_r+0x10f4>
    6f08:	42000204 	addi	r8,r8,8
    6f0c:	8880400c 	andi	r2,r17,256
    6f10:	1001901e 	bne	r2,zero,7554 <___vfprintf_internal_r+0xdac>
    6f14:	d8801f17 	ldw	r2,124(sp)
    6f18:	db003117 	ldw	r12,196(sp)
    6f1c:	1c87883a 	add	r3,r3,r18
    6f20:	10800044 	addi	r2,r2,1
    6f24:	43000015 	stw	r12,0(r8)
    6f28:	44800115 	stw	r18,4(r8)
    6f2c:	d8c02015 	stw	r3,128(sp)
    6f30:	d8801f15 	stw	r2,124(sp)
    6f34:	010001c4 	movi	r4,7
    6f38:	20824016 	blt	r4,r2,783c <___vfprintf_internal_r+0x1094>
    6f3c:	42000204 	addi	r8,r8,8
    6f40:	8c40010c 	andi	r17,r17,4
    6f44:	88003126 	beq	r17,zero,700c <___vfprintf_internal_r+0x864>
    6f48:	db002e17 	ldw	r12,184(sp)
    6f4c:	dac02b17 	ldw	r11,172(sp)
    6f50:	62e1c83a 	sub	r16,r12,r11
    6f54:	04002d0e 	bge	zero,r16,700c <___vfprintf_internal_r+0x864>
    6f58:	04400404 	movi	r17,16
    6f5c:	d8801f17 	ldw	r2,124(sp)
    6f60:	8c05150e 	bge	r17,r16,83b8 <___vfprintf_internal_r+0x1c10>
    6f64:	010000b4 	movhi	r4,2
    6f68:	2116b484 	addi	r4,r4,23250
    6f6c:	d9003615 	stw	r4,216(sp)
    6f70:	048001c4 	movi	r18,7
    6f74:	00000306 	br	6f84 <___vfprintf_internal_r+0x7dc>
    6f78:	843ffc04 	addi	r16,r16,-16
    6f7c:	42000204 	addi	r8,r8,8
    6f80:	8c00130e 	bge	r17,r16,6fd0 <___vfprintf_internal_r+0x828>
    6f84:	014000b4 	movhi	r5,2
    6f88:	18c00404 	addi	r3,r3,16
    6f8c:	10800044 	addi	r2,r2,1
    6f90:	2956b484 	addi	r5,r5,23250
    6f94:	41400015 	stw	r5,0(r8)
    6f98:	44400115 	stw	r17,4(r8)
    6f9c:	d8c02015 	stw	r3,128(sp)
    6fa0:	d8801f15 	stw	r2,124(sp)
    6fa4:	90bff40e 	bge	r18,r2,6f78 <__alt_mem_Flash_flash_data+0xf4006f78>
    6fa8:	b009883a 	mov	r4,r22
    6fac:	b80b883a 	mov	r5,r23
    6fb0:	d9801e04 	addi	r6,sp,120
    6fb4:	000ecbc0 	call	ecbc <__sprint_r>
    6fb8:	103eef1e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    6fbc:	843ffc04 	addi	r16,r16,-16
    6fc0:	d8c02017 	ldw	r3,128(sp)
    6fc4:	d8801f17 	ldw	r2,124(sp)
    6fc8:	da000404 	addi	r8,sp,16
    6fcc:	8c3fed16 	blt	r17,r16,6f84 <__alt_mem_Flash_flash_data+0xf4006f84>
    6fd0:	dac03617 	ldw	r11,216(sp)
    6fd4:	1c07883a 	add	r3,r3,r16
    6fd8:	10800044 	addi	r2,r2,1
    6fdc:	42c00015 	stw	r11,0(r8)
    6fe0:	44000115 	stw	r16,4(r8)
    6fe4:	d8c02015 	stw	r3,128(sp)
    6fe8:	d8801f15 	stw	r2,124(sp)
    6fec:	010001c4 	movi	r4,7
    6ff0:	2080060e 	bge	r4,r2,700c <___vfprintf_internal_r+0x864>
    6ff4:	b009883a 	mov	r4,r22
    6ff8:	b80b883a 	mov	r5,r23
    6ffc:	d9801e04 	addi	r6,sp,120
    7000:	000ecbc0 	call	ecbc <__sprint_r>
    7004:	103edc1e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    7008:	d8c02017 	ldw	r3,128(sp)
    700c:	d8802b17 	ldw	r2,172(sp)
    7010:	db002e17 	ldw	r12,184(sp)
    7014:	1300010e 	bge	r2,r12,701c <___vfprintf_internal_r+0x874>
    7018:	6005883a 	mov	r2,r12
    701c:	dac02f17 	ldw	r11,188(sp)
    7020:	5897883a 	add	r11,r11,r2
    7024:	dac02f15 	stw	r11,188(sp)
    7028:	18020c1e 	bne	r3,zero,785c <___vfprintf_internal_r+0x10b4>
    702c:	d8001f15 	stw	zero,124(sp)
    7030:	da000404 	addi	r8,sp,16
    7034:	003e1706 	br	6894 <__alt_mem_Flash_flash_data+0xf4006894>
    7038:	8c400414 	ori	r17,r17,16
    703c:	d8c02a15 	stw	r3,168(sp)
    7040:	8880080c 	andi	r2,r17,32
    7044:	10010126 	beq	r2,zero,744c <___vfprintf_internal_r+0xca4>
    7048:	db002d17 	ldw	r12,180(sp)
    704c:	0005883a 	mov	r2,zero
    7050:	64c00017 	ldw	r19,0(r12)
    7054:	67000117 	ldw	fp,4(r12)
    7058:	63000204 	addi	r12,r12,8
    705c:	db002d15 	stw	r12,180(sp)
    7060:	9f06b03a 	or	r3,r19,fp
    7064:	d8002785 	stb	zero,158(sp)
    7068:	da403215 	stw	r9,200(sp)
    706c:	002b883a 	mov	r21,zero
    7070:	003f0106 	br	6c78 <__alt_mem_Flash_flash_data+0xf4006c78>
    7074:	8c400414 	ori	r17,r17,16
    7078:	d8c02a15 	stw	r3,168(sp)
    707c:	8880080c 	andi	r2,r17,32
    7080:	1000e326 	beq	r2,zero,7410 <___vfprintf_internal_r+0xc68>
    7084:	dac02d17 	ldw	r11,180(sp)
    7088:	00800044 	movi	r2,1
    708c:	5cc00017 	ldw	r19,0(r11)
    7090:	5f000117 	ldw	fp,4(r11)
    7094:	5ac00204 	addi	r11,r11,8
    7098:	dac02d15 	stw	r11,180(sp)
    709c:	9f06b03a 	or	r3,r19,fp
    70a0:	003ff006 	br	7064 <__alt_mem_Flash_flash_data+0xf4007064>
    70a4:	db002d17 	ldw	r12,180(sp)
    70a8:	dac02d17 	ldw	r11,180(sp)
    70ac:	d8c02a15 	stw	r3,168(sp)
    70b0:	63000017 	ldw	r12,0(r12)
    70b4:	5ac00117 	ldw	r11,4(r11)
    70b8:	d9802785 	stb	r6,158(sp)
    70bc:	6009883a 	mov	r4,r12
    70c0:	580b883a 	mov	r5,r11
    70c4:	db003715 	stw	r12,220(sp)
    70c8:	da003f15 	stw	r8,252(sp)
    70cc:	da403e15 	stw	r9,248(sp)
    70d0:	dac03915 	stw	r11,228(sp)
    70d4:	000d7140 	call	d714 <__fpclassifyd>
    70d8:	db002d17 	ldw	r12,180(sp)
    70dc:	04800044 	movi	r18,1
    70e0:	da003f17 	ldw	r8,252(sp)
    70e4:	64c00204 	addi	r19,r12,8
    70e8:	da403e17 	ldw	r9,248(sp)
    70ec:	d9003717 	ldw	r4,220(sp)
    70f0:	d9403917 	ldw	r5,228(sp)
    70f4:	14832b1e 	bne	r2,r18,7da4 <___vfprintf_internal_r+0x15fc>
    70f8:	000d883a 	mov	r6,zero
    70fc:	000f883a 	mov	r7,zero
    7100:	00128c40 	call	128c4 <__ledf2>
    7104:	da003f17 	ldw	r8,252(sp)
    7108:	1004b716 	blt	r2,zero,83e8 <___vfprintf_internal_r+0x1c40>
    710c:	dd402783 	ldbu	r21,158(sp)
    7110:	008011c4 	movi	r2,71
    7114:	14040e0e 	bge	r2,r16,8150 <___vfprintf_internal_r+0x19a8>
    7118:	00c000b4 	movhi	r3,2
    711c:	18d69904 	addi	r3,r3,23140
    7120:	d8c03115 	stw	r3,196(sp)
    7124:	02c000c4 	movi	r11,3
    7128:	00bfdfc4 	movi	r2,-129
    712c:	dac02b15 	stw	r11,172(sp)
    7130:	88a2703a 	and	r17,r17,r2
    7134:	dcc02d15 	stw	r19,180(sp)
    7138:	5825883a 	mov	r18,r11
    713c:	d8003215 	stw	zero,200(sp)
    7140:	d8003415 	stw	zero,208(sp)
    7144:	003eeb06 	br	6cf4 <__alt_mem_Flash_flash_data+0xf4006cf4>
    7148:	db002d17 	ldw	r12,180(sp)
    714c:	00800c04 	movi	r2,48
    7150:	d8802705 	stb	r2,156(sp)
    7154:	64c00017 	ldw	r19,0(r12)
    7158:	00801e04 	movi	r2,120
    715c:	d8802745 	stb	r2,157(sp)
    7160:	008000b4 	movhi	r2,2
    7164:	1096a104 	addi	r2,r2,23172
    7168:	63000104 	addi	r12,r12,4
    716c:	d8c02a15 	stw	r3,168(sp)
    7170:	d8803b15 	stw	r2,236(sp)
    7174:	0039883a 	mov	fp,zero
    7178:	8c400094 	ori	r17,r17,2
    717c:	db002d15 	stw	r12,180(sp)
    7180:	00800084 	movi	r2,2
    7184:	04001e04 	movi	r16,120
    7188:	9807883a 	mov	r3,r19
    718c:	003fb506 	br	7064 <__alt_mem_Flash_flash_data+0xf4007064>
    7190:	8c400214 	ori	r17,r17,8
    7194:	1805883a 	mov	r2,r3
    7198:	1c000007 	ldb	r16,0(r3)
    719c:	003de706 	br	693c <__alt_mem_Flash_flash_data+0xf400693c>
    71a0:	d8c02a15 	stw	r3,168(sp)
    71a4:	d9802785 	stb	r6,158(sp)
    71a8:	8880080c 	andi	r2,r17,32
    71ac:	d8c02d17 	ldw	r3,180(sp)
    71b0:	103ea61e 	bne	r2,zero,6c4c <__alt_mem_Flash_flash_data+0xf4006c4c>
    71b4:	8880040c 	andi	r2,r17,16
    71b8:	1002221e 	bne	r2,zero,7a44 <___vfprintf_internal_r+0x129c>
    71bc:	8880100c 	andi	r2,r17,64
    71c0:	10022026 	beq	r2,zero,7a44 <___vfprintf_internal_r+0x129c>
    71c4:	1cc0000f 	ldh	r19,0(r3)
    71c8:	db002d17 	ldw	r12,180(sp)
    71cc:	9839d7fa 	srai	fp,r19,31
    71d0:	63000104 	addi	r12,r12,4
    71d4:	db002d15 	stw	r12,180(sp)
    71d8:	e005883a 	mov	r2,fp
    71dc:	003ea106 	br	6c64 <__alt_mem_Flash_flash_data+0xf4006c64>
    71e0:	8c401014 	ori	r17,r17,64
    71e4:	1805883a 	mov	r2,r3
    71e8:	1c000007 	ldb	r16,0(r3)
    71ec:	003dd306 	br	693c <__alt_mem_Flash_flash_data+0xf400693c>
    71f0:	1c000007 	ldb	r16,0(r3)
    71f4:	81c3e926 	beq	r16,r7,819c <___vfprintf_internal_r+0x19f4>
    71f8:	8c400414 	ori	r17,r17,16
    71fc:	1805883a 	mov	r2,r3
    7200:	003dce06 	br	693c <__alt_mem_Flash_flash_data+0xf400693c>
    7204:	d8c02a15 	stw	r3,168(sp)
    7208:	d9802785 	stb	r6,158(sp)
    720c:	8880080c 	andi	r2,r17,32
    7210:	10034726 	beq	r2,zero,7f30 <___vfprintf_internal_r+0x1788>
    7214:	db002d17 	ldw	r12,180(sp)
    7218:	dac02f17 	ldw	r11,188(sp)
    721c:	60800017 	ldw	r2,0(r12)
    7220:	5807d7fa 	srai	r3,r11,31
    7224:	63000104 	addi	r12,r12,4
    7228:	db002d15 	stw	r12,180(sp)
    722c:	12c00015 	stw	r11,0(r2)
    7230:	10c00115 	stw	r3,4(r2)
    7234:	003d9706 	br	6894 <__alt_mem_Flash_flash_data+0xf4006894>
    7238:	030000b4 	movhi	r12,2
    723c:	63169c04 	addi	r12,r12,23152
    7240:	d8c02a15 	stw	r3,168(sp)
    7244:	d9802785 	stb	r6,158(sp)
    7248:	db003b15 	stw	r12,236(sp)
    724c:	88c0080c 	andi	r3,r17,32
    7250:	d8802d17 	ldw	r2,180(sp)
    7254:	18005b26 	beq	r3,zero,73c4 <___vfprintf_internal_r+0xc1c>
    7258:	dac02d17 	ldw	r11,180(sp)
    725c:	14c00017 	ldw	r19,0(r2)
    7260:	17000117 	ldw	fp,4(r2)
    7264:	5ac00204 	addi	r11,r11,8
    7268:	dac02d15 	stw	r11,180(sp)
    726c:	8880004c 	andi	r2,r17,1
    7270:	10022926 	beq	r2,zero,7b18 <___vfprintf_internal_r+0x1370>
    7274:	9f06b03a 	or	r3,r19,fp
    7278:	18032b26 	beq	r3,zero,7f28 <___vfprintf_internal_r+0x1780>
    727c:	00800c04 	movi	r2,48
    7280:	d8802705 	stb	r2,156(sp)
    7284:	dc002745 	stb	r16,157(sp)
    7288:	8c400094 	ori	r17,r17,2
    728c:	00800084 	movi	r2,2
    7290:	003f7406 	br	7064 <__alt_mem_Flash_flash_data+0xf4007064>
    7294:	30803fcc 	andi	r2,r6,255
    7298:	1080201c 	xori	r2,r2,128
    729c:	10bfe004 	addi	r2,r2,-128
    72a0:	1003351e 	bne	r2,zero,7f78 <___vfprintf_internal_r+0x17d0>
    72a4:	1805883a 	mov	r2,r3
    72a8:	01800804 	movi	r6,32
    72ac:	1c000007 	ldb	r16,0(r3)
    72b0:	003da206 	br	693c <__alt_mem_Flash_flash_data+0xf400693c>
    72b4:	dac02d17 	ldw	r11,180(sp)
    72b8:	db002d17 	ldw	r12,180(sp)
    72bc:	5ac00017 	ldw	r11,0(r11)
    72c0:	dac02e15 	stw	r11,184(sp)
    72c4:	62c00104 	addi	r11,r12,4
    72c8:	db002e17 	ldw	r12,184(sp)
    72cc:	6003ad16 	blt	r12,zero,8184 <___vfprintf_internal_r+0x19dc>
    72d0:	dac02d15 	stw	r11,180(sp)
    72d4:	1805883a 	mov	r2,r3
    72d8:	1c000007 	ldb	r16,0(r3)
    72dc:	003d9706 	br	693c <__alt_mem_Flash_flash_data+0xf400693c>
    72e0:	1805883a 	mov	r2,r3
    72e4:	01800ac4 	movi	r6,43
    72e8:	1c000007 	ldb	r16,0(r3)
    72ec:	003d9306 	br	693c <__alt_mem_Flash_flash_data+0xf400693c>
    72f0:	db002d17 	ldw	r12,180(sp)
    72f4:	d8c02a15 	stw	r3,168(sp)
    72f8:	00c00044 	movi	r3,1
    72fc:	60800017 	ldw	r2,0(r12)
    7300:	63000104 	addi	r12,r12,4
    7304:	d8c02b15 	stw	r3,172(sp)
    7308:	d8002785 	stb	zero,158(sp)
    730c:	d8801405 	stb	r2,80(sp)
    7310:	db002d15 	stw	r12,180(sp)
    7314:	dac01404 	addi	r11,sp,80
    7318:	1825883a 	mov	r18,r3
    731c:	d8003215 	stw	zero,200(sp)
    7320:	d8003415 	stw	zero,208(sp)
    7324:	dac03115 	stw	r11,196(sp)
    7328:	0005883a 	mov	r2,zero
    732c:	003e7806 	br	6d10 <__alt_mem_Flash_flash_data+0xf4006d10>
    7330:	dac02d17 	ldw	r11,180(sp)
    7334:	db002d17 	ldw	r12,180(sp)
    7338:	d8c02a15 	stw	r3,168(sp)
    733c:	5ac00017 	ldw	r11,0(r11)
    7340:	d8002785 	stb	zero,158(sp)
    7344:	64c00104 	addi	r19,r12,4
    7348:	dac03115 	stw	r11,196(sp)
    734c:	5803fe26 	beq	r11,zero,8348 <___vfprintf_internal_r+0x1ba0>
    7350:	d9003117 	ldw	r4,196(sp)
    7354:	4803b416 	blt	r9,zero,8228 <___vfprintf_internal_r+0x1a80>
    7358:	480d883a 	mov	r6,r9
    735c:	000b883a 	mov	r5,zero
    7360:	da003f15 	stw	r8,252(sp)
    7364:	da403e15 	stw	r9,248(sp)
    7368:	000bd240 	call	bd24 <memchr>
    736c:	da003f17 	ldw	r8,252(sp)
    7370:	da403e17 	ldw	r9,248(sp)
    7374:	10043026 	beq	r2,zero,8438 <___vfprintf_internal_r+0x1c90>
    7378:	d8c03117 	ldw	r3,196(sp)
    737c:	10e5c83a 	sub	r18,r2,r3
    7380:	4c836b16 	blt	r9,r18,8130 <___vfprintf_internal_r+0x1988>
    7384:	9005883a 	mov	r2,r18
    7388:	9003ac16 	blt	r18,zero,823c <___vfprintf_internal_r+0x1a94>
    738c:	dd402783 	ldbu	r21,158(sp)
    7390:	d8802b15 	stw	r2,172(sp)
    7394:	dcc02d15 	stw	r19,180(sp)
    7398:	d8003215 	stw	zero,200(sp)
    739c:	d8003415 	stw	zero,208(sp)
    73a0:	003e5406 	br	6cf4 <__alt_mem_Flash_flash_data+0xf4006cf4>
    73a4:	008000b4 	movhi	r2,2
    73a8:	1096a104 	addi	r2,r2,23172
    73ac:	d8c02a15 	stw	r3,168(sp)
    73b0:	d8803b15 	stw	r2,236(sp)
    73b4:	d9802785 	stb	r6,158(sp)
    73b8:	88c0080c 	andi	r3,r17,32
    73bc:	d8802d17 	ldw	r2,180(sp)
    73c0:	183fa51e 	bne	r3,zero,7258 <__alt_mem_Flash_flash_data+0xf4007258>
    73c4:	88c0040c 	andi	r3,r17,16
    73c8:	1802ee26 	beq	r3,zero,7f84 <___vfprintf_internal_r+0x17dc>
    73cc:	db002d17 	ldw	r12,180(sp)
    73d0:	14c00017 	ldw	r19,0(r2)
    73d4:	0039883a 	mov	fp,zero
    73d8:	63000104 	addi	r12,r12,4
    73dc:	db002d15 	stw	r12,180(sp)
    73e0:	003fa206 	br	726c <__alt_mem_Flash_flash_data+0xf400726c>
    73e4:	8c400054 	ori	r17,r17,1
    73e8:	1805883a 	mov	r2,r3
    73ec:	1c000007 	ldb	r16,0(r3)
    73f0:	003d5206 	br	693c <__alt_mem_Flash_flash_data+0xf400693c>
    73f4:	8c400814 	ori	r17,r17,32
    73f8:	1805883a 	mov	r2,r3
    73fc:	1c000007 	ldb	r16,0(r3)
    7400:	003d4e06 	br	693c <__alt_mem_Flash_flash_data+0xf400693c>
    7404:	d8c02a15 	stw	r3,168(sp)
    7408:	8880080c 	andi	r2,r17,32
    740c:	103f1d1e 	bne	r2,zero,7084 <__alt_mem_Flash_flash_data+0xf4007084>
    7410:	8880040c 	andi	r2,r17,16
    7414:	1001b81e 	bne	r2,zero,7af8 <___vfprintf_internal_r+0x1350>
    7418:	8880100c 	andi	r2,r17,64
    741c:	1001b626 	beq	r2,zero,7af8 <___vfprintf_internal_r+0x1350>
    7420:	dac02d17 	ldw	r11,180(sp)
    7424:	0039883a 	mov	fp,zero
    7428:	00800044 	movi	r2,1
    742c:	5cc0000b 	ldhu	r19,0(r11)
    7430:	5ac00104 	addi	r11,r11,4
    7434:	dac02d15 	stw	r11,180(sp)
    7438:	9807883a 	mov	r3,r19
    743c:	003f0906 	br	7064 <__alt_mem_Flash_flash_data+0xf4007064>
    7440:	d8c02a15 	stw	r3,168(sp)
    7444:	8880080c 	andi	r2,r17,32
    7448:	103eff1e 	bne	r2,zero,7048 <__alt_mem_Flash_flash_data+0xf4007048>
    744c:	8880040c 	andi	r2,r17,16
    7450:	1001a11e 	bne	r2,zero,7ad8 <___vfprintf_internal_r+0x1330>
    7454:	8880100c 	andi	r2,r17,64
    7458:	10019f26 	beq	r2,zero,7ad8 <___vfprintf_internal_r+0x1330>
    745c:	db002d17 	ldw	r12,180(sp)
    7460:	0039883a 	mov	fp,zero
    7464:	0005883a 	mov	r2,zero
    7468:	64c0000b 	ldhu	r19,0(r12)
    746c:	63000104 	addi	r12,r12,4
    7470:	db002d15 	stw	r12,180(sp)
    7474:	9807883a 	mov	r3,r19
    7478:	003efa06 	br	7064 <__alt_mem_Flash_flash_data+0xf4007064>
    747c:	d8c02a15 	stw	r3,168(sp)
    7480:	d9802785 	stb	r6,158(sp)
    7484:	803db626 	beq	r16,zero,6b60 <__alt_mem_Flash_flash_data+0xf4006b60>
    7488:	00c00044 	movi	r3,1
    748c:	d8c02b15 	stw	r3,172(sp)
    7490:	dc001405 	stb	r16,80(sp)
    7494:	d8002785 	stb	zero,158(sp)
    7498:	003f9e06 	br	7314 <__alt_mem_Flash_flash_data+0xf4007314>
    749c:	d8c02017 	ldw	r3,128(sp)
    74a0:	003e5306 	br	6df0 <__alt_mem_Flash_flash_data+0xf4006df0>
    74a4:	10803fcc 	andi	r2,r2,255
    74a8:	00c00044 	movi	r3,1
    74ac:	10fdfa1e 	bne	r2,r3,6c98 <__alt_mem_Flash_flash_data+0xf4006c98>
    74b0:	e000021e 	bne	fp,zero,74bc <___vfprintf_internal_r+0xd14>
    74b4:	00800244 	movi	r2,9
    74b8:	14c0202e 	bgeu	r2,r19,753c <___vfprintf_internal_r+0xd94>
    74bc:	dc002b15 	stw	r16,172(sp)
    74c0:	dc402c15 	stw	r17,176(sp)
    74c4:	9821883a 	mov	r16,r19
    74c8:	e023883a 	mov	r17,fp
    74cc:	dc801e04 	addi	r18,sp,120
    74d0:	4827883a 	mov	r19,r9
    74d4:	4039883a 	mov	fp,r8
    74d8:	8009883a 	mov	r4,r16
    74dc:	880b883a 	mov	r5,r17
    74e0:	01800284 	movi	r6,10
    74e4:	000f883a 	mov	r7,zero
    74e8:	0010f3c0 	call	10f3c <__umoddi3>
    74ec:	10800c04 	addi	r2,r2,48
    74f0:	94bfffc4 	addi	r18,r18,-1
    74f4:	8009883a 	mov	r4,r16
    74f8:	880b883a 	mov	r5,r17
    74fc:	01800284 	movi	r6,10
    7500:	000f883a 	mov	r7,zero
    7504:	90800005 	stb	r2,0(r18)
    7508:	001097c0 	call	1097c <__udivdi3>
    750c:	1021883a 	mov	r16,r2
    7510:	10c4b03a 	or	r2,r2,r3
    7514:	1823883a 	mov	r17,r3
    7518:	103fef1e 	bne	r2,zero,74d8 <__alt_mem_Flash_flash_data+0xf40074d8>
    751c:	dac02817 	ldw	r11,160(sp)
    7520:	dc803115 	stw	r18,196(sp)
    7524:	dc002b17 	ldw	r16,172(sp)
    7528:	dc402c17 	ldw	r17,176(sp)
    752c:	9813883a 	mov	r9,r19
    7530:	e011883a 	mov	r8,fp
    7534:	5ca5c83a 	sub	r18,r11,r18
    7538:	003de906 	br	6ce0 <__alt_mem_Flash_flash_data+0xf4006ce0>
    753c:	9cc00c04 	addi	r19,r19,48
    7540:	d8c01dc4 	addi	r3,sp,119
    7544:	dcc01dc5 	stb	r19,119(sp)
    7548:	dc803c17 	ldw	r18,240(sp)
    754c:	d8c03115 	stw	r3,196(sp)
    7550:	003de306 	br	6ce0 <__alt_mem_Flash_flash_data+0xf4006ce0>
    7554:	00801944 	movi	r2,101
    7558:	1400710e 	bge	r2,r16,7720 <___vfprintf_internal_r+0xf78>
    755c:	d9003717 	ldw	r4,220(sp)
    7560:	d9403917 	ldw	r5,228(sp)
    7564:	000d883a 	mov	r6,zero
    7568:	000f883a 	mov	r7,zero
    756c:	d8c03d15 	stw	r3,244(sp)
    7570:	da003f15 	stw	r8,252(sp)
    7574:	00127600 	call	12760 <__eqdf2>
    7578:	d8c03d17 	ldw	r3,244(sp)
    757c:	da003f17 	ldw	r8,252(sp)
    7580:	1000ef1e 	bne	r2,zero,7940 <___vfprintf_internal_r+0x1198>
    7584:	d8801f17 	ldw	r2,124(sp)
    7588:	010000b4 	movhi	r4,2
    758c:	2116a804 	addi	r4,r4,23200
    7590:	18c00044 	addi	r3,r3,1
    7594:	10800044 	addi	r2,r2,1
    7598:	41000015 	stw	r4,0(r8)
    759c:	01000044 	movi	r4,1
    75a0:	41000115 	stw	r4,4(r8)
    75a4:	d8c02015 	stw	r3,128(sp)
    75a8:	d8801f15 	stw	r2,124(sp)
    75ac:	010001c4 	movi	r4,7
    75b0:	20828e16 	blt	r4,r2,7fec <___vfprintf_internal_r+0x1844>
    75b4:	42000204 	addi	r8,r8,8
    75b8:	d8802617 	ldw	r2,152(sp)
    75bc:	dac03317 	ldw	r11,204(sp)
    75c0:	12c00216 	blt	r2,r11,75cc <___vfprintf_internal_r+0xe24>
    75c4:	8880004c 	andi	r2,r17,1
    75c8:	103e5d26 	beq	r2,zero,6f40 <__alt_mem_Flash_flash_data+0xf4006f40>
    75cc:	db003817 	ldw	r12,224(sp)
    75d0:	d8801f17 	ldw	r2,124(sp)
    75d4:	dac03517 	ldw	r11,212(sp)
    75d8:	1b07883a 	add	r3,r3,r12
    75dc:	10800044 	addi	r2,r2,1
    75e0:	42c00015 	stw	r11,0(r8)
    75e4:	43000115 	stw	r12,4(r8)
    75e8:	d8c02015 	stw	r3,128(sp)
    75ec:	d8801f15 	stw	r2,124(sp)
    75f0:	010001c4 	movi	r4,7
    75f4:	2082ed16 	blt	r4,r2,81ac <___vfprintf_internal_r+0x1a04>
    75f8:	42000204 	addi	r8,r8,8
    75fc:	db003317 	ldw	r12,204(sp)
    7600:	643fffc4 	addi	r16,r12,-1
    7604:	043e4e0e 	bge	zero,r16,6f40 <__alt_mem_Flash_flash_data+0xf4006f40>
    7608:	04800404 	movi	r18,16
    760c:	d8801f17 	ldw	r2,124(sp)
    7610:	94007e0e 	bge	r18,r16,780c <___vfprintf_internal_r+0x1064>
    7614:	014000b4 	movhi	r5,2
    7618:	2956b084 	addi	r5,r5,23234
    761c:	d9402c15 	stw	r5,176(sp)
    7620:	054001c4 	movi	r21,7
    7624:	00000306 	br	7634 <___vfprintf_internal_r+0xe8c>
    7628:	42000204 	addi	r8,r8,8
    762c:	843ffc04 	addi	r16,r16,-16
    7630:	9400790e 	bge	r18,r16,7818 <___vfprintf_internal_r+0x1070>
    7634:	18c00404 	addi	r3,r3,16
    7638:	10800044 	addi	r2,r2,1
    763c:	45000015 	stw	r20,0(r8)
    7640:	44800115 	stw	r18,4(r8)
    7644:	d8c02015 	stw	r3,128(sp)
    7648:	d8801f15 	stw	r2,124(sp)
    764c:	a8bff60e 	bge	r21,r2,7628 <__alt_mem_Flash_flash_data+0xf4007628>
    7650:	b009883a 	mov	r4,r22
    7654:	b80b883a 	mov	r5,r23
    7658:	d9801e04 	addi	r6,sp,120
    765c:	000ecbc0 	call	ecbc <__sprint_r>
    7660:	103d451e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    7664:	d8c02017 	ldw	r3,128(sp)
    7668:	d8801f17 	ldw	r2,124(sp)
    766c:	da000404 	addi	r8,sp,16
    7670:	003fee06 	br	762c <__alt_mem_Flash_flash_data+0xf400762c>
    7674:	dac02e17 	ldw	r11,184(sp)
    7678:	db002b17 	ldw	r12,172(sp)
    767c:	5b2bc83a 	sub	r21,r11,r12
    7680:	057df90e 	bge	zero,r21,6e68 <__alt_mem_Flash_flash_data+0xf4006e68>
    7684:	07000404 	movi	fp,16
    7688:	d8801f17 	ldw	r2,124(sp)
    768c:	e543640e 	bge	fp,r21,8420 <___vfprintf_internal_r+0x1c78>
    7690:	014000b4 	movhi	r5,2
    7694:	2956b084 	addi	r5,r5,23234
    7698:	d9402c15 	stw	r5,176(sp)
    769c:	04c001c4 	movi	r19,7
    76a0:	00000306 	br	76b0 <___vfprintf_internal_r+0xf08>
    76a4:	ad7ffc04 	addi	r21,r21,-16
    76a8:	42000204 	addi	r8,r8,8
    76ac:	e540110e 	bge	fp,r21,76f4 <___vfprintf_internal_r+0xf4c>
    76b0:	18c00404 	addi	r3,r3,16
    76b4:	10800044 	addi	r2,r2,1
    76b8:	45000015 	stw	r20,0(r8)
    76bc:	47000115 	stw	fp,4(r8)
    76c0:	d8c02015 	stw	r3,128(sp)
    76c4:	d8801f15 	stw	r2,124(sp)
    76c8:	98bff60e 	bge	r19,r2,76a4 <__alt_mem_Flash_flash_data+0xf40076a4>
    76cc:	b009883a 	mov	r4,r22
    76d0:	b80b883a 	mov	r5,r23
    76d4:	d9801e04 	addi	r6,sp,120
    76d8:	000ecbc0 	call	ecbc <__sprint_r>
    76dc:	103d261e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    76e0:	ad7ffc04 	addi	r21,r21,-16
    76e4:	d8c02017 	ldw	r3,128(sp)
    76e8:	d8801f17 	ldw	r2,124(sp)
    76ec:	da000404 	addi	r8,sp,16
    76f0:	e57fef16 	blt	fp,r21,76b0 <__alt_mem_Flash_flash_data+0xf40076b0>
    76f4:	dac02c17 	ldw	r11,176(sp)
    76f8:	1d47883a 	add	r3,r3,r21
    76fc:	10800044 	addi	r2,r2,1
    7700:	42c00015 	stw	r11,0(r8)
    7704:	45400115 	stw	r21,4(r8)
    7708:	d8c02015 	stw	r3,128(sp)
    770c:	d8801f15 	stw	r2,124(sp)
    7710:	010001c4 	movi	r4,7
    7714:	20819116 	blt	r4,r2,7d5c <___vfprintf_internal_r+0x15b4>
    7718:	42000204 	addi	r8,r8,8
    771c:	003dd206 	br	6e68 <__alt_mem_Flash_flash_data+0xf4006e68>
    7720:	db003317 	ldw	r12,204(sp)
    7724:	00800044 	movi	r2,1
    7728:	18c00044 	addi	r3,r3,1
    772c:	1301530e 	bge	r2,r12,7c7c <___vfprintf_internal_r+0x14d4>
    7730:	dc001f17 	ldw	r16,124(sp)
    7734:	dac03117 	ldw	r11,196(sp)
    7738:	00800044 	movi	r2,1
    773c:	84000044 	addi	r16,r16,1
    7740:	40800115 	stw	r2,4(r8)
    7744:	42c00015 	stw	r11,0(r8)
    7748:	d8c02015 	stw	r3,128(sp)
    774c:	dc001f15 	stw	r16,124(sp)
    7750:	008001c4 	movi	r2,7
    7754:	14016b16 	blt	r2,r16,7d04 <___vfprintf_internal_r+0x155c>
    7758:	42000204 	addi	r8,r8,8
    775c:	db003817 	ldw	r12,224(sp)
    7760:	dac03517 	ldw	r11,212(sp)
    7764:	84000044 	addi	r16,r16,1
    7768:	1b07883a 	add	r3,r3,r12
    776c:	42c00015 	stw	r11,0(r8)
    7770:	43000115 	stw	r12,4(r8)
    7774:	d8c02015 	stw	r3,128(sp)
    7778:	dc001f15 	stw	r16,124(sp)
    777c:	008001c4 	movi	r2,7
    7780:	14016916 	blt	r2,r16,7d28 <___vfprintf_internal_r+0x1580>
    7784:	44800204 	addi	r18,r8,8
    7788:	d9003717 	ldw	r4,220(sp)
    778c:	d9403917 	ldw	r5,228(sp)
    7790:	000d883a 	mov	r6,zero
    7794:	000f883a 	mov	r7,zero
    7798:	d8c03d15 	stw	r3,244(sp)
    779c:	00127600 	call	12760 <__eqdf2>
    77a0:	d8c03d17 	ldw	r3,244(sp)
    77a4:	db003317 	ldw	r12,204(sp)
    77a8:	1000ad26 	beq	r2,zero,7a60 <___vfprintf_internal_r+0x12b8>
    77ac:	dac03117 	ldw	r11,196(sp)
    77b0:	60bfffc4 	addi	r2,r12,-1
    77b4:	1887883a 	add	r3,r3,r2
    77b8:	59000044 	addi	r4,r11,1
    77bc:	84000044 	addi	r16,r16,1
    77c0:	90800115 	stw	r2,4(r18)
    77c4:	91000015 	stw	r4,0(r18)
    77c8:	d8c02015 	stw	r3,128(sp)
    77cc:	dc001f15 	stw	r16,124(sp)
    77d0:	008001c4 	movi	r2,7
    77d4:	14014216 	blt	r2,r16,7ce0 <___vfprintf_internal_r+0x1538>
    77d8:	94800204 	addi	r18,r18,8
    77dc:	dac03a17 	ldw	r11,232(sp)
    77e0:	dd4022c4 	addi	r21,sp,139
    77e4:	84000044 	addi	r16,r16,1
    77e8:	1ac7883a 	add	r3,r3,r11
    77ec:	95400015 	stw	r21,0(r18)
    77f0:	92c00115 	stw	r11,4(r18)
    77f4:	d8c02015 	stw	r3,128(sp)
    77f8:	dc001f15 	stw	r16,124(sp)
    77fc:	008001c4 	movi	r2,7
    7800:	14000e16 	blt	r2,r16,783c <___vfprintf_internal_r+0x1094>
    7804:	92000204 	addi	r8,r18,8
    7808:	003dcd06 	br	6f40 <__alt_mem_Flash_flash_data+0xf4006f40>
    780c:	010000b4 	movhi	r4,2
    7810:	2116b084 	addi	r4,r4,23234
    7814:	d9002c15 	stw	r4,176(sp)
    7818:	dac02c17 	ldw	r11,176(sp)
    781c:	1c07883a 	add	r3,r3,r16
    7820:	44000115 	stw	r16,4(r8)
    7824:	42c00015 	stw	r11,0(r8)
    7828:	10800044 	addi	r2,r2,1
    782c:	d8c02015 	stw	r3,128(sp)
    7830:	d8801f15 	stw	r2,124(sp)
    7834:	010001c4 	movi	r4,7
    7838:	20bdc00e 	bge	r4,r2,6f3c <__alt_mem_Flash_flash_data+0xf4006f3c>
    783c:	b009883a 	mov	r4,r22
    7840:	b80b883a 	mov	r5,r23
    7844:	d9801e04 	addi	r6,sp,120
    7848:	000ecbc0 	call	ecbc <__sprint_r>
    784c:	103cca1e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    7850:	d8c02017 	ldw	r3,128(sp)
    7854:	da000404 	addi	r8,sp,16
    7858:	003db906 	br	6f40 <__alt_mem_Flash_flash_data+0xf4006f40>
    785c:	b009883a 	mov	r4,r22
    7860:	b80b883a 	mov	r5,r23
    7864:	d9801e04 	addi	r6,sp,120
    7868:	000ecbc0 	call	ecbc <__sprint_r>
    786c:	103def26 	beq	r2,zero,702c <__alt_mem_Flash_flash_data+0xf400702c>
    7870:	003cc106 	br	6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    7874:	10803fcc 	andi	r2,r2,255
    7878:	1000651e 	bne	r2,zero,7a10 <___vfprintf_internal_r+0x1268>
    787c:	8880004c 	andi	r2,r17,1
    7880:	10013226 	beq	r2,zero,7d4c <___vfprintf_internal_r+0x15a4>
    7884:	00800c04 	movi	r2,48
    7888:	d8c01dc4 	addi	r3,sp,119
    788c:	d8801dc5 	stb	r2,119(sp)
    7890:	dc803c17 	ldw	r18,240(sp)
    7894:	d8c03115 	stw	r3,196(sp)
    7898:	003d1106 	br	6ce0 <__alt_mem_Flash_flash_data+0xf4006ce0>
    789c:	b009883a 	mov	r4,r22
    78a0:	b80b883a 	mov	r5,r23
    78a4:	d9801e04 	addi	r6,sp,120
    78a8:	000ecbc0 	call	ecbc <__sprint_r>
    78ac:	103cb21e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    78b0:	d8c02017 	ldw	r3,128(sp)
    78b4:	da000404 	addi	r8,sp,16
    78b8:	003d9406 	br	6f0c <__alt_mem_Flash_flash_data+0xf4006f0c>
    78bc:	b009883a 	mov	r4,r22
    78c0:	b80b883a 	mov	r5,r23
    78c4:	d9801e04 	addi	r6,sp,120
    78c8:	000ecbc0 	call	ecbc <__sprint_r>
    78cc:	103caa1e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    78d0:	d8c02017 	ldw	r3,128(sp)
    78d4:	da000404 	addi	r8,sp,16
    78d8:	003d5206 	br	6e24 <__alt_mem_Flash_flash_data+0xf4006e24>
    78dc:	b009883a 	mov	r4,r22
    78e0:	b80b883a 	mov	r5,r23
    78e4:	d9801e04 	addi	r6,sp,120
    78e8:	000ecbc0 	call	ecbc <__sprint_r>
    78ec:	103ca21e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    78f0:	d8c02017 	ldw	r3,128(sp)
    78f4:	da000404 	addi	r8,sp,16
    78f8:	003d5806 	br	6e5c <__alt_mem_Flash_flash_data+0xf4006e5c>
    78fc:	d9403b17 	ldw	r5,236(sp)
    7900:	d8c01e04 	addi	r3,sp,120
    7904:	988003cc 	andi	r2,r19,15
    7908:	e008973a 	slli	r4,fp,28
    790c:	2885883a 	add	r2,r5,r2
    7910:	9826d13a 	srli	r19,r19,4
    7914:	10800003 	ldbu	r2,0(r2)
    7918:	e038d13a 	srli	fp,fp,4
    791c:	18ffffc4 	addi	r3,r3,-1
    7920:	24e6b03a 	or	r19,r4,r19
    7924:	18800005 	stb	r2,0(r3)
    7928:	9f04b03a 	or	r2,r19,fp
    792c:	103ff51e 	bne	r2,zero,7904 <__alt_mem_Flash_flash_data+0xf4007904>
    7930:	db002817 	ldw	r12,160(sp)
    7934:	d8c03115 	stw	r3,196(sp)
    7938:	60e5c83a 	sub	r18,r12,r3
    793c:	003ce806 	br	6ce0 <__alt_mem_Flash_flash_data+0xf4006ce0>
    7940:	dc002617 	ldw	r16,152(sp)
    7944:	0401b10e 	bge	zero,r16,800c <___vfprintf_internal_r+0x1864>
    7948:	db003117 	ldw	r12,196(sp)
    794c:	dac03317 	ldw	r11,204(sp)
    7950:	62e1883a 	add	r16,r12,r11
    7954:	db003417 	ldw	r12,208(sp)
    7958:	5825883a 	mov	r18,r11
    795c:	62c0010e 	bge	r12,r11,7964 <___vfprintf_internal_r+0x11bc>
    7960:	6025883a 	mov	r18,r12
    7964:	04800b0e 	bge	zero,r18,7994 <___vfprintf_internal_r+0x11ec>
    7968:	d8801f17 	ldw	r2,124(sp)
    796c:	dac03117 	ldw	r11,196(sp)
    7970:	1c87883a 	add	r3,r3,r18
    7974:	10800044 	addi	r2,r2,1
    7978:	42c00015 	stw	r11,0(r8)
    797c:	44800115 	stw	r18,4(r8)
    7980:	d8c02015 	stw	r3,128(sp)
    7984:	d8801f15 	stw	r2,124(sp)
    7988:	010001c4 	movi	r4,7
    798c:	20824f16 	blt	r4,r2,82cc <___vfprintf_internal_r+0x1b24>
    7990:	42000204 	addi	r8,r8,8
    7994:	90024b16 	blt	r18,zero,82c4 <___vfprintf_internal_r+0x1b1c>
    7998:	db003417 	ldw	r12,208(sp)
    799c:	64a5c83a 	sub	r18,r12,r18
    79a0:	0480730e 	bge	zero,r18,7b70 <___vfprintf_internal_r+0x13c8>
    79a4:	05400404 	movi	r21,16
    79a8:	d8801f17 	ldw	r2,124(sp)
    79ac:	ac817d0e 	bge	r21,r18,7fa4 <___vfprintf_internal_r+0x17fc>
    79b0:	014000b4 	movhi	r5,2
    79b4:	2956b084 	addi	r5,r5,23234
    79b8:	d9402c15 	stw	r5,176(sp)
    79bc:	070001c4 	movi	fp,7
    79c0:	00000306 	br	79d0 <___vfprintf_internal_r+0x1228>
    79c4:	42000204 	addi	r8,r8,8
    79c8:	94bffc04 	addi	r18,r18,-16
    79cc:	ac81780e 	bge	r21,r18,7fb0 <___vfprintf_internal_r+0x1808>
    79d0:	18c00404 	addi	r3,r3,16
    79d4:	10800044 	addi	r2,r2,1
    79d8:	45000015 	stw	r20,0(r8)
    79dc:	45400115 	stw	r21,4(r8)
    79e0:	d8c02015 	stw	r3,128(sp)
    79e4:	d8801f15 	stw	r2,124(sp)
    79e8:	e0bff60e 	bge	fp,r2,79c4 <__alt_mem_Flash_flash_data+0xf40079c4>
    79ec:	b009883a 	mov	r4,r22
    79f0:	b80b883a 	mov	r5,r23
    79f4:	d9801e04 	addi	r6,sp,120
    79f8:	000ecbc0 	call	ecbc <__sprint_r>
    79fc:	103c5e1e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    7a00:	d8c02017 	ldw	r3,128(sp)
    7a04:	d8801f17 	ldw	r2,124(sp)
    7a08:	da000404 	addi	r8,sp,16
    7a0c:	003fee06 	br	79c8 <__alt_mem_Flash_flash_data+0xf40079c8>
    7a10:	dac01e04 	addi	r11,sp,120
    7a14:	0025883a 	mov	r18,zero
    7a18:	dac03115 	stw	r11,196(sp)
    7a1c:	003cb006 	br	6ce0 <__alt_mem_Flash_flash_data+0xf4006ce0>
    7a20:	b009883a 	mov	r4,r22
    7a24:	b80b883a 	mov	r5,r23
    7a28:	d9801e04 	addi	r6,sp,120
    7a2c:	000ecbc0 	call	ecbc <__sprint_r>
    7a30:	103c511e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    7a34:	d8c02017 	ldw	r3,128(sp)
    7a38:	d8802787 	ldb	r2,158(sp)
    7a3c:	da000404 	addi	r8,sp,16
    7a40:	003ceb06 	br	6df0 <__alt_mem_Flash_flash_data+0xf4006df0>
    7a44:	1cc00017 	ldw	r19,0(r3)
    7a48:	dac02d17 	ldw	r11,180(sp)
    7a4c:	9839d7fa 	srai	fp,r19,31
    7a50:	5ac00104 	addi	r11,r11,4
    7a54:	dac02d15 	stw	r11,180(sp)
    7a58:	e005883a 	mov	r2,fp
    7a5c:	003c8106 	br	6c64 <__alt_mem_Flash_flash_data+0xf4006c64>
    7a60:	657fffc4 	addi	r21,r12,-1
    7a64:	057f5d0e 	bge	zero,r21,77dc <__alt_mem_Flash_flash_data+0xf40077dc>
    7a68:	07000404 	movi	fp,16
    7a6c:	e540900e 	bge	fp,r21,7cb0 <___vfprintf_internal_r+0x1508>
    7a70:	010000b4 	movhi	r4,2
    7a74:	2116b084 	addi	r4,r4,23234
    7a78:	d9002c15 	stw	r4,176(sp)
    7a7c:	01c001c4 	movi	r7,7
    7a80:	00000306 	br	7a90 <___vfprintf_internal_r+0x12e8>
    7a84:	94800204 	addi	r18,r18,8
    7a88:	ad7ffc04 	addi	r21,r21,-16
    7a8c:	e5408b0e 	bge	fp,r21,7cbc <___vfprintf_internal_r+0x1514>
    7a90:	18c00404 	addi	r3,r3,16
    7a94:	84000044 	addi	r16,r16,1
    7a98:	95000015 	stw	r20,0(r18)
    7a9c:	97000115 	stw	fp,4(r18)
    7aa0:	d8c02015 	stw	r3,128(sp)
    7aa4:	dc001f15 	stw	r16,124(sp)
    7aa8:	3c3ff60e 	bge	r7,r16,7a84 <__alt_mem_Flash_flash_data+0xf4007a84>
    7aac:	b009883a 	mov	r4,r22
    7ab0:	b80b883a 	mov	r5,r23
    7ab4:	d9801e04 	addi	r6,sp,120
    7ab8:	d9c03d15 	stw	r7,244(sp)
    7abc:	000ecbc0 	call	ecbc <__sprint_r>
    7ac0:	d9c03d17 	ldw	r7,244(sp)
    7ac4:	103c2c1e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    7ac8:	d8c02017 	ldw	r3,128(sp)
    7acc:	dc001f17 	ldw	r16,124(sp)
    7ad0:	dc800404 	addi	r18,sp,16
    7ad4:	003fec06 	br	7a88 <__alt_mem_Flash_flash_data+0xf4007a88>
    7ad8:	dac02d17 	ldw	r11,180(sp)
    7adc:	0039883a 	mov	fp,zero
    7ae0:	0005883a 	mov	r2,zero
    7ae4:	5cc00017 	ldw	r19,0(r11)
    7ae8:	5ac00104 	addi	r11,r11,4
    7aec:	dac02d15 	stw	r11,180(sp)
    7af0:	9807883a 	mov	r3,r19
    7af4:	003d5b06 	br	7064 <__alt_mem_Flash_flash_data+0xf4007064>
    7af8:	db002d17 	ldw	r12,180(sp)
    7afc:	0039883a 	mov	fp,zero
    7b00:	00800044 	movi	r2,1
    7b04:	64c00017 	ldw	r19,0(r12)
    7b08:	63000104 	addi	r12,r12,4
    7b0c:	db002d15 	stw	r12,180(sp)
    7b10:	9807883a 	mov	r3,r19
    7b14:	003d5306 	br	7064 <__alt_mem_Flash_flash_data+0xf4007064>
    7b18:	00800084 	movi	r2,2
    7b1c:	9f06b03a 	or	r3,r19,fp
    7b20:	003d5006 	br	7064 <__alt_mem_Flash_flash_data+0xf4007064>
    7b24:	10803fcc 	andi	r2,r2,255
    7b28:	1080201c 	xori	r2,r2,128
    7b2c:	10bfe004 	addi	r2,r2,-128
    7b30:	01000c04 	movi	r4,48
    7b34:	1101a526 	beq	r2,r4,81cc <___vfprintf_internal_r+0x1a24>
    7b38:	dac03117 	ldw	r11,196(sp)
    7b3c:	db002817 	ldw	r12,160(sp)
    7b40:	193fffc5 	stb	r4,-1(r3)
    7b44:	5affffc4 	addi	r11,r11,-1
    7b48:	dac03115 	stw	r11,196(sp)
    7b4c:	62e5c83a 	sub	r18,r12,r11
    7b50:	003c6306 	br	6ce0 <__alt_mem_Flash_flash_data+0xf4006ce0>
    7b54:	b009883a 	mov	r4,r22
    7b58:	b80b883a 	mov	r5,r23
    7b5c:	d9801e04 	addi	r6,sp,120
    7b60:	000ecbc0 	call	ecbc <__sprint_r>
    7b64:	103c041e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    7b68:	d8c02017 	ldw	r3,128(sp)
    7b6c:	da000404 	addi	r8,sp,16
    7b70:	db003117 	ldw	r12,196(sp)
    7b74:	dac03417 	ldw	r11,208(sp)
    7b78:	d8802617 	ldw	r2,152(sp)
    7b7c:	62e5883a 	add	r18,r12,r11
    7b80:	db003317 	ldw	r12,204(sp)
    7b84:	13000216 	blt	r2,r12,7b90 <___vfprintf_internal_r+0x13e8>
    7b88:	8900004c 	andi	r4,r17,1
    7b8c:	20000c26 	beq	r4,zero,7bc0 <___vfprintf_internal_r+0x1418>
    7b90:	dac03817 	ldw	r11,224(sp)
    7b94:	d9001f17 	ldw	r4,124(sp)
    7b98:	db003517 	ldw	r12,212(sp)
    7b9c:	1ac7883a 	add	r3,r3,r11
    7ba0:	21000044 	addi	r4,r4,1
    7ba4:	43000015 	stw	r12,0(r8)
    7ba8:	42c00115 	stw	r11,4(r8)
    7bac:	d8c02015 	stw	r3,128(sp)
    7bb0:	d9001f15 	stw	r4,124(sp)
    7bb4:	014001c4 	movi	r5,7
    7bb8:	2901cc16 	blt	r5,r4,82ec <___vfprintf_internal_r+0x1b44>
    7bbc:	42000204 	addi	r8,r8,8
    7bc0:	dac03317 	ldw	r11,204(sp)
    7bc4:	8489c83a 	sub	r4,r16,r18
    7bc8:	5885c83a 	sub	r2,r11,r2
    7bcc:	1021883a 	mov	r16,r2
    7bd0:	2080010e 	bge	r4,r2,7bd8 <___vfprintf_internal_r+0x1430>
    7bd4:	2021883a 	mov	r16,r4
    7bd8:	04000a0e 	bge	zero,r16,7c04 <___vfprintf_internal_r+0x145c>
    7bdc:	d9001f17 	ldw	r4,124(sp)
    7be0:	1c07883a 	add	r3,r3,r16
    7be4:	44800015 	stw	r18,0(r8)
    7be8:	21000044 	addi	r4,r4,1
    7bec:	44000115 	stw	r16,4(r8)
    7bf0:	d8c02015 	stw	r3,128(sp)
    7bf4:	d9001f15 	stw	r4,124(sp)
    7bf8:	014001c4 	movi	r5,7
    7bfc:	2901e316 	blt	r5,r4,838c <___vfprintf_internal_r+0x1be4>
    7c00:	42000204 	addi	r8,r8,8
    7c04:	8001df16 	blt	r16,zero,8384 <___vfprintf_internal_r+0x1bdc>
    7c08:	1421c83a 	sub	r16,r2,r16
    7c0c:	043ccc0e 	bge	zero,r16,6f40 <__alt_mem_Flash_flash_data+0xf4006f40>
    7c10:	04800404 	movi	r18,16
    7c14:	d8801f17 	ldw	r2,124(sp)
    7c18:	943efc0e 	bge	r18,r16,780c <__alt_mem_Flash_flash_data+0xf400780c>
    7c1c:	014000b4 	movhi	r5,2
    7c20:	2956b084 	addi	r5,r5,23234
    7c24:	d9402c15 	stw	r5,176(sp)
    7c28:	054001c4 	movi	r21,7
    7c2c:	00000306 	br	7c3c <___vfprintf_internal_r+0x1494>
    7c30:	42000204 	addi	r8,r8,8
    7c34:	843ffc04 	addi	r16,r16,-16
    7c38:	943ef70e 	bge	r18,r16,7818 <__alt_mem_Flash_flash_data+0xf4007818>
    7c3c:	18c00404 	addi	r3,r3,16
    7c40:	10800044 	addi	r2,r2,1
    7c44:	45000015 	stw	r20,0(r8)
    7c48:	44800115 	stw	r18,4(r8)
    7c4c:	d8c02015 	stw	r3,128(sp)
    7c50:	d8801f15 	stw	r2,124(sp)
    7c54:	a8bff60e 	bge	r21,r2,7c30 <__alt_mem_Flash_flash_data+0xf4007c30>
    7c58:	b009883a 	mov	r4,r22
    7c5c:	b80b883a 	mov	r5,r23
    7c60:	d9801e04 	addi	r6,sp,120
    7c64:	000ecbc0 	call	ecbc <__sprint_r>
    7c68:	103bc31e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    7c6c:	d8c02017 	ldw	r3,128(sp)
    7c70:	d8801f17 	ldw	r2,124(sp)
    7c74:	da000404 	addi	r8,sp,16
    7c78:	003fee06 	br	7c34 <__alt_mem_Flash_flash_data+0xf4007c34>
    7c7c:	8888703a 	and	r4,r17,r2
    7c80:	203eab1e 	bne	r4,zero,7730 <__alt_mem_Flash_flash_data+0xf4007730>
    7c84:	dc001f17 	ldw	r16,124(sp)
    7c88:	db003117 	ldw	r12,196(sp)
    7c8c:	40800115 	stw	r2,4(r8)
    7c90:	84000044 	addi	r16,r16,1
    7c94:	43000015 	stw	r12,0(r8)
    7c98:	d8c02015 	stw	r3,128(sp)
    7c9c:	dc001f15 	stw	r16,124(sp)
    7ca0:	008001c4 	movi	r2,7
    7ca4:	14000e16 	blt	r2,r16,7ce0 <___vfprintf_internal_r+0x1538>
    7ca8:	44800204 	addi	r18,r8,8
    7cac:	003ecb06 	br	77dc <__alt_mem_Flash_flash_data+0xf40077dc>
    7cb0:	008000b4 	movhi	r2,2
    7cb4:	1096b084 	addi	r2,r2,23234
    7cb8:	d8802c15 	stw	r2,176(sp)
    7cbc:	dac02c17 	ldw	r11,176(sp)
    7cc0:	1d47883a 	add	r3,r3,r21
    7cc4:	84000044 	addi	r16,r16,1
    7cc8:	92c00015 	stw	r11,0(r18)
    7ccc:	95400115 	stw	r21,4(r18)
    7cd0:	d8c02015 	stw	r3,128(sp)
    7cd4:	dc001f15 	stw	r16,124(sp)
    7cd8:	008001c4 	movi	r2,7
    7cdc:	143ebe0e 	bge	r2,r16,77d8 <__alt_mem_Flash_flash_data+0xf40077d8>
    7ce0:	b009883a 	mov	r4,r22
    7ce4:	b80b883a 	mov	r5,r23
    7ce8:	d9801e04 	addi	r6,sp,120
    7cec:	000ecbc0 	call	ecbc <__sprint_r>
    7cf0:	103ba11e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    7cf4:	d8c02017 	ldw	r3,128(sp)
    7cf8:	dc001f17 	ldw	r16,124(sp)
    7cfc:	dc800404 	addi	r18,sp,16
    7d00:	003eb606 	br	77dc <__alt_mem_Flash_flash_data+0xf40077dc>
    7d04:	b009883a 	mov	r4,r22
    7d08:	b80b883a 	mov	r5,r23
    7d0c:	d9801e04 	addi	r6,sp,120
    7d10:	000ecbc0 	call	ecbc <__sprint_r>
    7d14:	103b981e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    7d18:	d8c02017 	ldw	r3,128(sp)
    7d1c:	dc001f17 	ldw	r16,124(sp)
    7d20:	da000404 	addi	r8,sp,16
    7d24:	003e8d06 	br	775c <__alt_mem_Flash_flash_data+0xf400775c>
    7d28:	b009883a 	mov	r4,r22
    7d2c:	b80b883a 	mov	r5,r23
    7d30:	d9801e04 	addi	r6,sp,120
    7d34:	000ecbc0 	call	ecbc <__sprint_r>
    7d38:	103b8f1e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    7d3c:	d8c02017 	ldw	r3,128(sp)
    7d40:	dc001f17 	ldw	r16,124(sp)
    7d44:	dc800404 	addi	r18,sp,16
    7d48:	003e8f06 	br	7788 <__alt_mem_Flash_flash_data+0xf4007788>
    7d4c:	db001e04 	addi	r12,sp,120
    7d50:	0025883a 	mov	r18,zero
    7d54:	db003115 	stw	r12,196(sp)
    7d58:	003be106 	br	6ce0 <__alt_mem_Flash_flash_data+0xf4006ce0>
    7d5c:	b009883a 	mov	r4,r22
    7d60:	b80b883a 	mov	r5,r23
    7d64:	d9801e04 	addi	r6,sp,120
    7d68:	000ecbc0 	call	ecbc <__sprint_r>
    7d6c:	103b821e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    7d70:	d8c02017 	ldw	r3,128(sp)
    7d74:	da000404 	addi	r8,sp,16
    7d78:	003c3b06 	br	6e68 <__alt_mem_Flash_flash_data+0xf4006e68>
    7d7c:	04e7c83a 	sub	r19,zero,r19
    7d80:	9804c03a 	cmpne	r2,r19,zero
    7d84:	0739c83a 	sub	fp,zero,fp
    7d88:	e0b9c83a 	sub	fp,fp,r2
    7d8c:	05400b44 	movi	r21,45
    7d90:	dd402785 	stb	r21,158(sp)
    7d94:	da403215 	stw	r9,200(sp)
    7d98:	00800044 	movi	r2,1
    7d9c:	9f06b03a 	or	r3,r19,fp
    7da0:	003bb506 	br	6c78 <__alt_mem_Flash_flash_data+0xf4006c78>
    7da4:	da003f15 	stw	r8,252(sp)
    7da8:	da403e15 	stw	r9,248(sp)
    7dac:	000d7140 	call	d714 <__fpclassifyd>
    7db0:	da003f17 	ldw	r8,252(sp)
    7db4:	da403e17 	ldw	r9,248(sp)
    7db8:	1000ce26 	beq	r2,zero,80f4 <___vfprintf_internal_r+0x194c>
    7dbc:	057ff7c4 	movi	r21,-33
    7dc0:	00bfffc4 	movi	r2,-1
    7dc4:	856a703a 	and	r21,r16,r21
    7dc8:	4881e826 	beq	r9,r2,856c <___vfprintf_internal_r+0x1dc4>
    7dcc:	008011c4 	movi	r2,71
    7dd0:	a881e326 	beq	r21,r2,8560 <___vfprintf_internal_r+0x1db8>
    7dd4:	db003917 	ldw	r12,228(sp)
    7dd8:	8ac04014 	ori	r11,r17,256
    7ddc:	dac02d15 	stw	r11,180(sp)
    7de0:	6001ed16 	blt	r12,zero,8598 <___vfprintf_internal_r+0x1df0>
    7de4:	dc803917 	ldw	r18,228(sp)
    7de8:	d8002b05 	stb	zero,172(sp)
    7dec:	00801984 	movi	r2,102
    7df0:	80811826 	beq	r16,r2,8254 <___vfprintf_internal_r+0x1aac>
    7df4:	00801184 	movi	r2,70
    7df8:	80811626 	beq	r16,r2,8254 <___vfprintf_internal_r+0x1aac>
    7dfc:	00801144 	movi	r2,69
    7e00:	a881e926 	beq	r21,r2,85a8 <___vfprintf_internal_r+0x1e00>
    7e04:	4839883a 	mov	fp,r9
    7e08:	d8802604 	addi	r2,sp,152
    7e0c:	d8800115 	stw	r2,4(sp)
    7e10:	d9403717 	ldw	r5,220(sp)
    7e14:	d8802504 	addi	r2,sp,148
    7e18:	d8800215 	stw	r2,8(sp)
    7e1c:	d8802104 	addi	r2,sp,132
    7e20:	df000015 	stw	fp,0(sp)
    7e24:	d8800315 	stw	r2,12(sp)
    7e28:	b009883a 	mov	r4,r22
    7e2c:	900d883a 	mov	r6,r18
    7e30:	01c00084 	movi	r7,2
    7e34:	da003f15 	stw	r8,252(sp)
    7e38:	da403e15 	stw	r9,248(sp)
    7e3c:	0008b2c0 	call	8b2c <_dtoa_r>
    7e40:	d8803115 	stw	r2,196(sp)
    7e44:	008019c4 	movi	r2,103
    7e48:	da003f17 	ldw	r8,252(sp)
    7e4c:	da403e17 	ldw	r9,248(sp)
    7e50:	80800226 	beq	r16,r2,7e5c <___vfprintf_internal_r+0x16b4>
    7e54:	008011c4 	movi	r2,71
    7e58:	8081101e 	bne	r16,r2,829c <___vfprintf_internal_r+0x1af4>
    7e5c:	8880004c 	andi	r2,r17,1
    7e60:	1001dd26 	beq	r2,zero,85d8 <___vfprintf_internal_r+0x1e30>
    7e64:	db003117 	ldw	r12,196(sp)
    7e68:	6715883a 	add	r10,r12,fp
    7e6c:	d9003717 	ldw	r4,220(sp)
    7e70:	900b883a 	mov	r5,r18
    7e74:	000d883a 	mov	r6,zero
    7e78:	000f883a 	mov	r7,zero
    7e7c:	da003f15 	stw	r8,252(sp)
    7e80:	da403e15 	stw	r9,248(sp)
    7e84:	da803d15 	stw	r10,244(sp)
    7e88:	00127600 	call	12760 <__eqdf2>
    7e8c:	da003f17 	ldw	r8,252(sp)
    7e90:	da403e17 	ldw	r9,248(sp)
    7e94:	da803d17 	ldw	r10,244(sp)
    7e98:	10016526 	beq	r2,zero,8430 <___vfprintf_internal_r+0x1c88>
    7e9c:	d8802117 	ldw	r2,132(sp)
    7ea0:	1280062e 	bgeu	r2,r10,7ebc <___vfprintf_internal_r+0x1714>
    7ea4:	01000c04 	movi	r4,48
    7ea8:	10c00044 	addi	r3,r2,1
    7eac:	d8c02115 	stw	r3,132(sp)
    7eb0:	11000005 	stb	r4,0(r2)
    7eb4:	d8802117 	ldw	r2,132(sp)
    7eb8:	12bffb36 	bltu	r2,r10,7ea8 <__alt_mem_Flash_flash_data+0xf4007ea8>
    7ebc:	db003117 	ldw	r12,196(sp)
    7ec0:	1305c83a 	sub	r2,r2,r12
    7ec4:	d8803315 	stw	r2,204(sp)
    7ec8:	008011c4 	movi	r2,71
    7ecc:	a8814d26 	beq	r21,r2,8404 <___vfprintf_internal_r+0x1c5c>
    7ed0:	00801944 	movi	r2,101
    7ed4:	1402060e 	bge	r2,r16,86f0 <___vfprintf_internal_r+0x1f48>
    7ed8:	00801984 	movi	r2,102
    7edc:	8081b426 	beq	r16,r2,85b0 <___vfprintf_internal_r+0x1e08>
    7ee0:	db002617 	ldw	r12,152(sp)
    7ee4:	db003415 	stw	r12,208(sp)
    7ee8:	db003417 	ldw	r12,208(sp)
    7eec:	dac03317 	ldw	r11,204(sp)
    7ef0:	62c1a016 	blt	r12,r11,8574 <___vfprintf_internal_r+0x1dcc>
    7ef4:	8c40004c 	andi	r17,r17,1
    7ef8:	8801bf1e 	bne	r17,zero,85f8 <___vfprintf_internal_r+0x1e50>
    7efc:	6005883a 	mov	r2,r12
    7f00:	6001b316 	blt	r12,zero,85d0 <___vfprintf_internal_r+0x1e28>
    7f04:	dc803417 	ldw	r18,208(sp)
    7f08:	df002b07 	ldb	fp,172(sp)
    7f0c:	e0012e1e 	bne	fp,zero,83c8 <___vfprintf_internal_r+0x1c20>
    7f10:	dc402d17 	ldw	r17,180(sp)
    7f14:	dd402783 	ldbu	r21,158(sp)
    7f18:	d8802b15 	stw	r2,172(sp)
    7f1c:	dcc02d15 	stw	r19,180(sp)
    7f20:	d8003215 	stw	zero,200(sp)
    7f24:	003b7306 	br	6cf4 <__alt_mem_Flash_flash_data+0xf4006cf4>
    7f28:	00800084 	movi	r2,2
    7f2c:	003c4d06 	br	7064 <__alt_mem_Flash_flash_data+0xf4007064>
    7f30:	8880040c 	andi	r2,r17,16
    7f34:	1000091e 	bne	r2,zero,7f5c <___vfprintf_internal_r+0x17b4>
    7f38:	8c40100c 	andi	r17,r17,64
    7f3c:	88000726 	beq	r17,zero,7f5c <___vfprintf_internal_r+0x17b4>
    7f40:	db002d17 	ldw	r12,180(sp)
    7f44:	dac02f17 	ldw	r11,188(sp)
    7f48:	60800017 	ldw	r2,0(r12)
    7f4c:	63000104 	addi	r12,r12,4
    7f50:	db002d15 	stw	r12,180(sp)
    7f54:	12c0000d 	sth	r11,0(r2)
    7f58:	003a4e06 	br	6894 <__alt_mem_Flash_flash_data+0xf4006894>
    7f5c:	db002d17 	ldw	r12,180(sp)
    7f60:	dac02f17 	ldw	r11,188(sp)
    7f64:	60800017 	ldw	r2,0(r12)
    7f68:	63000104 	addi	r12,r12,4
    7f6c:	db002d15 	stw	r12,180(sp)
    7f70:	12c00015 	stw	r11,0(r2)
    7f74:	003a4706 	br	6894 <__alt_mem_Flash_flash_data+0xf4006894>
    7f78:	1c000007 	ldb	r16,0(r3)
    7f7c:	1805883a 	mov	r2,r3
    7f80:	003a6e06 	br	693c <__alt_mem_Flash_flash_data+0xf400693c>
    7f84:	88c0100c 	andi	r3,r17,64
    7f88:	18006b26 	beq	r3,zero,8138 <___vfprintf_internal_r+0x1990>
    7f8c:	dac02d17 	ldw	r11,180(sp)
    7f90:	14c0000b 	ldhu	r19,0(r2)
    7f94:	0039883a 	mov	fp,zero
    7f98:	5ac00104 	addi	r11,r11,4
    7f9c:	dac02d15 	stw	r11,180(sp)
    7fa0:	003cb206 	br	726c <__alt_mem_Flash_flash_data+0xf400726c>
    7fa4:	010000b4 	movhi	r4,2
    7fa8:	2116b084 	addi	r4,r4,23234
    7fac:	d9002c15 	stw	r4,176(sp)
    7fb0:	dac02c17 	ldw	r11,176(sp)
    7fb4:	1c87883a 	add	r3,r3,r18
    7fb8:	10800044 	addi	r2,r2,1
    7fbc:	42c00015 	stw	r11,0(r8)
    7fc0:	44800115 	stw	r18,4(r8)
    7fc4:	d8c02015 	stw	r3,128(sp)
    7fc8:	d8801f15 	stw	r2,124(sp)
    7fcc:	010001c4 	movi	r4,7
    7fd0:	20bee016 	blt	r4,r2,7b54 <__alt_mem_Flash_flash_data+0xf4007b54>
    7fd4:	42000204 	addi	r8,r8,8
    7fd8:	003ee506 	br	7b70 <__alt_mem_Flash_flash_data+0xf4007b70>
    7fdc:	010000b4 	movhi	r4,2
    7fe0:	2116b084 	addi	r4,r4,23234
    7fe4:	d9002c15 	stw	r4,176(sp)
    7fe8:	003bbe06 	br	6ee4 <__alt_mem_Flash_flash_data+0xf4006ee4>
    7fec:	b009883a 	mov	r4,r22
    7ff0:	b80b883a 	mov	r5,r23
    7ff4:	d9801e04 	addi	r6,sp,120
    7ff8:	000ecbc0 	call	ecbc <__sprint_r>
    7ffc:	103ade1e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    8000:	d8c02017 	ldw	r3,128(sp)
    8004:	da000404 	addi	r8,sp,16
    8008:	003d6b06 	br	75b8 <__alt_mem_Flash_flash_data+0xf40075b8>
    800c:	d8801f17 	ldw	r2,124(sp)
    8010:	030000b4 	movhi	r12,2
    8014:	01000044 	movi	r4,1
    8018:	18c00044 	addi	r3,r3,1
    801c:	10800044 	addi	r2,r2,1
    8020:	6316a804 	addi	r12,r12,23200
    8024:	41000115 	stw	r4,4(r8)
    8028:	43000015 	stw	r12,0(r8)
    802c:	d8c02015 	stw	r3,128(sp)
    8030:	d8801f15 	stw	r2,124(sp)
    8034:	010001c4 	movi	r4,7
    8038:	20804916 	blt	r4,r2,8160 <___vfprintf_internal_r+0x19b8>
    803c:	42000204 	addi	r8,r8,8
    8040:	8000041e 	bne	r16,zero,8054 <___vfprintf_internal_r+0x18ac>
    8044:	dac03317 	ldw	r11,204(sp)
    8048:	5800021e 	bne	r11,zero,8054 <___vfprintf_internal_r+0x18ac>
    804c:	8880004c 	andi	r2,r17,1
    8050:	103bbb26 	beq	r2,zero,6f40 <__alt_mem_Flash_flash_data+0xf4006f40>
    8054:	db003817 	ldw	r12,224(sp)
    8058:	d8801f17 	ldw	r2,124(sp)
    805c:	dac03517 	ldw	r11,212(sp)
    8060:	1b07883a 	add	r3,r3,r12
    8064:	10800044 	addi	r2,r2,1
    8068:	42c00015 	stw	r11,0(r8)
    806c:	43000115 	stw	r12,4(r8)
    8070:	d8c02015 	stw	r3,128(sp)
    8074:	d8801f15 	stw	r2,124(sp)
    8078:	010001c4 	movi	r4,7
    807c:	20812e16 	blt	r4,r2,8538 <___vfprintf_internal_r+0x1d90>
    8080:	42000204 	addi	r8,r8,8
    8084:	0421c83a 	sub	r16,zero,r16
    8088:	04005c0e 	bge	zero,r16,81fc <___vfprintf_internal_r+0x1a54>
    808c:	04800404 	movi	r18,16
    8090:	94009f0e 	bge	r18,r16,8310 <___vfprintf_internal_r+0x1b68>
    8094:	010000b4 	movhi	r4,2
    8098:	2116b084 	addi	r4,r4,23234
    809c:	d9002c15 	stw	r4,176(sp)
    80a0:	054001c4 	movi	r21,7
    80a4:	00000306 	br	80b4 <___vfprintf_internal_r+0x190c>
    80a8:	42000204 	addi	r8,r8,8
    80ac:	843ffc04 	addi	r16,r16,-16
    80b0:	94009a0e 	bge	r18,r16,831c <___vfprintf_internal_r+0x1b74>
    80b4:	18c00404 	addi	r3,r3,16
    80b8:	10800044 	addi	r2,r2,1
    80bc:	45000015 	stw	r20,0(r8)
    80c0:	44800115 	stw	r18,4(r8)
    80c4:	d8c02015 	stw	r3,128(sp)
    80c8:	d8801f15 	stw	r2,124(sp)
    80cc:	a8bff60e 	bge	r21,r2,80a8 <__alt_mem_Flash_flash_data+0xf40080a8>
    80d0:	b009883a 	mov	r4,r22
    80d4:	b80b883a 	mov	r5,r23
    80d8:	d9801e04 	addi	r6,sp,120
    80dc:	000ecbc0 	call	ecbc <__sprint_r>
    80e0:	103aa51e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    80e4:	d8c02017 	ldw	r3,128(sp)
    80e8:	d8801f17 	ldw	r2,124(sp)
    80ec:	da000404 	addi	r8,sp,16
    80f0:	003fee06 	br	80ac <__alt_mem_Flash_flash_data+0xf40080ac>
    80f4:	008011c4 	movi	r2,71
    80f8:	1400be16 	blt	r2,r16,83f4 <___vfprintf_internal_r+0x1c4c>
    80fc:	030000b4 	movhi	r12,2
    8100:	63169a04 	addi	r12,r12,23144
    8104:	db003115 	stw	r12,196(sp)
    8108:	00c000c4 	movi	r3,3
    810c:	00bfdfc4 	movi	r2,-129
    8110:	d8c02b15 	stw	r3,172(sp)
    8114:	88a2703a 	and	r17,r17,r2
    8118:	dd402783 	ldbu	r21,158(sp)
    811c:	dcc02d15 	stw	r19,180(sp)
    8120:	1825883a 	mov	r18,r3
    8124:	d8003215 	stw	zero,200(sp)
    8128:	d8003415 	stw	zero,208(sp)
    812c:	003af106 	br	6cf4 <__alt_mem_Flash_flash_data+0xf4006cf4>
    8130:	4825883a 	mov	r18,r9
    8134:	003c9306 	br	7384 <__alt_mem_Flash_flash_data+0xf4007384>
    8138:	db002d17 	ldw	r12,180(sp)
    813c:	14c00017 	ldw	r19,0(r2)
    8140:	0039883a 	mov	fp,zero
    8144:	63000104 	addi	r12,r12,4
    8148:	db002d15 	stw	r12,180(sp)
    814c:	003c4706 	br	726c <__alt_mem_Flash_flash_data+0xf400726c>
    8150:	008000b4 	movhi	r2,2
    8154:	10969804 	addi	r2,r2,23136
    8158:	d8803115 	stw	r2,196(sp)
    815c:	003bf106 	br	7124 <__alt_mem_Flash_flash_data+0xf4007124>
    8160:	b009883a 	mov	r4,r22
    8164:	b80b883a 	mov	r5,r23
    8168:	d9801e04 	addi	r6,sp,120
    816c:	000ecbc0 	call	ecbc <__sprint_r>
    8170:	103a811e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    8174:	dc002617 	ldw	r16,152(sp)
    8178:	d8c02017 	ldw	r3,128(sp)
    817c:	da000404 	addi	r8,sp,16
    8180:	003faf06 	br	8040 <__alt_mem_Flash_flash_data+0xf4008040>
    8184:	db002e17 	ldw	r12,184(sp)
    8188:	1805883a 	mov	r2,r3
    818c:	dac02d15 	stw	r11,180(sp)
    8190:	0319c83a 	sub	r12,zero,r12
    8194:	db002e15 	stw	r12,184(sp)
    8198:	003a8206 	br	6ba4 <__alt_mem_Flash_flash_data+0xf4006ba4>
    819c:	18800044 	addi	r2,r3,1
    81a0:	8c400814 	ori	r17,r17,32
    81a4:	1c000047 	ldb	r16,1(r3)
    81a8:	0039e406 	br	693c <__alt_mem_Flash_flash_data+0xf400693c>
    81ac:	b009883a 	mov	r4,r22
    81b0:	b80b883a 	mov	r5,r23
    81b4:	d9801e04 	addi	r6,sp,120
    81b8:	000ecbc0 	call	ecbc <__sprint_r>
    81bc:	103a6e1e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    81c0:	d8c02017 	ldw	r3,128(sp)
    81c4:	da000404 	addi	r8,sp,16
    81c8:	003d0c06 	br	75fc <__alt_mem_Flash_flash_data+0xf40075fc>
    81cc:	db002817 	ldw	r12,160(sp)
    81d0:	d8c03117 	ldw	r3,196(sp)
    81d4:	60e5c83a 	sub	r18,r12,r3
    81d8:	003ac106 	br	6ce0 <__alt_mem_Flash_flash_data+0xf4006ce0>
    81dc:	b009883a 	mov	r4,r22
    81e0:	b80b883a 	mov	r5,r23
    81e4:	d9801e04 	addi	r6,sp,120
    81e8:	000ecbc0 	call	ecbc <__sprint_r>
    81ec:	103a621e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    81f0:	d8c02017 	ldw	r3,128(sp)
    81f4:	d8801f17 	ldw	r2,124(sp)
    81f8:	da000404 	addi	r8,sp,16
    81fc:	db003317 	ldw	r12,204(sp)
    8200:	dac03117 	ldw	r11,196(sp)
    8204:	10800044 	addi	r2,r2,1
    8208:	1b07883a 	add	r3,r3,r12
    820c:	42c00015 	stw	r11,0(r8)
    8210:	43000115 	stw	r12,4(r8)
    8214:	d8c02015 	stw	r3,128(sp)
    8218:	d8801f15 	stw	r2,124(sp)
    821c:	010001c4 	movi	r4,7
    8220:	20bb460e 	bge	r4,r2,6f3c <__alt_mem_Flash_flash_data+0xf4006f3c>
    8224:	003d8506 	br	783c <__alt_mem_Flash_flash_data+0xf400783c>
    8228:	da003f15 	stw	r8,252(sp)
    822c:	00047800 	call	4780 <strlen>
    8230:	1025883a 	mov	r18,r2
    8234:	da003f17 	ldw	r8,252(sp)
    8238:	903c540e 	bge	r18,zero,738c <__alt_mem_Flash_flash_data+0xf400738c>
    823c:	0005883a 	mov	r2,zero
    8240:	003c5206 	br	738c <__alt_mem_Flash_flash_data+0xf400738c>
    8244:	010000b4 	movhi	r4,2
    8248:	2116b484 	addi	r4,r4,23250
    824c:	d9003615 	stw	r4,216(sp)
    8250:	003adc06 	br	6dc4 <__alt_mem_Flash_flash_data+0xf4006dc4>
    8254:	d8802604 	addi	r2,sp,152
    8258:	d8800115 	stw	r2,4(sp)
    825c:	d9403717 	ldw	r5,220(sp)
    8260:	d8802504 	addi	r2,sp,148
    8264:	d8800215 	stw	r2,8(sp)
    8268:	d8802104 	addi	r2,sp,132
    826c:	da400015 	stw	r9,0(sp)
    8270:	d8800315 	stw	r2,12(sp)
    8274:	b009883a 	mov	r4,r22
    8278:	900d883a 	mov	r6,r18
    827c:	01c000c4 	movi	r7,3
    8280:	da003f15 	stw	r8,252(sp)
    8284:	da403e15 	stw	r9,248(sp)
    8288:	0008b2c0 	call	8b2c <_dtoa_r>
    828c:	da403e17 	ldw	r9,248(sp)
    8290:	da003f17 	ldw	r8,252(sp)
    8294:	d8803115 	stw	r2,196(sp)
    8298:	4839883a 	mov	fp,r9
    829c:	dac03117 	ldw	r11,196(sp)
    82a0:	00801184 	movi	r2,70
    82a4:	5f15883a 	add	r10,r11,fp
    82a8:	a8bef01e 	bne	r21,r2,7e6c <__alt_mem_Flash_flash_data+0xf4007e6c>
    82ac:	59000007 	ldb	r4,0(r11)
    82b0:	00800c04 	movi	r2,48
    82b4:	2080d526 	beq	r4,r2,860c <___vfprintf_internal_r+0x1e64>
    82b8:	d8c02617 	ldw	r3,152(sp)
    82bc:	50d5883a 	add	r10,r10,r3
    82c0:	003eea06 	br	7e6c <__alt_mem_Flash_flash_data+0xf4007e6c>
    82c4:	0025883a 	mov	r18,zero
    82c8:	003db306 	br	7998 <__alt_mem_Flash_flash_data+0xf4007998>
    82cc:	b009883a 	mov	r4,r22
    82d0:	b80b883a 	mov	r5,r23
    82d4:	d9801e04 	addi	r6,sp,120
    82d8:	000ecbc0 	call	ecbc <__sprint_r>
    82dc:	103a261e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    82e0:	d8c02017 	ldw	r3,128(sp)
    82e4:	da000404 	addi	r8,sp,16
    82e8:	003daa06 	br	7994 <__alt_mem_Flash_flash_data+0xf4007994>
    82ec:	b009883a 	mov	r4,r22
    82f0:	b80b883a 	mov	r5,r23
    82f4:	d9801e04 	addi	r6,sp,120
    82f8:	000ecbc0 	call	ecbc <__sprint_r>
    82fc:	103a1e1e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    8300:	d8802617 	ldw	r2,152(sp)
    8304:	d8c02017 	ldw	r3,128(sp)
    8308:	da000404 	addi	r8,sp,16
    830c:	003e2c06 	br	7bc0 <__alt_mem_Flash_flash_data+0xf4007bc0>
    8310:	030000b4 	movhi	r12,2
    8314:	6316b084 	addi	r12,r12,23234
    8318:	db002c15 	stw	r12,176(sp)
    831c:	dac02c17 	ldw	r11,176(sp)
    8320:	1c07883a 	add	r3,r3,r16
    8324:	10800044 	addi	r2,r2,1
    8328:	42c00015 	stw	r11,0(r8)
    832c:	44000115 	stw	r16,4(r8)
    8330:	d8c02015 	stw	r3,128(sp)
    8334:	d8801f15 	stw	r2,124(sp)
    8338:	010001c4 	movi	r4,7
    833c:	20bfa716 	blt	r4,r2,81dc <__alt_mem_Flash_flash_data+0xf40081dc>
    8340:	42000204 	addi	r8,r8,8
    8344:	003fad06 	br	81fc <__alt_mem_Flash_flash_data+0xf40081fc>
    8348:	00800184 	movi	r2,6
    834c:	1240012e 	bgeu	r2,r9,8354 <___vfprintf_internal_r+0x1bac>
    8350:	1013883a 	mov	r9,r2
    8354:	4825883a 	mov	r18,r9
    8358:	4805883a 	mov	r2,r9
    835c:	4800c216 	blt	r9,zero,8668 <___vfprintf_internal_r+0x1ec0>
    8360:	d8802b15 	stw	r2,172(sp)
    8364:	008000b4 	movhi	r2,2
    8368:	1096a604 	addi	r2,r2,23192
    836c:	d8803115 	stw	r2,196(sp)
    8370:	dcc02d15 	stw	r19,180(sp)
    8374:	d8003215 	stw	zero,200(sp)
    8378:	d8003415 	stw	zero,208(sp)
    837c:	0005883a 	mov	r2,zero
    8380:	003a6306 	br	6d10 <__alt_mem_Flash_flash_data+0xf4006d10>
    8384:	0021883a 	mov	r16,zero
    8388:	003e1f06 	br	7c08 <__alt_mem_Flash_flash_data+0xf4007c08>
    838c:	b009883a 	mov	r4,r22
    8390:	b80b883a 	mov	r5,r23
    8394:	d9801e04 	addi	r6,sp,120
    8398:	000ecbc0 	call	ecbc <__sprint_r>
    839c:	1039f61e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    83a0:	d8802617 	ldw	r2,152(sp)
    83a4:	db003317 	ldw	r12,204(sp)
    83a8:	d8c02017 	ldw	r3,128(sp)
    83ac:	da000404 	addi	r8,sp,16
    83b0:	6085c83a 	sub	r2,r12,r2
    83b4:	003e1306 	br	7c04 <__alt_mem_Flash_flash_data+0xf4007c04>
    83b8:	030000b4 	movhi	r12,2
    83bc:	6316b484 	addi	r12,r12,23250
    83c0:	db003615 	stw	r12,216(sp)
    83c4:	003b0206 	br	6fd0 <__alt_mem_Flash_flash_data+0xf4006fd0>
    83c8:	00c00b44 	movi	r3,45
    83cc:	d8802b15 	stw	r2,172(sp)
    83d0:	dc402d17 	ldw	r17,180(sp)
    83d4:	d8c02785 	stb	r3,158(sp)
    83d8:	dcc02d15 	stw	r19,180(sp)
    83dc:	d8003215 	stw	zero,200(sp)
    83e0:	00800b44 	movi	r2,45
    83e4:	003a4706 	br	6d04 <__alt_mem_Flash_flash_data+0xf4006d04>
    83e8:	05400b44 	movi	r21,45
    83ec:	dd402785 	stb	r21,158(sp)
    83f0:	003b4706 	br	7110 <__alt_mem_Flash_flash_data+0xf4007110>
    83f4:	008000b4 	movhi	r2,2
    83f8:	10969b04 	addi	r2,r2,23148
    83fc:	d8803115 	stw	r2,196(sp)
    8400:	003f4106 	br	8108 <__alt_mem_Flash_flash_data+0xf4008108>
    8404:	d8c02617 	ldw	r3,152(sp)
    8408:	00bfff44 	movi	r2,-3
    840c:	18801116 	blt	r3,r2,8454 <___vfprintf_internal_r+0x1cac>
    8410:	48c01016 	blt	r9,r3,8454 <___vfprintf_internal_r+0x1cac>
    8414:	d8c03415 	stw	r3,208(sp)
    8418:	040019c4 	movi	r16,103
    841c:	003eb206 	br	7ee8 <__alt_mem_Flash_flash_data+0xf4007ee8>
    8420:	010000b4 	movhi	r4,2
    8424:	2116b084 	addi	r4,r4,23234
    8428:	d9002c15 	stw	r4,176(sp)
    842c:	003cb106 	br	76f4 <__alt_mem_Flash_flash_data+0xf40076f4>
    8430:	5005883a 	mov	r2,r10
    8434:	003ea106 	br	7ebc <__alt_mem_Flash_flash_data+0xf4007ebc>
    8438:	da402b15 	stw	r9,172(sp)
    843c:	dd402783 	ldbu	r21,158(sp)
    8440:	4825883a 	mov	r18,r9
    8444:	dcc02d15 	stw	r19,180(sp)
    8448:	d8003215 	stw	zero,200(sp)
    844c:	d8003415 	stw	zero,208(sp)
    8450:	003a2806 	br	6cf4 <__alt_mem_Flash_flash_data+0xf4006cf4>
    8454:	843fff84 	addi	r16,r16,-2
    8458:	1f3fffc4 	addi	fp,r3,-1
    845c:	df002615 	stw	fp,152(sp)
    8460:	dc0022c5 	stb	r16,139(sp)
    8464:	e0009816 	blt	fp,zero,86c8 <___vfprintf_internal_r+0x1f20>
    8468:	00800ac4 	movi	r2,43
    846c:	d8802305 	stb	r2,140(sp)
    8470:	00800244 	movi	r2,9
    8474:	1700750e 	bge	r2,fp,864c <___vfprintf_internal_r+0x1ea4>
    8478:	dd4022c4 	addi	r21,sp,139
    847c:	dc002c15 	stw	r16,176(sp)
    8480:	4025883a 	mov	r18,r8
    8484:	a821883a 	mov	r16,r21
    8488:	e009883a 	mov	r4,fp
    848c:	01400284 	movi	r5,10
    8490:	001158c0 	call	1158c <__modsi3>
    8494:	10800c04 	addi	r2,r2,48
    8498:	843fffc4 	addi	r16,r16,-1
    849c:	e009883a 	mov	r4,fp
    84a0:	01400284 	movi	r5,10
    84a4:	80800005 	stb	r2,0(r16)
    84a8:	00115380 	call	11538 <__divsi3>
    84ac:	1039883a 	mov	fp,r2
    84b0:	00800244 	movi	r2,9
    84b4:	173ff416 	blt	r2,fp,8488 <__alt_mem_Flash_flash_data+0xf4008488>
    84b8:	9011883a 	mov	r8,r18
    84bc:	e0800c04 	addi	r2,fp,48
    84c0:	8025883a 	mov	r18,r16
    84c4:	913fffc4 	addi	r4,r18,-1
    84c8:	90bfffc5 	stb	r2,-1(r18)
    84cc:	dc002c17 	ldw	r16,176(sp)
    84d0:	2540852e 	bgeu	r4,r21,86e8 <___vfprintf_internal_r+0x1f40>
    84d4:	d9402384 	addi	r5,sp,142
    84d8:	2c8bc83a 	sub	r5,r5,r18
    84dc:	d8c02344 	addi	r3,sp,141
    84e0:	a94b883a 	add	r5,r21,r5
    84e4:	00000106 	br	84ec <___vfprintf_internal_r+0x1d44>
    84e8:	20800003 	ldbu	r2,0(r4)
    84ec:	18800005 	stb	r2,0(r3)
    84f0:	18c00044 	addi	r3,r3,1
    84f4:	21000044 	addi	r4,r4,1
    84f8:	197ffb1e 	bne	r3,r5,84e8 <__alt_mem_Flash_flash_data+0xf40084e8>
    84fc:	d8802304 	addi	r2,sp,140
    8500:	1485c83a 	sub	r2,r2,r18
    8504:	d8c02344 	addi	r3,sp,141
    8508:	1885883a 	add	r2,r3,r2
    850c:	dac03317 	ldw	r11,204(sp)
    8510:	156bc83a 	sub	r21,r2,r21
    8514:	dd403a15 	stw	r21,232(sp)
    8518:	00800044 	movi	r2,1
    851c:	5d65883a 	add	r18,r11,r21
    8520:	12c0660e 	bge	r2,r11,86bc <___vfprintf_internal_r+0x1f14>
    8524:	94800044 	addi	r18,r18,1
    8528:	9005883a 	mov	r2,r18
    852c:	90006116 	blt	r18,zero,86b4 <___vfprintf_internal_r+0x1f0c>
    8530:	d8003415 	stw	zero,208(sp)
    8534:	003e7406 	br	7f08 <__alt_mem_Flash_flash_data+0xf4007f08>
    8538:	b009883a 	mov	r4,r22
    853c:	b80b883a 	mov	r5,r23
    8540:	d9801e04 	addi	r6,sp,120
    8544:	000ecbc0 	call	ecbc <__sprint_r>
    8548:	10398b1e 	bne	r2,zero,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    854c:	dc002617 	ldw	r16,152(sp)
    8550:	d8c02017 	ldw	r3,128(sp)
    8554:	d8801f17 	ldw	r2,124(sp)
    8558:	da000404 	addi	r8,sp,16
    855c:	003ec906 	br	8084 <__alt_mem_Flash_flash_data+0xf4008084>
    8560:	483e1c1e 	bne	r9,zero,7dd4 <__alt_mem_Flash_flash_data+0xf4007dd4>
    8564:	9013883a 	mov	r9,r18
    8568:	003e1a06 	br	7dd4 <__alt_mem_Flash_flash_data+0xf4007dd4>
    856c:	02400184 	movi	r9,6
    8570:	003e1806 	br	7dd4 <__alt_mem_Flash_flash_data+0xf4007dd4>
    8574:	d8c03417 	ldw	r3,208(sp)
    8578:	00c04b0e 	bge	zero,r3,86a8 <___vfprintf_internal_r+0x1f00>
    857c:	04800044 	movi	r18,1
    8580:	dac03317 	ldw	r11,204(sp)
    8584:	92e5883a 	add	r18,r18,r11
    8588:	9005883a 	mov	r2,r18
    858c:	903e5e0e 	bge	r18,zero,7f08 <__alt_mem_Flash_flash_data+0xf4007f08>
    8590:	0005883a 	mov	r2,zero
    8594:	003e5c06 	br	7f08 <__alt_mem_Flash_flash_data+0xf4007f08>
    8598:	00c00b44 	movi	r3,45
    859c:	64a0003c 	xorhi	r18,r12,32768
    85a0:	d8c02b05 	stb	r3,172(sp)
    85a4:	003e1106 	br	7dec <__alt_mem_Flash_flash_data+0xf4007dec>
    85a8:	4f000044 	addi	fp,r9,1
    85ac:	003e1606 	br	7e08 <__alt_mem_Flash_flash_data+0xf4007e08>
    85b0:	d8c02617 	ldw	r3,152(sp)
    85b4:	d8c03415 	stw	r3,208(sp)
    85b8:	00c0350e 	bge	zero,r3,8690 <___vfprintf_internal_r+0x1ee8>
    85bc:	4800081e 	bne	r9,zero,85e0 <___vfprintf_internal_r+0x1e38>
    85c0:	8c40004c 	andi	r17,r17,1
    85c4:	8800061e 	bne	r17,zero,85e0 <___vfprintf_internal_r+0x1e38>
    85c8:	1805883a 	mov	r2,r3
    85cc:	183e4d0e 	bge	r3,zero,7f04 <__alt_mem_Flash_flash_data+0xf4007f04>
    85d0:	0005883a 	mov	r2,zero
    85d4:	003e4b06 	br	7f04 <__alt_mem_Flash_flash_data+0xf4007f04>
    85d8:	d8802117 	ldw	r2,132(sp)
    85dc:	003e3706 	br	7ebc <__alt_mem_Flash_flash_data+0xf4007ebc>
    85e0:	dac03417 	ldw	r11,208(sp)
    85e4:	4a400044 	addi	r9,r9,1
    85e8:	5a65883a 	add	r18,r11,r9
    85ec:	9005883a 	mov	r2,r18
    85f0:	903e450e 	bge	r18,zero,7f08 <__alt_mem_Flash_flash_data+0xf4007f08>
    85f4:	003fe606 	br	8590 <__alt_mem_Flash_flash_data+0xf4008590>
    85f8:	db003417 	ldw	r12,208(sp)
    85fc:	64800044 	addi	r18,r12,1
    8600:	9005883a 	mov	r2,r18
    8604:	903e400e 	bge	r18,zero,7f08 <__alt_mem_Flash_flash_data+0xf4007f08>
    8608:	003fe106 	br	8590 <__alt_mem_Flash_flash_data+0xf4008590>
    860c:	d9003717 	ldw	r4,220(sp)
    8610:	900b883a 	mov	r5,r18
    8614:	000d883a 	mov	r6,zero
    8618:	000f883a 	mov	r7,zero
    861c:	da003f15 	stw	r8,252(sp)
    8620:	da403e15 	stw	r9,248(sp)
    8624:	da803d15 	stw	r10,244(sp)
    8628:	00127600 	call	12760 <__eqdf2>
    862c:	da003f17 	ldw	r8,252(sp)
    8630:	da403e17 	ldw	r9,248(sp)
    8634:	da803d17 	ldw	r10,244(sp)
    8638:	103f1f26 	beq	r2,zero,82b8 <__alt_mem_Flash_flash_data+0xf40082b8>
    863c:	00800044 	movi	r2,1
    8640:	1707c83a 	sub	r3,r2,fp
    8644:	d8c02615 	stw	r3,152(sp)
    8648:	003f1c06 	br	82bc <__alt_mem_Flash_flash_data+0xf40082bc>
    864c:	00800c04 	movi	r2,48
    8650:	e0c00c04 	addi	r3,fp,48
    8654:	d8802345 	stb	r2,141(sp)
    8658:	d8c02385 	stb	r3,142(sp)
    865c:	d88023c4 	addi	r2,sp,143
    8660:	dd4022c4 	addi	r21,sp,139
    8664:	003fa906 	br	850c <__alt_mem_Flash_flash_data+0xf400850c>
    8668:	0005883a 	mov	r2,zero
    866c:	003f3c06 	br	8360 <__alt_mem_Flash_flash_data+0xf4008360>
    8670:	dac02d17 	ldw	r11,180(sp)
    8674:	5a400017 	ldw	r9,0(r11)
    8678:	5ac00104 	addi	r11,r11,4
    867c:	dac02d15 	stw	r11,180(sp)
    8680:	483ec80e 	bge	r9,zero,81a4 <__alt_mem_Flash_flash_data+0xf40081a4>
    8684:	027fffc4 	movi	r9,-1
    8688:	1c000047 	ldb	r16,1(r3)
    868c:	0038ab06 	br	693c <__alt_mem_Flash_flash_data+0xf400693c>
    8690:	4800111e 	bne	r9,zero,86d8 <___vfprintf_internal_r+0x1f30>
    8694:	8c40004c 	andi	r17,r17,1
    8698:	88000f1e 	bne	r17,zero,86d8 <___vfprintf_internal_r+0x1f30>
    869c:	00800044 	movi	r2,1
    86a0:	1025883a 	mov	r18,r2
    86a4:	003e1806 	br	7f08 <__alt_mem_Flash_flash_data+0xf4007f08>
    86a8:	04800084 	movi	r18,2
    86ac:	90e5c83a 	sub	r18,r18,r3
    86b0:	003fb306 	br	8580 <__alt_mem_Flash_flash_data+0xf4008580>
    86b4:	0005883a 	mov	r2,zero
    86b8:	003f9d06 	br	8530 <__alt_mem_Flash_flash_data+0xf4008530>
    86bc:	88a2703a 	and	r17,r17,r2
    86c0:	883f9926 	beq	r17,zero,8528 <__alt_mem_Flash_flash_data+0xf4008528>
    86c4:	003f9706 	br	8524 <__alt_mem_Flash_flash_data+0xf4008524>
    86c8:	00800b44 	movi	r2,45
    86cc:	0739c83a 	sub	fp,zero,fp
    86d0:	d8802305 	stb	r2,140(sp)
    86d4:	003f6606 	br	8470 <__alt_mem_Flash_flash_data+0xf4008470>
    86d8:	4c800084 	addi	r18,r9,2
    86dc:	9005883a 	mov	r2,r18
    86e0:	903e090e 	bge	r18,zero,7f08 <__alt_mem_Flash_flash_data+0xf4007f08>
    86e4:	003faa06 	br	8590 <__alt_mem_Flash_flash_data+0xf4008590>
    86e8:	d8802344 	addi	r2,sp,141
    86ec:	003f8706 	br	850c <__alt_mem_Flash_flash_data+0xf400850c>
    86f0:	d8c02617 	ldw	r3,152(sp)
    86f4:	003f5806 	br	8458 <__alt_mem_Flash_flash_data+0xf4008458>

000086f8 <__vfprintf_internal>:
    86f8:	2007883a 	mov	r3,r4
    86fc:	010000b4 	movhi	r4,2
    8700:	211fb304 	addi	r4,r4,32460
    8704:	21000017 	ldw	r4,0(r4)
    8708:	2805883a 	mov	r2,r5
    870c:	300f883a 	mov	r7,r6
    8710:	180b883a 	mov	r5,r3
    8714:	100d883a 	mov	r6,r2
    8718:	00067a81 	jmpi	67a8 <___vfprintf_internal_r>

0000871c <__sbprintf>:
    871c:	2880030b 	ldhu	r2,12(r5)
    8720:	2ac01917 	ldw	r11,100(r5)
    8724:	2a80038b 	ldhu	r10,14(r5)
    8728:	2a400717 	ldw	r9,28(r5)
    872c:	2a000917 	ldw	r8,36(r5)
    8730:	defee204 	addi	sp,sp,-1144
    8734:	00c10004 	movi	r3,1024
    8738:	dc011a15 	stw	r16,1128(sp)
    873c:	10bfff4c 	andi	r2,r2,65533
    8740:	2821883a 	mov	r16,r5
    8744:	d8cb883a 	add	r5,sp,r3
    8748:	dc811c15 	stw	r18,1136(sp)
    874c:	dc411b15 	stw	r17,1132(sp)
    8750:	dfc11d15 	stw	ra,1140(sp)
    8754:	2025883a 	mov	r18,r4
    8758:	d881030d 	sth	r2,1036(sp)
    875c:	dac11915 	stw	r11,1124(sp)
    8760:	da81038d 	sth	r10,1038(sp)
    8764:	da410715 	stw	r9,1052(sp)
    8768:	da010915 	stw	r8,1060(sp)
    876c:	dec10015 	stw	sp,1024(sp)
    8770:	dec10415 	stw	sp,1040(sp)
    8774:	d8c10215 	stw	r3,1032(sp)
    8778:	d8c10515 	stw	r3,1044(sp)
    877c:	d8010615 	stw	zero,1048(sp)
    8780:	00067a80 	call	67a8 <___vfprintf_internal_r>
    8784:	1023883a 	mov	r17,r2
    8788:	10000416 	blt	r2,zero,879c <__sbprintf+0x80>
    878c:	9009883a 	mov	r4,r18
    8790:	d9410004 	addi	r5,sp,1024
    8794:	000a45c0 	call	a45c <_fflush_r>
    8798:	10000d1e 	bne	r2,zero,87d0 <__sbprintf+0xb4>
    879c:	d8c1030b 	ldhu	r3,1036(sp)
    87a0:	18c0100c 	andi	r3,r3,64
    87a4:	18000326 	beq	r3,zero,87b4 <__sbprintf+0x98>
    87a8:	8080030b 	ldhu	r2,12(r16)
    87ac:	10801014 	ori	r2,r2,64
    87b0:	8080030d 	sth	r2,12(r16)
    87b4:	8805883a 	mov	r2,r17
    87b8:	dfc11d17 	ldw	ra,1140(sp)
    87bc:	dc811c17 	ldw	r18,1136(sp)
    87c0:	dc411b17 	ldw	r17,1132(sp)
    87c4:	dc011a17 	ldw	r16,1128(sp)
    87c8:	dec11e04 	addi	sp,sp,1144
    87cc:	f800283a 	ret
    87d0:	047fffc4 	movi	r17,-1
    87d4:	003ff106 	br	879c <__alt_mem_Flash_flash_data+0xf400879c>

000087d8 <__swsetup_r>:
    87d8:	008000b4 	movhi	r2,2
    87dc:	defffd04 	addi	sp,sp,-12
    87e0:	109fb304 	addi	r2,r2,32460
    87e4:	dc400115 	stw	r17,4(sp)
    87e8:	2023883a 	mov	r17,r4
    87ec:	11000017 	ldw	r4,0(r2)
    87f0:	dc000015 	stw	r16,0(sp)
    87f4:	dfc00215 	stw	ra,8(sp)
    87f8:	2821883a 	mov	r16,r5
    87fc:	20000226 	beq	r4,zero,8808 <__swsetup_r+0x30>
    8800:	20c00e17 	ldw	r3,56(r4)
    8804:	18003126 	beq	r3,zero,88cc <__swsetup_r+0xf4>
    8808:	8080030b 	ldhu	r2,12(r16)
    880c:	10c0020c 	andi	r3,r2,8
    8810:	100d883a 	mov	r6,r2
    8814:	18000f26 	beq	r3,zero,8854 <__swsetup_r+0x7c>
    8818:	80c00417 	ldw	r3,16(r16)
    881c:	18001526 	beq	r3,zero,8874 <__swsetup_r+0x9c>
    8820:	1100004c 	andi	r4,r2,1
    8824:	20001c1e 	bne	r4,zero,8898 <__swsetup_r+0xc0>
    8828:	1080008c 	andi	r2,r2,2
    882c:	1000291e 	bne	r2,zero,88d4 <__swsetup_r+0xfc>
    8830:	80800517 	ldw	r2,20(r16)
    8834:	80800215 	stw	r2,8(r16)
    8838:	18001c26 	beq	r3,zero,88ac <__swsetup_r+0xd4>
    883c:	0005883a 	mov	r2,zero
    8840:	dfc00217 	ldw	ra,8(sp)
    8844:	dc400117 	ldw	r17,4(sp)
    8848:	dc000017 	ldw	r16,0(sp)
    884c:	dec00304 	addi	sp,sp,12
    8850:	f800283a 	ret
    8854:	3080040c 	andi	r2,r6,16
    8858:	10002e26 	beq	r2,zero,8914 <__swsetup_r+0x13c>
    885c:	3080010c 	andi	r2,r6,4
    8860:	10001e1e 	bne	r2,zero,88dc <__swsetup_r+0x104>
    8864:	80c00417 	ldw	r3,16(r16)
    8868:	30800214 	ori	r2,r6,8
    886c:	8080030d 	sth	r2,12(r16)
    8870:	183feb1e 	bne	r3,zero,8820 <__alt_mem_Flash_flash_data+0xf4008820>
    8874:	1140a00c 	andi	r5,r2,640
    8878:	01008004 	movi	r4,512
    887c:	293fe826 	beq	r5,r4,8820 <__alt_mem_Flash_flash_data+0xf4008820>
    8880:	8809883a 	mov	r4,r17
    8884:	800b883a 	mov	r5,r16
    8888:	000b3c40 	call	b3c4 <__smakebuf_r>
    888c:	8080030b 	ldhu	r2,12(r16)
    8890:	80c00417 	ldw	r3,16(r16)
    8894:	003fe206 	br	8820 <__alt_mem_Flash_flash_data+0xf4008820>
    8898:	80800517 	ldw	r2,20(r16)
    889c:	80000215 	stw	zero,8(r16)
    88a0:	0085c83a 	sub	r2,zero,r2
    88a4:	80800615 	stw	r2,24(r16)
    88a8:	183fe41e 	bne	r3,zero,883c <__alt_mem_Flash_flash_data+0xf400883c>
    88ac:	80c0030b 	ldhu	r3,12(r16)
    88b0:	0005883a 	mov	r2,zero
    88b4:	1900200c 	andi	r4,r3,128
    88b8:	203fe126 	beq	r4,zero,8840 <__alt_mem_Flash_flash_data+0xf4008840>
    88bc:	18c01014 	ori	r3,r3,64
    88c0:	80c0030d 	sth	r3,12(r16)
    88c4:	00bfffc4 	movi	r2,-1
    88c8:	003fdd06 	br	8840 <__alt_mem_Flash_flash_data+0xf4008840>
    88cc:	000a8380 	call	a838 <__sinit>
    88d0:	003fcd06 	br	8808 <__alt_mem_Flash_flash_data+0xf4008808>
    88d4:	0005883a 	mov	r2,zero
    88d8:	003fd606 	br	8834 <__alt_mem_Flash_flash_data+0xf4008834>
    88dc:	81400c17 	ldw	r5,48(r16)
    88e0:	28000626 	beq	r5,zero,88fc <__swsetup_r+0x124>
    88e4:	80801004 	addi	r2,r16,64
    88e8:	28800326 	beq	r5,r2,88f8 <__swsetup_r+0x120>
    88ec:	8809883a 	mov	r4,r17
    88f0:	000a9ac0 	call	a9ac <_free_r>
    88f4:	8180030b 	ldhu	r6,12(r16)
    88f8:	80000c15 	stw	zero,48(r16)
    88fc:	80c00417 	ldw	r3,16(r16)
    8900:	00bff6c4 	movi	r2,-37
    8904:	118c703a 	and	r6,r2,r6
    8908:	80000115 	stw	zero,4(r16)
    890c:	80c00015 	stw	r3,0(r16)
    8910:	003fd506 	br	8868 <__alt_mem_Flash_flash_data+0xf4008868>
    8914:	00800244 	movi	r2,9
    8918:	88800015 	stw	r2,0(r17)
    891c:	30801014 	ori	r2,r6,64
    8920:	8080030d 	sth	r2,12(r16)
    8924:	00bfffc4 	movi	r2,-1
    8928:	003fc506 	br	8840 <__alt_mem_Flash_flash_data+0xf4008840>

0000892c <quorem>:
    892c:	defff704 	addi	sp,sp,-36
    8930:	dc800215 	stw	r18,8(sp)
    8934:	20800417 	ldw	r2,16(r4)
    8938:	2c800417 	ldw	r18,16(r5)
    893c:	dfc00815 	stw	ra,32(sp)
    8940:	ddc00715 	stw	r23,28(sp)
    8944:	dd800615 	stw	r22,24(sp)
    8948:	dd400515 	stw	r21,20(sp)
    894c:	dd000415 	stw	r20,16(sp)
    8950:	dcc00315 	stw	r19,12(sp)
    8954:	dc400115 	stw	r17,4(sp)
    8958:	dc000015 	stw	r16,0(sp)
    895c:	14807116 	blt	r2,r18,8b24 <quorem+0x1f8>
    8960:	94bfffc4 	addi	r18,r18,-1
    8964:	94ad883a 	add	r22,r18,r18
    8968:	b5ad883a 	add	r22,r22,r22
    896c:	2c400504 	addi	r17,r5,20
    8970:	8da9883a 	add	r20,r17,r22
    8974:	25400504 	addi	r21,r4,20
    8978:	282f883a 	mov	r23,r5
    897c:	adad883a 	add	r22,r21,r22
    8980:	a1400017 	ldw	r5,0(r20)
    8984:	2021883a 	mov	r16,r4
    8988:	b1000017 	ldw	r4,0(r22)
    898c:	29400044 	addi	r5,r5,1
    8990:	00115e80 	call	115e8 <__udivsi3>
    8994:	1027883a 	mov	r19,r2
    8998:	10002c26 	beq	r2,zero,8a4c <quorem+0x120>
    899c:	a813883a 	mov	r9,r21
    89a0:	8811883a 	mov	r8,r17
    89a4:	0009883a 	mov	r4,zero
    89a8:	000d883a 	mov	r6,zero
    89ac:	41c00017 	ldw	r7,0(r8)
    89b0:	49400017 	ldw	r5,0(r9)
    89b4:	42000104 	addi	r8,r8,4
    89b8:	38bfffcc 	andi	r2,r7,65535
    89bc:	14c5383a 	mul	r2,r2,r19
    89c0:	380ed43a 	srli	r7,r7,16
    89c4:	28ffffcc 	andi	r3,r5,65535
    89c8:	2085883a 	add	r2,r4,r2
    89cc:	1008d43a 	srli	r4,r2,16
    89d0:	3ccf383a 	mul	r7,r7,r19
    89d4:	198d883a 	add	r6,r3,r6
    89d8:	10ffffcc 	andi	r3,r2,65535
    89dc:	30c7c83a 	sub	r3,r6,r3
    89e0:	280ad43a 	srli	r5,r5,16
    89e4:	21c9883a 	add	r4,r4,r7
    89e8:	180dd43a 	srai	r6,r3,16
    89ec:	20bfffcc 	andi	r2,r4,65535
    89f0:	288bc83a 	sub	r5,r5,r2
    89f4:	298b883a 	add	r5,r5,r6
    89f8:	280e943a 	slli	r7,r5,16
    89fc:	18ffffcc 	andi	r3,r3,65535
    8a00:	2008d43a 	srli	r4,r4,16
    8a04:	38ceb03a 	or	r7,r7,r3
    8a08:	49c00015 	stw	r7,0(r9)
    8a0c:	280dd43a 	srai	r6,r5,16
    8a10:	4a400104 	addi	r9,r9,4
    8a14:	a23fe52e 	bgeu	r20,r8,89ac <__alt_mem_Flash_flash_data+0xf40089ac>
    8a18:	b0800017 	ldw	r2,0(r22)
    8a1c:	10000b1e 	bne	r2,zero,8a4c <quorem+0x120>
    8a20:	b0bfff04 	addi	r2,r22,-4
    8a24:	a880082e 	bgeu	r21,r2,8a48 <quorem+0x11c>
    8a28:	b0ffff17 	ldw	r3,-4(r22)
    8a2c:	18000326 	beq	r3,zero,8a3c <quorem+0x110>
    8a30:	00000506 	br	8a48 <quorem+0x11c>
    8a34:	10c00017 	ldw	r3,0(r2)
    8a38:	1800031e 	bne	r3,zero,8a48 <quorem+0x11c>
    8a3c:	10bfff04 	addi	r2,r2,-4
    8a40:	94bfffc4 	addi	r18,r18,-1
    8a44:	a8bffb36 	bltu	r21,r2,8a34 <__alt_mem_Flash_flash_data+0xf4008a34>
    8a48:	84800415 	stw	r18,16(r16)
    8a4c:	8009883a 	mov	r4,r16
    8a50:	b80b883a 	mov	r5,r23
    8a54:	000c9740 	call	c974 <__mcmp>
    8a58:	10002616 	blt	r2,zero,8af4 <quorem+0x1c8>
    8a5c:	9cc00044 	addi	r19,r19,1
    8a60:	a80d883a 	mov	r6,r21
    8a64:	000b883a 	mov	r5,zero
    8a68:	31000017 	ldw	r4,0(r6)
    8a6c:	88800017 	ldw	r2,0(r17)
    8a70:	31800104 	addi	r6,r6,4
    8a74:	20ffffcc 	andi	r3,r4,65535
    8a78:	194b883a 	add	r5,r3,r5
    8a7c:	10ffffcc 	andi	r3,r2,65535
    8a80:	28c7c83a 	sub	r3,r5,r3
    8a84:	1004d43a 	srli	r2,r2,16
    8a88:	2008d43a 	srli	r4,r4,16
    8a8c:	180bd43a 	srai	r5,r3,16
    8a90:	18ffffcc 	andi	r3,r3,65535
    8a94:	2089c83a 	sub	r4,r4,r2
    8a98:	2149883a 	add	r4,r4,r5
    8a9c:	2004943a 	slli	r2,r4,16
    8aa0:	8c400104 	addi	r17,r17,4
    8aa4:	200bd43a 	srai	r5,r4,16
    8aa8:	10c6b03a 	or	r3,r2,r3
    8aac:	30ffff15 	stw	r3,-4(r6)
    8ab0:	a47fed2e 	bgeu	r20,r17,8a68 <__alt_mem_Flash_flash_data+0xf4008a68>
    8ab4:	9485883a 	add	r2,r18,r18
    8ab8:	1085883a 	add	r2,r2,r2
    8abc:	a887883a 	add	r3,r21,r2
    8ac0:	18800017 	ldw	r2,0(r3)
    8ac4:	10000b1e 	bne	r2,zero,8af4 <quorem+0x1c8>
    8ac8:	18bfff04 	addi	r2,r3,-4
    8acc:	a880082e 	bgeu	r21,r2,8af0 <quorem+0x1c4>
    8ad0:	18ffff17 	ldw	r3,-4(r3)
    8ad4:	18000326 	beq	r3,zero,8ae4 <quorem+0x1b8>
    8ad8:	00000506 	br	8af0 <quorem+0x1c4>
    8adc:	10c00017 	ldw	r3,0(r2)
    8ae0:	1800031e 	bne	r3,zero,8af0 <quorem+0x1c4>
    8ae4:	10bfff04 	addi	r2,r2,-4
    8ae8:	94bfffc4 	addi	r18,r18,-1
    8aec:	a8bffb36 	bltu	r21,r2,8adc <__alt_mem_Flash_flash_data+0xf4008adc>
    8af0:	84800415 	stw	r18,16(r16)
    8af4:	9805883a 	mov	r2,r19
    8af8:	dfc00817 	ldw	ra,32(sp)
    8afc:	ddc00717 	ldw	r23,28(sp)
    8b00:	dd800617 	ldw	r22,24(sp)
    8b04:	dd400517 	ldw	r21,20(sp)
    8b08:	dd000417 	ldw	r20,16(sp)
    8b0c:	dcc00317 	ldw	r19,12(sp)
    8b10:	dc800217 	ldw	r18,8(sp)
    8b14:	dc400117 	ldw	r17,4(sp)
    8b18:	dc000017 	ldw	r16,0(sp)
    8b1c:	dec00904 	addi	sp,sp,36
    8b20:	f800283a 	ret
    8b24:	0005883a 	mov	r2,zero
    8b28:	003ff306 	br	8af8 <__alt_mem_Flash_flash_data+0xf4008af8>

00008b2c <_dtoa_r>:
    8b2c:	20801017 	ldw	r2,64(r4)
    8b30:	deffde04 	addi	sp,sp,-136
    8b34:	dd401d15 	stw	r21,116(sp)
    8b38:	dcc01b15 	stw	r19,108(sp)
    8b3c:	dc801a15 	stw	r18,104(sp)
    8b40:	dc401915 	stw	r17,100(sp)
    8b44:	dc001815 	stw	r16,96(sp)
    8b48:	dfc02115 	stw	ra,132(sp)
    8b4c:	df002015 	stw	fp,128(sp)
    8b50:	ddc01f15 	stw	r23,124(sp)
    8b54:	dd801e15 	stw	r22,120(sp)
    8b58:	dd001c15 	stw	r20,112(sp)
    8b5c:	d9c00315 	stw	r7,12(sp)
    8b60:	2021883a 	mov	r16,r4
    8b64:	302b883a 	mov	r21,r6
    8b68:	2825883a 	mov	r18,r5
    8b6c:	dc402417 	ldw	r17,144(sp)
    8b70:	3027883a 	mov	r19,r6
    8b74:	10000826 	beq	r2,zero,8b98 <_dtoa_r+0x6c>
    8b78:	21801117 	ldw	r6,68(r4)
    8b7c:	00c00044 	movi	r3,1
    8b80:	100b883a 	mov	r5,r2
    8b84:	1986983a 	sll	r3,r3,r6
    8b88:	11800115 	stw	r6,4(r2)
    8b8c:	10c00215 	stw	r3,8(r2)
    8b90:	000c1480 	call	c148 <_Bfree>
    8b94:	80001015 	stw	zero,64(r16)
    8b98:	a8002d16 	blt	r21,zero,8c50 <_dtoa_r+0x124>
    8b9c:	88000015 	stw	zero,0(r17)
    8ba0:	a8dffc2c 	andhi	r3,r21,32752
    8ba4:	009ffc34 	movhi	r2,32752
    8ba8:	18801b26 	beq	r3,r2,8c18 <_dtoa_r+0xec>
    8bac:	9009883a 	mov	r4,r18
    8bb0:	980b883a 	mov	r5,r19
    8bb4:	000d883a 	mov	r6,zero
    8bb8:	000f883a 	mov	r7,zero
    8bbc:	00127600 	call	12760 <__eqdf2>
    8bc0:	10002a1e 	bne	r2,zero,8c6c <_dtoa_r+0x140>
    8bc4:	d8c02317 	ldw	r3,140(sp)
    8bc8:	d9002517 	ldw	r4,148(sp)
    8bcc:	00800044 	movi	r2,1
    8bd0:	18800015 	stw	r2,0(r3)
    8bd4:	2001a226 	beq	r4,zero,9260 <_dtoa_r+0x734>
    8bd8:	008000b4 	movhi	r2,2
    8bdc:	1096a844 	addi	r2,r2,23201
    8be0:	20800015 	stw	r2,0(r4)
    8be4:	10bfffc4 	addi	r2,r2,-1
    8be8:	dfc02117 	ldw	ra,132(sp)
    8bec:	df002017 	ldw	fp,128(sp)
    8bf0:	ddc01f17 	ldw	r23,124(sp)
    8bf4:	dd801e17 	ldw	r22,120(sp)
    8bf8:	dd401d17 	ldw	r21,116(sp)
    8bfc:	dd001c17 	ldw	r20,112(sp)
    8c00:	dcc01b17 	ldw	r19,108(sp)
    8c04:	dc801a17 	ldw	r18,104(sp)
    8c08:	dc401917 	ldw	r17,100(sp)
    8c0c:	dc001817 	ldw	r16,96(sp)
    8c10:	dec02204 	addi	sp,sp,136
    8c14:	f800283a 	ret
    8c18:	d8c02317 	ldw	r3,140(sp)
    8c1c:	0089c3c4 	movi	r2,9999
    8c20:	18800015 	stw	r2,0(r3)
    8c24:	90017c26 	beq	r18,zero,9218 <_dtoa_r+0x6ec>
    8c28:	008000b4 	movhi	r2,2
    8c2c:	1096bc04 	addi	r2,r2,23280
    8c30:	d9002517 	ldw	r4,148(sp)
    8c34:	203fec26 	beq	r4,zero,8be8 <__alt_mem_Flash_flash_data+0xf4008be8>
    8c38:	10c000c7 	ldb	r3,3(r2)
    8c3c:	18017d1e 	bne	r3,zero,9234 <_dtoa_r+0x708>
    8c40:	10c000c4 	addi	r3,r2,3
    8c44:	d9802517 	ldw	r6,148(sp)
    8c48:	30c00015 	stw	r3,0(r6)
    8c4c:	003fe606 	br	8be8 <__alt_mem_Flash_flash_data+0xf4008be8>
    8c50:	04e00034 	movhi	r19,32768
    8c54:	9cffffc4 	addi	r19,r19,-1
    8c58:	00800044 	movi	r2,1
    8c5c:	ace6703a 	and	r19,r21,r19
    8c60:	88800015 	stw	r2,0(r17)
    8c64:	982b883a 	mov	r21,r19
    8c68:	003fcd06 	br	8ba0 <__alt_mem_Flash_flash_data+0xf4008ba0>
    8c6c:	d8800204 	addi	r2,sp,8
    8c70:	a822d53a 	srli	r17,r21,20
    8c74:	d8800015 	stw	r2,0(sp)
    8c78:	8009883a 	mov	r4,r16
    8c7c:	900b883a 	mov	r5,r18
    8c80:	980d883a 	mov	r6,r19
    8c84:	d9c00104 	addi	r7,sp,4
    8c88:	000cce80 	call	cce8 <__d2b>
    8c8c:	1039883a 	mov	fp,r2
    8c90:	88016a1e 	bne	r17,zero,923c <_dtoa_r+0x710>
    8c94:	dd000217 	ldw	r20,8(sp)
    8c98:	dc400117 	ldw	r17,4(sp)
    8c9c:	00befbc4 	movi	r2,-1041
    8ca0:	a463883a 	add	r17,r20,r17
    8ca4:	8882ea16 	blt	r17,r2,9850 <_dtoa_r+0xd24>
    8ca8:	00bf0384 	movi	r2,-1010
    8cac:	1445c83a 	sub	r2,r2,r17
    8cb0:	89010484 	addi	r4,r17,1042
    8cb4:	a8aa983a 	sll	r21,r21,r2
    8cb8:	9108d83a 	srl	r4,r18,r4
    8cbc:	a908b03a 	or	r4,r21,r4
    8cc0:	0013af00 	call	13af0 <__floatunsidf>
    8cc4:	017f8434 	movhi	r5,65040
    8cc8:	01800044 	movi	r6,1
    8ccc:	1009883a 	mov	r4,r2
    8cd0:	194b883a 	add	r5,r3,r5
    8cd4:	8c7fffc4 	addi	r17,r17,-1
    8cd8:	d9800f15 	stw	r6,60(sp)
    8cdc:	000d883a 	mov	r6,zero
    8ce0:	01cffe34 	movhi	r7,16376
    8ce4:	00130c80 	call	130c8 <__subdf3>
    8ce8:	0198dbf4 	movhi	r6,25455
    8cec:	01cff4f4 	movhi	r7,16339
    8cf0:	1009883a 	mov	r4,r2
    8cf4:	180b883a 	mov	r5,r3
    8cf8:	3190d844 	addi	r6,r6,17249
    8cfc:	39e1e9c4 	addi	r7,r7,-30809
    8d00:	00129a40 	call	129a4 <__muldf3>
    8d04:	01a2d874 	movhi	r6,35681
    8d08:	01cff1f4 	movhi	r7,16327
    8d0c:	180b883a 	mov	r5,r3
    8d10:	31b22cc4 	addi	r6,r6,-14157
    8d14:	39e28a04 	addi	r7,r7,-30168
    8d18:	1009883a 	mov	r4,r2
    8d1c:	00115f80 	call	115f8 <__adddf3>
    8d20:	8809883a 	mov	r4,r17
    8d24:	102d883a 	mov	r22,r2
    8d28:	182b883a 	mov	r21,r3
    8d2c:	0013a200 	call	13a20 <__floatsidf>
    8d30:	019427f4 	movhi	r6,20639
    8d34:	01cff4f4 	movhi	r7,16339
    8d38:	1009883a 	mov	r4,r2
    8d3c:	180b883a 	mov	r5,r3
    8d40:	319e7ec4 	addi	r6,r6,31227
    8d44:	39d104c4 	addi	r7,r7,17427
    8d48:	00129a40 	call	129a4 <__muldf3>
    8d4c:	b009883a 	mov	r4,r22
    8d50:	a80b883a 	mov	r5,r21
    8d54:	100d883a 	mov	r6,r2
    8d58:	180f883a 	mov	r7,r3
    8d5c:	00115f80 	call	115f8 <__adddf3>
    8d60:	1009883a 	mov	r4,r2
    8d64:	180b883a 	mov	r5,r3
    8d68:	102d883a 	mov	r22,r2
    8d6c:	182b883a 	mov	r21,r3
    8d70:	00139980 	call	13998 <__fixdfsi>
    8d74:	b009883a 	mov	r4,r22
    8d78:	a80b883a 	mov	r5,r21
    8d7c:	000d883a 	mov	r6,zero
    8d80:	000f883a 	mov	r7,zero
    8d84:	d8800515 	stw	r2,20(sp)
    8d88:	00128c40 	call	128c4 <__ledf2>
    8d8c:	10023116 	blt	r2,zero,9654 <_dtoa_r+0xb28>
    8d90:	d8c00517 	ldw	r3,20(sp)
    8d94:	00800584 	movi	r2,22
    8d98:	10c21f36 	bltu	r2,r3,9618 <_dtoa_r+0xaec>
    8d9c:	180490fa 	slli	r2,r3,3
    8da0:	00c000b4 	movhi	r3,2
    8da4:	18d6d804 	addi	r3,r3,23392
    8da8:	1885883a 	add	r2,r3,r2
    8dac:	11000017 	ldw	r4,0(r2)
    8db0:	11400117 	ldw	r5,4(r2)
    8db4:	900d883a 	mov	r6,r18
    8db8:	980f883a 	mov	r7,r19
    8dbc:	00127e40 	call	127e4 <__gedf2>
    8dc0:	0082a70e 	bge	zero,r2,9860 <_dtoa_r+0xd34>
    8dc4:	d9000517 	ldw	r4,20(sp)
    8dc8:	d8000d15 	stw	zero,52(sp)
    8dcc:	213fffc4 	addi	r4,r4,-1
    8dd0:	d9000515 	stw	r4,20(sp)
    8dd4:	a463c83a 	sub	r17,r20,r17
    8dd8:	8dbfffc4 	addi	r22,r17,-1
    8ddc:	b0021916 	blt	r22,zero,9644 <_dtoa_r+0xb18>
    8de0:	d8000815 	stw	zero,32(sp)
    8de4:	d8800517 	ldw	r2,20(sp)
    8de8:	10020e16 	blt	r2,zero,9624 <_dtoa_r+0xaf8>
    8dec:	b0ad883a 	add	r22,r22,r2
    8df0:	d8800a15 	stw	r2,40(sp)
    8df4:	d8000915 	stw	zero,36(sp)
    8df8:	d8c00317 	ldw	r3,12(sp)
    8dfc:	00800244 	movi	r2,9
    8e00:	10c11a36 	bltu	r2,r3,926c <_dtoa_r+0x740>
    8e04:	00800144 	movi	r2,5
    8e08:	10c4fc0e 	bge	r2,r3,a1fc <_dtoa_r+0x16d0>
    8e0c:	18ffff04 	addi	r3,r3,-4
    8e10:	d8c00315 	stw	r3,12(sp)
    8e14:	0029883a 	mov	r20,zero
    8e18:	d9800317 	ldw	r6,12(sp)
    8e1c:	008000c4 	movi	r2,3
    8e20:	3083bd26 	beq	r6,r2,9d18 <_dtoa_r+0x11ec>
    8e24:	1183670e 	bge	r2,r6,9bc4 <_dtoa_r+0x1098>
    8e28:	d8c00317 	ldw	r3,12(sp)
    8e2c:	00800104 	movi	r2,4
    8e30:	1882e726 	beq	r3,r2,99d0 <_dtoa_r+0xea4>
    8e34:	00800144 	movi	r2,5
    8e38:	1884f21e 	bne	r3,r2,a204 <_dtoa_r+0x16d8>
    8e3c:	00800044 	movi	r2,1
    8e40:	d8800b15 	stw	r2,44(sp)
    8e44:	d8c02217 	ldw	r3,136(sp)
    8e48:	d9000517 	ldw	r4,20(sp)
    8e4c:	1907883a 	add	r3,r3,r4
    8e50:	19800044 	addi	r6,r3,1
    8e54:	d8c00c15 	stw	r3,48(sp)
    8e58:	d9800615 	stw	r6,24(sp)
    8e5c:	0183c30e 	bge	zero,r6,9d6c <_dtoa_r+0x1240>
    8e60:	d9800617 	ldw	r6,24(sp)
    8e64:	3023883a 	mov	r17,r6
    8e68:	80001115 	stw	zero,68(r16)
    8e6c:	008005c4 	movi	r2,23
    8e70:	1184f62e 	bgeu	r2,r6,a24c <_dtoa_r+0x1720>
    8e74:	00c00044 	movi	r3,1
    8e78:	00800104 	movi	r2,4
    8e7c:	1085883a 	add	r2,r2,r2
    8e80:	11000504 	addi	r4,r2,20
    8e84:	180b883a 	mov	r5,r3
    8e88:	18c00044 	addi	r3,r3,1
    8e8c:	313ffb2e 	bgeu	r6,r4,8e7c <__alt_mem_Flash_flash_data+0xf4008e7c>
    8e90:	81401115 	stw	r5,68(r16)
    8e94:	8009883a 	mov	r4,r16
    8e98:	000c0a00 	call	c0a0 <_Balloc>
    8e9c:	d8800715 	stw	r2,28(sp)
    8ea0:	80801015 	stw	r2,64(r16)
    8ea4:	00800384 	movi	r2,14
    8ea8:	1440fd36 	bltu	r2,r17,92a0 <_dtoa_r+0x774>
    8eac:	a000fc26 	beq	r20,zero,92a0 <_dtoa_r+0x774>
    8eb0:	d8800517 	ldw	r2,20(sp)
    8eb4:	0083b90e 	bge	zero,r2,9d9c <_dtoa_r+0x1270>
    8eb8:	d8c00517 	ldw	r3,20(sp)
    8ebc:	108003cc 	andi	r2,r2,15
    8ec0:	100490fa 	slli	r2,r2,3
    8ec4:	182fd13a 	srai	r23,r3,4
    8ec8:	00c000b4 	movhi	r3,2
    8ecc:	18d6d804 	addi	r3,r3,23392
    8ed0:	1885883a 	add	r2,r3,r2
    8ed4:	b8c0040c 	andi	r3,r23,16
    8ed8:	12c00017 	ldw	r11,0(r2)
    8edc:	12800117 	ldw	r10,4(r2)
    8ee0:	18039726 	beq	r3,zero,9d40 <_dtoa_r+0x1214>
    8ee4:	008000b4 	movhi	r2,2
    8ee8:	1096ce04 	addi	r2,r2,23352
    8eec:	11800817 	ldw	r6,32(r2)
    8ef0:	11c00917 	ldw	r7,36(r2)
    8ef4:	9009883a 	mov	r4,r18
    8ef8:	980b883a 	mov	r5,r19
    8efc:	da801615 	stw	r10,88(sp)
    8f00:	dac01515 	stw	r11,84(sp)
    8f04:	0011e940 	call	11e94 <__divdf3>
    8f08:	da801617 	ldw	r10,88(sp)
    8f0c:	dac01517 	ldw	r11,84(sp)
    8f10:	bdc003cc 	andi	r23,r23,15
    8f14:	044000c4 	movi	r17,3
    8f18:	d8800e15 	stw	r2,56(sp)
    8f1c:	182b883a 	mov	r21,r3
    8f20:	b8001126 	beq	r23,zero,8f68 <_dtoa_r+0x43c>
    8f24:	050000b4 	movhi	r20,2
    8f28:	a516ce04 	addi	r20,r20,23352
    8f2c:	5805883a 	mov	r2,r11
    8f30:	5007883a 	mov	r3,r10
    8f34:	b980004c 	andi	r6,r23,1
    8f38:	1009883a 	mov	r4,r2
    8f3c:	b82fd07a 	srai	r23,r23,1
    8f40:	180b883a 	mov	r5,r3
    8f44:	30000426 	beq	r6,zero,8f58 <_dtoa_r+0x42c>
    8f48:	a1800017 	ldw	r6,0(r20)
    8f4c:	a1c00117 	ldw	r7,4(r20)
    8f50:	8c400044 	addi	r17,r17,1
    8f54:	00129a40 	call	129a4 <__muldf3>
    8f58:	a5000204 	addi	r20,r20,8
    8f5c:	b83ff51e 	bne	r23,zero,8f34 <__alt_mem_Flash_flash_data+0xf4008f34>
    8f60:	1017883a 	mov	r11,r2
    8f64:	1815883a 	mov	r10,r3
    8f68:	d9000e17 	ldw	r4,56(sp)
    8f6c:	a80b883a 	mov	r5,r21
    8f70:	580d883a 	mov	r6,r11
    8f74:	500f883a 	mov	r7,r10
    8f78:	0011e940 	call	11e94 <__divdf3>
    8f7c:	1029883a 	mov	r20,r2
    8f80:	182b883a 	mov	r21,r3
    8f84:	d9800d17 	ldw	r6,52(sp)
    8f88:	30000626 	beq	r6,zero,8fa4 <_dtoa_r+0x478>
    8f8c:	a009883a 	mov	r4,r20
    8f90:	a80b883a 	mov	r5,r21
    8f94:	000d883a 	mov	r6,zero
    8f98:	01cffc34 	movhi	r7,16368
    8f9c:	00128c40 	call	128c4 <__ledf2>
    8fa0:	10043216 	blt	r2,zero,a06c <_dtoa_r+0x1540>
    8fa4:	8809883a 	mov	r4,r17
    8fa8:	0013a200 	call	13a20 <__floatsidf>
    8fac:	1009883a 	mov	r4,r2
    8fb0:	180b883a 	mov	r5,r3
    8fb4:	a00d883a 	mov	r6,r20
    8fb8:	a80f883a 	mov	r7,r21
    8fbc:	00129a40 	call	129a4 <__muldf3>
    8fc0:	000d883a 	mov	r6,zero
    8fc4:	1009883a 	mov	r4,r2
    8fc8:	180b883a 	mov	r5,r3
    8fcc:	01d00734 	movhi	r7,16412
    8fd0:	00115f80 	call	115f8 <__adddf3>
    8fd4:	1023883a 	mov	r17,r2
    8fd8:	d9800617 	ldw	r6,24(sp)
    8fdc:	00bf3034 	movhi	r2,64704
    8fe0:	1885883a 	add	r2,r3,r2
    8fe4:	d8800e15 	stw	r2,56(sp)
    8fe8:	30032e26 	beq	r6,zero,9ca4 <_dtoa_r+0x1178>
    8fec:	d8c00517 	ldw	r3,20(sp)
    8ff0:	da800617 	ldw	r10,24(sp)
    8ff4:	d8c01215 	stw	r3,72(sp)
    8ff8:	d9000b17 	ldw	r4,44(sp)
    8ffc:	2003b026 	beq	r4,zero,9ec0 <_dtoa_r+0x1394>
    9000:	50bfffc4 	addi	r2,r10,-1
    9004:	100490fa 	slli	r2,r2,3
    9008:	00c000b4 	movhi	r3,2
    900c:	18d6d804 	addi	r3,r3,23392
    9010:	1885883a 	add	r2,r3,r2
    9014:	11800017 	ldw	r6,0(r2)
    9018:	11c00117 	ldw	r7,4(r2)
    901c:	d8800717 	ldw	r2,28(sp)
    9020:	0009883a 	mov	r4,zero
    9024:	014ff834 	movhi	r5,16352
    9028:	da801615 	stw	r10,88(sp)
    902c:	15c00044 	addi	r23,r2,1
    9030:	0011e940 	call	11e94 <__divdf3>
    9034:	d9c00e17 	ldw	r7,56(sp)
    9038:	880d883a 	mov	r6,r17
    903c:	1009883a 	mov	r4,r2
    9040:	180b883a 	mov	r5,r3
    9044:	00130c80 	call	130c8 <__subdf3>
    9048:	a80b883a 	mov	r5,r21
    904c:	a009883a 	mov	r4,r20
    9050:	d8c01015 	stw	r3,64(sp)
    9054:	d8800e15 	stw	r2,56(sp)
    9058:	00139980 	call	13998 <__fixdfsi>
    905c:	1009883a 	mov	r4,r2
    9060:	d8801715 	stw	r2,92(sp)
    9064:	0013a200 	call	13a20 <__floatsidf>
    9068:	a009883a 	mov	r4,r20
    906c:	a80b883a 	mov	r5,r21
    9070:	100d883a 	mov	r6,r2
    9074:	180f883a 	mov	r7,r3
    9078:	00130c80 	call	130c8 <__subdf3>
    907c:	da001717 	ldw	r8,92(sp)
    9080:	1829883a 	mov	r20,r3
    9084:	d8c00717 	ldw	r3,28(sp)
    9088:	d9000e17 	ldw	r4,56(sp)
    908c:	d9401017 	ldw	r5,64(sp)
    9090:	42000c04 	addi	r8,r8,48
    9094:	1023883a 	mov	r17,r2
    9098:	1a000005 	stb	r8,0(r3)
    909c:	880d883a 	mov	r6,r17
    90a0:	a00f883a 	mov	r7,r20
    90a4:	402b883a 	mov	r21,r8
    90a8:	00127e40 	call	127e4 <__gedf2>
    90ac:	00844516 	blt	zero,r2,a1c4 <_dtoa_r+0x1698>
    90b0:	0009883a 	mov	r4,zero
    90b4:	014ffc34 	movhi	r5,16368
    90b8:	880d883a 	mov	r6,r17
    90bc:	a00f883a 	mov	r7,r20
    90c0:	00130c80 	call	130c8 <__subdf3>
    90c4:	d9000e17 	ldw	r4,56(sp)
    90c8:	d9401017 	ldw	r5,64(sp)
    90cc:	100d883a 	mov	r6,r2
    90d0:	180f883a 	mov	r7,r3
    90d4:	00127e40 	call	127e4 <__gedf2>
    90d8:	da801617 	ldw	r10,88(sp)
    90dc:	00843616 	blt	zero,r2,a1b8 <_dtoa_r+0x168c>
    90e0:	00800044 	movi	r2,1
    90e4:	12806e0e 	bge	r2,r10,92a0 <_dtoa_r+0x774>
    90e8:	d9000717 	ldw	r4,28(sp)
    90ec:	dd801315 	stw	r22,76(sp)
    90f0:	dc001115 	stw	r16,68(sp)
    90f4:	2295883a 	add	r10,r4,r10
    90f8:	dcc01415 	stw	r19,80(sp)
    90fc:	502d883a 	mov	r22,r10
    9100:	dcc01017 	ldw	r19,64(sp)
    9104:	b821883a 	mov	r16,r23
    9108:	dc801015 	stw	r18,64(sp)
    910c:	dc800e17 	ldw	r18,56(sp)
    9110:	00000906 	br	9138 <_dtoa_r+0x60c>
    9114:	00130c80 	call	130c8 <__subdf3>
    9118:	1009883a 	mov	r4,r2
    911c:	180b883a 	mov	r5,r3
    9120:	900d883a 	mov	r6,r18
    9124:	980f883a 	mov	r7,r19
    9128:	00128c40 	call	128c4 <__ledf2>
    912c:	10040e16 	blt	r2,zero,a168 <_dtoa_r+0x163c>
    9130:	b821883a 	mov	r16,r23
    9134:	bd841026 	beq	r23,r22,a178 <_dtoa_r+0x164c>
    9138:	9009883a 	mov	r4,r18
    913c:	980b883a 	mov	r5,r19
    9140:	000d883a 	mov	r6,zero
    9144:	01d00934 	movhi	r7,16420
    9148:	00129a40 	call	129a4 <__muldf3>
    914c:	000d883a 	mov	r6,zero
    9150:	01d00934 	movhi	r7,16420
    9154:	8809883a 	mov	r4,r17
    9158:	a00b883a 	mov	r5,r20
    915c:	1025883a 	mov	r18,r2
    9160:	1827883a 	mov	r19,r3
    9164:	00129a40 	call	129a4 <__muldf3>
    9168:	180b883a 	mov	r5,r3
    916c:	1009883a 	mov	r4,r2
    9170:	1823883a 	mov	r17,r3
    9174:	1029883a 	mov	r20,r2
    9178:	00139980 	call	13998 <__fixdfsi>
    917c:	1009883a 	mov	r4,r2
    9180:	102b883a 	mov	r21,r2
    9184:	0013a200 	call	13a20 <__floatsidf>
    9188:	a009883a 	mov	r4,r20
    918c:	880b883a 	mov	r5,r17
    9190:	100d883a 	mov	r6,r2
    9194:	180f883a 	mov	r7,r3
    9198:	00130c80 	call	130c8 <__subdf3>
    919c:	ad400c04 	addi	r21,r21,48
    91a0:	1009883a 	mov	r4,r2
    91a4:	180b883a 	mov	r5,r3
    91a8:	900d883a 	mov	r6,r18
    91ac:	980f883a 	mov	r7,r19
    91b0:	85400005 	stb	r21,0(r16)
    91b4:	1023883a 	mov	r17,r2
    91b8:	1829883a 	mov	r20,r3
    91bc:	00128c40 	call	128c4 <__ledf2>
    91c0:	bdc00044 	addi	r23,r23,1
    91c4:	0009883a 	mov	r4,zero
    91c8:	014ffc34 	movhi	r5,16368
    91cc:	880d883a 	mov	r6,r17
    91d0:	a00f883a 	mov	r7,r20
    91d4:	103fcf0e 	bge	r2,zero,9114 <__alt_mem_Flash_flash_data+0xf4009114>
    91d8:	d9801217 	ldw	r6,72(sp)
    91dc:	dc001117 	ldw	r16,68(sp)
    91e0:	d9800515 	stw	r6,20(sp)
    91e4:	8009883a 	mov	r4,r16
    91e8:	e00b883a 	mov	r5,fp
    91ec:	000c1480 	call	c148 <_Bfree>
    91f0:	d8c00517 	ldw	r3,20(sp)
    91f4:	d9002317 	ldw	r4,140(sp)
    91f8:	d9802517 	ldw	r6,148(sp)
    91fc:	b8000005 	stb	zero,0(r23)
    9200:	18800044 	addi	r2,r3,1
    9204:	20800015 	stw	r2,0(r4)
    9208:	30027226 	beq	r6,zero,9bd4 <_dtoa_r+0x10a8>
    920c:	35c00015 	stw	r23,0(r6)
    9210:	d8800717 	ldw	r2,28(sp)
    9214:	003e7406 	br	8be8 <__alt_mem_Flash_flash_data+0xf4008be8>
    9218:	00800434 	movhi	r2,16
    921c:	10bfffc4 	addi	r2,r2,-1
    9220:	a8aa703a 	and	r21,r21,r2
    9224:	a83e801e 	bne	r21,zero,8c28 <__alt_mem_Flash_flash_data+0xf4008c28>
    9228:	008000b4 	movhi	r2,2
    922c:	1096b904 	addi	r2,r2,23268
    9230:	003e7f06 	br	8c30 <__alt_mem_Flash_flash_data+0xf4008c30>
    9234:	10c00204 	addi	r3,r2,8
    9238:	003e8206 	br	8c44 <__alt_mem_Flash_flash_data+0xf4008c44>
    923c:	01400434 	movhi	r5,16
    9240:	297fffc4 	addi	r5,r5,-1
    9244:	994a703a 	and	r5,r19,r5
    9248:	9009883a 	mov	r4,r18
    924c:	8c7f0044 	addi	r17,r17,-1023
    9250:	294ffc34 	orhi	r5,r5,16368
    9254:	dd000217 	ldw	r20,8(sp)
    9258:	d8000f15 	stw	zero,60(sp)
    925c:	003e9f06 	br	8cdc <__alt_mem_Flash_flash_data+0xf4008cdc>
    9260:	008000b4 	movhi	r2,2
    9264:	1096a804 	addi	r2,r2,23200
    9268:	003e5f06 	br	8be8 <__alt_mem_Flash_flash_data+0xf4008be8>
    926c:	80001115 	stw	zero,68(r16)
    9270:	8009883a 	mov	r4,r16
    9274:	000b883a 	mov	r5,zero
    9278:	000c0a00 	call	c0a0 <_Balloc>
    927c:	01bfffc4 	movi	r6,-1
    9280:	d8800715 	stw	r2,28(sp)
    9284:	80801015 	stw	r2,64(r16)
    9288:	00800044 	movi	r2,1
    928c:	d9800c15 	stw	r6,48(sp)
    9290:	d8800b15 	stw	r2,44(sp)
    9294:	d9800615 	stw	r6,24(sp)
    9298:	d8002215 	stw	zero,136(sp)
    929c:	d8000315 	stw	zero,12(sp)
    92a0:	d8800117 	ldw	r2,4(sp)
    92a4:	10008e16 	blt	r2,zero,94e0 <_dtoa_r+0x9b4>
    92a8:	d9000517 	ldw	r4,20(sp)
    92ac:	00c00384 	movi	r3,14
    92b0:	19008b16 	blt	r3,r4,94e0 <_dtoa_r+0x9b4>
    92b4:	200490fa 	slli	r2,r4,3
    92b8:	00c000b4 	movhi	r3,2
    92bc:	d9802217 	ldw	r6,136(sp)
    92c0:	18d6d804 	addi	r3,r3,23392
    92c4:	1885883a 	add	r2,r3,r2
    92c8:	14400017 	ldw	r17,0(r2)
    92cc:	15000117 	ldw	r20,4(r2)
    92d0:	3001c716 	blt	r6,zero,99f0 <_dtoa_r+0xec4>
    92d4:	880d883a 	mov	r6,r17
    92d8:	a00f883a 	mov	r7,r20
    92dc:	9009883a 	mov	r4,r18
    92e0:	980b883a 	mov	r5,r19
    92e4:	0011e940 	call	11e94 <__divdf3>
    92e8:	180b883a 	mov	r5,r3
    92ec:	1009883a 	mov	r4,r2
    92f0:	00139980 	call	13998 <__fixdfsi>
    92f4:	1009883a 	mov	r4,r2
    92f8:	102d883a 	mov	r22,r2
    92fc:	0013a200 	call	13a20 <__floatsidf>
    9300:	1009883a 	mov	r4,r2
    9304:	180b883a 	mov	r5,r3
    9308:	880d883a 	mov	r6,r17
    930c:	a00f883a 	mov	r7,r20
    9310:	00129a40 	call	129a4 <__muldf3>
    9314:	9009883a 	mov	r4,r18
    9318:	980b883a 	mov	r5,r19
    931c:	100d883a 	mov	r6,r2
    9320:	180f883a 	mov	r7,r3
    9324:	00130c80 	call	130c8 <__subdf3>
    9328:	d9000717 	ldw	r4,28(sp)
    932c:	d9800617 	ldw	r6,24(sp)
    9330:	180b883a 	mov	r5,r3
    9334:	b0c00c04 	addi	r3,r22,48
    9338:	20c00005 	stb	r3,0(r4)
    933c:	25c00044 	addi	r23,r4,1
    9340:	01000044 	movi	r4,1
    9344:	1011883a 	mov	r8,r2
    9348:	2807883a 	mov	r3,r5
    934c:	31003d26 	beq	r6,r4,9444 <_dtoa_r+0x918>
    9350:	000d883a 	mov	r6,zero
    9354:	01d00934 	movhi	r7,16420
    9358:	1009883a 	mov	r4,r2
    935c:	00129a40 	call	129a4 <__muldf3>
    9360:	1009883a 	mov	r4,r2
    9364:	180b883a 	mov	r5,r3
    9368:	000d883a 	mov	r6,zero
    936c:	000f883a 	mov	r7,zero
    9370:	1027883a 	mov	r19,r2
    9374:	182b883a 	mov	r21,r3
    9378:	00127600 	call	12760 <__eqdf2>
    937c:	103f9926 	beq	r2,zero,91e4 <__alt_mem_Flash_flash_data+0xf40091e4>
    9380:	d8c00617 	ldw	r3,24(sp)
    9384:	d9000717 	ldw	r4,28(sp)
    9388:	b825883a 	mov	r18,r23
    938c:	18bfffc4 	addi	r2,r3,-1
    9390:	20ad883a 	add	r22,r4,r2
    9394:	dc000315 	stw	r16,12(sp)
    9398:	00000a06 	br	93c4 <_dtoa_r+0x898>
    939c:	00129a40 	call	129a4 <__muldf3>
    93a0:	1009883a 	mov	r4,r2
    93a4:	180b883a 	mov	r5,r3
    93a8:	000d883a 	mov	r6,zero
    93ac:	000f883a 	mov	r7,zero
    93b0:	1027883a 	mov	r19,r2
    93b4:	182b883a 	mov	r21,r3
    93b8:	b825883a 	mov	r18,r23
    93bc:	00127600 	call	12760 <__eqdf2>
    93c0:	10022626 	beq	r2,zero,9c5c <_dtoa_r+0x1130>
    93c4:	880d883a 	mov	r6,r17
    93c8:	a00f883a 	mov	r7,r20
    93cc:	9809883a 	mov	r4,r19
    93d0:	a80b883a 	mov	r5,r21
    93d4:	0011e940 	call	11e94 <__divdf3>
    93d8:	180b883a 	mov	r5,r3
    93dc:	1009883a 	mov	r4,r2
    93e0:	00139980 	call	13998 <__fixdfsi>
    93e4:	1009883a 	mov	r4,r2
    93e8:	1021883a 	mov	r16,r2
    93ec:	0013a200 	call	13a20 <__floatsidf>
    93f0:	1009883a 	mov	r4,r2
    93f4:	180b883a 	mov	r5,r3
    93f8:	880d883a 	mov	r6,r17
    93fc:	a00f883a 	mov	r7,r20
    9400:	00129a40 	call	129a4 <__muldf3>
    9404:	9809883a 	mov	r4,r19
    9408:	a80b883a 	mov	r5,r21
    940c:	100d883a 	mov	r6,r2
    9410:	180f883a 	mov	r7,r3
    9414:	00130c80 	call	130c8 <__subdf3>
    9418:	82000c04 	addi	r8,r16,48
    941c:	92000005 	stb	r8,0(r18)
    9420:	1009883a 	mov	r4,r2
    9424:	180b883a 	mov	r5,r3
    9428:	000d883a 	mov	r6,zero
    942c:	01d00934 	movhi	r7,16420
    9430:	1011883a 	mov	r8,r2
    9434:	bdc00044 	addi	r23,r23,1
    9438:	95bfd81e 	bne	r18,r22,939c <__alt_mem_Flash_flash_data+0xf400939c>
    943c:	802d883a 	mov	r22,r16
    9440:	dc000317 	ldw	r16,12(sp)
    9444:	4009883a 	mov	r4,r8
    9448:	180b883a 	mov	r5,r3
    944c:	400d883a 	mov	r6,r8
    9450:	180f883a 	mov	r7,r3
    9454:	00115f80 	call	115f8 <__adddf3>
    9458:	8809883a 	mov	r4,r17
    945c:	a00b883a 	mov	r5,r20
    9460:	100d883a 	mov	r6,r2
    9464:	180f883a 	mov	r7,r3
    9468:	1027883a 	mov	r19,r2
    946c:	1825883a 	mov	r18,r3
    9470:	00128c40 	call	128c4 <__ledf2>
    9474:	10000816 	blt	r2,zero,9498 <_dtoa_r+0x96c>
    9478:	8809883a 	mov	r4,r17
    947c:	a00b883a 	mov	r5,r20
    9480:	980d883a 	mov	r6,r19
    9484:	900f883a 	mov	r7,r18
    9488:	00127600 	call	12760 <__eqdf2>
    948c:	103f551e 	bne	r2,zero,91e4 <__alt_mem_Flash_flash_data+0xf40091e4>
    9490:	b580004c 	andi	r22,r22,1
    9494:	b03f5326 	beq	r22,zero,91e4 <__alt_mem_Flash_flash_data+0xf40091e4>
    9498:	bd7fffc3 	ldbu	r21,-1(r23)
    949c:	b8bfffc4 	addi	r2,r23,-1
    94a0:	1007883a 	mov	r3,r2
    94a4:	01400e44 	movi	r5,57
    94a8:	d9800717 	ldw	r6,28(sp)
    94ac:	00000506 	br	94c4 <_dtoa_r+0x998>
    94b0:	18ffffc4 	addi	r3,r3,-1
    94b4:	30825e26 	beq	r6,r2,9e30 <_dtoa_r+0x1304>
    94b8:	1d400003 	ldbu	r21,0(r3)
    94bc:	102f883a 	mov	r23,r2
    94c0:	10bfffc4 	addi	r2,r2,-1
    94c4:	a9003fcc 	andi	r4,r21,255
    94c8:	2100201c 	xori	r4,r4,128
    94cc:	213fe004 	addi	r4,r4,-128
    94d0:	217ff726 	beq	r4,r5,94b0 <__alt_mem_Flash_flash_data+0xf40094b0>
    94d4:	aa000044 	addi	r8,r21,1
    94d8:	12000005 	stb	r8,0(r2)
    94dc:	003f4106 	br	91e4 <__alt_mem_Flash_flash_data+0xf40091e4>
    94e0:	d8c00b17 	ldw	r3,44(sp)
    94e4:	18006726 	beq	r3,zero,9684 <_dtoa_r+0xb58>
    94e8:	d9000317 	ldw	r4,12(sp)
    94ec:	00c00044 	movi	r3,1
    94f0:	19016a0e 	bge	r3,r4,9a9c <_dtoa_r+0xf70>
    94f4:	d8800617 	ldw	r2,24(sp)
    94f8:	d8c00917 	ldw	r3,36(sp)
    94fc:	157fffc4 	addi	r21,r2,-1
    9500:	1d420716 	blt	r3,r21,9d20 <_dtoa_r+0x11f4>
    9504:	1d6bc83a 	sub	r21,r3,r21
    9508:	d8800617 	ldw	r2,24(sp)
    950c:	1002c716 	blt	r2,zero,a02c <_dtoa_r+0x1500>
    9510:	dd000817 	ldw	r20,32(sp)
    9514:	d8800617 	ldw	r2,24(sp)
    9518:	d9800817 	ldw	r6,32(sp)
    951c:	8009883a 	mov	r4,r16
    9520:	01400044 	movi	r5,1
    9524:	308d883a 	add	r6,r6,r2
    9528:	d9800815 	stw	r6,32(sp)
    952c:	b0ad883a 	add	r22,r22,r2
    9530:	000c4ac0 	call	c4ac <__i2b>
    9534:	1023883a 	mov	r17,r2
    9538:	a0000826 	beq	r20,zero,955c <_dtoa_r+0xa30>
    953c:	0580070e 	bge	zero,r22,955c <_dtoa_r+0xa30>
    9540:	b005883a 	mov	r2,r22
    9544:	a5812016 	blt	r20,r22,99c8 <_dtoa_r+0xe9c>
    9548:	d8c00817 	ldw	r3,32(sp)
    954c:	a0a9c83a 	sub	r20,r20,r2
    9550:	b0adc83a 	sub	r22,r22,r2
    9554:	1887c83a 	sub	r3,r3,r2
    9558:	d8c00815 	stw	r3,32(sp)
    955c:	d9000917 	ldw	r4,36(sp)
    9560:	0100140e 	bge	zero,r4,95b4 <_dtoa_r+0xa88>
    9564:	d9800b17 	ldw	r6,44(sp)
    9568:	3001e526 	beq	r6,zero,9d00 <_dtoa_r+0x11d4>
    956c:	05400e0e 	bge	zero,r21,95a8 <_dtoa_r+0xa7c>
    9570:	880b883a 	mov	r5,r17
    9574:	8009883a 	mov	r4,r16
    9578:	a80d883a 	mov	r6,r21
    957c:	000c6e40 	call	c6e4 <__pow5mult>
    9580:	e00d883a 	mov	r6,fp
    9584:	8009883a 	mov	r4,r16
    9588:	100b883a 	mov	r5,r2
    958c:	1023883a 	mov	r17,r2
    9590:	000c4e80 	call	c4e8 <__multiply>
    9594:	102f883a 	mov	r23,r2
    9598:	e00b883a 	mov	r5,fp
    959c:	8009883a 	mov	r4,r16
    95a0:	000c1480 	call	c148 <_Bfree>
    95a4:	b839883a 	mov	fp,r23
    95a8:	d8800917 	ldw	r2,36(sp)
    95ac:	154dc83a 	sub	r6,r2,r21
    95b0:	3001281e 	bne	r6,zero,9a54 <_dtoa_r+0xf28>
    95b4:	05c00044 	movi	r23,1
    95b8:	8009883a 	mov	r4,r16
    95bc:	b80b883a 	mov	r5,r23
    95c0:	000c4ac0 	call	c4ac <__i2b>
    95c4:	d8c00a17 	ldw	r3,40(sp)
    95c8:	102b883a 	mov	r21,r2
    95cc:	00c0310e 	bge	zero,r3,9694 <_dtoa_r+0xb68>
    95d0:	8009883a 	mov	r4,r16
    95d4:	100b883a 	mov	r5,r2
    95d8:	180d883a 	mov	r6,r3
    95dc:	000c6e40 	call	c6e4 <__pow5mult>
    95e0:	d9000317 	ldw	r4,12(sp)
    95e4:	102b883a 	mov	r21,r2
    95e8:	b9011f0e 	bge	r23,r4,9a68 <_dtoa_r+0xf3c>
    95ec:	0027883a 	mov	r19,zero
    95f0:	a8800417 	ldw	r2,16(r21)
    95f4:	10800104 	addi	r2,r2,4
    95f8:	1085883a 	add	r2,r2,r2
    95fc:	1085883a 	add	r2,r2,r2
    9600:	a885883a 	add	r2,r21,r2
    9604:	11000017 	ldw	r4,0(r2)
    9608:	000c3940 	call	c394 <__hi0bits>
    960c:	00c00804 	movi	r3,32
    9610:	1885c83a 	sub	r2,r3,r2
    9614:	00002506 	br	96ac <_dtoa_r+0xb80>
    9618:	01800044 	movi	r6,1
    961c:	d9800d15 	stw	r6,52(sp)
    9620:	003dec06 	br	8dd4 <__alt_mem_Flash_flash_data+0xf4008dd4>
    9624:	d8c00817 	ldw	r3,32(sp)
    9628:	d9000517 	ldw	r4,20(sp)
    962c:	d8000a15 	stw	zero,40(sp)
    9630:	1907c83a 	sub	r3,r3,r4
    9634:	010dc83a 	sub	r6,zero,r4
    9638:	d8c00815 	stw	r3,32(sp)
    963c:	d9800915 	stw	r6,36(sp)
    9640:	003ded06 	br	8df8 <__alt_mem_Flash_flash_data+0xf4008df8>
    9644:	05adc83a 	sub	r22,zero,r22
    9648:	dd800815 	stw	r22,32(sp)
    964c:	002d883a 	mov	r22,zero
    9650:	003de406 	br	8de4 <__alt_mem_Flash_flash_data+0xf4008de4>
    9654:	d9000517 	ldw	r4,20(sp)
    9658:	0013a200 	call	13a20 <__floatsidf>
    965c:	1009883a 	mov	r4,r2
    9660:	180b883a 	mov	r5,r3
    9664:	b00d883a 	mov	r6,r22
    9668:	a80f883a 	mov	r7,r21
    966c:	00127600 	call	12760 <__eqdf2>
    9670:	103dc726 	beq	r2,zero,8d90 <__alt_mem_Flash_flash_data+0xf4008d90>
    9674:	d8800517 	ldw	r2,20(sp)
    9678:	10bfffc4 	addi	r2,r2,-1
    967c:	d8800515 	stw	r2,20(sp)
    9680:	003dc306 	br	8d90 <__alt_mem_Flash_flash_data+0xf4008d90>
    9684:	dd400917 	ldw	r21,36(sp)
    9688:	dd000817 	ldw	r20,32(sp)
    968c:	0023883a 	mov	r17,zero
    9690:	003fa906 	br	9538 <__alt_mem_Flash_flash_data+0xf4009538>
    9694:	d9800317 	ldw	r6,12(sp)
    9698:	b981670e 	bge	r23,r6,9c38 <_dtoa_r+0x110c>
    969c:	0027883a 	mov	r19,zero
    96a0:	d8c00a17 	ldw	r3,40(sp)
    96a4:	183fd21e 	bne	r3,zero,95f0 <__alt_mem_Flash_flash_data+0xf40095f0>
    96a8:	00800044 	movi	r2,1
    96ac:	1585883a 	add	r2,r2,r22
    96b0:	108007cc 	andi	r2,r2,31
    96b4:	10005f26 	beq	r2,zero,9834 <_dtoa_r+0xd08>
    96b8:	00c00804 	movi	r3,32
    96bc:	1887c83a 	sub	r3,r3,r2
    96c0:	01000104 	movi	r4,4
    96c4:	20c2dd0e 	bge	r4,r3,a23c <_dtoa_r+0x1710>
    96c8:	d9000817 	ldw	r4,32(sp)
    96cc:	00c00704 	movi	r3,28
    96d0:	1885c83a 	sub	r2,r3,r2
    96d4:	2089883a 	add	r4,r4,r2
    96d8:	d9000815 	stw	r4,32(sp)
    96dc:	a0a9883a 	add	r20,r20,r2
    96e0:	b0ad883a 	add	r22,r22,r2
    96e4:	d8800817 	ldw	r2,32(sp)
    96e8:	0080050e 	bge	zero,r2,9700 <_dtoa_r+0xbd4>
    96ec:	e00b883a 	mov	r5,fp
    96f0:	8009883a 	mov	r4,r16
    96f4:	100d883a 	mov	r6,r2
    96f8:	000c8240 	call	c824 <__lshift>
    96fc:	1039883a 	mov	fp,r2
    9700:	0580050e 	bge	zero,r22,9718 <_dtoa_r+0xbec>
    9704:	a80b883a 	mov	r5,r21
    9708:	8009883a 	mov	r4,r16
    970c:	b00d883a 	mov	r6,r22
    9710:	000c8240 	call	c824 <__lshift>
    9714:	102b883a 	mov	r21,r2
    9718:	d8c00d17 	ldw	r3,52(sp)
    971c:	1801161e 	bne	r3,zero,9b78 <_dtoa_r+0x104c>
    9720:	d8c00617 	ldw	r3,24(sp)
    9724:	00c12d0e 	bge	zero,r3,9bdc <_dtoa_r+0x10b0>
    9728:	d8c00b17 	ldw	r3,44(sp)
    972c:	1800571e 	bne	r3,zero,988c <_dtoa_r+0xd60>
    9730:	dc800717 	ldw	r18,28(sp)
    9734:	dcc00617 	ldw	r19,24(sp)
    9738:	9029883a 	mov	r20,r18
    973c:	00000206 	br	9748 <_dtoa_r+0xc1c>
    9740:	000c1700 	call	c170 <__multadd>
    9744:	1039883a 	mov	fp,r2
    9748:	e009883a 	mov	r4,fp
    974c:	a80b883a 	mov	r5,r21
    9750:	000892c0 	call	892c <quorem>
    9754:	10800c04 	addi	r2,r2,48
    9758:	90800005 	stb	r2,0(r18)
    975c:	94800044 	addi	r18,r18,1
    9760:	9507c83a 	sub	r3,r18,r20
    9764:	8009883a 	mov	r4,r16
    9768:	e00b883a 	mov	r5,fp
    976c:	01800284 	movi	r6,10
    9770:	000f883a 	mov	r7,zero
    9774:	1cfff216 	blt	r3,r19,9740 <__alt_mem_Flash_flash_data+0xf4009740>
    9778:	1011883a 	mov	r8,r2
    977c:	d8800617 	ldw	r2,24(sp)
    9780:	00822e0e 	bge	zero,r2,a03c <_dtoa_r+0x1510>
    9784:	d9000717 	ldw	r4,28(sp)
    9788:	0025883a 	mov	r18,zero
    978c:	20af883a 	add	r23,r4,r2
    9790:	e00b883a 	mov	r5,fp
    9794:	01800044 	movi	r6,1
    9798:	8009883a 	mov	r4,r16
    979c:	da001715 	stw	r8,92(sp)
    97a0:	000c8240 	call	c824 <__lshift>
    97a4:	1009883a 	mov	r4,r2
    97a8:	a80b883a 	mov	r5,r21
    97ac:	1039883a 	mov	fp,r2
    97b0:	000c9740 	call	c974 <__mcmp>
    97b4:	da001717 	ldw	r8,92(sp)
    97b8:	00816e0e 	bge	zero,r2,9d74 <_dtoa_r+0x1248>
    97bc:	b93fffc3 	ldbu	r4,-1(r23)
    97c0:	b8bfffc4 	addi	r2,r23,-1
    97c4:	1007883a 	mov	r3,r2
    97c8:	01800e44 	movi	r6,57
    97cc:	d9c00717 	ldw	r7,28(sp)
    97d0:	00000506 	br	97e8 <_dtoa_r+0xcbc>
    97d4:	18ffffc4 	addi	r3,r3,-1
    97d8:	38811926 	beq	r7,r2,9c40 <_dtoa_r+0x1114>
    97dc:	19000003 	ldbu	r4,0(r3)
    97e0:	102f883a 	mov	r23,r2
    97e4:	10bfffc4 	addi	r2,r2,-1
    97e8:	21403fcc 	andi	r5,r4,255
    97ec:	2940201c 	xori	r5,r5,128
    97f0:	297fe004 	addi	r5,r5,-128
    97f4:	29bff726 	beq	r5,r6,97d4 <__alt_mem_Flash_flash_data+0xf40097d4>
    97f8:	21000044 	addi	r4,r4,1
    97fc:	11000005 	stb	r4,0(r2)
    9800:	8009883a 	mov	r4,r16
    9804:	a80b883a 	mov	r5,r21
    9808:	000c1480 	call	c148 <_Bfree>
    980c:	883e7526 	beq	r17,zero,91e4 <__alt_mem_Flash_flash_data+0xf40091e4>
    9810:	90000426 	beq	r18,zero,9824 <_dtoa_r+0xcf8>
    9814:	94400326 	beq	r18,r17,9824 <_dtoa_r+0xcf8>
    9818:	8009883a 	mov	r4,r16
    981c:	900b883a 	mov	r5,r18
    9820:	000c1480 	call	c148 <_Bfree>
    9824:	8009883a 	mov	r4,r16
    9828:	880b883a 	mov	r5,r17
    982c:	000c1480 	call	c148 <_Bfree>
    9830:	003e6c06 	br	91e4 <__alt_mem_Flash_flash_data+0xf40091e4>
    9834:	00800704 	movi	r2,28
    9838:	d9800817 	ldw	r6,32(sp)
    983c:	a0a9883a 	add	r20,r20,r2
    9840:	b0ad883a 	add	r22,r22,r2
    9844:	308d883a 	add	r6,r6,r2
    9848:	d9800815 	stw	r6,32(sp)
    984c:	003fa506 	br	96e4 <__alt_mem_Flash_flash_data+0xf40096e4>
    9850:	013efb84 	movi	r4,-1042
    9854:	246bc83a 	sub	r21,r4,r17
    9858:	9548983a 	sll	r4,r18,r21
    985c:	003d1806 	br	8cc0 <__alt_mem_Flash_flash_data+0xf4008cc0>
    9860:	d8000d15 	stw	zero,52(sp)
    9864:	003d5b06 	br	8dd4 <__alt_mem_Flash_flash_data+0xf4008dd4>
    9868:	880b883a 	mov	r5,r17
    986c:	8009883a 	mov	r4,r16
    9870:	01800284 	movi	r6,10
    9874:	000f883a 	mov	r7,zero
    9878:	000c1700 	call	c170 <__multadd>
    987c:	1023883a 	mov	r17,r2
    9880:	d8800c17 	ldw	r2,48(sp)
    9884:	0082550e 	bge	zero,r2,a1dc <_dtoa_r+0x16b0>
    9888:	d8800615 	stw	r2,24(sp)
    988c:	0500050e 	bge	zero,r20,98a4 <_dtoa_r+0xd78>
    9890:	880b883a 	mov	r5,r17
    9894:	8009883a 	mov	r4,r16
    9898:	a00d883a 	mov	r6,r20
    989c:	000c8240 	call	c824 <__lshift>
    98a0:	1023883a 	mov	r17,r2
    98a4:	98016a1e 	bne	r19,zero,9e50 <_dtoa_r+0x1324>
    98a8:	8829883a 	mov	r20,r17
    98ac:	d9000617 	ldw	r4,24(sp)
    98b0:	dcc00717 	ldw	r19,28(sp)
    98b4:	9480004c 	andi	r18,r18,1
    98b8:	20bfffc4 	addi	r2,r4,-1
    98bc:	9885883a 	add	r2,r19,r2
    98c0:	d8800415 	stw	r2,16(sp)
    98c4:	dc800615 	stw	r18,24(sp)
    98c8:	e009883a 	mov	r4,fp
    98cc:	a80b883a 	mov	r5,r21
    98d0:	000892c0 	call	892c <quorem>
    98d4:	e009883a 	mov	r4,fp
    98d8:	880b883a 	mov	r5,r17
    98dc:	102f883a 	mov	r23,r2
    98e0:	000c9740 	call	c974 <__mcmp>
    98e4:	8009883a 	mov	r4,r16
    98e8:	a80b883a 	mov	r5,r21
    98ec:	a00d883a 	mov	r6,r20
    98f0:	102d883a 	mov	r22,r2
    98f4:	000c9d40 	call	c9d4 <__mdiff>
    98f8:	1007883a 	mov	r3,r2
    98fc:	10800317 	ldw	r2,12(r2)
    9900:	bc800c04 	addi	r18,r23,48
    9904:	1000971e 	bne	r2,zero,9b64 <_dtoa_r+0x1038>
    9908:	180b883a 	mov	r5,r3
    990c:	e009883a 	mov	r4,fp
    9910:	d8c01515 	stw	r3,84(sp)
    9914:	000c9740 	call	c974 <__mcmp>
    9918:	d8c01517 	ldw	r3,84(sp)
    991c:	8009883a 	mov	r4,r16
    9920:	d8801515 	stw	r2,84(sp)
    9924:	180b883a 	mov	r5,r3
    9928:	000c1480 	call	c148 <_Bfree>
    992c:	d8801517 	ldw	r2,84(sp)
    9930:	1000041e 	bne	r2,zero,9944 <_dtoa_r+0xe18>
    9934:	d9800317 	ldw	r6,12(sp)
    9938:	3000021e 	bne	r6,zero,9944 <_dtoa_r+0xe18>
    993c:	d8c00617 	ldw	r3,24(sp)
    9940:	18007626 	beq	r3,zero,9b1c <_dtoa_r+0xff0>
    9944:	b0005b16 	blt	r22,zero,9ab4 <_dtoa_r+0xf88>
    9948:	b000041e 	bne	r22,zero,995c <_dtoa_r+0xe30>
    994c:	d9000317 	ldw	r4,12(sp)
    9950:	2000021e 	bne	r4,zero,995c <_dtoa_r+0xe30>
    9954:	d8c00617 	ldw	r3,24(sp)
    9958:	18005626 	beq	r3,zero,9ab4 <_dtoa_r+0xf88>
    995c:	00814d16 	blt	zero,r2,9e94 <_dtoa_r+0x1368>
    9960:	d8c00417 	ldw	r3,16(sp)
    9964:	9d800044 	addi	r22,r19,1
    9968:	9c800005 	stb	r18,0(r19)
    996c:	b02f883a 	mov	r23,r22
    9970:	98c14c26 	beq	r19,r3,9ea4 <_dtoa_r+0x1378>
    9974:	e00b883a 	mov	r5,fp
    9978:	8009883a 	mov	r4,r16
    997c:	01800284 	movi	r6,10
    9980:	000f883a 	mov	r7,zero
    9984:	000c1700 	call	c170 <__multadd>
    9988:	1039883a 	mov	fp,r2
    998c:	8d006d26 	beq	r17,r20,9b44 <_dtoa_r+0x1018>
    9990:	880b883a 	mov	r5,r17
    9994:	01800284 	movi	r6,10
    9998:	000f883a 	mov	r7,zero
    999c:	8009883a 	mov	r4,r16
    99a0:	000c1700 	call	c170 <__multadd>
    99a4:	a00b883a 	mov	r5,r20
    99a8:	8009883a 	mov	r4,r16
    99ac:	01800284 	movi	r6,10
    99b0:	000f883a 	mov	r7,zero
    99b4:	1023883a 	mov	r17,r2
    99b8:	000c1700 	call	c170 <__multadd>
    99bc:	1029883a 	mov	r20,r2
    99c0:	b027883a 	mov	r19,r22
    99c4:	003fc006 	br	98c8 <__alt_mem_Flash_flash_data+0xf40098c8>
    99c8:	a005883a 	mov	r2,r20
    99cc:	003ede06 	br	9548 <__alt_mem_Flash_flash_data+0xf4009548>
    99d0:	01000044 	movi	r4,1
    99d4:	d9000b15 	stw	r4,44(sp)
    99d8:	d9802217 	ldw	r6,136(sp)
    99dc:	0180dc0e 	bge	zero,r6,9d50 <_dtoa_r+0x1224>
    99e0:	3023883a 	mov	r17,r6
    99e4:	d9800c15 	stw	r6,48(sp)
    99e8:	d9800615 	stw	r6,24(sp)
    99ec:	003d1e06 	br	8e68 <__alt_mem_Flash_flash_data+0xf4008e68>
    99f0:	d8800617 	ldw	r2,24(sp)
    99f4:	00be3716 	blt	zero,r2,92d4 <__alt_mem_Flash_flash_data+0xf40092d4>
    99f8:	1000be1e 	bne	r2,zero,9cf4 <_dtoa_r+0x11c8>
    99fc:	8809883a 	mov	r4,r17
    9a00:	a00b883a 	mov	r5,r20
    9a04:	000d883a 	mov	r6,zero
    9a08:	01d00534 	movhi	r7,16404
    9a0c:	00129a40 	call	129a4 <__muldf3>
    9a10:	1009883a 	mov	r4,r2
    9a14:	180b883a 	mov	r5,r3
    9a18:	900d883a 	mov	r6,r18
    9a1c:	980f883a 	mov	r7,r19
    9a20:	00127e40 	call	127e4 <__gedf2>
    9a24:	002b883a 	mov	r21,zero
    9a28:	0023883a 	mov	r17,zero
    9a2c:	10007a16 	blt	r2,zero,9c18 <_dtoa_r+0x10ec>
    9a30:	d9002217 	ldw	r4,136(sp)
    9a34:	ddc00717 	ldw	r23,28(sp)
    9a38:	0108303a 	nor	r4,zero,r4
    9a3c:	d9000515 	stw	r4,20(sp)
    9a40:	8009883a 	mov	r4,r16
    9a44:	a80b883a 	mov	r5,r21
    9a48:	000c1480 	call	c148 <_Bfree>
    9a4c:	883f751e 	bne	r17,zero,9824 <__alt_mem_Flash_flash_data+0xf4009824>
    9a50:	003de406 	br	91e4 <__alt_mem_Flash_flash_data+0xf40091e4>
    9a54:	e00b883a 	mov	r5,fp
    9a58:	8009883a 	mov	r4,r16
    9a5c:	000c6e40 	call	c6e4 <__pow5mult>
    9a60:	1039883a 	mov	fp,r2
    9a64:	003ed306 	br	95b4 <__alt_mem_Flash_flash_data+0xf40095b4>
    9a68:	903ee01e 	bne	r18,zero,95ec <__alt_mem_Flash_flash_data+0xf40095ec>
    9a6c:	00800434 	movhi	r2,16
    9a70:	10bfffc4 	addi	r2,r2,-1
    9a74:	9884703a 	and	r2,r19,r2
    9a78:	103f081e 	bne	r2,zero,969c <__alt_mem_Flash_flash_data+0xf400969c>
    9a7c:	9cdffc2c 	andhi	r19,r19,32752
    9a80:	983f0626 	beq	r19,zero,969c <__alt_mem_Flash_flash_data+0xf400969c>
    9a84:	d8800817 	ldw	r2,32(sp)
    9a88:	b5800044 	addi	r22,r22,1
    9a8c:	04c00044 	movi	r19,1
    9a90:	10800044 	addi	r2,r2,1
    9a94:	d8800815 	stw	r2,32(sp)
    9a98:	003f0106 	br	96a0 <__alt_mem_Flash_flash_data+0xf40096a0>
    9a9c:	d9800f17 	ldw	r6,60(sp)
    9aa0:	30016826 	beq	r6,zero,a044 <_dtoa_r+0x1518>
    9aa4:	10810cc4 	addi	r2,r2,1075
    9aa8:	dd400917 	ldw	r21,36(sp)
    9aac:	dd000817 	ldw	r20,32(sp)
    9ab0:	003e9906 	br	9518 <__alt_mem_Flash_flash_data+0xf4009518>
    9ab4:	9011883a 	mov	r8,r18
    9ab8:	4007883a 	mov	r3,r8
    9abc:	e02d883a 	mov	r22,fp
    9ac0:	0080100e 	bge	zero,r2,9b04 <_dtoa_r+0xfd8>
    9ac4:	01800044 	movi	r6,1
    9ac8:	8009883a 	mov	r4,r16
    9acc:	e00b883a 	mov	r5,fp
    9ad0:	da001515 	stw	r8,84(sp)
    9ad4:	da001715 	stw	r8,92(sp)
    9ad8:	000c8240 	call	c824 <__lshift>
    9adc:	1009883a 	mov	r4,r2
    9ae0:	a80b883a 	mov	r5,r21
    9ae4:	102d883a 	mov	r22,r2
    9ae8:	000c9740 	call	c974 <__mcmp>
    9aec:	d8c01517 	ldw	r3,84(sp)
    9af0:	da001717 	ldw	r8,92(sp)
    9af4:	0081a50e 	bge	zero,r2,a18c <_dtoa_r+0x1660>
    9af8:	00800e44 	movi	r2,57
    9afc:	40817b26 	beq	r8,r2,a0ec <_dtoa_r+0x15c0>
    9b00:	40c00044 	addi	r3,r8,1
    9b04:	8825883a 	mov	r18,r17
    9b08:	9dc00044 	addi	r23,r19,1
    9b0c:	98c00005 	stb	r3,0(r19)
    9b10:	a023883a 	mov	r17,r20
    9b14:	b039883a 	mov	fp,r22
    9b18:	003f3906 	br	9800 <__alt_mem_Flash_flash_data+0xf4009800>
    9b1c:	00800e44 	movi	r2,57
    9b20:	9011883a 	mov	r8,r18
    9b24:	90817226 	beq	r18,r2,a0f0 <_dtoa_r+0x15c4>
    9b28:	0580010e 	bge	zero,r22,9b30 <_dtoa_r+0x1004>
    9b2c:	ba000c44 	addi	r8,r23,49
    9b30:	8825883a 	mov	r18,r17
    9b34:	9dc00044 	addi	r23,r19,1
    9b38:	9a000005 	stb	r8,0(r19)
    9b3c:	a023883a 	mov	r17,r20
    9b40:	003f2f06 	br	9800 <__alt_mem_Flash_flash_data+0xf4009800>
    9b44:	880b883a 	mov	r5,r17
    9b48:	8009883a 	mov	r4,r16
    9b4c:	01800284 	movi	r6,10
    9b50:	000f883a 	mov	r7,zero
    9b54:	000c1700 	call	c170 <__multadd>
    9b58:	1023883a 	mov	r17,r2
    9b5c:	1029883a 	mov	r20,r2
    9b60:	003f9706 	br	99c0 <__alt_mem_Flash_flash_data+0xf40099c0>
    9b64:	8009883a 	mov	r4,r16
    9b68:	180b883a 	mov	r5,r3
    9b6c:	000c1480 	call	c148 <_Bfree>
    9b70:	00800044 	movi	r2,1
    9b74:	003f7306 	br	9944 <__alt_mem_Flash_flash_data+0xf4009944>
    9b78:	e009883a 	mov	r4,fp
    9b7c:	a80b883a 	mov	r5,r21
    9b80:	000c9740 	call	c974 <__mcmp>
    9b84:	103ee60e 	bge	r2,zero,9720 <__alt_mem_Flash_flash_data+0xf4009720>
    9b88:	8009883a 	mov	r4,r16
    9b8c:	e00b883a 	mov	r5,fp
    9b90:	01800284 	movi	r6,10
    9b94:	000f883a 	mov	r7,zero
    9b98:	000c1700 	call	c170 <__multadd>
    9b9c:	d9000517 	ldw	r4,20(sp)
    9ba0:	d9800b17 	ldw	r6,44(sp)
    9ba4:	1039883a 	mov	fp,r2
    9ba8:	213fffc4 	addi	r4,r4,-1
    9bac:	d9000515 	stw	r4,20(sp)
    9bb0:	303f2d1e 	bne	r6,zero,9868 <__alt_mem_Flash_flash_data+0xf4009868>
    9bb4:	d9000c17 	ldw	r4,48(sp)
    9bb8:	0101780e 	bge	zero,r4,a19c <_dtoa_r+0x1670>
    9bbc:	d9000615 	stw	r4,24(sp)
    9bc0:	003edb06 	br	9730 <__alt_mem_Flash_flash_data+0xf4009730>
    9bc4:	00800084 	movi	r2,2
    9bc8:	30818e1e 	bne	r6,r2,a204 <_dtoa_r+0x16d8>
    9bcc:	d8000b15 	stw	zero,44(sp)
    9bd0:	003f8106 	br	99d8 <__alt_mem_Flash_flash_data+0xf40099d8>
    9bd4:	d8800717 	ldw	r2,28(sp)
    9bd8:	003c0306 	br	8be8 <__alt_mem_Flash_flash_data+0xf4008be8>
    9bdc:	d9000317 	ldw	r4,12(sp)
    9be0:	00800084 	movi	r2,2
    9be4:	113ed00e 	bge	r2,r4,9728 <__alt_mem_Flash_flash_data+0xf4009728>
    9be8:	d8c00617 	ldw	r3,24(sp)
    9bec:	183f901e 	bne	r3,zero,9a30 <__alt_mem_Flash_flash_data+0xf4009a30>
    9bf0:	a80b883a 	mov	r5,r21
    9bf4:	8009883a 	mov	r4,r16
    9bf8:	01800144 	movi	r6,5
    9bfc:	000f883a 	mov	r7,zero
    9c00:	000c1700 	call	c170 <__multadd>
    9c04:	e009883a 	mov	r4,fp
    9c08:	100b883a 	mov	r5,r2
    9c0c:	102b883a 	mov	r21,r2
    9c10:	000c9740 	call	c974 <__mcmp>
    9c14:	00bf860e 	bge	zero,r2,9a30 <__alt_mem_Flash_flash_data+0xf4009a30>
    9c18:	d9800717 	ldw	r6,28(sp)
    9c1c:	00800c44 	movi	r2,49
    9c20:	30800005 	stb	r2,0(r6)
    9c24:	d8800517 	ldw	r2,20(sp)
    9c28:	35c00044 	addi	r23,r6,1
    9c2c:	10800044 	addi	r2,r2,1
    9c30:	d8800515 	stw	r2,20(sp)
    9c34:	003f8206 	br	9a40 <__alt_mem_Flash_flash_data+0xf4009a40>
    9c38:	903e981e 	bne	r18,zero,969c <__alt_mem_Flash_flash_data+0xf400969c>
    9c3c:	003f8b06 	br	9a6c <__alt_mem_Flash_flash_data+0xf4009a6c>
    9c40:	d9800517 	ldw	r6,20(sp)
    9c44:	d8c00717 	ldw	r3,28(sp)
    9c48:	00800c44 	movi	r2,49
    9c4c:	31800044 	addi	r6,r6,1
    9c50:	d9800515 	stw	r6,20(sp)
    9c54:	18800005 	stb	r2,0(r3)
    9c58:	003ee906 	br	9800 <__alt_mem_Flash_flash_data+0xf4009800>
    9c5c:	dc000317 	ldw	r16,12(sp)
    9c60:	003d6006 	br	91e4 <__alt_mem_Flash_flash_data+0xf40091e4>
    9c64:	8809883a 	mov	r4,r17
    9c68:	0013a200 	call	13a20 <__floatsidf>
    9c6c:	a009883a 	mov	r4,r20
    9c70:	a80b883a 	mov	r5,r21
    9c74:	100d883a 	mov	r6,r2
    9c78:	180f883a 	mov	r7,r3
    9c7c:	00129a40 	call	129a4 <__muldf3>
    9c80:	1009883a 	mov	r4,r2
    9c84:	180b883a 	mov	r5,r3
    9c88:	000d883a 	mov	r6,zero
    9c8c:	01d00734 	movhi	r7,16412
    9c90:	00115f80 	call	115f8 <__adddf3>
    9c94:	1023883a 	mov	r17,r2
    9c98:	00bf3034 	movhi	r2,64704
    9c9c:	1885883a 	add	r2,r3,r2
    9ca0:	d8800e15 	stw	r2,56(sp)
    9ca4:	a009883a 	mov	r4,r20
    9ca8:	a80b883a 	mov	r5,r21
    9cac:	000d883a 	mov	r6,zero
    9cb0:	01d00534 	movhi	r7,16404
    9cb4:	00130c80 	call	130c8 <__subdf3>
    9cb8:	d9c00e17 	ldw	r7,56(sp)
    9cbc:	1009883a 	mov	r4,r2
    9cc0:	180b883a 	mov	r5,r3
    9cc4:	880d883a 	mov	r6,r17
    9cc8:	102b883a 	mov	r21,r2
    9ccc:	1829883a 	mov	r20,r3
    9cd0:	00127e40 	call	127e4 <__gedf2>
    9cd4:	00807716 	blt	zero,r2,9eb4 <_dtoa_r+0x1388>
    9cd8:	d8800e17 	ldw	r2,56(sp)
    9cdc:	a809883a 	mov	r4,r21
    9ce0:	a00b883a 	mov	r5,r20
    9ce4:	11e0003c 	xorhi	r7,r2,32768
    9ce8:	880d883a 	mov	r6,r17
    9cec:	00128c40 	call	128c4 <__ledf2>
    9cf0:	103d6b0e 	bge	r2,zero,92a0 <__alt_mem_Flash_flash_data+0xf40092a0>
    9cf4:	002b883a 	mov	r21,zero
    9cf8:	0023883a 	mov	r17,zero
    9cfc:	003f4c06 	br	9a30 <__alt_mem_Flash_flash_data+0xf4009a30>
    9d00:	d9800917 	ldw	r6,36(sp)
    9d04:	e00b883a 	mov	r5,fp
    9d08:	8009883a 	mov	r4,r16
    9d0c:	000c6e40 	call	c6e4 <__pow5mult>
    9d10:	1039883a 	mov	fp,r2
    9d14:	003e2706 	br	95b4 <__alt_mem_Flash_flash_data+0xf40095b4>
    9d18:	d8000b15 	stw	zero,44(sp)
    9d1c:	003c4906 	br	8e44 <__alt_mem_Flash_flash_data+0xf4008e44>
    9d20:	d9000917 	ldw	r4,36(sp)
    9d24:	d9800a17 	ldw	r6,40(sp)
    9d28:	dd400915 	stw	r21,36(sp)
    9d2c:	a905c83a 	sub	r2,r21,r4
    9d30:	308d883a 	add	r6,r6,r2
    9d34:	d9800a15 	stw	r6,40(sp)
    9d38:	002b883a 	mov	r21,zero
    9d3c:	003df206 	br	9508 <__alt_mem_Flash_flash_data+0xf4009508>
    9d40:	dc800e15 	stw	r18,56(sp)
    9d44:	982b883a 	mov	r21,r19
    9d48:	04400084 	movi	r17,2
    9d4c:	003c7406 	br	8f20 <__alt_mem_Flash_flash_data+0xf4008f20>
    9d50:	04400044 	movi	r17,1
    9d54:	dc400c15 	stw	r17,48(sp)
    9d58:	dc400615 	stw	r17,24(sp)
    9d5c:	dc402215 	stw	r17,136(sp)
    9d60:	80001115 	stw	zero,68(r16)
    9d64:	000b883a 	mov	r5,zero
    9d68:	003c4a06 	br	8e94 <__alt_mem_Flash_flash_data+0xf4008e94>
    9d6c:	3023883a 	mov	r17,r6
    9d70:	003ffb06 	br	9d60 <__alt_mem_Flash_flash_data+0xf4009d60>
    9d74:	1000021e 	bne	r2,zero,9d80 <_dtoa_r+0x1254>
    9d78:	4200004c 	andi	r8,r8,1
    9d7c:	403e8f1e 	bne	r8,zero,97bc <__alt_mem_Flash_flash_data+0xf40097bc>
    9d80:	01000c04 	movi	r4,48
    9d84:	00000106 	br	9d8c <_dtoa_r+0x1260>
    9d88:	102f883a 	mov	r23,r2
    9d8c:	b8bfffc4 	addi	r2,r23,-1
    9d90:	10c00007 	ldb	r3,0(r2)
    9d94:	193ffc26 	beq	r3,r4,9d88 <__alt_mem_Flash_flash_data+0xf4009d88>
    9d98:	003e9906 	br	9800 <__alt_mem_Flash_flash_data+0xf4009800>
    9d9c:	d9000517 	ldw	r4,20(sp)
    9da0:	012fc83a 	sub	r23,zero,r4
    9da4:	b800ad26 	beq	r23,zero,a05c <_dtoa_r+0x1530>
    9da8:	b88003cc 	andi	r2,r23,15
    9dac:	100490fa 	slli	r2,r2,3
    9db0:	00c000b4 	movhi	r3,2
    9db4:	18d6d804 	addi	r3,r3,23392
    9db8:	1885883a 	add	r2,r3,r2
    9dbc:	11800017 	ldw	r6,0(r2)
    9dc0:	11c00117 	ldw	r7,4(r2)
    9dc4:	b82fd13a 	srai	r23,r23,4
    9dc8:	9009883a 	mov	r4,r18
    9dcc:	980b883a 	mov	r5,r19
    9dd0:	00129a40 	call	129a4 <__muldf3>
    9dd4:	1029883a 	mov	r20,r2
    9dd8:	182b883a 	mov	r21,r3
    9ddc:	b800f426 	beq	r23,zero,a1b0 <_dtoa_r+0x1684>
    9de0:	020000b4 	movhi	r8,2
    9de4:	4216ce04 	addi	r8,r8,23352
    9de8:	8029883a 	mov	r20,r16
    9dec:	04400084 	movi	r17,2
    9df0:	4021883a 	mov	r16,r8
    9df4:	b980004c 	andi	r6,r23,1
    9df8:	1009883a 	mov	r4,r2
    9dfc:	b82fd07a 	srai	r23,r23,1
    9e00:	180b883a 	mov	r5,r3
    9e04:	30000426 	beq	r6,zero,9e18 <_dtoa_r+0x12ec>
    9e08:	81800017 	ldw	r6,0(r16)
    9e0c:	81c00117 	ldw	r7,4(r16)
    9e10:	8c400044 	addi	r17,r17,1
    9e14:	00129a40 	call	129a4 <__muldf3>
    9e18:	84000204 	addi	r16,r16,8
    9e1c:	b83ff51e 	bne	r23,zero,9df4 <__alt_mem_Flash_flash_data+0xf4009df4>
    9e20:	a021883a 	mov	r16,r20
    9e24:	182b883a 	mov	r21,r3
    9e28:	1029883a 	mov	r20,r2
    9e2c:	003c5506 	br	8f84 <__alt_mem_Flash_flash_data+0xf4008f84>
    9e30:	d9800517 	ldw	r6,20(sp)
    9e34:	d9000717 	ldw	r4,28(sp)
    9e38:	00c00c04 	movi	r3,48
    9e3c:	31800044 	addi	r6,r6,1
    9e40:	d9800515 	stw	r6,20(sp)
    9e44:	20c00005 	stb	r3,0(r4)
    9e48:	02000c44 	movi	r8,49
    9e4c:	003da206 	br	94d8 <__alt_mem_Flash_flash_data+0xf40094d8>
    9e50:	89400117 	ldw	r5,4(r17)
    9e54:	8009883a 	mov	r4,r16
    9e58:	000c0a00 	call	c0a0 <_Balloc>
    9e5c:	89800417 	ldw	r6,16(r17)
    9e60:	11000304 	addi	r4,r2,12
    9e64:	89400304 	addi	r5,r17,12
    9e68:	31800084 	addi	r6,r6,2
    9e6c:	318d883a 	add	r6,r6,r6
    9e70:	318d883a 	add	r6,r6,r6
    9e74:	1027883a 	mov	r19,r2
    9e78:	000be0c0 	call	be0c <memcpy>
    9e7c:	8009883a 	mov	r4,r16
    9e80:	980b883a 	mov	r5,r19
    9e84:	01800044 	movi	r6,1
    9e88:	000c8240 	call	c824 <__lshift>
    9e8c:	1029883a 	mov	r20,r2
    9e90:	003e8606 	br	98ac <__alt_mem_Flash_flash_data+0xf40098ac>
    9e94:	00800e44 	movi	r2,57
    9e98:	90809526 	beq	r18,r2,a0f0 <_dtoa_r+0x15c4>
    9e9c:	92000044 	addi	r8,r18,1
    9ea0:	003f2306 	br	9b30 <__alt_mem_Flash_flash_data+0xf4009b30>
    9ea4:	9011883a 	mov	r8,r18
    9ea8:	8825883a 	mov	r18,r17
    9eac:	a023883a 	mov	r17,r20
    9eb0:	003e3706 	br	9790 <__alt_mem_Flash_flash_data+0xf4009790>
    9eb4:	002b883a 	mov	r21,zero
    9eb8:	0023883a 	mov	r17,zero
    9ebc:	003f5606 	br	9c18 <__alt_mem_Flash_flash_data+0xf4009c18>
    9ec0:	51bfffc4 	addi	r6,r10,-1
    9ec4:	300490fa 	slli	r2,r6,3
    9ec8:	00c000b4 	movhi	r3,2
    9ecc:	18d6d804 	addi	r3,r3,23392
    9ed0:	1885883a 	add	r2,r3,r2
    9ed4:	d9c00e17 	ldw	r7,56(sp)
    9ed8:	11000017 	ldw	r4,0(r2)
    9edc:	11400117 	ldw	r5,4(r2)
    9ee0:	d8800717 	ldw	r2,28(sp)
    9ee4:	d9801015 	stw	r6,64(sp)
    9ee8:	880d883a 	mov	r6,r17
    9eec:	da801615 	stw	r10,88(sp)
    9ef0:	15c00044 	addi	r23,r2,1
    9ef4:	00129a40 	call	129a4 <__muldf3>
    9ef8:	a80b883a 	mov	r5,r21
    9efc:	a009883a 	mov	r4,r20
    9f00:	d8c01115 	stw	r3,68(sp)
    9f04:	d8800e15 	stw	r2,56(sp)
    9f08:	00139980 	call	13998 <__fixdfsi>
    9f0c:	1009883a 	mov	r4,r2
    9f10:	1023883a 	mov	r17,r2
    9f14:	0013a200 	call	13a20 <__floatsidf>
    9f18:	a009883a 	mov	r4,r20
    9f1c:	a80b883a 	mov	r5,r21
    9f20:	100d883a 	mov	r6,r2
    9f24:	180f883a 	mov	r7,r3
    9f28:	00130c80 	call	130c8 <__subdf3>
    9f2c:	1813883a 	mov	r9,r3
    9f30:	d8c00717 	ldw	r3,28(sp)
    9f34:	8c400c04 	addi	r17,r17,48
    9f38:	1011883a 	mov	r8,r2
    9f3c:	1c400005 	stb	r17,0(r3)
    9f40:	da801617 	ldw	r10,88(sp)
    9f44:	00800044 	movi	r2,1
    9f48:	50802326 	beq	r10,r2,9fd8 <_dtoa_r+0x14ac>
    9f4c:	d8800717 	ldw	r2,28(sp)
    9f50:	b82b883a 	mov	r21,r23
    9f54:	dc001315 	stw	r16,76(sp)
    9f58:	12a9883a 	add	r20,r2,r10
    9f5c:	4807883a 	mov	r3,r9
    9f60:	4005883a 	mov	r2,r8
    9f64:	dc801415 	stw	r18,80(sp)
    9f68:	000d883a 	mov	r6,zero
    9f6c:	01d00934 	movhi	r7,16420
    9f70:	1009883a 	mov	r4,r2
    9f74:	180b883a 	mov	r5,r3
    9f78:	00129a40 	call	129a4 <__muldf3>
    9f7c:	180b883a 	mov	r5,r3
    9f80:	1009883a 	mov	r4,r2
    9f84:	1821883a 	mov	r16,r3
    9f88:	1025883a 	mov	r18,r2
    9f8c:	00139980 	call	13998 <__fixdfsi>
    9f90:	1009883a 	mov	r4,r2
    9f94:	1023883a 	mov	r17,r2
    9f98:	0013a200 	call	13a20 <__floatsidf>
    9f9c:	9009883a 	mov	r4,r18
    9fa0:	800b883a 	mov	r5,r16
    9fa4:	100d883a 	mov	r6,r2
    9fa8:	180f883a 	mov	r7,r3
    9fac:	8c400c04 	addi	r17,r17,48
    9fb0:	00130c80 	call	130c8 <__subdf3>
    9fb4:	ad400044 	addi	r21,r21,1
    9fb8:	ac7fffc5 	stb	r17,-1(r21)
    9fbc:	ad3fea1e 	bne	r21,r20,9f68 <__alt_mem_Flash_flash_data+0xf4009f68>
    9fc0:	1813883a 	mov	r9,r3
    9fc4:	d8c01017 	ldw	r3,64(sp)
    9fc8:	dc001317 	ldw	r16,76(sp)
    9fcc:	dc801417 	ldw	r18,80(sp)
    9fd0:	1011883a 	mov	r8,r2
    9fd4:	b8ef883a 	add	r23,r23,r3
    9fd8:	d9000e17 	ldw	r4,56(sp)
    9fdc:	d9401117 	ldw	r5,68(sp)
    9fe0:	000d883a 	mov	r6,zero
    9fe4:	01cff834 	movhi	r7,16352
    9fe8:	da001715 	stw	r8,92(sp)
    9fec:	da401515 	stw	r9,84(sp)
    9ff0:	00115f80 	call	115f8 <__adddf3>
    9ff4:	da001717 	ldw	r8,92(sp)
    9ff8:	da401517 	ldw	r9,84(sp)
    9ffc:	1009883a 	mov	r4,r2
    a000:	400d883a 	mov	r6,r8
    a004:	480f883a 	mov	r7,r9
    a008:	180b883a 	mov	r5,r3
    a00c:	00128c40 	call	128c4 <__ledf2>
    a010:	da001717 	ldw	r8,92(sp)
    a014:	da401517 	ldw	r9,84(sp)
    a018:	10003b0e 	bge	r2,zero,a108 <_dtoa_r+0x15dc>
    a01c:	d9001217 	ldw	r4,72(sp)
    a020:	bd7fffc3 	ldbu	r21,-1(r23)
    a024:	d9000515 	stw	r4,20(sp)
    a028:	003d1c06 	br	949c <__alt_mem_Flash_flash_data+0xf400949c>
    a02c:	d8c00817 	ldw	r3,32(sp)
    a030:	18a9c83a 	sub	r20,r3,r2
    a034:	0005883a 	mov	r2,zero
    a038:	003d3706 	br	9518 <__alt_mem_Flash_flash_data+0xf4009518>
    a03c:	00800044 	movi	r2,1
    a040:	003dd006 	br	9784 <__alt_mem_Flash_flash_data+0xf4009784>
    a044:	d8c00217 	ldw	r3,8(sp)
    a048:	00800d84 	movi	r2,54
    a04c:	dd400917 	ldw	r21,36(sp)
    a050:	10c5c83a 	sub	r2,r2,r3
    a054:	dd000817 	ldw	r20,32(sp)
    a058:	003d2f06 	br	9518 <__alt_mem_Flash_flash_data+0xf4009518>
    a05c:	9029883a 	mov	r20,r18
    a060:	982b883a 	mov	r21,r19
    a064:	04400084 	movi	r17,2
    a068:	003bc606 	br	8f84 <__alt_mem_Flash_flash_data+0xf4008f84>
    a06c:	d8800617 	ldw	r2,24(sp)
    a070:	103efc26 	beq	r2,zero,9c64 <__alt_mem_Flash_flash_data+0xf4009c64>
    a074:	d8c00c17 	ldw	r3,48(sp)
    a078:	00fc890e 	bge	zero,r3,92a0 <__alt_mem_Flash_flash_data+0xf40092a0>
    a07c:	a80b883a 	mov	r5,r21
    a080:	a009883a 	mov	r4,r20
    a084:	000d883a 	mov	r6,zero
    a088:	01d00934 	movhi	r7,16420
    a08c:	00129a40 	call	129a4 <__muldf3>
    a090:	89000044 	addi	r4,r17,1
    a094:	1029883a 	mov	r20,r2
    a098:	182b883a 	mov	r21,r3
    a09c:	0013a200 	call	13a20 <__floatsidf>
    a0a0:	a009883a 	mov	r4,r20
    a0a4:	a80b883a 	mov	r5,r21
    a0a8:	100d883a 	mov	r6,r2
    a0ac:	180f883a 	mov	r7,r3
    a0b0:	00129a40 	call	129a4 <__muldf3>
    a0b4:	1009883a 	mov	r4,r2
    a0b8:	180b883a 	mov	r5,r3
    a0bc:	000d883a 	mov	r6,zero
    a0c0:	01d00734 	movhi	r7,16412
    a0c4:	00115f80 	call	115f8 <__adddf3>
    a0c8:	d9000517 	ldw	r4,20(sp)
    a0cc:	1023883a 	mov	r17,r2
    a0d0:	00bf3034 	movhi	r2,64704
    a0d4:	213fffc4 	addi	r4,r4,-1
    a0d8:	1885883a 	add	r2,r3,r2
    a0dc:	d9001215 	stw	r4,72(sp)
    a0e0:	d8800e15 	stw	r2,56(sp)
    a0e4:	da800c17 	ldw	r10,48(sp)
    a0e8:	003bc306 	br	8ff8 <__alt_mem_Flash_flash_data+0xf4008ff8>
    a0ec:	b039883a 	mov	fp,r22
    a0f0:	01000e44 	movi	r4,57
    a0f4:	8825883a 	mov	r18,r17
    a0f8:	9dc00044 	addi	r23,r19,1
    a0fc:	99000005 	stb	r4,0(r19)
    a100:	a023883a 	mov	r17,r20
    a104:	003dae06 	br	97c0 <__alt_mem_Flash_flash_data+0xf40097c0>
    a108:	d9800e17 	ldw	r6,56(sp)
    a10c:	d9c01117 	ldw	r7,68(sp)
    a110:	0009883a 	mov	r4,zero
    a114:	014ff834 	movhi	r5,16352
    a118:	da001715 	stw	r8,92(sp)
    a11c:	da401515 	stw	r9,84(sp)
    a120:	00130c80 	call	130c8 <__subdf3>
    a124:	da001717 	ldw	r8,92(sp)
    a128:	da401517 	ldw	r9,84(sp)
    a12c:	1009883a 	mov	r4,r2
    a130:	180b883a 	mov	r5,r3
    a134:	400d883a 	mov	r6,r8
    a138:	480f883a 	mov	r7,r9
    a13c:	00127e40 	call	127e4 <__gedf2>
    a140:	00bc570e 	bge	zero,r2,92a0 <__alt_mem_Flash_flash_data+0xf40092a0>
    a144:	01000c04 	movi	r4,48
    a148:	00000106 	br	a150 <_dtoa_r+0x1624>
    a14c:	102f883a 	mov	r23,r2
    a150:	b8bfffc4 	addi	r2,r23,-1
    a154:	10c00007 	ldb	r3,0(r2)
    a158:	193ffc26 	beq	r3,r4,a14c <__alt_mem_Flash_flash_data+0xf400a14c>
    a15c:	d9801217 	ldw	r6,72(sp)
    a160:	d9800515 	stw	r6,20(sp)
    a164:	003c1f06 	br	91e4 <__alt_mem_Flash_flash_data+0xf40091e4>
    a168:	d8801217 	ldw	r2,72(sp)
    a16c:	dc001117 	ldw	r16,68(sp)
    a170:	d8800515 	stw	r2,20(sp)
    a174:	003cc906 	br	949c <__alt_mem_Flash_flash_data+0xf400949c>
    a178:	dd801317 	ldw	r22,76(sp)
    a17c:	dc001117 	ldw	r16,68(sp)
    a180:	dcc01417 	ldw	r19,80(sp)
    a184:	dc801017 	ldw	r18,64(sp)
    a188:	003c4506 	br	92a0 <__alt_mem_Flash_flash_data+0xf40092a0>
    a18c:	103e5d1e 	bne	r2,zero,9b04 <__alt_mem_Flash_flash_data+0xf4009b04>
    a190:	4080004c 	andi	r2,r8,1
    a194:	103e5b26 	beq	r2,zero,9b04 <__alt_mem_Flash_flash_data+0xf4009b04>
    a198:	003e5706 	br	9af8 <__alt_mem_Flash_flash_data+0xf4009af8>
    a19c:	d8c00317 	ldw	r3,12(sp)
    a1a0:	00800084 	movi	r2,2
    a1a4:	10c00a16 	blt	r2,r3,a1d0 <_dtoa_r+0x16a4>
    a1a8:	d9000c17 	ldw	r4,48(sp)
    a1ac:	003e8306 	br	9bbc <__alt_mem_Flash_flash_data+0xf4009bbc>
    a1b0:	04400084 	movi	r17,2
    a1b4:	003b7306 	br	8f84 <__alt_mem_Flash_flash_data+0xf4008f84>
    a1b8:	d9801217 	ldw	r6,72(sp)
    a1bc:	d9800515 	stw	r6,20(sp)
    a1c0:	003cb606 	br	949c <__alt_mem_Flash_flash_data+0xf400949c>
    a1c4:	d9001217 	ldw	r4,72(sp)
    a1c8:	d9000515 	stw	r4,20(sp)
    a1cc:	003c0506 	br	91e4 <__alt_mem_Flash_flash_data+0xf40091e4>
    a1d0:	d9800c17 	ldw	r6,48(sp)
    a1d4:	d9800615 	stw	r6,24(sp)
    a1d8:	003e8306 	br	9be8 <__alt_mem_Flash_flash_data+0xf4009be8>
    a1dc:	d9800317 	ldw	r6,12(sp)
    a1e0:	00800084 	movi	r2,2
    a1e4:	11800216 	blt	r2,r6,a1f0 <_dtoa_r+0x16c4>
    a1e8:	d8800c17 	ldw	r2,48(sp)
    a1ec:	003da606 	br	9888 <__alt_mem_Flash_flash_data+0xf4009888>
    a1f0:	d8800c17 	ldw	r2,48(sp)
    a1f4:	d8800615 	stw	r2,24(sp)
    a1f8:	003e7b06 	br	9be8 <__alt_mem_Flash_flash_data+0xf4009be8>
    a1fc:	05000044 	movi	r20,1
    a200:	003b0506 	br	8e18 <__alt_mem_Flash_flash_data+0xf4008e18>
    a204:	8009883a 	mov	r4,r16
    a208:	80001115 	stw	zero,68(r16)
    a20c:	000b883a 	mov	r5,zero
    a210:	000c0a00 	call	c0a0 <_Balloc>
    a214:	d8800715 	stw	r2,28(sp)
    a218:	d8c00717 	ldw	r3,28(sp)
    a21c:	00bfffc4 	movi	r2,-1
    a220:	01000044 	movi	r4,1
    a224:	d8800c15 	stw	r2,48(sp)
    a228:	80c01015 	stw	r3,64(r16)
    a22c:	d9000b15 	stw	r4,44(sp)
    a230:	d8800615 	stw	r2,24(sp)
    a234:	d8002215 	stw	zero,136(sp)
    a238:	003c1906 	br	92a0 <__alt_mem_Flash_flash_data+0xf40092a0>
    a23c:	193d2926 	beq	r3,r4,96e4 <__alt_mem_Flash_flash_data+0xf40096e4>
    a240:	00c00f04 	movi	r3,60
    a244:	1885c83a 	sub	r2,r3,r2
    a248:	003d7b06 	br	9838 <__alt_mem_Flash_flash_data+0xf4009838>
    a24c:	000b883a 	mov	r5,zero
    a250:	003b1006 	br	8e94 <__alt_mem_Flash_flash_data+0xf4008e94>

0000a254 <__sflush_r>:
    a254:	2880030b 	ldhu	r2,12(r5)
    a258:	defffb04 	addi	sp,sp,-20
    a25c:	dcc00315 	stw	r19,12(sp)
    a260:	dc400115 	stw	r17,4(sp)
    a264:	dfc00415 	stw	ra,16(sp)
    a268:	dc800215 	stw	r18,8(sp)
    a26c:	dc000015 	stw	r16,0(sp)
    a270:	10c0020c 	andi	r3,r2,8
    a274:	2823883a 	mov	r17,r5
    a278:	2027883a 	mov	r19,r4
    a27c:	1800311e 	bne	r3,zero,a344 <__sflush_r+0xf0>
    a280:	28c00117 	ldw	r3,4(r5)
    a284:	10820014 	ori	r2,r2,2048
    a288:	2880030d 	sth	r2,12(r5)
    a28c:	00c04b0e 	bge	zero,r3,a3bc <__sflush_r+0x168>
    a290:	8a000a17 	ldw	r8,40(r17)
    a294:	40002326 	beq	r8,zero,a324 <__sflush_r+0xd0>
    a298:	9c000017 	ldw	r16,0(r19)
    a29c:	10c4000c 	andi	r3,r2,4096
    a2a0:	98000015 	stw	zero,0(r19)
    a2a4:	18004826 	beq	r3,zero,a3c8 <__sflush_r+0x174>
    a2a8:	89801417 	ldw	r6,80(r17)
    a2ac:	10c0010c 	andi	r3,r2,4
    a2b0:	18000626 	beq	r3,zero,a2cc <__sflush_r+0x78>
    a2b4:	88c00117 	ldw	r3,4(r17)
    a2b8:	88800c17 	ldw	r2,48(r17)
    a2bc:	30cdc83a 	sub	r6,r6,r3
    a2c0:	10000226 	beq	r2,zero,a2cc <__sflush_r+0x78>
    a2c4:	88800f17 	ldw	r2,60(r17)
    a2c8:	308dc83a 	sub	r6,r6,r2
    a2cc:	89400717 	ldw	r5,28(r17)
    a2d0:	9809883a 	mov	r4,r19
    a2d4:	000f883a 	mov	r7,zero
    a2d8:	403ee83a 	callr	r8
    a2dc:	00ffffc4 	movi	r3,-1
    a2e0:	10c04426 	beq	r2,r3,a3f4 <__sflush_r+0x1a0>
    a2e4:	88c0030b 	ldhu	r3,12(r17)
    a2e8:	89000417 	ldw	r4,16(r17)
    a2ec:	88000115 	stw	zero,4(r17)
    a2f0:	197dffcc 	andi	r5,r3,63487
    a2f4:	8940030d 	sth	r5,12(r17)
    a2f8:	89000015 	stw	r4,0(r17)
    a2fc:	18c4000c 	andi	r3,r3,4096
    a300:	18002c1e 	bne	r3,zero,a3b4 <__sflush_r+0x160>
    a304:	89400c17 	ldw	r5,48(r17)
    a308:	9c000015 	stw	r16,0(r19)
    a30c:	28000526 	beq	r5,zero,a324 <__sflush_r+0xd0>
    a310:	88801004 	addi	r2,r17,64
    a314:	28800226 	beq	r5,r2,a320 <__sflush_r+0xcc>
    a318:	9809883a 	mov	r4,r19
    a31c:	000a9ac0 	call	a9ac <_free_r>
    a320:	88000c15 	stw	zero,48(r17)
    a324:	0005883a 	mov	r2,zero
    a328:	dfc00417 	ldw	ra,16(sp)
    a32c:	dcc00317 	ldw	r19,12(sp)
    a330:	dc800217 	ldw	r18,8(sp)
    a334:	dc400117 	ldw	r17,4(sp)
    a338:	dc000017 	ldw	r16,0(sp)
    a33c:	dec00504 	addi	sp,sp,20
    a340:	f800283a 	ret
    a344:	2c800417 	ldw	r18,16(r5)
    a348:	903ff626 	beq	r18,zero,a324 <__alt_mem_Flash_flash_data+0xf400a324>
    a34c:	2c000017 	ldw	r16,0(r5)
    a350:	108000cc 	andi	r2,r2,3
    a354:	2c800015 	stw	r18,0(r5)
    a358:	84a1c83a 	sub	r16,r16,r18
    a35c:	1000131e 	bne	r2,zero,a3ac <__sflush_r+0x158>
    a360:	28800517 	ldw	r2,20(r5)
    a364:	88800215 	stw	r2,8(r17)
    a368:	04000316 	blt	zero,r16,a378 <__sflush_r+0x124>
    a36c:	003fed06 	br	a324 <__alt_mem_Flash_flash_data+0xf400a324>
    a370:	90a5883a 	add	r18,r18,r2
    a374:	043feb0e 	bge	zero,r16,a324 <__alt_mem_Flash_flash_data+0xf400a324>
    a378:	88800917 	ldw	r2,36(r17)
    a37c:	89400717 	ldw	r5,28(r17)
    a380:	800f883a 	mov	r7,r16
    a384:	900d883a 	mov	r6,r18
    a388:	9809883a 	mov	r4,r19
    a38c:	103ee83a 	callr	r2
    a390:	80a1c83a 	sub	r16,r16,r2
    a394:	00bff616 	blt	zero,r2,a370 <__alt_mem_Flash_flash_data+0xf400a370>
    a398:	88c0030b 	ldhu	r3,12(r17)
    a39c:	00bfffc4 	movi	r2,-1
    a3a0:	18c01014 	ori	r3,r3,64
    a3a4:	88c0030d 	sth	r3,12(r17)
    a3a8:	003fdf06 	br	a328 <__alt_mem_Flash_flash_data+0xf400a328>
    a3ac:	0005883a 	mov	r2,zero
    a3b0:	003fec06 	br	a364 <__alt_mem_Flash_flash_data+0xf400a364>
    a3b4:	88801415 	stw	r2,80(r17)
    a3b8:	003fd206 	br	a304 <__alt_mem_Flash_flash_data+0xf400a304>
    a3bc:	28c00f17 	ldw	r3,60(r5)
    a3c0:	00ffb316 	blt	zero,r3,a290 <__alt_mem_Flash_flash_data+0xf400a290>
    a3c4:	003fd706 	br	a324 <__alt_mem_Flash_flash_data+0xf400a324>
    a3c8:	89400717 	ldw	r5,28(r17)
    a3cc:	000d883a 	mov	r6,zero
    a3d0:	9809883a 	mov	r4,r19
    a3d4:	01c00044 	movi	r7,1
    a3d8:	403ee83a 	callr	r8
    a3dc:	100d883a 	mov	r6,r2
    a3e0:	00bfffc4 	movi	r2,-1
    a3e4:	30801426 	beq	r6,r2,a438 <__sflush_r+0x1e4>
    a3e8:	8880030b 	ldhu	r2,12(r17)
    a3ec:	8a000a17 	ldw	r8,40(r17)
    a3f0:	003fae06 	br	a2ac <__alt_mem_Flash_flash_data+0xf400a2ac>
    a3f4:	98c00017 	ldw	r3,0(r19)
    a3f8:	183fba26 	beq	r3,zero,a2e4 <__alt_mem_Flash_flash_data+0xf400a2e4>
    a3fc:	01000744 	movi	r4,29
    a400:	19000626 	beq	r3,r4,a41c <__sflush_r+0x1c8>
    a404:	01000584 	movi	r4,22
    a408:	19000426 	beq	r3,r4,a41c <__sflush_r+0x1c8>
    a40c:	88c0030b 	ldhu	r3,12(r17)
    a410:	18c01014 	ori	r3,r3,64
    a414:	88c0030d 	sth	r3,12(r17)
    a418:	003fc306 	br	a328 <__alt_mem_Flash_flash_data+0xf400a328>
    a41c:	8880030b 	ldhu	r2,12(r17)
    a420:	88c00417 	ldw	r3,16(r17)
    a424:	88000115 	stw	zero,4(r17)
    a428:	10bdffcc 	andi	r2,r2,63487
    a42c:	8880030d 	sth	r2,12(r17)
    a430:	88c00015 	stw	r3,0(r17)
    a434:	003fb306 	br	a304 <__alt_mem_Flash_flash_data+0xf400a304>
    a438:	98800017 	ldw	r2,0(r19)
    a43c:	103fea26 	beq	r2,zero,a3e8 <__alt_mem_Flash_flash_data+0xf400a3e8>
    a440:	00c00744 	movi	r3,29
    a444:	10c00226 	beq	r2,r3,a450 <__sflush_r+0x1fc>
    a448:	00c00584 	movi	r3,22
    a44c:	10ffd21e 	bne	r2,r3,a398 <__alt_mem_Flash_flash_data+0xf400a398>
    a450:	9c000015 	stw	r16,0(r19)
    a454:	0005883a 	mov	r2,zero
    a458:	003fb306 	br	a328 <__alt_mem_Flash_flash_data+0xf400a328>

0000a45c <_fflush_r>:
    a45c:	defffd04 	addi	sp,sp,-12
    a460:	dc000115 	stw	r16,4(sp)
    a464:	dfc00215 	stw	ra,8(sp)
    a468:	2021883a 	mov	r16,r4
    a46c:	20000226 	beq	r4,zero,a478 <_fflush_r+0x1c>
    a470:	20800e17 	ldw	r2,56(r4)
    a474:	10000c26 	beq	r2,zero,a4a8 <_fflush_r+0x4c>
    a478:	2880030f 	ldh	r2,12(r5)
    a47c:	1000051e 	bne	r2,zero,a494 <_fflush_r+0x38>
    a480:	0005883a 	mov	r2,zero
    a484:	dfc00217 	ldw	ra,8(sp)
    a488:	dc000117 	ldw	r16,4(sp)
    a48c:	dec00304 	addi	sp,sp,12
    a490:	f800283a 	ret
    a494:	8009883a 	mov	r4,r16
    a498:	dfc00217 	ldw	ra,8(sp)
    a49c:	dc000117 	ldw	r16,4(sp)
    a4a0:	dec00304 	addi	sp,sp,12
    a4a4:	000a2541 	jmpi	a254 <__sflush_r>
    a4a8:	d9400015 	stw	r5,0(sp)
    a4ac:	000a8380 	call	a838 <__sinit>
    a4b0:	d9400017 	ldw	r5,0(sp)
    a4b4:	003ff006 	br	a478 <__alt_mem_Flash_flash_data+0xf400a478>

0000a4b8 <fflush>:
    a4b8:	20000526 	beq	r4,zero,a4d0 <fflush+0x18>
    a4bc:	008000b4 	movhi	r2,2
    a4c0:	109fb304 	addi	r2,r2,32460
    a4c4:	200b883a 	mov	r5,r4
    a4c8:	11000017 	ldw	r4,0(r2)
    a4cc:	000a45c1 	jmpi	a45c <_fflush_r>
    a4d0:	008000b4 	movhi	r2,2
    a4d4:	109fb204 	addi	r2,r2,32456
    a4d8:	11000017 	ldw	r4,0(r2)
    a4dc:	01400074 	movhi	r5,1
    a4e0:	29691704 	addi	r5,r5,-23460
    a4e4:	000b2201 	jmpi	b220 <_fwalk_reent>

0000a4e8 <__fp_lock>:
    a4e8:	0005883a 	mov	r2,zero
    a4ec:	f800283a 	ret

0000a4f0 <__fp_unlock>:
    a4f0:	0005883a 	mov	r2,zero
    a4f4:	f800283a 	ret

0000a4f8 <_cleanup_r>:
    a4f8:	01400074 	movhi	r5,1
    a4fc:	2940d304 	addi	r5,r5,844
    a500:	000b2201 	jmpi	b220 <_fwalk_reent>

0000a504 <__sinit.part.1>:
    a504:	defff704 	addi	sp,sp,-36
    a508:	00c00074 	movhi	r3,1
    a50c:	dfc00815 	stw	ra,32(sp)
    a510:	ddc00715 	stw	r23,28(sp)
    a514:	dd800615 	stw	r22,24(sp)
    a518:	dd400515 	stw	r21,20(sp)
    a51c:	dd000415 	stw	r20,16(sp)
    a520:	dcc00315 	stw	r19,12(sp)
    a524:	dc800215 	stw	r18,8(sp)
    a528:	dc400115 	stw	r17,4(sp)
    a52c:	dc000015 	stw	r16,0(sp)
    a530:	18e93e04 	addi	r3,r3,-23304
    a534:	24000117 	ldw	r16,4(r4)
    a538:	20c00f15 	stw	r3,60(r4)
    a53c:	2080bb04 	addi	r2,r4,748
    a540:	00c000c4 	movi	r3,3
    a544:	20c0b915 	stw	r3,740(r4)
    a548:	2080ba15 	stw	r2,744(r4)
    a54c:	2000b815 	stw	zero,736(r4)
    a550:	05c00204 	movi	r23,8
    a554:	00800104 	movi	r2,4
    a558:	2025883a 	mov	r18,r4
    a55c:	b80d883a 	mov	r6,r23
    a560:	81001704 	addi	r4,r16,92
    a564:	000b883a 	mov	r5,zero
    a568:	80000015 	stw	zero,0(r16)
    a56c:	80000115 	stw	zero,4(r16)
    a570:	80000215 	stw	zero,8(r16)
    a574:	8080030d 	sth	r2,12(r16)
    a578:	80001915 	stw	zero,100(r16)
    a57c:	8000038d 	sth	zero,14(r16)
    a580:	80000415 	stw	zero,16(r16)
    a584:	80000515 	stw	zero,20(r16)
    a588:	80000615 	stw	zero,24(r16)
    a58c:	000433c0 	call	433c <memset>
    a590:	05800074 	movhi	r22,1
    a594:	94400217 	ldw	r17,8(r18)
    a598:	05400074 	movhi	r21,1
    a59c:	05000074 	movhi	r20,1
    a5a0:	04c00074 	movhi	r19,1
    a5a4:	b5b5f704 	addi	r22,r22,-10276
    a5a8:	ad760e04 	addi	r21,r21,-10184
    a5ac:	a5362d04 	addi	r20,r20,-10060
    a5b0:	9cf64404 	addi	r19,r19,-9968
    a5b4:	85800815 	stw	r22,32(r16)
    a5b8:	85400915 	stw	r21,36(r16)
    a5bc:	85000a15 	stw	r20,40(r16)
    a5c0:	84c00b15 	stw	r19,44(r16)
    a5c4:	84000715 	stw	r16,28(r16)
    a5c8:	00800284 	movi	r2,10
    a5cc:	8880030d 	sth	r2,12(r17)
    a5d0:	00800044 	movi	r2,1
    a5d4:	89001704 	addi	r4,r17,92
    a5d8:	b80d883a 	mov	r6,r23
    a5dc:	000b883a 	mov	r5,zero
    a5e0:	88000015 	stw	zero,0(r17)
    a5e4:	88000115 	stw	zero,4(r17)
    a5e8:	88000215 	stw	zero,8(r17)
    a5ec:	88001915 	stw	zero,100(r17)
    a5f0:	8880038d 	sth	r2,14(r17)
    a5f4:	88000415 	stw	zero,16(r17)
    a5f8:	88000515 	stw	zero,20(r17)
    a5fc:	88000615 	stw	zero,24(r17)
    a600:	000433c0 	call	433c <memset>
    a604:	94000317 	ldw	r16,12(r18)
    a608:	00800484 	movi	r2,18
    a60c:	8c400715 	stw	r17,28(r17)
    a610:	8d800815 	stw	r22,32(r17)
    a614:	8d400915 	stw	r21,36(r17)
    a618:	8d000a15 	stw	r20,40(r17)
    a61c:	8cc00b15 	stw	r19,44(r17)
    a620:	8080030d 	sth	r2,12(r16)
    a624:	00800084 	movi	r2,2
    a628:	80000015 	stw	zero,0(r16)
    a62c:	80000115 	stw	zero,4(r16)
    a630:	80000215 	stw	zero,8(r16)
    a634:	80001915 	stw	zero,100(r16)
    a638:	8080038d 	sth	r2,14(r16)
    a63c:	80000415 	stw	zero,16(r16)
    a640:	80000515 	stw	zero,20(r16)
    a644:	80000615 	stw	zero,24(r16)
    a648:	81001704 	addi	r4,r16,92
    a64c:	000b883a 	mov	r5,zero
    a650:	b80d883a 	mov	r6,r23
    a654:	000433c0 	call	433c <memset>
    a658:	00800044 	movi	r2,1
    a65c:	84000715 	stw	r16,28(r16)
    a660:	85800815 	stw	r22,32(r16)
    a664:	85400915 	stw	r21,36(r16)
    a668:	85000a15 	stw	r20,40(r16)
    a66c:	84c00b15 	stw	r19,44(r16)
    a670:	90800e15 	stw	r2,56(r18)
    a674:	dfc00817 	ldw	ra,32(sp)
    a678:	ddc00717 	ldw	r23,28(sp)
    a67c:	dd800617 	ldw	r22,24(sp)
    a680:	dd400517 	ldw	r21,20(sp)
    a684:	dd000417 	ldw	r20,16(sp)
    a688:	dcc00317 	ldw	r19,12(sp)
    a68c:	dc800217 	ldw	r18,8(sp)
    a690:	dc400117 	ldw	r17,4(sp)
    a694:	dc000017 	ldw	r16,0(sp)
    a698:	dec00904 	addi	sp,sp,36
    a69c:	f800283a 	ret

0000a6a0 <__sfmoreglue>:
    a6a0:	defffc04 	addi	sp,sp,-16
    a6a4:	dc400115 	stw	r17,4(sp)
    a6a8:	2c7fffc4 	addi	r17,r5,-1
    a6ac:	8c401a24 	muli	r17,r17,104
    a6b0:	dc800215 	stw	r18,8(sp)
    a6b4:	2825883a 	mov	r18,r5
    a6b8:	89401d04 	addi	r5,r17,116
    a6bc:	dc000015 	stw	r16,0(sp)
    a6c0:	dfc00315 	stw	ra,12(sp)
    a6c4:	000b57c0 	call	b57c <_malloc_r>
    a6c8:	1021883a 	mov	r16,r2
    a6cc:	10000726 	beq	r2,zero,a6ec <__sfmoreglue+0x4c>
    a6d0:	11000304 	addi	r4,r2,12
    a6d4:	10000015 	stw	zero,0(r2)
    a6d8:	14800115 	stw	r18,4(r2)
    a6dc:	11000215 	stw	r4,8(r2)
    a6e0:	000b883a 	mov	r5,zero
    a6e4:	89801a04 	addi	r6,r17,104
    a6e8:	000433c0 	call	433c <memset>
    a6ec:	8005883a 	mov	r2,r16
    a6f0:	dfc00317 	ldw	ra,12(sp)
    a6f4:	dc800217 	ldw	r18,8(sp)
    a6f8:	dc400117 	ldw	r17,4(sp)
    a6fc:	dc000017 	ldw	r16,0(sp)
    a700:	dec00404 	addi	sp,sp,16
    a704:	f800283a 	ret

0000a708 <__sfp>:
    a708:	008000b4 	movhi	r2,2
    a70c:	defffb04 	addi	sp,sp,-20
    a710:	109fb204 	addi	r2,r2,32456
    a714:	dc800215 	stw	r18,8(sp)
    a718:	14800017 	ldw	r18,0(r2)
    a71c:	dcc00315 	stw	r19,12(sp)
    a720:	dfc00415 	stw	ra,16(sp)
    a724:	90800e17 	ldw	r2,56(r18)
    a728:	dc400115 	stw	r17,4(sp)
    a72c:	dc000015 	stw	r16,0(sp)
    a730:	2027883a 	mov	r19,r4
    a734:	1000021e 	bne	r2,zero,a740 <__sfp+0x38>
    a738:	9009883a 	mov	r4,r18
    a73c:	000a5040 	call	a504 <__sinit.part.1>
    a740:	9480b804 	addi	r18,r18,736
    a744:	047fffc4 	movi	r17,-1
    a748:	91400117 	ldw	r5,4(r18)
    a74c:	94000217 	ldw	r16,8(r18)
    a750:	297fffc4 	addi	r5,r5,-1
    a754:	28000a16 	blt	r5,zero,a780 <__sfp+0x78>
    a758:	8080030f 	ldh	r2,12(r16)
    a75c:	10000c26 	beq	r2,zero,a790 <__sfp+0x88>
    a760:	80c01d04 	addi	r3,r16,116
    a764:	00000206 	br	a770 <__sfp+0x68>
    a768:	18bfe60f 	ldh	r2,-104(r3)
    a76c:	10000826 	beq	r2,zero,a790 <__sfp+0x88>
    a770:	297fffc4 	addi	r5,r5,-1
    a774:	1c3ffd04 	addi	r16,r3,-12
    a778:	18c01a04 	addi	r3,r3,104
    a77c:	2c7ffa1e 	bne	r5,r17,a768 <__alt_mem_Flash_flash_data+0xf400a768>
    a780:	90800017 	ldw	r2,0(r18)
    a784:	10001d26 	beq	r2,zero,a7fc <__sfp+0xf4>
    a788:	1025883a 	mov	r18,r2
    a78c:	003fee06 	br	a748 <__alt_mem_Flash_flash_data+0xf400a748>
    a790:	00bfffc4 	movi	r2,-1
    a794:	8080038d 	sth	r2,14(r16)
    a798:	00800044 	movi	r2,1
    a79c:	8080030d 	sth	r2,12(r16)
    a7a0:	80001915 	stw	zero,100(r16)
    a7a4:	80000015 	stw	zero,0(r16)
    a7a8:	80000215 	stw	zero,8(r16)
    a7ac:	80000115 	stw	zero,4(r16)
    a7b0:	80000415 	stw	zero,16(r16)
    a7b4:	80000515 	stw	zero,20(r16)
    a7b8:	80000615 	stw	zero,24(r16)
    a7bc:	81001704 	addi	r4,r16,92
    a7c0:	000b883a 	mov	r5,zero
    a7c4:	01800204 	movi	r6,8
    a7c8:	000433c0 	call	433c <memset>
    a7cc:	8005883a 	mov	r2,r16
    a7d0:	80000c15 	stw	zero,48(r16)
    a7d4:	80000d15 	stw	zero,52(r16)
    a7d8:	80001115 	stw	zero,68(r16)
    a7dc:	80001215 	stw	zero,72(r16)
    a7e0:	dfc00417 	ldw	ra,16(sp)
    a7e4:	dcc00317 	ldw	r19,12(sp)
    a7e8:	dc800217 	ldw	r18,8(sp)
    a7ec:	dc400117 	ldw	r17,4(sp)
    a7f0:	dc000017 	ldw	r16,0(sp)
    a7f4:	dec00504 	addi	sp,sp,20
    a7f8:	f800283a 	ret
    a7fc:	9809883a 	mov	r4,r19
    a800:	01400104 	movi	r5,4
    a804:	000a6a00 	call	a6a0 <__sfmoreglue>
    a808:	90800015 	stw	r2,0(r18)
    a80c:	103fde1e 	bne	r2,zero,a788 <__alt_mem_Flash_flash_data+0xf400a788>
    a810:	00800304 	movi	r2,12
    a814:	98800015 	stw	r2,0(r19)
    a818:	0005883a 	mov	r2,zero
    a81c:	003ff006 	br	a7e0 <__alt_mem_Flash_flash_data+0xf400a7e0>

0000a820 <_cleanup>:
    a820:	008000b4 	movhi	r2,2
    a824:	109fb204 	addi	r2,r2,32456
    a828:	11000017 	ldw	r4,0(r2)
    a82c:	01400074 	movhi	r5,1
    a830:	2940d304 	addi	r5,r5,844
    a834:	000b2201 	jmpi	b220 <_fwalk_reent>

0000a838 <__sinit>:
    a838:	20800e17 	ldw	r2,56(r4)
    a83c:	10000126 	beq	r2,zero,a844 <__sinit+0xc>
    a840:	f800283a 	ret
    a844:	000a5041 	jmpi	a504 <__sinit.part.1>

0000a848 <__sfp_lock_acquire>:
    a848:	f800283a 	ret

0000a84c <__sfp_lock_release>:
    a84c:	f800283a 	ret

0000a850 <__sinit_lock_acquire>:
    a850:	f800283a 	ret

0000a854 <__sinit_lock_release>:
    a854:	f800283a 	ret

0000a858 <__fp_lock_all>:
    a858:	008000b4 	movhi	r2,2
    a85c:	109fb304 	addi	r2,r2,32460
    a860:	11000017 	ldw	r4,0(r2)
    a864:	01400074 	movhi	r5,1
    a868:	29693a04 	addi	r5,r5,-23320
    a86c:	000b15c1 	jmpi	b15c <_fwalk>

0000a870 <__fp_unlock_all>:
    a870:	008000b4 	movhi	r2,2
    a874:	109fb304 	addi	r2,r2,32460
    a878:	11000017 	ldw	r4,0(r2)
    a87c:	01400074 	movhi	r5,1
    a880:	29693c04 	addi	r5,r5,-23312
    a884:	000b15c1 	jmpi	b15c <_fwalk>

0000a888 <_malloc_trim_r>:
    a888:	defffb04 	addi	sp,sp,-20
    a88c:	dcc00315 	stw	r19,12(sp)
    a890:	04c000b4 	movhi	r19,2
    a894:	dc800215 	stw	r18,8(sp)
    a898:	dc400115 	stw	r17,4(sp)
    a89c:	dc000015 	stw	r16,0(sp)
    a8a0:	dfc00415 	stw	ra,16(sp)
    a8a4:	2821883a 	mov	r16,r5
    a8a8:	9cd93c04 	addi	r19,r19,25840
    a8ac:	2025883a 	mov	r18,r4
    a8b0:	00146d40 	call	146d4 <__malloc_lock>
    a8b4:	98800217 	ldw	r2,8(r19)
    a8b8:	14400117 	ldw	r17,4(r2)
    a8bc:	00bfff04 	movi	r2,-4
    a8c0:	88a2703a 	and	r17,r17,r2
    a8c4:	8c21c83a 	sub	r16,r17,r16
    a8c8:	8403fbc4 	addi	r16,r16,4079
    a8cc:	8020d33a 	srli	r16,r16,12
    a8d0:	0083ffc4 	movi	r2,4095
    a8d4:	843fffc4 	addi	r16,r16,-1
    a8d8:	8020933a 	slli	r16,r16,12
    a8dc:	1400060e 	bge	r2,r16,a8f8 <_malloc_trim_r+0x70>
    a8e0:	9009883a 	mov	r4,r18
    a8e4:	000b883a 	mov	r5,zero
    a8e8:	000d7880 	call	d788 <_sbrk_r>
    a8ec:	98c00217 	ldw	r3,8(r19)
    a8f0:	1c47883a 	add	r3,r3,r17
    a8f4:	10c00a26 	beq	r2,r3,a920 <_malloc_trim_r+0x98>
    a8f8:	9009883a 	mov	r4,r18
    a8fc:	00147f40 	call	147f4 <__malloc_unlock>
    a900:	0005883a 	mov	r2,zero
    a904:	dfc00417 	ldw	ra,16(sp)
    a908:	dcc00317 	ldw	r19,12(sp)
    a90c:	dc800217 	ldw	r18,8(sp)
    a910:	dc400117 	ldw	r17,4(sp)
    a914:	dc000017 	ldw	r16,0(sp)
    a918:	dec00504 	addi	sp,sp,20
    a91c:	f800283a 	ret
    a920:	9009883a 	mov	r4,r18
    a924:	040bc83a 	sub	r5,zero,r16
    a928:	000d7880 	call	d788 <_sbrk_r>
    a92c:	00ffffc4 	movi	r3,-1
    a930:	10c00d26 	beq	r2,r3,a968 <_malloc_trim_r+0xe0>
    a934:	00c000f4 	movhi	r3,3
    a938:	18e81e04 	addi	r3,r3,-24456
    a93c:	18800017 	ldw	r2,0(r3)
    a940:	99000217 	ldw	r4,8(r19)
    a944:	8c23c83a 	sub	r17,r17,r16
    a948:	8c400054 	ori	r17,r17,1
    a94c:	1421c83a 	sub	r16,r2,r16
    a950:	24400115 	stw	r17,4(r4)
    a954:	9009883a 	mov	r4,r18
    a958:	1c000015 	stw	r16,0(r3)
    a95c:	00147f40 	call	147f4 <__malloc_unlock>
    a960:	00800044 	movi	r2,1
    a964:	003fe706 	br	a904 <__alt_mem_Flash_flash_data+0xf400a904>
    a968:	9009883a 	mov	r4,r18
    a96c:	000b883a 	mov	r5,zero
    a970:	000d7880 	call	d788 <_sbrk_r>
    a974:	99000217 	ldw	r4,8(r19)
    a978:	014003c4 	movi	r5,15
    a97c:	1107c83a 	sub	r3,r2,r4
    a980:	28ffdd0e 	bge	r5,r3,a8f8 <__alt_mem_Flash_flash_data+0xf400a8f8>
    a984:	014000b4 	movhi	r5,2
    a988:	295fb504 	addi	r5,r5,32468
    a98c:	29400017 	ldw	r5,0(r5)
    a990:	18c00054 	ori	r3,r3,1
    a994:	20c00115 	stw	r3,4(r4)
    a998:	00c000f4 	movhi	r3,3
    a99c:	1145c83a 	sub	r2,r2,r5
    a9a0:	18e81e04 	addi	r3,r3,-24456
    a9a4:	18800015 	stw	r2,0(r3)
    a9a8:	003fd306 	br	a8f8 <__alt_mem_Flash_flash_data+0xf400a8f8>

0000a9ac <_free_r>:
    a9ac:	28004c26 	beq	r5,zero,aae0 <_free_r+0x134>
    a9b0:	defffd04 	addi	sp,sp,-12
    a9b4:	dc400115 	stw	r17,4(sp)
    a9b8:	dc000015 	stw	r16,0(sp)
    a9bc:	2023883a 	mov	r17,r4
    a9c0:	2821883a 	mov	r16,r5
    a9c4:	dfc00215 	stw	ra,8(sp)
    a9c8:	00146d40 	call	146d4 <__malloc_lock>
    a9cc:	813fff17 	ldw	r4,-4(r16)
    a9d0:	00bfff84 	movi	r2,-2
    a9d4:	024000b4 	movhi	r9,2
    a9d8:	81bffe04 	addi	r6,r16,-8
    a9dc:	2084703a 	and	r2,r4,r2
    a9e0:	4a593c04 	addi	r9,r9,25840
    a9e4:	308b883a 	add	r5,r6,r2
    a9e8:	2a000117 	ldw	r8,4(r5)
    a9ec:	49c00217 	ldw	r7,8(r9)
    a9f0:	00ffff04 	movi	r3,-4
    a9f4:	40c6703a 	and	r3,r8,r3
    a9f8:	39405326 	beq	r7,r5,ab48 <_free_r+0x19c>
    a9fc:	28c00115 	stw	r3,4(r5)
    aa00:	2100004c 	andi	r4,r4,1
    aa04:	2000091e 	bne	r4,zero,aa2c <_free_r+0x80>
    aa08:	81fffe17 	ldw	r7,-8(r16)
    aa0c:	4a000204 	addi	r8,r9,8
    aa10:	31cdc83a 	sub	r6,r6,r7
    aa14:	31000217 	ldw	r4,8(r6)
    aa18:	11c5883a 	add	r2,r2,r7
    aa1c:	22006126 	beq	r4,r8,aba4 <_free_r+0x1f8>
    aa20:	31c00317 	ldw	r7,12(r6)
    aa24:	21c00315 	stw	r7,12(r4)
    aa28:	39000215 	stw	r4,8(r7)
    aa2c:	28c9883a 	add	r4,r5,r3
    aa30:	21c00117 	ldw	r7,4(r4)
    aa34:	39c0004c 	andi	r7,r7,1
    aa38:	38000d1e 	bne	r7,zero,aa70 <_free_r+0xc4>
    aa3c:	29000217 	ldw	r4,8(r5)
    aa40:	10c5883a 	add	r2,r2,r3
    aa44:	00c000b4 	movhi	r3,2
    aa48:	18d93e04 	addi	r3,r3,25848
    aa4c:	20c07526 	beq	r4,r3,ac24 <_free_r+0x278>
    aa50:	29c00317 	ldw	r7,12(r5)
    aa54:	11400054 	ori	r5,r2,1
    aa58:	3087883a 	add	r3,r6,r2
    aa5c:	21c00315 	stw	r7,12(r4)
    aa60:	39000215 	stw	r4,8(r7)
    aa64:	31400115 	stw	r5,4(r6)
    aa68:	18800015 	stw	r2,0(r3)
    aa6c:	00000406 	br	aa80 <_free_r+0xd4>
    aa70:	10c00054 	ori	r3,r2,1
    aa74:	30c00115 	stw	r3,4(r6)
    aa78:	3087883a 	add	r3,r6,r2
    aa7c:	18800015 	stw	r2,0(r3)
    aa80:	00c07fc4 	movi	r3,511
    aa84:	18801736 	bltu	r3,r2,aae4 <_free_r+0x138>
    aa88:	1004d0fa 	srli	r2,r2,3
    aa8c:	01400044 	movi	r5,1
    aa90:	49000117 	ldw	r4,4(r9)
    aa94:	1087883a 	add	r3,r2,r2
    aa98:	18c7883a 	add	r3,r3,r3
    aa9c:	1005d0ba 	srai	r2,r2,2
    aaa0:	18c7883a 	add	r3,r3,r3
    aaa4:	1a47883a 	add	r3,r3,r9
    aaa8:	19c00217 	ldw	r7,8(r3)
    aaac:	2884983a 	sll	r2,r5,r2
    aab0:	30c00315 	stw	r3,12(r6)
    aab4:	31c00215 	stw	r7,8(r6)
    aab8:	1104b03a 	or	r2,r2,r4
    aabc:	19800215 	stw	r6,8(r3)
    aac0:	48800115 	stw	r2,4(r9)
    aac4:	39800315 	stw	r6,12(r7)
    aac8:	8809883a 	mov	r4,r17
    aacc:	dfc00217 	ldw	ra,8(sp)
    aad0:	dc400117 	ldw	r17,4(sp)
    aad4:	dc000017 	ldw	r16,0(sp)
    aad8:	dec00304 	addi	sp,sp,12
    aadc:	00147f41 	jmpi	147f4 <__malloc_unlock>
    aae0:	f800283a 	ret
    aae4:	1006d27a 	srli	r3,r2,9
    aae8:	01000104 	movi	r4,4
    aaec:	20c04036 	bltu	r4,r3,abf0 <_free_r+0x244>
    aaf0:	1006d1ba 	srli	r3,r2,6
    aaf4:	19400e04 	addi	r5,r3,56
    aaf8:	2947883a 	add	r3,r5,r5
    aafc:	18c7883a 	add	r3,r3,r3
    ab00:	18c7883a 	add	r3,r3,r3
    ab04:	1a49883a 	add	r4,r3,r9
    ab08:	20c00217 	ldw	r3,8(r4)
    ab0c:	01c000b4 	movhi	r7,2
    ab10:	39d93c04 	addi	r7,r7,25840
    ab14:	19003b26 	beq	r3,r4,ac04 <_free_r+0x258>
    ab18:	01ffff04 	movi	r7,-4
    ab1c:	19400117 	ldw	r5,4(r3)
    ab20:	29ca703a 	and	r5,r5,r7
    ab24:	1140022e 	bgeu	r2,r5,ab30 <_free_r+0x184>
    ab28:	18c00217 	ldw	r3,8(r3)
    ab2c:	20fffb1e 	bne	r4,r3,ab1c <__alt_mem_Flash_flash_data+0xf400ab1c>
    ab30:	18800317 	ldw	r2,12(r3)
    ab34:	30800315 	stw	r2,12(r6)
    ab38:	30c00215 	stw	r3,8(r6)
    ab3c:	11800215 	stw	r6,8(r2)
    ab40:	19800315 	stw	r6,12(r3)
    ab44:	003fe006 	br	aac8 <__alt_mem_Flash_flash_data+0xf400aac8>
    ab48:	2100004c 	andi	r4,r4,1
    ab4c:	1885883a 	add	r2,r3,r2
    ab50:	2000071e 	bne	r4,zero,ab70 <_free_r+0x1c4>
    ab54:	817ffe17 	ldw	r5,-8(r16)
    ab58:	314dc83a 	sub	r6,r6,r5
    ab5c:	30c00317 	ldw	r3,12(r6)
    ab60:	31000217 	ldw	r4,8(r6)
    ab64:	1145883a 	add	r2,r2,r5
    ab68:	20c00315 	stw	r3,12(r4)
    ab6c:	19000215 	stw	r4,8(r3)
    ab70:	10c00054 	ori	r3,r2,1
    ab74:	30c00115 	stw	r3,4(r6)
    ab78:	00c000b4 	movhi	r3,2
    ab7c:	18dfb604 	addi	r3,r3,32472
    ab80:	18c00017 	ldw	r3,0(r3)
    ab84:	49800215 	stw	r6,8(r9)
    ab88:	10ffcf36 	bltu	r2,r3,aac8 <__alt_mem_Flash_flash_data+0xf400aac8>
    ab8c:	008000f4 	movhi	r2,3
    ab90:	10a7d604 	addi	r2,r2,-24744
    ab94:	11400017 	ldw	r5,0(r2)
    ab98:	8809883a 	mov	r4,r17
    ab9c:	000a8880 	call	a888 <_malloc_trim_r>
    aba0:	003fc906 	br	aac8 <__alt_mem_Flash_flash_data+0xf400aac8>
    aba4:	28c9883a 	add	r4,r5,r3
    aba8:	21000117 	ldw	r4,4(r4)
    abac:	2100004c 	andi	r4,r4,1
    abb0:	20000a1e 	bne	r4,zero,abdc <_free_r+0x230>
    abb4:	29000317 	ldw	r4,12(r5)
    abb8:	29400217 	ldw	r5,8(r5)
    abbc:	10c5883a 	add	r2,r2,r3
    abc0:	10c00054 	ori	r3,r2,1
    abc4:	29000315 	stw	r4,12(r5)
    abc8:	21400215 	stw	r5,8(r4)
    abcc:	30c00115 	stw	r3,4(r6)
    abd0:	308d883a 	add	r6,r6,r2
    abd4:	30800015 	stw	r2,0(r6)
    abd8:	003fbb06 	br	aac8 <__alt_mem_Flash_flash_data+0xf400aac8>
    abdc:	10c00054 	ori	r3,r2,1
    abe0:	30c00115 	stw	r3,4(r6)
    abe4:	308d883a 	add	r6,r6,r2
    abe8:	30800015 	stw	r2,0(r6)
    abec:	003fb606 	br	aac8 <__alt_mem_Flash_flash_data+0xf400aac8>
    abf0:	01000504 	movi	r4,20
    abf4:	20c01436 	bltu	r4,r3,ac48 <_free_r+0x29c>
    abf8:	194016c4 	addi	r5,r3,91
    abfc:	2947883a 	add	r3,r5,r5
    ac00:	003fbe06 	br	aafc <__alt_mem_Flash_flash_data+0xf400aafc>
    ac04:	280bd0ba 	srai	r5,r5,2
    ac08:	00800044 	movi	r2,1
    ac0c:	39000117 	ldw	r4,4(r7)
    ac10:	114a983a 	sll	r5,r2,r5
    ac14:	1805883a 	mov	r2,r3
    ac18:	2908b03a 	or	r4,r5,r4
    ac1c:	39000115 	stw	r4,4(r7)
    ac20:	003fc406 	br	ab34 <__alt_mem_Flash_flash_data+0xf400ab34>
    ac24:	49800515 	stw	r6,20(r9)
    ac28:	49800415 	stw	r6,16(r9)
    ac2c:	10c00054 	ori	r3,r2,1
    ac30:	31000315 	stw	r4,12(r6)
    ac34:	31000215 	stw	r4,8(r6)
    ac38:	30c00115 	stw	r3,4(r6)
    ac3c:	308d883a 	add	r6,r6,r2
    ac40:	30800015 	stw	r2,0(r6)
    ac44:	003fa006 	br	aac8 <__alt_mem_Flash_flash_data+0xf400aac8>
    ac48:	01001504 	movi	r4,84
    ac4c:	20c00436 	bltu	r4,r3,ac60 <_free_r+0x2b4>
    ac50:	1006d33a 	srli	r3,r2,12
    ac54:	19401b84 	addi	r5,r3,110
    ac58:	2947883a 	add	r3,r5,r5
    ac5c:	003fa706 	br	aafc <__alt_mem_Flash_flash_data+0xf400aafc>
    ac60:	01005504 	movi	r4,340
    ac64:	20c00436 	bltu	r4,r3,ac78 <_free_r+0x2cc>
    ac68:	1006d3fa 	srli	r3,r2,15
    ac6c:	19401dc4 	addi	r5,r3,119
    ac70:	2947883a 	add	r3,r5,r5
    ac74:	003fa106 	br	aafc <__alt_mem_Flash_flash_data+0xf400aafc>
    ac78:	01015504 	movi	r4,1364
    ac7c:	20c00436 	bltu	r4,r3,ac90 <_free_r+0x2e4>
    ac80:	1006d4ba 	srli	r3,r2,18
    ac84:	19401f04 	addi	r5,r3,124
    ac88:	2947883a 	add	r3,r5,r5
    ac8c:	003f9b06 	br	aafc <__alt_mem_Flash_flash_data+0xf400aafc>
    ac90:	00c03f04 	movi	r3,252
    ac94:	01401f84 	movi	r5,126
    ac98:	003f9806 	br	aafc <__alt_mem_Flash_flash_data+0xf400aafc>

0000ac9c <__sfvwrite_r>:
    ac9c:	30800217 	ldw	r2,8(r6)
    aca0:	10006726 	beq	r2,zero,ae40 <__sfvwrite_r+0x1a4>
    aca4:	defff404 	addi	sp,sp,-48
    aca8:	dd000615 	stw	r20,24(sp)
    acac:	2029883a 	mov	r20,r4
    acb0:	2900030b 	ldhu	r4,12(r5)
    acb4:	ddc00915 	stw	r23,36(sp)
    acb8:	dc000215 	stw	r16,8(sp)
    acbc:	dfc00b15 	stw	ra,44(sp)
    acc0:	df000a15 	stw	fp,40(sp)
    acc4:	dd800815 	stw	r22,32(sp)
    acc8:	dd400715 	stw	r21,28(sp)
    accc:	dcc00515 	stw	r19,20(sp)
    acd0:	dc800415 	stw	r18,16(sp)
    acd4:	dc400315 	stw	r17,12(sp)
    acd8:	2080020c 	andi	r2,r4,8
    acdc:	2821883a 	mov	r16,r5
    ace0:	302f883a 	mov	r23,r6
    ace4:	10002726 	beq	r2,zero,ad84 <__sfvwrite_r+0xe8>
    ace8:	28800417 	ldw	r2,16(r5)
    acec:	10002526 	beq	r2,zero,ad84 <__sfvwrite_r+0xe8>
    acf0:	2080008c 	andi	r2,r4,2
    acf4:	bc400017 	ldw	r17,0(r23)
    acf8:	10002a26 	beq	r2,zero,ada4 <__sfvwrite_r+0x108>
    acfc:	05600034 	movhi	r21,32768
    ad00:	0027883a 	mov	r19,zero
    ad04:	0025883a 	mov	r18,zero
    ad08:	ad7f0004 	addi	r21,r21,-1024
    ad0c:	980d883a 	mov	r6,r19
    ad10:	a009883a 	mov	r4,r20
    ad14:	90004626 	beq	r18,zero,ae30 <__sfvwrite_r+0x194>
    ad18:	900f883a 	mov	r7,r18
    ad1c:	81400717 	ldw	r5,28(r16)
    ad20:	ac80022e 	bgeu	r21,r18,ad2c <__sfvwrite_r+0x90>
    ad24:	01e00034 	movhi	r7,32768
    ad28:	39ff0004 	addi	r7,r7,-1024
    ad2c:	80800917 	ldw	r2,36(r16)
    ad30:	103ee83a 	callr	r2
    ad34:	0080520e 	bge	zero,r2,ae80 <__sfvwrite_r+0x1e4>
    ad38:	b8c00217 	ldw	r3,8(r23)
    ad3c:	98a7883a 	add	r19,r19,r2
    ad40:	90a5c83a 	sub	r18,r18,r2
    ad44:	1885c83a 	sub	r2,r3,r2
    ad48:	b8800215 	stw	r2,8(r23)
    ad4c:	103fef1e 	bne	r2,zero,ad0c <__alt_mem_Flash_flash_data+0xf400ad0c>
    ad50:	0005883a 	mov	r2,zero
    ad54:	dfc00b17 	ldw	ra,44(sp)
    ad58:	df000a17 	ldw	fp,40(sp)
    ad5c:	ddc00917 	ldw	r23,36(sp)
    ad60:	dd800817 	ldw	r22,32(sp)
    ad64:	dd400717 	ldw	r21,28(sp)
    ad68:	dd000617 	ldw	r20,24(sp)
    ad6c:	dcc00517 	ldw	r19,20(sp)
    ad70:	dc800417 	ldw	r18,16(sp)
    ad74:	dc400317 	ldw	r17,12(sp)
    ad78:	dc000217 	ldw	r16,8(sp)
    ad7c:	dec00c04 	addi	sp,sp,48
    ad80:	f800283a 	ret
    ad84:	a009883a 	mov	r4,r20
    ad88:	800b883a 	mov	r5,r16
    ad8c:	00087d80 	call	87d8 <__swsetup_r>
    ad90:	1000ec1e 	bne	r2,zero,b144 <__sfvwrite_r+0x4a8>
    ad94:	8100030b 	ldhu	r4,12(r16)
    ad98:	bc400017 	ldw	r17,0(r23)
    ad9c:	2080008c 	andi	r2,r4,2
    ada0:	103fd61e 	bne	r2,zero,acfc <__alt_mem_Flash_flash_data+0xf400acfc>
    ada4:	2080004c 	andi	r2,r4,1
    ada8:	10003a1e 	bne	r2,zero,ae94 <__sfvwrite_r+0x1f8>
    adac:	0039883a 	mov	fp,zero
    adb0:	0025883a 	mov	r18,zero
    adb4:	90001a26 	beq	r18,zero,ae20 <__sfvwrite_r+0x184>
    adb8:	2080800c 	andi	r2,r4,512
    adbc:	85800217 	ldw	r22,8(r16)
    adc0:	10007626 	beq	r2,zero,af9c <__sfvwrite_r+0x300>
    adc4:	b027883a 	mov	r19,r22
    adc8:	95809436 	bltu	r18,r22,b01c <__sfvwrite_r+0x380>
    adcc:	2081200c 	andi	r2,r4,1152
    add0:	10009f1e 	bne	r2,zero,b050 <__sfvwrite_r+0x3b4>
    add4:	81000017 	ldw	r4,0(r16)
    add8:	e00b883a 	mov	r5,fp
    addc:	980d883a 	mov	r6,r19
    ade0:	000bf440 	call	bf44 <memmove>
    ade4:	81000217 	ldw	r4,8(r16)
    ade8:	81400017 	ldw	r5,0(r16)
    adec:	9005883a 	mov	r2,r18
    adf0:	2587c83a 	sub	r3,r4,r22
    adf4:	2ce7883a 	add	r19,r5,r19
    adf8:	80c00215 	stw	r3,8(r16)
    adfc:	84c00015 	stw	r19,0(r16)
    ae00:	b8c00217 	ldw	r3,8(r23)
    ae04:	e0b9883a 	add	fp,fp,r2
    ae08:	90a5c83a 	sub	r18,r18,r2
    ae0c:	1885c83a 	sub	r2,r3,r2
    ae10:	b8800215 	stw	r2,8(r23)
    ae14:	103fce26 	beq	r2,zero,ad50 <__alt_mem_Flash_flash_data+0xf400ad50>
    ae18:	8100030b 	ldhu	r4,12(r16)
    ae1c:	903fe61e 	bne	r18,zero,adb8 <__alt_mem_Flash_flash_data+0xf400adb8>
    ae20:	8f000017 	ldw	fp,0(r17)
    ae24:	8c800117 	ldw	r18,4(r17)
    ae28:	8c400204 	addi	r17,r17,8
    ae2c:	003fe106 	br	adb4 <__alt_mem_Flash_flash_data+0xf400adb4>
    ae30:	8cc00017 	ldw	r19,0(r17)
    ae34:	8c800117 	ldw	r18,4(r17)
    ae38:	8c400204 	addi	r17,r17,8
    ae3c:	003fb306 	br	ad0c <__alt_mem_Flash_flash_data+0xf400ad0c>
    ae40:	0005883a 	mov	r2,zero
    ae44:	f800283a 	ret
    ae48:	00a00034 	movhi	r2,32768
    ae4c:	10bfffc4 	addi	r2,r2,-1
    ae50:	9009883a 	mov	r4,r18
    ae54:	1480012e 	bgeu	r2,r18,ae5c <__sfvwrite_r+0x1c0>
    ae58:	1009883a 	mov	r4,r2
    ae5c:	980b883a 	mov	r5,r19
    ae60:	00115380 	call	11538 <__divsi3>
    ae64:	81400717 	ldw	r5,28(r16)
    ae68:	80c00917 	ldw	r3,36(r16)
    ae6c:	988f383a 	mul	r7,r19,r2
    ae70:	a009883a 	mov	r4,r20
    ae74:	e00d883a 	mov	r6,fp
    ae78:	183ee83a 	callr	r3
    ae7c:	00bfe016 	blt	zero,r2,ae00 <__alt_mem_Flash_flash_data+0xf400ae00>
    ae80:	8080030b 	ldhu	r2,12(r16)
    ae84:	10801014 	ori	r2,r2,64
    ae88:	8080030d 	sth	r2,12(r16)
    ae8c:	00bfffc4 	movi	r2,-1
    ae90:	003fb006 	br	ad54 <__alt_mem_Flash_flash_data+0xf400ad54>
    ae94:	0027883a 	mov	r19,zero
    ae98:	0011883a 	mov	r8,zero
    ae9c:	0039883a 	mov	fp,zero
    aea0:	0025883a 	mov	r18,zero
    aea4:	90001f26 	beq	r18,zero,af24 <__sfvwrite_r+0x288>
    aea8:	40006026 	beq	r8,zero,b02c <__sfvwrite_r+0x390>
    aeac:	982b883a 	mov	r21,r19
    aeb0:	94c0012e 	bgeu	r18,r19,aeb8 <__sfvwrite_r+0x21c>
    aeb4:	902b883a 	mov	r21,r18
    aeb8:	81000017 	ldw	r4,0(r16)
    aebc:	80800417 	ldw	r2,16(r16)
    aec0:	a82d883a 	mov	r22,r21
    aec4:	81800217 	ldw	r6,8(r16)
    aec8:	81c00517 	ldw	r7,20(r16)
    aecc:	1100022e 	bgeu	r2,r4,aed8 <__sfvwrite_r+0x23c>
    aed0:	31c7883a 	add	r3,r6,r7
    aed4:	1d401816 	blt	r3,r21,af38 <__sfvwrite_r+0x29c>
    aed8:	a9c04416 	blt	r21,r7,afec <__sfvwrite_r+0x350>
    aedc:	80800917 	ldw	r2,36(r16)
    aee0:	81400717 	ldw	r5,28(r16)
    aee4:	a009883a 	mov	r4,r20
    aee8:	da000115 	stw	r8,4(sp)
    aeec:	e00d883a 	mov	r6,fp
    aef0:	103ee83a 	callr	r2
    aef4:	102d883a 	mov	r22,r2
    aef8:	da000117 	ldw	r8,4(sp)
    aefc:	00bfe00e 	bge	zero,r2,ae80 <__alt_mem_Flash_flash_data+0xf400ae80>
    af00:	9da7c83a 	sub	r19,r19,r22
    af04:	98001f26 	beq	r19,zero,af84 <__sfvwrite_r+0x2e8>
    af08:	b8800217 	ldw	r2,8(r23)
    af0c:	e5b9883a 	add	fp,fp,r22
    af10:	95a5c83a 	sub	r18,r18,r22
    af14:	15adc83a 	sub	r22,r2,r22
    af18:	bd800215 	stw	r22,8(r23)
    af1c:	b03f8c26 	beq	r22,zero,ad50 <__alt_mem_Flash_flash_data+0xf400ad50>
    af20:	903fe11e 	bne	r18,zero,aea8 <__alt_mem_Flash_flash_data+0xf400aea8>
    af24:	8f000017 	ldw	fp,0(r17)
    af28:	8c800117 	ldw	r18,4(r17)
    af2c:	0011883a 	mov	r8,zero
    af30:	8c400204 	addi	r17,r17,8
    af34:	003fdb06 	br	aea4 <__alt_mem_Flash_flash_data+0xf400aea4>
    af38:	180d883a 	mov	r6,r3
    af3c:	e00b883a 	mov	r5,fp
    af40:	da000115 	stw	r8,4(sp)
    af44:	d8c00015 	stw	r3,0(sp)
    af48:	000bf440 	call	bf44 <memmove>
    af4c:	d8c00017 	ldw	r3,0(sp)
    af50:	80800017 	ldw	r2,0(r16)
    af54:	a009883a 	mov	r4,r20
    af58:	800b883a 	mov	r5,r16
    af5c:	10c5883a 	add	r2,r2,r3
    af60:	80800015 	stw	r2,0(r16)
    af64:	d8c00015 	stw	r3,0(sp)
    af68:	000a45c0 	call	a45c <_fflush_r>
    af6c:	d8c00017 	ldw	r3,0(sp)
    af70:	da000117 	ldw	r8,4(sp)
    af74:	103fc21e 	bne	r2,zero,ae80 <__alt_mem_Flash_flash_data+0xf400ae80>
    af78:	182d883a 	mov	r22,r3
    af7c:	9da7c83a 	sub	r19,r19,r22
    af80:	983fe11e 	bne	r19,zero,af08 <__alt_mem_Flash_flash_data+0xf400af08>
    af84:	a009883a 	mov	r4,r20
    af88:	800b883a 	mov	r5,r16
    af8c:	000a45c0 	call	a45c <_fflush_r>
    af90:	103fbb1e 	bne	r2,zero,ae80 <__alt_mem_Flash_flash_data+0xf400ae80>
    af94:	0011883a 	mov	r8,zero
    af98:	003fdb06 	br	af08 <__alt_mem_Flash_flash_data+0xf400af08>
    af9c:	81000017 	ldw	r4,0(r16)
    afa0:	80800417 	ldw	r2,16(r16)
    afa4:	11000236 	bltu	r2,r4,afb0 <__sfvwrite_r+0x314>
    afa8:	84c00517 	ldw	r19,20(r16)
    afac:	94ffa62e 	bgeu	r18,r19,ae48 <__alt_mem_Flash_flash_data+0xf400ae48>
    afb0:	9027883a 	mov	r19,r18
    afb4:	b480012e 	bgeu	r22,r18,afbc <__sfvwrite_r+0x320>
    afb8:	b027883a 	mov	r19,r22
    afbc:	e00b883a 	mov	r5,fp
    afc0:	980d883a 	mov	r6,r19
    afc4:	000bf440 	call	bf44 <memmove>
    afc8:	80800217 	ldw	r2,8(r16)
    afcc:	80c00017 	ldw	r3,0(r16)
    afd0:	14c5c83a 	sub	r2,r2,r19
    afd4:	1cc7883a 	add	r3,r3,r19
    afd8:	80800215 	stw	r2,8(r16)
    afdc:	80c00015 	stw	r3,0(r16)
    afe0:	10004326 	beq	r2,zero,b0f0 <__sfvwrite_r+0x454>
    afe4:	9805883a 	mov	r2,r19
    afe8:	003f8506 	br	ae00 <__alt_mem_Flash_flash_data+0xf400ae00>
    afec:	a80d883a 	mov	r6,r21
    aff0:	e00b883a 	mov	r5,fp
    aff4:	da000115 	stw	r8,4(sp)
    aff8:	000bf440 	call	bf44 <memmove>
    affc:	80800217 	ldw	r2,8(r16)
    b000:	80c00017 	ldw	r3,0(r16)
    b004:	da000117 	ldw	r8,4(sp)
    b008:	1545c83a 	sub	r2,r2,r21
    b00c:	1d6b883a 	add	r21,r3,r21
    b010:	80800215 	stw	r2,8(r16)
    b014:	85400015 	stw	r21,0(r16)
    b018:	003fb906 	br	af00 <__alt_mem_Flash_flash_data+0xf400af00>
    b01c:	81000017 	ldw	r4,0(r16)
    b020:	902d883a 	mov	r22,r18
    b024:	9027883a 	mov	r19,r18
    b028:	003f6b06 	br	add8 <__alt_mem_Flash_flash_data+0xf400add8>
    b02c:	e009883a 	mov	r4,fp
    b030:	01400284 	movi	r5,10
    b034:	900d883a 	mov	r6,r18
    b038:	000bd240 	call	bd24 <memchr>
    b03c:	10003e26 	beq	r2,zero,b138 <__sfvwrite_r+0x49c>
    b040:	10800044 	addi	r2,r2,1
    b044:	1727c83a 	sub	r19,r2,fp
    b048:	02000044 	movi	r8,1
    b04c:	003f9706 	br	aeac <__alt_mem_Flash_flash_data+0xf400aeac>
    b050:	80800517 	ldw	r2,20(r16)
    b054:	81400417 	ldw	r5,16(r16)
    b058:	80c00017 	ldw	r3,0(r16)
    b05c:	10a7883a 	add	r19,r2,r2
    b060:	9885883a 	add	r2,r19,r2
    b064:	1026d7fa 	srli	r19,r2,31
    b068:	196bc83a 	sub	r21,r3,r5
    b06c:	a9800044 	addi	r6,r21,1
    b070:	9885883a 	add	r2,r19,r2
    b074:	1027d07a 	srai	r19,r2,1
    b078:	3485883a 	add	r2,r6,r18
    b07c:	980d883a 	mov	r6,r19
    b080:	9880022e 	bgeu	r19,r2,b08c <__sfvwrite_r+0x3f0>
    b084:	1027883a 	mov	r19,r2
    b088:	100d883a 	mov	r6,r2
    b08c:	2101000c 	andi	r4,r4,1024
    b090:	20001c26 	beq	r4,zero,b104 <__sfvwrite_r+0x468>
    b094:	a009883a 	mov	r4,r20
    b098:	300b883a 	mov	r5,r6
    b09c:	000b57c0 	call	b57c <_malloc_r>
    b0a0:	102d883a 	mov	r22,r2
    b0a4:	10002926 	beq	r2,zero,b14c <__sfvwrite_r+0x4b0>
    b0a8:	81400417 	ldw	r5,16(r16)
    b0ac:	1009883a 	mov	r4,r2
    b0b0:	a80d883a 	mov	r6,r21
    b0b4:	000be0c0 	call	be0c <memcpy>
    b0b8:	8080030b 	ldhu	r2,12(r16)
    b0bc:	00fedfc4 	movi	r3,-1153
    b0c0:	10c4703a 	and	r2,r2,r3
    b0c4:	10802014 	ori	r2,r2,128
    b0c8:	8080030d 	sth	r2,12(r16)
    b0cc:	b549883a 	add	r4,r22,r21
    b0d0:	9d4bc83a 	sub	r5,r19,r21
    b0d4:	85800415 	stw	r22,16(r16)
    b0d8:	84c00515 	stw	r19,20(r16)
    b0dc:	81000015 	stw	r4,0(r16)
    b0e0:	902d883a 	mov	r22,r18
    b0e4:	81400215 	stw	r5,8(r16)
    b0e8:	9027883a 	mov	r19,r18
    b0ec:	003f3a06 	br	add8 <__alt_mem_Flash_flash_data+0xf400add8>
    b0f0:	a009883a 	mov	r4,r20
    b0f4:	800b883a 	mov	r5,r16
    b0f8:	000a45c0 	call	a45c <_fflush_r>
    b0fc:	103fb926 	beq	r2,zero,afe4 <__alt_mem_Flash_flash_data+0xf400afe4>
    b100:	003f5f06 	br	ae80 <__alt_mem_Flash_flash_data+0xf400ae80>
    b104:	a009883a 	mov	r4,r20
    b108:	000d1ac0 	call	d1ac <_realloc_r>
    b10c:	102d883a 	mov	r22,r2
    b110:	103fee1e 	bne	r2,zero,b0cc <__alt_mem_Flash_flash_data+0xf400b0cc>
    b114:	81400417 	ldw	r5,16(r16)
    b118:	a009883a 	mov	r4,r20
    b11c:	000a9ac0 	call	a9ac <_free_r>
    b120:	8080030b 	ldhu	r2,12(r16)
    b124:	00ffdfc4 	movi	r3,-129
    b128:	1884703a 	and	r2,r3,r2
    b12c:	00c00304 	movi	r3,12
    b130:	a0c00015 	stw	r3,0(r20)
    b134:	003f5306 	br	ae84 <__alt_mem_Flash_flash_data+0xf400ae84>
    b138:	94c00044 	addi	r19,r18,1
    b13c:	02000044 	movi	r8,1
    b140:	003f5a06 	br	aeac <__alt_mem_Flash_flash_data+0xf400aeac>
    b144:	00bfffc4 	movi	r2,-1
    b148:	003f0206 	br	ad54 <__alt_mem_Flash_flash_data+0xf400ad54>
    b14c:	00800304 	movi	r2,12
    b150:	a0800015 	stw	r2,0(r20)
    b154:	8080030b 	ldhu	r2,12(r16)
    b158:	003f4a06 	br	ae84 <__alt_mem_Flash_flash_data+0xf400ae84>

0000b15c <_fwalk>:
    b15c:	defff704 	addi	sp,sp,-36
    b160:	dd000415 	stw	r20,16(sp)
    b164:	dfc00815 	stw	ra,32(sp)
    b168:	ddc00715 	stw	r23,28(sp)
    b16c:	dd800615 	stw	r22,24(sp)
    b170:	dd400515 	stw	r21,20(sp)
    b174:	dcc00315 	stw	r19,12(sp)
    b178:	dc800215 	stw	r18,8(sp)
    b17c:	dc400115 	stw	r17,4(sp)
    b180:	dc000015 	stw	r16,0(sp)
    b184:	2500b804 	addi	r20,r4,736
    b188:	a0002326 	beq	r20,zero,b218 <_fwalk+0xbc>
    b18c:	282b883a 	mov	r21,r5
    b190:	002f883a 	mov	r23,zero
    b194:	05800044 	movi	r22,1
    b198:	04ffffc4 	movi	r19,-1
    b19c:	a4400117 	ldw	r17,4(r20)
    b1a0:	a4800217 	ldw	r18,8(r20)
    b1a4:	8c7fffc4 	addi	r17,r17,-1
    b1a8:	88000d16 	blt	r17,zero,b1e0 <_fwalk+0x84>
    b1ac:	94000304 	addi	r16,r18,12
    b1b0:	94800384 	addi	r18,r18,14
    b1b4:	80c0000b 	ldhu	r3,0(r16)
    b1b8:	8c7fffc4 	addi	r17,r17,-1
    b1bc:	813ffd04 	addi	r4,r16,-12
    b1c0:	b0c0042e 	bgeu	r22,r3,b1d4 <_fwalk+0x78>
    b1c4:	90c0000f 	ldh	r3,0(r18)
    b1c8:	1cc00226 	beq	r3,r19,b1d4 <_fwalk+0x78>
    b1cc:	a83ee83a 	callr	r21
    b1d0:	b8aeb03a 	or	r23,r23,r2
    b1d4:	84001a04 	addi	r16,r16,104
    b1d8:	94801a04 	addi	r18,r18,104
    b1dc:	8cfff51e 	bne	r17,r19,b1b4 <__alt_mem_Flash_flash_data+0xf400b1b4>
    b1e0:	a5000017 	ldw	r20,0(r20)
    b1e4:	a03fed1e 	bne	r20,zero,b19c <__alt_mem_Flash_flash_data+0xf400b19c>
    b1e8:	b805883a 	mov	r2,r23
    b1ec:	dfc00817 	ldw	ra,32(sp)
    b1f0:	ddc00717 	ldw	r23,28(sp)
    b1f4:	dd800617 	ldw	r22,24(sp)
    b1f8:	dd400517 	ldw	r21,20(sp)
    b1fc:	dd000417 	ldw	r20,16(sp)
    b200:	dcc00317 	ldw	r19,12(sp)
    b204:	dc800217 	ldw	r18,8(sp)
    b208:	dc400117 	ldw	r17,4(sp)
    b20c:	dc000017 	ldw	r16,0(sp)
    b210:	dec00904 	addi	sp,sp,36
    b214:	f800283a 	ret
    b218:	002f883a 	mov	r23,zero
    b21c:	003ff206 	br	b1e8 <__alt_mem_Flash_flash_data+0xf400b1e8>

0000b220 <_fwalk_reent>:
    b220:	defff704 	addi	sp,sp,-36
    b224:	dd400515 	stw	r21,20(sp)
    b228:	dfc00815 	stw	ra,32(sp)
    b22c:	ddc00715 	stw	r23,28(sp)
    b230:	dd800615 	stw	r22,24(sp)
    b234:	dd000415 	stw	r20,16(sp)
    b238:	dcc00315 	stw	r19,12(sp)
    b23c:	dc800215 	stw	r18,8(sp)
    b240:	dc400115 	stw	r17,4(sp)
    b244:	dc000015 	stw	r16,0(sp)
    b248:	2540b804 	addi	r21,r4,736
    b24c:	a8002326 	beq	r21,zero,b2dc <_fwalk_reent+0xbc>
    b250:	2829883a 	mov	r20,r5
    b254:	202d883a 	mov	r22,r4
    b258:	002f883a 	mov	r23,zero
    b25c:	04c00044 	movi	r19,1
    b260:	04bfffc4 	movi	r18,-1
    b264:	ac400117 	ldw	r17,4(r21)
    b268:	ac000217 	ldw	r16,8(r21)
    b26c:	8c7fffc4 	addi	r17,r17,-1
    b270:	88000c16 	blt	r17,zero,b2a4 <_fwalk_reent+0x84>
    b274:	84000304 	addi	r16,r16,12
    b278:	80c0000b 	ldhu	r3,0(r16)
    b27c:	8c7fffc4 	addi	r17,r17,-1
    b280:	817ffd04 	addi	r5,r16,-12
    b284:	98c0052e 	bgeu	r19,r3,b29c <_fwalk_reent+0x7c>
    b288:	80c0008f 	ldh	r3,2(r16)
    b28c:	b009883a 	mov	r4,r22
    b290:	1c800226 	beq	r3,r18,b29c <_fwalk_reent+0x7c>
    b294:	a03ee83a 	callr	r20
    b298:	b8aeb03a 	or	r23,r23,r2
    b29c:	84001a04 	addi	r16,r16,104
    b2a0:	8cbff51e 	bne	r17,r18,b278 <__alt_mem_Flash_flash_data+0xf400b278>
    b2a4:	ad400017 	ldw	r21,0(r21)
    b2a8:	a83fee1e 	bne	r21,zero,b264 <__alt_mem_Flash_flash_data+0xf400b264>
    b2ac:	b805883a 	mov	r2,r23
    b2b0:	dfc00817 	ldw	ra,32(sp)
    b2b4:	ddc00717 	ldw	r23,28(sp)
    b2b8:	dd800617 	ldw	r22,24(sp)
    b2bc:	dd400517 	ldw	r21,20(sp)
    b2c0:	dd000417 	ldw	r20,16(sp)
    b2c4:	dcc00317 	ldw	r19,12(sp)
    b2c8:	dc800217 	ldw	r18,8(sp)
    b2cc:	dc400117 	ldw	r17,4(sp)
    b2d0:	dc000017 	ldw	r16,0(sp)
    b2d4:	dec00904 	addi	sp,sp,36
    b2d8:	f800283a 	ret
    b2dc:	002f883a 	mov	r23,zero
    b2e0:	003ff206 	br	b2ac <__alt_mem_Flash_flash_data+0xf400b2ac>

0000b2e4 <_setlocale_r>:
    b2e4:	30001b26 	beq	r6,zero,b354 <_setlocale_r+0x70>
    b2e8:	014000b4 	movhi	r5,2
    b2ec:	defffe04 	addi	sp,sp,-8
    b2f0:	2956be04 	addi	r5,r5,23288
    b2f4:	3009883a 	mov	r4,r6
    b2f8:	dc000015 	stw	r16,0(sp)
    b2fc:	dfc00115 	stw	ra,4(sp)
    b300:	3021883a 	mov	r16,r6
    b304:	000d9180 	call	d918 <strcmp>
    b308:	1000061e 	bne	r2,zero,b324 <_setlocale_r+0x40>
    b30c:	008000b4 	movhi	r2,2
    b310:	1096bd04 	addi	r2,r2,23284
    b314:	dfc00117 	ldw	ra,4(sp)
    b318:	dc000017 	ldw	r16,0(sp)
    b31c:	dec00204 	addi	sp,sp,8
    b320:	f800283a 	ret
    b324:	014000b4 	movhi	r5,2
    b328:	2956bd04 	addi	r5,r5,23284
    b32c:	8009883a 	mov	r4,r16
    b330:	000d9180 	call	d918 <strcmp>
    b334:	103ff526 	beq	r2,zero,b30c <__alt_mem_Flash_flash_data+0xf400b30c>
    b338:	014000b4 	movhi	r5,2
    b33c:	2956a004 	addi	r5,r5,23168
    b340:	8009883a 	mov	r4,r16
    b344:	000d9180 	call	d918 <strcmp>
    b348:	103ff026 	beq	r2,zero,b30c <__alt_mem_Flash_flash_data+0xf400b30c>
    b34c:	0005883a 	mov	r2,zero
    b350:	003ff006 	br	b314 <__alt_mem_Flash_flash_data+0xf400b314>
    b354:	008000b4 	movhi	r2,2
    b358:	1096bd04 	addi	r2,r2,23284
    b35c:	f800283a 	ret

0000b360 <__locale_charset>:
    b360:	008000b4 	movhi	r2,2
    b364:	10992604 	addi	r2,r2,25752
    b368:	f800283a 	ret

0000b36c <__locale_mb_cur_max>:
    b36c:	008000b4 	movhi	r2,2
    b370:	109fb404 	addi	r2,r2,32464
    b374:	10800017 	ldw	r2,0(r2)
    b378:	f800283a 	ret

0000b37c <__locale_msgcharset>:
    b37c:	008000b4 	movhi	r2,2
    b380:	10991e04 	addi	r2,r2,25720
    b384:	f800283a 	ret

0000b388 <__locale_cjk_lang>:
    b388:	0005883a 	mov	r2,zero
    b38c:	f800283a 	ret

0000b390 <_localeconv_r>:
    b390:	008000b4 	movhi	r2,2
    b394:	10992e04 	addi	r2,r2,25784
    b398:	f800283a 	ret

0000b39c <setlocale>:
    b39c:	00c000b4 	movhi	r3,2
    b3a0:	18dfb304 	addi	r3,r3,32460
    b3a4:	2005883a 	mov	r2,r4
    b3a8:	19000017 	ldw	r4,0(r3)
    b3ac:	280d883a 	mov	r6,r5
    b3b0:	100b883a 	mov	r5,r2
    b3b4:	000b2e41 	jmpi	b2e4 <_setlocale_r>

0000b3b8 <localeconv>:
    b3b8:	008000b4 	movhi	r2,2
    b3bc:	10992e04 	addi	r2,r2,25784
    b3c0:	f800283a 	ret

0000b3c4 <__smakebuf_r>:
    b3c4:	2880030b 	ldhu	r2,12(r5)
    b3c8:	10c0008c 	andi	r3,r2,2
    b3cc:	1800401e 	bne	r3,zero,b4d0 <__smakebuf_r+0x10c>
    b3d0:	deffec04 	addi	sp,sp,-80
    b3d4:	dc000f15 	stw	r16,60(sp)
    b3d8:	2821883a 	mov	r16,r5
    b3dc:	2940038f 	ldh	r5,14(r5)
    b3e0:	dc401015 	stw	r17,64(sp)
    b3e4:	dfc01315 	stw	ra,76(sp)
    b3e8:	dcc01215 	stw	r19,72(sp)
    b3ec:	dc801115 	stw	r18,68(sp)
    b3f0:	2023883a 	mov	r17,r4
    b3f4:	28001b16 	blt	r5,zero,b464 <__smakebuf_r+0xa0>
    b3f8:	d80d883a 	mov	r6,sp
    b3fc:	00106300 	call	10630 <_fstat_r>
    b400:	10001716 	blt	r2,zero,b460 <__smakebuf_r+0x9c>
    b404:	d8800117 	ldw	r2,4(sp)
    b408:	00e00014 	movui	r3,32768
    b40c:	10bc000c 	andi	r2,r2,61440
    b410:	10c03726 	beq	r2,r3,b4f0 <__smakebuf_r+0x12c>
    b414:	80c0030b 	ldhu	r3,12(r16)
    b418:	18c20014 	ori	r3,r3,2048
    b41c:	80c0030d 	sth	r3,12(r16)
    b420:	00c80004 	movi	r3,8192
    b424:	10c03c1e 	bne	r2,r3,b518 <__smakebuf_r+0x154>
    b428:	8140038f 	ldh	r5,14(r16)
    b42c:	8809883a 	mov	r4,r17
    b430:	00106880 	call	10688 <_isatty_r>
    b434:	10004e26 	beq	r2,zero,b570 <__smakebuf_r+0x1ac>
    b438:	8080030b 	ldhu	r2,12(r16)
    b43c:	04c00044 	movi	r19,1
    b440:	80c010c4 	addi	r3,r16,67
    b444:	14c4b03a 	or	r2,r2,r19
    b448:	8080030d 	sth	r2,12(r16)
    b44c:	80c00015 	stw	r3,0(r16)
    b450:	80c00415 	stw	r3,16(r16)
    b454:	84c00515 	stw	r19,20(r16)
    b458:	04810004 	movi	r18,1024
    b45c:	00000706 	br	b47c <__smakebuf_r+0xb8>
    b460:	8080030b 	ldhu	r2,12(r16)
    b464:	10c0200c 	andi	r3,r2,128
    b468:	18001f1e 	bne	r3,zero,b4e8 <__smakebuf_r+0x124>
    b46c:	04810004 	movi	r18,1024
    b470:	10820014 	ori	r2,r2,2048
    b474:	8080030d 	sth	r2,12(r16)
    b478:	0027883a 	mov	r19,zero
    b47c:	8809883a 	mov	r4,r17
    b480:	900b883a 	mov	r5,r18
    b484:	000b57c0 	call	b57c <_malloc_r>
    b488:	10002e26 	beq	r2,zero,b544 <__smakebuf_r+0x180>
    b48c:	80c0030b 	ldhu	r3,12(r16)
    b490:	01000074 	movhi	r4,1
    b494:	21293e04 	addi	r4,r4,-23304
    b498:	89000f15 	stw	r4,60(r17)
    b49c:	18c02014 	ori	r3,r3,128
    b4a0:	80c0030d 	sth	r3,12(r16)
    b4a4:	80800015 	stw	r2,0(r16)
    b4a8:	80800415 	stw	r2,16(r16)
    b4ac:	84800515 	stw	r18,20(r16)
    b4b0:	98001c1e 	bne	r19,zero,b524 <__smakebuf_r+0x160>
    b4b4:	dfc01317 	ldw	ra,76(sp)
    b4b8:	dcc01217 	ldw	r19,72(sp)
    b4bc:	dc801117 	ldw	r18,68(sp)
    b4c0:	dc401017 	ldw	r17,64(sp)
    b4c4:	dc000f17 	ldw	r16,60(sp)
    b4c8:	dec01404 	addi	sp,sp,80
    b4cc:	f800283a 	ret
    b4d0:	288010c4 	addi	r2,r5,67
    b4d4:	28800015 	stw	r2,0(r5)
    b4d8:	28800415 	stw	r2,16(r5)
    b4dc:	00800044 	movi	r2,1
    b4e0:	28800515 	stw	r2,20(r5)
    b4e4:	f800283a 	ret
    b4e8:	04801004 	movi	r18,64
    b4ec:	003fe006 	br	b470 <__alt_mem_Flash_flash_data+0xf400b470>
    b4f0:	81000a17 	ldw	r4,40(r16)
    b4f4:	00c00074 	movhi	r3,1
    b4f8:	18f62d04 	addi	r3,r3,-10060
    b4fc:	20ffc51e 	bne	r4,r3,b414 <__alt_mem_Flash_flash_data+0xf400b414>
    b500:	80c0030b 	ldhu	r3,12(r16)
    b504:	01010004 	movi	r4,1024
    b508:	81001315 	stw	r4,76(r16)
    b50c:	1906b03a 	or	r3,r3,r4
    b510:	80c0030d 	sth	r3,12(r16)
    b514:	003fc206 	br	b420 <__alt_mem_Flash_flash_data+0xf400b420>
    b518:	0027883a 	mov	r19,zero
    b51c:	04810004 	movi	r18,1024
    b520:	003fd606 	br	b47c <__alt_mem_Flash_flash_data+0xf400b47c>
    b524:	8140038f 	ldh	r5,14(r16)
    b528:	8809883a 	mov	r4,r17
    b52c:	00106880 	call	10688 <_isatty_r>
    b530:	103fe026 	beq	r2,zero,b4b4 <__alt_mem_Flash_flash_data+0xf400b4b4>
    b534:	8080030b 	ldhu	r2,12(r16)
    b538:	10800054 	ori	r2,r2,1
    b53c:	8080030d 	sth	r2,12(r16)
    b540:	003fdc06 	br	b4b4 <__alt_mem_Flash_flash_data+0xf400b4b4>
    b544:	8080030b 	ldhu	r2,12(r16)
    b548:	10c0800c 	andi	r3,r2,512
    b54c:	183fd91e 	bne	r3,zero,b4b4 <__alt_mem_Flash_flash_data+0xf400b4b4>
    b550:	10800094 	ori	r2,r2,2
    b554:	80c010c4 	addi	r3,r16,67
    b558:	8080030d 	sth	r2,12(r16)
    b55c:	00800044 	movi	r2,1
    b560:	80c00015 	stw	r3,0(r16)
    b564:	80c00415 	stw	r3,16(r16)
    b568:	80800515 	stw	r2,20(r16)
    b56c:	003fd106 	br	b4b4 <__alt_mem_Flash_flash_data+0xf400b4b4>
    b570:	04c00044 	movi	r19,1
    b574:	04810004 	movi	r18,1024
    b578:	003fc006 	br	b47c <__alt_mem_Flash_flash_data+0xf400b47c>

0000b57c <_malloc_r>:
    b57c:	defff504 	addi	sp,sp,-44
    b580:	dc800315 	stw	r18,12(sp)
    b584:	dfc00a15 	stw	ra,40(sp)
    b588:	df000915 	stw	fp,36(sp)
    b58c:	ddc00815 	stw	r23,32(sp)
    b590:	dd800715 	stw	r22,28(sp)
    b594:	dd400615 	stw	r21,24(sp)
    b598:	dd000515 	stw	r20,20(sp)
    b59c:	dcc00415 	stw	r19,16(sp)
    b5a0:	dc400215 	stw	r17,8(sp)
    b5a4:	dc000115 	stw	r16,4(sp)
    b5a8:	288002c4 	addi	r2,r5,11
    b5ac:	00c00584 	movi	r3,22
    b5b0:	2025883a 	mov	r18,r4
    b5b4:	18802a2e 	bgeu	r3,r2,b660 <_malloc_r+0xe4>
    b5b8:	047ffe04 	movi	r17,-8
    b5bc:	1462703a 	and	r17,r2,r17
    b5c0:	88009e16 	blt	r17,zero,b83c <_malloc_r+0x2c0>
    b5c4:	89409d36 	bltu	r17,r5,b83c <_malloc_r+0x2c0>
    b5c8:	00146d40 	call	146d4 <__malloc_lock>
    b5cc:	00807dc4 	movi	r2,503
    b5d0:	14402736 	bltu	r2,r17,b670 <_malloc_r+0xf4>
    b5d4:	8806d0fa 	srli	r3,r17,3
    b5d8:	04c000b4 	movhi	r19,2
    b5dc:	9cd93c04 	addi	r19,r19,25840
    b5e0:	18c5883a 	add	r2,r3,r3
    b5e4:	1085883a 	add	r2,r2,r2
    b5e8:	1085883a 	add	r2,r2,r2
    b5ec:	9885883a 	add	r2,r19,r2
    b5f0:	14000317 	ldw	r16,12(r2)
    b5f4:	80814a26 	beq	r16,r2,bb20 <_malloc_r+0x5a4>
    b5f8:	80c00117 	ldw	r3,4(r16)
    b5fc:	81000317 	ldw	r4,12(r16)
    b600:	00bfff04 	movi	r2,-4
    b604:	1884703a 	and	r2,r3,r2
    b608:	81400217 	ldw	r5,8(r16)
    b60c:	8085883a 	add	r2,r16,r2
    b610:	10c00117 	ldw	r3,4(r2)
    b614:	29000315 	stw	r4,12(r5)
    b618:	21400215 	stw	r5,8(r4)
    b61c:	18c00054 	ori	r3,r3,1
    b620:	10c00115 	stw	r3,4(r2)
    b624:	9009883a 	mov	r4,r18
    b628:	00147f40 	call	147f4 <__malloc_unlock>
    b62c:	80800204 	addi	r2,r16,8
    b630:	dfc00a17 	ldw	ra,40(sp)
    b634:	df000917 	ldw	fp,36(sp)
    b638:	ddc00817 	ldw	r23,32(sp)
    b63c:	dd800717 	ldw	r22,28(sp)
    b640:	dd400617 	ldw	r21,24(sp)
    b644:	dd000517 	ldw	r20,20(sp)
    b648:	dcc00417 	ldw	r19,16(sp)
    b64c:	dc800317 	ldw	r18,12(sp)
    b650:	dc400217 	ldw	r17,8(sp)
    b654:	dc000117 	ldw	r16,4(sp)
    b658:	dec00b04 	addi	sp,sp,44
    b65c:	f800283a 	ret
    b660:	04400404 	movi	r17,16
    b664:	89407536 	bltu	r17,r5,b83c <_malloc_r+0x2c0>
    b668:	00146d40 	call	146d4 <__malloc_lock>
    b66c:	003fd906 	br	b5d4 <__alt_mem_Flash_flash_data+0xf400b5d4>
    b670:	8806d27a 	srli	r3,r17,9
    b674:	18007526 	beq	r3,zero,b84c <_malloc_r+0x2d0>
    b678:	00800104 	movi	r2,4
    b67c:	10c0ef36 	bltu	r2,r3,ba3c <_malloc_r+0x4c0>
    b680:	8806d1ba 	srli	r3,r17,6
    b684:	19c00e04 	addi	r7,r3,56
    b688:	39cb883a 	add	r5,r7,r7
    b68c:	04c000b4 	movhi	r19,2
    b690:	294b883a 	add	r5,r5,r5
    b694:	9cd93c04 	addi	r19,r19,25840
    b698:	294b883a 	add	r5,r5,r5
    b69c:	994b883a 	add	r5,r19,r5
    b6a0:	2c000317 	ldw	r16,12(r5)
    b6a4:	2c000e26 	beq	r5,r16,b6e0 <_malloc_r+0x164>
    b6a8:	80800117 	ldw	r2,4(r16)
    b6ac:	01bfff04 	movi	r6,-4
    b6b0:	010003c4 	movi	r4,15
    b6b4:	1184703a 	and	r2,r2,r6
    b6b8:	1447c83a 	sub	r3,r2,r17
    b6bc:	20c00716 	blt	r4,r3,b6dc <_malloc_r+0x160>
    b6c0:	1800650e 	bge	r3,zero,b858 <_malloc_r+0x2dc>
    b6c4:	84000317 	ldw	r16,12(r16)
    b6c8:	2c000526 	beq	r5,r16,b6e0 <_malloc_r+0x164>
    b6cc:	80800117 	ldw	r2,4(r16)
    b6d0:	1184703a 	and	r2,r2,r6
    b6d4:	1447c83a 	sub	r3,r2,r17
    b6d8:	20fff90e 	bge	r4,r3,b6c0 <__alt_mem_Flash_flash_data+0xf400b6c0>
    b6dc:	39ffffc4 	addi	r7,r7,-1
    b6e0:	38c00044 	addi	r3,r7,1
    b6e4:	018000b4 	movhi	r6,2
    b6e8:	9c000417 	ldw	r16,16(r19)
    b6ec:	31993c04 	addi	r6,r6,25840
    b6f0:	32400204 	addi	r9,r6,8
    b6f4:	82410326 	beq	r16,r9,bb04 <_malloc_r+0x588>
    b6f8:	81000117 	ldw	r4,4(r16)
    b6fc:	00bfff04 	movi	r2,-4
    b700:	208e703a 	and	r7,r4,r2
    b704:	3c45c83a 	sub	r2,r7,r17
    b708:	010003c4 	movi	r4,15
    b70c:	2080ee16 	blt	r4,r2,bac8 <_malloc_r+0x54c>
    b710:	32400515 	stw	r9,20(r6)
    b714:	32400415 	stw	r9,16(r6)
    b718:	1000510e 	bge	r2,zero,b860 <_malloc_r+0x2e4>
    b71c:	00807fc4 	movi	r2,511
    b720:	11c0ce36 	bltu	r2,r7,ba5c <_malloc_r+0x4e0>
    b724:	3808d0fa 	srli	r4,r7,3
    b728:	01c00044 	movi	r7,1
    b72c:	30800117 	ldw	r2,4(r6)
    b730:	210b883a 	add	r5,r4,r4
    b734:	294b883a 	add	r5,r5,r5
    b738:	2009d0ba 	srai	r4,r4,2
    b73c:	294b883a 	add	r5,r5,r5
    b740:	298b883a 	add	r5,r5,r6
    b744:	2a000217 	ldw	r8,8(r5)
    b748:	3908983a 	sll	r4,r7,r4
    b74c:	81400315 	stw	r5,12(r16)
    b750:	82000215 	stw	r8,8(r16)
    b754:	2088b03a 	or	r4,r4,r2
    b758:	2c000215 	stw	r16,8(r5)
    b75c:	31000115 	stw	r4,4(r6)
    b760:	44000315 	stw	r16,12(r8)
    b764:	1805d0ba 	srai	r2,r3,2
    b768:	01400044 	movi	r5,1
    b76c:	288a983a 	sll	r5,r5,r2
    b770:	21404336 	bltu	r4,r5,b880 <_malloc_r+0x304>
    b774:	2144703a 	and	r2,r4,r5
    b778:	10000a1e 	bne	r2,zero,b7a4 <_malloc_r+0x228>
    b77c:	00bfff04 	movi	r2,-4
    b780:	294b883a 	add	r5,r5,r5
    b784:	1886703a 	and	r3,r3,r2
    b788:	2144703a 	and	r2,r4,r5
    b78c:	18c00104 	addi	r3,r3,4
    b790:	1000041e 	bne	r2,zero,b7a4 <_malloc_r+0x228>
    b794:	294b883a 	add	r5,r5,r5
    b798:	2144703a 	and	r2,r4,r5
    b79c:	18c00104 	addi	r3,r3,4
    b7a0:	103ffc26 	beq	r2,zero,b794 <__alt_mem_Flash_flash_data+0xf400b794>
    b7a4:	023fff04 	movi	r8,-4
    b7a8:	01c003c4 	movi	r7,15
    b7ac:	18c5883a 	add	r2,r3,r3
    b7b0:	1085883a 	add	r2,r2,r2
    b7b4:	1085883a 	add	r2,r2,r2
    b7b8:	9895883a 	add	r10,r19,r2
    b7bc:	52c00304 	addi	r11,r10,12
    b7c0:	1819883a 	mov	r12,r3
    b7c4:	5c000017 	ldw	r16,0(r11)
    b7c8:	59bffd04 	addi	r6,r11,-12
    b7cc:	8180041e 	bne	r16,r6,b7e0 <_malloc_r+0x264>
    b7d0:	0000ce06 	br	bb0c <_malloc_r+0x590>
    b7d4:	2000d70e 	bge	r4,zero,bb34 <_malloc_r+0x5b8>
    b7d8:	84000317 	ldw	r16,12(r16)
    b7dc:	8180cb26 	beq	r16,r6,bb0c <_malloc_r+0x590>
    b7e0:	80800117 	ldw	r2,4(r16)
    b7e4:	1204703a 	and	r2,r2,r8
    b7e8:	1449c83a 	sub	r4,r2,r17
    b7ec:	393ff90e 	bge	r7,r4,b7d4 <__alt_mem_Flash_flash_data+0xf400b7d4>
    b7f0:	80800317 	ldw	r2,12(r16)
    b7f4:	80c00217 	ldw	r3,8(r16)
    b7f8:	89400054 	ori	r5,r17,1
    b7fc:	81400115 	stw	r5,4(r16)
    b800:	18800315 	stw	r2,12(r3)
    b804:	10c00215 	stw	r3,8(r2)
    b808:	8463883a 	add	r17,r16,r17
    b80c:	9c400515 	stw	r17,20(r19)
    b810:	9c400415 	stw	r17,16(r19)
    b814:	20800054 	ori	r2,r4,1
    b818:	88800115 	stw	r2,4(r17)
    b81c:	8a400315 	stw	r9,12(r17)
    b820:	8a400215 	stw	r9,8(r17)
    b824:	8923883a 	add	r17,r17,r4
    b828:	89000015 	stw	r4,0(r17)
    b82c:	9009883a 	mov	r4,r18
    b830:	00147f40 	call	147f4 <__malloc_unlock>
    b834:	80800204 	addi	r2,r16,8
    b838:	003f7d06 	br	b630 <__alt_mem_Flash_flash_data+0xf400b630>
    b83c:	00800304 	movi	r2,12
    b840:	90800015 	stw	r2,0(r18)
    b844:	0005883a 	mov	r2,zero
    b848:	003f7906 	br	b630 <__alt_mem_Flash_flash_data+0xf400b630>
    b84c:	01401f84 	movi	r5,126
    b850:	01c00fc4 	movi	r7,63
    b854:	003f8d06 	br	b68c <__alt_mem_Flash_flash_data+0xf400b68c>
    b858:	81000317 	ldw	r4,12(r16)
    b85c:	003f6a06 	br	b608 <__alt_mem_Flash_flash_data+0xf400b608>
    b860:	81c5883a 	add	r2,r16,r7
    b864:	10c00117 	ldw	r3,4(r2)
    b868:	9009883a 	mov	r4,r18
    b86c:	18c00054 	ori	r3,r3,1
    b870:	10c00115 	stw	r3,4(r2)
    b874:	00147f40 	call	147f4 <__malloc_unlock>
    b878:	80800204 	addi	r2,r16,8
    b87c:	003f6c06 	br	b630 <__alt_mem_Flash_flash_data+0xf400b630>
    b880:	9c000217 	ldw	r16,8(r19)
    b884:	00bfff04 	movi	r2,-4
    b888:	85800117 	ldw	r22,4(r16)
    b88c:	b0ac703a 	and	r22,r22,r2
    b890:	b4400336 	bltu	r22,r17,b8a0 <_malloc_r+0x324>
    b894:	b445c83a 	sub	r2,r22,r17
    b898:	00c003c4 	movi	r3,15
    b89c:	18805d16 	blt	r3,r2,ba14 <_malloc_r+0x498>
    b8a0:	05c000b4 	movhi	r23,2
    b8a4:	008000f4 	movhi	r2,3
    b8a8:	bddfb504 	addi	r23,r23,32468
    b8ac:	10a7d604 	addi	r2,r2,-24744
    b8b0:	15400017 	ldw	r21,0(r2)
    b8b4:	b9000017 	ldw	r4,0(r23)
    b8b8:	00ffffc4 	movi	r3,-1
    b8bc:	858d883a 	add	r6,r16,r22
    b8c0:	8d6b883a 	add	r21,r17,r21
    b8c4:	20c0e426 	beq	r4,r3,bc58 <_malloc_r+0x6dc>
    b8c8:	ad4403c4 	addi	r21,r21,4111
    b8cc:	00fc0004 	movi	r3,-4096
    b8d0:	a8ea703a 	and	r21,r21,r3
    b8d4:	9009883a 	mov	r4,r18
    b8d8:	a80b883a 	mov	r5,r21
    b8dc:	d9800015 	stw	r6,0(sp)
    b8e0:	000d7880 	call	d788 <_sbrk_r>
    b8e4:	00ffffc4 	movi	r3,-1
    b8e8:	1029883a 	mov	r20,r2
    b8ec:	d9800017 	ldw	r6,0(sp)
    b8f0:	10c0a426 	beq	r2,r3,bb84 <_malloc_r+0x608>
    b8f4:	1180a236 	bltu	r2,r6,bb80 <_malloc_r+0x604>
    b8f8:	070000f4 	movhi	fp,3
    b8fc:	e7281e04 	addi	fp,fp,-24456
    b900:	e0c00017 	ldw	r3,0(fp)
    b904:	a8c7883a 	add	r3,r21,r3
    b908:	e0c00015 	stw	r3,0(fp)
    b90c:	3500da26 	beq	r6,r20,bc78 <_malloc_r+0x6fc>
    b910:	b9000017 	ldw	r4,0(r23)
    b914:	00bfffc4 	movi	r2,-1
    b918:	2080e426 	beq	r4,r2,bcac <_malloc_r+0x730>
    b91c:	a185c83a 	sub	r2,r20,r6
    b920:	1885883a 	add	r2,r3,r2
    b924:	e0800015 	stw	r2,0(fp)
    b928:	a0c001cc 	andi	r3,r20,7
    b92c:	1800b526 	beq	r3,zero,bc04 <_malloc_r+0x688>
    b930:	a0e9c83a 	sub	r20,r20,r3
    b934:	00840204 	movi	r2,4104
    b938:	a5000204 	addi	r20,r20,8
    b93c:	10c7c83a 	sub	r3,r2,r3
    b940:	a545883a 	add	r2,r20,r21
    b944:	1083ffcc 	andi	r2,r2,4095
    b948:	18abc83a 	sub	r21,r3,r2
    b94c:	9009883a 	mov	r4,r18
    b950:	a80b883a 	mov	r5,r21
    b954:	000d7880 	call	d788 <_sbrk_r>
    b958:	00ffffc4 	movi	r3,-1
    b95c:	10c0d026 	beq	r2,r3,bca0 <_malloc_r+0x724>
    b960:	1507c83a 	sub	r3,r2,r20
    b964:	a8c7883a 	add	r3,r21,r3
    b968:	18c00054 	ori	r3,r3,1
    b96c:	e0800017 	ldw	r2,0(fp)
    b970:	9d000215 	stw	r20,8(r19)
    b974:	a0c00115 	stw	r3,4(r20)
    b978:	a887883a 	add	r3,r21,r2
    b97c:	e0c00015 	stw	r3,0(fp)
    b980:	84c00e26 	beq	r16,r19,b9bc <_malloc_r+0x440>
    b984:	018003c4 	movi	r6,15
    b988:	3580a02e 	bgeu	r6,r22,bc0c <_malloc_r+0x690>
    b98c:	81400117 	ldw	r5,4(r16)
    b990:	013ffe04 	movi	r4,-8
    b994:	b0bffd04 	addi	r2,r22,-12
    b998:	1104703a 	and	r2,r2,r4
    b99c:	2900004c 	andi	r4,r5,1
    b9a0:	1108b03a 	or	r4,r2,r4
    b9a4:	81000115 	stw	r4,4(r16)
    b9a8:	01400144 	movi	r5,5
    b9ac:	8089883a 	add	r4,r16,r2
    b9b0:	21400115 	stw	r5,4(r4)
    b9b4:	21400215 	stw	r5,8(r4)
    b9b8:	3080c036 	bltu	r6,r2,bcbc <_malloc_r+0x740>
    b9bc:	008000f4 	movhi	r2,3
    b9c0:	10a7d504 	addi	r2,r2,-24748
    b9c4:	11000017 	ldw	r4,0(r2)
    b9c8:	20c0012e 	bgeu	r4,r3,b9d0 <_malloc_r+0x454>
    b9cc:	10c00015 	stw	r3,0(r2)
    b9d0:	008000f4 	movhi	r2,3
    b9d4:	10a7d404 	addi	r2,r2,-24752
    b9d8:	11000017 	ldw	r4,0(r2)
    b9dc:	9c000217 	ldw	r16,8(r19)
    b9e0:	20c0012e 	bgeu	r4,r3,b9e8 <_malloc_r+0x46c>
    b9e4:	10c00015 	stw	r3,0(r2)
    b9e8:	80c00117 	ldw	r3,4(r16)
    b9ec:	00bfff04 	movi	r2,-4
    b9f0:	1886703a 	and	r3,r3,r2
    b9f4:	1c45c83a 	sub	r2,r3,r17
    b9f8:	1c400236 	bltu	r3,r17,ba04 <_malloc_r+0x488>
    b9fc:	00c003c4 	movi	r3,15
    ba00:	18800416 	blt	r3,r2,ba14 <_malloc_r+0x498>
    ba04:	9009883a 	mov	r4,r18
    ba08:	00147f40 	call	147f4 <__malloc_unlock>
    ba0c:	0005883a 	mov	r2,zero
    ba10:	003f0706 	br	b630 <__alt_mem_Flash_flash_data+0xf400b630>
    ba14:	88c00054 	ori	r3,r17,1
    ba18:	80c00115 	stw	r3,4(r16)
    ba1c:	8463883a 	add	r17,r16,r17
    ba20:	10800054 	ori	r2,r2,1
    ba24:	9c400215 	stw	r17,8(r19)
    ba28:	88800115 	stw	r2,4(r17)
    ba2c:	9009883a 	mov	r4,r18
    ba30:	00147f40 	call	147f4 <__malloc_unlock>
    ba34:	80800204 	addi	r2,r16,8
    ba38:	003efd06 	br	b630 <__alt_mem_Flash_flash_data+0xf400b630>
    ba3c:	00800504 	movi	r2,20
    ba40:	10c0482e 	bgeu	r2,r3,bb64 <_malloc_r+0x5e8>
    ba44:	00801504 	movi	r2,84
    ba48:	10c06836 	bltu	r2,r3,bbec <_malloc_r+0x670>
    ba4c:	8806d33a 	srli	r3,r17,12
    ba50:	19c01b84 	addi	r7,r3,110
    ba54:	39cb883a 	add	r5,r7,r7
    ba58:	003f0c06 	br	b68c <__alt_mem_Flash_flash_data+0xf400b68c>
    ba5c:	3804d27a 	srli	r2,r7,9
    ba60:	01000104 	movi	r4,4
    ba64:	2080422e 	bgeu	r4,r2,bb70 <_malloc_r+0x5f4>
    ba68:	01000504 	movi	r4,20
    ba6c:	20807c36 	bltu	r4,r2,bc60 <_malloc_r+0x6e4>
    ba70:	110016c4 	addi	r4,r2,91
    ba74:	210b883a 	add	r5,r4,r4
    ba78:	294b883a 	add	r5,r5,r5
    ba7c:	294b883a 	add	r5,r5,r5
    ba80:	994b883a 	add	r5,r19,r5
    ba84:	28800217 	ldw	r2,8(r5)
    ba88:	020000b4 	movhi	r8,2
    ba8c:	42193c04 	addi	r8,r8,25840
    ba90:	11406326 	beq	r2,r5,bc20 <_malloc_r+0x6a4>
    ba94:	01bfff04 	movi	r6,-4
    ba98:	11000117 	ldw	r4,4(r2)
    ba9c:	2188703a 	and	r4,r4,r6
    baa0:	3900022e 	bgeu	r7,r4,baac <_malloc_r+0x530>
    baa4:	10800217 	ldw	r2,8(r2)
    baa8:	28bffb1e 	bne	r5,r2,ba98 <__alt_mem_Flash_flash_data+0xf400ba98>
    baac:	11800317 	ldw	r6,12(r2)
    bab0:	99000117 	ldw	r4,4(r19)
    bab4:	81800315 	stw	r6,12(r16)
    bab8:	80800215 	stw	r2,8(r16)
    babc:	34000215 	stw	r16,8(r6)
    bac0:	14000315 	stw	r16,12(r2)
    bac4:	003f2706 	br	b764 <__alt_mem_Flash_flash_data+0xf400b764>
    bac8:	88c00054 	ori	r3,r17,1
    bacc:	80c00115 	stw	r3,4(r16)
    bad0:	8463883a 	add	r17,r16,r17
    bad4:	34400515 	stw	r17,20(r6)
    bad8:	34400415 	stw	r17,16(r6)
    badc:	10c00054 	ori	r3,r2,1
    bae0:	8a400315 	stw	r9,12(r17)
    bae4:	8a400215 	stw	r9,8(r17)
    bae8:	88c00115 	stw	r3,4(r17)
    baec:	88a3883a 	add	r17,r17,r2
    baf0:	88800015 	stw	r2,0(r17)
    baf4:	9009883a 	mov	r4,r18
    baf8:	00147f40 	call	147f4 <__malloc_unlock>
    bafc:	80800204 	addi	r2,r16,8
    bb00:	003ecb06 	br	b630 <__alt_mem_Flash_flash_data+0xf400b630>
    bb04:	31000117 	ldw	r4,4(r6)
    bb08:	003f1606 	br	b764 <__alt_mem_Flash_flash_data+0xf400b764>
    bb0c:	63000044 	addi	r12,r12,1
    bb10:	608000cc 	andi	r2,r12,3
    bb14:	5ac00204 	addi	r11,r11,8
    bb18:	103f2a1e 	bne	r2,zero,b7c4 <__alt_mem_Flash_flash_data+0xf400b7c4>
    bb1c:	00002106 	br	bba4 <_malloc_r+0x628>
    bb20:	80800204 	addi	r2,r16,8
    bb24:	84000517 	ldw	r16,20(r16)
    bb28:	143eb31e 	bne	r2,r16,b5f8 <__alt_mem_Flash_flash_data+0xf400b5f8>
    bb2c:	18c00084 	addi	r3,r3,2
    bb30:	003eec06 	br	b6e4 <__alt_mem_Flash_flash_data+0xf400b6e4>
    bb34:	8085883a 	add	r2,r16,r2
    bb38:	10c00117 	ldw	r3,4(r2)
    bb3c:	81000317 	ldw	r4,12(r16)
    bb40:	81400217 	ldw	r5,8(r16)
    bb44:	18c00054 	ori	r3,r3,1
    bb48:	10c00115 	stw	r3,4(r2)
    bb4c:	29000315 	stw	r4,12(r5)
    bb50:	21400215 	stw	r5,8(r4)
    bb54:	9009883a 	mov	r4,r18
    bb58:	00147f40 	call	147f4 <__malloc_unlock>
    bb5c:	80800204 	addi	r2,r16,8
    bb60:	003eb306 	br	b630 <__alt_mem_Flash_flash_data+0xf400b630>
    bb64:	19c016c4 	addi	r7,r3,91
    bb68:	39cb883a 	add	r5,r7,r7
    bb6c:	003ec706 	br	b68c <__alt_mem_Flash_flash_data+0xf400b68c>
    bb70:	3804d1ba 	srli	r2,r7,6
    bb74:	11000e04 	addi	r4,r2,56
    bb78:	210b883a 	add	r5,r4,r4
    bb7c:	003fbe06 	br	ba78 <__alt_mem_Flash_flash_data+0xf400ba78>
    bb80:	84ff5d26 	beq	r16,r19,b8f8 <__alt_mem_Flash_flash_data+0xf400b8f8>
    bb84:	9c000217 	ldw	r16,8(r19)
    bb88:	00bfff04 	movi	r2,-4
    bb8c:	80c00117 	ldw	r3,4(r16)
    bb90:	1886703a 	and	r3,r3,r2
    bb94:	003f9706 	br	b9f4 <__alt_mem_Flash_flash_data+0xf400b9f4>
    bb98:	52800017 	ldw	r10,0(r10)
    bb9c:	18ffffc4 	addi	r3,r3,-1
    bba0:	50805c1e 	bne	r10,r2,bd14 <_malloc_r+0x798>
    bba4:	190000cc 	andi	r4,r3,3
    bba8:	50bffe04 	addi	r2,r10,-8
    bbac:	203ffa1e 	bne	r4,zero,bb98 <__alt_mem_Flash_flash_data+0xf400bb98>
    bbb0:	98800117 	ldw	r2,4(r19)
    bbb4:	0146303a 	nor	r3,zero,r5
    bbb8:	1884703a 	and	r2,r3,r2
    bbbc:	98800115 	stw	r2,4(r19)
    bbc0:	294b883a 	add	r5,r5,r5
    bbc4:	117f2e36 	bltu	r2,r5,b880 <__alt_mem_Flash_flash_data+0xf400b880>
    bbc8:	283f2d26 	beq	r5,zero,b880 <__alt_mem_Flash_flash_data+0xf400b880>
    bbcc:	1146703a 	and	r3,r2,r5
    bbd0:	1800521e 	bne	r3,zero,bd1c <_malloc_r+0x7a0>
    bbd4:	6007883a 	mov	r3,r12
    bbd8:	294b883a 	add	r5,r5,r5
    bbdc:	1148703a 	and	r4,r2,r5
    bbe0:	18c00104 	addi	r3,r3,4
    bbe4:	203ffc26 	beq	r4,zero,bbd8 <__alt_mem_Flash_flash_data+0xf400bbd8>
    bbe8:	003ef006 	br	b7ac <__alt_mem_Flash_flash_data+0xf400b7ac>
    bbec:	00805504 	movi	r2,340
    bbf0:	10c01336 	bltu	r2,r3,bc40 <_malloc_r+0x6c4>
    bbf4:	8806d3fa 	srli	r3,r17,15
    bbf8:	19c01dc4 	addi	r7,r3,119
    bbfc:	39cb883a 	add	r5,r7,r7
    bc00:	003ea206 	br	b68c <__alt_mem_Flash_flash_data+0xf400b68c>
    bc04:	00c40004 	movi	r3,4096
    bc08:	003f4d06 	br	b940 <__alt_mem_Flash_flash_data+0xf400b940>
    bc0c:	00800044 	movi	r2,1
    bc10:	a0800115 	stw	r2,4(r20)
    bc14:	a021883a 	mov	r16,r20
    bc18:	0007883a 	mov	r3,zero
    bc1c:	003f7506 	br	b9f4 <__alt_mem_Flash_flash_data+0xf400b9f4>
    bc20:	200bd0ba 	srai	r5,r4,2
    bc24:	01800044 	movi	r6,1
    bc28:	41000117 	ldw	r4,4(r8)
    bc2c:	314a983a 	sll	r5,r6,r5
    bc30:	100d883a 	mov	r6,r2
    bc34:	2908b03a 	or	r4,r5,r4
    bc38:	41000115 	stw	r4,4(r8)
    bc3c:	003f9d06 	br	bab4 <__alt_mem_Flash_flash_data+0xf400bab4>
    bc40:	00815504 	movi	r2,1364
    bc44:	10c01336 	bltu	r2,r3,bc94 <_malloc_r+0x718>
    bc48:	8806d4ba 	srli	r3,r17,18
    bc4c:	19c01f04 	addi	r7,r3,124
    bc50:	39cb883a 	add	r5,r7,r7
    bc54:	003e8d06 	br	b68c <__alt_mem_Flash_flash_data+0xf400b68c>
    bc58:	ad400404 	addi	r21,r21,16
    bc5c:	003f1d06 	br	b8d4 <__alt_mem_Flash_flash_data+0xf400b8d4>
    bc60:	01001504 	movi	r4,84
    bc64:	20801c36 	bltu	r4,r2,bcd8 <_malloc_r+0x75c>
    bc68:	3804d33a 	srli	r2,r7,12
    bc6c:	11001b84 	addi	r4,r2,110
    bc70:	210b883a 	add	r5,r4,r4
    bc74:	003f8006 	br	ba78 <__alt_mem_Flash_flash_data+0xf400ba78>
    bc78:	3083ffcc 	andi	r2,r6,4095
    bc7c:	103f241e 	bne	r2,zero,b910 <__alt_mem_Flash_flash_data+0xf400b910>
    bc80:	99000217 	ldw	r4,8(r19)
    bc84:	ad85883a 	add	r2,r21,r22
    bc88:	10800054 	ori	r2,r2,1
    bc8c:	20800115 	stw	r2,4(r4)
    bc90:	003f4a06 	br	b9bc <__alt_mem_Flash_flash_data+0xf400b9bc>
    bc94:	01403f04 	movi	r5,252
    bc98:	01c01f84 	movi	r7,126
    bc9c:	003e7b06 	br	b68c <__alt_mem_Flash_flash_data+0xf400b68c>
    bca0:	00c00044 	movi	r3,1
    bca4:	002b883a 	mov	r21,zero
    bca8:	003f3006 	br	b96c <__alt_mem_Flash_flash_data+0xf400b96c>
    bcac:	008000b4 	movhi	r2,2
    bcb0:	109fb504 	addi	r2,r2,32468
    bcb4:	15000015 	stw	r20,0(r2)
    bcb8:	003f1b06 	br	b928 <__alt_mem_Flash_flash_data+0xf400b928>
    bcbc:	9009883a 	mov	r4,r18
    bcc0:	81400204 	addi	r5,r16,8
    bcc4:	000a9ac0 	call	a9ac <_free_r>
    bcc8:	008000f4 	movhi	r2,3
    bccc:	10a81e04 	addi	r2,r2,-24456
    bcd0:	10c00017 	ldw	r3,0(r2)
    bcd4:	003f3906 	br	b9bc <__alt_mem_Flash_flash_data+0xf400b9bc>
    bcd8:	01005504 	movi	r4,340
    bcdc:	20800436 	bltu	r4,r2,bcf0 <_malloc_r+0x774>
    bce0:	3804d3fa 	srli	r2,r7,15
    bce4:	11001dc4 	addi	r4,r2,119
    bce8:	210b883a 	add	r5,r4,r4
    bcec:	003f6206 	br	ba78 <__alt_mem_Flash_flash_data+0xf400ba78>
    bcf0:	01015504 	movi	r4,1364
    bcf4:	20800436 	bltu	r4,r2,bd08 <_malloc_r+0x78c>
    bcf8:	3804d4ba 	srli	r2,r7,18
    bcfc:	11001f04 	addi	r4,r2,124
    bd00:	210b883a 	add	r5,r4,r4
    bd04:	003f5c06 	br	ba78 <__alt_mem_Flash_flash_data+0xf400ba78>
    bd08:	01403f04 	movi	r5,252
    bd0c:	01001f84 	movi	r4,126
    bd10:	003f5906 	br	ba78 <__alt_mem_Flash_flash_data+0xf400ba78>
    bd14:	98800117 	ldw	r2,4(r19)
    bd18:	003fa906 	br	bbc0 <__alt_mem_Flash_flash_data+0xf400bbc0>
    bd1c:	6007883a 	mov	r3,r12
    bd20:	003ea206 	br	b7ac <__alt_mem_Flash_flash_data+0xf400b7ac>

0000bd24 <memchr>:
    bd24:	208000cc 	andi	r2,r4,3
    bd28:	280f883a 	mov	r7,r5
    bd2c:	10003526 	beq	r2,zero,be04 <memchr+0xe0>
    bd30:	30bfffc4 	addi	r2,r6,-1
    bd34:	30001b26 	beq	r6,zero,bda4 <memchr+0x80>
    bd38:	21800003 	ldbu	r6,0(r4)
    bd3c:	28c03fcc 	andi	r3,r5,255
    bd40:	30c01a26 	beq	r6,r3,bdac <memchr+0x88>
    bd44:	180d883a 	mov	r6,r3
    bd48:	00000406 	br	bd5c <memchr+0x38>
    bd4c:	10001526 	beq	r2,zero,bda4 <memchr+0x80>
    bd50:	20c00003 	ldbu	r3,0(r4)
    bd54:	10bfffc4 	addi	r2,r2,-1
    bd58:	19801426 	beq	r3,r6,bdac <memchr+0x88>
    bd5c:	21000044 	addi	r4,r4,1
    bd60:	20c000cc 	andi	r3,r4,3
    bd64:	183ff91e 	bne	r3,zero,bd4c <__alt_mem_Flash_flash_data+0xf400bd4c>
    bd68:	024000c4 	movi	r9,3
    bd6c:	48801136 	bltu	r9,r2,bdb4 <memchr+0x90>
    bd70:	10000c26 	beq	r2,zero,bda4 <memchr+0x80>
    bd74:	20c00003 	ldbu	r3,0(r4)
    bd78:	29403fcc 	andi	r5,r5,255
    bd7c:	19400b26 	beq	r3,r5,bdac <memchr+0x88>
    bd80:	20c00044 	addi	r3,r4,1
    bd84:	2085883a 	add	r2,r4,r2
    bd88:	39803fcc 	andi	r6,r7,255
    bd8c:	00000306 	br	bd9c <memchr+0x78>
    bd90:	18c00044 	addi	r3,r3,1
    bd94:	197fffc3 	ldbu	r5,-1(r3)
    bd98:	29800426 	beq	r5,r6,bdac <memchr+0x88>
    bd9c:	1809883a 	mov	r4,r3
    bda0:	18bffb1e 	bne	r3,r2,bd90 <__alt_mem_Flash_flash_data+0xf400bd90>
    bda4:	0005883a 	mov	r2,zero
    bda8:	f800283a 	ret
    bdac:	2005883a 	mov	r2,r4
    bdb0:	f800283a 	ret
    bdb4:	28c03fcc 	andi	r3,r5,255
    bdb8:	1810923a 	slli	r8,r3,8
    bdbc:	02ffbff4 	movhi	r11,65279
    bdc0:	02a02074 	movhi	r10,32897
    bdc4:	40c6b03a 	or	r3,r8,r3
    bdc8:	1810943a 	slli	r8,r3,16
    bdcc:	5affbfc4 	addi	r11,r11,-257
    bdd0:	52a02004 	addi	r10,r10,-32640
    bdd4:	40d0b03a 	or	r8,r8,r3
    bdd8:	20c00017 	ldw	r3,0(r4)
    bddc:	40c6f03a 	xor	r3,r8,r3
    bde0:	1acd883a 	add	r6,r3,r11
    bde4:	00c6303a 	nor	r3,zero,r3
    bde8:	30c6703a 	and	r3,r6,r3
    bdec:	1a86703a 	and	r3,r3,r10
    bdf0:	183fdf1e 	bne	r3,zero,bd70 <__alt_mem_Flash_flash_data+0xf400bd70>
    bdf4:	10bfff04 	addi	r2,r2,-4
    bdf8:	21000104 	addi	r4,r4,4
    bdfc:	48bff636 	bltu	r9,r2,bdd8 <__alt_mem_Flash_flash_data+0xf400bdd8>
    be00:	003fdb06 	br	bd70 <__alt_mem_Flash_flash_data+0xf400bd70>
    be04:	3005883a 	mov	r2,r6
    be08:	003fd706 	br	bd68 <__alt_mem_Flash_flash_data+0xf400bd68>

0000be0c <memcpy>:
    be0c:	deffff04 	addi	sp,sp,-4
    be10:	dc000015 	stw	r16,0(sp)
    be14:	00c003c4 	movi	r3,15
    be18:	2005883a 	mov	r2,r4
    be1c:	1980432e 	bgeu	r3,r6,bf2c <memcpy+0x120>
    be20:	2146b03a 	or	r3,r4,r5
    be24:	18c000cc 	andi	r3,r3,3
    be28:	1800421e 	bne	r3,zero,bf34 <memcpy+0x128>
    be2c:	343ffc04 	addi	r16,r6,-16
    be30:	8020d13a 	srli	r16,r16,4
    be34:	28c00104 	addi	r3,r5,4
    be38:	23400104 	addi	r13,r4,4
    be3c:	801e913a 	slli	r15,r16,4
    be40:	2b000204 	addi	r12,r5,8
    be44:	22c00204 	addi	r11,r4,8
    be48:	7bc00504 	addi	r15,r15,20
    be4c:	2a800304 	addi	r10,r5,12
    be50:	22400304 	addi	r9,r4,12
    be54:	2bdf883a 	add	r15,r5,r15
    be58:	2811883a 	mov	r8,r5
    be5c:	200f883a 	mov	r7,r4
    be60:	41000017 	ldw	r4,0(r8)
    be64:	39c00404 	addi	r7,r7,16
    be68:	18c00404 	addi	r3,r3,16
    be6c:	393ffc15 	stw	r4,-16(r7)
    be70:	1bbffc17 	ldw	r14,-16(r3)
    be74:	6b400404 	addi	r13,r13,16
    be78:	5ac00404 	addi	r11,r11,16
    be7c:	6bbffc15 	stw	r14,-16(r13)
    be80:	63800017 	ldw	r14,0(r12)
    be84:	4a400404 	addi	r9,r9,16
    be88:	42000404 	addi	r8,r8,16
    be8c:	5bbffc15 	stw	r14,-16(r11)
    be90:	53800017 	ldw	r14,0(r10)
    be94:	63000404 	addi	r12,r12,16
    be98:	52800404 	addi	r10,r10,16
    be9c:	4bbffc15 	stw	r14,-16(r9)
    bea0:	1bffef1e 	bne	r3,r15,be60 <__alt_mem_Flash_flash_data+0xf400be60>
    bea4:	81c00044 	addi	r7,r16,1
    bea8:	380e913a 	slli	r7,r7,4
    beac:	310003cc 	andi	r4,r6,15
    beb0:	02c000c4 	movi	r11,3
    beb4:	11c7883a 	add	r3,r2,r7
    beb8:	29cb883a 	add	r5,r5,r7
    bebc:	59001f2e 	bgeu	r11,r4,bf3c <memcpy+0x130>
    bec0:	1813883a 	mov	r9,r3
    bec4:	2811883a 	mov	r8,r5
    bec8:	200f883a 	mov	r7,r4
    becc:	42800017 	ldw	r10,0(r8)
    bed0:	4a400104 	addi	r9,r9,4
    bed4:	39ffff04 	addi	r7,r7,-4
    bed8:	4abfff15 	stw	r10,-4(r9)
    bedc:	42000104 	addi	r8,r8,4
    bee0:	59fffa36 	bltu	r11,r7,becc <__alt_mem_Flash_flash_data+0xf400becc>
    bee4:	213fff04 	addi	r4,r4,-4
    bee8:	2008d0ba 	srli	r4,r4,2
    beec:	318000cc 	andi	r6,r6,3
    bef0:	21000044 	addi	r4,r4,1
    bef4:	2109883a 	add	r4,r4,r4
    bef8:	2109883a 	add	r4,r4,r4
    befc:	1907883a 	add	r3,r3,r4
    bf00:	290b883a 	add	r5,r5,r4
    bf04:	30000626 	beq	r6,zero,bf20 <memcpy+0x114>
    bf08:	198d883a 	add	r6,r3,r6
    bf0c:	29c00003 	ldbu	r7,0(r5)
    bf10:	18c00044 	addi	r3,r3,1
    bf14:	29400044 	addi	r5,r5,1
    bf18:	19ffffc5 	stb	r7,-1(r3)
    bf1c:	19bffb1e 	bne	r3,r6,bf0c <__alt_mem_Flash_flash_data+0xf400bf0c>
    bf20:	dc000017 	ldw	r16,0(sp)
    bf24:	dec00104 	addi	sp,sp,4
    bf28:	f800283a 	ret
    bf2c:	2007883a 	mov	r3,r4
    bf30:	003ff406 	br	bf04 <__alt_mem_Flash_flash_data+0xf400bf04>
    bf34:	2007883a 	mov	r3,r4
    bf38:	003ff306 	br	bf08 <__alt_mem_Flash_flash_data+0xf400bf08>
    bf3c:	200d883a 	mov	r6,r4
    bf40:	003ff006 	br	bf04 <__alt_mem_Flash_flash_data+0xf400bf04>

0000bf44 <memmove>:
    bf44:	2005883a 	mov	r2,r4
    bf48:	29000b2e 	bgeu	r5,r4,bf78 <memmove+0x34>
    bf4c:	298f883a 	add	r7,r5,r6
    bf50:	21c0092e 	bgeu	r4,r7,bf78 <memmove+0x34>
    bf54:	2187883a 	add	r3,r4,r6
    bf58:	198bc83a 	sub	r5,r3,r6
    bf5c:	30004b26 	beq	r6,zero,c08c <memmove+0x148>
    bf60:	39ffffc4 	addi	r7,r7,-1
    bf64:	39000003 	ldbu	r4,0(r7)
    bf68:	18ffffc4 	addi	r3,r3,-1
    bf6c:	19000005 	stb	r4,0(r3)
    bf70:	197ffb1e 	bne	r3,r5,bf60 <__alt_mem_Flash_flash_data+0xf400bf60>
    bf74:	f800283a 	ret
    bf78:	00c003c4 	movi	r3,15
    bf7c:	1980412e 	bgeu	r3,r6,c084 <memmove+0x140>
    bf80:	1146b03a 	or	r3,r2,r5
    bf84:	18c000cc 	andi	r3,r3,3
    bf88:	1800411e 	bne	r3,zero,c090 <memmove+0x14c>
    bf8c:	33fffc04 	addi	r15,r6,-16
    bf90:	781ed13a 	srli	r15,r15,4
    bf94:	28c00104 	addi	r3,r5,4
    bf98:	13400104 	addi	r13,r2,4
    bf9c:	781c913a 	slli	r14,r15,4
    bfa0:	2b000204 	addi	r12,r5,8
    bfa4:	12c00204 	addi	r11,r2,8
    bfa8:	73800504 	addi	r14,r14,20
    bfac:	2a800304 	addi	r10,r5,12
    bfb0:	12400304 	addi	r9,r2,12
    bfb4:	2b9d883a 	add	r14,r5,r14
    bfb8:	2811883a 	mov	r8,r5
    bfbc:	100f883a 	mov	r7,r2
    bfc0:	41000017 	ldw	r4,0(r8)
    bfc4:	39c00404 	addi	r7,r7,16
    bfc8:	18c00404 	addi	r3,r3,16
    bfcc:	393ffc15 	stw	r4,-16(r7)
    bfd0:	193ffc17 	ldw	r4,-16(r3)
    bfd4:	6b400404 	addi	r13,r13,16
    bfd8:	5ac00404 	addi	r11,r11,16
    bfdc:	693ffc15 	stw	r4,-16(r13)
    bfe0:	61000017 	ldw	r4,0(r12)
    bfe4:	4a400404 	addi	r9,r9,16
    bfe8:	42000404 	addi	r8,r8,16
    bfec:	593ffc15 	stw	r4,-16(r11)
    bff0:	51000017 	ldw	r4,0(r10)
    bff4:	63000404 	addi	r12,r12,16
    bff8:	52800404 	addi	r10,r10,16
    bffc:	493ffc15 	stw	r4,-16(r9)
    c000:	1bbfef1e 	bne	r3,r14,bfc0 <__alt_mem_Flash_flash_data+0xf400bfc0>
    c004:	79000044 	addi	r4,r15,1
    c008:	2008913a 	slli	r4,r4,4
    c00c:	328003cc 	andi	r10,r6,15
    c010:	02c000c4 	movi	r11,3
    c014:	1107883a 	add	r3,r2,r4
    c018:	290b883a 	add	r5,r5,r4
    c01c:	5a801e2e 	bgeu	r11,r10,c098 <memmove+0x154>
    c020:	1813883a 	mov	r9,r3
    c024:	2811883a 	mov	r8,r5
    c028:	500f883a 	mov	r7,r10
    c02c:	41000017 	ldw	r4,0(r8)
    c030:	4a400104 	addi	r9,r9,4
    c034:	39ffff04 	addi	r7,r7,-4
    c038:	493fff15 	stw	r4,-4(r9)
    c03c:	42000104 	addi	r8,r8,4
    c040:	59fffa36 	bltu	r11,r7,c02c <__alt_mem_Flash_flash_data+0xf400c02c>
    c044:	513fff04 	addi	r4,r10,-4
    c048:	2008d0ba 	srli	r4,r4,2
    c04c:	318000cc 	andi	r6,r6,3
    c050:	21000044 	addi	r4,r4,1
    c054:	2109883a 	add	r4,r4,r4
    c058:	2109883a 	add	r4,r4,r4
    c05c:	1907883a 	add	r3,r3,r4
    c060:	290b883a 	add	r5,r5,r4
    c064:	30000926 	beq	r6,zero,c08c <memmove+0x148>
    c068:	198d883a 	add	r6,r3,r6
    c06c:	29c00003 	ldbu	r7,0(r5)
    c070:	18c00044 	addi	r3,r3,1
    c074:	29400044 	addi	r5,r5,1
    c078:	19ffffc5 	stb	r7,-1(r3)
    c07c:	19bffb1e 	bne	r3,r6,c06c <__alt_mem_Flash_flash_data+0xf400c06c>
    c080:	f800283a 	ret
    c084:	1007883a 	mov	r3,r2
    c088:	003ff606 	br	c064 <__alt_mem_Flash_flash_data+0xf400c064>
    c08c:	f800283a 	ret
    c090:	1007883a 	mov	r3,r2
    c094:	003ff406 	br	c068 <__alt_mem_Flash_flash_data+0xf400c068>
    c098:	500d883a 	mov	r6,r10
    c09c:	003ff106 	br	c064 <__alt_mem_Flash_flash_data+0xf400c064>

0000c0a0 <_Balloc>:
    c0a0:	20801317 	ldw	r2,76(r4)
    c0a4:	defffc04 	addi	sp,sp,-16
    c0a8:	dc400115 	stw	r17,4(sp)
    c0ac:	dc000015 	stw	r16,0(sp)
    c0b0:	dfc00315 	stw	ra,12(sp)
    c0b4:	dc800215 	stw	r18,8(sp)
    c0b8:	2023883a 	mov	r17,r4
    c0bc:	2821883a 	mov	r16,r5
    c0c0:	10000f26 	beq	r2,zero,c100 <_Balloc+0x60>
    c0c4:	8407883a 	add	r3,r16,r16
    c0c8:	18c7883a 	add	r3,r3,r3
    c0cc:	10c7883a 	add	r3,r2,r3
    c0d0:	18800017 	ldw	r2,0(r3)
    c0d4:	10001126 	beq	r2,zero,c11c <_Balloc+0x7c>
    c0d8:	11000017 	ldw	r4,0(r2)
    c0dc:	19000015 	stw	r4,0(r3)
    c0e0:	10000415 	stw	zero,16(r2)
    c0e4:	10000315 	stw	zero,12(r2)
    c0e8:	dfc00317 	ldw	ra,12(sp)
    c0ec:	dc800217 	ldw	r18,8(sp)
    c0f0:	dc400117 	ldw	r17,4(sp)
    c0f4:	dc000017 	ldw	r16,0(sp)
    c0f8:	dec00404 	addi	sp,sp,16
    c0fc:	f800283a 	ret
    c100:	01400104 	movi	r5,4
    c104:	01800844 	movi	r6,33
    c108:	00102880 	call	10288 <_calloc_r>
    c10c:	88801315 	stw	r2,76(r17)
    c110:	103fec1e 	bne	r2,zero,c0c4 <__alt_mem_Flash_flash_data+0xf400c0c4>
    c114:	0005883a 	mov	r2,zero
    c118:	003ff306 	br	c0e8 <__alt_mem_Flash_flash_data+0xf400c0e8>
    c11c:	01400044 	movi	r5,1
    c120:	2c24983a 	sll	r18,r5,r16
    c124:	8809883a 	mov	r4,r17
    c128:	91800144 	addi	r6,r18,5
    c12c:	318d883a 	add	r6,r6,r6
    c130:	318d883a 	add	r6,r6,r6
    c134:	00102880 	call	10288 <_calloc_r>
    c138:	103ff626 	beq	r2,zero,c114 <__alt_mem_Flash_flash_data+0xf400c114>
    c13c:	14000115 	stw	r16,4(r2)
    c140:	14800215 	stw	r18,8(r2)
    c144:	003fe606 	br	c0e0 <__alt_mem_Flash_flash_data+0xf400c0e0>

0000c148 <_Bfree>:
    c148:	28000826 	beq	r5,zero,c16c <_Bfree+0x24>
    c14c:	28c00117 	ldw	r3,4(r5)
    c150:	20801317 	ldw	r2,76(r4)
    c154:	18c7883a 	add	r3,r3,r3
    c158:	18c7883a 	add	r3,r3,r3
    c15c:	10c5883a 	add	r2,r2,r3
    c160:	10c00017 	ldw	r3,0(r2)
    c164:	28c00015 	stw	r3,0(r5)
    c168:	11400015 	stw	r5,0(r2)
    c16c:	f800283a 	ret

0000c170 <__multadd>:
    c170:	defffa04 	addi	sp,sp,-24
    c174:	dc000115 	stw	r16,4(sp)
    c178:	2c000417 	ldw	r16,16(r5)
    c17c:	dc800315 	stw	r18,12(sp)
    c180:	dc400215 	stw	r17,8(sp)
    c184:	dfc00515 	stw	ra,20(sp)
    c188:	dcc00415 	stw	r19,16(sp)
    c18c:	2823883a 	mov	r17,r5
    c190:	2025883a 	mov	r18,r4
    c194:	2a400504 	addi	r9,r5,20
    c198:	0015883a 	mov	r10,zero
    c19c:	4a000017 	ldw	r8,0(r9)
    c1a0:	4a400104 	addi	r9,r9,4
    c1a4:	52800044 	addi	r10,r10,1
    c1a8:	40ffffcc 	andi	r3,r8,65535
    c1ac:	1987383a 	mul	r3,r3,r6
    c1b0:	4010d43a 	srli	r8,r8,16
    c1b4:	19cf883a 	add	r7,r3,r7
    c1b8:	4191383a 	mul	r8,r8,r6
    c1bc:	3816d43a 	srli	r11,r7,16
    c1c0:	38ffffcc 	andi	r3,r7,65535
    c1c4:	5a0f883a 	add	r7,r11,r8
    c1c8:	3810943a 	slli	r8,r7,16
    c1cc:	380ed43a 	srli	r7,r7,16
    c1d0:	40c7883a 	add	r3,r8,r3
    c1d4:	48ffff15 	stw	r3,-4(r9)
    c1d8:	543ff016 	blt	r10,r16,c19c <__alt_mem_Flash_flash_data+0xf400c19c>
    c1dc:	38000926 	beq	r7,zero,c204 <__multadd+0x94>
    c1e0:	88800217 	ldw	r2,8(r17)
    c1e4:	80800f0e 	bge	r16,r2,c224 <__multadd+0xb4>
    c1e8:	80800144 	addi	r2,r16,5
    c1ec:	1085883a 	add	r2,r2,r2
    c1f0:	1085883a 	add	r2,r2,r2
    c1f4:	8885883a 	add	r2,r17,r2
    c1f8:	11c00015 	stw	r7,0(r2)
    c1fc:	84000044 	addi	r16,r16,1
    c200:	8c000415 	stw	r16,16(r17)
    c204:	8805883a 	mov	r2,r17
    c208:	dfc00517 	ldw	ra,20(sp)
    c20c:	dcc00417 	ldw	r19,16(sp)
    c210:	dc800317 	ldw	r18,12(sp)
    c214:	dc400217 	ldw	r17,8(sp)
    c218:	dc000117 	ldw	r16,4(sp)
    c21c:	dec00604 	addi	sp,sp,24
    c220:	f800283a 	ret
    c224:	89400117 	ldw	r5,4(r17)
    c228:	9009883a 	mov	r4,r18
    c22c:	d9c00015 	stw	r7,0(sp)
    c230:	29400044 	addi	r5,r5,1
    c234:	000c0a00 	call	c0a0 <_Balloc>
    c238:	89800417 	ldw	r6,16(r17)
    c23c:	11000304 	addi	r4,r2,12
    c240:	89400304 	addi	r5,r17,12
    c244:	31800084 	addi	r6,r6,2
    c248:	318d883a 	add	r6,r6,r6
    c24c:	318d883a 	add	r6,r6,r6
    c250:	1027883a 	mov	r19,r2
    c254:	000be0c0 	call	be0c <memcpy>
    c258:	d9c00017 	ldw	r7,0(sp)
    c25c:	88000a26 	beq	r17,zero,c288 <__multadd+0x118>
    c260:	89000117 	ldw	r4,4(r17)
    c264:	90c01317 	ldw	r3,76(r18)
    c268:	2109883a 	add	r4,r4,r4
    c26c:	2109883a 	add	r4,r4,r4
    c270:	1907883a 	add	r3,r3,r4
    c274:	18800017 	ldw	r2,0(r3)
    c278:	88800015 	stw	r2,0(r17)
    c27c:	1c400015 	stw	r17,0(r3)
    c280:	9823883a 	mov	r17,r19
    c284:	003fd806 	br	c1e8 <__alt_mem_Flash_flash_data+0xf400c1e8>
    c288:	9823883a 	mov	r17,r19
    c28c:	003fd606 	br	c1e8 <__alt_mem_Flash_flash_data+0xf400c1e8>

0000c290 <__s2b>:
    c290:	defff904 	addi	sp,sp,-28
    c294:	dc400115 	stw	r17,4(sp)
    c298:	dc000015 	stw	r16,0(sp)
    c29c:	2023883a 	mov	r17,r4
    c2a0:	2821883a 	mov	r16,r5
    c2a4:	39000204 	addi	r4,r7,8
    c2a8:	01400244 	movi	r5,9
    c2ac:	dcc00315 	stw	r19,12(sp)
    c2b0:	dc800215 	stw	r18,8(sp)
    c2b4:	dfc00615 	stw	ra,24(sp)
    c2b8:	dd400515 	stw	r21,20(sp)
    c2bc:	dd000415 	stw	r20,16(sp)
    c2c0:	3825883a 	mov	r18,r7
    c2c4:	3027883a 	mov	r19,r6
    c2c8:	00115380 	call	11538 <__divsi3>
    c2cc:	00c00044 	movi	r3,1
    c2d0:	000b883a 	mov	r5,zero
    c2d4:	1880030e 	bge	r3,r2,c2e4 <__s2b+0x54>
    c2d8:	18c7883a 	add	r3,r3,r3
    c2dc:	29400044 	addi	r5,r5,1
    c2e0:	18bffd16 	blt	r3,r2,c2d8 <__alt_mem_Flash_flash_data+0xf400c2d8>
    c2e4:	8809883a 	mov	r4,r17
    c2e8:	000c0a00 	call	c0a0 <_Balloc>
    c2ec:	d8c00717 	ldw	r3,28(sp)
    c2f0:	10c00515 	stw	r3,20(r2)
    c2f4:	00c00044 	movi	r3,1
    c2f8:	10c00415 	stw	r3,16(r2)
    c2fc:	00c00244 	movi	r3,9
    c300:	1cc0210e 	bge	r3,r19,c388 <__s2b+0xf8>
    c304:	80eb883a 	add	r21,r16,r3
    c308:	a829883a 	mov	r20,r21
    c30c:	84e1883a 	add	r16,r16,r19
    c310:	a1c00007 	ldb	r7,0(r20)
    c314:	8809883a 	mov	r4,r17
    c318:	a5000044 	addi	r20,r20,1
    c31c:	100b883a 	mov	r5,r2
    c320:	01800284 	movi	r6,10
    c324:	39fff404 	addi	r7,r7,-48
    c328:	000c1700 	call	c170 <__multadd>
    c32c:	a43ff81e 	bne	r20,r16,c310 <__alt_mem_Flash_flash_data+0xf400c310>
    c330:	ace1883a 	add	r16,r21,r19
    c334:	843ffe04 	addi	r16,r16,-8
    c338:	9c800a0e 	bge	r19,r18,c364 <__s2b+0xd4>
    c33c:	94e5c83a 	sub	r18,r18,r19
    c340:	84a5883a 	add	r18,r16,r18
    c344:	81c00007 	ldb	r7,0(r16)
    c348:	8809883a 	mov	r4,r17
    c34c:	84000044 	addi	r16,r16,1
    c350:	100b883a 	mov	r5,r2
    c354:	01800284 	movi	r6,10
    c358:	39fff404 	addi	r7,r7,-48
    c35c:	000c1700 	call	c170 <__multadd>
    c360:	84bff81e 	bne	r16,r18,c344 <__alt_mem_Flash_flash_data+0xf400c344>
    c364:	dfc00617 	ldw	ra,24(sp)
    c368:	dd400517 	ldw	r21,20(sp)
    c36c:	dd000417 	ldw	r20,16(sp)
    c370:	dcc00317 	ldw	r19,12(sp)
    c374:	dc800217 	ldw	r18,8(sp)
    c378:	dc400117 	ldw	r17,4(sp)
    c37c:	dc000017 	ldw	r16,0(sp)
    c380:	dec00704 	addi	sp,sp,28
    c384:	f800283a 	ret
    c388:	84000284 	addi	r16,r16,10
    c38c:	1827883a 	mov	r19,r3
    c390:	003fe906 	br	c338 <__alt_mem_Flash_flash_data+0xf400c338>

0000c394 <__hi0bits>:
    c394:	20bfffec 	andhi	r2,r4,65535
    c398:	1000141e 	bne	r2,zero,c3ec <__hi0bits+0x58>
    c39c:	2008943a 	slli	r4,r4,16
    c3a0:	00800404 	movi	r2,16
    c3a4:	20ffc02c 	andhi	r3,r4,65280
    c3a8:	1800021e 	bne	r3,zero,c3b4 <__hi0bits+0x20>
    c3ac:	2008923a 	slli	r4,r4,8
    c3b0:	10800204 	addi	r2,r2,8
    c3b4:	20fc002c 	andhi	r3,r4,61440
    c3b8:	1800021e 	bne	r3,zero,c3c4 <__hi0bits+0x30>
    c3bc:	2008913a 	slli	r4,r4,4
    c3c0:	10800104 	addi	r2,r2,4
    c3c4:	20f0002c 	andhi	r3,r4,49152
    c3c8:	1800031e 	bne	r3,zero,c3d8 <__hi0bits+0x44>
    c3cc:	2109883a 	add	r4,r4,r4
    c3d0:	10800084 	addi	r2,r2,2
    c3d4:	2109883a 	add	r4,r4,r4
    c3d8:	20000316 	blt	r4,zero,c3e8 <__hi0bits+0x54>
    c3dc:	2110002c 	andhi	r4,r4,16384
    c3e0:	2000041e 	bne	r4,zero,c3f4 <__hi0bits+0x60>
    c3e4:	00800804 	movi	r2,32
    c3e8:	f800283a 	ret
    c3ec:	0005883a 	mov	r2,zero
    c3f0:	003fec06 	br	c3a4 <__alt_mem_Flash_flash_data+0xf400c3a4>
    c3f4:	10800044 	addi	r2,r2,1
    c3f8:	f800283a 	ret

0000c3fc <__lo0bits>:
    c3fc:	20c00017 	ldw	r3,0(r4)
    c400:	188001cc 	andi	r2,r3,7
    c404:	10000826 	beq	r2,zero,c428 <__lo0bits+0x2c>
    c408:	1880004c 	andi	r2,r3,1
    c40c:	1000211e 	bne	r2,zero,c494 <__lo0bits+0x98>
    c410:	1880008c 	andi	r2,r3,2
    c414:	1000211e 	bne	r2,zero,c49c <__lo0bits+0xa0>
    c418:	1806d0ba 	srli	r3,r3,2
    c41c:	00800084 	movi	r2,2
    c420:	20c00015 	stw	r3,0(r4)
    c424:	f800283a 	ret
    c428:	18bfffcc 	andi	r2,r3,65535
    c42c:	10001326 	beq	r2,zero,c47c <__lo0bits+0x80>
    c430:	0005883a 	mov	r2,zero
    c434:	19403fcc 	andi	r5,r3,255
    c438:	2800021e 	bne	r5,zero,c444 <__lo0bits+0x48>
    c43c:	1806d23a 	srli	r3,r3,8
    c440:	10800204 	addi	r2,r2,8
    c444:	194003cc 	andi	r5,r3,15
    c448:	2800021e 	bne	r5,zero,c454 <__lo0bits+0x58>
    c44c:	1806d13a 	srli	r3,r3,4
    c450:	10800104 	addi	r2,r2,4
    c454:	194000cc 	andi	r5,r3,3
    c458:	2800021e 	bne	r5,zero,c464 <__lo0bits+0x68>
    c45c:	1806d0ba 	srli	r3,r3,2
    c460:	10800084 	addi	r2,r2,2
    c464:	1940004c 	andi	r5,r3,1
    c468:	2800081e 	bne	r5,zero,c48c <__lo0bits+0x90>
    c46c:	1806d07a 	srli	r3,r3,1
    c470:	1800051e 	bne	r3,zero,c488 <__lo0bits+0x8c>
    c474:	00800804 	movi	r2,32
    c478:	f800283a 	ret
    c47c:	1806d43a 	srli	r3,r3,16
    c480:	00800404 	movi	r2,16
    c484:	003feb06 	br	c434 <__alt_mem_Flash_flash_data+0xf400c434>
    c488:	10800044 	addi	r2,r2,1
    c48c:	20c00015 	stw	r3,0(r4)
    c490:	f800283a 	ret
    c494:	0005883a 	mov	r2,zero
    c498:	f800283a 	ret
    c49c:	1806d07a 	srli	r3,r3,1
    c4a0:	00800044 	movi	r2,1
    c4a4:	20c00015 	stw	r3,0(r4)
    c4a8:	f800283a 	ret

0000c4ac <__i2b>:
    c4ac:	defffd04 	addi	sp,sp,-12
    c4b0:	dc000015 	stw	r16,0(sp)
    c4b4:	04000044 	movi	r16,1
    c4b8:	dc400115 	stw	r17,4(sp)
    c4bc:	2823883a 	mov	r17,r5
    c4c0:	800b883a 	mov	r5,r16
    c4c4:	dfc00215 	stw	ra,8(sp)
    c4c8:	000c0a00 	call	c0a0 <_Balloc>
    c4cc:	14400515 	stw	r17,20(r2)
    c4d0:	14000415 	stw	r16,16(r2)
    c4d4:	dfc00217 	ldw	ra,8(sp)
    c4d8:	dc400117 	ldw	r17,4(sp)
    c4dc:	dc000017 	ldw	r16,0(sp)
    c4e0:	dec00304 	addi	sp,sp,12
    c4e4:	f800283a 	ret

0000c4e8 <__multiply>:
    c4e8:	defffa04 	addi	sp,sp,-24
    c4ec:	dcc00315 	stw	r19,12(sp)
    c4f0:	dc800215 	stw	r18,8(sp)
    c4f4:	2cc00417 	ldw	r19,16(r5)
    c4f8:	34800417 	ldw	r18,16(r6)
    c4fc:	dd000415 	stw	r20,16(sp)
    c500:	dc400115 	stw	r17,4(sp)
    c504:	dfc00515 	stw	ra,20(sp)
    c508:	dc000015 	stw	r16,0(sp)
    c50c:	2829883a 	mov	r20,r5
    c510:	3023883a 	mov	r17,r6
    c514:	9c807016 	blt	r19,r18,c6d8 <__multiply+0x1f0>
    c518:	9005883a 	mov	r2,r18
    c51c:	9825883a 	mov	r18,r19
    c520:	1027883a 	mov	r19,r2
    c524:	a0800217 	ldw	r2,8(r20)
    c528:	94e1883a 	add	r16,r18,r19
    c52c:	a1400117 	ldw	r5,4(r20)
    c530:	1400010e 	bge	r2,r16,c538 <__multiply+0x50>
    c534:	29400044 	addi	r5,r5,1
    c538:	000c0a00 	call	c0a0 <_Balloc>
    c53c:	8417883a 	add	r11,r16,r16
    c540:	13000504 	addi	r12,r2,20
    c544:	5ad7883a 	add	r11,r11,r11
    c548:	62d7883a 	add	r11,r12,r11
    c54c:	6007883a 	mov	r3,r12
    c550:	62c0032e 	bgeu	r12,r11,c560 <__multiply+0x78>
    c554:	18000015 	stw	zero,0(r3)
    c558:	18c00104 	addi	r3,r3,4
    c55c:	1afffd36 	bltu	r3,r11,c554 <__alt_mem_Flash_flash_data+0xf400c554>
    c560:	9ce7883a 	add	r19,r19,r19
    c564:	94a5883a 	add	r18,r18,r18
    c568:	89800504 	addi	r6,r17,20
    c56c:	9ce7883a 	add	r19,r19,r19
    c570:	a3800504 	addi	r14,r20,20
    c574:	94a5883a 	add	r18,r18,r18
    c578:	34db883a 	add	r13,r6,r19
    c57c:	7495883a 	add	r10,r14,r18
    c580:	3340422e 	bgeu	r6,r13,c68c <__multiply+0x1a4>
    c584:	34400017 	ldw	r17,0(r6)
    c588:	8cbfffcc 	andi	r18,r17,65535
    c58c:	90001b26 	beq	r18,zero,c5fc <__multiply+0x114>
    c590:	6013883a 	mov	r9,r12
    c594:	7023883a 	mov	r17,r14
    c598:	0011883a 	mov	r8,zero
    c59c:	88c00017 	ldw	r3,0(r17)
    c5a0:	4bc00017 	ldw	r15,0(r9)
    c5a4:	8c400104 	addi	r17,r17,4
    c5a8:	19ffffcc 	andi	r7,r3,65535
    c5ac:	3c8f383a 	mul	r7,r7,r18
    c5b0:	1808d43a 	srli	r4,r3,16
    c5b4:	797fffcc 	andi	r5,r15,65535
    c5b8:	29cb883a 	add	r5,r5,r7
    c5bc:	2a0b883a 	add	r5,r5,r8
    c5c0:	2489383a 	mul	r4,r4,r18
    c5c4:	7806d43a 	srli	r3,r15,16
    c5c8:	2810d43a 	srli	r8,r5,16
    c5cc:	297fffcc 	andi	r5,r5,65535
    c5d0:	1907883a 	add	r3,r3,r4
    c5d4:	1a07883a 	add	r3,r3,r8
    c5d8:	1808943a 	slli	r4,r3,16
    c5dc:	480f883a 	mov	r7,r9
    c5e0:	1810d43a 	srli	r8,r3,16
    c5e4:	214ab03a 	or	r5,r4,r5
    c5e8:	49400015 	stw	r5,0(r9)
    c5ec:	4a400104 	addi	r9,r9,4
    c5f0:	8abfea36 	bltu	r17,r10,c59c <__alt_mem_Flash_flash_data+0xf400c59c>
    c5f4:	3a000115 	stw	r8,4(r7)
    c5f8:	34400017 	ldw	r17,0(r6)
    c5fc:	8822d43a 	srli	r17,r17,16
    c600:	88001f26 	beq	r17,zero,c680 <__multiply+0x198>
    c604:	60c00017 	ldw	r3,0(r12)
    c608:	7013883a 	mov	r9,r14
    c60c:	601f883a 	mov	r15,r12
    c610:	1811883a 	mov	r8,r3
    c614:	6027883a 	mov	r19,r12
    c618:	000f883a 	mov	r7,zero
    c61c:	00000106 	br	c624 <__multiply+0x13c>
    c620:	9027883a 	mov	r19,r18
    c624:	4940000b 	ldhu	r5,0(r9)
    c628:	4010d43a 	srli	r8,r8,16
    c62c:	193fffcc 	andi	r4,r3,65535
    c630:	2c4b383a 	mul	r5,r5,r17
    c634:	7bc00104 	addi	r15,r15,4
    c638:	4a400104 	addi	r9,r9,4
    c63c:	2a0b883a 	add	r5,r5,r8
    c640:	29cb883a 	add	r5,r5,r7
    c644:	2806943a 	slli	r3,r5,16
    c648:	9c800104 	addi	r18,r19,4
    c64c:	280ad43a 	srli	r5,r5,16
    c650:	1908b03a 	or	r4,r3,r4
    c654:	793fff15 	stw	r4,-4(r15)
    c658:	48ffff17 	ldw	r3,-4(r9)
    c65c:	92000017 	ldw	r8,0(r18)
    c660:	1806d43a 	srli	r3,r3,16
    c664:	413fffcc 	andi	r4,r8,65535
    c668:	1c47383a 	mul	r3,r3,r17
    c66c:	1907883a 	add	r3,r3,r4
    c670:	1947883a 	add	r3,r3,r5
    c674:	180ed43a 	srli	r7,r3,16
    c678:	4abfe936 	bltu	r9,r10,c620 <__alt_mem_Flash_flash_data+0xf400c620>
    c67c:	98c00115 	stw	r3,4(r19)
    c680:	31800104 	addi	r6,r6,4
    c684:	63000104 	addi	r12,r12,4
    c688:	337fbe36 	bltu	r6,r13,c584 <__alt_mem_Flash_flash_data+0xf400c584>
    c68c:	0400090e 	bge	zero,r16,c6b4 <__multiply+0x1cc>
    c690:	58ffff17 	ldw	r3,-4(r11)
    c694:	5affff04 	addi	r11,r11,-4
    c698:	18000326 	beq	r3,zero,c6a8 <__multiply+0x1c0>
    c69c:	00000506 	br	c6b4 <__multiply+0x1cc>
    c6a0:	58c00017 	ldw	r3,0(r11)
    c6a4:	1800031e 	bne	r3,zero,c6b4 <__multiply+0x1cc>
    c6a8:	843fffc4 	addi	r16,r16,-1
    c6ac:	5affff04 	addi	r11,r11,-4
    c6b0:	803ffb1e 	bne	r16,zero,c6a0 <__alt_mem_Flash_flash_data+0xf400c6a0>
    c6b4:	14000415 	stw	r16,16(r2)
    c6b8:	dfc00517 	ldw	ra,20(sp)
    c6bc:	dd000417 	ldw	r20,16(sp)
    c6c0:	dcc00317 	ldw	r19,12(sp)
    c6c4:	dc800217 	ldw	r18,8(sp)
    c6c8:	dc400117 	ldw	r17,4(sp)
    c6cc:	dc000017 	ldw	r16,0(sp)
    c6d0:	dec00604 	addi	sp,sp,24
    c6d4:	f800283a 	ret
    c6d8:	3029883a 	mov	r20,r6
    c6dc:	2823883a 	mov	r17,r5
    c6e0:	003f9006 	br	c524 <__alt_mem_Flash_flash_data+0xf400c524>

0000c6e4 <__pow5mult>:
    c6e4:	defffa04 	addi	sp,sp,-24
    c6e8:	dcc00315 	stw	r19,12(sp)
    c6ec:	dc800215 	stw	r18,8(sp)
    c6f0:	dc000015 	stw	r16,0(sp)
    c6f4:	dfc00515 	stw	ra,20(sp)
    c6f8:	dd000415 	stw	r20,16(sp)
    c6fc:	dc400115 	stw	r17,4(sp)
    c700:	308000cc 	andi	r2,r6,3
    c704:	3021883a 	mov	r16,r6
    c708:	2027883a 	mov	r19,r4
    c70c:	2825883a 	mov	r18,r5
    c710:	10002e1e 	bne	r2,zero,c7cc <__pow5mult+0xe8>
    c714:	8021d0ba 	srai	r16,r16,2
    c718:	80001a26 	beq	r16,zero,c784 <__pow5mult+0xa0>
    c71c:	9c401217 	ldw	r17,72(r19)
    c720:	8800061e 	bne	r17,zero,c73c <__pow5mult+0x58>
    c724:	00003406 	br	c7f8 <__pow5mult+0x114>
    c728:	8021d07a 	srai	r16,r16,1
    c72c:	80001526 	beq	r16,zero,c784 <__pow5mult+0xa0>
    c730:	88800017 	ldw	r2,0(r17)
    c734:	10001c26 	beq	r2,zero,c7a8 <__pow5mult+0xc4>
    c738:	1023883a 	mov	r17,r2
    c73c:	80c0004c 	andi	r3,r16,1
    c740:	183ff926 	beq	r3,zero,c728 <__alt_mem_Flash_flash_data+0xf400c728>
    c744:	900b883a 	mov	r5,r18
    c748:	880d883a 	mov	r6,r17
    c74c:	9809883a 	mov	r4,r19
    c750:	000c4e80 	call	c4e8 <__multiply>
    c754:	90001b26 	beq	r18,zero,c7c4 <__pow5mult+0xe0>
    c758:	91c00117 	ldw	r7,4(r18)
    c75c:	98c01317 	ldw	r3,76(r19)
    c760:	8021d07a 	srai	r16,r16,1
    c764:	39cf883a 	add	r7,r7,r7
    c768:	39cf883a 	add	r7,r7,r7
    c76c:	19c7883a 	add	r3,r3,r7
    c770:	19000017 	ldw	r4,0(r3)
    c774:	91000015 	stw	r4,0(r18)
    c778:	1c800015 	stw	r18,0(r3)
    c77c:	1025883a 	mov	r18,r2
    c780:	803feb1e 	bne	r16,zero,c730 <__alt_mem_Flash_flash_data+0xf400c730>
    c784:	9005883a 	mov	r2,r18
    c788:	dfc00517 	ldw	ra,20(sp)
    c78c:	dd000417 	ldw	r20,16(sp)
    c790:	dcc00317 	ldw	r19,12(sp)
    c794:	dc800217 	ldw	r18,8(sp)
    c798:	dc400117 	ldw	r17,4(sp)
    c79c:	dc000017 	ldw	r16,0(sp)
    c7a0:	dec00604 	addi	sp,sp,24
    c7a4:	f800283a 	ret
    c7a8:	9809883a 	mov	r4,r19
    c7ac:	880b883a 	mov	r5,r17
    c7b0:	880d883a 	mov	r6,r17
    c7b4:	000c4e80 	call	c4e8 <__multiply>
    c7b8:	88800015 	stw	r2,0(r17)
    c7bc:	10000015 	stw	zero,0(r2)
    c7c0:	003fdd06 	br	c738 <__alt_mem_Flash_flash_data+0xf400c738>
    c7c4:	1025883a 	mov	r18,r2
    c7c8:	003fd706 	br	c728 <__alt_mem_Flash_flash_data+0xf400c728>
    c7cc:	10bfffc4 	addi	r2,r2,-1
    c7d0:	1085883a 	add	r2,r2,r2
    c7d4:	00c000b4 	movhi	r3,2
    c7d8:	18d6c104 	addi	r3,r3,23300
    c7dc:	1085883a 	add	r2,r2,r2
    c7e0:	1885883a 	add	r2,r3,r2
    c7e4:	11800017 	ldw	r6,0(r2)
    c7e8:	000f883a 	mov	r7,zero
    c7ec:	000c1700 	call	c170 <__multadd>
    c7f0:	1025883a 	mov	r18,r2
    c7f4:	003fc706 	br	c714 <__alt_mem_Flash_flash_data+0xf400c714>
    c7f8:	05000044 	movi	r20,1
    c7fc:	9809883a 	mov	r4,r19
    c800:	a00b883a 	mov	r5,r20
    c804:	000c0a00 	call	c0a0 <_Balloc>
    c808:	1023883a 	mov	r17,r2
    c80c:	00809c44 	movi	r2,625
    c810:	88800515 	stw	r2,20(r17)
    c814:	8d000415 	stw	r20,16(r17)
    c818:	9c401215 	stw	r17,72(r19)
    c81c:	88000015 	stw	zero,0(r17)
    c820:	003fc606 	br	c73c <__alt_mem_Flash_flash_data+0xf400c73c>

0000c824 <__lshift>:
    c824:	defff904 	addi	sp,sp,-28
    c828:	dd000415 	stw	r20,16(sp)
    c82c:	dcc00315 	stw	r19,12(sp)
    c830:	3029d17a 	srai	r20,r6,5
    c834:	2cc00417 	ldw	r19,16(r5)
    c838:	28800217 	ldw	r2,8(r5)
    c83c:	dd400515 	stw	r21,20(sp)
    c840:	a4e7883a 	add	r19,r20,r19
    c844:	dc800215 	stw	r18,8(sp)
    c848:	dc400115 	stw	r17,4(sp)
    c84c:	dc000015 	stw	r16,0(sp)
    c850:	dfc00615 	stw	ra,24(sp)
    c854:	9c000044 	addi	r16,r19,1
    c858:	2823883a 	mov	r17,r5
    c85c:	302b883a 	mov	r21,r6
    c860:	2025883a 	mov	r18,r4
    c864:	29400117 	ldw	r5,4(r5)
    c868:	1400030e 	bge	r2,r16,c878 <__lshift+0x54>
    c86c:	1085883a 	add	r2,r2,r2
    c870:	29400044 	addi	r5,r5,1
    c874:	143ffd16 	blt	r2,r16,c86c <__alt_mem_Flash_flash_data+0xf400c86c>
    c878:	9009883a 	mov	r4,r18
    c87c:	000c0a00 	call	c0a0 <_Balloc>
    c880:	11c00504 	addi	r7,r2,20
    c884:	0500090e 	bge	zero,r20,c8ac <__lshift+0x88>
    c888:	3811883a 	mov	r8,r7
    c88c:	0007883a 	mov	r3,zero
    c890:	40000015 	stw	zero,0(r8)
    c894:	18c00044 	addi	r3,r3,1
    c898:	42000104 	addi	r8,r8,4
    c89c:	1d3ffc1e 	bne	r3,r20,c890 <__alt_mem_Flash_flash_data+0xf400c890>
    c8a0:	18c7883a 	add	r3,r3,r3
    c8a4:	18c7883a 	add	r3,r3,r3
    c8a8:	38cf883a 	add	r7,r7,r3
    c8ac:	89000417 	ldw	r4,16(r17)
    c8b0:	88c00504 	addi	r3,r17,20
    c8b4:	a98007cc 	andi	r6,r21,31
    c8b8:	2109883a 	add	r4,r4,r4
    c8bc:	2109883a 	add	r4,r4,r4
    c8c0:	1909883a 	add	r4,r3,r4
    c8c4:	30002326 	beq	r6,zero,c954 <__lshift+0x130>
    c8c8:	01400804 	movi	r5,32
    c8cc:	298bc83a 	sub	r5,r5,r6
    c8d0:	0013883a 	mov	r9,zero
    c8d4:	1a000017 	ldw	r8,0(r3)
    c8d8:	3815883a 	mov	r10,r7
    c8dc:	39c00104 	addi	r7,r7,4
    c8e0:	4190983a 	sll	r8,r8,r6
    c8e4:	18c00104 	addi	r3,r3,4
    c8e8:	4a10b03a 	or	r8,r9,r8
    c8ec:	3a3fff15 	stw	r8,-4(r7)
    c8f0:	1a3fff17 	ldw	r8,-4(r3)
    c8f4:	4152d83a 	srl	r9,r8,r5
    c8f8:	193ff636 	bltu	r3,r4,c8d4 <__alt_mem_Flash_flash_data+0xf400c8d4>
    c8fc:	52400115 	stw	r9,4(r10)
    c900:	48001a1e 	bne	r9,zero,c96c <__lshift+0x148>
    c904:	843fffc4 	addi	r16,r16,-1
    c908:	14000415 	stw	r16,16(r2)
    c90c:	88000826 	beq	r17,zero,c930 <__lshift+0x10c>
    c910:	89000117 	ldw	r4,4(r17)
    c914:	90c01317 	ldw	r3,76(r18)
    c918:	2109883a 	add	r4,r4,r4
    c91c:	2109883a 	add	r4,r4,r4
    c920:	1907883a 	add	r3,r3,r4
    c924:	19000017 	ldw	r4,0(r3)
    c928:	89000015 	stw	r4,0(r17)
    c92c:	1c400015 	stw	r17,0(r3)
    c930:	dfc00617 	ldw	ra,24(sp)
    c934:	dd400517 	ldw	r21,20(sp)
    c938:	dd000417 	ldw	r20,16(sp)
    c93c:	dcc00317 	ldw	r19,12(sp)
    c940:	dc800217 	ldw	r18,8(sp)
    c944:	dc400117 	ldw	r17,4(sp)
    c948:	dc000017 	ldw	r16,0(sp)
    c94c:	dec00704 	addi	sp,sp,28
    c950:	f800283a 	ret
    c954:	19400017 	ldw	r5,0(r3)
    c958:	39c00104 	addi	r7,r7,4
    c95c:	18c00104 	addi	r3,r3,4
    c960:	397fff15 	stw	r5,-4(r7)
    c964:	193ffb36 	bltu	r3,r4,c954 <__alt_mem_Flash_flash_data+0xf400c954>
    c968:	003fe606 	br	c904 <__alt_mem_Flash_flash_data+0xf400c904>
    c96c:	9c000084 	addi	r16,r19,2
    c970:	003fe406 	br	c904 <__alt_mem_Flash_flash_data+0xf400c904>

0000c974 <__mcmp>:
    c974:	20800417 	ldw	r2,16(r4)
    c978:	28c00417 	ldw	r3,16(r5)
    c97c:	10c5c83a 	sub	r2,r2,r3
    c980:	1000111e 	bne	r2,zero,c9c8 <__mcmp+0x54>
    c984:	18c7883a 	add	r3,r3,r3
    c988:	18c7883a 	add	r3,r3,r3
    c98c:	21000504 	addi	r4,r4,20
    c990:	29400504 	addi	r5,r5,20
    c994:	20c5883a 	add	r2,r4,r3
    c998:	28cb883a 	add	r5,r5,r3
    c99c:	00000106 	br	c9a4 <__mcmp+0x30>
    c9a0:	20800a2e 	bgeu	r4,r2,c9cc <__mcmp+0x58>
    c9a4:	10bfff04 	addi	r2,r2,-4
    c9a8:	297fff04 	addi	r5,r5,-4
    c9ac:	11800017 	ldw	r6,0(r2)
    c9b0:	28c00017 	ldw	r3,0(r5)
    c9b4:	30fffa26 	beq	r6,r3,c9a0 <__alt_mem_Flash_flash_data+0xf400c9a0>
    c9b8:	30c00236 	bltu	r6,r3,c9c4 <__mcmp+0x50>
    c9bc:	00800044 	movi	r2,1
    c9c0:	f800283a 	ret
    c9c4:	00bfffc4 	movi	r2,-1
    c9c8:	f800283a 	ret
    c9cc:	0005883a 	mov	r2,zero
    c9d0:	f800283a 	ret

0000c9d4 <__mdiff>:
    c9d4:	defffb04 	addi	sp,sp,-20
    c9d8:	dc000015 	stw	r16,0(sp)
    c9dc:	2821883a 	mov	r16,r5
    c9e0:	dcc00315 	stw	r19,12(sp)
    c9e4:	300b883a 	mov	r5,r6
    c9e8:	2027883a 	mov	r19,r4
    c9ec:	8009883a 	mov	r4,r16
    c9f0:	dc800215 	stw	r18,8(sp)
    c9f4:	dfc00415 	stw	ra,16(sp)
    c9f8:	dc400115 	stw	r17,4(sp)
    c9fc:	3025883a 	mov	r18,r6
    ca00:	000c9740 	call	c974 <__mcmp>
    ca04:	10005226 	beq	r2,zero,cb50 <__mdiff+0x17c>
    ca08:	10004c16 	blt	r2,zero,cb3c <__mdiff+0x168>
    ca0c:	0023883a 	mov	r17,zero
    ca10:	81400117 	ldw	r5,4(r16)
    ca14:	9809883a 	mov	r4,r19
    ca18:	000c0a00 	call	c0a0 <_Balloc>
    ca1c:	83400417 	ldw	r13,16(r16)
    ca20:	93800417 	ldw	r14,16(r18)
    ca24:	81000504 	addi	r4,r16,20
    ca28:	6b59883a 	add	r12,r13,r13
    ca2c:	739d883a 	add	r14,r14,r14
    ca30:	6319883a 	add	r12,r12,r12
    ca34:	91800504 	addi	r6,r18,20
    ca38:	739d883a 	add	r14,r14,r14
    ca3c:	14400315 	stw	r17,12(r2)
    ca40:	2319883a 	add	r12,r4,r12
    ca44:	339d883a 	add	r14,r6,r14
    ca48:	12400504 	addi	r9,r2,20
    ca4c:	0007883a 	mov	r3,zero
    ca50:	22000017 	ldw	r8,0(r4)
    ca54:	32800017 	ldw	r10,0(r6)
    ca58:	4ac00104 	addi	r11,r9,4
    ca5c:	41ffffcc 	andi	r7,r8,65535
    ca60:	38c7883a 	add	r3,r7,r3
    ca64:	51ffffcc 	andi	r7,r10,65535
    ca68:	19cfc83a 	sub	r7,r3,r7
    ca6c:	4010d43a 	srli	r8,r8,16
    ca70:	5014d43a 	srli	r10,r10,16
    ca74:	3807d43a 	srai	r3,r7,16
    ca78:	39ffffcc 	andi	r7,r7,65535
    ca7c:	4291c83a 	sub	r8,r8,r10
    ca80:	40c7883a 	add	r3,r8,r3
    ca84:	1810943a 	slli	r8,r3,16
    ca88:	31800104 	addi	r6,r6,4
    ca8c:	21000104 	addi	r4,r4,4
    ca90:	41ceb03a 	or	r7,r8,r7
    ca94:	49c00015 	stw	r7,0(r9)
    ca98:	1807d43a 	srai	r3,r3,16
    ca9c:	580b883a 	mov	r5,r11
    caa0:	5813883a 	mov	r9,r11
    caa4:	33bfea36 	bltu	r6,r14,ca50 <__alt_mem_Flash_flash_data+0xf400ca50>
    caa8:	2011883a 	mov	r8,r4
    caac:	2300152e 	bgeu	r4,r12,cb04 <__mdiff+0x130>
    cab0:	21400017 	ldw	r5,0(r4)
    cab4:	4a400104 	addi	r9,r9,4
    cab8:	21000104 	addi	r4,r4,4
    cabc:	29ffffcc 	andi	r7,r5,65535
    cac0:	38c7883a 	add	r3,r7,r3
    cac4:	280ad43a 	srli	r5,r5,16
    cac8:	180dd43a 	srai	r6,r3,16
    cacc:	19ffffcc 	andi	r7,r3,65535
    cad0:	3147883a 	add	r3,r6,r5
    cad4:	180a943a 	slli	r5,r3,16
    cad8:	1807d43a 	srai	r3,r3,16
    cadc:	29ceb03a 	or	r7,r5,r7
    cae0:	49ffff15 	stw	r7,-4(r9)
    cae4:	233ff236 	bltu	r4,r12,cab0 <__alt_mem_Flash_flash_data+0xf400cab0>
    cae8:	0206303a 	nor	r3,zero,r8
    caec:	1b07883a 	add	r3,r3,r12
    caf0:	1806d0ba 	srli	r3,r3,2
    caf4:	18c00044 	addi	r3,r3,1
    caf8:	18c7883a 	add	r3,r3,r3
    cafc:	18c7883a 	add	r3,r3,r3
    cb00:	58cb883a 	add	r5,r11,r3
    cb04:	28ffff04 	addi	r3,r5,-4
    cb08:	3800041e 	bne	r7,zero,cb1c <__mdiff+0x148>
    cb0c:	18ffff04 	addi	r3,r3,-4
    cb10:	19000017 	ldw	r4,0(r3)
    cb14:	6b7fffc4 	addi	r13,r13,-1
    cb18:	203ffc26 	beq	r4,zero,cb0c <__alt_mem_Flash_flash_data+0xf400cb0c>
    cb1c:	13400415 	stw	r13,16(r2)
    cb20:	dfc00417 	ldw	ra,16(sp)
    cb24:	dcc00317 	ldw	r19,12(sp)
    cb28:	dc800217 	ldw	r18,8(sp)
    cb2c:	dc400117 	ldw	r17,4(sp)
    cb30:	dc000017 	ldw	r16,0(sp)
    cb34:	dec00504 	addi	sp,sp,20
    cb38:	f800283a 	ret
    cb3c:	8005883a 	mov	r2,r16
    cb40:	04400044 	movi	r17,1
    cb44:	9021883a 	mov	r16,r18
    cb48:	1025883a 	mov	r18,r2
    cb4c:	003fb006 	br	ca10 <__alt_mem_Flash_flash_data+0xf400ca10>
    cb50:	9809883a 	mov	r4,r19
    cb54:	000b883a 	mov	r5,zero
    cb58:	000c0a00 	call	c0a0 <_Balloc>
    cb5c:	00c00044 	movi	r3,1
    cb60:	10c00415 	stw	r3,16(r2)
    cb64:	10000515 	stw	zero,20(r2)
    cb68:	003fed06 	br	cb20 <__alt_mem_Flash_flash_data+0xf400cb20>

0000cb6c <__ulp>:
    cb6c:	295ffc2c 	andhi	r5,r5,32752
    cb70:	00bf3034 	movhi	r2,64704
    cb74:	2887883a 	add	r3,r5,r2
    cb78:	00c0020e 	bge	zero,r3,cb84 <__ulp+0x18>
    cb7c:	0005883a 	mov	r2,zero
    cb80:	f800283a 	ret
    cb84:	00c7c83a 	sub	r3,zero,r3
    cb88:	180bd53a 	srai	r5,r3,20
    cb8c:	008004c4 	movi	r2,19
    cb90:	11400a0e 	bge	r2,r5,cbbc <__ulp+0x50>
    cb94:	00800c84 	movi	r2,50
    cb98:	0007883a 	mov	r3,zero
    cb9c:	11400516 	blt	r2,r5,cbb4 <__ulp+0x48>
    cba0:	00800cc4 	movi	r2,51
    cba4:	114bc83a 	sub	r5,r2,r5
    cba8:	00800044 	movi	r2,1
    cbac:	1144983a 	sll	r2,r2,r5
    cbb0:	f800283a 	ret
    cbb4:	00800044 	movi	r2,1
    cbb8:	f800283a 	ret
    cbbc:	00800234 	movhi	r2,8
    cbc0:	1147d83a 	sra	r3,r2,r5
    cbc4:	0005883a 	mov	r2,zero
    cbc8:	f800283a 	ret

0000cbcc <__b2d>:
    cbcc:	defffa04 	addi	sp,sp,-24
    cbd0:	dc000015 	stw	r16,0(sp)
    cbd4:	24000417 	ldw	r16,16(r4)
    cbd8:	dc400115 	stw	r17,4(sp)
    cbdc:	24400504 	addi	r17,r4,20
    cbe0:	8421883a 	add	r16,r16,r16
    cbe4:	8421883a 	add	r16,r16,r16
    cbe8:	8c21883a 	add	r16,r17,r16
    cbec:	dc800215 	stw	r18,8(sp)
    cbf0:	84bfff17 	ldw	r18,-4(r16)
    cbf4:	dd000415 	stw	r20,16(sp)
    cbf8:	dcc00315 	stw	r19,12(sp)
    cbfc:	9009883a 	mov	r4,r18
    cc00:	2829883a 	mov	r20,r5
    cc04:	dfc00515 	stw	ra,20(sp)
    cc08:	000c3940 	call	c394 <__hi0bits>
    cc0c:	00c00804 	movi	r3,32
    cc10:	1887c83a 	sub	r3,r3,r2
    cc14:	a0c00015 	stw	r3,0(r20)
    cc18:	00c00284 	movi	r3,10
    cc1c:	84ffff04 	addi	r19,r16,-4
    cc20:	18801216 	blt	r3,r2,cc6c <__b2d+0xa0>
    cc24:	014002c4 	movi	r5,11
    cc28:	2889c83a 	sub	r4,r5,r2
    cc2c:	9106d83a 	srl	r3,r18,r4
    cc30:	18cffc34 	orhi	r3,r3,16368
    cc34:	8cc0282e 	bgeu	r17,r19,ccd8 <__b2d+0x10c>
    cc38:	817ffe17 	ldw	r5,-8(r16)
    cc3c:	290ad83a 	srl	r5,r5,r4
    cc40:	10800544 	addi	r2,r2,21
    cc44:	9084983a 	sll	r2,r18,r2
    cc48:	2884b03a 	or	r2,r5,r2
    cc4c:	dfc00517 	ldw	ra,20(sp)
    cc50:	dd000417 	ldw	r20,16(sp)
    cc54:	dcc00317 	ldw	r19,12(sp)
    cc58:	dc800217 	ldw	r18,8(sp)
    cc5c:	dc400117 	ldw	r17,4(sp)
    cc60:	dc000017 	ldw	r16,0(sp)
    cc64:	dec00604 	addi	sp,sp,24
    cc68:	f800283a 	ret
    cc6c:	113ffd44 	addi	r4,r2,-11
    cc70:	8cc00f2e 	bgeu	r17,r19,ccb0 <__b2d+0xe4>
    cc74:	81bffe04 	addi	r6,r16,-8
    cc78:	817ffe17 	ldw	r5,-8(r16)
    cc7c:	20001326 	beq	r4,zero,cccc <__b2d+0x100>
    cc80:	00c00ac4 	movi	r3,43
    cc84:	1885c83a 	sub	r2,r3,r2
    cc88:	2886d83a 	srl	r3,r5,r2
    cc8c:	9124983a 	sll	r18,r18,r4
    cc90:	90e4b03a 	or	r18,r18,r3
    cc94:	90cffc34 	orhi	r3,r18,16368
    cc98:	8980112e 	bgeu	r17,r6,cce0 <__b2d+0x114>
    cc9c:	81bffd17 	ldw	r6,-12(r16)
    cca0:	308cd83a 	srl	r6,r6,r2
    cca4:	2904983a 	sll	r2,r5,r4
    cca8:	1184b03a 	or	r2,r2,r6
    ccac:	003fe706 	br	cc4c <__alt_mem_Flash_flash_data+0xf400cc4c>
    ccb0:	20000526 	beq	r4,zero,ccc8 <__b2d+0xfc>
    ccb4:	9124983a 	sll	r18,r18,r4
    ccb8:	000d883a 	mov	r6,zero
    ccbc:	000b883a 	mov	r5,zero
    ccc0:	90cffc34 	orhi	r3,r18,16368
    ccc4:	003ff706 	br	cca4 <__alt_mem_Flash_flash_data+0xf400cca4>
    ccc8:	000b883a 	mov	r5,zero
    cccc:	90cffc34 	orhi	r3,r18,16368
    ccd0:	2805883a 	mov	r2,r5
    ccd4:	003fdd06 	br	cc4c <__alt_mem_Flash_flash_data+0xf400cc4c>
    ccd8:	000b883a 	mov	r5,zero
    ccdc:	003fd806 	br	cc40 <__alt_mem_Flash_flash_data+0xf400cc40>
    cce0:	000d883a 	mov	r6,zero
    cce4:	003fef06 	br	cca4 <__alt_mem_Flash_flash_data+0xf400cca4>

0000cce8 <__d2b>:
    cce8:	defff704 	addi	sp,sp,-36
    ccec:	dc000215 	stw	r16,8(sp)
    ccf0:	3021883a 	mov	r16,r6
    ccf4:	dc400315 	stw	r17,12(sp)
    ccf8:	8022907a 	slli	r17,r16,1
    ccfc:	dd400715 	stw	r21,28(sp)
    cd00:	282b883a 	mov	r21,r5
    cd04:	01400044 	movi	r5,1
    cd08:	dd000615 	stw	r20,24(sp)
    cd0c:	dcc00515 	stw	r19,20(sp)
    cd10:	dc800415 	stw	r18,16(sp)
    cd14:	dfc00815 	stw	ra,32(sp)
    cd18:	3829883a 	mov	r20,r7
    cd1c:	dc800917 	ldw	r18,36(sp)
    cd20:	8822d57a 	srli	r17,r17,21
    cd24:	000c0a00 	call	c0a0 <_Balloc>
    cd28:	1027883a 	mov	r19,r2
    cd2c:	00800434 	movhi	r2,16
    cd30:	10bfffc4 	addi	r2,r2,-1
    cd34:	808c703a 	and	r6,r16,r2
    cd38:	88000126 	beq	r17,zero,cd40 <__d2b+0x58>
    cd3c:	31800434 	orhi	r6,r6,16
    cd40:	d9800015 	stw	r6,0(sp)
    cd44:	a8001f26 	beq	r21,zero,cdc4 <__d2b+0xdc>
    cd48:	d9000104 	addi	r4,sp,4
    cd4c:	dd400115 	stw	r21,4(sp)
    cd50:	000c3fc0 	call	c3fc <__lo0bits>
    cd54:	d8c00017 	ldw	r3,0(sp)
    cd58:	1000291e 	bne	r2,zero,ce00 <__d2b+0x118>
    cd5c:	d9000117 	ldw	r4,4(sp)
    cd60:	99000515 	stw	r4,20(r19)
    cd64:	1820c03a 	cmpne	r16,r3,zero
    cd68:	84000044 	addi	r16,r16,1
    cd6c:	98c00615 	stw	r3,24(r19)
    cd70:	9c000415 	stw	r16,16(r19)
    cd74:	88001b1e 	bne	r17,zero,cde4 <__d2b+0xfc>
    cd78:	800690ba 	slli	r3,r16,2
    cd7c:	10bef384 	addi	r2,r2,-1074
    cd80:	a0800015 	stw	r2,0(r20)
    cd84:	98c5883a 	add	r2,r19,r3
    cd88:	11000417 	ldw	r4,16(r2)
    cd8c:	8020917a 	slli	r16,r16,5
    cd90:	000c3940 	call	c394 <__hi0bits>
    cd94:	8085c83a 	sub	r2,r16,r2
    cd98:	90800015 	stw	r2,0(r18)
    cd9c:	9805883a 	mov	r2,r19
    cda0:	dfc00817 	ldw	ra,32(sp)
    cda4:	dd400717 	ldw	r21,28(sp)
    cda8:	dd000617 	ldw	r20,24(sp)
    cdac:	dcc00517 	ldw	r19,20(sp)
    cdb0:	dc800417 	ldw	r18,16(sp)
    cdb4:	dc400317 	ldw	r17,12(sp)
    cdb8:	dc000217 	ldw	r16,8(sp)
    cdbc:	dec00904 	addi	sp,sp,36
    cdc0:	f800283a 	ret
    cdc4:	d809883a 	mov	r4,sp
    cdc8:	000c3fc0 	call	c3fc <__lo0bits>
    cdcc:	d8c00017 	ldw	r3,0(sp)
    cdd0:	04000044 	movi	r16,1
    cdd4:	9c000415 	stw	r16,16(r19)
    cdd8:	98c00515 	stw	r3,20(r19)
    cddc:	10800804 	addi	r2,r2,32
    cde0:	883fe526 	beq	r17,zero,cd78 <__alt_mem_Flash_flash_data+0xf400cd78>
    cde4:	8c7ef344 	addi	r17,r17,-1075
    cde8:	88a3883a 	add	r17,r17,r2
    cdec:	00c00d44 	movi	r3,53
    cdf0:	a4400015 	stw	r17,0(r20)
    cdf4:	1885c83a 	sub	r2,r3,r2
    cdf8:	90800015 	stw	r2,0(r18)
    cdfc:	003fe706 	br	cd9c <__alt_mem_Flash_flash_data+0xf400cd9c>
    ce00:	01000804 	movi	r4,32
    ce04:	2089c83a 	sub	r4,r4,r2
    ce08:	1908983a 	sll	r4,r3,r4
    ce0c:	d9400117 	ldw	r5,4(sp)
    ce10:	1886d83a 	srl	r3,r3,r2
    ce14:	2148b03a 	or	r4,r4,r5
    ce18:	99000515 	stw	r4,20(r19)
    ce1c:	d8c00015 	stw	r3,0(sp)
    ce20:	003fd006 	br	cd64 <__alt_mem_Flash_flash_data+0xf400cd64>

0000ce24 <__ratio>:
    ce24:	defff904 	addi	sp,sp,-28
    ce28:	dc400315 	stw	r17,12(sp)
    ce2c:	2823883a 	mov	r17,r5
    ce30:	d9400104 	addi	r5,sp,4
    ce34:	dfc00615 	stw	ra,24(sp)
    ce38:	dcc00515 	stw	r19,20(sp)
    ce3c:	dc800415 	stw	r18,16(sp)
    ce40:	2027883a 	mov	r19,r4
    ce44:	dc000215 	stw	r16,8(sp)
    ce48:	000cbcc0 	call	cbcc <__b2d>
    ce4c:	8809883a 	mov	r4,r17
    ce50:	d80b883a 	mov	r5,sp
    ce54:	1025883a 	mov	r18,r2
    ce58:	1821883a 	mov	r16,r3
    ce5c:	000cbcc0 	call	cbcc <__b2d>
    ce60:	8a400417 	ldw	r9,16(r17)
    ce64:	9a000417 	ldw	r8,16(r19)
    ce68:	100d883a 	mov	r6,r2
    ce6c:	d8800017 	ldw	r2,0(sp)
    ce70:	4251c83a 	sub	r8,r8,r9
    ce74:	4012917a 	slli	r9,r8,5
    ce78:	da000117 	ldw	r8,4(sp)
    ce7c:	4091c83a 	sub	r8,r8,r2
    ce80:	4251883a 	add	r8,r8,r9
    ce84:	02000d0e 	bge	zero,r8,cebc <__ratio+0x98>
    ce88:	4010953a 	slli	r8,r8,20
    ce8c:	4421883a 	add	r16,r8,r16
    ce90:	9009883a 	mov	r4,r18
    ce94:	800b883a 	mov	r5,r16
    ce98:	180f883a 	mov	r7,r3
    ce9c:	0011e940 	call	11e94 <__divdf3>
    cea0:	dfc00617 	ldw	ra,24(sp)
    cea4:	dcc00517 	ldw	r19,20(sp)
    cea8:	dc800417 	ldw	r18,16(sp)
    ceac:	dc400317 	ldw	r17,12(sp)
    ceb0:	dc000217 	ldw	r16,8(sp)
    ceb4:	dec00704 	addi	sp,sp,28
    ceb8:	f800283a 	ret
    cebc:	4010953a 	slli	r8,r8,20
    cec0:	1a07c83a 	sub	r3,r3,r8
    cec4:	003ff206 	br	ce90 <__alt_mem_Flash_flash_data+0xf400ce90>

0000cec8 <_mprec_log10>:
    cec8:	defffe04 	addi	sp,sp,-8
    cecc:	dc000015 	stw	r16,0(sp)
    ced0:	dfc00115 	stw	ra,4(sp)
    ced4:	008005c4 	movi	r2,23
    ced8:	2021883a 	mov	r16,r4
    cedc:	11000d0e 	bge	r2,r4,cf14 <_mprec_log10+0x4c>
    cee0:	0005883a 	mov	r2,zero
    cee4:	00cffc34 	movhi	r3,16368
    cee8:	843fffc4 	addi	r16,r16,-1
    ceec:	1009883a 	mov	r4,r2
    cef0:	180b883a 	mov	r5,r3
    cef4:	000d883a 	mov	r6,zero
    cef8:	01d00934 	movhi	r7,16420
    cefc:	00129a40 	call	129a4 <__muldf3>
    cf00:	803ff91e 	bne	r16,zero,cee8 <__alt_mem_Flash_flash_data+0xf400cee8>
    cf04:	dfc00117 	ldw	ra,4(sp)
    cf08:	dc000017 	ldw	r16,0(sp)
    cf0c:	dec00204 	addi	sp,sp,8
    cf10:	f800283a 	ret
    cf14:	202090fa 	slli	r16,r4,3
    cf18:	008000b4 	movhi	r2,2
    cf1c:	1096d804 	addi	r2,r2,23392
    cf20:	1421883a 	add	r16,r2,r16
    cf24:	80800017 	ldw	r2,0(r16)
    cf28:	80c00117 	ldw	r3,4(r16)
    cf2c:	dfc00117 	ldw	ra,4(sp)
    cf30:	dc000017 	ldw	r16,0(sp)
    cf34:	dec00204 	addi	sp,sp,8
    cf38:	f800283a 	ret

0000cf3c <__copybits>:
    cf3c:	297fffc4 	addi	r5,r5,-1
    cf40:	280fd17a 	srai	r7,r5,5
    cf44:	30c00417 	ldw	r3,16(r6)
    cf48:	30800504 	addi	r2,r6,20
    cf4c:	39c00044 	addi	r7,r7,1
    cf50:	18c7883a 	add	r3,r3,r3
    cf54:	39cf883a 	add	r7,r7,r7
    cf58:	18c7883a 	add	r3,r3,r3
    cf5c:	39cf883a 	add	r7,r7,r7
    cf60:	10c7883a 	add	r3,r2,r3
    cf64:	21cf883a 	add	r7,r4,r7
    cf68:	10c00d2e 	bgeu	r2,r3,cfa0 <__copybits+0x64>
    cf6c:	200b883a 	mov	r5,r4
    cf70:	12000017 	ldw	r8,0(r2)
    cf74:	29400104 	addi	r5,r5,4
    cf78:	10800104 	addi	r2,r2,4
    cf7c:	2a3fff15 	stw	r8,-4(r5)
    cf80:	10fffb36 	bltu	r2,r3,cf70 <__alt_mem_Flash_flash_data+0xf400cf70>
    cf84:	1985c83a 	sub	r2,r3,r6
    cf88:	10bffac4 	addi	r2,r2,-21
    cf8c:	1004d0ba 	srli	r2,r2,2
    cf90:	10800044 	addi	r2,r2,1
    cf94:	1085883a 	add	r2,r2,r2
    cf98:	1085883a 	add	r2,r2,r2
    cf9c:	2089883a 	add	r4,r4,r2
    cfa0:	21c0032e 	bgeu	r4,r7,cfb0 <__copybits+0x74>
    cfa4:	20000015 	stw	zero,0(r4)
    cfa8:	21000104 	addi	r4,r4,4
    cfac:	21fffd36 	bltu	r4,r7,cfa4 <__alt_mem_Flash_flash_data+0xf400cfa4>
    cfb0:	f800283a 	ret

0000cfb4 <__any_on>:
    cfb4:	20c00417 	ldw	r3,16(r4)
    cfb8:	2805d17a 	srai	r2,r5,5
    cfbc:	21000504 	addi	r4,r4,20
    cfc0:	18800d0e 	bge	r3,r2,cff8 <__any_on+0x44>
    cfc4:	18c7883a 	add	r3,r3,r3
    cfc8:	18c7883a 	add	r3,r3,r3
    cfcc:	20c7883a 	add	r3,r4,r3
    cfd0:	20c0192e 	bgeu	r4,r3,d038 <__any_on+0x84>
    cfd4:	18bfff17 	ldw	r2,-4(r3)
    cfd8:	18ffff04 	addi	r3,r3,-4
    cfdc:	1000041e 	bne	r2,zero,cff0 <__any_on+0x3c>
    cfe0:	20c0142e 	bgeu	r4,r3,d034 <__any_on+0x80>
    cfe4:	18ffff04 	addi	r3,r3,-4
    cfe8:	19400017 	ldw	r5,0(r3)
    cfec:	283ffc26 	beq	r5,zero,cfe0 <__alt_mem_Flash_flash_data+0xf400cfe0>
    cff0:	00800044 	movi	r2,1
    cff4:	f800283a 	ret
    cff8:	10c00a0e 	bge	r2,r3,d024 <__any_on+0x70>
    cffc:	1085883a 	add	r2,r2,r2
    d000:	1085883a 	add	r2,r2,r2
    d004:	294007cc 	andi	r5,r5,31
    d008:	2087883a 	add	r3,r4,r2
    d00c:	283ff026 	beq	r5,zero,cfd0 <__alt_mem_Flash_flash_data+0xf400cfd0>
    d010:	19800017 	ldw	r6,0(r3)
    d014:	3144d83a 	srl	r2,r6,r5
    d018:	114a983a 	sll	r5,r2,r5
    d01c:	29bff41e 	bne	r5,r6,cff0 <__alt_mem_Flash_flash_data+0xf400cff0>
    d020:	003feb06 	br	cfd0 <__alt_mem_Flash_flash_data+0xf400cfd0>
    d024:	1085883a 	add	r2,r2,r2
    d028:	1085883a 	add	r2,r2,r2
    d02c:	2087883a 	add	r3,r4,r2
    d030:	003fe706 	br	cfd0 <__alt_mem_Flash_flash_data+0xf400cfd0>
    d034:	f800283a 	ret
    d038:	0005883a 	mov	r2,zero
    d03c:	f800283a 	ret

0000d040 <_putc_r>:
    d040:	defffc04 	addi	sp,sp,-16
    d044:	dc000215 	stw	r16,8(sp)
    d048:	dfc00315 	stw	ra,12(sp)
    d04c:	2021883a 	mov	r16,r4
    d050:	20000226 	beq	r4,zero,d05c <_putc_r+0x1c>
    d054:	20800e17 	ldw	r2,56(r4)
    d058:	10001b26 	beq	r2,zero,d0c8 <_putc_r+0x88>
    d05c:	30800217 	ldw	r2,8(r6)
    d060:	10bfffc4 	addi	r2,r2,-1
    d064:	30800215 	stw	r2,8(r6)
    d068:	10000a16 	blt	r2,zero,d094 <_putc_r+0x54>
    d06c:	30800017 	ldw	r2,0(r6)
    d070:	11400005 	stb	r5,0(r2)
    d074:	30800017 	ldw	r2,0(r6)
    d078:	10c00044 	addi	r3,r2,1
    d07c:	30c00015 	stw	r3,0(r6)
    d080:	10800003 	ldbu	r2,0(r2)
    d084:	dfc00317 	ldw	ra,12(sp)
    d088:	dc000217 	ldw	r16,8(sp)
    d08c:	dec00404 	addi	sp,sp,16
    d090:	f800283a 	ret
    d094:	30c00617 	ldw	r3,24(r6)
    d098:	10c00616 	blt	r2,r3,d0b4 <_putc_r+0x74>
    d09c:	30800017 	ldw	r2,0(r6)
    d0a0:	00c00284 	movi	r3,10
    d0a4:	11400005 	stb	r5,0(r2)
    d0a8:	30800017 	ldw	r2,0(r6)
    d0ac:	11400003 	ldbu	r5,0(r2)
    d0b0:	28fff11e 	bne	r5,r3,d078 <__alt_mem_Flash_flash_data+0xf400d078>
    d0b4:	8009883a 	mov	r4,r16
    d0b8:	dfc00317 	ldw	ra,12(sp)
    d0bc:	dc000217 	ldw	r16,8(sp)
    d0c0:	dec00404 	addi	sp,sp,16
    d0c4:	00100841 	jmpi	10084 <__swbuf_r>
    d0c8:	d9400015 	stw	r5,0(sp)
    d0cc:	d9800115 	stw	r6,4(sp)
    d0d0:	000a8380 	call	a838 <__sinit>
    d0d4:	d9800117 	ldw	r6,4(sp)
    d0d8:	d9400017 	ldw	r5,0(sp)
    d0dc:	003fdf06 	br	d05c <__alt_mem_Flash_flash_data+0xf400d05c>

0000d0e0 <putc>:
    d0e0:	008000b4 	movhi	r2,2
    d0e4:	defffc04 	addi	sp,sp,-16
    d0e8:	109fb304 	addi	r2,r2,32460
    d0ec:	dc400115 	stw	r17,4(sp)
    d0f0:	14400017 	ldw	r17,0(r2)
    d0f4:	dc800215 	stw	r18,8(sp)
    d0f8:	dc000015 	stw	r16,0(sp)
    d0fc:	dfc00315 	stw	ra,12(sp)
    d100:	2025883a 	mov	r18,r4
    d104:	2821883a 	mov	r16,r5
    d108:	88000226 	beq	r17,zero,d114 <putc+0x34>
    d10c:	88800e17 	ldw	r2,56(r17)
    d110:	10001a26 	beq	r2,zero,d17c <putc+0x9c>
    d114:	80800217 	ldw	r2,8(r16)
    d118:	10bfffc4 	addi	r2,r2,-1
    d11c:	80800215 	stw	r2,8(r16)
    d120:	10000c16 	blt	r2,zero,d154 <putc+0x74>
    d124:	80800017 	ldw	r2,0(r16)
    d128:	14800005 	stb	r18,0(r2)
    d12c:	80800017 	ldw	r2,0(r16)
    d130:	10c00044 	addi	r3,r2,1
    d134:	80c00015 	stw	r3,0(r16)
    d138:	10800003 	ldbu	r2,0(r2)
    d13c:	dfc00317 	ldw	ra,12(sp)
    d140:	dc800217 	ldw	r18,8(sp)
    d144:	dc400117 	ldw	r17,4(sp)
    d148:	dc000017 	ldw	r16,0(sp)
    d14c:	dec00404 	addi	sp,sp,16
    d150:	f800283a 	ret
    d154:	80c00617 	ldw	r3,24(r16)
    d158:	10c00b16 	blt	r2,r3,d188 <putc+0xa8>
    d15c:	80800017 	ldw	r2,0(r16)
    d160:	00c00284 	movi	r3,10
    d164:	14800005 	stb	r18,0(r2)
    d168:	80800017 	ldw	r2,0(r16)
    d16c:	11400003 	ldbu	r5,0(r2)
    d170:	28ffef1e 	bne	r5,r3,d130 <__alt_mem_Flash_flash_data+0xf400d130>
    d174:	8809883a 	mov	r4,r17
    d178:	00000506 	br	d190 <putc+0xb0>
    d17c:	8809883a 	mov	r4,r17
    d180:	000a8380 	call	a838 <__sinit>
    d184:	003fe306 	br	d114 <__alt_mem_Flash_flash_data+0xf400d114>
    d188:	8809883a 	mov	r4,r17
    d18c:	900b883a 	mov	r5,r18
    d190:	800d883a 	mov	r6,r16
    d194:	dfc00317 	ldw	ra,12(sp)
    d198:	dc800217 	ldw	r18,8(sp)
    d19c:	dc400117 	ldw	r17,4(sp)
    d1a0:	dc000017 	ldw	r16,0(sp)
    d1a4:	dec00404 	addi	sp,sp,16
    d1a8:	00100841 	jmpi	10084 <__swbuf_r>

0000d1ac <_realloc_r>:
    d1ac:	defff604 	addi	sp,sp,-40
    d1b0:	dd000415 	stw	r20,16(sp)
    d1b4:	dc400115 	stw	r17,4(sp)
    d1b8:	dfc00915 	stw	ra,36(sp)
    d1bc:	df000815 	stw	fp,32(sp)
    d1c0:	ddc00715 	stw	r23,28(sp)
    d1c4:	dd800615 	stw	r22,24(sp)
    d1c8:	dd400515 	stw	r21,20(sp)
    d1cc:	dcc00315 	stw	r19,12(sp)
    d1d0:	dc800215 	stw	r18,8(sp)
    d1d4:	dc000015 	stw	r16,0(sp)
    d1d8:	2829883a 	mov	r20,r5
    d1dc:	3023883a 	mov	r17,r6
    d1e0:	2800ad26 	beq	r5,zero,d498 <_realloc_r+0x2ec>
    d1e4:	2025883a 	mov	r18,r4
    d1e8:	00146d40 	call	146d4 <__malloc_lock>
    d1ec:	a0ffff17 	ldw	r3,-4(r20)
    d1f0:	043fff04 	movi	r16,-4
    d1f4:	890002c4 	addi	r4,r17,11
    d1f8:	01c00584 	movi	r7,22
    d1fc:	a57ffe04 	addi	r21,r20,-8
    d200:	1c20703a 	and	r16,r3,r16
    d204:	39001d2e 	bgeu	r7,r4,d27c <_realloc_r+0xd0>
    d208:	05bffe04 	movi	r22,-8
    d20c:	25ac703a 	and	r22,r4,r22
    d210:	b00f883a 	mov	r7,r22
    d214:	b0006516 	blt	r22,zero,d3ac <_realloc_r+0x200>
    d218:	b4406436 	bltu	r22,r17,d3ac <_realloc_r+0x200>
    d21c:	81c01a0e 	bge	r16,r7,d288 <_realloc_r+0xdc>
    d220:	070000b4 	movhi	fp,2
    d224:	e7193c04 	addi	fp,fp,25840
    d228:	e1400217 	ldw	r5,8(fp)
    d22c:	ac11883a 	add	r8,r21,r16
    d230:	2a006226 	beq	r5,r8,d3bc <_realloc_r+0x210>
    d234:	41800117 	ldw	r6,4(r8)
    d238:	027fff84 	movi	r9,-2
    d23c:	3252703a 	and	r9,r6,r9
    d240:	4253883a 	add	r9,r8,r9
    d244:	49000117 	ldw	r4,4(r9)
    d248:	2100004c 	andi	r4,r4,1
    d24c:	2000281e 	bne	r4,zero,d2f0 <_realloc_r+0x144>
    d250:	00bfff04 	movi	r2,-4
    d254:	3084703a 	and	r2,r6,r2
    d258:	1409883a 	add	r4,r2,r16
    d25c:	21c05e16 	blt	r4,r7,d3d8 <_realloc_r+0x22c>
    d260:	40800317 	ldw	r2,12(r8)
    d264:	41400217 	ldw	r5,8(r8)
    d268:	a023883a 	mov	r17,r20
    d26c:	2021883a 	mov	r16,r4
    d270:	28800315 	stw	r2,12(r5)
    d274:	11400215 	stw	r5,8(r2)
    d278:	00000406 	br	d28c <_realloc_r+0xe0>
    d27c:	01c00404 	movi	r7,16
    d280:	382d883a 	mov	r22,r7
    d284:	003fe406 	br	d218 <__alt_mem_Flash_flash_data+0xf400d218>
    d288:	a023883a 	mov	r17,r20
    d28c:	858fc83a 	sub	r7,r16,r22
    d290:	008003c4 	movi	r2,15
    d294:	18c0004c 	andi	r3,r3,1
    d298:	11c07236 	bltu	r2,r7,d464 <_realloc_r+0x2b8>
    d29c:	1c06b03a 	or	r3,r3,r16
    d2a0:	a8c00115 	stw	r3,4(r21)
    d2a4:	ac21883a 	add	r16,r21,r16
    d2a8:	80800117 	ldw	r2,4(r16)
    d2ac:	10800054 	ori	r2,r2,1
    d2b0:	80800115 	stw	r2,4(r16)
    d2b4:	9009883a 	mov	r4,r18
    d2b8:	00147f40 	call	147f4 <__malloc_unlock>
    d2bc:	8805883a 	mov	r2,r17
    d2c0:	dfc00917 	ldw	ra,36(sp)
    d2c4:	df000817 	ldw	fp,32(sp)
    d2c8:	ddc00717 	ldw	r23,28(sp)
    d2cc:	dd800617 	ldw	r22,24(sp)
    d2d0:	dd400517 	ldw	r21,20(sp)
    d2d4:	dd000417 	ldw	r20,16(sp)
    d2d8:	dcc00317 	ldw	r19,12(sp)
    d2dc:	dc800217 	ldw	r18,8(sp)
    d2e0:	dc400117 	ldw	r17,4(sp)
    d2e4:	dc000017 	ldw	r16,0(sp)
    d2e8:	dec00a04 	addi	sp,sp,40
    d2ec:	f800283a 	ret
    d2f0:	18c0004c 	andi	r3,r3,1
    d2f4:	1800081e 	bne	r3,zero,d318 <_realloc_r+0x16c>
    d2f8:	a4fffe17 	ldw	r19,-8(r20)
    d2fc:	00bfff04 	movi	r2,-4
    d300:	ace7c83a 	sub	r19,r21,r19
    d304:	98c00117 	ldw	r3,4(r19)
    d308:	1886703a 	and	r3,r3,r2
    d30c:	98000226 	beq	r19,zero,d318 <_realloc_r+0x16c>
    d310:	1c2f883a 	add	r23,r3,r16
    d314:	b9c06d0e 	bge	r23,r7,d4cc <_realloc_r+0x320>
    d318:	880b883a 	mov	r5,r17
    d31c:	9009883a 	mov	r4,r18
    d320:	000b57c0 	call	b57c <_malloc_r>
    d324:	1023883a 	mov	r17,r2
    d328:	1000ef26 	beq	r2,zero,d6e8 <_realloc_r+0x53c>
    d32c:	a0ffff17 	ldw	r3,-4(r20)
    d330:	113ffe04 	addi	r4,r2,-8
    d334:	00bfff84 	movi	r2,-2
    d338:	1884703a 	and	r2,r3,r2
    d33c:	a885883a 	add	r2,r21,r2
    d340:	2080bf26 	beq	r4,r2,d640 <_realloc_r+0x494>
    d344:	81bfff04 	addi	r6,r16,-4
    d348:	00800904 	movi	r2,36
    d34c:	11808936 	bltu	r2,r6,d574 <_realloc_r+0x3c8>
    d350:	00c004c4 	movi	r3,19
    d354:	19806c2e 	bgeu	r3,r6,d508 <_realloc_r+0x35c>
    d358:	a0c00017 	ldw	r3,0(r20)
    d35c:	88c00015 	stw	r3,0(r17)
    d360:	a0c00117 	ldw	r3,4(r20)
    d364:	88c00115 	stw	r3,4(r17)
    d368:	00c006c4 	movi	r3,27
    d36c:	1980ac36 	bltu	r3,r6,d620 <_realloc_r+0x474>
    d370:	88800204 	addi	r2,r17,8
    d374:	a0c00204 	addi	r3,r20,8
    d378:	19000017 	ldw	r4,0(r3)
    d37c:	11000015 	stw	r4,0(r2)
    d380:	19000117 	ldw	r4,4(r3)
    d384:	11000115 	stw	r4,4(r2)
    d388:	18c00217 	ldw	r3,8(r3)
    d38c:	10c00215 	stw	r3,8(r2)
    d390:	a00b883a 	mov	r5,r20
    d394:	9009883a 	mov	r4,r18
    d398:	000a9ac0 	call	a9ac <_free_r>
    d39c:	9009883a 	mov	r4,r18
    d3a0:	00147f40 	call	147f4 <__malloc_unlock>
    d3a4:	8805883a 	mov	r2,r17
    d3a8:	003fc506 	br	d2c0 <__alt_mem_Flash_flash_data+0xf400d2c0>
    d3ac:	00800304 	movi	r2,12
    d3b0:	90800015 	stw	r2,0(r18)
    d3b4:	0005883a 	mov	r2,zero
    d3b8:	003fc106 	br	d2c0 <__alt_mem_Flash_flash_data+0xf400d2c0>
    d3bc:	29800117 	ldw	r6,4(r5)
    d3c0:	00bfff04 	movi	r2,-4
    d3c4:	b1000404 	addi	r4,r22,16
    d3c8:	3084703a 	and	r2,r6,r2
    d3cc:	140d883a 	add	r6,r2,r16
    d3d0:	31005b0e 	bge	r6,r4,d540 <_realloc_r+0x394>
    d3d4:	2811883a 	mov	r8,r5
    d3d8:	18c0004c 	andi	r3,r3,1
    d3dc:	183fce1e 	bne	r3,zero,d318 <__alt_mem_Flash_flash_data+0xf400d318>
    d3e0:	a4fffe17 	ldw	r19,-8(r20)
    d3e4:	00ffff04 	movi	r3,-4
    d3e8:	ace7c83a 	sub	r19,r21,r19
    d3ec:	99000117 	ldw	r4,4(r19)
    d3f0:	20c6703a 	and	r3,r4,r3
    d3f4:	403fc526 	beq	r8,zero,d30c <__alt_mem_Flash_flash_data+0xf400d30c>
    d3f8:	1c2f883a 	add	r23,r3,r16
    d3fc:	b8af883a 	add	r23,r23,r2
    d400:	41406026 	beq	r8,r5,d584 <_realloc_r+0x3d8>
    d404:	b9ffc116 	blt	r23,r7,d30c <__alt_mem_Flash_flash_data+0xf400d30c>
    d408:	40c00217 	ldw	r3,8(r8)
    d40c:	40800317 	ldw	r2,12(r8)
    d410:	81bfff04 	addi	r6,r16,-4
    d414:	01000904 	movi	r4,36
    d418:	18800315 	stw	r2,12(r3)
    d41c:	10c00215 	stw	r3,8(r2)
    d420:	99400217 	ldw	r5,8(r19)
    d424:	98c00317 	ldw	r3,12(r19)
    d428:	9c400204 	addi	r17,r19,8
    d42c:	28c00315 	stw	r3,12(r5)
    d430:	19400215 	stw	r5,8(r3)
    d434:	21802d36 	bltu	r4,r6,d4ec <_realloc_r+0x340>
    d438:	008004c4 	movi	r2,19
    d43c:	1180352e 	bgeu	r2,r6,d514 <_realloc_r+0x368>
    d440:	a0800017 	ldw	r2,0(r20)
    d444:	98800215 	stw	r2,8(r19)
    d448:	a0800117 	ldw	r2,4(r20)
    d44c:	98800315 	stw	r2,12(r19)
    d450:	008006c4 	movi	r2,27
    d454:	11808036 	bltu	r2,r6,d658 <_realloc_r+0x4ac>
    d458:	98c00404 	addi	r3,r19,16
    d45c:	a5000204 	addi	r20,r20,8
    d460:	00002d06 	br	d518 <_realloc_r+0x36c>
    d464:	1d86b03a 	or	r3,r3,r22
    d468:	ad8b883a 	add	r5,r21,r22
    d46c:	a8c00115 	stw	r3,4(r21)
    d470:	38800054 	ori	r2,r7,1
    d474:	28800115 	stw	r2,4(r5)
    d478:	29cf883a 	add	r7,r5,r7
    d47c:	38800117 	ldw	r2,4(r7)
    d480:	9009883a 	mov	r4,r18
    d484:	29400204 	addi	r5,r5,8
    d488:	10800054 	ori	r2,r2,1
    d48c:	38800115 	stw	r2,4(r7)
    d490:	000a9ac0 	call	a9ac <_free_r>
    d494:	003f8706 	br	d2b4 <__alt_mem_Flash_flash_data+0xf400d2b4>
    d498:	300b883a 	mov	r5,r6
    d49c:	dfc00917 	ldw	ra,36(sp)
    d4a0:	df000817 	ldw	fp,32(sp)
    d4a4:	ddc00717 	ldw	r23,28(sp)
    d4a8:	dd800617 	ldw	r22,24(sp)
    d4ac:	dd400517 	ldw	r21,20(sp)
    d4b0:	dd000417 	ldw	r20,16(sp)
    d4b4:	dcc00317 	ldw	r19,12(sp)
    d4b8:	dc800217 	ldw	r18,8(sp)
    d4bc:	dc400117 	ldw	r17,4(sp)
    d4c0:	dc000017 	ldw	r16,0(sp)
    d4c4:	dec00a04 	addi	sp,sp,40
    d4c8:	000b57c1 	jmpi	b57c <_malloc_r>
    d4cc:	98800317 	ldw	r2,12(r19)
    d4d0:	98c00217 	ldw	r3,8(r19)
    d4d4:	81bfff04 	addi	r6,r16,-4
    d4d8:	01000904 	movi	r4,36
    d4dc:	18800315 	stw	r2,12(r3)
    d4e0:	10c00215 	stw	r3,8(r2)
    d4e4:	9c400204 	addi	r17,r19,8
    d4e8:	21bfd32e 	bgeu	r4,r6,d438 <__alt_mem_Flash_flash_data+0xf400d438>
    d4ec:	8809883a 	mov	r4,r17
    d4f0:	a00b883a 	mov	r5,r20
    d4f4:	000bf440 	call	bf44 <memmove>
    d4f8:	98c00117 	ldw	r3,4(r19)
    d4fc:	b821883a 	mov	r16,r23
    d500:	982b883a 	mov	r21,r19
    d504:	003f6106 	br	d28c <__alt_mem_Flash_flash_data+0xf400d28c>
    d508:	8805883a 	mov	r2,r17
    d50c:	a007883a 	mov	r3,r20
    d510:	003f9906 	br	d378 <__alt_mem_Flash_flash_data+0xf400d378>
    d514:	8807883a 	mov	r3,r17
    d518:	a0800017 	ldw	r2,0(r20)
    d51c:	b821883a 	mov	r16,r23
    d520:	982b883a 	mov	r21,r19
    d524:	18800015 	stw	r2,0(r3)
    d528:	a0800117 	ldw	r2,4(r20)
    d52c:	18800115 	stw	r2,4(r3)
    d530:	a0800217 	ldw	r2,8(r20)
    d534:	18800215 	stw	r2,8(r3)
    d538:	98c00117 	ldw	r3,4(r19)
    d53c:	003f5306 	br	d28c <__alt_mem_Flash_flash_data+0xf400d28c>
    d540:	adab883a 	add	r21,r21,r22
    d544:	3585c83a 	sub	r2,r6,r22
    d548:	e5400215 	stw	r21,8(fp)
    d54c:	10800054 	ori	r2,r2,1
    d550:	a8800115 	stw	r2,4(r21)
    d554:	a0bfff17 	ldw	r2,-4(r20)
    d558:	9009883a 	mov	r4,r18
    d55c:	1080004c 	andi	r2,r2,1
    d560:	b0acb03a 	or	r22,r22,r2
    d564:	a5bfff15 	stw	r22,-4(r20)
    d568:	00147f40 	call	147f4 <__malloc_unlock>
    d56c:	a005883a 	mov	r2,r20
    d570:	003f5306 	br	d2c0 <__alt_mem_Flash_flash_data+0xf400d2c0>
    d574:	8809883a 	mov	r4,r17
    d578:	a00b883a 	mov	r5,r20
    d57c:	000bf440 	call	bf44 <memmove>
    d580:	003f8306 	br	d390 <__alt_mem_Flash_flash_data+0xf400d390>
    d584:	b0800404 	addi	r2,r22,16
    d588:	b8bf6016 	blt	r23,r2,d30c <__alt_mem_Flash_flash_data+0xf400d30c>
    d58c:	98800317 	ldw	r2,12(r19)
    d590:	98c00217 	ldw	r3,8(r19)
    d594:	81bfff04 	addi	r6,r16,-4
    d598:	01000904 	movi	r4,36
    d59c:	18800315 	stw	r2,12(r3)
    d5a0:	10c00215 	stw	r3,8(r2)
    d5a4:	9c400204 	addi	r17,r19,8
    d5a8:	21804336 	bltu	r4,r6,d6b8 <_realloc_r+0x50c>
    d5ac:	008004c4 	movi	r2,19
    d5b0:	11803f2e 	bgeu	r2,r6,d6b0 <_realloc_r+0x504>
    d5b4:	a0800017 	ldw	r2,0(r20)
    d5b8:	98800215 	stw	r2,8(r19)
    d5bc:	a0800117 	ldw	r2,4(r20)
    d5c0:	98800315 	stw	r2,12(r19)
    d5c4:	008006c4 	movi	r2,27
    d5c8:	11803f36 	bltu	r2,r6,d6c8 <_realloc_r+0x51c>
    d5cc:	98800404 	addi	r2,r19,16
    d5d0:	a5000204 	addi	r20,r20,8
    d5d4:	a0c00017 	ldw	r3,0(r20)
    d5d8:	10c00015 	stw	r3,0(r2)
    d5dc:	a0c00117 	ldw	r3,4(r20)
    d5e0:	10c00115 	stw	r3,4(r2)
    d5e4:	a0c00217 	ldw	r3,8(r20)
    d5e8:	10c00215 	stw	r3,8(r2)
    d5ec:	9d87883a 	add	r3,r19,r22
    d5f0:	bd85c83a 	sub	r2,r23,r22
    d5f4:	e0c00215 	stw	r3,8(fp)
    d5f8:	10800054 	ori	r2,r2,1
    d5fc:	18800115 	stw	r2,4(r3)
    d600:	98800117 	ldw	r2,4(r19)
    d604:	9009883a 	mov	r4,r18
    d608:	1080004c 	andi	r2,r2,1
    d60c:	b0acb03a 	or	r22,r22,r2
    d610:	9d800115 	stw	r22,4(r19)
    d614:	00147f40 	call	147f4 <__malloc_unlock>
    d618:	8805883a 	mov	r2,r17
    d61c:	003f2806 	br	d2c0 <__alt_mem_Flash_flash_data+0xf400d2c0>
    d620:	a0c00217 	ldw	r3,8(r20)
    d624:	88c00215 	stw	r3,8(r17)
    d628:	a0c00317 	ldw	r3,12(r20)
    d62c:	88c00315 	stw	r3,12(r17)
    d630:	30801126 	beq	r6,r2,d678 <_realloc_r+0x4cc>
    d634:	88800404 	addi	r2,r17,16
    d638:	a0c00404 	addi	r3,r20,16
    d63c:	003f4e06 	br	d378 <__alt_mem_Flash_flash_data+0xf400d378>
    d640:	893fff17 	ldw	r4,-4(r17)
    d644:	00bfff04 	movi	r2,-4
    d648:	a023883a 	mov	r17,r20
    d64c:	2084703a 	and	r2,r4,r2
    d650:	80a1883a 	add	r16,r16,r2
    d654:	003f0d06 	br	d28c <__alt_mem_Flash_flash_data+0xf400d28c>
    d658:	a0800217 	ldw	r2,8(r20)
    d65c:	98800415 	stw	r2,16(r19)
    d660:	a0800317 	ldw	r2,12(r20)
    d664:	98800515 	stw	r2,20(r19)
    d668:	31000a26 	beq	r6,r4,d694 <_realloc_r+0x4e8>
    d66c:	98c00604 	addi	r3,r19,24
    d670:	a5000404 	addi	r20,r20,16
    d674:	003fa806 	br	d518 <__alt_mem_Flash_flash_data+0xf400d518>
    d678:	a1000417 	ldw	r4,16(r20)
    d67c:	88800604 	addi	r2,r17,24
    d680:	a0c00604 	addi	r3,r20,24
    d684:	89000415 	stw	r4,16(r17)
    d688:	a1000517 	ldw	r4,20(r20)
    d68c:	89000515 	stw	r4,20(r17)
    d690:	003f3906 	br	d378 <__alt_mem_Flash_flash_data+0xf400d378>
    d694:	a0800417 	ldw	r2,16(r20)
    d698:	a5000604 	addi	r20,r20,24
    d69c:	98c00804 	addi	r3,r19,32
    d6a0:	98800615 	stw	r2,24(r19)
    d6a4:	a0bfff17 	ldw	r2,-4(r20)
    d6a8:	98800715 	stw	r2,28(r19)
    d6ac:	003f9a06 	br	d518 <__alt_mem_Flash_flash_data+0xf400d518>
    d6b0:	8805883a 	mov	r2,r17
    d6b4:	003fc706 	br	d5d4 <__alt_mem_Flash_flash_data+0xf400d5d4>
    d6b8:	8809883a 	mov	r4,r17
    d6bc:	a00b883a 	mov	r5,r20
    d6c0:	000bf440 	call	bf44 <memmove>
    d6c4:	003fc906 	br	d5ec <__alt_mem_Flash_flash_data+0xf400d5ec>
    d6c8:	a0800217 	ldw	r2,8(r20)
    d6cc:	98800415 	stw	r2,16(r19)
    d6d0:	a0800317 	ldw	r2,12(r20)
    d6d4:	98800515 	stw	r2,20(r19)
    d6d8:	31000726 	beq	r6,r4,d6f8 <_realloc_r+0x54c>
    d6dc:	98800604 	addi	r2,r19,24
    d6e0:	a5000404 	addi	r20,r20,16
    d6e4:	003fbb06 	br	d5d4 <__alt_mem_Flash_flash_data+0xf400d5d4>
    d6e8:	9009883a 	mov	r4,r18
    d6ec:	00147f40 	call	147f4 <__malloc_unlock>
    d6f0:	0005883a 	mov	r2,zero
    d6f4:	003ef206 	br	d2c0 <__alt_mem_Flash_flash_data+0xf400d2c0>
    d6f8:	a0c00417 	ldw	r3,16(r20)
    d6fc:	a5000604 	addi	r20,r20,24
    d700:	98800804 	addi	r2,r19,32
    d704:	98c00615 	stw	r3,24(r19)
    d708:	a0ffff17 	ldw	r3,-4(r20)
    d70c:	98c00715 	stw	r3,28(r19)
    d710:	003fb006 	br	d5d4 <__alt_mem_Flash_flash_data+0xf400d5d4>

0000d714 <__fpclassifyd>:
    d714:	00a00034 	movhi	r2,32768
    d718:	10bfffc4 	addi	r2,r2,-1
    d71c:	2884703a 	and	r2,r5,r2
    d720:	10000726 	beq	r2,zero,d740 <__fpclassifyd+0x2c>
    d724:	00fffc34 	movhi	r3,65520
    d728:	019ff834 	movhi	r6,32736
    d72c:	28c7883a 	add	r3,r5,r3
    d730:	31bfffc4 	addi	r6,r6,-1
    d734:	30c00536 	bltu	r6,r3,d74c <__fpclassifyd+0x38>
    d738:	00800104 	movi	r2,4
    d73c:	f800283a 	ret
    d740:	2000021e 	bne	r4,zero,d74c <__fpclassifyd+0x38>
    d744:	00800084 	movi	r2,2
    d748:	f800283a 	ret
    d74c:	00dffc34 	movhi	r3,32752
    d750:	019ff834 	movhi	r6,32736
    d754:	28cb883a 	add	r5,r5,r3
    d758:	31bfffc4 	addi	r6,r6,-1
    d75c:	317ff62e 	bgeu	r6,r5,d738 <__alt_mem_Flash_flash_data+0xf400d738>
    d760:	01400434 	movhi	r5,16
    d764:	297fffc4 	addi	r5,r5,-1
    d768:	28800236 	bltu	r5,r2,d774 <__fpclassifyd+0x60>
    d76c:	008000c4 	movi	r2,3
    d770:	f800283a 	ret
    d774:	10c00226 	beq	r2,r3,d780 <__fpclassifyd+0x6c>
    d778:	0005883a 	mov	r2,zero
    d77c:	f800283a 	ret
    d780:	2005003a 	cmpeq	r2,r4,zero
    d784:	f800283a 	ret

0000d788 <_sbrk_r>:
    d788:	defffd04 	addi	sp,sp,-12
    d78c:	dc000015 	stw	r16,0(sp)
    d790:	040000f4 	movhi	r16,3
    d794:	dc400115 	stw	r17,4(sp)
    d798:	8427d704 	addi	r16,r16,-24740
    d79c:	2023883a 	mov	r17,r4
    d7a0:	2809883a 	mov	r4,r5
    d7a4:	dfc00215 	stw	ra,8(sp)
    d7a8:	80000015 	stw	zero,0(r16)
    d7ac:	00143c00 	call	143c0 <sbrk>
    d7b0:	00ffffc4 	movi	r3,-1
    d7b4:	10c00526 	beq	r2,r3,d7cc <_sbrk_r+0x44>
    d7b8:	dfc00217 	ldw	ra,8(sp)
    d7bc:	dc400117 	ldw	r17,4(sp)
    d7c0:	dc000017 	ldw	r16,0(sp)
    d7c4:	dec00304 	addi	sp,sp,12
    d7c8:	f800283a 	ret
    d7cc:	80c00017 	ldw	r3,0(r16)
    d7d0:	183ff926 	beq	r3,zero,d7b8 <__alt_mem_Flash_flash_data+0xf400d7b8>
    d7d4:	88c00015 	stw	r3,0(r17)
    d7d8:	003ff706 	br	d7b8 <__alt_mem_Flash_flash_data+0xf400d7b8>

0000d7dc <__sread>:
    d7dc:	defffe04 	addi	sp,sp,-8
    d7e0:	dc000015 	stw	r16,0(sp)
    d7e4:	2821883a 	mov	r16,r5
    d7e8:	2940038f 	ldh	r5,14(r5)
    d7ec:	dfc00115 	stw	ra,4(sp)
    d7f0:	00107380 	call	10738 <_read_r>
    d7f4:	10000716 	blt	r2,zero,d814 <__sread+0x38>
    d7f8:	80c01417 	ldw	r3,80(r16)
    d7fc:	1887883a 	add	r3,r3,r2
    d800:	80c01415 	stw	r3,80(r16)
    d804:	dfc00117 	ldw	ra,4(sp)
    d808:	dc000017 	ldw	r16,0(sp)
    d80c:	dec00204 	addi	sp,sp,8
    d810:	f800283a 	ret
    d814:	80c0030b 	ldhu	r3,12(r16)
    d818:	18fbffcc 	andi	r3,r3,61439
    d81c:	80c0030d 	sth	r3,12(r16)
    d820:	dfc00117 	ldw	ra,4(sp)
    d824:	dc000017 	ldw	r16,0(sp)
    d828:	dec00204 	addi	sp,sp,8
    d82c:	f800283a 	ret

0000d830 <__seofread>:
    d830:	0005883a 	mov	r2,zero
    d834:	f800283a 	ret

0000d838 <__swrite>:
    d838:	2880030b 	ldhu	r2,12(r5)
    d83c:	defffb04 	addi	sp,sp,-20
    d840:	dcc00315 	stw	r19,12(sp)
    d844:	dc800215 	stw	r18,8(sp)
    d848:	dc400115 	stw	r17,4(sp)
    d84c:	dc000015 	stw	r16,0(sp)
    d850:	dfc00415 	stw	ra,16(sp)
    d854:	10c0400c 	andi	r3,r2,256
    d858:	2821883a 	mov	r16,r5
    d85c:	2027883a 	mov	r19,r4
    d860:	3025883a 	mov	r18,r6
    d864:	3823883a 	mov	r17,r7
    d868:	18000526 	beq	r3,zero,d880 <__swrite+0x48>
    d86c:	2940038f 	ldh	r5,14(r5)
    d870:	000d883a 	mov	r6,zero
    d874:	01c00084 	movi	r7,2
    d878:	00106dc0 	call	106dc <_lseek_r>
    d87c:	8080030b 	ldhu	r2,12(r16)
    d880:	8140038f 	ldh	r5,14(r16)
    d884:	10bbffcc 	andi	r2,r2,61439
    d888:	9809883a 	mov	r4,r19
    d88c:	900d883a 	mov	r6,r18
    d890:	880f883a 	mov	r7,r17
    d894:	8080030d 	sth	r2,12(r16)
    d898:	dfc00417 	ldw	ra,16(sp)
    d89c:	dcc00317 	ldw	r19,12(sp)
    d8a0:	dc800217 	ldw	r18,8(sp)
    d8a4:	dc400117 	ldw	r17,4(sp)
    d8a8:	dc000017 	ldw	r16,0(sp)
    d8ac:	dec00504 	addi	sp,sp,20
    d8b0:	00101d81 	jmpi	101d8 <_write_r>

0000d8b4 <__sseek>:
    d8b4:	defffe04 	addi	sp,sp,-8
    d8b8:	dc000015 	stw	r16,0(sp)
    d8bc:	2821883a 	mov	r16,r5
    d8c0:	2940038f 	ldh	r5,14(r5)
    d8c4:	dfc00115 	stw	ra,4(sp)
    d8c8:	00106dc0 	call	106dc <_lseek_r>
    d8cc:	00ffffc4 	movi	r3,-1
    d8d0:	10c00826 	beq	r2,r3,d8f4 <__sseek+0x40>
    d8d4:	80c0030b 	ldhu	r3,12(r16)
    d8d8:	80801415 	stw	r2,80(r16)
    d8dc:	18c40014 	ori	r3,r3,4096
    d8e0:	80c0030d 	sth	r3,12(r16)
    d8e4:	dfc00117 	ldw	ra,4(sp)
    d8e8:	dc000017 	ldw	r16,0(sp)
    d8ec:	dec00204 	addi	sp,sp,8
    d8f0:	f800283a 	ret
    d8f4:	80c0030b 	ldhu	r3,12(r16)
    d8f8:	18fbffcc 	andi	r3,r3,61439
    d8fc:	80c0030d 	sth	r3,12(r16)
    d900:	dfc00117 	ldw	ra,4(sp)
    d904:	dc000017 	ldw	r16,0(sp)
    d908:	dec00204 	addi	sp,sp,8
    d90c:	f800283a 	ret

0000d910 <__sclose>:
    d910:	2940038f 	ldh	r5,14(r5)
    d914:	00102341 	jmpi	10234 <_close_r>

0000d918 <strcmp>:
    d918:	2144b03a 	or	r2,r4,r5
    d91c:	108000cc 	andi	r2,r2,3
    d920:	1000171e 	bne	r2,zero,d980 <strcmp+0x68>
    d924:	20800017 	ldw	r2,0(r4)
    d928:	28c00017 	ldw	r3,0(r5)
    d92c:	10c0141e 	bne	r2,r3,d980 <strcmp+0x68>
    d930:	027fbff4 	movhi	r9,65279
    d934:	4a7fbfc4 	addi	r9,r9,-257
    d938:	0086303a 	nor	r3,zero,r2
    d93c:	02202074 	movhi	r8,32897
    d940:	1245883a 	add	r2,r2,r9
    d944:	42202004 	addi	r8,r8,-32640
    d948:	10c4703a 	and	r2,r2,r3
    d94c:	1204703a 	and	r2,r2,r8
    d950:	10000226 	beq	r2,zero,d95c <strcmp+0x44>
    d954:	00001706 	br	d9b4 <strcmp+0x9c>
    d958:	1000161e 	bne	r2,zero,d9b4 <strcmp+0x9c>
    d95c:	21000104 	addi	r4,r4,4
    d960:	20c00017 	ldw	r3,0(r4)
    d964:	29400104 	addi	r5,r5,4
    d968:	29800017 	ldw	r6,0(r5)
    d96c:	1a4f883a 	add	r7,r3,r9
    d970:	00c4303a 	nor	r2,zero,r3
    d974:	3884703a 	and	r2,r7,r2
    d978:	1204703a 	and	r2,r2,r8
    d97c:	19bff626 	beq	r3,r6,d958 <__alt_mem_Flash_flash_data+0xf400d958>
    d980:	20800007 	ldb	r2,0(r4)
    d984:	1000051e 	bne	r2,zero,d99c <strcmp+0x84>
    d988:	00000606 	br	d9a4 <strcmp+0x8c>
    d98c:	21000044 	addi	r4,r4,1
    d990:	20800007 	ldb	r2,0(r4)
    d994:	29400044 	addi	r5,r5,1
    d998:	10000226 	beq	r2,zero,d9a4 <strcmp+0x8c>
    d99c:	28c00007 	ldb	r3,0(r5)
    d9a0:	10fffa26 	beq	r2,r3,d98c <__alt_mem_Flash_flash_data+0xf400d98c>
    d9a4:	20800003 	ldbu	r2,0(r4)
    d9a8:	28c00003 	ldbu	r3,0(r5)
    d9ac:	10c5c83a 	sub	r2,r2,r3
    d9b0:	f800283a 	ret
    d9b4:	0005883a 	mov	r2,zero
    d9b8:	f800283a 	ret

0000d9bc <__ssprint_r>:
    d9bc:	30800217 	ldw	r2,8(r6)
    d9c0:	defff604 	addi	sp,sp,-40
    d9c4:	ddc00715 	stw	r23,28(sp)
    d9c8:	dc800215 	stw	r18,8(sp)
    d9cc:	dfc00915 	stw	ra,36(sp)
    d9d0:	df000815 	stw	fp,32(sp)
    d9d4:	dd800615 	stw	r22,24(sp)
    d9d8:	dd400515 	stw	r21,20(sp)
    d9dc:	dd000415 	stw	r20,16(sp)
    d9e0:	dcc00315 	stw	r19,12(sp)
    d9e4:	dc400115 	stw	r17,4(sp)
    d9e8:	dc000015 	stw	r16,0(sp)
    d9ec:	3025883a 	mov	r18,r6
    d9f0:	35c00017 	ldw	r23,0(r6)
    d9f4:	10005626 	beq	r2,zero,db50 <__ssprint_r+0x194>
    d9f8:	2027883a 	mov	r19,r4
    d9fc:	28800217 	ldw	r2,8(r5)
    da00:	29000017 	ldw	r4,0(r5)
    da04:	2823883a 	mov	r17,r5
    da08:	0039883a 	mov	fp,zero
    da0c:	0021883a 	mov	r16,zero
    da10:	80003926 	beq	r16,zero,daf8 <__ssprint_r+0x13c>
    da14:	102b883a 	mov	r21,r2
    da18:	102d883a 	mov	r22,r2
    da1c:	80803a36 	bltu	r16,r2,db08 <__ssprint_r+0x14c>
    da20:	88c0030b 	ldhu	r3,12(r17)
    da24:	1881200c 	andi	r2,r3,1152
    da28:	10002626 	beq	r2,zero,dac4 <__ssprint_r+0x108>
    da2c:	88800517 	ldw	r2,20(r17)
    da30:	89400417 	ldw	r5,16(r17)
    da34:	81c00044 	addi	r7,r16,1
    da38:	108d883a 	add	r6,r2,r2
    da3c:	3085883a 	add	r2,r6,r2
    da40:	100cd7fa 	srli	r6,r2,31
    da44:	216dc83a 	sub	r22,r4,r5
    da48:	3d89883a 	add	r4,r7,r22
    da4c:	3085883a 	add	r2,r6,r2
    da50:	102bd07a 	srai	r21,r2,1
    da54:	a80d883a 	mov	r6,r21
    da58:	a900022e 	bgeu	r21,r4,da64 <__ssprint_r+0xa8>
    da5c:	202b883a 	mov	r21,r4
    da60:	200d883a 	mov	r6,r4
    da64:	18c1000c 	andi	r3,r3,1024
    da68:	9809883a 	mov	r4,r19
    da6c:	18002926 	beq	r3,zero,db14 <__ssprint_r+0x158>
    da70:	300b883a 	mov	r5,r6
    da74:	000b57c0 	call	b57c <_malloc_r>
    da78:	1029883a 	mov	r20,r2
    da7c:	10002b26 	beq	r2,zero,db2c <__ssprint_r+0x170>
    da80:	89400417 	ldw	r5,16(r17)
    da84:	1009883a 	mov	r4,r2
    da88:	b00d883a 	mov	r6,r22
    da8c:	000be0c0 	call	be0c <memcpy>
    da90:	8880030b 	ldhu	r2,12(r17)
    da94:	00fedfc4 	movi	r3,-1153
    da98:	10c4703a 	and	r2,r2,r3
    da9c:	10802014 	ori	r2,r2,128
    daa0:	8880030d 	sth	r2,12(r17)
    daa4:	a589883a 	add	r4,r20,r22
    daa8:	adadc83a 	sub	r22,r21,r22
    daac:	8d400515 	stw	r21,20(r17)
    dab0:	8d800215 	stw	r22,8(r17)
    dab4:	8d000415 	stw	r20,16(r17)
    dab8:	89000015 	stw	r4,0(r17)
    dabc:	802b883a 	mov	r21,r16
    dac0:	802d883a 	mov	r22,r16
    dac4:	e00b883a 	mov	r5,fp
    dac8:	b00d883a 	mov	r6,r22
    dacc:	000bf440 	call	bf44 <memmove>
    dad0:	88800217 	ldw	r2,8(r17)
    dad4:	89000017 	ldw	r4,0(r17)
    dad8:	90c00217 	ldw	r3,8(r18)
    dadc:	1545c83a 	sub	r2,r2,r21
    dae0:	2589883a 	add	r4,r4,r22
    dae4:	88800215 	stw	r2,8(r17)
    dae8:	89000015 	stw	r4,0(r17)
    daec:	1c21c83a 	sub	r16,r3,r16
    daf0:	94000215 	stw	r16,8(r18)
    daf4:	80001626 	beq	r16,zero,db50 <__ssprint_r+0x194>
    daf8:	bf000017 	ldw	fp,0(r23)
    dafc:	bc000117 	ldw	r16,4(r23)
    db00:	bdc00204 	addi	r23,r23,8
    db04:	003fc206 	br	da10 <__alt_mem_Flash_flash_data+0xf400da10>
    db08:	802b883a 	mov	r21,r16
    db0c:	802d883a 	mov	r22,r16
    db10:	003fec06 	br	dac4 <__alt_mem_Flash_flash_data+0xf400dac4>
    db14:	000d1ac0 	call	d1ac <_realloc_r>
    db18:	1029883a 	mov	r20,r2
    db1c:	103fe11e 	bne	r2,zero,daa4 <__alt_mem_Flash_flash_data+0xf400daa4>
    db20:	89400417 	ldw	r5,16(r17)
    db24:	9809883a 	mov	r4,r19
    db28:	000a9ac0 	call	a9ac <_free_r>
    db2c:	88c0030b 	ldhu	r3,12(r17)
    db30:	00800304 	movi	r2,12
    db34:	98800015 	stw	r2,0(r19)
    db38:	18c01014 	ori	r3,r3,64
    db3c:	88c0030d 	sth	r3,12(r17)
    db40:	00bfffc4 	movi	r2,-1
    db44:	90000215 	stw	zero,8(r18)
    db48:	90000115 	stw	zero,4(r18)
    db4c:	00000206 	br	db58 <__ssprint_r+0x19c>
    db50:	90000115 	stw	zero,4(r18)
    db54:	0005883a 	mov	r2,zero
    db58:	dfc00917 	ldw	ra,36(sp)
    db5c:	df000817 	ldw	fp,32(sp)
    db60:	ddc00717 	ldw	r23,28(sp)
    db64:	dd800617 	ldw	r22,24(sp)
    db68:	dd400517 	ldw	r21,20(sp)
    db6c:	dd000417 	ldw	r20,16(sp)
    db70:	dcc00317 	ldw	r19,12(sp)
    db74:	dc800217 	ldw	r18,8(sp)
    db78:	dc400117 	ldw	r17,4(sp)
    db7c:	dc000017 	ldw	r16,0(sp)
    db80:	dec00a04 	addi	sp,sp,40
    db84:	f800283a 	ret

0000db88 <___svfiprintf_internal_r>:
    db88:	2880030b 	ldhu	r2,12(r5)
    db8c:	deffc904 	addi	sp,sp,-220
    db90:	dd403215 	stw	r21,200(sp)
    db94:	dfc03615 	stw	ra,216(sp)
    db98:	df003515 	stw	fp,212(sp)
    db9c:	ddc03415 	stw	r23,208(sp)
    dba0:	dd803315 	stw	r22,204(sp)
    dba4:	dd003115 	stw	r20,196(sp)
    dba8:	dcc03015 	stw	r19,192(sp)
    dbac:	dc802f15 	stw	r18,188(sp)
    dbb0:	dc402e15 	stw	r17,184(sp)
    dbb4:	dc002d15 	stw	r16,180(sp)
    dbb8:	d9402715 	stw	r5,156(sp)
    dbbc:	d9002915 	stw	r4,164(sp)
    dbc0:	1080200c 	andi	r2,r2,128
    dbc4:	d9c02315 	stw	r7,140(sp)
    dbc8:	302b883a 	mov	r21,r6
    dbcc:	10000226 	beq	r2,zero,dbd8 <___svfiprintf_internal_r+0x50>
    dbd0:	28800417 	ldw	r2,16(r5)
    dbd4:	1003ce26 	beq	r2,zero,eb10 <___svfiprintf_internal_r+0xf88>
    dbd8:	dac01a04 	addi	r11,sp,104
    dbdc:	da8019c4 	addi	r10,sp,103
    dbe0:	dc802917 	ldw	r18,164(sp)
    dbe4:	dd002717 	ldw	r20,156(sp)
    dbe8:	04c000b4 	movhi	r19,2
    dbec:	dac01e15 	stw	r11,120(sp)
    dbf0:	5a97c83a 	sub	r11,r11,r10
    dbf4:	9cd70a04 	addi	r19,r19,23592
    dbf8:	da801f15 	stw	r10,124(sp)
    dbfc:	dec01a15 	stw	sp,104(sp)
    dc00:	d8001c15 	stw	zero,112(sp)
    dc04:	d8001b15 	stw	zero,108(sp)
    dc08:	d811883a 	mov	r8,sp
    dc0c:	d8002a15 	stw	zero,168(sp)
    dc10:	d8002415 	stw	zero,144(sp)
    dc14:	dac02b15 	stw	r11,172(sp)
    dc18:	a8800007 	ldb	r2,0(r21)
    dc1c:	10026a26 	beq	r2,zero,e5c8 <___svfiprintf_internal_r+0xa40>
    dc20:	01000944 	movi	r4,37
    dc24:	11026826 	beq	r2,r4,e5c8 <___svfiprintf_internal_r+0xa40>
    dc28:	a805883a 	mov	r2,r21
    dc2c:	00000106 	br	dc34 <___svfiprintf_internal_r+0xac>
    dc30:	19000326 	beq	r3,r4,dc40 <___svfiprintf_internal_r+0xb8>
    dc34:	10800044 	addi	r2,r2,1
    dc38:	10c00007 	ldb	r3,0(r2)
    dc3c:	183ffc1e 	bne	r3,zero,dc30 <__alt_mem_Flash_flash_data+0xf400dc30>
    dc40:	1561c83a 	sub	r16,r2,r21
    dc44:	102d883a 	mov	r22,r2
    dc48:	80000e26 	beq	r16,zero,dc84 <___svfiprintf_internal_r+0xfc>
    dc4c:	d8c01c17 	ldw	r3,112(sp)
    dc50:	d8801b17 	ldw	r2,108(sp)
    dc54:	45400015 	stw	r21,0(r8)
    dc58:	1c07883a 	add	r3,r3,r16
    dc5c:	10800044 	addi	r2,r2,1
    dc60:	d8c01c15 	stw	r3,112(sp)
    dc64:	44000115 	stw	r16,4(r8)
    dc68:	d8801b15 	stw	r2,108(sp)
    dc6c:	00c001c4 	movi	r3,7
    dc70:	1882d816 	blt	r3,r2,e7d4 <___svfiprintf_internal_r+0xc4c>
    dc74:	42000204 	addi	r8,r8,8
    dc78:	da802417 	ldw	r10,144(sp)
    dc7c:	5415883a 	add	r10,r10,r16
    dc80:	da802415 	stw	r10,144(sp)
    dc84:	b0800007 	ldb	r2,0(r22)
    dc88:	10027526 	beq	r2,zero,e660 <___svfiprintf_internal_r+0xad8>
    dc8c:	b1000047 	ldb	r4,1(r22)
    dc90:	b5400044 	addi	r21,r22,1
    dc94:	d8001d85 	stb	zero,118(sp)
    dc98:	000d883a 	mov	r6,zero
    dc9c:	043fffc4 	movi	r16,-1
    dca0:	d8002115 	stw	zero,132(sp)
    dca4:	0023883a 	mov	r17,zero
    dca8:	00c01604 	movi	r3,88
    dcac:	01400244 	movi	r5,9
    dcb0:	02400a84 	movi	r9,42
    dcb4:	01c01b04 	movi	r7,108
    dcb8:	ad400044 	addi	r21,r21,1
    dcbc:	20bff804 	addi	r2,r4,-32
    dcc0:	18819736 	bltu	r3,r2,e320 <___svfiprintf_internal_r+0x798>
    dcc4:	100490ba 	slli	r2,r2,2
    dcc8:	02c00074 	movhi	r11,1
    dccc:	5af73704 	addi	r11,r11,-8996
    dcd0:	12c5883a 	add	r2,r2,r11
    dcd4:	10800017 	ldw	r2,0(r2)
    dcd8:	1000683a 	jmp	r2
    dcdc:	0000e218 	cmpnei	zero,zero,904
    dce0:	0000e320 	cmpeqi	zero,zero,908
    dce4:	0000e320 	cmpeqi	zero,zero,908
    dce8:	0000e20c 	andi	zero,zero,904
    dcec:	0000e320 	cmpeqi	zero,zero,908
    dcf0:	0000e320 	cmpeqi	zero,zero,908
    dcf4:	0000e320 	cmpeqi	zero,zero,908
    dcf8:	0000e320 	cmpeqi	zero,zero,908
    dcfc:	0000e320 	cmpeqi	zero,zero,908
    dd00:	0000e320 	cmpeqi	zero,zero,908
    dd04:	0000df38 	rdprs	zero,zero,892
    dd08:	0000e354 	movui	zero,909
    dd0c:	0000e320 	cmpeqi	zero,zero,908
    dd10:	0000df60 	cmpeqi	zero,zero,893
    dd14:	0000e360 	cmpeqi	zero,zero,909
    dd18:	0000e320 	cmpeqi	zero,zero,908
    dd1c:	0000e348 	cmpgei	zero,zero,909
    dd20:	0000e2e8 	cmpgeui	zero,zero,907
    dd24:	0000e2e8 	cmpgeui	zero,zero,907
    dd28:	0000e2e8 	cmpgeui	zero,zero,907
    dd2c:	0000e2e8 	cmpgeui	zero,zero,907
    dd30:	0000e2e8 	cmpgeui	zero,zero,907
    dd34:	0000e2e8 	cmpgeui	zero,zero,907
    dd38:	0000e2e8 	cmpgeui	zero,zero,907
    dd3c:	0000e2e8 	cmpgeui	zero,zero,907
    dd40:	0000e2e8 	cmpgeui	zero,zero,907
    dd44:	0000e320 	cmpeqi	zero,zero,908
    dd48:	0000e320 	cmpeqi	zero,zero,908
    dd4c:	0000e320 	cmpeqi	zero,zero,908
    dd50:	0000e320 	cmpeqi	zero,zero,908
    dd54:	0000e320 	cmpeqi	zero,zero,908
    dd58:	0000e320 	cmpeqi	zero,zero,908
    dd5c:	0000e320 	cmpeqi	zero,zero,908
    dd60:	0000e320 	cmpeqi	zero,zero,908
    dd64:	0000e320 	cmpeqi	zero,zero,908
    dd68:	0000e320 	cmpeqi	zero,zero,908
    dd6c:	0000e280 	call	e28 <collision+0x94>
    dd70:	0000e320 	cmpeqi	zero,zero,908
    dd74:	0000e320 	cmpeqi	zero,zero,908
    dd78:	0000e320 	cmpeqi	zero,zero,908
    dd7c:	0000e320 	cmpeqi	zero,zero,908
    dd80:	0000e320 	cmpeqi	zero,zero,908
    dd84:	0000e320 	cmpeqi	zero,zero,908
    dd88:	0000e320 	cmpeqi	zero,zero,908
    dd8c:	0000e320 	cmpeqi	zero,zero,908
    dd90:	0000e320 	cmpeqi	zero,zero,908
    dd94:	0000e320 	cmpeqi	zero,zero,908
    dd98:	0000df0c 	andi	zero,zero,892
    dd9c:	0000e320 	cmpeqi	zero,zero,908
    dda0:	0000e320 	cmpeqi	zero,zero,908
    dda4:	0000e320 	cmpeqi	zero,zero,908
    dda8:	0000e320 	cmpeqi	zero,zero,908
    ddac:	0000e320 	cmpeqi	zero,zero,908
    ddb0:	0000de40 	call	de4 <collision+0x50>
    ddb4:	0000e320 	cmpeqi	zero,zero,908
    ddb8:	0000e320 	cmpeqi	zero,zero,908
    ddbc:	0000e16c 	andhi	zero,zero,901
    ddc0:	0000e320 	cmpeqi	zero,zero,908
    ddc4:	0000e320 	cmpeqi	zero,zero,908
    ddc8:	0000e320 	cmpeqi	zero,zero,908
    ddcc:	0000e320 	cmpeqi	zero,zero,908
    ddd0:	0000e320 	cmpeqi	zero,zero,908
    ddd4:	0000e320 	cmpeqi	zero,zero,908
    ddd8:	0000e320 	cmpeqi	zero,zero,908
    dddc:	0000e320 	cmpeqi	zero,zero,908
    dde0:	0000e320 	cmpeqi	zero,zero,908
    dde4:	0000e320 	cmpeqi	zero,zero,908
    dde8:	0000e058 	cmpnei	zero,zero,897
    ddec:	0000e018 	cmpnei	zero,zero,896
    ddf0:	0000e320 	cmpeqi	zero,zero,908
    ddf4:	0000e320 	cmpeqi	zero,zero,908
    ddf8:	0000e320 	cmpeqi	zero,zero,908
    ddfc:	0000e1c8 	cmpgei	zero,zero,903
    de00:	0000e018 	cmpnei	zero,zero,896
    de04:	0000e320 	cmpeqi	zero,zero,908
    de08:	0000e320 	cmpeqi	zero,zero,908
    de0c:	0000e1b4 	movhi	zero,902
    de10:	0000e320 	cmpeqi	zero,zero,908
    de14:	0000e1d4 	movui	zero,903
    de18:	0000df10 	cmplti	zero,zero,892
    de1c:	0000dfd4 	movui	zero,895
    de20:	0000dfc8 	cmpgei	zero,zero,895
    de24:	0000e320 	cmpeqi	zero,zero,908
    de28:	0000df6c 	andhi	zero,zero,893
    de2c:	0000e320 	cmpeqi	zero,zero,908
    de30:	0000de44 	movi	zero,889
    de34:	0000e320 	cmpeqi	zero,zero,908
    de38:	0000e320 	cmpeqi	zero,zero,908
    de3c:	0000e234 	movhi	zero,904
    de40:	8c400414 	ori	r17,r17,16
    de44:	8880080c 	andi	r2,r17,32
    de48:	10029626 	beq	r2,zero,e8a4 <___svfiprintf_internal_r+0xd1c>
    de4c:	da802317 	ldw	r10,140(sp)
    de50:	dac02317 	ldw	r11,140(sp)
    de54:	00800044 	movi	r2,1
    de58:	52400017 	ldw	r9,0(r10)
    de5c:	52800117 	ldw	r10,4(r10)
    de60:	5ac00204 	addi	r11,r11,8
    de64:	dac02315 	stw	r11,140(sp)
    de68:	4a86b03a 	or	r3,r9,r10
    de6c:	d8001d85 	stb	zero,118(sp)
    de70:	8039883a 	mov	fp,r16
    de74:	0017883a 	mov	r11,zero
    de78:	80000216 	blt	r16,zero,de84 <___svfiprintf_internal_r+0x2fc>
    de7c:	013fdfc4 	movi	r4,-129
    de80:	8922703a 	and	r17,r17,r4
    de84:	1801d21e 	bne	r3,zero,e5d0 <___svfiprintf_internal_r+0xa48>
    de88:	80024626 	beq	r16,zero,e7a4 <___svfiprintf_internal_r+0xc1c>
    de8c:	10803fcc 	andi	r2,r2,255
    de90:	00c00044 	movi	r3,1
    de94:	10c2b426 	beq	r2,r3,e968 <___svfiprintf_internal_r+0xde0>
    de98:	00c00084 	movi	r3,2
    de9c:	10c25d26 	beq	r2,r3,e814 <___svfiprintf_internal_r+0xc8c>
    dea0:	d8c01a04 	addi	r3,sp,104
    dea4:	4808d0fa 	srli	r4,r9,3
    dea8:	500a977a 	slli	r5,r10,29
    deac:	5014d0fa 	srli	r10,r10,3
    deb0:	4a4001cc 	andi	r9,r9,7
    deb4:	48800c04 	addi	r2,r9,48
    deb8:	18ffffc4 	addi	r3,r3,-1
    debc:	2912b03a 	or	r9,r5,r4
    dec0:	18800005 	stb	r2,0(r3)
    dec4:	4a88b03a 	or	r4,r9,r10
    dec8:	203ff61e 	bne	r4,zero,dea4 <__alt_mem_Flash_flash_data+0xf400dea4>
    decc:	8900004c 	andi	r4,r17,1
    ded0:	d8c02615 	stw	r3,152(sp)
    ded4:	2002961e 	bne	r4,zero,e930 <___svfiprintf_internal_r+0xda8>
    ded8:	da801e17 	ldw	r10,120(sp)
    dedc:	50f9c83a 	sub	fp,r10,r3
    dee0:	df002015 	stw	fp,128(sp)
    dee4:	e400010e 	bge	fp,r16,deec <___svfiprintf_internal_r+0x364>
    dee8:	dc002015 	stw	r16,128(sp)
    deec:	5ac03fcc 	andi	r11,r11,255
    def0:	5ac0201c 	xori	r11,r11,128
    def4:	5affe004 	addi	r11,r11,-128
    def8:	58006326 	beq	r11,zero,e088 <___svfiprintf_internal_r+0x500>
    defc:	d8c02017 	ldw	r3,128(sp)
    df00:	18c00044 	addi	r3,r3,1
    df04:	d8c02015 	stw	r3,128(sp)
    df08:	00005f06 	br	e088 <___svfiprintf_internal_r+0x500>
    df0c:	8c400414 	ori	r17,r17,16
    df10:	8880080c 	andi	r2,r17,32
    df14:	10027926 	beq	r2,zero,e8fc <___svfiprintf_internal_r+0xd74>
    df18:	dac02317 	ldw	r11,140(sp)
    df1c:	0005883a 	mov	r2,zero
    df20:	5a400017 	ldw	r9,0(r11)
    df24:	5a800117 	ldw	r10,4(r11)
    df28:	5ac00204 	addi	r11,r11,8
    df2c:	dac02315 	stw	r11,140(sp)
    df30:	4a86b03a 	or	r3,r9,r10
    df34:	003fcd06 	br	de6c <__alt_mem_Flash_flash_data+0xf400de6c>
    df38:	da802317 	ldw	r10,140(sp)
    df3c:	dac02317 	ldw	r11,140(sp)
    df40:	52800017 	ldw	r10,0(r10)
    df44:	58800104 	addi	r2,r11,4
    df48:	da802115 	stw	r10,132(sp)
    df4c:	50028c0e 	bge	r10,zero,e980 <___svfiprintf_internal_r+0xdf8>
    df50:	da802117 	ldw	r10,132(sp)
    df54:	d8802315 	stw	r2,140(sp)
    df58:	0295c83a 	sub	r10,zero,r10
    df5c:	da802115 	stw	r10,132(sp)
    df60:	8c400114 	ori	r17,r17,4
    df64:	a9000007 	ldb	r4,0(r21)
    df68:	003f5306 	br	dcb8 <__alt_mem_Flash_flash_data+0xf400dcb8>
    df6c:	da802317 	ldw	r10,140(sp)
    df70:	dac02317 	ldw	r11,140(sp)
    df74:	d8001d85 	stb	zero,118(sp)
    df78:	52800017 	ldw	r10,0(r10)
    df7c:	5dc00104 	addi	r23,r11,4
    df80:	da802615 	stw	r10,152(sp)
    df84:	5002d626 	beq	r10,zero,eae0 <___svfiprintf_internal_r+0xf58>
    df88:	d9002617 	ldw	r4,152(sp)
    df8c:	8002cc16 	blt	r16,zero,eac0 <___svfiprintf_internal_r+0xf38>
    df90:	000b883a 	mov	r5,zero
    df94:	800d883a 	mov	r6,r16
    df98:	da002c15 	stw	r8,176(sp)
    df9c:	000bd240 	call	bd24 <memchr>
    dfa0:	da002c17 	ldw	r8,176(sp)
    dfa4:	1002f026 	beq	r2,zero,eb68 <___svfiprintf_internal_r+0xfe0>
    dfa8:	d8c02617 	ldw	r3,152(sp)
    dfac:	10f9c83a 	sub	fp,r2,r3
    dfb0:	8700010e 	bge	r16,fp,dfb8 <___svfiprintf_internal_r+0x430>
    dfb4:	8039883a 	mov	fp,r16
    dfb8:	dac01d83 	ldbu	r11,118(sp)
    dfbc:	ddc02315 	stw	r23,140(sp)
    dfc0:	0021883a 	mov	r16,zero
    dfc4:	003fc606 	br	dee0 <__alt_mem_Flash_flash_data+0xf400dee0>
    dfc8:	8c400814 	ori	r17,r17,32
    dfcc:	a9000007 	ldb	r4,0(r21)
    dfd0:	003f3906 	br	dcb8 <__alt_mem_Flash_flash_data+0xf400dcb8>
    dfd4:	da802317 	ldw	r10,140(sp)
    dfd8:	00800c04 	movi	r2,48
    dfdc:	dac02317 	ldw	r11,140(sp)
    dfe0:	52400017 	ldw	r9,0(r10)
    dfe4:	d8801d05 	stb	r2,116(sp)
    dfe8:	00801e04 	movi	r2,120
    dfec:	d8801d45 	stb	r2,117(sp)
    dff0:	008000b4 	movhi	r2,2
    dff4:	1096a104 	addi	r2,r2,23172
    dff8:	5ac00104 	addi	r11,r11,4
    dffc:	d8802a15 	stw	r2,168(sp)
    e000:	0015883a 	mov	r10,zero
    e004:	8c400094 	ori	r17,r17,2
    e008:	dac02315 	stw	r11,140(sp)
    e00c:	00800084 	movi	r2,2
    e010:	4807883a 	mov	r3,r9
    e014:	003f9506 	br	de6c <__alt_mem_Flash_flash_data+0xf400de6c>
    e018:	d9801d85 	stb	r6,118(sp)
    e01c:	8880080c 	andi	r2,r17,32
    e020:	d8c02317 	ldw	r3,140(sp)
    e024:	10009b26 	beq	r2,zero,e294 <___svfiprintf_internal_r+0x70c>
    e028:	dac02317 	ldw	r11,140(sp)
    e02c:	18800117 	ldw	r2,4(r3)
    e030:	1a400017 	ldw	r9,0(r3)
    e034:	5ac00204 	addi	r11,r11,8
    e038:	dac02315 	stw	r11,140(sp)
    e03c:	1015883a 	mov	r10,r2
    e040:	10009f16 	blt	r2,zero,e2c0 <___svfiprintf_internal_r+0x738>
    e044:	dac01d83 	ldbu	r11,118(sp)
    e048:	8039883a 	mov	fp,r16
    e04c:	00800044 	movi	r2,1
    e050:	4a86b03a 	or	r3,r9,r10
    e054:	003f8806 	br	de78 <__alt_mem_Flash_flash_data+0xf400de78>
    e058:	dac02317 	ldw	r11,140(sp)
    e05c:	00c00044 	movi	r3,1
    e060:	da801004 	addi	r10,sp,64
    e064:	58800017 	ldw	r2,0(r11)
    e068:	5ac00104 	addi	r11,r11,4
    e06c:	d8c02015 	stw	r3,128(sp)
    e070:	d8001d85 	stb	zero,118(sp)
    e074:	d8801005 	stb	r2,64(sp)
    e078:	dac02315 	stw	r11,140(sp)
    e07c:	1839883a 	mov	fp,r3
    e080:	da802615 	stw	r10,152(sp)
    e084:	0021883a 	mov	r16,zero
    e088:	8a80008c 	andi	r10,r17,2
    e08c:	da802215 	stw	r10,136(sp)
    e090:	50000326 	beq	r10,zero,e0a0 <___svfiprintf_internal_r+0x518>
    e094:	dac02017 	ldw	r11,128(sp)
    e098:	5ac00084 	addi	r11,r11,2
    e09c:	dac02015 	stw	r11,128(sp)
    e0a0:	88c0210c 	andi	r3,r17,132
    e0a4:	d8c02515 	stw	r3,148(sp)
    e0a8:	1800bd1e 	bne	r3,zero,e3a0 <___svfiprintf_internal_r+0x818>
    e0ac:	da802117 	ldw	r10,132(sp)
    e0b0:	dac02017 	ldw	r11,128(sp)
    e0b4:	52edc83a 	sub	r22,r10,r11
    e0b8:	0580b90e 	bge	zero,r22,e3a0 <___svfiprintf_internal_r+0x818>
    e0bc:	02400404 	movi	r9,16
    e0c0:	d8c01c17 	ldw	r3,112(sp)
    e0c4:	d8801b17 	ldw	r2,108(sp)
    e0c8:	4d829b0e 	bge	r9,r22,eb38 <___svfiprintf_internal_r+0xfb0>
    e0cc:	014000b4 	movhi	r5,2
    e0d0:	29570e04 	addi	r5,r5,23608
    e0d4:	d9402815 	stw	r5,160(sp)
    e0d8:	05c001c4 	movi	r23,7
    e0dc:	00000306 	br	e0ec <___svfiprintf_internal_r+0x564>
    e0e0:	b5bffc04 	addi	r22,r22,-16
    e0e4:	42000204 	addi	r8,r8,8
    e0e8:	4d80150e 	bge	r9,r22,e140 <___svfiprintf_internal_r+0x5b8>
    e0ec:	028000b4 	movhi	r10,2
    e0f0:	18c00404 	addi	r3,r3,16
    e0f4:	10800044 	addi	r2,r2,1
    e0f8:	52970e04 	addi	r10,r10,23608
    e0fc:	42800015 	stw	r10,0(r8)
    e100:	42400115 	stw	r9,4(r8)
    e104:	d8c01c15 	stw	r3,112(sp)
    e108:	d8801b15 	stw	r2,108(sp)
    e10c:	b8bff40e 	bge	r23,r2,e0e0 <__alt_mem_Flash_flash_data+0xf400e0e0>
    e110:	9009883a 	mov	r4,r18
    e114:	a00b883a 	mov	r5,r20
    e118:	d9801a04 	addi	r6,sp,104
    e11c:	da402c15 	stw	r9,176(sp)
    e120:	000d9bc0 	call	d9bc <__ssprint_r>
    e124:	da402c17 	ldw	r9,176(sp)
    e128:	1001531e 	bne	r2,zero,e678 <___svfiprintf_internal_r+0xaf0>
    e12c:	b5bffc04 	addi	r22,r22,-16
    e130:	d8c01c17 	ldw	r3,112(sp)
    e134:	d8801b17 	ldw	r2,108(sp)
    e138:	d811883a 	mov	r8,sp
    e13c:	4dbfeb16 	blt	r9,r22,e0ec <__alt_mem_Flash_flash_data+0xf400e0ec>
    e140:	dac02817 	ldw	r11,160(sp)
    e144:	b0c7883a 	add	r3,r22,r3
    e148:	10800044 	addi	r2,r2,1
    e14c:	42c00015 	stw	r11,0(r8)
    e150:	45800115 	stw	r22,4(r8)
    e154:	d8c01c15 	stw	r3,112(sp)
    e158:	d8801b15 	stw	r2,108(sp)
    e15c:	010001c4 	movi	r4,7
    e160:	2081dd16 	blt	r4,r2,e8d8 <___svfiprintf_internal_r+0xd50>
    e164:	42000204 	addi	r8,r8,8
    e168:	00008f06 	br	e3a8 <___svfiprintf_internal_r+0x820>
    e16c:	008000b4 	movhi	r2,2
    e170:	10969c04 	addi	r2,r2,23152
    e174:	d8802a15 	stw	r2,168(sp)
    e178:	d9801d85 	stb	r6,118(sp)
    e17c:	8880080c 	andi	r2,r17,32
    e180:	10003226 	beq	r2,zero,e24c <___svfiprintf_internal_r+0x6c4>
    e184:	da802317 	ldw	r10,140(sp)
    e188:	dac02317 	ldw	r11,140(sp)
    e18c:	52400017 	ldw	r9,0(r10)
    e190:	52800117 	ldw	r10,4(r10)
    e194:	5ac00204 	addi	r11,r11,8
    e198:	dac02315 	stw	r11,140(sp)
    e19c:	8880004c 	andi	r2,r17,1
    e1a0:	10003426 	beq	r2,zero,e274 <___svfiprintf_internal_r+0x6ec>
    e1a4:	4a86b03a 	or	r3,r9,r10
    e1a8:	1802231e 	bne	r3,zero,ea38 <___svfiprintf_internal_r+0xeb0>
    e1ac:	00800084 	movi	r2,2
    e1b0:	003f2e06 	br	de6c <__alt_mem_Flash_flash_data+0xf400de6c>
    e1b4:	a9000007 	ldb	r4,0(r21)
    e1b8:	a805883a 	mov	r2,r21
    e1bc:	21c22426 	beq	r4,r7,ea50 <___svfiprintf_internal_r+0xec8>
    e1c0:	8c400414 	ori	r17,r17,16
    e1c4:	003ebc06 	br	dcb8 <__alt_mem_Flash_flash_data+0xf400dcb8>
    e1c8:	8c401014 	ori	r17,r17,64
    e1cc:	a9000007 	ldb	r4,0(r21)
    e1d0:	003eb906 	br	dcb8 <__alt_mem_Flash_flash_data+0xf400dcb8>
    e1d4:	d9801d85 	stb	r6,118(sp)
    e1d8:	8880080c 	andi	r2,r17,32
    e1dc:	10020d1e 	bne	r2,zero,ea14 <___svfiprintf_internal_r+0xe8c>
    e1e0:	8880040c 	andi	r2,r17,16
    e1e4:	10021e1e 	bne	r2,zero,ea60 <___svfiprintf_internal_r+0xed8>
    e1e8:	8c40100c 	andi	r17,r17,64
    e1ec:	88021c26 	beq	r17,zero,ea60 <___svfiprintf_internal_r+0xed8>
    e1f0:	dac02317 	ldw	r11,140(sp)
    e1f4:	da802417 	ldw	r10,144(sp)
    e1f8:	58800017 	ldw	r2,0(r11)
    e1fc:	5ac00104 	addi	r11,r11,4
    e200:	dac02315 	stw	r11,140(sp)
    e204:	1280000d 	sth	r10,0(r2)
    e208:	003e8306 	br	dc18 <__alt_mem_Flash_flash_data+0xf400dc18>
    e20c:	8c400054 	ori	r17,r17,1
    e210:	a9000007 	ldb	r4,0(r21)
    e214:	003ea806 	br	dcb8 <__alt_mem_Flash_flash_data+0xf400dcb8>
    e218:	30803fcc 	andi	r2,r6,255
    e21c:	1080201c 	xori	r2,r2,128
    e220:	10bfe004 	addi	r2,r2,-128
    e224:	1001f91e 	bne	r2,zero,ea0c <___svfiprintf_internal_r+0xe84>
    e228:	01800804 	movi	r6,32
    e22c:	a9000007 	ldb	r4,0(r21)
    e230:	003ea106 	br	dcb8 <__alt_mem_Flash_flash_data+0xf400dcb8>
    e234:	008000b4 	movhi	r2,2
    e238:	1096a104 	addi	r2,r2,23172
    e23c:	d8802a15 	stw	r2,168(sp)
    e240:	d9801d85 	stb	r6,118(sp)
    e244:	8880080c 	andi	r2,r17,32
    e248:	103fce1e 	bne	r2,zero,e184 <__alt_mem_Flash_flash_data+0xf400e184>
    e24c:	8880040c 	andi	r2,r17,16
    e250:	1001e526 	beq	r2,zero,e9e8 <___svfiprintf_internal_r+0xe60>
    e254:	da802317 	ldw	r10,140(sp)
    e258:	dac02317 	ldw	r11,140(sp)
    e25c:	52400017 	ldw	r9,0(r10)
    e260:	8880004c 	andi	r2,r17,1
    e264:	5ac00104 	addi	r11,r11,4
    e268:	dac02315 	stw	r11,140(sp)
    e26c:	0015883a 	mov	r10,zero
    e270:	103fcc1e 	bne	r2,zero,e1a4 <__alt_mem_Flash_flash_data+0xf400e1a4>
    e274:	00800084 	movi	r2,2
    e278:	4a86b03a 	or	r3,r9,r10
    e27c:	003efb06 	br	de6c <__alt_mem_Flash_flash_data+0xf400de6c>
    e280:	8c400414 	ori	r17,r17,16
    e284:	d9801d85 	stb	r6,118(sp)
    e288:	8880080c 	andi	r2,r17,32
    e28c:	d8c02317 	ldw	r3,140(sp)
    e290:	103f651e 	bne	r2,zero,e028 <__alt_mem_Flash_flash_data+0xf400e028>
    e294:	8880040c 	andi	r2,r17,16
    e298:	1001c61e 	bne	r2,zero,e9b4 <___svfiprintf_internal_r+0xe2c>
    e29c:	8880100c 	andi	r2,r17,64
    e2a0:	1001c426 	beq	r2,zero,e9b4 <___svfiprintf_internal_r+0xe2c>
    e2a4:	1a40000f 	ldh	r9,0(r3)
    e2a8:	dac02317 	ldw	r11,140(sp)
    e2ac:	4815d7fa 	srai	r10,r9,31
    e2b0:	5ac00104 	addi	r11,r11,4
    e2b4:	dac02315 	stw	r11,140(sp)
    e2b8:	5005883a 	mov	r2,r10
    e2bc:	103f610e 	bge	r2,zero,e044 <__alt_mem_Flash_flash_data+0xf400e044>
    e2c0:	0253c83a 	sub	r9,zero,r9
    e2c4:	4804c03a 	cmpne	r2,r9,zero
    e2c8:	0295c83a 	sub	r10,zero,r10
    e2cc:	5095c83a 	sub	r10,r10,r2
    e2d0:	02c00b44 	movi	r11,45
    e2d4:	dac01d85 	stb	r11,118(sp)
    e2d8:	8039883a 	mov	fp,r16
    e2dc:	00800044 	movi	r2,1
    e2e0:	4a86b03a 	or	r3,r9,r10
    e2e4:	003ee406 	br	de78 <__alt_mem_Flash_flash_data+0xf400de78>
    e2e8:	a815883a 	mov	r10,r21
    e2ec:	d8002115 	stw	zero,132(sp)
    e2f0:	20bff404 	addi	r2,r4,-48
    e2f4:	51000007 	ldb	r4,0(r10)
    e2f8:	da802117 	ldw	r10,132(sp)
    e2fc:	ad400044 	addi	r21,r21,1
    e300:	52c002a4 	muli	r11,r10,10
    e304:	a815883a 	mov	r10,r21
    e308:	5885883a 	add	r2,r11,r2
    e30c:	d8802115 	stw	r2,132(sp)
    e310:	20bff404 	addi	r2,r4,-48
    e314:	28bff72e 	bgeu	r5,r2,e2f4 <__alt_mem_Flash_flash_data+0xf400e2f4>
    e318:	20bff804 	addi	r2,r4,-32
    e31c:	18be692e 	bgeu	r3,r2,dcc4 <__alt_mem_Flash_flash_data+0xf400dcc4>
    e320:	d9801d85 	stb	r6,118(sp)
    e324:	2000ce26 	beq	r4,zero,e660 <___svfiprintf_internal_r+0xad8>
    e328:	02800044 	movi	r10,1
    e32c:	dac01004 	addi	r11,sp,64
    e330:	da802015 	stw	r10,128(sp)
    e334:	d9001005 	stb	r4,64(sp)
    e338:	d8001d85 	stb	zero,118(sp)
    e33c:	5039883a 	mov	fp,r10
    e340:	dac02615 	stw	r11,152(sp)
    e344:	003f4f06 	br	e084 <__alt_mem_Flash_flash_data+0xf400e084>
    e348:	8c402014 	ori	r17,r17,128
    e34c:	a9000007 	ldb	r4,0(r21)
    e350:	003e5906 	br	dcb8 <__alt_mem_Flash_flash_data+0xf400dcb8>
    e354:	01800ac4 	movi	r6,43
    e358:	a9000007 	ldb	r4,0(r21)
    e35c:	003e5606 	br	dcb8 <__alt_mem_Flash_flash_data+0xf400dcb8>
    e360:	a9000007 	ldb	r4,0(r21)
    e364:	aa800044 	addi	r10,r21,1
    e368:	22420626 	beq	r4,r9,eb84 <___svfiprintf_internal_r+0xffc>
    e36c:	20bff404 	addi	r2,r4,-48
    e370:	502b883a 	mov	r21,r10
    e374:	0021883a 	mov	r16,zero
    e378:	28be5036 	bltu	r5,r2,dcbc <__alt_mem_Flash_flash_data+0xf400dcbc>
    e37c:	a9000007 	ldb	r4,0(r21)
    e380:	840002a4 	muli	r16,r16,10
    e384:	ad400044 	addi	r21,r21,1
    e388:	1421883a 	add	r16,r2,r16
    e38c:	20bff404 	addi	r2,r4,-48
    e390:	28bffa2e 	bgeu	r5,r2,e37c <__alt_mem_Flash_flash_data+0xf400e37c>
    e394:	803e490e 	bge	r16,zero,dcbc <__alt_mem_Flash_flash_data+0xf400dcbc>
    e398:	043fffc4 	movi	r16,-1
    e39c:	003e4706 	br	dcbc <__alt_mem_Flash_flash_data+0xf400dcbc>
    e3a0:	d8c01c17 	ldw	r3,112(sp)
    e3a4:	d8801b17 	ldw	r2,108(sp)
    e3a8:	d9001d87 	ldb	r4,118(sp)
    e3ac:	20000b26 	beq	r4,zero,e3dc <___svfiprintf_internal_r+0x854>
    e3b0:	d9001d84 	addi	r4,sp,118
    e3b4:	18c00044 	addi	r3,r3,1
    e3b8:	10800044 	addi	r2,r2,1
    e3bc:	41000015 	stw	r4,0(r8)
    e3c0:	01000044 	movi	r4,1
    e3c4:	41000115 	stw	r4,4(r8)
    e3c8:	d8c01c15 	stw	r3,112(sp)
    e3cc:	d8801b15 	stw	r2,108(sp)
    e3d0:	010001c4 	movi	r4,7
    e3d4:	20811e16 	blt	r4,r2,e850 <___svfiprintf_internal_r+0xcc8>
    e3d8:	42000204 	addi	r8,r8,8
    e3dc:	da802217 	ldw	r10,136(sp)
    e3e0:	50000b26 	beq	r10,zero,e410 <___svfiprintf_internal_r+0x888>
    e3e4:	d9001d04 	addi	r4,sp,116
    e3e8:	18c00084 	addi	r3,r3,2
    e3ec:	10800044 	addi	r2,r2,1
    e3f0:	41000015 	stw	r4,0(r8)
    e3f4:	01000084 	movi	r4,2
    e3f8:	41000115 	stw	r4,4(r8)
    e3fc:	d8c01c15 	stw	r3,112(sp)
    e400:	d8801b15 	stw	r2,108(sp)
    e404:	010001c4 	movi	r4,7
    e408:	20811a16 	blt	r4,r2,e874 <___svfiprintf_internal_r+0xcec>
    e40c:	42000204 	addi	r8,r8,8
    e410:	dac02517 	ldw	r11,148(sp)
    e414:	01002004 	movi	r4,128
    e418:	5900a826 	beq	r11,r4,e6bc <___svfiprintf_internal_r+0xb34>
    e41c:	8721c83a 	sub	r16,r16,fp
    e420:	0400260e 	bge	zero,r16,e4bc <___svfiprintf_internal_r+0x934>
    e424:	01c00404 	movi	r7,16
    e428:	3c019d0e 	bge	r7,r16,eaa0 <___svfiprintf_internal_r+0xf18>
    e42c:	010000b4 	movhi	r4,2
    e430:	21170a04 	addi	r4,r4,23592
    e434:	d9002215 	stw	r4,136(sp)
    e438:	382f883a 	mov	r23,r7
    e43c:	058001c4 	movi	r22,7
    e440:	00000306 	br	e450 <___svfiprintf_internal_r+0x8c8>
    e444:	843ffc04 	addi	r16,r16,-16
    e448:	42000204 	addi	r8,r8,8
    e44c:	bc00110e 	bge	r23,r16,e494 <___svfiprintf_internal_r+0x90c>
    e450:	18c00404 	addi	r3,r3,16
    e454:	10800044 	addi	r2,r2,1
    e458:	44c00015 	stw	r19,0(r8)
    e45c:	45c00115 	stw	r23,4(r8)
    e460:	d8c01c15 	stw	r3,112(sp)
    e464:	d8801b15 	stw	r2,108(sp)
    e468:	b0bff60e 	bge	r22,r2,e444 <__alt_mem_Flash_flash_data+0xf400e444>
    e46c:	9009883a 	mov	r4,r18
    e470:	a00b883a 	mov	r5,r20
    e474:	d9801a04 	addi	r6,sp,104
    e478:	000d9bc0 	call	d9bc <__ssprint_r>
    e47c:	10007e1e 	bne	r2,zero,e678 <___svfiprintf_internal_r+0xaf0>
    e480:	843ffc04 	addi	r16,r16,-16
    e484:	d8c01c17 	ldw	r3,112(sp)
    e488:	d8801b17 	ldw	r2,108(sp)
    e48c:	d811883a 	mov	r8,sp
    e490:	bc3fef16 	blt	r23,r16,e450 <__alt_mem_Flash_flash_data+0xf400e450>
    e494:	da802217 	ldw	r10,136(sp)
    e498:	1c07883a 	add	r3,r3,r16
    e49c:	10800044 	addi	r2,r2,1
    e4a0:	42800015 	stw	r10,0(r8)
    e4a4:	44000115 	stw	r16,4(r8)
    e4a8:	d8c01c15 	stw	r3,112(sp)
    e4ac:	d8801b15 	stw	r2,108(sp)
    e4b0:	010001c4 	movi	r4,7
    e4b4:	2080ce16 	blt	r4,r2,e7f0 <___svfiprintf_internal_r+0xc68>
    e4b8:	42000204 	addi	r8,r8,8
    e4bc:	dac02617 	ldw	r11,152(sp)
    e4c0:	1f07883a 	add	r3,r3,fp
    e4c4:	10800044 	addi	r2,r2,1
    e4c8:	42c00015 	stw	r11,0(r8)
    e4cc:	47000115 	stw	fp,4(r8)
    e4d0:	d8c01c15 	stw	r3,112(sp)
    e4d4:	d8801b15 	stw	r2,108(sp)
    e4d8:	010001c4 	movi	r4,7
    e4dc:	2080a316 	blt	r4,r2,e76c <___svfiprintf_internal_r+0xbe4>
    e4e0:	42000204 	addi	r8,r8,8
    e4e4:	8c40010c 	andi	r17,r17,4
    e4e8:	88002b26 	beq	r17,zero,e598 <___svfiprintf_internal_r+0xa10>
    e4ec:	da802117 	ldw	r10,132(sp)
    e4f0:	dac02017 	ldw	r11,128(sp)
    e4f4:	52e1c83a 	sub	r16,r10,r11
    e4f8:	0400270e 	bge	zero,r16,e598 <___svfiprintf_internal_r+0xa10>
    e4fc:	04400404 	movi	r17,16
    e500:	d8801b17 	ldw	r2,108(sp)
    e504:	8c01900e 	bge	r17,r16,eb48 <___svfiprintf_internal_r+0xfc0>
    e508:	014000b4 	movhi	r5,2
    e50c:	29570e04 	addi	r5,r5,23608
    e510:	d9402815 	stw	r5,160(sp)
    e514:	070001c4 	movi	fp,7
    e518:	00000306 	br	e528 <___svfiprintf_internal_r+0x9a0>
    e51c:	843ffc04 	addi	r16,r16,-16
    e520:	42000204 	addi	r8,r8,8
    e524:	8c00130e 	bge	r17,r16,e574 <___svfiprintf_internal_r+0x9ec>
    e528:	028000b4 	movhi	r10,2
    e52c:	18c00404 	addi	r3,r3,16
    e530:	10800044 	addi	r2,r2,1
    e534:	52970e04 	addi	r10,r10,23608
    e538:	42800015 	stw	r10,0(r8)
    e53c:	44400115 	stw	r17,4(r8)
    e540:	d8c01c15 	stw	r3,112(sp)
    e544:	d8801b15 	stw	r2,108(sp)
    e548:	e0bff40e 	bge	fp,r2,e51c <__alt_mem_Flash_flash_data+0xf400e51c>
    e54c:	9009883a 	mov	r4,r18
    e550:	a00b883a 	mov	r5,r20
    e554:	d9801a04 	addi	r6,sp,104
    e558:	000d9bc0 	call	d9bc <__ssprint_r>
    e55c:	1000461e 	bne	r2,zero,e678 <___svfiprintf_internal_r+0xaf0>
    e560:	843ffc04 	addi	r16,r16,-16
    e564:	d8c01c17 	ldw	r3,112(sp)
    e568:	d8801b17 	ldw	r2,108(sp)
    e56c:	d811883a 	mov	r8,sp
    e570:	8c3fed16 	blt	r17,r16,e528 <__alt_mem_Flash_flash_data+0xf400e528>
    e574:	dac02817 	ldw	r11,160(sp)
    e578:	1c07883a 	add	r3,r3,r16
    e57c:	10800044 	addi	r2,r2,1
    e580:	42c00015 	stw	r11,0(r8)
    e584:	44000115 	stw	r16,4(r8)
    e588:	d8c01c15 	stw	r3,112(sp)
    e58c:	d8801b15 	stw	r2,108(sp)
    e590:	010001c4 	movi	r4,7
    e594:	2080fd16 	blt	r4,r2,e98c <___svfiprintf_internal_r+0xe04>
    e598:	dd802017 	ldw	r22,128(sp)
    e59c:	da802117 	ldw	r10,132(sp)
    e5a0:	b280010e 	bge	r22,r10,e5a8 <___svfiprintf_internal_r+0xa20>
    e5a4:	502d883a 	mov	r22,r10
    e5a8:	dac02417 	ldw	r11,144(sp)
    e5ac:	5d97883a 	add	r11,r11,r22
    e5b0:	dac02415 	stw	r11,144(sp)
    e5b4:	1800751e 	bne	r3,zero,e78c <___svfiprintf_internal_r+0xc04>
    e5b8:	a8800007 	ldb	r2,0(r21)
    e5bc:	d8001b15 	stw	zero,108(sp)
    e5c0:	d811883a 	mov	r8,sp
    e5c4:	103d961e 	bne	r2,zero,dc20 <__alt_mem_Flash_flash_data+0xf400dc20>
    e5c8:	a82d883a 	mov	r22,r21
    e5cc:	003dad06 	br	dc84 <__alt_mem_Flash_flash_data+0xf400dc84>
    e5d0:	10803fcc 	andi	r2,r2,255
    e5d4:	00c00044 	movi	r3,1
    e5d8:	10fe2f1e 	bne	r2,r3,de98 <__alt_mem_Flash_flash_data+0xf400de98>
    e5dc:	5000e026 	beq	r10,zero,e960 <___svfiprintf_internal_r+0xdd8>
    e5e0:	dc002015 	stw	r16,128(sp)
    e5e4:	dc402215 	stw	r17,136(sp)
    e5e8:	dd801a04 	addi	r22,sp,104
    e5ec:	402f883a 	mov	r23,r8
    e5f0:	5839883a 	mov	fp,r11
    e5f4:	4821883a 	mov	r16,r9
    e5f8:	5023883a 	mov	r17,r10
    e5fc:	8009883a 	mov	r4,r16
    e600:	880b883a 	mov	r5,r17
    e604:	01800284 	movi	r6,10
    e608:	000f883a 	mov	r7,zero
    e60c:	0010f3c0 	call	10f3c <__umoddi3>
    e610:	10800c04 	addi	r2,r2,48
    e614:	b5bfffc4 	addi	r22,r22,-1
    e618:	8009883a 	mov	r4,r16
    e61c:	880b883a 	mov	r5,r17
    e620:	01800284 	movi	r6,10
    e624:	000f883a 	mov	r7,zero
    e628:	b0800005 	stb	r2,0(r22)
    e62c:	001097c0 	call	1097c <__udivdi3>
    e630:	1021883a 	mov	r16,r2
    e634:	10c4b03a 	or	r2,r2,r3
    e638:	1823883a 	mov	r17,r3
    e63c:	103fef1e 	bne	r2,zero,e5fc <__alt_mem_Flash_flash_data+0xf400e5fc>
    e640:	da801e17 	ldw	r10,120(sp)
    e644:	e017883a 	mov	r11,fp
    e648:	dc002017 	ldw	r16,128(sp)
    e64c:	dc402217 	ldw	r17,136(sp)
    e650:	b811883a 	mov	r8,r23
    e654:	dd802615 	stw	r22,152(sp)
    e658:	55b9c83a 	sub	fp,r10,r22
    e65c:	003e2006 	br	dee0 <__alt_mem_Flash_flash_data+0xf400dee0>
    e660:	d8801c17 	ldw	r2,112(sp)
    e664:	10000426 	beq	r2,zero,e678 <___svfiprintf_internal_r+0xaf0>
    e668:	d9002917 	ldw	r4,164(sp)
    e66c:	d9402717 	ldw	r5,156(sp)
    e670:	d9801a04 	addi	r6,sp,104
    e674:	000d9bc0 	call	d9bc <__ssprint_r>
    e678:	da802717 	ldw	r10,156(sp)
    e67c:	5080030b 	ldhu	r2,12(r10)
    e680:	1080100c 	andi	r2,r2,64
    e684:	1000511e 	bne	r2,zero,e7cc <___svfiprintf_internal_r+0xc44>
    e688:	d8802417 	ldw	r2,144(sp)
    e68c:	dfc03617 	ldw	ra,216(sp)
    e690:	df003517 	ldw	fp,212(sp)
    e694:	ddc03417 	ldw	r23,208(sp)
    e698:	dd803317 	ldw	r22,204(sp)
    e69c:	dd403217 	ldw	r21,200(sp)
    e6a0:	dd003117 	ldw	r20,196(sp)
    e6a4:	dcc03017 	ldw	r19,192(sp)
    e6a8:	dc802f17 	ldw	r18,188(sp)
    e6ac:	dc402e17 	ldw	r17,184(sp)
    e6b0:	dc002d17 	ldw	r16,180(sp)
    e6b4:	dec03704 	addi	sp,sp,220
    e6b8:	f800283a 	ret
    e6bc:	da802117 	ldw	r10,132(sp)
    e6c0:	dac02017 	ldw	r11,128(sp)
    e6c4:	52edc83a 	sub	r22,r10,r11
    e6c8:	05bf540e 	bge	zero,r22,e41c <__alt_mem_Flash_flash_data+0xf400e41c>
    e6cc:	02400404 	movi	r9,16
    e6d0:	4d81210e 	bge	r9,r22,eb58 <___svfiprintf_internal_r+0xfd0>
    e6d4:	014000b4 	movhi	r5,2
    e6d8:	29570a04 	addi	r5,r5,23592
    e6dc:	d9402215 	stw	r5,136(sp)
    e6e0:	05c001c4 	movi	r23,7
    e6e4:	00000306 	br	e6f4 <___svfiprintf_internal_r+0xb6c>
    e6e8:	b5bffc04 	addi	r22,r22,-16
    e6ec:	42000204 	addi	r8,r8,8
    e6f0:	4d80130e 	bge	r9,r22,e740 <___svfiprintf_internal_r+0xbb8>
    e6f4:	18c00404 	addi	r3,r3,16
    e6f8:	10800044 	addi	r2,r2,1
    e6fc:	44c00015 	stw	r19,0(r8)
    e700:	42400115 	stw	r9,4(r8)
    e704:	d8c01c15 	stw	r3,112(sp)
    e708:	d8801b15 	stw	r2,108(sp)
    e70c:	b8bff60e 	bge	r23,r2,e6e8 <__alt_mem_Flash_flash_data+0xf400e6e8>
    e710:	9009883a 	mov	r4,r18
    e714:	a00b883a 	mov	r5,r20
    e718:	d9801a04 	addi	r6,sp,104
    e71c:	da402c15 	stw	r9,176(sp)
    e720:	000d9bc0 	call	d9bc <__ssprint_r>
    e724:	da402c17 	ldw	r9,176(sp)
    e728:	103fd31e 	bne	r2,zero,e678 <__alt_mem_Flash_flash_data+0xf400e678>
    e72c:	b5bffc04 	addi	r22,r22,-16
    e730:	d8c01c17 	ldw	r3,112(sp)
    e734:	d8801b17 	ldw	r2,108(sp)
    e738:	d811883a 	mov	r8,sp
    e73c:	4dbfed16 	blt	r9,r22,e6f4 <__alt_mem_Flash_flash_data+0xf400e6f4>
    e740:	da802217 	ldw	r10,136(sp)
    e744:	1d87883a 	add	r3,r3,r22
    e748:	10800044 	addi	r2,r2,1
    e74c:	42800015 	stw	r10,0(r8)
    e750:	45800115 	stw	r22,4(r8)
    e754:	d8c01c15 	stw	r3,112(sp)
    e758:	d8801b15 	stw	r2,108(sp)
    e75c:	010001c4 	movi	r4,7
    e760:	2080c616 	blt	r4,r2,ea7c <___svfiprintf_internal_r+0xef4>
    e764:	42000204 	addi	r8,r8,8
    e768:	003f2c06 	br	e41c <__alt_mem_Flash_flash_data+0xf400e41c>
    e76c:	9009883a 	mov	r4,r18
    e770:	a00b883a 	mov	r5,r20
    e774:	d9801a04 	addi	r6,sp,104
    e778:	000d9bc0 	call	d9bc <__ssprint_r>
    e77c:	103fbe1e 	bne	r2,zero,e678 <__alt_mem_Flash_flash_data+0xf400e678>
    e780:	d8c01c17 	ldw	r3,112(sp)
    e784:	d811883a 	mov	r8,sp
    e788:	003f5606 	br	e4e4 <__alt_mem_Flash_flash_data+0xf400e4e4>
    e78c:	9009883a 	mov	r4,r18
    e790:	a00b883a 	mov	r5,r20
    e794:	d9801a04 	addi	r6,sp,104
    e798:	000d9bc0 	call	d9bc <__ssprint_r>
    e79c:	103f8626 	beq	r2,zero,e5b8 <__alt_mem_Flash_flash_data+0xf400e5b8>
    e7a0:	003fb506 	br	e678 <__alt_mem_Flash_flash_data+0xf400e678>
    e7a4:	10803fcc 	andi	r2,r2,255
    e7a8:	10003b1e 	bne	r2,zero,e898 <___svfiprintf_internal_r+0xd10>
    e7ac:	8880004c 	andi	r2,r17,1
    e7b0:	10007d26 	beq	r2,zero,e9a8 <___svfiprintf_internal_r+0xe20>
    e7b4:	00800c04 	movi	r2,48
    e7b8:	d8c019c4 	addi	r3,sp,103
    e7bc:	d88019c5 	stb	r2,103(sp)
    e7c0:	df002b17 	ldw	fp,172(sp)
    e7c4:	d8c02615 	stw	r3,152(sp)
    e7c8:	003dc506 	br	dee0 <__alt_mem_Flash_flash_data+0xf400dee0>
    e7cc:	00bfffc4 	movi	r2,-1
    e7d0:	003fae06 	br	e68c <__alt_mem_Flash_flash_data+0xf400e68c>
    e7d4:	9009883a 	mov	r4,r18
    e7d8:	a00b883a 	mov	r5,r20
    e7dc:	d9801a04 	addi	r6,sp,104
    e7e0:	000d9bc0 	call	d9bc <__ssprint_r>
    e7e4:	103fa41e 	bne	r2,zero,e678 <__alt_mem_Flash_flash_data+0xf400e678>
    e7e8:	d811883a 	mov	r8,sp
    e7ec:	003d2206 	br	dc78 <__alt_mem_Flash_flash_data+0xf400dc78>
    e7f0:	9009883a 	mov	r4,r18
    e7f4:	a00b883a 	mov	r5,r20
    e7f8:	d9801a04 	addi	r6,sp,104
    e7fc:	000d9bc0 	call	d9bc <__ssprint_r>
    e800:	103f9d1e 	bne	r2,zero,e678 <__alt_mem_Flash_flash_data+0xf400e678>
    e804:	d8c01c17 	ldw	r3,112(sp)
    e808:	d8801b17 	ldw	r2,108(sp)
    e80c:	d811883a 	mov	r8,sp
    e810:	003f2a06 	br	e4bc <__alt_mem_Flash_flash_data+0xf400e4bc>
    e814:	d9402a17 	ldw	r5,168(sp)
    e818:	d8c01a04 	addi	r3,sp,104
    e81c:	488003cc 	andi	r2,r9,15
    e820:	5008973a 	slli	r4,r10,28
    e824:	2885883a 	add	r2,r5,r2
    e828:	4812d13a 	srli	r9,r9,4
    e82c:	10800003 	ldbu	r2,0(r2)
    e830:	5014d13a 	srli	r10,r10,4
    e834:	18ffffc4 	addi	r3,r3,-1
    e838:	2252b03a 	or	r9,r4,r9
    e83c:	18800005 	stb	r2,0(r3)
    e840:	4a84b03a 	or	r2,r9,r10
    e844:	103ff51e 	bne	r2,zero,e81c <__alt_mem_Flash_flash_data+0xf400e81c>
    e848:	d8c02615 	stw	r3,152(sp)
    e84c:	003da206 	br	ded8 <__alt_mem_Flash_flash_data+0xf400ded8>
    e850:	9009883a 	mov	r4,r18
    e854:	a00b883a 	mov	r5,r20
    e858:	d9801a04 	addi	r6,sp,104
    e85c:	000d9bc0 	call	d9bc <__ssprint_r>
    e860:	103f851e 	bne	r2,zero,e678 <__alt_mem_Flash_flash_data+0xf400e678>
    e864:	d8c01c17 	ldw	r3,112(sp)
    e868:	d8801b17 	ldw	r2,108(sp)
    e86c:	d811883a 	mov	r8,sp
    e870:	003eda06 	br	e3dc <__alt_mem_Flash_flash_data+0xf400e3dc>
    e874:	9009883a 	mov	r4,r18
    e878:	a00b883a 	mov	r5,r20
    e87c:	d9801a04 	addi	r6,sp,104
    e880:	000d9bc0 	call	d9bc <__ssprint_r>
    e884:	103f7c1e 	bne	r2,zero,e678 <__alt_mem_Flash_flash_data+0xf400e678>
    e888:	d8c01c17 	ldw	r3,112(sp)
    e88c:	d8801b17 	ldw	r2,108(sp)
    e890:	d811883a 	mov	r8,sp
    e894:	003ede06 	br	e410 <__alt_mem_Flash_flash_data+0xf400e410>
    e898:	da801a04 	addi	r10,sp,104
    e89c:	da802615 	stw	r10,152(sp)
    e8a0:	003d8f06 	br	dee0 <__alt_mem_Flash_flash_data+0xf400dee0>
    e8a4:	8880040c 	andi	r2,r17,16
    e8a8:	10004c1e 	bne	r2,zero,e9dc <___svfiprintf_internal_r+0xe54>
    e8ac:	8880100c 	andi	r2,r17,64
    e8b0:	da802317 	ldw	r10,140(sp)
    e8b4:	10004a26 	beq	r2,zero,e9e0 <___svfiprintf_internal_r+0xe58>
    e8b8:	5240000b 	ldhu	r9,0(r10)
    e8bc:	dac02317 	ldw	r11,140(sp)
    e8c0:	0015883a 	mov	r10,zero
    e8c4:	00800044 	movi	r2,1
    e8c8:	5ac00104 	addi	r11,r11,4
    e8cc:	dac02315 	stw	r11,140(sp)
    e8d0:	4807883a 	mov	r3,r9
    e8d4:	003d6506 	br	de6c <__alt_mem_Flash_flash_data+0xf400de6c>
    e8d8:	9009883a 	mov	r4,r18
    e8dc:	a00b883a 	mov	r5,r20
    e8e0:	d9801a04 	addi	r6,sp,104
    e8e4:	000d9bc0 	call	d9bc <__ssprint_r>
    e8e8:	103f631e 	bne	r2,zero,e678 <__alt_mem_Flash_flash_data+0xf400e678>
    e8ec:	d8c01c17 	ldw	r3,112(sp)
    e8f0:	d8801b17 	ldw	r2,108(sp)
    e8f4:	d811883a 	mov	r8,sp
    e8f8:	003eab06 	br	e3a8 <__alt_mem_Flash_flash_data+0xf400e3a8>
    e8fc:	8880040c 	andi	r2,r17,16
    e900:	1000331e 	bne	r2,zero,e9d0 <___svfiprintf_internal_r+0xe48>
    e904:	8880100c 	andi	r2,r17,64
    e908:	da802317 	ldw	r10,140(sp)
    e90c:	10003126 	beq	r2,zero,e9d4 <___svfiprintf_internal_r+0xe4c>
    e910:	5240000b 	ldhu	r9,0(r10)
    e914:	dac02317 	ldw	r11,140(sp)
    e918:	0015883a 	mov	r10,zero
    e91c:	0005883a 	mov	r2,zero
    e920:	5ac00104 	addi	r11,r11,4
    e924:	dac02315 	stw	r11,140(sp)
    e928:	4807883a 	mov	r3,r9
    e92c:	003d4f06 	br	de6c <__alt_mem_Flash_flash_data+0xf400de6c>
    e930:	10803fcc 	andi	r2,r2,255
    e934:	1080201c 	xori	r2,r2,128
    e938:	10bfe004 	addi	r2,r2,-128
    e93c:	01000c04 	movi	r4,48
    e940:	11005b26 	beq	r2,r4,eab0 <___svfiprintf_internal_r+0xf28>
    e944:	da802617 	ldw	r10,152(sp)
    e948:	d8801e17 	ldw	r2,120(sp)
    e94c:	193fffc5 	stb	r4,-1(r3)
    e950:	52bfffc4 	addi	r10,r10,-1
    e954:	da802615 	stw	r10,152(sp)
    e958:	12b9c83a 	sub	fp,r2,r10
    e95c:	003d6006 	br	dee0 <__alt_mem_Flash_flash_data+0xf400dee0>
    e960:	00800244 	movi	r2,9
    e964:	127f1e36 	bltu	r2,r9,e5e0 <__alt_mem_Flash_flash_data+0xf400e5e0>
    e968:	4a400c04 	addi	r9,r9,48
    e96c:	d8c019c4 	addi	r3,sp,103
    e970:	da4019c5 	stb	r9,103(sp)
    e974:	df002b17 	ldw	fp,172(sp)
    e978:	d8c02615 	stw	r3,152(sp)
    e97c:	003d5806 	br	dee0 <__alt_mem_Flash_flash_data+0xf400dee0>
    e980:	d8802315 	stw	r2,140(sp)
    e984:	a9000007 	ldb	r4,0(r21)
    e988:	003ccb06 	br	dcb8 <__alt_mem_Flash_flash_data+0xf400dcb8>
    e98c:	9009883a 	mov	r4,r18
    e990:	a00b883a 	mov	r5,r20
    e994:	d9801a04 	addi	r6,sp,104
    e998:	000d9bc0 	call	d9bc <__ssprint_r>
    e99c:	103f361e 	bne	r2,zero,e678 <__alt_mem_Flash_flash_data+0xf400e678>
    e9a0:	d8c01c17 	ldw	r3,112(sp)
    e9a4:	003efc06 	br	e598 <__alt_mem_Flash_flash_data+0xf400e598>
    e9a8:	d8c01a04 	addi	r3,sp,104
    e9ac:	d8c02615 	stw	r3,152(sp)
    e9b0:	003d4b06 	br	dee0 <__alt_mem_Flash_flash_data+0xf400dee0>
    e9b4:	da802317 	ldw	r10,140(sp)
    e9b8:	1a400017 	ldw	r9,0(r3)
    e9bc:	52800104 	addi	r10,r10,4
    e9c0:	da802315 	stw	r10,140(sp)
    e9c4:	4815d7fa 	srai	r10,r9,31
    e9c8:	5005883a 	mov	r2,r10
    e9cc:	003d9c06 	br	e040 <__alt_mem_Flash_flash_data+0xf400e040>
    e9d0:	da802317 	ldw	r10,140(sp)
    e9d4:	52400017 	ldw	r9,0(r10)
    e9d8:	003fce06 	br	e914 <__alt_mem_Flash_flash_data+0xf400e914>
    e9dc:	da802317 	ldw	r10,140(sp)
    e9e0:	52400017 	ldw	r9,0(r10)
    e9e4:	003fb506 	br	e8bc <__alt_mem_Flash_flash_data+0xf400e8bc>
    e9e8:	8880100c 	andi	r2,r17,64
    e9ec:	da802317 	ldw	r10,140(sp)
    e9f0:	103e1926 	beq	r2,zero,e258 <__alt_mem_Flash_flash_data+0xf400e258>
    e9f4:	dac02317 	ldw	r11,140(sp)
    e9f8:	5240000b 	ldhu	r9,0(r10)
    e9fc:	0015883a 	mov	r10,zero
    ea00:	5ac00104 	addi	r11,r11,4
    ea04:	dac02315 	stw	r11,140(sp)
    ea08:	003de406 	br	e19c <__alt_mem_Flash_flash_data+0xf400e19c>
    ea0c:	a9000007 	ldb	r4,0(r21)
    ea10:	003ca906 	br	dcb8 <__alt_mem_Flash_flash_data+0xf400dcb8>
    ea14:	dac02317 	ldw	r11,140(sp)
    ea18:	da802417 	ldw	r10,144(sp)
    ea1c:	58800017 	ldw	r2,0(r11)
    ea20:	5007d7fa 	srai	r3,r10,31
    ea24:	5ac00104 	addi	r11,r11,4
    ea28:	dac02315 	stw	r11,140(sp)
    ea2c:	12800015 	stw	r10,0(r2)
    ea30:	10c00115 	stw	r3,4(r2)
    ea34:	003c7806 	br	dc18 <__alt_mem_Flash_flash_data+0xf400dc18>
    ea38:	00800c04 	movi	r2,48
    ea3c:	d8801d05 	stb	r2,116(sp)
    ea40:	d9001d45 	stb	r4,117(sp)
    ea44:	8c400094 	ori	r17,r17,2
    ea48:	00800084 	movi	r2,2
    ea4c:	003d0706 	br	de6c <__alt_mem_Flash_flash_data+0xf400de6c>
    ea50:	ad400044 	addi	r21,r21,1
    ea54:	8c400814 	ori	r17,r17,32
    ea58:	11000047 	ldb	r4,1(r2)
    ea5c:	003c9606 	br	dcb8 <__alt_mem_Flash_flash_data+0xf400dcb8>
    ea60:	dac02317 	ldw	r11,140(sp)
    ea64:	da802417 	ldw	r10,144(sp)
    ea68:	58800017 	ldw	r2,0(r11)
    ea6c:	5ac00104 	addi	r11,r11,4
    ea70:	dac02315 	stw	r11,140(sp)
    ea74:	12800015 	stw	r10,0(r2)
    ea78:	003c6706 	br	dc18 <__alt_mem_Flash_flash_data+0xf400dc18>
    ea7c:	9009883a 	mov	r4,r18
    ea80:	a00b883a 	mov	r5,r20
    ea84:	d9801a04 	addi	r6,sp,104
    ea88:	000d9bc0 	call	d9bc <__ssprint_r>
    ea8c:	103efa1e 	bne	r2,zero,e678 <__alt_mem_Flash_flash_data+0xf400e678>
    ea90:	d8c01c17 	ldw	r3,112(sp)
    ea94:	d8801b17 	ldw	r2,108(sp)
    ea98:	d811883a 	mov	r8,sp
    ea9c:	003e5f06 	br	e41c <__alt_mem_Flash_flash_data+0xf400e41c>
    eaa0:	02c000b4 	movhi	r11,2
    eaa4:	5ad70a04 	addi	r11,r11,23592
    eaa8:	dac02215 	stw	r11,136(sp)
    eaac:	003e7906 	br	e494 <__alt_mem_Flash_flash_data+0xf400e494>
    eab0:	da801e17 	ldw	r10,120(sp)
    eab4:	d8c02617 	ldw	r3,152(sp)
    eab8:	50f9c83a 	sub	fp,r10,r3
    eabc:	003d0806 	br	dee0 <__alt_mem_Flash_flash_data+0xf400dee0>
    eac0:	da002c15 	stw	r8,176(sp)
    eac4:	00047800 	call	4780 <strlen>
    eac8:	1039883a 	mov	fp,r2
    eacc:	dac01d83 	ldbu	r11,118(sp)
    ead0:	ddc02315 	stw	r23,140(sp)
    ead4:	0021883a 	mov	r16,zero
    ead8:	da002c17 	ldw	r8,176(sp)
    eadc:	003d0006 	br	dee0 <__alt_mem_Flash_flash_data+0xf400dee0>
    eae0:	00800184 	movi	r2,6
    eae4:	1400012e 	bgeu	r2,r16,eaec <___svfiprintf_internal_r+0xf64>
    eae8:	1021883a 	mov	r16,r2
    eaec:	8039883a 	mov	fp,r16
    eaf0:	802d883a 	mov	r22,r16
    eaf4:	80002116 	blt	r16,zero,eb7c <___svfiprintf_internal_r+0xff4>
    eaf8:	008000b4 	movhi	r2,2
    eafc:	1096a604 	addi	r2,r2,23192
    eb00:	dd802015 	stw	r22,128(sp)
    eb04:	ddc02315 	stw	r23,140(sp)
    eb08:	d8802615 	stw	r2,152(sp)
    eb0c:	003d5d06 	br	e084 <__alt_mem_Flash_flash_data+0xf400e084>
    eb10:	04001004 	movi	r16,64
    eb14:	800b883a 	mov	r5,r16
    eb18:	000b57c0 	call	b57c <_malloc_r>
    eb1c:	da802717 	ldw	r10,156(sp)
    eb20:	50800015 	stw	r2,0(r10)
    eb24:	50800415 	stw	r2,16(r10)
    eb28:	10002026 	beq	r2,zero,ebac <___svfiprintf_internal_r+0x1024>
    eb2c:	da802717 	ldw	r10,156(sp)
    eb30:	54000515 	stw	r16,20(r10)
    eb34:	003c2806 	br	dbd8 <__alt_mem_Flash_flash_data+0xf400dbd8>
    eb38:	010000b4 	movhi	r4,2
    eb3c:	21170e04 	addi	r4,r4,23608
    eb40:	d9002815 	stw	r4,160(sp)
    eb44:	003d7e06 	br	e140 <__alt_mem_Flash_flash_data+0xf400e140>
    eb48:	010000b4 	movhi	r4,2
    eb4c:	21170e04 	addi	r4,r4,23608
    eb50:	d9002815 	stw	r4,160(sp)
    eb54:	003e8706 	br	e574 <__alt_mem_Flash_flash_data+0xf400e574>
    eb58:	010000b4 	movhi	r4,2
    eb5c:	21170a04 	addi	r4,r4,23592
    eb60:	d9002215 	stw	r4,136(sp)
    eb64:	003ef606 	br	e740 <__alt_mem_Flash_flash_data+0xf400e740>
    eb68:	8039883a 	mov	fp,r16
    eb6c:	dac01d83 	ldbu	r11,118(sp)
    eb70:	ddc02315 	stw	r23,140(sp)
    eb74:	0021883a 	mov	r16,zero
    eb78:	003cd906 	br	dee0 <__alt_mem_Flash_flash_data+0xf400dee0>
    eb7c:	002d883a 	mov	r22,zero
    eb80:	003fdd06 	br	eaf8 <__alt_mem_Flash_flash_data+0xf400eaf8>
    eb84:	dac02317 	ldw	r11,140(sp)
    eb88:	a805883a 	mov	r2,r21
    eb8c:	502b883a 	mov	r21,r10
    eb90:	5c000017 	ldw	r16,0(r11)
    eb94:	59000104 	addi	r4,r11,4
    eb98:	d9002315 	stw	r4,140(sp)
    eb9c:	803fae0e 	bge	r16,zero,ea58 <__alt_mem_Flash_flash_data+0xf400ea58>
    eba0:	043fffc4 	movi	r16,-1
    eba4:	11000047 	ldb	r4,1(r2)
    eba8:	003c4306 	br	dcb8 <__alt_mem_Flash_flash_data+0xf400dcb8>
    ebac:	dac02917 	ldw	r11,164(sp)
    ebb0:	00800304 	movi	r2,12
    ebb4:	58800015 	stw	r2,0(r11)
    ebb8:	00bfffc4 	movi	r2,-1
    ebbc:	003eb306 	br	e68c <__alt_mem_Flash_flash_data+0xf400e68c>

0000ebc0 <__sprint_r.part.0>:
    ebc0:	28801917 	ldw	r2,100(r5)
    ebc4:	defff604 	addi	sp,sp,-40
    ebc8:	dd400515 	stw	r21,20(sp)
    ebcc:	dcc00315 	stw	r19,12(sp)
    ebd0:	dfc00915 	stw	ra,36(sp)
    ebd4:	df000815 	stw	fp,32(sp)
    ebd8:	ddc00715 	stw	r23,28(sp)
    ebdc:	dd800615 	stw	r22,24(sp)
    ebe0:	dd000415 	stw	r20,16(sp)
    ebe4:	dc800215 	stw	r18,8(sp)
    ebe8:	dc400115 	stw	r17,4(sp)
    ebec:	dc000015 	stw	r16,0(sp)
    ebf0:	1088000c 	andi	r2,r2,8192
    ebf4:	2827883a 	mov	r19,r5
    ebf8:	302b883a 	mov	r21,r6
    ebfc:	10002d26 	beq	r2,zero,ecb4 <__sprint_r.part.0+0xf4>
    ec00:	30800217 	ldw	r2,8(r6)
    ec04:	35800017 	ldw	r22,0(r6)
    ec08:	10002826 	beq	r2,zero,ecac <__sprint_r.part.0+0xec>
    ec0c:	2029883a 	mov	r20,r4
    ec10:	b5c00104 	addi	r23,r22,4
    ec14:	04bfffc4 	movi	r18,-1
    ec18:	bc400017 	ldw	r17,0(r23)
    ec1c:	b4000017 	ldw	r16,0(r22)
    ec20:	0039883a 	mov	fp,zero
    ec24:	8822d0ba 	srli	r17,r17,2
    ec28:	04400316 	blt	zero,r17,ec38 <__sprint_r.part.0+0x78>
    ec2c:	00001806 	br	ec90 <__sprint_r.part.0+0xd0>
    ec30:	84000104 	addi	r16,r16,4
    ec34:	8f001526 	beq	r17,fp,ec8c <__sprint_r.part.0+0xcc>
    ec38:	81400017 	ldw	r5,0(r16)
    ec3c:	a009883a 	mov	r4,r20
    ec40:	980d883a 	mov	r6,r19
    ec44:	00104500 	call	10450 <_fputwc_r>
    ec48:	e7000044 	addi	fp,fp,1
    ec4c:	14bff81e 	bne	r2,r18,ec30 <__alt_mem_Flash_flash_data+0xf400ec30>
    ec50:	9005883a 	mov	r2,r18
    ec54:	a8000215 	stw	zero,8(r21)
    ec58:	a8000115 	stw	zero,4(r21)
    ec5c:	dfc00917 	ldw	ra,36(sp)
    ec60:	df000817 	ldw	fp,32(sp)
    ec64:	ddc00717 	ldw	r23,28(sp)
    ec68:	dd800617 	ldw	r22,24(sp)
    ec6c:	dd400517 	ldw	r21,20(sp)
    ec70:	dd000417 	ldw	r20,16(sp)
    ec74:	dcc00317 	ldw	r19,12(sp)
    ec78:	dc800217 	ldw	r18,8(sp)
    ec7c:	dc400117 	ldw	r17,4(sp)
    ec80:	dc000017 	ldw	r16,0(sp)
    ec84:	dec00a04 	addi	sp,sp,40
    ec88:	f800283a 	ret
    ec8c:	a8800217 	ldw	r2,8(r21)
    ec90:	8c63883a 	add	r17,r17,r17
    ec94:	8c63883a 	add	r17,r17,r17
    ec98:	1445c83a 	sub	r2,r2,r17
    ec9c:	a8800215 	stw	r2,8(r21)
    eca0:	b5800204 	addi	r22,r22,8
    eca4:	bdc00204 	addi	r23,r23,8
    eca8:	103fdb1e 	bne	r2,zero,ec18 <__alt_mem_Flash_flash_data+0xf400ec18>
    ecac:	0005883a 	mov	r2,zero
    ecb0:	003fe806 	br	ec54 <__alt_mem_Flash_flash_data+0xf400ec54>
    ecb4:	000ac9c0 	call	ac9c <__sfvwrite_r>
    ecb8:	003fe606 	br	ec54 <__alt_mem_Flash_flash_data+0xf400ec54>

0000ecbc <__sprint_r>:
    ecbc:	30c00217 	ldw	r3,8(r6)
    ecc0:	18000126 	beq	r3,zero,ecc8 <__sprint_r+0xc>
    ecc4:	000ebc01 	jmpi	ebc0 <__sprint_r.part.0>
    ecc8:	30000115 	stw	zero,4(r6)
    eccc:	0005883a 	mov	r2,zero
    ecd0:	f800283a 	ret

0000ecd4 <___vfiprintf_internal_r>:
    ecd4:	deffca04 	addi	sp,sp,-216
    ecd8:	dd803215 	stw	r22,200(sp)
    ecdc:	dd403115 	stw	r21,196(sp)
    ece0:	dfc03515 	stw	ra,212(sp)
    ece4:	df003415 	stw	fp,208(sp)
    ece8:	ddc03315 	stw	r23,204(sp)
    ecec:	dd003015 	stw	r20,192(sp)
    ecf0:	dcc02f15 	stw	r19,188(sp)
    ecf4:	dc802e15 	stw	r18,184(sp)
    ecf8:	dc402d15 	stw	r17,180(sp)
    ecfc:	dc002c15 	stw	r16,176(sp)
    ed00:	d9002015 	stw	r4,128(sp)
    ed04:	d9c02215 	stw	r7,136(sp)
    ed08:	282b883a 	mov	r21,r5
    ed0c:	302d883a 	mov	r22,r6
    ed10:	20000226 	beq	r4,zero,ed1c <___vfiprintf_internal_r+0x48>
    ed14:	20800e17 	ldw	r2,56(r4)
    ed18:	1001b126 	beq	r2,zero,f3e0 <___vfiprintf_internal_r+0x70c>
    ed1c:	a880030b 	ldhu	r2,12(r21)
    ed20:	10c8000c 	andi	r3,r2,8192
    ed24:	1800061e 	bne	r3,zero,ed40 <___vfiprintf_internal_r+0x6c>
    ed28:	a9001917 	ldw	r4,100(r21)
    ed2c:	00f7ffc4 	movi	r3,-8193
    ed30:	10880014 	ori	r2,r2,8192
    ed34:	20c6703a 	and	r3,r4,r3
    ed38:	a880030d 	sth	r2,12(r21)
    ed3c:	a8c01915 	stw	r3,100(r21)
    ed40:	10c0020c 	andi	r3,r2,8
    ed44:	18018926 	beq	r3,zero,f36c <___vfiprintf_internal_r+0x698>
    ed48:	a8c00417 	ldw	r3,16(r21)
    ed4c:	18018726 	beq	r3,zero,f36c <___vfiprintf_internal_r+0x698>
    ed50:	1080068c 	andi	r2,r2,26
    ed54:	00c00284 	movi	r3,10
    ed58:	10c18c26 	beq	r2,r3,f38c <___vfiprintf_internal_r+0x6b8>
    ed5c:	d8801a04 	addi	r2,sp,104
    ed60:	d8c019c4 	addi	r3,sp,103
    ed64:	070000b4 	movhi	fp,2
    ed68:	05c000b4 	movhi	r23,2
    ed6c:	10c9c83a 	sub	r4,r2,r3
    ed70:	e7171604 	addi	fp,fp,23640
    ed74:	bdd71204 	addi	r23,r23,23624
    ed78:	d8801e15 	stw	r2,120(sp)
    ed7c:	d8c01f15 	stw	r3,124(sp)
    ed80:	dec01a15 	stw	sp,104(sp)
    ed84:	d8001c15 	stw	zero,112(sp)
    ed88:	d8001b15 	stw	zero,108(sp)
    ed8c:	d8002615 	stw	zero,152(sp)
    ed90:	d8002315 	stw	zero,140(sp)
    ed94:	d9002715 	stw	r4,156(sp)
    ed98:	d811883a 	mov	r8,sp
    ed9c:	dd402115 	stw	r21,132(sp)
    eda0:	b021883a 	mov	r16,r22
    eda4:	80800007 	ldb	r2,0(r16)
    eda8:	10037226 	beq	r2,zero,fb74 <___vfiprintf_internal_r+0xea0>
    edac:	01000944 	movi	r4,37
    edb0:	11037026 	beq	r2,r4,fb74 <___vfiprintf_internal_r+0xea0>
    edb4:	8005883a 	mov	r2,r16
    edb8:	00000106 	br	edc0 <___vfiprintf_internal_r+0xec>
    edbc:	19000326 	beq	r3,r4,edcc <___vfiprintf_internal_r+0xf8>
    edc0:	10800044 	addi	r2,r2,1
    edc4:	10c00007 	ldb	r3,0(r2)
    edc8:	183ffc1e 	bne	r3,zero,edbc <__alt_mem_Flash_flash_data+0xf400edbc>
    edcc:	1425c83a 	sub	r18,r2,r16
    edd0:	1023883a 	mov	r17,r2
    edd4:	90001026 	beq	r18,zero,ee18 <___vfiprintf_internal_r+0x144>
    edd8:	d8c01c17 	ldw	r3,112(sp)
    eddc:	d8801b17 	ldw	r2,108(sp)
    ede0:	44000015 	stw	r16,0(r8)
    ede4:	90c7883a 	add	r3,r18,r3
    ede8:	10800044 	addi	r2,r2,1
    edec:	44800115 	stw	r18,4(r8)
    edf0:	d8c01c15 	stw	r3,112(sp)
    edf4:	d8801b15 	stw	r2,108(sp)
    edf8:	010001c4 	movi	r4,7
    edfc:	2080750e 	bge	r4,r2,efd4 <___vfiprintf_internal_r+0x300>
    ee00:	18036f1e 	bne	r3,zero,fbc0 <___vfiprintf_internal_r+0xeec>
    ee04:	d8802317 	ldw	r2,140(sp)
    ee08:	d8001b15 	stw	zero,108(sp)
    ee0c:	d811883a 	mov	r8,sp
    ee10:	1485883a 	add	r2,r2,r18
    ee14:	d8802315 	stw	r2,140(sp)
    ee18:	88800007 	ldb	r2,0(r17)
    ee1c:	10041026 	beq	r2,zero,fe60 <___vfiprintf_internal_r+0x118c>
    ee20:	88c00047 	ldb	r3,1(r17)
    ee24:	88800044 	addi	r2,r17,1
    ee28:	d8001d85 	stb	zero,118(sp)
    ee2c:	000f883a 	mov	r7,zero
    ee30:	027fffc4 	movi	r9,-1
    ee34:	0025883a 	mov	r18,zero
    ee38:	002b883a 	mov	r21,zero
    ee3c:	01401604 	movi	r5,88
    ee40:	01800244 	movi	r6,9
    ee44:	03400a84 	movi	r13,42
    ee48:	03001b04 	movi	r12,108
    ee4c:	14000044 	addi	r16,r2,1
    ee50:	18bff804 	addi	r2,r3,-32
    ee54:	28825536 	bltu	r5,r2,f7ac <___vfiprintf_internal_r+0xad8>
    ee58:	100490ba 	slli	r2,r2,2
    ee5c:	01000074 	movhi	r4,1
    ee60:	213b9c04 	addi	r4,r4,-4496
    ee64:	1105883a 	add	r2,r2,r4
    ee68:	10800017 	ldw	r2,0(r2)
    ee6c:	1000683a 	jmp	r2
    ee70:	0000f570 	cmpltui	zero,zero,981
    ee74:	0000f7ac 	andhi	zero,zero,990
    ee78:	0000f7ac 	andhi	zero,zero,990
    ee7c:	0000f590 	cmplti	zero,zero,982
    ee80:	0000f7ac 	andhi	zero,zero,990
    ee84:	0000f7ac 	andhi	zero,zero,990
    ee88:	0000f7ac 	andhi	zero,zero,990
    ee8c:	0000f7ac 	andhi	zero,zero,990
    ee90:	0000f7ac 	andhi	zero,zero,990
    ee94:	0000f7ac 	andhi	zero,zero,990
    ee98:	0000f5a0 	cmpeqi	zero,zero,982
    ee9c:	0000f5c0 	call	f5c <collision+0x1c8>
    eea0:	0000f7ac 	andhi	zero,zero,990
    eea4:	0000f3e8 	cmpgeui	zero,zero,975
    eea8:	0000f4d4 	movui	zero,979
    eeac:	0000f7ac 	andhi	zero,zero,990
    eeb0:	0000f454 	movui	zero,977
    eeb4:	0000f464 	muli	zero,zero,977
    eeb8:	0000f464 	muli	zero,zero,977
    eebc:	0000f464 	muli	zero,zero,977
    eec0:	0000f464 	muli	zero,zero,977
    eec4:	0000f464 	muli	zero,zero,977
    eec8:	0000f464 	muli	zero,zero,977
    eecc:	0000f464 	muli	zero,zero,977
    eed0:	0000f464 	muli	zero,zero,977
    eed4:	0000f464 	muli	zero,zero,977
    eed8:	0000f7ac 	andhi	zero,zero,990
    eedc:	0000f7ac 	andhi	zero,zero,990
    eee0:	0000f7ac 	andhi	zero,zero,990
    eee4:	0000f7ac 	andhi	zero,zero,990
    eee8:	0000f7ac 	andhi	zero,zero,990
    eeec:	0000f7ac 	andhi	zero,zero,990
    eef0:	0000f7ac 	andhi	zero,zero,990
    eef4:	0000f7ac 	andhi	zero,zero,990
    eef8:	0000f7ac 	andhi	zero,zero,990
    eefc:	0000f7ac 	andhi	zero,zero,990
    ef00:	0000f490 	cmplti	zero,zero,978
    ef04:	0000f7ac 	andhi	zero,zero,990
    ef08:	0000f7ac 	andhi	zero,zero,990
    ef0c:	0000f7ac 	andhi	zero,zero,990
    ef10:	0000f7ac 	andhi	zero,zero,990
    ef14:	0000f7ac 	andhi	zero,zero,990
    ef18:	0000f7ac 	andhi	zero,zero,990
    ef1c:	0000f7ac 	andhi	zero,zero,990
    ef20:	0000f7ac 	andhi	zero,zero,990
    ef24:	0000f7ac 	andhi	zero,zero,990
    ef28:	0000f7ac 	andhi	zero,zero,990
    ef2c:	0000f01c 	xori	zero,zero,960
    ef30:	0000f7ac 	andhi	zero,zero,990
    ef34:	0000f7ac 	andhi	zero,zero,990
    ef38:	0000f7ac 	andhi	zero,zero,990
    ef3c:	0000f7ac 	andhi	zero,zero,990
    ef40:	0000f7ac 	andhi	zero,zero,990
    ef44:	0000efe8 	cmpgeui	zero,zero,959
    ef48:	0000f7ac 	andhi	zero,zero,990
    ef4c:	0000f7ac 	andhi	zero,zero,990
    ef50:	0000f630 	cmpltui	zero,zero,984
    ef54:	0000f7ac 	andhi	zero,zero,990
    ef58:	0000f7ac 	andhi	zero,zero,990
    ef5c:	0000f7ac 	andhi	zero,zero,990
    ef60:	0000f7ac 	andhi	zero,zero,990
    ef64:	0000f7ac 	andhi	zero,zero,990
    ef68:	0000f7ac 	andhi	zero,zero,990
    ef6c:	0000f7ac 	andhi	zero,zero,990
    ef70:	0000f7ac 	andhi	zero,zero,990
    ef74:	0000f7ac 	andhi	zero,zero,990
    ef78:	0000f7ac 	andhi	zero,zero,990
    ef7c:	0000f5d0 	cmplti	zero,zero,983
    ef80:	0000f5fc 	xorhi	zero,zero,983
    ef84:	0000f7ac 	andhi	zero,zero,990
    ef88:	0000f7ac 	andhi	zero,zero,990
    ef8c:	0000f7ac 	andhi	zero,zero,990
    ef90:	0000f6d8 	cmpnei	zero,zero,987
    ef94:	0000f5fc 	xorhi	zero,zero,983
    ef98:	0000f7ac 	andhi	zero,zero,990
    ef9c:	0000f7ac 	andhi	zero,zero,990
    efa0:	0000f6e8 	cmpgeui	zero,zero,987
    efa4:	0000f7ac 	andhi	zero,zero,990
    efa8:	0000f514 	movui	zero,980
    efac:	0000f020 	cmpeqi	zero,zero,960
    efb0:	0000f6fc 	xorhi	zero,zero,987
    efb4:	0000f73c 	xorhi	zero,zero,988
    efb8:	0000f7ac 	andhi	zero,zero,990
    efbc:	0000f684 	movi	zero,986
    efc0:	0000f7ac 	andhi	zero,zero,990
    efc4:	0000efec 	andhi	zero,zero,959
    efc8:	0000f7ac 	andhi	zero,zero,990
    efcc:	0000f7ac 	andhi	zero,zero,990
    efd0:	0000f74c 	andi	zero,zero,989
    efd4:	42000204 	addi	r8,r8,8
    efd8:	d8802317 	ldw	r2,140(sp)
    efdc:	1485883a 	add	r2,r2,r18
    efe0:	d8802315 	stw	r2,140(sp)
    efe4:	003f8c06 	br	ee18 <__alt_mem_Flash_flash_data+0xf400ee18>
    efe8:	ad400414 	ori	r21,r21,16
    efec:	a880080c 	andi	r2,r21,32
    eff0:	1001e61e 	bne	r2,zero,f78c <___vfiprintf_internal_r+0xab8>
    eff4:	a880040c 	andi	r2,r21,16
    eff8:	10034726 	beq	r2,zero,fd18 <___vfiprintf_internal_r+0x1044>
    effc:	d8802217 	ldw	r2,136(sp)
    f000:	001b883a 	mov	r13,zero
    f004:	15800017 	ldw	r22,0(r2)
    f008:	10800104 	addi	r2,r2,4
    f00c:	d8802215 	stw	r2,136(sp)
    f010:	b009883a 	mov	r4,r22
    f014:	00800044 	movi	r2,1
    f018:	00000c06 	br	f04c <___vfiprintf_internal_r+0x378>
    f01c:	ad400414 	ori	r21,r21,16
    f020:	a880080c 	andi	r2,r21,32
    f024:	1001491e 	bne	r2,zero,f54c <___vfiprintf_internal_r+0x878>
    f028:	a880040c 	andi	r2,r21,16
    f02c:	10032d26 	beq	r2,zero,fce4 <___vfiprintf_internal_r+0x1010>
    f030:	d9002217 	ldw	r4,136(sp)
    f034:	001b883a 	mov	r13,zero
    f038:	0005883a 	mov	r2,zero
    f03c:	25800017 	ldw	r22,0(r4)
    f040:	21000104 	addi	r4,r4,4
    f044:	d9002215 	stw	r4,136(sp)
    f048:	b009883a 	mov	r4,r22
    f04c:	d8001d85 	stb	zero,118(sp)
    f050:	4827883a 	mov	r19,r9
    f054:	001d883a 	mov	r14,zero
    f058:	48000216 	blt	r9,zero,f064 <___vfiprintf_internal_r+0x390>
    f05c:	00ffdfc4 	movi	r3,-129
    f060:	a8ea703a 	and	r21,r21,r3
    f064:	2002071e 	bne	r4,zero,f884 <___vfiprintf_internal_r+0xbb0>
    f068:	4802ad26 	beq	r9,zero,fb20 <___vfiprintf_internal_r+0xe4c>
    f06c:	10803fcc 	andi	r2,r2,255
    f070:	00c00044 	movi	r3,1
    f074:	10c22b26 	beq	r2,r3,f924 <___vfiprintf_internal_r+0xc50>
    f078:	00c00084 	movi	r3,2
    f07c:	dd001a04 	addi	r20,sp,104
    f080:	10c0dd1e 	bne	r2,r3,f3f8 <___vfiprintf_internal_r+0x724>
    f084:	d9002617 	ldw	r4,152(sp)
    f088:	b08003cc 	andi	r2,r22,15
    f08c:	6806973a 	slli	r3,r13,28
    f090:	2085883a 	add	r2,r4,r2
    f094:	b02cd13a 	srli	r22,r22,4
    f098:	10800003 	ldbu	r2,0(r2)
    f09c:	681ad13a 	srli	r13,r13,4
    f0a0:	a53fffc4 	addi	r20,r20,-1
    f0a4:	1dacb03a 	or	r22,r3,r22
    f0a8:	a0800005 	stb	r2,0(r20)
    f0ac:	b344b03a 	or	r2,r22,r13
    f0b0:	103ff51e 	bne	r2,zero,f088 <__alt_mem_Flash_flash_data+0xf400f088>
    f0b4:	d9001e17 	ldw	r4,120(sp)
    f0b8:	2527c83a 	sub	r19,r4,r20
    f0bc:	9823883a 	mov	r17,r19
    f0c0:	9a40010e 	bge	r19,r9,f0c8 <___vfiprintf_internal_r+0x3f4>
    f0c4:	4823883a 	mov	r17,r9
    f0c8:	73803fcc 	andi	r14,r14,255
    f0cc:	7380201c 	xori	r14,r14,128
    f0d0:	73bfe004 	addi	r14,r14,-128
    f0d4:	70000126 	beq	r14,zero,f0dc <___vfiprintf_internal_r+0x408>
    f0d8:	8c400044 	addi	r17,r17,1
    f0dc:	ab40008c 	andi	r13,r21,2
    f0e0:	68000126 	beq	r13,zero,f0e8 <___vfiprintf_internal_r+0x414>
    f0e4:	8c400084 	addi	r17,r17,2
    f0e8:	ad80210c 	andi	r22,r21,132
    f0ec:	b001c51e 	bne	r22,zero,f804 <___vfiprintf_internal_r+0xb30>
    f0f0:	9447c83a 	sub	r3,r18,r17
    f0f4:	00c1c30e 	bge	zero,r3,f804 <___vfiprintf_internal_r+0xb30>
    f0f8:	01c00404 	movi	r7,16
    f0fc:	d8801c17 	ldw	r2,112(sp)
    f100:	38c37b0e 	bge	r7,r3,fef0 <___vfiprintf_internal_r+0x121c>
    f104:	010000b4 	movhi	r4,2
    f108:	21171604 	addi	r4,r4,23640
    f10c:	dc002915 	stw	r16,164(sp)
    f110:	d9801b17 	ldw	r6,108(sp)
    f114:	d9002415 	stw	r4,144(sp)
    f118:	03c001c4 	movi	r15,7
    f11c:	da402515 	stw	r9,148(sp)
    f120:	db402815 	stw	r13,160(sp)
    f124:	1821883a 	mov	r16,r3
    f128:	00000506 	br	f140 <___vfiprintf_internal_r+0x46c>
    f12c:	31400084 	addi	r5,r6,2
    f130:	42000204 	addi	r8,r8,8
    f134:	200d883a 	mov	r6,r4
    f138:	843ffc04 	addi	r16,r16,-16
    f13c:	3c000d0e 	bge	r7,r16,f174 <___vfiprintf_internal_r+0x4a0>
    f140:	10800404 	addi	r2,r2,16
    f144:	31000044 	addi	r4,r6,1
    f148:	47000015 	stw	fp,0(r8)
    f14c:	41c00115 	stw	r7,4(r8)
    f150:	d8801c15 	stw	r2,112(sp)
    f154:	d9001b15 	stw	r4,108(sp)
    f158:	793ff40e 	bge	r15,r4,f12c <__alt_mem_Flash_flash_data+0xf400f12c>
    f15c:	10019b1e 	bne	r2,zero,f7cc <___vfiprintf_internal_r+0xaf8>
    f160:	843ffc04 	addi	r16,r16,-16
    f164:	000d883a 	mov	r6,zero
    f168:	01400044 	movi	r5,1
    f16c:	d811883a 	mov	r8,sp
    f170:	3c3ff316 	blt	r7,r16,f140 <__alt_mem_Flash_flash_data+0xf400f140>
    f174:	8007883a 	mov	r3,r16
    f178:	da402517 	ldw	r9,148(sp)
    f17c:	db402817 	ldw	r13,160(sp)
    f180:	dc002917 	ldw	r16,164(sp)
    f184:	d9002417 	ldw	r4,144(sp)
    f188:	1885883a 	add	r2,r3,r2
    f18c:	40c00115 	stw	r3,4(r8)
    f190:	41000015 	stw	r4,0(r8)
    f194:	d8801c15 	stw	r2,112(sp)
    f198:	d9401b15 	stw	r5,108(sp)
    f19c:	00c001c4 	movi	r3,7
    f1a0:	19426a16 	blt	r3,r5,fb4c <___vfiprintf_internal_r+0xe78>
    f1a4:	d8c01d87 	ldb	r3,118(sp)
    f1a8:	42000204 	addi	r8,r8,8
    f1ac:	29000044 	addi	r4,r5,1
    f1b0:	1801991e 	bne	r3,zero,f818 <___vfiprintf_internal_r+0xb44>
    f1b4:	68000c26 	beq	r13,zero,f1e8 <___vfiprintf_internal_r+0x514>
    f1b8:	d8c01d04 	addi	r3,sp,116
    f1bc:	10800084 	addi	r2,r2,2
    f1c0:	40c00015 	stw	r3,0(r8)
    f1c4:	00c00084 	movi	r3,2
    f1c8:	40c00115 	stw	r3,4(r8)
    f1cc:	d8801c15 	stw	r2,112(sp)
    f1d0:	d9001b15 	stw	r4,108(sp)
    f1d4:	00c001c4 	movi	r3,7
    f1d8:	19024c16 	blt	r3,r4,fb0c <___vfiprintf_internal_r+0xe38>
    f1dc:	200b883a 	mov	r5,r4
    f1e0:	42000204 	addi	r8,r8,8
    f1e4:	21000044 	addi	r4,r4,1
    f1e8:	00c02004 	movi	r3,128
    f1ec:	b0c20126 	beq	r22,r3,f9f4 <___vfiprintf_internal_r+0xd20>
    f1f0:	4cedc83a 	sub	r22,r9,r19
    f1f4:	0580230e 	bge	zero,r22,f284 <___vfiprintf_internal_r+0x5b0>
    f1f8:	01c00404 	movi	r7,16
    f1fc:	3d83140e 	bge	r7,r22,fe50 <___vfiprintf_internal_r+0x117c>
    f200:	010000b4 	movhi	r4,2
    f204:	21171204 	addi	r4,r4,23624
    f208:	d9002415 	stw	r4,144(sp)
    f20c:	034001c4 	movi	r13,7
    f210:	00000506 	br	f228 <___vfiprintf_internal_r+0x554>
    f214:	29000084 	addi	r4,r5,2
    f218:	42000204 	addi	r8,r8,8
    f21c:	180b883a 	mov	r5,r3
    f220:	b5bffc04 	addi	r22,r22,-16
    f224:	3d800d0e 	bge	r7,r22,f25c <___vfiprintf_internal_r+0x588>
    f228:	10800404 	addi	r2,r2,16
    f22c:	28c00044 	addi	r3,r5,1
    f230:	45c00015 	stw	r23,0(r8)
    f234:	41c00115 	stw	r7,4(r8)
    f238:	d8801c15 	stw	r2,112(sp)
    f23c:	d8c01b15 	stw	r3,108(sp)
    f240:	68fff40e 	bge	r13,r3,f214 <__alt_mem_Flash_flash_data+0xf400f214>
    f244:	1001811e 	bne	r2,zero,f84c <___vfiprintf_internal_r+0xb78>
    f248:	b5bffc04 	addi	r22,r22,-16
    f24c:	01000044 	movi	r4,1
    f250:	000b883a 	mov	r5,zero
    f254:	d811883a 	mov	r8,sp
    f258:	3dbff316 	blt	r7,r22,f228 <__alt_mem_Flash_flash_data+0xf400f228>
    f25c:	d8c02417 	ldw	r3,144(sp)
    f260:	1585883a 	add	r2,r2,r22
    f264:	45800115 	stw	r22,4(r8)
    f268:	40c00015 	stw	r3,0(r8)
    f26c:	d8801c15 	stw	r2,112(sp)
    f270:	d9001b15 	stw	r4,108(sp)
    f274:	00c001c4 	movi	r3,7
    f278:	1901d016 	blt	r3,r4,f9bc <___vfiprintf_internal_r+0xce8>
    f27c:	42000204 	addi	r8,r8,8
    f280:	21000044 	addi	r4,r4,1
    f284:	14c5883a 	add	r2,r2,r19
    f288:	45000015 	stw	r20,0(r8)
    f28c:	44c00115 	stw	r19,4(r8)
    f290:	d8801c15 	stw	r2,112(sp)
    f294:	d9001b15 	stw	r4,108(sp)
    f298:	00c001c4 	movi	r3,7
    f29c:	1901cf0e 	bge	r3,r4,f9dc <___vfiprintf_internal_r+0xd08>
    f2a0:	1002361e 	bne	r2,zero,fb7c <___vfiprintf_internal_r+0xea8>
    f2a4:	d8001b15 	stw	zero,108(sp)
    f2a8:	aac0010c 	andi	r11,r21,4
    f2ac:	58002826 	beq	r11,zero,f350 <___vfiprintf_internal_r+0x67c>
    f2b0:	9467c83a 	sub	r19,r18,r17
    f2b4:	d811883a 	mov	r8,sp
    f2b8:	04c3340e 	bge	zero,r19,ff8c <___vfiprintf_internal_r+0x12b8>
    f2bc:	01c00404 	movi	r7,16
    f2c0:	3cc31b0e 	bge	r7,r19,ff30 <___vfiprintf_internal_r+0x125c>
    f2c4:	00c000b4 	movhi	r3,2
    f2c8:	18d71604 	addi	r3,r3,23640
    f2cc:	d9001b17 	ldw	r4,108(sp)
    f2d0:	d8c02415 	stw	r3,144(sp)
    f2d4:	382b883a 	mov	r21,r7
    f2d8:	050001c4 	movi	r20,7
    f2dc:	dd802017 	ldw	r22,128(sp)
    f2e0:	00000506 	br	f2f8 <___vfiprintf_internal_r+0x624>
    f2e4:	21400084 	addi	r5,r4,2
    f2e8:	42000204 	addi	r8,r8,8
    f2ec:	1809883a 	mov	r4,r3
    f2f0:	9cfffc04 	addi	r19,r19,-16
    f2f4:	acc00d0e 	bge	r21,r19,f32c <___vfiprintf_internal_r+0x658>
    f2f8:	10800404 	addi	r2,r2,16
    f2fc:	20c00044 	addi	r3,r4,1
    f300:	47000015 	stw	fp,0(r8)
    f304:	45400115 	stw	r21,4(r8)
    f308:	d8801c15 	stw	r2,112(sp)
    f30c:	d8c01b15 	stw	r3,108(sp)
    f310:	a0fff40e 	bge	r20,r3,f2e4 <__alt_mem_Flash_flash_data+0xf400f2e4>
    f314:	10019f1e 	bne	r2,zero,f994 <___vfiprintf_internal_r+0xcc0>
    f318:	9cfffc04 	addi	r19,r19,-16
    f31c:	01400044 	movi	r5,1
    f320:	0009883a 	mov	r4,zero
    f324:	d811883a 	mov	r8,sp
    f328:	acfff316 	blt	r21,r19,f2f8 <__alt_mem_Flash_flash_data+0xf400f2f8>
    f32c:	d8c02417 	ldw	r3,144(sp)
    f330:	14c5883a 	add	r2,r2,r19
    f334:	44c00115 	stw	r19,4(r8)
    f338:	40c00015 	stw	r3,0(r8)
    f33c:	d8801c15 	stw	r2,112(sp)
    f340:	d9401b15 	stw	r5,108(sp)
    f344:	00c001c4 	movi	r3,7
    f348:	1941810e 	bge	r3,r5,f950 <___vfiprintf_internal_r+0xc7c>
    f34c:	10017a1e 	bne	r2,zero,f938 <___vfiprintf_internal_r+0xc64>
    f350:	8c82a416 	blt	r17,r18,fde4 <___vfiprintf_internal_r+0x1110>
    f354:	d9002317 	ldw	r4,140(sp)
    f358:	2449883a 	add	r4,r4,r17
    f35c:	d9002315 	stw	r4,140(sp)
    f360:	d8001b15 	stw	zero,108(sp)
    f364:	d811883a 	mov	r8,sp
    f368:	003e8e06 	br	eda4 <__alt_mem_Flash_flash_data+0xf400eda4>
    f36c:	d9002017 	ldw	r4,128(sp)
    f370:	a80b883a 	mov	r5,r21
    f374:	00087d80 	call	87d8 <__swsetup_r>
    f378:	10000c1e 	bne	r2,zero,f3ac <___vfiprintf_internal_r+0x6d8>
    f37c:	a880030b 	ldhu	r2,12(r21)
    f380:	00c00284 	movi	r3,10
    f384:	1080068c 	andi	r2,r2,26
    f388:	10fe741e 	bne	r2,r3,ed5c <__alt_mem_Flash_flash_data+0xf400ed5c>
    f38c:	a880038f 	ldh	r2,14(r21)
    f390:	103e7216 	blt	r2,zero,ed5c <__alt_mem_Flash_flash_data+0xf400ed5c>
    f394:	d9002017 	ldw	r4,128(sp)
    f398:	d9c02217 	ldw	r7,136(sp)
    f39c:	a80b883a 	mov	r5,r21
    f3a0:	b00d883a 	mov	r6,r22
    f3a4:	000ffc80 	call	ffc8 <__sbprintf>
    f3a8:	00000106 	br	f3b0 <___vfiprintf_internal_r+0x6dc>
    f3ac:	00bfffc4 	movi	r2,-1
    f3b0:	dfc03517 	ldw	ra,212(sp)
    f3b4:	df003417 	ldw	fp,208(sp)
    f3b8:	ddc03317 	ldw	r23,204(sp)
    f3bc:	dd803217 	ldw	r22,200(sp)
    f3c0:	dd403117 	ldw	r21,196(sp)
    f3c4:	dd003017 	ldw	r20,192(sp)
    f3c8:	dcc02f17 	ldw	r19,188(sp)
    f3cc:	dc802e17 	ldw	r18,184(sp)
    f3d0:	dc402d17 	ldw	r17,180(sp)
    f3d4:	dc002c17 	ldw	r16,176(sp)
    f3d8:	dec03604 	addi	sp,sp,216
    f3dc:	f800283a 	ret
    f3e0:	000a8380 	call	a838 <__sinit>
    f3e4:	003e4d06 	br	ed1c <__alt_mem_Flash_flash_data+0xf400ed1c>
    f3e8:	8005883a 	mov	r2,r16
    f3ec:	ad400114 	ori	r21,r21,4
    f3f0:	80c00007 	ldb	r3,0(r16)
    f3f4:	003e9506 	br	ee4c <__alt_mem_Flash_flash_data+0xf400ee4c>
    f3f8:	b006d0fa 	srli	r3,r22,3
    f3fc:	6808977a 	slli	r4,r13,29
    f400:	681ad0fa 	srli	r13,r13,3
    f404:	b58001cc 	andi	r22,r22,7
    f408:	b0800c04 	addi	r2,r22,48
    f40c:	a53fffc4 	addi	r20,r20,-1
    f410:	20ecb03a 	or	r22,r4,r3
    f414:	a0800005 	stb	r2,0(r20)
    f418:	b346b03a 	or	r3,r22,r13
    f41c:	183ff61e 	bne	r3,zero,f3f8 <__alt_mem_Flash_flash_data+0xf400f3f8>
    f420:	a8c0004c 	andi	r3,r21,1
    f424:	a009883a 	mov	r4,r20
    f428:	18013b26 	beq	r3,zero,f918 <___vfiprintf_internal_r+0xc44>
    f42c:	10803fcc 	andi	r2,r2,255
    f430:	1080201c 	xori	r2,r2,128
    f434:	10bfe004 	addi	r2,r2,-128
    f438:	00c00c04 	movi	r3,48
    f43c:	10ff1d26 	beq	r2,r3,f0b4 <__alt_mem_Flash_flash_data+0xf400f0b4>
    f440:	d8801e17 	ldw	r2,120(sp)
    f444:	a53fffc4 	addi	r20,r20,-1
    f448:	20ffffc5 	stb	r3,-1(r4)
    f44c:	1527c83a 	sub	r19,r2,r20
    f450:	003f1a06 	br	f0bc <__alt_mem_Flash_flash_data+0xf400f0bc>
    f454:	ad402014 	ori	r21,r21,128
    f458:	8005883a 	mov	r2,r16
    f45c:	80c00007 	ldb	r3,0(r16)
    f460:	003e7a06 	br	ee4c <__alt_mem_Flash_flash_data+0xf400ee4c>
    f464:	8005883a 	mov	r2,r16
    f468:	0025883a 	mov	r18,zero
    f46c:	193ff404 	addi	r4,r3,-48
    f470:	10c00007 	ldb	r3,0(r2)
    f474:	948002a4 	muli	r18,r18,10
    f478:	84000044 	addi	r16,r16,1
    f47c:	8005883a 	mov	r2,r16
    f480:	9125883a 	add	r18,r18,r4
    f484:	193ff404 	addi	r4,r3,-48
    f488:	313ff92e 	bgeu	r6,r4,f470 <__alt_mem_Flash_flash_data+0xf400f470>
    f48c:	003e7006 	br	ee50 <__alt_mem_Flash_flash_data+0xf400ee50>
    f490:	ad400414 	ori	r21,r21,16
    f494:	d9c01d85 	stb	r7,118(sp)
    f498:	a880080c 	andi	r2,r21,32
    f49c:	d8c02217 	ldw	r3,136(sp)
    f4a0:	10005a26 	beq	r2,zero,f60c <___vfiprintf_internal_r+0x938>
    f4a4:	d9002217 	ldw	r4,136(sp)
    f4a8:	18800117 	ldw	r2,4(r3)
    f4ac:	1d800017 	ldw	r22,0(r3)
    f4b0:	21000204 	addi	r4,r4,8
    f4b4:	d9002215 	stw	r4,136(sp)
    f4b8:	101b883a 	mov	r13,r2
    f4bc:	1001f416 	blt	r2,zero,fc90 <___vfiprintf_internal_r+0xfbc>
    f4c0:	db801d83 	ldbu	r14,118(sp)
    f4c4:	4827883a 	mov	r19,r9
    f4c8:	00800044 	movi	r2,1
    f4cc:	b348b03a 	or	r4,r22,r13
    f4d0:	003ee106 	br	f058 <__alt_mem_Flash_flash_data+0xf400f058>
    f4d4:	80c00007 	ldb	r3,0(r16)
    f4d8:	80800044 	addi	r2,r16,1
    f4dc:	1b42a326 	beq	r3,r13,ff6c <___vfiprintf_internal_r+0x1298>
    f4e0:	193ff404 	addi	r4,r3,-48
    f4e4:	1021883a 	mov	r16,r2
    f4e8:	0013883a 	mov	r9,zero
    f4ec:	313e5836 	bltu	r6,r4,ee50 <__alt_mem_Flash_flash_data+0xf400ee50>
    f4f0:	80c00007 	ldb	r3,0(r16)
    f4f4:	4a4002a4 	muli	r9,r9,10
    f4f8:	84000044 	addi	r16,r16,1
    f4fc:	2253883a 	add	r9,r4,r9
    f500:	193ff404 	addi	r4,r3,-48
    f504:	313ffa2e 	bgeu	r6,r4,f4f0 <__alt_mem_Flash_flash_data+0xf400f4f0>
    f508:	483e510e 	bge	r9,zero,ee50 <__alt_mem_Flash_flash_data+0xf400ee50>
    f50c:	027fffc4 	movi	r9,-1
    f510:	003e4f06 	br	ee50 <__alt_mem_Flash_flash_data+0xf400ee50>
    f514:	d9c01d85 	stb	r7,118(sp)
    f518:	a880080c 	andi	r2,r21,32
    f51c:	10020826 	beq	r2,zero,fd40 <___vfiprintf_internal_r+0x106c>
    f520:	d8c02217 	ldw	r3,136(sp)
    f524:	d9002317 	ldw	r4,140(sp)
    f528:	18800017 	ldw	r2,0(r3)
    f52c:	2007d7fa 	srai	r3,r4,31
    f530:	d9002217 	ldw	r4,136(sp)
    f534:	10c00115 	stw	r3,4(r2)
    f538:	21000104 	addi	r4,r4,4
    f53c:	d9002215 	stw	r4,136(sp)
    f540:	d9002317 	ldw	r4,140(sp)
    f544:	11000015 	stw	r4,0(r2)
    f548:	003e1606 	br	eda4 <__alt_mem_Flash_flash_data+0xf400eda4>
    f54c:	d8802217 	ldw	r2,136(sp)
    f550:	d8c02217 	ldw	r3,136(sp)
    f554:	15800017 	ldw	r22,0(r2)
    f558:	13400117 	ldw	r13,4(r2)
    f55c:	18c00204 	addi	r3,r3,8
    f560:	0005883a 	mov	r2,zero
    f564:	d8c02215 	stw	r3,136(sp)
    f568:	b348b03a 	or	r4,r22,r13
    f56c:	003eb706 	br	f04c <__alt_mem_Flash_flash_data+0xf400f04c>
    f570:	38803fcc 	andi	r2,r7,255
    f574:	1080201c 	xori	r2,r2,128
    f578:	10bfe004 	addi	r2,r2,-128
    f57c:	1001e31e 	bne	r2,zero,fd0c <___vfiprintf_internal_r+0x1038>
    f580:	8005883a 	mov	r2,r16
    f584:	01c00804 	movi	r7,32
    f588:	80c00007 	ldb	r3,0(r16)
    f58c:	003e2f06 	br	ee4c <__alt_mem_Flash_flash_data+0xf400ee4c>
    f590:	ad400054 	ori	r21,r21,1
    f594:	8005883a 	mov	r2,r16
    f598:	80c00007 	ldb	r3,0(r16)
    f59c:	003e2b06 	br	ee4c <__alt_mem_Flash_flash_data+0xf400ee4c>
    f5a0:	d8c02217 	ldw	r3,136(sp)
    f5a4:	1c800017 	ldw	r18,0(r3)
    f5a8:	18c00104 	addi	r3,r3,4
    f5ac:	90023816 	blt	r18,zero,fe90 <___vfiprintf_internal_r+0x11bc>
    f5b0:	d8c02215 	stw	r3,136(sp)
    f5b4:	8005883a 	mov	r2,r16
    f5b8:	80c00007 	ldb	r3,0(r16)
    f5bc:	003e2306 	br	ee4c <__alt_mem_Flash_flash_data+0xf400ee4c>
    f5c0:	8005883a 	mov	r2,r16
    f5c4:	01c00ac4 	movi	r7,43
    f5c8:	80c00007 	ldb	r3,0(r16)
    f5cc:	003e1f06 	br	ee4c <__alt_mem_Flash_flash_data+0xf400ee4c>
    f5d0:	d8c02217 	ldw	r3,136(sp)
    f5d4:	04400044 	movi	r17,1
    f5d8:	d8001d85 	stb	zero,118(sp)
    f5dc:	18800017 	ldw	r2,0(r3)
    f5e0:	18c00104 	addi	r3,r3,4
    f5e4:	d8c02215 	stw	r3,136(sp)
    f5e8:	d8801005 	stb	r2,64(sp)
    f5ec:	8827883a 	mov	r19,r17
    f5f0:	dd001004 	addi	r20,sp,64
    f5f4:	0013883a 	mov	r9,zero
    f5f8:	003eb806 	br	f0dc <__alt_mem_Flash_flash_data+0xf400f0dc>
    f5fc:	d9c01d85 	stb	r7,118(sp)
    f600:	a880080c 	andi	r2,r21,32
    f604:	d8c02217 	ldw	r3,136(sp)
    f608:	103fa61e 	bne	r2,zero,f4a4 <__alt_mem_Flash_flash_data+0xf400f4a4>
    f60c:	a880040c 	andi	r2,r21,16
    f610:	1001dd26 	beq	r2,zero,fd88 <___vfiprintf_internal_r+0x10b4>
    f614:	1d800017 	ldw	r22,0(r3)
    f618:	d8802217 	ldw	r2,136(sp)
    f61c:	b01bd7fa 	srai	r13,r22,31
    f620:	10800104 	addi	r2,r2,4
    f624:	d8802215 	stw	r2,136(sp)
    f628:	6805883a 	mov	r2,r13
    f62c:	003fa306 	br	f4bc <__alt_mem_Flash_flash_data+0xf400f4bc>
    f630:	008000b4 	movhi	r2,2
    f634:	10969c04 	addi	r2,r2,23152
    f638:	d8802615 	stw	r2,152(sp)
    f63c:	d9c01d85 	stb	r7,118(sp)
    f640:	a880080c 	andi	r2,r21,32
    f644:	10004726 	beq	r2,zero,f764 <___vfiprintf_internal_r+0xa90>
    f648:	d9002217 	ldw	r4,136(sp)
    f64c:	25800017 	ldw	r22,0(r4)
    f650:	23400117 	ldw	r13,4(r4)
    f654:	21000204 	addi	r4,r4,8
    f658:	d9002215 	stw	r4,136(sp)
    f65c:	a880004c 	andi	r2,r21,1
    f660:	10014e26 	beq	r2,zero,fb9c <___vfiprintf_internal_r+0xec8>
    f664:	b348b03a 	or	r4,r22,r13
    f668:	20019c26 	beq	r4,zero,fcdc <___vfiprintf_internal_r+0x1008>
    f66c:	00800c04 	movi	r2,48
    f670:	d8801d05 	stb	r2,116(sp)
    f674:	d8c01d45 	stb	r3,117(sp)
    f678:	ad400094 	ori	r21,r21,2
    f67c:	00800084 	movi	r2,2
    f680:	003e7206 	br	f04c <__alt_mem_Flash_flash_data+0xf400f04c>
    f684:	d8c02217 	ldw	r3,136(sp)
    f688:	d8001d85 	stb	zero,118(sp)
    f68c:	1d000017 	ldw	r20,0(r3)
    f690:	1d800104 	addi	r22,r3,4
    f694:	a0021c26 	beq	r20,zero,ff08 <___vfiprintf_internal_r+0x1234>
    f698:	a009883a 	mov	r4,r20
    f69c:	48020016 	blt	r9,zero,fea0 <___vfiprintf_internal_r+0x11cc>
    f6a0:	480d883a 	mov	r6,r9
    f6a4:	000b883a 	mov	r5,zero
    f6a8:	da002a15 	stw	r8,168(sp)
    f6ac:	da402b15 	stw	r9,172(sp)
    f6b0:	000bd240 	call	bd24 <memchr>
    f6b4:	da002a17 	ldw	r8,168(sp)
    f6b8:	da402b17 	ldw	r9,172(sp)
    f6bc:	10022226 	beq	r2,zero,ff48 <___vfiprintf_internal_r+0x1274>
    f6c0:	1527c83a 	sub	r19,r2,r20
    f6c4:	4cc1c916 	blt	r9,r19,fdec <___vfiprintf_internal_r+0x1118>
    f6c8:	db801d83 	ldbu	r14,118(sp)
    f6cc:	dd802215 	stw	r22,136(sp)
    f6d0:	0013883a 	mov	r9,zero
    f6d4:	003e7906 	br	f0bc <__alt_mem_Flash_flash_data+0xf400f0bc>
    f6d8:	ad401014 	ori	r21,r21,64
    f6dc:	8005883a 	mov	r2,r16
    f6e0:	80c00007 	ldb	r3,0(r16)
    f6e4:	003dd906 	br	ee4c <__alt_mem_Flash_flash_data+0xf400ee4c>
    f6e8:	80c00007 	ldb	r3,0(r16)
    f6ec:	8005883a 	mov	r2,r16
    f6f0:	1b01e326 	beq	r3,r12,fe80 <___vfiprintf_internal_r+0x11ac>
    f6f4:	ad400414 	ori	r21,r21,16
    f6f8:	003dd406 	br	ee4c <__alt_mem_Flash_flash_data+0xf400ee4c>
    f6fc:	d9002217 	ldw	r4,136(sp)
    f700:	00800c04 	movi	r2,48
    f704:	d8801d05 	stb	r2,116(sp)
    f708:	25800017 	ldw	r22,0(r4)
    f70c:	00801e04 	movi	r2,120
    f710:	d8801d45 	stb	r2,117(sp)
    f714:	008000b4 	movhi	r2,2
    f718:	21000104 	addi	r4,r4,4
    f71c:	1096a104 	addi	r2,r2,23172
    f720:	d9002215 	stw	r4,136(sp)
    f724:	d8802615 	stw	r2,152(sp)
    f728:	001b883a 	mov	r13,zero
    f72c:	ad400094 	ori	r21,r21,2
    f730:	00800084 	movi	r2,2
    f734:	b009883a 	mov	r4,r22
    f738:	003e4406 	br	f04c <__alt_mem_Flash_flash_data+0xf400f04c>
    f73c:	ad400814 	ori	r21,r21,32
    f740:	8005883a 	mov	r2,r16
    f744:	80c00007 	ldb	r3,0(r16)
    f748:	003dc006 	br	ee4c <__alt_mem_Flash_flash_data+0xf400ee4c>
    f74c:	008000b4 	movhi	r2,2
    f750:	1096a104 	addi	r2,r2,23172
    f754:	d8802615 	stw	r2,152(sp)
    f758:	d9c01d85 	stb	r7,118(sp)
    f75c:	a880080c 	andi	r2,r21,32
    f760:	103fb91e 	bne	r2,zero,f648 <__alt_mem_Flash_flash_data+0xf400f648>
    f764:	a880040c 	andi	r2,r21,16
    f768:	10010f1e 	bne	r2,zero,fba8 <___vfiprintf_internal_r+0xed4>
    f76c:	a880100c 	andi	r2,r21,64
    f770:	10010d26 	beq	r2,zero,fba8 <___vfiprintf_internal_r+0xed4>
    f774:	d9002217 	ldw	r4,136(sp)
    f778:	001b883a 	mov	r13,zero
    f77c:	2580000b 	ldhu	r22,0(r4)
    f780:	21000104 	addi	r4,r4,4
    f784:	d9002215 	stw	r4,136(sp)
    f788:	003fb406 	br	f65c <__alt_mem_Flash_flash_data+0xf400f65c>
    f78c:	d9002217 	ldw	r4,136(sp)
    f790:	00800044 	movi	r2,1
    f794:	25800017 	ldw	r22,0(r4)
    f798:	23400117 	ldw	r13,4(r4)
    f79c:	21000204 	addi	r4,r4,8
    f7a0:	d9002215 	stw	r4,136(sp)
    f7a4:	b348b03a 	or	r4,r22,r13
    f7a8:	003e2806 	br	f04c <__alt_mem_Flash_flash_data+0xf400f04c>
    f7ac:	d9c01d85 	stb	r7,118(sp)
    f7b0:	1801ab26 	beq	r3,zero,fe60 <___vfiprintf_internal_r+0x118c>
    f7b4:	04400044 	movi	r17,1
    f7b8:	d8c01005 	stb	r3,64(sp)
    f7bc:	d8001d85 	stb	zero,118(sp)
    f7c0:	8827883a 	mov	r19,r17
    f7c4:	dd001004 	addi	r20,sp,64
    f7c8:	003f8a06 	br	f5f4 <__alt_mem_Flash_flash_data+0xf400f5f4>
    f7cc:	d9002017 	ldw	r4,128(sp)
    f7d0:	d9402117 	ldw	r5,132(sp)
    f7d4:	d9801a04 	addi	r6,sp,104
    f7d8:	d9c02b15 	stw	r7,172(sp)
    f7dc:	dbc02a15 	stw	r15,168(sp)
    f7e0:	000ebc00 	call	ebc0 <__sprint_r.part.0>
    f7e4:	d9c02b17 	ldw	r7,172(sp)
    f7e8:	dbc02a17 	ldw	r15,168(sp)
    f7ec:	1000631e 	bne	r2,zero,f97c <___vfiprintf_internal_r+0xca8>
    f7f0:	d9801b17 	ldw	r6,108(sp)
    f7f4:	d8801c17 	ldw	r2,112(sp)
    f7f8:	d811883a 	mov	r8,sp
    f7fc:	31400044 	addi	r5,r6,1
    f800:	003e4d06 	br	f138 <__alt_mem_Flash_flash_data+0xf400f138>
    f804:	d9401b17 	ldw	r5,108(sp)
    f808:	d8801c17 	ldw	r2,112(sp)
    f80c:	29000044 	addi	r4,r5,1
    f810:	d8c01d87 	ldb	r3,118(sp)
    f814:	183e6726 	beq	r3,zero,f1b4 <__alt_mem_Flash_flash_data+0xf400f1b4>
    f818:	00c00044 	movi	r3,1
    f81c:	d9401d84 	addi	r5,sp,118
    f820:	10c5883a 	add	r2,r2,r3
    f824:	41400015 	stw	r5,0(r8)
    f828:	40c00115 	stw	r3,4(r8)
    f82c:	d8801c15 	stw	r2,112(sp)
    f830:	d9001b15 	stw	r4,108(sp)
    f834:	014001c4 	movi	r5,7
    f838:	2900ab16 	blt	r5,r4,fae8 <___vfiprintf_internal_r+0xe14>
    f83c:	200b883a 	mov	r5,r4
    f840:	42000204 	addi	r8,r8,8
    f844:	21000044 	addi	r4,r4,1
    f848:	003e5a06 	br	f1b4 <__alt_mem_Flash_flash_data+0xf400f1b4>
    f84c:	d9002017 	ldw	r4,128(sp)
    f850:	d9402117 	ldw	r5,132(sp)
    f854:	d9801a04 	addi	r6,sp,104
    f858:	d9c02b15 	stw	r7,172(sp)
    f85c:	db402a15 	stw	r13,168(sp)
    f860:	000ebc00 	call	ebc0 <__sprint_r.part.0>
    f864:	d9c02b17 	ldw	r7,172(sp)
    f868:	db402a17 	ldw	r13,168(sp)
    f86c:	1000431e 	bne	r2,zero,f97c <___vfiprintf_internal_r+0xca8>
    f870:	d9401b17 	ldw	r5,108(sp)
    f874:	d8801c17 	ldw	r2,112(sp)
    f878:	d811883a 	mov	r8,sp
    f87c:	29000044 	addi	r4,r5,1
    f880:	003e6706 	br	f220 <__alt_mem_Flash_flash_data+0xf400f220>
    f884:	10803fcc 	andi	r2,r2,255
    f888:	00c00044 	movi	r3,1
    f88c:	10fdfa1e 	bne	r2,r3,f078 <__alt_mem_Flash_flash_data+0xf400f078>
    f890:	6800021e 	bne	r13,zero,f89c <___vfiprintf_internal_r+0xbc8>
    f894:	00800244 	movi	r2,9
    f898:	1580222e 	bgeu	r2,r22,f924 <___vfiprintf_internal_r+0xc50>
    f89c:	dc802415 	stw	r18,144(sp)
    f8a0:	dc002515 	stw	r16,148(sp)
    f8a4:	dc401a04 	addi	r17,sp,104
    f8a8:	b021883a 	mov	r16,r22
    f8ac:	4827883a 	mov	r19,r9
    f8b0:	4029883a 	mov	r20,r8
    f8b4:	702d883a 	mov	r22,r14
    f8b8:	6825883a 	mov	r18,r13
    f8bc:	8009883a 	mov	r4,r16
    f8c0:	900b883a 	mov	r5,r18
    f8c4:	01800284 	movi	r6,10
    f8c8:	000f883a 	mov	r7,zero
    f8cc:	0010f3c0 	call	10f3c <__umoddi3>
    f8d0:	10800c04 	addi	r2,r2,48
    f8d4:	8c7fffc4 	addi	r17,r17,-1
    f8d8:	8009883a 	mov	r4,r16
    f8dc:	900b883a 	mov	r5,r18
    f8e0:	01800284 	movi	r6,10
    f8e4:	000f883a 	mov	r7,zero
    f8e8:	88800005 	stb	r2,0(r17)
    f8ec:	001097c0 	call	1097c <__udivdi3>
    f8f0:	1021883a 	mov	r16,r2
    f8f4:	10c4b03a 	or	r2,r2,r3
    f8f8:	1825883a 	mov	r18,r3
    f8fc:	103fef1e 	bne	r2,zero,f8bc <__alt_mem_Flash_flash_data+0xf400f8bc>
    f900:	dc802417 	ldw	r18,144(sp)
    f904:	dc002517 	ldw	r16,148(sp)
    f908:	a011883a 	mov	r8,r20
    f90c:	9813883a 	mov	r9,r19
    f910:	b01d883a 	mov	r14,r22
    f914:	8829883a 	mov	r20,r17
    f918:	d8c01e17 	ldw	r3,120(sp)
    f91c:	1d27c83a 	sub	r19,r3,r20
    f920:	003de606 	br	f0bc <__alt_mem_Flash_flash_data+0xf400f0bc>
    f924:	b5800c04 	addi	r22,r22,48
    f928:	dd8019c5 	stb	r22,103(sp)
    f92c:	dcc02717 	ldw	r19,156(sp)
    f930:	dd0019c4 	addi	r20,sp,103
    f934:	003de106 	br	f0bc <__alt_mem_Flash_flash_data+0xf400f0bc>
    f938:	d9002017 	ldw	r4,128(sp)
    f93c:	d9402117 	ldw	r5,132(sp)
    f940:	d9801a04 	addi	r6,sp,104
    f944:	000ebc00 	call	ebc0 <__sprint_r.part.0>
    f948:	10000c1e 	bne	r2,zero,f97c <___vfiprintf_internal_r+0xca8>
    f94c:	d8801c17 	ldw	r2,112(sp)
    f950:	8c80010e 	bge	r17,r18,f958 <___vfiprintf_internal_r+0xc84>
    f954:	9023883a 	mov	r17,r18
    f958:	d8c02317 	ldw	r3,140(sp)
    f95c:	1c47883a 	add	r3,r3,r17
    f960:	d8c02315 	stw	r3,140(sp)
    f964:	103e7e26 	beq	r2,zero,f360 <__alt_mem_Flash_flash_data+0xf400f360>
    f968:	d9002017 	ldw	r4,128(sp)
    f96c:	d9402117 	ldw	r5,132(sp)
    f970:	d9801a04 	addi	r6,sp,104
    f974:	000ebc00 	call	ebc0 <__sprint_r.part.0>
    f978:	103e7926 	beq	r2,zero,f360 <__alt_mem_Flash_flash_data+0xf400f360>
    f97c:	dd402117 	ldw	r21,132(sp)
    f980:	a880030b 	ldhu	r2,12(r21)
    f984:	1080100c 	andi	r2,r2,64
    f988:	103e881e 	bne	r2,zero,f3ac <__alt_mem_Flash_flash_data+0xf400f3ac>
    f98c:	d8802317 	ldw	r2,140(sp)
    f990:	003e8706 	br	f3b0 <__alt_mem_Flash_flash_data+0xf400f3b0>
    f994:	d9402117 	ldw	r5,132(sp)
    f998:	b009883a 	mov	r4,r22
    f99c:	d9801a04 	addi	r6,sp,104
    f9a0:	000ebc00 	call	ebc0 <__sprint_r.part.0>
    f9a4:	103ff51e 	bne	r2,zero,f97c <__alt_mem_Flash_flash_data+0xf400f97c>
    f9a8:	d9001b17 	ldw	r4,108(sp)
    f9ac:	d8801c17 	ldw	r2,112(sp)
    f9b0:	d811883a 	mov	r8,sp
    f9b4:	21400044 	addi	r5,r4,1
    f9b8:	003e4d06 	br	f2f0 <__alt_mem_Flash_flash_data+0xf400f2f0>
    f9bc:	1000aa1e 	bne	r2,zero,fc68 <___vfiprintf_internal_r+0xf94>
    f9c0:	00c00044 	movi	r3,1
    f9c4:	9805883a 	mov	r2,r19
    f9c8:	dd000015 	stw	r20,0(sp)
    f9cc:	dcc00115 	stw	r19,4(sp)
    f9d0:	dcc01c15 	stw	r19,112(sp)
    f9d4:	d8c01b15 	stw	r3,108(sp)
    f9d8:	d811883a 	mov	r8,sp
    f9dc:	42000204 	addi	r8,r8,8
    f9e0:	aac0010c 	andi	r11,r21,4
    f9e4:	583fda26 	beq	r11,zero,f950 <__alt_mem_Flash_flash_data+0xf400f950>
    f9e8:	9467c83a 	sub	r19,r18,r17
    f9ec:	04fe3316 	blt	zero,r19,f2bc <__alt_mem_Flash_flash_data+0xf400f2bc>
    f9f0:	003fd706 	br	f950 <__alt_mem_Flash_flash_data+0xf400f950>
    f9f4:	946dc83a 	sub	r22,r18,r17
    f9f8:	05bdfd0e 	bge	zero,r22,f1f0 <__alt_mem_Flash_flash_data+0xf400f1f0>
    f9fc:	00c000b4 	movhi	r3,2
    fa00:	18d71204 	addi	r3,r3,23624
    fa04:	01c00404 	movi	r7,16
    fa08:	d8c02415 	stw	r3,144(sp)
    fa0c:	3d81530e 	bge	r7,r22,ff5c <___vfiprintf_internal_r+0x1288>
    fa10:	8007883a 	mov	r3,r16
    fa14:	034001c4 	movi	r13,7
    fa18:	b021883a 	mov	r16,r22
    fa1c:	da402515 	stw	r9,148(sp)
    fa20:	182d883a 	mov	r22,r3
    fa24:	00000506 	br	fa3c <___vfiprintf_internal_r+0xd68>
    fa28:	29800084 	addi	r6,r5,2
    fa2c:	42000204 	addi	r8,r8,8
    fa30:	180b883a 	mov	r5,r3
    fa34:	843ffc04 	addi	r16,r16,-16
    fa38:	3c000d0e 	bge	r7,r16,fa70 <___vfiprintf_internal_r+0xd9c>
    fa3c:	10800404 	addi	r2,r2,16
    fa40:	28c00044 	addi	r3,r5,1
    fa44:	45c00015 	stw	r23,0(r8)
    fa48:	41c00115 	stw	r7,4(r8)
    fa4c:	d8801c15 	stw	r2,112(sp)
    fa50:	d8c01b15 	stw	r3,108(sp)
    fa54:	68fff40e 	bge	r13,r3,fa28 <__alt_mem_Flash_flash_data+0xf400fa28>
    fa58:	1000151e 	bne	r2,zero,fab0 <___vfiprintf_internal_r+0xddc>
    fa5c:	843ffc04 	addi	r16,r16,-16
    fa60:	01800044 	movi	r6,1
    fa64:	000b883a 	mov	r5,zero
    fa68:	d811883a 	mov	r8,sp
    fa6c:	3c3ff316 	blt	r7,r16,fa3c <__alt_mem_Flash_flash_data+0xf400fa3c>
    fa70:	da402517 	ldw	r9,148(sp)
    fa74:	b007883a 	mov	r3,r22
    fa78:	802d883a 	mov	r22,r16
    fa7c:	1821883a 	mov	r16,r3
    fa80:	d8c02417 	ldw	r3,144(sp)
    fa84:	1585883a 	add	r2,r2,r22
    fa88:	45800115 	stw	r22,4(r8)
    fa8c:	40c00015 	stw	r3,0(r8)
    fa90:	d8801c15 	stw	r2,112(sp)
    fa94:	d9801b15 	stw	r6,108(sp)
    fa98:	00c001c4 	movi	r3,7
    fa9c:	19806d16 	blt	r3,r6,fc54 <___vfiprintf_internal_r+0xf80>
    faa0:	42000204 	addi	r8,r8,8
    faa4:	31000044 	addi	r4,r6,1
    faa8:	300b883a 	mov	r5,r6
    faac:	003dd006 	br	f1f0 <__alt_mem_Flash_flash_data+0xf400f1f0>
    fab0:	d9002017 	ldw	r4,128(sp)
    fab4:	d9402117 	ldw	r5,132(sp)
    fab8:	d9801a04 	addi	r6,sp,104
    fabc:	d9c02b15 	stw	r7,172(sp)
    fac0:	db402a15 	stw	r13,168(sp)
    fac4:	000ebc00 	call	ebc0 <__sprint_r.part.0>
    fac8:	d9c02b17 	ldw	r7,172(sp)
    facc:	db402a17 	ldw	r13,168(sp)
    fad0:	103faa1e 	bne	r2,zero,f97c <__alt_mem_Flash_flash_data+0xf400f97c>
    fad4:	d9401b17 	ldw	r5,108(sp)
    fad8:	d8801c17 	ldw	r2,112(sp)
    fadc:	d811883a 	mov	r8,sp
    fae0:	29800044 	addi	r6,r5,1
    fae4:	003fd306 	br	fa34 <__alt_mem_Flash_flash_data+0xf400fa34>
    fae8:	1000401e 	bne	r2,zero,fbec <___vfiprintf_internal_r+0xf18>
    faec:	68003b26 	beq	r13,zero,fbdc <___vfiprintf_internal_r+0xf08>
    faf0:	d9001d04 	addi	r4,sp,116
    faf4:	00800084 	movi	r2,2
    faf8:	d9000015 	stw	r4,0(sp)
    fafc:	d8800115 	stw	r2,4(sp)
    fb00:	1809883a 	mov	r4,r3
    fb04:	d811883a 	mov	r8,sp
    fb08:	003db406 	br	f1dc <__alt_mem_Flash_flash_data+0xf400f1dc>
    fb0c:	1000451e 	bne	r2,zero,fc24 <___vfiprintf_internal_r+0xf50>
    fb10:	01000044 	movi	r4,1
    fb14:	000b883a 	mov	r5,zero
    fb18:	d811883a 	mov	r8,sp
    fb1c:	003db206 	br	f1e8 <__alt_mem_Flash_flash_data+0xf400f1e8>
    fb20:	10803fcc 	andi	r2,r2,255
    fb24:	1000071e 	bne	r2,zero,fb44 <___vfiprintf_internal_r+0xe70>
    fb28:	a880004c 	andi	r2,r21,1
    fb2c:	10000526 	beq	r2,zero,fb44 <___vfiprintf_internal_r+0xe70>
    fb30:	00800c04 	movi	r2,48
    fb34:	d88019c5 	stb	r2,103(sp)
    fb38:	dcc02717 	ldw	r19,156(sp)
    fb3c:	dd0019c4 	addi	r20,sp,103
    fb40:	003d5e06 	br	f0bc <__alt_mem_Flash_flash_data+0xf400f0bc>
    fb44:	dd001a04 	addi	r20,sp,104
    fb48:	003d5c06 	br	f0bc <__alt_mem_Flash_flash_data+0xf400f0bc>
    fb4c:	1000971e 	bne	r2,zero,fdac <___vfiprintf_internal_r+0x10d8>
    fb50:	d8c01d87 	ldb	r3,118(sp)
    fb54:	18005826 	beq	r3,zero,fcb8 <___vfiprintf_internal_r+0xfe4>
    fb58:	00800044 	movi	r2,1
    fb5c:	d8c01d84 	addi	r3,sp,118
    fb60:	1009883a 	mov	r4,r2
    fb64:	d8c00015 	stw	r3,0(sp)
    fb68:	d8800115 	stw	r2,4(sp)
    fb6c:	d811883a 	mov	r8,sp
    fb70:	003f3206 	br	f83c <__alt_mem_Flash_flash_data+0xf400f83c>
    fb74:	8023883a 	mov	r17,r16
    fb78:	003ca706 	br	ee18 <__alt_mem_Flash_flash_data+0xf400ee18>
    fb7c:	d9002017 	ldw	r4,128(sp)
    fb80:	d9402117 	ldw	r5,132(sp)
    fb84:	d9801a04 	addi	r6,sp,104
    fb88:	000ebc00 	call	ebc0 <__sprint_r.part.0>
    fb8c:	103f7b1e 	bne	r2,zero,f97c <__alt_mem_Flash_flash_data+0xf400f97c>
    fb90:	d8801c17 	ldw	r2,112(sp)
    fb94:	d811883a 	mov	r8,sp
    fb98:	003f9106 	br	f9e0 <__alt_mem_Flash_flash_data+0xf400f9e0>
    fb9c:	00800084 	movi	r2,2
    fba0:	b348b03a 	or	r4,r22,r13
    fba4:	003d2906 	br	f04c <__alt_mem_Flash_flash_data+0xf400f04c>
    fba8:	d8802217 	ldw	r2,136(sp)
    fbac:	001b883a 	mov	r13,zero
    fbb0:	15800017 	ldw	r22,0(r2)
    fbb4:	10800104 	addi	r2,r2,4
    fbb8:	d8802215 	stw	r2,136(sp)
    fbbc:	003ea706 	br	f65c <__alt_mem_Flash_flash_data+0xf400f65c>
    fbc0:	d9002017 	ldw	r4,128(sp)
    fbc4:	d9402117 	ldw	r5,132(sp)
    fbc8:	d9801a04 	addi	r6,sp,104
    fbcc:	000ebc00 	call	ebc0 <__sprint_r.part.0>
    fbd0:	103f6a1e 	bne	r2,zero,f97c <__alt_mem_Flash_flash_data+0xf400f97c>
    fbd4:	d811883a 	mov	r8,sp
    fbd8:	003cff06 	br	efd8 <__alt_mem_Flash_flash_data+0xf400efd8>
    fbdc:	000b883a 	mov	r5,zero
    fbe0:	1809883a 	mov	r4,r3
    fbe4:	d811883a 	mov	r8,sp
    fbe8:	003d7f06 	br	f1e8 <__alt_mem_Flash_flash_data+0xf400f1e8>
    fbec:	d9002017 	ldw	r4,128(sp)
    fbf0:	d9402117 	ldw	r5,132(sp)
    fbf4:	d9801a04 	addi	r6,sp,104
    fbf8:	da402b15 	stw	r9,172(sp)
    fbfc:	db402a15 	stw	r13,168(sp)
    fc00:	000ebc00 	call	ebc0 <__sprint_r.part.0>
    fc04:	da402b17 	ldw	r9,172(sp)
    fc08:	db402a17 	ldw	r13,168(sp)
    fc0c:	103f5b1e 	bne	r2,zero,f97c <__alt_mem_Flash_flash_data+0xf400f97c>
    fc10:	d9401b17 	ldw	r5,108(sp)
    fc14:	d8801c17 	ldw	r2,112(sp)
    fc18:	d811883a 	mov	r8,sp
    fc1c:	29000044 	addi	r4,r5,1
    fc20:	003d6406 	br	f1b4 <__alt_mem_Flash_flash_data+0xf400f1b4>
    fc24:	d9002017 	ldw	r4,128(sp)
    fc28:	d9402117 	ldw	r5,132(sp)
    fc2c:	d9801a04 	addi	r6,sp,104
    fc30:	da402b15 	stw	r9,172(sp)
    fc34:	000ebc00 	call	ebc0 <__sprint_r.part.0>
    fc38:	da402b17 	ldw	r9,172(sp)
    fc3c:	103f4f1e 	bne	r2,zero,f97c <__alt_mem_Flash_flash_data+0xf400f97c>
    fc40:	d9401b17 	ldw	r5,108(sp)
    fc44:	d8801c17 	ldw	r2,112(sp)
    fc48:	d811883a 	mov	r8,sp
    fc4c:	29000044 	addi	r4,r5,1
    fc50:	003d6506 	br	f1e8 <__alt_mem_Flash_flash_data+0xf400f1e8>
    fc54:	10009a1e 	bne	r2,zero,fec0 <___vfiprintf_internal_r+0x11ec>
    fc58:	01000044 	movi	r4,1
    fc5c:	000b883a 	mov	r5,zero
    fc60:	d811883a 	mov	r8,sp
    fc64:	003d6206 	br	f1f0 <__alt_mem_Flash_flash_data+0xf400f1f0>
    fc68:	d9002017 	ldw	r4,128(sp)
    fc6c:	d9402117 	ldw	r5,132(sp)
    fc70:	d9801a04 	addi	r6,sp,104
    fc74:	000ebc00 	call	ebc0 <__sprint_r.part.0>
    fc78:	103f401e 	bne	r2,zero,f97c <__alt_mem_Flash_flash_data+0xf400f97c>
    fc7c:	d9001b17 	ldw	r4,108(sp)
    fc80:	d8801c17 	ldw	r2,112(sp)
    fc84:	d811883a 	mov	r8,sp
    fc88:	21000044 	addi	r4,r4,1
    fc8c:	003d7d06 	br	f284 <__alt_mem_Flash_flash_data+0xf400f284>
    fc90:	05adc83a 	sub	r22,zero,r22
    fc94:	b004c03a 	cmpne	r2,r22,zero
    fc98:	035bc83a 	sub	r13,zero,r13
    fc9c:	689bc83a 	sub	r13,r13,r2
    fca0:	03800b44 	movi	r14,45
    fca4:	db801d85 	stb	r14,118(sp)
    fca8:	4827883a 	mov	r19,r9
    fcac:	00800044 	movi	r2,1
    fcb0:	b348b03a 	or	r4,r22,r13
    fcb4:	003ce806 	br	f058 <__alt_mem_Flash_flash_data+0xf400f058>
    fcb8:	000b883a 	mov	r5,zero
    fcbc:	01000044 	movi	r4,1
    fcc0:	d811883a 	mov	r8,sp
    fcc4:	683d4826 	beq	r13,zero,f1e8 <__alt_mem_Flash_flash_data+0xf400f1e8>
    fcc8:	00800084 	movi	r2,2
    fccc:	d8c01d04 	addi	r3,sp,116
    fcd0:	d8c00015 	stw	r3,0(sp)
    fcd4:	d8800115 	stw	r2,4(sp)
    fcd8:	003d4006 	br	f1dc <__alt_mem_Flash_flash_data+0xf400f1dc>
    fcdc:	00800084 	movi	r2,2
    fce0:	003cda06 	br	f04c <__alt_mem_Flash_flash_data+0xf400f04c>
    fce4:	a880100c 	andi	r2,r21,64
    fce8:	10004226 	beq	r2,zero,fdf4 <___vfiprintf_internal_r+0x1120>
    fcec:	d8802217 	ldw	r2,136(sp)
    fcf0:	001b883a 	mov	r13,zero
    fcf4:	1580000b 	ldhu	r22,0(r2)
    fcf8:	10800104 	addi	r2,r2,4
    fcfc:	d8802215 	stw	r2,136(sp)
    fd00:	b009883a 	mov	r4,r22
    fd04:	0005883a 	mov	r2,zero
    fd08:	003cd006 	br	f04c <__alt_mem_Flash_flash_data+0xf400f04c>
    fd0c:	80c00007 	ldb	r3,0(r16)
    fd10:	8005883a 	mov	r2,r16
    fd14:	003c4d06 	br	ee4c <__alt_mem_Flash_flash_data+0xf400ee4c>
    fd18:	a880100c 	andi	r2,r21,64
    fd1c:	10004426 	beq	r2,zero,fe30 <___vfiprintf_internal_r+0x115c>
    fd20:	d8c02217 	ldw	r3,136(sp)
    fd24:	001b883a 	mov	r13,zero
    fd28:	00800044 	movi	r2,1
    fd2c:	1d80000b 	ldhu	r22,0(r3)
    fd30:	18c00104 	addi	r3,r3,4
    fd34:	d8c02215 	stw	r3,136(sp)
    fd38:	b009883a 	mov	r4,r22
    fd3c:	003cc306 	br	f04c <__alt_mem_Flash_flash_data+0xf400f04c>
    fd40:	a880040c 	andi	r2,r21,16
    fd44:	1000091e 	bne	r2,zero,fd6c <___vfiprintf_internal_r+0x1098>
    fd48:	aac0100c 	andi	r11,r21,64
    fd4c:	58000726 	beq	r11,zero,fd6c <___vfiprintf_internal_r+0x1098>
    fd50:	d8c02217 	ldw	r3,136(sp)
    fd54:	d9002317 	ldw	r4,140(sp)
    fd58:	18800017 	ldw	r2,0(r3)
    fd5c:	18c00104 	addi	r3,r3,4
    fd60:	d8c02215 	stw	r3,136(sp)
    fd64:	1100000d 	sth	r4,0(r2)
    fd68:	003c0e06 	br	eda4 <__alt_mem_Flash_flash_data+0xf400eda4>
    fd6c:	d8c02217 	ldw	r3,136(sp)
    fd70:	d9002317 	ldw	r4,140(sp)
    fd74:	18800017 	ldw	r2,0(r3)
    fd78:	18c00104 	addi	r3,r3,4
    fd7c:	d8c02215 	stw	r3,136(sp)
    fd80:	11000015 	stw	r4,0(r2)
    fd84:	003c0706 	br	eda4 <__alt_mem_Flash_flash_data+0xf400eda4>
    fd88:	a880100c 	andi	r2,r21,64
    fd8c:	10002126 	beq	r2,zero,fe14 <___vfiprintf_internal_r+0x1140>
    fd90:	1d80000f 	ldh	r22,0(r3)
    fd94:	d8c02217 	ldw	r3,136(sp)
    fd98:	b01bd7fa 	srai	r13,r22,31
    fd9c:	18c00104 	addi	r3,r3,4
    fda0:	d8c02215 	stw	r3,136(sp)
    fda4:	6805883a 	mov	r2,r13
    fda8:	003dc406 	br	f4bc <__alt_mem_Flash_flash_data+0xf400f4bc>
    fdac:	d9002017 	ldw	r4,128(sp)
    fdb0:	d9402117 	ldw	r5,132(sp)
    fdb4:	d9801a04 	addi	r6,sp,104
    fdb8:	da402b15 	stw	r9,172(sp)
    fdbc:	db402a15 	stw	r13,168(sp)
    fdc0:	000ebc00 	call	ebc0 <__sprint_r.part.0>
    fdc4:	da402b17 	ldw	r9,172(sp)
    fdc8:	db402a17 	ldw	r13,168(sp)
    fdcc:	103eeb1e 	bne	r2,zero,f97c <__alt_mem_Flash_flash_data+0xf400f97c>
    fdd0:	d9401b17 	ldw	r5,108(sp)
    fdd4:	d8801c17 	ldw	r2,112(sp)
    fdd8:	d811883a 	mov	r8,sp
    fddc:	29000044 	addi	r4,r5,1
    fde0:	003e8b06 	br	f810 <__alt_mem_Flash_flash_data+0xf400f810>
    fde4:	9023883a 	mov	r17,r18
    fde8:	003d5a06 	br	f354 <__alt_mem_Flash_flash_data+0xf400f354>
    fdec:	4827883a 	mov	r19,r9
    fdf0:	003e3506 	br	f6c8 <__alt_mem_Flash_flash_data+0xf400f6c8>
    fdf4:	d8c02217 	ldw	r3,136(sp)
    fdf8:	001b883a 	mov	r13,zero
    fdfc:	0005883a 	mov	r2,zero
    fe00:	1d800017 	ldw	r22,0(r3)
    fe04:	18c00104 	addi	r3,r3,4
    fe08:	d8c02215 	stw	r3,136(sp)
    fe0c:	b009883a 	mov	r4,r22
    fe10:	003c8e06 	br	f04c <__alt_mem_Flash_flash_data+0xf400f04c>
    fe14:	1d800017 	ldw	r22,0(r3)
    fe18:	d9002217 	ldw	r4,136(sp)
    fe1c:	b01bd7fa 	srai	r13,r22,31
    fe20:	21000104 	addi	r4,r4,4
    fe24:	d9002215 	stw	r4,136(sp)
    fe28:	6805883a 	mov	r2,r13
    fe2c:	003da306 	br	f4bc <__alt_mem_Flash_flash_data+0xf400f4bc>
    fe30:	d9002217 	ldw	r4,136(sp)
    fe34:	001b883a 	mov	r13,zero
    fe38:	00800044 	movi	r2,1
    fe3c:	25800017 	ldw	r22,0(r4)
    fe40:	21000104 	addi	r4,r4,4
    fe44:	d9002215 	stw	r4,136(sp)
    fe48:	b009883a 	mov	r4,r22
    fe4c:	003c7f06 	br	f04c <__alt_mem_Flash_flash_data+0xf400f04c>
    fe50:	00c000b4 	movhi	r3,2
    fe54:	18d71204 	addi	r3,r3,23624
    fe58:	d8c02415 	stw	r3,144(sp)
    fe5c:	003cff06 	br	f25c <__alt_mem_Flash_flash_data+0xf400f25c>
    fe60:	d8801c17 	ldw	r2,112(sp)
    fe64:	dd402117 	ldw	r21,132(sp)
    fe68:	103ec526 	beq	r2,zero,f980 <__alt_mem_Flash_flash_data+0xf400f980>
    fe6c:	d9002017 	ldw	r4,128(sp)
    fe70:	a80b883a 	mov	r5,r21
    fe74:	d9801a04 	addi	r6,sp,104
    fe78:	000ebc00 	call	ebc0 <__sprint_r.part.0>
    fe7c:	003ec006 	br	f980 <__alt_mem_Flash_flash_data+0xf400f980>
    fe80:	80800044 	addi	r2,r16,1
    fe84:	ad400814 	ori	r21,r21,32
    fe88:	80c00047 	ldb	r3,1(r16)
    fe8c:	003bef06 	br	ee4c <__alt_mem_Flash_flash_data+0xf400ee4c>
    fe90:	04a5c83a 	sub	r18,zero,r18
    fe94:	8005883a 	mov	r2,r16
    fe98:	d8c02215 	stw	r3,136(sp)
    fe9c:	003d5306 	br	f3ec <__alt_mem_Flash_flash_data+0xf400f3ec>
    fea0:	da002a15 	stw	r8,168(sp)
    fea4:	00047800 	call	4780 <strlen>
    fea8:	1027883a 	mov	r19,r2
    feac:	db801d83 	ldbu	r14,118(sp)
    feb0:	dd802215 	stw	r22,136(sp)
    feb4:	0013883a 	mov	r9,zero
    feb8:	da002a17 	ldw	r8,168(sp)
    febc:	003c7f06 	br	f0bc <__alt_mem_Flash_flash_data+0xf400f0bc>
    fec0:	d9002017 	ldw	r4,128(sp)
    fec4:	d9402117 	ldw	r5,132(sp)
    fec8:	d9801a04 	addi	r6,sp,104
    fecc:	da402b15 	stw	r9,172(sp)
    fed0:	000ebc00 	call	ebc0 <__sprint_r.part.0>
    fed4:	da402b17 	ldw	r9,172(sp)
    fed8:	103ea81e 	bne	r2,zero,f97c <__alt_mem_Flash_flash_data+0xf400f97c>
    fedc:	d9401b17 	ldw	r5,108(sp)
    fee0:	d8801c17 	ldw	r2,112(sp)
    fee4:	d811883a 	mov	r8,sp
    fee8:	29000044 	addi	r4,r5,1
    feec:	003cc006 	br	f1f0 <__alt_mem_Flash_flash_data+0xf400f1f0>
    fef0:	d9401b17 	ldw	r5,108(sp)
    fef4:	010000b4 	movhi	r4,2
    fef8:	21171604 	addi	r4,r4,23640
    fefc:	d9002415 	stw	r4,144(sp)
    ff00:	29400044 	addi	r5,r5,1
    ff04:	003c9f06 	br	f184 <__alt_mem_Flash_flash_data+0xf400f184>
    ff08:	00800184 	movi	r2,6
    ff0c:	1240012e 	bgeu	r2,r9,ff14 <___vfiprintf_internal_r+0x1240>
    ff10:	1013883a 	mov	r9,r2
    ff14:	4827883a 	mov	r19,r9
    ff18:	4823883a 	mov	r17,r9
    ff1c:	48001116 	blt	r9,zero,ff64 <___vfiprintf_internal_r+0x1290>
    ff20:	050000b4 	movhi	r20,2
    ff24:	dd802215 	stw	r22,136(sp)
    ff28:	a516a604 	addi	r20,r20,23192
    ff2c:	003db106 	br	f5f4 <__alt_mem_Flash_flash_data+0xf400f5f4>
    ff30:	d9401b17 	ldw	r5,108(sp)
    ff34:	010000b4 	movhi	r4,2
    ff38:	21171604 	addi	r4,r4,23640
    ff3c:	d9002415 	stw	r4,144(sp)
    ff40:	29400044 	addi	r5,r5,1
    ff44:	003cf906 	br	f32c <__alt_mem_Flash_flash_data+0xf400f32c>
    ff48:	4827883a 	mov	r19,r9
    ff4c:	db801d83 	ldbu	r14,118(sp)
    ff50:	dd802215 	stw	r22,136(sp)
    ff54:	0013883a 	mov	r9,zero
    ff58:	003c5806 	br	f0bc <__alt_mem_Flash_flash_data+0xf400f0bc>
    ff5c:	200d883a 	mov	r6,r4
    ff60:	003ec706 	br	fa80 <__alt_mem_Flash_flash_data+0xf400fa80>
    ff64:	0023883a 	mov	r17,zero
    ff68:	003fed06 	br	ff20 <__alt_mem_Flash_flash_data+0xf400ff20>
    ff6c:	d9002217 	ldw	r4,136(sp)
    ff70:	22400017 	ldw	r9,0(r4)
    ff74:	20c00104 	addi	r3,r4,4
    ff78:	d8c02215 	stw	r3,136(sp)
    ff7c:	483fc20e 	bge	r9,zero,fe88 <__alt_mem_Flash_flash_data+0xf400fe88>
    ff80:	027fffc4 	movi	r9,-1
    ff84:	80c00047 	ldb	r3,1(r16)
    ff88:	003bb006 	br	ee4c <__alt_mem_Flash_flash_data+0xf400ee4c>
    ff8c:	8c80010e 	bge	r17,r18,ff94 <___vfiprintf_internal_r+0x12c0>
    ff90:	9023883a 	mov	r17,r18
    ff94:	d8802317 	ldw	r2,140(sp)
    ff98:	1445883a 	add	r2,r2,r17
    ff9c:	d8802315 	stw	r2,140(sp)
    ffa0:	003cef06 	br	f360 <__alt_mem_Flash_flash_data+0xf400f360>

0000ffa4 <__vfiprintf_internal>:
    ffa4:	2007883a 	mov	r3,r4
    ffa8:	010000b4 	movhi	r4,2
    ffac:	211fb304 	addi	r4,r4,32460
    ffb0:	21000017 	ldw	r4,0(r4)
    ffb4:	2805883a 	mov	r2,r5
    ffb8:	300f883a 	mov	r7,r6
    ffbc:	180b883a 	mov	r5,r3
    ffc0:	100d883a 	mov	r6,r2
    ffc4:	000ecd41 	jmpi	ecd4 <___vfiprintf_internal_r>

0000ffc8 <__sbprintf>:
    ffc8:	2880030b 	ldhu	r2,12(r5)
    ffcc:	2ac01917 	ldw	r11,100(r5)
    ffd0:	2a80038b 	ldhu	r10,14(r5)
    ffd4:	2a400717 	ldw	r9,28(r5)
    ffd8:	2a000917 	ldw	r8,36(r5)
    ffdc:	defee204 	addi	sp,sp,-1144
    ffe0:	00c10004 	movi	r3,1024
    ffe4:	dc011a15 	stw	r16,1128(sp)
    ffe8:	10bfff4c 	andi	r2,r2,65533
    ffec:	2821883a 	mov	r16,r5
    fff0:	d8cb883a 	add	r5,sp,r3
    fff4:	dc811c15 	stw	r18,1136(sp)
    fff8:	dc411b15 	stw	r17,1132(sp)
    fffc:	dfc11d15 	stw	ra,1140(sp)
   10000:	2025883a 	mov	r18,r4
   10004:	d881030d 	sth	r2,1036(sp)
   10008:	dac11915 	stw	r11,1124(sp)
   1000c:	da81038d 	sth	r10,1038(sp)
   10010:	da410715 	stw	r9,1052(sp)
   10014:	da010915 	stw	r8,1060(sp)
   10018:	dec10015 	stw	sp,1024(sp)
   1001c:	dec10415 	stw	sp,1040(sp)
   10020:	d8c10215 	stw	r3,1032(sp)
   10024:	d8c10515 	stw	r3,1044(sp)
   10028:	d8010615 	stw	zero,1048(sp)
   1002c:	000ecd40 	call	ecd4 <___vfiprintf_internal_r>
   10030:	1023883a 	mov	r17,r2
   10034:	10000416 	blt	r2,zero,10048 <__sbprintf+0x80>
   10038:	9009883a 	mov	r4,r18
   1003c:	d9410004 	addi	r5,sp,1024
   10040:	000a45c0 	call	a45c <_fflush_r>
   10044:	10000d1e 	bne	r2,zero,1007c <__sbprintf+0xb4>
   10048:	d8c1030b 	ldhu	r3,1036(sp)
   1004c:	18c0100c 	andi	r3,r3,64
   10050:	18000326 	beq	r3,zero,10060 <__sbprintf+0x98>
   10054:	8080030b 	ldhu	r2,12(r16)
   10058:	10801014 	ori	r2,r2,64
   1005c:	8080030d 	sth	r2,12(r16)
   10060:	8805883a 	mov	r2,r17
   10064:	dfc11d17 	ldw	ra,1140(sp)
   10068:	dc811c17 	ldw	r18,1136(sp)
   1006c:	dc411b17 	ldw	r17,1132(sp)
   10070:	dc011a17 	ldw	r16,1128(sp)
   10074:	dec11e04 	addi	sp,sp,1144
   10078:	f800283a 	ret
   1007c:	047fffc4 	movi	r17,-1
   10080:	003ff106 	br	10048 <__alt_mem_Flash_flash_data+0xf4010048>

00010084 <__swbuf_r>:
   10084:	defffc04 	addi	sp,sp,-16
   10088:	dc800215 	stw	r18,8(sp)
   1008c:	dc400115 	stw	r17,4(sp)
   10090:	dc000015 	stw	r16,0(sp)
   10094:	dfc00315 	stw	ra,12(sp)
   10098:	2025883a 	mov	r18,r4
   1009c:	2823883a 	mov	r17,r5
   100a0:	3021883a 	mov	r16,r6
   100a4:	20000226 	beq	r4,zero,100b0 <__swbuf_r+0x2c>
   100a8:	20800e17 	ldw	r2,56(r4)
   100ac:	10004126 	beq	r2,zero,101b4 <__swbuf_r+0x130>
   100b0:	80c00617 	ldw	r3,24(r16)
   100b4:	8180030b 	ldhu	r6,12(r16)
   100b8:	80c00215 	stw	r3,8(r16)
   100bc:	30c0020c 	andi	r3,r6,8
   100c0:	18003526 	beq	r3,zero,10198 <__swbuf_r+0x114>
   100c4:	80c00417 	ldw	r3,16(r16)
   100c8:	18003326 	beq	r3,zero,10198 <__swbuf_r+0x114>
   100cc:	3088000c 	andi	r2,r6,8192
   100d0:	8c403fcc 	andi	r17,r17,255
   100d4:	10001726 	beq	r2,zero,10134 <__swbuf_r+0xb0>
   100d8:	80800017 	ldw	r2,0(r16)
   100dc:	81000517 	ldw	r4,20(r16)
   100e0:	10c7c83a 	sub	r3,r2,r3
   100e4:	19001d0e 	bge	r3,r4,1015c <__swbuf_r+0xd8>
   100e8:	18c00044 	addi	r3,r3,1
   100ec:	81400217 	ldw	r5,8(r16)
   100f0:	11000044 	addi	r4,r2,1
   100f4:	81000015 	stw	r4,0(r16)
   100f8:	297fffc4 	addi	r5,r5,-1
   100fc:	81400215 	stw	r5,8(r16)
   10100:	14400005 	stb	r17,0(r2)
   10104:	80800517 	ldw	r2,20(r16)
   10108:	10c01d26 	beq	r2,r3,10180 <__swbuf_r+0xfc>
   1010c:	8080030b 	ldhu	r2,12(r16)
   10110:	1080004c 	andi	r2,r2,1
   10114:	1000181e 	bne	r2,zero,10178 <__swbuf_r+0xf4>
   10118:	8805883a 	mov	r2,r17
   1011c:	dfc00317 	ldw	ra,12(sp)
   10120:	dc800217 	ldw	r18,8(sp)
   10124:	dc400117 	ldw	r17,4(sp)
   10128:	dc000017 	ldw	r16,0(sp)
   1012c:	dec00404 	addi	sp,sp,16
   10130:	f800283a 	ret
   10134:	81001917 	ldw	r4,100(r16)
   10138:	00b7ffc4 	movi	r2,-8193
   1013c:	31880014 	ori	r6,r6,8192
   10140:	2084703a 	and	r2,r4,r2
   10144:	80801915 	stw	r2,100(r16)
   10148:	80800017 	ldw	r2,0(r16)
   1014c:	81000517 	ldw	r4,20(r16)
   10150:	8180030d 	sth	r6,12(r16)
   10154:	10c7c83a 	sub	r3,r2,r3
   10158:	193fe316 	blt	r3,r4,100e8 <__alt_mem_Flash_flash_data+0xf40100e8>
   1015c:	9009883a 	mov	r4,r18
   10160:	800b883a 	mov	r5,r16
   10164:	000a45c0 	call	a45c <_fflush_r>
   10168:	1000091e 	bne	r2,zero,10190 <__swbuf_r+0x10c>
   1016c:	80800017 	ldw	r2,0(r16)
   10170:	00c00044 	movi	r3,1
   10174:	003fdd06 	br	100ec <__alt_mem_Flash_flash_data+0xf40100ec>
   10178:	00800284 	movi	r2,10
   1017c:	88bfe61e 	bne	r17,r2,10118 <__alt_mem_Flash_flash_data+0xf4010118>
   10180:	9009883a 	mov	r4,r18
   10184:	800b883a 	mov	r5,r16
   10188:	000a45c0 	call	a45c <_fflush_r>
   1018c:	103fe226 	beq	r2,zero,10118 <__alt_mem_Flash_flash_data+0xf4010118>
   10190:	00bfffc4 	movi	r2,-1
   10194:	003fe106 	br	1011c <__alt_mem_Flash_flash_data+0xf401011c>
   10198:	9009883a 	mov	r4,r18
   1019c:	800b883a 	mov	r5,r16
   101a0:	00087d80 	call	87d8 <__swsetup_r>
   101a4:	103ffa1e 	bne	r2,zero,10190 <__alt_mem_Flash_flash_data+0xf4010190>
   101a8:	8180030b 	ldhu	r6,12(r16)
   101ac:	80c00417 	ldw	r3,16(r16)
   101b0:	003fc606 	br	100cc <__alt_mem_Flash_flash_data+0xf40100cc>
   101b4:	000a8380 	call	a838 <__sinit>
   101b8:	003fbd06 	br	100b0 <__alt_mem_Flash_flash_data+0xf40100b0>

000101bc <__swbuf>:
   101bc:	00c000b4 	movhi	r3,2
   101c0:	18dfb304 	addi	r3,r3,32460
   101c4:	2005883a 	mov	r2,r4
   101c8:	19000017 	ldw	r4,0(r3)
   101cc:	280d883a 	mov	r6,r5
   101d0:	100b883a 	mov	r5,r2
   101d4:	00100841 	jmpi	10084 <__swbuf_r>

000101d8 <_write_r>:
   101d8:	defffd04 	addi	sp,sp,-12
   101dc:	dc000015 	stw	r16,0(sp)
   101e0:	040000f4 	movhi	r16,3
   101e4:	dc400115 	stw	r17,4(sp)
   101e8:	8427d704 	addi	r16,r16,-24740
   101ec:	2023883a 	mov	r17,r4
   101f0:	2809883a 	mov	r4,r5
   101f4:	300b883a 	mov	r5,r6
   101f8:	380d883a 	mov	r6,r7
   101fc:	dfc00215 	stw	ra,8(sp)
   10200:	80000015 	stw	zero,0(r16)
   10204:	00144c00 	call	144c0 <write>
   10208:	00ffffc4 	movi	r3,-1
   1020c:	10c00526 	beq	r2,r3,10224 <_write_r+0x4c>
   10210:	dfc00217 	ldw	ra,8(sp)
   10214:	dc400117 	ldw	r17,4(sp)
   10218:	dc000017 	ldw	r16,0(sp)
   1021c:	dec00304 	addi	sp,sp,12
   10220:	f800283a 	ret
   10224:	80c00017 	ldw	r3,0(r16)
   10228:	183ff926 	beq	r3,zero,10210 <__alt_mem_Flash_flash_data+0xf4010210>
   1022c:	88c00015 	stw	r3,0(r17)
   10230:	003ff706 	br	10210 <__alt_mem_Flash_flash_data+0xf4010210>

00010234 <_close_r>:
   10234:	defffd04 	addi	sp,sp,-12
   10238:	dc000015 	stw	r16,0(sp)
   1023c:	040000f4 	movhi	r16,3
   10240:	dc400115 	stw	r17,4(sp)
   10244:	8427d704 	addi	r16,r16,-24740
   10248:	2023883a 	mov	r17,r4
   1024c:	2809883a 	mov	r4,r5
   10250:	dfc00215 	stw	ra,8(sp)
   10254:	80000015 	stw	zero,0(r16)
   10258:	0013c480 	call	13c48 <close>
   1025c:	00ffffc4 	movi	r3,-1
   10260:	10c00526 	beq	r2,r3,10278 <_close_r+0x44>
   10264:	dfc00217 	ldw	ra,8(sp)
   10268:	dc400117 	ldw	r17,4(sp)
   1026c:	dc000017 	ldw	r16,0(sp)
   10270:	dec00304 	addi	sp,sp,12
   10274:	f800283a 	ret
   10278:	80c00017 	ldw	r3,0(r16)
   1027c:	183ff926 	beq	r3,zero,10264 <__alt_mem_Flash_flash_data+0xf4010264>
   10280:	88c00015 	stw	r3,0(r17)
   10284:	003ff706 	br	10264 <__alt_mem_Flash_flash_data+0xf4010264>

00010288 <_calloc_r>:
   10288:	298b383a 	mul	r5,r5,r6
   1028c:	defffe04 	addi	sp,sp,-8
   10290:	dc000015 	stw	r16,0(sp)
   10294:	dfc00115 	stw	ra,4(sp)
   10298:	000b57c0 	call	b57c <_malloc_r>
   1029c:	1021883a 	mov	r16,r2
   102a0:	10002826 	beq	r2,zero,10344 <_calloc_r+0xbc>
   102a4:	11bfff17 	ldw	r6,-4(r2)
   102a8:	00bfff04 	movi	r2,-4
   102ac:	00c00904 	movi	r3,36
   102b0:	308c703a 	and	r6,r6,r2
   102b4:	308d883a 	add	r6,r6,r2
   102b8:	19801436 	bltu	r3,r6,1030c <_calloc_r+0x84>
   102bc:	008004c4 	movi	r2,19
   102c0:	11800936 	bltu	r2,r6,102e8 <_calloc_r+0x60>
   102c4:	8005883a 	mov	r2,r16
   102c8:	10000015 	stw	zero,0(r2)
   102cc:	10000115 	stw	zero,4(r2)
   102d0:	10000215 	stw	zero,8(r2)
   102d4:	8005883a 	mov	r2,r16
   102d8:	dfc00117 	ldw	ra,4(sp)
   102dc:	dc000017 	ldw	r16,0(sp)
   102e0:	dec00204 	addi	sp,sp,8
   102e4:	f800283a 	ret
   102e8:	80000015 	stw	zero,0(r16)
   102ec:	80000115 	stw	zero,4(r16)
   102f0:	008006c4 	movi	r2,27
   102f4:	11800d2e 	bgeu	r2,r6,1032c <_calloc_r+0xa4>
   102f8:	80000215 	stw	zero,8(r16)
   102fc:	80000315 	stw	zero,12(r16)
   10300:	30c00c26 	beq	r6,r3,10334 <_calloc_r+0xac>
   10304:	80800404 	addi	r2,r16,16
   10308:	003fef06 	br	102c8 <__alt_mem_Flash_flash_data+0xf40102c8>
   1030c:	8009883a 	mov	r4,r16
   10310:	000b883a 	mov	r5,zero
   10314:	000433c0 	call	433c <memset>
   10318:	8005883a 	mov	r2,r16
   1031c:	dfc00117 	ldw	ra,4(sp)
   10320:	dc000017 	ldw	r16,0(sp)
   10324:	dec00204 	addi	sp,sp,8
   10328:	f800283a 	ret
   1032c:	80800204 	addi	r2,r16,8
   10330:	003fe506 	br	102c8 <__alt_mem_Flash_flash_data+0xf40102c8>
   10334:	80000415 	stw	zero,16(r16)
   10338:	80800604 	addi	r2,r16,24
   1033c:	80000515 	stw	zero,20(r16)
   10340:	003fe106 	br	102c8 <__alt_mem_Flash_flash_data+0xf40102c8>
   10344:	0005883a 	mov	r2,zero
   10348:	003fe306 	br	102d8 <__alt_mem_Flash_flash_data+0xf40102d8>

0001034c <_fclose_r>:
   1034c:	28003926 	beq	r5,zero,10434 <_fclose_r+0xe8>
   10350:	defffc04 	addi	sp,sp,-16
   10354:	dc400115 	stw	r17,4(sp)
   10358:	dc000015 	stw	r16,0(sp)
   1035c:	dfc00315 	stw	ra,12(sp)
   10360:	dc800215 	stw	r18,8(sp)
   10364:	2023883a 	mov	r17,r4
   10368:	2821883a 	mov	r16,r5
   1036c:	20000226 	beq	r4,zero,10378 <_fclose_r+0x2c>
   10370:	20800e17 	ldw	r2,56(r4)
   10374:	10002726 	beq	r2,zero,10414 <_fclose_r+0xc8>
   10378:	8080030f 	ldh	r2,12(r16)
   1037c:	1000071e 	bne	r2,zero,1039c <_fclose_r+0x50>
   10380:	0005883a 	mov	r2,zero
   10384:	dfc00317 	ldw	ra,12(sp)
   10388:	dc800217 	ldw	r18,8(sp)
   1038c:	dc400117 	ldw	r17,4(sp)
   10390:	dc000017 	ldw	r16,0(sp)
   10394:	dec00404 	addi	sp,sp,16
   10398:	f800283a 	ret
   1039c:	8809883a 	mov	r4,r17
   103a0:	800b883a 	mov	r5,r16
   103a4:	000a2540 	call	a254 <__sflush_r>
   103a8:	1025883a 	mov	r18,r2
   103ac:	80800b17 	ldw	r2,44(r16)
   103b0:	10000426 	beq	r2,zero,103c4 <_fclose_r+0x78>
   103b4:	81400717 	ldw	r5,28(r16)
   103b8:	8809883a 	mov	r4,r17
   103bc:	103ee83a 	callr	r2
   103c0:	10001616 	blt	r2,zero,1041c <_fclose_r+0xd0>
   103c4:	8080030b 	ldhu	r2,12(r16)
   103c8:	1080200c 	andi	r2,r2,128
   103cc:	1000151e 	bne	r2,zero,10424 <_fclose_r+0xd8>
   103d0:	81400c17 	ldw	r5,48(r16)
   103d4:	28000526 	beq	r5,zero,103ec <_fclose_r+0xa0>
   103d8:	80801004 	addi	r2,r16,64
   103dc:	28800226 	beq	r5,r2,103e8 <_fclose_r+0x9c>
   103e0:	8809883a 	mov	r4,r17
   103e4:	000a9ac0 	call	a9ac <_free_r>
   103e8:	80000c15 	stw	zero,48(r16)
   103ec:	81401117 	ldw	r5,68(r16)
   103f0:	28000326 	beq	r5,zero,10400 <_fclose_r+0xb4>
   103f4:	8809883a 	mov	r4,r17
   103f8:	000a9ac0 	call	a9ac <_free_r>
   103fc:	80001115 	stw	zero,68(r16)
   10400:	000a8480 	call	a848 <__sfp_lock_acquire>
   10404:	8000030d 	sth	zero,12(r16)
   10408:	000a84c0 	call	a84c <__sfp_lock_release>
   1040c:	9005883a 	mov	r2,r18
   10410:	003fdc06 	br	10384 <__alt_mem_Flash_flash_data+0xf4010384>
   10414:	000a8380 	call	a838 <__sinit>
   10418:	003fd706 	br	10378 <__alt_mem_Flash_flash_data+0xf4010378>
   1041c:	04bfffc4 	movi	r18,-1
   10420:	003fe806 	br	103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   10424:	81400417 	ldw	r5,16(r16)
   10428:	8809883a 	mov	r4,r17
   1042c:	000a9ac0 	call	a9ac <_free_r>
   10430:	003fe706 	br	103d0 <__alt_mem_Flash_flash_data+0xf40103d0>
   10434:	0005883a 	mov	r2,zero
   10438:	f800283a 	ret

0001043c <fclose>:
   1043c:	008000b4 	movhi	r2,2
   10440:	109fb304 	addi	r2,r2,32460
   10444:	200b883a 	mov	r5,r4
   10448:	11000017 	ldw	r4,0(r2)
   1044c:	001034c1 	jmpi	1034c <_fclose_r>

00010450 <_fputwc_r>:
   10450:	3080030b 	ldhu	r2,12(r6)
   10454:	defff804 	addi	sp,sp,-32
   10458:	dcc00415 	stw	r19,16(sp)
   1045c:	dc800315 	stw	r18,12(sp)
   10460:	dc000115 	stw	r16,4(sp)
   10464:	dfc00715 	stw	ra,28(sp)
   10468:	dd400615 	stw	r21,24(sp)
   1046c:	dd000515 	stw	r20,20(sp)
   10470:	dc400215 	stw	r17,8(sp)
   10474:	10c8000c 	andi	r3,r2,8192
   10478:	3021883a 	mov	r16,r6
   1047c:	2027883a 	mov	r19,r4
   10480:	2825883a 	mov	r18,r5
   10484:	1800051e 	bne	r3,zero,1049c <_fputwc_r+0x4c>
   10488:	30c01917 	ldw	r3,100(r6)
   1048c:	10880014 	ori	r2,r2,8192
   10490:	3080030d 	sth	r2,12(r6)
   10494:	18880014 	ori	r2,r3,8192
   10498:	30801915 	stw	r2,100(r6)
   1049c:	000b36c0 	call	b36c <__locale_mb_cur_max>
   104a0:	00c00044 	movi	r3,1
   104a4:	10c03e26 	beq	r2,r3,105a0 <_fputwc_r+0x150>
   104a8:	9809883a 	mov	r4,r19
   104ac:	d80b883a 	mov	r5,sp
   104b0:	900d883a 	mov	r6,r18
   104b4:	81c01704 	addi	r7,r16,92
   104b8:	00107940 	call	10794 <_wcrtomb_r>
   104bc:	1029883a 	mov	r20,r2
   104c0:	00bfffc4 	movi	r2,-1
   104c4:	a0802026 	beq	r20,r2,10548 <_fputwc_r+0xf8>
   104c8:	d9400003 	ldbu	r5,0(sp)
   104cc:	a0001c26 	beq	r20,zero,10540 <_fputwc_r+0xf0>
   104d0:	0023883a 	mov	r17,zero
   104d4:	05400284 	movi	r21,10
   104d8:	00000906 	br	10500 <_fputwc_r+0xb0>
   104dc:	80800017 	ldw	r2,0(r16)
   104e0:	11400005 	stb	r5,0(r2)
   104e4:	80c00017 	ldw	r3,0(r16)
   104e8:	18c00044 	addi	r3,r3,1
   104ec:	80c00015 	stw	r3,0(r16)
   104f0:	8c400044 	addi	r17,r17,1
   104f4:	dc45883a 	add	r2,sp,r17
   104f8:	8d00112e 	bgeu	r17,r20,10540 <_fputwc_r+0xf0>
   104fc:	11400003 	ldbu	r5,0(r2)
   10500:	80c00217 	ldw	r3,8(r16)
   10504:	18ffffc4 	addi	r3,r3,-1
   10508:	80c00215 	stw	r3,8(r16)
   1050c:	183ff30e 	bge	r3,zero,104dc <__alt_mem_Flash_flash_data+0xf40104dc>
   10510:	80800617 	ldw	r2,24(r16)
   10514:	18801916 	blt	r3,r2,1057c <_fputwc_r+0x12c>
   10518:	80800017 	ldw	r2,0(r16)
   1051c:	11400005 	stb	r5,0(r2)
   10520:	80800017 	ldw	r2,0(r16)
   10524:	10c00003 	ldbu	r3,0(r2)
   10528:	10800044 	addi	r2,r2,1
   1052c:	1d402326 	beq	r3,r21,105bc <_fputwc_r+0x16c>
   10530:	80800015 	stw	r2,0(r16)
   10534:	8c400044 	addi	r17,r17,1
   10538:	dc45883a 	add	r2,sp,r17
   1053c:	8d3fef36 	bltu	r17,r20,104fc <__alt_mem_Flash_flash_data+0xf40104fc>
   10540:	9005883a 	mov	r2,r18
   10544:	00000406 	br	10558 <_fputwc_r+0x108>
   10548:	80c0030b 	ldhu	r3,12(r16)
   1054c:	a005883a 	mov	r2,r20
   10550:	18c01014 	ori	r3,r3,64
   10554:	80c0030d 	sth	r3,12(r16)
   10558:	dfc00717 	ldw	ra,28(sp)
   1055c:	dd400617 	ldw	r21,24(sp)
   10560:	dd000517 	ldw	r20,20(sp)
   10564:	dcc00417 	ldw	r19,16(sp)
   10568:	dc800317 	ldw	r18,12(sp)
   1056c:	dc400217 	ldw	r17,8(sp)
   10570:	dc000117 	ldw	r16,4(sp)
   10574:	dec00804 	addi	sp,sp,32
   10578:	f800283a 	ret
   1057c:	9809883a 	mov	r4,r19
   10580:	29403fcc 	andi	r5,r5,255
   10584:	800d883a 	mov	r6,r16
   10588:	00100840 	call	10084 <__swbuf_r>
   1058c:	10bfffe0 	cmpeqi	r2,r2,-1
   10590:	10803fcc 	andi	r2,r2,255
   10594:	103fd626 	beq	r2,zero,104f0 <__alt_mem_Flash_flash_data+0xf40104f0>
   10598:	00bfffc4 	movi	r2,-1
   1059c:	003fee06 	br	10558 <__alt_mem_Flash_flash_data+0xf4010558>
   105a0:	90ffffc4 	addi	r3,r18,-1
   105a4:	01003f84 	movi	r4,254
   105a8:	20ffbf36 	bltu	r4,r3,104a8 <__alt_mem_Flash_flash_data+0xf40104a8>
   105ac:	900b883a 	mov	r5,r18
   105b0:	dc800005 	stb	r18,0(sp)
   105b4:	1029883a 	mov	r20,r2
   105b8:	003fc506 	br	104d0 <__alt_mem_Flash_flash_data+0xf40104d0>
   105bc:	9809883a 	mov	r4,r19
   105c0:	a80b883a 	mov	r5,r21
   105c4:	800d883a 	mov	r6,r16
   105c8:	00100840 	call	10084 <__swbuf_r>
   105cc:	10bfffe0 	cmpeqi	r2,r2,-1
   105d0:	003fef06 	br	10590 <__alt_mem_Flash_flash_data+0xf4010590>

000105d4 <fputwc>:
   105d4:	008000b4 	movhi	r2,2
   105d8:	defffc04 	addi	sp,sp,-16
   105dc:	109fb304 	addi	r2,r2,32460
   105e0:	dc000115 	stw	r16,4(sp)
   105e4:	14000017 	ldw	r16,0(r2)
   105e8:	dc400215 	stw	r17,8(sp)
   105ec:	dfc00315 	stw	ra,12(sp)
   105f0:	2023883a 	mov	r17,r4
   105f4:	280d883a 	mov	r6,r5
   105f8:	80000626 	beq	r16,zero,10614 <fputwc+0x40>
   105fc:	80800e17 	ldw	r2,56(r16)
   10600:	1000041e 	bne	r2,zero,10614 <fputwc+0x40>
   10604:	8009883a 	mov	r4,r16
   10608:	d9400015 	stw	r5,0(sp)
   1060c:	000a8380 	call	a838 <__sinit>
   10610:	d9800017 	ldw	r6,0(sp)
   10614:	8009883a 	mov	r4,r16
   10618:	880b883a 	mov	r5,r17
   1061c:	dfc00317 	ldw	ra,12(sp)
   10620:	dc400217 	ldw	r17,8(sp)
   10624:	dc000117 	ldw	r16,4(sp)
   10628:	dec00404 	addi	sp,sp,16
   1062c:	00104501 	jmpi	10450 <_fputwc_r>

00010630 <_fstat_r>:
   10630:	defffd04 	addi	sp,sp,-12
   10634:	dc000015 	stw	r16,0(sp)
   10638:	040000f4 	movhi	r16,3
   1063c:	dc400115 	stw	r17,4(sp)
   10640:	8427d704 	addi	r16,r16,-24740
   10644:	2023883a 	mov	r17,r4
   10648:	2809883a 	mov	r4,r5
   1064c:	300b883a 	mov	r5,r6
   10650:	dfc00215 	stw	ra,8(sp)
   10654:	80000015 	stw	zero,0(r16)
   10658:	0013d940 	call	13d94 <fstat>
   1065c:	00ffffc4 	movi	r3,-1
   10660:	10c00526 	beq	r2,r3,10678 <_fstat_r+0x48>
   10664:	dfc00217 	ldw	ra,8(sp)
   10668:	dc400117 	ldw	r17,4(sp)
   1066c:	dc000017 	ldw	r16,0(sp)
   10670:	dec00304 	addi	sp,sp,12
   10674:	f800283a 	ret
   10678:	80c00017 	ldw	r3,0(r16)
   1067c:	183ff926 	beq	r3,zero,10664 <__alt_mem_Flash_flash_data+0xf4010664>
   10680:	88c00015 	stw	r3,0(r17)
   10684:	003ff706 	br	10664 <__alt_mem_Flash_flash_data+0xf4010664>

00010688 <_isatty_r>:
   10688:	defffd04 	addi	sp,sp,-12
   1068c:	dc000015 	stw	r16,0(sp)
   10690:	040000f4 	movhi	r16,3
   10694:	dc400115 	stw	r17,4(sp)
   10698:	8427d704 	addi	r16,r16,-24740
   1069c:	2023883a 	mov	r17,r4
   106a0:	2809883a 	mov	r4,r5
   106a4:	dfc00215 	stw	ra,8(sp)
   106a8:	80000015 	stw	zero,0(r16)
   106ac:	0013e940 	call	13e94 <isatty>
   106b0:	00ffffc4 	movi	r3,-1
   106b4:	10c00526 	beq	r2,r3,106cc <_isatty_r+0x44>
   106b8:	dfc00217 	ldw	ra,8(sp)
   106bc:	dc400117 	ldw	r17,4(sp)
   106c0:	dc000017 	ldw	r16,0(sp)
   106c4:	dec00304 	addi	sp,sp,12
   106c8:	f800283a 	ret
   106cc:	80c00017 	ldw	r3,0(r16)
   106d0:	183ff926 	beq	r3,zero,106b8 <__alt_mem_Flash_flash_data+0xf40106b8>
   106d4:	88c00015 	stw	r3,0(r17)
   106d8:	003ff706 	br	106b8 <__alt_mem_Flash_flash_data+0xf40106b8>

000106dc <_lseek_r>:
   106dc:	defffd04 	addi	sp,sp,-12
   106e0:	dc000015 	stw	r16,0(sp)
   106e4:	040000f4 	movhi	r16,3
   106e8:	dc400115 	stw	r17,4(sp)
   106ec:	8427d704 	addi	r16,r16,-24740
   106f0:	2023883a 	mov	r17,r4
   106f4:	2809883a 	mov	r4,r5
   106f8:	300b883a 	mov	r5,r6
   106fc:	380d883a 	mov	r6,r7
   10700:	dfc00215 	stw	ra,8(sp)
   10704:	80000015 	stw	zero,0(r16)
   10708:	001406c0 	call	1406c <lseek>
   1070c:	00ffffc4 	movi	r3,-1
   10710:	10c00526 	beq	r2,r3,10728 <_lseek_r+0x4c>
   10714:	dfc00217 	ldw	ra,8(sp)
   10718:	dc400117 	ldw	r17,4(sp)
   1071c:	dc000017 	ldw	r16,0(sp)
   10720:	dec00304 	addi	sp,sp,12
   10724:	f800283a 	ret
   10728:	80c00017 	ldw	r3,0(r16)
   1072c:	183ff926 	beq	r3,zero,10714 <__alt_mem_Flash_flash_data+0xf4010714>
   10730:	88c00015 	stw	r3,0(r17)
   10734:	003ff706 	br	10714 <__alt_mem_Flash_flash_data+0xf4010714>

00010738 <_read_r>:
   10738:	defffd04 	addi	sp,sp,-12
   1073c:	dc000015 	stw	r16,0(sp)
   10740:	040000f4 	movhi	r16,3
   10744:	dc400115 	stw	r17,4(sp)
   10748:	8427d704 	addi	r16,r16,-24740
   1074c:	2023883a 	mov	r17,r4
   10750:	2809883a 	mov	r4,r5
   10754:	300b883a 	mov	r5,r6
   10758:	380d883a 	mov	r6,r7
   1075c:	dfc00215 	stw	ra,8(sp)
   10760:	80000015 	stw	zero,0(r16)
   10764:	00142640 	call	14264 <read>
   10768:	00ffffc4 	movi	r3,-1
   1076c:	10c00526 	beq	r2,r3,10784 <_read_r+0x4c>
   10770:	dfc00217 	ldw	ra,8(sp)
   10774:	dc400117 	ldw	r17,4(sp)
   10778:	dc000017 	ldw	r16,0(sp)
   1077c:	dec00304 	addi	sp,sp,12
   10780:	f800283a 	ret
   10784:	80c00017 	ldw	r3,0(r16)
   10788:	183ff926 	beq	r3,zero,10770 <__alt_mem_Flash_flash_data+0xf4010770>
   1078c:	88c00015 	stw	r3,0(r17)
   10790:	003ff706 	br	10770 <__alt_mem_Flash_flash_data+0xf4010770>

00010794 <_wcrtomb_r>:
   10794:	defff604 	addi	sp,sp,-40
   10798:	008000b4 	movhi	r2,2
   1079c:	dc800815 	stw	r18,32(sp)
   107a0:	dc400715 	stw	r17,28(sp)
   107a4:	dc000615 	stw	r16,24(sp)
   107a8:	109fb704 	addi	r2,r2,32476
   107ac:	dfc00915 	stw	ra,36(sp)
   107b0:	2021883a 	mov	r16,r4
   107b4:	3823883a 	mov	r17,r7
   107b8:	14800017 	ldw	r18,0(r2)
   107bc:	28001426 	beq	r5,zero,10810 <_wcrtomb_r+0x7c>
   107c0:	d9400415 	stw	r5,16(sp)
   107c4:	d9800515 	stw	r6,20(sp)
   107c8:	000b3600 	call	b360 <__locale_charset>
   107cc:	d9400417 	ldw	r5,16(sp)
   107d0:	d9800517 	ldw	r6,20(sp)
   107d4:	8009883a 	mov	r4,r16
   107d8:	dc400015 	stw	r17,0(sp)
   107dc:	100f883a 	mov	r7,r2
   107e0:	903ee83a 	callr	r18
   107e4:	00ffffc4 	movi	r3,-1
   107e8:	10c0031e 	bne	r2,r3,107f8 <_wcrtomb_r+0x64>
   107ec:	88000015 	stw	zero,0(r17)
   107f0:	00c02284 	movi	r3,138
   107f4:	80c00015 	stw	r3,0(r16)
   107f8:	dfc00917 	ldw	ra,36(sp)
   107fc:	dc800817 	ldw	r18,32(sp)
   10800:	dc400717 	ldw	r17,28(sp)
   10804:	dc000617 	ldw	r16,24(sp)
   10808:	dec00a04 	addi	sp,sp,40
   1080c:	f800283a 	ret
   10810:	000b3600 	call	b360 <__locale_charset>
   10814:	8009883a 	mov	r4,r16
   10818:	dc400015 	stw	r17,0(sp)
   1081c:	d9400104 	addi	r5,sp,4
   10820:	000d883a 	mov	r6,zero
   10824:	100f883a 	mov	r7,r2
   10828:	903ee83a 	callr	r18
   1082c:	003fed06 	br	107e4 <__alt_mem_Flash_flash_data+0xf40107e4>

00010830 <wcrtomb>:
   10830:	defff604 	addi	sp,sp,-40
   10834:	008000b4 	movhi	r2,2
   10838:	dc800615 	stw	r18,24(sp)
   1083c:	dc400515 	stw	r17,20(sp)
   10840:	dc000415 	stw	r16,16(sp)
   10844:	109fb304 	addi	r2,r2,32460
   10848:	dfc00915 	stw	ra,36(sp)
   1084c:	dd000815 	stw	r20,32(sp)
   10850:	dcc00715 	stw	r19,28(sp)
   10854:	2021883a 	mov	r16,r4
   10858:	3025883a 	mov	r18,r6
   1085c:	14400017 	ldw	r17,0(r2)
   10860:	20001826 	beq	r4,zero,108c4 <wcrtomb+0x94>
   10864:	008000b4 	movhi	r2,2
   10868:	109fb704 	addi	r2,r2,32476
   1086c:	15000017 	ldw	r20,0(r2)
   10870:	2827883a 	mov	r19,r5
   10874:	000b3600 	call	b360 <__locale_charset>
   10878:	8809883a 	mov	r4,r17
   1087c:	dc800015 	stw	r18,0(sp)
   10880:	800b883a 	mov	r5,r16
   10884:	980d883a 	mov	r6,r19
   10888:	100f883a 	mov	r7,r2
   1088c:	a03ee83a 	callr	r20
   10890:	00ffffc4 	movi	r3,-1
   10894:	10c0031e 	bne	r2,r3,108a4 <wcrtomb+0x74>
   10898:	90000015 	stw	zero,0(r18)
   1089c:	00c02284 	movi	r3,138
   108a0:	88c00015 	stw	r3,0(r17)
   108a4:	dfc00917 	ldw	ra,36(sp)
   108a8:	dd000817 	ldw	r20,32(sp)
   108ac:	dcc00717 	ldw	r19,28(sp)
   108b0:	dc800617 	ldw	r18,24(sp)
   108b4:	dc400517 	ldw	r17,20(sp)
   108b8:	dc000417 	ldw	r16,16(sp)
   108bc:	dec00a04 	addi	sp,sp,40
   108c0:	f800283a 	ret
   108c4:	008000b4 	movhi	r2,2
   108c8:	109fb704 	addi	r2,r2,32476
   108cc:	14000017 	ldw	r16,0(r2)
   108d0:	000b3600 	call	b360 <__locale_charset>
   108d4:	8809883a 	mov	r4,r17
   108d8:	dc800015 	stw	r18,0(sp)
   108dc:	d9400104 	addi	r5,sp,4
   108e0:	000d883a 	mov	r6,zero
   108e4:	100f883a 	mov	r7,r2
   108e8:	803ee83a 	callr	r16
   108ec:	003fe806 	br	10890 <__alt_mem_Flash_flash_data+0xf4010890>

000108f0 <__ascii_wctomb>:
   108f0:	28000526 	beq	r5,zero,10908 <__ascii_wctomb+0x18>
   108f4:	00803fc4 	movi	r2,255
   108f8:	11800536 	bltu	r2,r6,10910 <__ascii_wctomb+0x20>
   108fc:	29800005 	stb	r6,0(r5)
   10900:	00800044 	movi	r2,1
   10904:	f800283a 	ret
   10908:	0005883a 	mov	r2,zero
   1090c:	f800283a 	ret
   10910:	00802284 	movi	r2,138
   10914:	20800015 	stw	r2,0(r4)
   10918:	00bfffc4 	movi	r2,-1
   1091c:	f800283a 	ret

00010920 <_wctomb_r>:
   10920:	008000b4 	movhi	r2,2
   10924:	defff904 	addi	sp,sp,-28
   10928:	109fb704 	addi	r2,r2,32476
   1092c:	dfc00615 	stw	ra,24(sp)
   10930:	dc400515 	stw	r17,20(sp)
   10934:	dc000415 	stw	r16,16(sp)
   10938:	3823883a 	mov	r17,r7
   1093c:	14000017 	ldw	r16,0(r2)
   10940:	d9000115 	stw	r4,4(sp)
   10944:	d9400215 	stw	r5,8(sp)
   10948:	d9800315 	stw	r6,12(sp)
   1094c:	000b3600 	call	b360 <__locale_charset>
   10950:	d9000117 	ldw	r4,4(sp)
   10954:	d9400217 	ldw	r5,8(sp)
   10958:	d9800317 	ldw	r6,12(sp)
   1095c:	dc400015 	stw	r17,0(sp)
   10960:	100f883a 	mov	r7,r2
   10964:	803ee83a 	callr	r16
   10968:	dfc00617 	ldw	ra,24(sp)
   1096c:	dc400517 	ldw	r17,20(sp)
   10970:	dc000417 	ldw	r16,16(sp)
   10974:	dec00704 	addi	sp,sp,28
   10978:	f800283a 	ret

0001097c <__udivdi3>:
   1097c:	defff504 	addi	sp,sp,-44
   10980:	dcc00415 	stw	r19,16(sp)
   10984:	dc000115 	stw	r16,4(sp)
   10988:	dfc00a15 	stw	ra,40(sp)
   1098c:	df000915 	stw	fp,36(sp)
   10990:	ddc00815 	stw	r23,32(sp)
   10994:	dd800715 	stw	r22,28(sp)
   10998:	dd400615 	stw	r21,24(sp)
   1099c:	dd000515 	stw	r20,20(sp)
   109a0:	dc800315 	stw	r18,12(sp)
   109a4:	dc400215 	stw	r17,8(sp)
   109a8:	2027883a 	mov	r19,r4
   109ac:	2821883a 	mov	r16,r5
   109b0:	3800421e 	bne	r7,zero,10abc <__udivdi3+0x140>
   109b4:	3025883a 	mov	r18,r6
   109b8:	2023883a 	mov	r17,r4
   109bc:	2980542e 	bgeu	r5,r6,10b10 <__udivdi3+0x194>
   109c0:	00bfffd4 	movui	r2,65535
   109c4:	282d883a 	mov	r22,r5
   109c8:	1180a836 	bltu	r2,r6,10c6c <__udivdi3+0x2f0>
   109cc:	00803fc4 	movi	r2,255
   109d0:	1181422e 	bgeu	r2,r6,10edc <__udivdi3+0x560>
   109d4:	00800204 	movi	r2,8
   109d8:	1007883a 	mov	r3,r2
   109dc:	3084d83a 	srl	r2,r6,r2
   109e0:	010000b4 	movhi	r4,2
   109e4:	21171a04 	addi	r4,r4,23656
   109e8:	2085883a 	add	r2,r4,r2
   109ec:	10800003 	ldbu	r2,0(r2)
   109f0:	10c7883a 	add	r3,r2,r3
   109f4:	00800804 	movi	r2,32
   109f8:	10c5c83a 	sub	r2,r2,r3
   109fc:	10000526 	beq	r2,zero,10a14 <__udivdi3+0x98>
   10a00:	80a0983a 	sll	r16,r16,r2
   10a04:	98c6d83a 	srl	r3,r19,r3
   10a08:	30a4983a 	sll	r18,r6,r2
   10a0c:	98a2983a 	sll	r17,r19,r2
   10a10:	80ecb03a 	or	r22,r16,r3
   10a14:	902ad43a 	srli	r21,r18,16
   10a18:	b009883a 	mov	r4,r22
   10a1c:	953fffcc 	andi	r20,r18,65535
   10a20:	a80b883a 	mov	r5,r21
   10a24:	00115f00 	call	115f0 <__umodsi3>
   10a28:	b009883a 	mov	r4,r22
   10a2c:	a80b883a 	mov	r5,r21
   10a30:	1027883a 	mov	r19,r2
   10a34:	00115e80 	call	115e8 <__udivsi3>
   10a38:	1021883a 	mov	r16,r2
   10a3c:	8806d43a 	srli	r3,r17,16
   10a40:	9804943a 	slli	r2,r19,16
   10a44:	8527383a 	mul	r19,r16,r20
   10a48:	10c4b03a 	or	r2,r2,r3
   10a4c:	14c0052e 	bgeu	r2,r19,10a64 <__udivdi3+0xe8>
   10a50:	1485883a 	add	r2,r2,r18
   10a54:	80ffffc4 	addi	r3,r16,-1
   10a58:	14800136 	bltu	r2,r18,10a60 <__udivdi3+0xe4>
   10a5c:	14c13436 	bltu	r2,r19,10f30 <__udivdi3+0x5b4>
   10a60:	1821883a 	mov	r16,r3
   10a64:	14e7c83a 	sub	r19,r2,r19
   10a68:	9809883a 	mov	r4,r19
   10a6c:	a80b883a 	mov	r5,r21
   10a70:	00115f00 	call	115f0 <__umodsi3>
   10a74:	102d883a 	mov	r22,r2
   10a78:	9809883a 	mov	r4,r19
   10a7c:	a80b883a 	mov	r5,r21
   10a80:	00115e80 	call	115e8 <__udivsi3>
   10a84:	b02c943a 	slli	r22,r22,16
   10a88:	1529383a 	mul	r20,r2,r20
   10a8c:	8c7fffcc 	andi	r17,r17,65535
   10a90:	b462b03a 	or	r17,r22,r17
   10a94:	8d00052e 	bgeu	r17,r20,10aac <__udivdi3+0x130>
   10a98:	8ca3883a 	add	r17,r17,r18
   10a9c:	10ffffc4 	addi	r3,r2,-1
   10aa0:	8c80f636 	bltu	r17,r18,10e7c <__udivdi3+0x500>
   10aa4:	8d00f52e 	bgeu	r17,r20,10e7c <__udivdi3+0x500>
   10aa8:	10bfff84 	addi	r2,r2,-2
   10aac:	8020943a 	slli	r16,r16,16
   10ab0:	0007883a 	mov	r3,zero
   10ab4:	1404b03a 	or	r2,r2,r16
   10ab8:	00005b06 	br	10c28 <__udivdi3+0x2ac>
   10abc:	29c05836 	bltu	r5,r7,10c20 <__udivdi3+0x2a4>
   10ac0:	00bfffd4 	movui	r2,65535
   10ac4:	11c0642e 	bgeu	r2,r7,10c58 <__udivdi3+0x2dc>
   10ac8:	00804034 	movhi	r2,256
   10acc:	10bfffc4 	addi	r2,r2,-1
   10ad0:	11c0f32e 	bgeu	r2,r7,10ea0 <__udivdi3+0x524>
   10ad4:	00c00604 	movi	r3,24
   10ad8:	180b883a 	mov	r5,r3
   10adc:	38c6d83a 	srl	r3,r7,r3
   10ae0:	008000b4 	movhi	r2,2
   10ae4:	10971a04 	addi	r2,r2,23656
   10ae8:	10c7883a 	add	r3,r2,r3
   10aec:	18c00003 	ldbu	r3,0(r3)
   10af0:	01000804 	movi	r4,32
   10af4:	1947883a 	add	r3,r3,r5
   10af8:	20e5c83a 	sub	r18,r4,r3
   10afc:	9000661e 	bne	r18,zero,10c98 <__udivdi3+0x31c>
   10b00:	3c00f936 	bltu	r7,r16,10ee8 <__udivdi3+0x56c>
   10b04:	9985403a 	cmpgeu	r2,r19,r6
   10b08:	0007883a 	mov	r3,zero
   10b0c:	00004606 	br	10c28 <__udivdi3+0x2ac>
   10b10:	3000041e 	bne	r6,zero,10b24 <__udivdi3+0x1a8>
   10b14:	01000044 	movi	r4,1
   10b18:	000b883a 	mov	r5,zero
   10b1c:	00115e80 	call	115e8 <__udivsi3>
   10b20:	1025883a 	mov	r18,r2
   10b24:	00bfffd4 	movui	r2,65535
   10b28:	1480562e 	bgeu	r2,r18,10c84 <__udivdi3+0x308>
   10b2c:	00804034 	movhi	r2,256
   10b30:	10bfffc4 	addi	r2,r2,-1
   10b34:	1480e32e 	bgeu	r2,r18,10ec4 <__udivdi3+0x548>
   10b38:	00800604 	movi	r2,24
   10b3c:	1007883a 	mov	r3,r2
   10b40:	9084d83a 	srl	r2,r18,r2
   10b44:	010000b4 	movhi	r4,2
   10b48:	21171a04 	addi	r4,r4,23656
   10b4c:	2085883a 	add	r2,r4,r2
   10b50:	10800003 	ldbu	r2,0(r2)
   10b54:	10c5883a 	add	r2,r2,r3
   10b58:	00c00804 	movi	r3,32
   10b5c:	1887c83a 	sub	r3,r3,r2
   10b60:	1800911e 	bne	r3,zero,10da8 <__udivdi3+0x42c>
   10b64:	9028d43a 	srli	r20,r18,16
   10b68:	84a1c83a 	sub	r16,r16,r18
   10b6c:	957fffcc 	andi	r21,r18,65535
   10b70:	00c00044 	movi	r3,1
   10b74:	8009883a 	mov	r4,r16
   10b78:	a00b883a 	mov	r5,r20
   10b7c:	d8c00015 	stw	r3,0(sp)
   10b80:	00115f00 	call	115f0 <__umodsi3>
   10b84:	8009883a 	mov	r4,r16
   10b88:	a00b883a 	mov	r5,r20
   10b8c:	1027883a 	mov	r19,r2
   10b90:	00115e80 	call	115e8 <__udivsi3>
   10b94:	1021883a 	mov	r16,r2
   10b98:	880cd43a 	srli	r6,r17,16
   10b9c:	9804943a 	slli	r2,r19,16
   10ba0:	8567383a 	mul	r19,r16,r21
   10ba4:	d8c00017 	ldw	r3,0(sp)
   10ba8:	1188b03a 	or	r4,r2,r6
   10bac:	24c0052e 	bgeu	r4,r19,10bc4 <__udivdi3+0x248>
   10bb0:	2489883a 	add	r4,r4,r18
   10bb4:	80bfffc4 	addi	r2,r16,-1
   10bb8:	24800136 	bltu	r4,r18,10bc0 <__udivdi3+0x244>
   10bbc:	24c0d936 	bltu	r4,r19,10f24 <__udivdi3+0x5a8>
   10bc0:	1021883a 	mov	r16,r2
   10bc4:	24e7c83a 	sub	r19,r4,r19
   10bc8:	9809883a 	mov	r4,r19
   10bcc:	a00b883a 	mov	r5,r20
   10bd0:	d8c00015 	stw	r3,0(sp)
   10bd4:	00115f00 	call	115f0 <__umodsi3>
   10bd8:	102d883a 	mov	r22,r2
   10bdc:	9809883a 	mov	r4,r19
   10be0:	a00b883a 	mov	r5,r20
   10be4:	00115e80 	call	115e8 <__udivsi3>
   10be8:	b02c943a 	slli	r22,r22,16
   10bec:	156b383a 	mul	r21,r2,r21
   10bf0:	8c7fffcc 	andi	r17,r17,65535
   10bf4:	b462b03a 	or	r17,r22,r17
   10bf8:	d8c00017 	ldw	r3,0(sp)
   10bfc:	8d40052e 	bgeu	r17,r21,10c14 <__udivdi3+0x298>
   10c00:	8ca3883a 	add	r17,r17,r18
   10c04:	113fffc4 	addi	r4,r2,-1
   10c08:	8c809a36 	bltu	r17,r18,10e74 <__udivdi3+0x4f8>
   10c0c:	8d40992e 	bgeu	r17,r21,10e74 <__udivdi3+0x4f8>
   10c10:	10bfff84 	addi	r2,r2,-2
   10c14:	8020943a 	slli	r16,r16,16
   10c18:	1404b03a 	or	r2,r2,r16
   10c1c:	00000206 	br	10c28 <__udivdi3+0x2ac>
   10c20:	0007883a 	mov	r3,zero
   10c24:	0005883a 	mov	r2,zero
   10c28:	dfc00a17 	ldw	ra,40(sp)
   10c2c:	df000917 	ldw	fp,36(sp)
   10c30:	ddc00817 	ldw	r23,32(sp)
   10c34:	dd800717 	ldw	r22,28(sp)
   10c38:	dd400617 	ldw	r21,24(sp)
   10c3c:	dd000517 	ldw	r20,20(sp)
   10c40:	dcc00417 	ldw	r19,16(sp)
   10c44:	dc800317 	ldw	r18,12(sp)
   10c48:	dc400217 	ldw	r17,8(sp)
   10c4c:	dc000117 	ldw	r16,4(sp)
   10c50:	dec00b04 	addi	sp,sp,44
   10c54:	f800283a 	ret
   10c58:	00803fc4 	movi	r2,255
   10c5c:	11c0932e 	bgeu	r2,r7,10eac <__udivdi3+0x530>
   10c60:	00c00204 	movi	r3,8
   10c64:	180b883a 	mov	r5,r3
   10c68:	003f9c06 	br	10adc <__alt_mem_Flash_flash_data+0xf4010adc>
   10c6c:	00804034 	movhi	r2,256
   10c70:	10bfffc4 	addi	r2,r2,-1
   10c74:	1180902e 	bgeu	r2,r6,10eb8 <__udivdi3+0x53c>
   10c78:	00800604 	movi	r2,24
   10c7c:	1007883a 	mov	r3,r2
   10c80:	003f5606 	br	109dc <__alt_mem_Flash_flash_data+0xf40109dc>
   10c84:	00803fc4 	movi	r2,255
   10c88:	1480912e 	bgeu	r2,r18,10ed0 <__udivdi3+0x554>
   10c8c:	00800204 	movi	r2,8
   10c90:	1007883a 	mov	r3,r2
   10c94:	003faa06 	br	10b40 <__alt_mem_Flash_flash_data+0xf4010b40>
   10c98:	30eed83a 	srl	r23,r6,r3
   10c9c:	3c8e983a 	sll	r7,r7,r18
   10ca0:	80f8d83a 	srl	fp,r16,r3
   10ca4:	98c6d83a 	srl	r3,r19,r3
   10ca8:	3deeb03a 	or	r23,r7,r23
   10cac:	b828d43a 	srli	r20,r23,16
   10cb0:	84a0983a 	sll	r16,r16,r18
   10cb4:	e009883a 	mov	r4,fp
   10cb8:	a00b883a 	mov	r5,r20
   10cbc:	80e2b03a 	or	r17,r16,r3
   10cc0:	34aa983a 	sll	r21,r6,r18
   10cc4:	00115f00 	call	115f0 <__umodsi3>
   10cc8:	e009883a 	mov	r4,fp
   10ccc:	a00b883a 	mov	r5,r20
   10cd0:	102d883a 	mov	r22,r2
   10cd4:	00115e80 	call	115e8 <__udivsi3>
   10cd8:	1021883a 	mov	r16,r2
   10cdc:	bf3fffcc 	andi	fp,r23,65535
   10ce0:	b004943a 	slli	r2,r22,16
   10ce4:	8808d43a 	srli	r4,r17,16
   10ce8:	872d383a 	mul	r22,r16,fp
   10cec:	1104b03a 	or	r2,r2,r4
   10cf0:	1580042e 	bgeu	r2,r22,10d04 <__udivdi3+0x388>
   10cf4:	15c5883a 	add	r2,r2,r23
   10cf8:	80ffffc4 	addi	r3,r16,-1
   10cfc:	15c0812e 	bgeu	r2,r23,10f04 <__udivdi3+0x588>
   10d00:	1821883a 	mov	r16,r3
   10d04:	15adc83a 	sub	r22,r2,r22
   10d08:	b009883a 	mov	r4,r22
   10d0c:	a00b883a 	mov	r5,r20
   10d10:	00115f00 	call	115f0 <__umodsi3>
   10d14:	a00b883a 	mov	r5,r20
   10d18:	b009883a 	mov	r4,r22
   10d1c:	d8800015 	stw	r2,0(sp)
   10d20:	00115e80 	call	115e8 <__udivsi3>
   10d24:	d8c00017 	ldw	r3,0(sp)
   10d28:	170b383a 	mul	r5,r2,fp
   10d2c:	8c7fffcc 	andi	r17,r17,65535
   10d30:	1806943a 	slli	r3,r3,16
   10d34:	1c46b03a 	or	r3,r3,r17
   10d38:	1940042e 	bgeu	r3,r5,10d4c <__udivdi3+0x3d0>
   10d3c:	1dc7883a 	add	r3,r3,r23
   10d40:	113fffc4 	addi	r4,r2,-1
   10d44:	1dc06b2e 	bgeu	r3,r23,10ef4 <__udivdi3+0x578>
   10d48:	2005883a 	mov	r2,r4
   10d4c:	8020943a 	slli	r16,r16,16
   10d50:	a9ffffcc 	andi	r7,r21,65535
   10d54:	a82ad43a 	srli	r21,r21,16
   10d58:	1404b03a 	or	r2,r2,r16
   10d5c:	113fffcc 	andi	r4,r2,65535
   10d60:	100cd43a 	srli	r6,r2,16
   10d64:	21d3383a 	mul	r9,r4,r7
   10d68:	2549383a 	mul	r4,r4,r21
   10d6c:	31cf383a 	mul	r7,r6,r7
   10d70:	4810d43a 	srli	r8,r9,16
   10d74:	1947c83a 	sub	r3,r3,r5
   10d78:	3909883a 	add	r4,r7,r4
   10d7c:	2209883a 	add	r4,r4,r8
   10d80:	354d383a 	mul	r6,r6,r21
   10d84:	21c0022e 	bgeu	r4,r7,10d90 <__udivdi3+0x414>
   10d88:	01400074 	movhi	r5,1
   10d8c:	314d883a 	add	r6,r6,r5
   10d90:	202ad43a 	srli	r21,r4,16
   10d94:	354d883a 	add	r6,r6,r21
   10d98:	19803f36 	bltu	r3,r6,10e98 <__udivdi3+0x51c>
   10d9c:	19803926 	beq	r3,r6,10e84 <__udivdi3+0x508>
   10da0:	0007883a 	mov	r3,zero
   10da4:	003fa006 	br	10c28 <__alt_mem_Flash_flash_data+0xf4010c28>
   10da8:	90e4983a 	sll	r18,r18,r3
   10dac:	80aad83a 	srl	r21,r16,r2
   10db0:	80e0983a 	sll	r16,r16,r3
   10db4:	9028d43a 	srli	r20,r18,16
   10db8:	9884d83a 	srl	r2,r19,r2
   10dbc:	a809883a 	mov	r4,r21
   10dc0:	a00b883a 	mov	r5,r20
   10dc4:	80acb03a 	or	r22,r16,r2
   10dc8:	98e2983a 	sll	r17,r19,r3
   10dcc:	00115f00 	call	115f0 <__umodsi3>
   10dd0:	a809883a 	mov	r4,r21
   10dd4:	a00b883a 	mov	r5,r20
   10dd8:	1021883a 	mov	r16,r2
   10ddc:	00115e80 	call	115e8 <__udivsi3>
   10de0:	957fffcc 	andi	r21,r18,65535
   10de4:	8020943a 	slli	r16,r16,16
   10de8:	b00ad43a 	srli	r5,r22,16
   10dec:	1567383a 	mul	r19,r2,r21
   10df0:	102f883a 	mov	r23,r2
   10df4:	8148b03a 	or	r4,r16,r5
   10df8:	24c0062e 	bgeu	r4,r19,10e14 <__udivdi3+0x498>
   10dfc:	2489883a 	add	r4,r4,r18
   10e00:	10bfffc4 	addi	r2,r2,-1
   10e04:	24804536 	bltu	r4,r18,10f1c <__udivdi3+0x5a0>
   10e08:	24c0442e 	bgeu	r4,r19,10f1c <__udivdi3+0x5a0>
   10e0c:	bdffff84 	addi	r23,r23,-2
   10e10:	2489883a 	add	r4,r4,r18
   10e14:	24e7c83a 	sub	r19,r4,r19
   10e18:	9809883a 	mov	r4,r19
   10e1c:	a00b883a 	mov	r5,r20
   10e20:	00115f00 	call	115f0 <__umodsi3>
   10e24:	1021883a 	mov	r16,r2
   10e28:	9809883a 	mov	r4,r19
   10e2c:	a00b883a 	mov	r5,r20
   10e30:	00115e80 	call	115e8 <__udivsi3>
   10e34:	8020943a 	slli	r16,r16,16
   10e38:	1007883a 	mov	r3,r2
   10e3c:	1545383a 	mul	r2,r2,r21
   10e40:	b13fffcc 	andi	r4,r22,65535
   10e44:	8108b03a 	or	r4,r16,r4
   10e48:	2080062e 	bgeu	r4,r2,10e64 <__udivdi3+0x4e8>
   10e4c:	2489883a 	add	r4,r4,r18
   10e50:	197fffc4 	addi	r5,r3,-1
   10e54:	24802f36 	bltu	r4,r18,10f14 <__udivdi3+0x598>
   10e58:	20802e2e 	bgeu	r4,r2,10f14 <__udivdi3+0x598>
   10e5c:	18ffff84 	addi	r3,r3,-2
   10e60:	2489883a 	add	r4,r4,r18
   10e64:	b82e943a 	slli	r23,r23,16
   10e68:	20a1c83a 	sub	r16,r4,r2
   10e6c:	1dc6b03a 	or	r3,r3,r23
   10e70:	003f4006 	br	10b74 <__alt_mem_Flash_flash_data+0xf4010b74>
   10e74:	2005883a 	mov	r2,r4
   10e78:	003f6606 	br	10c14 <__alt_mem_Flash_flash_data+0xf4010c14>
   10e7c:	1805883a 	mov	r2,r3
   10e80:	003f0a06 	br	10aac <__alt_mem_Flash_flash_data+0xf4010aac>
   10e84:	2006943a 	slli	r3,r4,16
   10e88:	9c88983a 	sll	r4,r19,r18
   10e8c:	4a7fffcc 	andi	r9,r9,65535
   10e90:	1a47883a 	add	r3,r3,r9
   10e94:	20ffc22e 	bgeu	r4,r3,10da0 <__alt_mem_Flash_flash_data+0xf4010da0>
   10e98:	10bfffc4 	addi	r2,r2,-1
   10e9c:	003fc006 	br	10da0 <__alt_mem_Flash_flash_data+0xf4010da0>
   10ea0:	00c00404 	movi	r3,16
   10ea4:	180b883a 	mov	r5,r3
   10ea8:	003f0c06 	br	10adc <__alt_mem_Flash_flash_data+0xf4010adc>
   10eac:	0007883a 	mov	r3,zero
   10eb0:	000b883a 	mov	r5,zero
   10eb4:	003f0906 	br	10adc <__alt_mem_Flash_flash_data+0xf4010adc>
   10eb8:	00800404 	movi	r2,16
   10ebc:	1007883a 	mov	r3,r2
   10ec0:	003ec606 	br	109dc <__alt_mem_Flash_flash_data+0xf40109dc>
   10ec4:	00800404 	movi	r2,16
   10ec8:	1007883a 	mov	r3,r2
   10ecc:	003f1c06 	br	10b40 <__alt_mem_Flash_flash_data+0xf4010b40>
   10ed0:	0005883a 	mov	r2,zero
   10ed4:	0007883a 	mov	r3,zero
   10ed8:	003f1906 	br	10b40 <__alt_mem_Flash_flash_data+0xf4010b40>
   10edc:	0005883a 	mov	r2,zero
   10ee0:	0007883a 	mov	r3,zero
   10ee4:	003ebd06 	br	109dc <__alt_mem_Flash_flash_data+0xf40109dc>
   10ee8:	0007883a 	mov	r3,zero
   10eec:	00800044 	movi	r2,1
   10ef0:	003f4d06 	br	10c28 <__alt_mem_Flash_flash_data+0xf4010c28>
   10ef4:	197f942e 	bgeu	r3,r5,10d48 <__alt_mem_Flash_flash_data+0xf4010d48>
   10ef8:	10bfff84 	addi	r2,r2,-2
   10efc:	1dc7883a 	add	r3,r3,r23
   10f00:	003f9206 	br	10d4c <__alt_mem_Flash_flash_data+0xf4010d4c>
   10f04:	15bf7e2e 	bgeu	r2,r22,10d00 <__alt_mem_Flash_flash_data+0xf4010d00>
   10f08:	843fff84 	addi	r16,r16,-2
   10f0c:	15c5883a 	add	r2,r2,r23
   10f10:	003f7c06 	br	10d04 <__alt_mem_Flash_flash_data+0xf4010d04>
   10f14:	2807883a 	mov	r3,r5
   10f18:	003fd206 	br	10e64 <__alt_mem_Flash_flash_data+0xf4010e64>
   10f1c:	102f883a 	mov	r23,r2
   10f20:	003fbc06 	br	10e14 <__alt_mem_Flash_flash_data+0xf4010e14>
   10f24:	843fff84 	addi	r16,r16,-2
   10f28:	2489883a 	add	r4,r4,r18
   10f2c:	003f2506 	br	10bc4 <__alt_mem_Flash_flash_data+0xf4010bc4>
   10f30:	843fff84 	addi	r16,r16,-2
   10f34:	1485883a 	add	r2,r2,r18
   10f38:	003eca06 	br	10a64 <__alt_mem_Flash_flash_data+0xf4010a64>

00010f3c <__umoddi3>:
   10f3c:	defff404 	addi	sp,sp,-48
   10f40:	ddc00915 	stw	r23,36(sp)
   10f44:	dc400315 	stw	r17,12(sp)
   10f48:	dc000215 	stw	r16,8(sp)
   10f4c:	dfc00b15 	stw	ra,44(sp)
   10f50:	df000a15 	stw	fp,40(sp)
   10f54:	dd800815 	stw	r22,32(sp)
   10f58:	dd400715 	stw	r21,28(sp)
   10f5c:	dd000615 	stw	r20,24(sp)
   10f60:	dcc00515 	stw	r19,20(sp)
   10f64:	dc800415 	stw	r18,16(sp)
   10f68:	2021883a 	mov	r16,r4
   10f6c:	2823883a 	mov	r17,r5
   10f70:	282f883a 	mov	r23,r5
   10f74:	3800381e 	bne	r7,zero,11058 <__umoddi3+0x11c>
   10f78:	3027883a 	mov	r19,r6
   10f7c:	2029883a 	mov	r20,r4
   10f80:	29804e2e 	bgeu	r5,r6,110bc <__umoddi3+0x180>
   10f84:	00bfffd4 	movui	r2,65535
   10f88:	11809c36 	bltu	r2,r6,111fc <__umoddi3+0x2c0>
   10f8c:	00803fc4 	movi	r2,255
   10f90:	11813b2e 	bgeu	r2,r6,11480 <__umoddi3+0x544>
   10f94:	01400204 	movi	r5,8
   10f98:	2805883a 	mov	r2,r5
   10f9c:	314ad83a 	srl	r5,r6,r5
   10fa0:	00c000b4 	movhi	r3,2
   10fa4:	18d71a04 	addi	r3,r3,23656
   10fa8:	194b883a 	add	r5,r3,r5
   10fac:	29000003 	ldbu	r4,0(r5)
   10fb0:	2089883a 	add	r4,r4,r2
   10fb4:	00800804 	movi	r2,32
   10fb8:	1105c83a 	sub	r2,r2,r4
   10fbc:	1000ec26 	beq	r2,zero,11370 <__umoddi3+0x434>
   10fc0:	88a2983a 	sll	r17,r17,r2
   10fc4:	8108d83a 	srl	r4,r16,r4
   10fc8:	30a6983a 	sll	r19,r6,r2
   10fcc:	80a8983a 	sll	r20,r16,r2
   10fd0:	1025883a 	mov	r18,r2
   10fd4:	892eb03a 	or	r23,r17,r4
   10fd8:	982cd43a 	srli	r22,r19,16
   10fdc:	b809883a 	mov	r4,r23
   10fe0:	9d7fffcc 	andi	r21,r19,65535
   10fe4:	b00b883a 	mov	r5,r22
   10fe8:	00115f00 	call	115f0 <__umodsi3>
   10fec:	b809883a 	mov	r4,r23
   10ff0:	b00b883a 	mov	r5,r22
   10ff4:	1021883a 	mov	r16,r2
   10ff8:	00115e80 	call	115e8 <__udivsi3>
   10ffc:	8020943a 	slli	r16,r16,16
   11000:	a00cd43a 	srli	r6,r20,16
   11004:	1545383a 	mul	r2,r2,r21
   11008:	8188b03a 	or	r4,r16,r6
   1100c:	2080042e 	bgeu	r4,r2,11020 <__umoddi3+0xe4>
   11010:	24c9883a 	add	r4,r4,r19
   11014:	24c00236 	bltu	r4,r19,11020 <__umoddi3+0xe4>
   11018:	2080012e 	bgeu	r4,r2,11020 <__umoddi3+0xe4>
   1101c:	24c9883a 	add	r4,r4,r19
   11020:	20a3c83a 	sub	r17,r4,r2
   11024:	8809883a 	mov	r4,r17
   11028:	b00b883a 	mov	r5,r22
   1102c:	00115f00 	call	115f0 <__umodsi3>
   11030:	8809883a 	mov	r4,r17
   11034:	b00b883a 	mov	r5,r22
   11038:	1021883a 	mov	r16,r2
   1103c:	00115e80 	call	115e8 <__udivsi3>
   11040:	8006943a 	slli	r3,r16,16
   11044:	1545383a 	mul	r2,r2,r21
   11048:	a13fffcc 	andi	r4,r20,65535
   1104c:	1906b03a 	or	r3,r3,r4
   11050:	1880532e 	bgeu	r3,r2,111a0 <__umoddi3+0x264>
   11054:	00004e06 	br	11190 <__umoddi3+0x254>
   11058:	29c05536 	bltu	r5,r7,111b0 <__umoddi3+0x274>
   1105c:	00bfffd4 	movui	r2,65535
   11060:	11c0612e 	bgeu	r2,r7,111e8 <__umoddi3+0x2ac>
   11064:	00804034 	movhi	r2,256
   11068:	10bfffc4 	addi	r2,r2,-1
   1106c:	11c0f82e 	bgeu	r2,r7,11450 <__umoddi3+0x514>
   11070:	01400604 	movi	r5,24
   11074:	282b883a 	mov	r21,r5
   11078:	394ad83a 	srl	r5,r7,r5
   1107c:	00c000b4 	movhi	r3,2
   11080:	18d71a04 	addi	r3,r3,23656
   11084:	194b883a 	add	r5,r3,r5
   11088:	28800003 	ldbu	r2,0(r5)
   1108c:	00c00804 	movi	r3,32
   11090:	156b883a 	add	r21,r2,r21
   11094:	1d69c83a 	sub	r20,r3,r21
   11098:	a000631e 	bne	r20,zero,11228 <__umoddi3+0x2ec>
   1109c:	3c400136 	bltu	r7,r17,110a4 <__umoddi3+0x168>
   110a0:	81810436 	bltu	r16,r6,114b4 <__umoddi3+0x578>
   110a4:	8185c83a 	sub	r2,r16,r6
   110a8:	89e3c83a 	sub	r17,r17,r7
   110ac:	8087803a 	cmpltu	r3,r16,r2
   110b0:	88efc83a 	sub	r23,r17,r3
   110b4:	b807883a 	mov	r3,r23
   110b8:	00003f06 	br	111b8 <__umoddi3+0x27c>
   110bc:	3000041e 	bne	r6,zero,110d0 <__umoddi3+0x194>
   110c0:	01000044 	movi	r4,1
   110c4:	000b883a 	mov	r5,zero
   110c8:	00115e80 	call	115e8 <__udivsi3>
   110cc:	1027883a 	mov	r19,r2
   110d0:	00bfffd4 	movui	r2,65535
   110d4:	14c04f2e 	bgeu	r2,r19,11214 <__umoddi3+0x2d8>
   110d8:	00804034 	movhi	r2,256
   110dc:	10bfffc4 	addi	r2,r2,-1
   110e0:	14c0e42e 	bgeu	r2,r19,11474 <__umoddi3+0x538>
   110e4:	00800604 	movi	r2,24
   110e8:	1007883a 	mov	r3,r2
   110ec:	9884d83a 	srl	r2,r19,r2
   110f0:	010000b4 	movhi	r4,2
   110f4:	21171a04 	addi	r4,r4,23656
   110f8:	2085883a 	add	r2,r4,r2
   110fc:	11000003 	ldbu	r4,0(r2)
   11100:	00800804 	movi	r2,32
   11104:	20c7883a 	add	r3,r4,r3
   11108:	10c5c83a 	sub	r2,r2,r3
   1110c:	10009a1e 	bne	r2,zero,11378 <__umoddi3+0x43c>
   11110:	982cd43a 	srli	r22,r19,16
   11114:	8ce3c83a 	sub	r17,r17,r19
   11118:	9c3fffcc 	andi	r16,r19,65535
   1111c:	0025883a 	mov	r18,zero
   11120:	8809883a 	mov	r4,r17
   11124:	b00b883a 	mov	r5,r22
   11128:	00115f00 	call	115f0 <__umodsi3>
   1112c:	8809883a 	mov	r4,r17
   11130:	b00b883a 	mov	r5,r22
   11134:	102b883a 	mov	r21,r2
   11138:	00115e80 	call	115e8 <__udivsi3>
   1113c:	a806943a 	slli	r3,r21,16
   11140:	a008d43a 	srli	r4,r20,16
   11144:	1405383a 	mul	r2,r2,r16
   11148:	190cb03a 	or	r6,r3,r4
   1114c:	3080032e 	bgeu	r6,r2,1115c <__umoddi3+0x220>
   11150:	34cd883a 	add	r6,r6,r19
   11154:	34c00136 	bltu	r6,r19,1115c <__umoddi3+0x220>
   11158:	3080d436 	bltu	r6,r2,114ac <__umoddi3+0x570>
   1115c:	30abc83a 	sub	r21,r6,r2
   11160:	a809883a 	mov	r4,r21
   11164:	b00b883a 	mov	r5,r22
   11168:	00115f00 	call	115f0 <__umodsi3>
   1116c:	1023883a 	mov	r17,r2
   11170:	a809883a 	mov	r4,r21
   11174:	b00b883a 	mov	r5,r22
   11178:	00115e80 	call	115e8 <__udivsi3>
   1117c:	8822943a 	slli	r17,r17,16
   11180:	1405383a 	mul	r2,r2,r16
   11184:	a13fffcc 	andi	r4,r20,65535
   11188:	8906b03a 	or	r3,r17,r4
   1118c:	1880042e 	bgeu	r3,r2,111a0 <__umoddi3+0x264>
   11190:	1cc7883a 	add	r3,r3,r19
   11194:	1cc00236 	bltu	r3,r19,111a0 <__umoddi3+0x264>
   11198:	1880012e 	bgeu	r3,r2,111a0 <__umoddi3+0x264>
   1119c:	1cc7883a 	add	r3,r3,r19
   111a0:	1887c83a 	sub	r3,r3,r2
   111a4:	1c84d83a 	srl	r2,r3,r18
   111a8:	0007883a 	mov	r3,zero
   111ac:	00000206 	br	111b8 <__umoddi3+0x27c>
   111b0:	2005883a 	mov	r2,r4
   111b4:	2807883a 	mov	r3,r5
   111b8:	dfc00b17 	ldw	ra,44(sp)
   111bc:	df000a17 	ldw	fp,40(sp)
   111c0:	ddc00917 	ldw	r23,36(sp)
   111c4:	dd800817 	ldw	r22,32(sp)
   111c8:	dd400717 	ldw	r21,28(sp)
   111cc:	dd000617 	ldw	r20,24(sp)
   111d0:	dcc00517 	ldw	r19,20(sp)
   111d4:	dc800417 	ldw	r18,16(sp)
   111d8:	dc400317 	ldw	r17,12(sp)
   111dc:	dc000217 	ldw	r16,8(sp)
   111e0:	dec00c04 	addi	sp,sp,48
   111e4:	f800283a 	ret
   111e8:	00803fc4 	movi	r2,255
   111ec:	11c0952e 	bgeu	r2,r7,11444 <__umoddi3+0x508>
   111f0:	01400204 	movi	r5,8
   111f4:	282b883a 	mov	r21,r5
   111f8:	003f9f06 	br	11078 <__alt_mem_Flash_flash_data+0xf4011078>
   111fc:	00804034 	movhi	r2,256
   11200:	10bfffc4 	addi	r2,r2,-1
   11204:	1180952e 	bgeu	r2,r6,1145c <__umoddi3+0x520>
   11208:	01400604 	movi	r5,24
   1120c:	2805883a 	mov	r2,r5
   11210:	003f6206 	br	10f9c <__alt_mem_Flash_flash_data+0xf4010f9c>
   11214:	00803fc4 	movi	r2,255
   11218:	14c0932e 	bgeu	r2,r19,11468 <__umoddi3+0x52c>
   1121c:	00800204 	movi	r2,8
   11220:	1007883a 	mov	r3,r2
   11224:	003fb106 	br	110ec <__alt_mem_Flash_flash_data+0xf40110ec>
   11228:	3548d83a 	srl	r4,r6,r21
   1122c:	3d0e983a 	sll	r7,r7,r20
   11230:	8d10983a 	sll	r8,r17,r20
   11234:	8d6cd83a 	srl	r22,r17,r21
   11238:	3922b03a 	or	r17,r7,r4
   1123c:	882ed43a 	srli	r23,r17,16
   11240:	8564d83a 	srl	r18,r16,r21
   11244:	b009883a 	mov	r4,r22
   11248:	b80b883a 	mov	r5,r23
   1124c:	44a4b03a 	or	r18,r8,r18
   11250:	3526983a 	sll	r19,r6,r20
   11254:	00115f00 	call	115f0 <__umodsi3>
   11258:	b009883a 	mov	r4,r22
   1125c:	b80b883a 	mov	r5,r23
   11260:	1039883a 	mov	fp,r2
   11264:	00115e80 	call	115e8 <__udivsi3>
   11268:	102d883a 	mov	r22,r2
   1126c:	8a3fffcc 	andi	r8,r17,65535
   11270:	e004943a 	slli	r2,fp,16
   11274:	900cd43a 	srli	r6,r18,16
   11278:	b239383a 	mul	fp,r22,r8
   1127c:	8520983a 	sll	r16,r16,r20
   11280:	118ab03a 	or	r5,r2,r6
   11284:	2f00042e 	bgeu	r5,fp,11298 <__umoddi3+0x35c>
   11288:	2c4b883a 	add	r5,r5,r17
   1128c:	b0bfffc4 	addi	r2,r22,-1
   11290:	2c40822e 	bgeu	r5,r17,1149c <__umoddi3+0x560>
   11294:	102d883a 	mov	r22,r2
   11298:	2f39c83a 	sub	fp,r5,fp
   1129c:	e009883a 	mov	r4,fp
   112a0:	b80b883a 	mov	r5,r23
   112a4:	da000115 	stw	r8,4(sp)
   112a8:	00115f00 	call	115f0 <__umodsi3>
   112ac:	e009883a 	mov	r4,fp
   112b0:	b80b883a 	mov	r5,r23
   112b4:	d8800015 	stw	r2,0(sp)
   112b8:	00115e80 	call	115e8 <__udivsi3>
   112bc:	d9800017 	ldw	r6,0(sp)
   112c0:	da000117 	ldw	r8,4(sp)
   112c4:	94bfffcc 	andi	r18,r18,65535
   112c8:	300c943a 	slli	r6,r6,16
   112cc:	1209383a 	mul	r4,r2,r8
   112d0:	3490b03a 	or	r8,r6,r18
   112d4:	4100042e 	bgeu	r8,r4,112e8 <__umoddi3+0x3ac>
   112d8:	4451883a 	add	r8,r8,r17
   112dc:	10ffffc4 	addi	r3,r2,-1
   112e0:	44406a2e 	bgeu	r8,r17,1148c <__umoddi3+0x550>
   112e4:	1805883a 	mov	r2,r3
   112e8:	b012943a 	slli	r9,r22,16
   112ec:	9abfffcc 	andi	r10,r19,65535
   112f0:	980ed43a 	srli	r7,r19,16
   112f4:	124ab03a 	or	r5,r2,r9
   112f8:	2a7fffcc 	andi	r9,r5,65535
   112fc:	280ad43a 	srli	r5,r5,16
   11300:	4a8d383a 	mul	r6,r9,r10
   11304:	49d3383a 	mul	r9,r9,r7
   11308:	2a95383a 	mul	r10,r5,r10
   1130c:	3004d43a 	srli	r2,r6,16
   11310:	4111c83a 	sub	r8,r8,r4
   11314:	5253883a 	add	r9,r10,r9
   11318:	4893883a 	add	r9,r9,r2
   1131c:	29cb383a 	mul	r5,r5,r7
   11320:	4a80022e 	bgeu	r9,r10,1132c <__umoddi3+0x3f0>
   11324:	00800074 	movhi	r2,1
   11328:	288b883a 	add	r5,r5,r2
   1132c:	4808d43a 	srli	r4,r9,16
   11330:	4812943a 	slli	r9,r9,16
   11334:	31bfffcc 	andi	r6,r6,65535
   11338:	290b883a 	add	r5,r5,r4
   1133c:	498d883a 	add	r6,r9,r6
   11340:	41403a36 	bltu	r8,r5,1142c <__umoddi3+0x4f0>
   11344:	41405d26 	beq	r8,r5,114bc <__umoddi3+0x580>
   11348:	4149c83a 	sub	r4,r8,r5
   1134c:	300f883a 	mov	r7,r6
   11350:	81cfc83a 	sub	r7,r16,r7
   11354:	81c7803a 	cmpltu	r3,r16,r7
   11358:	20c7c83a 	sub	r3,r4,r3
   1135c:	1d44983a 	sll	r2,r3,r21
   11360:	3d0ed83a 	srl	r7,r7,r20
   11364:	1d06d83a 	srl	r3,r3,r20
   11368:	11c4b03a 	or	r2,r2,r7
   1136c:	003f9206 	br	111b8 <__alt_mem_Flash_flash_data+0xf40111b8>
   11370:	0025883a 	mov	r18,zero
   11374:	003f1806 	br	10fd8 <__alt_mem_Flash_flash_data+0xf4010fd8>
   11378:	98a6983a 	sll	r19,r19,r2
   1137c:	88e8d83a 	srl	r20,r17,r3
   11380:	80c6d83a 	srl	r3,r16,r3
   11384:	982cd43a 	srli	r22,r19,16
   11388:	88a2983a 	sll	r17,r17,r2
   1138c:	a009883a 	mov	r4,r20
   11390:	b00b883a 	mov	r5,r22
   11394:	88eab03a 	or	r21,r17,r3
   11398:	1025883a 	mov	r18,r2
   1139c:	00115f00 	call	115f0 <__umodsi3>
   113a0:	a009883a 	mov	r4,r20
   113a4:	b00b883a 	mov	r5,r22
   113a8:	1023883a 	mov	r17,r2
   113ac:	00115e80 	call	115e8 <__udivsi3>
   113b0:	9f3fffcc 	andi	fp,r19,65535
   113b4:	8822943a 	slli	r17,r17,16
   113b8:	a80ad43a 	srli	r5,r21,16
   113bc:	1705383a 	mul	r2,r2,fp
   113c0:	84a8983a 	sll	r20,r16,r18
   113c4:	8948b03a 	or	r4,r17,r5
   113c8:	2080042e 	bgeu	r4,r2,113dc <__umoddi3+0x4a0>
   113cc:	24c9883a 	add	r4,r4,r19
   113d0:	24c00236 	bltu	r4,r19,113dc <__umoddi3+0x4a0>
   113d4:	2080012e 	bgeu	r4,r2,113dc <__umoddi3+0x4a0>
   113d8:	24c9883a 	add	r4,r4,r19
   113dc:	20afc83a 	sub	r23,r4,r2
   113e0:	b809883a 	mov	r4,r23
   113e4:	b00b883a 	mov	r5,r22
   113e8:	00115f00 	call	115f0 <__umodsi3>
   113ec:	1023883a 	mov	r17,r2
   113f0:	b809883a 	mov	r4,r23
   113f4:	b00b883a 	mov	r5,r22
   113f8:	00115e80 	call	115e8 <__udivsi3>
   113fc:	8822943a 	slli	r17,r17,16
   11400:	1705383a 	mul	r2,r2,fp
   11404:	a93fffcc 	andi	r4,r21,65535
   11408:	8908b03a 	or	r4,r17,r4
   1140c:	2080042e 	bgeu	r4,r2,11420 <__umoddi3+0x4e4>
   11410:	24c9883a 	add	r4,r4,r19
   11414:	24c00236 	bltu	r4,r19,11420 <__umoddi3+0x4e4>
   11418:	2080012e 	bgeu	r4,r2,11420 <__umoddi3+0x4e4>
   1141c:	24c9883a 	add	r4,r4,r19
   11420:	20a3c83a 	sub	r17,r4,r2
   11424:	e021883a 	mov	r16,fp
   11428:	003f3d06 	br	11120 <__alt_mem_Flash_flash_data+0xf4011120>
   1142c:	34cfc83a 	sub	r7,r6,r19
   11430:	2c4bc83a 	sub	r5,r5,r17
   11434:	31cd803a 	cmpltu	r6,r6,r7
   11438:	298dc83a 	sub	r6,r5,r6
   1143c:	4189c83a 	sub	r4,r8,r6
   11440:	003fc306 	br	11350 <__alt_mem_Flash_flash_data+0xf4011350>
   11444:	000b883a 	mov	r5,zero
   11448:	002b883a 	mov	r21,zero
   1144c:	003f0a06 	br	11078 <__alt_mem_Flash_flash_data+0xf4011078>
   11450:	01400404 	movi	r5,16
   11454:	282b883a 	mov	r21,r5
   11458:	003f0706 	br	11078 <__alt_mem_Flash_flash_data+0xf4011078>
   1145c:	01400404 	movi	r5,16
   11460:	2805883a 	mov	r2,r5
   11464:	003ecd06 	br	10f9c <__alt_mem_Flash_flash_data+0xf4010f9c>
   11468:	0005883a 	mov	r2,zero
   1146c:	0007883a 	mov	r3,zero
   11470:	003f1e06 	br	110ec <__alt_mem_Flash_flash_data+0xf40110ec>
   11474:	00800404 	movi	r2,16
   11478:	1007883a 	mov	r3,r2
   1147c:	003f1b06 	br	110ec <__alt_mem_Flash_flash_data+0xf40110ec>
   11480:	000b883a 	mov	r5,zero
   11484:	0005883a 	mov	r2,zero
   11488:	003ec406 	br	10f9c <__alt_mem_Flash_flash_data+0xf4010f9c>
   1148c:	413f952e 	bgeu	r8,r4,112e4 <__alt_mem_Flash_flash_data+0xf40112e4>
   11490:	10bfff84 	addi	r2,r2,-2
   11494:	4451883a 	add	r8,r8,r17
   11498:	003f9306 	br	112e8 <__alt_mem_Flash_flash_data+0xf40112e8>
   1149c:	2f3f7d2e 	bgeu	r5,fp,11294 <__alt_mem_Flash_flash_data+0xf4011294>
   114a0:	b5bfff84 	addi	r22,r22,-2
   114a4:	2c4b883a 	add	r5,r5,r17
   114a8:	003f7b06 	br	11298 <__alt_mem_Flash_flash_data+0xf4011298>
   114ac:	34cd883a 	add	r6,r6,r19
   114b0:	003f2a06 	br	1115c <__alt_mem_Flash_flash_data+0xf401115c>
   114b4:	8005883a 	mov	r2,r16
   114b8:	003efe06 	br	110b4 <__alt_mem_Flash_flash_data+0xf40110b4>
   114bc:	81bfdb36 	bltu	r16,r6,1142c <__alt_mem_Flash_flash_data+0xf401142c>
   114c0:	300f883a 	mov	r7,r6
   114c4:	0009883a 	mov	r4,zero
   114c8:	003fa106 	br	11350 <__alt_mem_Flash_flash_data+0xf4011350>

000114cc <udivmodsi4>:
   114cc:	2900182e 	bgeu	r5,r4,11530 <udivmodsi4+0x64>
   114d0:	28001716 	blt	r5,zero,11530 <udivmodsi4+0x64>
   114d4:	00800804 	movi	r2,32
   114d8:	00c00044 	movi	r3,1
   114dc:	00000206 	br	114e8 <udivmodsi4+0x1c>
   114e0:	10001126 	beq	r2,zero,11528 <udivmodsi4+0x5c>
   114e4:	28000516 	blt	r5,zero,114fc <udivmodsi4+0x30>
   114e8:	294b883a 	add	r5,r5,r5
   114ec:	10bfffc4 	addi	r2,r2,-1
   114f0:	18c7883a 	add	r3,r3,r3
   114f4:	293ffa36 	bltu	r5,r4,114e0 <__alt_mem_Flash_flash_data+0xf40114e0>
   114f8:	18000b26 	beq	r3,zero,11528 <udivmodsi4+0x5c>
   114fc:	0005883a 	mov	r2,zero
   11500:	21400236 	bltu	r4,r5,1150c <udivmodsi4+0x40>
   11504:	2149c83a 	sub	r4,r4,r5
   11508:	10c4b03a 	or	r2,r2,r3
   1150c:	1806d07a 	srli	r3,r3,1
   11510:	280ad07a 	srli	r5,r5,1
   11514:	183ffa1e 	bne	r3,zero,11500 <__alt_mem_Flash_flash_data+0xf4011500>
   11518:	3000011e 	bne	r6,zero,11520 <udivmodsi4+0x54>
   1151c:	f800283a 	ret
   11520:	2005883a 	mov	r2,r4
   11524:	f800283a 	ret
   11528:	0005883a 	mov	r2,zero
   1152c:	003ffa06 	br	11518 <__alt_mem_Flash_flash_data+0xf4011518>
   11530:	00c00044 	movi	r3,1
   11534:	003ff106 	br	114fc <__alt_mem_Flash_flash_data+0xf40114fc>

00011538 <__divsi3>:
   11538:	defffe04 	addi	sp,sp,-8
   1153c:	dfc00115 	stw	ra,4(sp)
   11540:	dc000015 	stw	r16,0(sp)
   11544:	20000b16 	blt	r4,zero,11574 <__divsi3+0x3c>
   11548:	0021883a 	mov	r16,zero
   1154c:	28000c16 	blt	r5,zero,11580 <__divsi3+0x48>
   11550:	000d883a 	mov	r6,zero
   11554:	00114cc0 	call	114cc <udivmodsi4>
   11558:	0407c83a 	sub	r3,zero,r16
   1155c:	1884f03a 	xor	r2,r3,r2
   11560:	1405883a 	add	r2,r2,r16
   11564:	dfc00117 	ldw	ra,4(sp)
   11568:	dc000017 	ldw	r16,0(sp)
   1156c:	dec00204 	addi	sp,sp,8
   11570:	f800283a 	ret
   11574:	0109c83a 	sub	r4,zero,r4
   11578:	04000044 	movi	r16,1
   1157c:	283ff40e 	bge	r5,zero,11550 <__alt_mem_Flash_flash_data+0xf4011550>
   11580:	014bc83a 	sub	r5,zero,r5
   11584:	8400005c 	xori	r16,r16,1
   11588:	003ff106 	br	11550 <__alt_mem_Flash_flash_data+0xf4011550>

0001158c <__modsi3>:
   1158c:	defffd04 	addi	sp,sp,-12
   11590:	dfc00215 	stw	ra,8(sp)
   11594:	dc400115 	stw	r17,4(sp)
   11598:	dc000015 	stw	r16,0(sp)
   1159c:	20000c16 	blt	r4,zero,115d0 <__modsi3+0x44>
   115a0:	0023883a 	mov	r17,zero
   115a4:	0021883a 	mov	r16,zero
   115a8:	28000d16 	blt	r5,zero,115e0 <__modsi3+0x54>
   115ac:	01800044 	movi	r6,1
   115b0:	00114cc0 	call	114cc <udivmodsi4>
   115b4:	1404f03a 	xor	r2,r2,r16
   115b8:	8885883a 	add	r2,r17,r2
   115bc:	dfc00217 	ldw	ra,8(sp)
   115c0:	dc400117 	ldw	r17,4(sp)
   115c4:	dc000017 	ldw	r16,0(sp)
   115c8:	dec00304 	addi	sp,sp,12
   115cc:	f800283a 	ret
   115d0:	0109c83a 	sub	r4,zero,r4
   115d4:	04400044 	movi	r17,1
   115d8:	043fffc4 	movi	r16,-1
   115dc:	283ff30e 	bge	r5,zero,115ac <__alt_mem_Flash_flash_data+0xf40115ac>
   115e0:	014bc83a 	sub	r5,zero,r5
   115e4:	003ff106 	br	115ac <__alt_mem_Flash_flash_data+0xf40115ac>

000115e8 <__udivsi3>:
   115e8:	000d883a 	mov	r6,zero
   115ec:	00114cc1 	jmpi	114cc <udivmodsi4>

000115f0 <__umodsi3>:
   115f0:	01800044 	movi	r6,1
   115f4:	00114cc1 	jmpi	114cc <udivmodsi4>

000115f8 <__adddf3>:
   115f8:	02000434 	movhi	r8,16
   115fc:	423fffc4 	addi	r8,r8,-1
   11600:	defffb04 	addi	sp,sp,-20
   11604:	2a12703a 	and	r9,r5,r8
   11608:	2806d7fa 	srli	r3,r5,31
   1160c:	3a10703a 	and	r8,r7,r8
   11610:	3804d53a 	srli	r2,r7,20
   11614:	3014d77a 	srli	r10,r6,29
   11618:	dc000015 	stw	r16,0(sp)
   1161c:	481290fa 	slli	r9,r9,3
   11620:	2820d53a 	srli	r16,r5,20
   11624:	401090fa 	slli	r8,r8,3
   11628:	200ad77a 	srli	r5,r4,29
   1162c:	380ed7fa 	srli	r7,r7,31
   11630:	dc800215 	stw	r18,8(sp)
   11634:	dc400115 	stw	r17,4(sp)
   11638:	dfc00415 	stw	ra,16(sp)
   1163c:	dcc00315 	stw	r19,12(sp)
   11640:	1c803fcc 	andi	r18,r3,255
   11644:	8401ffcc 	andi	r16,r16,2047
   11648:	494ab03a 	or	r5,r9,r5
   1164c:	202290fa 	slli	r17,r4,3
   11650:	1081ffcc 	andi	r2,r2,2047
   11654:	4290b03a 	or	r8,r8,r10
   11658:	300c90fa 	slli	r6,r6,3
   1165c:	91c07026 	beq	r18,r7,11820 <__adddf3+0x228>
   11660:	8087c83a 	sub	r3,r16,r2
   11664:	00c0b30e 	bge	zero,r3,11934 <__adddf3+0x33c>
   11668:	10002a1e 	bne	r2,zero,11714 <__adddf3+0x11c>
   1166c:	4184b03a 	or	r2,r8,r6
   11670:	1000991e 	bne	r2,zero,118d8 <__adddf3+0x2e0>
   11674:	888001cc 	andi	r2,r17,7
   11678:	10005b26 	beq	r2,zero,117e8 <__adddf3+0x1f0>
   1167c:	88c003cc 	andi	r3,r17,15
   11680:	00800104 	movi	r2,4
   11684:	18805826 	beq	r3,r2,117e8 <__adddf3+0x1f0>
   11688:	89800104 	addi	r6,r17,4
   1168c:	3463803a 	cmpltu	r17,r6,r17
   11690:	2c4b883a 	add	r5,r5,r17
   11694:	2880202c 	andhi	r2,r5,128
   11698:	9007883a 	mov	r3,r18
   1169c:	3023883a 	mov	r17,r6
   116a0:	10005426 	beq	r2,zero,117f4 <__adddf3+0x1fc>
   116a4:	84000044 	addi	r16,r16,1
   116a8:	0081ffc4 	movi	r2,2047
   116ac:	8080c126 	beq	r16,r2,119b4 <__adddf3+0x3bc>
   116b0:	013fe034 	movhi	r4,65408
   116b4:	213fffc4 	addi	r4,r4,-1
   116b8:	290a703a 	and	r5,r5,r4
   116bc:	2804977a 	slli	r2,r5,29
   116c0:	280a927a 	slli	r5,r5,9
   116c4:	8822d0fa 	srli	r17,r17,3
   116c8:	8401ffcc 	andi	r16,r16,2047
   116cc:	2808d33a 	srli	r4,r5,12
   116d0:	1444b03a 	or	r2,r2,r17
   116d4:	8401ffcc 	andi	r16,r16,2047
   116d8:	800a953a 	slli	r5,r16,20
   116dc:	18c03fcc 	andi	r3,r3,255
   116e0:	04000434 	movhi	r16,16
   116e4:	180697fa 	slli	r3,r3,31
   116e8:	843fffc4 	addi	r16,r16,-1
   116ec:	2420703a 	and	r16,r4,r16
   116f0:	8160b03a 	or	r16,r16,r5
   116f4:	80c6b03a 	or	r3,r16,r3
   116f8:	dfc00417 	ldw	ra,16(sp)
   116fc:	dcc00317 	ldw	r19,12(sp)
   11700:	dc800217 	ldw	r18,8(sp)
   11704:	dc400117 	ldw	r17,4(sp)
   11708:	dc000017 	ldw	r16,0(sp)
   1170c:	dec00504 	addi	sp,sp,20
   11710:	f800283a 	ret
   11714:	0081ffc4 	movi	r2,2047
   11718:	80bfd626 	beq	r16,r2,11674 <__alt_mem_Flash_flash_data+0xf4011674>
   1171c:	42002034 	orhi	r8,r8,128
   11720:	00800e04 	movi	r2,56
   11724:	10c0a616 	blt	r2,r3,119c0 <__adddf3+0x3c8>
   11728:	008007c4 	movi	r2,31
   1172c:	10c0c916 	blt	r2,r3,11a54 <__adddf3+0x45c>
   11730:	00800804 	movi	r2,32
   11734:	10c5c83a 	sub	r2,r2,r3
   11738:	408e983a 	sll	r7,r8,r2
   1173c:	30c8d83a 	srl	r4,r6,r3
   11740:	3084983a 	sll	r2,r6,r2
   11744:	40c6d83a 	srl	r3,r8,r3
   11748:	390cb03a 	or	r6,r7,r4
   1174c:	1004c03a 	cmpne	r2,r2,zero
   11750:	308cb03a 	or	r6,r6,r2
   11754:	898dc83a 	sub	r6,r17,r6
   11758:	89a3803a 	cmpltu	r17,r17,r6
   1175c:	28cbc83a 	sub	r5,r5,r3
   11760:	2c4bc83a 	sub	r5,r5,r17
   11764:	3023883a 	mov	r17,r6
   11768:	2880202c 	andhi	r2,r5,128
   1176c:	10006d26 	beq	r2,zero,11924 <__adddf3+0x32c>
   11770:	04c02034 	movhi	r19,128
   11774:	9cffffc4 	addi	r19,r19,-1
   11778:	2ce6703a 	and	r19,r5,r19
   1177c:	98007e26 	beq	r19,zero,11978 <__adddf3+0x380>
   11780:	9809883a 	mov	r4,r19
   11784:	0013b940 	call	13b94 <__clzsi2>
   11788:	10fffe04 	addi	r3,r2,-8
   1178c:	010007c4 	movi	r4,31
   11790:	20c07f16 	blt	r4,r3,11990 <__adddf3+0x398>
   11794:	01400a04 	movi	r5,40
   11798:	2885c83a 	sub	r2,r5,r2
   1179c:	888ad83a 	srl	r5,r17,r2
   117a0:	98e6983a 	sll	r19,r19,r3
   117a4:	88e2983a 	sll	r17,r17,r3
   117a8:	2ce6b03a 	or	r19,r5,r19
   117ac:	1c007c16 	blt	r3,r16,119a0 <__adddf3+0x3a8>
   117b0:	1c21c83a 	sub	r16,r3,r16
   117b4:	81400044 	addi	r5,r16,1
   117b8:	00c007c4 	movi	r3,31
   117bc:	19409816 	blt	r3,r5,11a20 <__adddf3+0x428>
   117c0:	1c21c83a 	sub	r16,r3,r16
   117c4:	8c08983a 	sll	r4,r17,r16
   117c8:	8946d83a 	srl	r3,r17,r5
   117cc:	9c20983a 	sll	r16,r19,r16
   117d0:	2008c03a 	cmpne	r4,r4,zero
   117d4:	994ad83a 	srl	r5,r19,r5
   117d8:	1c06b03a 	or	r3,r3,r16
   117dc:	1922b03a 	or	r17,r3,r4
   117e0:	0021883a 	mov	r16,zero
   117e4:	003fa306 	br	11674 <__alt_mem_Flash_flash_data+0xf4011674>
   117e8:	2880202c 	andhi	r2,r5,128
   117ec:	9007883a 	mov	r3,r18
   117f0:	103fac1e 	bne	r2,zero,116a4 <__alt_mem_Flash_flash_data+0xf40116a4>
   117f4:	2804977a 	slli	r2,r5,29
   117f8:	8822d0fa 	srli	r17,r17,3
   117fc:	0101ffc4 	movi	r4,2047
   11800:	280ad0fa 	srli	r5,r5,3
   11804:	1444b03a 	or	r2,r2,r17
   11808:	81002c26 	beq	r16,r4,118bc <__adddf3+0x2c4>
   1180c:	8120703a 	and	r16,r16,r4
   11810:	01000434 	movhi	r4,16
   11814:	213fffc4 	addi	r4,r4,-1
   11818:	2908703a 	and	r4,r5,r4
   1181c:	003fad06 	br	116d4 <__alt_mem_Flash_flash_data+0xf40116d4>
   11820:	8089c83a 	sub	r4,r16,r2
   11824:	01006a0e 	bge	zero,r4,119d0 <__adddf3+0x3d8>
   11828:	10003326 	beq	r2,zero,118f8 <__adddf3+0x300>
   1182c:	0081ffc4 	movi	r2,2047
   11830:	80bf9026 	beq	r16,r2,11674 <__alt_mem_Flash_flash_data+0xf4011674>
   11834:	42002034 	orhi	r8,r8,128
   11838:	00800e04 	movi	r2,56
   1183c:	1100b116 	blt	r2,r4,11b04 <__adddf3+0x50c>
   11840:	008007c4 	movi	r2,31
   11844:	1100e216 	blt	r2,r4,11bd0 <__adddf3+0x5d8>
   11848:	00800804 	movi	r2,32
   1184c:	1105c83a 	sub	r2,r2,r4
   11850:	4092983a 	sll	r9,r8,r2
   11854:	310ed83a 	srl	r7,r6,r4
   11858:	3084983a 	sll	r2,r6,r2
   1185c:	4110d83a 	srl	r8,r8,r4
   11860:	49ccb03a 	or	r6,r9,r7
   11864:	1004c03a 	cmpne	r2,r2,zero
   11868:	308cb03a 	or	r6,r6,r2
   1186c:	344d883a 	add	r6,r6,r17
   11870:	3463803a 	cmpltu	r17,r6,r17
   11874:	414b883a 	add	r5,r8,r5
   11878:	2c4b883a 	add	r5,r5,r17
   1187c:	3023883a 	mov	r17,r6
   11880:	2880202c 	andhi	r2,r5,128
   11884:	10002726 	beq	r2,zero,11924 <__adddf3+0x32c>
   11888:	84000044 	addi	r16,r16,1
   1188c:	0081ffc4 	movi	r2,2047
   11890:	8080ae26 	beq	r16,r2,11b4c <__adddf3+0x554>
   11894:	00bfe034 	movhi	r2,65408
   11898:	10bfffc4 	addi	r2,r2,-1
   1189c:	288a703a 	and	r5,r5,r2
   118a0:	880cd07a 	srli	r6,r17,1
   118a4:	280897fa 	slli	r4,r5,31
   118a8:	88c0004c 	andi	r3,r17,1
   118ac:	30e2b03a 	or	r17,r6,r3
   118b0:	280ad07a 	srli	r5,r5,1
   118b4:	8922b03a 	or	r17,r17,r4
   118b8:	003f6e06 	br	11674 <__alt_mem_Flash_flash_data+0xf4011674>
   118bc:	1148b03a 	or	r4,r2,r5
   118c0:	20003c26 	beq	r4,zero,119b4 <__adddf3+0x3bc>
   118c4:	29000234 	orhi	r4,r5,8
   118c8:	01400434 	movhi	r5,16
   118cc:	297fffc4 	addi	r5,r5,-1
   118d0:	2148703a 	and	r4,r4,r5
   118d4:	003f7f06 	br	116d4 <__alt_mem_Flash_flash_data+0xf40116d4>
   118d8:	18ffffc4 	addi	r3,r3,-1
   118dc:	18004d1e 	bne	r3,zero,11a14 <__adddf3+0x41c>
   118e0:	898dc83a 	sub	r6,r17,r6
   118e4:	89a3803a 	cmpltu	r17,r17,r6
   118e8:	2a0bc83a 	sub	r5,r5,r8
   118ec:	2c4bc83a 	sub	r5,r5,r17
   118f0:	3023883a 	mov	r17,r6
   118f4:	003f9c06 	br	11768 <__alt_mem_Flash_flash_data+0xf4011768>
   118f8:	4184b03a 	or	r2,r8,r6
   118fc:	103f5d26 	beq	r2,zero,11674 <__alt_mem_Flash_flash_data+0xf4011674>
   11900:	213fffc4 	addi	r4,r4,-1
   11904:	203fd926 	beq	r4,zero,1186c <__alt_mem_Flash_flash_data+0xf401186c>
   11908:	0081ffc4 	movi	r2,2047
   1190c:	80bfca1e 	bne	r16,r2,11838 <__alt_mem_Flash_flash_data+0xf4011838>
   11910:	003f5806 	br	11674 <__alt_mem_Flash_flash_data+0xf4011674>
   11914:	10c8b03a 	or	r4,r2,r3
   11918:	20008b26 	beq	r4,zero,11b48 <__adddf3+0x550>
   1191c:	100b883a 	mov	r5,r2
   11920:	1823883a 	mov	r17,r3
   11924:	888001cc 	andi	r2,r17,7
   11928:	103f541e 	bne	r2,zero,1167c <__alt_mem_Flash_flash_data+0xf401167c>
   1192c:	9007883a 	mov	r3,r18
   11930:	003fb006 	br	117f4 <__alt_mem_Flash_flash_data+0xf40117f4>
   11934:	1800531e 	bne	r3,zero,11a84 <__adddf3+0x48c>
   11938:	80800044 	addi	r2,r16,1
   1193c:	1081ffcc 	andi	r2,r2,2047
   11940:	00c00044 	movi	r3,1
   11944:	1880990e 	bge	r3,r2,11bac <__adddf3+0x5b4>
   11948:	8985c83a 	sub	r2,r17,r6
   1194c:	8887803a 	cmpltu	r3,r17,r2
   11950:	2a27c83a 	sub	r19,r5,r8
   11954:	98e7c83a 	sub	r19,r19,r3
   11958:	98c0202c 	andhi	r3,r19,128
   1195c:	18006226 	beq	r3,zero,11ae8 <__adddf3+0x4f0>
   11960:	3463c83a 	sub	r17,r6,r17
   11964:	4151c83a 	sub	r8,r8,r5
   11968:	344d803a 	cmpltu	r6,r6,r17
   1196c:	41a7c83a 	sub	r19,r8,r6
   11970:	3825883a 	mov	r18,r7
   11974:	983f821e 	bne	r19,zero,11780 <__alt_mem_Flash_flash_data+0xf4011780>
   11978:	8809883a 	mov	r4,r17
   1197c:	0013b940 	call	13b94 <__clzsi2>
   11980:	10800804 	addi	r2,r2,32
   11984:	10fffe04 	addi	r3,r2,-8
   11988:	010007c4 	movi	r4,31
   1198c:	20ff810e 	bge	r4,r3,11794 <__alt_mem_Flash_flash_data+0xf4011794>
   11990:	14fff604 	addi	r19,r2,-40
   11994:	8ce6983a 	sll	r19,r17,r19
   11998:	0023883a 	mov	r17,zero
   1199c:	1c3f840e 	bge	r3,r16,117b0 <__alt_mem_Flash_flash_data+0xf40117b0>
   119a0:	017fe034 	movhi	r5,65408
   119a4:	297fffc4 	addi	r5,r5,-1
   119a8:	80e1c83a 	sub	r16,r16,r3
   119ac:	994a703a 	and	r5,r19,r5
   119b0:	003f3006 	br	11674 <__alt_mem_Flash_flash_data+0xf4011674>
   119b4:	0009883a 	mov	r4,zero
   119b8:	0005883a 	mov	r2,zero
   119bc:	003f4506 	br	116d4 <__alt_mem_Flash_flash_data+0xf40116d4>
   119c0:	418cb03a 	or	r6,r8,r6
   119c4:	300cc03a 	cmpne	r6,r6,zero
   119c8:	0007883a 	mov	r3,zero
   119cc:	003f6106 	br	11754 <__alt_mem_Flash_flash_data+0xf4011754>
   119d0:	2000921e 	bne	r4,zero,11c1c <__adddf3+0x624>
   119d4:	80800044 	addi	r2,r16,1
   119d8:	11c1ffcc 	andi	r7,r2,2047
   119dc:	01000044 	movi	r4,1
   119e0:	21c0610e 	bge	r4,r7,11b68 <__adddf3+0x570>
   119e4:	0101ffc4 	movi	r4,2047
   119e8:	1100a326 	beq	r2,r4,11c78 <__adddf3+0x680>
   119ec:	344d883a 	add	r6,r6,r17
   119f0:	3463803a 	cmpltu	r17,r6,r17
   119f4:	414b883a 	add	r5,r8,r5
   119f8:	2c4b883a 	add	r5,r5,r17
   119fc:	282297fa 	slli	r17,r5,31
   11a00:	300cd07a 	srli	r6,r6,1
   11a04:	280ad07a 	srli	r5,r5,1
   11a08:	1021883a 	mov	r16,r2
   11a0c:	89a2b03a 	or	r17,r17,r6
   11a10:	003f1806 	br	11674 <__alt_mem_Flash_flash_data+0xf4011674>
   11a14:	0081ffc4 	movi	r2,2047
   11a18:	80bf411e 	bne	r16,r2,11720 <__alt_mem_Flash_flash_data+0xf4011720>
   11a1c:	003f1506 	br	11674 <__alt_mem_Flash_flash_data+0xf4011674>
   11a20:	80bff844 	addi	r2,r16,-31
   11a24:	00c00804 	movi	r3,32
   11a28:	9884d83a 	srl	r2,r19,r2
   11a2c:	28c04a26 	beq	r5,r3,11b58 <__adddf3+0x560>
   11a30:	00c00fc4 	movi	r3,63
   11a34:	1c21c83a 	sub	r16,r3,r16
   11a38:	9c26983a 	sll	r19,r19,r16
   11a3c:	9c62b03a 	or	r17,r19,r17
   11a40:	8822c03a 	cmpne	r17,r17,zero
   11a44:	88a2b03a 	or	r17,r17,r2
   11a48:	000b883a 	mov	r5,zero
   11a4c:	0021883a 	mov	r16,zero
   11a50:	003fb406 	br	11924 <__alt_mem_Flash_flash_data+0xf4011924>
   11a54:	18bff804 	addi	r2,r3,-32
   11a58:	01000804 	movi	r4,32
   11a5c:	4084d83a 	srl	r2,r8,r2
   11a60:	19003f26 	beq	r3,r4,11b60 <__adddf3+0x568>
   11a64:	01001004 	movi	r4,64
   11a68:	20c7c83a 	sub	r3,r4,r3
   11a6c:	40d0983a 	sll	r8,r8,r3
   11a70:	418cb03a 	or	r6,r8,r6
   11a74:	300cc03a 	cmpne	r6,r6,zero
   11a78:	308cb03a 	or	r6,r6,r2
   11a7c:	0007883a 	mov	r3,zero
   11a80:	003f3406 	br	11754 <__alt_mem_Flash_flash_data+0xf4011754>
   11a84:	80002326 	beq	r16,zero,11b14 <__adddf3+0x51c>
   11a88:	0101ffc4 	movi	r4,2047
   11a8c:	11005e26 	beq	r2,r4,11c08 <__adddf3+0x610>
   11a90:	00c7c83a 	sub	r3,zero,r3
   11a94:	29402034 	orhi	r5,r5,128
   11a98:	01000e04 	movi	r4,56
   11a9c:	20c07216 	blt	r4,r3,11c68 <__adddf3+0x670>
   11aa0:	010007c4 	movi	r4,31
   11aa4:	20c0ce16 	blt	r4,r3,11de0 <__adddf3+0x7e8>
   11aa8:	01000804 	movi	r4,32
   11aac:	20c9c83a 	sub	r4,r4,r3
   11ab0:	2914983a 	sll	r10,r5,r4
   11ab4:	88d2d83a 	srl	r9,r17,r3
   11ab8:	8908983a 	sll	r4,r17,r4
   11abc:	28c6d83a 	srl	r3,r5,r3
   11ac0:	5262b03a 	or	r17,r10,r9
   11ac4:	2008c03a 	cmpne	r4,r4,zero
   11ac8:	8922b03a 	or	r17,r17,r4
   11acc:	3463c83a 	sub	r17,r6,r17
   11ad0:	40c7c83a 	sub	r3,r8,r3
   11ad4:	344d803a 	cmpltu	r6,r6,r17
   11ad8:	198bc83a 	sub	r5,r3,r6
   11adc:	1021883a 	mov	r16,r2
   11ae0:	3825883a 	mov	r18,r7
   11ae4:	003f2006 	br	11768 <__alt_mem_Flash_flash_data+0xf4011768>
   11ae8:	9886b03a 	or	r3,r19,r2
   11aec:	1800141e 	bne	r3,zero,11b40 <__adddf3+0x548>
   11af0:	0007883a 	mov	r3,zero
   11af4:	000b883a 	mov	r5,zero
   11af8:	0023883a 	mov	r17,zero
   11afc:	0021883a 	mov	r16,zero
   11b00:	003f3c06 	br	117f4 <__alt_mem_Flash_flash_data+0xf40117f4>
   11b04:	418cb03a 	or	r6,r8,r6
   11b08:	300cc03a 	cmpne	r6,r6,zero
   11b0c:	0011883a 	mov	r8,zero
   11b10:	003f5606 	br	1186c <__alt_mem_Flash_flash_data+0xf401186c>
   11b14:	2c48b03a 	or	r4,r5,r17
   11b18:	20003b26 	beq	r4,zero,11c08 <__adddf3+0x610>
   11b1c:	00c6303a 	nor	r3,zero,r3
   11b20:	1800371e 	bne	r3,zero,11c00 <__adddf3+0x608>
   11b24:	3463c83a 	sub	r17,r6,r17
   11b28:	414bc83a 	sub	r5,r8,r5
   11b2c:	344d803a 	cmpltu	r6,r6,r17
   11b30:	298bc83a 	sub	r5,r5,r6
   11b34:	1021883a 	mov	r16,r2
   11b38:	3825883a 	mov	r18,r7
   11b3c:	003f0a06 	br	11768 <__alt_mem_Flash_flash_data+0xf4011768>
   11b40:	1023883a 	mov	r17,r2
   11b44:	003f0d06 	br	1177c <__alt_mem_Flash_flash_data+0xf401177c>
   11b48:	0007883a 	mov	r3,zero
   11b4c:	000b883a 	mov	r5,zero
   11b50:	0023883a 	mov	r17,zero
   11b54:	003f2706 	br	117f4 <__alt_mem_Flash_flash_data+0xf40117f4>
   11b58:	0027883a 	mov	r19,zero
   11b5c:	003fb706 	br	11a3c <__alt_mem_Flash_flash_data+0xf4011a3c>
   11b60:	0011883a 	mov	r8,zero
   11b64:	003fc206 	br	11a70 <__alt_mem_Flash_flash_data+0xf4011a70>
   11b68:	2c44b03a 	or	r2,r5,r17
   11b6c:	8000871e 	bne	r16,zero,11d8c <__adddf3+0x794>
   11b70:	1000b126 	beq	r2,zero,11e38 <__adddf3+0x840>
   11b74:	4184b03a 	or	r2,r8,r6
   11b78:	103ebe26 	beq	r2,zero,11674 <__alt_mem_Flash_flash_data+0xf4011674>
   11b7c:	3445883a 	add	r2,r6,r17
   11b80:	1463803a 	cmpltu	r17,r2,r17
   11b84:	414b883a 	add	r5,r8,r5
   11b88:	2c4b883a 	add	r5,r5,r17
   11b8c:	28c0202c 	andhi	r3,r5,128
   11b90:	1023883a 	mov	r17,r2
   11b94:	183f6326 	beq	r3,zero,11924 <__alt_mem_Flash_flash_data+0xf4011924>
   11b98:	00bfe034 	movhi	r2,65408
   11b9c:	10bfffc4 	addi	r2,r2,-1
   11ba0:	2021883a 	mov	r16,r4
   11ba4:	288a703a 	and	r5,r5,r2
   11ba8:	003eb206 	br	11674 <__alt_mem_Flash_flash_data+0xf4011674>
   11bac:	2c44b03a 	or	r2,r5,r17
   11bb0:	8000251e 	bne	r16,zero,11c48 <__adddf3+0x650>
   11bb4:	10004b1e 	bne	r2,zero,11ce4 <__adddf3+0x6ec>
   11bb8:	4184b03a 	or	r2,r8,r6
   11bbc:	103fe226 	beq	r2,zero,11b48 <__alt_mem_Flash_flash_data+0xf4011b48>
   11bc0:	400b883a 	mov	r5,r8
   11bc4:	3023883a 	mov	r17,r6
   11bc8:	3825883a 	mov	r18,r7
   11bcc:	003ea906 	br	11674 <__alt_mem_Flash_flash_data+0xf4011674>
   11bd0:	20bff804 	addi	r2,r4,-32
   11bd4:	01c00804 	movi	r7,32
   11bd8:	4084d83a 	srl	r2,r8,r2
   11bdc:	21c07e26 	beq	r4,r7,11dd8 <__adddf3+0x7e0>
   11be0:	01c01004 	movi	r7,64
   11be4:	3909c83a 	sub	r4,r7,r4
   11be8:	4110983a 	sll	r8,r8,r4
   11bec:	418cb03a 	or	r6,r8,r6
   11bf0:	300cc03a 	cmpne	r6,r6,zero
   11bf4:	308cb03a 	or	r6,r6,r2
   11bf8:	0011883a 	mov	r8,zero
   11bfc:	003f1b06 	br	1186c <__alt_mem_Flash_flash_data+0xf401186c>
   11c00:	0101ffc4 	movi	r4,2047
   11c04:	113fa41e 	bne	r2,r4,11a98 <__alt_mem_Flash_flash_data+0xf4011a98>
   11c08:	400b883a 	mov	r5,r8
   11c0c:	3023883a 	mov	r17,r6
   11c10:	1021883a 	mov	r16,r2
   11c14:	3825883a 	mov	r18,r7
   11c18:	003e9606 	br	11674 <__alt_mem_Flash_flash_data+0xf4011674>
   11c1c:	80001a1e 	bne	r16,zero,11c88 <__adddf3+0x690>
   11c20:	2c4eb03a 	or	r7,r5,r17
   11c24:	38005526 	beq	r7,zero,11d7c <__adddf3+0x784>
   11c28:	0108303a 	nor	r4,zero,r4
   11c2c:	2000511e 	bne	r4,zero,11d74 <__adddf3+0x77c>
   11c30:	89a3883a 	add	r17,r17,r6
   11c34:	414b883a 	add	r5,r8,r5
   11c38:	898d803a 	cmpltu	r6,r17,r6
   11c3c:	298b883a 	add	r5,r5,r6
   11c40:	1021883a 	mov	r16,r2
   11c44:	003f0e06 	br	11880 <__alt_mem_Flash_flash_data+0xf4011880>
   11c48:	1000341e 	bne	r2,zero,11d1c <__adddf3+0x724>
   11c4c:	4184b03a 	or	r2,r8,r6
   11c50:	10006f26 	beq	r2,zero,11e10 <__adddf3+0x818>
   11c54:	400b883a 	mov	r5,r8
   11c58:	3023883a 	mov	r17,r6
   11c5c:	3825883a 	mov	r18,r7
   11c60:	0401ffc4 	movi	r16,2047
   11c64:	003e8306 	br	11674 <__alt_mem_Flash_flash_data+0xf4011674>
   11c68:	2c62b03a 	or	r17,r5,r17
   11c6c:	8822c03a 	cmpne	r17,r17,zero
   11c70:	0007883a 	mov	r3,zero
   11c74:	003f9506 	br	11acc <__alt_mem_Flash_flash_data+0xf4011acc>
   11c78:	1021883a 	mov	r16,r2
   11c7c:	000b883a 	mov	r5,zero
   11c80:	0023883a 	mov	r17,zero
   11c84:	003edb06 	br	117f4 <__alt_mem_Flash_flash_data+0xf40117f4>
   11c88:	01c1ffc4 	movi	r7,2047
   11c8c:	11c03b26 	beq	r2,r7,11d7c <__adddf3+0x784>
   11c90:	0109c83a 	sub	r4,zero,r4
   11c94:	29402034 	orhi	r5,r5,128
   11c98:	01c00e04 	movi	r7,56
   11c9c:	39006216 	blt	r7,r4,11e28 <__adddf3+0x830>
   11ca0:	01c007c4 	movi	r7,31
   11ca4:	39006b16 	blt	r7,r4,11e54 <__adddf3+0x85c>
   11ca8:	01c00804 	movi	r7,32
   11cac:	390fc83a 	sub	r7,r7,r4
   11cb0:	29d4983a 	sll	r10,r5,r7
   11cb4:	8912d83a 	srl	r9,r17,r4
   11cb8:	89ce983a 	sll	r7,r17,r7
   11cbc:	2908d83a 	srl	r4,r5,r4
   11cc0:	5262b03a 	or	r17,r10,r9
   11cc4:	380ac03a 	cmpne	r5,r7,zero
   11cc8:	8962b03a 	or	r17,r17,r5
   11ccc:	89a3883a 	add	r17,r17,r6
   11cd0:	2211883a 	add	r8,r4,r8
   11cd4:	898d803a 	cmpltu	r6,r17,r6
   11cd8:	418b883a 	add	r5,r8,r6
   11cdc:	1021883a 	mov	r16,r2
   11ce0:	003ee706 	br	11880 <__alt_mem_Flash_flash_data+0xf4011880>
   11ce4:	4184b03a 	or	r2,r8,r6
   11ce8:	103e6226 	beq	r2,zero,11674 <__alt_mem_Flash_flash_data+0xf4011674>
   11cec:	8987c83a 	sub	r3,r17,r6
   11cf0:	88c9803a 	cmpltu	r4,r17,r3
   11cf4:	2a05c83a 	sub	r2,r5,r8
   11cf8:	1105c83a 	sub	r2,r2,r4
   11cfc:	1100202c 	andhi	r4,r2,128
   11d00:	203f0426 	beq	r4,zero,11914 <__alt_mem_Flash_flash_data+0xf4011914>
   11d04:	3463c83a 	sub	r17,r6,r17
   11d08:	414bc83a 	sub	r5,r8,r5
   11d0c:	344d803a 	cmpltu	r6,r6,r17
   11d10:	298bc83a 	sub	r5,r5,r6
   11d14:	3825883a 	mov	r18,r7
   11d18:	003e5606 	br	11674 <__alt_mem_Flash_flash_data+0xf4011674>
   11d1c:	4184b03a 	or	r2,r8,r6
   11d20:	10002b26 	beq	r2,zero,11dd0 <__adddf3+0x7d8>
   11d24:	2804d0fa 	srli	r2,r5,3
   11d28:	8822d0fa 	srli	r17,r17,3
   11d2c:	280a977a 	slli	r5,r5,29
   11d30:	10c0022c 	andhi	r3,r2,8
   11d34:	2c62b03a 	or	r17,r5,r17
   11d38:	18000826 	beq	r3,zero,11d5c <__adddf3+0x764>
   11d3c:	4008d0fa 	srli	r4,r8,3
   11d40:	20c0022c 	andhi	r3,r4,8
   11d44:	1800051e 	bne	r3,zero,11d5c <__adddf3+0x764>
   11d48:	300cd0fa 	srli	r6,r6,3
   11d4c:	4010977a 	slli	r8,r8,29
   11d50:	2005883a 	mov	r2,r4
   11d54:	3825883a 	mov	r18,r7
   11d58:	41a2b03a 	or	r17,r8,r6
   11d5c:	880ad77a 	srli	r5,r17,29
   11d60:	100490fa 	slli	r2,r2,3
   11d64:	882290fa 	slli	r17,r17,3
   11d68:	0401ffc4 	movi	r16,2047
   11d6c:	288ab03a 	or	r5,r5,r2
   11d70:	003e4006 	br	11674 <__alt_mem_Flash_flash_data+0xf4011674>
   11d74:	01c1ffc4 	movi	r7,2047
   11d78:	11ffc71e 	bne	r2,r7,11c98 <__alt_mem_Flash_flash_data+0xf4011c98>
   11d7c:	400b883a 	mov	r5,r8
   11d80:	3023883a 	mov	r17,r6
   11d84:	1021883a 	mov	r16,r2
   11d88:	003e3a06 	br	11674 <__alt_mem_Flash_flash_data+0xf4011674>
   11d8c:	10002d26 	beq	r2,zero,11e44 <__adddf3+0x84c>
   11d90:	4184b03a 	or	r2,r8,r6
   11d94:	10000e26 	beq	r2,zero,11dd0 <__adddf3+0x7d8>
   11d98:	2804d0fa 	srli	r2,r5,3
   11d9c:	8822d0fa 	srli	r17,r17,3
   11da0:	280a977a 	slli	r5,r5,29
   11da4:	10c0022c 	andhi	r3,r2,8
   11da8:	2c62b03a 	or	r17,r5,r17
   11dac:	183feb26 	beq	r3,zero,11d5c <__alt_mem_Flash_flash_data+0xf4011d5c>
   11db0:	4008d0fa 	srli	r4,r8,3
   11db4:	20c0022c 	andhi	r3,r4,8
   11db8:	183fe81e 	bne	r3,zero,11d5c <__alt_mem_Flash_flash_data+0xf4011d5c>
   11dbc:	300cd0fa 	srli	r6,r6,3
   11dc0:	4010977a 	slli	r8,r8,29
   11dc4:	2005883a 	mov	r2,r4
   11dc8:	41a2b03a 	or	r17,r8,r6
   11dcc:	003fe306 	br	11d5c <__alt_mem_Flash_flash_data+0xf4011d5c>
   11dd0:	0401ffc4 	movi	r16,2047
   11dd4:	003e2706 	br	11674 <__alt_mem_Flash_flash_data+0xf4011674>
   11dd8:	0011883a 	mov	r8,zero
   11ddc:	003f8306 	br	11bec <__alt_mem_Flash_flash_data+0xf4011bec>
   11de0:	193ff804 	addi	r4,r3,-32
   11de4:	02400804 	movi	r9,32
   11de8:	2908d83a 	srl	r4,r5,r4
   11dec:	1a402526 	beq	r3,r9,11e84 <__adddf3+0x88c>
   11df0:	02401004 	movi	r9,64
   11df4:	48c7c83a 	sub	r3,r9,r3
   11df8:	28ca983a 	sll	r5,r5,r3
   11dfc:	2c62b03a 	or	r17,r5,r17
   11e00:	8822c03a 	cmpne	r17,r17,zero
   11e04:	8922b03a 	or	r17,r17,r4
   11e08:	0007883a 	mov	r3,zero
   11e0c:	003f2f06 	br	11acc <__alt_mem_Flash_flash_data+0xf4011acc>
   11e10:	01402034 	movhi	r5,128
   11e14:	0007883a 	mov	r3,zero
   11e18:	297fffc4 	addi	r5,r5,-1
   11e1c:	047ffe04 	movi	r17,-8
   11e20:	0401ffc4 	movi	r16,2047
   11e24:	003e7306 	br	117f4 <__alt_mem_Flash_flash_data+0xf40117f4>
   11e28:	2c62b03a 	or	r17,r5,r17
   11e2c:	8822c03a 	cmpne	r17,r17,zero
   11e30:	0009883a 	mov	r4,zero
   11e34:	003fa506 	br	11ccc <__alt_mem_Flash_flash_data+0xf4011ccc>
   11e38:	400b883a 	mov	r5,r8
   11e3c:	3023883a 	mov	r17,r6
   11e40:	003e0c06 	br	11674 <__alt_mem_Flash_flash_data+0xf4011674>
   11e44:	400b883a 	mov	r5,r8
   11e48:	3023883a 	mov	r17,r6
   11e4c:	0401ffc4 	movi	r16,2047
   11e50:	003e0806 	br	11674 <__alt_mem_Flash_flash_data+0xf4011674>
   11e54:	21fff804 	addi	r7,r4,-32
   11e58:	02400804 	movi	r9,32
   11e5c:	29ced83a 	srl	r7,r5,r7
   11e60:	22400a26 	beq	r4,r9,11e8c <__adddf3+0x894>
   11e64:	02401004 	movi	r9,64
   11e68:	4909c83a 	sub	r4,r9,r4
   11e6c:	290a983a 	sll	r5,r5,r4
   11e70:	2c62b03a 	or	r17,r5,r17
   11e74:	8822c03a 	cmpne	r17,r17,zero
   11e78:	89e2b03a 	or	r17,r17,r7
   11e7c:	0009883a 	mov	r4,zero
   11e80:	003f9206 	br	11ccc <__alt_mem_Flash_flash_data+0xf4011ccc>
   11e84:	000b883a 	mov	r5,zero
   11e88:	003fdc06 	br	11dfc <__alt_mem_Flash_flash_data+0xf4011dfc>
   11e8c:	000b883a 	mov	r5,zero
   11e90:	003ff706 	br	11e70 <__alt_mem_Flash_flash_data+0xf4011e70>

00011e94 <__divdf3>:
   11e94:	defff204 	addi	sp,sp,-56
   11e98:	dd000815 	stw	r20,32(sp)
   11e9c:	2828d53a 	srli	r20,r5,20
   11ea0:	dd800a15 	stw	r22,40(sp)
   11ea4:	282cd7fa 	srli	r22,r5,31
   11ea8:	dc000415 	stw	r16,16(sp)
   11eac:	04000434 	movhi	r16,16
   11eb0:	df000c15 	stw	fp,48(sp)
   11eb4:	dcc00715 	stw	r19,28(sp)
   11eb8:	dc800615 	stw	r18,24(sp)
   11ebc:	dc400515 	stw	r17,20(sp)
   11ec0:	843fffc4 	addi	r16,r16,-1
   11ec4:	dfc00d15 	stw	ra,52(sp)
   11ec8:	ddc00b15 	stw	r23,44(sp)
   11ecc:	dd400915 	stw	r21,36(sp)
   11ed0:	a501ffcc 	andi	r20,r20,2047
   11ed4:	2025883a 	mov	r18,r4
   11ed8:	2027883a 	mov	r19,r4
   11edc:	2c22703a 	and	r17,r5,r16
   11ee0:	b7003fcc 	andi	fp,r22,255
   11ee4:	a0005e26 	beq	r20,zero,12060 <__divdf3+0x1cc>
   11ee8:	0081ffc4 	movi	r2,2047
   11eec:	a0803526 	beq	r20,r2,11fc4 <__divdf3+0x130>
   11ef0:	8c000434 	orhi	r16,r17,16
   11ef4:	2004d77a 	srli	r2,r4,29
   11ef8:	802090fa 	slli	r16,r16,3
   11efc:	202690fa 	slli	r19,r4,3
   11f00:	a53f0044 	addi	r20,r20,-1023
   11f04:	80a2b03a 	or	r17,r16,r2
   11f08:	0025883a 	mov	r18,zero
   11f0c:	0011883a 	mov	r8,zero
   11f10:	380ad53a 	srli	r5,r7,20
   11f14:	382ed7fa 	srli	r23,r7,31
   11f18:	04000434 	movhi	r16,16
   11f1c:	843fffc4 	addi	r16,r16,-1
   11f20:	2941ffcc 	andi	r5,r5,2047
   11f24:	302b883a 	mov	r21,r6
   11f28:	3c20703a 	and	r16,r7,r16
   11f2c:	ba403fcc 	andi	r9,r23,255
   11f30:	28006726 	beq	r5,zero,120d0 <__divdf3+0x23c>
   11f34:	0081ffc4 	movi	r2,2047
   11f38:	28805f26 	beq	r5,r2,120b8 <__divdf3+0x224>
   11f3c:	84000434 	orhi	r16,r16,16
   11f40:	3004d77a 	srli	r2,r6,29
   11f44:	802090fa 	slli	r16,r16,3
   11f48:	302a90fa 	slli	r21,r6,3
   11f4c:	297f0044 	addi	r5,r5,-1023
   11f50:	80a0b03a 	or	r16,r16,r2
   11f54:	000f883a 	mov	r7,zero
   11f58:	3c86b03a 	or	r3,r7,r18
   11f5c:	180690ba 	slli	r3,r3,2
   11f60:	00800074 	movhi	r2,1
   11f64:	1087e104 	addi	r2,r2,8068
   11f68:	1887883a 	add	r3,r3,r2
   11f6c:	18c00017 	ldw	r3,0(r3)
   11f70:	b5c8f03a 	xor	r4,r22,r23
   11f74:	200d883a 	mov	r6,r4
   11f78:	24803fcc 	andi	r18,r4,255
   11f7c:	a169c83a 	sub	r20,r20,r5
   11f80:	1800683a 	jmp	r3
   11f84:	000121cc 	andi	zero,zero,1159
   11f88:	00011ffc 	xorhi	zero,zero,1151
   11f8c:	00012190 	cmplti	zero,zero,1158
   11f90:	00011fe0 	cmpeqi	zero,zero,1151
   11f94:	00012190 	cmplti	zero,zero,1158
   11f98:	00012164 	muli	zero,zero,1157
   11f9c:	00012190 	cmplti	zero,zero,1158
   11fa0:	00011fe0 	cmpeqi	zero,zero,1151
   11fa4:	00011ffc 	xorhi	zero,zero,1151
   11fa8:	00011ffc 	xorhi	zero,zero,1151
   11fac:	00012164 	muli	zero,zero,1157
   11fb0:	00011fe0 	cmpeqi	zero,zero,1151
   11fb4:	00011ff0 	cmpltui	zero,zero,1151
   11fb8:	00011ff0 	cmpltui	zero,zero,1151
   11fbc:	00011ff0 	cmpltui	zero,zero,1151
   11fc0:	000121a0 	cmpeqi	zero,zero,1158
   11fc4:	8904b03a 	or	r2,r17,r4
   11fc8:	1000631e 	bne	r2,zero,12158 <__divdf3+0x2c4>
   11fcc:	04800204 	movi	r18,8
   11fd0:	0023883a 	mov	r17,zero
   11fd4:	0027883a 	mov	r19,zero
   11fd8:	02000084 	movi	r8,2
   11fdc:	003fcc06 	br	11f10 <__alt_mem_Flash_flash_data+0xf4011f10>
   11fe0:	8023883a 	mov	r17,r16
   11fe4:	a827883a 	mov	r19,r21
   11fe8:	4839883a 	mov	fp,r9
   11fec:	3811883a 	mov	r8,r7
   11ff0:	00800084 	movi	r2,2
   11ff4:	40812a1e 	bne	r8,r2,124a0 <__divdf3+0x60c>
   11ff8:	e025883a 	mov	r18,fp
   11ffc:	9180004c 	andi	r6,r18,1
   12000:	0101ffc4 	movi	r4,2047
   12004:	000b883a 	mov	r5,zero
   12008:	0027883a 	mov	r19,zero
   1200c:	2008953a 	slli	r4,r4,20
   12010:	30c03fcc 	andi	r3,r6,255
   12014:	04000434 	movhi	r16,16
   12018:	180697fa 	slli	r3,r3,31
   1201c:	843fffc4 	addi	r16,r16,-1
   12020:	2c20703a 	and	r16,r5,r16
   12024:	8120b03a 	or	r16,r16,r4
   12028:	80c6b03a 	or	r3,r16,r3
   1202c:	9805883a 	mov	r2,r19
   12030:	dfc00d17 	ldw	ra,52(sp)
   12034:	df000c17 	ldw	fp,48(sp)
   12038:	ddc00b17 	ldw	r23,44(sp)
   1203c:	dd800a17 	ldw	r22,40(sp)
   12040:	dd400917 	ldw	r21,36(sp)
   12044:	dd000817 	ldw	r20,32(sp)
   12048:	dcc00717 	ldw	r19,28(sp)
   1204c:	dc800617 	ldw	r18,24(sp)
   12050:	dc400517 	ldw	r17,20(sp)
   12054:	dc000417 	ldw	r16,16(sp)
   12058:	dec00e04 	addi	sp,sp,56
   1205c:	f800283a 	ret
   12060:	8904b03a 	or	r2,r17,r4
   12064:	10003726 	beq	r2,zero,12144 <__divdf3+0x2b0>
   12068:	88011c26 	beq	r17,zero,124dc <__divdf3+0x648>
   1206c:	8809883a 	mov	r4,r17
   12070:	d9800315 	stw	r6,12(sp)
   12074:	d9c00115 	stw	r7,4(sp)
   12078:	0013b940 	call	13b94 <__clzsi2>
   1207c:	d9800317 	ldw	r6,12(sp)
   12080:	d9c00117 	ldw	r7,4(sp)
   12084:	1007883a 	mov	r3,r2
   12088:	01000a04 	movi	r4,40
   1208c:	1cfffe04 	addi	r19,r3,-8
   12090:	20c9c83a 	sub	r4,r4,r3
   12094:	8cca983a 	sll	r5,r17,r19
   12098:	9108d83a 	srl	r4,r18,r4
   1209c:	94e6983a 	sll	r19,r18,r19
   120a0:	2162b03a 	or	r17,r4,r5
   120a4:	053f0344 	movi	r20,-1011
   120a8:	a0e9c83a 	sub	r20,r20,r3
   120ac:	0025883a 	mov	r18,zero
   120b0:	0011883a 	mov	r8,zero
   120b4:	003f9606 	br	11f10 <__alt_mem_Flash_flash_data+0xf4011f10>
   120b8:	8184b03a 	or	r2,r16,r6
   120bc:	10001f1e 	bne	r2,zero,1213c <__divdf3+0x2a8>
   120c0:	0021883a 	mov	r16,zero
   120c4:	002b883a 	mov	r21,zero
   120c8:	01c00084 	movi	r7,2
   120cc:	003fa206 	br	11f58 <__alt_mem_Flash_flash_data+0xf4011f58>
   120d0:	8184b03a 	or	r2,r16,r6
   120d4:	10001526 	beq	r2,zero,1212c <__divdf3+0x298>
   120d8:	80010c26 	beq	r16,zero,1250c <__divdf3+0x678>
   120dc:	8009883a 	mov	r4,r16
   120e0:	d9800315 	stw	r6,12(sp)
   120e4:	da000215 	stw	r8,8(sp)
   120e8:	da400015 	stw	r9,0(sp)
   120ec:	0013b940 	call	13b94 <__clzsi2>
   120f0:	d9800317 	ldw	r6,12(sp)
   120f4:	da000217 	ldw	r8,8(sp)
   120f8:	da400017 	ldw	r9,0(sp)
   120fc:	1007883a 	mov	r3,r2
   12100:	01000a04 	movi	r4,40
   12104:	1d7ffe04 	addi	r21,r3,-8
   12108:	20c9c83a 	sub	r4,r4,r3
   1210c:	8560983a 	sll	r16,r16,r21
   12110:	3108d83a 	srl	r4,r6,r4
   12114:	356a983a 	sll	r21,r6,r21
   12118:	2420b03a 	or	r16,r4,r16
   1211c:	017f0344 	movi	r5,-1011
   12120:	28cbc83a 	sub	r5,r5,r3
   12124:	000f883a 	mov	r7,zero
   12128:	003f8b06 	br	11f58 <__alt_mem_Flash_flash_data+0xf4011f58>
   1212c:	0021883a 	mov	r16,zero
   12130:	002b883a 	mov	r21,zero
   12134:	01c00044 	movi	r7,1
   12138:	003f8706 	br	11f58 <__alt_mem_Flash_flash_data+0xf4011f58>
   1213c:	01c000c4 	movi	r7,3
   12140:	003f8506 	br	11f58 <__alt_mem_Flash_flash_data+0xf4011f58>
   12144:	04800104 	movi	r18,4
   12148:	0023883a 	mov	r17,zero
   1214c:	0027883a 	mov	r19,zero
   12150:	02000044 	movi	r8,1
   12154:	003f6e06 	br	11f10 <__alt_mem_Flash_flash_data+0xf4011f10>
   12158:	04800304 	movi	r18,12
   1215c:	020000c4 	movi	r8,3
   12160:	003f6b06 	br	11f10 <__alt_mem_Flash_flash_data+0xf4011f10>
   12164:	01400434 	movhi	r5,16
   12168:	000d883a 	mov	r6,zero
   1216c:	297fffc4 	addi	r5,r5,-1
   12170:	04ffffc4 	movi	r19,-1
   12174:	0101ffc4 	movi	r4,2047
   12178:	003fa406 	br	1200c <__alt_mem_Flash_flash_data+0xf401200c>
   1217c:	043f0084 	movi	r16,-1022
   12180:	8521c83a 	sub	r16,r16,r20
   12184:	00800e04 	movi	r2,56
   12188:	1401200e 	bge	r2,r16,1260c <__divdf3+0x778>
   1218c:	9180004c 	andi	r6,r18,1
   12190:	0009883a 	mov	r4,zero
   12194:	000b883a 	mov	r5,zero
   12198:	0027883a 	mov	r19,zero
   1219c:	003f9b06 	br	1200c <__alt_mem_Flash_flash_data+0xf401200c>
   121a0:	8880022c 	andhi	r2,r17,8
   121a4:	1000c726 	beq	r2,zero,124c4 <__divdf3+0x630>
   121a8:	8080022c 	andhi	r2,r16,8
   121ac:	1000c51e 	bne	r2,zero,124c4 <__divdf3+0x630>
   121b0:	00800434 	movhi	r2,16
   121b4:	81400234 	orhi	r5,r16,8
   121b8:	10bfffc4 	addi	r2,r2,-1
   121bc:	b80d883a 	mov	r6,r23
   121c0:	288a703a 	and	r5,r5,r2
   121c4:	a827883a 	mov	r19,r21
   121c8:	003fea06 	br	12174 <__alt_mem_Flash_flash_data+0xf4012174>
   121cc:	8440ea36 	bltu	r16,r17,12578 <__divdf3+0x6e4>
   121d0:	8c00e826 	beq	r17,r16,12574 <__divdf3+0x6e0>
   121d4:	a53fffc4 	addi	r20,r20,-1
   121d8:	882d883a 	mov	r22,r17
   121dc:	000d883a 	mov	r6,zero
   121e0:	a804d63a 	srli	r2,r21,24
   121e4:	8020923a 	slli	r16,r16,8
   121e8:	b009883a 	mov	r4,r22
   121ec:	d9800315 	stw	r6,12(sp)
   121f0:	1420b03a 	or	r16,r2,r16
   121f4:	802ed43a 	srli	r23,r16,16
   121f8:	873fffcc 	andi	fp,r16,65535
   121fc:	a82a923a 	slli	r21,r21,8
   12200:	b80b883a 	mov	r5,r23
   12204:	00115e80 	call	115e8 <__udivsi3>
   12208:	b009883a 	mov	r4,r22
   1220c:	b80b883a 	mov	r5,r23
   12210:	1023883a 	mov	r17,r2
   12214:	00115f00 	call	115f0 <__umodsi3>
   12218:	1004943a 	slli	r2,r2,16
   1221c:	9808d43a 	srli	r4,r19,16
   12220:	8f2d383a 	mul	r22,r17,fp
   12224:	d9800317 	ldw	r6,12(sp)
   12228:	1106b03a 	or	r3,r2,r4
   1222c:	1d80062e 	bgeu	r3,r22,12248 <__divdf3+0x3b4>
   12230:	1c07883a 	add	r3,r3,r16
   12234:	88bfffc4 	addi	r2,r17,-1
   12238:	1c00dc36 	bltu	r3,r16,125ac <__divdf3+0x718>
   1223c:	1d80db2e 	bgeu	r3,r22,125ac <__divdf3+0x718>
   12240:	8c7fff84 	addi	r17,r17,-2
   12244:	1c07883a 	add	r3,r3,r16
   12248:	1dadc83a 	sub	r22,r3,r22
   1224c:	b009883a 	mov	r4,r22
   12250:	b80b883a 	mov	r5,r23
   12254:	d9800315 	stw	r6,12(sp)
   12258:	00115e80 	call	115e8 <__udivsi3>
   1225c:	b009883a 	mov	r4,r22
   12260:	b80b883a 	mov	r5,r23
   12264:	d8800015 	stw	r2,0(sp)
   12268:	00115f00 	call	115f0 <__umodsi3>
   1226c:	da400017 	ldw	r9,0(sp)
   12270:	1004943a 	slli	r2,r2,16
   12274:	9cffffcc 	andi	r19,r19,65535
   12278:	4f07383a 	mul	r3,r9,fp
   1227c:	14c8b03a 	or	r4,r2,r19
   12280:	d9800317 	ldw	r6,12(sp)
   12284:	20c0062e 	bgeu	r4,r3,122a0 <__divdf3+0x40c>
   12288:	2409883a 	add	r4,r4,r16
   1228c:	48bfffc4 	addi	r2,r9,-1
   12290:	2400c436 	bltu	r4,r16,125a4 <__divdf3+0x710>
   12294:	20c0c32e 	bgeu	r4,r3,125a4 <__divdf3+0x710>
   12298:	4a7fff84 	addi	r9,r9,-2
   1229c:	2409883a 	add	r4,r4,r16
   122a0:	8822943a 	slli	r17,r17,16
   122a4:	a80ed43a 	srli	r7,r21,16
   122a8:	aa3fffcc 	andi	r8,r21,65535
   122ac:	4c62b03a 	or	r17,r9,r17
   122b0:	8816d43a 	srli	r11,r17,16
   122b4:	897fffcc 	andi	r5,r17,65535
   122b8:	2a15383a 	mul	r10,r5,r8
   122bc:	5a19383a 	mul	r12,r11,r8
   122c0:	29cb383a 	mul	r5,r5,r7
   122c4:	5012d43a 	srli	r9,r10,16
   122c8:	20c5c83a 	sub	r2,r4,r3
   122cc:	614b883a 	add	r5,r12,r5
   122d0:	2a4b883a 	add	r5,r5,r9
   122d4:	59c7383a 	mul	r3,r11,r7
   122d8:	2b00022e 	bgeu	r5,r12,122e4 <__divdf3+0x450>
   122dc:	01000074 	movhi	r4,1
   122e0:	1907883a 	add	r3,r3,r4
   122e4:	2808d43a 	srli	r4,r5,16
   122e8:	280a943a 	slli	r5,r5,16
   122ec:	54ffffcc 	andi	r19,r10,65535
   122f0:	1907883a 	add	r3,r3,r4
   122f4:	2ccb883a 	add	r5,r5,r19
   122f8:	10c09336 	bltu	r2,r3,12548 <__divdf3+0x6b4>
   122fc:	10c0ad26 	beq	r2,r3,125b4 <__divdf3+0x720>
   12300:	10c7c83a 	sub	r3,r2,r3
   12304:	3167c83a 	sub	r19,r6,r5
   12308:	34ed803a 	cmpltu	r22,r6,r19
   1230c:	1dadc83a 	sub	r22,r3,r22
   12310:	b400b226 	beq	r22,r16,125dc <__divdf3+0x748>
   12314:	b009883a 	mov	r4,r22
   12318:	b80b883a 	mov	r5,r23
   1231c:	d9c00115 	stw	r7,4(sp)
   12320:	da000215 	stw	r8,8(sp)
   12324:	00115e80 	call	115e8 <__udivsi3>
   12328:	b009883a 	mov	r4,r22
   1232c:	b80b883a 	mov	r5,r23
   12330:	d8800315 	stw	r2,12(sp)
   12334:	00115f00 	call	115f0 <__umodsi3>
   12338:	d9800317 	ldw	r6,12(sp)
   1233c:	1004943a 	slli	r2,r2,16
   12340:	9808d43a 	srli	r4,r19,16
   12344:	372d383a 	mul	r22,r6,fp
   12348:	d9c00117 	ldw	r7,4(sp)
   1234c:	1106b03a 	or	r3,r2,r4
   12350:	da000217 	ldw	r8,8(sp)
   12354:	1d80062e 	bgeu	r3,r22,12370 <__divdf3+0x4dc>
   12358:	1c07883a 	add	r3,r3,r16
   1235c:	30bfffc4 	addi	r2,r6,-1
   12360:	1c00a036 	bltu	r3,r16,125e4 <__divdf3+0x750>
   12364:	1d809f2e 	bgeu	r3,r22,125e4 <__divdf3+0x750>
   12368:	31bfff84 	addi	r6,r6,-2
   1236c:	1c07883a 	add	r3,r3,r16
   12370:	1dadc83a 	sub	r22,r3,r22
   12374:	b009883a 	mov	r4,r22
   12378:	b80b883a 	mov	r5,r23
   1237c:	d9800315 	stw	r6,12(sp)
   12380:	d9c00115 	stw	r7,4(sp)
   12384:	da000215 	stw	r8,8(sp)
   12388:	00115e80 	call	115e8 <__udivsi3>
   1238c:	b009883a 	mov	r4,r22
   12390:	b80b883a 	mov	r5,r23
   12394:	d8800015 	stw	r2,0(sp)
   12398:	00115f00 	call	115f0 <__umodsi3>
   1239c:	da400017 	ldw	r9,0(sp)
   123a0:	1004943a 	slli	r2,r2,16
   123a4:	993fffcc 	andi	r4,r19,65535
   123a8:	4f39383a 	mul	fp,r9,fp
   123ac:	1106b03a 	or	r3,r2,r4
   123b0:	d9800317 	ldw	r6,12(sp)
   123b4:	d9c00117 	ldw	r7,4(sp)
   123b8:	da000217 	ldw	r8,8(sp)
   123bc:	1f00062e 	bgeu	r3,fp,123d8 <__divdf3+0x544>
   123c0:	1c07883a 	add	r3,r3,r16
   123c4:	48bfffc4 	addi	r2,r9,-1
   123c8:	1c008836 	bltu	r3,r16,125ec <__divdf3+0x758>
   123cc:	1f00872e 	bgeu	r3,fp,125ec <__divdf3+0x758>
   123d0:	4a7fff84 	addi	r9,r9,-2
   123d4:	1c07883a 	add	r3,r3,r16
   123d8:	3008943a 	slli	r4,r6,16
   123dc:	1f07c83a 	sub	r3,r3,fp
   123e0:	4926b03a 	or	r19,r9,r4
   123e4:	993fffcc 	andi	r4,r19,65535
   123e8:	980cd43a 	srli	r6,r19,16
   123ec:	220b383a 	mul	r5,r4,r8
   123f0:	21c5383a 	mul	r2,r4,r7
   123f4:	3211383a 	mul	r8,r6,r8
   123f8:	2808d43a 	srli	r4,r5,16
   123fc:	31cf383a 	mul	r7,r6,r7
   12400:	4085883a 	add	r2,r8,r2
   12404:	1105883a 	add	r2,r2,r4
   12408:	1200022e 	bgeu	r2,r8,12414 <__divdf3+0x580>
   1240c:	01000074 	movhi	r4,1
   12410:	390f883a 	add	r7,r7,r4
   12414:	1008d43a 	srli	r4,r2,16
   12418:	1004943a 	slli	r2,r2,16
   1241c:	297fffcc 	andi	r5,r5,65535
   12420:	390f883a 	add	r7,r7,r4
   12424:	1145883a 	add	r2,r2,r5
   12428:	19c06536 	bltu	r3,r7,125c0 <__divdf3+0x72c>
   1242c:	19c09f26 	beq	r3,r7,126ac <__divdf3+0x818>
   12430:	9cc00054 	ori	r19,r19,1
   12434:	a100ffc4 	addi	r4,r20,1023
   12438:	013f500e 	bge	zero,r4,1217c <__alt_mem_Flash_flash_data+0xf401217c>
   1243c:	988001cc 	andi	r2,r19,7
   12440:	10000726 	beq	r2,zero,12460 <__divdf3+0x5cc>
   12444:	98c003cc 	andi	r3,r19,15
   12448:	00800104 	movi	r2,4
   1244c:	18800426 	beq	r3,r2,12460 <__divdf3+0x5cc>
   12450:	9885883a 	add	r2,r19,r2
   12454:	14e1803a 	cmpltu	r16,r2,r19
   12458:	8c23883a 	add	r17,r17,r16
   1245c:	1027883a 	mov	r19,r2
   12460:	8880402c 	andhi	r2,r17,256
   12464:	10000426 	beq	r2,zero,12478 <__divdf3+0x5e4>
   12468:	00bfc034 	movhi	r2,65280
   1246c:	10bfffc4 	addi	r2,r2,-1
   12470:	a1010004 	addi	r4,r20,1024
   12474:	88a2703a 	and	r17,r17,r2
   12478:	0081ff84 	movi	r2,2046
   1247c:	113edf16 	blt	r2,r4,11ffc <__alt_mem_Flash_flash_data+0xf4011ffc>
   12480:	9826d0fa 	srli	r19,r19,3
   12484:	8804977a 	slli	r2,r17,29
   12488:	8820927a 	slli	r16,r17,9
   1248c:	2101ffcc 	andi	r4,r4,2047
   12490:	14e6b03a 	or	r19,r2,r19
   12494:	800ad33a 	srli	r5,r16,12
   12498:	9180004c 	andi	r6,r18,1
   1249c:	003edb06 	br	1200c <__alt_mem_Flash_flash_data+0xf401200c>
   124a0:	008000c4 	movi	r2,3
   124a4:	4080a826 	beq	r8,r2,12748 <__divdf3+0x8b4>
   124a8:	00800044 	movi	r2,1
   124ac:	4080551e 	bne	r8,r2,12604 <__divdf3+0x770>
   124b0:	e00d883a 	mov	r6,fp
   124b4:	0009883a 	mov	r4,zero
   124b8:	000b883a 	mov	r5,zero
   124bc:	0027883a 	mov	r19,zero
   124c0:	003ed206 	br	1200c <__alt_mem_Flash_flash_data+0xf401200c>
   124c4:	00800434 	movhi	r2,16
   124c8:	89400234 	orhi	r5,r17,8
   124cc:	10bfffc4 	addi	r2,r2,-1
   124d0:	b00d883a 	mov	r6,r22
   124d4:	288a703a 	and	r5,r5,r2
   124d8:	003f2606 	br	12174 <__alt_mem_Flash_flash_data+0xf4012174>
   124dc:	d9800315 	stw	r6,12(sp)
   124e0:	d9c00115 	stw	r7,4(sp)
   124e4:	0013b940 	call	13b94 <__clzsi2>
   124e8:	10c00804 	addi	r3,r2,32
   124ec:	010009c4 	movi	r4,39
   124f0:	d9800317 	ldw	r6,12(sp)
   124f4:	d9c00117 	ldw	r7,4(sp)
   124f8:	20fee30e 	bge	r4,r3,12088 <__alt_mem_Flash_flash_data+0xf4012088>
   124fc:	117ffe04 	addi	r5,r2,-8
   12500:	9162983a 	sll	r17,r18,r5
   12504:	0027883a 	mov	r19,zero
   12508:	003ee606 	br	120a4 <__alt_mem_Flash_flash_data+0xf40120a4>
   1250c:	3009883a 	mov	r4,r6
   12510:	d9800315 	stw	r6,12(sp)
   12514:	da000215 	stw	r8,8(sp)
   12518:	da400015 	stw	r9,0(sp)
   1251c:	0013b940 	call	13b94 <__clzsi2>
   12520:	10c00804 	addi	r3,r2,32
   12524:	010009c4 	movi	r4,39
   12528:	d9800317 	ldw	r6,12(sp)
   1252c:	da000217 	ldw	r8,8(sp)
   12530:	da400017 	ldw	r9,0(sp)
   12534:	20fef20e 	bge	r4,r3,12100 <__alt_mem_Flash_flash_data+0xf4012100>
   12538:	10bffe04 	addi	r2,r2,-8
   1253c:	a8a0983a 	sll	r16,r21,r2
   12540:	002b883a 	mov	r21,zero
   12544:	003ef506 	br	1211c <__alt_mem_Flash_flash_data+0xf401211c>
   12548:	354d883a 	add	r6,r6,r21
   1254c:	3549803a 	cmpltu	r4,r6,r21
   12550:	2409883a 	add	r4,r4,r16
   12554:	2089883a 	add	r4,r4,r2
   12558:	88bfffc4 	addi	r2,r17,-1
   1255c:	81000c2e 	bgeu	r16,r4,12590 <__divdf3+0x6fc>
   12560:	20c04436 	bltu	r4,r3,12674 <__divdf3+0x7e0>
   12564:	19006f26 	beq	r3,r4,12724 <__divdf3+0x890>
   12568:	20c7c83a 	sub	r3,r4,r3
   1256c:	1023883a 	mov	r17,r2
   12570:	003f6406 	br	12304 <__alt_mem_Flash_flash_data+0xf4012304>
   12574:	9d7f1736 	bltu	r19,r21,121d4 <__alt_mem_Flash_flash_data+0xf40121d4>
   12578:	9806d07a 	srli	r3,r19,1
   1257c:	880497fa 	slli	r2,r17,31
   12580:	980c97fa 	slli	r6,r19,31
   12584:	882cd07a 	srli	r22,r17,1
   12588:	18a6b03a 	or	r19,r3,r2
   1258c:	003f1406 	br	121e0 <__alt_mem_Flash_flash_data+0xf40121e0>
   12590:	243ff51e 	bne	r4,r16,12568 <__alt_mem_Flash_flash_data+0xf4012568>
   12594:	357ff22e 	bgeu	r6,r21,12560 <__alt_mem_Flash_flash_data+0xf4012560>
   12598:	80c7c83a 	sub	r3,r16,r3
   1259c:	1023883a 	mov	r17,r2
   125a0:	003f5806 	br	12304 <__alt_mem_Flash_flash_data+0xf4012304>
   125a4:	1013883a 	mov	r9,r2
   125a8:	003f3d06 	br	122a0 <__alt_mem_Flash_flash_data+0xf40122a0>
   125ac:	1023883a 	mov	r17,r2
   125b0:	003f2506 	br	12248 <__alt_mem_Flash_flash_data+0xf4012248>
   125b4:	317fe436 	bltu	r6,r5,12548 <__alt_mem_Flash_flash_data+0xf4012548>
   125b8:	0007883a 	mov	r3,zero
   125bc:	003f5106 	br	12304 <__alt_mem_Flash_flash_data+0xf4012304>
   125c0:	1c07883a 	add	r3,r3,r16
   125c4:	993fffc4 	addi	r4,r19,-1
   125c8:	1c000a2e 	bgeu	r3,r16,125f4 <__divdf3+0x760>
   125cc:	2027883a 	mov	r19,r4
   125d0:	19ff971e 	bne	r3,r7,12430 <__alt_mem_Flash_flash_data+0xf4012430>
   125d4:	a8bf961e 	bne	r21,r2,12430 <__alt_mem_Flash_flash_data+0xf4012430>
   125d8:	003f9606 	br	12434 <__alt_mem_Flash_flash_data+0xf4012434>
   125dc:	04ffffc4 	movi	r19,-1
   125e0:	003f9406 	br	12434 <__alt_mem_Flash_flash_data+0xf4012434>
   125e4:	100d883a 	mov	r6,r2
   125e8:	003f6106 	br	12370 <__alt_mem_Flash_flash_data+0xf4012370>
   125ec:	1013883a 	mov	r9,r2
   125f0:	003f7906 	br	123d8 <__alt_mem_Flash_flash_data+0xf40123d8>
   125f4:	19c02636 	bltu	r3,r7,12690 <__divdf3+0x7fc>
   125f8:	38c04d26 	beq	r7,r3,12730 <__divdf3+0x89c>
   125fc:	2027883a 	mov	r19,r4
   12600:	003f8b06 	br	12430 <__alt_mem_Flash_flash_data+0xf4012430>
   12604:	e025883a 	mov	r18,fp
   12608:	003f8a06 	br	12434 <__alt_mem_Flash_flash_data+0xf4012434>
   1260c:	008007c4 	movi	r2,31
   12610:	14002a16 	blt	r2,r16,126bc <__divdf3+0x828>
   12614:	a5010784 	addi	r20,r20,1054
   12618:	8d04983a 	sll	r2,r17,r20
   1261c:	9c06d83a 	srl	r3,r19,r16
   12620:	9d28983a 	sll	r20,r19,r20
   12624:	8c20d83a 	srl	r16,r17,r16
   12628:	1886b03a 	or	r3,r3,r2
   1262c:	a004c03a 	cmpne	r2,r20,zero
   12630:	1884b03a 	or	r2,r3,r2
   12634:	10c001cc 	andi	r3,r2,7
   12638:	18000726 	beq	r3,zero,12658 <__divdf3+0x7c4>
   1263c:	110003cc 	andi	r4,r2,15
   12640:	00c00104 	movi	r3,4
   12644:	20c00426 	beq	r4,r3,12658 <__divdf3+0x7c4>
   12648:	10c00104 	addi	r3,r2,4
   1264c:	1885803a 	cmpltu	r2,r3,r2
   12650:	80a1883a 	add	r16,r16,r2
   12654:	1805883a 	mov	r2,r3
   12658:	80c0202c 	andhi	r3,r16,128
   1265c:	18002d26 	beq	r3,zero,12714 <__divdf3+0x880>
   12660:	9180004c 	andi	r6,r18,1
   12664:	01000044 	movi	r4,1
   12668:	000b883a 	mov	r5,zero
   1266c:	0027883a 	mov	r19,zero
   12670:	003e6606 	br	1200c <__alt_mem_Flash_flash_data+0xf401200c>
   12674:	354d883a 	add	r6,r6,r21
   12678:	356d803a 	cmpltu	r22,r6,r21
   1267c:	b42d883a 	add	r22,r22,r16
   12680:	b12d883a 	add	r22,r22,r4
   12684:	8c7fff84 	addi	r17,r17,-2
   12688:	b0c7c83a 	sub	r3,r22,r3
   1268c:	003f1d06 	br	12304 <__alt_mem_Flash_flash_data+0xf4012304>
   12690:	ad4b883a 	add	r5,r21,r21
   12694:	2d6b803a 	cmpltu	r21,r5,r21
   12698:	ac2b883a 	add	r21,r21,r16
   1269c:	1d47883a 	add	r3,r3,r21
   126a0:	993fff84 	addi	r4,r19,-2
   126a4:	282b883a 	mov	r21,r5
   126a8:	003fc806 	br	125cc <__alt_mem_Flash_flash_data+0xf40125cc>
   126ac:	103fc41e 	bne	r2,zero,125c0 <__alt_mem_Flash_flash_data+0xf40125c0>
   126b0:	002b883a 	mov	r21,zero
   126b4:	a8bf5e1e 	bne	r21,r2,12430 <__alt_mem_Flash_flash_data+0xf4012430>
   126b8:	003f5e06 	br	12434 <__alt_mem_Flash_flash_data+0xf4012434>
   126bc:	00bef884 	movi	r2,-1054
   126c0:	1505c83a 	sub	r2,r2,r20
   126c4:	00c00804 	movi	r3,32
   126c8:	8884d83a 	srl	r2,r17,r2
   126cc:	80c01c26 	beq	r16,r3,12740 <__divdf3+0x8ac>
   126d0:	a0c10f84 	addi	r3,r20,1086
   126d4:	88c6983a 	sll	r3,r17,r3
   126d8:	1cc6b03a 	or	r3,r3,r19
   126dc:	1806c03a 	cmpne	r3,r3,zero
   126e0:	1884b03a 	or	r2,r3,r2
   126e4:	140001cc 	andi	r16,r2,7
   126e8:	8000061e 	bne	r16,zero,12704 <__divdf3+0x870>
   126ec:	000b883a 	mov	r5,zero
   126f0:	1004d0fa 	srli	r2,r2,3
   126f4:	9180004c 	andi	r6,r18,1
   126f8:	0009883a 	mov	r4,zero
   126fc:	1426b03a 	or	r19,r2,r16
   12700:	003e4206 	br	1200c <__alt_mem_Flash_flash_data+0xf401200c>
   12704:	110003cc 	andi	r4,r2,15
   12708:	00c00104 	movi	r3,4
   1270c:	0021883a 	mov	r16,zero
   12710:	20ffcd1e 	bne	r4,r3,12648 <__alt_mem_Flash_flash_data+0xf4012648>
   12714:	800a927a 	slli	r5,r16,9
   12718:	8020977a 	slli	r16,r16,29
   1271c:	280ad33a 	srli	r5,r5,12
   12720:	003ff306 	br	126f0 <__alt_mem_Flash_flash_data+0xf40126f0>
   12724:	317fd336 	bltu	r6,r5,12674 <__alt_mem_Flash_flash_data+0xf4012674>
   12728:	1023883a 	mov	r17,r2
   1272c:	003fa206 	br	125b8 <__alt_mem_Flash_flash_data+0xf40125b8>
   12730:	a8bfd736 	bltu	r21,r2,12690 <__alt_mem_Flash_flash_data+0xf4012690>
   12734:	2027883a 	mov	r19,r4
   12738:	a8bf3d1e 	bne	r21,r2,12430 <__alt_mem_Flash_flash_data+0xf4012430>
   1273c:	003f3d06 	br	12434 <__alt_mem_Flash_flash_data+0xf4012434>
   12740:	0007883a 	mov	r3,zero
   12744:	003fe406 	br	126d8 <__alt_mem_Flash_flash_data+0xf40126d8>
   12748:	00800434 	movhi	r2,16
   1274c:	89400234 	orhi	r5,r17,8
   12750:	10bfffc4 	addi	r2,r2,-1
   12754:	e00d883a 	mov	r6,fp
   12758:	288a703a 	and	r5,r5,r2
   1275c:	003e8506 	br	12174 <__alt_mem_Flash_flash_data+0xf4012174>

00012760 <__eqdf2>:
   12760:	2804d53a 	srli	r2,r5,20
   12764:	3806d53a 	srli	r3,r7,20
   12768:	02000434 	movhi	r8,16
   1276c:	423fffc4 	addi	r8,r8,-1
   12770:	1081ffcc 	andi	r2,r2,2047
   12774:	0241ffc4 	movi	r9,2047
   12778:	2a14703a 	and	r10,r5,r8
   1277c:	18c1ffcc 	andi	r3,r3,2047
   12780:	3a10703a 	and	r8,r7,r8
   12784:	280ad7fa 	srli	r5,r5,31
   12788:	380ed7fa 	srli	r7,r7,31
   1278c:	12400f26 	beq	r2,r9,127cc <__eqdf2+0x6c>
   12790:	0241ffc4 	movi	r9,2047
   12794:	1a400326 	beq	r3,r9,127a4 <__eqdf2+0x44>
   12798:	10c00526 	beq	r2,r3,127b0 <__eqdf2+0x50>
   1279c:	00800044 	movi	r2,1
   127a0:	f800283a 	ret
   127a4:	4192b03a 	or	r9,r8,r6
   127a8:	483ffc1e 	bne	r9,zero,1279c <__alt_mem_Flash_flash_data+0xf401279c>
   127ac:	10fffb1e 	bne	r2,r3,1279c <__alt_mem_Flash_flash_data+0xf401279c>
   127b0:	523ffa1e 	bne	r10,r8,1279c <__alt_mem_Flash_flash_data+0xf401279c>
   127b4:	21bff91e 	bne	r4,r6,1279c <__alt_mem_Flash_flash_data+0xf401279c>
   127b8:	29c00826 	beq	r5,r7,127dc <__eqdf2+0x7c>
   127bc:	103ff71e 	bne	r2,zero,1279c <__alt_mem_Flash_flash_data+0xf401279c>
   127c0:	5104b03a 	or	r2,r10,r4
   127c4:	1004c03a 	cmpne	r2,r2,zero
   127c8:	f800283a 	ret
   127cc:	5112b03a 	or	r9,r10,r4
   127d0:	483fef26 	beq	r9,zero,12790 <__alt_mem_Flash_flash_data+0xf4012790>
   127d4:	00800044 	movi	r2,1
   127d8:	f800283a 	ret
   127dc:	0005883a 	mov	r2,zero
   127e0:	f800283a 	ret

000127e4 <__gedf2>:
   127e4:	2804d53a 	srli	r2,r5,20
   127e8:	3806d53a 	srli	r3,r7,20
   127ec:	02000434 	movhi	r8,16
   127f0:	423fffc4 	addi	r8,r8,-1
   127f4:	0241ffc4 	movi	r9,2047
   127f8:	1081ffcc 	andi	r2,r2,2047
   127fc:	2a14703a 	and	r10,r5,r8
   12800:	1a46703a 	and	r3,r3,r9
   12804:	3a10703a 	and	r8,r7,r8
   12808:	280ad7fa 	srli	r5,r5,31
   1280c:	380ed7fa 	srli	r7,r7,31
   12810:	12400b26 	beq	r2,r9,12840 <__gedf2+0x5c>
   12814:	1a401626 	beq	r3,r9,12870 <__gedf2+0x8c>
   12818:	10000c1e 	bne	r2,zero,1284c <__gedf2+0x68>
   1281c:	5112b03a 	or	r9,r10,r4
   12820:	4813003a 	cmpeq	r9,r9,zero
   12824:	4817883a 	mov	r11,r9
   12828:	18000c1e 	bne	r3,zero,1285c <__gedf2+0x78>
   1282c:	4198b03a 	or	r12,r8,r6
   12830:	60000a1e 	bne	r12,zero,1285c <__gedf2+0x78>
   12834:	48001326 	beq	r9,zero,12884 <__gedf2+0xa0>
   12838:	0005883a 	mov	r2,zero
   1283c:	f800283a 	ret
   12840:	5112b03a 	or	r9,r10,r4
   12844:	4800191e 	bne	r9,zero,128ac <__gedf2+0xc8>
   12848:	18800926 	beq	r3,r2,12870 <__gedf2+0x8c>
   1284c:	18000b1e 	bne	r3,zero,1287c <__gedf2+0x98>
   12850:	4192b03a 	or	r9,r8,r6
   12854:	0017883a 	mov	r11,zero
   12858:	48000a26 	beq	r9,zero,12884 <__gedf2+0xa0>
   1285c:	39c03fcc 	andi	r7,r7,255
   12860:	58000726 	beq	r11,zero,12880 <__gedf2+0x9c>
   12864:	3800081e 	bne	r7,zero,12888 <__gedf2+0xa4>
   12868:	00bfffc4 	movi	r2,-1
   1286c:	f800283a 	ret
   12870:	4192b03a 	or	r9,r8,r6
   12874:	48000d1e 	bne	r9,zero,128ac <__gedf2+0xc8>
   12878:	103fe826 	beq	r2,zero,1281c <__alt_mem_Flash_flash_data+0xf401281c>
   1287c:	39c03fcc 	andi	r7,r7,255
   12880:	29c00326 	beq	r5,r7,12890 <__gedf2+0xac>
   12884:	283ff81e 	bne	r5,zero,12868 <__alt_mem_Flash_flash_data+0xf4012868>
   12888:	00800044 	movi	r2,1
   1288c:	f800283a 	ret
   12890:	18bffc16 	blt	r3,r2,12884 <__alt_mem_Flash_flash_data+0xf4012884>
   12894:	10c00316 	blt	r2,r3,128a4 <__gedf2+0xc0>
   12898:	42bffa36 	bltu	r8,r10,12884 <__alt_mem_Flash_flash_data+0xf4012884>
   1289c:	52000526 	beq	r10,r8,128b4 <__gedf2+0xd0>
   128a0:	523fe52e 	bgeu	r10,r8,12838 <__alt_mem_Flash_flash_data+0xf4012838>
   128a4:	283ff026 	beq	r5,zero,12868 <__alt_mem_Flash_flash_data+0xf4012868>
   128a8:	003ff706 	br	12888 <__alt_mem_Flash_flash_data+0xf4012888>
   128ac:	00bfff84 	movi	r2,-2
   128b0:	f800283a 	ret
   128b4:	313ff336 	bltu	r6,r4,12884 <__alt_mem_Flash_flash_data+0xf4012884>
   128b8:	21bfdf2e 	bgeu	r4,r6,12838 <__alt_mem_Flash_flash_data+0xf4012838>
   128bc:	283fea26 	beq	r5,zero,12868 <__alt_mem_Flash_flash_data+0xf4012868>
   128c0:	003ff106 	br	12888 <__alt_mem_Flash_flash_data+0xf4012888>

000128c4 <__ledf2>:
   128c4:	2804d53a 	srli	r2,r5,20
   128c8:	3810d53a 	srli	r8,r7,20
   128cc:	00c00434 	movhi	r3,16
   128d0:	18ffffc4 	addi	r3,r3,-1
   128d4:	0241ffc4 	movi	r9,2047
   128d8:	1081ffcc 	andi	r2,r2,2047
   128dc:	28d4703a 	and	r10,r5,r3
   128e0:	4250703a 	and	r8,r8,r9
   128e4:	38c6703a 	and	r3,r7,r3
   128e8:	280ad7fa 	srli	r5,r5,31
   128ec:	380ed7fa 	srli	r7,r7,31
   128f0:	12400b26 	beq	r2,r9,12920 <__ledf2+0x5c>
   128f4:	42401926 	beq	r8,r9,1295c <__ledf2+0x98>
   128f8:	10000c1e 	bne	r2,zero,1292c <__ledf2+0x68>
   128fc:	5112b03a 	or	r9,r10,r4
   12900:	4813003a 	cmpeq	r9,r9,zero
   12904:	4817883a 	mov	r11,r9
   12908:	40000f26 	beq	r8,zero,12948 <__ledf2+0x84>
   1290c:	39c03fcc 	andi	r7,r7,255
   12910:	58001826 	beq	r11,zero,12974 <__ledf2+0xb0>
   12914:	38000a1e 	bne	r7,zero,12940 <__ledf2+0x7c>
   12918:	00bfffc4 	movi	r2,-1
   1291c:	f800283a 	ret
   12920:	5112b03a 	or	r9,r10,r4
   12924:	48000f1e 	bne	r9,zero,12964 <__ledf2+0xa0>
   12928:	40800c26 	beq	r8,r2,1295c <__ledf2+0x98>
   1292c:	4000101e 	bne	r8,zero,12970 <__ledf2+0xac>
   12930:	1992b03a 	or	r9,r3,r6
   12934:	0017883a 	mov	r11,zero
   12938:	483ff41e 	bne	r9,zero,1290c <__alt_mem_Flash_flash_data+0xf401290c>
   1293c:	283ff61e 	bne	r5,zero,12918 <__alt_mem_Flash_flash_data+0xf4012918>
   12940:	00800044 	movi	r2,1
   12944:	f800283a 	ret
   12948:	1998b03a 	or	r12,r3,r6
   1294c:	603fef1e 	bne	r12,zero,1290c <__alt_mem_Flash_flash_data+0xf401290c>
   12950:	483ffa26 	beq	r9,zero,1293c <__alt_mem_Flash_flash_data+0xf401293c>
   12954:	0005883a 	mov	r2,zero
   12958:	f800283a 	ret
   1295c:	1992b03a 	or	r9,r3,r6
   12960:	48000226 	beq	r9,zero,1296c <__ledf2+0xa8>
   12964:	00800084 	movi	r2,2
   12968:	f800283a 	ret
   1296c:	103fe326 	beq	r2,zero,128fc <__alt_mem_Flash_flash_data+0xf40128fc>
   12970:	39c03fcc 	andi	r7,r7,255
   12974:	29fff11e 	bne	r5,r7,1293c <__alt_mem_Flash_flash_data+0xf401293c>
   12978:	40bff016 	blt	r8,r2,1293c <__alt_mem_Flash_flash_data+0xf401293c>
   1297c:	12000316 	blt	r2,r8,1298c <__ledf2+0xc8>
   12980:	1abfee36 	bltu	r3,r10,1293c <__alt_mem_Flash_flash_data+0xf401293c>
   12984:	50c00326 	beq	r10,r3,12994 <__ledf2+0xd0>
   12988:	50fff22e 	bgeu	r10,r3,12954 <__alt_mem_Flash_flash_data+0xf4012954>
   1298c:	283fe226 	beq	r5,zero,12918 <__alt_mem_Flash_flash_data+0xf4012918>
   12990:	003feb06 	br	12940 <__alt_mem_Flash_flash_data+0xf4012940>
   12994:	313fe936 	bltu	r6,r4,1293c <__alt_mem_Flash_flash_data+0xf401293c>
   12998:	21bfee2e 	bgeu	r4,r6,12954 <__alt_mem_Flash_flash_data+0xf4012954>
   1299c:	283fde26 	beq	r5,zero,12918 <__alt_mem_Flash_flash_data+0xf4012918>
   129a0:	003fe706 	br	12940 <__alt_mem_Flash_flash_data+0xf4012940>

000129a4 <__muldf3>:
   129a4:	defff204 	addi	sp,sp,-56
   129a8:	2804d53a 	srli	r2,r5,20
   129ac:	dd800a15 	stw	r22,40(sp)
   129b0:	282cd7fa 	srli	r22,r5,31
   129b4:	dc000415 	stw	r16,16(sp)
   129b8:	04000434 	movhi	r16,16
   129bc:	df000c15 	stw	fp,48(sp)
   129c0:	dd000815 	stw	r20,32(sp)
   129c4:	dcc00715 	stw	r19,28(sp)
   129c8:	dc800615 	stw	r18,24(sp)
   129cc:	dc400515 	stw	r17,20(sp)
   129d0:	843fffc4 	addi	r16,r16,-1
   129d4:	dfc00d15 	stw	ra,52(sp)
   129d8:	ddc00b15 	stw	r23,44(sp)
   129dc:	dd400915 	stw	r21,36(sp)
   129e0:	1501ffcc 	andi	r20,r2,2047
   129e4:	2023883a 	mov	r17,r4
   129e8:	2025883a 	mov	r18,r4
   129ec:	2c20703a 	and	r16,r5,r16
   129f0:	b027883a 	mov	r19,r22
   129f4:	b7003fcc 	andi	fp,r22,255
   129f8:	a0005926 	beq	r20,zero,12b60 <__muldf3+0x1bc>
   129fc:	0081ffc4 	movi	r2,2047
   12a00:	a0803426 	beq	r20,r2,12ad4 <__muldf3+0x130>
   12a04:	84000434 	orhi	r16,r16,16
   12a08:	2004d77a 	srli	r2,r4,29
   12a0c:	802090fa 	slli	r16,r16,3
   12a10:	202490fa 	slli	r18,r4,3
   12a14:	a53f0044 	addi	r20,r20,-1023
   12a18:	80a0b03a 	or	r16,r16,r2
   12a1c:	002b883a 	mov	r21,zero
   12a20:	0015883a 	mov	r10,zero
   12a24:	3812d53a 	srli	r9,r7,20
   12a28:	3806d7fa 	srli	r3,r7,31
   12a2c:	02000434 	movhi	r8,16
   12a30:	423fffc4 	addi	r8,r8,-1
   12a34:	4941ffcc 	andi	r5,r9,2047
   12a38:	302f883a 	mov	r23,r6
   12a3c:	3a22703a 	and	r17,r7,r8
   12a40:	1ac03fcc 	andi	r11,r3,255
   12a44:	28006226 	beq	r5,zero,12bd0 <__muldf3+0x22c>
   12a48:	0081ffc4 	movi	r2,2047
   12a4c:	28805a26 	beq	r5,r2,12bb8 <__muldf3+0x214>
   12a50:	8a000434 	orhi	r8,r17,16
   12a54:	3004d77a 	srli	r2,r6,29
   12a58:	401090fa 	slli	r8,r8,3
   12a5c:	302e90fa 	slli	r23,r6,3
   12a60:	297f0044 	addi	r5,r5,-1023
   12a64:	40a2b03a 	or	r17,r8,r2
   12a68:	0013883a 	mov	r9,zero
   12a6c:	4d4cb03a 	or	r6,r9,r21
   12a70:	300c90ba 	slli	r6,r6,2
   12a74:	02000074 	movhi	r8,1
   12a78:	420aa504 	addi	r8,r8,10900
   12a7c:	320d883a 	add	r6,r6,r8
   12a80:	31800017 	ldw	r6,0(r6)
   12a84:	a14b883a 	add	r5,r20,r5
   12a88:	1dacf03a 	xor	r22,r3,r22
   12a8c:	2b000044 	addi	r12,r5,1
   12a90:	3000683a 	jmp	r6
   12a94:	00012cd0 	cmplti	zero,zero,1203
   12a98:	00012cbc 	xorhi	zero,zero,1202
   12a9c:	00012cbc 	xorhi	zero,zero,1202
   12aa0:	00012ca8 	cmpgeui	zero,zero,1202
   12aa4:	00012af0 	cmpltui	zero,zero,1195
   12aa8:	00012af0 	cmpltui	zero,zero,1195
   12aac:	00012c90 	cmplti	zero,zero,1202
   12ab0:	00012ca8 	cmpgeui	zero,zero,1202
   12ab4:	00012af0 	cmpltui	zero,zero,1195
   12ab8:	00012c90 	cmplti	zero,zero,1202
   12abc:	00012af0 	cmpltui	zero,zero,1195
   12ac0:	00012ca8 	cmpgeui	zero,zero,1202
   12ac4:	00012af4 	movhi	zero,1195
   12ac8:	00012af4 	movhi	zero,1195
   12acc:	00012af4 	movhi	zero,1195
   12ad0:	00012ecc 	andi	zero,zero,1211
   12ad4:	8104b03a 	or	r2,r16,r4
   12ad8:	10006a1e 	bne	r2,zero,12c84 <__muldf3+0x2e0>
   12adc:	05400204 	movi	r21,8
   12ae0:	0021883a 	mov	r16,zero
   12ae4:	0025883a 	mov	r18,zero
   12ae8:	02800084 	movi	r10,2
   12aec:	003fcd06 	br	12a24 <__alt_mem_Flash_flash_data+0xf4012a24>
   12af0:	b039883a 	mov	fp,r22
   12af4:	00800084 	movi	r2,2
   12af8:	50804e1e 	bne	r10,r2,12c34 <__muldf3+0x290>
   12afc:	e4c0004c 	andi	r19,fp,1
   12b00:	0101ffc4 	movi	r4,2047
   12b04:	0021883a 	mov	r16,zero
   12b08:	0025883a 	mov	r18,zero
   12b0c:	2008953a 	slli	r4,r4,20
   12b10:	98c03fcc 	andi	r3,r19,255
   12b14:	01400434 	movhi	r5,16
   12b18:	297fffc4 	addi	r5,r5,-1
   12b1c:	180697fa 	slli	r3,r3,31
   12b20:	8160703a 	and	r16,r16,r5
   12b24:	8120b03a 	or	r16,r16,r4
   12b28:	80c6b03a 	or	r3,r16,r3
   12b2c:	9005883a 	mov	r2,r18
   12b30:	dfc00d17 	ldw	ra,52(sp)
   12b34:	df000c17 	ldw	fp,48(sp)
   12b38:	ddc00b17 	ldw	r23,44(sp)
   12b3c:	dd800a17 	ldw	r22,40(sp)
   12b40:	dd400917 	ldw	r21,36(sp)
   12b44:	dd000817 	ldw	r20,32(sp)
   12b48:	dcc00717 	ldw	r19,28(sp)
   12b4c:	dc800617 	ldw	r18,24(sp)
   12b50:	dc400517 	ldw	r17,20(sp)
   12b54:	dc000417 	ldw	r16,16(sp)
   12b58:	dec00e04 	addi	sp,sp,56
   12b5c:	f800283a 	ret
   12b60:	8104b03a 	or	r2,r16,r4
   12b64:	10004226 	beq	r2,zero,12c70 <__muldf3+0x2cc>
   12b68:	8000f926 	beq	r16,zero,12f50 <__muldf3+0x5ac>
   12b6c:	8009883a 	mov	r4,r16
   12b70:	d9800315 	stw	r6,12(sp)
   12b74:	d9c00015 	stw	r7,0(sp)
   12b78:	0013b940 	call	13b94 <__clzsi2>
   12b7c:	d9800317 	ldw	r6,12(sp)
   12b80:	d9c00017 	ldw	r7,0(sp)
   12b84:	1007883a 	mov	r3,r2
   12b88:	01000a04 	movi	r4,40
   12b8c:	18bffe04 	addi	r2,r3,-8
   12b90:	20c9c83a 	sub	r4,r4,r3
   12b94:	80a0983a 	sll	r16,r16,r2
   12b98:	8908d83a 	srl	r4,r17,r4
   12b9c:	88a4983a 	sll	r18,r17,r2
   12ba0:	2420b03a 	or	r16,r4,r16
   12ba4:	017f0344 	movi	r5,-1011
   12ba8:	28e9c83a 	sub	r20,r5,r3
   12bac:	002b883a 	mov	r21,zero
   12bb0:	0015883a 	mov	r10,zero
   12bb4:	003f9b06 	br	12a24 <__alt_mem_Flash_flash_data+0xf4012a24>
   12bb8:	8984b03a 	or	r2,r17,r6
   12bbc:	10002a1e 	bne	r2,zero,12c68 <__muldf3+0x2c4>
   12bc0:	0023883a 	mov	r17,zero
   12bc4:	002f883a 	mov	r23,zero
   12bc8:	02400084 	movi	r9,2
   12bcc:	003fa706 	br	12a6c <__alt_mem_Flash_flash_data+0xf4012a6c>
   12bd0:	8984b03a 	or	r2,r17,r6
   12bd4:	10002026 	beq	r2,zero,12c58 <__muldf3+0x2b4>
   12bd8:	8800cc26 	beq	r17,zero,12f0c <__muldf3+0x568>
   12bdc:	8809883a 	mov	r4,r17
   12be0:	d8c00215 	stw	r3,8(sp)
   12be4:	d9800315 	stw	r6,12(sp)
   12be8:	da800015 	stw	r10,0(sp)
   12bec:	dac00115 	stw	r11,4(sp)
   12bf0:	0013b940 	call	13b94 <__clzsi2>
   12bf4:	d8c00217 	ldw	r3,8(sp)
   12bf8:	d9800317 	ldw	r6,12(sp)
   12bfc:	da800017 	ldw	r10,0(sp)
   12c00:	dac00117 	ldw	r11,4(sp)
   12c04:	1009883a 	mov	r4,r2
   12c08:	01400a04 	movi	r5,40
   12c0c:	25fffe04 	addi	r23,r4,-8
   12c10:	290bc83a 	sub	r5,r5,r4
   12c14:	8dd0983a 	sll	r8,r17,r23
   12c18:	314ad83a 	srl	r5,r6,r5
   12c1c:	35ee983a 	sll	r23,r6,r23
   12c20:	2a22b03a 	or	r17,r5,r8
   12c24:	017f0344 	movi	r5,-1011
   12c28:	290bc83a 	sub	r5,r5,r4
   12c2c:	0013883a 	mov	r9,zero
   12c30:	003f8e06 	br	12a6c <__alt_mem_Flash_flash_data+0xf4012a6c>
   12c34:	008000c4 	movi	r2,3
   12c38:	50811d26 	beq	r10,r2,130b0 <__muldf3+0x70c>
   12c3c:	00800044 	movi	r2,1
   12c40:	5080e01e 	bne	r10,r2,12fc4 <__muldf3+0x620>
   12c44:	e0a6703a 	and	r19,fp,r2
   12c48:	0009883a 	mov	r4,zero
   12c4c:	0021883a 	mov	r16,zero
   12c50:	0025883a 	mov	r18,zero
   12c54:	003fad06 	br	12b0c <__alt_mem_Flash_flash_data+0xf4012b0c>
   12c58:	0023883a 	mov	r17,zero
   12c5c:	002f883a 	mov	r23,zero
   12c60:	02400044 	movi	r9,1
   12c64:	003f8106 	br	12a6c <__alt_mem_Flash_flash_data+0xf4012a6c>
   12c68:	024000c4 	movi	r9,3
   12c6c:	003f7f06 	br	12a6c <__alt_mem_Flash_flash_data+0xf4012a6c>
   12c70:	05400104 	movi	r21,4
   12c74:	0021883a 	mov	r16,zero
   12c78:	0025883a 	mov	r18,zero
   12c7c:	02800044 	movi	r10,1
   12c80:	003f6806 	br	12a24 <__alt_mem_Flash_flash_data+0xf4012a24>
   12c84:	05400304 	movi	r21,12
   12c88:	028000c4 	movi	r10,3
   12c8c:	003f6506 	br	12a24 <__alt_mem_Flash_flash_data+0xf4012a24>
   12c90:	04000434 	movhi	r16,16
   12c94:	0027883a 	mov	r19,zero
   12c98:	843fffc4 	addi	r16,r16,-1
   12c9c:	04bfffc4 	movi	r18,-1
   12ca0:	0101ffc4 	movi	r4,2047
   12ca4:	003f9906 	br	12b0c <__alt_mem_Flash_flash_data+0xf4012b0c>
   12ca8:	8821883a 	mov	r16,r17
   12cac:	b825883a 	mov	r18,r23
   12cb0:	5839883a 	mov	fp,r11
   12cb4:	4815883a 	mov	r10,r9
   12cb8:	003f8e06 	br	12af4 <__alt_mem_Flash_flash_data+0xf4012af4>
   12cbc:	8821883a 	mov	r16,r17
   12cc0:	b825883a 	mov	r18,r23
   12cc4:	b039883a 	mov	fp,r22
   12cc8:	4815883a 	mov	r10,r9
   12ccc:	003f8906 	br	12af4 <__alt_mem_Flash_flash_data+0xf4012af4>
   12cd0:	b80cd43a 	srli	r6,r23,16
   12cd4:	9006d43a 	srli	r3,r18,16
   12cd8:	90bfffcc 	andi	r2,r18,65535
   12cdc:	bdffffcc 	andi	r23,r23,65535
   12ce0:	b891383a 	mul	r8,r23,r2
   12ce4:	b8c9383a 	mul	r4,r23,r3
   12ce8:	309b383a 	mul	r13,r6,r2
   12cec:	400ed43a 	srli	r7,r8,16
   12cf0:	30df383a 	mul	r15,r6,r3
   12cf4:	235b883a 	add	r13,r4,r13
   12cf8:	69db883a 	add	r13,r13,r7
   12cfc:	6900022e 	bgeu	r13,r4,12d08 <__muldf3+0x364>
   12d00:	01000074 	movhi	r4,1
   12d04:	791f883a 	add	r15,r15,r4
   12d08:	8828d43a 	srli	r20,r17,16
   12d0c:	8c7fffcc 	andi	r17,r17,65535
   12d10:	888f383a 	mul	r7,r17,r2
   12d14:	88d3383a 	mul	r9,r17,r3
   12d18:	a0a5383a 	mul	r18,r20,r2
   12d1c:	3816d43a 	srli	r11,r7,16
   12d20:	6814943a 	slli	r10,r13,16
   12d24:	4ca5883a 	add	r18,r9,r18
   12d28:	423fffcc 	andi	r8,r8,65535
   12d2c:	92e5883a 	add	r18,r18,r11
   12d30:	6808d43a 	srli	r4,r13,16
   12d34:	5215883a 	add	r10,r10,r8
   12d38:	a0c7383a 	mul	r3,r20,r3
   12d3c:	9240022e 	bgeu	r18,r9,12d48 <__muldf3+0x3a4>
   12d40:	00800074 	movhi	r2,1
   12d44:	1887883a 	add	r3,r3,r2
   12d48:	802ad43a 	srli	r21,r16,16
   12d4c:	80bfffcc 	andi	r2,r16,65535
   12d50:	b893383a 	mul	r9,r23,r2
   12d54:	3091383a 	mul	r8,r6,r2
   12d58:	bd6f383a 	mul	r23,r23,r21
   12d5c:	9026943a 	slli	r19,r18,16
   12d60:	481ad43a 	srli	r13,r9,16
   12d64:	9024d43a 	srli	r18,r18,16
   12d68:	39ffffcc 	andi	r7,r7,65535
   12d6c:	ba11883a 	add	r8,r23,r8
   12d70:	99e7883a 	add	r19,r19,r7
   12d74:	4351883a 	add	r8,r8,r13
   12d78:	1c97883a 	add	r11,r3,r18
   12d7c:	354d383a 	mul	r6,r6,r21
   12d80:	9925883a 	add	r18,r19,r4
   12d84:	45c0022e 	bgeu	r8,r23,12d90 <__muldf3+0x3ec>
   12d88:	00c00074 	movhi	r3,1
   12d8c:	30cd883a 	add	r6,r6,r3
   12d90:	8889383a 	mul	r4,r17,r2
   12d94:	8d63383a 	mul	r17,r17,r21
   12d98:	a085383a 	mul	r2,r20,r2
   12d9c:	200ed43a 	srli	r7,r4,16
   12da0:	401cd43a 	srli	r14,r8,16
   12da4:	401a943a 	slli	r13,r8,16
   12da8:	8885883a 	add	r2,r17,r2
   12dac:	4a3fffcc 	andi	r8,r9,65535
   12db0:	11c5883a 	add	r2,r2,r7
   12db4:	339d883a 	add	r14,r6,r14
   12db8:	6a11883a 	add	r8,r13,r8
   12dbc:	a561383a 	mul	r16,r20,r21
   12dc0:	1440022e 	bgeu	r2,r17,12dcc <__muldf3+0x428>
   12dc4:	00c00074 	movhi	r3,1
   12dc8:	80e1883a 	add	r16,r16,r3
   12dcc:	1006943a 	slli	r3,r2,16
   12dd0:	213fffcc 	andi	r4,r4,65535
   12dd4:	93db883a 	add	r13,r18,r15
   12dd8:	1909883a 	add	r4,r3,r4
   12ddc:	22c7883a 	add	r3,r4,r11
   12de0:	6cd3803a 	cmpltu	r9,r13,r19
   12de4:	6a09883a 	add	r4,r13,r8
   12de8:	1a5b883a 	add	r13,r3,r9
   12dec:	2211803a 	cmpltu	r8,r4,r8
   12df0:	734d883a 	add	r6,r14,r13
   12df4:	100ed43a 	srli	r7,r2,16
   12df8:	6a53803a 	cmpltu	r9,r13,r9
   12dfc:	3205883a 	add	r2,r6,r8
   12e00:	1ac7803a 	cmpltu	r3,r3,r11
   12e04:	1211803a 	cmpltu	r8,r2,r8
   12e08:	48c6b03a 	or	r3,r9,r3
   12e0c:	338d803a 	cmpltu	r6,r6,r14
   12e10:	19c7883a 	add	r3,r3,r7
   12e14:	418cb03a 	or	r6,r8,r6
   12e18:	1987883a 	add	r3,r3,r6
   12e1c:	2024927a 	slli	r18,r4,9
   12e20:	1c07883a 	add	r3,r3,r16
   12e24:	1806927a 	slli	r3,r3,9
   12e28:	1020d5fa 	srli	r16,r2,23
   12e2c:	2008d5fa 	srli	r4,r4,23
   12e30:	9294b03a 	or	r10,r18,r10
   12e34:	1004927a 	slli	r2,r2,9
   12e38:	5024c03a 	cmpne	r18,r10,zero
   12e3c:	1c20b03a 	or	r16,r3,r16
   12e40:	9108b03a 	or	r4,r18,r4
   12e44:	80c0402c 	andhi	r3,r16,256
   12e48:	20a4b03a 	or	r18,r4,r2
   12e4c:	18000726 	beq	r3,zero,12e6c <__muldf3+0x4c8>
   12e50:	9006d07a 	srli	r3,r18,1
   12e54:	800897fa 	slli	r4,r16,31
   12e58:	9080004c 	andi	r2,r18,1
   12e5c:	8020d07a 	srli	r16,r16,1
   12e60:	10c4b03a 	or	r2,r2,r3
   12e64:	1124b03a 	or	r18,r2,r4
   12e68:	600b883a 	mov	r5,r12
   12e6c:	2900ffc4 	addi	r4,r5,1023
   12e70:	01004b0e 	bge	zero,r4,12fa0 <__muldf3+0x5fc>
   12e74:	908001cc 	andi	r2,r18,7
   12e78:	10000726 	beq	r2,zero,12e98 <__muldf3+0x4f4>
   12e7c:	90c003cc 	andi	r3,r18,15
   12e80:	00800104 	movi	r2,4
   12e84:	18800426 	beq	r3,r2,12e98 <__muldf3+0x4f4>
   12e88:	9087883a 	add	r3,r18,r2
   12e8c:	1c85803a 	cmpltu	r2,r3,r18
   12e90:	80a1883a 	add	r16,r16,r2
   12e94:	1825883a 	mov	r18,r3
   12e98:	8080402c 	andhi	r2,r16,256
   12e9c:	10000426 	beq	r2,zero,12eb0 <__muldf3+0x50c>
   12ea0:	00bfc034 	movhi	r2,65280
   12ea4:	10bfffc4 	addi	r2,r2,-1
   12ea8:	29010004 	addi	r4,r5,1024
   12eac:	80a0703a 	and	r16,r16,r2
   12eb0:	0081ff84 	movi	r2,2046
   12eb4:	1100320e 	bge	r2,r4,12f80 <__muldf3+0x5dc>
   12eb8:	b4c0004c 	andi	r19,r22,1
   12ebc:	0101ffc4 	movi	r4,2047
   12ec0:	0021883a 	mov	r16,zero
   12ec4:	0025883a 	mov	r18,zero
   12ec8:	003f1006 	br	12b0c <__alt_mem_Flash_flash_data+0xf4012b0c>
   12ecc:	8080022c 	andhi	r2,r16,8
   12ed0:	10000926 	beq	r2,zero,12ef8 <__muldf3+0x554>
   12ed4:	8880022c 	andhi	r2,r17,8
   12ed8:	1000071e 	bne	r2,zero,12ef8 <__muldf3+0x554>
   12edc:	00800434 	movhi	r2,16
   12ee0:	8c000234 	orhi	r16,r17,8
   12ee4:	10bfffc4 	addi	r2,r2,-1
   12ee8:	1827883a 	mov	r19,r3
   12eec:	80a0703a 	and	r16,r16,r2
   12ef0:	b825883a 	mov	r18,r23
   12ef4:	003f6a06 	br	12ca0 <__alt_mem_Flash_flash_data+0xf4012ca0>
   12ef8:	00800434 	movhi	r2,16
   12efc:	84000234 	orhi	r16,r16,8
   12f00:	10bfffc4 	addi	r2,r2,-1
   12f04:	80a0703a 	and	r16,r16,r2
   12f08:	003f6506 	br	12ca0 <__alt_mem_Flash_flash_data+0xf4012ca0>
   12f0c:	3009883a 	mov	r4,r6
   12f10:	d8c00215 	stw	r3,8(sp)
   12f14:	d9800315 	stw	r6,12(sp)
   12f18:	da800015 	stw	r10,0(sp)
   12f1c:	dac00115 	stw	r11,4(sp)
   12f20:	0013b940 	call	13b94 <__clzsi2>
   12f24:	11000804 	addi	r4,r2,32
   12f28:	014009c4 	movi	r5,39
   12f2c:	d8c00217 	ldw	r3,8(sp)
   12f30:	d9800317 	ldw	r6,12(sp)
   12f34:	da800017 	ldw	r10,0(sp)
   12f38:	dac00117 	ldw	r11,4(sp)
   12f3c:	293f320e 	bge	r5,r4,12c08 <__alt_mem_Flash_flash_data+0xf4012c08>
   12f40:	10bffe04 	addi	r2,r2,-8
   12f44:	b8a2983a 	sll	r17,r23,r2
   12f48:	002f883a 	mov	r23,zero
   12f4c:	003f3506 	br	12c24 <__alt_mem_Flash_flash_data+0xf4012c24>
   12f50:	d9800315 	stw	r6,12(sp)
   12f54:	d9c00015 	stw	r7,0(sp)
   12f58:	0013b940 	call	13b94 <__clzsi2>
   12f5c:	10c00804 	addi	r3,r2,32
   12f60:	010009c4 	movi	r4,39
   12f64:	d9800317 	ldw	r6,12(sp)
   12f68:	d9c00017 	ldw	r7,0(sp)
   12f6c:	20ff060e 	bge	r4,r3,12b88 <__alt_mem_Flash_flash_data+0xf4012b88>
   12f70:	10bffe04 	addi	r2,r2,-8
   12f74:	88a0983a 	sll	r16,r17,r2
   12f78:	0025883a 	mov	r18,zero
   12f7c:	003f0906 	br	12ba4 <__alt_mem_Flash_flash_data+0xf4012ba4>
   12f80:	9004d0fa 	srli	r2,r18,3
   12f84:	8024977a 	slli	r18,r16,29
   12f88:	8020927a 	slli	r16,r16,9
   12f8c:	2101ffcc 	andi	r4,r4,2047
   12f90:	90a4b03a 	or	r18,r18,r2
   12f94:	8020d33a 	srli	r16,r16,12
   12f98:	b4c0004c 	andi	r19,r22,1
   12f9c:	003edb06 	br	12b0c <__alt_mem_Flash_flash_data+0xf4012b0c>
   12fa0:	00ff0084 	movi	r3,-1022
   12fa4:	1947c83a 	sub	r3,r3,r5
   12fa8:	00800e04 	movi	r2,56
   12fac:	10c0080e 	bge	r2,r3,12fd0 <__muldf3+0x62c>
   12fb0:	b4c0004c 	andi	r19,r22,1
   12fb4:	0009883a 	mov	r4,zero
   12fb8:	0021883a 	mov	r16,zero
   12fbc:	0025883a 	mov	r18,zero
   12fc0:	003ed206 	br	12b0c <__alt_mem_Flash_flash_data+0xf4012b0c>
   12fc4:	600b883a 	mov	r5,r12
   12fc8:	e02d883a 	mov	r22,fp
   12fcc:	003fa706 	br	12e6c <__alt_mem_Flash_flash_data+0xf4012e6c>
   12fd0:	008007c4 	movi	r2,31
   12fd4:	10c01816 	blt	r2,r3,13038 <__muldf3+0x694>
   12fd8:	29410784 	addi	r5,r5,1054
   12fdc:	8144983a 	sll	r2,r16,r5
   12fe0:	90c8d83a 	srl	r4,r18,r3
   12fe4:	914a983a 	sll	r5,r18,r5
   12fe8:	80c6d83a 	srl	r3,r16,r3
   12fec:	2088b03a 	or	r4,r4,r2
   12ff0:	2804c03a 	cmpne	r2,r5,zero
   12ff4:	2084b03a 	or	r2,r4,r2
   12ff8:	110001cc 	andi	r4,r2,7
   12ffc:	20000726 	beq	r4,zero,1301c <__muldf3+0x678>
   13000:	114003cc 	andi	r5,r2,15
   13004:	01000104 	movi	r4,4
   13008:	29000426 	beq	r5,r4,1301c <__muldf3+0x678>
   1300c:	11000104 	addi	r4,r2,4
   13010:	2085803a 	cmpltu	r2,r4,r2
   13014:	1887883a 	add	r3,r3,r2
   13018:	2005883a 	mov	r2,r4
   1301c:	1900202c 	andhi	r4,r3,128
   13020:	20001826 	beq	r4,zero,13084 <__muldf3+0x6e0>
   13024:	b4c0004c 	andi	r19,r22,1
   13028:	01000044 	movi	r4,1
   1302c:	0021883a 	mov	r16,zero
   13030:	0025883a 	mov	r18,zero
   13034:	003eb506 	br	12b0c <__alt_mem_Flash_flash_data+0xf4012b0c>
   13038:	00bef884 	movi	r2,-1054
   1303c:	1145c83a 	sub	r2,r2,r5
   13040:	8088d83a 	srl	r4,r16,r2
   13044:	00800804 	movi	r2,32
   13048:	18801726 	beq	r3,r2,130a8 <__muldf3+0x704>
   1304c:	28810f84 	addi	r2,r5,1086
   13050:	8084983a 	sll	r2,r16,r2
   13054:	1484b03a 	or	r2,r2,r18
   13058:	1004c03a 	cmpne	r2,r2,zero
   1305c:	1104b03a 	or	r2,r2,r4
   13060:	10c001cc 	andi	r3,r2,7
   13064:	18000b1e 	bne	r3,zero,13094 <__muldf3+0x6f0>
   13068:	0021883a 	mov	r16,zero
   1306c:	1004d0fa 	srli	r2,r2,3
   13070:	b4c0004c 	andi	r19,r22,1
   13074:	0009883a 	mov	r4,zero
   13078:	10e4b03a 	or	r18,r2,r3
   1307c:	003ea306 	br	12b0c <__alt_mem_Flash_flash_data+0xf4012b0c>
   13080:	0007883a 	mov	r3,zero
   13084:	1820927a 	slli	r16,r3,9
   13088:	1806977a 	slli	r3,r3,29
   1308c:	8020d33a 	srli	r16,r16,12
   13090:	003ff606 	br	1306c <__alt_mem_Flash_flash_data+0xf401306c>
   13094:	110003cc 	andi	r4,r2,15
   13098:	00c00104 	movi	r3,4
   1309c:	20fff826 	beq	r4,r3,13080 <__alt_mem_Flash_flash_data+0xf4013080>
   130a0:	0007883a 	mov	r3,zero
   130a4:	003fd906 	br	1300c <__alt_mem_Flash_flash_data+0xf401300c>
   130a8:	0005883a 	mov	r2,zero
   130ac:	003fe906 	br	13054 <__alt_mem_Flash_flash_data+0xf4013054>
   130b0:	00800434 	movhi	r2,16
   130b4:	84000234 	orhi	r16,r16,8
   130b8:	10bfffc4 	addi	r2,r2,-1
   130bc:	e4c0004c 	andi	r19,fp,1
   130c0:	80a0703a 	and	r16,r16,r2
   130c4:	003ef606 	br	12ca0 <__alt_mem_Flash_flash_data+0xf4012ca0>

000130c8 <__subdf3>:
   130c8:	00c00434 	movhi	r3,16
   130cc:	18ffffc4 	addi	r3,r3,-1
   130d0:	defffb04 	addi	sp,sp,-20
   130d4:	28d2703a 	and	r9,r5,r3
   130d8:	3814d53a 	srli	r10,r7,20
   130dc:	38c6703a 	and	r3,r7,r3
   130e0:	3004d77a 	srli	r2,r6,29
   130e4:	dc800215 	stw	r18,8(sp)
   130e8:	dc000015 	stw	r16,0(sp)
   130ec:	2824d7fa 	srli	r18,r5,31
   130f0:	2820d53a 	srli	r16,r5,20
   130f4:	481290fa 	slli	r9,r9,3
   130f8:	200ad77a 	srli	r5,r4,29
   130fc:	180690fa 	slli	r3,r3,3
   13100:	dc400115 	stw	r17,4(sp)
   13104:	dfc00415 	stw	ra,16(sp)
   13108:	202290fa 	slli	r17,r4,3
   1310c:	dcc00315 	stw	r19,12(sp)
   13110:	5281ffcc 	andi	r10,r10,2047
   13114:	0101ffc4 	movi	r4,2047
   13118:	9011883a 	mov	r8,r18
   1311c:	8401ffcc 	andi	r16,r16,2047
   13120:	94803fcc 	andi	r18,r18,255
   13124:	494ab03a 	or	r5,r9,r5
   13128:	380ed7fa 	srli	r7,r7,31
   1312c:	1886b03a 	or	r3,r3,r2
   13130:	300c90fa 	slli	r6,r6,3
   13134:	51009026 	beq	r10,r4,13378 <__subdf3+0x2b0>
   13138:	39c0005c 	xori	r7,r7,1
   1313c:	8285c83a 	sub	r2,r16,r10
   13140:	91c06f26 	beq	r18,r7,13300 <__subdf3+0x238>
   13144:	0080b10e 	bge	zero,r2,1340c <__subdf3+0x344>
   13148:	50002a1e 	bne	r10,zero,131f4 <__subdf3+0x12c>
   1314c:	1988b03a 	or	r4,r3,r6
   13150:	2000941e 	bne	r4,zero,133a4 <__subdf3+0x2dc>
   13154:	888001cc 	andi	r2,r17,7
   13158:	10005b26 	beq	r2,zero,132c8 <__subdf3+0x200>
   1315c:	88c003cc 	andi	r3,r17,15
   13160:	00800104 	movi	r2,4
   13164:	18805826 	beq	r3,r2,132c8 <__subdf3+0x200>
   13168:	88c00104 	addi	r3,r17,4
   1316c:	1c63803a 	cmpltu	r17,r3,r17
   13170:	2c4b883a 	add	r5,r5,r17
   13174:	2880202c 	andhi	r2,r5,128
   13178:	9200004c 	andi	r8,r18,1
   1317c:	1823883a 	mov	r17,r3
   13180:	10005426 	beq	r2,zero,132d4 <__subdf3+0x20c>
   13184:	84000044 	addi	r16,r16,1
   13188:	0081ffc4 	movi	r2,2047
   1318c:	8080bf26 	beq	r16,r2,1348c <__subdf3+0x3c4>
   13190:	013fe034 	movhi	r4,65408
   13194:	213fffc4 	addi	r4,r4,-1
   13198:	290a703a 	and	r5,r5,r4
   1319c:	2804977a 	slli	r2,r5,29
   131a0:	280a927a 	slli	r5,r5,9
   131a4:	8822d0fa 	srli	r17,r17,3
   131a8:	8401ffcc 	andi	r16,r16,2047
   131ac:	2808d33a 	srli	r4,r5,12
   131b0:	1444b03a 	or	r2,r2,r17
   131b4:	8401ffcc 	andi	r16,r16,2047
   131b8:	800a953a 	slli	r5,r16,20
   131bc:	40c03fcc 	andi	r3,r8,255
   131c0:	04000434 	movhi	r16,16
   131c4:	180697fa 	slli	r3,r3,31
   131c8:	843fffc4 	addi	r16,r16,-1
   131cc:	2420703a 	and	r16,r4,r16
   131d0:	8160b03a 	or	r16,r16,r5
   131d4:	80c6b03a 	or	r3,r16,r3
   131d8:	dfc00417 	ldw	ra,16(sp)
   131dc:	dcc00317 	ldw	r19,12(sp)
   131e0:	dc800217 	ldw	r18,8(sp)
   131e4:	dc400117 	ldw	r17,4(sp)
   131e8:	dc000017 	ldw	r16,0(sp)
   131ec:	dec00504 	addi	sp,sp,20
   131f0:	f800283a 	ret
   131f4:	0101ffc4 	movi	r4,2047
   131f8:	813fd626 	beq	r16,r4,13154 <__alt_mem_Flash_flash_data+0xf4013154>
   131fc:	18c02034 	orhi	r3,r3,128
   13200:	01000e04 	movi	r4,56
   13204:	2080a416 	blt	r4,r2,13498 <__subdf3+0x3d0>
   13208:	010007c4 	movi	r4,31
   1320c:	2080c716 	blt	r4,r2,1352c <__subdf3+0x464>
   13210:	01000804 	movi	r4,32
   13214:	2089c83a 	sub	r4,r4,r2
   13218:	1910983a 	sll	r8,r3,r4
   1321c:	308ed83a 	srl	r7,r6,r2
   13220:	3108983a 	sll	r4,r6,r4
   13224:	1884d83a 	srl	r2,r3,r2
   13228:	41ccb03a 	or	r6,r8,r7
   1322c:	2008c03a 	cmpne	r4,r4,zero
   13230:	310cb03a 	or	r6,r6,r4
   13234:	898dc83a 	sub	r6,r17,r6
   13238:	89a3803a 	cmpltu	r17,r17,r6
   1323c:	288bc83a 	sub	r5,r5,r2
   13240:	2c4bc83a 	sub	r5,r5,r17
   13244:	3023883a 	mov	r17,r6
   13248:	2880202c 	andhi	r2,r5,128
   1324c:	10006b26 	beq	r2,zero,133fc <__subdf3+0x334>
   13250:	04c02034 	movhi	r19,128
   13254:	9cffffc4 	addi	r19,r19,-1
   13258:	2ce6703a 	and	r19,r5,r19
   1325c:	98007c26 	beq	r19,zero,13450 <__subdf3+0x388>
   13260:	9809883a 	mov	r4,r19
   13264:	0013b940 	call	13b94 <__clzsi2>
   13268:	10fffe04 	addi	r3,r2,-8
   1326c:	010007c4 	movi	r4,31
   13270:	20c07d16 	blt	r4,r3,13468 <__subdf3+0x3a0>
   13274:	01400a04 	movi	r5,40
   13278:	2885c83a 	sub	r2,r5,r2
   1327c:	888ad83a 	srl	r5,r17,r2
   13280:	98e6983a 	sll	r19,r19,r3
   13284:	88e2983a 	sll	r17,r17,r3
   13288:	2ce6b03a 	or	r19,r5,r19
   1328c:	1c007a16 	blt	r3,r16,13478 <__subdf3+0x3b0>
   13290:	1c21c83a 	sub	r16,r3,r16
   13294:	81400044 	addi	r5,r16,1
   13298:	00c007c4 	movi	r3,31
   1329c:	19409616 	blt	r3,r5,134f8 <__subdf3+0x430>
   132a0:	1c21c83a 	sub	r16,r3,r16
   132a4:	8c08983a 	sll	r4,r17,r16
   132a8:	8946d83a 	srl	r3,r17,r5
   132ac:	9c20983a 	sll	r16,r19,r16
   132b0:	2008c03a 	cmpne	r4,r4,zero
   132b4:	994ad83a 	srl	r5,r19,r5
   132b8:	1c06b03a 	or	r3,r3,r16
   132bc:	1922b03a 	or	r17,r3,r4
   132c0:	0021883a 	mov	r16,zero
   132c4:	003fa306 	br	13154 <__alt_mem_Flash_flash_data+0xf4013154>
   132c8:	2880202c 	andhi	r2,r5,128
   132cc:	9200004c 	andi	r8,r18,1
   132d0:	103fac1e 	bne	r2,zero,13184 <__alt_mem_Flash_flash_data+0xf4013184>
   132d4:	2804977a 	slli	r2,r5,29
   132d8:	8822d0fa 	srli	r17,r17,3
   132dc:	00c1ffc4 	movi	r3,2047
   132e0:	280ad0fa 	srli	r5,r5,3
   132e4:	1444b03a 	or	r2,r2,r17
   132e8:	80c02726 	beq	r16,r3,13388 <__subdf3+0x2c0>
   132ec:	01000434 	movhi	r4,16
   132f0:	213fffc4 	addi	r4,r4,-1
   132f4:	80e0703a 	and	r16,r16,r3
   132f8:	2908703a 	and	r4,r5,r4
   132fc:	003fad06 	br	131b4 <__alt_mem_Flash_flash_data+0xf40131b4>
   13300:	0080690e 	bge	zero,r2,134a8 <__subdf3+0x3e0>
   13304:	50002f26 	beq	r10,zero,133c4 <__subdf3+0x2fc>
   13308:	0101ffc4 	movi	r4,2047
   1330c:	813f9126 	beq	r16,r4,13154 <__alt_mem_Flash_flash_data+0xf4013154>
   13310:	18c02034 	orhi	r3,r3,128
   13314:	01000e04 	movi	r4,56
   13318:	2080b00e 	bge	r4,r2,135dc <__subdf3+0x514>
   1331c:	198cb03a 	or	r6,r3,r6
   13320:	300ec03a 	cmpne	r7,r6,zero
   13324:	0005883a 	mov	r2,zero
   13328:	3c4f883a 	add	r7,r7,r17
   1332c:	3c63803a 	cmpltu	r17,r7,r17
   13330:	114b883a 	add	r5,r2,r5
   13334:	2c4b883a 	add	r5,r5,r17
   13338:	3823883a 	mov	r17,r7
   1333c:	2880202c 	andhi	r2,r5,128
   13340:	10002e26 	beq	r2,zero,133fc <__subdf3+0x334>
   13344:	84000044 	addi	r16,r16,1
   13348:	0081ffc4 	movi	r2,2047
   1334c:	8080de26 	beq	r16,r2,136c8 <__subdf3+0x600>
   13350:	00bfe034 	movhi	r2,65408
   13354:	10bfffc4 	addi	r2,r2,-1
   13358:	288a703a 	and	r5,r5,r2
   1335c:	880cd07a 	srli	r6,r17,1
   13360:	280897fa 	slli	r4,r5,31
   13364:	88c0004c 	andi	r3,r17,1
   13368:	30e2b03a 	or	r17,r6,r3
   1336c:	280ad07a 	srli	r5,r5,1
   13370:	8922b03a 	or	r17,r17,r4
   13374:	003f7706 	br	13154 <__alt_mem_Flash_flash_data+0xf4013154>
   13378:	1984b03a 	or	r2,r3,r6
   1337c:	103f6e26 	beq	r2,zero,13138 <__alt_mem_Flash_flash_data+0xf4013138>
   13380:	39c03fcc 	andi	r7,r7,255
   13384:	003f6d06 	br	1313c <__alt_mem_Flash_flash_data+0xf401313c>
   13388:	1146b03a 	or	r3,r2,r5
   1338c:	18003f26 	beq	r3,zero,1348c <__subdf3+0x3c4>
   13390:	00c00434 	movhi	r3,16
   13394:	29000234 	orhi	r4,r5,8
   13398:	18ffffc4 	addi	r3,r3,-1
   1339c:	20c8703a 	and	r4,r4,r3
   133a0:	003f8406 	br	131b4 <__alt_mem_Flash_flash_data+0xf40131b4>
   133a4:	10bfffc4 	addi	r2,r2,-1
   133a8:	1000501e 	bne	r2,zero,134ec <__subdf3+0x424>
   133ac:	898fc83a 	sub	r7,r17,r6
   133b0:	89e3803a 	cmpltu	r17,r17,r7
   133b4:	28cbc83a 	sub	r5,r5,r3
   133b8:	2c4bc83a 	sub	r5,r5,r17
   133bc:	3823883a 	mov	r17,r7
   133c0:	003fa106 	br	13248 <__alt_mem_Flash_flash_data+0xf4013248>
   133c4:	1988b03a 	or	r4,r3,r6
   133c8:	203f6226 	beq	r4,zero,13154 <__alt_mem_Flash_flash_data+0xf4013154>
   133cc:	10bfffc4 	addi	r2,r2,-1
   133d0:	10009b1e 	bne	r2,zero,13640 <__subdf3+0x578>
   133d4:	344d883a 	add	r6,r6,r17
   133d8:	3463803a 	cmpltu	r17,r6,r17
   133dc:	194b883a 	add	r5,r3,r5
   133e0:	2c4b883a 	add	r5,r5,r17
   133e4:	3023883a 	mov	r17,r6
   133e8:	003fd406 	br	1333c <__alt_mem_Flash_flash_data+0xf401333c>
   133ec:	1106b03a 	or	r3,r2,r4
   133f0:	1800b426 	beq	r3,zero,136c4 <__subdf3+0x5fc>
   133f4:	100b883a 	mov	r5,r2
   133f8:	2023883a 	mov	r17,r4
   133fc:	888001cc 	andi	r2,r17,7
   13400:	103f561e 	bne	r2,zero,1315c <__alt_mem_Flash_flash_data+0xf401315c>
   13404:	9200004c 	andi	r8,r18,1
   13408:	003fb206 	br	132d4 <__alt_mem_Flash_flash_data+0xf40132d4>
   1340c:	1000531e 	bne	r2,zero,1355c <__subdf3+0x494>
   13410:	80800044 	addi	r2,r16,1
   13414:	1081ffcc 	andi	r2,r2,2047
   13418:	01000044 	movi	r4,1
   1341c:	2080a00e 	bge	r4,r2,136a0 <__subdf3+0x5d8>
   13420:	8985c83a 	sub	r2,r17,r6
   13424:	8889803a 	cmpltu	r4,r17,r2
   13428:	28e7c83a 	sub	r19,r5,r3
   1342c:	9927c83a 	sub	r19,r19,r4
   13430:	9900202c 	andhi	r4,r19,128
   13434:	20006226 	beq	r4,zero,135c0 <__subdf3+0x4f8>
   13438:	3463c83a 	sub	r17,r6,r17
   1343c:	194bc83a 	sub	r5,r3,r5
   13440:	344d803a 	cmpltu	r6,r6,r17
   13444:	29a7c83a 	sub	r19,r5,r6
   13448:	3825883a 	mov	r18,r7
   1344c:	983f841e 	bne	r19,zero,13260 <__alt_mem_Flash_flash_data+0xf4013260>
   13450:	8809883a 	mov	r4,r17
   13454:	0013b940 	call	13b94 <__clzsi2>
   13458:	10800804 	addi	r2,r2,32
   1345c:	10fffe04 	addi	r3,r2,-8
   13460:	010007c4 	movi	r4,31
   13464:	20ff830e 	bge	r4,r3,13274 <__alt_mem_Flash_flash_data+0xf4013274>
   13468:	14fff604 	addi	r19,r2,-40
   1346c:	8ce6983a 	sll	r19,r17,r19
   13470:	0023883a 	mov	r17,zero
   13474:	1c3f860e 	bge	r3,r16,13290 <__alt_mem_Flash_flash_data+0xf4013290>
   13478:	017fe034 	movhi	r5,65408
   1347c:	297fffc4 	addi	r5,r5,-1
   13480:	80e1c83a 	sub	r16,r16,r3
   13484:	994a703a 	and	r5,r19,r5
   13488:	003f3206 	br	13154 <__alt_mem_Flash_flash_data+0xf4013154>
   1348c:	0009883a 	mov	r4,zero
   13490:	0005883a 	mov	r2,zero
   13494:	003f4706 	br	131b4 <__alt_mem_Flash_flash_data+0xf40131b4>
   13498:	198cb03a 	or	r6,r3,r6
   1349c:	300cc03a 	cmpne	r6,r6,zero
   134a0:	0005883a 	mov	r2,zero
   134a4:	003f6306 	br	13234 <__alt_mem_Flash_flash_data+0xf4013234>
   134a8:	10009d1e 	bne	r2,zero,13720 <__subdf3+0x658>
   134ac:	81c00044 	addi	r7,r16,1
   134b0:	3881ffcc 	andi	r2,r7,2047
   134b4:	02400044 	movi	r9,1
   134b8:	4880680e 	bge	r9,r2,1365c <__subdf3+0x594>
   134bc:	0081ffc4 	movi	r2,2047
   134c0:	3880ae26 	beq	r7,r2,1377c <__subdf3+0x6b4>
   134c4:	344d883a 	add	r6,r6,r17
   134c8:	3463803a 	cmpltu	r17,r6,r17
   134cc:	194b883a 	add	r5,r3,r5
   134d0:	2c4b883a 	add	r5,r5,r17
   134d4:	282297fa 	slli	r17,r5,31
   134d8:	300cd07a 	srli	r6,r6,1
   134dc:	280ad07a 	srli	r5,r5,1
   134e0:	3821883a 	mov	r16,r7
   134e4:	89a2b03a 	or	r17,r17,r6
   134e8:	003f1a06 	br	13154 <__alt_mem_Flash_flash_data+0xf4013154>
   134ec:	0101ffc4 	movi	r4,2047
   134f0:	813f431e 	bne	r16,r4,13200 <__alt_mem_Flash_flash_data+0xf4013200>
   134f4:	003f1706 	br	13154 <__alt_mem_Flash_flash_data+0xf4013154>
   134f8:	80bff844 	addi	r2,r16,-31
   134fc:	00c00804 	movi	r3,32
   13500:	9884d83a 	srl	r2,r19,r2
   13504:	28c05126 	beq	r5,r3,1364c <__subdf3+0x584>
   13508:	00c00fc4 	movi	r3,63
   1350c:	1c21c83a 	sub	r16,r3,r16
   13510:	9c26983a 	sll	r19,r19,r16
   13514:	9c62b03a 	or	r17,r19,r17
   13518:	8822c03a 	cmpne	r17,r17,zero
   1351c:	88a2b03a 	or	r17,r17,r2
   13520:	000b883a 	mov	r5,zero
   13524:	0021883a 	mov	r16,zero
   13528:	003fb406 	br	133fc <__alt_mem_Flash_flash_data+0xf40133fc>
   1352c:	113ff804 	addi	r4,r2,-32
   13530:	01c00804 	movi	r7,32
   13534:	1908d83a 	srl	r4,r3,r4
   13538:	11c04626 	beq	r2,r7,13654 <__subdf3+0x58c>
   1353c:	01c01004 	movi	r7,64
   13540:	3885c83a 	sub	r2,r7,r2
   13544:	1884983a 	sll	r2,r3,r2
   13548:	118cb03a 	or	r6,r2,r6
   1354c:	300cc03a 	cmpne	r6,r6,zero
   13550:	310cb03a 	or	r6,r6,r4
   13554:	0005883a 	mov	r2,zero
   13558:	003f3606 	br	13234 <__alt_mem_Flash_flash_data+0xf4013234>
   1355c:	80002b26 	beq	r16,zero,1360c <__subdf3+0x544>
   13560:	0101ffc4 	movi	r4,2047
   13564:	51006926 	beq	r10,r4,1370c <__subdf3+0x644>
   13568:	0085c83a 	sub	r2,zero,r2
   1356c:	29402034 	orhi	r5,r5,128
   13570:	01000e04 	movi	r4,56
   13574:	20807d16 	blt	r4,r2,1376c <__subdf3+0x6a4>
   13578:	010007c4 	movi	r4,31
   1357c:	2080d916 	blt	r4,r2,138e4 <__subdf3+0x81c>
   13580:	01000804 	movi	r4,32
   13584:	2089c83a 	sub	r4,r4,r2
   13588:	2912983a 	sll	r9,r5,r4
   1358c:	8890d83a 	srl	r8,r17,r2
   13590:	8908983a 	sll	r4,r17,r4
   13594:	2884d83a 	srl	r2,r5,r2
   13598:	4a22b03a 	or	r17,r9,r8
   1359c:	2008c03a 	cmpne	r4,r4,zero
   135a0:	8922b03a 	or	r17,r17,r4
   135a4:	3463c83a 	sub	r17,r6,r17
   135a8:	1885c83a 	sub	r2,r3,r2
   135ac:	344d803a 	cmpltu	r6,r6,r17
   135b0:	118bc83a 	sub	r5,r2,r6
   135b4:	5021883a 	mov	r16,r10
   135b8:	3825883a 	mov	r18,r7
   135bc:	003f2206 	br	13248 <__alt_mem_Flash_flash_data+0xf4013248>
   135c0:	9886b03a 	or	r3,r19,r2
   135c4:	18001c1e 	bne	r3,zero,13638 <__subdf3+0x570>
   135c8:	0011883a 	mov	r8,zero
   135cc:	000b883a 	mov	r5,zero
   135d0:	0023883a 	mov	r17,zero
   135d4:	0021883a 	mov	r16,zero
   135d8:	003f3e06 	br	132d4 <__alt_mem_Flash_flash_data+0xf40132d4>
   135dc:	010007c4 	movi	r4,31
   135e0:	20803c16 	blt	r4,r2,136d4 <__subdf3+0x60c>
   135e4:	01000804 	movi	r4,32
   135e8:	2089c83a 	sub	r4,r4,r2
   135ec:	1912983a 	sll	r9,r3,r4
   135f0:	308ed83a 	srl	r7,r6,r2
   135f4:	3108983a 	sll	r4,r6,r4
   135f8:	1884d83a 	srl	r2,r3,r2
   135fc:	49ceb03a 	or	r7,r9,r7
   13600:	2008c03a 	cmpne	r4,r4,zero
   13604:	390eb03a 	or	r7,r7,r4
   13608:	003f4706 	br	13328 <__alt_mem_Flash_flash_data+0xf4013328>
   1360c:	2c48b03a 	or	r4,r5,r17
   13610:	20003e26 	beq	r4,zero,1370c <__subdf3+0x644>
   13614:	0084303a 	nor	r2,zero,r2
   13618:	10003a1e 	bne	r2,zero,13704 <__subdf3+0x63c>
   1361c:	3463c83a 	sub	r17,r6,r17
   13620:	194bc83a 	sub	r5,r3,r5
   13624:	344d803a 	cmpltu	r6,r6,r17
   13628:	298bc83a 	sub	r5,r5,r6
   1362c:	5021883a 	mov	r16,r10
   13630:	3825883a 	mov	r18,r7
   13634:	003f0406 	br	13248 <__alt_mem_Flash_flash_data+0xf4013248>
   13638:	1023883a 	mov	r17,r2
   1363c:	003f0706 	br	1325c <__alt_mem_Flash_flash_data+0xf401325c>
   13640:	0101ffc4 	movi	r4,2047
   13644:	813f331e 	bne	r16,r4,13314 <__alt_mem_Flash_flash_data+0xf4013314>
   13648:	003ec206 	br	13154 <__alt_mem_Flash_flash_data+0xf4013154>
   1364c:	0027883a 	mov	r19,zero
   13650:	003fb006 	br	13514 <__alt_mem_Flash_flash_data+0xf4013514>
   13654:	0005883a 	mov	r2,zero
   13658:	003fbb06 	br	13548 <__alt_mem_Flash_flash_data+0xf4013548>
   1365c:	2c44b03a 	or	r2,r5,r17
   13660:	80008b1e 	bne	r16,zero,13890 <__subdf3+0x7c8>
   13664:	1000b526 	beq	r2,zero,1393c <__subdf3+0x874>
   13668:	1984b03a 	or	r2,r3,r6
   1366c:	103eb926 	beq	r2,zero,13154 <__alt_mem_Flash_flash_data+0xf4013154>
   13670:	3449883a 	add	r4,r6,r17
   13674:	2463803a 	cmpltu	r17,r4,r17
   13678:	194b883a 	add	r5,r3,r5
   1367c:	2c4b883a 	add	r5,r5,r17
   13680:	2880202c 	andhi	r2,r5,128
   13684:	2023883a 	mov	r17,r4
   13688:	103f5c26 	beq	r2,zero,133fc <__alt_mem_Flash_flash_data+0xf40133fc>
   1368c:	00bfe034 	movhi	r2,65408
   13690:	10bfffc4 	addi	r2,r2,-1
   13694:	4821883a 	mov	r16,r9
   13698:	288a703a 	and	r5,r5,r2
   1369c:	003ead06 	br	13154 <__alt_mem_Flash_flash_data+0xf4013154>
   136a0:	2c44b03a 	or	r2,r5,r17
   136a4:	8000291e 	bne	r16,zero,1374c <__subdf3+0x684>
   136a8:	10004f1e 	bne	r2,zero,137e8 <__subdf3+0x720>
   136ac:	1984b03a 	or	r2,r3,r6
   136b0:	10000426 	beq	r2,zero,136c4 <__subdf3+0x5fc>
   136b4:	180b883a 	mov	r5,r3
   136b8:	3023883a 	mov	r17,r6
   136bc:	3825883a 	mov	r18,r7
   136c0:	003ea406 	br	13154 <__alt_mem_Flash_flash_data+0xf4013154>
   136c4:	0011883a 	mov	r8,zero
   136c8:	000b883a 	mov	r5,zero
   136cc:	0023883a 	mov	r17,zero
   136d0:	003f0006 	br	132d4 <__alt_mem_Flash_flash_data+0xf40132d4>
   136d4:	11fff804 	addi	r7,r2,-32
   136d8:	19c8d83a 	srl	r4,r3,r7
   136dc:	01c00804 	movi	r7,32
   136e0:	11c07e26 	beq	r2,r7,138dc <__subdf3+0x814>
   136e4:	01c01004 	movi	r7,64
   136e8:	3885c83a 	sub	r2,r7,r2
   136ec:	1884983a 	sll	r2,r3,r2
   136f0:	118cb03a 	or	r6,r2,r6
   136f4:	300ec03a 	cmpne	r7,r6,zero
   136f8:	390eb03a 	or	r7,r7,r4
   136fc:	0005883a 	mov	r2,zero
   13700:	003f0906 	br	13328 <__alt_mem_Flash_flash_data+0xf4013328>
   13704:	0101ffc4 	movi	r4,2047
   13708:	513f991e 	bne	r10,r4,13570 <__alt_mem_Flash_flash_data+0xf4013570>
   1370c:	180b883a 	mov	r5,r3
   13710:	3023883a 	mov	r17,r6
   13714:	5021883a 	mov	r16,r10
   13718:	3825883a 	mov	r18,r7
   1371c:	003e8d06 	br	13154 <__alt_mem_Flash_flash_data+0xf4013154>
   13720:	80001a1e 	bne	r16,zero,1378c <__subdf3+0x6c4>
   13724:	2c48b03a 	or	r4,r5,r17
   13728:	20005526 	beq	r4,zero,13880 <__subdf3+0x7b8>
   1372c:	0084303a 	nor	r2,zero,r2
   13730:	1000511e 	bne	r2,zero,13878 <__subdf3+0x7b0>
   13734:	89a3883a 	add	r17,r17,r6
   13738:	194b883a 	add	r5,r3,r5
   1373c:	898d803a 	cmpltu	r6,r17,r6
   13740:	298b883a 	add	r5,r5,r6
   13744:	5021883a 	mov	r16,r10
   13748:	003efc06 	br	1333c <__alt_mem_Flash_flash_data+0xf401333c>
   1374c:	1000341e 	bne	r2,zero,13820 <__subdf3+0x758>
   13750:	1984b03a 	or	r2,r3,r6
   13754:	10006f26 	beq	r2,zero,13914 <__subdf3+0x84c>
   13758:	180b883a 	mov	r5,r3
   1375c:	3023883a 	mov	r17,r6
   13760:	3825883a 	mov	r18,r7
   13764:	0401ffc4 	movi	r16,2047
   13768:	003e7a06 	br	13154 <__alt_mem_Flash_flash_data+0xf4013154>
   1376c:	2c62b03a 	or	r17,r5,r17
   13770:	8822c03a 	cmpne	r17,r17,zero
   13774:	0005883a 	mov	r2,zero
   13778:	003f8a06 	br	135a4 <__alt_mem_Flash_flash_data+0xf40135a4>
   1377c:	3821883a 	mov	r16,r7
   13780:	000b883a 	mov	r5,zero
   13784:	0023883a 	mov	r17,zero
   13788:	003ed206 	br	132d4 <__alt_mem_Flash_flash_data+0xf40132d4>
   1378c:	0101ffc4 	movi	r4,2047
   13790:	51003b26 	beq	r10,r4,13880 <__subdf3+0x7b8>
   13794:	0085c83a 	sub	r2,zero,r2
   13798:	29402034 	orhi	r5,r5,128
   1379c:	01000e04 	movi	r4,56
   137a0:	20806216 	blt	r4,r2,1392c <__subdf3+0x864>
   137a4:	010007c4 	movi	r4,31
   137a8:	20806b16 	blt	r4,r2,13958 <__subdf3+0x890>
   137ac:	01000804 	movi	r4,32
   137b0:	2089c83a 	sub	r4,r4,r2
   137b4:	2912983a 	sll	r9,r5,r4
   137b8:	888ed83a 	srl	r7,r17,r2
   137bc:	8908983a 	sll	r4,r17,r4
   137c0:	2884d83a 	srl	r2,r5,r2
   137c4:	49e2b03a 	or	r17,r9,r7
   137c8:	2008c03a 	cmpne	r4,r4,zero
   137cc:	8922b03a 	or	r17,r17,r4
   137d0:	89a3883a 	add	r17,r17,r6
   137d4:	10c5883a 	add	r2,r2,r3
   137d8:	898d803a 	cmpltu	r6,r17,r6
   137dc:	118b883a 	add	r5,r2,r6
   137e0:	5021883a 	mov	r16,r10
   137e4:	003ed506 	br	1333c <__alt_mem_Flash_flash_data+0xf401333c>
   137e8:	1984b03a 	or	r2,r3,r6
   137ec:	103e5926 	beq	r2,zero,13154 <__alt_mem_Flash_flash_data+0xf4013154>
   137f0:	8989c83a 	sub	r4,r17,r6
   137f4:	8911803a 	cmpltu	r8,r17,r4
   137f8:	28c5c83a 	sub	r2,r5,r3
   137fc:	1205c83a 	sub	r2,r2,r8
   13800:	1200202c 	andhi	r8,r2,128
   13804:	403ef926 	beq	r8,zero,133ec <__alt_mem_Flash_flash_data+0xf40133ec>
   13808:	3463c83a 	sub	r17,r6,r17
   1380c:	194bc83a 	sub	r5,r3,r5
   13810:	344d803a 	cmpltu	r6,r6,r17
   13814:	298bc83a 	sub	r5,r5,r6
   13818:	3825883a 	mov	r18,r7
   1381c:	003e4d06 	br	13154 <__alt_mem_Flash_flash_data+0xf4013154>
   13820:	1984b03a 	or	r2,r3,r6
   13824:	10002b26 	beq	r2,zero,138d4 <__subdf3+0x80c>
   13828:	2808d0fa 	srli	r4,r5,3
   1382c:	8822d0fa 	srli	r17,r17,3
   13830:	280a977a 	slli	r5,r5,29
   13834:	2080022c 	andhi	r2,r4,8
   13838:	2c62b03a 	or	r17,r5,r17
   1383c:	10000826 	beq	r2,zero,13860 <__subdf3+0x798>
   13840:	1810d0fa 	srli	r8,r3,3
   13844:	4080022c 	andhi	r2,r8,8
   13848:	1000051e 	bne	r2,zero,13860 <__subdf3+0x798>
   1384c:	300cd0fa 	srli	r6,r6,3
   13850:	1804977a 	slli	r2,r3,29
   13854:	4009883a 	mov	r4,r8
   13858:	3825883a 	mov	r18,r7
   1385c:	11a2b03a 	or	r17,r2,r6
   13860:	880ad77a 	srli	r5,r17,29
   13864:	200890fa 	slli	r4,r4,3
   13868:	882290fa 	slli	r17,r17,3
   1386c:	0401ffc4 	movi	r16,2047
   13870:	290ab03a 	or	r5,r5,r4
   13874:	003e3706 	br	13154 <__alt_mem_Flash_flash_data+0xf4013154>
   13878:	0101ffc4 	movi	r4,2047
   1387c:	513fc71e 	bne	r10,r4,1379c <__alt_mem_Flash_flash_data+0xf401379c>
   13880:	180b883a 	mov	r5,r3
   13884:	3023883a 	mov	r17,r6
   13888:	5021883a 	mov	r16,r10
   1388c:	003e3106 	br	13154 <__alt_mem_Flash_flash_data+0xf4013154>
   13890:	10002d26 	beq	r2,zero,13948 <__subdf3+0x880>
   13894:	1984b03a 	or	r2,r3,r6
   13898:	10000e26 	beq	r2,zero,138d4 <__subdf3+0x80c>
   1389c:	2808d0fa 	srli	r4,r5,3
   138a0:	8822d0fa 	srli	r17,r17,3
   138a4:	280a977a 	slli	r5,r5,29
   138a8:	2080022c 	andhi	r2,r4,8
   138ac:	2c62b03a 	or	r17,r5,r17
   138b0:	103feb26 	beq	r2,zero,13860 <__alt_mem_Flash_flash_data+0xf4013860>
   138b4:	180ed0fa 	srli	r7,r3,3
   138b8:	3880022c 	andhi	r2,r7,8
   138bc:	103fe81e 	bne	r2,zero,13860 <__alt_mem_Flash_flash_data+0xf4013860>
   138c0:	300cd0fa 	srli	r6,r6,3
   138c4:	1804977a 	slli	r2,r3,29
   138c8:	3809883a 	mov	r4,r7
   138cc:	11a2b03a 	or	r17,r2,r6
   138d0:	003fe306 	br	13860 <__alt_mem_Flash_flash_data+0xf4013860>
   138d4:	0401ffc4 	movi	r16,2047
   138d8:	003e1e06 	br	13154 <__alt_mem_Flash_flash_data+0xf4013154>
   138dc:	0005883a 	mov	r2,zero
   138e0:	003f8306 	br	136f0 <__alt_mem_Flash_flash_data+0xf40136f0>
   138e4:	113ff804 	addi	r4,r2,-32
   138e8:	02000804 	movi	r8,32
   138ec:	2908d83a 	srl	r4,r5,r4
   138f0:	12002526 	beq	r2,r8,13988 <__subdf3+0x8c0>
   138f4:	02001004 	movi	r8,64
   138f8:	4085c83a 	sub	r2,r8,r2
   138fc:	288a983a 	sll	r5,r5,r2
   13900:	2c62b03a 	or	r17,r5,r17
   13904:	8822c03a 	cmpne	r17,r17,zero
   13908:	8922b03a 	or	r17,r17,r4
   1390c:	0005883a 	mov	r2,zero
   13910:	003f2406 	br	135a4 <__alt_mem_Flash_flash_data+0xf40135a4>
   13914:	01402034 	movhi	r5,128
   13918:	0011883a 	mov	r8,zero
   1391c:	297fffc4 	addi	r5,r5,-1
   13920:	047ffe04 	movi	r17,-8
   13924:	0401ffc4 	movi	r16,2047
   13928:	003e6a06 	br	132d4 <__alt_mem_Flash_flash_data+0xf40132d4>
   1392c:	2c62b03a 	or	r17,r5,r17
   13930:	8822c03a 	cmpne	r17,r17,zero
   13934:	0005883a 	mov	r2,zero
   13938:	003fa506 	br	137d0 <__alt_mem_Flash_flash_data+0xf40137d0>
   1393c:	180b883a 	mov	r5,r3
   13940:	3023883a 	mov	r17,r6
   13944:	003e0306 	br	13154 <__alt_mem_Flash_flash_data+0xf4013154>
   13948:	180b883a 	mov	r5,r3
   1394c:	3023883a 	mov	r17,r6
   13950:	0401ffc4 	movi	r16,2047
   13954:	003dff06 	br	13154 <__alt_mem_Flash_flash_data+0xf4013154>
   13958:	113ff804 	addi	r4,r2,-32
   1395c:	01c00804 	movi	r7,32
   13960:	2908d83a 	srl	r4,r5,r4
   13964:	11c00a26 	beq	r2,r7,13990 <__subdf3+0x8c8>
   13968:	01c01004 	movi	r7,64
   1396c:	3885c83a 	sub	r2,r7,r2
   13970:	288a983a 	sll	r5,r5,r2
   13974:	2c62b03a 	or	r17,r5,r17
   13978:	8822c03a 	cmpne	r17,r17,zero
   1397c:	8922b03a 	or	r17,r17,r4
   13980:	0005883a 	mov	r2,zero
   13984:	003f9206 	br	137d0 <__alt_mem_Flash_flash_data+0xf40137d0>
   13988:	000b883a 	mov	r5,zero
   1398c:	003fdc06 	br	13900 <__alt_mem_Flash_flash_data+0xf4013900>
   13990:	000b883a 	mov	r5,zero
   13994:	003ff706 	br	13974 <__alt_mem_Flash_flash_data+0xf4013974>

00013998 <__fixdfsi>:
   13998:	2806d53a 	srli	r3,r5,20
   1399c:	00800434 	movhi	r2,16
   139a0:	10bfffc4 	addi	r2,r2,-1
   139a4:	18c1ffcc 	andi	r3,r3,2047
   139a8:	0180ff84 	movi	r6,1022
   139ac:	2884703a 	and	r2,r5,r2
   139b0:	280ad7fa 	srli	r5,r5,31
   139b4:	30c0130e 	bge	r6,r3,13a04 <__fixdfsi+0x6c>
   139b8:	01810744 	movi	r6,1053
   139bc:	30c00d16 	blt	r6,r3,139f4 <__fixdfsi+0x5c>
   139c0:	01810cc4 	movi	r6,1075
   139c4:	30cdc83a 	sub	r6,r6,r3
   139c8:	01c007c4 	movi	r7,31
   139cc:	10800434 	orhi	r2,r2,16
   139d0:	39800e0e 	bge	r7,r6,13a0c <__fixdfsi+0x74>
   139d4:	010104c4 	movi	r4,1043
   139d8:	20c7c83a 	sub	r3,r4,r3
   139dc:	10c6d83a 	srl	r3,r2,r3
   139e0:	29403fcc 	andi	r5,r5,255
   139e4:	0145c83a 	sub	r2,zero,r5
   139e8:	1884f03a 	xor	r2,r3,r2
   139ec:	1145883a 	add	r2,r2,r5
   139f0:	f800283a 	ret
   139f4:	00a00034 	movhi	r2,32768
   139f8:	10bfffc4 	addi	r2,r2,-1
   139fc:	2885883a 	add	r2,r5,r2
   13a00:	f800283a 	ret
   13a04:	0005883a 	mov	r2,zero
   13a08:	f800283a 	ret
   13a0c:	18fefb44 	addi	r3,r3,-1043
   13a10:	2188d83a 	srl	r4,r4,r6
   13a14:	10c6983a 	sll	r3,r2,r3
   13a18:	20c6b03a 	or	r3,r4,r3
   13a1c:	003ff006 	br	139e0 <__alt_mem_Flash_flash_data+0xf40139e0>

00013a20 <__floatsidf>:
   13a20:	defffd04 	addi	sp,sp,-12
   13a24:	dc400115 	stw	r17,4(sp)
   13a28:	dfc00215 	stw	ra,8(sp)
   13a2c:	dc000015 	stw	r16,0(sp)
   13a30:	2023883a 	mov	r17,r4
   13a34:	20001426 	beq	r4,zero,13a88 <__floatsidf+0x68>
   13a38:	2020d7fa 	srli	r16,r4,31
   13a3c:	80000126 	beq	r16,zero,13a44 <__floatsidf+0x24>
   13a40:	0123c83a 	sub	r17,zero,r4
   13a44:	8809883a 	mov	r4,r17
   13a48:	0013b940 	call	13b94 <__clzsi2>
   13a4c:	01410784 	movi	r5,1054
   13a50:	00c00284 	movi	r3,10
   13a54:	288bc83a 	sub	r5,r5,r2
   13a58:	18801c16 	blt	r3,r2,13acc <__floatsidf+0xac>
   13a5c:	00c002c4 	movi	r3,11
   13a60:	1887c83a 	sub	r3,r3,r2
   13a64:	88c8d83a 	srl	r4,r17,r3
   13a68:	00c00434 	movhi	r3,16
   13a6c:	18ffffc4 	addi	r3,r3,-1
   13a70:	10800544 	addi	r2,r2,21
   13a74:	20c8703a 	and	r4,r4,r3
   13a78:	8884983a 	sll	r2,r17,r2
   13a7c:	28c1ffcc 	andi	r3,r5,2047
   13a80:	800d883a 	mov	r6,r16
   13a84:	00000406 	br	13a98 <__floatsidf+0x78>
   13a88:	000d883a 	mov	r6,zero
   13a8c:	0007883a 	mov	r3,zero
   13a90:	0009883a 	mov	r4,zero
   13a94:	0005883a 	mov	r2,zero
   13a98:	180a953a 	slli	r5,r3,20
   13a9c:	31803fcc 	andi	r6,r6,255
   13aa0:	00c00434 	movhi	r3,16
   13aa4:	300c97fa 	slli	r6,r6,31
   13aa8:	18ffffc4 	addi	r3,r3,-1
   13aac:	20c6703a 	and	r3,r4,r3
   13ab0:	1946b03a 	or	r3,r3,r5
   13ab4:	1986b03a 	or	r3,r3,r6
   13ab8:	dfc00217 	ldw	ra,8(sp)
   13abc:	dc400117 	ldw	r17,4(sp)
   13ac0:	dc000017 	ldw	r16,0(sp)
   13ac4:	dec00304 	addi	sp,sp,12
   13ac8:	f800283a 	ret
   13acc:	10fffd44 	addi	r3,r2,-11
   13ad0:	88c8983a 	sll	r4,r17,r3
   13ad4:	00800434 	movhi	r2,16
   13ad8:	10bfffc4 	addi	r2,r2,-1
   13adc:	2088703a 	and	r4,r4,r2
   13ae0:	28c1ffcc 	andi	r3,r5,2047
   13ae4:	800d883a 	mov	r6,r16
   13ae8:	0005883a 	mov	r2,zero
   13aec:	003fea06 	br	13a98 <__alt_mem_Flash_flash_data+0xf4013a98>

00013af0 <__floatunsidf>:
   13af0:	defffe04 	addi	sp,sp,-8
   13af4:	dc000015 	stw	r16,0(sp)
   13af8:	dfc00115 	stw	ra,4(sp)
   13afc:	2021883a 	mov	r16,r4
   13b00:	20001026 	beq	r4,zero,13b44 <__floatunsidf+0x54>
   13b04:	0013b940 	call	13b94 <__clzsi2>
   13b08:	01410784 	movi	r5,1054
   13b0c:	100d883a 	mov	r6,r2
   13b10:	288bc83a 	sub	r5,r5,r2
   13b14:	00800284 	movi	r2,10
   13b18:	11801616 	blt	r2,r6,13b74 <__floatunsidf+0x84>
   13b1c:	008002c4 	movi	r2,11
   13b20:	1185c83a 	sub	r2,r2,r6
   13b24:	8084d83a 	srl	r2,r16,r2
   13b28:	00c00434 	movhi	r3,16
   13b2c:	31c00544 	addi	r7,r6,21
   13b30:	18ffffc4 	addi	r3,r3,-1
   13b34:	81e0983a 	sll	r16,r16,r7
   13b38:	10cc703a 	and	r6,r2,r3
   13b3c:	2941ffcc 	andi	r5,r5,2047
   13b40:	00000206 	br	13b4c <__floatunsidf+0x5c>
   13b44:	000b883a 	mov	r5,zero
   13b48:	000d883a 	mov	r6,zero
   13b4c:	280a953a 	slli	r5,r5,20
   13b50:	00c00434 	movhi	r3,16
   13b54:	18ffffc4 	addi	r3,r3,-1
   13b58:	30c6703a 	and	r3,r6,r3
   13b5c:	8005883a 	mov	r2,r16
   13b60:	1946b03a 	or	r3,r3,r5
   13b64:	dfc00117 	ldw	ra,4(sp)
   13b68:	dc000017 	ldw	r16,0(sp)
   13b6c:	dec00204 	addi	sp,sp,8
   13b70:	f800283a 	ret
   13b74:	31bffd44 	addi	r6,r6,-11
   13b78:	818c983a 	sll	r6,r16,r6
   13b7c:	00800434 	movhi	r2,16
   13b80:	10bfffc4 	addi	r2,r2,-1
   13b84:	2941ffcc 	andi	r5,r5,2047
   13b88:	0021883a 	mov	r16,zero
   13b8c:	308c703a 	and	r6,r6,r2
   13b90:	003fee06 	br	13b4c <__alt_mem_Flash_flash_data+0xf4013b4c>

00013b94 <__clzsi2>:
   13b94:	00bfffd4 	movui	r2,65535
   13b98:	11000b36 	bltu	r2,r4,13bc8 <__clzsi2+0x34>
   13b9c:	00803fc4 	movi	r2,255
   13ba0:	1100122e 	bgeu	r2,r4,13bec <__clzsi2+0x58>
   13ba4:	00c00204 	movi	r3,8
   13ba8:	01400604 	movi	r5,24
   13bac:	20c8d83a 	srl	r4,r4,r3
   13bb0:	008000b4 	movhi	r2,2
   13bb4:	10971a04 	addi	r2,r2,23656
   13bb8:	1109883a 	add	r4,r2,r4
   13bbc:	20800003 	ldbu	r2,0(r4)
   13bc0:	2885c83a 	sub	r2,r5,r2
   13bc4:	f800283a 	ret
   13bc8:	00804034 	movhi	r2,256
   13bcc:	10bfffc4 	addi	r2,r2,-1
   13bd0:	11000336 	bltu	r2,r4,13be0 <__clzsi2+0x4c>
   13bd4:	00c00404 	movi	r3,16
   13bd8:	180b883a 	mov	r5,r3
   13bdc:	003ff306 	br	13bac <__alt_mem_Flash_flash_data+0xf4013bac>
   13be0:	00c00604 	movi	r3,24
   13be4:	01400204 	movi	r5,8
   13be8:	003ff006 	br	13bac <__alt_mem_Flash_flash_data+0xf4013bac>
   13bec:	0007883a 	mov	r3,zero
   13bf0:	01400804 	movi	r5,32
   13bf4:	003fed06 	br	13bac <__alt_mem_Flash_flash_data+0xf4013bac>

00013bf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13bf8:	defffe04 	addi	sp,sp,-8
   13bfc:	dfc00115 	stw	ra,4(sp)
   13c00:	df000015 	stw	fp,0(sp)
   13c04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13c08:	008000b4 	movhi	r2,2
   13c0c:	109fbd04 	addi	r2,r2,32500
   13c10:	10800017 	ldw	r2,0(r2)
   13c14:	10000526 	beq	r2,zero,13c2c <alt_get_errno+0x34>
   13c18:	008000b4 	movhi	r2,2
   13c1c:	109fbd04 	addi	r2,r2,32500
   13c20:	10800017 	ldw	r2,0(r2)
   13c24:	103ee83a 	callr	r2
   13c28:	00000206 	br	13c34 <alt_get_errno+0x3c>
   13c2c:	008000f4 	movhi	r2,3
   13c30:	10a7d704 	addi	r2,r2,-24740
}
   13c34:	e037883a 	mov	sp,fp
   13c38:	dfc00117 	ldw	ra,4(sp)
   13c3c:	df000017 	ldw	fp,0(sp)
   13c40:	dec00204 	addi	sp,sp,8
   13c44:	f800283a 	ret

00013c48 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   13c48:	defffb04 	addi	sp,sp,-20
   13c4c:	dfc00415 	stw	ra,16(sp)
   13c50:	df000315 	stw	fp,12(sp)
   13c54:	df000304 	addi	fp,sp,12
   13c58:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   13c5c:	e0bfff17 	ldw	r2,-4(fp)
   13c60:	10000616 	blt	r2,zero,13c7c <close+0x34>
   13c64:	e0bfff17 	ldw	r2,-4(fp)
   13c68:	10c00324 	muli	r3,r2,12
   13c6c:	008000b4 	movhi	r2,2
   13c70:	109a4804 	addi	r2,r2,26912
   13c74:	1885883a 	add	r2,r3,r2
   13c78:	00000106 	br	13c80 <close+0x38>
   13c7c:	0005883a 	mov	r2,zero
   13c80:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   13c84:	e0bffd17 	ldw	r2,-12(fp)
   13c88:	10001926 	beq	r2,zero,13cf0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13c8c:	e0bffd17 	ldw	r2,-12(fp)
   13c90:	10800017 	ldw	r2,0(r2)
   13c94:	10800417 	ldw	r2,16(r2)
   13c98:	10000626 	beq	r2,zero,13cb4 <close+0x6c>
   13c9c:	e0bffd17 	ldw	r2,-12(fp)
   13ca0:	10800017 	ldw	r2,0(r2)
   13ca4:	10800417 	ldw	r2,16(r2)
   13ca8:	e13ffd17 	ldw	r4,-12(fp)
   13cac:	103ee83a 	callr	r2
   13cb0:	00000106 	br	13cb8 <close+0x70>
   13cb4:	0005883a 	mov	r2,zero
   13cb8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13cbc:	e13fff17 	ldw	r4,-4(fp)
   13cc0:	00143600 	call	14360 <alt_release_fd>
    if (rval < 0)
   13cc4:	e0bffe17 	ldw	r2,-8(fp)
   13cc8:	1000070e 	bge	r2,zero,13ce8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   13ccc:	0013bf80 	call	13bf8 <alt_get_errno>
   13cd0:	1007883a 	mov	r3,r2
   13cd4:	e0bffe17 	ldw	r2,-8(fp)
   13cd8:	0085c83a 	sub	r2,zero,r2
   13cdc:	18800015 	stw	r2,0(r3)
      return -1;
   13ce0:	00bfffc4 	movi	r2,-1
   13ce4:	00000706 	br	13d04 <close+0xbc>
    }
    return 0;
   13ce8:	0005883a 	mov	r2,zero
   13cec:	00000506 	br	13d04 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13cf0:	0013bf80 	call	13bf8 <alt_get_errno>
   13cf4:	1007883a 	mov	r3,r2
   13cf8:	00801444 	movi	r2,81
   13cfc:	18800015 	stw	r2,0(r3)
    return -1;
   13d00:	00bfffc4 	movi	r2,-1
  }
}
   13d04:	e037883a 	mov	sp,fp
   13d08:	dfc00117 	ldw	ra,4(sp)
   13d0c:	df000017 	ldw	fp,0(sp)
   13d10:	dec00204 	addi	sp,sp,8
   13d14:	f800283a 	ret

00013d18 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13d18:	defffc04 	addi	sp,sp,-16
   13d1c:	df000315 	stw	fp,12(sp)
   13d20:	df000304 	addi	fp,sp,12
   13d24:	e13ffd15 	stw	r4,-12(fp)
   13d28:	e17ffe15 	stw	r5,-8(fp)
   13d2c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   13d30:	e0bfff17 	ldw	r2,-4(fp)
}
   13d34:	e037883a 	mov	sp,fp
   13d38:	df000017 	ldw	fp,0(sp)
   13d3c:	dec00104 	addi	sp,sp,4
   13d40:	f800283a 	ret

00013d44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13d44:	defffe04 	addi	sp,sp,-8
   13d48:	dfc00115 	stw	ra,4(sp)
   13d4c:	df000015 	stw	fp,0(sp)
   13d50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13d54:	008000b4 	movhi	r2,2
   13d58:	109fbd04 	addi	r2,r2,32500
   13d5c:	10800017 	ldw	r2,0(r2)
   13d60:	10000526 	beq	r2,zero,13d78 <alt_get_errno+0x34>
   13d64:	008000b4 	movhi	r2,2
   13d68:	109fbd04 	addi	r2,r2,32500
   13d6c:	10800017 	ldw	r2,0(r2)
   13d70:	103ee83a 	callr	r2
   13d74:	00000206 	br	13d80 <alt_get_errno+0x3c>
   13d78:	008000f4 	movhi	r2,3
   13d7c:	10a7d704 	addi	r2,r2,-24740
}
   13d80:	e037883a 	mov	sp,fp
   13d84:	dfc00117 	ldw	ra,4(sp)
   13d88:	df000017 	ldw	fp,0(sp)
   13d8c:	dec00204 	addi	sp,sp,8
   13d90:	f800283a 	ret

00013d94 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13d94:	defffb04 	addi	sp,sp,-20
   13d98:	dfc00415 	stw	ra,16(sp)
   13d9c:	df000315 	stw	fp,12(sp)
   13da0:	df000304 	addi	fp,sp,12
   13da4:	e13ffe15 	stw	r4,-8(fp)
   13da8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13dac:	e0bffe17 	ldw	r2,-8(fp)
   13db0:	10000616 	blt	r2,zero,13dcc <fstat+0x38>
   13db4:	e0bffe17 	ldw	r2,-8(fp)
   13db8:	10c00324 	muli	r3,r2,12
   13dbc:	008000b4 	movhi	r2,2
   13dc0:	109a4804 	addi	r2,r2,26912
   13dc4:	1885883a 	add	r2,r3,r2
   13dc8:	00000106 	br	13dd0 <fstat+0x3c>
   13dcc:	0005883a 	mov	r2,zero
   13dd0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   13dd4:	e0bffd17 	ldw	r2,-12(fp)
   13dd8:	10001026 	beq	r2,zero,13e1c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   13ddc:	e0bffd17 	ldw	r2,-12(fp)
   13de0:	10800017 	ldw	r2,0(r2)
   13de4:	10800817 	ldw	r2,32(r2)
   13de8:	10000726 	beq	r2,zero,13e08 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   13dec:	e0bffd17 	ldw	r2,-12(fp)
   13df0:	10800017 	ldw	r2,0(r2)
   13df4:	10800817 	ldw	r2,32(r2)
   13df8:	e13ffd17 	ldw	r4,-12(fp)
   13dfc:	e17fff17 	ldw	r5,-4(fp)
   13e00:	103ee83a 	callr	r2
   13e04:	00000a06 	br	13e30 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   13e08:	e0bfff17 	ldw	r2,-4(fp)
   13e0c:	00c80004 	movi	r3,8192
   13e10:	10c00115 	stw	r3,4(r2)
      return 0;
   13e14:	0005883a 	mov	r2,zero
   13e18:	00000506 	br	13e30 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13e1c:	0013d440 	call	13d44 <alt_get_errno>
   13e20:	1007883a 	mov	r3,r2
   13e24:	00801444 	movi	r2,81
   13e28:	18800015 	stw	r2,0(r3)
    return -1;
   13e2c:	00bfffc4 	movi	r2,-1
  }
}
   13e30:	e037883a 	mov	sp,fp
   13e34:	dfc00117 	ldw	ra,4(sp)
   13e38:	df000017 	ldw	fp,0(sp)
   13e3c:	dec00204 	addi	sp,sp,8
   13e40:	f800283a 	ret

00013e44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13e44:	defffe04 	addi	sp,sp,-8
   13e48:	dfc00115 	stw	ra,4(sp)
   13e4c:	df000015 	stw	fp,0(sp)
   13e50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13e54:	008000b4 	movhi	r2,2
   13e58:	109fbd04 	addi	r2,r2,32500
   13e5c:	10800017 	ldw	r2,0(r2)
   13e60:	10000526 	beq	r2,zero,13e78 <alt_get_errno+0x34>
   13e64:	008000b4 	movhi	r2,2
   13e68:	109fbd04 	addi	r2,r2,32500
   13e6c:	10800017 	ldw	r2,0(r2)
   13e70:	103ee83a 	callr	r2
   13e74:	00000206 	br	13e80 <alt_get_errno+0x3c>
   13e78:	008000f4 	movhi	r2,3
   13e7c:	10a7d704 	addi	r2,r2,-24740
}
   13e80:	e037883a 	mov	sp,fp
   13e84:	dfc00117 	ldw	ra,4(sp)
   13e88:	df000017 	ldw	fp,0(sp)
   13e8c:	dec00204 	addi	sp,sp,8
   13e90:	f800283a 	ret

00013e94 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13e94:	deffed04 	addi	sp,sp,-76
   13e98:	dfc01215 	stw	ra,72(sp)
   13e9c:	df001115 	stw	fp,68(sp)
   13ea0:	df001104 	addi	fp,sp,68
   13ea4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13ea8:	e0bfff17 	ldw	r2,-4(fp)
   13eac:	10000616 	blt	r2,zero,13ec8 <isatty+0x34>
   13eb0:	e0bfff17 	ldw	r2,-4(fp)
   13eb4:	10c00324 	muli	r3,r2,12
   13eb8:	008000b4 	movhi	r2,2
   13ebc:	109a4804 	addi	r2,r2,26912
   13ec0:	1885883a 	add	r2,r3,r2
   13ec4:	00000106 	br	13ecc <isatty+0x38>
   13ec8:	0005883a 	mov	r2,zero
   13ecc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   13ed0:	e0bfef17 	ldw	r2,-68(fp)
   13ed4:	10000e26 	beq	r2,zero,13f10 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13ed8:	e0bfef17 	ldw	r2,-68(fp)
   13edc:	10800017 	ldw	r2,0(r2)
   13ee0:	10800817 	ldw	r2,32(r2)
   13ee4:	1000021e 	bne	r2,zero,13ef0 <isatty+0x5c>
    {
      return 1;
   13ee8:	00800044 	movi	r2,1
   13eec:	00000d06 	br	13f24 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13ef0:	e0bff004 	addi	r2,fp,-64
   13ef4:	e13fff17 	ldw	r4,-4(fp)
   13ef8:	100b883a 	mov	r5,r2
   13efc:	0013d940 	call	13d94 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13f00:	e0bff117 	ldw	r2,-60(fp)
   13f04:	10880020 	cmpeqi	r2,r2,8192
   13f08:	10803fcc 	andi	r2,r2,255
   13f0c:	00000506 	br	13f24 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13f10:	0013e440 	call	13e44 <alt_get_errno>
   13f14:	1007883a 	mov	r3,r2
   13f18:	00801444 	movi	r2,81
   13f1c:	18800015 	stw	r2,0(r3)
    return 0;
   13f20:	0005883a 	mov	r2,zero
  }
}
   13f24:	e037883a 	mov	sp,fp
   13f28:	dfc00117 	ldw	ra,4(sp)
   13f2c:	df000017 	ldw	fp,0(sp)
   13f30:	dec00204 	addi	sp,sp,8
   13f34:	f800283a 	ret

00013f38 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   13f38:	defffc04 	addi	sp,sp,-16
   13f3c:	df000315 	stw	fp,12(sp)
   13f40:	df000304 	addi	fp,sp,12
   13f44:	e13ffd15 	stw	r4,-12(fp)
   13f48:	e17ffe15 	stw	r5,-8(fp)
   13f4c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   13f50:	e0fffe17 	ldw	r3,-8(fp)
   13f54:	e0bffd17 	ldw	r2,-12(fp)
   13f58:	18800c26 	beq	r3,r2,13f8c <alt_load_section+0x54>
  {
    while( to != end )
   13f5c:	00000806 	br	13f80 <alt_load_section+0x48>
    {
      *to++ = *from++;
   13f60:	e0bffe17 	ldw	r2,-8(fp)
   13f64:	10c00104 	addi	r3,r2,4
   13f68:	e0fffe15 	stw	r3,-8(fp)
   13f6c:	e0fffd17 	ldw	r3,-12(fp)
   13f70:	19000104 	addi	r4,r3,4
   13f74:	e13ffd15 	stw	r4,-12(fp)
   13f78:	18c00017 	ldw	r3,0(r3)
   13f7c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   13f80:	e0fffe17 	ldw	r3,-8(fp)
   13f84:	e0bfff17 	ldw	r2,-4(fp)
   13f88:	18bff51e 	bne	r3,r2,13f60 <__alt_mem_Flash_flash_data+0xf4013f60>
    {
      *to++ = *from++;
    }
  }
}
   13f8c:	e037883a 	mov	sp,fp
   13f90:	df000017 	ldw	fp,0(sp)
   13f94:	dec00104 	addi	sp,sp,4
   13f98:	f800283a 	ret

00013f9c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13f9c:	defffe04 	addi	sp,sp,-8
   13fa0:	dfc00115 	stw	ra,4(sp)
   13fa4:	df000015 	stw	fp,0(sp)
   13fa8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   13fac:	010000b4 	movhi	r4,2
   13fb0:	211fe104 	addi	r4,r4,32644
   13fb4:	014000b4 	movhi	r5,2
   13fb8:	29581504 	addi	r5,r5,24660
   13fbc:	018000b4 	movhi	r6,2
   13fc0:	319fe104 	addi	r6,r6,32644
   13fc4:	0013f380 	call	13f38 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   13fc8:	01000034 	movhi	r4,0
   13fcc:	21000804 	addi	r4,r4,32
   13fd0:	01400034 	movhi	r5,0
   13fd4:	29400804 	addi	r5,r5,32
   13fd8:	01800034 	movhi	r6,0
   13fdc:	31809104 	addi	r6,r6,580
   13fe0:	0013f380 	call	13f38 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   13fe4:	010000b4 	movhi	r4,2
   13fe8:	21146804 	addi	r4,r4,20896
   13fec:	014000b4 	movhi	r5,2
   13ff0:	29546804 	addi	r5,r5,20896
   13ff4:	018000b4 	movhi	r6,2
   13ff8:	31981504 	addi	r6,r6,24660
   13ffc:	0013f380 	call	13f38 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   14000:	0023de80 	call	23de8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   14004:	00240400 	call	24040 <alt_icache_flush_all>
}
   14008:	e037883a 	mov	sp,fp
   1400c:	dfc00117 	ldw	ra,4(sp)
   14010:	df000017 	ldw	fp,0(sp)
   14014:	dec00204 	addi	sp,sp,8
   14018:	f800283a 	ret

0001401c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1401c:	defffe04 	addi	sp,sp,-8
   14020:	dfc00115 	stw	ra,4(sp)
   14024:	df000015 	stw	fp,0(sp)
   14028:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1402c:	008000b4 	movhi	r2,2
   14030:	109fbd04 	addi	r2,r2,32500
   14034:	10800017 	ldw	r2,0(r2)
   14038:	10000526 	beq	r2,zero,14050 <alt_get_errno+0x34>
   1403c:	008000b4 	movhi	r2,2
   14040:	109fbd04 	addi	r2,r2,32500
   14044:	10800017 	ldw	r2,0(r2)
   14048:	103ee83a 	callr	r2
   1404c:	00000206 	br	14058 <alt_get_errno+0x3c>
   14050:	008000f4 	movhi	r2,3
   14054:	10a7d704 	addi	r2,r2,-24740
}
   14058:	e037883a 	mov	sp,fp
   1405c:	dfc00117 	ldw	ra,4(sp)
   14060:	df000017 	ldw	fp,0(sp)
   14064:	dec00204 	addi	sp,sp,8
   14068:	f800283a 	ret

0001406c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1406c:	defff904 	addi	sp,sp,-28
   14070:	dfc00615 	stw	ra,24(sp)
   14074:	df000515 	stw	fp,20(sp)
   14078:	df000504 	addi	fp,sp,20
   1407c:	e13ffd15 	stw	r4,-12(fp)
   14080:	e17ffe15 	stw	r5,-8(fp)
   14084:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   14088:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1408c:	e0bffd17 	ldw	r2,-12(fp)
   14090:	10000616 	blt	r2,zero,140ac <lseek+0x40>
   14094:	e0bffd17 	ldw	r2,-12(fp)
   14098:	10c00324 	muli	r3,r2,12
   1409c:	008000b4 	movhi	r2,2
   140a0:	109a4804 	addi	r2,r2,26912
   140a4:	1885883a 	add	r2,r3,r2
   140a8:	00000106 	br	140b0 <lseek+0x44>
   140ac:	0005883a 	mov	r2,zero
   140b0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   140b4:	e0bffc17 	ldw	r2,-16(fp)
   140b8:	10001026 	beq	r2,zero,140fc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   140bc:	e0bffc17 	ldw	r2,-16(fp)
   140c0:	10800017 	ldw	r2,0(r2)
   140c4:	10800717 	ldw	r2,28(r2)
   140c8:	10000926 	beq	r2,zero,140f0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   140cc:	e0bffc17 	ldw	r2,-16(fp)
   140d0:	10800017 	ldw	r2,0(r2)
   140d4:	10800717 	ldw	r2,28(r2)
   140d8:	e13ffc17 	ldw	r4,-16(fp)
   140dc:	e17ffe17 	ldw	r5,-8(fp)
   140e0:	e1bfff17 	ldw	r6,-4(fp)
   140e4:	103ee83a 	callr	r2
   140e8:	e0bffb15 	stw	r2,-20(fp)
   140ec:	00000506 	br	14104 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   140f0:	00bfde84 	movi	r2,-134
   140f4:	e0bffb15 	stw	r2,-20(fp)
   140f8:	00000206 	br	14104 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   140fc:	00bfebc4 	movi	r2,-81
   14100:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   14104:	e0bffb17 	ldw	r2,-20(fp)
   14108:	1000070e 	bge	r2,zero,14128 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   1410c:	001401c0 	call	1401c <alt_get_errno>
   14110:	1007883a 	mov	r3,r2
   14114:	e0bffb17 	ldw	r2,-20(fp)
   14118:	0085c83a 	sub	r2,zero,r2
   1411c:	18800015 	stw	r2,0(r3)
    rc = -1;
   14120:	00bfffc4 	movi	r2,-1
   14124:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   14128:	e0bffb17 	ldw	r2,-20(fp)
}
   1412c:	e037883a 	mov	sp,fp
   14130:	dfc00117 	ldw	ra,4(sp)
   14134:	df000017 	ldw	fp,0(sp)
   14138:	dec00204 	addi	sp,sp,8
   1413c:	f800283a 	ret

00014140 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   14140:	defff904 	addi	sp,sp,-28
   14144:	dfc00615 	stw	ra,24(sp)
   14148:	df000515 	stw	fp,20(sp)
   1414c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   14150:	0009883a 	mov	r4,zero
   14154:	001d1140 	call	1d114 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   14158:	00151300 	call	15130 <OSInit>
   1415c:	01000044 	movi	r4,1
   14160:	001a8280 	call	1a828 <OSSemCreate>
   14164:	1007883a 	mov	r3,r2
   14168:	008000f4 	movhi	r2,3
   1416c:	10a7dd04 	addi	r2,r2,-24716
   14170:	10c00015 	stw	r3,0(r2)
   14174:	01000044 	movi	r4,1
   14178:	001a8280 	call	1a828 <OSSemCreate>
   1417c:	1007883a 	mov	r3,r2
   14180:	008000f4 	movhi	r2,3
   14184:	10a7df04 	addi	r2,r2,-24708
   14188:	10c00015 	stw	r3,0(r2)
   1418c:	008000f4 	movhi	r2,3
   14190:	10a7d804 	addi	r2,r2,-24736
   14194:	e0bffc15 	stw	r2,-16(fp)
   14198:	00800044 	movi	r2,1
   1419c:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   141a0:	e0bffd0b 	ldhu	r2,-12(fp)
   141a4:	1009883a 	mov	r4,r2
   141a8:	001a8280 	call	1a828 <OSSemCreate>
   141ac:	1007883a 	mov	r3,r2
   141b0:	e0bffc17 	ldw	r2,-16(fp)
   141b4:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   141b8:	001d1480 	call	1d148 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   141bc:	010000b4 	movhi	r4,2
   141c0:	21175d04 	addi	r4,r4,23924
   141c4:	014000b4 	movhi	r5,2
   141c8:	29575d04 	addi	r5,r5,23924
   141cc:	018000b4 	movhi	r6,2
   141d0:	31975d04 	addi	r6,r6,23924
   141d4:	00241300 	call	24130 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   141d8:	0023ef80 	call	23ef8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   141dc:	010000b4 	movhi	r4,2
   141e0:	210fd504 	addi	r4,r4,16212
   141e4:	0024df40 	call	24df4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   141e8:	d1283517 	ldw	r4,-24364(gp)
   141ec:	d0e83617 	ldw	r3,-24360(gp)
   141f0:	d0a83717 	ldw	r2,-24356(gp)
   141f4:	180b883a 	mov	r5,r3
   141f8:	100d883a 	mov	r6,r2
   141fc:	00036bc0 	call	36bc <main>
   14200:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   14204:	01000044 	movi	r4,1
   14208:	0013c480 	call	13c48 <close>
  exit (result);
   1420c:	e13ffb17 	ldw	r4,-20(fp)
   14210:	0024e080 	call	24e08 <exit>

00014214 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14214:	defffe04 	addi	sp,sp,-8
   14218:	dfc00115 	stw	ra,4(sp)
   1421c:	df000015 	stw	fp,0(sp)
   14220:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14224:	008000b4 	movhi	r2,2
   14228:	109fbd04 	addi	r2,r2,32500
   1422c:	10800017 	ldw	r2,0(r2)
   14230:	10000526 	beq	r2,zero,14248 <alt_get_errno+0x34>
   14234:	008000b4 	movhi	r2,2
   14238:	109fbd04 	addi	r2,r2,32500
   1423c:	10800017 	ldw	r2,0(r2)
   14240:	103ee83a 	callr	r2
   14244:	00000206 	br	14250 <alt_get_errno+0x3c>
   14248:	008000f4 	movhi	r2,3
   1424c:	10a7d704 	addi	r2,r2,-24740
}
   14250:	e037883a 	mov	sp,fp
   14254:	dfc00117 	ldw	ra,4(sp)
   14258:	df000017 	ldw	fp,0(sp)
   1425c:	dec00204 	addi	sp,sp,8
   14260:	f800283a 	ret

00014264 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   14264:	defff904 	addi	sp,sp,-28
   14268:	dfc00615 	stw	ra,24(sp)
   1426c:	df000515 	stw	fp,20(sp)
   14270:	df000504 	addi	fp,sp,20
   14274:	e13ffd15 	stw	r4,-12(fp)
   14278:	e17ffe15 	stw	r5,-8(fp)
   1427c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14280:	e0bffd17 	ldw	r2,-12(fp)
   14284:	10000616 	blt	r2,zero,142a0 <read+0x3c>
   14288:	e0bffd17 	ldw	r2,-12(fp)
   1428c:	10c00324 	muli	r3,r2,12
   14290:	008000b4 	movhi	r2,2
   14294:	109a4804 	addi	r2,r2,26912
   14298:	1885883a 	add	r2,r3,r2
   1429c:	00000106 	br	142a4 <read+0x40>
   142a0:	0005883a 	mov	r2,zero
   142a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   142a8:	e0bffb17 	ldw	r2,-20(fp)
   142ac:	10002226 	beq	r2,zero,14338 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   142b0:	e0bffb17 	ldw	r2,-20(fp)
   142b4:	10800217 	ldw	r2,8(r2)
   142b8:	108000cc 	andi	r2,r2,3
   142bc:	10800060 	cmpeqi	r2,r2,1
   142c0:	1000181e 	bne	r2,zero,14324 <read+0xc0>
        (fd->dev->read))
   142c4:	e0bffb17 	ldw	r2,-20(fp)
   142c8:	10800017 	ldw	r2,0(r2)
   142cc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   142d0:	10001426 	beq	r2,zero,14324 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   142d4:	e0bffb17 	ldw	r2,-20(fp)
   142d8:	10800017 	ldw	r2,0(r2)
   142dc:	10800517 	ldw	r2,20(r2)
   142e0:	e0ffff17 	ldw	r3,-4(fp)
   142e4:	e13ffb17 	ldw	r4,-20(fp)
   142e8:	e17ffe17 	ldw	r5,-8(fp)
   142ec:	180d883a 	mov	r6,r3
   142f0:	103ee83a 	callr	r2
   142f4:	e0bffc15 	stw	r2,-16(fp)
   142f8:	e0bffc17 	ldw	r2,-16(fp)
   142fc:	1000070e 	bge	r2,zero,1431c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   14300:	00142140 	call	14214 <alt_get_errno>
   14304:	1007883a 	mov	r3,r2
   14308:	e0bffc17 	ldw	r2,-16(fp)
   1430c:	0085c83a 	sub	r2,zero,r2
   14310:	18800015 	stw	r2,0(r3)
          return -1;
   14314:	00bfffc4 	movi	r2,-1
   14318:	00000c06 	br	1434c <read+0xe8>
        }
        return rval;
   1431c:	e0bffc17 	ldw	r2,-16(fp)
   14320:	00000a06 	br	1434c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   14324:	00142140 	call	14214 <alt_get_errno>
   14328:	1007883a 	mov	r3,r2
   1432c:	00800344 	movi	r2,13
   14330:	18800015 	stw	r2,0(r3)
   14334:	00000406 	br	14348 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   14338:	00142140 	call	14214 <alt_get_errno>
   1433c:	1007883a 	mov	r3,r2
   14340:	00801444 	movi	r2,81
   14344:	18800015 	stw	r2,0(r3)
  }
  return -1;
   14348:	00bfffc4 	movi	r2,-1
}
   1434c:	e037883a 	mov	sp,fp
   14350:	dfc00117 	ldw	ra,4(sp)
   14354:	df000017 	ldw	fp,0(sp)
   14358:	dec00204 	addi	sp,sp,8
   1435c:	f800283a 	ret

00014360 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   14360:	defffe04 	addi	sp,sp,-8
   14364:	df000115 	stw	fp,4(sp)
   14368:	df000104 	addi	fp,sp,4
   1436c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   14370:	e0bfff17 	ldw	r2,-4(fp)
   14374:	108000d0 	cmplti	r2,r2,3
   14378:	10000d1e 	bne	r2,zero,143b0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   1437c:	008000b4 	movhi	r2,2
   14380:	109a4804 	addi	r2,r2,26912
   14384:	e0ffff17 	ldw	r3,-4(fp)
   14388:	18c00324 	muli	r3,r3,12
   1438c:	18c00204 	addi	r3,r3,8
   14390:	10c5883a 	add	r2,r2,r3
   14394:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   14398:	008000b4 	movhi	r2,2
   1439c:	109a4804 	addi	r2,r2,26912
   143a0:	e0ffff17 	ldw	r3,-4(fp)
   143a4:	18c00324 	muli	r3,r3,12
   143a8:	10c5883a 	add	r2,r2,r3
   143ac:	10000015 	stw	zero,0(r2)
  }
}
   143b0:	e037883a 	mov	sp,fp
   143b4:	df000017 	ldw	fp,0(sp)
   143b8:	dec00104 	addi	sp,sp,4
   143bc:	f800283a 	ret

000143c0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   143c0:	defff904 	addi	sp,sp,-28
   143c4:	df000615 	stw	fp,24(sp)
   143c8:	df000604 	addi	fp,sp,24
   143cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   143d0:	0005303a 	rdctl	r2,status
   143d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   143d8:	e0fffc17 	ldw	r3,-16(fp)
   143dc:	00bfff84 	movi	r2,-2
   143e0:	1884703a 	and	r2,r3,r2
   143e4:	1001703a 	wrctl	status,r2
  
  return context;
   143e8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   143ec:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   143f0:	d0a01a17 	ldw	r2,-32664(gp)
   143f4:	10c000c4 	addi	r3,r2,3
   143f8:	00bfff04 	movi	r2,-4
   143fc:	1884703a 	and	r2,r3,r2
   14400:	d0a01a15 	stw	r2,-32664(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   14404:	d0e01a17 	ldw	r3,-32664(gp)
   14408:	e0bfff17 	ldw	r2,-4(fp)
   1440c:	1887883a 	add	r3,r3,r2
   14410:	00810034 	movhi	r2,1024
   14414:	10800004 	addi	r2,r2,0
   14418:	10c0062e 	bgeu	r2,r3,14434 <sbrk+0x74>
   1441c:	e0bffa17 	ldw	r2,-24(fp)
   14420:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14424:	e0bffd17 	ldw	r2,-12(fp)
   14428:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1442c:	00bfffc4 	movi	r2,-1
   14430:	00000b06 	br	14460 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   14434:	d0a01a17 	ldw	r2,-32664(gp)
   14438:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   1443c:	d0e01a17 	ldw	r3,-32664(gp)
   14440:	e0bfff17 	ldw	r2,-4(fp)
   14444:	1885883a 	add	r2,r3,r2
   14448:	d0a01a15 	stw	r2,-32664(gp)
   1444c:	e0bffa17 	ldw	r2,-24(fp)
   14450:	e0bffe15 	stw	r2,-8(fp)
   14454:	e0bffe17 	ldw	r2,-8(fp)
   14458:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1445c:	e0bffb17 	ldw	r2,-20(fp)
} 
   14460:	e037883a 	mov	sp,fp
   14464:	df000017 	ldw	fp,0(sp)
   14468:	dec00104 	addi	sp,sp,4
   1446c:	f800283a 	ret

00014470 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14470:	defffe04 	addi	sp,sp,-8
   14474:	dfc00115 	stw	ra,4(sp)
   14478:	df000015 	stw	fp,0(sp)
   1447c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14480:	008000b4 	movhi	r2,2
   14484:	109fbd04 	addi	r2,r2,32500
   14488:	10800017 	ldw	r2,0(r2)
   1448c:	10000526 	beq	r2,zero,144a4 <alt_get_errno+0x34>
   14490:	008000b4 	movhi	r2,2
   14494:	109fbd04 	addi	r2,r2,32500
   14498:	10800017 	ldw	r2,0(r2)
   1449c:	103ee83a 	callr	r2
   144a0:	00000206 	br	144ac <alt_get_errno+0x3c>
   144a4:	008000f4 	movhi	r2,3
   144a8:	10a7d704 	addi	r2,r2,-24740
}
   144ac:	e037883a 	mov	sp,fp
   144b0:	dfc00117 	ldw	ra,4(sp)
   144b4:	df000017 	ldw	fp,0(sp)
   144b8:	dec00204 	addi	sp,sp,8
   144bc:	f800283a 	ret

000144c0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   144c0:	defff904 	addi	sp,sp,-28
   144c4:	dfc00615 	stw	ra,24(sp)
   144c8:	df000515 	stw	fp,20(sp)
   144cc:	df000504 	addi	fp,sp,20
   144d0:	e13ffd15 	stw	r4,-12(fp)
   144d4:	e17ffe15 	stw	r5,-8(fp)
   144d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   144dc:	e0bffd17 	ldw	r2,-12(fp)
   144e0:	10000616 	blt	r2,zero,144fc <write+0x3c>
   144e4:	e0bffd17 	ldw	r2,-12(fp)
   144e8:	10c00324 	muli	r3,r2,12
   144ec:	008000b4 	movhi	r2,2
   144f0:	109a4804 	addi	r2,r2,26912
   144f4:	1885883a 	add	r2,r3,r2
   144f8:	00000106 	br	14500 <write+0x40>
   144fc:	0005883a 	mov	r2,zero
   14500:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   14504:	e0bffb17 	ldw	r2,-20(fp)
   14508:	10002126 	beq	r2,zero,14590 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1450c:	e0bffb17 	ldw	r2,-20(fp)
   14510:	10800217 	ldw	r2,8(r2)
   14514:	108000cc 	andi	r2,r2,3
   14518:	10001826 	beq	r2,zero,1457c <write+0xbc>
   1451c:	e0bffb17 	ldw	r2,-20(fp)
   14520:	10800017 	ldw	r2,0(r2)
   14524:	10800617 	ldw	r2,24(r2)
   14528:	10001426 	beq	r2,zero,1457c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1452c:	e0bffb17 	ldw	r2,-20(fp)
   14530:	10800017 	ldw	r2,0(r2)
   14534:	10800617 	ldw	r2,24(r2)
   14538:	e0ffff17 	ldw	r3,-4(fp)
   1453c:	e13ffb17 	ldw	r4,-20(fp)
   14540:	e17ffe17 	ldw	r5,-8(fp)
   14544:	180d883a 	mov	r6,r3
   14548:	103ee83a 	callr	r2
   1454c:	e0bffc15 	stw	r2,-16(fp)
   14550:	e0bffc17 	ldw	r2,-16(fp)
   14554:	1000070e 	bge	r2,zero,14574 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   14558:	00144700 	call	14470 <alt_get_errno>
   1455c:	1007883a 	mov	r3,r2
   14560:	e0bffc17 	ldw	r2,-16(fp)
   14564:	0085c83a 	sub	r2,zero,r2
   14568:	18800015 	stw	r2,0(r3)
        return -1;
   1456c:	00bfffc4 	movi	r2,-1
   14570:	00000c06 	br	145a4 <write+0xe4>
      }
      return rval;
   14574:	e0bffc17 	ldw	r2,-16(fp)
   14578:	00000a06 	br	145a4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1457c:	00144700 	call	14470 <alt_get_errno>
   14580:	1007883a 	mov	r3,r2
   14584:	00800344 	movi	r2,13
   14588:	18800015 	stw	r2,0(r3)
   1458c:	00000406 	br	145a0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   14590:	00144700 	call	14470 <alt_get_errno>
   14594:	1007883a 	mov	r3,r2
   14598:	00801444 	movi	r2,81
   1459c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   145a0:	00bfffc4 	movi	r2,-1
}
   145a4:	e037883a 	mov	sp,fp
   145a8:	dfc00117 	ldw	ra,4(sp)
   145ac:	df000017 	ldw	fp,0(sp)
   145b0:	dec00204 	addi	sp,sp,8
   145b4:	f800283a 	ret

000145b8 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   145b8:	deffdf04 	addi	sp,sp,-132
   145bc:	dfc02015 	stw	ra,128(sp)
   145c0:	df001f15 	stw	fp,124(sp)
   145c4:	df001f04 	addi	fp,sp,124
   145c8:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   145cc:	e0bfe204 	addi	r2,fp,-120
   145d0:	01003fc4 	movi	r4,255
   145d4:	100b883a 	mov	r5,r2
   145d8:	001c9dc0 	call	1c9dc <OSTaskQuery>
   145dc:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   145e0:	e0bffe83 	ldbu	r2,-6(fp)
   145e4:	10803fcc 	andi	r2,r2,255
   145e8:	10000126 	beq	r2,zero,145f0 <__env_lock+0x38>
    return;
   145ec:	00001d06 	br	14664 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
   145f0:	e0bfee83 	ldbu	r2,-70(fp)
   145f4:	10803fcc 	andi	r2,r2,255
   145f8:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   145fc:	d0e83917 	ldw	r3,-24348(gp)
   14600:	e0bffd04 	addi	r2,fp,-12
   14604:	1809883a 	mov	r4,r3
   14608:	100b883a 	mov	r5,r2
   1460c:	001b0740 	call	1b074 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   14610:	e0bffe43 	ldbu	r2,-7(fp)
   14614:	10803fcc 	andi	r2,r2,255
   14618:	10000726 	beq	r2,zero,14638 <__env_lock+0x80>
   1461c:	d0a01b17 	ldw	r2,-32660(gp)
   14620:	e0ffe117 	ldw	r3,-124(fp)
   14624:	1880041e 	bne	r3,r2,14638 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
   14628:	d0a83817 	ldw	r2,-24352(gp)
   1462c:	10800044 	addi	r2,r2,1
   14630:	d0a83815 	stw	r2,-24352(gp)
   14634:	00000a06 	br	14660 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   14638:	d0e83917 	ldw	r3,-24348(gp)
   1463c:	e0bffe84 	addi	r2,fp,-6
   14640:	1809883a 	mov	r4,r3
   14644:	000b883a 	mov	r5,zero
   14648:	100d883a 	mov	r6,r2
   1464c:	001ab900 	call	1ab90 <OSSemPend>
    locks  = 1;
   14650:	00800044 	movi	r2,1
   14654:	d0a83815 	stw	r2,-24352(gp)
    lockid = id;
   14658:	e0bfe117 	ldw	r2,-124(fp)
   1465c:	d0a01b15 	stw	r2,-32660(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   14660:	0001883a 	nop
}
   14664:	e037883a 	mov	sp,fp
   14668:	dfc00117 	ldw	ra,4(sp)
   1466c:	df000017 	ldw	fp,0(sp)
   14670:	dec00204 	addi	sp,sp,8
   14674:	f800283a 	ret

00014678 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   14678:	defffd04 	addi	sp,sp,-12
   1467c:	dfc00215 	stw	ra,8(sp)
   14680:	df000115 	stw	fp,4(sp)
   14684:	df000104 	addi	fp,sp,4
   14688:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   1468c:	d0a83817 	ldw	r2,-24352(gp)
   14690:	1000011e 	bne	r2,zero,14698 <__env_unlock+0x20>
    return;
   14694:	00000a06 	br	146c0 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   14698:	d0a83817 	ldw	r2,-24352(gp)
   1469c:	10bfffc4 	addi	r2,r2,-1
   146a0:	d0a83815 	stw	r2,-24352(gp)
   146a4:	d0a83817 	ldw	r2,-24352(gp)
   146a8:	1000051e 	bne	r2,zero,146c0 <__env_unlock+0x48>
  {
    lockid = -1;
   146ac:	00bfffc4 	movi	r2,-1
   146b0:	d0a01b15 	stw	r2,-32660(gp)
    OSSemPost( alt_envsem );
   146b4:	d0a83917 	ldw	r2,-24348(gp)
   146b8:	1009883a 	mov	r4,r2
   146bc:	001af640 	call	1af64 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   146c0:	e037883a 	mov	sp,fp
   146c4:	dfc00117 	ldw	ra,4(sp)
   146c8:	df000017 	ldw	fp,0(sp)
   146cc:	dec00204 	addi	sp,sp,8
   146d0:	f800283a 	ret

000146d4 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   146d4:	deffdb04 	addi	sp,sp,-148
   146d8:	dfc02415 	stw	ra,144(sp)
   146dc:	df002315 	stw	fp,140(sp)
   146e0:	df002304 	addi	fp,sp,140
   146e4:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   146e8:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   146ec:	008000f4 	movhi	r2,3
   146f0:	10a7e044 	addi	r2,r2,-24703
   146f4:	10800003 	ldbu	r2,0(r2)
   146f8:	10803fcc 	andi	r2,r2,255
   146fc:	10800060 	cmpeqi	r2,r2,1
   14700:	1000011e 	bne	r2,zero,14708 <__malloc_lock+0x34>
      return;
   14704:	00003606 	br	147e0 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   14708:	e0bfe204 	addi	r2,fp,-120
   1470c:	01003fc4 	movi	r4,255
   14710:	100b883a 	mov	r5,r2
   14714:	001c9dc0 	call	1c9dc <OSTaskQuery>
   14718:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   1471c:	e0bffe83 	ldbu	r2,-6(fp)
   14720:	10803fcc 	andi	r2,r2,255
   14724:	10000126 	beq	r2,zero,1472c <__malloc_lock+0x58>
    return;
   14728:	00002d06 	br	147e0 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
   1472c:	e0bfee83 	ldbu	r2,-70(fp)
   14730:	10803fcc 	andi	r2,r2,255
   14734:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   14738:	d0e83b17 	ldw	r3,-24340(gp)
   1473c:	e0bffd04 	addi	r2,fp,-12
   14740:	1809883a 	mov	r4,r3
   14744:	100b883a 	mov	r5,r2
   14748:	001b0740 	call	1b074 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1474c:	0005303a 	rdctl	r2,status
   14750:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14754:	e0ffdf17 	ldw	r3,-132(fp)
   14758:	00bfff84 	movi	r2,-2
   1475c:	1884703a 	and	r2,r3,r2
   14760:	1001703a 	wrctl	status,r2
  
  return context;
   14764:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   14768:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   1476c:	e0bffd0b 	ldhu	r2,-12(fp)
   14770:	10bfffcc 	andi	r2,r2,65535
   14774:	10000b1e 	bne	r2,zero,147a4 <__malloc_lock+0xd0>
   14778:	d0a01c17 	ldw	r2,-32656(gp)
   1477c:	e0ffde17 	ldw	r3,-136(fp)
   14780:	1880081e 	bne	r3,r2,147a4 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
   14784:	d0a83a17 	ldw	r2,-24344(gp)
   14788:	10800044 	addi	r2,r2,1
   1478c:	d0a83a15 	stw	r2,-24344(gp)
   14790:	e0bfdd17 	ldw	r2,-140(fp)
   14794:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14798:	e0bfe017 	ldw	r2,-128(fp)
   1479c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   147a0:	00000e06 	br	147dc <__malloc_lock+0x108>
   147a4:	e0bfdd17 	ldw	r2,-140(fp)
   147a8:	e0bfe115 	stw	r2,-124(fp)
   147ac:	e0bfe117 	ldw	r2,-124(fp)
   147b0:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   147b4:	d0e83b17 	ldw	r3,-24340(gp)
   147b8:	e0bffe84 	addi	r2,fp,-6
   147bc:	1809883a 	mov	r4,r3
   147c0:	000b883a 	mov	r5,zero
   147c4:	100d883a 	mov	r6,r2
   147c8:	001ab900 	call	1ab90 <OSSemPend>
    locks  = 1;
   147cc:	00800044 	movi	r2,1
   147d0:	d0a83a15 	stw	r2,-24344(gp)
    lockid = id;
   147d4:	e0bfde17 	ldw	r2,-136(fp)
   147d8:	d0a01c15 	stw	r2,-32656(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   147dc:	0001883a 	nop
}
   147e0:	e037883a 	mov	sp,fp
   147e4:	dfc00117 	ldw	ra,4(sp)
   147e8:	df000017 	ldw	fp,0(sp)
   147ec:	dec00204 	addi	sp,sp,8
   147f0:	f800283a 	ret

000147f4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   147f4:	defff804 	addi	sp,sp,-32
   147f8:	dfc00715 	stw	ra,28(sp)
   147fc:	df000615 	stw	fp,24(sp)
   14800:	df000604 	addi	fp,sp,24
   14804:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14808:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   1480c:	008000f4 	movhi	r2,3
   14810:	10a7e044 	addi	r2,r2,-24703
   14814:	10800003 	ldbu	r2,0(r2)
   14818:	10803fcc 	andi	r2,r2,255
   1481c:	10800060 	cmpeqi	r2,r2,1
   14820:	1000011e 	bne	r2,zero,14828 <__malloc_unlock+0x34>
      return;
   14824:	00002206 	br	148b0 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14828:	0005303a 	rdctl	r2,status
   1482c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14830:	e0fffb17 	ldw	r3,-20(fp)
   14834:	00bfff84 	movi	r2,-2
   14838:	1884703a 	and	r2,r3,r2
   1483c:	1001703a 	wrctl	status,r2
  
  return context;
   14840:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
   14844:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   14848:	d0a83a17 	ldw	r2,-24344(gp)
   1484c:	1000051e 	bne	r2,zero,14864 <__malloc_unlock+0x70>
   14850:	e0bffa17 	ldw	r2,-24(fp)
   14854:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14858:	e0bffc17 	ldw	r2,-16(fp)
   1485c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   14860:	00001306 	br	148b0 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   14864:	d0a83a17 	ldw	r2,-24344(gp)
   14868:	10bfffc4 	addi	r2,r2,-1
   1486c:	d0a83a15 	stw	r2,-24344(gp)
   14870:	d0a83a17 	ldw	r2,-24344(gp)
   14874:	10000a1e 	bne	r2,zero,148a0 <__malloc_unlock+0xac>
  {
    lockid = -1;
   14878:	00bfffc4 	movi	r2,-1
   1487c:	d0a01c15 	stw	r2,-32656(gp)
   14880:	e0bffa17 	ldw	r2,-24(fp)
   14884:	e0bffd15 	stw	r2,-12(fp)
   14888:	e0bffd17 	ldw	r2,-12(fp)
   1488c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   14890:	d0a83b17 	ldw	r2,-24340(gp)
   14894:	1009883a 	mov	r4,r2
   14898:	001af640 	call	1af64 <OSSemPost>
   1489c:	00000406 	br	148b0 <__malloc_unlock+0xbc>
   148a0:	e0bffa17 	ldw	r2,-24(fp)
   148a4:	e0bffe15 	stw	r2,-8(fp)
   148a8:	e0bffe17 	ldw	r2,-8(fp)
   148ac:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   148b0:	e037883a 	mov	sp,fp
   148b4:	dfc00117 	ldw	ra,4(sp)
   148b8:	df000017 	ldw	fp,0(sp)
   148bc:	dec00204 	addi	sp,sp,8
   148c0:	f800283a 	ret

000148c4 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   148c4:	defff704 	addi	sp,sp,-36
   148c8:	dfc00815 	stw	ra,32(sp)
   148cc:	df000715 	stw	fp,28(sp)
   148d0:	df000704 	addi	fp,sp,28
   148d4:	e13ffd15 	stw	r4,-12(fp)
   148d8:	e17ffe15 	stw	r5,-8(fp)
   148dc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   148e0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   148e4:	e0bfff17 	ldw	r2,-4(fp)
   148e8:	1000021e 	bne	r2,zero,148f4 <OSEventNameGet+0x30>
        return (0);
   148ec:	0005883a 	mov	r2,zero
   148f0:	00003706 	br	149d0 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   148f4:	e0bffd17 	ldw	r2,-12(fp)
   148f8:	1000051e 	bne	r2,zero,14910 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   148fc:	e0bfff17 	ldw	r2,-4(fp)
   14900:	00c00104 	movi	r3,4
   14904:	10c00005 	stb	r3,0(r2)
        return (0);
   14908:	0005883a 	mov	r2,zero
   1490c:	00003006 	br	149d0 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   14910:	e0bffe17 	ldw	r2,-8(fp)
   14914:	1000051e 	bne	r2,zero,1492c <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   14918:	e0bfff17 	ldw	r2,-4(fp)
   1491c:	00c00304 	movi	r3,12
   14920:	10c00005 	stb	r3,0(r2)
        return (0);
   14924:	0005883a 	mov	r2,zero
   14928:	00002906 	br	149d0 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1492c:	d0a84a03 	ldbu	r2,-24280(gp)
   14930:	10803fcc 	andi	r2,r2,255
   14934:	10000526 	beq	r2,zero,1494c <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   14938:	e0bfff17 	ldw	r2,-4(fp)
   1493c:	00c00444 	movi	r3,17
   14940:	10c00005 	stb	r3,0(r2)
        return (0);
   14944:	0005883a 	mov	r2,zero
   14948:	00002106 	br	149d0 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   1494c:	e0bffd17 	ldw	r2,-12(fp)
   14950:	10800003 	ldbu	r2,0(r2)
   14954:	10803fcc 	andi	r2,r2,255
   14958:	10bfffc4 	addi	r2,r2,-1
   1495c:	10800128 	cmpgeui	r2,r2,4
   14960:	10000526 	beq	r2,zero,14978 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   14964:	e0bfff17 	ldw	r2,-4(fp)
   14968:	00c00044 	movi	r3,1
   1496c:	10c00005 	stb	r3,0(r2)
             return (0);
   14970:	0005883a 	mov	r2,zero
   14974:	00001606 	br	149d0 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   14978:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1497c:	0005303a 	rdctl	r2,status
   14980:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14984:	e0fffb17 	ldw	r3,-20(fp)
   14988:	00bfff84 	movi	r2,-2
   1498c:	1884703a 	and	r2,r3,r2
   14990:	1001703a 	wrctl	status,r2
  
  return context;
   14994:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   14998:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   1499c:	e0bffd17 	ldw	r2,-12(fp)
   149a0:	10800384 	addi	r2,r2,14
   149a4:	e13ffe17 	ldw	r4,-8(fp)
   149a8:	100b883a 	mov	r5,r2
   149ac:	00163180 	call	16318 <OS_StrCopy>
   149b0:	e0bffa05 	stb	r2,-24(fp)
   149b4:	e0bff917 	ldw	r2,-28(fp)
   149b8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   149bc:	e0bffc17 	ldw	r2,-16(fp)
   149c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   149c4:	e0bfff17 	ldw	r2,-4(fp)
   149c8:	10000005 	stb	zero,0(r2)
    return (len);
   149cc:	e0bffa03 	ldbu	r2,-24(fp)
}
   149d0:	e037883a 	mov	sp,fp
   149d4:	dfc00117 	ldw	ra,4(sp)
   149d8:	df000017 	ldw	fp,0(sp)
   149dc:	dec00204 	addi	sp,sp,8
   149e0:	f800283a 	ret

000149e4 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   149e4:	defff604 	addi	sp,sp,-40
   149e8:	dfc00915 	stw	ra,36(sp)
   149ec:	df000815 	stw	fp,32(sp)
   149f0:	df000804 	addi	fp,sp,32
   149f4:	e13ffd15 	stw	r4,-12(fp)
   149f8:	e17ffe15 	stw	r5,-8(fp)
   149fc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14a00:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14a04:	e0bfff17 	ldw	r2,-4(fp)
   14a08:	1000011e 	bne	r2,zero,14a10 <OSEventNameSet+0x2c>
        return;
   14a0c:	00003f06 	br	14b0c <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   14a10:	e0bffd17 	ldw	r2,-12(fp)
   14a14:	1000041e 	bne	r2,zero,14a28 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   14a18:	e0bfff17 	ldw	r2,-4(fp)
   14a1c:	00c00104 	movi	r3,4
   14a20:	10c00005 	stb	r3,0(r2)
        return;
   14a24:	00003906 	br	14b0c <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   14a28:	e0bffe17 	ldw	r2,-8(fp)
   14a2c:	1000041e 	bne	r2,zero,14a40 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   14a30:	e0bfff17 	ldw	r2,-4(fp)
   14a34:	00c00304 	movi	r3,12
   14a38:	10c00005 	stb	r3,0(r2)
        return;
   14a3c:	00003306 	br	14b0c <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14a40:	d0a84a03 	ldbu	r2,-24280(gp)
   14a44:	10803fcc 	andi	r2,r2,255
   14a48:	10000426 	beq	r2,zero,14a5c <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
   14a4c:	e0bfff17 	ldw	r2,-4(fp)
   14a50:	00c00484 	movi	r3,18
   14a54:	10c00005 	stb	r3,0(r2)
        return;
   14a58:	00002c06 	br	14b0c <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
   14a5c:	e0bffd17 	ldw	r2,-12(fp)
   14a60:	10800003 	ldbu	r2,0(r2)
   14a64:	10803fcc 	andi	r2,r2,255
   14a68:	10bfffc4 	addi	r2,r2,-1
   14a6c:	10800128 	cmpgeui	r2,r2,4
   14a70:	10000426 	beq	r2,zero,14a84 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   14a74:	e0bfff17 	ldw	r2,-4(fp)
   14a78:	00c00044 	movi	r3,1
   14a7c:	10c00005 	stb	r3,0(r2)
             return;
   14a80:	00002206 	br	14b0c <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   14a84:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a88:	0005303a 	rdctl	r2,status
   14a8c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a90:	e0fffa17 	ldw	r3,-24(fp)
   14a94:	00bfff84 	movi	r2,-2
   14a98:	1884703a 	and	r2,r3,r2
   14a9c:	1001703a 	wrctl	status,r2
  
  return context;
   14aa0:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   14aa4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   14aa8:	e13ffe17 	ldw	r4,-8(fp)
   14aac:	001638c0 	call	1638c <OS_StrLen>
   14ab0:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   14ab4:	e0bff903 	ldbu	r2,-28(fp)
   14ab8:	10800830 	cmpltui	r2,r2,32
   14abc:	1000081e 	bne	r2,zero,14ae0 <OSEventNameSet+0xfc>
   14ac0:	e0bff817 	ldw	r2,-32(fp)
   14ac4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ac8:	e0bffb17 	ldw	r2,-20(fp)
   14acc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   14ad0:	e0bfff17 	ldw	r2,-4(fp)
   14ad4:	00c002c4 	movi	r3,11
   14ad8:	10c00005 	stb	r3,0(r2)
        return;
   14adc:	00000b06 	br	14b0c <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   14ae0:	e0bffd17 	ldw	r2,-12(fp)
   14ae4:	10800384 	addi	r2,r2,14
   14ae8:	1009883a 	mov	r4,r2
   14aec:	e17ffe17 	ldw	r5,-8(fp)
   14af0:	00163180 	call	16318 <OS_StrCopy>
   14af4:	e0bff817 	ldw	r2,-32(fp)
   14af8:	e0bffc15 	stw	r2,-16(fp)
   14afc:	e0bffc17 	ldw	r2,-16(fp)
   14b00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14b04:	e0bfff17 	ldw	r2,-4(fp)
   14b08:	10000005 	stb	zero,0(r2)
}
   14b0c:	e037883a 	mov	sp,fp
   14b10:	dfc00117 	ldw	ra,4(sp)
   14b14:	df000017 	ldw	fp,0(sp)
   14b18:	dec00204 	addi	sp,sp,8
   14b1c:	f800283a 	ret

00014b20 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   14b20:	deffed04 	addi	sp,sp,-76
   14b24:	dfc01215 	stw	ra,72(sp)
   14b28:	df001115 	stw	fp,68(sp)
   14b2c:	df001104 	addi	fp,sp,68
   14b30:	e13ffc15 	stw	r4,-16(fp)
   14b34:	e17ffd15 	stw	r5,-12(fp)
   14b38:	e1bffe15 	stw	r6,-8(fp)
   14b3c:	3805883a 	mov	r2,r7
   14b40:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   14b44:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   14b48:	e0800217 	ldw	r2,8(fp)
   14b4c:	1000021e 	bne	r2,zero,14b58 <OSEventPendMulti+0x38>
        return (0);
   14b50:	0005883a 	mov	r2,zero
   14b54:	00017106 	br	1511c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   14b58:	e0bffc17 	ldw	r2,-16(fp)
   14b5c:	1000051e 	bne	r2,zero,14b74 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   14b60:	e0800217 	ldw	r2,8(fp)
   14b64:	00c00104 	movi	r3,4
   14b68:	10c00005 	stb	r3,0(r2)
        return (0);
   14b6c:	0005883a 	mov	r2,zero
   14b70:	00016a06 	br	1511c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   14b74:	e0bffd17 	ldw	r2,-12(fp)
   14b78:	1000051e 	bne	r2,zero,14b90 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   14b7c:	e0800217 	ldw	r2,8(fp)
   14b80:	00c00104 	movi	r3,4
   14b84:	10c00005 	stb	r3,0(r2)
        return (0);
   14b88:	0005883a 	mov	r2,zero
   14b8c:	00016306 	br	1511c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   14b90:	e0bffe17 	ldw	r2,-8(fp)
   14b94:	1000051e 	bne	r2,zero,14bac <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   14b98:	e0800217 	ldw	r2,8(fp)
   14b9c:	00c00104 	movi	r3,4
   14ba0:	10c00005 	stb	r3,0(r2)
        return (0);
   14ba4:	0005883a 	mov	r2,zero
   14ba8:	00015c06 	br	1511c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   14bac:	e0bffd17 	ldw	r2,-12(fp)
   14bb0:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   14bb4:	e0bffc17 	ldw	r2,-16(fp)
   14bb8:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   14bbc:	e0bfef17 	ldw	r2,-68(fp)
   14bc0:	10800017 	ldw	r2,0(r2)
   14bc4:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   14bc8:	00001906 	br	14c30 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   14bcc:	e0bff017 	ldw	r2,-64(fp)
   14bd0:	10800003 	ldbu	r2,0(r2)
   14bd4:	10803fcc 	andi	r2,r2,255
   14bd8:	10c000a0 	cmpeqi	r3,r2,2
   14bdc:	1800091e 	bne	r3,zero,14c04 <OSEventPendMulti+0xe4>
   14be0:	10c000e0 	cmpeqi	r3,r2,3
   14be4:	1800091e 	bne	r3,zero,14c0c <OSEventPendMulti+0xec>
   14be8:	10800060 	cmpeqi	r2,r2,1
   14bec:	1000091e 	bne	r2,zero,14c14 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   14bf0:	e0800217 	ldw	r2,8(fp)
   14bf4:	00c00044 	movi	r3,1
   14bf8:	10c00005 	stb	r3,0(r2)
                 return (0);
   14bfc:	0005883a 	mov	r2,zero
   14c00:	00014606 	br	1511c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   14c04:	0001883a 	nop
   14c08:	00000306 	br	14c18 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   14c0c:	0001883a 	nop
   14c10:	00000106 	br	14c18 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   14c14:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   14c18:	e0bfef17 	ldw	r2,-68(fp)
   14c1c:	10800104 	addi	r2,r2,4
   14c20:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   14c24:	e0bfef17 	ldw	r2,-68(fp)
   14c28:	10800017 	ldw	r2,0(r2)
   14c2c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   14c30:	e0bff017 	ldw	r2,-64(fp)
   14c34:	103fe51e 	bne	r2,zero,14bcc <__alt_mem_Flash_flash_data+0xf4014bcc>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   14c38:	d0a84a03 	ldbu	r2,-24280(gp)
   14c3c:	10803fcc 	andi	r2,r2,255
   14c40:	10000526 	beq	r2,zero,14c58 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   14c44:	e0800217 	ldw	r2,8(fp)
   14c48:	00c00084 	movi	r3,2
   14c4c:	10c00005 	stb	r3,0(r2)
        return (0);
   14c50:	0005883a 	mov	r2,zero
   14c54:	00013106 	br	1511c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   14c58:	d0a83c03 	ldbu	r2,-24336(gp)
   14c5c:	10803fcc 	andi	r2,r2,255
   14c60:	10000526 	beq	r2,zero,14c78 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   14c64:	e0800217 	ldw	r2,8(fp)
   14c68:	00c00344 	movi	r3,13
   14c6c:	10c00005 	stb	r3,0(r2)
        return (0);
   14c70:	0005883a 	mov	r2,zero
   14c74:	00012906 	br	1511c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c78:	0005303a 	rdctl	r2,status
   14c7c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c80:	e0fff517 	ldw	r3,-44(fp)
   14c84:	00bfff84 	movi	r2,-2
   14c88:	1884703a 	and	r2,r3,r2
   14c8c:	1001703a 	wrctl	status,r2
  
  return context;
   14c90:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   14c94:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   14c98:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   14c9c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   14ca0:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   14ca4:	e0bffc17 	ldw	r2,-16(fp)
   14ca8:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   14cac:	e0bfef17 	ldw	r2,-68(fp)
   14cb0:	10800017 	ldw	r2,0(r2)
   14cb4:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   14cb8:	00008106 	br	14ec0 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   14cbc:	e0bff017 	ldw	r2,-64(fp)
   14cc0:	10800003 	ldbu	r2,0(r2)
   14cc4:	10803fcc 	andi	r2,r2,255
   14cc8:	10c000a0 	cmpeqi	r3,r2,2
   14ccc:	18003c1e 	bne	r3,zero,14dc0 <OSEventPendMulti+0x2a0>
   14cd0:	10c000e0 	cmpeqi	r3,r2,3
   14cd4:	1800031e 	bne	r3,zero,14ce4 <OSEventPendMulti+0x1c4>
   14cd8:	10800060 	cmpeqi	r2,r2,1
   14cdc:	10001e1e 	bne	r2,zero,14d58 <OSEventPendMulti+0x238>
   14ce0:	00006606 	br	14e7c <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   14ce4:	e0bff017 	ldw	r2,-64(fp)
   14ce8:	1080020b 	ldhu	r2,8(r2)
   14cec:	10bfffcc 	andi	r2,r2,65535
   14cf0:	10001526 	beq	r2,zero,14d48 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   14cf4:	e0bff017 	ldw	r2,-64(fp)
   14cf8:	1080020b 	ldhu	r2,8(r2)
   14cfc:	10bfffc4 	addi	r2,r2,-1
   14d00:	1007883a 	mov	r3,r2
   14d04:	e0bff017 	ldw	r2,-64(fp)
   14d08:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   14d0c:	e0bffd17 	ldw	r2,-12(fp)
   14d10:	10c00104 	addi	r3,r2,4
   14d14:	e0fffd15 	stw	r3,-12(fp)
   14d18:	e0fff017 	ldw	r3,-64(fp)
   14d1c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   14d20:	00800044 	movi	r2,1
   14d24:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   14d28:	e0bffe17 	ldw	r2,-8(fp)
   14d2c:	10c00104 	addi	r3,r2,4
   14d30:	e0fffe15 	stw	r3,-8(fp)
   14d34:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   14d38:	e0bff18b 	ldhu	r2,-58(fp)
   14d3c:	10800044 	addi	r2,r2,1
   14d40:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   14d44:	00005806 	br	14ea8 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   14d48:	e0bff203 	ldbu	r2,-56(fp)
   14d4c:	10800054 	ori	r2,r2,1
   14d50:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   14d54:	00005406 	br	14ea8 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   14d58:	e0bff017 	ldw	r2,-64(fp)
   14d5c:	10800117 	ldw	r2,4(r2)
   14d60:	10001326 	beq	r2,zero,14db0 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   14d64:	e0bffe17 	ldw	r2,-8(fp)
   14d68:	10c00104 	addi	r3,r2,4
   14d6c:	e0fffe15 	stw	r3,-8(fp)
   14d70:	e0fff017 	ldw	r3,-64(fp)
   14d74:	18c00117 	ldw	r3,4(r3)
   14d78:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   14d7c:	e0bff017 	ldw	r2,-64(fp)
   14d80:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   14d84:	e0bffd17 	ldw	r2,-12(fp)
   14d88:	10c00104 	addi	r3,r2,4
   14d8c:	e0fffd15 	stw	r3,-12(fp)
   14d90:	e0fff017 	ldw	r3,-64(fp)
   14d94:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   14d98:	00800044 	movi	r2,1
   14d9c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   14da0:	e0bff18b 	ldhu	r2,-58(fp)
   14da4:	10800044 	addi	r2,r2,1
   14da8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   14dac:	00003e06 	br	14ea8 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   14db0:	e0bff203 	ldbu	r2,-56(fp)
   14db4:	10800094 	ori	r2,r2,2
   14db8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   14dbc:	00003a06 	br	14ea8 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   14dc0:	e0bff017 	ldw	r2,-64(fp)
   14dc4:	10800117 	ldw	r2,4(r2)
   14dc8:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   14dcc:	e0bff417 	ldw	r2,-48(fp)
   14dd0:	1080058b 	ldhu	r2,22(r2)
   14dd4:	10bfffcc 	andi	r2,r2,65535
   14dd8:	10002426 	beq	r2,zero,14e6c <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   14ddc:	e0bffe17 	ldw	r2,-8(fp)
   14de0:	10c00104 	addi	r3,r2,4
   14de4:	e0fffe15 	stw	r3,-8(fp)
   14de8:	e0fff417 	ldw	r3,-48(fp)
   14dec:	18c00417 	ldw	r3,16(r3)
   14df0:	19400104 	addi	r5,r3,4
   14df4:	e13ff417 	ldw	r4,-48(fp)
   14df8:	21400415 	stw	r5,16(r4)
   14dfc:	18c00017 	ldw	r3,0(r3)
   14e00:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   14e04:	e0bff417 	ldw	r2,-48(fp)
   14e08:	10c00417 	ldw	r3,16(r2)
   14e0c:	e0bff417 	ldw	r2,-48(fp)
   14e10:	10800217 	ldw	r2,8(r2)
   14e14:	1880041e 	bne	r3,r2,14e28 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   14e18:	e0bff417 	ldw	r2,-48(fp)
   14e1c:	10c00117 	ldw	r3,4(r2)
   14e20:	e0bff417 	ldw	r2,-48(fp)
   14e24:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   14e28:	e0bff417 	ldw	r2,-48(fp)
   14e2c:	1080058b 	ldhu	r2,22(r2)
   14e30:	10bfffc4 	addi	r2,r2,-1
   14e34:	1007883a 	mov	r3,r2
   14e38:	e0bff417 	ldw	r2,-48(fp)
   14e3c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   14e40:	e0bffd17 	ldw	r2,-12(fp)
   14e44:	10c00104 	addi	r3,r2,4
   14e48:	e0fffd15 	stw	r3,-12(fp)
   14e4c:	e0fff017 	ldw	r3,-64(fp)
   14e50:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   14e54:	00800044 	movi	r2,1
   14e58:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   14e5c:	e0bff18b 	ldhu	r2,-58(fp)
   14e60:	10800044 	addi	r2,r2,1
   14e64:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   14e68:	00000f06 	br	14ea8 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   14e6c:	e0bff203 	ldbu	r2,-56(fp)
   14e70:	10800114 	ori	r2,r2,4
   14e74:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   14e78:	00000b06 	br	14ea8 <OSEventPendMulti+0x388>
   14e7c:	e0bff317 	ldw	r2,-52(fp)
   14e80:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e84:	e0bff617 	ldw	r2,-40(fp)
   14e88:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   14e8c:	e0bffd17 	ldw	r2,-12(fp)
   14e90:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   14e94:	e0800217 	ldw	r2,8(fp)
   14e98:	00c00044 	movi	r3,1
   14e9c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   14ea0:	e0bff18b 	ldhu	r2,-58(fp)
   14ea4:	00009d06 	br	1511c <OSEventPendMulti+0x5fc>
        }
        pevents++;
   14ea8:	e0bfef17 	ldw	r2,-68(fp)
   14eac:	10800104 	addi	r2,r2,4
   14eb0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   14eb4:	e0bfef17 	ldw	r2,-68(fp)
   14eb8:	10800017 	ldw	r2,0(r2)
   14ebc:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   14ec0:	e0bff017 	ldw	r2,-64(fp)
   14ec4:	103f7d1e 	bne	r2,zero,14cbc <__alt_mem_Flash_flash_data+0xf4014cbc>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   14ec8:	e0bff103 	ldbu	r2,-60(fp)
   14ecc:	10800058 	cmpnei	r2,r2,1
   14ed0:	10000a1e 	bne	r2,zero,14efc <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   14ed4:	e0bffd17 	ldw	r2,-12(fp)
   14ed8:	10000015 	stw	zero,0(r2)
   14edc:	e0bff317 	ldw	r2,-52(fp)
   14ee0:	e0bff715 	stw	r2,-36(fp)
   14ee4:	e0bff717 	ldw	r2,-36(fp)
   14ee8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   14eec:	e0800217 	ldw	r2,8(fp)
   14ef0:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   14ef4:	e0bff18b 	ldhu	r2,-58(fp)
   14ef8:	00008806 	br	1511c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   14efc:	d0a84b17 	ldw	r2,-24276(gp)
   14f00:	d0e84b17 	ldw	r3,-24276(gp)
   14f04:	19000c03 	ldbu	r4,48(r3)
   14f08:	e0fff203 	ldbu	r3,-56(fp)
   14f0c:	20c6b03a 	or	r3,r4,r3
   14f10:	1809883a 	mov	r4,r3
   14f14:	00ffe004 	movi	r3,-128
   14f18:	20c6b03a 	or	r3,r4,r3
   14f1c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   14f20:	d0a84b17 	ldw	r2,-24276(gp)
   14f24:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   14f28:	d0a84b17 	ldw	r2,-24276(gp)
   14f2c:	e0ffff0b 	ldhu	r3,-4(fp)
   14f30:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   14f34:	e13ffc17 	ldw	r4,-16(fp)
   14f38:	0015a680 	call	15a68 <OS_EventTaskWaitMulti>
   14f3c:	e0bff317 	ldw	r2,-52(fp)
   14f40:	e0bff815 	stw	r2,-32(fp)
   14f44:	e0bff817 	ldw	r2,-32(fp)
   14f48:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   14f4c:	00161dc0 	call	161dc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f50:	0005303a 	rdctl	r2,status
   14f54:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f58:	e0fff917 	ldw	r3,-28(fp)
   14f5c:	00bfff84 	movi	r2,-2
   14f60:	1884703a 	and	r2,r3,r2
   14f64:	1001703a 	wrctl	status,r2
  
  return context;
   14f68:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   14f6c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   14f70:	d0a84b17 	ldw	r2,-24276(gp)
   14f74:	10800c43 	ldbu	r2,49(r2)
   14f78:	10803fcc 	andi	r2,r2,255
   14f7c:	10000226 	beq	r2,zero,14f88 <OSEventPendMulti+0x468>
   14f80:	108000a0 	cmpeqi	r2,r2,2
   14f84:	10001826 	beq	r2,zero,14fe8 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   14f88:	d0a84b17 	ldw	r2,-24276(gp)
   14f8c:	10800717 	ldw	r2,28(r2)
   14f90:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   14f94:	e0bff017 	ldw	r2,-64(fp)
   14f98:	10000b26 	beq	r2,zero,14fc8 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   14f9c:	e0bffd17 	ldw	r2,-12(fp)
   14fa0:	10c00104 	addi	r3,r2,4
   14fa4:	e0fffd15 	stw	r3,-12(fp)
   14fa8:	e0fff017 	ldw	r3,-64(fp)
   14fac:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   14fb0:	e0bffd17 	ldw	r2,-12(fp)
   14fb4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   14fb8:	e0bff18b 	ldhu	r2,-58(fp)
   14fbc:	10800044 	addi	r2,r2,1
   14fc0:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   14fc4:	00000d06 	br	14ffc <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   14fc8:	d0a84b17 	ldw	r2,-24276(gp)
   14fcc:	00c00044 	movi	r3,1
   14fd0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   14fd4:	d0a84b17 	ldw	r2,-24276(gp)
   14fd8:	1009883a 	mov	r4,r2
   14fdc:	e17ffc17 	ldw	r5,-16(fp)
   14fe0:	0015c680 	call	15c68 <OS_EventTaskRemoveMulti>
             }
			 break;
   14fe4:	00000506 	br	14ffc <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   14fe8:	d0a84b17 	ldw	r2,-24276(gp)
   14fec:	1009883a 	mov	r4,r2
   14ff0:	e17ffc17 	ldw	r5,-16(fp)
   14ff4:	0015c680 	call	15c68 <OS_EventTaskRemoveMulti>
             break;
   14ff8:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   14ffc:	d0a84b17 	ldw	r2,-24276(gp)
   15000:	10800c43 	ldbu	r2,49(r2)
   15004:	10803fcc 	andi	r2,r2,255
   15008:	10000326 	beq	r2,zero,15018 <OSEventPendMulti+0x4f8>
   1500c:	108000a0 	cmpeqi	r2,r2,2
   15010:	1000231e 	bne	r2,zero,150a0 <OSEventPendMulti+0x580>
   15014:	00002a06 	br	150c0 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   15018:	e0bff017 	ldw	r2,-64(fp)
   1501c:	10800003 	ldbu	r2,0(r2)
   15020:	10803fcc 	andi	r2,r2,255
   15024:	0080100e 	bge	zero,r2,15068 <OSEventPendMulti+0x548>
   15028:	10c000d0 	cmplti	r3,r2,3
   1502c:	1800071e 	bne	r3,zero,1504c <OSEventPendMulti+0x52c>
   15030:	108000e0 	cmpeqi	r2,r2,3
   15034:	10000c26 	beq	r2,zero,15068 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   15038:	e0bffe17 	ldw	r2,-8(fp)
   1503c:	10c00104 	addi	r3,r2,4
   15040:	e0fffe15 	stw	r3,-8(fp)
   15044:	10000015 	stw	zero,0(r2)
                      break;
   15048:	00001206 	br	15094 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   1504c:	e0bffe17 	ldw	r2,-8(fp)
   15050:	10c00104 	addi	r3,r2,4
   15054:	e0fffe15 	stw	r3,-8(fp)
   15058:	d0e84b17 	ldw	r3,-24276(gp)
   1505c:	18c00917 	ldw	r3,36(r3)
   15060:	10c00015 	stw	r3,0(r2)
                      break;
   15064:	00000b06 	br	15094 <OSEventPendMulti+0x574>
   15068:	e0bff317 	ldw	r2,-52(fp)
   1506c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15070:	e0bffa17 	ldw	r2,-24(fp)
   15074:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   15078:	e0bffd17 	ldw	r2,-12(fp)
   1507c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   15080:	e0800217 	ldw	r2,8(fp)
   15084:	00c00044 	movi	r3,1
   15088:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   1508c:	e0bff18b 	ldhu	r2,-58(fp)
   15090:	00002206 	br	1511c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   15094:	e0800217 	ldw	r2,8(fp)
   15098:	10000005 	stb	zero,0(r2)
             break;
   1509c:	00001006 	br	150e0 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   150a0:	e0bffe17 	ldw	r2,-8(fp)
   150a4:	10c00104 	addi	r3,r2,4
   150a8:	e0fffe15 	stw	r3,-8(fp)
   150ac:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   150b0:	e0800217 	ldw	r2,8(fp)
   150b4:	00c00384 	movi	r3,14
   150b8:	10c00005 	stb	r3,0(r2)
             break;
   150bc:	00000806 	br	150e0 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   150c0:	e0bffe17 	ldw	r2,-8(fp)
   150c4:	10c00104 	addi	r3,r2,4
   150c8:	e0fffe15 	stw	r3,-8(fp)
   150cc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   150d0:	e0800217 	ldw	r2,8(fp)
   150d4:	00c00284 	movi	r3,10
   150d8:	10c00005 	stb	r3,0(r2)
             break;
   150dc:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   150e0:	d0a84b17 	ldw	r2,-24276(gp)
   150e4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   150e8:	d0a84b17 	ldw	r2,-24276(gp)
   150ec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   150f0:	d0a84b17 	ldw	r2,-24276(gp)
   150f4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   150f8:	d0a84b17 	ldw	r2,-24276(gp)
   150fc:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   15100:	d0a84b17 	ldw	r2,-24276(gp)
   15104:	10000915 	stw	zero,36(r2)
   15108:	e0bff317 	ldw	r2,-52(fp)
   1510c:	e0bffb15 	stw	r2,-20(fp)
   15110:	e0bffb17 	ldw	r2,-20(fp)
   15114:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   15118:	e0bff18b 	ldhu	r2,-58(fp)
}
   1511c:	e037883a 	mov	sp,fp
   15120:	dfc00117 	ldw	ra,4(sp)
   15124:	df000017 	ldw	fp,0(sp)
   15128:	dec00204 	addi	sp,sp,8
   1512c:	f800283a 	ret

00015130 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   15130:	defffe04 	addi	sp,sp,-8
   15134:	dfc00115 	stw	ra,4(sp)
   15138:	df000015 	stw	fp,0(sp)
   1513c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   15140:	0024a480 	call	24a48 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   15144:	0015ea40 	call	15ea4 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   15148:	0015ee80 	call	15ee8 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   1514c:	00160480 	call	16048 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   15150:	0015dc80 	call	15dc8 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   15154:	0017fc80 	call	17fc8 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   15158:	00194980 	call	19498 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   1515c:	001a6cc0 	call	1a6cc <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   15160:	0015f500 	call	15f50 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   15164:	0015fcc0 	call	15fcc <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   15168:	0024a640 	call	24a64 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   1516c:	00168b40 	call	168b4 <OSDebugInit>
#endif
}
   15170:	e037883a 	mov	sp,fp
   15174:	dfc00117 	ldw	ra,4(sp)
   15178:	df000017 	ldw	fp,0(sp)
   1517c:	dec00204 	addi	sp,sp,8
   15180:	f800283a 	ret

00015184 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   15184:	defffc04 	addi	sp,sp,-16
   15188:	df000315 	stw	fp,12(sp)
   1518c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15190:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
   15194:	d0a83c43 	ldbu	r2,-24335(gp)
   15198:	10803fcc 	andi	r2,r2,255
   1519c:	10800058 	cmpnei	r2,r2,1
   151a0:	1000131e 	bne	r2,zero,151f0 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   151a4:	0005303a 	rdctl	r2,status
   151a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   151ac:	e0fffe17 	ldw	r3,-8(fp)
   151b0:	00bfff84 	movi	r2,-2
   151b4:	1884703a 	and	r2,r3,r2
   151b8:	1001703a 	wrctl	status,r2
  
  return context;
   151bc:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   151c0:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
   151c4:	d0a84a03 	ldbu	r2,-24280(gp)
   151c8:	10803fcc 	andi	r2,r2,255
   151cc:	10803fe0 	cmpeqi	r2,r2,255
   151d0:	1000031e 	bne	r2,zero,151e0 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   151d4:	d0a84a03 	ldbu	r2,-24280(gp)
   151d8:	10800044 	addi	r2,r2,1
   151dc:	d0a84a05 	stb	r2,-24280(gp)
   151e0:	e0bffd17 	ldw	r2,-12(fp)
   151e4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   151e8:	e0bfff17 	ldw	r2,-4(fp)
   151ec:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   151f0:	e037883a 	mov	sp,fp
   151f4:	df000017 	ldw	fp,0(sp)
   151f8:	dec00104 	addi	sp,sp,4
   151fc:	f800283a 	ret

00015200 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   15200:	defffb04 	addi	sp,sp,-20
   15204:	dfc00415 	stw	ra,16(sp)
   15208:	df000315 	stw	fp,12(sp)
   1520c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15210:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   15214:	d0a83c43 	ldbu	r2,-24335(gp)
   15218:	10803fcc 	andi	r2,r2,255
   1521c:	10800058 	cmpnei	r2,r2,1
   15220:	10002f1e 	bne	r2,zero,152e0 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15224:	0005303a 	rdctl	r2,status
   15228:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1522c:	e0fffe17 	ldw	r3,-8(fp)
   15230:	00bfff84 	movi	r2,-2
   15234:	1884703a 	and	r2,r3,r2
   15238:	1001703a 	wrctl	status,r2
  
  return context;
   1523c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   15240:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   15244:	d0a84a03 	ldbu	r2,-24280(gp)
   15248:	10803fcc 	andi	r2,r2,255
   1524c:	10000326 	beq	r2,zero,1525c <OSIntExit+0x5c>
            OSIntNesting--;
   15250:	d0a84a03 	ldbu	r2,-24280(gp)
   15254:	10bfffc4 	addi	r2,r2,-1
   15258:	d0a84a05 	stb	r2,-24280(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   1525c:	d0a84a03 	ldbu	r2,-24280(gp)
   15260:	10803fcc 	andi	r2,r2,255
   15264:	10001a1e 	bne	r2,zero,152d0 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   15268:	d0a83c03 	ldbu	r2,-24336(gp)
   1526c:	10803fcc 	andi	r2,r2,255
   15270:	1000171e 	bne	r2,zero,152d0 <OSIntExit+0xd0>
                OS_SchedNew();
   15274:	00162a80 	call	162a8 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   15278:	d0e83e03 	ldbu	r3,-24328(gp)
   1527c:	d0a83e43 	ldbu	r2,-24327(gp)
   15280:	18c03fcc 	andi	r3,r3,255
   15284:	10803fcc 	andi	r2,r2,255
   15288:	18801126 	beq	r3,r2,152d0 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   1528c:	d0a83e03 	ldbu	r2,-24328(gp)
   15290:	10c03fcc 	andi	r3,r2,255
   15294:	00800174 	movhi	r2,5
   15298:	10bcb704 	addi	r2,r2,-3364
   1529c:	18c7883a 	add	r3,r3,r3
   152a0:	18c7883a 	add	r3,r3,r3
   152a4:	10c5883a 	add	r2,r2,r3
   152a8:	10800017 	ldw	r2,0(r2)
   152ac:	d0a84615 	stw	r2,-24296(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   152b0:	d0a84617 	ldw	r2,-24296(gp)
   152b4:	10c00e17 	ldw	r3,56(r2)
   152b8:	18c00044 	addi	r3,r3,1
   152bc:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   152c0:	d0a84117 	ldw	r2,-24316(gp)
   152c4:	10800044 	addi	r2,r2,1
   152c8:	d0a84115 	stw	r2,-24316(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   152cc:	00247880 	call	24788 <OSCtxSw>
   152d0:	e0bffd17 	ldw	r2,-12(fp)
   152d4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   152d8:	e0bfff17 	ldw	r2,-4(fp)
   152dc:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   152e0:	e037883a 	mov	sp,fp
   152e4:	dfc00117 	ldw	ra,4(sp)
   152e8:	df000017 	ldw	fp,0(sp)
   152ec:	dec00204 	addi	sp,sp,8
   152f0:	f800283a 	ret

000152f4 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   152f4:	defffc04 	addi	sp,sp,-16
   152f8:	df000315 	stw	fp,12(sp)
   152fc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15300:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   15304:	d0a83c43 	ldbu	r2,-24335(gp)
   15308:	10803fcc 	andi	r2,r2,255
   1530c:	10800058 	cmpnei	r2,r2,1
   15310:	1000161e 	bne	r2,zero,1536c <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15314:	0005303a 	rdctl	r2,status
   15318:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1531c:	e0fffe17 	ldw	r3,-8(fp)
   15320:	00bfff84 	movi	r2,-2
   15324:	1884703a 	and	r2,r3,r2
   15328:	1001703a 	wrctl	status,r2
  
  return context;
   1532c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   15330:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   15334:	d0a84a03 	ldbu	r2,-24280(gp)
   15338:	10803fcc 	andi	r2,r2,255
   1533c:	1000071e 	bne	r2,zero,1535c <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   15340:	d0a83c03 	ldbu	r2,-24336(gp)
   15344:	10803fcc 	andi	r2,r2,255
   15348:	10803fe0 	cmpeqi	r2,r2,255
   1534c:	1000031e 	bne	r2,zero,1535c <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   15350:	d0a83c03 	ldbu	r2,-24336(gp)
   15354:	10800044 	addi	r2,r2,1
   15358:	d0a83c05 	stb	r2,-24336(gp)
   1535c:	e0bffd17 	ldw	r2,-12(fp)
   15360:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15364:	e0bfff17 	ldw	r2,-4(fp)
   15368:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   1536c:	e037883a 	mov	sp,fp
   15370:	df000017 	ldw	fp,0(sp)
   15374:	dec00104 	addi	sp,sp,4
   15378:	f800283a 	ret

0001537c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   1537c:	defff804 	addi	sp,sp,-32
   15380:	dfc00715 	stw	ra,28(sp)
   15384:	df000615 	stw	fp,24(sp)
   15388:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1538c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   15390:	d0a83c43 	ldbu	r2,-24335(gp)
   15394:	10803fcc 	andi	r2,r2,255
   15398:	10800058 	cmpnei	r2,r2,1
   1539c:	1000281e 	bne	r2,zero,15440 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   153a0:	0005303a 	rdctl	r2,status
   153a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   153a8:	e0fffb17 	ldw	r3,-20(fp)
   153ac:	00bfff84 	movi	r2,-2
   153b0:	1884703a 	and	r2,r3,r2
   153b4:	1001703a 	wrctl	status,r2
  
  return context;
   153b8:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   153bc:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   153c0:	d0a83c03 	ldbu	r2,-24336(gp)
   153c4:	10803fcc 	andi	r2,r2,255
   153c8:	10001926 	beq	r2,zero,15430 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   153cc:	d0a83c03 	ldbu	r2,-24336(gp)
   153d0:	10bfffc4 	addi	r2,r2,-1
   153d4:	d0a83c05 	stb	r2,-24336(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   153d8:	d0a83c03 	ldbu	r2,-24336(gp)
   153dc:	10803fcc 	andi	r2,r2,255
   153e0:	10000e1e 	bne	r2,zero,1541c <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   153e4:	d0a84a03 	ldbu	r2,-24280(gp)
   153e8:	10803fcc 	andi	r2,r2,255
   153ec:	1000061e 	bne	r2,zero,15408 <OSSchedUnlock+0x8c>
   153f0:	e0bffa17 	ldw	r2,-24(fp)
   153f4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   153f8:	e0bffc17 	ldw	r2,-16(fp)
   153fc:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   15400:	00161dc0 	call	161dc <OS_Sched>
   15404:	00000e06 	br	15440 <OSSchedUnlock+0xc4>
   15408:	e0bffa17 	ldw	r2,-24(fp)
   1540c:	e0bffd15 	stw	r2,-12(fp)
   15410:	e0bffd17 	ldw	r2,-12(fp)
   15414:	1001703a 	wrctl	status,r2
   15418:	00000906 	br	15440 <OSSchedUnlock+0xc4>
   1541c:	e0bffa17 	ldw	r2,-24(fp)
   15420:	e0bffe15 	stw	r2,-8(fp)
   15424:	e0bffe17 	ldw	r2,-8(fp)
   15428:	1001703a 	wrctl	status,r2
   1542c:	00000406 	br	15440 <OSSchedUnlock+0xc4>
   15430:	e0bffa17 	ldw	r2,-24(fp)
   15434:	e0bfff15 	stw	r2,-4(fp)
   15438:	e0bfff17 	ldw	r2,-4(fp)
   1543c:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   15440:	e037883a 	mov	sp,fp
   15444:	dfc00117 	ldw	ra,4(sp)
   15448:	df000017 	ldw	fp,0(sp)
   1544c:	dec00204 	addi	sp,sp,8
   15450:	f800283a 	ret

00015454 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   15454:	defffe04 	addi	sp,sp,-8
   15458:	dfc00115 	stw	ra,4(sp)
   1545c:	df000015 	stw	fp,0(sp)
   15460:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   15464:	d0a83c43 	ldbu	r2,-24335(gp)
   15468:	10803fcc 	andi	r2,r2,255
   1546c:	10000f1e 	bne	r2,zero,154ac <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   15470:	00162a80 	call	162a8 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   15474:	d0a83e03 	ldbu	r2,-24328(gp)
   15478:	d0a83e45 	stb	r2,-24327(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   1547c:	d0a83e03 	ldbu	r2,-24328(gp)
   15480:	10c03fcc 	andi	r3,r2,255
   15484:	00800174 	movhi	r2,5
   15488:	10bcb704 	addi	r2,r2,-3364
   1548c:	18c7883a 	add	r3,r3,r3
   15490:	18c7883a 	add	r3,r3,r3
   15494:	10c5883a 	add	r2,r2,r3
   15498:	10800017 	ldw	r2,0(r2)
   1549c:	d0a84615 	stw	r2,-24296(gp)
        OSTCBCur      = OSTCBHighRdy;
   154a0:	d0a84617 	ldw	r2,-24296(gp)
   154a4:	d0a84b15 	stw	r2,-24276(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   154a8:	00248140 	call	24814 <OSStartHighRdy>
    }
}
   154ac:	e037883a 	mov	sp,fp
   154b0:	dfc00117 	ldw	ra,4(sp)
   154b4:	df000017 	ldw	fp,0(sp)
   154b8:	dec00204 	addi	sp,sp,8
   154bc:	f800283a 	ret

000154c0 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   154c0:	defff904 	addi	sp,sp,-28
   154c4:	dfc00615 	stw	ra,24(sp)
   154c8:	df000515 	stw	fp,20(sp)
   154cc:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   154d0:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   154d4:	01000084 	movi	r4,2
   154d8:	001cb740 	call	1cb74 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   154dc:	0005303a 	rdctl	r2,status
   154e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   154e4:	e0fffc17 	ldw	r3,-16(fp)
   154e8:	00bfff84 	movi	r2,-2
   154ec:	1884703a 	and	r2,r3,r2
   154f0:	1001703a 	wrctl	status,r2
  
  return context;
   154f4:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   154f8:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   154fc:	d0283d15 	stw	zero,-24332(gp)
   15500:	e0bffb17 	ldw	r2,-20(fp)
   15504:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15508:	e0bffd17 	ldw	r2,-12(fp)
   1550c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   15510:	0009883a 	mov	r4,zero
   15514:	001cb740 	call	1cb74 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15518:	0005303a 	rdctl	r2,status
   1551c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15520:	e0fffe17 	ldw	r3,-8(fp)
   15524:	00bfff84 	movi	r2,-2
   15528:	1884703a 	and	r2,r3,r2
   1552c:	1001703a 	wrctl	status,r2
  
  return context;
   15530:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   15534:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   15538:	d0a83d17 	ldw	r2,-24332(gp)
   1553c:	d0a84215 	stw	r2,-24312(gp)
    OSStatRdy    = OS_TRUE;
   15540:	00800044 	movi	r2,1
   15544:	d0a84e05 	stb	r2,-24264(gp)
   15548:	e0bffb17 	ldw	r2,-20(fp)
   1554c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15550:	e0bfff17 	ldw	r2,-4(fp)
   15554:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   15558:	e037883a 	mov	sp,fp
   1555c:	dfc00117 	ldw	ra,4(sp)
   15560:	df000017 	ldw	fp,0(sp)
   15564:	dec00204 	addi	sp,sp,8
   15568:	f800283a 	ret

0001556c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   1556c:	defff704 	addi	sp,sp,-36
   15570:	dfc00815 	stw	ra,32(sp)
   15574:	df000715 	stw	fp,28(sp)
   15578:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1557c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   15580:	0024a2c0 	call	24a2c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15584:	0005303a 	rdctl	r2,status
   15588:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1558c:	e0fffc17 	ldw	r3,-16(fp)
   15590:	00bfff84 	movi	r2,-2
   15594:	1884703a 	and	r2,r3,r2
   15598:	1001703a 	wrctl	status,r2
  
  return context;
   1559c:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   155a0:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   155a4:	d0a84c17 	ldw	r2,-24272(gp)
   155a8:	10800044 	addi	r2,r2,1
   155ac:	d0a84c15 	stw	r2,-24272(gp)
   155b0:	e0bffb17 	ldw	r2,-20(fp)
   155b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   155b8:	e0bffd17 	ldw	r2,-12(fp)
   155bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   155c0:	d0a83c43 	ldbu	r2,-24335(gp)
   155c4:	10803fcc 	andi	r2,r2,255
   155c8:	10800058 	cmpnei	r2,r2,1
   155cc:	1000691e 	bne	r2,zero,15774 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   155d0:	d0a84003 	ldbu	r2,-24320(gp)
   155d4:	10803fcc 	andi	r2,r2,255
   155d8:	10c00060 	cmpeqi	r3,r2,1
   155dc:	1800061e 	bne	r3,zero,155f8 <OSTimeTick+0x8c>
   155e0:	10c000a0 	cmpeqi	r3,r2,2
   155e4:	1800061e 	bne	r3,zero,15600 <OSTimeTick+0x94>
   155e8:	10000a1e 	bne	r2,zero,15614 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   155ec:	00800044 	movi	r2,1
   155f0:	e0bffa05 	stb	r2,-24(fp)
                 break;
   155f4:	00000b06 	br	15624 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   155f8:	e03ffa05 	stb	zero,-24(fp)
                 break;
   155fc:	00000906 	br	15624 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   15600:	00800044 	movi	r2,1
   15604:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   15608:	00800044 	movi	r2,1
   1560c:	d0a84005 	stb	r2,-24320(gp)
                 break;
   15610:	00000406 	br	15624 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   15614:	00800044 	movi	r2,1
   15618:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   1561c:	d0284005 	stb	zero,-24320(gp)
                 break;
   15620:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   15624:	e0bffa03 	ldbu	r2,-24(fp)
   15628:	1000011e 	bne	r2,zero,15630 <OSTimeTick+0xc4>
            return;
   1562c:	00005106 	br	15774 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   15630:	d0a83f17 	ldw	r2,-24324(gp)
   15634:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   15638:	00004906 	br	15760 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1563c:	0005303a 	rdctl	r2,status
   15640:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15644:	e0fffe17 	ldw	r3,-8(fp)
   15648:	00bfff84 	movi	r2,-2
   1564c:	1884703a 	and	r2,r3,r2
   15650:	1001703a 	wrctl	status,r2
  
  return context;
   15654:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
   15658:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   1565c:	e0bff917 	ldw	r2,-28(fp)
   15660:	10800b8b 	ldhu	r2,46(r2)
   15664:	10bfffcc 	andi	r2,r2,65535
   15668:	10003626 	beq	r2,zero,15744 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   1566c:	e0bff917 	ldw	r2,-28(fp)
   15670:	10800b8b 	ldhu	r2,46(r2)
   15674:	10bfffc4 	addi	r2,r2,-1
   15678:	1007883a 	mov	r3,r2
   1567c:	e0bff917 	ldw	r2,-28(fp)
   15680:	10c00b8d 	sth	r3,46(r2)
   15684:	e0bff917 	ldw	r2,-28(fp)
   15688:	10800b8b 	ldhu	r2,46(r2)
   1568c:	10bfffcc 	andi	r2,r2,65535
   15690:	10002c1e 	bne	r2,zero,15744 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   15694:	e0bff917 	ldw	r2,-28(fp)
   15698:	10800c03 	ldbu	r2,48(r2)
   1569c:	10803fcc 	andi	r2,r2,255
   156a0:	10800dcc 	andi	r2,r2,55
   156a4:	10000b26 	beq	r2,zero,156d4 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   156a8:	e0bff917 	ldw	r2,-28(fp)
   156ac:	10c00c03 	ldbu	r3,48(r2)
   156b0:	00bff204 	movi	r2,-56
   156b4:	1884703a 	and	r2,r3,r2
   156b8:	1007883a 	mov	r3,r2
   156bc:	e0bff917 	ldw	r2,-28(fp)
   156c0:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   156c4:	e0bff917 	ldw	r2,-28(fp)
   156c8:	00c00044 	movi	r3,1
   156cc:	10c00c45 	stb	r3,49(r2)
   156d0:	00000206 	br	156dc <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   156d4:	e0bff917 	ldw	r2,-28(fp)
   156d8:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   156dc:	e0bff917 	ldw	r2,-28(fp)
   156e0:	10800c03 	ldbu	r2,48(r2)
   156e4:	10803fcc 	andi	r2,r2,255
   156e8:	1080020c 	andi	r2,r2,8
   156ec:	1000151e 	bne	r2,zero,15744 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   156f0:	e0bff917 	ldw	r2,-28(fp)
   156f4:	10c00d83 	ldbu	r3,54(r2)
   156f8:	d0a84803 	ldbu	r2,-24288(gp)
   156fc:	1884b03a 	or	r2,r3,r2
   15700:	d0a84805 	stb	r2,-24288(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15704:	e0bff917 	ldw	r2,-28(fp)
   15708:	10800d03 	ldbu	r2,52(r2)
   1570c:	10c03fcc 	andi	r3,r2,255
   15710:	e0bff917 	ldw	r2,-28(fp)
   15714:	10800d03 	ldbu	r2,52(r2)
   15718:	11003fcc 	andi	r4,r2,255
   1571c:	d0a84844 	addi	r2,gp,-24287
   15720:	2085883a 	add	r2,r4,r2
   15724:	11000003 	ldbu	r4,0(r2)
   15728:	e0bff917 	ldw	r2,-28(fp)
   1572c:	10800d43 	ldbu	r2,53(r2)
   15730:	2084b03a 	or	r2,r4,r2
   15734:	1009883a 	mov	r4,r2
   15738:	d0a84844 	addi	r2,gp,-24287
   1573c:	1885883a 	add	r2,r3,r2
   15740:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   15744:	e0bff917 	ldw	r2,-28(fp)
   15748:	10800517 	ldw	r2,20(r2)
   1574c:	e0bff915 	stw	r2,-28(fp)
   15750:	e0bffb17 	ldw	r2,-20(fp)
   15754:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15758:	e0bfff17 	ldw	r2,-4(fp)
   1575c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   15760:	e0bff917 	ldw	r2,-28(fp)
   15764:	10800c83 	ldbu	r2,50(r2)
   15768:	10803fcc 	andi	r2,r2,255
   1576c:	10800518 	cmpnei	r2,r2,20
   15770:	103fb21e 	bne	r2,zero,1563c <__alt_mem_Flash_flash_data+0xf401563c>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   15774:	e037883a 	mov	sp,fp
   15778:	dfc00117 	ldw	ra,4(sp)
   1577c:	df000017 	ldw	fp,0(sp)
   15780:	dec00204 	addi	sp,sp,8
   15784:	f800283a 	ret

00015788 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   15788:	deffff04 	addi	sp,sp,-4
   1578c:	df000015 	stw	fp,0(sp)
   15790:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   15794:	00804784 	movi	r2,286
}
   15798:	e037883a 	mov	sp,fp
   1579c:	df000017 	ldw	fp,0(sp)
   157a0:	dec00104 	addi	sp,sp,4
   157a4:	f800283a 	ret

000157a8 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   157a8:	deffff04 	addi	sp,sp,-4
   157ac:	df000015 	stw	fp,0(sp)
   157b0:	d839883a 	mov	fp,sp
}
   157b4:	e037883a 	mov	sp,fp
   157b8:	df000017 	ldw	fp,0(sp)
   157bc:	dec00104 	addi	sp,sp,4
   157c0:	f800283a 	ret

000157c4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   157c4:	defff804 	addi	sp,sp,-32
   157c8:	dfc00715 	stw	ra,28(sp)
   157cc:	df000615 	stw	fp,24(sp)
   157d0:	df000604 	addi	fp,sp,24
   157d4:	e13ffc15 	stw	r4,-16(fp)
   157d8:	e17ffd15 	stw	r5,-12(fp)
   157dc:	3007883a 	mov	r3,r6
   157e0:	3805883a 	mov	r2,r7
   157e4:	e0fffe05 	stb	r3,-8(fp)
   157e8:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   157ec:	e0bffc17 	ldw	r2,-16(fp)
   157f0:	10800283 	ldbu	r2,10(r2)
   157f4:	10c03fcc 	andi	r3,r2,255
   157f8:	008000b4 	movhi	r2,2
   157fc:	10976104 	addi	r2,r2,23940
   15800:	10c5883a 	add	r2,r2,r3
   15804:	10800003 	ldbu	r2,0(r2)
   15808:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   1580c:	e0bffa03 	ldbu	r2,-24(fp)
   15810:	e0fffc17 	ldw	r3,-16(fp)
   15814:	1885883a 	add	r2,r3,r2
   15818:	10800204 	addi	r2,r2,8
   1581c:	108000c3 	ldbu	r2,3(r2)
   15820:	10c03fcc 	andi	r3,r2,255
   15824:	008000b4 	movhi	r2,2
   15828:	10976104 	addi	r2,r2,23940
   1582c:	10c5883a 	add	r2,r2,r3
   15830:	10800003 	ldbu	r2,0(r2)
   15834:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   15838:	e0bffa03 	ldbu	r2,-24(fp)
   1583c:	100490fa 	slli	r2,r2,3
   15840:	1007883a 	mov	r3,r2
   15844:	e0bffa43 	ldbu	r2,-23(fp)
   15848:	1885883a 	add	r2,r3,r2
   1584c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   15850:	e0fffa83 	ldbu	r3,-22(fp)
   15854:	00800174 	movhi	r2,5
   15858:	10bcb704 	addi	r2,r2,-3364
   1585c:	18c7883a 	add	r3,r3,r3
   15860:	18c7883a 	add	r3,r3,r3
   15864:	10c5883a 	add	r2,r2,r3
   15868:	10800017 	ldw	r2,0(r2)
   1586c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   15870:	e0bffb17 	ldw	r2,-20(fp)
   15874:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   15878:	e0bffb17 	ldw	r2,-20(fp)
   1587c:	e0fffd17 	ldw	r3,-12(fp)
   15880:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   15884:	e0bffb17 	ldw	r2,-20(fp)
   15888:	10800c03 	ldbu	r2,48(r2)
   1588c:	1007883a 	mov	r3,r2
   15890:	e0bffe03 	ldbu	r2,-8(fp)
   15894:	0084303a 	nor	r2,zero,r2
   15898:	1884703a 	and	r2,r3,r2
   1589c:	1007883a 	mov	r3,r2
   158a0:	e0bffb17 	ldw	r2,-20(fp)
   158a4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   158a8:	e0bffb17 	ldw	r2,-20(fp)
   158ac:	e0ffff03 	ldbu	r3,-4(fp)
   158b0:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   158b4:	e0bffb17 	ldw	r2,-20(fp)
   158b8:	10800c03 	ldbu	r2,48(r2)
   158bc:	10803fcc 	andi	r2,r2,255
   158c0:	1080020c 	andi	r2,r2,8
   158c4:	1000111e 	bne	r2,zero,1590c <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   158c8:	e0bffb17 	ldw	r2,-20(fp)
   158cc:	10c00d83 	ldbu	r3,54(r2)
   158d0:	d0a84803 	ldbu	r2,-24288(gp)
   158d4:	1884b03a 	or	r2,r3,r2
   158d8:	d0a84805 	stb	r2,-24288(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   158dc:	e0fffa03 	ldbu	r3,-24(fp)
   158e0:	e13ffa03 	ldbu	r4,-24(fp)
   158e4:	d0a84844 	addi	r2,gp,-24287
   158e8:	2085883a 	add	r2,r4,r2
   158ec:	11000003 	ldbu	r4,0(r2)
   158f0:	e0bffb17 	ldw	r2,-20(fp)
   158f4:	10800d43 	ldbu	r2,53(r2)
   158f8:	2084b03a 	or	r2,r4,r2
   158fc:	1009883a 	mov	r4,r2
   15900:	d0a84844 	addi	r2,gp,-24287
   15904:	1885883a 	add	r2,r3,r2
   15908:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   1590c:	e13ffb17 	ldw	r4,-20(fp)
   15910:	e17ffc17 	ldw	r5,-16(fp)
   15914:	0015bb40 	call	15bb4 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   15918:	e0bffb17 	ldw	r2,-20(fp)
   1591c:	10800817 	ldw	r2,32(r2)
   15920:	10000826 	beq	r2,zero,15944 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   15924:	e0bffb17 	ldw	r2,-20(fp)
   15928:	10800817 	ldw	r2,32(r2)
   1592c:	e13ffb17 	ldw	r4,-20(fp)
   15930:	100b883a 	mov	r5,r2
   15934:	0015c680 	call	15c68 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   15938:	e0bffb17 	ldw	r2,-20(fp)
   1593c:	e0fffc17 	ldw	r3,-16(fp)
   15940:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   15944:	e0bffa83 	ldbu	r2,-22(fp)
}
   15948:	e037883a 	mov	sp,fp
   1594c:	dfc00117 	ldw	ra,4(sp)
   15950:	df000017 	ldw	fp,0(sp)
   15954:	dec00204 	addi	sp,sp,8
   15958:	f800283a 	ret

0001595c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   1595c:	defffd04 	addi	sp,sp,-12
   15960:	df000215 	stw	fp,8(sp)
   15964:	df000204 	addi	fp,sp,8
   15968:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   1596c:	d0a84b17 	ldw	r2,-24276(gp)
   15970:	e0ffff17 	ldw	r3,-4(fp)
   15974:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   15978:	d0a84b17 	ldw	r2,-24276(gp)
   1597c:	10800d03 	ldbu	r2,52(r2)
   15980:	10803fcc 	andi	r2,r2,255
   15984:	d0e84b17 	ldw	r3,-24276(gp)
   15988:	18c00d03 	ldbu	r3,52(r3)
   1598c:	18c03fcc 	andi	r3,r3,255
   15990:	e13fff17 	ldw	r4,-4(fp)
   15994:	20c7883a 	add	r3,r4,r3
   15998:	18c00204 	addi	r3,r3,8
   1599c:	190000c3 	ldbu	r4,3(r3)
   159a0:	d0e84b17 	ldw	r3,-24276(gp)
   159a4:	18c00d43 	ldbu	r3,53(r3)
   159a8:	20c6b03a 	or	r3,r4,r3
   159ac:	1809883a 	mov	r4,r3
   159b0:	e0ffff17 	ldw	r3,-4(fp)
   159b4:	1885883a 	add	r2,r3,r2
   159b8:	10800204 	addi	r2,r2,8
   159bc:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   159c0:	e0bfff17 	ldw	r2,-4(fp)
   159c4:	10c00283 	ldbu	r3,10(r2)
   159c8:	d0a84b17 	ldw	r2,-24276(gp)
   159cc:	10800d83 	ldbu	r2,54(r2)
   159d0:	1884b03a 	or	r2,r3,r2
   159d4:	1007883a 	mov	r3,r2
   159d8:	e0bfff17 	ldw	r2,-4(fp)
   159dc:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   159e0:	d0a84b17 	ldw	r2,-24276(gp)
   159e4:	10800d03 	ldbu	r2,52(r2)
   159e8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   159ec:	e0fffe03 	ldbu	r3,-8(fp)
   159f0:	e13ffe03 	ldbu	r4,-8(fp)
   159f4:	d0a84844 	addi	r2,gp,-24287
   159f8:	2085883a 	add	r2,r4,r2
   159fc:	10800003 	ldbu	r2,0(r2)
   15a00:	1009883a 	mov	r4,r2
   15a04:	d0a84b17 	ldw	r2,-24276(gp)
   15a08:	10800d43 	ldbu	r2,53(r2)
   15a0c:	0084303a 	nor	r2,zero,r2
   15a10:	2084703a 	and	r2,r4,r2
   15a14:	1009883a 	mov	r4,r2
   15a18:	d0a84844 	addi	r2,gp,-24287
   15a1c:	1885883a 	add	r2,r3,r2
   15a20:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   15a24:	e0fffe03 	ldbu	r3,-8(fp)
   15a28:	d0a84844 	addi	r2,gp,-24287
   15a2c:	1885883a 	add	r2,r3,r2
   15a30:	10800003 	ldbu	r2,0(r2)
   15a34:	10803fcc 	andi	r2,r2,255
   15a38:	1000071e 	bne	r2,zero,15a58 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   15a3c:	d0a84b17 	ldw	r2,-24276(gp)
   15a40:	10800d83 	ldbu	r2,54(r2)
   15a44:	0084303a 	nor	r2,zero,r2
   15a48:	1007883a 	mov	r3,r2
   15a4c:	d0a84803 	ldbu	r2,-24288(gp)
   15a50:	1884703a 	and	r2,r3,r2
   15a54:	d0a84805 	stb	r2,-24288(gp)
    }
}
   15a58:	e037883a 	mov	sp,fp
   15a5c:	df000017 	ldw	fp,0(sp)
   15a60:	dec00104 	addi	sp,sp,4
   15a64:	f800283a 	ret

00015a68 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   15a68:	defffb04 	addi	sp,sp,-20
   15a6c:	df000415 	stw	fp,16(sp)
   15a70:	df000404 	addi	fp,sp,16
   15a74:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   15a78:	d0a84b17 	ldw	r2,-24276(gp)
   15a7c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   15a80:	d0a84b17 	ldw	r2,-24276(gp)
   15a84:	e0ffff17 	ldw	r3,-4(fp)
   15a88:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   15a8c:	e0bfff17 	ldw	r2,-4(fp)
   15a90:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   15a94:	e0bffc17 	ldw	r2,-16(fp)
   15a98:	10800017 	ldw	r2,0(r2)
   15a9c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   15aa0:	00002006 	br	15b24 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   15aa4:	d0a84b17 	ldw	r2,-24276(gp)
   15aa8:	10800d03 	ldbu	r2,52(r2)
   15aac:	10803fcc 	andi	r2,r2,255
   15ab0:	d0e84b17 	ldw	r3,-24276(gp)
   15ab4:	18c00d03 	ldbu	r3,52(r3)
   15ab8:	18c03fcc 	andi	r3,r3,255
   15abc:	e13ffd17 	ldw	r4,-12(fp)
   15ac0:	20c7883a 	add	r3,r4,r3
   15ac4:	18c00204 	addi	r3,r3,8
   15ac8:	190000c3 	ldbu	r4,3(r3)
   15acc:	d0e84b17 	ldw	r3,-24276(gp)
   15ad0:	18c00d43 	ldbu	r3,53(r3)
   15ad4:	20c6b03a 	or	r3,r4,r3
   15ad8:	1809883a 	mov	r4,r3
   15adc:	e0fffd17 	ldw	r3,-12(fp)
   15ae0:	1885883a 	add	r2,r3,r2
   15ae4:	10800204 	addi	r2,r2,8
   15ae8:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   15aec:	e0bffd17 	ldw	r2,-12(fp)
   15af0:	10c00283 	ldbu	r3,10(r2)
   15af4:	d0a84b17 	ldw	r2,-24276(gp)
   15af8:	10800d83 	ldbu	r2,54(r2)
   15afc:	1884b03a 	or	r2,r3,r2
   15b00:	1007883a 	mov	r3,r2
   15b04:	e0bffd17 	ldw	r2,-12(fp)
   15b08:	10c00285 	stb	r3,10(r2)
        pevents++;
   15b0c:	e0bffc17 	ldw	r2,-16(fp)
   15b10:	10800104 	addi	r2,r2,4
   15b14:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   15b18:	e0bffc17 	ldw	r2,-16(fp)
   15b1c:	10800017 	ldw	r2,0(r2)
   15b20:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   15b24:	e0bffd17 	ldw	r2,-12(fp)
   15b28:	103fde1e 	bne	r2,zero,15aa4 <__alt_mem_Flash_flash_data+0xf4015aa4>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   15b2c:	d0a84b17 	ldw	r2,-24276(gp)
   15b30:	10800d03 	ldbu	r2,52(r2)
   15b34:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   15b38:	e0fffe03 	ldbu	r3,-8(fp)
   15b3c:	e13ffe03 	ldbu	r4,-8(fp)
   15b40:	d0a84844 	addi	r2,gp,-24287
   15b44:	2085883a 	add	r2,r4,r2
   15b48:	10800003 	ldbu	r2,0(r2)
   15b4c:	1009883a 	mov	r4,r2
   15b50:	d0a84b17 	ldw	r2,-24276(gp)
   15b54:	10800d43 	ldbu	r2,53(r2)
   15b58:	0084303a 	nor	r2,zero,r2
   15b5c:	2084703a 	and	r2,r4,r2
   15b60:	1009883a 	mov	r4,r2
   15b64:	d0a84844 	addi	r2,gp,-24287
   15b68:	1885883a 	add	r2,r3,r2
   15b6c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   15b70:	e0fffe03 	ldbu	r3,-8(fp)
   15b74:	d0a84844 	addi	r2,gp,-24287
   15b78:	1885883a 	add	r2,r3,r2
   15b7c:	10800003 	ldbu	r2,0(r2)
   15b80:	10803fcc 	andi	r2,r2,255
   15b84:	1000071e 	bne	r2,zero,15ba4 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   15b88:	d0a84b17 	ldw	r2,-24276(gp)
   15b8c:	10800d83 	ldbu	r2,54(r2)
   15b90:	0084303a 	nor	r2,zero,r2
   15b94:	1007883a 	mov	r3,r2
   15b98:	d0a84803 	ldbu	r2,-24288(gp)
   15b9c:	1884703a 	and	r2,r3,r2
   15ba0:	d0a84805 	stb	r2,-24288(gp)
    }
}
   15ba4:	e037883a 	mov	sp,fp
   15ba8:	df000017 	ldw	fp,0(sp)
   15bac:	dec00104 	addi	sp,sp,4
   15bb0:	f800283a 	ret

00015bb4 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   15bb4:	defffc04 	addi	sp,sp,-16
   15bb8:	df000315 	stw	fp,12(sp)
   15bbc:	df000304 	addi	fp,sp,12
   15bc0:	e13ffe15 	stw	r4,-8(fp)
   15bc4:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   15bc8:	e0bffe17 	ldw	r2,-8(fp)
   15bcc:	10800d03 	ldbu	r2,52(r2)
   15bd0:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   15bd4:	e0bffd03 	ldbu	r2,-12(fp)
   15bd8:	e0fffd03 	ldbu	r3,-12(fp)
   15bdc:	e13fff17 	ldw	r4,-4(fp)
   15be0:	20c7883a 	add	r3,r4,r3
   15be4:	18c00204 	addi	r3,r3,8
   15be8:	18c000c3 	ldbu	r3,3(r3)
   15bec:	1809883a 	mov	r4,r3
   15bf0:	e0fffe17 	ldw	r3,-8(fp)
   15bf4:	18c00d43 	ldbu	r3,53(r3)
   15bf8:	00c6303a 	nor	r3,zero,r3
   15bfc:	20c6703a 	and	r3,r4,r3
   15c00:	1809883a 	mov	r4,r3
   15c04:	e0ffff17 	ldw	r3,-4(fp)
   15c08:	1885883a 	add	r2,r3,r2
   15c0c:	10800204 	addi	r2,r2,8
   15c10:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   15c14:	e0bffd03 	ldbu	r2,-12(fp)
   15c18:	e0ffff17 	ldw	r3,-4(fp)
   15c1c:	1885883a 	add	r2,r3,r2
   15c20:	10800204 	addi	r2,r2,8
   15c24:	108000c3 	ldbu	r2,3(r2)
   15c28:	10803fcc 	andi	r2,r2,255
   15c2c:	10000a1e 	bne	r2,zero,15c58 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   15c30:	e0bfff17 	ldw	r2,-4(fp)
   15c34:	10800283 	ldbu	r2,10(r2)
   15c38:	1007883a 	mov	r3,r2
   15c3c:	e0bffe17 	ldw	r2,-8(fp)
   15c40:	10800d83 	ldbu	r2,54(r2)
   15c44:	0084303a 	nor	r2,zero,r2
   15c48:	1884703a 	and	r2,r3,r2
   15c4c:	1007883a 	mov	r3,r2
   15c50:	e0bfff17 	ldw	r2,-4(fp)
   15c54:	10c00285 	stb	r3,10(r2)
    }
}
   15c58:	e037883a 	mov	sp,fp
   15c5c:	df000017 	ldw	fp,0(sp)
   15c60:	dec00104 	addi	sp,sp,4
   15c64:	f800283a 	ret

00015c68 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   15c68:	defffa04 	addi	sp,sp,-24
   15c6c:	df000515 	stw	fp,20(sp)
   15c70:	df000504 	addi	fp,sp,20
   15c74:	e13ffe15 	stw	r4,-8(fp)
   15c78:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   15c7c:	e0bffe17 	ldw	r2,-8(fp)
   15c80:	10800d03 	ldbu	r2,52(r2)
   15c84:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   15c88:	e0bffe17 	ldw	r2,-8(fp)
   15c8c:	10800d83 	ldbu	r2,54(r2)
   15c90:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   15c94:	e0bffe17 	ldw	r2,-8(fp)
   15c98:	10800d43 	ldbu	r2,53(r2)
   15c9c:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   15ca0:	e0bfff17 	ldw	r2,-4(fp)
   15ca4:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   15ca8:	e0bffb17 	ldw	r2,-20(fp)
   15cac:	10800017 	ldw	r2,0(r2)
   15cb0:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   15cb4:	00002506 	br	15d4c <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   15cb8:	e0bffd03 	ldbu	r2,-12(fp)
   15cbc:	e0fffd03 	ldbu	r3,-12(fp)
   15cc0:	e13ffc17 	ldw	r4,-16(fp)
   15cc4:	20c7883a 	add	r3,r4,r3
   15cc8:	18c00204 	addi	r3,r3,8
   15ccc:	18c000c3 	ldbu	r3,3(r3)
   15cd0:	1809883a 	mov	r4,r3
   15cd4:	e0fffd83 	ldbu	r3,-10(fp)
   15cd8:	00c6303a 	nor	r3,zero,r3
   15cdc:	20c6703a 	and	r3,r4,r3
   15ce0:	1809883a 	mov	r4,r3
   15ce4:	e0fffc17 	ldw	r3,-16(fp)
   15ce8:	1885883a 	add	r2,r3,r2
   15cec:	10800204 	addi	r2,r2,8
   15cf0:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   15cf4:	e0bffd03 	ldbu	r2,-12(fp)
   15cf8:	e0fffc17 	ldw	r3,-16(fp)
   15cfc:	1885883a 	add	r2,r3,r2
   15d00:	10800204 	addi	r2,r2,8
   15d04:	108000c3 	ldbu	r2,3(r2)
   15d08:	10803fcc 	andi	r2,r2,255
   15d0c:	1000091e 	bne	r2,zero,15d34 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   15d10:	e0bffc17 	ldw	r2,-16(fp)
   15d14:	10800283 	ldbu	r2,10(r2)
   15d18:	1007883a 	mov	r3,r2
   15d1c:	e0bffd43 	ldbu	r2,-11(fp)
   15d20:	0084303a 	nor	r2,zero,r2
   15d24:	1884703a 	and	r2,r3,r2
   15d28:	1007883a 	mov	r3,r2
   15d2c:	e0bffc17 	ldw	r2,-16(fp)
   15d30:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   15d34:	e0bffb17 	ldw	r2,-20(fp)
   15d38:	10800104 	addi	r2,r2,4
   15d3c:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   15d40:	e0bffb17 	ldw	r2,-20(fp)
   15d44:	10800017 	ldw	r2,0(r2)
   15d48:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   15d4c:	e0bffc17 	ldw	r2,-16(fp)
   15d50:	103fd91e 	bne	r2,zero,15cb8 <__alt_mem_Flash_flash_data+0xf4015cb8>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   15d54:	e037883a 	mov	sp,fp
   15d58:	df000017 	ldw	fp,0(sp)
   15d5c:	dec00104 	addi	sp,sp,4
   15d60:	f800283a 	ret

00015d64 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   15d64:	defffc04 	addi	sp,sp,-16
   15d68:	df000315 	stw	fp,12(sp)
   15d6c:	df000304 	addi	fp,sp,12
   15d70:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   15d74:	e0bfff17 	ldw	r2,-4(fp)
   15d78:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   15d7c:	e0bfff17 	ldw	r2,-4(fp)
   15d80:	108002c4 	addi	r2,r2,11
   15d84:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15d88:	e03ffe05 	stb	zero,-8(fp)
   15d8c:	00000706 	br	15dac <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   15d90:	e0bffd17 	ldw	r2,-12(fp)
   15d94:	10c00044 	addi	r3,r2,1
   15d98:	e0fffd15 	stw	r3,-12(fp)
   15d9c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15da0:	e0bffe03 	ldbu	r2,-8(fp)
   15da4:	10800044 	addi	r2,r2,1
   15da8:	e0bffe05 	stb	r2,-8(fp)
   15dac:	e0bffe03 	ldbu	r2,-8(fp)
   15db0:	108000f0 	cmpltui	r2,r2,3
   15db4:	103ff61e 	bne	r2,zero,15d90 <__alt_mem_Flash_flash_data+0xf4015d90>
        *ptbl++ = 0;
    }
}
   15db8:	e037883a 	mov	sp,fp
   15dbc:	df000017 	ldw	fp,0(sp)
   15dc0:	dec00104 	addi	sp,sp,4
   15dc4:	f800283a 	ret

00015dc8 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   15dc8:	defffb04 	addi	sp,sp,-20
   15dcc:	dfc00415 	stw	ra,16(sp)
   15dd0:	df000315 	stw	fp,12(sp)
   15dd4:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   15dd8:	01000174 	movhi	r4,5
   15ddc:	2138a304 	addi	r4,r4,-7540
   15de0:	0142d004 	movi	r5,2880
   15de4:	00161280 	call	16128 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   15de8:	00800174 	movhi	r2,5
   15dec:	10b8a304 	addi	r2,r2,-7540
   15df0:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   15df4:	00800174 	movhi	r2,5
   15df8:	10b8af04 	addi	r2,r2,-7492
   15dfc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   15e00:	e03ffd0d 	sth	zero,-12(fp)
   15e04:	00001306 	br	15e54 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   15e08:	e0bffe17 	ldw	r2,-8(fp)
   15e0c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   15e10:	e0bffe17 	ldw	r2,-8(fp)
   15e14:	e0ffff17 	ldw	r3,-4(fp)
   15e18:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   15e1c:	e0bffe17 	ldw	r2,-8(fp)
   15e20:	00c00fc4 	movi	r3,63
   15e24:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   15e28:	e0bffe17 	ldw	r2,-8(fp)
   15e2c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   15e30:	e0bffe17 	ldw	r2,-8(fp)
   15e34:	10800c04 	addi	r2,r2,48
   15e38:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   15e3c:	e0bfff17 	ldw	r2,-4(fp)
   15e40:	10800c04 	addi	r2,r2,48
   15e44:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   15e48:	e0bffd0b 	ldhu	r2,-12(fp)
   15e4c:	10800044 	addi	r2,r2,1
   15e50:	e0bffd0d 	sth	r2,-12(fp)
   15e54:	e0bffd0b 	ldhu	r2,-12(fp)
   15e58:	10800ef0 	cmpltui	r2,r2,59
   15e5c:	103fea1e 	bne	r2,zero,15e08 <__alt_mem_Flash_flash_data+0xf4015e08>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   15e60:	e0bffe17 	ldw	r2,-8(fp)
   15e64:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   15e68:	e0bffe17 	ldw	r2,-8(fp)
   15e6c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   15e70:	e0bffe17 	ldw	r2,-8(fp)
   15e74:	00c00fc4 	movi	r3,63
   15e78:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   15e7c:	e0bffe17 	ldw	r2,-8(fp)
   15e80:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   15e84:	00800174 	movhi	r2,5
   15e88:	10b8a304 	addi	r2,r2,-7540
   15e8c:	d0a84915 	stw	r2,-24284(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   15e90:	e037883a 	mov	sp,fp
   15e94:	dfc00117 	ldw	ra,4(sp)
   15e98:	df000017 	ldw	fp,0(sp)
   15e9c:	dec00204 	addi	sp,sp,8
   15ea0:	f800283a 	ret

00015ea4 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   15ea4:	deffff04 	addi	sp,sp,-4
   15ea8:	df000015 	stw	fp,0(sp)
   15eac:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   15eb0:	d0284c15 	stw	zero,-24272(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   15eb4:	d0284a05 	stb	zero,-24280(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   15eb8:	d0283c05 	stb	zero,-24336(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   15ebc:	d0284445 	stb	zero,-24303(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   15ec0:	d0283c45 	stb	zero,-24335(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   15ec4:	d0284115 	stw	zero,-24316(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   15ec8:	d0283d15 	stw	zero,-24332(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   15ecc:	d0284f15 	stw	zero,-24260(gp)
    OSIdleCtrMax  = 0L;
   15ed0:	d0284215 	stw	zero,-24312(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   15ed4:	d0284e05 	stb	zero,-24264(gp)
#endif
}
   15ed8:	e037883a 	mov	sp,fp
   15edc:	df000017 	ldw	fp,0(sp)
   15ee0:	dec00104 	addi	sp,sp,4
   15ee4:	f800283a 	ret

00015ee8 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   15ee8:	defffd04 	addi	sp,sp,-12
   15eec:	df000215 	stw	fp,8(sp)
   15ef0:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   15ef4:	d0284805 	stb	zero,-24288(gp)
    prdytbl       = &OSRdyTbl[0];
   15ef8:	d0a84844 	addi	r2,gp,-24287
   15efc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   15f00:	e03ffe05 	stb	zero,-8(fp)
   15f04:	00000706 	br	15f24 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   15f08:	e0bfff17 	ldw	r2,-4(fp)
   15f0c:	10c00044 	addi	r3,r2,1
   15f10:	e0ffff15 	stw	r3,-4(fp)
   15f14:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   15f18:	e0bffe03 	ldbu	r2,-8(fp)
   15f1c:	10800044 	addi	r2,r2,1
   15f20:	e0bffe05 	stb	r2,-8(fp)
   15f24:	e0bffe03 	ldbu	r2,-8(fp)
   15f28:	108000f0 	cmpltui	r2,r2,3
   15f2c:	103ff61e 	bne	r2,zero,15f08 <__alt_mem_Flash_flash_data+0xf4015f08>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   15f30:	d0283e45 	stb	zero,-24327(gp)
    OSPrioHighRdy = 0;
   15f34:	d0283e05 	stb	zero,-24328(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   15f38:	d0284615 	stw	zero,-24296(gp)
    OSTCBCur      = (OS_TCB *)0;
   15f3c:	d0284b15 	stw	zero,-24276(gp)
}
   15f40:	e037883a 	mov	sp,fp
   15f44:	df000017 	ldw	fp,0(sp)
   15f48:	dec00104 	addi	sp,sp,4
   15f4c:	f800283a 	ret

00015f50 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   15f50:	defff804 	addi	sp,sp,-32
   15f54:	dfc00715 	stw	ra,28(sp)
   15f58:	df000615 	stw	fp,24(sp)
   15f5c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   15f60:	00bfffd4 	movui	r2,65535
   15f64:	d8800015 	stw	r2,0(sp)
   15f68:	00800174 	movhi	r2,5
   15f6c:	10b6a304 	addi	r2,r2,-9588
   15f70:	d8800115 	stw	r2,4(sp)
   15f74:	00808004 	movi	r2,512
   15f78:	d8800215 	stw	r2,8(sp)
   15f7c:	d8000315 	stw	zero,12(sp)
   15f80:	008000c4 	movi	r2,3
   15f84:	d8800415 	stw	r2,16(sp)
   15f88:	01000074 	movhi	r4,1
   15f8c:	2118f804 	addi	r4,r4,25568
   15f90:	000b883a 	mov	r5,zero
   15f94:	01800174 	movhi	r6,5
   15f98:	31b8a204 	addi	r6,r6,-7544
   15f9c:	01c00504 	movi	r7,20
   15fa0:	001b97c0 	call	1b97c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   15fa4:	01000504 	movi	r4,20
   15fa8:	014000b4 	movhi	r5,2
   15fac:	2957a104 	addi	r5,r5,24196
   15fb0:	e1bfff04 	addi	r6,fp,-4
   15fb4:	001c2480 	call	1c248 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   15fb8:	e037883a 	mov	sp,fp
   15fbc:	dfc00117 	ldw	ra,4(sp)
   15fc0:	df000017 	ldw	fp,0(sp)
   15fc4:	dec00204 	addi	sp,sp,8
   15fc8:	f800283a 	ret

00015fcc <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   15fcc:	defff804 	addi	sp,sp,-32
   15fd0:	dfc00715 	stw	ra,28(sp)
   15fd4:	df000615 	stw	fp,24(sp)
   15fd8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   15fdc:	00bfff94 	movui	r2,65534
   15fe0:	d8800015 	stw	r2,0(sp)
   15fe4:	00800174 	movhi	r2,5
   15fe8:	10b42b04 	addi	r2,r2,-12116
   15fec:	d8800115 	stw	r2,4(sp)
   15ff0:	00808004 	movi	r2,512
   15ff4:	d8800215 	stw	r2,8(sp)
   15ff8:	d8000315 	stw	zero,12(sp)
   15ffc:	008000c4 	movi	r2,3
   16000:	d8800415 	stw	r2,16(sp)
   16004:	01000074 	movhi	r4,1
   16008:	21190f04 	addi	r4,r4,25660
   1600c:	000b883a 	mov	r5,zero
   16010:	01800174 	movhi	r6,5
   16014:	31b62a04 	addi	r6,r6,-10072
   16018:	01c004c4 	movi	r7,19
   1601c:	001b97c0 	call	1b97c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   16020:	010004c4 	movi	r4,19
   16024:	014000b4 	movhi	r5,2
   16028:	2957a504 	addi	r5,r5,24212
   1602c:	e1bfff04 	addi	r6,fp,-4
   16030:	001c2480 	call	1c248 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   16034:	e037883a 	mov	sp,fp
   16038:	dfc00117 	ldw	ra,4(sp)
   1603c:	df000017 	ldw	fp,0(sp)
   16040:	dec00204 	addi	sp,sp,8
   16044:	f800283a 	ret

00016048 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   16048:	defffb04 	addi	sp,sp,-20
   1604c:	dfc00415 	stw	ra,16(sp)
   16050:	df000315 	stw	fp,12(sp)
   16054:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   16058:	01000174 	movhi	r4,5
   1605c:	213b7304 	addi	r4,r4,-4660
   16060:	01414404 	movi	r5,1296
   16064:	00161280 	call	16128 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   16068:	01000174 	movhi	r4,5
   1606c:	213cb704 	addi	r4,r4,-3364
   16070:	01401504 	movi	r5,84
   16074:	00161280 	call	16128 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   16078:	00800174 	movhi	r2,5
   1607c:	10bb7304 	addi	r2,r2,-4660
   16080:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   16084:	00800174 	movhi	r2,5
   16088:	10bb8e04 	addi	r2,r2,-4552
   1608c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   16090:	e03ffd05 	stb	zero,-12(fp)
   16094:	00001106 	br	160dc <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   16098:	e0bffe17 	ldw	r2,-8(fp)
   1609c:	e0ffff17 	ldw	r3,-4(fp)
   160a0:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   160a4:	e0bffe17 	ldw	r2,-8(fp)
   160a8:	00c00fc4 	movi	r3,63
   160ac:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   160b0:	e0bffe17 	ldw	r2,-8(fp)
   160b4:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   160b8:	e0bffe17 	ldw	r2,-8(fp)
   160bc:	10801b04 	addi	r2,r2,108
   160c0:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   160c4:	e0bfff17 	ldw	r2,-4(fp)
   160c8:	10801b04 	addi	r2,r2,108
   160cc:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   160d0:	e0bffd03 	ldbu	r2,-12(fp)
   160d4:	10800044 	addi	r2,r2,1
   160d8:	e0bffd05 	stb	r2,-12(fp)
   160dc:	e0bffd03 	ldbu	r2,-12(fp)
   160e0:	108002f0 	cmpltui	r2,r2,11
   160e4:	103fec1e 	bne	r2,zero,16098 <__alt_mem_Flash_flash_data+0xf4016098>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   160e8:	e0bffe17 	ldw	r2,-8(fp)
   160ec:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   160f0:	e0bffe17 	ldw	r2,-8(fp)
   160f4:	00c00fc4 	movi	r3,63
   160f8:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   160fc:	e0bffe17 	ldw	r2,-8(fp)
   16100:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   16104:	d0283f15 	stw	zero,-24324(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   16108:	00800174 	movhi	r2,5
   1610c:	10bb7304 	addi	r2,r2,-4660
   16110:	d0a84315 	stw	r2,-24308(gp)
}
   16114:	e037883a 	mov	sp,fp
   16118:	dfc00117 	ldw	ra,4(sp)
   1611c:	df000017 	ldw	fp,0(sp)
   16120:	dec00204 	addi	sp,sp,8
   16124:	f800283a 	ret

00016128 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   16128:	defffd04 	addi	sp,sp,-12
   1612c:	df000215 	stw	fp,8(sp)
   16130:	df000204 	addi	fp,sp,8
   16134:	e13ffe15 	stw	r4,-8(fp)
   16138:	2805883a 	mov	r2,r5
   1613c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   16140:	00000706 	br	16160 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   16144:	e0bffe17 	ldw	r2,-8(fp)
   16148:	10c00044 	addi	r3,r2,1
   1614c:	e0fffe15 	stw	r3,-8(fp)
   16150:	10000005 	stb	zero,0(r2)
        size--;
   16154:	e0bfff0b 	ldhu	r2,-4(fp)
   16158:	10bfffc4 	addi	r2,r2,-1
   1615c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   16160:	e0bfff0b 	ldhu	r2,-4(fp)
   16164:	103ff71e 	bne	r2,zero,16144 <__alt_mem_Flash_flash_data+0xf4016144>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   16168:	e037883a 	mov	sp,fp
   1616c:	df000017 	ldw	fp,0(sp)
   16170:	dec00104 	addi	sp,sp,4
   16174:	f800283a 	ret

00016178 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   16178:	defffc04 	addi	sp,sp,-16
   1617c:	df000315 	stw	fp,12(sp)
   16180:	df000304 	addi	fp,sp,12
   16184:	e13ffd15 	stw	r4,-12(fp)
   16188:	e17ffe15 	stw	r5,-8(fp)
   1618c:	3005883a 	mov	r2,r6
   16190:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   16194:	00000b06 	br	161c4 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   16198:	e0bffd17 	ldw	r2,-12(fp)
   1619c:	10c00044 	addi	r3,r2,1
   161a0:	e0fffd15 	stw	r3,-12(fp)
   161a4:	e0fffe17 	ldw	r3,-8(fp)
   161a8:	19000044 	addi	r4,r3,1
   161ac:	e13ffe15 	stw	r4,-8(fp)
   161b0:	18c00003 	ldbu	r3,0(r3)
   161b4:	10c00005 	stb	r3,0(r2)
        size--;
   161b8:	e0bfff0b 	ldhu	r2,-4(fp)
   161bc:	10bfffc4 	addi	r2,r2,-1
   161c0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   161c4:	e0bfff0b 	ldhu	r2,-4(fp)
   161c8:	103ff31e 	bne	r2,zero,16198 <__alt_mem_Flash_flash_data+0xf4016198>
        *pdest++ = *psrc++;
        size--;
    }
}
   161cc:	e037883a 	mov	sp,fp
   161d0:	df000017 	ldw	fp,0(sp)
   161d4:	dec00104 	addi	sp,sp,4
   161d8:	f800283a 	ret

000161dc <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   161dc:	defffb04 	addi	sp,sp,-20
   161e0:	dfc00415 	stw	ra,16(sp)
   161e4:	df000315 	stw	fp,12(sp)
   161e8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   161ec:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   161f0:	0005303a 	rdctl	r2,status
   161f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   161f8:	e0fffe17 	ldw	r3,-8(fp)
   161fc:	00bfff84 	movi	r2,-2
   16200:	1884703a 	and	r2,r3,r2
   16204:	1001703a 	wrctl	status,r2
  
  return context;
   16208:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1620c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   16210:	d0a84a03 	ldbu	r2,-24280(gp)
   16214:	10803fcc 	andi	r2,r2,255
   16218:	10001a1e 	bne	r2,zero,16284 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   1621c:	d0a83c03 	ldbu	r2,-24336(gp)
   16220:	10803fcc 	andi	r2,r2,255
   16224:	1000171e 	bne	r2,zero,16284 <OS_Sched+0xa8>
            OS_SchedNew();
   16228:	00162a80 	call	162a8 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   1622c:	d0e83e03 	ldbu	r3,-24328(gp)
   16230:	d0a83e43 	ldbu	r2,-24327(gp)
   16234:	18c03fcc 	andi	r3,r3,255
   16238:	10803fcc 	andi	r2,r2,255
   1623c:	18801126 	beq	r3,r2,16284 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   16240:	d0a83e03 	ldbu	r2,-24328(gp)
   16244:	10c03fcc 	andi	r3,r2,255
   16248:	00800174 	movhi	r2,5
   1624c:	10bcb704 	addi	r2,r2,-3364
   16250:	18c7883a 	add	r3,r3,r3
   16254:	18c7883a 	add	r3,r3,r3
   16258:	10c5883a 	add	r2,r2,r3
   1625c:	10800017 	ldw	r2,0(r2)
   16260:	d0a84615 	stw	r2,-24296(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   16264:	d0a84617 	ldw	r2,-24296(gp)
   16268:	10c00e17 	ldw	r3,56(r2)
   1626c:	18c00044 	addi	r3,r3,1
   16270:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   16274:	d0a84117 	ldw	r2,-24316(gp)
   16278:	10800044 	addi	r2,r2,1
   1627c:	d0a84115 	stw	r2,-24316(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   16280:	00247880 	call	24788 <OSCtxSw>
   16284:	e0bffd17 	ldw	r2,-12(fp)
   16288:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1628c:	e0bfff17 	ldw	r2,-4(fp)
   16290:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   16294:	e037883a 	mov	sp,fp
   16298:	dfc00117 	ldw	ra,4(sp)
   1629c:	df000017 	ldw	fp,0(sp)
   162a0:	dec00204 	addi	sp,sp,8
   162a4:	f800283a 	ret

000162a8 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   162a8:	defffe04 	addi	sp,sp,-8
   162ac:	df000115 	stw	fp,4(sp)
   162b0:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   162b4:	d0a84803 	ldbu	r2,-24288(gp)
   162b8:	10c03fcc 	andi	r3,r2,255
   162bc:	008000b4 	movhi	r2,2
   162c0:	10976104 	addi	r2,r2,23940
   162c4:	10c5883a 	add	r2,r2,r3
   162c8:	10800003 	ldbu	r2,0(r2)
   162cc:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   162d0:	e0bfff03 	ldbu	r2,-4(fp)
   162d4:	100490fa 	slli	r2,r2,3
   162d8:	1009883a 	mov	r4,r2
   162dc:	e0ffff03 	ldbu	r3,-4(fp)
   162e0:	d0a84844 	addi	r2,gp,-24287
   162e4:	1885883a 	add	r2,r3,r2
   162e8:	10800003 	ldbu	r2,0(r2)
   162ec:	10c03fcc 	andi	r3,r2,255
   162f0:	008000b4 	movhi	r2,2
   162f4:	10976104 	addi	r2,r2,23940
   162f8:	10c5883a 	add	r2,r2,r3
   162fc:	10800003 	ldbu	r2,0(r2)
   16300:	2085883a 	add	r2,r4,r2
   16304:	d0a83e05 	stb	r2,-24328(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   16308:	e037883a 	mov	sp,fp
   1630c:	df000017 	ldw	fp,0(sp)
   16310:	dec00104 	addi	sp,sp,4
   16314:	f800283a 	ret

00016318 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   16318:	defffc04 	addi	sp,sp,-16
   1631c:	df000315 	stw	fp,12(sp)
   16320:	df000304 	addi	fp,sp,12
   16324:	e13ffe15 	stw	r4,-8(fp)
   16328:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   1632c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   16330:	00000b06 	br	16360 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   16334:	e0bffe17 	ldw	r2,-8(fp)
   16338:	10c00044 	addi	r3,r2,1
   1633c:	e0fffe15 	stw	r3,-8(fp)
   16340:	e0ffff17 	ldw	r3,-4(fp)
   16344:	19000044 	addi	r4,r3,1
   16348:	e13fff15 	stw	r4,-4(fp)
   1634c:	18c00003 	ldbu	r3,0(r3)
   16350:	10c00005 	stb	r3,0(r2)
        len++;
   16354:	e0bffd03 	ldbu	r2,-12(fp)
   16358:	10800044 	addi	r2,r2,1
   1635c:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   16360:	e0bfff17 	ldw	r2,-4(fp)
   16364:	10800003 	ldbu	r2,0(r2)
   16368:	10803fcc 	andi	r2,r2,255
   1636c:	103ff11e 	bne	r2,zero,16334 <__alt_mem_Flash_flash_data+0xf4016334>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   16370:	e0bffe17 	ldw	r2,-8(fp)
   16374:	10000005 	stb	zero,0(r2)
    return (len);
   16378:	e0bffd03 	ldbu	r2,-12(fp)
}
   1637c:	e037883a 	mov	sp,fp
   16380:	df000017 	ldw	fp,0(sp)
   16384:	dec00104 	addi	sp,sp,4
   16388:	f800283a 	ret

0001638c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   1638c:	defffd04 	addi	sp,sp,-12
   16390:	df000215 	stw	fp,8(sp)
   16394:	df000204 	addi	fp,sp,8
   16398:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   1639c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   163a0:	00000606 	br	163bc <OS_StrLen+0x30>
        psrc++;
   163a4:	e0bfff17 	ldw	r2,-4(fp)
   163a8:	10800044 	addi	r2,r2,1
   163ac:	e0bfff15 	stw	r2,-4(fp)
        len++;
   163b0:	e0bffe03 	ldbu	r2,-8(fp)
   163b4:	10800044 	addi	r2,r2,1
   163b8:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   163bc:	e0bfff17 	ldw	r2,-4(fp)
   163c0:	10800003 	ldbu	r2,0(r2)
   163c4:	10803fcc 	andi	r2,r2,255
   163c8:	103ff61e 	bne	r2,zero,163a4 <__alt_mem_Flash_flash_data+0xf40163a4>
        psrc++;
        len++;
    }
    return (len);
   163cc:	e0bffe03 	ldbu	r2,-8(fp)
}
   163d0:	e037883a 	mov	sp,fp
   163d4:	df000017 	ldw	fp,0(sp)
   163d8:	dec00104 	addi	sp,sp,4
   163dc:	f800283a 	ret

000163e0 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   163e0:	defffa04 	addi	sp,sp,-24
   163e4:	dfc00515 	stw	ra,20(sp)
   163e8:	df000415 	stw	fp,16(sp)
   163ec:	df000404 	addi	fp,sp,16
   163f0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   163f4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   163f8:	0005303a 	rdctl	r2,status
   163fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16400:	e0fffd17 	ldw	r3,-12(fp)
   16404:	00bfff84 	movi	r2,-2
   16408:	1884703a 	and	r2,r3,r2
   1640c:	1001703a 	wrctl	status,r2
  
  return context;
   16410:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   16414:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   16418:	d0a83d17 	ldw	r2,-24332(gp)
   1641c:	10800044 	addi	r2,r2,1
   16420:	d0a83d15 	stw	r2,-24332(gp)
   16424:	e0bffc17 	ldw	r2,-16(fp)
   16428:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1642c:	e0bffe17 	ldw	r2,-8(fp)
   16430:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   16434:	0024a800 	call	24a80 <OSTaskIdleHook>
    }
   16438:	003fef06 	br	163f8 <__alt_mem_Flash_flash_data+0xf40163f8>

0001643c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   1643c:	defff804 	addi	sp,sp,-32
   16440:	dfc00715 	stw	ra,28(sp)
   16444:	df000615 	stw	fp,24(sp)
   16448:	dc400515 	stw	r17,20(sp)
   1644c:	dc000415 	stw	r16,16(sp)
   16450:	df000604 	addi	fp,sp,24
   16454:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16458:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   1645c:	00000206 	br	16468 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   16460:	01000044 	movi	r4,1
   16464:	001cb740 	call	1cb74 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   16468:	d0a84e03 	ldbu	r2,-24264(gp)
   1646c:	10803fcc 	andi	r2,r2,255
   16470:	103ffb26 	beq	r2,zero,16460 <__alt_mem_Flash_flash_data+0xf4016460>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   16474:	d0e84217 	ldw	r3,-24312(gp)
   16478:	00947b34 	movhi	r2,20972
   1647c:	10a147c4 	addi	r2,r2,-31457
   16480:	1888383a 	mulxuu	r4,r3,r2
   16484:	1885383a 	mul	r2,r3,r2
   16488:	1021883a 	mov	r16,r2
   1648c:	2023883a 	mov	r17,r4
   16490:	8804d17a 	srli	r2,r17,5
   16494:	d0a84215 	stw	r2,-24312(gp)
    if (OSIdleCtrMax == 0L) {
   16498:	d0a84217 	ldw	r2,-24312(gp)
   1649c:	1000031e 	bne	r2,zero,164ac <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   164a0:	d0284405 	stb	zero,-24304(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   164a4:	01003fc4 	movi	r4,255
   164a8:	001c7c80 	call	1c7c8 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   164ac:	0005303a 	rdctl	r2,status
   164b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   164b4:	e0fffb17 	ldw	r3,-20(fp)
   164b8:	00bfff84 	movi	r2,-2
   164bc:	1884703a 	and	r2,r3,r2
   164c0:	1001703a 	wrctl	status,r2
  
  return context;
   164c4:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   164c8:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   164cc:	d0a83d17 	ldw	r2,-24332(gp)
   164d0:	d0a84f15 	stw	r2,-24260(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   164d4:	d0283d15 	stw	zero,-24332(gp)
   164d8:	e0bffa17 	ldw	r2,-24(fp)
   164dc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   164e0:	e0bffc17 	ldw	r2,-16(fp)
   164e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   164e8:	d0e84f17 	ldw	r3,-24260(gp)
   164ec:	d0a84217 	ldw	r2,-24312(gp)
   164f0:	1885203a 	divu	r2,r3,r2
   164f4:	1007883a 	mov	r3,r2
   164f8:	00801904 	movi	r2,100
   164fc:	10c5c83a 	sub	r2,r2,r3
   16500:	d0a84405 	stb	r2,-24304(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   16504:	0024a100 	call	24a10 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   16508:	00165180 	call	16518 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   1650c:	0009883a 	mov	r4,zero
   16510:	001cb740 	call	1cb74 <OSTimeDly>
    }
   16514:	003fe506 	br	164ac <__alt_mem_Flash_flash_data+0xf40164ac>

00016518 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   16518:	defffa04 	addi	sp,sp,-24
   1651c:	dfc00515 	stw	ra,20(sp)
   16520:	df000415 	stw	fp,16(sp)
   16524:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   16528:	e03ffc05 	stb	zero,-16(fp)
   1652c:	00002406 	br	165c0 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   16530:	e0fffc03 	ldbu	r3,-16(fp)
   16534:	e0bffe04 	addi	r2,fp,-8
   16538:	1809883a 	mov	r4,r3
   1653c:	100b883a 	mov	r5,r2
   16540:	001c6000 	call	1c600 <OSTaskStkChk>
   16544:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   16548:	e0bffc43 	ldbu	r2,-15(fp)
   1654c:	1000191e 	bne	r2,zero,165b4 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   16550:	e0fffc03 	ldbu	r3,-16(fp)
   16554:	00800174 	movhi	r2,5
   16558:	10bcb704 	addi	r2,r2,-3364
   1655c:	18c7883a 	add	r3,r3,r3
   16560:	18c7883a 	add	r3,r3,r3
   16564:	10c5883a 	add	r2,r2,r3
   16568:	10800017 	ldw	r2,0(r2)
   1656c:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   16570:	e0bffd17 	ldw	r2,-12(fp)
   16574:	10000f26 	beq	r2,zero,165b4 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   16578:	e0bffd17 	ldw	r2,-12(fp)
   1657c:	10800060 	cmpeqi	r2,r2,1
   16580:	10000c1e 	bne	r2,zero,165b4 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   16584:	e0bffd17 	ldw	r2,-12(fp)
   16588:	10c00217 	ldw	r3,8(r2)
   1658c:	e0bffd17 	ldw	r2,-12(fp)
   16590:	10800317 	ldw	r2,12(r2)
   16594:	1085883a 	add	r2,r2,r2
   16598:	1085883a 	add	r2,r2,r2
   1659c:	1887883a 	add	r3,r3,r2
   165a0:	e0bffd17 	ldw	r2,-12(fp)
   165a4:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   165a8:	e0ffff17 	ldw	r3,-4(fp)
   165ac:	e0bffd17 	ldw	r2,-12(fp)
   165b0:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   165b4:	e0bffc03 	ldbu	r2,-16(fp)
   165b8:	10800044 	addi	r2,r2,1
   165bc:	e0bffc05 	stb	r2,-16(fp)
   165c0:	e0bffc03 	ldbu	r2,-16(fp)
   165c4:	10800570 	cmpltui	r2,r2,21
   165c8:	103fd91e 	bne	r2,zero,16530 <__alt_mem_Flash_flash_data+0xf4016530>
#endif
                }
            }
        }
    }
}
   165cc:	e037883a 	mov	sp,fp
   165d0:	dfc00117 	ldw	ra,4(sp)
   165d4:	df000017 	ldw	fp,0(sp)
   165d8:	dec00204 	addi	sp,sp,8
   165dc:	f800283a 	ret

000165e0 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   165e0:	defff204 	addi	sp,sp,-56
   165e4:	dfc00d15 	stw	ra,52(sp)
   165e8:	df000c15 	stw	fp,48(sp)
   165ec:	df000c04 	addi	fp,sp,48
   165f0:	e17ffc15 	stw	r5,-16(fp)
   165f4:	e1bffd15 	stw	r6,-12(fp)
   165f8:	3807883a 	mov	r3,r7
   165fc:	e0800417 	ldw	r2,16(fp)
   16600:	e13ffb05 	stb	r4,-20(fp)
   16604:	e0fffe0d 	sth	r3,-8(fp)
   16608:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1660c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16610:	0005303a 	rdctl	r2,status
   16614:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16618:	e0fff617 	ldw	r3,-40(fp)
   1661c:	00bfff84 	movi	r2,-2
   16620:	1884703a 	and	r2,r3,r2
   16624:	1001703a 	wrctl	status,r2
  
  return context;
   16628:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   1662c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   16630:	d0a84317 	ldw	r2,-24308(gp)
   16634:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   16638:	e0bff517 	ldw	r2,-44(fp)
   1663c:	10009326 	beq	r2,zero,1688c <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   16640:	e0bff517 	ldw	r2,-44(fp)
   16644:	10800517 	ldw	r2,20(r2)
   16648:	d0a84315 	stw	r2,-24308(gp)
   1664c:	e0bff417 	ldw	r2,-48(fp)
   16650:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16654:	e0bff717 	ldw	r2,-36(fp)
   16658:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   1665c:	e0bff517 	ldw	r2,-44(fp)
   16660:	e0fffc17 	ldw	r3,-16(fp)
   16664:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   16668:	e0bff517 	ldw	r2,-44(fp)
   1666c:	e0fffb03 	ldbu	r3,-20(fp)
   16670:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   16674:	e0bff517 	ldw	r2,-44(fp)
   16678:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   1667c:	e0bff517 	ldw	r2,-44(fp)
   16680:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   16684:	e0bff517 	ldw	r2,-44(fp)
   16688:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   1668c:	e0bff517 	ldw	r2,-44(fp)
   16690:	e0c00317 	ldw	r3,12(fp)
   16694:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   16698:	e0bff517 	ldw	r2,-44(fp)
   1669c:	e0c00217 	ldw	r3,8(fp)
   166a0:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   166a4:	e0bff517 	ldw	r2,-44(fp)
   166a8:	e0fffd17 	ldw	r3,-12(fp)
   166ac:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   166b0:	e0bff517 	ldw	r2,-44(fp)
   166b4:	e0ffff0b 	ldhu	r3,-4(fp)
   166b8:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   166bc:	e0bff517 	ldw	r2,-44(fp)
   166c0:	e0fffe0b 	ldhu	r3,-8(fp)
   166c4:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   166c8:	e0bff517 	ldw	r2,-44(fp)
   166cc:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   166d0:	e0bffb03 	ldbu	r2,-20(fp)
   166d4:	1004d0fa 	srli	r2,r2,3
   166d8:	1007883a 	mov	r3,r2
   166dc:	e0bff517 	ldw	r2,-44(fp)
   166e0:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   166e4:	e0bffb03 	ldbu	r2,-20(fp)
   166e8:	108001cc 	andi	r2,r2,7
   166ec:	1007883a 	mov	r3,r2
   166f0:	e0bff517 	ldw	r2,-44(fp)
   166f4:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   166f8:	e0bff517 	ldw	r2,-44(fp)
   166fc:	10800d03 	ldbu	r2,52(r2)
   16700:	10803fcc 	andi	r2,r2,255
   16704:	00c00044 	movi	r3,1
   16708:	1884983a 	sll	r2,r3,r2
   1670c:	1007883a 	mov	r3,r2
   16710:	e0bff517 	ldw	r2,-44(fp)
   16714:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   16718:	e0bff517 	ldw	r2,-44(fp)
   1671c:	10800cc3 	ldbu	r2,51(r2)
   16720:	10803fcc 	andi	r2,r2,255
   16724:	00c00044 	movi	r3,1
   16728:	1884983a 	sll	r2,r3,r2
   1672c:	1007883a 	mov	r3,r2
   16730:	e0bff517 	ldw	r2,-44(fp)
   16734:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   16738:	e0bff517 	ldw	r2,-44(fp)
   1673c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   16740:	e0bff517 	ldw	r2,-44(fp)
   16744:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   16748:	e0bff517 	ldw	r2,-44(fp)
   1674c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   16750:	e0bff517 	ldw	r2,-44(fp)
   16754:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   16758:	e0bff517 	ldw	r2,-44(fp)
   1675c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   16760:	e0bff517 	ldw	r2,-44(fp)
   16764:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   16768:	e0bff517 	ldw	r2,-44(fp)
   1676c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   16770:	e0bff517 	ldw	r2,-44(fp)
   16774:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   16778:	e0bff517 	ldw	r2,-44(fp)
   1677c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   16780:	e0bff517 	ldw	r2,-44(fp)
   16784:	00c00fc4 	movi	r3,63
   16788:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1678c:	e0bff517 	ldw	r2,-44(fp)
   16790:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   16794:	e13ff517 	ldw	r4,-44(fp)
   16798:	0024a9c0 	call	24a9c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   1679c:	e13ff517 	ldw	r4,-44(fp)
   167a0:	00249b40 	call	249b4 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   167a4:	0005303a 	rdctl	r2,status
   167a8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   167ac:	e0fff817 	ldw	r3,-32(fp)
   167b0:	00bfff84 	movi	r2,-2
   167b4:	1884703a 	and	r2,r3,r2
   167b8:	1001703a 	wrctl	status,r2
  
  return context;
   167bc:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   167c0:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   167c4:	e0fffb03 	ldbu	r3,-20(fp)
   167c8:	00800174 	movhi	r2,5
   167cc:	10bcb704 	addi	r2,r2,-3364
   167d0:	18c7883a 	add	r3,r3,r3
   167d4:	18c7883a 	add	r3,r3,r3
   167d8:	10c5883a 	add	r2,r2,r3
   167dc:	e0fff517 	ldw	r3,-44(fp)
   167e0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   167e4:	d0e83f17 	ldw	r3,-24324(gp)
   167e8:	e0bff517 	ldw	r2,-44(fp)
   167ec:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   167f0:	e0bff517 	ldw	r2,-44(fp)
   167f4:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   167f8:	d0a83f17 	ldw	r2,-24324(gp)
   167fc:	10000326 	beq	r2,zero,1680c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   16800:	d0a83f17 	ldw	r2,-24324(gp)
   16804:	e0fff517 	ldw	r3,-44(fp)
   16808:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   1680c:	e0bff517 	ldw	r2,-44(fp)
   16810:	d0a83f15 	stw	r2,-24324(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   16814:	e0bff517 	ldw	r2,-44(fp)
   16818:	10c00d83 	ldbu	r3,54(r2)
   1681c:	d0a84803 	ldbu	r2,-24288(gp)
   16820:	1884b03a 	or	r2,r3,r2
   16824:	d0a84805 	stb	r2,-24288(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   16828:	e0bff517 	ldw	r2,-44(fp)
   1682c:	10800d03 	ldbu	r2,52(r2)
   16830:	10c03fcc 	andi	r3,r2,255
   16834:	e0bff517 	ldw	r2,-44(fp)
   16838:	10800d03 	ldbu	r2,52(r2)
   1683c:	11003fcc 	andi	r4,r2,255
   16840:	d0a84844 	addi	r2,gp,-24287
   16844:	2085883a 	add	r2,r4,r2
   16848:	11000003 	ldbu	r4,0(r2)
   1684c:	e0bff517 	ldw	r2,-44(fp)
   16850:	10800d43 	ldbu	r2,53(r2)
   16854:	2084b03a 	or	r2,r4,r2
   16858:	1009883a 	mov	r4,r2
   1685c:	d0a84844 	addi	r2,gp,-24287
   16860:	1885883a 	add	r2,r3,r2
   16864:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   16868:	d0a84443 	ldbu	r2,-24303(gp)
   1686c:	10800044 	addi	r2,r2,1
   16870:	d0a84445 	stb	r2,-24303(gp)
   16874:	e0bff417 	ldw	r2,-48(fp)
   16878:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1687c:	e0bff917 	ldw	r2,-28(fp)
   16880:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   16884:	0005883a 	mov	r2,zero
   16888:	00000506 	br	168a0 <OS_TCBInit+0x2c0>
   1688c:	e0bff417 	ldw	r2,-48(fp)
   16890:	e0bffa15 	stw	r2,-24(fp)
   16894:	e0bffa17 	ldw	r2,-24(fp)
   16898:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   1689c:	00801084 	movi	r2,66
}
   168a0:	e037883a 	mov	sp,fp
   168a4:	dfc00117 	ldw	ra,4(sp)
   168a8:	df000017 	ldw	fp,0(sp)
   168ac:	dec00204 	addi	sp,sp,8
   168b0:	f800283a 	ret

000168b4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   168b4:	defffe04 	addi	sp,sp,-8
   168b8:	df000115 	stw	fp,4(sp)
   168bc:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   168c0:	d0a01d04 	addi	r2,gp,-32652
   168c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   168c8:	d0a01e04 	addi	r2,gp,-32648
   168cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   168d0:	d0a01f84 	addi	r2,gp,-32642
   168d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   168d8:	d0a02004 	addi	r2,gp,-32640
   168dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   168e0:	d0a01f04 	addi	r2,gp,-32644
   168e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   168e8:	d0a02084 	addi	r2,gp,-32638
   168ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   168f0:	d0a02104 	addi	r2,gp,-32636
   168f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   168f8:	d0a02184 	addi	r2,gp,-32634
   168fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   16900:	d0a02204 	addi	r2,gp,-32632
   16904:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   16908:	d0a02284 	addi	r2,gp,-32630
   1690c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   16910:	d0a02304 	addi	r2,gp,-32628
   16914:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   16918:	d0a02384 	addi	r2,gp,-32626
   1691c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   16920:	d0a02404 	addi	r2,gp,-32624
   16924:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   16928:	d0a02484 	addi	r2,gp,-32622
   1692c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   16930:	d0a02504 	addi	r2,gp,-32620
   16934:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   16938:	d0a02584 	addi	r2,gp,-32618
   1693c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   16940:	d0a02604 	addi	r2,gp,-32616
   16944:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   16948:	d0a02684 	addi	r2,gp,-32614
   1694c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   16950:	d0a02704 	addi	r2,gp,-32612
   16954:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   16958:	d0a02784 	addi	r2,gp,-32610
   1695c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   16960:	d0a02804 	addi	r2,gp,-32608
   16964:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   16968:	d0a02884 	addi	r2,gp,-32606
   1696c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   16970:	d0a02904 	addi	r2,gp,-32604
   16974:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   16978:	d0a02984 	addi	r2,gp,-32602
   1697c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   16980:	d0a02a04 	addi	r2,gp,-32600
   16984:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   16988:	d0a02a84 	addi	r2,gp,-32598
   1698c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   16990:	d0a02b04 	addi	r2,gp,-32596
   16994:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   16998:	d0a02b84 	addi	r2,gp,-32594
   1699c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   169a0:	d0a02c04 	addi	r2,gp,-32592
   169a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   169a8:	d0a02c84 	addi	r2,gp,-32590
   169ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   169b0:	d0a02d04 	addi	r2,gp,-32588
   169b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   169b8:	d0a02d84 	addi	r2,gp,-32586
   169bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   169c0:	d0a02e04 	addi	r2,gp,-32584
   169c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   169c8:	d0a02e84 	addi	r2,gp,-32582
   169cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   169d0:	d0a02f04 	addi	r2,gp,-32580
   169d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   169d8:	d0a02f84 	addi	r2,gp,-32578
   169dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   169e0:	d0a03004 	addi	r2,gp,-32576
   169e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   169e8:	d0a03084 	addi	r2,gp,-32574
   169ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   169f0:	d0a03104 	addi	r2,gp,-32572
   169f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   169f8:	d0a03184 	addi	r2,gp,-32570
   169fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   16a00:	d0a03204 	addi	r2,gp,-32568
   16a04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   16a08:	d0a03284 	addi	r2,gp,-32566
   16a0c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   16a10:	d0a03304 	addi	r2,gp,-32564
   16a14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   16a18:	d0a03384 	addi	r2,gp,-32562
   16a1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   16a20:	d0a03404 	addi	r2,gp,-32560
   16a24:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   16a28:	d0a03904 	addi	r2,gp,-32540
   16a2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   16a30:	e037883a 	mov	sp,fp
   16a34:	df000017 	ldw	fp,0(sp)
   16a38:	dec00104 	addi	sp,sp,4
   16a3c:	f800283a 	ret

00016a40 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   16a40:	defff204 	addi	sp,sp,-56
   16a44:	df000d15 	stw	fp,52(sp)
   16a48:	df000d04 	addi	fp,sp,52
   16a4c:	e13ffc15 	stw	r4,-16(fp)
   16a50:	2807883a 	mov	r3,r5
   16a54:	3005883a 	mov	r2,r6
   16a58:	e1ffff15 	stw	r7,-4(fp)
   16a5c:	e0fffd0d 	sth	r3,-12(fp)
   16a60:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   16a64:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   16a68:	e0bfff17 	ldw	r2,-4(fp)
   16a6c:	1000021e 	bne	r2,zero,16a78 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   16a70:	0005883a 	mov	r2,zero
   16a74:	0000b006 	br	16d38 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   16a78:	e0bffc17 	ldw	r2,-16(fp)
   16a7c:	1000051e 	bne	r2,zero,16a94 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16a80:	e0bfff17 	ldw	r2,-4(fp)
   16a84:	00c01b84 	movi	r3,110
   16a88:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16a8c:	0005883a 	mov	r2,zero
   16a90:	0000a906 	br	16d38 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   16a94:	e0bffc17 	ldw	r2,-16(fp)
   16a98:	10800003 	ldbu	r2,0(r2)
   16a9c:	10803fcc 	andi	r2,r2,255
   16aa0:	10800160 	cmpeqi	r2,r2,5
   16aa4:	1000051e 	bne	r2,zero,16abc <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   16aa8:	e0bfff17 	ldw	r2,-4(fp)
   16aac:	00c00044 	movi	r3,1
   16ab0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16ab4:	0005883a 	mov	r2,zero
   16ab8:	00009f06 	br	16d38 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   16abc:	e0fffe03 	ldbu	r3,-8(fp)
   16ac0:	00bfe004 	movi	r2,-128
   16ac4:	1884703a 	and	r2,r3,r2
   16ac8:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   16acc:	e0bff503 	ldbu	r2,-44(fp)
   16ad0:	10000626 	beq	r2,zero,16aec <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   16ad4:	e0bffe03 	ldbu	r2,-8(fp)
   16ad8:	10801fcc 	andi	r2,r2,127
   16adc:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   16ae0:	00800044 	movi	r2,1
   16ae4:	e0bff385 	stb	r2,-50(fp)
   16ae8:	00000106 	br	16af0 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   16aec:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   16af0:	e0bfff17 	ldw	r2,-4(fp)
   16af4:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16af8:	0005303a 	rdctl	r2,status
   16afc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16b00:	e0fff617 	ldw	r3,-40(fp)
   16b04:	00bfff84 	movi	r2,-2
   16b08:	1884703a 	and	r2,r3,r2
   16b0c:	1001703a 	wrctl	status,r2
  
  return context;
   16b10:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   16b14:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   16b18:	e0bffe03 	ldbu	r2,-8(fp)
   16b1c:	10c00060 	cmpeqi	r3,r2,1
   16b20:	18005f1e 	bne	r3,zero,16ca0 <OSFlagAccept+0x260>
   16b24:	10c00088 	cmpgei	r3,r2,2
   16b28:	1800021e 	bne	r3,zero,16b34 <OSFlagAccept+0xf4>
   16b2c:	10003f26 	beq	r2,zero,16c2c <OSFlagAccept+0x1ec>
   16b30:	00007706 	br	16d10 <OSFlagAccept+0x2d0>
   16b34:	10c000a0 	cmpeqi	r3,r2,2
   16b38:	1800031e 	bne	r3,zero,16b48 <OSFlagAccept+0x108>
   16b3c:	108000e0 	cmpeqi	r2,r2,3
   16b40:	10001e1e 	bne	r2,zero,16bbc <OSFlagAccept+0x17c>
   16b44:	00007206 	br	16d10 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   16b48:	e0bffc17 	ldw	r2,-16(fp)
   16b4c:	10c0020b 	ldhu	r3,8(r2)
   16b50:	e0bffd0b 	ldhu	r2,-12(fp)
   16b54:	1884703a 	and	r2,r3,r2
   16b58:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   16b5c:	e0fff30b 	ldhu	r3,-52(fp)
   16b60:	e0bffd0b 	ldhu	r2,-12(fp)
   16b64:	18800d1e 	bne	r3,r2,16b9c <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16b68:	e0bff383 	ldbu	r2,-50(fp)
   16b6c:	10800058 	cmpnei	r2,r2,1
   16b70:	10000d1e 	bne	r2,zero,16ba8 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   16b74:	e0bffc17 	ldw	r2,-16(fp)
   16b78:	1080020b 	ldhu	r2,8(r2)
   16b7c:	1007883a 	mov	r3,r2
   16b80:	e0bff30b 	ldhu	r2,-52(fp)
   16b84:	0084303a 	nor	r2,zero,r2
   16b88:	1884703a 	and	r2,r3,r2
   16b8c:	1007883a 	mov	r3,r2
   16b90:	e0bffc17 	ldw	r2,-16(fp)
   16b94:	10c0020d 	sth	r3,8(r2)
   16b98:	00000306 	br	16ba8 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   16b9c:	e0bfff17 	ldw	r2,-4(fp)
   16ba0:	00c01c04 	movi	r3,112
   16ba4:	10c00005 	stb	r3,0(r2)
   16ba8:	e0bff417 	ldw	r2,-48(fp)
   16bac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16bb0:	e0bff717 	ldw	r2,-36(fp)
   16bb4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   16bb8:	00005e06 	br	16d34 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   16bbc:	e0bffc17 	ldw	r2,-16(fp)
   16bc0:	10c0020b 	ldhu	r3,8(r2)
   16bc4:	e0bffd0b 	ldhu	r2,-12(fp)
   16bc8:	1884703a 	and	r2,r3,r2
   16bcc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   16bd0:	e0bff30b 	ldhu	r2,-52(fp)
   16bd4:	10000d26 	beq	r2,zero,16c0c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16bd8:	e0bff383 	ldbu	r2,-50(fp)
   16bdc:	10800058 	cmpnei	r2,r2,1
   16be0:	10000d1e 	bne	r2,zero,16c18 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   16be4:	e0bffc17 	ldw	r2,-16(fp)
   16be8:	1080020b 	ldhu	r2,8(r2)
   16bec:	1007883a 	mov	r3,r2
   16bf0:	e0bff30b 	ldhu	r2,-52(fp)
   16bf4:	0084303a 	nor	r2,zero,r2
   16bf8:	1884703a 	and	r2,r3,r2
   16bfc:	1007883a 	mov	r3,r2
   16c00:	e0bffc17 	ldw	r2,-16(fp)
   16c04:	10c0020d 	sth	r3,8(r2)
   16c08:	00000306 	br	16c18 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   16c0c:	e0bfff17 	ldw	r2,-4(fp)
   16c10:	00c01c04 	movi	r3,112
   16c14:	10c00005 	stb	r3,0(r2)
   16c18:	e0bff417 	ldw	r2,-48(fp)
   16c1c:	e0bff815 	stw	r2,-32(fp)
   16c20:	e0bff817 	ldw	r2,-32(fp)
   16c24:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   16c28:	00004206 	br	16d34 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   16c2c:	e0bffc17 	ldw	r2,-16(fp)
   16c30:	1080020b 	ldhu	r2,8(r2)
   16c34:	0084303a 	nor	r2,zero,r2
   16c38:	1007883a 	mov	r3,r2
   16c3c:	e0bffd0b 	ldhu	r2,-12(fp)
   16c40:	1884703a 	and	r2,r3,r2
   16c44:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   16c48:	e0fff30b 	ldhu	r3,-52(fp)
   16c4c:	e0bffd0b 	ldhu	r2,-12(fp)
   16c50:	18800b1e 	bne	r3,r2,16c80 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16c54:	e0bff383 	ldbu	r2,-50(fp)
   16c58:	10800058 	cmpnei	r2,r2,1
   16c5c:	10000b1e 	bne	r2,zero,16c8c <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   16c60:	e0bffc17 	ldw	r2,-16(fp)
   16c64:	10c0020b 	ldhu	r3,8(r2)
   16c68:	e0bff30b 	ldhu	r2,-52(fp)
   16c6c:	1884b03a 	or	r2,r3,r2
   16c70:	1007883a 	mov	r3,r2
   16c74:	e0bffc17 	ldw	r2,-16(fp)
   16c78:	10c0020d 	sth	r3,8(r2)
   16c7c:	00000306 	br	16c8c <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   16c80:	e0bfff17 	ldw	r2,-4(fp)
   16c84:	00c01c04 	movi	r3,112
   16c88:	10c00005 	stb	r3,0(r2)
   16c8c:	e0bff417 	ldw	r2,-48(fp)
   16c90:	e0bff915 	stw	r2,-28(fp)
   16c94:	e0bff917 	ldw	r2,-28(fp)
   16c98:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   16c9c:	00002506 	br	16d34 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   16ca0:	e0bffc17 	ldw	r2,-16(fp)
   16ca4:	1080020b 	ldhu	r2,8(r2)
   16ca8:	0084303a 	nor	r2,zero,r2
   16cac:	1007883a 	mov	r3,r2
   16cb0:	e0bffd0b 	ldhu	r2,-12(fp)
   16cb4:	1884703a 	and	r2,r3,r2
   16cb8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   16cbc:	e0bff30b 	ldhu	r2,-52(fp)
   16cc0:	10000b26 	beq	r2,zero,16cf0 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16cc4:	e0bff383 	ldbu	r2,-50(fp)
   16cc8:	10800058 	cmpnei	r2,r2,1
   16ccc:	10000b1e 	bne	r2,zero,16cfc <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   16cd0:	e0bffc17 	ldw	r2,-16(fp)
   16cd4:	10c0020b 	ldhu	r3,8(r2)
   16cd8:	e0bff30b 	ldhu	r2,-52(fp)
   16cdc:	1884b03a 	or	r2,r3,r2
   16ce0:	1007883a 	mov	r3,r2
   16ce4:	e0bffc17 	ldw	r2,-16(fp)
   16ce8:	10c0020d 	sth	r3,8(r2)
   16cec:	00000306 	br	16cfc <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   16cf0:	e0bfff17 	ldw	r2,-4(fp)
   16cf4:	00c01c04 	movi	r3,112
   16cf8:	10c00005 	stb	r3,0(r2)
   16cfc:	e0bff417 	ldw	r2,-48(fp)
   16d00:	e0bffa15 	stw	r2,-24(fp)
   16d04:	e0bffa17 	ldw	r2,-24(fp)
   16d08:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   16d0c:	00000906 	br	16d34 <OSFlagAccept+0x2f4>
   16d10:	e0bff417 	ldw	r2,-48(fp)
   16d14:	e0bffb15 	stw	r2,-20(fp)
   16d18:	e0bffb17 	ldw	r2,-20(fp)
   16d1c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   16d20:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   16d24:	e0bfff17 	ldw	r2,-4(fp)
   16d28:	00c01bc4 	movi	r3,111
   16d2c:	10c00005 	stb	r3,0(r2)
             break;
   16d30:	0001883a 	nop
    }
    return (flags_rdy);
   16d34:	e0bff30b 	ldhu	r2,-52(fp)
}
   16d38:	e037883a 	mov	sp,fp
   16d3c:	df000017 	ldw	fp,0(sp)
   16d40:	dec00104 	addi	sp,sp,4
   16d44:	f800283a 	ret

00016d48 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   16d48:	defff804 	addi	sp,sp,-32
   16d4c:	df000715 	stw	fp,28(sp)
   16d50:	df000704 	addi	fp,sp,28
   16d54:	2005883a 	mov	r2,r4
   16d58:	e17fff15 	stw	r5,-4(fp)
   16d5c:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   16d60:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   16d64:	e0bfff17 	ldw	r2,-4(fp)
   16d68:	1000021e 	bne	r2,zero,16d74 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   16d6c:	0005883a 	mov	r2,zero
   16d70:	00003b06 	br	16e60 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   16d74:	008000f4 	movhi	r2,3
   16d78:	10a7ee04 	addi	r2,r2,-24648
   16d7c:	10800003 	ldbu	r2,0(r2)
   16d80:	10803fcc 	andi	r2,r2,255
   16d84:	10000526 	beq	r2,zero,16d9c <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   16d88:	e0bfff17 	ldw	r2,-4(fp)
   16d8c:	00c00404 	movi	r3,16
   16d90:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   16d94:	0005883a 	mov	r2,zero
   16d98:	00003106 	br	16e60 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16d9c:	0005303a 	rdctl	r2,status
   16da0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16da4:	e0fffb17 	ldw	r3,-20(fp)
   16da8:	00bfff84 	movi	r2,-2
   16dac:	1884703a 	and	r2,r3,r2
   16db0:	1001703a 	wrctl	status,r2
  
  return context;
   16db4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   16db8:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   16dbc:	008000f4 	movhi	r2,3
   16dc0:	10a7f104 	addi	r2,r2,-24636
   16dc4:	10800017 	ldw	r2,0(r2)
   16dc8:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   16dcc:	e0bffa17 	ldw	r2,-24(fp)
   16dd0:	10001b26 	beq	r2,zero,16e40 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   16dd4:	008000f4 	movhi	r2,3
   16dd8:	10a7f104 	addi	r2,r2,-24636
   16ddc:	10800017 	ldw	r2,0(r2)
   16de0:	10c00117 	ldw	r3,4(r2)
   16de4:	008000f4 	movhi	r2,3
   16de8:	10a7f104 	addi	r2,r2,-24636
   16dec:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   16df0:	e0bffa17 	ldw	r2,-24(fp)
   16df4:	00c00144 	movi	r3,5
   16df8:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   16dfc:	e0bffa17 	ldw	r2,-24(fp)
   16e00:	e0fffe0b 	ldhu	r3,-8(fp)
   16e04:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   16e08:	e0bffa17 	ldw	r2,-24(fp)
   16e0c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   16e10:	e0bffa17 	ldw	r2,-24(fp)
   16e14:	00c00fc4 	movi	r3,63
   16e18:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   16e1c:	e0bffa17 	ldw	r2,-24(fp)
   16e20:	100002c5 	stb	zero,11(r2)
   16e24:	e0bff917 	ldw	r2,-28(fp)
   16e28:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16e2c:	e0bffc17 	ldw	r2,-16(fp)
   16e30:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   16e34:	e0bfff17 	ldw	r2,-4(fp)
   16e38:	10000005 	stb	zero,0(r2)
   16e3c:	00000706 	br	16e5c <OSFlagCreate+0x114>
   16e40:	e0bff917 	ldw	r2,-28(fp)
   16e44:	e0bffd15 	stw	r2,-12(fp)
   16e48:	e0bffd17 	ldw	r2,-12(fp)
   16e4c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   16e50:	e0bfff17 	ldw	r2,-4(fp)
   16e54:	00c01c84 	movi	r3,114
   16e58:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   16e5c:	e0bffa17 	ldw	r2,-24(fp)
}
   16e60:	e037883a 	mov	sp,fp
   16e64:	df000017 	ldw	fp,0(sp)
   16e68:	dec00104 	addi	sp,sp,4
   16e6c:	f800283a 	ret

00016e70 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   16e70:	defff204 	addi	sp,sp,-56
   16e74:	dfc00d15 	stw	ra,52(sp)
   16e78:	df000c15 	stw	fp,48(sp)
   16e7c:	df000c04 	addi	fp,sp,48
   16e80:	e13ffd15 	stw	r4,-12(fp)
   16e84:	2805883a 	mov	r2,r5
   16e88:	e1bfff15 	stw	r6,-4(fp)
   16e8c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   16e90:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   16e94:	e0bfff17 	ldw	r2,-4(fp)
   16e98:	1000021e 	bne	r2,zero,16ea4 <OSFlagDel+0x34>
        return (pgrp);
   16e9c:	e0bffd17 	ldw	r2,-12(fp)
   16ea0:	00008a06 	br	170cc <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   16ea4:	e0bffd17 	ldw	r2,-12(fp)
   16ea8:	1000051e 	bne	r2,zero,16ec0 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16eac:	e0bfff17 	ldw	r2,-4(fp)
   16eb0:	00c01b84 	movi	r3,110
   16eb4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   16eb8:	e0bffd17 	ldw	r2,-12(fp)
   16ebc:	00008306 	br	170cc <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   16ec0:	008000f4 	movhi	r2,3
   16ec4:	10a7ee04 	addi	r2,r2,-24648
   16ec8:	10800003 	ldbu	r2,0(r2)
   16ecc:	10803fcc 	andi	r2,r2,255
   16ed0:	10000526 	beq	r2,zero,16ee8 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   16ed4:	e0bfff17 	ldw	r2,-4(fp)
   16ed8:	00c003c4 	movi	r3,15
   16edc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   16ee0:	e0bffd17 	ldw	r2,-12(fp)
   16ee4:	00007906 	br	170cc <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   16ee8:	e0bffd17 	ldw	r2,-12(fp)
   16eec:	10800003 	ldbu	r2,0(r2)
   16ef0:	10803fcc 	andi	r2,r2,255
   16ef4:	10800160 	cmpeqi	r2,r2,5
   16ef8:	1000051e 	bne	r2,zero,16f10 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   16efc:	e0bfff17 	ldw	r2,-4(fp)
   16f00:	00c00044 	movi	r3,1
   16f04:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   16f08:	e0bffd17 	ldw	r2,-12(fp)
   16f0c:	00006f06 	br	170cc <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16f10:	0005303a 	rdctl	r2,status
   16f14:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16f18:	e0fff817 	ldw	r3,-32(fp)
   16f1c:	00bfff84 	movi	r2,-2
   16f20:	1884703a 	and	r2,r3,r2
   16f24:	1001703a 	wrctl	status,r2
  
  return context;
   16f28:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   16f2c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   16f30:	e0bffd17 	ldw	r2,-12(fp)
   16f34:	10800117 	ldw	r2,4(r2)
   16f38:	10000326 	beq	r2,zero,16f48 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   16f3c:	00800044 	movi	r2,1
   16f40:	e0bff405 	stb	r2,-48(fp)
   16f44:	00000106 	br	16f4c <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   16f48:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   16f4c:	e0bffe03 	ldbu	r2,-8(fp)
   16f50:	10000326 	beq	r2,zero,16f60 <OSFlagDel+0xf0>
   16f54:	10800060 	cmpeqi	r2,r2,1
   16f58:	1000271e 	bne	r2,zero,16ff8 <OSFlagDel+0x188>
   16f5c:	00005006 	br	170a0 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   16f60:	e0bff403 	ldbu	r2,-48(fp)
   16f64:	10001a1e 	bne	r2,zero,16fd0 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   16f68:	e0bffd17 	ldw	r2,-12(fp)
   16f6c:	00c00fc4 	movi	r3,63
   16f70:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   16f74:	e0bffd17 	ldw	r2,-12(fp)
   16f78:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   16f7c:	e0bffd17 	ldw	r2,-12(fp)
   16f80:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   16f84:	008000f4 	movhi	r2,3
   16f88:	10a7f104 	addi	r2,r2,-24636
   16f8c:	10c00017 	ldw	r3,0(r2)
   16f90:	e0bffd17 	ldw	r2,-12(fp)
   16f94:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   16f98:	e0bffd17 	ldw	r2,-12(fp)
   16f9c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   16fa0:	008000f4 	movhi	r2,3
   16fa4:	10a7f104 	addi	r2,r2,-24636
   16fa8:	e0fffd17 	ldw	r3,-12(fp)
   16fac:	10c00015 	stw	r3,0(r2)
   16fb0:	e0bff717 	ldw	r2,-36(fp)
   16fb4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16fb8:	e0bff917 	ldw	r2,-28(fp)
   16fbc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   16fc0:	e0bfff17 	ldw	r2,-4(fp)
   16fc4:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   16fc8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   16fcc:	00003e06 	br	170c8 <OSFlagDel+0x258>
   16fd0:	e0bff717 	ldw	r2,-36(fp)
   16fd4:	e0bffa15 	stw	r2,-24(fp)
   16fd8:	e0bffa17 	ldw	r2,-24(fp)
   16fdc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   16fe0:	e0bfff17 	ldw	r2,-4(fp)
   16fe4:	00c01244 	movi	r3,73
   16fe8:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   16fec:	e0bffd17 	ldw	r2,-12(fp)
   16ff0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   16ff4:	00003406 	br	170c8 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   16ff8:	e0bffd17 	ldw	r2,-12(fp)
   16ffc:	10800117 	ldw	r2,4(r2)
   17000:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   17004:	00000606 	br	17020 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   17008:	e13ff517 	ldw	r4,-44(fp)
   1700c:	000b883a 	mov	r5,zero
   17010:	00180ac0 	call	180ac <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   17014:	e0bff517 	ldw	r2,-44(fp)
   17018:	10800017 	ldw	r2,0(r2)
   1701c:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   17020:	e0bff517 	ldw	r2,-44(fp)
   17024:	103ff81e 	bne	r2,zero,17008 <__alt_mem_Flash_flash_data+0xf4017008>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   17028:	e0bffd17 	ldw	r2,-12(fp)
   1702c:	00c00fc4 	movi	r3,63
   17030:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   17034:	e0bffd17 	ldw	r2,-12(fp)
   17038:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1703c:	e0bffd17 	ldw	r2,-12(fp)
   17040:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   17044:	008000f4 	movhi	r2,3
   17048:	10a7f104 	addi	r2,r2,-24636
   1704c:	10c00017 	ldw	r3,0(r2)
   17050:	e0bffd17 	ldw	r2,-12(fp)
   17054:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   17058:	e0bffd17 	ldw	r2,-12(fp)
   1705c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   17060:	008000f4 	movhi	r2,3
   17064:	10a7f104 	addi	r2,r2,-24636
   17068:	e0fffd17 	ldw	r3,-12(fp)
   1706c:	10c00015 	stw	r3,0(r2)
   17070:	e0bff717 	ldw	r2,-36(fp)
   17074:	e0bffb15 	stw	r2,-20(fp)
   17078:	e0bffb17 	ldw	r2,-20(fp)
   1707c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   17080:	e0bff403 	ldbu	r2,-48(fp)
   17084:	10800058 	cmpnei	r2,r2,1
   17088:	1000011e 	bne	r2,zero,17090 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1708c:	00161dc0 	call	161dc <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   17090:	e0bfff17 	ldw	r2,-4(fp)
   17094:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   17098:	e03ff615 	stw	zero,-40(fp)
             break;
   1709c:	00000a06 	br	170c8 <OSFlagDel+0x258>
   170a0:	e0bff717 	ldw	r2,-36(fp)
   170a4:	e0bffc15 	stw	r2,-16(fp)
   170a8:	e0bffc17 	ldw	r2,-16(fp)
   170ac:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   170b0:	e0bfff17 	ldw	r2,-4(fp)
   170b4:	00c001c4 	movi	r3,7
   170b8:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   170bc:	e0bffd17 	ldw	r2,-12(fp)
   170c0:	e0bff615 	stw	r2,-40(fp)
             break;
   170c4:	0001883a 	nop
    }
    return (pgrp_return);
   170c8:	e0bff617 	ldw	r2,-40(fp)
}
   170cc:	e037883a 	mov	sp,fp
   170d0:	dfc00117 	ldw	ra,4(sp)
   170d4:	df000017 	ldw	fp,0(sp)
   170d8:	dec00204 	addi	sp,sp,8
   170dc:	f800283a 	ret

000170e0 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   170e0:	defff604 	addi	sp,sp,-40
   170e4:	dfc00915 	stw	ra,36(sp)
   170e8:	df000815 	stw	fp,32(sp)
   170ec:	df000804 	addi	fp,sp,32
   170f0:	e13ffd15 	stw	r4,-12(fp)
   170f4:	e17ffe15 	stw	r5,-8(fp)
   170f8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   170fc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   17100:	e0bfff17 	ldw	r2,-4(fp)
   17104:	1000021e 	bne	r2,zero,17110 <OSFlagNameGet+0x30>
        return (0);
   17108:	0005883a 	mov	r2,zero
   1710c:	00003b06 	br	171fc <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   17110:	e0bffd17 	ldw	r2,-12(fp)
   17114:	1000051e 	bne	r2,zero,1712c <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   17118:	e0bfff17 	ldw	r2,-4(fp)
   1711c:	00c01b84 	movi	r3,110
   17120:	10c00005 	stb	r3,0(r2)
        return (0);
   17124:	0005883a 	mov	r2,zero
   17128:	00003406 	br	171fc <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1712c:	e0bffe17 	ldw	r2,-8(fp)
   17130:	1000051e 	bne	r2,zero,17148 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   17134:	e0bfff17 	ldw	r2,-4(fp)
   17138:	00c00304 	movi	r3,12
   1713c:	10c00005 	stb	r3,0(r2)
        return (0);
   17140:	0005883a 	mov	r2,zero
   17144:	00002d06 	br	171fc <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   17148:	008000f4 	movhi	r2,3
   1714c:	10a7ee04 	addi	r2,r2,-24648
   17150:	10800003 	ldbu	r2,0(r2)
   17154:	10803fcc 	andi	r2,r2,255
   17158:	10000526 	beq	r2,zero,17170 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   1715c:	e0bfff17 	ldw	r2,-4(fp)
   17160:	00c00444 	movi	r3,17
   17164:	10c00005 	stb	r3,0(r2)
        return (0);
   17168:	0005883a 	mov	r2,zero
   1716c:	00002306 	br	171fc <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17170:	0005303a 	rdctl	r2,status
   17174:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17178:	e0fffa17 	ldw	r3,-24(fp)
   1717c:	00bfff84 	movi	r2,-2
   17180:	1884703a 	and	r2,r3,r2
   17184:	1001703a 	wrctl	status,r2
  
  return context;
   17188:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1718c:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   17190:	e0bffd17 	ldw	r2,-12(fp)
   17194:	10800003 	ldbu	r2,0(r2)
   17198:	10803fcc 	andi	r2,r2,255
   1719c:	10800160 	cmpeqi	r2,r2,5
   171a0:	1000091e 	bne	r2,zero,171c8 <OSFlagNameGet+0xe8>
   171a4:	e0bff817 	ldw	r2,-32(fp)
   171a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   171ac:	e0bffb17 	ldw	r2,-20(fp)
   171b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   171b4:	e0bfff17 	ldw	r2,-4(fp)
   171b8:	00c00044 	movi	r3,1
   171bc:	10c00005 	stb	r3,0(r2)
        return (0);
   171c0:	0005883a 	mov	r2,zero
   171c4:	00000d06 	br	171fc <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   171c8:	e0bffd17 	ldw	r2,-12(fp)
   171cc:	10800284 	addi	r2,r2,10
   171d0:	e13ffe17 	ldw	r4,-8(fp)
   171d4:	100b883a 	mov	r5,r2
   171d8:	00163180 	call	16318 <OS_StrCopy>
   171dc:	e0bff905 	stb	r2,-28(fp)
   171e0:	e0bff817 	ldw	r2,-32(fp)
   171e4:	e0bffc15 	stw	r2,-16(fp)
   171e8:	e0bffc17 	ldw	r2,-16(fp)
   171ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   171f0:	e0bfff17 	ldw	r2,-4(fp)
   171f4:	10000005 	stb	zero,0(r2)
    return (len);
   171f8:	e0bff903 	ldbu	r2,-28(fp)
}
   171fc:	e037883a 	mov	sp,fp
   17200:	dfc00117 	ldw	ra,4(sp)
   17204:	df000017 	ldw	fp,0(sp)
   17208:	dec00204 	addi	sp,sp,8
   1720c:	f800283a 	ret

00017210 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   17210:	defff504 	addi	sp,sp,-44
   17214:	dfc00a15 	stw	ra,40(sp)
   17218:	df000915 	stw	fp,36(sp)
   1721c:	df000904 	addi	fp,sp,36
   17220:	e13ffd15 	stw	r4,-12(fp)
   17224:	e17ffe15 	stw	r5,-8(fp)
   17228:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1722c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   17230:	e0bfff17 	ldw	r2,-4(fp)
   17234:	1000011e 	bne	r2,zero,1723c <OSFlagNameSet+0x2c>
        return;
   17238:	00004406 	br	1734c <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1723c:	e0bffd17 	ldw	r2,-12(fp)
   17240:	1000041e 	bne	r2,zero,17254 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   17244:	e0bfff17 	ldw	r2,-4(fp)
   17248:	00c01b84 	movi	r3,110
   1724c:	10c00005 	stb	r3,0(r2)
        return;
   17250:	00003e06 	br	1734c <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   17254:	e0bffe17 	ldw	r2,-8(fp)
   17258:	1000041e 	bne	r2,zero,1726c <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   1725c:	e0bfff17 	ldw	r2,-4(fp)
   17260:	00c00304 	movi	r3,12
   17264:	10c00005 	stb	r3,0(r2)
        return;
   17268:	00003806 	br	1734c <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1726c:	008000f4 	movhi	r2,3
   17270:	10a7ee04 	addi	r2,r2,-24648
   17274:	10800003 	ldbu	r2,0(r2)
   17278:	10803fcc 	andi	r2,r2,255
   1727c:	10000426 	beq	r2,zero,17290 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   17280:	e0bfff17 	ldw	r2,-4(fp)
   17284:	00c00484 	movi	r3,18
   17288:	10c00005 	stb	r3,0(r2)
        return;
   1728c:	00002f06 	br	1734c <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17290:	0005303a 	rdctl	r2,status
   17294:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17298:	e0fff917 	ldw	r3,-28(fp)
   1729c:	00bfff84 	movi	r2,-2
   172a0:	1884703a 	and	r2,r3,r2
   172a4:	1001703a 	wrctl	status,r2
  
  return context;
   172a8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   172ac:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   172b0:	e0bffd17 	ldw	r2,-12(fp)
   172b4:	10800003 	ldbu	r2,0(r2)
   172b8:	10803fcc 	andi	r2,r2,255
   172bc:	10800160 	cmpeqi	r2,r2,5
   172c0:	1000081e 	bne	r2,zero,172e4 <OSFlagNameSet+0xd4>
   172c4:	e0bff717 	ldw	r2,-36(fp)
   172c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   172cc:	e0bffa17 	ldw	r2,-24(fp)
   172d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   172d4:	e0bfff17 	ldw	r2,-4(fp)
   172d8:	00c00044 	movi	r3,1
   172dc:	10c00005 	stb	r3,0(r2)
        return;
   172e0:	00001a06 	br	1734c <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   172e4:	e13ffe17 	ldw	r4,-8(fp)
   172e8:	001638c0 	call	1638c <OS_StrLen>
   172ec:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   172f0:	e0bff803 	ldbu	r2,-32(fp)
   172f4:	10800830 	cmpltui	r2,r2,32
   172f8:	1000081e 	bne	r2,zero,1731c <OSFlagNameSet+0x10c>
   172fc:	e0bff717 	ldw	r2,-36(fp)
   17300:	e0bffb15 	stw	r2,-20(fp)
   17304:	e0bffb17 	ldw	r2,-20(fp)
   17308:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   1730c:	e0bfff17 	ldw	r2,-4(fp)
   17310:	00c01cc4 	movi	r3,115
   17314:	10c00005 	stb	r3,0(r2)
        return;
   17318:	00000c06 	br	1734c <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   1731c:	e0bffd17 	ldw	r2,-12(fp)
   17320:	10800284 	addi	r2,r2,10
   17324:	1009883a 	mov	r4,r2
   17328:	e17ffe17 	ldw	r5,-8(fp)
   1732c:	00163180 	call	16318 <OS_StrCopy>
   17330:	e0bff717 	ldw	r2,-36(fp)
   17334:	e0bffc15 	stw	r2,-16(fp)
   17338:	e0bffc17 	ldw	r2,-16(fp)
   1733c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17340:	e0bfff17 	ldw	r2,-4(fp)
   17344:	10000005 	stb	zero,0(r2)
    return;
   17348:	0001883a 	nop
}
   1734c:	e037883a 	mov	sp,fp
   17350:	dfc00117 	ldw	ra,4(sp)
   17354:	df000017 	ldw	fp,0(sp)
   17358:	dec00204 	addi	sp,sp,8
   1735c:	f800283a 	ret

00017360 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   17360:	deffe204 	addi	sp,sp,-120
   17364:	dfc01d15 	stw	ra,116(sp)
   17368:	df001c15 	stw	fp,112(sp)
   1736c:	df001c04 	addi	fp,sp,112
   17370:	e13ffc15 	stw	r4,-16(fp)
   17374:	2809883a 	mov	r4,r5
   17378:	3007883a 	mov	r3,r6
   1737c:	3805883a 	mov	r2,r7
   17380:	e13ffd0d 	sth	r4,-12(fp)
   17384:	e0fffe05 	stb	r3,-8(fp)
   17388:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1738c:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   17390:	e0800217 	ldw	r2,8(fp)
   17394:	1000021e 	bne	r2,zero,173a0 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   17398:	0005883a 	mov	r2,zero
   1739c:	00016706 	br	1793c <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   173a0:	e0bffc17 	ldw	r2,-16(fp)
   173a4:	1000051e 	bne	r2,zero,173bc <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   173a8:	e0800217 	ldw	r2,8(fp)
   173ac:	00c01b84 	movi	r3,110
   173b0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   173b4:	0005883a 	mov	r2,zero
   173b8:	00016006 	br	1793c <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   173bc:	008000f4 	movhi	r2,3
   173c0:	10a7ee04 	addi	r2,r2,-24648
   173c4:	10800003 	ldbu	r2,0(r2)
   173c8:	10803fcc 	andi	r2,r2,255
   173cc:	10000526 	beq	r2,zero,173e4 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   173d0:	e0800217 	ldw	r2,8(fp)
   173d4:	00c00084 	movi	r3,2
   173d8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   173dc:	0005883a 	mov	r2,zero
   173e0:	00015606 	br	1793c <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   173e4:	008000f4 	movhi	r2,3
   173e8:	10a7e004 	addi	r2,r2,-24704
   173ec:	10800003 	ldbu	r2,0(r2)
   173f0:	10803fcc 	andi	r2,r2,255
   173f4:	10000526 	beq	r2,zero,1740c <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   173f8:	e0800217 	ldw	r2,8(fp)
   173fc:	00c00344 	movi	r3,13
   17400:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17404:	0005883a 	mov	r2,zero
   17408:	00014c06 	br	1793c <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   1740c:	e0bffc17 	ldw	r2,-16(fp)
   17410:	10800003 	ldbu	r2,0(r2)
   17414:	10803fcc 	andi	r2,r2,255
   17418:	10800160 	cmpeqi	r2,r2,5
   1741c:	1000051e 	bne	r2,zero,17434 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   17420:	e0800217 	ldw	r2,8(fp)
   17424:	00c00044 	movi	r3,1
   17428:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1742c:	0005883a 	mov	r2,zero
   17430:	00014206 	br	1793c <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   17434:	e0fffe03 	ldbu	r3,-8(fp)
   17438:	00bfe004 	movi	r2,-128
   1743c:	1884703a 	and	r2,r3,r2
   17440:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   17444:	e0bfe703 	ldbu	r2,-100(fp)
   17448:	10000626 	beq	r2,zero,17464 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   1744c:	e0bffe03 	ldbu	r2,-8(fp)
   17450:	10801fcc 	andi	r2,r2,127
   17454:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   17458:	00800044 	movi	r2,1
   1745c:	e0bfe505 	stb	r2,-108(fp)
   17460:	00000106 	br	17468 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   17464:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17468:	0005303a 	rdctl	r2,status
   1746c:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17470:	e0ffe917 	ldw	r3,-92(fp)
   17474:	00bfff84 	movi	r2,-2
   17478:	1884703a 	and	r2,r3,r2
   1747c:	1001703a 	wrctl	status,r2
  
  return context;
   17480:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   17484:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   17488:	e0bffe03 	ldbu	r2,-8(fp)
   1748c:	10c00060 	cmpeqi	r3,r2,1
   17490:	1800921e 	bne	r3,zero,176dc <OSFlagPend+0x37c>
   17494:	10c00088 	cmpgei	r3,r2,2
   17498:	1800021e 	bne	r3,zero,174a4 <OSFlagPend+0x144>
   1749c:	10006126 	beq	r2,zero,17624 <OSFlagPend+0x2c4>
   174a0:	0000bb06 	br	17790 <OSFlagPend+0x430>
   174a4:	10c000a0 	cmpeqi	r3,r2,2
   174a8:	1800031e 	bne	r3,zero,174b8 <OSFlagPend+0x158>
   174ac:	108000e0 	cmpeqi	r2,r2,3
   174b0:	10002f1e 	bne	r2,zero,17570 <OSFlagPend+0x210>
   174b4:	0000b606 	br	17790 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   174b8:	e0bffc17 	ldw	r2,-16(fp)
   174bc:	10c0020b 	ldhu	r3,8(r2)
   174c0:	e0bffd0b 	ldhu	r2,-12(fp)
   174c4:	1884703a 	and	r2,r3,r2
   174c8:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   174cc:	e0ffe78b 	ldhu	r3,-98(fp)
   174d0:	e0bffd0b 	ldhu	r2,-12(fp)
   174d4:	1880191e 	bne	r3,r2,1753c <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   174d8:	e0bfe503 	ldbu	r2,-108(fp)
   174dc:	10800058 	cmpnei	r2,r2,1
   174e0:	1000091e 	bne	r2,zero,17508 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   174e4:	e0bffc17 	ldw	r2,-16(fp)
   174e8:	1080020b 	ldhu	r2,8(r2)
   174ec:	1007883a 	mov	r3,r2
   174f0:	e0bfe78b 	ldhu	r2,-98(fp)
   174f4:	0084303a 	nor	r2,zero,r2
   174f8:	1884703a 	and	r2,r3,r2
   174fc:	1007883a 	mov	r3,r2
   17500:	e0bffc17 	ldw	r2,-16(fp)
   17504:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   17508:	008000f4 	movhi	r2,3
   1750c:	10a7ef04 	addi	r2,r2,-24644
   17510:	10800017 	ldw	r2,0(r2)
   17514:	e0ffe78b 	ldhu	r3,-98(fp)
   17518:	10c00b0d 	sth	r3,44(r2)
   1751c:	e0bfe617 	ldw	r2,-104(fp)
   17520:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17524:	e0bfea17 	ldw	r2,-88(fp)
   17528:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1752c:	e0800217 	ldw	r2,8(fp)
   17530:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   17534:	e0bfe78b 	ldhu	r2,-98(fp)
   17538:	00010006 	br	1793c <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1753c:	e1bffd0b 	ldhu	r6,-12(fp)
   17540:	e0fffe03 	ldbu	r3,-8(fp)
   17544:	e0bfff0b 	ldhu	r2,-4(fp)
   17548:	e17ff704 	addi	r5,fp,-36
   1754c:	d8800015 	stw	r2,0(sp)
   17550:	e13ffc17 	ldw	r4,-16(fp)
   17554:	180f883a 	mov	r7,r3
   17558:	0017e040 	call	17e04 <OS_FlagBlock>
   1755c:	e0bfe617 	ldw	r2,-104(fp)
   17560:	e0bfeb15 	stw	r2,-84(fp)
   17564:	e0bfeb17 	ldw	r2,-84(fp)
   17568:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1756c:	00009206 	br	177b8 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   17570:	e0bffc17 	ldw	r2,-16(fp)
   17574:	10c0020b 	ldhu	r3,8(r2)
   17578:	e0bffd0b 	ldhu	r2,-12(fp)
   1757c:	1884703a 	and	r2,r3,r2
   17580:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   17584:	e0bfe78b 	ldhu	r2,-98(fp)
   17588:	10001926 	beq	r2,zero,175f0 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1758c:	e0bfe503 	ldbu	r2,-108(fp)
   17590:	10800058 	cmpnei	r2,r2,1
   17594:	1000091e 	bne	r2,zero,175bc <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   17598:	e0bffc17 	ldw	r2,-16(fp)
   1759c:	1080020b 	ldhu	r2,8(r2)
   175a0:	1007883a 	mov	r3,r2
   175a4:	e0bfe78b 	ldhu	r2,-98(fp)
   175a8:	0084303a 	nor	r2,zero,r2
   175ac:	1884703a 	and	r2,r3,r2
   175b0:	1007883a 	mov	r3,r2
   175b4:	e0bffc17 	ldw	r2,-16(fp)
   175b8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   175bc:	008000f4 	movhi	r2,3
   175c0:	10a7ef04 	addi	r2,r2,-24644
   175c4:	10800017 	ldw	r2,0(r2)
   175c8:	e0ffe78b 	ldhu	r3,-98(fp)
   175cc:	10c00b0d 	sth	r3,44(r2)
   175d0:	e0bfe617 	ldw	r2,-104(fp)
   175d4:	e0bfec15 	stw	r2,-80(fp)
   175d8:	e0bfec17 	ldw	r2,-80(fp)
   175dc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   175e0:	e0800217 	ldw	r2,8(fp)
   175e4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   175e8:	e0bfe78b 	ldhu	r2,-98(fp)
   175ec:	0000d306 	br	1793c <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   175f0:	e1bffd0b 	ldhu	r6,-12(fp)
   175f4:	e0fffe03 	ldbu	r3,-8(fp)
   175f8:	e0bfff0b 	ldhu	r2,-4(fp)
   175fc:	e17ff704 	addi	r5,fp,-36
   17600:	d8800015 	stw	r2,0(sp)
   17604:	e13ffc17 	ldw	r4,-16(fp)
   17608:	180f883a 	mov	r7,r3
   1760c:	0017e040 	call	17e04 <OS_FlagBlock>
   17610:	e0bfe617 	ldw	r2,-104(fp)
   17614:	e0bfed15 	stw	r2,-76(fp)
   17618:	e0bfed17 	ldw	r2,-76(fp)
   1761c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   17620:	00006506 	br	177b8 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   17624:	e0bffc17 	ldw	r2,-16(fp)
   17628:	1080020b 	ldhu	r2,8(r2)
   1762c:	0084303a 	nor	r2,zero,r2
   17630:	1007883a 	mov	r3,r2
   17634:	e0bffd0b 	ldhu	r2,-12(fp)
   17638:	1884703a 	and	r2,r3,r2
   1763c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   17640:	e0ffe78b 	ldhu	r3,-98(fp)
   17644:	e0bffd0b 	ldhu	r2,-12(fp)
   17648:	1880171e 	bne	r3,r2,176a8 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1764c:	e0bfe503 	ldbu	r2,-108(fp)
   17650:	10800058 	cmpnei	r2,r2,1
   17654:	1000071e 	bne	r2,zero,17674 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   17658:	e0bffc17 	ldw	r2,-16(fp)
   1765c:	10c0020b 	ldhu	r3,8(r2)
   17660:	e0bfe78b 	ldhu	r2,-98(fp)
   17664:	1884b03a 	or	r2,r3,r2
   17668:	1007883a 	mov	r3,r2
   1766c:	e0bffc17 	ldw	r2,-16(fp)
   17670:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   17674:	008000f4 	movhi	r2,3
   17678:	10a7ef04 	addi	r2,r2,-24644
   1767c:	10800017 	ldw	r2,0(r2)
   17680:	e0ffe78b 	ldhu	r3,-98(fp)
   17684:	10c00b0d 	sth	r3,44(r2)
   17688:	e0bfe617 	ldw	r2,-104(fp)
   1768c:	e0bfee15 	stw	r2,-72(fp)
   17690:	e0bfee17 	ldw	r2,-72(fp)
   17694:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   17698:	e0800217 	ldw	r2,8(fp)
   1769c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   176a0:	e0bfe78b 	ldhu	r2,-98(fp)
   176a4:	0000a506 	br	1793c <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   176a8:	e1bffd0b 	ldhu	r6,-12(fp)
   176ac:	e0fffe03 	ldbu	r3,-8(fp)
   176b0:	e0bfff0b 	ldhu	r2,-4(fp)
   176b4:	e17ff704 	addi	r5,fp,-36
   176b8:	d8800015 	stw	r2,0(sp)
   176bc:	e13ffc17 	ldw	r4,-16(fp)
   176c0:	180f883a 	mov	r7,r3
   176c4:	0017e040 	call	17e04 <OS_FlagBlock>
   176c8:	e0bfe617 	ldw	r2,-104(fp)
   176cc:	e0bfef15 	stw	r2,-68(fp)
   176d0:	e0bfef17 	ldw	r2,-68(fp)
   176d4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   176d8:	00003706 	br	177b8 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   176dc:	e0bffc17 	ldw	r2,-16(fp)
   176e0:	1080020b 	ldhu	r2,8(r2)
   176e4:	0084303a 	nor	r2,zero,r2
   176e8:	1007883a 	mov	r3,r2
   176ec:	e0bffd0b 	ldhu	r2,-12(fp)
   176f0:	1884703a 	and	r2,r3,r2
   176f4:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   176f8:	e0bfe78b 	ldhu	r2,-98(fp)
   176fc:	10001726 	beq	r2,zero,1775c <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   17700:	e0bfe503 	ldbu	r2,-108(fp)
   17704:	10800058 	cmpnei	r2,r2,1
   17708:	1000071e 	bne	r2,zero,17728 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   1770c:	e0bffc17 	ldw	r2,-16(fp)
   17710:	10c0020b 	ldhu	r3,8(r2)
   17714:	e0bfe78b 	ldhu	r2,-98(fp)
   17718:	1884b03a 	or	r2,r3,r2
   1771c:	1007883a 	mov	r3,r2
   17720:	e0bffc17 	ldw	r2,-16(fp)
   17724:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   17728:	008000f4 	movhi	r2,3
   1772c:	10a7ef04 	addi	r2,r2,-24644
   17730:	10800017 	ldw	r2,0(r2)
   17734:	e0ffe78b 	ldhu	r3,-98(fp)
   17738:	10c00b0d 	sth	r3,44(r2)
   1773c:	e0bfe617 	ldw	r2,-104(fp)
   17740:	e0bff015 	stw	r2,-64(fp)
   17744:	e0bff017 	ldw	r2,-64(fp)
   17748:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1774c:	e0800217 	ldw	r2,8(fp)
   17750:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   17754:	e0bfe78b 	ldhu	r2,-98(fp)
   17758:	00007806 	br	1793c <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1775c:	e1bffd0b 	ldhu	r6,-12(fp)
   17760:	e0fffe03 	ldbu	r3,-8(fp)
   17764:	e0bfff0b 	ldhu	r2,-4(fp)
   17768:	e17ff704 	addi	r5,fp,-36
   1776c:	d8800015 	stw	r2,0(sp)
   17770:	e13ffc17 	ldw	r4,-16(fp)
   17774:	180f883a 	mov	r7,r3
   17778:	0017e040 	call	17e04 <OS_FlagBlock>
   1777c:	e0bfe617 	ldw	r2,-104(fp)
   17780:	e0bff115 	stw	r2,-60(fp)
   17784:	e0bff117 	ldw	r2,-60(fp)
   17788:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1778c:	00000a06 	br	177b8 <OSFlagPend+0x458>
   17790:	e0bfe617 	ldw	r2,-104(fp)
   17794:	e0bff215 	stw	r2,-56(fp)
   17798:	e0bff217 	ldw	r2,-56(fp)
   1779c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   177a0:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   177a4:	e0800217 	ldw	r2,8(fp)
   177a8:	00c01bc4 	movi	r3,111
   177ac:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   177b0:	e0bfe78b 	ldhu	r2,-98(fp)
   177b4:	00006106 	br	1793c <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   177b8:	00161dc0 	call	161dc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   177bc:	0005303a 	rdctl	r2,status
   177c0:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   177c4:	e0fff317 	ldw	r3,-52(fp)
   177c8:	00bfff84 	movi	r2,-2
   177cc:	1884703a 	and	r2,r3,r2
   177d0:	1001703a 	wrctl	status,r2
  
  return context;
   177d4:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   177d8:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   177dc:	008000f4 	movhi	r2,3
   177e0:	10a7ef04 	addi	r2,r2,-24644
   177e4:	10800017 	ldw	r2,0(r2)
   177e8:	10800c43 	ldbu	r2,49(r2)
   177ec:	10803fcc 	andi	r2,r2,255
   177f0:	10002226 	beq	r2,zero,1787c <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   177f4:	008000f4 	movhi	r2,3
   177f8:	10a7ef04 	addi	r2,r2,-24644
   177fc:	10800017 	ldw	r2,0(r2)
   17800:	10800c43 	ldbu	r2,49(r2)
   17804:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   17808:	008000f4 	movhi	r2,3
   1780c:	10a7ef04 	addi	r2,r2,-24644
   17810:	10800017 	ldw	r2,0(r2)
   17814:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   17818:	e0bff704 	addi	r2,fp,-36
   1781c:	1009883a 	mov	r4,r2
   17820:	00181bc0 	call	181bc <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   17824:	008000f4 	movhi	r2,3
   17828:	10a7ef04 	addi	r2,r2,-24644
   1782c:	10800017 	ldw	r2,0(r2)
   17830:	10000c05 	stb	zero,48(r2)
   17834:	e0bfe617 	ldw	r2,-104(fp)
   17838:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1783c:	e0bff417 	ldw	r2,-48(fp)
   17840:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   17844:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   17848:	e0bfe803 	ldbu	r2,-96(fp)
   1784c:	108000a0 	cmpeqi	r2,r2,2
   17850:	10000426 	beq	r2,zero,17864 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   17854:	e0800217 	ldw	r2,8(fp)
   17858:	00c00384 	movi	r3,14
   1785c:	10c00005 	stb	r3,0(r2)
                 break;
   17860:	00000406 	br	17874 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   17864:	e0800217 	ldw	r2,8(fp)
   17868:	00c00284 	movi	r3,10
   1786c:	10c00005 	stb	r3,0(r2)
                 break;
   17870:	0001883a 	nop
        }
        return (flags_rdy);
   17874:	e0bfe78b 	ldhu	r2,-98(fp)
   17878:	00003006 	br	1793c <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   1787c:	008000f4 	movhi	r2,3
   17880:	10a7ef04 	addi	r2,r2,-24644
   17884:	10800017 	ldw	r2,0(r2)
   17888:	10800b0b 	ldhu	r2,44(r2)
   1788c:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   17890:	e0bfe503 	ldbu	r2,-108(fp)
   17894:	10800058 	cmpnei	r2,r2,1
   17898:	1000211e 	bne	r2,zero,17920 <OSFlagPend+0x5c0>
        switch (wait_type) {
   1789c:	e0bffe03 	ldbu	r2,-8(fp)
   178a0:	10001616 	blt	r2,zero,178fc <OSFlagPend+0x59c>
   178a4:	10c00090 	cmplti	r3,r2,2
   178a8:	18000c1e 	bne	r3,zero,178dc <OSFlagPend+0x57c>
   178ac:	10800108 	cmpgei	r2,r2,4
   178b0:	1000121e 	bne	r2,zero,178fc <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   178b4:	e0bffc17 	ldw	r2,-16(fp)
   178b8:	1080020b 	ldhu	r2,8(r2)
   178bc:	1007883a 	mov	r3,r2
   178c0:	e0bfe78b 	ldhu	r2,-98(fp)
   178c4:	0084303a 	nor	r2,zero,r2
   178c8:	1884703a 	and	r2,r3,r2
   178cc:	1007883a 	mov	r3,r2
   178d0:	e0bffc17 	ldw	r2,-16(fp)
   178d4:	10c0020d 	sth	r3,8(r2)
                 break;
   178d8:	00001106 	br	17920 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   178dc:	e0bffc17 	ldw	r2,-16(fp)
   178e0:	10c0020b 	ldhu	r3,8(r2)
   178e4:	e0bfe78b 	ldhu	r2,-98(fp)
   178e8:	1884b03a 	or	r2,r3,r2
   178ec:	1007883a 	mov	r3,r2
   178f0:	e0bffc17 	ldw	r2,-16(fp)
   178f4:	10c0020d 	sth	r3,8(r2)
                 break;
   178f8:	00000906 	br	17920 <OSFlagPend+0x5c0>
   178fc:	e0bfe617 	ldw	r2,-104(fp)
   17900:	e0bff515 	stw	r2,-44(fp)
   17904:	e0bff517 	ldw	r2,-44(fp)
   17908:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   1790c:	e0800217 	ldw	r2,8(fp)
   17910:	00c01bc4 	movi	r3,111
   17914:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   17918:	0005883a 	mov	r2,zero
   1791c:	00000706 	br	1793c <OSFlagPend+0x5dc>
   17920:	e0bfe617 	ldw	r2,-104(fp)
   17924:	e0bff615 	stw	r2,-40(fp)
   17928:	e0bff617 	ldw	r2,-40(fp)
   1792c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   17930:	e0800217 	ldw	r2,8(fp)
   17934:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   17938:	e0bfe78b 	ldhu	r2,-98(fp)
}
   1793c:	e037883a 	mov	sp,fp
   17940:	dfc00117 	ldw	ra,4(sp)
   17944:	df000017 	ldw	fp,0(sp)
   17948:	dec00204 	addi	sp,sp,8
   1794c:	f800283a 	ret

00017950 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   17950:	defffb04 	addi	sp,sp,-20
   17954:	df000415 	stw	fp,16(sp)
   17958:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1795c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17960:	0005303a 	rdctl	r2,status
   17964:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17968:	e0fffe17 	ldw	r3,-8(fp)
   1796c:	00bfff84 	movi	r2,-2
   17970:	1884703a 	and	r2,r3,r2
   17974:	1001703a 	wrctl	status,r2
  
  return context;
   17978:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1797c:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   17980:	008000f4 	movhi	r2,3
   17984:	10a7ef04 	addi	r2,r2,-24644
   17988:	10800017 	ldw	r2,0(r2)
   1798c:	10800b0b 	ldhu	r2,44(r2)
   17990:	e0bffd0d 	sth	r2,-12(fp)
   17994:	e0bffc17 	ldw	r2,-16(fp)
   17998:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1799c:	e0bfff17 	ldw	r2,-4(fp)
   179a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   179a4:	e0bffd0b 	ldhu	r2,-12(fp)
}
   179a8:	e037883a 	mov	sp,fp
   179ac:	df000017 	ldw	fp,0(sp)
   179b0:	dec00104 	addi	sp,sp,4
   179b4:	f800283a 	ret

000179b8 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   179b8:	deffef04 	addi	sp,sp,-68
   179bc:	dfc01015 	stw	ra,64(sp)
   179c0:	df000f15 	stw	fp,60(sp)
   179c4:	df000f04 	addi	fp,sp,60
   179c8:	e13ffc15 	stw	r4,-16(fp)
   179cc:	2807883a 	mov	r3,r5
   179d0:	3005883a 	mov	r2,r6
   179d4:	e1ffff15 	stw	r7,-4(fp)
   179d8:	e0fffd0d 	sth	r3,-12(fp)
   179dc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   179e0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   179e4:	e0bfff17 	ldw	r2,-4(fp)
   179e8:	1000021e 	bne	r2,zero,179f4 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   179ec:	0005883a 	mov	r2,zero
   179f0:	0000ce06 	br	17d2c <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   179f4:	e0bffc17 	ldw	r2,-16(fp)
   179f8:	1000051e 	bne	r2,zero,17a10 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   179fc:	e0bfff17 	ldw	r2,-4(fp)
   17a00:	00c01b84 	movi	r3,110
   17a04:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17a08:	0005883a 	mov	r2,zero
   17a0c:	0000c706 	br	17d2c <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   17a10:	e0bffc17 	ldw	r2,-16(fp)
   17a14:	10800003 	ldbu	r2,0(r2)
   17a18:	10803fcc 	andi	r2,r2,255
   17a1c:	10800160 	cmpeqi	r2,r2,5
   17a20:	1000051e 	bne	r2,zero,17a38 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   17a24:	e0bfff17 	ldw	r2,-4(fp)
   17a28:	00c00044 	movi	r3,1
   17a2c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17a30:	0005883a 	mov	r2,zero
   17a34:	0000bd06 	br	17d2c <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17a38:	0005303a 	rdctl	r2,status
   17a3c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17a40:	e0fff617 	ldw	r3,-40(fp)
   17a44:	00bfff84 	movi	r2,-2
   17a48:	1884703a 	and	r2,r3,r2
   17a4c:	1001703a 	wrctl	status,r2
  
  return context;
   17a50:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   17a54:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   17a58:	e0bffe03 	ldbu	r2,-8(fp)
   17a5c:	10000326 	beq	r2,zero,17a6c <OSFlagPost+0xb4>
   17a60:	10800060 	cmpeqi	r2,r2,1
   17a64:	10000b1e 	bne	r2,zero,17a94 <OSFlagPost+0xdc>
   17a68:	00001206 	br	17ab4 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   17a6c:	e0bffc17 	ldw	r2,-16(fp)
   17a70:	1080020b 	ldhu	r2,8(r2)
   17a74:	1007883a 	mov	r3,r2
   17a78:	e0bffd0b 	ldhu	r2,-12(fp)
   17a7c:	0084303a 	nor	r2,zero,r2
   17a80:	1884703a 	and	r2,r3,r2
   17a84:	1007883a 	mov	r3,r2
   17a88:	e0bffc17 	ldw	r2,-16(fp)
   17a8c:	10c0020d 	sth	r3,8(r2)
             break;
   17a90:	00001106 	br	17ad8 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   17a94:	e0bffc17 	ldw	r2,-16(fp)
   17a98:	10c0020b 	ldhu	r3,8(r2)
   17a9c:	e0bffd0b 	ldhu	r2,-12(fp)
   17aa0:	1884b03a 	or	r2,r3,r2
   17aa4:	1007883a 	mov	r3,r2
   17aa8:	e0bffc17 	ldw	r2,-16(fp)
   17aac:	10c0020d 	sth	r3,8(r2)
             break;
   17ab0:	00000906 	br	17ad8 <OSFlagPost+0x120>
   17ab4:	e0bff317 	ldw	r2,-52(fp)
   17ab8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17abc:	e0bff717 	ldw	r2,-36(fp)
   17ac0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   17ac4:	e0bfff17 	ldw	r2,-4(fp)
   17ac8:	00c01c44 	movi	r3,113
   17acc:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   17ad0:	0005883a 	mov	r2,zero
   17ad4:	00009506 	br	17d2c <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   17ad8:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   17adc:	e0bffc17 	ldw	r2,-16(fp)
   17ae0:	10800117 	ldw	r2,4(r2)
   17ae4:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   17ae8:	00007406 	br	17cbc <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   17aec:	e0bff117 	ldw	r2,-60(fp)
   17af0:	10800483 	ldbu	r2,18(r2)
   17af4:	10803fcc 	andi	r2,r2,255
   17af8:	10c00060 	cmpeqi	r3,r2,1
   17afc:	18004d1e 	bne	r3,zero,17c34 <OSFlagPost+0x27c>
   17b00:	10c00088 	cmpgei	r3,r2,2
   17b04:	1800021e 	bne	r3,zero,17b10 <OSFlagPost+0x158>
   17b08:	10003126 	beq	r2,zero,17bd0 <OSFlagPost+0x218>
   17b0c:	00005f06 	br	17c8c <OSFlagPost+0x2d4>
   17b10:	10c000a0 	cmpeqi	r3,r2,2
   17b14:	1800031e 	bne	r3,zero,17b24 <OSFlagPost+0x16c>
   17b18:	108000e0 	cmpeqi	r2,r2,3
   17b1c:	1000181e 	bne	r2,zero,17b80 <OSFlagPost+0x1c8>
   17b20:	00005a06 	br	17c8c <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   17b24:	e0bffc17 	ldw	r2,-16(fp)
   17b28:	10c0020b 	ldhu	r3,8(r2)
   17b2c:	e0bff117 	ldw	r2,-60(fp)
   17b30:	1080040b 	ldhu	r2,16(r2)
   17b34:	1884703a 	and	r2,r3,r2
   17b38:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   17b3c:	e0bff117 	ldw	r2,-60(fp)
   17b40:	1080040b 	ldhu	r2,16(r2)
   17b44:	10ffffcc 	andi	r3,r2,65535
   17b48:	e0bff40b 	ldhu	r2,-48(fp)
   17b4c:	18800b1e 	bne	r3,r2,17b7c <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   17b50:	e0bff40b 	ldhu	r2,-48(fp)
   17b54:	e13ff117 	ldw	r4,-60(fp)
   17b58:	100b883a 	mov	r5,r2
   17b5c:	00180ac0 	call	180ac <OS_FlagTaskRdy>
   17b60:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   17b64:	e0bff483 	ldbu	r2,-46(fp)
   17b68:	10800058 	cmpnei	r2,r2,1
   17b6c:	1000031e 	bne	r2,zero,17b7c <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   17b70:	00800044 	movi	r2,1
   17b74:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   17b78:	00004d06 	br	17cb0 <OSFlagPost+0x2f8>
   17b7c:	00004c06 	br	17cb0 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   17b80:	e0bffc17 	ldw	r2,-16(fp)
   17b84:	10c0020b 	ldhu	r3,8(r2)
   17b88:	e0bff117 	ldw	r2,-60(fp)
   17b8c:	1080040b 	ldhu	r2,16(r2)
   17b90:	1884703a 	and	r2,r3,r2
   17b94:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   17b98:	e0bff40b 	ldhu	r2,-48(fp)
   17b9c:	10000b26 	beq	r2,zero,17bcc <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   17ba0:	e0bff40b 	ldhu	r2,-48(fp)
   17ba4:	e13ff117 	ldw	r4,-60(fp)
   17ba8:	100b883a 	mov	r5,r2
   17bac:	00180ac0 	call	180ac <OS_FlagTaskRdy>
   17bb0:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   17bb4:	e0bff483 	ldbu	r2,-46(fp)
   17bb8:	10800058 	cmpnei	r2,r2,1
   17bbc:	1000031e 	bne	r2,zero,17bcc <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   17bc0:	00800044 	movi	r2,1
   17bc4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   17bc8:	00003906 	br	17cb0 <OSFlagPost+0x2f8>
   17bcc:	00003806 	br	17cb0 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   17bd0:	e0bffc17 	ldw	r2,-16(fp)
   17bd4:	1080020b 	ldhu	r2,8(r2)
   17bd8:	0084303a 	nor	r2,zero,r2
   17bdc:	1007883a 	mov	r3,r2
   17be0:	e0bff117 	ldw	r2,-60(fp)
   17be4:	1080040b 	ldhu	r2,16(r2)
   17be8:	1884703a 	and	r2,r3,r2
   17bec:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   17bf0:	e0bff117 	ldw	r2,-60(fp)
   17bf4:	1080040b 	ldhu	r2,16(r2)
   17bf8:	10ffffcc 	andi	r3,r2,65535
   17bfc:	e0bff40b 	ldhu	r2,-48(fp)
   17c00:	18800b1e 	bne	r3,r2,17c30 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   17c04:	e0bff40b 	ldhu	r2,-48(fp)
   17c08:	e13ff117 	ldw	r4,-60(fp)
   17c0c:	100b883a 	mov	r5,r2
   17c10:	00180ac0 	call	180ac <OS_FlagTaskRdy>
   17c14:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   17c18:	e0bff483 	ldbu	r2,-46(fp)
   17c1c:	10800058 	cmpnei	r2,r2,1
   17c20:	1000031e 	bne	r2,zero,17c30 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   17c24:	00800044 	movi	r2,1
   17c28:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   17c2c:	00002006 	br	17cb0 <OSFlagPost+0x2f8>
   17c30:	00001f06 	br	17cb0 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   17c34:	e0bffc17 	ldw	r2,-16(fp)
   17c38:	1080020b 	ldhu	r2,8(r2)
   17c3c:	0084303a 	nor	r2,zero,r2
   17c40:	1007883a 	mov	r3,r2
   17c44:	e0bff117 	ldw	r2,-60(fp)
   17c48:	1080040b 	ldhu	r2,16(r2)
   17c4c:	1884703a 	and	r2,r3,r2
   17c50:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   17c54:	e0bff40b 	ldhu	r2,-48(fp)
   17c58:	10000b26 	beq	r2,zero,17c88 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   17c5c:	e0bff40b 	ldhu	r2,-48(fp)
   17c60:	e13ff117 	ldw	r4,-60(fp)
   17c64:	100b883a 	mov	r5,r2
   17c68:	00180ac0 	call	180ac <OS_FlagTaskRdy>
   17c6c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   17c70:	e0bff483 	ldbu	r2,-46(fp)
   17c74:	10800058 	cmpnei	r2,r2,1
   17c78:	1000031e 	bne	r2,zero,17c88 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   17c7c:	00800044 	movi	r2,1
   17c80:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   17c84:	00000a06 	br	17cb0 <OSFlagPost+0x2f8>
   17c88:	00000906 	br	17cb0 <OSFlagPost+0x2f8>
   17c8c:	e0bff317 	ldw	r2,-52(fp)
   17c90:	e0bff815 	stw	r2,-32(fp)
   17c94:	e0bff817 	ldw	r2,-32(fp)
   17c98:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   17c9c:	e0bfff17 	ldw	r2,-4(fp)
   17ca0:	00c01bc4 	movi	r3,111
   17ca4:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   17ca8:	0005883a 	mov	r2,zero
   17cac:	00001f06 	br	17d2c <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   17cb0:	e0bff117 	ldw	r2,-60(fp)
   17cb4:	10800017 	ldw	r2,0(r2)
   17cb8:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   17cbc:	e0bff117 	ldw	r2,-60(fp)
   17cc0:	103f8a1e 	bne	r2,zero,17aec <__alt_mem_Flash_flash_data+0xf4017aec>
   17cc4:	e0bff317 	ldw	r2,-52(fp)
   17cc8:	e0bff915 	stw	r2,-28(fp)
   17ccc:	e0bff917 	ldw	r2,-28(fp)
   17cd0:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   17cd4:	e0bff203 	ldbu	r2,-56(fp)
   17cd8:	10800058 	cmpnei	r2,r2,1
   17cdc:	1000011e 	bne	r2,zero,17ce4 <OSFlagPost+0x32c>
        OS_Sched();
   17ce0:	00161dc0 	call	161dc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17ce4:	0005303a 	rdctl	r2,status
   17ce8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17cec:	e0fffa17 	ldw	r3,-24(fp)
   17cf0:	00bfff84 	movi	r2,-2
   17cf4:	1884703a 	and	r2,r3,r2
   17cf8:	1001703a 	wrctl	status,r2
  
  return context;
   17cfc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   17d00:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   17d04:	e0bffc17 	ldw	r2,-16(fp)
   17d08:	1080020b 	ldhu	r2,8(r2)
   17d0c:	e0bff50d 	sth	r2,-44(fp)
   17d10:	e0bff317 	ldw	r2,-52(fp)
   17d14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17d18:	e0bffb17 	ldw	r2,-20(fp)
   17d1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   17d20:	e0bfff17 	ldw	r2,-4(fp)
   17d24:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   17d28:	e0bff50b 	ldhu	r2,-44(fp)
}
   17d2c:	e037883a 	mov	sp,fp
   17d30:	dfc00117 	ldw	ra,4(sp)
   17d34:	df000017 	ldw	fp,0(sp)
   17d38:	dec00204 	addi	sp,sp,8
   17d3c:	f800283a 	ret

00017d40 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   17d40:	defff904 	addi	sp,sp,-28
   17d44:	df000615 	stw	fp,24(sp)
   17d48:	df000604 	addi	fp,sp,24
   17d4c:	e13ffe15 	stw	r4,-8(fp)
   17d50:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   17d54:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   17d58:	e0bfff17 	ldw	r2,-4(fp)
   17d5c:	1000021e 	bne	r2,zero,17d68 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   17d60:	0005883a 	mov	r2,zero
   17d64:	00002306 	br	17df4 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   17d68:	e0bffe17 	ldw	r2,-8(fp)
   17d6c:	1000051e 	bne	r2,zero,17d84 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   17d70:	e0bfff17 	ldw	r2,-4(fp)
   17d74:	00c01b84 	movi	r3,110
   17d78:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17d7c:	0005883a 	mov	r2,zero
   17d80:	00001c06 	br	17df4 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   17d84:	e0bffe17 	ldw	r2,-8(fp)
   17d88:	10800003 	ldbu	r2,0(r2)
   17d8c:	10803fcc 	andi	r2,r2,255
   17d90:	10800160 	cmpeqi	r2,r2,5
   17d94:	1000051e 	bne	r2,zero,17dac <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   17d98:	e0bfff17 	ldw	r2,-4(fp)
   17d9c:	00c00044 	movi	r3,1
   17da0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17da4:	0005883a 	mov	r2,zero
   17da8:	00001206 	br	17df4 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17dac:	0005303a 	rdctl	r2,status
   17db0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17db4:	e0fffc17 	ldw	r3,-16(fp)
   17db8:	00bfff84 	movi	r2,-2
   17dbc:	1884703a 	and	r2,r3,r2
   17dc0:	1001703a 	wrctl	status,r2
  
  return context;
   17dc4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17dc8:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   17dcc:	e0bffe17 	ldw	r2,-8(fp)
   17dd0:	1080020b 	ldhu	r2,8(r2)
   17dd4:	e0bffb0d 	sth	r2,-20(fp)
   17dd8:	e0bffa17 	ldw	r2,-24(fp)
   17ddc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17de0:	e0bffd17 	ldw	r2,-12(fp)
   17de4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17de8:	e0bfff17 	ldw	r2,-4(fp)
   17dec:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   17df0:	e0bffb0b 	ldhu	r2,-20(fp)
}
   17df4:	e037883a 	mov	sp,fp
   17df8:	df000017 	ldw	fp,0(sp)
   17dfc:	dec00104 	addi	sp,sp,4
   17e00:	f800283a 	ret

00017e04 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   17e04:	defff804 	addi	sp,sp,-32
   17e08:	df000715 	stw	fp,28(sp)
   17e0c:	df000704 	addi	fp,sp,28
   17e10:	e13ffb15 	stw	r4,-20(fp)
   17e14:	e17ffc15 	stw	r5,-16(fp)
   17e18:	3009883a 	mov	r4,r6
   17e1c:	3807883a 	mov	r3,r7
   17e20:	e0800117 	ldw	r2,4(fp)
   17e24:	e13ffd0d 	sth	r4,-12(fp)
   17e28:	e0fffe05 	stb	r3,-8(fp)
   17e2c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   17e30:	008000f4 	movhi	r2,3
   17e34:	10a7ef04 	addi	r2,r2,-24644
   17e38:	10c00017 	ldw	r3,0(r2)
   17e3c:	008000f4 	movhi	r2,3
   17e40:	10a7ef04 	addi	r2,r2,-24644
   17e44:	10800017 	ldw	r2,0(r2)
   17e48:	10800c03 	ldbu	r2,48(r2)
   17e4c:	10800814 	ori	r2,r2,32
   17e50:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   17e54:	008000f4 	movhi	r2,3
   17e58:	10a7ef04 	addi	r2,r2,-24644
   17e5c:	10800017 	ldw	r2,0(r2)
   17e60:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   17e64:	008000f4 	movhi	r2,3
   17e68:	10a7ef04 	addi	r2,r2,-24644
   17e6c:	10800017 	ldw	r2,0(r2)
   17e70:	e0ffff0b 	ldhu	r3,-4(fp)
   17e74:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   17e78:	008000f4 	movhi	r2,3
   17e7c:	10a7ef04 	addi	r2,r2,-24644
   17e80:	10800017 	ldw	r2,0(r2)
   17e84:	e0fffc17 	ldw	r3,-16(fp)
   17e88:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   17e8c:	e0bffc17 	ldw	r2,-16(fp)
   17e90:	e0fffd0b 	ldhu	r3,-12(fp)
   17e94:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   17e98:	e0bffc17 	ldw	r2,-16(fp)
   17e9c:	e0fffe03 	ldbu	r3,-8(fp)
   17ea0:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   17ea4:	008000f4 	movhi	r2,3
   17ea8:	10a7ef04 	addi	r2,r2,-24644
   17eac:	10c00017 	ldw	r3,0(r2)
   17eb0:	e0bffc17 	ldw	r2,-16(fp)
   17eb4:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   17eb8:	e0bffb17 	ldw	r2,-20(fp)
   17ebc:	10c00117 	ldw	r3,4(r2)
   17ec0:	e0bffc17 	ldw	r2,-16(fp)
   17ec4:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   17ec8:	e0bffc17 	ldw	r2,-16(fp)
   17ecc:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   17ed0:	e0bffc17 	ldw	r2,-16(fp)
   17ed4:	e0fffb17 	ldw	r3,-20(fp)
   17ed8:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   17edc:	e0bffb17 	ldw	r2,-20(fp)
   17ee0:	10800117 	ldw	r2,4(r2)
   17ee4:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   17ee8:	e0bff917 	ldw	r2,-28(fp)
   17eec:	10000326 	beq	r2,zero,17efc <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   17ef0:	e0bff917 	ldw	r2,-28(fp)
   17ef4:	e0fffc17 	ldw	r3,-16(fp)
   17ef8:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   17efc:	e0bffb17 	ldw	r2,-20(fp)
   17f00:	e0fffc17 	ldw	r3,-16(fp)
   17f04:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   17f08:	008000f4 	movhi	r2,3
   17f0c:	10a7ef04 	addi	r2,r2,-24644
   17f10:	10800017 	ldw	r2,0(r2)
   17f14:	10800d03 	ldbu	r2,52(r2)
   17f18:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   17f1c:	e0fffa03 	ldbu	r3,-24(fp)
   17f20:	e13ffa03 	ldbu	r4,-24(fp)
   17f24:	008000f4 	movhi	r2,3
   17f28:	10a7ec44 	addi	r2,r2,-24655
   17f2c:	1105883a 	add	r2,r2,r4
   17f30:	10800003 	ldbu	r2,0(r2)
   17f34:	1009883a 	mov	r4,r2
   17f38:	008000f4 	movhi	r2,3
   17f3c:	10a7ef04 	addi	r2,r2,-24644
   17f40:	10800017 	ldw	r2,0(r2)
   17f44:	10800d43 	ldbu	r2,53(r2)
   17f48:	0084303a 	nor	r2,zero,r2
   17f4c:	2084703a 	and	r2,r4,r2
   17f50:	1009883a 	mov	r4,r2
   17f54:	008000f4 	movhi	r2,3
   17f58:	10a7ec44 	addi	r2,r2,-24655
   17f5c:	10c5883a 	add	r2,r2,r3
   17f60:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   17f64:	e0fffa03 	ldbu	r3,-24(fp)
   17f68:	008000f4 	movhi	r2,3
   17f6c:	10a7ec44 	addi	r2,r2,-24655
   17f70:	10c5883a 	add	r2,r2,r3
   17f74:	10800003 	ldbu	r2,0(r2)
   17f78:	10803fcc 	andi	r2,r2,255
   17f7c:	10000e1e 	bne	r2,zero,17fb8 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   17f80:	008000f4 	movhi	r2,3
   17f84:	10a7ef04 	addi	r2,r2,-24644
   17f88:	10800017 	ldw	r2,0(r2)
   17f8c:	10800d83 	ldbu	r2,54(r2)
   17f90:	0084303a 	nor	r2,zero,r2
   17f94:	1007883a 	mov	r3,r2
   17f98:	008000f4 	movhi	r2,3
   17f9c:	10a7ec04 	addi	r2,r2,-24656
   17fa0:	10800003 	ldbu	r2,0(r2)
   17fa4:	1884703a 	and	r2,r3,r2
   17fa8:	1007883a 	mov	r3,r2
   17fac:	008000f4 	movhi	r2,3
   17fb0:	10a7ec04 	addi	r2,r2,-24656
   17fb4:	10c00005 	stb	r3,0(r2)
    }
}
   17fb8:	e037883a 	mov	sp,fp
   17fbc:	df000017 	ldw	fp,0(sp)
   17fc0:	dec00104 	addi	sp,sp,4
   17fc4:	f800283a 	ret

00017fc8 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   17fc8:	defffb04 	addi	sp,sp,-20
   17fcc:	dfc00415 	stw	ra,16(sp)
   17fd0:	df000315 	stw	fp,12(sp)
   17fd4:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   17fd8:	01000174 	movhi	r4,5
   17fdc:	21304304 	addi	r4,r4,-16116
   17fe0:	0140dc04 	movi	r5,880
   17fe4:	00161280 	call	16128 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   17fe8:	00800174 	movhi	r2,5
   17fec:	10b04304 	addi	r2,r2,-16116
   17ff0:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   17ff4:	00800174 	movhi	r2,5
   17ff8:	10b04e04 	addi	r2,r2,-16072
   17ffc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   18000:	e03ffd0d 	sth	zero,-12(fp)
   18004:	00001306 	br	18054 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   18008:	e0bffe17 	ldw	r2,-8(fp)
   1800c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   18010:	e0bffe17 	ldw	r2,-8(fp)
   18014:	e0ffff17 	ldw	r3,-4(fp)
   18018:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   1801c:	e0bffe17 	ldw	r2,-8(fp)
   18020:	00c00fc4 	movi	r3,63
   18024:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   18028:	e0bffe17 	ldw	r2,-8(fp)
   1802c:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   18030:	e0bffe17 	ldw	r2,-8(fp)
   18034:	10800b04 	addi	r2,r2,44
   18038:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   1803c:	e0bfff17 	ldw	r2,-4(fp)
   18040:	10800b04 	addi	r2,r2,44
   18044:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   18048:	e0bffd0b 	ldhu	r2,-12(fp)
   1804c:	10800044 	addi	r2,r2,1
   18050:	e0bffd0d 	sth	r2,-12(fp)
   18054:	e0bffd0b 	ldhu	r2,-12(fp)
   18058:	108004f0 	cmpltui	r2,r2,19
   1805c:	103fea1e 	bne	r2,zero,18008 <__alt_mem_Flash_flash_data+0xf4018008>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   18060:	e0bffe17 	ldw	r2,-8(fp)
   18064:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   18068:	e0bffe17 	ldw	r2,-8(fp)
   1806c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   18070:	e0bffe17 	ldw	r2,-8(fp)
   18074:	00c00fc4 	movi	r3,63
   18078:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   1807c:	e0bffe17 	ldw	r2,-8(fp)
   18080:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   18084:	008000f4 	movhi	r2,3
   18088:	10a7f104 	addi	r2,r2,-24636
   1808c:	00c00174 	movhi	r3,5
   18090:	18f04304 	addi	r3,r3,-16116
   18094:	10c00015 	stw	r3,0(r2)
#endif
}
   18098:	e037883a 	mov	sp,fp
   1809c:	dfc00117 	ldw	ra,4(sp)
   180a0:	df000017 	ldw	fp,0(sp)
   180a4:	dec00204 	addi	sp,sp,8
   180a8:	f800283a 	ret

000180ac <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   180ac:	defffa04 	addi	sp,sp,-24
   180b0:	dfc00515 	stw	ra,20(sp)
   180b4:	df000415 	stw	fp,16(sp)
   180b8:	df000404 	addi	fp,sp,16
   180bc:	e13ffe15 	stw	r4,-8(fp)
   180c0:	2805883a 	mov	r2,r5
   180c4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   180c8:	e0bffe17 	ldw	r2,-8(fp)
   180cc:	10800217 	ldw	r2,8(r2)
   180d0:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   180d4:	e0bffd17 	ldw	r2,-12(fp)
   180d8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   180dc:	e0bffd17 	ldw	r2,-12(fp)
   180e0:	e0ffff0b 	ldhu	r3,-4(fp)
   180e4:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   180e8:	e0bffd17 	ldw	r2,-12(fp)
   180ec:	10c00c03 	ldbu	r3,48(r2)
   180f0:	00bff7c4 	movi	r2,-33
   180f4:	1884703a 	and	r2,r3,r2
   180f8:	1007883a 	mov	r3,r2
   180fc:	e0bffd17 	ldw	r2,-12(fp)
   18100:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   18104:	e0bffd17 	ldw	r2,-12(fp)
   18108:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   1810c:	e0bffd17 	ldw	r2,-12(fp)
   18110:	10800c03 	ldbu	r2,48(r2)
   18114:	10803fcc 	andi	r2,r2,255
   18118:	10001f1e 	bne	r2,zero,18198 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   1811c:	e0bffd17 	ldw	r2,-12(fp)
   18120:	10c00d83 	ldbu	r3,54(r2)
   18124:	008000f4 	movhi	r2,3
   18128:	10a7ec04 	addi	r2,r2,-24656
   1812c:	10800003 	ldbu	r2,0(r2)
   18130:	1884b03a 	or	r2,r3,r2
   18134:	1007883a 	mov	r3,r2
   18138:	008000f4 	movhi	r2,3
   1813c:	10a7ec04 	addi	r2,r2,-24656
   18140:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   18144:	e0bffd17 	ldw	r2,-12(fp)
   18148:	10800d03 	ldbu	r2,52(r2)
   1814c:	10c03fcc 	andi	r3,r2,255
   18150:	e0bffd17 	ldw	r2,-12(fp)
   18154:	10800d03 	ldbu	r2,52(r2)
   18158:	11003fcc 	andi	r4,r2,255
   1815c:	008000f4 	movhi	r2,3
   18160:	10a7ec44 	addi	r2,r2,-24655
   18164:	1105883a 	add	r2,r2,r4
   18168:	11000003 	ldbu	r4,0(r2)
   1816c:	e0bffd17 	ldw	r2,-12(fp)
   18170:	10800d43 	ldbu	r2,53(r2)
   18174:	2084b03a 	or	r2,r4,r2
   18178:	1009883a 	mov	r4,r2
   1817c:	008000f4 	movhi	r2,3
   18180:	10a7ec44 	addi	r2,r2,-24655
   18184:	10c5883a 	add	r2,r2,r3
   18188:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   1818c:	00800044 	movi	r2,1
   18190:	e0bffc05 	stb	r2,-16(fp)
   18194:	00000106 	br	1819c <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   18198:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   1819c:	e13ffe17 	ldw	r4,-8(fp)
   181a0:	00181bc0 	call	181bc <OS_FlagUnlink>
    return (sched);
   181a4:	e0bffc03 	ldbu	r2,-16(fp)
}
   181a8:	e037883a 	mov	sp,fp
   181ac:	dfc00117 	ldw	ra,4(sp)
   181b0:	df000017 	ldw	fp,0(sp)
   181b4:	dec00204 	addi	sp,sp,8
   181b8:	f800283a 	ret

000181bc <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   181bc:	defffa04 	addi	sp,sp,-24
   181c0:	df000515 	stw	fp,20(sp)
   181c4:	df000504 	addi	fp,sp,20
   181c8:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   181cc:	e0bfff17 	ldw	r2,-4(fp)
   181d0:	10800117 	ldw	r2,4(r2)
   181d4:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   181d8:	e0bfff17 	ldw	r2,-4(fp)
   181dc:	10800017 	ldw	r2,0(r2)
   181e0:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   181e4:	e0bffb17 	ldw	r2,-20(fp)
   181e8:	10000b1e 	bne	r2,zero,18218 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   181ec:	e0bfff17 	ldw	r2,-4(fp)
   181f0:	10800317 	ldw	r2,12(r2)
   181f4:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   181f8:	e0bffd17 	ldw	r2,-12(fp)
   181fc:	e0fffc17 	ldw	r3,-16(fp)
   18200:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   18204:	e0bffc17 	ldw	r2,-16(fp)
   18208:	10000b26 	beq	r2,zero,18238 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   1820c:	e0bffc17 	ldw	r2,-16(fp)
   18210:	10000115 	stw	zero,4(r2)
   18214:	00000806 	br	18238 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   18218:	e0bffb17 	ldw	r2,-20(fp)
   1821c:	e0fffc17 	ldw	r3,-16(fp)
   18220:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   18224:	e0bffc17 	ldw	r2,-16(fp)
   18228:	10000326 	beq	r2,zero,18238 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   1822c:	e0bffc17 	ldw	r2,-16(fp)
   18230:	e0fffb17 	ldw	r3,-20(fp)
   18234:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   18238:	e0bfff17 	ldw	r2,-4(fp)
   1823c:	10800217 	ldw	r2,8(r2)
   18240:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   18244:	e0bffe17 	ldw	r2,-8(fp)
   18248:	10000a15 	stw	zero,40(r2)
#endif
}
   1824c:	e037883a 	mov	sp,fp
   18250:	df000017 	ldw	fp,0(sp)
   18254:	dec00104 	addi	sp,sp,4
   18258:	f800283a 	ret

0001825c <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
   1825c:	defffa04 	addi	sp,sp,-24
   18260:	df000515 	stw	fp,20(sp)
   18264:	df000504 	addi	fp,sp,20
   18268:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
   1826c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
   18270:	e0bfff17 	ldw	r2,-4(fp)
   18274:	1000021e 	bne	r2,zero,18280 <OSMboxAccept+0x24>
        return ((void *)0);
   18278:	0005883a 	mov	r2,zero
   1827c:	00001906 	br	182e4 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
   18280:	e0bfff17 	ldw	r2,-4(fp)
   18284:	10800003 	ldbu	r2,0(r2)
   18288:	10803fcc 	andi	r2,r2,255
   1828c:	10800060 	cmpeqi	r2,r2,1
   18290:	1000021e 	bne	r2,zero,1829c <OSMboxAccept+0x40>
        return ((void *)0);
   18294:	0005883a 	mov	r2,zero
   18298:	00001206 	br	182e4 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1829c:	0005303a 	rdctl	r2,status
   182a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   182a4:	e0fffd17 	ldw	r3,-12(fp)
   182a8:	00bfff84 	movi	r2,-2
   182ac:	1884703a 	and	r2,r3,r2
   182b0:	1001703a 	wrctl	status,r2
  
  return context;
   182b4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   182b8:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
   182bc:	e0bfff17 	ldw	r2,-4(fp)
   182c0:	10800117 	ldw	r2,4(r2)
   182c4:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
   182c8:	e0bfff17 	ldw	r2,-4(fp)
   182cc:	10000115 	stw	zero,4(r2)
   182d0:	e0bffb17 	ldw	r2,-20(fp)
   182d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   182d8:	e0bffe17 	ldw	r2,-8(fp)
   182dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
   182e0:	e0bffc17 	ldw	r2,-16(fp)
}
   182e4:	e037883a 	mov	sp,fp
   182e8:	df000017 	ldw	fp,0(sp)
   182ec:	dec00104 	addi	sp,sp,4
   182f0:	f800283a 	ret

000182f4 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
   182f4:	defff904 	addi	sp,sp,-28
   182f8:	dfc00615 	stw	ra,24(sp)
   182fc:	df000515 	stw	fp,20(sp)
   18300:	df000504 	addi	fp,sp,20
   18304:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18308:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   1830c:	008000f4 	movhi	r2,3
   18310:	10a7ee04 	addi	r2,r2,-24648
   18314:	10800003 	ldbu	r2,0(r2)
   18318:	10803fcc 	andi	r2,r2,255
   1831c:	10000226 	beq	r2,zero,18328 <OSMboxCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   18320:	0005883a 	mov	r2,zero
   18324:	00002d06 	br	183dc <OSMboxCreate+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18328:	0005303a 	rdctl	r2,status
   1832c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18330:	e0fffd17 	ldw	r3,-12(fp)
   18334:	00bfff84 	movi	r2,-2
   18338:	1884703a 	and	r2,r3,r2
   1833c:	1001703a 	wrctl	status,r2
  
  return context;
   18340:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   18344:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   18348:	008000f4 	movhi	r2,3
   1834c:	10a7ed04 	addi	r2,r2,-24652
   18350:	10800017 	ldw	r2,0(r2)
   18354:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   18358:	008000f4 	movhi	r2,3
   1835c:	10a7ed04 	addi	r2,r2,-24652
   18360:	10800017 	ldw	r2,0(r2)
   18364:	10000726 	beq	r2,zero,18384 <OSMboxCreate+0x90>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   18368:	008000f4 	movhi	r2,3
   1836c:	10a7ed04 	addi	r2,r2,-24652
   18370:	10800017 	ldw	r2,0(r2)
   18374:	10c00117 	ldw	r3,4(r2)
   18378:	008000f4 	movhi	r2,3
   1837c:	10a7ed04 	addi	r2,r2,-24652
   18380:	10c00015 	stw	r3,0(r2)
   18384:	e0bffb17 	ldw	r2,-20(fp)
   18388:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1838c:	e0bffe17 	ldw	r2,-8(fp)
   18390:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
   18394:	e0bffc17 	ldw	r2,-16(fp)
   18398:	10000f26 	beq	r2,zero,183d8 <OSMboxCreate+0xe4>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
   1839c:	e0bffc17 	ldw	r2,-16(fp)
   183a0:	00c00044 	movi	r3,1
   183a4:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
   183a8:	e0bffc17 	ldw	r2,-16(fp)
   183ac:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
   183b0:	e0bffc17 	ldw	r2,-16(fp)
   183b4:	e0ffff17 	ldw	r3,-4(fp)
   183b8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
   183bc:	e0bffc17 	ldw	r2,-16(fp)
   183c0:	00c00fc4 	movi	r3,63
   183c4:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   183c8:	e0bffc17 	ldw	r2,-16(fp)
   183cc:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
   183d0:	e13ffc17 	ldw	r4,-16(fp)
   183d4:	0015d640 	call	15d64 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
   183d8:	e0bffc17 	ldw	r2,-16(fp)
}
   183dc:	e037883a 	mov	sp,fp
   183e0:	dfc00117 	ldw	ra,4(sp)
   183e4:	df000017 	ldw	fp,0(sp)
   183e8:	dec00204 	addi	sp,sp,8
   183ec:	f800283a 	ret

000183f0 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   183f0:	defff304 	addi	sp,sp,-52
   183f4:	dfc00c15 	stw	ra,48(sp)
   183f8:	df000b15 	stw	fp,44(sp)
   183fc:	df000b04 	addi	fp,sp,44
   18400:	e13ffd15 	stw	r4,-12(fp)
   18404:	2805883a 	mov	r2,r5
   18408:	e1bfff15 	stw	r6,-4(fp)
   1840c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18410:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   18414:	e0bfff17 	ldw	r2,-4(fp)
   18418:	1000021e 	bne	r2,zero,18424 <OSMboxDel+0x34>
        return (pevent);
   1841c:	e0bffd17 	ldw	r2,-12(fp)
   18420:	00008806 	br	18644 <OSMboxDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18424:	e0bffd17 	ldw	r2,-12(fp)
   18428:	1000051e 	bne	r2,zero,18440 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1842c:	e0bfff17 	ldw	r2,-4(fp)
   18430:	00c00104 	movi	r3,4
   18434:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18438:	e0bffd17 	ldw	r2,-12(fp)
   1843c:	00008106 	br	18644 <OSMboxDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   18440:	e0bffd17 	ldw	r2,-12(fp)
   18444:	10800003 	ldbu	r2,0(r2)
   18448:	10803fcc 	andi	r2,r2,255
   1844c:	10800060 	cmpeqi	r2,r2,1
   18450:	1000051e 	bne	r2,zero,18468 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   18454:	e0bfff17 	ldw	r2,-4(fp)
   18458:	00c00044 	movi	r3,1
   1845c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18460:	e0bffd17 	ldw	r2,-12(fp)
   18464:	00007706 	br	18644 <OSMboxDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   18468:	008000f4 	movhi	r2,3
   1846c:	10a7ee04 	addi	r2,r2,-24648
   18470:	10800003 	ldbu	r2,0(r2)
   18474:	10803fcc 	andi	r2,r2,255
   18478:	10000526 	beq	r2,zero,18490 <OSMboxDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1847c:	e0bfff17 	ldw	r2,-4(fp)
   18480:	00c003c4 	movi	r3,15
   18484:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18488:	e0bffd17 	ldw	r2,-12(fp)
   1848c:	00006d06 	br	18644 <OSMboxDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18490:	0005303a 	rdctl	r2,status
   18494:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18498:	e0fff817 	ldw	r3,-32(fp)
   1849c:	00bfff84 	movi	r2,-2
   184a0:	1884703a 	and	r2,r3,r2
   184a4:	1001703a 	wrctl	status,r2
  
  return context;
   184a8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   184ac:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
   184b0:	e0bffd17 	ldw	r2,-12(fp)
   184b4:	10800283 	ldbu	r2,10(r2)
   184b8:	10803fcc 	andi	r2,r2,255
   184bc:	10000326 	beq	r2,zero,184cc <OSMboxDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   184c0:	00800044 	movi	r2,1
   184c4:	e0bff505 	stb	r2,-44(fp)
   184c8:	00000106 	br	184d0 <OSMboxDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   184cc:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   184d0:	e0bffe03 	ldbu	r2,-8(fp)
   184d4:	10000326 	beq	r2,zero,184e4 <OSMboxDel+0xf4>
   184d8:	10800060 	cmpeqi	r2,r2,1
   184dc:	10002c1e 	bne	r2,zero,18590 <OSMboxDel+0x1a0>
   184e0:	00004d06 	br	18618 <OSMboxDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
   184e4:	e0bff503 	ldbu	r2,-44(fp)
   184e8:	10001a1e 	bne	r2,zero,18554 <OSMboxDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   184ec:	e0bffd17 	ldw	r2,-12(fp)
   184f0:	00c00fc4 	movi	r3,63
   184f4:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   184f8:	e0bffd17 	ldw	r2,-12(fp)
   184fc:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   18500:	e0bffd17 	ldw	r2,-12(fp)
   18504:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   18508:	008000f4 	movhi	r2,3
   1850c:	10a7ed04 	addi	r2,r2,-24652
   18510:	10c00017 	ldw	r3,0(r2)
   18514:	e0bffd17 	ldw	r2,-12(fp)
   18518:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
   1851c:	e0bffd17 	ldw	r2,-12(fp)
   18520:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
   18524:	008000f4 	movhi	r2,3
   18528:	10a7ed04 	addi	r2,r2,-24652
   1852c:	e0fffd17 	ldw	r3,-12(fp)
   18530:	10c00015 	stw	r3,0(r2)
   18534:	e0bff717 	ldw	r2,-36(fp)
   18538:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1853c:	e0bff917 	ldw	r2,-28(fp)
   18540:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
   18544:	e0bfff17 	ldw	r2,-4(fp)
   18548:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
   1854c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
   18550:	00003b06 	br	18640 <OSMboxDel+0x250>
   18554:	e0bff717 	ldw	r2,-36(fp)
   18558:	e0bffa15 	stw	r2,-24(fp)
   1855c:	e0bffa17 	ldw	r2,-24(fp)
   18560:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
   18564:	e0bfff17 	ldw	r2,-4(fp)
   18568:	00c01244 	movi	r3,73
   1856c:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
   18570:	e0bffd17 	ldw	r2,-12(fp)
   18574:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   18578:	00003106 	br	18640 <OSMboxDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
   1857c:	e13ffd17 	ldw	r4,-12(fp)
   18580:	000b883a 	mov	r5,zero
   18584:	01800084 	movi	r6,2
   18588:	000f883a 	mov	r7,zero
   1858c:	00157c40 	call	157c4 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
   18590:	e0bffd17 	ldw	r2,-12(fp)
   18594:	10800283 	ldbu	r2,10(r2)
   18598:	10803fcc 	andi	r2,r2,255
   1859c:	103ff71e 	bne	r2,zero,1857c <__alt_mem_Flash_flash_data+0xf401857c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   185a0:	e0bffd17 	ldw	r2,-12(fp)
   185a4:	00c00fc4 	movi	r3,63
   185a8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   185ac:	e0bffd17 	ldw	r2,-12(fp)
   185b0:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   185b4:	e0bffd17 	ldw	r2,-12(fp)
   185b8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   185bc:	008000f4 	movhi	r2,3
   185c0:	10a7ed04 	addi	r2,r2,-24652
   185c4:	10c00017 	ldw	r3,0(r2)
   185c8:	e0bffd17 	ldw	r2,-12(fp)
   185cc:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   185d0:	e0bffd17 	ldw	r2,-12(fp)
   185d4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   185d8:	008000f4 	movhi	r2,3
   185dc:	10a7ed04 	addi	r2,r2,-24652
   185e0:	e0fffd17 	ldw	r3,-12(fp)
   185e4:	10c00015 	stw	r3,0(r2)
   185e8:	e0bff717 	ldw	r2,-36(fp)
   185ec:	e0bffb15 	stw	r2,-20(fp)
   185f0:	e0bffb17 	ldw	r2,-20(fp)
   185f4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   185f8:	e0bff503 	ldbu	r2,-44(fp)
   185fc:	10800058 	cmpnei	r2,r2,1
   18600:	1000011e 	bne	r2,zero,18608 <OSMboxDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   18604:	00161dc0 	call	161dc <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
   18608:	e0bfff17 	ldw	r2,-4(fp)
   1860c:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
   18610:	e03ff615 	stw	zero,-40(fp)
             break;
   18614:	00000a06 	br	18640 <OSMboxDel+0x250>
   18618:	e0bff717 	ldw	r2,-36(fp)
   1861c:	e0bffc15 	stw	r2,-16(fp)
   18620:	e0bffc17 	ldw	r2,-16(fp)
   18624:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
   18628:	e0bfff17 	ldw	r2,-4(fp)
   1862c:	00c001c4 	movi	r3,7
   18630:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
   18634:	e0bffd17 	ldw	r2,-12(fp)
   18638:	e0bff615 	stw	r2,-40(fp)
             break;
   1863c:	0001883a 	nop
    }
    return (pevent_return);
   18640:	e0bff617 	ldw	r2,-40(fp)
}
   18644:	e037883a 	mov	sp,fp
   18648:	dfc00117 	ldw	ra,4(sp)
   1864c:	df000017 	ldw	fp,0(sp)
   18650:	dec00204 	addi	sp,sp,8
   18654:	f800283a 	ret

00018658 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   18658:	defff404 	addi	sp,sp,-48
   1865c:	dfc00b15 	stw	ra,44(sp)
   18660:	df000a15 	stw	fp,40(sp)
   18664:	df000a04 	addi	fp,sp,40
   18668:	e13ffd15 	stw	r4,-12(fp)
   1866c:	2805883a 	mov	r2,r5
   18670:	e1bfff15 	stw	r6,-4(fp)
   18674:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18678:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1867c:	e0bfff17 	ldw	r2,-4(fp)
   18680:	1000021e 	bne	r2,zero,1868c <OSMboxPend+0x34>
        return ((void *)0);
   18684:	0005883a 	mov	r2,zero
   18688:	00009706 	br	188e8 <OSMboxPend+0x290>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1868c:	e0bffd17 	ldw	r2,-12(fp)
   18690:	1000051e 	bne	r2,zero,186a8 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18694:	e0bfff17 	ldw	r2,-4(fp)
   18698:	00c00104 	movi	r3,4
   1869c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   186a0:	0005883a 	mov	r2,zero
   186a4:	00009006 	br	188e8 <OSMboxPend+0x290>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   186a8:	e0bffd17 	ldw	r2,-12(fp)
   186ac:	10800003 	ldbu	r2,0(r2)
   186b0:	10803fcc 	andi	r2,r2,255
   186b4:	10800060 	cmpeqi	r2,r2,1
   186b8:	1000051e 	bne	r2,zero,186d0 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   186bc:	e0bfff17 	ldw	r2,-4(fp)
   186c0:	00c00044 	movi	r3,1
   186c4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   186c8:	0005883a 	mov	r2,zero
   186cc:	00008606 	br	188e8 <OSMboxPend+0x290>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   186d0:	008000f4 	movhi	r2,3
   186d4:	10a7ee04 	addi	r2,r2,-24648
   186d8:	10800003 	ldbu	r2,0(r2)
   186dc:	10803fcc 	andi	r2,r2,255
   186e0:	10000526 	beq	r2,zero,186f8 <OSMboxPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   186e4:	e0bfff17 	ldw	r2,-4(fp)
   186e8:	00c00084 	movi	r3,2
   186ec:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   186f0:	0005883a 	mov	r2,zero
   186f4:	00007c06 	br	188e8 <OSMboxPend+0x290>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   186f8:	008000f4 	movhi	r2,3
   186fc:	10a7e004 	addi	r2,r2,-24704
   18700:	10800003 	ldbu	r2,0(r2)
   18704:	10803fcc 	andi	r2,r2,255
   18708:	10000526 	beq	r2,zero,18720 <OSMboxPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   1870c:	e0bfff17 	ldw	r2,-4(fp)
   18710:	00c00344 	movi	r3,13
   18714:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18718:	0005883a 	mov	r2,zero
   1871c:	00007206 	br	188e8 <OSMboxPend+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18720:	0005303a 	rdctl	r2,status
   18724:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18728:	e0fff817 	ldw	r3,-32(fp)
   1872c:	00bfff84 	movi	r2,-2
   18730:	1884703a 	and	r2,r3,r2
   18734:	1001703a 	wrctl	status,r2
  
  return context;
   18738:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1873c:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
   18740:	e0bffd17 	ldw	r2,-12(fp)
   18744:	10800117 	ldw	r2,4(r2)
   18748:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
   1874c:	e0bff617 	ldw	r2,-40(fp)
   18750:	10000a26 	beq	r2,zero,1877c <OSMboxPend+0x124>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
   18754:	e0bffd17 	ldw	r2,-12(fp)
   18758:	10000115 	stw	zero,4(r2)
   1875c:	e0bff717 	ldw	r2,-36(fp)
   18760:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18764:	e0bff917 	ldw	r2,-28(fp)
   18768:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1876c:	e0bfff17 	ldw	r2,-4(fp)
   18770:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
   18774:	e0bff617 	ldw	r2,-40(fp)
   18778:	00005b06 	br	188e8 <OSMboxPend+0x290>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
   1877c:	008000f4 	movhi	r2,3
   18780:	10a7ef04 	addi	r2,r2,-24644
   18784:	10c00017 	ldw	r3,0(r2)
   18788:	008000f4 	movhi	r2,3
   1878c:	10a7ef04 	addi	r2,r2,-24644
   18790:	10800017 	ldw	r2,0(r2)
   18794:	10800c03 	ldbu	r2,48(r2)
   18798:	10800094 	ori	r2,r2,2
   1879c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   187a0:	008000f4 	movhi	r2,3
   187a4:	10a7ef04 	addi	r2,r2,-24644
   187a8:	10800017 	ldw	r2,0(r2)
   187ac:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
   187b0:	008000f4 	movhi	r2,3
   187b4:	10a7ef04 	addi	r2,r2,-24644
   187b8:	10800017 	ldw	r2,0(r2)
   187bc:	e0fffe0b 	ldhu	r3,-8(fp)
   187c0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   187c4:	e13ffd17 	ldw	r4,-12(fp)
   187c8:	001595c0 	call	1595c <OS_EventTaskWait>
   187cc:	e0bff717 	ldw	r2,-36(fp)
   187d0:	e0bffa15 	stw	r2,-24(fp)
   187d4:	e0bffa17 	ldw	r2,-24(fp)
   187d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
   187dc:	00161dc0 	call	161dc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   187e0:	0005303a 	rdctl	r2,status
   187e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   187e8:	e0fffb17 	ldw	r3,-20(fp)
   187ec:	00bfff84 	movi	r2,-2
   187f0:	1884703a 	and	r2,r3,r2
   187f4:	1001703a 	wrctl	status,r2
  
  return context;
   187f8:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   187fc:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   18800:	008000f4 	movhi	r2,3
   18804:	10a7ef04 	addi	r2,r2,-24644
   18808:	10800017 	ldw	r2,0(r2)
   1880c:	10800c43 	ldbu	r2,49(r2)
   18810:	10803fcc 	andi	r2,r2,255
   18814:	10000326 	beq	r2,zero,18824 <OSMboxPend+0x1cc>
   18818:	108000a0 	cmpeqi	r2,r2,2
   1881c:	1000091e 	bne	r2,zero,18844 <OSMboxPend+0x1ec>
   18820:	00000d06 	br	18858 <OSMboxPend+0x200>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
   18824:	008000f4 	movhi	r2,3
   18828:	10a7ef04 	addi	r2,r2,-24644
   1882c:	10800017 	ldw	r2,0(r2)
   18830:	10800917 	ldw	r2,36(r2)
   18834:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
   18838:	e0bfff17 	ldw	r2,-4(fp)
   1883c:	10000005 	stb	zero,0(r2)
             break;
   18840:	00001006 	br	18884 <OSMboxPend+0x22c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   18844:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   18848:	e0bfff17 	ldw	r2,-4(fp)
   1884c:	00c00384 	movi	r3,14
   18850:	10c00005 	stb	r3,0(r2)
             break;
   18854:	00000b06 	br	18884 <OSMboxPend+0x22c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   18858:	008000f4 	movhi	r2,3
   1885c:	10a7ef04 	addi	r2,r2,-24644
   18860:	10800017 	ldw	r2,0(r2)
   18864:	1009883a 	mov	r4,r2
   18868:	e17ffd17 	ldw	r5,-12(fp)
   1886c:	0015bb40 	call	15bb4 <OS_EventTaskRemove>
             pmsg = (void *)0;
   18870:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   18874:	e0bfff17 	ldw	r2,-4(fp)
   18878:	00c00284 	movi	r3,10
   1887c:	10c00005 	stb	r3,0(r2)
             break;
   18880:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   18884:	008000f4 	movhi	r2,3
   18888:	10a7ef04 	addi	r2,r2,-24644
   1888c:	10800017 	ldw	r2,0(r2)
   18890:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   18894:	008000f4 	movhi	r2,3
   18898:	10a7ef04 	addi	r2,r2,-24644
   1889c:	10800017 	ldw	r2,0(r2)
   188a0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   188a4:	008000f4 	movhi	r2,3
   188a8:	10a7ef04 	addi	r2,r2,-24644
   188ac:	10800017 	ldw	r2,0(r2)
   188b0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   188b4:	008000f4 	movhi	r2,3
   188b8:	10a7ef04 	addi	r2,r2,-24644
   188bc:	10800017 	ldw	r2,0(r2)
   188c0:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   188c4:	008000f4 	movhi	r2,3
   188c8:	10a7ef04 	addi	r2,r2,-24644
   188cc:	10800017 	ldw	r2,0(r2)
   188d0:	10000915 	stw	zero,36(r2)
   188d4:	e0bff717 	ldw	r2,-36(fp)
   188d8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   188dc:	e0bffc17 	ldw	r2,-16(fp)
   188e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   188e4:	e0bff617 	ldw	r2,-40(fp)
}
   188e8:	e037883a 	mov	sp,fp
   188ec:	dfc00117 	ldw	ra,4(sp)
   188f0:	df000017 	ldw	fp,0(sp)
   188f4:	dec00204 	addi	sp,sp,8
   188f8:	f800283a 	ret

000188fc <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   188fc:	defff604 	addi	sp,sp,-40
   18900:	dfc00915 	stw	ra,36(sp)
   18904:	df000815 	stw	fp,32(sp)
   18908:	df000804 	addi	fp,sp,32
   1890c:	e13ffd15 	stw	r4,-12(fp)
   18910:	2805883a 	mov	r2,r5
   18914:	e1bfff15 	stw	r6,-4(fp)
   18918:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1891c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   18920:	e0bfff17 	ldw	r2,-4(fp)
   18924:	1000021e 	bne	r2,zero,18930 <OSMboxPendAbort+0x34>
        return (0);
   18928:	0005883a 	mov	r2,zero
   1892c:	00004906 	br	18a54 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18930:	e0bffd17 	ldw	r2,-12(fp)
   18934:	1000051e 	bne	r2,zero,1894c <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18938:	e0bfff17 	ldw	r2,-4(fp)
   1893c:	00c00104 	movi	r3,4
   18940:	10c00005 	stb	r3,0(r2)
        return (0);
   18944:	0005883a 	mov	r2,zero
   18948:	00004206 	br	18a54 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   1894c:	e0bffd17 	ldw	r2,-12(fp)
   18950:	10800003 	ldbu	r2,0(r2)
   18954:	10803fcc 	andi	r2,r2,255
   18958:	10800060 	cmpeqi	r2,r2,1
   1895c:	1000051e 	bne	r2,zero,18974 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   18960:	e0bfff17 	ldw	r2,-4(fp)
   18964:	00c00044 	movi	r3,1
   18968:	10c00005 	stb	r3,0(r2)
        return (0);
   1896c:	0005883a 	mov	r2,zero
   18970:	00003806 	br	18a54 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18974:	0005303a 	rdctl	r2,status
   18978:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1897c:	e0fffa17 	ldw	r3,-24(fp)
   18980:	00bfff84 	movi	r2,-2
   18984:	1884703a 	and	r2,r3,r2
   18988:	1001703a 	wrctl	status,r2
  
  return context;
   1898c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   18990:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
   18994:	e0bffd17 	ldw	r2,-12(fp)
   18998:	10800283 	ldbu	r2,10(r2)
   1899c:	10803fcc 	andi	r2,r2,255
   189a0:	10002526 	beq	r2,zero,18a38 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
   189a4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   189a8:	e0bffe03 	ldbu	r2,-8(fp)
   189ac:	10800060 	cmpeqi	r2,r2,1
   189b0:	10000e26 	beq	r2,zero,189ec <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   189b4:	00000806 	br	189d8 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   189b8:	e13ffd17 	ldw	r4,-12(fp)
   189bc:	000b883a 	mov	r5,zero
   189c0:	01800084 	movi	r6,2
   189c4:	01c00084 	movi	r7,2
   189c8:	00157c40 	call	157c4 <OS_EventTaskRdy>
                     nbr_tasks++;
   189cc:	e0bff803 	ldbu	r2,-32(fp)
   189d0:	10800044 	addi	r2,r2,1
   189d4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   189d8:	e0bffd17 	ldw	r2,-12(fp)
   189dc:	10800283 	ldbu	r2,10(r2)
   189e0:	10803fcc 	andi	r2,r2,255
   189e4:	103ff41e 	bne	r2,zero,189b8 <__alt_mem_Flash_flash_data+0xf40189b8>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   189e8:	00000906 	br	18a10 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   189ec:	e13ffd17 	ldw	r4,-12(fp)
   189f0:	000b883a 	mov	r5,zero
   189f4:	01800084 	movi	r6,2
   189f8:	01c00084 	movi	r7,2
   189fc:	00157c40 	call	157c4 <OS_EventTaskRdy>
                 nbr_tasks++;
   18a00:	e0bff803 	ldbu	r2,-32(fp)
   18a04:	10800044 	addi	r2,r2,1
   18a08:	e0bff805 	stb	r2,-32(fp)
                 break;
   18a0c:	0001883a 	nop
   18a10:	e0bff917 	ldw	r2,-28(fp)
   18a14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18a18:	e0bffb17 	ldw	r2,-20(fp)
   18a1c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   18a20:	00161dc0 	call	161dc <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   18a24:	e0bfff17 	ldw	r2,-4(fp)
   18a28:	00c00384 	movi	r3,14
   18a2c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   18a30:	e0bff803 	ldbu	r2,-32(fp)
   18a34:	00000706 	br	18a54 <OSMboxPendAbort+0x158>
   18a38:	e0bff917 	ldw	r2,-28(fp)
   18a3c:	e0bffc15 	stw	r2,-16(fp)
   18a40:	e0bffc17 	ldw	r2,-16(fp)
   18a44:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   18a48:	e0bfff17 	ldw	r2,-4(fp)
   18a4c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
   18a50:	0005883a 	mov	r2,zero
}
   18a54:	e037883a 	mov	sp,fp
   18a58:	dfc00117 	ldw	ra,4(sp)
   18a5c:	df000017 	ldw	fp,0(sp)
   18a60:	dec00204 	addi	sp,sp,8
   18a64:	f800283a 	ret

00018a68 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
   18a68:	defff704 	addi	sp,sp,-36
   18a6c:	dfc00815 	stw	ra,32(sp)
   18a70:	df000715 	stw	fp,28(sp)
   18a74:	df000704 	addi	fp,sp,28
   18a78:	e13ffe15 	stw	r4,-8(fp)
   18a7c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18a80:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18a84:	e0bffe17 	ldw	r2,-8(fp)
   18a88:	1000021e 	bne	r2,zero,18a94 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   18a8c:	00800104 	movi	r2,4
   18a90:	00003406 	br	18b64 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   18a94:	e0bfff17 	ldw	r2,-4(fp)
   18a98:	1000021e 	bne	r2,zero,18aa4 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
   18a9c:	008000c4 	movi	r2,3
   18aa0:	00003006 	br	18b64 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   18aa4:	e0bffe17 	ldw	r2,-8(fp)
   18aa8:	10800003 	ldbu	r2,0(r2)
   18aac:	10803fcc 	andi	r2,r2,255
   18ab0:	10800060 	cmpeqi	r2,r2,1
   18ab4:	1000021e 	bne	r2,zero,18ac0 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
   18ab8:	00800044 	movi	r2,1
   18abc:	00002906 	br	18b64 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18ac0:	0005303a 	rdctl	r2,status
   18ac4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18ac8:	e0fffa17 	ldw	r3,-24(fp)
   18acc:	00bfff84 	movi	r2,-2
   18ad0:	1884703a 	and	r2,r3,r2
   18ad4:	1001703a 	wrctl	status,r2
  
  return context;
   18ad8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   18adc:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   18ae0:	e0bffe17 	ldw	r2,-8(fp)
   18ae4:	10800283 	ldbu	r2,10(r2)
   18ae8:	10803fcc 	andi	r2,r2,255
   18aec:	10000c26 	beq	r2,zero,18b20 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   18af0:	e13ffe17 	ldw	r4,-8(fp)
   18af4:	e17fff17 	ldw	r5,-4(fp)
   18af8:	01800084 	movi	r6,2
   18afc:	000f883a 	mov	r7,zero
   18b00:	00157c40 	call	157c4 <OS_EventTaskRdy>
   18b04:	e0bff917 	ldw	r2,-28(fp)
   18b08:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18b0c:	e0bffb17 	ldw	r2,-20(fp)
   18b10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   18b14:	00161dc0 	call	161dc <OS_Sched>
        return (OS_ERR_NONE);
   18b18:	0005883a 	mov	r2,zero
   18b1c:	00001106 	br	18b64 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   18b20:	e0bffe17 	ldw	r2,-8(fp)
   18b24:	10800117 	ldw	r2,4(r2)
   18b28:	10000626 	beq	r2,zero,18b44 <OSMboxPost+0xdc>
   18b2c:	e0bff917 	ldw	r2,-28(fp)
   18b30:	e0bffc15 	stw	r2,-16(fp)
   18b34:	e0bffc17 	ldw	r2,-16(fp)
   18b38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   18b3c:	00800504 	movi	r2,20
   18b40:	00000806 	br	18b64 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   18b44:	e0bffe17 	ldw	r2,-8(fp)
   18b48:	e0ffff17 	ldw	r3,-4(fp)
   18b4c:	10c00115 	stw	r3,4(r2)
   18b50:	e0bff917 	ldw	r2,-28(fp)
   18b54:	e0bffd15 	stw	r2,-12(fp)
   18b58:	e0bffd17 	ldw	r2,-12(fp)
   18b5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18b60:	0005883a 	mov	r2,zero
}
   18b64:	e037883a 	mov	sp,fp
   18b68:	dfc00117 	ldw	ra,4(sp)
   18b6c:	df000017 	ldw	fp,0(sp)
   18b70:	dec00204 	addi	sp,sp,8
   18b74:	f800283a 	ret

00018b78 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   18b78:	defff604 	addi	sp,sp,-40
   18b7c:	dfc00915 	stw	ra,36(sp)
   18b80:	df000815 	stw	fp,32(sp)
   18b84:	df000804 	addi	fp,sp,32
   18b88:	e13ffd15 	stw	r4,-12(fp)
   18b8c:	e17ffe15 	stw	r5,-8(fp)
   18b90:	3005883a 	mov	r2,r6
   18b94:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18b98:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18b9c:	e0bffd17 	ldw	r2,-12(fp)
   18ba0:	1000021e 	bne	r2,zero,18bac <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   18ba4:	00800104 	movi	r2,4
   18ba8:	00004506 	br	18cc0 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   18bac:	e0bffe17 	ldw	r2,-8(fp)
   18bb0:	1000021e 	bne	r2,zero,18bbc <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
   18bb4:	008000c4 	movi	r2,3
   18bb8:	00004106 	br	18cc0 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   18bbc:	e0bffd17 	ldw	r2,-12(fp)
   18bc0:	10800003 	ldbu	r2,0(r2)
   18bc4:	10803fcc 	andi	r2,r2,255
   18bc8:	10800060 	cmpeqi	r2,r2,1
   18bcc:	1000021e 	bne	r2,zero,18bd8 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
   18bd0:	00800044 	movi	r2,1
   18bd4:	00003a06 	br	18cc0 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18bd8:	0005303a 	rdctl	r2,status
   18bdc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18be0:	e0fff917 	ldw	r3,-28(fp)
   18be4:	00bfff84 	movi	r2,-2
   18be8:	1884703a 	and	r2,r3,r2
   18bec:	1001703a 	wrctl	status,r2
  
  return context;
   18bf0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   18bf4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   18bf8:	e0bffd17 	ldw	r2,-12(fp)
   18bfc:	10800283 	ldbu	r2,10(r2)
   18c00:	10803fcc 	andi	r2,r2,255
   18c04:	10001d26 	beq	r2,zero,18c7c <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   18c08:	e0bfff03 	ldbu	r2,-4(fp)
   18c0c:	1080004c 	andi	r2,r2,1
   18c10:	10000b26 	beq	r2,zero,18c40 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   18c14:	00000506 	br	18c2c <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   18c18:	e13ffd17 	ldw	r4,-12(fp)
   18c1c:	e17ffe17 	ldw	r5,-8(fp)
   18c20:	01800084 	movi	r6,2
   18c24:	000f883a 	mov	r7,zero
   18c28:	00157c40 	call	157c4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   18c2c:	e0bffd17 	ldw	r2,-12(fp)
   18c30:	10800283 	ldbu	r2,10(r2)
   18c34:	10803fcc 	andi	r2,r2,255
   18c38:	103ff71e 	bne	r2,zero,18c18 <__alt_mem_Flash_flash_data+0xf4018c18>
   18c3c:	00000506 	br	18c54 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   18c40:	e13ffd17 	ldw	r4,-12(fp)
   18c44:	e17ffe17 	ldw	r5,-8(fp)
   18c48:	01800084 	movi	r6,2
   18c4c:	000f883a 	mov	r7,zero
   18c50:	00157c40 	call	157c4 <OS_EventTaskRdy>
   18c54:	e0bff817 	ldw	r2,-32(fp)
   18c58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18c5c:	e0bffa17 	ldw	r2,-24(fp)
   18c60:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   18c64:	e0bfff03 	ldbu	r2,-4(fp)
   18c68:	1080010c 	andi	r2,r2,4
   18c6c:	1000011e 	bne	r2,zero,18c74 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
   18c70:	00161dc0 	call	161dc <OS_Sched>
        }
        return (OS_ERR_NONE);
   18c74:	0005883a 	mov	r2,zero
   18c78:	00001106 	br	18cc0 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   18c7c:	e0bffd17 	ldw	r2,-12(fp)
   18c80:	10800117 	ldw	r2,4(r2)
   18c84:	10000626 	beq	r2,zero,18ca0 <OSMboxPostOpt+0x128>
   18c88:	e0bff817 	ldw	r2,-32(fp)
   18c8c:	e0bffb15 	stw	r2,-20(fp)
   18c90:	e0bffb17 	ldw	r2,-20(fp)
   18c94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   18c98:	00800504 	movi	r2,20
   18c9c:	00000806 	br	18cc0 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   18ca0:	e0bffd17 	ldw	r2,-12(fp)
   18ca4:	e0fffe17 	ldw	r3,-8(fp)
   18ca8:	10c00115 	stw	r3,4(r2)
   18cac:	e0bff817 	ldw	r2,-32(fp)
   18cb0:	e0bffc15 	stw	r2,-16(fp)
   18cb4:	e0bffc17 	ldw	r2,-16(fp)
   18cb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18cbc:	0005883a 	mov	r2,zero
}
   18cc0:	e037883a 	mov	sp,fp
   18cc4:	dfc00117 	ldw	ra,4(sp)
   18cc8:	df000017 	ldw	fp,0(sp)
   18ccc:	dec00204 	addi	sp,sp,8
   18cd0:	f800283a 	ret

00018cd4 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
   18cd4:	defff704 	addi	sp,sp,-36
   18cd8:	df000815 	stw	fp,32(sp)
   18cdc:	df000804 	addi	fp,sp,32
   18ce0:	e13ffe15 	stw	r4,-8(fp)
   18ce4:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18ce8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18cec:	e0bffe17 	ldw	r2,-8(fp)
   18cf0:	1000021e 	bne	r2,zero,18cfc <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   18cf4:	00800104 	movi	r2,4
   18cf8:	00003606 	br	18dd4 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
   18cfc:	e0bfff17 	ldw	r2,-4(fp)
   18d00:	1000021e 	bne	r2,zero,18d0c <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   18d04:	00800244 	movi	r2,9
   18d08:	00003206 	br	18dd4 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   18d0c:	e0bffe17 	ldw	r2,-8(fp)
   18d10:	10800003 	ldbu	r2,0(r2)
   18d14:	10803fcc 	andi	r2,r2,255
   18d18:	10800060 	cmpeqi	r2,r2,1
   18d1c:	1000021e 	bne	r2,zero,18d28 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   18d20:	00800044 	movi	r2,1
   18d24:	00002b06 	br	18dd4 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18d28:	0005303a 	rdctl	r2,status
   18d2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18d30:	e0fffc17 	ldw	r3,-16(fp)
   18d34:	00bfff84 	movi	r2,-2
   18d38:	1884703a 	and	r2,r3,r2
   18d3c:	1001703a 	wrctl	status,r2
  
  return context;
   18d40:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18d44:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
   18d48:	e0bffe17 	ldw	r2,-8(fp)
   18d4c:	10c00283 	ldbu	r3,10(r2)
   18d50:	e0bfff17 	ldw	r2,-4(fp)
   18d54:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
   18d58:	e0bffe17 	ldw	r2,-8(fp)
   18d5c:	108002c4 	addi	r2,r2,11
   18d60:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
   18d64:	e0bfff17 	ldw	r2,-4(fp)
   18d68:	10800104 	addi	r2,r2,4
   18d6c:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18d70:	e03ff805 	stb	zero,-32(fp)
   18d74:	00000b06 	br	18da4 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
   18d78:	e0bffa17 	ldw	r2,-24(fp)
   18d7c:	10c00044 	addi	r3,r2,1
   18d80:	e0fffa15 	stw	r3,-24(fp)
   18d84:	e0fff917 	ldw	r3,-28(fp)
   18d88:	19000044 	addi	r4,r3,1
   18d8c:	e13ff915 	stw	r4,-28(fp)
   18d90:	18c00003 	ldbu	r3,0(r3)
   18d94:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18d98:	e0bff803 	ldbu	r2,-32(fp)
   18d9c:	10800044 	addi	r2,r2,1
   18da0:	e0bff805 	stb	r2,-32(fp)
   18da4:	e0bff803 	ldbu	r2,-32(fp)
   18da8:	108000f0 	cmpltui	r2,r2,3
   18dac:	103ff21e 	bne	r2,zero,18d78 <__alt_mem_Flash_flash_data+0xf4018d78>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
   18db0:	e0bffe17 	ldw	r2,-8(fp)
   18db4:	10c00117 	ldw	r3,4(r2)
   18db8:	e0bfff17 	ldw	r2,-4(fp)
   18dbc:	10c00015 	stw	r3,0(r2)
   18dc0:	e0bffb17 	ldw	r2,-20(fp)
   18dc4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18dc8:	e0bffd17 	ldw	r2,-12(fp)
   18dcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18dd0:	0005883a 	mov	r2,zero
}
   18dd4:	e037883a 	mov	sp,fp
   18dd8:	df000017 	ldw	fp,0(sp)
   18ddc:	dec00104 	addi	sp,sp,4
   18de0:	f800283a 	ret

00018de4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   18de4:	defff404 	addi	sp,sp,-48
   18de8:	df000b15 	stw	fp,44(sp)
   18dec:	df000b04 	addi	fp,sp,44
   18df0:	e13ffc15 	stw	r4,-16(fp)
   18df4:	e17ffd15 	stw	r5,-12(fp)
   18df8:	e1bffe15 	stw	r6,-8(fp)
   18dfc:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18e00:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   18e04:	e0bfff17 	ldw	r2,-4(fp)
   18e08:	1000021e 	bne	r2,zero,18e14 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   18e0c:	0005883a 	mov	r2,zero
   18e10:	00006d06 	br	18fc8 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   18e14:	e0bffc17 	ldw	r2,-16(fp)
   18e18:	1000051e 	bne	r2,zero,18e30 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   18e1c:	e0bfff17 	ldw	r2,-4(fp)
   18e20:	00c01884 	movi	r3,98
   18e24:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   18e28:	0005883a 	mov	r2,zero
   18e2c:	00006606 	br	18fc8 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   18e30:	e0bffc17 	ldw	r2,-16(fp)
   18e34:	108000cc 	andi	r2,r2,3
   18e38:	10000526 	beq	r2,zero,18e50 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   18e3c:	e0bfff17 	ldw	r2,-4(fp)
   18e40:	00c01884 	movi	r3,98
   18e44:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   18e48:	0005883a 	mov	r2,zero
   18e4c:	00005e06 	br	18fc8 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   18e50:	e0bffd17 	ldw	r2,-12(fp)
   18e54:	108000a8 	cmpgeui	r2,r2,2
   18e58:	1000051e 	bne	r2,zero,18e70 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   18e5c:	e0bfff17 	ldw	r2,-4(fp)
   18e60:	00c016c4 	movi	r3,91
   18e64:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   18e68:	0005883a 	mov	r2,zero
   18e6c:	00005606 	br	18fc8 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   18e70:	e0bffe17 	ldw	r2,-8(fp)
   18e74:	10800128 	cmpgeui	r2,r2,4
   18e78:	1000051e 	bne	r2,zero,18e90 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   18e7c:	e0bfff17 	ldw	r2,-4(fp)
   18e80:	00c01704 	movi	r3,92
   18e84:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   18e88:	0005883a 	mov	r2,zero
   18e8c:	00004e06 	br	18fc8 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18e90:	0005303a 	rdctl	r2,status
   18e94:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18e98:	e0fffa17 	ldw	r3,-24(fp)
   18e9c:	00bfff84 	movi	r2,-2
   18ea0:	1884703a 	and	r2,r3,r2
   18ea4:	1001703a 	wrctl	status,r2
  
  return context;
   18ea8:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18eac:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   18eb0:	008000f4 	movhi	r2,3
   18eb4:	10a7e904 	addi	r2,r2,-24668
   18eb8:	10800017 	ldw	r2,0(r2)
   18ebc:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   18ec0:	008000f4 	movhi	r2,3
   18ec4:	10a7e904 	addi	r2,r2,-24668
   18ec8:	10800017 	ldw	r2,0(r2)
   18ecc:	10000726 	beq	r2,zero,18eec <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   18ed0:	008000f4 	movhi	r2,3
   18ed4:	10a7e904 	addi	r2,r2,-24668
   18ed8:	10800017 	ldw	r2,0(r2)
   18edc:	10c00117 	ldw	r3,4(r2)
   18ee0:	008000f4 	movhi	r2,3
   18ee4:	10a7e904 	addi	r2,r2,-24668
   18ee8:	10c00015 	stw	r3,0(r2)
   18eec:	e0bff817 	ldw	r2,-32(fp)
   18ef0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18ef4:	e0bffb17 	ldw	r2,-20(fp)
   18ef8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   18efc:	e0bff917 	ldw	r2,-28(fp)
   18f00:	1000051e 	bne	r2,zero,18f18 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   18f04:	e0bfff17 	ldw	r2,-4(fp)
   18f08:	00c01684 	movi	r3,90
   18f0c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   18f10:	0005883a 	mov	r2,zero
   18f14:	00002c06 	br	18fc8 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   18f18:	e0bffc17 	ldw	r2,-16(fp)
   18f1c:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   18f20:	e0fffc17 	ldw	r3,-16(fp)
   18f24:	e0bffe17 	ldw	r2,-8(fp)
   18f28:	1885883a 	add	r2,r3,r2
   18f2c:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   18f30:	e03ff715 	stw	zero,-36(fp)
   18f34:	00000c06 	br	18f68 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   18f38:	e0bff617 	ldw	r2,-40(fp)
   18f3c:	e0fff517 	ldw	r3,-44(fp)
   18f40:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   18f44:	e0bff517 	ldw	r2,-44(fp)
   18f48:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   18f4c:	e0fff517 	ldw	r3,-44(fp)
   18f50:	e0bffe17 	ldw	r2,-8(fp)
   18f54:	1885883a 	add	r2,r3,r2
   18f58:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   18f5c:	e0bff717 	ldw	r2,-36(fp)
   18f60:	10800044 	addi	r2,r2,1
   18f64:	e0bff715 	stw	r2,-36(fp)
   18f68:	e0bffd17 	ldw	r2,-12(fp)
   18f6c:	10bfffc4 	addi	r2,r2,-1
   18f70:	e0fff717 	ldw	r3,-36(fp)
   18f74:	18bff036 	bltu	r3,r2,18f38 <__alt_mem_Flash_flash_data+0xf4018f38>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   18f78:	e0bff617 	ldw	r2,-40(fp)
   18f7c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   18f80:	e0bff917 	ldw	r2,-28(fp)
   18f84:	e0fffc17 	ldw	r3,-16(fp)
   18f88:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   18f8c:	e0bff917 	ldw	r2,-28(fp)
   18f90:	e0fffc17 	ldw	r3,-16(fp)
   18f94:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   18f98:	e0bff917 	ldw	r2,-28(fp)
   18f9c:	e0fffd17 	ldw	r3,-12(fp)
   18fa0:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   18fa4:	e0bff917 	ldw	r2,-28(fp)
   18fa8:	e0fffd17 	ldw	r3,-12(fp)
   18fac:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   18fb0:	e0bff917 	ldw	r2,-28(fp)
   18fb4:	e0fffe17 	ldw	r3,-8(fp)
   18fb8:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   18fbc:	e0bfff17 	ldw	r2,-4(fp)
   18fc0:	10000005 	stb	zero,0(r2)
    return (pmem);
   18fc4:	e0bff917 	ldw	r2,-28(fp)
}
   18fc8:	e037883a 	mov	sp,fp
   18fcc:	df000017 	ldw	fp,0(sp)
   18fd0:	dec00104 	addi	sp,sp,4
   18fd4:	f800283a 	ret

00018fd8 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   18fd8:	defff804 	addi	sp,sp,-32
   18fdc:	df000715 	stw	fp,28(sp)
   18fe0:	df000704 	addi	fp,sp,28
   18fe4:	e13ffe15 	stw	r4,-8(fp)
   18fe8:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18fec:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   18ff0:	e0bfff17 	ldw	r2,-4(fp)
   18ff4:	1000021e 	bne	r2,zero,19000 <OSMemGet+0x28>
        return ((void *)0);
   18ff8:	0005883a 	mov	r2,zero
   18ffc:	00002e06 	br	190b8 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   19000:	e0bffe17 	ldw	r2,-8(fp)
   19004:	1000051e 	bne	r2,zero,1901c <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   19008:	e0bfff17 	ldw	r2,-4(fp)
   1900c:	00c01804 	movi	r3,96
   19010:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   19014:	0005883a 	mov	r2,zero
   19018:	00002706 	br	190b8 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1901c:	0005303a 	rdctl	r2,status
   19020:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19024:	e0fffb17 	ldw	r3,-20(fp)
   19028:	00bfff84 	movi	r2,-2
   1902c:	1884703a 	and	r2,r3,r2
   19030:	1001703a 	wrctl	status,r2
  
  return context;
   19034:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19038:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   1903c:	e0bffe17 	ldw	r2,-8(fp)
   19040:	10800417 	ldw	r2,16(r2)
   19044:	10001426 	beq	r2,zero,19098 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   19048:	e0bffe17 	ldw	r2,-8(fp)
   1904c:	10800117 	ldw	r2,4(r2)
   19050:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   19054:	e0bffa17 	ldw	r2,-24(fp)
   19058:	10c00017 	ldw	r3,0(r2)
   1905c:	e0bffe17 	ldw	r2,-8(fp)
   19060:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   19064:	e0bffe17 	ldw	r2,-8(fp)
   19068:	10800417 	ldw	r2,16(r2)
   1906c:	10ffffc4 	addi	r3,r2,-1
   19070:	e0bffe17 	ldw	r2,-8(fp)
   19074:	10c00415 	stw	r3,16(r2)
   19078:	e0bff917 	ldw	r2,-28(fp)
   1907c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19080:	e0bffc17 	ldw	r2,-16(fp)
   19084:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   19088:	e0bfff17 	ldw	r2,-4(fp)
   1908c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   19090:	e0bffa17 	ldw	r2,-24(fp)
   19094:	00000806 	br	190b8 <OSMemGet+0xe0>
   19098:	e0bff917 	ldw	r2,-28(fp)
   1909c:	e0bffd15 	stw	r2,-12(fp)
   190a0:	e0bffd17 	ldw	r2,-12(fp)
   190a4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   190a8:	e0bfff17 	ldw	r2,-4(fp)
   190ac:	00c01744 	movi	r3,93
   190b0:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   190b4:	0005883a 	mov	r2,zero
}
   190b8:	e037883a 	mov	sp,fp
   190bc:	df000017 	ldw	fp,0(sp)
   190c0:	dec00104 	addi	sp,sp,4
   190c4:	f800283a 	ret

000190c8 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   190c8:	defff704 	addi	sp,sp,-36
   190cc:	dfc00815 	stw	ra,32(sp)
   190d0:	df000715 	stw	fp,28(sp)
   190d4:	df000704 	addi	fp,sp,28
   190d8:	e13ffd15 	stw	r4,-12(fp)
   190dc:	e17ffe15 	stw	r5,-8(fp)
   190e0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   190e4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   190e8:	e0bfff17 	ldw	r2,-4(fp)
   190ec:	1000021e 	bne	r2,zero,190f8 <OSMemNameGet+0x30>
        return (0);
   190f0:	0005883a 	mov	r2,zero
   190f4:	00002d06 	br	191ac <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   190f8:	e0bffd17 	ldw	r2,-12(fp)
   190fc:	1000051e 	bne	r2,zero,19114 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   19100:	e0bfff17 	ldw	r2,-4(fp)
   19104:	00c01804 	movi	r3,96
   19108:	10c00005 	stb	r3,0(r2)
        return (0);
   1910c:	0005883a 	mov	r2,zero
   19110:	00002606 	br	191ac <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   19114:	e0bffe17 	ldw	r2,-8(fp)
   19118:	1000051e 	bne	r2,zero,19130 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1911c:	e0bfff17 	ldw	r2,-4(fp)
   19120:	00c00304 	movi	r3,12
   19124:	10c00005 	stb	r3,0(r2)
        return (0);
   19128:	0005883a 	mov	r2,zero
   1912c:	00001f06 	br	191ac <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   19130:	008000f4 	movhi	r2,3
   19134:	10a7ee04 	addi	r2,r2,-24648
   19138:	10800003 	ldbu	r2,0(r2)
   1913c:	10803fcc 	andi	r2,r2,255
   19140:	10000526 	beq	r2,zero,19158 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   19144:	e0bfff17 	ldw	r2,-4(fp)
   19148:	00c00444 	movi	r3,17
   1914c:	10c00005 	stb	r3,0(r2)
        return (0);
   19150:	0005883a 	mov	r2,zero
   19154:	00001506 	br	191ac <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19158:	0005303a 	rdctl	r2,status
   1915c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19160:	e0fffb17 	ldw	r3,-20(fp)
   19164:	00bfff84 	movi	r2,-2
   19168:	1884703a 	and	r2,r3,r2
   1916c:	1001703a 	wrctl	status,r2
  
  return context;
   19170:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   19174:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   19178:	e0bffd17 	ldw	r2,-12(fp)
   1917c:	10800504 	addi	r2,r2,20
   19180:	e13ffe17 	ldw	r4,-8(fp)
   19184:	100b883a 	mov	r5,r2
   19188:	00163180 	call	16318 <OS_StrCopy>
   1918c:	e0bffa05 	stb	r2,-24(fp)
   19190:	e0bff917 	ldw	r2,-28(fp)
   19194:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19198:	e0bffc17 	ldw	r2,-16(fp)
   1919c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   191a0:	e0bfff17 	ldw	r2,-4(fp)
   191a4:	10000005 	stb	zero,0(r2)
    return (len);
   191a8:	e0bffa03 	ldbu	r2,-24(fp)
}
   191ac:	e037883a 	mov	sp,fp
   191b0:	dfc00117 	ldw	ra,4(sp)
   191b4:	df000017 	ldw	fp,0(sp)
   191b8:	dec00204 	addi	sp,sp,8
   191bc:	f800283a 	ret

000191c0 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   191c0:	defff604 	addi	sp,sp,-40
   191c4:	dfc00915 	stw	ra,36(sp)
   191c8:	df000815 	stw	fp,32(sp)
   191cc:	df000804 	addi	fp,sp,32
   191d0:	e13ffd15 	stw	r4,-12(fp)
   191d4:	e17ffe15 	stw	r5,-8(fp)
   191d8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   191dc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   191e0:	e0bfff17 	ldw	r2,-4(fp)
   191e4:	1000011e 	bne	r2,zero,191ec <OSMemNameSet+0x2c>
        return;
   191e8:	00003606 	br	192c4 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   191ec:	e0bffd17 	ldw	r2,-12(fp)
   191f0:	1000041e 	bne	r2,zero,19204 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   191f4:	e0bfff17 	ldw	r2,-4(fp)
   191f8:	00c01804 	movi	r3,96
   191fc:	10c00005 	stb	r3,0(r2)
        return;
   19200:	00003006 	br	192c4 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   19204:	e0bffe17 	ldw	r2,-8(fp)
   19208:	1000041e 	bne	r2,zero,1921c <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   1920c:	e0bfff17 	ldw	r2,-4(fp)
   19210:	00c00304 	movi	r3,12
   19214:	10c00005 	stb	r3,0(r2)
        return;
   19218:	00002a06 	br	192c4 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1921c:	008000f4 	movhi	r2,3
   19220:	10a7ee04 	addi	r2,r2,-24648
   19224:	10800003 	ldbu	r2,0(r2)
   19228:	10803fcc 	andi	r2,r2,255
   1922c:	10000426 	beq	r2,zero,19240 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   19230:	e0bfff17 	ldw	r2,-4(fp)
   19234:	00c00484 	movi	r3,18
   19238:	10c00005 	stb	r3,0(r2)
        return;
   1923c:	00002106 	br	192c4 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19240:	0005303a 	rdctl	r2,status
   19244:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19248:	e0fffa17 	ldw	r3,-24(fp)
   1924c:	00bfff84 	movi	r2,-2
   19250:	1884703a 	and	r2,r3,r2
   19254:	1001703a 	wrctl	status,r2
  
  return context;
   19258:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1925c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   19260:	e13ffe17 	ldw	r4,-8(fp)
   19264:	001638c0 	call	1638c <OS_StrLen>
   19268:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   1926c:	e0bff903 	ldbu	r2,-28(fp)
   19270:	10800830 	cmpltui	r2,r2,32
   19274:	1000081e 	bne	r2,zero,19298 <OSMemNameSet+0xd8>
   19278:	e0bff817 	ldw	r2,-32(fp)
   1927c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19280:	e0bffb17 	ldw	r2,-20(fp)
   19284:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   19288:	e0bfff17 	ldw	r2,-4(fp)
   1928c:	00c018c4 	movi	r3,99
   19290:	10c00005 	stb	r3,0(r2)
        return;
   19294:	00000b06 	br	192c4 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   19298:	e0bffd17 	ldw	r2,-12(fp)
   1929c:	10800504 	addi	r2,r2,20
   192a0:	1009883a 	mov	r4,r2
   192a4:	e17ffe17 	ldw	r5,-8(fp)
   192a8:	00163180 	call	16318 <OS_StrCopy>
   192ac:	e0bff817 	ldw	r2,-32(fp)
   192b0:	e0bffc15 	stw	r2,-16(fp)
   192b4:	e0bffc17 	ldw	r2,-16(fp)
   192b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   192bc:	e0bfff17 	ldw	r2,-4(fp)
   192c0:	10000005 	stb	zero,0(r2)
}
   192c4:	e037883a 	mov	sp,fp
   192c8:	dfc00117 	ldw	ra,4(sp)
   192cc:	df000017 	ldw	fp,0(sp)
   192d0:	dec00204 	addi	sp,sp,8
   192d4:	f800283a 	ret

000192d8 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   192d8:	defff904 	addi	sp,sp,-28
   192dc:	df000615 	stw	fp,24(sp)
   192e0:	df000604 	addi	fp,sp,24
   192e4:	e13ffe15 	stw	r4,-8(fp)
   192e8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   192ec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   192f0:	e0bffe17 	ldw	r2,-8(fp)
   192f4:	1000021e 	bne	r2,zero,19300 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   192f8:	00801804 	movi	r2,96
   192fc:	00002806 	br	193a0 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   19300:	e0bfff17 	ldw	r2,-4(fp)
   19304:	1000021e 	bne	r2,zero,19310 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   19308:	008017c4 	movi	r2,95
   1930c:	00002406 	br	193a0 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19310:	0005303a 	rdctl	r2,status
   19314:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19318:	e0fffb17 	ldw	r3,-20(fp)
   1931c:	00bfff84 	movi	r2,-2
   19320:	1884703a 	and	r2,r3,r2
   19324:	1001703a 	wrctl	status,r2
  
  return context;
   19328:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1932c:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   19330:	e0bffe17 	ldw	r2,-8(fp)
   19334:	10c00417 	ldw	r3,16(r2)
   19338:	e0bffe17 	ldw	r2,-8(fp)
   1933c:	10800317 	ldw	r2,12(r2)
   19340:	18800636 	bltu	r3,r2,1935c <OSMemPut+0x84>
   19344:	e0bffa17 	ldw	r2,-24(fp)
   19348:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1934c:	e0bffc17 	ldw	r2,-16(fp)
   19350:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   19354:	00801784 	movi	r2,94
   19358:	00001106 	br	193a0 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   1935c:	e0bffe17 	ldw	r2,-8(fp)
   19360:	10c00117 	ldw	r3,4(r2)
   19364:	e0bfff17 	ldw	r2,-4(fp)
   19368:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   1936c:	e0bffe17 	ldw	r2,-8(fp)
   19370:	e0ffff17 	ldw	r3,-4(fp)
   19374:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   19378:	e0bffe17 	ldw	r2,-8(fp)
   1937c:	10800417 	ldw	r2,16(r2)
   19380:	10c00044 	addi	r3,r2,1
   19384:	e0bffe17 	ldw	r2,-8(fp)
   19388:	10c00415 	stw	r3,16(r2)
   1938c:	e0bffa17 	ldw	r2,-24(fp)
   19390:	e0bffd15 	stw	r2,-12(fp)
   19394:	e0bffd17 	ldw	r2,-12(fp)
   19398:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   1939c:	0005883a 	mov	r2,zero
}
   193a0:	e037883a 	mov	sp,fp
   193a4:	df000017 	ldw	fp,0(sp)
   193a8:	dec00104 	addi	sp,sp,4
   193ac:	f800283a 	ret

000193b0 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   193b0:	defffa04 	addi	sp,sp,-24
   193b4:	df000515 	stw	fp,20(sp)
   193b8:	df000504 	addi	fp,sp,20
   193bc:	e13ffe15 	stw	r4,-8(fp)
   193c0:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   193c4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   193c8:	e0bffe17 	ldw	r2,-8(fp)
   193cc:	1000021e 	bne	r2,zero,193d8 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   193d0:	00801804 	movi	r2,96
   193d4:	00002c06 	br	19488 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   193d8:	e0bfff17 	ldw	r2,-4(fp)
   193dc:	1000021e 	bne	r2,zero,193e8 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   193e0:	00801844 	movi	r2,97
   193e4:	00002806 	br	19488 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   193e8:	0005303a 	rdctl	r2,status
   193ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   193f0:	e0fffc17 	ldw	r3,-16(fp)
   193f4:	00bfff84 	movi	r2,-2
   193f8:	1884703a 	and	r2,r3,r2
   193fc:	1001703a 	wrctl	status,r2
  
  return context;
   19400:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19404:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   19408:	e0bffe17 	ldw	r2,-8(fp)
   1940c:	10c00017 	ldw	r3,0(r2)
   19410:	e0bfff17 	ldw	r2,-4(fp)
   19414:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   19418:	e0bffe17 	ldw	r2,-8(fp)
   1941c:	10c00117 	ldw	r3,4(r2)
   19420:	e0bfff17 	ldw	r2,-4(fp)
   19424:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   19428:	e0bffe17 	ldw	r2,-8(fp)
   1942c:	10c00217 	ldw	r3,8(r2)
   19430:	e0bfff17 	ldw	r2,-4(fp)
   19434:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   19438:	e0bffe17 	ldw	r2,-8(fp)
   1943c:	10c00317 	ldw	r3,12(r2)
   19440:	e0bfff17 	ldw	r2,-4(fp)
   19444:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   19448:	e0bffe17 	ldw	r2,-8(fp)
   1944c:	10c00417 	ldw	r3,16(r2)
   19450:	e0bfff17 	ldw	r2,-4(fp)
   19454:	10c00415 	stw	r3,16(r2)
   19458:	e0bffb17 	ldw	r2,-20(fp)
   1945c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19460:	e0bffd17 	ldw	r2,-12(fp)
   19464:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   19468:	e0bfff17 	ldw	r2,-4(fp)
   1946c:	10c00317 	ldw	r3,12(r2)
   19470:	e0bfff17 	ldw	r2,-4(fp)
   19474:	10800417 	ldw	r2,16(r2)
   19478:	1887c83a 	sub	r3,r3,r2
   1947c:	e0bfff17 	ldw	r2,-4(fp)
   19480:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   19484:	0005883a 	mov	r2,zero
}
   19488:	e037883a 	mov	sp,fp
   1948c:	df000017 	ldw	fp,0(sp)
   19490:	dec00104 	addi	sp,sp,4
   19494:	f800283a 	ret

00019498 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   19498:	defffc04 	addi	sp,sp,-16
   1949c:	dfc00315 	stw	ra,12(sp)
   194a0:	df000215 	stw	fp,8(sp)
   194a4:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   194a8:	01000174 	movhi	r4,5
   194ac:	21311f04 	addi	r4,r4,-15236
   194b0:	01430c04 	movi	r5,3120
   194b4:	00161280 	call	16128 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   194b8:	00800174 	movhi	r2,5
   194bc:	10b11f04 	addi	r2,r2,-15236
   194c0:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   194c4:	e03fff0d 	sth	zero,-4(fp)
   194c8:	00001306 	br	19518 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   194cc:	e0bfff0b 	ldhu	r2,-4(fp)
   194d0:	10800044 	addi	r2,r2,1
   194d4:	10c00d24 	muli	r3,r2,52
   194d8:	00800174 	movhi	r2,5
   194dc:	10b11f04 	addi	r2,r2,-15236
   194e0:	1887883a 	add	r3,r3,r2
   194e4:	e0bffe17 	ldw	r2,-8(fp)
   194e8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   194ec:	e0bffe17 	ldw	r2,-8(fp)
   194f0:	00c00fc4 	movi	r3,63
   194f4:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   194f8:	e0bffe17 	ldw	r2,-8(fp)
   194fc:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   19500:	e0bffe17 	ldw	r2,-8(fp)
   19504:	10800d04 	addi	r2,r2,52
   19508:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   1950c:	e0bfff0b 	ldhu	r2,-4(fp)
   19510:	10800044 	addi	r2,r2,1
   19514:	e0bfff0d 	sth	r2,-4(fp)
   19518:	e0bfff0b 	ldhu	r2,-4(fp)
   1951c:	10800ef0 	cmpltui	r2,r2,59
   19520:	103fea1e 	bne	r2,zero,194cc <__alt_mem_Flash_flash_data+0xf40194cc>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   19524:	e0bffe17 	ldw	r2,-8(fp)
   19528:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   1952c:	e0bffe17 	ldw	r2,-8(fp)
   19530:	00c00fc4 	movi	r3,63
   19534:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   19538:	e0bffe17 	ldw	r2,-8(fp)
   1953c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   19540:	008000f4 	movhi	r2,3
   19544:	10a7e904 	addi	r2,r2,-24668
   19548:	00c00174 	movhi	r3,5
   1954c:	18f11f04 	addi	r3,r3,-15236
   19550:	10c00015 	stw	r3,0(r2)
#endif
}
   19554:	e037883a 	mov	sp,fp
   19558:	dfc00117 	ldw	ra,4(sp)
   1955c:	df000017 	ldw	fp,0(sp)
   19560:	dec00204 	addi	sp,sp,8
   19564:	f800283a 	ret

00019568 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   19568:	defff804 	addi	sp,sp,-32
   1956c:	df000715 	stw	fp,28(sp)
   19570:	df000704 	addi	fp,sp,28
   19574:	e13ffe15 	stw	r4,-8(fp)
   19578:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1957c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   19580:	e0bfff17 	ldw	r2,-4(fp)
   19584:	1000021e 	bne	r2,zero,19590 <OSQAccept+0x28>
        return ((void *)0);
   19588:	0005883a 	mov	r2,zero
   1958c:	00004206 	br	19698 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   19590:	e0bffe17 	ldw	r2,-8(fp)
   19594:	1000051e 	bne	r2,zero,195ac <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   19598:	e0bfff17 	ldw	r2,-4(fp)
   1959c:	00c00104 	movi	r3,4
   195a0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   195a4:	0005883a 	mov	r2,zero
   195a8:	00003b06 	br	19698 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   195ac:	e0bffe17 	ldw	r2,-8(fp)
   195b0:	10800003 	ldbu	r2,0(r2)
   195b4:	10803fcc 	andi	r2,r2,255
   195b8:	108000a0 	cmpeqi	r2,r2,2
   195bc:	1000051e 	bne	r2,zero,195d4 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   195c0:	e0bfff17 	ldw	r2,-4(fp)
   195c4:	00c00044 	movi	r3,1
   195c8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   195cc:	0005883a 	mov	r2,zero
   195d0:	00003106 	br	19698 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   195d4:	0005303a 	rdctl	r2,status
   195d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   195dc:	e0fffc17 	ldw	r3,-16(fp)
   195e0:	00bfff84 	movi	r2,-2
   195e4:	1884703a 	and	r2,r3,r2
   195e8:	1001703a 	wrctl	status,r2
  
  return context;
   195ec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   195f0:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   195f4:	e0bffe17 	ldw	r2,-8(fp)
   195f8:	10800117 	ldw	r2,4(r2)
   195fc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   19600:	e0bffb17 	ldw	r2,-20(fp)
   19604:	1080058b 	ldhu	r2,22(r2)
   19608:	10bfffcc 	andi	r2,r2,65535
   1960c:	10001926 	beq	r2,zero,19674 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   19610:	e0bffb17 	ldw	r2,-20(fp)
   19614:	10800417 	ldw	r2,16(r2)
   19618:	11000104 	addi	r4,r2,4
   1961c:	e0fffb17 	ldw	r3,-20(fp)
   19620:	19000415 	stw	r4,16(r3)
   19624:	10800017 	ldw	r2,0(r2)
   19628:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1962c:	e0bffb17 	ldw	r2,-20(fp)
   19630:	1080058b 	ldhu	r2,22(r2)
   19634:	10bfffc4 	addi	r2,r2,-1
   19638:	1007883a 	mov	r3,r2
   1963c:	e0bffb17 	ldw	r2,-20(fp)
   19640:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   19644:	e0bffb17 	ldw	r2,-20(fp)
   19648:	10c00417 	ldw	r3,16(r2)
   1964c:	e0bffb17 	ldw	r2,-20(fp)
   19650:	10800217 	ldw	r2,8(r2)
   19654:	1880041e 	bne	r3,r2,19668 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   19658:	e0bffb17 	ldw	r2,-20(fp)
   1965c:	10c00117 	ldw	r3,4(r2)
   19660:	e0bffb17 	ldw	r2,-20(fp)
   19664:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   19668:	e0bfff17 	ldw	r2,-4(fp)
   1966c:	10000005 	stb	zero,0(r2)
   19670:	00000406 	br	19684 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   19674:	e0bfff17 	ldw	r2,-4(fp)
   19678:	00c007c4 	movi	r3,31
   1967c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   19680:	e03ff915 	stw	zero,-28(fp)
   19684:	e0bffa17 	ldw	r2,-24(fp)
   19688:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1968c:	e0bffd17 	ldw	r2,-12(fp)
   19690:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   19694:	e0bff917 	ldw	r2,-28(fp)
}
   19698:	e037883a 	mov	sp,fp
   1969c:	df000017 	ldw	fp,0(sp)
   196a0:	dec00104 	addi	sp,sp,4
   196a4:	f800283a 	ret

000196a8 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   196a8:	defff404 	addi	sp,sp,-48
   196ac:	dfc00b15 	stw	ra,44(sp)
   196b0:	df000a15 	stw	fp,40(sp)
   196b4:	df000a04 	addi	fp,sp,40
   196b8:	e13ffe15 	stw	r4,-8(fp)
   196bc:	2805883a 	mov	r2,r5
   196c0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   196c4:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   196c8:	008000f4 	movhi	r2,3
   196cc:	10a7ee04 	addi	r2,r2,-24648
   196d0:	10800003 	ldbu	r2,0(r2)
   196d4:	10803fcc 	andi	r2,r2,255
   196d8:	10000226 	beq	r2,zero,196e4 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   196dc:	0005883a 	mov	r2,zero
   196e0:	00006b06 	br	19890 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   196e4:	0005303a 	rdctl	r2,status
   196e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   196ec:	e0fff917 	ldw	r3,-28(fp)
   196f0:	00bfff84 	movi	r2,-2
   196f4:	1884703a 	and	r2,r3,r2
   196f8:	1001703a 	wrctl	status,r2
  
  return context;
   196fc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   19700:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   19704:	008000f4 	movhi	r2,3
   19708:	10a7ed04 	addi	r2,r2,-24652
   1970c:	10800017 	ldw	r2,0(r2)
   19710:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   19714:	008000f4 	movhi	r2,3
   19718:	10a7ed04 	addi	r2,r2,-24652
   1971c:	10800017 	ldw	r2,0(r2)
   19720:	10000726 	beq	r2,zero,19740 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   19724:	008000f4 	movhi	r2,3
   19728:	10a7ed04 	addi	r2,r2,-24652
   1972c:	10800017 	ldw	r2,0(r2)
   19730:	10c00117 	ldw	r3,4(r2)
   19734:	008000f4 	movhi	r2,3
   19738:	10a7ed04 	addi	r2,r2,-24652
   1973c:	10c00015 	stw	r3,0(r2)
   19740:	e0bff717 	ldw	r2,-36(fp)
   19744:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19748:	e0bffa17 	ldw	r2,-24(fp)
   1974c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   19750:	e0bff617 	ldw	r2,-40(fp)
   19754:	10004d26 	beq	r2,zero,1988c <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19758:	0005303a 	rdctl	r2,status
   1975c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19760:	e0fffb17 	ldw	r3,-20(fp)
   19764:	00bfff84 	movi	r2,-2
   19768:	1884703a 	and	r2,r3,r2
   1976c:	1001703a 	wrctl	status,r2
  
  return context;
   19770:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   19774:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   19778:	008000f4 	movhi	r2,3
   1977c:	10a7eb04 	addi	r2,r2,-24660
   19780:	10800017 	ldw	r2,0(r2)
   19784:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   19788:	e0bff817 	ldw	r2,-32(fp)
   1978c:	10003126 	beq	r2,zero,19854 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   19790:	008000f4 	movhi	r2,3
   19794:	10a7eb04 	addi	r2,r2,-24660
   19798:	10800017 	ldw	r2,0(r2)
   1979c:	10c00017 	ldw	r3,0(r2)
   197a0:	008000f4 	movhi	r2,3
   197a4:	10a7eb04 	addi	r2,r2,-24660
   197a8:	10c00015 	stw	r3,0(r2)
   197ac:	e0bff717 	ldw	r2,-36(fp)
   197b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   197b4:	e0bffc17 	ldw	r2,-16(fp)
   197b8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   197bc:	e0bff817 	ldw	r2,-32(fp)
   197c0:	e0fffe17 	ldw	r3,-8(fp)
   197c4:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   197c8:	e0bfff0b 	ldhu	r2,-4(fp)
   197cc:	1085883a 	add	r2,r2,r2
   197d0:	1085883a 	add	r2,r2,r2
   197d4:	1007883a 	mov	r3,r2
   197d8:	e0bffe17 	ldw	r2,-8(fp)
   197dc:	10c7883a 	add	r3,r2,r3
   197e0:	e0bff817 	ldw	r2,-32(fp)
   197e4:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   197e8:	e0bff817 	ldw	r2,-32(fp)
   197ec:	e0fffe17 	ldw	r3,-8(fp)
   197f0:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   197f4:	e0bff817 	ldw	r2,-32(fp)
   197f8:	e0fffe17 	ldw	r3,-8(fp)
   197fc:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   19800:	e0bff817 	ldw	r2,-32(fp)
   19804:	e0ffff0b 	ldhu	r3,-4(fp)
   19808:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   1980c:	e0bff817 	ldw	r2,-32(fp)
   19810:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   19814:	e0bff617 	ldw	r2,-40(fp)
   19818:	00c00084 	movi	r3,2
   1981c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   19820:	e0bff617 	ldw	r2,-40(fp)
   19824:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   19828:	e0bff617 	ldw	r2,-40(fp)
   1982c:	e0fff817 	ldw	r3,-32(fp)
   19830:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   19834:	e0bff617 	ldw	r2,-40(fp)
   19838:	00c00fc4 	movi	r3,63
   1983c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   19840:	e0bff617 	ldw	r2,-40(fp)
   19844:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   19848:	e13ff617 	ldw	r4,-40(fp)
   1984c:	0015d640 	call	15d64 <OS_EventWaitListInit>
   19850:	00000e06 	br	1988c <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   19854:	008000f4 	movhi	r2,3
   19858:	10a7ed04 	addi	r2,r2,-24652
   1985c:	10c00017 	ldw	r3,0(r2)
   19860:	e0bff617 	ldw	r2,-40(fp)
   19864:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   19868:	008000f4 	movhi	r2,3
   1986c:	10a7ed04 	addi	r2,r2,-24652
   19870:	e0fff617 	ldw	r3,-40(fp)
   19874:	10c00015 	stw	r3,0(r2)
   19878:	e0bff717 	ldw	r2,-36(fp)
   1987c:	e0bffd15 	stw	r2,-12(fp)
   19880:	e0bffd17 	ldw	r2,-12(fp)
   19884:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   19888:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   1988c:	e0bff617 	ldw	r2,-40(fp)
}
   19890:	e037883a 	mov	sp,fp
   19894:	dfc00117 	ldw	ra,4(sp)
   19898:	df000017 	ldw	fp,0(sp)
   1989c:	dec00204 	addi	sp,sp,8
   198a0:	f800283a 	ret

000198a4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   198a4:	defff204 	addi	sp,sp,-56
   198a8:	dfc00d15 	stw	ra,52(sp)
   198ac:	df000c15 	stw	fp,48(sp)
   198b0:	df000c04 	addi	fp,sp,48
   198b4:	e13ffd15 	stw	r4,-12(fp)
   198b8:	2805883a 	mov	r2,r5
   198bc:	e1bfff15 	stw	r6,-4(fp)
   198c0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   198c4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   198c8:	e0bfff17 	ldw	r2,-4(fp)
   198cc:	1000021e 	bne	r2,zero,198d8 <OSQDel+0x34>
        return (pevent);
   198d0:	e0bffd17 	ldw	r2,-12(fp)
   198d4:	0000a006 	br	19b58 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   198d8:	e0bffd17 	ldw	r2,-12(fp)
   198dc:	1000051e 	bne	r2,zero,198f4 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   198e0:	e0bfff17 	ldw	r2,-4(fp)
   198e4:	00c00104 	movi	r3,4
   198e8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   198ec:	e0bffd17 	ldw	r2,-12(fp)
   198f0:	00009906 	br	19b58 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   198f4:	e0bffd17 	ldw	r2,-12(fp)
   198f8:	10800003 	ldbu	r2,0(r2)
   198fc:	10803fcc 	andi	r2,r2,255
   19900:	108000a0 	cmpeqi	r2,r2,2
   19904:	1000051e 	bne	r2,zero,1991c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   19908:	e0bfff17 	ldw	r2,-4(fp)
   1990c:	00c00044 	movi	r3,1
   19910:	10c00005 	stb	r3,0(r2)
        return (pevent);
   19914:	e0bffd17 	ldw	r2,-12(fp)
   19918:	00008f06 	br	19b58 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1991c:	008000f4 	movhi	r2,3
   19920:	10a7ee04 	addi	r2,r2,-24648
   19924:	10800003 	ldbu	r2,0(r2)
   19928:	10803fcc 	andi	r2,r2,255
   1992c:	10000526 	beq	r2,zero,19944 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   19930:	e0bfff17 	ldw	r2,-4(fp)
   19934:	00c003c4 	movi	r3,15
   19938:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1993c:	e0bffd17 	ldw	r2,-12(fp)
   19940:	00008506 	br	19b58 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19944:	0005303a 	rdctl	r2,status
   19948:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1994c:	e0fff817 	ldw	r3,-32(fp)
   19950:	00bfff84 	movi	r2,-2
   19954:	1884703a 	and	r2,r3,r2
   19958:	1001703a 	wrctl	status,r2
  
  return context;
   1995c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   19960:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   19964:	e0bffd17 	ldw	r2,-12(fp)
   19968:	10800283 	ldbu	r2,10(r2)
   1996c:	10803fcc 	andi	r2,r2,255
   19970:	10000326 	beq	r2,zero,19980 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   19974:	00800044 	movi	r2,1
   19978:	e0bff405 	stb	r2,-48(fp)
   1997c:	00000106 	br	19984 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   19980:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   19984:	e0bffe03 	ldbu	r2,-8(fp)
   19988:	10000326 	beq	r2,zero,19998 <OSQDel+0xf4>
   1998c:	10800060 	cmpeqi	r2,r2,1
   19990:	1000381e 	bne	r2,zero,19a74 <OSQDel+0x1d0>
   19994:	00006506 	br	19b2c <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   19998:	e0bff403 	ldbu	r2,-48(fp)
   1999c:	1000261e 	bne	r2,zero,19a38 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   199a0:	e0bffd17 	ldw	r2,-12(fp)
   199a4:	00c00fc4 	movi	r3,63
   199a8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   199ac:	e0bffd17 	ldw	r2,-12(fp)
   199b0:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   199b4:	e0bffd17 	ldw	r2,-12(fp)
   199b8:	10800117 	ldw	r2,4(r2)
   199bc:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   199c0:	008000f4 	movhi	r2,3
   199c4:	10a7eb04 	addi	r2,r2,-24660
   199c8:	10c00017 	ldw	r3,0(r2)
   199cc:	e0bff717 	ldw	r2,-36(fp)
   199d0:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   199d4:	008000f4 	movhi	r2,3
   199d8:	10a7eb04 	addi	r2,r2,-24660
   199dc:	e0fff717 	ldw	r3,-36(fp)
   199e0:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   199e4:	e0bffd17 	ldw	r2,-12(fp)
   199e8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   199ec:	008000f4 	movhi	r2,3
   199f0:	10a7ed04 	addi	r2,r2,-24652
   199f4:	10c00017 	ldw	r3,0(r2)
   199f8:	e0bffd17 	ldw	r2,-12(fp)
   199fc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   19a00:	e0bffd17 	ldw	r2,-12(fp)
   19a04:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   19a08:	008000f4 	movhi	r2,3
   19a0c:	10a7ed04 	addi	r2,r2,-24652
   19a10:	e0fffd17 	ldw	r3,-12(fp)
   19a14:	10c00015 	stw	r3,0(r2)
   19a18:	e0bff617 	ldw	r2,-40(fp)
   19a1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19a20:	e0bff917 	ldw	r2,-28(fp)
   19a24:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   19a28:	e0bfff17 	ldw	r2,-4(fp)
   19a2c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   19a30:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   19a34:	00004706 	br	19b54 <OSQDel+0x2b0>
   19a38:	e0bff617 	ldw	r2,-40(fp)
   19a3c:	e0bffa15 	stw	r2,-24(fp)
   19a40:	e0bffa17 	ldw	r2,-24(fp)
   19a44:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   19a48:	e0bfff17 	ldw	r2,-4(fp)
   19a4c:	00c01244 	movi	r3,73
   19a50:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   19a54:	e0bffd17 	ldw	r2,-12(fp)
   19a58:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   19a5c:	00003d06 	br	19b54 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   19a60:	e13ffd17 	ldw	r4,-12(fp)
   19a64:	000b883a 	mov	r5,zero
   19a68:	01800104 	movi	r6,4
   19a6c:	000f883a 	mov	r7,zero
   19a70:	00157c40 	call	157c4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   19a74:	e0bffd17 	ldw	r2,-12(fp)
   19a78:	10800283 	ldbu	r2,10(r2)
   19a7c:	10803fcc 	andi	r2,r2,255
   19a80:	103ff71e 	bne	r2,zero,19a60 <__alt_mem_Flash_flash_data+0xf4019a60>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   19a84:	e0bffd17 	ldw	r2,-12(fp)
   19a88:	00c00fc4 	movi	r3,63
   19a8c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   19a90:	e0bffd17 	ldw	r2,-12(fp)
   19a94:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   19a98:	e0bffd17 	ldw	r2,-12(fp)
   19a9c:	10800117 	ldw	r2,4(r2)
   19aa0:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   19aa4:	008000f4 	movhi	r2,3
   19aa8:	10a7eb04 	addi	r2,r2,-24660
   19aac:	10c00017 	ldw	r3,0(r2)
   19ab0:	e0bff717 	ldw	r2,-36(fp)
   19ab4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   19ab8:	008000f4 	movhi	r2,3
   19abc:	10a7eb04 	addi	r2,r2,-24660
   19ac0:	e0fff717 	ldw	r3,-36(fp)
   19ac4:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   19ac8:	e0bffd17 	ldw	r2,-12(fp)
   19acc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   19ad0:	008000f4 	movhi	r2,3
   19ad4:	10a7ed04 	addi	r2,r2,-24652
   19ad8:	10c00017 	ldw	r3,0(r2)
   19adc:	e0bffd17 	ldw	r2,-12(fp)
   19ae0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   19ae4:	e0bffd17 	ldw	r2,-12(fp)
   19ae8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   19aec:	008000f4 	movhi	r2,3
   19af0:	10a7ed04 	addi	r2,r2,-24652
   19af4:	e0fffd17 	ldw	r3,-12(fp)
   19af8:	10c00015 	stw	r3,0(r2)
   19afc:	e0bff617 	ldw	r2,-40(fp)
   19b00:	e0bffb15 	stw	r2,-20(fp)
   19b04:	e0bffb17 	ldw	r2,-20(fp)
   19b08:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   19b0c:	e0bff403 	ldbu	r2,-48(fp)
   19b10:	10800058 	cmpnei	r2,r2,1
   19b14:	1000011e 	bne	r2,zero,19b1c <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   19b18:	00161dc0 	call	161dc <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   19b1c:	e0bfff17 	ldw	r2,-4(fp)
   19b20:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   19b24:	e03ff515 	stw	zero,-44(fp)
             break;
   19b28:	00000a06 	br	19b54 <OSQDel+0x2b0>
   19b2c:	e0bff617 	ldw	r2,-40(fp)
   19b30:	e0bffc15 	stw	r2,-16(fp)
   19b34:	e0bffc17 	ldw	r2,-16(fp)
   19b38:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   19b3c:	e0bfff17 	ldw	r2,-4(fp)
   19b40:	00c001c4 	movi	r3,7
   19b44:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   19b48:	e0bffd17 	ldw	r2,-12(fp)
   19b4c:	e0bff515 	stw	r2,-44(fp)
             break;
   19b50:	0001883a 	nop
    }
    return (pevent_return);
   19b54:	e0bff517 	ldw	r2,-44(fp)
}
   19b58:	e037883a 	mov	sp,fp
   19b5c:	dfc00117 	ldw	ra,4(sp)
   19b60:	df000017 	ldw	fp,0(sp)
   19b64:	dec00204 	addi	sp,sp,8
   19b68:	f800283a 	ret

00019b6c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   19b6c:	defffa04 	addi	sp,sp,-24
   19b70:	df000515 	stw	fp,20(sp)
   19b74:	df000504 	addi	fp,sp,20
   19b78:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19b7c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19b80:	e0bfff17 	ldw	r2,-4(fp)
   19b84:	1000021e 	bne	r2,zero,19b90 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   19b88:	00800104 	movi	r2,4
   19b8c:	00002106 	br	19c14 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   19b90:	e0bfff17 	ldw	r2,-4(fp)
   19b94:	10800003 	ldbu	r2,0(r2)
   19b98:	10803fcc 	andi	r2,r2,255
   19b9c:	108000a0 	cmpeqi	r2,r2,2
   19ba0:	1000021e 	bne	r2,zero,19bac <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   19ba4:	00800044 	movi	r2,1
   19ba8:	00001a06 	br	19c14 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19bac:	0005303a 	rdctl	r2,status
   19bb0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19bb4:	e0fffd17 	ldw	r3,-12(fp)
   19bb8:	00bfff84 	movi	r2,-2
   19bbc:	1884703a 	and	r2,r3,r2
   19bc0:	1001703a 	wrctl	status,r2
  
  return context;
   19bc4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19bc8:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   19bcc:	e0bfff17 	ldw	r2,-4(fp)
   19bd0:	10800117 	ldw	r2,4(r2)
   19bd4:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   19bd8:	e0bffc17 	ldw	r2,-16(fp)
   19bdc:	10c00117 	ldw	r3,4(r2)
   19be0:	e0bffc17 	ldw	r2,-16(fp)
   19be4:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   19be8:	e0bffc17 	ldw	r2,-16(fp)
   19bec:	10c00117 	ldw	r3,4(r2)
   19bf0:	e0bffc17 	ldw	r2,-16(fp)
   19bf4:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   19bf8:	e0bffc17 	ldw	r2,-16(fp)
   19bfc:	1000058d 	sth	zero,22(r2)
   19c00:	e0bffb17 	ldw	r2,-20(fp)
   19c04:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19c08:	e0bffe17 	ldw	r2,-8(fp)
   19c0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19c10:	0005883a 	mov	r2,zero
}
   19c14:	e037883a 	mov	sp,fp
   19c18:	df000017 	ldw	fp,0(sp)
   19c1c:	dec00104 	addi	sp,sp,4
   19c20:	f800283a 	ret

00019c24 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   19c24:	defff304 	addi	sp,sp,-52
   19c28:	dfc00c15 	stw	ra,48(sp)
   19c2c:	df000b15 	stw	fp,44(sp)
   19c30:	df000b04 	addi	fp,sp,44
   19c34:	e13ffd15 	stw	r4,-12(fp)
   19c38:	2805883a 	mov	r2,r5
   19c3c:	e1bfff15 	stw	r6,-4(fp)
   19c40:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19c44:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   19c48:	e0bfff17 	ldw	r2,-4(fp)
   19c4c:	1000021e 	bne	r2,zero,19c58 <OSQPend+0x34>
        return ((void *)0);
   19c50:	0005883a 	mov	r2,zero
   19c54:	0000ad06 	br	19f0c <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   19c58:	e0bffd17 	ldw	r2,-12(fp)
   19c5c:	1000051e 	bne	r2,zero,19c74 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   19c60:	e0bfff17 	ldw	r2,-4(fp)
   19c64:	00c00104 	movi	r3,4
   19c68:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   19c6c:	0005883a 	mov	r2,zero
   19c70:	0000a606 	br	19f0c <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   19c74:	e0bffd17 	ldw	r2,-12(fp)
   19c78:	10800003 	ldbu	r2,0(r2)
   19c7c:	10803fcc 	andi	r2,r2,255
   19c80:	108000a0 	cmpeqi	r2,r2,2
   19c84:	1000051e 	bne	r2,zero,19c9c <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   19c88:	e0bfff17 	ldw	r2,-4(fp)
   19c8c:	00c00044 	movi	r3,1
   19c90:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   19c94:	0005883a 	mov	r2,zero
   19c98:	00009c06 	br	19f0c <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   19c9c:	008000f4 	movhi	r2,3
   19ca0:	10a7ee04 	addi	r2,r2,-24648
   19ca4:	10800003 	ldbu	r2,0(r2)
   19ca8:	10803fcc 	andi	r2,r2,255
   19cac:	10000526 	beq	r2,zero,19cc4 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   19cb0:	e0bfff17 	ldw	r2,-4(fp)
   19cb4:	00c00084 	movi	r3,2
   19cb8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   19cbc:	0005883a 	mov	r2,zero
   19cc0:	00009206 	br	19f0c <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   19cc4:	008000f4 	movhi	r2,3
   19cc8:	10a7e004 	addi	r2,r2,-24704
   19ccc:	10800003 	ldbu	r2,0(r2)
   19cd0:	10803fcc 	andi	r2,r2,255
   19cd4:	10000526 	beq	r2,zero,19cec <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   19cd8:	e0bfff17 	ldw	r2,-4(fp)
   19cdc:	00c00344 	movi	r3,13
   19ce0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   19ce4:	0005883a 	mov	r2,zero
   19ce8:	00008806 	br	19f0c <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19cec:	0005303a 	rdctl	r2,status
   19cf0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19cf4:	e0fff817 	ldw	r3,-32(fp)
   19cf8:	00bfff84 	movi	r2,-2
   19cfc:	1884703a 	and	r2,r3,r2
   19d00:	1001703a 	wrctl	status,r2
  
  return context;
   19d04:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   19d08:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   19d0c:	e0bffd17 	ldw	r2,-12(fp)
   19d10:	10800117 	ldw	r2,4(r2)
   19d14:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   19d18:	e0bff717 	ldw	r2,-36(fp)
   19d1c:	1080058b 	ldhu	r2,22(r2)
   19d20:	10bfffcc 	andi	r2,r2,65535
   19d24:	10001e26 	beq	r2,zero,19da0 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   19d28:	e0bff717 	ldw	r2,-36(fp)
   19d2c:	10800417 	ldw	r2,16(r2)
   19d30:	11000104 	addi	r4,r2,4
   19d34:	e0fff717 	ldw	r3,-36(fp)
   19d38:	19000415 	stw	r4,16(r3)
   19d3c:	10800017 	ldw	r2,0(r2)
   19d40:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   19d44:	e0bff717 	ldw	r2,-36(fp)
   19d48:	1080058b 	ldhu	r2,22(r2)
   19d4c:	10bfffc4 	addi	r2,r2,-1
   19d50:	1007883a 	mov	r3,r2
   19d54:	e0bff717 	ldw	r2,-36(fp)
   19d58:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   19d5c:	e0bff717 	ldw	r2,-36(fp)
   19d60:	10c00417 	ldw	r3,16(r2)
   19d64:	e0bff717 	ldw	r2,-36(fp)
   19d68:	10800217 	ldw	r2,8(r2)
   19d6c:	1880041e 	bne	r3,r2,19d80 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   19d70:	e0bff717 	ldw	r2,-36(fp)
   19d74:	10c00117 	ldw	r3,4(r2)
   19d78:	e0bff717 	ldw	r2,-36(fp)
   19d7c:	10c00415 	stw	r3,16(r2)
   19d80:	e0bff617 	ldw	r2,-40(fp)
   19d84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19d88:	e0bff917 	ldw	r2,-28(fp)
   19d8c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   19d90:	e0bfff17 	ldw	r2,-4(fp)
   19d94:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   19d98:	e0bff517 	ldw	r2,-44(fp)
   19d9c:	00005b06 	br	19f0c <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   19da0:	008000f4 	movhi	r2,3
   19da4:	10a7ef04 	addi	r2,r2,-24644
   19da8:	10c00017 	ldw	r3,0(r2)
   19dac:	008000f4 	movhi	r2,3
   19db0:	10a7ef04 	addi	r2,r2,-24644
   19db4:	10800017 	ldw	r2,0(r2)
   19db8:	10800c03 	ldbu	r2,48(r2)
   19dbc:	10800114 	ori	r2,r2,4
   19dc0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   19dc4:	008000f4 	movhi	r2,3
   19dc8:	10a7ef04 	addi	r2,r2,-24644
   19dcc:	10800017 	ldw	r2,0(r2)
   19dd0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   19dd4:	008000f4 	movhi	r2,3
   19dd8:	10a7ef04 	addi	r2,r2,-24644
   19ddc:	10800017 	ldw	r2,0(r2)
   19de0:	e0fffe0b 	ldhu	r3,-8(fp)
   19de4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   19de8:	e13ffd17 	ldw	r4,-12(fp)
   19dec:	001595c0 	call	1595c <OS_EventTaskWait>
   19df0:	e0bff617 	ldw	r2,-40(fp)
   19df4:	e0bffa15 	stw	r2,-24(fp)
   19df8:	e0bffa17 	ldw	r2,-24(fp)
   19dfc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   19e00:	00161dc0 	call	161dc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19e04:	0005303a 	rdctl	r2,status
   19e08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19e0c:	e0fffb17 	ldw	r3,-20(fp)
   19e10:	00bfff84 	movi	r2,-2
   19e14:	1884703a 	and	r2,r3,r2
   19e18:	1001703a 	wrctl	status,r2
  
  return context;
   19e1c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   19e20:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   19e24:	008000f4 	movhi	r2,3
   19e28:	10a7ef04 	addi	r2,r2,-24644
   19e2c:	10800017 	ldw	r2,0(r2)
   19e30:	10800c43 	ldbu	r2,49(r2)
   19e34:	10803fcc 	andi	r2,r2,255
   19e38:	10000326 	beq	r2,zero,19e48 <OSQPend+0x224>
   19e3c:	108000a0 	cmpeqi	r2,r2,2
   19e40:	1000091e 	bne	r2,zero,19e68 <OSQPend+0x244>
   19e44:	00000d06 	br	19e7c <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   19e48:	008000f4 	movhi	r2,3
   19e4c:	10a7ef04 	addi	r2,r2,-24644
   19e50:	10800017 	ldw	r2,0(r2)
   19e54:	10800917 	ldw	r2,36(r2)
   19e58:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   19e5c:	e0bfff17 	ldw	r2,-4(fp)
   19e60:	10000005 	stb	zero,0(r2)
             break;
   19e64:	00001006 	br	19ea8 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   19e68:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   19e6c:	e0bfff17 	ldw	r2,-4(fp)
   19e70:	00c00384 	movi	r3,14
   19e74:	10c00005 	stb	r3,0(r2)
             break;
   19e78:	00000b06 	br	19ea8 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   19e7c:	008000f4 	movhi	r2,3
   19e80:	10a7ef04 	addi	r2,r2,-24644
   19e84:	10800017 	ldw	r2,0(r2)
   19e88:	1009883a 	mov	r4,r2
   19e8c:	e17ffd17 	ldw	r5,-12(fp)
   19e90:	0015bb40 	call	15bb4 <OS_EventTaskRemove>
             pmsg = (void *)0;
   19e94:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   19e98:	e0bfff17 	ldw	r2,-4(fp)
   19e9c:	00c00284 	movi	r3,10
   19ea0:	10c00005 	stb	r3,0(r2)
             break;
   19ea4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   19ea8:	008000f4 	movhi	r2,3
   19eac:	10a7ef04 	addi	r2,r2,-24644
   19eb0:	10800017 	ldw	r2,0(r2)
   19eb4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   19eb8:	008000f4 	movhi	r2,3
   19ebc:	10a7ef04 	addi	r2,r2,-24644
   19ec0:	10800017 	ldw	r2,0(r2)
   19ec4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   19ec8:	008000f4 	movhi	r2,3
   19ecc:	10a7ef04 	addi	r2,r2,-24644
   19ed0:	10800017 	ldw	r2,0(r2)
   19ed4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   19ed8:	008000f4 	movhi	r2,3
   19edc:	10a7ef04 	addi	r2,r2,-24644
   19ee0:	10800017 	ldw	r2,0(r2)
   19ee4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   19ee8:	008000f4 	movhi	r2,3
   19eec:	10a7ef04 	addi	r2,r2,-24644
   19ef0:	10800017 	ldw	r2,0(r2)
   19ef4:	10000915 	stw	zero,36(r2)
   19ef8:	e0bff617 	ldw	r2,-40(fp)
   19efc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19f00:	e0bffc17 	ldw	r2,-16(fp)
   19f04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   19f08:	e0bff517 	ldw	r2,-44(fp)
}
   19f0c:	e037883a 	mov	sp,fp
   19f10:	dfc00117 	ldw	ra,4(sp)
   19f14:	df000017 	ldw	fp,0(sp)
   19f18:	dec00204 	addi	sp,sp,8
   19f1c:	f800283a 	ret

00019f20 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   19f20:	defff604 	addi	sp,sp,-40
   19f24:	dfc00915 	stw	ra,36(sp)
   19f28:	df000815 	stw	fp,32(sp)
   19f2c:	df000804 	addi	fp,sp,32
   19f30:	e13ffd15 	stw	r4,-12(fp)
   19f34:	2805883a 	mov	r2,r5
   19f38:	e1bfff15 	stw	r6,-4(fp)
   19f3c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   19f40:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   19f44:	e0bfff17 	ldw	r2,-4(fp)
   19f48:	1000021e 	bne	r2,zero,19f54 <OSQPendAbort+0x34>
        return (0);
   19f4c:	0005883a 	mov	r2,zero
   19f50:	00004906 	br	1a078 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   19f54:	e0bffd17 	ldw	r2,-12(fp)
   19f58:	1000051e 	bne	r2,zero,19f70 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   19f5c:	e0bfff17 	ldw	r2,-4(fp)
   19f60:	00c00104 	movi	r3,4
   19f64:	10c00005 	stb	r3,0(r2)
        return (0);
   19f68:	0005883a 	mov	r2,zero
   19f6c:	00004206 	br	1a078 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   19f70:	e0bffd17 	ldw	r2,-12(fp)
   19f74:	10800003 	ldbu	r2,0(r2)
   19f78:	10803fcc 	andi	r2,r2,255
   19f7c:	108000a0 	cmpeqi	r2,r2,2
   19f80:	1000051e 	bne	r2,zero,19f98 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   19f84:	e0bfff17 	ldw	r2,-4(fp)
   19f88:	00c00044 	movi	r3,1
   19f8c:	10c00005 	stb	r3,0(r2)
        return (0);
   19f90:	0005883a 	mov	r2,zero
   19f94:	00003806 	br	1a078 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19f98:	0005303a 	rdctl	r2,status
   19f9c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19fa0:	e0fffa17 	ldw	r3,-24(fp)
   19fa4:	00bfff84 	movi	r2,-2
   19fa8:	1884703a 	and	r2,r3,r2
   19fac:	1001703a 	wrctl	status,r2
  
  return context;
   19fb0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   19fb4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   19fb8:	e0bffd17 	ldw	r2,-12(fp)
   19fbc:	10800283 	ldbu	r2,10(r2)
   19fc0:	10803fcc 	andi	r2,r2,255
   19fc4:	10002526 	beq	r2,zero,1a05c <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   19fc8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   19fcc:	e0bffe03 	ldbu	r2,-8(fp)
   19fd0:	10800060 	cmpeqi	r2,r2,1
   19fd4:	10000e26 	beq	r2,zero,1a010 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   19fd8:	00000806 	br	19ffc <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   19fdc:	e13ffd17 	ldw	r4,-12(fp)
   19fe0:	000b883a 	mov	r5,zero
   19fe4:	01800104 	movi	r6,4
   19fe8:	01c00084 	movi	r7,2
   19fec:	00157c40 	call	157c4 <OS_EventTaskRdy>
                     nbr_tasks++;
   19ff0:	e0bff803 	ldbu	r2,-32(fp)
   19ff4:	10800044 	addi	r2,r2,1
   19ff8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   19ffc:	e0bffd17 	ldw	r2,-12(fp)
   1a000:	10800283 	ldbu	r2,10(r2)
   1a004:	10803fcc 	andi	r2,r2,255
   1a008:	103ff41e 	bne	r2,zero,19fdc <__alt_mem_Flash_flash_data+0xf4019fdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1a00c:	00000906 	br	1a034 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   1a010:	e13ffd17 	ldw	r4,-12(fp)
   1a014:	000b883a 	mov	r5,zero
   1a018:	01800104 	movi	r6,4
   1a01c:	01c00084 	movi	r7,2
   1a020:	00157c40 	call	157c4 <OS_EventTaskRdy>
                 nbr_tasks++;
   1a024:	e0bff803 	ldbu	r2,-32(fp)
   1a028:	10800044 	addi	r2,r2,1
   1a02c:	e0bff805 	stb	r2,-32(fp)
                 break;
   1a030:	0001883a 	nop
   1a034:	e0bff917 	ldw	r2,-28(fp)
   1a038:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a03c:	e0bffb17 	ldw	r2,-20(fp)
   1a040:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   1a044:	00161dc0 	call	161dc <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1a048:	e0bfff17 	ldw	r2,-4(fp)
   1a04c:	00c00384 	movi	r3,14
   1a050:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1a054:	e0bff803 	ldbu	r2,-32(fp)
   1a058:	00000706 	br	1a078 <OSQPendAbort+0x158>
   1a05c:	e0bff917 	ldw	r2,-28(fp)
   1a060:	e0bffc15 	stw	r2,-16(fp)
   1a064:	e0bffc17 	ldw	r2,-16(fp)
   1a068:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1a06c:	e0bfff17 	ldw	r2,-4(fp)
   1a070:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   1a074:	0005883a 	mov	r2,zero
}
   1a078:	e037883a 	mov	sp,fp
   1a07c:	dfc00117 	ldw	ra,4(sp)
   1a080:	df000017 	ldw	fp,0(sp)
   1a084:	dec00204 	addi	sp,sp,8
   1a088:	f800283a 	ret

0001a08c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   1a08c:	defff604 	addi	sp,sp,-40
   1a090:	dfc00915 	stw	ra,36(sp)
   1a094:	df000815 	stw	fp,32(sp)
   1a098:	df000804 	addi	fp,sp,32
   1a09c:	e13ffe15 	stw	r4,-8(fp)
   1a0a0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1a0a4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   1a0a8:	e0bffe17 	ldw	r2,-8(fp)
   1a0ac:	1000021e 	bne	r2,zero,1a0b8 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   1a0b0:	00800104 	movi	r2,4
   1a0b4:	00004a06 	br	1a1e0 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   1a0b8:	e0bffe17 	ldw	r2,-8(fp)
   1a0bc:	10800003 	ldbu	r2,0(r2)
   1a0c0:	10803fcc 	andi	r2,r2,255
   1a0c4:	108000a0 	cmpeqi	r2,r2,2
   1a0c8:	1000021e 	bne	r2,zero,1a0d4 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   1a0cc:	00800044 	movi	r2,1
   1a0d0:	00004306 	br	1a1e0 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a0d4:	0005303a 	rdctl	r2,status
   1a0d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a0dc:	e0fffa17 	ldw	r3,-24(fp)
   1a0e0:	00bfff84 	movi	r2,-2
   1a0e4:	1884703a 	and	r2,r3,r2
   1a0e8:	1001703a 	wrctl	status,r2
  
  return context;
   1a0ec:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1a0f0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   1a0f4:	e0bffe17 	ldw	r2,-8(fp)
   1a0f8:	10800283 	ldbu	r2,10(r2)
   1a0fc:	10803fcc 	andi	r2,r2,255
   1a100:	10000c26 	beq	r2,zero,1a134 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1a104:	e13ffe17 	ldw	r4,-8(fp)
   1a108:	e17fff17 	ldw	r5,-4(fp)
   1a10c:	01800104 	movi	r6,4
   1a110:	000f883a 	mov	r7,zero
   1a114:	00157c40 	call	157c4 <OS_EventTaskRdy>
   1a118:	e0bff817 	ldw	r2,-32(fp)
   1a11c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a120:	e0bffb17 	ldw	r2,-20(fp)
   1a124:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   1a128:	00161dc0 	call	161dc <OS_Sched>
        return (OS_ERR_NONE);
   1a12c:	0005883a 	mov	r2,zero
   1a130:	00002b06 	br	1a1e0 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   1a134:	e0bffe17 	ldw	r2,-8(fp)
   1a138:	10800117 	ldw	r2,4(r2)
   1a13c:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   1a140:	e0bff917 	ldw	r2,-28(fp)
   1a144:	10c0058b 	ldhu	r3,22(r2)
   1a148:	e0bff917 	ldw	r2,-28(fp)
   1a14c:	1080050b 	ldhu	r2,20(r2)
   1a150:	18ffffcc 	andi	r3,r3,65535
   1a154:	10bfffcc 	andi	r2,r2,65535
   1a158:	18800636 	bltu	r3,r2,1a174 <OSQPost+0xe8>
   1a15c:	e0bff817 	ldw	r2,-32(fp)
   1a160:	e0bffc15 	stw	r2,-16(fp)
   1a164:	e0bffc17 	ldw	r2,-16(fp)
   1a168:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1a16c:	00800784 	movi	r2,30
   1a170:	00001b06 	br	1a1e0 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   1a174:	e0bff917 	ldw	r2,-28(fp)
   1a178:	10800317 	ldw	r2,12(r2)
   1a17c:	11000104 	addi	r4,r2,4
   1a180:	e0fff917 	ldw	r3,-28(fp)
   1a184:	19000315 	stw	r4,12(r3)
   1a188:	e0ffff17 	ldw	r3,-4(fp)
   1a18c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   1a190:	e0bff917 	ldw	r2,-28(fp)
   1a194:	1080058b 	ldhu	r2,22(r2)
   1a198:	10800044 	addi	r2,r2,1
   1a19c:	1007883a 	mov	r3,r2
   1a1a0:	e0bff917 	ldw	r2,-28(fp)
   1a1a4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   1a1a8:	e0bff917 	ldw	r2,-28(fp)
   1a1ac:	10c00317 	ldw	r3,12(r2)
   1a1b0:	e0bff917 	ldw	r2,-28(fp)
   1a1b4:	10800217 	ldw	r2,8(r2)
   1a1b8:	1880041e 	bne	r3,r2,1a1cc <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   1a1bc:	e0bff917 	ldw	r2,-28(fp)
   1a1c0:	10c00117 	ldw	r3,4(r2)
   1a1c4:	e0bff917 	ldw	r2,-28(fp)
   1a1c8:	10c00315 	stw	r3,12(r2)
   1a1cc:	e0bff817 	ldw	r2,-32(fp)
   1a1d0:	e0bffd15 	stw	r2,-12(fp)
   1a1d4:	e0bffd17 	ldw	r2,-12(fp)
   1a1d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1a1dc:	0005883a 	mov	r2,zero
}
   1a1e0:	e037883a 	mov	sp,fp
   1a1e4:	dfc00117 	ldw	ra,4(sp)
   1a1e8:	df000017 	ldw	fp,0(sp)
   1a1ec:	dec00204 	addi	sp,sp,8
   1a1f0:	f800283a 	ret

0001a1f4 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   1a1f4:	defff604 	addi	sp,sp,-40
   1a1f8:	dfc00915 	stw	ra,36(sp)
   1a1fc:	df000815 	stw	fp,32(sp)
   1a200:	df000804 	addi	fp,sp,32
   1a204:	e13ffe15 	stw	r4,-8(fp)
   1a208:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1a20c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1a210:	e0bffe17 	ldw	r2,-8(fp)
   1a214:	1000021e 	bne	r2,zero,1a220 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   1a218:	00800104 	movi	r2,4
   1a21c:	00004c06 	br	1a350 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1a220:	e0bffe17 	ldw	r2,-8(fp)
   1a224:	10800003 	ldbu	r2,0(r2)
   1a228:	10803fcc 	andi	r2,r2,255
   1a22c:	108000a0 	cmpeqi	r2,r2,2
   1a230:	1000021e 	bne	r2,zero,1a23c <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   1a234:	00800044 	movi	r2,1
   1a238:	00004506 	br	1a350 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a23c:	0005303a 	rdctl	r2,status
   1a240:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a244:	e0fffa17 	ldw	r3,-24(fp)
   1a248:	00bfff84 	movi	r2,-2
   1a24c:	1884703a 	and	r2,r3,r2
   1a250:	1001703a 	wrctl	status,r2
  
  return context;
   1a254:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1a258:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   1a25c:	e0bffe17 	ldw	r2,-8(fp)
   1a260:	10800283 	ldbu	r2,10(r2)
   1a264:	10803fcc 	andi	r2,r2,255
   1a268:	10000c26 	beq	r2,zero,1a29c <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1a26c:	e13ffe17 	ldw	r4,-8(fp)
   1a270:	e17fff17 	ldw	r5,-4(fp)
   1a274:	01800104 	movi	r6,4
   1a278:	000f883a 	mov	r7,zero
   1a27c:	00157c40 	call	157c4 <OS_EventTaskRdy>
   1a280:	e0bff817 	ldw	r2,-32(fp)
   1a284:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a288:	e0bffb17 	ldw	r2,-20(fp)
   1a28c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   1a290:	00161dc0 	call	161dc <OS_Sched>
        return (OS_ERR_NONE);
   1a294:	0005883a 	mov	r2,zero
   1a298:	00002d06 	br	1a350 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   1a29c:	e0bffe17 	ldw	r2,-8(fp)
   1a2a0:	10800117 	ldw	r2,4(r2)
   1a2a4:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   1a2a8:	e0bff917 	ldw	r2,-28(fp)
   1a2ac:	10c0058b 	ldhu	r3,22(r2)
   1a2b0:	e0bff917 	ldw	r2,-28(fp)
   1a2b4:	1080050b 	ldhu	r2,20(r2)
   1a2b8:	18ffffcc 	andi	r3,r3,65535
   1a2bc:	10bfffcc 	andi	r2,r2,65535
   1a2c0:	18800636 	bltu	r3,r2,1a2dc <OSQPostFront+0xe8>
   1a2c4:	e0bff817 	ldw	r2,-32(fp)
   1a2c8:	e0bffc15 	stw	r2,-16(fp)
   1a2cc:	e0bffc17 	ldw	r2,-16(fp)
   1a2d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1a2d4:	00800784 	movi	r2,30
   1a2d8:	00001d06 	br	1a350 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   1a2dc:	e0bff917 	ldw	r2,-28(fp)
   1a2e0:	10c00417 	ldw	r3,16(r2)
   1a2e4:	e0bff917 	ldw	r2,-28(fp)
   1a2e8:	10800117 	ldw	r2,4(r2)
   1a2ec:	1880041e 	bne	r3,r2,1a300 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   1a2f0:	e0bff917 	ldw	r2,-28(fp)
   1a2f4:	10c00217 	ldw	r3,8(r2)
   1a2f8:	e0bff917 	ldw	r2,-28(fp)
   1a2fc:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   1a300:	e0bff917 	ldw	r2,-28(fp)
   1a304:	10800417 	ldw	r2,16(r2)
   1a308:	10ffff04 	addi	r3,r2,-4
   1a30c:	e0bff917 	ldw	r2,-28(fp)
   1a310:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   1a314:	e0bff917 	ldw	r2,-28(fp)
   1a318:	10800417 	ldw	r2,16(r2)
   1a31c:	e0ffff17 	ldw	r3,-4(fp)
   1a320:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   1a324:	e0bff917 	ldw	r2,-28(fp)
   1a328:	1080058b 	ldhu	r2,22(r2)
   1a32c:	10800044 	addi	r2,r2,1
   1a330:	1007883a 	mov	r3,r2
   1a334:	e0bff917 	ldw	r2,-28(fp)
   1a338:	10c0058d 	sth	r3,22(r2)
   1a33c:	e0bff817 	ldw	r2,-32(fp)
   1a340:	e0bffd15 	stw	r2,-12(fp)
   1a344:	e0bffd17 	ldw	r2,-12(fp)
   1a348:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1a34c:	0005883a 	mov	r2,zero
}
   1a350:	e037883a 	mov	sp,fp
   1a354:	dfc00117 	ldw	ra,4(sp)
   1a358:	df000017 	ldw	fp,0(sp)
   1a35c:	dec00204 	addi	sp,sp,8
   1a360:	f800283a 	ret

0001a364 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   1a364:	defff504 	addi	sp,sp,-44
   1a368:	dfc00a15 	stw	ra,40(sp)
   1a36c:	df000915 	stw	fp,36(sp)
   1a370:	df000904 	addi	fp,sp,36
   1a374:	e13ffd15 	stw	r4,-12(fp)
   1a378:	e17ffe15 	stw	r5,-8(fp)
   1a37c:	3005883a 	mov	r2,r6
   1a380:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1a384:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1a388:	e0bffd17 	ldw	r2,-12(fp)
   1a38c:	1000021e 	bne	r2,zero,1a398 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   1a390:	00800104 	movi	r2,4
   1a394:	00007106 	br	1a55c <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1a398:	e0bffd17 	ldw	r2,-12(fp)
   1a39c:	10800003 	ldbu	r2,0(r2)
   1a3a0:	10803fcc 	andi	r2,r2,255
   1a3a4:	108000a0 	cmpeqi	r2,r2,2
   1a3a8:	1000021e 	bne	r2,zero,1a3b4 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   1a3ac:	00800044 	movi	r2,1
   1a3b0:	00006a06 	br	1a55c <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a3b4:	0005303a 	rdctl	r2,status
   1a3b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a3bc:	e0fff917 	ldw	r3,-28(fp)
   1a3c0:	00bfff84 	movi	r2,-2
   1a3c4:	1884703a 	and	r2,r3,r2
   1a3c8:	1001703a 	wrctl	status,r2
  
  return context;
   1a3cc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1a3d0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   1a3d4:	e0bffd17 	ldw	r2,-12(fp)
   1a3d8:	10800283 	ldbu	r2,10(r2)
   1a3dc:	10803fcc 	andi	r2,r2,255
   1a3e0:	10001d26 	beq	r2,zero,1a458 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   1a3e4:	e0bfff03 	ldbu	r2,-4(fp)
   1a3e8:	1080004c 	andi	r2,r2,1
   1a3ec:	10000b26 	beq	r2,zero,1a41c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   1a3f0:	00000506 	br	1a408 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1a3f4:	e13ffd17 	ldw	r4,-12(fp)
   1a3f8:	e17ffe17 	ldw	r5,-8(fp)
   1a3fc:	01800104 	movi	r6,4
   1a400:	000f883a 	mov	r7,zero
   1a404:	00157c40 	call	157c4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   1a408:	e0bffd17 	ldw	r2,-12(fp)
   1a40c:	10800283 	ldbu	r2,10(r2)
   1a410:	10803fcc 	andi	r2,r2,255
   1a414:	103ff71e 	bne	r2,zero,1a3f4 <__alt_mem_Flash_flash_data+0xf401a3f4>
   1a418:	00000506 	br	1a430 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1a41c:	e13ffd17 	ldw	r4,-12(fp)
   1a420:	e17ffe17 	ldw	r5,-8(fp)
   1a424:	01800104 	movi	r6,4
   1a428:	000f883a 	mov	r7,zero
   1a42c:	00157c40 	call	157c4 <OS_EventTaskRdy>
   1a430:	e0bff717 	ldw	r2,-36(fp)
   1a434:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a438:	e0bffa17 	ldw	r2,-24(fp)
   1a43c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   1a440:	e0bfff03 	ldbu	r2,-4(fp)
   1a444:	1080010c 	andi	r2,r2,4
   1a448:	1000011e 	bne	r2,zero,1a450 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   1a44c:	00161dc0 	call	161dc <OS_Sched>
        }
        return (OS_ERR_NONE);
   1a450:	0005883a 	mov	r2,zero
   1a454:	00004106 	br	1a55c <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   1a458:	e0bffd17 	ldw	r2,-12(fp)
   1a45c:	10800117 	ldw	r2,4(r2)
   1a460:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   1a464:	e0bff817 	ldw	r2,-32(fp)
   1a468:	10c0058b 	ldhu	r3,22(r2)
   1a46c:	e0bff817 	ldw	r2,-32(fp)
   1a470:	1080050b 	ldhu	r2,20(r2)
   1a474:	18ffffcc 	andi	r3,r3,65535
   1a478:	10bfffcc 	andi	r2,r2,65535
   1a47c:	18800636 	bltu	r3,r2,1a498 <OSQPostOpt+0x134>
   1a480:	e0bff717 	ldw	r2,-36(fp)
   1a484:	e0bffb15 	stw	r2,-20(fp)
   1a488:	e0bffb17 	ldw	r2,-20(fp)
   1a48c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1a490:	00800784 	movi	r2,30
   1a494:	00003106 	br	1a55c <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   1a498:	e0bfff03 	ldbu	r2,-4(fp)
   1a49c:	1080008c 	andi	r2,r2,2
   1a4a0:	10001326 	beq	r2,zero,1a4f0 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   1a4a4:	e0bff817 	ldw	r2,-32(fp)
   1a4a8:	10c00417 	ldw	r3,16(r2)
   1a4ac:	e0bff817 	ldw	r2,-32(fp)
   1a4b0:	10800117 	ldw	r2,4(r2)
   1a4b4:	1880041e 	bne	r3,r2,1a4c8 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   1a4b8:	e0bff817 	ldw	r2,-32(fp)
   1a4bc:	10c00217 	ldw	r3,8(r2)
   1a4c0:	e0bff817 	ldw	r2,-32(fp)
   1a4c4:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   1a4c8:	e0bff817 	ldw	r2,-32(fp)
   1a4cc:	10800417 	ldw	r2,16(r2)
   1a4d0:	10ffff04 	addi	r3,r2,-4
   1a4d4:	e0bff817 	ldw	r2,-32(fp)
   1a4d8:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   1a4dc:	e0bff817 	ldw	r2,-32(fp)
   1a4e0:	10800417 	ldw	r2,16(r2)
   1a4e4:	e0fffe17 	ldw	r3,-8(fp)
   1a4e8:	10c00015 	stw	r3,0(r2)
   1a4ec:	00001006 	br	1a530 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   1a4f0:	e0bff817 	ldw	r2,-32(fp)
   1a4f4:	10800317 	ldw	r2,12(r2)
   1a4f8:	11000104 	addi	r4,r2,4
   1a4fc:	e0fff817 	ldw	r3,-32(fp)
   1a500:	19000315 	stw	r4,12(r3)
   1a504:	e0fffe17 	ldw	r3,-8(fp)
   1a508:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   1a50c:	e0bff817 	ldw	r2,-32(fp)
   1a510:	10c00317 	ldw	r3,12(r2)
   1a514:	e0bff817 	ldw	r2,-32(fp)
   1a518:	10800217 	ldw	r2,8(r2)
   1a51c:	1880041e 	bne	r3,r2,1a530 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   1a520:	e0bff817 	ldw	r2,-32(fp)
   1a524:	10c00117 	ldw	r3,4(r2)
   1a528:	e0bff817 	ldw	r2,-32(fp)
   1a52c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   1a530:	e0bff817 	ldw	r2,-32(fp)
   1a534:	1080058b 	ldhu	r2,22(r2)
   1a538:	10800044 	addi	r2,r2,1
   1a53c:	1007883a 	mov	r3,r2
   1a540:	e0bff817 	ldw	r2,-32(fp)
   1a544:	10c0058d 	sth	r3,22(r2)
   1a548:	e0bff717 	ldw	r2,-36(fp)
   1a54c:	e0bffc15 	stw	r2,-16(fp)
   1a550:	e0bffc17 	ldw	r2,-16(fp)
   1a554:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1a558:	0005883a 	mov	r2,zero
}
   1a55c:	e037883a 	mov	sp,fp
   1a560:	dfc00117 	ldw	ra,4(sp)
   1a564:	df000017 	ldw	fp,0(sp)
   1a568:	dec00204 	addi	sp,sp,8
   1a56c:	f800283a 	ret

0001a570 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   1a570:	defff604 	addi	sp,sp,-40
   1a574:	df000915 	stw	fp,36(sp)
   1a578:	df000904 	addi	fp,sp,36
   1a57c:	e13ffe15 	stw	r4,-8(fp)
   1a580:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1a584:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   1a588:	e0bffe17 	ldw	r2,-8(fp)
   1a58c:	1000021e 	bne	r2,zero,1a598 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1a590:	00800104 	movi	r2,4
   1a594:	00004906 	br	1a6bc <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   1a598:	e0bfff17 	ldw	r2,-4(fp)
   1a59c:	1000021e 	bne	r2,zero,1a5a8 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1a5a0:	00800244 	movi	r2,9
   1a5a4:	00004506 	br	1a6bc <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   1a5a8:	e0bffe17 	ldw	r2,-8(fp)
   1a5ac:	10800003 	ldbu	r2,0(r2)
   1a5b0:	10803fcc 	andi	r2,r2,255
   1a5b4:	108000a0 	cmpeqi	r2,r2,2
   1a5b8:	1000021e 	bne	r2,zero,1a5c4 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1a5bc:	00800044 	movi	r2,1
   1a5c0:	00003e06 	br	1a6bc <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a5c4:	0005303a 	rdctl	r2,status
   1a5c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a5cc:	e0fffc17 	ldw	r3,-16(fp)
   1a5d0:	00bfff84 	movi	r2,-2
   1a5d4:	1884703a 	and	r2,r3,r2
   1a5d8:	1001703a 	wrctl	status,r2
  
  return context;
   1a5dc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1a5e0:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   1a5e4:	e0bffe17 	ldw	r2,-8(fp)
   1a5e8:	10c00283 	ldbu	r3,10(r2)
   1a5ec:	e0bfff17 	ldw	r2,-4(fp)
   1a5f0:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   1a5f4:	e0bffe17 	ldw	r2,-8(fp)
   1a5f8:	108002c4 	addi	r2,r2,11
   1a5fc:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   1a600:	e0bfff17 	ldw	r2,-4(fp)
   1a604:	10800204 	addi	r2,r2,8
   1a608:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1a60c:	e03ff705 	stb	zero,-36(fp)
   1a610:	00000b06 	br	1a640 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   1a614:	e0bff917 	ldw	r2,-28(fp)
   1a618:	10c00044 	addi	r3,r2,1
   1a61c:	e0fff915 	stw	r3,-28(fp)
   1a620:	e0fff817 	ldw	r3,-32(fp)
   1a624:	19000044 	addi	r4,r3,1
   1a628:	e13ff815 	stw	r4,-32(fp)
   1a62c:	18c00003 	ldbu	r3,0(r3)
   1a630:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1a634:	e0bff703 	ldbu	r2,-36(fp)
   1a638:	10800044 	addi	r2,r2,1
   1a63c:	e0bff705 	stb	r2,-36(fp)
   1a640:	e0bff703 	ldbu	r2,-36(fp)
   1a644:	108000f0 	cmpltui	r2,r2,3
   1a648:	103ff21e 	bne	r2,zero,1a614 <__alt_mem_Flash_flash_data+0xf401a614>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   1a64c:	e0bffe17 	ldw	r2,-8(fp)
   1a650:	10800117 	ldw	r2,4(r2)
   1a654:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   1a658:	e0bffb17 	ldw	r2,-20(fp)
   1a65c:	1080058b 	ldhu	r2,22(r2)
   1a660:	10bfffcc 	andi	r2,r2,65535
   1a664:	10000626 	beq	r2,zero,1a680 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   1a668:	e0bffb17 	ldw	r2,-20(fp)
   1a66c:	10800417 	ldw	r2,16(r2)
   1a670:	10c00017 	ldw	r3,0(r2)
   1a674:	e0bfff17 	ldw	r2,-4(fp)
   1a678:	10c00015 	stw	r3,0(r2)
   1a67c:	00000206 	br	1a688 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   1a680:	e0bfff17 	ldw	r2,-4(fp)
   1a684:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   1a688:	e0bffb17 	ldw	r2,-20(fp)
   1a68c:	10c0058b 	ldhu	r3,22(r2)
   1a690:	e0bfff17 	ldw	r2,-4(fp)
   1a694:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   1a698:	e0bffb17 	ldw	r2,-20(fp)
   1a69c:	10c0050b 	ldhu	r3,20(r2)
   1a6a0:	e0bfff17 	ldw	r2,-4(fp)
   1a6a4:	10c0018d 	sth	r3,6(r2)
   1a6a8:	e0bffa17 	ldw	r2,-24(fp)
   1a6ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a6b0:	e0bffd17 	ldw	r2,-12(fp)
   1a6b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1a6b8:	0005883a 	mov	r2,zero
}
   1a6bc:	e037883a 	mov	sp,fp
   1a6c0:	df000017 	ldw	fp,0(sp)
   1a6c4:	dec00104 	addi	sp,sp,4
   1a6c8:	f800283a 	ret

0001a6cc <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   1a6cc:	defffb04 	addi	sp,sp,-20
   1a6d0:	dfc00415 	stw	ra,16(sp)
   1a6d4:	df000315 	stw	fp,12(sp)
   1a6d8:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   1a6dc:	01000174 	movhi	r4,5
   1a6e0:	21362b04 	addi	r4,r4,-10068
   1a6e4:	01407804 	movi	r5,480
   1a6e8:	00161280 	call	16128 <OS_MemClr>
    pq1 = &OSQTbl[0];
   1a6ec:	00800174 	movhi	r2,5
   1a6f0:	10b62b04 	addi	r2,r2,-10068
   1a6f4:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   1a6f8:	00800174 	movhi	r2,5
   1a6fc:	10b63104 	addi	r2,r2,-10044
   1a700:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1a704:	e03ffd0d 	sth	zero,-12(fp)
   1a708:	00000c06 	br	1a73c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   1a70c:	e0bffe17 	ldw	r2,-8(fp)
   1a710:	e0ffff17 	ldw	r3,-4(fp)
   1a714:	10c00015 	stw	r3,0(r2)
        pq1++;
   1a718:	e0bffe17 	ldw	r2,-8(fp)
   1a71c:	10800604 	addi	r2,r2,24
   1a720:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   1a724:	e0bfff17 	ldw	r2,-4(fp)
   1a728:	10800604 	addi	r2,r2,24
   1a72c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1a730:	e0bffd0b 	ldhu	r2,-12(fp)
   1a734:	10800044 	addi	r2,r2,1
   1a738:	e0bffd0d 	sth	r2,-12(fp)
   1a73c:	e0bffd0b 	ldhu	r2,-12(fp)
   1a740:	108004f0 	cmpltui	r2,r2,19
   1a744:	103ff11e 	bne	r2,zero,1a70c <__alt_mem_Flash_flash_data+0xf401a70c>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   1a748:	e0bffe17 	ldw	r2,-8(fp)
   1a74c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   1a750:	008000f4 	movhi	r2,3
   1a754:	10a7eb04 	addi	r2,r2,-24660
   1a758:	00c00174 	movhi	r3,5
   1a75c:	18f62b04 	addi	r3,r3,-10068
   1a760:	10c00015 	stw	r3,0(r2)
#endif
}
   1a764:	e037883a 	mov	sp,fp
   1a768:	dfc00117 	ldw	ra,4(sp)
   1a76c:	df000017 	ldw	fp,0(sp)
   1a770:	dec00204 	addi	sp,sp,8
   1a774:	f800283a 	ret

0001a778 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   1a778:	defffa04 	addi	sp,sp,-24
   1a77c:	df000515 	stw	fp,20(sp)
   1a780:	df000504 	addi	fp,sp,20
   1a784:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1a788:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1a78c:	e0bfff17 	ldw	r2,-4(fp)
   1a790:	1000021e 	bne	r2,zero,1a79c <OSSemAccept+0x24>
        return (0);
   1a794:	0005883a 	mov	r2,zero
   1a798:	00001f06 	br	1a818 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1a79c:	e0bfff17 	ldw	r2,-4(fp)
   1a7a0:	10800003 	ldbu	r2,0(r2)
   1a7a4:	10803fcc 	andi	r2,r2,255
   1a7a8:	108000e0 	cmpeqi	r2,r2,3
   1a7ac:	1000021e 	bne	r2,zero,1a7b8 <OSSemAccept+0x40>
        return (0);
   1a7b0:	0005883a 	mov	r2,zero
   1a7b4:	00001806 	br	1a818 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a7b8:	0005303a 	rdctl	r2,status
   1a7bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a7c0:	e0fffd17 	ldw	r3,-12(fp)
   1a7c4:	00bfff84 	movi	r2,-2
   1a7c8:	1884703a 	and	r2,r3,r2
   1a7cc:	1001703a 	wrctl	status,r2
  
  return context;
   1a7d0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1a7d4:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   1a7d8:	e0bfff17 	ldw	r2,-4(fp)
   1a7dc:	1080020b 	ldhu	r2,8(r2)
   1a7e0:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   1a7e4:	e0bffc0b 	ldhu	r2,-16(fp)
   1a7e8:	10000626 	beq	r2,zero,1a804 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   1a7ec:	e0bfff17 	ldw	r2,-4(fp)
   1a7f0:	1080020b 	ldhu	r2,8(r2)
   1a7f4:	10bfffc4 	addi	r2,r2,-1
   1a7f8:	1007883a 	mov	r3,r2
   1a7fc:	e0bfff17 	ldw	r2,-4(fp)
   1a800:	10c0020d 	sth	r3,8(r2)
   1a804:	e0bffb17 	ldw	r2,-20(fp)
   1a808:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a80c:	e0bffe17 	ldw	r2,-8(fp)
   1a810:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   1a814:	e0bffc0b 	ldhu	r2,-16(fp)
}
   1a818:	e037883a 	mov	sp,fp
   1a81c:	df000017 	ldw	fp,0(sp)
   1a820:	dec00104 	addi	sp,sp,4
   1a824:	f800283a 	ret

0001a828 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   1a828:	defff904 	addi	sp,sp,-28
   1a82c:	dfc00615 	stw	ra,24(sp)
   1a830:	df000515 	stw	fp,20(sp)
   1a834:	df000504 	addi	fp,sp,20
   1a838:	2005883a 	mov	r2,r4
   1a83c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1a840:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1a844:	008000f4 	movhi	r2,3
   1a848:	10a7ee04 	addi	r2,r2,-24648
   1a84c:	10800003 	ldbu	r2,0(r2)
   1a850:	10803fcc 	andi	r2,r2,255
   1a854:	10000226 	beq	r2,zero,1a860 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   1a858:	0005883a 	mov	r2,zero
   1a85c:	00002d06 	br	1a914 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a860:	0005303a 	rdctl	r2,status
   1a864:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a868:	e0fffd17 	ldw	r3,-12(fp)
   1a86c:	00bfff84 	movi	r2,-2
   1a870:	1884703a 	and	r2,r3,r2
   1a874:	1001703a 	wrctl	status,r2
  
  return context;
   1a878:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1a87c:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   1a880:	008000f4 	movhi	r2,3
   1a884:	10a7ed04 	addi	r2,r2,-24652
   1a888:	10800017 	ldw	r2,0(r2)
   1a88c:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   1a890:	008000f4 	movhi	r2,3
   1a894:	10a7ed04 	addi	r2,r2,-24652
   1a898:	10800017 	ldw	r2,0(r2)
   1a89c:	10000726 	beq	r2,zero,1a8bc <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1a8a0:	008000f4 	movhi	r2,3
   1a8a4:	10a7ed04 	addi	r2,r2,-24652
   1a8a8:	10800017 	ldw	r2,0(r2)
   1a8ac:	10c00117 	ldw	r3,4(r2)
   1a8b0:	008000f4 	movhi	r2,3
   1a8b4:	10a7ed04 	addi	r2,r2,-24652
   1a8b8:	10c00015 	stw	r3,0(r2)
   1a8bc:	e0bffb17 	ldw	r2,-20(fp)
   1a8c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a8c4:	e0bffe17 	ldw	r2,-8(fp)
   1a8c8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   1a8cc:	e0bffc17 	ldw	r2,-16(fp)
   1a8d0:	10000f26 	beq	r2,zero,1a910 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   1a8d4:	e0bffc17 	ldw	r2,-16(fp)
   1a8d8:	00c000c4 	movi	r3,3
   1a8dc:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   1a8e0:	e0bffc17 	ldw	r2,-16(fp)
   1a8e4:	e0ffff0b 	ldhu	r3,-4(fp)
   1a8e8:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   1a8ec:	e0bffc17 	ldw	r2,-16(fp)
   1a8f0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   1a8f4:	e0bffc17 	ldw	r2,-16(fp)
   1a8f8:	00c00fc4 	movi	r3,63
   1a8fc:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   1a900:	e0bffc17 	ldw	r2,-16(fp)
   1a904:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   1a908:	e13ffc17 	ldw	r4,-16(fp)
   1a90c:	0015d640 	call	15d64 <OS_EventWaitListInit>
    }
    return (pevent);
   1a910:	e0bffc17 	ldw	r2,-16(fp)
}
   1a914:	e037883a 	mov	sp,fp
   1a918:	dfc00117 	ldw	ra,4(sp)
   1a91c:	df000017 	ldw	fp,0(sp)
   1a920:	dec00204 	addi	sp,sp,8
   1a924:	f800283a 	ret

0001a928 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1a928:	defff304 	addi	sp,sp,-52
   1a92c:	dfc00c15 	stw	ra,48(sp)
   1a930:	df000b15 	stw	fp,44(sp)
   1a934:	df000b04 	addi	fp,sp,44
   1a938:	e13ffd15 	stw	r4,-12(fp)
   1a93c:	2805883a 	mov	r2,r5
   1a940:	e1bfff15 	stw	r6,-4(fp)
   1a944:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1a948:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1a94c:	e0bfff17 	ldw	r2,-4(fp)
   1a950:	1000021e 	bne	r2,zero,1a95c <OSSemDel+0x34>
        return (pevent);
   1a954:	e0bffd17 	ldw	r2,-12(fp)
   1a958:	00008806 	br	1ab7c <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1a95c:	e0bffd17 	ldw	r2,-12(fp)
   1a960:	1000051e 	bne	r2,zero,1a978 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1a964:	e0bfff17 	ldw	r2,-4(fp)
   1a968:	00c00104 	movi	r3,4
   1a96c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1a970:	e0bffd17 	ldw	r2,-12(fp)
   1a974:	00008106 	br	1ab7c <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   1a978:	e0bffd17 	ldw	r2,-12(fp)
   1a97c:	10800003 	ldbu	r2,0(r2)
   1a980:	10803fcc 	andi	r2,r2,255
   1a984:	108000e0 	cmpeqi	r2,r2,3
   1a988:	1000051e 	bne	r2,zero,1a9a0 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1a98c:	e0bfff17 	ldw	r2,-4(fp)
   1a990:	00c00044 	movi	r3,1
   1a994:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1a998:	e0bffd17 	ldw	r2,-12(fp)
   1a99c:	00007706 	br	1ab7c <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1a9a0:	008000f4 	movhi	r2,3
   1a9a4:	10a7ee04 	addi	r2,r2,-24648
   1a9a8:	10800003 	ldbu	r2,0(r2)
   1a9ac:	10803fcc 	andi	r2,r2,255
   1a9b0:	10000526 	beq	r2,zero,1a9c8 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   1a9b4:	e0bfff17 	ldw	r2,-4(fp)
   1a9b8:	00c003c4 	movi	r3,15
   1a9bc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1a9c0:	e0bffd17 	ldw	r2,-12(fp)
   1a9c4:	00006d06 	br	1ab7c <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a9c8:	0005303a 	rdctl	r2,status
   1a9cc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a9d0:	e0fff817 	ldw	r3,-32(fp)
   1a9d4:	00bfff84 	movi	r2,-2
   1a9d8:	1884703a 	and	r2,r3,r2
   1a9dc:	1001703a 	wrctl	status,r2
  
  return context;
   1a9e0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1a9e4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   1a9e8:	e0bffd17 	ldw	r2,-12(fp)
   1a9ec:	10800283 	ldbu	r2,10(r2)
   1a9f0:	10803fcc 	andi	r2,r2,255
   1a9f4:	10000326 	beq	r2,zero,1aa04 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1a9f8:	00800044 	movi	r2,1
   1a9fc:	e0bff505 	stb	r2,-44(fp)
   1aa00:	00000106 	br	1aa08 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1aa04:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   1aa08:	e0bffe03 	ldbu	r2,-8(fp)
   1aa0c:	10000326 	beq	r2,zero,1aa1c <OSSemDel+0xf4>
   1aa10:	10800060 	cmpeqi	r2,r2,1
   1aa14:	10002c1e 	bne	r2,zero,1aac8 <OSSemDel+0x1a0>
   1aa18:	00004d06 	br	1ab50 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   1aa1c:	e0bff503 	ldbu	r2,-44(fp)
   1aa20:	10001a1e 	bne	r2,zero,1aa8c <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1aa24:	e0bffd17 	ldw	r2,-12(fp)
   1aa28:	00c00fc4 	movi	r3,63
   1aa2c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   1aa30:	e0bffd17 	ldw	r2,-12(fp)
   1aa34:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1aa38:	e0bffd17 	ldw	r2,-12(fp)
   1aa3c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   1aa40:	008000f4 	movhi	r2,3
   1aa44:	10a7ed04 	addi	r2,r2,-24652
   1aa48:	10c00017 	ldw	r3,0(r2)
   1aa4c:	e0bffd17 	ldw	r2,-12(fp)
   1aa50:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   1aa54:	e0bffd17 	ldw	r2,-12(fp)
   1aa58:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   1aa5c:	008000f4 	movhi	r2,3
   1aa60:	10a7ed04 	addi	r2,r2,-24652
   1aa64:	e0fffd17 	ldw	r3,-12(fp)
   1aa68:	10c00015 	stw	r3,0(r2)
   1aa6c:	e0bff717 	ldw	r2,-36(fp)
   1aa70:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aa74:	e0bff917 	ldw	r2,-28(fp)
   1aa78:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1aa7c:	e0bfff17 	ldw	r2,-4(fp)
   1aa80:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   1aa84:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1aa88:	00003b06 	br	1ab78 <OSSemDel+0x250>
   1aa8c:	e0bff717 	ldw	r2,-36(fp)
   1aa90:	e0bffa15 	stw	r2,-24(fp)
   1aa94:	e0bffa17 	ldw	r2,-24(fp)
   1aa98:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   1aa9c:	e0bfff17 	ldw	r2,-4(fp)
   1aaa0:	00c01244 	movi	r3,73
   1aaa4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1aaa8:	e0bffd17 	ldw	r2,-12(fp)
   1aaac:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   1aab0:	00003106 	br	1ab78 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   1aab4:	e13ffd17 	ldw	r4,-12(fp)
   1aab8:	000b883a 	mov	r5,zero
   1aabc:	01800044 	movi	r6,1
   1aac0:	000f883a 	mov	r7,zero
   1aac4:	00157c40 	call	157c4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   1aac8:	e0bffd17 	ldw	r2,-12(fp)
   1aacc:	10800283 	ldbu	r2,10(r2)
   1aad0:	10803fcc 	andi	r2,r2,255
   1aad4:	103ff71e 	bne	r2,zero,1aab4 <__alt_mem_Flash_flash_data+0xf401aab4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1aad8:	e0bffd17 	ldw	r2,-12(fp)
   1aadc:	00c00fc4 	movi	r3,63
   1aae0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   1aae4:	e0bffd17 	ldw	r2,-12(fp)
   1aae8:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1aaec:	e0bffd17 	ldw	r2,-12(fp)
   1aaf0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   1aaf4:	008000f4 	movhi	r2,3
   1aaf8:	10a7ed04 	addi	r2,r2,-24652
   1aafc:	10c00017 	ldw	r3,0(r2)
   1ab00:	e0bffd17 	ldw	r2,-12(fp)
   1ab04:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1ab08:	e0bffd17 	ldw	r2,-12(fp)
   1ab0c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1ab10:	008000f4 	movhi	r2,3
   1ab14:	10a7ed04 	addi	r2,r2,-24652
   1ab18:	e0fffd17 	ldw	r3,-12(fp)
   1ab1c:	10c00015 	stw	r3,0(r2)
   1ab20:	e0bff717 	ldw	r2,-36(fp)
   1ab24:	e0bffb15 	stw	r2,-20(fp)
   1ab28:	e0bffb17 	ldw	r2,-20(fp)
   1ab2c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1ab30:	e0bff503 	ldbu	r2,-44(fp)
   1ab34:	10800058 	cmpnei	r2,r2,1
   1ab38:	1000011e 	bne	r2,zero,1ab40 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1ab3c:	00161dc0 	call	161dc <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   1ab40:	e0bfff17 	ldw	r2,-4(fp)
   1ab44:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   1ab48:	e03ff615 	stw	zero,-40(fp)
             break;
   1ab4c:	00000a06 	br	1ab78 <OSSemDel+0x250>
   1ab50:	e0bff717 	ldw	r2,-36(fp)
   1ab54:	e0bffc15 	stw	r2,-16(fp)
   1ab58:	e0bffc17 	ldw	r2,-16(fp)
   1ab5c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   1ab60:	e0bfff17 	ldw	r2,-4(fp)
   1ab64:	00c001c4 	movi	r3,7
   1ab68:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   1ab6c:	e0bffd17 	ldw	r2,-12(fp)
   1ab70:	e0bff615 	stw	r2,-40(fp)
             break;
   1ab74:	0001883a 	nop
    }
    return (pevent_return);
   1ab78:	e0bff617 	ldw	r2,-40(fp)
}
   1ab7c:	e037883a 	mov	sp,fp
   1ab80:	dfc00117 	ldw	ra,4(sp)
   1ab84:	df000017 	ldw	fp,0(sp)
   1ab88:	dec00204 	addi	sp,sp,8
   1ab8c:	f800283a 	ret

0001ab90 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1ab90:	defff504 	addi	sp,sp,-44
   1ab94:	dfc00a15 	stw	ra,40(sp)
   1ab98:	df000915 	stw	fp,36(sp)
   1ab9c:	df000904 	addi	fp,sp,36
   1aba0:	e13ffd15 	stw	r4,-12(fp)
   1aba4:	2805883a 	mov	r2,r5
   1aba8:	e1bfff15 	stw	r6,-4(fp)
   1abac:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1abb0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1abb4:	e0bfff17 	ldw	r2,-4(fp)
   1abb8:	1000011e 	bne	r2,zero,1abc0 <OSSemPend+0x30>
        return;
   1abbc:	00008906 	br	1ade4 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1abc0:	e0bffd17 	ldw	r2,-12(fp)
   1abc4:	1000041e 	bne	r2,zero,1abd8 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   1abc8:	e0bfff17 	ldw	r2,-4(fp)
   1abcc:	00c00104 	movi	r3,4
   1abd0:	10c00005 	stb	r3,0(r2)
        return;
   1abd4:	00008306 	br	1ade4 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1abd8:	e0bffd17 	ldw	r2,-12(fp)
   1abdc:	10800003 	ldbu	r2,0(r2)
   1abe0:	10803fcc 	andi	r2,r2,255
   1abe4:	108000e0 	cmpeqi	r2,r2,3
   1abe8:	1000041e 	bne	r2,zero,1abfc <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1abec:	e0bfff17 	ldw	r2,-4(fp)
   1abf0:	00c00044 	movi	r3,1
   1abf4:	10c00005 	stb	r3,0(r2)
        return;
   1abf8:	00007a06 	br	1ade4 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   1abfc:	008000f4 	movhi	r2,3
   1ac00:	10a7ee04 	addi	r2,r2,-24648
   1ac04:	10800003 	ldbu	r2,0(r2)
   1ac08:	10803fcc 	andi	r2,r2,255
   1ac0c:	10000426 	beq	r2,zero,1ac20 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   1ac10:	e0bfff17 	ldw	r2,-4(fp)
   1ac14:	00c00084 	movi	r3,2
   1ac18:	10c00005 	stb	r3,0(r2)
        return;
   1ac1c:	00007106 	br	1ade4 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   1ac20:	008000f4 	movhi	r2,3
   1ac24:	10a7e004 	addi	r2,r2,-24704
   1ac28:	10800003 	ldbu	r2,0(r2)
   1ac2c:	10803fcc 	andi	r2,r2,255
   1ac30:	10000426 	beq	r2,zero,1ac44 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   1ac34:	e0bfff17 	ldw	r2,-4(fp)
   1ac38:	00c00344 	movi	r3,13
   1ac3c:	10c00005 	stb	r3,0(r2)
        return;
   1ac40:	00006806 	br	1ade4 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ac44:	0005303a 	rdctl	r2,status
   1ac48:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ac4c:	e0fff817 	ldw	r3,-32(fp)
   1ac50:	00bfff84 	movi	r2,-2
   1ac54:	1884703a 	and	r2,r3,r2
   1ac58:	1001703a 	wrctl	status,r2
  
  return context;
   1ac5c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1ac60:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   1ac64:	e0bffd17 	ldw	r2,-12(fp)
   1ac68:	1080020b 	ldhu	r2,8(r2)
   1ac6c:	10bfffcc 	andi	r2,r2,65535
   1ac70:	10000d26 	beq	r2,zero,1aca8 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   1ac74:	e0bffd17 	ldw	r2,-12(fp)
   1ac78:	1080020b 	ldhu	r2,8(r2)
   1ac7c:	10bfffc4 	addi	r2,r2,-1
   1ac80:	1007883a 	mov	r3,r2
   1ac84:	e0bffd17 	ldw	r2,-12(fp)
   1ac88:	10c0020d 	sth	r3,8(r2)
   1ac8c:	e0bff717 	ldw	r2,-36(fp)
   1ac90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ac94:	e0bff917 	ldw	r2,-28(fp)
   1ac98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1ac9c:	e0bfff17 	ldw	r2,-4(fp)
   1aca0:	10000005 	stb	zero,0(r2)
        return;
   1aca4:	00004f06 	br	1ade4 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   1aca8:	008000f4 	movhi	r2,3
   1acac:	10a7ef04 	addi	r2,r2,-24644
   1acb0:	10c00017 	ldw	r3,0(r2)
   1acb4:	008000f4 	movhi	r2,3
   1acb8:	10a7ef04 	addi	r2,r2,-24644
   1acbc:	10800017 	ldw	r2,0(r2)
   1acc0:	10800c03 	ldbu	r2,48(r2)
   1acc4:	10800054 	ori	r2,r2,1
   1acc8:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1accc:	008000f4 	movhi	r2,3
   1acd0:	10a7ef04 	addi	r2,r2,-24644
   1acd4:	10800017 	ldw	r2,0(r2)
   1acd8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   1acdc:	008000f4 	movhi	r2,3
   1ace0:	10a7ef04 	addi	r2,r2,-24644
   1ace4:	10800017 	ldw	r2,0(r2)
   1ace8:	e0fffe0b 	ldhu	r3,-8(fp)
   1acec:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   1acf0:	e13ffd17 	ldw	r4,-12(fp)
   1acf4:	001595c0 	call	1595c <OS_EventTaskWait>
   1acf8:	e0bff717 	ldw	r2,-36(fp)
   1acfc:	e0bffa15 	stw	r2,-24(fp)
   1ad00:	e0bffa17 	ldw	r2,-24(fp)
   1ad04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   1ad08:	00161dc0 	call	161dc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ad0c:	0005303a 	rdctl	r2,status
   1ad10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ad14:	e0fffb17 	ldw	r3,-20(fp)
   1ad18:	00bfff84 	movi	r2,-2
   1ad1c:	1884703a 	and	r2,r3,r2
   1ad20:	1001703a 	wrctl	status,r2
  
  return context;
   1ad24:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   1ad28:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1ad2c:	008000f4 	movhi	r2,3
   1ad30:	10a7ef04 	addi	r2,r2,-24644
   1ad34:	10800017 	ldw	r2,0(r2)
   1ad38:	10800c43 	ldbu	r2,49(r2)
   1ad3c:	10803fcc 	andi	r2,r2,255
   1ad40:	10000326 	beq	r2,zero,1ad50 <OSSemPend+0x1c0>
   1ad44:	108000a0 	cmpeqi	r2,r2,2
   1ad48:	1000041e 	bne	r2,zero,1ad5c <OSSemPend+0x1cc>
   1ad4c:	00000706 	br	1ad6c <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   1ad50:	e0bfff17 	ldw	r2,-4(fp)
   1ad54:	10000005 	stb	zero,0(r2)
             break;
   1ad58:	00000e06 	br	1ad94 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1ad5c:	e0bfff17 	ldw	r2,-4(fp)
   1ad60:	00c00384 	movi	r3,14
   1ad64:	10c00005 	stb	r3,0(r2)
             break;
   1ad68:	00000a06 	br	1ad94 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   1ad6c:	008000f4 	movhi	r2,3
   1ad70:	10a7ef04 	addi	r2,r2,-24644
   1ad74:	10800017 	ldw	r2,0(r2)
   1ad78:	1009883a 	mov	r4,r2
   1ad7c:	e17ffd17 	ldw	r5,-12(fp)
   1ad80:	0015bb40 	call	15bb4 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1ad84:	e0bfff17 	ldw	r2,-4(fp)
   1ad88:	00c00284 	movi	r3,10
   1ad8c:	10c00005 	stb	r3,0(r2)
             break;
   1ad90:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1ad94:	008000f4 	movhi	r2,3
   1ad98:	10a7ef04 	addi	r2,r2,-24644
   1ad9c:	10800017 	ldw	r2,0(r2)
   1ada0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1ada4:	008000f4 	movhi	r2,3
   1ada8:	10a7ef04 	addi	r2,r2,-24644
   1adac:	10800017 	ldw	r2,0(r2)
   1adb0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1adb4:	008000f4 	movhi	r2,3
   1adb8:	10a7ef04 	addi	r2,r2,-24644
   1adbc:	10800017 	ldw	r2,0(r2)
   1adc0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1adc4:	008000f4 	movhi	r2,3
   1adc8:	10a7ef04 	addi	r2,r2,-24644
   1adcc:	10800017 	ldw	r2,0(r2)
   1add0:	10000815 	stw	zero,32(r2)
   1add4:	e0bff717 	ldw	r2,-36(fp)
   1add8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1addc:	e0bffc17 	ldw	r2,-16(fp)
   1ade0:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   1ade4:	e037883a 	mov	sp,fp
   1ade8:	dfc00117 	ldw	ra,4(sp)
   1adec:	df000017 	ldw	fp,0(sp)
   1adf0:	dec00204 	addi	sp,sp,8
   1adf4:	f800283a 	ret

0001adf8 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1adf8:	defff604 	addi	sp,sp,-40
   1adfc:	dfc00915 	stw	ra,36(sp)
   1ae00:	df000815 	stw	fp,32(sp)
   1ae04:	df000804 	addi	fp,sp,32
   1ae08:	e13ffd15 	stw	r4,-12(fp)
   1ae0c:	2805883a 	mov	r2,r5
   1ae10:	e1bfff15 	stw	r6,-4(fp)
   1ae14:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1ae18:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1ae1c:	e0bfff17 	ldw	r2,-4(fp)
   1ae20:	1000021e 	bne	r2,zero,1ae2c <OSSemPendAbort+0x34>
        return (0);
   1ae24:	0005883a 	mov	r2,zero
   1ae28:	00004906 	br	1af50 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1ae2c:	e0bffd17 	ldw	r2,-12(fp)
   1ae30:	1000051e 	bne	r2,zero,1ae48 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1ae34:	e0bfff17 	ldw	r2,-4(fp)
   1ae38:	00c00104 	movi	r3,4
   1ae3c:	10c00005 	stb	r3,0(r2)
        return (0);
   1ae40:	0005883a 	mov	r2,zero
   1ae44:	00004206 	br	1af50 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1ae48:	e0bffd17 	ldw	r2,-12(fp)
   1ae4c:	10800003 	ldbu	r2,0(r2)
   1ae50:	10803fcc 	andi	r2,r2,255
   1ae54:	108000e0 	cmpeqi	r2,r2,3
   1ae58:	1000051e 	bne	r2,zero,1ae70 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1ae5c:	e0bfff17 	ldw	r2,-4(fp)
   1ae60:	00c00044 	movi	r3,1
   1ae64:	10c00005 	stb	r3,0(r2)
        return (0);
   1ae68:	0005883a 	mov	r2,zero
   1ae6c:	00003806 	br	1af50 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ae70:	0005303a 	rdctl	r2,status
   1ae74:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ae78:	e0fffa17 	ldw	r3,-24(fp)
   1ae7c:	00bfff84 	movi	r2,-2
   1ae80:	1884703a 	and	r2,r3,r2
   1ae84:	1001703a 	wrctl	status,r2
  
  return context;
   1ae88:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1ae8c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   1ae90:	e0bffd17 	ldw	r2,-12(fp)
   1ae94:	10800283 	ldbu	r2,10(r2)
   1ae98:	10803fcc 	andi	r2,r2,255
   1ae9c:	10002526 	beq	r2,zero,1af34 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   1aea0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1aea4:	e0bffe03 	ldbu	r2,-8(fp)
   1aea8:	10800060 	cmpeqi	r2,r2,1
   1aeac:	10000e26 	beq	r2,zero,1aee8 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1aeb0:	00000806 	br	1aed4 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1aeb4:	e13ffd17 	ldw	r4,-12(fp)
   1aeb8:	000b883a 	mov	r5,zero
   1aebc:	01800044 	movi	r6,1
   1aec0:	01c00084 	movi	r7,2
   1aec4:	00157c40 	call	157c4 <OS_EventTaskRdy>
                     nbr_tasks++;
   1aec8:	e0bff803 	ldbu	r2,-32(fp)
   1aecc:	10800044 	addi	r2,r2,1
   1aed0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1aed4:	e0bffd17 	ldw	r2,-12(fp)
   1aed8:	10800283 	ldbu	r2,10(r2)
   1aedc:	10803fcc 	andi	r2,r2,255
   1aee0:	103ff41e 	bne	r2,zero,1aeb4 <__alt_mem_Flash_flash_data+0xf401aeb4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1aee4:	00000906 	br	1af0c <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1aee8:	e13ffd17 	ldw	r4,-12(fp)
   1aeec:	000b883a 	mov	r5,zero
   1aef0:	01800044 	movi	r6,1
   1aef4:	01c00084 	movi	r7,2
   1aef8:	00157c40 	call	157c4 <OS_EventTaskRdy>
                 nbr_tasks++;
   1aefc:	e0bff803 	ldbu	r2,-32(fp)
   1af00:	10800044 	addi	r2,r2,1
   1af04:	e0bff805 	stb	r2,-32(fp)
                 break;
   1af08:	0001883a 	nop
   1af0c:	e0bff917 	ldw	r2,-28(fp)
   1af10:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1af14:	e0bffb17 	ldw	r2,-20(fp)
   1af18:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   1af1c:	00161dc0 	call	161dc <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1af20:	e0bfff17 	ldw	r2,-4(fp)
   1af24:	00c00384 	movi	r3,14
   1af28:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1af2c:	e0bff803 	ldbu	r2,-32(fp)
   1af30:	00000706 	br	1af50 <OSSemPendAbort+0x158>
   1af34:	e0bff917 	ldw	r2,-28(fp)
   1af38:	e0bffc15 	stw	r2,-16(fp)
   1af3c:	e0bffc17 	ldw	r2,-16(fp)
   1af40:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1af44:	e0bfff17 	ldw	r2,-4(fp)
   1af48:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   1af4c:	0005883a 	mov	r2,zero
}
   1af50:	e037883a 	mov	sp,fp
   1af54:	dfc00117 	ldw	ra,4(sp)
   1af58:	df000017 	ldw	fp,0(sp)
   1af5c:	dec00204 	addi	sp,sp,8
   1af60:	f800283a 	ret

0001af64 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   1af64:	defff804 	addi	sp,sp,-32
   1af68:	dfc00715 	stw	ra,28(sp)
   1af6c:	df000615 	stw	fp,24(sp)
   1af70:	df000604 	addi	fp,sp,24
   1af74:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1af78:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1af7c:	e0bfff17 	ldw	r2,-4(fp)
   1af80:	1000021e 	bne	r2,zero,1af8c <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   1af84:	00800104 	movi	r2,4
   1af88:	00003506 	br	1b060 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1af8c:	e0bfff17 	ldw	r2,-4(fp)
   1af90:	10800003 	ldbu	r2,0(r2)
   1af94:	10803fcc 	andi	r2,r2,255
   1af98:	108000e0 	cmpeqi	r2,r2,3
   1af9c:	1000021e 	bne	r2,zero,1afa8 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   1afa0:	00800044 	movi	r2,1
   1afa4:	00002e06 	br	1b060 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1afa8:	0005303a 	rdctl	r2,status
   1afac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1afb0:	e0fffb17 	ldw	r3,-20(fp)
   1afb4:	00bfff84 	movi	r2,-2
   1afb8:	1884703a 	and	r2,r3,r2
   1afbc:	1001703a 	wrctl	status,r2
  
  return context;
   1afc0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1afc4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   1afc8:	e0bfff17 	ldw	r2,-4(fp)
   1afcc:	10800283 	ldbu	r2,10(r2)
   1afd0:	10803fcc 	andi	r2,r2,255
   1afd4:	10000c26 	beq	r2,zero,1b008 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   1afd8:	e13fff17 	ldw	r4,-4(fp)
   1afdc:	000b883a 	mov	r5,zero
   1afe0:	01800044 	movi	r6,1
   1afe4:	000f883a 	mov	r7,zero
   1afe8:	00157c40 	call	157c4 <OS_EventTaskRdy>
   1afec:	e0bffa17 	ldw	r2,-24(fp)
   1aff0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aff4:	e0bffc17 	ldw	r2,-16(fp)
   1aff8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   1affc:	00161dc0 	call	161dc <OS_Sched>
        return (OS_ERR_NONE);
   1b000:	0005883a 	mov	r2,zero
   1b004:	00001606 	br	1b060 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   1b008:	e0bfff17 	ldw	r2,-4(fp)
   1b00c:	1080020b 	ldhu	r2,8(r2)
   1b010:	10ffffcc 	andi	r3,r2,65535
   1b014:	00bfffd4 	movui	r2,65535
   1b018:	18800c26 	beq	r3,r2,1b04c <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   1b01c:	e0bfff17 	ldw	r2,-4(fp)
   1b020:	1080020b 	ldhu	r2,8(r2)
   1b024:	10800044 	addi	r2,r2,1
   1b028:	1007883a 	mov	r3,r2
   1b02c:	e0bfff17 	ldw	r2,-4(fp)
   1b030:	10c0020d 	sth	r3,8(r2)
   1b034:	e0bffa17 	ldw	r2,-24(fp)
   1b038:	e0bffd15 	stw	r2,-12(fp)
   1b03c:	e0bffd17 	ldw	r2,-12(fp)
   1b040:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1b044:	0005883a 	mov	r2,zero
   1b048:	00000506 	br	1b060 <OSSemPost+0xfc>
   1b04c:	e0bffa17 	ldw	r2,-24(fp)
   1b050:	e0bffe15 	stw	r2,-8(fp)
   1b054:	e0bffe17 	ldw	r2,-8(fp)
   1b058:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   1b05c:	00800c84 	movi	r2,50
}
   1b060:	e037883a 	mov	sp,fp
   1b064:	dfc00117 	ldw	ra,4(sp)
   1b068:	df000017 	ldw	fp,0(sp)
   1b06c:	dec00204 	addi	sp,sp,8
   1b070:	f800283a 	ret

0001b074 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   1b074:	defff704 	addi	sp,sp,-36
   1b078:	df000815 	stw	fp,32(sp)
   1b07c:	df000804 	addi	fp,sp,32
   1b080:	e13ffe15 	stw	r4,-8(fp)
   1b084:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1b088:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1b08c:	e0bffe17 	ldw	r2,-8(fp)
   1b090:	1000021e 	bne	r2,zero,1b09c <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1b094:	00800104 	movi	r2,4
   1b098:	00003606 	br	1b174 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   1b09c:	e0bfff17 	ldw	r2,-4(fp)
   1b0a0:	1000021e 	bne	r2,zero,1b0ac <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1b0a4:	00800244 	movi	r2,9
   1b0a8:	00003206 	br	1b174 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   1b0ac:	e0bffe17 	ldw	r2,-8(fp)
   1b0b0:	10800003 	ldbu	r2,0(r2)
   1b0b4:	10803fcc 	andi	r2,r2,255
   1b0b8:	108000e0 	cmpeqi	r2,r2,3
   1b0bc:	1000021e 	bne	r2,zero,1b0c8 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1b0c0:	00800044 	movi	r2,1
   1b0c4:	00002b06 	br	1b174 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b0c8:	0005303a 	rdctl	r2,status
   1b0cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b0d0:	e0fffc17 	ldw	r3,-16(fp)
   1b0d4:	00bfff84 	movi	r2,-2
   1b0d8:	1884703a 	and	r2,r3,r2
   1b0dc:	1001703a 	wrctl	status,r2
  
  return context;
   1b0e0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1b0e4:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   1b0e8:	e0bffe17 	ldw	r2,-8(fp)
   1b0ec:	10c00283 	ldbu	r3,10(r2)
   1b0f0:	e0bfff17 	ldw	r2,-4(fp)
   1b0f4:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   1b0f8:	e0bffe17 	ldw	r2,-8(fp)
   1b0fc:	108002c4 	addi	r2,r2,11
   1b100:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   1b104:	e0bfff17 	ldw	r2,-4(fp)
   1b108:	10800084 	addi	r2,r2,2
   1b10c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1b110:	e03ffa05 	stb	zero,-24(fp)
   1b114:	00000b06 	br	1b144 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   1b118:	e0bff917 	ldw	r2,-28(fp)
   1b11c:	10c00044 	addi	r3,r2,1
   1b120:	e0fff915 	stw	r3,-28(fp)
   1b124:	e0fff817 	ldw	r3,-32(fp)
   1b128:	19000044 	addi	r4,r3,1
   1b12c:	e13ff815 	stw	r4,-32(fp)
   1b130:	18c00003 	ldbu	r3,0(r3)
   1b134:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1b138:	e0bffa03 	ldbu	r2,-24(fp)
   1b13c:	10800044 	addi	r2,r2,1
   1b140:	e0bffa05 	stb	r2,-24(fp)
   1b144:	e0bffa03 	ldbu	r2,-24(fp)
   1b148:	108000f0 	cmpltui	r2,r2,3
   1b14c:	103ff21e 	bne	r2,zero,1b118 <__alt_mem_Flash_flash_data+0xf401b118>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   1b150:	e0bffe17 	ldw	r2,-8(fp)
   1b154:	10c0020b 	ldhu	r3,8(r2)
   1b158:	e0bfff17 	ldw	r2,-4(fp)
   1b15c:	10c0000d 	sth	r3,0(r2)
   1b160:	e0bffb17 	ldw	r2,-20(fp)
   1b164:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b168:	e0bffd17 	ldw	r2,-12(fp)
   1b16c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1b170:	0005883a 	mov	r2,zero
}
   1b174:	e037883a 	mov	sp,fp
   1b178:	df000017 	ldw	fp,0(sp)
   1b17c:	dec00104 	addi	sp,sp,4
   1b180:	f800283a 	ret

0001b184 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   1b184:	defff904 	addi	sp,sp,-28
   1b188:	df000615 	stw	fp,24(sp)
   1b18c:	df000604 	addi	fp,sp,24
   1b190:	e13ffd15 	stw	r4,-12(fp)
   1b194:	2805883a 	mov	r2,r5
   1b198:	e1bfff15 	stw	r6,-4(fp)
   1b19c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1b1a0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1b1a4:	e0bfff17 	ldw	r2,-4(fp)
   1b1a8:	1000011e 	bne	r2,zero,1b1b0 <OSSemSet+0x2c>
        return;
   1b1ac:	00003006 	br	1b270 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1b1b0:	e0bffd17 	ldw	r2,-12(fp)
   1b1b4:	1000041e 	bne	r2,zero,1b1c8 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   1b1b8:	e0bfff17 	ldw	r2,-4(fp)
   1b1bc:	00c00104 	movi	r3,4
   1b1c0:	10c00005 	stb	r3,0(r2)
        return;
   1b1c4:	00002a06 	br	1b270 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1b1c8:	e0bffd17 	ldw	r2,-12(fp)
   1b1cc:	10800003 	ldbu	r2,0(r2)
   1b1d0:	10803fcc 	andi	r2,r2,255
   1b1d4:	108000e0 	cmpeqi	r2,r2,3
   1b1d8:	1000041e 	bne	r2,zero,1b1ec <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   1b1dc:	e0bfff17 	ldw	r2,-4(fp)
   1b1e0:	00c00044 	movi	r3,1
   1b1e4:	10c00005 	stb	r3,0(r2)
        return;
   1b1e8:	00002106 	br	1b270 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b1ec:	0005303a 	rdctl	r2,status
   1b1f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b1f4:	e0fffb17 	ldw	r3,-20(fp)
   1b1f8:	00bfff84 	movi	r2,-2
   1b1fc:	1884703a 	and	r2,r3,r2
   1b200:	1001703a 	wrctl	status,r2
  
  return context;
   1b204:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1b208:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   1b20c:	e0bfff17 	ldw	r2,-4(fp)
   1b210:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   1b214:	e0bffd17 	ldw	r2,-12(fp)
   1b218:	1080020b 	ldhu	r2,8(r2)
   1b21c:	10bfffcc 	andi	r2,r2,65535
   1b220:	10000426 	beq	r2,zero,1b234 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   1b224:	e0bffd17 	ldw	r2,-12(fp)
   1b228:	e0fffe0b 	ldhu	r3,-8(fp)
   1b22c:	10c0020d 	sth	r3,8(r2)
   1b230:	00000b06 	br	1b260 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   1b234:	e0bffd17 	ldw	r2,-12(fp)
   1b238:	10800283 	ldbu	r2,10(r2)
   1b23c:	10803fcc 	andi	r2,r2,255
   1b240:	1000041e 	bne	r2,zero,1b254 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   1b244:	e0bffd17 	ldw	r2,-12(fp)
   1b248:	e0fffe0b 	ldhu	r3,-8(fp)
   1b24c:	10c0020d 	sth	r3,8(r2)
   1b250:	00000306 	br	1b260 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   1b254:	e0bfff17 	ldw	r2,-4(fp)
   1b258:	00c01244 	movi	r3,73
   1b25c:	10c00005 	stb	r3,0(r2)
   1b260:	e0bffa17 	ldw	r2,-24(fp)
   1b264:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b268:	e0bffc17 	ldw	r2,-16(fp)
   1b26c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   1b270:	e037883a 	mov	sp,fp
   1b274:	df000017 	ldw	fp,0(sp)
   1b278:	dec00104 	addi	sp,sp,4
   1b27c:	f800283a 	ret

0001b280 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   1b280:	defff104 	addi	sp,sp,-60
   1b284:	dfc00e15 	stw	ra,56(sp)
   1b288:	df000d15 	stw	fp,52(sp)
   1b28c:	df000d04 	addi	fp,sp,52
   1b290:	2007883a 	mov	r3,r4
   1b294:	2805883a 	mov	r2,r5
   1b298:	e0fffe05 	stb	r3,-8(fp)
   1b29c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   1b2a0:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   1b2a4:	e0bffe03 	ldbu	r2,-8(fp)
   1b2a8:	10800530 	cmpltui	r2,r2,20
   1b2ac:	1000051e 	bne	r2,zero,1b2c4 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   1b2b0:	e0bffe03 	ldbu	r2,-8(fp)
   1b2b4:	10803fe0 	cmpeqi	r2,r2,255
   1b2b8:	1000021e 	bne	r2,zero,1b2c4 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   1b2bc:	00800a84 	movi	r2,42
   1b2c0:	00013a06 	br	1b7ac <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   1b2c4:	e0bfff03 	ldbu	r2,-4(fp)
   1b2c8:	10800530 	cmpltui	r2,r2,20
   1b2cc:	1000021e 	bne	r2,zero,1b2d8 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   1b2d0:	00800a84 	movi	r2,42
   1b2d4:	00013506 	br	1b7ac <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b2d8:	0005303a 	rdctl	r2,status
   1b2dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b2e0:	e0fff917 	ldw	r3,-28(fp)
   1b2e4:	00bfff84 	movi	r2,-2
   1b2e8:	1884703a 	and	r2,r3,r2
   1b2ec:	1001703a 	wrctl	status,r2
  
  return context;
   1b2f0:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1b2f4:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   1b2f8:	e0ffff03 	ldbu	r3,-4(fp)
   1b2fc:	00800174 	movhi	r2,5
   1b300:	10bcb704 	addi	r2,r2,-3364
   1b304:	18c7883a 	add	r3,r3,r3
   1b308:	18c7883a 	add	r3,r3,r3
   1b30c:	10c5883a 	add	r2,r2,r3
   1b310:	10800017 	ldw	r2,0(r2)
   1b314:	10000626 	beq	r2,zero,1b330 <OSTaskChangePrio+0xb0>
   1b318:	e0bff517 	ldw	r2,-44(fp)
   1b31c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b320:	e0bffa17 	ldw	r2,-24(fp)
   1b324:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   1b328:	00800a04 	movi	r2,40
   1b32c:	00011f06 	br	1b7ac <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   1b330:	e0bffe03 	ldbu	r2,-8(fp)
   1b334:	10803fd8 	cmpnei	r2,r2,255
   1b338:	1000051e 	bne	r2,zero,1b350 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   1b33c:	008000f4 	movhi	r2,3
   1b340:	10a7ef04 	addi	r2,r2,-24644
   1b344:	10800017 	ldw	r2,0(r2)
   1b348:	10800c83 	ldbu	r2,50(r2)
   1b34c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   1b350:	e0fffe03 	ldbu	r3,-8(fp)
   1b354:	00800174 	movhi	r2,5
   1b358:	10bcb704 	addi	r2,r2,-3364
   1b35c:	18c7883a 	add	r3,r3,r3
   1b360:	18c7883a 	add	r3,r3,r3
   1b364:	10c5883a 	add	r2,r2,r3
   1b368:	10800017 	ldw	r2,0(r2)
   1b36c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   1b370:	e0bff617 	ldw	r2,-40(fp)
   1b374:	1000061e 	bne	r2,zero,1b390 <OSTaskChangePrio+0x110>
   1b378:	e0bff517 	ldw	r2,-44(fp)
   1b37c:	e0bffb15 	stw	r2,-20(fp)
   1b380:	e0bffb17 	ldw	r2,-20(fp)
   1b384:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   1b388:	00800a44 	movi	r2,41
   1b38c:	00010706 	br	1b7ac <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   1b390:	e0bff617 	ldw	r2,-40(fp)
   1b394:	10800058 	cmpnei	r2,r2,1
   1b398:	1000061e 	bne	r2,zero,1b3b4 <OSTaskChangePrio+0x134>
   1b39c:	e0bff517 	ldw	r2,-44(fp)
   1b3a0:	e0bffc15 	stw	r2,-16(fp)
   1b3a4:	e0bffc17 	ldw	r2,-16(fp)
   1b3a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   1b3ac:	008010c4 	movi	r2,67
   1b3b0:	0000fe06 	br	1b7ac <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   1b3b4:	e0bfff03 	ldbu	r2,-4(fp)
   1b3b8:	1004d0fa 	srli	r2,r2,3
   1b3bc:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   1b3c0:	e0bfff03 	ldbu	r2,-4(fp)
   1b3c4:	108001cc 	andi	r2,r2,7
   1b3c8:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   1b3cc:	e0bff703 	ldbu	r2,-36(fp)
   1b3d0:	00c00044 	movi	r3,1
   1b3d4:	1884983a 	sll	r2,r3,r2
   1b3d8:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   1b3dc:	e0bff743 	ldbu	r2,-35(fp)
   1b3e0:	00c00044 	movi	r3,1
   1b3e4:	1884983a 	sll	r2,r3,r2
   1b3e8:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   1b3ec:	e0fffe03 	ldbu	r3,-8(fp)
   1b3f0:	00800174 	movhi	r2,5
   1b3f4:	10bcb704 	addi	r2,r2,-3364
   1b3f8:	18c7883a 	add	r3,r3,r3
   1b3fc:	18c7883a 	add	r3,r3,r3
   1b400:	10c5883a 	add	r2,r2,r3
   1b404:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   1b408:	e0ffff03 	ldbu	r3,-4(fp)
   1b40c:	00800174 	movhi	r2,5
   1b410:	10bcb704 	addi	r2,r2,-3364
   1b414:	18c7883a 	add	r3,r3,r3
   1b418:	18c7883a 	add	r3,r3,r3
   1b41c:	10c5883a 	add	r2,r2,r3
   1b420:	e0fff617 	ldw	r3,-40(fp)
   1b424:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   1b428:	e0bff617 	ldw	r2,-40(fp)
   1b42c:	10800d03 	ldbu	r2,52(r2)
   1b430:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   1b434:	e0bff617 	ldw	r2,-40(fp)
   1b438:	10800d83 	ldbu	r2,54(r2)
   1b43c:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   1b440:	e0bff617 	ldw	r2,-40(fp)
   1b444:	10800d43 	ldbu	r2,53(r2)
   1b448:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   1b44c:	e0fff803 	ldbu	r3,-32(fp)
   1b450:	008000f4 	movhi	r2,3
   1b454:	10a7ec44 	addi	r2,r2,-24655
   1b458:	10c5883a 	add	r2,r2,r3
   1b45c:	10c00003 	ldbu	r3,0(r2)
   1b460:	e0bff883 	ldbu	r2,-30(fp)
   1b464:	1884703a 	and	r2,r3,r2
   1b468:	10803fcc 	andi	r2,r2,255
   1b46c:	10003726 	beq	r2,zero,1b54c <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   1b470:	e0fff803 	ldbu	r3,-32(fp)
   1b474:	e13ff803 	ldbu	r4,-32(fp)
   1b478:	008000f4 	movhi	r2,3
   1b47c:	10a7ec44 	addi	r2,r2,-24655
   1b480:	1105883a 	add	r2,r2,r4
   1b484:	10800003 	ldbu	r2,0(r2)
   1b488:	1009883a 	mov	r4,r2
   1b48c:	e0bff883 	ldbu	r2,-30(fp)
   1b490:	0084303a 	nor	r2,zero,r2
   1b494:	2084703a 	and	r2,r4,r2
   1b498:	1009883a 	mov	r4,r2
   1b49c:	008000f4 	movhi	r2,3
   1b4a0:	10a7ec44 	addi	r2,r2,-24655
   1b4a4:	10c5883a 	add	r2,r2,r3
   1b4a8:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   1b4ac:	e0fff803 	ldbu	r3,-32(fp)
   1b4b0:	008000f4 	movhi	r2,3
   1b4b4:	10a7ec44 	addi	r2,r2,-24655
   1b4b8:	10c5883a 	add	r2,r2,r3
   1b4bc:	10800003 	ldbu	r2,0(r2)
   1b4c0:	10803fcc 	andi	r2,r2,255
   1b4c4:	10000b1e 	bne	r2,zero,1b4f4 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   1b4c8:	e0bff843 	ldbu	r2,-31(fp)
   1b4cc:	0084303a 	nor	r2,zero,r2
   1b4d0:	1007883a 	mov	r3,r2
   1b4d4:	008000f4 	movhi	r2,3
   1b4d8:	10a7ec04 	addi	r2,r2,-24656
   1b4dc:	10800003 	ldbu	r2,0(r2)
   1b4e0:	1884703a 	and	r2,r3,r2
   1b4e4:	1007883a 	mov	r3,r2
   1b4e8:	008000f4 	movhi	r2,3
   1b4ec:	10a7ec04 	addi	r2,r2,-24656
   1b4f0:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   1b4f4:	008000f4 	movhi	r2,3
   1b4f8:	10a7ec04 	addi	r2,r2,-24656
   1b4fc:	10c00003 	ldbu	r3,0(r2)
   1b500:	e0bff783 	ldbu	r2,-34(fp)
   1b504:	1884b03a 	or	r2,r3,r2
   1b508:	1007883a 	mov	r3,r2
   1b50c:	008000f4 	movhi	r2,3
   1b510:	10a7ec04 	addi	r2,r2,-24656
   1b514:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   1b518:	e0fff703 	ldbu	r3,-36(fp)
   1b51c:	e13ff703 	ldbu	r4,-36(fp)
   1b520:	008000f4 	movhi	r2,3
   1b524:	10a7ec44 	addi	r2,r2,-24655
   1b528:	1105883a 	add	r2,r2,r4
   1b52c:	11000003 	ldbu	r4,0(r2)
   1b530:	e0bff7c3 	ldbu	r2,-33(fp)
   1b534:	2084b03a 	or	r2,r4,r2
   1b538:	1009883a 	mov	r4,r2
   1b53c:	008000f4 	movhi	r2,3
   1b540:	10a7ec44 	addi	r2,r2,-24655
   1b544:	10c5883a 	add	r2,r2,r3
   1b548:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   1b54c:	e0bff617 	ldw	r2,-40(fp)
   1b550:	10800717 	ldw	r2,28(r2)
   1b554:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   1b558:	e0bff317 	ldw	r2,-52(fp)
   1b55c:	10003326 	beq	r2,zero,1b62c <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   1b560:	e0bff803 	ldbu	r2,-32(fp)
   1b564:	e0fff803 	ldbu	r3,-32(fp)
   1b568:	e13ff317 	ldw	r4,-52(fp)
   1b56c:	20c7883a 	add	r3,r4,r3
   1b570:	18c00204 	addi	r3,r3,8
   1b574:	18c000c3 	ldbu	r3,3(r3)
   1b578:	1809883a 	mov	r4,r3
   1b57c:	e0fff883 	ldbu	r3,-30(fp)
   1b580:	00c6303a 	nor	r3,zero,r3
   1b584:	20c6703a 	and	r3,r4,r3
   1b588:	1809883a 	mov	r4,r3
   1b58c:	e0fff317 	ldw	r3,-52(fp)
   1b590:	1885883a 	add	r2,r3,r2
   1b594:	10800204 	addi	r2,r2,8
   1b598:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   1b59c:	e0bff803 	ldbu	r2,-32(fp)
   1b5a0:	e0fff317 	ldw	r3,-52(fp)
   1b5a4:	1885883a 	add	r2,r3,r2
   1b5a8:	10800204 	addi	r2,r2,8
   1b5ac:	108000c3 	ldbu	r2,3(r2)
   1b5b0:	10803fcc 	andi	r2,r2,255
   1b5b4:	1000091e 	bne	r2,zero,1b5dc <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   1b5b8:	e0bff317 	ldw	r2,-52(fp)
   1b5bc:	10800283 	ldbu	r2,10(r2)
   1b5c0:	1007883a 	mov	r3,r2
   1b5c4:	e0bff843 	ldbu	r2,-31(fp)
   1b5c8:	0084303a 	nor	r2,zero,r2
   1b5cc:	1884703a 	and	r2,r3,r2
   1b5d0:	1007883a 	mov	r3,r2
   1b5d4:	e0bff317 	ldw	r2,-52(fp)
   1b5d8:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   1b5dc:	e0bff317 	ldw	r2,-52(fp)
   1b5e0:	10c00283 	ldbu	r3,10(r2)
   1b5e4:	e0bff783 	ldbu	r2,-34(fp)
   1b5e8:	1884b03a 	or	r2,r3,r2
   1b5ec:	1007883a 	mov	r3,r2
   1b5f0:	e0bff317 	ldw	r2,-52(fp)
   1b5f4:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   1b5f8:	e0bff703 	ldbu	r2,-36(fp)
   1b5fc:	e0fff703 	ldbu	r3,-36(fp)
   1b600:	e13ff317 	ldw	r4,-52(fp)
   1b604:	20c7883a 	add	r3,r4,r3
   1b608:	18c00204 	addi	r3,r3,8
   1b60c:	190000c3 	ldbu	r4,3(r3)
   1b610:	e0fff7c3 	ldbu	r3,-33(fp)
   1b614:	20c6b03a 	or	r3,r4,r3
   1b618:	1809883a 	mov	r4,r3
   1b61c:	e0fff317 	ldw	r3,-52(fp)
   1b620:	1885883a 	add	r2,r3,r2
   1b624:	10800204 	addi	r2,r2,8
   1b628:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   1b62c:	e0bff617 	ldw	r2,-40(fp)
   1b630:	10800817 	ldw	r2,32(r2)
   1b634:	10004226 	beq	r2,zero,1b740 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   1b638:	e0bff617 	ldw	r2,-40(fp)
   1b63c:	10800817 	ldw	r2,32(r2)
   1b640:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   1b644:	e0bff417 	ldw	r2,-48(fp)
   1b648:	10800017 	ldw	r2,0(r2)
   1b64c:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   1b650:	00003906 	br	1b738 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   1b654:	e0bff803 	ldbu	r2,-32(fp)
   1b658:	e0fff803 	ldbu	r3,-32(fp)
   1b65c:	e13ff317 	ldw	r4,-52(fp)
   1b660:	20c7883a 	add	r3,r4,r3
   1b664:	18c00204 	addi	r3,r3,8
   1b668:	18c000c3 	ldbu	r3,3(r3)
   1b66c:	1809883a 	mov	r4,r3
   1b670:	e0fff883 	ldbu	r3,-30(fp)
   1b674:	00c6303a 	nor	r3,zero,r3
   1b678:	20c6703a 	and	r3,r4,r3
   1b67c:	1809883a 	mov	r4,r3
   1b680:	e0fff317 	ldw	r3,-52(fp)
   1b684:	1885883a 	add	r2,r3,r2
   1b688:	10800204 	addi	r2,r2,8
   1b68c:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   1b690:	e0bff803 	ldbu	r2,-32(fp)
   1b694:	e0fff317 	ldw	r3,-52(fp)
   1b698:	1885883a 	add	r2,r3,r2
   1b69c:	10800204 	addi	r2,r2,8
   1b6a0:	108000c3 	ldbu	r2,3(r2)
   1b6a4:	10803fcc 	andi	r2,r2,255
   1b6a8:	1000091e 	bne	r2,zero,1b6d0 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   1b6ac:	e0bff317 	ldw	r2,-52(fp)
   1b6b0:	10800283 	ldbu	r2,10(r2)
   1b6b4:	1007883a 	mov	r3,r2
   1b6b8:	e0bff843 	ldbu	r2,-31(fp)
   1b6bc:	0084303a 	nor	r2,zero,r2
   1b6c0:	1884703a 	and	r2,r3,r2
   1b6c4:	1007883a 	mov	r3,r2
   1b6c8:	e0bff317 	ldw	r2,-52(fp)
   1b6cc:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   1b6d0:	e0bff317 	ldw	r2,-52(fp)
   1b6d4:	10c00283 	ldbu	r3,10(r2)
   1b6d8:	e0bff783 	ldbu	r2,-34(fp)
   1b6dc:	1884b03a 	or	r2,r3,r2
   1b6e0:	1007883a 	mov	r3,r2
   1b6e4:	e0bff317 	ldw	r2,-52(fp)
   1b6e8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   1b6ec:	e0bff703 	ldbu	r2,-36(fp)
   1b6f0:	e0fff703 	ldbu	r3,-36(fp)
   1b6f4:	e13ff317 	ldw	r4,-52(fp)
   1b6f8:	20c7883a 	add	r3,r4,r3
   1b6fc:	18c00204 	addi	r3,r3,8
   1b700:	190000c3 	ldbu	r4,3(r3)
   1b704:	e0fff7c3 	ldbu	r3,-33(fp)
   1b708:	20c6b03a 	or	r3,r4,r3
   1b70c:	1809883a 	mov	r4,r3
   1b710:	e0fff317 	ldw	r3,-52(fp)
   1b714:	1885883a 	add	r2,r3,r2
   1b718:	10800204 	addi	r2,r2,8
   1b71c:	110000c5 	stb	r4,3(r2)
            pevents++;
   1b720:	e0bff417 	ldw	r2,-48(fp)
   1b724:	10800104 	addi	r2,r2,4
   1b728:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   1b72c:	e0bff417 	ldw	r2,-48(fp)
   1b730:	10800017 	ldw	r2,0(r2)
   1b734:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   1b738:	e0bff317 	ldw	r2,-52(fp)
   1b73c:	103fc51e 	bne	r2,zero,1b654 <__alt_mem_Flash_flash_data+0xf401b654>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   1b740:	e0bff617 	ldw	r2,-40(fp)
   1b744:	e0ffff03 	ldbu	r3,-4(fp)
   1b748:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   1b74c:	e0bff617 	ldw	r2,-40(fp)
   1b750:	e0fff703 	ldbu	r3,-36(fp)
   1b754:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   1b758:	e0bff617 	ldw	r2,-40(fp)
   1b75c:	e0fff743 	ldbu	r3,-35(fp)
   1b760:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   1b764:	e0bff617 	ldw	r2,-40(fp)
   1b768:	e0fff783 	ldbu	r3,-34(fp)
   1b76c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   1b770:	e0bff617 	ldw	r2,-40(fp)
   1b774:	e0fff7c3 	ldbu	r3,-33(fp)
   1b778:	10c00d45 	stb	r3,53(r2)
   1b77c:	e0bff517 	ldw	r2,-44(fp)
   1b780:	e0bffd15 	stw	r2,-12(fp)
   1b784:	e0bffd17 	ldw	r2,-12(fp)
   1b788:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1b78c:	008000f4 	movhi	r2,3
   1b790:	10a7e044 	addi	r2,r2,-24703
   1b794:	10800003 	ldbu	r2,0(r2)
   1b798:	10803fcc 	andi	r2,r2,255
   1b79c:	10800058 	cmpnei	r2,r2,1
   1b7a0:	1000011e 	bne	r2,zero,1b7a8 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   1b7a4:	00161dc0 	call	161dc <OS_Sched>
    }
    return (OS_ERR_NONE);
   1b7a8:	0005883a 	mov	r2,zero
}
   1b7ac:	e037883a 	mov	sp,fp
   1b7b0:	dfc00117 	ldw	ra,4(sp)
   1b7b4:	df000017 	ldw	fp,0(sp)
   1b7b8:	dec00204 	addi	sp,sp,8
   1b7bc:	f800283a 	ret

0001b7c0 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   1b7c0:	deffee04 	addi	sp,sp,-72
   1b7c4:	dfc01115 	stw	ra,68(sp)
   1b7c8:	df001015 	stw	fp,64(sp)
   1b7cc:	df001004 	addi	fp,sp,64
   1b7d0:	e13ffc15 	stw	r4,-16(fp)
   1b7d4:	e17ffd15 	stw	r5,-12(fp)
   1b7d8:	e1bffe15 	stw	r6,-8(fp)
   1b7dc:	3805883a 	mov	r2,r7
   1b7e0:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1b7e4:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1b7e8:	e0bfff03 	ldbu	r2,-4(fp)
   1b7ec:	10800570 	cmpltui	r2,r2,21
   1b7f0:	1000021e 	bne	r2,zero,1b7fc <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   1b7f4:	00800a84 	movi	r2,42
   1b7f8:	00005b06 	br	1b968 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b7fc:	0005303a 	rdctl	r2,status
   1b800:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b804:	e0fff617 	ldw	r3,-40(fp)
   1b808:	00bfff84 	movi	r2,-2
   1b80c:	1884703a 	and	r2,r3,r2
   1b810:	1001703a 	wrctl	status,r2
  
  return context;
   1b814:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1b818:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1b81c:	008000f4 	movhi	r2,3
   1b820:	10a7ee04 	addi	r2,r2,-24648
   1b824:	10800003 	ldbu	r2,0(r2)
   1b828:	10803fcc 	andi	r2,r2,255
   1b82c:	10000626 	beq	r2,zero,1b848 <OSTaskCreate+0x88>
   1b830:	e0bff317 	ldw	r2,-52(fp)
   1b834:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b838:	e0bff717 	ldw	r2,-36(fp)
   1b83c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1b840:	00800f04 	movi	r2,60
   1b844:	00004806 	br	1b968 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1b848:	e0ffff03 	ldbu	r3,-4(fp)
   1b84c:	00800174 	movhi	r2,5
   1b850:	10bcb704 	addi	r2,r2,-3364
   1b854:	18c7883a 	add	r3,r3,r3
   1b858:	18c7883a 	add	r3,r3,r3
   1b85c:	10c5883a 	add	r2,r2,r3
   1b860:	10800017 	ldw	r2,0(r2)
   1b864:	10003b1e 	bne	r2,zero,1b954 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1b868:	e0ffff03 	ldbu	r3,-4(fp)
   1b86c:	00800174 	movhi	r2,5
   1b870:	10bcb704 	addi	r2,r2,-3364
   1b874:	18c7883a 	add	r3,r3,r3
   1b878:	18c7883a 	add	r3,r3,r3
   1b87c:	10c5883a 	add	r2,r2,r3
   1b880:	00c00044 	movi	r3,1
   1b884:	10c00015 	stw	r3,0(r2)
   1b888:	e0bff317 	ldw	r2,-52(fp)
   1b88c:	e0bff815 	stw	r2,-32(fp)
   1b890:	e0bff817 	ldw	r2,-32(fp)
   1b894:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   1b898:	e13ffc17 	ldw	r4,-16(fp)
   1b89c:	e17ffd17 	ldw	r5,-12(fp)
   1b8a0:	e1bffe17 	ldw	r6,-8(fp)
   1b8a4:	000f883a 	mov	r7,zero
   1b8a8:	00248580 	call	24858 <OSTaskStkInit>
   1b8ac:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   1b8b0:	e0bfff03 	ldbu	r2,-4(fp)
   1b8b4:	d8000015 	stw	zero,0(sp)
   1b8b8:	d8000115 	stw	zero,4(sp)
   1b8bc:	d8000215 	stw	zero,8(sp)
   1b8c0:	1009883a 	mov	r4,r2
   1b8c4:	e17ff417 	ldw	r5,-48(fp)
   1b8c8:	000d883a 	mov	r6,zero
   1b8cc:	000f883a 	mov	r7,zero
   1b8d0:	00165e00 	call	165e0 <OS_TCBInit>
   1b8d4:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   1b8d8:	e0bff503 	ldbu	r2,-44(fp)
   1b8dc:	1000081e 	bne	r2,zero,1b900 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   1b8e0:	008000f4 	movhi	r2,3
   1b8e4:	10a7e044 	addi	r2,r2,-24703
   1b8e8:	10800003 	ldbu	r2,0(r2)
   1b8ec:	10803fcc 	andi	r2,r2,255
   1b8f0:	10800058 	cmpnei	r2,r2,1
   1b8f4:	1000151e 	bne	r2,zero,1b94c <OSTaskCreate+0x18c>
                OS_Sched();
   1b8f8:	00161dc0 	call	161dc <OS_Sched>
   1b8fc:	00001306 	br	1b94c <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b900:	0005303a 	rdctl	r2,status
   1b904:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b908:	e0fff917 	ldw	r3,-28(fp)
   1b90c:	00bfff84 	movi	r2,-2
   1b910:	1884703a 	and	r2,r3,r2
   1b914:	1001703a 	wrctl	status,r2
  
  return context;
   1b918:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1b91c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   1b920:	e0ffff03 	ldbu	r3,-4(fp)
   1b924:	00800174 	movhi	r2,5
   1b928:	10bcb704 	addi	r2,r2,-3364
   1b92c:	18c7883a 	add	r3,r3,r3
   1b930:	18c7883a 	add	r3,r3,r3
   1b934:	10c5883a 	add	r2,r2,r3
   1b938:	10000015 	stw	zero,0(r2)
   1b93c:	e0bff317 	ldw	r2,-52(fp)
   1b940:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b944:	e0bffa17 	ldw	r2,-24(fp)
   1b948:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1b94c:	e0bff503 	ldbu	r2,-44(fp)
   1b950:	00000506 	br	1b968 <OSTaskCreate+0x1a8>
   1b954:	e0bff317 	ldw	r2,-52(fp)
   1b958:	e0bffb15 	stw	r2,-20(fp)
   1b95c:	e0bffb17 	ldw	r2,-20(fp)
   1b960:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1b964:	00800a04 	movi	r2,40
}
   1b968:	e037883a 	mov	sp,fp
   1b96c:	dfc00117 	ldw	ra,4(sp)
   1b970:	df000017 	ldw	fp,0(sp)
   1b974:	dec00204 	addi	sp,sp,8
   1b978:	f800283a 	ret

0001b97c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   1b97c:	deffec04 	addi	sp,sp,-80
   1b980:	dfc01315 	stw	ra,76(sp)
   1b984:	df001215 	stw	fp,72(sp)
   1b988:	df001204 	addi	fp,sp,72
   1b98c:	e13ffa15 	stw	r4,-24(fp)
   1b990:	e17ffb15 	stw	r5,-20(fp)
   1b994:	e1bffc15 	stw	r6,-16(fp)
   1b998:	3809883a 	mov	r4,r7
   1b99c:	e0c00217 	ldw	r3,8(fp)
   1b9a0:	e0800617 	ldw	r2,24(fp)
   1b9a4:	e13ffd05 	stb	r4,-12(fp)
   1b9a8:	e0fffe0d 	sth	r3,-8(fp)
   1b9ac:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1b9b0:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1b9b4:	e0bffd03 	ldbu	r2,-12(fp)
   1b9b8:	10800570 	cmpltui	r2,r2,21
   1b9bc:	1000021e 	bne	r2,zero,1b9c8 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   1b9c0:	00800a84 	movi	r2,42
   1b9c4:	00006306 	br	1bb54 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b9c8:	0005303a 	rdctl	r2,status
   1b9cc:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b9d0:	e0fff417 	ldw	r3,-48(fp)
   1b9d4:	00bfff84 	movi	r2,-2
   1b9d8:	1884703a 	and	r2,r3,r2
   1b9dc:	1001703a 	wrctl	status,r2
  
  return context;
   1b9e0:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1b9e4:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1b9e8:	008000f4 	movhi	r2,3
   1b9ec:	10a7ee04 	addi	r2,r2,-24648
   1b9f0:	10800003 	ldbu	r2,0(r2)
   1b9f4:	10803fcc 	andi	r2,r2,255
   1b9f8:	10000626 	beq	r2,zero,1ba14 <OSTaskCreateExt+0x98>
   1b9fc:	e0bff117 	ldw	r2,-60(fp)
   1ba00:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ba04:	e0bff517 	ldw	r2,-44(fp)
   1ba08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1ba0c:	00800f04 	movi	r2,60
   1ba10:	00005006 	br	1bb54 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1ba14:	e0fffd03 	ldbu	r3,-12(fp)
   1ba18:	00800174 	movhi	r2,5
   1ba1c:	10bcb704 	addi	r2,r2,-3364
   1ba20:	18c7883a 	add	r3,r3,r3
   1ba24:	18c7883a 	add	r3,r3,r3
   1ba28:	10c5883a 	add	r2,r2,r3
   1ba2c:	10800017 	ldw	r2,0(r2)
   1ba30:	1000431e 	bne	r2,zero,1bb40 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1ba34:	e0fffd03 	ldbu	r3,-12(fp)
   1ba38:	00800174 	movhi	r2,5
   1ba3c:	10bcb704 	addi	r2,r2,-3364
   1ba40:	18c7883a 	add	r3,r3,r3
   1ba44:	18c7883a 	add	r3,r3,r3
   1ba48:	10c5883a 	add	r2,r2,r3
   1ba4c:	00c00044 	movi	r3,1
   1ba50:	10c00015 	stw	r3,0(r2)
   1ba54:	e0bff117 	ldw	r2,-60(fp)
   1ba58:	e0bff615 	stw	r2,-40(fp)
   1ba5c:	e0bff617 	ldw	r2,-40(fp)
   1ba60:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   1ba64:	e0bfff0b 	ldhu	r2,-4(fp)
   1ba68:	e1000317 	ldw	r4,12(fp)
   1ba6c:	e1400417 	ldw	r5,16(fp)
   1ba70:	100d883a 	mov	r6,r2
   1ba74:	001cb080 	call	1cb08 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   1ba78:	e0bfff0b 	ldhu	r2,-4(fp)
   1ba7c:	e13ffa17 	ldw	r4,-24(fp)
   1ba80:	e17ffb17 	ldw	r5,-20(fp)
   1ba84:	e1bffc17 	ldw	r6,-16(fp)
   1ba88:	100f883a 	mov	r7,r2
   1ba8c:	00248580 	call	24858 <OSTaskStkInit>
   1ba90:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   1ba94:	e13ffd03 	ldbu	r4,-12(fp)
   1ba98:	e1fffe0b 	ldhu	r7,-8(fp)
   1ba9c:	e0bfff0b 	ldhu	r2,-4(fp)
   1baa0:	e0c00417 	ldw	r3,16(fp)
   1baa4:	d8c00015 	stw	r3,0(sp)
   1baa8:	e0c00517 	ldw	r3,20(fp)
   1baac:	d8c00115 	stw	r3,4(sp)
   1bab0:	d8800215 	stw	r2,8(sp)
   1bab4:	e17ff217 	ldw	r5,-56(fp)
   1bab8:	e1800317 	ldw	r6,12(fp)
   1babc:	00165e00 	call	165e0 <OS_TCBInit>
   1bac0:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   1bac4:	e0bff303 	ldbu	r2,-52(fp)
   1bac8:	1000081e 	bne	r2,zero,1baec <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   1bacc:	008000f4 	movhi	r2,3
   1bad0:	10a7e044 	addi	r2,r2,-24703
   1bad4:	10800003 	ldbu	r2,0(r2)
   1bad8:	10803fcc 	andi	r2,r2,255
   1badc:	10800058 	cmpnei	r2,r2,1
   1bae0:	1000151e 	bne	r2,zero,1bb38 <OSTaskCreateExt+0x1bc>
                OS_Sched();
   1bae4:	00161dc0 	call	161dc <OS_Sched>
   1bae8:	00001306 	br	1bb38 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1baec:	0005303a 	rdctl	r2,status
   1baf0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1baf4:	e0fff717 	ldw	r3,-36(fp)
   1baf8:	00bfff84 	movi	r2,-2
   1bafc:	1884703a 	and	r2,r3,r2
   1bb00:	1001703a 	wrctl	status,r2
  
  return context;
   1bb04:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1bb08:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   1bb0c:	e0fffd03 	ldbu	r3,-12(fp)
   1bb10:	00800174 	movhi	r2,5
   1bb14:	10bcb704 	addi	r2,r2,-3364
   1bb18:	18c7883a 	add	r3,r3,r3
   1bb1c:	18c7883a 	add	r3,r3,r3
   1bb20:	10c5883a 	add	r2,r2,r3
   1bb24:	10000015 	stw	zero,0(r2)
   1bb28:	e0bff117 	ldw	r2,-60(fp)
   1bb2c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bb30:	e0bff817 	ldw	r2,-32(fp)
   1bb34:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1bb38:	e0bff303 	ldbu	r2,-52(fp)
   1bb3c:	00000506 	br	1bb54 <OSTaskCreateExt+0x1d8>
   1bb40:	e0bff117 	ldw	r2,-60(fp)
   1bb44:	e0bff915 	stw	r2,-28(fp)
   1bb48:	e0bff917 	ldw	r2,-28(fp)
   1bb4c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1bb50:	00800a04 	movi	r2,40
}
   1bb54:	e037883a 	mov	sp,fp
   1bb58:	dfc00117 	ldw	ra,4(sp)
   1bb5c:	df000017 	ldw	fp,0(sp)
   1bb60:	dec00204 	addi	sp,sp,8
   1bb64:	f800283a 	ret

0001bb68 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   1bb68:	defff404 	addi	sp,sp,-48
   1bb6c:	dfc00b15 	stw	ra,44(sp)
   1bb70:	df000a15 	stw	fp,40(sp)
   1bb74:	df000a04 	addi	fp,sp,40
   1bb78:	2005883a 	mov	r2,r4
   1bb7c:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   1bb80:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   1bb84:	008000f4 	movhi	r2,3
   1bb88:	10a7ee04 	addi	r2,r2,-24648
   1bb8c:	10800003 	ldbu	r2,0(r2)
   1bb90:	10803fcc 	andi	r2,r2,255
   1bb94:	10000226 	beq	r2,zero,1bba0 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   1bb98:	00801004 	movi	r2,64
   1bb9c:	0000e506 	br	1bf34 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   1bba0:	e0bfff03 	ldbu	r2,-4(fp)
   1bba4:	10800518 	cmpnei	r2,r2,20
   1bba8:	1000021e 	bne	r2,zero,1bbb4 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   1bbac:	00800f84 	movi	r2,62
   1bbb0:	0000e006 	br	1bf34 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   1bbb4:	e0bfff03 	ldbu	r2,-4(fp)
   1bbb8:	10800530 	cmpltui	r2,r2,20
   1bbbc:	1000051e 	bne	r2,zero,1bbd4 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   1bbc0:	e0bfff03 	ldbu	r2,-4(fp)
   1bbc4:	10803fe0 	cmpeqi	r2,r2,255
   1bbc8:	1000021e 	bne	r2,zero,1bbd4 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   1bbcc:	00800a84 	movi	r2,42
   1bbd0:	0000d806 	br	1bf34 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bbd4:	0005303a 	rdctl	r2,status
   1bbd8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bbdc:	e0fff917 	ldw	r3,-28(fp)
   1bbe0:	00bfff84 	movi	r2,-2
   1bbe4:	1884703a 	and	r2,r3,r2
   1bbe8:	1001703a 	wrctl	status,r2
  
  return context;
   1bbec:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1bbf0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   1bbf4:	e0bfff03 	ldbu	r2,-4(fp)
   1bbf8:	10803fd8 	cmpnei	r2,r2,255
   1bbfc:	1000051e 	bne	r2,zero,1bc14 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   1bc00:	008000f4 	movhi	r2,3
   1bc04:	10a7ef04 	addi	r2,r2,-24644
   1bc08:	10800017 	ldw	r2,0(r2)
   1bc0c:	10800c83 	ldbu	r2,50(r2)
   1bc10:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1bc14:	e0ffff03 	ldbu	r3,-4(fp)
   1bc18:	00800174 	movhi	r2,5
   1bc1c:	10bcb704 	addi	r2,r2,-3364
   1bc20:	18c7883a 	add	r3,r3,r3
   1bc24:	18c7883a 	add	r3,r3,r3
   1bc28:	10c5883a 	add	r2,r2,r3
   1bc2c:	10800017 	ldw	r2,0(r2)
   1bc30:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   1bc34:	e0bff717 	ldw	r2,-36(fp)
   1bc38:	1000061e 	bne	r2,zero,1bc54 <OSTaskDel+0xec>
   1bc3c:	e0bff617 	ldw	r2,-40(fp)
   1bc40:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bc44:	e0bffa17 	ldw	r2,-24(fp)
   1bc48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1bc4c:	008010c4 	movi	r2,67
   1bc50:	0000b806 	br	1bf34 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   1bc54:	e0bff717 	ldw	r2,-36(fp)
   1bc58:	10800058 	cmpnei	r2,r2,1
   1bc5c:	1000061e 	bne	r2,zero,1bc78 <OSTaskDel+0x110>
   1bc60:	e0bff617 	ldw	r2,-40(fp)
   1bc64:	e0bffb15 	stw	r2,-20(fp)
   1bc68:	e0bffb17 	ldw	r2,-20(fp)
   1bc6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1bc70:	00800f44 	movi	r2,61
   1bc74:	0000af06 	br	1bf34 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   1bc78:	e0bff717 	ldw	r2,-36(fp)
   1bc7c:	10800d03 	ldbu	r2,52(r2)
   1bc80:	10c03fcc 	andi	r3,r2,255
   1bc84:	e0bff717 	ldw	r2,-36(fp)
   1bc88:	10800d03 	ldbu	r2,52(r2)
   1bc8c:	11003fcc 	andi	r4,r2,255
   1bc90:	008000f4 	movhi	r2,3
   1bc94:	10a7ec44 	addi	r2,r2,-24655
   1bc98:	1105883a 	add	r2,r2,r4
   1bc9c:	10800003 	ldbu	r2,0(r2)
   1bca0:	1009883a 	mov	r4,r2
   1bca4:	e0bff717 	ldw	r2,-36(fp)
   1bca8:	10800d43 	ldbu	r2,53(r2)
   1bcac:	0084303a 	nor	r2,zero,r2
   1bcb0:	2084703a 	and	r2,r4,r2
   1bcb4:	1009883a 	mov	r4,r2
   1bcb8:	008000f4 	movhi	r2,3
   1bcbc:	10a7ec44 	addi	r2,r2,-24655
   1bcc0:	10c5883a 	add	r2,r2,r3
   1bcc4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   1bcc8:	e0bff717 	ldw	r2,-36(fp)
   1bccc:	10800d03 	ldbu	r2,52(r2)
   1bcd0:	10c03fcc 	andi	r3,r2,255
   1bcd4:	008000f4 	movhi	r2,3
   1bcd8:	10a7ec44 	addi	r2,r2,-24655
   1bcdc:	10c5883a 	add	r2,r2,r3
   1bce0:	10800003 	ldbu	r2,0(r2)
   1bce4:	10803fcc 	andi	r2,r2,255
   1bce8:	10000c1e 	bne	r2,zero,1bd1c <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   1bcec:	e0bff717 	ldw	r2,-36(fp)
   1bcf0:	10800d83 	ldbu	r2,54(r2)
   1bcf4:	0084303a 	nor	r2,zero,r2
   1bcf8:	1007883a 	mov	r3,r2
   1bcfc:	008000f4 	movhi	r2,3
   1bd00:	10a7ec04 	addi	r2,r2,-24656
   1bd04:	10800003 	ldbu	r2,0(r2)
   1bd08:	1884703a 	and	r2,r3,r2
   1bd0c:	1007883a 	mov	r3,r2
   1bd10:	008000f4 	movhi	r2,3
   1bd14:	10a7ec04 	addi	r2,r2,-24656
   1bd18:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   1bd1c:	e0bff717 	ldw	r2,-36(fp)
   1bd20:	10800717 	ldw	r2,28(r2)
   1bd24:	10000526 	beq	r2,zero,1bd3c <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1bd28:	e0bff717 	ldw	r2,-36(fp)
   1bd2c:	10800717 	ldw	r2,28(r2)
   1bd30:	e13ff717 	ldw	r4,-36(fp)
   1bd34:	100b883a 	mov	r5,r2
   1bd38:	0015bb40 	call	15bb4 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   1bd3c:	e0bff717 	ldw	r2,-36(fp)
   1bd40:	10800817 	ldw	r2,32(r2)
   1bd44:	10000526 	beq	r2,zero,1bd5c <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1bd48:	e0bff717 	ldw	r2,-36(fp)
   1bd4c:	10800817 	ldw	r2,32(r2)
   1bd50:	e13ff717 	ldw	r4,-36(fp)
   1bd54:	100b883a 	mov	r5,r2
   1bd58:	0015c680 	call	15c68 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   1bd5c:	e0bff717 	ldw	r2,-36(fp)
   1bd60:	10800a17 	ldw	r2,40(r2)
   1bd64:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   1bd68:	e0bff817 	ldw	r2,-32(fp)
   1bd6c:	10000226 	beq	r2,zero,1bd78 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   1bd70:	e13ff817 	ldw	r4,-32(fp)
   1bd74:	00181bc0 	call	181bc <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   1bd78:	e0bff717 	ldw	r2,-36(fp)
   1bd7c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   1bd80:	e0bff717 	ldw	r2,-36(fp)
   1bd84:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1bd88:	e0bff717 	ldw	r2,-36(fp)
   1bd8c:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   1bd90:	008000f4 	movhi	r2,3
   1bd94:	10a7e004 	addi	r2,r2,-24704
   1bd98:	10800003 	ldbu	r2,0(r2)
   1bd9c:	10803fcc 	andi	r2,r2,255
   1bda0:	10803fe0 	cmpeqi	r2,r2,255
   1bda4:	1000081e 	bne	r2,zero,1bdc8 <OSTaskDel+0x260>
        OSLockNesting++;
   1bda8:	008000f4 	movhi	r2,3
   1bdac:	10a7e004 	addi	r2,r2,-24704
   1bdb0:	10800003 	ldbu	r2,0(r2)
   1bdb4:	10800044 	addi	r2,r2,1
   1bdb8:	1007883a 	mov	r3,r2
   1bdbc:	008000f4 	movhi	r2,3
   1bdc0:	10a7e004 	addi	r2,r2,-24704
   1bdc4:	10c00005 	stb	r3,0(r2)
   1bdc8:	e0bff617 	ldw	r2,-40(fp)
   1bdcc:	e0bffc15 	stw	r2,-16(fp)
   1bdd0:	e0bffc17 	ldw	r2,-16(fp)
   1bdd4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   1bdd8:	00157a80 	call	157a8 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bddc:	0005303a 	rdctl	r2,status
   1bde0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bde4:	e0fffd17 	ldw	r3,-12(fp)
   1bde8:	00bfff84 	movi	r2,-2
   1bdec:	1884703a 	and	r2,r3,r2
   1bdf0:	1001703a 	wrctl	status,r2
  
  return context;
   1bdf4:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   1bdf8:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   1bdfc:	008000f4 	movhi	r2,3
   1be00:	10a7e004 	addi	r2,r2,-24704
   1be04:	10800003 	ldbu	r2,0(r2)
   1be08:	10803fcc 	andi	r2,r2,255
   1be0c:	10000826 	beq	r2,zero,1be30 <OSTaskDel+0x2c8>
        OSLockNesting--;
   1be10:	008000f4 	movhi	r2,3
   1be14:	10a7e004 	addi	r2,r2,-24704
   1be18:	10800003 	ldbu	r2,0(r2)
   1be1c:	10bfffc4 	addi	r2,r2,-1
   1be20:	1007883a 	mov	r3,r2
   1be24:	008000f4 	movhi	r2,3
   1be28:	10a7e004 	addi	r2,r2,-24704
   1be2c:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   1be30:	e13ff717 	ldw	r4,-36(fp)
   1be34:	00249d40 	call	249d4 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   1be38:	008000f4 	movhi	r2,3
   1be3c:	10a7e844 	addi	r2,r2,-24671
   1be40:	10800003 	ldbu	r2,0(r2)
   1be44:	10bfffc4 	addi	r2,r2,-1
   1be48:	1007883a 	mov	r3,r2
   1be4c:	008000f4 	movhi	r2,3
   1be50:	10a7e844 	addi	r2,r2,-24671
   1be54:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   1be58:	e0ffff03 	ldbu	r3,-4(fp)
   1be5c:	00800174 	movhi	r2,5
   1be60:	10bcb704 	addi	r2,r2,-3364
   1be64:	18c7883a 	add	r3,r3,r3
   1be68:	18c7883a 	add	r3,r3,r3
   1be6c:	10c5883a 	add	r2,r2,r3
   1be70:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1be74:	e0bff717 	ldw	r2,-36(fp)
   1be78:	10800617 	ldw	r2,24(r2)
   1be7c:	1000091e 	bne	r2,zero,1bea4 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   1be80:	e0bff717 	ldw	r2,-36(fp)
   1be84:	10800517 	ldw	r2,20(r2)
   1be88:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   1be8c:	e0bff717 	ldw	r2,-36(fp)
   1be90:	10c00517 	ldw	r3,20(r2)
   1be94:	008000f4 	movhi	r2,3
   1be98:	10a7e304 	addi	r2,r2,-24692
   1be9c:	10c00015 	stw	r3,0(r2)
   1bea0:	00000a06 	br	1becc <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   1bea4:	e0bff717 	ldw	r2,-36(fp)
   1bea8:	10800617 	ldw	r2,24(r2)
   1beac:	e0fff717 	ldw	r3,-36(fp)
   1beb0:	18c00517 	ldw	r3,20(r3)
   1beb4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   1beb8:	e0bff717 	ldw	r2,-36(fp)
   1bebc:	10800517 	ldw	r2,20(r2)
   1bec0:	e0fff717 	ldw	r3,-36(fp)
   1bec4:	18c00617 	ldw	r3,24(r3)
   1bec8:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   1becc:	008000f4 	movhi	r2,3
   1bed0:	10a7e704 	addi	r2,r2,-24676
   1bed4:	10c00017 	ldw	r3,0(r2)
   1bed8:	e0bff717 	ldw	r2,-36(fp)
   1bedc:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   1bee0:	008000f4 	movhi	r2,3
   1bee4:	10a7e704 	addi	r2,r2,-24676
   1bee8:	e0fff717 	ldw	r3,-36(fp)
   1beec:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   1bef0:	e0bff717 	ldw	r2,-36(fp)
   1bef4:	00c00fc4 	movi	r3,63
   1bef8:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1befc:	e0bff717 	ldw	r2,-36(fp)
   1bf00:	10001345 	stb	zero,77(r2)
   1bf04:	e0bff617 	ldw	r2,-40(fp)
   1bf08:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bf0c:	e0bffe17 	ldw	r2,-8(fp)
   1bf10:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1bf14:	008000f4 	movhi	r2,3
   1bf18:	10a7e044 	addi	r2,r2,-24703
   1bf1c:	10800003 	ldbu	r2,0(r2)
   1bf20:	10803fcc 	andi	r2,r2,255
   1bf24:	10800058 	cmpnei	r2,r2,1
   1bf28:	1000011e 	bne	r2,zero,1bf30 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   1bf2c:	00161dc0 	call	161dc <OS_Sched>
    }
    return (OS_ERR_NONE);
   1bf30:	0005883a 	mov	r2,zero
}
   1bf34:	e037883a 	mov	sp,fp
   1bf38:	dfc00117 	ldw	ra,4(sp)
   1bf3c:	df000017 	ldw	fp,0(sp)
   1bf40:	dec00204 	addi	sp,sp,8
   1bf44:	f800283a 	ret

0001bf48 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   1bf48:	defff504 	addi	sp,sp,-44
   1bf4c:	df000a15 	stw	fp,40(sp)
   1bf50:	df000a04 	addi	fp,sp,40
   1bf54:	2005883a 	mov	r2,r4
   1bf58:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1bf5c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   1bf60:	e0bfff03 	ldbu	r2,-4(fp)
   1bf64:	10800518 	cmpnei	r2,r2,20
   1bf68:	1000021e 	bne	r2,zero,1bf74 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   1bf6c:	00800f84 	movi	r2,62
   1bf70:	00004706 	br	1c090 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1bf74:	e0bfff03 	ldbu	r2,-4(fp)
   1bf78:	10800530 	cmpltui	r2,r2,20
   1bf7c:	1000051e 	bne	r2,zero,1bf94 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   1bf80:	e0bfff03 	ldbu	r2,-4(fp)
   1bf84:	10803fe0 	cmpeqi	r2,r2,255
   1bf88:	1000021e 	bne	r2,zero,1bf94 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   1bf8c:	00800a84 	movi	r2,42
   1bf90:	00003f06 	br	1c090 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   1bf94:	e0bfff03 	ldbu	r2,-4(fp)
   1bf98:	10803fd8 	cmpnei	r2,r2,255
   1bf9c:	1000131e 	bne	r2,zero,1bfec <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bfa0:	0005303a 	rdctl	r2,status
   1bfa4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bfa8:	e0fff917 	ldw	r3,-28(fp)
   1bfac:	00bfff84 	movi	r2,-2
   1bfb0:	1884703a 	and	r2,r3,r2
   1bfb4:	1001703a 	wrctl	status,r2
  
  return context;
   1bfb8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   1bfbc:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   1bfc0:	008000f4 	movhi	r2,3
   1bfc4:	10a7ef04 	addi	r2,r2,-24644
   1bfc8:	10800017 	ldw	r2,0(r2)
   1bfcc:	10800dc3 	ldbu	r2,55(r2)
   1bfd0:	e0bff705 	stb	r2,-36(fp)
   1bfd4:	e0bff617 	ldw	r2,-40(fp)
   1bfd8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bfdc:	e0bffa17 	ldw	r2,-24(fp)
   1bfe0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   1bfe4:	e0bff703 	ldbu	r2,-36(fp)
   1bfe8:	00002906 	br	1c090 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bfec:	0005303a 	rdctl	r2,status
   1bff0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bff4:	e0fffb17 	ldw	r3,-20(fp)
   1bff8:	00bfff84 	movi	r2,-2
   1bffc:	1884703a 	and	r2,r3,r2
   1c000:	1001703a 	wrctl	status,r2
  
  return context;
   1c004:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1c008:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1c00c:	e0ffff03 	ldbu	r3,-4(fp)
   1c010:	00800174 	movhi	r2,5
   1c014:	10bcb704 	addi	r2,r2,-3364
   1c018:	18c7883a 	add	r3,r3,r3
   1c01c:	18c7883a 	add	r3,r3,r3
   1c020:	10c5883a 	add	r2,r2,r3
   1c024:	10800017 	ldw	r2,0(r2)
   1c028:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   1c02c:	e0bff817 	ldw	r2,-32(fp)
   1c030:	1000061e 	bne	r2,zero,1c04c <OSTaskDelReq+0x104>
   1c034:	e0bff617 	ldw	r2,-40(fp)
   1c038:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c03c:	e0bffc17 	ldw	r2,-16(fp)
   1c040:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   1c044:	008010c4 	movi	r2,67
   1c048:	00001106 	br	1c090 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   1c04c:	e0bff817 	ldw	r2,-32(fp)
   1c050:	10800058 	cmpnei	r2,r2,1
   1c054:	1000061e 	bne	r2,zero,1c070 <OSTaskDelReq+0x128>
   1c058:	e0bff617 	ldw	r2,-40(fp)
   1c05c:	e0bffd15 	stw	r2,-12(fp)
   1c060:	e0bffd17 	ldw	r2,-12(fp)
   1c064:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1c068:	00800f44 	movi	r2,61
   1c06c:	00000806 	br	1c090 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   1c070:	e0bff817 	ldw	r2,-32(fp)
   1c074:	00c00fc4 	movi	r3,63
   1c078:	10c00dc5 	stb	r3,55(r2)
   1c07c:	e0bff617 	ldw	r2,-40(fp)
   1c080:	e0bffe15 	stw	r2,-8(fp)
   1c084:	e0bffe17 	ldw	r2,-8(fp)
   1c088:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1c08c:	0005883a 	mov	r2,zero
}
   1c090:	e037883a 	mov	sp,fp
   1c094:	df000017 	ldw	fp,0(sp)
   1c098:	dec00104 	addi	sp,sp,4
   1c09c:	f800283a 	ret

0001c0a0 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1c0a0:	defff404 	addi	sp,sp,-48
   1c0a4:	dfc00b15 	stw	ra,44(sp)
   1c0a8:	df000a15 	stw	fp,40(sp)
   1c0ac:	df000a04 	addi	fp,sp,40
   1c0b0:	2005883a 	mov	r2,r4
   1c0b4:	e17ffe15 	stw	r5,-8(fp)
   1c0b8:	e1bfff15 	stw	r6,-4(fp)
   1c0bc:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   1c0c0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   1c0c4:	e0bfff17 	ldw	r2,-4(fp)
   1c0c8:	1000021e 	bne	r2,zero,1c0d4 <OSTaskNameGet+0x34>
        return (0);
   1c0cc:	0005883a 	mov	r2,zero
   1c0d0:	00005806 	br	1c234 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   1c0d4:	e0bffd03 	ldbu	r2,-12(fp)
   1c0d8:	10800570 	cmpltui	r2,r2,21
   1c0dc:	1000081e 	bne	r2,zero,1c100 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   1c0e0:	e0bffd03 	ldbu	r2,-12(fp)
   1c0e4:	10803fe0 	cmpeqi	r2,r2,255
   1c0e8:	1000051e 	bne	r2,zero,1c100 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   1c0ec:	e0bfff17 	ldw	r2,-4(fp)
   1c0f0:	00c00a84 	movi	r3,42
   1c0f4:	10c00005 	stb	r3,0(r2)
            return (0);
   1c0f8:	0005883a 	mov	r2,zero
   1c0fc:	00004d06 	br	1c234 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   1c100:	e0bffe17 	ldw	r2,-8(fp)
   1c104:	1000051e 	bne	r2,zero,1c11c <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   1c108:	e0bfff17 	ldw	r2,-4(fp)
   1c10c:	00c00304 	movi	r3,12
   1c110:	10c00005 	stb	r3,0(r2)
        return (0);
   1c114:	0005883a 	mov	r2,zero
   1c118:	00004606 	br	1c234 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   1c11c:	008000f4 	movhi	r2,3
   1c120:	10a7ee04 	addi	r2,r2,-24648
   1c124:	10800003 	ldbu	r2,0(r2)
   1c128:	10803fcc 	andi	r2,r2,255
   1c12c:	10000526 	beq	r2,zero,1c144 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   1c130:	e0bfff17 	ldw	r2,-4(fp)
   1c134:	00c00444 	movi	r3,17
   1c138:	10c00005 	stb	r3,0(r2)
        return (0);
   1c13c:	0005883a 	mov	r2,zero
   1c140:	00003c06 	br	1c234 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c144:	0005303a 	rdctl	r2,status
   1c148:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c14c:	e0fff917 	ldw	r3,-28(fp)
   1c150:	00bfff84 	movi	r2,-2
   1c154:	1884703a 	and	r2,r3,r2
   1c158:	1001703a 	wrctl	status,r2
  
  return context;
   1c15c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1c160:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1c164:	e0bffd03 	ldbu	r2,-12(fp)
   1c168:	10803fd8 	cmpnei	r2,r2,255
   1c16c:	1000051e 	bne	r2,zero,1c184 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   1c170:	008000f4 	movhi	r2,3
   1c174:	10a7ef04 	addi	r2,r2,-24644
   1c178:	10800017 	ldw	r2,0(r2)
   1c17c:	10800c83 	ldbu	r2,50(r2)
   1c180:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1c184:	e0fffd03 	ldbu	r3,-12(fp)
   1c188:	00800174 	movhi	r2,5
   1c18c:	10bcb704 	addi	r2,r2,-3364
   1c190:	18c7883a 	add	r3,r3,r3
   1c194:	18c7883a 	add	r3,r3,r3
   1c198:	10c5883a 	add	r2,r2,r3
   1c19c:	10800017 	ldw	r2,0(r2)
   1c1a0:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   1c1a4:	e0bff717 	ldw	r2,-36(fp)
   1c1a8:	1000091e 	bne	r2,zero,1c1d0 <OSTaskNameGet+0x130>
   1c1ac:	e0bff617 	ldw	r2,-40(fp)
   1c1b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c1b4:	e0bffa17 	ldw	r2,-24(fp)
   1c1b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1c1bc:	e0bfff17 	ldw	r2,-4(fp)
   1c1c0:	00c010c4 	movi	r3,67
   1c1c4:	10c00005 	stb	r3,0(r2)
        return (0);
   1c1c8:	0005883a 	mov	r2,zero
   1c1cc:	00001906 	br	1c234 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   1c1d0:	e0bff717 	ldw	r2,-36(fp)
   1c1d4:	10800058 	cmpnei	r2,r2,1
   1c1d8:	1000091e 	bne	r2,zero,1c200 <OSTaskNameGet+0x160>
   1c1dc:	e0bff617 	ldw	r2,-40(fp)
   1c1e0:	e0bffb15 	stw	r2,-20(fp)
   1c1e4:	e0bffb17 	ldw	r2,-20(fp)
   1c1e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1c1ec:	e0bfff17 	ldw	r2,-4(fp)
   1c1f0:	00c010c4 	movi	r3,67
   1c1f4:	10c00005 	stb	r3,0(r2)
        return (0);
   1c1f8:	0005883a 	mov	r2,zero
   1c1fc:	00000d06 	br	1c234 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   1c200:	e0bff717 	ldw	r2,-36(fp)
   1c204:	10801304 	addi	r2,r2,76
   1c208:	e13ffe17 	ldw	r4,-8(fp)
   1c20c:	100b883a 	mov	r5,r2
   1c210:	00163180 	call	16318 <OS_StrCopy>
   1c214:	e0bff805 	stb	r2,-32(fp)
   1c218:	e0bff617 	ldw	r2,-40(fp)
   1c21c:	e0bffc15 	stw	r2,-16(fp)
   1c220:	e0bffc17 	ldw	r2,-16(fp)
   1c224:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1c228:	e0bfff17 	ldw	r2,-4(fp)
   1c22c:	10000005 	stb	zero,0(r2)
    return (len);
   1c230:	e0bff803 	ldbu	r2,-32(fp)
}
   1c234:	e037883a 	mov	sp,fp
   1c238:	dfc00117 	ldw	ra,4(sp)
   1c23c:	df000017 	ldw	fp,0(sp)
   1c240:	dec00204 	addi	sp,sp,8
   1c244:	f800283a 	ret

0001c248 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1c248:	defff304 	addi	sp,sp,-52
   1c24c:	dfc00c15 	stw	ra,48(sp)
   1c250:	df000b15 	stw	fp,44(sp)
   1c254:	df000b04 	addi	fp,sp,44
   1c258:	2005883a 	mov	r2,r4
   1c25c:	e17ffe15 	stw	r5,-8(fp)
   1c260:	e1bfff15 	stw	r6,-4(fp)
   1c264:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1c268:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1c26c:	e0bfff17 	ldw	r2,-4(fp)
   1c270:	1000011e 	bne	r2,zero,1c278 <OSTaskNameSet+0x30>
        return;
   1c274:	00005f06 	br	1c3f4 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   1c278:	e0bffd03 	ldbu	r2,-12(fp)
   1c27c:	10800570 	cmpltui	r2,r2,21
   1c280:	1000071e 	bne	r2,zero,1c2a0 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   1c284:	e0bffd03 	ldbu	r2,-12(fp)
   1c288:	10803fe0 	cmpeqi	r2,r2,255
   1c28c:	1000041e 	bne	r2,zero,1c2a0 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   1c290:	e0bfff17 	ldw	r2,-4(fp)
   1c294:	00c00a84 	movi	r3,42
   1c298:	10c00005 	stb	r3,0(r2)
            return;
   1c29c:	00005506 	br	1c3f4 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   1c2a0:	e0bffe17 	ldw	r2,-8(fp)
   1c2a4:	1000041e 	bne	r2,zero,1c2b8 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   1c2a8:	e0bfff17 	ldw	r2,-4(fp)
   1c2ac:	00c00304 	movi	r3,12
   1c2b0:	10c00005 	stb	r3,0(r2)
        return;
   1c2b4:	00004f06 	br	1c3f4 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   1c2b8:	008000f4 	movhi	r2,3
   1c2bc:	10a7ee04 	addi	r2,r2,-24648
   1c2c0:	10800003 	ldbu	r2,0(r2)
   1c2c4:	10803fcc 	andi	r2,r2,255
   1c2c8:	10000426 	beq	r2,zero,1c2dc <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   1c2cc:	e0bfff17 	ldw	r2,-4(fp)
   1c2d0:	00c00484 	movi	r3,18
   1c2d4:	10c00005 	stb	r3,0(r2)
        return;
   1c2d8:	00004606 	br	1c3f4 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c2dc:	0005303a 	rdctl	r2,status
   1c2e0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c2e4:	e0fff817 	ldw	r3,-32(fp)
   1c2e8:	00bfff84 	movi	r2,-2
   1c2ec:	1884703a 	and	r2,r3,r2
   1c2f0:	1001703a 	wrctl	status,r2
  
  return context;
   1c2f4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1c2f8:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   1c2fc:	e0bffd03 	ldbu	r2,-12(fp)
   1c300:	10803fd8 	cmpnei	r2,r2,255
   1c304:	1000051e 	bne	r2,zero,1c31c <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   1c308:	008000f4 	movhi	r2,3
   1c30c:	10a7ef04 	addi	r2,r2,-24644
   1c310:	10800017 	ldw	r2,0(r2)
   1c314:	10800c83 	ldbu	r2,50(r2)
   1c318:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1c31c:	e0fffd03 	ldbu	r3,-12(fp)
   1c320:	00800174 	movhi	r2,5
   1c324:	10bcb704 	addi	r2,r2,-3364
   1c328:	18c7883a 	add	r3,r3,r3
   1c32c:	18c7883a 	add	r3,r3,r3
   1c330:	10c5883a 	add	r2,r2,r3
   1c334:	10800017 	ldw	r2,0(r2)
   1c338:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   1c33c:	e0bff617 	ldw	r2,-40(fp)
   1c340:	1000081e 	bne	r2,zero,1c364 <OSTaskNameSet+0x11c>
   1c344:	e0bff517 	ldw	r2,-44(fp)
   1c348:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c34c:	e0bff917 	ldw	r2,-28(fp)
   1c350:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1c354:	e0bfff17 	ldw	r2,-4(fp)
   1c358:	00c010c4 	movi	r3,67
   1c35c:	10c00005 	stb	r3,0(r2)
        return;
   1c360:	00002406 	br	1c3f4 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   1c364:	e0bff617 	ldw	r2,-40(fp)
   1c368:	10800058 	cmpnei	r2,r2,1
   1c36c:	1000081e 	bne	r2,zero,1c390 <OSTaskNameSet+0x148>
   1c370:	e0bff517 	ldw	r2,-44(fp)
   1c374:	e0bffa15 	stw	r2,-24(fp)
   1c378:	e0bffa17 	ldw	r2,-24(fp)
   1c37c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1c380:	e0bfff17 	ldw	r2,-4(fp)
   1c384:	00c010c4 	movi	r3,67
   1c388:	10c00005 	stb	r3,0(r2)
        return;
   1c38c:	00001906 	br	1c3f4 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   1c390:	e13ffe17 	ldw	r4,-8(fp)
   1c394:	001638c0 	call	1638c <OS_StrLen>
   1c398:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   1c39c:	e0bff703 	ldbu	r2,-36(fp)
   1c3a0:	10800830 	cmpltui	r2,r2,32
   1c3a4:	1000081e 	bne	r2,zero,1c3c8 <OSTaskNameSet+0x180>
   1c3a8:	e0bff517 	ldw	r2,-44(fp)
   1c3ac:	e0bffb15 	stw	r2,-20(fp)
   1c3b0:	e0bffb17 	ldw	r2,-20(fp)
   1c3b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   1c3b8:	e0bfff17 	ldw	r2,-4(fp)
   1c3bc:	00c01044 	movi	r3,65
   1c3c0:	10c00005 	stb	r3,0(r2)
        return;
   1c3c4:	00000b06 	br	1c3f4 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   1c3c8:	e0bff617 	ldw	r2,-40(fp)
   1c3cc:	10801304 	addi	r2,r2,76
   1c3d0:	1009883a 	mov	r4,r2
   1c3d4:	e17ffe17 	ldw	r5,-8(fp)
   1c3d8:	00163180 	call	16318 <OS_StrCopy>
   1c3dc:	e0bff517 	ldw	r2,-44(fp)
   1c3e0:	e0bffc15 	stw	r2,-16(fp)
   1c3e4:	e0bffc17 	ldw	r2,-16(fp)
   1c3e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1c3ec:	e0bfff17 	ldw	r2,-4(fp)
   1c3f0:	10000005 	stb	zero,0(r2)
}
   1c3f4:	e037883a 	mov	sp,fp
   1c3f8:	dfc00117 	ldw	ra,4(sp)
   1c3fc:	df000017 	ldw	fp,0(sp)
   1c400:	dec00204 	addi	sp,sp,8
   1c404:	f800283a 	ret

0001c408 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   1c408:	defff404 	addi	sp,sp,-48
   1c40c:	dfc00b15 	stw	ra,44(sp)
   1c410:	df000a15 	stw	fp,40(sp)
   1c414:	df000a04 	addi	fp,sp,40
   1c418:	2005883a 	mov	r2,r4
   1c41c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1c420:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   1c424:	e0bfff03 	ldbu	r2,-4(fp)
   1c428:	10800530 	cmpltui	r2,r2,20
   1c42c:	1000021e 	bne	r2,zero,1c438 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1c430:	00800a84 	movi	r2,42
   1c434:	00006d06 	br	1c5ec <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c438:	0005303a 	rdctl	r2,status
   1c43c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c440:	e0fff817 	ldw	r3,-32(fp)
   1c444:	00bfff84 	movi	r2,-2
   1c448:	1884703a 	and	r2,r3,r2
   1c44c:	1001703a 	wrctl	status,r2
  
  return context;
   1c450:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1c454:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1c458:	e0ffff03 	ldbu	r3,-4(fp)
   1c45c:	00800174 	movhi	r2,5
   1c460:	10bcb704 	addi	r2,r2,-3364
   1c464:	18c7883a 	add	r3,r3,r3
   1c468:	18c7883a 	add	r3,r3,r3
   1c46c:	10c5883a 	add	r2,r2,r3
   1c470:	10800017 	ldw	r2,0(r2)
   1c474:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   1c478:	e0bff717 	ldw	r2,-36(fp)
   1c47c:	1000061e 	bne	r2,zero,1c498 <OSTaskResume+0x90>
   1c480:	e0bff617 	ldw	r2,-40(fp)
   1c484:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c488:	e0bff917 	ldw	r2,-28(fp)
   1c48c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   1c490:	00801184 	movi	r2,70
   1c494:	00005506 	br	1c5ec <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   1c498:	e0bff717 	ldw	r2,-36(fp)
   1c49c:	10800058 	cmpnei	r2,r2,1
   1c4a0:	1000061e 	bne	r2,zero,1c4bc <OSTaskResume+0xb4>
   1c4a4:	e0bff617 	ldw	r2,-40(fp)
   1c4a8:	e0bffa15 	stw	r2,-24(fp)
   1c4ac:	e0bffa17 	ldw	r2,-24(fp)
   1c4b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1c4b4:	008010c4 	movi	r2,67
   1c4b8:	00004c06 	br	1c5ec <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   1c4bc:	e0bff717 	ldw	r2,-36(fp)
   1c4c0:	10800c03 	ldbu	r2,48(r2)
   1c4c4:	10803fcc 	andi	r2,r2,255
   1c4c8:	1080020c 	andi	r2,r2,8
   1c4cc:	10004226 	beq	r2,zero,1c5d8 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   1c4d0:	e0bff717 	ldw	r2,-36(fp)
   1c4d4:	10c00c03 	ldbu	r3,48(r2)
   1c4d8:	00bffdc4 	movi	r2,-9
   1c4dc:	1884703a 	and	r2,r3,r2
   1c4e0:	1007883a 	mov	r3,r2
   1c4e4:	e0bff717 	ldw	r2,-36(fp)
   1c4e8:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   1c4ec:	e0bff717 	ldw	r2,-36(fp)
   1c4f0:	10800c03 	ldbu	r2,48(r2)
   1c4f4:	10803fcc 	andi	r2,r2,255
   1c4f8:	1000311e 	bne	r2,zero,1c5c0 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   1c4fc:	e0bff717 	ldw	r2,-36(fp)
   1c500:	10800b8b 	ldhu	r2,46(r2)
   1c504:	10bfffcc 	andi	r2,r2,65535
   1c508:	1000281e 	bne	r2,zero,1c5ac <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   1c50c:	e0bff717 	ldw	r2,-36(fp)
   1c510:	10c00d83 	ldbu	r3,54(r2)
   1c514:	008000f4 	movhi	r2,3
   1c518:	10a7ec04 	addi	r2,r2,-24656
   1c51c:	10800003 	ldbu	r2,0(r2)
   1c520:	1884b03a 	or	r2,r3,r2
   1c524:	1007883a 	mov	r3,r2
   1c528:	008000f4 	movhi	r2,3
   1c52c:	10a7ec04 	addi	r2,r2,-24656
   1c530:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1c534:	e0bff717 	ldw	r2,-36(fp)
   1c538:	10800d03 	ldbu	r2,52(r2)
   1c53c:	10c03fcc 	andi	r3,r2,255
   1c540:	e0bff717 	ldw	r2,-36(fp)
   1c544:	10800d03 	ldbu	r2,52(r2)
   1c548:	11003fcc 	andi	r4,r2,255
   1c54c:	008000f4 	movhi	r2,3
   1c550:	10a7ec44 	addi	r2,r2,-24655
   1c554:	1105883a 	add	r2,r2,r4
   1c558:	11000003 	ldbu	r4,0(r2)
   1c55c:	e0bff717 	ldw	r2,-36(fp)
   1c560:	10800d43 	ldbu	r2,53(r2)
   1c564:	2084b03a 	or	r2,r4,r2
   1c568:	1009883a 	mov	r4,r2
   1c56c:	008000f4 	movhi	r2,3
   1c570:	10a7ec44 	addi	r2,r2,-24655
   1c574:	10c5883a 	add	r2,r2,r3
   1c578:	11000005 	stb	r4,0(r2)
   1c57c:	e0bff617 	ldw	r2,-40(fp)
   1c580:	e0bffb15 	stw	r2,-20(fp)
   1c584:	e0bffb17 	ldw	r2,-20(fp)
   1c588:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   1c58c:	008000f4 	movhi	r2,3
   1c590:	10a7e044 	addi	r2,r2,-24703
   1c594:	10800003 	ldbu	r2,0(r2)
   1c598:	10803fcc 	andi	r2,r2,255
   1c59c:	10800058 	cmpnei	r2,r2,1
   1c5a0:	10000b1e 	bne	r2,zero,1c5d0 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   1c5a4:	00161dc0 	call	161dc <OS_Sched>
   1c5a8:	00000906 	br	1c5d0 <OSTaskResume+0x1c8>
   1c5ac:	e0bff617 	ldw	r2,-40(fp)
   1c5b0:	e0bffc15 	stw	r2,-16(fp)
   1c5b4:	e0bffc17 	ldw	r2,-16(fp)
   1c5b8:	1001703a 	wrctl	status,r2
   1c5bc:	00000406 	br	1c5d0 <OSTaskResume+0x1c8>
   1c5c0:	e0bff617 	ldw	r2,-40(fp)
   1c5c4:	e0bffd15 	stw	r2,-12(fp)
   1c5c8:	e0bffd17 	ldw	r2,-12(fp)
   1c5cc:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   1c5d0:	0005883a 	mov	r2,zero
   1c5d4:	00000506 	br	1c5ec <OSTaskResume+0x1e4>
   1c5d8:	e0bff617 	ldw	r2,-40(fp)
   1c5dc:	e0bffe15 	stw	r2,-8(fp)
   1c5e0:	e0bffe17 	ldw	r2,-8(fp)
   1c5e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   1c5e8:	00801104 	movi	r2,68
}
   1c5ec:	e037883a 	mov	sp,fp
   1c5f0:	dfc00117 	ldw	ra,4(sp)
   1c5f4:	df000017 	ldw	fp,0(sp)
   1c5f8:	dec00204 	addi	sp,sp,8
   1c5fc:	f800283a 	ret

0001c600 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   1c600:	defff304 	addi	sp,sp,-52
   1c604:	df000c15 	stw	fp,48(sp)
   1c608:	df000c04 	addi	fp,sp,48
   1c60c:	2005883a 	mov	r2,r4
   1c610:	e17fff15 	stw	r5,-4(fp)
   1c614:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1c618:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1c61c:	e0bffe03 	ldbu	r2,-8(fp)
   1c620:	10800570 	cmpltui	r2,r2,21
   1c624:	1000051e 	bne	r2,zero,1c63c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   1c628:	e0bffe03 	ldbu	r2,-8(fp)
   1c62c:	10803fe0 	cmpeqi	r2,r2,255
   1c630:	1000021e 	bne	r2,zero,1c63c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   1c634:	00800a84 	movi	r2,42
   1c638:	00005f06 	br	1c7b8 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   1c63c:	e0bfff17 	ldw	r2,-4(fp)
   1c640:	1000021e 	bne	r2,zero,1c64c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   1c644:	00800244 	movi	r2,9
   1c648:	00005b06 	br	1c7b8 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   1c64c:	e0bfff17 	ldw	r2,-4(fp)
   1c650:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   1c654:	e0bfff17 	ldw	r2,-4(fp)
   1c658:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c65c:	0005303a 	rdctl	r2,status
   1c660:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c664:	e0fff917 	ldw	r3,-28(fp)
   1c668:	00bfff84 	movi	r2,-2
   1c66c:	1884703a 	and	r2,r3,r2
   1c670:	1001703a 	wrctl	status,r2
  
  return context;
   1c674:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1c678:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   1c67c:	e0bffe03 	ldbu	r2,-8(fp)
   1c680:	10803fd8 	cmpnei	r2,r2,255
   1c684:	1000051e 	bne	r2,zero,1c69c <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1c688:	008000f4 	movhi	r2,3
   1c68c:	10a7ef04 	addi	r2,r2,-24644
   1c690:	10800017 	ldw	r2,0(r2)
   1c694:	10800c83 	ldbu	r2,50(r2)
   1c698:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1c69c:	e0fffe03 	ldbu	r3,-8(fp)
   1c6a0:	00800174 	movhi	r2,5
   1c6a4:	10bcb704 	addi	r2,r2,-3364
   1c6a8:	18c7883a 	add	r3,r3,r3
   1c6ac:	18c7883a 	add	r3,r3,r3
   1c6b0:	10c5883a 	add	r2,r2,r3
   1c6b4:	10800017 	ldw	r2,0(r2)
   1c6b8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   1c6bc:	e0bff717 	ldw	r2,-36(fp)
   1c6c0:	1000061e 	bne	r2,zero,1c6dc <OSTaskStkChk+0xdc>
   1c6c4:	e0bff617 	ldw	r2,-40(fp)
   1c6c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c6cc:	e0bffa17 	ldw	r2,-24(fp)
   1c6d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1c6d4:	008010c4 	movi	r2,67
   1c6d8:	00003706 	br	1c7b8 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1c6dc:	e0bff717 	ldw	r2,-36(fp)
   1c6e0:	10800058 	cmpnei	r2,r2,1
   1c6e4:	1000061e 	bne	r2,zero,1c700 <OSTaskStkChk+0x100>
   1c6e8:	e0bff617 	ldw	r2,-40(fp)
   1c6ec:	e0bffb15 	stw	r2,-20(fp)
   1c6f0:	e0bffb17 	ldw	r2,-20(fp)
   1c6f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1c6f8:	008010c4 	movi	r2,67
   1c6fc:	00002e06 	br	1c7b8 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   1c700:	e0bff717 	ldw	r2,-36(fp)
   1c704:	1080040b 	ldhu	r2,16(r2)
   1c708:	10bfffcc 	andi	r2,r2,65535
   1c70c:	1080004c 	andi	r2,r2,1
   1c710:	1000061e 	bne	r2,zero,1c72c <OSTaskStkChk+0x12c>
   1c714:	e0bff617 	ldw	r2,-40(fp)
   1c718:	e0bffc15 	stw	r2,-16(fp)
   1c71c:	e0bffc17 	ldw	r2,-16(fp)
   1c720:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1c724:	00801144 	movi	r2,69
   1c728:	00002306 	br	1c7b8 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   1c72c:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   1c730:	e0bff717 	ldw	r2,-36(fp)
   1c734:	10800317 	ldw	r2,12(r2)
   1c738:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   1c73c:	e0bff717 	ldw	r2,-36(fp)
   1c740:	10800217 	ldw	r2,8(r2)
   1c744:	e0bff415 	stw	r2,-48(fp)
   1c748:	e0bff617 	ldw	r2,-40(fp)
   1c74c:	e0bffd15 	stw	r2,-12(fp)
   1c750:	e0bffd17 	ldw	r2,-12(fp)
   1c754:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1c758:	00000306 	br	1c768 <OSTaskStkChk+0x168>
        nfree++;
   1c75c:	e0bff517 	ldw	r2,-44(fp)
   1c760:	10800044 	addi	r2,r2,1
   1c764:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1c768:	e0bff417 	ldw	r2,-48(fp)
   1c76c:	10c00104 	addi	r3,r2,4
   1c770:	e0fff415 	stw	r3,-48(fp)
   1c774:	10800017 	ldw	r2,0(r2)
   1c778:	103ff826 	beq	r2,zero,1c75c <__alt_mem_Flash_flash_data+0xf401c75c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   1c77c:	e0bff517 	ldw	r2,-44(fp)
   1c780:	1085883a 	add	r2,r2,r2
   1c784:	1085883a 	add	r2,r2,r2
   1c788:	1007883a 	mov	r3,r2
   1c78c:	e0bfff17 	ldw	r2,-4(fp)
   1c790:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   1c794:	e0fff817 	ldw	r3,-32(fp)
   1c798:	e0bff517 	ldw	r2,-44(fp)
   1c79c:	1885c83a 	sub	r2,r3,r2
   1c7a0:	1085883a 	add	r2,r2,r2
   1c7a4:	1085883a 	add	r2,r2,r2
   1c7a8:	1007883a 	mov	r3,r2
   1c7ac:	e0bfff17 	ldw	r2,-4(fp)
   1c7b0:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   1c7b4:	0005883a 	mov	r2,zero
}
   1c7b8:	e037883a 	mov	sp,fp
   1c7bc:	df000017 	ldw	fp,0(sp)
   1c7c0:	dec00104 	addi	sp,sp,4
   1c7c4:	f800283a 	ret

0001c7c8 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   1c7c8:	defff504 	addi	sp,sp,-44
   1c7cc:	dfc00a15 	stw	ra,40(sp)
   1c7d0:	df000915 	stw	fp,36(sp)
   1c7d4:	df000904 	addi	fp,sp,36
   1c7d8:	2005883a 	mov	r2,r4
   1c7dc:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c7e0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   1c7e4:	e0bfff03 	ldbu	r2,-4(fp)
   1c7e8:	10800518 	cmpnei	r2,r2,20
   1c7ec:	1000021e 	bne	r2,zero,1c7f8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   1c7f0:	008011c4 	movi	r2,71
   1c7f4:	00007406 	br	1c9c8 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1c7f8:	e0bfff03 	ldbu	r2,-4(fp)
   1c7fc:	10800530 	cmpltui	r2,r2,20
   1c800:	1000051e 	bne	r2,zero,1c818 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1c804:	e0bfff03 	ldbu	r2,-4(fp)
   1c808:	10803fe0 	cmpeqi	r2,r2,255
   1c80c:	1000021e 	bne	r2,zero,1c818 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   1c810:	00800a84 	movi	r2,42
   1c814:	00006c06 	br	1c9c8 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c818:	0005303a 	rdctl	r2,status
   1c81c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c820:	e0fffb17 	ldw	r3,-20(fp)
   1c824:	00bfff84 	movi	r2,-2
   1c828:	1884703a 	and	r2,r3,r2
   1c82c:	1001703a 	wrctl	status,r2
  
  return context;
   1c830:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1c834:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   1c838:	e0bfff03 	ldbu	r2,-4(fp)
   1c83c:	10803fd8 	cmpnei	r2,r2,255
   1c840:	1000081e 	bne	r2,zero,1c864 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1c844:	008000f4 	movhi	r2,3
   1c848:	10a7ef04 	addi	r2,r2,-24644
   1c84c:	10800017 	ldw	r2,0(r2)
   1c850:	10800c83 	ldbu	r2,50(r2)
   1c854:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   1c858:	00800044 	movi	r2,1
   1c85c:	e0bff705 	stb	r2,-36(fp)
   1c860:	00000b06 	br	1c890 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1c864:	008000f4 	movhi	r2,3
   1c868:	10a7ef04 	addi	r2,r2,-24644
   1c86c:	10800017 	ldw	r2,0(r2)
   1c870:	10800c83 	ldbu	r2,50(r2)
   1c874:	10c03fcc 	andi	r3,r2,255
   1c878:	e0bfff03 	ldbu	r2,-4(fp)
   1c87c:	1880031e 	bne	r3,r2,1c88c <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   1c880:	00800044 	movi	r2,1
   1c884:	e0bff705 	stb	r2,-36(fp)
   1c888:	00000106 	br	1c890 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   1c88c:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1c890:	e0ffff03 	ldbu	r3,-4(fp)
   1c894:	00800174 	movhi	r2,5
   1c898:	10bcb704 	addi	r2,r2,-3364
   1c89c:	18c7883a 	add	r3,r3,r3
   1c8a0:	18c7883a 	add	r3,r3,r3
   1c8a4:	10c5883a 	add	r2,r2,r3
   1c8a8:	10800017 	ldw	r2,0(r2)
   1c8ac:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   1c8b0:	e0bff917 	ldw	r2,-28(fp)
   1c8b4:	1000061e 	bne	r2,zero,1c8d0 <OSTaskSuspend+0x108>
   1c8b8:	e0bff817 	ldw	r2,-32(fp)
   1c8bc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c8c0:	e0bffc17 	ldw	r2,-16(fp)
   1c8c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   1c8c8:	00801204 	movi	r2,72
   1c8cc:	00003e06 	br	1c9c8 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   1c8d0:	e0bff917 	ldw	r2,-28(fp)
   1c8d4:	10800058 	cmpnei	r2,r2,1
   1c8d8:	1000061e 	bne	r2,zero,1c8f4 <OSTaskSuspend+0x12c>
   1c8dc:	e0bff817 	ldw	r2,-32(fp)
   1c8e0:	e0bffd15 	stw	r2,-12(fp)
   1c8e4:	e0bffd17 	ldw	r2,-12(fp)
   1c8e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1c8ec:	008010c4 	movi	r2,67
   1c8f0:	00003506 	br	1c9c8 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   1c8f4:	e0bff917 	ldw	r2,-28(fp)
   1c8f8:	10800d03 	ldbu	r2,52(r2)
   1c8fc:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   1c900:	e0fffa03 	ldbu	r3,-24(fp)
   1c904:	e13ffa03 	ldbu	r4,-24(fp)
   1c908:	008000f4 	movhi	r2,3
   1c90c:	10a7ec44 	addi	r2,r2,-24655
   1c910:	1105883a 	add	r2,r2,r4
   1c914:	10800003 	ldbu	r2,0(r2)
   1c918:	1009883a 	mov	r4,r2
   1c91c:	e0bff917 	ldw	r2,-28(fp)
   1c920:	10800d43 	ldbu	r2,53(r2)
   1c924:	0084303a 	nor	r2,zero,r2
   1c928:	2084703a 	and	r2,r4,r2
   1c92c:	1009883a 	mov	r4,r2
   1c930:	008000f4 	movhi	r2,3
   1c934:	10a7ec44 	addi	r2,r2,-24655
   1c938:	10c5883a 	add	r2,r2,r3
   1c93c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1c940:	e0fffa03 	ldbu	r3,-24(fp)
   1c944:	008000f4 	movhi	r2,3
   1c948:	10a7ec44 	addi	r2,r2,-24655
   1c94c:	10c5883a 	add	r2,r2,r3
   1c950:	10800003 	ldbu	r2,0(r2)
   1c954:	10803fcc 	andi	r2,r2,255
   1c958:	10000c1e 	bne	r2,zero,1c98c <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   1c95c:	e0bff917 	ldw	r2,-28(fp)
   1c960:	10800d83 	ldbu	r2,54(r2)
   1c964:	0084303a 	nor	r2,zero,r2
   1c968:	1007883a 	mov	r3,r2
   1c96c:	008000f4 	movhi	r2,3
   1c970:	10a7ec04 	addi	r2,r2,-24656
   1c974:	10800003 	ldbu	r2,0(r2)
   1c978:	1884703a 	and	r2,r3,r2
   1c97c:	1007883a 	mov	r3,r2
   1c980:	008000f4 	movhi	r2,3
   1c984:	10a7ec04 	addi	r2,r2,-24656
   1c988:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   1c98c:	e0bff917 	ldw	r2,-28(fp)
   1c990:	10800c03 	ldbu	r2,48(r2)
   1c994:	10800214 	ori	r2,r2,8
   1c998:	1007883a 	mov	r3,r2
   1c99c:	e0bff917 	ldw	r2,-28(fp)
   1c9a0:	10c00c05 	stb	r3,48(r2)
   1c9a4:	e0bff817 	ldw	r2,-32(fp)
   1c9a8:	e0bffe15 	stw	r2,-8(fp)
   1c9ac:	e0bffe17 	ldw	r2,-8(fp)
   1c9b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1c9b4:	e0bff703 	ldbu	r2,-36(fp)
   1c9b8:	10800058 	cmpnei	r2,r2,1
   1c9bc:	1000011e 	bne	r2,zero,1c9c4 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   1c9c0:	00161dc0 	call	161dc <OS_Sched>
    }
    return (OS_ERR_NONE);
   1c9c4:	0005883a 	mov	r2,zero
}
   1c9c8:	e037883a 	mov	sp,fp
   1c9cc:	dfc00117 	ldw	ra,4(sp)
   1c9d0:	df000017 	ldw	fp,0(sp)
   1c9d4:	dec00204 	addi	sp,sp,8
   1c9d8:	f800283a 	ret

0001c9dc <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   1c9dc:	defff604 	addi	sp,sp,-40
   1c9e0:	dfc00915 	stw	ra,36(sp)
   1c9e4:	df000815 	stw	fp,32(sp)
   1c9e8:	df000804 	addi	fp,sp,32
   1c9ec:	2005883a 	mov	r2,r4
   1c9f0:	e17fff15 	stw	r5,-4(fp)
   1c9f4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c9f8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   1c9fc:	e0bffe03 	ldbu	r2,-8(fp)
   1ca00:	10800570 	cmpltui	r2,r2,21
   1ca04:	1000051e 	bne	r2,zero,1ca1c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   1ca08:	e0bffe03 	ldbu	r2,-8(fp)
   1ca0c:	10803fe0 	cmpeqi	r2,r2,255
   1ca10:	1000021e 	bne	r2,zero,1ca1c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1ca14:	00800a84 	movi	r2,42
   1ca18:	00003606 	br	1caf4 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1ca1c:	e0bfff17 	ldw	r2,-4(fp)
   1ca20:	1000021e 	bne	r2,zero,1ca2c <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1ca24:	00800244 	movi	r2,9
   1ca28:	00003206 	br	1caf4 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ca2c:	0005303a 	rdctl	r2,status
   1ca30:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ca34:	e0fffa17 	ldw	r3,-24(fp)
   1ca38:	00bfff84 	movi	r2,-2
   1ca3c:	1884703a 	and	r2,r3,r2
   1ca40:	1001703a 	wrctl	status,r2
  
  return context;
   1ca44:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1ca48:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   1ca4c:	e0bffe03 	ldbu	r2,-8(fp)
   1ca50:	10803fd8 	cmpnei	r2,r2,255
   1ca54:	1000051e 	bne	r2,zero,1ca6c <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   1ca58:	008000f4 	movhi	r2,3
   1ca5c:	10a7ef04 	addi	r2,r2,-24644
   1ca60:	10800017 	ldw	r2,0(r2)
   1ca64:	10800c83 	ldbu	r2,50(r2)
   1ca68:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1ca6c:	e0fffe03 	ldbu	r3,-8(fp)
   1ca70:	00800174 	movhi	r2,5
   1ca74:	10bcb704 	addi	r2,r2,-3364
   1ca78:	18c7883a 	add	r3,r3,r3
   1ca7c:	18c7883a 	add	r3,r3,r3
   1ca80:	10c5883a 	add	r2,r2,r3
   1ca84:	10800017 	ldw	r2,0(r2)
   1ca88:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1ca8c:	e0bff917 	ldw	r2,-28(fp)
   1ca90:	1000061e 	bne	r2,zero,1caac <OSTaskQuery+0xd0>
   1ca94:	e0bff817 	ldw	r2,-32(fp)
   1ca98:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ca9c:	e0bffb17 	ldw	r2,-20(fp)
   1caa0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1caa4:	00800a44 	movi	r2,41
   1caa8:	00001206 	br	1caf4 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1caac:	e0bff917 	ldw	r2,-28(fp)
   1cab0:	10800058 	cmpnei	r2,r2,1
   1cab4:	1000061e 	bne	r2,zero,1cad0 <OSTaskQuery+0xf4>
   1cab8:	e0bff817 	ldw	r2,-32(fp)
   1cabc:	e0bffc15 	stw	r2,-16(fp)
   1cac0:	e0bffc17 	ldw	r2,-16(fp)
   1cac4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1cac8:	008010c4 	movi	r2,67
   1cacc:	00000906 	br	1caf4 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   1cad0:	e13fff17 	ldw	r4,-4(fp)
   1cad4:	e17ff917 	ldw	r5,-28(fp)
   1cad8:	01801b04 	movi	r6,108
   1cadc:	00161780 	call	16178 <OS_MemCopy>
   1cae0:	e0bff817 	ldw	r2,-32(fp)
   1cae4:	e0bffd15 	stw	r2,-12(fp)
   1cae8:	e0bffd17 	ldw	r2,-12(fp)
   1caec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1caf0:	0005883a 	mov	r2,zero
}
   1caf4:	e037883a 	mov	sp,fp
   1caf8:	dfc00117 	ldw	ra,4(sp)
   1cafc:	df000017 	ldw	fp,0(sp)
   1cb00:	dec00204 	addi	sp,sp,8
   1cb04:	f800283a 	ret

0001cb08 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1cb08:	defffc04 	addi	sp,sp,-16
   1cb0c:	df000315 	stw	fp,12(sp)
   1cb10:	df000304 	addi	fp,sp,12
   1cb14:	e13ffd15 	stw	r4,-12(fp)
   1cb18:	e17ffe15 	stw	r5,-8(fp)
   1cb1c:	3005883a 	mov	r2,r6
   1cb20:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1cb24:	e0bfff0b 	ldhu	r2,-4(fp)
   1cb28:	1080004c 	andi	r2,r2,1
   1cb2c:	10000d26 	beq	r2,zero,1cb64 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   1cb30:	e0bfff0b 	ldhu	r2,-4(fp)
   1cb34:	1080008c 	andi	r2,r2,2
   1cb38:	10000a26 	beq	r2,zero,1cb64 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1cb3c:	00000706 	br	1cb5c <OS_TaskStkClr+0x54>
                size--;
   1cb40:	e0bffe17 	ldw	r2,-8(fp)
   1cb44:	10bfffc4 	addi	r2,r2,-1
   1cb48:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1cb4c:	e0bffd17 	ldw	r2,-12(fp)
   1cb50:	10c00104 	addi	r3,r2,4
   1cb54:	e0fffd15 	stw	r3,-12(fp)
   1cb58:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1cb5c:	e0bffe17 	ldw	r2,-8(fp)
   1cb60:	103ff71e 	bne	r2,zero,1cb40 <__alt_mem_Flash_flash_data+0xf401cb40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1cb64:	e037883a 	mov	sp,fp
   1cb68:	df000017 	ldw	fp,0(sp)
   1cb6c:	dec00104 	addi	sp,sp,4
   1cb70:	f800283a 	ret

0001cb74 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1cb74:	defff904 	addi	sp,sp,-28
   1cb78:	dfc00615 	stw	ra,24(sp)
   1cb7c:	df000515 	stw	fp,20(sp)
   1cb80:	df000504 	addi	fp,sp,20
   1cb84:	2005883a 	mov	r2,r4
   1cb88:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1cb8c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1cb90:	008000f4 	movhi	r2,3
   1cb94:	10a7ee04 	addi	r2,r2,-24648
   1cb98:	10800003 	ldbu	r2,0(r2)
   1cb9c:	10803fcc 	andi	r2,r2,255
   1cba0:	10000126 	beq	r2,zero,1cba8 <OSTimeDly+0x34>
        return;
   1cba4:	00004006 	br	1cca8 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   1cba8:	e0bfff0b 	ldhu	r2,-4(fp)
   1cbac:	10003e26 	beq	r2,zero,1cca8 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cbb0:	0005303a 	rdctl	r2,status
   1cbb4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cbb8:	e0fffd17 	ldw	r3,-12(fp)
   1cbbc:	00bfff84 	movi	r2,-2
   1cbc0:	1884703a 	and	r2,r3,r2
   1cbc4:	1001703a 	wrctl	status,r2
  
  return context;
   1cbc8:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   1cbcc:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   1cbd0:	008000f4 	movhi	r2,3
   1cbd4:	10a7ef04 	addi	r2,r2,-24644
   1cbd8:	10800017 	ldw	r2,0(r2)
   1cbdc:	10800d03 	ldbu	r2,52(r2)
   1cbe0:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1cbe4:	e0fffc03 	ldbu	r3,-16(fp)
   1cbe8:	e13ffc03 	ldbu	r4,-16(fp)
   1cbec:	008000f4 	movhi	r2,3
   1cbf0:	10a7ec44 	addi	r2,r2,-24655
   1cbf4:	1105883a 	add	r2,r2,r4
   1cbf8:	10800003 	ldbu	r2,0(r2)
   1cbfc:	1009883a 	mov	r4,r2
   1cc00:	008000f4 	movhi	r2,3
   1cc04:	10a7ef04 	addi	r2,r2,-24644
   1cc08:	10800017 	ldw	r2,0(r2)
   1cc0c:	10800d43 	ldbu	r2,53(r2)
   1cc10:	0084303a 	nor	r2,zero,r2
   1cc14:	2084703a 	and	r2,r4,r2
   1cc18:	1009883a 	mov	r4,r2
   1cc1c:	008000f4 	movhi	r2,3
   1cc20:	10a7ec44 	addi	r2,r2,-24655
   1cc24:	10c5883a 	add	r2,r2,r3
   1cc28:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1cc2c:	e0fffc03 	ldbu	r3,-16(fp)
   1cc30:	008000f4 	movhi	r2,3
   1cc34:	10a7ec44 	addi	r2,r2,-24655
   1cc38:	10c5883a 	add	r2,r2,r3
   1cc3c:	10800003 	ldbu	r2,0(r2)
   1cc40:	10803fcc 	andi	r2,r2,255
   1cc44:	10000e1e 	bne	r2,zero,1cc80 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1cc48:	008000f4 	movhi	r2,3
   1cc4c:	10a7ef04 	addi	r2,r2,-24644
   1cc50:	10800017 	ldw	r2,0(r2)
   1cc54:	10800d83 	ldbu	r2,54(r2)
   1cc58:	0084303a 	nor	r2,zero,r2
   1cc5c:	1007883a 	mov	r3,r2
   1cc60:	008000f4 	movhi	r2,3
   1cc64:	10a7ec04 	addi	r2,r2,-24656
   1cc68:	10800003 	ldbu	r2,0(r2)
   1cc6c:	1884703a 	and	r2,r3,r2
   1cc70:	1007883a 	mov	r3,r2
   1cc74:	008000f4 	movhi	r2,3
   1cc78:	10a7ec04 	addi	r2,r2,-24656
   1cc7c:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   1cc80:	008000f4 	movhi	r2,3
   1cc84:	10a7ef04 	addi	r2,r2,-24644
   1cc88:	10800017 	ldw	r2,0(r2)
   1cc8c:	e0ffff0b 	ldhu	r3,-4(fp)
   1cc90:	10c00b8d 	sth	r3,46(r2)
   1cc94:	e0bffb17 	ldw	r2,-20(fp)
   1cc98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cc9c:	e0bffe17 	ldw	r2,-8(fp)
   1cca0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1cca4:	00161dc0 	call	161dc <OS_Sched>
    }
}
   1cca8:	e037883a 	mov	sp,fp
   1ccac:	dfc00117 	ldw	ra,4(sp)
   1ccb0:	df000017 	ldw	fp,0(sp)
   1ccb4:	dec00204 	addi	sp,sp,8
   1ccb8:	f800283a 	ret

0001ccbc <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1ccbc:	defff804 	addi	sp,sp,-32
   1ccc0:	dfc00715 	stw	ra,28(sp)
   1ccc4:	df000615 	stw	fp,24(sp)
   1ccc8:	df000604 	addi	fp,sp,24
   1cccc:	2015883a 	mov	r10,r4
   1ccd0:	2809883a 	mov	r4,r5
   1ccd4:	3007883a 	mov	r3,r6
   1ccd8:	3805883a 	mov	r2,r7
   1ccdc:	e2bffc05 	stb	r10,-16(fp)
   1cce0:	e13ffd05 	stb	r4,-12(fp)
   1cce4:	e0fffe05 	stb	r3,-8(fp)
   1cce8:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1ccec:	008000f4 	movhi	r2,3
   1ccf0:	10a7ee04 	addi	r2,r2,-24648
   1ccf4:	10800003 	ldbu	r2,0(r2)
   1ccf8:	10803fcc 	andi	r2,r2,255
   1ccfc:	10000226 	beq	r2,zero,1cd08 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   1cd00:	00801544 	movi	r2,85
   1cd04:	00004206 	br	1ce10 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1cd08:	e0bffc03 	ldbu	r2,-16(fp)
   1cd0c:	1000081e 	bne	r2,zero,1cd30 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   1cd10:	e0bffd03 	ldbu	r2,-12(fp)
   1cd14:	1000061e 	bne	r2,zero,1cd30 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   1cd18:	e0bffe03 	ldbu	r2,-8(fp)
   1cd1c:	1000041e 	bne	r2,zero,1cd30 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   1cd20:	e0bfff0b 	ldhu	r2,-4(fp)
   1cd24:	1000021e 	bne	r2,zero,1cd30 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   1cd28:	00801504 	movi	r2,84
   1cd2c:	00003806 	br	1ce10 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   1cd30:	e0bffd03 	ldbu	r2,-12(fp)
   1cd34:	10800f30 	cmpltui	r2,r2,60
   1cd38:	1000021e 	bne	r2,zero,1cd44 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   1cd3c:	00801444 	movi	r2,81
   1cd40:	00003306 	br	1ce10 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   1cd44:	e0bffe03 	ldbu	r2,-8(fp)
   1cd48:	10800f30 	cmpltui	r2,r2,60
   1cd4c:	1000021e 	bne	r2,zero,1cd58 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1cd50:	00801484 	movi	r2,82
   1cd54:	00002e06 	br	1ce10 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   1cd58:	e0bfff0b 	ldhu	r2,-4(fp)
   1cd5c:	1080fa30 	cmpltui	r2,r2,1000
   1cd60:	1000021e 	bne	r2,zero,1cd6c <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   1cd64:	008014c4 	movi	r2,83
   1cd68:	00002906 	br	1ce10 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1cd6c:	e0bffc03 	ldbu	r2,-16(fp)
   1cd70:	10c38424 	muli	r3,r2,3600
   1cd74:	e0bffd03 	ldbu	r2,-12(fp)
   1cd78:	10800f24 	muli	r2,r2,60
   1cd7c:	1887883a 	add	r3,r3,r2
   1cd80:	e0bffe03 	ldbu	r2,-8(fp)
   1cd84:	1885883a 	add	r2,r3,r2
   1cd88:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   1cd8c:	e0bfff0b 	ldhu	r2,-4(fp)
   1cd90:	10800f84 	addi	r2,r2,62
   1cd94:	100690fa 	slli	r3,r2,3
   1cd98:	008418b4 	movhi	r2,4194
   1cd9c:	109374c4 	addi	r2,r2,19923
   1cda0:	188a383a 	mulxuu	r5,r3,r2
   1cda4:	1885383a 	mul	r2,r3,r2
   1cda8:	1011883a 	mov	r8,r2
   1cdac:	2813883a 	mov	r9,r5
   1cdb0:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1cdb4:	2085883a 	add	r2,r4,r2
   1cdb8:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   1cdbc:	e0bffb17 	ldw	r2,-20(fp)
   1cdc0:	1004d43a 	srli	r2,r2,16
   1cdc4:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   1cdc8:	e0bffb17 	ldw	r2,-20(fp)
   1cdcc:	10bfffcc 	andi	r2,r2,65535
   1cdd0:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   1cdd4:	e0bffb17 	ldw	r2,-20(fp)
   1cdd8:	10bfffcc 	andi	r2,r2,65535
   1cddc:	1009883a 	mov	r4,r2
   1cde0:	001cb740 	call	1cb74 <OSTimeDly>
    while (loops > 0) {
   1cde4:	00000706 	br	1ce04 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   1cde8:	01200014 	movui	r4,32768
   1cdec:	001cb740 	call	1cb74 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   1cdf0:	01200014 	movui	r4,32768
   1cdf4:	001cb740 	call	1cb74 <OSTimeDly>
        loops--;
   1cdf8:	e0bffa0b 	ldhu	r2,-24(fp)
   1cdfc:	10bfffc4 	addi	r2,r2,-1
   1ce00:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1ce04:	e0bffa0b 	ldhu	r2,-24(fp)
   1ce08:	103ff71e 	bne	r2,zero,1cde8 <__alt_mem_Flash_flash_data+0xf401cde8>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1ce0c:	0005883a 	mov	r2,zero
}
   1ce10:	e037883a 	mov	sp,fp
   1ce14:	dfc00117 	ldw	ra,4(sp)
   1ce18:	df000017 	ldw	fp,0(sp)
   1ce1c:	dec00204 	addi	sp,sp,8
   1ce20:	f800283a 	ret

0001ce24 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1ce24:	defff504 	addi	sp,sp,-44
   1ce28:	dfc00a15 	stw	ra,40(sp)
   1ce2c:	df000915 	stw	fp,36(sp)
   1ce30:	df000904 	addi	fp,sp,36
   1ce34:	2005883a 	mov	r2,r4
   1ce38:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1ce3c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   1ce40:	e0bfff03 	ldbu	r2,-4(fp)
   1ce44:	10800530 	cmpltui	r2,r2,20
   1ce48:	1000021e 	bne	r2,zero,1ce54 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1ce4c:	00800a84 	movi	r2,42
   1ce50:	00006b06 	br	1d000 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ce54:	0005303a 	rdctl	r2,status
   1ce58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ce5c:	e0fff917 	ldw	r3,-28(fp)
   1ce60:	00bfff84 	movi	r2,-2
   1ce64:	1884703a 	and	r2,r3,r2
   1ce68:	1001703a 	wrctl	status,r2
  
  return context;
   1ce6c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1ce70:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1ce74:	e0ffff03 	ldbu	r3,-4(fp)
   1ce78:	00800174 	movhi	r2,5
   1ce7c:	10bcb704 	addi	r2,r2,-3364
   1ce80:	18c7883a 	add	r3,r3,r3
   1ce84:	18c7883a 	add	r3,r3,r3
   1ce88:	10c5883a 	add	r2,r2,r3
   1ce8c:	10800017 	ldw	r2,0(r2)
   1ce90:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   1ce94:	e0bff817 	ldw	r2,-32(fp)
   1ce98:	1000061e 	bne	r2,zero,1ceb4 <OSTimeDlyResume+0x90>
   1ce9c:	e0bff717 	ldw	r2,-36(fp)
   1cea0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cea4:	e0bffa17 	ldw	r2,-24(fp)
   1cea8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1ceac:	008010c4 	movi	r2,67
   1ceb0:	00005306 	br	1d000 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1ceb4:	e0bff817 	ldw	r2,-32(fp)
   1ceb8:	10800058 	cmpnei	r2,r2,1
   1cebc:	1000061e 	bne	r2,zero,1ced8 <OSTimeDlyResume+0xb4>
   1cec0:	e0bff717 	ldw	r2,-36(fp)
   1cec4:	e0bffb15 	stw	r2,-20(fp)
   1cec8:	e0bffb17 	ldw	r2,-20(fp)
   1cecc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1ced0:	008010c4 	movi	r2,67
   1ced4:	00004a06 	br	1d000 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1ced8:	e0bff817 	ldw	r2,-32(fp)
   1cedc:	10800b8b 	ldhu	r2,46(r2)
   1cee0:	10bfffcc 	andi	r2,r2,65535
   1cee4:	1000061e 	bne	r2,zero,1cf00 <OSTimeDlyResume+0xdc>
   1cee8:	e0bff717 	ldw	r2,-36(fp)
   1ceec:	e0bffc15 	stw	r2,-16(fp)
   1cef0:	e0bffc17 	ldw	r2,-16(fp)
   1cef4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1cef8:	00801404 	movi	r2,80
   1cefc:	00004006 	br	1d000 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   1cf00:	e0bff817 	ldw	r2,-32(fp)
   1cf04:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1cf08:	e0bff817 	ldw	r2,-32(fp)
   1cf0c:	10800c03 	ldbu	r2,48(r2)
   1cf10:	10803fcc 	andi	r2,r2,255
   1cf14:	10800dcc 	andi	r2,r2,55
   1cf18:	10000b26 	beq	r2,zero,1cf48 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   1cf1c:	e0bff817 	ldw	r2,-32(fp)
   1cf20:	10c00c03 	ldbu	r3,48(r2)
   1cf24:	00bff204 	movi	r2,-56
   1cf28:	1884703a 	and	r2,r3,r2
   1cf2c:	1007883a 	mov	r3,r2
   1cf30:	e0bff817 	ldw	r2,-32(fp)
   1cf34:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1cf38:	e0bff817 	ldw	r2,-32(fp)
   1cf3c:	00c00044 	movi	r3,1
   1cf40:	10c00c45 	stb	r3,49(r2)
   1cf44:	00000206 	br	1cf50 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1cf48:	e0bff817 	ldw	r2,-32(fp)
   1cf4c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1cf50:	e0bff817 	ldw	r2,-32(fp)
   1cf54:	10800c03 	ldbu	r2,48(r2)
   1cf58:	10803fcc 	andi	r2,r2,255
   1cf5c:	1080020c 	andi	r2,r2,8
   1cf60:	1000221e 	bne	r2,zero,1cfec <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1cf64:	e0bff817 	ldw	r2,-32(fp)
   1cf68:	10c00d83 	ldbu	r3,54(r2)
   1cf6c:	008000f4 	movhi	r2,3
   1cf70:	10a7ec04 	addi	r2,r2,-24656
   1cf74:	10800003 	ldbu	r2,0(r2)
   1cf78:	1884b03a 	or	r2,r3,r2
   1cf7c:	1007883a 	mov	r3,r2
   1cf80:	008000f4 	movhi	r2,3
   1cf84:	10a7ec04 	addi	r2,r2,-24656
   1cf88:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1cf8c:	e0bff817 	ldw	r2,-32(fp)
   1cf90:	10800d03 	ldbu	r2,52(r2)
   1cf94:	10c03fcc 	andi	r3,r2,255
   1cf98:	e0bff817 	ldw	r2,-32(fp)
   1cf9c:	10800d03 	ldbu	r2,52(r2)
   1cfa0:	11003fcc 	andi	r4,r2,255
   1cfa4:	008000f4 	movhi	r2,3
   1cfa8:	10a7ec44 	addi	r2,r2,-24655
   1cfac:	1105883a 	add	r2,r2,r4
   1cfb0:	11000003 	ldbu	r4,0(r2)
   1cfb4:	e0bff817 	ldw	r2,-32(fp)
   1cfb8:	10800d43 	ldbu	r2,53(r2)
   1cfbc:	2084b03a 	or	r2,r4,r2
   1cfc0:	1009883a 	mov	r4,r2
   1cfc4:	008000f4 	movhi	r2,3
   1cfc8:	10a7ec44 	addi	r2,r2,-24655
   1cfcc:	10c5883a 	add	r2,r2,r3
   1cfd0:	11000005 	stb	r4,0(r2)
   1cfd4:	e0bff717 	ldw	r2,-36(fp)
   1cfd8:	e0bffd15 	stw	r2,-12(fp)
   1cfdc:	e0bffd17 	ldw	r2,-12(fp)
   1cfe0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   1cfe4:	00161dc0 	call	161dc <OS_Sched>
   1cfe8:	00000406 	br	1cffc <OSTimeDlyResume+0x1d8>
   1cfec:	e0bff717 	ldw	r2,-36(fp)
   1cff0:	e0bffe15 	stw	r2,-8(fp)
   1cff4:	e0bffe17 	ldw	r2,-8(fp)
   1cff8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1cffc:	0005883a 	mov	r2,zero
}
   1d000:	e037883a 	mov	sp,fp
   1d004:	dfc00117 	ldw	ra,4(sp)
   1d008:	df000017 	ldw	fp,0(sp)
   1d00c:	dec00204 	addi	sp,sp,8
   1d010:	f800283a 	ret

0001d014 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1d014:	defffb04 	addi	sp,sp,-20
   1d018:	df000415 	stw	fp,16(sp)
   1d01c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1d020:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d024:	0005303a 	rdctl	r2,status
   1d028:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d02c:	e0fffe17 	ldw	r3,-8(fp)
   1d030:	00bfff84 	movi	r2,-2
   1d034:	1884703a 	and	r2,r3,r2
   1d038:	1001703a 	wrctl	status,r2
  
  return context;
   1d03c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1d040:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1d044:	008000f4 	movhi	r2,3
   1d048:	10a7f004 	addi	r2,r2,-24640
   1d04c:	10800017 	ldw	r2,0(r2)
   1d050:	e0bffd15 	stw	r2,-12(fp)
   1d054:	e0bffc17 	ldw	r2,-16(fp)
   1d058:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d05c:	e0bfff17 	ldw	r2,-4(fp)
   1d060:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1d064:	e0bffd17 	ldw	r2,-12(fp)
}
   1d068:	e037883a 	mov	sp,fp
   1d06c:	df000017 	ldw	fp,0(sp)
   1d070:	dec00104 	addi	sp,sp,4
   1d074:	f800283a 	ret

0001d078 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   1d078:	defffb04 	addi	sp,sp,-20
   1d07c:	df000415 	stw	fp,16(sp)
   1d080:	df000404 	addi	fp,sp,16
   1d084:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1d088:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d08c:	0005303a 	rdctl	r2,status
   1d090:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d094:	e0fffd17 	ldw	r3,-12(fp)
   1d098:	00bfff84 	movi	r2,-2
   1d09c:	1884703a 	and	r2,r3,r2
   1d0a0:	1001703a 	wrctl	status,r2
  
  return context;
   1d0a4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   1d0a8:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1d0ac:	008000f4 	movhi	r2,3
   1d0b0:	10a7f004 	addi	r2,r2,-24640
   1d0b4:	e0ffff17 	ldw	r3,-4(fp)
   1d0b8:	10c00015 	stw	r3,0(r2)
   1d0bc:	e0bffc17 	ldw	r2,-16(fp)
   1d0c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d0c4:	e0bffe17 	ldw	r2,-8(fp)
   1d0c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1d0cc:	e037883a 	mov	sp,fp
   1d0d0:	df000017 	ldw	fp,0(sp)
   1d0d4:	dec00104 	addi	sp,sp,4
   1d0d8:	f800283a 	ret

0001d0dc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1d0dc:	defffd04 	addi	sp,sp,-12
   1d0e0:	dfc00215 	stw	ra,8(sp)
   1d0e4:	df000115 	stw	fp,4(sp)
   1d0e8:	df000104 	addi	fp,sp,4
   1d0ec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1d0f0:	e13fff17 	ldw	r4,-4(fp)
   1d0f4:	014000b4 	movhi	r5,2
   1d0f8:	295fba04 	addi	r5,r5,32488
   1d0fc:	0023e540 	call	23e54 <alt_dev_llist_insert>
}
   1d100:	e037883a 	mov	sp,fp
   1d104:	dfc00117 	ldw	ra,4(sp)
   1d108:	df000017 	ldw	fp,0(sp)
   1d10c:	dec00204 	addi	sp,sp,8
   1d110:	f800283a 	ret

0001d114 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1d114:	defffd04 	addi	sp,sp,-12
   1d118:	dfc00215 	stw	ra,8(sp)
   1d11c:	df000115 	stw	fp,4(sp)
   1d120:	df000104 	addi	fp,sp,4
   1d124:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1d128:	00247680 	call	24768 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1d12c:	00800044 	movi	r2,1
   1d130:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1d134:	e037883a 	mov	sp,fp
   1d138:	dfc00117 	ldw	ra,4(sp)
   1d13c:	df000017 	ldw	fp,0(sp)
   1d140:	dec00204 	addi	sp,sp,8
   1d144:	f800283a 	ret

0001d148 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1d148:	defffd04 	addi	sp,sp,-12
   1d14c:	dfc00215 	stw	ra,8(sp)
   1d150:	df000115 	stw	fp,4(sp)
   1d154:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1d158:	01040034 	movhi	r4,4096
   1d15c:	21080004 	addi	r4,r4,8192
   1d160:	000b883a 	mov	r5,zero
   1d164:	000d883a 	mov	r6,zero
   1d168:	01c00204 	movi	r7,8
   1d16c:	00226600 	call	22660 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   1d170:	010000b4 	movhi	r4,2
   1d174:	211ab204 	addi	r4,r4,27336
   1d178:	000b883a 	mov	r5,zero
   1d17c:	01800204 	movi	r6,8
   1d180:	0021a280 	call	21a28 <altera_avalon_jtag_uart_init>
   1d184:	010000b4 	movhi	r4,2
   1d188:	211aa804 	addi	r4,r4,27296
   1d18c:	001d0dc0 	call	1d0dc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   1d190:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1d194:	010000b4 	movhi	r4,2
   1d198:	211ec304 	addi	r4,r4,31500
   1d19c:	001d0dc0 	call	1d0dc <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   1d1a0:	010000b4 	movhi	r4,2
   1d1a4:	211ecf04 	addi	r4,r4,31548
   1d1a8:	001d0dc0 	call	1d0dc <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   1d1ac:	010000b4 	movhi	r4,2
   1d1b0:	211edb04 	addi	r4,r4,31596
   1d1b4:	00227900 	call	22790 <alt_up_character_lcd_init>
   1d1b8:	010000b4 	movhi	r4,2
   1d1bc:	211edb04 	addi	r4,r4,31596
   1d1c0:	001d0dc0 	call	1d0dc <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   1d1c4:	010000b4 	movhi	r4,2
   1d1c8:	211ee604 	addi	r4,r4,31640
   1d1cc:	001d0dc0 	call	1d0dc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   1d1d0:	010000b4 	movhi	r4,2
   1d1d4:	211ef104 	addi	r4,r4,31684
   1d1d8:	001d0dc0 	call	1d0dc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   1d1dc:	010000b4 	movhi	r4,2
   1d1e0:	211efc04 	addi	r4,r4,31728
   1d1e4:	001d0dc0 	call	1d0dc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   1d1e8:	010000b4 	movhi	r4,2
   1d1ec:	211f0704 	addi	r4,r4,31772
   1d1f0:	001d0dc0 	call	1d0dc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   1d1f4:	010000b4 	movhi	r4,2
   1d1f8:	211f1204 	addi	r4,r4,31816
   1d1fc:	001d0dc0 	call	1d0dc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   1d200:	010000b4 	movhi	r4,2
   1d204:	211f1d04 	addi	r4,r4,31860
   1d208:	001d0dc0 	call	1d0dc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   1d20c:	010000b4 	movhi	r4,2
   1d210:	211f2804 	addi	r4,r4,31904
   1d214:	001d0dc0 	call	1d0dc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   1d218:	010000b4 	movhi	r4,2
   1d21c:	211f3304 	addi	r4,r4,31948
   1d220:	001d0dc0 	call	1d0dc <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   1d224:	010000b4 	movhi	r4,2
   1d228:	211f3e04 	addi	r4,r4,31992
   1d22c:	00230a80 	call	230a8 <alt_up_ps2_init>
   1d230:	010000b4 	movhi	r4,2
   1d234:	211f3e04 	addi	r4,r4,31992
   1d238:	001d0dc0 	call	1d0dc <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   1d23c:	010000b4 	movhi	r4,2
   1d240:	211f4c04 	addi	r4,r4,32048
   1d244:	00230a80 	call	230a8 <alt_up_ps2_init>
   1d248:	010000b4 	movhi	r4,2
   1d24c:	211f4c04 	addi	r4,r4,32048
   1d250:	001d0dc0 	call	1d0dc <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1d254:	010000b4 	movhi	r4,2
   1d258:	211f5a04 	addi	r4,r4,32104
   1d25c:	001d0dc0 	call	1d0dc <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   1d260:	010000b4 	movhi	r4,2
   1d264:	211f6504 	addi	r4,r4,32148
   1d268:	001d0dc0 	call	1d0dc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   1d26c:	008000b4 	movhi	r2,2
   1d270:	109f7204 	addi	r2,r2,32200
   1d274:	10800a17 	ldw	r2,40(r2)
   1d278:	10800104 	addi	r2,r2,4
   1d27c:	10800017 	ldw	r2,0(r2)
   1d280:	10ffffcc 	andi	r3,r2,65535
   1d284:	008000b4 	movhi	r2,2
   1d288:	109f7204 	addi	r2,r2,32200
   1d28c:	10c00c15 	stw	r3,48(r2)
   1d290:	008000b4 	movhi	r2,2
   1d294:	109f7204 	addi	r2,r2,32200
   1d298:	10800a17 	ldw	r2,40(r2)
   1d29c:	10800104 	addi	r2,r2,4
   1d2a0:	10800017 	ldw	r2,0(r2)
   1d2a4:	1006d43a 	srli	r3,r2,16
   1d2a8:	008000b4 	movhi	r2,2
   1d2ac:	109f7204 	addi	r2,r2,32200
   1d2b0:	10c00d15 	stw	r3,52(r2)
   1d2b4:	008000b4 	movhi	r2,2
   1d2b8:	109f7204 	addi	r2,r2,32200
   1d2bc:	10800c17 	ldw	r2,48(r2)
   1d2c0:	10801068 	cmpgeui	r2,r2,65
   1d2c4:	1000081e 	bne	r2,zero,1d2e8 <alt_sys_init+0x1a0>
   1d2c8:	008000b4 	movhi	r2,2
   1d2cc:	109f7204 	addi	r2,r2,32200
   1d2d0:	00c00fc4 	movi	r3,63
   1d2d4:	10c00f15 	stw	r3,60(r2)
   1d2d8:	008000b4 	movhi	r2,2
   1d2dc:	109f7204 	addi	r2,r2,32200
   1d2e0:	00c00184 	movi	r3,6
   1d2e4:	10c01015 	stw	r3,64(r2)
   1d2e8:	008000b4 	movhi	r2,2
   1d2ec:	109f7204 	addi	r2,r2,32200
   1d2f0:	10800d17 	ldw	r2,52(r2)
   1d2f4:	10800868 	cmpgeui	r2,r2,33
   1d2f8:	1000041e 	bne	r2,zero,1d30c <alt_sys_init+0x1c4>
   1d2fc:	008000b4 	movhi	r2,2
   1d300:	109f7204 	addi	r2,r2,32200
   1d304:	00c007c4 	movi	r3,31
   1d308:	10c01115 	stw	r3,68(r2)
   1d30c:	010000b4 	movhi	r4,2
   1d310:	211f7204 	addi	r4,r4,32200
   1d314:	00239c00 	call	239c0 <alt_up_char_buffer_init>
   1d318:	010000b4 	movhi	r4,2
   1d31c:	211f7204 	addi	r4,r4,32200
   1d320:	001d0dc0 	call	1d0dc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   1d324:	008000b4 	movhi	r2,2
   1d328:	109f8404 	addi	r2,r2,32272
   1d32c:	10800a17 	ldw	r2,40(r2)
   1d330:	10800017 	ldw	r2,0(r2)
   1d334:	1007883a 	mov	r3,r2
   1d338:	008000b4 	movhi	r2,2
   1d33c:	109f8404 	addi	r2,r2,32272
   1d340:	10c00b15 	stw	r3,44(r2)
   1d344:	008000b4 	movhi	r2,2
   1d348:	109f8404 	addi	r2,r2,32272
   1d34c:	10800a17 	ldw	r2,40(r2)
   1d350:	10800104 	addi	r2,r2,4
   1d354:	10800017 	ldw	r2,0(r2)
   1d358:	1007883a 	mov	r3,r2
   1d35c:	008000b4 	movhi	r2,2
   1d360:	109f8404 	addi	r2,r2,32272
   1d364:	10c00c15 	stw	r3,48(r2)
   1d368:	008000b4 	movhi	r2,2
   1d36c:	109f8404 	addi	r2,r2,32272
   1d370:	10800a17 	ldw	r2,40(r2)
   1d374:	10800204 	addi	r2,r2,8
   1d378:	10800017 	ldw	r2,0(r2)
   1d37c:	10ffffcc 	andi	r3,r2,65535
   1d380:	008000b4 	movhi	r2,2
   1d384:	109f8404 	addi	r2,r2,32272
   1d388:	10c00f15 	stw	r3,60(r2)
   1d38c:	008000b4 	movhi	r2,2
   1d390:	109f8404 	addi	r2,r2,32272
   1d394:	10800a17 	ldw	r2,40(r2)
   1d398:	10800204 	addi	r2,r2,8
   1d39c:	10800017 	ldw	r2,0(r2)
   1d3a0:	1006d43a 	srli	r3,r2,16
   1d3a4:	008000b4 	movhi	r2,2
   1d3a8:	109f8404 	addi	r2,r2,32272
   1d3ac:	10c01015 	stw	r3,64(r2)
   1d3b0:	008000b4 	movhi	r2,2
   1d3b4:	109f8404 	addi	r2,r2,32272
   1d3b8:	10800a17 	ldw	r2,40(r2)
   1d3bc:	10800304 	addi	r2,r2,12
   1d3c0:	10800017 	ldw	r2,0(r2)
   1d3c4:	1005d07a 	srai	r2,r2,1
   1d3c8:	10c0004c 	andi	r3,r2,1
   1d3cc:	008000b4 	movhi	r2,2
   1d3d0:	109f8404 	addi	r2,r2,32272
   1d3d4:	10c00d15 	stw	r3,52(r2)
   1d3d8:	008000b4 	movhi	r2,2
   1d3dc:	109f8404 	addi	r2,r2,32272
   1d3e0:	10800a17 	ldw	r2,40(r2)
   1d3e4:	10800304 	addi	r2,r2,12
   1d3e8:	10800017 	ldw	r2,0(r2)
   1d3ec:	1005d13a 	srai	r2,r2,4
   1d3f0:	10c003cc 	andi	r3,r2,15
   1d3f4:	008000b4 	movhi	r2,2
   1d3f8:	109f8404 	addi	r2,r2,32272
   1d3fc:	10c00e15 	stw	r3,56(r2)
   1d400:	008000b4 	movhi	r2,2
   1d404:	109f8404 	addi	r2,r2,32272
   1d408:	10800a17 	ldw	r2,40(r2)
   1d40c:	10800304 	addi	r2,r2,12
   1d410:	10800017 	ldw	r2,0(r2)
   1d414:	1005d43a 	srai	r2,r2,16
   1d418:	e0bfff05 	stb	r2,-4(fp)
   1d41c:	008000b4 	movhi	r2,2
   1d420:	109f8404 	addi	r2,r2,32272
   1d424:	10800a17 	ldw	r2,40(r2)
   1d428:	10800304 	addi	r2,r2,12
   1d42c:	10800017 	ldw	r2,0(r2)
   1d430:	1004d63a 	srli	r2,r2,24
   1d434:	e0bfff45 	stb	r2,-3(fp)
   1d438:	008000b4 	movhi	r2,2
   1d43c:	109f8404 	addi	r2,r2,32272
   1d440:	10800e17 	ldw	r2,56(r2)
   1d444:	10800058 	cmpnei	r2,r2,1
   1d448:	1000041e 	bne	r2,zero,1d45c <alt_sys_init+0x314>
   1d44c:	008000b4 	movhi	r2,2
   1d450:	109f8404 	addi	r2,r2,32272
   1d454:	10001115 	stw	zero,68(r2)
   1d458:	00000e06 	br	1d494 <alt_sys_init+0x34c>
   1d45c:	008000b4 	movhi	r2,2
   1d460:	109f8404 	addi	r2,r2,32272
   1d464:	10800e17 	ldw	r2,56(r2)
   1d468:	10800098 	cmpnei	r2,r2,2
   1d46c:	1000051e 	bne	r2,zero,1d484 <alt_sys_init+0x33c>
   1d470:	008000b4 	movhi	r2,2
   1d474:	109f8404 	addi	r2,r2,32272
   1d478:	00c00044 	movi	r3,1
   1d47c:	10c01115 	stw	r3,68(r2)
   1d480:	00000406 	br	1d494 <alt_sys_init+0x34c>
   1d484:	008000b4 	movhi	r2,2
   1d488:	109f8404 	addi	r2,r2,32272
   1d48c:	00c00084 	movi	r3,2
   1d490:	10c01115 	stw	r3,68(r2)
   1d494:	e0bfff03 	ldbu	r2,-4(fp)
   1d498:	00c00804 	movi	r3,32
   1d49c:	1885c83a 	sub	r2,r3,r2
   1d4a0:	00ffffc4 	movi	r3,-1
   1d4a4:	1886d83a 	srl	r3,r3,r2
   1d4a8:	008000b4 	movhi	r2,2
   1d4ac:	109f8404 	addi	r2,r2,32272
   1d4b0:	10c01215 	stw	r3,72(r2)
   1d4b4:	e0ffff03 	ldbu	r3,-4(fp)
   1d4b8:	008000b4 	movhi	r2,2
   1d4bc:	109f8404 	addi	r2,r2,32272
   1d4c0:	10801117 	ldw	r2,68(r2)
   1d4c4:	1887883a 	add	r3,r3,r2
   1d4c8:	008000b4 	movhi	r2,2
   1d4cc:	109f8404 	addi	r2,r2,32272
   1d4d0:	10c01315 	stw	r3,76(r2)
   1d4d4:	e0bfff43 	ldbu	r2,-3(fp)
   1d4d8:	00c00804 	movi	r3,32
   1d4dc:	1885c83a 	sub	r2,r3,r2
   1d4e0:	00ffffc4 	movi	r3,-1
   1d4e4:	1886d83a 	srl	r3,r3,r2
   1d4e8:	008000b4 	movhi	r2,2
   1d4ec:	109f8404 	addi	r2,r2,32272
   1d4f0:	10c01415 	stw	r3,80(r2)
   1d4f4:	010000b4 	movhi	r4,2
   1d4f8:	211f8404 	addi	r4,r4,32272
   1d4fc:	001d0dc0 	call	1d0dc <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   1d500:	010000b4 	movhi	r4,2
   1d504:	211f9904 	addi	r4,r4,32356
   1d508:	001d0dc0 	call	1d0dc <alt_dev_reg>
}
   1d50c:	e037883a 	mov	sp,fp
   1d510:	dfc00117 	ldw	ra,4(sp)
   1d514:	df000017 	ldw	fp,0(sp)
   1d518:	dec00204 	addi	sp,sp,8
   1d51c:	f800283a 	ret

0001d520 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
   1d520:	defffa04 	addi	sp,sp,-24
   1d524:	dfc00515 	stw	ra,20(sp)
   1d528:	df000415 	stw	fp,16(sp)
   1d52c:	df000404 	addi	fp,sp,16
   1d530:	e13ffe15 	stw	r4,-8(fp)
   1d534:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
   1d538:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
   1d53c:	00202340 	call	20234 <alt_up_sd_card_is_Present>
   1d540:	10001e26 	beq	r2,zero,1d5bc <Write_Sector_Data+0x9c>
    {
        short int reg_state = 0xff;
   1d544:	00803fc4 	movi	r2,255
   1d548:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
   1d54c:	d0a85617 	ldw	r2,-24232(gp)
   1d550:	e13ffe17 	ldw	r4,-8(fp)
   1d554:	e0ffff17 	ldw	r3,-4(fp)
   1d558:	20c7883a 	add	r3,r4,r3
   1d55c:	1806927a 	slli	r3,r3,9
   1d560:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
   1d564:	d0a85517 	ldw	r2,-24236(gp)
   1d568:	00c00604 	movi	r3,24
   1d56c:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
   1d570:	d0a85217 	ldw	r2,-24248(gp)
   1d574:	1080002b 	ldhuio	r2,0(r2)
   1d578:	10bfffcc 	andi	r2,r2,65535
   1d57c:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
   1d580:	e0bffd0b 	ldhu	r2,-12(fp)
   1d584:	10bfffcc 	andi	r2,r2,65535
   1d588:	1080010c 	andi	r2,r2,4
   1d58c:	103ff81e 	bne	r2,zero,1d570 <__alt_mem_Flash_flash_data+0xf401d570>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
   1d590:	e0bffd0b 	ldhu	r2,-12(fp)
   1d594:	10bfffcc 	andi	r2,r2,65535
   1d598:	1080040c 	andi	r2,r2,16
   1d59c:	1000071e 	bne	r2,zero,1d5bc <Write_Sector_Data+0x9c>
        {
            result = true;
   1d5a0:	00800044 	movi	r2,1
   1d5a4:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
   1d5a8:	d0285b15 	stw	zero,-24212(gp)
            current_sector_index = sector_index+partition_offset;
   1d5ac:	e0fffe17 	ldw	r3,-8(fp)
   1d5b0:	e0bfff17 	ldw	r2,-4(fp)
   1d5b4:	1885883a 	add	r2,r3,r2
   1d5b8:	d0a85c15 	stw	r2,-24208(gp)
        }
    }
    return result;
   1d5bc:	e0bffc17 	ldw	r2,-16(fp)
}
   1d5c0:	e037883a 	mov	sp,fp
   1d5c4:	dfc00117 	ldw	ra,4(sp)
   1d5c8:	df000017 	ldw	fp,0(sp)
   1d5cc:	dec00204 	addi	sp,sp,8
   1d5d0:	f800283a 	ret

0001d5d4 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
   1d5d4:	defffd04 	addi	sp,sp,-12
   1d5d8:	dfc00215 	stw	ra,8(sp)
   1d5dc:	df000115 	stw	fp,4(sp)
   1d5e0:	df000104 	addi	fp,sp,4
    bool result = true;
   1d5e4:	00800044 	movi	r2,1
   1d5e8:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
   1d5ec:	d0a85b17 	ldw	r2,-24212(gp)
   1d5f0:	10000526 	beq	r2,zero,1d608 <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
   1d5f4:	d0a85c17 	ldw	r2,-24208(gp)
   1d5f8:	1009883a 	mov	r4,r2
   1d5fc:	000b883a 	mov	r5,zero
   1d600:	001d5200 	call	1d520 <Write_Sector_Data>
   1d604:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
   1d608:	e0bfff17 	ldw	r2,-4(fp)
}
   1d60c:	e037883a 	mov	sp,fp
   1d610:	dfc00117 	ldw	ra,4(sp)
   1d614:	df000017 	ldw	fp,0(sp)
   1d618:	dec00204 	addi	sp,sp,8
   1d61c:	f800283a 	ret

0001d620 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
   1d620:	defffa04 	addi	sp,sp,-24
   1d624:	dfc00515 	stw	ra,20(sp)
   1d628:	df000415 	stw	fp,16(sp)
   1d62c:	df000404 	addi	fp,sp,16
   1d630:	e13ffe15 	stw	r4,-8(fp)
   1d634:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
   1d638:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
   1d63c:	00202340 	call	20234 <alt_up_sd_card_is_Present>
   1d640:	10002726 	beq	r2,zero,1d6e0 <Read_Sector_Data+0xc0>
	{
		short int reg_state = 0xff;
   1d644:	00803fc4 	movi	r2,255
   1d648:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
   1d64c:	d0a85b17 	ldw	r2,-24212(gp)
   1d650:	10000726 	beq	r2,zero,1d670 <Read_Sector_Data+0x50>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
   1d654:	d0a85c17 	ldw	r2,-24208(gp)
   1d658:	1009883a 	mov	r4,r2
   1d65c:	000b883a 	mov	r5,zero
   1d660:	001d5200 	call	1d520 <Write_Sector_Data>
   1d664:	1000021e 	bne	r2,zero,1d670 <Read_Sector_Data+0x50>
            {
                return false;
   1d668:	0005883a 	mov	r2,zero
   1d66c:	00001d06 	br	1d6e4 <Read_Sector_Data+0xc4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
   1d670:	d0a85617 	ldw	r2,-24232(gp)
   1d674:	e13ffe17 	ldw	r4,-8(fp)
   1d678:	e0ffff17 	ldw	r3,-4(fp)
   1d67c:	20c7883a 	add	r3,r4,r3
   1d680:	1806927a 	slli	r3,r3,9
   1d684:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
   1d688:	d0a85517 	ldw	r2,-24236(gp)
   1d68c:	00c00444 	movi	r3,17
   1d690:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
   1d694:	d0a85217 	ldw	r2,-24248(gp)
   1d698:	1080002b 	ldhuio	r2,0(r2)
   1d69c:	10bfffcc 	andi	r2,r2,65535
   1d6a0:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
   1d6a4:	e0bffd0b 	ldhu	r2,-12(fp)
   1d6a8:	10bfffcc 	andi	r2,r2,65535
   1d6ac:	1080010c 	andi	r2,r2,4
   1d6b0:	103ff81e 	bne	r2,zero,1d694 <__alt_mem_Flash_flash_data+0xf401d694>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
   1d6b4:	e0bffd0b 	ldhu	r2,-12(fp)
   1d6b8:	10bfffcc 	andi	r2,r2,65535
   1d6bc:	1080040c 	andi	r2,r2,16
   1d6c0:	1000071e 	bne	r2,zero,1d6e0 <Read_Sector_Data+0xc0>
		{
			result = true;
   1d6c4:	00800044 	movi	r2,1
   1d6c8:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
   1d6cc:	d0285b15 	stw	zero,-24212(gp)
            current_sector_index = sector_index+partition_offset;
   1d6d0:	e0fffe17 	ldw	r3,-8(fp)
   1d6d4:	e0bfff17 	ldw	r2,-4(fp)
   1d6d8:	1885883a 	add	r2,r3,r2
   1d6dc:	d0a85c15 	stw	r2,-24208(gp)
		}
	}
	return result;
   1d6e0:	e0bffc17 	ldw	r2,-16(fp)
}
   1d6e4:	e037883a 	mov	sp,fp
   1d6e8:	dfc00117 	ldw	ra,4(sp)
   1d6ec:	df000017 	ldw	fp,0(sp)
   1d6f0:	dec00204 	addi	sp,sp,8
   1d6f4:	f800283a 	ret

0001d6f8 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
   1d6f8:	defffb04 	addi	sp,sp,-20
   1d6fc:	dfc00415 	stw	ra,16(sp)
   1d700:	df000315 	stw	fp,12(sp)
   1d704:	df000304 	addi	fp,sp,12
   1d708:	e13ffe15 	stw	r4,-8(fp)
   1d70c:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
   1d710:	e0bffe17 	ldw	r2,-8(fp)
   1d714:	1004d23a 	srli	r2,r2,8
   1d718:	d0e85817 	ldw	r3,-24224(gp)
   1d71c:	10c5883a 	add	r2,r2,r3
   1d720:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
   1d724:	00800174 	movhi	r2,5
   1d728:	10bcd104 	addi	r2,r2,-3260
   1d72c:	10801117 	ldw	r2,68(r2)
   1d730:	e0fffd17 	ldw	r3,-12(fp)
   1d734:	1885883a 	add	r2,r3,r2
   1d738:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
   1d73c:	d0a85c17 	ldw	r2,-24208(gp)
   1d740:	e0fffd17 	ldw	r3,-12(fp)
   1d744:	18800726 	beq	r3,r2,1d764 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
   1d748:	e0bffd17 	ldw	r2,-12(fp)
   1d74c:	1009883a 	mov	r4,r2
   1d750:	000b883a 	mov	r5,zero
   1d754:	001d6200 	call	1d620 <Read_Sector_Data>
   1d758:	1000021e 	bne	r2,zero,1d764 <get_cluster_flag+0x6c>
        {
            return false;
   1d75c:	0005883a 	mov	r2,zero
   1d760:	00000d06 	br	1d798 <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
   1d764:	e0bffe17 	ldw	r2,-8(fp)
   1d768:	10803fcc 	andi	r2,r2,255
   1d76c:	1085883a 	add	r2,r2,r2
   1d770:	1007883a 	mov	r3,r2
   1d774:	d0a85a17 	ldw	r2,-24216(gp)
   1d778:	10800a17 	ldw	r2,40(r2)
   1d77c:	1885883a 	add	r2,r3,r2
   1d780:	1080002b 	ldhuio	r2,0(r2)
   1d784:	10bfffcc 	andi	r2,r2,65535
   1d788:	1007883a 	mov	r3,r2
   1d78c:	e0bfff17 	ldw	r2,-4(fp)
   1d790:	10c0000d 	sth	r3,0(r2)
    return true;
   1d794:	00800044 	movi	r2,1
}
   1d798:	e037883a 	mov	sp,fp
   1d79c:	dfc00117 	ldw	ra,4(sp)
   1d7a0:	df000017 	ldw	fp,0(sp)
   1d7a4:	dec00204 	addi	sp,sp,8
   1d7a8:	f800283a 	ret

0001d7ac <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
   1d7ac:	defffa04 	addi	sp,sp,-24
   1d7b0:	dfc00515 	stw	ra,20(sp)
   1d7b4:	df000415 	stw	fp,16(sp)
   1d7b8:	df000404 	addi	fp,sp,16
   1d7bc:	e13ffd15 	stw	r4,-12(fp)
   1d7c0:	2805883a 	mov	r2,r5
   1d7c4:	e1bfff15 	stw	r6,-4(fp)
   1d7c8:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
   1d7cc:	e0bffd17 	ldw	r2,-12(fp)
   1d7d0:	1004d23a 	srli	r2,r2,8
   1d7d4:	d0e85817 	ldw	r3,-24224(gp)
   1d7d8:	10c5883a 	add	r2,r2,r3
   1d7dc:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
   1d7e0:	e0bfff17 	ldw	r2,-4(fp)
   1d7e4:	10000726 	beq	r2,zero,1d804 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
   1d7e8:	00800174 	movhi	r2,5
   1d7ec:	10bcd104 	addi	r2,r2,-3260
   1d7f0:	10801117 	ldw	r2,68(r2)
   1d7f4:	e0fffc17 	ldw	r3,-16(fp)
   1d7f8:	1885883a 	add	r2,r3,r2
   1d7fc:	e0bffc15 	stw	r2,-16(fp)
   1d800:	00000606 	br	1d81c <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
   1d804:	00800174 	movhi	r2,5
   1d808:	10bcd104 	addi	r2,r2,-3260
   1d80c:	10801217 	ldw	r2,72(r2)
   1d810:	e0fffc17 	ldw	r3,-16(fp)
   1d814:	1885883a 	add	r2,r3,r2
   1d818:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
   1d81c:	d0a85c17 	ldw	r2,-24208(gp)
   1d820:	e0fffc17 	ldw	r3,-16(fp)
   1d824:	18800726 	beq	r3,r2,1d844 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
   1d828:	e0bffc17 	ldw	r2,-16(fp)
   1d82c:	1009883a 	mov	r4,r2
   1d830:	000b883a 	mov	r5,zero
   1d834:	001d6200 	call	1d620 <Read_Sector_Data>
   1d838:	1000021e 	bne	r2,zero,1d844 <mark_cluster+0x98>
        {
            return false;
   1d83c:	0005883a 	mov	r2,zero
   1d840:	00000d06 	br	1d878 <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
   1d844:	e0bffd17 	ldw	r2,-12(fp)
   1d848:	10803fcc 	andi	r2,r2,255
   1d84c:	1085883a 	add	r2,r2,r2
   1d850:	1007883a 	mov	r3,r2
   1d854:	d0a85a17 	ldw	r2,-24216(gp)
   1d858:	10800a17 	ldw	r2,40(r2)
   1d85c:	1885883a 	add	r2,r3,r2
   1d860:	1007883a 	mov	r3,r2
   1d864:	e0bffe0f 	ldh	r2,-8(fp)
   1d868:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
   1d86c:	00800044 	movi	r2,1
   1d870:	d0a85b15 	stw	r2,-24212(gp)
    return true;
   1d874:	00800044 	movi	r2,1
}
   1d878:	e037883a 	mov	sp,fp
   1d87c:	dfc00117 	ldw	ra,4(sp)
   1d880:	df000017 	ldw	fp,0(sp)
   1d884:	dec00204 	addi	sp,sp,8
   1d888:	f800283a 	ret

0001d88c <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
   1d88c:	defff704 	addi	sp,sp,-36
   1d890:	dfc00815 	stw	ra,32(sp)
   1d894:	df000715 	stw	fp,28(sp)
   1d898:	df000704 	addi	fp,sp,28
	bool result = false;
   1d89c:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
   1d8a0:	0009883a 	mov	r4,zero
   1d8a4:	000b883a 	mov	r5,zero
   1d8a8:	001d6200 	call	1d620 <Read_Sector_Data>
   1d8ac:	10005c26 	beq	r2,zero,1da20 <Check_for_Master_Boot_Record+0x194>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
   1d8b0:	d0a85a17 	ldw	r2,-24216(gp)
   1d8b4:	10800a17 	ldw	r2,40(r2)
   1d8b8:	10807f84 	addi	r2,r2,510
   1d8bc:	1080002b 	ldhuio	r2,0(r2)
   1d8c0:	10bfffcc 	andi	r2,r2,65535
   1d8c4:	10bfffcc 	andi	r2,r2,65535
   1d8c8:	10a0001c 	xori	r2,r2,32768
   1d8cc:	10a00004 	addi	r2,r2,-32768
   1d8d0:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
   1d8d4:	e0bffb17 	ldw	r2,-20(fp)
   1d8d8:	10ffffcc 	andi	r3,r2,65535
   1d8dc:	00aa9554 	movui	r2,43605
   1d8e0:	18804f1e 	bne	r3,r2,1da20 <Check_for_Master_Boot_Record+0x194>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
   1d8e4:	e03ffa15 	stw	zero,-24(fp)
   1d8e8:	00004a06 	br	1da14 <Check_for_Master_Boot_Record+0x188>
			{
				int partition_data_offset = (index * 16) + 0x01be;
   1d8ec:	e0bffa17 	ldw	r2,-24(fp)
   1d8f0:	1004913a 	slli	r2,r2,4
   1d8f4:	10806f84 	addi	r2,r2,446
   1d8f8:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
   1d8fc:	d0a85a17 	ldw	r2,-24216(gp)
   1d900:	10c00a17 	ldw	r3,40(r2)
   1d904:	e0bffc17 	ldw	r2,-16(fp)
   1d908:	1885883a 	add	r2,r3,r2
   1d90c:	10800104 	addi	r2,r2,4
   1d910:	10800023 	ldbuio	r2,0(r2)
   1d914:	10803fcc 	andi	r2,r2,255
   1d918:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
   1d91c:	e0bffd07 	ldb	r2,-12(fp)
   1d920:	10800060 	cmpeqi	r2,r2,1
   1d924:	1000091e 	bne	r2,zero,1d94c <Check_for_Master_Boot_Record+0xc0>
   1d928:	e0bffd07 	ldb	r2,-12(fp)
   1d92c:	10800120 	cmpeqi	r2,r2,4
   1d930:	1000061e 	bne	r2,zero,1d94c <Check_for_Master_Boot_Record+0xc0>
   1d934:	e0bffd07 	ldb	r2,-12(fp)
   1d938:	108001a0 	cmpeqi	r2,r2,6
   1d93c:	1000031e 	bne	r2,zero,1d94c <Check_for_Master_Boot_Record+0xc0>
   1d940:	e0bffd07 	ldb	r2,-12(fp)
   1d944:	10800398 	cmpnei	r2,r2,14
   1d948:	10002f1e 	bne	r2,zero,1da08 <Check_for_Master_Boot_Record+0x17c>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
   1d94c:	d0a85a17 	ldw	r2,-24216(gp)
   1d950:	10c00a17 	ldw	r3,40(r2)
   1d954:	e0bffc17 	ldw	r2,-16(fp)
   1d958:	1885883a 	add	r2,r3,r2
   1d95c:	10800284 	addi	r2,r2,10
   1d960:	1080002b 	ldhuio	r2,0(r2)
   1d964:	10bfffcc 	andi	r2,r2,65535
   1d968:	10bfffcc 	andi	r2,r2,65535
   1d96c:	1006943a 	slli	r3,r2,16
   1d970:	d0a85a17 	ldw	r2,-24216(gp)
   1d974:	11000a17 	ldw	r4,40(r2)
   1d978:	e0bffc17 	ldw	r2,-16(fp)
   1d97c:	2085883a 	add	r2,r4,r2
   1d980:	10800204 	addi	r2,r2,8
   1d984:	1080002b 	ldhuio	r2,0(r2)
   1d988:	10bfffcc 	andi	r2,r2,65535
   1d98c:	10bfffcc 	andi	r2,r2,65535
   1d990:	1884b03a 	or	r2,r3,r2
   1d994:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
   1d998:	d0a85a17 	ldw	r2,-24216(gp)
   1d99c:	10c00a17 	ldw	r3,40(r2)
   1d9a0:	e0bffc17 	ldw	r2,-16(fp)
   1d9a4:	1885883a 	add	r2,r3,r2
   1d9a8:	10800384 	addi	r2,r2,14
   1d9ac:	1080002b 	ldhuio	r2,0(r2)
   1d9b0:	10bfffcc 	andi	r2,r2,65535
   1d9b4:	10bfffcc 	andi	r2,r2,65535
   1d9b8:	1006943a 	slli	r3,r2,16
   1d9bc:	d0a85a17 	ldw	r2,-24216(gp)
   1d9c0:	11000a17 	ldw	r4,40(r2)
   1d9c4:	e0bffc17 	ldw	r2,-16(fp)
   1d9c8:	2085883a 	add	r2,r4,r2
   1d9cc:	10800304 	addi	r2,r2,12
   1d9d0:	1080002b 	ldhuio	r2,0(r2)
   1d9d4:	10bfffcc 	andi	r2,r2,65535
   1d9d8:	10bfffcc 	andi	r2,r2,65535
   1d9dc:	1884b03a 	or	r2,r3,r2
   1d9e0:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
   1d9e4:	e0bfff17 	ldw	r2,-4(fp)
   1d9e8:	0080070e 	bge	zero,r2,1da08 <Check_for_Master_Boot_Record+0x17c>
					{
						result = true;
   1d9ec:	00800044 	movi	r2,1
   1d9f0:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
   1d9f4:	e0bfff17 	ldw	r2,-4(fp)
   1d9f8:	d0a85915 	stw	r2,-24220(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
   1d9fc:	e0bffe17 	ldw	r2,-8(fp)
   1da00:	d0a85815 	stw	r2,-24224(gp)
						break;
   1da04:	00000606 	br	1da20 <Check_for_Master_Boot_Record+0x194>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
   1da08:	e0bffa17 	ldw	r2,-24(fp)
   1da0c:	10800044 	addi	r2,r2,1
   1da10:	e0bffa15 	stw	r2,-24(fp)
   1da14:	e0bffa17 	ldw	r2,-24(fp)
   1da18:	10800110 	cmplti	r2,r2,4
   1da1c:	103fb31e 	bne	r2,zero,1d8ec <__alt_mem_Flash_flash_data+0xf401d8ec>
				}
			}
		}
	}

	return result;
   1da20:	e0bff917 	ldw	r2,-28(fp)
}
   1da24:	e037883a 	mov	sp,fp
   1da28:	dfc00117 	ldw	ra,4(sp)
   1da2c:	df000017 	ldw	fp,0(sp)
   1da30:	dec00204 	addi	sp,sp,8
   1da34:	f800283a 	ret

0001da38 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
   1da38:	defff804 	addi	sp,sp,-32
   1da3c:	dfc00715 	stw	ra,28(sp)
   1da40:	df000615 	stw	fp,24(sp)
   1da44:	df000604 	addi	fp,sp,24
   1da48:	e13ffc15 	stw	r4,-16(fp)
   1da4c:	e17ffd15 	stw	r5,-12(fp)
   1da50:	e1bffe15 	stw	r6,-8(fp)
   1da54:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
   1da58:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1da5c:	e0bffc17 	ldw	r2,-16(fp)
   1da60:	108007cc 	andi	r2,r2,31
   1da64:	10008d1e 	bne	r2,zero,1dc9c <Read_File_Record_At_Offset+0x264>
   1da68:	00202340 	call	20234 <alt_up_sd_card_is_Present>
   1da6c:	10008b26 	beq	r2,zero,1dc9c <Read_File_Record_At_Offset+0x264>
   1da70:	d0a85117 	ldw	r2,-24252(gp)
   1da74:	10008926 	beq	r2,zero,1dc9c <Read_File_Record_At_Offset+0x264>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
   1da78:	e03ffb15 	stw	zero,-20(fp)
   1da7c:	00001106 	br	1dac4 <Read_File_Record_At_Offset+0x8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
   1da80:	e0fffc17 	ldw	r3,-16(fp)
   1da84:	e0bffb17 	ldw	r2,-20(fp)
   1da88:	1885883a 	add	r2,r3,r2
   1da8c:	1007883a 	mov	r3,r2
   1da90:	d0a85a17 	ldw	r2,-24216(gp)
   1da94:	10800a17 	ldw	r2,40(r2)
   1da98:	1885883a 	add	r2,r3,r2
   1da9c:	10800023 	ldbuio	r2,0(r2)
   1daa0:	10803fcc 	andi	r2,r2,255
   1daa4:	1009883a 	mov	r4,r2
   1daa8:	e0fffd17 	ldw	r3,-12(fp)
   1daac:	e0bffb17 	ldw	r2,-20(fp)
   1dab0:	1885883a 	add	r2,r3,r2
   1dab4:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
   1dab8:	e0bffb17 	ldw	r2,-20(fp)
   1dabc:	10800044 	addi	r2,r2,1
   1dac0:	e0bffb15 	stw	r2,-20(fp)
   1dac4:	e0bffb17 	ldw	r2,-20(fp)
   1dac8:	10800210 	cmplti	r2,r2,8
   1dacc:	103fec1e 	bne	r2,zero,1da80 <__alt_mem_Flash_flash_data+0xf401da80>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
   1dad0:	e03ffb15 	stw	zero,-20(fp)
   1dad4:	00001306 	br	1db24 <Read_File_Record_At_Offset+0xec>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
   1dad8:	e0fffc17 	ldw	r3,-16(fp)
   1dadc:	e0bffb17 	ldw	r2,-20(fp)
   1dae0:	1885883a 	add	r2,r3,r2
   1dae4:	1007883a 	mov	r3,r2
   1dae8:	d0a85a17 	ldw	r2,-24216(gp)
   1daec:	10800a17 	ldw	r2,40(r2)
   1daf0:	1885883a 	add	r2,r3,r2
   1daf4:	10800204 	addi	r2,r2,8
   1daf8:	10800023 	ldbuio	r2,0(r2)
   1dafc:	10803fcc 	andi	r2,r2,255
   1db00:	1009883a 	mov	r4,r2
   1db04:	e0fffd17 	ldw	r3,-12(fp)
   1db08:	e0bffb17 	ldw	r2,-20(fp)
   1db0c:	1885883a 	add	r2,r3,r2
   1db10:	10800204 	addi	r2,r2,8
   1db14:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
   1db18:	e0bffb17 	ldw	r2,-20(fp)
   1db1c:	10800044 	addi	r2,r2,1
   1db20:	e0bffb15 	stw	r2,-20(fp)
   1db24:	e0bffb17 	ldw	r2,-20(fp)
   1db28:	108000d0 	cmplti	r2,r2,3
   1db2c:	103fea1e 	bne	r2,zero,1dad8 <__alt_mem_Flash_flash_data+0xf401dad8>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
   1db30:	d0a85a17 	ldw	r2,-24216(gp)
   1db34:	10c00a17 	ldw	r3,40(r2)
   1db38:	e0bffc17 	ldw	r2,-16(fp)
   1db3c:	1885883a 	add	r2,r3,r2
   1db40:	108002c4 	addi	r2,r2,11
   1db44:	10800023 	ldbuio	r2,0(r2)
   1db48:	10803fcc 	andi	r2,r2,255
   1db4c:	1007883a 	mov	r3,r2
   1db50:	e0bffd17 	ldw	r2,-12(fp)
   1db54:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
   1db58:	d0a85a17 	ldw	r2,-24216(gp)
   1db5c:	10c00a17 	ldw	r3,40(r2)
   1db60:	e0bffc17 	ldw	r2,-16(fp)
   1db64:	1885883a 	add	r2,r3,r2
   1db68:	10800384 	addi	r2,r2,14
   1db6c:	1080002b 	ldhuio	r2,0(r2)
   1db70:	10bfffcc 	andi	r2,r2,65535
   1db74:	1007883a 	mov	r3,r2
   1db78:	e0bffd17 	ldw	r2,-12(fp)
   1db7c:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
   1db80:	d0a85a17 	ldw	r2,-24216(gp)
   1db84:	10c00a17 	ldw	r3,40(r2)
   1db88:	e0bffc17 	ldw	r2,-16(fp)
   1db8c:	1885883a 	add	r2,r3,r2
   1db90:	10800404 	addi	r2,r2,16
   1db94:	1080002b 	ldhuio	r2,0(r2)
   1db98:	10bfffcc 	andi	r2,r2,65535
   1db9c:	1007883a 	mov	r3,r2
   1dba0:	e0bffd17 	ldw	r2,-12(fp)
   1dba4:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
   1dba8:	d0a85a17 	ldw	r2,-24216(gp)
   1dbac:	10c00a17 	ldw	r3,40(r2)
   1dbb0:	e0bffc17 	ldw	r2,-16(fp)
   1dbb4:	1885883a 	add	r2,r3,r2
   1dbb8:	10800484 	addi	r2,r2,18
   1dbbc:	1080002b 	ldhuio	r2,0(r2)
   1dbc0:	10bfffcc 	andi	r2,r2,65535
   1dbc4:	1007883a 	mov	r3,r2
   1dbc8:	e0bffd17 	ldw	r2,-12(fp)
   1dbcc:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
   1dbd0:	d0a85a17 	ldw	r2,-24216(gp)
   1dbd4:	10c00a17 	ldw	r3,40(r2)
   1dbd8:	e0bffc17 	ldw	r2,-16(fp)
   1dbdc:	1885883a 	add	r2,r3,r2
   1dbe0:	10800584 	addi	r2,r2,22
   1dbe4:	1080002b 	ldhuio	r2,0(r2)
   1dbe8:	10bfffcc 	andi	r2,r2,65535
   1dbec:	1007883a 	mov	r3,r2
   1dbf0:	e0bffd17 	ldw	r2,-12(fp)
   1dbf4:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
   1dbf8:	d0a85a17 	ldw	r2,-24216(gp)
   1dbfc:	10c00a17 	ldw	r3,40(r2)
   1dc00:	e0bffc17 	ldw	r2,-16(fp)
   1dc04:	1885883a 	add	r2,r3,r2
   1dc08:	10800604 	addi	r2,r2,24
   1dc0c:	1080002b 	ldhuio	r2,0(r2)
   1dc10:	10bfffcc 	andi	r2,r2,65535
   1dc14:	1007883a 	mov	r3,r2
   1dc18:	e0bffd17 	ldw	r2,-12(fp)
   1dc1c:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
   1dc20:	d0a85a17 	ldw	r2,-24216(gp)
   1dc24:	10c00a17 	ldw	r3,40(r2)
   1dc28:	e0bffc17 	ldw	r2,-16(fp)
   1dc2c:	1885883a 	add	r2,r3,r2
   1dc30:	10800684 	addi	r2,r2,26
   1dc34:	1080002b 	ldhuio	r2,0(r2)
   1dc38:	10bfffcc 	andi	r2,r2,65535
   1dc3c:	1007883a 	mov	r3,r2
   1dc40:	e0bffd17 	ldw	r2,-12(fp)
   1dc44:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
   1dc48:	d0a85a17 	ldw	r2,-24216(gp)
   1dc4c:	10c00a17 	ldw	r3,40(r2)
   1dc50:	e0bffc17 	ldw	r2,-16(fp)
   1dc54:	1885883a 	add	r2,r3,r2
   1dc58:	10800704 	addi	r2,r2,28
   1dc5c:	10800037 	ldwio	r2,0(r2)
   1dc60:	1007883a 	mov	r3,r2
   1dc64:	e0bffd17 	ldw	r2,-12(fp)
   1dc68:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
   1dc6c:	e0bffd17 	ldw	r2,-12(fp)
   1dc70:	e0fffe17 	ldw	r3,-8(fp)
   1dc74:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
   1dc78:	e0bffd17 	ldw	r2,-12(fp)
   1dc7c:	e0ffff17 	ldw	r3,-4(fp)
   1dc80:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
   1dc84:	e0bffc17 	ldw	r2,-16(fp)
   1dc88:	1007883a 	mov	r3,r2
   1dc8c:	e0bffd17 	ldw	r2,-12(fp)
   1dc90:	10c00c0d 	sth	r3,48(r2)
		result = true;
   1dc94:	00800044 	movi	r2,1
   1dc98:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
   1dc9c:	e0bffa17 	ldw	r2,-24(fp)
}
   1dca0:	e037883a 	mov	sp,fp
   1dca4:	dfc00117 	ldw	ra,4(sp)
   1dca8:	df000017 	ldw	fp,0(sp)
   1dcac:	dec00204 	addi	sp,sp,8
   1dcb0:	f800283a 	ret

0001dcb4 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
   1dcb4:	defff904 	addi	sp,sp,-28
   1dcb8:	dfc00615 	stw	ra,24(sp)
   1dcbc:	df000515 	stw	fp,20(sp)
   1dcc0:	df000504 	addi	fp,sp,20
   1dcc4:	e13ffe15 	stw	r4,-8(fp)
   1dcc8:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
   1dccc:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1dcd0:	e0bffe17 	ldw	r2,-8(fp)
   1dcd4:	108007cc 	andi	r2,r2,31
   1dcd8:	1000931e 	bne	r2,zero,1df28 <Write_File_Record_At_Offset+0x274>
   1dcdc:	00202340 	call	20234 <alt_up_sd_card_is_Present>
   1dce0:	10009126 	beq	r2,zero,1df28 <Write_File_Record_At_Offset+0x274>
   1dce4:	d0a85117 	ldw	r2,-24252(gp)
   1dce8:	10008f26 	beq	r2,zero,1df28 <Write_File_Record_At_Offset+0x274>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
   1dcec:	e03ffc15 	stw	zero,-16(fp)
   1dcf0:	00001f06 	br	1dd70 <Write_File_Record_At_Offset+0xbc>
        {
            short int two_chars = (short int) record->name[counter+1];
   1dcf4:	e0bffc17 	ldw	r2,-16(fp)
   1dcf8:	10800044 	addi	r2,r2,1
   1dcfc:	e0ffff17 	ldw	r3,-4(fp)
   1dd00:	1885883a 	add	r2,r3,r2
   1dd04:	10800003 	ldbu	r2,0(r2)
   1dd08:	10803fcc 	andi	r2,r2,255
   1dd0c:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
   1dd10:	e0bffd0f 	ldh	r2,-12(fp)
   1dd14:	1004923a 	slli	r2,r2,8
   1dd18:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
   1dd1c:	e0ffff17 	ldw	r3,-4(fp)
   1dd20:	e0bffc17 	ldw	r2,-16(fp)
   1dd24:	1885883a 	add	r2,r3,r2
   1dd28:	10800003 	ldbu	r2,0(r2)
   1dd2c:	10c03fcc 	andi	r3,r2,255
   1dd30:	e0bffd0b 	ldhu	r2,-12(fp)
   1dd34:	1884b03a 	or	r2,r3,r2
   1dd38:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
   1dd3c:	e0fffe17 	ldw	r3,-8(fp)
   1dd40:	e0bffc17 	ldw	r2,-16(fp)
   1dd44:	1885883a 	add	r2,r3,r2
   1dd48:	1007883a 	mov	r3,r2
   1dd4c:	d0a85a17 	ldw	r2,-24216(gp)
   1dd50:	10800a17 	ldw	r2,40(r2)
   1dd54:	1885883a 	add	r2,r3,r2
   1dd58:	1007883a 	mov	r3,r2
   1dd5c:	e0bffd0f 	ldh	r2,-12(fp)
   1dd60:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
   1dd64:	e0bffc17 	ldw	r2,-16(fp)
   1dd68:	10800084 	addi	r2,r2,2
   1dd6c:	e0bffc15 	stw	r2,-16(fp)
   1dd70:	e0bffc17 	ldw	r2,-16(fp)
   1dd74:	10800210 	cmplti	r2,r2,8
   1dd78:	103fde1e 	bne	r2,zero,1dcf4 <__alt_mem_Flash_flash_data+0xf401dcf4>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
   1dd7c:	e03ffc15 	stw	zero,-16(fp)
   1dd80:	00001306 	br	1ddd0 <Write_File_Record_At_Offset+0x11c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
   1dd84:	e0fffe17 	ldw	r3,-8(fp)
   1dd88:	e0bffc17 	ldw	r2,-16(fp)
   1dd8c:	1885883a 	add	r2,r3,r2
   1dd90:	1007883a 	mov	r3,r2
   1dd94:	d0a85a17 	ldw	r2,-24216(gp)
   1dd98:	10800a17 	ldw	r2,40(r2)
   1dd9c:	1885883a 	add	r2,r3,r2
   1dda0:	10800204 	addi	r2,r2,8
   1dda4:	1009883a 	mov	r4,r2
   1dda8:	e0ffff17 	ldw	r3,-4(fp)
   1ddac:	e0bffc17 	ldw	r2,-16(fp)
   1ddb0:	1885883a 	add	r2,r3,r2
   1ddb4:	10800204 	addi	r2,r2,8
   1ddb8:	10800003 	ldbu	r2,0(r2)
   1ddbc:	10803fcc 	andi	r2,r2,255
   1ddc0:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
   1ddc4:	e0bffc17 	ldw	r2,-16(fp)
   1ddc8:	10800044 	addi	r2,r2,1
   1ddcc:	e0bffc15 	stw	r2,-16(fp)
   1ddd0:	e0bffc17 	ldw	r2,-16(fp)
   1ddd4:	108000d0 	cmplti	r2,r2,3
   1ddd8:	103fea1e 	bne	r2,zero,1dd84 <__alt_mem_Flash_flash_data+0xf401dd84>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
   1dddc:	d0a85a17 	ldw	r2,-24216(gp)
   1dde0:	10c00a17 	ldw	r3,40(r2)
   1dde4:	e0bffe17 	ldw	r2,-8(fp)
   1dde8:	1885883a 	add	r2,r3,r2
   1ddec:	108002c4 	addi	r2,r2,11
   1ddf0:	1007883a 	mov	r3,r2
   1ddf4:	e0bfff17 	ldw	r2,-4(fp)
   1ddf8:	108002c3 	ldbu	r2,11(r2)
   1ddfc:	10803fcc 	andi	r2,r2,255
   1de00:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
   1de04:	d0a85a17 	ldw	r2,-24216(gp)
   1de08:	10c00a17 	ldw	r3,40(r2)
   1de0c:	e0bffe17 	ldw	r2,-8(fp)
   1de10:	1885883a 	add	r2,r3,r2
   1de14:	10800384 	addi	r2,r2,14
   1de18:	1007883a 	mov	r3,r2
   1de1c:	e0bfff17 	ldw	r2,-4(fp)
   1de20:	1080030b 	ldhu	r2,12(r2)
   1de24:	10bfffcc 	andi	r2,r2,65535
   1de28:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
   1de2c:	d0a85a17 	ldw	r2,-24216(gp)
   1de30:	10c00a17 	ldw	r3,40(r2)
   1de34:	e0bffe17 	ldw	r2,-8(fp)
   1de38:	1885883a 	add	r2,r3,r2
   1de3c:	10800404 	addi	r2,r2,16
   1de40:	1007883a 	mov	r3,r2
   1de44:	e0bfff17 	ldw	r2,-4(fp)
   1de48:	1080038b 	ldhu	r2,14(r2)
   1de4c:	10bfffcc 	andi	r2,r2,65535
   1de50:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
   1de54:	d0a85a17 	ldw	r2,-24216(gp)
   1de58:	10c00a17 	ldw	r3,40(r2)
   1de5c:	e0bffe17 	ldw	r2,-8(fp)
   1de60:	1885883a 	add	r2,r3,r2
   1de64:	10800484 	addi	r2,r2,18
   1de68:	1007883a 	mov	r3,r2
   1de6c:	e0bfff17 	ldw	r2,-4(fp)
   1de70:	1080040b 	ldhu	r2,16(r2)
   1de74:	10bfffcc 	andi	r2,r2,65535
   1de78:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
   1de7c:	d0a85a17 	ldw	r2,-24216(gp)
   1de80:	10c00a17 	ldw	r3,40(r2)
   1de84:	e0bffe17 	ldw	r2,-8(fp)
   1de88:	1885883a 	add	r2,r3,r2
   1de8c:	10800584 	addi	r2,r2,22
   1de90:	1007883a 	mov	r3,r2
   1de94:	e0bfff17 	ldw	r2,-4(fp)
   1de98:	1080048b 	ldhu	r2,18(r2)
   1de9c:	10bfffcc 	andi	r2,r2,65535
   1dea0:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
   1dea4:	d0a85a17 	ldw	r2,-24216(gp)
   1dea8:	10c00a17 	ldw	r3,40(r2)
   1deac:	e0bffe17 	ldw	r2,-8(fp)
   1deb0:	1885883a 	add	r2,r3,r2
   1deb4:	10800604 	addi	r2,r2,24
   1deb8:	1007883a 	mov	r3,r2
   1debc:	e0bfff17 	ldw	r2,-4(fp)
   1dec0:	1080050b 	ldhu	r2,20(r2)
   1dec4:	10bfffcc 	andi	r2,r2,65535
   1dec8:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
   1decc:	d0a85a17 	ldw	r2,-24216(gp)
   1ded0:	10c00a17 	ldw	r3,40(r2)
   1ded4:	e0bffe17 	ldw	r2,-8(fp)
   1ded8:	1885883a 	add	r2,r3,r2
   1dedc:	10800684 	addi	r2,r2,26
   1dee0:	1007883a 	mov	r3,r2
   1dee4:	e0bfff17 	ldw	r2,-4(fp)
   1dee8:	1080058b 	ldhu	r2,22(r2)
   1deec:	10bfffcc 	andi	r2,r2,65535
   1def0:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
   1def4:	d0a85a17 	ldw	r2,-24216(gp)
   1def8:	10c00a17 	ldw	r3,40(r2)
   1defc:	e0bffe17 	ldw	r2,-8(fp)
   1df00:	1885883a 	add	r2,r3,r2
   1df04:	10800704 	addi	r2,r2,28
   1df08:	1007883a 	mov	r3,r2
   1df0c:	e0bfff17 	ldw	r2,-4(fp)
   1df10:	10800617 	ldw	r2,24(r2)
   1df14:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
   1df18:	00800044 	movi	r2,1
   1df1c:	d0a85b15 	stw	r2,-24212(gp)
        result = true;
   1df20:	00800044 	movi	r2,1
   1df24:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
   1df28:	e0bffb17 	ldw	r2,-20(fp)
}
   1df2c:	e037883a 	mov	sp,fp
   1df30:	dfc00117 	ldw	ra,4(sp)
   1df34:	df000017 	ldw	fp,0(sp)
   1df38:	dec00204 	addi	sp,sp,8
   1df3c:	f800283a 	ret

0001df40 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
   1df40:	defff904 	addi	sp,sp,-28
   1df44:	dfc00615 	stw	ra,24(sp)
   1df48:	df000515 	stw	fp,20(sp)
   1df4c:	df000504 	addi	fp,sp,20
   1df50:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
   1df54:	e03ffb15 	stw	zero,-20(fp)
	int counter = 0;
   1df58:	e03ffc15 	stw	zero,-16(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
   1df5c:	0009883a 	mov	r4,zero
   1df60:	e17fff17 	ldw	r5,-4(fp)
   1df64:	001d6200 	call	1d620 <Read_Sector_Data>
   1df68:	e0bffb15 	stw	r2,-20(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
   1df6c:	d0a85a17 	ldw	r2,-24216(gp)
   1df70:	10800a17 	ldw	r2,40(r2)
   1df74:	10807f84 	addi	r2,r2,510
   1df78:	1080002b 	ldhuio	r2,0(r2)
   1df7c:	10bfffcc 	andi	r2,r2,65535
   1df80:	e0bffe0d 	sth	r2,-8(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
   1df84:	e0bffe0f 	ldh	r2,-8(fp)
   1df88:	10ffffcc 	andi	r3,r2,65535
   1df8c:	00aa9554 	movui	r2,43605
   1df90:	1881861e 	bne	r3,r2,1e5ac <Check_for_DOS_FAT+0x66c>
   1df94:	e0bffb17 	ldw	r2,-20(fp)
   1df98:	10018426 	beq	r2,zero,1e5ac <Check_for_DOS_FAT+0x66c>
	{
		int num_clusters = 0;
   1df9c:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
   1dfa0:	d0a85a17 	ldw	r2,-24216(gp)
   1dfa4:	10800a17 	ldw	r2,40(r2)
   1dfa8:	10800023 	ldbuio	r2,0(r2)
   1dfac:	10803fcc 	andi	r2,r2,255
   1dfb0:	1007883a 	mov	r3,r2
   1dfb4:	00800174 	movhi	r2,5
   1dfb8:	10bcd104 	addi	r2,r2,-3260
   1dfbc:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
   1dfc0:	d0a85a17 	ldw	r2,-24216(gp)
   1dfc4:	10800a17 	ldw	r2,40(r2)
   1dfc8:	10800044 	addi	r2,r2,1
   1dfcc:	10800023 	ldbuio	r2,0(r2)
   1dfd0:	10803fcc 	andi	r2,r2,255
   1dfd4:	1007883a 	mov	r3,r2
   1dfd8:	00800174 	movhi	r2,5
   1dfdc:	10bcd104 	addi	r2,r2,-3260
   1dfe0:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
   1dfe4:	d0a85a17 	ldw	r2,-24216(gp)
   1dfe8:	10800a17 	ldw	r2,40(r2)
   1dfec:	10800084 	addi	r2,r2,2
   1dff0:	10800023 	ldbuio	r2,0(r2)
   1dff4:	10803fcc 	andi	r2,r2,255
   1dff8:	1007883a 	mov	r3,r2
   1dffc:	00800174 	movhi	r2,5
   1e000:	10bcd104 	addi	r2,r2,-3260
   1e004:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
   1e008:	e03ffc15 	stw	zero,-16(fp)
   1e00c:	00001006 	br	1e050 <Check_for_DOS_FAT+0x110>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
   1e010:	d0a85a17 	ldw	r2,-24216(gp)
   1e014:	10c00a17 	ldw	r3,40(r2)
   1e018:	e0bffc17 	ldw	r2,-16(fp)
   1e01c:	1885883a 	add	r2,r3,r2
   1e020:	108000c4 	addi	r2,r2,3
   1e024:	10800023 	ldbuio	r2,0(r2)
   1e028:	10803fcc 	andi	r2,r2,255
   1e02c:	1009883a 	mov	r4,r2
   1e030:	00800174 	movhi	r2,5
   1e034:	10bcd104 	addi	r2,r2,-3260
   1e038:	e0fffc17 	ldw	r3,-16(fp)
   1e03c:	10c5883a 	add	r2,r2,r3
   1e040:	110000c5 	stb	r4,3(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
   1e044:	e0bffc17 	ldw	r2,-16(fp)
   1e048:	10800044 	addi	r2,r2,1
   1e04c:	e0bffc15 	stw	r2,-16(fp)
   1e050:	e0bffc17 	ldw	r2,-16(fp)
   1e054:	10800210 	cmplti	r2,r2,8
   1e058:	103fed1e 	bne	r2,zero,1e010 <__alt_mem_Flash_flash_data+0xf401e010>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
   1e05c:	d0a85a17 	ldw	r2,-24216(gp)
   1e060:	10800a17 	ldw	r2,40(r2)
   1e064:	10800304 	addi	r2,r2,12
   1e068:	10800023 	ldbuio	r2,0(r2)
   1e06c:	10803fcc 	andi	r2,r2,255
   1e070:	10803fcc 	andi	r2,r2,255
   1e074:	1004923a 	slli	r2,r2,8
   1e078:	1007883a 	mov	r3,r2
   1e07c:	d0a85a17 	ldw	r2,-24216(gp)
   1e080:	10800a17 	ldw	r2,40(r2)
   1e084:	108002c4 	addi	r2,r2,11
   1e088:	10800023 	ldbuio	r2,0(r2)
   1e08c:	10803fcc 	andi	r2,r2,255
   1e090:	10803fcc 	andi	r2,r2,255
   1e094:	1080201c 	xori	r2,r2,128
   1e098:	10bfe004 	addi	r2,r2,-128
   1e09c:	1884b03a 	or	r2,r3,r2
   1e0a0:	1007883a 	mov	r3,r2
   1e0a4:	00800174 	movhi	r2,5
   1e0a8:	10bcd104 	addi	r2,r2,-3260
   1e0ac:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
   1e0b0:	d0a85a17 	ldw	r2,-24216(gp)
   1e0b4:	10800a17 	ldw	r2,40(r2)
   1e0b8:	10800344 	addi	r2,r2,13
   1e0bc:	10800023 	ldbuio	r2,0(r2)
   1e0c0:	10803fcc 	andi	r2,r2,255
   1e0c4:	1007883a 	mov	r3,r2
   1e0c8:	00800174 	movhi	r2,5
   1e0cc:	10bcd104 	addi	r2,r2,-3260
   1e0d0:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
   1e0d4:	d0a85a17 	ldw	r2,-24216(gp)
   1e0d8:	10800a17 	ldw	r2,40(r2)
   1e0dc:	10800384 	addi	r2,r2,14
   1e0e0:	1080002b 	ldhuio	r2,0(r2)
   1e0e4:	10bfffcc 	andi	r2,r2,65535
   1e0e8:	1007883a 	mov	r3,r2
   1e0ec:	00800174 	movhi	r2,5
   1e0f0:	10bcd104 	addi	r2,r2,-3260
   1e0f4:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
   1e0f8:	d0a85a17 	ldw	r2,-24216(gp)
   1e0fc:	10800a17 	ldw	r2,40(r2)
   1e100:	10800404 	addi	r2,r2,16
   1e104:	10800023 	ldbuio	r2,0(r2)
   1e108:	10803fcc 	andi	r2,r2,255
   1e10c:	1007883a 	mov	r3,r2
   1e110:	00800174 	movhi	r2,5
   1e114:	10bcd104 	addi	r2,r2,-3260
   1e118:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
   1e11c:	d0a85a17 	ldw	r2,-24216(gp)
   1e120:	10800a17 	ldw	r2,40(r2)
   1e124:	10800484 	addi	r2,r2,18
   1e128:	10800023 	ldbuio	r2,0(r2)
   1e12c:	10803fcc 	andi	r2,r2,255
   1e130:	10803fcc 	andi	r2,r2,255
   1e134:	1004923a 	slli	r2,r2,8
   1e138:	1007883a 	mov	r3,r2
   1e13c:	d0a85a17 	ldw	r2,-24216(gp)
   1e140:	10800a17 	ldw	r2,40(r2)
   1e144:	10800444 	addi	r2,r2,17
   1e148:	10800023 	ldbuio	r2,0(r2)
   1e14c:	10803fcc 	andi	r2,r2,255
   1e150:	10803fcc 	andi	r2,r2,255
   1e154:	1884b03a 	or	r2,r3,r2
   1e158:	1007883a 	mov	r3,r2
   1e15c:	00800174 	movhi	r2,5
   1e160:	10bcd104 	addi	r2,r2,-3260
   1e164:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
   1e168:	d0a85a17 	ldw	r2,-24216(gp)
   1e16c:	10800a17 	ldw	r2,40(r2)
   1e170:	10800504 	addi	r2,r2,20
   1e174:	10800023 	ldbuio	r2,0(r2)
   1e178:	10803fcc 	andi	r2,r2,255
   1e17c:	10803fcc 	andi	r2,r2,255
   1e180:	1004923a 	slli	r2,r2,8
   1e184:	1007883a 	mov	r3,r2
   1e188:	d0a85a17 	ldw	r2,-24216(gp)
   1e18c:	10800a17 	ldw	r2,40(r2)
   1e190:	108004c4 	addi	r2,r2,19
   1e194:	10800023 	ldbuio	r2,0(r2)
   1e198:	10803fcc 	andi	r2,r2,255
   1e19c:	10803fcc 	andi	r2,r2,255
   1e1a0:	1884b03a 	or	r2,r3,r2
   1e1a4:	1007883a 	mov	r3,r2
   1e1a8:	00800174 	movhi	r2,5
   1e1ac:	10bcd104 	addi	r2,r2,-3260
   1e1b0:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
   1e1b4:	d0a85a17 	ldw	r2,-24216(gp)
   1e1b8:	10800a17 	ldw	r2,40(r2)
   1e1bc:	10800544 	addi	r2,r2,21
   1e1c0:	10800023 	ldbuio	r2,0(r2)
   1e1c4:	10803fcc 	andi	r2,r2,255
   1e1c8:	1007883a 	mov	r3,r2
   1e1cc:	00800174 	movhi	r2,5
   1e1d0:	10bcd104 	addi	r2,r2,-3260
   1e1d4:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
   1e1d8:	d0a85a17 	ldw	r2,-24216(gp)
   1e1dc:	10800a17 	ldw	r2,40(r2)
   1e1e0:	10800584 	addi	r2,r2,22
   1e1e4:	1080002b 	ldhuio	r2,0(r2)
   1e1e8:	10bfffcc 	andi	r2,r2,65535
   1e1ec:	1007883a 	mov	r3,r2
   1e1f0:	00800174 	movhi	r2,5
   1e1f4:	10bcd104 	addi	r2,r2,-3260
   1e1f8:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
   1e1fc:	d0a85a17 	ldw	r2,-24216(gp)
   1e200:	10800a17 	ldw	r2,40(r2)
   1e204:	10800604 	addi	r2,r2,24
   1e208:	1080002b 	ldhuio	r2,0(r2)
   1e20c:	10bfffcc 	andi	r2,r2,65535
   1e210:	1007883a 	mov	r3,r2
   1e214:	00800174 	movhi	r2,5
   1e218:	10bcd104 	addi	r2,r2,-3260
   1e21c:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
   1e220:	d0a85a17 	ldw	r2,-24216(gp)
   1e224:	10800a17 	ldw	r2,40(r2)
   1e228:	10800684 	addi	r2,r2,26
   1e22c:	1080002b 	ldhuio	r2,0(r2)
   1e230:	10bfffcc 	andi	r2,r2,65535
   1e234:	1007883a 	mov	r3,r2
   1e238:	00800174 	movhi	r2,5
   1e23c:	10bcd104 	addi	r2,r2,-3260
   1e240:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
   1e244:	d0a85a17 	ldw	r2,-24216(gp)
   1e248:	10800a17 	ldw	r2,40(r2)
   1e24c:	10800704 	addi	r2,r2,28
   1e250:	10800037 	ldwio	r2,0(r2)
   1e254:	1007883a 	mov	r3,r2
   1e258:	00800174 	movhi	r2,5
   1e25c:	10bcd104 	addi	r2,r2,-3260
   1e260:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
   1e264:	d0a85a17 	ldw	r2,-24216(gp)
   1e268:	10800a17 	ldw	r2,40(r2)
   1e26c:	10800804 	addi	r2,r2,32
   1e270:	10800037 	ldwio	r2,0(r2)
   1e274:	1007883a 	mov	r3,r2
   1e278:	00800174 	movhi	r2,5
   1e27c:	10bcd104 	addi	r2,r2,-3260
   1e280:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
   1e284:	d0a85a17 	ldw	r2,-24216(gp)
   1e288:	10800a17 	ldw	r2,40(r2)
   1e28c:	10800904 	addi	r2,r2,36
   1e290:	10800023 	ldbuio	r2,0(r2)
   1e294:	10803fcc 	andi	r2,r2,255
   1e298:	1007883a 	mov	r3,r2
   1e29c:	00800174 	movhi	r2,5
   1e2a0:	10bcd104 	addi	r2,r2,-3260
   1e2a4:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
   1e2a8:	d0a85a17 	ldw	r2,-24216(gp)
   1e2ac:	10800a17 	ldw	r2,40(r2)
   1e2b0:	10800944 	addi	r2,r2,37
   1e2b4:	10800023 	ldbuio	r2,0(r2)
   1e2b8:	10803fcc 	andi	r2,r2,255
   1e2bc:	1007883a 	mov	r3,r2
   1e2c0:	00800174 	movhi	r2,5
   1e2c4:	10bcd104 	addi	r2,r2,-3260
   1e2c8:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
   1e2cc:	d0a85a17 	ldw	r2,-24216(gp)
   1e2d0:	10800a17 	ldw	r2,40(r2)
   1e2d4:	10800984 	addi	r2,r2,38
   1e2d8:	10800023 	ldbuio	r2,0(r2)
   1e2dc:	10803fcc 	andi	r2,r2,255
   1e2e0:	1007883a 	mov	r3,r2
   1e2e4:	00800174 	movhi	r2,5
   1e2e8:	10bcd104 	addi	r2,r2,-3260
   1e2ec:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
   1e2f0:	00800174 	movhi	r2,5
   1e2f4:	10bcd104 	addi	r2,r2,-3260
   1e2f8:	1080040b 	ldhu	r2,16(r2)
   1e2fc:	10ffffcc 	andi	r3,r2,65535
   1e300:	00800174 	movhi	r2,5
   1e304:	10bcd104 	addi	r2,r2,-3260
   1e308:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
   1e30c:	00800174 	movhi	r2,5
   1e310:	10bcd104 	addi	r2,r2,-3260
   1e314:	10c01117 	ldw	r3,68(r2)
   1e318:	00800174 	movhi	r2,5
   1e31c:	10bcd104 	addi	r2,r2,-3260
   1e320:	1080068b 	ldhu	r2,26(r2)
   1e324:	10bfffcc 	andi	r2,r2,65535
   1e328:	1887883a 	add	r3,r3,r2
   1e32c:	00800174 	movhi	r2,5
   1e330:	10bcd104 	addi	r2,r2,-3260
   1e334:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
   1e338:	00800174 	movhi	r2,5
   1e33c:	10bcd104 	addi	r2,r2,-3260
   1e340:	10c01217 	ldw	r3,72(r2)
   1e344:	00800174 	movhi	r2,5
   1e348:	10bcd104 	addi	r2,r2,-3260
   1e34c:	1080068b 	ldhu	r2,26(r2)
   1e350:	10bfffcc 	andi	r2,r2,65535
   1e354:	1887883a 	add	r3,r3,r2
   1e358:	00800174 	movhi	r2,5
   1e35c:	10bcd104 	addi	r2,r2,-3260
   1e360:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
   1e364:	00800174 	movhi	r2,5
   1e368:	10bcd104 	addi	r2,r2,-3260
   1e36c:	10c01317 	ldw	r3,76(r2)
   1e370:	00800174 	movhi	r2,5
   1e374:	10bcd104 	addi	r2,r2,-3260
   1e378:	1080050b 	ldhu	r2,20(r2)
   1e37c:	10bfffcc 	andi	r2,r2,65535
   1e380:	1008917a 	slli	r4,r2,5
   1e384:	00800174 	movhi	r2,5
   1e388:	10bcd104 	addi	r2,r2,-3260
   1e38c:	1080030b 	ldhu	r2,12(r2)
   1e390:	10bfffcc 	andi	r2,r2,65535
   1e394:	2085283a 	div	r2,r4,r2
   1e398:	1887883a 	add	r3,r3,r2
   1e39c:	00800174 	movhi	r2,5
   1e3a0:	10bcd104 	addi	r2,r2,-3260
   1e3a4:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
   1e3a8:	00800174 	movhi	r2,5
   1e3ac:	10bcd104 	addi	r2,r2,-3260
   1e3b0:	1080058b 	ldhu	r2,22(r2)
   1e3b4:	10bfffcc 	andi	r2,r2,65535
   1e3b8:	10000b26 	beq	r2,zero,1e3e8 <Check_for_DOS_FAT+0x4a8>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
   1e3bc:	00800174 	movhi	r2,5
   1e3c0:	10bcd104 	addi	r2,r2,-3260
   1e3c4:	1080058b 	ldhu	r2,22(r2)
   1e3c8:	10ffffcc 	andi	r3,r2,65535
   1e3cc:	00800174 	movhi	r2,5
   1e3d0:	10bcd104 	addi	r2,r2,-3260
   1e3d4:	10800383 	ldbu	r2,14(r2)
   1e3d8:	10803fcc 	andi	r2,r2,255
   1e3dc:	1885283a 	div	r2,r3,r2
   1e3e0:	e0bffd15 	stw	r2,-12(fp)
   1e3e4:	00000906 	br	1e40c <Check_for_DOS_FAT+0x4cc>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
   1e3e8:	00800174 	movhi	r2,5
   1e3ec:	10bcd104 	addi	r2,r2,-3260
   1e3f0:	10c00917 	ldw	r3,36(r2)
   1e3f4:	00800174 	movhi	r2,5
   1e3f8:	10bcd104 	addi	r2,r2,-3260
   1e3fc:	10800383 	ldbu	r2,14(r2)
   1e400:	10803fcc 	andi	r2,r2,255
   1e404:	1885203a 	divu	r2,r3,r2
   1e408:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
   1e40c:	e0bffd17 	ldw	r2,-12(fp)
   1e410:	1083fdc8 	cmpgei	r2,r2,4087
   1e414:	1000051e 	bne	r2,zero,1e42c <Check_for_DOS_FAT+0x4ec>
		{
			boot_sector_data.bits_for_cluster_index = 12;
   1e418:	00800174 	movhi	r2,5
   1e41c:	10bcd104 	addi	r2,r2,-3260
   1e420:	00c00304 	movi	r3,12
   1e424:	10c01085 	stb	r3,66(r2)
   1e428:	00000c06 	br	1e45c <Check_for_DOS_FAT+0x51c>
		}
		else if (num_clusters <= 65517)
   1e42c:	e0bffd17 	ldw	r2,-12(fp)
   1e430:	00fffb54 	movui	r3,65517
   1e434:	18800516 	blt	r3,r2,1e44c <Check_for_DOS_FAT+0x50c>
		{
			boot_sector_data.bits_for_cluster_index = 16;
   1e438:	00800174 	movhi	r2,5
   1e43c:	10bcd104 	addi	r2,r2,-3260
   1e440:	00c00404 	movi	r3,16
   1e444:	10c01085 	stb	r3,66(r2)
   1e448:	00000406 	br	1e45c <Check_for_DOS_FAT+0x51c>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
   1e44c:	00800174 	movhi	r2,5
   1e450:	10bcd104 	addi	r2,r2,-3260
   1e454:	00c00804 	movi	r3,32
   1e458:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
   1e45c:	e03ffc15 	stw	zero,-16(fp)
   1e460:	00001106 	br	1e4a8 <Check_for_DOS_FAT+0x568>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
   1e464:	d0a85a17 	ldw	r2,-24216(gp)
   1e468:	10c00a17 	ldw	r3,40(r2)
   1e46c:	e0bffc17 	ldw	r2,-16(fp)
   1e470:	1885883a 	add	r2,r3,r2
   1e474:	108009c4 	addi	r2,r2,39
   1e478:	10800023 	ldbuio	r2,0(r2)
   1e47c:	10803fcc 	andi	r2,r2,255
   1e480:	1009883a 	mov	r4,r2
   1e484:	00800174 	movhi	r2,5
   1e488:	10bcd104 	addi	r2,r2,-3260
   1e48c:	e0fffc17 	ldw	r3,-16(fp)
   1e490:	10c5883a 	add	r2,r2,r3
   1e494:	10800a04 	addi	r2,r2,40
   1e498:	110000c5 	stb	r4,3(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
   1e49c:	e0bffc17 	ldw	r2,-16(fp)
   1e4a0:	10800044 	addi	r2,r2,1
   1e4a4:	e0bffc15 	stw	r2,-16(fp)
   1e4a8:	e0bffc17 	ldw	r2,-16(fp)
   1e4ac:	10800110 	cmplti	r2,r2,4
   1e4b0:	103fec1e 	bne	r2,zero,1e464 <__alt_mem_Flash_flash_data+0xf401e464>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
   1e4b4:	e03ffc15 	stw	zero,-16(fp)
   1e4b8:	00001106 	br	1e500 <Check_for_DOS_FAT+0x5c0>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
   1e4bc:	d0a85a17 	ldw	r2,-24216(gp)
   1e4c0:	10c00a17 	ldw	r3,40(r2)
   1e4c4:	e0bffc17 	ldw	r2,-16(fp)
   1e4c8:	1885883a 	add	r2,r3,r2
   1e4cc:	10800ac4 	addi	r2,r2,43
   1e4d0:	10800023 	ldbuio	r2,0(r2)
   1e4d4:	10803fcc 	andi	r2,r2,255
   1e4d8:	1009883a 	mov	r4,r2
   1e4dc:	00800174 	movhi	r2,5
   1e4e0:	10bcd104 	addi	r2,r2,-3260
   1e4e4:	e0fffc17 	ldw	r3,-16(fp)
   1e4e8:	10c5883a 	add	r2,r2,r3
   1e4ec:	10800b04 	addi	r2,r2,44
   1e4f0:	110000c5 	stb	r4,3(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
   1e4f4:	e0bffc17 	ldw	r2,-16(fp)
   1e4f8:	10800044 	addi	r2,r2,1
   1e4fc:	e0bffc15 	stw	r2,-16(fp)
   1e500:	e0bffc17 	ldw	r2,-16(fp)
   1e504:	108002d0 	cmplti	r2,r2,11
   1e508:	103fec1e 	bne	r2,zero,1e4bc <__alt_mem_Flash_flash_data+0xf401e4bc>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
   1e50c:	e03ffc15 	stw	zero,-16(fp)
   1e510:	00001106 	br	1e558 <Check_for_DOS_FAT+0x618>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
   1e514:	d0a85a17 	ldw	r2,-24216(gp)
   1e518:	10c00a17 	ldw	r3,40(r2)
   1e51c:	e0bffc17 	ldw	r2,-16(fp)
   1e520:	1885883a 	add	r2,r3,r2
   1e524:	10800d84 	addi	r2,r2,54
   1e528:	10800023 	ldbuio	r2,0(r2)
   1e52c:	10803fcc 	andi	r2,r2,255
   1e530:	1009883a 	mov	r4,r2
   1e534:	00800174 	movhi	r2,5
   1e538:	10bcd104 	addi	r2,r2,-3260
   1e53c:	e0fffc17 	ldw	r3,-16(fp)
   1e540:	10c5883a 	add	r2,r2,r3
   1e544:	10800e04 	addi	r2,r2,56
   1e548:	11000085 	stb	r4,2(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
   1e54c:	e0bffc17 	ldw	r2,-16(fp)
   1e550:	10800044 	addi	r2,r2,1
   1e554:	e0bffc15 	stw	r2,-16(fp)
   1e558:	e0bffc17 	ldw	r2,-16(fp)
   1e55c:	10800210 	cmplti	r2,r2,8
   1e560:	103fec1e 	bne	r2,zero,1e514 <__alt_mem_Flash_flash_data+0xf401e514>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
   1e564:	e03ffc15 	stw	zero,-16(fp)
   1e568:	00000a06 	br	1e594 <Check_for_DOS_FAT+0x654>
		{
			active_files[counter].in_use = false;
   1e56c:	00800174 	movhi	r2,5
   1e570:	10bce604 	addi	r2,r2,-3176
   1e574:	e0fffc17 	ldw	r3,-16(fp)
   1e578:	180691ba 	slli	r3,r3,6
   1e57c:	18c00f04 	addi	r3,r3,60
   1e580:	10c5883a 	add	r2,r2,r3
   1e584:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
   1e588:	e0bffc17 	ldw	r2,-16(fp)
   1e58c:	10800044 	addi	r2,r2,1
   1e590:	e0bffc15 	stw	r2,-16(fp)
   1e594:	e0bffc17 	ldw	r2,-16(fp)
   1e598:	10800510 	cmplti	r2,r2,20
   1e59c:	103ff31e 	bne	r2,zero,1e56c <__alt_mem_Flash_flash_data+0xf401e56c>
		{
			active_files[counter].in_use = false;
		}
		result = true;
   1e5a0:	00800044 	movi	r2,1
   1e5a4:	e0bffb15 	stw	r2,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
   1e5a8:	00000106 	br	1e5b0 <Check_for_DOS_FAT+0x670>
		}
		result = true;
	}
    else
    {
        result = false;
   1e5ac:	e03ffb15 	stw	zero,-20(fp)
    }
	return result;
   1e5b0:	e0bffb17 	ldw	r2,-20(fp)
}
   1e5b4:	e037883a 	mov	sp,fp
   1e5b8:	dfc00117 	ldw	ra,4(sp)
   1e5bc:	df000017 	ldw	fp,0(sp)
   1e5c0:	dec00204 	addi	sp,sp,8
   1e5c4:	f800283a 	ret

0001e5c8 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
   1e5c8:	defffc04 	addi	sp,sp,-16
   1e5cc:	dfc00315 	stw	ra,12(sp)
   1e5d0:	df000215 	stw	fp,8(sp)
   1e5d4:	df000204 	addi	fp,sp,8
	bool result = false;
   1e5d8:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
   1e5dc:	00202340 	call	20234 <alt_up_sd_card_is_Present>
   1e5e0:	10002e26 	beq	r2,zero,1e69c <Look_for_FAT16+0xd4>
	{
		short int csd_file_format = *CSD_register_w0;
   1e5e4:	d0a85417 	ldw	r2,-24240(gp)
   1e5e8:	1080000b 	ldhu	r2,0(r2)
   1e5ec:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
   1e5f0:	d0285815 	stw	zero,-24224(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
   1e5f4:	d0285915 	stw	zero,-24220(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
   1e5f8:	e0bfff0f 	ldh	r2,-4(fp)
   1e5fc:	10002716 	blt	r2,zero,1e69c <Look_for_FAT16+0xd4>
   1e600:	e0bfff0b 	ldhu	r2,-4(fp)
   1e604:	10bfffcc 	andi	r2,r2,65535
   1e608:	1083000c 	andi	r2,r2,3072
   1e60c:	10830020 	cmpeqi	r2,r2,3072
   1e610:	1000221e 	bne	r2,zero,1e69c <Look_for_FAT16+0xd4>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
   1e614:	e0bfff0b 	ldhu	r2,-4(fp)
   1e618:	10bfffcc 	andi	r2,r2,65535
   1e61c:	1083000c 	andi	r2,r2,3072
   1e620:	10810018 	cmpnei	r2,r2,1024
   1e624:	1000031e 	bne	r2,zero,1e634 <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
   1e628:	0009883a 	mov	r4,zero
   1e62c:	001df400 	call	1df40 <Check_for_DOS_FAT>
   1e630:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
   1e634:	e0bfff0b 	ldhu	r2,-4(fp)
   1e638:	10bfffcc 	andi	r2,r2,65535
   1e63c:	1083000c 	andi	r2,r2,3072
   1e640:	1000061e 	bne	r2,zero,1e65c <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
   1e644:	001d88c0 	call	1d88c <Check_for_Master_Boot_Record>
   1e648:	10000426 	beq	r2,zero,1e65c <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
   1e64c:	d0a85817 	ldw	r2,-24224(gp)
   1e650:	1009883a 	mov	r4,r2
   1e654:	001df400 	call	1df40 <Check_for_DOS_FAT>
   1e658:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
   1e65c:	e0bffe17 	ldw	r2,-8(fp)
   1e660:	10800058 	cmpnei	r2,r2,1
   1e664:	10000d1e 	bne	r2,zero,1e69c <Look_for_FAT16+0xd4>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
   1e668:	00800174 	movhi	r2,5
   1e66c:	10bcd104 	addi	r2,r2,-3260
   1e670:	10801083 	ldbu	r2,66(r2)
   1e674:	10803fcc 	andi	r2,r2,255
   1e678:	10800420 	cmpeqi	r2,r2,16
   1e67c:	1000021e 	bne	r2,zero,1e688 <Look_for_FAT16+0xc0>
				{
					result = false;
   1e680:	e03ffe15 	stw	zero,-8(fp)
   1e684:	00000506 	br	1e69c <Look_for_FAT16+0xd4>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
   1e688:	00800174 	movhi	r2,5
   1e68c:	10bcd104 	addi	r2,r2,-3260
   1e690:	1080058b 	ldhu	r2,22(r2)
   1e694:	10bfffcc 	andi	r2,r2,65535
   1e698:	d0a85915 	stw	r2,-24220(gp)
				}
			}
		}
	}
	return result;
   1e69c:	e0bffe17 	ldw	r2,-8(fp)
}
   1e6a0:	e037883a 	mov	sp,fp
   1e6a4:	dfc00117 	ldw	ra,4(sp)
   1e6a8:	df000017 	ldw	fp,0(sp)
   1e6ac:	dec00204 	addi	sp,sp,8
   1e6b0:	f800283a 	ret

0001e6b4 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
   1e6b4:	defffb04 	addi	sp,sp,-20
   1e6b8:	dfc00415 	stw	ra,16(sp)
   1e6bc:	df000315 	stw	fp,12(sp)
   1e6c0:	df000304 	addi	fp,sp,12
   1e6c4:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
   1e6c8:	e13fff17 	ldw	r4,-4(fp)
   1e6cc:	00047800 	call	4780 <strlen>
   1e6d0:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
   1e6d4:	e03ffd15 	stw	zero,-12(fp)
   1e6d8:	00001e06 	br	1e754 <filename_to_upper_case+0xa0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
   1e6dc:	e0bffd17 	ldw	r2,-12(fp)
   1e6e0:	e0ffff17 	ldw	r3,-4(fp)
   1e6e4:	1885883a 	add	r2,r3,r2
   1e6e8:	10800003 	ldbu	r2,0(r2)
   1e6ec:	10803fcc 	andi	r2,r2,255
   1e6f0:	1080201c 	xori	r2,r2,128
   1e6f4:	10bfe004 	addi	r2,r2,-128
   1e6f8:	10801850 	cmplti	r2,r2,97
   1e6fc:	1000121e 	bne	r2,zero,1e748 <filename_to_upper_case+0x94>
   1e700:	e0bffd17 	ldw	r2,-12(fp)
   1e704:	e0ffff17 	ldw	r3,-4(fp)
   1e708:	1885883a 	add	r2,r3,r2
   1e70c:	10800003 	ldbu	r2,0(r2)
   1e710:	10803fcc 	andi	r2,r2,255
   1e714:	1080201c 	xori	r2,r2,128
   1e718:	10bfe004 	addi	r2,r2,-128
   1e71c:	10801ec8 	cmpgei	r2,r2,123
   1e720:	1000091e 	bne	r2,zero,1e748 <filename_to_upper_case+0x94>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
   1e724:	e0bffd17 	ldw	r2,-12(fp)
   1e728:	e0ffff17 	ldw	r3,-4(fp)
   1e72c:	1885883a 	add	r2,r3,r2
   1e730:	e0fffd17 	ldw	r3,-12(fp)
   1e734:	e13fff17 	ldw	r4,-4(fp)
   1e738:	20c7883a 	add	r3,r4,r3
   1e73c:	18c00003 	ldbu	r3,0(r3)
   1e740:	18fff804 	addi	r3,r3,-32
   1e744:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
   1e748:	e0bffd17 	ldw	r2,-12(fp)
   1e74c:	10800044 	addi	r2,r2,1
   1e750:	e0bffd15 	stw	r2,-12(fp)
   1e754:	e0fffd17 	ldw	r3,-12(fp)
   1e758:	e0bffe17 	ldw	r2,-8(fp)
   1e75c:	18bfdf16 	blt	r3,r2,1e6dc <__alt_mem_Flash_flash_data+0xf401e6dc>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
   1e760:	e037883a 	mov	sp,fp
   1e764:	dfc00117 	ldw	ra,4(sp)
   1e768:	df000017 	ldw	fp,0(sp)
   1e76c:	dec00204 	addi	sp,sp,8
   1e770:	f800283a 	ret

0001e774 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
   1e774:	defff804 	addi	sp,sp,-32
   1e778:	dfc00715 	stw	ra,28(sp)
   1e77c:	df000615 	stw	fp,24(sp)
   1e780:	df000604 	addi	fp,sp,24
   1e784:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
   1e788:	e13fff17 	ldw	r4,-4(fp)
   1e78c:	00047800 	call	4780 <strlen>
   1e790:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
   1e794:	00bfffc4 	movi	r2,-1
   1e798:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
   1e79c:	00bfffc4 	movi	r2,-1
   1e7a0:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
   1e7a4:	00800044 	movi	r2,1
   1e7a8:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
   1e7ac:	e03ffa15 	stw	zero,-24(fp)
   1e7b0:	00006d06 	br	1e968 <check_file_name_for_FAT16_compliance+0x1f4>
    {
        if ((file_name[index] == ' ') ||
   1e7b4:	e0bffa17 	ldw	r2,-24(fp)
   1e7b8:	e0ffff17 	ldw	r3,-4(fp)
   1e7bc:	1885883a 	add	r2,r3,r2
   1e7c0:	10800003 	ldbu	r2,0(r2)
   1e7c4:	10803fcc 	andi	r2,r2,255
   1e7c8:	1080201c 	xori	r2,r2,128
   1e7cc:	10bfe004 	addi	r2,r2,-128
   1e7d0:	10800820 	cmpeqi	r2,r2,32
   1e7d4:	10003e1e 	bne	r2,zero,1e8d0 <check_file_name_for_FAT16_compliance+0x15c>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   1e7d8:	e0bffa17 	ldw	r2,-24(fp)
   1e7dc:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
   1e7e0:	e0bffb17 	ldw	r2,-20(fp)
   1e7e4:	1880121e 	bne	r3,r2,1e830 <check_file_name_for_FAT16_compliance+0xbc>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   1e7e8:	e0bffa17 	ldw	r2,-24(fp)
   1e7ec:	e0ffff17 	ldw	r3,-4(fp)
   1e7f0:	1885883a 	add	r2,r3,r2
   1e7f4:	10800003 	ldbu	r2,0(r2)
   1e7f8:	10803fcc 	andi	r2,r2,255
   1e7fc:	1080201c 	xori	r2,r2,128
   1e800:	10bfe004 	addi	r2,r2,-128
   1e804:	10801720 	cmpeqi	r2,r2,92
   1e808:	1000311e 	bne	r2,zero,1e8d0 <check_file_name_for_FAT16_compliance+0x15c>
   1e80c:	e0bffa17 	ldw	r2,-24(fp)
   1e810:	e0ffff17 	ldw	r3,-4(fp)
   1e814:	1885883a 	add	r2,r3,r2
   1e818:	10800003 	ldbu	r2,0(r2)
   1e81c:	10803fcc 	andi	r2,r2,255
   1e820:	1080201c 	xori	r2,r2,128
   1e824:	10bfe004 	addi	r2,r2,-128
   1e828:	10800be0 	cmpeqi	r2,r2,47
   1e82c:	1000281e 	bne	r2,zero,1e8d0 <check_file_name_for_FAT16_compliance+0x15c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
   1e830:	e0fffa17 	ldw	r3,-24(fp)
   1e834:	e0bffc17 	ldw	r2,-16(fp)
   1e838:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   1e83c:	10800258 	cmpnei	r2,r2,9
   1e840:	1000091e 	bne	r2,zero,1e868 <check_file_name_for_FAT16_compliance+0xf4>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
   1e844:	e0bffa17 	ldw	r2,-24(fp)
   1e848:	e0ffff17 	ldw	r3,-4(fp)
   1e84c:	1885883a 	add	r2,r3,r2
   1e850:	10800003 	ldbu	r2,0(r2)
   1e854:	10803fcc 	andi	r2,r2,255
   1e858:	1080201c 	xori	r2,r2,128
   1e85c:	10bfe004 	addi	r2,r2,-128
   1e860:	10800b98 	cmpnei	r2,r2,46
   1e864:	10001a1e 	bne	r2,zero,1e8d0 <check_file_name_for_FAT16_compliance+0x15c>
   1e868:	e0fffb17 	ldw	r3,-20(fp)
   1e86c:	e0bffc17 	ldw	r2,-16(fp)
   1e870:	18801926 	beq	r3,r2,1e8d8 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
   1e874:	e0fffa17 	ldw	r3,-24(fp)
   1e878:	e0bffc17 	ldw	r2,-16(fp)
   1e87c:	1885c83a 	sub	r2,r3,r2
   1e880:	10800110 	cmplti	r2,r2,4
   1e884:	1000141e 	bne	r2,zero,1e8d8 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
   1e888:	e0bffa17 	ldw	r2,-24(fp)
   1e88c:	e0ffff17 	ldw	r3,-4(fp)
   1e890:	1885883a 	add	r2,r3,r2
   1e894:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
   1e898:	10803fcc 	andi	r2,r2,255
   1e89c:	1080201c 	xori	r2,r2,128
   1e8a0:	10bfe004 	addi	r2,r2,-128
   1e8a4:	10801720 	cmpeqi	r2,r2,92
   1e8a8:	10000b1e 	bne	r2,zero,1e8d8 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
   1e8ac:	e0bffa17 	ldw	r2,-24(fp)
   1e8b0:	e0ffff17 	ldw	r3,-4(fp)
   1e8b4:	1885883a 	add	r2,r3,r2
   1e8b8:	10800003 	ldbu	r2,0(r2)
   1e8bc:	10803fcc 	andi	r2,r2,255
   1e8c0:	1080201c 	xori	r2,r2,128
   1e8c4:	10bfe004 	addi	r2,r2,-128
   1e8c8:	10800be0 	cmpeqi	r2,r2,47
   1e8cc:	1000021e 	bne	r2,zero,1e8d8 <check_file_name_for_FAT16_compliance+0x164>
           )
        {
            result = false;
   1e8d0:	e03ffd15 	stw	zero,-12(fp)
            break;
   1e8d4:	00002706 	br	1e974 <check_file_name_for_FAT16_compliance+0x200>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
   1e8d8:	e0bffa17 	ldw	r2,-24(fp)
   1e8dc:	e0ffff17 	ldw	r3,-4(fp)
   1e8e0:	1885883a 	add	r2,r3,r2
   1e8e4:	10800003 	ldbu	r2,0(r2)
   1e8e8:	10803fcc 	andi	r2,r2,255
   1e8ec:	1080201c 	xori	r2,r2,128
   1e8f0:	10bfe004 	addi	r2,r2,-128
   1e8f4:	10801720 	cmpeqi	r2,r2,92
   1e8f8:	1000091e 	bne	r2,zero,1e920 <check_file_name_for_FAT16_compliance+0x1ac>
   1e8fc:	e0bffa17 	ldw	r2,-24(fp)
   1e900:	e0ffff17 	ldw	r3,-4(fp)
   1e904:	1885883a 	add	r2,r3,r2
   1e908:	10800003 	ldbu	r2,0(r2)
   1e90c:	10803fcc 	andi	r2,r2,255
   1e910:	1080201c 	xori	r2,r2,128
   1e914:	10bfe004 	addi	r2,r2,-128
   1e918:	10800bd8 	cmpnei	r2,r2,47
   1e91c:	1000041e 	bne	r2,zero,1e930 <check_file_name_for_FAT16_compliance+0x1bc>
        {
            last_period = index;
   1e920:	e0bffa17 	ldw	r2,-24(fp)
   1e924:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
   1e928:	e0bffa17 	ldw	r2,-24(fp)
   1e92c:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
   1e930:	e0bffa17 	ldw	r2,-24(fp)
   1e934:	e0ffff17 	ldw	r3,-4(fp)
   1e938:	1885883a 	add	r2,r3,r2
   1e93c:	10800003 	ldbu	r2,0(r2)
   1e940:	10803fcc 	andi	r2,r2,255
   1e944:	1080201c 	xori	r2,r2,128
   1e948:	10bfe004 	addi	r2,r2,-128
   1e94c:	10800b98 	cmpnei	r2,r2,46
   1e950:	1000021e 	bne	r2,zero,1e95c <check_file_name_for_FAT16_compliance+0x1e8>
        {
            last_period = index;
   1e954:	e0bffa17 	ldw	r2,-24(fp)
   1e958:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
   1e95c:	e0bffa17 	ldw	r2,-24(fp)
   1e960:	10800044 	addi	r2,r2,1
   1e964:	e0bffa15 	stw	r2,-24(fp)
   1e968:	e0fffa17 	ldw	r3,-24(fp)
   1e96c:	e0bffe17 	ldw	r2,-8(fp)
   1e970:	18bf9016 	blt	r3,r2,1e7b4 <__alt_mem_Flash_flash_data+0xf401e7b4>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
   1e974:	e0bffe17 	ldw	r2,-8(fp)
   1e978:	10bfffc4 	addi	r2,r2,-1
   1e97c:	e0ffff17 	ldw	r3,-4(fp)
   1e980:	1885883a 	add	r2,r3,r2
   1e984:	10800003 	ldbu	r2,0(r2)
   1e988:	10803fcc 	andi	r2,r2,255
   1e98c:	1080201c 	xori	r2,r2,128
   1e990:	10bfe004 	addi	r2,r2,-128
   1e994:	10801720 	cmpeqi	r2,r2,92
   1e998:	10000a1e 	bne	r2,zero,1e9c4 <check_file_name_for_FAT16_compliance+0x250>
   1e99c:	e0bffe17 	ldw	r2,-8(fp)
   1e9a0:	10bfffc4 	addi	r2,r2,-1
   1e9a4:	e0ffff17 	ldw	r3,-4(fp)
   1e9a8:	1885883a 	add	r2,r3,r2
   1e9ac:	10800003 	ldbu	r2,0(r2)
   1e9b0:	10803fcc 	andi	r2,r2,255
   1e9b4:	1080201c 	xori	r2,r2,128
   1e9b8:	10bfe004 	addi	r2,r2,-128
   1e9bc:	10800bd8 	cmpnei	r2,r2,47
   1e9c0:	1000011e 	bne	r2,zero,1e9c8 <check_file_name_for_FAT16_compliance+0x254>
    {
        result = false;
   1e9c4:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
   1e9c8:	e0bffd17 	ldw	r2,-12(fp)
}
   1e9cc:	e037883a 	mov	sp,fp
   1e9d0:	dfc00117 	ldw	ra,4(sp)
   1e9d4:	df000017 	ldw	fp,0(sp)
   1e9d8:	dec00204 	addi	sp,sp,8
   1e9dc:	f800283a 	ret

0001e9e0 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
   1e9e0:	defffb04 	addi	sp,sp,-20
   1e9e4:	dfc00415 	stw	ra,16(sp)
   1e9e8:	df000315 	stw	fp,12(sp)
   1e9ec:	df000304 	addi	fp,sp,12
   1e9f0:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
   1e9f4:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
   1e9f8:	e13fff17 	ldw	r4,-4(fp)
   1e9fc:	00047800 	call	4780 <strlen>
   1ea00:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
   1ea04:	e03ffd15 	stw	zero,-12(fp)
   1ea08:	00001506 	br	1ea60 <get_dir_divider_location+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
   1ea0c:	e0bffd17 	ldw	r2,-12(fp)
   1ea10:	e0ffff17 	ldw	r3,-4(fp)
   1ea14:	1885883a 	add	r2,r3,r2
   1ea18:	10800003 	ldbu	r2,0(r2)
   1ea1c:	10803fcc 	andi	r2,r2,255
   1ea20:	1080201c 	xori	r2,r2,128
   1ea24:	10bfe004 	addi	r2,r2,-128
   1ea28:	10801720 	cmpeqi	r2,r2,92
   1ea2c:	10000f1e 	bne	r2,zero,1ea6c <get_dir_divider_location+0x8c>
   1ea30:	e0bffd17 	ldw	r2,-12(fp)
   1ea34:	e0ffff17 	ldw	r3,-4(fp)
   1ea38:	1885883a 	add	r2,r3,r2
   1ea3c:	10800003 	ldbu	r2,0(r2)
   1ea40:	10803fcc 	andi	r2,r2,255
   1ea44:	1080201c 	xori	r2,r2,128
   1ea48:	10bfe004 	addi	r2,r2,-128
   1ea4c:	10800be0 	cmpeqi	r2,r2,47
   1ea50:	1000061e 	bne	r2,zero,1ea6c <get_dir_divider_location+0x8c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
   1ea54:	e0bffd17 	ldw	r2,-12(fp)
   1ea58:	10800044 	addi	r2,r2,1
   1ea5c:	e0bffd15 	stw	r2,-12(fp)
   1ea60:	e0fffd17 	ldw	r3,-12(fp)
   1ea64:	e0bffe17 	ldw	r2,-8(fp)
   1ea68:	18bfe816 	blt	r3,r2,1ea0c <__alt_mem_Flash_flash_data+0xf401ea0c>
        {
            break;
        }
    }
    
    if (index == length)
   1ea6c:	e0fffd17 	ldw	r3,-12(fp)
   1ea70:	e0bffe17 	ldw	r2,-8(fp)
   1ea74:	1880021e 	bne	r3,r2,1ea80 <get_dir_divider_location+0xa0>
    {
        index = -1;
   1ea78:	00bfffc4 	movi	r2,-1
   1ea7c:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
   1ea80:	e0bffd17 	ldw	r2,-12(fp)
}
   1ea84:	e037883a 	mov	sp,fp
   1ea88:	dfc00117 	ldw	ra,4(sp)
   1ea8c:	df000017 	ldw	fp,0(sp)
   1ea90:	dec00204 	addi	sp,sp,8
   1ea94:	f800283a 	ret

0001ea98 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
   1ea98:	defffa04 	addi	sp,sp,-24
   1ea9c:	df000515 	stw	fp,20(sp)
   1eaa0:	df000504 	addi	fp,sp,20
   1eaa4:	e13ffd15 	stw	r4,-12(fp)
   1eaa8:	e17ffe15 	stw	r5,-8(fp)
   1eaac:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
   1eab0:	00800044 	movi	r2,1
   1eab4:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
   1eab8:	e03ffc15 	stw	zero,-16(fp)
   1eabc:	00004606 	br	1ebd8 <match_file_record_to_name_ext+0x140>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
   1eac0:	e0fffd17 	ldw	r3,-12(fp)
   1eac4:	e0bffc17 	ldw	r2,-16(fp)
   1eac8:	1885883a 	add	r2,r3,r2
   1eacc:	10800003 	ldbu	r2,0(r2)
   1ead0:	10803fcc 	andi	r2,r2,255
   1ead4:	10801870 	cmpltui	r2,r2,97
   1ead8:	1000101e 	bne	r2,zero,1eb1c <match_file_record_to_name_ext+0x84>
   1eadc:	e0fffd17 	ldw	r3,-12(fp)
   1eae0:	e0bffc17 	ldw	r2,-16(fp)
   1eae4:	1885883a 	add	r2,r3,r2
   1eae8:	10800003 	ldbu	r2,0(r2)
   1eaec:	10803fcc 	andi	r2,r2,255
   1eaf0:	10801ee8 	cmpgeui	r2,r2,123
   1eaf4:	1000091e 	bne	r2,zero,1eb1c <match_file_record_to_name_ext+0x84>
   1eaf8:	e0fffd17 	ldw	r3,-12(fp)
   1eafc:	e0bffc17 	ldw	r2,-16(fp)
   1eb00:	1885883a 	add	r2,r3,r2
   1eb04:	10800003 	ldbu	r2,0(r2)
   1eb08:	10bff804 	addi	r2,r2,-32
   1eb0c:	10c03fcc 	andi	r3,r2,255
   1eb10:	18c0201c 	xori	r3,r3,128
   1eb14:	18ffe004 	addi	r3,r3,-128
   1eb18:	00000706 	br	1eb38 <match_file_record_to_name_ext+0xa0>
   1eb1c:	e0fffd17 	ldw	r3,-12(fp)
   1eb20:	e0bffc17 	ldw	r2,-16(fp)
   1eb24:	1885883a 	add	r2,r3,r2
   1eb28:	10800003 	ldbu	r2,0(r2)
   1eb2c:	10c03fcc 	andi	r3,r2,255
   1eb30:	18c0201c 	xori	r3,r3,128
   1eb34:	18ffe004 	addi	r3,r3,-128
   1eb38:	e0bffc17 	ldw	r2,-16(fp)
   1eb3c:	e13ffe17 	ldw	r4,-8(fp)
   1eb40:	2085883a 	add	r2,r4,r2
   1eb44:	10800003 	ldbu	r2,0(r2)
   1eb48:	10803fcc 	andi	r2,r2,255
   1eb4c:	1080201c 	xori	r2,r2,128
   1eb50:	10bfe004 	addi	r2,r2,-128
   1eb54:	10801850 	cmplti	r2,r2,97
   1eb58:	1000121e 	bne	r2,zero,1eba4 <match_file_record_to_name_ext+0x10c>
   1eb5c:	e0bffc17 	ldw	r2,-16(fp)
   1eb60:	e13ffe17 	ldw	r4,-8(fp)
   1eb64:	2085883a 	add	r2,r4,r2
   1eb68:	10800003 	ldbu	r2,0(r2)
   1eb6c:	10803fcc 	andi	r2,r2,255
   1eb70:	1080201c 	xori	r2,r2,128
   1eb74:	10bfe004 	addi	r2,r2,-128
   1eb78:	10801ec8 	cmpgei	r2,r2,123
   1eb7c:	1000091e 	bne	r2,zero,1eba4 <match_file_record_to_name_ext+0x10c>
   1eb80:	e0bffc17 	ldw	r2,-16(fp)
   1eb84:	e13ffe17 	ldw	r4,-8(fp)
   1eb88:	2085883a 	add	r2,r4,r2
   1eb8c:	10800003 	ldbu	r2,0(r2)
   1eb90:	10bff804 	addi	r2,r2,-32
   1eb94:	10803fcc 	andi	r2,r2,255
   1eb98:	1080201c 	xori	r2,r2,128
   1eb9c:	10bfe004 	addi	r2,r2,-128
   1eba0:	00000706 	br	1ebc0 <match_file_record_to_name_ext+0x128>
   1eba4:	e0bffc17 	ldw	r2,-16(fp)
   1eba8:	e13ffe17 	ldw	r4,-8(fp)
   1ebac:	2085883a 	add	r2,r4,r2
   1ebb0:	10800003 	ldbu	r2,0(r2)
   1ebb4:	10803fcc 	andi	r2,r2,255
   1ebb8:	1080201c 	xori	r2,r2,128
   1ebbc:	10bfe004 	addi	r2,r2,-128
   1ebc0:	18800226 	beq	r3,r2,1ebcc <match_file_record_to_name_ext+0x134>
        {
            match = false;
   1ebc4:	e03ffb15 	stw	zero,-20(fp)
			break;
   1ebc8:	00000606 	br	1ebe4 <match_file_record_to_name_ext+0x14c>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
   1ebcc:	e0bffc17 	ldw	r2,-16(fp)
   1ebd0:	10800044 	addi	r2,r2,1
   1ebd4:	e0bffc15 	stw	r2,-16(fp)
   1ebd8:	e0bffc17 	ldw	r2,-16(fp)
   1ebdc:	10800210 	cmplti	r2,r2,8
   1ebe0:	103fb71e 	bne	r2,zero,1eac0 <__alt_mem_Flash_flash_data+0xf401eac0>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
   1ebe4:	e03ffc15 	stw	zero,-16(fp)
   1ebe8:	00004a06 	br	1ed14 <match_file_record_to_name_ext+0x27c>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
   1ebec:	e0fffd17 	ldw	r3,-12(fp)
   1ebf0:	e0bffc17 	ldw	r2,-16(fp)
   1ebf4:	1885883a 	add	r2,r3,r2
   1ebf8:	10800204 	addi	r2,r2,8
   1ebfc:	10800003 	ldbu	r2,0(r2)
   1ec00:	10803fcc 	andi	r2,r2,255
   1ec04:	10801870 	cmpltui	r2,r2,97
   1ec08:	1000121e 	bne	r2,zero,1ec54 <match_file_record_to_name_ext+0x1bc>
   1ec0c:	e0fffd17 	ldw	r3,-12(fp)
   1ec10:	e0bffc17 	ldw	r2,-16(fp)
   1ec14:	1885883a 	add	r2,r3,r2
   1ec18:	10800204 	addi	r2,r2,8
   1ec1c:	10800003 	ldbu	r2,0(r2)
   1ec20:	10803fcc 	andi	r2,r2,255
   1ec24:	10801ee8 	cmpgeui	r2,r2,123
   1ec28:	10000a1e 	bne	r2,zero,1ec54 <match_file_record_to_name_ext+0x1bc>
   1ec2c:	e0fffd17 	ldw	r3,-12(fp)
   1ec30:	e0bffc17 	ldw	r2,-16(fp)
   1ec34:	1885883a 	add	r2,r3,r2
   1ec38:	10800204 	addi	r2,r2,8
   1ec3c:	10800003 	ldbu	r2,0(r2)
   1ec40:	10bff804 	addi	r2,r2,-32
   1ec44:	10c03fcc 	andi	r3,r2,255
   1ec48:	18c0201c 	xori	r3,r3,128
   1ec4c:	18ffe004 	addi	r3,r3,-128
   1ec50:	00000806 	br	1ec74 <match_file_record_to_name_ext+0x1dc>
   1ec54:	e0fffd17 	ldw	r3,-12(fp)
   1ec58:	e0bffc17 	ldw	r2,-16(fp)
   1ec5c:	1885883a 	add	r2,r3,r2
   1ec60:	10800204 	addi	r2,r2,8
   1ec64:	10800003 	ldbu	r2,0(r2)
   1ec68:	10c03fcc 	andi	r3,r2,255
   1ec6c:	18c0201c 	xori	r3,r3,128
   1ec70:	18ffe004 	addi	r3,r3,-128
   1ec74:	e0bffc17 	ldw	r2,-16(fp)
   1ec78:	e13fff17 	ldw	r4,-4(fp)
   1ec7c:	2085883a 	add	r2,r4,r2
   1ec80:	10800003 	ldbu	r2,0(r2)
   1ec84:	10803fcc 	andi	r2,r2,255
   1ec88:	1080201c 	xori	r2,r2,128
   1ec8c:	10bfe004 	addi	r2,r2,-128
   1ec90:	10801850 	cmplti	r2,r2,97
   1ec94:	1000121e 	bne	r2,zero,1ece0 <match_file_record_to_name_ext+0x248>
   1ec98:	e0bffc17 	ldw	r2,-16(fp)
   1ec9c:	e13fff17 	ldw	r4,-4(fp)
   1eca0:	2085883a 	add	r2,r4,r2
   1eca4:	10800003 	ldbu	r2,0(r2)
   1eca8:	10803fcc 	andi	r2,r2,255
   1ecac:	1080201c 	xori	r2,r2,128
   1ecb0:	10bfe004 	addi	r2,r2,-128
   1ecb4:	10801ec8 	cmpgei	r2,r2,123
   1ecb8:	1000091e 	bne	r2,zero,1ece0 <match_file_record_to_name_ext+0x248>
   1ecbc:	e0bffc17 	ldw	r2,-16(fp)
   1ecc0:	e13fff17 	ldw	r4,-4(fp)
   1ecc4:	2085883a 	add	r2,r4,r2
   1ecc8:	10800003 	ldbu	r2,0(r2)
   1eccc:	10bff804 	addi	r2,r2,-32
   1ecd0:	10803fcc 	andi	r2,r2,255
   1ecd4:	1080201c 	xori	r2,r2,128
   1ecd8:	10bfe004 	addi	r2,r2,-128
   1ecdc:	00000706 	br	1ecfc <match_file_record_to_name_ext+0x264>
   1ece0:	e0bffc17 	ldw	r2,-16(fp)
   1ece4:	e13fff17 	ldw	r4,-4(fp)
   1ece8:	2085883a 	add	r2,r4,r2
   1ecec:	10800003 	ldbu	r2,0(r2)
   1ecf0:	10803fcc 	andi	r2,r2,255
   1ecf4:	1080201c 	xori	r2,r2,128
   1ecf8:	10bfe004 	addi	r2,r2,-128
   1ecfc:	18800226 	beq	r3,r2,1ed08 <match_file_record_to_name_ext+0x270>
        {
            match = false;
   1ed00:	e03ffb15 	stw	zero,-20(fp)
			break;
   1ed04:	00000606 	br	1ed20 <match_file_record_to_name_ext+0x288>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
   1ed08:	e0bffc17 	ldw	r2,-16(fp)
   1ed0c:	10800044 	addi	r2,r2,1
   1ed10:	e0bffc15 	stw	r2,-16(fp)
   1ed14:	e0bffc17 	ldw	r2,-16(fp)
   1ed18:	108000d0 	cmplti	r2,r2,3
   1ed1c:	103fb31e 	bne	r2,zero,1ebec <__alt_mem_Flash_flash_data+0xf401ebec>
        {
            match = false;
			break;
        }
    }
	return match;
   1ed20:	e0bffb17 	ldw	r2,-20(fp)
}
   1ed24:	e037883a 	mov	sp,fp
   1ed28:	df000017 	ldw	fp,0(sp)
   1ed2c:	dec00104 	addi	sp,sp,4
   1ed30:	f800283a 	ret

0001ed34 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
   1ed34:	deffe704 	addi	sp,sp,-100
   1ed38:	dfc01815 	stw	ra,96(sp)
   1ed3c:	df001715 	stw	fp,92(sp)
   1ed40:	df001704 	addi	fp,sp,92
   1ed44:	e13ffd15 	stw	r4,-12(fp)
   1ed48:	e17ffe15 	stw	r5,-8(fp)
   1ed4c:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
   1ed50:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
   1ed54:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
   1ed58:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
   1ed5c:	e13ffd17 	ldw	r4,-12(fp)
   1ed60:	001e9e00 	call	1e9e0 <get_dir_divider_location>
   1ed64:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
   1ed68:	00012c06 	br	1f21c <get_home_directory_cluster_for_file+0x4e8>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   1ed6c:	00800804 	movi	r2,32
   1ed70:	e0bff905 	stb	r2,-28(fp)
   1ed74:	00800804 	movi	r2,32
   1ed78:	e0bff945 	stb	r2,-27(fp)
   1ed7c:	00800804 	movi	r2,32
   1ed80:	e0bff985 	stb	r2,-26(fp)
   1ed84:	00800804 	movi	r2,32
   1ed88:	e0bff9c5 	stb	r2,-25(fp)
   1ed8c:	00800804 	movi	r2,32
   1ed90:	e0bffa05 	stb	r2,-24(fp)
   1ed94:	00800804 	movi	r2,32
   1ed98:	e0bffa45 	stb	r2,-23(fp)
   1ed9c:	00800804 	movi	r2,32
   1eda0:	e0bffa85 	stb	r2,-22(fp)
   1eda4:	00800804 	movi	r2,32
   1eda8:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
   1edac:	00800804 	movi	r2,32
   1edb0:	e0bffb05 	stb	r2,-20(fp)
   1edb4:	00800804 	movi	r2,32
   1edb8:	e0bffb45 	stb	r2,-19(fp)
   1edbc:	00800804 	movi	r2,32
   1edc0:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
   1edc4:	00bfffc4 	movi	r2,-1
   1edc8:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
   1edcc:	e0bfea17 	ldw	r2,-88(fp)
   1edd0:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
   1edd4:	e03fec15 	stw	zero,-80(fp)
   1edd8:	00002d06 	br	1ee90 <get_home_directory_cluster_for_file+0x15c>
        {
            if (file_name[index+start_location] == '.')
   1eddc:	e0ffec17 	ldw	r3,-80(fp)
   1ede0:	e0bfed17 	ldw	r2,-76(fp)
   1ede4:	1885883a 	add	r2,r3,r2
   1ede8:	1007883a 	mov	r3,r2
   1edec:	e0bffd17 	ldw	r2,-12(fp)
   1edf0:	10c5883a 	add	r2,r2,r3
   1edf4:	10800003 	ldbu	r2,0(r2)
   1edf8:	10803fcc 	andi	r2,r2,255
   1edfc:	1080201c 	xori	r2,r2,128
   1ee00:	10bfe004 	addi	r2,r2,-128
   1ee04:	10800b98 	cmpnei	r2,r2,46
   1ee08:	1000031e 	bne	r2,zero,1ee18 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
   1ee0c:	e0bfec17 	ldw	r2,-80(fp)
   1ee10:	e0bfee15 	stw	r2,-72(fp)
   1ee14:	00001b06 	br	1ee84 <get_home_directory_cluster_for_file+0x150>
            }
            else if (ext_index < 0)
   1ee18:	e0bfee17 	ldw	r2,-72(fp)
   1ee1c:	10000c0e 	bge	r2,zero,1ee50 <get_home_directory_cluster_for_file+0x11c>
            {
                name[index] = file_name[index+start_location];
   1ee20:	e0ffec17 	ldw	r3,-80(fp)
   1ee24:	e0bfed17 	ldw	r2,-76(fp)
   1ee28:	1885883a 	add	r2,r3,r2
   1ee2c:	1007883a 	mov	r3,r2
   1ee30:	e0bffd17 	ldw	r2,-12(fp)
   1ee34:	10c5883a 	add	r2,r2,r3
   1ee38:	10c00003 	ldbu	r3,0(r2)
   1ee3c:	e13ff904 	addi	r4,fp,-28
   1ee40:	e0bfec17 	ldw	r2,-80(fp)
   1ee44:	2085883a 	add	r2,r4,r2
   1ee48:	10c00005 	stb	r3,0(r2)
   1ee4c:	00000d06 	br	1ee84 <get_home_directory_cluster_for_file+0x150>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
   1ee50:	e0ffec17 	ldw	r3,-80(fp)
   1ee54:	e0bfee17 	ldw	r2,-72(fp)
   1ee58:	1885c83a 	sub	r2,r3,r2
   1ee5c:	e13fec17 	ldw	r4,-80(fp)
   1ee60:	e0ffed17 	ldw	r3,-76(fp)
   1ee64:	20c7883a 	add	r3,r4,r3
   1ee68:	1809883a 	mov	r4,r3
   1ee6c:	e0fffd17 	ldw	r3,-12(fp)
   1ee70:	1907883a 	add	r3,r3,r4
   1ee74:	18c00003 	ldbu	r3,0(r3)
   1ee78:	e13ffb04 	addi	r4,fp,-20
   1ee7c:	2085883a 	add	r2,r4,r2
   1ee80:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
   1ee84:	e0bfec17 	ldw	r2,-80(fp)
   1ee88:	10800044 	addi	r2,r2,1
   1ee8c:	e0bfec15 	stw	r2,-80(fp)
   1ee90:	e0ffec17 	ldw	r3,-80(fp)
   1ee94:	e0bfeb17 	ldw	r2,-84(fp)
   1ee98:	18bfd016 	blt	r3,r2,1eddc <__alt_mem_Flash_flash_data+0xf401eddc>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
   1ee9c:	e0bfea17 	ldw	r2,-88(fp)
   1eea0:	10005b1e 	bne	r2,zero,1f010 <get_home_directory_cluster_for_file+0x2dc>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1eea4:	00800174 	movhi	r2,5
   1eea8:	10bcd104 	addi	r2,r2,-3260
   1eeac:	1080050b 	ldhu	r2,20(r2)
   1eeb0:	10bfffcc 	andi	r2,r2,65535
   1eeb4:	1006917a 	slli	r3,r2,5
   1eeb8:	00800174 	movhi	r2,5
   1eebc:	10bcd104 	addi	r2,r2,-3260
   1eec0:	1080030b 	ldhu	r2,12(r2)
   1eec4:	10bfffcc 	andi	r2,r2,65535
   1eec8:	1885283a 	div	r2,r3,r2
   1eecc:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1eed0:	e03ff015 	stw	zero,-64(fp)
   1eed4:	00003e06 	br	1efd0 <get_home_directory_cluster_for_file+0x29c>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
   1eed8:	00800174 	movhi	r2,5
   1eedc:	10bcd104 	addi	r2,r2,-3260
   1eee0:	10c01317 	ldw	r3,76(r2)
   1eee4:	e0bff017 	ldw	r2,-64(fp)
   1eee8:	1885883a 	add	r2,r3,r2
   1eeec:	1007883a 	mov	r3,r2
   1eef0:	d0a85817 	ldw	r2,-24224(gp)
   1eef4:	1809883a 	mov	r4,r3
   1eef8:	100b883a 	mov	r5,r2
   1eefc:	001d6200 	call	1d620 <Read_Sector_Data>
   1ef00:	10002e26 	beq	r2,zero,1efbc <get_home_directory_cluster_for_file+0x288>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1ef04:	e03ff115 	stw	zero,-60(fp)
   1ef08:	00002506 	br	1efa0 <get_home_directory_cluster_for_file+0x26c>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   1ef0c:	e0bff117 	ldw	r2,-60(fp)
   1ef10:	1006917a 	slli	r3,r2,5
   1ef14:	e0bff017 	ldw	r2,-64(fp)
   1ef18:	1809883a 	mov	r4,r3
   1ef1c:	e17fff17 	ldw	r5,-4(fp)
   1ef20:	000d883a 	mov	r6,zero
   1ef24:	100f883a 	mov	r7,r2
   1ef28:	001da380 	call	1da38 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1ef2c:	e0bfff17 	ldw	r2,-4(fp)
   1ef30:	10800003 	ldbu	r2,0(r2)
   1ef34:	10803fcc 	andi	r2,r2,255
   1ef38:	10803960 	cmpeqi	r2,r2,229
   1ef3c:	1000151e 	bne	r2,zero,1ef94 <get_home_directory_cluster_for_file+0x260>
   1ef40:	e0bfff17 	ldw	r2,-4(fp)
   1ef44:	10800003 	ldbu	r2,0(r2)
   1ef48:	10803fcc 	andi	r2,r2,255
   1ef4c:	10001126 	beq	r2,zero,1ef94 <get_home_directory_cluster_for_file+0x260>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   1ef50:	e0fff904 	addi	r3,fp,-28
   1ef54:	e0bffb04 	addi	r2,fp,-20
   1ef58:	e13fff17 	ldw	r4,-4(fp)
   1ef5c:	180b883a 	mov	r5,r3
   1ef60:	100d883a 	mov	r6,r2
   1ef64:	001ea980 	call	1ea98 <match_file_record_to_name_ext>
   1ef68:	e0bff815 	stw	r2,-32(fp)
                            if (match)
   1ef6c:	e0bff817 	ldw	r2,-32(fp)
   1ef70:	10000826 	beq	r2,zero,1ef94 <get_home_directory_cluster_for_file+0x260>
                            {
                                new_cluster = file_record->start_cluster_index;
   1ef74:	e0bfff17 	ldw	r2,-4(fp)
   1ef78:	1080058b 	ldhu	r2,22(r2)
   1ef7c:	10bfffcc 	andi	r2,r2,65535
   1ef80:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
   1ef84:	e0bfff17 	ldw	r2,-4(fp)
   1ef88:	00c00044 	movi	r3,1
   1ef8c:	10c00a15 	stw	r3,40(r2)
                                break;
   1ef90:	00000606 	br	1efac <get_home_directory_cluster_for_file+0x278>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1ef94:	e0bff117 	ldw	r2,-60(fp)
   1ef98:	10800044 	addi	r2,r2,1
   1ef9c:	e0bff115 	stw	r2,-60(fp)
   1efa0:	e0bff117 	ldw	r2,-60(fp)
   1efa4:	10800410 	cmplti	r2,r2,16
   1efa8:	103fd81e 	bne	r2,zero,1ef0c <__alt_mem_Flash_flash_data+0xf401ef0c>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
   1efac:	e0ffef17 	ldw	r3,-68(fp)
   1efb0:	e0bfea17 	ldw	r2,-88(fp)
   1efb4:	18800326 	beq	r3,r2,1efc4 <get_home_directory_cluster_for_file+0x290>
   1efb8:	00000106 	br	1efc0 <get_home_directory_cluster_for_file+0x28c>
                        }
                    }
                }
                else
                {
                    break;
   1efbc:	00000706 	br	1efdc <get_home_directory_cluster_for_file+0x2a8>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
   1efc0:	00000606 	br	1efdc <get_home_directory_cluster_for_file+0x2a8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1efc4:	e0bff017 	ldw	r2,-64(fp)
   1efc8:	10800044 	addi	r2,r2,1
   1efcc:	e0bff015 	stw	r2,-64(fp)
   1efd0:	e0fff017 	ldw	r3,-64(fp)
   1efd4:	e0bff717 	ldw	r2,-36(fp)
   1efd8:	18bfbf16 	blt	r3,r2,1eed8 <__alt_mem_Flash_flash_data+0xf401eed8>
                if (new_cluster != home_dir_cluster)
                {
                    break;
                }
            }
            if (new_cluster != home_dir_cluster)
   1efdc:	e0ffef17 	ldw	r3,-68(fp)
   1efe0:	e0bfea17 	ldw	r2,-88(fp)
   1efe4:	18800826 	beq	r3,r2,1f008 <get_home_directory_cluster_for_file+0x2d4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   1efe8:	e0bfef17 	ldw	r2,-68(fp)
   1efec:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
   1eff0:	e0ffed17 	ldw	r3,-76(fp)
   1eff4:	e0bfeb17 	ldw	r2,-84(fp)
   1eff8:	1885883a 	add	r2,r3,r2
   1effc:	10800044 	addi	r2,r2,1
   1f000:	e0bfed15 	stw	r2,-76(fp)
   1f004:	00007b06 	br	1f1f4 <get_home_directory_cluster_for_file+0x4c0>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   1f008:	0005883a 	mov	r2,zero
   1f00c:	00008f06 	br	1f24c <get_home_directory_cluster_for_file+0x518>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
   1f010:	e0bfea17 	ldw	r2,-88(fp)
   1f014:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1f018:	e0bff417 	ldw	r2,-48(fp)
   1f01c:	10ffff84 	addi	r3,r2,-2
   1f020:	00800174 	movhi	r2,5
   1f024:	10bcd104 	addi	r2,r2,-3260
   1f028:	10800383 	ldbu	r2,14(r2)
   1f02c:	10803fcc 	andi	r2,r2,255
   1f030:	1885383a 	mul	r2,r3,r2
   1f034:	1007883a 	mov	r3,r2
   1f038:	00800174 	movhi	r2,5
   1f03c:	10bcd104 	addi	r2,r2,-3260
   1f040:	10801417 	ldw	r2,80(r2)
   1f044:	1885883a 	add	r2,r3,r2
   1f048:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1f04c:	e03ff215 	stw	zero,-56(fp)
   1f050:	00003806 	br	1f134 <get_home_directory_cluster_for_file+0x400>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1f054:	e0fff217 	ldw	r3,-56(fp)
   1f058:	e0bff517 	ldw	r2,-44(fp)
   1f05c:	1887883a 	add	r3,r3,r2
   1f060:	d0a85817 	ldw	r2,-24224(gp)
   1f064:	1809883a 	mov	r4,r3
   1f068:	100b883a 	mov	r5,r2
   1f06c:	001d6200 	call	1d620 <Read_Sector_Data>
   1f070:	10002b26 	beq	r2,zero,1f120 <get_home_directory_cluster_for_file+0x3ec>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
   1f074:	e03ff315 	stw	zero,-52(fp)
   1f078:	00002206 	br	1f104 <get_home_directory_cluster_for_file+0x3d0>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   1f07c:	e0bff317 	ldw	r2,-52(fp)
   1f080:	1008917a 	slli	r4,r2,5
   1f084:	e0fff417 	ldw	r3,-48(fp)
   1f088:	e0bff217 	ldw	r2,-56(fp)
   1f08c:	e17fff17 	ldw	r5,-4(fp)
   1f090:	180d883a 	mov	r6,r3
   1f094:	100f883a 	mov	r7,r2
   1f098:	001da380 	call	1da38 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1f09c:	e0bfff17 	ldw	r2,-4(fp)
   1f0a0:	10800003 	ldbu	r2,0(r2)
   1f0a4:	10803fcc 	andi	r2,r2,255
   1f0a8:	10803960 	cmpeqi	r2,r2,229
   1f0ac:	1000121e 	bne	r2,zero,1f0f8 <get_home_directory_cluster_for_file+0x3c4>
   1f0b0:	e0bfff17 	ldw	r2,-4(fp)
   1f0b4:	10800003 	ldbu	r2,0(r2)
   1f0b8:	10803fcc 	andi	r2,r2,255
   1f0bc:	10000e26 	beq	r2,zero,1f0f8 <get_home_directory_cluster_for_file+0x3c4>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
   1f0c0:	e0fff904 	addi	r3,fp,-28
   1f0c4:	e0bffb04 	addi	r2,fp,-20
   1f0c8:	e13fff17 	ldw	r4,-4(fp)
   1f0cc:	180b883a 	mov	r5,r3
   1f0d0:	100d883a 	mov	r6,r2
   1f0d4:	001ea980 	call	1ea98 <match_file_record_to_name_ext>
   1f0d8:	e0bff615 	stw	r2,-40(fp)
                                if (match)
   1f0dc:	e0bff617 	ldw	r2,-40(fp)
   1f0e0:	10000526 	beq	r2,zero,1f0f8 <get_home_directory_cluster_for_file+0x3c4>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
   1f0e4:	e0bfff17 	ldw	r2,-4(fp)
   1f0e8:	1080058b 	ldhu	r2,22(r2)
   1f0ec:	10bfffcc 	andi	r2,r2,65535
   1f0f0:	e0bfef15 	stw	r2,-68(fp)
                                    break;
   1f0f4:	00000606 	br	1f110 <get_home_directory_cluster_for_file+0x3dc>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
   1f0f8:	e0bff317 	ldw	r2,-52(fp)
   1f0fc:	10800044 	addi	r2,r2,1
   1f100:	e0bff315 	stw	r2,-52(fp)
   1f104:	e0bff317 	ldw	r2,-52(fp)
   1f108:	10800410 	cmplti	r2,r2,16
   1f10c:	103fdb1e 	bne	r2,zero,1f07c <__alt_mem_Flash_flash_data+0xf401f07c>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
   1f110:	e0ffef17 	ldw	r3,-68(fp)
   1f114:	e0bfea17 	ldw	r2,-88(fp)
   1f118:	18800326 	beq	r3,r2,1f128 <get_home_directory_cluster_for_file+0x3f4>
   1f11c:	00000106 	br	1f124 <get_home_directory_cluster_for_file+0x3f0>
                            }
                        }
                    }
                    else
                    {
                        break;
   1f120:	00000a06 	br	1f14c <get_home_directory_cluster_for_file+0x418>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
   1f124:	00000906 	br	1f14c <get_home_directory_cluster_for_file+0x418>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1f128:	e0bff217 	ldw	r2,-56(fp)
   1f12c:	10800044 	addi	r2,r2,1
   1f130:	e0bff215 	stw	r2,-56(fp)
   1f134:	00800174 	movhi	r2,5
   1f138:	10bcd104 	addi	r2,r2,-3260
   1f13c:	10800383 	ldbu	r2,14(r2)
   1f140:	10803fcc 	andi	r2,r2,255
   1f144:	e0fff217 	ldw	r3,-56(fp)
   1f148:	18bfc216 	blt	r3,r2,1f054 <__alt_mem_Flash_flash_data+0xf401f054>
                        break;
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
   1f14c:	e0ffef17 	ldw	r3,-68(fp)
   1f150:	e0bfea17 	ldw	r2,-88(fp)
   1f154:	1880141e 	bne	r3,r2,1f1a8 <get_home_directory_cluster_for_file+0x474>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
   1f158:	e0ffef17 	ldw	r3,-68(fp)
   1f15c:	e0bffc04 	addi	r2,fp,-16
   1f160:	1809883a 	mov	r4,r3
   1f164:	100b883a 	mov	r5,r2
   1f168:	001d6f80 	call	1d6f8 <get_cluster_flag>
   1f16c:	10000c26 	beq	r2,zero,1f1a0 <get_home_directory_cluster_for_file+0x46c>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   1f170:	e0bffc0b 	ldhu	r2,-16(fp)
   1f174:	10bfffcc 	andi	r2,r2,65535
   1f178:	10fffe0c 	andi	r3,r2,65528
   1f17c:	00bffe14 	movui	r2,65528
   1f180:	1880021e 	bne	r3,r2,1f18c <get_home_directory_cluster_for_file+0x458>
						{
							return false;
   1f184:	0005883a 	mov	r2,zero
   1f188:	00003006 	br	1f24c <get_home_directory_cluster_for_file+0x518>
						}
						new_cluster = (next_cluster & 0x0000fff8);
   1f18c:	e0bffc0b 	ldhu	r2,-16(fp)
   1f190:	10bfffcc 	andi	r2,r2,65535
   1f194:	10bffe0c 	andi	r2,r2,65528
   1f198:	e0bfef15 	stw	r2,-68(fp)
   1f19c:	00000206 	br	1f1a8 <get_home_directory_cluster_for_file+0x474>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
   1f1a0:	0005883a 	mov	r2,zero
   1f1a4:	00002906 	br	1f24c <get_home_directory_cluster_for_file+0x518>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
   1f1a8:	e0bff417 	ldw	r2,-48(fp)
   1f1ac:	00fffdd4 	movui	r3,65527
   1f1b0:	18800316 	blt	r3,r2,1f1c0 <get_home_directory_cluster_for_file+0x48c>
   1f1b4:	e0ffef17 	ldw	r3,-68(fp)
   1f1b8:	e0bfea17 	ldw	r2,-88(fp)
   1f1bc:	18bf9626 	beq	r3,r2,1f018 <__alt_mem_Flash_flash_data+0xf401f018>
            if (new_cluster != home_dir_cluster)
   1f1c0:	e0ffef17 	ldw	r3,-68(fp)
   1f1c4:	e0bfea17 	ldw	r2,-88(fp)
   1f1c8:	18800826 	beq	r3,r2,1f1ec <get_home_directory_cluster_for_file+0x4b8>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   1f1cc:	e0bfef17 	ldw	r2,-68(fp)
   1f1d0:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
   1f1d4:	e0ffed17 	ldw	r3,-76(fp)
   1f1d8:	e0bfeb17 	ldw	r2,-84(fp)
   1f1dc:	1885883a 	add	r2,r3,r2
   1f1e0:	10800044 	addi	r2,r2,1
   1f1e4:	e0bfed15 	stw	r2,-76(fp)
   1f1e8:	00000206 	br	1f1f4 <get_home_directory_cluster_for_file+0x4c0>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   1f1ec:	0005883a 	mov	r2,zero
   1f1f0:	00001606 	br	1f24c <get_home_directory_cluster_for_file+0x518>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
   1f1f4:	e0bfed17 	ldw	r2,-76(fp)
   1f1f8:	e0fffd17 	ldw	r3,-12(fp)
   1f1fc:	1885883a 	add	r2,r3,r2
   1f200:	1009883a 	mov	r4,r2
   1f204:	001e9e00 	call	1e9e0 <get_dir_divider_location>
   1f208:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
   1f20c:	e0bfeb17 	ldw	r2,-84(fp)
   1f210:	1000020e 	bge	r2,zero,1f21c <get_home_directory_cluster_for_file+0x4e8>
        {
            // Directory has been located.
            result = true;
   1f214:	00800044 	movi	r2,1
   1f218:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
   1f21c:	e0bfeb17 	ldw	r2,-84(fp)
   1f220:	00bed216 	blt	zero,r2,1ed6c <__alt_mem_Flash_flash_data+0xf401ed6c>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
   1f224:	e0bffe17 	ldw	r2,-8(fp)
   1f228:	e0ffea17 	ldw	r3,-88(fp)
   1f22c:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
   1f230:	e0bfea17 	ldw	r2,-88(fp)
   1f234:	1000041e 	bne	r2,zero,1f248 <get_home_directory_cluster_for_file+0x514>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
   1f238:	e0bfff17 	ldw	r2,-4(fp)
   1f23c:	10000a15 	stw	zero,40(r2)
		result = true;
   1f240:	00800044 	movi	r2,1
   1f244:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
   1f248:	e0bfe917 	ldw	r2,-92(fp)
}
   1f24c:	e037883a 	mov	sp,fp
   1f250:	dfc00117 	ldw	ra,4(sp)
   1f254:	df000017 	ldw	fp,0(sp)
   1f258:	dec00204 	addi	sp,sp,8
   1f25c:	f800283a 	ret

0001f260 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
   1f260:	deffe804 	addi	sp,sp,-96
   1f264:	dfc01715 	stw	ra,92(sp)
   1f268:	df001615 	stw	fp,88(sp)
   1f26c:	df001604 	addi	fp,sp,88
   1f270:	e13ffd15 	stw	r4,-12(fp)
   1f274:	e17ffe15 	stw	r5,-8(fp)
   1f278:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
   1f27c:	e13ffe17 	ldw	r4,-8(fp)
   1f280:	001e9e00 	call	1e9e0 <get_dir_divider_location>
   1f284:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
   1f288:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   1f28c:	00800804 	movi	r2,32
   1f290:	e0bff905 	stb	r2,-28(fp)
   1f294:	00800804 	movi	r2,32
   1f298:	e0bff945 	stb	r2,-27(fp)
   1f29c:	00800804 	movi	r2,32
   1f2a0:	e0bff985 	stb	r2,-26(fp)
   1f2a4:	00800804 	movi	r2,32
   1f2a8:	e0bff9c5 	stb	r2,-25(fp)
   1f2ac:	00800804 	movi	r2,32
   1f2b0:	e0bffa05 	stb	r2,-24(fp)
   1f2b4:	00800804 	movi	r2,32
   1f2b8:	e0bffa45 	stb	r2,-23(fp)
   1f2bc:	00800804 	movi	r2,32
   1f2c0:	e0bffa85 	stb	r2,-22(fp)
   1f2c4:	00800804 	movi	r2,32
   1f2c8:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
   1f2cc:	00800804 	movi	r2,32
   1f2d0:	e0bffb05 	stb	r2,-20(fp)
   1f2d4:	00800804 	movi	r2,32
   1f2d8:	e0bffb45 	stb	r2,-19(fp)
   1f2dc:	00800804 	movi	r2,32
   1f2e0:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
   1f2e4:	00bfffc4 	movi	r2,-1
   1f2e8:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
   1f2ec:	e0bffd17 	ldw	r2,-12(fp)
   1f2f0:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
   1f2f4:	e13ffe17 	ldw	r4,-8(fp)
   1f2f8:	00047800 	call	4780 <strlen>
   1f2fc:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
   1f300:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
   1f304:	00000b06 	br	1f334 <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
   1f308:	e0ffeb17 	ldw	r3,-84(fp)
   1f30c:	e0bfea17 	ldw	r2,-88(fp)
   1f310:	1885883a 	add	r2,r3,r2
   1f314:	10800044 	addi	r2,r2,1
   1f318:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
   1f31c:	e0bfeb17 	ldw	r2,-84(fp)
   1f320:	e0fffe17 	ldw	r3,-8(fp)
   1f324:	1885883a 	add	r2,r3,r2
   1f328:	1009883a 	mov	r4,r2
   1f32c:	001e9e00 	call	1e9e0 <get_dir_divider_location>
   1f330:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
   1f334:	e0bfea17 	ldw	r2,-88(fp)
   1f338:	00bff316 	blt	zero,r2,1f308 <__alt_mem_Flash_flash_data+0xf401f308>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
   1f33c:	e0bfeb17 	ldw	r2,-84(fp)
   1f340:	e0bfee15 	stw	r2,-72(fp)
   1f344:	00002706 	br	1f3e4 <find_file_in_directory+0x184>
    {
        if (file_name[index] == '.')
   1f348:	e0bfee17 	ldw	r2,-72(fp)
   1f34c:	e0fffe17 	ldw	r3,-8(fp)
   1f350:	1885883a 	add	r2,r3,r2
   1f354:	10800003 	ldbu	r2,0(r2)
   1f358:	10803fcc 	andi	r2,r2,255
   1f35c:	1080201c 	xori	r2,r2,128
   1f360:	10bfe004 	addi	r2,r2,-128
   1f364:	10800b98 	cmpnei	r2,r2,46
   1f368:	1000031e 	bne	r2,zero,1f378 <find_file_in_directory+0x118>
        {
            ext_index = index;
   1f36c:	e0bfee17 	ldw	r2,-72(fp)
   1f370:	e0bfec15 	stw	r2,-80(fp)
   1f374:	00001806 	br	1f3d8 <find_file_in_directory+0x178>
        }
        else if (ext_index < 0)
   1f378:	e0bfec17 	ldw	r2,-80(fp)
   1f37c:	10000b0e 	bge	r2,zero,1f3ac <find_file_in_directory+0x14c>
        {
            name[index-last_dir_separator] = file_name[index];
   1f380:	e0ffee17 	ldw	r3,-72(fp)
   1f384:	e0bfeb17 	ldw	r2,-84(fp)
   1f388:	1885c83a 	sub	r2,r3,r2
   1f38c:	e0ffee17 	ldw	r3,-72(fp)
   1f390:	e13ffe17 	ldw	r4,-8(fp)
   1f394:	20c7883a 	add	r3,r4,r3
   1f398:	18c00003 	ldbu	r3,0(r3)
   1f39c:	e13ff904 	addi	r4,fp,-28
   1f3a0:	2085883a 	add	r2,r4,r2
   1f3a4:	10c00005 	stb	r3,0(r2)
   1f3a8:	00000b06 	br	1f3d8 <find_file_in_directory+0x178>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
   1f3ac:	e0ffee17 	ldw	r3,-72(fp)
   1f3b0:	e0bfec17 	ldw	r2,-80(fp)
   1f3b4:	1885c83a 	sub	r2,r3,r2
   1f3b8:	10bfffc4 	addi	r2,r2,-1
   1f3bc:	e0ffee17 	ldw	r3,-72(fp)
   1f3c0:	e13ffe17 	ldw	r4,-8(fp)
   1f3c4:	20c7883a 	add	r3,r4,r3
   1f3c8:	18c00003 	ldbu	r3,0(r3)
   1f3cc:	e13ffb04 	addi	r4,fp,-20
   1f3d0:	2085883a 	add	r2,r4,r2
   1f3d4:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
   1f3d8:	e0bfee17 	ldw	r2,-72(fp)
   1f3dc:	10800044 	addi	r2,r2,1
   1f3e0:	e0bfee15 	stw	r2,-72(fp)
   1f3e4:	e0ffee17 	ldw	r3,-72(fp)
   1f3e8:	e0bff417 	ldw	r2,-48(fp)
   1f3ec:	18bfd616 	blt	r3,r2,1f348 <__alt_mem_Flash_flash_data+0xf401f348>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
   1f3f0:	e0bffd17 	ldw	r2,-12(fp)
   1f3f4:	1000491e 	bne	r2,zero,1f51c <find_file_in_directory+0x2bc>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1f3f8:	00800174 	movhi	r2,5
   1f3fc:	10bcd104 	addi	r2,r2,-3260
   1f400:	1080050b 	ldhu	r2,20(r2)
   1f404:	10bfffcc 	andi	r2,r2,65535
   1f408:	1006917a 	slli	r3,r2,5
   1f40c:	00800174 	movhi	r2,5
   1f410:	10bcd104 	addi	r2,r2,-3260
   1f414:	1080030b 	ldhu	r2,12(r2)
   1f418:	10bfffcc 	andi	r2,r2,65535
   1f41c:	1885283a 	div	r2,r3,r2
   1f420:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1f424:	e03ff015 	stw	zero,-64(fp)
   1f428:	00003806 	br	1f50c <find_file_in_directory+0x2ac>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   1f42c:	00800174 	movhi	r2,5
   1f430:	10bcd104 	addi	r2,r2,-3260
   1f434:	10c01317 	ldw	r3,76(r2)
   1f438:	e0bff017 	ldw	r2,-64(fp)
   1f43c:	1885883a 	add	r2,r3,r2
   1f440:	1007883a 	mov	r3,r2
   1f444:	d0a85817 	ldw	r2,-24224(gp)
   1f448:	1809883a 	mov	r4,r3
   1f44c:	100b883a 	mov	r5,r2
   1f450:	001d6200 	call	1d620 <Read_Sector_Data>
   1f454:	10002826 	beq	r2,zero,1f4f8 <find_file_in_directory+0x298>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1f458:	e03ff115 	stw	zero,-60(fp)
   1f45c:	00002006 	br	1f4e0 <find_file_in_directory+0x280>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   1f460:	e0bff117 	ldw	r2,-60(fp)
   1f464:	1006917a 	slli	r3,r2,5
   1f468:	e0bff017 	ldw	r2,-64(fp)
   1f46c:	1809883a 	mov	r4,r3
   1f470:	e17fff17 	ldw	r5,-4(fp)
   1f474:	000d883a 	mov	r6,zero
   1f478:	100f883a 	mov	r7,r2
   1f47c:	001da380 	call	1da38 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1f480:	e0bfff17 	ldw	r2,-4(fp)
   1f484:	10800003 	ldbu	r2,0(r2)
   1f488:	10803fcc 	andi	r2,r2,255
   1f48c:	10803960 	cmpeqi	r2,r2,229
   1f490:	1000101e 	bne	r2,zero,1f4d4 <find_file_in_directory+0x274>
   1f494:	e0bfff17 	ldw	r2,-4(fp)
   1f498:	10800003 	ldbu	r2,0(r2)
   1f49c:	10803fcc 	andi	r2,r2,255
   1f4a0:	10000c26 	beq	r2,zero,1f4d4 <find_file_in_directory+0x274>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
   1f4a4:	e0fff904 	addi	r3,fp,-28
   1f4a8:	e0bffb04 	addi	r2,fp,-20
   1f4ac:	e13fff17 	ldw	r4,-4(fp)
   1f4b0:	180b883a 	mov	r5,r3
   1f4b4:	100d883a 	mov	r6,r2
   1f4b8:	001ea980 	call	1ea98 <match_file_record_to_name_ext>
   1f4bc:	e0bff815 	stw	r2,-32(fp)

                        if (match)
   1f4c0:	e0bff817 	ldw	r2,-32(fp)
   1f4c4:	10000326 	beq	r2,zero,1f4d4 <find_file_in_directory+0x274>
                        {
                            result = true;
   1f4c8:	00800044 	movi	r2,1
   1f4cc:	e0bfef15 	stw	r2,-68(fp)
                            break;
   1f4d0:	00000606 	br	1f4ec <find_file_in_directory+0x28c>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1f4d4:	e0bff117 	ldw	r2,-60(fp)
   1f4d8:	10800044 	addi	r2,r2,1
   1f4dc:	e0bff115 	stw	r2,-60(fp)
   1f4e0:	e0bff117 	ldw	r2,-60(fp)
   1f4e4:	10800410 	cmplti	r2,r2,16
   1f4e8:	103fdd1e 	bne	r2,zero,1f460 <__alt_mem_Flash_flash_data+0xf401f460>
            }
            else
            {
                break;
            }
            if (result)
   1f4ec:	e0bfef17 	ldw	r2,-68(fp)
   1f4f0:	10000326 	beq	r2,zero,1f500 <find_file_in_directory+0x2a0>
   1f4f4:	00000106 	br	1f4fc <find_file_in_directory+0x29c>
                    }
                }
            }
            else
            {
                break;
   1f4f8:	00000706 	br	1f518 <find_file_in_directory+0x2b8>
            }
            if (result)
            {
                break;
   1f4fc:	00000606 	br	1f518 <find_file_in_directory+0x2b8>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1f500:	e0bff017 	ldw	r2,-64(fp)
   1f504:	10800044 	addi	r2,r2,1
   1f508:	e0bff015 	stw	r2,-64(fp)
   1f50c:	e0fff017 	ldw	r3,-64(fp)
   1f510:	e0bff717 	ldw	r2,-36(fp)
   1f514:	18bfc516 	blt	r3,r2,1f42c <__alt_mem_Flash_flash_data+0xf401f42c>
   1f518:	00006506 	br	1f6b0 <find_file_in_directory+0x450>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1f51c:	e0bfed17 	ldw	r2,-76(fp)
   1f520:	10ffff84 	addi	r3,r2,-2
   1f524:	00800174 	movhi	r2,5
   1f528:	10bcd104 	addi	r2,r2,-3260
   1f52c:	10800383 	ldbu	r2,14(r2)
   1f530:	10803fcc 	andi	r2,r2,255
   1f534:	1885383a 	mul	r2,r3,r2
   1f538:	1007883a 	mov	r3,r2
   1f53c:	00800174 	movhi	r2,5
   1f540:	10bcd104 	addi	r2,r2,-3260
   1f544:	10801417 	ldw	r2,80(r2)
   1f548:	1885883a 	add	r2,r3,r2
   1f54c:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1f550:	e03ff215 	stw	zero,-56(fp)
   1f554:	00003506 	br	1f62c <find_file_in_directory+0x3cc>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1f558:	e0fff217 	ldw	r3,-56(fp)
   1f55c:	e0bff517 	ldw	r2,-44(fp)
   1f560:	1887883a 	add	r3,r3,r2
   1f564:	d0a85817 	ldw	r2,-24224(gp)
   1f568:	1809883a 	mov	r4,r3
   1f56c:	100b883a 	mov	r5,r2
   1f570:	001d6200 	call	1d620 <Read_Sector_Data>
   1f574:	10002826 	beq	r2,zero,1f618 <find_file_in_directory+0x3b8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1f578:	e03ff315 	stw	zero,-52(fp)
   1f57c:	00002006 	br	1f600 <find_file_in_directory+0x3a0>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   1f580:	e0bff317 	ldw	r2,-52(fp)
   1f584:	1008917a 	slli	r4,r2,5
   1f588:	e0ffed17 	ldw	r3,-76(fp)
   1f58c:	e0bff217 	ldw	r2,-56(fp)
   1f590:	e17fff17 	ldw	r5,-4(fp)
   1f594:	180d883a 	mov	r6,r3
   1f598:	100f883a 	mov	r7,r2
   1f59c:	001da380 	call	1da38 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1f5a0:	e0bfff17 	ldw	r2,-4(fp)
   1f5a4:	10800003 	ldbu	r2,0(r2)
   1f5a8:	10803fcc 	andi	r2,r2,255
   1f5ac:	10803960 	cmpeqi	r2,r2,229
   1f5b0:	1000101e 	bne	r2,zero,1f5f4 <find_file_in_directory+0x394>
   1f5b4:	e0bfff17 	ldw	r2,-4(fp)
   1f5b8:	10800003 	ldbu	r2,0(r2)
   1f5bc:	10803fcc 	andi	r2,r2,255
   1f5c0:	10000c26 	beq	r2,zero,1f5f4 <find_file_in_directory+0x394>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   1f5c4:	e0fff904 	addi	r3,fp,-28
   1f5c8:	e0bffb04 	addi	r2,fp,-20
   1f5cc:	e13fff17 	ldw	r4,-4(fp)
   1f5d0:	180b883a 	mov	r5,r3
   1f5d4:	100d883a 	mov	r6,r2
   1f5d8:	001ea980 	call	1ea98 <match_file_record_to_name_ext>
   1f5dc:	e0bff615 	stw	r2,-40(fp)

                            if (match)
   1f5e0:	e0bff617 	ldw	r2,-40(fp)
   1f5e4:	10000326 	beq	r2,zero,1f5f4 <find_file_in_directory+0x394>
                            {                               
                                result = true;
   1f5e8:	00800044 	movi	r2,1
   1f5ec:	e0bfef15 	stw	r2,-68(fp)
                                break;
   1f5f0:	00000606 	br	1f60c <find_file_in_directory+0x3ac>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1f5f4:	e0bff317 	ldw	r2,-52(fp)
   1f5f8:	10800044 	addi	r2,r2,1
   1f5fc:	e0bff315 	stw	r2,-52(fp)
   1f600:	e0bff317 	ldw	r2,-52(fp)
   1f604:	10800410 	cmplti	r2,r2,16
   1f608:	103fdd1e 	bne	r2,zero,1f580 <__alt_mem_Flash_flash_data+0xf401f580>
                }
                else
                {
                    break;
                }
                if (result)
   1f60c:	e0bfef17 	ldw	r2,-68(fp)
   1f610:	10000326 	beq	r2,zero,1f620 <find_file_in_directory+0x3c0>
   1f614:	00000106 	br	1f61c <find_file_in_directory+0x3bc>
                        }
                    }
                }
                else
                {
                    break;
   1f618:	00000a06 	br	1f644 <find_file_in_directory+0x3e4>
                }
                if (result)
                {
                    break;
   1f61c:	00000906 	br	1f644 <find_file_in_directory+0x3e4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1f620:	e0bff217 	ldw	r2,-56(fp)
   1f624:	10800044 	addi	r2,r2,1
   1f628:	e0bff215 	stw	r2,-56(fp)
   1f62c:	00800174 	movhi	r2,5
   1f630:	10bcd104 	addi	r2,r2,-3260
   1f634:	10800383 	ldbu	r2,14(r2)
   1f638:	10803fcc 	andi	r2,r2,255
   1f63c:	e0fff217 	ldw	r3,-56(fp)
   1f640:	18bfc516 	blt	r3,r2,1f558 <__alt_mem_Flash_flash_data+0xf401f558>
                    break;
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
   1f644:	e0bfef17 	ldw	r2,-68(fp)
   1f648:	1000141e 	bne	r2,zero,1f69c <find_file_in_directory+0x43c>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
   1f64c:	e0ffed17 	ldw	r3,-76(fp)
   1f650:	e0bffc04 	addi	r2,fp,-16
   1f654:	1809883a 	mov	r4,r3
   1f658:	100b883a 	mov	r5,r2
   1f65c:	001d6f80 	call	1d6f8 <get_cluster_flag>
   1f660:	10000c26 	beq	r2,zero,1f694 <find_file_in_directory+0x434>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   1f664:	e0bffc0b 	ldhu	r2,-16(fp)
   1f668:	10bfffcc 	andi	r2,r2,65535
   1f66c:	10fffe0c 	andi	r3,r2,65528
   1f670:	00bffe14 	movui	r2,65528
   1f674:	1880021e 	bne	r3,r2,1f680 <find_file_in_directory+0x420>
					{
						return false;
   1f678:	0005883a 	mov	r2,zero
   1f67c:	00000d06 	br	1f6b4 <find_file_in_directory+0x454>
					}
					cluster = (new_cluster & 0x0000fff8);
   1f680:	e0bffc0b 	ldhu	r2,-16(fp)
   1f684:	10bfffcc 	andi	r2,r2,65535
   1f688:	10bffe0c 	andi	r2,r2,65528
   1f68c:	e0bfed15 	stw	r2,-76(fp)
   1f690:	00000206 	br	1f69c <find_file_in_directory+0x43c>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
   1f694:	0005883a 	mov	r2,zero
   1f698:	00000606 	br	1f6b4 <find_file_in_directory+0x454>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
   1f69c:	e0bfed17 	ldw	r2,-76(fp)
   1f6a0:	00fffdd4 	movui	r3,65527
   1f6a4:	18800216 	blt	r3,r2,1f6b0 <find_file_in_directory+0x450>
   1f6a8:	e0bfef17 	ldw	r2,-68(fp)
   1f6ac:	103f9b26 	beq	r2,zero,1f51c <__alt_mem_Flash_flash_data+0xf401f51c>
    }
    
    return result;   
   1f6b0:	e0bfef17 	ldw	r2,-68(fp)
}
   1f6b4:	e037883a 	mov	sp,fp
   1f6b8:	dfc00117 	ldw	ra,4(sp)
   1f6bc:	df000017 	ldw	fp,0(sp)
   1f6c0:	dec00204 	addi	sp,sp,8
   1f6c4:	f800283a 	ret

0001f6c8 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
   1f6c8:	defff504 	addi	sp,sp,-44
   1f6cc:	dfc00a15 	stw	ra,40(sp)
   1f6d0:	df000915 	stw	fp,36(sp)
   1f6d4:	df000904 	addi	fp,sp,36
   1f6d8:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
   1f6dc:	00800174 	movhi	r2,5
   1f6e0:	10bcd104 	addi	r2,r2,-3260
   1f6e4:	10801117 	ldw	r2,68(r2)
   1f6e8:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
   1f6ec:	00800084 	movi	r2,2
   1f6f0:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
   1f6f4:	00bfffc4 	movi	r2,-1
   1f6f8:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
   1f6fc:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
   1f700:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
   1f704:	00800174 	movhi	r2,5
   1f708:	10bcd104 	addi	r2,r2,-3260
   1f70c:	10801417 	ldw	r2,80(r2)
   1f710:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
   1f714:	00800174 	movhi	r2,5
   1f718:	10bcd104 	addi	r2,r2,-3260
   1f71c:	1080058b 	ldhu	r2,22(r2)
   1f720:	10bfffcc 	andi	r2,r2,65535
   1f724:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
   1f728:	00800174 	movhi	r2,5
   1f72c:	10bcd104 	addi	r2,r2,-3260
   1f730:	10800917 	ldw	r2,36(r2)
   1f734:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
   1f738:	e0bffd17 	ldw	r2,-12(fp)
   1f73c:	e0fffe17 	ldw	r3,-8(fp)
   1f740:	18800b2e 	bgeu	r3,r2,1f770 <find_first_empty_cluster+0xa8>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   1f744:	e0fffd17 	ldw	r3,-12(fp)
   1f748:	e0bffc17 	ldw	r2,-16(fp)
   1f74c:	1887c83a 	sub	r3,r3,r2
   1f750:	00800174 	movhi	r2,5
   1f754:	10bcd104 	addi	r2,r2,-3260
   1f758:	10800383 	ldbu	r2,14(r2)
   1f75c:	10803fcc 	andi	r2,r2,255
   1f760:	1885203a 	divu	r2,r3,r2
   1f764:	10800044 	addi	r2,r2,1
   1f768:	e0bffb15 	stw	r2,-20(fp)
   1f76c:	00000a06 	br	1f798 <find_first_empty_cluster+0xd0>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   1f770:	e0fffe17 	ldw	r3,-8(fp)
   1f774:	e0bffc17 	ldw	r2,-16(fp)
   1f778:	1887c83a 	sub	r3,r3,r2
   1f77c:	00800174 	movhi	r2,5
   1f780:	10bcd104 	addi	r2,r2,-3260
   1f784:	10800383 	ldbu	r2,14(r2)
   1f788:	10803fcc 	andi	r2,r2,255
   1f78c:	1885203a 	divu	r2,r3,r2
   1f790:	10800044 	addi	r2,r2,1
   1f794:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   1f798:	00001f06 	br	1f818 <find_first_empty_cluster+0x150>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
   1f79c:	e0fff717 	ldw	r3,-36(fp)
   1f7a0:	d0a85817 	ldw	r2,-24224(gp)
   1f7a4:	1809883a 	mov	r4,r3
   1f7a8:	100b883a 	mov	r5,r2
   1f7ac:	001d6200 	call	1d620 <Read_Sector_Data>
   1f7b0:	10001326 	beq	r2,zero,1f800 <find_first_empty_cluster+0x138>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
   1f7b4:	e0bff817 	ldw	r2,-32(fp)
   1f7b8:	10803fcc 	andi	r2,r2,255
   1f7bc:	1085883a 	add	r2,r2,r2
   1f7c0:	1007883a 	mov	r3,r2
   1f7c4:	d0a85a17 	ldw	r2,-24216(gp)
   1f7c8:	10800a17 	ldw	r2,40(r2)
   1f7cc:	1885883a 	add	r2,r3,r2
   1f7d0:	1080002b 	ldhuio	r2,0(r2)
   1f7d4:	10bfffcc 	andi	r2,r2,65535
   1f7d8:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
   1f7dc:	e0bff90f 	ldh	r2,-28(fp)
   1f7e0:	1000011e 	bne	r2,zero,1f7e8 <find_first_empty_cluster+0x120>
                {
                    // Free cluster found.
                    break;
   1f7e4:	00000606 	br	1f800 <find_first_empty_cluster+0x138>
                }
                else
                {
                    cluster_index++;
   1f7e8:	e0bff817 	ldw	r2,-32(fp)
   1f7ec:	10800044 	addi	r2,r2,1
   1f7f0:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
   1f7f4:	e0bff817 	ldw	r2,-32(fp)
   1f7f8:	10803fcc 	andi	r2,r2,255
   1f7fc:	103fed1e 	bne	r2,zero,1f7b4 <__alt_mem_Flash_flash_data+0xf401f7b4>
        }
        if (cluster == 0)
   1f800:	e0bff90f 	ldh	r2,-28(fp)
   1f804:	1000011e 	bne	r2,zero,1f80c <find_first_empty_cluster+0x144>
        {
            break;
   1f808:	00000806 	br	1f82c <find_first_empty_cluster+0x164>
        }
        sector++;
   1f80c:	e0bff717 	ldw	r2,-36(fp)
   1f810:	10800044 	addi	r2,r2,1
   1f814:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   1f818:	00800174 	movhi	r2,5
   1f81c:	10bcd104 	addi	r2,r2,-3260
   1f820:	10c01217 	ldw	r3,72(r2)
   1f824:	e0bff717 	ldw	r2,-36(fp)
   1f828:	18bfdc1e 	bne	r3,r2,1f79c <__alt_mem_Flash_flash_data+0xf401f79c>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
   1f82c:	e0bff90f 	ldh	r2,-28(fp)
   1f830:	1000081e 	bne	r2,zero,1f854 <find_first_empty_cluster+0x18c>
   1f834:	e0bff90f 	ldh	r2,-28(fp)
   1f838:	e0fffb17 	ldw	r3,-20(fp)
   1f83c:	18800536 	bltu	r3,r2,1f854 <find_first_empty_cluster+0x18c>
    {
        *cluster_number = cluster_index;
   1f840:	e0bfff17 	ldw	r2,-4(fp)
   1f844:	e0fff817 	ldw	r3,-32(fp)
   1f848:	10c00015 	stw	r3,0(r2)
		result = true;
   1f84c:	00800044 	movi	r2,1
   1f850:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
   1f854:	e0bffa17 	ldw	r2,-24(fp)
}
   1f858:	e037883a 	mov	sp,fp
   1f85c:	dfc00117 	ldw	ra,4(sp)
   1f860:	df000017 	ldw	fp,0(sp)
   1f864:	dec00204 	addi	sp,sp,8
   1f868:	f800283a 	ret

0001f86c <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
   1f86c:	defff604 	addi	sp,sp,-40
   1f870:	dfc00915 	stw	ra,36(sp)
   1f874:	df000815 	stw	fp,32(sp)
   1f878:	df000804 	addi	fp,sp,32
   1f87c:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
   1f880:	00bfffc4 	movi	r2,-1
   1f884:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
   1f888:	e0bfff17 	ldw	r2,-4(fp)
   1f88c:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1f890:	e0bff917 	ldw	r2,-28(fp)
   1f894:	10ffff84 	addi	r3,r2,-2
   1f898:	00800174 	movhi	r2,5
   1f89c:	10bcd104 	addi	r2,r2,-3260
   1f8a0:	10800383 	ldbu	r2,14(r2)
   1f8a4:	10803fcc 	andi	r2,r2,255
   1f8a8:	1885383a 	mul	r2,r3,r2
   1f8ac:	1007883a 	mov	r3,r2
   1f8b0:	00800174 	movhi	r2,5
   1f8b4:	10bcd104 	addi	r2,r2,-3260
   1f8b8:	10801417 	ldw	r2,80(r2)
   1f8bc:	1885883a 	add	r2,r3,r2
   1f8c0:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1f8c4:	e03ffa15 	stw	zero,-24(fp)
   1f8c8:	00002e06 	br	1f984 <find_first_empty_record_in_a_subdirectory+0x118>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1f8cc:	e0fffa17 	ldw	r3,-24(fp)
   1f8d0:	e0bffc17 	ldw	r2,-16(fp)
   1f8d4:	1887883a 	add	r3,r3,r2
   1f8d8:	d0a85817 	ldw	r2,-24224(gp)
   1f8dc:	1809883a 	mov	r4,r3
   1f8e0:	100b883a 	mov	r5,r2
   1f8e4:	001d6200 	call	1d620 <Read_Sector_Data>
   1f8e8:	10002226 	beq	r2,zero,1f974 <find_first_empty_record_in_a_subdirectory+0x108>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1f8ec:	e03ffb15 	stw	zero,-20(fp)
   1f8f0:	00001c06 	br	1f964 <find_first_empty_record_in_a_subdirectory+0xf8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   1f8f4:	e0bffb17 	ldw	r2,-20(fp)
   1f8f8:	1004917a 	slli	r2,r2,5
   1f8fc:	1007883a 	mov	r3,r2
   1f900:	d0a85a17 	ldw	r2,-24216(gp)
   1f904:	10800a17 	ldw	r2,40(r2)
   1f908:	1885883a 	add	r2,r3,r2
   1f90c:	10800023 	ldbuio	r2,0(r2)
   1f910:	10803fcc 	andi	r2,r2,255
   1f914:	10803fcc 	andi	r2,r2,255
   1f918:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
   1f91c:	e0bffd0b 	ldhu	r2,-12(fp)
   1f920:	10803960 	cmpeqi	r2,r2,229
   1f924:	1000021e 	bne	r2,zero,1f930 <find_first_empty_record_in_a_subdirectory+0xc4>
   1f928:	e0bffd0b 	ldhu	r2,-12(fp)
   1f92c:	10000a1e 	bne	r2,zero,1f958 <find_first_empty_record_in_a_subdirectory+0xec>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
   1f930:	e0bffa17 	ldw	r2,-24(fp)
   1f934:	1006913a 	slli	r3,r2,4
   1f938:	e0bffb17 	ldw	r2,-20(fp)
   1f93c:	1885883a 	add	r2,r3,r2
   1f940:	1006943a 	slli	r3,r2,16
   1f944:	e0bff917 	ldw	r2,-28(fp)
   1f948:	1884b03a 	or	r2,r3,r2
   1f94c:	e0bff815 	stw	r2,-32(fp)
                        return result;
   1f950:	e0bff817 	ldw	r2,-32(fp)
   1f954:	00005306 	br	1faa4 <find_first_empty_record_in_a_subdirectory+0x238>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1f958:	e0bffb17 	ldw	r2,-20(fp)
   1f95c:	10800044 	addi	r2,r2,1
   1f960:	e0bffb15 	stw	r2,-20(fp)
   1f964:	e0bffb17 	ldw	r2,-20(fp)
   1f968:	10800410 	cmplti	r2,r2,16
   1f96c:	103fe11e 	bne	r2,zero,1f8f4 <__alt_mem_Flash_flash_data+0xf401f8f4>
   1f970:	00000106 	br	1f978 <find_first_empty_record_in_a_subdirectory+0x10c>
                    }
                }
            }
            else
            {
                break;
   1f974:	00000906 	br	1f99c <find_first_empty_record_in_a_subdirectory+0x130>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1f978:	e0bffa17 	ldw	r2,-24(fp)
   1f97c:	10800044 	addi	r2,r2,1
   1f980:	e0bffa15 	stw	r2,-24(fp)
   1f984:	00800174 	movhi	r2,5
   1f988:	10bcd104 	addi	r2,r2,-3260
   1f98c:	10800383 	ldbu	r2,14(r2)
   1f990:	10803fcc 	andi	r2,r2,255
   1f994:	e0fffa17 	ldw	r3,-24(fp)
   1f998:	18bfcc16 	blt	r3,r2,1f8cc <__alt_mem_Flash_flash_data+0xf401f8cc>
                break;
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
   1f99c:	e0bff817 	ldw	r2,-32(fp)
   1f9a0:	1000390e 	bge	r2,zero,1fa88 <find_first_empty_record_in_a_subdirectory+0x21c>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
   1f9a4:	e0fff917 	ldw	r3,-28(fp)
   1f9a8:	e0bffd84 	addi	r2,fp,-10
   1f9ac:	1809883a 	mov	r4,r3
   1f9b0:	100b883a 	mov	r5,r2
   1f9b4:	001d6f80 	call	1d6f8 <get_cluster_flag>
   1f9b8:	10003126 	beq	r2,zero,1fa80 <find_first_empty_record_in_a_subdirectory+0x214>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   1f9bc:	e0bffd8b 	ldhu	r2,-10(fp)
   1f9c0:	10bfffcc 	andi	r2,r2,65535
   1f9c4:	10fffe0c 	andi	r3,r2,65528
   1f9c8:	00bffe14 	movui	r2,65528
   1f9cc:	18802e1e 	bne	r3,r2,1fa88 <find_first_empty_record_in_a_subdirectory+0x21c>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
   1f9d0:	e0bffe04 	addi	r2,fp,-8
   1f9d4:	1009883a 	mov	r4,r2
   1f9d8:	001f6c80 	call	1f6c8 <find_first_empty_cluster>
   1f9dc:	10002326 	beq	r2,zero,1fa6c <find_first_empty_record_in_a_subdirectory+0x200>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   1f9e0:	e0fff917 	ldw	r3,-28(fp)
   1f9e4:	e0bffe17 	ldw	r2,-8(fp)
   1f9e8:	10bfffcc 	andi	r2,r2,65535
   1f9ec:	10a0001c 	xori	r2,r2,32768
   1f9f0:	10a00004 	addi	r2,r2,-32768
   1f9f4:	1809883a 	mov	r4,r3
   1f9f8:	100b883a 	mov	r5,r2
   1f9fc:	01800044 	movi	r6,1
   1fa00:	001d7ac0 	call	1d7ac <mark_cluster>
   1fa04:	10001926 	beq	r2,zero,1fa6c <find_first_empty_record_in_a_subdirectory+0x200>
   1fa08:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
   1fa0c:	1009883a 	mov	r4,r2
   1fa10:	017fffc4 	movi	r5,-1
   1fa14:	01800044 	movi	r6,1
   1fa18:	001d7ac0 	call	1d7ac <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   1fa1c:	10001326 	beq	r2,zero,1fa6c <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1fa20:	e0fff917 	ldw	r3,-28(fp)
   1fa24:	e0bffe17 	ldw	r2,-8(fp)
   1fa28:	10bfffcc 	andi	r2,r2,65535
   1fa2c:	10a0001c 	xori	r2,r2,32768
   1fa30:	10a00004 	addi	r2,r2,-32768
   1fa34:	1809883a 	mov	r4,r3
   1fa38:	100b883a 	mov	r5,r2
   1fa3c:	000d883a 	mov	r6,zero
   1fa40:	001d7ac0 	call	1d7ac <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
   1fa44:	10000926 	beq	r2,zero,1fa6c <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1fa48:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
   1fa4c:	1009883a 	mov	r4,r2
   1fa50:	017fffc4 	movi	r5,-1
   1fa54:	000d883a 	mov	r6,zero
   1fa58:	001d7ac0 	call	1d7ac <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1fa5c:	10000326 	beq	r2,zero,1fa6c <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
   1fa60:	001d5d40 	call	1d5d4 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
   1fa64:	e0bffe17 	ldw	r2,-8(fp)
   1fa68:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
   1fa6c:	e0bffd8b 	ldhu	r2,-10(fp)
   1fa70:	10bfffcc 	andi	r2,r2,65535
   1fa74:	10bffe0c 	andi	r2,r2,65528
   1fa78:	e0bff915 	stw	r2,-28(fp)
   1fa7c:	00000206 	br	1fa88 <find_first_empty_record_in_a_subdirectory+0x21c>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
   1fa80:	00bfffc4 	movi	r2,-1
   1fa84:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
   1fa88:	e0bff917 	ldw	r2,-28(fp)
   1fa8c:	00fffdd4 	movui	r3,65527
   1fa90:	18800316 	blt	r3,r2,1faa0 <find_first_empty_record_in_a_subdirectory+0x234>
   1fa94:	e0bff817 	ldw	r2,-32(fp)
   1fa98:	10bfffe0 	cmpeqi	r2,r2,-1
   1fa9c:	103f7c1e 	bne	r2,zero,1f890 <__alt_mem_Flash_flash_data+0xf401f890>
    return result; 
   1faa0:	e0bff817 	ldw	r2,-32(fp)
}
   1faa4:	e037883a 	mov	sp,fp
   1faa8:	dfc00117 	ldw	ra,4(sp)
   1faac:	df000017 	ldw	fp,0(sp)
   1fab0:	dec00204 	addi	sp,sp,8
   1fab4:	f800283a 	ret

0001fab8 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
   1fab8:	defff904 	addi	sp,sp,-28
   1fabc:	dfc00615 	stw	ra,24(sp)
   1fac0:	df000515 	stw	fp,20(sp)
   1fac4:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1fac8:	00800174 	movhi	r2,5
   1facc:	10bcd104 	addi	r2,r2,-3260
   1fad0:	1080050b 	ldhu	r2,20(r2)
   1fad4:	10bfffcc 	andi	r2,r2,65535
   1fad8:	1006917a 	slli	r3,r2,5
   1fadc:	00800174 	movhi	r2,5
   1fae0:	10bcd104 	addi	r2,r2,-3260
   1fae4:	1080030b 	ldhu	r2,12(r2)
   1fae8:	10bfffcc 	andi	r2,r2,65535
   1faec:	1885283a 	div	r2,r3,r2
   1faf0:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
   1faf4:	00bfffc4 	movi	r2,-1
   1faf8:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1fafc:	e03ffb15 	stw	zero,-20(fp)
   1fb00:	00002f06 	br	1fbc0 <find_first_empty_record_in_root_directory+0x108>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   1fb04:	00800174 	movhi	r2,5
   1fb08:	10bcd104 	addi	r2,r2,-3260
   1fb0c:	10c01317 	ldw	r3,76(r2)
   1fb10:	e0bffb17 	ldw	r2,-20(fp)
   1fb14:	1885883a 	add	r2,r3,r2
   1fb18:	1007883a 	mov	r3,r2
   1fb1c:	d0a85817 	ldw	r2,-24224(gp)
   1fb20:	1809883a 	mov	r4,r3
   1fb24:	100b883a 	mov	r5,r2
   1fb28:	001d6200 	call	1d620 <Read_Sector_Data>
   1fb2c:	10002026 	beq	r2,zero,1fbb0 <find_first_empty_record_in_root_directory+0xf8>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   1fb30:	e03ffc15 	stw	zero,-16(fp)
   1fb34:	00001a06 	br	1fba0 <find_first_empty_record_in_root_directory+0xe8>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   1fb38:	e0bffc17 	ldw	r2,-16(fp)
   1fb3c:	1004917a 	slli	r2,r2,5
   1fb40:	1007883a 	mov	r3,r2
   1fb44:	d0a85a17 	ldw	r2,-24216(gp)
   1fb48:	10800a17 	ldw	r2,40(r2)
   1fb4c:	1885883a 	add	r2,r3,r2
   1fb50:	10800023 	ldbuio	r2,0(r2)
   1fb54:	10803fcc 	andi	r2,r2,255
   1fb58:	10803fcc 	andi	r2,r2,255
   1fb5c:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
   1fb60:	e0bfff0b 	ldhu	r2,-4(fp)
   1fb64:	10803960 	cmpeqi	r2,r2,229
   1fb68:	1000021e 	bne	r2,zero,1fb74 <find_first_empty_record_in_root_directory+0xbc>
   1fb6c:	e0bfff0b 	ldhu	r2,-4(fp)
   1fb70:	1000081e 	bne	r2,zero,1fb94 <find_first_empty_record_in_root_directory+0xdc>
                {
                    result = (sector_index*16 + file_counter) << 16;
   1fb74:	e0bffb17 	ldw	r2,-20(fp)
   1fb78:	1006913a 	slli	r3,r2,4
   1fb7c:	e0bffc17 	ldw	r2,-16(fp)
   1fb80:	1885883a 	add	r2,r3,r2
   1fb84:	1004943a 	slli	r2,r2,16
   1fb88:	e0bffe15 	stw	r2,-8(fp)
                    return result;
   1fb8c:	e0bffe17 	ldw	r2,-8(fp)
   1fb90:	00000f06 	br	1fbd0 <find_first_empty_record_in_root_directory+0x118>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   1fb94:	e0bffc17 	ldw	r2,-16(fp)
   1fb98:	10800044 	addi	r2,r2,1
   1fb9c:	e0bffc15 	stw	r2,-16(fp)
   1fba0:	e0bffc17 	ldw	r2,-16(fp)
   1fba4:	10800410 	cmplti	r2,r2,16
   1fba8:	103fe31e 	bne	r2,zero,1fb38 <__alt_mem_Flash_flash_data+0xf401fb38>
   1fbac:	00000106 	br	1fbb4 <find_first_empty_record_in_root_directory+0xfc>
                }
            }
        }
        else
        {
            break;
   1fbb0:	00000606 	br	1fbcc <find_first_empty_record_in_root_directory+0x114>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1fbb4:	e0bffb17 	ldw	r2,-20(fp)
   1fbb8:	10800044 	addi	r2,r2,1
   1fbbc:	e0bffb15 	stw	r2,-20(fp)
   1fbc0:	e0fffb17 	ldw	r3,-20(fp)
   1fbc4:	e0bffd17 	ldw	r2,-12(fp)
   1fbc8:	18bfce16 	blt	r3,r2,1fb04 <__alt_mem_Flash_flash_data+0xf401fb04>
        else
        {
            break;
        }
    }
    return result;
   1fbcc:	e0bffe17 	ldw	r2,-8(fp)
}
   1fbd0:	e037883a 	mov	sp,fp
   1fbd4:	dfc00117 	ldw	ra,4(sp)
   1fbd8:	df000017 	ldw	fp,0(sp)
   1fbdc:	dec00204 	addi	sp,sp,8
   1fbe0:	f800283a 	ret

0001fbe4 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
   1fbe4:	defffa04 	addi	sp,sp,-24
   1fbe8:	df000515 	stw	fp,20(sp)
   1fbec:	df000504 	addi	fp,sp,20
   1fbf0:	e13ffd15 	stw	r4,-12(fp)
   1fbf4:	e17ffe15 	stw	r5,-8(fp)
   1fbf8:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
   1fbfc:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
   1fc00:	e03ffb15 	stw	zero,-20(fp)
   1fc04:	00002506 	br	1fc9c <convert_filename_to_name_extension+0xb8>
    {
        if (filename[local] != '.')
   1fc08:	e0bffc17 	ldw	r2,-16(fp)
   1fc0c:	e0fffd17 	ldw	r3,-12(fp)
   1fc10:	1885883a 	add	r2,r3,r2
   1fc14:	10800003 	ldbu	r2,0(r2)
   1fc18:	10803fcc 	andi	r2,r2,255
   1fc1c:	1080201c 	xori	r2,r2,128
   1fc20:	10bfe004 	addi	r2,r2,-128
   1fc24:	10800ba0 	cmpeqi	r2,r2,46
   1fc28:	1000141e 	bne	r2,zero,1fc7c <convert_filename_to_name_extension+0x98>
        {
            name[counter] = filename[local];
   1fc2c:	e0bffb17 	ldw	r2,-20(fp)
   1fc30:	e0fffe17 	ldw	r3,-8(fp)
   1fc34:	1885883a 	add	r2,r3,r2
   1fc38:	e0fffc17 	ldw	r3,-16(fp)
   1fc3c:	e13ffd17 	ldw	r4,-12(fp)
   1fc40:	20c7883a 	add	r3,r4,r3
   1fc44:	18c00003 	ldbu	r3,0(r3)
   1fc48:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
   1fc4c:	e0bffc17 	ldw	r2,-16(fp)
   1fc50:	e0fffd17 	ldw	r3,-12(fp)
   1fc54:	1885883a 	add	r2,r3,r2
   1fc58:	10800003 	ldbu	r2,0(r2)
   1fc5c:	10803fcc 	andi	r2,r2,255
   1fc60:	1080201c 	xori	r2,r2,128
   1fc64:	10bfe004 	addi	r2,r2,-128
   1fc68:	10000926 	beq	r2,zero,1fc90 <convert_filename_to_name_extension+0xac>
   1fc6c:	e0bffc17 	ldw	r2,-16(fp)
   1fc70:	10800044 	addi	r2,r2,1
   1fc74:	e0bffc15 	stw	r2,-16(fp)
   1fc78:	00000506 	br	1fc90 <convert_filename_to_name_extension+0xac>
        }
        else
        {
            name[counter] = ' ';
   1fc7c:	e0bffb17 	ldw	r2,-20(fp)
   1fc80:	e0fffe17 	ldw	r3,-8(fp)
   1fc84:	1885883a 	add	r2,r3,r2
   1fc88:	00c00804 	movi	r3,32
   1fc8c:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
   1fc90:	e0bffb17 	ldw	r2,-20(fp)
   1fc94:	10800044 	addi	r2,r2,1
   1fc98:	e0bffb15 	stw	r2,-20(fp)
   1fc9c:	e0bffb17 	ldw	r2,-20(fp)
   1fca0:	10800210 	cmplti	r2,r2,8
   1fca4:	103fd81e 	bne	r2,zero,1fc08 <__alt_mem_Flash_flash_data+0xf401fc08>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
   1fca8:	e0bffc17 	ldw	r2,-16(fp)
   1fcac:	e0fffd17 	ldw	r3,-12(fp)
   1fcb0:	1885883a 	add	r2,r3,r2
   1fcb4:	10800003 	ldbu	r2,0(r2)
   1fcb8:	10803fcc 	andi	r2,r2,255
   1fcbc:	1080201c 	xori	r2,r2,128
   1fcc0:	10bfe004 	addi	r2,r2,-128
   1fcc4:	10800b98 	cmpnei	r2,r2,46
   1fcc8:	1000031e 	bne	r2,zero,1fcd8 <convert_filename_to_name_extension+0xf4>
   1fccc:	e0bffc17 	ldw	r2,-16(fp)
   1fcd0:	10800044 	addi	r2,r2,1
   1fcd4:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
   1fcd8:	e03ffb15 	stw	zero,-20(fp)
   1fcdc:	00001c06 	br	1fd50 <convert_filename_to_name_extension+0x16c>
    {
        if (filename[local] != 0)
   1fce0:	e0bffc17 	ldw	r2,-16(fp)
   1fce4:	e0fffd17 	ldw	r3,-12(fp)
   1fce8:	1885883a 	add	r2,r3,r2
   1fcec:	10800003 	ldbu	r2,0(r2)
   1fcf0:	10803fcc 	andi	r2,r2,255
   1fcf4:	1080201c 	xori	r2,r2,128
   1fcf8:	10bfe004 	addi	r2,r2,-128
   1fcfc:	10000c26 	beq	r2,zero,1fd30 <convert_filename_to_name_extension+0x14c>
        {
            extension[counter] = filename[local];
   1fd00:	e0bffb17 	ldw	r2,-20(fp)
   1fd04:	e0ffff17 	ldw	r3,-4(fp)
   1fd08:	1885883a 	add	r2,r3,r2
   1fd0c:	e0fffc17 	ldw	r3,-16(fp)
   1fd10:	e13ffd17 	ldw	r4,-12(fp)
   1fd14:	20c7883a 	add	r3,r4,r3
   1fd18:	18c00003 	ldbu	r3,0(r3)
   1fd1c:	10c00005 	stb	r3,0(r2)
            local++;
   1fd20:	e0bffc17 	ldw	r2,-16(fp)
   1fd24:	10800044 	addi	r2,r2,1
   1fd28:	e0bffc15 	stw	r2,-16(fp)
   1fd2c:	00000506 	br	1fd44 <convert_filename_to_name_extension+0x160>
        }
        else
        {
            extension[counter] = ' ';
   1fd30:	e0bffb17 	ldw	r2,-20(fp)
   1fd34:	e0ffff17 	ldw	r3,-4(fp)
   1fd38:	1885883a 	add	r2,r3,r2
   1fd3c:	00c00804 	movi	r3,32
   1fd40:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
   1fd44:	e0bffb17 	ldw	r2,-20(fp)
   1fd48:	10800044 	addi	r2,r2,1
   1fd4c:	e0bffb15 	stw	r2,-20(fp)
   1fd50:	e0bffb17 	ldw	r2,-20(fp)
   1fd54:	108000d0 	cmplti	r2,r2,3
   1fd58:	103fe11e 	bne	r2,zero,1fce0 <__alt_mem_Flash_flash_data+0xf401fce0>
        {
            extension[counter] = ' ';
        }
    }

}
   1fd5c:	e037883a 	mov	sp,fp
   1fd60:	df000017 	ldw	fp,0(sp)
   1fd64:	dec00104 	addi	sp,sp,4
   1fd68:	f800283a 	ret

0001fd6c <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
   1fd6c:	defff504 	addi	sp,sp,-44
   1fd70:	dfc00a15 	stw	ra,40(sp)
   1fd74:	df000915 	stw	fp,36(sp)
   1fd78:	df000904 	addi	fp,sp,36
   1fd7c:	e13ffd15 	stw	r4,-12(fp)
   1fd80:	e17ffe15 	stw	r5,-8(fp)
   1fd84:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
   1fd88:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
   1fd8c:	e0bffc04 	addi	r2,fp,-16
   1fd90:	1009883a 	mov	r4,r2
   1fd94:	001f6c80 	call	1f6c8 <find_first_empty_cluster>
   1fd98:	10009f26 	beq	r2,zero,20018 <create_file+0x2ac>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
   1fd9c:	e0bfff17 	ldw	r2,-4(fp)
   1fda0:	10800a17 	ldw	r2,40(r2)
   1fda4:	1000031e 	bne	r2,zero,1fdb4 <create_file+0x48>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
   1fda8:	001fab80 	call	1fab8 <find_first_empty_record_in_root_directory>
   1fdac:	e0bff815 	stw	r2,-32(fp)
   1fdb0:	00000606 	br	1fdcc <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
   1fdb4:	e0bfff17 	ldw	r2,-4(fp)
   1fdb8:	1080058b 	ldhu	r2,22(r2)
   1fdbc:	10bfffcc 	andi	r2,r2,65535
   1fdc0:	1009883a 	mov	r4,r2
   1fdc4:	001f86c0 	call	1f86c <find_first_empty_record_in_a_subdirectory>
   1fdc8:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
   1fdcc:	e0bff817 	ldw	r2,-32(fp)
   1fdd0:	10009116 	blt	r2,zero,20018 <create_file+0x2ac>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
   1fdd4:	e13ffd17 	ldw	r4,-12(fp)
   1fdd8:	001e9e00 	call	1e9e0 <get_dir_divider_location>
   1fddc:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
   1fde0:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
   1fde4:	00000b06 	br	1fe14 <create_file+0xa8>
            {
                last_dir_separator = last_dir_separator+location+1;
   1fde8:	e0fffa17 	ldw	r3,-24(fp)
   1fdec:	e0bff917 	ldw	r2,-28(fp)
   1fdf0:	1885883a 	add	r2,r3,r2
   1fdf4:	10800044 	addi	r2,r2,1
   1fdf8:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
   1fdfc:	e0bffa17 	ldw	r2,-24(fp)
   1fe00:	e0fffd17 	ldw	r3,-12(fp)
   1fe04:	1885883a 	add	r2,r3,r2
   1fe08:	1009883a 	mov	r4,r2
   1fe0c:	001e9e00 	call	1e9e0 <get_dir_divider_location>
   1fe10:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
   1fe14:	e0bff917 	ldw	r2,-28(fp)
   1fe18:	00bff316 	blt	zero,r2,1fde8 <__alt_mem_Flash_flash_data+0xf401fde8>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
   1fe1c:	e0bffa17 	ldw	r2,-24(fp)
   1fe20:	e0fffd17 	ldw	r3,-12(fp)
   1fe24:	1889883a 	add	r4,r3,r2
   1fe28:	e0fffe17 	ldw	r3,-8(fp)
   1fe2c:	e0bffe17 	ldw	r2,-8(fp)
   1fe30:	10800204 	addi	r2,r2,8
   1fe34:	180b883a 	mov	r5,r3
   1fe38:	100d883a 	mov	r6,r2
   1fe3c:	001fbe40 	call	1fbe4 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
   1fe40:	e0bffe17 	ldw	r2,-8(fp)
   1fe44:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
   1fe48:	e0bffe17 	ldw	r2,-8(fp)
   1fe4c:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
   1fe50:	e0bffe17 	ldw	r2,-8(fp)
   1fe54:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
   1fe58:	e0bffe17 	ldw	r2,-8(fp)
   1fe5c:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
   1fe60:	e0bffe17 	ldw	r2,-8(fp)
   1fe64:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
   1fe68:	e0bffe17 	ldw	r2,-8(fp)
   1fe6c:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
   1fe70:	e0bffc17 	ldw	r2,-16(fp)
   1fe74:	1007883a 	mov	r3,r2
   1fe78:	e0bffe17 	ldw	r2,-8(fp)
   1fe7c:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
   1fe80:	e0bffe17 	ldw	r2,-8(fp)
   1fe84:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
   1fe88:	e0fffc17 	ldw	r3,-16(fp)
   1fe8c:	e0bffe17 	ldw	r2,-8(fp)
   1fe90:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
   1fe94:	e0bffe17 	ldw	r2,-8(fp)
   1fe98:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
   1fe9c:	e0bffe17 	ldw	r2,-8(fp)
   1fea0:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
   1fea4:	e0bff817 	ldw	r2,-32(fp)
   1fea8:	10ffffcc 	andi	r3,r2,65535
   1feac:	e0bffe17 	ldw	r2,-8(fp)
   1feb0:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
   1feb4:	e0bff817 	ldw	r2,-32(fp)
   1feb8:	1004d43a 	srli	r2,r2,16
   1febc:	1000010e 	bge	r2,zero,1fec4 <create_file+0x158>
   1fec0:	108003c4 	addi	r2,r2,15
   1fec4:	1005d13a 	srai	r2,r2,4
   1fec8:	1007883a 	mov	r3,r2
   1fecc:	e0bffe17 	ldw	r2,-8(fp)
   1fed0:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
   1fed4:	e0bff817 	ldw	r2,-32(fp)
   1fed8:	1004d43a 	srli	r2,r2,16
   1fedc:	1007883a 	mov	r3,r2
   1fee0:	00a00034 	movhi	r2,32768
   1fee4:	108003c4 	addi	r2,r2,15
   1fee8:	1884703a 	and	r2,r3,r2
   1feec:	1000040e 	bge	r2,zero,1ff00 <create_file+0x194>
   1fef0:	10bfffc4 	addi	r2,r2,-1
   1fef4:	00fffc04 	movi	r3,-16
   1fef8:	10c4b03a 	or	r2,r2,r3
   1fefc:	10800044 	addi	r2,r2,1
   1ff00:	1004917a 	slli	r2,r2,5
   1ff04:	1007883a 	mov	r3,r2
   1ff08:	e0bffe17 	ldw	r2,-8(fp)
   1ff0c:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
   1ff10:	e0bfff17 	ldw	r2,-4(fp)
   1ff14:	1080058b 	ldhu	r2,22(r2)
   1ff18:	10ffffcc 	andi	r3,r2,65535
   1ff1c:	e0bffe17 	ldw	r2,-8(fp)
   1ff20:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
   1ff24:	e0bffe17 	ldw	r2,-8(fp)
   1ff28:	00c00044 	movi	r3,1
   1ff2c:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
   1ff30:	e0bffe17 	ldw	r2,-8(fp)
   1ff34:	00c00044 	movi	r3,1
   1ff38:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   1ff3c:	e0bffe17 	ldw	r2,-8(fp)
   1ff40:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   1ff44:	1000071e 	bne	r2,zero,1ff64 <create_file+0x1f8>
   1ff48:	00800174 	movhi	r2,5
   1ff4c:	10bcd104 	addi	r2,r2,-3260
   1ff50:	10c01317 	ldw	r3,76(r2)
   1ff54:	e0bffe17 	ldw	r2,-8(fp)
   1ff58:	10800b17 	ldw	r2,44(r2)
   1ff5c:	1885883a 	add	r2,r3,r2
   1ff60:	00000f06 	br	1ffa0 <create_file+0x234>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
   1ff64:	00800174 	movhi	r2,5
   1ff68:	10bcd104 	addi	r2,r2,-3260
   1ff6c:	10c01417 	ldw	r3,80(r2)
   1ff70:	e0bffe17 	ldw	r2,-8(fp)
   1ff74:	10800a17 	ldw	r2,40(r2)
   1ff78:	113fff84 	addi	r4,r2,-2
   1ff7c:	00800174 	movhi	r2,5
   1ff80:	10bcd104 	addi	r2,r2,-3260
   1ff84:	10800383 	ldbu	r2,14(r2)
   1ff88:	10803fcc 	andi	r2,r2,255
   1ff8c:	2085383a 	mul	r2,r4,r2
   1ff90:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
   1ff94:	e0bffe17 	ldw	r2,-8(fp)
   1ff98:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   1ff9c:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   1ffa0:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
   1ffa4:	e0fffb17 	ldw	r3,-20(fp)
   1ffa8:	d0a85817 	ldw	r2,-24224(gp)
   1ffac:	1809883a 	mov	r4,r3
   1ffb0:	100b883a 	mov	r5,r2
   1ffb4:	001d6200 	call	1d620 <Read_Sector_Data>
   1ffb8:	10001726 	beq	r2,zero,20018 <create_file+0x2ac>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
   1ffbc:	e0bffe17 	ldw	r2,-8(fp)
   1ffc0:	10800c0b 	ldhu	r2,48(r2)
   1ffc4:	10bfffcc 	andi	r2,r2,65535
   1ffc8:	10a0001c 	xori	r2,r2,32768
   1ffcc:	10a00004 	addi	r2,r2,-32768
   1ffd0:	1009883a 	mov	r4,r2
   1ffd4:	e17ffe17 	ldw	r5,-8(fp)
   1ffd8:	001dcb40 	call	1dcb4 <Write_File_Record_At_Offset>
   1ffdc:	10000e26 	beq	r2,zero,20018 <create_file+0x2ac>
                {
                    Save_Modified_Sector();
   1ffe0:	001d5d40 	call	1d5d4 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
   1ffe4:	e0bffc17 	ldw	r2,-16(fp)
   1ffe8:	1009883a 	mov	r4,r2
   1ffec:	017fffc4 	movi	r5,-1
   1fff0:	01800044 	movi	r6,1
   1fff4:	001d7ac0 	call	1d7ac <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
   1fff8:	e0bffc17 	ldw	r2,-16(fp)
   1fffc:	1009883a 	mov	r4,r2
   20000:	017fffc4 	movi	r5,-1
   20004:	000d883a 	mov	r6,zero
   20008:	001d7ac0 	call	1d7ac <mark_cluster>
   2000c:	10000226 	beq	r2,zero,20018 <create_file+0x2ac>
                    {
                        result = true;
   20010:	00800044 	movi	r2,1
   20014:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
   20018:	e0bff717 	ldw	r2,-36(fp)
}
   2001c:	e037883a 	mov	sp,fp
   20020:	dfc00117 	ldw	ra,4(sp)
   20024:	df000017 	ldw	fp,0(sp)
   20028:	dec00204 	addi	sp,sp,8
   2002c:	f800283a 	ret

00020030 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
   20030:	defffb04 	addi	sp,sp,-20
   20034:	df000415 	stw	fp,16(sp)
   20038:	df000404 	addi	fp,sp,16
   2003c:	e13ffe15 	stw	r4,-8(fp)
   20040:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
   20044:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   20048:	e03ffc15 	stw	zero,-16(fp)
   2004c:	00001506 	br	200a4 <copy_file_record_name_to_string+0x74>
	{
		if (file_record->name[index] != ' ')
   20050:	e0fffe17 	ldw	r3,-8(fp)
   20054:	e0bffc17 	ldw	r2,-16(fp)
   20058:	1885883a 	add	r2,r3,r2
   2005c:	10800003 	ldbu	r2,0(r2)
   20060:	10803fcc 	andi	r2,r2,255
   20064:	10800820 	cmpeqi	r2,r2,32
   20068:	10000b1e 	bne	r2,zero,20098 <copy_file_record_name_to_string+0x68>
		{
			file_name[flength] = file_record->name[index];
   2006c:	e0bffd17 	ldw	r2,-12(fp)
   20070:	e0ffff17 	ldw	r3,-4(fp)
   20074:	1885883a 	add	r2,r3,r2
   20078:	e13ffe17 	ldw	r4,-8(fp)
   2007c:	e0fffc17 	ldw	r3,-16(fp)
   20080:	20c7883a 	add	r3,r4,r3
   20084:	18c00003 	ldbu	r3,0(r3)
   20088:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
   2008c:	e0bffd17 	ldw	r2,-12(fp)
   20090:	10800044 	addi	r2,r2,1
   20094:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   20098:	e0bffc17 	ldw	r2,-16(fp)
   2009c:	10800044 	addi	r2,r2,1
   200a0:	e0bffc15 	stw	r2,-16(fp)
   200a4:	e0bffc17 	ldw	r2,-16(fp)
   200a8:	10800210 	cmplti	r2,r2,8
   200ac:	103fe81e 	bne	r2,zero,20050 <__alt_mem_Flash_flash_data+0xf4020050>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
   200b0:	e0bffe17 	ldw	r2,-8(fp)
   200b4:	10800203 	ldbu	r2,8(r2)
   200b8:	10803fcc 	andi	r2,r2,255
   200bc:	10800820 	cmpeqi	r2,r2,32
   200c0:	1000241e 	bne	r2,zero,20154 <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
   200c4:	e0bffd17 	ldw	r2,-12(fp)
   200c8:	e0ffff17 	ldw	r3,-4(fp)
   200cc:	1885883a 	add	r2,r3,r2
   200d0:	00c00b84 	movi	r3,46
   200d4:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
   200d8:	e0bffd17 	ldw	r2,-12(fp)
   200dc:	10800044 	addi	r2,r2,1
   200e0:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
   200e4:	e03ffc15 	stw	zero,-16(fp)
   200e8:	00001706 	br	20148 <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
   200ec:	e0fffe17 	ldw	r3,-8(fp)
   200f0:	e0bffc17 	ldw	r2,-16(fp)
   200f4:	1885883a 	add	r2,r3,r2
   200f8:	10800204 	addi	r2,r2,8
   200fc:	10800003 	ldbu	r2,0(r2)
   20100:	10803fcc 	andi	r2,r2,255
   20104:	10800820 	cmpeqi	r2,r2,32
   20108:	10000c1e 	bne	r2,zero,2013c <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
   2010c:	e0bffd17 	ldw	r2,-12(fp)
   20110:	e0ffff17 	ldw	r3,-4(fp)
   20114:	1885883a 	add	r2,r3,r2
   20118:	e13ffe17 	ldw	r4,-8(fp)
   2011c:	e0fffc17 	ldw	r3,-16(fp)
   20120:	20c7883a 	add	r3,r4,r3
   20124:	18c00204 	addi	r3,r3,8
   20128:	18c00003 	ldbu	r3,0(r3)
   2012c:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
   20130:	e0bffd17 	ldw	r2,-12(fp)
   20134:	10800044 	addi	r2,r2,1
   20138:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
   2013c:	e0bffc17 	ldw	r2,-16(fp)
   20140:	10800044 	addi	r2,r2,1
   20144:	e0bffc15 	stw	r2,-16(fp)
   20148:	e0bffc17 	ldw	r2,-16(fp)
   2014c:	108000d0 	cmplti	r2,r2,3
   20150:	103fe61e 	bne	r2,zero,200ec <__alt_mem_Flash_flash_data+0xf40200ec>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
   20154:	e0bffd17 	ldw	r2,-12(fp)
   20158:	e0ffff17 	ldw	r3,-4(fp)
   2015c:	1885883a 	add	r2,r3,r2
   20160:	10000005 	stb	zero,0(r2)
}
   20164:	e037883a 	mov	sp,fp
   20168:	df000017 	ldw	fp,0(sp)
   2016c:	dec00104 	addi	sp,sp,4
   20170:	f800283a 	ret

00020174 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
   20174:	defffc04 	addi	sp,sp,-16
   20178:	dfc00315 	stw	ra,12(sp)
   2017c:	df000215 	stw	fp,8(sp)
   20180:	df000204 	addi	fp,sp,8
   20184:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
   20188:	e13fff17 	ldw	r4,-4(fp)
   2018c:	014000b4 	movhi	r5,2
   20190:	295fba04 	addi	r5,r5,32488
   20194:	0023fb00 	call	23fb0 <alt_find_dev>
   20198:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
   2019c:	e0bffe17 	ldw	r2,-8(fp)
   201a0:	10001e26 	beq	r2,zero,2021c <alt_up_sd_card_open_dev+0xa8>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
   201a4:	e0bffe17 	ldw	r2,-8(fp)
   201a8:	10800a17 	ldw	r2,40(r2)
   201ac:	10808d04 	addi	r2,r2,564
   201b0:	d0a85215 	stw	r2,-24248(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
   201b4:	e0bffe17 	ldw	r2,-8(fp)
   201b8:	10800a17 	ldw	r2,40(r2)
   201bc:	10808904 	addi	r2,r2,548
   201c0:	d0a85315 	stw	r2,-24244(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
   201c4:	e0bffe17 	ldw	r2,-8(fp)
   201c8:	10800a17 	ldw	r2,40(r2)
   201cc:	10808404 	addi	r2,r2,528
   201d0:	d0a85415 	stw	r2,-24240(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
   201d4:	e0bffe17 	ldw	r2,-8(fp)
   201d8:	10800a17 	ldw	r2,40(r2)
   201dc:	10808c04 	addi	r2,r2,560
   201e0:	d0a85515 	stw	r2,-24236(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
   201e4:	e0bffe17 	ldw	r2,-8(fp)
   201e8:	10800a17 	ldw	r2,40(r2)
   201ec:	10808b04 	addi	r2,r2,556
   201f0:	d0a85615 	stw	r2,-24232(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
   201f4:	e0bffe17 	ldw	r2,-8(fp)
   201f8:	10800a17 	ldw	r2,40(r2)
   201fc:	d0a85715 	stw	r2,-24228(gp)
		device_pointer = dev;
   20200:	e0bffe17 	ldw	r2,-8(fp)
   20204:	d0a85a15 	stw	r2,-24216(gp)
		initialized = false;
   20208:	d0285015 	stw	zero,-24256(gp)
		is_sd_card_formated_as_FAT16 = false;
   2020c:	d0285115 	stw	zero,-24252(gp)
		search_data.valid = false;
   20210:	00800174 	movhi	r2,5
   20214:	10bccc04 	addi	r2,r2,-3280
   20218:	10000415 	stw	zero,16(r2)
	}
	return dev;
   2021c:	e0bffe17 	ldw	r2,-8(fp)
}
   20220:	e037883a 	mov	sp,fp
   20224:	dfc00117 	ldw	ra,4(sp)
   20228:	df000017 	ldw	fp,0(sp)
   2022c:	dec00204 	addi	sp,sp,8
   20230:	f800283a 	ret

00020234 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
   20234:	defffd04 	addi	sp,sp,-12
   20238:	df000215 	stw	fp,8(sp)
   2023c:	df000204 	addi	fp,sp,8
    bool result = false;
   20240:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
   20244:	d0a85a17 	ldw	r2,-24216(gp)
   20248:	10000826 	beq	r2,zero,2026c <alt_up_sd_card_is_Present+0x38>
   2024c:	d0a85217 	ldw	r2,-24248(gp)
   20250:	1080002b 	ldhuio	r2,0(r2)
   20254:	10bfffcc 	andi	r2,r2,65535
   20258:	1080008c 	andi	r2,r2,2
   2025c:	10000326 	beq	r2,zero,2026c <alt_up_sd_card_is_Present+0x38>
    {
        result = true;
   20260:	00800044 	movi	r2,1
   20264:	e0bffe15 	stw	r2,-8(fp)
   20268:	00001e06 	br	202e4 <alt_up_sd_card_is_Present+0xb0>
    }
	else if (initialized == true)
   2026c:	d0a85017 	ldw	r2,-24256(gp)
   20270:	10800058 	cmpnei	r2,r2,1
   20274:	10001b1e 	bne	r2,zero,202e4 <alt_up_sd_card_is_Present+0xb0>
	{
		int index;

		initialized = false;
   20278:	d0285015 	stw	zero,-24256(gp)
		search_data.valid = false;
   2027c:	00800174 	movhi	r2,5
   20280:	10bccc04 	addi	r2,r2,-3280
   20284:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
   20288:	d0285115 	stw	zero,-24252(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
   2028c:	e03fff15 	stw	zero,-4(fp)
   20290:	00001106 	br	202d8 <alt_up_sd_card_is_Present+0xa4>
		{
			active_files[index].in_use = false;
   20294:	00800174 	movhi	r2,5
   20298:	10bce604 	addi	r2,r2,-3176
   2029c:	e0ffff17 	ldw	r3,-4(fp)
   202a0:	180691ba 	slli	r3,r3,6
   202a4:	18c00f04 	addi	r3,r3,60
   202a8:	10c5883a 	add	r2,r2,r3
   202ac:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
   202b0:	00800174 	movhi	r2,5
   202b4:	10bce604 	addi	r2,r2,-3176
   202b8:	e0ffff17 	ldw	r3,-4(fp)
   202bc:	180691ba 	slli	r3,r3,6
   202c0:	18c00e04 	addi	r3,r3,56
   202c4:	10c5883a 	add	r2,r2,r3
   202c8:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
   202cc:	e0bfff17 	ldw	r2,-4(fp)
   202d0:	10800044 	addi	r2,r2,1
   202d4:	e0bfff15 	stw	r2,-4(fp)
   202d8:	e0bfff17 	ldw	r2,-4(fp)
   202dc:	10800510 	cmplti	r2,r2,20
   202e0:	103fec1e 	bne	r2,zero,20294 <__alt_mem_Flash_flash_data+0xf4020294>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
   202e4:	e0bffe17 	ldw	r2,-8(fp)
}
   202e8:	e037883a 	mov	sp,fp
   202ec:	df000017 	ldw	fp,0(sp)
   202f0:	dec00104 	addi	sp,sp,4
   202f4:	f800283a 	ret

000202f8 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
   202f8:	defffd04 	addi	sp,sp,-12
   202fc:	dfc00215 	stw	ra,8(sp)
   20300:	df000115 	stw	fp,4(sp)
   20304:	df000104 	addi	fp,sp,4
	bool result = false;
   20308:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
   2030c:	00202340 	call	20234 <alt_up_sd_card_is_Present>
   20310:	10000c26 	beq	r2,zero,20344 <alt_up_sd_card_is_FAT16+0x4c>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
   20314:	d0a85017 	ldw	r2,-24256(gp)
   20318:	1000071e 	bne	r2,zero,20338 <alt_up_sd_card_is_FAT16+0x40>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
   2031c:	001e5c80 	call	1e5c8 <Look_for_FAT16>
   20320:	d0a85115 	stw	r2,-24252(gp)
			initialized = is_sd_card_formated_as_FAT16;
   20324:	d0a85117 	ldw	r2,-24252(gp)
   20328:	d0a85015 	stw	r2,-24256(gp)
			search_data.valid = false;
   2032c:	00800174 	movhi	r2,5
   20330:	10bccc04 	addi	r2,r2,-3280
   20334:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
   20338:	d0a85117 	ldw	r2,-24252(gp)
   2033c:	e0bfff15 	stw	r2,-4(fp)
   20340:	00000206 	br	2034c <alt_up_sd_card_is_FAT16+0x54>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
   20344:	d0285015 	stw	zero,-24256(gp)
		is_sd_card_formated_as_FAT16 = false;
   20348:	d0285115 	stw	zero,-24252(gp)
	}

	return result;
   2034c:	e0bfff17 	ldw	r2,-4(fp)
}
   20350:	e037883a 	mov	sp,fp
   20354:	dfc00117 	ldw	ra,4(sp)
   20358:	df000017 	ldw	fp,0(sp)
   2035c:	dec00204 	addi	sp,sp,8
   20360:	f800283a 	ret

00020364 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
   20364:	deffea04 	addi	sp,sp,-88
   20368:	dfc01515 	stw	ra,84(sp)
   2036c:	df001415 	stw	fp,80(sp)
   20370:	df001404 	addi	fp,sp,80
   20374:	e13ffe15 	stw	r4,-8(fp)
   20378:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
   2037c:	00800084 	movi	r2,2
   20380:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   20384:	00202340 	call	20234 <alt_up_sd_card_is_Present>
   20388:	10002426 	beq	r2,zero,2041c <alt_up_sd_card_find_first+0xb8>
   2038c:	d0a85117 	ldw	r2,-24252(gp)
   20390:	10002226 	beq	r2,zero,2041c <alt_up_sd_card_find_first+0xb8>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
   20394:	e0ffed04 	addi	r3,fp,-76
   20398:	e0bfee04 	addi	r2,fp,-72
   2039c:	e13ffe17 	ldw	r4,-8(fp)
   203a0:	180b883a 	mov	r5,r3
   203a4:	100d883a 	mov	r6,r2
   203a8:	001ed340 	call	1ed34 <get_home_directory_cluster_for_file>
   203ac:	10001926 	beq	r2,zero,20414 <alt_up_sd_card_find_first+0xb0>
		{
			search_data.directory_root_cluster = home_directory_cluster;
   203b0:	e0bfed17 	ldw	r2,-76(fp)
   203b4:	1007883a 	mov	r3,r2
   203b8:	00800174 	movhi	r2,5
   203bc:	10bccc04 	addi	r2,r2,-3280
   203c0:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
   203c4:	e0bfed17 	ldw	r2,-76(fp)
   203c8:	1007883a 	mov	r3,r2
   203cc:	00800174 	movhi	r2,5
   203d0:	10bccc04 	addi	r2,r2,-3280
   203d4:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
   203d8:	00800174 	movhi	r2,5
   203dc:	10bccc04 	addi	r2,r2,-3280
   203e0:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
   203e4:	00800174 	movhi	r2,5
   203e8:	10bccc04 	addi	r2,r2,-3280
   203ec:	00ffffc4 	movi	r3,-1
   203f0:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
   203f4:	00800174 	movhi	r2,5
   203f8:	10bccc04 	addi	r2,r2,-3280
   203fc:	00c00044 	movi	r3,1
   20400:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
   20404:	e13fff17 	ldw	r4,-4(fp)
   20408:	00204340 	call	20434 <alt_up_sd_card_find_next>
   2040c:	e0bfec0d 	sth	r2,-80(fp)
   20410:	00000206 	br	2041c <alt_up_sd_card_find_first+0xb8>
		}
		else
		{
			result = 1;
   20414:	00800044 	movi	r2,1
   20418:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
   2041c:	e0bfec0b 	ldhu	r2,-80(fp)
}
   20420:	e037883a 	mov	sp,fp
   20424:	dfc00117 	ldw	ra,4(sp)
   20428:	df000017 	ldw	fp,0(sp)
   2042c:	dec00204 	addi	sp,sp,8
   20430:	f800283a 	ret

00020434 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
   20434:	deffe404 	addi	sp,sp,-112
   20438:	dfc01b15 	stw	ra,108(sp)
   2043c:	df001a15 	stw	fp,104(sp)
   20440:	df001a04 	addi	fp,sp,104
   20444:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
   20448:	00800084 	movi	r2,2
   2044c:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   20450:	00202340 	call	20234 <alt_up_sd_card_is_Present>
   20454:	1000dc26 	beq	r2,zero,207c8 <alt_up_sd_card_find_next+0x394>
   20458:	d0a85117 	ldw	r2,-24252(gp)
   2045c:	1000da26 	beq	r2,zero,207c8 <alt_up_sd_card_find_next+0x394>
	{
		if (search_data.valid)
   20460:	00800174 	movhi	r2,5
   20464:	10bccc04 	addi	r2,r2,-3280
   20468:	10800417 	ldw	r2,16(r2)
   2046c:	1000d426 	beq	r2,zero,207c0 <alt_up_sd_card_find_next+0x38c>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
   20470:	00800174 	movhi	r2,5
   20474:	10bccc04 	addi	r2,r2,-3280
   20478:	10800117 	ldw	r2,4(r2)
   2047c:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
   20480:	e0bfe717 	ldw	r2,-100(fp)
   20484:	1000551e 	bne	r2,zero,205dc <alt_up_sd_card_find_next+0x1a8>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   20488:	00800174 	movhi	r2,5
   2048c:	10bcd104 	addi	r2,r2,-3260
   20490:	1080050b 	ldhu	r2,20(r2)
   20494:	10bfffcc 	andi	r2,r2,65535
   20498:	1006917a 	slli	r3,r2,5
   2049c:	00800174 	movhi	r2,5
   204a0:	10bcd104 	addi	r2,r2,-3260
   204a4:	1080030b 	ldhu	r2,12(r2)
   204a8:	10bfffcc 	andi	r2,r2,65535
   204ac:	1885283a 	div	r2,r3,r2
   204b0:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
   204b4:	00800174 	movhi	r2,5
   204b8:	10bccc04 	addi	r2,r2,-3280
   204bc:	10800217 	ldw	r2,8(r2)
   204c0:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
   204c4:	00800174 	movhi	r2,5
   204c8:	10bccc04 	addi	r2,r2,-3280
   204cc:	1080030b 	ldhu	r2,12(r2)
   204d0:	10bfffcc 	andi	r2,r2,65535
   204d4:	10a0001c 	xori	r2,r2,32768
   204d8:	10a00004 	addi	r2,r2,-32768
   204dc:	10800044 	addi	r2,r2,1
   204e0:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
   204e4:	00003706 	br	205c4 <alt_up_sd_card_find_next+0x190>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   204e8:	00800174 	movhi	r2,5
   204ec:	10bcd104 	addi	r2,r2,-3260
   204f0:	10c01317 	ldw	r3,76(r2)
   204f4:	e0bfe817 	ldw	r2,-96(fp)
   204f8:	1885883a 	add	r2,r3,r2
   204fc:	1007883a 	mov	r3,r2
   20500:	d0a85817 	ldw	r2,-24224(gp)
   20504:	1809883a 	mov	r4,r3
   20508:	100b883a 	mov	r5,r2
   2050c:	001d6200 	call	1d620 <Read_Sector_Data>
   20510:	10002826 	beq	r2,zero,205b4 <alt_up_sd_card_find_next+0x180>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   20514:	00002206 	br	205a0 <alt_up_sd_card_find_next+0x16c>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
   20518:	e0bfe917 	ldw	r2,-92(fp)
   2051c:	1008917a 	slli	r4,r2,5
   20520:	e0bfe817 	ldw	r2,-96(fp)
   20524:	e0ffef04 	addi	r3,fp,-68
   20528:	180b883a 	mov	r5,r3
   2052c:	000d883a 	mov	r6,zero
   20530:	100f883a 	mov	r7,r2
   20534:	001da380 	call	1da38 <Read_File_Record_At_Offset>
   20538:	10001626 	beq	r2,zero,20594 <alt_up_sd_card_find_next+0x160>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   2053c:	e0bfef03 	ldbu	r2,-68(fp)
   20540:	10803fcc 	andi	r2,r2,255
   20544:	10001326 	beq	r2,zero,20594 <alt_up_sd_card_find_next+0x160>
   20548:	e0bfef03 	ldbu	r2,-68(fp)
   2054c:	10803fcc 	andi	r2,r2,255
   20550:	10803960 	cmpeqi	r2,r2,229
   20554:	10000f1e 	bne	r2,zero,20594 <alt_up_sd_card_find_next+0x160>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
   20558:	e0bfe917 	ldw	r2,-92(fp)
   2055c:	1007883a 	mov	r3,r2
   20560:	00800174 	movhi	r2,5
   20564:	10bccc04 	addi	r2,r2,-3280
   20568:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
   2056c:	e0ffe817 	ldw	r3,-96(fp)
   20570:	00800174 	movhi	r2,5
   20574:	10bccc04 	addi	r2,r2,-3280
   20578:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
   2057c:	e0bfef04 	addi	r2,fp,-68
   20580:	1009883a 	mov	r4,r2
   20584:	e17fff17 	ldw	r5,-4(fp)
   20588:	00200300 	call	20030 <copy_file_record_name_to_string>
									return 0;
   2058c:	0005883a 	mov	r2,zero
   20590:	00008e06 	br	207cc <alt_up_sd_card_find_next+0x398>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   20594:	e0bfe917 	ldw	r2,-92(fp)
   20598:	10800044 	addi	r2,r2,1
   2059c:	e0bfe915 	stw	r2,-92(fp)
   205a0:	e0bfe917 	ldw	r2,-92(fp)
   205a4:	10800410 	cmplti	r2,r2,16
   205a8:	103fdb1e 	bne	r2,zero,20518 <__alt_mem_Flash_flash_data+0xf4020518>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
   205ac:	e03fe915 	stw	zero,-92(fp)
   205b0:	00000106 	br	205b8 <alt_up_sd_card_find_next+0x184>
					}
					else
					{
						break;
   205b4:	00000606 	br	205d0 <alt_up_sd_card_find_next+0x19c>
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
   205b8:	e0bfe817 	ldw	r2,-96(fp)
   205bc:	10800044 	addi	r2,r2,1
   205c0:	e0bfe815 	stw	r2,-96(fp)
   205c4:	e0ffe817 	ldw	r3,-96(fp)
   205c8:	e0bfec17 	ldw	r2,-80(fp)
   205cc:	18bfc616 	blt	r3,r2,204e8 <__alt_mem_Flash_flash_data+0xf40204e8>
					else
					{
						break;
					}
				}
				result = -1;
   205d0:	00bfffc4 	movi	r2,-1
   205d4:	e0bfe60d 	sth	r2,-104(fp)
   205d8:	00007806 	br	207bc <alt_up_sd_card_find_next+0x388>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
   205dc:	00800174 	movhi	r2,5
   205e0:	10bccc04 	addi	r2,r2,-3280
   205e4:	1080030b 	ldhu	r2,12(r2)
   205e8:	10bfffcc 	andi	r2,r2,65535
   205ec:	10a0001c 	xori	r2,r2,32768
   205f0:	10a00004 	addi	r2,r2,-32768
   205f4:	10800044 	addi	r2,r2,1
   205f8:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   205fc:	e0bfe717 	ldw	r2,-100(fp)
   20600:	10ffff84 	addi	r3,r2,-2
   20604:	00800174 	movhi	r2,5
   20608:	10bcd104 	addi	r2,r2,-3260
   2060c:	10800383 	ldbu	r2,14(r2)
   20610:	10803fcc 	andi	r2,r2,255
   20614:	1885383a 	mul	r2,r3,r2
   20618:	1007883a 	mov	r3,r2
   2061c:	00800174 	movhi	r2,5
   20620:	10bcd104 	addi	r2,r2,-3260
   20624:	10801417 	ldw	r2,80(r2)
   20628:	1885883a 	add	r2,r3,r2
   2062c:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
   20630:	00800174 	movhi	r2,5
   20634:	10bccc04 	addi	r2,r2,-3280
   20638:	10800217 	ldw	r2,8(r2)
   2063c:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   20640:	00003806 	br	20724 <alt_up_sd_card_find_next+0x2f0>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   20644:	e0ffeb17 	ldw	r3,-84(fp)
   20648:	e0bfed17 	ldw	r2,-76(fp)
   2064c:	1887883a 	add	r3,r3,r2
   20650:	d0a85817 	ldw	r2,-24224(gp)
   20654:	1809883a 	mov	r4,r3
   20658:	100b883a 	mov	r5,r2
   2065c:	001d6200 	call	1d620 <Read_Sector_Data>
   20660:	10002c26 	beq	r2,zero,20714 <alt_up_sd_card_find_next+0x2e0>
						{        
							for (; file_counter < 16; file_counter++)
   20664:	00002606 	br	20700 <alt_up_sd_card_find_next+0x2cc>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
   20668:	e0bfea17 	ldw	r2,-88(fp)
   2066c:	1008917a 	slli	r4,r2,5
   20670:	e0ffe717 	ldw	r3,-100(fp)
   20674:	e0bfeb17 	ldw	r2,-84(fp)
   20678:	e17fef04 	addi	r5,fp,-68
   2067c:	180d883a 	mov	r6,r3
   20680:	100f883a 	mov	r7,r2
   20684:	001da380 	call	1da38 <Read_File_Record_At_Offset>
   20688:	10001a26 	beq	r2,zero,206f4 <alt_up_sd_card_find_next+0x2c0>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   2068c:	e0bfef03 	ldbu	r2,-68(fp)
   20690:	10803fcc 	andi	r2,r2,255
   20694:	10001726 	beq	r2,zero,206f4 <alt_up_sd_card_find_next+0x2c0>
   20698:	e0bfef03 	ldbu	r2,-68(fp)
   2069c:	10803fcc 	andi	r2,r2,255
   206a0:	10803960 	cmpeqi	r2,r2,229
   206a4:	1000131e 	bne	r2,zero,206f4 <alt_up_sd_card_find_next+0x2c0>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
   206a8:	e0ffe717 	ldw	r3,-100(fp)
   206ac:	00800174 	movhi	r2,5
   206b0:	10bccc04 	addi	r2,r2,-3280
   206b4:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
   206b8:	e0bfea17 	ldw	r2,-88(fp)
   206bc:	1007883a 	mov	r3,r2
   206c0:	00800174 	movhi	r2,5
   206c4:	10bccc04 	addi	r2,r2,-3280
   206c8:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
   206cc:	e0ffeb17 	ldw	r3,-84(fp)
   206d0:	00800174 	movhi	r2,5
   206d4:	10bccc04 	addi	r2,r2,-3280
   206d8:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
   206dc:	e0bfef04 	addi	r2,fp,-68
   206e0:	1009883a 	mov	r4,r2
   206e4:	e17fff17 	ldw	r5,-4(fp)
   206e8:	00200300 	call	20030 <copy_file_record_name_to_string>
										return 0;
   206ec:	0005883a 	mov	r2,zero
   206f0:	00003606 	br	207cc <alt_up_sd_card_find_next+0x398>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
   206f4:	e0bfea17 	ldw	r2,-88(fp)
   206f8:	10800044 	addi	r2,r2,1
   206fc:	e0bfea15 	stw	r2,-88(fp)
   20700:	e0bfea17 	ldw	r2,-88(fp)
   20704:	10800410 	cmplti	r2,r2,16
   20708:	103fd71e 	bne	r2,zero,20668 <__alt_mem_Flash_flash_data+0xf4020668>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
   2070c:	e03fea15 	stw	zero,-88(fp)
   20710:	00000106 	br	20718 <alt_up_sd_card_find_next+0x2e4>
						}
						else
						{
							break;
   20714:	00000906 	br	2073c <alt_up_sd_card_find_next+0x308>
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   20718:	e0bfeb17 	ldw	r2,-84(fp)
   2071c:	10800044 	addi	r2,r2,1
   20720:	e0bfeb15 	stw	r2,-84(fp)
   20724:	00800174 	movhi	r2,5
   20728:	10bcd104 	addi	r2,r2,-3260
   2072c:	10800383 	ldbu	r2,14(r2)
   20730:	10803fcc 	andi	r2,r2,255
   20734:	e0ffeb17 	ldw	r3,-84(fp)
   20738:	18bfc216 	blt	r3,r2,20644 <__alt_mem_Flash_flash_data+0xf4020644>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
   2073c:	00800174 	movhi	r2,5
   20740:	10bcd104 	addi	r2,r2,-3260
   20744:	10800383 	ldbu	r2,14(r2)
   20748:	10803fcc 	andi	r2,r2,255
   2074c:	e0ffeb17 	ldw	r3,-84(fp)
   20750:	18801716 	blt	r3,r2,207b0 <alt_up_sd_card_find_next+0x37c>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
   20754:	e0ffe717 	ldw	r3,-100(fp)
   20758:	e0bfee04 	addi	r2,fp,-72
   2075c:	1809883a 	mov	r4,r3
   20760:	100b883a 	mov	r5,r2
   20764:	001d6f80 	call	1d6f8 <get_cluster_flag>
   20768:	10000f26 	beq	r2,zero,207a8 <alt_up_sd_card_find_next+0x374>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   2076c:	e0bfee0b 	ldhu	r2,-72(fp)
   20770:	10bfffcc 	andi	r2,r2,65535
   20774:	10fffe0c 	andi	r3,r2,65528
   20778:	00bffe14 	movui	r2,65528
   2077c:	1880051e 	bne	r3,r2,20794 <alt_up_sd_card_find_next+0x360>
							{
								result = -1;
   20780:	00bfffc4 	movi	r2,-1
   20784:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
   20788:	00800174 	movhi	r2,5
   2078c:	10bccc04 	addi	r2,r2,-3280
   20790:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
   20794:	e0bfee0b 	ldhu	r2,-72(fp)
   20798:	10bfffcc 	andi	r2,r2,65535
   2079c:	10bffe0c 	andi	r2,r2,65528
   207a0:	e0bfe715 	stw	r2,-100(fp)
   207a4:	00000206 	br	207b0 <alt_up_sd_card_find_next+0x37c>
						}
						else
						{
							// Error encountered.                 
							result = -1;
   207a8:	00bfffc4 	movi	r2,-1
   207ac:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
   207b0:	e0bfe717 	ldw	r2,-100(fp)
   207b4:	00fffdd4 	movui	r3,65527
   207b8:	18bf900e 	bge	r3,r2,205fc <__alt_mem_Flash_flash_data+0xf40205fc>
   207bc:	00000206 	br	207c8 <alt_up_sd_card_find_next+0x394>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
   207c0:	008000c4 	movi	r2,3
   207c4:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
   207c8:	e0bfe60b 	ldhu	r2,-104(fp)
}
   207cc:	e037883a 	mov	sp,fp
   207d0:	dfc00117 	ldw	ra,4(sp)
   207d4:	df000017 	ldw	fp,0(sp)
   207d8:	dec00204 	addi	sp,sp,8
   207dc:	f800283a 	ret

000207e0 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
   207e0:	deffe904 	addi	sp,sp,-92
   207e4:	dfc01615 	stw	ra,88(sp)
   207e8:	df001515 	stw	fp,84(sp)
   207ec:	df001504 	addi	fp,sp,84
   207f0:	e13ffe15 	stw	r4,-8(fp)
   207f4:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
   207f8:	00bfffc4 	movi	r2,-1
   207fc:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   20800:	00202340 	call	20234 <alt_up_sd_card_is_Present>
   20804:	1000d126 	beq	r2,zero,20b4c <alt_up_sd_card_fopen+0x36c>
   20808:	d0a85117 	ldw	r2,-24252(gp)
   2080c:	1000cf26 	beq	r2,zero,20b4c <alt_up_sd_card_fopen+0x36c>
	{
        unsigned int home_directory_cluster = 0;
   20810:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
   20814:	e13ffe17 	ldw	r4,-8(fp)
   20818:	001e6b40 	call	1e6b4 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
   2081c:	e13ffe17 	ldw	r4,-8(fp)
   20820:	001e7740 	call	1e774 <check_file_name_for_FAT16_compliance>
   20824:	1000c926 	beq	r2,zero,20b4c <alt_up_sd_card_fopen+0x36c>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
   20828:	e0ffed04 	addi	r3,fp,-76
   2082c:	e0bfee04 	addi	r2,fp,-72
   20830:	e13ffe17 	ldw	r4,-8(fp)
   20834:	180b883a 	mov	r5,r3
   20838:	100d883a 	mov	r6,r2
   2083c:	001ed340 	call	1ed34 <get_home_directory_cluster_for_file>
   20840:	1000021e 	bne	r2,zero,2084c <alt_up_sd_card_fopen+0x6c>
            {
                return file_record_index;
   20844:	e0bfeb0b 	ldhu	r2,-84(fp)
   20848:	0000c106 	br	20b50 <alt_up_sd_card_fopen+0x370>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   2084c:	e03fec15 	stw	zero,-80(fp)
   20850:	00000e06 	br	2088c <alt_up_sd_card_fopen+0xac>
    		{
    			if (active_files[index].in_use == false)
   20854:	00800174 	movhi	r2,5
   20858:	10bce604 	addi	r2,r2,-3176
   2085c:	e0ffec17 	ldw	r3,-80(fp)
   20860:	180691ba 	slli	r3,r3,6
   20864:	18c00f04 	addi	r3,r3,60
   20868:	10c5883a 	add	r2,r2,r3
   2086c:	10800017 	ldw	r2,0(r2)
   20870:	1000031e 	bne	r2,zero,20880 <alt_up_sd_card_fopen+0xa0>
    			{
    				file_record_index = index;
   20874:	e0bfec17 	ldw	r2,-80(fp)
   20878:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
   2087c:	00000606 	br	20898 <alt_up_sd_card_fopen+0xb8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   20880:	e0bfec17 	ldw	r2,-80(fp)
   20884:	10800044 	addi	r2,r2,1
   20888:	e0bfec15 	stw	r2,-80(fp)
   2088c:	e0bfec17 	ldw	r2,-80(fp)
   20890:	10800510 	cmplti	r2,r2,20
   20894:	103fef1e 	bne	r2,zero,20854 <__alt_mem_Flash_flash_data+0xf4020854>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
   20898:	e0bfeb0f 	ldh	r2,-84(fp)
   2089c:	1000ab16 	blt	r2,zero,20b4c <alt_up_sd_card_fopen+0x36c>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
   208a0:	e0bfed17 	ldw	r2,-76(fp)
   208a4:	1009883a 	mov	r4,r2
   208a8:	e0bfeb0f 	ldh	r2,-84(fp)
   208ac:	100691ba 	slli	r3,r2,6
   208b0:	00800174 	movhi	r2,5
   208b4:	10bce604 	addi	r2,r2,-3176
   208b8:	1885883a 	add	r2,r3,r2
   208bc:	e17ffe17 	ldw	r5,-8(fp)
   208c0:	100d883a 	mov	r6,r2
   208c4:	001f2600 	call	1f260 <find_file_in_directory>
   208c8:	10007c26 	beq	r2,zero,20abc <alt_up_sd_card_fopen+0x2dc>
                {
                    if (create)
   208cc:	e0bfff17 	ldw	r2,-4(fp)
   208d0:	10000226 	beq	r2,zero,208dc <alt_up_sd_card_fopen+0xfc>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
   208d4:	00bfffc4 	movi	r2,-1
   208d8:	00009d06 	br	20b50 <alt_up_sd_card_fopen+0x370>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
   208dc:	e13feb0f 	ldh	r4,-84(fp)
   208e0:	e0ffeb0f 	ldh	r3,-84(fp)
   208e4:	00800174 	movhi	r2,5
   208e8:	10bce604 	addi	r2,r2,-3176
   208ec:	180691ba 	slli	r3,r3,6
   208f0:	18c00504 	addi	r3,r3,20
   208f4:	10c5883a 	add	r2,r2,r3
   208f8:	1080008b 	ldhu	r2,2(r2)
   208fc:	10ffffcc 	andi	r3,r2,65535
   20900:	00800174 	movhi	r2,5
   20904:	10bce604 	addi	r2,r2,-3176
   20908:	200891ba 	slli	r4,r4,6
   2090c:	21000704 	addi	r4,r4,28
   20910:	1105883a 	add	r2,r2,r4
   20914:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
   20918:	e0ffeb0f 	ldh	r3,-84(fp)
   2091c:	00800174 	movhi	r2,5
   20920:	10bce604 	addi	r2,r2,-3176
   20924:	180691ba 	slli	r3,r3,6
   20928:	18c00804 	addi	r3,r3,32
   2092c:	10c5883a 	add	r2,r2,r3
   20930:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
   20934:	e0ffeb0f 	ldh	r3,-84(fp)
   20938:	00800174 	movhi	r2,5
   2093c:	10bce604 	addi	r2,r2,-3176
   20940:	180691ba 	slli	r3,r3,6
   20944:	18c00904 	addi	r3,r3,36
   20948:	10c5883a 	add	r2,r2,r3
   2094c:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
   20950:	e0ffeb0f 	ldh	r3,-84(fp)
   20954:	00800174 	movhi	r2,5
   20958:	10bce604 	addi	r2,r2,-3176
   2095c:	180691ba 	slli	r3,r3,6
   20960:	18c00f04 	addi	r3,r3,60
   20964:	10c5883a 	add	r2,r2,r3
   20968:	00c00044 	movi	r3,1
   2096c:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
   20970:	e0ffeb0f 	ldh	r3,-84(fp)
   20974:	00800174 	movhi	r2,5
   20978:	10bce604 	addi	r2,r2,-3176
   2097c:	180691ba 	slli	r3,r3,6
   20980:	18c00e04 	addi	r3,r3,56
   20984:	10c5883a 	add	r2,r2,r3
   20988:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   2098c:	e03fec15 	stw	zero,-80(fp)
   20990:	00004606 	br	20aac <alt_up_sd_card_fopen+0x2cc>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
   20994:	e0ffeb0f 	ldh	r3,-84(fp)
   20998:	e0bfec17 	ldw	r2,-80(fp)
   2099c:	18804026 	beq	r3,r2,20aa0 <alt_up_sd_card_fopen+0x2c0>
   209a0:	00800174 	movhi	r2,5
   209a4:	10bce604 	addi	r2,r2,-3176
   209a8:	e0ffec17 	ldw	r3,-80(fp)
   209ac:	180691ba 	slli	r3,r3,6
   209b0:	18c00f04 	addi	r3,r3,60
   209b4:	10c5883a 	add	r2,r2,r3
   209b8:	10800017 	ldw	r2,0(r2)
   209bc:	10800058 	cmpnei	r2,r2,1
   209c0:	1000371e 	bne	r2,zero,20aa0 <alt_up_sd_card_fopen+0x2c0>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   209c4:	e0ffeb0f 	ldh	r3,-84(fp)
   209c8:	00800174 	movhi	r2,5
   209cc:	10bce604 	addi	r2,r2,-3176
   209d0:	180691ba 	slli	r3,r3,6
   209d4:	18c00a04 	addi	r3,r3,40
   209d8:	10c5883a 	add	r2,r2,r3
   209dc:	10c00017 	ldw	r3,0(r2)
   209e0:	00800174 	movhi	r2,5
   209e4:	10bce604 	addi	r2,r2,-3176
   209e8:	e13fec17 	ldw	r4,-80(fp)
   209ec:	200891ba 	slli	r4,r4,6
   209f0:	21000a04 	addi	r4,r4,40
   209f4:	1105883a 	add	r2,r2,r4
   209f8:	10800017 	ldw	r2,0(r2)
   209fc:	1880281e 	bne	r3,r2,20aa0 <alt_up_sd_card_fopen+0x2c0>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   20a00:	e0ffeb0f 	ldh	r3,-84(fp)
   20a04:	00800174 	movhi	r2,5
   20a08:	10bce604 	addi	r2,r2,-3176
   20a0c:	180691ba 	slli	r3,r3,6
   20a10:	18c00b04 	addi	r3,r3,44
   20a14:	10c5883a 	add	r2,r2,r3
   20a18:	10c00017 	ldw	r3,0(r2)
   20a1c:	00800174 	movhi	r2,5
   20a20:	10bce604 	addi	r2,r2,-3176
   20a24:	e13fec17 	ldw	r4,-80(fp)
   20a28:	200891ba 	slli	r4,r4,6
   20a2c:	21000b04 	addi	r4,r4,44
   20a30:	1105883a 	add	r2,r2,r4
   20a34:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   20a38:	1880191e 	bne	r3,r2,20aa0 <alt_up_sd_card_fopen+0x2c0>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
   20a3c:	e0ffeb0f 	ldh	r3,-84(fp)
   20a40:	00800174 	movhi	r2,5
   20a44:	10bce604 	addi	r2,r2,-3176
   20a48:	180691ba 	slli	r3,r3,6
   20a4c:	18c00c04 	addi	r3,r3,48
   20a50:	10c5883a 	add	r2,r2,r3
   20a54:	1100000b 	ldhu	r4,0(r2)
   20a58:	00800174 	movhi	r2,5
   20a5c:	10bce604 	addi	r2,r2,-3176
   20a60:	e0ffec17 	ldw	r3,-80(fp)
   20a64:	180691ba 	slli	r3,r3,6
   20a68:	18c00c04 	addi	r3,r3,48
   20a6c:	10c5883a 	add	r2,r2,r3
   20a70:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   20a74:	20ffffcc 	andi	r3,r4,65535
   20a78:	18e0001c 	xori	r3,r3,32768
   20a7c:	18e00004 	addi	r3,r3,-32768
   20a80:	10bfffcc 	andi	r2,r2,65535
   20a84:	10a0001c 	xori	r2,r2,32768
   20a88:	10a00004 	addi	r2,r2,-32768
   20a8c:	1880041e 	bne	r3,r2,20aa0 <alt_up_sd_card_fopen+0x2c0>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
   20a90:	00bfff84 	movi	r2,-2
   20a94:	e0bfeb0d 	sth	r2,-84(fp)
								break;
   20a98:	0001883a 	nop
   20a9c:	00002b06 	br	20b4c <alt_up_sd_card_fopen+0x36c>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   20aa0:	e0bfec17 	ldw	r2,-80(fp)
   20aa4:	10800044 	addi	r2,r2,1
   20aa8:	e0bfec15 	stw	r2,-80(fp)
   20aac:	e0bfec17 	ldw	r2,-80(fp)
   20ab0:	10800510 	cmplti	r2,r2,20
   20ab4:	103fb71e 	bne	r2,zero,20994 <__alt_mem_Flash_flash_data+0xf4020994>
   20ab8:	00002406 	br	20b4c <alt_up_sd_card_fopen+0x36c>
							}
						}
					}

                }
                else if (create)
   20abc:	e0bfff17 	ldw	r2,-4(fp)
   20ac0:	10001f26 	beq	r2,zero,20b40 <alt_up_sd_card_fopen+0x360>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
   20ac4:	e0bfeb0f 	ldh	r2,-84(fp)
   20ac8:	100691ba 	slli	r3,r2,6
   20acc:	00800174 	movhi	r2,5
   20ad0:	10bce604 	addi	r2,r2,-3176
   20ad4:	1887883a 	add	r3,r3,r2
   20ad8:	e0bfee04 	addi	r2,fp,-72
   20adc:	e13ffe17 	ldw	r4,-8(fp)
   20ae0:	180b883a 	mov	r5,r3
   20ae4:	100d883a 	mov	r6,r2
   20ae8:	001fd6c0 	call	1fd6c <create_file>
   20aec:	10001126 	beq	r2,zero,20b34 <alt_up_sd_card_fopen+0x354>
                    {
                        active_files[file_record_index].in_use = true;
   20af0:	e0ffeb0f 	ldh	r3,-84(fp)
   20af4:	00800174 	movhi	r2,5
   20af8:	10bce604 	addi	r2,r2,-3176
   20afc:	180691ba 	slli	r3,r3,6
   20b00:	18c00f04 	addi	r3,r3,60
   20b04:	10c5883a 	add	r2,r2,r3
   20b08:	00c00044 	movi	r3,1
   20b0c:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
   20b10:	e0ffeb0f 	ldh	r3,-84(fp)
   20b14:	00800174 	movhi	r2,5
   20b18:	10bce604 	addi	r2,r2,-3176
   20b1c:	180691ba 	slli	r3,r3,6
   20b20:	18c00e04 	addi	r3,r3,56
   20b24:	10c5883a 	add	r2,r2,r3
   20b28:	00c00044 	movi	r3,1
   20b2c:	10c00015 	stw	r3,0(r2)
   20b30:	00000606 	br	20b4c <alt_up_sd_card_fopen+0x36c>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
   20b34:	00bfffc4 	movi	r2,-1
   20b38:	e0bfeb0d 	sth	r2,-84(fp)
   20b3c:	00000306 	br	20b4c <alt_up_sd_card_fopen+0x36c>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
   20b40:	00bfffc4 	movi	r2,-1
   20b44:	e0bfeb0d 	sth	r2,-84(fp)
   20b48:	00000006 	br	20b4c <alt_up_sd_card_fopen+0x36c>
                }
    		}
        }
	}

	return file_record_index;
   20b4c:	e0bfeb0b 	ldhu	r2,-84(fp)
}
   20b50:	e037883a 	mov	sp,fp
   20b54:	dfc00117 	ldw	ra,4(sp)
   20b58:	df000017 	ldw	fp,0(sp)
   20b5c:	dec00204 	addi	sp,sp,8
   20b60:	f800283a 	ret

00020b64 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   20b64:	defffd04 	addi	sp,sp,-12
   20b68:	df000215 	stw	fp,8(sp)
   20b6c:	df000204 	addi	fp,sp,8
   20b70:	2007883a 	mov	r3,r4
   20b74:	2805883a 	mov	r2,r5
   20b78:	e0fffe0d 	sth	r3,-8(fp)
   20b7c:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   20b80:	e0bffe0f 	ldh	r2,-8(fp)
   20b84:	10001416 	blt	r2,zero,20bd8 <alt_up_sd_card_set_attributes+0x74>
   20b88:	e0bffe0f 	ldh	r2,-8(fp)
   20b8c:	10800508 	cmpgei	r2,r2,20
   20b90:	1000111e 	bne	r2,zero,20bd8 <alt_up_sd_card_set_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
   20b94:	e0fffe0f 	ldh	r3,-8(fp)
   20b98:	00800174 	movhi	r2,5
   20b9c:	10bce604 	addi	r2,r2,-3176
   20ba0:	180691ba 	slli	r3,r3,6
   20ba4:	18c00f04 	addi	r3,r3,60
   20ba8:	10c5883a 	add	r2,r2,r3
   20bac:	10800017 	ldw	r2,0(r2)
   20bb0:	10000926 	beq	r2,zero,20bd8 <alt_up_sd_card_set_attributes+0x74>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
   20bb4:	e0fffe0f 	ldh	r3,-8(fp)
   20bb8:	e0bfff0b 	ldhu	r2,-4(fp)
   20bbc:	1009883a 	mov	r4,r2
   20bc0:	00800174 	movhi	r2,5
   20bc4:	10bce604 	addi	r2,r2,-3176
   20bc8:	180691ba 	slli	r3,r3,6
   20bcc:	18c00204 	addi	r3,r3,8
   20bd0:	10c5883a 	add	r2,r2,r3
   20bd4:	110000c5 	stb	r4,3(r2)
        }
    }
}
   20bd8:	e037883a 	mov	sp,fp
   20bdc:	df000017 	ldw	fp,0(sp)
   20be0:	dec00104 	addi	sp,sp,4
   20be4:	f800283a 	ret

00020be8 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   20be8:	defffd04 	addi	sp,sp,-12
   20bec:	df000215 	stw	fp,8(sp)
   20bf0:	df000204 	addi	fp,sp,8
   20bf4:	2005883a 	mov	r2,r4
   20bf8:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
   20bfc:	00bfffc4 	movi	r2,-1
   20c00:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   20c04:	e0bfff0f 	ldh	r2,-4(fp)
   20c08:	10001416 	blt	r2,zero,20c5c <alt_up_sd_card_get_attributes+0x74>
   20c0c:	e0bfff0f 	ldh	r2,-4(fp)
   20c10:	10800508 	cmpgei	r2,r2,20
   20c14:	1000111e 	bne	r2,zero,20c5c <alt_up_sd_card_get_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
   20c18:	e0ffff0f 	ldh	r3,-4(fp)
   20c1c:	00800174 	movhi	r2,5
   20c20:	10bce604 	addi	r2,r2,-3176
   20c24:	180691ba 	slli	r3,r3,6
   20c28:	18c00f04 	addi	r3,r3,60
   20c2c:	10c5883a 	add	r2,r2,r3
   20c30:	10800017 	ldw	r2,0(r2)
   20c34:	10000926 	beq	r2,zero,20c5c <alt_up_sd_card_get_attributes+0x74>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
   20c38:	e0ffff0f 	ldh	r3,-4(fp)
   20c3c:	00800174 	movhi	r2,5
   20c40:	10bce604 	addi	r2,r2,-3176
   20c44:	180691ba 	slli	r3,r3,6
   20c48:	18c00204 	addi	r3,r3,8
   20c4c:	10c5883a 	add	r2,r2,r3
   20c50:	108000c3 	ldbu	r2,3(r2)
   20c54:	10803fcc 	andi	r2,r2,255
   20c58:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
   20c5c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   20c60:	e037883a 	mov	sp,fp
   20c64:	df000017 	ldw	fp,0(sp)
   20c68:	dec00104 	addi	sp,sp,4
   20c6c:	f800283a 	ret

00020c70 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
   20c70:	defffa04 	addi	sp,sp,-24
   20c74:	dfc00515 	stw	ra,20(sp)
   20c78:	df000415 	stw	fp,16(sp)
   20c7c:	df000404 	addi	fp,sp,16
   20c80:	2005883a 	mov	r2,r4
   20c84:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
   20c88:	00bfffc4 	movi	r2,-1
   20c8c:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   20c90:	e0bfff0f 	ldh	r2,-4(fp)
   20c94:	1000ce16 	blt	r2,zero,20fd0 <alt_up_sd_card_read+0x360>
   20c98:	e0bfff0f 	ldh	r2,-4(fp)
   20c9c:	10800508 	cmpgei	r2,r2,20
   20ca0:	1000cb1e 	bne	r2,zero,20fd0 <alt_up_sd_card_read+0x360>
    {
        if (active_files[file_handle].in_use)
   20ca4:	e0ffff0f 	ldh	r3,-4(fp)
   20ca8:	00800174 	movhi	r2,5
   20cac:	10bce604 	addi	r2,r2,-3176
   20cb0:	180691ba 	slli	r3,r3,6
   20cb4:	18c00f04 	addi	r3,r3,60
   20cb8:	10c5883a 	add	r2,r2,r3
   20cbc:	10800017 	ldw	r2,0(r2)
   20cc0:	1000c326 	beq	r2,zero,20fd0 <alt_up_sd_card_read+0x360>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   20cc4:	e0ffff0f 	ldh	r3,-4(fp)
   20cc8:	00800174 	movhi	r2,5
   20ccc:	10bce604 	addi	r2,r2,-3176
   20cd0:	180691ba 	slli	r3,r3,6
   20cd4:	18c00904 	addi	r3,r3,36
   20cd8:	10c5883a 	add	r2,r2,r3
   20cdc:	10c00017 	ldw	r3,0(r2)
   20ce0:	e13fff0f 	ldh	r4,-4(fp)
   20ce4:	00800174 	movhi	r2,5
   20ce8:	10bce604 	addi	r2,r2,-3176
   20cec:	200891ba 	slli	r4,r4,6
   20cf0:	21000604 	addi	r4,r4,24
   20cf4:	1105883a 	add	r2,r2,r4
   20cf8:	10800017 	ldw	r2,0(r2)
   20cfc:	1880b42e 	bgeu	r3,r2,20fd0 <alt_up_sd_card_read+0x360>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   20d00:	00800174 	movhi	r2,5
   20d04:	10bcd104 	addi	r2,r2,-3260
   20d08:	10c01417 	ldw	r3,80(r2)
   20d0c:	e13fff0f 	ldh	r4,-4(fp)
   20d10:	00800174 	movhi	r2,5
   20d14:	10bce604 	addi	r2,r2,-3176
   20d18:	200891ba 	slli	r4,r4,6
   20d1c:	21000704 	addi	r4,r4,28
   20d20:	1105883a 	add	r2,r2,r4
   20d24:	10800017 	ldw	r2,0(r2)
   20d28:	113fff84 	addi	r4,r2,-2
   20d2c:	00800174 	movhi	r2,5
   20d30:	10bcd104 	addi	r2,r2,-3260
   20d34:	10800383 	ldbu	r2,14(r2)
   20d38:	10803fcc 	andi	r2,r2,255
   20d3c:	2085383a 	mul	r2,r4,r2
   20d40:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
   20d44:	e13fff0f 	ldh	r4,-4(fp)
   20d48:	00800174 	movhi	r2,5
   20d4c:	10bce604 	addi	r2,r2,-3176
   20d50:	200891ba 	slli	r4,r4,6
   20d54:	21000804 	addi	r4,r4,32
   20d58:	1105883a 	add	r2,r2,r4
   20d5c:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   20d60:	1885883a 	add	r2,r3,r2
   20d64:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
   20d68:	e0ffff0f 	ldh	r3,-4(fp)
   20d6c:	00800174 	movhi	r2,5
   20d70:	10bce604 	addi	r2,r2,-3176
   20d74:	180691ba 	slli	r3,r3,6
   20d78:	18c00904 	addi	r3,r3,36
   20d7c:	10c5883a 	add	r2,r2,r3
   20d80:	10800017 	ldw	r2,0(r2)
   20d84:	10006826 	beq	r2,zero,20f28 <alt_up_sd_card_read+0x2b8>
   20d88:	e0ffff0f 	ldh	r3,-4(fp)
   20d8c:	00800174 	movhi	r2,5
   20d90:	10bce604 	addi	r2,r2,-3176
   20d94:	180691ba 	slli	r3,r3,6
   20d98:	18c00904 	addi	r3,r3,36
   20d9c:	10c5883a 	add	r2,r2,r3
   20da0:	10800017 	ldw	r2,0(r2)
   20da4:	10807fcc 	andi	r2,r2,511
   20da8:	10005f1e 	bne	r2,zero,20f28 <alt_up_sd_card_read+0x2b8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   20dac:	e0ffff0f 	ldh	r3,-4(fp)
   20db0:	00800174 	movhi	r2,5
   20db4:	10bce604 	addi	r2,r2,-3176
   20db8:	180691ba 	slli	r3,r3,6
   20dbc:	18c00804 	addi	r3,r3,32
   20dc0:	10c5883a 	add	r2,r2,r3
   20dc4:	10c00017 	ldw	r3,0(r2)
   20dc8:	00800174 	movhi	r2,5
   20dcc:	10bcd104 	addi	r2,r2,-3260
   20dd0:	10800383 	ldbu	r2,14(r2)
   20dd4:	10803fcc 	andi	r2,r2,255
   20dd8:	10bfffc4 	addi	r2,r2,-1
   20ddc:	1880401e 	bne	r3,r2,20ee0 <alt_up_sd_card_read+0x270>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   20de0:	e0ffff0f 	ldh	r3,-4(fp)
   20de4:	00800174 	movhi	r2,5
   20de8:	10bce604 	addi	r2,r2,-3176
   20dec:	180691ba 	slli	r3,r3,6
   20df0:	18c00704 	addi	r3,r3,28
   20df4:	10c5883a 	add	r2,r2,r3
   20df8:	10c00017 	ldw	r3,0(r2)
   20dfc:	e0bffe04 	addi	r2,fp,-8
   20e00:	1809883a 	mov	r4,r3
   20e04:	100b883a 	mov	r5,r2
   20e08:	001d6f80 	call	1d6f8 <get_cluster_flag>
   20e0c:	10003226 	beq	r2,zero,20ed8 <alt_up_sd_card_read+0x268>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   20e10:	e0bffe0b 	ldhu	r2,-8(fp)
   20e14:	10bfffcc 	andi	r2,r2,65535
   20e18:	10fffe0c 	andi	r3,r2,65528
   20e1c:	00bffe14 	movui	r2,65528
   20e20:	1880021e 	bne	r3,r2,20e2c <alt_up_sd_card_read+0x1bc>
                            {
                                /* End of file */
                                return -1;
   20e24:	00bfffc4 	movi	r2,-1
   20e28:	00006a06 	br	20fd4 <alt_up_sd_card_read+0x364>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   20e2c:	e13fff0f 	ldh	r4,-4(fp)
   20e30:	e0bffe0b 	ldhu	r2,-8(fp)
   20e34:	10ffffcc 	andi	r3,r2,65535
   20e38:	00800174 	movhi	r2,5
   20e3c:	10bce604 	addi	r2,r2,-3176
   20e40:	200891ba 	slli	r4,r4,6
   20e44:	21000704 	addi	r4,r4,28
   20e48:	1105883a 	add	r2,r2,r4
   20e4c:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   20e50:	e0ffff0f 	ldh	r3,-4(fp)
   20e54:	00800174 	movhi	r2,5
   20e58:	10bce604 	addi	r2,r2,-3176
   20e5c:	180691ba 	slli	r3,r3,6
   20e60:	18c00804 	addi	r3,r3,32
   20e64:	10c5883a 	add	r2,r2,r3
   20e68:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   20e6c:	00800174 	movhi	r2,5
   20e70:	10bcd104 	addi	r2,r2,-3260
   20e74:	10c01417 	ldw	r3,80(r2)
   20e78:	e13fff0f 	ldh	r4,-4(fp)
   20e7c:	00800174 	movhi	r2,5
   20e80:	10bce604 	addi	r2,r2,-3176
   20e84:	200891ba 	slli	r4,r4,6
   20e88:	21000704 	addi	r4,r4,28
   20e8c:	1105883a 	add	r2,r2,r4
   20e90:	10800017 	ldw	r2,0(r2)
   20e94:	113fff84 	addi	r4,r2,-2
   20e98:	00800174 	movhi	r2,5
   20e9c:	10bcd104 	addi	r2,r2,-3260
   20ea0:	10800383 	ldbu	r2,14(r2)
   20ea4:	10803fcc 	andi	r2,r2,255
   20ea8:	2085383a 	mul	r2,r4,r2
   20eac:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   20eb0:	e13fff0f 	ldh	r4,-4(fp)
   20eb4:	00800174 	movhi	r2,5
   20eb8:	10bce604 	addi	r2,r2,-3176
   20ebc:	200891ba 	slli	r4,r4,6
   20ec0:	21000804 	addi	r4,r4,32
   20ec4:	1105883a 	add	r2,r2,r4
   20ec8:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   20ecc:	1885883a 	add	r2,r3,r2
   20ed0:	e0bffd15 	stw	r2,-12(fp)
   20ed4:	00001406 	br	20f28 <alt_up_sd_card_read+0x2b8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
   20ed8:	00bfff84 	movi	r2,-2
   20edc:	00003d06 	br	20fd4 <alt_up_sd_card_read+0x364>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   20ee0:	e13fff0f 	ldh	r4,-4(fp)
   20ee4:	e0ffff0f 	ldh	r3,-4(fp)
   20ee8:	00800174 	movhi	r2,5
   20eec:	10bce604 	addi	r2,r2,-3176
   20ef0:	180691ba 	slli	r3,r3,6
   20ef4:	18c00804 	addi	r3,r3,32
   20ef8:	10c5883a 	add	r2,r2,r3
   20efc:	10800017 	ldw	r2,0(r2)
   20f00:	10c00044 	addi	r3,r2,1
   20f04:	00800174 	movhi	r2,5
   20f08:	10bce604 	addi	r2,r2,-3176
   20f0c:	200891ba 	slli	r4,r4,6
   20f10:	21000804 	addi	r4,r4,32
   20f14:	1105883a 	add	r2,r2,r4
   20f18:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
   20f1c:	e0bffd17 	ldw	r2,-12(fp)
   20f20:	10800044 	addi	r2,r2,1
   20f24:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
   20f28:	d0e85817 	ldw	r3,-24224(gp)
   20f2c:	e0bffd17 	ldw	r2,-12(fp)
   20f30:	1885883a 	add	r2,r3,r2
   20f34:	1007883a 	mov	r3,r2
   20f38:	d0a85c17 	ldw	r2,-24208(gp)
   20f3c:	18800726 	beq	r3,r2,20f5c <alt_up_sd_card_read+0x2ec>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   20f40:	d0a85817 	ldw	r2,-24224(gp)
   20f44:	e13ffd17 	ldw	r4,-12(fp)
   20f48:	100b883a 	mov	r5,r2
   20f4c:	001d6200 	call	1d620 <Read_Sector_Data>
   20f50:	1000021e 	bne	r2,zero,20f5c <alt_up_sd_card_read+0x2ec>
                    {
						return -2;
   20f54:	00bfff84 	movi	r2,-2
   20f58:	00001e06 	br	20fd4 <alt_up_sd_card_read+0x364>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
   20f5c:	d0e85717 	ldw	r3,-24228(gp)
   20f60:	e13fff0f 	ldh	r4,-4(fp)
   20f64:	00800174 	movhi	r2,5
   20f68:	10bce604 	addi	r2,r2,-3176
   20f6c:	200891ba 	slli	r4,r4,6
   20f70:	21000904 	addi	r4,r4,36
   20f74:	1105883a 	add	r2,r2,r4
   20f78:	10800017 	ldw	r2,0(r2)
   20f7c:	10807fcc 	andi	r2,r2,511
   20f80:	1885883a 	add	r2,r3,r2
   20f84:	10800023 	ldbuio	r2,0(r2)
   20f88:	10803fcc 	andi	r2,r2,255
   20f8c:	10803fcc 	andi	r2,r2,255
   20f90:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   20f94:	e13fff0f 	ldh	r4,-4(fp)
   20f98:	e0ffff0f 	ldh	r3,-4(fp)
   20f9c:	00800174 	movhi	r2,5
   20fa0:	10bce604 	addi	r2,r2,-3176
   20fa4:	180691ba 	slli	r3,r3,6
   20fa8:	18c00904 	addi	r3,r3,36
   20fac:	10c5883a 	add	r2,r2,r3
   20fb0:	10800017 	ldw	r2,0(r2)
   20fb4:	10c00044 	addi	r3,r2,1
   20fb8:	00800174 	movhi	r2,5
   20fbc:	10bce604 	addi	r2,r2,-3176
   20fc0:	200891ba 	slli	r4,r4,6
   20fc4:	21000904 	addi	r4,r4,36
   20fc8:	1105883a 	add	r2,r2,r4
   20fcc:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
   20fd0:	e0bffc0b 	ldhu	r2,-16(fp)
}
   20fd4:	e037883a 	mov	sp,fp
   20fd8:	dfc00117 	ldw	ra,4(sp)
   20fdc:	df000017 	ldw	fp,0(sp)
   20fe0:	dec00204 	addi	sp,sp,8
   20fe4:	f800283a 	ret

00020fe8 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
   20fe8:	defff704 	addi	sp,sp,-36
   20fec:	dfc00815 	stw	ra,32(sp)
   20ff0:	df000715 	stw	fp,28(sp)
   20ff4:	df000704 	addi	fp,sp,28
   20ff8:	2007883a 	mov	r3,r4
   20ffc:	2805883a 	mov	r2,r5
   21000:	e0fffe0d 	sth	r3,-8(fp)
   21004:	e0bfff05 	stb	r2,-4(fp)
    bool result = false;
   21008:	e03ff915 	stw	zero,-28(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   2100c:	e0bffe0f 	ldh	r2,-8(fp)
   21010:	1001b716 	blt	r2,zero,216f0 <alt_up_sd_card_write+0x708>
   21014:	e0bffe0f 	ldh	r2,-8(fp)
   21018:	10800508 	cmpgei	r2,r2,20
   2101c:	1001b41e 	bne	r2,zero,216f0 <alt_up_sd_card_write+0x708>
    {
        if (active_files[file_handle].in_use)
   21020:	e0fffe0f 	ldh	r3,-8(fp)
   21024:	00800174 	movhi	r2,5
   21028:	10bce604 	addi	r2,r2,-3176
   2102c:	180691ba 	slli	r3,r3,6
   21030:	18c00f04 	addi	r3,r3,60
   21034:	10c5883a 	add	r2,r2,r3
   21038:	10800017 	ldw	r2,0(r2)
   2103c:	1001ac26 	beq	r2,zero,216f0 <alt_up_sd_card_write+0x708>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   21040:	00800174 	movhi	r2,5
   21044:	10bcd104 	addi	r2,r2,-3260
   21048:	10c01417 	ldw	r3,80(r2)
   2104c:	e13ffe0f 	ldh	r4,-8(fp)
   21050:	00800174 	movhi	r2,5
   21054:	10bce604 	addi	r2,r2,-3176
   21058:	200891ba 	slli	r4,r4,6
   2105c:	21000704 	addi	r4,r4,28
   21060:	1105883a 	add	r2,r2,r4
   21064:	10800017 	ldw	r2,0(r2)
   21068:	113fff84 	addi	r4,r2,-2
   2106c:	00800174 	movhi	r2,5
   21070:	10bcd104 	addi	r2,r2,-3260
   21074:	10800383 	ldbu	r2,14(r2)
   21078:	10803fcc 	andi	r2,r2,255
   2107c:	2085383a 	mul	r2,r4,r2
   21080:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
   21084:	e13ffe0f 	ldh	r4,-8(fp)
   21088:	00800174 	movhi	r2,5
   2108c:	10bce604 	addi	r2,r2,-3176
   21090:	200891ba 	slli	r4,r4,6
   21094:	21000804 	addi	r4,r4,32
   21098:	1105883a 	add	r2,r2,r4
   2109c:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   210a0:	1885883a 	add	r2,r3,r2
   210a4:	e0bffa15 	stw	r2,-24(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
   210a8:	e0fffe0f 	ldh	r3,-8(fp)
   210ac:	00800174 	movhi	r2,5
   210b0:	10bce604 	addi	r2,r2,-3176
   210b4:	180691ba 	slli	r3,r3,6
   210b8:	18c00904 	addi	r3,r3,36
   210bc:	10c5883a 	add	r2,r2,r3
   210c0:	10c00017 	ldw	r3,0(r2)
   210c4:	00800174 	movhi	r2,5
   210c8:	10bcd104 	addi	r2,r2,-3260
   210cc:	1080030b 	ldhu	r2,12(r2)
   210d0:	10bfffcc 	andi	r2,r2,65535
   210d4:	1889203a 	divu	r4,r3,r2
   210d8:	2085383a 	mul	r2,r4,r2
   210dc:	1885c83a 	sub	r2,r3,r2
   210e0:	e0bffb0d 	sth	r2,-20(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   210e4:	e0fffe0f 	ldh	r3,-8(fp)
   210e8:	00800174 	movhi	r2,5
   210ec:	10bce604 	addi	r2,r2,-3176
   210f0:	180691ba 	slli	r3,r3,6
   210f4:	18c00904 	addi	r3,r3,36
   210f8:	10c5883a 	add	r2,r2,r3
   210fc:	10c00017 	ldw	r3,0(r2)
   21100:	e13ffe0f 	ldh	r4,-8(fp)
   21104:	00800174 	movhi	r2,5
   21108:	10bce604 	addi	r2,r2,-3176
   2110c:	200891ba 	slli	r4,r4,6
   21110:	21000604 	addi	r4,r4,24
   21114:	1105883a 	add	r2,r2,r4
   21118:	10800017 	ldw	r2,0(r2)
   2111c:	1880a72e 	bgeu	r3,r2,213bc <alt_up_sd_card_write+0x3d4>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   21120:	e0fffe0f 	ldh	r3,-8(fp)
   21124:	00800174 	movhi	r2,5
   21128:	10bce604 	addi	r2,r2,-3176
   2112c:	180691ba 	slli	r3,r3,6
   21130:	18c00904 	addi	r3,r3,36
   21134:	10c5883a 	add	r2,r2,r3
   21138:	10800017 	ldw	r2,0(r2)
   2113c:	10006126 	beq	r2,zero,212c4 <alt_up_sd_card_write+0x2dc>
   21140:	e0bffb0f 	ldh	r2,-20(fp)
   21144:	10005f1e 	bne	r2,zero,212c4 <alt_up_sd_card_write+0x2dc>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   21148:	e0fffe0f 	ldh	r3,-8(fp)
   2114c:	00800174 	movhi	r2,5
   21150:	10bce604 	addi	r2,r2,-3176
   21154:	180691ba 	slli	r3,r3,6
   21158:	18c00804 	addi	r3,r3,32
   2115c:	10c5883a 	add	r2,r2,r3
   21160:	10c00017 	ldw	r3,0(r2)
   21164:	00800174 	movhi	r2,5
   21168:	10bcd104 	addi	r2,r2,-3260
   2116c:	10800383 	ldbu	r2,14(r2)
   21170:	10803fcc 	andi	r2,r2,255
   21174:	10bfffc4 	addi	r2,r2,-1
   21178:	18803e1e 	bne	r3,r2,21274 <alt_up_sd_card_write+0x28c>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   2117c:	e0fffe0f 	ldh	r3,-8(fp)
   21180:	00800174 	movhi	r2,5
   21184:	10bce604 	addi	r2,r2,-3176
   21188:	180691ba 	slli	r3,r3,6
   2118c:	18c00704 	addi	r3,r3,28
   21190:	10c5883a 	add	r2,r2,r3
   21194:	10c00017 	ldw	r3,0(r2)
   21198:	e0bffb84 	addi	r2,fp,-18
   2119c:	1809883a 	mov	r4,r3
   211a0:	100b883a 	mov	r5,r2
   211a4:	001d6f80 	call	1d6f8 <get_cluster_flag>
   211a8:	10003026 	beq	r2,zero,2126c <alt_up_sd_card_write+0x284>
                        {
                            if (next_cluster < 0x0000fff8)
   211ac:	e0bffb8b 	ldhu	r2,-18(fp)
   211b0:	10bfffcc 	andi	r2,r2,65535
   211b4:	10bffe28 	cmpgeui	r2,r2,65528
   211b8:	10002b1e 	bne	r2,zero,21268 <alt_up_sd_card_write+0x280>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   211bc:	e13ffe0f 	ldh	r4,-8(fp)
   211c0:	e0bffb8b 	ldhu	r2,-18(fp)
   211c4:	10ffffcc 	andi	r3,r2,65535
   211c8:	00800174 	movhi	r2,5
   211cc:	10bce604 	addi	r2,r2,-3176
   211d0:	200891ba 	slli	r4,r4,6
   211d4:	21000704 	addi	r4,r4,28
   211d8:	1105883a 	add	r2,r2,r4
   211dc:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   211e0:	e0fffe0f 	ldh	r3,-8(fp)
   211e4:	00800174 	movhi	r2,5
   211e8:	10bce604 	addi	r2,r2,-3176
   211ec:	180691ba 	slli	r3,r3,6
   211f0:	18c00804 	addi	r3,r3,32
   211f4:	10c5883a 	add	r2,r2,r3
   211f8:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   211fc:	00800174 	movhi	r2,5
   21200:	10bcd104 	addi	r2,r2,-3260
   21204:	10c01417 	ldw	r3,80(r2)
   21208:	e13ffe0f 	ldh	r4,-8(fp)
   2120c:	00800174 	movhi	r2,5
   21210:	10bce604 	addi	r2,r2,-3176
   21214:	200891ba 	slli	r4,r4,6
   21218:	21000704 	addi	r4,r4,28
   2121c:	1105883a 	add	r2,r2,r4
   21220:	10800017 	ldw	r2,0(r2)
   21224:	113fff84 	addi	r4,r2,-2
   21228:	00800174 	movhi	r2,5
   2122c:	10bcd104 	addi	r2,r2,-3260
   21230:	10800383 	ldbu	r2,14(r2)
   21234:	10803fcc 	andi	r2,r2,255
   21238:	2085383a 	mul	r2,r4,r2
   2123c:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   21240:	e13ffe0f 	ldh	r4,-8(fp)
   21244:	00800174 	movhi	r2,5
   21248:	10bce604 	addi	r2,r2,-3176
   2124c:	200891ba 	slli	r4,r4,6
   21250:	21000804 	addi	r4,r4,32
   21254:	1105883a 	add	r2,r2,r4
   21258:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   2125c:	1885883a 	add	r2,r3,r2
   21260:	e0bffa15 	stw	r2,-24(fp)
   21264:	00001606 	br	212c0 <alt_up_sd_card_write+0x2d8>
   21268:	00001506 	br	212c0 <alt_up_sd_card_write+0x2d8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
   2126c:	0005883a 	mov	r2,zero
   21270:	00012006 	br	216f4 <alt_up_sd_card_write+0x70c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   21274:	e13ffe0f 	ldh	r4,-8(fp)
   21278:	e0fffe0f 	ldh	r3,-8(fp)
   2127c:	00800174 	movhi	r2,5
   21280:	10bce604 	addi	r2,r2,-3176
   21284:	180691ba 	slli	r3,r3,6
   21288:	18c00804 	addi	r3,r3,32
   2128c:	10c5883a 	add	r2,r2,r3
   21290:	10800017 	ldw	r2,0(r2)
   21294:	10c00044 	addi	r3,r2,1
   21298:	00800174 	movhi	r2,5
   2129c:	10bce604 	addi	r2,r2,-3176
   212a0:	200891ba 	slli	r4,r4,6
   212a4:	21000804 	addi	r4,r4,32
   212a8:	1105883a 	add	r2,r2,r4
   212ac:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
   212b0:	e0bffa17 	ldw	r2,-24(fp)
   212b4:	10800044 	addi	r2,r2,1
   212b8:	e0bffa15 	stw	r2,-24(fp)
			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   212bc:	00003e06 	br	213b8 <alt_up_sd_card_write+0x3d0>
   212c0:	00003d06 	br	213b8 <alt_up_sd_card_write+0x3d0>
                        data_sector = data_sector + 1;
                    }
                }else{
                	// Go to the next cluster.
					unsigned short int next_cluster;
					if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   212c4:	e0fffe0f 	ldh	r3,-8(fp)
   212c8:	00800174 	movhi	r2,5
   212cc:	10bce604 	addi	r2,r2,-3176
   212d0:	180691ba 	slli	r3,r3,6
   212d4:	18c00704 	addi	r3,r3,28
   212d8:	10c5883a 	add	r2,r2,r3
   212dc:	10c00017 	ldw	r3,0(r2)
   212e0:	e0bffc04 	addi	r2,fp,-16
   212e4:	1809883a 	mov	r4,r3
   212e8:	100b883a 	mov	r5,r2
   212ec:	001d6f80 	call	1d6f8 <get_cluster_flag>
   212f0:	10002f26 	beq	r2,zero,213b0 <alt_up_sd_card_write+0x3c8>
					{
						if (next_cluster < 0x0000fff8)
   212f4:	e0bffc0b 	ldhu	r2,-16(fp)
   212f8:	10bfffcc 	andi	r2,r2,65535
   212fc:	10bffe28 	cmpgeui	r2,r2,65528
   21300:	10002d1e 	bne	r2,zero,213b8 <alt_up_sd_card_write+0x3d0>
						{
							active_files[file_handle].current_cluster_index = next_cluster;
   21304:	e13ffe0f 	ldh	r4,-8(fp)
   21308:	e0bffc0b 	ldhu	r2,-16(fp)
   2130c:	10ffffcc 	andi	r3,r2,65535
   21310:	00800174 	movhi	r2,5
   21314:	10bce604 	addi	r2,r2,-3176
   21318:	200891ba 	slli	r4,r4,6
   2131c:	21000704 	addi	r4,r4,28
   21320:	1105883a 	add	r2,r2,r4
   21324:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
   21328:	e0fffe0f 	ldh	r3,-8(fp)
   2132c:	00800174 	movhi	r2,5
   21330:	10bce604 	addi	r2,r2,-3176
   21334:	180691ba 	slli	r3,r3,6
   21338:	18c00804 	addi	r3,r3,32
   2133c:	10c5883a 	add	r2,r2,r3
   21340:	10000015 	stw	zero,0(r2)
							data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   21344:	00800174 	movhi	r2,5
   21348:	10bcd104 	addi	r2,r2,-3260
   2134c:	10c01417 	ldw	r3,80(r2)
   21350:	e13ffe0f 	ldh	r4,-8(fp)
   21354:	00800174 	movhi	r2,5
   21358:	10bce604 	addi	r2,r2,-3176
   2135c:	200891ba 	slli	r4,r4,6
   21360:	21000704 	addi	r4,r4,28
   21364:	1105883a 	add	r2,r2,r4
   21368:	10800017 	ldw	r2,0(r2)
   2136c:	113fff84 	addi	r4,r2,-2
   21370:	00800174 	movhi	r2,5
   21374:	10bcd104 	addi	r2,r2,-3260
   21378:	10800383 	ldbu	r2,14(r2)
   2137c:	10803fcc 	andi	r2,r2,255
   21380:	2085383a 	mul	r2,r4,r2
   21384:	1887883a 	add	r3,r3,r2
									active_files[file_handle].current_sector_in_cluster;
   21388:	e13ffe0f 	ldh	r4,-8(fp)
   2138c:	00800174 	movhi	r2,5
   21390:	10bce604 	addi	r2,r2,-3176
   21394:	200891ba 	slli	r4,r4,6
   21398:	21000804 	addi	r4,r4,32
   2139c:	1105883a 	add	r2,r2,r4
   213a0:	10800017 	ldw	r2,0(r2)
					{
						if (next_cluster < 0x0000fff8)
						{
							active_files[file_handle].current_cluster_index = next_cluster;
							active_files[file_handle].current_sector_in_cluster = 0;
							data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   213a4:	1885883a 	add	r2,r3,r2
   213a8:	e0bffa15 	stw	r2,-24(fp)
   213ac:	00008506 	br	215c4 <alt_up_sd_card_write+0x5dc>
									active_files[file_handle].current_sector_in_cluster;
						}
					}
					else
					{
						return false;
   213b0:	0005883a 	mov	r2,zero
   213b4:	0000cf06 	br	216f4 <alt_up_sd_card_write+0x70c>
   213b8:	00008206 	br	215c4 <alt_up_sd_card_write+0x5dc>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   213bc:	e0fffe0f 	ldh	r3,-8(fp)
   213c0:	00800174 	movhi	r2,5
   213c4:	10bce604 	addi	r2,r2,-3176
   213c8:	180691ba 	slli	r3,r3,6
   213cc:	18c00904 	addi	r3,r3,36
   213d0:	10c5883a 	add	r2,r2,r3
   213d4:	10800017 	ldw	r2,0(r2)
   213d8:	10007a26 	beq	r2,zero,215c4 <alt_up_sd_card_write+0x5dc>
   213dc:	e0bffb0f 	ldh	r2,-20(fp)
   213e0:	1000781e 	bne	r2,zero,215c4 <alt_up_sd_card_write+0x5dc>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   213e4:	e0fffe0f 	ldh	r3,-8(fp)
   213e8:	00800174 	movhi	r2,5
   213ec:	10bce604 	addi	r2,r2,-3176
   213f0:	180691ba 	slli	r3,r3,6
   213f4:	18c00804 	addi	r3,r3,32
   213f8:	10c5883a 	add	r2,r2,r3
   213fc:	10c00017 	ldw	r3,0(r2)
   21400:	00800174 	movhi	r2,5
   21404:	10bcd104 	addi	r2,r2,-3260
   21408:	10800383 	ldbu	r2,14(r2)
   2140c:	10803fcc 	andi	r2,r2,255
   21410:	10bfffc4 	addi	r2,r2,-1
   21414:	18803e1e 	bne	r3,r2,21510 <alt_up_sd_card_write+0x528>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
   21418:	e0bffd04 	addi	r2,fp,-12
   2141c:	1009883a 	mov	r4,r2
   21420:	001f6c80 	call	1f6c8 <find_first_empty_cluster>
   21424:	10003826 	beq	r2,zero,21508 <alt_up_sd_card_write+0x520>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
   21428:	e0fffe0f 	ldh	r3,-8(fp)
   2142c:	00800174 	movhi	r2,5
   21430:	10bce604 	addi	r2,r2,-3176
   21434:	180691ba 	slli	r3,r3,6
   21438:	18c00704 	addi	r3,r3,28
   2143c:	10c5883a 	add	r2,r2,r3
   21440:	10c00017 	ldw	r3,0(r2)
   21444:	e0bffd17 	ldw	r2,-12(fp)
   21448:	10bfffcc 	andi	r2,r2,65535
   2144c:	10a0001c 	xori	r2,r2,32768
   21450:	10a00004 	addi	r2,r2,-32768
   21454:	1809883a 	mov	r4,r3
   21458:	100b883a 	mov	r5,r2
   2145c:	01800044 	movi	r6,1
   21460:	001d7ac0 	call	1d7ac <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
   21464:	e0bffd17 	ldw	r2,-12(fp)
   21468:	1009883a 	mov	r4,r2
   2146c:	017fffc4 	movi	r5,-1
   21470:	01800044 	movi	r6,1
   21474:	001d7ac0 	call	1d7ac <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
   21478:	e0fffe0f 	ldh	r3,-8(fp)
   2147c:	00800174 	movhi	r2,5
   21480:	10bce604 	addi	r2,r2,-3176
   21484:	180691ba 	slli	r3,r3,6
   21488:	18c00704 	addi	r3,r3,28
   2148c:	10c5883a 	add	r2,r2,r3
   21490:	10c00017 	ldw	r3,0(r2)
   21494:	e0bffd17 	ldw	r2,-12(fp)
   21498:	10bfffcc 	andi	r2,r2,65535
   2149c:	10a0001c 	xori	r2,r2,32768
   214a0:	10a00004 	addi	r2,r2,-32768
   214a4:	1809883a 	mov	r4,r3
   214a8:	100b883a 	mov	r5,r2
   214ac:	000d883a 	mov	r6,zero
   214b0:	001d7ac0 	call	1d7ac <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
   214b4:	e0bffd17 	ldw	r2,-12(fp)
   214b8:	1009883a 	mov	r4,r2
   214bc:	017fffc4 	movi	r5,-1
   214c0:	000d883a 	mov	r6,zero
   214c4:	001d7ac0 	call	1d7ac <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
   214c8:	e13ffe0f 	ldh	r4,-8(fp)
   214cc:	e0fffd17 	ldw	r3,-12(fp)
   214d0:	00800174 	movhi	r2,5
   214d4:	10bce604 	addi	r2,r2,-3176
   214d8:	200891ba 	slli	r4,r4,6
   214dc:	21000704 	addi	r4,r4,28
   214e0:	1105883a 	add	r2,r2,r4
   214e4:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
   214e8:	e0fffe0f 	ldh	r3,-8(fp)
   214ec:	00800174 	movhi	r2,5
   214f0:	10bce604 	addi	r2,r2,-3176
   214f4:	180691ba 	slli	r3,r3,6
   214f8:	18c00804 	addi	r3,r3,32
   214fc:	10c5883a 	add	r2,r2,r3
   21500:	10000015 	stw	zero,0(r2)
   21504:	00001506 	br	2155c <alt_up_sd_card_write+0x574>
						}
						else
						{
							return false;
   21508:	0005883a 	mov	r2,zero
   2150c:	00007906 	br	216f4 <alt_up_sd_card_write+0x70c>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
   21510:	e13ffe0f 	ldh	r4,-8(fp)
   21514:	e0fffe0f 	ldh	r3,-8(fp)
   21518:	00800174 	movhi	r2,5
   2151c:	10bce604 	addi	r2,r2,-3176
   21520:	180691ba 	slli	r3,r3,6
   21524:	18c00904 	addi	r3,r3,36
   21528:	10c5883a 	add	r2,r2,r3
   2152c:	10c00017 	ldw	r3,0(r2)
   21530:	00800174 	movhi	r2,5
   21534:	10bcd104 	addi	r2,r2,-3260
   21538:	1080030b 	ldhu	r2,12(r2)
   2153c:	10bfffcc 	andi	r2,r2,65535
   21540:	1887203a 	divu	r3,r3,r2
   21544:	00800174 	movhi	r2,5
   21548:	10bce604 	addi	r2,r2,-3176
   2154c:	200891ba 	slli	r4,r4,6
   21550:	21000804 	addi	r4,r4,32
   21554:	1105883a 	add	r2,r2,r4
   21558:	10c00015 	stw	r3,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   2155c:	00800174 	movhi	r2,5
   21560:	10bcd104 	addi	r2,r2,-3260
   21564:	10c01417 	ldw	r3,80(r2)
   21568:	e13ffe0f 	ldh	r4,-8(fp)
   2156c:	00800174 	movhi	r2,5
   21570:	10bce604 	addi	r2,r2,-3176
   21574:	200891ba 	slli	r4,r4,6
   21578:	21000704 	addi	r4,r4,28
   2157c:	1105883a 	add	r2,r2,r4
   21580:	10800017 	ldw	r2,0(r2)
   21584:	113fff84 	addi	r4,r2,-2
   21588:	00800174 	movhi	r2,5
   2158c:	10bcd104 	addi	r2,r2,-3260
   21590:	10800383 	ldbu	r2,14(r2)
   21594:	10803fcc 	andi	r2,r2,255
   21598:	2085383a 	mul	r2,r4,r2
   2159c:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
   215a0:	e13ffe0f 	ldh	r4,-8(fp)
   215a4:	00800174 	movhi	r2,5
   215a8:	10bce604 	addi	r2,r2,-3176
   215ac:	200891ba 	slli	r4,r4,6
   215b0:	21000804 	addi	r4,r4,32
   215b4:	1105883a 	add	r2,r2,r4
   215b8:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   215bc:	1885883a 	add	r2,r3,r2
   215c0:	e0bffa15 	stw	r2,-24(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
   215c4:	d0e85817 	ldw	r3,-24224(gp)
   215c8:	e0bffa17 	ldw	r2,-24(fp)
   215cc:	1885883a 	add	r2,r3,r2
   215d0:	1007883a 	mov	r3,r2
   215d4:	d0a85c17 	ldw	r2,-24208(gp)
   215d8:	18800726 	beq	r3,r2,215f8 <alt_up_sd_card_write+0x610>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   215dc:	d0a85817 	ldw	r2,-24224(gp)
   215e0:	e13ffa17 	ldw	r4,-24(fp)
   215e4:	100b883a 	mov	r5,r2
   215e8:	001d6200 	call	1d620 <Read_Sector_Data>
   215ec:	1000021e 	bne	r2,zero,215f8 <alt_up_sd_card_write+0x610>
                {
					return false;
   215f0:	0005883a 	mov	r2,zero
   215f4:	00003f06 	br	216f4 <alt_up_sd_card_write+0x70c>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
   215f8:	d0e85717 	ldw	r3,-24228(gp)
   215fc:	e0bffb0f 	ldh	r2,-20(fp)
   21600:	1885883a 	add	r2,r3,r2
   21604:	e0ffff07 	ldb	r3,-4(fp)
   21608:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   2160c:	e13ffe0f 	ldh	r4,-8(fp)
   21610:	e0fffe0f 	ldh	r3,-8(fp)
   21614:	00800174 	movhi	r2,5
   21618:	10bce604 	addi	r2,r2,-3176
   2161c:	180691ba 	slli	r3,r3,6
   21620:	18c00904 	addi	r3,r3,36
   21624:	10c5883a 	add	r2,r2,r3
   21628:	10800017 	ldw	r2,0(r2)
   2162c:	10c00044 	addi	r3,r2,1
   21630:	00800174 	movhi	r2,5
   21634:	10bce604 	addi	r2,r2,-3176
   21638:	200891ba 	slli	r4,r4,6
   2163c:	21000904 	addi	r4,r4,36
   21640:	1105883a 	add	r2,r2,r4
   21644:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
   21648:	e0fffe0f 	ldh	r3,-8(fp)
   2164c:	00800174 	movhi	r2,5
   21650:	10bce604 	addi	r2,r2,-3176
   21654:	180691ba 	slli	r3,r3,6
   21658:	18c00904 	addi	r3,r3,36
   2165c:	10c5883a 	add	r2,r2,r3
   21660:	10c00017 	ldw	r3,0(r2)
   21664:	e13ffe0f 	ldh	r4,-8(fp)
   21668:	00800174 	movhi	r2,5
   2166c:	10bce604 	addi	r2,r2,-3176
   21670:	200891ba 	slli	r4,r4,6
   21674:	21000604 	addi	r4,r4,24
   21678:	1105883a 	add	r2,r2,r4
   2167c:	10800017 	ldw	r2,0(r2)
   21680:	18801736 	bltu	r3,r2,216e0 <alt_up_sd_card_write+0x6f8>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
   21684:	e13ffe0f 	ldh	r4,-8(fp)
   21688:	e0fffe0f 	ldh	r3,-8(fp)
   2168c:	00800174 	movhi	r2,5
   21690:	10bce604 	addi	r2,r2,-3176
   21694:	180691ba 	slli	r3,r3,6
   21698:	18c00604 	addi	r3,r3,24
   2169c:	10c5883a 	add	r2,r2,r3
   216a0:	10800017 	ldw	r2,0(r2)
   216a4:	10c00044 	addi	r3,r2,1
   216a8:	00800174 	movhi	r2,5
   216ac:	10bce604 	addi	r2,r2,-3176
   216b0:	200891ba 	slli	r4,r4,6
   216b4:	21000604 	addi	r4,r4,24
   216b8:	1105883a 	add	r2,r2,r4
   216bc:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
   216c0:	e0fffe0f 	ldh	r3,-8(fp)
   216c4:	00800174 	movhi	r2,5
   216c8:	10bce604 	addi	r2,r2,-3176
   216cc:	180691ba 	slli	r3,r3,6
   216d0:	18c00e04 	addi	r3,r3,56
   216d4:	10c5883a 	add	r2,r2,r3
   216d8:	00c00044 	movi	r3,1
   216dc:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
   216e0:	00800044 	movi	r2,1
   216e4:	d0a85b15 	stw	r2,-24212(gp)
			result = true;
   216e8:	00800044 	movi	r2,1
   216ec:	e0bff915 	stw	r2,-28(fp)
		}
    }
    
    return result;
   216f0:	e0bff917 	ldw	r2,-28(fp)
}
   216f4:	e037883a 	mov	sp,fp
   216f8:	dfc00117 	ldw	ra,4(sp)
   216fc:	df000017 	ldw	fp,0(sp)
   21700:	dec00204 	addi	sp,sp,8
   21704:	f800283a 	ret

00021708 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
   21708:	defffb04 	addi	sp,sp,-20
   2170c:	dfc00415 	stw	ra,16(sp)
   21710:	df000315 	stw	fp,12(sp)
   21714:	df000304 	addi	fp,sp,12
   21718:	2005883a 	mov	r2,r4
   2171c:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
   21720:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   21724:	00202340 	call	20234 <alt_up_sd_card_is_Present>
   21728:	10006026 	beq	r2,zero,218ac <alt_up_sd_card_fclose+0x1a4>
   2172c:	d0a85117 	ldw	r2,-24252(gp)
   21730:	10005e26 	beq	r2,zero,218ac <alt_up_sd_card_fclose+0x1a4>
    {
        if (active_files[file_handle].in_use) 
   21734:	e0ffff0f 	ldh	r3,-4(fp)
   21738:	00800174 	movhi	r2,5
   2173c:	10bce604 	addi	r2,r2,-3176
   21740:	180691ba 	slli	r3,r3,6
   21744:	18c00f04 	addi	r3,r3,60
   21748:	10c5883a 	add	r2,r2,r3
   2174c:	10800017 	ldw	r2,0(r2)
   21750:	10005626 	beq	r2,zero,218ac <alt_up_sd_card_fclose+0x1a4>
        {
			if (active_files[file_handle].modified)
   21754:	e0ffff0f 	ldh	r3,-4(fp)
   21758:	00800174 	movhi	r2,5
   2175c:	10bce604 	addi	r2,r2,-3176
   21760:	180691ba 	slli	r3,r3,6
   21764:	18c00e04 	addi	r3,r3,56
   21768:	10c5883a 	add	r2,r2,r3
   2176c:	10800017 	ldw	r2,0(r2)
   21770:	10004526 	beq	r2,zero,21888 <alt_up_sd_card_fclose+0x180>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
   21774:	e0ffff0f 	ldh	r3,-4(fp)
   21778:	00800174 	movhi	r2,5
   2177c:	10bce604 	addi	r2,r2,-3176
   21780:	180691ba 	slli	r3,r3,6
   21784:	18c00b04 	addi	r3,r3,44
   21788:	10c5883a 	add	r2,r2,r3
   2178c:	10800017 	ldw	r2,0(r2)
   21790:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
   21794:	e0ffff0f 	ldh	r3,-4(fp)
   21798:	00800174 	movhi	r2,5
   2179c:	10bce604 	addi	r2,r2,-3176
   217a0:	180691ba 	slli	r3,r3,6
   217a4:	18c00a04 	addi	r3,r3,40
   217a8:	10c5883a 	add	r2,r2,r3
   217ac:	10800017 	ldw	r2,0(r2)
   217b0:	1000071e 	bne	r2,zero,217d0 <alt_up_sd_card_fclose+0xc8>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
   217b4:	00800174 	movhi	r2,5
   217b8:	10bcd104 	addi	r2,r2,-3260
   217bc:	10801317 	ldw	r2,76(r2)
   217c0:	e0fffe17 	ldw	r3,-8(fp)
   217c4:	1885883a 	add	r2,r3,r2
   217c8:	e0bffe15 	stw	r2,-8(fp)
   217cc:	00001406 	br	21820 <alt_up_sd_card_fclose+0x118>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   217d0:	00800174 	movhi	r2,5
   217d4:	10bcd104 	addi	r2,r2,-3260
   217d8:	10c01417 	ldw	r3,80(r2)
   217dc:	e0bffe17 	ldw	r2,-8(fp)
   217e0:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
   217e4:	e13fff0f 	ldh	r4,-4(fp)
   217e8:	00800174 	movhi	r2,5
   217ec:	10bce604 	addi	r2,r2,-3176
   217f0:	200891ba 	slli	r4,r4,6
   217f4:	21000a04 	addi	r4,r4,40
   217f8:	1105883a 	add	r2,r2,r4
   217fc:	10800017 	ldw	r2,0(r2)
   21800:	113fff84 	addi	r4,r2,-2
   21804:	00800174 	movhi	r2,5
   21808:	10bcd104 	addi	r2,r2,-3260
   2180c:	10800383 	ldbu	r2,14(r2)
   21810:	10803fcc 	andi	r2,r2,255
   21814:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   21818:	1885883a 	add	r2,r3,r2
   2181c:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
   21820:	e0fffe17 	ldw	r3,-8(fp)
   21824:	d0a85817 	ldw	r2,-24224(gp)
   21828:	1809883a 	mov	r4,r3
   2182c:	100b883a 	mov	r5,r2
   21830:	001d6200 	call	1d620 <Read_Sector_Data>
   21834:	10001426 	beq	r2,zero,21888 <alt_up_sd_card_fclose+0x180>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
   21838:	e0ffff0f 	ldh	r3,-4(fp)
   2183c:	00800174 	movhi	r2,5
   21840:	10bce604 	addi	r2,r2,-3176
   21844:	180691ba 	slli	r3,r3,6
   21848:	18c00c04 	addi	r3,r3,48
   2184c:	10c5883a 	add	r2,r2,r3
   21850:	1080000b 	ldhu	r2,0(r2)
   21854:	113fffcc 	andi	r4,r2,65535
   21858:	2120001c 	xori	r4,r4,32768
   2185c:	21200004 	addi	r4,r4,-32768
   21860:	e0bfff0f 	ldh	r2,-4(fp)
   21864:	100691ba 	slli	r3,r2,6
   21868:	00800174 	movhi	r2,5
   2186c:	10bce604 	addi	r2,r2,-3176
   21870:	1885883a 	add	r2,r3,r2
   21874:	100b883a 	mov	r5,r2
   21878:	001dcb40 	call	1dcb4 <Write_File_Record_At_Offset>
   2187c:	10000226 	beq	r2,zero,21888 <alt_up_sd_card_fclose+0x180>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
   21880:	001d5d40 	call	1d5d4 <Save_Modified_Sector>
   21884:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
   21888:	e0ffff0f 	ldh	r3,-4(fp)
   2188c:	00800174 	movhi	r2,5
   21890:	10bce604 	addi	r2,r2,-3176
   21894:	180691ba 	slli	r3,r3,6
   21898:	18c00f04 	addi	r3,r3,60
   2189c:	10c5883a 	add	r2,r2,r3
   218a0:	10000015 	stw	zero,0(r2)
			result = true;
   218a4:	00800044 	movi	r2,1
   218a8:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
   218ac:	e0bffd17 	ldw	r2,-12(fp)
}
   218b0:	e037883a 	mov	sp,fp
   218b4:	dfc00117 	ldw	ra,4(sp)
   218b8:	df000017 	ldw	fp,0(sp)
   218bc:	dec00204 	addi	sp,sp,8
   218c0:	f800283a 	ret

000218c4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   218c4:	defffa04 	addi	sp,sp,-24
   218c8:	dfc00515 	stw	ra,20(sp)
   218cc:	df000415 	stw	fp,16(sp)
   218d0:	df000404 	addi	fp,sp,16
   218d4:	e13ffd15 	stw	r4,-12(fp)
   218d8:	e17ffe15 	stw	r5,-8(fp)
   218dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   218e0:	e0bffd17 	ldw	r2,-12(fp)
   218e4:	10800017 	ldw	r2,0(r2)
   218e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   218ec:	e0bffc17 	ldw	r2,-16(fp)
   218f0:	10c00a04 	addi	r3,r2,40
   218f4:	e0bffd17 	ldw	r2,-12(fp)
   218f8:	10800217 	ldw	r2,8(r2)
   218fc:	1809883a 	mov	r4,r3
   21900:	e17ffe17 	ldw	r5,-8(fp)
   21904:	e1bfff17 	ldw	r6,-4(fp)
   21908:	100f883a 	mov	r7,r2
   2190c:	00220740 	call	22074 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   21910:	e037883a 	mov	sp,fp
   21914:	dfc00117 	ldw	ra,4(sp)
   21918:	df000017 	ldw	fp,0(sp)
   2191c:	dec00204 	addi	sp,sp,8
   21920:	f800283a 	ret

00021924 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   21924:	defffa04 	addi	sp,sp,-24
   21928:	dfc00515 	stw	ra,20(sp)
   2192c:	df000415 	stw	fp,16(sp)
   21930:	df000404 	addi	fp,sp,16
   21934:	e13ffd15 	stw	r4,-12(fp)
   21938:	e17ffe15 	stw	r5,-8(fp)
   2193c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   21940:	e0bffd17 	ldw	r2,-12(fp)
   21944:	10800017 	ldw	r2,0(r2)
   21948:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2194c:	e0bffc17 	ldw	r2,-16(fp)
   21950:	10c00a04 	addi	r3,r2,40
   21954:	e0bffd17 	ldw	r2,-12(fp)
   21958:	10800217 	ldw	r2,8(r2)
   2195c:	1809883a 	mov	r4,r3
   21960:	e17ffe17 	ldw	r5,-8(fp)
   21964:	e1bfff17 	ldw	r6,-4(fp)
   21968:	100f883a 	mov	r7,r2
   2196c:	00223280 	call	22328 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   21970:	e037883a 	mov	sp,fp
   21974:	dfc00117 	ldw	ra,4(sp)
   21978:	df000017 	ldw	fp,0(sp)
   2197c:	dec00204 	addi	sp,sp,8
   21980:	f800283a 	ret

00021984 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   21984:	defffc04 	addi	sp,sp,-16
   21988:	dfc00315 	stw	ra,12(sp)
   2198c:	df000215 	stw	fp,8(sp)
   21990:	df000204 	addi	fp,sp,8
   21994:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   21998:	e0bfff17 	ldw	r2,-4(fp)
   2199c:	10800017 	ldw	r2,0(r2)
   219a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   219a4:	e0bffe17 	ldw	r2,-8(fp)
   219a8:	10c00a04 	addi	r3,r2,40
   219ac:	e0bfff17 	ldw	r2,-4(fp)
   219b0:	10800217 	ldw	r2,8(r2)
   219b4:	1809883a 	mov	r4,r3
   219b8:	100b883a 	mov	r5,r2
   219bc:	0021f200 	call	21f20 <altera_avalon_jtag_uart_close>
}
   219c0:	e037883a 	mov	sp,fp
   219c4:	dfc00117 	ldw	ra,4(sp)
   219c8:	df000017 	ldw	fp,0(sp)
   219cc:	dec00204 	addi	sp,sp,8
   219d0:	f800283a 	ret

000219d4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   219d4:	defffa04 	addi	sp,sp,-24
   219d8:	dfc00515 	stw	ra,20(sp)
   219dc:	df000415 	stw	fp,16(sp)
   219e0:	df000404 	addi	fp,sp,16
   219e4:	e13ffd15 	stw	r4,-12(fp)
   219e8:	e17ffe15 	stw	r5,-8(fp)
   219ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   219f0:	e0bffd17 	ldw	r2,-12(fp)
   219f4:	10800017 	ldw	r2,0(r2)
   219f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   219fc:	e0bffc17 	ldw	r2,-16(fp)
   21a00:	10800a04 	addi	r2,r2,40
   21a04:	1009883a 	mov	r4,r2
   21a08:	e17ffe17 	ldw	r5,-8(fp)
   21a0c:	e1bfff17 	ldw	r6,-4(fp)
   21a10:	0021f880 	call	21f88 <altera_avalon_jtag_uart_ioctl>
}
   21a14:	e037883a 	mov	sp,fp
   21a18:	dfc00117 	ldw	ra,4(sp)
   21a1c:	df000017 	ldw	fp,0(sp)
   21a20:	dec00204 	addi	sp,sp,8
   21a24:	f800283a 	ret

00021a28 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   21a28:	defff104 	addi	sp,sp,-60
   21a2c:	dfc00e15 	stw	ra,56(sp)
   21a30:	df000d15 	stw	fp,52(sp)
   21a34:	df000d04 	addi	fp,sp,52
   21a38:	e13ff915 	stw	r4,-28(fp)
   21a3c:	e17ffa15 	stw	r5,-24(fp)
   21a40:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   21a44:	e0bff917 	ldw	r2,-28(fp)
   21a48:	10800c04 	addi	r2,r2,48
   21a4c:	e0bff315 	stw	r2,-52(fp)
   21a50:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   21a54:	e0fff40b 	ldhu	r3,-48(fp)
   21a58:	e0bff884 	addi	r2,fp,-30
   21a5c:	1809883a 	mov	r4,r3
   21a60:	100b883a 	mov	r5,r2
   21a64:	0016d480 	call	16d48 <OSFlagCreate>
   21a68:	1007883a 	mov	r3,r2
   21a6c:	e0bff317 	ldw	r2,-52(fp)
   21a70:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   21a74:	e0bff917 	ldw	r2,-28(fp)
   21a78:	10800a04 	addi	r2,r2,40
   21a7c:	e0bff515 	stw	r2,-44(fp)
   21a80:	00800044 	movi	r2,1
   21a84:	e0bff60d 	sth	r2,-40(fp)
   21a88:	e0bff60b 	ldhu	r2,-40(fp)
   21a8c:	1009883a 	mov	r4,r2
   21a90:	001a8280 	call	1a828 <OSSemCreate>
   21a94:	1007883a 	mov	r3,r2
   21a98:	e0bff517 	ldw	r2,-44(fp)
   21a9c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   21aa0:	e0bff917 	ldw	r2,-28(fp)
   21aa4:	10800b04 	addi	r2,r2,44
   21aa8:	e0bff715 	stw	r2,-36(fp)
   21aac:	00800044 	movi	r2,1
   21ab0:	e0bff80d 	sth	r2,-32(fp)
   21ab4:	e0bff80b 	ldhu	r2,-32(fp)
   21ab8:	1009883a 	mov	r4,r2
   21abc:	001a8280 	call	1a828 <OSSemCreate>
   21ac0:	1007883a 	mov	r3,r2
   21ac4:	e0bff717 	ldw	r2,-36(fp)
   21ac8:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21acc:	e0bff917 	ldw	r2,-28(fp)
   21ad0:	00c00044 	movi	r3,1
   21ad4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   21ad8:	e0bff917 	ldw	r2,-28(fp)
   21adc:	10800017 	ldw	r2,0(r2)
   21ae0:	10800104 	addi	r2,r2,4
   21ae4:	1007883a 	mov	r3,r2
   21ae8:	e0bff917 	ldw	r2,-28(fp)
   21aec:	10800817 	ldw	r2,32(r2)
   21af0:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   21af4:	e0bffb17 	ldw	r2,-20(fp)
   21af8:	1009883a 	mov	r4,r2
   21afc:	e17ff917 	ldw	r5,-28(fp)
   21b00:	018000b4 	movhi	r6,2
   21b04:	3186da04 	addi	r6,r6,7016
   21b08:	00241a80 	call	241a8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   21b0c:	e0bff917 	ldw	r2,-28(fp)
   21b10:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   21b14:	e0bff917 	ldw	r2,-28(fp)
   21b18:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   21b1c:	008000f4 	movhi	r2,3
   21b20:	10a80204 	addi	r2,r2,-24568
   21b24:	10800017 	ldw	r2,0(r2)
   21b28:	1809883a 	mov	r4,r3
   21b2c:	100b883a 	mov	r5,r2
   21b30:	018000b4 	movhi	r6,2
   21b34:	31878404 	addi	r6,r6,7696
   21b38:	e1fff917 	ldw	r7,-28(fp)
   21b3c:	0023ca80 	call	23ca8 <alt_alarm_start>
   21b40:	1000040e 	bge	r2,zero,21b54 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   21b44:	e0fff917 	ldw	r3,-28(fp)
   21b48:	00a00034 	movhi	r2,32768
   21b4c:	10bfffc4 	addi	r2,r2,-1
   21b50:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   21b54:	e037883a 	mov	sp,fp
   21b58:	dfc00117 	ldw	ra,4(sp)
   21b5c:	df000017 	ldw	fp,0(sp)
   21b60:	dec00204 	addi	sp,sp,8
   21b64:	f800283a 	ret

00021b68 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   21b68:	defff104 	addi	sp,sp,-60
   21b6c:	dfc00e15 	stw	ra,56(sp)
   21b70:	df000d15 	stw	fp,52(sp)
   21b74:	df000d04 	addi	fp,sp,52
   21b78:	e13ffe15 	stw	r4,-8(fp)
   21b7c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   21b80:	e0bffe17 	ldw	r2,-8(fp)
   21b84:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   21b88:	e0bff517 	ldw	r2,-44(fp)
   21b8c:	10800017 	ldw	r2,0(r2)
   21b90:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21b94:	e0bff617 	ldw	r2,-40(fp)
   21b98:	10800104 	addi	r2,r2,4
   21b9c:	10800037 	ldwio	r2,0(r2)
   21ba0:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   21ba4:	e0bff717 	ldw	r2,-36(fp)
   21ba8:	1080c00c 	andi	r2,r2,768
   21bac:	1000011e 	bne	r2,zero,21bb4 <altera_avalon_jtag_uart_irq+0x4c>
      break;
   21bb0:	00009206 	br	21dfc <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   21bb4:	e0bff717 	ldw	r2,-36(fp)
   21bb8:	1080400c 	andi	r2,r2,256
   21bbc:	10004726 	beq	r2,zero,21cdc <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   21bc0:	00800074 	movhi	r2,1
   21bc4:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21bc8:	e0bff517 	ldw	r2,-44(fp)
   21bcc:	10800d17 	ldw	r2,52(r2)
   21bd0:	10800044 	addi	r2,r2,1
   21bd4:	1081ffcc 	andi	r2,r2,2047
   21bd8:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   21bdc:	e0bff517 	ldw	r2,-44(fp)
   21be0:	10c00e17 	ldw	r3,56(r2)
   21be4:	e0bff817 	ldw	r2,-32(fp)
   21be8:	1880011e 	bne	r3,r2,21bf0 <altera_avalon_jtag_uart_irq+0x88>
          break;
   21bec:	00002906 	br	21c94 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   21bf0:	e0bff617 	ldw	r2,-40(fp)
   21bf4:	10800037 	ldwio	r2,0(r2)
   21bf8:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   21bfc:	e0bff317 	ldw	r2,-52(fp)
   21c00:	10a0000c 	andi	r2,r2,32768
   21c04:	1000011e 	bne	r2,zero,21c0c <altera_avalon_jtag_uart_irq+0xa4>
          break;
   21c08:	00002206 	br	21c94 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   21c0c:	e0bff517 	ldw	r2,-44(fp)
   21c10:	10800d17 	ldw	r2,52(r2)
   21c14:	e0fff317 	ldw	r3,-52(fp)
   21c18:	1809883a 	mov	r4,r3
   21c1c:	e0fff517 	ldw	r3,-44(fp)
   21c20:	1885883a 	add	r2,r3,r2
   21c24:	10801104 	addi	r2,r2,68
   21c28:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21c2c:	e0bff517 	ldw	r2,-44(fp)
   21c30:	10800d17 	ldw	r2,52(r2)
   21c34:	10800044 	addi	r2,r2,1
   21c38:	10c1ffcc 	andi	r3,r2,2047
   21c3c:	e0bff517 	ldw	r2,-44(fp)
   21c40:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   21c44:	e0bff517 	ldw	r2,-44(fp)
   21c48:	10800c17 	ldw	r2,48(r2)
   21c4c:	e0bff915 	stw	r2,-28(fp)
   21c50:	00800044 	movi	r2,1
   21c54:	e0bffa0d 	sth	r2,-24(fp)
   21c58:	00800044 	movi	r2,1
   21c5c:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   21c60:	008000f4 	movhi	r2,3
   21c64:	10a7e044 	addi	r2,r2,-24703
   21c68:	10800003 	ldbu	r2,0(r2)
   21c6c:	10803fcc 	andi	r2,r2,255
   21c70:	103fd526 	beq	r2,zero,21bc8 <__alt_mem_Flash_flash_data+0xf4021bc8>
  {
    OSFlagPost (group, flags, opt, &err);
   21c74:	e17ffa0b 	ldhu	r5,-24(fp)
   21c78:	e0fffa83 	ldbu	r3,-22(fp)
   21c7c:	e0bffcc4 	addi	r2,fp,-13
   21c80:	e13ff917 	ldw	r4,-28(fp)
   21c84:	180d883a 	mov	r6,r3
   21c88:	100f883a 	mov	r7,r2
   21c8c:	00179b80 	call	179b8 <OSFlagPost>
      }
   21c90:	003fcd06 	br	21bc8 <__alt_mem_Flash_flash_data+0xf4021bc8>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   21c94:	e0bff317 	ldw	r2,-52(fp)
   21c98:	10bfffec 	andhi	r2,r2,65535
   21c9c:	10000f26 	beq	r2,zero,21cdc <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21ca0:	e0bff517 	ldw	r2,-44(fp)
   21ca4:	10c00817 	ldw	r3,32(r2)
   21ca8:	00bfff84 	movi	r2,-2
   21cac:	1886703a 	and	r3,r3,r2
   21cb0:	e0bff517 	ldw	r2,-44(fp)
   21cb4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   21cb8:	e0bff617 	ldw	r2,-40(fp)
   21cbc:	10800104 	addi	r2,r2,4
   21cc0:	1007883a 	mov	r3,r2
   21cc4:	e0bff517 	ldw	r2,-44(fp)
   21cc8:	10800817 	ldw	r2,32(r2)
   21ccc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21cd0:	e0bff617 	ldw	r2,-40(fp)
   21cd4:	10800104 	addi	r2,r2,4
   21cd8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   21cdc:	e0bff717 	ldw	r2,-36(fp)
   21ce0:	1080800c 	andi	r2,r2,512
   21ce4:	10004426 	beq	r2,zero,21df8 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   21ce8:	e0bff717 	ldw	r2,-36(fp)
   21cec:	1004d43a 	srli	r2,r2,16
   21cf0:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   21cf4:	00002706 	br	21d94 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   21cf8:	e0bff617 	ldw	r2,-40(fp)
   21cfc:	e0fff517 	ldw	r3,-44(fp)
   21d00:	18c01017 	ldw	r3,64(r3)
   21d04:	e13ff517 	ldw	r4,-44(fp)
   21d08:	20c7883a 	add	r3,r4,r3
   21d0c:	18c21104 	addi	r3,r3,2116
   21d10:	18c00003 	ldbu	r3,0(r3)
   21d14:	18c03fcc 	andi	r3,r3,255
   21d18:	18c0201c 	xori	r3,r3,128
   21d1c:	18ffe004 	addi	r3,r3,-128
   21d20:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21d24:	e0bff517 	ldw	r2,-44(fp)
   21d28:	10801017 	ldw	r2,64(r2)
   21d2c:	10800044 	addi	r2,r2,1
   21d30:	10c1ffcc 	andi	r3,r2,2047
   21d34:	e0bff517 	ldw	r2,-44(fp)
   21d38:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   21d3c:	e0bff517 	ldw	r2,-44(fp)
   21d40:	10800c17 	ldw	r2,48(r2)
   21d44:	e0bffb15 	stw	r2,-20(fp)
   21d48:	00800084 	movi	r2,2
   21d4c:	e0bffc0d 	sth	r2,-16(fp)
   21d50:	00800044 	movi	r2,1
   21d54:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   21d58:	008000f4 	movhi	r2,3
   21d5c:	10a7e044 	addi	r2,r2,-24703
   21d60:	10800003 	ldbu	r2,0(r2)
   21d64:	10803fcc 	andi	r2,r2,255
   21d68:	10000726 	beq	r2,zero,21d88 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   21d6c:	e17ffc0b 	ldhu	r5,-16(fp)
   21d70:	e0fffc83 	ldbu	r3,-14(fp)
   21d74:	e0bffd04 	addi	r2,fp,-12
   21d78:	e13ffb17 	ldw	r4,-20(fp)
   21d7c:	180d883a 	mov	r6,r3
   21d80:	100f883a 	mov	r7,r2
   21d84:	00179b80 	call	179b8 <OSFlagPost>

        space--;
   21d88:	e0bff417 	ldw	r2,-48(fp)
   21d8c:	10bfffc4 	addi	r2,r2,-1
   21d90:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   21d94:	e0bff417 	ldw	r2,-48(fp)
   21d98:	10000526 	beq	r2,zero,21db0 <altera_avalon_jtag_uart_irq+0x248>
   21d9c:	e0bff517 	ldw	r2,-44(fp)
   21da0:	10c01017 	ldw	r3,64(r2)
   21da4:	e0bff517 	ldw	r2,-44(fp)
   21da8:	10800f17 	ldw	r2,60(r2)
   21dac:	18bfd21e 	bne	r3,r2,21cf8 <__alt_mem_Flash_flash_data+0xf4021cf8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   21db0:	e0bff417 	ldw	r2,-48(fp)
   21db4:	10001026 	beq	r2,zero,21df8 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   21db8:	e0bff517 	ldw	r2,-44(fp)
   21dbc:	10c00817 	ldw	r3,32(r2)
   21dc0:	00bfff44 	movi	r2,-3
   21dc4:	1886703a 	and	r3,r3,r2
   21dc8:	e0bff517 	ldw	r2,-44(fp)
   21dcc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21dd0:	e0bff517 	ldw	r2,-44(fp)
   21dd4:	10800017 	ldw	r2,0(r2)
   21dd8:	10800104 	addi	r2,r2,4
   21ddc:	1007883a 	mov	r3,r2
   21de0:	e0bff517 	ldw	r2,-44(fp)
   21de4:	10800817 	ldw	r2,32(r2)
   21de8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21dec:	e0bff617 	ldw	r2,-40(fp)
   21df0:	10800104 	addi	r2,r2,4
   21df4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   21df8:	003f6606 	br	21b94 <__alt_mem_Flash_flash_data+0xf4021b94>
}
   21dfc:	e037883a 	mov	sp,fp
   21e00:	dfc00117 	ldw	ra,4(sp)
   21e04:	df000017 	ldw	fp,0(sp)
   21e08:	dec00204 	addi	sp,sp,8
   21e0c:	f800283a 	ret

00021e10 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   21e10:	defff904 	addi	sp,sp,-28
   21e14:	dfc00615 	stw	ra,24(sp)
   21e18:	df000515 	stw	fp,20(sp)
   21e1c:	df000504 	addi	fp,sp,20
   21e20:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   21e24:	e0bfff17 	ldw	r2,-4(fp)
   21e28:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   21e2c:	e0bffb17 	ldw	r2,-20(fp)
   21e30:	10800017 	ldw	r2,0(r2)
   21e34:	10800104 	addi	r2,r2,4
   21e38:	10800037 	ldwio	r2,0(r2)
   21e3c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   21e40:	e0bffc17 	ldw	r2,-16(fp)
   21e44:	1081000c 	andi	r2,r2,1024
   21e48:	10000b26 	beq	r2,zero,21e78 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   21e4c:	e0bffb17 	ldw	r2,-20(fp)
   21e50:	10800017 	ldw	r2,0(r2)
   21e54:	10800104 	addi	r2,r2,4
   21e58:	1007883a 	mov	r3,r2
   21e5c:	e0bffb17 	ldw	r2,-20(fp)
   21e60:	10800817 	ldw	r2,32(r2)
   21e64:	10810014 	ori	r2,r2,1024
   21e68:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   21e6c:	e0bffb17 	ldw	r2,-20(fp)
   21e70:	10000915 	stw	zero,36(r2)
   21e74:	00002206 	br	21f00 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   21e78:	e0bffb17 	ldw	r2,-20(fp)
   21e7c:	10c00917 	ldw	r3,36(r2)
   21e80:	00a00034 	movhi	r2,32768
   21e84:	10bfff04 	addi	r2,r2,-4
   21e88:	10c01d36 	bltu	r2,r3,21f00 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   21e8c:	e0bffb17 	ldw	r2,-20(fp)
   21e90:	10800917 	ldw	r2,36(r2)
   21e94:	10c00044 	addi	r3,r2,1
   21e98:	e0bffb17 	ldw	r2,-20(fp)
   21e9c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   21ea0:	e0bffb17 	ldw	r2,-20(fp)
   21ea4:	10c00917 	ldw	r3,36(r2)
   21ea8:	e0bffb17 	ldw	r2,-20(fp)
   21eac:	10800117 	ldw	r2,4(r2)
   21eb0:	18801336 	bltu	r3,r2,21f00 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   21eb4:	e0bffb17 	ldw	r2,-20(fp)
   21eb8:	10800c17 	ldw	r2,48(r2)
   21ebc:	e0bffd15 	stw	r2,-12(fp)
   21ec0:	00800104 	movi	r2,4
   21ec4:	e0bffe0d 	sth	r2,-8(fp)
   21ec8:	00800044 	movi	r2,1
   21ecc:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   21ed0:	008000f4 	movhi	r2,3
   21ed4:	10a7e044 	addi	r2,r2,-24703
   21ed8:	10800003 	ldbu	r2,0(r2)
   21edc:	10803fcc 	andi	r2,r2,255
   21ee0:	10000726 	beq	r2,zero,21f00 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   21ee4:	e17ffe0b 	ldhu	r5,-8(fp)
   21ee8:	e0fffe83 	ldbu	r3,-6(fp)
   21eec:	e0bffec4 	addi	r2,fp,-5
   21ef0:	e13ffd17 	ldw	r4,-12(fp)
   21ef4:	180d883a 	mov	r6,r3
   21ef8:	100f883a 	mov	r7,r2
   21efc:	00179b80 	call	179b8 <OSFlagPost>
   21f00:	008000f4 	movhi	r2,3
   21f04:	10a80204 	addi	r2,r2,-24568
   21f08:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   21f0c:	e037883a 	mov	sp,fp
   21f10:	dfc00117 	ldw	ra,4(sp)
   21f14:	df000017 	ldw	fp,0(sp)
   21f18:	dec00204 	addi	sp,sp,8
   21f1c:	f800283a 	ret

00021f20 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   21f20:	defffd04 	addi	sp,sp,-12
   21f24:	df000215 	stw	fp,8(sp)
   21f28:	df000204 	addi	fp,sp,8
   21f2c:	e13ffe15 	stw	r4,-8(fp)
   21f30:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   21f34:	00000506 	br	21f4c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   21f38:	e0bfff17 	ldw	r2,-4(fp)
   21f3c:	1090000c 	andi	r2,r2,16384
   21f40:	10000226 	beq	r2,zero,21f4c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   21f44:	00bffd44 	movi	r2,-11
   21f48:	00000b06 	br	21f78 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   21f4c:	e0bffe17 	ldw	r2,-8(fp)
   21f50:	10c01017 	ldw	r3,64(r2)
   21f54:	e0bffe17 	ldw	r2,-8(fp)
   21f58:	10800f17 	ldw	r2,60(r2)
   21f5c:	18800526 	beq	r3,r2,21f74 <altera_avalon_jtag_uart_close+0x54>
   21f60:	e0bffe17 	ldw	r2,-8(fp)
   21f64:	10c00917 	ldw	r3,36(r2)
   21f68:	e0bffe17 	ldw	r2,-8(fp)
   21f6c:	10800117 	ldw	r2,4(r2)
   21f70:	18bff136 	bltu	r3,r2,21f38 <__alt_mem_Flash_flash_data+0xf4021f38>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   21f74:	0005883a 	mov	r2,zero
}
   21f78:	e037883a 	mov	sp,fp
   21f7c:	df000017 	ldw	fp,0(sp)
   21f80:	dec00104 	addi	sp,sp,4
   21f84:	f800283a 	ret

00021f88 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   21f88:	defffa04 	addi	sp,sp,-24
   21f8c:	df000515 	stw	fp,20(sp)
   21f90:	df000504 	addi	fp,sp,20
   21f94:	e13ffd15 	stw	r4,-12(fp)
   21f98:	e17ffe15 	stw	r5,-8(fp)
   21f9c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   21fa0:	00bff9c4 	movi	r2,-25
   21fa4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   21fa8:	e0bffe17 	ldw	r2,-8(fp)
   21fac:	10da8060 	cmpeqi	r3,r2,27137
   21fb0:	1800031e 	bne	r3,zero,21fc0 <altera_avalon_jtag_uart_ioctl+0x38>
   21fb4:	109a80a0 	cmpeqi	r2,r2,27138
   21fb8:	1000191e 	bne	r2,zero,22020 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   21fbc:	00002806 	br	22060 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   21fc0:	e0bffd17 	ldw	r2,-12(fp)
   21fc4:	10c00117 	ldw	r3,4(r2)
   21fc8:	00a00034 	movhi	r2,32768
   21fcc:	10bfffc4 	addi	r2,r2,-1
   21fd0:	18801226 	beq	r3,r2,2201c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   21fd4:	e0bfff17 	ldw	r2,-4(fp)
   21fd8:	10800017 	ldw	r2,0(r2)
   21fdc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   21fe0:	e0bffc17 	ldw	r2,-16(fp)
   21fe4:	10800090 	cmplti	r2,r2,2
   21fe8:	1000061e 	bne	r2,zero,22004 <altera_avalon_jtag_uart_ioctl+0x7c>
   21fec:	e0fffc17 	ldw	r3,-16(fp)
   21ff0:	00a00034 	movhi	r2,32768
   21ff4:	10bfffc4 	addi	r2,r2,-1
   21ff8:	18800226 	beq	r3,r2,22004 <altera_avalon_jtag_uart_ioctl+0x7c>
   21ffc:	e0bffc17 	ldw	r2,-16(fp)
   22000:	00000206 	br	2200c <altera_avalon_jtag_uart_ioctl+0x84>
   22004:	00a00034 	movhi	r2,32768
   22008:	10bfff84 	addi	r2,r2,-2
   2200c:	e0fffd17 	ldw	r3,-12(fp)
   22010:	18800115 	stw	r2,4(r3)
      rc = 0;
   22014:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   22018:	00001106 	br	22060 <altera_avalon_jtag_uart_ioctl+0xd8>
   2201c:	00001006 	br	22060 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   22020:	e0bffd17 	ldw	r2,-12(fp)
   22024:	10c00117 	ldw	r3,4(r2)
   22028:	00a00034 	movhi	r2,32768
   2202c:	10bfffc4 	addi	r2,r2,-1
   22030:	18800a26 	beq	r3,r2,2205c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   22034:	e0bffd17 	ldw	r2,-12(fp)
   22038:	10c00917 	ldw	r3,36(r2)
   2203c:	e0bffd17 	ldw	r2,-12(fp)
   22040:	10800117 	ldw	r2,4(r2)
   22044:	1885803a 	cmpltu	r2,r3,r2
   22048:	10c03fcc 	andi	r3,r2,255
   2204c:	e0bfff17 	ldw	r2,-4(fp)
   22050:	10c00015 	stw	r3,0(r2)
      rc = 0;
   22054:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   22058:	00000006 	br	2205c <altera_avalon_jtag_uart_ioctl+0xd4>
   2205c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   22060:	e0bffb17 	ldw	r2,-20(fp)
}
   22064:	e037883a 	mov	sp,fp
   22068:	df000017 	ldw	fp,0(sp)
   2206c:	dec00104 	addi	sp,sp,4
   22070:	f800283a 	ret

00022074 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   22074:	deffec04 	addi	sp,sp,-80
   22078:	dfc01315 	stw	ra,76(sp)
   2207c:	df001215 	stw	fp,72(sp)
   22080:	df001204 	addi	fp,sp,72
   22084:	e13ffc15 	stw	r4,-16(fp)
   22088:	e17ffd15 	stw	r5,-12(fp)
   2208c:	e1bffe15 	stw	r6,-8(fp)
   22090:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   22094:	e0bffd17 	ldw	r2,-12(fp)
   22098:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   2209c:	e0bffc17 	ldw	r2,-16(fp)
   220a0:	10800a17 	ldw	r2,40(r2)
   220a4:	e0bff415 	stw	r2,-48(fp)
   220a8:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   220ac:	e0fff50b 	ldhu	r3,-44(fp)
   220b0:	e0bffb04 	addi	r2,fp,-20
   220b4:	e13ff417 	ldw	r4,-48(fp)
   220b8:	180b883a 	mov	r5,r3
   220bc:	100d883a 	mov	r6,r2
   220c0:	001ab900 	call	1ab90 <OSSemPend>

  while (space > 0)
   220c4:	00006506 	br	2225c <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   220c8:	e0bffc17 	ldw	r2,-16(fp)
   220cc:	10800d17 	ldw	r2,52(r2)
   220d0:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   220d4:	e0bffc17 	ldw	r2,-16(fp)
   220d8:	10800e17 	ldw	r2,56(r2)
   220dc:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   220e0:	e0fff117 	ldw	r3,-60(fp)
   220e4:	e0bff217 	ldw	r2,-56(fp)
   220e8:	18800536 	bltu	r3,r2,22100 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   220ec:	e0fff117 	ldw	r3,-60(fp)
   220f0:	e0bff217 	ldw	r2,-56(fp)
   220f4:	1885c83a 	sub	r2,r3,r2
   220f8:	e0bff015 	stw	r2,-64(fp)
   220fc:	00000406 	br	22110 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   22100:	00c20004 	movi	r3,2048
   22104:	e0bff217 	ldw	r2,-56(fp)
   22108:	1885c83a 	sub	r2,r3,r2
   2210c:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   22110:	e0bff017 	ldw	r2,-64(fp)
   22114:	1000011e 	bne	r2,zero,2211c <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   22118:	00001d06 	br	22190 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   2211c:	e0fffe17 	ldw	r3,-8(fp)
   22120:	e0bff017 	ldw	r2,-64(fp)
   22124:	1880022e 	bgeu	r3,r2,22130 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   22128:	e0bffe17 	ldw	r2,-8(fp)
   2212c:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   22130:	e0bff217 	ldw	r2,-56(fp)
   22134:	10801104 	addi	r2,r2,68
   22138:	e0fffc17 	ldw	r3,-16(fp)
   2213c:	1885883a 	add	r2,r3,r2
   22140:	e13fef17 	ldw	r4,-68(fp)
   22144:	100b883a 	mov	r5,r2
   22148:	e1bff017 	ldw	r6,-64(fp)
   2214c:	000be0c0 	call	be0c <memcpy>
      ptr   += n;
   22150:	e0ffef17 	ldw	r3,-68(fp)
   22154:	e0bff017 	ldw	r2,-64(fp)
   22158:	1885883a 	add	r2,r3,r2
   2215c:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   22160:	e0fffe17 	ldw	r3,-8(fp)
   22164:	e0bff017 	ldw	r2,-64(fp)
   22168:	1885c83a 	sub	r2,r3,r2
   2216c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22170:	e0fff217 	ldw	r3,-56(fp)
   22174:	e0bff017 	ldw	r2,-64(fp)
   22178:	1885883a 	add	r2,r3,r2
   2217c:	10c1ffcc 	andi	r3,r2,2047
   22180:	e0bffc17 	ldw	r2,-16(fp)
   22184:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   22188:	e0bffe17 	ldw	r2,-8(fp)
   2218c:	00bfce16 	blt	zero,r2,220c8 <__alt_mem_Flash_flash_data+0xf40220c8>

    /* If we read any data then return it */
    if (ptr != buffer)
   22190:	e0ffef17 	ldw	r3,-68(fp)
   22194:	e0bffd17 	ldw	r2,-12(fp)
   22198:	18800126 	beq	r3,r2,221a0 <altera_avalon_jtag_uart_read+0x12c>
      break;
   2219c:	00003106 	br	22264 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   221a0:	e0bfff17 	ldw	r2,-4(fp)
   221a4:	1090000c 	andi	r2,r2,16384
   221a8:	10000126 	beq	r2,zero,221b0 <altera_avalon_jtag_uart_read+0x13c>
      break;
   221ac:	00002d06 	br	22264 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   221b0:	008000f4 	movhi	r2,3
   221b4:	10a7e044 	addi	r2,r2,-24703
   221b8:	10800003 	ldbu	r2,0(r2)
   221bc:	10803fcc 	andi	r2,r2,255
   221c0:	10800058 	cmpnei	r2,r2,1
   221c4:	1000161e 	bne	r2,zero,22220 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   221c8:	e0bffc17 	ldw	r2,-16(fp)
   221cc:	10800c17 	ldw	r2,48(r2)
   221d0:	e0bff615 	stw	r2,-40(fp)
   221d4:	00800144 	movi	r2,5
   221d8:	e0bff70d 	sth	r2,-36(fp)
   221dc:	00bfe0c4 	movi	r2,-125
   221e0:	e0bff785 	stb	r2,-34(fp)
   221e4:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   221e8:	008000f4 	movhi	r2,3
   221ec:	10a7e044 	addi	r2,r2,-24703
   221f0:	10800003 	ldbu	r2,0(r2)
   221f4:	10803fcc 	andi	r2,r2,255
   221f8:	10001326 	beq	r2,zero,22248 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   221fc:	e17ff70b 	ldhu	r5,-36(fp)
   22200:	e1bff783 	ldbu	r6,-34(fp)
   22204:	e0fff80b 	ldhu	r3,-32(fp)
   22208:	e0bffb44 	addi	r2,fp,-19
   2220c:	d8800015 	stw	r2,0(sp)
   22210:	e13ff617 	ldw	r4,-40(fp)
   22214:	180f883a 	mov	r7,r3
   22218:	00173600 	call	17360 <OSFlagPend>
   2221c:	00000a06 	br	22248 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   22220:	0001883a 	nop
   22224:	e0bffc17 	ldw	r2,-16(fp)
   22228:	10c00d17 	ldw	r3,52(r2)
   2222c:	e0bff117 	ldw	r2,-60(fp)
   22230:	1880051e 	bne	r3,r2,22248 <altera_avalon_jtag_uart_read+0x1d4>
   22234:	e0bffc17 	ldw	r2,-16(fp)
   22238:	10c00917 	ldw	r3,36(r2)
   2223c:	e0bffc17 	ldw	r2,-16(fp)
   22240:	10800117 	ldw	r2,4(r2)
   22244:	18bff736 	bltu	r3,r2,22224 <__alt_mem_Flash_flash_data+0xf4022224>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   22248:	e0bffc17 	ldw	r2,-16(fp)
   2224c:	10c00d17 	ldw	r3,52(r2)
   22250:	e0bff117 	ldw	r2,-60(fp)
   22254:	1880011e 	bne	r3,r2,2225c <altera_avalon_jtag_uart_read+0x1e8>
      break;
   22258:	00000206 	br	22264 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2225c:	e0bffe17 	ldw	r2,-8(fp)
   22260:	00bf9916 	blt	zero,r2,220c8 <__alt_mem_Flash_flash_data+0xf40220c8>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   22264:	e0bffc17 	ldw	r2,-16(fp)
   22268:	10800a17 	ldw	r2,40(r2)
   2226c:	1009883a 	mov	r4,r2
   22270:	001af640 	call	1af64 <OSSemPost>

  if (ptr != buffer)
   22274:	e0ffef17 	ldw	r3,-68(fp)
   22278:	e0bffd17 	ldw	r2,-12(fp)
   2227c:	18801826 	beq	r3,r2,222e0 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22280:	0005303a 	rdctl	r2,status
   22284:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22288:	e0fff917 	ldw	r3,-28(fp)
   2228c:	00bfff84 	movi	r2,-2
   22290:	1884703a 	and	r2,r3,r2
   22294:	1001703a 	wrctl	status,r2
  
  return context;
   22298:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2229c:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   222a0:	e0bffc17 	ldw	r2,-16(fp)
   222a4:	10800817 	ldw	r2,32(r2)
   222a8:	10c00054 	ori	r3,r2,1
   222ac:	e0bffc17 	ldw	r2,-16(fp)
   222b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   222b4:	e0bffc17 	ldw	r2,-16(fp)
   222b8:	10800017 	ldw	r2,0(r2)
   222bc:	10800104 	addi	r2,r2,4
   222c0:	1007883a 	mov	r3,r2
   222c4:	e0bffc17 	ldw	r2,-16(fp)
   222c8:	10800817 	ldw	r2,32(r2)
   222cc:	18800035 	stwio	r2,0(r3)
   222d0:	e0bff317 	ldw	r2,-52(fp)
   222d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   222d8:	e0bffa17 	ldw	r2,-24(fp)
   222dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   222e0:	e0ffef17 	ldw	r3,-68(fp)
   222e4:	e0bffd17 	ldw	r2,-12(fp)
   222e8:	18800426 	beq	r3,r2,222fc <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   222ec:	e0ffef17 	ldw	r3,-68(fp)
   222f0:	e0bffd17 	ldw	r2,-12(fp)
   222f4:	1885c83a 	sub	r2,r3,r2
   222f8:	00000606 	br	22314 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   222fc:	e0bfff17 	ldw	r2,-4(fp)
   22300:	1090000c 	andi	r2,r2,16384
   22304:	10000226 	beq	r2,zero,22310 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   22308:	00bffd44 	movi	r2,-11
   2230c:	00000106 	br	22314 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   22310:	00bffec4 	movi	r2,-5
}
   22314:	e037883a 	mov	sp,fp
   22318:	dfc00117 	ldw	ra,4(sp)
   2231c:	df000017 	ldw	fp,0(sp)
   22320:	dec00204 	addi	sp,sp,8
   22324:	f800283a 	ret

00022328 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   22328:	deffed04 	addi	sp,sp,-76
   2232c:	dfc01215 	stw	ra,72(sp)
   22330:	df001115 	stw	fp,68(sp)
   22334:	df001104 	addi	fp,sp,68
   22338:	e13ffc15 	stw	r4,-16(fp)
   2233c:	e17ffd15 	stw	r5,-12(fp)
   22340:	e1bffe15 	stw	r6,-8(fp)
   22344:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   22348:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2234c:	e0bffd17 	ldw	r2,-12(fp)
   22350:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   22354:	e0bffc17 	ldw	r2,-16(fp)
   22358:	10800b17 	ldw	r2,44(r2)
   2235c:	e0bff515 	stw	r2,-44(fp)
   22360:	e03ff60d 	sth	zero,-40(fp)
   22364:	e0fff60b 	ldhu	r3,-40(fp)
   22368:	e0bffbc4 	addi	r2,fp,-17
   2236c:	e13ff517 	ldw	r4,-44(fp)
   22370:	180b883a 	mov	r5,r3
   22374:	100d883a 	mov	r6,r2
   22378:	001ab900 	call	1ab90 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2237c:	00003806 	br	22460 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   22380:	e0bffc17 	ldw	r2,-16(fp)
   22384:	10800f17 	ldw	r2,60(r2)
   22388:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   2238c:	e0bffc17 	ldw	r2,-16(fp)
   22390:	10801017 	ldw	r2,64(r2)
   22394:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   22398:	e0fff317 	ldw	r3,-52(fp)
   2239c:	e0bff017 	ldw	r2,-64(fp)
   223a0:	1880062e 	bgeu	r3,r2,223bc <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   223a4:	e0fff017 	ldw	r3,-64(fp)
   223a8:	e0bff317 	ldw	r2,-52(fp)
   223ac:	1885c83a 	sub	r2,r3,r2
   223b0:	10bfffc4 	addi	r2,r2,-1
   223b4:	e0bff115 	stw	r2,-60(fp)
   223b8:	00000b06 	br	223e8 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   223bc:	e0bff017 	ldw	r2,-64(fp)
   223c0:	10000526 	beq	r2,zero,223d8 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   223c4:	00c20004 	movi	r3,2048
   223c8:	e0bff317 	ldw	r2,-52(fp)
   223cc:	1885c83a 	sub	r2,r3,r2
   223d0:	e0bff115 	stw	r2,-60(fp)
   223d4:	00000406 	br	223e8 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   223d8:	00c1ffc4 	movi	r3,2047
   223dc:	e0bff317 	ldw	r2,-52(fp)
   223e0:	1885c83a 	sub	r2,r3,r2
   223e4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   223e8:	e0bff117 	ldw	r2,-60(fp)
   223ec:	1000011e 	bne	r2,zero,223f4 <altera_avalon_jtag_uart_write+0xcc>
        break;
   223f0:	00001d06 	br	22468 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   223f4:	e0fffe17 	ldw	r3,-8(fp)
   223f8:	e0bff117 	ldw	r2,-60(fp)
   223fc:	1880022e 	bgeu	r3,r2,22408 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   22400:	e0bffe17 	ldw	r2,-8(fp)
   22404:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   22408:	e0bff317 	ldw	r2,-52(fp)
   2240c:	10821104 	addi	r2,r2,2116
   22410:	e0fffc17 	ldw	r3,-16(fp)
   22414:	1885883a 	add	r2,r3,r2
   22418:	1009883a 	mov	r4,r2
   2241c:	e17ffd17 	ldw	r5,-12(fp)
   22420:	e1bff117 	ldw	r6,-60(fp)
   22424:	000be0c0 	call	be0c <memcpy>
      ptr   += n;
   22428:	e0fffd17 	ldw	r3,-12(fp)
   2242c:	e0bff117 	ldw	r2,-60(fp)
   22430:	1885883a 	add	r2,r3,r2
   22434:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   22438:	e0fffe17 	ldw	r3,-8(fp)
   2243c:	e0bff117 	ldw	r2,-60(fp)
   22440:	1885c83a 	sub	r2,r3,r2
   22444:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22448:	e0fff317 	ldw	r3,-52(fp)
   2244c:	e0bff117 	ldw	r2,-60(fp)
   22450:	1885883a 	add	r2,r3,r2
   22454:	10c1ffcc 	andi	r3,r2,2047
   22458:	e0bffc17 	ldw	r2,-16(fp)
   2245c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   22460:	e0bffe17 	ldw	r2,-8(fp)
   22464:	00bfc616 	blt	zero,r2,22380 <__alt_mem_Flash_flash_data+0xf4022380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22468:	0005303a 	rdctl	r2,status
   2246c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22470:	e0fff717 	ldw	r3,-36(fp)
   22474:	00bfff84 	movi	r2,-2
   22478:	1884703a 	and	r2,r3,r2
   2247c:	1001703a 	wrctl	status,r2
  
  return context;
   22480:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   22484:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   22488:	e0bffc17 	ldw	r2,-16(fp)
   2248c:	10800817 	ldw	r2,32(r2)
   22490:	10c00094 	ori	r3,r2,2
   22494:	e0bffc17 	ldw	r2,-16(fp)
   22498:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2249c:	e0bffc17 	ldw	r2,-16(fp)
   224a0:	10800017 	ldw	r2,0(r2)
   224a4:	10800104 	addi	r2,r2,4
   224a8:	1007883a 	mov	r3,r2
   224ac:	e0bffc17 	ldw	r2,-16(fp)
   224b0:	10800817 	ldw	r2,32(r2)
   224b4:	18800035 	stwio	r2,0(r3)
   224b8:	e0bff417 	ldw	r2,-48(fp)
   224bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   224c0:	e0bff817 	ldw	r2,-32(fp)
   224c4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   224c8:	e0bffe17 	ldw	r2,-8(fp)
   224cc:	00802e0e 	bge	zero,r2,22588 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   224d0:	e0bfff17 	ldw	r2,-4(fp)
   224d4:	1090000c 	andi	r2,r2,16384
   224d8:	10000126 	beq	r2,zero,224e0 <altera_avalon_jtag_uart_write+0x1b8>
        break;
   224dc:	00002c06 	br	22590 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   224e0:	008000f4 	movhi	r2,3
   224e4:	10a7e044 	addi	r2,r2,-24703
   224e8:	10800003 	ldbu	r2,0(r2)
   224ec:	10803fcc 	andi	r2,r2,255
   224f0:	10800058 	cmpnei	r2,r2,1
   224f4:	1000161e 	bne	r2,zero,22550 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   224f8:	e0bffc17 	ldw	r2,-16(fp)
   224fc:	10800c17 	ldw	r2,48(r2)
   22500:	e0bff915 	stw	r2,-28(fp)
   22504:	00800184 	movi	r2,6
   22508:	e0bffa0d 	sth	r2,-24(fp)
   2250c:	00bfe0c4 	movi	r2,-125
   22510:	e0bffa85 	stb	r2,-22(fp)
   22514:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   22518:	008000f4 	movhi	r2,3
   2251c:	10a7e044 	addi	r2,r2,-24703
   22520:	10800003 	ldbu	r2,0(r2)
   22524:	10803fcc 	andi	r2,r2,255
   22528:	10001326 	beq	r2,zero,22578 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   2252c:	e17ffa0b 	ldhu	r5,-24(fp)
   22530:	e1bffa83 	ldbu	r6,-22(fp)
   22534:	e0fffb0b 	ldhu	r3,-20(fp)
   22538:	e0bffb84 	addi	r2,fp,-18
   2253c:	d8800015 	stw	r2,0(sp)
   22540:	e13ff917 	ldw	r4,-28(fp)
   22544:	180f883a 	mov	r7,r3
   22548:	00173600 	call	17360 <OSFlagPend>
   2254c:	00000a06 	br	22578 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   22550:	0001883a 	nop
   22554:	e0bffc17 	ldw	r2,-16(fp)
   22558:	10c01017 	ldw	r3,64(r2)
   2255c:	e0bff017 	ldw	r2,-64(fp)
   22560:	1880051e 	bne	r3,r2,22578 <altera_avalon_jtag_uart_write+0x250>
   22564:	e0bffc17 	ldw	r2,-16(fp)
   22568:	10c00917 	ldw	r3,36(r2)
   2256c:	e0bffc17 	ldw	r2,-16(fp)
   22570:	10800117 	ldw	r2,4(r2)
   22574:	18bff736 	bltu	r3,r2,22554 <__alt_mem_Flash_flash_data+0xf4022554>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   22578:	e0bffc17 	ldw	r2,-16(fp)
   2257c:	10800917 	ldw	r2,36(r2)
   22580:	10000126 	beq	r2,zero,22588 <altera_avalon_jtag_uart_write+0x260>
         break;
   22584:	00000206 	br	22590 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   22588:	e0bffe17 	ldw	r2,-8(fp)
   2258c:	00bf7b16 	blt	zero,r2,2237c <__alt_mem_Flash_flash_data+0xf402237c>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   22590:	e0bffc17 	ldw	r2,-16(fp)
   22594:	10800b17 	ldw	r2,44(r2)
   22598:	1009883a 	mov	r4,r2
   2259c:	001af640 	call	1af64 <OSSemPost>

  if (ptr != start)
   225a0:	e0fffd17 	ldw	r3,-12(fp)
   225a4:	e0bff217 	ldw	r2,-56(fp)
   225a8:	18800426 	beq	r3,r2,225bc <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   225ac:	e0fffd17 	ldw	r3,-12(fp)
   225b0:	e0bff217 	ldw	r2,-56(fp)
   225b4:	1885c83a 	sub	r2,r3,r2
   225b8:	00000606 	br	225d4 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   225bc:	e0bfff17 	ldw	r2,-4(fp)
   225c0:	1090000c 	andi	r2,r2,16384
   225c4:	10000226 	beq	r2,zero,225d0 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   225c8:	00bffd44 	movi	r2,-11
   225cc:	00000106 	br	225d4 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   225d0:	00bffec4 	movi	r2,-5
}
   225d4:	e037883a 	mov	sp,fp
   225d8:	dfc00117 	ldw	ra,4(sp)
   225dc:	df000017 	ldw	fp,0(sp)
   225e0:	dec00204 	addi	sp,sp,8
   225e4:	f800283a 	ret

000225e8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   225e8:	defff904 	addi	sp,sp,-28
   225ec:	dfc00615 	stw	ra,24(sp)
   225f0:	df000515 	stw	fp,20(sp)
   225f4:	df000504 	addi	fp,sp,20
   225f8:	e13ffe15 	stw	r4,-8(fp)
   225fc:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   22600:	0007883a 	mov	r3,zero
   22604:	e0bffe17 	ldw	r2,-8(fp)
   22608:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   2260c:	e0bffe17 	ldw	r2,-8(fp)
   22610:	10800104 	addi	r2,r2,4
   22614:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22618:	0005303a 	rdctl	r2,status
   2261c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22620:	e0fffc17 	ldw	r3,-16(fp)
   22624:	00bfff84 	movi	r2,-2
   22628:	1884703a 	and	r2,r3,r2
   2262c:	1001703a 	wrctl	status,r2
  
  return context;
   22630:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   22634:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   22638:	00246640 	call	24664 <alt_tick>
   2263c:	e0bffb17 	ldw	r2,-20(fp)
   22640:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22644:	e0bffd17 	ldw	r2,-12(fp)
   22648:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   2264c:	e037883a 	mov	sp,fp
   22650:	dfc00117 	ldw	ra,4(sp)
   22654:	df000017 	ldw	fp,0(sp)
   22658:	dec00204 	addi	sp,sp,8
   2265c:	f800283a 	ret

00022660 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   22660:	defff904 	addi	sp,sp,-28
   22664:	dfc00615 	stw	ra,24(sp)
   22668:	df000515 	stw	fp,20(sp)
   2266c:	df000504 	addi	fp,sp,20
   22670:	e13ffc15 	stw	r4,-16(fp)
   22674:	e17ffd15 	stw	r5,-12(fp)
   22678:	e1bffe15 	stw	r6,-8(fp)
   2267c:	e1ffff15 	stw	r7,-4(fp)
   22680:	e0bfff17 	ldw	r2,-4(fp)
   22684:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   22688:	008000f4 	movhi	r2,3
   2268c:	10a80204 	addi	r2,r2,-24568
   22690:	10800017 	ldw	r2,0(r2)
   22694:	1000041e 	bne	r2,zero,226a8 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   22698:	008000f4 	movhi	r2,3
   2269c:	10a80204 	addi	r2,r2,-24568
   226a0:	e0fffb17 	ldw	r3,-20(fp)
   226a4:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   226a8:	e0bffc17 	ldw	r2,-16(fp)
   226ac:	10800104 	addi	r2,r2,4
   226b0:	00c001c4 	movi	r3,7
   226b4:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   226b8:	e13ffe17 	ldw	r4,-8(fp)
   226bc:	e17ffc17 	ldw	r5,-16(fp)
   226c0:	018000b4 	movhi	r6,2
   226c4:	31897a04 	addi	r6,r6,9704
   226c8:	00241a80 	call	241a8 <alt_irq_register>
#endif  
}
   226cc:	e037883a 	mov	sp,fp
   226d0:	dfc00117 	ldw	ra,4(sp)
   226d4:	df000017 	ldw	fp,0(sp)
   226d8:	dec00204 	addi	sp,sp,8
   226dc:	f800283a 	ret

000226e0 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   226e0:	defffc04 	addi	sp,sp,-16
   226e4:	df000315 	stw	fp,12(sp)
   226e8:	df000304 	addi	fp,sp,12
   226ec:	e13ffe15 	stw	r4,-8(fp)
   226f0:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   226f4:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   226f8:	e0bfff17 	ldw	r2,-4(fp)
   226fc:	1000061e 	bne	r2,zero,22718 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   22700:	e0bffe17 	ldw	r2,-8(fp)
   22704:	1007883a 	mov	r3,r2
   22708:	e0bffd03 	ldbu	r2,-12(fp)
   2270c:	1884b03a 	or	r2,r3,r2
   22710:	e0bffd05 	stb	r2,-12(fp)
   22714:	00000806 	br	22738 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   22718:	e0bffe17 	ldw	r2,-8(fp)
   2271c:	1007883a 	mov	r3,r2
   22720:	e0bffd03 	ldbu	r2,-12(fp)
   22724:	1884b03a 	or	r2,r3,r2
   22728:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   2272c:	e0bffd03 	ldbu	r2,-12(fp)
   22730:	10801014 	ori	r2,r2,64
   22734:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   22738:	e0fffd03 	ldbu	r3,-12(fp)
   2273c:	00bfe004 	movi	r2,-128
   22740:	1884b03a 	or	r2,r3,r2
}
   22744:	e037883a 	mov	sp,fp
   22748:	df000017 	ldw	fp,0(sp)
   2274c:	dec00104 	addi	sp,sp,4
   22750:	f800283a 	ret

00022754 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   22754:	defffd04 	addi	sp,sp,-12
   22758:	df000215 	stw	fp,8(sp)
   2275c:	df000204 	addi	fp,sp,8
   22760:	e13ffe15 	stw	r4,-8(fp)
   22764:	2805883a 	mov	r2,r5
   22768:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   2276c:	e0bffe17 	ldw	r2,-8(fp)
   22770:	10800a17 	ldw	r2,40(r2)
   22774:	1007883a 	mov	r3,r2
   22778:	e0bfff03 	ldbu	r2,-4(fp)
   2277c:	18800025 	stbio	r2,0(r3)
}
   22780:	e037883a 	mov	sp,fp
   22784:	df000017 	ldw	fp,0(sp)
   22788:	dec00104 	addi	sp,sp,4
   2278c:	f800283a 	ret

00022790 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   22790:	defffe04 	addi	sp,sp,-8
   22794:	df000115 	stw	fp,4(sp)
   22798:	df000104 	addi	fp,sp,4
   2279c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   227a0:	e0bfff17 	ldw	r2,-4(fp)
   227a4:	10800a17 	ldw	r2,40(r2)
   227a8:	1007883a 	mov	r3,r2
   227ac:	00800044 	movi	r2,1
   227b0:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   227b4:	e037883a 	mov	sp,fp
   227b8:	df000017 	ldw	fp,0(sp)
   227bc:	dec00104 	addi	sp,sp,4
   227c0:	f800283a 	ret

000227c4 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   227c4:	defffc04 	addi	sp,sp,-16
   227c8:	dfc00315 	stw	ra,12(sp)
   227cc:	df000215 	stw	fp,8(sp)
   227d0:	df000204 	addi	fp,sp,8
   227d4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   227d8:	e13fff17 	ldw	r4,-4(fp)
   227dc:	014000b4 	movhi	r5,2
   227e0:	295fba04 	addi	r5,r5,32488
   227e4:	0023fb00 	call	23fb0 <alt_find_dev>
   227e8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   227ec:	e0bffe17 	ldw	r2,-8(fp)
}
   227f0:	e037883a 	mov	sp,fp
   227f4:	dfc00117 	ldw	ra,4(sp)
   227f8:	df000017 	ldw	fp,0(sp)
   227fc:	dec00204 	addi	sp,sp,8
   22800:	f800283a 	ret

00022804 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   22804:	defffb04 	addi	sp,sp,-20
   22808:	df000415 	stw	fp,16(sp)
   2280c:	df000404 	addi	fp,sp,16
   22810:	e13ffd15 	stw	r4,-12(fp)
   22814:	e17ffe15 	stw	r5,-8(fp)
   22818:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   2281c:	e03ffc15 	stw	zero,-16(fp)
   22820:	00000f06 	br	22860 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   22824:	e0bffd17 	ldw	r2,-12(fp)
   22828:	10800a17 	ldw	r2,40(r2)
   2282c:	10800044 	addi	r2,r2,1
   22830:	1009883a 	mov	r4,r2
   22834:	e0fffe17 	ldw	r3,-8(fp)
   22838:	e0bffc17 	ldw	r2,-16(fp)
   2283c:	1885883a 	add	r2,r3,r2
   22840:	10800003 	ldbu	r2,0(r2)
   22844:	10803fcc 	andi	r2,r2,255
   22848:	1080201c 	xori	r2,r2,128
   2284c:	10bfe004 	addi	r2,r2,-128
   22850:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   22854:	e0bffc17 	ldw	r2,-16(fp)
   22858:	10800044 	addi	r2,r2,1
   2285c:	e0bffc15 	stw	r2,-16(fp)
   22860:	e0fffc17 	ldw	r3,-16(fp)
   22864:	e0bfff17 	ldw	r2,-4(fp)
   22868:	18bfee36 	bltu	r3,r2,22824 <__alt_mem_Flash_flash_data+0xf4022824>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   2286c:	e037883a 	mov	sp,fp
   22870:	df000017 	ldw	fp,0(sp)
   22874:	dec00104 	addi	sp,sp,4
   22878:	f800283a 	ret

0002287c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   2287c:	defffd04 	addi	sp,sp,-12
   22880:	df000215 	stw	fp,8(sp)
   22884:	df000204 	addi	fp,sp,8
   22888:	e13ffe15 	stw	r4,-8(fp)
   2288c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   22890:	00000d06 	br	228c8 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   22894:	e0bffe17 	ldw	r2,-8(fp)
   22898:	10800a17 	ldw	r2,40(r2)
   2289c:	10800044 	addi	r2,r2,1
   228a0:	1007883a 	mov	r3,r2
   228a4:	e0bfff17 	ldw	r2,-4(fp)
   228a8:	10800003 	ldbu	r2,0(r2)
   228ac:	10803fcc 	andi	r2,r2,255
   228b0:	1080201c 	xori	r2,r2,128
   228b4:	10bfe004 	addi	r2,r2,-128
   228b8:	18800025 	stbio	r2,0(r3)
		++ptr;
   228bc:	e0bfff17 	ldw	r2,-4(fp)
   228c0:	10800044 	addi	r2,r2,1
   228c4:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   228c8:	e0bfff17 	ldw	r2,-4(fp)
   228cc:	10800003 	ldbu	r2,0(r2)
   228d0:	10803fcc 	andi	r2,r2,255
   228d4:	1080201c 	xori	r2,r2,128
   228d8:	10bfe004 	addi	r2,r2,-128
   228dc:	103fed1e 	bne	r2,zero,22894 <__alt_mem_Flash_flash_data+0xf4022894>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   228e0:	e037883a 	mov	sp,fp
   228e4:	df000017 	ldw	fp,0(sp)
   228e8:	dec00104 	addi	sp,sp,4
   228ec:	f800283a 	ret

000228f0 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   228f0:	defffb04 	addi	sp,sp,-20
   228f4:	dfc00415 	stw	ra,16(sp)
   228f8:	df000315 	stw	fp,12(sp)
   228fc:	df000304 	addi	fp,sp,12
   22900:	e13ffd15 	stw	r4,-12(fp)
   22904:	e17ffe15 	stw	r5,-8(fp)
   22908:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   2290c:	e0bffd17 	ldw	r2,-12(fp)
   22910:	10c00017 	ldw	r3,0(r2)
   22914:	e0bfff17 	ldw	r2,-4(fp)
   22918:	1809883a 	mov	r4,r3
   2291c:	e17ffe17 	ldw	r5,-8(fp)
   22920:	100d883a 	mov	r6,r2
   22924:	00228040 	call	22804 <alt_up_character_lcd_write>
	return 0;
   22928:	0005883a 	mov	r2,zero
}
   2292c:	e037883a 	mov	sp,fp
   22930:	dfc00117 	ldw	ra,4(sp)
   22934:	df000017 	ldw	fp,0(sp)
   22938:	dec00204 	addi	sp,sp,8
   2293c:	f800283a 	ret

00022940 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   22940:	defffa04 	addi	sp,sp,-24
   22944:	dfc00515 	stw	ra,20(sp)
   22948:	df000415 	stw	fp,16(sp)
   2294c:	df000404 	addi	fp,sp,16
   22950:	e13ffd15 	stw	r4,-12(fp)
   22954:	e17ffe15 	stw	r5,-8(fp)
   22958:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   2295c:	e0bffe17 	ldw	r2,-8(fp)
   22960:	10800a28 	cmpgeui	r2,r2,40
   22964:	1000031e 	bne	r2,zero,22974 <alt_up_character_lcd_set_cursor_pos+0x34>
   22968:	e0bfff17 	ldw	r2,-4(fp)
   2296c:	108000b0 	cmpltui	r2,r2,2
   22970:	1000021e 	bne	r2,zero,2297c <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   22974:	00bfffc4 	movi	r2,-1
   22978:	00000906 	br	229a0 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   2297c:	e13ffe17 	ldw	r4,-8(fp)
   22980:	e17fff17 	ldw	r5,-4(fp)
   22984:	00226e00 	call	226e0 <get_DDRAM_addr>
   22988:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   2298c:	e0bffc03 	ldbu	r2,-16(fp)
   22990:	e13ffd17 	ldw	r4,-12(fp)
   22994:	100b883a 	mov	r5,r2
   22998:	00227540 	call	22754 <alt_up_character_lcd_send_cmd>
	return 0;
   2299c:	0005883a 	mov	r2,zero
}
   229a0:	e037883a 	mov	sp,fp
   229a4:	dfc00117 	ldw	ra,4(sp)
   229a8:	df000017 	ldw	fp,0(sp)
   229ac:	dec00204 	addi	sp,sp,8
   229b0:	f800283a 	ret

000229b4 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   229b4:	defffb04 	addi	sp,sp,-20
   229b8:	dfc00415 	stw	ra,16(sp)
   229bc:	df000315 	stw	fp,12(sp)
   229c0:	df000304 	addi	fp,sp,12
   229c4:	e13ffe15 	stw	r4,-8(fp)
   229c8:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   229cc:	e0bfff17 	ldw	r2,-4(fp)
   229d0:	1000011e 	bne	r2,zero,229d8 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   229d4:	00001406 	br	22a28 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   229d8:	e0bfff17 	ldw	r2,-4(fp)
   229dc:	0080020e 	bge	zero,r2,229e8 <alt_up_character_lcd_shift_cursor+0x34>
   229e0:	00800504 	movi	r2,20
   229e4:	00000106 	br	229ec <alt_up_character_lcd_shift_cursor+0x38>
   229e8:	00800404 	movi	r2,16
   229ec:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   229f0:	e0bfff17 	ldw	r2,-4(fp)
   229f4:	1000010e 	bge	r2,zero,229fc <alt_up_character_lcd_shift_cursor+0x48>
   229f8:	0085c83a 	sub	r2,zero,r2
   229fc:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   22a00:	00000406 	br	22a14 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   22a04:	e0bffd43 	ldbu	r2,-11(fp)
   22a08:	e13ffe17 	ldw	r4,-8(fp)
   22a0c:	100b883a 	mov	r5,r2
   22a10:	00227540 	call	22754 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   22a14:	e0bffd03 	ldbu	r2,-12(fp)
   22a18:	10ffffc4 	addi	r3,r2,-1
   22a1c:	e0fffd05 	stb	r3,-12(fp)
   22a20:	10803fcc 	andi	r2,r2,255
   22a24:	103ff71e 	bne	r2,zero,22a04 <__alt_mem_Flash_flash_data+0xf4022a04>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   22a28:	e037883a 	mov	sp,fp
   22a2c:	dfc00117 	ldw	ra,4(sp)
   22a30:	df000017 	ldw	fp,0(sp)
   22a34:	dec00204 	addi	sp,sp,8
   22a38:	f800283a 	ret

00022a3c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   22a3c:	defffb04 	addi	sp,sp,-20
   22a40:	dfc00415 	stw	ra,16(sp)
   22a44:	df000315 	stw	fp,12(sp)
   22a48:	df000304 	addi	fp,sp,12
   22a4c:	e13ffe15 	stw	r4,-8(fp)
   22a50:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   22a54:	e0bfff17 	ldw	r2,-4(fp)
   22a58:	1000011e 	bne	r2,zero,22a60 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   22a5c:	00001406 	br	22ab0 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   22a60:	e0bfff17 	ldw	r2,-4(fp)
   22a64:	0080020e 	bge	zero,r2,22a70 <alt_up_character_lcd_shift_display+0x34>
   22a68:	00800704 	movi	r2,28
   22a6c:	00000106 	br	22a74 <alt_up_character_lcd_shift_display+0x38>
   22a70:	00800604 	movi	r2,24
   22a74:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   22a78:	e0bfff17 	ldw	r2,-4(fp)
   22a7c:	1000010e 	bge	r2,zero,22a84 <alt_up_character_lcd_shift_display+0x48>
   22a80:	0085c83a 	sub	r2,zero,r2
   22a84:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   22a88:	00000406 	br	22a9c <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   22a8c:	e0bffd43 	ldbu	r2,-11(fp)
   22a90:	e13ffe17 	ldw	r4,-8(fp)
   22a94:	100b883a 	mov	r5,r2
   22a98:	00227540 	call	22754 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   22a9c:	e0bffd03 	ldbu	r2,-12(fp)
   22aa0:	10ffffc4 	addi	r3,r2,-1
   22aa4:	e0fffd05 	stb	r3,-12(fp)
   22aa8:	10803fcc 	andi	r2,r2,255
   22aac:	103ff71e 	bne	r2,zero,22a8c <__alt_mem_Flash_flash_data+0xf4022a8c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   22ab0:	e037883a 	mov	sp,fp
   22ab4:	dfc00117 	ldw	ra,4(sp)
   22ab8:	df000017 	ldw	fp,0(sp)
   22abc:	dec00204 	addi	sp,sp,8
   22ac0:	f800283a 	ret

00022ac4 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   22ac4:	defffa04 	addi	sp,sp,-24
   22ac8:	dfc00515 	stw	ra,20(sp)
   22acc:	df000415 	stw	fp,16(sp)
   22ad0:	df000404 	addi	fp,sp,16
   22ad4:	e13ffd15 	stw	r4,-12(fp)
   22ad8:	e17ffe15 	stw	r5,-8(fp)
   22adc:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   22ae0:	e0bffe17 	ldw	r2,-8(fp)
   22ae4:	10800a28 	cmpgeui	r2,r2,40
   22ae8:	1000031e 	bne	r2,zero,22af8 <alt_up_character_lcd_erase_pos+0x34>
   22aec:	e0bfff17 	ldw	r2,-4(fp)
   22af0:	108000b0 	cmpltui	r2,r2,2
   22af4:	1000021e 	bne	r2,zero,22b00 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   22af8:	00bfffc4 	movi	r2,-1
   22afc:	00000f06 	br	22b3c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   22b00:	e13ffe17 	ldw	r4,-8(fp)
   22b04:	e17fff17 	ldw	r5,-4(fp)
   22b08:	00226e00 	call	226e0 <get_DDRAM_addr>
   22b0c:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   22b10:	e0bffc03 	ldbu	r2,-16(fp)
   22b14:	e13ffd17 	ldw	r4,-12(fp)
   22b18:	100b883a 	mov	r5,r2
   22b1c:	00227540 	call	22754 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   22b20:	e0bffd17 	ldw	r2,-12(fp)
   22b24:	10800a17 	ldw	r2,40(r2)
   22b28:	10800044 	addi	r2,r2,1
   22b2c:	1007883a 	mov	r3,r2
   22b30:	00800084 	movi	r2,2
   22b34:	18800025 	stbio	r2,0(r3)
	return 0;
   22b38:	0005883a 	mov	r2,zero
}
   22b3c:	e037883a 	mov	sp,fp
   22b40:	dfc00117 	ldw	ra,4(sp)
   22b44:	df000017 	ldw	fp,0(sp)
   22b48:	dec00204 	addi	sp,sp,8
   22b4c:	f800283a 	ret

00022b50 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   22b50:	defffd04 	addi	sp,sp,-12
   22b54:	dfc00215 	stw	ra,8(sp)
   22b58:	df000115 	stw	fp,4(sp)
   22b5c:	df000104 	addi	fp,sp,4
   22b60:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   22b64:	e13fff17 	ldw	r4,-4(fp)
   22b68:	01400304 	movi	r5,12
   22b6c:	00227540 	call	22754 <alt_up_character_lcd_send_cmd>
}
   22b70:	e037883a 	mov	sp,fp
   22b74:	dfc00117 	ldw	ra,4(sp)
   22b78:	df000017 	ldw	fp,0(sp)
   22b7c:	dec00204 	addi	sp,sp,8
   22b80:	f800283a 	ret

00022b84 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   22b84:	defffd04 	addi	sp,sp,-12
   22b88:	dfc00215 	stw	ra,8(sp)
   22b8c:	df000115 	stw	fp,4(sp)
   22b90:	df000104 	addi	fp,sp,4
   22b94:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   22b98:	e13fff17 	ldw	r4,-4(fp)
   22b9c:	014003c4 	movi	r5,15
   22ba0:	00227540 	call	22754 <alt_up_character_lcd_send_cmd>
}
   22ba4:	e037883a 	mov	sp,fp
   22ba8:	dfc00117 	ldw	ra,4(sp)
   22bac:	df000017 	ldw	fp,0(sp)
   22bb0:	dec00204 	addi	sp,sp,8
   22bb4:	f800283a 	ret

00022bb8 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   22bb8:	defffd04 	addi	sp,sp,-12
   22bbc:	df000215 	stw	fp,8(sp)
   22bc0:	df000204 	addi	fp,sp,8
   22bc4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   22bc8:	e0bfff17 	ldw	r2,-4(fp)
   22bcc:	10800a17 	ldw	r2,40(r2)
   22bd0:	10800104 	addi	r2,r2,4
   22bd4:	10800037 	ldwio	r2,0(r2)
   22bd8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   22bdc:	e0bffe17 	ldw	r2,-8(fp)
   22be0:	10800054 	ori	r2,r2,1
   22be4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   22be8:	e0bfff17 	ldw	r2,-4(fp)
   22bec:	10800a17 	ldw	r2,40(r2)
   22bf0:	10800104 	addi	r2,r2,4
   22bf4:	1007883a 	mov	r3,r2
   22bf8:	e0bffe17 	ldw	r2,-8(fp)
   22bfc:	18800035 	stwio	r2,0(r3)
}
   22c00:	e037883a 	mov	sp,fp
   22c04:	df000017 	ldw	fp,0(sp)
   22c08:	dec00104 	addi	sp,sp,4
   22c0c:	f800283a 	ret

00022c10 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   22c10:	defffd04 	addi	sp,sp,-12
   22c14:	df000215 	stw	fp,8(sp)
   22c18:	df000204 	addi	fp,sp,8
   22c1c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   22c20:	e0bfff17 	ldw	r2,-4(fp)
   22c24:	10800a17 	ldw	r2,40(r2)
   22c28:	10800104 	addi	r2,r2,4
   22c2c:	10800037 	ldwio	r2,0(r2)
   22c30:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   22c34:	e0fffe17 	ldw	r3,-8(fp)
   22c38:	00bfff84 	movi	r2,-2
   22c3c:	1884703a 	and	r2,r3,r2
   22c40:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   22c44:	e0bfff17 	ldw	r2,-4(fp)
   22c48:	10800a17 	ldw	r2,40(r2)
   22c4c:	10800104 	addi	r2,r2,4
   22c50:	1007883a 	mov	r3,r2
   22c54:	e0bffe17 	ldw	r2,-8(fp)
   22c58:	18800035 	stwio	r2,0(r3)
}
   22c5c:	e037883a 	mov	sp,fp
   22c60:	df000017 	ldw	fp,0(sp)
   22c64:	dec00104 	addi	sp,sp,4
   22c68:	f800283a 	ret

00022c6c <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   22c6c:	defffd04 	addi	sp,sp,-12
   22c70:	df000215 	stw	fp,8(sp)
   22c74:	df000204 	addi	fp,sp,8
   22c78:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   22c7c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   22c80:	e0bfff17 	ldw	r2,-4(fp)
   22c84:	10800a17 	ldw	r2,40(r2)
   22c88:	10800084 	addi	r2,r2,2
   22c8c:	1080002b 	ldhuio	r2,0(r2)
   22c90:	10bfffcc 	andi	r2,r2,65535
   22c94:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   22c98:	e0bffe0b 	ldhu	r2,-8(fp)
}
   22c9c:	e037883a 	mov	sp,fp
   22ca0:	df000017 	ldw	fp,0(sp)
   22ca4:	dec00104 	addi	sp,sp,4
   22ca8:	f800283a 	ret

00022cac <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   22cac:	defffd04 	addi	sp,sp,-12
   22cb0:	df000215 	stw	fp,8(sp)
   22cb4:	df000204 	addi	fp,sp,8
   22cb8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   22cbc:	e0bfff17 	ldw	r2,-4(fp)
   22cc0:	10800a17 	ldw	r2,40(r2)
   22cc4:	10800104 	addi	r2,r2,4
   22cc8:	10800037 	ldwio	r2,0(r2)
   22ccc:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   22cd0:	e0bffe17 	ldw	r2,-8(fp)
   22cd4:	1004d43a 	srli	r2,r2,16
}
   22cd8:	e037883a 	mov	sp,fp
   22cdc:	df000017 	ldw	fp,0(sp)
   22ce0:	dec00104 	addi	sp,sp,4
   22ce4:	f800283a 	ret

00022ce8 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   22ce8:	defffd04 	addi	sp,sp,-12
   22cec:	df000215 	stw	fp,8(sp)
   22cf0:	df000204 	addi	fp,sp,8
   22cf4:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   22cf8:	e0bfff17 	ldw	r2,-4(fp)
   22cfc:	1080800c 	andi	r2,r2,512
   22d00:	1004d27a 	srli	r2,r2,9
   22d04:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   22d08:	e0bffe17 	ldw	r2,-8(fp)
   22d0c:	10000226 	beq	r2,zero,22d18 <alt_up_irda_check_parity+0x30>
   22d10:	00bfffc4 	movi	r2,-1
   22d14:	00000106 	br	22d1c <alt_up_irda_check_parity+0x34>
   22d18:	0005883a 	mov	r2,zero
}
   22d1c:	e037883a 	mov	sp,fp
   22d20:	df000017 	ldw	fp,0(sp)
   22d24:	dec00104 	addi	sp,sp,4
   22d28:	f800283a 	ret

00022d2c <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   22d2c:	defffd04 	addi	sp,sp,-12
   22d30:	df000215 	stw	fp,8(sp)
   22d34:	df000204 	addi	fp,sp,8
   22d38:	e13ffe15 	stw	r4,-8(fp)
   22d3c:	2805883a 	mov	r2,r5
   22d40:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   22d44:	e0bffe17 	ldw	r2,-8(fp)
   22d48:	10800a17 	ldw	r2,40(r2)
   22d4c:	1007883a 	mov	r3,r2
   22d50:	e0bfff03 	ldbu	r2,-4(fp)
   22d54:	18800035 	stwio	r2,0(r3)
	return 0;
   22d58:	0005883a 	mov	r2,zero
}
   22d5c:	e037883a 	mov	sp,fp
   22d60:	df000017 	ldw	fp,0(sp)
   22d64:	dec00104 	addi	sp,sp,4
   22d68:	f800283a 	ret

00022d6c <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   22d6c:	defffa04 	addi	sp,sp,-24
   22d70:	dfc00515 	stw	ra,20(sp)
   22d74:	df000415 	stw	fp,16(sp)
   22d78:	df000404 	addi	fp,sp,16
   22d7c:	e13ffd15 	stw	r4,-12(fp)
   22d80:	e17ffe15 	stw	r5,-8(fp)
   22d84:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   22d88:	e0bffd17 	ldw	r2,-12(fp)
   22d8c:	10800a17 	ldw	r2,40(r2)
   22d90:	10800037 	ldwio	r2,0(r2)
   22d94:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   22d98:	e0bffc17 	ldw	r2,-16(fp)
   22d9c:	1007883a 	mov	r3,r2
   22da0:	e0bffe17 	ldw	r2,-8(fp)
   22da4:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   22da8:	e13ffc17 	ldw	r4,-16(fp)
   22dac:	0022ce80 	call	22ce8 <alt_up_irda_check_parity>
   22db0:	1007883a 	mov	r3,r2
   22db4:	e0bfff17 	ldw	r2,-4(fp)
   22db8:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   22dbc:	e0bffc17 	ldw	r2,-16(fp)
   22dc0:	10a0000c 	andi	r2,r2,32768
   22dc4:	1004d3fa 	srli	r2,r2,15
   22dc8:	10bfffc4 	addi	r2,r2,-1
}
   22dcc:	e037883a 	mov	sp,fp
   22dd0:	dfc00117 	ldw	ra,4(sp)
   22dd4:	df000017 	ldw	fp,0(sp)
   22dd8:	dec00204 	addi	sp,sp,8
   22ddc:	f800283a 	ret

00022de0 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   22de0:	defff804 	addi	sp,sp,-32
   22de4:	dfc00715 	stw	ra,28(sp)
   22de8:	df000615 	stw	fp,24(sp)
   22dec:	df000604 	addi	fp,sp,24
   22df0:	e13ffd15 	stw	r4,-12(fp)
   22df4:	e17ffe15 	stw	r5,-8(fp)
   22df8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   22dfc:	e0bffd17 	ldw	r2,-12(fp)
   22e00:	10800017 	ldw	r2,0(r2)
   22e04:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   22e08:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   22e0c:	00000e06 	br	22e48 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   22e10:	e0bffe17 	ldw	r2,-8(fp)
   22e14:	10c00044 	addi	r3,r2,1
   22e18:	e0fffe15 	stw	r3,-8(fp)
   22e1c:	e0fffc04 	addi	r3,fp,-16
   22e20:	e13ffb17 	ldw	r4,-20(fp)
   22e24:	100b883a 	mov	r5,r2
   22e28:	180d883a 	mov	r6,r3
   22e2c:	0022d6c0 	call	22d6c <alt_up_irda_read_data>
   22e30:	1000041e 	bne	r2,zero,22e44 <alt_up_irda_read_fd+0x64>
			count++;
   22e34:	e0bffa17 	ldw	r2,-24(fp)
   22e38:	10800044 	addi	r2,r2,1
   22e3c:	e0bffa15 	stw	r2,-24(fp)
   22e40:	00000106 	br	22e48 <alt_up_irda_read_fd+0x68>
		else
			break;
   22e44:	00000406 	br	22e58 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   22e48:	e0bfff17 	ldw	r2,-4(fp)
   22e4c:	10ffffc4 	addi	r3,r2,-1
   22e50:	e0ffff15 	stw	r3,-4(fp)
   22e54:	103fee1e 	bne	r2,zero,22e10 <__alt_mem_Flash_flash_data+0xf4022e10>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   22e58:	e0bffa17 	ldw	r2,-24(fp)
}
   22e5c:	e037883a 	mov	sp,fp
   22e60:	dfc00117 	ldw	ra,4(sp)
   22e64:	df000017 	ldw	fp,0(sp)
   22e68:	dec00204 	addi	sp,sp,8
   22e6c:	f800283a 	ret

00022e70 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   22e70:	defff904 	addi	sp,sp,-28
   22e74:	dfc00615 	stw	ra,24(sp)
   22e78:	df000515 	stw	fp,20(sp)
   22e7c:	df000504 	addi	fp,sp,20
   22e80:	e13ffd15 	stw	r4,-12(fp)
   22e84:	e17ffe15 	stw	r5,-8(fp)
   22e88:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   22e8c:	e0bffd17 	ldw	r2,-12(fp)
   22e90:	10800017 	ldw	r2,0(r2)
   22e94:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   22e98:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   22e9c:	00000e06 	br	22ed8 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   22ea0:	e0bffe17 	ldw	r2,-8(fp)
   22ea4:	10c00044 	addi	r3,r2,1
   22ea8:	e0fffe15 	stw	r3,-8(fp)
   22eac:	10800003 	ldbu	r2,0(r2)
   22eb0:	10803fcc 	andi	r2,r2,255
   22eb4:	e13ffc17 	ldw	r4,-16(fp)
   22eb8:	100b883a 	mov	r5,r2
   22ebc:	0022d2c0 	call	22d2c <alt_up_irda_write_data>
   22ec0:	1000041e 	bne	r2,zero,22ed4 <alt_up_irda_write_fd+0x64>
			count++;
   22ec4:	e0bffb17 	ldw	r2,-20(fp)
   22ec8:	10800044 	addi	r2,r2,1
   22ecc:	e0bffb15 	stw	r2,-20(fp)
   22ed0:	00000106 	br	22ed8 <alt_up_irda_write_fd+0x68>
		else
			break;
   22ed4:	00000406 	br	22ee8 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   22ed8:	e0bfff17 	ldw	r2,-4(fp)
   22edc:	10ffffc4 	addi	r3,r2,-1
   22ee0:	e0ffff15 	stw	r3,-4(fp)
   22ee4:	103fee1e 	bne	r2,zero,22ea0 <__alt_mem_Flash_flash_data+0xf4022ea0>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   22ee8:	e0bffb17 	ldw	r2,-20(fp)
}
   22eec:	e037883a 	mov	sp,fp
   22ef0:	dfc00117 	ldw	ra,4(sp)
   22ef4:	df000017 	ldw	fp,0(sp)
   22ef8:	dec00204 	addi	sp,sp,8
   22efc:	f800283a 	ret

00022f00 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   22f00:	defffc04 	addi	sp,sp,-16
   22f04:	dfc00315 	stw	ra,12(sp)
   22f08:	df000215 	stw	fp,8(sp)
   22f0c:	df000204 	addi	fp,sp,8
   22f10:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   22f14:	e13fff17 	ldw	r4,-4(fp)
   22f18:	014000b4 	movhi	r5,2
   22f1c:	295fba04 	addi	r5,r5,32488
   22f20:	0023fb00 	call	23fb0 <alt_find_dev>
   22f24:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   22f28:	e0bffe17 	ldw	r2,-8(fp)
}
   22f2c:	e037883a 	mov	sp,fp
   22f30:	dfc00117 	ldw	ra,4(sp)
   22f34:	df000017 	ldw	fp,0(sp)
   22f38:	dec00204 	addi	sp,sp,8
   22f3c:	f800283a 	ret

00022f40 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
   22f40:	defffc04 	addi	sp,sp,-16
   22f44:	dfc00315 	stw	ra,12(sp)
   22f48:	df000215 	stw	fp,8(sp)
   22f4c:	df000204 	addi	fp,sp,8
   22f50:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
   22f54:	e13fff17 	ldw	r4,-4(fp)
   22f58:	014000b4 	movhi	r5,2
   22f5c:	295fba04 	addi	r5,r5,32488
   22f60:	0023fb00 	call	23fb0 <alt_find_dev>
   22f64:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   22f68:	e0bffe17 	ldw	r2,-8(fp)
}
   22f6c:	e037883a 	mov	sp,fp
   22f70:	dfc00117 	ldw	ra,4(sp)
   22f74:	df000017 	ldw	fp,0(sp)
   22f78:	dec00204 	addi	sp,sp,8
   22f7c:	f800283a 	ret

00022f80 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   22f80:	defffd04 	addi	sp,sp,-12
   22f84:	df000215 	stw	fp,8(sp)
   22f88:	df000204 	addi	fp,sp,8
   22f8c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   22f90:	e0bfff17 	ldw	r2,-4(fp)
   22f94:	1080400c 	andi	r2,r2,256
   22f98:	1004d23a 	srli	r2,r2,8
   22f9c:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   22fa0:	e0bffe03 	ldbu	r2,-8(fp)
}
   22fa4:	e037883a 	mov	sp,fp
   22fa8:	df000017 	ldw	fp,0(sp)
   22fac:	dec00104 	addi	sp,sp,4
   22fb0:	f800283a 	ret

00022fb4 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   22fb4:	defffd04 	addi	sp,sp,-12
   22fb8:	df000215 	stw	fp,8(sp)
   22fbc:	df000204 	addi	fp,sp,8
   22fc0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   22fc4:	e0bfff17 	ldw	r2,-4(fp)
   22fc8:	1080004c 	andi	r2,r2,1
   22fcc:	e0bffe05 	stb	r2,-8(fp)
	return re;
   22fd0:	e0bffe03 	ldbu	r2,-8(fp)
}
   22fd4:	e037883a 	mov	sp,fp
   22fd8:	df000017 	ldw	fp,0(sp)
   22fdc:	dec00104 	addi	sp,sp,4
   22fe0:	f800283a 	ret

00022fe4 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   22fe4:	defffd04 	addi	sp,sp,-12
   22fe8:	df000215 	stw	fp,8(sp)
   22fec:	df000204 	addi	fp,sp,8
   22ff0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   22ff4:	e0bfff17 	ldw	r2,-4(fp)
   22ff8:	1081000c 	andi	r2,r2,1024
   22ffc:	1004d2ba 	srli	r2,r2,10
   23000:	e0bffe05 	stb	r2,-8(fp)
	return re;
   23004:	e0bffe03 	ldbu	r2,-8(fp)
}
   23008:	e037883a 	mov	sp,fp
   2300c:	df000017 	ldw	fp,0(sp)
   23010:	dec00104 	addi	sp,sp,4
   23014:	f800283a 	ret

00023018 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   23018:	defffd04 	addi	sp,sp,-12
   2301c:	df000215 	stw	fp,8(sp)
   23020:	df000204 	addi	fp,sp,8
   23024:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   23028:	e0bfff17 	ldw	r2,-4(fp)
   2302c:	1004d43a 	srli	r2,r2,16
   23030:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   23034:	e0bffe0b 	ldhu	r2,-8(fp)
}
   23038:	e037883a 	mov	sp,fp
   2303c:	df000017 	ldw	fp,0(sp)
   23040:	dec00104 	addi	sp,sp,4
   23044:	f800283a 	ret

00023048 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   23048:	defffd04 	addi	sp,sp,-12
   2304c:	df000215 	stw	fp,8(sp)
   23050:	df000204 	addi	fp,sp,8
   23054:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   23058:	e0bfff17 	ldw	r2,-4(fp)
   2305c:	10a0000c 	andi	r2,r2,32768
   23060:	1004d3fa 	srli	r2,r2,15
   23064:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   23068:	e0bffe03 	ldbu	r2,-8(fp)
}
   2306c:	e037883a 	mov	sp,fp
   23070:	df000017 	ldw	fp,0(sp)
   23074:	dec00104 	addi	sp,sp,4
   23078:	f800283a 	ret

0002307c <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   2307c:	defffd04 	addi	sp,sp,-12
   23080:	df000215 	stw	fp,8(sp)
   23084:	df000204 	addi	fp,sp,8
   23088:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   2308c:	e0bfff17 	ldw	r2,-4(fp)
   23090:	e0bffe05 	stb	r2,-8(fp)
	return data;
   23094:	e0bffe03 	ldbu	r2,-8(fp)
}
   23098:	e037883a 	mov	sp,fp
   2309c:	df000017 	ldw	fp,0(sp)
   230a0:	dec00104 	addi	sp,sp,4
   230a4:	f800283a 	ret

000230a8 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   230a8:	defffb04 	addi	sp,sp,-20
   230ac:	dfc00415 	stw	ra,16(sp)
   230b0:	df000315 	stw	fp,12(sp)
   230b4:	df000304 	addi	fp,sp,12
   230b8:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   230bc:	e13fff17 	ldw	r4,-4(fp)
   230c0:	01403fc4 	movi	r5,255
   230c4:	00233040 	call	23304 <alt_up_ps2_write_data_byte_with_ack>
   230c8:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   230cc:	e0bffd17 	ldw	r2,-12(fp)
   230d0:	1000211e 	bne	r2,zero,23158 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   230d4:	e0bffe04 	addi	r2,fp,-8
   230d8:	e13fff17 	ldw	r4,-4(fp)
   230dc:	100b883a 	mov	r5,r2
   230e0:	00233680 	call	23368 <alt_up_ps2_read_data_byte_timeout>
   230e4:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   230e8:	e0bffd17 	ldw	r2,-12(fp)
   230ec:	10001a1e 	bne	r2,zero,23158 <alt_up_ps2_init+0xb0>
   230f0:	e0bffe03 	ldbu	r2,-8(fp)
   230f4:	10803fcc 	andi	r2,r2,255
   230f8:	10802a98 	cmpnei	r2,r2,170
   230fc:	1000161e 	bne	r2,zero,23158 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   23100:	e0bffe04 	addi	r2,fp,-8
   23104:	e13fff17 	ldw	r4,-4(fp)
   23108:	100b883a 	mov	r5,r2
   2310c:	00233680 	call	23368 <alt_up_ps2_read_data_byte_timeout>
   23110:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   23114:	e0bffd17 	ldw	r2,-12(fp)
   23118:	10bfe318 	cmpnei	r2,r2,-116
   2311c:	1000041e 	bne	r2,zero,23130 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   23120:	e0bfff17 	ldw	r2,-4(fp)
   23124:	00c00044 	movi	r3,1
   23128:	10c00d15 	stw	r3,52(r2)
   2312c:	00000a06 	br	23158 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   23130:	e0bffd17 	ldw	r2,-12(fp)
   23134:	1000081e 	bne	r2,zero,23158 <alt_up_ps2_init+0xb0>
   23138:	e0bffe03 	ldbu	r2,-8(fp)
   2313c:	10803fcc 	andi	r2,r2,255
   23140:	1000051e 	bne	r2,zero,23158 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   23144:	e0bfff17 	ldw	r2,-4(fp)
   23148:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   2314c:	e13fff17 	ldw	r4,-4(fp)
   23150:	01403d04 	movi	r5,244
   23154:	00232200 	call	23220 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   23158:	e037883a 	mov	sp,fp
   2315c:	dfc00117 	ldw	ra,4(sp)
   23160:	df000017 	ldw	fp,0(sp)
   23164:	dec00204 	addi	sp,sp,8
   23168:	f800283a 	ret

0002316c <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   2316c:	defffd04 	addi	sp,sp,-12
   23170:	df000215 	stw	fp,8(sp)
   23174:	df000204 	addi	fp,sp,8
   23178:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   2317c:	e0bfff17 	ldw	r2,-4(fp)
   23180:	10800a17 	ldw	r2,40(r2)
   23184:	10800104 	addi	r2,r2,4
   23188:	10800037 	ldwio	r2,0(r2)
   2318c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   23190:	e0bffe17 	ldw	r2,-8(fp)
   23194:	10800054 	ori	r2,r2,1
   23198:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   2319c:	e0bfff17 	ldw	r2,-4(fp)
   231a0:	10800a17 	ldw	r2,40(r2)
   231a4:	10800104 	addi	r2,r2,4
   231a8:	1007883a 	mov	r3,r2
   231ac:	e0bffe17 	ldw	r2,-8(fp)
   231b0:	18800035 	stwio	r2,0(r3)
}
   231b4:	e037883a 	mov	sp,fp
   231b8:	df000017 	ldw	fp,0(sp)
   231bc:	dec00104 	addi	sp,sp,4
   231c0:	f800283a 	ret

000231c4 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   231c4:	defffd04 	addi	sp,sp,-12
   231c8:	df000215 	stw	fp,8(sp)
   231cc:	df000204 	addi	fp,sp,8
   231d0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   231d4:	e0bfff17 	ldw	r2,-4(fp)
   231d8:	10800a17 	ldw	r2,40(r2)
   231dc:	10800104 	addi	r2,r2,4
   231e0:	10800037 	ldwio	r2,0(r2)
   231e4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   231e8:	e0fffe17 	ldw	r3,-8(fp)
   231ec:	00bfff84 	movi	r2,-2
   231f0:	1884703a 	and	r2,r3,r2
   231f4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   231f8:	e0bfff17 	ldw	r2,-4(fp)
   231fc:	10800a17 	ldw	r2,40(r2)
   23200:	10800104 	addi	r2,r2,4
   23204:	1007883a 	mov	r3,r2
   23208:	e0bffe17 	ldw	r2,-8(fp)
   2320c:	18800035 	stwio	r2,0(r3)
}
   23210:	e037883a 	mov	sp,fp
   23214:	df000017 	ldw	fp,0(sp)
   23218:	dec00104 	addi	sp,sp,4
   2321c:	f800283a 	ret

00023220 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   23220:	defffb04 	addi	sp,sp,-20
   23224:	dfc00415 	stw	ra,16(sp)
   23228:	df000315 	stw	fp,12(sp)
   2322c:	df000304 	addi	fp,sp,12
   23230:	e13ffe15 	stw	r4,-8(fp)
   23234:	2805883a 	mov	r2,r5
   23238:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   2323c:	e0bffe17 	ldw	r2,-8(fp)
   23240:	10800a17 	ldw	r2,40(r2)
   23244:	1007883a 	mov	r3,r2
   23248:	e0bfff03 	ldbu	r2,-4(fp)
   2324c:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   23250:	e0bffe17 	ldw	r2,-8(fp)
   23254:	10800a17 	ldw	r2,40(r2)
   23258:	10800104 	addi	r2,r2,4
   2325c:	10800037 	ldwio	r2,0(r2)
   23260:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   23264:	e13ffd17 	ldw	r4,-12(fp)
   23268:	0022fe40 	call	22fe4 <read_CE_bit>
   2326c:	10803fcc 	andi	r2,r2,255
   23270:	10000226 	beq	r2,zero,2327c <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   23274:	00bffec4 	movi	r2,-5
   23278:	00000106 	br	23280 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   2327c:	0005883a 	mov	r2,zero
}
   23280:	e037883a 	mov	sp,fp
   23284:	dfc00117 	ldw	ra,4(sp)
   23288:	df000017 	ldw	fp,0(sp)
   2328c:	dec00204 	addi	sp,sp,8
   23290:	f800283a 	ret

00023294 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   23294:	defffc04 	addi	sp,sp,-16
   23298:	dfc00315 	stw	ra,12(sp)
   2329c:	df000215 	stw	fp,8(sp)
   232a0:	df000204 	addi	fp,sp,8
   232a4:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   232a8:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   232ac:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   232b0:	e0bffe44 	addi	r2,fp,-7
   232b4:	e13fff17 	ldw	r4,-4(fp)
   232b8:	100b883a 	mov	r5,r2
   232bc:	00233680 	call	23368 <alt_up_ps2_read_data_byte_timeout>
   232c0:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   232c4:	e0bffe03 	ldbu	r2,-8(fp)
   232c8:	1000061e 	bne	r2,zero,232e4 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   232cc:	e0bffe43 	ldbu	r2,-7(fp)
   232d0:	10803fcc 	andi	r2,r2,255
   232d4:	10803e98 	cmpnei	r2,r2,250
   232d8:	1000041e 	bne	r2,zero,232ec <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   232dc:	0005883a 	mov	r2,zero
   232e0:	00000306 	br	232f0 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   232e4:	e0bffe03 	ldbu	r2,-8(fp)
   232e8:	00000106 	br	232f0 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   232ec:	003ff006 	br	232b0 <__alt_mem_Flash_flash_data+0xf40232b0>
	return -ETIMEDOUT;
}
   232f0:	e037883a 	mov	sp,fp
   232f4:	dfc00117 	ldw	ra,4(sp)
   232f8:	df000017 	ldw	fp,0(sp)
   232fc:	dec00204 	addi	sp,sp,8
   23300:	f800283a 	ret

00023304 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   23304:	defffa04 	addi	sp,sp,-24
   23308:	dfc00515 	stw	ra,20(sp)
   2330c:	df000415 	stw	fp,16(sp)
   23310:	df000404 	addi	fp,sp,16
   23314:	e13ffe15 	stw	r4,-8(fp)
   23318:	2805883a 	mov	r2,r5
   2331c:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   23320:	e0bfff03 	ldbu	r2,-4(fp)
   23324:	e13ffe17 	ldw	r4,-8(fp)
   23328:	100b883a 	mov	r5,r2
   2332c:	00232200 	call	23220 <alt_up_ps2_write_data_byte>
   23330:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   23334:	e0bffc17 	ldw	r2,-16(fp)
   23338:	10000226 	beq	r2,zero,23344 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   2333c:	e0bffc17 	ldw	r2,-16(fp)
   23340:	00000406 	br	23354 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   23344:	e13ffe17 	ldw	r4,-8(fp)
   23348:	00232940 	call	23294 <alt_up_ps2_wait_for_ack>
   2334c:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   23350:	e0bffd17 	ldw	r2,-12(fp)
}
   23354:	e037883a 	mov	sp,fp
   23358:	dfc00117 	ldw	ra,4(sp)
   2335c:	df000017 	ldw	fp,0(sp)
   23360:	dec00204 	addi	sp,sp,8
   23364:	f800283a 	ret

00023368 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   23368:	defffa04 	addi	sp,sp,-24
   2336c:	dfc00515 	stw	ra,20(sp)
   23370:	df000415 	stw	fp,16(sp)
   23374:	df000404 	addi	fp,sp,16
   23378:	e13ffe15 	stw	r4,-8(fp)
   2337c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   23380:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   23384:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   23388:	e0bffc17 	ldw	r2,-16(fp)
   2338c:	10800044 	addi	r2,r2,1
   23390:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   23394:	e0bffe17 	ldw	r2,-8(fp)
   23398:	10800a17 	ldw	r2,40(r2)
   2339c:	10800037 	ldwio	r2,0(r2)
   233a0:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   233a4:	e13ffd17 	ldw	r4,-12(fp)
   233a8:	00230480 	call	23048 <read_data_valid>
   233ac:	10803fcc 	andi	r2,r2,255
   233b0:	10000726 	beq	r2,zero,233d0 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   233b4:	e13ffd17 	ldw	r4,-12(fp)
   233b8:	002307c0 	call	2307c <read_data_byte>
   233bc:	1007883a 	mov	r3,r2
   233c0:	e0bfff17 	ldw	r2,-4(fp)
   233c4:	10c00005 	stb	r3,0(r2)
			return 0;
   233c8:	0005883a 	mov	r2,zero
   233cc:	00000a06 	br	233f8 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   233d0:	e0bffe17 	ldw	r2,-8(fp)
   233d4:	10800c17 	ldw	r2,48(r2)
   233d8:	10000626 	beq	r2,zero,233f4 <alt_up_ps2_read_data_byte_timeout+0x8c>
   233dc:	e0bffe17 	ldw	r2,-8(fp)
   233e0:	10c00c17 	ldw	r3,48(r2)
   233e4:	e0bffc17 	ldw	r2,-16(fp)
   233e8:	1880022e 	bgeu	r3,r2,233f4 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   233ec:	00bfe304 	movi	r2,-116
   233f0:	00000106 	br	233f8 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   233f4:	003fe406 	br	23388 <__alt_mem_Flash_flash_data+0xf4023388>
}
   233f8:	e037883a 	mov	sp,fp
   233fc:	dfc00117 	ldw	ra,4(sp)
   23400:	df000017 	ldw	fp,0(sp)
   23404:	dec00204 	addi	sp,sp,8
   23408:	f800283a 	ret

0002340c <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   2340c:	defffb04 	addi	sp,sp,-20
   23410:	dfc00415 	stw	ra,16(sp)
   23414:	df000315 	stw	fp,12(sp)
   23418:	df000304 	addi	fp,sp,12
   2341c:	e13ffe15 	stw	r4,-8(fp)
   23420:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   23424:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   23428:	e0bffe17 	ldw	r2,-8(fp)
   2342c:	10800a17 	ldw	r2,40(r2)
   23430:	10800037 	ldwio	r2,0(r2)
   23434:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   23438:	e13ffd17 	ldw	r4,-12(fp)
   2343c:	00230480 	call	23048 <read_data_valid>
   23440:	10803fcc 	andi	r2,r2,255
   23444:	10000726 	beq	r2,zero,23464 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   23448:	e13ffd17 	ldw	r4,-12(fp)
   2344c:	002307c0 	call	2307c <read_data_byte>
   23450:	1007883a 	mov	r3,r2
   23454:	e0bfff17 	ldw	r2,-4(fp)
   23458:	10c00005 	stb	r3,0(r2)
		return 0;
   2345c:	0005883a 	mov	r2,zero
   23460:	00000106 	br	23468 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   23464:	00bfffc4 	movi	r2,-1
}
   23468:	e037883a 	mov	sp,fp
   2346c:	dfc00117 	ldw	ra,4(sp)
   23470:	df000017 	ldw	fp,0(sp)
   23474:	dec00204 	addi	sp,sp,8
   23478:	f800283a 	ret

0002347c <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   2347c:	defffb04 	addi	sp,sp,-20
   23480:	dfc00415 	stw	ra,16(sp)
   23484:	df000315 	stw	fp,12(sp)
   23488:	df000304 	addi	fp,sp,12
   2348c:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   23490:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   23494:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   23498:	e0bfff17 	ldw	r2,-4(fp)
   2349c:	10800a17 	ldw	r2,40(r2)
   234a0:	10800037 	ldwio	r2,0(r2)
   234a4:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   234a8:	e13ffe17 	ldw	r4,-8(fp)
   234ac:	00230180 	call	23018 <read_num_bytes_available>
   234b0:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   234b4:	e0bffd0b 	ldhu	r2,-12(fp)
   234b8:	103ff71e 	bne	r2,zero,23498 <__alt_mem_Flash_flash_data+0xf4023498>
}
   234bc:	e037883a 	mov	sp,fp
   234c0:	dfc00117 	ldw	ra,4(sp)
   234c4:	df000017 	ldw	fp,0(sp)
   234c8:	dec00204 	addi	sp,sp,8
   234cc:	f800283a 	ret

000234d0 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   234d0:	defff804 	addi	sp,sp,-32
   234d4:	dfc00715 	stw	ra,28(sp)
   234d8:	df000615 	stw	fp,24(sp)
   234dc:	df000604 	addi	fp,sp,24
   234e0:	e13ffd15 	stw	r4,-12(fp)
   234e4:	e17ffe15 	stw	r5,-8(fp)
   234e8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   234ec:	e0bffd17 	ldw	r2,-12(fp)
   234f0:	10800017 	ldw	r2,0(r2)
   234f4:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   234f8:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   234fc:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   23500:	e0fffc17 	ldw	r3,-16(fp)
   23504:	e0bfff17 	ldw	r2,-4(fp)
   23508:	18bffd16 	blt	r3,r2,23500 <__alt_mem_Flash_flash_data+0xf4023500>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   2350c:	e0bffe17 	ldw	r2,-8(fp)
   23510:	10c00044 	addi	r3,r2,1
   23514:	e0fffe15 	stw	r3,-8(fp)
   23518:	e13ffa17 	ldw	r4,-24(fp)
   2351c:	100b883a 	mov	r5,r2
   23520:	00233680 	call	23368 <alt_up_ps2_read_data_byte_timeout>
   23524:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   23528:	e0bffb17 	ldw	r2,-20(fp)
   2352c:	10000226 	beq	r2,zero,23538 <alt_up_ps2_read_fd+0x68>
			return count;
   23530:	e0bffc17 	ldw	r2,-16(fp)
   23534:	00000406 	br	23548 <alt_up_ps2_read_fd+0x78>
		count++;
   23538:	e0bffc17 	ldw	r2,-16(fp)
   2353c:	10800044 	addi	r2,r2,1
   23540:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   23544:	e0bffc17 	ldw	r2,-16(fp)
}
   23548:	e037883a 	mov	sp,fp
   2354c:	dfc00117 	ldw	ra,4(sp)
   23550:	df000017 	ldw	fp,0(sp)
   23554:	dec00204 	addi	sp,sp,8
   23558:	f800283a 	ret

0002355c <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   2355c:	defff804 	addi	sp,sp,-32
   23560:	dfc00715 	stw	ra,28(sp)
   23564:	df000615 	stw	fp,24(sp)
   23568:	df000604 	addi	fp,sp,24
   2356c:	e13ffd15 	stw	r4,-12(fp)
   23570:	e17ffe15 	stw	r5,-8(fp)
   23574:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   23578:	e0bffd17 	ldw	r2,-12(fp)
   2357c:	10800017 	ldw	r2,0(r2)
   23580:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   23584:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   23588:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   2358c:	00001006 	br	235d0 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   23590:	e0bffe17 	ldw	r2,-8(fp)
   23594:	10c00044 	addi	r3,r2,1
   23598:	e0fffe15 	stw	r3,-8(fp)
   2359c:	10800003 	ldbu	r2,0(r2)
   235a0:	10803fcc 	andi	r2,r2,255
   235a4:	e13ffb17 	ldw	r4,-20(fp)
   235a8:	100b883a 	mov	r5,r2
   235ac:	00232200 	call	23220 <alt_up_ps2_write_data_byte>
   235b0:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   235b4:	e0bffc17 	ldw	r2,-16(fp)
   235b8:	10000226 	beq	r2,zero,235c4 <alt_up_ps2_write_fd+0x68>
			return count;
   235bc:	e0bffa17 	ldw	r2,-24(fp)
   235c0:	00000706 	br	235e0 <alt_up_ps2_write_fd+0x84>
		count++;
   235c4:	e0bffa17 	ldw	r2,-24(fp)
   235c8:	10800044 	addi	r2,r2,1
   235cc:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   235d0:	e0fffa17 	ldw	r3,-24(fp)
   235d4:	e0bfff17 	ldw	r2,-4(fp)
   235d8:	18bfed16 	blt	r3,r2,23590 <__alt_mem_Flash_flash_data+0xf4023590>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   235dc:	e0bffa17 	ldw	r2,-24(fp)
}
   235e0:	e037883a 	mov	sp,fp
   235e4:	dfc00117 	ldw	ra,4(sp)
   235e8:	df000017 	ldw	fp,0(sp)
   235ec:	dec00204 	addi	sp,sp,8
   235f0:	f800283a 	ret

000235f4 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   235f4:	defffc04 	addi	sp,sp,-16
   235f8:	dfc00315 	stw	ra,12(sp)
   235fc:	df000215 	stw	fp,8(sp)
   23600:	df000204 	addi	fp,sp,8
   23604:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   23608:	e13fff17 	ldw	r4,-4(fp)
   2360c:	014000b4 	movhi	r5,2
   23610:	295fba04 	addi	r5,r5,32488
   23614:	0023fb00 	call	23fb0 <alt_find_dev>
   23618:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   2361c:	e0bffe17 	ldw	r2,-8(fp)
}
   23620:	e037883a 	mov	sp,fp
   23624:	dfc00117 	ldw	ra,4(sp)
   23628:	df000017 	ldw	fp,0(sp)
   2362c:	dec00204 	addi	sp,sp,8
   23630:	f800283a 	ret

00023634 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   23634:	defffd04 	addi	sp,sp,-12
   23638:	df000215 	stw	fp,8(sp)
   2363c:	df000204 	addi	fp,sp,8
   23640:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   23644:	e0bfff17 	ldw	r2,-4(fp)
   23648:	10800a17 	ldw	r2,40(r2)
   2364c:	10800104 	addi	r2,r2,4
   23650:	10800037 	ldwio	r2,0(r2)
   23654:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   23658:	e0bffe17 	ldw	r2,-8(fp)
   2365c:	10800054 	ori	r2,r2,1
   23660:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   23664:	e0bfff17 	ldw	r2,-4(fp)
   23668:	10800a17 	ldw	r2,40(r2)
   2366c:	10800104 	addi	r2,r2,4
   23670:	1007883a 	mov	r3,r2
   23674:	e0bffe17 	ldw	r2,-8(fp)
   23678:	18800035 	stwio	r2,0(r3)
}
   2367c:	e037883a 	mov	sp,fp
   23680:	df000017 	ldw	fp,0(sp)
   23684:	dec00104 	addi	sp,sp,4
   23688:	f800283a 	ret

0002368c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   2368c:	defffd04 	addi	sp,sp,-12
   23690:	df000215 	stw	fp,8(sp)
   23694:	df000204 	addi	fp,sp,8
   23698:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   2369c:	e0bfff17 	ldw	r2,-4(fp)
   236a0:	10800a17 	ldw	r2,40(r2)
   236a4:	10800104 	addi	r2,r2,4
   236a8:	10800037 	ldwio	r2,0(r2)
   236ac:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   236b0:	e0fffe17 	ldw	r3,-8(fp)
   236b4:	00bfff84 	movi	r2,-2
   236b8:	1884703a 	and	r2,r3,r2
   236bc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   236c0:	e0bfff17 	ldw	r2,-4(fp)
   236c4:	10800a17 	ldw	r2,40(r2)
   236c8:	10800104 	addi	r2,r2,4
   236cc:	1007883a 	mov	r3,r2
   236d0:	e0bffe17 	ldw	r2,-8(fp)
   236d4:	18800035 	stwio	r2,0(r3)
}
   236d8:	e037883a 	mov	sp,fp
   236dc:	df000017 	ldw	fp,0(sp)
   236e0:	dec00104 	addi	sp,sp,4
   236e4:	f800283a 	ret

000236e8 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   236e8:	defffd04 	addi	sp,sp,-12
   236ec:	df000215 	stw	fp,8(sp)
   236f0:	df000204 	addi	fp,sp,8
   236f4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   236f8:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   236fc:	e0bfff17 	ldw	r2,-4(fp)
   23700:	10800a17 	ldw	r2,40(r2)
   23704:	10800084 	addi	r2,r2,2
   23708:	1080002b 	ldhuio	r2,0(r2)
   2370c:	10bfffcc 	andi	r2,r2,65535
   23710:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   23714:	e0bffe0b 	ldhu	r2,-8(fp)
}
   23718:	e037883a 	mov	sp,fp
   2371c:	df000017 	ldw	fp,0(sp)
   23720:	dec00104 	addi	sp,sp,4
   23724:	f800283a 	ret

00023728 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   23728:	defffd04 	addi	sp,sp,-12
   2372c:	df000215 	stw	fp,8(sp)
   23730:	df000204 	addi	fp,sp,8
   23734:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   23738:	e0bfff17 	ldw	r2,-4(fp)
   2373c:	10800a17 	ldw	r2,40(r2)
   23740:	10800104 	addi	r2,r2,4
   23744:	10800037 	ldwio	r2,0(r2)
   23748:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   2374c:	e0bffe17 	ldw	r2,-8(fp)
   23750:	1004d43a 	srli	r2,r2,16
}
   23754:	e037883a 	mov	sp,fp
   23758:	df000017 	ldw	fp,0(sp)
   2375c:	dec00104 	addi	sp,sp,4
   23760:	f800283a 	ret

00023764 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   23764:	defffd04 	addi	sp,sp,-12
   23768:	df000215 	stw	fp,8(sp)
   2376c:	df000204 	addi	fp,sp,8
   23770:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   23774:	e0bfff17 	ldw	r2,-4(fp)
   23778:	1080800c 	andi	r2,r2,512
   2377c:	1004d27a 	srli	r2,r2,9
   23780:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   23784:	e0bffe17 	ldw	r2,-8(fp)
   23788:	10000226 	beq	r2,zero,23794 <alt_up_rs232_check_parity+0x30>
   2378c:	00bfffc4 	movi	r2,-1
   23790:	00000106 	br	23798 <alt_up_rs232_check_parity+0x34>
   23794:	0005883a 	mov	r2,zero
}
   23798:	e037883a 	mov	sp,fp
   2379c:	df000017 	ldw	fp,0(sp)
   237a0:	dec00104 	addi	sp,sp,4
   237a4:	f800283a 	ret

000237a8 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   237a8:	defffd04 	addi	sp,sp,-12
   237ac:	df000215 	stw	fp,8(sp)
   237b0:	df000204 	addi	fp,sp,8
   237b4:	e13ffe15 	stw	r4,-8(fp)
   237b8:	2805883a 	mov	r2,r5
   237bc:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   237c0:	e0bffe17 	ldw	r2,-8(fp)
   237c4:	10800a17 	ldw	r2,40(r2)
   237c8:	1007883a 	mov	r3,r2
   237cc:	e0bfff03 	ldbu	r2,-4(fp)
   237d0:	18800035 	stwio	r2,0(r3)
	return 0;
   237d4:	0005883a 	mov	r2,zero
}
   237d8:	e037883a 	mov	sp,fp
   237dc:	df000017 	ldw	fp,0(sp)
   237e0:	dec00104 	addi	sp,sp,4
   237e4:	f800283a 	ret

000237e8 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   237e8:	defffa04 	addi	sp,sp,-24
   237ec:	dfc00515 	stw	ra,20(sp)
   237f0:	df000415 	stw	fp,16(sp)
   237f4:	df000404 	addi	fp,sp,16
   237f8:	e13ffd15 	stw	r4,-12(fp)
   237fc:	e17ffe15 	stw	r5,-8(fp)
   23800:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   23804:	e0bffd17 	ldw	r2,-12(fp)
   23808:	10800a17 	ldw	r2,40(r2)
   2380c:	10800037 	ldwio	r2,0(r2)
   23810:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   23814:	e0bffc17 	ldw	r2,-16(fp)
   23818:	1007883a 	mov	r3,r2
   2381c:	e0bffe17 	ldw	r2,-8(fp)
   23820:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   23824:	e13ffc17 	ldw	r4,-16(fp)
   23828:	00237640 	call	23764 <alt_up_rs232_check_parity>
   2382c:	1007883a 	mov	r3,r2
   23830:	e0bfff17 	ldw	r2,-4(fp)
   23834:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   23838:	e0bffc17 	ldw	r2,-16(fp)
   2383c:	10a0000c 	andi	r2,r2,32768
   23840:	1004d3fa 	srli	r2,r2,15
   23844:	10bfffc4 	addi	r2,r2,-1
}
   23848:	e037883a 	mov	sp,fp
   2384c:	dfc00117 	ldw	ra,4(sp)
   23850:	df000017 	ldw	fp,0(sp)
   23854:	dec00204 	addi	sp,sp,8
   23858:	f800283a 	ret

0002385c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   2385c:	defff804 	addi	sp,sp,-32
   23860:	dfc00715 	stw	ra,28(sp)
   23864:	df000615 	stw	fp,24(sp)
   23868:	df000604 	addi	fp,sp,24
   2386c:	e13ffd15 	stw	r4,-12(fp)
   23870:	e17ffe15 	stw	r5,-8(fp)
   23874:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   23878:	e0bffd17 	ldw	r2,-12(fp)
   2387c:	10800017 	ldw	r2,0(r2)
   23880:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   23884:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   23888:	00000e06 	br	238c4 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   2388c:	e0bffe17 	ldw	r2,-8(fp)
   23890:	10c00044 	addi	r3,r2,1
   23894:	e0fffe15 	stw	r3,-8(fp)
   23898:	e0fffc04 	addi	r3,fp,-16
   2389c:	e13ffb17 	ldw	r4,-20(fp)
   238a0:	100b883a 	mov	r5,r2
   238a4:	180d883a 	mov	r6,r3
   238a8:	00237e80 	call	237e8 <alt_up_rs232_read_data>
   238ac:	1000041e 	bne	r2,zero,238c0 <alt_up_rs232_read_fd+0x64>
			count++;
   238b0:	e0bffa17 	ldw	r2,-24(fp)
   238b4:	10800044 	addi	r2,r2,1
   238b8:	e0bffa15 	stw	r2,-24(fp)
   238bc:	00000106 	br	238c4 <alt_up_rs232_read_fd+0x68>
		else
			break;
   238c0:	00000406 	br	238d4 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   238c4:	e0bfff17 	ldw	r2,-4(fp)
   238c8:	10ffffc4 	addi	r3,r2,-1
   238cc:	e0ffff15 	stw	r3,-4(fp)
   238d0:	103fee1e 	bne	r2,zero,2388c <__alt_mem_Flash_flash_data+0xf402388c>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   238d4:	e0bffa17 	ldw	r2,-24(fp)
}
   238d8:	e037883a 	mov	sp,fp
   238dc:	dfc00117 	ldw	ra,4(sp)
   238e0:	df000017 	ldw	fp,0(sp)
   238e4:	dec00204 	addi	sp,sp,8
   238e8:	f800283a 	ret

000238ec <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   238ec:	defff904 	addi	sp,sp,-28
   238f0:	dfc00615 	stw	ra,24(sp)
   238f4:	df000515 	stw	fp,20(sp)
   238f8:	df000504 	addi	fp,sp,20
   238fc:	e13ffd15 	stw	r4,-12(fp)
   23900:	e17ffe15 	stw	r5,-8(fp)
   23904:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   23908:	e0bffd17 	ldw	r2,-12(fp)
   2390c:	10800017 	ldw	r2,0(r2)
   23910:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   23914:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   23918:	00000f06 	br	23958 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   2391c:	e0bffe17 	ldw	r2,-8(fp)
   23920:	10800003 	ldbu	r2,0(r2)
   23924:	10803fcc 	andi	r2,r2,255
   23928:	e13ffc17 	ldw	r4,-16(fp)
   2392c:	100b883a 	mov	r5,r2
   23930:	00237a80 	call	237a8 <alt_up_rs232_write_data>
   23934:	1000071e 	bne	r2,zero,23954 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   23938:	e0bffb17 	ldw	r2,-20(fp)
   2393c:	10800044 	addi	r2,r2,1
   23940:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   23944:	e0bffe17 	ldw	r2,-8(fp)
   23948:	10800044 	addi	r2,r2,1
   2394c:	e0bffe15 	stw	r2,-8(fp)
   23950:	00000106 	br	23958 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   23954:	00000406 	br	23968 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   23958:	e0bfff17 	ldw	r2,-4(fp)
   2395c:	10ffffc4 	addi	r3,r2,-1
   23960:	e0ffff15 	stw	r3,-4(fp)
   23964:	103fed1e 	bne	r2,zero,2391c <__alt_mem_Flash_flash_data+0xf402391c>
			ptr++;
		}
		else
			break;
	}
	return count;
   23968:	e0bffb17 	ldw	r2,-20(fp)
}
   2396c:	e037883a 	mov	sp,fp
   23970:	dfc00117 	ldw	ra,4(sp)
   23974:	df000017 	ldw	fp,0(sp)
   23978:	dec00204 	addi	sp,sp,8
   2397c:	f800283a 	ret

00023980 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   23980:	defffc04 	addi	sp,sp,-16
   23984:	dfc00315 	stw	ra,12(sp)
   23988:	df000215 	stw	fp,8(sp)
   2398c:	df000204 	addi	fp,sp,8
   23990:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   23994:	e13fff17 	ldw	r4,-4(fp)
   23998:	014000b4 	movhi	r5,2
   2399c:	295fba04 	addi	r5,r5,32488
   239a0:	0023fb00 	call	23fb0 <alt_find_dev>
   239a4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   239a8:	e0bffe17 	ldw	r2,-8(fp)
}
   239ac:	e037883a 	mov	sp,fp
   239b0:	dfc00117 	ldw	ra,4(sp)
   239b4:	df000017 	ldw	fp,0(sp)
   239b8:	dec00204 	addi	sp,sp,8
   239bc:	f800283a 	ret

000239c0 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   239c0:	defffc04 	addi	sp,sp,-16
   239c4:	dfc00315 	stw	ra,12(sp)
   239c8:	df000215 	stw	fp,8(sp)
   239cc:	df000204 	addi	fp,sp,8
   239d0:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   239d4:	e0bfff17 	ldw	r2,-4(fp)
   239d8:	10800217 	ldw	r2,8(r2)
   239dc:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   239e0:	00000b06 	br	23a10 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   239e4:	e13ffe17 	ldw	r4,-8(fp)
   239e8:	014000b4 	movhi	r5,2
   239ec:	29580d04 	addi	r5,r5,24628
   239f0:	000d9180 	call	d918 <strcmp>
   239f4:	1000031e 	bne	r2,zero,23a04 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   239f8:	e0bffe17 	ldw	r2,-8(fp)
   239fc:	10000005 	stb	zero,0(r2)
			break;
   23a00:	00000906 	br	23a28 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   23a04:	e0bffe17 	ldw	r2,-8(fp)
   23a08:	10800044 	addi	r2,r2,1
   23a0c:	e0bffe15 	stw	r2,-8(fp)
   23a10:	e0bffe17 	ldw	r2,-8(fp)
   23a14:	10800003 	ldbu	r2,0(r2)
   23a18:	10803fcc 	andi	r2,r2,255
   23a1c:	1080201c 	xori	r2,r2,128
   23a20:	10bfe004 	addi	r2,r2,-128
   23a24:	103fef1e 	bne	r2,zero,239e4 <__alt_mem_Flash_flash_data+0xf40239e4>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   23a28:	0001883a 	nop
}
   23a2c:	e037883a 	mov	sp,fp
   23a30:	dfc00117 	ldw	ra,4(sp)
   23a34:	df000017 	ldw	fp,0(sp)
   23a38:	dec00204 	addi	sp,sp,8
   23a3c:	f800283a 	ret

00023a40 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   23a40:	defffc04 	addi	sp,sp,-16
   23a44:	dfc00315 	stw	ra,12(sp)
   23a48:	df000215 	stw	fp,8(sp)
   23a4c:	df000204 	addi	fp,sp,8
   23a50:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   23a54:	e13fff17 	ldw	r4,-4(fp)
   23a58:	014000b4 	movhi	r5,2
   23a5c:	295fba04 	addi	r5,r5,32488
   23a60:	0023fb00 	call	23fb0 <alt_find_dev>
   23a64:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   23a68:	e0bffe17 	ldw	r2,-8(fp)
}
   23a6c:	e037883a 	mov	sp,fp
   23a70:	dfc00117 	ldw	ra,4(sp)
   23a74:	df000017 	ldw	fp,0(sp)
   23a78:	dec00204 	addi	sp,sp,8
   23a7c:	f800283a 	ret

00023a80 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   23a80:	defffa04 	addi	sp,sp,-24
   23a84:	df000515 	stw	fp,20(sp)
   23a88:	df000504 	addi	fp,sp,20
   23a8c:	e13ffc15 	stw	r4,-16(fp)
   23a90:	2805883a 	mov	r2,r5
   23a94:	e1bffe15 	stw	r6,-8(fp)
   23a98:	e1ffff15 	stw	r7,-4(fp)
   23a9c:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   23aa0:	e0bffc17 	ldw	r2,-16(fp)
   23aa4:	10800c17 	ldw	r2,48(r2)
   23aa8:	e0fffe17 	ldw	r3,-8(fp)
   23aac:	1880042e 	bgeu	r3,r2,23ac0 <alt_up_char_buffer_draw+0x40>
   23ab0:	e0bffc17 	ldw	r2,-16(fp)
   23ab4:	10800d17 	ldw	r2,52(r2)
   23ab8:	e0ffff17 	ldw	r3,-4(fp)
   23abc:	18800236 	bltu	r3,r2,23ac8 <alt_up_char_buffer_draw+0x48>
		return -1;
   23ac0:	00bfffc4 	movi	r2,-1
   23ac4:	00001d06 	br	23b3c <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   23ac8:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   23acc:	e0bffc17 	ldw	r2,-16(fp)
   23ad0:	10c00f17 	ldw	r3,60(r2)
   23ad4:	e0bffe17 	ldw	r2,-8(fp)
   23ad8:	1884703a 	and	r2,r3,r2
   23adc:	e0fffc17 	ldw	r3,-16(fp)
   23ae0:	18c00e17 	ldw	r3,56(r3)
   23ae4:	10c4983a 	sll	r2,r2,r3
   23ae8:	e0fffb17 	ldw	r3,-20(fp)
   23aec:	1884b03a 	or	r2,r3,r2
   23af0:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   23af4:	e0bffc17 	ldw	r2,-16(fp)
   23af8:	10c01117 	ldw	r3,68(r2)
   23afc:	e0bfff17 	ldw	r2,-4(fp)
   23b00:	1884703a 	and	r2,r3,r2
   23b04:	e0fffc17 	ldw	r3,-16(fp)
   23b08:	18c01017 	ldw	r3,64(r3)
   23b0c:	10c4983a 	sll	r2,r2,r3
   23b10:	e0fffb17 	ldw	r3,-20(fp)
   23b14:	1884b03a 	or	r2,r3,r2
   23b18:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   23b1c:	e0bffc17 	ldw	r2,-16(fp)
   23b20:	10c00b17 	ldw	r3,44(r2)
   23b24:	e0bffb17 	ldw	r2,-20(fp)
   23b28:	1885883a 	add	r2,r3,r2
   23b2c:	1007883a 	mov	r3,r2
   23b30:	e0bffd03 	ldbu	r2,-12(fp)
   23b34:	18800025 	stbio	r2,0(r3)

	return 0;
   23b38:	0005883a 	mov	r2,zero
}
   23b3c:	e037883a 	mov	sp,fp
   23b40:	df000017 	ldw	fp,0(sp)
   23b44:	dec00104 	addi	sp,sp,4
   23b48:	f800283a 	ret

00023b4c <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   23b4c:	defffa04 	addi	sp,sp,-24
   23b50:	df000515 	stw	fp,20(sp)
   23b54:	df000504 	addi	fp,sp,20
   23b58:	e13ffc15 	stw	r4,-16(fp)
   23b5c:	e17ffd15 	stw	r5,-12(fp)
   23b60:	e1bffe15 	stw	r6,-8(fp)
   23b64:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   23b68:	e0bffc17 	ldw	r2,-16(fp)
   23b6c:	10800c17 	ldw	r2,48(r2)
   23b70:	e0fffe17 	ldw	r3,-8(fp)
   23b74:	1880042e 	bgeu	r3,r2,23b88 <alt_up_char_buffer_string+0x3c>
   23b78:	e0bffc17 	ldw	r2,-16(fp)
   23b7c:	10800d17 	ldw	r2,52(r2)
   23b80:	e0ffff17 	ldw	r3,-4(fp)
   23b84:	18800236 	bltu	r3,r2,23b90 <alt_up_char_buffer_string+0x44>
		return -1;
   23b88:	00bfffc4 	movi	r2,-1
   23b8c:	00002b06 	br	23c3c <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   23b90:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   23b94:	e0bffc17 	ldw	r2,-16(fp)
   23b98:	10801017 	ldw	r2,64(r2)
   23b9c:	1007883a 	mov	r3,r2
   23ba0:	e0bfff17 	ldw	r2,-4(fp)
   23ba4:	10c6983a 	sll	r3,r2,r3
   23ba8:	e0bffe17 	ldw	r2,-8(fp)
   23bac:	1885883a 	add	r2,r3,r2
   23bb0:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   23bb4:	00001a06 	br	23c20 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   23bb8:	e0bffc17 	ldw	r2,-16(fp)
   23bbc:	10c00b17 	ldw	r3,44(r2)
   23bc0:	e0bffb17 	ldw	r2,-20(fp)
   23bc4:	1885883a 	add	r2,r3,r2
   23bc8:	1007883a 	mov	r3,r2
   23bcc:	e0bffd17 	ldw	r2,-12(fp)
   23bd0:	10800003 	ldbu	r2,0(r2)
   23bd4:	10803fcc 	andi	r2,r2,255
   23bd8:	1080201c 	xori	r2,r2,128
   23bdc:	10bfe004 	addi	r2,r2,-128
   23be0:	18800025 	stbio	r2,0(r3)
		++ptr;
   23be4:	e0bffd17 	ldw	r2,-12(fp)
   23be8:	10800044 	addi	r2,r2,1
   23bec:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   23bf0:	e0bffe17 	ldw	r2,-8(fp)
   23bf4:	10800044 	addi	r2,r2,1
   23bf8:	e0bffe15 	stw	r2,-8(fp)
   23bfc:	e0bffc17 	ldw	r2,-16(fp)
   23c00:	10800c17 	ldw	r2,48(r2)
   23c04:	e0fffe17 	ldw	r3,-8(fp)
   23c08:	18800236 	bltu	r3,r2,23c14 <alt_up_char_buffer_string+0xc8>
			return -1;
   23c0c:	00bfffc4 	movi	r2,-1
   23c10:	00000a06 	br	23c3c <alt_up_char_buffer_string+0xf0>
		++offset;
   23c14:	e0bffb17 	ldw	r2,-20(fp)
   23c18:	10800044 	addi	r2,r2,1
   23c1c:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   23c20:	e0bffd17 	ldw	r2,-12(fp)
   23c24:	10800003 	ldbu	r2,0(r2)
   23c28:	10803fcc 	andi	r2,r2,255
   23c2c:	1080201c 	xori	r2,r2,128
   23c30:	10bfe004 	addi	r2,r2,-128
   23c34:	103fe01e 	bne	r2,zero,23bb8 <__alt_mem_Flash_flash_data+0xf4023bb8>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   23c38:	0005883a 	mov	r2,zero
}
   23c3c:	e037883a 	mov	sp,fp
   23c40:	df000017 	ldw	fp,0(sp)
   23c44:	dec00104 	addi	sp,sp,4
   23c48:	f800283a 	ret

00023c4c <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   23c4c:	defffe04 	addi	sp,sp,-8
   23c50:	df000115 	stw	fp,4(sp)
   23c54:	df000104 	addi	fp,sp,4
   23c58:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   23c5c:	e0bfff17 	ldw	r2,-4(fp)
   23c60:	10800a17 	ldw	r2,40(r2)
   23c64:	10800084 	addi	r2,r2,2
   23c68:	1007883a 	mov	r3,r2
   23c6c:	00800044 	movi	r2,1
   23c70:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   23c74:	0001883a 	nop
   23c78:	e0bfff17 	ldw	r2,-4(fp)
   23c7c:	10800a17 	ldw	r2,40(r2)
   23c80:	10800084 	addi	r2,r2,2
   23c84:	10800023 	ldbuio	r2,0(r2)
   23c88:	10803fcc 	andi	r2,r2,255
   23c8c:	1080004c 	andi	r2,r2,1
   23c90:	103ff91e 	bne	r2,zero,23c78 <__alt_mem_Flash_flash_data+0xf4023c78>
	return 0;
   23c94:	0005883a 	mov	r2,zero
}
   23c98:	e037883a 	mov	sp,fp
   23c9c:	df000017 	ldw	fp,0(sp)
   23ca0:	dec00104 	addi	sp,sp,4
   23ca4:	f800283a 	ret

00023ca8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   23ca8:	defff504 	addi	sp,sp,-44
   23cac:	df000a15 	stw	fp,40(sp)
   23cb0:	df000a04 	addi	fp,sp,40
   23cb4:	e13ffc15 	stw	r4,-16(fp)
   23cb8:	e17ffd15 	stw	r5,-12(fp)
   23cbc:	e1bffe15 	stw	r6,-8(fp)
   23cc0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   23cc4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   23cc8:	008000f4 	movhi	r2,3
   23ccc:	10a80204 	addi	r2,r2,-24568
   23cd0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   23cd4:	10003f26 	beq	r2,zero,23dd4 <alt_alarm_start+0x12c>
  {
    if (alarm)
   23cd8:	e0bffc17 	ldw	r2,-16(fp)
   23cdc:	10003b26 	beq	r2,zero,23dcc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   23ce0:	e0bffc17 	ldw	r2,-16(fp)
   23ce4:	e0fffe17 	ldw	r3,-8(fp)
   23ce8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   23cec:	e0bffc17 	ldw	r2,-16(fp)
   23cf0:	e0ffff17 	ldw	r3,-4(fp)
   23cf4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23cf8:	0005303a 	rdctl	r2,status
   23cfc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23d00:	e0fff817 	ldw	r3,-32(fp)
   23d04:	00bfff84 	movi	r2,-2
   23d08:	1884703a 	and	r2,r3,r2
   23d0c:	1001703a 	wrctl	status,r2
  
  return context;
   23d10:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   23d14:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   23d18:	008000f4 	movhi	r2,3
   23d1c:	10a80304 	addi	r2,r2,-24564
   23d20:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   23d24:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   23d28:	e0fffd17 	ldw	r3,-12(fp)
   23d2c:	e0bff617 	ldw	r2,-40(fp)
   23d30:	1885883a 	add	r2,r3,r2
   23d34:	10c00044 	addi	r3,r2,1
   23d38:	e0bffc17 	ldw	r2,-16(fp)
   23d3c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   23d40:	e0bffc17 	ldw	r2,-16(fp)
   23d44:	10c00217 	ldw	r3,8(r2)
   23d48:	e0bff617 	ldw	r2,-40(fp)
   23d4c:	1880042e 	bgeu	r3,r2,23d60 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   23d50:	e0bffc17 	ldw	r2,-16(fp)
   23d54:	00c00044 	movi	r3,1
   23d58:	10c00405 	stb	r3,16(r2)
   23d5c:	00000206 	br	23d68 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   23d60:	e0bffc17 	ldw	r2,-16(fp)
   23d64:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   23d68:	e0fffc17 	ldw	r3,-16(fp)
   23d6c:	008000b4 	movhi	r2,2
   23d70:	109fdf04 	addi	r2,r2,32636
   23d74:	e0bff915 	stw	r2,-28(fp)
   23d78:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   23d7c:	e0bffa17 	ldw	r2,-24(fp)
   23d80:	e0fff917 	ldw	r3,-28(fp)
   23d84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   23d88:	e0bff917 	ldw	r2,-28(fp)
   23d8c:	10c00017 	ldw	r3,0(r2)
   23d90:	e0bffa17 	ldw	r2,-24(fp)
   23d94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   23d98:	e0bff917 	ldw	r2,-28(fp)
   23d9c:	10800017 	ldw	r2,0(r2)
   23da0:	e0fffa17 	ldw	r3,-24(fp)
   23da4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   23da8:	e0bff917 	ldw	r2,-28(fp)
   23dac:	e0fffa17 	ldw	r3,-24(fp)
   23db0:	10c00015 	stw	r3,0(r2)
   23db4:	e0bff717 	ldw	r2,-36(fp)
   23db8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23dbc:	e0bffb17 	ldw	r2,-20(fp)
   23dc0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   23dc4:	0005883a 	mov	r2,zero
   23dc8:	00000306 	br	23dd8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   23dcc:	00bffa84 	movi	r2,-22
   23dd0:	00000106 	br	23dd8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   23dd4:	00bfde84 	movi	r2,-134
  }
}
   23dd8:	e037883a 	mov	sp,fp
   23ddc:	df000017 	ldw	fp,0(sp)
   23de0:	dec00104 	addi	sp,sp,4
   23de4:	f800283a 	ret

00023de8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   23de8:	deffff04 	addi	sp,sp,-4
   23dec:	df000015 	stw	fp,0(sp)
   23df0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   23df4:	e037883a 	mov	sp,fp
   23df8:	df000017 	ldw	fp,0(sp)
   23dfc:	dec00104 	addi	sp,sp,4
   23e00:	f800283a 	ret

00023e04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23e04:	defffe04 	addi	sp,sp,-8
   23e08:	dfc00115 	stw	ra,4(sp)
   23e0c:	df000015 	stw	fp,0(sp)
   23e10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23e14:	008000b4 	movhi	r2,2
   23e18:	109fbd04 	addi	r2,r2,32500
   23e1c:	10800017 	ldw	r2,0(r2)
   23e20:	10000526 	beq	r2,zero,23e38 <alt_get_errno+0x34>
   23e24:	008000b4 	movhi	r2,2
   23e28:	109fbd04 	addi	r2,r2,32500
   23e2c:	10800017 	ldw	r2,0(r2)
   23e30:	103ee83a 	callr	r2
   23e34:	00000206 	br	23e40 <alt_get_errno+0x3c>
   23e38:	008000f4 	movhi	r2,3
   23e3c:	10a7d704 	addi	r2,r2,-24740
}
   23e40:	e037883a 	mov	sp,fp
   23e44:	dfc00117 	ldw	ra,4(sp)
   23e48:	df000017 	ldw	fp,0(sp)
   23e4c:	dec00204 	addi	sp,sp,8
   23e50:	f800283a 	ret

00023e54 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   23e54:	defffa04 	addi	sp,sp,-24
   23e58:	dfc00515 	stw	ra,20(sp)
   23e5c:	df000415 	stw	fp,16(sp)
   23e60:	df000404 	addi	fp,sp,16
   23e64:	e13ffe15 	stw	r4,-8(fp)
   23e68:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   23e6c:	e0bffe17 	ldw	r2,-8(fp)
   23e70:	10000326 	beq	r2,zero,23e80 <alt_dev_llist_insert+0x2c>
   23e74:	e0bffe17 	ldw	r2,-8(fp)
   23e78:	10800217 	ldw	r2,8(r2)
   23e7c:	1000061e 	bne	r2,zero,23e98 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   23e80:	0023e040 	call	23e04 <alt_get_errno>
   23e84:	1007883a 	mov	r3,r2
   23e88:	00800584 	movi	r2,22
   23e8c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   23e90:	00bffa84 	movi	r2,-22
   23e94:	00001306 	br	23ee4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   23e98:	e0bffe17 	ldw	r2,-8(fp)
   23e9c:	e0ffff17 	ldw	r3,-4(fp)
   23ea0:	e0fffc15 	stw	r3,-16(fp)
   23ea4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   23ea8:	e0bffd17 	ldw	r2,-12(fp)
   23eac:	e0fffc17 	ldw	r3,-16(fp)
   23eb0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   23eb4:	e0bffc17 	ldw	r2,-16(fp)
   23eb8:	10c00017 	ldw	r3,0(r2)
   23ebc:	e0bffd17 	ldw	r2,-12(fp)
   23ec0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   23ec4:	e0bffc17 	ldw	r2,-16(fp)
   23ec8:	10800017 	ldw	r2,0(r2)
   23ecc:	e0fffd17 	ldw	r3,-12(fp)
   23ed0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   23ed4:	e0bffc17 	ldw	r2,-16(fp)
   23ed8:	e0fffd17 	ldw	r3,-12(fp)
   23edc:	10c00015 	stw	r3,0(r2)

  return 0;  
   23ee0:	0005883a 	mov	r2,zero
}
   23ee4:	e037883a 	mov	sp,fp
   23ee8:	dfc00117 	ldw	ra,4(sp)
   23eec:	df000017 	ldw	fp,0(sp)
   23ef0:	dec00204 	addi	sp,sp,8
   23ef4:	f800283a 	ret

00023ef8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   23ef8:	defffd04 	addi	sp,sp,-12
   23efc:	dfc00215 	stw	ra,8(sp)
   23f00:	df000115 	stw	fp,4(sp)
   23f04:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23f08:	008000b4 	movhi	r2,2
   23f0c:	10946704 	addi	r2,r2,20892
   23f10:	e0bfff15 	stw	r2,-4(fp)
   23f14:	00000606 	br	23f30 <_do_ctors+0x38>
        (*ctor) (); 
   23f18:	e0bfff17 	ldw	r2,-4(fp)
   23f1c:	10800017 	ldw	r2,0(r2)
   23f20:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23f24:	e0bfff17 	ldw	r2,-4(fp)
   23f28:	10bfff04 	addi	r2,r2,-4
   23f2c:	e0bfff15 	stw	r2,-4(fp)
   23f30:	e0ffff17 	ldw	r3,-4(fp)
   23f34:	008000b4 	movhi	r2,2
   23f38:	10946804 	addi	r2,r2,20896
   23f3c:	18bff62e 	bgeu	r3,r2,23f18 <__alt_mem_Flash_flash_data+0xf4023f18>
        (*ctor) (); 
}
   23f40:	e037883a 	mov	sp,fp
   23f44:	dfc00117 	ldw	ra,4(sp)
   23f48:	df000017 	ldw	fp,0(sp)
   23f4c:	dec00204 	addi	sp,sp,8
   23f50:	f800283a 	ret

00023f54 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   23f54:	defffd04 	addi	sp,sp,-12
   23f58:	dfc00215 	stw	ra,8(sp)
   23f5c:	df000115 	stw	fp,4(sp)
   23f60:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23f64:	008000b4 	movhi	r2,2
   23f68:	10946704 	addi	r2,r2,20892
   23f6c:	e0bfff15 	stw	r2,-4(fp)
   23f70:	00000606 	br	23f8c <_do_dtors+0x38>
        (*dtor) (); 
   23f74:	e0bfff17 	ldw	r2,-4(fp)
   23f78:	10800017 	ldw	r2,0(r2)
   23f7c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23f80:	e0bfff17 	ldw	r2,-4(fp)
   23f84:	10bfff04 	addi	r2,r2,-4
   23f88:	e0bfff15 	stw	r2,-4(fp)
   23f8c:	e0ffff17 	ldw	r3,-4(fp)
   23f90:	008000b4 	movhi	r2,2
   23f94:	10946804 	addi	r2,r2,20896
   23f98:	18bff62e 	bgeu	r3,r2,23f74 <__alt_mem_Flash_flash_data+0xf4023f74>
        (*dtor) (); 
}
   23f9c:	e037883a 	mov	sp,fp
   23fa0:	dfc00117 	ldw	ra,4(sp)
   23fa4:	df000017 	ldw	fp,0(sp)
   23fa8:	dec00204 	addi	sp,sp,8
   23fac:	f800283a 	ret

00023fb0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   23fb0:	defffa04 	addi	sp,sp,-24
   23fb4:	dfc00515 	stw	ra,20(sp)
   23fb8:	df000415 	stw	fp,16(sp)
   23fbc:	df000404 	addi	fp,sp,16
   23fc0:	e13ffe15 	stw	r4,-8(fp)
   23fc4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   23fc8:	e0bfff17 	ldw	r2,-4(fp)
   23fcc:	10800017 	ldw	r2,0(r2)
   23fd0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   23fd4:	e13ffe17 	ldw	r4,-8(fp)
   23fd8:	00047800 	call	4780 <strlen>
   23fdc:	10800044 	addi	r2,r2,1
   23fe0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   23fe4:	00000d06 	br	2401c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   23fe8:	e0bffc17 	ldw	r2,-16(fp)
   23fec:	10c00217 	ldw	r3,8(r2)
   23ff0:	e0bffd17 	ldw	r2,-12(fp)
   23ff4:	1809883a 	mov	r4,r3
   23ff8:	e17ffe17 	ldw	r5,-8(fp)
   23ffc:	100d883a 	mov	r6,r2
   24000:	0024e400 	call	24e40 <memcmp>
   24004:	1000021e 	bne	r2,zero,24010 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   24008:	e0bffc17 	ldw	r2,-16(fp)
   2400c:	00000706 	br	2402c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   24010:	e0bffc17 	ldw	r2,-16(fp)
   24014:	10800017 	ldw	r2,0(r2)
   24018:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2401c:	e0fffc17 	ldw	r3,-16(fp)
   24020:	e0bfff17 	ldw	r2,-4(fp)
   24024:	18bff01e 	bne	r3,r2,23fe8 <__alt_mem_Flash_flash_data+0xf4023fe8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   24028:	0005883a 	mov	r2,zero
}
   2402c:	e037883a 	mov	sp,fp
   24030:	dfc00117 	ldw	ra,4(sp)
   24034:	df000017 	ldw	fp,0(sp)
   24038:	dec00204 	addi	sp,sp,8
   2403c:	f800283a 	ret

00024040 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   24040:	defffe04 	addi	sp,sp,-8
   24044:	dfc00115 	stw	ra,4(sp)
   24048:	df000015 	stw	fp,0(sp)
   2404c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   24050:	0009883a 	mov	r4,zero
   24054:	01440004 	movi	r5,4096
   24058:	0024ccc0 	call	24ccc <alt_icache_flush>
#endif
}
   2405c:	e037883a 	mov	sp,fp
   24060:	dfc00117 	ldw	ra,4(sp)
   24064:	df000017 	ldw	fp,0(sp)
   24068:	dec00204 	addi	sp,sp,8
   2406c:	f800283a 	ret

00024070 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   24070:	defff904 	addi	sp,sp,-28
   24074:	dfc00615 	stw	ra,24(sp)
   24078:	df000515 	stw	fp,20(sp)
   2407c:	df000504 	addi	fp,sp,20
   24080:	e13ffc15 	stw	r4,-16(fp)
   24084:	e17ffd15 	stw	r5,-12(fp)
   24088:	e1bffe15 	stw	r6,-8(fp)
   2408c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   24090:	e13ffd17 	ldw	r4,-12(fp)
   24094:	e17ffe17 	ldw	r5,-8(fp)
   24098:	e1bfff17 	ldw	r6,-4(fp)
   2409c:	00244740 	call	24474 <open>
   240a0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   240a4:	e0bffb17 	ldw	r2,-20(fp)
   240a8:	10001c16 	blt	r2,zero,2411c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   240ac:	008000b4 	movhi	r2,2
   240b0:	109a4804 	addi	r2,r2,26912
   240b4:	e0fffb17 	ldw	r3,-20(fp)
   240b8:	18c00324 	muli	r3,r3,12
   240bc:	10c5883a 	add	r2,r2,r3
   240c0:	10c00017 	ldw	r3,0(r2)
   240c4:	e0bffc17 	ldw	r2,-16(fp)
   240c8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   240cc:	008000b4 	movhi	r2,2
   240d0:	109a4804 	addi	r2,r2,26912
   240d4:	e0fffb17 	ldw	r3,-20(fp)
   240d8:	18c00324 	muli	r3,r3,12
   240dc:	18c00104 	addi	r3,r3,4
   240e0:	10c5883a 	add	r2,r2,r3
   240e4:	10c00017 	ldw	r3,0(r2)
   240e8:	e0bffc17 	ldw	r2,-16(fp)
   240ec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   240f0:	008000b4 	movhi	r2,2
   240f4:	109a4804 	addi	r2,r2,26912
   240f8:	e0fffb17 	ldw	r3,-20(fp)
   240fc:	18c00324 	muli	r3,r3,12
   24100:	18c00204 	addi	r3,r3,8
   24104:	10c5883a 	add	r2,r2,r3
   24108:	10c00017 	ldw	r3,0(r2)
   2410c:	e0bffc17 	ldw	r2,-16(fp)
   24110:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   24114:	e13ffb17 	ldw	r4,-20(fp)
   24118:	00143600 	call	14360 <alt_release_fd>
  }
} 
   2411c:	e037883a 	mov	sp,fp
   24120:	dfc00117 	ldw	ra,4(sp)
   24124:	df000017 	ldw	fp,0(sp)
   24128:	dec00204 	addi	sp,sp,8
   2412c:	f800283a 	ret

00024130 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   24130:	defffb04 	addi	sp,sp,-20
   24134:	dfc00415 	stw	ra,16(sp)
   24138:	df000315 	stw	fp,12(sp)
   2413c:	df000304 	addi	fp,sp,12
   24140:	e13ffd15 	stw	r4,-12(fp)
   24144:	e17ffe15 	stw	r5,-8(fp)
   24148:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2414c:	010000b4 	movhi	r4,2
   24150:	211a4b04 	addi	r4,r4,26924
   24154:	e17ffd17 	ldw	r5,-12(fp)
   24158:	01800044 	movi	r6,1
   2415c:	01c07fc4 	movi	r7,511
   24160:	00240700 	call	24070 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   24164:	010000b4 	movhi	r4,2
   24168:	211a4804 	addi	r4,r4,26912
   2416c:	e17ffe17 	ldw	r5,-8(fp)
   24170:	000d883a 	mov	r6,zero
   24174:	01c07fc4 	movi	r7,511
   24178:	00240700 	call	24070 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2417c:	010000b4 	movhi	r4,2
   24180:	211a4e04 	addi	r4,r4,26936
   24184:	e17fff17 	ldw	r5,-4(fp)
   24188:	01800044 	movi	r6,1
   2418c:	01c07fc4 	movi	r7,511
   24190:	00240700 	call	24070 <alt_open_fd>
}  
   24194:	e037883a 	mov	sp,fp
   24198:	dfc00117 	ldw	ra,4(sp)
   2419c:	df000017 	ldw	fp,0(sp)
   241a0:	dec00204 	addi	sp,sp,8
   241a4:	f800283a 	ret

000241a8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   241a8:	defff004 	addi	sp,sp,-64
   241ac:	df000f15 	stw	fp,60(sp)
   241b0:	df000f04 	addi	fp,sp,60
   241b4:	e13ffd15 	stw	r4,-12(fp)
   241b8:	e17ffe15 	stw	r5,-8(fp)
   241bc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   241c0:	00bffa84 	movi	r2,-22
   241c4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   241c8:	e0bffd17 	ldw	r2,-12(fp)
   241cc:	10800828 	cmpgeui	r2,r2,32
   241d0:	10005c1e 	bne	r2,zero,24344 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   241d4:	0005303a 	rdctl	r2,status
   241d8:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   241dc:	e0fff317 	ldw	r3,-52(fp)
   241e0:	00bfff84 	movi	r2,-2
   241e4:	1884703a 	and	r2,r3,r2
   241e8:	1001703a 	wrctl	status,r2
  
  return context;
   241ec:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   241f0:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   241f4:	00800174 	movhi	r2,5
   241f8:	10be2604 	addi	r2,r2,-1896
   241fc:	e0fffd17 	ldw	r3,-12(fp)
   24200:	180690fa 	slli	r3,r3,3
   24204:	10c5883a 	add	r2,r2,r3
   24208:	e0ffff17 	ldw	r3,-4(fp)
   2420c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   24210:	00800174 	movhi	r2,5
   24214:	10be2604 	addi	r2,r2,-1896
   24218:	e0fffd17 	ldw	r3,-12(fp)
   2421c:	180690fa 	slli	r3,r3,3
   24220:	18c00104 	addi	r3,r3,4
   24224:	10c5883a 	add	r2,r2,r3
   24228:	e0fffe17 	ldw	r3,-8(fp)
   2422c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   24230:	e0bfff17 	ldw	r2,-4(fp)
   24234:	10001f26 	beq	r2,zero,242b4 <alt_irq_register+0x10c>
   24238:	e0bffd17 	ldw	r2,-12(fp)
   2423c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24240:	0005303a 	rdctl	r2,status
   24244:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24248:	e0fff517 	ldw	r3,-44(fp)
   2424c:	00bfff84 	movi	r2,-2
   24250:	1884703a 	and	r2,r3,r2
   24254:	1001703a 	wrctl	status,r2
  
  return context;
   24258:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2425c:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   24260:	e0bff417 	ldw	r2,-48(fp)
   24264:	00c00044 	movi	r3,1
   24268:	1884983a 	sll	r2,r3,r2
   2426c:	1007883a 	mov	r3,r2
   24270:	008000f4 	movhi	r2,3
   24274:	10a80104 	addi	r2,r2,-24572
   24278:	10800017 	ldw	r2,0(r2)
   2427c:	1886b03a 	or	r3,r3,r2
   24280:	008000f4 	movhi	r2,3
   24284:	10a80104 	addi	r2,r2,-24572
   24288:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2428c:	008000f4 	movhi	r2,3
   24290:	10a80104 	addi	r2,r2,-24572
   24294:	10800017 	ldw	r2,0(r2)
   24298:	100170fa 	wrctl	ienable,r2
   2429c:	e0bff617 	ldw	r2,-40(fp)
   242a0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   242a4:	e0bff717 	ldw	r2,-36(fp)
   242a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   242ac:	0005883a 	mov	r2,zero
   242b0:	00001f06 	br	24330 <alt_irq_register+0x188>
   242b4:	e0bffd17 	ldw	r2,-12(fp)
   242b8:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   242bc:	0005303a 	rdctl	r2,status
   242c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   242c4:	e0fff917 	ldw	r3,-28(fp)
   242c8:	00bfff84 	movi	r2,-2
   242cc:	1884703a 	and	r2,r3,r2
   242d0:	1001703a 	wrctl	status,r2
  
  return context;
   242d4:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   242d8:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   242dc:	e0bff817 	ldw	r2,-32(fp)
   242e0:	00c00044 	movi	r3,1
   242e4:	1884983a 	sll	r2,r3,r2
   242e8:	0084303a 	nor	r2,zero,r2
   242ec:	1007883a 	mov	r3,r2
   242f0:	008000f4 	movhi	r2,3
   242f4:	10a80104 	addi	r2,r2,-24572
   242f8:	10800017 	ldw	r2,0(r2)
   242fc:	1886703a 	and	r3,r3,r2
   24300:	008000f4 	movhi	r2,3
   24304:	10a80104 	addi	r2,r2,-24572
   24308:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2430c:	008000f4 	movhi	r2,3
   24310:	10a80104 	addi	r2,r2,-24572
   24314:	10800017 	ldw	r2,0(r2)
   24318:	100170fa 	wrctl	ienable,r2
   2431c:	e0bffa17 	ldw	r2,-24(fp)
   24320:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24324:	e0bffb17 	ldw	r2,-20(fp)
   24328:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2432c:	0005883a 	mov	r2,zero
   24330:	e0bff115 	stw	r2,-60(fp)
   24334:	e0bff217 	ldw	r2,-56(fp)
   24338:	e0bffc15 	stw	r2,-16(fp)
   2433c:	e0bffc17 	ldw	r2,-16(fp)
   24340:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   24344:	e0bff117 	ldw	r2,-60(fp)
}
   24348:	e037883a 	mov	sp,fp
   2434c:	df000017 	ldw	fp,0(sp)
   24350:	dec00104 	addi	sp,sp,4
   24354:	f800283a 	ret

00024358 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24358:	defffe04 	addi	sp,sp,-8
   2435c:	dfc00115 	stw	ra,4(sp)
   24360:	df000015 	stw	fp,0(sp)
   24364:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24368:	008000b4 	movhi	r2,2
   2436c:	109fbd04 	addi	r2,r2,32500
   24370:	10800017 	ldw	r2,0(r2)
   24374:	10000526 	beq	r2,zero,2438c <alt_get_errno+0x34>
   24378:	008000b4 	movhi	r2,2
   2437c:	109fbd04 	addi	r2,r2,32500
   24380:	10800017 	ldw	r2,0(r2)
   24384:	103ee83a 	callr	r2
   24388:	00000206 	br	24394 <alt_get_errno+0x3c>
   2438c:	008000f4 	movhi	r2,3
   24390:	10a7d704 	addi	r2,r2,-24740
}
   24394:	e037883a 	mov	sp,fp
   24398:	dfc00117 	ldw	ra,4(sp)
   2439c:	df000017 	ldw	fp,0(sp)
   243a0:	dec00204 	addi	sp,sp,8
   243a4:	f800283a 	ret

000243a8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   243a8:	defffd04 	addi	sp,sp,-12
   243ac:	df000215 	stw	fp,8(sp)
   243b0:	df000204 	addi	fp,sp,8
   243b4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   243b8:	e0bfff17 	ldw	r2,-4(fp)
   243bc:	10800217 	ldw	r2,8(r2)
   243c0:	10d00034 	orhi	r3,r2,16384
   243c4:	e0bfff17 	ldw	r2,-4(fp)
   243c8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   243cc:	e03ffe15 	stw	zero,-8(fp)
   243d0:	00001d06 	br	24448 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   243d4:	008000b4 	movhi	r2,2
   243d8:	109a4804 	addi	r2,r2,26912
   243dc:	e0fffe17 	ldw	r3,-8(fp)
   243e0:	18c00324 	muli	r3,r3,12
   243e4:	10c5883a 	add	r2,r2,r3
   243e8:	10c00017 	ldw	r3,0(r2)
   243ec:	e0bfff17 	ldw	r2,-4(fp)
   243f0:	10800017 	ldw	r2,0(r2)
   243f4:	1880111e 	bne	r3,r2,2443c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   243f8:	008000b4 	movhi	r2,2
   243fc:	109a4804 	addi	r2,r2,26912
   24400:	e0fffe17 	ldw	r3,-8(fp)
   24404:	18c00324 	muli	r3,r3,12
   24408:	18c00204 	addi	r3,r3,8
   2440c:	10c5883a 	add	r2,r2,r3
   24410:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24414:	1000090e 	bge	r2,zero,2443c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   24418:	e0bffe17 	ldw	r2,-8(fp)
   2441c:	10c00324 	muli	r3,r2,12
   24420:	008000b4 	movhi	r2,2
   24424:	109a4804 	addi	r2,r2,26912
   24428:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2442c:	e0bfff17 	ldw	r2,-4(fp)
   24430:	18800226 	beq	r3,r2,2443c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   24434:	00bffcc4 	movi	r2,-13
   24438:	00000a06 	br	24464 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2443c:	e0bffe17 	ldw	r2,-8(fp)
   24440:	10800044 	addi	r2,r2,1
   24444:	e0bffe15 	stw	r2,-8(fp)
   24448:	008000b4 	movhi	r2,2
   2444c:	109fbc04 	addi	r2,r2,32496
   24450:	10800017 	ldw	r2,0(r2)
   24454:	1007883a 	mov	r3,r2
   24458:	e0bffe17 	ldw	r2,-8(fp)
   2445c:	18bfdd2e 	bgeu	r3,r2,243d4 <__alt_mem_Flash_flash_data+0xf40243d4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   24460:	0005883a 	mov	r2,zero
}
   24464:	e037883a 	mov	sp,fp
   24468:	df000017 	ldw	fp,0(sp)
   2446c:	dec00104 	addi	sp,sp,4
   24470:	f800283a 	ret

00024474 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   24474:	defff604 	addi	sp,sp,-40
   24478:	dfc00915 	stw	ra,36(sp)
   2447c:	df000815 	stw	fp,32(sp)
   24480:	df000804 	addi	fp,sp,32
   24484:	e13ffd15 	stw	r4,-12(fp)
   24488:	e17ffe15 	stw	r5,-8(fp)
   2448c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   24490:	00bfffc4 	movi	r2,-1
   24494:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   24498:	00bffb44 	movi	r2,-19
   2449c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   244a0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   244a4:	e13ffd17 	ldw	r4,-12(fp)
   244a8:	014000b4 	movhi	r5,2
   244ac:	295fba04 	addi	r5,r5,32488
   244b0:	0023fb00 	call	23fb0 <alt_find_dev>
   244b4:	e0bff815 	stw	r2,-32(fp)
   244b8:	e0bff817 	ldw	r2,-32(fp)
   244bc:	1000051e 	bne	r2,zero,244d4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   244c0:	e13ffd17 	ldw	r4,-12(fp)
   244c4:	0024abc0 	call	24abc <alt_find_file>
   244c8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   244cc:	00800044 	movi	r2,1
   244d0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   244d4:	e0bff817 	ldw	r2,-32(fp)
   244d8:	10002926 	beq	r2,zero,24580 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   244dc:	e13ff817 	ldw	r4,-32(fp)
   244e0:	0024bd00 	call	24bd0 <alt_get_fd>
   244e4:	e0bff915 	stw	r2,-28(fp)
   244e8:	e0bff917 	ldw	r2,-28(fp)
   244ec:	1000030e 	bge	r2,zero,244fc <open+0x88>
    {
      status = index;
   244f0:	e0bff917 	ldw	r2,-28(fp)
   244f4:	e0bffa15 	stw	r2,-24(fp)
   244f8:	00002306 	br	24588 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   244fc:	e0bff917 	ldw	r2,-28(fp)
   24500:	10c00324 	muli	r3,r2,12
   24504:	008000b4 	movhi	r2,2
   24508:	109a4804 	addi	r2,r2,26912
   2450c:	1885883a 	add	r2,r3,r2
   24510:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   24514:	e0fffe17 	ldw	r3,-8(fp)
   24518:	00900034 	movhi	r2,16384
   2451c:	10bfffc4 	addi	r2,r2,-1
   24520:	1886703a 	and	r3,r3,r2
   24524:	e0bffc17 	ldw	r2,-16(fp)
   24528:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2452c:	e0bffb17 	ldw	r2,-20(fp)
   24530:	1000051e 	bne	r2,zero,24548 <open+0xd4>
   24534:	e13ffc17 	ldw	r4,-16(fp)
   24538:	00243a80 	call	243a8 <alt_file_locked>
   2453c:	e0bffa15 	stw	r2,-24(fp)
   24540:	e0bffa17 	ldw	r2,-24(fp)
   24544:	10001016 	blt	r2,zero,24588 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   24548:	e0bff817 	ldw	r2,-32(fp)
   2454c:	10800317 	ldw	r2,12(r2)
   24550:	10000826 	beq	r2,zero,24574 <open+0x100>
   24554:	e0bff817 	ldw	r2,-32(fp)
   24558:	10800317 	ldw	r2,12(r2)
   2455c:	e13ffc17 	ldw	r4,-16(fp)
   24560:	e17ffd17 	ldw	r5,-12(fp)
   24564:	e1bffe17 	ldw	r6,-8(fp)
   24568:	e1ffff17 	ldw	r7,-4(fp)
   2456c:	103ee83a 	callr	r2
   24570:	00000106 	br	24578 <open+0x104>
   24574:	0005883a 	mov	r2,zero
   24578:	e0bffa15 	stw	r2,-24(fp)
   2457c:	00000206 	br	24588 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   24580:	00bffb44 	movi	r2,-19
   24584:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   24588:	e0bffa17 	ldw	r2,-24(fp)
   2458c:	1000090e 	bge	r2,zero,245b4 <open+0x140>
  {
    alt_release_fd (index);  
   24590:	e13ff917 	ldw	r4,-28(fp)
   24594:	00143600 	call	14360 <alt_release_fd>
    ALT_ERRNO = -status;
   24598:	00243580 	call	24358 <alt_get_errno>
   2459c:	1007883a 	mov	r3,r2
   245a0:	e0bffa17 	ldw	r2,-24(fp)
   245a4:	0085c83a 	sub	r2,zero,r2
   245a8:	18800015 	stw	r2,0(r3)
    return -1;
   245ac:	00bfffc4 	movi	r2,-1
   245b0:	00000106 	br	245b8 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   245b4:	e0bff917 	ldw	r2,-28(fp)
}
   245b8:	e037883a 	mov	sp,fp
   245bc:	dfc00117 	ldw	ra,4(sp)
   245c0:	df000017 	ldw	fp,0(sp)
   245c4:	dec00204 	addi	sp,sp,8
   245c8:	f800283a 	ret

000245cc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   245cc:	defffa04 	addi	sp,sp,-24
   245d0:	df000515 	stw	fp,20(sp)
   245d4:	df000504 	addi	fp,sp,20
   245d8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   245dc:	0005303a 	rdctl	r2,status
   245e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   245e4:	e0fffc17 	ldw	r3,-16(fp)
   245e8:	00bfff84 	movi	r2,-2
   245ec:	1884703a 	and	r2,r3,r2
   245f0:	1001703a 	wrctl	status,r2
  
  return context;
   245f4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   245f8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   245fc:	e0bfff17 	ldw	r2,-4(fp)
   24600:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   24604:	e0bffd17 	ldw	r2,-12(fp)
   24608:	10800017 	ldw	r2,0(r2)
   2460c:	e0fffd17 	ldw	r3,-12(fp)
   24610:	18c00117 	ldw	r3,4(r3)
   24614:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   24618:	e0bffd17 	ldw	r2,-12(fp)
   2461c:	10800117 	ldw	r2,4(r2)
   24620:	e0fffd17 	ldw	r3,-12(fp)
   24624:	18c00017 	ldw	r3,0(r3)
   24628:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2462c:	e0bffd17 	ldw	r2,-12(fp)
   24630:	e0fffd17 	ldw	r3,-12(fp)
   24634:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   24638:	e0bffd17 	ldw	r2,-12(fp)
   2463c:	e0fffd17 	ldw	r3,-12(fp)
   24640:	10c00015 	stw	r3,0(r2)
   24644:	e0bffb17 	ldw	r2,-20(fp)
   24648:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2464c:	e0bffe17 	ldw	r2,-8(fp)
   24650:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   24654:	e037883a 	mov	sp,fp
   24658:	df000017 	ldw	fp,0(sp)
   2465c:	dec00104 	addi	sp,sp,4
   24660:	f800283a 	ret

00024664 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   24664:	defffb04 	addi	sp,sp,-20
   24668:	dfc00415 	stw	ra,16(sp)
   2466c:	df000315 	stw	fp,12(sp)
   24670:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   24674:	d0a03b17 	ldw	r2,-32532(gp)
   24678:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2467c:	d0a85f17 	ldw	r2,-24196(gp)
   24680:	10800044 	addi	r2,r2,1
   24684:	d0a85f15 	stw	r2,-24196(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24688:	00002e06 	br	24744 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2468c:	e0bffd17 	ldw	r2,-12(fp)
   24690:	10800017 	ldw	r2,0(r2)
   24694:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   24698:	e0bffd17 	ldw	r2,-12(fp)
   2469c:	10800403 	ldbu	r2,16(r2)
   246a0:	10803fcc 	andi	r2,r2,255
   246a4:	10000426 	beq	r2,zero,246b8 <alt_tick+0x54>
   246a8:	d0a85f17 	ldw	r2,-24196(gp)
   246ac:	1000021e 	bne	r2,zero,246b8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   246b0:	e0bffd17 	ldw	r2,-12(fp)
   246b4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   246b8:	e0bffd17 	ldw	r2,-12(fp)
   246bc:	10800217 	ldw	r2,8(r2)
   246c0:	d0e85f17 	ldw	r3,-24196(gp)
   246c4:	18801d36 	bltu	r3,r2,2473c <alt_tick+0xd8>
   246c8:	e0bffd17 	ldw	r2,-12(fp)
   246cc:	10800403 	ldbu	r2,16(r2)
   246d0:	10803fcc 	andi	r2,r2,255
   246d4:	1000191e 	bne	r2,zero,2473c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   246d8:	e0bffd17 	ldw	r2,-12(fp)
   246dc:	10800317 	ldw	r2,12(r2)
   246e0:	e0fffd17 	ldw	r3,-12(fp)
   246e4:	18c00517 	ldw	r3,20(r3)
   246e8:	1809883a 	mov	r4,r3
   246ec:	103ee83a 	callr	r2
   246f0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   246f4:	e0bfff17 	ldw	r2,-4(fp)
   246f8:	1000031e 	bne	r2,zero,24708 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   246fc:	e13ffd17 	ldw	r4,-12(fp)
   24700:	00245cc0 	call	245cc <alt_alarm_stop>
   24704:	00000d06 	br	2473c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   24708:	e0bffd17 	ldw	r2,-12(fp)
   2470c:	10c00217 	ldw	r3,8(r2)
   24710:	e0bfff17 	ldw	r2,-4(fp)
   24714:	1887883a 	add	r3,r3,r2
   24718:	e0bffd17 	ldw	r2,-12(fp)
   2471c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   24720:	e0bffd17 	ldw	r2,-12(fp)
   24724:	10c00217 	ldw	r3,8(r2)
   24728:	d0a85f17 	ldw	r2,-24196(gp)
   2472c:	1880032e 	bgeu	r3,r2,2473c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   24730:	e0bffd17 	ldw	r2,-12(fp)
   24734:	00c00044 	movi	r3,1
   24738:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2473c:	e0bffe17 	ldw	r2,-8(fp)
   24740:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24744:	e0fffd17 	ldw	r3,-12(fp)
   24748:	d0a03b04 	addi	r2,gp,-32532
   2474c:	18bfcf1e 	bne	r3,r2,2468c <__alt_mem_Flash_flash_data+0xf402468c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   24750:	001556c0 	call	1556c <OSTimeTick>
}
   24754:	e037883a 	mov	sp,fp
   24758:	dfc00117 	ldw	ra,4(sp)
   2475c:	df000017 	ldw	fp,0(sp)
   24760:	dec00204 	addi	sp,sp,8
   24764:	f800283a 	ret

00024768 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   24768:	deffff04 	addi	sp,sp,-4
   2476c:	df000015 	stw	fp,0(sp)
   24770:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   24774:	000170fa 	wrctl	ienable,zero
}
   24778:	e037883a 	mov	sp,fp
   2477c:	df000017 	ldw	fp,0(sp)
   24780:	dec00104 	addi	sp,sp,4
   24784:	f800283a 	ret

00024788 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   24788:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   2478c:	d0e00f17 	ldw	r3,-32708(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   24790:	d1284b17 	ldw	r4,-24276(gp)

      stw ra,  0(sp)
   24794:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   24798:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   2479c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   247a0:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   247a4:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   247a8:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   247ac:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   247b0:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   247b4:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   247b8:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   247bc:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   247c0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   247c4:	00249f40 	call	249f4 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   247c8:	d1284617 	ldw	r4,-24296(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   247cc:	d1683e07 	ldb	r5,-24328(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   247d0:	d1284b15 	stw	r4,-24276(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   247d4:	d1683e45 	stb	r5,-24327(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   247d8:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   247dc:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   247e0:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   247e4:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   247e8:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   247ec:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   247f0:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   247f4:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   247f8:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   247fc:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   24800:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   24804:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   24808:	d0e00f15 	stw	r3,-32708(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   2480c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   24810:	f800283a 	ret

00024814 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   24814:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   24818:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   2481c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   24820:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   24824:	00249f40 	call	249f4 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   24828:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   2482c:	d4a83c45 	stb	r18,-24335(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   24830:	003fe506 	br	247c8 <__alt_mem_Flash_flash_data+0xf40247c8>

00024834 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   24834:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   24838:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   2483c:	10800054 	ori	r2,r2,1
      wrctl status, r2
   24840:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   24844:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   24848:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   2484c:	dec00204 	addi	sp,sp,8

      callr r2
   24850:	103ee83a 	callr	r2

      nop
   24854:	0001883a 	nop

00024858 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   24858:	defff704 	addi	sp,sp,-36
   2485c:	dfc00815 	stw	ra,32(sp)
   24860:	df000715 	stw	fp,28(sp)
   24864:	df000704 	addi	fp,sp,28
   24868:	e13ffc15 	stw	r4,-16(fp)
   2486c:	e17ffd15 	stw	r5,-12(fp)
   24870:	e1bffe15 	stw	r6,-8(fp)
   24874:	3805883a 	mov	r2,r7
   24878:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   2487c:	e0fffe17 	ldw	r3,-8(fp)
   24880:	00bfff04 	movi	r2,-4
   24884:	1884703a 	and	r2,r3,r2
   24888:	10bef704 	addi	r2,r2,-1060
   2488c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   24890:	e13ff917 	ldw	r4,-28(fp)
   24894:	000b883a 	mov	r5,zero
   24898:	01810904 	movi	r6,1060
   2489c:	000433c0 	call	433c <memset>
   248a0:	e0bff917 	ldw	r2,-28(fp)
   248a4:	10c0bb04 	addi	r3,r2,748
   248a8:	e0bff917 	ldw	r2,-28(fp)
   248ac:	10c00115 	stw	r3,4(r2)
   248b0:	e0bff917 	ldw	r2,-28(fp)
   248b4:	10c0d504 	addi	r3,r2,852
   248b8:	e0bff917 	ldw	r2,-28(fp)
   248bc:	10c00215 	stw	r3,8(r2)
   248c0:	e0bff917 	ldw	r2,-28(fp)
   248c4:	10c0ef04 	addi	r3,r2,956
   248c8:	e0bff917 	ldw	r2,-28(fp)
   248cc:	10c00315 	stw	r3,12(r2)
   248d0:	e0fff917 	ldw	r3,-28(fp)
   248d4:	008000b4 	movhi	r2,2
   248d8:	10981404 	addi	r2,r2,24656
   248dc:	18800d15 	stw	r2,52(r3)
   248e0:	e0bff917 	ldw	r2,-28(fp)
   248e4:	00c00044 	movi	r3,1
   248e8:	10c02915 	stw	r3,164(r2)
   248ec:	10002a15 	stw	zero,168(r2)
   248f0:	e0bff917 	ldw	r2,-28(fp)
   248f4:	00ccc384 	movi	r3,13070
   248f8:	10c02b0d 	sth	r3,172(r2)
   248fc:	e0bff917 	ldw	r2,-28(fp)
   24900:	00eaf344 	movi	r3,-21555
   24904:	10c02b8d 	sth	r3,174(r2)
   24908:	e0bff917 	ldw	r2,-28(fp)
   2490c:	00c48d04 	movi	r3,4660
   24910:	10c02c0d 	sth	r3,176(r2)
   24914:	e0bff917 	ldw	r2,-28(fp)
   24918:	00f99b44 	movi	r3,-6547
   2491c:	10c02c8d 	sth	r3,178(r2)
   24920:	e0bff917 	ldw	r2,-28(fp)
   24924:	00f7bb04 	movi	r3,-8468
   24928:	10c02d0d 	sth	r3,180(r2)
   2492c:	e0bff917 	ldw	r2,-28(fp)
   24930:	00c00144 	movi	r3,5
   24934:	10c02d8d 	sth	r3,182(r2)
   24938:	e0bff917 	ldw	r2,-28(fp)
   2493c:	00c002c4 	movi	r3,11
   24940:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   24944:	e0bff917 	ldw	r2,-28(fp)
   24948:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   2494c:	e0bffa17 	ldw	r2,-24(fp)
   24950:	10bff304 	addi	r2,r2,-52
   24954:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   24958:	e0bffb17 	ldw	r2,-20(fp)
   2495c:	10800c04 	addi	r2,r2,48
   24960:	e0fffc17 	ldw	r3,-16(fp)
   24964:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   24968:	e0bffb17 	ldw	r2,-20(fp)
   2496c:	10800b04 	addi	r2,r2,44
   24970:	e0fffd17 	ldw	r3,-12(fp)
   24974:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   24978:	e0bffb17 	ldw	r2,-20(fp)
   2497c:	10800a04 	addi	r2,r2,40
   24980:	e0fff917 	ldw	r3,-28(fp)
   24984:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   24988:	008000b4 	movhi	r2,2
   2498c:	10920d04 	addi	r2,r2,18484
   24990:	10c00104 	addi	r3,r2,4
   24994:	e0bffb17 	ldw	r2,-20(fp)
   24998:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   2499c:	e0bffb17 	ldw	r2,-20(fp)
}
   249a0:	e037883a 	mov	sp,fp
   249a4:	dfc00117 	ldw	ra,4(sp)
   249a8:	df000017 	ldw	fp,0(sp)
   249ac:	dec00204 	addi	sp,sp,8
   249b0:	f800283a 	ret

000249b4 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   249b4:	defffe04 	addi	sp,sp,-8
   249b8:	df000115 	stw	fp,4(sp)
   249bc:	df000104 	addi	fp,sp,4
   249c0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   249c4:	e037883a 	mov	sp,fp
   249c8:	df000017 	ldw	fp,0(sp)
   249cc:	dec00104 	addi	sp,sp,4
   249d0:	f800283a 	ret

000249d4 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   249d4:	defffe04 	addi	sp,sp,-8
   249d8:	df000115 	stw	fp,4(sp)
   249dc:	df000104 	addi	fp,sp,4
   249e0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   249e4:	e037883a 	mov	sp,fp
   249e8:	df000017 	ldw	fp,0(sp)
   249ec:	dec00104 	addi	sp,sp,4
   249f0:	f800283a 	ret

000249f4 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   249f4:	deffff04 	addi	sp,sp,-4
   249f8:	df000015 	stw	fp,0(sp)
   249fc:	d839883a 	mov	fp,sp
}
   24a00:	e037883a 	mov	sp,fp
   24a04:	df000017 	ldw	fp,0(sp)
   24a08:	dec00104 	addi	sp,sp,4
   24a0c:	f800283a 	ret

00024a10 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   24a10:	deffff04 	addi	sp,sp,-4
   24a14:	df000015 	stw	fp,0(sp)
   24a18:	d839883a 	mov	fp,sp
}
   24a1c:	e037883a 	mov	sp,fp
   24a20:	df000017 	ldw	fp,0(sp)
   24a24:	dec00104 	addi	sp,sp,4
   24a28:	f800283a 	ret

00024a2c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   24a2c:	deffff04 	addi	sp,sp,-4
   24a30:	df000015 	stw	fp,0(sp)
   24a34:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   24a38:	e037883a 	mov	sp,fp
   24a3c:	df000017 	ldw	fp,0(sp)
   24a40:	dec00104 	addi	sp,sp,4
   24a44:	f800283a 	ret

00024a48 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   24a48:	deffff04 	addi	sp,sp,-4
   24a4c:	df000015 	stw	fp,0(sp)
   24a50:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   24a54:	e037883a 	mov	sp,fp
   24a58:	df000017 	ldw	fp,0(sp)
   24a5c:	dec00104 	addi	sp,sp,4
   24a60:	f800283a 	ret

00024a64 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   24a64:	deffff04 	addi	sp,sp,-4
   24a68:	df000015 	stw	fp,0(sp)
   24a6c:	d839883a 	mov	fp,sp
}
   24a70:	e037883a 	mov	sp,fp
   24a74:	df000017 	ldw	fp,0(sp)
   24a78:	dec00104 	addi	sp,sp,4
   24a7c:	f800283a 	ret

00024a80 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   24a80:	deffff04 	addi	sp,sp,-4
   24a84:	df000015 	stw	fp,0(sp)
   24a88:	d839883a 	mov	fp,sp
}
   24a8c:	e037883a 	mov	sp,fp
   24a90:	df000017 	ldw	fp,0(sp)
   24a94:	dec00104 	addi	sp,sp,4
   24a98:	f800283a 	ret

00024a9c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   24a9c:	defffe04 	addi	sp,sp,-8
   24aa0:	df000115 	stw	fp,4(sp)
   24aa4:	df000104 	addi	fp,sp,4
   24aa8:	e13fff15 	stw	r4,-4(fp)
}
   24aac:	e037883a 	mov	sp,fp
   24ab0:	df000017 	ldw	fp,0(sp)
   24ab4:	dec00104 	addi	sp,sp,4
   24ab8:	f800283a 	ret

00024abc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   24abc:	defffb04 	addi	sp,sp,-20
   24ac0:	dfc00415 	stw	ra,16(sp)
   24ac4:	df000315 	stw	fp,12(sp)
   24ac8:	df000304 	addi	fp,sp,12
   24acc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   24ad0:	008000b4 	movhi	r2,2
   24ad4:	109fb804 	addi	r2,r2,32480
   24ad8:	10800017 	ldw	r2,0(r2)
   24adc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24ae0:	00003106 	br	24ba8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   24ae4:	e0bffd17 	ldw	r2,-12(fp)
   24ae8:	10800217 	ldw	r2,8(r2)
   24aec:	1009883a 	mov	r4,r2
   24af0:	00047800 	call	4780 <strlen>
   24af4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   24af8:	e0bffd17 	ldw	r2,-12(fp)
   24afc:	10c00217 	ldw	r3,8(r2)
   24b00:	e0bffe17 	ldw	r2,-8(fp)
   24b04:	10bfffc4 	addi	r2,r2,-1
   24b08:	1885883a 	add	r2,r3,r2
   24b0c:	10800003 	ldbu	r2,0(r2)
   24b10:	10803fcc 	andi	r2,r2,255
   24b14:	1080201c 	xori	r2,r2,128
   24b18:	10bfe004 	addi	r2,r2,-128
   24b1c:	10800bd8 	cmpnei	r2,r2,47
   24b20:	1000031e 	bne	r2,zero,24b30 <alt_find_file+0x74>
    {
      len -= 1;
   24b24:	e0bffe17 	ldw	r2,-8(fp)
   24b28:	10bfffc4 	addi	r2,r2,-1
   24b2c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24b30:	e0bffe17 	ldw	r2,-8(fp)
   24b34:	e0ffff17 	ldw	r3,-4(fp)
   24b38:	1885883a 	add	r2,r3,r2
   24b3c:	10800003 	ldbu	r2,0(r2)
   24b40:	10803fcc 	andi	r2,r2,255
   24b44:	1080201c 	xori	r2,r2,128
   24b48:	10bfe004 	addi	r2,r2,-128
   24b4c:	10800be0 	cmpeqi	r2,r2,47
   24b50:	1000081e 	bne	r2,zero,24b74 <alt_find_file+0xb8>
   24b54:	e0bffe17 	ldw	r2,-8(fp)
   24b58:	e0ffff17 	ldw	r3,-4(fp)
   24b5c:	1885883a 	add	r2,r3,r2
   24b60:	10800003 	ldbu	r2,0(r2)
   24b64:	10803fcc 	andi	r2,r2,255
   24b68:	1080201c 	xori	r2,r2,128
   24b6c:	10bfe004 	addi	r2,r2,-128
   24b70:	10000a1e 	bne	r2,zero,24b9c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   24b74:	e0bffd17 	ldw	r2,-12(fp)
   24b78:	10c00217 	ldw	r3,8(r2)
   24b7c:	e0bffe17 	ldw	r2,-8(fp)
   24b80:	1809883a 	mov	r4,r3
   24b84:	e17fff17 	ldw	r5,-4(fp)
   24b88:	100d883a 	mov	r6,r2
   24b8c:	0024e400 	call	24e40 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24b90:	1000021e 	bne	r2,zero,24b9c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   24b94:	e0bffd17 	ldw	r2,-12(fp)
   24b98:	00000806 	br	24bbc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   24b9c:	e0bffd17 	ldw	r2,-12(fp)
   24ba0:	10800017 	ldw	r2,0(r2)
   24ba4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24ba8:	e0fffd17 	ldw	r3,-12(fp)
   24bac:	008000b4 	movhi	r2,2
   24bb0:	109fb804 	addi	r2,r2,32480
   24bb4:	18bfcb1e 	bne	r3,r2,24ae4 <__alt_mem_Flash_flash_data+0xf4024ae4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   24bb8:	0005883a 	mov	r2,zero
}
   24bbc:	e037883a 	mov	sp,fp
   24bc0:	dfc00117 	ldw	ra,4(sp)
   24bc4:	df000017 	ldw	fp,0(sp)
   24bc8:	dec00204 	addi	sp,sp,8
   24bcc:	f800283a 	ret

00024bd0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24bd0:	defff904 	addi	sp,sp,-28
   24bd4:	dfc00615 	stw	ra,24(sp)
   24bd8:	df000515 	stw	fp,20(sp)
   24bdc:	df000504 	addi	fp,sp,20
   24be0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   24be4:	00bffa04 	movi	r2,-24
   24be8:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   24bec:	008000f4 	movhi	r2,3
   24bf0:	10a7d804 	addi	r2,r2,-24736
   24bf4:	10800017 	ldw	r2,0(r2)
   24bf8:	e0bffd15 	stw	r2,-12(fp)
   24bfc:	e03ffe0d 	sth	zero,-8(fp)
   24c00:	e0fffe0b 	ldhu	r3,-8(fp)
   24c04:	e0bffe84 	addi	r2,fp,-6
   24c08:	e13ffd17 	ldw	r4,-12(fp)
   24c0c:	180b883a 	mov	r5,r3
   24c10:	100d883a 	mov	r6,r2
   24c14:	001ab900 	call	1ab90 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24c18:	e03ffb15 	stw	zero,-20(fp)
   24c1c:	00001d06 	br	24c94 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   24c20:	008000b4 	movhi	r2,2
   24c24:	109a4804 	addi	r2,r2,26912
   24c28:	e0fffb17 	ldw	r3,-20(fp)
   24c2c:	18c00324 	muli	r3,r3,12
   24c30:	10c5883a 	add	r2,r2,r3
   24c34:	10800017 	ldw	r2,0(r2)
   24c38:	1000131e 	bne	r2,zero,24c88 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   24c3c:	008000b4 	movhi	r2,2
   24c40:	109a4804 	addi	r2,r2,26912
   24c44:	e0fffb17 	ldw	r3,-20(fp)
   24c48:	18c00324 	muli	r3,r3,12
   24c4c:	10c5883a 	add	r2,r2,r3
   24c50:	e0ffff17 	ldw	r3,-4(fp)
   24c54:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   24c58:	008000b4 	movhi	r2,2
   24c5c:	109fbc04 	addi	r2,r2,32496
   24c60:	10c00017 	ldw	r3,0(r2)
   24c64:	e0bffb17 	ldw	r2,-20(fp)
   24c68:	1880040e 	bge	r3,r2,24c7c <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   24c6c:	008000b4 	movhi	r2,2
   24c70:	109fbc04 	addi	r2,r2,32496
   24c74:	e0fffb17 	ldw	r3,-20(fp)
   24c78:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   24c7c:	e0bffb17 	ldw	r2,-20(fp)
   24c80:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   24c84:	00000606 	br	24ca0 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24c88:	e0bffb17 	ldw	r2,-20(fp)
   24c8c:	10800044 	addi	r2,r2,1
   24c90:	e0bffb15 	stw	r2,-20(fp)
   24c94:	e0bffb17 	ldw	r2,-20(fp)
   24c98:	10800810 	cmplti	r2,r2,32
   24c9c:	103fe01e 	bne	r2,zero,24c20 <__alt_mem_Flash_flash_data+0xf4024c20>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   24ca0:	008000f4 	movhi	r2,3
   24ca4:	10a7d804 	addi	r2,r2,-24736
   24ca8:	10800017 	ldw	r2,0(r2)
   24cac:	1009883a 	mov	r4,r2
   24cb0:	001af640 	call	1af64 <OSSemPost>

  return rc;
   24cb4:	e0bffc17 	ldw	r2,-16(fp)
}
   24cb8:	e037883a 	mov	sp,fp
   24cbc:	dfc00117 	ldw	ra,4(sp)
   24cc0:	df000017 	ldw	fp,0(sp)
   24cc4:	dec00204 	addi	sp,sp,8
   24cc8:	f800283a 	ret

00024ccc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   24ccc:	defffb04 	addi	sp,sp,-20
   24cd0:	df000415 	stw	fp,16(sp)
   24cd4:	df000404 	addi	fp,sp,16
   24cd8:	e13ffe15 	stw	r4,-8(fp)
   24cdc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   24ce0:	e0bfff17 	ldw	r2,-4(fp)
   24ce4:	10840070 	cmpltui	r2,r2,4097
   24ce8:	1000021e 	bne	r2,zero,24cf4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   24cec:	00840004 	movi	r2,4096
   24cf0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   24cf4:	e0fffe17 	ldw	r3,-8(fp)
   24cf8:	e0bfff17 	ldw	r2,-4(fp)
   24cfc:	1885883a 	add	r2,r3,r2
   24d00:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   24d04:	e0bffe17 	ldw	r2,-8(fp)
   24d08:	e0bffc15 	stw	r2,-16(fp)
   24d0c:	00000506 	br	24d24 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   24d10:	e0bffc17 	ldw	r2,-16(fp)
   24d14:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   24d18:	e0bffc17 	ldw	r2,-16(fp)
   24d1c:	10800804 	addi	r2,r2,32
   24d20:	e0bffc15 	stw	r2,-16(fp)
   24d24:	e0fffc17 	ldw	r3,-16(fp)
   24d28:	e0bffd17 	ldw	r2,-12(fp)
   24d2c:	18bff836 	bltu	r3,r2,24d10 <__alt_mem_Flash_flash_data+0xf4024d10>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   24d30:	e0bffe17 	ldw	r2,-8(fp)
   24d34:	108007cc 	andi	r2,r2,31
   24d38:	10000226 	beq	r2,zero,24d44 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   24d3c:	e0bffc17 	ldw	r2,-16(fp)
   24d40:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   24d44:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   24d48:	e037883a 	mov	sp,fp
   24d4c:	df000017 	ldw	fp,0(sp)
   24d50:	dec00104 	addi	sp,sp,4
   24d54:	f800283a 	ret

00024d58 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   24d58:	defffe04 	addi	sp,sp,-8
   24d5c:	df000115 	stw	fp,4(sp)
   24d60:	df000104 	addi	fp,sp,4
   24d64:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   24d68:	e0bfff17 	ldw	r2,-4(fp)
   24d6c:	10bffe84 	addi	r2,r2,-6
   24d70:	10c00428 	cmpgeui	r3,r2,16
   24d74:	18001a1e 	bne	r3,zero,24de0 <alt_exception_cause_generated_bad_addr+0x88>
   24d78:	100690ba 	slli	r3,r2,2
   24d7c:	008000b4 	movhi	r2,2
   24d80:	10936404 	addi	r2,r2,19856
   24d84:	1885883a 	add	r2,r3,r2
   24d88:	10800017 	ldw	r2,0(r2)
   24d8c:	1000683a 	jmp	r2
   24d90:	00024dd0 	cmplti	zero,zero,2359
   24d94:	00024dd0 	cmplti	zero,zero,2359
   24d98:	00024de0 	cmpeqi	zero,zero,2359
   24d9c:	00024de0 	cmpeqi	zero,zero,2359
   24da0:	00024de0 	cmpeqi	zero,zero,2359
   24da4:	00024dd0 	cmplti	zero,zero,2359
   24da8:	00024dd8 	cmpnei	zero,zero,2359
   24dac:	00024de0 	cmpeqi	zero,zero,2359
   24db0:	00024dd0 	cmplti	zero,zero,2359
   24db4:	00024dd0 	cmplti	zero,zero,2359
   24db8:	00024de0 	cmpeqi	zero,zero,2359
   24dbc:	00024dd0 	cmplti	zero,zero,2359
   24dc0:	00024dd8 	cmpnei	zero,zero,2359
   24dc4:	00024de0 	cmpeqi	zero,zero,2359
   24dc8:	00024de0 	cmpeqi	zero,zero,2359
   24dcc:	00024dd0 	cmplti	zero,zero,2359
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   24dd0:	00800044 	movi	r2,1
   24dd4:	00000306 	br	24de4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   24dd8:	0005883a 	mov	r2,zero
   24ddc:	00000106 	br	24de4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   24de0:	0005883a 	mov	r2,zero
  }
}
   24de4:	e037883a 	mov	sp,fp
   24de8:	df000017 	ldw	fp,0(sp)
   24dec:	dec00104 	addi	sp,sp,4
   24df0:	f800283a 	ret

00024df4 <atexit>:
   24df4:	200b883a 	mov	r5,r4
   24df8:	000d883a 	mov	r6,zero
   24dfc:	0009883a 	mov	r4,zero
   24e00:	000f883a 	mov	r7,zero
   24e04:	0024ebc1 	jmpi	24ebc <__register_exitproc>

00024e08 <exit>:
   24e08:	defffe04 	addi	sp,sp,-8
   24e0c:	000b883a 	mov	r5,zero
   24e10:	dc000015 	stw	r16,0(sp)
   24e14:	dfc00115 	stw	ra,4(sp)
   24e18:	2021883a 	mov	r16,r4
   24e1c:	0024fd00 	call	24fd0 <__call_exitprocs>
   24e20:	008000b4 	movhi	r2,2
   24e24:	109fb204 	addi	r2,r2,32456
   24e28:	11000017 	ldw	r4,0(r2)
   24e2c:	20800f17 	ldw	r2,60(r4)
   24e30:	10000126 	beq	r2,zero,24e38 <exit+0x30>
   24e34:	103ee83a 	callr	r2
   24e38:	8009883a 	mov	r4,r16
   24e3c:	00251640 	call	25164 <_exit>

00024e40 <memcmp>:
   24e40:	01c000c4 	movi	r7,3
   24e44:	3980192e 	bgeu	r7,r6,24eac <memcmp+0x6c>
   24e48:	2144b03a 	or	r2,r4,r5
   24e4c:	11c4703a 	and	r2,r2,r7
   24e50:	10000f26 	beq	r2,zero,24e90 <memcmp+0x50>
   24e54:	20800003 	ldbu	r2,0(r4)
   24e58:	28c00003 	ldbu	r3,0(r5)
   24e5c:	10c0151e 	bne	r2,r3,24eb4 <memcmp+0x74>
   24e60:	31bfff84 	addi	r6,r6,-2
   24e64:	01ffffc4 	movi	r7,-1
   24e68:	00000406 	br	24e7c <memcmp+0x3c>
   24e6c:	20800003 	ldbu	r2,0(r4)
   24e70:	28c00003 	ldbu	r3,0(r5)
   24e74:	31bfffc4 	addi	r6,r6,-1
   24e78:	10c00e1e 	bne	r2,r3,24eb4 <memcmp+0x74>
   24e7c:	21000044 	addi	r4,r4,1
   24e80:	29400044 	addi	r5,r5,1
   24e84:	31fff91e 	bne	r6,r7,24e6c <__alt_mem_Flash_flash_data+0xf4024e6c>
   24e88:	0005883a 	mov	r2,zero
   24e8c:	f800283a 	ret
   24e90:	20c00017 	ldw	r3,0(r4)
   24e94:	28800017 	ldw	r2,0(r5)
   24e98:	1880041e 	bne	r3,r2,24eac <memcmp+0x6c>
   24e9c:	31bfff04 	addi	r6,r6,-4
   24ea0:	21000104 	addi	r4,r4,4
   24ea4:	29400104 	addi	r5,r5,4
   24ea8:	39bff936 	bltu	r7,r6,24e90 <__alt_mem_Flash_flash_data+0xf4024e90>
   24eac:	303fe91e 	bne	r6,zero,24e54 <__alt_mem_Flash_flash_data+0xf4024e54>
   24eb0:	003ff506 	br	24e88 <__alt_mem_Flash_flash_data+0xf4024e88>
   24eb4:	10c5c83a 	sub	r2,r2,r3
   24eb8:	f800283a 	ret

00024ebc <__register_exitproc>:
   24ebc:	008000b4 	movhi	r2,2
   24ec0:	defffa04 	addi	sp,sp,-24
   24ec4:	109fb204 	addi	r2,r2,32456
   24ec8:	dc000315 	stw	r16,12(sp)
   24ecc:	14000017 	ldw	r16,0(r2)
   24ed0:	dc400415 	stw	r17,16(sp)
   24ed4:	dfc00515 	stw	ra,20(sp)
   24ed8:	80805217 	ldw	r2,328(r16)
   24edc:	2023883a 	mov	r17,r4
   24ee0:	10003626 	beq	r2,zero,24fbc <__register_exitproc+0x100>
   24ee4:	10c00117 	ldw	r3,4(r2)
   24ee8:	010007c4 	movi	r4,31
   24eec:	20c00e16 	blt	r4,r3,24f28 <__register_exitproc+0x6c>
   24ef0:	1a400044 	addi	r9,r3,1
   24ef4:	8800211e 	bne	r17,zero,24f7c <__register_exitproc+0xc0>
   24ef8:	18c00084 	addi	r3,r3,2
   24efc:	18c7883a 	add	r3,r3,r3
   24f00:	18c7883a 	add	r3,r3,r3
   24f04:	12400115 	stw	r9,4(r2)
   24f08:	10c7883a 	add	r3,r2,r3
   24f0c:	19400015 	stw	r5,0(r3)
   24f10:	0005883a 	mov	r2,zero
   24f14:	dfc00517 	ldw	ra,20(sp)
   24f18:	dc400417 	ldw	r17,16(sp)
   24f1c:	dc000317 	ldw	r16,12(sp)
   24f20:	dec00604 	addi	sp,sp,24
   24f24:	f800283a 	ret
   24f28:	00800034 	movhi	r2,0
   24f2c:	10800004 	addi	r2,r2,0
   24f30:	10002526 	beq	r2,zero,24fc8 <__register_exitproc+0x10c>
   24f34:	01006404 	movi	r4,400
   24f38:	d9400015 	stw	r5,0(sp)
   24f3c:	d9800115 	stw	r6,4(sp)
   24f40:	d9c00215 	stw	r7,8(sp)
   24f44:	00000000 	call	0 <__alt_mem_SDRAM>
   24f48:	d9400017 	ldw	r5,0(sp)
   24f4c:	d9800117 	ldw	r6,4(sp)
   24f50:	d9c00217 	ldw	r7,8(sp)
   24f54:	10001c26 	beq	r2,zero,24fc8 <__register_exitproc+0x10c>
   24f58:	80c05217 	ldw	r3,328(r16)
   24f5c:	10000115 	stw	zero,4(r2)
   24f60:	02400044 	movi	r9,1
   24f64:	10c00015 	stw	r3,0(r2)
   24f68:	80805215 	stw	r2,328(r16)
   24f6c:	10006215 	stw	zero,392(r2)
   24f70:	10006315 	stw	zero,396(r2)
   24f74:	0007883a 	mov	r3,zero
   24f78:	883fdf26 	beq	r17,zero,24ef8 <__alt_mem_Flash_flash_data+0xf4024ef8>
   24f7c:	18d1883a 	add	r8,r3,r3
   24f80:	4211883a 	add	r8,r8,r8
   24f84:	1211883a 	add	r8,r2,r8
   24f88:	41802215 	stw	r6,136(r8)
   24f8c:	01000044 	movi	r4,1
   24f90:	11806217 	ldw	r6,392(r2)
   24f94:	20c8983a 	sll	r4,r4,r3
   24f98:	310cb03a 	or	r6,r6,r4
   24f9c:	11806215 	stw	r6,392(r2)
   24fa0:	41c04215 	stw	r7,264(r8)
   24fa4:	01800084 	movi	r6,2
   24fa8:	89bfd31e 	bne	r17,r6,24ef8 <__alt_mem_Flash_flash_data+0xf4024ef8>
   24fac:	11806317 	ldw	r6,396(r2)
   24fb0:	3108b03a 	or	r4,r6,r4
   24fb4:	11006315 	stw	r4,396(r2)
   24fb8:	003fcf06 	br	24ef8 <__alt_mem_Flash_flash_data+0xf4024ef8>
   24fbc:	80805304 	addi	r2,r16,332
   24fc0:	80805215 	stw	r2,328(r16)
   24fc4:	003fc706 	br	24ee4 <__alt_mem_Flash_flash_data+0xf4024ee4>
   24fc8:	00bfffc4 	movi	r2,-1
   24fcc:	003fd106 	br	24f14 <__alt_mem_Flash_flash_data+0xf4024f14>

00024fd0 <__call_exitprocs>:
   24fd0:	008000b4 	movhi	r2,2
   24fd4:	109fb204 	addi	r2,r2,32456
   24fd8:	10800017 	ldw	r2,0(r2)
   24fdc:	defff404 	addi	sp,sp,-48
   24fe0:	dd800815 	stw	r22,32(sp)
   24fe4:	d8800015 	stw	r2,0(sp)
   24fe8:	10805204 	addi	r2,r2,328
   24fec:	dd000615 	stw	r20,24(sp)
   24ff0:	dc800415 	stw	r18,16(sp)
   24ff4:	dfc00b15 	stw	ra,44(sp)
   24ff8:	df000a15 	stw	fp,40(sp)
   24ffc:	ddc00915 	stw	r23,36(sp)
   25000:	dd400715 	stw	r21,28(sp)
   25004:	dcc00515 	stw	r19,20(sp)
   25008:	dc400315 	stw	r17,12(sp)
   2500c:	dc000215 	stw	r16,8(sp)
   25010:	2025883a 	mov	r18,r4
   25014:	2829883a 	mov	r20,r5
   25018:	d8800115 	stw	r2,4(sp)
   2501c:	05bfffc4 	movi	r22,-1
   25020:	d8800017 	ldw	r2,0(sp)
   25024:	14c05217 	ldw	r19,328(r2)
   25028:	98001d26 	beq	r19,zero,250a0 <__call_exitprocs+0xd0>
   2502c:	dd400117 	ldw	r21,4(sp)
   25030:	98800117 	ldw	r2,4(r19)
   25034:	173fffc4 	addi	fp,r2,-1
   25038:	e0000d16 	blt	fp,zero,25070 <__call_exitprocs+0xa0>
   2503c:	14000044 	addi	r16,r2,1
   25040:	8421883a 	add	r16,r16,r16
   25044:	8421883a 	add	r16,r16,r16
   25048:	84402004 	addi	r17,r16,128
   2504c:	9c63883a 	add	r17,r19,r17
   25050:	9c21883a 	add	r16,r19,r16
   25054:	a0001e26 	beq	r20,zero,250d0 <__call_exitprocs+0x100>
   25058:	80804017 	ldw	r2,256(r16)
   2505c:	15001c26 	beq	r2,r20,250d0 <__call_exitprocs+0x100>
   25060:	e73fffc4 	addi	fp,fp,-1
   25064:	843fff04 	addi	r16,r16,-4
   25068:	8c7fff04 	addi	r17,r17,-4
   2506c:	e5bff91e 	bne	fp,r22,25054 <__alt_mem_Flash_flash_data+0xf4025054>
   25070:	00800034 	movhi	r2,0
   25074:	10800004 	addi	r2,r2,0
   25078:	10000926 	beq	r2,zero,250a0 <__call_exitprocs+0xd0>
   2507c:	98800117 	ldw	r2,4(r19)
   25080:	1000311e 	bne	r2,zero,25148 <__call_exitprocs+0x178>
   25084:	98800017 	ldw	r2,0(r19)
   25088:	10003426 	beq	r2,zero,2515c <__call_exitprocs+0x18c>
   2508c:	9809883a 	mov	r4,r19
   25090:	a8800015 	stw	r2,0(r21)
   25094:	00000000 	call	0 <__alt_mem_SDRAM>
   25098:	acc00017 	ldw	r19,0(r21)
   2509c:	983fe41e 	bne	r19,zero,25030 <__alt_mem_Flash_flash_data+0xf4025030>
   250a0:	dfc00b17 	ldw	ra,44(sp)
   250a4:	df000a17 	ldw	fp,40(sp)
   250a8:	ddc00917 	ldw	r23,36(sp)
   250ac:	dd800817 	ldw	r22,32(sp)
   250b0:	dd400717 	ldw	r21,28(sp)
   250b4:	dd000617 	ldw	r20,24(sp)
   250b8:	dcc00517 	ldw	r19,20(sp)
   250bc:	dc800417 	ldw	r18,16(sp)
   250c0:	dc400317 	ldw	r17,12(sp)
   250c4:	dc000217 	ldw	r16,8(sp)
   250c8:	dec00c04 	addi	sp,sp,48
   250cc:	f800283a 	ret
   250d0:	98800117 	ldw	r2,4(r19)
   250d4:	80c00017 	ldw	r3,0(r16)
   250d8:	10bfffc4 	addi	r2,r2,-1
   250dc:	17001526 	beq	r2,fp,25134 <__call_exitprocs+0x164>
   250e0:	80000015 	stw	zero,0(r16)
   250e4:	183fde26 	beq	r3,zero,25060 <__alt_mem_Flash_flash_data+0xf4025060>
   250e8:	00800044 	movi	r2,1
   250ec:	1708983a 	sll	r4,r2,fp
   250f0:	98806217 	ldw	r2,392(r19)
   250f4:	9dc00117 	ldw	r23,4(r19)
   250f8:	2084703a 	and	r2,r4,r2
   250fc:	1000061e 	bne	r2,zero,25118 <__call_exitprocs+0x148>
   25100:	183ee83a 	callr	r3
   25104:	98800117 	ldw	r2,4(r19)
   25108:	15ffc51e 	bne	r2,r23,25020 <__alt_mem_Flash_flash_data+0xf4025020>
   2510c:	a8800017 	ldw	r2,0(r21)
   25110:	14ffd326 	beq	r2,r19,25060 <__alt_mem_Flash_flash_data+0xf4025060>
   25114:	003fc206 	br	25020 <__alt_mem_Flash_flash_data+0xf4025020>
   25118:	98806317 	ldw	r2,396(r19)
   2511c:	2084703a 	and	r2,r4,r2
   25120:	1000061e 	bne	r2,zero,2513c <__call_exitprocs+0x16c>
   25124:	89400017 	ldw	r5,0(r17)
   25128:	9009883a 	mov	r4,r18
   2512c:	183ee83a 	callr	r3
   25130:	003ff406 	br	25104 <__alt_mem_Flash_flash_data+0xf4025104>
   25134:	9f000115 	stw	fp,4(r19)
   25138:	003fea06 	br	250e4 <__alt_mem_Flash_flash_data+0xf40250e4>
   2513c:	89000017 	ldw	r4,0(r17)
   25140:	183ee83a 	callr	r3
   25144:	003fef06 	br	25104 <__alt_mem_Flash_flash_data+0xf4025104>
   25148:	98800017 	ldw	r2,0(r19)
   2514c:	982b883a 	mov	r21,r19
   25150:	1027883a 	mov	r19,r2
   25154:	983fb61e 	bne	r19,zero,25030 <__alt_mem_Flash_flash_data+0xf4025030>
   25158:	003fd106 	br	250a0 <__alt_mem_Flash_flash_data+0xf40250a0>
   2515c:	0005883a 	mov	r2,zero
   25160:	003ffa06 	br	2514c <__alt_mem_Flash_flash_data+0xf402514c>

00025164 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   25164:	defffd04 	addi	sp,sp,-12
   25168:	df000215 	stw	fp,8(sp)
   2516c:	df000204 	addi	fp,sp,8
   25170:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   25174:	008000f4 	movhi	r2,3
   25178:	10a7e044 	addi	r2,r2,-24703
   2517c:	10000005 	stb	zero,0(r2)
   25180:	e0bfff17 	ldw	r2,-4(fp)
   25184:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   25188:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2518c:	10000226 	beq	r2,zero,25198 <_exit+0x34>
    ALT_SIM_FAIL();
   25190:	002af070 	cmpltui	zero,zero,43969
   25194:	00000106 	br	2519c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   25198:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2519c:	003fff06 	br	2519c <__alt_mem_Flash_flash_data+0xf402519c>
