
KBS_ESA_PAINGAME.elf:     file format elf32-littlenios2
KBS_ESA_PAINGAME.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000207d4 memsz 0x000207d4 flags r-x
    LOAD off    0x000217f4 vaddr 0x000207f4 paddr 0x00022720 align 2**12
         filesz 0x00001f2c memsz 0x00001f2c flags rw-
    LOAD off    0x0002464c vaddr 0x0002464c paddr 0x0002464c align 2**12
         filesz 0x00000000 memsz 0x000234c4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001f908  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000ca8  0001fb4c  0001fb4c  00020b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f2c  000207f4  00022720  000217f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000234c4  0002464c  0002464c  0002464c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00047b10  00047b10  00023720  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  00023720  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00023720  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011c0  00000000  00000000  00023748  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00034e36  00000000  00000000  00024908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c25f  00000000  00000000  0005973e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010812  00000000  00000000  0006599d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00004018  00000000  00000000  000761b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005722  00000000  00000000  0007a1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b16c  00000000  00000000  0007f8ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0009aa58  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001990  00000000  00000000  0009aa78  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000a258d  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000a2593  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000a2598  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000a2599  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000a259a  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000a259e  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000a25a2  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000a25a6  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000a25af  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000a25b8  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000a25c1  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  000a25cc  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  000a262a  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  000ad1ef  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0001fb4c l    d  .rodata	00000000 .rodata
000207f4 l    d  .rwdata	00000000 .rwdata
0002464c l    d  .bss	00000000 .bss
00047b10 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/rickert/Documents/GitHub/KBS_ESA_PAINGAME/KBS_ESA_PAINGAME_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Contoller.c
00000000 l    df *ABS*	00000000 Game.c
00000000 l    df *ABS*	00000000 Menu.c
00000000 l    df *ABS*	00000000 Singleplayer.c
00000000 l    df *ABS*	00000000 Tutorial.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00020242 l     O .rodata	00000010 zeroes.4240
00020252 l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 vfprintf.c
00020262 l     O .rodata	00000010 zeroes.4255
000074b4 l     F .text	000000bc __sbprintf
00020272 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000076c4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00009280 l     F .text	00000008 __fp_lock
00009288 l     F .text	00000008 __fp_unlock
0000929c l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000207f4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00020c38 l     O .rwdata	00000020 lc_ctype_charset
00020c18 l     O .rwdata	00000020 lc_message_charset
00020c58 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000202a4 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000203c8 l     O .rodata	00000010 zeroes.4184
000203d8 l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 vfprintf.c
0000d910 l     F .text	000000fc __sprint_r.part.0
000203f8 l     O .rodata	00000010 blanks.4199
000203e8 l     O .rodata	00000010 zeroes.4200
0000ed18 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0001021c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00012948 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00012a68 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00012a94 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00012b94 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00012c88 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00012d6c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00012f64 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00022694 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000131c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00022698 l     O .rwdata	00000004 lockid
000246ec l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0002269c l     O .rwdata	00000004 lockid
000246f4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00014bf4 l     F .text	00000044 OS_InitMisc
00014c38 l     F .text	00000068 OS_InitRdyList
00014d98 l     F .text	000000e0 OS_InitTCBList
00014b18 l     F .text	000000dc OS_InitEventList
00014ca0 l     F .text	0000007c OS_InitTaskIdle
00014d1c l     F .text	0000007c OS_InitTaskStat
00014ff8 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00016dfc l     F .text	00000110 OS_FlagTaskRdy
00016b54 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001be2c l     F .text	00000038 alt_dev_reg
00021240 l     O .rwdata	0000106c JTAG_UART
000222ac l     O .rwdata	00000030 AV_Config
000222dc l     O .rwdata	00000030 Audio_Subsystem_Audio
0002230c l     O .rwdata	0000002c Char_LCD_16x2
00022338 l     O .rwdata	0000002c IrDA
00022364 l     O .rwdata	0000002c Expansion_JP5
00022390 l     O .rwdata	0000002c Green_LEDs
000223bc l     O .rwdata	0000002c HEX3_HEX0
000223e8 l     O .rwdata	0000002c HEX7_HEX4
00022414 l     O .rwdata	0000002c Pushbuttons
00022440 l     O .rwdata	0000002c Red_LEDs
0002246c l     O .rwdata	0000002c Slider_Switches
00022498 l     O .rwdata	00000038 PS2_Port
000224d0 l     O .rwdata	00000038 PS2_Port_Dual
00022508 l     O .rwdata	0000002c Serial_Port
00022534 l     O .rwdata	00000034 USB
00022568 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
000225b0 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
00022604 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001c514 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0001c7bc l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001cf94 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001e7b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001ea1c l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001ed04 l     F .text	00000050 alt_get_errno
0001ed54 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00024758 g     O .bss	00000004 alt_instruction_exception_handler
0000bd84 g     F .text	00000074 _mprec_log10
000226ea g     O .rwdata	00000002 OSTaskNameSize
0000be70 g     F .text	0000008c __any_on
0000f284 g     F .text	00000054 _isatty_r
000202b0 g     O .rodata	00000028 __mprec_tinytens
00012e90 g     F .text	000000d4 alt_main
00003398 g     F .text	000000a8 _puts_r
00047a10 g     O .bss	00000100 alt_irq
0001db70 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
0000f2d8 g     F .text	0000005c _lseek_r
000181e8 g     F .text	000000d0 OS_MemInit
00022720 g       *ABS*	00000000 __flash_rwdata_start
0001bdc8 g     F .text	00000064 OSTimeSet
0001d100 g     F .text	0000003c alt_up_character_lcd_send_cmd
000114b0 g     F .text	00000084 .hidden __eqdf2
00013870 g     F .text	00000610 OSEventPendMulti
00047b10 g       *ABS*	00000000 __alt_heap_start
0001f360 g     F .text	00000020 OSTaskCreateHook
0000335c g     F .text	0000003c printf
000226c2 g     O .rwdata	00000002 OSMboxEn
00024678 g     O .bss	00000004 random
00013ed4 g     F .text	0000007c OSIntEnter
0000f4e4 g     F .text	0000009c _wcrtomb_r
0000c604 g     F .text	0000005c __sseek
000095d0 g     F .text	00000010 __sinit
0001e4f8 g     F .text	00000100 alt_up_char_buffer_string
0000f390 g     F .text	00000138 __swbuf_r
0001d990 g     F .text	00000034 read_CE_bit
000226d2 g     O .rwdata	00000002 OSQEn
00001900 g     F .text	000002ac Tutorial
0000a07c g     F .text	0000007c _setlocale_r
00009438 g     F .text	00000068 __sfmoreglue
00013544 g     F .text	000000d0 __malloc_unlock
0001f3bc g     F .text	0000001c OSTaskStatHook
0001dd14 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
0001e208 g     F .text	00000090 alt_up_rs232_read_fd
000246fc g     O .bss	00000001 OSLockNesting
00001dec g     F .text	000000ec menu
00022710 g     O .rwdata	00000002 OSDataSize
000246fd g     O .bss	00000001 OSRunning
0001e42c g     F .text	000000cc alt_up_char_buffer_draw
00024784 g     O .bss	00009c40 Singleplayer_stk
0002464c g     O .bss	00000004 counter3
0000acdc g     F .text	0000015c memmove
0001f3f4 g     F .text	0000001c OSInitHookBegin
00022708 g     O .rwdata	00000002 OSTmrSize
000095b8 g     F .text	00000018 _cleanup
0000af5c g     F .text	000000a8 _Balloc
0002263c g     O .rwdata	00000004 gameModeMenu
00024700 g     O .bss	00000004 OSIdleCtr
00011534 g     F .text	000000e0 .hidden __gtdf2
00022644 g     O .rwdata	00000004 xRechts
0001f114 g     F .text	00000020 altera_nios2_gen2_irq_init
0001f1e0 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0001d08c g     F .text	00000074 get_DDRAM_addr
00015330 g     F .text	000002d4 OS_TCBInit
00022654 g     O .rwdata	00000004 yMenu
00000000 g     F .entry	0000001c __reset
0002270e g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
000226ae g     O .rwdata	00000002 OSEventSize
00024704 g     O .bss	00000001 OSPrioHighRdy
0000f22c g     F .text	00000058 _fstat_r
0001f380 g     F .text	00000020 OSTaskDelHook
000246d8 g     O .bss	00000004 errno
0000c580 g     F .text	00000008 __seofread
0001f1c0 g       .text	00000000 OSStartHighRdy
0002467c g     O .bss	00000004 pixel_buffer_y
0001a6cc g     F .text	000001ec OSTaskCreateExt
0000c8d8 g     F .text	00001038 ___svfiprintf_internal_r
000166a0 g     F .text	00000068 OSFlagPendGetFlagsRdy
000226ee g     O .rwdata	00000002 OSTaskStatStkSize
00015790 g     F .text	00000308 OSFlagAccept
000188bc g     F .text	000000b8 OSQFlush
000182b8 g     F .text	00000140 OSQAccept
000246e4 g     O .bss	00000004 alt_argv
00001698 g     F .text	00000268 endTutorial
00024680 g     O .bss	00000004 score1
0002a630 g       *ABS*	00000000 _gp
0001a510 g     F .text	000001bc OSTaskCreate
00019fd0 g     F .text	00000540 OSTaskChangePrio
000246f8 g     O .bss	00000004 alt_heapsem
00002b74 g     F .text	0000003c del_middenlijn
00015604 g     F .text	0000018c OSDebugInit
0001a8b8 g     F .text	000003e0 OSTaskDel
00022648 g     O .rwdata	00000004 xBoven
000210c0 g     O .rwdata	00000180 alt_fd_list
0002265c g     O .rwdata	00000004 onePress
000447ec g     O .bss	00000370 OSFlagTbl
00014904 g     F .text	000000b4 OS_EventTaskRemove
0001e95c g     F .text	00000090 alt_find_dev
0000aba4 g     F .text	00000138 memcpy
000226d8 g     O .rwdata	00000002 OSRdyTblSize
0001d29c g     F .text	00000050 alt_up_character_lcd_write_fd
0001e5f8 g     F .text	0000005c alt_up_char_buffer_clear
00009290 g     F .text	0000000c _cleanup_r
00012770 g     F .text	000000d0 .hidden __floatsidf
0001eadc g     F .text	00000078 alt_io_redirect
00011614 g     F .text	000000e0 .hidden __ltdf2
0001fb4c g       *ABS*	00000000 __DTOR_END__
0001d81c g     F .text	00000090 alt_up_irda_write_fd
0001e194 g     F .text	00000074 alt_up_rs232_read_data
00003440 g     F .text	00000014 puts
0001f704 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00013614 g     F .text	00000120 OSEventNameGet
000226bc g     O .rwdata	00000002 OSFlagMax
0000c464 g     F .text	00000074 __fpclassifyd
000246b0 g     O .bss	00000004 last
0000bce0 g     F .text	000000a4 __ratio
00013f50 g     F .text	000000f4 OSIntExit
0000ecf4 g     F .text	00000024 __vfiprintf_internal
000226f6 g     O .rwdata	00000002 OSTCBSize
00024705 g     O .bss	00000001 OSPrioCur
0001d618 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0001ca20 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00003330 g     F .text	0000002c _printf_r
00010338 g     F .text	00000008 .hidden __udivsi3
00012be4 g     F .text	000000a4 isatty
000226dc g     O .rwdata	00000002 OSStkWidth
00020300 g     O .rodata	000000c8 __mprec_tens
000226d0 g     O .rwdata	00000002 OSPtrSize
0000a0f8 g     F .text	0000000c __locale_charset
000226b0 g     O .rwdata	00000002 OSEventTblSize
0001d5bc g     F .text	0000005c alt_up_irda_disable_read_interrupt
00022650 g     O .rwdata	00000004 xMenu
0001f134 g       .text	00000000 OSCtxSw
0001f678 g     F .text	0000008c alt_icache_flush
000246d4 g     O .bss	00000004 __malloc_top_pad
00000688 g     F .text	00000104 moveDown
00024708 g     O .bss	00000004 OSTCBList
00024650 g     O .bss	00000004 gpio_dev
00022638 g     O .rwdata	00000004 leven
000246dc g     O .bss	00000004 alt_fd_list_lock
0002266c g     O .rwdata	00000004 __mb_cur_max
0000a128 g     F .text	0000000c _localeconv_r
0000b368 g     F .text	0000003c __i2b
00009a34 g     F .text	000004c0 __sfvwrite_r
00044b5c g     O .bss	00000c30 OSMemTbl
0002470c g     O .bss	00000001 OSTickStepState
0000c4d8 g     F .text	00000054 _sbrk_r
0002e3c4 g     O .bss	00002004 menu_stk
000226d4 g     O .rwdata	00000002 OSQMax
0004578c g     O .bss	00000800 OSTaskStatStk
00017e18 g     F .text	000000f8 OSMemNameGet
000226b4 g     O .rwdata	00000002 OSFlagEn
0000f334 g     F .text	0000005c _read_r
000226fa g     O .rwdata	00000002 OSTimeTickHookEn
00018ddc g     F .text	00000168 OSQPost
00016f0c g     F .text	000000a0 OS_FlagUnlink
0002268c g     O .rwdata	00000004 alt_max_fd
0001e110 g     F .text	00000044 alt_up_rs232_check_parity
00014ec8 g     F .text	00000064 OS_MemCopy
00014f2c g     F .text	000000cc OS_Sched
0000ef48 g     F .text	000000f0 _fclose_r
00017d28 g     F .text	000000f0 OSMemGet
00017a24 g     F .text	00000110 OSMboxQuery
0001af98 g     F .text	000001c0 OSTaskNameSet
0001d9c4 g     F .text	00000030 read_num_bytes_available
00009250 g     F .text	00000030 fflush
000246d0 g     O .bss	00000004 __malloc_max_sbrked_mem
00024710 g     O .bss	00000004 OSCtxSwCtr
0001f3d8 g     F .text	0000001c OSTimeTickHook
0001eb54 g     F .text	000001b0 alt_irq_register
000226be g     O .rwdata	00000002 OSFlagNameSize
0001d92c g     F .text	00000034 read_RI_bit
000149b8 g     F .text	000000fc OS_EventTaskRemoveMulti
00024654 g     O .bss	00000004 controllerSem
00010348 g     F .text	0000089c .hidden __adddf3
000147b8 g     F .text	0000014c OS_EventTaskWaitMulti
0000ba88 g     F .text	0000011c __b2d
000226d6 g     O .rwdata	00000002 OSQSize
0000fc8c g     F .text	00000590 .hidden __umoddi3
00012dbc g     F .text	000000d4 lseek
000198e0 g     F .text	00000268 OSSemPend
00022664 g     O .rwdata	00000004 _global_impure_ptr
0000befc g     F .text	00000568 _realloc_r
000246ac g     O .bss	00000004 vorige
000226c0 g     O .rwdata	00000002 OSLowestPrio
00047b10 g       *ABS*	00000000 __bss_end
0001f448 g     F .text	00000020 OSTCBInitHook
00022706 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001f010 g     F .text	00000104 alt_tick
000177b8 g     F .text	00000110 OSMboxPost
00024658 g     O .bss	00000004 counter1
0000f6cc g     F .text	000005c0 .hidden __udivdi3
0000f04c g     F .text	00000184 _fputwc_r
000226a8 g     O .rwdata	00000002 OSEventEn
000202d8 g     O .rodata	00000028 __mprec_bigtens
0000b14c g     F .text	00000104 __s2b
00022702 g     O .rwdata	00000002 OSTmrCfgNameSize
00012840 g     F .text	000000a4 .hidden __floatunsidf
0000b830 g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0001da28 g     F .text	0000002c read_data_byte
00001da0 g     F .text	0000004c terugMenu
000095f0 g     F .text	00000018 __fp_lock_all
00016d18 g     F .text	000000e4 OS_FlagInit
0001ef78 g     F .text	00000098 alt_alarm_stop
0002465c g     O .bss	00000004 Flags_Games
0001d960 g     F .text	00000030 read_RE_bit
000226e4 g     O .rwdata	00000002 OSTaskIdleStkSize
0002474c g     O .bss	00000004 alt_irq_active
000194c8 g     F .text	000000b0 OSSemAccept
00002a7c g     F .text	00000090 VGA_text
00018028 g     F .text	000000d8 OSMemPut
00024684 g     O .bss	00000004 pixel_buffer_x
00017b34 g     F .text	000001f4 OSMemCreate
00024714 g     O .bss	00000004 OSIdleCtrMax
000303c8 g     O .bss	00002004 controller1_stk
0001d658 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
00021098 g     O .rwdata	00000028 alt_dev_null
000226f8 g     O .rwdata	00000002 OSTicksPerSec
00024688 g     O .bss	00000004 Flags_Highscores
0001d530 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0001d8ec g     F .text	00000040 alt_up_parallel_port_open_dev
0001f134 g       .text	00000000 OSIntCtxSw
0001dbcc g     F .text	00000074 alt_up_ps2_write_data_byte
00000e68 g     F .text	0000017c endGame
0001e794 g     F .text	0000001c alt_dcache_flush_all
0000b250 g     F .text	00000068 __hi0bits
000126e8 g     F .text	00000088 .hidden __fixdfsi
00024718 g     O .bss	00000004 OSTCBFreeList
00022720 g       *ABS*	00000000 __ram_rwdata_end
00019b48 g     F .text	0000016c OSSemPendAbort
00022684 g     O .rwdata	00000008 alt_dev_list
00013210 g     F .text	000000f8 write
000323cc g     O .bss	00002004 Tutorial_stk
000226fc g     O .rwdata	00000002 OSVersionNbr
000207f4 g       *ABS*	00000000 __ram_rodata_end
00012ae4 g     F .text	000000b0 fstat
0001e298 g     F .text	00000094 alt_up_rs232_write_fd
00001ed8 g     F .text	0000049c selecteerMenu
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00011614 g     F .text	000000e0 .hidden __ledf2
000226a4 g     O .rwdata	00000004 OSEndiannessTest
0000b5a0 g     F .text	00000140 __pow5mult
0000da24 g     F .text	000012d0 ___vfiprintf_internal_r
000246c8 g     O .bss	00000004 __nlocale_changed
00010340 g     F .text	00000008 .hidden __umodsi3
000226b6 g     O .rwdata	00000002 OSFlagGrpSize
00000280 g     F .text	0000011c controllers
00047b10 g       *ABS*	00000000 end
0001df08 g     F .text	00000098 alt_up_ps2_write_fd
0001d694 g     F .text	00000044 alt_up_irda_check_parity
0001e36c g     F .text	00000080 alt_up_char_buffer_init
00002534 g     F .text	00000238 teken_menu
0001c3d4 g     F .text	00000140 altera_avalon_jtag_uart_init
0001518c g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000078c g     F .text	000004b8 Game
00022634 g     O .rwdata	00000004 check
0001fb4c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0001d00c g     F .text	00000080 alt_avalon_timer_sc_init
000128e4 g     F .text	00000064 .hidden __clzsi2
0001ccd4 g     F .text	000002c0 altera_avalon_jtag_uart_write
000095e0 g     F .text	00000004 __sfp_lock_acquire
0000aabc g     F .text	000000e8 memchr
00014e78 g     F .text	00000050 OS_MemClr
0001d1b0 g     F .text	00000078 alt_up_character_lcd_write
00005540 g     F .text	00001f50 ___vfprintf_internal_r
0001f204 g     F .text	0000015c OSTaskStkInit
00003454 g     F .text	00000058 _sprintf_r
00009744 g     F .text	000002f0 _free_r
0000a104 g     F .text	00000010 __locale_mb_cur_max
00014514 g     F .text	00000198 OS_EventTaskRdy
0001f97c g     F .text	00000194 __call_exitprocs
0002471c g     O .bss	00000001 OSCPUUsage
000246c4 g     O .bss	00000004 __mlocale_changed
00022670 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00002c20 g     F .text	0000003c deleteNummer
00024750 g     O .bss	00000004 _alt_tick_rate
00018974 g     F .text	000002fc OSQPend
0001b8c4 g     F .text	00000148 OSTimeDly
000343d0 g     O .bss	00002004 controller2_stk
0000b6e0 g     F .text	00000150 __lshift
00024754 g     O .bss	00000004 _alt_nticks
00012fb4 g     F .text	000000fc read
0001be98 g     F .text	000003d8 alt_sys_init
0001d3e8 g     F .text	00000088 alt_up_character_lcd_shift_display
0000c70c g     F .text	000001cc __ssprint_r
0001f868 g     F .text	00000114 __register_exitproc
0002471d g     O .bss	00000001 OSTaskCtr
0001de28 g     F .text	00000054 alt_up_ps2_clear_fifo
0001e0d4 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
0002468c g     O .bss	00000004 score2
00024660 g     O .bss	00000004 MailBox2
000029c8 g     F .text	000000b4 VGA_box
0001ba0c g     F .text	00000168 OSTimeDlyHMSM
00001130 g     F .text	00000414 Singleplayer
0000b3a4 g     F .text	000001fc __multiply
0001d470 g     F .text	0000008c alt_up_character_lcd_erase_pos
0001c8cc g     F .text	00000068 altera_avalon_jtag_uart_close
000207f4 g       *ABS*	00000000 __ram_rwdata_start
0001fb4c g       *ABS*	00000000 __ram_rodata_start
0002475c g     O .bss	00000028 __malloc_current_mallinfo
000226aa g     O .rwdata	00000002 OSEventMax
0000bba4 g     F .text	0000013c __d2b
00019cb4 g     F .text	00000110 OSSemPost
000140cc g     F .text	000000d8 OSSchedUnlock
00002b0c g     F .text	00000068 draw_middenlijn
0001c270 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001f57c g     F .text	000000fc alt_get_fd
00024720 g     O .bss	00000004 OSMemFreeList
00014210 g     F .text	000000ac OSStatInit
00016a90 g     F .text	000000c4 OSFlagQuery
000226e0 g     O .rwdata	00000002 OSTaskCreateExtEn
0000ee30 g     F .text	00000054 _close_r
0001f7ec g     F .text	0000007c memcmp
000144f8 g     F .text	0000001c OS_Dummy
0001c330 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00047b10 g       *ABS*	00000000 __alt_stack_base
0001c380 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000246b4 g     O .bss	00000004 changed
0001d564 g     F .text	00000058 alt_up_irda_enable_read_interrupt
00007570 g     F .text	00000154 __swsetup_r
000363d4 g     O .bss	00002004 Highscores_stk
00045f8c g     O .bss	000001e0 OSQTbl
0000039c g     F .text	000001a0 controller
00010be4 g     F .text	000008cc .hidden __divdf3
000094a0 g     F .text	00000118 __sfp
0000bdf8 g     F .text	00000078 __copybits
00020c90 g     O .rwdata	00000408 __malloc_av_
00024690 g     O .bss	00000004 ALT_y
000095ec g     F .text	00000004 __sinit_lock_release
00024724 g     O .bss	00000004 OSTCBHighRdy
000116f4 g     F .text	00000724 .hidden __muldf3
0000c52c g     F .text	00000054 __sread
00024728 g     O .bss	00000004 OSQFreeList
0001e038 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
0001f468 g     F .text	00000114 alt_find_file
0001e800 g     F .text	000000a4 alt_dev_llist_insert
00013424 g     F .text	00000120 __malloc_lock
00013110 g     F .text	000000b0 sbrk
000035b0 g     F .text	00001f90 ___svfprintf_internal_r
00024694 g     O .bss	00000004 ALT_inc_y
00013734 g     F .text	0000013c OSEventNameSet
000091f4 g     F .text	0000005c _fflush_r
0000ee84 g     F .text	000000c4 _calloc_r
0002472c g     O .bss	00000001 OSRdyGrp
0002464c g       *ABS*	00000000 __bss_start
0000ae38 g     F .text	00000124 memset
0000276c g     F .text	0000025c main
000246e8 g     O .bss	00000004 alt_envp
000246cc g     O .bss	00000004 __malloc_max_total_mem
0001e3ec g     F .text	00000040 alt_up_char_buffer_open_dev
0001c2d0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000f4c8 g     F .text	0000001c __swbuf
00020524 g     O .rodata	00000100 OSUnMapTbl
000226da g     O .rwdata	00000002 OSSemEn
0001d360 g     F .text	00000088 alt_up_character_lcd_shift_cursor
00016708 g     F .text	00000388 OSFlagPost
0000c660 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000f038 g     F .text	00000014 fclose
000146ac g     F .text	0000010c OS_EventTaskWait
0001ddb8 g     F .text	00000070 alt_up_ps2_read_data_byte
000246bc g     O .bss	00000004 timeout
00015268 g     F .text	000000c8 OS_TaskStatStkChk
0001ac98 g     F .text	00000158 OSTaskDelReq
000078c4 g     F .text	00001728 _dtoa_r
0000a314 g     F .text	000007a8 _malloc_r
0000f640 g     F .text	00000030 __ascii_wctomb
00022690 g     O .rwdata	00000004 alt_errno
000141a4 g     F .text	0000006c OSStart
000133c8 g     F .text	0000005c __env_unlock
00009ef4 g     F .text	000000c4 _fwalk
0001b158 g     F .text	000001f8 OSTaskResume
00018100 g     F .text	000000e8 OSMemQuery
000226ec g     O .rwdata	00000002 OSTaskStatEn
000383d8 g     O .bss	00009c40 Game_stk
0001d6d8 g     F .text	00000040 alt_up_irda_write_data
000226c6 g     O .rwdata	00000002 OSMemMax
00018f44 g     F .text	00000170 OSQPostFront
0001dfa0 g     F .text	00000040 alt_up_ps2_open_dev
00010288 g     F .text	00000054 .hidden __divsi3
0002472d g     O .bss	00000003 OSRdyTbl
000226a0 g     O .rwdata	00000002 OSDebugEn
0001d170 g     F .text	00000040 alt_up_character_lcd_open_dev
00009620 g     F .text	00000124 _malloc_trim_r
0001db18 g     F .text	00000058 alt_up_ps2_enable_read_interrupt
0001fb4c g       *ABS*	00000000 __CTOR_END__
000226b8 g     O .rwdata	00000002 OSFlagNodeSize
00022700 g     O .rwdata	00000002 OSTmrCfgMax
0001d13c g     F .text	00000034 alt_up_character_lcd_init
0000c668 g     F .text	000000a4 strcmp
000183f8 g     F .text	000001fc OSQCreate
0001adf0 g     F .text	000001a8 OSTaskNameGet
0001fb4c g       *ABS*	00000000 __flash_rodata_start
000190b4 g     F .text	0000020c OSQPostOpt
000142bc g     F .text	0000021c OSTimeTick
000226e8 g     O .rwdata	00000002 OSTaskMax
0001fb4c g       *ABS*	00000000 __DTOR_LIST__
00019578 g     F .text	00000100 OSSemCreate
0002270c g     O .rwdata	00000002 OSTmrWheelSize
0001e32c g     F .text	00000040 alt_up_rs232_open_dev
00024698 g     O .bss	00000004 gameSem
000114b0 g     F .text	00000084 .hidden __nedf2
000226e2 g     O .rwdata	00000002 OSTaskDelEn
00019dc4 g     F .text	00000110 OSSemQuery
000185f4 g     F .text	000002c8 OSQDel
00018c70 g     F .text	0000016c OSQPendAbort
0001be64 g     F .text	00000034 alt_irq_init
000130b0 g     F .text	00000060 alt_release_fd
0000053c g     F .text	0000004c checkID
0001d9f4 g     F .text	00000034 read_data_valid
000034ac g     F .text	0000006c sprintf
0001d4fc g     F .text	00000034 alt_up_character_lcd_cursor_off
00020408 g     O .rodata	00000100 .hidden __clz_tab
000246c0 g     O .bss	00000004 _PathLocale
0001dcb0 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001f7a0 g     F .text	00000014 atexit
00001bac g     F .text	00000124 endHighscores
00002bb0 g     F .text	00000070 del_number
0000edd4 g     F .text	0000005c _write_r
00014044 g     F .text	00000088 OSSchedLock
0000a134 g     F .text	0000001c setlocale
00015a98 g     F .text	00000128 OSFlagCreate
00022668 g     O .rwdata	00000004 _impure_ptr
000246e0 g     O .bss	00000004 alt_argc
00008fec g     F .text	00000208 __sflush_r
0001e900 g     F .text	0000005c _do_dtors
0000a120 g     F .text	00000008 __locale_cjk_lang
000226b2 g     O .rwdata	00000002 OSEventMultiEn
00015bc0 g     F .text	00000270 OSFlagDel
00024730 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
0001764c g     F .text	0000016c OSMboxPendAbort
0000ba28 g     F .text	00000060 __ulp
000226fe g     O .rwdata	00000002 OSTmrEn
000160b0 g     F .text	000005f0 OSFlagPend
00009608 g     F .text	00000018 __fp_unlock_all
0002267c g     O .rwdata	00000008 alt_fs_list
00015068 g     F .text	00000074 OS_StrCopy
0001dfe0 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0001e154 g     F .text	00000040 alt_up_rs232_write_data
00000588 g     F .text	00000100 moveUp
000226c8 g     O .rwdata	00000002 OSMemNameSize
0002469c g     O .bss	00000004 ALT_x1
0001f410 g     F .text	0000001c OSInitHookEnd
00042018 g     O .bss	000007d0 Messages
00002c5c g     F .text	00000674 draw_number
00000020 g       *ABS*	00000000 __ram_exceptions_start
000226f4 g     O .rwdata	00000002 OSTCBPrioTblMax
0000a150 g     F .text	0000000c localeconv
000226f0 g     O .rwdata	00000002 OSTaskStatStkChkEn
00017044 g     F .text	000000fc OSMboxCreate
000226c4 g     O .rwdata	00000002 OSMemEn
00022630 g     O .rwdata	00000004 first
000226ce g     O .rwdata	00000002 OSMutexEn
00024674 g     O .bss	00000004 score3
00022720 g       *ABS*	00000000 _edata
00022660 g     O .rwdata	00000004 interval_timer_ptr
00047b10 g       *ABS*	00000000 _end
00024734 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
0001c934 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0001bb74 g     F .text	000001f0 OSTimeDlyResume
00015f60 g     F .text	00000150 OSFlagNameSet
000023b4 g     F .text	000000a0 clearText
000173a8 g     F .text	000002a4 OSMboxPend
0001b350 g     F .text	000001c8 OSTaskStkChk
000226ca g     O .rwdata	00000002 OSMemSize
0000c588 g     F .text	0000007c __swrite
00022674 g     O .rwdata	00000004 __malloc_trim_threshold
0000a114 g     F .text	0000000c __locale_msgcharset
00024738 g     O .bss	00000004 OSTCBCur
0001f7b4 g     F .text	00000038 exit
000032d0 g     F .text	00000060 checkIDScore
0001d718 g     F .text	00000074 alt_up_irda_read_data
000226cc g     O .rwdata	00000002 OSMemTblSize
00009fb8 g     F .text	000000c4 _fwalk_reent
0001da54 g     F .text	000000c4 alt_up_ps2_init
0000b890 g     F .text	00000198 __mdiff
000102dc g     F .text	0000005c .hidden __modsi3
000427e8 g     O .bss	00002004 menu_stk2
00016fac g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000095e4 g     F .text	00000004 __sfp_lock_release
00013e80 g     F .text	00000054 OSInit
0001b72c g     F .text	0000012c OSTaskQuery
0001d228 g     F .text	00000074 alt_up_character_lcd_string
0001941c g     F .text	000000ac OS_QInit
000150dc g     F .text	00000054 OS_StrLen
0001d8ac g     F .text	00000040 alt_up_irda_open_dev
00017f10 g     F .text	00000118 OSMemNameSet
00000c44 g     F .text	00000224 gescoord
000226e6 g     O .rwdata	00000002 OSTaskProfileEn
00001544 g     F .text	00000154 tutorialUitleg
0002473c g     O .bss	00000004 OSTime
00024664 g     O .bss	00000004 Flags
00002454 g     F .text	00000058 tekenBox
0004616c g     O .bss	00000800 OSTaskIdleStk
0001fb10 g     F .text	0000003c _exit
000246a0 g     O .bss	00000004 ALT_inc_x
000178c8 g     F .text	0000015c OSMboxPostOpt
0001e654 g     F .text	00000140 alt_alarm_start
00015e30 g     F .text	00000130 OSFlagNameGet
0001bd64 g     F .text	00000064 OSTimeGet
0000a15c g     F .text	000001b8 __smakebuf_r
0001dc40 g     F .text	00000070 alt_up_ps2_wait_for_ack
00003518 g     F .text	00000098 strlen
0001f3a0 g     F .text	0000001c OSTaskSwHook
0001ee20 g     F .text	00000158 open
0004696c g     O .bss	00000b40 OSEventTbl
00011534 g     F .text	000000e0 .hidden __gedf2
000474ac g     O .bss	00000510 OSTCBTbl
00019ed4 g     F .text	000000fc OSSemSet
00022658 g     O .rwdata	00000004 eenkeer
00002374 g     F .text	00000040 clearScreen
00022678 g     O .rwdata	00000004 __wctomb
0000da0c g     F .text	00000018 __sprint_r
000246a4 g     O .bss	00000004 ALT_x2
0001e9ec g     F .text	00000030 alt_icache_flush_all
00001cd0 g     F .text	000000d0 Highscores
0001d2ec g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00022714 g     O .rwdata	00000004 alt_priority_mask
00019678 g     F .text	00000268 OSSemDel
00024740 g     O .bss	00000004 OSFlagFreeList
000226ac g     O .rwdata	00000002 OSEventNameSize
00017140 g     F .text	00000268 OSMboxDel
00007490 g     F .text	00000024 __vfprintf_internal
00024744 g     O .bss	00000001 OSStatRdy
00024668 g     O .bss	00000004 MailBox
000479bc g     O .bss	00000054 OSTCBPrioTbl
0000f670 g     F .text	0000005c _wctomb_r
00013308 g     F .text	000000c0 __env_lock
0001de7c g     F .text	0000008c alt_up_ps2_read_fd
000226f2 g     O .rwdata	00000002 OSTaskSwHookEn
00022640 g     O .rwdata	00000004 xLinks
00011e18 g     F .text	000008d0 .hidden __subdf3
0001d78c g     F .text	00000090 alt_up_irda_read_fd
0000b2b8 g     F .text	000000b0 __lo0bits
00022718 g     O .rwdata	00000008 alt_alarm_list
000226ba g     O .rwdata	00000002 OSFlagWidth
0001e8a4 g     F .text	0000005c _do_ctors
0001e094 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000f580 g     F .text	000000c0 wcrtomb
00012998 g     F .text	000000d0 close
000246f0 g     O .bss	00000004 alt_envsem
00024748 g     O .bss	00000004 OSIdleCtrRun
0002264c g     O .rwdata	00000004 xOnder
000144d8 g     F .text	00000020 OSVersion
00022704 g     O .rwdata	00000002 OSTmrCfgWheelSize
00012cec g     F .text	00000080 alt_load
0001b858 g     F .text	0000006c OS_TaskStkClr
000024ac g     F .text	00000088 tekenBox2
000226de g     O .rwdata	00000002 OSTaskCreateEn
000246b8 g     O .bss	00000004 menuSem
00014ab4 g     F .text	00000064 OS_EventWaitListInit
0000f1d0 g     F .text	0000005c fputwc
0001f42c g     F .text	0000001c OSTaskIdleHook
000246a8 g     O .bss	00000004 X
00000000  w      *UND*	00000000 free
000095e8 g     F .text	00000004 __sinit_lock_acquire
0000b02c g     F .text	00000120 __multadd
00000fe4 g     F .text	0000014c endSingleplayer
0001b518 g     F .text	00000214 OSTaskSuspend
0000b004 g     F .text	00000028 _Bfree
0002466c g     O .bss	00000004 counter2
00024670 g     O .bss	00000004 Flags_Tutorial
00015130 g     F .text	0000005c OS_TaskIdle
0002270a g     O .rwdata	00000002 OSTmrTblSize
000192c0 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0013ed40 	call	13ed4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800134 	movhi	r2,4
 140:	109e8404 	addi	r2,r2,31248
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800134 	movhi	r2,4
 158:	109e8404 	addi	r2,r2,31248
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0013f500 	call	13f50 <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a84a17 	ldw	r2,-24280(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a84a17 	ldw	r2,-24280(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d6a98c14 	ori	gp,gp,42544
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     258:	10919314 	ori	r2,r2,17996

    movhi r3, %hi(__bss_end)
     25c:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
     260:	18dec414 	ori	r3,r3,31504

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	0012cec0 	call	12cec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	0012e900 	call	12e90 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <controllers>:
}Balk;

alt_up_parallel_port_dev *gpio_dev; //	gpio device


void controllers(void* pdata) {
     280:	defff804 	addi	sp,sp,-32
     284:	dfc00715 	stw	ra,28(sp)
     288:	df000615 	stw	fp,24(sp)
     28c:	df000604 	addi	fp,sp,24
     290:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	int ID = (int*) pdata;
     294:	e0bfff17 	ldw	r2,-4(fp)
     298:	e0bffc15 	stw	r2,-16(fp)
	int hoogte = 50;
     29c:	00800c84 	movi	r2,50
     2a0:	e0bffb15 	stw	r2,-20(fp)

	Balk balkje;

	while (1) {
		OSFlagPend(Flags, C1_Flag + C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     2a4:	d0e80d17 	ldw	r3,-24524(gp)
     2a8:	e0bffd04 	addi	r2,fp,-12
     2ac:	d8800015 	stw	r2,0(sp)
     2b0:	1809883a 	mov	r4,r3
     2b4:	01400304 	movi	r5,12
     2b8:	01800044 	movi	r6,1
     2bc:	000f883a 	mov	r7,zero
     2c0:	00160b00 	call	160b0 <OSFlagPend>
		balkje.Hoogte = hoogte;
     2c4:	e0bffb17 	ldw	r2,-20(fp)
     2c8:	e0bffe15 	stw	r2,-8(fp)

		if (controller(ID) == 1) {
     2cc:	e13ffc17 	ldw	r4,-16(fp)
     2d0:	000039c0 	call	39c <controller>
     2d4:	10800058 	cmpnei	r2,r2,1
     2d8:	1000051e 	bne	r2,zero,2f0 <controllers+0x70>
			hoogte = moveDown(ID, hoogte);
     2dc:	e13ffc17 	ldw	r4,-16(fp)
     2e0:	e17ffb17 	ldw	r5,-20(fp)
     2e4:	00006880 	call	688 <moveDown>
     2e8:	e0bffb15 	stw	r2,-20(fp)
     2ec:	00000706 	br	30c <controllers+0x8c>
		} else if (controller(ID) == 0) {
     2f0:	e13ffc17 	ldw	r4,-16(fp)
     2f4:	000039c0 	call	39c <controller>
     2f8:	1000041e 	bne	r2,zero,30c <controllers+0x8c>
			hoogte = moveUp(ID, hoogte);
     2fc:	e13ffc17 	ldw	r4,-16(fp)
     300:	e17ffb17 	ldw	r5,-20(fp)
     304:	00005880 	call	588 <moveUp>
     308:	e0bffb15 	stw	r2,-20(fp)
		}

		if(ID == 1){
     30c:	e0bffc17 	ldw	r2,-16(fp)
     310:	10800058 	cmpnei	r2,r2,1
     314:	10000e1e 	bne	r2,zero,350 <controllers+0xd0>
			OSFlagPend(Flags, C1_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     318:	d0e80d17 	ldw	r3,-24524(gp)
     31c:	e0bffd04 	addi	r2,fp,-12
     320:	d8800015 	stw	r2,0(sp)
     324:	1809883a 	mov	r4,r3
     328:	01400104 	movi	r5,4
     32c:	01800044 	movi	r6,1
     330:	000f883a 	mov	r7,zero
     334:	00160b00 	call	160b0 <OSFlagPend>
			OSMboxPost(MailBox, (void*)&balkje);
     338:	d0e80e17 	ldw	r3,-24520(gp)
     33c:	e0bffe04 	addi	r2,fp,-8
     340:	1809883a 	mov	r4,r3
     344:	100b883a 	mov	r5,r2
     348:	00177b80 	call	177b8 <OSMboxPost>
     34c:	00001006 	br	390 <controllers+0x110>
		}else if(ID == 2){
     350:	e0bffc17 	ldw	r2,-16(fp)
     354:	10800098 	cmpnei	r2,r2,2
     358:	10000d1e 	bne	r2,zero,390 <controllers+0x110>
			OSFlagPend(Flags, C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     35c:	d0e80d17 	ldw	r3,-24524(gp)
     360:	e0bffd04 	addi	r2,fp,-12
     364:	d8800015 	stw	r2,0(sp)
     368:	1809883a 	mov	r4,r3
     36c:	01400204 	movi	r5,8
     370:	01800044 	movi	r6,1
     374:	000f883a 	mov	r7,zero
     378:	00160b00 	call	160b0 <OSFlagPend>
			OSMboxPost(MailBox2, (void*)&balkje);
     37c:	d0e80c17 	ldw	r3,-24528(gp)
     380:	e0bffe04 	addi	r2,fp,-8
     384:	1809883a 	mov	r4,r3
     388:	100b883a 	mov	r5,r2
     38c:	00177b80 	call	177b8 <OSMboxPost>
		}

		OSTimeDly(1);
     390:	01000044 	movi	r4,1
     394:	001b8c40 	call	1b8c4 <OSTimeDly>
	}
     398:	003fc206 	br	2a4 <__alt_mem_Flash_flash_data+0xf40002a4>

0000039c <controller>:

}

int controller(int ID) {
     39c:	defff804 	addi	sp,sp,-32
     3a0:	dfc00715 	stw	ra,28(sp)
     3a4:	df000615 	stw	fp,24(sp)
     3a8:	df000604 	addi	fp,sp,24
     3ac:	e13fff15 	stw	r4,-4(fp)
	alt_up_parallel_port_dev * KEY_ptr = alt_up_parallel_port_open_dev(
     3b0:	010000b4 	movhi	r4,2
     3b4:	213ed304 	addi	r4,r4,-1204
     3b8:	001d8ec0 	call	1d8ec <alt_up_parallel_port_open_dev>
     3bc:	e0bffa15 	stw	r2,-24(fp)
			"/dev/Pushbuttons");
	alt_up_parallel_port_dev * SW_switch_ptr = alt_up_parallel_port_open_dev(
     3c0:	010000b4 	movhi	r4,2
     3c4:	213ed804 	addi	r4,r4,-1184
     3c8:	001d8ec0 	call	1d8ec <alt_up_parallel_port_open_dev>
     3cc:	e0bffb15 	stw	r2,-20(fp)
			"/dev/Slider_Switches");
	gpio_dev = alt_up_parallel_port_open_dev("/dev/Expansion_JP5");		//	DE2-115 gpio
     3d0:	010000b4 	movhi	r4,2
     3d4:	213ede04 	addi	r4,r4,-1160
     3d8:	001d8ec0 	call	1d8ec <alt_up_parallel_port_open_dev>
     3dc:	d0a80815 	stw	r2,-24544(gp)
	alt_up_parallel_port_set_port_direction(gpio_dev, 0x00000001);		// 1-0-1-1	(1 = output; 0 = input)
     3e0:	d0a80817 	ldw	r2,-24544(gp)
     3e4:	10800a17 	ldw	r2,40(r2)
     3e8:	10800104 	addi	r2,r2,4
     3ec:	1007883a 	mov	r3,r2
     3f0:	00800044 	movi	r2,1
     3f4:	18800035 	stwio	r2,0(r3)

	int KEY_value, SW_value, gpio_values;
	INT8U err;

	SW_value = alt_up_parallel_port_read_data(SW_switch_ptr);
     3f8:	e0bffb17 	ldw	r2,-20(fp)
     3fc:	10800a17 	ldw	r2,40(r2)
     400:	10800037 	ldwio	r2,0(r2)
     404:	e0bffc15 	stw	r2,-16(fp)
	KEY_value = alt_up_parallel_port_read_data(KEY_ptr); // read the pushbutton KEY values
     408:	e0bffa17 	ldw	r2,-24(fp)
     40c:	10800a17 	ldw	r2,40(r2)
     410:	10800037 	ldwio	r2,0(r2)
     414:	e0bffd15 	stw	r2,-12(fp)
	gpio_values = alt_up_parallel_port_read_data(gpio_dev);
     418:	d0a80817 	ldw	r2,-24544(gp)
     41c:	10800a17 	ldw	r2,40(r2)
     420:	10800037 	ldwio	r2,0(r2)
     424:	e0bffe15 	stw	r2,-8(fp)

	//printf("gpio_value is: %d\n", gpio_values);

	if (ID == 2) {
     428:	e0bfff17 	ldw	r2,-4(fp)
     42c:	10800098 	cmpnei	r2,r2,2
     430:	1000131e 	bne	r2,zero,480 <controller+0xe4>
		if (KEY_value != 0) {
     434:	e0bffd17 	ldw	r2,-12(fp)
     438:	10000f26 	beq	r2,zero,478 <controller+0xdc>
			if (KEY_value == 8) {
     43c:	e0bffd17 	ldw	r2,-12(fp)
     440:	10800218 	cmpnei	r2,r2,8
     444:	1000021e 	bne	r2,zero,450 <controller+0xb4>
				return 1;
     448:	00800044 	movi	r2,1
     44c:	00003606 	br	528 <controller+0x18c>
			}
			if (KEY_value == 4) {
     450:	e0bffd17 	ldw	r2,-12(fp)
     454:	10800118 	cmpnei	r2,r2,4
     458:	1000021e 	bne	r2,zero,464 <controller+0xc8>
				return 0;
     45c:	0005883a 	mov	r2,zero
     460:	00003106 	br	528 <controller+0x18c>
			}
			if (KEY_value == 2) {
     464:	e0bffd17 	ldw	r2,-12(fp)
     468:	10800098 	cmpnei	r2,r2,2
     46c:	10002b1e 	bne	r2,zero,51c <controller+0x180>
				return 2;
     470:	00800084 	movi	r2,2
     474:	00002c06 	br	528 <controller+0x18c>
			}
		} else {
			return 3;
     478:	008000c4 	movi	r2,3
     47c:	00002a06 	br	528 <controller+0x18c>
		}

	} else if (ID == 1) {
     480:	e0bfff17 	ldw	r2,-4(fp)
     484:	10800058 	cmpnei	r2,r2,1
     488:	10000e1e 	bne	r2,zero,4c4 <controller+0x128>
		if (SW_value != 0) {
     48c:	e0bffc17 	ldw	r2,-16(fp)
     490:	10000a26 	beq	r2,zero,4bc <controller+0x120>
			if (SW_value == 131072) {
     494:	e0fffc17 	ldw	r3,-16(fp)
     498:	008000b4 	movhi	r2,2
     49c:	1880021e 	bne	r3,r2,4a8 <controller+0x10c>
				return 0;
     4a0:	0005883a 	mov	r2,zero
     4a4:	00002006 	br	528 <controller+0x18c>
			}else if(SW_value == 4){
     4a8:	e0bffc17 	ldw	r2,-16(fp)
     4ac:	10800118 	cmpnei	r2,r2,4
     4b0:	10001a1e 	bne	r2,zero,51c <controller+0x180>
				return 4;
     4b4:	00800104 	movi	r2,4
     4b8:	00001b06 	br	528 <controller+0x18c>
			}
		} else {
			return 1;
     4bc:	00800044 	movi	r2,1
     4c0:	00001906 	br	528 <controller+0x18c>
		}
	} else if(ID == 3){
     4c4:	e0bfff17 	ldw	r2,-4(fp)
     4c8:	108000d8 	cmpnei	r2,r2,3
     4cc:	1000131e 	bne	r2,zero,51c <controller+0x180>
		if(gpio_values != 0){
     4d0:	e0bffe17 	ldw	r2,-8(fp)
     4d4:	10000f26 	beq	r2,zero,514 <controller+0x178>
			if(gpio_values == -1){
     4d8:	e0bffe17 	ldw	r2,-8(fp)
     4dc:	10bfffd8 	cmpnei	r2,r2,-1
     4e0:	1000021e 	bne	r2,zero,4ec <controller+0x150>
				return 1;
     4e4:	00800044 	movi	r2,1
     4e8:	00000f06 	br	528 <controller+0x18c>
			} else if(gpio_values == -2){
     4ec:	e0bffe17 	ldw	r2,-8(fp)
     4f0:	10bfff98 	cmpnei	r2,r2,-2
     4f4:	1000021e 	bne	r2,zero,500 <controller+0x164>
				return 2;
     4f8:	00800084 	movi	r2,2
     4fc:	00000a06 	br	528 <controller+0x18c>
			} else if(gpio_values == -3){
     500:	e0bffe17 	ldw	r2,-8(fp)
     504:	10bfff58 	cmpnei	r2,r2,-3
     508:	1000041e 	bne	r2,zero,51c <controller+0x180>
				return 3;
     50c:	008000c4 	movi	r2,3
     510:	00000506 	br	528 <controller+0x18c>
			}
		}else{
			return 0;
     514:	0005883a 	mov	r2,zero
     518:	00000306 	br	528 <controller+0x18c>
		}
	}
	gpio_values &= 0x80000000;		//	negeer alle andere bits, die zijn waarschijnlijk HOOG !
     51c:	e0bffe17 	ldw	r2,-8(fp)
     520:	10a0002c 	andhi	r2,r2,32768
     524:	e0bffe15 	stw	r2,-8(fp)

}
     528:	e037883a 	mov	sp,fp
     52c:	dfc00117 	ldw	ra,4(sp)
     530:	df000017 	ldw	fp,0(sp)
     534:	dec00204 	addi	sp,sp,8
     538:	f800283a 	ret

0000053c <checkID>:

int checkID(int ID) {
     53c:	defffe04 	addi	sp,sp,-8
     540:	df000115 	stw	fp,4(sp)
     544:	df000104 	addi	fp,sp,4
     548:	e13fff15 	stw	r4,-4(fp)
	if (ID == 1) {
     54c:	e0bfff17 	ldw	r2,-4(fp)
     550:	10800058 	cmpnei	r2,r2,1
     554:	1000021e 	bne	r2,zero,560 <checkID+0x24>
		return 15;
     558:	008003c4 	movi	r2,15
     55c:	00000606 	br	578 <checkID+0x3c>
	} else if (ID == 2) {
     560:	e0bfff17 	ldw	r2,-4(fp)
     564:	10800098 	cmpnei	r2,r2,2
     568:	1000021e 	bne	r2,zero,574 <checkID+0x38>
		return 300;
     56c:	00804b04 	movi	r2,300
     570:	00000106 	br	578 <checkID+0x3c>

	}
	return 0;
     574:	0005883a 	mov	r2,zero
}
     578:	e037883a 	mov	sp,fp
     57c:	df000017 	ldw	fp,0(sp)
     580:	dec00104 	addi	sp,sp,4
     584:	f800283a 	ret

00000588 <moveUp>:

int moveUp(int ID, int current) {
     588:	defff904 	addi	sp,sp,-28
     58c:	dfc00615 	stw	ra,24(sp)
     590:	df000515 	stw	fp,20(sp)
     594:	df000504 	addi	fp,sp,20
     598:	e13ffe15 	stw	r4,-8(fp)
     59c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     5a0:	e0bfff17 	ldw	r2,-4(fp)
     5a4:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     5a8:	e13ffe17 	ldw	r4,-8(fp)
     5ac:	000053c0 	call	53c <checkID>
     5b0:	e0bffd15 	stw	r2,-12(fp)

	if (boven >= 4 && boven <= 184) {
     5b4:	e0bffc17 	ldw	r2,-16(fp)
     5b8:	10800110 	cmplti	r2,r2,4
     5bc:	10001c1e 	bne	r2,zero,630 <moveUp+0xa8>
     5c0:	e0bffc17 	ldw	r2,-16(fp)
     5c4:	10802e48 	cmpgei	r2,r2,185
     5c8:	1000191e 	bne	r2,zero,630 <moveUp+0xa8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
     5cc:	e0bffd17 	ldw	r2,-12(fp)
     5d0:	11800144 	addi	r6,r2,5
     5d4:	e0bffc17 	ldw	r2,-16(fp)
     5d8:	10c00044 	addi	r3,r2,1
     5dc:	00803fc4 	movi	r2,255
     5e0:	d8800015 	stw	r2,0(sp)
     5e4:	e13ffd17 	ldw	r4,-12(fp)
     5e8:	e17ffc17 	ldw	r5,-16(fp)
     5ec:	180f883a 	mov	r7,r3
     5f0:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
     5f4:	e0bffc17 	ldw	r2,-16(fp)
     5f8:	11400c84 	addi	r5,r2,50
     5fc:	e0bffd17 	ldw	r2,-12(fp)
     600:	10c00144 	addi	r3,r2,5
     604:	e0bffc17 	ldw	r2,-16(fp)
     608:	10800cc4 	addi	r2,r2,51
     60c:	d8000015 	stw	zero,0(sp)
     610:	e13ffd17 	ldw	r4,-12(fp)
     614:	180d883a 	mov	r6,r3
     618:	100f883a 	mov	r7,r2
     61c:	00029c80 	call	29c8 <VGA_box>
		boven--;
     620:	e0bffc17 	ldw	r2,-16(fp)
     624:	10bfffc4 	addi	r2,r2,-1
     628:	e0bffc15 	stw	r2,-16(fp)
int moveUp(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven >= 4 && boven <= 184) {
     62c:	00001006 	br	670 <moveUp+0xe8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
		boven--;
	} else if (boven > 184) {
     630:	e0bffc17 	ldw	r2,-16(fp)
     634:	10802e50 	cmplti	r2,r2,185
     638:	10000d1e 	bne	r2,zero,670 <moveUp+0xe8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
     63c:	e0bffd17 	ldw	r2,-12(fp)
     640:	11800144 	addi	r6,r2,5
     644:	e0bffc17 	ldw	r2,-16(fp)
     648:	10c00044 	addi	r3,r2,1
     64c:	00803fc4 	movi	r2,255
     650:	d8800015 	stw	r2,0(sp)
     654:	e13ffd17 	ldw	r4,-12(fp)
     658:	e17ffc17 	ldw	r5,-16(fp)
     65c:	180f883a 	mov	r7,r3
     660:	00029c80 	call	29c8 <VGA_box>
		boven--;
     664:	e0bffc17 	ldw	r2,-16(fp)
     668:	10bfffc4 	addi	r2,r2,-1
     66c:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     670:	e0bffc17 	ldw	r2,-16(fp)

}
     674:	e037883a 	mov	sp,fp
     678:	dfc00117 	ldw	ra,4(sp)
     67c:	df000017 	ldw	fp,0(sp)
     680:	dec00204 	addi	sp,sp,8
     684:	f800283a 	ret

00000688 <moveDown>:
int moveDown(int ID, int current) {
     688:	defff904 	addi	sp,sp,-28
     68c:	dfc00615 	stw	ra,24(sp)
     690:	df000515 	stw	fp,20(sp)
     694:	df000504 	addi	fp,sp,20
     698:	e13ffe15 	stw	r4,-8(fp)
     69c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     6a0:	e0bfff17 	ldw	r2,-4(fp)
     6a4:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     6a8:	e13ffe17 	ldw	r4,-8(fp)
     6ac:	000053c0 	call	53c <checkID>
     6b0:	e0bffd15 	stw	r2,-12(fp)

	if (boven <= 184 && boven >= 4) {
     6b4:	e0bffc17 	ldw	r2,-16(fp)
     6b8:	10802e48 	cmpgei	r2,r2,185
     6bc:	10001c1e 	bne	r2,zero,730 <moveDown+0xa8>
     6c0:	e0bffc17 	ldw	r2,-16(fp)
     6c4:	10800110 	cmplti	r2,r2,4
     6c8:	1000191e 	bne	r2,zero,730 <moveDown+0xa8>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
     6cc:	e0bffc17 	ldw	r2,-16(fp)
     6d0:	11400c84 	addi	r5,r2,50
     6d4:	e0bffd17 	ldw	r2,-12(fp)
     6d8:	11800144 	addi	r6,r2,5
     6dc:	e0bffc17 	ldw	r2,-16(fp)
     6e0:	10c00cc4 	addi	r3,r2,51
     6e4:	00803fc4 	movi	r2,255
     6e8:	d8800015 	stw	r2,0(sp)
     6ec:	e13ffd17 	ldw	r4,-12(fp)
     6f0:	180f883a 	mov	r7,r3
     6f4:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, boven, X + 5, boven + 1, 0);
     6f8:	e0bffd17 	ldw	r2,-12(fp)
     6fc:	10c00144 	addi	r3,r2,5
     700:	e0bffc17 	ldw	r2,-16(fp)
     704:	10800044 	addi	r2,r2,1
     708:	d8000015 	stw	zero,0(sp)
     70c:	e13ffd17 	ldw	r4,-12(fp)
     710:	e17ffc17 	ldw	r5,-16(fp)
     714:	180d883a 	mov	r6,r3
     718:	100f883a 	mov	r7,r2
     71c:	00029c80 	call	29c8 <VGA_box>
		boven++;
     720:	e0bffc17 	ldw	r2,-16(fp)
     724:	10800044 	addi	r2,r2,1
     728:	e0bffc15 	stw	r2,-16(fp)
int moveDown(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven <= 184 && boven >= 4) {
     72c:	00001106 	br	774 <moveDown+0xec>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
		VGA_box(X, boven, X + 5, boven + 1, 0);
		boven++;
	} else if (boven < 4) {
     730:	e0bffc17 	ldw	r2,-16(fp)
     734:	10800108 	cmpgei	r2,r2,4
     738:	10000e1e 	bne	r2,zero,774 <moveDown+0xec>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
     73c:	e0bffc17 	ldw	r2,-16(fp)
     740:	11400c84 	addi	r5,r2,50
     744:	e0bffd17 	ldw	r2,-12(fp)
     748:	11800144 	addi	r6,r2,5
     74c:	e0bffc17 	ldw	r2,-16(fp)
     750:	10c00cc4 	addi	r3,r2,51
     754:	00803fc4 	movi	r2,255
     758:	d8800015 	stw	r2,0(sp)
     75c:	e13ffd17 	ldw	r4,-12(fp)
     760:	180f883a 	mov	r7,r3
     764:	00029c80 	call	29c8 <VGA_box>
		boven++;
     768:	e0bffc17 	ldw	r2,-16(fp)
     76c:	10800044 	addi	r2,r2,1
     770:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     774:	e0bffc17 	ldw	r2,-16(fp)

}
     778:	e037883a 	mov	sp,fp
     77c:	dfc00117 	ldw	ra,4(sp)
     780:	df000017 	ldw	fp,0(sp)
     784:	dec00204 	addi	sp,sp,8
     788:	f800283a 	ret

0000078c <Game>:

typedef struct balk {
	int Hoogte;
} Balk;

void Game(void* pdata) {
     78c:	defff604 	addi	sp,sp,-40
     790:	dfc00915 	stw	ra,36(sp)
     794:	df000815 	stw	fp,32(sp)
     798:	df000804 	addi	fp,sp,32
     79c:	e13ffd15 	stw	r4,-12(fp)


	ALT_x1 = 0;
     7a0:	d0281b15 	stw	zero,-24468(gp)
	ALT_x2 = 165;
     7a4:	00802944 	movi	r2,165
     7a8:	d0a81d15 	stw	r2,-24460(gp)
	ALT_y = 100;
     7ac:	00801904 	movi	r2,100
     7b0:	d0a81815 	stw	r2,-24480(gp)
	ALT_inc_x = 1;
     7b4:	00800044 	movi	r2,1
     7b8:	d0a81c15 	stw	r2,-24464(gp)
	ALT_inc_y = 1;
     7bc:	00800044 	movi	r2,1
     7c0:	d0a81915 	stw	r2,-24476(gp)

	pixel_buffer_x = 319;
     7c4:	00804fc4 	movi	r2,319
     7c8:	d0a81515 	stw	r2,-24492(gp)
	pixel_buffer_y = 230;
     7cc:	00803984 	movi	r2,230
     7d0:	d0a81315 	stw	r2,-24500(gp)
	int ID;
	int count;
	Balk * balkje;
	Balk * balkje2;
	
	VGA_box (316, 5, 319, 235, zwart); 					// singleplayer balk weghalen voor de zekerheid
     7d4:	d8000015 	stw	zero,0(sp)
     7d8:	01004f04 	movi	r4,316
     7dc:	01400144 	movi	r5,5
     7e0:	01804fc4 	movi	r6,319
     7e4:	01c03ac4 	movi	r7,235
     7e8:	00029c80 	call	29c8 <VGA_box>
	//char_buffer_x = 79; char_buffer_y = 59;

	//blue_x1 = 28; blue_x2 = 52; blue_y1 = 26; blue_y2 = 34;

	while (1) {
		OSFlagPend(Flags_Games, Game_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     7ec:	d0e80b17 	ldw	r3,-24532(gp)
     7f0:	e0bffc04 	addi	r2,fp,-16
     7f4:	d8800015 	stw	r2,0(sp)
     7f8:	1809883a 	mov	r4,r3
     7fc:	01400084 	movi	r5,2
     800:	01800044 	movi	r6,1
     804:	000f883a 	mov	r7,zero
     808:	00160b00 	call	160b0 <OSFlagPend>

		//printf("Game flag is set\n");

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
     80c:	d0e80e17 	ldw	r3,-24520(gp)
     810:	e0bffc04 	addi	r2,fp,-16
     814:	1809883a 	mov	r4,r3
     818:	000b883a 	mov	r5,zero
     81c:	100d883a 	mov	r6,r2
     820:	00173a80 	call	173a8 <OSMboxPend>
     824:	e0bffa15 	stw	r2,-24(fp)
		balkje2 = (Balk*) OSMboxPend(MailBox2, 0, &err);
     828:	d0e80c17 	ldw	r3,-24528(gp)
     82c:	e0bffc04 	addi	r2,fp,-16
     830:	1809883a 	mov	r4,r3
     834:	000b883a 	mov	r5,zero
     838:	100d883a 	mov	r6,r2
     83c:	00173a80 	call	173a8 <OSMboxPend>
     840:	e0bffb15 	stw	r2,-20(fp)



		for (i = 0; i <= 9; i++) {
     844:	e03ff915 	stw	zero,-28(fp)
     848:	00001706 	br	8a8 <Game+0x11c>

			if (score1 == i) {
     84c:	d0e81417 	ldw	r3,-24496(gp)
     850:	e0bff917 	ldw	r2,-28(fp)
     854:	1880031e 	bne	r3,r2,864 <Game+0xd8>
				draw_number(i, 1);
     858:	e13ff917 	ldw	r4,-28(fp)
     85c:	01400044 	movi	r5,1
     860:	0002c5c0 	call	2c5c <draw_number>
			}
			if (score2 == i) {
     864:	d0e81717 	ldw	r3,-24484(gp)
     868:	e0bff917 	ldw	r2,-28(fp)
     86c:	1880031e 	bne	r3,r2,87c <Game+0xf0>
				draw_number(i, 3);
     870:	e13ff917 	ldw	r4,-28(fp)
     874:	014000c4 	movi	r5,3
     878:	0002c5c0 	call	2c5c <draw_number>
			}
			if(score1 == 9 || score2 == 9){
     87c:	d0a81417 	ldw	r2,-24496(gp)
     880:	10800260 	cmpeqi	r2,r2,9
     884:	1000031e 	bne	r2,zero,894 <Game+0x108>
     888:	d0a81717 	ldw	r2,-24484(gp)
     88c:	10800258 	cmpnei	r2,r2,9
     890:	1000021e 	bne	r2,zero,89c <Game+0x110>
				score1 =0;
     894:	d0281415 	stw	zero,-24496(gp)
				score2 =0;
     898:	d0281715 	stw	zero,-24484(gp)
		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
		balkje2 = (Balk*) OSMboxPend(MailBox2, 0, &err);



		for (i = 0; i <= 9; i++) {
     89c:	e0bff917 	ldw	r2,-28(fp)
     8a0:	10800044 	addi	r2,r2,1
     8a4:	e0bff915 	stw	r2,-28(fp)
     8a8:	e0bff917 	ldw	r2,-28(fp)
     8ac:	10800290 	cmplti	r2,r2,10
     8b0:	103fe61e 	bne	r2,zero,84c <__alt_mem_Flash_flash_data+0xf400084c>
				score1 =0;
				score2 =0;

			}
		}
		draw_middenlijn();
     8b4:	0002b0c0 	call	2b0c <draw_middenlijn>
		if (check == 1) {
     8b8:	d0a00117 	ldw	r2,-32764(gp)
     8bc:	10800058 	cmpnei	r2,r2,1
     8c0:	1000231e 	bne	r2,zero,950 <Game+0x1c4>
			del_middenlijn();
     8c4:	0002b740 	call	2b74 <del_middenlijn>

			VGA_box(300, balkje2->Hoogte, 305, balkje2->Hoogte + 50, blauw);
     8c8:	e0bffb17 	ldw	r2,-20(fp)
     8cc:	11400017 	ldw	r5,0(r2)
     8d0:	e0bffb17 	ldw	r2,-20(fp)
     8d4:	10800017 	ldw	r2,0(r2)
     8d8:	10c00c84 	addi	r3,r2,50
     8dc:	00803fc4 	movi	r2,255
     8e0:	d8800015 	stw	r2,0(sp)
     8e4:	01004b04 	movi	r4,300
     8e8:	01804c44 	movi	r6,305
     8ec:	180f883a 	mov	r7,r3
     8f0:	00029c80 	call	29c8 <VGA_box>

			VGA_text(20, 20, "Houdt de knop ingedrukt om te spelen");
     8f4:	01000504 	movi	r4,20
     8f8:	01400504 	movi	r5,20
     8fc:	018000b4 	movhi	r6,2
     900:	31bee304 	addi	r6,r6,-1140
     904:	0002a7c0 	call	2a7c <VGA_text>
			OSTimeDlyHMSM(0, 1, 0, 0);
     908:	0009883a 	mov	r4,zero
     90c:	01400044 	movi	r5,1
     910:	000d883a 	mov	r6,zero
     914:	000f883a 	mov	r7,zero
     918:	001ba0c0 	call	1ba0c <OSTimeDlyHMSM>
			VGA_text(20, 20, "                                    ");
     91c:	01000504 	movi	r4,20
     920:	01400504 	movi	r5,20
     924:	018000b4 	movhi	r6,2
     928:	31beed04 	addi	r6,r6,-1100
     92c:	0002a7c0 	call	2a7c <VGA_text>



			del_number(1);
     930:	01000044 	movi	r4,1
     934:	0002bb00 	call	2bb0 <del_number>
			del_number(2);
     938:	01000084 	movi	r4,2
     93c:	0002bb00 	call	2bb0 <del_number>

			score1 = 0;
     940:	d0281415 	stw	zero,-24496(gp)
			score2 = 0;
     944:	d0281715 	stw	zero,-24484(gp)

			i = 0;
     948:	e03ff915 	stw	zero,-28(fp)

			check = 0;
     94c:	d0200115 	stw	zero,-32764(gp)
		}

		if (controller(3) == 1) {
     950:	010000c4 	movi	r4,3
     954:	000039c0 	call	39c <controller>
     958:	10800058 	cmpnei	r2,r2,1
     95c:	1000a41e 	bne	r2,zero,bf0 <Game+0x464>

			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     960:	d1281b17 	ldw	r4,-24468(gp)
     964:	d1681817 	ldw	r5,-24480(gp)
     968:	d0a81b17 	ldw	r2,-24468(gp)
     96c:	10c00144 	addi	r3,r2,5
     970:	d0a81817 	ldw	r2,-24480(gp)
     974:	10800144 	addi	r2,r2,5
     978:	d8000015 	stw	zero,0(sp)
     97c:	180d883a 	mov	r6,r3
     980:	100f883a 	mov	r7,r2
     984:	00029c80 	call	29c8 <VGA_box>
			if (first == 1) {
     988:	d0a00017 	ldw	r2,-32768(gp)
     98c:	10800058 	cmpnei	r2,r2,1
     990:	10000f1e 	bne	r2,zero,9d0 <Game+0x244>
				ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
     994:	d0a81b17 	ldw	r2,-24468(gp)
     998:	10c02804 	addi	r3,r2,160
     99c:	d0a81c17 	ldw	r2,-24464(gp)
     9a0:	1885883a 	add	r2,r3,r2
     9a4:	d0a81b15 	stw	r2,-24468(gp)
				ALT_x2 += ALT_inc_x;
     9a8:	d0e81d17 	ldw	r3,-24460(gp)
     9ac:	d0a81c17 	ldw	r2,-24464(gp)
     9b0:	1885883a 	add	r2,r3,r2
     9b4:	d0a81d15 	stw	r2,-24460(gp)
				ALT_y += ALT_inc_y;
     9b8:	d0e81817 	ldw	r3,-24480(gp)
     9bc:	d0a81917 	ldw	r2,-24476(gp)
     9c0:	1885883a 	add	r2,r3,r2
     9c4:	d0a81815 	stw	r2,-24480(gp)
				first = 0;
     9c8:	d0200015 	stw	zero,-32768(gp)
     9cc:	00000c06 	br	a00 <Game+0x274>
			} else {
				ALT_x1 += ALT_inc_x;
     9d0:	d0e81b17 	ldw	r3,-24468(gp)
     9d4:	d0a81c17 	ldw	r2,-24464(gp)
     9d8:	1885883a 	add	r2,r3,r2
     9dc:	d0a81b15 	stw	r2,-24468(gp)
				ALT_x2 += ALT_inc_x;
     9e0:	d0e81d17 	ldw	r3,-24460(gp)
     9e4:	d0a81c17 	ldw	r2,-24464(gp)
     9e8:	1885883a 	add	r2,r3,r2
     9ec:	d0a81d15 	stw	r2,-24460(gp)
				ALT_y += ALT_inc_y;
     9f0:	d0e81817 	ldw	r3,-24480(gp)
     9f4:	d0a81917 	ldw	r2,-24476(gp)
     9f8:	1885883a 	add	r2,r3,r2
     9fc:	d0a81815 	stw	r2,-24480(gp)
			}
			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
     a00:	d1281b17 	ldw	r4,-24468(gp)
     a04:	d1681817 	ldw	r5,-24480(gp)
     a08:	d0a81b17 	ldw	r2,-24468(gp)
     a0c:	11800144 	addi	r6,r2,5
     a10:	d0a81817 	ldw	r2,-24480(gp)
     a14:	10c00144 	addi	r3,r2,5
     a18:	00804034 	movhi	r2,256
     a1c:	10bfffc4 	addi	r2,r2,-1
     a20:	d8800015 	stw	r2,0(sp)
     a24:	180f883a 	mov	r7,r3
     a28:	00029c80 	call	29c8 <VGA_box>

			//collision rand boven en onder
			if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
     a2c:	d0e81817 	ldw	r3,-24480(gp)
     a30:	d0a81317 	ldw	r2,-24500(gp)
     a34:	18800326 	beq	r3,r2,a44 <Game+0x2b8>
     a38:	d0a81817 	ldw	r2,-24480(gp)
     a3c:	10800118 	cmpnei	r2,r2,4
     a40:	1000031e 	bne	r2,zero,a50 <Game+0x2c4>
				ALT_inc_y = -(ALT_inc_y);
     a44:	d0a81917 	ldw	r2,-24476(gp)
     a48:	0085c83a 	sub	r2,zero,r2
     a4c:	d0a81915 	stw	r2,-24476(gp)
			if ((ALT_x2 == pixel_buffer_x) || (ALT_x1 == 0)) {
				//ALT_inc_x = -(ALT_inc_x);
			}

			//links dood
			if (ALT_x1 == 0) {
     a50:	d0a81b17 	ldw	r2,-24468(gp)
     a54:	1000071e 	bne	r2,zero,a74 <Game+0x2e8>
				score2++;
     a58:	d0a81717 	ldw	r2,-24484(gp)
     a5c:	10800044 	addi	r2,r2,1
     a60:	d0a81715 	stw	r2,-24484(gp)
				gescoord(2);
     a64:	01000084 	movi	r4,2
     a68:	0000c440 	call	c44 <gescoord>
				del_number(2);
     a6c:	01000084 	movi	r4,2
     a70:	0002bb00 	call	2bb0 <del_number>
			}

			//rechts dood
			if (ALT_x2 == pixel_buffer_x) {
     a74:	d0e81d17 	ldw	r3,-24460(gp)
     a78:	d0a81517 	ldw	r2,-24492(gp)
     a7c:	1880071e 	bne	r3,r2,a9c <Game+0x310>
				score1++;
     a80:	d0a81417 	ldw	r2,-24496(gp)
     a84:	10800044 	addi	r2,r2,1
     a88:	d0a81415 	stw	r2,-24496(gp)
				gescoord(1);
     a8c:	01000044 	movi	r4,1
     a90:	0000c440 	call	c44 <gescoord>
				del_number(1);
     a94:	01000044 	movi	r4,1
     a98:	0002bb00 	call	2bb0 <del_number>
			}

			//collision linker balkje
			//lange zijde
			if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte - 6 && ALT_y < balkje->Hoogte + 50)){
     a9c:	d0a81b17 	ldw	r2,-24468(gp)
     aa0:	10800558 	cmpnei	r2,r2,21
     aa4:	10000d1e 	bne	r2,zero,adc <Game+0x350>
     aa8:	e0bffa17 	ldw	r2,-24(fp)
     aac:	10800017 	ldw	r2,0(r2)
     ab0:	10fffe84 	addi	r3,r2,-6
     ab4:	d0a81817 	ldw	r2,-24480(gp)
     ab8:	1880080e 	bge	r3,r2,adc <Game+0x350>
     abc:	e0bffa17 	ldw	r2,-24(fp)
     ac0:	10800017 	ldw	r2,0(r2)
     ac4:	10800c84 	addi	r2,r2,50
     ac8:	d0e81817 	ldw	r3,-24480(gp)
     acc:	1880030e 	bge	r3,r2,adc <Game+0x350>
				ALT_inc_x = -(ALT_inc_x);
     ad0:	d0a81c17 	ldw	r2,-24464(gp)
     ad4:	0085c83a 	sub	r2,zero,r2
     ad8:	d0a81c15 	stw	r2,-24464(gp)
			}
			//boven
			if(((ALT_x1 <= 20 && ALT_x1 >= 15) && ALT_y == balkje->Hoogte - 6) || ((ALT_x1 <= 20 && ALT_x1 >= 15) && ALT_y == balkje->Hoogte + 50)){
     adc:	d0a81b17 	ldw	r2,-24468(gp)
     ae0:	10800548 	cmpgei	r2,r2,21
     ae4:	1000081e 	bne	r2,zero,b08 <Game+0x37c>
     ae8:	d0a81b17 	ldw	r2,-24468(gp)
     aec:	108003d0 	cmplti	r2,r2,15
     af0:	1000051e 	bne	r2,zero,b08 <Game+0x37c>
     af4:	e0bffa17 	ldw	r2,-24(fp)
     af8:	10800017 	ldw	r2,0(r2)
     afc:	10fffe84 	addi	r3,r2,-6
     b00:	d0a81817 	ldw	r2,-24480(gp)
     b04:	18800b26 	beq	r3,r2,b34 <Game+0x3a8>
     b08:	d0a81b17 	ldw	r2,-24468(gp)
     b0c:	10800548 	cmpgei	r2,r2,21
     b10:	10000b1e 	bne	r2,zero,b40 <Game+0x3b4>
     b14:	d0a81b17 	ldw	r2,-24468(gp)
     b18:	108003d0 	cmplti	r2,r2,15
     b1c:	1000081e 	bne	r2,zero,b40 <Game+0x3b4>
     b20:	e0bffa17 	ldw	r2,-24(fp)
     b24:	10800017 	ldw	r2,0(r2)
     b28:	10c00c84 	addi	r3,r2,50
     b2c:	d0a81817 	ldw	r2,-24480(gp)
     b30:	1880031e 	bne	r3,r2,b40 <Game+0x3b4>
				ALT_inc_y = -(ALT_inc_y);
     b34:	d0a81917 	ldw	r2,-24476(gp)
     b38:	0085c83a 	sub	r2,zero,r2
     b3c:	d0a81915 	stw	r2,-24476(gp)
			}

			//collision rechter balkje
			//lange zijde
			if(ALT_x2 == 299 && (ALT_y > balkje2->Hoogte - 6 && ALT_y < balkje2->Hoogte + 50)){
     b40:	d0a81d17 	ldw	r2,-24460(gp)
     b44:	10804ad8 	cmpnei	r2,r2,299
     b48:	10000d1e 	bne	r2,zero,b80 <Game+0x3f4>
     b4c:	e0bffb17 	ldw	r2,-20(fp)
     b50:	10800017 	ldw	r2,0(r2)
     b54:	10fffe84 	addi	r3,r2,-6
     b58:	d0a81817 	ldw	r2,-24480(gp)
     b5c:	1880080e 	bge	r3,r2,b80 <Game+0x3f4>
     b60:	e0bffb17 	ldw	r2,-20(fp)
     b64:	10800017 	ldw	r2,0(r2)
     b68:	10800c84 	addi	r2,r2,50
     b6c:	d0e81817 	ldw	r3,-24480(gp)
     b70:	1880030e 	bge	r3,r2,b80 <Game+0x3f4>
				ALT_inc_x = -(ALT_inc_x);
     b74:	d0a81c17 	ldw	r2,-24464(gp)
     b78:	0085c83a 	sub	r2,zero,r2
     b7c:	d0a81c15 	stw	r2,-24464(gp)
			}
			//boven
			if(((ALT_x2 <= 305 && ALT_x2 >= 300) && ALT_y == balkje2->Hoogte - 6) || ((ALT_x2 <= 305 && ALT_x2 >= 300) && ALT_y == balkje2->Hoogte + 50)){
     b80:	d0a81d17 	ldw	r2,-24460(gp)
     b84:	10804c88 	cmpgei	r2,r2,306
     b88:	1000081e 	bne	r2,zero,bac <Game+0x420>
     b8c:	d0a81d17 	ldw	r2,-24460(gp)
     b90:	10804b10 	cmplti	r2,r2,300
     b94:	1000051e 	bne	r2,zero,bac <Game+0x420>
     b98:	e0bffb17 	ldw	r2,-20(fp)
     b9c:	10800017 	ldw	r2,0(r2)
     ba0:	10fffe84 	addi	r3,r2,-6
     ba4:	d0a81817 	ldw	r2,-24480(gp)
     ba8:	18800b26 	beq	r3,r2,bd8 <Game+0x44c>
     bac:	d0a81d17 	ldw	r2,-24460(gp)
     bb0:	10804c88 	cmpgei	r2,r2,306
     bb4:	10000b1e 	bne	r2,zero,be4 <Game+0x458>
     bb8:	d0a81d17 	ldw	r2,-24460(gp)
     bbc:	10804b10 	cmplti	r2,r2,300
     bc0:	1000081e 	bne	r2,zero,be4 <Game+0x458>
     bc4:	e0bffb17 	ldw	r2,-20(fp)
     bc8:	10800017 	ldw	r2,0(r2)
     bcc:	10c00c84 	addi	r3,r2,50
     bd0:	d0a81817 	ldw	r2,-24480(gp)
     bd4:	1880031e 	bne	r3,r2,be4 <Game+0x458>
				ALT_inc_y = -(ALT_inc_y);
     bd8:	d0a81917 	ldw	r2,-24476(gp)
     bdc:	0085c83a 	sub	r2,zero,r2
     be0:	d0a81915 	stw	r2,-24476(gp)
			}



			OSTimeDly(1);
     be4:	01000044 	movi	r4,1
     be8:	001b8c40 	call	1b8c4 <OSTimeDly>
     bec:	00001406 	br	c40 <Game+0x4b4>

		} else if (controller(3) == 2) {
     bf0:	010000c4 	movi	r4,3
     bf4:	000039c0 	call	39c <controller>
     bf8:	10800098 	cmpnei	r2,r2,2
     bfc:	1000031e 	bne	r2,zero,c0c <Game+0x480>
			//links
			endGame(2);
     c00:	01000084 	movi	r4,2
     c04:	0000e680 	call	e68 <endGame>
     c08:	00000d06 	br	c40 <Game+0x4b4>
		}else if(controller(3) == 3){
     c0c:	010000c4 	movi	r4,3
     c10:	000039c0 	call	39c <controller>
     c14:	108000d8 	cmpnei	r2,r2,3
     c18:	1000031e 	bne	r2,zero,c28 <Game+0x49c>
			//rechts
			endGame(1);
     c1c:	01000044 	movi	r4,1
     c20:	0000e680 	call	e68 <endGame>
     c24:	00000606 	br	c40 <Game+0x4b4>
		} else if(controller(2) != 2){
     c28:	01000084 	movi	r4,2
     c2c:	000039c0 	call	39c <controller>
     c30:	108000a0 	cmpeqi	r2,r2,2
     c34:	1000021e 	bne	r2,zero,c40 <Game+0x4b4>
			endGame(1);
     c38:	01000044 	movi	r4,1
     c3c:	0000e680 	call	e68 <endGame>
		}

	}
     c40:	003eea06 	br	7ec <__alt_mem_Flash_flash_data+0xf40007ec>

00000c44 <gescoord>:
}

void gescoord(int ID){
     c44:	defffc04 	addi	sp,sp,-16
     c48:	dfc00315 	stw	ra,12(sp)
     c4c:	df000215 	stw	fp,8(sp)
     c50:	df000204 	addi	fp,sp,8
     c54:	e13fff15 	stw	r4,-4(fp)

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     c58:	d1281b17 	ldw	r4,-24468(gp)
     c5c:	d1681817 	ldw	r5,-24480(gp)
     c60:	d0a81b17 	ldw	r2,-24468(gp)
     c64:	10c00144 	addi	r3,r2,5
     c68:	d0a81817 	ldw	r2,-24480(gp)
     c6c:	10800144 	addi	r2,r2,5
     c70:	d8000015 	stw	zero,0(sp)
     c74:	180d883a 	mov	r6,r3
     c78:	100f883a 	mov	r7,r2
     c7c:	00029c80 	call	29c8 <VGA_box>

	first = 1;
     c80:	00800044 	movi	r2,1
     c84:	d0a00015 	stw	r2,-32768(gp)

	if(ID == 1){
     c88:	e0bfff17 	ldw	r2,-4(fp)
     c8c:	10800058 	cmpnei	r2,r2,1
     c90:	1000221e 	bne	r2,zero,d1c <gescoord+0xd8>
		VGA_text(30, 25, "Speler 1 heeft gescoord!");
     c94:	01000784 	movi	r4,30
     c98:	01400644 	movi	r5,25
     c9c:	018000b4 	movhi	r6,2
     ca0:	31bef704 	addi	r6,r6,-1060
     ca4:	0002a7c0 	call	2a7c <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     ca8:	0009883a 	mov	r4,zero
     cac:	000b883a 	mov	r5,zero
     cb0:	018008c4 	movi	r6,35
     cb4:	000f883a 	mov	r7,zero
     cb8:	001ba0c0 	call	1ba0c <OSTimeDlyHMSM>
		VGA_text(30, 25, "                        ");
     cbc:	01000784 	movi	r4,30
     cc0:	01400644 	movi	r5,25
     cc4:	018000b4 	movhi	r6,2
     cc8:	31befe04 	addi	r6,r6,-1032
     ccc:	0002a7c0 	call	2a7c <VGA_text>
		ALT_x1 = 0;
     cd0:	d0281b15 	stw	zero,-24468(gp)
		ALT_x2 = 165;
     cd4:	00802944 	movi	r2,165
     cd8:	d0a81d15 	stw	r2,-24460(gp)
		ALT_y = 100;
     cdc:	00801904 	movi	r2,100
     ce0:	d0a81815 	stw	r2,-24480(gp)
		ALT_inc_x = -1;
     ce4:	00bfffc4 	movi	r2,-1
     ce8:	d0a81c15 	stw	r2,-24464(gp)
		if(random == 1){
     cec:	d0a81217 	ldw	r2,-24504(gp)
     cf0:	10800058 	cmpnei	r2,r2,1
     cf4:	1000031e 	bne	r2,zero,d04 <gescoord+0xc0>
			ALT_inc_y = -1;
     cf8:	00bfffc4 	movi	r2,-1
     cfc:	d0a81915 	stw	r2,-24476(gp)
     d00:	00000506 	br	d18 <gescoord+0xd4>
			random == 0;
		}else if(random == 0){
     d04:	d0a81217 	ldw	r2,-24504(gp)
     d08:	1000031e 	bne	r2,zero,d18 <gescoord+0xd4>
			ALT_inc_y = 1;
     d0c:	00800044 	movi	r2,1
     d10:	d0a81915 	stw	r2,-24476(gp)
     d14:	00004f06 	br	e54 <gescoord+0x210>
     d18:	00004e06 	br	e54 <gescoord+0x210>
			random == 1;
		}
	}else if(ID == 2){
     d1c:	e0bfff17 	ldw	r2,-4(fp)
     d20:	10800098 	cmpnei	r2,r2,2
     d24:	1000251e 	bne	r2,zero,dbc <gescoord+0x178>
		VGA_text(30, 25, "Speler 2 heeft gescoord!");
     d28:	01000784 	movi	r4,30
     d2c:	01400644 	movi	r5,25
     d30:	018000b4 	movhi	r6,2
     d34:	31bf0504 	addi	r6,r6,-1004
     d38:	0002a7c0 	call	2a7c <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     d3c:	0009883a 	mov	r4,zero
     d40:	000b883a 	mov	r5,zero
     d44:	018008c4 	movi	r6,35
     d48:	000f883a 	mov	r7,zero
     d4c:	001ba0c0 	call	1ba0c <OSTimeDlyHMSM>
		VGA_text(30, 25, "                        ");
     d50:	01000784 	movi	r4,30
     d54:	01400644 	movi	r5,25
     d58:	018000b4 	movhi	r6,2
     d5c:	31befe04 	addi	r6,r6,-1032
     d60:	0002a7c0 	call	2a7c <VGA_text>
		ALT_x1 = 0;
     d64:	d0281b15 	stw	zero,-24468(gp)
		ALT_x2 = 165;
     d68:	00802944 	movi	r2,165
     d6c:	d0a81d15 	stw	r2,-24460(gp)
		ALT_y = 100;
     d70:	00801904 	movi	r2,100
     d74:	d0a81815 	stw	r2,-24480(gp)
		ALT_inc_x = 1;
     d78:	00800044 	movi	r2,1
     d7c:	d0a81c15 	stw	r2,-24464(gp)
		if(random == 1){
     d80:	d0a81217 	ldw	r2,-24504(gp)
     d84:	10800058 	cmpnei	r2,r2,1
     d88:	1000041e 	bne	r2,zero,d9c <gescoord+0x158>
			ALT_inc_y = 1;
     d8c:	00800044 	movi	r2,1
     d90:	d0a81915 	stw	r2,-24476(gp)
			random = 0;
     d94:	d0281215 	stw	zero,-24504(gp)
     d98:	00000706 	br	db8 <gescoord+0x174>
		}else if(random == 0){
     d9c:	d0a81217 	ldw	r2,-24504(gp)
     da0:	1000051e 	bne	r2,zero,db8 <gescoord+0x174>
			ALT_inc_y = -1;
     da4:	00bfffc4 	movi	r2,-1
     da8:	d0a81915 	stw	r2,-24476(gp)
			random = 1;
     dac:	00800044 	movi	r2,1
     db0:	d0a81215 	stw	r2,-24504(gp)
     db4:	00002706 	br	e54 <gescoord+0x210>
     db8:	00002606 	br	e54 <gescoord+0x210>
		}
	}else if(ID == 3){
     dbc:	e0bfff17 	ldw	r2,-4(fp)
     dc0:	108000d8 	cmpnei	r2,r2,3
     dc4:	1000231e 	bne	r2,zero,e54 <gescoord+0x210>
		VGA_text(30, 25, "De computer heeft gescoord!");
     dc8:	01000784 	movi	r4,30
     dcc:	01400644 	movi	r5,25
     dd0:	018000b4 	movhi	r6,2
     dd4:	31bf0c04 	addi	r6,r6,-976
     dd8:	0002a7c0 	call	2a7c <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     ddc:	0009883a 	mov	r4,zero
     de0:	000b883a 	mov	r5,zero
     de4:	018008c4 	movi	r6,35
     de8:	000f883a 	mov	r7,zero
     dec:	001ba0c0 	call	1ba0c <OSTimeDlyHMSM>
		VGA_text(30, 25, "                           ");
     df0:	01000784 	movi	r4,30
     df4:	01400644 	movi	r5,25
     df8:	018000b4 	movhi	r6,2
     dfc:	31bf1304 	addi	r6,r6,-948
     e00:	0002a7c0 	call	2a7c <VGA_text>
		ALT_x1 = 0;
     e04:	d0281b15 	stw	zero,-24468(gp)
		ALT_x2 = 165;
     e08:	00802944 	movi	r2,165
     e0c:	d0a81d15 	stw	r2,-24460(gp)
		ALT_y = 100;
     e10:	00801904 	movi	r2,100
     e14:	d0a81815 	stw	r2,-24480(gp)
		ALT_inc_x = -1;
     e18:	00bfffc4 	movi	r2,-1
     e1c:	d0a81c15 	stw	r2,-24464(gp)
		if(random == 1){
     e20:	d0a81217 	ldw	r2,-24504(gp)
     e24:	10800058 	cmpnei	r2,r2,1
     e28:	1000041e 	bne	r2,zero,e3c <gescoord+0x1f8>
			ALT_inc_y = 1;
     e2c:	00800044 	movi	r2,1
     e30:	d0a81915 	stw	r2,-24476(gp)
			random = 0;
     e34:	d0281215 	stw	zero,-24504(gp)
     e38:	00000606 	br	e54 <gescoord+0x210>
		}else if(random == 0){
     e3c:	d0a81217 	ldw	r2,-24504(gp)
     e40:	1000041e 	bne	r2,zero,e54 <gescoord+0x210>
			ALT_inc_y = -1;
     e44:	00bfffc4 	movi	r2,-1
     e48:	d0a81915 	stw	r2,-24476(gp)
			random = 1;
     e4c:	00800044 	movi	r2,1
     e50:	d0a81215 	stw	r2,-24504(gp)
		}
	}

}
     e54:	e037883a 	mov	sp,fp
     e58:	dfc00117 	ldw	ra,4(sp)
     e5c:	df000017 	ldw	fp,0(sp)
     e60:	dec00204 	addi	sp,sp,8
     e64:	f800283a 	ret

00000e68 <endGame>:

void endGame(int ID) {
     e68:	defffb04 	addi	sp,sp,-20
     e6c:	dfc00415 	stw	ra,16(sp)
     e70:	df000315 	stw	fp,12(sp)
     e74:	df000304 	addi	fp,sp,12
     e78:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	printf("end game\n");
     e7c:	010000b4 	movhi	r4,2
     e80:	213f1a04 	addi	r4,r4,-920
     e84:	00034400 	call	3440 <puts>

	clearScreen();
     e88:	00023740 	call	2374 <clearScreen>

	OSFlagPost(Flags, C1_Flag + C2_Flag, OS_FLAG_SET, &err);
     e8c:	d0a80d17 	ldw	r2,-24524(gp)
     e90:	1009883a 	mov	r4,r2
     e94:	01400304 	movi	r5,12
     e98:	01800044 	movi	r6,1
     e9c:	e1fffe04 	addi	r7,fp,-8
     ea0:	00167080 	call	16708 <OSFlagPost>
	OSFlagPost(Flags_Games, Game_Flag, OS_FLAG_SET, &err);
     ea4:	d0a80b17 	ldw	r2,-24532(gp)
     ea8:	1009883a 	mov	r4,r2
     eac:	01400084 	movi	r5,2
     eb0:	01800044 	movi	r6,1
     eb4:	e1fffe04 	addi	r7,fp,-8
     eb8:	00167080 	call	16708 <OSFlagPost>


	if(ID == 1){
     ebc:	e0bfff17 	ldw	r2,-4(fp)
     ec0:	10800058 	cmpnei	r2,r2,1
     ec4:	1000101e 	bne	r2,zero,f08 <endGame+0xa0>
		VGA_text(35, 25, "Player 1 lost");
     ec8:	010008c4 	movi	r4,35
     ecc:	01400644 	movi	r5,25
     ed0:	018000b4 	movhi	r6,2
     ed4:	31bf1d04 	addi	r6,r6,-908
     ed8:	0002a7c0 	call	2a7c <VGA_text>
		OSTimeDlyHMSM(0, 0, 40, 0);
     edc:	0009883a 	mov	r4,zero
     ee0:	000b883a 	mov	r5,zero
     ee4:	01800a04 	movi	r6,40
     ee8:	000f883a 	mov	r7,zero
     eec:	001ba0c0 	call	1ba0c <OSTimeDlyHMSM>
		VGA_text(35, 25, "             ");
     ef0:	010008c4 	movi	r4,35
     ef4:	01400644 	movi	r5,25
     ef8:	018000b4 	movhi	r6,2
     efc:	31bf2104 	addi	r6,r6,-892
     f00:	0002a7c0 	call	2a7c <VGA_text>
     f04:	00001206 	br	f50 <endGame+0xe8>
	} else if(ID == 2){
     f08:	e0bfff17 	ldw	r2,-4(fp)
     f0c:	10800098 	cmpnei	r2,r2,2
     f10:	10000f1e 	bne	r2,zero,f50 <endGame+0xe8>
		VGA_text(35, 25, "Player 2 lost");
     f14:	010008c4 	movi	r4,35
     f18:	01400644 	movi	r5,25
     f1c:	018000b4 	movhi	r6,2
     f20:	31bf2504 	addi	r6,r6,-876
     f24:	0002a7c0 	call	2a7c <VGA_text>
		OSTimeDlyHMSM(0, 0, 40, 0);
     f28:	0009883a 	mov	r4,zero
     f2c:	000b883a 	mov	r5,zero
     f30:	01800a04 	movi	r6,40
     f34:	000f883a 	mov	r7,zero
     f38:	001ba0c0 	call	1ba0c <OSTimeDlyHMSM>
		VGA_text(35, 25, "             ");
     f3c:	010008c4 	movi	r4,35
     f40:	01400644 	movi	r5,25
     f44:	018000b4 	movhi	r6,2
     f48:	31bf2104 	addi	r6,r6,-892
     f4c:	0002a7c0 	call	2a7c <VGA_text>
	}


	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
     f50:	d0a80d17 	ldw	r2,-24524(gp)
     f54:	1009883a 	mov	r4,r2
     f58:	01400444 	movi	r5,17
     f5c:	000d883a 	mov	r6,zero
     f60:	e1fffe04 	addi	r7,fp,-8
     f64:	00167080 	call	16708 <OSFlagPost>

	teken_menu(2);
     f68:	01000084 	movi	r4,2
     f6c:	00025340 	call	2534 <teken_menu>
	deleteNummer();
     f70:	0002c200 	call	2c20 <deleteNummer>


	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     f74:	d1281b17 	ldw	r4,-24468(gp)
     f78:	d1681817 	ldw	r5,-24480(gp)
     f7c:	d0a81b17 	ldw	r2,-24468(gp)
     f80:	10c00144 	addi	r3,r2,5
     f84:	d0a81817 	ldw	r2,-24480(gp)
     f88:	10800144 	addi	r2,r2,5
     f8c:	d8000015 	stw	zero,0(sp)
     f90:	180d883a 	mov	r6,r3
     f94:	100f883a 	mov	r7,r2
     f98:	00029c80 	call	29c8 <VGA_box>

	ALT_x1 = 0;
     f9c:	d0281b15 	stw	zero,-24468(gp)
	ALT_x2 = 165;
     fa0:	00802944 	movi	r2,165
     fa4:	d0a81d15 	stw	r2,-24460(gp)
	ALT_y = 100;
     fa8:	00801904 	movi	r2,100
     fac:	d0a81815 	stw	r2,-24480(gp)
	ALT_inc_x = 1;
     fb0:	00800044 	movi	r2,1
     fb4:	d0a81c15 	stw	r2,-24464(gp)
	ALT_inc_y = 1;
     fb8:	00800044 	movi	r2,1
     fbc:	d0a81915 	stw	r2,-24476(gp)

	check = 1;
     fc0:	00800044 	movi	r2,1
     fc4:	d0a00115 	stw	r2,-32764(gp)
	first = 1;
     fc8:	00800044 	movi	r2,1
     fcc:	d0a00015 	stw	r2,-32768(gp)

}
     fd0:	e037883a 	mov	sp,fp
     fd4:	dfc00117 	ldw	ra,4(sp)
     fd8:	df000017 	ldw	fp,0(sp)
     fdc:	dec00204 	addi	sp,sp,8
     fe0:	f800283a 	ret

00000fe4 <endSingleplayer>:

void endSingleplayer(){
     fe4:	defffc04 	addi	sp,sp,-16
     fe8:	dfc00315 	stw	ra,12(sp)
     fec:	df000215 	stw	fp,8(sp)
     ff0:	df000204 	addi	fp,sp,8
	INT8U err;

	printf("end Singleplayer\n");
     ff4:	010000b4 	movhi	r4,2
     ff8:	213f2904 	addi	r4,r4,-860
     ffc:	00034400 	call	3440 <puts>

	//clearScreen();

	OSFlagPost(Flags, C1_Flag, OS_FLAG_SET, &err);
    1000:	d0a80d17 	ldw	r2,-24524(gp)
    1004:	1009883a 	mov	r4,r2
    1008:	01400104 	movi	r5,4
    100c:	01800044 	movi	r6,1
    1010:	e1ffff04 	addi	r7,fp,-4
    1014:	00167080 	call	16708 <OSFlagPost>

	VGA_text(35, 25, "GAME OVER");
    1018:	010008c4 	movi	r4,35
    101c:	01400644 	movi	r5,25
    1020:	018000b4 	movhi	r6,2
    1024:	31bf2e04 	addi	r6,r6,-840
    1028:	0002a7c0 	call	2a7c <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
    102c:	0009883a 	mov	r4,zero
    1030:	000b883a 	mov	r5,zero
    1034:	01800a04 	movi	r6,40
    1038:	000f883a 	mov	r7,zero
    103c:	001ba0c0 	call	1ba0c <OSTimeDlyHMSM>
	VGA_text(35, 25, "         ");
    1040:	010008c4 	movi	r4,35
    1044:	01400644 	movi	r5,25
    1048:	018000b4 	movhi	r6,2
    104c:	31bf3104 	addi	r6,r6,-828
    1050:	0002a7c0 	call	2a7c <VGA_text>


	VGA_text(6,5, "           ");
    1054:	01000184 	movi	r4,6
    1058:	01400144 	movi	r5,5
    105c:	018000b4 	movhi	r6,2
    1060:	31bf3404 	addi	r6,r6,-816
    1064:	0002a7c0 	call	2a7c <VGA_text>


	teken_menu(1);
    1068:	01000044 	movi	r4,1
    106c:	00025340 	call	2534 <teken_menu>

	VGA_box (316, 4, 319, 235, zwart); 					// singleplayer balk weghalen voor de zekerheid
    1070:	d8000015 	stw	zero,0(sp)
    1074:	01004f04 	movi	r4,316
    1078:	01400104 	movi	r5,4
    107c:	01804fc4 	movi	r6,319
    1080:	01c03ac4 	movi	r7,235
    1084:	00029c80 	call	29c8 <VGA_box>

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1088:	d1281b17 	ldw	r4,-24468(gp)
    108c:	d1681817 	ldw	r5,-24480(gp)
    1090:	d0a81b17 	ldw	r2,-24468(gp)
    1094:	10c00144 	addi	r3,r2,5
    1098:	d0a81817 	ldw	r2,-24480(gp)
    109c:	10800144 	addi	r2,r2,5
    10a0:	d8000015 	stw	zero,0(sp)
    10a4:	180d883a 	mov	r6,r3
    10a8:	100f883a 	mov	r7,r2
    10ac:	00029c80 	call	29c8 <VGA_box>
	deleteNummer();
    10b0:	0002c200 	call	2c20 <deleteNummer>


	ALT_x1 = 0;
    10b4:	d0281b15 	stw	zero,-24468(gp)
	ALT_x2 = 165;
    10b8:	00802944 	movi	r2,165
    10bc:	d0a81d15 	stw	r2,-24460(gp)
	ALT_y = 100;
    10c0:	00801904 	movi	r2,100
    10c4:	d0a81815 	stw	r2,-24480(gp)
	ALT_inc_x = -1;
    10c8:	00bfffc4 	movi	r2,-1
    10cc:	d0a81c15 	stw	r2,-24464(gp)
	ALT_inc_y = 1;
    10d0:	00800044 	movi	r2,1
    10d4:	d0a81915 	stw	r2,-24476(gp)

	leven = beginLevens;
    10d8:	008000c4 	movi	r2,3
    10dc:	d0a00215 	stw	r2,-32760(gp)
	score3 = 0;
    10e0:	d0281115 	stw	zero,-24508(gp)
	first = 1;
    10e4:	00800044 	movi	r2,1
    10e8:	d0a00015 	stw	r2,-32768(gp)

	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    10ec:	d0a80d17 	ldw	r2,-24524(gp)
    10f0:	1009883a 	mov	r4,r2
    10f4:	01400444 	movi	r5,17
    10f8:	000d883a 	mov	r6,zero
    10fc:	e1ffff04 	addi	r7,fp,-4
    1100:	00167080 	call	16708 <OSFlagPost>

	OSFlagPost(Flags_Games, Singleplayer_Flag, OS_FLAG_SET, &err);
    1104:	d0a80b17 	ldw	r2,-24532(gp)
    1108:	1009883a 	mov	r4,r2
    110c:	01400804 	movi	r5,32
    1110:	01800044 	movi	r6,1
    1114:	e1ffff04 	addi	r7,fp,-4
    1118:	00167080 	call	16708 <OSFlagPost>

}
    111c:	e037883a 	mov	sp,fp
    1120:	dfc00117 	ldw	ra,4(sp)
    1124:	df000017 	ldw	fp,0(sp)
    1128:	dec00204 	addi	sp,sp,8
    112c:	f800283a 	ret

00001130 <Singleplayer>:

void Singleplayer(void* pdata){
    1130:	defff704 	addi	sp,sp,-36
    1134:	dfc00815 	stw	ra,32(sp)
    1138:	df000715 	stw	fp,28(sp)
    113c:	df000704 	addi	fp,sp,28
    1140:	e13fff15 	stw	r4,-4(fp)
	
	ALT_x1 = 0;
    1144:	d0281b15 	stw	zero,-24468(gp)
	ALT_x2 = 165;
    1148:	00802944 	movi	r2,165
    114c:	d0a81d15 	stw	r2,-24460(gp)
	ALT_y = 100;
    1150:	00801904 	movi	r2,100
    1154:	d0a81815 	stw	r2,-24480(gp)
	ALT_inc_x = -1;
    1158:	00bfffc4 	movi	r2,-1
    115c:	d0a81c15 	stw	r2,-24464(gp)
	ALT_inc_y = 1;
    1160:	00800044 	movi	r2,1
    1164:	d0a81915 	stw	r2,-24476(gp)

	pixel_buffer_x = 315;
    1168:	00804ec4 	movi	r2,315
    116c:	d0a81515 	stw	r2,-24492(gp)
	pixel_buffer_y = 230;
    1170:	00803984 	movi	r2,230
    1174:	d0a81315 	stw	r2,-24500(gp)
	int q;
	Balk * balkje;
	
	char levens[10];

	score3 = 0;
    1178:	d0281115 	stw	zero,-24508(gp)
	

	while (1) {
		OSFlagPend(Flags_Games, Singleplayer_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    117c:	d0e80b17 	ldw	r3,-24532(gp)
    1180:	e0bffc04 	addi	r2,fp,-16
    1184:	d8800015 	stw	r2,0(sp)
    1188:	1809883a 	mov	r4,r3
    118c:	01400804 	movi	r5,32
    1190:	000d883a 	mov	r6,zero
    1194:	000f883a 	mov	r7,zero
    1198:	00160b00 	call	160b0 <OSFlagPend>

		//printf("Single flag is set\n");

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
    119c:	d0e80e17 	ldw	r3,-24520(gp)
    11a0:	e0bffc04 	addi	r2,fp,-16
    11a4:	1809883a 	mov	r4,r3
    11a8:	000b883a 	mov	r5,zero
    11ac:	100d883a 	mov	r6,r2
    11b0:	00173a80 	call	173a8 <OSMboxPend>
    11b4:	e0bffb15 	stw	r2,-20(fp)
		//printf("ID is: %d\tHoogte is: %d\n", balkje->ID, balkje->Hoogte);




		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    11b8:	d1281b17 	ldw	r4,-24468(gp)
    11bc:	d1681817 	ldw	r5,-24480(gp)
    11c0:	d0a81b17 	ldw	r2,-24468(gp)
    11c4:	10c00144 	addi	r3,r2,5
    11c8:	d0a81817 	ldw	r2,-24480(gp)
    11cc:	10800144 	addi	r2,r2,5
    11d0:	d8000015 	stw	zero,0(sp)
    11d4:	180d883a 	mov	r6,r3
    11d8:	100f883a 	mov	r7,r2
    11dc:	00029c80 	call	29c8 <VGA_box>

		if (first == 1) {
    11e0:	d0a00017 	ldw	r2,-32768(gp)
    11e4:	10800058 	cmpnei	r2,r2,1
    11e8:	10001d1e 	bne	r2,zero,1260 <Singleplayer+0x130>
			ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
    11ec:	d0a81b17 	ldw	r2,-24468(gp)
    11f0:	10c02804 	addi	r3,r2,160
    11f4:	d0a81c17 	ldw	r2,-24464(gp)
    11f8:	1885883a 	add	r2,r3,r2
    11fc:	d0a81b15 	stw	r2,-24468(gp)
			ALT_x2 += ALT_inc_x;
    1200:	d0e81d17 	ldw	r3,-24460(gp)
    1204:	d0a81c17 	ldw	r2,-24464(gp)
    1208:	1885883a 	add	r2,r3,r2
    120c:	d0a81d15 	stw	r2,-24460(gp)
			ALT_y += ALT_inc_y;
    1210:	d0e81817 	ldw	r3,-24480(gp)
    1214:	d0a81917 	ldw	r2,-24476(gp)
    1218:	1885883a 	add	r2,r3,r2
    121c:	d0a81815 	stw	r2,-24480(gp)

			del_middenlijn();
    1220:	0002b740 	call	2b74 <del_middenlijn>
			VGA_box (316, 0, 319, 239, groen); 					// rechts
    1224:	0081a5c4 	movi	r2,1687
    1228:	d8800015 	stw	r2,0(sp)
    122c:	01004f04 	movi	r4,316
    1230:	000b883a 	mov	r5,zero
    1234:	01804fc4 	movi	r6,319
    1238:	01c03bc4 	movi	r7,239
    123c:	00029c80 	call	29c8 <VGA_box>
			VGA_box(300, 4, 305, 235, zwart);
    1240:	d8000015 	stw	zero,0(sp)
    1244:	01004b04 	movi	r4,300
    1248:	01400104 	movi	r5,4
    124c:	01804c44 	movi	r6,305
    1250:	01c03ac4 	movi	r7,235
    1254:	00029c80 	call	29c8 <VGA_box>

			first = 0;
    1258:	d0200015 	stw	zero,-32768(gp)
    125c:	00000c06 	br	1290 <Singleplayer+0x160>
		} else {
			ALT_x1 += ALT_inc_x;
    1260:	d0e81b17 	ldw	r3,-24468(gp)
    1264:	d0a81c17 	ldw	r2,-24464(gp)
    1268:	1885883a 	add	r2,r3,r2
    126c:	d0a81b15 	stw	r2,-24468(gp)
			ALT_x2 += ALT_inc_x;
    1270:	d0e81d17 	ldw	r3,-24460(gp)
    1274:	d0a81c17 	ldw	r2,-24464(gp)
    1278:	1885883a 	add	r2,r3,r2
    127c:	d0a81d15 	stw	r2,-24460(gp)
			ALT_y += ALT_inc_y;
    1280:	d0e81817 	ldw	r3,-24480(gp)
    1284:	d0a81917 	ldw	r2,-24476(gp)
    1288:	1885883a 	add	r2,r3,r2
    128c:	d0a81815 	stw	r2,-24480(gp)
		}


		//collision rand boven en onder
		if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
    1290:	d0e81817 	ldw	r3,-24480(gp)
    1294:	d0a81317 	ldw	r2,-24500(gp)
    1298:	18800326 	beq	r3,r2,12a8 <Singleplayer+0x178>
    129c:	d0a81817 	ldw	r2,-24480(gp)
    12a0:	10800118 	cmpnei	r2,r2,4
    12a4:	1000031e 	bne	r2,zero,12b4 <Singleplayer+0x184>
			ALT_inc_y = -(ALT_inc_y);
    12a8:	d0a81917 	ldw	r2,-24476(gp)
    12ac:	0085c83a 	sub	r2,zero,r2
    12b0:	d0a81915 	stw	r2,-24476(gp)
		}
		//collision rand rechts en links
		if ((ALT_x2 == pixel_buffer_x)) {
    12b4:	d0e81d17 	ldw	r3,-24460(gp)
    12b8:	d0a81517 	ldw	r2,-24492(gp)
    12bc:	1880071e 	bne	r3,r2,12dc <Singleplayer+0x1ac>
			ALT_inc_x = -(ALT_inc_x);
    12c0:	d0a81c17 	ldw	r2,-24464(gp)
    12c4:	0085c83a 	sub	r2,zero,r2
    12c8:	d0a81c15 	stw	r2,-24464(gp)
			deleteNummer();
    12cc:	0002c200 	call	2c20 <deleteNummer>
			score3++;
    12d0:	d0a81117 	ldw	r2,-24508(gp)
    12d4:	10800044 	addi	r2,r2,1
    12d8:	d0a81115 	stw	r2,-24508(gp)

		}

		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
    12dc:	d1281b17 	ldw	r4,-24468(gp)
    12e0:	d1681817 	ldw	r5,-24480(gp)
    12e4:	d0a81b17 	ldw	r2,-24468(gp)
    12e8:	11800144 	addi	r6,r2,5
    12ec:	d0a81817 	ldw	r2,-24480(gp)
    12f0:	10c00144 	addi	r3,r2,5
    12f4:	00804034 	movhi	r2,256
    12f8:	10bfffc4 	addi	r2,r2,-1
    12fc:	d8800015 	stw	r2,0(sp)
    1300:	180f883a 	mov	r7,r3
    1304:	00029c80 	call	29c8 <VGA_box>

		//links dood
		if (ALT_x1 == 0) {
    1308:	d0a81b17 	ldw	r2,-24468(gp)
    130c:	1000051e 	bne	r2,zero,1324 <Singleplayer+0x1f4>
			leven--;
    1310:	d0a00217 	ldw	r2,-32760(gp)
    1314:	10bfffc4 	addi	r2,r2,-1
    1318:	d0a00215 	stw	r2,-32760(gp)
			gescoord(3);
    131c:	010000c4 	movi	r4,3
    1320:	0000c440 	call	c44 <gescoord>
//				score3++;
//			}

		//collision linker balkje
		//lange zijde
		if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte && ALT_y < balkje->Hoogte + 50)){
    1324:	d0a81b17 	ldw	r2,-24468(gp)
    1328:	10800558 	cmpnei	r2,r2,21
    132c:	10000c1e 	bne	r2,zero,1360 <Singleplayer+0x230>
    1330:	e0bffb17 	ldw	r2,-20(fp)
    1334:	10c00017 	ldw	r3,0(r2)
    1338:	d0a81817 	ldw	r2,-24480(gp)
    133c:	1880080e 	bge	r3,r2,1360 <Singleplayer+0x230>
    1340:	e0bffb17 	ldw	r2,-20(fp)
    1344:	10800017 	ldw	r2,0(r2)
    1348:	10800c84 	addi	r2,r2,50
    134c:	d0e81817 	ldw	r3,-24480(gp)
    1350:	1880030e 	bge	r3,r2,1360 <Singleplayer+0x230>
			ALT_inc_x = -(ALT_inc_x);
    1354:	d0a81c17 	ldw	r2,-24464(gp)
    1358:	0085c83a 	sub	r2,zero,r2
    135c:	d0a81c15 	stw	r2,-24464(gp)
		}
		//boven
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte){
    1360:	d0a81b17 	ldw	r2,-24468(gp)
    1364:	10800608 	cmpgei	r2,r2,24
    1368:	10000a1e 	bne	r2,zero,1394 <Singleplayer+0x264>
    136c:	d0a81b17 	ldw	r2,-24468(gp)
    1370:	10800590 	cmplti	r2,r2,22
    1374:	1000071e 	bne	r2,zero,1394 <Singleplayer+0x264>
    1378:	e0bffb17 	ldw	r2,-20(fp)
    137c:	10c00017 	ldw	r3,0(r2)
    1380:	d0a81817 	ldw	r2,-24480(gp)
    1384:	1880031e 	bne	r3,r2,1394 <Singleplayer+0x264>
			ALT_inc_y = -(ALT_inc_y);
    1388:	d0a81917 	ldw	r2,-24476(gp)
    138c:	0085c83a 	sub	r2,zero,r2
    1390:	d0a81915 	stw	r2,-24476(gp)
		}
		//onder
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte + 50){
    1394:	d0a81b17 	ldw	r2,-24468(gp)
    1398:	10800608 	cmpgei	r2,r2,24
    139c:	10000b1e 	bne	r2,zero,13cc <Singleplayer+0x29c>
    13a0:	d0a81b17 	ldw	r2,-24468(gp)
    13a4:	10800590 	cmplti	r2,r2,22
    13a8:	1000081e 	bne	r2,zero,13cc <Singleplayer+0x29c>
    13ac:	e0bffb17 	ldw	r2,-20(fp)
    13b0:	10800017 	ldw	r2,0(r2)
    13b4:	10c00c84 	addi	r3,r2,50
    13b8:	d0a81817 	ldw	r2,-24480(gp)
    13bc:	1880031e 	bne	r3,r2,13cc <Singleplayer+0x29c>
			ALT_inc_y = -(ALT_inc_y);
    13c0:	d0a81917 	ldw	r2,-24476(gp)
    13c4:	0085c83a 	sub	r2,zero,r2
    13c8:	d0a81915 	stw	r2,-24476(gp)
		}


		sprintf(levens, "LEVENS: %d", leven);
    13cc:	d0a00217 	ldw	r2,-32760(gp)
    13d0:	e0fffc44 	addi	r3,fp,-15
    13d4:	1809883a 	mov	r4,r3
    13d8:	014000b4 	movhi	r5,2
    13dc:	297f3704 	addi	r5,r5,-804
    13e0:	100d883a 	mov	r6,r2
    13e4:	00034ac0 	call	34ac <sprintf>
		VGA_text(6,5, levens);
    13e8:	e0bffc44 	addi	r2,fp,-15
    13ec:	01000184 	movi	r4,6
    13f0:	01400144 	movi	r5,5
    13f4:	100d883a 	mov	r6,r2
    13f8:	0002a7c0 	call	2a7c <VGA_text>
		OSTimeDly(1);
    13fc:	01000044 	movi	r4,1
    1400:	001b8c40 	call	1b8c4 <OSTimeDly>

		for (i = 0; i <= 999; i++) {
    1404:	e03ffa15 	stw	zero,-24(fp)
    1408:	00004a06 	br	1534 <Singleplayer+0x404>

			if(score3 == i){
    140c:	d0e81117 	ldw	r3,-24508(gp)
    1410:	e0bffa17 	ldw	r2,-24(fp)
    1414:	18803c1e 	bne	r3,r2,1508 <Singleplayer+0x3d8>

				if (score3 >= 0 && score3 <= 9){
    1418:	d0a81117 	ldw	r2,-24508(gp)
    141c:	10000716 	blt	r2,zero,143c <Singleplayer+0x30c>
    1420:	d0a81117 	ldw	r2,-24508(gp)
    1424:	10800288 	cmpgei	r2,r2,10
    1428:	1000041e 	bne	r2,zero,143c <Singleplayer+0x30c>
					draw_number(i, 3);
    142c:	e13ffa17 	ldw	r4,-24(fp)
    1430:	014000c4 	movi	r5,3
    1434:	0002c5c0 	call	2c5c <draw_number>

		for (i = 0; i <= 999; i++) {

			if(score3 == i){

				if (score3 >= 0 && score3 <= 9){
    1438:	00003306 	br	1508 <Singleplayer+0x3d8>
					draw_number(i, 3);
				} else if (score3 >= 10 && score3 <= 99){
    143c:	d0a81117 	ldw	r2,-24508(gp)
    1440:	10800290 	cmplti	r2,r2,10
    1444:	1000121e 	bne	r2,zero,1490 <Singleplayer+0x360>
    1448:	d0a81117 	ldw	r2,-24508(gp)
    144c:	10801908 	cmpgei	r2,r2,100
    1450:	10000f1e 	bne	r2,zero,1490 <Singleplayer+0x360>
					draw_number(i /10 , 2);
    1454:	e0fffa17 	ldw	r3,-24(fp)
    1458:	00800284 	movi	r2,10
    145c:	1885283a 	div	r2,r3,r2
    1460:	1009883a 	mov	r4,r2
    1464:	01400084 	movi	r5,2
    1468:	0002c5c0 	call	2c5c <draw_number>
					draw_number(i %10, 3);
    146c:	e0bffa17 	ldw	r2,-24(fp)
    1470:	00c00284 	movi	r3,10
    1474:	10c7283a 	div	r3,r2,r3
    1478:	18c002a4 	muli	r3,r3,10
    147c:	10c5c83a 	sub	r2,r2,r3
    1480:	1009883a 	mov	r4,r2
    1484:	014000c4 	movi	r5,3
    1488:	0002c5c0 	call	2c5c <draw_number>

			if(score3 == i){

				if (score3 >= 0 && score3 <= 9){
					draw_number(i, 3);
				} else if (score3 >= 10 && score3 <= 99){
    148c:	00001e06 	br	1508 <Singleplayer+0x3d8>
					draw_number(i /10 , 2);
					draw_number(i %10, 3);
				} else if (score3 >= 100 && score3 <= 999){
    1490:	d0a81117 	ldw	r2,-24508(gp)
    1494:	10801910 	cmplti	r2,r2,100
    1498:	10001b1e 	bne	r2,zero,1508 <Singleplayer+0x3d8>
    149c:	d0a81117 	ldw	r2,-24508(gp)
    14a0:	1080fa08 	cmpgei	r2,r2,1000
    14a4:	1000181e 	bne	r2,zero,1508 <Singleplayer+0x3d8>
					draw_number(i /100 , 1);
    14a8:	e0fffa17 	ldw	r3,-24(fp)
    14ac:	00801904 	movi	r2,100
    14b0:	1885283a 	div	r2,r3,r2
    14b4:	1009883a 	mov	r4,r2
    14b8:	01400044 	movi	r5,1
    14bc:	0002c5c0 	call	2c5c <draw_number>
					draw_number(i /10 %10, 2);
    14c0:	e0fffa17 	ldw	r3,-24(fp)
    14c4:	00800284 	movi	r2,10
    14c8:	1885283a 	div	r2,r3,r2
    14cc:	00c00284 	movi	r3,10
    14d0:	10c7283a 	div	r3,r2,r3
    14d4:	18c002a4 	muli	r3,r3,10
    14d8:	10c5c83a 	sub	r2,r2,r3
    14dc:	1009883a 	mov	r4,r2
    14e0:	01400084 	movi	r5,2
    14e4:	0002c5c0 	call	2c5c <draw_number>
					draw_number(i %10, 3);
    14e8:	e0bffa17 	ldw	r2,-24(fp)
    14ec:	00c00284 	movi	r3,10
    14f0:	10c7283a 	div	r3,r2,r3
    14f4:	18c002a4 	muli	r3,r3,10
    14f8:	10c5c83a 	sub	r2,r2,r3
    14fc:	1009883a 	mov	r4,r2
    1500:	014000c4 	movi	r5,3
    1504:	0002c5c0 	call	2c5c <draw_number>
				}
			}
			if((score3 == 999) || (leven == 0)){ // max score of geen levens meer, spel eindigt.
    1508:	d0a81117 	ldw	r2,-24508(gp)
    150c:	1080f9e0 	cmpeqi	r2,r2,999
    1510:	1000021e 	bne	r2,zero,151c <Singleplayer+0x3ec>
    1514:	d0a00217 	ldw	r2,-32760(gp)
    1518:	1000031e 	bne	r2,zero,1528 <Singleplayer+0x3f8>
				leven = 0;
    151c:	d0200215 	stw	zero,-32760(gp)
				score3 =0;
    1520:	d0281115 	stw	zero,-24508(gp)

				endSingleplayer();
    1524:	0000fe40 	call	fe4 <endSingleplayer>

		sprintf(levens, "LEVENS: %d", leven);
		VGA_text(6,5, levens);
		OSTimeDly(1);

		for (i = 0; i <= 999; i++) {
    1528:	e0bffa17 	ldw	r2,-24(fp)
    152c:	10800044 	addi	r2,r2,1
    1530:	e0bffa15 	stw	r2,-24(fp)
    1534:	e0bffa17 	ldw	r2,-24(fp)
    1538:	1080fa10 	cmplti	r2,r2,1000
    153c:	103fb31e 	bne	r2,zero,140c <__alt_mem_Flash_flash_data+0xf400140c>





	}
    1540:	003f0e06 	br	117c <__alt_mem_Flash_flash_data+0xf400117c>

00001544 <tutorialUitleg>:
	
}

void tutorialUitleg(){
    1544:	defffe04 	addi	sp,sp,-8
    1548:	dfc00115 	stw	ra,4(sp)
    154c:	df000015 	stw	fp,0(sp)
    1550:	d839883a 	mov	fp,sp
	INT8U err;
	
	VGA_text(10, 5, "Er zijn twee soorten spellen: Singleplayer en Multiplayer.");
    1554:	01000284 	movi	r4,10
    1558:	01400144 	movi	r5,5
    155c:	018000b4 	movhi	r6,2
    1560:	31bf3a04 	addi	r6,r6,-792
    1564:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 7, "In Singleplayer speel je tegen de computer, waarbij je");
    1568:	01000284 	movi	r4,10
    156c:	014001c4 	movi	r5,7
    1570:	018000b4 	movhi	r6,2
    1574:	31bf4904 	addi	r6,r6,-732
    1578:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 8, "zoveel mogelijk aantal punten moet bereiken door de bal");
    157c:	01000284 	movi	r4,10
    1580:	01400204 	movi	r5,8
    1584:	018000b4 	movhi	r6,2
    1588:	31bf5704 	addi	r6,r6,-676
    158c:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 9, "tegen de muur te kaatsen. Hierbij heb je 3 levens.");
    1590:	01000284 	movi	r4,10
    1594:	01400244 	movi	r5,9
    1598:	018000b4 	movhi	r6,2
    159c:	31bf6504 	addi	r6,r6,-620
    15a0:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 11, "In Multiplayer gaat het er om dat je de bal in het doel");
    15a4:	01000284 	movi	r4,10
    15a8:	014002c4 	movi	r5,11
    15ac:	018000b4 	movhi	r6,2
    15b0:	31bf7204 	addi	r6,r6,-568
    15b4:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 12, "van de tegenstander krijgt. Het doel bevindt zich achter");
    15b8:	01000284 	movi	r4,10
    15bc:	01400304 	movi	r5,12
    15c0:	018000b4 	movhi	r6,2
    15c4:	31bf8004 	addi	r6,r6,-512
    15c8:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 13, "het balkje van de tegenstander. Wanneer je scoort krijg je");
    15cc:	01000284 	movi	r4,10
    15d0:	01400344 	movi	r5,13
    15d4:	018000b4 	movhi	r6,2
    15d8:	31bf8f04 	addi	r6,r6,-452
    15dc:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 14, "1 punt.");
    15e0:	01000284 	movi	r4,10
    15e4:	01400384 	movi	r5,14
    15e8:	018000b4 	movhi	r6,2
    15ec:	31bf9e04 	addi	r6,r6,-392
    15f0:	0002a7c0 	call	2a7c <VGA_text>
	
	VGA_text(10, 38, "De besturing gaat als volgt:");
    15f4:	01000284 	movi	r4,10
    15f8:	01400984 	movi	r5,38
    15fc:	018000b4 	movhi	r6,2
    1600:	31bfa004 	addi	r6,r6,-384
    1604:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 40, "De linker balk wordt bestuurd door het op en neer bewegen");
    1608:	01000284 	movi	r4,10
    160c:	01400a04 	movi	r5,40
    1610:	018000b4 	movhi	r6,2
    1614:	31bfa804 	addi	r6,r6,-352
    1618:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 41, "van switch 17. Bij de multiplayer wordt ook nog vereist om");
    161c:	01000284 	movi	r4,10
    1620:	01400a44 	movi	r5,41
    1624:	018000b4 	movhi	r6,2
    1628:	31bfb704 	addi	r6,r6,-292
    162c:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 42, "de linker knop in te houden, anders ben je af. Dit geldt ook");
    1630:	01000284 	movi	r4,10
    1634:	01400a84 	movi	r5,42
    1638:	018000b4 	movhi	r6,2
    163c:	31bfc604 	addi	r6,r6,-232
    1640:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 43, "voor de rechter knop voor de rechter balk.");
    1644:	01000284 	movi	r4,10
    1648:	01400ac4 	movi	r5,43
    164c:	018000b4 	movhi	r6,2
    1650:	31bfd604 	addi	r6,r6,-168
    1654:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 45, "De rechter balk wordt bestuurd KEY3 en KEY2. KEY3 = omlaag,");
    1658:	01000284 	movi	r4,10
    165c:	01400b44 	movi	r5,45
    1660:	018000b4 	movhi	r6,2
    1664:	31bfe104 	addi	r6,r6,-124
    1668:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 46, "KEY2 = omhoog.");
    166c:	01000284 	movi	r4,10
    1670:	01400b84 	movi	r5,46
    1674:	018000b4 	movhi	r6,2
    1678:	31bff004 	addi	r6,r6,-64
    167c:	0002a7c0 	call	2a7c <VGA_text>
	
	terugMenu();
    1680:	0001da00 	call	1da0 <terugMenu>
}
    1684:	e037883a 	mov	sp,fp
    1688:	dfc00117 	ldw	ra,4(sp)
    168c:	df000017 	ldw	fp,0(sp)
    1690:	dec00204 	addi	sp,sp,8
    1694:	f800283a 	ret

00001698 <endTutorial>:

void endTutorial(){
    1698:	defffc04 	addi	sp,sp,-16
    169c:	dfc00315 	stw	ra,12(sp)
    16a0:	df000215 	stw	fp,8(sp)
    16a4:	df000204 	addi	fp,sp,8
	INT8U err;

	printf("end Tutorial\n");
    16a8:	010000b4 	movhi	r4,2
    16ac:	213ff404 	addi	r4,r4,-48
    16b0:	00034400 	call	3440 <puts>

	//clearScreen();
	VGA_text(10, 5, "                                                                              ");
    16b4:	01000284 	movi	r4,10
    16b8:	01400144 	movi	r5,5
    16bc:	018000b4 	movhi	r6,2
    16c0:	31bff804 	addi	r6,r6,-32
    16c4:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 6, "                                                                              ");
    16c8:	01000284 	movi	r4,10
    16cc:	01400184 	movi	r5,6
    16d0:	018000b4 	movhi	r6,2
    16d4:	31bff804 	addi	r6,r6,-32
    16d8:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 7, "                                                                              ");
    16dc:	01000284 	movi	r4,10
    16e0:	014001c4 	movi	r5,7
    16e4:	018000b4 	movhi	r6,2
    16e8:	31bff804 	addi	r6,r6,-32
    16ec:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 8, "                                                                              ");
    16f0:	01000284 	movi	r4,10
    16f4:	01400204 	movi	r5,8
    16f8:	018000b4 	movhi	r6,2
    16fc:	31bff804 	addi	r6,r6,-32
    1700:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 9, "                                                                              ");
    1704:	01000284 	movi	r4,10
    1708:	01400244 	movi	r5,9
    170c:	018000b4 	movhi	r6,2
    1710:	31bff804 	addi	r6,r6,-32
    1714:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 11, "                                                                              ");
    1718:	01000284 	movi	r4,10
    171c:	014002c4 	movi	r5,11
    1720:	018000b4 	movhi	r6,2
    1724:	31bff804 	addi	r6,r6,-32
    1728:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 12, "                                                                              ");
    172c:	01000284 	movi	r4,10
    1730:	01400304 	movi	r5,12
    1734:	018000b4 	movhi	r6,2
    1738:	31bff804 	addi	r6,r6,-32
    173c:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 13, "                                                                              ");
    1740:	01000284 	movi	r4,10
    1744:	01400344 	movi	r5,13
    1748:	018000b4 	movhi	r6,2
    174c:	31bff804 	addi	r6,r6,-32
    1750:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 14, "                                                                              ");
    1754:	01000284 	movi	r4,10
    1758:	01400384 	movi	r5,14
    175c:	018000b4 	movhi	r6,2
    1760:	31bff804 	addi	r6,r6,-32
    1764:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 38, "                                                                              ");
    1768:	01000284 	movi	r4,10
    176c:	01400984 	movi	r5,38
    1770:	018000b4 	movhi	r6,2
    1774:	31bff804 	addi	r6,r6,-32
    1778:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 40, "                                                                              ");
    177c:	01000284 	movi	r4,10
    1780:	01400a04 	movi	r5,40
    1784:	018000b4 	movhi	r6,2
    1788:	31bff804 	addi	r6,r6,-32
    178c:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 41, "                                                                              ");
    1790:	01000284 	movi	r4,10
    1794:	01400a44 	movi	r5,41
    1798:	018000b4 	movhi	r6,2
    179c:	31bff804 	addi	r6,r6,-32
    17a0:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 42, "                                                                              ");
    17a4:	01000284 	movi	r4,10
    17a8:	01400a84 	movi	r5,42
    17ac:	018000b4 	movhi	r6,2
    17b0:	31bff804 	addi	r6,r6,-32
    17b4:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 43, "                                                                              ");
    17b8:	01000284 	movi	r4,10
    17bc:	01400ac4 	movi	r5,43
    17c0:	018000b4 	movhi	r6,2
    17c4:	31bff804 	addi	r6,r6,-32
    17c8:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 45, "                                                                              ");
    17cc:	01000284 	movi	r4,10
    17d0:	01400b44 	movi	r5,45
    17d4:	018000b4 	movhi	r6,2
    17d8:	31bff804 	addi	r6,r6,-32
    17dc:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(10, 46, "                                                                              ");
    17e0:	01000284 	movi	r4,10
    17e4:	01400b84 	movi	r5,46
    17e8:	018000b4 	movhi	r6,2
    17ec:	31bff804 	addi	r6,r6,-32
    17f0:	0002a7c0 	call	2a7c <VGA_text>

	OSFlagPost(Flags, C1_Flag, OS_FLAG_SET, &err);
    17f4:	d0a80d17 	ldw	r2,-24524(gp)
    17f8:	1009883a 	mov	r4,r2
    17fc:	01400104 	movi	r5,4
    1800:	01800044 	movi	r6,1
    1804:	e1ffff04 	addi	r7,fp,-4
    1808:	00167080 	call	16708 <OSFlagPost>

	VGA_text(35, 25, "Einde Tutorial");
    180c:	010008c4 	movi	r4,35
    1810:	01400644 	movi	r5,25
    1814:	018000b4 	movhi	r6,2
    1818:	31800c04 	addi	r6,r6,48
    181c:	0002a7c0 	call	2a7c <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
    1820:	0009883a 	mov	r4,zero
    1824:	000b883a 	mov	r5,zero
    1828:	01800a04 	movi	r6,40
    182c:	000f883a 	mov	r7,zero
    1830:	001ba0c0 	call	1ba0c <OSTimeDlyHMSM>
	VGA_text(35, 25, "              ");
    1834:	010008c4 	movi	r4,35
    1838:	01400644 	movi	r5,25
    183c:	018000b4 	movhi	r6,2
    1840:	31801004 	addi	r6,r6,64
    1844:	0002a7c0 	call	2a7c <VGA_text>




	teken_menu(4);
    1848:	01000104 	movi	r4,4
    184c:	00025340 	call	2534 <teken_menu>

	VGA_box (316, 4, 319, 235, zwart); 					// singleplayer/tutorial balk weghalen voor de zekerheid
    1850:	d8000015 	stw	zero,0(sp)
    1854:	01004f04 	movi	r4,316
    1858:	01400104 	movi	r5,4
    185c:	01804fc4 	movi	r6,319
    1860:	01c03ac4 	movi	r7,235
    1864:	00029c80 	call	29c8 <VGA_box>

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1868:	d1281b17 	ldw	r4,-24468(gp)
    186c:	d1681817 	ldw	r5,-24480(gp)
    1870:	d0a81b17 	ldw	r2,-24468(gp)
    1874:	10c00144 	addi	r3,r2,5
    1878:	d0a81817 	ldw	r2,-24480(gp)
    187c:	10800144 	addi	r2,r2,5
    1880:	d8000015 	stw	zero,0(sp)
    1884:	180d883a 	mov	r6,r3
    1888:	100f883a 	mov	r7,r2
    188c:	00029c80 	call	29c8 <VGA_box>


	ALT_x1 = 0;
    1890:	d0281b15 	stw	zero,-24468(gp)
	ALT_x2 = 165;
    1894:	00802944 	movi	r2,165
    1898:	d0a81d15 	stw	r2,-24460(gp)
	ALT_y = 100;
    189c:	00801904 	movi	r2,100
    18a0:	d0a81815 	stw	r2,-24480(gp)
	ALT_inc_x = -1;
    18a4:	00bfffc4 	movi	r2,-1
    18a8:	d0a81c15 	stw	r2,-24464(gp)
	ALT_inc_y = 1;
    18ac:	00800044 	movi	r2,1
    18b0:	d0a81915 	stw	r2,-24476(gp)

	first = 1;
    18b4:	00800044 	movi	r2,1
    18b8:	d0a00015 	stw	r2,-32768(gp)

	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    18bc:	d0a80d17 	ldw	r2,-24524(gp)
    18c0:	1009883a 	mov	r4,r2
    18c4:	01400444 	movi	r5,17
    18c8:	000d883a 	mov	r6,zero
    18cc:	e1ffff04 	addi	r7,fp,-4
    18d0:	00167080 	call	16708 <OSFlagPost>

	OSFlagPost(Flags_Tutorial, Tutorial_Flag, OS_FLAG_SET, &err);
    18d4:	d0a81017 	ldw	r2,-24512(gp)
    18d8:	1009883a 	mov	r4,r2
    18dc:	01401004 	movi	r5,64
    18e0:	01800044 	movi	r6,1
    18e4:	e1ffff04 	addi	r7,fp,-4
    18e8:	00167080 	call	16708 <OSFlagPost>

}
    18ec:	e037883a 	mov	sp,fp
    18f0:	dfc00117 	ldw	ra,4(sp)
    18f4:	df000017 	ldw	fp,0(sp)
    18f8:	dec00204 	addi	sp,sp,8
    18fc:	f800283a 	ret

00001900 <Tutorial>:

void Tutorial(void* pdata){
    1900:	defffa04 	addi	sp,sp,-24
    1904:	dfc00515 	stw	ra,20(sp)
    1908:	df000415 	stw	fp,16(sp)
    190c:	df000404 	addi	fp,sp,16
    1910:	e13fff15 	stw	r4,-4(fp)
	
	ALT_x1 = 0;
    1914:	d0281b15 	stw	zero,-24468(gp)
	ALT_x2 = 165;
    1918:	00802944 	movi	r2,165
    191c:	d0a81d15 	stw	r2,-24460(gp)
	ALT_y = 100;
    1920:	00801904 	movi	r2,100
    1924:	d0a81815 	stw	r2,-24480(gp)
	ALT_inc_x = 1;
    1928:	00800044 	movi	r2,1
    192c:	d0a81c15 	stw	r2,-24464(gp)
	ALT_inc_y = 1;
    1930:	00800044 	movi	r2,1
    1934:	d0a81915 	stw	r2,-24476(gp)

	pixel_buffer_x = 315;
    1938:	00804ec4 	movi	r2,315
    193c:	d0a81515 	stw	r2,-24492(gp)
	pixel_buffer_y = 230;
    1940:	00803984 	movi	r2,230
    1944:	d0a81315 	stw	r2,-24500(gp)
	int count;
	int q;
	Balk * balkje;
	
	while (1) {
		OSFlagPend(Flags_Tutorial, Tutorial_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
    1948:	d0e81017 	ldw	r3,-24512(gp)
    194c:	e0bffe04 	addi	r2,fp,-8
    1950:	d8800015 	stw	r2,0(sp)
    1954:	1809883a 	mov	r4,r3
    1958:	01401004 	movi	r5,64
    195c:	01800044 	movi	r6,1
    1960:	000f883a 	mov	r7,zero
    1964:	00160b00 	call	160b0 <OSFlagPend>

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
    1968:	d0e80e17 	ldw	r3,-24520(gp)
    196c:	e0bffe04 	addi	r2,fp,-8
    1970:	1809883a 	mov	r4,r3
    1974:	000b883a 	mov	r5,zero
    1978:	100d883a 	mov	r6,r2
    197c:	00173a80 	call	173a8 <OSMboxPend>
    1980:	e0bffd15 	stw	r2,-12(fp)

		//printf("TUTORIAL SET\n");

		//printf("ID is: %d\tHoogte is: %d\n", balkje->ID, balkje->Hoogte);

		tutorialUitleg();
    1984:	00015440 	call	1544 <tutorialUitleg>
		
		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1988:	d1281b17 	ldw	r4,-24468(gp)
    198c:	d1681817 	ldw	r5,-24480(gp)
    1990:	d0a81b17 	ldw	r2,-24468(gp)
    1994:	10c00144 	addi	r3,r2,5
    1998:	d0a81817 	ldw	r2,-24480(gp)
    199c:	10800144 	addi	r2,r2,5
    19a0:	d8000015 	stw	zero,0(sp)
    19a4:	180d883a 	mov	r6,r3
    19a8:	100f883a 	mov	r7,r2
    19ac:	00029c80 	call	29c8 <VGA_box>


		if (first == 1) {
    19b0:	d0a00017 	ldw	r2,-32768(gp)
    19b4:	10800058 	cmpnei	r2,r2,1
    19b8:	1000201e 	bne	r2,zero,1a3c <Tutorial+0x13c>
			printf("FIRST");
    19bc:	010000b4 	movhi	r4,2
    19c0:	21001404 	addi	r4,r4,80
    19c4:	000335c0 	call	335c <printf>
			ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
    19c8:	d0a81b17 	ldw	r2,-24468(gp)
    19cc:	10c02804 	addi	r3,r2,160
    19d0:	d0a81c17 	ldw	r2,-24464(gp)
    19d4:	1885883a 	add	r2,r3,r2
    19d8:	d0a81b15 	stw	r2,-24468(gp)
			ALT_x2 += ALT_inc_x;
    19dc:	d0e81d17 	ldw	r3,-24460(gp)
    19e0:	d0a81c17 	ldw	r2,-24464(gp)
    19e4:	1885883a 	add	r2,r3,r2
    19e8:	d0a81d15 	stw	r2,-24460(gp)
			ALT_y += ALT_inc_y;
    19ec:	d0e81817 	ldw	r3,-24480(gp)
    19f0:	d0a81917 	ldw	r2,-24476(gp)
    19f4:	1885883a 	add	r2,r3,r2
    19f8:	d0a81815 	stw	r2,-24480(gp)

			del_middenlijn();
    19fc:	0002b740 	call	2b74 <del_middenlijn>
			VGA_box (316, 0, 319, 239, groen); 					// rechts
    1a00:	0081a5c4 	movi	r2,1687
    1a04:	d8800015 	stw	r2,0(sp)
    1a08:	01004f04 	movi	r4,316
    1a0c:	000b883a 	mov	r5,zero
    1a10:	01804fc4 	movi	r6,319
    1a14:	01c03bc4 	movi	r7,239
    1a18:	00029c80 	call	29c8 <VGA_box>
			VGA_box(300, 4, 305, 235, zwart);
    1a1c:	d8000015 	stw	zero,0(sp)
    1a20:	01004b04 	movi	r4,300
    1a24:	01400104 	movi	r5,4
    1a28:	01804c44 	movi	r6,305
    1a2c:	01c03ac4 	movi	r7,235
    1a30:	00029c80 	call	29c8 <VGA_box>

			first = 0;
    1a34:	d0200015 	stw	zero,-32768(gp)
    1a38:	00000c06 	br	1a6c <Tutorial+0x16c>
		} else {
			ALT_x1 += ALT_inc_x;
    1a3c:	d0e81b17 	ldw	r3,-24468(gp)
    1a40:	d0a81c17 	ldw	r2,-24464(gp)
    1a44:	1885883a 	add	r2,r3,r2
    1a48:	d0a81b15 	stw	r2,-24468(gp)
			ALT_x2 += ALT_inc_x;
    1a4c:	d0e81d17 	ldw	r3,-24460(gp)
    1a50:	d0a81c17 	ldw	r2,-24464(gp)
    1a54:	1885883a 	add	r2,r3,r2
    1a58:	d0a81d15 	stw	r2,-24460(gp)
			ALT_y += ALT_inc_y;
    1a5c:	d0e81817 	ldw	r3,-24480(gp)
    1a60:	d0a81917 	ldw	r2,-24476(gp)
    1a64:	1885883a 	add	r2,r3,r2
    1a68:	d0a81815 	stw	r2,-24480(gp)
		



		//collision rand boven en onder
		if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
    1a6c:	d0e81817 	ldw	r3,-24480(gp)
    1a70:	d0a81317 	ldw	r2,-24500(gp)
    1a74:	18800326 	beq	r3,r2,1a84 <Tutorial+0x184>
    1a78:	d0a81817 	ldw	r2,-24480(gp)
    1a7c:	10800118 	cmpnei	r2,r2,4
    1a80:	1000031e 	bne	r2,zero,1a90 <Tutorial+0x190>
			ALT_inc_y = -(ALT_inc_y);
    1a84:	d0a81917 	ldw	r2,-24476(gp)
    1a88:	0085c83a 	sub	r2,zero,r2
    1a8c:	d0a81915 	stw	r2,-24476(gp)
		}
		//collision rand rechts en links
		if ((ALT_x2 == pixel_buffer_x)) {
    1a90:	d0e81d17 	ldw	r3,-24460(gp)
    1a94:	d0a81517 	ldw	r2,-24492(gp)
    1a98:	1880031e 	bne	r3,r2,1aa8 <Tutorial+0x1a8>
			ALT_inc_x = -(ALT_inc_x);
    1a9c:	d0a81c17 	ldw	r2,-24464(gp)
    1aa0:	0085c83a 	sub	r2,zero,r2
    1aa4:	d0a81c15 	stw	r2,-24464(gp)

		}

		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
    1aa8:	d1281b17 	ldw	r4,-24468(gp)
    1aac:	d1681817 	ldw	r5,-24480(gp)
    1ab0:	d0a81b17 	ldw	r2,-24468(gp)
    1ab4:	11800144 	addi	r6,r2,5
    1ab8:	d0a81817 	ldw	r2,-24480(gp)
    1abc:	10c00144 	addi	r3,r2,5
    1ac0:	00804034 	movhi	r2,256
    1ac4:	10bfffc4 	addi	r2,r2,-1
    1ac8:	d8800015 	stw	r2,0(sp)
    1acc:	180f883a 	mov	r7,r3
    1ad0:	00029c80 	call	29c8 <VGA_box>
		
		//links dood
		if (ALT_x1 == 0) {
    1ad4:	d0a81b17 	ldw	r2,-24468(gp)
    1ad8:	1000021e 	bne	r2,zero,1ae4 <Tutorial+0x1e4>
			gescoord(3);
    1adc:	010000c4 	movi	r4,3
    1ae0:	0000c440 	call	c44 <gescoord>
//				score3++;
//			}

		//collision linker balkje
		//lange zijde
		if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte && ALT_y < balkje->Hoogte + 50)){
    1ae4:	d0a81b17 	ldw	r2,-24468(gp)
    1ae8:	10800558 	cmpnei	r2,r2,21
    1aec:	10000c1e 	bne	r2,zero,1b20 <Tutorial+0x220>
    1af0:	e0bffd17 	ldw	r2,-12(fp)
    1af4:	10c00017 	ldw	r3,0(r2)
    1af8:	d0a81817 	ldw	r2,-24480(gp)
    1afc:	1880080e 	bge	r3,r2,1b20 <Tutorial+0x220>
    1b00:	e0bffd17 	ldw	r2,-12(fp)
    1b04:	10800017 	ldw	r2,0(r2)
    1b08:	10800c84 	addi	r2,r2,50
    1b0c:	d0e81817 	ldw	r3,-24480(gp)
    1b10:	1880030e 	bge	r3,r2,1b20 <Tutorial+0x220>
			ALT_inc_x = -(ALT_inc_x);
    1b14:	d0a81c17 	ldw	r2,-24464(gp)
    1b18:	0085c83a 	sub	r2,zero,r2
    1b1c:	d0a81c15 	stw	r2,-24464(gp)
		}
		//boven
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte){
    1b20:	d0a81b17 	ldw	r2,-24468(gp)
    1b24:	10800608 	cmpgei	r2,r2,24
    1b28:	10000a1e 	bne	r2,zero,1b54 <Tutorial+0x254>
    1b2c:	d0a81b17 	ldw	r2,-24468(gp)
    1b30:	10800590 	cmplti	r2,r2,22
    1b34:	1000071e 	bne	r2,zero,1b54 <Tutorial+0x254>
    1b38:	e0bffd17 	ldw	r2,-12(fp)
    1b3c:	10c00017 	ldw	r3,0(r2)
    1b40:	d0a81817 	ldw	r2,-24480(gp)
    1b44:	1880031e 	bne	r3,r2,1b54 <Tutorial+0x254>
			ALT_inc_y = -(ALT_inc_y);
    1b48:	d0a81917 	ldw	r2,-24476(gp)
    1b4c:	0085c83a 	sub	r2,zero,r2
    1b50:	d0a81915 	stw	r2,-24476(gp)
		}
		//onder
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte + 50){
    1b54:	d0a81b17 	ldw	r2,-24468(gp)
    1b58:	10800608 	cmpgei	r2,r2,24
    1b5c:	10000b1e 	bne	r2,zero,1b8c <Tutorial+0x28c>
    1b60:	d0a81b17 	ldw	r2,-24468(gp)
    1b64:	10800590 	cmplti	r2,r2,22
    1b68:	1000081e 	bne	r2,zero,1b8c <Tutorial+0x28c>
    1b6c:	e0bffd17 	ldw	r2,-12(fp)
    1b70:	10800017 	ldw	r2,0(r2)
    1b74:	10c00c84 	addi	r3,r2,50
    1b78:	d0a81817 	ldw	r2,-24480(gp)
    1b7c:	1880031e 	bne	r3,r2,1b8c <Tutorial+0x28c>
			ALT_inc_y = -(ALT_inc_y);
    1b80:	d0a81917 	ldw	r2,-24476(gp)
    1b84:	0085c83a 	sub	r2,zero,r2
    1b88:	d0a81915 	stw	r2,-24476(gp)
		}

		
		if (controller(3) == 3) {
    1b8c:	010000c4 	movi	r4,3
    1b90:	000039c0 	call	39c <controller>
    1b94:	108000d8 	cmpnei	r2,r2,3
    1b98:	1000011e 	bne	r2,zero,1ba0 <Tutorial+0x2a0>
			endTutorial();
    1b9c:	00016980 	call	1698 <endTutorial>
		}

		OSTimeDly(1);
    1ba0:	01000044 	movi	r4,1
    1ba4:	001b8c40 	call	1b8c4 <OSTimeDly>


	}
    1ba8:	003f6706 	br	1948 <__alt_mem_Flash_flash_data+0xf4001948>

00001bac <endHighscores>:
	
}

void endHighscores(){
    1bac:	defffc04 	addi	sp,sp,-16
    1bb0:	dfc00315 	stw	ra,12(sp)
    1bb4:	df000215 	stw	fp,8(sp)
    1bb8:	df000204 	addi	fp,sp,8
	INT8U err;

	printf("end Highscores\n");
    1bbc:	010000b4 	movhi	r4,2
    1bc0:	21001604 	addi	r4,r4,88
    1bc4:	00034400 	call	3440 <puts>

	//clearScreen();

	VGA_text(35, 15, "                          ");
    1bc8:	010008c4 	movi	r4,35
    1bcc:	014003c4 	movi	r5,15
    1bd0:	018000b4 	movhi	r6,2
    1bd4:	31801a04 	addi	r6,r6,104
    1bd8:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(35, 25, "Einde Highscores");
    1bdc:	010008c4 	movi	r4,35
    1be0:	01400644 	movi	r5,25
    1be4:	018000b4 	movhi	r6,2
    1be8:	31802104 	addi	r6,r6,132
    1bec:	0002a7c0 	call	2a7c <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
    1bf0:	0009883a 	mov	r4,zero
    1bf4:	000b883a 	mov	r5,zero
    1bf8:	01800a04 	movi	r6,40
    1bfc:	000f883a 	mov	r7,zero
    1c00:	001ba0c0 	call	1ba0c <OSTimeDlyHMSM>
	VGA_text(35, 25, "                  ");
    1c04:	010008c4 	movi	r4,35
    1c08:	01400644 	movi	r5,25
    1c0c:	018000b4 	movhi	r6,2
    1c10:	31802604 	addi	r6,r6,152
    1c14:	0002a7c0 	call	2a7c <VGA_text>




	teken_menu(3);
    1c18:	010000c4 	movi	r4,3
    1c1c:	00025340 	call	2534 <teken_menu>

	VGA_box (316, 4, 319, 235, zwart); 					// singleplayer/tutorial balk weghalen voor de zekerheid
    1c20:	d8000015 	stw	zero,0(sp)
    1c24:	01004f04 	movi	r4,316
    1c28:	01400104 	movi	r5,4
    1c2c:	01804fc4 	movi	r6,319
    1c30:	01c03ac4 	movi	r7,235
    1c34:	00029c80 	call	29c8 <VGA_box>

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1c38:	d1281b17 	ldw	r4,-24468(gp)
    1c3c:	d1681817 	ldw	r5,-24480(gp)
    1c40:	d0a81b17 	ldw	r2,-24468(gp)
    1c44:	10c00144 	addi	r3,r2,5
    1c48:	d0a81817 	ldw	r2,-24480(gp)
    1c4c:	10800144 	addi	r2,r2,5
    1c50:	d8000015 	stw	zero,0(sp)
    1c54:	180d883a 	mov	r6,r3
    1c58:	100f883a 	mov	r7,r2
    1c5c:	00029c80 	call	29c8 <VGA_box>


	ALT_x1 = 0;
    1c60:	d0281b15 	stw	zero,-24468(gp)
	ALT_x2 = 165;
    1c64:	00802944 	movi	r2,165
    1c68:	d0a81d15 	stw	r2,-24460(gp)
	ALT_y = 100;
    1c6c:	00801904 	movi	r2,100
    1c70:	d0a81815 	stw	r2,-24480(gp)
	ALT_inc_x = -1;
    1c74:	00bfffc4 	movi	r2,-1
    1c78:	d0a81c15 	stw	r2,-24464(gp)
	ALT_inc_y = 1;
    1c7c:	00800044 	movi	r2,1
    1c80:	d0a81915 	stw	r2,-24476(gp)

	first = 1;
    1c84:	00800044 	movi	r2,1
    1c88:	d0a00015 	stw	r2,-32768(gp)

	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    1c8c:	d0a80d17 	ldw	r2,-24524(gp)
    1c90:	1009883a 	mov	r4,r2
    1c94:	01400444 	movi	r5,17
    1c98:	000d883a 	mov	r6,zero
    1c9c:	e1ffff04 	addi	r7,fp,-4
    1ca0:	00167080 	call	16708 <OSFlagPost>

	OSFlagPost(Flags_Highscores, Highscores_Flag, OS_FLAG_SET, &err);
    1ca4:	d0a81617 	ldw	r2,-24488(gp)
    1ca8:	1009883a 	mov	r4,r2
    1cac:	01402004 	movi	r5,128
    1cb0:	01800044 	movi	r6,1
    1cb4:	e1ffff04 	addi	r7,fp,-4
    1cb8:	00167080 	call	16708 <OSFlagPost>

}
    1cbc:	e037883a 	mov	sp,fp
    1cc0:	dfc00117 	ldw	ra,4(sp)
    1cc4:	df000017 	ldw	fp,0(sp)
    1cc8:	dec00204 	addi	sp,sp,8
    1ccc:	f800283a 	ret

00001cd0 <Highscores>:

void Highscores(void* pdata){
    1cd0:	defffb04 	addi	sp,sp,-20
    1cd4:	dfc00415 	stw	ra,16(sp)
    1cd8:	df000315 	stw	fp,12(sp)
    1cdc:	df000304 	addi	fp,sp,12
    1ce0:	e13fff15 	stw	r4,-4(fp)
	int ID;
	int count;
	int q;
	
	while(1){
		OSFlagPend(Flags_Highscores, Highscores_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
    1ce4:	d0a81617 	ldw	r2,-24488(gp)
    1ce8:	e0fffe04 	addi	r3,fp,-8
    1cec:	d8c00015 	stw	r3,0(sp)
    1cf0:	1009883a 	mov	r4,r2
    1cf4:	01402004 	movi	r5,128
    1cf8:	01800044 	movi	r6,1
    1cfc:	000f883a 	mov	r7,zero
    1d00:	00160b00 	call	160b0 <OSFlagPend>
		VGA_text(35, 15, "Highscores");
    1d04:	010008c4 	movi	r4,35
    1d08:	014003c4 	movi	r5,15
    1d0c:	018000b4 	movhi	r6,2
    1d10:	31802b04 	addi	r6,r6,172
    1d14:	0002a7c0 	call	2a7c <VGA_text>
		
		// highscores 1 t/m 5
		VGA_text(35, 18, "1. <nummer 1>");
    1d18:	010008c4 	movi	r4,35
    1d1c:	01400484 	movi	r5,18
    1d20:	018000b4 	movhi	r6,2
    1d24:	31802e04 	addi	r6,r6,184
    1d28:	0002a7c0 	call	2a7c <VGA_text>
		VGA_text(35, 20, "2. <nummer 2>");
    1d2c:	010008c4 	movi	r4,35
    1d30:	01400504 	movi	r5,20
    1d34:	018000b4 	movhi	r6,2
    1d38:	31803204 	addi	r6,r6,200
    1d3c:	0002a7c0 	call	2a7c <VGA_text>
		VGA_text(35, 22, "3. <nummer 3>");
    1d40:	010008c4 	movi	r4,35
    1d44:	01400584 	movi	r5,22
    1d48:	018000b4 	movhi	r6,2
    1d4c:	31803604 	addi	r6,r6,216
    1d50:	0002a7c0 	call	2a7c <VGA_text>
		VGA_text(35, 24, "4. <nummer 4>");
    1d54:	010008c4 	movi	r4,35
    1d58:	01400604 	movi	r5,24
    1d5c:	018000b4 	movhi	r6,2
    1d60:	31803a04 	addi	r6,r6,232
    1d64:	0002a7c0 	call	2a7c <VGA_text>
		VGA_text(35, 26, "5. <nummer 5>");
    1d68:	010008c4 	movi	r4,35
    1d6c:	01400684 	movi	r5,26
    1d70:	018000b4 	movhi	r6,2
    1d74:	31803e04 	addi	r6,r6,248
    1d78:	0002a7c0 	call	2a7c <VGA_text>
		
		terugMenu();
    1d7c:	0001da00 	call	1da0 <terugMenu>
		
		
		if (controller(3) == 3) {
    1d80:	010000c4 	movi	r4,3
    1d84:	000039c0 	call	39c <controller>
    1d88:	108000d8 	cmpnei	r2,r2,3
    1d8c:	1000011e 	bne	r2,zero,1d94 <Highscores+0xc4>
			endHighscores();
    1d90:	0001bac0 	call	1bac <endHighscores>
		}
		
		OSTimeDly(1);
    1d94:	01000044 	movi	r4,1
    1d98:	001b8c40 	call	1b8c4 <OSTimeDly>
		
	}
    1d9c:	003fd106 	br	1ce4 <__alt_mem_Flash_flash_data+0xf4001ce4>

00001da0 <terugMenu>:
	
}

void terugMenu(){
    1da0:	defffe04 	addi	sp,sp,-8
    1da4:	dfc00115 	stw	ra,4(sp)
    1da8:	df000015 	stw	fp,0(sp)
    1dac:	d839883a 	mov	fp,sp
	
	INT8U err;
	
	VGA_text(63, 57, "Rechter knop =");
    1db0:	01000fc4 	movi	r4,63
    1db4:	01400e44 	movi	r5,57
    1db8:	018000b4 	movhi	r6,2
    1dbc:	31804204 	addi	r6,r6,264
    1dc0:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text(63, 58, "terug naar menu");
    1dc4:	01000fc4 	movi	r4,63
    1dc8:	01400e84 	movi	r5,58
    1dcc:	018000b4 	movhi	r6,2
    1dd0:	31804604 	addi	r6,r6,280
    1dd4:	0002a7c0 	call	2a7c <VGA_text>
	
}
    1dd8:	e037883a 	mov	sp,fp
    1ddc:	dfc00117 	ldw	ra,4(sp)
    1de0:	df000017 	ldw	fp,0(sp)
    1de4:	dec00204 	addi	sp,sp,8
    1de8:	f800283a 	ret

00001dec <menu>:
int eenkeer = 1;
int onePress = 1;
int last;
int changed;

void menu(void* pdata){
    1dec:	defffa04 	addi	sp,sp,-24
    1df0:	dfc00515 	stw	ra,20(sp)
    1df4:	df000415 	stw	fp,16(sp)
    1df8:	df000404 	addi	fp,sp,16
    1dfc:	e13fff15 	stw	r4,-4(fp)
	int ID = (int*)pdata;
    1e00:	e0bfff17 	ldw	r2,-4(fp)
    1e04:	e0bffd15 	stw	r2,-12(fp)
	INT8U err;

	teken_menu();
    1e08:	00025340 	call	2534 <teken_menu>

	while(1){
		OSFlagPend(Flags, Menu_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    1e0c:	d0e80d17 	ldw	r3,-24524(gp)
    1e10:	e0bffe04 	addi	r2,fp,-8
    1e14:	d8800015 	stw	r2,0(sp)
    1e18:	1809883a 	mov	r4,r3
    1e1c:	01400044 	movi	r5,1
    1e20:	000d883a 	mov	r6,zero
    1e24:	000f883a 	mov	r7,zero
    1e28:	00160b00 	call	160b0 <OSFlagPend>

		if (controller(ID) == 1){
    1e2c:	e13ffd17 	ldw	r4,-12(fp)
    1e30:	000039c0 	call	39c <controller>
    1e34:	10800058 	cmpnei	r2,r2,1
    1e38:	1000111e 	bne	r2,zero,1e80 <menu+0x94>
			if(changed != 0){
    1e3c:	d0a82117 	ldw	r2,-24444(gp)
    1e40:	10000926 	beq	r2,zero,1e68 <menu+0x7c>
				gameModeMenu++;
    1e44:	d0a00317 	ldw	r2,-32756(gp)
    1e48:	10800044 	addi	r2,r2,1
    1e4c:	d0a00315 	stw	r2,-32756(gp)
				eenkeer = 1;
    1e50:	00800044 	movi	r2,1
    1e54:	d0a00a15 	stw	r2,-32728(gp)
				changed=0;
    1e58:	d0282115 	stw	zero,-24444(gp)
				printf("heeft 1 gereturned \n");
    1e5c:	010000b4 	movhi	r4,2
    1e60:	21004a04 	addi	r4,r4,296
    1e64:	00034400 	call	3440 <puts>
			}
			if (gameModeMenu >= 5){
    1e68:	d0a00317 	ldw	r2,-32756(gp)
    1e6c:	10800150 	cmplti	r2,r2,5
    1e70:	1000161e 	bne	r2,zero,1ecc <menu+0xe0>
				gameModeMenu = 1;
    1e74:	00800044 	movi	r2,1
    1e78:	d0a00315 	stw	r2,-32756(gp)
    1e7c:	00001306 	br	1ecc <menu+0xe0>
			}
		} else if (controller(ID) == 0){
    1e80:	e13ffd17 	ldw	r4,-12(fp)
    1e84:	000039c0 	call	39c <controller>
    1e88:	1000101e 	bne	r2,zero,1ecc <menu+0xe0>
			if(changed !=0){
    1e8c:	d0a82117 	ldw	r2,-24444(gp)
    1e90:	10000a26 	beq	r2,zero,1ebc <menu+0xd0>
				gameModeMenu--;
    1e94:	d0a00317 	ldw	r2,-32756(gp)
    1e98:	10bfffc4 	addi	r2,r2,-1
    1e9c:	d0a00315 	stw	r2,-32756(gp)
				last=0;
    1ea0:	d0282015 	stw	zero,-24448(gp)
				changed=0;
    1ea4:	d0282115 	stw	zero,-24444(gp)
				eenkeer = 1;
    1ea8:	00800044 	movi	r2,1
    1eac:	d0a00a15 	stw	r2,-32728(gp)
				printf("heeft 0 gereturned \n");
    1eb0:	010000b4 	movhi	r4,2
    1eb4:	21004f04 	addi	r4,r4,316
    1eb8:	00034400 	call	3440 <puts>
			}
			if (gameModeMenu <= 0){
    1ebc:	d0a00317 	ldw	r2,-32756(gp)
    1ec0:	00800216 	blt	zero,r2,1ecc <menu+0xe0>
				gameModeMenu = 4;
    1ec4:	00800104 	movi	r2,4
    1ec8:	d0a00315 	stw	r2,-32756(gp)
			}
		}
		OSTimeDly(20);
    1ecc:	01000504 	movi	r4,20
    1ed0:	001b8c40 	call	1b8c4 <OSTimeDly>
	}
    1ed4:	003fcd06 	br	1e0c <__alt_mem_Flash_flash_data+0xf4001e0c>

00001ed8 <selecteerMenu>:

}

void selecteerMenu(void *pdata){
    1ed8:	defffa04 	addi	sp,sp,-24
    1edc:	dfc00515 	stw	ra,20(sp)
    1ee0:	df000415 	stw	fp,16(sp)
    1ee4:	df000404 	addi	fp,sp,16
    1ee8:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	int ID = (int*)pdata;
    1eec:	e0bfff17 	ldw	r2,-4(fp)
    1ef0:	e0bffd15 	stw	r2,-12(fp)



	while(1){
	OSFlagPend(Flags, Menu2_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    1ef4:	d0e80d17 	ldw	r3,-24524(gp)
    1ef8:	e0bffe04 	addi	r2,fp,-8
    1efc:	d8800015 	stw	r2,0(sp)
    1f00:	1809883a 	mov	r4,r3
    1f04:	01400404 	movi	r5,16
    1f08:	000d883a 	mov	r6,zero
    1f0c:	000f883a 	mov	r7,zero
    1f10:	00160b00 	call	160b0 <OSFlagPend>

		if (gameModeMenu == 1){
    1f14:	d0a00317 	ldw	r2,-32756(gp)
    1f18:	10800058 	cmpnei	r2,r2,1
    1f1c:	1000411e 	bne	r2,zero,2024 <selecteerMenu+0x14c>
			if(eenkeer == 1){
    1f20:	d0a00a17 	ldw	r2,-32728(gp)
    1f24:	10800058 	cmpnei	r2,r2,1
    1f28:	10001f1e 	bne	r2,zero,1fa8 <selecteerMenu+0xd0>
				clearScreen();
    1f2c:	00023740 	call	2374 <clearScreen>
				VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
    1f30:	d0a00417 	ldw	r2,-32752(gp)
    1f34:	1085883a 	add	r2,r2,r2
    1f38:	1085883a 	add	r2,r2,r2
    1f3c:	1009883a 	mov	r4,r2
    1f40:	d0a00617 	ldw	r2,-32744(gp)
    1f44:	1085883a 	add	r2,r2,r2
    1f48:	1085883a 	add	r2,r2,r2
    1f4c:	100b883a 	mov	r5,r2
    1f50:	d0a00517 	ldw	r2,-32748(gp)
    1f54:	1085883a 	add	r2,r2,r2
    1f58:	1085883a 	add	r2,r2,r2
    1f5c:	100d883a 	mov	r6,r2
    1f60:	d0a00717 	ldw	r2,-32740(gp)
    1f64:	1085883a 	add	r2,r2,r2
    1f68:	1085883a 	add	r2,r2,r2
    1f6c:	1007883a 	mov	r3,r2
    1f70:	00be0014 	movui	r2,63488
    1f74:	d8800015 	stw	r2,0(sp)
    1f78:	180f883a 	mov	r7,r3
    1f7c:	00029c80 	call	29c8 <VGA_box>
				VGA_text (xMenu, yMenu, "Singleplayer");
    1f80:	d0e00817 	ldw	r3,-32736(gp)
    1f84:	d0a00917 	ldw	r2,-32732(gp)
    1f88:	1809883a 	mov	r4,r3
    1f8c:	100b883a 	mov	r5,r2
    1f90:	018000b4 	movhi	r6,2
    1f94:	31805404 	addi	r6,r6,336
    1f98:	0002a7c0 	call	2a7c <VGA_text>
				eenkeer = 0;
    1f9c:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    1fa0:	00800044 	movi	r2,1
    1fa4:	d0a82115 	stw	r2,-24444(gp)
			}
			if(controller(ID) == 2){
    1fa8:	e13ffd17 	ldw	r4,-12(fp)
    1fac:	000039c0 	call	39c <controller>
    1fb0:	10800098 	cmpnei	r2,r2,2
    1fb4:	1000ec1e 	bne	r2,zero,2368 <selecteerMenu+0x490>
				clearScreen();
    1fb8:	00023740 	call	2374 <clearScreen>
				clearText();
    1fbc:	00023b40 	call	23b4 <clearText>
				printf("start Singleplayer\n");
    1fc0:	010000b4 	movhi	r4,2
    1fc4:	21005804 	addi	r4,r4,352
    1fc8:	00034400 	call	3440 <puts>
				OSFlagPost(Flags,C1_Flag, OS_FLAG_CLR, &err);
    1fcc:	d0e80d17 	ldw	r3,-24524(gp)
    1fd0:	e0bffe04 	addi	r2,fp,-8
    1fd4:	1809883a 	mov	r4,r3
    1fd8:	01400104 	movi	r5,4
    1fdc:	000d883a 	mov	r6,zero
    1fe0:	100f883a 	mov	r7,r2
    1fe4:	00167080 	call	16708 <OSFlagPost>
				OSFlagPost(Flags_Games, Singleplayer_Flag, OS_FLAG_CLR, &err);
    1fe8:	d0e80b17 	ldw	r3,-24532(gp)
    1fec:	e0bffe04 	addi	r2,fp,-8
    1ff0:	1809883a 	mov	r4,r3
    1ff4:	01400804 	movi	r5,32
    1ff8:	000d883a 	mov	r6,zero
    1ffc:	100f883a 	mov	r7,r2
    2000:	00167080 	call	16708 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    2004:	d0e80d17 	ldw	r3,-24524(gp)
    2008:	e0bffe04 	addi	r2,fp,-8
    200c:	1809883a 	mov	r4,r3
    2010:	01400444 	movi	r5,17
    2014:	01800044 	movi	r6,1
    2018:	100f883a 	mov	r7,r2
    201c:	00167080 	call	16708 <OSFlagPost>
    2020:	0000d106 	br	2368 <selecteerMenu+0x490>
			}
		} else if (gameModeMenu == 2){
    2024:	d0a00317 	ldw	r2,-32756(gp)
    2028:	10800098 	cmpnei	r2,r2,2
    202c:	1000481e 	bne	r2,zero,2150 <selecteerMenu+0x278>
			if(eenkeer == 1){
    2030:	d0a00a17 	ldw	r2,-32728(gp)
    2034:	10800058 	cmpnei	r2,r2,1
    2038:	1000221e 	bne	r2,zero,20c4 <selecteerMenu+0x1ec>
				clearScreen();
    203c:	00023740 	call	2374 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    2040:	d0a00417 	ldw	r2,-32752(gp)
    2044:	1085883a 	add	r2,r2,r2
    2048:	1085883a 	add	r2,r2,r2
    204c:	1009883a 	mov	r4,r2
    2050:	d0a00617 	ldw	r2,-32744(gp)
    2054:	10800104 	addi	r2,r2,4
    2058:	1085883a 	add	r2,r2,r2
    205c:	1085883a 	add	r2,r2,r2
    2060:	100b883a 	mov	r5,r2
    2064:	d0a00517 	ldw	r2,-32748(gp)
    2068:	1085883a 	add	r2,r2,r2
    206c:	1085883a 	add	r2,r2,r2
    2070:	100d883a 	mov	r6,r2
    2074:	d0a00717 	ldw	r2,-32740(gp)
    2078:	10800104 	addi	r2,r2,4
    207c:	1085883a 	add	r2,r2,r2
    2080:	1085883a 	add	r2,r2,r2
    2084:	1007883a 	mov	r3,r2
    2088:	00be0014 	movui	r2,63488
    208c:	d8800015 	stw	r2,0(sp)
    2090:	180f883a 	mov	r7,r3
    2094:	00029c80 	call	29c8 <VGA_box>
				VGA_text (xMenu, yMenu + 4, "Multiplayer");
    2098:	d0e00817 	ldw	r3,-32736(gp)
    209c:	d0a00917 	ldw	r2,-32732(gp)
    20a0:	10800104 	addi	r2,r2,4
    20a4:	1809883a 	mov	r4,r3
    20a8:	100b883a 	mov	r5,r2
    20ac:	018000b4 	movhi	r6,2
    20b0:	31805d04 	addi	r6,r6,372
    20b4:	0002a7c0 	call	2a7c <VGA_text>
				eenkeer = 0;
    20b8:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    20bc:	00800044 	movi	r2,1
    20c0:	d0a82115 	stw	r2,-24444(gp)
			}
			if(controller(ID) == 2 || controller(ID) == 1){
    20c4:	e13ffd17 	ldw	r4,-12(fp)
    20c8:	000039c0 	call	39c <controller>
    20cc:	108000a0 	cmpeqi	r2,r2,2
    20d0:	1000041e 	bne	r2,zero,20e4 <selecteerMenu+0x20c>
    20d4:	e13ffd17 	ldw	r4,-12(fp)
    20d8:	000039c0 	call	39c <controller>
    20dc:	10800058 	cmpnei	r2,r2,1
    20e0:	1000a11e 	bne	r2,zero,2368 <selecteerMenu+0x490>
				clearScreen();
    20e4:	00023740 	call	2374 <clearScreen>
				clearText();
    20e8:	00023b40 	call	23b4 <clearText>
				printf("start game\n");
    20ec:	010000b4 	movhi	r4,2
    20f0:	21006004 	addi	r4,r4,384
    20f4:	00034400 	call	3440 <puts>
				OSFlagPost(Flags, C1_Flag + C2_Flag, OS_FLAG_CLR, &err);
    20f8:	d0e80d17 	ldw	r3,-24524(gp)
    20fc:	e0bffe04 	addi	r2,fp,-8
    2100:	1809883a 	mov	r4,r3
    2104:	01400304 	movi	r5,12
    2108:	000d883a 	mov	r6,zero
    210c:	100f883a 	mov	r7,r2
    2110:	00167080 	call	16708 <OSFlagPost>
				OSFlagPost(Flags_Games,Game_Flag, OS_FLAG_CLR, &err);
    2114:	d0e80b17 	ldw	r3,-24532(gp)
    2118:	e0bffe04 	addi	r2,fp,-8
    211c:	1809883a 	mov	r4,r3
    2120:	01400084 	movi	r5,2
    2124:	000d883a 	mov	r6,zero
    2128:	100f883a 	mov	r7,r2
    212c:	00167080 	call	16708 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    2130:	d0e80d17 	ldw	r3,-24524(gp)
    2134:	e0bffe04 	addi	r2,fp,-8
    2138:	1809883a 	mov	r4,r3
    213c:	01400444 	movi	r5,17
    2140:	01800044 	movi	r6,1
    2144:	100f883a 	mov	r7,r2
    2148:	00167080 	call	16708 <OSFlagPost>
    214c:	00008606 	br	2368 <selecteerMenu+0x490>
			}

		} else if (gameModeMenu == 3){
    2150:	d0a00317 	ldw	r2,-32756(gp)
    2154:	108000d8 	cmpnei	r2,r2,3
    2158:	10003d1e 	bne	r2,zero,2250 <selecteerMenu+0x378>
			if(eenkeer == 1){
    215c:	d0a00a17 	ldw	r2,-32728(gp)
    2160:	10800058 	cmpnei	r2,r2,1
    2164:	1000221e 	bne	r2,zero,21f0 <selecteerMenu+0x318>
				clearScreen();
    2168:	00023740 	call	2374 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 32, xRechts*4, xOnder*4 + 32, rood);
    216c:	d0a00417 	ldw	r2,-32752(gp)
    2170:	1085883a 	add	r2,r2,r2
    2174:	1085883a 	add	r2,r2,r2
    2178:	1009883a 	mov	r4,r2
    217c:	d0a00617 	ldw	r2,-32744(gp)
    2180:	10800204 	addi	r2,r2,8
    2184:	1085883a 	add	r2,r2,r2
    2188:	1085883a 	add	r2,r2,r2
    218c:	100b883a 	mov	r5,r2
    2190:	d0a00517 	ldw	r2,-32748(gp)
    2194:	1085883a 	add	r2,r2,r2
    2198:	1085883a 	add	r2,r2,r2
    219c:	100d883a 	mov	r6,r2
    21a0:	d0a00717 	ldw	r2,-32740(gp)
    21a4:	10800204 	addi	r2,r2,8
    21a8:	1085883a 	add	r2,r2,r2
    21ac:	1085883a 	add	r2,r2,r2
    21b0:	1007883a 	mov	r3,r2
    21b4:	00be0014 	movui	r2,63488
    21b8:	d8800015 	stw	r2,0(sp)
    21bc:	180f883a 	mov	r7,r3
    21c0:	00029c80 	call	29c8 <VGA_box>
				VGA_text (xMenu, yMenu +  8, "Highscores");
    21c4:	d0e00817 	ldw	r3,-32736(gp)
    21c8:	d0a00917 	ldw	r2,-32732(gp)
    21cc:	10800204 	addi	r2,r2,8
    21d0:	1809883a 	mov	r4,r3
    21d4:	100b883a 	mov	r5,r2
    21d8:	018000b4 	movhi	r6,2
    21dc:	31806304 	addi	r6,r6,396
    21e0:	0002a7c0 	call	2a7c <VGA_text>
				eenkeer = 0;
    21e4:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;				
    21e8:	00800044 	movi	r2,1
    21ec:	d0a82115 	stw	r2,-24444(gp)
			}
			if(controller(ID) == 2){
    21f0:	e13ffd17 	ldw	r4,-12(fp)
    21f4:	000039c0 	call	39c <controller>
    21f8:	10800098 	cmpnei	r2,r2,2
    21fc:	10005a1e 	bne	r2,zero,2368 <selecteerMenu+0x490>
				clearScreen();
    2200:	00023740 	call	2374 <clearScreen>
				clearText();
    2204:	00023b40 	call	23b4 <clearText>
				printf("Start Highscores\n");
    2208:	010000b4 	movhi	r4,2
    220c:	21006604 	addi	r4,r4,408
    2210:	00034400 	call	3440 <puts>
				OSFlagPost(Flags_Highscores, Highscores_Flag, OS_FLAG_CLR, &err);
    2214:	d0e81617 	ldw	r3,-24488(gp)
    2218:	e0bffe04 	addi	r2,fp,-8
    221c:	1809883a 	mov	r4,r3
    2220:	01402004 	movi	r5,128
    2224:	000d883a 	mov	r6,zero
    2228:	100f883a 	mov	r7,r2
    222c:	00167080 	call	16708 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    2230:	d0e80d17 	ldw	r3,-24524(gp)
    2234:	e0bffe04 	addi	r2,fp,-8
    2238:	1809883a 	mov	r4,r3
    223c:	01400444 	movi	r5,17
    2240:	01800044 	movi	r6,1
    2244:	100f883a 	mov	r7,r2
    2248:	00167080 	call	16708 <OSFlagPost>
    224c:	00004606 	br	2368 <selecteerMenu+0x490>
			}
		} else if (gameModeMenu == 4){
    2250:	d0a00317 	ldw	r2,-32756(gp)
    2254:	10800118 	cmpnei	r2,r2,4
    2258:	1000431e 	bne	r2,zero,2368 <selecteerMenu+0x490>
			if(eenkeer == 1){
    225c:	d0a00a17 	ldw	r2,-32728(gp)
    2260:	10800058 	cmpnei	r2,r2,1
    2264:	1000221e 	bne	r2,zero,22f0 <selecteerMenu+0x418>
				clearScreen();
    2268:	00023740 	call	2374 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 48, xRechts*4, xOnder*4 + 48, rood);
    226c:	d0a00417 	ldw	r2,-32752(gp)
    2270:	1085883a 	add	r2,r2,r2
    2274:	1085883a 	add	r2,r2,r2
    2278:	1009883a 	mov	r4,r2
    227c:	d0a00617 	ldw	r2,-32744(gp)
    2280:	10800304 	addi	r2,r2,12
    2284:	1085883a 	add	r2,r2,r2
    2288:	1085883a 	add	r2,r2,r2
    228c:	100b883a 	mov	r5,r2
    2290:	d0a00517 	ldw	r2,-32748(gp)
    2294:	1085883a 	add	r2,r2,r2
    2298:	1085883a 	add	r2,r2,r2
    229c:	100d883a 	mov	r6,r2
    22a0:	d0a00717 	ldw	r2,-32740(gp)
    22a4:	10800304 	addi	r2,r2,12
    22a8:	1085883a 	add	r2,r2,r2
    22ac:	1085883a 	add	r2,r2,r2
    22b0:	1007883a 	mov	r3,r2
    22b4:	00be0014 	movui	r2,63488
    22b8:	d8800015 	stw	r2,0(sp)
    22bc:	180f883a 	mov	r7,r3
    22c0:	00029c80 	call	29c8 <VGA_box>
				VGA_text (xMenu, yMenu + 12, "Tutorial");
    22c4:	d0e00817 	ldw	r3,-32736(gp)
    22c8:	d0a00917 	ldw	r2,-32732(gp)
    22cc:	10800304 	addi	r2,r2,12
    22d0:	1809883a 	mov	r4,r3
    22d4:	100b883a 	mov	r5,r2
    22d8:	018000b4 	movhi	r6,2
    22dc:	31806b04 	addi	r6,r6,428
    22e0:	0002a7c0 	call	2a7c <VGA_text>
				eenkeer = 0;
    22e4:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    22e8:	00800044 	movi	r2,1
    22ec:	d0a82115 	stw	r2,-24444(gp)

			}
			
			if(controller(ID) == 2){
    22f0:	e13ffd17 	ldw	r4,-12(fp)
    22f4:	000039c0 	call	39c <controller>
    22f8:	10800098 	cmpnei	r2,r2,2
    22fc:	10001a1e 	bne	r2,zero,2368 <selecteerMenu+0x490>
				clearScreen();
    2300:	00023740 	call	2374 <clearScreen>
				clearText();
    2304:	00023b40 	call	23b4 <clearText>
				printf("Start Tutorial\n");
    2308:	010000b4 	movhi	r4,2
    230c:	21006e04 	addi	r4,r4,440
    2310:	00034400 	call	3440 <puts>
				OSFlagPost(Flags, C1_Flag, OS_FLAG_CLR, &err);
    2314:	d0e80d17 	ldw	r3,-24524(gp)
    2318:	e0bffe04 	addi	r2,fp,-8
    231c:	1809883a 	mov	r4,r3
    2320:	01400104 	movi	r5,4
    2324:	000d883a 	mov	r6,zero
    2328:	100f883a 	mov	r7,r2
    232c:	00167080 	call	16708 <OSFlagPost>
				OSFlagPost(Flags_Tutorial,Tutorial_Flag, OS_FLAG_CLR, &err);
    2330:	d0e81017 	ldw	r3,-24512(gp)
    2334:	e0bffe04 	addi	r2,fp,-8
    2338:	1809883a 	mov	r4,r3
    233c:	01401004 	movi	r5,64
    2340:	000d883a 	mov	r6,zero
    2344:	100f883a 	mov	r7,r2
    2348:	00167080 	call	16708 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    234c:	d0e80d17 	ldw	r3,-24524(gp)
    2350:	e0bffe04 	addi	r2,fp,-8
    2354:	1809883a 	mov	r4,r3
    2358:	01400444 	movi	r5,17
    235c:	01800044 	movi	r6,1
    2360:	100f883a 	mov	r7,r2
    2364:	00167080 	call	16708 <OSFlagPost>
			}
		}

		OSTimeDly(20);
    2368:	01000504 	movi	r4,20
    236c:	001b8c40 	call	1b8c4 <OSTimeDly>
	}
    2370:	003ee006 	br	1ef4 <__alt_mem_Flash_flash_data+0xf4001ef4>

00002374 <clearScreen>:
}

void clearScreen(){
    2374:	defffd04 	addi	sp,sp,-12
    2378:	dfc00215 	stw	ra,8(sp)
    237c:	df000115 	stw	fp,4(sp)
    2380:	df000104 	addi	fp,sp,4
	VGA_box(25,70, 200,135, 0);
    2384:	d8000015 	stw	zero,0(sp)
    2388:	01000644 	movi	r4,25
    238c:	01401184 	movi	r5,70
    2390:	01803204 	movi	r6,200
    2394:	01c021c4 	movi	r7,135
    2398:	00029c80 	call	29c8 <VGA_box>
	del_middenlijn();
    239c:	0002b740 	call	2b74 <del_middenlijn>
}
    23a0:	e037883a 	mov	sp,fp
    23a4:	dfc00117 	ldw	ra,4(sp)
    23a8:	df000017 	ldw	fp,0(sp)
    23ac:	dec00204 	addi	sp,sp,8
    23b0:	f800283a 	ret

000023b4 <clearText>:

void clearText(){
    23b4:	defffe04 	addi	sp,sp,-8
    23b8:	dfc00115 	stw	ra,4(sp)
    23bc:	df000015 	stw	fp,0(sp)
    23c0:	d839883a 	mov	fp,sp
	VGA_text (xMenu, yMenu, "            ");
    23c4:	d0e00817 	ldw	r3,-32736(gp)
    23c8:	d0a00917 	ldw	r2,-32732(gp)
    23cc:	1809883a 	mov	r4,r3
    23d0:	100b883a 	mov	r5,r2
    23d4:	018000b4 	movhi	r6,2
    23d8:	31807204 	addi	r6,r6,456
    23dc:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text (xMenu, yMenu + 4, "           ");
    23e0:	d0e00817 	ldw	r3,-32736(gp)
    23e4:	d0a00917 	ldw	r2,-32732(gp)
    23e8:	10800104 	addi	r2,r2,4
    23ec:	1809883a 	mov	r4,r3
    23f0:	100b883a 	mov	r5,r2
    23f4:	018000b4 	movhi	r6,2
    23f8:	31807604 	addi	r6,r6,472
    23fc:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text (xMenu, yMenu+8, "          ");
    2400:	d0e00817 	ldw	r3,-32736(gp)
    2404:	d0a00917 	ldw	r2,-32732(gp)
    2408:	10800204 	addi	r2,r2,8
    240c:	1809883a 	mov	r4,r3
    2410:	100b883a 	mov	r5,r2
    2414:	018000b4 	movhi	r6,2
    2418:	31807904 	addi	r6,r6,484
    241c:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text (xMenu, yMenu+12, "        ");
    2420:	d0e00817 	ldw	r3,-32736(gp)
    2424:	d0a00917 	ldw	r2,-32732(gp)
    2428:	10800304 	addi	r2,r2,12
    242c:	1809883a 	mov	r4,r3
    2430:	100b883a 	mov	r5,r2
    2434:	018000b4 	movhi	r6,2
    2438:	31807c04 	addi	r6,r6,496
    243c:	0002a7c0 	call	2a7c <VGA_text>
}
    2440:	e037883a 	mov	sp,fp
    2444:	dfc00117 	ldw	ra,4(sp)
    2448:	df000017 	ldw	fp,0(sp)
    244c:	dec00204 	addi	sp,sp,8
    2450:	f800283a 	ret

00002454 <tekenBox>:

void tekenBox(int Links, int Boven, int Rechts, int Onder, short Kleur){
    2454:	defff804 	addi	sp,sp,-32
    2458:	dfc00715 	stw	ra,28(sp)
    245c:	df000615 	stw	fp,24(sp)
    2460:	df000604 	addi	fp,sp,24
    2464:	e13ffb15 	stw	r4,-20(fp)
    2468:	e17ffc15 	stw	r5,-16(fp)
    246c:	e1bffd15 	stw	r6,-12(fp)
    2470:	e1fffe15 	stw	r7,-8(fp)
    2474:	e0800217 	ldw	r2,8(fp)
    2478:	e0bfff0d 	sth	r2,-4(fp)
	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    247c:	e0bfff0f 	ldh	r2,-4(fp)
    2480:	d8800015 	stw	r2,0(sp)
    2484:	e13ffb17 	ldw	r4,-20(fp)
    2488:	e17ffc17 	ldw	r5,-16(fp)
    248c:	e1bffd17 	ldw	r6,-12(fp)
    2490:	e1fffe17 	ldw	r7,-8(fp)
    2494:	00029c80 	call	29c8 <VGA_box>
}
    2498:	e037883a 	mov	sp,fp
    249c:	dfc00117 	ldw	ra,4(sp)
    24a0:	df000017 	ldw	fp,0(sp)
    24a4:	dec00204 	addi	sp,sp,8
    24a8:	f800283a 	ret

000024ac <tekenBox2>:
// tekenBox en tekenBox2 maken samen het visuele effect van het selecteren van een menu optie.
void tekenBox2(int Links, int Boven, int Rechts, int Onder, short Kleur){
    24ac:	defff804 	addi	sp,sp,-32
    24b0:	dfc00715 	stw	ra,28(sp)
    24b4:	df000615 	stw	fp,24(sp)
    24b8:	df000604 	addi	fp,sp,24
    24bc:	e13ffb15 	stw	r4,-20(fp)
    24c0:	e17ffc15 	stw	r5,-16(fp)
    24c4:	e1bffd15 	stw	r6,-12(fp)
    24c8:	e1fffe15 	stw	r7,-8(fp)
    24cc:	e0800217 	ldw	r2,8(fp)
    24d0:	e0bfff0d 	sth	r2,-4(fp)
	Links = Links + 1;
    24d4:	e0bffb17 	ldw	r2,-20(fp)
    24d8:	10800044 	addi	r2,r2,1
    24dc:	e0bffb15 	stw	r2,-20(fp)
	Boven = Boven + 1;
    24e0:	e0bffc17 	ldw	r2,-16(fp)
    24e4:	10800044 	addi	r2,r2,1
    24e8:	e0bffc15 	stw	r2,-16(fp)
	Rechts = Rechts - 1;
    24ec:	e0bffd17 	ldw	r2,-12(fp)
    24f0:	10bfffc4 	addi	r2,r2,-1
    24f4:	e0bffd15 	stw	r2,-12(fp)
	Onder = Onder -1;
    24f8:	e0bffe17 	ldw	r2,-8(fp)
    24fc:	10bfffc4 	addi	r2,r2,-1
    2500:	e0bffe15 	stw	r2,-8(fp)

	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    2504:	e0bfff0f 	ldh	r2,-4(fp)
    2508:	d8800015 	stw	r2,0(sp)
    250c:	e13ffb17 	ldw	r4,-20(fp)
    2510:	e17ffc17 	ldw	r5,-16(fp)
    2514:	e1bffd17 	ldw	r6,-12(fp)
    2518:	e1fffe17 	ldw	r7,-8(fp)
    251c:	00029c80 	call	29c8 <VGA_box>
}
    2520:	e037883a 	mov	sp,fp
    2524:	dfc00117 	ldw	ra,4(sp)
    2528:	df000017 	ldw	fp,0(sp)
    252c:	dec00204 	addi	sp,sp,8
    2530:	f800283a 	ret

00002534 <teken_menu>:

void teken_menu(int ID){
    2534:	defffc04 	addi	sp,sp,-16
    2538:	dfc00315 	stw	ra,12(sp)
    253c:	df000215 	stw	fp,8(sp)
    2540:	df000204 	addi	fp,sp,8
    2544:	e13fff15 	stw	r4,-4(fp)
	VGA_text (xMenu, yMenu, "Singleplayer");
    2548:	d0e00817 	ldw	r3,-32736(gp)
    254c:	d0a00917 	ldw	r2,-32732(gp)
    2550:	1809883a 	mov	r4,r3
    2554:	100b883a 	mov	r5,r2
    2558:	018000b4 	movhi	r6,2
    255c:	31805404 	addi	r6,r6,336
    2560:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text (xMenu, yMenu + 4, "Multiplayer");
    2564:	d0e00817 	ldw	r3,-32736(gp)
    2568:	d0a00917 	ldw	r2,-32732(gp)
    256c:	10800104 	addi	r2,r2,4
    2570:	1809883a 	mov	r4,r3
    2574:	100b883a 	mov	r5,r2
    2578:	018000b4 	movhi	r6,2
    257c:	31805d04 	addi	r6,r6,372
    2580:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text (xMenu, yMenu+8, "Highscores");
    2584:	d0e00817 	ldw	r3,-32736(gp)
    2588:	d0a00917 	ldw	r2,-32732(gp)
    258c:	10800204 	addi	r2,r2,8
    2590:	1809883a 	mov	r4,r3
    2594:	100b883a 	mov	r5,r2
    2598:	018000b4 	movhi	r6,2
    259c:	31806304 	addi	r6,r6,396
    25a0:	0002a7c0 	call	2a7c <VGA_text>
	VGA_text (xMenu, yMenu+12, "Tutorial");
    25a4:	d0e00817 	ldw	r3,-32736(gp)
    25a8:	d0a00917 	ldw	r2,-32732(gp)
    25ac:	10800304 	addi	r2,r2,12
    25b0:	1809883a 	mov	r4,r3
    25b4:	100b883a 	mov	r5,r2
    25b8:	018000b4 	movhi	r6,2
    25bc:	31806b04 	addi	r6,r6,428
    25c0:	0002a7c0 	call	2a7c <VGA_text>
	if(ID == 1){
    25c4:	e0bfff17 	ldw	r2,-4(fp)
    25c8:	10800058 	cmpnei	r2,r2,1
    25cc:	1000151e 	bne	r2,zero,2624 <teken_menu+0xf0>
		VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
    25d0:	d0a00417 	ldw	r2,-32752(gp)
    25d4:	1085883a 	add	r2,r2,r2
    25d8:	1085883a 	add	r2,r2,r2
    25dc:	1009883a 	mov	r4,r2
    25e0:	d0a00617 	ldw	r2,-32744(gp)
    25e4:	1085883a 	add	r2,r2,r2
    25e8:	1085883a 	add	r2,r2,r2
    25ec:	100b883a 	mov	r5,r2
    25f0:	d0a00517 	ldw	r2,-32748(gp)
    25f4:	1085883a 	add	r2,r2,r2
    25f8:	1085883a 	add	r2,r2,r2
    25fc:	100d883a 	mov	r6,r2
    2600:	d0a00717 	ldw	r2,-32740(gp)
    2604:	1085883a 	add	r2,r2,r2
    2608:	1085883a 	add	r2,r2,r2
    260c:	1007883a 	mov	r3,r2
    2610:	00be0014 	movui	r2,63488
    2614:	d8800015 	stw	r2,0(sp)
    2618:	180f883a 	mov	r7,r3
    261c:	00029c80 	call	29c8 <VGA_box>
    2620:	00004d06 	br	2758 <teken_menu+0x224>
	}else if(ID == 2){
    2624:	e0bfff17 	ldw	r2,-4(fp)
    2628:	10800098 	cmpnei	r2,r2,2
    262c:	1000171e 	bne	r2,zero,268c <teken_menu+0x158>
		VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    2630:	d0a00417 	ldw	r2,-32752(gp)
    2634:	1085883a 	add	r2,r2,r2
    2638:	1085883a 	add	r2,r2,r2
    263c:	1009883a 	mov	r4,r2
    2640:	d0a00617 	ldw	r2,-32744(gp)
    2644:	10800104 	addi	r2,r2,4
    2648:	1085883a 	add	r2,r2,r2
    264c:	1085883a 	add	r2,r2,r2
    2650:	100b883a 	mov	r5,r2
    2654:	d0a00517 	ldw	r2,-32748(gp)
    2658:	1085883a 	add	r2,r2,r2
    265c:	1085883a 	add	r2,r2,r2
    2660:	100d883a 	mov	r6,r2
    2664:	d0a00717 	ldw	r2,-32740(gp)
    2668:	10800104 	addi	r2,r2,4
    266c:	1085883a 	add	r2,r2,r2
    2670:	1085883a 	add	r2,r2,r2
    2674:	1007883a 	mov	r3,r2
    2678:	00be0014 	movui	r2,63488
    267c:	d8800015 	stw	r2,0(sp)
    2680:	180f883a 	mov	r7,r3
    2684:	00029c80 	call	29c8 <VGA_box>
    2688:	00003306 	br	2758 <teken_menu+0x224>
	}else if(ID == 3){
    268c:	e0bfff17 	ldw	r2,-4(fp)
    2690:	108000d8 	cmpnei	r2,r2,3
    2694:	1000171e 	bne	r2,zero,26f4 <teken_menu+0x1c0>
		VGA_box(xLinks*4, xBoven*4 + 32, xRechts*4, xOnder*4 + 32, rood);
    2698:	d0a00417 	ldw	r2,-32752(gp)
    269c:	1085883a 	add	r2,r2,r2
    26a0:	1085883a 	add	r2,r2,r2
    26a4:	1009883a 	mov	r4,r2
    26a8:	d0a00617 	ldw	r2,-32744(gp)
    26ac:	10800204 	addi	r2,r2,8
    26b0:	1085883a 	add	r2,r2,r2
    26b4:	1085883a 	add	r2,r2,r2
    26b8:	100b883a 	mov	r5,r2
    26bc:	d0a00517 	ldw	r2,-32748(gp)
    26c0:	1085883a 	add	r2,r2,r2
    26c4:	1085883a 	add	r2,r2,r2
    26c8:	100d883a 	mov	r6,r2
    26cc:	d0a00717 	ldw	r2,-32740(gp)
    26d0:	10800204 	addi	r2,r2,8
    26d4:	1085883a 	add	r2,r2,r2
    26d8:	1085883a 	add	r2,r2,r2
    26dc:	1007883a 	mov	r3,r2
    26e0:	00be0014 	movui	r2,63488
    26e4:	d8800015 	stw	r2,0(sp)
    26e8:	180f883a 	mov	r7,r3
    26ec:	00029c80 	call	29c8 <VGA_box>
    26f0:	00001906 	br	2758 <teken_menu+0x224>
	}else if(ID == 4){
    26f4:	e0bfff17 	ldw	r2,-4(fp)
    26f8:	10800118 	cmpnei	r2,r2,4
    26fc:	1000161e 	bne	r2,zero,2758 <teken_menu+0x224>
		VGA_box(xLinks*4, xBoven*4 + 48, xRechts*4, xOnder*4 + 48, rood);
    2700:	d0a00417 	ldw	r2,-32752(gp)
    2704:	1085883a 	add	r2,r2,r2
    2708:	1085883a 	add	r2,r2,r2
    270c:	1009883a 	mov	r4,r2
    2710:	d0a00617 	ldw	r2,-32744(gp)
    2714:	10800304 	addi	r2,r2,12
    2718:	1085883a 	add	r2,r2,r2
    271c:	1085883a 	add	r2,r2,r2
    2720:	100b883a 	mov	r5,r2
    2724:	d0a00517 	ldw	r2,-32748(gp)
    2728:	1085883a 	add	r2,r2,r2
    272c:	1085883a 	add	r2,r2,r2
    2730:	100d883a 	mov	r6,r2
    2734:	d0a00717 	ldw	r2,-32740(gp)
    2738:	10800304 	addi	r2,r2,12
    273c:	1085883a 	add	r2,r2,r2
    2740:	1085883a 	add	r2,r2,r2
    2744:	1007883a 	mov	r3,r2
    2748:	00be0014 	movui	r2,63488
    274c:	d8800015 	stw	r2,0(sp)
    2750:	180f883a 	mov	r7,r3
    2754:	00029c80 	call	29c8 <VGA_box>
	}


}
    2758:	e037883a 	mov	sp,fp
    275c:	dfc00117 	ldw	ra,4(sp)
    2760:	df000017 	ldw	fp,0(sp)
    2764:	dec00204 	addi	sp,sp,8
    2768:	f800283a 	ret

0000276c <main>:
void * Messages[500];


/* The main function creates two task and starts multi-tasking */
int main(void)
{
    276c:	defffb04 	addi	sp,sp,-20
    2770:	dfc00415 	stw	ra,16(sp)
    2774:	df000315 	stw	fp,12(sp)
    2778:	df000304 	addi	fp,sp,12
	INT8U err;
	OSInit();
    277c:	0013e800 	call	13e80 <OSInit>
	int counter = 0x50500;				// 1/(50 MHz) x (0x960000) ~= 200 msec
    2780:	00800174 	movhi	r2,5
    2784:	10814004 	addi	r2,r2,1280
    2788:	e0bffe15 	stw	r2,-8(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
    278c:	d0a00c17 	ldw	r2,-32720(gp)
    2790:	10800204 	addi	r2,r2,8
    2794:	e0fffe17 	ldw	r3,-8(fp)
    2798:	18ffffcc 	andi	r3,r3,65535
    279c:	10c00015 	stw	r3,0(r2)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
    27a0:	d0a00c17 	ldw	r2,-32720(gp)
    27a4:	10800304 	addi	r2,r2,12
    27a8:	e0fffe17 	ldw	r3,-8(fp)
    27ac:	1806d43a 	srli	r3,r3,16
    27b0:	10c00015 	stw	r3,0(r2)

	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
    27b4:	d0a00c17 	ldw	r2,-32720(gp)
    27b8:	10800104 	addi	r2,r2,4
    27bc:	00c001c4 	movi	r3,7
    27c0:	10c00015 	stw	r3,0(r2)

	Flags = OSFlagCreate(C1_Flag + C2_Flag, &err);
    27c4:	e0bfff04 	addi	r2,fp,-4
    27c8:	01000304 	movi	r4,12
    27cc:	100b883a 	mov	r5,r2
    27d0:	0015a980 	call	15a98 <OSFlagCreate>
    27d4:	d0a80d15 	stw	r2,-24524(gp)
	Flags_Games = OSFlagCreate(Game_Flag + Singleplayer_Flag, &err);
    27d8:	e0bfff04 	addi	r2,fp,-4
    27dc:	01000884 	movi	r4,34
    27e0:	100b883a 	mov	r5,r2
    27e4:	0015a980 	call	15a98 <OSFlagCreate>
    27e8:	d0a80b15 	stw	r2,-24532(gp)
	Flags_Tutorial = OSFlagCreate(Tutorial_Flag, &err);
    27ec:	e0bfff04 	addi	r2,fp,-4
    27f0:	01001004 	movi	r4,64
    27f4:	100b883a 	mov	r5,r2
    27f8:	0015a980 	call	15a98 <OSFlagCreate>
    27fc:	d0a81015 	stw	r2,-24512(gp)
	Flags_Highscores = OSFlagCreate(Highscores_Flag, &err);
    2800:	e0bfff04 	addi	r2,fp,-4
    2804:	01002004 	movi	r4,128
    2808:	100b883a 	mov	r5,r2
    280c:	0015a980 	call	15a98 <OSFlagCreate>
    2810:	d0a81615 	stw	r2,-24488(gp)


	gameSem = OSSemCreate(0);
    2814:	0009883a 	mov	r4,zero
    2818:	00195780 	call	19578 <OSSemCreate>
    281c:	d0a81a15 	stw	r2,-24472(gp)
	controllerSem = OSSemCreate(0);
    2820:	0009883a 	mov	r4,zero
    2824:	00195780 	call	19578 <OSSemCreate>
    2828:	d0a80915 	stw	r2,-24540(gp)

	MailBox = OSMboxCreate((void *)0);
    282c:	0009883a 	mov	r4,zero
    2830:	00170440 	call	17044 <OSMboxCreate>
    2834:	d0a80e15 	stw	r2,-24520(gp)
	MailBox2 = OSMboxCreate((void *)0);
    2838:	0009883a 	mov	r4,zero
    283c:	00170440 	call	17044 <OSMboxCreate>
    2840:	d0a80c15 	stw	r2,-24528(gp)


	VGA_box (0, 0, 319, 239, 0);						//clear screen
    2844:	d8000015 	stw	zero,0(sp)
    2848:	0009883a 	mov	r4,zero
    284c:	000b883a 	mov	r5,zero
    2850:	01804fc4 	movi	r6,319
    2854:	01c03bc4 	movi	r7,239
    2858:	00029c80 	call	29c8 <VGA_box>
	VGA_box (15, 50, 20, 100, 0x0000ff);				// links
    285c:	00803fc4 	movi	r2,255
    2860:	d8800015 	stw	r2,0(sp)
    2864:	010003c4 	movi	r4,15
    2868:	01400c84 	movi	r5,50
    286c:	01800504 	movi	r6,20
    2870:	01c01904 	movi	r7,100
    2874:	00029c80 	call	29c8 <VGA_box>
	VGA_box (300, 50, 305, 100, 0x0000ff);				// rechts
    2878:	00803fc4 	movi	r2,255
    287c:	d8800015 	stw	r2,0(sp)
    2880:	01004b04 	movi	r4,300
    2884:	01400c84 	movi	r5,50
    2888:	01804c44 	movi	r6,305
    288c:	01c01904 	movi	r7,100
    2890:	00029c80 	call	29c8 <VGA_box>

	VGA_box (0, 0, 319, 3, groen);					// boven
    2894:	0081a5c4 	movi	r2,1687
    2898:	d8800015 	stw	r2,0(sp)
    289c:	0009883a 	mov	r4,zero
    28a0:	000b883a 	mov	r5,zero
    28a4:	01804fc4 	movi	r6,319
    28a8:	01c000c4 	movi	r7,3
    28ac:	00029c80 	call	29c8 <VGA_box>
	VGA_box (0, 236, 319, 239, groen);				// onder
    28b0:	0081a5c4 	movi	r2,1687
    28b4:	d8800015 	stw	r2,0(sp)
    28b8:	0009883a 	mov	r4,zero
    28bc:	01403b04 	movi	r5,236
    28c0:	01804fc4 	movi	r6,319
    28c4:	01c03bc4 	movi	r7,239
    28c8:	00029c80 	call	29c8 <VGA_box>


	OSTaskCreate(controllers,(void*) 1,&controller1_stk[TASK_STACKSIZE-1],controller1_PRIORITY);
    28cc:	01000034 	movhi	r4,0
    28d0:	2100a004 	addi	r4,r4,640
    28d4:	01400044 	movi	r5,1
    28d8:	018000f4 	movhi	r6,3
    28dc:	3188f204 	addi	r6,r6,9160
    28e0:	01c002c4 	movi	r7,11
    28e4:	001a5100 	call	1a510 <OSTaskCreate>
	OSTaskCreate(controllers,(void*) 2,&controller2_stk[TASK_STACKSIZE-1],controller2_PRIORITY);
    28e8:	01000034 	movhi	r4,0
    28ec:	2100a004 	addi	r4,r4,640
    28f0:	01400084 	movi	r5,2
    28f4:	018000f4 	movhi	r6,3
    28f8:	3198f404 	addi	r6,r6,25552
    28fc:	01c00304 	movi	r7,12
    2900:	001a5100 	call	1a510 <OSTaskCreate>
	OSTaskCreate(Game,(void*) 0, &Game_stk[TASK_STACKSIZE-1],Game_PRIORITY);
    2904:	01000034 	movhi	r4,0
    2908:	2101e304 	addi	r4,r4,1932
    290c:	000b883a 	mov	r5,zero
    2910:	01800134 	movhi	r6,4
    2914:	31a8f604 	addi	r6,r6,-23592
    2918:	01c00184 	movi	r7,6
    291c:	001a5100 	call	1a510 <OSTaskCreate>
	OSTaskCreate(Singleplayer,(void*) 0, &Singleplayer_stk[TASK_STACKSIZE-1],Singleplayer_PRIORITY);
    2920:	01000034 	movhi	r4,0
    2924:	21044c04 	addi	r4,r4,4400
    2928:	000b883a 	mov	r5,zero
    292c:	018000b4 	movhi	r6,2
    2930:	3199e104 	addi	r6,r6,26500
    2934:	01c001c4 	movi	r7,7
    2938:	001a5100 	call	1a510 <OSTaskCreate>
	OSTaskCreate(Tutorial,(void*) 0, &Tutorial_stk[TASK_STACKSIZE-1],Tutorial_PRIORITY);
    293c:	01000034 	movhi	r4,0
    2940:	21064004 	addi	r4,r4,6400
    2944:	000b883a 	mov	r5,zero
    2948:	018000f4 	movhi	r6,3
    294c:	3190f304 	addi	r6,r6,17356
    2950:	01c00204 	movi	r7,8
    2954:	001a5100 	call	1a510 <OSTaskCreate>
	OSTaskCreate(Highscores,(void*) 0, &Highscores_stk[TASK_STACKSIZE-1],Highscores_PRIORITY);
    2958:	01000034 	movhi	r4,0
    295c:	21073404 	addi	r4,r4,7376
    2960:	000b883a 	mov	r5,zero
    2964:	01800134 	movhi	r6,4
    2968:	31a0f504 	addi	r6,r6,-31788
    296c:	01c00344 	movi	r7,13
    2970:	001a5100 	call	1a510 <OSTaskCreate>


	OSTaskCreate(menu, (void*) 2, &menu_stk[TASK_STACKSIZE-1],menu_PRIORITY);
    2974:	01000034 	movhi	r4,0
    2978:	21077b04 	addi	r4,r4,7660
    297c:	01400084 	movi	r5,2
    2980:	018000f4 	movhi	r6,3
    2984:	3180f104 	addi	r6,r6,964
    2988:	01c00244 	movi	r7,9
    298c:	001a5100 	call	1a510 <OSTaskCreate>
	OSTaskCreate(selecteerMenu, (void*) 3, &menu_stk2[TASK_STACKSIZE-1], menu_PRIORITY +1);
    2990:	01000034 	movhi	r4,0
    2994:	2107b604 	addi	r4,r4,7896
    2998:	014000c4 	movi	r5,3
    299c:	01800134 	movhi	r6,4
    29a0:	3191fa04 	addi	r6,r6,18408
    29a4:	01c00284 	movi	r7,10
    29a8:	001a5100 	call	1a510 <OSTaskCreate>
	OSStart();
    29ac:	00141a40 	call	141a4 <OSStart>
	return 0;
    29b0:	0005883a 	mov	r2,zero
}
    29b4:	e037883a 	mov	sp,fp
    29b8:	dfc00117 	ldw	ra,4(sp)
    29bc:	df000017 	ldw	fp,0(sp)
    29c0:	dec00204 	addi	sp,sp,8
    29c4:	f800283a 	ret

000029c8 <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
    29c8:	defff604 	addi	sp,sp,-40
    29cc:	df000915 	stw	fp,36(sp)
    29d0:	df000904 	addi	fp,sp,36
    29d4:	e13ffb15 	stw	r4,-20(fp)
    29d8:	e17ffc15 	stw	r5,-16(fp)
    29dc:	e1bffd15 	stw	r6,-12(fp)
    29e0:	e1fffe15 	stw	r7,-8(fp)
    29e4:	e0800117 	ldw	r2,4(fp)
    29e8:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
    29ec:	00820034 	movhi	r2,2048
    29f0:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    29f4:	e0bffc17 	ldw	r2,-16(fp)
    29f8:	e0bff715 	stw	r2,-36(fp)
    29fc:	00001806 	br	2a60 <VGA_box+0x98>
	{
		col = x1;
    2a00:	e0bffb17 	ldw	r2,-20(fp)
    2a04:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
    2a08:	00000f06 	br	2a48 <VGA_box+0x80>
		{
			offset = (row << 9) + col;
    2a0c:	e0bff717 	ldw	r2,-36(fp)
    2a10:	1006927a 	slli	r3,r2,9
    2a14:	e0bff817 	ldw	r2,-32(fp)
    2a18:	1885883a 	add	r2,r3,r2
    2a1c:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
    2a20:	e0bffa17 	ldw	r2,-24(fp)
    2a24:	1085883a 	add	r2,r2,r2
    2a28:	1007883a 	mov	r3,r2
    2a2c:	e0bff917 	ldw	r2,-28(fp)
    2a30:	10c5883a 	add	r2,r2,r3
    2a34:	e0ffff0b 	ldhu	r3,-4(fp)
    2a38:	10c0000d 	sth	r3,0(r2)
			++col;
    2a3c:	e0bff817 	ldw	r2,-32(fp)
    2a40:	10800044 	addi	r2,r2,1
    2a44:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
    2a48:	e0bff817 	ldw	r2,-32(fp)
    2a4c:	e0fffd17 	ldw	r3,-12(fp)
    2a50:	18bfee0e 	bge	r3,r2,2a0c <__alt_mem_Flash_flash_data+0xf4002a0c>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    2a54:	e0bff717 	ldw	r2,-36(fp)
    2a58:	10800044 	addi	r2,r2,1
    2a5c:	e0bff715 	stw	r2,-36(fp)
    2a60:	e0bff717 	ldw	r2,-36(fp)
    2a64:	e0fffe17 	ldw	r3,-8(fp)
    2a68:	18bfe50e 	bge	r3,r2,2a00 <__alt_mem_Flash_flash_data+0xf4002a00>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
    2a6c:	e037883a 	mov	sp,fp
    2a70:	df000017 	ldw	fp,0(sp)
    2a74:	dec00104 	addi	sp,sp,4
    2a78:	f800283a 	ret

00002a7c <VGA_text>:

void VGA_text(int x, int y, char * text_ptr)
{
    2a7c:	defffa04 	addi	sp,sp,-24
    2a80:	df000515 	stw	fp,20(sp)
    2a84:	df000504 	addi	fp,sp,20
    2a88:	e13ffd15 	stw	r4,-12(fp)
    2a8c:	e17ffe15 	stw	r5,-8(fp)
    2a90:	e1bfff15 	stw	r6,-4(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer
    2a94:	00824034 	movhi	r2,2304
    2a98:	e0bffc15 	stw	r2,-16(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
    2a9c:	e0bffe17 	ldw	r2,-8(fp)
    2aa0:	100691fa 	slli	r3,r2,7
    2aa4:	e0bffd17 	ldw	r2,-12(fp)
    2aa8:	1885883a 	add	r2,r3,r2
    2aac:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
    2ab0:	00000c06 	br	2ae4 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
    2ab4:	e0bffb17 	ldw	r2,-20(fp)
    2ab8:	e0fffc17 	ldw	r3,-16(fp)
    2abc:	1885883a 	add	r2,r3,r2
    2ac0:	e0ffff17 	ldw	r3,-4(fp)
    2ac4:	18c00003 	ldbu	r3,0(r3)
    2ac8:	10c00005 	stb	r3,0(r2)
		++text_ptr;
    2acc:	e0bfff17 	ldw	r2,-4(fp)
    2ad0:	10800044 	addi	r2,r2,1
    2ad4:	e0bfff15 	stw	r2,-4(fp)
		++offset;
    2ad8:	e0bffb17 	ldw	r2,-20(fp)
    2adc:	10800044 	addi	r2,r2,1
    2ae0:	e0bffb15 	stw	r2,-20(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
    2ae4:	e0bfff17 	ldw	r2,-4(fp)
    2ae8:	10800003 	ldbu	r2,0(r2)
    2aec:	10803fcc 	andi	r2,r2,255
    2af0:	1080201c 	xori	r2,r2,128
    2af4:	10bfe004 	addi	r2,r2,-128
    2af8:	103fee1e 	bne	r2,zero,2ab4 <__alt_mem_Flash_flash_data+0xf4002ab4>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
    2afc:	e037883a 	mov	sp,fp
    2b00:	df000017 	ldw	fp,0(sp)
    2b04:	dec00104 	addi	sp,sp,4
    2b08:	f800283a 	ret

00002b0c <draw_middenlijn>:

void draw_middenlijn(){
    2b0c:	defffc04 	addi	sp,sp,-16
    2b10:	dfc00315 	stw	ra,12(sp)
    2b14:	df000215 	stw	fp,8(sp)
    2b18:	df000204 	addi	fp,sp,8
	int i = 0;
    2b1c:	e03fff15 	stw	zero,-4(fp)
	while(i < 240){
    2b20:	00000c06 	br	2b54 <draw_middenlijn+0x48>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
    2b24:	e0bfff17 	ldw	r2,-4(fp)
    2b28:	10c001c4 	addi	r3,r2,7
    2b2c:	0081a5c4 	movi	r2,1687
    2b30:	d8800015 	stw	r2,0(sp)
    2b34:	010027c4 	movi	r4,159
    2b38:	e17fff17 	ldw	r5,-4(fp)
    2b3c:	01802804 	movi	r6,160
    2b40:	180f883a 	mov	r7,r3
    2b44:	00029c80 	call	29c8 <VGA_box>
		i = i + 11;
    2b48:	e0bfff17 	ldw	r2,-4(fp)
    2b4c:	108002c4 	addi	r2,r2,11
    2b50:	e0bfff15 	stw	r2,-4(fp)
	}
}

void draw_middenlijn(){
	int i = 0;
	while(i < 240){
    2b54:	e0bfff17 	ldw	r2,-4(fp)
    2b58:	10803c10 	cmplti	r2,r2,240
    2b5c:	103ff11e 	bne	r2,zero,2b24 <__alt_mem_Flash_flash_data+0xf4002b24>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
		i = i + 11;
	}
}
    2b60:	e037883a 	mov	sp,fp
    2b64:	dfc00117 	ldw	ra,4(sp)
    2b68:	df000017 	ldw	fp,0(sp)
    2b6c:	dec00204 	addi	sp,sp,8
    2b70:	f800283a 	ret

00002b74 <del_middenlijn>:

void del_middenlijn(){
    2b74:	defffd04 	addi	sp,sp,-12
    2b78:	dfc00215 	stw	ra,8(sp)
    2b7c:	df000115 	stw	fp,4(sp)
    2b80:	df000104 	addi	fp,sp,4
	VGA_box(159, 4, 160, 235, 0);
    2b84:	d8000015 	stw	zero,0(sp)
    2b88:	010027c4 	movi	r4,159
    2b8c:	01400104 	movi	r5,4
    2b90:	01802804 	movi	r6,160
    2b94:	01c03ac4 	movi	r7,235
    2b98:	00029c80 	call	29c8 <VGA_box>
}
    2b9c:	e037883a 	mov	sp,fp
    2ba0:	dfc00117 	ldw	ra,4(sp)
    2ba4:	df000017 	ldw	fp,0(sp)
    2ba8:	dec00204 	addi	sp,sp,8
    2bac:	f800283a 	ret

00002bb0 <del_number>:

void del_number(int side){
    2bb0:	defffc04 	addi	sp,sp,-16
    2bb4:	dfc00315 	stw	ra,12(sp)
    2bb8:	df000215 	stw	fp,8(sp)
    2bbc:	df000204 	addi	fp,sp,8
    2bc0:	e13fff15 	stw	r4,-4(fp)
	if(side == 1){
    2bc4:	e0bfff17 	ldw	r2,-4(fp)
    2bc8:	10800058 	cmpnei	r2,r2,1
    2bcc:	1000061e 	bne	r2,zero,2be8 <del_number+0x38>
		VGA_box(120, 20, 140, 60, 0);
    2bd0:	d8000015 	stw	zero,0(sp)
    2bd4:	01001e04 	movi	r4,120
    2bd8:	01400504 	movi	r5,20
    2bdc:	01802304 	movi	r6,140
    2be0:	01c00f04 	movi	r7,60
    2be4:	00029c80 	call	29c8 <VGA_box>
	}
	if(side == 2){
    2be8:	e0bfff17 	ldw	r2,-4(fp)
    2bec:	10800098 	cmpnei	r2,r2,2
    2bf0:	1000061e 	bne	r2,zero,2c0c <del_number+0x5c>
		VGA_box(180, 20, 200, 60, 0);
    2bf4:	d8000015 	stw	zero,0(sp)
    2bf8:	01002d04 	movi	r4,180
    2bfc:	01400504 	movi	r5,20
    2c00:	01803204 	movi	r6,200
    2c04:	01c00f04 	movi	r7,60
    2c08:	00029c80 	call	29c8 <VGA_box>
	}
}
    2c0c:	e037883a 	mov	sp,fp
    2c10:	dfc00117 	ldw	ra,4(sp)
    2c14:	df000017 	ldw	fp,0(sp)
    2c18:	dec00204 	addi	sp,sp,8
    2c1c:	f800283a 	ret

00002c20 <deleteNummer>:

void deleteNummer(){
    2c20:	defffd04 	addi	sp,sp,-12
    2c24:	dfc00215 	stw	ra,8(sp)
    2c28:	df000115 	stw	fp,4(sp)
    2c2c:	df000104 	addi	fp,sp,4
	VGA_box(120, 20, 200, 60, 0);
    2c30:	d8000015 	stw	zero,0(sp)
    2c34:	01001e04 	movi	r4,120
    2c38:	01400504 	movi	r5,20
    2c3c:	01803204 	movi	r6,200
    2c40:	01c00f04 	movi	r7,60
    2c44:	00029c80 	call	29c8 <VGA_box>
}
    2c48:	e037883a 	mov	sp,fp
    2c4c:	dfc00117 	ldw	ra,4(sp)
    2c50:	df000017 	ldw	fp,0(sp)
    2c54:	dec00204 	addi	sp,sp,8
    2c58:	f800283a 	ret

00002c5c <draw_number>:

void draw_number(int nummer, int ID){
    2c5c:	defffa04 	addi	sp,sp,-24
    2c60:	dfc00515 	stw	ra,20(sp)
    2c64:	df000415 	stw	fp,16(sp)
    2c68:	df000404 	addi	fp,sp,16
    2c6c:	e13ffe15 	stw	r4,-8(fp)
    2c70:	e17fff15 	stw	r5,-4(fp)

	int X = checkIDScore(ID);
    2c74:	e13fff17 	ldw	r4,-4(fp)
    2c78:	00032d00 	call	32d0 <checkIDScore>
    2c7c:	e0bffd15 	stw	r2,-12(fp)

	if(nummer == 1){
    2c80:	e0bffe17 	ldw	r2,-8(fp)
    2c84:	10800058 	cmpnei	r2,r2,1
    2c88:	10000b1e 	bne	r2,zero,2cb8 <draw_number+0x5c>
		VGA_box(X + 9, 20, X+12, 60, wit);
    2c8c:	e0bffd17 	ldw	r2,-12(fp)
    2c90:	11000244 	addi	r4,r2,9
    2c94:	e0bffd17 	ldw	r2,-12(fp)
    2c98:	10c00304 	addi	r3,r2,12
    2c9c:	00bfffc4 	movi	r2,-1
    2ca0:	d8800015 	stw	r2,0(sp)
    2ca4:	01400504 	movi	r5,20
    2ca8:	180d883a 	mov	r6,r3
    2cac:	01c00f04 	movi	r7,60
    2cb0:	00029c80 	call	29c8 <VGA_box>
    2cb4:	00018106 	br	32bc <draw_number+0x660>
	}else if(nummer == 2){
    2cb8:	e0bffe17 	ldw	r2,-8(fp)
    2cbc:	10800098 	cmpnei	r2,r2,2
    2cc0:	10002f1e 	bne	r2,zero,2d80 <draw_number+0x124>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2cc4:	e0bffd17 	ldw	r2,-12(fp)
    2cc8:	10c00504 	addi	r3,r2,20
    2ccc:	00bfffc4 	movi	r2,-1
    2cd0:	d8800015 	stw	r2,0(sp)
    2cd4:	e13ffd17 	ldw	r4,-12(fp)
    2cd8:	01400504 	movi	r5,20
    2cdc:	180d883a 	mov	r6,r3
    2ce0:	01c00584 	movi	r7,22
    2ce4:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 38, wit);			//lijn naar beneden
    2ce8:	e0bffd17 	ldw	r2,-12(fp)
    2cec:	11000484 	addi	r4,r2,18
    2cf0:	e0bffd17 	ldw	r2,-12(fp)
    2cf4:	10c00504 	addi	r3,r2,20
    2cf8:	00bfffc4 	movi	r2,-1
    2cfc:	d8800015 	stw	r2,0(sp)
    2d00:	01400584 	movi	r5,22
    2d04:	180d883a 	mov	r6,r3
    2d08:	01c00984 	movi	r7,38
    2d0c:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    2d10:	e0bffd17 	ldw	r2,-12(fp)
    2d14:	10c00504 	addi	r3,r2,20
    2d18:	00bfffc4 	movi	r2,-1
    2d1c:	d8800015 	stw	r2,0(sp)
    2d20:	e13ffd17 	ldw	r4,-12(fp)
    2d24:	01400984 	movi	r5,38
    2d28:	180d883a 	mov	r6,r3
    2d2c:	01c00a04 	movi	r7,40
    2d30:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 40, X+ 2, 58, wit);					//lijn naar beneden
    2d34:	e0bffd17 	ldw	r2,-12(fp)
    2d38:	10c00084 	addi	r3,r2,2
    2d3c:	00bfffc4 	movi	r2,-1
    2d40:	d8800015 	stw	r2,0(sp)
    2d44:	e13ffd17 	ldw	r4,-12(fp)
    2d48:	01400a04 	movi	r5,40
    2d4c:	180d883a 	mov	r6,r3
    2d50:	01c00e84 	movi	r7,58
    2d54:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    2d58:	e0bffd17 	ldw	r2,-12(fp)
    2d5c:	10c00504 	addi	r3,r2,20
    2d60:	00bfffc4 	movi	r2,-1
    2d64:	d8800015 	stw	r2,0(sp)
    2d68:	e13ffd17 	ldw	r4,-12(fp)
    2d6c:	01400e84 	movi	r5,58
    2d70:	180d883a 	mov	r6,r3
    2d74:	01c00f04 	movi	r7,60
    2d78:	00029c80 	call	29c8 <VGA_box>
    2d7c:	00014f06 	br	32bc <draw_number+0x660>
	}else if(nummer == 3){
    2d80:	e0bffe17 	ldw	r2,-8(fp)
    2d84:	108000d8 	cmpnei	r2,r2,3
    2d88:	1000261e 	bne	r2,zero,2e24 <draw_number+0x1c8>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2d8c:	e0bffd17 	ldw	r2,-12(fp)
    2d90:	10c00504 	addi	r3,r2,20
    2d94:	00bfffc4 	movi	r2,-1
    2d98:	d8800015 	stw	r2,0(sp)
    2d9c:	e13ffd17 	ldw	r4,-12(fp)
    2da0:	01400504 	movi	r5,20
    2da4:	180d883a 	mov	r6,r3
    2da8:	01c00584 	movi	r7,22
    2dac:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 60, wit);			//rechter lijn
    2db0:	e0bffd17 	ldw	r2,-12(fp)
    2db4:	11000484 	addi	r4,r2,18
    2db8:	e0bffd17 	ldw	r2,-12(fp)
    2dbc:	10c00504 	addi	r3,r2,20
    2dc0:	00bfffc4 	movi	r2,-1
    2dc4:	d8800015 	stw	r2,0(sp)
    2dc8:	01400584 	movi	r5,22
    2dcc:	180d883a 	mov	r6,r3
    2dd0:	01c00f04 	movi	r7,60
    2dd4:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 39, X+ 20, 41, wit);					//midden lijn
    2dd8:	e0bffd17 	ldw	r2,-12(fp)
    2ddc:	10c00504 	addi	r3,r2,20
    2de0:	00bfffc4 	movi	r2,-1
    2de4:	d8800015 	stw	r2,0(sp)
    2de8:	e13ffd17 	ldw	r4,-12(fp)
    2dec:	014009c4 	movi	r5,39
    2df0:	180d883a 	mov	r6,r3
    2df4:	01c00a44 	movi	r7,41
    2df8:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2dfc:	e0bffd17 	ldw	r2,-12(fp)
    2e00:	10c00504 	addi	r3,r2,20
    2e04:	00bfffc4 	movi	r2,-1
    2e08:	d8800015 	stw	r2,0(sp)
    2e0c:	e13ffd17 	ldw	r4,-12(fp)
    2e10:	01400e84 	movi	r5,58
    2e14:	180d883a 	mov	r6,r3
    2e18:	01c00f04 	movi	r7,60
    2e1c:	00029c80 	call	29c8 <VGA_box>
    2e20:	00012606 	br	32bc <draw_number+0x660>
	}else if(nummer == 4){
    2e24:	e0bffe17 	ldw	r2,-8(fp)
    2e28:	10800118 	cmpnei	r2,r2,4
    2e2c:	10001d1e 	bne	r2,zero,2ea4 <draw_number+0x248>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    2e30:	e0bffd17 	ldw	r2,-12(fp)
    2e34:	10c00084 	addi	r3,r2,2
    2e38:	00bfffc4 	movi	r2,-1
    2e3c:	d8800015 	stw	r2,0(sp)
    2e40:	e13ffd17 	ldw	r4,-12(fp)
    2e44:	01400504 	movi	r5,20
    2e48:	180d883a 	mov	r6,r3
    2e4c:	01c00a04 	movi	r7,40
    2e50:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    2e54:	e0bffd17 	ldw	r2,-12(fp)
    2e58:	10c00504 	addi	r3,r2,20
    2e5c:	00bfffc4 	movi	r2,-1
    2e60:	d8800015 	stw	r2,0(sp)
    2e64:	e13ffd17 	ldw	r4,-12(fp)
    2e68:	014009c4 	movi	r5,39
    2e6c:	180d883a 	mov	r6,r3
    2e70:	01c00a44 	movi	r7,41
    2e74:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    2e78:	e0bffd17 	ldw	r2,-12(fp)
    2e7c:	11000484 	addi	r4,r2,18
    2e80:	e0bffd17 	ldw	r2,-12(fp)
    2e84:	10c00504 	addi	r3,r2,20
    2e88:	00bfffc4 	movi	r2,-1
    2e8c:	d8800015 	stw	r2,0(sp)
    2e90:	01400504 	movi	r5,20
    2e94:	180d883a 	mov	r6,r3
    2e98:	01c00f04 	movi	r7,60
    2e9c:	00029c80 	call	29c8 <VGA_box>
    2ea0:	00010606 	br	32bc <draw_number+0x660>
	}else if(nummer == 5){
    2ea4:	e0bffe17 	ldw	r2,-8(fp)
    2ea8:	10800158 	cmpnei	r2,r2,5
    2eac:	10002f1e 	bne	r2,zero,2f6c <draw_number+0x310>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2eb0:	e0bffd17 	ldw	r2,-12(fp)
    2eb4:	10c00504 	addi	r3,r2,20
    2eb8:	00bfffc4 	movi	r2,-1
    2ebc:	d8800015 	stw	r2,0(sp)
    2ec0:	e13ffd17 	ldw	r4,-12(fp)
    2ec4:	01400504 	movi	r5,20
    2ec8:	180d883a 	mov	r6,r3
    2ecc:	01c00584 	movi	r7,22
    2ed0:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 22, X+ 2, 38, wit);					//lijn naar beneden
    2ed4:	e0bffd17 	ldw	r2,-12(fp)
    2ed8:	10c00084 	addi	r3,r2,2
    2edc:	00bfffc4 	movi	r2,-1
    2ee0:	d8800015 	stw	r2,0(sp)
    2ee4:	e13ffd17 	ldw	r4,-12(fp)
    2ee8:	01400584 	movi	r5,22
    2eec:	180d883a 	mov	r6,r3
    2ef0:	01c00984 	movi	r7,38
    2ef4:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    2ef8:	e0bffd17 	ldw	r2,-12(fp)
    2efc:	10c00504 	addi	r3,r2,20
    2f00:	00bfffc4 	movi	r2,-1
    2f04:	d8800015 	stw	r2,0(sp)
    2f08:	e13ffd17 	ldw	r4,-12(fp)
    2f0c:	01400984 	movi	r5,38
    2f10:	180d883a 	mov	r6,r3
    2f14:	01c00a04 	movi	r7,40
    2f18:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn naar beneden
    2f1c:	e0bffd17 	ldw	r2,-12(fp)
    2f20:	11000484 	addi	r4,r2,18
    2f24:	e0bffd17 	ldw	r2,-12(fp)
    2f28:	10c00504 	addi	r3,r2,20
    2f2c:	00bfffc4 	movi	r2,-1
    2f30:	d8800015 	stw	r2,0(sp)
    2f34:	01400a04 	movi	r5,40
    2f38:	180d883a 	mov	r6,r3
    2f3c:	01c00e84 	movi	r7,58
    2f40:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    2f44:	e0bffd17 	ldw	r2,-12(fp)
    2f48:	10c00504 	addi	r3,r2,20
    2f4c:	00bfffc4 	movi	r2,-1
    2f50:	d8800015 	stw	r2,0(sp)
    2f54:	e13ffd17 	ldw	r4,-12(fp)
    2f58:	01400e84 	movi	r5,58
    2f5c:	180d883a 	mov	r6,r3
    2f60:	01c00f04 	movi	r7,60
    2f64:	00029c80 	call	29c8 <VGA_box>
    2f68:	0000d406 	br	32bc <draw_number+0x660>
	}else if(nummer == 6){
    2f6c:	e0bffe17 	ldw	r2,-8(fp)
    2f70:	10800198 	cmpnei	r2,r2,6
    2f74:	10002f1e 	bne	r2,zero,3034 <draw_number+0x3d8>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    2f78:	e0bffd17 	ldw	r2,-12(fp)
    2f7c:	10c00084 	addi	r3,r2,2
    2f80:	00bfffc4 	movi	r2,-1
    2f84:	d8800015 	stw	r2,0(sp)
    2f88:	e13ffd17 	ldw	r4,-12(fp)
    2f8c:	01400504 	movi	r5,20
    2f90:	180d883a 	mov	r6,r3
    2f94:	01c00f04 	movi	r7,60
    2f98:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2f9c:	e0bffd17 	ldw	r2,-12(fp)
    2fa0:	10c00504 	addi	r3,r2,20
    2fa4:	00bfffc4 	movi	r2,-1
    2fa8:	d8800015 	stw	r2,0(sp)
    2fac:	e13ffd17 	ldw	r4,-12(fp)
    2fb0:	01400504 	movi	r5,20
    2fb4:	180d883a 	mov	r6,r3
    2fb8:	01c00584 	movi	r7,22
    2fbc:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2fc0:	e0bffd17 	ldw	r2,-12(fp)
    2fc4:	10c00504 	addi	r3,r2,20
    2fc8:	00bfffc4 	movi	r2,-1
    2fcc:	d8800015 	stw	r2,0(sp)
    2fd0:	e13ffd17 	ldw	r4,-12(fp)
    2fd4:	01400e84 	movi	r5,58
    2fd8:	180d883a 	mov	r6,r3
    2fdc:	01c00f04 	movi	r7,60
    2fe0:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn rechts
    2fe4:	e0bffd17 	ldw	r2,-12(fp)
    2fe8:	11000484 	addi	r4,r2,18
    2fec:	e0bffd17 	ldw	r2,-12(fp)
    2ff0:	10c00504 	addi	r3,r2,20
    2ff4:	00bfffc4 	movi	r2,-1
    2ff8:	d8800015 	stw	r2,0(sp)
    2ffc:	01400a04 	movi	r5,40
    3000:	180d883a 	mov	r6,r3
    3004:	01c00e84 	movi	r7,58
    3008:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    300c:	e0bffd17 	ldw	r2,-12(fp)
    3010:	10c00504 	addi	r3,r2,20
    3014:	00bfffc4 	movi	r2,-1
    3018:	d8800015 	stw	r2,0(sp)
    301c:	e13ffd17 	ldw	r4,-12(fp)
    3020:	014009c4 	movi	r5,39
    3024:	180d883a 	mov	r6,r3
    3028:	01c00a44 	movi	r7,41
    302c:	00029c80 	call	29c8 <VGA_box>
    3030:	0000a206 	br	32bc <draw_number+0x660>
	}else if(nummer == 7){
    3034:	e0bffe17 	ldw	r2,-8(fp)
    3038:	108001d8 	cmpnei	r2,r2,7
    303c:	1000141e 	bne	r2,zero,3090 <draw_number+0x434>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    3040:	e0bffd17 	ldw	r2,-12(fp)
    3044:	11000484 	addi	r4,r2,18
    3048:	e0bffd17 	ldw	r2,-12(fp)
    304c:	10c00504 	addi	r3,r2,20
    3050:	00bfffc4 	movi	r2,-1
    3054:	d8800015 	stw	r2,0(sp)
    3058:	01400504 	movi	r5,20
    305c:	180d883a 	mov	r6,r3
    3060:	01c00f04 	movi	r7,60
    3064:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    3068:	e0bffd17 	ldw	r2,-12(fp)
    306c:	10c00504 	addi	r3,r2,20
    3070:	00bfffc4 	movi	r2,-1
    3074:	d8800015 	stw	r2,0(sp)
    3078:	e13ffd17 	ldw	r4,-12(fp)
    307c:	01400504 	movi	r5,20
    3080:	180d883a 	mov	r6,r3
    3084:	01c00584 	movi	r7,22
    3088:	00029c80 	call	29c8 <VGA_box>
    308c:	00008b06 	br	32bc <draw_number+0x660>
	}else if(nummer == 8){
    3090:	e0bffe17 	ldw	r2,-8(fp)
    3094:	10800218 	cmpnei	r2,r2,8
    3098:	10002f1e 	bne	r2,zero,3158 <draw_number+0x4fc>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    309c:	e0bffd17 	ldw	r2,-12(fp)
    30a0:	11000484 	addi	r4,r2,18
    30a4:	e0bffd17 	ldw	r2,-12(fp)
    30a8:	10c00504 	addi	r3,r2,20
    30ac:	00bfffc4 	movi	r2,-1
    30b0:	d8800015 	stw	r2,0(sp)
    30b4:	01400504 	movi	r5,20
    30b8:	180d883a 	mov	r6,r3
    30bc:	01c00f04 	movi	r7,60
    30c0:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    30c4:	e0bffd17 	ldw	r2,-12(fp)
    30c8:	10c00084 	addi	r3,r2,2
    30cc:	00bfffc4 	movi	r2,-1
    30d0:	d8800015 	stw	r2,0(sp)
    30d4:	e13ffd17 	ldw	r4,-12(fp)
    30d8:	01400504 	movi	r5,20
    30dc:	180d883a 	mov	r6,r3
    30e0:	01c00f04 	movi	r7,60
    30e4:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    30e8:	e0bffd17 	ldw	r2,-12(fp)
    30ec:	10c00504 	addi	r3,r2,20
    30f0:	00bfffc4 	movi	r2,-1
    30f4:	d8800015 	stw	r2,0(sp)
    30f8:	e13ffd17 	ldw	r4,-12(fp)
    30fc:	01400504 	movi	r5,20
    3100:	180d883a 	mov	r6,r3
    3104:	01c00584 	movi	r7,22
    3108:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    310c:	e0bffd17 	ldw	r2,-12(fp)
    3110:	10c00504 	addi	r3,r2,20
    3114:	00bfffc4 	movi	r2,-1
    3118:	d8800015 	stw	r2,0(sp)
    311c:	e13ffd17 	ldw	r4,-12(fp)
    3120:	014009c4 	movi	r5,39
    3124:	180d883a 	mov	r6,r3
    3128:	01c00a44 	movi	r7,41
    312c:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    3130:	e0bffd17 	ldw	r2,-12(fp)
    3134:	10c00504 	addi	r3,r2,20
    3138:	00bfffc4 	movi	r2,-1
    313c:	d8800015 	stw	r2,0(sp)
    3140:	e13ffd17 	ldw	r4,-12(fp)
    3144:	01400e84 	movi	r5,58
    3148:	180d883a 	mov	r6,r3
    314c:	01c00f04 	movi	r7,60
    3150:	00029c80 	call	29c8 <VGA_box>
    3154:	00005906 	br	32bc <draw_number+0x660>
	}else if(nummer == 9){
    3158:	e0bffe17 	ldw	r2,-8(fp)
    315c:	10800258 	cmpnei	r2,r2,9
    3160:	10002f1e 	bne	r2,zero,3220 <draw_number+0x5c4>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    3164:	e0bffd17 	ldw	r2,-12(fp)
    3168:	11000484 	addi	r4,r2,18
    316c:	e0bffd17 	ldw	r2,-12(fp)
    3170:	10c00504 	addi	r3,r2,20
    3174:	00bfffc4 	movi	r2,-1
    3178:	d8800015 	stw	r2,0(sp)
    317c:	01400504 	movi	r5,20
    3180:	180d883a 	mov	r6,r3
    3184:	01c00f04 	movi	r7,60
    3188:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    318c:	e0bffd17 	ldw	r2,-12(fp)
    3190:	10c00084 	addi	r3,r2,2
    3194:	00bfffc4 	movi	r2,-1
    3198:	d8800015 	stw	r2,0(sp)
    319c:	e13ffd17 	ldw	r4,-12(fp)
    31a0:	01400504 	movi	r5,20
    31a4:	180d883a 	mov	r6,r3
    31a8:	01c00a04 	movi	r7,40
    31ac:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    31b0:	e0bffd17 	ldw	r2,-12(fp)
    31b4:	10c00504 	addi	r3,r2,20
    31b8:	00bfffc4 	movi	r2,-1
    31bc:	d8800015 	stw	r2,0(sp)
    31c0:	e13ffd17 	ldw	r4,-12(fp)
    31c4:	01400504 	movi	r5,20
    31c8:	180d883a 	mov	r6,r3
    31cc:	01c00584 	movi	r7,22
    31d0:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    31d4:	e0bffd17 	ldw	r2,-12(fp)
    31d8:	10c00504 	addi	r3,r2,20
    31dc:	00bfffc4 	movi	r2,-1
    31e0:	d8800015 	stw	r2,0(sp)
    31e4:	e13ffd17 	ldw	r4,-12(fp)
    31e8:	014009c4 	movi	r5,39
    31ec:	180d883a 	mov	r6,r3
    31f0:	01c00a44 	movi	r7,41
    31f4:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    31f8:	e0bffd17 	ldw	r2,-12(fp)
    31fc:	10c00504 	addi	r3,r2,20
    3200:	00bfffc4 	movi	r2,-1
    3204:	d8800015 	stw	r2,0(sp)
    3208:	e13ffd17 	ldw	r4,-12(fp)
    320c:	01400e84 	movi	r5,58
    3210:	180d883a 	mov	r6,r3
    3214:	01c00f04 	movi	r7,60
    3218:	00029c80 	call	29c8 <VGA_box>
    321c:	00002706 	br	32bc <draw_number+0x660>
	}else if(nummer == 0){
    3220:	e0bffe17 	ldw	r2,-8(fp)
    3224:	1000251e 	bne	r2,zero,32bc <draw_number+0x660>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    3228:	e0bffd17 	ldw	r2,-12(fp)
    322c:	11000484 	addi	r4,r2,18
    3230:	e0bffd17 	ldw	r2,-12(fp)
    3234:	10c00504 	addi	r3,r2,20
    3238:	00bfffc4 	movi	r2,-1
    323c:	d8800015 	stw	r2,0(sp)
    3240:	01400504 	movi	r5,20
    3244:	180d883a 	mov	r6,r3
    3248:	01c00f04 	movi	r7,60
    324c:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    3250:	e0bffd17 	ldw	r2,-12(fp)
    3254:	10c00084 	addi	r3,r2,2
    3258:	00bfffc4 	movi	r2,-1
    325c:	d8800015 	stw	r2,0(sp)
    3260:	e13ffd17 	ldw	r4,-12(fp)
    3264:	01400504 	movi	r5,20
    3268:	180d883a 	mov	r6,r3
    326c:	01c00f04 	movi	r7,60
    3270:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    3274:	e0bffd17 	ldw	r2,-12(fp)
    3278:	10c00504 	addi	r3,r2,20
    327c:	00bfffc4 	movi	r2,-1
    3280:	d8800015 	stw	r2,0(sp)
    3284:	e13ffd17 	ldw	r4,-12(fp)
    3288:	01400504 	movi	r5,20
    328c:	180d883a 	mov	r6,r3
    3290:	01c00584 	movi	r7,22
    3294:	00029c80 	call	29c8 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    3298:	e0bffd17 	ldw	r2,-12(fp)
    329c:	10c00504 	addi	r3,r2,20
    32a0:	00bfffc4 	movi	r2,-1
    32a4:	d8800015 	stw	r2,0(sp)
    32a8:	e13ffd17 	ldw	r4,-12(fp)
    32ac:	01400e84 	movi	r5,58
    32b0:	180d883a 	mov	r6,r3
    32b4:	01c00f04 	movi	r7,60
    32b8:	00029c80 	call	29c8 <VGA_box>
	}
}
    32bc:	e037883a 	mov	sp,fp
    32c0:	dfc00117 	ldw	ra,4(sp)
    32c4:	df000017 	ldw	fp,0(sp)
    32c8:	dec00204 	addi	sp,sp,8
    32cc:	f800283a 	ret

000032d0 <checkIDScore>:

int checkIDScore(int ID){
    32d0:	defffe04 	addi	sp,sp,-8
    32d4:	df000115 	stw	fp,4(sp)
    32d8:	df000104 	addi	fp,sp,4
    32dc:	e13fff15 	stw	r4,-4(fp)
	if(ID == 1){
    32e0:	e0bfff17 	ldw	r2,-4(fp)
    32e4:	10800058 	cmpnei	r2,r2,1
    32e8:	1000021e 	bne	r2,zero,32f4 <checkIDScore+0x24>
		return 120;
    32ec:	00801e04 	movi	r2,120
    32f0:	00000b06 	br	3320 <checkIDScore+0x50>
	}else if(ID == 2){
    32f4:	e0bfff17 	ldw	r2,-4(fp)
    32f8:	10800098 	cmpnei	r2,r2,2
    32fc:	1000021e 	bne	r2,zero,3308 <checkIDScore+0x38>
		return 150;
    3300:	00802584 	movi	r2,150
    3304:	00000606 	br	3320 <checkIDScore+0x50>
	}else if(ID == 3){
    3308:	e0bfff17 	ldw	r2,-4(fp)
    330c:	108000d8 	cmpnei	r2,r2,3
    3310:	1000021e 	bne	r2,zero,331c <checkIDScore+0x4c>
		return 180;
    3314:	00802d04 	movi	r2,180
    3318:	00000106 	br	3320 <checkIDScore+0x50>
	}
	
	return 0;
    331c:	0005883a 	mov	r2,zero
}
    3320:	e037883a 	mov	sp,fp
    3324:	df000017 	ldw	fp,0(sp)
    3328:	dec00104 	addi	sp,sp,4
    332c:	f800283a 	ret

00003330 <_printf_r>:
    3330:	defffd04 	addi	sp,sp,-12
    3334:	dfc00015 	stw	ra,0(sp)
    3338:	d9800115 	stw	r6,4(sp)
    333c:	d9c00215 	stw	r7,8(sp)
    3340:	280d883a 	mov	r6,r5
    3344:	21400217 	ldw	r5,8(r4)
    3348:	d9c00104 	addi	r7,sp,4
    334c:	00055400 	call	5540 <___vfprintf_internal_r>
    3350:	dfc00017 	ldw	ra,0(sp)
    3354:	dec00304 	addi	sp,sp,12
    3358:	f800283a 	ret

0000335c <printf>:
    335c:	defffc04 	addi	sp,sp,-16
    3360:	dfc00015 	stw	ra,0(sp)
    3364:	d9400115 	stw	r5,4(sp)
    3368:	d9800215 	stw	r6,8(sp)
    336c:	d9c00315 	stw	r7,12(sp)
    3370:	008000b4 	movhi	r2,2
    3374:	10899a04 	addi	r2,r2,9832
    3378:	10800017 	ldw	r2,0(r2)
    337c:	200b883a 	mov	r5,r4
    3380:	d9800104 	addi	r6,sp,4
    3384:	11000217 	ldw	r4,8(r2)
    3388:	00074900 	call	7490 <__vfprintf_internal>
    338c:	dfc00017 	ldw	ra,0(sp)
    3390:	dec00404 	addi	sp,sp,16
    3394:	f800283a 	ret

00003398 <_puts_r>:
    3398:	defff604 	addi	sp,sp,-40
    339c:	dc000715 	stw	r16,28(sp)
    33a0:	2021883a 	mov	r16,r4
    33a4:	2809883a 	mov	r4,r5
    33a8:	dc400815 	stw	r17,32(sp)
    33ac:	dfc00915 	stw	ra,36(sp)
    33b0:	2823883a 	mov	r17,r5
    33b4:	00035180 	call	3518 <strlen>
    33b8:	81400217 	ldw	r5,8(r16)
    33bc:	11000044 	addi	r4,r2,1
    33c0:	d8800115 	stw	r2,4(sp)
    33c4:	008000b4 	movhi	r2,2
    33c8:	2980030b 	ldhu	r6,12(r5)
    33cc:	10807f04 	addi	r2,r2,508
    33d0:	d8800215 	stw	r2,8(sp)
    33d4:	00800044 	movi	r2,1
    33d8:	d8800315 	stw	r2,12(sp)
    33dc:	00800084 	movi	r2,2
    33e0:	d8800515 	stw	r2,20(sp)
    33e4:	dc400015 	stw	r17,0(sp)
    33e8:	d9000615 	stw	r4,24(sp)
    33ec:	dec00415 	stw	sp,16(sp)
    33f0:	3088000c 	andi	r2,r6,8192
    33f4:	1000061e 	bne	r2,zero,3410 <_puts_r+0x78>
    33f8:	29001917 	ldw	r4,100(r5)
    33fc:	00b7ffc4 	movi	r2,-8193
    3400:	31880014 	ori	r6,r6,8192
    3404:	2084703a 	and	r2,r4,r2
    3408:	2980030d 	sth	r6,12(r5)
    340c:	28801915 	stw	r2,100(r5)
    3410:	8009883a 	mov	r4,r16
    3414:	d9800404 	addi	r6,sp,16
    3418:	0009a340 	call	9a34 <__sfvwrite_r>
    341c:	1000061e 	bne	r2,zero,3438 <_puts_r+0xa0>
    3420:	00800284 	movi	r2,10
    3424:	dfc00917 	ldw	ra,36(sp)
    3428:	dc400817 	ldw	r17,32(sp)
    342c:	dc000717 	ldw	r16,28(sp)
    3430:	dec00a04 	addi	sp,sp,40
    3434:	f800283a 	ret
    3438:	00bfffc4 	movi	r2,-1
    343c:	003ff906 	br	3424 <__alt_mem_Flash_flash_data+0xf4003424>

00003440 <puts>:
    3440:	008000b4 	movhi	r2,2
    3444:	10899a04 	addi	r2,r2,9832
    3448:	200b883a 	mov	r5,r4
    344c:	11000017 	ldw	r4,0(r2)
    3450:	00033981 	jmpi	3398 <_puts_r>

00003454 <_sprintf_r>:
    3454:	deffe404 	addi	sp,sp,-112
    3458:	2807883a 	mov	r3,r5
    345c:	dfc01a15 	stw	ra,104(sp)
    3460:	d9c01b15 	stw	r7,108(sp)
    3464:	00a00034 	movhi	r2,32768
    3468:	10bfffc4 	addi	r2,r2,-1
    346c:	02008204 	movi	r8,520
    3470:	d8800215 	stw	r2,8(sp)
    3474:	d8800515 	stw	r2,20(sp)
    3478:	d80b883a 	mov	r5,sp
    347c:	d9c01b04 	addi	r7,sp,108
    3480:	00bfffc4 	movi	r2,-1
    3484:	d8c00015 	stw	r3,0(sp)
    3488:	d8c00415 	stw	r3,16(sp)
    348c:	da00030d 	sth	r8,12(sp)
    3490:	d880038d 	sth	r2,14(sp)
    3494:	00035b00 	call	35b0 <___svfprintf_internal_r>
    3498:	d8c00017 	ldw	r3,0(sp)
    349c:	18000005 	stb	zero,0(r3)
    34a0:	dfc01a17 	ldw	ra,104(sp)
    34a4:	dec01c04 	addi	sp,sp,112
    34a8:	f800283a 	ret

000034ac <sprintf>:
    34ac:	deffe304 	addi	sp,sp,-116
    34b0:	2007883a 	mov	r3,r4
    34b4:	dfc01a15 	stw	ra,104(sp)
    34b8:	d9801b15 	stw	r6,108(sp)
    34bc:	d9c01c15 	stw	r7,112(sp)
    34c0:	010000b4 	movhi	r4,2
    34c4:	21099a04 	addi	r4,r4,9832
    34c8:	21000017 	ldw	r4,0(r4)
    34cc:	00a00034 	movhi	r2,32768
    34d0:	10bfffc4 	addi	r2,r2,-1
    34d4:	280d883a 	mov	r6,r5
    34d8:	02008204 	movi	r8,520
    34dc:	d8800215 	stw	r2,8(sp)
    34e0:	d8800515 	stw	r2,20(sp)
    34e4:	d80b883a 	mov	r5,sp
    34e8:	d9c01b04 	addi	r7,sp,108
    34ec:	00bfffc4 	movi	r2,-1
    34f0:	d8c00015 	stw	r3,0(sp)
    34f4:	d8c00415 	stw	r3,16(sp)
    34f8:	da00030d 	sth	r8,12(sp)
    34fc:	d880038d 	sth	r2,14(sp)
    3500:	00035b00 	call	35b0 <___svfprintf_internal_r>
    3504:	d8c00017 	ldw	r3,0(sp)
    3508:	18000005 	stb	zero,0(r3)
    350c:	dfc01a17 	ldw	ra,104(sp)
    3510:	dec01d04 	addi	sp,sp,116
    3514:	f800283a 	ret

00003518 <strlen>:
    3518:	208000cc 	andi	r2,r4,3
    351c:	10002026 	beq	r2,zero,35a0 <strlen+0x88>
    3520:	20800007 	ldb	r2,0(r4)
    3524:	10002026 	beq	r2,zero,35a8 <strlen+0x90>
    3528:	2005883a 	mov	r2,r4
    352c:	00000206 	br	3538 <strlen+0x20>
    3530:	10c00007 	ldb	r3,0(r2)
    3534:	18001826 	beq	r3,zero,3598 <strlen+0x80>
    3538:	10800044 	addi	r2,r2,1
    353c:	10c000cc 	andi	r3,r2,3
    3540:	183ffb1e 	bne	r3,zero,3530 <__alt_mem_Flash_flash_data+0xf4003530>
    3544:	10c00017 	ldw	r3,0(r2)
    3548:	01ffbff4 	movhi	r7,65279
    354c:	39ffbfc4 	addi	r7,r7,-257
    3550:	00ca303a 	nor	r5,zero,r3
    3554:	01a02074 	movhi	r6,32897
    3558:	19c7883a 	add	r3,r3,r7
    355c:	31a02004 	addi	r6,r6,-32640
    3560:	1946703a 	and	r3,r3,r5
    3564:	1986703a 	and	r3,r3,r6
    3568:	1800091e 	bne	r3,zero,3590 <strlen+0x78>
    356c:	10800104 	addi	r2,r2,4
    3570:	10c00017 	ldw	r3,0(r2)
    3574:	19cb883a 	add	r5,r3,r7
    3578:	00c6303a 	nor	r3,zero,r3
    357c:	28c6703a 	and	r3,r5,r3
    3580:	1986703a 	and	r3,r3,r6
    3584:	183ff926 	beq	r3,zero,356c <__alt_mem_Flash_flash_data+0xf400356c>
    3588:	00000106 	br	3590 <strlen+0x78>
    358c:	10800044 	addi	r2,r2,1
    3590:	10c00007 	ldb	r3,0(r2)
    3594:	183ffd1e 	bne	r3,zero,358c <__alt_mem_Flash_flash_data+0xf400358c>
    3598:	1105c83a 	sub	r2,r2,r4
    359c:	f800283a 	ret
    35a0:	2005883a 	mov	r2,r4
    35a4:	003fe706 	br	3544 <__alt_mem_Flash_flash_data+0xf4003544>
    35a8:	0005883a 	mov	r2,zero
    35ac:	f800283a 	ret

000035b0 <___svfprintf_internal_r>:
    35b0:	deffb504 	addi	sp,sp,-300
    35b4:	dfc04a15 	stw	ra,296(sp)
    35b8:	ddc04815 	stw	r23,288(sp)
    35bc:	d9002f15 	stw	r4,188(sp)
    35c0:	282f883a 	mov	r23,r5
    35c4:	d9802915 	stw	r6,164(sp)
    35c8:	d9c02d15 	stw	r7,180(sp)
    35cc:	df004915 	stw	fp,292(sp)
    35d0:	dd804715 	stw	r22,284(sp)
    35d4:	dd404615 	stw	r21,280(sp)
    35d8:	dd004515 	stw	r20,276(sp)
    35dc:	dcc04415 	stw	r19,272(sp)
    35e0:	dc804315 	stw	r18,268(sp)
    35e4:	dc404215 	stw	r17,264(sp)
    35e8:	dc004115 	stw	r16,260(sp)
    35ec:	000a1280 	call	a128 <_localeconv_r>
    35f0:	10800017 	ldw	r2,0(r2)
    35f4:	1009883a 	mov	r4,r2
    35f8:	d8803515 	stw	r2,212(sp)
    35fc:	00035180 	call	3518 <strlen>
    3600:	d8803915 	stw	r2,228(sp)
    3604:	b880030b 	ldhu	r2,12(r23)
    3608:	1080200c 	andi	r2,r2,128
    360c:	10000226 	beq	r2,zero,3618 <___svfprintf_internal_r+0x68>
    3610:	b8800417 	ldw	r2,16(r23)
    3614:	10065f26 	beq	r2,zero,4f94 <___svfprintf_internal_r+0x19e4>
    3618:	db001dc4 	addi	r12,sp,119
    361c:	dd801e04 	addi	r22,sp,120
    3620:	d8800404 	addi	r2,sp,16
    3624:	050000b4 	movhi	r20,2
    3628:	b317c83a 	sub	r11,r22,r12
    362c:	a5009084 	addi	r20,r20,578
    3630:	db002815 	stw	r12,160(sp)
    3634:	d8801e15 	stw	r2,120(sp)
    3638:	d8002015 	stw	zero,128(sp)
    363c:	d8001f15 	stw	zero,124(sp)
    3640:	d8003315 	stw	zero,204(sp)
    3644:	d8003715 	stw	zero,220(sp)
    3648:	d8003815 	stw	zero,224(sp)
    364c:	1011883a 	mov	r8,r2
    3650:	d8003b15 	stw	zero,236(sp)
    3654:	d8003a15 	stw	zero,232(sp)
    3658:	d8003015 	stw	zero,192(sp)
    365c:	dac03d15 	stw	r11,244(sp)
    3660:	db002917 	ldw	r12,164(sp)
    3664:	60800007 	ldb	r2,0(r12)
    3668:	1000ab26 	beq	r2,zero,3918 <___svfprintf_internal_r+0x368>
    366c:	00c00944 	movi	r3,37
    3670:	10c0a926 	beq	r2,r3,3918 <___svfprintf_internal_r+0x368>
    3674:	6021883a 	mov	r16,r12
    3678:	00000106 	br	3680 <___svfprintf_internal_r+0xd0>
    367c:	10c08426 	beq	r2,r3,3890 <___svfprintf_internal_r+0x2e0>
    3680:	84000044 	addi	r16,r16,1
    3684:	80800007 	ldb	r2,0(r16)
    3688:	103ffc1e 	bne	r2,zero,367c <__alt_mem_Flash_flash_data+0xf400367c>
    368c:	dac02917 	ldw	r11,164(sp)
    3690:	82e3c83a 	sub	r17,r16,r11
    3694:	88000f26 	beq	r17,zero,36d4 <___svfprintf_internal_r+0x124>
    3698:	d8c02017 	ldw	r3,128(sp)
    369c:	d8801f17 	ldw	r2,124(sp)
    36a0:	dac02917 	ldw	r11,164(sp)
    36a4:	1c47883a 	add	r3,r3,r17
    36a8:	10800044 	addi	r2,r2,1
    36ac:	d8c02015 	stw	r3,128(sp)
    36b0:	42c00015 	stw	r11,0(r8)
    36b4:	44400115 	stw	r17,4(r8)
    36b8:	d8801f15 	stw	r2,124(sp)
    36bc:	00c001c4 	movi	r3,7
    36c0:	18807616 	blt	r3,r2,389c <___svfprintf_internal_r+0x2ec>
    36c4:	42000204 	addi	r8,r8,8
    36c8:	db003017 	ldw	r12,192(sp)
    36cc:	6459883a 	add	r12,r12,r17
    36d0:	db003015 	stw	r12,192(sp)
    36d4:	80800007 	ldb	r2,0(r16)
    36d8:	10007726 	beq	r2,zero,38b8 <___svfprintf_internal_r+0x308>
    36dc:	80800044 	addi	r2,r16,1
    36e0:	84000047 	ldb	r16,1(r16)
    36e4:	d8002785 	stb	zero,158(sp)
    36e8:	000d883a 	mov	r6,zero
    36ec:	027fffc4 	movi	r9,-1
    36f0:	d8002e15 	stw	zero,184(sp)
    36f4:	0023883a 	mov	r17,zero
    36f8:	01001604 	movi	r4,88
    36fc:	01400244 	movi	r5,9
    3700:	02800a84 	movi	r10,42
    3704:	01c01b04 	movi	r7,108
    3708:	10c00044 	addi	r3,r2,1
    370c:	80bff804 	addi	r2,r16,-32
    3710:	2082e636 	bltu	r4,r2,42ac <___svfprintf_internal_r+0xcfc>
    3714:	100490ba 	slli	r2,r2,2
    3718:	02c00034 	movhi	r11,0
    371c:	5acdcb04 	addi	r11,r11,14124
    3720:	12c5883a 	add	r2,r2,r11
    3724:	10800017 	ldw	r2,0(r2)
    3728:	1000683a 	jmp	r2
    372c:	0000408c 	andi	zero,zero,258
    3730:	000042ac 	andhi	zero,zero,266
    3734:	000042ac 	andhi	zero,zero,266
    3738:	000040ac 	andhi	zero,zero,258
    373c:	000042ac 	andhi	zero,zero,266
    3740:	000042ac 	andhi	zero,zero,266
    3744:	000042ac 	andhi	zero,zero,266
    3748:	000042ac 	andhi	zero,zero,266
    374c:	000042ac 	andhi	zero,zero,266
    3750:	000042ac 	andhi	zero,zero,266
    3754:	000040bc 	xorhi	zero,zero,258
    3758:	000040e8 	cmpgeui	zero,zero,259
    375c:	000042ac 	andhi	zero,zero,266
    3760:	00003920 	cmpeqi	zero,zero,228
    3764:	00003930 	cmpltui	zero,zero,228
    3768:	000042ac 	andhi	zero,zero,266
    376c:	00003970 	cmpltui	zero,zero,229
    3770:	00003f50 	cmplti	zero,zero,253
    3774:	00003f50 	cmplti	zero,zero,253
    3778:	00003f50 	cmplti	zero,zero,253
    377c:	00003f50 	cmplti	zero,zero,253
    3780:	00003f50 	cmplti	zero,zero,253
    3784:	00003f50 	cmplti	zero,zero,253
    3788:	00003f50 	cmplti	zero,zero,253
    378c:	00003f50 	cmplti	zero,zero,253
    3790:	00003f50 	cmplti	zero,zero,253
    3794:	000042ac 	andhi	zero,zero,266
    3798:	000042ac 	andhi	zero,zero,266
    379c:	000042ac 	andhi	zero,zero,266
    37a0:	000042ac 	andhi	zero,zero,266
    37a4:	000042ac 	andhi	zero,zero,266
    37a8:	000042ac 	andhi	zero,zero,266
    37ac:	000042ac 	andhi	zero,zero,266
    37b0:	000042ac 	andhi	zero,zero,266
    37b4:	000042ac 	andhi	zero,zero,266
    37b8:	000042ac 	andhi	zero,zero,266
    37bc:	00003980 	call	398 <controllers+0x118>
    37c0:	00003e00 	call	3e0 <controller+0x44>
    37c4:	000042ac 	andhi	zero,zero,266
    37c8:	00003e00 	call	3e0 <controller+0x44>
    37cc:	000042ac 	andhi	zero,zero,266
    37d0:	000042ac 	andhi	zero,zero,266
    37d4:	000042ac 	andhi	zero,zero,266
    37d8:	000042ac 	andhi	zero,zero,266
    37dc:	00003ea4 	muli	zero,zero,250
    37e0:	000042ac 	andhi	zero,zero,266
    37e4:	000042ac 	andhi	zero,zero,266
    37e8:	00004240 	call	424 <controller+0x88>
    37ec:	000042ac 	andhi	zero,zero,266
    37f0:	000042ac 	andhi	zero,zero,266
    37f4:	000042ac 	andhi	zero,zero,266
    37f8:	000042ac 	andhi	zero,zero,266
    37fc:	000042ac 	andhi	zero,zero,266
    3800:	00003eb4 	movhi	zero,250
    3804:	000042ac 	andhi	zero,zero,266
    3808:	000042ac 	andhi	zero,zero,266
    380c:	00003ef4 	movhi	zero,251
    3810:	000042ac 	andhi	zero,zero,266
    3814:	000042ac 	andhi	zero,zero,266
    3818:	000042ac 	andhi	zero,zero,266
    381c:	000042ac 	andhi	zero,zero,266
    3820:	000042ac 	andhi	zero,zero,266
    3824:	000042ac 	andhi	zero,zero,266
    3828:	000042ac 	andhi	zero,zero,266
    382c:	000042ac 	andhi	zero,zero,266
    3830:	000042ac 	andhi	zero,zero,266
    3834:	000042ac 	andhi	zero,zero,266
    3838:	00004198 	cmpnei	zero,zero,262
    383c:	000041d8 	cmpnei	zero,zero,263
    3840:	00003e00 	call	3e0 <controller+0x44>
    3844:	00003e00 	call	3e0 <controller+0x44>
    3848:	00003e00 	call	3e0 <controller+0x44>
    384c:	000040f8 	rdprs	zero,zero,259
    3850:	000041d8 	cmpnei	zero,zero,263
    3854:	000042ac 	andhi	zero,zero,266
    3858:	000042ac 	andhi	zero,zero,266
    385c:	00004108 	cmpgei	zero,zero,260
    3860:	000042ac 	andhi	zero,zero,266
    3864:	0000411c 	xori	zero,zero,260
    3868:	00004270 	cmpltui	zero,zero,265
    386c:	00004150 	cmplti	zero,zero,261
    3870:	00003f84 	movi	zero,254
    3874:	000042ac 	andhi	zero,zero,266
    3878:	00003f94 	movui	zero,254
    387c:	000042ac 	andhi	zero,zero,266
    3880:	0000400c 	andi	zero,zero,256
    3884:	000042ac 	andhi	zero,zero,266
    3888:	000042ac 	andhi	zero,zero,266
    388c:	0000404c 	andi	zero,zero,257
    3890:	db002917 	ldw	r12,164(sp)
    3894:	8323c83a 	sub	r17,r16,r12
    3898:	003f7e06 	br	3694 <__alt_mem_Flash_flash_data+0xf4003694>
    389c:	d9002f17 	ldw	r4,188(sp)
    38a0:	b80b883a 	mov	r5,r23
    38a4:	b00d883a 	mov	r6,r22
    38a8:	000c70c0 	call	c70c <__ssprint_r>
    38ac:	1000081e 	bne	r2,zero,38d0 <___svfprintf_internal_r+0x320>
    38b0:	da000404 	addi	r8,sp,16
    38b4:	003f8406 	br	36c8 <__alt_mem_Flash_flash_data+0xf40036c8>
    38b8:	d8802017 	ldw	r2,128(sp)
    38bc:	10000426 	beq	r2,zero,38d0 <___svfprintf_internal_r+0x320>
    38c0:	d9002f17 	ldw	r4,188(sp)
    38c4:	b80b883a 	mov	r5,r23
    38c8:	d9801e04 	addi	r6,sp,120
    38cc:	000c70c0 	call	c70c <__ssprint_r>
    38d0:	b880030b 	ldhu	r2,12(r23)
    38d4:	1080100c 	andi	r2,r2,64
    38d8:	10000d1e 	bne	r2,zero,3910 <___svfprintf_internal_r+0x360>
    38dc:	d8803017 	ldw	r2,192(sp)
    38e0:	dfc04a17 	ldw	ra,296(sp)
    38e4:	df004917 	ldw	fp,292(sp)
    38e8:	ddc04817 	ldw	r23,288(sp)
    38ec:	dd804717 	ldw	r22,284(sp)
    38f0:	dd404617 	ldw	r21,280(sp)
    38f4:	dd004517 	ldw	r20,276(sp)
    38f8:	dcc04417 	ldw	r19,272(sp)
    38fc:	dc804317 	ldw	r18,268(sp)
    3900:	dc404217 	ldw	r17,264(sp)
    3904:	dc004117 	ldw	r16,260(sp)
    3908:	dec04b04 	addi	sp,sp,300
    390c:	f800283a 	ret
    3910:	00bfffc4 	movi	r2,-1
    3914:	003ff206 	br	38e0 <__alt_mem_Flash_flash_data+0xf40038e0>
    3918:	dc002917 	ldw	r16,164(sp)
    391c:	003f6d06 	br	36d4 <__alt_mem_Flash_flash_data+0xf40036d4>
    3920:	1805883a 	mov	r2,r3
    3924:	8c400114 	ori	r17,r17,4
    3928:	1c000007 	ldb	r16,0(r3)
    392c:	003f7606 	br	3708 <__alt_mem_Flash_flash_data+0xf4003708>
    3930:	1c000007 	ldb	r16,0(r3)
    3934:	18800044 	addi	r2,r3,1
    3938:	8286e726 	beq	r16,r10,54d8 <___svfprintf_internal_r+0x1f28>
    393c:	82fff404 	addi	r11,r16,-48
    3940:	1007883a 	mov	r3,r2
    3944:	0013883a 	mov	r9,zero
    3948:	2aff7036 	bltu	r5,r11,370c <__alt_mem_Flash_flash_data+0xf400370c>
    394c:	1c000007 	ldb	r16,0(r3)
    3950:	4a4002a4 	muli	r9,r9,10
    3954:	18c00044 	addi	r3,r3,1
    3958:	5a53883a 	add	r9,r11,r9
    395c:	82fff404 	addi	r11,r16,-48
    3960:	2afffa2e 	bgeu	r5,r11,394c <__alt_mem_Flash_flash_data+0xf400394c>
    3964:	483f690e 	bge	r9,zero,370c <__alt_mem_Flash_flash_data+0xf400370c>
    3968:	027fffc4 	movi	r9,-1
    396c:	003f6706 	br	370c <__alt_mem_Flash_flash_data+0xf400370c>
    3970:	8c402014 	ori	r17,r17,128
    3974:	1805883a 	mov	r2,r3
    3978:	1c000007 	ldb	r16,0(r3)
    397c:	003f6206 	br	3708 <__alt_mem_Flash_flash_data+0xf4003708>
    3980:	8c400414 	ori	r17,r17,16
    3984:	d8c02915 	stw	r3,164(sp)
    3988:	d9802785 	stb	r6,158(sp)
    398c:	8880080c 	andi	r2,r17,32
    3990:	d8c02d17 	ldw	r3,180(sp)
    3994:	10021526 	beq	r2,zero,41ec <___svfprintf_internal_r+0xc3c>
    3998:	db002d17 	ldw	r12,180(sp)
    399c:	18800117 	ldw	r2,4(r3)
    39a0:	1cc00017 	ldw	r19,0(r3)
    39a4:	63000204 	addi	r12,r12,8
    39a8:	db002d15 	stw	r12,180(sp)
    39ac:	1039883a 	mov	fp,r2
    39b0:	10021916 	blt	r2,zero,4218 <___svfprintf_internal_r+0xc68>
    39b4:	dd402783 	ldbu	r21,158(sp)
    39b8:	da403215 	stw	r9,200(sp)
    39bc:	00800044 	movi	r2,1
    39c0:	9f06b03a 	or	r3,r19,fp
    39c4:	48000216 	blt	r9,zero,39d0 <___svfprintf_internal_r+0x420>
    39c8:	013fdfc4 	movi	r4,-129
    39cc:	8922703a 	and	r17,r17,r4
    39d0:	1802461e 	bne	r3,zero,42ec <___svfprintf_internal_r+0xd3c>
    39d4:	48035426 	beq	r9,zero,4728 <___svfprintf_internal_r+0x1178>
    39d8:	10803fcc 	andi	r2,r2,255
    39dc:	00c00044 	movi	r3,1
    39e0:	10c26726 	beq	r2,r3,4380 <___svfprintf_internal_r+0xdd0>
    39e4:	00c00084 	movi	r3,2
    39e8:	10c2ea26 	beq	r2,r3,4594 <___svfprintf_internal_r+0xfe4>
    39ec:	b007883a 	mov	r3,r22
    39f0:	9808d0fa 	srli	r4,r19,3
    39f4:	e00a977a 	slli	r5,fp,29
    39f8:	e038d0fa 	srli	fp,fp,3
    39fc:	9cc001cc 	andi	r19,r19,7
    3a00:	98800c04 	addi	r2,r19,48
    3a04:	18ffffc4 	addi	r3,r3,-1
    3a08:	2926b03a 	or	r19,r5,r4
    3a0c:	18800005 	stb	r2,0(r3)
    3a10:	9f08b03a 	or	r4,r19,fp
    3a14:	203ff61e 	bne	r4,zero,39f0 <__alt_mem_Flash_flash_data+0xf40039f0>
    3a18:	8900004c 	andi	r4,r17,1
    3a1c:	d8c03115 	stw	r3,196(sp)
    3a20:	2002ea26 	beq	r4,zero,45cc <___svfprintf_internal_r+0x101c>
    3a24:	10803fcc 	andi	r2,r2,255
    3a28:	1080201c 	xori	r2,r2,128
    3a2c:	10bfe004 	addi	r2,r2,-128
    3a30:	01000c04 	movi	r4,48
    3a34:	11057526 	beq	r2,r4,500c <___svfprintf_internal_r+0x1a5c>
    3a38:	dac03117 	ldw	r11,196(sp)
    3a3c:	193fffc5 	stb	r4,-1(r3)
    3a40:	5affffc4 	addi	r11,r11,-1
    3a44:	dac03115 	stw	r11,196(sp)
    3a48:	b2e5c83a 	sub	r18,r22,r11
    3a4c:	9005883a 	mov	r2,r18
    3a50:	9240010e 	bge	r18,r9,3a58 <___svfprintf_internal_r+0x4a8>
    3a54:	4805883a 	mov	r2,r9
    3a58:	d8802a15 	stw	r2,168(sp)
    3a5c:	d8003415 	stw	zero,208(sp)
    3a60:	a8803fcc 	andi	r2,r21,255
    3a64:	1080201c 	xori	r2,r2,128
    3a68:	10bfe004 	addi	r2,r2,-128
    3a6c:	10000326 	beq	r2,zero,3a7c <___svfprintf_internal_r+0x4cc>
    3a70:	d8c02a17 	ldw	r3,168(sp)
    3a74:	18c00044 	addi	r3,r3,1
    3a78:	d8c02a15 	stw	r3,168(sp)
    3a7c:	8ac0008c 	andi	r11,r17,2
    3a80:	dac02b15 	stw	r11,172(sp)
    3a84:	58000326 	beq	r11,zero,3a94 <___svfprintf_internal_r+0x4e4>
    3a88:	db002a17 	ldw	r12,168(sp)
    3a8c:	63000084 	addi	r12,r12,2
    3a90:	db002a15 	stw	r12,168(sp)
    3a94:	88c0210c 	andi	r3,r17,132
    3a98:	d8c02c15 	stw	r3,176(sp)
    3a9c:	1802111e 	bne	r3,zero,42e4 <___svfprintf_internal_r+0xd34>
    3aa0:	dac02e17 	ldw	r11,184(sp)
    3aa4:	db002a17 	ldw	r12,168(sp)
    3aa8:	5b39c83a 	sub	fp,r11,r12
    3aac:	07020d0e 	bge	zero,fp,42e4 <___svfprintf_internal_r+0xd34>
    3ab0:	02400404 	movi	r9,16
    3ab4:	d8c02017 	ldw	r3,128(sp)
    3ab8:	d8801f17 	ldw	r2,124(sp)
    3abc:	4f058c0e 	bge	r9,fp,50f0 <___svfprintf_internal_r+0x1b40>
    3ac0:	014000b4 	movhi	r5,2
    3ac4:	e009883a 	mov	r4,fp
    3ac8:	29409484 	addi	r5,r5,594
    3acc:	dc003c15 	stw	r16,240(sp)
    3ad0:	9039883a 	mov	fp,r18
    3ad4:	d9403615 	stw	r5,216(sp)
    3ad8:	8825883a 	mov	r18,r17
    3adc:	482b883a 	mov	r21,r9
    3ae0:	04c001c4 	movi	r19,7
    3ae4:	dc002f17 	ldw	r16,188(sp)
    3ae8:	2023883a 	mov	r17,r4
    3aec:	00000306 	br	3afc <___svfprintf_internal_r+0x54c>
    3af0:	8c7ffc04 	addi	r17,r17,-16
    3af4:	42000204 	addi	r8,r8,8
    3af8:	ac40130e 	bge	r21,r17,3b48 <___svfprintf_internal_r+0x598>
    3afc:	02c000b4 	movhi	r11,2
    3b00:	18c00404 	addi	r3,r3,16
    3b04:	10800044 	addi	r2,r2,1
    3b08:	5ac09484 	addi	r11,r11,594
    3b0c:	42c00015 	stw	r11,0(r8)
    3b10:	45400115 	stw	r21,4(r8)
    3b14:	d8c02015 	stw	r3,128(sp)
    3b18:	d8801f15 	stw	r2,124(sp)
    3b1c:	98bff40e 	bge	r19,r2,3af0 <__alt_mem_Flash_flash_data+0xf4003af0>
    3b20:	8009883a 	mov	r4,r16
    3b24:	b80b883a 	mov	r5,r23
    3b28:	b00d883a 	mov	r6,r22
    3b2c:	000c70c0 	call	c70c <__ssprint_r>
    3b30:	103f671e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    3b34:	8c7ffc04 	addi	r17,r17,-16
    3b38:	d8c02017 	ldw	r3,128(sp)
    3b3c:	d8801f17 	ldw	r2,124(sp)
    3b40:	da000404 	addi	r8,sp,16
    3b44:	ac7fed16 	blt	r21,r17,3afc <__alt_mem_Flash_flash_data+0xf4003afc>
    3b48:	dc003c17 	ldw	r16,240(sp)
    3b4c:	8809883a 	mov	r4,r17
    3b50:	9023883a 	mov	r17,r18
    3b54:	e025883a 	mov	r18,fp
    3b58:	2039883a 	mov	fp,r4
    3b5c:	db003617 	ldw	r12,216(sp)
    3b60:	e0c7883a 	add	r3,fp,r3
    3b64:	10800044 	addi	r2,r2,1
    3b68:	43000015 	stw	r12,0(r8)
    3b6c:	47000115 	stw	fp,4(r8)
    3b70:	d8c02015 	stw	r3,128(sp)
    3b74:	d8801f15 	stw	r2,124(sp)
    3b78:	010001c4 	movi	r4,7
    3b7c:	20834416 	blt	r4,r2,4890 <___svfprintf_internal_r+0x12e0>
    3b80:	d8802787 	ldb	r2,158(sp)
    3b84:	42000204 	addi	r8,r8,8
    3b88:	10000c26 	beq	r2,zero,3bbc <___svfprintf_internal_r+0x60c>
    3b8c:	d8801f17 	ldw	r2,124(sp)
    3b90:	d9002784 	addi	r4,sp,158
    3b94:	18c00044 	addi	r3,r3,1
    3b98:	10800044 	addi	r2,r2,1
    3b9c:	41000015 	stw	r4,0(r8)
    3ba0:	01000044 	movi	r4,1
    3ba4:	41000115 	stw	r4,4(r8)
    3ba8:	d8c02015 	stw	r3,128(sp)
    3bac:	d8801f15 	stw	r2,124(sp)
    3bb0:	010001c4 	movi	r4,7
    3bb4:	2082f616 	blt	r4,r2,4790 <___svfprintf_internal_r+0x11e0>
    3bb8:	42000204 	addi	r8,r8,8
    3bbc:	dac02b17 	ldw	r11,172(sp)
    3bc0:	58000c26 	beq	r11,zero,3bf4 <___svfprintf_internal_r+0x644>
    3bc4:	d8801f17 	ldw	r2,124(sp)
    3bc8:	d9002704 	addi	r4,sp,156
    3bcc:	18c00084 	addi	r3,r3,2
    3bd0:	10800044 	addi	r2,r2,1
    3bd4:	41000015 	stw	r4,0(r8)
    3bd8:	01000084 	movi	r4,2
    3bdc:	41000115 	stw	r4,4(r8)
    3be0:	d8c02015 	stw	r3,128(sp)
    3be4:	d8801f15 	stw	r2,124(sp)
    3be8:	010001c4 	movi	r4,7
    3bec:	2082e016 	blt	r4,r2,4770 <___svfprintf_internal_r+0x11c0>
    3bf0:	42000204 	addi	r8,r8,8
    3bf4:	db002c17 	ldw	r12,176(sp)
    3bf8:	00802004 	movi	r2,128
    3bfc:	60822f26 	beq	r12,r2,44bc <___svfprintf_internal_r+0xf0c>
    3c00:	db003217 	ldw	r12,200(sp)
    3c04:	64abc83a 	sub	r21,r12,r18
    3c08:	0540310e 	bge	zero,r21,3cd0 <___svfprintf_internal_r+0x720>
    3c0c:	07000404 	movi	fp,16
    3c10:	d8801f17 	ldw	r2,124(sp)
    3c14:	e544270e 	bge	fp,r21,4cb4 <___svfprintf_internal_r+0x1704>
    3c18:	014000b4 	movhi	r5,2
    3c1c:	a809883a 	mov	r4,r21
    3c20:	29409084 	addi	r5,r5,578
    3c24:	dc002c15 	stw	r16,176(sp)
    3c28:	902b883a 	mov	r21,r18
    3c2c:	d9402b15 	stw	r5,172(sp)
    3c30:	8825883a 	mov	r18,r17
    3c34:	04c001c4 	movi	r19,7
    3c38:	dc002f17 	ldw	r16,188(sp)
    3c3c:	2023883a 	mov	r17,r4
    3c40:	00000306 	br	3c50 <___svfprintf_internal_r+0x6a0>
    3c44:	8c7ffc04 	addi	r17,r17,-16
    3c48:	42000204 	addi	r8,r8,8
    3c4c:	e440110e 	bge	fp,r17,3c94 <___svfprintf_internal_r+0x6e4>
    3c50:	18c00404 	addi	r3,r3,16
    3c54:	10800044 	addi	r2,r2,1
    3c58:	45000015 	stw	r20,0(r8)
    3c5c:	47000115 	stw	fp,4(r8)
    3c60:	d8c02015 	stw	r3,128(sp)
    3c64:	d8801f15 	stw	r2,124(sp)
    3c68:	98bff60e 	bge	r19,r2,3c44 <__alt_mem_Flash_flash_data+0xf4003c44>
    3c6c:	8009883a 	mov	r4,r16
    3c70:	b80b883a 	mov	r5,r23
    3c74:	b00d883a 	mov	r6,r22
    3c78:	000c70c0 	call	c70c <__ssprint_r>
    3c7c:	103f141e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    3c80:	8c7ffc04 	addi	r17,r17,-16
    3c84:	d8c02017 	ldw	r3,128(sp)
    3c88:	d8801f17 	ldw	r2,124(sp)
    3c8c:	da000404 	addi	r8,sp,16
    3c90:	e47fef16 	blt	fp,r17,3c50 <__alt_mem_Flash_flash_data+0xf4003c50>
    3c94:	dc002c17 	ldw	r16,176(sp)
    3c98:	8809883a 	mov	r4,r17
    3c9c:	9023883a 	mov	r17,r18
    3ca0:	a825883a 	mov	r18,r21
    3ca4:	202b883a 	mov	r21,r4
    3ca8:	dac02b17 	ldw	r11,172(sp)
    3cac:	1d47883a 	add	r3,r3,r21
    3cb0:	10800044 	addi	r2,r2,1
    3cb4:	42c00015 	stw	r11,0(r8)
    3cb8:	45400115 	stw	r21,4(r8)
    3cbc:	d8c02015 	stw	r3,128(sp)
    3cc0:	d8801f15 	stw	r2,124(sp)
    3cc4:	010001c4 	movi	r4,7
    3cc8:	2082a116 	blt	r4,r2,4750 <___svfprintf_internal_r+0x11a0>
    3ccc:	42000204 	addi	r8,r8,8
    3cd0:	8880400c 	andi	r2,r17,256
    3cd4:	1001b01e 	bne	r2,zero,4398 <___svfprintf_internal_r+0xde8>
    3cd8:	d8801f17 	ldw	r2,124(sp)
    3cdc:	db003117 	ldw	r12,196(sp)
    3ce0:	1c87883a 	add	r3,r3,r18
    3ce4:	10800044 	addi	r2,r2,1
    3ce8:	43000015 	stw	r12,0(r8)
    3cec:	44800115 	stw	r18,4(r8)
    3cf0:	d8c02015 	stw	r3,128(sp)
    3cf4:	d8801f15 	stw	r2,124(sp)
    3cf8:	010001c4 	movi	r4,7
    3cfc:	20828216 	blt	r4,r2,4708 <___svfprintf_internal_r+0x1158>
    3d00:	42000204 	addi	r8,r8,8
    3d04:	8c40010c 	andi	r17,r17,4
    3d08:	88003226 	beq	r17,zero,3dd4 <___svfprintf_internal_r+0x824>
    3d0c:	db002e17 	ldw	r12,184(sp)
    3d10:	dac02a17 	ldw	r11,168(sp)
    3d14:	62e1c83a 	sub	r16,r12,r11
    3d18:	04002e0e 	bge	zero,r16,3dd4 <___svfprintf_internal_r+0x824>
    3d1c:	04400404 	movi	r17,16
    3d20:	d8801f17 	ldw	r2,124(sp)
    3d24:	8c05330e 	bge	r17,r16,51f4 <___svfprintf_internal_r+0x1c44>
    3d28:	010000b4 	movhi	r4,2
    3d2c:	21009484 	addi	r4,r4,594
    3d30:	d9003615 	stw	r4,216(sp)
    3d34:	048001c4 	movi	r18,7
    3d38:	dcc02f17 	ldw	r19,188(sp)
    3d3c:	00000306 	br	3d4c <___svfprintf_internal_r+0x79c>
    3d40:	843ffc04 	addi	r16,r16,-16
    3d44:	42000204 	addi	r8,r8,8
    3d48:	8c00130e 	bge	r17,r16,3d98 <___svfprintf_internal_r+0x7e8>
    3d4c:	014000b4 	movhi	r5,2
    3d50:	18c00404 	addi	r3,r3,16
    3d54:	10800044 	addi	r2,r2,1
    3d58:	29409484 	addi	r5,r5,594
    3d5c:	41400015 	stw	r5,0(r8)
    3d60:	44400115 	stw	r17,4(r8)
    3d64:	d8c02015 	stw	r3,128(sp)
    3d68:	d8801f15 	stw	r2,124(sp)
    3d6c:	90bff40e 	bge	r18,r2,3d40 <__alt_mem_Flash_flash_data+0xf4003d40>
    3d70:	9809883a 	mov	r4,r19
    3d74:	b80b883a 	mov	r5,r23
    3d78:	b00d883a 	mov	r6,r22
    3d7c:	000c70c0 	call	c70c <__ssprint_r>
    3d80:	103ed31e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    3d84:	843ffc04 	addi	r16,r16,-16
    3d88:	d8c02017 	ldw	r3,128(sp)
    3d8c:	d8801f17 	ldw	r2,124(sp)
    3d90:	da000404 	addi	r8,sp,16
    3d94:	8c3fed16 	blt	r17,r16,3d4c <__alt_mem_Flash_flash_data+0xf4003d4c>
    3d98:	dac03617 	ldw	r11,216(sp)
    3d9c:	1c07883a 	add	r3,r3,r16
    3da0:	10800044 	addi	r2,r2,1
    3da4:	42c00015 	stw	r11,0(r8)
    3da8:	44000115 	stw	r16,4(r8)
    3dac:	d8c02015 	stw	r3,128(sp)
    3db0:	d8801f15 	stw	r2,124(sp)
    3db4:	010001c4 	movi	r4,7
    3db8:	2080060e 	bge	r4,r2,3dd4 <___svfprintf_internal_r+0x824>
    3dbc:	d9002f17 	ldw	r4,188(sp)
    3dc0:	b80b883a 	mov	r5,r23
    3dc4:	b00d883a 	mov	r6,r22
    3dc8:	000c70c0 	call	c70c <__ssprint_r>
    3dcc:	103ec01e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    3dd0:	d8c02017 	ldw	r3,128(sp)
    3dd4:	d8802a17 	ldw	r2,168(sp)
    3dd8:	db002e17 	ldw	r12,184(sp)
    3ddc:	1300010e 	bge	r2,r12,3de4 <___svfprintf_internal_r+0x834>
    3de0:	6005883a 	mov	r2,r12
    3de4:	dac03017 	ldw	r11,192(sp)
    3de8:	5897883a 	add	r11,r11,r2
    3dec:	dac03015 	stw	r11,192(sp)
    3df0:	1802331e 	bne	r3,zero,46c0 <___svfprintf_internal_r+0x1110>
    3df4:	d8001f15 	stw	zero,124(sp)
    3df8:	da000404 	addi	r8,sp,16
    3dfc:	003e1806 	br	3660 <__alt_mem_Flash_flash_data+0xf4003660>
    3e00:	db002d17 	ldw	r12,180(sp)
    3e04:	dac02d17 	ldw	r11,180(sp)
    3e08:	d8c02915 	stw	r3,164(sp)
    3e0c:	63000017 	ldw	r12,0(r12)
    3e10:	5ac00117 	ldw	r11,4(r11)
    3e14:	d9802785 	stb	r6,158(sp)
    3e18:	6009883a 	mov	r4,r12
    3e1c:	580b883a 	mov	r5,r11
    3e20:	db003715 	stw	r12,220(sp)
    3e24:	da004015 	stw	r8,256(sp)
    3e28:	da403f15 	stw	r9,252(sp)
    3e2c:	dac03815 	stw	r11,224(sp)
    3e30:	000c4640 	call	c464 <__fpclassifyd>
    3e34:	db002d17 	ldw	r12,180(sp)
    3e38:	04800044 	movi	r18,1
    3e3c:	da004017 	ldw	r8,256(sp)
    3e40:	64c00204 	addi	r19,r12,8
    3e44:	da403f17 	ldw	r9,252(sp)
    3e48:	d9003717 	ldw	r4,220(sp)
    3e4c:	d9403817 	ldw	r5,224(sp)
    3e50:	1483561e 	bne	r2,r18,4bac <___svfprintf_internal_r+0x15fc>
    3e54:	000d883a 	mov	r6,zero
    3e58:	000f883a 	mov	r7,zero
    3e5c:	00116140 	call	11614 <__ledf2>
    3e60:	da004017 	ldw	r8,256(sp)
    3e64:	1004ee16 	blt	r2,zero,5220 <___svfprintf_internal_r+0x1c70>
    3e68:	dd402783 	ldbu	r21,158(sp)
    3e6c:	008011c4 	movi	r2,71
    3e70:	1404440e 	bge	r2,r16,4f84 <___svfprintf_internal_r+0x19d4>
    3e74:	00c000b4 	movhi	r3,2
    3e78:	18c08104 	addi	r3,r3,516
    3e7c:	d8c03115 	stw	r3,196(sp)
    3e80:	02c000c4 	movi	r11,3
    3e84:	00bfdfc4 	movi	r2,-129
    3e88:	dac02a15 	stw	r11,168(sp)
    3e8c:	88a2703a 	and	r17,r17,r2
    3e90:	dcc02d15 	stw	r19,180(sp)
    3e94:	5825883a 	mov	r18,r11
    3e98:	d8003215 	stw	zero,200(sp)
    3e9c:	d8003415 	stw	zero,208(sp)
    3ea0:	003eef06 	br	3a60 <__alt_mem_Flash_flash_data+0xf4003a60>
    3ea4:	8c400214 	ori	r17,r17,8
    3ea8:	1805883a 	mov	r2,r3
    3eac:	1c000007 	ldb	r16,0(r3)
    3eb0:	003e1506 	br	3708 <__alt_mem_Flash_flash_data+0xf4003708>
    3eb4:	8c400414 	ori	r17,r17,16
    3eb8:	d8c02915 	stw	r3,164(sp)
    3ebc:	88c0080c 	andi	r3,r17,32
    3ec0:	d8802d17 	ldw	r2,180(sp)
    3ec4:	18005526 	beq	r3,zero,401c <___svfprintf_internal_r+0xa6c>
    3ec8:	dac02d17 	ldw	r11,180(sp)
    3ecc:	14c00017 	ldw	r19,0(r2)
    3ed0:	17000117 	ldw	fp,4(r2)
    3ed4:	5ac00204 	addi	r11,r11,8
    3ed8:	dac02d15 	stw	r11,180(sp)
    3edc:	00800044 	movi	r2,1
    3ee0:	9f06b03a 	or	r3,r19,fp
    3ee4:	d8002785 	stb	zero,158(sp)
    3ee8:	da403215 	stw	r9,200(sp)
    3eec:	002b883a 	mov	r21,zero
    3ef0:	003eb406 	br	39c4 <__alt_mem_Flash_flash_data+0xf40039c4>
    3ef4:	030000b4 	movhi	r12,2
    3ef8:	63008404 	addi	r12,r12,528
    3efc:	d8c02915 	stw	r3,164(sp)
    3f00:	d9802785 	stb	r6,158(sp)
    3f04:	db003b15 	stw	r12,236(sp)
    3f08:	88c0080c 	andi	r3,r17,32
    3f0c:	d8802d17 	ldw	r2,180(sp)
    3f10:	18005626 	beq	r3,zero,406c <___svfprintf_internal_r+0xabc>
    3f14:	dac02d17 	ldw	r11,180(sp)
    3f18:	14c00017 	ldw	r19,0(r2)
    3f1c:	17000117 	ldw	fp,4(r2)
    3f20:	5ac00204 	addi	r11,r11,8
    3f24:	dac02d15 	stw	r11,180(sp)
    3f28:	8880004c 	andi	r2,r17,1
    3f2c:	10029326 	beq	r2,zero,497c <___svfprintf_internal_r+0x13cc>
    3f30:	9f06b03a 	or	r3,r19,fp
    3f34:	18033526 	beq	r3,zero,4c0c <___svfprintf_internal_r+0x165c>
    3f38:	00800c04 	movi	r2,48
    3f3c:	d8802705 	stb	r2,156(sp)
    3f40:	dc002745 	stb	r16,157(sp)
    3f44:	8c400094 	ori	r17,r17,2
    3f48:	00800084 	movi	r2,2
    3f4c:	003fe506 	br	3ee4 <__alt_mem_Flash_flash_data+0xf4003ee4>
    3f50:	1805883a 	mov	r2,r3
    3f54:	d8002e15 	stw	zero,184(sp)
    3f58:	82fff404 	addi	r11,r16,-48
    3f5c:	0019883a 	mov	r12,zero
    3f60:	14000007 	ldb	r16,0(r2)
    3f64:	630002a4 	muli	r12,r12,10
    3f68:	18c00044 	addi	r3,r3,1
    3f6c:	1805883a 	mov	r2,r3
    3f70:	62d9883a 	add	r12,r12,r11
    3f74:	82fff404 	addi	r11,r16,-48
    3f78:	2afff92e 	bgeu	r5,r11,3f60 <__alt_mem_Flash_flash_data+0xf4003f60>
    3f7c:	db002e15 	stw	r12,184(sp)
    3f80:	003de206 	br	370c <__alt_mem_Flash_flash_data+0xf400370c>
    3f84:	8c400814 	ori	r17,r17,32
    3f88:	1805883a 	mov	r2,r3
    3f8c:	1c000007 	ldb	r16,0(r3)
    3f90:	003ddd06 	br	3708 <__alt_mem_Flash_flash_data+0xf4003708>
    3f94:	dac02d17 	ldw	r11,180(sp)
    3f98:	db002d17 	ldw	r12,180(sp)
    3f9c:	d8c02915 	stw	r3,164(sp)
    3fa0:	5ac00017 	ldw	r11,0(r11)
    3fa4:	d8002785 	stb	zero,158(sp)
    3fa8:	64c00104 	addi	r19,r12,4
    3fac:	dac03115 	stw	r11,196(sp)
    3fb0:	58048126 	beq	r11,zero,51b8 <___svfprintf_internal_r+0x1c08>
    3fb4:	d9003117 	ldw	r4,196(sp)
    3fb8:	48041716 	blt	r9,zero,5018 <___svfprintf_internal_r+0x1a68>
    3fbc:	480d883a 	mov	r6,r9
    3fc0:	000b883a 	mov	r5,zero
    3fc4:	da004015 	stw	r8,256(sp)
    3fc8:	da403f15 	stw	r9,252(sp)
    3fcc:	000aabc0 	call	aabc <memchr>
    3fd0:	da004017 	ldw	r8,256(sp)
    3fd4:	da403f17 	ldw	r9,252(sp)
    3fd8:	1004db26 	beq	r2,zero,5348 <___svfprintf_internal_r+0x1d98>
    3fdc:	d8c03117 	ldw	r3,196(sp)
    3fe0:	10e5c83a 	sub	r18,r2,r3
    3fe4:	4c80010e 	bge	r9,r18,3fec <___svfprintf_internal_r+0xa3c>
    3fe8:	4825883a 	mov	r18,r9
    3fec:	9005883a 	mov	r2,r18
    3ff0:	90040e16 	blt	r18,zero,502c <___svfprintf_internal_r+0x1a7c>
    3ff4:	dd402783 	ldbu	r21,158(sp)
    3ff8:	d8802a15 	stw	r2,168(sp)
    3ffc:	dcc02d15 	stw	r19,180(sp)
    4000:	d8003215 	stw	zero,200(sp)
    4004:	d8003415 	stw	zero,208(sp)
    4008:	003e9506 	br	3a60 <__alt_mem_Flash_flash_data+0xf4003a60>
    400c:	d8c02915 	stw	r3,164(sp)
    4010:	88c0080c 	andi	r3,r17,32
    4014:	d8802d17 	ldw	r2,180(sp)
    4018:	183fab1e 	bne	r3,zero,3ec8 <__alt_mem_Flash_flash_data+0xf4003ec8>
    401c:	88c0040c 	andi	r3,r17,16
    4020:	1802681e 	bne	r3,zero,49c4 <___svfprintf_internal_r+0x1414>
    4024:	88c0100c 	andi	r3,r17,64
    4028:	18026626 	beq	r3,zero,49c4 <___svfprintf_internal_r+0x1414>
    402c:	dac02d17 	ldw	r11,180(sp)
    4030:	14c0000b 	ldhu	r19,0(r2)
    4034:	0039883a 	mov	fp,zero
    4038:	5ac00104 	addi	r11,r11,4
    403c:	dac02d15 	stw	r11,180(sp)
    4040:	00800044 	movi	r2,1
    4044:	9807883a 	mov	r3,r19
    4048:	003fa606 	br	3ee4 <__alt_mem_Flash_flash_data+0xf4003ee4>
    404c:	008000b4 	movhi	r2,2
    4050:	10808904 	addi	r2,r2,548
    4054:	d8c02915 	stw	r3,164(sp)
    4058:	d8803b15 	stw	r2,236(sp)
    405c:	d9802785 	stb	r6,158(sp)
    4060:	88c0080c 	andi	r3,r17,32
    4064:	d8802d17 	ldw	r2,180(sp)
    4068:	183faa1e 	bne	r3,zero,3f14 <__alt_mem_Flash_flash_data+0xf4003f14>
    406c:	88c0040c 	andi	r3,r17,16
    4070:	1802e826 	beq	r3,zero,4c14 <___svfprintf_internal_r+0x1664>
    4074:	db002d17 	ldw	r12,180(sp)
    4078:	14c00017 	ldw	r19,0(r2)
    407c:	0039883a 	mov	fp,zero
    4080:	63000104 	addi	r12,r12,4
    4084:	db002d15 	stw	r12,180(sp)
    4088:	003fa706 	br	3f28 <__alt_mem_Flash_flash_data+0xf4003f28>
    408c:	30803fcc 	andi	r2,r6,255
    4090:	1080201c 	xori	r2,r2,128
    4094:	10bfe004 	addi	r2,r2,-128
    4098:	1002d91e 	bne	r2,zero,4c00 <___svfprintf_internal_r+0x1650>
    409c:	1805883a 	mov	r2,r3
    40a0:	01800804 	movi	r6,32
    40a4:	1c000007 	ldb	r16,0(r3)
    40a8:	003d9706 	br	3708 <__alt_mem_Flash_flash_data+0xf4003708>
    40ac:	8c400054 	ori	r17,r17,1
    40b0:	1805883a 	mov	r2,r3
    40b4:	1c000007 	ldb	r16,0(r3)
    40b8:	003d9306 	br	3708 <__alt_mem_Flash_flash_data+0xf4003708>
    40bc:	dac02d17 	ldw	r11,180(sp)
    40c0:	db002d17 	ldw	r12,180(sp)
    40c4:	5ac00017 	ldw	r11,0(r11)
    40c8:	dac02e15 	stw	r11,184(sp)
    40cc:	62c00104 	addi	r11,r12,4
    40d0:	db002e17 	ldw	r12,184(sp)
    40d4:	60033e16 	blt	r12,zero,4dd0 <___svfprintf_internal_r+0x1820>
    40d8:	dac02d15 	stw	r11,180(sp)
    40dc:	1805883a 	mov	r2,r3
    40e0:	1c000007 	ldb	r16,0(r3)
    40e4:	003d8806 	br	3708 <__alt_mem_Flash_flash_data+0xf4003708>
    40e8:	1805883a 	mov	r2,r3
    40ec:	01800ac4 	movi	r6,43
    40f0:	1c000007 	ldb	r16,0(r3)
    40f4:	003d8406 	br	3708 <__alt_mem_Flash_flash_data+0xf4003708>
    40f8:	8c401014 	ori	r17,r17,64
    40fc:	1805883a 	mov	r2,r3
    4100:	1c000007 	ldb	r16,0(r3)
    4104:	003d8006 	br	3708 <__alt_mem_Flash_flash_data+0xf4003708>
    4108:	1c000007 	ldb	r16,0(r3)
    410c:	81c33626 	beq	r16,r7,4de8 <___svfprintf_internal_r+0x1838>
    4110:	8c400414 	ori	r17,r17,16
    4114:	1805883a 	mov	r2,r3
    4118:	003d7b06 	br	3708 <__alt_mem_Flash_flash_data+0xf4003708>
    411c:	d8c02915 	stw	r3,164(sp)
    4120:	d9802785 	stb	r6,158(sp)
    4124:	8880080c 	andi	r2,r17,32
    4128:	1002c226 	beq	r2,zero,4c34 <___svfprintf_internal_r+0x1684>
    412c:	db002d17 	ldw	r12,180(sp)
    4130:	dac03017 	ldw	r11,192(sp)
    4134:	60800017 	ldw	r2,0(r12)
    4138:	5807d7fa 	srai	r3,r11,31
    413c:	63000104 	addi	r12,r12,4
    4140:	db002d15 	stw	r12,180(sp)
    4144:	12c00015 	stw	r11,0(r2)
    4148:	10c00115 	stw	r3,4(r2)
    414c:	003d4406 	br	3660 <__alt_mem_Flash_flash_data+0xf4003660>
    4150:	db002d17 	ldw	r12,180(sp)
    4154:	00800c04 	movi	r2,48
    4158:	d8802705 	stb	r2,156(sp)
    415c:	64c00017 	ldw	r19,0(r12)
    4160:	00801e04 	movi	r2,120
    4164:	d8802745 	stb	r2,157(sp)
    4168:	008000b4 	movhi	r2,2
    416c:	10808904 	addi	r2,r2,548
    4170:	63000104 	addi	r12,r12,4
    4174:	d8c02915 	stw	r3,164(sp)
    4178:	d8803b15 	stw	r2,236(sp)
    417c:	0039883a 	mov	fp,zero
    4180:	8c400094 	ori	r17,r17,2
    4184:	db002d15 	stw	r12,180(sp)
    4188:	00800084 	movi	r2,2
    418c:	04001e04 	movi	r16,120
    4190:	9807883a 	mov	r3,r19
    4194:	003f5306 	br	3ee4 <__alt_mem_Flash_flash_data+0xf4003ee4>
    4198:	db002d17 	ldw	r12,180(sp)
    419c:	d8c02915 	stw	r3,164(sp)
    41a0:	dac01404 	addi	r11,sp,80
    41a4:	60800017 	ldw	r2,0(r12)
    41a8:	00c00044 	movi	r3,1
    41ac:	63000104 	addi	r12,r12,4
    41b0:	d8801405 	stb	r2,80(sp)
    41b4:	d8c02a15 	stw	r3,168(sp)
    41b8:	d8002785 	stb	zero,158(sp)
    41bc:	db002d15 	stw	r12,180(sp)
    41c0:	1825883a 	mov	r18,r3
    41c4:	d8003215 	stw	zero,200(sp)
    41c8:	d8003415 	stw	zero,208(sp)
    41cc:	dac03115 	stw	r11,196(sp)
    41d0:	0005883a 	mov	r2,zero
    41d4:	003e2906 	br	3a7c <__alt_mem_Flash_flash_data+0xf4003a7c>
    41d8:	d8c02915 	stw	r3,164(sp)
    41dc:	d9802785 	stb	r6,158(sp)
    41e0:	8880080c 	andi	r2,r17,32
    41e4:	d8c02d17 	ldw	r3,180(sp)
    41e8:	103deb1e 	bne	r2,zero,3998 <__alt_mem_Flash_flash_data+0xf4003998>
    41ec:	8880040c 	andi	r2,r17,16
    41f0:	1001e51e 	bne	r2,zero,4988 <___svfprintf_internal_r+0x13d8>
    41f4:	8880100c 	andi	r2,r17,64
    41f8:	1001e326 	beq	r2,zero,4988 <___svfprintf_internal_r+0x13d8>
    41fc:	1cc0000f 	ldh	r19,0(r3)
    4200:	db002d17 	ldw	r12,180(sp)
    4204:	9839d7fa 	srai	fp,r19,31
    4208:	63000104 	addi	r12,r12,4
    420c:	db002d15 	stw	r12,180(sp)
    4210:	e005883a 	mov	r2,fp
    4214:	103de70e 	bge	r2,zero,39b4 <__alt_mem_Flash_flash_data+0xf40039b4>
    4218:	04e7c83a 	sub	r19,zero,r19
    421c:	9804c03a 	cmpne	r2,r19,zero
    4220:	0739c83a 	sub	fp,zero,fp
    4224:	e0b9c83a 	sub	fp,fp,r2
    4228:	05400b44 	movi	r21,45
    422c:	dd402785 	stb	r21,158(sp)
    4230:	da403215 	stw	r9,200(sp)
    4234:	00800044 	movi	r2,1
    4238:	9f06b03a 	or	r3,r19,fp
    423c:	003de106 	br	39c4 <__alt_mem_Flash_flash_data+0xf40039c4>
    4240:	8c400414 	ori	r17,r17,16
    4244:	d8c02915 	stw	r3,164(sp)
    4248:	8880080c 	andi	r2,r17,32
    424c:	10000b26 	beq	r2,zero,427c <___svfprintf_internal_r+0xccc>
    4250:	db002d17 	ldw	r12,180(sp)
    4254:	0005883a 	mov	r2,zero
    4258:	64c00017 	ldw	r19,0(r12)
    425c:	67000117 	ldw	fp,4(r12)
    4260:	63000204 	addi	r12,r12,8
    4264:	db002d15 	stw	r12,180(sp)
    4268:	9f06b03a 	or	r3,r19,fp
    426c:	003f1d06 	br	3ee4 <__alt_mem_Flash_flash_data+0xf4003ee4>
    4270:	d8c02915 	stw	r3,164(sp)
    4274:	8880080c 	andi	r2,r17,32
    4278:	103ff51e 	bne	r2,zero,4250 <__alt_mem_Flash_flash_data+0xf4004250>
    427c:	8880040c 	andi	r2,r17,16
    4280:	1001c81e 	bne	r2,zero,49a4 <___svfprintf_internal_r+0x13f4>
    4284:	8880100c 	andi	r2,r17,64
    4288:	1001c626 	beq	r2,zero,49a4 <___svfprintf_internal_r+0x13f4>
    428c:	db002d17 	ldw	r12,180(sp)
    4290:	0039883a 	mov	fp,zero
    4294:	0005883a 	mov	r2,zero
    4298:	64c0000b 	ldhu	r19,0(r12)
    429c:	63000104 	addi	r12,r12,4
    42a0:	db002d15 	stw	r12,180(sp)
    42a4:	9807883a 	mov	r3,r19
    42a8:	003f0e06 	br	3ee4 <__alt_mem_Flash_flash_data+0xf4003ee4>
    42ac:	d8c02915 	stw	r3,164(sp)
    42b0:	d9802785 	stb	r6,158(sp)
    42b4:	803d8026 	beq	r16,zero,38b8 <__alt_mem_Flash_flash_data+0xf40038b8>
    42b8:	02c00044 	movi	r11,1
    42bc:	db001404 	addi	r12,sp,80
    42c0:	dac02a15 	stw	r11,168(sp)
    42c4:	dc001405 	stb	r16,80(sp)
    42c8:	d8002785 	stb	zero,158(sp)
    42cc:	5825883a 	mov	r18,r11
    42d0:	d8003215 	stw	zero,200(sp)
    42d4:	d8003415 	stw	zero,208(sp)
    42d8:	db003115 	stw	r12,196(sp)
    42dc:	0005883a 	mov	r2,zero
    42e0:	003de606 	br	3a7c <__alt_mem_Flash_flash_data+0xf4003a7c>
    42e4:	d8c02017 	ldw	r3,128(sp)
    42e8:	003e2706 	br	3b88 <__alt_mem_Flash_flash_data+0xf4003b88>
    42ec:	10803fcc 	andi	r2,r2,255
    42f0:	00c00044 	movi	r3,1
    42f4:	10fdbb1e 	bne	r2,r3,39e4 <__alt_mem_Flash_flash_data+0xf40039e4>
    42f8:	e000021e 	bne	fp,zero,4304 <___svfprintf_internal_r+0xd54>
    42fc:	00800244 	movi	r2,9
    4300:	14c01f2e 	bgeu	r2,r19,4380 <___svfprintf_internal_r+0xdd0>
    4304:	dc002a15 	stw	r16,168(sp)
    4308:	dc402b15 	stw	r17,172(sp)
    430c:	9821883a 	mov	r16,r19
    4310:	e023883a 	mov	r17,fp
    4314:	b025883a 	mov	r18,r22
    4318:	4827883a 	mov	r19,r9
    431c:	4039883a 	mov	fp,r8
    4320:	8009883a 	mov	r4,r16
    4324:	880b883a 	mov	r5,r17
    4328:	01800284 	movi	r6,10
    432c:	000f883a 	mov	r7,zero
    4330:	000fc8c0 	call	fc8c <__umoddi3>
    4334:	10800c04 	addi	r2,r2,48
    4338:	94bfffc4 	addi	r18,r18,-1
    433c:	8009883a 	mov	r4,r16
    4340:	880b883a 	mov	r5,r17
    4344:	01800284 	movi	r6,10
    4348:	000f883a 	mov	r7,zero
    434c:	90800005 	stb	r2,0(r18)
    4350:	000f6cc0 	call	f6cc <__udivdi3>
    4354:	1021883a 	mov	r16,r2
    4358:	10c4b03a 	or	r2,r2,r3
    435c:	1823883a 	mov	r17,r3
    4360:	103fef1e 	bne	r2,zero,4320 <__alt_mem_Flash_flash_data+0xf4004320>
    4364:	dc803115 	stw	r18,196(sp)
    4368:	dc002a17 	ldw	r16,168(sp)
    436c:	dc402b17 	ldw	r17,172(sp)
    4370:	9813883a 	mov	r9,r19
    4374:	e011883a 	mov	r8,fp
    4378:	b4a5c83a 	sub	r18,r22,r18
    437c:	003db306 	br	3a4c <__alt_mem_Flash_flash_data+0xf4003a4c>
    4380:	9cc00c04 	addi	r19,r19,48
    4384:	db001dc4 	addi	r12,sp,119
    4388:	dcc01dc5 	stb	r19,119(sp)
    438c:	dc803d17 	ldw	r18,244(sp)
    4390:	db003115 	stw	r12,196(sp)
    4394:	003dad06 	br	3a4c <__alt_mem_Flash_flash_data+0xf4003a4c>
    4398:	00801944 	movi	r2,101
    439c:	14008d0e 	bge	r2,r16,45d4 <___svfprintf_internal_r+0x1024>
    43a0:	d9003717 	ldw	r4,220(sp)
    43a4:	d9403817 	ldw	r5,224(sp)
    43a8:	000d883a 	mov	r6,zero
    43ac:	000f883a 	mov	r7,zero
    43b0:	d8c03e15 	stw	r3,248(sp)
    43b4:	da004015 	stw	r8,256(sp)
    43b8:	00114b00 	call	114b0 <__eqdf2>
    43bc:	d8c03e17 	ldw	r3,248(sp)
    43c0:	da004017 	ldw	r8,256(sp)
    43c4:	1000fd1e 	bne	r2,zero,47bc <___svfprintf_internal_r+0x120c>
    43c8:	d8801f17 	ldw	r2,124(sp)
    43cc:	010000b4 	movhi	r4,2
    43d0:	21009004 	addi	r4,r4,576
    43d4:	18c00044 	addi	r3,r3,1
    43d8:	10800044 	addi	r2,r2,1
    43dc:	41000015 	stw	r4,0(r8)
    43e0:	01000044 	movi	r4,1
    43e4:	41000115 	stw	r4,4(r8)
    43e8:	d8c02015 	stw	r3,128(sp)
    43ec:	d8801f15 	stw	r2,124(sp)
    43f0:	010001c4 	movi	r4,7
    43f4:	20823316 	blt	r4,r2,4cc4 <___svfprintf_internal_r+0x1714>
    43f8:	42000204 	addi	r8,r8,8
    43fc:	d8802617 	ldw	r2,152(sp)
    4400:	dac03317 	ldw	r11,204(sp)
    4404:	12c00216 	blt	r2,r11,4410 <___svfprintf_internal_r+0xe60>
    4408:	8880004c 	andi	r2,r17,1
    440c:	103e3d26 	beq	r2,zero,3d04 <__alt_mem_Flash_flash_data+0xf4003d04>
    4410:	db003917 	ldw	r12,228(sp)
    4414:	d8801f17 	ldw	r2,124(sp)
    4418:	dac03517 	ldw	r11,212(sp)
    441c:	1b07883a 	add	r3,r3,r12
    4420:	10800044 	addi	r2,r2,1
    4424:	42c00015 	stw	r11,0(r8)
    4428:	43000115 	stw	r12,4(r8)
    442c:	d8c02015 	stw	r3,128(sp)
    4430:	d8801f15 	stw	r2,124(sp)
    4434:	010001c4 	movi	r4,7
    4438:	20826f16 	blt	r4,r2,4df8 <___svfprintf_internal_r+0x1848>
    443c:	42000204 	addi	r8,r8,8
    4440:	db003317 	ldw	r12,204(sp)
    4444:	643fffc4 	addi	r16,r12,-1
    4448:	043e2e0e 	bge	zero,r16,3d04 <__alt_mem_Flash_flash_data+0xf4003d04>
    444c:	04800404 	movi	r18,16
    4450:	d8801f17 	ldw	r2,124(sp)
    4454:	9400a00e 	bge	r18,r16,46d8 <___svfprintf_internal_r+0x1128>
    4458:	014000b4 	movhi	r5,2
    445c:	29409084 	addi	r5,r5,578
    4460:	d9402b15 	stw	r5,172(sp)
    4464:	054001c4 	movi	r21,7
    4468:	dcc02f17 	ldw	r19,188(sp)
    446c:	00000306 	br	447c <___svfprintf_internal_r+0xecc>
    4470:	42000204 	addi	r8,r8,8
    4474:	843ffc04 	addi	r16,r16,-16
    4478:	94009a0e 	bge	r18,r16,46e4 <___svfprintf_internal_r+0x1134>
    447c:	18c00404 	addi	r3,r3,16
    4480:	10800044 	addi	r2,r2,1
    4484:	45000015 	stw	r20,0(r8)
    4488:	44800115 	stw	r18,4(r8)
    448c:	d8c02015 	stw	r3,128(sp)
    4490:	d8801f15 	stw	r2,124(sp)
    4494:	a8bff60e 	bge	r21,r2,4470 <__alt_mem_Flash_flash_data+0xf4004470>
    4498:	9809883a 	mov	r4,r19
    449c:	b80b883a 	mov	r5,r23
    44a0:	b00d883a 	mov	r6,r22
    44a4:	000c70c0 	call	c70c <__ssprint_r>
    44a8:	103d091e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    44ac:	d8c02017 	ldw	r3,128(sp)
    44b0:	d8801f17 	ldw	r2,124(sp)
    44b4:	da000404 	addi	r8,sp,16
    44b8:	003fee06 	br	4474 <__alt_mem_Flash_flash_data+0xf4004474>
    44bc:	dac02e17 	ldw	r11,184(sp)
    44c0:	db002a17 	ldw	r12,168(sp)
    44c4:	5b2bc83a 	sub	r21,r11,r12
    44c8:	057dcd0e 	bge	zero,r21,3c00 <__alt_mem_Flash_flash_data+0xf4003c00>
    44cc:	07000404 	movi	fp,16
    44d0:	d8801f17 	ldw	r2,124(sp)
    44d4:	e5435d0e 	bge	fp,r21,524c <___svfprintf_internal_r+0x1c9c>
    44d8:	014000b4 	movhi	r5,2
    44dc:	a809883a 	mov	r4,r21
    44e0:	29409084 	addi	r5,r5,578
    44e4:	dc002c15 	stw	r16,176(sp)
    44e8:	902b883a 	mov	r21,r18
    44ec:	d9402b15 	stw	r5,172(sp)
    44f0:	8825883a 	mov	r18,r17
    44f4:	04c001c4 	movi	r19,7
    44f8:	dc002f17 	ldw	r16,188(sp)
    44fc:	2023883a 	mov	r17,r4
    4500:	00000306 	br	4510 <___svfprintf_internal_r+0xf60>
    4504:	8c7ffc04 	addi	r17,r17,-16
    4508:	42000204 	addi	r8,r8,8
    450c:	e440110e 	bge	fp,r17,4554 <___svfprintf_internal_r+0xfa4>
    4510:	18c00404 	addi	r3,r3,16
    4514:	10800044 	addi	r2,r2,1
    4518:	45000015 	stw	r20,0(r8)
    451c:	47000115 	stw	fp,4(r8)
    4520:	d8c02015 	stw	r3,128(sp)
    4524:	d8801f15 	stw	r2,124(sp)
    4528:	98bff60e 	bge	r19,r2,4504 <__alt_mem_Flash_flash_data+0xf4004504>
    452c:	8009883a 	mov	r4,r16
    4530:	b80b883a 	mov	r5,r23
    4534:	b00d883a 	mov	r6,r22
    4538:	000c70c0 	call	c70c <__ssprint_r>
    453c:	103ce41e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    4540:	8c7ffc04 	addi	r17,r17,-16
    4544:	d8c02017 	ldw	r3,128(sp)
    4548:	d8801f17 	ldw	r2,124(sp)
    454c:	da000404 	addi	r8,sp,16
    4550:	e47fef16 	blt	fp,r17,4510 <__alt_mem_Flash_flash_data+0xf4004510>
    4554:	dc002c17 	ldw	r16,176(sp)
    4558:	8809883a 	mov	r4,r17
    455c:	9023883a 	mov	r17,r18
    4560:	a825883a 	mov	r18,r21
    4564:	202b883a 	mov	r21,r4
    4568:	dac02b17 	ldw	r11,172(sp)
    456c:	1d47883a 	add	r3,r3,r21
    4570:	10800044 	addi	r2,r2,1
    4574:	42c00015 	stw	r11,0(r8)
    4578:	45400115 	stw	r21,4(r8)
    457c:	d8c02015 	stw	r3,128(sp)
    4580:	d8801f15 	stw	r2,124(sp)
    4584:	010001c4 	movi	r4,7
    4588:	20818016 	blt	r4,r2,4b8c <___svfprintf_internal_r+0x15dc>
    458c:	42000204 	addi	r8,r8,8
    4590:	003d9b06 	br	3c00 <__alt_mem_Flash_flash_data+0xf4003c00>
    4594:	d9403b17 	ldw	r5,236(sp)
    4598:	b007883a 	mov	r3,r22
    459c:	988003cc 	andi	r2,r19,15
    45a0:	e008973a 	slli	r4,fp,28
    45a4:	2885883a 	add	r2,r5,r2
    45a8:	9826d13a 	srli	r19,r19,4
    45ac:	10800003 	ldbu	r2,0(r2)
    45b0:	e038d13a 	srli	fp,fp,4
    45b4:	18ffffc4 	addi	r3,r3,-1
    45b8:	24e6b03a 	or	r19,r4,r19
    45bc:	18800005 	stb	r2,0(r3)
    45c0:	9f04b03a 	or	r2,r19,fp
    45c4:	103ff51e 	bne	r2,zero,459c <__alt_mem_Flash_flash_data+0xf400459c>
    45c8:	d8c03115 	stw	r3,196(sp)
    45cc:	b0e5c83a 	sub	r18,r22,r3
    45d0:	003d1e06 	br	3a4c <__alt_mem_Flash_flash_data+0xf4003a4c>
    45d4:	db003317 	ldw	r12,204(sp)
    45d8:	00800044 	movi	r2,1
    45dc:	18c00044 	addi	r3,r3,1
    45e0:	13014b0e 	bge	r2,r12,4b10 <___svfprintf_internal_r+0x1560>
    45e4:	dc001f17 	ldw	r16,124(sp)
    45e8:	dac03117 	ldw	r11,196(sp)
    45ec:	00800044 	movi	r2,1
    45f0:	84000044 	addi	r16,r16,1
    45f4:	40800115 	stw	r2,4(r8)
    45f8:	42c00015 	stw	r11,0(r8)
    45fc:	d8c02015 	stw	r3,128(sp)
    4600:	dc001f15 	stw	r16,124(sp)
    4604:	008001c4 	movi	r2,7
    4608:	14014e16 	blt	r2,r16,4b44 <___svfprintf_internal_r+0x1594>
    460c:	42000204 	addi	r8,r8,8
    4610:	db003917 	ldw	r12,228(sp)
    4614:	dac03517 	ldw	r11,212(sp)
    4618:	84000044 	addi	r16,r16,1
    461c:	1b07883a 	add	r3,r3,r12
    4620:	42c00015 	stw	r11,0(r8)
    4624:	43000115 	stw	r12,4(r8)
    4628:	d8c02015 	stw	r3,128(sp)
    462c:	dc001f15 	stw	r16,124(sp)
    4630:	008001c4 	movi	r2,7
    4634:	14014c16 	blt	r2,r16,4b68 <___svfprintf_internal_r+0x15b8>
    4638:	44800204 	addi	r18,r8,8
    463c:	d9003717 	ldw	r4,220(sp)
    4640:	d9403817 	ldw	r5,224(sp)
    4644:	000d883a 	mov	r6,zero
    4648:	000f883a 	mov	r7,zero
    464c:	d8c03e15 	stw	r3,248(sp)
    4650:	00114b00 	call	114b0 <__eqdf2>
    4654:	d8c03e17 	ldw	r3,248(sp)
    4658:	db003317 	ldw	r12,204(sp)
    465c:	10009526 	beq	r2,zero,48b4 <___svfprintf_internal_r+0x1304>
    4660:	dac03117 	ldw	r11,196(sp)
    4664:	60bfffc4 	addi	r2,r12,-1
    4668:	1887883a 	add	r3,r3,r2
    466c:	59000044 	addi	r4,r11,1
    4670:	84000044 	addi	r16,r16,1
    4674:	90800115 	stw	r2,4(r18)
    4678:	91000015 	stw	r4,0(r18)
    467c:	d8c02015 	stw	r3,128(sp)
    4680:	dc001f15 	stw	r16,124(sp)
    4684:	008001c4 	movi	r2,7
    4688:	1400b316 	blt	r2,r16,4958 <___svfprintf_internal_r+0x13a8>
    468c:	94800204 	addi	r18,r18,8
    4690:	dac03a17 	ldw	r11,232(sp)
    4694:	dd4022c4 	addi	r21,sp,139
    4698:	84000044 	addi	r16,r16,1
    469c:	1ac7883a 	add	r3,r3,r11
    46a0:	95400015 	stw	r21,0(r18)
    46a4:	92c00115 	stw	r11,4(r18)
    46a8:	d8c02015 	stw	r3,128(sp)
    46ac:	dc001f15 	stw	r16,124(sp)
    46b0:	008001c4 	movi	r2,7
    46b4:	14001416 	blt	r2,r16,4708 <___svfprintf_internal_r+0x1158>
    46b8:	92000204 	addi	r8,r18,8
    46bc:	003d9106 	br	3d04 <__alt_mem_Flash_flash_data+0xf4003d04>
    46c0:	d9002f17 	ldw	r4,188(sp)
    46c4:	b80b883a 	mov	r5,r23
    46c8:	b00d883a 	mov	r6,r22
    46cc:	000c70c0 	call	c70c <__ssprint_r>
    46d0:	103dc826 	beq	r2,zero,3df4 <__alt_mem_Flash_flash_data+0xf4003df4>
    46d4:	003c7e06 	br	38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    46d8:	010000b4 	movhi	r4,2
    46dc:	21009084 	addi	r4,r4,578
    46e0:	d9002b15 	stw	r4,172(sp)
    46e4:	dac02b17 	ldw	r11,172(sp)
    46e8:	1c07883a 	add	r3,r3,r16
    46ec:	44000115 	stw	r16,4(r8)
    46f0:	42c00015 	stw	r11,0(r8)
    46f4:	10800044 	addi	r2,r2,1
    46f8:	d8c02015 	stw	r3,128(sp)
    46fc:	d8801f15 	stw	r2,124(sp)
    4700:	010001c4 	movi	r4,7
    4704:	20bd7e0e 	bge	r4,r2,3d00 <__alt_mem_Flash_flash_data+0xf4003d00>
    4708:	d9002f17 	ldw	r4,188(sp)
    470c:	b80b883a 	mov	r5,r23
    4710:	b00d883a 	mov	r6,r22
    4714:	000c70c0 	call	c70c <__ssprint_r>
    4718:	103c6d1e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    471c:	d8c02017 	ldw	r3,128(sp)
    4720:	da000404 	addi	r8,sp,16
    4724:	003d7706 	br	3d04 <__alt_mem_Flash_flash_data+0xf4003d04>
    4728:	10803fcc 	andi	r2,r2,255
    472c:	1000201e 	bne	r2,zero,47b0 <___svfprintf_internal_r+0x1200>
    4730:	8880004c 	andi	r2,r17,1
    4734:	10001e26 	beq	r2,zero,47b0 <___svfprintf_internal_r+0x1200>
    4738:	00800c04 	movi	r2,48
    473c:	d8c01dc4 	addi	r3,sp,119
    4740:	d8801dc5 	stb	r2,119(sp)
    4744:	dc803d17 	ldw	r18,244(sp)
    4748:	d8c03115 	stw	r3,196(sp)
    474c:	003cbf06 	br	3a4c <__alt_mem_Flash_flash_data+0xf4003a4c>
    4750:	d9002f17 	ldw	r4,188(sp)
    4754:	b80b883a 	mov	r5,r23
    4758:	b00d883a 	mov	r6,r22
    475c:	000c70c0 	call	c70c <__ssprint_r>
    4760:	103c5b1e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    4764:	d8c02017 	ldw	r3,128(sp)
    4768:	da000404 	addi	r8,sp,16
    476c:	003d5806 	br	3cd0 <__alt_mem_Flash_flash_data+0xf4003cd0>
    4770:	d9002f17 	ldw	r4,188(sp)
    4774:	b80b883a 	mov	r5,r23
    4778:	b00d883a 	mov	r6,r22
    477c:	000c70c0 	call	c70c <__ssprint_r>
    4780:	103c531e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    4784:	d8c02017 	ldw	r3,128(sp)
    4788:	da000404 	addi	r8,sp,16
    478c:	003d1906 	br	3bf4 <__alt_mem_Flash_flash_data+0xf4003bf4>
    4790:	d9002f17 	ldw	r4,188(sp)
    4794:	b80b883a 	mov	r5,r23
    4798:	b00d883a 	mov	r6,r22
    479c:	000c70c0 	call	c70c <__ssprint_r>
    47a0:	103c4b1e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    47a4:	d8c02017 	ldw	r3,128(sp)
    47a8:	da000404 	addi	r8,sp,16
    47ac:	003d0306 	br	3bbc <__alt_mem_Flash_flash_data+0xf4003bbc>
    47b0:	0025883a 	mov	r18,zero
    47b4:	dd803115 	stw	r22,196(sp)
    47b8:	003ca406 	br	3a4c <__alt_mem_Flash_flash_data+0xf4003a4c>
    47bc:	dc002617 	ldw	r16,152(sp)
    47c0:	0401480e 	bge	zero,r16,4ce4 <___svfprintf_internal_r+0x1734>
    47c4:	db003117 	ldw	r12,196(sp)
    47c8:	dac03317 	ldw	r11,204(sp)
    47cc:	62e1883a 	add	r16,r12,r11
    47d0:	db003417 	ldw	r12,208(sp)
    47d4:	5825883a 	mov	r18,r11
    47d8:	62c0010e 	bge	r12,r11,47e0 <___svfprintf_internal_r+0x1230>
    47dc:	6025883a 	mov	r18,r12
    47e0:	04800b0e 	bge	zero,r18,4810 <___svfprintf_internal_r+0x1260>
    47e4:	d8801f17 	ldw	r2,124(sp)
    47e8:	dac03117 	ldw	r11,196(sp)
    47ec:	1c87883a 	add	r3,r3,r18
    47f0:	10800044 	addi	r2,r2,1
    47f4:	42c00015 	stw	r11,0(r8)
    47f8:	44800115 	stw	r18,4(r8)
    47fc:	d8c02015 	stw	r3,128(sp)
    4800:	d8801f15 	stw	r2,124(sp)
    4804:	010001c4 	movi	r4,7
    4808:	20823f16 	blt	r4,r2,5108 <___svfprintf_internal_r+0x1b58>
    480c:	42000204 	addi	r8,r8,8
    4810:	90023b16 	blt	r18,zero,5100 <___svfprintf_internal_r+0x1b50>
    4814:	db003417 	ldw	r12,208(sp)
    4818:	64a5c83a 	sub	r18,r12,r18
    481c:	0480780e 	bge	zero,r18,4a00 <___svfprintf_internal_r+0x1450>
    4820:	05400404 	movi	r21,16
    4824:	d8801f17 	ldw	r2,124(sp)
    4828:	ac81140e 	bge	r21,r18,4c7c <___svfprintf_internal_r+0x16cc>
    482c:	014000b4 	movhi	r5,2
    4830:	29409084 	addi	r5,r5,578
    4834:	d9402b15 	stw	r5,172(sp)
    4838:	070001c4 	movi	fp,7
    483c:	dcc02f17 	ldw	r19,188(sp)
    4840:	00000306 	br	4850 <___svfprintf_internal_r+0x12a0>
    4844:	42000204 	addi	r8,r8,8
    4848:	94bffc04 	addi	r18,r18,-16
    484c:	ac810e0e 	bge	r21,r18,4c88 <___svfprintf_internal_r+0x16d8>
    4850:	18c00404 	addi	r3,r3,16
    4854:	10800044 	addi	r2,r2,1
    4858:	45000015 	stw	r20,0(r8)
    485c:	45400115 	stw	r21,4(r8)
    4860:	d8c02015 	stw	r3,128(sp)
    4864:	d8801f15 	stw	r2,124(sp)
    4868:	e0bff60e 	bge	fp,r2,4844 <__alt_mem_Flash_flash_data+0xf4004844>
    486c:	9809883a 	mov	r4,r19
    4870:	b80b883a 	mov	r5,r23
    4874:	b00d883a 	mov	r6,r22
    4878:	000c70c0 	call	c70c <__ssprint_r>
    487c:	103c141e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    4880:	d8c02017 	ldw	r3,128(sp)
    4884:	d8801f17 	ldw	r2,124(sp)
    4888:	da000404 	addi	r8,sp,16
    488c:	003fee06 	br	4848 <__alt_mem_Flash_flash_data+0xf4004848>
    4890:	d9002f17 	ldw	r4,188(sp)
    4894:	b80b883a 	mov	r5,r23
    4898:	b00d883a 	mov	r6,r22
    489c:	000c70c0 	call	c70c <__ssprint_r>
    48a0:	103c0b1e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    48a4:	d8c02017 	ldw	r3,128(sp)
    48a8:	d8802787 	ldb	r2,158(sp)
    48ac:	da000404 	addi	r8,sp,16
    48b0:	003cb506 	br	3b88 <__alt_mem_Flash_flash_data+0xf4003b88>
    48b4:	657fffc4 	addi	r21,r12,-1
    48b8:	057f750e 	bge	zero,r21,4690 <__alt_mem_Flash_flash_data+0xf4004690>
    48bc:	07000404 	movi	fp,16
    48c0:	e542ed0e 	bge	fp,r21,5478 <___svfprintf_internal_r+0x1ec8>
    48c4:	010000b4 	movhi	r4,2
    48c8:	21009084 	addi	r4,r4,578
    48cc:	d9002b15 	stw	r4,172(sp)
    48d0:	01c001c4 	movi	r7,7
    48d4:	dcc02f17 	ldw	r19,188(sp)
    48d8:	00000306 	br	48e8 <___svfprintf_internal_r+0x1338>
    48dc:	ad7ffc04 	addi	r21,r21,-16
    48e0:	94800204 	addi	r18,r18,8
    48e4:	e540130e 	bge	fp,r21,4934 <___svfprintf_internal_r+0x1384>
    48e8:	18c00404 	addi	r3,r3,16
    48ec:	84000044 	addi	r16,r16,1
    48f0:	95000015 	stw	r20,0(r18)
    48f4:	97000115 	stw	fp,4(r18)
    48f8:	d8c02015 	stw	r3,128(sp)
    48fc:	dc001f15 	stw	r16,124(sp)
    4900:	3c3ff60e 	bge	r7,r16,48dc <__alt_mem_Flash_flash_data+0xf40048dc>
    4904:	9809883a 	mov	r4,r19
    4908:	b80b883a 	mov	r5,r23
    490c:	b00d883a 	mov	r6,r22
    4910:	d9c03e15 	stw	r7,248(sp)
    4914:	000c70c0 	call	c70c <__ssprint_r>
    4918:	d9c03e17 	ldw	r7,248(sp)
    491c:	103bec1e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    4920:	ad7ffc04 	addi	r21,r21,-16
    4924:	d8c02017 	ldw	r3,128(sp)
    4928:	dc001f17 	ldw	r16,124(sp)
    492c:	dc800404 	addi	r18,sp,16
    4930:	e57fed16 	blt	fp,r21,48e8 <__alt_mem_Flash_flash_data+0xf40048e8>
    4934:	dac02b17 	ldw	r11,172(sp)
    4938:	1d47883a 	add	r3,r3,r21
    493c:	84000044 	addi	r16,r16,1
    4940:	92c00015 	stw	r11,0(r18)
    4944:	95400115 	stw	r21,4(r18)
    4948:	d8c02015 	stw	r3,128(sp)
    494c:	dc001f15 	stw	r16,124(sp)
    4950:	008001c4 	movi	r2,7
    4954:	143f4d0e 	bge	r2,r16,468c <__alt_mem_Flash_flash_data+0xf400468c>
    4958:	d9002f17 	ldw	r4,188(sp)
    495c:	b80b883a 	mov	r5,r23
    4960:	b00d883a 	mov	r6,r22
    4964:	000c70c0 	call	c70c <__ssprint_r>
    4968:	103bd91e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    496c:	d8c02017 	ldw	r3,128(sp)
    4970:	dc001f17 	ldw	r16,124(sp)
    4974:	dc800404 	addi	r18,sp,16
    4978:	003f4506 	br	4690 <__alt_mem_Flash_flash_data+0xf4004690>
    497c:	00800084 	movi	r2,2
    4980:	9f06b03a 	or	r3,r19,fp
    4984:	003d5706 	br	3ee4 <__alt_mem_Flash_flash_data+0xf4003ee4>
    4988:	1cc00017 	ldw	r19,0(r3)
    498c:	dac02d17 	ldw	r11,180(sp)
    4990:	9839d7fa 	srai	fp,r19,31
    4994:	5ac00104 	addi	r11,r11,4
    4998:	dac02d15 	stw	r11,180(sp)
    499c:	e005883a 	mov	r2,fp
    49a0:	003c0306 	br	39b0 <__alt_mem_Flash_flash_data+0xf40039b0>
    49a4:	dac02d17 	ldw	r11,180(sp)
    49a8:	0039883a 	mov	fp,zero
    49ac:	0005883a 	mov	r2,zero
    49b0:	5cc00017 	ldw	r19,0(r11)
    49b4:	5ac00104 	addi	r11,r11,4
    49b8:	dac02d15 	stw	r11,180(sp)
    49bc:	9807883a 	mov	r3,r19
    49c0:	003d4806 	br	3ee4 <__alt_mem_Flash_flash_data+0xf4003ee4>
    49c4:	db002d17 	ldw	r12,180(sp)
    49c8:	14c00017 	ldw	r19,0(r2)
    49cc:	0039883a 	mov	fp,zero
    49d0:	63000104 	addi	r12,r12,4
    49d4:	db002d15 	stw	r12,180(sp)
    49d8:	00800044 	movi	r2,1
    49dc:	9807883a 	mov	r3,r19
    49e0:	003d4006 	br	3ee4 <__alt_mem_Flash_flash_data+0xf4003ee4>
    49e4:	d9002f17 	ldw	r4,188(sp)
    49e8:	b80b883a 	mov	r5,r23
    49ec:	b00d883a 	mov	r6,r22
    49f0:	000c70c0 	call	c70c <__ssprint_r>
    49f4:	103bb61e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    49f8:	d8c02017 	ldw	r3,128(sp)
    49fc:	da000404 	addi	r8,sp,16
    4a00:	db003117 	ldw	r12,196(sp)
    4a04:	dac03417 	ldw	r11,208(sp)
    4a08:	d8802617 	ldw	r2,152(sp)
    4a0c:	62e5883a 	add	r18,r12,r11
    4a10:	db003317 	ldw	r12,204(sp)
    4a14:	13000216 	blt	r2,r12,4a20 <___svfprintf_internal_r+0x1470>
    4a18:	8900004c 	andi	r4,r17,1
    4a1c:	20000c26 	beq	r4,zero,4a50 <___svfprintf_internal_r+0x14a0>
    4a20:	dac03917 	ldw	r11,228(sp)
    4a24:	d9001f17 	ldw	r4,124(sp)
    4a28:	db003517 	ldw	r12,212(sp)
    4a2c:	1ac7883a 	add	r3,r3,r11
    4a30:	21000044 	addi	r4,r4,1
    4a34:	43000015 	stw	r12,0(r8)
    4a38:	42c00115 	stw	r11,4(r8)
    4a3c:	d8c02015 	stw	r3,128(sp)
    4a40:	d9001f15 	stw	r4,124(sp)
    4a44:	014001c4 	movi	r5,7
    4a48:	2901b716 	blt	r5,r4,5128 <___svfprintf_internal_r+0x1b78>
    4a4c:	42000204 	addi	r8,r8,8
    4a50:	dac03317 	ldw	r11,204(sp)
    4a54:	8489c83a 	sub	r4,r16,r18
    4a58:	5885c83a 	sub	r2,r11,r2
    4a5c:	1021883a 	mov	r16,r2
    4a60:	2080010e 	bge	r4,r2,4a68 <___svfprintf_internal_r+0x14b8>
    4a64:	2021883a 	mov	r16,r4
    4a68:	04000a0e 	bge	zero,r16,4a94 <___svfprintf_internal_r+0x14e4>
    4a6c:	d9001f17 	ldw	r4,124(sp)
    4a70:	1c07883a 	add	r3,r3,r16
    4a74:	44800015 	stw	r18,0(r8)
    4a78:	21000044 	addi	r4,r4,1
    4a7c:	44000115 	stw	r16,4(r8)
    4a80:	d8c02015 	stw	r3,128(sp)
    4a84:	d9001f15 	stw	r4,124(sp)
    4a88:	014001c4 	movi	r5,7
    4a8c:	2901bf16 	blt	r5,r4,518c <___svfprintf_internal_r+0x1bdc>
    4a90:	42000204 	addi	r8,r8,8
    4a94:	8001bb16 	blt	r16,zero,5184 <___svfprintf_internal_r+0x1bd4>
    4a98:	1421c83a 	sub	r16,r2,r16
    4a9c:	043c990e 	bge	zero,r16,3d04 <__alt_mem_Flash_flash_data+0xf4003d04>
    4aa0:	04800404 	movi	r18,16
    4aa4:	d8801f17 	ldw	r2,124(sp)
    4aa8:	943f0b0e 	bge	r18,r16,46d8 <__alt_mem_Flash_flash_data+0xf40046d8>
    4aac:	014000b4 	movhi	r5,2
    4ab0:	29409084 	addi	r5,r5,578
    4ab4:	d9402b15 	stw	r5,172(sp)
    4ab8:	054001c4 	movi	r21,7
    4abc:	dcc02f17 	ldw	r19,188(sp)
    4ac0:	00000306 	br	4ad0 <___svfprintf_internal_r+0x1520>
    4ac4:	42000204 	addi	r8,r8,8
    4ac8:	843ffc04 	addi	r16,r16,-16
    4acc:	943f050e 	bge	r18,r16,46e4 <__alt_mem_Flash_flash_data+0xf40046e4>
    4ad0:	18c00404 	addi	r3,r3,16
    4ad4:	10800044 	addi	r2,r2,1
    4ad8:	45000015 	stw	r20,0(r8)
    4adc:	44800115 	stw	r18,4(r8)
    4ae0:	d8c02015 	stw	r3,128(sp)
    4ae4:	d8801f15 	stw	r2,124(sp)
    4ae8:	a8bff60e 	bge	r21,r2,4ac4 <__alt_mem_Flash_flash_data+0xf4004ac4>
    4aec:	9809883a 	mov	r4,r19
    4af0:	b80b883a 	mov	r5,r23
    4af4:	b00d883a 	mov	r6,r22
    4af8:	000c70c0 	call	c70c <__ssprint_r>
    4afc:	103b741e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    4b00:	d8c02017 	ldw	r3,128(sp)
    4b04:	d8801f17 	ldw	r2,124(sp)
    4b08:	da000404 	addi	r8,sp,16
    4b0c:	003fee06 	br	4ac8 <__alt_mem_Flash_flash_data+0xf4004ac8>
    4b10:	8888703a 	and	r4,r17,r2
    4b14:	203eb31e 	bne	r4,zero,45e4 <__alt_mem_Flash_flash_data+0xf40045e4>
    4b18:	dc001f17 	ldw	r16,124(sp)
    4b1c:	db003117 	ldw	r12,196(sp)
    4b20:	40800115 	stw	r2,4(r8)
    4b24:	84000044 	addi	r16,r16,1
    4b28:	43000015 	stw	r12,0(r8)
    4b2c:	d8c02015 	stw	r3,128(sp)
    4b30:	dc001f15 	stw	r16,124(sp)
    4b34:	008001c4 	movi	r2,7
    4b38:	143f8716 	blt	r2,r16,4958 <__alt_mem_Flash_flash_data+0xf4004958>
    4b3c:	44800204 	addi	r18,r8,8
    4b40:	003ed306 	br	4690 <__alt_mem_Flash_flash_data+0xf4004690>
    4b44:	d9002f17 	ldw	r4,188(sp)
    4b48:	b80b883a 	mov	r5,r23
    4b4c:	b00d883a 	mov	r6,r22
    4b50:	000c70c0 	call	c70c <__ssprint_r>
    4b54:	103b5e1e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    4b58:	d8c02017 	ldw	r3,128(sp)
    4b5c:	dc001f17 	ldw	r16,124(sp)
    4b60:	da000404 	addi	r8,sp,16
    4b64:	003eaa06 	br	4610 <__alt_mem_Flash_flash_data+0xf4004610>
    4b68:	d9002f17 	ldw	r4,188(sp)
    4b6c:	b80b883a 	mov	r5,r23
    4b70:	b00d883a 	mov	r6,r22
    4b74:	000c70c0 	call	c70c <__ssprint_r>
    4b78:	103b551e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    4b7c:	d8c02017 	ldw	r3,128(sp)
    4b80:	dc001f17 	ldw	r16,124(sp)
    4b84:	dc800404 	addi	r18,sp,16
    4b88:	003eac06 	br	463c <__alt_mem_Flash_flash_data+0xf400463c>
    4b8c:	d9002f17 	ldw	r4,188(sp)
    4b90:	b80b883a 	mov	r5,r23
    4b94:	b00d883a 	mov	r6,r22
    4b98:	000c70c0 	call	c70c <__ssprint_r>
    4b9c:	103b4c1e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    4ba0:	d8c02017 	ldw	r3,128(sp)
    4ba4:	da000404 	addi	r8,sp,16
    4ba8:	003c1506 	br	3c00 <__alt_mem_Flash_flash_data+0xf4003c00>
    4bac:	da004015 	stw	r8,256(sp)
    4bb0:	da403f15 	stw	r9,252(sp)
    4bb4:	000c4640 	call	c464 <__fpclassifyd>
    4bb8:	da004017 	ldw	r8,256(sp)
    4bbc:	da403f17 	ldw	r9,252(sp)
    4bc0:	1000951e 	bne	r2,zero,4e18 <___svfprintf_internal_r+0x1868>
    4bc4:	008011c4 	movi	r2,71
    4bc8:	1400fb16 	blt	r2,r16,4fb8 <___svfprintf_internal_r+0x1a08>
    4bcc:	030000b4 	movhi	r12,2
    4bd0:	63008204 	addi	r12,r12,520
    4bd4:	db003115 	stw	r12,196(sp)
    4bd8:	00c000c4 	movi	r3,3
    4bdc:	00bfdfc4 	movi	r2,-129
    4be0:	d8c02a15 	stw	r3,168(sp)
    4be4:	88a2703a 	and	r17,r17,r2
    4be8:	dd402783 	ldbu	r21,158(sp)
    4bec:	dcc02d15 	stw	r19,180(sp)
    4bf0:	1825883a 	mov	r18,r3
    4bf4:	d8003215 	stw	zero,200(sp)
    4bf8:	d8003415 	stw	zero,208(sp)
    4bfc:	003b9806 	br	3a60 <__alt_mem_Flash_flash_data+0xf4003a60>
    4c00:	1c000007 	ldb	r16,0(r3)
    4c04:	1805883a 	mov	r2,r3
    4c08:	003abf06 	br	3708 <__alt_mem_Flash_flash_data+0xf4003708>
    4c0c:	00800084 	movi	r2,2
    4c10:	003cb406 	br	3ee4 <__alt_mem_Flash_flash_data+0xf4003ee4>
    4c14:	88c0100c 	andi	r3,r17,64
    4c18:	1800f626 	beq	r3,zero,4ff4 <___svfprintf_internal_r+0x1a44>
    4c1c:	dac02d17 	ldw	r11,180(sp)
    4c20:	14c0000b 	ldhu	r19,0(r2)
    4c24:	0039883a 	mov	fp,zero
    4c28:	5ac00104 	addi	r11,r11,4
    4c2c:	dac02d15 	stw	r11,180(sp)
    4c30:	003cbd06 	br	3f28 <__alt_mem_Flash_flash_data+0xf4003f28>
    4c34:	8880040c 	andi	r2,r17,16
    4c38:	1000091e 	bne	r2,zero,4c60 <___svfprintf_internal_r+0x16b0>
    4c3c:	8c40100c 	andi	r17,r17,64
    4c40:	88000726 	beq	r17,zero,4c60 <___svfprintf_internal_r+0x16b0>
    4c44:	db002d17 	ldw	r12,180(sp)
    4c48:	dac03017 	ldw	r11,192(sp)
    4c4c:	60800017 	ldw	r2,0(r12)
    4c50:	63000104 	addi	r12,r12,4
    4c54:	db002d15 	stw	r12,180(sp)
    4c58:	12c0000d 	sth	r11,0(r2)
    4c5c:	003a8006 	br	3660 <__alt_mem_Flash_flash_data+0xf4003660>
    4c60:	db002d17 	ldw	r12,180(sp)
    4c64:	dac03017 	ldw	r11,192(sp)
    4c68:	60800017 	ldw	r2,0(r12)
    4c6c:	63000104 	addi	r12,r12,4
    4c70:	db002d15 	stw	r12,180(sp)
    4c74:	12c00015 	stw	r11,0(r2)
    4c78:	003a7906 	br	3660 <__alt_mem_Flash_flash_data+0xf4003660>
    4c7c:	010000b4 	movhi	r4,2
    4c80:	21009084 	addi	r4,r4,578
    4c84:	d9002b15 	stw	r4,172(sp)
    4c88:	dac02b17 	ldw	r11,172(sp)
    4c8c:	1c87883a 	add	r3,r3,r18
    4c90:	10800044 	addi	r2,r2,1
    4c94:	42c00015 	stw	r11,0(r8)
    4c98:	44800115 	stw	r18,4(r8)
    4c9c:	d8c02015 	stw	r3,128(sp)
    4ca0:	d8801f15 	stw	r2,124(sp)
    4ca4:	010001c4 	movi	r4,7
    4ca8:	20bf4e16 	blt	r4,r2,49e4 <__alt_mem_Flash_flash_data+0xf40049e4>
    4cac:	42000204 	addi	r8,r8,8
    4cb0:	003f5306 	br	4a00 <__alt_mem_Flash_flash_data+0xf4004a00>
    4cb4:	010000b4 	movhi	r4,2
    4cb8:	21009084 	addi	r4,r4,578
    4cbc:	d9002b15 	stw	r4,172(sp)
    4cc0:	003bf906 	br	3ca8 <__alt_mem_Flash_flash_data+0xf4003ca8>
    4cc4:	d9002f17 	ldw	r4,188(sp)
    4cc8:	b80b883a 	mov	r5,r23
    4ccc:	b00d883a 	mov	r6,r22
    4cd0:	000c70c0 	call	c70c <__ssprint_r>
    4cd4:	103afe1e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    4cd8:	d8c02017 	ldw	r3,128(sp)
    4cdc:	da000404 	addi	r8,sp,16
    4ce0:	003dc606 	br	43fc <__alt_mem_Flash_flash_data+0xf40043fc>
    4ce4:	d8801f17 	ldw	r2,124(sp)
    4ce8:	030000b4 	movhi	r12,2
    4cec:	01000044 	movi	r4,1
    4cf0:	18c00044 	addi	r3,r3,1
    4cf4:	10800044 	addi	r2,r2,1
    4cf8:	63009004 	addi	r12,r12,576
    4cfc:	41000115 	stw	r4,4(r8)
    4d00:	43000015 	stw	r12,0(r8)
    4d04:	d8c02015 	stw	r3,128(sp)
    4d08:	d8801f15 	stw	r2,124(sp)
    4d0c:	010001c4 	movi	r4,7
    4d10:	2080ad16 	blt	r4,r2,4fc8 <___svfprintf_internal_r+0x1a18>
    4d14:	42000204 	addi	r8,r8,8
    4d18:	8000041e 	bne	r16,zero,4d2c <___svfprintf_internal_r+0x177c>
    4d1c:	dac03317 	ldw	r11,204(sp)
    4d20:	5800021e 	bne	r11,zero,4d2c <___svfprintf_internal_r+0x177c>
    4d24:	8880004c 	andi	r2,r17,1
    4d28:	103bf626 	beq	r2,zero,3d04 <__alt_mem_Flash_flash_data+0xf4003d04>
    4d2c:	db003917 	ldw	r12,228(sp)
    4d30:	d8801f17 	ldw	r2,124(sp)
    4d34:	dac03517 	ldw	r11,212(sp)
    4d38:	1b07883a 	add	r3,r3,r12
    4d3c:	10800044 	addi	r2,r2,1
    4d40:	42c00015 	stw	r11,0(r8)
    4d44:	43000115 	stw	r12,4(r8)
    4d48:	d8c02015 	stw	r3,128(sp)
    4d4c:	d8801f15 	stw	r2,124(sp)
    4d50:	010001c4 	movi	r4,7
    4d54:	20818616 	blt	r4,r2,5370 <___svfprintf_internal_r+0x1dc0>
    4d58:	42000204 	addi	r8,r8,8
    4d5c:	0421c83a 	sub	r16,zero,r16
    4d60:	0400bc0e 	bge	zero,r16,5054 <___svfprintf_internal_r+0x1aa4>
    4d64:	04800404 	movi	r18,16
    4d68:	9400f80e 	bge	r18,r16,514c <___svfprintf_internal_r+0x1b9c>
    4d6c:	010000b4 	movhi	r4,2
    4d70:	21009084 	addi	r4,r4,578
    4d74:	d9002b15 	stw	r4,172(sp)
    4d78:	054001c4 	movi	r21,7
    4d7c:	dcc02f17 	ldw	r19,188(sp)
    4d80:	00000306 	br	4d90 <___svfprintf_internal_r+0x17e0>
    4d84:	42000204 	addi	r8,r8,8
    4d88:	843ffc04 	addi	r16,r16,-16
    4d8c:	9400f20e 	bge	r18,r16,5158 <___svfprintf_internal_r+0x1ba8>
    4d90:	18c00404 	addi	r3,r3,16
    4d94:	10800044 	addi	r2,r2,1
    4d98:	45000015 	stw	r20,0(r8)
    4d9c:	44800115 	stw	r18,4(r8)
    4da0:	d8c02015 	stw	r3,128(sp)
    4da4:	d8801f15 	stw	r2,124(sp)
    4da8:	a8bff60e 	bge	r21,r2,4d84 <__alt_mem_Flash_flash_data+0xf4004d84>
    4dac:	9809883a 	mov	r4,r19
    4db0:	b80b883a 	mov	r5,r23
    4db4:	b00d883a 	mov	r6,r22
    4db8:	000c70c0 	call	c70c <__ssprint_r>
    4dbc:	103ac41e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    4dc0:	d8c02017 	ldw	r3,128(sp)
    4dc4:	d8801f17 	ldw	r2,124(sp)
    4dc8:	da000404 	addi	r8,sp,16
    4dcc:	003fee06 	br	4d88 <__alt_mem_Flash_flash_data+0xf4004d88>
    4dd0:	db002e17 	ldw	r12,184(sp)
    4dd4:	1805883a 	mov	r2,r3
    4dd8:	dac02d15 	stw	r11,180(sp)
    4ddc:	0319c83a 	sub	r12,zero,r12
    4de0:	db002e15 	stw	r12,184(sp)
    4de4:	003acf06 	br	3924 <__alt_mem_Flash_flash_data+0xf4003924>
    4de8:	18800044 	addi	r2,r3,1
    4dec:	8c400814 	ori	r17,r17,32
    4df0:	1c000047 	ldb	r16,1(r3)
    4df4:	003a4406 	br	3708 <__alt_mem_Flash_flash_data+0xf4003708>
    4df8:	d9002f17 	ldw	r4,188(sp)
    4dfc:	b80b883a 	mov	r5,r23
    4e00:	b00d883a 	mov	r6,r22
    4e04:	000c70c0 	call	c70c <__ssprint_r>
    4e08:	103ab11e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    4e0c:	d8c02017 	ldw	r3,128(sp)
    4e10:	da000404 	addi	r8,sp,16
    4e14:	003d8a06 	br	4440 <__alt_mem_Flash_flash_data+0xf4004440>
    4e18:	057ff7c4 	movi	r21,-33
    4e1c:	00bfffc4 	movi	r2,-1
    4e20:	856a703a 	and	r21,r16,r21
    4e24:	48807126 	beq	r9,r2,4fec <___svfprintf_internal_r+0x1a3c>
    4e28:	008011c4 	movi	r2,71
    4e2c:	a8814d26 	beq	r21,r2,5364 <___svfprintf_internal_r+0x1db4>
    4e30:	db003817 	ldw	r12,224(sp)
    4e34:	8ac04014 	ori	r11,r17,256
    4e38:	dac02d15 	stw	r11,180(sp)
    4e3c:	60015616 	blt	r12,zero,5398 <___svfprintf_internal_r+0x1de8>
    4e40:	dc803817 	ldw	r18,224(sp)
    4e44:	d8002a05 	stb	zero,168(sp)
    4e48:	00801984 	movi	r2,102
    4e4c:	80808c26 	beq	r16,r2,5080 <___svfprintf_internal_r+0x1ad0>
    4e50:	00801184 	movi	r2,70
    4e54:	80808a26 	beq	r16,r2,5080 <___svfprintf_internal_r+0x1ad0>
    4e58:	00801144 	movi	r2,69
    4e5c:	a8815226 	beq	r21,r2,53a8 <___svfprintf_internal_r+0x1df8>
    4e60:	4839883a 	mov	fp,r9
    4e64:	d8802604 	addi	r2,sp,152
    4e68:	d8800115 	stw	r2,4(sp)
    4e6c:	d9002f17 	ldw	r4,188(sp)
    4e70:	d8802504 	addi	r2,sp,148
    4e74:	d9403717 	ldw	r5,220(sp)
    4e78:	d8800215 	stw	r2,8(sp)
    4e7c:	d8802104 	addi	r2,sp,132
    4e80:	df000015 	stw	fp,0(sp)
    4e84:	d8800315 	stw	r2,12(sp)
    4e88:	900d883a 	mov	r6,r18
    4e8c:	01c00084 	movi	r7,2
    4e90:	da004015 	stw	r8,256(sp)
    4e94:	da403f15 	stw	r9,252(sp)
    4e98:	00078c40 	call	78c4 <_dtoa_r>
    4e9c:	d8803115 	stw	r2,196(sp)
    4ea0:	008019c4 	movi	r2,103
    4ea4:	da004017 	ldw	r8,256(sp)
    4ea8:	da403f17 	ldw	r9,252(sp)
    4eac:	80800226 	beq	r16,r2,4eb8 <___svfprintf_internal_r+0x1908>
    4eb0:	008011c4 	movi	r2,71
    4eb4:	8080841e 	bne	r16,r2,50c8 <___svfprintf_internal_r+0x1b18>
    4eb8:	8880004c 	andi	r2,r17,1
    4ebc:	10014f26 	beq	r2,zero,53fc <___svfprintf_internal_r+0x1e4c>
    4ec0:	db003117 	ldw	r12,196(sp)
    4ec4:	6715883a 	add	r10,r12,fp
    4ec8:	d9003717 	ldw	r4,220(sp)
    4ecc:	900b883a 	mov	r5,r18
    4ed0:	000d883a 	mov	r6,zero
    4ed4:	000f883a 	mov	r7,zero
    4ed8:	da004015 	stw	r8,256(sp)
    4edc:	da403f15 	stw	r9,252(sp)
    4ee0:	da803e15 	stw	r10,248(sp)
    4ee4:	00114b00 	call	114b0 <__eqdf2>
    4ee8:	da004017 	ldw	r8,256(sp)
    4eec:	da403f17 	ldw	r9,252(sp)
    4ef0:	da803e17 	ldw	r10,248(sp)
    4ef4:	1000d926 	beq	r2,zero,525c <___svfprintf_internal_r+0x1cac>
    4ef8:	d8802117 	ldw	r2,132(sp)
    4efc:	1280062e 	bgeu	r2,r10,4f18 <___svfprintf_internal_r+0x1968>
    4f00:	01000c04 	movi	r4,48
    4f04:	10c00044 	addi	r3,r2,1
    4f08:	d8c02115 	stw	r3,132(sp)
    4f0c:	11000005 	stb	r4,0(r2)
    4f10:	d8802117 	ldw	r2,132(sp)
    4f14:	12bffb36 	bltu	r2,r10,4f04 <__alt_mem_Flash_flash_data+0xf4004f04>
    4f18:	db003117 	ldw	r12,196(sp)
    4f1c:	1305c83a 	sub	r2,r2,r12
    4f20:	d8803315 	stw	r2,204(sp)
    4f24:	008011c4 	movi	r2,71
    4f28:	a880b626 	beq	r21,r2,5204 <___svfprintf_internal_r+0x1c54>
    4f2c:	00801944 	movi	r2,101
    4f30:	14017c0e 	bge	r2,r16,5524 <___svfprintf_internal_r+0x1f74>
    4f34:	00801984 	movi	r2,102
    4f38:	80812626 	beq	r16,r2,53d4 <___svfprintf_internal_r+0x1e24>
    4f3c:	db002617 	ldw	r12,152(sp)
    4f40:	db003415 	stw	r12,208(sp)
    4f44:	db003417 	ldw	r12,208(sp)
    4f48:	dac03317 	ldw	r11,204(sp)
    4f4c:	62c11816 	blt	r12,r11,53b0 <___svfprintf_internal_r+0x1e00>
    4f50:	8c40004c 	andi	r17,r17,1
    4f54:	88013b1e 	bne	r17,zero,5444 <___svfprintf_internal_r+0x1e94>
    4f58:	6005883a 	mov	r2,r12
    4f5c:	60012516 	blt	r12,zero,53f4 <___svfprintf_internal_r+0x1e44>
    4f60:	dc803417 	ldw	r18,208(sp)
    4f64:	df002a07 	ldb	fp,168(sp)
    4f68:	e000b01e 	bne	fp,zero,522c <___svfprintf_internal_r+0x1c7c>
    4f6c:	dc402d17 	ldw	r17,180(sp)
    4f70:	dd402783 	ldbu	r21,158(sp)
    4f74:	d8802a15 	stw	r2,168(sp)
    4f78:	dcc02d15 	stw	r19,180(sp)
    4f7c:	d8003215 	stw	zero,200(sp)
    4f80:	003ab706 	br	3a60 <__alt_mem_Flash_flash_data+0xf4003a60>
    4f84:	008000b4 	movhi	r2,2
    4f88:	10808004 	addi	r2,r2,512
    4f8c:	d8803115 	stw	r2,196(sp)
    4f90:	003bbb06 	br	3e80 <__alt_mem_Flash_flash_data+0xf4003e80>
    4f94:	d9002f17 	ldw	r4,188(sp)
    4f98:	04001004 	movi	r16,64
    4f9c:	800b883a 	mov	r5,r16
    4fa0:	000a3140 	call	a314 <_malloc_r>
    4fa4:	b8800015 	stw	r2,0(r23)
    4fa8:	b8800415 	stw	r2,16(r23)
    4fac:	10015f26 	beq	r2,zero,552c <___svfprintf_internal_r+0x1f7c>
    4fb0:	bc000515 	stw	r16,20(r23)
    4fb4:	00399806 	br	3618 <__alt_mem_Flash_flash_data+0xf4003618>
    4fb8:	008000b4 	movhi	r2,2
    4fbc:	10808304 	addi	r2,r2,524
    4fc0:	d8803115 	stw	r2,196(sp)
    4fc4:	003f0406 	br	4bd8 <__alt_mem_Flash_flash_data+0xf4004bd8>
    4fc8:	d9002f17 	ldw	r4,188(sp)
    4fcc:	b80b883a 	mov	r5,r23
    4fd0:	b00d883a 	mov	r6,r22
    4fd4:	000c70c0 	call	c70c <__ssprint_r>
    4fd8:	103a3d1e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    4fdc:	dc002617 	ldw	r16,152(sp)
    4fe0:	d8c02017 	ldw	r3,128(sp)
    4fe4:	da000404 	addi	r8,sp,16
    4fe8:	003f4b06 	br	4d18 <__alt_mem_Flash_flash_data+0xf4004d18>
    4fec:	02400184 	movi	r9,6
    4ff0:	003f8f06 	br	4e30 <__alt_mem_Flash_flash_data+0xf4004e30>
    4ff4:	db002d17 	ldw	r12,180(sp)
    4ff8:	14c00017 	ldw	r19,0(r2)
    4ffc:	0039883a 	mov	fp,zero
    5000:	63000104 	addi	r12,r12,4
    5004:	db002d15 	stw	r12,180(sp)
    5008:	003bc706 	br	3f28 <__alt_mem_Flash_flash_data+0xf4003f28>
    500c:	d8c03117 	ldw	r3,196(sp)
    5010:	b0e5c83a 	sub	r18,r22,r3
    5014:	003a8d06 	br	3a4c <__alt_mem_Flash_flash_data+0xf4003a4c>
    5018:	da004015 	stw	r8,256(sp)
    501c:	00035180 	call	3518 <strlen>
    5020:	1025883a 	mov	r18,r2
    5024:	da004017 	ldw	r8,256(sp)
    5028:	903bf20e 	bge	r18,zero,3ff4 <__alt_mem_Flash_flash_data+0xf4003ff4>
    502c:	0005883a 	mov	r2,zero
    5030:	003bf006 	br	3ff4 <__alt_mem_Flash_flash_data+0xf4003ff4>
    5034:	d9002f17 	ldw	r4,188(sp)
    5038:	b80b883a 	mov	r5,r23
    503c:	b00d883a 	mov	r6,r22
    5040:	000c70c0 	call	c70c <__ssprint_r>
    5044:	103a221e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    5048:	d8c02017 	ldw	r3,128(sp)
    504c:	d8801f17 	ldw	r2,124(sp)
    5050:	da000404 	addi	r8,sp,16
    5054:	db003317 	ldw	r12,204(sp)
    5058:	dac03117 	ldw	r11,196(sp)
    505c:	10800044 	addi	r2,r2,1
    5060:	1b07883a 	add	r3,r3,r12
    5064:	42c00015 	stw	r11,0(r8)
    5068:	43000115 	stw	r12,4(r8)
    506c:	d8c02015 	stw	r3,128(sp)
    5070:	d8801f15 	stw	r2,124(sp)
    5074:	010001c4 	movi	r4,7
    5078:	20bb210e 	bge	r4,r2,3d00 <__alt_mem_Flash_flash_data+0xf4003d00>
    507c:	003da206 	br	4708 <__alt_mem_Flash_flash_data+0xf4004708>
    5080:	d8802604 	addi	r2,sp,152
    5084:	d8800115 	stw	r2,4(sp)
    5088:	d9002f17 	ldw	r4,188(sp)
    508c:	d8802504 	addi	r2,sp,148
    5090:	d9403717 	ldw	r5,220(sp)
    5094:	d8800215 	stw	r2,8(sp)
    5098:	d8802104 	addi	r2,sp,132
    509c:	da400015 	stw	r9,0(sp)
    50a0:	d8800315 	stw	r2,12(sp)
    50a4:	900d883a 	mov	r6,r18
    50a8:	01c000c4 	movi	r7,3
    50ac:	da004015 	stw	r8,256(sp)
    50b0:	da403f15 	stw	r9,252(sp)
    50b4:	00078c40 	call	78c4 <_dtoa_r>
    50b8:	da403f17 	ldw	r9,252(sp)
    50bc:	da004017 	ldw	r8,256(sp)
    50c0:	d8803115 	stw	r2,196(sp)
    50c4:	4839883a 	mov	fp,r9
    50c8:	dac03117 	ldw	r11,196(sp)
    50cc:	00801184 	movi	r2,70
    50d0:	5f15883a 	add	r10,r11,fp
    50d4:	a8bf7c1e 	bne	r21,r2,4ec8 <__alt_mem_Flash_flash_data+0xf4004ec8>
    50d8:	59000007 	ldb	r4,0(r11)
    50dc:	00800c04 	movi	r2,48
    50e0:	2080c826 	beq	r4,r2,5404 <___svfprintf_internal_r+0x1e54>
    50e4:	d8c02617 	ldw	r3,152(sp)
    50e8:	50d5883a 	add	r10,r10,r3
    50ec:	003f7606 	br	4ec8 <__alt_mem_Flash_flash_data+0xf4004ec8>
    50f0:	010000b4 	movhi	r4,2
    50f4:	21009484 	addi	r4,r4,594
    50f8:	d9003615 	stw	r4,216(sp)
    50fc:	003a9706 	br	3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    5100:	0025883a 	mov	r18,zero
    5104:	003dc306 	br	4814 <__alt_mem_Flash_flash_data+0xf4004814>
    5108:	d9002f17 	ldw	r4,188(sp)
    510c:	b80b883a 	mov	r5,r23
    5110:	b00d883a 	mov	r6,r22
    5114:	000c70c0 	call	c70c <__ssprint_r>
    5118:	1039ed1e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    511c:	d8c02017 	ldw	r3,128(sp)
    5120:	da000404 	addi	r8,sp,16
    5124:	003dba06 	br	4810 <__alt_mem_Flash_flash_data+0xf4004810>
    5128:	d9002f17 	ldw	r4,188(sp)
    512c:	b80b883a 	mov	r5,r23
    5130:	b00d883a 	mov	r6,r22
    5134:	000c70c0 	call	c70c <__ssprint_r>
    5138:	1039e51e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    513c:	d8802617 	ldw	r2,152(sp)
    5140:	d8c02017 	ldw	r3,128(sp)
    5144:	da000404 	addi	r8,sp,16
    5148:	003e4106 	br	4a50 <__alt_mem_Flash_flash_data+0xf4004a50>
    514c:	030000b4 	movhi	r12,2
    5150:	63009084 	addi	r12,r12,578
    5154:	db002b15 	stw	r12,172(sp)
    5158:	dac02b17 	ldw	r11,172(sp)
    515c:	1c07883a 	add	r3,r3,r16
    5160:	10800044 	addi	r2,r2,1
    5164:	42c00015 	stw	r11,0(r8)
    5168:	44000115 	stw	r16,4(r8)
    516c:	d8c02015 	stw	r3,128(sp)
    5170:	d8801f15 	stw	r2,124(sp)
    5174:	010001c4 	movi	r4,7
    5178:	20bfae16 	blt	r4,r2,5034 <__alt_mem_Flash_flash_data+0xf4005034>
    517c:	42000204 	addi	r8,r8,8
    5180:	003fb406 	br	5054 <__alt_mem_Flash_flash_data+0xf4005054>
    5184:	0021883a 	mov	r16,zero
    5188:	003e4306 	br	4a98 <__alt_mem_Flash_flash_data+0xf4004a98>
    518c:	d9002f17 	ldw	r4,188(sp)
    5190:	b80b883a 	mov	r5,r23
    5194:	b00d883a 	mov	r6,r22
    5198:	000c70c0 	call	c70c <__ssprint_r>
    519c:	1039cc1e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    51a0:	d8802617 	ldw	r2,152(sp)
    51a4:	db003317 	ldw	r12,204(sp)
    51a8:	d8c02017 	ldw	r3,128(sp)
    51ac:	da000404 	addi	r8,sp,16
    51b0:	6085c83a 	sub	r2,r12,r2
    51b4:	003e3706 	br	4a94 <__alt_mem_Flash_flash_data+0xf4004a94>
    51b8:	00800184 	movi	r2,6
    51bc:	1240012e 	bgeu	r2,r9,51c4 <___svfprintf_internal_r+0x1c14>
    51c0:	1013883a 	mov	r9,r2
    51c4:	4825883a 	mov	r18,r9
    51c8:	4805883a 	mov	r2,r9
    51cc:	4800a216 	blt	r9,zero,5458 <___svfprintf_internal_r+0x1ea8>
    51d0:	d8802a15 	stw	r2,168(sp)
    51d4:	008000b4 	movhi	r2,2
    51d8:	10808e04 	addi	r2,r2,568
    51dc:	d8803115 	stw	r2,196(sp)
    51e0:	dcc02d15 	stw	r19,180(sp)
    51e4:	d8003215 	stw	zero,200(sp)
    51e8:	d8003415 	stw	zero,208(sp)
    51ec:	0005883a 	mov	r2,zero
    51f0:	003a2206 	br	3a7c <__alt_mem_Flash_flash_data+0xf4003a7c>
    51f4:	030000b4 	movhi	r12,2
    51f8:	63009484 	addi	r12,r12,594
    51fc:	db003615 	stw	r12,216(sp)
    5200:	003ae506 	br	3d98 <__alt_mem_Flash_flash_data+0xf4003d98>
    5204:	d8c02617 	ldw	r3,152(sp)
    5208:	00bfff44 	movi	r2,-3
    520c:	18801516 	blt	r3,r2,5264 <___svfprintf_internal_r+0x1cb4>
    5210:	48c01416 	blt	r9,r3,5264 <___svfprintf_internal_r+0x1cb4>
    5214:	d8c03415 	stw	r3,208(sp)
    5218:	040019c4 	movi	r16,103
    521c:	003f4906 	br	4f44 <__alt_mem_Flash_flash_data+0xf4004f44>
    5220:	05400b44 	movi	r21,45
    5224:	dd402785 	stb	r21,158(sp)
    5228:	003b1006 	br	3e6c <__alt_mem_Flash_flash_data+0xf4003e6c>
    522c:	00c00b44 	movi	r3,45
    5230:	d8802a15 	stw	r2,168(sp)
    5234:	dc402d17 	ldw	r17,180(sp)
    5238:	d8c02785 	stb	r3,158(sp)
    523c:	dcc02d15 	stw	r19,180(sp)
    5240:	d8003215 	stw	zero,200(sp)
    5244:	00800b44 	movi	r2,45
    5248:	003a0906 	br	3a70 <__alt_mem_Flash_flash_data+0xf4003a70>
    524c:	010000b4 	movhi	r4,2
    5250:	21009084 	addi	r4,r4,578
    5254:	d9002b15 	stw	r4,172(sp)
    5258:	003cc306 	br	4568 <__alt_mem_Flash_flash_data+0xf4004568>
    525c:	5005883a 	mov	r2,r10
    5260:	003f2d06 	br	4f18 <__alt_mem_Flash_flash_data+0xf4004f18>
    5264:	843fff84 	addi	r16,r16,-2
    5268:	1f3fffc4 	addi	fp,r3,-1
    526c:	df002615 	stw	fp,152(sp)
    5270:	dc0022c5 	stb	r16,139(sp)
    5274:	e000a016 	blt	fp,zero,54f8 <___svfprintf_internal_r+0x1f48>
    5278:	00800ac4 	movi	r2,43
    527c:	d8802305 	stb	r2,140(sp)
    5280:	00800244 	movi	r2,9
    5284:	1700800e 	bge	r2,fp,5488 <___svfprintf_internal_r+0x1ed8>
    5288:	dd4022c4 	addi	r21,sp,139
    528c:	dc002b15 	stw	r16,172(sp)
    5290:	4025883a 	mov	r18,r8
    5294:	a821883a 	mov	r16,r21
    5298:	e009883a 	mov	r4,fp
    529c:	01400284 	movi	r5,10
    52a0:	00102dc0 	call	102dc <__modsi3>
    52a4:	10800c04 	addi	r2,r2,48
    52a8:	843fffc4 	addi	r16,r16,-1
    52ac:	e009883a 	mov	r4,fp
    52b0:	01400284 	movi	r5,10
    52b4:	80800005 	stb	r2,0(r16)
    52b8:	00102880 	call	10288 <__divsi3>
    52bc:	1039883a 	mov	fp,r2
    52c0:	00800244 	movi	r2,9
    52c4:	173ff416 	blt	r2,fp,5298 <__alt_mem_Flash_flash_data+0xf4005298>
    52c8:	9011883a 	mov	r8,r18
    52cc:	e0800c04 	addi	r2,fp,48
    52d0:	8025883a 	mov	r18,r16
    52d4:	913fffc4 	addi	r4,r18,-1
    52d8:	90bfffc5 	stb	r2,-1(r18)
    52dc:	dc002b17 	ldw	r16,172(sp)
    52e0:	25408e2e 	bgeu	r4,r21,551c <___svfprintf_internal_r+0x1f6c>
    52e4:	d9402384 	addi	r5,sp,142
    52e8:	2c8bc83a 	sub	r5,r5,r18
    52ec:	d8c02344 	addi	r3,sp,141
    52f0:	a94b883a 	add	r5,r21,r5
    52f4:	00000106 	br	52fc <___svfprintf_internal_r+0x1d4c>
    52f8:	20800003 	ldbu	r2,0(r4)
    52fc:	18800005 	stb	r2,0(r3)
    5300:	18c00044 	addi	r3,r3,1
    5304:	21000044 	addi	r4,r4,1
    5308:	197ffb1e 	bne	r3,r5,52f8 <__alt_mem_Flash_flash_data+0xf40052f8>
    530c:	d8802304 	addi	r2,sp,140
    5310:	1485c83a 	sub	r2,r2,r18
    5314:	d8c02344 	addi	r3,sp,141
    5318:	1885883a 	add	r2,r3,r2
    531c:	dac03317 	ldw	r11,204(sp)
    5320:	156bc83a 	sub	r21,r2,r21
    5324:	dd403a15 	stw	r21,232(sp)
    5328:	00800044 	movi	r2,1
    532c:	5d65883a 	add	r18,r11,r21
    5330:	12c0770e 	bge	r2,r11,5510 <___svfprintf_internal_r+0x1f60>
    5334:	94800044 	addi	r18,r18,1
    5338:	9005883a 	mov	r2,r18
    533c:	90007216 	blt	r18,zero,5508 <___svfprintf_internal_r+0x1f58>
    5340:	d8003415 	stw	zero,208(sp)
    5344:	003f0706 	br	4f64 <__alt_mem_Flash_flash_data+0xf4004f64>
    5348:	da402a15 	stw	r9,168(sp)
    534c:	dd402783 	ldbu	r21,158(sp)
    5350:	4825883a 	mov	r18,r9
    5354:	dcc02d15 	stw	r19,180(sp)
    5358:	d8003215 	stw	zero,200(sp)
    535c:	d8003415 	stw	zero,208(sp)
    5360:	0039bf06 	br	3a60 <__alt_mem_Flash_flash_data+0xf4003a60>
    5364:	483eb21e 	bne	r9,zero,4e30 <__alt_mem_Flash_flash_data+0xf4004e30>
    5368:	9013883a 	mov	r9,r18
    536c:	003eb006 	br	4e30 <__alt_mem_Flash_flash_data+0xf4004e30>
    5370:	d9002f17 	ldw	r4,188(sp)
    5374:	b80b883a 	mov	r5,r23
    5378:	b00d883a 	mov	r6,r22
    537c:	000c70c0 	call	c70c <__ssprint_r>
    5380:	1039531e 	bne	r2,zero,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    5384:	dc002617 	ldw	r16,152(sp)
    5388:	d8c02017 	ldw	r3,128(sp)
    538c:	d8801f17 	ldw	r2,124(sp)
    5390:	da000404 	addi	r8,sp,16
    5394:	003e7106 	br	4d5c <__alt_mem_Flash_flash_data+0xf4004d5c>
    5398:	00c00b44 	movi	r3,45
    539c:	64a0003c 	xorhi	r18,r12,32768
    53a0:	d8c02a05 	stb	r3,168(sp)
    53a4:	003ea806 	br	4e48 <__alt_mem_Flash_flash_data+0xf4004e48>
    53a8:	4f000044 	addi	fp,r9,1
    53ac:	003ead06 	br	4e64 <__alt_mem_Flash_flash_data+0xf4004e64>
    53b0:	d8c03417 	ldw	r3,208(sp)
    53b4:	00c0410e 	bge	zero,r3,54bc <___svfprintf_internal_r+0x1f0c>
    53b8:	04800044 	movi	r18,1
    53bc:	dac03317 	ldw	r11,204(sp)
    53c0:	92e5883a 	add	r18,r18,r11
    53c4:	9005883a 	mov	r2,r18
    53c8:	903ee60e 	bge	r18,zero,4f64 <__alt_mem_Flash_flash_data+0xf4004f64>
    53cc:	0005883a 	mov	r2,zero
    53d0:	003ee406 	br	4f64 <__alt_mem_Flash_flash_data+0xf4004f64>
    53d4:	d8c02617 	ldw	r3,152(sp)
    53d8:	d8c03415 	stw	r3,208(sp)
    53dc:	00c0310e 	bge	zero,r3,54a4 <___svfprintf_internal_r+0x1ef4>
    53e0:	48001f1e 	bne	r9,zero,5460 <___svfprintf_internal_r+0x1eb0>
    53e4:	8c40004c 	andi	r17,r17,1
    53e8:	88001d1e 	bne	r17,zero,5460 <___svfprintf_internal_r+0x1eb0>
    53ec:	1805883a 	mov	r2,r3
    53f0:	183edb0e 	bge	r3,zero,4f60 <__alt_mem_Flash_flash_data+0xf4004f60>
    53f4:	0005883a 	mov	r2,zero
    53f8:	003ed906 	br	4f60 <__alt_mem_Flash_flash_data+0xf4004f60>
    53fc:	d8802117 	ldw	r2,132(sp)
    5400:	003ec506 	br	4f18 <__alt_mem_Flash_flash_data+0xf4004f18>
    5404:	d9003717 	ldw	r4,220(sp)
    5408:	900b883a 	mov	r5,r18
    540c:	000d883a 	mov	r6,zero
    5410:	000f883a 	mov	r7,zero
    5414:	da004015 	stw	r8,256(sp)
    5418:	da403f15 	stw	r9,252(sp)
    541c:	da803e15 	stw	r10,248(sp)
    5420:	00114b00 	call	114b0 <__eqdf2>
    5424:	da004017 	ldw	r8,256(sp)
    5428:	da403f17 	ldw	r9,252(sp)
    542c:	da803e17 	ldw	r10,248(sp)
    5430:	103f2c26 	beq	r2,zero,50e4 <__alt_mem_Flash_flash_data+0xf40050e4>
    5434:	00800044 	movi	r2,1
    5438:	1707c83a 	sub	r3,r2,fp
    543c:	d8c02615 	stw	r3,152(sp)
    5440:	003f2906 	br	50e8 <__alt_mem_Flash_flash_data+0xf40050e8>
    5444:	db003417 	ldw	r12,208(sp)
    5448:	64800044 	addi	r18,r12,1
    544c:	9005883a 	mov	r2,r18
    5450:	903ec40e 	bge	r18,zero,4f64 <__alt_mem_Flash_flash_data+0xf4004f64>
    5454:	003fdd06 	br	53cc <__alt_mem_Flash_flash_data+0xf40053cc>
    5458:	0005883a 	mov	r2,zero
    545c:	003f5c06 	br	51d0 <__alt_mem_Flash_flash_data+0xf40051d0>
    5460:	dac03417 	ldw	r11,208(sp)
    5464:	4a400044 	addi	r9,r9,1
    5468:	5a65883a 	add	r18,r11,r9
    546c:	9005883a 	mov	r2,r18
    5470:	903ebc0e 	bge	r18,zero,4f64 <__alt_mem_Flash_flash_data+0xf4004f64>
    5474:	003fd506 	br	53cc <__alt_mem_Flash_flash_data+0xf40053cc>
    5478:	008000b4 	movhi	r2,2
    547c:	10809084 	addi	r2,r2,578
    5480:	d8802b15 	stw	r2,172(sp)
    5484:	003d2b06 	br	4934 <__alt_mem_Flash_flash_data+0xf4004934>
    5488:	00800c04 	movi	r2,48
    548c:	e0c00c04 	addi	r3,fp,48
    5490:	d8802345 	stb	r2,141(sp)
    5494:	d8c02385 	stb	r3,142(sp)
    5498:	d88023c4 	addi	r2,sp,143
    549c:	dd4022c4 	addi	r21,sp,139
    54a0:	003f9e06 	br	531c <__alt_mem_Flash_flash_data+0xf400531c>
    54a4:	4800081e 	bne	r9,zero,54c8 <___svfprintf_internal_r+0x1f18>
    54a8:	8c40004c 	andi	r17,r17,1
    54ac:	8800061e 	bne	r17,zero,54c8 <___svfprintf_internal_r+0x1f18>
    54b0:	00800044 	movi	r2,1
    54b4:	1025883a 	mov	r18,r2
    54b8:	003eaa06 	br	4f64 <__alt_mem_Flash_flash_data+0xf4004f64>
    54bc:	04800084 	movi	r18,2
    54c0:	90e5c83a 	sub	r18,r18,r3
    54c4:	003fbd06 	br	53bc <__alt_mem_Flash_flash_data+0xf40053bc>
    54c8:	4c800084 	addi	r18,r9,2
    54cc:	9005883a 	mov	r2,r18
    54d0:	903ea40e 	bge	r18,zero,4f64 <__alt_mem_Flash_flash_data+0xf4004f64>
    54d4:	003fbd06 	br	53cc <__alt_mem_Flash_flash_data+0xf40053cc>
    54d8:	dac02d17 	ldw	r11,180(sp)
    54dc:	5a400017 	ldw	r9,0(r11)
    54e0:	5ac00104 	addi	r11,r11,4
    54e4:	dac02d15 	stw	r11,180(sp)
    54e8:	483e410e 	bge	r9,zero,4df0 <__alt_mem_Flash_flash_data+0xf4004df0>
    54ec:	027fffc4 	movi	r9,-1
    54f0:	1c000047 	ldb	r16,1(r3)
    54f4:	00388406 	br	3708 <__alt_mem_Flash_flash_data+0xf4003708>
    54f8:	00800b44 	movi	r2,45
    54fc:	0739c83a 	sub	fp,zero,fp
    5500:	d8802305 	stb	r2,140(sp)
    5504:	003f5e06 	br	5280 <__alt_mem_Flash_flash_data+0xf4005280>
    5508:	0005883a 	mov	r2,zero
    550c:	003f8c06 	br	5340 <__alt_mem_Flash_flash_data+0xf4005340>
    5510:	88a2703a 	and	r17,r17,r2
    5514:	883f8826 	beq	r17,zero,5338 <__alt_mem_Flash_flash_data+0xf4005338>
    5518:	003f8606 	br	5334 <__alt_mem_Flash_flash_data+0xf4005334>
    551c:	d8802344 	addi	r2,sp,141
    5520:	003f7e06 	br	531c <__alt_mem_Flash_flash_data+0xf400531c>
    5524:	d8c02617 	ldw	r3,152(sp)
    5528:	003f4f06 	br	5268 <__alt_mem_Flash_flash_data+0xf4005268>
    552c:	dac02f17 	ldw	r11,188(sp)
    5530:	00800304 	movi	r2,12
    5534:	58800015 	stw	r2,0(r11)
    5538:	00bfffc4 	movi	r2,-1
    553c:	0038e806 	br	38e0 <__alt_mem_Flash_flash_data+0xf40038e0>

00005540 <___vfprintf_internal_r>:
    5540:	deffb604 	addi	sp,sp,-296
    5544:	dfc04915 	stw	ra,292(sp)
    5548:	ddc04715 	stw	r23,284(sp)
    554c:	dd804615 	stw	r22,280(sp)
    5550:	282f883a 	mov	r23,r5
    5554:	202d883a 	mov	r22,r4
    5558:	d9802a15 	stw	r6,168(sp)
    555c:	d9c02d15 	stw	r7,180(sp)
    5560:	df004815 	stw	fp,288(sp)
    5564:	dd404515 	stw	r21,276(sp)
    5568:	dd004415 	stw	r20,272(sp)
    556c:	dcc04315 	stw	r19,268(sp)
    5570:	dc804215 	stw	r18,264(sp)
    5574:	dc404115 	stw	r17,260(sp)
    5578:	dc004015 	stw	r16,256(sp)
    557c:	000a1280 	call	a128 <_localeconv_r>
    5580:	10800017 	ldw	r2,0(r2)
    5584:	1009883a 	mov	r4,r2
    5588:	d8803515 	stw	r2,212(sp)
    558c:	00035180 	call	3518 <strlen>
    5590:	d8803815 	stw	r2,224(sp)
    5594:	b0000226 	beq	r22,zero,55a0 <___vfprintf_internal_r+0x60>
    5598:	b0800e17 	ldw	r2,56(r22)
    559c:	1000e126 	beq	r2,zero,5924 <___vfprintf_internal_r+0x3e4>
    55a0:	b880030b 	ldhu	r2,12(r23)
    55a4:	10c8000c 	andi	r3,r2,8192
    55a8:	1800061e 	bne	r3,zero,55c4 <___vfprintf_internal_r+0x84>
    55ac:	b9001917 	ldw	r4,100(r23)
    55b0:	00f7ffc4 	movi	r3,-8193
    55b4:	10880014 	ori	r2,r2,8192
    55b8:	20c6703a 	and	r3,r4,r3
    55bc:	b880030d 	sth	r2,12(r23)
    55c0:	b8c01915 	stw	r3,100(r23)
    55c4:	10c0020c 	andi	r3,r2,8
    55c8:	1800a726 	beq	r3,zero,5868 <___vfprintf_internal_r+0x328>
    55cc:	b8c00417 	ldw	r3,16(r23)
    55d0:	1800a526 	beq	r3,zero,5868 <___vfprintf_internal_r+0x328>
    55d4:	1080068c 	andi	r2,r2,26
    55d8:	00c00284 	movi	r3,10
    55dc:	10c0aa26 	beq	r2,r3,5888 <___vfprintf_internal_r+0x348>
    55e0:	dac01e04 	addi	r11,sp,120
    55e4:	db001dc4 	addi	r12,sp,119
    55e8:	d8800404 	addi	r2,sp,16
    55ec:	050000b4 	movhi	r20,2
    55f0:	dac02815 	stw	r11,160(sp)
    55f4:	5b17c83a 	sub	r11,r11,r12
    55f8:	a5009884 	addi	r20,r20,610
    55fc:	db002915 	stw	r12,164(sp)
    5600:	d8801e15 	stw	r2,120(sp)
    5604:	d8002015 	stw	zero,128(sp)
    5608:	d8001f15 	stw	zero,124(sp)
    560c:	d8003315 	stw	zero,204(sp)
    5610:	d8003715 	stw	zero,220(sp)
    5614:	d8003915 	stw	zero,228(sp)
    5618:	1011883a 	mov	r8,r2
    561c:	d8003b15 	stw	zero,236(sp)
    5620:	d8003a15 	stw	zero,232(sp)
    5624:	d8002f15 	stw	zero,188(sp)
    5628:	dac03c15 	stw	r11,240(sp)
    562c:	db002a17 	ldw	r12,168(sp)
    5630:	60800007 	ldb	r2,0(r12)
    5634:	1000be26 	beq	r2,zero,5930 <___vfprintf_internal_r+0x3f0>
    5638:	00c00944 	movi	r3,37
    563c:	10c0bc26 	beq	r2,r3,5930 <___vfprintf_internal_r+0x3f0>
    5640:	6021883a 	mov	r16,r12
    5644:	00000106 	br	564c <___vfprintf_internal_r+0x10c>
    5648:	10c08426 	beq	r2,r3,585c <___vfprintf_internal_r+0x31c>
    564c:	84000044 	addi	r16,r16,1
    5650:	80800007 	ldb	r2,0(r16)
    5654:	103ffc1e 	bne	r2,zero,5648 <__alt_mem_Flash_flash_data+0xf4005648>
    5658:	dac02a17 	ldw	r11,168(sp)
    565c:	82e3c83a 	sub	r17,r16,r11
    5660:	88000f26 	beq	r17,zero,56a0 <___vfprintf_internal_r+0x160>
    5664:	d8c02017 	ldw	r3,128(sp)
    5668:	d8801f17 	ldw	r2,124(sp)
    566c:	dac02a17 	ldw	r11,168(sp)
    5670:	1c47883a 	add	r3,r3,r17
    5674:	10800044 	addi	r2,r2,1
    5678:	d8c02015 	stw	r3,128(sp)
    567c:	42c00015 	stw	r11,0(r8)
    5680:	44400115 	stw	r17,4(r8)
    5684:	d8801f15 	stw	r2,124(sp)
    5688:	00c001c4 	movi	r3,7
    568c:	18809316 	blt	r3,r2,58dc <___vfprintf_internal_r+0x39c>
    5690:	42000204 	addi	r8,r8,8
    5694:	db002f17 	ldw	r12,188(sp)
    5698:	6459883a 	add	r12,r12,r17
    569c:	db002f15 	stw	r12,188(sp)
    56a0:	80800007 	ldb	r2,0(r16)
    56a4:	10009426 	beq	r2,zero,58f8 <___vfprintf_internal_r+0x3b8>
    56a8:	80800044 	addi	r2,r16,1
    56ac:	84000047 	ldb	r16,1(r16)
    56b0:	d8002785 	stb	zero,158(sp)
    56b4:	000d883a 	mov	r6,zero
    56b8:	027fffc4 	movi	r9,-1
    56bc:	d8002e15 	stw	zero,184(sp)
    56c0:	0023883a 	mov	r17,zero
    56c4:	01001604 	movi	r4,88
    56c8:	01400244 	movi	r5,9
    56cc:	02800a84 	movi	r10,42
    56d0:	01c01b04 	movi	r7,108
    56d4:	10c00044 	addi	r3,r2,1
    56d8:	80bff804 	addi	r2,r16,-32
    56dc:	2082cd36 	bltu	r4,r2,6214 <___vfprintf_internal_r+0xcd4>
    56e0:	100490ba 	slli	r2,r2,2
    56e4:	02c00034 	movhi	r11,0
    56e8:	5ad5be04 	addi	r11,r11,22264
    56ec:	12c5883a 	add	r2,r2,r11
    56f0:	10800017 	ldw	r2,0(r2)
    56f4:	1000683a 	jmp	r2
    56f8:	0000602c 	andhi	zero,zero,384
    56fc:	00006214 	movui	zero,392
    5700:	00006214 	movui	zero,392
    5704:	0000617c 	xorhi	zero,zero,389
    5708:	00006214 	movui	zero,392
    570c:	00006214 	movui	zero,392
    5710:	00006214 	movui	zero,392
    5714:	00006214 	movui	zero,392
    5718:	00006214 	movui	zero,392
    571c:	00006214 	movui	zero,392
    5720:	0000604c 	andi	zero,zero,385
    5724:	00006078 	rdprs	zero,zero,385
    5728:	00006214 	movui	zero,392
    572c:	00005938 	rdprs	zero,zero,356
    5730:	00005948 	cmpgei	zero,zero,357
    5734:	00006214 	movui	zero,392
    5738:	00005988 	cmpgei	zero,zero,358
    573c:	00005998 	cmpnei	zero,zero,358
    5740:	00005998 	cmpnei	zero,zero,358
    5744:	00005998 	cmpnei	zero,zero,358
    5748:	00005998 	cmpnei	zero,zero,358
    574c:	00005998 	cmpnei	zero,zero,358
    5750:	00005998 	cmpnei	zero,zero,358
    5754:	00005998 	cmpnei	zero,zero,358
    5758:	00005998 	cmpnei	zero,zero,358
    575c:	00005998 	cmpnei	zero,zero,358
    5760:	00006214 	movui	zero,392
    5764:	00006214 	movui	zero,392
    5768:	00006214 	movui	zero,392
    576c:	00006214 	movui	zero,392
    5770:	00006214 	movui	zero,392
    5774:	00006214 	movui	zero,392
    5778:	00006214 	movui	zero,392
    577c:	00006214 	movui	zero,392
    5780:	00006214 	movui	zero,392
    5784:	00006214 	movui	zero,392
    5788:	000059cc 	andi	zero,zero,359
    578c:	00005e3c 	xorhi	zero,zero,376
    5790:	00006214 	movui	zero,392
    5794:	00005e3c 	xorhi	zero,zero,376
    5798:	00006214 	movui	zero,392
    579c:	00006214 	movui	zero,392
    57a0:	00006214 	movui	zero,392
    57a4:	00006214 	movui	zero,392
    57a8:	00005f28 	cmpgeui	zero,zero,380
    57ac:	00006214 	movui	zero,392
    57b0:	00006214 	movui	zero,392
    57b4:	00005dd0 	cmplti	zero,zero,375
    57b8:	00006214 	movui	zero,392
    57bc:	00006214 	movui	zero,392
    57c0:	00006214 	movui	zero,392
    57c4:	00006214 	movui	zero,392
    57c8:	00006214 	movui	zero,392
    57cc:	00005e0c 	andi	zero,zero,376
    57d0:	00006214 	movui	zero,392
    57d4:	00006214 	movui	zero,392
    57d8:	00005fd0 	cmplti	zero,zero,383
    57dc:	00006214 	movui	zero,392
    57e0:	00006214 	movui	zero,392
    57e4:	00006214 	movui	zero,392
    57e8:	00006214 	movui	zero,392
    57ec:	00006214 	movui	zero,392
    57f0:	00006214 	movui	zero,392
    57f4:	00006214 	movui	zero,392
    57f8:	00006214 	movui	zero,392
    57fc:	00006214 	movui	zero,392
    5800:	00006214 	movui	zero,392
    5804:	00006088 	cmpgei	zero,zero,386
    5808:	00005f38 	rdprs	zero,zero,380
    580c:	00005e3c 	xorhi	zero,zero,376
    5810:	00005e3c 	xorhi	zero,zero,376
    5814:	00005e3c 	xorhi	zero,zero,376
    5818:	00005f78 	rdprs	zero,zero,381
    581c:	00005f38 	rdprs	zero,zero,380
    5820:	00006214 	movui	zero,392
    5824:	00006214 	movui	zero,392
    5828:	00005f88 	cmpgei	zero,zero,382
    582c:	00006214 	movui	zero,392
    5830:	00005f9c 	xori	zero,zero,382
    5834:	000061d8 	cmpnei	zero,zero,391
    5838:	00005ee0 	cmpeqi	zero,zero,379
    583c:	0000618c 	andi	zero,zero,390
    5840:	00006214 	movui	zero,392
    5844:	000060c8 	cmpgei	zero,zero,387
    5848:	00006214 	movui	zero,392
    584c:	0000619c 	xori	zero,zero,390
    5850:	00006214 	movui	zero,392
    5854:	00006214 	movui	zero,392
    5858:	0000613c 	xorhi	zero,zero,388
    585c:	db002a17 	ldw	r12,168(sp)
    5860:	8323c83a 	sub	r17,r16,r12
    5864:	003f7e06 	br	5660 <__alt_mem_Flash_flash_data+0xf4005660>
    5868:	b009883a 	mov	r4,r22
    586c:	b80b883a 	mov	r5,r23
    5870:	00075700 	call	7570 <__swsetup_r>
    5874:	10000c1e 	bne	r2,zero,58a8 <___vfprintf_internal_r+0x368>
    5878:	b880030b 	ldhu	r2,12(r23)
    587c:	00c00284 	movi	r3,10
    5880:	1080068c 	andi	r2,r2,26
    5884:	10ff561e 	bne	r2,r3,55e0 <__alt_mem_Flash_flash_data+0xf40055e0>
    5888:	b880038f 	ldh	r2,14(r23)
    588c:	103f5416 	blt	r2,zero,55e0 <__alt_mem_Flash_flash_data+0xf40055e0>
    5890:	d9802a17 	ldw	r6,168(sp)
    5894:	d9c02d17 	ldw	r7,180(sp)
    5898:	b009883a 	mov	r4,r22
    589c:	b80b883a 	mov	r5,r23
    58a0:	00074b40 	call	74b4 <__sbprintf>
    58a4:	00000106 	br	58ac <___vfprintf_internal_r+0x36c>
    58a8:	00bfffc4 	movi	r2,-1
    58ac:	dfc04917 	ldw	ra,292(sp)
    58b0:	df004817 	ldw	fp,288(sp)
    58b4:	ddc04717 	ldw	r23,284(sp)
    58b8:	dd804617 	ldw	r22,280(sp)
    58bc:	dd404517 	ldw	r21,276(sp)
    58c0:	dd004417 	ldw	r20,272(sp)
    58c4:	dcc04317 	ldw	r19,268(sp)
    58c8:	dc804217 	ldw	r18,264(sp)
    58cc:	dc404117 	ldw	r17,260(sp)
    58d0:	dc004017 	ldw	r16,256(sp)
    58d4:	dec04a04 	addi	sp,sp,296
    58d8:	f800283a 	ret
    58dc:	b009883a 	mov	r4,r22
    58e0:	b80b883a 	mov	r5,r23
    58e4:	d9801e04 	addi	r6,sp,120
    58e8:	000da0c0 	call	da0c <__sprint_r>
    58ec:	1000081e 	bne	r2,zero,5910 <___vfprintf_internal_r+0x3d0>
    58f0:	da000404 	addi	r8,sp,16
    58f4:	003f6706 	br	5694 <__alt_mem_Flash_flash_data+0xf4005694>
    58f8:	d8802017 	ldw	r2,128(sp)
    58fc:	10000426 	beq	r2,zero,5910 <___vfprintf_internal_r+0x3d0>
    5900:	b009883a 	mov	r4,r22
    5904:	b80b883a 	mov	r5,r23
    5908:	d9801e04 	addi	r6,sp,120
    590c:	000da0c0 	call	da0c <__sprint_r>
    5910:	b880030b 	ldhu	r2,12(r23)
    5914:	1080100c 	andi	r2,r2,64
    5918:	103fe31e 	bne	r2,zero,58a8 <__alt_mem_Flash_flash_data+0xf40058a8>
    591c:	d8802f17 	ldw	r2,188(sp)
    5920:	003fe206 	br	58ac <__alt_mem_Flash_flash_data+0xf40058ac>
    5924:	b009883a 	mov	r4,r22
    5928:	00095d00 	call	95d0 <__sinit>
    592c:	003f1c06 	br	55a0 <__alt_mem_Flash_flash_data+0xf40055a0>
    5930:	dc002a17 	ldw	r16,168(sp)
    5934:	003f5a06 	br	56a0 <__alt_mem_Flash_flash_data+0xf40056a0>
    5938:	1805883a 	mov	r2,r3
    593c:	8c400114 	ori	r17,r17,4
    5940:	1c000007 	ldb	r16,0(r3)
    5944:	003f6306 	br	56d4 <__alt_mem_Flash_flash_data+0xf40056d4>
    5948:	1c000007 	ldb	r16,0(r3)
    594c:	18800044 	addi	r2,r3,1
    5950:	8286ad26 	beq	r16,r10,7408 <___vfprintf_internal_r+0x1ec8>
    5954:	82fff404 	addi	r11,r16,-48
    5958:	1007883a 	mov	r3,r2
    595c:	0013883a 	mov	r9,zero
    5960:	2aff5d36 	bltu	r5,r11,56d8 <__alt_mem_Flash_flash_data+0xf40056d8>
    5964:	1c000007 	ldb	r16,0(r3)
    5968:	4a4002a4 	muli	r9,r9,10
    596c:	18c00044 	addi	r3,r3,1
    5970:	5a53883a 	add	r9,r11,r9
    5974:	82fff404 	addi	r11,r16,-48
    5978:	2afffa2e 	bgeu	r5,r11,5964 <__alt_mem_Flash_flash_data+0xf4005964>
    597c:	483f560e 	bge	r9,zero,56d8 <__alt_mem_Flash_flash_data+0xf40056d8>
    5980:	027fffc4 	movi	r9,-1
    5984:	003f5406 	br	56d8 <__alt_mem_Flash_flash_data+0xf40056d8>
    5988:	8c402014 	ori	r17,r17,128
    598c:	1805883a 	mov	r2,r3
    5990:	1c000007 	ldb	r16,0(r3)
    5994:	003f4f06 	br	56d4 <__alt_mem_Flash_flash_data+0xf40056d4>
    5998:	1805883a 	mov	r2,r3
    599c:	d8002e15 	stw	zero,184(sp)
    59a0:	82fff404 	addi	r11,r16,-48
    59a4:	0019883a 	mov	r12,zero
    59a8:	14000007 	ldb	r16,0(r2)
    59ac:	630002a4 	muli	r12,r12,10
    59b0:	18c00044 	addi	r3,r3,1
    59b4:	1805883a 	mov	r2,r3
    59b8:	62d9883a 	add	r12,r12,r11
    59bc:	82fff404 	addi	r11,r16,-48
    59c0:	2afff92e 	bgeu	r5,r11,59a8 <__alt_mem_Flash_flash_data+0xf40059a8>
    59c4:	db002e15 	stw	r12,184(sp)
    59c8:	003f4306 	br	56d8 <__alt_mem_Flash_flash_data+0xf40056d8>
    59cc:	8c400414 	ori	r17,r17,16
    59d0:	d8c02a15 	stw	r3,168(sp)
    59d4:	d9802785 	stb	r6,158(sp)
    59d8:	8880080c 	andi	r2,r17,32
    59dc:	d8c02d17 	ldw	r3,180(sp)
    59e0:	10015a26 	beq	r2,zero,5f4c <___vfprintf_internal_r+0xa0c>
    59e4:	db002d17 	ldw	r12,180(sp)
    59e8:	18800117 	ldw	r2,4(r3)
    59ec:	1cc00017 	ldw	r19,0(r3)
    59f0:	63000204 	addi	r12,r12,8
    59f4:	db002d15 	stw	r12,180(sp)
    59f8:	1039883a 	mov	fp,r2
    59fc:	10044516 	blt	r2,zero,6b14 <___vfprintf_internal_r+0x15d4>
    5a00:	dd402783 	ldbu	r21,158(sp)
    5a04:	da403215 	stw	r9,200(sp)
    5a08:	00800044 	movi	r2,1
    5a0c:	9f06b03a 	or	r3,r19,fp
    5a10:	48000216 	blt	r9,zero,5a1c <___vfprintf_internal_r+0x4dc>
    5a14:	013fdfc4 	movi	r4,-129
    5a18:	8922703a 	and	r17,r17,r4
    5a1c:	1802071e 	bne	r3,zero,623c <___vfprintf_internal_r+0xcfc>
    5a20:	4802fa26 	beq	r9,zero,660c <___vfprintf_internal_r+0x10cc>
    5a24:	10803fcc 	andi	r2,r2,255
    5a28:	00c00044 	movi	r3,1
    5a2c:	10c22926 	beq	r2,r3,62d4 <___vfprintf_internal_r+0xd94>
    5a30:	00c00084 	movi	r3,2
    5a34:	10c31726 	beq	r2,r3,6694 <___vfprintf_internal_r+0x1154>
    5a38:	d8c01e04 	addi	r3,sp,120
    5a3c:	9808d0fa 	srli	r4,r19,3
    5a40:	e00a977a 	slli	r5,fp,29
    5a44:	e038d0fa 	srli	fp,fp,3
    5a48:	9cc001cc 	andi	r19,r19,7
    5a4c:	98800c04 	addi	r2,r19,48
    5a50:	18ffffc4 	addi	r3,r3,-1
    5a54:	2926b03a 	or	r19,r5,r4
    5a58:	18800005 	stb	r2,0(r3)
    5a5c:	9f08b03a 	or	r4,r19,fp
    5a60:	203ff61e 	bne	r4,zero,5a3c <__alt_mem_Flash_flash_data+0xf4005a3c>
    5a64:	8900004c 	andi	r4,r17,1
    5a68:	d8c03115 	stw	r3,196(sp)
    5a6c:	2003931e 	bne	r4,zero,68bc <___vfprintf_internal_r+0x137c>
    5a70:	dac02817 	ldw	r11,160(sp)
    5a74:	58e5c83a 	sub	r18,r11,r3
    5a78:	9005883a 	mov	r2,r18
    5a7c:	9240010e 	bge	r18,r9,5a84 <___vfprintf_internal_r+0x544>
    5a80:	4805883a 	mov	r2,r9
    5a84:	d8802b15 	stw	r2,172(sp)
    5a88:	d8003415 	stw	zero,208(sp)
    5a8c:	a8803fcc 	andi	r2,r21,255
    5a90:	1080201c 	xori	r2,r2,128
    5a94:	10bfe004 	addi	r2,r2,-128
    5a98:	10000326 	beq	r2,zero,5aa8 <___vfprintf_internal_r+0x568>
    5a9c:	db002b17 	ldw	r12,172(sp)
    5aa0:	63000044 	addi	r12,r12,1
    5aa4:	db002b15 	stw	r12,172(sp)
    5aa8:	88c0008c 	andi	r3,r17,2
    5aac:	d8c02c15 	stw	r3,176(sp)
    5ab0:	18000326 	beq	r3,zero,5ac0 <___vfprintf_internal_r+0x580>
    5ab4:	dac02b17 	ldw	r11,172(sp)
    5ab8:	5ac00084 	addi	r11,r11,2
    5abc:	dac02b15 	stw	r11,172(sp)
    5ac0:	8b00210c 	andi	r12,r17,132
    5ac4:	db003015 	stw	r12,192(sp)
    5ac8:	6001da1e 	bne	r12,zero,6234 <___vfprintf_internal_r+0xcf4>
    5acc:	dac02e17 	ldw	r11,184(sp)
    5ad0:	db002b17 	ldw	r12,172(sp)
    5ad4:	5b39c83a 	sub	fp,r11,r12
    5ad8:	0701d60e 	bge	zero,fp,6234 <___vfprintf_internal_r+0xcf4>
    5adc:	02400404 	movi	r9,16
    5ae0:	d8c02017 	ldw	r3,128(sp)
    5ae4:	d8801f17 	ldw	r2,124(sp)
    5ae8:	4f053c0e 	bge	r9,fp,6fdc <___vfprintf_internal_r+0x1a9c>
    5aec:	014000b4 	movhi	r5,2
    5af0:	29409c84 	addi	r5,r5,626
    5af4:	d9403615 	stw	r5,216(sp)
    5af8:	482b883a 	mov	r21,r9
    5afc:	04c001c4 	movi	r19,7
    5b00:	00000306 	br	5b10 <___vfprintf_internal_r+0x5d0>
    5b04:	e73ffc04 	addi	fp,fp,-16
    5b08:	42000204 	addi	r8,r8,8
    5b0c:	af00130e 	bge	r21,fp,5b5c <___vfprintf_internal_r+0x61c>
    5b10:	02c000b4 	movhi	r11,2
    5b14:	18c00404 	addi	r3,r3,16
    5b18:	10800044 	addi	r2,r2,1
    5b1c:	5ac09c84 	addi	r11,r11,626
    5b20:	42c00015 	stw	r11,0(r8)
    5b24:	45400115 	stw	r21,4(r8)
    5b28:	d8c02015 	stw	r3,128(sp)
    5b2c:	d8801f15 	stw	r2,124(sp)
    5b30:	98bff40e 	bge	r19,r2,5b04 <__alt_mem_Flash_flash_data+0xf4005b04>
    5b34:	b009883a 	mov	r4,r22
    5b38:	b80b883a 	mov	r5,r23
    5b3c:	d9801e04 	addi	r6,sp,120
    5b40:	000da0c0 	call	da0c <__sprint_r>
    5b44:	103f721e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    5b48:	e73ffc04 	addi	fp,fp,-16
    5b4c:	d8c02017 	ldw	r3,128(sp)
    5b50:	d8801f17 	ldw	r2,124(sp)
    5b54:	da000404 	addi	r8,sp,16
    5b58:	af3fed16 	blt	r21,fp,5b10 <__alt_mem_Flash_flash_data+0xf4005b10>
    5b5c:	db003617 	ldw	r12,216(sp)
    5b60:	e0c7883a 	add	r3,fp,r3
    5b64:	10800044 	addi	r2,r2,1
    5b68:	43000015 	stw	r12,0(r8)
    5b6c:	47000115 	stw	fp,4(r8)
    5b70:	d8c02015 	stw	r3,128(sp)
    5b74:	d8801f15 	stw	r2,124(sp)
    5b78:	010001c4 	movi	r4,7
    5b7c:	20830e16 	blt	r4,r2,67b8 <___vfprintf_internal_r+0x1278>
    5b80:	d8802787 	ldb	r2,158(sp)
    5b84:	42000204 	addi	r8,r8,8
    5b88:	10000c26 	beq	r2,zero,5bbc <___vfprintf_internal_r+0x67c>
    5b8c:	d8801f17 	ldw	r2,124(sp)
    5b90:	d9002784 	addi	r4,sp,158
    5b94:	18c00044 	addi	r3,r3,1
    5b98:	10800044 	addi	r2,r2,1
    5b9c:	41000015 	stw	r4,0(r8)
    5ba0:	01000044 	movi	r4,1
    5ba4:	41000115 	stw	r4,4(r8)
    5ba8:	d8c02015 	stw	r3,128(sp)
    5bac:	d8801f15 	stw	r2,124(sp)
    5bb0:	010001c4 	movi	r4,7
    5bb4:	2082a716 	blt	r4,r2,6654 <___vfprintf_internal_r+0x1114>
    5bb8:	42000204 	addi	r8,r8,8
    5bbc:	dac02c17 	ldw	r11,176(sp)
    5bc0:	58000c26 	beq	r11,zero,5bf4 <___vfprintf_internal_r+0x6b4>
    5bc4:	d8801f17 	ldw	r2,124(sp)
    5bc8:	d9002704 	addi	r4,sp,156
    5bcc:	18c00084 	addi	r3,r3,2
    5bd0:	10800044 	addi	r2,r2,1
    5bd4:	41000015 	stw	r4,0(r8)
    5bd8:	01000084 	movi	r4,2
    5bdc:	41000115 	stw	r4,4(r8)
    5be0:	d8c02015 	stw	r3,128(sp)
    5be4:	d8801f15 	stw	r2,124(sp)
    5be8:	010001c4 	movi	r4,7
    5bec:	2082a116 	blt	r4,r2,6674 <___vfprintf_internal_r+0x1134>
    5bf0:	42000204 	addi	r8,r8,8
    5bf4:	db003017 	ldw	r12,192(sp)
    5bf8:	00802004 	movi	r2,128
    5bfc:	60820326 	beq	r12,r2,640c <___vfprintf_internal_r+0xecc>
    5c00:	db003217 	ldw	r12,200(sp)
    5c04:	64abc83a 	sub	r21,r12,r18
    5c08:	0540260e 	bge	zero,r21,5ca4 <___vfprintf_internal_r+0x764>
    5c0c:	07000404 	movi	fp,16
    5c10:	d8801f17 	ldw	r2,124(sp)
    5c14:	e544570e 	bge	fp,r21,6d74 <___vfprintf_internal_r+0x1834>
    5c18:	014000b4 	movhi	r5,2
    5c1c:	29409884 	addi	r5,r5,610
    5c20:	d9402c15 	stw	r5,176(sp)
    5c24:	04c001c4 	movi	r19,7
    5c28:	00000306 	br	5c38 <___vfprintf_internal_r+0x6f8>
    5c2c:	ad7ffc04 	addi	r21,r21,-16
    5c30:	42000204 	addi	r8,r8,8
    5c34:	e540110e 	bge	fp,r21,5c7c <___vfprintf_internal_r+0x73c>
    5c38:	18c00404 	addi	r3,r3,16
    5c3c:	10800044 	addi	r2,r2,1
    5c40:	45000015 	stw	r20,0(r8)
    5c44:	47000115 	stw	fp,4(r8)
    5c48:	d8c02015 	stw	r3,128(sp)
    5c4c:	d8801f15 	stw	r2,124(sp)
    5c50:	98bff60e 	bge	r19,r2,5c2c <__alt_mem_Flash_flash_data+0xf4005c2c>
    5c54:	b009883a 	mov	r4,r22
    5c58:	b80b883a 	mov	r5,r23
    5c5c:	d9801e04 	addi	r6,sp,120
    5c60:	000da0c0 	call	da0c <__sprint_r>
    5c64:	103f2a1e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    5c68:	ad7ffc04 	addi	r21,r21,-16
    5c6c:	d8c02017 	ldw	r3,128(sp)
    5c70:	d8801f17 	ldw	r2,124(sp)
    5c74:	da000404 	addi	r8,sp,16
    5c78:	e57fef16 	blt	fp,r21,5c38 <__alt_mem_Flash_flash_data+0xf4005c38>
    5c7c:	dac02c17 	ldw	r11,176(sp)
    5c80:	1d47883a 	add	r3,r3,r21
    5c84:	10800044 	addi	r2,r2,1
    5c88:	42c00015 	stw	r11,0(r8)
    5c8c:	45400115 	stw	r21,4(r8)
    5c90:	d8c02015 	stw	r3,128(sp)
    5c94:	d8801f15 	stw	r2,124(sp)
    5c98:	010001c4 	movi	r4,7
    5c9c:	20826516 	blt	r4,r2,6634 <___vfprintf_internal_r+0x10f4>
    5ca0:	42000204 	addi	r8,r8,8
    5ca4:	8880400c 	andi	r2,r17,256
    5ca8:	1001901e 	bne	r2,zero,62ec <___vfprintf_internal_r+0xdac>
    5cac:	d8801f17 	ldw	r2,124(sp)
    5cb0:	db003117 	ldw	r12,196(sp)
    5cb4:	1c87883a 	add	r3,r3,r18
    5cb8:	10800044 	addi	r2,r2,1
    5cbc:	43000015 	stw	r12,0(r8)
    5cc0:	44800115 	stw	r18,4(r8)
    5cc4:	d8c02015 	stw	r3,128(sp)
    5cc8:	d8801f15 	stw	r2,124(sp)
    5ccc:	010001c4 	movi	r4,7
    5cd0:	20824016 	blt	r4,r2,65d4 <___vfprintf_internal_r+0x1094>
    5cd4:	42000204 	addi	r8,r8,8
    5cd8:	8c40010c 	andi	r17,r17,4
    5cdc:	88003126 	beq	r17,zero,5da4 <___vfprintf_internal_r+0x864>
    5ce0:	db002e17 	ldw	r12,184(sp)
    5ce4:	dac02b17 	ldw	r11,172(sp)
    5ce8:	62e1c83a 	sub	r16,r12,r11
    5cec:	04002d0e 	bge	zero,r16,5da4 <___vfprintf_internal_r+0x864>
    5cf0:	04400404 	movi	r17,16
    5cf4:	d8801f17 	ldw	r2,124(sp)
    5cf8:	8c05150e 	bge	r17,r16,7150 <___vfprintf_internal_r+0x1c10>
    5cfc:	010000b4 	movhi	r4,2
    5d00:	21009c84 	addi	r4,r4,626
    5d04:	d9003615 	stw	r4,216(sp)
    5d08:	048001c4 	movi	r18,7
    5d0c:	00000306 	br	5d1c <___vfprintf_internal_r+0x7dc>
    5d10:	843ffc04 	addi	r16,r16,-16
    5d14:	42000204 	addi	r8,r8,8
    5d18:	8c00130e 	bge	r17,r16,5d68 <___vfprintf_internal_r+0x828>
    5d1c:	014000b4 	movhi	r5,2
    5d20:	18c00404 	addi	r3,r3,16
    5d24:	10800044 	addi	r2,r2,1
    5d28:	29409c84 	addi	r5,r5,626
    5d2c:	41400015 	stw	r5,0(r8)
    5d30:	44400115 	stw	r17,4(r8)
    5d34:	d8c02015 	stw	r3,128(sp)
    5d38:	d8801f15 	stw	r2,124(sp)
    5d3c:	90bff40e 	bge	r18,r2,5d10 <__alt_mem_Flash_flash_data+0xf4005d10>
    5d40:	b009883a 	mov	r4,r22
    5d44:	b80b883a 	mov	r5,r23
    5d48:	d9801e04 	addi	r6,sp,120
    5d4c:	000da0c0 	call	da0c <__sprint_r>
    5d50:	103eef1e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    5d54:	843ffc04 	addi	r16,r16,-16
    5d58:	d8c02017 	ldw	r3,128(sp)
    5d5c:	d8801f17 	ldw	r2,124(sp)
    5d60:	da000404 	addi	r8,sp,16
    5d64:	8c3fed16 	blt	r17,r16,5d1c <__alt_mem_Flash_flash_data+0xf4005d1c>
    5d68:	dac03617 	ldw	r11,216(sp)
    5d6c:	1c07883a 	add	r3,r3,r16
    5d70:	10800044 	addi	r2,r2,1
    5d74:	42c00015 	stw	r11,0(r8)
    5d78:	44000115 	stw	r16,4(r8)
    5d7c:	d8c02015 	stw	r3,128(sp)
    5d80:	d8801f15 	stw	r2,124(sp)
    5d84:	010001c4 	movi	r4,7
    5d88:	2080060e 	bge	r4,r2,5da4 <___vfprintf_internal_r+0x864>
    5d8c:	b009883a 	mov	r4,r22
    5d90:	b80b883a 	mov	r5,r23
    5d94:	d9801e04 	addi	r6,sp,120
    5d98:	000da0c0 	call	da0c <__sprint_r>
    5d9c:	103edc1e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    5da0:	d8c02017 	ldw	r3,128(sp)
    5da4:	d8802b17 	ldw	r2,172(sp)
    5da8:	db002e17 	ldw	r12,184(sp)
    5dac:	1300010e 	bge	r2,r12,5db4 <___vfprintf_internal_r+0x874>
    5db0:	6005883a 	mov	r2,r12
    5db4:	dac02f17 	ldw	r11,188(sp)
    5db8:	5897883a 	add	r11,r11,r2
    5dbc:	dac02f15 	stw	r11,188(sp)
    5dc0:	18020c1e 	bne	r3,zero,65f4 <___vfprintf_internal_r+0x10b4>
    5dc4:	d8001f15 	stw	zero,124(sp)
    5dc8:	da000404 	addi	r8,sp,16
    5dcc:	003e1706 	br	562c <__alt_mem_Flash_flash_data+0xf400562c>
    5dd0:	8c400414 	ori	r17,r17,16
    5dd4:	d8c02a15 	stw	r3,168(sp)
    5dd8:	8880080c 	andi	r2,r17,32
    5ddc:	10010126 	beq	r2,zero,61e4 <___vfprintf_internal_r+0xca4>
    5de0:	db002d17 	ldw	r12,180(sp)
    5de4:	0005883a 	mov	r2,zero
    5de8:	64c00017 	ldw	r19,0(r12)
    5dec:	67000117 	ldw	fp,4(r12)
    5df0:	63000204 	addi	r12,r12,8
    5df4:	db002d15 	stw	r12,180(sp)
    5df8:	9f06b03a 	or	r3,r19,fp
    5dfc:	d8002785 	stb	zero,158(sp)
    5e00:	da403215 	stw	r9,200(sp)
    5e04:	002b883a 	mov	r21,zero
    5e08:	003f0106 	br	5a10 <__alt_mem_Flash_flash_data+0xf4005a10>
    5e0c:	8c400414 	ori	r17,r17,16
    5e10:	d8c02a15 	stw	r3,168(sp)
    5e14:	8880080c 	andi	r2,r17,32
    5e18:	1000e326 	beq	r2,zero,61a8 <___vfprintf_internal_r+0xc68>
    5e1c:	dac02d17 	ldw	r11,180(sp)
    5e20:	00800044 	movi	r2,1
    5e24:	5cc00017 	ldw	r19,0(r11)
    5e28:	5f000117 	ldw	fp,4(r11)
    5e2c:	5ac00204 	addi	r11,r11,8
    5e30:	dac02d15 	stw	r11,180(sp)
    5e34:	9f06b03a 	or	r3,r19,fp
    5e38:	003ff006 	br	5dfc <__alt_mem_Flash_flash_data+0xf4005dfc>
    5e3c:	db002d17 	ldw	r12,180(sp)
    5e40:	dac02d17 	ldw	r11,180(sp)
    5e44:	d8c02a15 	stw	r3,168(sp)
    5e48:	63000017 	ldw	r12,0(r12)
    5e4c:	5ac00117 	ldw	r11,4(r11)
    5e50:	d9802785 	stb	r6,158(sp)
    5e54:	6009883a 	mov	r4,r12
    5e58:	580b883a 	mov	r5,r11
    5e5c:	db003715 	stw	r12,220(sp)
    5e60:	da003f15 	stw	r8,252(sp)
    5e64:	da403e15 	stw	r9,248(sp)
    5e68:	dac03915 	stw	r11,228(sp)
    5e6c:	000c4640 	call	c464 <__fpclassifyd>
    5e70:	db002d17 	ldw	r12,180(sp)
    5e74:	04800044 	movi	r18,1
    5e78:	da003f17 	ldw	r8,252(sp)
    5e7c:	64c00204 	addi	r19,r12,8
    5e80:	da403e17 	ldw	r9,248(sp)
    5e84:	d9003717 	ldw	r4,220(sp)
    5e88:	d9403917 	ldw	r5,228(sp)
    5e8c:	14832b1e 	bne	r2,r18,6b3c <___vfprintf_internal_r+0x15fc>
    5e90:	000d883a 	mov	r6,zero
    5e94:	000f883a 	mov	r7,zero
    5e98:	00116140 	call	11614 <__ledf2>
    5e9c:	da003f17 	ldw	r8,252(sp)
    5ea0:	1004b716 	blt	r2,zero,7180 <___vfprintf_internal_r+0x1c40>
    5ea4:	dd402783 	ldbu	r21,158(sp)
    5ea8:	008011c4 	movi	r2,71
    5eac:	14040e0e 	bge	r2,r16,6ee8 <___vfprintf_internal_r+0x19a8>
    5eb0:	00c000b4 	movhi	r3,2
    5eb4:	18c08104 	addi	r3,r3,516
    5eb8:	d8c03115 	stw	r3,196(sp)
    5ebc:	02c000c4 	movi	r11,3
    5ec0:	00bfdfc4 	movi	r2,-129
    5ec4:	dac02b15 	stw	r11,172(sp)
    5ec8:	88a2703a 	and	r17,r17,r2
    5ecc:	dcc02d15 	stw	r19,180(sp)
    5ed0:	5825883a 	mov	r18,r11
    5ed4:	d8003215 	stw	zero,200(sp)
    5ed8:	d8003415 	stw	zero,208(sp)
    5edc:	003eeb06 	br	5a8c <__alt_mem_Flash_flash_data+0xf4005a8c>
    5ee0:	db002d17 	ldw	r12,180(sp)
    5ee4:	00800c04 	movi	r2,48
    5ee8:	d8802705 	stb	r2,156(sp)
    5eec:	64c00017 	ldw	r19,0(r12)
    5ef0:	00801e04 	movi	r2,120
    5ef4:	d8802745 	stb	r2,157(sp)
    5ef8:	008000b4 	movhi	r2,2
    5efc:	10808904 	addi	r2,r2,548
    5f00:	63000104 	addi	r12,r12,4
    5f04:	d8c02a15 	stw	r3,168(sp)
    5f08:	d8803b15 	stw	r2,236(sp)
    5f0c:	0039883a 	mov	fp,zero
    5f10:	8c400094 	ori	r17,r17,2
    5f14:	db002d15 	stw	r12,180(sp)
    5f18:	00800084 	movi	r2,2
    5f1c:	04001e04 	movi	r16,120
    5f20:	9807883a 	mov	r3,r19
    5f24:	003fb506 	br	5dfc <__alt_mem_Flash_flash_data+0xf4005dfc>
    5f28:	8c400214 	ori	r17,r17,8
    5f2c:	1805883a 	mov	r2,r3
    5f30:	1c000007 	ldb	r16,0(r3)
    5f34:	003de706 	br	56d4 <__alt_mem_Flash_flash_data+0xf40056d4>
    5f38:	d8c02a15 	stw	r3,168(sp)
    5f3c:	d9802785 	stb	r6,158(sp)
    5f40:	8880080c 	andi	r2,r17,32
    5f44:	d8c02d17 	ldw	r3,180(sp)
    5f48:	103ea61e 	bne	r2,zero,59e4 <__alt_mem_Flash_flash_data+0xf40059e4>
    5f4c:	8880040c 	andi	r2,r17,16
    5f50:	1002221e 	bne	r2,zero,67dc <___vfprintf_internal_r+0x129c>
    5f54:	8880100c 	andi	r2,r17,64
    5f58:	10022026 	beq	r2,zero,67dc <___vfprintf_internal_r+0x129c>
    5f5c:	1cc0000f 	ldh	r19,0(r3)
    5f60:	db002d17 	ldw	r12,180(sp)
    5f64:	9839d7fa 	srai	fp,r19,31
    5f68:	63000104 	addi	r12,r12,4
    5f6c:	db002d15 	stw	r12,180(sp)
    5f70:	e005883a 	mov	r2,fp
    5f74:	003ea106 	br	59fc <__alt_mem_Flash_flash_data+0xf40059fc>
    5f78:	8c401014 	ori	r17,r17,64
    5f7c:	1805883a 	mov	r2,r3
    5f80:	1c000007 	ldb	r16,0(r3)
    5f84:	003dd306 	br	56d4 <__alt_mem_Flash_flash_data+0xf40056d4>
    5f88:	1c000007 	ldb	r16,0(r3)
    5f8c:	81c3e926 	beq	r16,r7,6f34 <___vfprintf_internal_r+0x19f4>
    5f90:	8c400414 	ori	r17,r17,16
    5f94:	1805883a 	mov	r2,r3
    5f98:	003dce06 	br	56d4 <__alt_mem_Flash_flash_data+0xf40056d4>
    5f9c:	d8c02a15 	stw	r3,168(sp)
    5fa0:	d9802785 	stb	r6,158(sp)
    5fa4:	8880080c 	andi	r2,r17,32
    5fa8:	10034726 	beq	r2,zero,6cc8 <___vfprintf_internal_r+0x1788>
    5fac:	db002d17 	ldw	r12,180(sp)
    5fb0:	dac02f17 	ldw	r11,188(sp)
    5fb4:	60800017 	ldw	r2,0(r12)
    5fb8:	5807d7fa 	srai	r3,r11,31
    5fbc:	63000104 	addi	r12,r12,4
    5fc0:	db002d15 	stw	r12,180(sp)
    5fc4:	12c00015 	stw	r11,0(r2)
    5fc8:	10c00115 	stw	r3,4(r2)
    5fcc:	003d9706 	br	562c <__alt_mem_Flash_flash_data+0xf400562c>
    5fd0:	030000b4 	movhi	r12,2
    5fd4:	63008404 	addi	r12,r12,528
    5fd8:	d8c02a15 	stw	r3,168(sp)
    5fdc:	d9802785 	stb	r6,158(sp)
    5fe0:	db003b15 	stw	r12,236(sp)
    5fe4:	88c0080c 	andi	r3,r17,32
    5fe8:	d8802d17 	ldw	r2,180(sp)
    5fec:	18005b26 	beq	r3,zero,615c <___vfprintf_internal_r+0xc1c>
    5ff0:	dac02d17 	ldw	r11,180(sp)
    5ff4:	14c00017 	ldw	r19,0(r2)
    5ff8:	17000117 	ldw	fp,4(r2)
    5ffc:	5ac00204 	addi	r11,r11,8
    6000:	dac02d15 	stw	r11,180(sp)
    6004:	8880004c 	andi	r2,r17,1
    6008:	10022926 	beq	r2,zero,68b0 <___vfprintf_internal_r+0x1370>
    600c:	9f06b03a 	or	r3,r19,fp
    6010:	18032b26 	beq	r3,zero,6cc0 <___vfprintf_internal_r+0x1780>
    6014:	00800c04 	movi	r2,48
    6018:	d8802705 	stb	r2,156(sp)
    601c:	dc002745 	stb	r16,157(sp)
    6020:	8c400094 	ori	r17,r17,2
    6024:	00800084 	movi	r2,2
    6028:	003f7406 	br	5dfc <__alt_mem_Flash_flash_data+0xf4005dfc>
    602c:	30803fcc 	andi	r2,r6,255
    6030:	1080201c 	xori	r2,r2,128
    6034:	10bfe004 	addi	r2,r2,-128
    6038:	1003351e 	bne	r2,zero,6d10 <___vfprintf_internal_r+0x17d0>
    603c:	1805883a 	mov	r2,r3
    6040:	01800804 	movi	r6,32
    6044:	1c000007 	ldb	r16,0(r3)
    6048:	003da206 	br	56d4 <__alt_mem_Flash_flash_data+0xf40056d4>
    604c:	dac02d17 	ldw	r11,180(sp)
    6050:	db002d17 	ldw	r12,180(sp)
    6054:	5ac00017 	ldw	r11,0(r11)
    6058:	dac02e15 	stw	r11,184(sp)
    605c:	62c00104 	addi	r11,r12,4
    6060:	db002e17 	ldw	r12,184(sp)
    6064:	6003ad16 	blt	r12,zero,6f1c <___vfprintf_internal_r+0x19dc>
    6068:	dac02d15 	stw	r11,180(sp)
    606c:	1805883a 	mov	r2,r3
    6070:	1c000007 	ldb	r16,0(r3)
    6074:	003d9706 	br	56d4 <__alt_mem_Flash_flash_data+0xf40056d4>
    6078:	1805883a 	mov	r2,r3
    607c:	01800ac4 	movi	r6,43
    6080:	1c000007 	ldb	r16,0(r3)
    6084:	003d9306 	br	56d4 <__alt_mem_Flash_flash_data+0xf40056d4>
    6088:	db002d17 	ldw	r12,180(sp)
    608c:	d8c02a15 	stw	r3,168(sp)
    6090:	00c00044 	movi	r3,1
    6094:	60800017 	ldw	r2,0(r12)
    6098:	63000104 	addi	r12,r12,4
    609c:	d8c02b15 	stw	r3,172(sp)
    60a0:	d8002785 	stb	zero,158(sp)
    60a4:	d8801405 	stb	r2,80(sp)
    60a8:	db002d15 	stw	r12,180(sp)
    60ac:	dac01404 	addi	r11,sp,80
    60b0:	1825883a 	mov	r18,r3
    60b4:	d8003215 	stw	zero,200(sp)
    60b8:	d8003415 	stw	zero,208(sp)
    60bc:	dac03115 	stw	r11,196(sp)
    60c0:	0005883a 	mov	r2,zero
    60c4:	003e7806 	br	5aa8 <__alt_mem_Flash_flash_data+0xf4005aa8>
    60c8:	dac02d17 	ldw	r11,180(sp)
    60cc:	db002d17 	ldw	r12,180(sp)
    60d0:	d8c02a15 	stw	r3,168(sp)
    60d4:	5ac00017 	ldw	r11,0(r11)
    60d8:	d8002785 	stb	zero,158(sp)
    60dc:	64c00104 	addi	r19,r12,4
    60e0:	dac03115 	stw	r11,196(sp)
    60e4:	5803fe26 	beq	r11,zero,70e0 <___vfprintf_internal_r+0x1ba0>
    60e8:	d9003117 	ldw	r4,196(sp)
    60ec:	4803b416 	blt	r9,zero,6fc0 <___vfprintf_internal_r+0x1a80>
    60f0:	480d883a 	mov	r6,r9
    60f4:	000b883a 	mov	r5,zero
    60f8:	da003f15 	stw	r8,252(sp)
    60fc:	da403e15 	stw	r9,248(sp)
    6100:	000aabc0 	call	aabc <memchr>
    6104:	da003f17 	ldw	r8,252(sp)
    6108:	da403e17 	ldw	r9,248(sp)
    610c:	10043026 	beq	r2,zero,71d0 <___vfprintf_internal_r+0x1c90>
    6110:	d8c03117 	ldw	r3,196(sp)
    6114:	10e5c83a 	sub	r18,r2,r3
    6118:	4c836b16 	blt	r9,r18,6ec8 <___vfprintf_internal_r+0x1988>
    611c:	9005883a 	mov	r2,r18
    6120:	9003ac16 	blt	r18,zero,6fd4 <___vfprintf_internal_r+0x1a94>
    6124:	dd402783 	ldbu	r21,158(sp)
    6128:	d8802b15 	stw	r2,172(sp)
    612c:	dcc02d15 	stw	r19,180(sp)
    6130:	d8003215 	stw	zero,200(sp)
    6134:	d8003415 	stw	zero,208(sp)
    6138:	003e5406 	br	5a8c <__alt_mem_Flash_flash_data+0xf4005a8c>
    613c:	008000b4 	movhi	r2,2
    6140:	10808904 	addi	r2,r2,548
    6144:	d8c02a15 	stw	r3,168(sp)
    6148:	d8803b15 	stw	r2,236(sp)
    614c:	d9802785 	stb	r6,158(sp)
    6150:	88c0080c 	andi	r3,r17,32
    6154:	d8802d17 	ldw	r2,180(sp)
    6158:	183fa51e 	bne	r3,zero,5ff0 <__alt_mem_Flash_flash_data+0xf4005ff0>
    615c:	88c0040c 	andi	r3,r17,16
    6160:	1802ee26 	beq	r3,zero,6d1c <___vfprintf_internal_r+0x17dc>
    6164:	db002d17 	ldw	r12,180(sp)
    6168:	14c00017 	ldw	r19,0(r2)
    616c:	0039883a 	mov	fp,zero
    6170:	63000104 	addi	r12,r12,4
    6174:	db002d15 	stw	r12,180(sp)
    6178:	003fa206 	br	6004 <__alt_mem_Flash_flash_data+0xf4006004>
    617c:	8c400054 	ori	r17,r17,1
    6180:	1805883a 	mov	r2,r3
    6184:	1c000007 	ldb	r16,0(r3)
    6188:	003d5206 	br	56d4 <__alt_mem_Flash_flash_data+0xf40056d4>
    618c:	8c400814 	ori	r17,r17,32
    6190:	1805883a 	mov	r2,r3
    6194:	1c000007 	ldb	r16,0(r3)
    6198:	003d4e06 	br	56d4 <__alt_mem_Flash_flash_data+0xf40056d4>
    619c:	d8c02a15 	stw	r3,168(sp)
    61a0:	8880080c 	andi	r2,r17,32
    61a4:	103f1d1e 	bne	r2,zero,5e1c <__alt_mem_Flash_flash_data+0xf4005e1c>
    61a8:	8880040c 	andi	r2,r17,16
    61ac:	1001b81e 	bne	r2,zero,6890 <___vfprintf_internal_r+0x1350>
    61b0:	8880100c 	andi	r2,r17,64
    61b4:	1001b626 	beq	r2,zero,6890 <___vfprintf_internal_r+0x1350>
    61b8:	dac02d17 	ldw	r11,180(sp)
    61bc:	0039883a 	mov	fp,zero
    61c0:	00800044 	movi	r2,1
    61c4:	5cc0000b 	ldhu	r19,0(r11)
    61c8:	5ac00104 	addi	r11,r11,4
    61cc:	dac02d15 	stw	r11,180(sp)
    61d0:	9807883a 	mov	r3,r19
    61d4:	003f0906 	br	5dfc <__alt_mem_Flash_flash_data+0xf4005dfc>
    61d8:	d8c02a15 	stw	r3,168(sp)
    61dc:	8880080c 	andi	r2,r17,32
    61e0:	103eff1e 	bne	r2,zero,5de0 <__alt_mem_Flash_flash_data+0xf4005de0>
    61e4:	8880040c 	andi	r2,r17,16
    61e8:	1001a11e 	bne	r2,zero,6870 <___vfprintf_internal_r+0x1330>
    61ec:	8880100c 	andi	r2,r17,64
    61f0:	10019f26 	beq	r2,zero,6870 <___vfprintf_internal_r+0x1330>
    61f4:	db002d17 	ldw	r12,180(sp)
    61f8:	0039883a 	mov	fp,zero
    61fc:	0005883a 	mov	r2,zero
    6200:	64c0000b 	ldhu	r19,0(r12)
    6204:	63000104 	addi	r12,r12,4
    6208:	db002d15 	stw	r12,180(sp)
    620c:	9807883a 	mov	r3,r19
    6210:	003efa06 	br	5dfc <__alt_mem_Flash_flash_data+0xf4005dfc>
    6214:	d8c02a15 	stw	r3,168(sp)
    6218:	d9802785 	stb	r6,158(sp)
    621c:	803db626 	beq	r16,zero,58f8 <__alt_mem_Flash_flash_data+0xf40058f8>
    6220:	00c00044 	movi	r3,1
    6224:	d8c02b15 	stw	r3,172(sp)
    6228:	dc001405 	stb	r16,80(sp)
    622c:	d8002785 	stb	zero,158(sp)
    6230:	003f9e06 	br	60ac <__alt_mem_Flash_flash_data+0xf40060ac>
    6234:	d8c02017 	ldw	r3,128(sp)
    6238:	003e5306 	br	5b88 <__alt_mem_Flash_flash_data+0xf4005b88>
    623c:	10803fcc 	andi	r2,r2,255
    6240:	00c00044 	movi	r3,1
    6244:	10fdfa1e 	bne	r2,r3,5a30 <__alt_mem_Flash_flash_data+0xf4005a30>
    6248:	e000021e 	bne	fp,zero,6254 <___vfprintf_internal_r+0xd14>
    624c:	00800244 	movi	r2,9
    6250:	14c0202e 	bgeu	r2,r19,62d4 <___vfprintf_internal_r+0xd94>
    6254:	dc002b15 	stw	r16,172(sp)
    6258:	dc402c15 	stw	r17,176(sp)
    625c:	9821883a 	mov	r16,r19
    6260:	e023883a 	mov	r17,fp
    6264:	dc801e04 	addi	r18,sp,120
    6268:	4827883a 	mov	r19,r9
    626c:	4039883a 	mov	fp,r8
    6270:	8009883a 	mov	r4,r16
    6274:	880b883a 	mov	r5,r17
    6278:	01800284 	movi	r6,10
    627c:	000f883a 	mov	r7,zero
    6280:	000fc8c0 	call	fc8c <__umoddi3>
    6284:	10800c04 	addi	r2,r2,48
    6288:	94bfffc4 	addi	r18,r18,-1
    628c:	8009883a 	mov	r4,r16
    6290:	880b883a 	mov	r5,r17
    6294:	01800284 	movi	r6,10
    6298:	000f883a 	mov	r7,zero
    629c:	90800005 	stb	r2,0(r18)
    62a0:	000f6cc0 	call	f6cc <__udivdi3>
    62a4:	1021883a 	mov	r16,r2
    62a8:	10c4b03a 	or	r2,r2,r3
    62ac:	1823883a 	mov	r17,r3
    62b0:	103fef1e 	bne	r2,zero,6270 <__alt_mem_Flash_flash_data+0xf4006270>
    62b4:	dac02817 	ldw	r11,160(sp)
    62b8:	dc803115 	stw	r18,196(sp)
    62bc:	dc002b17 	ldw	r16,172(sp)
    62c0:	dc402c17 	ldw	r17,176(sp)
    62c4:	9813883a 	mov	r9,r19
    62c8:	e011883a 	mov	r8,fp
    62cc:	5ca5c83a 	sub	r18,r11,r18
    62d0:	003de906 	br	5a78 <__alt_mem_Flash_flash_data+0xf4005a78>
    62d4:	9cc00c04 	addi	r19,r19,48
    62d8:	d8c01dc4 	addi	r3,sp,119
    62dc:	dcc01dc5 	stb	r19,119(sp)
    62e0:	dc803c17 	ldw	r18,240(sp)
    62e4:	d8c03115 	stw	r3,196(sp)
    62e8:	003de306 	br	5a78 <__alt_mem_Flash_flash_data+0xf4005a78>
    62ec:	00801944 	movi	r2,101
    62f0:	1400710e 	bge	r2,r16,64b8 <___vfprintf_internal_r+0xf78>
    62f4:	d9003717 	ldw	r4,220(sp)
    62f8:	d9403917 	ldw	r5,228(sp)
    62fc:	000d883a 	mov	r6,zero
    6300:	000f883a 	mov	r7,zero
    6304:	d8c03d15 	stw	r3,244(sp)
    6308:	da003f15 	stw	r8,252(sp)
    630c:	00114b00 	call	114b0 <__eqdf2>
    6310:	d8c03d17 	ldw	r3,244(sp)
    6314:	da003f17 	ldw	r8,252(sp)
    6318:	1000ef1e 	bne	r2,zero,66d8 <___vfprintf_internal_r+0x1198>
    631c:	d8801f17 	ldw	r2,124(sp)
    6320:	010000b4 	movhi	r4,2
    6324:	21009004 	addi	r4,r4,576
    6328:	18c00044 	addi	r3,r3,1
    632c:	10800044 	addi	r2,r2,1
    6330:	41000015 	stw	r4,0(r8)
    6334:	01000044 	movi	r4,1
    6338:	41000115 	stw	r4,4(r8)
    633c:	d8c02015 	stw	r3,128(sp)
    6340:	d8801f15 	stw	r2,124(sp)
    6344:	010001c4 	movi	r4,7
    6348:	20828e16 	blt	r4,r2,6d84 <___vfprintf_internal_r+0x1844>
    634c:	42000204 	addi	r8,r8,8
    6350:	d8802617 	ldw	r2,152(sp)
    6354:	dac03317 	ldw	r11,204(sp)
    6358:	12c00216 	blt	r2,r11,6364 <___vfprintf_internal_r+0xe24>
    635c:	8880004c 	andi	r2,r17,1
    6360:	103e5d26 	beq	r2,zero,5cd8 <__alt_mem_Flash_flash_data+0xf4005cd8>
    6364:	db003817 	ldw	r12,224(sp)
    6368:	d8801f17 	ldw	r2,124(sp)
    636c:	dac03517 	ldw	r11,212(sp)
    6370:	1b07883a 	add	r3,r3,r12
    6374:	10800044 	addi	r2,r2,1
    6378:	42c00015 	stw	r11,0(r8)
    637c:	43000115 	stw	r12,4(r8)
    6380:	d8c02015 	stw	r3,128(sp)
    6384:	d8801f15 	stw	r2,124(sp)
    6388:	010001c4 	movi	r4,7
    638c:	2082ed16 	blt	r4,r2,6f44 <___vfprintf_internal_r+0x1a04>
    6390:	42000204 	addi	r8,r8,8
    6394:	db003317 	ldw	r12,204(sp)
    6398:	643fffc4 	addi	r16,r12,-1
    639c:	043e4e0e 	bge	zero,r16,5cd8 <__alt_mem_Flash_flash_data+0xf4005cd8>
    63a0:	04800404 	movi	r18,16
    63a4:	d8801f17 	ldw	r2,124(sp)
    63a8:	94007e0e 	bge	r18,r16,65a4 <___vfprintf_internal_r+0x1064>
    63ac:	014000b4 	movhi	r5,2
    63b0:	29409884 	addi	r5,r5,610
    63b4:	d9402c15 	stw	r5,176(sp)
    63b8:	054001c4 	movi	r21,7
    63bc:	00000306 	br	63cc <___vfprintf_internal_r+0xe8c>
    63c0:	42000204 	addi	r8,r8,8
    63c4:	843ffc04 	addi	r16,r16,-16
    63c8:	9400790e 	bge	r18,r16,65b0 <___vfprintf_internal_r+0x1070>
    63cc:	18c00404 	addi	r3,r3,16
    63d0:	10800044 	addi	r2,r2,1
    63d4:	45000015 	stw	r20,0(r8)
    63d8:	44800115 	stw	r18,4(r8)
    63dc:	d8c02015 	stw	r3,128(sp)
    63e0:	d8801f15 	stw	r2,124(sp)
    63e4:	a8bff60e 	bge	r21,r2,63c0 <__alt_mem_Flash_flash_data+0xf40063c0>
    63e8:	b009883a 	mov	r4,r22
    63ec:	b80b883a 	mov	r5,r23
    63f0:	d9801e04 	addi	r6,sp,120
    63f4:	000da0c0 	call	da0c <__sprint_r>
    63f8:	103d451e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    63fc:	d8c02017 	ldw	r3,128(sp)
    6400:	d8801f17 	ldw	r2,124(sp)
    6404:	da000404 	addi	r8,sp,16
    6408:	003fee06 	br	63c4 <__alt_mem_Flash_flash_data+0xf40063c4>
    640c:	dac02e17 	ldw	r11,184(sp)
    6410:	db002b17 	ldw	r12,172(sp)
    6414:	5b2bc83a 	sub	r21,r11,r12
    6418:	057df90e 	bge	zero,r21,5c00 <__alt_mem_Flash_flash_data+0xf4005c00>
    641c:	07000404 	movi	fp,16
    6420:	d8801f17 	ldw	r2,124(sp)
    6424:	e543640e 	bge	fp,r21,71b8 <___vfprintf_internal_r+0x1c78>
    6428:	014000b4 	movhi	r5,2
    642c:	29409884 	addi	r5,r5,610
    6430:	d9402c15 	stw	r5,176(sp)
    6434:	04c001c4 	movi	r19,7
    6438:	00000306 	br	6448 <___vfprintf_internal_r+0xf08>
    643c:	ad7ffc04 	addi	r21,r21,-16
    6440:	42000204 	addi	r8,r8,8
    6444:	e540110e 	bge	fp,r21,648c <___vfprintf_internal_r+0xf4c>
    6448:	18c00404 	addi	r3,r3,16
    644c:	10800044 	addi	r2,r2,1
    6450:	45000015 	stw	r20,0(r8)
    6454:	47000115 	stw	fp,4(r8)
    6458:	d8c02015 	stw	r3,128(sp)
    645c:	d8801f15 	stw	r2,124(sp)
    6460:	98bff60e 	bge	r19,r2,643c <__alt_mem_Flash_flash_data+0xf400643c>
    6464:	b009883a 	mov	r4,r22
    6468:	b80b883a 	mov	r5,r23
    646c:	d9801e04 	addi	r6,sp,120
    6470:	000da0c0 	call	da0c <__sprint_r>
    6474:	103d261e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    6478:	ad7ffc04 	addi	r21,r21,-16
    647c:	d8c02017 	ldw	r3,128(sp)
    6480:	d8801f17 	ldw	r2,124(sp)
    6484:	da000404 	addi	r8,sp,16
    6488:	e57fef16 	blt	fp,r21,6448 <__alt_mem_Flash_flash_data+0xf4006448>
    648c:	dac02c17 	ldw	r11,176(sp)
    6490:	1d47883a 	add	r3,r3,r21
    6494:	10800044 	addi	r2,r2,1
    6498:	42c00015 	stw	r11,0(r8)
    649c:	45400115 	stw	r21,4(r8)
    64a0:	d8c02015 	stw	r3,128(sp)
    64a4:	d8801f15 	stw	r2,124(sp)
    64a8:	010001c4 	movi	r4,7
    64ac:	20819116 	blt	r4,r2,6af4 <___vfprintf_internal_r+0x15b4>
    64b0:	42000204 	addi	r8,r8,8
    64b4:	003dd206 	br	5c00 <__alt_mem_Flash_flash_data+0xf4005c00>
    64b8:	db003317 	ldw	r12,204(sp)
    64bc:	00800044 	movi	r2,1
    64c0:	18c00044 	addi	r3,r3,1
    64c4:	1301530e 	bge	r2,r12,6a14 <___vfprintf_internal_r+0x14d4>
    64c8:	dc001f17 	ldw	r16,124(sp)
    64cc:	dac03117 	ldw	r11,196(sp)
    64d0:	00800044 	movi	r2,1
    64d4:	84000044 	addi	r16,r16,1
    64d8:	40800115 	stw	r2,4(r8)
    64dc:	42c00015 	stw	r11,0(r8)
    64e0:	d8c02015 	stw	r3,128(sp)
    64e4:	dc001f15 	stw	r16,124(sp)
    64e8:	008001c4 	movi	r2,7
    64ec:	14016b16 	blt	r2,r16,6a9c <___vfprintf_internal_r+0x155c>
    64f0:	42000204 	addi	r8,r8,8
    64f4:	db003817 	ldw	r12,224(sp)
    64f8:	dac03517 	ldw	r11,212(sp)
    64fc:	84000044 	addi	r16,r16,1
    6500:	1b07883a 	add	r3,r3,r12
    6504:	42c00015 	stw	r11,0(r8)
    6508:	43000115 	stw	r12,4(r8)
    650c:	d8c02015 	stw	r3,128(sp)
    6510:	dc001f15 	stw	r16,124(sp)
    6514:	008001c4 	movi	r2,7
    6518:	14016916 	blt	r2,r16,6ac0 <___vfprintf_internal_r+0x1580>
    651c:	44800204 	addi	r18,r8,8
    6520:	d9003717 	ldw	r4,220(sp)
    6524:	d9403917 	ldw	r5,228(sp)
    6528:	000d883a 	mov	r6,zero
    652c:	000f883a 	mov	r7,zero
    6530:	d8c03d15 	stw	r3,244(sp)
    6534:	00114b00 	call	114b0 <__eqdf2>
    6538:	d8c03d17 	ldw	r3,244(sp)
    653c:	db003317 	ldw	r12,204(sp)
    6540:	1000ad26 	beq	r2,zero,67f8 <___vfprintf_internal_r+0x12b8>
    6544:	dac03117 	ldw	r11,196(sp)
    6548:	60bfffc4 	addi	r2,r12,-1
    654c:	1887883a 	add	r3,r3,r2
    6550:	59000044 	addi	r4,r11,1
    6554:	84000044 	addi	r16,r16,1
    6558:	90800115 	stw	r2,4(r18)
    655c:	91000015 	stw	r4,0(r18)
    6560:	d8c02015 	stw	r3,128(sp)
    6564:	dc001f15 	stw	r16,124(sp)
    6568:	008001c4 	movi	r2,7
    656c:	14014216 	blt	r2,r16,6a78 <___vfprintf_internal_r+0x1538>
    6570:	94800204 	addi	r18,r18,8
    6574:	dac03a17 	ldw	r11,232(sp)
    6578:	dd4022c4 	addi	r21,sp,139
    657c:	84000044 	addi	r16,r16,1
    6580:	1ac7883a 	add	r3,r3,r11
    6584:	95400015 	stw	r21,0(r18)
    6588:	92c00115 	stw	r11,4(r18)
    658c:	d8c02015 	stw	r3,128(sp)
    6590:	dc001f15 	stw	r16,124(sp)
    6594:	008001c4 	movi	r2,7
    6598:	14000e16 	blt	r2,r16,65d4 <___vfprintf_internal_r+0x1094>
    659c:	92000204 	addi	r8,r18,8
    65a0:	003dcd06 	br	5cd8 <__alt_mem_Flash_flash_data+0xf4005cd8>
    65a4:	010000b4 	movhi	r4,2
    65a8:	21009884 	addi	r4,r4,610
    65ac:	d9002c15 	stw	r4,176(sp)
    65b0:	dac02c17 	ldw	r11,176(sp)
    65b4:	1c07883a 	add	r3,r3,r16
    65b8:	44000115 	stw	r16,4(r8)
    65bc:	42c00015 	stw	r11,0(r8)
    65c0:	10800044 	addi	r2,r2,1
    65c4:	d8c02015 	stw	r3,128(sp)
    65c8:	d8801f15 	stw	r2,124(sp)
    65cc:	010001c4 	movi	r4,7
    65d0:	20bdc00e 	bge	r4,r2,5cd4 <__alt_mem_Flash_flash_data+0xf4005cd4>
    65d4:	b009883a 	mov	r4,r22
    65d8:	b80b883a 	mov	r5,r23
    65dc:	d9801e04 	addi	r6,sp,120
    65e0:	000da0c0 	call	da0c <__sprint_r>
    65e4:	103cca1e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    65e8:	d8c02017 	ldw	r3,128(sp)
    65ec:	da000404 	addi	r8,sp,16
    65f0:	003db906 	br	5cd8 <__alt_mem_Flash_flash_data+0xf4005cd8>
    65f4:	b009883a 	mov	r4,r22
    65f8:	b80b883a 	mov	r5,r23
    65fc:	d9801e04 	addi	r6,sp,120
    6600:	000da0c0 	call	da0c <__sprint_r>
    6604:	103def26 	beq	r2,zero,5dc4 <__alt_mem_Flash_flash_data+0xf4005dc4>
    6608:	003cc106 	br	5910 <__alt_mem_Flash_flash_data+0xf4005910>
    660c:	10803fcc 	andi	r2,r2,255
    6610:	1000651e 	bne	r2,zero,67a8 <___vfprintf_internal_r+0x1268>
    6614:	8880004c 	andi	r2,r17,1
    6618:	10013226 	beq	r2,zero,6ae4 <___vfprintf_internal_r+0x15a4>
    661c:	00800c04 	movi	r2,48
    6620:	d8c01dc4 	addi	r3,sp,119
    6624:	d8801dc5 	stb	r2,119(sp)
    6628:	dc803c17 	ldw	r18,240(sp)
    662c:	d8c03115 	stw	r3,196(sp)
    6630:	003d1106 	br	5a78 <__alt_mem_Flash_flash_data+0xf4005a78>
    6634:	b009883a 	mov	r4,r22
    6638:	b80b883a 	mov	r5,r23
    663c:	d9801e04 	addi	r6,sp,120
    6640:	000da0c0 	call	da0c <__sprint_r>
    6644:	103cb21e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    6648:	d8c02017 	ldw	r3,128(sp)
    664c:	da000404 	addi	r8,sp,16
    6650:	003d9406 	br	5ca4 <__alt_mem_Flash_flash_data+0xf4005ca4>
    6654:	b009883a 	mov	r4,r22
    6658:	b80b883a 	mov	r5,r23
    665c:	d9801e04 	addi	r6,sp,120
    6660:	000da0c0 	call	da0c <__sprint_r>
    6664:	103caa1e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    6668:	d8c02017 	ldw	r3,128(sp)
    666c:	da000404 	addi	r8,sp,16
    6670:	003d5206 	br	5bbc <__alt_mem_Flash_flash_data+0xf4005bbc>
    6674:	b009883a 	mov	r4,r22
    6678:	b80b883a 	mov	r5,r23
    667c:	d9801e04 	addi	r6,sp,120
    6680:	000da0c0 	call	da0c <__sprint_r>
    6684:	103ca21e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    6688:	d8c02017 	ldw	r3,128(sp)
    668c:	da000404 	addi	r8,sp,16
    6690:	003d5806 	br	5bf4 <__alt_mem_Flash_flash_data+0xf4005bf4>
    6694:	d9403b17 	ldw	r5,236(sp)
    6698:	d8c01e04 	addi	r3,sp,120
    669c:	988003cc 	andi	r2,r19,15
    66a0:	e008973a 	slli	r4,fp,28
    66a4:	2885883a 	add	r2,r5,r2
    66a8:	9826d13a 	srli	r19,r19,4
    66ac:	10800003 	ldbu	r2,0(r2)
    66b0:	e038d13a 	srli	fp,fp,4
    66b4:	18ffffc4 	addi	r3,r3,-1
    66b8:	24e6b03a 	or	r19,r4,r19
    66bc:	18800005 	stb	r2,0(r3)
    66c0:	9f04b03a 	or	r2,r19,fp
    66c4:	103ff51e 	bne	r2,zero,669c <__alt_mem_Flash_flash_data+0xf400669c>
    66c8:	db002817 	ldw	r12,160(sp)
    66cc:	d8c03115 	stw	r3,196(sp)
    66d0:	60e5c83a 	sub	r18,r12,r3
    66d4:	003ce806 	br	5a78 <__alt_mem_Flash_flash_data+0xf4005a78>
    66d8:	dc002617 	ldw	r16,152(sp)
    66dc:	0401b10e 	bge	zero,r16,6da4 <___vfprintf_internal_r+0x1864>
    66e0:	db003117 	ldw	r12,196(sp)
    66e4:	dac03317 	ldw	r11,204(sp)
    66e8:	62e1883a 	add	r16,r12,r11
    66ec:	db003417 	ldw	r12,208(sp)
    66f0:	5825883a 	mov	r18,r11
    66f4:	62c0010e 	bge	r12,r11,66fc <___vfprintf_internal_r+0x11bc>
    66f8:	6025883a 	mov	r18,r12
    66fc:	04800b0e 	bge	zero,r18,672c <___vfprintf_internal_r+0x11ec>
    6700:	d8801f17 	ldw	r2,124(sp)
    6704:	dac03117 	ldw	r11,196(sp)
    6708:	1c87883a 	add	r3,r3,r18
    670c:	10800044 	addi	r2,r2,1
    6710:	42c00015 	stw	r11,0(r8)
    6714:	44800115 	stw	r18,4(r8)
    6718:	d8c02015 	stw	r3,128(sp)
    671c:	d8801f15 	stw	r2,124(sp)
    6720:	010001c4 	movi	r4,7
    6724:	20824f16 	blt	r4,r2,7064 <___vfprintf_internal_r+0x1b24>
    6728:	42000204 	addi	r8,r8,8
    672c:	90024b16 	blt	r18,zero,705c <___vfprintf_internal_r+0x1b1c>
    6730:	db003417 	ldw	r12,208(sp)
    6734:	64a5c83a 	sub	r18,r12,r18
    6738:	0480730e 	bge	zero,r18,6908 <___vfprintf_internal_r+0x13c8>
    673c:	05400404 	movi	r21,16
    6740:	d8801f17 	ldw	r2,124(sp)
    6744:	ac817d0e 	bge	r21,r18,6d3c <___vfprintf_internal_r+0x17fc>
    6748:	014000b4 	movhi	r5,2
    674c:	29409884 	addi	r5,r5,610
    6750:	d9402c15 	stw	r5,176(sp)
    6754:	070001c4 	movi	fp,7
    6758:	00000306 	br	6768 <___vfprintf_internal_r+0x1228>
    675c:	42000204 	addi	r8,r8,8
    6760:	94bffc04 	addi	r18,r18,-16
    6764:	ac81780e 	bge	r21,r18,6d48 <___vfprintf_internal_r+0x1808>
    6768:	18c00404 	addi	r3,r3,16
    676c:	10800044 	addi	r2,r2,1
    6770:	45000015 	stw	r20,0(r8)
    6774:	45400115 	stw	r21,4(r8)
    6778:	d8c02015 	stw	r3,128(sp)
    677c:	d8801f15 	stw	r2,124(sp)
    6780:	e0bff60e 	bge	fp,r2,675c <__alt_mem_Flash_flash_data+0xf400675c>
    6784:	b009883a 	mov	r4,r22
    6788:	b80b883a 	mov	r5,r23
    678c:	d9801e04 	addi	r6,sp,120
    6790:	000da0c0 	call	da0c <__sprint_r>
    6794:	103c5e1e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    6798:	d8c02017 	ldw	r3,128(sp)
    679c:	d8801f17 	ldw	r2,124(sp)
    67a0:	da000404 	addi	r8,sp,16
    67a4:	003fee06 	br	6760 <__alt_mem_Flash_flash_data+0xf4006760>
    67a8:	dac01e04 	addi	r11,sp,120
    67ac:	0025883a 	mov	r18,zero
    67b0:	dac03115 	stw	r11,196(sp)
    67b4:	003cb006 	br	5a78 <__alt_mem_Flash_flash_data+0xf4005a78>
    67b8:	b009883a 	mov	r4,r22
    67bc:	b80b883a 	mov	r5,r23
    67c0:	d9801e04 	addi	r6,sp,120
    67c4:	000da0c0 	call	da0c <__sprint_r>
    67c8:	103c511e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    67cc:	d8c02017 	ldw	r3,128(sp)
    67d0:	d8802787 	ldb	r2,158(sp)
    67d4:	da000404 	addi	r8,sp,16
    67d8:	003ceb06 	br	5b88 <__alt_mem_Flash_flash_data+0xf4005b88>
    67dc:	1cc00017 	ldw	r19,0(r3)
    67e0:	dac02d17 	ldw	r11,180(sp)
    67e4:	9839d7fa 	srai	fp,r19,31
    67e8:	5ac00104 	addi	r11,r11,4
    67ec:	dac02d15 	stw	r11,180(sp)
    67f0:	e005883a 	mov	r2,fp
    67f4:	003c8106 	br	59fc <__alt_mem_Flash_flash_data+0xf40059fc>
    67f8:	657fffc4 	addi	r21,r12,-1
    67fc:	057f5d0e 	bge	zero,r21,6574 <__alt_mem_Flash_flash_data+0xf4006574>
    6800:	07000404 	movi	fp,16
    6804:	e540900e 	bge	fp,r21,6a48 <___vfprintf_internal_r+0x1508>
    6808:	010000b4 	movhi	r4,2
    680c:	21009884 	addi	r4,r4,610
    6810:	d9002c15 	stw	r4,176(sp)
    6814:	01c001c4 	movi	r7,7
    6818:	00000306 	br	6828 <___vfprintf_internal_r+0x12e8>
    681c:	94800204 	addi	r18,r18,8
    6820:	ad7ffc04 	addi	r21,r21,-16
    6824:	e5408b0e 	bge	fp,r21,6a54 <___vfprintf_internal_r+0x1514>
    6828:	18c00404 	addi	r3,r3,16
    682c:	84000044 	addi	r16,r16,1
    6830:	95000015 	stw	r20,0(r18)
    6834:	97000115 	stw	fp,4(r18)
    6838:	d8c02015 	stw	r3,128(sp)
    683c:	dc001f15 	stw	r16,124(sp)
    6840:	3c3ff60e 	bge	r7,r16,681c <__alt_mem_Flash_flash_data+0xf400681c>
    6844:	b009883a 	mov	r4,r22
    6848:	b80b883a 	mov	r5,r23
    684c:	d9801e04 	addi	r6,sp,120
    6850:	d9c03d15 	stw	r7,244(sp)
    6854:	000da0c0 	call	da0c <__sprint_r>
    6858:	d9c03d17 	ldw	r7,244(sp)
    685c:	103c2c1e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    6860:	d8c02017 	ldw	r3,128(sp)
    6864:	dc001f17 	ldw	r16,124(sp)
    6868:	dc800404 	addi	r18,sp,16
    686c:	003fec06 	br	6820 <__alt_mem_Flash_flash_data+0xf4006820>
    6870:	dac02d17 	ldw	r11,180(sp)
    6874:	0039883a 	mov	fp,zero
    6878:	0005883a 	mov	r2,zero
    687c:	5cc00017 	ldw	r19,0(r11)
    6880:	5ac00104 	addi	r11,r11,4
    6884:	dac02d15 	stw	r11,180(sp)
    6888:	9807883a 	mov	r3,r19
    688c:	003d5b06 	br	5dfc <__alt_mem_Flash_flash_data+0xf4005dfc>
    6890:	db002d17 	ldw	r12,180(sp)
    6894:	0039883a 	mov	fp,zero
    6898:	00800044 	movi	r2,1
    689c:	64c00017 	ldw	r19,0(r12)
    68a0:	63000104 	addi	r12,r12,4
    68a4:	db002d15 	stw	r12,180(sp)
    68a8:	9807883a 	mov	r3,r19
    68ac:	003d5306 	br	5dfc <__alt_mem_Flash_flash_data+0xf4005dfc>
    68b0:	00800084 	movi	r2,2
    68b4:	9f06b03a 	or	r3,r19,fp
    68b8:	003d5006 	br	5dfc <__alt_mem_Flash_flash_data+0xf4005dfc>
    68bc:	10803fcc 	andi	r2,r2,255
    68c0:	1080201c 	xori	r2,r2,128
    68c4:	10bfe004 	addi	r2,r2,-128
    68c8:	01000c04 	movi	r4,48
    68cc:	1101a526 	beq	r2,r4,6f64 <___vfprintf_internal_r+0x1a24>
    68d0:	dac03117 	ldw	r11,196(sp)
    68d4:	db002817 	ldw	r12,160(sp)
    68d8:	193fffc5 	stb	r4,-1(r3)
    68dc:	5affffc4 	addi	r11,r11,-1
    68e0:	dac03115 	stw	r11,196(sp)
    68e4:	62e5c83a 	sub	r18,r12,r11
    68e8:	003c6306 	br	5a78 <__alt_mem_Flash_flash_data+0xf4005a78>
    68ec:	b009883a 	mov	r4,r22
    68f0:	b80b883a 	mov	r5,r23
    68f4:	d9801e04 	addi	r6,sp,120
    68f8:	000da0c0 	call	da0c <__sprint_r>
    68fc:	103c041e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    6900:	d8c02017 	ldw	r3,128(sp)
    6904:	da000404 	addi	r8,sp,16
    6908:	db003117 	ldw	r12,196(sp)
    690c:	dac03417 	ldw	r11,208(sp)
    6910:	d8802617 	ldw	r2,152(sp)
    6914:	62e5883a 	add	r18,r12,r11
    6918:	db003317 	ldw	r12,204(sp)
    691c:	13000216 	blt	r2,r12,6928 <___vfprintf_internal_r+0x13e8>
    6920:	8900004c 	andi	r4,r17,1
    6924:	20000c26 	beq	r4,zero,6958 <___vfprintf_internal_r+0x1418>
    6928:	dac03817 	ldw	r11,224(sp)
    692c:	d9001f17 	ldw	r4,124(sp)
    6930:	db003517 	ldw	r12,212(sp)
    6934:	1ac7883a 	add	r3,r3,r11
    6938:	21000044 	addi	r4,r4,1
    693c:	43000015 	stw	r12,0(r8)
    6940:	42c00115 	stw	r11,4(r8)
    6944:	d8c02015 	stw	r3,128(sp)
    6948:	d9001f15 	stw	r4,124(sp)
    694c:	014001c4 	movi	r5,7
    6950:	2901cc16 	blt	r5,r4,7084 <___vfprintf_internal_r+0x1b44>
    6954:	42000204 	addi	r8,r8,8
    6958:	dac03317 	ldw	r11,204(sp)
    695c:	8489c83a 	sub	r4,r16,r18
    6960:	5885c83a 	sub	r2,r11,r2
    6964:	1021883a 	mov	r16,r2
    6968:	2080010e 	bge	r4,r2,6970 <___vfprintf_internal_r+0x1430>
    696c:	2021883a 	mov	r16,r4
    6970:	04000a0e 	bge	zero,r16,699c <___vfprintf_internal_r+0x145c>
    6974:	d9001f17 	ldw	r4,124(sp)
    6978:	1c07883a 	add	r3,r3,r16
    697c:	44800015 	stw	r18,0(r8)
    6980:	21000044 	addi	r4,r4,1
    6984:	44000115 	stw	r16,4(r8)
    6988:	d8c02015 	stw	r3,128(sp)
    698c:	d9001f15 	stw	r4,124(sp)
    6990:	014001c4 	movi	r5,7
    6994:	2901e316 	blt	r5,r4,7124 <___vfprintf_internal_r+0x1be4>
    6998:	42000204 	addi	r8,r8,8
    699c:	8001df16 	blt	r16,zero,711c <___vfprintf_internal_r+0x1bdc>
    69a0:	1421c83a 	sub	r16,r2,r16
    69a4:	043ccc0e 	bge	zero,r16,5cd8 <__alt_mem_Flash_flash_data+0xf4005cd8>
    69a8:	04800404 	movi	r18,16
    69ac:	d8801f17 	ldw	r2,124(sp)
    69b0:	943efc0e 	bge	r18,r16,65a4 <__alt_mem_Flash_flash_data+0xf40065a4>
    69b4:	014000b4 	movhi	r5,2
    69b8:	29409884 	addi	r5,r5,610
    69bc:	d9402c15 	stw	r5,176(sp)
    69c0:	054001c4 	movi	r21,7
    69c4:	00000306 	br	69d4 <___vfprintf_internal_r+0x1494>
    69c8:	42000204 	addi	r8,r8,8
    69cc:	843ffc04 	addi	r16,r16,-16
    69d0:	943ef70e 	bge	r18,r16,65b0 <__alt_mem_Flash_flash_data+0xf40065b0>
    69d4:	18c00404 	addi	r3,r3,16
    69d8:	10800044 	addi	r2,r2,1
    69dc:	45000015 	stw	r20,0(r8)
    69e0:	44800115 	stw	r18,4(r8)
    69e4:	d8c02015 	stw	r3,128(sp)
    69e8:	d8801f15 	stw	r2,124(sp)
    69ec:	a8bff60e 	bge	r21,r2,69c8 <__alt_mem_Flash_flash_data+0xf40069c8>
    69f0:	b009883a 	mov	r4,r22
    69f4:	b80b883a 	mov	r5,r23
    69f8:	d9801e04 	addi	r6,sp,120
    69fc:	000da0c0 	call	da0c <__sprint_r>
    6a00:	103bc31e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    6a04:	d8c02017 	ldw	r3,128(sp)
    6a08:	d8801f17 	ldw	r2,124(sp)
    6a0c:	da000404 	addi	r8,sp,16
    6a10:	003fee06 	br	69cc <__alt_mem_Flash_flash_data+0xf40069cc>
    6a14:	8888703a 	and	r4,r17,r2
    6a18:	203eab1e 	bne	r4,zero,64c8 <__alt_mem_Flash_flash_data+0xf40064c8>
    6a1c:	dc001f17 	ldw	r16,124(sp)
    6a20:	db003117 	ldw	r12,196(sp)
    6a24:	40800115 	stw	r2,4(r8)
    6a28:	84000044 	addi	r16,r16,1
    6a2c:	43000015 	stw	r12,0(r8)
    6a30:	d8c02015 	stw	r3,128(sp)
    6a34:	dc001f15 	stw	r16,124(sp)
    6a38:	008001c4 	movi	r2,7
    6a3c:	14000e16 	blt	r2,r16,6a78 <___vfprintf_internal_r+0x1538>
    6a40:	44800204 	addi	r18,r8,8
    6a44:	003ecb06 	br	6574 <__alt_mem_Flash_flash_data+0xf4006574>
    6a48:	008000b4 	movhi	r2,2
    6a4c:	10809884 	addi	r2,r2,610
    6a50:	d8802c15 	stw	r2,176(sp)
    6a54:	dac02c17 	ldw	r11,176(sp)
    6a58:	1d47883a 	add	r3,r3,r21
    6a5c:	84000044 	addi	r16,r16,1
    6a60:	92c00015 	stw	r11,0(r18)
    6a64:	95400115 	stw	r21,4(r18)
    6a68:	d8c02015 	stw	r3,128(sp)
    6a6c:	dc001f15 	stw	r16,124(sp)
    6a70:	008001c4 	movi	r2,7
    6a74:	143ebe0e 	bge	r2,r16,6570 <__alt_mem_Flash_flash_data+0xf4006570>
    6a78:	b009883a 	mov	r4,r22
    6a7c:	b80b883a 	mov	r5,r23
    6a80:	d9801e04 	addi	r6,sp,120
    6a84:	000da0c0 	call	da0c <__sprint_r>
    6a88:	103ba11e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    6a8c:	d8c02017 	ldw	r3,128(sp)
    6a90:	dc001f17 	ldw	r16,124(sp)
    6a94:	dc800404 	addi	r18,sp,16
    6a98:	003eb606 	br	6574 <__alt_mem_Flash_flash_data+0xf4006574>
    6a9c:	b009883a 	mov	r4,r22
    6aa0:	b80b883a 	mov	r5,r23
    6aa4:	d9801e04 	addi	r6,sp,120
    6aa8:	000da0c0 	call	da0c <__sprint_r>
    6aac:	103b981e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    6ab0:	d8c02017 	ldw	r3,128(sp)
    6ab4:	dc001f17 	ldw	r16,124(sp)
    6ab8:	da000404 	addi	r8,sp,16
    6abc:	003e8d06 	br	64f4 <__alt_mem_Flash_flash_data+0xf40064f4>
    6ac0:	b009883a 	mov	r4,r22
    6ac4:	b80b883a 	mov	r5,r23
    6ac8:	d9801e04 	addi	r6,sp,120
    6acc:	000da0c0 	call	da0c <__sprint_r>
    6ad0:	103b8f1e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    6ad4:	d8c02017 	ldw	r3,128(sp)
    6ad8:	dc001f17 	ldw	r16,124(sp)
    6adc:	dc800404 	addi	r18,sp,16
    6ae0:	003e8f06 	br	6520 <__alt_mem_Flash_flash_data+0xf4006520>
    6ae4:	db001e04 	addi	r12,sp,120
    6ae8:	0025883a 	mov	r18,zero
    6aec:	db003115 	stw	r12,196(sp)
    6af0:	003be106 	br	5a78 <__alt_mem_Flash_flash_data+0xf4005a78>
    6af4:	b009883a 	mov	r4,r22
    6af8:	b80b883a 	mov	r5,r23
    6afc:	d9801e04 	addi	r6,sp,120
    6b00:	000da0c0 	call	da0c <__sprint_r>
    6b04:	103b821e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    6b08:	d8c02017 	ldw	r3,128(sp)
    6b0c:	da000404 	addi	r8,sp,16
    6b10:	003c3b06 	br	5c00 <__alt_mem_Flash_flash_data+0xf4005c00>
    6b14:	04e7c83a 	sub	r19,zero,r19
    6b18:	9804c03a 	cmpne	r2,r19,zero
    6b1c:	0739c83a 	sub	fp,zero,fp
    6b20:	e0b9c83a 	sub	fp,fp,r2
    6b24:	05400b44 	movi	r21,45
    6b28:	dd402785 	stb	r21,158(sp)
    6b2c:	da403215 	stw	r9,200(sp)
    6b30:	00800044 	movi	r2,1
    6b34:	9f06b03a 	or	r3,r19,fp
    6b38:	003bb506 	br	5a10 <__alt_mem_Flash_flash_data+0xf4005a10>
    6b3c:	da003f15 	stw	r8,252(sp)
    6b40:	da403e15 	stw	r9,248(sp)
    6b44:	000c4640 	call	c464 <__fpclassifyd>
    6b48:	da003f17 	ldw	r8,252(sp)
    6b4c:	da403e17 	ldw	r9,248(sp)
    6b50:	1000ce26 	beq	r2,zero,6e8c <___vfprintf_internal_r+0x194c>
    6b54:	057ff7c4 	movi	r21,-33
    6b58:	00bfffc4 	movi	r2,-1
    6b5c:	856a703a 	and	r21,r16,r21
    6b60:	4881e826 	beq	r9,r2,7304 <___vfprintf_internal_r+0x1dc4>
    6b64:	008011c4 	movi	r2,71
    6b68:	a881e326 	beq	r21,r2,72f8 <___vfprintf_internal_r+0x1db8>
    6b6c:	db003917 	ldw	r12,228(sp)
    6b70:	8ac04014 	ori	r11,r17,256
    6b74:	dac02d15 	stw	r11,180(sp)
    6b78:	6001ed16 	blt	r12,zero,7330 <___vfprintf_internal_r+0x1df0>
    6b7c:	dc803917 	ldw	r18,228(sp)
    6b80:	d8002b05 	stb	zero,172(sp)
    6b84:	00801984 	movi	r2,102
    6b88:	80811826 	beq	r16,r2,6fec <___vfprintf_internal_r+0x1aac>
    6b8c:	00801184 	movi	r2,70
    6b90:	80811626 	beq	r16,r2,6fec <___vfprintf_internal_r+0x1aac>
    6b94:	00801144 	movi	r2,69
    6b98:	a881e926 	beq	r21,r2,7340 <___vfprintf_internal_r+0x1e00>
    6b9c:	4839883a 	mov	fp,r9
    6ba0:	d8802604 	addi	r2,sp,152
    6ba4:	d8800115 	stw	r2,4(sp)
    6ba8:	d9403717 	ldw	r5,220(sp)
    6bac:	d8802504 	addi	r2,sp,148
    6bb0:	d8800215 	stw	r2,8(sp)
    6bb4:	d8802104 	addi	r2,sp,132
    6bb8:	df000015 	stw	fp,0(sp)
    6bbc:	d8800315 	stw	r2,12(sp)
    6bc0:	b009883a 	mov	r4,r22
    6bc4:	900d883a 	mov	r6,r18
    6bc8:	01c00084 	movi	r7,2
    6bcc:	da003f15 	stw	r8,252(sp)
    6bd0:	da403e15 	stw	r9,248(sp)
    6bd4:	00078c40 	call	78c4 <_dtoa_r>
    6bd8:	d8803115 	stw	r2,196(sp)
    6bdc:	008019c4 	movi	r2,103
    6be0:	da003f17 	ldw	r8,252(sp)
    6be4:	da403e17 	ldw	r9,248(sp)
    6be8:	80800226 	beq	r16,r2,6bf4 <___vfprintf_internal_r+0x16b4>
    6bec:	008011c4 	movi	r2,71
    6bf0:	8081101e 	bne	r16,r2,7034 <___vfprintf_internal_r+0x1af4>
    6bf4:	8880004c 	andi	r2,r17,1
    6bf8:	1001dd26 	beq	r2,zero,7370 <___vfprintf_internal_r+0x1e30>
    6bfc:	db003117 	ldw	r12,196(sp)
    6c00:	6715883a 	add	r10,r12,fp
    6c04:	d9003717 	ldw	r4,220(sp)
    6c08:	900b883a 	mov	r5,r18
    6c0c:	000d883a 	mov	r6,zero
    6c10:	000f883a 	mov	r7,zero
    6c14:	da003f15 	stw	r8,252(sp)
    6c18:	da403e15 	stw	r9,248(sp)
    6c1c:	da803d15 	stw	r10,244(sp)
    6c20:	00114b00 	call	114b0 <__eqdf2>
    6c24:	da003f17 	ldw	r8,252(sp)
    6c28:	da403e17 	ldw	r9,248(sp)
    6c2c:	da803d17 	ldw	r10,244(sp)
    6c30:	10016526 	beq	r2,zero,71c8 <___vfprintf_internal_r+0x1c88>
    6c34:	d8802117 	ldw	r2,132(sp)
    6c38:	1280062e 	bgeu	r2,r10,6c54 <___vfprintf_internal_r+0x1714>
    6c3c:	01000c04 	movi	r4,48
    6c40:	10c00044 	addi	r3,r2,1
    6c44:	d8c02115 	stw	r3,132(sp)
    6c48:	11000005 	stb	r4,0(r2)
    6c4c:	d8802117 	ldw	r2,132(sp)
    6c50:	12bffb36 	bltu	r2,r10,6c40 <__alt_mem_Flash_flash_data+0xf4006c40>
    6c54:	db003117 	ldw	r12,196(sp)
    6c58:	1305c83a 	sub	r2,r2,r12
    6c5c:	d8803315 	stw	r2,204(sp)
    6c60:	008011c4 	movi	r2,71
    6c64:	a8814d26 	beq	r21,r2,719c <___vfprintf_internal_r+0x1c5c>
    6c68:	00801944 	movi	r2,101
    6c6c:	1402060e 	bge	r2,r16,7488 <___vfprintf_internal_r+0x1f48>
    6c70:	00801984 	movi	r2,102
    6c74:	8081b426 	beq	r16,r2,7348 <___vfprintf_internal_r+0x1e08>
    6c78:	db002617 	ldw	r12,152(sp)
    6c7c:	db003415 	stw	r12,208(sp)
    6c80:	db003417 	ldw	r12,208(sp)
    6c84:	dac03317 	ldw	r11,204(sp)
    6c88:	62c1a016 	blt	r12,r11,730c <___vfprintf_internal_r+0x1dcc>
    6c8c:	8c40004c 	andi	r17,r17,1
    6c90:	8801bf1e 	bne	r17,zero,7390 <___vfprintf_internal_r+0x1e50>
    6c94:	6005883a 	mov	r2,r12
    6c98:	6001b316 	blt	r12,zero,7368 <___vfprintf_internal_r+0x1e28>
    6c9c:	dc803417 	ldw	r18,208(sp)
    6ca0:	df002b07 	ldb	fp,172(sp)
    6ca4:	e0012e1e 	bne	fp,zero,7160 <___vfprintf_internal_r+0x1c20>
    6ca8:	dc402d17 	ldw	r17,180(sp)
    6cac:	dd402783 	ldbu	r21,158(sp)
    6cb0:	d8802b15 	stw	r2,172(sp)
    6cb4:	dcc02d15 	stw	r19,180(sp)
    6cb8:	d8003215 	stw	zero,200(sp)
    6cbc:	003b7306 	br	5a8c <__alt_mem_Flash_flash_data+0xf4005a8c>
    6cc0:	00800084 	movi	r2,2
    6cc4:	003c4d06 	br	5dfc <__alt_mem_Flash_flash_data+0xf4005dfc>
    6cc8:	8880040c 	andi	r2,r17,16
    6ccc:	1000091e 	bne	r2,zero,6cf4 <___vfprintf_internal_r+0x17b4>
    6cd0:	8c40100c 	andi	r17,r17,64
    6cd4:	88000726 	beq	r17,zero,6cf4 <___vfprintf_internal_r+0x17b4>
    6cd8:	db002d17 	ldw	r12,180(sp)
    6cdc:	dac02f17 	ldw	r11,188(sp)
    6ce0:	60800017 	ldw	r2,0(r12)
    6ce4:	63000104 	addi	r12,r12,4
    6ce8:	db002d15 	stw	r12,180(sp)
    6cec:	12c0000d 	sth	r11,0(r2)
    6cf0:	003a4e06 	br	562c <__alt_mem_Flash_flash_data+0xf400562c>
    6cf4:	db002d17 	ldw	r12,180(sp)
    6cf8:	dac02f17 	ldw	r11,188(sp)
    6cfc:	60800017 	ldw	r2,0(r12)
    6d00:	63000104 	addi	r12,r12,4
    6d04:	db002d15 	stw	r12,180(sp)
    6d08:	12c00015 	stw	r11,0(r2)
    6d0c:	003a4706 	br	562c <__alt_mem_Flash_flash_data+0xf400562c>
    6d10:	1c000007 	ldb	r16,0(r3)
    6d14:	1805883a 	mov	r2,r3
    6d18:	003a6e06 	br	56d4 <__alt_mem_Flash_flash_data+0xf40056d4>
    6d1c:	88c0100c 	andi	r3,r17,64
    6d20:	18006b26 	beq	r3,zero,6ed0 <___vfprintf_internal_r+0x1990>
    6d24:	dac02d17 	ldw	r11,180(sp)
    6d28:	14c0000b 	ldhu	r19,0(r2)
    6d2c:	0039883a 	mov	fp,zero
    6d30:	5ac00104 	addi	r11,r11,4
    6d34:	dac02d15 	stw	r11,180(sp)
    6d38:	003cb206 	br	6004 <__alt_mem_Flash_flash_data+0xf4006004>
    6d3c:	010000b4 	movhi	r4,2
    6d40:	21009884 	addi	r4,r4,610
    6d44:	d9002c15 	stw	r4,176(sp)
    6d48:	dac02c17 	ldw	r11,176(sp)
    6d4c:	1c87883a 	add	r3,r3,r18
    6d50:	10800044 	addi	r2,r2,1
    6d54:	42c00015 	stw	r11,0(r8)
    6d58:	44800115 	stw	r18,4(r8)
    6d5c:	d8c02015 	stw	r3,128(sp)
    6d60:	d8801f15 	stw	r2,124(sp)
    6d64:	010001c4 	movi	r4,7
    6d68:	20bee016 	blt	r4,r2,68ec <__alt_mem_Flash_flash_data+0xf40068ec>
    6d6c:	42000204 	addi	r8,r8,8
    6d70:	003ee506 	br	6908 <__alt_mem_Flash_flash_data+0xf4006908>
    6d74:	010000b4 	movhi	r4,2
    6d78:	21009884 	addi	r4,r4,610
    6d7c:	d9002c15 	stw	r4,176(sp)
    6d80:	003bbe06 	br	5c7c <__alt_mem_Flash_flash_data+0xf4005c7c>
    6d84:	b009883a 	mov	r4,r22
    6d88:	b80b883a 	mov	r5,r23
    6d8c:	d9801e04 	addi	r6,sp,120
    6d90:	000da0c0 	call	da0c <__sprint_r>
    6d94:	103ade1e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    6d98:	d8c02017 	ldw	r3,128(sp)
    6d9c:	da000404 	addi	r8,sp,16
    6da0:	003d6b06 	br	6350 <__alt_mem_Flash_flash_data+0xf4006350>
    6da4:	d8801f17 	ldw	r2,124(sp)
    6da8:	030000b4 	movhi	r12,2
    6dac:	01000044 	movi	r4,1
    6db0:	18c00044 	addi	r3,r3,1
    6db4:	10800044 	addi	r2,r2,1
    6db8:	63009004 	addi	r12,r12,576
    6dbc:	41000115 	stw	r4,4(r8)
    6dc0:	43000015 	stw	r12,0(r8)
    6dc4:	d8c02015 	stw	r3,128(sp)
    6dc8:	d8801f15 	stw	r2,124(sp)
    6dcc:	010001c4 	movi	r4,7
    6dd0:	20804916 	blt	r4,r2,6ef8 <___vfprintf_internal_r+0x19b8>
    6dd4:	42000204 	addi	r8,r8,8
    6dd8:	8000041e 	bne	r16,zero,6dec <___vfprintf_internal_r+0x18ac>
    6ddc:	dac03317 	ldw	r11,204(sp)
    6de0:	5800021e 	bne	r11,zero,6dec <___vfprintf_internal_r+0x18ac>
    6de4:	8880004c 	andi	r2,r17,1
    6de8:	103bbb26 	beq	r2,zero,5cd8 <__alt_mem_Flash_flash_data+0xf4005cd8>
    6dec:	db003817 	ldw	r12,224(sp)
    6df0:	d8801f17 	ldw	r2,124(sp)
    6df4:	dac03517 	ldw	r11,212(sp)
    6df8:	1b07883a 	add	r3,r3,r12
    6dfc:	10800044 	addi	r2,r2,1
    6e00:	42c00015 	stw	r11,0(r8)
    6e04:	43000115 	stw	r12,4(r8)
    6e08:	d8c02015 	stw	r3,128(sp)
    6e0c:	d8801f15 	stw	r2,124(sp)
    6e10:	010001c4 	movi	r4,7
    6e14:	20812e16 	blt	r4,r2,72d0 <___vfprintf_internal_r+0x1d90>
    6e18:	42000204 	addi	r8,r8,8
    6e1c:	0421c83a 	sub	r16,zero,r16
    6e20:	04005c0e 	bge	zero,r16,6f94 <___vfprintf_internal_r+0x1a54>
    6e24:	04800404 	movi	r18,16
    6e28:	94009f0e 	bge	r18,r16,70a8 <___vfprintf_internal_r+0x1b68>
    6e2c:	010000b4 	movhi	r4,2
    6e30:	21009884 	addi	r4,r4,610
    6e34:	d9002c15 	stw	r4,176(sp)
    6e38:	054001c4 	movi	r21,7
    6e3c:	00000306 	br	6e4c <___vfprintf_internal_r+0x190c>
    6e40:	42000204 	addi	r8,r8,8
    6e44:	843ffc04 	addi	r16,r16,-16
    6e48:	94009a0e 	bge	r18,r16,70b4 <___vfprintf_internal_r+0x1b74>
    6e4c:	18c00404 	addi	r3,r3,16
    6e50:	10800044 	addi	r2,r2,1
    6e54:	45000015 	stw	r20,0(r8)
    6e58:	44800115 	stw	r18,4(r8)
    6e5c:	d8c02015 	stw	r3,128(sp)
    6e60:	d8801f15 	stw	r2,124(sp)
    6e64:	a8bff60e 	bge	r21,r2,6e40 <__alt_mem_Flash_flash_data+0xf4006e40>
    6e68:	b009883a 	mov	r4,r22
    6e6c:	b80b883a 	mov	r5,r23
    6e70:	d9801e04 	addi	r6,sp,120
    6e74:	000da0c0 	call	da0c <__sprint_r>
    6e78:	103aa51e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    6e7c:	d8c02017 	ldw	r3,128(sp)
    6e80:	d8801f17 	ldw	r2,124(sp)
    6e84:	da000404 	addi	r8,sp,16
    6e88:	003fee06 	br	6e44 <__alt_mem_Flash_flash_data+0xf4006e44>
    6e8c:	008011c4 	movi	r2,71
    6e90:	1400be16 	blt	r2,r16,718c <___vfprintf_internal_r+0x1c4c>
    6e94:	030000b4 	movhi	r12,2
    6e98:	63008204 	addi	r12,r12,520
    6e9c:	db003115 	stw	r12,196(sp)
    6ea0:	00c000c4 	movi	r3,3
    6ea4:	00bfdfc4 	movi	r2,-129
    6ea8:	d8c02b15 	stw	r3,172(sp)
    6eac:	88a2703a 	and	r17,r17,r2
    6eb0:	dd402783 	ldbu	r21,158(sp)
    6eb4:	dcc02d15 	stw	r19,180(sp)
    6eb8:	1825883a 	mov	r18,r3
    6ebc:	d8003215 	stw	zero,200(sp)
    6ec0:	d8003415 	stw	zero,208(sp)
    6ec4:	003af106 	br	5a8c <__alt_mem_Flash_flash_data+0xf4005a8c>
    6ec8:	4825883a 	mov	r18,r9
    6ecc:	003c9306 	br	611c <__alt_mem_Flash_flash_data+0xf400611c>
    6ed0:	db002d17 	ldw	r12,180(sp)
    6ed4:	14c00017 	ldw	r19,0(r2)
    6ed8:	0039883a 	mov	fp,zero
    6edc:	63000104 	addi	r12,r12,4
    6ee0:	db002d15 	stw	r12,180(sp)
    6ee4:	003c4706 	br	6004 <__alt_mem_Flash_flash_data+0xf4006004>
    6ee8:	008000b4 	movhi	r2,2
    6eec:	10808004 	addi	r2,r2,512
    6ef0:	d8803115 	stw	r2,196(sp)
    6ef4:	003bf106 	br	5ebc <__alt_mem_Flash_flash_data+0xf4005ebc>
    6ef8:	b009883a 	mov	r4,r22
    6efc:	b80b883a 	mov	r5,r23
    6f00:	d9801e04 	addi	r6,sp,120
    6f04:	000da0c0 	call	da0c <__sprint_r>
    6f08:	103a811e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    6f0c:	dc002617 	ldw	r16,152(sp)
    6f10:	d8c02017 	ldw	r3,128(sp)
    6f14:	da000404 	addi	r8,sp,16
    6f18:	003faf06 	br	6dd8 <__alt_mem_Flash_flash_data+0xf4006dd8>
    6f1c:	db002e17 	ldw	r12,184(sp)
    6f20:	1805883a 	mov	r2,r3
    6f24:	dac02d15 	stw	r11,180(sp)
    6f28:	0319c83a 	sub	r12,zero,r12
    6f2c:	db002e15 	stw	r12,184(sp)
    6f30:	003a8206 	br	593c <__alt_mem_Flash_flash_data+0xf400593c>
    6f34:	18800044 	addi	r2,r3,1
    6f38:	8c400814 	ori	r17,r17,32
    6f3c:	1c000047 	ldb	r16,1(r3)
    6f40:	0039e406 	br	56d4 <__alt_mem_Flash_flash_data+0xf40056d4>
    6f44:	b009883a 	mov	r4,r22
    6f48:	b80b883a 	mov	r5,r23
    6f4c:	d9801e04 	addi	r6,sp,120
    6f50:	000da0c0 	call	da0c <__sprint_r>
    6f54:	103a6e1e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    6f58:	d8c02017 	ldw	r3,128(sp)
    6f5c:	da000404 	addi	r8,sp,16
    6f60:	003d0c06 	br	6394 <__alt_mem_Flash_flash_data+0xf4006394>
    6f64:	db002817 	ldw	r12,160(sp)
    6f68:	d8c03117 	ldw	r3,196(sp)
    6f6c:	60e5c83a 	sub	r18,r12,r3
    6f70:	003ac106 	br	5a78 <__alt_mem_Flash_flash_data+0xf4005a78>
    6f74:	b009883a 	mov	r4,r22
    6f78:	b80b883a 	mov	r5,r23
    6f7c:	d9801e04 	addi	r6,sp,120
    6f80:	000da0c0 	call	da0c <__sprint_r>
    6f84:	103a621e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    6f88:	d8c02017 	ldw	r3,128(sp)
    6f8c:	d8801f17 	ldw	r2,124(sp)
    6f90:	da000404 	addi	r8,sp,16
    6f94:	db003317 	ldw	r12,204(sp)
    6f98:	dac03117 	ldw	r11,196(sp)
    6f9c:	10800044 	addi	r2,r2,1
    6fa0:	1b07883a 	add	r3,r3,r12
    6fa4:	42c00015 	stw	r11,0(r8)
    6fa8:	43000115 	stw	r12,4(r8)
    6fac:	d8c02015 	stw	r3,128(sp)
    6fb0:	d8801f15 	stw	r2,124(sp)
    6fb4:	010001c4 	movi	r4,7
    6fb8:	20bb460e 	bge	r4,r2,5cd4 <__alt_mem_Flash_flash_data+0xf4005cd4>
    6fbc:	003d8506 	br	65d4 <__alt_mem_Flash_flash_data+0xf40065d4>
    6fc0:	da003f15 	stw	r8,252(sp)
    6fc4:	00035180 	call	3518 <strlen>
    6fc8:	1025883a 	mov	r18,r2
    6fcc:	da003f17 	ldw	r8,252(sp)
    6fd0:	903c540e 	bge	r18,zero,6124 <__alt_mem_Flash_flash_data+0xf4006124>
    6fd4:	0005883a 	mov	r2,zero
    6fd8:	003c5206 	br	6124 <__alt_mem_Flash_flash_data+0xf4006124>
    6fdc:	010000b4 	movhi	r4,2
    6fe0:	21009c84 	addi	r4,r4,626
    6fe4:	d9003615 	stw	r4,216(sp)
    6fe8:	003adc06 	br	5b5c <__alt_mem_Flash_flash_data+0xf4005b5c>
    6fec:	d8802604 	addi	r2,sp,152
    6ff0:	d8800115 	stw	r2,4(sp)
    6ff4:	d9403717 	ldw	r5,220(sp)
    6ff8:	d8802504 	addi	r2,sp,148
    6ffc:	d8800215 	stw	r2,8(sp)
    7000:	d8802104 	addi	r2,sp,132
    7004:	da400015 	stw	r9,0(sp)
    7008:	d8800315 	stw	r2,12(sp)
    700c:	b009883a 	mov	r4,r22
    7010:	900d883a 	mov	r6,r18
    7014:	01c000c4 	movi	r7,3
    7018:	da003f15 	stw	r8,252(sp)
    701c:	da403e15 	stw	r9,248(sp)
    7020:	00078c40 	call	78c4 <_dtoa_r>
    7024:	da403e17 	ldw	r9,248(sp)
    7028:	da003f17 	ldw	r8,252(sp)
    702c:	d8803115 	stw	r2,196(sp)
    7030:	4839883a 	mov	fp,r9
    7034:	dac03117 	ldw	r11,196(sp)
    7038:	00801184 	movi	r2,70
    703c:	5f15883a 	add	r10,r11,fp
    7040:	a8bef01e 	bne	r21,r2,6c04 <__alt_mem_Flash_flash_data+0xf4006c04>
    7044:	59000007 	ldb	r4,0(r11)
    7048:	00800c04 	movi	r2,48
    704c:	2080d526 	beq	r4,r2,73a4 <___vfprintf_internal_r+0x1e64>
    7050:	d8c02617 	ldw	r3,152(sp)
    7054:	50d5883a 	add	r10,r10,r3
    7058:	003eea06 	br	6c04 <__alt_mem_Flash_flash_data+0xf4006c04>
    705c:	0025883a 	mov	r18,zero
    7060:	003db306 	br	6730 <__alt_mem_Flash_flash_data+0xf4006730>
    7064:	b009883a 	mov	r4,r22
    7068:	b80b883a 	mov	r5,r23
    706c:	d9801e04 	addi	r6,sp,120
    7070:	000da0c0 	call	da0c <__sprint_r>
    7074:	103a261e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    7078:	d8c02017 	ldw	r3,128(sp)
    707c:	da000404 	addi	r8,sp,16
    7080:	003daa06 	br	672c <__alt_mem_Flash_flash_data+0xf400672c>
    7084:	b009883a 	mov	r4,r22
    7088:	b80b883a 	mov	r5,r23
    708c:	d9801e04 	addi	r6,sp,120
    7090:	000da0c0 	call	da0c <__sprint_r>
    7094:	103a1e1e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    7098:	d8802617 	ldw	r2,152(sp)
    709c:	d8c02017 	ldw	r3,128(sp)
    70a0:	da000404 	addi	r8,sp,16
    70a4:	003e2c06 	br	6958 <__alt_mem_Flash_flash_data+0xf4006958>
    70a8:	030000b4 	movhi	r12,2
    70ac:	63009884 	addi	r12,r12,610
    70b0:	db002c15 	stw	r12,176(sp)
    70b4:	dac02c17 	ldw	r11,176(sp)
    70b8:	1c07883a 	add	r3,r3,r16
    70bc:	10800044 	addi	r2,r2,1
    70c0:	42c00015 	stw	r11,0(r8)
    70c4:	44000115 	stw	r16,4(r8)
    70c8:	d8c02015 	stw	r3,128(sp)
    70cc:	d8801f15 	stw	r2,124(sp)
    70d0:	010001c4 	movi	r4,7
    70d4:	20bfa716 	blt	r4,r2,6f74 <__alt_mem_Flash_flash_data+0xf4006f74>
    70d8:	42000204 	addi	r8,r8,8
    70dc:	003fad06 	br	6f94 <__alt_mem_Flash_flash_data+0xf4006f94>
    70e0:	00800184 	movi	r2,6
    70e4:	1240012e 	bgeu	r2,r9,70ec <___vfprintf_internal_r+0x1bac>
    70e8:	1013883a 	mov	r9,r2
    70ec:	4825883a 	mov	r18,r9
    70f0:	4805883a 	mov	r2,r9
    70f4:	4800c216 	blt	r9,zero,7400 <___vfprintf_internal_r+0x1ec0>
    70f8:	d8802b15 	stw	r2,172(sp)
    70fc:	008000b4 	movhi	r2,2
    7100:	10808e04 	addi	r2,r2,568
    7104:	d8803115 	stw	r2,196(sp)
    7108:	dcc02d15 	stw	r19,180(sp)
    710c:	d8003215 	stw	zero,200(sp)
    7110:	d8003415 	stw	zero,208(sp)
    7114:	0005883a 	mov	r2,zero
    7118:	003a6306 	br	5aa8 <__alt_mem_Flash_flash_data+0xf4005aa8>
    711c:	0021883a 	mov	r16,zero
    7120:	003e1f06 	br	69a0 <__alt_mem_Flash_flash_data+0xf40069a0>
    7124:	b009883a 	mov	r4,r22
    7128:	b80b883a 	mov	r5,r23
    712c:	d9801e04 	addi	r6,sp,120
    7130:	000da0c0 	call	da0c <__sprint_r>
    7134:	1039f61e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    7138:	d8802617 	ldw	r2,152(sp)
    713c:	db003317 	ldw	r12,204(sp)
    7140:	d8c02017 	ldw	r3,128(sp)
    7144:	da000404 	addi	r8,sp,16
    7148:	6085c83a 	sub	r2,r12,r2
    714c:	003e1306 	br	699c <__alt_mem_Flash_flash_data+0xf400699c>
    7150:	030000b4 	movhi	r12,2
    7154:	63009c84 	addi	r12,r12,626
    7158:	db003615 	stw	r12,216(sp)
    715c:	003b0206 	br	5d68 <__alt_mem_Flash_flash_data+0xf4005d68>
    7160:	00c00b44 	movi	r3,45
    7164:	d8802b15 	stw	r2,172(sp)
    7168:	dc402d17 	ldw	r17,180(sp)
    716c:	d8c02785 	stb	r3,158(sp)
    7170:	dcc02d15 	stw	r19,180(sp)
    7174:	d8003215 	stw	zero,200(sp)
    7178:	00800b44 	movi	r2,45
    717c:	003a4706 	br	5a9c <__alt_mem_Flash_flash_data+0xf4005a9c>
    7180:	05400b44 	movi	r21,45
    7184:	dd402785 	stb	r21,158(sp)
    7188:	003b4706 	br	5ea8 <__alt_mem_Flash_flash_data+0xf4005ea8>
    718c:	008000b4 	movhi	r2,2
    7190:	10808304 	addi	r2,r2,524
    7194:	d8803115 	stw	r2,196(sp)
    7198:	003f4106 	br	6ea0 <__alt_mem_Flash_flash_data+0xf4006ea0>
    719c:	d8c02617 	ldw	r3,152(sp)
    71a0:	00bfff44 	movi	r2,-3
    71a4:	18801116 	blt	r3,r2,71ec <___vfprintf_internal_r+0x1cac>
    71a8:	48c01016 	blt	r9,r3,71ec <___vfprintf_internal_r+0x1cac>
    71ac:	d8c03415 	stw	r3,208(sp)
    71b0:	040019c4 	movi	r16,103
    71b4:	003eb206 	br	6c80 <__alt_mem_Flash_flash_data+0xf4006c80>
    71b8:	010000b4 	movhi	r4,2
    71bc:	21009884 	addi	r4,r4,610
    71c0:	d9002c15 	stw	r4,176(sp)
    71c4:	003cb106 	br	648c <__alt_mem_Flash_flash_data+0xf400648c>
    71c8:	5005883a 	mov	r2,r10
    71cc:	003ea106 	br	6c54 <__alt_mem_Flash_flash_data+0xf4006c54>
    71d0:	da402b15 	stw	r9,172(sp)
    71d4:	dd402783 	ldbu	r21,158(sp)
    71d8:	4825883a 	mov	r18,r9
    71dc:	dcc02d15 	stw	r19,180(sp)
    71e0:	d8003215 	stw	zero,200(sp)
    71e4:	d8003415 	stw	zero,208(sp)
    71e8:	003a2806 	br	5a8c <__alt_mem_Flash_flash_data+0xf4005a8c>
    71ec:	843fff84 	addi	r16,r16,-2
    71f0:	1f3fffc4 	addi	fp,r3,-1
    71f4:	df002615 	stw	fp,152(sp)
    71f8:	dc0022c5 	stb	r16,139(sp)
    71fc:	e0009816 	blt	fp,zero,7460 <___vfprintf_internal_r+0x1f20>
    7200:	00800ac4 	movi	r2,43
    7204:	d8802305 	stb	r2,140(sp)
    7208:	00800244 	movi	r2,9
    720c:	1700750e 	bge	r2,fp,73e4 <___vfprintf_internal_r+0x1ea4>
    7210:	dd4022c4 	addi	r21,sp,139
    7214:	dc002c15 	stw	r16,176(sp)
    7218:	4025883a 	mov	r18,r8
    721c:	a821883a 	mov	r16,r21
    7220:	e009883a 	mov	r4,fp
    7224:	01400284 	movi	r5,10
    7228:	00102dc0 	call	102dc <__modsi3>
    722c:	10800c04 	addi	r2,r2,48
    7230:	843fffc4 	addi	r16,r16,-1
    7234:	e009883a 	mov	r4,fp
    7238:	01400284 	movi	r5,10
    723c:	80800005 	stb	r2,0(r16)
    7240:	00102880 	call	10288 <__divsi3>
    7244:	1039883a 	mov	fp,r2
    7248:	00800244 	movi	r2,9
    724c:	173ff416 	blt	r2,fp,7220 <__alt_mem_Flash_flash_data+0xf4007220>
    7250:	9011883a 	mov	r8,r18
    7254:	e0800c04 	addi	r2,fp,48
    7258:	8025883a 	mov	r18,r16
    725c:	913fffc4 	addi	r4,r18,-1
    7260:	90bfffc5 	stb	r2,-1(r18)
    7264:	dc002c17 	ldw	r16,176(sp)
    7268:	2540852e 	bgeu	r4,r21,7480 <___vfprintf_internal_r+0x1f40>
    726c:	d9402384 	addi	r5,sp,142
    7270:	2c8bc83a 	sub	r5,r5,r18
    7274:	d8c02344 	addi	r3,sp,141
    7278:	a94b883a 	add	r5,r21,r5
    727c:	00000106 	br	7284 <___vfprintf_internal_r+0x1d44>
    7280:	20800003 	ldbu	r2,0(r4)
    7284:	18800005 	stb	r2,0(r3)
    7288:	18c00044 	addi	r3,r3,1
    728c:	21000044 	addi	r4,r4,1
    7290:	197ffb1e 	bne	r3,r5,7280 <__alt_mem_Flash_flash_data+0xf4007280>
    7294:	d8802304 	addi	r2,sp,140
    7298:	1485c83a 	sub	r2,r2,r18
    729c:	d8c02344 	addi	r3,sp,141
    72a0:	1885883a 	add	r2,r3,r2
    72a4:	dac03317 	ldw	r11,204(sp)
    72a8:	156bc83a 	sub	r21,r2,r21
    72ac:	dd403a15 	stw	r21,232(sp)
    72b0:	00800044 	movi	r2,1
    72b4:	5d65883a 	add	r18,r11,r21
    72b8:	12c0660e 	bge	r2,r11,7454 <___vfprintf_internal_r+0x1f14>
    72bc:	94800044 	addi	r18,r18,1
    72c0:	9005883a 	mov	r2,r18
    72c4:	90006116 	blt	r18,zero,744c <___vfprintf_internal_r+0x1f0c>
    72c8:	d8003415 	stw	zero,208(sp)
    72cc:	003e7406 	br	6ca0 <__alt_mem_Flash_flash_data+0xf4006ca0>
    72d0:	b009883a 	mov	r4,r22
    72d4:	b80b883a 	mov	r5,r23
    72d8:	d9801e04 	addi	r6,sp,120
    72dc:	000da0c0 	call	da0c <__sprint_r>
    72e0:	10398b1e 	bne	r2,zero,5910 <__alt_mem_Flash_flash_data+0xf4005910>
    72e4:	dc002617 	ldw	r16,152(sp)
    72e8:	d8c02017 	ldw	r3,128(sp)
    72ec:	d8801f17 	ldw	r2,124(sp)
    72f0:	da000404 	addi	r8,sp,16
    72f4:	003ec906 	br	6e1c <__alt_mem_Flash_flash_data+0xf4006e1c>
    72f8:	483e1c1e 	bne	r9,zero,6b6c <__alt_mem_Flash_flash_data+0xf4006b6c>
    72fc:	9013883a 	mov	r9,r18
    7300:	003e1a06 	br	6b6c <__alt_mem_Flash_flash_data+0xf4006b6c>
    7304:	02400184 	movi	r9,6
    7308:	003e1806 	br	6b6c <__alt_mem_Flash_flash_data+0xf4006b6c>
    730c:	d8c03417 	ldw	r3,208(sp)
    7310:	00c04b0e 	bge	zero,r3,7440 <___vfprintf_internal_r+0x1f00>
    7314:	04800044 	movi	r18,1
    7318:	dac03317 	ldw	r11,204(sp)
    731c:	92e5883a 	add	r18,r18,r11
    7320:	9005883a 	mov	r2,r18
    7324:	903e5e0e 	bge	r18,zero,6ca0 <__alt_mem_Flash_flash_data+0xf4006ca0>
    7328:	0005883a 	mov	r2,zero
    732c:	003e5c06 	br	6ca0 <__alt_mem_Flash_flash_data+0xf4006ca0>
    7330:	00c00b44 	movi	r3,45
    7334:	64a0003c 	xorhi	r18,r12,32768
    7338:	d8c02b05 	stb	r3,172(sp)
    733c:	003e1106 	br	6b84 <__alt_mem_Flash_flash_data+0xf4006b84>
    7340:	4f000044 	addi	fp,r9,1
    7344:	003e1606 	br	6ba0 <__alt_mem_Flash_flash_data+0xf4006ba0>
    7348:	d8c02617 	ldw	r3,152(sp)
    734c:	d8c03415 	stw	r3,208(sp)
    7350:	00c0350e 	bge	zero,r3,7428 <___vfprintf_internal_r+0x1ee8>
    7354:	4800081e 	bne	r9,zero,7378 <___vfprintf_internal_r+0x1e38>
    7358:	8c40004c 	andi	r17,r17,1
    735c:	8800061e 	bne	r17,zero,7378 <___vfprintf_internal_r+0x1e38>
    7360:	1805883a 	mov	r2,r3
    7364:	183e4d0e 	bge	r3,zero,6c9c <__alt_mem_Flash_flash_data+0xf4006c9c>
    7368:	0005883a 	mov	r2,zero
    736c:	003e4b06 	br	6c9c <__alt_mem_Flash_flash_data+0xf4006c9c>
    7370:	d8802117 	ldw	r2,132(sp)
    7374:	003e3706 	br	6c54 <__alt_mem_Flash_flash_data+0xf4006c54>
    7378:	dac03417 	ldw	r11,208(sp)
    737c:	4a400044 	addi	r9,r9,1
    7380:	5a65883a 	add	r18,r11,r9
    7384:	9005883a 	mov	r2,r18
    7388:	903e450e 	bge	r18,zero,6ca0 <__alt_mem_Flash_flash_data+0xf4006ca0>
    738c:	003fe606 	br	7328 <__alt_mem_Flash_flash_data+0xf4007328>
    7390:	db003417 	ldw	r12,208(sp)
    7394:	64800044 	addi	r18,r12,1
    7398:	9005883a 	mov	r2,r18
    739c:	903e400e 	bge	r18,zero,6ca0 <__alt_mem_Flash_flash_data+0xf4006ca0>
    73a0:	003fe106 	br	7328 <__alt_mem_Flash_flash_data+0xf4007328>
    73a4:	d9003717 	ldw	r4,220(sp)
    73a8:	900b883a 	mov	r5,r18
    73ac:	000d883a 	mov	r6,zero
    73b0:	000f883a 	mov	r7,zero
    73b4:	da003f15 	stw	r8,252(sp)
    73b8:	da403e15 	stw	r9,248(sp)
    73bc:	da803d15 	stw	r10,244(sp)
    73c0:	00114b00 	call	114b0 <__eqdf2>
    73c4:	da003f17 	ldw	r8,252(sp)
    73c8:	da403e17 	ldw	r9,248(sp)
    73cc:	da803d17 	ldw	r10,244(sp)
    73d0:	103f1f26 	beq	r2,zero,7050 <__alt_mem_Flash_flash_data+0xf4007050>
    73d4:	00800044 	movi	r2,1
    73d8:	1707c83a 	sub	r3,r2,fp
    73dc:	d8c02615 	stw	r3,152(sp)
    73e0:	003f1c06 	br	7054 <__alt_mem_Flash_flash_data+0xf4007054>
    73e4:	00800c04 	movi	r2,48
    73e8:	e0c00c04 	addi	r3,fp,48
    73ec:	d8802345 	stb	r2,141(sp)
    73f0:	d8c02385 	stb	r3,142(sp)
    73f4:	d88023c4 	addi	r2,sp,143
    73f8:	dd4022c4 	addi	r21,sp,139
    73fc:	003fa906 	br	72a4 <__alt_mem_Flash_flash_data+0xf40072a4>
    7400:	0005883a 	mov	r2,zero
    7404:	003f3c06 	br	70f8 <__alt_mem_Flash_flash_data+0xf40070f8>
    7408:	dac02d17 	ldw	r11,180(sp)
    740c:	5a400017 	ldw	r9,0(r11)
    7410:	5ac00104 	addi	r11,r11,4
    7414:	dac02d15 	stw	r11,180(sp)
    7418:	483ec80e 	bge	r9,zero,6f3c <__alt_mem_Flash_flash_data+0xf4006f3c>
    741c:	027fffc4 	movi	r9,-1
    7420:	1c000047 	ldb	r16,1(r3)
    7424:	0038ab06 	br	56d4 <__alt_mem_Flash_flash_data+0xf40056d4>
    7428:	4800111e 	bne	r9,zero,7470 <___vfprintf_internal_r+0x1f30>
    742c:	8c40004c 	andi	r17,r17,1
    7430:	88000f1e 	bne	r17,zero,7470 <___vfprintf_internal_r+0x1f30>
    7434:	00800044 	movi	r2,1
    7438:	1025883a 	mov	r18,r2
    743c:	003e1806 	br	6ca0 <__alt_mem_Flash_flash_data+0xf4006ca0>
    7440:	04800084 	movi	r18,2
    7444:	90e5c83a 	sub	r18,r18,r3
    7448:	003fb306 	br	7318 <__alt_mem_Flash_flash_data+0xf4007318>
    744c:	0005883a 	mov	r2,zero
    7450:	003f9d06 	br	72c8 <__alt_mem_Flash_flash_data+0xf40072c8>
    7454:	88a2703a 	and	r17,r17,r2
    7458:	883f9926 	beq	r17,zero,72c0 <__alt_mem_Flash_flash_data+0xf40072c0>
    745c:	003f9706 	br	72bc <__alt_mem_Flash_flash_data+0xf40072bc>
    7460:	00800b44 	movi	r2,45
    7464:	0739c83a 	sub	fp,zero,fp
    7468:	d8802305 	stb	r2,140(sp)
    746c:	003f6606 	br	7208 <__alt_mem_Flash_flash_data+0xf4007208>
    7470:	4c800084 	addi	r18,r9,2
    7474:	9005883a 	mov	r2,r18
    7478:	903e090e 	bge	r18,zero,6ca0 <__alt_mem_Flash_flash_data+0xf4006ca0>
    747c:	003faa06 	br	7328 <__alt_mem_Flash_flash_data+0xf4007328>
    7480:	d8802344 	addi	r2,sp,141
    7484:	003f8706 	br	72a4 <__alt_mem_Flash_flash_data+0xf40072a4>
    7488:	d8c02617 	ldw	r3,152(sp)
    748c:	003f5806 	br	71f0 <__alt_mem_Flash_flash_data+0xf40071f0>

00007490 <__vfprintf_internal>:
    7490:	2007883a 	mov	r3,r4
    7494:	010000b4 	movhi	r4,2
    7498:	21099a04 	addi	r4,r4,9832
    749c:	21000017 	ldw	r4,0(r4)
    74a0:	2805883a 	mov	r2,r5
    74a4:	300f883a 	mov	r7,r6
    74a8:	180b883a 	mov	r5,r3
    74ac:	100d883a 	mov	r6,r2
    74b0:	00055401 	jmpi	5540 <___vfprintf_internal_r>

000074b4 <__sbprintf>:
    74b4:	2880030b 	ldhu	r2,12(r5)
    74b8:	2ac01917 	ldw	r11,100(r5)
    74bc:	2a80038b 	ldhu	r10,14(r5)
    74c0:	2a400717 	ldw	r9,28(r5)
    74c4:	2a000917 	ldw	r8,36(r5)
    74c8:	defee204 	addi	sp,sp,-1144
    74cc:	00c10004 	movi	r3,1024
    74d0:	dc011a15 	stw	r16,1128(sp)
    74d4:	10bfff4c 	andi	r2,r2,65533
    74d8:	2821883a 	mov	r16,r5
    74dc:	d8cb883a 	add	r5,sp,r3
    74e0:	dc811c15 	stw	r18,1136(sp)
    74e4:	dc411b15 	stw	r17,1132(sp)
    74e8:	dfc11d15 	stw	ra,1140(sp)
    74ec:	2025883a 	mov	r18,r4
    74f0:	d881030d 	sth	r2,1036(sp)
    74f4:	dac11915 	stw	r11,1124(sp)
    74f8:	da81038d 	sth	r10,1038(sp)
    74fc:	da410715 	stw	r9,1052(sp)
    7500:	da010915 	stw	r8,1060(sp)
    7504:	dec10015 	stw	sp,1024(sp)
    7508:	dec10415 	stw	sp,1040(sp)
    750c:	d8c10215 	stw	r3,1032(sp)
    7510:	d8c10515 	stw	r3,1044(sp)
    7514:	d8010615 	stw	zero,1048(sp)
    7518:	00055400 	call	5540 <___vfprintf_internal_r>
    751c:	1023883a 	mov	r17,r2
    7520:	10000416 	blt	r2,zero,7534 <__sbprintf+0x80>
    7524:	9009883a 	mov	r4,r18
    7528:	d9410004 	addi	r5,sp,1024
    752c:	00091f40 	call	91f4 <_fflush_r>
    7530:	10000d1e 	bne	r2,zero,7568 <__sbprintf+0xb4>
    7534:	d8c1030b 	ldhu	r3,1036(sp)
    7538:	18c0100c 	andi	r3,r3,64
    753c:	18000326 	beq	r3,zero,754c <__sbprintf+0x98>
    7540:	8080030b 	ldhu	r2,12(r16)
    7544:	10801014 	ori	r2,r2,64
    7548:	8080030d 	sth	r2,12(r16)
    754c:	8805883a 	mov	r2,r17
    7550:	dfc11d17 	ldw	ra,1140(sp)
    7554:	dc811c17 	ldw	r18,1136(sp)
    7558:	dc411b17 	ldw	r17,1132(sp)
    755c:	dc011a17 	ldw	r16,1128(sp)
    7560:	dec11e04 	addi	sp,sp,1144
    7564:	f800283a 	ret
    7568:	047fffc4 	movi	r17,-1
    756c:	003ff106 	br	7534 <__alt_mem_Flash_flash_data+0xf4007534>

00007570 <__swsetup_r>:
    7570:	008000b4 	movhi	r2,2
    7574:	defffd04 	addi	sp,sp,-12
    7578:	10899a04 	addi	r2,r2,9832
    757c:	dc400115 	stw	r17,4(sp)
    7580:	2023883a 	mov	r17,r4
    7584:	11000017 	ldw	r4,0(r2)
    7588:	dc000015 	stw	r16,0(sp)
    758c:	dfc00215 	stw	ra,8(sp)
    7590:	2821883a 	mov	r16,r5
    7594:	20000226 	beq	r4,zero,75a0 <__swsetup_r+0x30>
    7598:	20c00e17 	ldw	r3,56(r4)
    759c:	18003126 	beq	r3,zero,7664 <__swsetup_r+0xf4>
    75a0:	8080030b 	ldhu	r2,12(r16)
    75a4:	10c0020c 	andi	r3,r2,8
    75a8:	100d883a 	mov	r6,r2
    75ac:	18000f26 	beq	r3,zero,75ec <__swsetup_r+0x7c>
    75b0:	80c00417 	ldw	r3,16(r16)
    75b4:	18001526 	beq	r3,zero,760c <__swsetup_r+0x9c>
    75b8:	1100004c 	andi	r4,r2,1
    75bc:	20001c1e 	bne	r4,zero,7630 <__swsetup_r+0xc0>
    75c0:	1080008c 	andi	r2,r2,2
    75c4:	1000291e 	bne	r2,zero,766c <__swsetup_r+0xfc>
    75c8:	80800517 	ldw	r2,20(r16)
    75cc:	80800215 	stw	r2,8(r16)
    75d0:	18001c26 	beq	r3,zero,7644 <__swsetup_r+0xd4>
    75d4:	0005883a 	mov	r2,zero
    75d8:	dfc00217 	ldw	ra,8(sp)
    75dc:	dc400117 	ldw	r17,4(sp)
    75e0:	dc000017 	ldw	r16,0(sp)
    75e4:	dec00304 	addi	sp,sp,12
    75e8:	f800283a 	ret
    75ec:	3080040c 	andi	r2,r6,16
    75f0:	10002e26 	beq	r2,zero,76ac <__swsetup_r+0x13c>
    75f4:	3080010c 	andi	r2,r6,4
    75f8:	10001e1e 	bne	r2,zero,7674 <__swsetup_r+0x104>
    75fc:	80c00417 	ldw	r3,16(r16)
    7600:	30800214 	ori	r2,r6,8
    7604:	8080030d 	sth	r2,12(r16)
    7608:	183feb1e 	bne	r3,zero,75b8 <__alt_mem_Flash_flash_data+0xf40075b8>
    760c:	1140a00c 	andi	r5,r2,640
    7610:	01008004 	movi	r4,512
    7614:	293fe826 	beq	r5,r4,75b8 <__alt_mem_Flash_flash_data+0xf40075b8>
    7618:	8809883a 	mov	r4,r17
    761c:	800b883a 	mov	r5,r16
    7620:	000a15c0 	call	a15c <__smakebuf_r>
    7624:	8080030b 	ldhu	r2,12(r16)
    7628:	80c00417 	ldw	r3,16(r16)
    762c:	003fe206 	br	75b8 <__alt_mem_Flash_flash_data+0xf40075b8>
    7630:	80800517 	ldw	r2,20(r16)
    7634:	80000215 	stw	zero,8(r16)
    7638:	0085c83a 	sub	r2,zero,r2
    763c:	80800615 	stw	r2,24(r16)
    7640:	183fe41e 	bne	r3,zero,75d4 <__alt_mem_Flash_flash_data+0xf40075d4>
    7644:	80c0030b 	ldhu	r3,12(r16)
    7648:	0005883a 	mov	r2,zero
    764c:	1900200c 	andi	r4,r3,128
    7650:	203fe126 	beq	r4,zero,75d8 <__alt_mem_Flash_flash_data+0xf40075d8>
    7654:	18c01014 	ori	r3,r3,64
    7658:	80c0030d 	sth	r3,12(r16)
    765c:	00bfffc4 	movi	r2,-1
    7660:	003fdd06 	br	75d8 <__alt_mem_Flash_flash_data+0xf40075d8>
    7664:	00095d00 	call	95d0 <__sinit>
    7668:	003fcd06 	br	75a0 <__alt_mem_Flash_flash_data+0xf40075a0>
    766c:	0005883a 	mov	r2,zero
    7670:	003fd606 	br	75cc <__alt_mem_Flash_flash_data+0xf40075cc>
    7674:	81400c17 	ldw	r5,48(r16)
    7678:	28000626 	beq	r5,zero,7694 <__swsetup_r+0x124>
    767c:	80801004 	addi	r2,r16,64
    7680:	28800326 	beq	r5,r2,7690 <__swsetup_r+0x120>
    7684:	8809883a 	mov	r4,r17
    7688:	00097440 	call	9744 <_free_r>
    768c:	8180030b 	ldhu	r6,12(r16)
    7690:	80000c15 	stw	zero,48(r16)
    7694:	80c00417 	ldw	r3,16(r16)
    7698:	00bff6c4 	movi	r2,-37
    769c:	118c703a 	and	r6,r2,r6
    76a0:	80000115 	stw	zero,4(r16)
    76a4:	80c00015 	stw	r3,0(r16)
    76a8:	003fd506 	br	7600 <__alt_mem_Flash_flash_data+0xf4007600>
    76ac:	00800244 	movi	r2,9
    76b0:	88800015 	stw	r2,0(r17)
    76b4:	30801014 	ori	r2,r6,64
    76b8:	8080030d 	sth	r2,12(r16)
    76bc:	00bfffc4 	movi	r2,-1
    76c0:	003fc506 	br	75d8 <__alt_mem_Flash_flash_data+0xf40075d8>

000076c4 <quorem>:
    76c4:	defff704 	addi	sp,sp,-36
    76c8:	dc800215 	stw	r18,8(sp)
    76cc:	20800417 	ldw	r2,16(r4)
    76d0:	2c800417 	ldw	r18,16(r5)
    76d4:	dfc00815 	stw	ra,32(sp)
    76d8:	ddc00715 	stw	r23,28(sp)
    76dc:	dd800615 	stw	r22,24(sp)
    76e0:	dd400515 	stw	r21,20(sp)
    76e4:	dd000415 	stw	r20,16(sp)
    76e8:	dcc00315 	stw	r19,12(sp)
    76ec:	dc400115 	stw	r17,4(sp)
    76f0:	dc000015 	stw	r16,0(sp)
    76f4:	14807116 	blt	r2,r18,78bc <quorem+0x1f8>
    76f8:	94bfffc4 	addi	r18,r18,-1
    76fc:	94ad883a 	add	r22,r18,r18
    7700:	b5ad883a 	add	r22,r22,r22
    7704:	2c400504 	addi	r17,r5,20
    7708:	8da9883a 	add	r20,r17,r22
    770c:	25400504 	addi	r21,r4,20
    7710:	282f883a 	mov	r23,r5
    7714:	adad883a 	add	r22,r21,r22
    7718:	a1400017 	ldw	r5,0(r20)
    771c:	2021883a 	mov	r16,r4
    7720:	b1000017 	ldw	r4,0(r22)
    7724:	29400044 	addi	r5,r5,1
    7728:	00103380 	call	10338 <__udivsi3>
    772c:	1027883a 	mov	r19,r2
    7730:	10002c26 	beq	r2,zero,77e4 <quorem+0x120>
    7734:	a813883a 	mov	r9,r21
    7738:	8811883a 	mov	r8,r17
    773c:	0009883a 	mov	r4,zero
    7740:	000d883a 	mov	r6,zero
    7744:	41c00017 	ldw	r7,0(r8)
    7748:	49400017 	ldw	r5,0(r9)
    774c:	42000104 	addi	r8,r8,4
    7750:	38bfffcc 	andi	r2,r7,65535
    7754:	14c5383a 	mul	r2,r2,r19
    7758:	380ed43a 	srli	r7,r7,16
    775c:	28ffffcc 	andi	r3,r5,65535
    7760:	2085883a 	add	r2,r4,r2
    7764:	1008d43a 	srli	r4,r2,16
    7768:	3ccf383a 	mul	r7,r7,r19
    776c:	198d883a 	add	r6,r3,r6
    7770:	10ffffcc 	andi	r3,r2,65535
    7774:	30c7c83a 	sub	r3,r6,r3
    7778:	280ad43a 	srli	r5,r5,16
    777c:	21c9883a 	add	r4,r4,r7
    7780:	180dd43a 	srai	r6,r3,16
    7784:	20bfffcc 	andi	r2,r4,65535
    7788:	288bc83a 	sub	r5,r5,r2
    778c:	298b883a 	add	r5,r5,r6
    7790:	280e943a 	slli	r7,r5,16
    7794:	18ffffcc 	andi	r3,r3,65535
    7798:	2008d43a 	srli	r4,r4,16
    779c:	38ceb03a 	or	r7,r7,r3
    77a0:	49c00015 	stw	r7,0(r9)
    77a4:	280dd43a 	srai	r6,r5,16
    77a8:	4a400104 	addi	r9,r9,4
    77ac:	a23fe52e 	bgeu	r20,r8,7744 <__alt_mem_Flash_flash_data+0xf4007744>
    77b0:	b0800017 	ldw	r2,0(r22)
    77b4:	10000b1e 	bne	r2,zero,77e4 <quorem+0x120>
    77b8:	b0bfff04 	addi	r2,r22,-4
    77bc:	a880082e 	bgeu	r21,r2,77e0 <quorem+0x11c>
    77c0:	b0ffff17 	ldw	r3,-4(r22)
    77c4:	18000326 	beq	r3,zero,77d4 <quorem+0x110>
    77c8:	00000506 	br	77e0 <quorem+0x11c>
    77cc:	10c00017 	ldw	r3,0(r2)
    77d0:	1800031e 	bne	r3,zero,77e0 <quorem+0x11c>
    77d4:	10bfff04 	addi	r2,r2,-4
    77d8:	94bfffc4 	addi	r18,r18,-1
    77dc:	a8bffb36 	bltu	r21,r2,77cc <__alt_mem_Flash_flash_data+0xf40077cc>
    77e0:	84800415 	stw	r18,16(r16)
    77e4:	8009883a 	mov	r4,r16
    77e8:	b80b883a 	mov	r5,r23
    77ec:	000b8300 	call	b830 <__mcmp>
    77f0:	10002616 	blt	r2,zero,788c <quorem+0x1c8>
    77f4:	9cc00044 	addi	r19,r19,1
    77f8:	a80d883a 	mov	r6,r21
    77fc:	000b883a 	mov	r5,zero
    7800:	31000017 	ldw	r4,0(r6)
    7804:	88800017 	ldw	r2,0(r17)
    7808:	31800104 	addi	r6,r6,4
    780c:	20ffffcc 	andi	r3,r4,65535
    7810:	194b883a 	add	r5,r3,r5
    7814:	10ffffcc 	andi	r3,r2,65535
    7818:	28c7c83a 	sub	r3,r5,r3
    781c:	1004d43a 	srli	r2,r2,16
    7820:	2008d43a 	srli	r4,r4,16
    7824:	180bd43a 	srai	r5,r3,16
    7828:	18ffffcc 	andi	r3,r3,65535
    782c:	2089c83a 	sub	r4,r4,r2
    7830:	2149883a 	add	r4,r4,r5
    7834:	2004943a 	slli	r2,r4,16
    7838:	8c400104 	addi	r17,r17,4
    783c:	200bd43a 	srai	r5,r4,16
    7840:	10c6b03a 	or	r3,r2,r3
    7844:	30ffff15 	stw	r3,-4(r6)
    7848:	a47fed2e 	bgeu	r20,r17,7800 <__alt_mem_Flash_flash_data+0xf4007800>
    784c:	9485883a 	add	r2,r18,r18
    7850:	1085883a 	add	r2,r2,r2
    7854:	a887883a 	add	r3,r21,r2
    7858:	18800017 	ldw	r2,0(r3)
    785c:	10000b1e 	bne	r2,zero,788c <quorem+0x1c8>
    7860:	18bfff04 	addi	r2,r3,-4
    7864:	a880082e 	bgeu	r21,r2,7888 <quorem+0x1c4>
    7868:	18ffff17 	ldw	r3,-4(r3)
    786c:	18000326 	beq	r3,zero,787c <quorem+0x1b8>
    7870:	00000506 	br	7888 <quorem+0x1c4>
    7874:	10c00017 	ldw	r3,0(r2)
    7878:	1800031e 	bne	r3,zero,7888 <quorem+0x1c4>
    787c:	10bfff04 	addi	r2,r2,-4
    7880:	94bfffc4 	addi	r18,r18,-1
    7884:	a8bffb36 	bltu	r21,r2,7874 <__alt_mem_Flash_flash_data+0xf4007874>
    7888:	84800415 	stw	r18,16(r16)
    788c:	9805883a 	mov	r2,r19
    7890:	dfc00817 	ldw	ra,32(sp)
    7894:	ddc00717 	ldw	r23,28(sp)
    7898:	dd800617 	ldw	r22,24(sp)
    789c:	dd400517 	ldw	r21,20(sp)
    78a0:	dd000417 	ldw	r20,16(sp)
    78a4:	dcc00317 	ldw	r19,12(sp)
    78a8:	dc800217 	ldw	r18,8(sp)
    78ac:	dc400117 	ldw	r17,4(sp)
    78b0:	dc000017 	ldw	r16,0(sp)
    78b4:	dec00904 	addi	sp,sp,36
    78b8:	f800283a 	ret
    78bc:	0005883a 	mov	r2,zero
    78c0:	003ff306 	br	7890 <__alt_mem_Flash_flash_data+0xf4007890>

000078c4 <_dtoa_r>:
    78c4:	20801017 	ldw	r2,64(r4)
    78c8:	deffde04 	addi	sp,sp,-136
    78cc:	dd401d15 	stw	r21,116(sp)
    78d0:	dcc01b15 	stw	r19,108(sp)
    78d4:	dc801a15 	stw	r18,104(sp)
    78d8:	dc401915 	stw	r17,100(sp)
    78dc:	dc001815 	stw	r16,96(sp)
    78e0:	dfc02115 	stw	ra,132(sp)
    78e4:	df002015 	stw	fp,128(sp)
    78e8:	ddc01f15 	stw	r23,124(sp)
    78ec:	dd801e15 	stw	r22,120(sp)
    78f0:	dd001c15 	stw	r20,112(sp)
    78f4:	d9c00315 	stw	r7,12(sp)
    78f8:	2021883a 	mov	r16,r4
    78fc:	302b883a 	mov	r21,r6
    7900:	2825883a 	mov	r18,r5
    7904:	dc402417 	ldw	r17,144(sp)
    7908:	3027883a 	mov	r19,r6
    790c:	10000826 	beq	r2,zero,7930 <_dtoa_r+0x6c>
    7910:	21801117 	ldw	r6,68(r4)
    7914:	00c00044 	movi	r3,1
    7918:	100b883a 	mov	r5,r2
    791c:	1986983a 	sll	r3,r3,r6
    7920:	11800115 	stw	r6,4(r2)
    7924:	10c00215 	stw	r3,8(r2)
    7928:	000b0040 	call	b004 <_Bfree>
    792c:	80001015 	stw	zero,64(r16)
    7930:	a8002d16 	blt	r21,zero,79e8 <_dtoa_r+0x124>
    7934:	88000015 	stw	zero,0(r17)
    7938:	a8dffc2c 	andhi	r3,r21,32752
    793c:	009ffc34 	movhi	r2,32752
    7940:	18801b26 	beq	r3,r2,79b0 <_dtoa_r+0xec>
    7944:	9009883a 	mov	r4,r18
    7948:	980b883a 	mov	r5,r19
    794c:	000d883a 	mov	r6,zero
    7950:	000f883a 	mov	r7,zero
    7954:	00114b00 	call	114b0 <__eqdf2>
    7958:	10002a1e 	bne	r2,zero,7a04 <_dtoa_r+0x140>
    795c:	d8c02317 	ldw	r3,140(sp)
    7960:	d9002517 	ldw	r4,148(sp)
    7964:	00800044 	movi	r2,1
    7968:	18800015 	stw	r2,0(r3)
    796c:	2001a226 	beq	r4,zero,7ff8 <_dtoa_r+0x734>
    7970:	008000b4 	movhi	r2,2
    7974:	10809044 	addi	r2,r2,577
    7978:	20800015 	stw	r2,0(r4)
    797c:	10bfffc4 	addi	r2,r2,-1
    7980:	dfc02117 	ldw	ra,132(sp)
    7984:	df002017 	ldw	fp,128(sp)
    7988:	ddc01f17 	ldw	r23,124(sp)
    798c:	dd801e17 	ldw	r22,120(sp)
    7990:	dd401d17 	ldw	r21,116(sp)
    7994:	dd001c17 	ldw	r20,112(sp)
    7998:	dcc01b17 	ldw	r19,108(sp)
    799c:	dc801a17 	ldw	r18,104(sp)
    79a0:	dc401917 	ldw	r17,100(sp)
    79a4:	dc001817 	ldw	r16,96(sp)
    79a8:	dec02204 	addi	sp,sp,136
    79ac:	f800283a 	ret
    79b0:	d8c02317 	ldw	r3,140(sp)
    79b4:	0089c3c4 	movi	r2,9999
    79b8:	18800015 	stw	r2,0(r3)
    79bc:	90017c26 	beq	r18,zero,7fb0 <_dtoa_r+0x6ec>
    79c0:	008000b4 	movhi	r2,2
    79c4:	1080a404 	addi	r2,r2,656
    79c8:	d9002517 	ldw	r4,148(sp)
    79cc:	203fec26 	beq	r4,zero,7980 <__alt_mem_Flash_flash_data+0xf4007980>
    79d0:	10c000c7 	ldb	r3,3(r2)
    79d4:	18017d1e 	bne	r3,zero,7fcc <_dtoa_r+0x708>
    79d8:	10c000c4 	addi	r3,r2,3
    79dc:	d9802517 	ldw	r6,148(sp)
    79e0:	30c00015 	stw	r3,0(r6)
    79e4:	003fe606 	br	7980 <__alt_mem_Flash_flash_data+0xf4007980>
    79e8:	04e00034 	movhi	r19,32768
    79ec:	9cffffc4 	addi	r19,r19,-1
    79f0:	00800044 	movi	r2,1
    79f4:	ace6703a 	and	r19,r21,r19
    79f8:	88800015 	stw	r2,0(r17)
    79fc:	982b883a 	mov	r21,r19
    7a00:	003fcd06 	br	7938 <__alt_mem_Flash_flash_data+0xf4007938>
    7a04:	d8800204 	addi	r2,sp,8
    7a08:	a822d53a 	srli	r17,r21,20
    7a0c:	d8800015 	stw	r2,0(sp)
    7a10:	8009883a 	mov	r4,r16
    7a14:	900b883a 	mov	r5,r18
    7a18:	980d883a 	mov	r6,r19
    7a1c:	d9c00104 	addi	r7,sp,4
    7a20:	000bba40 	call	bba4 <__d2b>
    7a24:	1039883a 	mov	fp,r2
    7a28:	88016a1e 	bne	r17,zero,7fd4 <_dtoa_r+0x710>
    7a2c:	dd000217 	ldw	r20,8(sp)
    7a30:	dc400117 	ldw	r17,4(sp)
    7a34:	00befbc4 	movi	r2,-1041
    7a38:	a463883a 	add	r17,r20,r17
    7a3c:	8882ea16 	blt	r17,r2,85e8 <_dtoa_r+0xd24>
    7a40:	00bf0384 	movi	r2,-1010
    7a44:	1445c83a 	sub	r2,r2,r17
    7a48:	89010484 	addi	r4,r17,1042
    7a4c:	a8aa983a 	sll	r21,r21,r2
    7a50:	9108d83a 	srl	r4,r18,r4
    7a54:	a908b03a 	or	r4,r21,r4
    7a58:	00128400 	call	12840 <__floatunsidf>
    7a5c:	017f8434 	movhi	r5,65040
    7a60:	01800044 	movi	r6,1
    7a64:	1009883a 	mov	r4,r2
    7a68:	194b883a 	add	r5,r3,r5
    7a6c:	8c7fffc4 	addi	r17,r17,-1
    7a70:	d9800f15 	stw	r6,60(sp)
    7a74:	000d883a 	mov	r6,zero
    7a78:	01cffe34 	movhi	r7,16376
    7a7c:	0011e180 	call	11e18 <__subdf3>
    7a80:	0198dbf4 	movhi	r6,25455
    7a84:	01cff4f4 	movhi	r7,16339
    7a88:	1009883a 	mov	r4,r2
    7a8c:	180b883a 	mov	r5,r3
    7a90:	3190d844 	addi	r6,r6,17249
    7a94:	39e1e9c4 	addi	r7,r7,-30809
    7a98:	00116f40 	call	116f4 <__muldf3>
    7a9c:	01a2d874 	movhi	r6,35681
    7aa0:	01cff1f4 	movhi	r7,16327
    7aa4:	180b883a 	mov	r5,r3
    7aa8:	31b22cc4 	addi	r6,r6,-14157
    7aac:	39e28a04 	addi	r7,r7,-30168
    7ab0:	1009883a 	mov	r4,r2
    7ab4:	00103480 	call	10348 <__adddf3>
    7ab8:	8809883a 	mov	r4,r17
    7abc:	102d883a 	mov	r22,r2
    7ac0:	182b883a 	mov	r21,r3
    7ac4:	00127700 	call	12770 <__floatsidf>
    7ac8:	019427f4 	movhi	r6,20639
    7acc:	01cff4f4 	movhi	r7,16339
    7ad0:	1009883a 	mov	r4,r2
    7ad4:	180b883a 	mov	r5,r3
    7ad8:	319e7ec4 	addi	r6,r6,31227
    7adc:	39d104c4 	addi	r7,r7,17427
    7ae0:	00116f40 	call	116f4 <__muldf3>
    7ae4:	b009883a 	mov	r4,r22
    7ae8:	a80b883a 	mov	r5,r21
    7aec:	100d883a 	mov	r6,r2
    7af0:	180f883a 	mov	r7,r3
    7af4:	00103480 	call	10348 <__adddf3>
    7af8:	1009883a 	mov	r4,r2
    7afc:	180b883a 	mov	r5,r3
    7b00:	102d883a 	mov	r22,r2
    7b04:	182b883a 	mov	r21,r3
    7b08:	00126e80 	call	126e8 <__fixdfsi>
    7b0c:	b009883a 	mov	r4,r22
    7b10:	a80b883a 	mov	r5,r21
    7b14:	000d883a 	mov	r6,zero
    7b18:	000f883a 	mov	r7,zero
    7b1c:	d8800515 	stw	r2,20(sp)
    7b20:	00116140 	call	11614 <__ledf2>
    7b24:	10023116 	blt	r2,zero,83ec <_dtoa_r+0xb28>
    7b28:	d8c00517 	ldw	r3,20(sp)
    7b2c:	00800584 	movi	r2,22
    7b30:	10c21f36 	bltu	r2,r3,83b0 <_dtoa_r+0xaec>
    7b34:	180490fa 	slli	r2,r3,3
    7b38:	00c000b4 	movhi	r3,2
    7b3c:	18c0c004 	addi	r3,r3,768
    7b40:	1885883a 	add	r2,r3,r2
    7b44:	11000017 	ldw	r4,0(r2)
    7b48:	11400117 	ldw	r5,4(r2)
    7b4c:	900d883a 	mov	r6,r18
    7b50:	980f883a 	mov	r7,r19
    7b54:	00115340 	call	11534 <__gedf2>
    7b58:	0082a70e 	bge	zero,r2,85f8 <_dtoa_r+0xd34>
    7b5c:	d9000517 	ldw	r4,20(sp)
    7b60:	d8000d15 	stw	zero,52(sp)
    7b64:	213fffc4 	addi	r4,r4,-1
    7b68:	d9000515 	stw	r4,20(sp)
    7b6c:	a463c83a 	sub	r17,r20,r17
    7b70:	8dbfffc4 	addi	r22,r17,-1
    7b74:	b0021916 	blt	r22,zero,83dc <_dtoa_r+0xb18>
    7b78:	d8000815 	stw	zero,32(sp)
    7b7c:	d8800517 	ldw	r2,20(sp)
    7b80:	10020e16 	blt	r2,zero,83bc <_dtoa_r+0xaf8>
    7b84:	b0ad883a 	add	r22,r22,r2
    7b88:	d8800a15 	stw	r2,40(sp)
    7b8c:	d8000915 	stw	zero,36(sp)
    7b90:	d8c00317 	ldw	r3,12(sp)
    7b94:	00800244 	movi	r2,9
    7b98:	10c11a36 	bltu	r2,r3,8004 <_dtoa_r+0x740>
    7b9c:	00800144 	movi	r2,5
    7ba0:	10c4fc0e 	bge	r2,r3,8f94 <_dtoa_r+0x16d0>
    7ba4:	18ffff04 	addi	r3,r3,-4
    7ba8:	d8c00315 	stw	r3,12(sp)
    7bac:	0029883a 	mov	r20,zero
    7bb0:	d9800317 	ldw	r6,12(sp)
    7bb4:	008000c4 	movi	r2,3
    7bb8:	3083bd26 	beq	r6,r2,8ab0 <_dtoa_r+0x11ec>
    7bbc:	1183670e 	bge	r2,r6,895c <_dtoa_r+0x1098>
    7bc0:	d8c00317 	ldw	r3,12(sp)
    7bc4:	00800104 	movi	r2,4
    7bc8:	1882e726 	beq	r3,r2,8768 <_dtoa_r+0xea4>
    7bcc:	00800144 	movi	r2,5
    7bd0:	1884f21e 	bne	r3,r2,8f9c <_dtoa_r+0x16d8>
    7bd4:	00800044 	movi	r2,1
    7bd8:	d8800b15 	stw	r2,44(sp)
    7bdc:	d8c02217 	ldw	r3,136(sp)
    7be0:	d9000517 	ldw	r4,20(sp)
    7be4:	1907883a 	add	r3,r3,r4
    7be8:	19800044 	addi	r6,r3,1
    7bec:	d8c00c15 	stw	r3,48(sp)
    7bf0:	d9800615 	stw	r6,24(sp)
    7bf4:	0183c30e 	bge	zero,r6,8b04 <_dtoa_r+0x1240>
    7bf8:	d9800617 	ldw	r6,24(sp)
    7bfc:	3023883a 	mov	r17,r6
    7c00:	80001115 	stw	zero,68(r16)
    7c04:	008005c4 	movi	r2,23
    7c08:	1184f62e 	bgeu	r2,r6,8fe4 <_dtoa_r+0x1720>
    7c0c:	00c00044 	movi	r3,1
    7c10:	00800104 	movi	r2,4
    7c14:	1085883a 	add	r2,r2,r2
    7c18:	11000504 	addi	r4,r2,20
    7c1c:	180b883a 	mov	r5,r3
    7c20:	18c00044 	addi	r3,r3,1
    7c24:	313ffb2e 	bgeu	r6,r4,7c14 <__alt_mem_Flash_flash_data+0xf4007c14>
    7c28:	81401115 	stw	r5,68(r16)
    7c2c:	8009883a 	mov	r4,r16
    7c30:	000af5c0 	call	af5c <_Balloc>
    7c34:	d8800715 	stw	r2,28(sp)
    7c38:	80801015 	stw	r2,64(r16)
    7c3c:	00800384 	movi	r2,14
    7c40:	1440fd36 	bltu	r2,r17,8038 <_dtoa_r+0x774>
    7c44:	a000fc26 	beq	r20,zero,8038 <_dtoa_r+0x774>
    7c48:	d8800517 	ldw	r2,20(sp)
    7c4c:	0083b90e 	bge	zero,r2,8b34 <_dtoa_r+0x1270>
    7c50:	d8c00517 	ldw	r3,20(sp)
    7c54:	108003cc 	andi	r2,r2,15
    7c58:	100490fa 	slli	r2,r2,3
    7c5c:	182fd13a 	srai	r23,r3,4
    7c60:	00c000b4 	movhi	r3,2
    7c64:	18c0c004 	addi	r3,r3,768
    7c68:	1885883a 	add	r2,r3,r2
    7c6c:	b8c0040c 	andi	r3,r23,16
    7c70:	12c00017 	ldw	r11,0(r2)
    7c74:	12800117 	ldw	r10,4(r2)
    7c78:	18039726 	beq	r3,zero,8ad8 <_dtoa_r+0x1214>
    7c7c:	008000b4 	movhi	r2,2
    7c80:	1080b604 	addi	r2,r2,728
    7c84:	11800817 	ldw	r6,32(r2)
    7c88:	11c00917 	ldw	r7,36(r2)
    7c8c:	9009883a 	mov	r4,r18
    7c90:	980b883a 	mov	r5,r19
    7c94:	da801615 	stw	r10,88(sp)
    7c98:	dac01515 	stw	r11,84(sp)
    7c9c:	0010be40 	call	10be4 <__divdf3>
    7ca0:	da801617 	ldw	r10,88(sp)
    7ca4:	dac01517 	ldw	r11,84(sp)
    7ca8:	bdc003cc 	andi	r23,r23,15
    7cac:	044000c4 	movi	r17,3
    7cb0:	d8800e15 	stw	r2,56(sp)
    7cb4:	182b883a 	mov	r21,r3
    7cb8:	b8001126 	beq	r23,zero,7d00 <_dtoa_r+0x43c>
    7cbc:	050000b4 	movhi	r20,2
    7cc0:	a500b604 	addi	r20,r20,728
    7cc4:	5805883a 	mov	r2,r11
    7cc8:	5007883a 	mov	r3,r10
    7ccc:	b980004c 	andi	r6,r23,1
    7cd0:	1009883a 	mov	r4,r2
    7cd4:	b82fd07a 	srai	r23,r23,1
    7cd8:	180b883a 	mov	r5,r3
    7cdc:	30000426 	beq	r6,zero,7cf0 <_dtoa_r+0x42c>
    7ce0:	a1800017 	ldw	r6,0(r20)
    7ce4:	a1c00117 	ldw	r7,4(r20)
    7ce8:	8c400044 	addi	r17,r17,1
    7cec:	00116f40 	call	116f4 <__muldf3>
    7cf0:	a5000204 	addi	r20,r20,8
    7cf4:	b83ff51e 	bne	r23,zero,7ccc <__alt_mem_Flash_flash_data+0xf4007ccc>
    7cf8:	1017883a 	mov	r11,r2
    7cfc:	1815883a 	mov	r10,r3
    7d00:	d9000e17 	ldw	r4,56(sp)
    7d04:	a80b883a 	mov	r5,r21
    7d08:	580d883a 	mov	r6,r11
    7d0c:	500f883a 	mov	r7,r10
    7d10:	0010be40 	call	10be4 <__divdf3>
    7d14:	1029883a 	mov	r20,r2
    7d18:	182b883a 	mov	r21,r3
    7d1c:	d9800d17 	ldw	r6,52(sp)
    7d20:	30000626 	beq	r6,zero,7d3c <_dtoa_r+0x478>
    7d24:	a009883a 	mov	r4,r20
    7d28:	a80b883a 	mov	r5,r21
    7d2c:	000d883a 	mov	r6,zero
    7d30:	01cffc34 	movhi	r7,16368
    7d34:	00116140 	call	11614 <__ledf2>
    7d38:	10043216 	blt	r2,zero,8e04 <_dtoa_r+0x1540>
    7d3c:	8809883a 	mov	r4,r17
    7d40:	00127700 	call	12770 <__floatsidf>
    7d44:	1009883a 	mov	r4,r2
    7d48:	180b883a 	mov	r5,r3
    7d4c:	a00d883a 	mov	r6,r20
    7d50:	a80f883a 	mov	r7,r21
    7d54:	00116f40 	call	116f4 <__muldf3>
    7d58:	000d883a 	mov	r6,zero
    7d5c:	1009883a 	mov	r4,r2
    7d60:	180b883a 	mov	r5,r3
    7d64:	01d00734 	movhi	r7,16412
    7d68:	00103480 	call	10348 <__adddf3>
    7d6c:	1023883a 	mov	r17,r2
    7d70:	d9800617 	ldw	r6,24(sp)
    7d74:	00bf3034 	movhi	r2,64704
    7d78:	1885883a 	add	r2,r3,r2
    7d7c:	d8800e15 	stw	r2,56(sp)
    7d80:	30032e26 	beq	r6,zero,8a3c <_dtoa_r+0x1178>
    7d84:	d8c00517 	ldw	r3,20(sp)
    7d88:	da800617 	ldw	r10,24(sp)
    7d8c:	d8c01215 	stw	r3,72(sp)
    7d90:	d9000b17 	ldw	r4,44(sp)
    7d94:	2003b026 	beq	r4,zero,8c58 <_dtoa_r+0x1394>
    7d98:	50bfffc4 	addi	r2,r10,-1
    7d9c:	100490fa 	slli	r2,r2,3
    7da0:	00c000b4 	movhi	r3,2
    7da4:	18c0c004 	addi	r3,r3,768
    7da8:	1885883a 	add	r2,r3,r2
    7dac:	11800017 	ldw	r6,0(r2)
    7db0:	11c00117 	ldw	r7,4(r2)
    7db4:	d8800717 	ldw	r2,28(sp)
    7db8:	0009883a 	mov	r4,zero
    7dbc:	014ff834 	movhi	r5,16352
    7dc0:	da801615 	stw	r10,88(sp)
    7dc4:	15c00044 	addi	r23,r2,1
    7dc8:	0010be40 	call	10be4 <__divdf3>
    7dcc:	d9c00e17 	ldw	r7,56(sp)
    7dd0:	880d883a 	mov	r6,r17
    7dd4:	1009883a 	mov	r4,r2
    7dd8:	180b883a 	mov	r5,r3
    7ddc:	0011e180 	call	11e18 <__subdf3>
    7de0:	a80b883a 	mov	r5,r21
    7de4:	a009883a 	mov	r4,r20
    7de8:	d8c01015 	stw	r3,64(sp)
    7dec:	d8800e15 	stw	r2,56(sp)
    7df0:	00126e80 	call	126e8 <__fixdfsi>
    7df4:	1009883a 	mov	r4,r2
    7df8:	d8801715 	stw	r2,92(sp)
    7dfc:	00127700 	call	12770 <__floatsidf>
    7e00:	a009883a 	mov	r4,r20
    7e04:	a80b883a 	mov	r5,r21
    7e08:	100d883a 	mov	r6,r2
    7e0c:	180f883a 	mov	r7,r3
    7e10:	0011e180 	call	11e18 <__subdf3>
    7e14:	da001717 	ldw	r8,92(sp)
    7e18:	1829883a 	mov	r20,r3
    7e1c:	d8c00717 	ldw	r3,28(sp)
    7e20:	d9000e17 	ldw	r4,56(sp)
    7e24:	d9401017 	ldw	r5,64(sp)
    7e28:	42000c04 	addi	r8,r8,48
    7e2c:	1023883a 	mov	r17,r2
    7e30:	1a000005 	stb	r8,0(r3)
    7e34:	880d883a 	mov	r6,r17
    7e38:	a00f883a 	mov	r7,r20
    7e3c:	402b883a 	mov	r21,r8
    7e40:	00115340 	call	11534 <__gedf2>
    7e44:	00844516 	blt	zero,r2,8f5c <_dtoa_r+0x1698>
    7e48:	0009883a 	mov	r4,zero
    7e4c:	014ffc34 	movhi	r5,16368
    7e50:	880d883a 	mov	r6,r17
    7e54:	a00f883a 	mov	r7,r20
    7e58:	0011e180 	call	11e18 <__subdf3>
    7e5c:	d9000e17 	ldw	r4,56(sp)
    7e60:	d9401017 	ldw	r5,64(sp)
    7e64:	100d883a 	mov	r6,r2
    7e68:	180f883a 	mov	r7,r3
    7e6c:	00115340 	call	11534 <__gedf2>
    7e70:	da801617 	ldw	r10,88(sp)
    7e74:	00843616 	blt	zero,r2,8f50 <_dtoa_r+0x168c>
    7e78:	00800044 	movi	r2,1
    7e7c:	12806e0e 	bge	r2,r10,8038 <_dtoa_r+0x774>
    7e80:	d9000717 	ldw	r4,28(sp)
    7e84:	dd801315 	stw	r22,76(sp)
    7e88:	dc001115 	stw	r16,68(sp)
    7e8c:	2295883a 	add	r10,r4,r10
    7e90:	dcc01415 	stw	r19,80(sp)
    7e94:	502d883a 	mov	r22,r10
    7e98:	dcc01017 	ldw	r19,64(sp)
    7e9c:	b821883a 	mov	r16,r23
    7ea0:	dc801015 	stw	r18,64(sp)
    7ea4:	dc800e17 	ldw	r18,56(sp)
    7ea8:	00000906 	br	7ed0 <_dtoa_r+0x60c>
    7eac:	0011e180 	call	11e18 <__subdf3>
    7eb0:	1009883a 	mov	r4,r2
    7eb4:	180b883a 	mov	r5,r3
    7eb8:	900d883a 	mov	r6,r18
    7ebc:	980f883a 	mov	r7,r19
    7ec0:	00116140 	call	11614 <__ledf2>
    7ec4:	10040e16 	blt	r2,zero,8f00 <_dtoa_r+0x163c>
    7ec8:	b821883a 	mov	r16,r23
    7ecc:	bd841026 	beq	r23,r22,8f10 <_dtoa_r+0x164c>
    7ed0:	9009883a 	mov	r4,r18
    7ed4:	980b883a 	mov	r5,r19
    7ed8:	000d883a 	mov	r6,zero
    7edc:	01d00934 	movhi	r7,16420
    7ee0:	00116f40 	call	116f4 <__muldf3>
    7ee4:	000d883a 	mov	r6,zero
    7ee8:	01d00934 	movhi	r7,16420
    7eec:	8809883a 	mov	r4,r17
    7ef0:	a00b883a 	mov	r5,r20
    7ef4:	1025883a 	mov	r18,r2
    7ef8:	1827883a 	mov	r19,r3
    7efc:	00116f40 	call	116f4 <__muldf3>
    7f00:	180b883a 	mov	r5,r3
    7f04:	1009883a 	mov	r4,r2
    7f08:	1823883a 	mov	r17,r3
    7f0c:	1029883a 	mov	r20,r2
    7f10:	00126e80 	call	126e8 <__fixdfsi>
    7f14:	1009883a 	mov	r4,r2
    7f18:	102b883a 	mov	r21,r2
    7f1c:	00127700 	call	12770 <__floatsidf>
    7f20:	a009883a 	mov	r4,r20
    7f24:	880b883a 	mov	r5,r17
    7f28:	100d883a 	mov	r6,r2
    7f2c:	180f883a 	mov	r7,r3
    7f30:	0011e180 	call	11e18 <__subdf3>
    7f34:	ad400c04 	addi	r21,r21,48
    7f38:	1009883a 	mov	r4,r2
    7f3c:	180b883a 	mov	r5,r3
    7f40:	900d883a 	mov	r6,r18
    7f44:	980f883a 	mov	r7,r19
    7f48:	85400005 	stb	r21,0(r16)
    7f4c:	1023883a 	mov	r17,r2
    7f50:	1829883a 	mov	r20,r3
    7f54:	00116140 	call	11614 <__ledf2>
    7f58:	bdc00044 	addi	r23,r23,1
    7f5c:	0009883a 	mov	r4,zero
    7f60:	014ffc34 	movhi	r5,16368
    7f64:	880d883a 	mov	r6,r17
    7f68:	a00f883a 	mov	r7,r20
    7f6c:	103fcf0e 	bge	r2,zero,7eac <__alt_mem_Flash_flash_data+0xf4007eac>
    7f70:	d9801217 	ldw	r6,72(sp)
    7f74:	dc001117 	ldw	r16,68(sp)
    7f78:	d9800515 	stw	r6,20(sp)
    7f7c:	8009883a 	mov	r4,r16
    7f80:	e00b883a 	mov	r5,fp
    7f84:	000b0040 	call	b004 <_Bfree>
    7f88:	d8c00517 	ldw	r3,20(sp)
    7f8c:	d9002317 	ldw	r4,140(sp)
    7f90:	d9802517 	ldw	r6,148(sp)
    7f94:	b8000005 	stb	zero,0(r23)
    7f98:	18800044 	addi	r2,r3,1
    7f9c:	20800015 	stw	r2,0(r4)
    7fa0:	30027226 	beq	r6,zero,896c <_dtoa_r+0x10a8>
    7fa4:	35c00015 	stw	r23,0(r6)
    7fa8:	d8800717 	ldw	r2,28(sp)
    7fac:	003e7406 	br	7980 <__alt_mem_Flash_flash_data+0xf4007980>
    7fb0:	00800434 	movhi	r2,16
    7fb4:	10bfffc4 	addi	r2,r2,-1
    7fb8:	a8aa703a 	and	r21,r21,r2
    7fbc:	a83e801e 	bne	r21,zero,79c0 <__alt_mem_Flash_flash_data+0xf40079c0>
    7fc0:	008000b4 	movhi	r2,2
    7fc4:	1080a104 	addi	r2,r2,644
    7fc8:	003e7f06 	br	79c8 <__alt_mem_Flash_flash_data+0xf40079c8>
    7fcc:	10c00204 	addi	r3,r2,8
    7fd0:	003e8206 	br	79dc <__alt_mem_Flash_flash_data+0xf40079dc>
    7fd4:	01400434 	movhi	r5,16
    7fd8:	297fffc4 	addi	r5,r5,-1
    7fdc:	994a703a 	and	r5,r19,r5
    7fe0:	9009883a 	mov	r4,r18
    7fe4:	8c7f0044 	addi	r17,r17,-1023
    7fe8:	294ffc34 	orhi	r5,r5,16368
    7fec:	dd000217 	ldw	r20,8(sp)
    7ff0:	d8000f15 	stw	zero,60(sp)
    7ff4:	003e9f06 	br	7a74 <__alt_mem_Flash_flash_data+0xf4007a74>
    7ff8:	008000b4 	movhi	r2,2
    7ffc:	10809004 	addi	r2,r2,576
    8000:	003e5f06 	br	7980 <__alt_mem_Flash_flash_data+0xf4007980>
    8004:	80001115 	stw	zero,68(r16)
    8008:	8009883a 	mov	r4,r16
    800c:	000b883a 	mov	r5,zero
    8010:	000af5c0 	call	af5c <_Balloc>
    8014:	01bfffc4 	movi	r6,-1
    8018:	d8800715 	stw	r2,28(sp)
    801c:	80801015 	stw	r2,64(r16)
    8020:	00800044 	movi	r2,1
    8024:	d9800c15 	stw	r6,48(sp)
    8028:	d8800b15 	stw	r2,44(sp)
    802c:	d9800615 	stw	r6,24(sp)
    8030:	d8002215 	stw	zero,136(sp)
    8034:	d8000315 	stw	zero,12(sp)
    8038:	d8800117 	ldw	r2,4(sp)
    803c:	10008e16 	blt	r2,zero,8278 <_dtoa_r+0x9b4>
    8040:	d9000517 	ldw	r4,20(sp)
    8044:	00c00384 	movi	r3,14
    8048:	19008b16 	blt	r3,r4,8278 <_dtoa_r+0x9b4>
    804c:	200490fa 	slli	r2,r4,3
    8050:	00c000b4 	movhi	r3,2
    8054:	d9802217 	ldw	r6,136(sp)
    8058:	18c0c004 	addi	r3,r3,768
    805c:	1885883a 	add	r2,r3,r2
    8060:	14400017 	ldw	r17,0(r2)
    8064:	15000117 	ldw	r20,4(r2)
    8068:	3001c716 	blt	r6,zero,8788 <_dtoa_r+0xec4>
    806c:	880d883a 	mov	r6,r17
    8070:	a00f883a 	mov	r7,r20
    8074:	9009883a 	mov	r4,r18
    8078:	980b883a 	mov	r5,r19
    807c:	0010be40 	call	10be4 <__divdf3>
    8080:	180b883a 	mov	r5,r3
    8084:	1009883a 	mov	r4,r2
    8088:	00126e80 	call	126e8 <__fixdfsi>
    808c:	1009883a 	mov	r4,r2
    8090:	102d883a 	mov	r22,r2
    8094:	00127700 	call	12770 <__floatsidf>
    8098:	1009883a 	mov	r4,r2
    809c:	180b883a 	mov	r5,r3
    80a0:	880d883a 	mov	r6,r17
    80a4:	a00f883a 	mov	r7,r20
    80a8:	00116f40 	call	116f4 <__muldf3>
    80ac:	9009883a 	mov	r4,r18
    80b0:	980b883a 	mov	r5,r19
    80b4:	100d883a 	mov	r6,r2
    80b8:	180f883a 	mov	r7,r3
    80bc:	0011e180 	call	11e18 <__subdf3>
    80c0:	d9000717 	ldw	r4,28(sp)
    80c4:	d9800617 	ldw	r6,24(sp)
    80c8:	180b883a 	mov	r5,r3
    80cc:	b0c00c04 	addi	r3,r22,48
    80d0:	20c00005 	stb	r3,0(r4)
    80d4:	25c00044 	addi	r23,r4,1
    80d8:	01000044 	movi	r4,1
    80dc:	1011883a 	mov	r8,r2
    80e0:	2807883a 	mov	r3,r5
    80e4:	31003d26 	beq	r6,r4,81dc <_dtoa_r+0x918>
    80e8:	000d883a 	mov	r6,zero
    80ec:	01d00934 	movhi	r7,16420
    80f0:	1009883a 	mov	r4,r2
    80f4:	00116f40 	call	116f4 <__muldf3>
    80f8:	1009883a 	mov	r4,r2
    80fc:	180b883a 	mov	r5,r3
    8100:	000d883a 	mov	r6,zero
    8104:	000f883a 	mov	r7,zero
    8108:	1027883a 	mov	r19,r2
    810c:	182b883a 	mov	r21,r3
    8110:	00114b00 	call	114b0 <__eqdf2>
    8114:	103f9926 	beq	r2,zero,7f7c <__alt_mem_Flash_flash_data+0xf4007f7c>
    8118:	d8c00617 	ldw	r3,24(sp)
    811c:	d9000717 	ldw	r4,28(sp)
    8120:	b825883a 	mov	r18,r23
    8124:	18bfffc4 	addi	r2,r3,-1
    8128:	20ad883a 	add	r22,r4,r2
    812c:	dc000315 	stw	r16,12(sp)
    8130:	00000a06 	br	815c <_dtoa_r+0x898>
    8134:	00116f40 	call	116f4 <__muldf3>
    8138:	1009883a 	mov	r4,r2
    813c:	180b883a 	mov	r5,r3
    8140:	000d883a 	mov	r6,zero
    8144:	000f883a 	mov	r7,zero
    8148:	1027883a 	mov	r19,r2
    814c:	182b883a 	mov	r21,r3
    8150:	b825883a 	mov	r18,r23
    8154:	00114b00 	call	114b0 <__eqdf2>
    8158:	10022626 	beq	r2,zero,89f4 <_dtoa_r+0x1130>
    815c:	880d883a 	mov	r6,r17
    8160:	a00f883a 	mov	r7,r20
    8164:	9809883a 	mov	r4,r19
    8168:	a80b883a 	mov	r5,r21
    816c:	0010be40 	call	10be4 <__divdf3>
    8170:	180b883a 	mov	r5,r3
    8174:	1009883a 	mov	r4,r2
    8178:	00126e80 	call	126e8 <__fixdfsi>
    817c:	1009883a 	mov	r4,r2
    8180:	1021883a 	mov	r16,r2
    8184:	00127700 	call	12770 <__floatsidf>
    8188:	1009883a 	mov	r4,r2
    818c:	180b883a 	mov	r5,r3
    8190:	880d883a 	mov	r6,r17
    8194:	a00f883a 	mov	r7,r20
    8198:	00116f40 	call	116f4 <__muldf3>
    819c:	9809883a 	mov	r4,r19
    81a0:	a80b883a 	mov	r5,r21
    81a4:	100d883a 	mov	r6,r2
    81a8:	180f883a 	mov	r7,r3
    81ac:	0011e180 	call	11e18 <__subdf3>
    81b0:	82000c04 	addi	r8,r16,48
    81b4:	92000005 	stb	r8,0(r18)
    81b8:	1009883a 	mov	r4,r2
    81bc:	180b883a 	mov	r5,r3
    81c0:	000d883a 	mov	r6,zero
    81c4:	01d00934 	movhi	r7,16420
    81c8:	1011883a 	mov	r8,r2
    81cc:	bdc00044 	addi	r23,r23,1
    81d0:	95bfd81e 	bne	r18,r22,8134 <__alt_mem_Flash_flash_data+0xf4008134>
    81d4:	802d883a 	mov	r22,r16
    81d8:	dc000317 	ldw	r16,12(sp)
    81dc:	4009883a 	mov	r4,r8
    81e0:	180b883a 	mov	r5,r3
    81e4:	400d883a 	mov	r6,r8
    81e8:	180f883a 	mov	r7,r3
    81ec:	00103480 	call	10348 <__adddf3>
    81f0:	8809883a 	mov	r4,r17
    81f4:	a00b883a 	mov	r5,r20
    81f8:	100d883a 	mov	r6,r2
    81fc:	180f883a 	mov	r7,r3
    8200:	1027883a 	mov	r19,r2
    8204:	1825883a 	mov	r18,r3
    8208:	00116140 	call	11614 <__ledf2>
    820c:	10000816 	blt	r2,zero,8230 <_dtoa_r+0x96c>
    8210:	8809883a 	mov	r4,r17
    8214:	a00b883a 	mov	r5,r20
    8218:	980d883a 	mov	r6,r19
    821c:	900f883a 	mov	r7,r18
    8220:	00114b00 	call	114b0 <__eqdf2>
    8224:	103f551e 	bne	r2,zero,7f7c <__alt_mem_Flash_flash_data+0xf4007f7c>
    8228:	b580004c 	andi	r22,r22,1
    822c:	b03f5326 	beq	r22,zero,7f7c <__alt_mem_Flash_flash_data+0xf4007f7c>
    8230:	bd7fffc3 	ldbu	r21,-1(r23)
    8234:	b8bfffc4 	addi	r2,r23,-1
    8238:	1007883a 	mov	r3,r2
    823c:	01400e44 	movi	r5,57
    8240:	d9800717 	ldw	r6,28(sp)
    8244:	00000506 	br	825c <_dtoa_r+0x998>
    8248:	18ffffc4 	addi	r3,r3,-1
    824c:	30825e26 	beq	r6,r2,8bc8 <_dtoa_r+0x1304>
    8250:	1d400003 	ldbu	r21,0(r3)
    8254:	102f883a 	mov	r23,r2
    8258:	10bfffc4 	addi	r2,r2,-1
    825c:	a9003fcc 	andi	r4,r21,255
    8260:	2100201c 	xori	r4,r4,128
    8264:	213fe004 	addi	r4,r4,-128
    8268:	217ff726 	beq	r4,r5,8248 <__alt_mem_Flash_flash_data+0xf4008248>
    826c:	aa000044 	addi	r8,r21,1
    8270:	12000005 	stb	r8,0(r2)
    8274:	003f4106 	br	7f7c <__alt_mem_Flash_flash_data+0xf4007f7c>
    8278:	d8c00b17 	ldw	r3,44(sp)
    827c:	18006726 	beq	r3,zero,841c <_dtoa_r+0xb58>
    8280:	d9000317 	ldw	r4,12(sp)
    8284:	00c00044 	movi	r3,1
    8288:	19016a0e 	bge	r3,r4,8834 <_dtoa_r+0xf70>
    828c:	d8800617 	ldw	r2,24(sp)
    8290:	d8c00917 	ldw	r3,36(sp)
    8294:	157fffc4 	addi	r21,r2,-1
    8298:	1d420716 	blt	r3,r21,8ab8 <_dtoa_r+0x11f4>
    829c:	1d6bc83a 	sub	r21,r3,r21
    82a0:	d8800617 	ldw	r2,24(sp)
    82a4:	1002c716 	blt	r2,zero,8dc4 <_dtoa_r+0x1500>
    82a8:	dd000817 	ldw	r20,32(sp)
    82ac:	d8800617 	ldw	r2,24(sp)
    82b0:	d9800817 	ldw	r6,32(sp)
    82b4:	8009883a 	mov	r4,r16
    82b8:	01400044 	movi	r5,1
    82bc:	308d883a 	add	r6,r6,r2
    82c0:	d9800815 	stw	r6,32(sp)
    82c4:	b0ad883a 	add	r22,r22,r2
    82c8:	000b3680 	call	b368 <__i2b>
    82cc:	1023883a 	mov	r17,r2
    82d0:	a0000826 	beq	r20,zero,82f4 <_dtoa_r+0xa30>
    82d4:	0580070e 	bge	zero,r22,82f4 <_dtoa_r+0xa30>
    82d8:	b005883a 	mov	r2,r22
    82dc:	a5812016 	blt	r20,r22,8760 <_dtoa_r+0xe9c>
    82e0:	d8c00817 	ldw	r3,32(sp)
    82e4:	a0a9c83a 	sub	r20,r20,r2
    82e8:	b0adc83a 	sub	r22,r22,r2
    82ec:	1887c83a 	sub	r3,r3,r2
    82f0:	d8c00815 	stw	r3,32(sp)
    82f4:	d9000917 	ldw	r4,36(sp)
    82f8:	0100140e 	bge	zero,r4,834c <_dtoa_r+0xa88>
    82fc:	d9800b17 	ldw	r6,44(sp)
    8300:	3001e526 	beq	r6,zero,8a98 <_dtoa_r+0x11d4>
    8304:	05400e0e 	bge	zero,r21,8340 <_dtoa_r+0xa7c>
    8308:	880b883a 	mov	r5,r17
    830c:	8009883a 	mov	r4,r16
    8310:	a80d883a 	mov	r6,r21
    8314:	000b5a00 	call	b5a0 <__pow5mult>
    8318:	e00d883a 	mov	r6,fp
    831c:	8009883a 	mov	r4,r16
    8320:	100b883a 	mov	r5,r2
    8324:	1023883a 	mov	r17,r2
    8328:	000b3a40 	call	b3a4 <__multiply>
    832c:	102f883a 	mov	r23,r2
    8330:	e00b883a 	mov	r5,fp
    8334:	8009883a 	mov	r4,r16
    8338:	000b0040 	call	b004 <_Bfree>
    833c:	b839883a 	mov	fp,r23
    8340:	d8800917 	ldw	r2,36(sp)
    8344:	154dc83a 	sub	r6,r2,r21
    8348:	3001281e 	bne	r6,zero,87ec <_dtoa_r+0xf28>
    834c:	05c00044 	movi	r23,1
    8350:	8009883a 	mov	r4,r16
    8354:	b80b883a 	mov	r5,r23
    8358:	000b3680 	call	b368 <__i2b>
    835c:	d8c00a17 	ldw	r3,40(sp)
    8360:	102b883a 	mov	r21,r2
    8364:	00c0310e 	bge	zero,r3,842c <_dtoa_r+0xb68>
    8368:	8009883a 	mov	r4,r16
    836c:	100b883a 	mov	r5,r2
    8370:	180d883a 	mov	r6,r3
    8374:	000b5a00 	call	b5a0 <__pow5mult>
    8378:	d9000317 	ldw	r4,12(sp)
    837c:	102b883a 	mov	r21,r2
    8380:	b9011f0e 	bge	r23,r4,8800 <_dtoa_r+0xf3c>
    8384:	0027883a 	mov	r19,zero
    8388:	a8800417 	ldw	r2,16(r21)
    838c:	10800104 	addi	r2,r2,4
    8390:	1085883a 	add	r2,r2,r2
    8394:	1085883a 	add	r2,r2,r2
    8398:	a885883a 	add	r2,r21,r2
    839c:	11000017 	ldw	r4,0(r2)
    83a0:	000b2500 	call	b250 <__hi0bits>
    83a4:	00c00804 	movi	r3,32
    83a8:	1885c83a 	sub	r2,r3,r2
    83ac:	00002506 	br	8444 <_dtoa_r+0xb80>
    83b0:	01800044 	movi	r6,1
    83b4:	d9800d15 	stw	r6,52(sp)
    83b8:	003dec06 	br	7b6c <__alt_mem_Flash_flash_data+0xf4007b6c>
    83bc:	d8c00817 	ldw	r3,32(sp)
    83c0:	d9000517 	ldw	r4,20(sp)
    83c4:	d8000a15 	stw	zero,40(sp)
    83c8:	1907c83a 	sub	r3,r3,r4
    83cc:	010dc83a 	sub	r6,zero,r4
    83d0:	d8c00815 	stw	r3,32(sp)
    83d4:	d9800915 	stw	r6,36(sp)
    83d8:	003ded06 	br	7b90 <__alt_mem_Flash_flash_data+0xf4007b90>
    83dc:	05adc83a 	sub	r22,zero,r22
    83e0:	dd800815 	stw	r22,32(sp)
    83e4:	002d883a 	mov	r22,zero
    83e8:	003de406 	br	7b7c <__alt_mem_Flash_flash_data+0xf4007b7c>
    83ec:	d9000517 	ldw	r4,20(sp)
    83f0:	00127700 	call	12770 <__floatsidf>
    83f4:	1009883a 	mov	r4,r2
    83f8:	180b883a 	mov	r5,r3
    83fc:	b00d883a 	mov	r6,r22
    8400:	a80f883a 	mov	r7,r21
    8404:	00114b00 	call	114b0 <__eqdf2>
    8408:	103dc726 	beq	r2,zero,7b28 <__alt_mem_Flash_flash_data+0xf4007b28>
    840c:	d8800517 	ldw	r2,20(sp)
    8410:	10bfffc4 	addi	r2,r2,-1
    8414:	d8800515 	stw	r2,20(sp)
    8418:	003dc306 	br	7b28 <__alt_mem_Flash_flash_data+0xf4007b28>
    841c:	dd400917 	ldw	r21,36(sp)
    8420:	dd000817 	ldw	r20,32(sp)
    8424:	0023883a 	mov	r17,zero
    8428:	003fa906 	br	82d0 <__alt_mem_Flash_flash_data+0xf40082d0>
    842c:	d9800317 	ldw	r6,12(sp)
    8430:	b981670e 	bge	r23,r6,89d0 <_dtoa_r+0x110c>
    8434:	0027883a 	mov	r19,zero
    8438:	d8c00a17 	ldw	r3,40(sp)
    843c:	183fd21e 	bne	r3,zero,8388 <__alt_mem_Flash_flash_data+0xf4008388>
    8440:	00800044 	movi	r2,1
    8444:	1585883a 	add	r2,r2,r22
    8448:	108007cc 	andi	r2,r2,31
    844c:	10005f26 	beq	r2,zero,85cc <_dtoa_r+0xd08>
    8450:	00c00804 	movi	r3,32
    8454:	1887c83a 	sub	r3,r3,r2
    8458:	01000104 	movi	r4,4
    845c:	20c2dd0e 	bge	r4,r3,8fd4 <_dtoa_r+0x1710>
    8460:	d9000817 	ldw	r4,32(sp)
    8464:	00c00704 	movi	r3,28
    8468:	1885c83a 	sub	r2,r3,r2
    846c:	2089883a 	add	r4,r4,r2
    8470:	d9000815 	stw	r4,32(sp)
    8474:	a0a9883a 	add	r20,r20,r2
    8478:	b0ad883a 	add	r22,r22,r2
    847c:	d8800817 	ldw	r2,32(sp)
    8480:	0080050e 	bge	zero,r2,8498 <_dtoa_r+0xbd4>
    8484:	e00b883a 	mov	r5,fp
    8488:	8009883a 	mov	r4,r16
    848c:	100d883a 	mov	r6,r2
    8490:	000b6e00 	call	b6e0 <__lshift>
    8494:	1039883a 	mov	fp,r2
    8498:	0580050e 	bge	zero,r22,84b0 <_dtoa_r+0xbec>
    849c:	a80b883a 	mov	r5,r21
    84a0:	8009883a 	mov	r4,r16
    84a4:	b00d883a 	mov	r6,r22
    84a8:	000b6e00 	call	b6e0 <__lshift>
    84ac:	102b883a 	mov	r21,r2
    84b0:	d8c00d17 	ldw	r3,52(sp)
    84b4:	1801161e 	bne	r3,zero,8910 <_dtoa_r+0x104c>
    84b8:	d8c00617 	ldw	r3,24(sp)
    84bc:	00c12d0e 	bge	zero,r3,8974 <_dtoa_r+0x10b0>
    84c0:	d8c00b17 	ldw	r3,44(sp)
    84c4:	1800571e 	bne	r3,zero,8624 <_dtoa_r+0xd60>
    84c8:	dc800717 	ldw	r18,28(sp)
    84cc:	dcc00617 	ldw	r19,24(sp)
    84d0:	9029883a 	mov	r20,r18
    84d4:	00000206 	br	84e0 <_dtoa_r+0xc1c>
    84d8:	000b02c0 	call	b02c <__multadd>
    84dc:	1039883a 	mov	fp,r2
    84e0:	e009883a 	mov	r4,fp
    84e4:	a80b883a 	mov	r5,r21
    84e8:	00076c40 	call	76c4 <quorem>
    84ec:	10800c04 	addi	r2,r2,48
    84f0:	90800005 	stb	r2,0(r18)
    84f4:	94800044 	addi	r18,r18,1
    84f8:	9507c83a 	sub	r3,r18,r20
    84fc:	8009883a 	mov	r4,r16
    8500:	e00b883a 	mov	r5,fp
    8504:	01800284 	movi	r6,10
    8508:	000f883a 	mov	r7,zero
    850c:	1cfff216 	blt	r3,r19,84d8 <__alt_mem_Flash_flash_data+0xf40084d8>
    8510:	1011883a 	mov	r8,r2
    8514:	d8800617 	ldw	r2,24(sp)
    8518:	00822e0e 	bge	zero,r2,8dd4 <_dtoa_r+0x1510>
    851c:	d9000717 	ldw	r4,28(sp)
    8520:	0025883a 	mov	r18,zero
    8524:	20af883a 	add	r23,r4,r2
    8528:	e00b883a 	mov	r5,fp
    852c:	01800044 	movi	r6,1
    8530:	8009883a 	mov	r4,r16
    8534:	da001715 	stw	r8,92(sp)
    8538:	000b6e00 	call	b6e0 <__lshift>
    853c:	1009883a 	mov	r4,r2
    8540:	a80b883a 	mov	r5,r21
    8544:	1039883a 	mov	fp,r2
    8548:	000b8300 	call	b830 <__mcmp>
    854c:	da001717 	ldw	r8,92(sp)
    8550:	00816e0e 	bge	zero,r2,8b0c <_dtoa_r+0x1248>
    8554:	b93fffc3 	ldbu	r4,-1(r23)
    8558:	b8bfffc4 	addi	r2,r23,-1
    855c:	1007883a 	mov	r3,r2
    8560:	01800e44 	movi	r6,57
    8564:	d9c00717 	ldw	r7,28(sp)
    8568:	00000506 	br	8580 <_dtoa_r+0xcbc>
    856c:	18ffffc4 	addi	r3,r3,-1
    8570:	38811926 	beq	r7,r2,89d8 <_dtoa_r+0x1114>
    8574:	19000003 	ldbu	r4,0(r3)
    8578:	102f883a 	mov	r23,r2
    857c:	10bfffc4 	addi	r2,r2,-1
    8580:	21403fcc 	andi	r5,r4,255
    8584:	2940201c 	xori	r5,r5,128
    8588:	297fe004 	addi	r5,r5,-128
    858c:	29bff726 	beq	r5,r6,856c <__alt_mem_Flash_flash_data+0xf400856c>
    8590:	21000044 	addi	r4,r4,1
    8594:	11000005 	stb	r4,0(r2)
    8598:	8009883a 	mov	r4,r16
    859c:	a80b883a 	mov	r5,r21
    85a0:	000b0040 	call	b004 <_Bfree>
    85a4:	883e7526 	beq	r17,zero,7f7c <__alt_mem_Flash_flash_data+0xf4007f7c>
    85a8:	90000426 	beq	r18,zero,85bc <_dtoa_r+0xcf8>
    85ac:	94400326 	beq	r18,r17,85bc <_dtoa_r+0xcf8>
    85b0:	8009883a 	mov	r4,r16
    85b4:	900b883a 	mov	r5,r18
    85b8:	000b0040 	call	b004 <_Bfree>
    85bc:	8009883a 	mov	r4,r16
    85c0:	880b883a 	mov	r5,r17
    85c4:	000b0040 	call	b004 <_Bfree>
    85c8:	003e6c06 	br	7f7c <__alt_mem_Flash_flash_data+0xf4007f7c>
    85cc:	00800704 	movi	r2,28
    85d0:	d9800817 	ldw	r6,32(sp)
    85d4:	a0a9883a 	add	r20,r20,r2
    85d8:	b0ad883a 	add	r22,r22,r2
    85dc:	308d883a 	add	r6,r6,r2
    85e0:	d9800815 	stw	r6,32(sp)
    85e4:	003fa506 	br	847c <__alt_mem_Flash_flash_data+0xf400847c>
    85e8:	013efb84 	movi	r4,-1042
    85ec:	246bc83a 	sub	r21,r4,r17
    85f0:	9548983a 	sll	r4,r18,r21
    85f4:	003d1806 	br	7a58 <__alt_mem_Flash_flash_data+0xf4007a58>
    85f8:	d8000d15 	stw	zero,52(sp)
    85fc:	003d5b06 	br	7b6c <__alt_mem_Flash_flash_data+0xf4007b6c>
    8600:	880b883a 	mov	r5,r17
    8604:	8009883a 	mov	r4,r16
    8608:	01800284 	movi	r6,10
    860c:	000f883a 	mov	r7,zero
    8610:	000b02c0 	call	b02c <__multadd>
    8614:	1023883a 	mov	r17,r2
    8618:	d8800c17 	ldw	r2,48(sp)
    861c:	0082550e 	bge	zero,r2,8f74 <_dtoa_r+0x16b0>
    8620:	d8800615 	stw	r2,24(sp)
    8624:	0500050e 	bge	zero,r20,863c <_dtoa_r+0xd78>
    8628:	880b883a 	mov	r5,r17
    862c:	8009883a 	mov	r4,r16
    8630:	a00d883a 	mov	r6,r20
    8634:	000b6e00 	call	b6e0 <__lshift>
    8638:	1023883a 	mov	r17,r2
    863c:	98016a1e 	bne	r19,zero,8be8 <_dtoa_r+0x1324>
    8640:	8829883a 	mov	r20,r17
    8644:	d9000617 	ldw	r4,24(sp)
    8648:	dcc00717 	ldw	r19,28(sp)
    864c:	9480004c 	andi	r18,r18,1
    8650:	20bfffc4 	addi	r2,r4,-1
    8654:	9885883a 	add	r2,r19,r2
    8658:	d8800415 	stw	r2,16(sp)
    865c:	dc800615 	stw	r18,24(sp)
    8660:	e009883a 	mov	r4,fp
    8664:	a80b883a 	mov	r5,r21
    8668:	00076c40 	call	76c4 <quorem>
    866c:	e009883a 	mov	r4,fp
    8670:	880b883a 	mov	r5,r17
    8674:	102f883a 	mov	r23,r2
    8678:	000b8300 	call	b830 <__mcmp>
    867c:	8009883a 	mov	r4,r16
    8680:	a80b883a 	mov	r5,r21
    8684:	a00d883a 	mov	r6,r20
    8688:	102d883a 	mov	r22,r2
    868c:	000b8900 	call	b890 <__mdiff>
    8690:	1007883a 	mov	r3,r2
    8694:	10800317 	ldw	r2,12(r2)
    8698:	bc800c04 	addi	r18,r23,48
    869c:	1000971e 	bne	r2,zero,88fc <_dtoa_r+0x1038>
    86a0:	180b883a 	mov	r5,r3
    86a4:	e009883a 	mov	r4,fp
    86a8:	d8c01515 	stw	r3,84(sp)
    86ac:	000b8300 	call	b830 <__mcmp>
    86b0:	d8c01517 	ldw	r3,84(sp)
    86b4:	8009883a 	mov	r4,r16
    86b8:	d8801515 	stw	r2,84(sp)
    86bc:	180b883a 	mov	r5,r3
    86c0:	000b0040 	call	b004 <_Bfree>
    86c4:	d8801517 	ldw	r2,84(sp)
    86c8:	1000041e 	bne	r2,zero,86dc <_dtoa_r+0xe18>
    86cc:	d9800317 	ldw	r6,12(sp)
    86d0:	3000021e 	bne	r6,zero,86dc <_dtoa_r+0xe18>
    86d4:	d8c00617 	ldw	r3,24(sp)
    86d8:	18007626 	beq	r3,zero,88b4 <_dtoa_r+0xff0>
    86dc:	b0005b16 	blt	r22,zero,884c <_dtoa_r+0xf88>
    86e0:	b000041e 	bne	r22,zero,86f4 <_dtoa_r+0xe30>
    86e4:	d9000317 	ldw	r4,12(sp)
    86e8:	2000021e 	bne	r4,zero,86f4 <_dtoa_r+0xe30>
    86ec:	d8c00617 	ldw	r3,24(sp)
    86f0:	18005626 	beq	r3,zero,884c <_dtoa_r+0xf88>
    86f4:	00814d16 	blt	zero,r2,8c2c <_dtoa_r+0x1368>
    86f8:	d8c00417 	ldw	r3,16(sp)
    86fc:	9d800044 	addi	r22,r19,1
    8700:	9c800005 	stb	r18,0(r19)
    8704:	b02f883a 	mov	r23,r22
    8708:	98c14c26 	beq	r19,r3,8c3c <_dtoa_r+0x1378>
    870c:	e00b883a 	mov	r5,fp
    8710:	8009883a 	mov	r4,r16
    8714:	01800284 	movi	r6,10
    8718:	000f883a 	mov	r7,zero
    871c:	000b02c0 	call	b02c <__multadd>
    8720:	1039883a 	mov	fp,r2
    8724:	8d006d26 	beq	r17,r20,88dc <_dtoa_r+0x1018>
    8728:	880b883a 	mov	r5,r17
    872c:	01800284 	movi	r6,10
    8730:	000f883a 	mov	r7,zero
    8734:	8009883a 	mov	r4,r16
    8738:	000b02c0 	call	b02c <__multadd>
    873c:	a00b883a 	mov	r5,r20
    8740:	8009883a 	mov	r4,r16
    8744:	01800284 	movi	r6,10
    8748:	000f883a 	mov	r7,zero
    874c:	1023883a 	mov	r17,r2
    8750:	000b02c0 	call	b02c <__multadd>
    8754:	1029883a 	mov	r20,r2
    8758:	b027883a 	mov	r19,r22
    875c:	003fc006 	br	8660 <__alt_mem_Flash_flash_data+0xf4008660>
    8760:	a005883a 	mov	r2,r20
    8764:	003ede06 	br	82e0 <__alt_mem_Flash_flash_data+0xf40082e0>
    8768:	01000044 	movi	r4,1
    876c:	d9000b15 	stw	r4,44(sp)
    8770:	d9802217 	ldw	r6,136(sp)
    8774:	0180dc0e 	bge	zero,r6,8ae8 <_dtoa_r+0x1224>
    8778:	3023883a 	mov	r17,r6
    877c:	d9800c15 	stw	r6,48(sp)
    8780:	d9800615 	stw	r6,24(sp)
    8784:	003d1e06 	br	7c00 <__alt_mem_Flash_flash_data+0xf4007c00>
    8788:	d8800617 	ldw	r2,24(sp)
    878c:	00be3716 	blt	zero,r2,806c <__alt_mem_Flash_flash_data+0xf400806c>
    8790:	1000be1e 	bne	r2,zero,8a8c <_dtoa_r+0x11c8>
    8794:	8809883a 	mov	r4,r17
    8798:	a00b883a 	mov	r5,r20
    879c:	000d883a 	mov	r6,zero
    87a0:	01d00534 	movhi	r7,16404
    87a4:	00116f40 	call	116f4 <__muldf3>
    87a8:	1009883a 	mov	r4,r2
    87ac:	180b883a 	mov	r5,r3
    87b0:	900d883a 	mov	r6,r18
    87b4:	980f883a 	mov	r7,r19
    87b8:	00115340 	call	11534 <__gedf2>
    87bc:	002b883a 	mov	r21,zero
    87c0:	0023883a 	mov	r17,zero
    87c4:	10007a16 	blt	r2,zero,89b0 <_dtoa_r+0x10ec>
    87c8:	d9002217 	ldw	r4,136(sp)
    87cc:	ddc00717 	ldw	r23,28(sp)
    87d0:	0108303a 	nor	r4,zero,r4
    87d4:	d9000515 	stw	r4,20(sp)
    87d8:	8009883a 	mov	r4,r16
    87dc:	a80b883a 	mov	r5,r21
    87e0:	000b0040 	call	b004 <_Bfree>
    87e4:	883f751e 	bne	r17,zero,85bc <__alt_mem_Flash_flash_data+0xf40085bc>
    87e8:	003de406 	br	7f7c <__alt_mem_Flash_flash_data+0xf4007f7c>
    87ec:	e00b883a 	mov	r5,fp
    87f0:	8009883a 	mov	r4,r16
    87f4:	000b5a00 	call	b5a0 <__pow5mult>
    87f8:	1039883a 	mov	fp,r2
    87fc:	003ed306 	br	834c <__alt_mem_Flash_flash_data+0xf400834c>
    8800:	903ee01e 	bne	r18,zero,8384 <__alt_mem_Flash_flash_data+0xf4008384>
    8804:	00800434 	movhi	r2,16
    8808:	10bfffc4 	addi	r2,r2,-1
    880c:	9884703a 	and	r2,r19,r2
    8810:	103f081e 	bne	r2,zero,8434 <__alt_mem_Flash_flash_data+0xf4008434>
    8814:	9cdffc2c 	andhi	r19,r19,32752
    8818:	983f0626 	beq	r19,zero,8434 <__alt_mem_Flash_flash_data+0xf4008434>
    881c:	d8800817 	ldw	r2,32(sp)
    8820:	b5800044 	addi	r22,r22,1
    8824:	04c00044 	movi	r19,1
    8828:	10800044 	addi	r2,r2,1
    882c:	d8800815 	stw	r2,32(sp)
    8830:	003f0106 	br	8438 <__alt_mem_Flash_flash_data+0xf4008438>
    8834:	d9800f17 	ldw	r6,60(sp)
    8838:	30016826 	beq	r6,zero,8ddc <_dtoa_r+0x1518>
    883c:	10810cc4 	addi	r2,r2,1075
    8840:	dd400917 	ldw	r21,36(sp)
    8844:	dd000817 	ldw	r20,32(sp)
    8848:	003e9906 	br	82b0 <__alt_mem_Flash_flash_data+0xf40082b0>
    884c:	9011883a 	mov	r8,r18
    8850:	4007883a 	mov	r3,r8
    8854:	e02d883a 	mov	r22,fp
    8858:	0080100e 	bge	zero,r2,889c <_dtoa_r+0xfd8>
    885c:	01800044 	movi	r6,1
    8860:	8009883a 	mov	r4,r16
    8864:	e00b883a 	mov	r5,fp
    8868:	da001515 	stw	r8,84(sp)
    886c:	da001715 	stw	r8,92(sp)
    8870:	000b6e00 	call	b6e0 <__lshift>
    8874:	1009883a 	mov	r4,r2
    8878:	a80b883a 	mov	r5,r21
    887c:	102d883a 	mov	r22,r2
    8880:	000b8300 	call	b830 <__mcmp>
    8884:	d8c01517 	ldw	r3,84(sp)
    8888:	da001717 	ldw	r8,92(sp)
    888c:	0081a50e 	bge	zero,r2,8f24 <_dtoa_r+0x1660>
    8890:	00800e44 	movi	r2,57
    8894:	40817b26 	beq	r8,r2,8e84 <_dtoa_r+0x15c0>
    8898:	40c00044 	addi	r3,r8,1
    889c:	8825883a 	mov	r18,r17
    88a0:	9dc00044 	addi	r23,r19,1
    88a4:	98c00005 	stb	r3,0(r19)
    88a8:	a023883a 	mov	r17,r20
    88ac:	b039883a 	mov	fp,r22
    88b0:	003f3906 	br	8598 <__alt_mem_Flash_flash_data+0xf4008598>
    88b4:	00800e44 	movi	r2,57
    88b8:	9011883a 	mov	r8,r18
    88bc:	90817226 	beq	r18,r2,8e88 <_dtoa_r+0x15c4>
    88c0:	0580010e 	bge	zero,r22,88c8 <_dtoa_r+0x1004>
    88c4:	ba000c44 	addi	r8,r23,49
    88c8:	8825883a 	mov	r18,r17
    88cc:	9dc00044 	addi	r23,r19,1
    88d0:	9a000005 	stb	r8,0(r19)
    88d4:	a023883a 	mov	r17,r20
    88d8:	003f2f06 	br	8598 <__alt_mem_Flash_flash_data+0xf4008598>
    88dc:	880b883a 	mov	r5,r17
    88e0:	8009883a 	mov	r4,r16
    88e4:	01800284 	movi	r6,10
    88e8:	000f883a 	mov	r7,zero
    88ec:	000b02c0 	call	b02c <__multadd>
    88f0:	1023883a 	mov	r17,r2
    88f4:	1029883a 	mov	r20,r2
    88f8:	003f9706 	br	8758 <__alt_mem_Flash_flash_data+0xf4008758>
    88fc:	8009883a 	mov	r4,r16
    8900:	180b883a 	mov	r5,r3
    8904:	000b0040 	call	b004 <_Bfree>
    8908:	00800044 	movi	r2,1
    890c:	003f7306 	br	86dc <__alt_mem_Flash_flash_data+0xf40086dc>
    8910:	e009883a 	mov	r4,fp
    8914:	a80b883a 	mov	r5,r21
    8918:	000b8300 	call	b830 <__mcmp>
    891c:	103ee60e 	bge	r2,zero,84b8 <__alt_mem_Flash_flash_data+0xf40084b8>
    8920:	8009883a 	mov	r4,r16
    8924:	e00b883a 	mov	r5,fp
    8928:	01800284 	movi	r6,10
    892c:	000f883a 	mov	r7,zero
    8930:	000b02c0 	call	b02c <__multadd>
    8934:	d9000517 	ldw	r4,20(sp)
    8938:	d9800b17 	ldw	r6,44(sp)
    893c:	1039883a 	mov	fp,r2
    8940:	213fffc4 	addi	r4,r4,-1
    8944:	d9000515 	stw	r4,20(sp)
    8948:	303f2d1e 	bne	r6,zero,8600 <__alt_mem_Flash_flash_data+0xf4008600>
    894c:	d9000c17 	ldw	r4,48(sp)
    8950:	0101780e 	bge	zero,r4,8f34 <_dtoa_r+0x1670>
    8954:	d9000615 	stw	r4,24(sp)
    8958:	003edb06 	br	84c8 <__alt_mem_Flash_flash_data+0xf40084c8>
    895c:	00800084 	movi	r2,2
    8960:	30818e1e 	bne	r6,r2,8f9c <_dtoa_r+0x16d8>
    8964:	d8000b15 	stw	zero,44(sp)
    8968:	003f8106 	br	8770 <__alt_mem_Flash_flash_data+0xf4008770>
    896c:	d8800717 	ldw	r2,28(sp)
    8970:	003c0306 	br	7980 <__alt_mem_Flash_flash_data+0xf4007980>
    8974:	d9000317 	ldw	r4,12(sp)
    8978:	00800084 	movi	r2,2
    897c:	113ed00e 	bge	r2,r4,84c0 <__alt_mem_Flash_flash_data+0xf40084c0>
    8980:	d8c00617 	ldw	r3,24(sp)
    8984:	183f901e 	bne	r3,zero,87c8 <__alt_mem_Flash_flash_data+0xf40087c8>
    8988:	a80b883a 	mov	r5,r21
    898c:	8009883a 	mov	r4,r16
    8990:	01800144 	movi	r6,5
    8994:	000f883a 	mov	r7,zero
    8998:	000b02c0 	call	b02c <__multadd>
    899c:	e009883a 	mov	r4,fp
    89a0:	100b883a 	mov	r5,r2
    89a4:	102b883a 	mov	r21,r2
    89a8:	000b8300 	call	b830 <__mcmp>
    89ac:	00bf860e 	bge	zero,r2,87c8 <__alt_mem_Flash_flash_data+0xf40087c8>
    89b0:	d9800717 	ldw	r6,28(sp)
    89b4:	00800c44 	movi	r2,49
    89b8:	30800005 	stb	r2,0(r6)
    89bc:	d8800517 	ldw	r2,20(sp)
    89c0:	35c00044 	addi	r23,r6,1
    89c4:	10800044 	addi	r2,r2,1
    89c8:	d8800515 	stw	r2,20(sp)
    89cc:	003f8206 	br	87d8 <__alt_mem_Flash_flash_data+0xf40087d8>
    89d0:	903e981e 	bne	r18,zero,8434 <__alt_mem_Flash_flash_data+0xf4008434>
    89d4:	003f8b06 	br	8804 <__alt_mem_Flash_flash_data+0xf4008804>
    89d8:	d9800517 	ldw	r6,20(sp)
    89dc:	d8c00717 	ldw	r3,28(sp)
    89e0:	00800c44 	movi	r2,49
    89e4:	31800044 	addi	r6,r6,1
    89e8:	d9800515 	stw	r6,20(sp)
    89ec:	18800005 	stb	r2,0(r3)
    89f0:	003ee906 	br	8598 <__alt_mem_Flash_flash_data+0xf4008598>
    89f4:	dc000317 	ldw	r16,12(sp)
    89f8:	003d6006 	br	7f7c <__alt_mem_Flash_flash_data+0xf4007f7c>
    89fc:	8809883a 	mov	r4,r17
    8a00:	00127700 	call	12770 <__floatsidf>
    8a04:	a009883a 	mov	r4,r20
    8a08:	a80b883a 	mov	r5,r21
    8a0c:	100d883a 	mov	r6,r2
    8a10:	180f883a 	mov	r7,r3
    8a14:	00116f40 	call	116f4 <__muldf3>
    8a18:	1009883a 	mov	r4,r2
    8a1c:	180b883a 	mov	r5,r3
    8a20:	000d883a 	mov	r6,zero
    8a24:	01d00734 	movhi	r7,16412
    8a28:	00103480 	call	10348 <__adddf3>
    8a2c:	1023883a 	mov	r17,r2
    8a30:	00bf3034 	movhi	r2,64704
    8a34:	1885883a 	add	r2,r3,r2
    8a38:	d8800e15 	stw	r2,56(sp)
    8a3c:	a009883a 	mov	r4,r20
    8a40:	a80b883a 	mov	r5,r21
    8a44:	000d883a 	mov	r6,zero
    8a48:	01d00534 	movhi	r7,16404
    8a4c:	0011e180 	call	11e18 <__subdf3>
    8a50:	d9c00e17 	ldw	r7,56(sp)
    8a54:	1009883a 	mov	r4,r2
    8a58:	180b883a 	mov	r5,r3
    8a5c:	880d883a 	mov	r6,r17
    8a60:	102b883a 	mov	r21,r2
    8a64:	1829883a 	mov	r20,r3
    8a68:	00115340 	call	11534 <__gedf2>
    8a6c:	00807716 	blt	zero,r2,8c4c <_dtoa_r+0x1388>
    8a70:	d8800e17 	ldw	r2,56(sp)
    8a74:	a809883a 	mov	r4,r21
    8a78:	a00b883a 	mov	r5,r20
    8a7c:	11e0003c 	xorhi	r7,r2,32768
    8a80:	880d883a 	mov	r6,r17
    8a84:	00116140 	call	11614 <__ledf2>
    8a88:	103d6b0e 	bge	r2,zero,8038 <__alt_mem_Flash_flash_data+0xf4008038>
    8a8c:	002b883a 	mov	r21,zero
    8a90:	0023883a 	mov	r17,zero
    8a94:	003f4c06 	br	87c8 <__alt_mem_Flash_flash_data+0xf40087c8>
    8a98:	d9800917 	ldw	r6,36(sp)
    8a9c:	e00b883a 	mov	r5,fp
    8aa0:	8009883a 	mov	r4,r16
    8aa4:	000b5a00 	call	b5a0 <__pow5mult>
    8aa8:	1039883a 	mov	fp,r2
    8aac:	003e2706 	br	834c <__alt_mem_Flash_flash_data+0xf400834c>
    8ab0:	d8000b15 	stw	zero,44(sp)
    8ab4:	003c4906 	br	7bdc <__alt_mem_Flash_flash_data+0xf4007bdc>
    8ab8:	d9000917 	ldw	r4,36(sp)
    8abc:	d9800a17 	ldw	r6,40(sp)
    8ac0:	dd400915 	stw	r21,36(sp)
    8ac4:	a905c83a 	sub	r2,r21,r4
    8ac8:	308d883a 	add	r6,r6,r2
    8acc:	d9800a15 	stw	r6,40(sp)
    8ad0:	002b883a 	mov	r21,zero
    8ad4:	003df206 	br	82a0 <__alt_mem_Flash_flash_data+0xf40082a0>
    8ad8:	dc800e15 	stw	r18,56(sp)
    8adc:	982b883a 	mov	r21,r19
    8ae0:	04400084 	movi	r17,2
    8ae4:	003c7406 	br	7cb8 <__alt_mem_Flash_flash_data+0xf4007cb8>
    8ae8:	04400044 	movi	r17,1
    8aec:	dc400c15 	stw	r17,48(sp)
    8af0:	dc400615 	stw	r17,24(sp)
    8af4:	dc402215 	stw	r17,136(sp)
    8af8:	80001115 	stw	zero,68(r16)
    8afc:	000b883a 	mov	r5,zero
    8b00:	003c4a06 	br	7c2c <__alt_mem_Flash_flash_data+0xf4007c2c>
    8b04:	3023883a 	mov	r17,r6
    8b08:	003ffb06 	br	8af8 <__alt_mem_Flash_flash_data+0xf4008af8>
    8b0c:	1000021e 	bne	r2,zero,8b18 <_dtoa_r+0x1254>
    8b10:	4200004c 	andi	r8,r8,1
    8b14:	403e8f1e 	bne	r8,zero,8554 <__alt_mem_Flash_flash_data+0xf4008554>
    8b18:	01000c04 	movi	r4,48
    8b1c:	00000106 	br	8b24 <_dtoa_r+0x1260>
    8b20:	102f883a 	mov	r23,r2
    8b24:	b8bfffc4 	addi	r2,r23,-1
    8b28:	10c00007 	ldb	r3,0(r2)
    8b2c:	193ffc26 	beq	r3,r4,8b20 <__alt_mem_Flash_flash_data+0xf4008b20>
    8b30:	003e9906 	br	8598 <__alt_mem_Flash_flash_data+0xf4008598>
    8b34:	d9000517 	ldw	r4,20(sp)
    8b38:	012fc83a 	sub	r23,zero,r4
    8b3c:	b800ad26 	beq	r23,zero,8df4 <_dtoa_r+0x1530>
    8b40:	b88003cc 	andi	r2,r23,15
    8b44:	100490fa 	slli	r2,r2,3
    8b48:	00c000b4 	movhi	r3,2
    8b4c:	18c0c004 	addi	r3,r3,768
    8b50:	1885883a 	add	r2,r3,r2
    8b54:	11800017 	ldw	r6,0(r2)
    8b58:	11c00117 	ldw	r7,4(r2)
    8b5c:	b82fd13a 	srai	r23,r23,4
    8b60:	9009883a 	mov	r4,r18
    8b64:	980b883a 	mov	r5,r19
    8b68:	00116f40 	call	116f4 <__muldf3>
    8b6c:	1029883a 	mov	r20,r2
    8b70:	182b883a 	mov	r21,r3
    8b74:	b800f426 	beq	r23,zero,8f48 <_dtoa_r+0x1684>
    8b78:	020000b4 	movhi	r8,2
    8b7c:	4200b604 	addi	r8,r8,728
    8b80:	8029883a 	mov	r20,r16
    8b84:	04400084 	movi	r17,2
    8b88:	4021883a 	mov	r16,r8
    8b8c:	b980004c 	andi	r6,r23,1
    8b90:	1009883a 	mov	r4,r2
    8b94:	b82fd07a 	srai	r23,r23,1
    8b98:	180b883a 	mov	r5,r3
    8b9c:	30000426 	beq	r6,zero,8bb0 <_dtoa_r+0x12ec>
    8ba0:	81800017 	ldw	r6,0(r16)
    8ba4:	81c00117 	ldw	r7,4(r16)
    8ba8:	8c400044 	addi	r17,r17,1
    8bac:	00116f40 	call	116f4 <__muldf3>
    8bb0:	84000204 	addi	r16,r16,8
    8bb4:	b83ff51e 	bne	r23,zero,8b8c <__alt_mem_Flash_flash_data+0xf4008b8c>
    8bb8:	a021883a 	mov	r16,r20
    8bbc:	182b883a 	mov	r21,r3
    8bc0:	1029883a 	mov	r20,r2
    8bc4:	003c5506 	br	7d1c <__alt_mem_Flash_flash_data+0xf4007d1c>
    8bc8:	d9800517 	ldw	r6,20(sp)
    8bcc:	d9000717 	ldw	r4,28(sp)
    8bd0:	00c00c04 	movi	r3,48
    8bd4:	31800044 	addi	r6,r6,1
    8bd8:	d9800515 	stw	r6,20(sp)
    8bdc:	20c00005 	stb	r3,0(r4)
    8be0:	02000c44 	movi	r8,49
    8be4:	003da206 	br	8270 <__alt_mem_Flash_flash_data+0xf4008270>
    8be8:	89400117 	ldw	r5,4(r17)
    8bec:	8009883a 	mov	r4,r16
    8bf0:	000af5c0 	call	af5c <_Balloc>
    8bf4:	89800417 	ldw	r6,16(r17)
    8bf8:	11000304 	addi	r4,r2,12
    8bfc:	89400304 	addi	r5,r17,12
    8c00:	31800084 	addi	r6,r6,2
    8c04:	318d883a 	add	r6,r6,r6
    8c08:	318d883a 	add	r6,r6,r6
    8c0c:	1027883a 	mov	r19,r2
    8c10:	000aba40 	call	aba4 <memcpy>
    8c14:	8009883a 	mov	r4,r16
    8c18:	980b883a 	mov	r5,r19
    8c1c:	01800044 	movi	r6,1
    8c20:	000b6e00 	call	b6e0 <__lshift>
    8c24:	1029883a 	mov	r20,r2
    8c28:	003e8606 	br	8644 <__alt_mem_Flash_flash_data+0xf4008644>
    8c2c:	00800e44 	movi	r2,57
    8c30:	90809526 	beq	r18,r2,8e88 <_dtoa_r+0x15c4>
    8c34:	92000044 	addi	r8,r18,1
    8c38:	003f2306 	br	88c8 <__alt_mem_Flash_flash_data+0xf40088c8>
    8c3c:	9011883a 	mov	r8,r18
    8c40:	8825883a 	mov	r18,r17
    8c44:	a023883a 	mov	r17,r20
    8c48:	003e3706 	br	8528 <__alt_mem_Flash_flash_data+0xf4008528>
    8c4c:	002b883a 	mov	r21,zero
    8c50:	0023883a 	mov	r17,zero
    8c54:	003f5606 	br	89b0 <__alt_mem_Flash_flash_data+0xf40089b0>
    8c58:	51bfffc4 	addi	r6,r10,-1
    8c5c:	300490fa 	slli	r2,r6,3
    8c60:	00c000b4 	movhi	r3,2
    8c64:	18c0c004 	addi	r3,r3,768
    8c68:	1885883a 	add	r2,r3,r2
    8c6c:	d9c00e17 	ldw	r7,56(sp)
    8c70:	11000017 	ldw	r4,0(r2)
    8c74:	11400117 	ldw	r5,4(r2)
    8c78:	d8800717 	ldw	r2,28(sp)
    8c7c:	d9801015 	stw	r6,64(sp)
    8c80:	880d883a 	mov	r6,r17
    8c84:	da801615 	stw	r10,88(sp)
    8c88:	15c00044 	addi	r23,r2,1
    8c8c:	00116f40 	call	116f4 <__muldf3>
    8c90:	a80b883a 	mov	r5,r21
    8c94:	a009883a 	mov	r4,r20
    8c98:	d8c01115 	stw	r3,68(sp)
    8c9c:	d8800e15 	stw	r2,56(sp)
    8ca0:	00126e80 	call	126e8 <__fixdfsi>
    8ca4:	1009883a 	mov	r4,r2
    8ca8:	1023883a 	mov	r17,r2
    8cac:	00127700 	call	12770 <__floatsidf>
    8cb0:	a009883a 	mov	r4,r20
    8cb4:	a80b883a 	mov	r5,r21
    8cb8:	100d883a 	mov	r6,r2
    8cbc:	180f883a 	mov	r7,r3
    8cc0:	0011e180 	call	11e18 <__subdf3>
    8cc4:	1813883a 	mov	r9,r3
    8cc8:	d8c00717 	ldw	r3,28(sp)
    8ccc:	8c400c04 	addi	r17,r17,48
    8cd0:	1011883a 	mov	r8,r2
    8cd4:	1c400005 	stb	r17,0(r3)
    8cd8:	da801617 	ldw	r10,88(sp)
    8cdc:	00800044 	movi	r2,1
    8ce0:	50802326 	beq	r10,r2,8d70 <_dtoa_r+0x14ac>
    8ce4:	d8800717 	ldw	r2,28(sp)
    8ce8:	b82b883a 	mov	r21,r23
    8cec:	dc001315 	stw	r16,76(sp)
    8cf0:	12a9883a 	add	r20,r2,r10
    8cf4:	4807883a 	mov	r3,r9
    8cf8:	4005883a 	mov	r2,r8
    8cfc:	dc801415 	stw	r18,80(sp)
    8d00:	000d883a 	mov	r6,zero
    8d04:	01d00934 	movhi	r7,16420
    8d08:	1009883a 	mov	r4,r2
    8d0c:	180b883a 	mov	r5,r3
    8d10:	00116f40 	call	116f4 <__muldf3>
    8d14:	180b883a 	mov	r5,r3
    8d18:	1009883a 	mov	r4,r2
    8d1c:	1821883a 	mov	r16,r3
    8d20:	1025883a 	mov	r18,r2
    8d24:	00126e80 	call	126e8 <__fixdfsi>
    8d28:	1009883a 	mov	r4,r2
    8d2c:	1023883a 	mov	r17,r2
    8d30:	00127700 	call	12770 <__floatsidf>
    8d34:	9009883a 	mov	r4,r18
    8d38:	800b883a 	mov	r5,r16
    8d3c:	100d883a 	mov	r6,r2
    8d40:	180f883a 	mov	r7,r3
    8d44:	8c400c04 	addi	r17,r17,48
    8d48:	0011e180 	call	11e18 <__subdf3>
    8d4c:	ad400044 	addi	r21,r21,1
    8d50:	ac7fffc5 	stb	r17,-1(r21)
    8d54:	ad3fea1e 	bne	r21,r20,8d00 <__alt_mem_Flash_flash_data+0xf4008d00>
    8d58:	1813883a 	mov	r9,r3
    8d5c:	d8c01017 	ldw	r3,64(sp)
    8d60:	dc001317 	ldw	r16,76(sp)
    8d64:	dc801417 	ldw	r18,80(sp)
    8d68:	1011883a 	mov	r8,r2
    8d6c:	b8ef883a 	add	r23,r23,r3
    8d70:	d9000e17 	ldw	r4,56(sp)
    8d74:	d9401117 	ldw	r5,68(sp)
    8d78:	000d883a 	mov	r6,zero
    8d7c:	01cff834 	movhi	r7,16352
    8d80:	da001715 	stw	r8,92(sp)
    8d84:	da401515 	stw	r9,84(sp)
    8d88:	00103480 	call	10348 <__adddf3>
    8d8c:	da001717 	ldw	r8,92(sp)
    8d90:	da401517 	ldw	r9,84(sp)
    8d94:	1009883a 	mov	r4,r2
    8d98:	400d883a 	mov	r6,r8
    8d9c:	480f883a 	mov	r7,r9
    8da0:	180b883a 	mov	r5,r3
    8da4:	00116140 	call	11614 <__ledf2>
    8da8:	da001717 	ldw	r8,92(sp)
    8dac:	da401517 	ldw	r9,84(sp)
    8db0:	10003b0e 	bge	r2,zero,8ea0 <_dtoa_r+0x15dc>
    8db4:	d9001217 	ldw	r4,72(sp)
    8db8:	bd7fffc3 	ldbu	r21,-1(r23)
    8dbc:	d9000515 	stw	r4,20(sp)
    8dc0:	003d1c06 	br	8234 <__alt_mem_Flash_flash_data+0xf4008234>
    8dc4:	d8c00817 	ldw	r3,32(sp)
    8dc8:	18a9c83a 	sub	r20,r3,r2
    8dcc:	0005883a 	mov	r2,zero
    8dd0:	003d3706 	br	82b0 <__alt_mem_Flash_flash_data+0xf40082b0>
    8dd4:	00800044 	movi	r2,1
    8dd8:	003dd006 	br	851c <__alt_mem_Flash_flash_data+0xf400851c>
    8ddc:	d8c00217 	ldw	r3,8(sp)
    8de0:	00800d84 	movi	r2,54
    8de4:	dd400917 	ldw	r21,36(sp)
    8de8:	10c5c83a 	sub	r2,r2,r3
    8dec:	dd000817 	ldw	r20,32(sp)
    8df0:	003d2f06 	br	82b0 <__alt_mem_Flash_flash_data+0xf40082b0>
    8df4:	9029883a 	mov	r20,r18
    8df8:	982b883a 	mov	r21,r19
    8dfc:	04400084 	movi	r17,2
    8e00:	003bc606 	br	7d1c <__alt_mem_Flash_flash_data+0xf4007d1c>
    8e04:	d8800617 	ldw	r2,24(sp)
    8e08:	103efc26 	beq	r2,zero,89fc <__alt_mem_Flash_flash_data+0xf40089fc>
    8e0c:	d8c00c17 	ldw	r3,48(sp)
    8e10:	00fc890e 	bge	zero,r3,8038 <__alt_mem_Flash_flash_data+0xf4008038>
    8e14:	a80b883a 	mov	r5,r21
    8e18:	a009883a 	mov	r4,r20
    8e1c:	000d883a 	mov	r6,zero
    8e20:	01d00934 	movhi	r7,16420
    8e24:	00116f40 	call	116f4 <__muldf3>
    8e28:	89000044 	addi	r4,r17,1
    8e2c:	1029883a 	mov	r20,r2
    8e30:	182b883a 	mov	r21,r3
    8e34:	00127700 	call	12770 <__floatsidf>
    8e38:	a009883a 	mov	r4,r20
    8e3c:	a80b883a 	mov	r5,r21
    8e40:	100d883a 	mov	r6,r2
    8e44:	180f883a 	mov	r7,r3
    8e48:	00116f40 	call	116f4 <__muldf3>
    8e4c:	1009883a 	mov	r4,r2
    8e50:	180b883a 	mov	r5,r3
    8e54:	000d883a 	mov	r6,zero
    8e58:	01d00734 	movhi	r7,16412
    8e5c:	00103480 	call	10348 <__adddf3>
    8e60:	d9000517 	ldw	r4,20(sp)
    8e64:	1023883a 	mov	r17,r2
    8e68:	00bf3034 	movhi	r2,64704
    8e6c:	213fffc4 	addi	r4,r4,-1
    8e70:	1885883a 	add	r2,r3,r2
    8e74:	d9001215 	stw	r4,72(sp)
    8e78:	d8800e15 	stw	r2,56(sp)
    8e7c:	da800c17 	ldw	r10,48(sp)
    8e80:	003bc306 	br	7d90 <__alt_mem_Flash_flash_data+0xf4007d90>
    8e84:	b039883a 	mov	fp,r22
    8e88:	01000e44 	movi	r4,57
    8e8c:	8825883a 	mov	r18,r17
    8e90:	9dc00044 	addi	r23,r19,1
    8e94:	99000005 	stb	r4,0(r19)
    8e98:	a023883a 	mov	r17,r20
    8e9c:	003dae06 	br	8558 <__alt_mem_Flash_flash_data+0xf4008558>
    8ea0:	d9800e17 	ldw	r6,56(sp)
    8ea4:	d9c01117 	ldw	r7,68(sp)
    8ea8:	0009883a 	mov	r4,zero
    8eac:	014ff834 	movhi	r5,16352
    8eb0:	da001715 	stw	r8,92(sp)
    8eb4:	da401515 	stw	r9,84(sp)
    8eb8:	0011e180 	call	11e18 <__subdf3>
    8ebc:	da001717 	ldw	r8,92(sp)
    8ec0:	da401517 	ldw	r9,84(sp)
    8ec4:	1009883a 	mov	r4,r2
    8ec8:	180b883a 	mov	r5,r3
    8ecc:	400d883a 	mov	r6,r8
    8ed0:	480f883a 	mov	r7,r9
    8ed4:	00115340 	call	11534 <__gedf2>
    8ed8:	00bc570e 	bge	zero,r2,8038 <__alt_mem_Flash_flash_data+0xf4008038>
    8edc:	01000c04 	movi	r4,48
    8ee0:	00000106 	br	8ee8 <_dtoa_r+0x1624>
    8ee4:	102f883a 	mov	r23,r2
    8ee8:	b8bfffc4 	addi	r2,r23,-1
    8eec:	10c00007 	ldb	r3,0(r2)
    8ef0:	193ffc26 	beq	r3,r4,8ee4 <__alt_mem_Flash_flash_data+0xf4008ee4>
    8ef4:	d9801217 	ldw	r6,72(sp)
    8ef8:	d9800515 	stw	r6,20(sp)
    8efc:	003c1f06 	br	7f7c <__alt_mem_Flash_flash_data+0xf4007f7c>
    8f00:	d8801217 	ldw	r2,72(sp)
    8f04:	dc001117 	ldw	r16,68(sp)
    8f08:	d8800515 	stw	r2,20(sp)
    8f0c:	003cc906 	br	8234 <__alt_mem_Flash_flash_data+0xf4008234>
    8f10:	dd801317 	ldw	r22,76(sp)
    8f14:	dc001117 	ldw	r16,68(sp)
    8f18:	dcc01417 	ldw	r19,80(sp)
    8f1c:	dc801017 	ldw	r18,64(sp)
    8f20:	003c4506 	br	8038 <__alt_mem_Flash_flash_data+0xf4008038>
    8f24:	103e5d1e 	bne	r2,zero,889c <__alt_mem_Flash_flash_data+0xf400889c>
    8f28:	4080004c 	andi	r2,r8,1
    8f2c:	103e5b26 	beq	r2,zero,889c <__alt_mem_Flash_flash_data+0xf400889c>
    8f30:	003e5706 	br	8890 <__alt_mem_Flash_flash_data+0xf4008890>
    8f34:	d8c00317 	ldw	r3,12(sp)
    8f38:	00800084 	movi	r2,2
    8f3c:	10c00a16 	blt	r2,r3,8f68 <_dtoa_r+0x16a4>
    8f40:	d9000c17 	ldw	r4,48(sp)
    8f44:	003e8306 	br	8954 <__alt_mem_Flash_flash_data+0xf4008954>
    8f48:	04400084 	movi	r17,2
    8f4c:	003b7306 	br	7d1c <__alt_mem_Flash_flash_data+0xf4007d1c>
    8f50:	d9801217 	ldw	r6,72(sp)
    8f54:	d9800515 	stw	r6,20(sp)
    8f58:	003cb606 	br	8234 <__alt_mem_Flash_flash_data+0xf4008234>
    8f5c:	d9001217 	ldw	r4,72(sp)
    8f60:	d9000515 	stw	r4,20(sp)
    8f64:	003c0506 	br	7f7c <__alt_mem_Flash_flash_data+0xf4007f7c>
    8f68:	d9800c17 	ldw	r6,48(sp)
    8f6c:	d9800615 	stw	r6,24(sp)
    8f70:	003e8306 	br	8980 <__alt_mem_Flash_flash_data+0xf4008980>
    8f74:	d9800317 	ldw	r6,12(sp)
    8f78:	00800084 	movi	r2,2
    8f7c:	11800216 	blt	r2,r6,8f88 <_dtoa_r+0x16c4>
    8f80:	d8800c17 	ldw	r2,48(sp)
    8f84:	003da606 	br	8620 <__alt_mem_Flash_flash_data+0xf4008620>
    8f88:	d8800c17 	ldw	r2,48(sp)
    8f8c:	d8800615 	stw	r2,24(sp)
    8f90:	003e7b06 	br	8980 <__alt_mem_Flash_flash_data+0xf4008980>
    8f94:	05000044 	movi	r20,1
    8f98:	003b0506 	br	7bb0 <__alt_mem_Flash_flash_data+0xf4007bb0>
    8f9c:	8009883a 	mov	r4,r16
    8fa0:	80001115 	stw	zero,68(r16)
    8fa4:	000b883a 	mov	r5,zero
    8fa8:	000af5c0 	call	af5c <_Balloc>
    8fac:	d8800715 	stw	r2,28(sp)
    8fb0:	d8c00717 	ldw	r3,28(sp)
    8fb4:	00bfffc4 	movi	r2,-1
    8fb8:	01000044 	movi	r4,1
    8fbc:	d8800c15 	stw	r2,48(sp)
    8fc0:	80c01015 	stw	r3,64(r16)
    8fc4:	d9000b15 	stw	r4,44(sp)
    8fc8:	d8800615 	stw	r2,24(sp)
    8fcc:	d8002215 	stw	zero,136(sp)
    8fd0:	003c1906 	br	8038 <__alt_mem_Flash_flash_data+0xf4008038>
    8fd4:	193d2926 	beq	r3,r4,847c <__alt_mem_Flash_flash_data+0xf400847c>
    8fd8:	00c00f04 	movi	r3,60
    8fdc:	1885c83a 	sub	r2,r3,r2
    8fe0:	003d7b06 	br	85d0 <__alt_mem_Flash_flash_data+0xf40085d0>
    8fe4:	000b883a 	mov	r5,zero
    8fe8:	003b1006 	br	7c2c <__alt_mem_Flash_flash_data+0xf4007c2c>

00008fec <__sflush_r>:
    8fec:	2880030b 	ldhu	r2,12(r5)
    8ff0:	defffb04 	addi	sp,sp,-20
    8ff4:	dcc00315 	stw	r19,12(sp)
    8ff8:	dc400115 	stw	r17,4(sp)
    8ffc:	dfc00415 	stw	ra,16(sp)
    9000:	dc800215 	stw	r18,8(sp)
    9004:	dc000015 	stw	r16,0(sp)
    9008:	10c0020c 	andi	r3,r2,8
    900c:	2823883a 	mov	r17,r5
    9010:	2027883a 	mov	r19,r4
    9014:	1800311e 	bne	r3,zero,90dc <__sflush_r+0xf0>
    9018:	28c00117 	ldw	r3,4(r5)
    901c:	10820014 	ori	r2,r2,2048
    9020:	2880030d 	sth	r2,12(r5)
    9024:	00c04b0e 	bge	zero,r3,9154 <__sflush_r+0x168>
    9028:	8a000a17 	ldw	r8,40(r17)
    902c:	40002326 	beq	r8,zero,90bc <__sflush_r+0xd0>
    9030:	9c000017 	ldw	r16,0(r19)
    9034:	10c4000c 	andi	r3,r2,4096
    9038:	98000015 	stw	zero,0(r19)
    903c:	18004826 	beq	r3,zero,9160 <__sflush_r+0x174>
    9040:	89801417 	ldw	r6,80(r17)
    9044:	10c0010c 	andi	r3,r2,4
    9048:	18000626 	beq	r3,zero,9064 <__sflush_r+0x78>
    904c:	88c00117 	ldw	r3,4(r17)
    9050:	88800c17 	ldw	r2,48(r17)
    9054:	30cdc83a 	sub	r6,r6,r3
    9058:	10000226 	beq	r2,zero,9064 <__sflush_r+0x78>
    905c:	88800f17 	ldw	r2,60(r17)
    9060:	308dc83a 	sub	r6,r6,r2
    9064:	89400717 	ldw	r5,28(r17)
    9068:	9809883a 	mov	r4,r19
    906c:	000f883a 	mov	r7,zero
    9070:	403ee83a 	callr	r8
    9074:	00ffffc4 	movi	r3,-1
    9078:	10c04426 	beq	r2,r3,918c <__sflush_r+0x1a0>
    907c:	88c0030b 	ldhu	r3,12(r17)
    9080:	89000417 	ldw	r4,16(r17)
    9084:	88000115 	stw	zero,4(r17)
    9088:	197dffcc 	andi	r5,r3,63487
    908c:	8940030d 	sth	r5,12(r17)
    9090:	89000015 	stw	r4,0(r17)
    9094:	18c4000c 	andi	r3,r3,4096
    9098:	18002c1e 	bne	r3,zero,914c <__sflush_r+0x160>
    909c:	89400c17 	ldw	r5,48(r17)
    90a0:	9c000015 	stw	r16,0(r19)
    90a4:	28000526 	beq	r5,zero,90bc <__sflush_r+0xd0>
    90a8:	88801004 	addi	r2,r17,64
    90ac:	28800226 	beq	r5,r2,90b8 <__sflush_r+0xcc>
    90b0:	9809883a 	mov	r4,r19
    90b4:	00097440 	call	9744 <_free_r>
    90b8:	88000c15 	stw	zero,48(r17)
    90bc:	0005883a 	mov	r2,zero
    90c0:	dfc00417 	ldw	ra,16(sp)
    90c4:	dcc00317 	ldw	r19,12(sp)
    90c8:	dc800217 	ldw	r18,8(sp)
    90cc:	dc400117 	ldw	r17,4(sp)
    90d0:	dc000017 	ldw	r16,0(sp)
    90d4:	dec00504 	addi	sp,sp,20
    90d8:	f800283a 	ret
    90dc:	2c800417 	ldw	r18,16(r5)
    90e0:	903ff626 	beq	r18,zero,90bc <__alt_mem_Flash_flash_data+0xf40090bc>
    90e4:	2c000017 	ldw	r16,0(r5)
    90e8:	108000cc 	andi	r2,r2,3
    90ec:	2c800015 	stw	r18,0(r5)
    90f0:	84a1c83a 	sub	r16,r16,r18
    90f4:	1000131e 	bne	r2,zero,9144 <__sflush_r+0x158>
    90f8:	28800517 	ldw	r2,20(r5)
    90fc:	88800215 	stw	r2,8(r17)
    9100:	04000316 	blt	zero,r16,9110 <__sflush_r+0x124>
    9104:	003fed06 	br	90bc <__alt_mem_Flash_flash_data+0xf40090bc>
    9108:	90a5883a 	add	r18,r18,r2
    910c:	043feb0e 	bge	zero,r16,90bc <__alt_mem_Flash_flash_data+0xf40090bc>
    9110:	88800917 	ldw	r2,36(r17)
    9114:	89400717 	ldw	r5,28(r17)
    9118:	800f883a 	mov	r7,r16
    911c:	900d883a 	mov	r6,r18
    9120:	9809883a 	mov	r4,r19
    9124:	103ee83a 	callr	r2
    9128:	80a1c83a 	sub	r16,r16,r2
    912c:	00bff616 	blt	zero,r2,9108 <__alt_mem_Flash_flash_data+0xf4009108>
    9130:	88c0030b 	ldhu	r3,12(r17)
    9134:	00bfffc4 	movi	r2,-1
    9138:	18c01014 	ori	r3,r3,64
    913c:	88c0030d 	sth	r3,12(r17)
    9140:	003fdf06 	br	90c0 <__alt_mem_Flash_flash_data+0xf40090c0>
    9144:	0005883a 	mov	r2,zero
    9148:	003fec06 	br	90fc <__alt_mem_Flash_flash_data+0xf40090fc>
    914c:	88801415 	stw	r2,80(r17)
    9150:	003fd206 	br	909c <__alt_mem_Flash_flash_data+0xf400909c>
    9154:	28c00f17 	ldw	r3,60(r5)
    9158:	00ffb316 	blt	zero,r3,9028 <__alt_mem_Flash_flash_data+0xf4009028>
    915c:	003fd706 	br	90bc <__alt_mem_Flash_flash_data+0xf40090bc>
    9160:	89400717 	ldw	r5,28(r17)
    9164:	000d883a 	mov	r6,zero
    9168:	9809883a 	mov	r4,r19
    916c:	01c00044 	movi	r7,1
    9170:	403ee83a 	callr	r8
    9174:	100d883a 	mov	r6,r2
    9178:	00bfffc4 	movi	r2,-1
    917c:	30801426 	beq	r6,r2,91d0 <__sflush_r+0x1e4>
    9180:	8880030b 	ldhu	r2,12(r17)
    9184:	8a000a17 	ldw	r8,40(r17)
    9188:	003fae06 	br	9044 <__alt_mem_Flash_flash_data+0xf4009044>
    918c:	98c00017 	ldw	r3,0(r19)
    9190:	183fba26 	beq	r3,zero,907c <__alt_mem_Flash_flash_data+0xf400907c>
    9194:	01000744 	movi	r4,29
    9198:	19000626 	beq	r3,r4,91b4 <__sflush_r+0x1c8>
    919c:	01000584 	movi	r4,22
    91a0:	19000426 	beq	r3,r4,91b4 <__sflush_r+0x1c8>
    91a4:	88c0030b 	ldhu	r3,12(r17)
    91a8:	18c01014 	ori	r3,r3,64
    91ac:	88c0030d 	sth	r3,12(r17)
    91b0:	003fc306 	br	90c0 <__alt_mem_Flash_flash_data+0xf40090c0>
    91b4:	8880030b 	ldhu	r2,12(r17)
    91b8:	88c00417 	ldw	r3,16(r17)
    91bc:	88000115 	stw	zero,4(r17)
    91c0:	10bdffcc 	andi	r2,r2,63487
    91c4:	8880030d 	sth	r2,12(r17)
    91c8:	88c00015 	stw	r3,0(r17)
    91cc:	003fb306 	br	909c <__alt_mem_Flash_flash_data+0xf400909c>
    91d0:	98800017 	ldw	r2,0(r19)
    91d4:	103fea26 	beq	r2,zero,9180 <__alt_mem_Flash_flash_data+0xf4009180>
    91d8:	00c00744 	movi	r3,29
    91dc:	10c00226 	beq	r2,r3,91e8 <__sflush_r+0x1fc>
    91e0:	00c00584 	movi	r3,22
    91e4:	10ffd21e 	bne	r2,r3,9130 <__alt_mem_Flash_flash_data+0xf4009130>
    91e8:	9c000015 	stw	r16,0(r19)
    91ec:	0005883a 	mov	r2,zero
    91f0:	003fb306 	br	90c0 <__alt_mem_Flash_flash_data+0xf40090c0>

000091f4 <_fflush_r>:
    91f4:	defffd04 	addi	sp,sp,-12
    91f8:	dc000115 	stw	r16,4(sp)
    91fc:	dfc00215 	stw	ra,8(sp)
    9200:	2021883a 	mov	r16,r4
    9204:	20000226 	beq	r4,zero,9210 <_fflush_r+0x1c>
    9208:	20800e17 	ldw	r2,56(r4)
    920c:	10000c26 	beq	r2,zero,9240 <_fflush_r+0x4c>
    9210:	2880030f 	ldh	r2,12(r5)
    9214:	1000051e 	bne	r2,zero,922c <_fflush_r+0x38>
    9218:	0005883a 	mov	r2,zero
    921c:	dfc00217 	ldw	ra,8(sp)
    9220:	dc000117 	ldw	r16,4(sp)
    9224:	dec00304 	addi	sp,sp,12
    9228:	f800283a 	ret
    922c:	8009883a 	mov	r4,r16
    9230:	dfc00217 	ldw	ra,8(sp)
    9234:	dc000117 	ldw	r16,4(sp)
    9238:	dec00304 	addi	sp,sp,12
    923c:	0008fec1 	jmpi	8fec <__sflush_r>
    9240:	d9400015 	stw	r5,0(sp)
    9244:	00095d00 	call	95d0 <__sinit>
    9248:	d9400017 	ldw	r5,0(sp)
    924c:	003ff006 	br	9210 <__alt_mem_Flash_flash_data+0xf4009210>

00009250 <fflush>:
    9250:	20000526 	beq	r4,zero,9268 <fflush+0x18>
    9254:	008000b4 	movhi	r2,2
    9258:	10899a04 	addi	r2,r2,9832
    925c:	200b883a 	mov	r5,r4
    9260:	11000017 	ldw	r4,0(r2)
    9264:	00091f41 	jmpi	91f4 <_fflush_r>
    9268:	008000b4 	movhi	r2,2
    926c:	10899904 	addi	r2,r2,9828
    9270:	11000017 	ldw	r4,0(r2)
    9274:	01400074 	movhi	r5,1
    9278:	29647d04 	addi	r5,r5,-28172
    927c:	0009fb81 	jmpi	9fb8 <_fwalk_reent>

00009280 <__fp_lock>:
    9280:	0005883a 	mov	r2,zero
    9284:	f800283a 	ret

00009288 <__fp_unlock>:
    9288:	0005883a 	mov	r2,zero
    928c:	f800283a 	ret

00009290 <_cleanup_r>:
    9290:	01400074 	movhi	r5,1
    9294:	297bd204 	addi	r5,r5,-4280
    9298:	0009fb81 	jmpi	9fb8 <_fwalk_reent>

0000929c <__sinit.part.1>:
    929c:	defff704 	addi	sp,sp,-36
    92a0:	00c00074 	movhi	r3,1
    92a4:	dfc00815 	stw	ra,32(sp)
    92a8:	ddc00715 	stw	r23,28(sp)
    92ac:	dd800615 	stw	r22,24(sp)
    92b0:	dd400515 	stw	r21,20(sp)
    92b4:	dd000415 	stw	r20,16(sp)
    92b8:	dcc00315 	stw	r19,12(sp)
    92bc:	dc800215 	stw	r18,8(sp)
    92c0:	dc400115 	stw	r17,4(sp)
    92c4:	dc000015 	stw	r16,0(sp)
    92c8:	18e4a404 	addi	r3,r3,-28016
    92cc:	24000117 	ldw	r16,4(r4)
    92d0:	20c00f15 	stw	r3,60(r4)
    92d4:	2080bb04 	addi	r2,r4,748
    92d8:	00c000c4 	movi	r3,3
    92dc:	20c0b915 	stw	r3,740(r4)
    92e0:	2080ba15 	stw	r2,744(r4)
    92e4:	2000b815 	stw	zero,736(r4)
    92e8:	05c00204 	movi	r23,8
    92ec:	00800104 	movi	r2,4
    92f0:	2025883a 	mov	r18,r4
    92f4:	b80d883a 	mov	r6,r23
    92f8:	81001704 	addi	r4,r16,92
    92fc:	000b883a 	mov	r5,zero
    9300:	80000015 	stw	zero,0(r16)
    9304:	80000115 	stw	zero,4(r16)
    9308:	80000215 	stw	zero,8(r16)
    930c:	8080030d 	sth	r2,12(r16)
    9310:	80001915 	stw	zero,100(r16)
    9314:	8000038d 	sth	zero,14(r16)
    9318:	80000415 	stw	zero,16(r16)
    931c:	80000515 	stw	zero,20(r16)
    9320:	80000615 	stw	zero,24(r16)
    9324:	000ae380 	call	ae38 <memset>
    9328:	05800074 	movhi	r22,1
    932c:	94400217 	ldw	r17,8(r18)
    9330:	05400074 	movhi	r21,1
    9334:	05000074 	movhi	r20,1
    9338:	04c00074 	movhi	r19,1
    933c:	b5b14b04 	addi	r22,r22,-15060
    9340:	ad716204 	addi	r21,r21,-14968
    9344:	a5318104 	addi	r20,r20,-14844
    9348:	9cf19804 	addi	r19,r19,-14752
    934c:	85800815 	stw	r22,32(r16)
    9350:	85400915 	stw	r21,36(r16)
    9354:	85000a15 	stw	r20,40(r16)
    9358:	84c00b15 	stw	r19,44(r16)
    935c:	84000715 	stw	r16,28(r16)
    9360:	00800284 	movi	r2,10
    9364:	8880030d 	sth	r2,12(r17)
    9368:	00800044 	movi	r2,1
    936c:	89001704 	addi	r4,r17,92
    9370:	b80d883a 	mov	r6,r23
    9374:	000b883a 	mov	r5,zero
    9378:	88000015 	stw	zero,0(r17)
    937c:	88000115 	stw	zero,4(r17)
    9380:	88000215 	stw	zero,8(r17)
    9384:	88001915 	stw	zero,100(r17)
    9388:	8880038d 	sth	r2,14(r17)
    938c:	88000415 	stw	zero,16(r17)
    9390:	88000515 	stw	zero,20(r17)
    9394:	88000615 	stw	zero,24(r17)
    9398:	000ae380 	call	ae38 <memset>
    939c:	94000317 	ldw	r16,12(r18)
    93a0:	00800484 	movi	r2,18
    93a4:	8c400715 	stw	r17,28(r17)
    93a8:	8d800815 	stw	r22,32(r17)
    93ac:	8d400915 	stw	r21,36(r17)
    93b0:	8d000a15 	stw	r20,40(r17)
    93b4:	8cc00b15 	stw	r19,44(r17)
    93b8:	8080030d 	sth	r2,12(r16)
    93bc:	00800084 	movi	r2,2
    93c0:	80000015 	stw	zero,0(r16)
    93c4:	80000115 	stw	zero,4(r16)
    93c8:	80000215 	stw	zero,8(r16)
    93cc:	80001915 	stw	zero,100(r16)
    93d0:	8080038d 	sth	r2,14(r16)
    93d4:	80000415 	stw	zero,16(r16)
    93d8:	80000515 	stw	zero,20(r16)
    93dc:	80000615 	stw	zero,24(r16)
    93e0:	81001704 	addi	r4,r16,92
    93e4:	000b883a 	mov	r5,zero
    93e8:	b80d883a 	mov	r6,r23
    93ec:	000ae380 	call	ae38 <memset>
    93f0:	00800044 	movi	r2,1
    93f4:	84000715 	stw	r16,28(r16)
    93f8:	85800815 	stw	r22,32(r16)
    93fc:	85400915 	stw	r21,36(r16)
    9400:	85000a15 	stw	r20,40(r16)
    9404:	84c00b15 	stw	r19,44(r16)
    9408:	90800e15 	stw	r2,56(r18)
    940c:	dfc00817 	ldw	ra,32(sp)
    9410:	ddc00717 	ldw	r23,28(sp)
    9414:	dd800617 	ldw	r22,24(sp)
    9418:	dd400517 	ldw	r21,20(sp)
    941c:	dd000417 	ldw	r20,16(sp)
    9420:	dcc00317 	ldw	r19,12(sp)
    9424:	dc800217 	ldw	r18,8(sp)
    9428:	dc400117 	ldw	r17,4(sp)
    942c:	dc000017 	ldw	r16,0(sp)
    9430:	dec00904 	addi	sp,sp,36
    9434:	f800283a 	ret

00009438 <__sfmoreglue>:
    9438:	defffc04 	addi	sp,sp,-16
    943c:	dc400115 	stw	r17,4(sp)
    9440:	2c7fffc4 	addi	r17,r5,-1
    9444:	8c401a24 	muli	r17,r17,104
    9448:	dc800215 	stw	r18,8(sp)
    944c:	2825883a 	mov	r18,r5
    9450:	89401d04 	addi	r5,r17,116
    9454:	dc000015 	stw	r16,0(sp)
    9458:	dfc00315 	stw	ra,12(sp)
    945c:	000a3140 	call	a314 <_malloc_r>
    9460:	1021883a 	mov	r16,r2
    9464:	10000726 	beq	r2,zero,9484 <__sfmoreglue+0x4c>
    9468:	11000304 	addi	r4,r2,12
    946c:	10000015 	stw	zero,0(r2)
    9470:	14800115 	stw	r18,4(r2)
    9474:	11000215 	stw	r4,8(r2)
    9478:	000b883a 	mov	r5,zero
    947c:	89801a04 	addi	r6,r17,104
    9480:	000ae380 	call	ae38 <memset>
    9484:	8005883a 	mov	r2,r16
    9488:	dfc00317 	ldw	ra,12(sp)
    948c:	dc800217 	ldw	r18,8(sp)
    9490:	dc400117 	ldw	r17,4(sp)
    9494:	dc000017 	ldw	r16,0(sp)
    9498:	dec00404 	addi	sp,sp,16
    949c:	f800283a 	ret

000094a0 <__sfp>:
    94a0:	008000b4 	movhi	r2,2
    94a4:	defffb04 	addi	sp,sp,-20
    94a8:	10899904 	addi	r2,r2,9828
    94ac:	dc800215 	stw	r18,8(sp)
    94b0:	14800017 	ldw	r18,0(r2)
    94b4:	dcc00315 	stw	r19,12(sp)
    94b8:	dfc00415 	stw	ra,16(sp)
    94bc:	90800e17 	ldw	r2,56(r18)
    94c0:	dc400115 	stw	r17,4(sp)
    94c4:	dc000015 	stw	r16,0(sp)
    94c8:	2027883a 	mov	r19,r4
    94cc:	1000021e 	bne	r2,zero,94d8 <__sfp+0x38>
    94d0:	9009883a 	mov	r4,r18
    94d4:	000929c0 	call	929c <__sinit.part.1>
    94d8:	9480b804 	addi	r18,r18,736
    94dc:	047fffc4 	movi	r17,-1
    94e0:	91400117 	ldw	r5,4(r18)
    94e4:	94000217 	ldw	r16,8(r18)
    94e8:	297fffc4 	addi	r5,r5,-1
    94ec:	28000a16 	blt	r5,zero,9518 <__sfp+0x78>
    94f0:	8080030f 	ldh	r2,12(r16)
    94f4:	10000c26 	beq	r2,zero,9528 <__sfp+0x88>
    94f8:	80c01d04 	addi	r3,r16,116
    94fc:	00000206 	br	9508 <__sfp+0x68>
    9500:	18bfe60f 	ldh	r2,-104(r3)
    9504:	10000826 	beq	r2,zero,9528 <__sfp+0x88>
    9508:	297fffc4 	addi	r5,r5,-1
    950c:	1c3ffd04 	addi	r16,r3,-12
    9510:	18c01a04 	addi	r3,r3,104
    9514:	2c7ffa1e 	bne	r5,r17,9500 <__alt_mem_Flash_flash_data+0xf4009500>
    9518:	90800017 	ldw	r2,0(r18)
    951c:	10001d26 	beq	r2,zero,9594 <__sfp+0xf4>
    9520:	1025883a 	mov	r18,r2
    9524:	003fee06 	br	94e0 <__alt_mem_Flash_flash_data+0xf40094e0>
    9528:	00bfffc4 	movi	r2,-1
    952c:	8080038d 	sth	r2,14(r16)
    9530:	00800044 	movi	r2,1
    9534:	8080030d 	sth	r2,12(r16)
    9538:	80001915 	stw	zero,100(r16)
    953c:	80000015 	stw	zero,0(r16)
    9540:	80000215 	stw	zero,8(r16)
    9544:	80000115 	stw	zero,4(r16)
    9548:	80000415 	stw	zero,16(r16)
    954c:	80000515 	stw	zero,20(r16)
    9550:	80000615 	stw	zero,24(r16)
    9554:	81001704 	addi	r4,r16,92
    9558:	000b883a 	mov	r5,zero
    955c:	01800204 	movi	r6,8
    9560:	000ae380 	call	ae38 <memset>
    9564:	8005883a 	mov	r2,r16
    9568:	80000c15 	stw	zero,48(r16)
    956c:	80000d15 	stw	zero,52(r16)
    9570:	80001115 	stw	zero,68(r16)
    9574:	80001215 	stw	zero,72(r16)
    9578:	dfc00417 	ldw	ra,16(sp)
    957c:	dcc00317 	ldw	r19,12(sp)
    9580:	dc800217 	ldw	r18,8(sp)
    9584:	dc400117 	ldw	r17,4(sp)
    9588:	dc000017 	ldw	r16,0(sp)
    958c:	dec00504 	addi	sp,sp,20
    9590:	f800283a 	ret
    9594:	9809883a 	mov	r4,r19
    9598:	01400104 	movi	r5,4
    959c:	00094380 	call	9438 <__sfmoreglue>
    95a0:	90800015 	stw	r2,0(r18)
    95a4:	103fde1e 	bne	r2,zero,9520 <__alt_mem_Flash_flash_data+0xf4009520>
    95a8:	00800304 	movi	r2,12
    95ac:	98800015 	stw	r2,0(r19)
    95b0:	0005883a 	mov	r2,zero
    95b4:	003ff006 	br	9578 <__alt_mem_Flash_flash_data+0xf4009578>

000095b8 <_cleanup>:
    95b8:	008000b4 	movhi	r2,2
    95bc:	10899904 	addi	r2,r2,9828
    95c0:	11000017 	ldw	r4,0(r2)
    95c4:	01400074 	movhi	r5,1
    95c8:	297bd204 	addi	r5,r5,-4280
    95cc:	0009fb81 	jmpi	9fb8 <_fwalk_reent>

000095d0 <__sinit>:
    95d0:	20800e17 	ldw	r2,56(r4)
    95d4:	10000126 	beq	r2,zero,95dc <__sinit+0xc>
    95d8:	f800283a 	ret
    95dc:	000929c1 	jmpi	929c <__sinit.part.1>

000095e0 <__sfp_lock_acquire>:
    95e0:	f800283a 	ret

000095e4 <__sfp_lock_release>:
    95e4:	f800283a 	ret

000095e8 <__sinit_lock_acquire>:
    95e8:	f800283a 	ret

000095ec <__sinit_lock_release>:
    95ec:	f800283a 	ret

000095f0 <__fp_lock_all>:
    95f0:	008000b4 	movhi	r2,2
    95f4:	10899a04 	addi	r2,r2,9832
    95f8:	11000017 	ldw	r4,0(r2)
    95fc:	01400074 	movhi	r5,1
    9600:	2964a004 	addi	r5,r5,-28032
    9604:	0009ef41 	jmpi	9ef4 <_fwalk>

00009608 <__fp_unlock_all>:
    9608:	008000b4 	movhi	r2,2
    960c:	10899a04 	addi	r2,r2,9832
    9610:	11000017 	ldw	r4,0(r2)
    9614:	01400074 	movhi	r5,1
    9618:	2964a204 	addi	r5,r5,-28024
    961c:	0009ef41 	jmpi	9ef4 <_fwalk>

00009620 <_malloc_trim_r>:
    9620:	defffb04 	addi	sp,sp,-20
    9624:	dcc00315 	stw	r19,12(sp)
    9628:	04c000b4 	movhi	r19,2
    962c:	dc800215 	stw	r18,8(sp)
    9630:	dc400115 	stw	r17,4(sp)
    9634:	dc000015 	stw	r16,0(sp)
    9638:	dfc00415 	stw	ra,16(sp)
    963c:	2821883a 	mov	r16,r5
    9640:	9cc32404 	addi	r19,r19,3216
    9644:	2025883a 	mov	r18,r4
    9648:	00134240 	call	13424 <__malloc_lock>
    964c:	98800217 	ldw	r2,8(r19)
    9650:	14400117 	ldw	r17,4(r2)
    9654:	00bfff04 	movi	r2,-4
    9658:	88a2703a 	and	r17,r17,r2
    965c:	8c21c83a 	sub	r16,r17,r16
    9660:	8403fbc4 	addi	r16,r16,4079
    9664:	8020d33a 	srli	r16,r16,12
    9668:	0083ffc4 	movi	r2,4095
    966c:	843fffc4 	addi	r16,r16,-1
    9670:	8020933a 	slli	r16,r16,12
    9674:	1400060e 	bge	r2,r16,9690 <_malloc_trim_r+0x70>
    9678:	9009883a 	mov	r4,r18
    967c:	000b883a 	mov	r5,zero
    9680:	000c4d80 	call	c4d8 <_sbrk_r>
    9684:	98c00217 	ldw	r3,8(r19)
    9688:	1c47883a 	add	r3,r3,r17
    968c:	10c00a26 	beq	r2,r3,96b8 <_malloc_trim_r+0x98>
    9690:	9009883a 	mov	r4,r18
    9694:	00135440 	call	13544 <__malloc_unlock>
    9698:	0005883a 	mov	r2,zero
    969c:	dfc00417 	ldw	ra,16(sp)
    96a0:	dcc00317 	ldw	r19,12(sp)
    96a4:	dc800217 	ldw	r18,8(sp)
    96a8:	dc400117 	ldw	r17,4(sp)
    96ac:	dc000017 	ldw	r16,0(sp)
    96b0:	dec00504 	addi	sp,sp,20
    96b4:	f800283a 	ret
    96b8:	9009883a 	mov	r4,r18
    96bc:	040bc83a 	sub	r5,zero,r16
    96c0:	000c4d80 	call	c4d8 <_sbrk_r>
    96c4:	00ffffc4 	movi	r3,-1
    96c8:	10c00d26 	beq	r2,r3,9700 <_malloc_trim_r+0xe0>
    96cc:	00c000b4 	movhi	r3,2
    96d0:	18d1d704 	addi	r3,r3,18268
    96d4:	18800017 	ldw	r2,0(r3)
    96d8:	99000217 	ldw	r4,8(r19)
    96dc:	8c23c83a 	sub	r17,r17,r16
    96e0:	8c400054 	ori	r17,r17,1
    96e4:	1421c83a 	sub	r16,r2,r16
    96e8:	24400115 	stw	r17,4(r4)
    96ec:	9009883a 	mov	r4,r18
    96f0:	1c000015 	stw	r16,0(r3)
    96f4:	00135440 	call	13544 <__malloc_unlock>
    96f8:	00800044 	movi	r2,1
    96fc:	003fe706 	br	969c <__alt_mem_Flash_flash_data+0xf400969c>
    9700:	9009883a 	mov	r4,r18
    9704:	000b883a 	mov	r5,zero
    9708:	000c4d80 	call	c4d8 <_sbrk_r>
    970c:	99000217 	ldw	r4,8(r19)
    9710:	014003c4 	movi	r5,15
    9714:	1107c83a 	sub	r3,r2,r4
    9718:	28ffdd0e 	bge	r5,r3,9690 <__alt_mem_Flash_flash_data+0xf4009690>
    971c:	014000b4 	movhi	r5,2
    9720:	29499c04 	addi	r5,r5,9840
    9724:	29400017 	ldw	r5,0(r5)
    9728:	18c00054 	ori	r3,r3,1
    972c:	20c00115 	stw	r3,4(r4)
    9730:	00c000b4 	movhi	r3,2
    9734:	1145c83a 	sub	r2,r2,r5
    9738:	18d1d704 	addi	r3,r3,18268
    973c:	18800015 	stw	r2,0(r3)
    9740:	003fd306 	br	9690 <__alt_mem_Flash_flash_data+0xf4009690>

00009744 <_free_r>:
    9744:	28004c26 	beq	r5,zero,9878 <_free_r+0x134>
    9748:	defffd04 	addi	sp,sp,-12
    974c:	dc400115 	stw	r17,4(sp)
    9750:	dc000015 	stw	r16,0(sp)
    9754:	2023883a 	mov	r17,r4
    9758:	2821883a 	mov	r16,r5
    975c:	dfc00215 	stw	ra,8(sp)
    9760:	00134240 	call	13424 <__malloc_lock>
    9764:	813fff17 	ldw	r4,-4(r16)
    9768:	00bfff84 	movi	r2,-2
    976c:	024000b4 	movhi	r9,2
    9770:	81bffe04 	addi	r6,r16,-8
    9774:	2084703a 	and	r2,r4,r2
    9778:	4a432404 	addi	r9,r9,3216
    977c:	308b883a 	add	r5,r6,r2
    9780:	2a000117 	ldw	r8,4(r5)
    9784:	49c00217 	ldw	r7,8(r9)
    9788:	00ffff04 	movi	r3,-4
    978c:	40c6703a 	and	r3,r8,r3
    9790:	39405326 	beq	r7,r5,98e0 <_free_r+0x19c>
    9794:	28c00115 	stw	r3,4(r5)
    9798:	2100004c 	andi	r4,r4,1
    979c:	2000091e 	bne	r4,zero,97c4 <_free_r+0x80>
    97a0:	81fffe17 	ldw	r7,-8(r16)
    97a4:	4a000204 	addi	r8,r9,8
    97a8:	31cdc83a 	sub	r6,r6,r7
    97ac:	31000217 	ldw	r4,8(r6)
    97b0:	11c5883a 	add	r2,r2,r7
    97b4:	22006126 	beq	r4,r8,993c <_free_r+0x1f8>
    97b8:	31c00317 	ldw	r7,12(r6)
    97bc:	21c00315 	stw	r7,12(r4)
    97c0:	39000215 	stw	r4,8(r7)
    97c4:	28c9883a 	add	r4,r5,r3
    97c8:	21c00117 	ldw	r7,4(r4)
    97cc:	39c0004c 	andi	r7,r7,1
    97d0:	38000d1e 	bne	r7,zero,9808 <_free_r+0xc4>
    97d4:	29000217 	ldw	r4,8(r5)
    97d8:	10c5883a 	add	r2,r2,r3
    97dc:	00c000b4 	movhi	r3,2
    97e0:	18c32604 	addi	r3,r3,3224
    97e4:	20c07526 	beq	r4,r3,99bc <_free_r+0x278>
    97e8:	29c00317 	ldw	r7,12(r5)
    97ec:	11400054 	ori	r5,r2,1
    97f0:	3087883a 	add	r3,r6,r2
    97f4:	21c00315 	stw	r7,12(r4)
    97f8:	39000215 	stw	r4,8(r7)
    97fc:	31400115 	stw	r5,4(r6)
    9800:	18800015 	stw	r2,0(r3)
    9804:	00000406 	br	9818 <_free_r+0xd4>
    9808:	10c00054 	ori	r3,r2,1
    980c:	30c00115 	stw	r3,4(r6)
    9810:	3087883a 	add	r3,r6,r2
    9814:	18800015 	stw	r2,0(r3)
    9818:	00c07fc4 	movi	r3,511
    981c:	18801736 	bltu	r3,r2,987c <_free_r+0x138>
    9820:	1004d0fa 	srli	r2,r2,3
    9824:	01400044 	movi	r5,1
    9828:	49000117 	ldw	r4,4(r9)
    982c:	1087883a 	add	r3,r2,r2
    9830:	18c7883a 	add	r3,r3,r3
    9834:	1005d0ba 	srai	r2,r2,2
    9838:	18c7883a 	add	r3,r3,r3
    983c:	1a47883a 	add	r3,r3,r9
    9840:	19c00217 	ldw	r7,8(r3)
    9844:	2884983a 	sll	r2,r5,r2
    9848:	30c00315 	stw	r3,12(r6)
    984c:	31c00215 	stw	r7,8(r6)
    9850:	1104b03a 	or	r2,r2,r4
    9854:	19800215 	stw	r6,8(r3)
    9858:	48800115 	stw	r2,4(r9)
    985c:	39800315 	stw	r6,12(r7)
    9860:	8809883a 	mov	r4,r17
    9864:	dfc00217 	ldw	ra,8(sp)
    9868:	dc400117 	ldw	r17,4(sp)
    986c:	dc000017 	ldw	r16,0(sp)
    9870:	dec00304 	addi	sp,sp,12
    9874:	00135441 	jmpi	13544 <__malloc_unlock>
    9878:	f800283a 	ret
    987c:	1006d27a 	srli	r3,r2,9
    9880:	01000104 	movi	r4,4
    9884:	20c04036 	bltu	r4,r3,9988 <_free_r+0x244>
    9888:	1006d1ba 	srli	r3,r2,6
    988c:	19400e04 	addi	r5,r3,56
    9890:	2947883a 	add	r3,r5,r5
    9894:	18c7883a 	add	r3,r3,r3
    9898:	18c7883a 	add	r3,r3,r3
    989c:	1a49883a 	add	r4,r3,r9
    98a0:	20c00217 	ldw	r3,8(r4)
    98a4:	01c000b4 	movhi	r7,2
    98a8:	39c32404 	addi	r7,r7,3216
    98ac:	19003b26 	beq	r3,r4,999c <_free_r+0x258>
    98b0:	01ffff04 	movi	r7,-4
    98b4:	19400117 	ldw	r5,4(r3)
    98b8:	29ca703a 	and	r5,r5,r7
    98bc:	1140022e 	bgeu	r2,r5,98c8 <_free_r+0x184>
    98c0:	18c00217 	ldw	r3,8(r3)
    98c4:	20fffb1e 	bne	r4,r3,98b4 <__alt_mem_Flash_flash_data+0xf40098b4>
    98c8:	18800317 	ldw	r2,12(r3)
    98cc:	30800315 	stw	r2,12(r6)
    98d0:	30c00215 	stw	r3,8(r6)
    98d4:	11800215 	stw	r6,8(r2)
    98d8:	19800315 	stw	r6,12(r3)
    98dc:	003fe006 	br	9860 <__alt_mem_Flash_flash_data+0xf4009860>
    98e0:	2100004c 	andi	r4,r4,1
    98e4:	1885883a 	add	r2,r3,r2
    98e8:	2000071e 	bne	r4,zero,9908 <_free_r+0x1c4>
    98ec:	817ffe17 	ldw	r5,-8(r16)
    98f0:	314dc83a 	sub	r6,r6,r5
    98f4:	30c00317 	ldw	r3,12(r6)
    98f8:	31000217 	ldw	r4,8(r6)
    98fc:	1145883a 	add	r2,r2,r5
    9900:	20c00315 	stw	r3,12(r4)
    9904:	19000215 	stw	r4,8(r3)
    9908:	10c00054 	ori	r3,r2,1
    990c:	30c00115 	stw	r3,4(r6)
    9910:	00c000b4 	movhi	r3,2
    9914:	18c99d04 	addi	r3,r3,9844
    9918:	18c00017 	ldw	r3,0(r3)
    991c:	49800215 	stw	r6,8(r9)
    9920:	10ffcf36 	bltu	r2,r3,9860 <__alt_mem_Flash_flash_data+0xf4009860>
    9924:	008000b4 	movhi	r2,2
    9928:	1091b504 	addi	r2,r2,18132
    992c:	11400017 	ldw	r5,0(r2)
    9930:	8809883a 	mov	r4,r17
    9934:	00096200 	call	9620 <_malloc_trim_r>
    9938:	003fc906 	br	9860 <__alt_mem_Flash_flash_data+0xf4009860>
    993c:	28c9883a 	add	r4,r5,r3
    9940:	21000117 	ldw	r4,4(r4)
    9944:	2100004c 	andi	r4,r4,1
    9948:	20000a1e 	bne	r4,zero,9974 <_free_r+0x230>
    994c:	29000317 	ldw	r4,12(r5)
    9950:	29400217 	ldw	r5,8(r5)
    9954:	10c5883a 	add	r2,r2,r3
    9958:	10c00054 	ori	r3,r2,1
    995c:	29000315 	stw	r4,12(r5)
    9960:	21400215 	stw	r5,8(r4)
    9964:	30c00115 	stw	r3,4(r6)
    9968:	308d883a 	add	r6,r6,r2
    996c:	30800015 	stw	r2,0(r6)
    9970:	003fbb06 	br	9860 <__alt_mem_Flash_flash_data+0xf4009860>
    9974:	10c00054 	ori	r3,r2,1
    9978:	30c00115 	stw	r3,4(r6)
    997c:	308d883a 	add	r6,r6,r2
    9980:	30800015 	stw	r2,0(r6)
    9984:	003fb606 	br	9860 <__alt_mem_Flash_flash_data+0xf4009860>
    9988:	01000504 	movi	r4,20
    998c:	20c01436 	bltu	r4,r3,99e0 <_free_r+0x29c>
    9990:	194016c4 	addi	r5,r3,91
    9994:	2947883a 	add	r3,r5,r5
    9998:	003fbe06 	br	9894 <__alt_mem_Flash_flash_data+0xf4009894>
    999c:	280bd0ba 	srai	r5,r5,2
    99a0:	00800044 	movi	r2,1
    99a4:	39000117 	ldw	r4,4(r7)
    99a8:	114a983a 	sll	r5,r2,r5
    99ac:	1805883a 	mov	r2,r3
    99b0:	2908b03a 	or	r4,r5,r4
    99b4:	39000115 	stw	r4,4(r7)
    99b8:	003fc406 	br	98cc <__alt_mem_Flash_flash_data+0xf40098cc>
    99bc:	49800515 	stw	r6,20(r9)
    99c0:	49800415 	stw	r6,16(r9)
    99c4:	10c00054 	ori	r3,r2,1
    99c8:	31000315 	stw	r4,12(r6)
    99cc:	31000215 	stw	r4,8(r6)
    99d0:	30c00115 	stw	r3,4(r6)
    99d4:	308d883a 	add	r6,r6,r2
    99d8:	30800015 	stw	r2,0(r6)
    99dc:	003fa006 	br	9860 <__alt_mem_Flash_flash_data+0xf4009860>
    99e0:	01001504 	movi	r4,84
    99e4:	20c00436 	bltu	r4,r3,99f8 <_free_r+0x2b4>
    99e8:	1006d33a 	srli	r3,r2,12
    99ec:	19401b84 	addi	r5,r3,110
    99f0:	2947883a 	add	r3,r5,r5
    99f4:	003fa706 	br	9894 <__alt_mem_Flash_flash_data+0xf4009894>
    99f8:	01005504 	movi	r4,340
    99fc:	20c00436 	bltu	r4,r3,9a10 <_free_r+0x2cc>
    9a00:	1006d3fa 	srli	r3,r2,15
    9a04:	19401dc4 	addi	r5,r3,119
    9a08:	2947883a 	add	r3,r5,r5
    9a0c:	003fa106 	br	9894 <__alt_mem_Flash_flash_data+0xf4009894>
    9a10:	01015504 	movi	r4,1364
    9a14:	20c00436 	bltu	r4,r3,9a28 <_free_r+0x2e4>
    9a18:	1006d4ba 	srli	r3,r2,18
    9a1c:	19401f04 	addi	r5,r3,124
    9a20:	2947883a 	add	r3,r5,r5
    9a24:	003f9b06 	br	9894 <__alt_mem_Flash_flash_data+0xf4009894>
    9a28:	00c03f04 	movi	r3,252
    9a2c:	01401f84 	movi	r5,126
    9a30:	003f9806 	br	9894 <__alt_mem_Flash_flash_data+0xf4009894>

00009a34 <__sfvwrite_r>:
    9a34:	30800217 	ldw	r2,8(r6)
    9a38:	10006726 	beq	r2,zero,9bd8 <__sfvwrite_r+0x1a4>
    9a3c:	defff404 	addi	sp,sp,-48
    9a40:	dd000615 	stw	r20,24(sp)
    9a44:	2029883a 	mov	r20,r4
    9a48:	2900030b 	ldhu	r4,12(r5)
    9a4c:	ddc00915 	stw	r23,36(sp)
    9a50:	dc000215 	stw	r16,8(sp)
    9a54:	dfc00b15 	stw	ra,44(sp)
    9a58:	df000a15 	stw	fp,40(sp)
    9a5c:	dd800815 	stw	r22,32(sp)
    9a60:	dd400715 	stw	r21,28(sp)
    9a64:	dcc00515 	stw	r19,20(sp)
    9a68:	dc800415 	stw	r18,16(sp)
    9a6c:	dc400315 	stw	r17,12(sp)
    9a70:	2080020c 	andi	r2,r4,8
    9a74:	2821883a 	mov	r16,r5
    9a78:	302f883a 	mov	r23,r6
    9a7c:	10002726 	beq	r2,zero,9b1c <__sfvwrite_r+0xe8>
    9a80:	28800417 	ldw	r2,16(r5)
    9a84:	10002526 	beq	r2,zero,9b1c <__sfvwrite_r+0xe8>
    9a88:	2080008c 	andi	r2,r4,2
    9a8c:	bc400017 	ldw	r17,0(r23)
    9a90:	10002a26 	beq	r2,zero,9b3c <__sfvwrite_r+0x108>
    9a94:	05600034 	movhi	r21,32768
    9a98:	0027883a 	mov	r19,zero
    9a9c:	0025883a 	mov	r18,zero
    9aa0:	ad7f0004 	addi	r21,r21,-1024
    9aa4:	980d883a 	mov	r6,r19
    9aa8:	a009883a 	mov	r4,r20
    9aac:	90004626 	beq	r18,zero,9bc8 <__sfvwrite_r+0x194>
    9ab0:	900f883a 	mov	r7,r18
    9ab4:	81400717 	ldw	r5,28(r16)
    9ab8:	ac80022e 	bgeu	r21,r18,9ac4 <__sfvwrite_r+0x90>
    9abc:	01e00034 	movhi	r7,32768
    9ac0:	39ff0004 	addi	r7,r7,-1024
    9ac4:	80800917 	ldw	r2,36(r16)
    9ac8:	103ee83a 	callr	r2
    9acc:	0080520e 	bge	zero,r2,9c18 <__sfvwrite_r+0x1e4>
    9ad0:	b8c00217 	ldw	r3,8(r23)
    9ad4:	98a7883a 	add	r19,r19,r2
    9ad8:	90a5c83a 	sub	r18,r18,r2
    9adc:	1885c83a 	sub	r2,r3,r2
    9ae0:	b8800215 	stw	r2,8(r23)
    9ae4:	103fef1e 	bne	r2,zero,9aa4 <__alt_mem_Flash_flash_data+0xf4009aa4>
    9ae8:	0005883a 	mov	r2,zero
    9aec:	dfc00b17 	ldw	ra,44(sp)
    9af0:	df000a17 	ldw	fp,40(sp)
    9af4:	ddc00917 	ldw	r23,36(sp)
    9af8:	dd800817 	ldw	r22,32(sp)
    9afc:	dd400717 	ldw	r21,28(sp)
    9b00:	dd000617 	ldw	r20,24(sp)
    9b04:	dcc00517 	ldw	r19,20(sp)
    9b08:	dc800417 	ldw	r18,16(sp)
    9b0c:	dc400317 	ldw	r17,12(sp)
    9b10:	dc000217 	ldw	r16,8(sp)
    9b14:	dec00c04 	addi	sp,sp,48
    9b18:	f800283a 	ret
    9b1c:	a009883a 	mov	r4,r20
    9b20:	800b883a 	mov	r5,r16
    9b24:	00075700 	call	7570 <__swsetup_r>
    9b28:	1000ec1e 	bne	r2,zero,9edc <__sfvwrite_r+0x4a8>
    9b2c:	8100030b 	ldhu	r4,12(r16)
    9b30:	bc400017 	ldw	r17,0(r23)
    9b34:	2080008c 	andi	r2,r4,2
    9b38:	103fd61e 	bne	r2,zero,9a94 <__alt_mem_Flash_flash_data+0xf4009a94>
    9b3c:	2080004c 	andi	r2,r4,1
    9b40:	10003a1e 	bne	r2,zero,9c2c <__sfvwrite_r+0x1f8>
    9b44:	0039883a 	mov	fp,zero
    9b48:	0025883a 	mov	r18,zero
    9b4c:	90001a26 	beq	r18,zero,9bb8 <__sfvwrite_r+0x184>
    9b50:	2080800c 	andi	r2,r4,512
    9b54:	85800217 	ldw	r22,8(r16)
    9b58:	10007626 	beq	r2,zero,9d34 <__sfvwrite_r+0x300>
    9b5c:	b027883a 	mov	r19,r22
    9b60:	95809436 	bltu	r18,r22,9db4 <__sfvwrite_r+0x380>
    9b64:	2081200c 	andi	r2,r4,1152
    9b68:	10009f1e 	bne	r2,zero,9de8 <__sfvwrite_r+0x3b4>
    9b6c:	81000017 	ldw	r4,0(r16)
    9b70:	e00b883a 	mov	r5,fp
    9b74:	980d883a 	mov	r6,r19
    9b78:	000acdc0 	call	acdc <memmove>
    9b7c:	81000217 	ldw	r4,8(r16)
    9b80:	81400017 	ldw	r5,0(r16)
    9b84:	9005883a 	mov	r2,r18
    9b88:	2587c83a 	sub	r3,r4,r22
    9b8c:	2ce7883a 	add	r19,r5,r19
    9b90:	80c00215 	stw	r3,8(r16)
    9b94:	84c00015 	stw	r19,0(r16)
    9b98:	b8c00217 	ldw	r3,8(r23)
    9b9c:	e0b9883a 	add	fp,fp,r2
    9ba0:	90a5c83a 	sub	r18,r18,r2
    9ba4:	1885c83a 	sub	r2,r3,r2
    9ba8:	b8800215 	stw	r2,8(r23)
    9bac:	103fce26 	beq	r2,zero,9ae8 <__alt_mem_Flash_flash_data+0xf4009ae8>
    9bb0:	8100030b 	ldhu	r4,12(r16)
    9bb4:	903fe61e 	bne	r18,zero,9b50 <__alt_mem_Flash_flash_data+0xf4009b50>
    9bb8:	8f000017 	ldw	fp,0(r17)
    9bbc:	8c800117 	ldw	r18,4(r17)
    9bc0:	8c400204 	addi	r17,r17,8
    9bc4:	003fe106 	br	9b4c <__alt_mem_Flash_flash_data+0xf4009b4c>
    9bc8:	8cc00017 	ldw	r19,0(r17)
    9bcc:	8c800117 	ldw	r18,4(r17)
    9bd0:	8c400204 	addi	r17,r17,8
    9bd4:	003fb306 	br	9aa4 <__alt_mem_Flash_flash_data+0xf4009aa4>
    9bd8:	0005883a 	mov	r2,zero
    9bdc:	f800283a 	ret
    9be0:	00a00034 	movhi	r2,32768
    9be4:	10bfffc4 	addi	r2,r2,-1
    9be8:	9009883a 	mov	r4,r18
    9bec:	1480012e 	bgeu	r2,r18,9bf4 <__sfvwrite_r+0x1c0>
    9bf0:	1009883a 	mov	r4,r2
    9bf4:	980b883a 	mov	r5,r19
    9bf8:	00102880 	call	10288 <__divsi3>
    9bfc:	81400717 	ldw	r5,28(r16)
    9c00:	80c00917 	ldw	r3,36(r16)
    9c04:	988f383a 	mul	r7,r19,r2
    9c08:	a009883a 	mov	r4,r20
    9c0c:	e00d883a 	mov	r6,fp
    9c10:	183ee83a 	callr	r3
    9c14:	00bfe016 	blt	zero,r2,9b98 <__alt_mem_Flash_flash_data+0xf4009b98>
    9c18:	8080030b 	ldhu	r2,12(r16)
    9c1c:	10801014 	ori	r2,r2,64
    9c20:	8080030d 	sth	r2,12(r16)
    9c24:	00bfffc4 	movi	r2,-1
    9c28:	003fb006 	br	9aec <__alt_mem_Flash_flash_data+0xf4009aec>
    9c2c:	0027883a 	mov	r19,zero
    9c30:	0011883a 	mov	r8,zero
    9c34:	0039883a 	mov	fp,zero
    9c38:	0025883a 	mov	r18,zero
    9c3c:	90001f26 	beq	r18,zero,9cbc <__sfvwrite_r+0x288>
    9c40:	40006026 	beq	r8,zero,9dc4 <__sfvwrite_r+0x390>
    9c44:	982b883a 	mov	r21,r19
    9c48:	94c0012e 	bgeu	r18,r19,9c50 <__sfvwrite_r+0x21c>
    9c4c:	902b883a 	mov	r21,r18
    9c50:	81000017 	ldw	r4,0(r16)
    9c54:	80800417 	ldw	r2,16(r16)
    9c58:	a82d883a 	mov	r22,r21
    9c5c:	81800217 	ldw	r6,8(r16)
    9c60:	81c00517 	ldw	r7,20(r16)
    9c64:	1100022e 	bgeu	r2,r4,9c70 <__sfvwrite_r+0x23c>
    9c68:	31c7883a 	add	r3,r6,r7
    9c6c:	1d401816 	blt	r3,r21,9cd0 <__sfvwrite_r+0x29c>
    9c70:	a9c04416 	blt	r21,r7,9d84 <__sfvwrite_r+0x350>
    9c74:	80800917 	ldw	r2,36(r16)
    9c78:	81400717 	ldw	r5,28(r16)
    9c7c:	a009883a 	mov	r4,r20
    9c80:	da000115 	stw	r8,4(sp)
    9c84:	e00d883a 	mov	r6,fp
    9c88:	103ee83a 	callr	r2
    9c8c:	102d883a 	mov	r22,r2
    9c90:	da000117 	ldw	r8,4(sp)
    9c94:	00bfe00e 	bge	zero,r2,9c18 <__alt_mem_Flash_flash_data+0xf4009c18>
    9c98:	9da7c83a 	sub	r19,r19,r22
    9c9c:	98001f26 	beq	r19,zero,9d1c <__sfvwrite_r+0x2e8>
    9ca0:	b8800217 	ldw	r2,8(r23)
    9ca4:	e5b9883a 	add	fp,fp,r22
    9ca8:	95a5c83a 	sub	r18,r18,r22
    9cac:	15adc83a 	sub	r22,r2,r22
    9cb0:	bd800215 	stw	r22,8(r23)
    9cb4:	b03f8c26 	beq	r22,zero,9ae8 <__alt_mem_Flash_flash_data+0xf4009ae8>
    9cb8:	903fe11e 	bne	r18,zero,9c40 <__alt_mem_Flash_flash_data+0xf4009c40>
    9cbc:	8f000017 	ldw	fp,0(r17)
    9cc0:	8c800117 	ldw	r18,4(r17)
    9cc4:	0011883a 	mov	r8,zero
    9cc8:	8c400204 	addi	r17,r17,8
    9ccc:	003fdb06 	br	9c3c <__alt_mem_Flash_flash_data+0xf4009c3c>
    9cd0:	180d883a 	mov	r6,r3
    9cd4:	e00b883a 	mov	r5,fp
    9cd8:	da000115 	stw	r8,4(sp)
    9cdc:	d8c00015 	stw	r3,0(sp)
    9ce0:	000acdc0 	call	acdc <memmove>
    9ce4:	d8c00017 	ldw	r3,0(sp)
    9ce8:	80800017 	ldw	r2,0(r16)
    9cec:	a009883a 	mov	r4,r20
    9cf0:	800b883a 	mov	r5,r16
    9cf4:	10c5883a 	add	r2,r2,r3
    9cf8:	80800015 	stw	r2,0(r16)
    9cfc:	d8c00015 	stw	r3,0(sp)
    9d00:	00091f40 	call	91f4 <_fflush_r>
    9d04:	d8c00017 	ldw	r3,0(sp)
    9d08:	da000117 	ldw	r8,4(sp)
    9d0c:	103fc21e 	bne	r2,zero,9c18 <__alt_mem_Flash_flash_data+0xf4009c18>
    9d10:	182d883a 	mov	r22,r3
    9d14:	9da7c83a 	sub	r19,r19,r22
    9d18:	983fe11e 	bne	r19,zero,9ca0 <__alt_mem_Flash_flash_data+0xf4009ca0>
    9d1c:	a009883a 	mov	r4,r20
    9d20:	800b883a 	mov	r5,r16
    9d24:	00091f40 	call	91f4 <_fflush_r>
    9d28:	103fbb1e 	bne	r2,zero,9c18 <__alt_mem_Flash_flash_data+0xf4009c18>
    9d2c:	0011883a 	mov	r8,zero
    9d30:	003fdb06 	br	9ca0 <__alt_mem_Flash_flash_data+0xf4009ca0>
    9d34:	81000017 	ldw	r4,0(r16)
    9d38:	80800417 	ldw	r2,16(r16)
    9d3c:	11000236 	bltu	r2,r4,9d48 <__sfvwrite_r+0x314>
    9d40:	84c00517 	ldw	r19,20(r16)
    9d44:	94ffa62e 	bgeu	r18,r19,9be0 <__alt_mem_Flash_flash_data+0xf4009be0>
    9d48:	9027883a 	mov	r19,r18
    9d4c:	b480012e 	bgeu	r22,r18,9d54 <__sfvwrite_r+0x320>
    9d50:	b027883a 	mov	r19,r22
    9d54:	e00b883a 	mov	r5,fp
    9d58:	980d883a 	mov	r6,r19
    9d5c:	000acdc0 	call	acdc <memmove>
    9d60:	80800217 	ldw	r2,8(r16)
    9d64:	80c00017 	ldw	r3,0(r16)
    9d68:	14c5c83a 	sub	r2,r2,r19
    9d6c:	1cc7883a 	add	r3,r3,r19
    9d70:	80800215 	stw	r2,8(r16)
    9d74:	80c00015 	stw	r3,0(r16)
    9d78:	10004326 	beq	r2,zero,9e88 <__sfvwrite_r+0x454>
    9d7c:	9805883a 	mov	r2,r19
    9d80:	003f8506 	br	9b98 <__alt_mem_Flash_flash_data+0xf4009b98>
    9d84:	a80d883a 	mov	r6,r21
    9d88:	e00b883a 	mov	r5,fp
    9d8c:	da000115 	stw	r8,4(sp)
    9d90:	000acdc0 	call	acdc <memmove>
    9d94:	80800217 	ldw	r2,8(r16)
    9d98:	80c00017 	ldw	r3,0(r16)
    9d9c:	da000117 	ldw	r8,4(sp)
    9da0:	1545c83a 	sub	r2,r2,r21
    9da4:	1d6b883a 	add	r21,r3,r21
    9da8:	80800215 	stw	r2,8(r16)
    9dac:	85400015 	stw	r21,0(r16)
    9db0:	003fb906 	br	9c98 <__alt_mem_Flash_flash_data+0xf4009c98>
    9db4:	81000017 	ldw	r4,0(r16)
    9db8:	902d883a 	mov	r22,r18
    9dbc:	9027883a 	mov	r19,r18
    9dc0:	003f6b06 	br	9b70 <__alt_mem_Flash_flash_data+0xf4009b70>
    9dc4:	e009883a 	mov	r4,fp
    9dc8:	01400284 	movi	r5,10
    9dcc:	900d883a 	mov	r6,r18
    9dd0:	000aabc0 	call	aabc <memchr>
    9dd4:	10003e26 	beq	r2,zero,9ed0 <__sfvwrite_r+0x49c>
    9dd8:	10800044 	addi	r2,r2,1
    9ddc:	1727c83a 	sub	r19,r2,fp
    9de0:	02000044 	movi	r8,1
    9de4:	003f9706 	br	9c44 <__alt_mem_Flash_flash_data+0xf4009c44>
    9de8:	80800517 	ldw	r2,20(r16)
    9dec:	81400417 	ldw	r5,16(r16)
    9df0:	80c00017 	ldw	r3,0(r16)
    9df4:	10a7883a 	add	r19,r2,r2
    9df8:	9885883a 	add	r2,r19,r2
    9dfc:	1026d7fa 	srli	r19,r2,31
    9e00:	196bc83a 	sub	r21,r3,r5
    9e04:	a9800044 	addi	r6,r21,1
    9e08:	9885883a 	add	r2,r19,r2
    9e0c:	1027d07a 	srai	r19,r2,1
    9e10:	3485883a 	add	r2,r6,r18
    9e14:	980d883a 	mov	r6,r19
    9e18:	9880022e 	bgeu	r19,r2,9e24 <__sfvwrite_r+0x3f0>
    9e1c:	1027883a 	mov	r19,r2
    9e20:	100d883a 	mov	r6,r2
    9e24:	2101000c 	andi	r4,r4,1024
    9e28:	20001c26 	beq	r4,zero,9e9c <__sfvwrite_r+0x468>
    9e2c:	a009883a 	mov	r4,r20
    9e30:	300b883a 	mov	r5,r6
    9e34:	000a3140 	call	a314 <_malloc_r>
    9e38:	102d883a 	mov	r22,r2
    9e3c:	10002926 	beq	r2,zero,9ee4 <__sfvwrite_r+0x4b0>
    9e40:	81400417 	ldw	r5,16(r16)
    9e44:	1009883a 	mov	r4,r2
    9e48:	a80d883a 	mov	r6,r21
    9e4c:	000aba40 	call	aba4 <memcpy>
    9e50:	8080030b 	ldhu	r2,12(r16)
    9e54:	00fedfc4 	movi	r3,-1153
    9e58:	10c4703a 	and	r2,r2,r3
    9e5c:	10802014 	ori	r2,r2,128
    9e60:	8080030d 	sth	r2,12(r16)
    9e64:	b549883a 	add	r4,r22,r21
    9e68:	9d4bc83a 	sub	r5,r19,r21
    9e6c:	85800415 	stw	r22,16(r16)
    9e70:	84c00515 	stw	r19,20(r16)
    9e74:	81000015 	stw	r4,0(r16)
    9e78:	902d883a 	mov	r22,r18
    9e7c:	81400215 	stw	r5,8(r16)
    9e80:	9027883a 	mov	r19,r18
    9e84:	003f3a06 	br	9b70 <__alt_mem_Flash_flash_data+0xf4009b70>
    9e88:	a009883a 	mov	r4,r20
    9e8c:	800b883a 	mov	r5,r16
    9e90:	00091f40 	call	91f4 <_fflush_r>
    9e94:	103fb926 	beq	r2,zero,9d7c <__alt_mem_Flash_flash_data+0xf4009d7c>
    9e98:	003f5f06 	br	9c18 <__alt_mem_Flash_flash_data+0xf4009c18>
    9e9c:	a009883a 	mov	r4,r20
    9ea0:	000befc0 	call	befc <_realloc_r>
    9ea4:	102d883a 	mov	r22,r2
    9ea8:	103fee1e 	bne	r2,zero,9e64 <__alt_mem_Flash_flash_data+0xf4009e64>
    9eac:	81400417 	ldw	r5,16(r16)
    9eb0:	a009883a 	mov	r4,r20
    9eb4:	00097440 	call	9744 <_free_r>
    9eb8:	8080030b 	ldhu	r2,12(r16)
    9ebc:	00ffdfc4 	movi	r3,-129
    9ec0:	1884703a 	and	r2,r3,r2
    9ec4:	00c00304 	movi	r3,12
    9ec8:	a0c00015 	stw	r3,0(r20)
    9ecc:	003f5306 	br	9c1c <__alt_mem_Flash_flash_data+0xf4009c1c>
    9ed0:	94c00044 	addi	r19,r18,1
    9ed4:	02000044 	movi	r8,1
    9ed8:	003f5a06 	br	9c44 <__alt_mem_Flash_flash_data+0xf4009c44>
    9edc:	00bfffc4 	movi	r2,-1
    9ee0:	003f0206 	br	9aec <__alt_mem_Flash_flash_data+0xf4009aec>
    9ee4:	00800304 	movi	r2,12
    9ee8:	a0800015 	stw	r2,0(r20)
    9eec:	8080030b 	ldhu	r2,12(r16)
    9ef0:	003f4a06 	br	9c1c <__alt_mem_Flash_flash_data+0xf4009c1c>

00009ef4 <_fwalk>:
    9ef4:	defff704 	addi	sp,sp,-36
    9ef8:	dd000415 	stw	r20,16(sp)
    9efc:	dfc00815 	stw	ra,32(sp)
    9f00:	ddc00715 	stw	r23,28(sp)
    9f04:	dd800615 	stw	r22,24(sp)
    9f08:	dd400515 	stw	r21,20(sp)
    9f0c:	dcc00315 	stw	r19,12(sp)
    9f10:	dc800215 	stw	r18,8(sp)
    9f14:	dc400115 	stw	r17,4(sp)
    9f18:	dc000015 	stw	r16,0(sp)
    9f1c:	2500b804 	addi	r20,r4,736
    9f20:	a0002326 	beq	r20,zero,9fb0 <_fwalk+0xbc>
    9f24:	282b883a 	mov	r21,r5
    9f28:	002f883a 	mov	r23,zero
    9f2c:	05800044 	movi	r22,1
    9f30:	04ffffc4 	movi	r19,-1
    9f34:	a4400117 	ldw	r17,4(r20)
    9f38:	a4800217 	ldw	r18,8(r20)
    9f3c:	8c7fffc4 	addi	r17,r17,-1
    9f40:	88000d16 	blt	r17,zero,9f78 <_fwalk+0x84>
    9f44:	94000304 	addi	r16,r18,12
    9f48:	94800384 	addi	r18,r18,14
    9f4c:	80c0000b 	ldhu	r3,0(r16)
    9f50:	8c7fffc4 	addi	r17,r17,-1
    9f54:	813ffd04 	addi	r4,r16,-12
    9f58:	b0c0042e 	bgeu	r22,r3,9f6c <_fwalk+0x78>
    9f5c:	90c0000f 	ldh	r3,0(r18)
    9f60:	1cc00226 	beq	r3,r19,9f6c <_fwalk+0x78>
    9f64:	a83ee83a 	callr	r21
    9f68:	b8aeb03a 	or	r23,r23,r2
    9f6c:	84001a04 	addi	r16,r16,104
    9f70:	94801a04 	addi	r18,r18,104
    9f74:	8cfff51e 	bne	r17,r19,9f4c <__alt_mem_Flash_flash_data+0xf4009f4c>
    9f78:	a5000017 	ldw	r20,0(r20)
    9f7c:	a03fed1e 	bne	r20,zero,9f34 <__alt_mem_Flash_flash_data+0xf4009f34>
    9f80:	b805883a 	mov	r2,r23
    9f84:	dfc00817 	ldw	ra,32(sp)
    9f88:	ddc00717 	ldw	r23,28(sp)
    9f8c:	dd800617 	ldw	r22,24(sp)
    9f90:	dd400517 	ldw	r21,20(sp)
    9f94:	dd000417 	ldw	r20,16(sp)
    9f98:	dcc00317 	ldw	r19,12(sp)
    9f9c:	dc800217 	ldw	r18,8(sp)
    9fa0:	dc400117 	ldw	r17,4(sp)
    9fa4:	dc000017 	ldw	r16,0(sp)
    9fa8:	dec00904 	addi	sp,sp,36
    9fac:	f800283a 	ret
    9fb0:	002f883a 	mov	r23,zero
    9fb4:	003ff206 	br	9f80 <__alt_mem_Flash_flash_data+0xf4009f80>

00009fb8 <_fwalk_reent>:
    9fb8:	defff704 	addi	sp,sp,-36
    9fbc:	dd400515 	stw	r21,20(sp)
    9fc0:	dfc00815 	stw	ra,32(sp)
    9fc4:	ddc00715 	stw	r23,28(sp)
    9fc8:	dd800615 	stw	r22,24(sp)
    9fcc:	dd000415 	stw	r20,16(sp)
    9fd0:	dcc00315 	stw	r19,12(sp)
    9fd4:	dc800215 	stw	r18,8(sp)
    9fd8:	dc400115 	stw	r17,4(sp)
    9fdc:	dc000015 	stw	r16,0(sp)
    9fe0:	2540b804 	addi	r21,r4,736
    9fe4:	a8002326 	beq	r21,zero,a074 <_fwalk_reent+0xbc>
    9fe8:	2829883a 	mov	r20,r5
    9fec:	202d883a 	mov	r22,r4
    9ff0:	002f883a 	mov	r23,zero
    9ff4:	04c00044 	movi	r19,1
    9ff8:	04bfffc4 	movi	r18,-1
    9ffc:	ac400117 	ldw	r17,4(r21)
    a000:	ac000217 	ldw	r16,8(r21)
    a004:	8c7fffc4 	addi	r17,r17,-1
    a008:	88000c16 	blt	r17,zero,a03c <_fwalk_reent+0x84>
    a00c:	84000304 	addi	r16,r16,12
    a010:	80c0000b 	ldhu	r3,0(r16)
    a014:	8c7fffc4 	addi	r17,r17,-1
    a018:	817ffd04 	addi	r5,r16,-12
    a01c:	98c0052e 	bgeu	r19,r3,a034 <_fwalk_reent+0x7c>
    a020:	80c0008f 	ldh	r3,2(r16)
    a024:	b009883a 	mov	r4,r22
    a028:	1c800226 	beq	r3,r18,a034 <_fwalk_reent+0x7c>
    a02c:	a03ee83a 	callr	r20
    a030:	b8aeb03a 	or	r23,r23,r2
    a034:	84001a04 	addi	r16,r16,104
    a038:	8cbff51e 	bne	r17,r18,a010 <__alt_mem_Flash_flash_data+0xf400a010>
    a03c:	ad400017 	ldw	r21,0(r21)
    a040:	a83fee1e 	bne	r21,zero,9ffc <__alt_mem_Flash_flash_data+0xf4009ffc>
    a044:	b805883a 	mov	r2,r23
    a048:	dfc00817 	ldw	ra,32(sp)
    a04c:	ddc00717 	ldw	r23,28(sp)
    a050:	dd800617 	ldw	r22,24(sp)
    a054:	dd400517 	ldw	r21,20(sp)
    a058:	dd000417 	ldw	r20,16(sp)
    a05c:	dcc00317 	ldw	r19,12(sp)
    a060:	dc800217 	ldw	r18,8(sp)
    a064:	dc400117 	ldw	r17,4(sp)
    a068:	dc000017 	ldw	r16,0(sp)
    a06c:	dec00904 	addi	sp,sp,36
    a070:	f800283a 	ret
    a074:	002f883a 	mov	r23,zero
    a078:	003ff206 	br	a044 <__alt_mem_Flash_flash_data+0xf400a044>

0000a07c <_setlocale_r>:
    a07c:	30001b26 	beq	r6,zero,a0ec <_setlocale_r+0x70>
    a080:	014000b4 	movhi	r5,2
    a084:	defffe04 	addi	sp,sp,-8
    a088:	2940a604 	addi	r5,r5,664
    a08c:	3009883a 	mov	r4,r6
    a090:	dc000015 	stw	r16,0(sp)
    a094:	dfc00115 	stw	ra,4(sp)
    a098:	3021883a 	mov	r16,r6
    a09c:	000c6680 	call	c668 <strcmp>
    a0a0:	1000061e 	bne	r2,zero,a0bc <_setlocale_r+0x40>
    a0a4:	008000b4 	movhi	r2,2
    a0a8:	1080a504 	addi	r2,r2,660
    a0ac:	dfc00117 	ldw	ra,4(sp)
    a0b0:	dc000017 	ldw	r16,0(sp)
    a0b4:	dec00204 	addi	sp,sp,8
    a0b8:	f800283a 	ret
    a0bc:	014000b4 	movhi	r5,2
    a0c0:	2940a504 	addi	r5,r5,660
    a0c4:	8009883a 	mov	r4,r16
    a0c8:	000c6680 	call	c668 <strcmp>
    a0cc:	103ff526 	beq	r2,zero,a0a4 <__alt_mem_Flash_flash_data+0xf400a0a4>
    a0d0:	014000b4 	movhi	r5,2
    a0d4:	29408804 	addi	r5,r5,544
    a0d8:	8009883a 	mov	r4,r16
    a0dc:	000c6680 	call	c668 <strcmp>
    a0e0:	103ff026 	beq	r2,zero,a0a4 <__alt_mem_Flash_flash_data+0xf400a0a4>
    a0e4:	0005883a 	mov	r2,zero
    a0e8:	003ff006 	br	a0ac <__alt_mem_Flash_flash_data+0xf400a0ac>
    a0ec:	008000b4 	movhi	r2,2
    a0f0:	1080a504 	addi	r2,r2,660
    a0f4:	f800283a 	ret

0000a0f8 <__locale_charset>:
    a0f8:	008000b4 	movhi	r2,2
    a0fc:	10830e04 	addi	r2,r2,3128
    a100:	f800283a 	ret

0000a104 <__locale_mb_cur_max>:
    a104:	008000b4 	movhi	r2,2
    a108:	10899b04 	addi	r2,r2,9836
    a10c:	10800017 	ldw	r2,0(r2)
    a110:	f800283a 	ret

0000a114 <__locale_msgcharset>:
    a114:	008000b4 	movhi	r2,2
    a118:	10830604 	addi	r2,r2,3096
    a11c:	f800283a 	ret

0000a120 <__locale_cjk_lang>:
    a120:	0005883a 	mov	r2,zero
    a124:	f800283a 	ret

0000a128 <_localeconv_r>:
    a128:	008000b4 	movhi	r2,2
    a12c:	10831604 	addi	r2,r2,3160
    a130:	f800283a 	ret

0000a134 <setlocale>:
    a134:	00c000b4 	movhi	r3,2
    a138:	18c99a04 	addi	r3,r3,9832
    a13c:	2005883a 	mov	r2,r4
    a140:	19000017 	ldw	r4,0(r3)
    a144:	280d883a 	mov	r6,r5
    a148:	100b883a 	mov	r5,r2
    a14c:	000a07c1 	jmpi	a07c <_setlocale_r>

0000a150 <localeconv>:
    a150:	008000b4 	movhi	r2,2
    a154:	10831604 	addi	r2,r2,3160
    a158:	f800283a 	ret

0000a15c <__smakebuf_r>:
    a15c:	2880030b 	ldhu	r2,12(r5)
    a160:	10c0008c 	andi	r3,r2,2
    a164:	1800401e 	bne	r3,zero,a268 <__smakebuf_r+0x10c>
    a168:	deffec04 	addi	sp,sp,-80
    a16c:	dc000f15 	stw	r16,60(sp)
    a170:	2821883a 	mov	r16,r5
    a174:	2940038f 	ldh	r5,14(r5)
    a178:	dc401015 	stw	r17,64(sp)
    a17c:	dfc01315 	stw	ra,76(sp)
    a180:	dcc01215 	stw	r19,72(sp)
    a184:	dc801115 	stw	r18,68(sp)
    a188:	2023883a 	mov	r17,r4
    a18c:	28001b16 	blt	r5,zero,a1fc <__smakebuf_r+0xa0>
    a190:	d80d883a 	mov	r6,sp
    a194:	000f22c0 	call	f22c <_fstat_r>
    a198:	10001716 	blt	r2,zero,a1f8 <__smakebuf_r+0x9c>
    a19c:	d8800117 	ldw	r2,4(sp)
    a1a0:	00e00014 	movui	r3,32768
    a1a4:	10bc000c 	andi	r2,r2,61440
    a1a8:	10c03726 	beq	r2,r3,a288 <__smakebuf_r+0x12c>
    a1ac:	80c0030b 	ldhu	r3,12(r16)
    a1b0:	18c20014 	ori	r3,r3,2048
    a1b4:	80c0030d 	sth	r3,12(r16)
    a1b8:	00c80004 	movi	r3,8192
    a1bc:	10c03c1e 	bne	r2,r3,a2b0 <__smakebuf_r+0x154>
    a1c0:	8140038f 	ldh	r5,14(r16)
    a1c4:	8809883a 	mov	r4,r17
    a1c8:	000f2840 	call	f284 <_isatty_r>
    a1cc:	10004e26 	beq	r2,zero,a308 <__smakebuf_r+0x1ac>
    a1d0:	8080030b 	ldhu	r2,12(r16)
    a1d4:	04c00044 	movi	r19,1
    a1d8:	80c010c4 	addi	r3,r16,67
    a1dc:	14c4b03a 	or	r2,r2,r19
    a1e0:	8080030d 	sth	r2,12(r16)
    a1e4:	80c00015 	stw	r3,0(r16)
    a1e8:	80c00415 	stw	r3,16(r16)
    a1ec:	84c00515 	stw	r19,20(r16)
    a1f0:	04810004 	movi	r18,1024
    a1f4:	00000706 	br	a214 <__smakebuf_r+0xb8>
    a1f8:	8080030b 	ldhu	r2,12(r16)
    a1fc:	10c0200c 	andi	r3,r2,128
    a200:	18001f1e 	bne	r3,zero,a280 <__smakebuf_r+0x124>
    a204:	04810004 	movi	r18,1024
    a208:	10820014 	ori	r2,r2,2048
    a20c:	8080030d 	sth	r2,12(r16)
    a210:	0027883a 	mov	r19,zero
    a214:	8809883a 	mov	r4,r17
    a218:	900b883a 	mov	r5,r18
    a21c:	000a3140 	call	a314 <_malloc_r>
    a220:	10002e26 	beq	r2,zero,a2dc <__smakebuf_r+0x180>
    a224:	80c0030b 	ldhu	r3,12(r16)
    a228:	01000074 	movhi	r4,1
    a22c:	2124a404 	addi	r4,r4,-28016
    a230:	89000f15 	stw	r4,60(r17)
    a234:	18c02014 	ori	r3,r3,128
    a238:	80c0030d 	sth	r3,12(r16)
    a23c:	80800015 	stw	r2,0(r16)
    a240:	80800415 	stw	r2,16(r16)
    a244:	84800515 	stw	r18,20(r16)
    a248:	98001c1e 	bne	r19,zero,a2bc <__smakebuf_r+0x160>
    a24c:	dfc01317 	ldw	ra,76(sp)
    a250:	dcc01217 	ldw	r19,72(sp)
    a254:	dc801117 	ldw	r18,68(sp)
    a258:	dc401017 	ldw	r17,64(sp)
    a25c:	dc000f17 	ldw	r16,60(sp)
    a260:	dec01404 	addi	sp,sp,80
    a264:	f800283a 	ret
    a268:	288010c4 	addi	r2,r5,67
    a26c:	28800015 	stw	r2,0(r5)
    a270:	28800415 	stw	r2,16(r5)
    a274:	00800044 	movi	r2,1
    a278:	28800515 	stw	r2,20(r5)
    a27c:	f800283a 	ret
    a280:	04801004 	movi	r18,64
    a284:	003fe006 	br	a208 <__alt_mem_Flash_flash_data+0xf400a208>
    a288:	81000a17 	ldw	r4,40(r16)
    a28c:	00c00074 	movhi	r3,1
    a290:	18f18104 	addi	r3,r3,-14844
    a294:	20ffc51e 	bne	r4,r3,a1ac <__alt_mem_Flash_flash_data+0xf400a1ac>
    a298:	80c0030b 	ldhu	r3,12(r16)
    a29c:	01010004 	movi	r4,1024
    a2a0:	81001315 	stw	r4,76(r16)
    a2a4:	1906b03a 	or	r3,r3,r4
    a2a8:	80c0030d 	sth	r3,12(r16)
    a2ac:	003fc206 	br	a1b8 <__alt_mem_Flash_flash_data+0xf400a1b8>
    a2b0:	0027883a 	mov	r19,zero
    a2b4:	04810004 	movi	r18,1024
    a2b8:	003fd606 	br	a214 <__alt_mem_Flash_flash_data+0xf400a214>
    a2bc:	8140038f 	ldh	r5,14(r16)
    a2c0:	8809883a 	mov	r4,r17
    a2c4:	000f2840 	call	f284 <_isatty_r>
    a2c8:	103fe026 	beq	r2,zero,a24c <__alt_mem_Flash_flash_data+0xf400a24c>
    a2cc:	8080030b 	ldhu	r2,12(r16)
    a2d0:	10800054 	ori	r2,r2,1
    a2d4:	8080030d 	sth	r2,12(r16)
    a2d8:	003fdc06 	br	a24c <__alt_mem_Flash_flash_data+0xf400a24c>
    a2dc:	8080030b 	ldhu	r2,12(r16)
    a2e0:	10c0800c 	andi	r3,r2,512
    a2e4:	183fd91e 	bne	r3,zero,a24c <__alt_mem_Flash_flash_data+0xf400a24c>
    a2e8:	10800094 	ori	r2,r2,2
    a2ec:	80c010c4 	addi	r3,r16,67
    a2f0:	8080030d 	sth	r2,12(r16)
    a2f4:	00800044 	movi	r2,1
    a2f8:	80c00015 	stw	r3,0(r16)
    a2fc:	80c00415 	stw	r3,16(r16)
    a300:	80800515 	stw	r2,20(r16)
    a304:	003fd106 	br	a24c <__alt_mem_Flash_flash_data+0xf400a24c>
    a308:	04c00044 	movi	r19,1
    a30c:	04810004 	movi	r18,1024
    a310:	003fc006 	br	a214 <__alt_mem_Flash_flash_data+0xf400a214>

0000a314 <_malloc_r>:
    a314:	defff504 	addi	sp,sp,-44
    a318:	dc800315 	stw	r18,12(sp)
    a31c:	dfc00a15 	stw	ra,40(sp)
    a320:	df000915 	stw	fp,36(sp)
    a324:	ddc00815 	stw	r23,32(sp)
    a328:	dd800715 	stw	r22,28(sp)
    a32c:	dd400615 	stw	r21,24(sp)
    a330:	dd000515 	stw	r20,20(sp)
    a334:	dcc00415 	stw	r19,16(sp)
    a338:	dc400215 	stw	r17,8(sp)
    a33c:	dc000115 	stw	r16,4(sp)
    a340:	288002c4 	addi	r2,r5,11
    a344:	00c00584 	movi	r3,22
    a348:	2025883a 	mov	r18,r4
    a34c:	18802a2e 	bgeu	r3,r2,a3f8 <_malloc_r+0xe4>
    a350:	047ffe04 	movi	r17,-8
    a354:	1462703a 	and	r17,r2,r17
    a358:	88009e16 	blt	r17,zero,a5d4 <_malloc_r+0x2c0>
    a35c:	89409d36 	bltu	r17,r5,a5d4 <_malloc_r+0x2c0>
    a360:	00134240 	call	13424 <__malloc_lock>
    a364:	00807dc4 	movi	r2,503
    a368:	14402736 	bltu	r2,r17,a408 <_malloc_r+0xf4>
    a36c:	8806d0fa 	srli	r3,r17,3
    a370:	04c000b4 	movhi	r19,2
    a374:	9cc32404 	addi	r19,r19,3216
    a378:	18c5883a 	add	r2,r3,r3
    a37c:	1085883a 	add	r2,r2,r2
    a380:	1085883a 	add	r2,r2,r2
    a384:	9885883a 	add	r2,r19,r2
    a388:	14000317 	ldw	r16,12(r2)
    a38c:	80814a26 	beq	r16,r2,a8b8 <_malloc_r+0x5a4>
    a390:	80c00117 	ldw	r3,4(r16)
    a394:	81000317 	ldw	r4,12(r16)
    a398:	00bfff04 	movi	r2,-4
    a39c:	1884703a 	and	r2,r3,r2
    a3a0:	81400217 	ldw	r5,8(r16)
    a3a4:	8085883a 	add	r2,r16,r2
    a3a8:	10c00117 	ldw	r3,4(r2)
    a3ac:	29000315 	stw	r4,12(r5)
    a3b0:	21400215 	stw	r5,8(r4)
    a3b4:	18c00054 	ori	r3,r3,1
    a3b8:	10c00115 	stw	r3,4(r2)
    a3bc:	9009883a 	mov	r4,r18
    a3c0:	00135440 	call	13544 <__malloc_unlock>
    a3c4:	80800204 	addi	r2,r16,8
    a3c8:	dfc00a17 	ldw	ra,40(sp)
    a3cc:	df000917 	ldw	fp,36(sp)
    a3d0:	ddc00817 	ldw	r23,32(sp)
    a3d4:	dd800717 	ldw	r22,28(sp)
    a3d8:	dd400617 	ldw	r21,24(sp)
    a3dc:	dd000517 	ldw	r20,20(sp)
    a3e0:	dcc00417 	ldw	r19,16(sp)
    a3e4:	dc800317 	ldw	r18,12(sp)
    a3e8:	dc400217 	ldw	r17,8(sp)
    a3ec:	dc000117 	ldw	r16,4(sp)
    a3f0:	dec00b04 	addi	sp,sp,44
    a3f4:	f800283a 	ret
    a3f8:	04400404 	movi	r17,16
    a3fc:	89407536 	bltu	r17,r5,a5d4 <_malloc_r+0x2c0>
    a400:	00134240 	call	13424 <__malloc_lock>
    a404:	003fd906 	br	a36c <__alt_mem_Flash_flash_data+0xf400a36c>
    a408:	8806d27a 	srli	r3,r17,9
    a40c:	18007526 	beq	r3,zero,a5e4 <_malloc_r+0x2d0>
    a410:	00800104 	movi	r2,4
    a414:	10c0ef36 	bltu	r2,r3,a7d4 <_malloc_r+0x4c0>
    a418:	8806d1ba 	srli	r3,r17,6
    a41c:	19c00e04 	addi	r7,r3,56
    a420:	39cb883a 	add	r5,r7,r7
    a424:	04c000b4 	movhi	r19,2
    a428:	294b883a 	add	r5,r5,r5
    a42c:	9cc32404 	addi	r19,r19,3216
    a430:	294b883a 	add	r5,r5,r5
    a434:	994b883a 	add	r5,r19,r5
    a438:	2c000317 	ldw	r16,12(r5)
    a43c:	2c000e26 	beq	r5,r16,a478 <_malloc_r+0x164>
    a440:	80800117 	ldw	r2,4(r16)
    a444:	01bfff04 	movi	r6,-4
    a448:	010003c4 	movi	r4,15
    a44c:	1184703a 	and	r2,r2,r6
    a450:	1447c83a 	sub	r3,r2,r17
    a454:	20c00716 	blt	r4,r3,a474 <_malloc_r+0x160>
    a458:	1800650e 	bge	r3,zero,a5f0 <_malloc_r+0x2dc>
    a45c:	84000317 	ldw	r16,12(r16)
    a460:	2c000526 	beq	r5,r16,a478 <_malloc_r+0x164>
    a464:	80800117 	ldw	r2,4(r16)
    a468:	1184703a 	and	r2,r2,r6
    a46c:	1447c83a 	sub	r3,r2,r17
    a470:	20fff90e 	bge	r4,r3,a458 <__alt_mem_Flash_flash_data+0xf400a458>
    a474:	39ffffc4 	addi	r7,r7,-1
    a478:	38c00044 	addi	r3,r7,1
    a47c:	018000b4 	movhi	r6,2
    a480:	9c000417 	ldw	r16,16(r19)
    a484:	31832404 	addi	r6,r6,3216
    a488:	32400204 	addi	r9,r6,8
    a48c:	82410326 	beq	r16,r9,a89c <_malloc_r+0x588>
    a490:	81000117 	ldw	r4,4(r16)
    a494:	00bfff04 	movi	r2,-4
    a498:	208e703a 	and	r7,r4,r2
    a49c:	3c45c83a 	sub	r2,r7,r17
    a4a0:	010003c4 	movi	r4,15
    a4a4:	2080ee16 	blt	r4,r2,a860 <_malloc_r+0x54c>
    a4a8:	32400515 	stw	r9,20(r6)
    a4ac:	32400415 	stw	r9,16(r6)
    a4b0:	1000510e 	bge	r2,zero,a5f8 <_malloc_r+0x2e4>
    a4b4:	00807fc4 	movi	r2,511
    a4b8:	11c0ce36 	bltu	r2,r7,a7f4 <_malloc_r+0x4e0>
    a4bc:	3808d0fa 	srli	r4,r7,3
    a4c0:	01c00044 	movi	r7,1
    a4c4:	30800117 	ldw	r2,4(r6)
    a4c8:	210b883a 	add	r5,r4,r4
    a4cc:	294b883a 	add	r5,r5,r5
    a4d0:	2009d0ba 	srai	r4,r4,2
    a4d4:	294b883a 	add	r5,r5,r5
    a4d8:	298b883a 	add	r5,r5,r6
    a4dc:	2a000217 	ldw	r8,8(r5)
    a4e0:	3908983a 	sll	r4,r7,r4
    a4e4:	81400315 	stw	r5,12(r16)
    a4e8:	82000215 	stw	r8,8(r16)
    a4ec:	2088b03a 	or	r4,r4,r2
    a4f0:	2c000215 	stw	r16,8(r5)
    a4f4:	31000115 	stw	r4,4(r6)
    a4f8:	44000315 	stw	r16,12(r8)
    a4fc:	1805d0ba 	srai	r2,r3,2
    a500:	01400044 	movi	r5,1
    a504:	288a983a 	sll	r5,r5,r2
    a508:	21404336 	bltu	r4,r5,a618 <_malloc_r+0x304>
    a50c:	2144703a 	and	r2,r4,r5
    a510:	10000a1e 	bne	r2,zero,a53c <_malloc_r+0x228>
    a514:	00bfff04 	movi	r2,-4
    a518:	294b883a 	add	r5,r5,r5
    a51c:	1886703a 	and	r3,r3,r2
    a520:	2144703a 	and	r2,r4,r5
    a524:	18c00104 	addi	r3,r3,4
    a528:	1000041e 	bne	r2,zero,a53c <_malloc_r+0x228>
    a52c:	294b883a 	add	r5,r5,r5
    a530:	2144703a 	and	r2,r4,r5
    a534:	18c00104 	addi	r3,r3,4
    a538:	103ffc26 	beq	r2,zero,a52c <__alt_mem_Flash_flash_data+0xf400a52c>
    a53c:	023fff04 	movi	r8,-4
    a540:	01c003c4 	movi	r7,15
    a544:	18c5883a 	add	r2,r3,r3
    a548:	1085883a 	add	r2,r2,r2
    a54c:	1085883a 	add	r2,r2,r2
    a550:	9895883a 	add	r10,r19,r2
    a554:	52c00304 	addi	r11,r10,12
    a558:	1819883a 	mov	r12,r3
    a55c:	5c000017 	ldw	r16,0(r11)
    a560:	59bffd04 	addi	r6,r11,-12
    a564:	8180041e 	bne	r16,r6,a578 <_malloc_r+0x264>
    a568:	0000ce06 	br	a8a4 <_malloc_r+0x590>
    a56c:	2000d70e 	bge	r4,zero,a8cc <_malloc_r+0x5b8>
    a570:	84000317 	ldw	r16,12(r16)
    a574:	8180cb26 	beq	r16,r6,a8a4 <_malloc_r+0x590>
    a578:	80800117 	ldw	r2,4(r16)
    a57c:	1204703a 	and	r2,r2,r8
    a580:	1449c83a 	sub	r4,r2,r17
    a584:	393ff90e 	bge	r7,r4,a56c <__alt_mem_Flash_flash_data+0xf400a56c>
    a588:	80800317 	ldw	r2,12(r16)
    a58c:	80c00217 	ldw	r3,8(r16)
    a590:	89400054 	ori	r5,r17,1
    a594:	81400115 	stw	r5,4(r16)
    a598:	18800315 	stw	r2,12(r3)
    a59c:	10c00215 	stw	r3,8(r2)
    a5a0:	8463883a 	add	r17,r16,r17
    a5a4:	9c400515 	stw	r17,20(r19)
    a5a8:	9c400415 	stw	r17,16(r19)
    a5ac:	20800054 	ori	r2,r4,1
    a5b0:	88800115 	stw	r2,4(r17)
    a5b4:	8a400315 	stw	r9,12(r17)
    a5b8:	8a400215 	stw	r9,8(r17)
    a5bc:	8923883a 	add	r17,r17,r4
    a5c0:	89000015 	stw	r4,0(r17)
    a5c4:	9009883a 	mov	r4,r18
    a5c8:	00135440 	call	13544 <__malloc_unlock>
    a5cc:	80800204 	addi	r2,r16,8
    a5d0:	003f7d06 	br	a3c8 <__alt_mem_Flash_flash_data+0xf400a3c8>
    a5d4:	00800304 	movi	r2,12
    a5d8:	90800015 	stw	r2,0(r18)
    a5dc:	0005883a 	mov	r2,zero
    a5e0:	003f7906 	br	a3c8 <__alt_mem_Flash_flash_data+0xf400a3c8>
    a5e4:	01401f84 	movi	r5,126
    a5e8:	01c00fc4 	movi	r7,63
    a5ec:	003f8d06 	br	a424 <__alt_mem_Flash_flash_data+0xf400a424>
    a5f0:	81000317 	ldw	r4,12(r16)
    a5f4:	003f6a06 	br	a3a0 <__alt_mem_Flash_flash_data+0xf400a3a0>
    a5f8:	81c5883a 	add	r2,r16,r7
    a5fc:	10c00117 	ldw	r3,4(r2)
    a600:	9009883a 	mov	r4,r18
    a604:	18c00054 	ori	r3,r3,1
    a608:	10c00115 	stw	r3,4(r2)
    a60c:	00135440 	call	13544 <__malloc_unlock>
    a610:	80800204 	addi	r2,r16,8
    a614:	003f6c06 	br	a3c8 <__alt_mem_Flash_flash_data+0xf400a3c8>
    a618:	9c000217 	ldw	r16,8(r19)
    a61c:	00bfff04 	movi	r2,-4
    a620:	85800117 	ldw	r22,4(r16)
    a624:	b0ac703a 	and	r22,r22,r2
    a628:	b4400336 	bltu	r22,r17,a638 <_malloc_r+0x324>
    a62c:	b445c83a 	sub	r2,r22,r17
    a630:	00c003c4 	movi	r3,15
    a634:	18805d16 	blt	r3,r2,a7ac <_malloc_r+0x498>
    a638:	05c000b4 	movhi	r23,2
    a63c:	008000b4 	movhi	r2,2
    a640:	bdc99c04 	addi	r23,r23,9840
    a644:	1091b504 	addi	r2,r2,18132
    a648:	15400017 	ldw	r21,0(r2)
    a64c:	b9000017 	ldw	r4,0(r23)
    a650:	00ffffc4 	movi	r3,-1
    a654:	858d883a 	add	r6,r16,r22
    a658:	8d6b883a 	add	r21,r17,r21
    a65c:	20c0e426 	beq	r4,r3,a9f0 <_malloc_r+0x6dc>
    a660:	ad4403c4 	addi	r21,r21,4111
    a664:	00fc0004 	movi	r3,-4096
    a668:	a8ea703a 	and	r21,r21,r3
    a66c:	9009883a 	mov	r4,r18
    a670:	a80b883a 	mov	r5,r21
    a674:	d9800015 	stw	r6,0(sp)
    a678:	000c4d80 	call	c4d8 <_sbrk_r>
    a67c:	00ffffc4 	movi	r3,-1
    a680:	1029883a 	mov	r20,r2
    a684:	d9800017 	ldw	r6,0(sp)
    a688:	10c0a426 	beq	r2,r3,a91c <_malloc_r+0x608>
    a68c:	1180a236 	bltu	r2,r6,a918 <_malloc_r+0x604>
    a690:	070000b4 	movhi	fp,2
    a694:	e711d704 	addi	fp,fp,18268
    a698:	e0c00017 	ldw	r3,0(fp)
    a69c:	a8c7883a 	add	r3,r21,r3
    a6a0:	e0c00015 	stw	r3,0(fp)
    a6a4:	3500da26 	beq	r6,r20,aa10 <_malloc_r+0x6fc>
    a6a8:	b9000017 	ldw	r4,0(r23)
    a6ac:	00bfffc4 	movi	r2,-1
    a6b0:	2080e426 	beq	r4,r2,aa44 <_malloc_r+0x730>
    a6b4:	a185c83a 	sub	r2,r20,r6
    a6b8:	1885883a 	add	r2,r3,r2
    a6bc:	e0800015 	stw	r2,0(fp)
    a6c0:	a0c001cc 	andi	r3,r20,7
    a6c4:	1800b526 	beq	r3,zero,a99c <_malloc_r+0x688>
    a6c8:	a0e9c83a 	sub	r20,r20,r3
    a6cc:	00840204 	movi	r2,4104
    a6d0:	a5000204 	addi	r20,r20,8
    a6d4:	10c7c83a 	sub	r3,r2,r3
    a6d8:	a545883a 	add	r2,r20,r21
    a6dc:	1083ffcc 	andi	r2,r2,4095
    a6e0:	18abc83a 	sub	r21,r3,r2
    a6e4:	9009883a 	mov	r4,r18
    a6e8:	a80b883a 	mov	r5,r21
    a6ec:	000c4d80 	call	c4d8 <_sbrk_r>
    a6f0:	00ffffc4 	movi	r3,-1
    a6f4:	10c0d026 	beq	r2,r3,aa38 <_malloc_r+0x724>
    a6f8:	1507c83a 	sub	r3,r2,r20
    a6fc:	a8c7883a 	add	r3,r21,r3
    a700:	18c00054 	ori	r3,r3,1
    a704:	e0800017 	ldw	r2,0(fp)
    a708:	9d000215 	stw	r20,8(r19)
    a70c:	a0c00115 	stw	r3,4(r20)
    a710:	a887883a 	add	r3,r21,r2
    a714:	e0c00015 	stw	r3,0(fp)
    a718:	84c00e26 	beq	r16,r19,a754 <_malloc_r+0x440>
    a71c:	018003c4 	movi	r6,15
    a720:	3580a02e 	bgeu	r6,r22,a9a4 <_malloc_r+0x690>
    a724:	81400117 	ldw	r5,4(r16)
    a728:	013ffe04 	movi	r4,-8
    a72c:	b0bffd04 	addi	r2,r22,-12
    a730:	1104703a 	and	r2,r2,r4
    a734:	2900004c 	andi	r4,r5,1
    a738:	1108b03a 	or	r4,r2,r4
    a73c:	81000115 	stw	r4,4(r16)
    a740:	01400144 	movi	r5,5
    a744:	8089883a 	add	r4,r16,r2
    a748:	21400115 	stw	r5,4(r4)
    a74c:	21400215 	stw	r5,8(r4)
    a750:	3080c036 	bltu	r6,r2,aa54 <_malloc_r+0x740>
    a754:	008000b4 	movhi	r2,2
    a758:	1091b404 	addi	r2,r2,18128
    a75c:	11000017 	ldw	r4,0(r2)
    a760:	20c0012e 	bgeu	r4,r3,a768 <_malloc_r+0x454>
    a764:	10c00015 	stw	r3,0(r2)
    a768:	008000b4 	movhi	r2,2
    a76c:	1091b304 	addi	r2,r2,18124
    a770:	11000017 	ldw	r4,0(r2)
    a774:	9c000217 	ldw	r16,8(r19)
    a778:	20c0012e 	bgeu	r4,r3,a780 <_malloc_r+0x46c>
    a77c:	10c00015 	stw	r3,0(r2)
    a780:	80c00117 	ldw	r3,4(r16)
    a784:	00bfff04 	movi	r2,-4
    a788:	1886703a 	and	r3,r3,r2
    a78c:	1c45c83a 	sub	r2,r3,r17
    a790:	1c400236 	bltu	r3,r17,a79c <_malloc_r+0x488>
    a794:	00c003c4 	movi	r3,15
    a798:	18800416 	blt	r3,r2,a7ac <_malloc_r+0x498>
    a79c:	9009883a 	mov	r4,r18
    a7a0:	00135440 	call	13544 <__malloc_unlock>
    a7a4:	0005883a 	mov	r2,zero
    a7a8:	003f0706 	br	a3c8 <__alt_mem_Flash_flash_data+0xf400a3c8>
    a7ac:	88c00054 	ori	r3,r17,1
    a7b0:	80c00115 	stw	r3,4(r16)
    a7b4:	8463883a 	add	r17,r16,r17
    a7b8:	10800054 	ori	r2,r2,1
    a7bc:	9c400215 	stw	r17,8(r19)
    a7c0:	88800115 	stw	r2,4(r17)
    a7c4:	9009883a 	mov	r4,r18
    a7c8:	00135440 	call	13544 <__malloc_unlock>
    a7cc:	80800204 	addi	r2,r16,8
    a7d0:	003efd06 	br	a3c8 <__alt_mem_Flash_flash_data+0xf400a3c8>
    a7d4:	00800504 	movi	r2,20
    a7d8:	10c0482e 	bgeu	r2,r3,a8fc <_malloc_r+0x5e8>
    a7dc:	00801504 	movi	r2,84
    a7e0:	10c06836 	bltu	r2,r3,a984 <_malloc_r+0x670>
    a7e4:	8806d33a 	srli	r3,r17,12
    a7e8:	19c01b84 	addi	r7,r3,110
    a7ec:	39cb883a 	add	r5,r7,r7
    a7f0:	003f0c06 	br	a424 <__alt_mem_Flash_flash_data+0xf400a424>
    a7f4:	3804d27a 	srli	r2,r7,9
    a7f8:	01000104 	movi	r4,4
    a7fc:	2080422e 	bgeu	r4,r2,a908 <_malloc_r+0x5f4>
    a800:	01000504 	movi	r4,20
    a804:	20807c36 	bltu	r4,r2,a9f8 <_malloc_r+0x6e4>
    a808:	110016c4 	addi	r4,r2,91
    a80c:	210b883a 	add	r5,r4,r4
    a810:	294b883a 	add	r5,r5,r5
    a814:	294b883a 	add	r5,r5,r5
    a818:	994b883a 	add	r5,r19,r5
    a81c:	28800217 	ldw	r2,8(r5)
    a820:	020000b4 	movhi	r8,2
    a824:	42032404 	addi	r8,r8,3216
    a828:	11406326 	beq	r2,r5,a9b8 <_malloc_r+0x6a4>
    a82c:	01bfff04 	movi	r6,-4
    a830:	11000117 	ldw	r4,4(r2)
    a834:	2188703a 	and	r4,r4,r6
    a838:	3900022e 	bgeu	r7,r4,a844 <_malloc_r+0x530>
    a83c:	10800217 	ldw	r2,8(r2)
    a840:	28bffb1e 	bne	r5,r2,a830 <__alt_mem_Flash_flash_data+0xf400a830>
    a844:	11800317 	ldw	r6,12(r2)
    a848:	99000117 	ldw	r4,4(r19)
    a84c:	81800315 	stw	r6,12(r16)
    a850:	80800215 	stw	r2,8(r16)
    a854:	34000215 	stw	r16,8(r6)
    a858:	14000315 	stw	r16,12(r2)
    a85c:	003f2706 	br	a4fc <__alt_mem_Flash_flash_data+0xf400a4fc>
    a860:	88c00054 	ori	r3,r17,1
    a864:	80c00115 	stw	r3,4(r16)
    a868:	8463883a 	add	r17,r16,r17
    a86c:	34400515 	stw	r17,20(r6)
    a870:	34400415 	stw	r17,16(r6)
    a874:	10c00054 	ori	r3,r2,1
    a878:	8a400315 	stw	r9,12(r17)
    a87c:	8a400215 	stw	r9,8(r17)
    a880:	88c00115 	stw	r3,4(r17)
    a884:	88a3883a 	add	r17,r17,r2
    a888:	88800015 	stw	r2,0(r17)
    a88c:	9009883a 	mov	r4,r18
    a890:	00135440 	call	13544 <__malloc_unlock>
    a894:	80800204 	addi	r2,r16,8
    a898:	003ecb06 	br	a3c8 <__alt_mem_Flash_flash_data+0xf400a3c8>
    a89c:	31000117 	ldw	r4,4(r6)
    a8a0:	003f1606 	br	a4fc <__alt_mem_Flash_flash_data+0xf400a4fc>
    a8a4:	63000044 	addi	r12,r12,1
    a8a8:	608000cc 	andi	r2,r12,3
    a8ac:	5ac00204 	addi	r11,r11,8
    a8b0:	103f2a1e 	bne	r2,zero,a55c <__alt_mem_Flash_flash_data+0xf400a55c>
    a8b4:	00002106 	br	a93c <_malloc_r+0x628>
    a8b8:	80800204 	addi	r2,r16,8
    a8bc:	84000517 	ldw	r16,20(r16)
    a8c0:	143eb31e 	bne	r2,r16,a390 <__alt_mem_Flash_flash_data+0xf400a390>
    a8c4:	18c00084 	addi	r3,r3,2
    a8c8:	003eec06 	br	a47c <__alt_mem_Flash_flash_data+0xf400a47c>
    a8cc:	8085883a 	add	r2,r16,r2
    a8d0:	10c00117 	ldw	r3,4(r2)
    a8d4:	81000317 	ldw	r4,12(r16)
    a8d8:	81400217 	ldw	r5,8(r16)
    a8dc:	18c00054 	ori	r3,r3,1
    a8e0:	10c00115 	stw	r3,4(r2)
    a8e4:	29000315 	stw	r4,12(r5)
    a8e8:	21400215 	stw	r5,8(r4)
    a8ec:	9009883a 	mov	r4,r18
    a8f0:	00135440 	call	13544 <__malloc_unlock>
    a8f4:	80800204 	addi	r2,r16,8
    a8f8:	003eb306 	br	a3c8 <__alt_mem_Flash_flash_data+0xf400a3c8>
    a8fc:	19c016c4 	addi	r7,r3,91
    a900:	39cb883a 	add	r5,r7,r7
    a904:	003ec706 	br	a424 <__alt_mem_Flash_flash_data+0xf400a424>
    a908:	3804d1ba 	srli	r2,r7,6
    a90c:	11000e04 	addi	r4,r2,56
    a910:	210b883a 	add	r5,r4,r4
    a914:	003fbe06 	br	a810 <__alt_mem_Flash_flash_data+0xf400a810>
    a918:	84ff5d26 	beq	r16,r19,a690 <__alt_mem_Flash_flash_data+0xf400a690>
    a91c:	9c000217 	ldw	r16,8(r19)
    a920:	00bfff04 	movi	r2,-4
    a924:	80c00117 	ldw	r3,4(r16)
    a928:	1886703a 	and	r3,r3,r2
    a92c:	003f9706 	br	a78c <__alt_mem_Flash_flash_data+0xf400a78c>
    a930:	52800017 	ldw	r10,0(r10)
    a934:	18ffffc4 	addi	r3,r3,-1
    a938:	50805c1e 	bne	r10,r2,aaac <_malloc_r+0x798>
    a93c:	190000cc 	andi	r4,r3,3
    a940:	50bffe04 	addi	r2,r10,-8
    a944:	203ffa1e 	bne	r4,zero,a930 <__alt_mem_Flash_flash_data+0xf400a930>
    a948:	98800117 	ldw	r2,4(r19)
    a94c:	0146303a 	nor	r3,zero,r5
    a950:	1884703a 	and	r2,r3,r2
    a954:	98800115 	stw	r2,4(r19)
    a958:	294b883a 	add	r5,r5,r5
    a95c:	117f2e36 	bltu	r2,r5,a618 <__alt_mem_Flash_flash_data+0xf400a618>
    a960:	283f2d26 	beq	r5,zero,a618 <__alt_mem_Flash_flash_data+0xf400a618>
    a964:	1146703a 	and	r3,r2,r5
    a968:	1800521e 	bne	r3,zero,aab4 <_malloc_r+0x7a0>
    a96c:	6007883a 	mov	r3,r12
    a970:	294b883a 	add	r5,r5,r5
    a974:	1148703a 	and	r4,r2,r5
    a978:	18c00104 	addi	r3,r3,4
    a97c:	203ffc26 	beq	r4,zero,a970 <__alt_mem_Flash_flash_data+0xf400a970>
    a980:	003ef006 	br	a544 <__alt_mem_Flash_flash_data+0xf400a544>
    a984:	00805504 	movi	r2,340
    a988:	10c01336 	bltu	r2,r3,a9d8 <_malloc_r+0x6c4>
    a98c:	8806d3fa 	srli	r3,r17,15
    a990:	19c01dc4 	addi	r7,r3,119
    a994:	39cb883a 	add	r5,r7,r7
    a998:	003ea206 	br	a424 <__alt_mem_Flash_flash_data+0xf400a424>
    a99c:	00c40004 	movi	r3,4096
    a9a0:	003f4d06 	br	a6d8 <__alt_mem_Flash_flash_data+0xf400a6d8>
    a9a4:	00800044 	movi	r2,1
    a9a8:	a0800115 	stw	r2,4(r20)
    a9ac:	a021883a 	mov	r16,r20
    a9b0:	0007883a 	mov	r3,zero
    a9b4:	003f7506 	br	a78c <__alt_mem_Flash_flash_data+0xf400a78c>
    a9b8:	200bd0ba 	srai	r5,r4,2
    a9bc:	01800044 	movi	r6,1
    a9c0:	41000117 	ldw	r4,4(r8)
    a9c4:	314a983a 	sll	r5,r6,r5
    a9c8:	100d883a 	mov	r6,r2
    a9cc:	2908b03a 	or	r4,r5,r4
    a9d0:	41000115 	stw	r4,4(r8)
    a9d4:	003f9d06 	br	a84c <__alt_mem_Flash_flash_data+0xf400a84c>
    a9d8:	00815504 	movi	r2,1364
    a9dc:	10c01336 	bltu	r2,r3,aa2c <_malloc_r+0x718>
    a9e0:	8806d4ba 	srli	r3,r17,18
    a9e4:	19c01f04 	addi	r7,r3,124
    a9e8:	39cb883a 	add	r5,r7,r7
    a9ec:	003e8d06 	br	a424 <__alt_mem_Flash_flash_data+0xf400a424>
    a9f0:	ad400404 	addi	r21,r21,16
    a9f4:	003f1d06 	br	a66c <__alt_mem_Flash_flash_data+0xf400a66c>
    a9f8:	01001504 	movi	r4,84
    a9fc:	20801c36 	bltu	r4,r2,aa70 <_malloc_r+0x75c>
    aa00:	3804d33a 	srli	r2,r7,12
    aa04:	11001b84 	addi	r4,r2,110
    aa08:	210b883a 	add	r5,r4,r4
    aa0c:	003f8006 	br	a810 <__alt_mem_Flash_flash_data+0xf400a810>
    aa10:	3083ffcc 	andi	r2,r6,4095
    aa14:	103f241e 	bne	r2,zero,a6a8 <__alt_mem_Flash_flash_data+0xf400a6a8>
    aa18:	99000217 	ldw	r4,8(r19)
    aa1c:	ad85883a 	add	r2,r21,r22
    aa20:	10800054 	ori	r2,r2,1
    aa24:	20800115 	stw	r2,4(r4)
    aa28:	003f4a06 	br	a754 <__alt_mem_Flash_flash_data+0xf400a754>
    aa2c:	01403f04 	movi	r5,252
    aa30:	01c01f84 	movi	r7,126
    aa34:	003e7b06 	br	a424 <__alt_mem_Flash_flash_data+0xf400a424>
    aa38:	00c00044 	movi	r3,1
    aa3c:	002b883a 	mov	r21,zero
    aa40:	003f3006 	br	a704 <__alt_mem_Flash_flash_data+0xf400a704>
    aa44:	008000b4 	movhi	r2,2
    aa48:	10899c04 	addi	r2,r2,9840
    aa4c:	15000015 	stw	r20,0(r2)
    aa50:	003f1b06 	br	a6c0 <__alt_mem_Flash_flash_data+0xf400a6c0>
    aa54:	9009883a 	mov	r4,r18
    aa58:	81400204 	addi	r5,r16,8
    aa5c:	00097440 	call	9744 <_free_r>
    aa60:	008000b4 	movhi	r2,2
    aa64:	1091d704 	addi	r2,r2,18268
    aa68:	10c00017 	ldw	r3,0(r2)
    aa6c:	003f3906 	br	a754 <__alt_mem_Flash_flash_data+0xf400a754>
    aa70:	01005504 	movi	r4,340
    aa74:	20800436 	bltu	r4,r2,aa88 <_malloc_r+0x774>
    aa78:	3804d3fa 	srli	r2,r7,15
    aa7c:	11001dc4 	addi	r4,r2,119
    aa80:	210b883a 	add	r5,r4,r4
    aa84:	003f6206 	br	a810 <__alt_mem_Flash_flash_data+0xf400a810>
    aa88:	01015504 	movi	r4,1364
    aa8c:	20800436 	bltu	r4,r2,aaa0 <_malloc_r+0x78c>
    aa90:	3804d4ba 	srli	r2,r7,18
    aa94:	11001f04 	addi	r4,r2,124
    aa98:	210b883a 	add	r5,r4,r4
    aa9c:	003f5c06 	br	a810 <__alt_mem_Flash_flash_data+0xf400a810>
    aaa0:	01403f04 	movi	r5,252
    aaa4:	01001f84 	movi	r4,126
    aaa8:	003f5906 	br	a810 <__alt_mem_Flash_flash_data+0xf400a810>
    aaac:	98800117 	ldw	r2,4(r19)
    aab0:	003fa906 	br	a958 <__alt_mem_Flash_flash_data+0xf400a958>
    aab4:	6007883a 	mov	r3,r12
    aab8:	003ea206 	br	a544 <__alt_mem_Flash_flash_data+0xf400a544>

0000aabc <memchr>:
    aabc:	208000cc 	andi	r2,r4,3
    aac0:	280f883a 	mov	r7,r5
    aac4:	10003526 	beq	r2,zero,ab9c <memchr+0xe0>
    aac8:	30bfffc4 	addi	r2,r6,-1
    aacc:	30001b26 	beq	r6,zero,ab3c <memchr+0x80>
    aad0:	21800003 	ldbu	r6,0(r4)
    aad4:	28c03fcc 	andi	r3,r5,255
    aad8:	30c01a26 	beq	r6,r3,ab44 <memchr+0x88>
    aadc:	180d883a 	mov	r6,r3
    aae0:	00000406 	br	aaf4 <memchr+0x38>
    aae4:	10001526 	beq	r2,zero,ab3c <memchr+0x80>
    aae8:	20c00003 	ldbu	r3,0(r4)
    aaec:	10bfffc4 	addi	r2,r2,-1
    aaf0:	19801426 	beq	r3,r6,ab44 <memchr+0x88>
    aaf4:	21000044 	addi	r4,r4,1
    aaf8:	20c000cc 	andi	r3,r4,3
    aafc:	183ff91e 	bne	r3,zero,aae4 <__alt_mem_Flash_flash_data+0xf400aae4>
    ab00:	024000c4 	movi	r9,3
    ab04:	48801136 	bltu	r9,r2,ab4c <memchr+0x90>
    ab08:	10000c26 	beq	r2,zero,ab3c <memchr+0x80>
    ab0c:	20c00003 	ldbu	r3,0(r4)
    ab10:	29403fcc 	andi	r5,r5,255
    ab14:	19400b26 	beq	r3,r5,ab44 <memchr+0x88>
    ab18:	20c00044 	addi	r3,r4,1
    ab1c:	2085883a 	add	r2,r4,r2
    ab20:	39803fcc 	andi	r6,r7,255
    ab24:	00000306 	br	ab34 <memchr+0x78>
    ab28:	18c00044 	addi	r3,r3,1
    ab2c:	197fffc3 	ldbu	r5,-1(r3)
    ab30:	29800426 	beq	r5,r6,ab44 <memchr+0x88>
    ab34:	1809883a 	mov	r4,r3
    ab38:	18bffb1e 	bne	r3,r2,ab28 <__alt_mem_Flash_flash_data+0xf400ab28>
    ab3c:	0005883a 	mov	r2,zero
    ab40:	f800283a 	ret
    ab44:	2005883a 	mov	r2,r4
    ab48:	f800283a 	ret
    ab4c:	28c03fcc 	andi	r3,r5,255
    ab50:	1810923a 	slli	r8,r3,8
    ab54:	02ffbff4 	movhi	r11,65279
    ab58:	02a02074 	movhi	r10,32897
    ab5c:	40c6b03a 	or	r3,r8,r3
    ab60:	1810943a 	slli	r8,r3,16
    ab64:	5affbfc4 	addi	r11,r11,-257
    ab68:	52a02004 	addi	r10,r10,-32640
    ab6c:	40d0b03a 	or	r8,r8,r3
    ab70:	20c00017 	ldw	r3,0(r4)
    ab74:	40c6f03a 	xor	r3,r8,r3
    ab78:	1acd883a 	add	r6,r3,r11
    ab7c:	00c6303a 	nor	r3,zero,r3
    ab80:	30c6703a 	and	r3,r6,r3
    ab84:	1a86703a 	and	r3,r3,r10
    ab88:	183fdf1e 	bne	r3,zero,ab08 <__alt_mem_Flash_flash_data+0xf400ab08>
    ab8c:	10bfff04 	addi	r2,r2,-4
    ab90:	21000104 	addi	r4,r4,4
    ab94:	48bff636 	bltu	r9,r2,ab70 <__alt_mem_Flash_flash_data+0xf400ab70>
    ab98:	003fdb06 	br	ab08 <__alt_mem_Flash_flash_data+0xf400ab08>
    ab9c:	3005883a 	mov	r2,r6
    aba0:	003fd706 	br	ab00 <__alt_mem_Flash_flash_data+0xf400ab00>

0000aba4 <memcpy>:
    aba4:	deffff04 	addi	sp,sp,-4
    aba8:	dc000015 	stw	r16,0(sp)
    abac:	00c003c4 	movi	r3,15
    abb0:	2005883a 	mov	r2,r4
    abb4:	1980432e 	bgeu	r3,r6,acc4 <memcpy+0x120>
    abb8:	2146b03a 	or	r3,r4,r5
    abbc:	18c000cc 	andi	r3,r3,3
    abc0:	1800421e 	bne	r3,zero,accc <memcpy+0x128>
    abc4:	343ffc04 	addi	r16,r6,-16
    abc8:	8020d13a 	srli	r16,r16,4
    abcc:	28c00104 	addi	r3,r5,4
    abd0:	23400104 	addi	r13,r4,4
    abd4:	801e913a 	slli	r15,r16,4
    abd8:	2b000204 	addi	r12,r5,8
    abdc:	22c00204 	addi	r11,r4,8
    abe0:	7bc00504 	addi	r15,r15,20
    abe4:	2a800304 	addi	r10,r5,12
    abe8:	22400304 	addi	r9,r4,12
    abec:	2bdf883a 	add	r15,r5,r15
    abf0:	2811883a 	mov	r8,r5
    abf4:	200f883a 	mov	r7,r4
    abf8:	41000017 	ldw	r4,0(r8)
    abfc:	39c00404 	addi	r7,r7,16
    ac00:	18c00404 	addi	r3,r3,16
    ac04:	393ffc15 	stw	r4,-16(r7)
    ac08:	1bbffc17 	ldw	r14,-16(r3)
    ac0c:	6b400404 	addi	r13,r13,16
    ac10:	5ac00404 	addi	r11,r11,16
    ac14:	6bbffc15 	stw	r14,-16(r13)
    ac18:	63800017 	ldw	r14,0(r12)
    ac1c:	4a400404 	addi	r9,r9,16
    ac20:	42000404 	addi	r8,r8,16
    ac24:	5bbffc15 	stw	r14,-16(r11)
    ac28:	53800017 	ldw	r14,0(r10)
    ac2c:	63000404 	addi	r12,r12,16
    ac30:	52800404 	addi	r10,r10,16
    ac34:	4bbffc15 	stw	r14,-16(r9)
    ac38:	1bffef1e 	bne	r3,r15,abf8 <__alt_mem_Flash_flash_data+0xf400abf8>
    ac3c:	81c00044 	addi	r7,r16,1
    ac40:	380e913a 	slli	r7,r7,4
    ac44:	310003cc 	andi	r4,r6,15
    ac48:	02c000c4 	movi	r11,3
    ac4c:	11c7883a 	add	r3,r2,r7
    ac50:	29cb883a 	add	r5,r5,r7
    ac54:	59001f2e 	bgeu	r11,r4,acd4 <memcpy+0x130>
    ac58:	1813883a 	mov	r9,r3
    ac5c:	2811883a 	mov	r8,r5
    ac60:	200f883a 	mov	r7,r4
    ac64:	42800017 	ldw	r10,0(r8)
    ac68:	4a400104 	addi	r9,r9,4
    ac6c:	39ffff04 	addi	r7,r7,-4
    ac70:	4abfff15 	stw	r10,-4(r9)
    ac74:	42000104 	addi	r8,r8,4
    ac78:	59fffa36 	bltu	r11,r7,ac64 <__alt_mem_Flash_flash_data+0xf400ac64>
    ac7c:	213fff04 	addi	r4,r4,-4
    ac80:	2008d0ba 	srli	r4,r4,2
    ac84:	318000cc 	andi	r6,r6,3
    ac88:	21000044 	addi	r4,r4,1
    ac8c:	2109883a 	add	r4,r4,r4
    ac90:	2109883a 	add	r4,r4,r4
    ac94:	1907883a 	add	r3,r3,r4
    ac98:	290b883a 	add	r5,r5,r4
    ac9c:	30000626 	beq	r6,zero,acb8 <memcpy+0x114>
    aca0:	198d883a 	add	r6,r3,r6
    aca4:	29c00003 	ldbu	r7,0(r5)
    aca8:	18c00044 	addi	r3,r3,1
    acac:	29400044 	addi	r5,r5,1
    acb0:	19ffffc5 	stb	r7,-1(r3)
    acb4:	19bffb1e 	bne	r3,r6,aca4 <__alt_mem_Flash_flash_data+0xf400aca4>
    acb8:	dc000017 	ldw	r16,0(sp)
    acbc:	dec00104 	addi	sp,sp,4
    acc0:	f800283a 	ret
    acc4:	2007883a 	mov	r3,r4
    acc8:	003ff406 	br	ac9c <__alt_mem_Flash_flash_data+0xf400ac9c>
    accc:	2007883a 	mov	r3,r4
    acd0:	003ff306 	br	aca0 <__alt_mem_Flash_flash_data+0xf400aca0>
    acd4:	200d883a 	mov	r6,r4
    acd8:	003ff006 	br	ac9c <__alt_mem_Flash_flash_data+0xf400ac9c>

0000acdc <memmove>:
    acdc:	2005883a 	mov	r2,r4
    ace0:	29000b2e 	bgeu	r5,r4,ad10 <memmove+0x34>
    ace4:	298f883a 	add	r7,r5,r6
    ace8:	21c0092e 	bgeu	r4,r7,ad10 <memmove+0x34>
    acec:	2187883a 	add	r3,r4,r6
    acf0:	198bc83a 	sub	r5,r3,r6
    acf4:	30004b26 	beq	r6,zero,ae24 <memmove+0x148>
    acf8:	39ffffc4 	addi	r7,r7,-1
    acfc:	39000003 	ldbu	r4,0(r7)
    ad00:	18ffffc4 	addi	r3,r3,-1
    ad04:	19000005 	stb	r4,0(r3)
    ad08:	197ffb1e 	bne	r3,r5,acf8 <__alt_mem_Flash_flash_data+0xf400acf8>
    ad0c:	f800283a 	ret
    ad10:	00c003c4 	movi	r3,15
    ad14:	1980412e 	bgeu	r3,r6,ae1c <memmove+0x140>
    ad18:	1146b03a 	or	r3,r2,r5
    ad1c:	18c000cc 	andi	r3,r3,3
    ad20:	1800411e 	bne	r3,zero,ae28 <memmove+0x14c>
    ad24:	33fffc04 	addi	r15,r6,-16
    ad28:	781ed13a 	srli	r15,r15,4
    ad2c:	28c00104 	addi	r3,r5,4
    ad30:	13400104 	addi	r13,r2,4
    ad34:	781c913a 	slli	r14,r15,4
    ad38:	2b000204 	addi	r12,r5,8
    ad3c:	12c00204 	addi	r11,r2,8
    ad40:	73800504 	addi	r14,r14,20
    ad44:	2a800304 	addi	r10,r5,12
    ad48:	12400304 	addi	r9,r2,12
    ad4c:	2b9d883a 	add	r14,r5,r14
    ad50:	2811883a 	mov	r8,r5
    ad54:	100f883a 	mov	r7,r2
    ad58:	41000017 	ldw	r4,0(r8)
    ad5c:	39c00404 	addi	r7,r7,16
    ad60:	18c00404 	addi	r3,r3,16
    ad64:	393ffc15 	stw	r4,-16(r7)
    ad68:	193ffc17 	ldw	r4,-16(r3)
    ad6c:	6b400404 	addi	r13,r13,16
    ad70:	5ac00404 	addi	r11,r11,16
    ad74:	693ffc15 	stw	r4,-16(r13)
    ad78:	61000017 	ldw	r4,0(r12)
    ad7c:	4a400404 	addi	r9,r9,16
    ad80:	42000404 	addi	r8,r8,16
    ad84:	593ffc15 	stw	r4,-16(r11)
    ad88:	51000017 	ldw	r4,0(r10)
    ad8c:	63000404 	addi	r12,r12,16
    ad90:	52800404 	addi	r10,r10,16
    ad94:	493ffc15 	stw	r4,-16(r9)
    ad98:	1bbfef1e 	bne	r3,r14,ad58 <__alt_mem_Flash_flash_data+0xf400ad58>
    ad9c:	79000044 	addi	r4,r15,1
    ada0:	2008913a 	slli	r4,r4,4
    ada4:	328003cc 	andi	r10,r6,15
    ada8:	02c000c4 	movi	r11,3
    adac:	1107883a 	add	r3,r2,r4
    adb0:	290b883a 	add	r5,r5,r4
    adb4:	5a801e2e 	bgeu	r11,r10,ae30 <memmove+0x154>
    adb8:	1813883a 	mov	r9,r3
    adbc:	2811883a 	mov	r8,r5
    adc0:	500f883a 	mov	r7,r10
    adc4:	41000017 	ldw	r4,0(r8)
    adc8:	4a400104 	addi	r9,r9,4
    adcc:	39ffff04 	addi	r7,r7,-4
    add0:	493fff15 	stw	r4,-4(r9)
    add4:	42000104 	addi	r8,r8,4
    add8:	59fffa36 	bltu	r11,r7,adc4 <__alt_mem_Flash_flash_data+0xf400adc4>
    addc:	513fff04 	addi	r4,r10,-4
    ade0:	2008d0ba 	srli	r4,r4,2
    ade4:	318000cc 	andi	r6,r6,3
    ade8:	21000044 	addi	r4,r4,1
    adec:	2109883a 	add	r4,r4,r4
    adf0:	2109883a 	add	r4,r4,r4
    adf4:	1907883a 	add	r3,r3,r4
    adf8:	290b883a 	add	r5,r5,r4
    adfc:	30000926 	beq	r6,zero,ae24 <memmove+0x148>
    ae00:	198d883a 	add	r6,r3,r6
    ae04:	29c00003 	ldbu	r7,0(r5)
    ae08:	18c00044 	addi	r3,r3,1
    ae0c:	29400044 	addi	r5,r5,1
    ae10:	19ffffc5 	stb	r7,-1(r3)
    ae14:	19bffb1e 	bne	r3,r6,ae04 <__alt_mem_Flash_flash_data+0xf400ae04>
    ae18:	f800283a 	ret
    ae1c:	1007883a 	mov	r3,r2
    ae20:	003ff606 	br	adfc <__alt_mem_Flash_flash_data+0xf400adfc>
    ae24:	f800283a 	ret
    ae28:	1007883a 	mov	r3,r2
    ae2c:	003ff406 	br	ae00 <__alt_mem_Flash_flash_data+0xf400ae00>
    ae30:	500d883a 	mov	r6,r10
    ae34:	003ff106 	br	adfc <__alt_mem_Flash_flash_data+0xf400adfc>

0000ae38 <memset>:
    ae38:	20c000cc 	andi	r3,r4,3
    ae3c:	2005883a 	mov	r2,r4
    ae40:	18004326 	beq	r3,zero,af50 <memset+0x118>
    ae44:	31ffffc4 	addi	r7,r6,-1
    ae48:	30004026 	beq	r6,zero,af4c <memset+0x114>
    ae4c:	2813883a 	mov	r9,r5
    ae50:	200d883a 	mov	r6,r4
    ae54:	2007883a 	mov	r3,r4
    ae58:	00000406 	br	ae6c <memset+0x34>
    ae5c:	3a3fffc4 	addi	r8,r7,-1
    ae60:	31800044 	addi	r6,r6,1
    ae64:	38003926 	beq	r7,zero,af4c <memset+0x114>
    ae68:	400f883a 	mov	r7,r8
    ae6c:	18c00044 	addi	r3,r3,1
    ae70:	32400005 	stb	r9,0(r6)
    ae74:	1a0000cc 	andi	r8,r3,3
    ae78:	403ff81e 	bne	r8,zero,ae5c <__alt_mem_Flash_flash_data+0xf400ae5c>
    ae7c:	010000c4 	movi	r4,3
    ae80:	21c02d2e 	bgeu	r4,r7,af38 <memset+0x100>
    ae84:	29803fcc 	andi	r6,r5,255
    ae88:	3008923a 	slli	r4,r6,8
    ae8c:	218cb03a 	or	r6,r4,r6
    ae90:	3008943a 	slli	r4,r6,16
    ae94:	218cb03a 	or	r6,r4,r6
    ae98:	010003c4 	movi	r4,15
    ae9c:	21c0182e 	bgeu	r4,r7,af00 <memset+0xc8>
    aea0:	3b3ffc04 	addi	r12,r7,-16
    aea4:	6018d13a 	srli	r12,r12,4
    aea8:	1a000104 	addi	r8,r3,4
    aeac:	1ac00204 	addi	r11,r3,8
    aeb0:	6008913a 	slli	r4,r12,4
    aeb4:	1a800304 	addi	r10,r3,12
    aeb8:	1813883a 	mov	r9,r3
    aebc:	21000504 	addi	r4,r4,20
    aec0:	1909883a 	add	r4,r3,r4
    aec4:	49800015 	stw	r6,0(r9)
    aec8:	41800015 	stw	r6,0(r8)
    aecc:	59800015 	stw	r6,0(r11)
    aed0:	51800015 	stw	r6,0(r10)
    aed4:	42000404 	addi	r8,r8,16
    aed8:	4a400404 	addi	r9,r9,16
    aedc:	5ac00404 	addi	r11,r11,16
    aee0:	52800404 	addi	r10,r10,16
    aee4:	413ff71e 	bne	r8,r4,aec4 <__alt_mem_Flash_flash_data+0xf400aec4>
    aee8:	63000044 	addi	r12,r12,1
    aeec:	6018913a 	slli	r12,r12,4
    aef0:	39c003cc 	andi	r7,r7,15
    aef4:	010000c4 	movi	r4,3
    aef8:	1b07883a 	add	r3,r3,r12
    aefc:	21c00e2e 	bgeu	r4,r7,af38 <memset+0x100>
    af00:	1813883a 	mov	r9,r3
    af04:	3811883a 	mov	r8,r7
    af08:	010000c4 	movi	r4,3
    af0c:	49800015 	stw	r6,0(r9)
    af10:	423fff04 	addi	r8,r8,-4
    af14:	4a400104 	addi	r9,r9,4
    af18:	223ffc36 	bltu	r4,r8,af0c <__alt_mem_Flash_flash_data+0xf400af0c>
    af1c:	393fff04 	addi	r4,r7,-4
    af20:	2008d0ba 	srli	r4,r4,2
    af24:	39c000cc 	andi	r7,r7,3
    af28:	21000044 	addi	r4,r4,1
    af2c:	2109883a 	add	r4,r4,r4
    af30:	2109883a 	add	r4,r4,r4
    af34:	1907883a 	add	r3,r3,r4
    af38:	38000426 	beq	r7,zero,af4c <memset+0x114>
    af3c:	19cf883a 	add	r7,r3,r7
    af40:	19400005 	stb	r5,0(r3)
    af44:	18c00044 	addi	r3,r3,1
    af48:	19fffd1e 	bne	r3,r7,af40 <__alt_mem_Flash_flash_data+0xf400af40>
    af4c:	f800283a 	ret
    af50:	2007883a 	mov	r3,r4
    af54:	300f883a 	mov	r7,r6
    af58:	003fc806 	br	ae7c <__alt_mem_Flash_flash_data+0xf400ae7c>

0000af5c <_Balloc>:
    af5c:	20801317 	ldw	r2,76(r4)
    af60:	defffc04 	addi	sp,sp,-16
    af64:	dc400115 	stw	r17,4(sp)
    af68:	dc000015 	stw	r16,0(sp)
    af6c:	dfc00315 	stw	ra,12(sp)
    af70:	dc800215 	stw	r18,8(sp)
    af74:	2023883a 	mov	r17,r4
    af78:	2821883a 	mov	r16,r5
    af7c:	10000f26 	beq	r2,zero,afbc <_Balloc+0x60>
    af80:	8407883a 	add	r3,r16,r16
    af84:	18c7883a 	add	r3,r3,r3
    af88:	10c7883a 	add	r3,r2,r3
    af8c:	18800017 	ldw	r2,0(r3)
    af90:	10001126 	beq	r2,zero,afd8 <_Balloc+0x7c>
    af94:	11000017 	ldw	r4,0(r2)
    af98:	19000015 	stw	r4,0(r3)
    af9c:	10000415 	stw	zero,16(r2)
    afa0:	10000315 	stw	zero,12(r2)
    afa4:	dfc00317 	ldw	ra,12(sp)
    afa8:	dc800217 	ldw	r18,8(sp)
    afac:	dc400117 	ldw	r17,4(sp)
    afb0:	dc000017 	ldw	r16,0(sp)
    afb4:	dec00404 	addi	sp,sp,16
    afb8:	f800283a 	ret
    afbc:	01400104 	movi	r5,4
    afc0:	01800844 	movi	r6,33
    afc4:	000ee840 	call	ee84 <_calloc_r>
    afc8:	88801315 	stw	r2,76(r17)
    afcc:	103fec1e 	bne	r2,zero,af80 <__alt_mem_Flash_flash_data+0xf400af80>
    afd0:	0005883a 	mov	r2,zero
    afd4:	003ff306 	br	afa4 <__alt_mem_Flash_flash_data+0xf400afa4>
    afd8:	01400044 	movi	r5,1
    afdc:	2c24983a 	sll	r18,r5,r16
    afe0:	8809883a 	mov	r4,r17
    afe4:	91800144 	addi	r6,r18,5
    afe8:	318d883a 	add	r6,r6,r6
    afec:	318d883a 	add	r6,r6,r6
    aff0:	000ee840 	call	ee84 <_calloc_r>
    aff4:	103ff626 	beq	r2,zero,afd0 <__alt_mem_Flash_flash_data+0xf400afd0>
    aff8:	14000115 	stw	r16,4(r2)
    affc:	14800215 	stw	r18,8(r2)
    b000:	003fe606 	br	af9c <__alt_mem_Flash_flash_data+0xf400af9c>

0000b004 <_Bfree>:
    b004:	28000826 	beq	r5,zero,b028 <_Bfree+0x24>
    b008:	28c00117 	ldw	r3,4(r5)
    b00c:	20801317 	ldw	r2,76(r4)
    b010:	18c7883a 	add	r3,r3,r3
    b014:	18c7883a 	add	r3,r3,r3
    b018:	10c5883a 	add	r2,r2,r3
    b01c:	10c00017 	ldw	r3,0(r2)
    b020:	28c00015 	stw	r3,0(r5)
    b024:	11400015 	stw	r5,0(r2)
    b028:	f800283a 	ret

0000b02c <__multadd>:
    b02c:	defffa04 	addi	sp,sp,-24
    b030:	dc000115 	stw	r16,4(sp)
    b034:	2c000417 	ldw	r16,16(r5)
    b038:	dc800315 	stw	r18,12(sp)
    b03c:	dc400215 	stw	r17,8(sp)
    b040:	dfc00515 	stw	ra,20(sp)
    b044:	dcc00415 	stw	r19,16(sp)
    b048:	2823883a 	mov	r17,r5
    b04c:	2025883a 	mov	r18,r4
    b050:	2a400504 	addi	r9,r5,20
    b054:	0015883a 	mov	r10,zero
    b058:	4a000017 	ldw	r8,0(r9)
    b05c:	4a400104 	addi	r9,r9,4
    b060:	52800044 	addi	r10,r10,1
    b064:	40ffffcc 	andi	r3,r8,65535
    b068:	1987383a 	mul	r3,r3,r6
    b06c:	4010d43a 	srli	r8,r8,16
    b070:	19cf883a 	add	r7,r3,r7
    b074:	4191383a 	mul	r8,r8,r6
    b078:	3816d43a 	srli	r11,r7,16
    b07c:	38ffffcc 	andi	r3,r7,65535
    b080:	5a0f883a 	add	r7,r11,r8
    b084:	3810943a 	slli	r8,r7,16
    b088:	380ed43a 	srli	r7,r7,16
    b08c:	40c7883a 	add	r3,r8,r3
    b090:	48ffff15 	stw	r3,-4(r9)
    b094:	543ff016 	blt	r10,r16,b058 <__alt_mem_Flash_flash_data+0xf400b058>
    b098:	38000926 	beq	r7,zero,b0c0 <__multadd+0x94>
    b09c:	88800217 	ldw	r2,8(r17)
    b0a0:	80800f0e 	bge	r16,r2,b0e0 <__multadd+0xb4>
    b0a4:	80800144 	addi	r2,r16,5
    b0a8:	1085883a 	add	r2,r2,r2
    b0ac:	1085883a 	add	r2,r2,r2
    b0b0:	8885883a 	add	r2,r17,r2
    b0b4:	11c00015 	stw	r7,0(r2)
    b0b8:	84000044 	addi	r16,r16,1
    b0bc:	8c000415 	stw	r16,16(r17)
    b0c0:	8805883a 	mov	r2,r17
    b0c4:	dfc00517 	ldw	ra,20(sp)
    b0c8:	dcc00417 	ldw	r19,16(sp)
    b0cc:	dc800317 	ldw	r18,12(sp)
    b0d0:	dc400217 	ldw	r17,8(sp)
    b0d4:	dc000117 	ldw	r16,4(sp)
    b0d8:	dec00604 	addi	sp,sp,24
    b0dc:	f800283a 	ret
    b0e0:	89400117 	ldw	r5,4(r17)
    b0e4:	9009883a 	mov	r4,r18
    b0e8:	d9c00015 	stw	r7,0(sp)
    b0ec:	29400044 	addi	r5,r5,1
    b0f0:	000af5c0 	call	af5c <_Balloc>
    b0f4:	89800417 	ldw	r6,16(r17)
    b0f8:	11000304 	addi	r4,r2,12
    b0fc:	89400304 	addi	r5,r17,12
    b100:	31800084 	addi	r6,r6,2
    b104:	318d883a 	add	r6,r6,r6
    b108:	318d883a 	add	r6,r6,r6
    b10c:	1027883a 	mov	r19,r2
    b110:	000aba40 	call	aba4 <memcpy>
    b114:	d9c00017 	ldw	r7,0(sp)
    b118:	88000a26 	beq	r17,zero,b144 <__multadd+0x118>
    b11c:	89000117 	ldw	r4,4(r17)
    b120:	90c01317 	ldw	r3,76(r18)
    b124:	2109883a 	add	r4,r4,r4
    b128:	2109883a 	add	r4,r4,r4
    b12c:	1907883a 	add	r3,r3,r4
    b130:	18800017 	ldw	r2,0(r3)
    b134:	88800015 	stw	r2,0(r17)
    b138:	1c400015 	stw	r17,0(r3)
    b13c:	9823883a 	mov	r17,r19
    b140:	003fd806 	br	b0a4 <__alt_mem_Flash_flash_data+0xf400b0a4>
    b144:	9823883a 	mov	r17,r19
    b148:	003fd606 	br	b0a4 <__alt_mem_Flash_flash_data+0xf400b0a4>

0000b14c <__s2b>:
    b14c:	defff904 	addi	sp,sp,-28
    b150:	dc400115 	stw	r17,4(sp)
    b154:	dc000015 	stw	r16,0(sp)
    b158:	2023883a 	mov	r17,r4
    b15c:	2821883a 	mov	r16,r5
    b160:	39000204 	addi	r4,r7,8
    b164:	01400244 	movi	r5,9
    b168:	dcc00315 	stw	r19,12(sp)
    b16c:	dc800215 	stw	r18,8(sp)
    b170:	dfc00615 	stw	ra,24(sp)
    b174:	dd400515 	stw	r21,20(sp)
    b178:	dd000415 	stw	r20,16(sp)
    b17c:	3825883a 	mov	r18,r7
    b180:	3027883a 	mov	r19,r6
    b184:	00102880 	call	10288 <__divsi3>
    b188:	00c00044 	movi	r3,1
    b18c:	000b883a 	mov	r5,zero
    b190:	1880030e 	bge	r3,r2,b1a0 <__s2b+0x54>
    b194:	18c7883a 	add	r3,r3,r3
    b198:	29400044 	addi	r5,r5,1
    b19c:	18bffd16 	blt	r3,r2,b194 <__alt_mem_Flash_flash_data+0xf400b194>
    b1a0:	8809883a 	mov	r4,r17
    b1a4:	000af5c0 	call	af5c <_Balloc>
    b1a8:	d8c00717 	ldw	r3,28(sp)
    b1ac:	10c00515 	stw	r3,20(r2)
    b1b0:	00c00044 	movi	r3,1
    b1b4:	10c00415 	stw	r3,16(r2)
    b1b8:	00c00244 	movi	r3,9
    b1bc:	1cc0210e 	bge	r3,r19,b244 <__s2b+0xf8>
    b1c0:	80eb883a 	add	r21,r16,r3
    b1c4:	a829883a 	mov	r20,r21
    b1c8:	84e1883a 	add	r16,r16,r19
    b1cc:	a1c00007 	ldb	r7,0(r20)
    b1d0:	8809883a 	mov	r4,r17
    b1d4:	a5000044 	addi	r20,r20,1
    b1d8:	100b883a 	mov	r5,r2
    b1dc:	01800284 	movi	r6,10
    b1e0:	39fff404 	addi	r7,r7,-48
    b1e4:	000b02c0 	call	b02c <__multadd>
    b1e8:	a43ff81e 	bne	r20,r16,b1cc <__alt_mem_Flash_flash_data+0xf400b1cc>
    b1ec:	ace1883a 	add	r16,r21,r19
    b1f0:	843ffe04 	addi	r16,r16,-8
    b1f4:	9c800a0e 	bge	r19,r18,b220 <__s2b+0xd4>
    b1f8:	94e5c83a 	sub	r18,r18,r19
    b1fc:	84a5883a 	add	r18,r16,r18
    b200:	81c00007 	ldb	r7,0(r16)
    b204:	8809883a 	mov	r4,r17
    b208:	84000044 	addi	r16,r16,1
    b20c:	100b883a 	mov	r5,r2
    b210:	01800284 	movi	r6,10
    b214:	39fff404 	addi	r7,r7,-48
    b218:	000b02c0 	call	b02c <__multadd>
    b21c:	84bff81e 	bne	r16,r18,b200 <__alt_mem_Flash_flash_data+0xf400b200>
    b220:	dfc00617 	ldw	ra,24(sp)
    b224:	dd400517 	ldw	r21,20(sp)
    b228:	dd000417 	ldw	r20,16(sp)
    b22c:	dcc00317 	ldw	r19,12(sp)
    b230:	dc800217 	ldw	r18,8(sp)
    b234:	dc400117 	ldw	r17,4(sp)
    b238:	dc000017 	ldw	r16,0(sp)
    b23c:	dec00704 	addi	sp,sp,28
    b240:	f800283a 	ret
    b244:	84000284 	addi	r16,r16,10
    b248:	1827883a 	mov	r19,r3
    b24c:	003fe906 	br	b1f4 <__alt_mem_Flash_flash_data+0xf400b1f4>

0000b250 <__hi0bits>:
    b250:	20bfffec 	andhi	r2,r4,65535
    b254:	1000141e 	bne	r2,zero,b2a8 <__hi0bits+0x58>
    b258:	2008943a 	slli	r4,r4,16
    b25c:	00800404 	movi	r2,16
    b260:	20ffc02c 	andhi	r3,r4,65280
    b264:	1800021e 	bne	r3,zero,b270 <__hi0bits+0x20>
    b268:	2008923a 	slli	r4,r4,8
    b26c:	10800204 	addi	r2,r2,8
    b270:	20fc002c 	andhi	r3,r4,61440
    b274:	1800021e 	bne	r3,zero,b280 <__hi0bits+0x30>
    b278:	2008913a 	slli	r4,r4,4
    b27c:	10800104 	addi	r2,r2,4
    b280:	20f0002c 	andhi	r3,r4,49152
    b284:	1800031e 	bne	r3,zero,b294 <__hi0bits+0x44>
    b288:	2109883a 	add	r4,r4,r4
    b28c:	10800084 	addi	r2,r2,2
    b290:	2109883a 	add	r4,r4,r4
    b294:	20000316 	blt	r4,zero,b2a4 <__hi0bits+0x54>
    b298:	2110002c 	andhi	r4,r4,16384
    b29c:	2000041e 	bne	r4,zero,b2b0 <__hi0bits+0x60>
    b2a0:	00800804 	movi	r2,32
    b2a4:	f800283a 	ret
    b2a8:	0005883a 	mov	r2,zero
    b2ac:	003fec06 	br	b260 <__alt_mem_Flash_flash_data+0xf400b260>
    b2b0:	10800044 	addi	r2,r2,1
    b2b4:	f800283a 	ret

0000b2b8 <__lo0bits>:
    b2b8:	20c00017 	ldw	r3,0(r4)
    b2bc:	188001cc 	andi	r2,r3,7
    b2c0:	10000826 	beq	r2,zero,b2e4 <__lo0bits+0x2c>
    b2c4:	1880004c 	andi	r2,r3,1
    b2c8:	1000211e 	bne	r2,zero,b350 <__lo0bits+0x98>
    b2cc:	1880008c 	andi	r2,r3,2
    b2d0:	1000211e 	bne	r2,zero,b358 <__lo0bits+0xa0>
    b2d4:	1806d0ba 	srli	r3,r3,2
    b2d8:	00800084 	movi	r2,2
    b2dc:	20c00015 	stw	r3,0(r4)
    b2e0:	f800283a 	ret
    b2e4:	18bfffcc 	andi	r2,r3,65535
    b2e8:	10001326 	beq	r2,zero,b338 <__lo0bits+0x80>
    b2ec:	0005883a 	mov	r2,zero
    b2f0:	19403fcc 	andi	r5,r3,255
    b2f4:	2800021e 	bne	r5,zero,b300 <__lo0bits+0x48>
    b2f8:	1806d23a 	srli	r3,r3,8
    b2fc:	10800204 	addi	r2,r2,8
    b300:	194003cc 	andi	r5,r3,15
    b304:	2800021e 	bne	r5,zero,b310 <__lo0bits+0x58>
    b308:	1806d13a 	srli	r3,r3,4
    b30c:	10800104 	addi	r2,r2,4
    b310:	194000cc 	andi	r5,r3,3
    b314:	2800021e 	bne	r5,zero,b320 <__lo0bits+0x68>
    b318:	1806d0ba 	srli	r3,r3,2
    b31c:	10800084 	addi	r2,r2,2
    b320:	1940004c 	andi	r5,r3,1
    b324:	2800081e 	bne	r5,zero,b348 <__lo0bits+0x90>
    b328:	1806d07a 	srli	r3,r3,1
    b32c:	1800051e 	bne	r3,zero,b344 <__lo0bits+0x8c>
    b330:	00800804 	movi	r2,32
    b334:	f800283a 	ret
    b338:	1806d43a 	srli	r3,r3,16
    b33c:	00800404 	movi	r2,16
    b340:	003feb06 	br	b2f0 <__alt_mem_Flash_flash_data+0xf400b2f0>
    b344:	10800044 	addi	r2,r2,1
    b348:	20c00015 	stw	r3,0(r4)
    b34c:	f800283a 	ret
    b350:	0005883a 	mov	r2,zero
    b354:	f800283a 	ret
    b358:	1806d07a 	srli	r3,r3,1
    b35c:	00800044 	movi	r2,1
    b360:	20c00015 	stw	r3,0(r4)
    b364:	f800283a 	ret

0000b368 <__i2b>:
    b368:	defffd04 	addi	sp,sp,-12
    b36c:	dc000015 	stw	r16,0(sp)
    b370:	04000044 	movi	r16,1
    b374:	dc400115 	stw	r17,4(sp)
    b378:	2823883a 	mov	r17,r5
    b37c:	800b883a 	mov	r5,r16
    b380:	dfc00215 	stw	ra,8(sp)
    b384:	000af5c0 	call	af5c <_Balloc>
    b388:	14400515 	stw	r17,20(r2)
    b38c:	14000415 	stw	r16,16(r2)
    b390:	dfc00217 	ldw	ra,8(sp)
    b394:	dc400117 	ldw	r17,4(sp)
    b398:	dc000017 	ldw	r16,0(sp)
    b39c:	dec00304 	addi	sp,sp,12
    b3a0:	f800283a 	ret

0000b3a4 <__multiply>:
    b3a4:	defffa04 	addi	sp,sp,-24
    b3a8:	dcc00315 	stw	r19,12(sp)
    b3ac:	dc800215 	stw	r18,8(sp)
    b3b0:	2cc00417 	ldw	r19,16(r5)
    b3b4:	34800417 	ldw	r18,16(r6)
    b3b8:	dd000415 	stw	r20,16(sp)
    b3bc:	dc400115 	stw	r17,4(sp)
    b3c0:	dfc00515 	stw	ra,20(sp)
    b3c4:	dc000015 	stw	r16,0(sp)
    b3c8:	2829883a 	mov	r20,r5
    b3cc:	3023883a 	mov	r17,r6
    b3d0:	9c807016 	blt	r19,r18,b594 <__multiply+0x1f0>
    b3d4:	9005883a 	mov	r2,r18
    b3d8:	9825883a 	mov	r18,r19
    b3dc:	1027883a 	mov	r19,r2
    b3e0:	a0800217 	ldw	r2,8(r20)
    b3e4:	94e1883a 	add	r16,r18,r19
    b3e8:	a1400117 	ldw	r5,4(r20)
    b3ec:	1400010e 	bge	r2,r16,b3f4 <__multiply+0x50>
    b3f0:	29400044 	addi	r5,r5,1
    b3f4:	000af5c0 	call	af5c <_Balloc>
    b3f8:	8417883a 	add	r11,r16,r16
    b3fc:	13000504 	addi	r12,r2,20
    b400:	5ad7883a 	add	r11,r11,r11
    b404:	62d7883a 	add	r11,r12,r11
    b408:	6007883a 	mov	r3,r12
    b40c:	62c0032e 	bgeu	r12,r11,b41c <__multiply+0x78>
    b410:	18000015 	stw	zero,0(r3)
    b414:	18c00104 	addi	r3,r3,4
    b418:	1afffd36 	bltu	r3,r11,b410 <__alt_mem_Flash_flash_data+0xf400b410>
    b41c:	9ce7883a 	add	r19,r19,r19
    b420:	94a5883a 	add	r18,r18,r18
    b424:	89800504 	addi	r6,r17,20
    b428:	9ce7883a 	add	r19,r19,r19
    b42c:	a3800504 	addi	r14,r20,20
    b430:	94a5883a 	add	r18,r18,r18
    b434:	34db883a 	add	r13,r6,r19
    b438:	7495883a 	add	r10,r14,r18
    b43c:	3340422e 	bgeu	r6,r13,b548 <__multiply+0x1a4>
    b440:	34400017 	ldw	r17,0(r6)
    b444:	8cbfffcc 	andi	r18,r17,65535
    b448:	90001b26 	beq	r18,zero,b4b8 <__multiply+0x114>
    b44c:	6013883a 	mov	r9,r12
    b450:	7023883a 	mov	r17,r14
    b454:	0011883a 	mov	r8,zero
    b458:	88c00017 	ldw	r3,0(r17)
    b45c:	4bc00017 	ldw	r15,0(r9)
    b460:	8c400104 	addi	r17,r17,4
    b464:	19ffffcc 	andi	r7,r3,65535
    b468:	3c8f383a 	mul	r7,r7,r18
    b46c:	1808d43a 	srli	r4,r3,16
    b470:	797fffcc 	andi	r5,r15,65535
    b474:	29cb883a 	add	r5,r5,r7
    b478:	2a0b883a 	add	r5,r5,r8
    b47c:	2489383a 	mul	r4,r4,r18
    b480:	7806d43a 	srli	r3,r15,16
    b484:	2810d43a 	srli	r8,r5,16
    b488:	297fffcc 	andi	r5,r5,65535
    b48c:	1907883a 	add	r3,r3,r4
    b490:	1a07883a 	add	r3,r3,r8
    b494:	1808943a 	slli	r4,r3,16
    b498:	480f883a 	mov	r7,r9
    b49c:	1810d43a 	srli	r8,r3,16
    b4a0:	214ab03a 	or	r5,r4,r5
    b4a4:	49400015 	stw	r5,0(r9)
    b4a8:	4a400104 	addi	r9,r9,4
    b4ac:	8abfea36 	bltu	r17,r10,b458 <__alt_mem_Flash_flash_data+0xf400b458>
    b4b0:	3a000115 	stw	r8,4(r7)
    b4b4:	34400017 	ldw	r17,0(r6)
    b4b8:	8822d43a 	srli	r17,r17,16
    b4bc:	88001f26 	beq	r17,zero,b53c <__multiply+0x198>
    b4c0:	60c00017 	ldw	r3,0(r12)
    b4c4:	7013883a 	mov	r9,r14
    b4c8:	601f883a 	mov	r15,r12
    b4cc:	1811883a 	mov	r8,r3
    b4d0:	6027883a 	mov	r19,r12
    b4d4:	000f883a 	mov	r7,zero
    b4d8:	00000106 	br	b4e0 <__multiply+0x13c>
    b4dc:	9027883a 	mov	r19,r18
    b4e0:	4940000b 	ldhu	r5,0(r9)
    b4e4:	4010d43a 	srli	r8,r8,16
    b4e8:	193fffcc 	andi	r4,r3,65535
    b4ec:	2c4b383a 	mul	r5,r5,r17
    b4f0:	7bc00104 	addi	r15,r15,4
    b4f4:	4a400104 	addi	r9,r9,4
    b4f8:	2a0b883a 	add	r5,r5,r8
    b4fc:	29cb883a 	add	r5,r5,r7
    b500:	2806943a 	slli	r3,r5,16
    b504:	9c800104 	addi	r18,r19,4
    b508:	280ad43a 	srli	r5,r5,16
    b50c:	1908b03a 	or	r4,r3,r4
    b510:	793fff15 	stw	r4,-4(r15)
    b514:	48ffff17 	ldw	r3,-4(r9)
    b518:	92000017 	ldw	r8,0(r18)
    b51c:	1806d43a 	srli	r3,r3,16
    b520:	413fffcc 	andi	r4,r8,65535
    b524:	1c47383a 	mul	r3,r3,r17
    b528:	1907883a 	add	r3,r3,r4
    b52c:	1947883a 	add	r3,r3,r5
    b530:	180ed43a 	srli	r7,r3,16
    b534:	4abfe936 	bltu	r9,r10,b4dc <__alt_mem_Flash_flash_data+0xf400b4dc>
    b538:	98c00115 	stw	r3,4(r19)
    b53c:	31800104 	addi	r6,r6,4
    b540:	63000104 	addi	r12,r12,4
    b544:	337fbe36 	bltu	r6,r13,b440 <__alt_mem_Flash_flash_data+0xf400b440>
    b548:	0400090e 	bge	zero,r16,b570 <__multiply+0x1cc>
    b54c:	58ffff17 	ldw	r3,-4(r11)
    b550:	5affff04 	addi	r11,r11,-4
    b554:	18000326 	beq	r3,zero,b564 <__multiply+0x1c0>
    b558:	00000506 	br	b570 <__multiply+0x1cc>
    b55c:	58c00017 	ldw	r3,0(r11)
    b560:	1800031e 	bne	r3,zero,b570 <__multiply+0x1cc>
    b564:	843fffc4 	addi	r16,r16,-1
    b568:	5affff04 	addi	r11,r11,-4
    b56c:	803ffb1e 	bne	r16,zero,b55c <__alt_mem_Flash_flash_data+0xf400b55c>
    b570:	14000415 	stw	r16,16(r2)
    b574:	dfc00517 	ldw	ra,20(sp)
    b578:	dd000417 	ldw	r20,16(sp)
    b57c:	dcc00317 	ldw	r19,12(sp)
    b580:	dc800217 	ldw	r18,8(sp)
    b584:	dc400117 	ldw	r17,4(sp)
    b588:	dc000017 	ldw	r16,0(sp)
    b58c:	dec00604 	addi	sp,sp,24
    b590:	f800283a 	ret
    b594:	3029883a 	mov	r20,r6
    b598:	2823883a 	mov	r17,r5
    b59c:	003f9006 	br	b3e0 <__alt_mem_Flash_flash_data+0xf400b3e0>

0000b5a0 <__pow5mult>:
    b5a0:	defffa04 	addi	sp,sp,-24
    b5a4:	dcc00315 	stw	r19,12(sp)
    b5a8:	dc800215 	stw	r18,8(sp)
    b5ac:	dc000015 	stw	r16,0(sp)
    b5b0:	dfc00515 	stw	ra,20(sp)
    b5b4:	dd000415 	stw	r20,16(sp)
    b5b8:	dc400115 	stw	r17,4(sp)
    b5bc:	308000cc 	andi	r2,r6,3
    b5c0:	3021883a 	mov	r16,r6
    b5c4:	2027883a 	mov	r19,r4
    b5c8:	2825883a 	mov	r18,r5
    b5cc:	10002e1e 	bne	r2,zero,b688 <__pow5mult+0xe8>
    b5d0:	8021d0ba 	srai	r16,r16,2
    b5d4:	80001a26 	beq	r16,zero,b640 <__pow5mult+0xa0>
    b5d8:	9c401217 	ldw	r17,72(r19)
    b5dc:	8800061e 	bne	r17,zero,b5f8 <__pow5mult+0x58>
    b5e0:	00003406 	br	b6b4 <__pow5mult+0x114>
    b5e4:	8021d07a 	srai	r16,r16,1
    b5e8:	80001526 	beq	r16,zero,b640 <__pow5mult+0xa0>
    b5ec:	88800017 	ldw	r2,0(r17)
    b5f0:	10001c26 	beq	r2,zero,b664 <__pow5mult+0xc4>
    b5f4:	1023883a 	mov	r17,r2
    b5f8:	80c0004c 	andi	r3,r16,1
    b5fc:	183ff926 	beq	r3,zero,b5e4 <__alt_mem_Flash_flash_data+0xf400b5e4>
    b600:	900b883a 	mov	r5,r18
    b604:	880d883a 	mov	r6,r17
    b608:	9809883a 	mov	r4,r19
    b60c:	000b3a40 	call	b3a4 <__multiply>
    b610:	90001b26 	beq	r18,zero,b680 <__pow5mult+0xe0>
    b614:	91c00117 	ldw	r7,4(r18)
    b618:	98c01317 	ldw	r3,76(r19)
    b61c:	8021d07a 	srai	r16,r16,1
    b620:	39cf883a 	add	r7,r7,r7
    b624:	39cf883a 	add	r7,r7,r7
    b628:	19c7883a 	add	r3,r3,r7
    b62c:	19000017 	ldw	r4,0(r3)
    b630:	91000015 	stw	r4,0(r18)
    b634:	1c800015 	stw	r18,0(r3)
    b638:	1025883a 	mov	r18,r2
    b63c:	803feb1e 	bne	r16,zero,b5ec <__alt_mem_Flash_flash_data+0xf400b5ec>
    b640:	9005883a 	mov	r2,r18
    b644:	dfc00517 	ldw	ra,20(sp)
    b648:	dd000417 	ldw	r20,16(sp)
    b64c:	dcc00317 	ldw	r19,12(sp)
    b650:	dc800217 	ldw	r18,8(sp)
    b654:	dc400117 	ldw	r17,4(sp)
    b658:	dc000017 	ldw	r16,0(sp)
    b65c:	dec00604 	addi	sp,sp,24
    b660:	f800283a 	ret
    b664:	9809883a 	mov	r4,r19
    b668:	880b883a 	mov	r5,r17
    b66c:	880d883a 	mov	r6,r17
    b670:	000b3a40 	call	b3a4 <__multiply>
    b674:	88800015 	stw	r2,0(r17)
    b678:	10000015 	stw	zero,0(r2)
    b67c:	003fdd06 	br	b5f4 <__alt_mem_Flash_flash_data+0xf400b5f4>
    b680:	1025883a 	mov	r18,r2
    b684:	003fd706 	br	b5e4 <__alt_mem_Flash_flash_data+0xf400b5e4>
    b688:	10bfffc4 	addi	r2,r2,-1
    b68c:	1085883a 	add	r2,r2,r2
    b690:	00c000b4 	movhi	r3,2
    b694:	18c0a904 	addi	r3,r3,676
    b698:	1085883a 	add	r2,r2,r2
    b69c:	1885883a 	add	r2,r3,r2
    b6a0:	11800017 	ldw	r6,0(r2)
    b6a4:	000f883a 	mov	r7,zero
    b6a8:	000b02c0 	call	b02c <__multadd>
    b6ac:	1025883a 	mov	r18,r2
    b6b0:	003fc706 	br	b5d0 <__alt_mem_Flash_flash_data+0xf400b5d0>
    b6b4:	05000044 	movi	r20,1
    b6b8:	9809883a 	mov	r4,r19
    b6bc:	a00b883a 	mov	r5,r20
    b6c0:	000af5c0 	call	af5c <_Balloc>
    b6c4:	1023883a 	mov	r17,r2
    b6c8:	00809c44 	movi	r2,625
    b6cc:	88800515 	stw	r2,20(r17)
    b6d0:	8d000415 	stw	r20,16(r17)
    b6d4:	9c401215 	stw	r17,72(r19)
    b6d8:	88000015 	stw	zero,0(r17)
    b6dc:	003fc606 	br	b5f8 <__alt_mem_Flash_flash_data+0xf400b5f8>

0000b6e0 <__lshift>:
    b6e0:	defff904 	addi	sp,sp,-28
    b6e4:	dd000415 	stw	r20,16(sp)
    b6e8:	dcc00315 	stw	r19,12(sp)
    b6ec:	3029d17a 	srai	r20,r6,5
    b6f0:	2cc00417 	ldw	r19,16(r5)
    b6f4:	28800217 	ldw	r2,8(r5)
    b6f8:	dd400515 	stw	r21,20(sp)
    b6fc:	a4e7883a 	add	r19,r20,r19
    b700:	dc800215 	stw	r18,8(sp)
    b704:	dc400115 	stw	r17,4(sp)
    b708:	dc000015 	stw	r16,0(sp)
    b70c:	dfc00615 	stw	ra,24(sp)
    b710:	9c000044 	addi	r16,r19,1
    b714:	2823883a 	mov	r17,r5
    b718:	302b883a 	mov	r21,r6
    b71c:	2025883a 	mov	r18,r4
    b720:	29400117 	ldw	r5,4(r5)
    b724:	1400030e 	bge	r2,r16,b734 <__lshift+0x54>
    b728:	1085883a 	add	r2,r2,r2
    b72c:	29400044 	addi	r5,r5,1
    b730:	143ffd16 	blt	r2,r16,b728 <__alt_mem_Flash_flash_data+0xf400b728>
    b734:	9009883a 	mov	r4,r18
    b738:	000af5c0 	call	af5c <_Balloc>
    b73c:	11c00504 	addi	r7,r2,20
    b740:	0500090e 	bge	zero,r20,b768 <__lshift+0x88>
    b744:	3811883a 	mov	r8,r7
    b748:	0007883a 	mov	r3,zero
    b74c:	40000015 	stw	zero,0(r8)
    b750:	18c00044 	addi	r3,r3,1
    b754:	42000104 	addi	r8,r8,4
    b758:	1d3ffc1e 	bne	r3,r20,b74c <__alt_mem_Flash_flash_data+0xf400b74c>
    b75c:	18c7883a 	add	r3,r3,r3
    b760:	18c7883a 	add	r3,r3,r3
    b764:	38cf883a 	add	r7,r7,r3
    b768:	89000417 	ldw	r4,16(r17)
    b76c:	88c00504 	addi	r3,r17,20
    b770:	a98007cc 	andi	r6,r21,31
    b774:	2109883a 	add	r4,r4,r4
    b778:	2109883a 	add	r4,r4,r4
    b77c:	1909883a 	add	r4,r3,r4
    b780:	30002326 	beq	r6,zero,b810 <__lshift+0x130>
    b784:	01400804 	movi	r5,32
    b788:	298bc83a 	sub	r5,r5,r6
    b78c:	0013883a 	mov	r9,zero
    b790:	1a000017 	ldw	r8,0(r3)
    b794:	3815883a 	mov	r10,r7
    b798:	39c00104 	addi	r7,r7,4
    b79c:	4190983a 	sll	r8,r8,r6
    b7a0:	18c00104 	addi	r3,r3,4
    b7a4:	4a10b03a 	or	r8,r9,r8
    b7a8:	3a3fff15 	stw	r8,-4(r7)
    b7ac:	1a3fff17 	ldw	r8,-4(r3)
    b7b0:	4152d83a 	srl	r9,r8,r5
    b7b4:	193ff636 	bltu	r3,r4,b790 <__alt_mem_Flash_flash_data+0xf400b790>
    b7b8:	52400115 	stw	r9,4(r10)
    b7bc:	48001a1e 	bne	r9,zero,b828 <__lshift+0x148>
    b7c0:	843fffc4 	addi	r16,r16,-1
    b7c4:	14000415 	stw	r16,16(r2)
    b7c8:	88000826 	beq	r17,zero,b7ec <__lshift+0x10c>
    b7cc:	89000117 	ldw	r4,4(r17)
    b7d0:	90c01317 	ldw	r3,76(r18)
    b7d4:	2109883a 	add	r4,r4,r4
    b7d8:	2109883a 	add	r4,r4,r4
    b7dc:	1907883a 	add	r3,r3,r4
    b7e0:	19000017 	ldw	r4,0(r3)
    b7e4:	89000015 	stw	r4,0(r17)
    b7e8:	1c400015 	stw	r17,0(r3)
    b7ec:	dfc00617 	ldw	ra,24(sp)
    b7f0:	dd400517 	ldw	r21,20(sp)
    b7f4:	dd000417 	ldw	r20,16(sp)
    b7f8:	dcc00317 	ldw	r19,12(sp)
    b7fc:	dc800217 	ldw	r18,8(sp)
    b800:	dc400117 	ldw	r17,4(sp)
    b804:	dc000017 	ldw	r16,0(sp)
    b808:	dec00704 	addi	sp,sp,28
    b80c:	f800283a 	ret
    b810:	19400017 	ldw	r5,0(r3)
    b814:	39c00104 	addi	r7,r7,4
    b818:	18c00104 	addi	r3,r3,4
    b81c:	397fff15 	stw	r5,-4(r7)
    b820:	193ffb36 	bltu	r3,r4,b810 <__alt_mem_Flash_flash_data+0xf400b810>
    b824:	003fe606 	br	b7c0 <__alt_mem_Flash_flash_data+0xf400b7c0>
    b828:	9c000084 	addi	r16,r19,2
    b82c:	003fe406 	br	b7c0 <__alt_mem_Flash_flash_data+0xf400b7c0>

0000b830 <__mcmp>:
    b830:	20800417 	ldw	r2,16(r4)
    b834:	28c00417 	ldw	r3,16(r5)
    b838:	10c5c83a 	sub	r2,r2,r3
    b83c:	1000111e 	bne	r2,zero,b884 <__mcmp+0x54>
    b840:	18c7883a 	add	r3,r3,r3
    b844:	18c7883a 	add	r3,r3,r3
    b848:	21000504 	addi	r4,r4,20
    b84c:	29400504 	addi	r5,r5,20
    b850:	20c5883a 	add	r2,r4,r3
    b854:	28cb883a 	add	r5,r5,r3
    b858:	00000106 	br	b860 <__mcmp+0x30>
    b85c:	20800a2e 	bgeu	r4,r2,b888 <__mcmp+0x58>
    b860:	10bfff04 	addi	r2,r2,-4
    b864:	297fff04 	addi	r5,r5,-4
    b868:	11800017 	ldw	r6,0(r2)
    b86c:	28c00017 	ldw	r3,0(r5)
    b870:	30fffa26 	beq	r6,r3,b85c <__alt_mem_Flash_flash_data+0xf400b85c>
    b874:	30c00236 	bltu	r6,r3,b880 <__mcmp+0x50>
    b878:	00800044 	movi	r2,1
    b87c:	f800283a 	ret
    b880:	00bfffc4 	movi	r2,-1
    b884:	f800283a 	ret
    b888:	0005883a 	mov	r2,zero
    b88c:	f800283a 	ret

0000b890 <__mdiff>:
    b890:	defffb04 	addi	sp,sp,-20
    b894:	dc000015 	stw	r16,0(sp)
    b898:	2821883a 	mov	r16,r5
    b89c:	dcc00315 	stw	r19,12(sp)
    b8a0:	300b883a 	mov	r5,r6
    b8a4:	2027883a 	mov	r19,r4
    b8a8:	8009883a 	mov	r4,r16
    b8ac:	dc800215 	stw	r18,8(sp)
    b8b0:	dfc00415 	stw	ra,16(sp)
    b8b4:	dc400115 	stw	r17,4(sp)
    b8b8:	3025883a 	mov	r18,r6
    b8bc:	000b8300 	call	b830 <__mcmp>
    b8c0:	10005226 	beq	r2,zero,ba0c <__mdiff+0x17c>
    b8c4:	10004c16 	blt	r2,zero,b9f8 <__mdiff+0x168>
    b8c8:	0023883a 	mov	r17,zero
    b8cc:	81400117 	ldw	r5,4(r16)
    b8d0:	9809883a 	mov	r4,r19
    b8d4:	000af5c0 	call	af5c <_Balloc>
    b8d8:	83400417 	ldw	r13,16(r16)
    b8dc:	93800417 	ldw	r14,16(r18)
    b8e0:	81000504 	addi	r4,r16,20
    b8e4:	6b59883a 	add	r12,r13,r13
    b8e8:	739d883a 	add	r14,r14,r14
    b8ec:	6319883a 	add	r12,r12,r12
    b8f0:	91800504 	addi	r6,r18,20
    b8f4:	739d883a 	add	r14,r14,r14
    b8f8:	14400315 	stw	r17,12(r2)
    b8fc:	2319883a 	add	r12,r4,r12
    b900:	339d883a 	add	r14,r6,r14
    b904:	12400504 	addi	r9,r2,20
    b908:	0007883a 	mov	r3,zero
    b90c:	22000017 	ldw	r8,0(r4)
    b910:	32800017 	ldw	r10,0(r6)
    b914:	4ac00104 	addi	r11,r9,4
    b918:	41ffffcc 	andi	r7,r8,65535
    b91c:	38c7883a 	add	r3,r7,r3
    b920:	51ffffcc 	andi	r7,r10,65535
    b924:	19cfc83a 	sub	r7,r3,r7
    b928:	4010d43a 	srli	r8,r8,16
    b92c:	5014d43a 	srli	r10,r10,16
    b930:	3807d43a 	srai	r3,r7,16
    b934:	39ffffcc 	andi	r7,r7,65535
    b938:	4291c83a 	sub	r8,r8,r10
    b93c:	40c7883a 	add	r3,r8,r3
    b940:	1810943a 	slli	r8,r3,16
    b944:	31800104 	addi	r6,r6,4
    b948:	21000104 	addi	r4,r4,4
    b94c:	41ceb03a 	or	r7,r8,r7
    b950:	49c00015 	stw	r7,0(r9)
    b954:	1807d43a 	srai	r3,r3,16
    b958:	580b883a 	mov	r5,r11
    b95c:	5813883a 	mov	r9,r11
    b960:	33bfea36 	bltu	r6,r14,b90c <__alt_mem_Flash_flash_data+0xf400b90c>
    b964:	2011883a 	mov	r8,r4
    b968:	2300152e 	bgeu	r4,r12,b9c0 <__mdiff+0x130>
    b96c:	21400017 	ldw	r5,0(r4)
    b970:	4a400104 	addi	r9,r9,4
    b974:	21000104 	addi	r4,r4,4
    b978:	29ffffcc 	andi	r7,r5,65535
    b97c:	38c7883a 	add	r3,r7,r3
    b980:	280ad43a 	srli	r5,r5,16
    b984:	180dd43a 	srai	r6,r3,16
    b988:	19ffffcc 	andi	r7,r3,65535
    b98c:	3147883a 	add	r3,r6,r5
    b990:	180a943a 	slli	r5,r3,16
    b994:	1807d43a 	srai	r3,r3,16
    b998:	29ceb03a 	or	r7,r5,r7
    b99c:	49ffff15 	stw	r7,-4(r9)
    b9a0:	233ff236 	bltu	r4,r12,b96c <__alt_mem_Flash_flash_data+0xf400b96c>
    b9a4:	0206303a 	nor	r3,zero,r8
    b9a8:	1b07883a 	add	r3,r3,r12
    b9ac:	1806d0ba 	srli	r3,r3,2
    b9b0:	18c00044 	addi	r3,r3,1
    b9b4:	18c7883a 	add	r3,r3,r3
    b9b8:	18c7883a 	add	r3,r3,r3
    b9bc:	58cb883a 	add	r5,r11,r3
    b9c0:	28ffff04 	addi	r3,r5,-4
    b9c4:	3800041e 	bne	r7,zero,b9d8 <__mdiff+0x148>
    b9c8:	18ffff04 	addi	r3,r3,-4
    b9cc:	19000017 	ldw	r4,0(r3)
    b9d0:	6b7fffc4 	addi	r13,r13,-1
    b9d4:	203ffc26 	beq	r4,zero,b9c8 <__alt_mem_Flash_flash_data+0xf400b9c8>
    b9d8:	13400415 	stw	r13,16(r2)
    b9dc:	dfc00417 	ldw	ra,16(sp)
    b9e0:	dcc00317 	ldw	r19,12(sp)
    b9e4:	dc800217 	ldw	r18,8(sp)
    b9e8:	dc400117 	ldw	r17,4(sp)
    b9ec:	dc000017 	ldw	r16,0(sp)
    b9f0:	dec00504 	addi	sp,sp,20
    b9f4:	f800283a 	ret
    b9f8:	8005883a 	mov	r2,r16
    b9fc:	04400044 	movi	r17,1
    ba00:	9021883a 	mov	r16,r18
    ba04:	1025883a 	mov	r18,r2
    ba08:	003fb006 	br	b8cc <__alt_mem_Flash_flash_data+0xf400b8cc>
    ba0c:	9809883a 	mov	r4,r19
    ba10:	000b883a 	mov	r5,zero
    ba14:	000af5c0 	call	af5c <_Balloc>
    ba18:	00c00044 	movi	r3,1
    ba1c:	10c00415 	stw	r3,16(r2)
    ba20:	10000515 	stw	zero,20(r2)
    ba24:	003fed06 	br	b9dc <__alt_mem_Flash_flash_data+0xf400b9dc>

0000ba28 <__ulp>:
    ba28:	295ffc2c 	andhi	r5,r5,32752
    ba2c:	00bf3034 	movhi	r2,64704
    ba30:	2887883a 	add	r3,r5,r2
    ba34:	00c0020e 	bge	zero,r3,ba40 <__ulp+0x18>
    ba38:	0005883a 	mov	r2,zero
    ba3c:	f800283a 	ret
    ba40:	00c7c83a 	sub	r3,zero,r3
    ba44:	180bd53a 	srai	r5,r3,20
    ba48:	008004c4 	movi	r2,19
    ba4c:	11400a0e 	bge	r2,r5,ba78 <__ulp+0x50>
    ba50:	00800c84 	movi	r2,50
    ba54:	0007883a 	mov	r3,zero
    ba58:	11400516 	blt	r2,r5,ba70 <__ulp+0x48>
    ba5c:	00800cc4 	movi	r2,51
    ba60:	114bc83a 	sub	r5,r2,r5
    ba64:	00800044 	movi	r2,1
    ba68:	1144983a 	sll	r2,r2,r5
    ba6c:	f800283a 	ret
    ba70:	00800044 	movi	r2,1
    ba74:	f800283a 	ret
    ba78:	00800234 	movhi	r2,8
    ba7c:	1147d83a 	sra	r3,r2,r5
    ba80:	0005883a 	mov	r2,zero
    ba84:	f800283a 	ret

0000ba88 <__b2d>:
    ba88:	defffa04 	addi	sp,sp,-24
    ba8c:	dc000015 	stw	r16,0(sp)
    ba90:	24000417 	ldw	r16,16(r4)
    ba94:	dc400115 	stw	r17,4(sp)
    ba98:	24400504 	addi	r17,r4,20
    ba9c:	8421883a 	add	r16,r16,r16
    baa0:	8421883a 	add	r16,r16,r16
    baa4:	8c21883a 	add	r16,r17,r16
    baa8:	dc800215 	stw	r18,8(sp)
    baac:	84bfff17 	ldw	r18,-4(r16)
    bab0:	dd000415 	stw	r20,16(sp)
    bab4:	dcc00315 	stw	r19,12(sp)
    bab8:	9009883a 	mov	r4,r18
    babc:	2829883a 	mov	r20,r5
    bac0:	dfc00515 	stw	ra,20(sp)
    bac4:	000b2500 	call	b250 <__hi0bits>
    bac8:	00c00804 	movi	r3,32
    bacc:	1887c83a 	sub	r3,r3,r2
    bad0:	a0c00015 	stw	r3,0(r20)
    bad4:	00c00284 	movi	r3,10
    bad8:	84ffff04 	addi	r19,r16,-4
    badc:	18801216 	blt	r3,r2,bb28 <__b2d+0xa0>
    bae0:	014002c4 	movi	r5,11
    bae4:	2889c83a 	sub	r4,r5,r2
    bae8:	9106d83a 	srl	r3,r18,r4
    baec:	18cffc34 	orhi	r3,r3,16368
    baf0:	8cc0282e 	bgeu	r17,r19,bb94 <__b2d+0x10c>
    baf4:	817ffe17 	ldw	r5,-8(r16)
    baf8:	290ad83a 	srl	r5,r5,r4
    bafc:	10800544 	addi	r2,r2,21
    bb00:	9084983a 	sll	r2,r18,r2
    bb04:	2884b03a 	or	r2,r5,r2
    bb08:	dfc00517 	ldw	ra,20(sp)
    bb0c:	dd000417 	ldw	r20,16(sp)
    bb10:	dcc00317 	ldw	r19,12(sp)
    bb14:	dc800217 	ldw	r18,8(sp)
    bb18:	dc400117 	ldw	r17,4(sp)
    bb1c:	dc000017 	ldw	r16,0(sp)
    bb20:	dec00604 	addi	sp,sp,24
    bb24:	f800283a 	ret
    bb28:	113ffd44 	addi	r4,r2,-11
    bb2c:	8cc00f2e 	bgeu	r17,r19,bb6c <__b2d+0xe4>
    bb30:	81bffe04 	addi	r6,r16,-8
    bb34:	817ffe17 	ldw	r5,-8(r16)
    bb38:	20001326 	beq	r4,zero,bb88 <__b2d+0x100>
    bb3c:	00c00ac4 	movi	r3,43
    bb40:	1885c83a 	sub	r2,r3,r2
    bb44:	2886d83a 	srl	r3,r5,r2
    bb48:	9124983a 	sll	r18,r18,r4
    bb4c:	90e4b03a 	or	r18,r18,r3
    bb50:	90cffc34 	orhi	r3,r18,16368
    bb54:	8980112e 	bgeu	r17,r6,bb9c <__b2d+0x114>
    bb58:	81bffd17 	ldw	r6,-12(r16)
    bb5c:	308cd83a 	srl	r6,r6,r2
    bb60:	2904983a 	sll	r2,r5,r4
    bb64:	1184b03a 	or	r2,r2,r6
    bb68:	003fe706 	br	bb08 <__alt_mem_Flash_flash_data+0xf400bb08>
    bb6c:	20000526 	beq	r4,zero,bb84 <__b2d+0xfc>
    bb70:	9124983a 	sll	r18,r18,r4
    bb74:	000d883a 	mov	r6,zero
    bb78:	000b883a 	mov	r5,zero
    bb7c:	90cffc34 	orhi	r3,r18,16368
    bb80:	003ff706 	br	bb60 <__alt_mem_Flash_flash_data+0xf400bb60>
    bb84:	000b883a 	mov	r5,zero
    bb88:	90cffc34 	orhi	r3,r18,16368
    bb8c:	2805883a 	mov	r2,r5
    bb90:	003fdd06 	br	bb08 <__alt_mem_Flash_flash_data+0xf400bb08>
    bb94:	000b883a 	mov	r5,zero
    bb98:	003fd806 	br	bafc <__alt_mem_Flash_flash_data+0xf400bafc>
    bb9c:	000d883a 	mov	r6,zero
    bba0:	003fef06 	br	bb60 <__alt_mem_Flash_flash_data+0xf400bb60>

0000bba4 <__d2b>:
    bba4:	defff704 	addi	sp,sp,-36
    bba8:	dc000215 	stw	r16,8(sp)
    bbac:	3021883a 	mov	r16,r6
    bbb0:	dc400315 	stw	r17,12(sp)
    bbb4:	8022907a 	slli	r17,r16,1
    bbb8:	dd400715 	stw	r21,28(sp)
    bbbc:	282b883a 	mov	r21,r5
    bbc0:	01400044 	movi	r5,1
    bbc4:	dd000615 	stw	r20,24(sp)
    bbc8:	dcc00515 	stw	r19,20(sp)
    bbcc:	dc800415 	stw	r18,16(sp)
    bbd0:	dfc00815 	stw	ra,32(sp)
    bbd4:	3829883a 	mov	r20,r7
    bbd8:	dc800917 	ldw	r18,36(sp)
    bbdc:	8822d57a 	srli	r17,r17,21
    bbe0:	000af5c0 	call	af5c <_Balloc>
    bbe4:	1027883a 	mov	r19,r2
    bbe8:	00800434 	movhi	r2,16
    bbec:	10bfffc4 	addi	r2,r2,-1
    bbf0:	808c703a 	and	r6,r16,r2
    bbf4:	88000126 	beq	r17,zero,bbfc <__d2b+0x58>
    bbf8:	31800434 	orhi	r6,r6,16
    bbfc:	d9800015 	stw	r6,0(sp)
    bc00:	a8001f26 	beq	r21,zero,bc80 <__d2b+0xdc>
    bc04:	d9000104 	addi	r4,sp,4
    bc08:	dd400115 	stw	r21,4(sp)
    bc0c:	000b2b80 	call	b2b8 <__lo0bits>
    bc10:	d8c00017 	ldw	r3,0(sp)
    bc14:	1000291e 	bne	r2,zero,bcbc <__d2b+0x118>
    bc18:	d9000117 	ldw	r4,4(sp)
    bc1c:	99000515 	stw	r4,20(r19)
    bc20:	1820c03a 	cmpne	r16,r3,zero
    bc24:	84000044 	addi	r16,r16,1
    bc28:	98c00615 	stw	r3,24(r19)
    bc2c:	9c000415 	stw	r16,16(r19)
    bc30:	88001b1e 	bne	r17,zero,bca0 <__d2b+0xfc>
    bc34:	800690ba 	slli	r3,r16,2
    bc38:	10bef384 	addi	r2,r2,-1074
    bc3c:	a0800015 	stw	r2,0(r20)
    bc40:	98c5883a 	add	r2,r19,r3
    bc44:	11000417 	ldw	r4,16(r2)
    bc48:	8020917a 	slli	r16,r16,5
    bc4c:	000b2500 	call	b250 <__hi0bits>
    bc50:	8085c83a 	sub	r2,r16,r2
    bc54:	90800015 	stw	r2,0(r18)
    bc58:	9805883a 	mov	r2,r19
    bc5c:	dfc00817 	ldw	ra,32(sp)
    bc60:	dd400717 	ldw	r21,28(sp)
    bc64:	dd000617 	ldw	r20,24(sp)
    bc68:	dcc00517 	ldw	r19,20(sp)
    bc6c:	dc800417 	ldw	r18,16(sp)
    bc70:	dc400317 	ldw	r17,12(sp)
    bc74:	dc000217 	ldw	r16,8(sp)
    bc78:	dec00904 	addi	sp,sp,36
    bc7c:	f800283a 	ret
    bc80:	d809883a 	mov	r4,sp
    bc84:	000b2b80 	call	b2b8 <__lo0bits>
    bc88:	d8c00017 	ldw	r3,0(sp)
    bc8c:	04000044 	movi	r16,1
    bc90:	9c000415 	stw	r16,16(r19)
    bc94:	98c00515 	stw	r3,20(r19)
    bc98:	10800804 	addi	r2,r2,32
    bc9c:	883fe526 	beq	r17,zero,bc34 <__alt_mem_Flash_flash_data+0xf400bc34>
    bca0:	8c7ef344 	addi	r17,r17,-1075
    bca4:	88a3883a 	add	r17,r17,r2
    bca8:	00c00d44 	movi	r3,53
    bcac:	a4400015 	stw	r17,0(r20)
    bcb0:	1885c83a 	sub	r2,r3,r2
    bcb4:	90800015 	stw	r2,0(r18)
    bcb8:	003fe706 	br	bc58 <__alt_mem_Flash_flash_data+0xf400bc58>
    bcbc:	01000804 	movi	r4,32
    bcc0:	2089c83a 	sub	r4,r4,r2
    bcc4:	1908983a 	sll	r4,r3,r4
    bcc8:	d9400117 	ldw	r5,4(sp)
    bccc:	1886d83a 	srl	r3,r3,r2
    bcd0:	2148b03a 	or	r4,r4,r5
    bcd4:	99000515 	stw	r4,20(r19)
    bcd8:	d8c00015 	stw	r3,0(sp)
    bcdc:	003fd006 	br	bc20 <__alt_mem_Flash_flash_data+0xf400bc20>

0000bce0 <__ratio>:
    bce0:	defff904 	addi	sp,sp,-28
    bce4:	dc400315 	stw	r17,12(sp)
    bce8:	2823883a 	mov	r17,r5
    bcec:	d9400104 	addi	r5,sp,4
    bcf0:	dfc00615 	stw	ra,24(sp)
    bcf4:	dcc00515 	stw	r19,20(sp)
    bcf8:	dc800415 	stw	r18,16(sp)
    bcfc:	2027883a 	mov	r19,r4
    bd00:	dc000215 	stw	r16,8(sp)
    bd04:	000ba880 	call	ba88 <__b2d>
    bd08:	8809883a 	mov	r4,r17
    bd0c:	d80b883a 	mov	r5,sp
    bd10:	1025883a 	mov	r18,r2
    bd14:	1821883a 	mov	r16,r3
    bd18:	000ba880 	call	ba88 <__b2d>
    bd1c:	8a400417 	ldw	r9,16(r17)
    bd20:	9a000417 	ldw	r8,16(r19)
    bd24:	100d883a 	mov	r6,r2
    bd28:	d8800017 	ldw	r2,0(sp)
    bd2c:	4251c83a 	sub	r8,r8,r9
    bd30:	4012917a 	slli	r9,r8,5
    bd34:	da000117 	ldw	r8,4(sp)
    bd38:	4091c83a 	sub	r8,r8,r2
    bd3c:	4251883a 	add	r8,r8,r9
    bd40:	02000d0e 	bge	zero,r8,bd78 <__ratio+0x98>
    bd44:	4010953a 	slli	r8,r8,20
    bd48:	4421883a 	add	r16,r8,r16
    bd4c:	9009883a 	mov	r4,r18
    bd50:	800b883a 	mov	r5,r16
    bd54:	180f883a 	mov	r7,r3
    bd58:	0010be40 	call	10be4 <__divdf3>
    bd5c:	dfc00617 	ldw	ra,24(sp)
    bd60:	dcc00517 	ldw	r19,20(sp)
    bd64:	dc800417 	ldw	r18,16(sp)
    bd68:	dc400317 	ldw	r17,12(sp)
    bd6c:	dc000217 	ldw	r16,8(sp)
    bd70:	dec00704 	addi	sp,sp,28
    bd74:	f800283a 	ret
    bd78:	4010953a 	slli	r8,r8,20
    bd7c:	1a07c83a 	sub	r3,r3,r8
    bd80:	003ff206 	br	bd4c <__alt_mem_Flash_flash_data+0xf400bd4c>

0000bd84 <_mprec_log10>:
    bd84:	defffe04 	addi	sp,sp,-8
    bd88:	dc000015 	stw	r16,0(sp)
    bd8c:	dfc00115 	stw	ra,4(sp)
    bd90:	008005c4 	movi	r2,23
    bd94:	2021883a 	mov	r16,r4
    bd98:	11000d0e 	bge	r2,r4,bdd0 <_mprec_log10+0x4c>
    bd9c:	0005883a 	mov	r2,zero
    bda0:	00cffc34 	movhi	r3,16368
    bda4:	843fffc4 	addi	r16,r16,-1
    bda8:	1009883a 	mov	r4,r2
    bdac:	180b883a 	mov	r5,r3
    bdb0:	000d883a 	mov	r6,zero
    bdb4:	01d00934 	movhi	r7,16420
    bdb8:	00116f40 	call	116f4 <__muldf3>
    bdbc:	803ff91e 	bne	r16,zero,bda4 <__alt_mem_Flash_flash_data+0xf400bda4>
    bdc0:	dfc00117 	ldw	ra,4(sp)
    bdc4:	dc000017 	ldw	r16,0(sp)
    bdc8:	dec00204 	addi	sp,sp,8
    bdcc:	f800283a 	ret
    bdd0:	202090fa 	slli	r16,r4,3
    bdd4:	008000b4 	movhi	r2,2
    bdd8:	1080c004 	addi	r2,r2,768
    bddc:	1421883a 	add	r16,r2,r16
    bde0:	80800017 	ldw	r2,0(r16)
    bde4:	80c00117 	ldw	r3,4(r16)
    bde8:	dfc00117 	ldw	ra,4(sp)
    bdec:	dc000017 	ldw	r16,0(sp)
    bdf0:	dec00204 	addi	sp,sp,8
    bdf4:	f800283a 	ret

0000bdf8 <__copybits>:
    bdf8:	297fffc4 	addi	r5,r5,-1
    bdfc:	280fd17a 	srai	r7,r5,5
    be00:	30c00417 	ldw	r3,16(r6)
    be04:	30800504 	addi	r2,r6,20
    be08:	39c00044 	addi	r7,r7,1
    be0c:	18c7883a 	add	r3,r3,r3
    be10:	39cf883a 	add	r7,r7,r7
    be14:	18c7883a 	add	r3,r3,r3
    be18:	39cf883a 	add	r7,r7,r7
    be1c:	10c7883a 	add	r3,r2,r3
    be20:	21cf883a 	add	r7,r4,r7
    be24:	10c00d2e 	bgeu	r2,r3,be5c <__copybits+0x64>
    be28:	200b883a 	mov	r5,r4
    be2c:	12000017 	ldw	r8,0(r2)
    be30:	29400104 	addi	r5,r5,4
    be34:	10800104 	addi	r2,r2,4
    be38:	2a3fff15 	stw	r8,-4(r5)
    be3c:	10fffb36 	bltu	r2,r3,be2c <__alt_mem_Flash_flash_data+0xf400be2c>
    be40:	1985c83a 	sub	r2,r3,r6
    be44:	10bffac4 	addi	r2,r2,-21
    be48:	1004d0ba 	srli	r2,r2,2
    be4c:	10800044 	addi	r2,r2,1
    be50:	1085883a 	add	r2,r2,r2
    be54:	1085883a 	add	r2,r2,r2
    be58:	2089883a 	add	r4,r4,r2
    be5c:	21c0032e 	bgeu	r4,r7,be6c <__copybits+0x74>
    be60:	20000015 	stw	zero,0(r4)
    be64:	21000104 	addi	r4,r4,4
    be68:	21fffd36 	bltu	r4,r7,be60 <__alt_mem_Flash_flash_data+0xf400be60>
    be6c:	f800283a 	ret

0000be70 <__any_on>:
    be70:	20c00417 	ldw	r3,16(r4)
    be74:	2805d17a 	srai	r2,r5,5
    be78:	21000504 	addi	r4,r4,20
    be7c:	18800d0e 	bge	r3,r2,beb4 <__any_on+0x44>
    be80:	18c7883a 	add	r3,r3,r3
    be84:	18c7883a 	add	r3,r3,r3
    be88:	20c7883a 	add	r3,r4,r3
    be8c:	20c0192e 	bgeu	r4,r3,bef4 <__any_on+0x84>
    be90:	18bfff17 	ldw	r2,-4(r3)
    be94:	18ffff04 	addi	r3,r3,-4
    be98:	1000041e 	bne	r2,zero,beac <__any_on+0x3c>
    be9c:	20c0142e 	bgeu	r4,r3,bef0 <__any_on+0x80>
    bea0:	18ffff04 	addi	r3,r3,-4
    bea4:	19400017 	ldw	r5,0(r3)
    bea8:	283ffc26 	beq	r5,zero,be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    beac:	00800044 	movi	r2,1
    beb0:	f800283a 	ret
    beb4:	10c00a0e 	bge	r2,r3,bee0 <__any_on+0x70>
    beb8:	1085883a 	add	r2,r2,r2
    bebc:	1085883a 	add	r2,r2,r2
    bec0:	294007cc 	andi	r5,r5,31
    bec4:	2087883a 	add	r3,r4,r2
    bec8:	283ff026 	beq	r5,zero,be8c <__alt_mem_Flash_flash_data+0xf400be8c>
    becc:	19800017 	ldw	r6,0(r3)
    bed0:	3144d83a 	srl	r2,r6,r5
    bed4:	114a983a 	sll	r5,r2,r5
    bed8:	29bff41e 	bne	r5,r6,beac <__alt_mem_Flash_flash_data+0xf400beac>
    bedc:	003feb06 	br	be8c <__alt_mem_Flash_flash_data+0xf400be8c>
    bee0:	1085883a 	add	r2,r2,r2
    bee4:	1085883a 	add	r2,r2,r2
    bee8:	2087883a 	add	r3,r4,r2
    beec:	003fe706 	br	be8c <__alt_mem_Flash_flash_data+0xf400be8c>
    bef0:	f800283a 	ret
    bef4:	0005883a 	mov	r2,zero
    bef8:	f800283a 	ret

0000befc <_realloc_r>:
    befc:	defff604 	addi	sp,sp,-40
    bf00:	dd000415 	stw	r20,16(sp)
    bf04:	dc400115 	stw	r17,4(sp)
    bf08:	dfc00915 	stw	ra,36(sp)
    bf0c:	df000815 	stw	fp,32(sp)
    bf10:	ddc00715 	stw	r23,28(sp)
    bf14:	dd800615 	stw	r22,24(sp)
    bf18:	dd400515 	stw	r21,20(sp)
    bf1c:	dcc00315 	stw	r19,12(sp)
    bf20:	dc800215 	stw	r18,8(sp)
    bf24:	dc000015 	stw	r16,0(sp)
    bf28:	2829883a 	mov	r20,r5
    bf2c:	3023883a 	mov	r17,r6
    bf30:	2800ad26 	beq	r5,zero,c1e8 <_realloc_r+0x2ec>
    bf34:	2025883a 	mov	r18,r4
    bf38:	00134240 	call	13424 <__malloc_lock>
    bf3c:	a0ffff17 	ldw	r3,-4(r20)
    bf40:	043fff04 	movi	r16,-4
    bf44:	890002c4 	addi	r4,r17,11
    bf48:	01c00584 	movi	r7,22
    bf4c:	a57ffe04 	addi	r21,r20,-8
    bf50:	1c20703a 	and	r16,r3,r16
    bf54:	39001d2e 	bgeu	r7,r4,bfcc <_realloc_r+0xd0>
    bf58:	05bffe04 	movi	r22,-8
    bf5c:	25ac703a 	and	r22,r4,r22
    bf60:	b00f883a 	mov	r7,r22
    bf64:	b0006516 	blt	r22,zero,c0fc <_realloc_r+0x200>
    bf68:	b4406436 	bltu	r22,r17,c0fc <_realloc_r+0x200>
    bf6c:	81c01a0e 	bge	r16,r7,bfd8 <_realloc_r+0xdc>
    bf70:	070000b4 	movhi	fp,2
    bf74:	e7032404 	addi	fp,fp,3216
    bf78:	e1400217 	ldw	r5,8(fp)
    bf7c:	ac11883a 	add	r8,r21,r16
    bf80:	2a006226 	beq	r5,r8,c10c <_realloc_r+0x210>
    bf84:	41800117 	ldw	r6,4(r8)
    bf88:	027fff84 	movi	r9,-2
    bf8c:	3252703a 	and	r9,r6,r9
    bf90:	4253883a 	add	r9,r8,r9
    bf94:	49000117 	ldw	r4,4(r9)
    bf98:	2100004c 	andi	r4,r4,1
    bf9c:	2000281e 	bne	r4,zero,c040 <_realloc_r+0x144>
    bfa0:	00bfff04 	movi	r2,-4
    bfa4:	3084703a 	and	r2,r6,r2
    bfa8:	1409883a 	add	r4,r2,r16
    bfac:	21c05e16 	blt	r4,r7,c128 <_realloc_r+0x22c>
    bfb0:	40800317 	ldw	r2,12(r8)
    bfb4:	41400217 	ldw	r5,8(r8)
    bfb8:	a023883a 	mov	r17,r20
    bfbc:	2021883a 	mov	r16,r4
    bfc0:	28800315 	stw	r2,12(r5)
    bfc4:	11400215 	stw	r5,8(r2)
    bfc8:	00000406 	br	bfdc <_realloc_r+0xe0>
    bfcc:	01c00404 	movi	r7,16
    bfd0:	382d883a 	mov	r22,r7
    bfd4:	003fe406 	br	bf68 <__alt_mem_Flash_flash_data+0xf400bf68>
    bfd8:	a023883a 	mov	r17,r20
    bfdc:	858fc83a 	sub	r7,r16,r22
    bfe0:	008003c4 	movi	r2,15
    bfe4:	18c0004c 	andi	r3,r3,1
    bfe8:	11c07236 	bltu	r2,r7,c1b4 <_realloc_r+0x2b8>
    bfec:	1c06b03a 	or	r3,r3,r16
    bff0:	a8c00115 	stw	r3,4(r21)
    bff4:	ac21883a 	add	r16,r21,r16
    bff8:	80800117 	ldw	r2,4(r16)
    bffc:	10800054 	ori	r2,r2,1
    c000:	80800115 	stw	r2,4(r16)
    c004:	9009883a 	mov	r4,r18
    c008:	00135440 	call	13544 <__malloc_unlock>
    c00c:	8805883a 	mov	r2,r17
    c010:	dfc00917 	ldw	ra,36(sp)
    c014:	df000817 	ldw	fp,32(sp)
    c018:	ddc00717 	ldw	r23,28(sp)
    c01c:	dd800617 	ldw	r22,24(sp)
    c020:	dd400517 	ldw	r21,20(sp)
    c024:	dd000417 	ldw	r20,16(sp)
    c028:	dcc00317 	ldw	r19,12(sp)
    c02c:	dc800217 	ldw	r18,8(sp)
    c030:	dc400117 	ldw	r17,4(sp)
    c034:	dc000017 	ldw	r16,0(sp)
    c038:	dec00a04 	addi	sp,sp,40
    c03c:	f800283a 	ret
    c040:	18c0004c 	andi	r3,r3,1
    c044:	1800081e 	bne	r3,zero,c068 <_realloc_r+0x16c>
    c048:	a4fffe17 	ldw	r19,-8(r20)
    c04c:	00bfff04 	movi	r2,-4
    c050:	ace7c83a 	sub	r19,r21,r19
    c054:	98c00117 	ldw	r3,4(r19)
    c058:	1886703a 	and	r3,r3,r2
    c05c:	98000226 	beq	r19,zero,c068 <_realloc_r+0x16c>
    c060:	1c2f883a 	add	r23,r3,r16
    c064:	b9c06d0e 	bge	r23,r7,c21c <_realloc_r+0x320>
    c068:	880b883a 	mov	r5,r17
    c06c:	9009883a 	mov	r4,r18
    c070:	000a3140 	call	a314 <_malloc_r>
    c074:	1023883a 	mov	r17,r2
    c078:	1000ef26 	beq	r2,zero,c438 <_realloc_r+0x53c>
    c07c:	a0ffff17 	ldw	r3,-4(r20)
    c080:	113ffe04 	addi	r4,r2,-8
    c084:	00bfff84 	movi	r2,-2
    c088:	1884703a 	and	r2,r3,r2
    c08c:	a885883a 	add	r2,r21,r2
    c090:	2080bf26 	beq	r4,r2,c390 <_realloc_r+0x494>
    c094:	81bfff04 	addi	r6,r16,-4
    c098:	00800904 	movi	r2,36
    c09c:	11808936 	bltu	r2,r6,c2c4 <_realloc_r+0x3c8>
    c0a0:	00c004c4 	movi	r3,19
    c0a4:	19806c2e 	bgeu	r3,r6,c258 <_realloc_r+0x35c>
    c0a8:	a0c00017 	ldw	r3,0(r20)
    c0ac:	88c00015 	stw	r3,0(r17)
    c0b0:	a0c00117 	ldw	r3,4(r20)
    c0b4:	88c00115 	stw	r3,4(r17)
    c0b8:	00c006c4 	movi	r3,27
    c0bc:	1980ac36 	bltu	r3,r6,c370 <_realloc_r+0x474>
    c0c0:	88800204 	addi	r2,r17,8
    c0c4:	a0c00204 	addi	r3,r20,8
    c0c8:	19000017 	ldw	r4,0(r3)
    c0cc:	11000015 	stw	r4,0(r2)
    c0d0:	19000117 	ldw	r4,4(r3)
    c0d4:	11000115 	stw	r4,4(r2)
    c0d8:	18c00217 	ldw	r3,8(r3)
    c0dc:	10c00215 	stw	r3,8(r2)
    c0e0:	a00b883a 	mov	r5,r20
    c0e4:	9009883a 	mov	r4,r18
    c0e8:	00097440 	call	9744 <_free_r>
    c0ec:	9009883a 	mov	r4,r18
    c0f0:	00135440 	call	13544 <__malloc_unlock>
    c0f4:	8805883a 	mov	r2,r17
    c0f8:	003fc506 	br	c010 <__alt_mem_Flash_flash_data+0xf400c010>
    c0fc:	00800304 	movi	r2,12
    c100:	90800015 	stw	r2,0(r18)
    c104:	0005883a 	mov	r2,zero
    c108:	003fc106 	br	c010 <__alt_mem_Flash_flash_data+0xf400c010>
    c10c:	29800117 	ldw	r6,4(r5)
    c110:	00bfff04 	movi	r2,-4
    c114:	b1000404 	addi	r4,r22,16
    c118:	3084703a 	and	r2,r6,r2
    c11c:	140d883a 	add	r6,r2,r16
    c120:	31005b0e 	bge	r6,r4,c290 <_realloc_r+0x394>
    c124:	2811883a 	mov	r8,r5
    c128:	18c0004c 	andi	r3,r3,1
    c12c:	183fce1e 	bne	r3,zero,c068 <__alt_mem_Flash_flash_data+0xf400c068>
    c130:	a4fffe17 	ldw	r19,-8(r20)
    c134:	00ffff04 	movi	r3,-4
    c138:	ace7c83a 	sub	r19,r21,r19
    c13c:	99000117 	ldw	r4,4(r19)
    c140:	20c6703a 	and	r3,r4,r3
    c144:	403fc526 	beq	r8,zero,c05c <__alt_mem_Flash_flash_data+0xf400c05c>
    c148:	1c2f883a 	add	r23,r3,r16
    c14c:	b8af883a 	add	r23,r23,r2
    c150:	41406026 	beq	r8,r5,c2d4 <_realloc_r+0x3d8>
    c154:	b9ffc116 	blt	r23,r7,c05c <__alt_mem_Flash_flash_data+0xf400c05c>
    c158:	40c00217 	ldw	r3,8(r8)
    c15c:	40800317 	ldw	r2,12(r8)
    c160:	81bfff04 	addi	r6,r16,-4
    c164:	01000904 	movi	r4,36
    c168:	18800315 	stw	r2,12(r3)
    c16c:	10c00215 	stw	r3,8(r2)
    c170:	99400217 	ldw	r5,8(r19)
    c174:	98c00317 	ldw	r3,12(r19)
    c178:	9c400204 	addi	r17,r19,8
    c17c:	28c00315 	stw	r3,12(r5)
    c180:	19400215 	stw	r5,8(r3)
    c184:	21802d36 	bltu	r4,r6,c23c <_realloc_r+0x340>
    c188:	008004c4 	movi	r2,19
    c18c:	1180352e 	bgeu	r2,r6,c264 <_realloc_r+0x368>
    c190:	a0800017 	ldw	r2,0(r20)
    c194:	98800215 	stw	r2,8(r19)
    c198:	a0800117 	ldw	r2,4(r20)
    c19c:	98800315 	stw	r2,12(r19)
    c1a0:	008006c4 	movi	r2,27
    c1a4:	11808036 	bltu	r2,r6,c3a8 <_realloc_r+0x4ac>
    c1a8:	98c00404 	addi	r3,r19,16
    c1ac:	a5000204 	addi	r20,r20,8
    c1b0:	00002d06 	br	c268 <_realloc_r+0x36c>
    c1b4:	1d86b03a 	or	r3,r3,r22
    c1b8:	ad8b883a 	add	r5,r21,r22
    c1bc:	a8c00115 	stw	r3,4(r21)
    c1c0:	38800054 	ori	r2,r7,1
    c1c4:	28800115 	stw	r2,4(r5)
    c1c8:	29cf883a 	add	r7,r5,r7
    c1cc:	38800117 	ldw	r2,4(r7)
    c1d0:	9009883a 	mov	r4,r18
    c1d4:	29400204 	addi	r5,r5,8
    c1d8:	10800054 	ori	r2,r2,1
    c1dc:	38800115 	stw	r2,4(r7)
    c1e0:	00097440 	call	9744 <_free_r>
    c1e4:	003f8706 	br	c004 <__alt_mem_Flash_flash_data+0xf400c004>
    c1e8:	300b883a 	mov	r5,r6
    c1ec:	dfc00917 	ldw	ra,36(sp)
    c1f0:	df000817 	ldw	fp,32(sp)
    c1f4:	ddc00717 	ldw	r23,28(sp)
    c1f8:	dd800617 	ldw	r22,24(sp)
    c1fc:	dd400517 	ldw	r21,20(sp)
    c200:	dd000417 	ldw	r20,16(sp)
    c204:	dcc00317 	ldw	r19,12(sp)
    c208:	dc800217 	ldw	r18,8(sp)
    c20c:	dc400117 	ldw	r17,4(sp)
    c210:	dc000017 	ldw	r16,0(sp)
    c214:	dec00a04 	addi	sp,sp,40
    c218:	000a3141 	jmpi	a314 <_malloc_r>
    c21c:	98800317 	ldw	r2,12(r19)
    c220:	98c00217 	ldw	r3,8(r19)
    c224:	81bfff04 	addi	r6,r16,-4
    c228:	01000904 	movi	r4,36
    c22c:	18800315 	stw	r2,12(r3)
    c230:	10c00215 	stw	r3,8(r2)
    c234:	9c400204 	addi	r17,r19,8
    c238:	21bfd32e 	bgeu	r4,r6,c188 <__alt_mem_Flash_flash_data+0xf400c188>
    c23c:	8809883a 	mov	r4,r17
    c240:	a00b883a 	mov	r5,r20
    c244:	000acdc0 	call	acdc <memmove>
    c248:	98c00117 	ldw	r3,4(r19)
    c24c:	b821883a 	mov	r16,r23
    c250:	982b883a 	mov	r21,r19
    c254:	003f6106 	br	bfdc <__alt_mem_Flash_flash_data+0xf400bfdc>
    c258:	8805883a 	mov	r2,r17
    c25c:	a007883a 	mov	r3,r20
    c260:	003f9906 	br	c0c8 <__alt_mem_Flash_flash_data+0xf400c0c8>
    c264:	8807883a 	mov	r3,r17
    c268:	a0800017 	ldw	r2,0(r20)
    c26c:	b821883a 	mov	r16,r23
    c270:	982b883a 	mov	r21,r19
    c274:	18800015 	stw	r2,0(r3)
    c278:	a0800117 	ldw	r2,4(r20)
    c27c:	18800115 	stw	r2,4(r3)
    c280:	a0800217 	ldw	r2,8(r20)
    c284:	18800215 	stw	r2,8(r3)
    c288:	98c00117 	ldw	r3,4(r19)
    c28c:	003f5306 	br	bfdc <__alt_mem_Flash_flash_data+0xf400bfdc>
    c290:	adab883a 	add	r21,r21,r22
    c294:	3585c83a 	sub	r2,r6,r22
    c298:	e5400215 	stw	r21,8(fp)
    c29c:	10800054 	ori	r2,r2,1
    c2a0:	a8800115 	stw	r2,4(r21)
    c2a4:	a0bfff17 	ldw	r2,-4(r20)
    c2a8:	9009883a 	mov	r4,r18
    c2ac:	1080004c 	andi	r2,r2,1
    c2b0:	b0acb03a 	or	r22,r22,r2
    c2b4:	a5bfff15 	stw	r22,-4(r20)
    c2b8:	00135440 	call	13544 <__malloc_unlock>
    c2bc:	a005883a 	mov	r2,r20
    c2c0:	003f5306 	br	c010 <__alt_mem_Flash_flash_data+0xf400c010>
    c2c4:	8809883a 	mov	r4,r17
    c2c8:	a00b883a 	mov	r5,r20
    c2cc:	000acdc0 	call	acdc <memmove>
    c2d0:	003f8306 	br	c0e0 <__alt_mem_Flash_flash_data+0xf400c0e0>
    c2d4:	b0800404 	addi	r2,r22,16
    c2d8:	b8bf6016 	blt	r23,r2,c05c <__alt_mem_Flash_flash_data+0xf400c05c>
    c2dc:	98800317 	ldw	r2,12(r19)
    c2e0:	98c00217 	ldw	r3,8(r19)
    c2e4:	81bfff04 	addi	r6,r16,-4
    c2e8:	01000904 	movi	r4,36
    c2ec:	18800315 	stw	r2,12(r3)
    c2f0:	10c00215 	stw	r3,8(r2)
    c2f4:	9c400204 	addi	r17,r19,8
    c2f8:	21804336 	bltu	r4,r6,c408 <_realloc_r+0x50c>
    c2fc:	008004c4 	movi	r2,19
    c300:	11803f2e 	bgeu	r2,r6,c400 <_realloc_r+0x504>
    c304:	a0800017 	ldw	r2,0(r20)
    c308:	98800215 	stw	r2,8(r19)
    c30c:	a0800117 	ldw	r2,4(r20)
    c310:	98800315 	stw	r2,12(r19)
    c314:	008006c4 	movi	r2,27
    c318:	11803f36 	bltu	r2,r6,c418 <_realloc_r+0x51c>
    c31c:	98800404 	addi	r2,r19,16
    c320:	a5000204 	addi	r20,r20,8
    c324:	a0c00017 	ldw	r3,0(r20)
    c328:	10c00015 	stw	r3,0(r2)
    c32c:	a0c00117 	ldw	r3,4(r20)
    c330:	10c00115 	stw	r3,4(r2)
    c334:	a0c00217 	ldw	r3,8(r20)
    c338:	10c00215 	stw	r3,8(r2)
    c33c:	9d87883a 	add	r3,r19,r22
    c340:	bd85c83a 	sub	r2,r23,r22
    c344:	e0c00215 	stw	r3,8(fp)
    c348:	10800054 	ori	r2,r2,1
    c34c:	18800115 	stw	r2,4(r3)
    c350:	98800117 	ldw	r2,4(r19)
    c354:	9009883a 	mov	r4,r18
    c358:	1080004c 	andi	r2,r2,1
    c35c:	b0acb03a 	or	r22,r22,r2
    c360:	9d800115 	stw	r22,4(r19)
    c364:	00135440 	call	13544 <__malloc_unlock>
    c368:	8805883a 	mov	r2,r17
    c36c:	003f2806 	br	c010 <__alt_mem_Flash_flash_data+0xf400c010>
    c370:	a0c00217 	ldw	r3,8(r20)
    c374:	88c00215 	stw	r3,8(r17)
    c378:	a0c00317 	ldw	r3,12(r20)
    c37c:	88c00315 	stw	r3,12(r17)
    c380:	30801126 	beq	r6,r2,c3c8 <_realloc_r+0x4cc>
    c384:	88800404 	addi	r2,r17,16
    c388:	a0c00404 	addi	r3,r20,16
    c38c:	003f4e06 	br	c0c8 <__alt_mem_Flash_flash_data+0xf400c0c8>
    c390:	893fff17 	ldw	r4,-4(r17)
    c394:	00bfff04 	movi	r2,-4
    c398:	a023883a 	mov	r17,r20
    c39c:	2084703a 	and	r2,r4,r2
    c3a0:	80a1883a 	add	r16,r16,r2
    c3a4:	003f0d06 	br	bfdc <__alt_mem_Flash_flash_data+0xf400bfdc>
    c3a8:	a0800217 	ldw	r2,8(r20)
    c3ac:	98800415 	stw	r2,16(r19)
    c3b0:	a0800317 	ldw	r2,12(r20)
    c3b4:	98800515 	stw	r2,20(r19)
    c3b8:	31000a26 	beq	r6,r4,c3e4 <_realloc_r+0x4e8>
    c3bc:	98c00604 	addi	r3,r19,24
    c3c0:	a5000404 	addi	r20,r20,16
    c3c4:	003fa806 	br	c268 <__alt_mem_Flash_flash_data+0xf400c268>
    c3c8:	a1000417 	ldw	r4,16(r20)
    c3cc:	88800604 	addi	r2,r17,24
    c3d0:	a0c00604 	addi	r3,r20,24
    c3d4:	89000415 	stw	r4,16(r17)
    c3d8:	a1000517 	ldw	r4,20(r20)
    c3dc:	89000515 	stw	r4,20(r17)
    c3e0:	003f3906 	br	c0c8 <__alt_mem_Flash_flash_data+0xf400c0c8>
    c3e4:	a0800417 	ldw	r2,16(r20)
    c3e8:	a5000604 	addi	r20,r20,24
    c3ec:	98c00804 	addi	r3,r19,32
    c3f0:	98800615 	stw	r2,24(r19)
    c3f4:	a0bfff17 	ldw	r2,-4(r20)
    c3f8:	98800715 	stw	r2,28(r19)
    c3fc:	003f9a06 	br	c268 <__alt_mem_Flash_flash_data+0xf400c268>
    c400:	8805883a 	mov	r2,r17
    c404:	003fc706 	br	c324 <__alt_mem_Flash_flash_data+0xf400c324>
    c408:	8809883a 	mov	r4,r17
    c40c:	a00b883a 	mov	r5,r20
    c410:	000acdc0 	call	acdc <memmove>
    c414:	003fc906 	br	c33c <__alt_mem_Flash_flash_data+0xf400c33c>
    c418:	a0800217 	ldw	r2,8(r20)
    c41c:	98800415 	stw	r2,16(r19)
    c420:	a0800317 	ldw	r2,12(r20)
    c424:	98800515 	stw	r2,20(r19)
    c428:	31000726 	beq	r6,r4,c448 <_realloc_r+0x54c>
    c42c:	98800604 	addi	r2,r19,24
    c430:	a5000404 	addi	r20,r20,16
    c434:	003fbb06 	br	c324 <__alt_mem_Flash_flash_data+0xf400c324>
    c438:	9009883a 	mov	r4,r18
    c43c:	00135440 	call	13544 <__malloc_unlock>
    c440:	0005883a 	mov	r2,zero
    c444:	003ef206 	br	c010 <__alt_mem_Flash_flash_data+0xf400c010>
    c448:	a0c00417 	ldw	r3,16(r20)
    c44c:	a5000604 	addi	r20,r20,24
    c450:	98800804 	addi	r2,r19,32
    c454:	98c00615 	stw	r3,24(r19)
    c458:	a0ffff17 	ldw	r3,-4(r20)
    c45c:	98c00715 	stw	r3,28(r19)
    c460:	003fb006 	br	c324 <__alt_mem_Flash_flash_data+0xf400c324>

0000c464 <__fpclassifyd>:
    c464:	00a00034 	movhi	r2,32768
    c468:	10bfffc4 	addi	r2,r2,-1
    c46c:	2884703a 	and	r2,r5,r2
    c470:	10000726 	beq	r2,zero,c490 <__fpclassifyd+0x2c>
    c474:	00fffc34 	movhi	r3,65520
    c478:	019ff834 	movhi	r6,32736
    c47c:	28c7883a 	add	r3,r5,r3
    c480:	31bfffc4 	addi	r6,r6,-1
    c484:	30c00536 	bltu	r6,r3,c49c <__fpclassifyd+0x38>
    c488:	00800104 	movi	r2,4
    c48c:	f800283a 	ret
    c490:	2000021e 	bne	r4,zero,c49c <__fpclassifyd+0x38>
    c494:	00800084 	movi	r2,2
    c498:	f800283a 	ret
    c49c:	00dffc34 	movhi	r3,32752
    c4a0:	019ff834 	movhi	r6,32736
    c4a4:	28cb883a 	add	r5,r5,r3
    c4a8:	31bfffc4 	addi	r6,r6,-1
    c4ac:	317ff62e 	bgeu	r6,r5,c488 <__alt_mem_Flash_flash_data+0xf400c488>
    c4b0:	01400434 	movhi	r5,16
    c4b4:	297fffc4 	addi	r5,r5,-1
    c4b8:	28800236 	bltu	r5,r2,c4c4 <__fpclassifyd+0x60>
    c4bc:	008000c4 	movi	r2,3
    c4c0:	f800283a 	ret
    c4c4:	10c00226 	beq	r2,r3,c4d0 <__fpclassifyd+0x6c>
    c4c8:	0005883a 	mov	r2,zero
    c4cc:	f800283a 	ret
    c4d0:	2005003a 	cmpeq	r2,r4,zero
    c4d4:	f800283a 	ret

0000c4d8 <_sbrk_r>:
    c4d8:	defffd04 	addi	sp,sp,-12
    c4dc:	dc000015 	stw	r16,0(sp)
    c4e0:	040000b4 	movhi	r16,2
    c4e4:	dc400115 	stw	r17,4(sp)
    c4e8:	8411b604 	addi	r16,r16,18136
    c4ec:	2023883a 	mov	r17,r4
    c4f0:	2809883a 	mov	r4,r5
    c4f4:	dfc00215 	stw	ra,8(sp)
    c4f8:	80000015 	stw	zero,0(r16)
    c4fc:	00131100 	call	13110 <sbrk>
    c500:	00ffffc4 	movi	r3,-1
    c504:	10c00526 	beq	r2,r3,c51c <_sbrk_r+0x44>
    c508:	dfc00217 	ldw	ra,8(sp)
    c50c:	dc400117 	ldw	r17,4(sp)
    c510:	dc000017 	ldw	r16,0(sp)
    c514:	dec00304 	addi	sp,sp,12
    c518:	f800283a 	ret
    c51c:	80c00017 	ldw	r3,0(r16)
    c520:	183ff926 	beq	r3,zero,c508 <__alt_mem_Flash_flash_data+0xf400c508>
    c524:	88c00015 	stw	r3,0(r17)
    c528:	003ff706 	br	c508 <__alt_mem_Flash_flash_data+0xf400c508>

0000c52c <__sread>:
    c52c:	defffe04 	addi	sp,sp,-8
    c530:	dc000015 	stw	r16,0(sp)
    c534:	2821883a 	mov	r16,r5
    c538:	2940038f 	ldh	r5,14(r5)
    c53c:	dfc00115 	stw	ra,4(sp)
    c540:	000f3340 	call	f334 <_read_r>
    c544:	10000716 	blt	r2,zero,c564 <__sread+0x38>
    c548:	80c01417 	ldw	r3,80(r16)
    c54c:	1887883a 	add	r3,r3,r2
    c550:	80c01415 	stw	r3,80(r16)
    c554:	dfc00117 	ldw	ra,4(sp)
    c558:	dc000017 	ldw	r16,0(sp)
    c55c:	dec00204 	addi	sp,sp,8
    c560:	f800283a 	ret
    c564:	80c0030b 	ldhu	r3,12(r16)
    c568:	18fbffcc 	andi	r3,r3,61439
    c56c:	80c0030d 	sth	r3,12(r16)
    c570:	dfc00117 	ldw	ra,4(sp)
    c574:	dc000017 	ldw	r16,0(sp)
    c578:	dec00204 	addi	sp,sp,8
    c57c:	f800283a 	ret

0000c580 <__seofread>:
    c580:	0005883a 	mov	r2,zero
    c584:	f800283a 	ret

0000c588 <__swrite>:
    c588:	2880030b 	ldhu	r2,12(r5)
    c58c:	defffb04 	addi	sp,sp,-20
    c590:	dcc00315 	stw	r19,12(sp)
    c594:	dc800215 	stw	r18,8(sp)
    c598:	dc400115 	stw	r17,4(sp)
    c59c:	dc000015 	stw	r16,0(sp)
    c5a0:	dfc00415 	stw	ra,16(sp)
    c5a4:	10c0400c 	andi	r3,r2,256
    c5a8:	2821883a 	mov	r16,r5
    c5ac:	2027883a 	mov	r19,r4
    c5b0:	3025883a 	mov	r18,r6
    c5b4:	3823883a 	mov	r17,r7
    c5b8:	18000526 	beq	r3,zero,c5d0 <__swrite+0x48>
    c5bc:	2940038f 	ldh	r5,14(r5)
    c5c0:	000d883a 	mov	r6,zero
    c5c4:	01c00084 	movi	r7,2
    c5c8:	000f2d80 	call	f2d8 <_lseek_r>
    c5cc:	8080030b 	ldhu	r2,12(r16)
    c5d0:	8140038f 	ldh	r5,14(r16)
    c5d4:	10bbffcc 	andi	r2,r2,61439
    c5d8:	9809883a 	mov	r4,r19
    c5dc:	900d883a 	mov	r6,r18
    c5e0:	880f883a 	mov	r7,r17
    c5e4:	8080030d 	sth	r2,12(r16)
    c5e8:	dfc00417 	ldw	ra,16(sp)
    c5ec:	dcc00317 	ldw	r19,12(sp)
    c5f0:	dc800217 	ldw	r18,8(sp)
    c5f4:	dc400117 	ldw	r17,4(sp)
    c5f8:	dc000017 	ldw	r16,0(sp)
    c5fc:	dec00504 	addi	sp,sp,20
    c600:	000edd41 	jmpi	edd4 <_write_r>

0000c604 <__sseek>:
    c604:	defffe04 	addi	sp,sp,-8
    c608:	dc000015 	stw	r16,0(sp)
    c60c:	2821883a 	mov	r16,r5
    c610:	2940038f 	ldh	r5,14(r5)
    c614:	dfc00115 	stw	ra,4(sp)
    c618:	000f2d80 	call	f2d8 <_lseek_r>
    c61c:	00ffffc4 	movi	r3,-1
    c620:	10c00826 	beq	r2,r3,c644 <__sseek+0x40>
    c624:	80c0030b 	ldhu	r3,12(r16)
    c628:	80801415 	stw	r2,80(r16)
    c62c:	18c40014 	ori	r3,r3,4096
    c630:	80c0030d 	sth	r3,12(r16)
    c634:	dfc00117 	ldw	ra,4(sp)
    c638:	dc000017 	ldw	r16,0(sp)
    c63c:	dec00204 	addi	sp,sp,8
    c640:	f800283a 	ret
    c644:	80c0030b 	ldhu	r3,12(r16)
    c648:	18fbffcc 	andi	r3,r3,61439
    c64c:	80c0030d 	sth	r3,12(r16)
    c650:	dfc00117 	ldw	ra,4(sp)
    c654:	dc000017 	ldw	r16,0(sp)
    c658:	dec00204 	addi	sp,sp,8
    c65c:	f800283a 	ret

0000c660 <__sclose>:
    c660:	2940038f 	ldh	r5,14(r5)
    c664:	000ee301 	jmpi	ee30 <_close_r>

0000c668 <strcmp>:
    c668:	2144b03a 	or	r2,r4,r5
    c66c:	108000cc 	andi	r2,r2,3
    c670:	1000171e 	bne	r2,zero,c6d0 <strcmp+0x68>
    c674:	20800017 	ldw	r2,0(r4)
    c678:	28c00017 	ldw	r3,0(r5)
    c67c:	10c0141e 	bne	r2,r3,c6d0 <strcmp+0x68>
    c680:	027fbff4 	movhi	r9,65279
    c684:	4a7fbfc4 	addi	r9,r9,-257
    c688:	0086303a 	nor	r3,zero,r2
    c68c:	02202074 	movhi	r8,32897
    c690:	1245883a 	add	r2,r2,r9
    c694:	42202004 	addi	r8,r8,-32640
    c698:	10c4703a 	and	r2,r2,r3
    c69c:	1204703a 	and	r2,r2,r8
    c6a0:	10000226 	beq	r2,zero,c6ac <strcmp+0x44>
    c6a4:	00001706 	br	c704 <strcmp+0x9c>
    c6a8:	1000161e 	bne	r2,zero,c704 <strcmp+0x9c>
    c6ac:	21000104 	addi	r4,r4,4
    c6b0:	20c00017 	ldw	r3,0(r4)
    c6b4:	29400104 	addi	r5,r5,4
    c6b8:	29800017 	ldw	r6,0(r5)
    c6bc:	1a4f883a 	add	r7,r3,r9
    c6c0:	00c4303a 	nor	r2,zero,r3
    c6c4:	3884703a 	and	r2,r7,r2
    c6c8:	1204703a 	and	r2,r2,r8
    c6cc:	19bff626 	beq	r3,r6,c6a8 <__alt_mem_Flash_flash_data+0xf400c6a8>
    c6d0:	20800007 	ldb	r2,0(r4)
    c6d4:	1000051e 	bne	r2,zero,c6ec <strcmp+0x84>
    c6d8:	00000606 	br	c6f4 <strcmp+0x8c>
    c6dc:	21000044 	addi	r4,r4,1
    c6e0:	20800007 	ldb	r2,0(r4)
    c6e4:	29400044 	addi	r5,r5,1
    c6e8:	10000226 	beq	r2,zero,c6f4 <strcmp+0x8c>
    c6ec:	28c00007 	ldb	r3,0(r5)
    c6f0:	10fffa26 	beq	r2,r3,c6dc <__alt_mem_Flash_flash_data+0xf400c6dc>
    c6f4:	20800003 	ldbu	r2,0(r4)
    c6f8:	28c00003 	ldbu	r3,0(r5)
    c6fc:	10c5c83a 	sub	r2,r2,r3
    c700:	f800283a 	ret
    c704:	0005883a 	mov	r2,zero
    c708:	f800283a 	ret

0000c70c <__ssprint_r>:
    c70c:	30800217 	ldw	r2,8(r6)
    c710:	defff604 	addi	sp,sp,-40
    c714:	ddc00715 	stw	r23,28(sp)
    c718:	dc800215 	stw	r18,8(sp)
    c71c:	dfc00915 	stw	ra,36(sp)
    c720:	df000815 	stw	fp,32(sp)
    c724:	dd800615 	stw	r22,24(sp)
    c728:	dd400515 	stw	r21,20(sp)
    c72c:	dd000415 	stw	r20,16(sp)
    c730:	dcc00315 	stw	r19,12(sp)
    c734:	dc400115 	stw	r17,4(sp)
    c738:	dc000015 	stw	r16,0(sp)
    c73c:	3025883a 	mov	r18,r6
    c740:	35c00017 	ldw	r23,0(r6)
    c744:	10005626 	beq	r2,zero,c8a0 <__ssprint_r+0x194>
    c748:	2027883a 	mov	r19,r4
    c74c:	28800217 	ldw	r2,8(r5)
    c750:	29000017 	ldw	r4,0(r5)
    c754:	2823883a 	mov	r17,r5
    c758:	0039883a 	mov	fp,zero
    c75c:	0021883a 	mov	r16,zero
    c760:	80003926 	beq	r16,zero,c848 <__ssprint_r+0x13c>
    c764:	102b883a 	mov	r21,r2
    c768:	102d883a 	mov	r22,r2
    c76c:	80803a36 	bltu	r16,r2,c858 <__ssprint_r+0x14c>
    c770:	88c0030b 	ldhu	r3,12(r17)
    c774:	1881200c 	andi	r2,r3,1152
    c778:	10002626 	beq	r2,zero,c814 <__ssprint_r+0x108>
    c77c:	88800517 	ldw	r2,20(r17)
    c780:	89400417 	ldw	r5,16(r17)
    c784:	81c00044 	addi	r7,r16,1
    c788:	108d883a 	add	r6,r2,r2
    c78c:	3085883a 	add	r2,r6,r2
    c790:	100cd7fa 	srli	r6,r2,31
    c794:	216dc83a 	sub	r22,r4,r5
    c798:	3d89883a 	add	r4,r7,r22
    c79c:	3085883a 	add	r2,r6,r2
    c7a0:	102bd07a 	srai	r21,r2,1
    c7a4:	a80d883a 	mov	r6,r21
    c7a8:	a900022e 	bgeu	r21,r4,c7b4 <__ssprint_r+0xa8>
    c7ac:	202b883a 	mov	r21,r4
    c7b0:	200d883a 	mov	r6,r4
    c7b4:	18c1000c 	andi	r3,r3,1024
    c7b8:	9809883a 	mov	r4,r19
    c7bc:	18002926 	beq	r3,zero,c864 <__ssprint_r+0x158>
    c7c0:	300b883a 	mov	r5,r6
    c7c4:	000a3140 	call	a314 <_malloc_r>
    c7c8:	1029883a 	mov	r20,r2
    c7cc:	10002b26 	beq	r2,zero,c87c <__ssprint_r+0x170>
    c7d0:	89400417 	ldw	r5,16(r17)
    c7d4:	1009883a 	mov	r4,r2
    c7d8:	b00d883a 	mov	r6,r22
    c7dc:	000aba40 	call	aba4 <memcpy>
    c7e0:	8880030b 	ldhu	r2,12(r17)
    c7e4:	00fedfc4 	movi	r3,-1153
    c7e8:	10c4703a 	and	r2,r2,r3
    c7ec:	10802014 	ori	r2,r2,128
    c7f0:	8880030d 	sth	r2,12(r17)
    c7f4:	a589883a 	add	r4,r20,r22
    c7f8:	adadc83a 	sub	r22,r21,r22
    c7fc:	8d400515 	stw	r21,20(r17)
    c800:	8d800215 	stw	r22,8(r17)
    c804:	8d000415 	stw	r20,16(r17)
    c808:	89000015 	stw	r4,0(r17)
    c80c:	802b883a 	mov	r21,r16
    c810:	802d883a 	mov	r22,r16
    c814:	e00b883a 	mov	r5,fp
    c818:	b00d883a 	mov	r6,r22
    c81c:	000acdc0 	call	acdc <memmove>
    c820:	88800217 	ldw	r2,8(r17)
    c824:	89000017 	ldw	r4,0(r17)
    c828:	90c00217 	ldw	r3,8(r18)
    c82c:	1545c83a 	sub	r2,r2,r21
    c830:	2589883a 	add	r4,r4,r22
    c834:	88800215 	stw	r2,8(r17)
    c838:	89000015 	stw	r4,0(r17)
    c83c:	1c21c83a 	sub	r16,r3,r16
    c840:	94000215 	stw	r16,8(r18)
    c844:	80001626 	beq	r16,zero,c8a0 <__ssprint_r+0x194>
    c848:	bf000017 	ldw	fp,0(r23)
    c84c:	bc000117 	ldw	r16,4(r23)
    c850:	bdc00204 	addi	r23,r23,8
    c854:	003fc206 	br	c760 <__alt_mem_Flash_flash_data+0xf400c760>
    c858:	802b883a 	mov	r21,r16
    c85c:	802d883a 	mov	r22,r16
    c860:	003fec06 	br	c814 <__alt_mem_Flash_flash_data+0xf400c814>
    c864:	000befc0 	call	befc <_realloc_r>
    c868:	1029883a 	mov	r20,r2
    c86c:	103fe11e 	bne	r2,zero,c7f4 <__alt_mem_Flash_flash_data+0xf400c7f4>
    c870:	89400417 	ldw	r5,16(r17)
    c874:	9809883a 	mov	r4,r19
    c878:	00097440 	call	9744 <_free_r>
    c87c:	88c0030b 	ldhu	r3,12(r17)
    c880:	00800304 	movi	r2,12
    c884:	98800015 	stw	r2,0(r19)
    c888:	18c01014 	ori	r3,r3,64
    c88c:	88c0030d 	sth	r3,12(r17)
    c890:	00bfffc4 	movi	r2,-1
    c894:	90000215 	stw	zero,8(r18)
    c898:	90000115 	stw	zero,4(r18)
    c89c:	00000206 	br	c8a8 <__ssprint_r+0x19c>
    c8a0:	90000115 	stw	zero,4(r18)
    c8a4:	0005883a 	mov	r2,zero
    c8a8:	dfc00917 	ldw	ra,36(sp)
    c8ac:	df000817 	ldw	fp,32(sp)
    c8b0:	ddc00717 	ldw	r23,28(sp)
    c8b4:	dd800617 	ldw	r22,24(sp)
    c8b8:	dd400517 	ldw	r21,20(sp)
    c8bc:	dd000417 	ldw	r20,16(sp)
    c8c0:	dcc00317 	ldw	r19,12(sp)
    c8c4:	dc800217 	ldw	r18,8(sp)
    c8c8:	dc400117 	ldw	r17,4(sp)
    c8cc:	dc000017 	ldw	r16,0(sp)
    c8d0:	dec00a04 	addi	sp,sp,40
    c8d4:	f800283a 	ret

0000c8d8 <___svfiprintf_internal_r>:
    c8d8:	2880030b 	ldhu	r2,12(r5)
    c8dc:	deffc904 	addi	sp,sp,-220
    c8e0:	dd403215 	stw	r21,200(sp)
    c8e4:	dfc03615 	stw	ra,216(sp)
    c8e8:	df003515 	stw	fp,212(sp)
    c8ec:	ddc03415 	stw	r23,208(sp)
    c8f0:	dd803315 	stw	r22,204(sp)
    c8f4:	dd003115 	stw	r20,196(sp)
    c8f8:	dcc03015 	stw	r19,192(sp)
    c8fc:	dc802f15 	stw	r18,188(sp)
    c900:	dc402e15 	stw	r17,184(sp)
    c904:	dc002d15 	stw	r16,180(sp)
    c908:	d9402715 	stw	r5,156(sp)
    c90c:	d9002915 	stw	r4,164(sp)
    c910:	1080200c 	andi	r2,r2,128
    c914:	d9c02315 	stw	r7,140(sp)
    c918:	302b883a 	mov	r21,r6
    c91c:	10000226 	beq	r2,zero,c928 <___svfiprintf_internal_r+0x50>
    c920:	28800417 	ldw	r2,16(r5)
    c924:	1003ce26 	beq	r2,zero,d860 <___svfiprintf_internal_r+0xf88>
    c928:	dac01a04 	addi	r11,sp,104
    c92c:	da8019c4 	addi	r10,sp,103
    c930:	dc802917 	ldw	r18,164(sp)
    c934:	dd002717 	ldw	r20,156(sp)
    c938:	04c000b4 	movhi	r19,2
    c93c:	dac01e15 	stw	r11,120(sp)
    c940:	5a97c83a 	sub	r11,r11,r10
    c944:	9cc0f204 	addi	r19,r19,968
    c948:	da801f15 	stw	r10,124(sp)
    c94c:	dec01a15 	stw	sp,104(sp)
    c950:	d8001c15 	stw	zero,112(sp)
    c954:	d8001b15 	stw	zero,108(sp)
    c958:	d811883a 	mov	r8,sp
    c95c:	d8002a15 	stw	zero,168(sp)
    c960:	d8002415 	stw	zero,144(sp)
    c964:	dac02b15 	stw	r11,172(sp)
    c968:	a8800007 	ldb	r2,0(r21)
    c96c:	10026a26 	beq	r2,zero,d318 <___svfiprintf_internal_r+0xa40>
    c970:	01000944 	movi	r4,37
    c974:	11026826 	beq	r2,r4,d318 <___svfiprintf_internal_r+0xa40>
    c978:	a805883a 	mov	r2,r21
    c97c:	00000106 	br	c984 <___svfiprintf_internal_r+0xac>
    c980:	19000326 	beq	r3,r4,c990 <___svfiprintf_internal_r+0xb8>
    c984:	10800044 	addi	r2,r2,1
    c988:	10c00007 	ldb	r3,0(r2)
    c98c:	183ffc1e 	bne	r3,zero,c980 <__alt_mem_Flash_flash_data+0xf400c980>
    c990:	1561c83a 	sub	r16,r2,r21
    c994:	102d883a 	mov	r22,r2
    c998:	80000e26 	beq	r16,zero,c9d4 <___svfiprintf_internal_r+0xfc>
    c99c:	d8c01c17 	ldw	r3,112(sp)
    c9a0:	d8801b17 	ldw	r2,108(sp)
    c9a4:	45400015 	stw	r21,0(r8)
    c9a8:	1c07883a 	add	r3,r3,r16
    c9ac:	10800044 	addi	r2,r2,1
    c9b0:	d8c01c15 	stw	r3,112(sp)
    c9b4:	44000115 	stw	r16,4(r8)
    c9b8:	d8801b15 	stw	r2,108(sp)
    c9bc:	00c001c4 	movi	r3,7
    c9c0:	1882d816 	blt	r3,r2,d524 <___svfiprintf_internal_r+0xc4c>
    c9c4:	42000204 	addi	r8,r8,8
    c9c8:	da802417 	ldw	r10,144(sp)
    c9cc:	5415883a 	add	r10,r10,r16
    c9d0:	da802415 	stw	r10,144(sp)
    c9d4:	b0800007 	ldb	r2,0(r22)
    c9d8:	10027526 	beq	r2,zero,d3b0 <___svfiprintf_internal_r+0xad8>
    c9dc:	b1000047 	ldb	r4,1(r22)
    c9e0:	b5400044 	addi	r21,r22,1
    c9e4:	d8001d85 	stb	zero,118(sp)
    c9e8:	000d883a 	mov	r6,zero
    c9ec:	043fffc4 	movi	r16,-1
    c9f0:	d8002115 	stw	zero,132(sp)
    c9f4:	0023883a 	mov	r17,zero
    c9f8:	00c01604 	movi	r3,88
    c9fc:	01400244 	movi	r5,9
    ca00:	02400a84 	movi	r9,42
    ca04:	01c01b04 	movi	r7,108
    ca08:	ad400044 	addi	r21,r21,1
    ca0c:	20bff804 	addi	r2,r4,-32
    ca10:	18819736 	bltu	r3,r2,d070 <___svfiprintf_internal_r+0x798>
    ca14:	100490ba 	slli	r2,r2,2
    ca18:	02c00074 	movhi	r11,1
    ca1c:	5af28b04 	addi	r11,r11,-13780
    ca20:	12c5883a 	add	r2,r2,r11
    ca24:	10800017 	ldw	r2,0(r2)
    ca28:	1000683a 	jmp	r2
    ca2c:	0000cf68 	cmpgeui	zero,zero,829
    ca30:	0000d070 	cmpltui	zero,zero,833
    ca34:	0000d070 	cmpltui	zero,zero,833
    ca38:	0000cf5c 	xori	zero,zero,829
    ca3c:	0000d070 	cmpltui	zero,zero,833
    ca40:	0000d070 	cmpltui	zero,zero,833
    ca44:	0000d070 	cmpltui	zero,zero,833
    ca48:	0000d070 	cmpltui	zero,zero,833
    ca4c:	0000d070 	cmpltui	zero,zero,833
    ca50:	0000d070 	cmpltui	zero,zero,833
    ca54:	0000cc88 	cmpgei	zero,zero,818
    ca58:	0000d0a4 	muli	zero,zero,834
    ca5c:	0000d070 	cmpltui	zero,zero,833
    ca60:	0000ccb0 	cmpltui	zero,zero,818
    ca64:	0000d0b0 	cmpltui	zero,zero,834
    ca68:	0000d070 	cmpltui	zero,zero,833
    ca6c:	0000d098 	cmpnei	zero,zero,834
    ca70:	0000d038 	rdprs	zero,zero,832
    ca74:	0000d038 	rdprs	zero,zero,832
    ca78:	0000d038 	rdprs	zero,zero,832
    ca7c:	0000d038 	rdprs	zero,zero,832
    ca80:	0000d038 	rdprs	zero,zero,832
    ca84:	0000d038 	rdprs	zero,zero,832
    ca88:	0000d038 	rdprs	zero,zero,832
    ca8c:	0000d038 	rdprs	zero,zero,832
    ca90:	0000d038 	rdprs	zero,zero,832
    ca94:	0000d070 	cmpltui	zero,zero,833
    ca98:	0000d070 	cmpltui	zero,zero,833
    ca9c:	0000d070 	cmpltui	zero,zero,833
    caa0:	0000d070 	cmpltui	zero,zero,833
    caa4:	0000d070 	cmpltui	zero,zero,833
    caa8:	0000d070 	cmpltui	zero,zero,833
    caac:	0000d070 	cmpltui	zero,zero,833
    cab0:	0000d070 	cmpltui	zero,zero,833
    cab4:	0000d070 	cmpltui	zero,zero,833
    cab8:	0000d070 	cmpltui	zero,zero,833
    cabc:	0000cfd0 	cmplti	zero,zero,831
    cac0:	0000d070 	cmpltui	zero,zero,833
    cac4:	0000d070 	cmpltui	zero,zero,833
    cac8:	0000d070 	cmpltui	zero,zero,833
    cacc:	0000d070 	cmpltui	zero,zero,833
    cad0:	0000d070 	cmpltui	zero,zero,833
    cad4:	0000d070 	cmpltui	zero,zero,833
    cad8:	0000d070 	cmpltui	zero,zero,833
    cadc:	0000d070 	cmpltui	zero,zero,833
    cae0:	0000d070 	cmpltui	zero,zero,833
    cae4:	0000d070 	cmpltui	zero,zero,833
    cae8:	0000cc5c 	xori	zero,zero,817
    caec:	0000d070 	cmpltui	zero,zero,833
    caf0:	0000d070 	cmpltui	zero,zero,833
    caf4:	0000d070 	cmpltui	zero,zero,833
    caf8:	0000d070 	cmpltui	zero,zero,833
    cafc:	0000d070 	cmpltui	zero,zero,833
    cb00:	0000cb90 	cmplti	zero,zero,814
    cb04:	0000d070 	cmpltui	zero,zero,833
    cb08:	0000d070 	cmpltui	zero,zero,833
    cb0c:	0000cebc 	xorhi	zero,zero,826
    cb10:	0000d070 	cmpltui	zero,zero,833
    cb14:	0000d070 	cmpltui	zero,zero,833
    cb18:	0000d070 	cmpltui	zero,zero,833
    cb1c:	0000d070 	cmpltui	zero,zero,833
    cb20:	0000d070 	cmpltui	zero,zero,833
    cb24:	0000d070 	cmpltui	zero,zero,833
    cb28:	0000d070 	cmpltui	zero,zero,833
    cb2c:	0000d070 	cmpltui	zero,zero,833
    cb30:	0000d070 	cmpltui	zero,zero,833
    cb34:	0000d070 	cmpltui	zero,zero,833
    cb38:	0000cda8 	cmpgeui	zero,zero,822
    cb3c:	0000cd68 	cmpgeui	zero,zero,821
    cb40:	0000d070 	cmpltui	zero,zero,833
    cb44:	0000d070 	cmpltui	zero,zero,833
    cb48:	0000d070 	cmpltui	zero,zero,833
    cb4c:	0000cf18 	cmpnei	zero,zero,828
    cb50:	0000cd68 	cmpgeui	zero,zero,821
    cb54:	0000d070 	cmpltui	zero,zero,833
    cb58:	0000d070 	cmpltui	zero,zero,833
    cb5c:	0000cf04 	movi	zero,828
    cb60:	0000d070 	cmpltui	zero,zero,833
    cb64:	0000cf24 	muli	zero,zero,828
    cb68:	0000cc60 	cmpeqi	zero,zero,817
    cb6c:	0000cd24 	muli	zero,zero,820
    cb70:	0000cd18 	cmpnei	zero,zero,820
    cb74:	0000d070 	cmpltui	zero,zero,833
    cb78:	0000ccbc 	xorhi	zero,zero,818
    cb7c:	0000d070 	cmpltui	zero,zero,833
    cb80:	0000cb94 	movui	zero,814
    cb84:	0000d070 	cmpltui	zero,zero,833
    cb88:	0000d070 	cmpltui	zero,zero,833
    cb8c:	0000cf84 	movi	zero,830
    cb90:	8c400414 	ori	r17,r17,16
    cb94:	8880080c 	andi	r2,r17,32
    cb98:	10029626 	beq	r2,zero,d5f4 <___svfiprintf_internal_r+0xd1c>
    cb9c:	da802317 	ldw	r10,140(sp)
    cba0:	dac02317 	ldw	r11,140(sp)
    cba4:	00800044 	movi	r2,1
    cba8:	52400017 	ldw	r9,0(r10)
    cbac:	52800117 	ldw	r10,4(r10)
    cbb0:	5ac00204 	addi	r11,r11,8
    cbb4:	dac02315 	stw	r11,140(sp)
    cbb8:	4a86b03a 	or	r3,r9,r10
    cbbc:	d8001d85 	stb	zero,118(sp)
    cbc0:	8039883a 	mov	fp,r16
    cbc4:	0017883a 	mov	r11,zero
    cbc8:	80000216 	blt	r16,zero,cbd4 <___svfiprintf_internal_r+0x2fc>
    cbcc:	013fdfc4 	movi	r4,-129
    cbd0:	8922703a 	and	r17,r17,r4
    cbd4:	1801d21e 	bne	r3,zero,d320 <___svfiprintf_internal_r+0xa48>
    cbd8:	80024626 	beq	r16,zero,d4f4 <___svfiprintf_internal_r+0xc1c>
    cbdc:	10803fcc 	andi	r2,r2,255
    cbe0:	00c00044 	movi	r3,1
    cbe4:	10c2b426 	beq	r2,r3,d6b8 <___svfiprintf_internal_r+0xde0>
    cbe8:	00c00084 	movi	r3,2
    cbec:	10c25d26 	beq	r2,r3,d564 <___svfiprintf_internal_r+0xc8c>
    cbf0:	d8c01a04 	addi	r3,sp,104
    cbf4:	4808d0fa 	srli	r4,r9,3
    cbf8:	500a977a 	slli	r5,r10,29
    cbfc:	5014d0fa 	srli	r10,r10,3
    cc00:	4a4001cc 	andi	r9,r9,7
    cc04:	48800c04 	addi	r2,r9,48
    cc08:	18ffffc4 	addi	r3,r3,-1
    cc0c:	2912b03a 	or	r9,r5,r4
    cc10:	18800005 	stb	r2,0(r3)
    cc14:	4a88b03a 	or	r4,r9,r10
    cc18:	203ff61e 	bne	r4,zero,cbf4 <__alt_mem_Flash_flash_data+0xf400cbf4>
    cc1c:	8900004c 	andi	r4,r17,1
    cc20:	d8c02615 	stw	r3,152(sp)
    cc24:	2002961e 	bne	r4,zero,d680 <___svfiprintf_internal_r+0xda8>
    cc28:	da801e17 	ldw	r10,120(sp)
    cc2c:	50f9c83a 	sub	fp,r10,r3
    cc30:	df002015 	stw	fp,128(sp)
    cc34:	e400010e 	bge	fp,r16,cc3c <___svfiprintf_internal_r+0x364>
    cc38:	dc002015 	stw	r16,128(sp)
    cc3c:	5ac03fcc 	andi	r11,r11,255
    cc40:	5ac0201c 	xori	r11,r11,128
    cc44:	5affe004 	addi	r11,r11,-128
    cc48:	58006326 	beq	r11,zero,cdd8 <___svfiprintf_internal_r+0x500>
    cc4c:	d8c02017 	ldw	r3,128(sp)
    cc50:	18c00044 	addi	r3,r3,1
    cc54:	d8c02015 	stw	r3,128(sp)
    cc58:	00005f06 	br	cdd8 <___svfiprintf_internal_r+0x500>
    cc5c:	8c400414 	ori	r17,r17,16
    cc60:	8880080c 	andi	r2,r17,32
    cc64:	10027926 	beq	r2,zero,d64c <___svfiprintf_internal_r+0xd74>
    cc68:	dac02317 	ldw	r11,140(sp)
    cc6c:	0005883a 	mov	r2,zero
    cc70:	5a400017 	ldw	r9,0(r11)
    cc74:	5a800117 	ldw	r10,4(r11)
    cc78:	5ac00204 	addi	r11,r11,8
    cc7c:	dac02315 	stw	r11,140(sp)
    cc80:	4a86b03a 	or	r3,r9,r10
    cc84:	003fcd06 	br	cbbc <__alt_mem_Flash_flash_data+0xf400cbbc>
    cc88:	da802317 	ldw	r10,140(sp)
    cc8c:	dac02317 	ldw	r11,140(sp)
    cc90:	52800017 	ldw	r10,0(r10)
    cc94:	58800104 	addi	r2,r11,4
    cc98:	da802115 	stw	r10,132(sp)
    cc9c:	50028c0e 	bge	r10,zero,d6d0 <___svfiprintf_internal_r+0xdf8>
    cca0:	da802117 	ldw	r10,132(sp)
    cca4:	d8802315 	stw	r2,140(sp)
    cca8:	0295c83a 	sub	r10,zero,r10
    ccac:	da802115 	stw	r10,132(sp)
    ccb0:	8c400114 	ori	r17,r17,4
    ccb4:	a9000007 	ldb	r4,0(r21)
    ccb8:	003f5306 	br	ca08 <__alt_mem_Flash_flash_data+0xf400ca08>
    ccbc:	da802317 	ldw	r10,140(sp)
    ccc0:	dac02317 	ldw	r11,140(sp)
    ccc4:	d8001d85 	stb	zero,118(sp)
    ccc8:	52800017 	ldw	r10,0(r10)
    cccc:	5dc00104 	addi	r23,r11,4
    ccd0:	da802615 	stw	r10,152(sp)
    ccd4:	5002d626 	beq	r10,zero,d830 <___svfiprintf_internal_r+0xf58>
    ccd8:	d9002617 	ldw	r4,152(sp)
    ccdc:	8002cc16 	blt	r16,zero,d810 <___svfiprintf_internal_r+0xf38>
    cce0:	000b883a 	mov	r5,zero
    cce4:	800d883a 	mov	r6,r16
    cce8:	da002c15 	stw	r8,176(sp)
    ccec:	000aabc0 	call	aabc <memchr>
    ccf0:	da002c17 	ldw	r8,176(sp)
    ccf4:	1002f026 	beq	r2,zero,d8b8 <___svfiprintf_internal_r+0xfe0>
    ccf8:	d8c02617 	ldw	r3,152(sp)
    ccfc:	10f9c83a 	sub	fp,r2,r3
    cd00:	8700010e 	bge	r16,fp,cd08 <___svfiprintf_internal_r+0x430>
    cd04:	8039883a 	mov	fp,r16
    cd08:	dac01d83 	ldbu	r11,118(sp)
    cd0c:	ddc02315 	stw	r23,140(sp)
    cd10:	0021883a 	mov	r16,zero
    cd14:	003fc606 	br	cc30 <__alt_mem_Flash_flash_data+0xf400cc30>
    cd18:	8c400814 	ori	r17,r17,32
    cd1c:	a9000007 	ldb	r4,0(r21)
    cd20:	003f3906 	br	ca08 <__alt_mem_Flash_flash_data+0xf400ca08>
    cd24:	da802317 	ldw	r10,140(sp)
    cd28:	00800c04 	movi	r2,48
    cd2c:	dac02317 	ldw	r11,140(sp)
    cd30:	52400017 	ldw	r9,0(r10)
    cd34:	d8801d05 	stb	r2,116(sp)
    cd38:	00801e04 	movi	r2,120
    cd3c:	d8801d45 	stb	r2,117(sp)
    cd40:	008000b4 	movhi	r2,2
    cd44:	10808904 	addi	r2,r2,548
    cd48:	5ac00104 	addi	r11,r11,4
    cd4c:	d8802a15 	stw	r2,168(sp)
    cd50:	0015883a 	mov	r10,zero
    cd54:	8c400094 	ori	r17,r17,2
    cd58:	dac02315 	stw	r11,140(sp)
    cd5c:	00800084 	movi	r2,2
    cd60:	4807883a 	mov	r3,r9
    cd64:	003f9506 	br	cbbc <__alt_mem_Flash_flash_data+0xf400cbbc>
    cd68:	d9801d85 	stb	r6,118(sp)
    cd6c:	8880080c 	andi	r2,r17,32
    cd70:	d8c02317 	ldw	r3,140(sp)
    cd74:	10009b26 	beq	r2,zero,cfe4 <___svfiprintf_internal_r+0x70c>
    cd78:	dac02317 	ldw	r11,140(sp)
    cd7c:	18800117 	ldw	r2,4(r3)
    cd80:	1a400017 	ldw	r9,0(r3)
    cd84:	5ac00204 	addi	r11,r11,8
    cd88:	dac02315 	stw	r11,140(sp)
    cd8c:	1015883a 	mov	r10,r2
    cd90:	10009f16 	blt	r2,zero,d010 <___svfiprintf_internal_r+0x738>
    cd94:	dac01d83 	ldbu	r11,118(sp)
    cd98:	8039883a 	mov	fp,r16
    cd9c:	00800044 	movi	r2,1
    cda0:	4a86b03a 	or	r3,r9,r10
    cda4:	003f8806 	br	cbc8 <__alt_mem_Flash_flash_data+0xf400cbc8>
    cda8:	dac02317 	ldw	r11,140(sp)
    cdac:	00c00044 	movi	r3,1
    cdb0:	da801004 	addi	r10,sp,64
    cdb4:	58800017 	ldw	r2,0(r11)
    cdb8:	5ac00104 	addi	r11,r11,4
    cdbc:	d8c02015 	stw	r3,128(sp)
    cdc0:	d8001d85 	stb	zero,118(sp)
    cdc4:	d8801005 	stb	r2,64(sp)
    cdc8:	dac02315 	stw	r11,140(sp)
    cdcc:	1839883a 	mov	fp,r3
    cdd0:	da802615 	stw	r10,152(sp)
    cdd4:	0021883a 	mov	r16,zero
    cdd8:	8a80008c 	andi	r10,r17,2
    cddc:	da802215 	stw	r10,136(sp)
    cde0:	50000326 	beq	r10,zero,cdf0 <___svfiprintf_internal_r+0x518>
    cde4:	dac02017 	ldw	r11,128(sp)
    cde8:	5ac00084 	addi	r11,r11,2
    cdec:	dac02015 	stw	r11,128(sp)
    cdf0:	88c0210c 	andi	r3,r17,132
    cdf4:	d8c02515 	stw	r3,148(sp)
    cdf8:	1800bd1e 	bne	r3,zero,d0f0 <___svfiprintf_internal_r+0x818>
    cdfc:	da802117 	ldw	r10,132(sp)
    ce00:	dac02017 	ldw	r11,128(sp)
    ce04:	52edc83a 	sub	r22,r10,r11
    ce08:	0580b90e 	bge	zero,r22,d0f0 <___svfiprintf_internal_r+0x818>
    ce0c:	02400404 	movi	r9,16
    ce10:	d8c01c17 	ldw	r3,112(sp)
    ce14:	d8801b17 	ldw	r2,108(sp)
    ce18:	4d829b0e 	bge	r9,r22,d888 <___svfiprintf_internal_r+0xfb0>
    ce1c:	014000b4 	movhi	r5,2
    ce20:	2940f604 	addi	r5,r5,984
    ce24:	d9402815 	stw	r5,160(sp)
    ce28:	05c001c4 	movi	r23,7
    ce2c:	00000306 	br	ce3c <___svfiprintf_internal_r+0x564>
    ce30:	b5bffc04 	addi	r22,r22,-16
    ce34:	42000204 	addi	r8,r8,8
    ce38:	4d80150e 	bge	r9,r22,ce90 <___svfiprintf_internal_r+0x5b8>
    ce3c:	028000b4 	movhi	r10,2
    ce40:	18c00404 	addi	r3,r3,16
    ce44:	10800044 	addi	r2,r2,1
    ce48:	5280f604 	addi	r10,r10,984
    ce4c:	42800015 	stw	r10,0(r8)
    ce50:	42400115 	stw	r9,4(r8)
    ce54:	d8c01c15 	stw	r3,112(sp)
    ce58:	d8801b15 	stw	r2,108(sp)
    ce5c:	b8bff40e 	bge	r23,r2,ce30 <__alt_mem_Flash_flash_data+0xf400ce30>
    ce60:	9009883a 	mov	r4,r18
    ce64:	a00b883a 	mov	r5,r20
    ce68:	d9801a04 	addi	r6,sp,104
    ce6c:	da402c15 	stw	r9,176(sp)
    ce70:	000c70c0 	call	c70c <__ssprint_r>
    ce74:	da402c17 	ldw	r9,176(sp)
    ce78:	1001531e 	bne	r2,zero,d3c8 <___svfiprintf_internal_r+0xaf0>
    ce7c:	b5bffc04 	addi	r22,r22,-16
    ce80:	d8c01c17 	ldw	r3,112(sp)
    ce84:	d8801b17 	ldw	r2,108(sp)
    ce88:	d811883a 	mov	r8,sp
    ce8c:	4dbfeb16 	blt	r9,r22,ce3c <__alt_mem_Flash_flash_data+0xf400ce3c>
    ce90:	dac02817 	ldw	r11,160(sp)
    ce94:	b0c7883a 	add	r3,r22,r3
    ce98:	10800044 	addi	r2,r2,1
    ce9c:	42c00015 	stw	r11,0(r8)
    cea0:	45800115 	stw	r22,4(r8)
    cea4:	d8c01c15 	stw	r3,112(sp)
    cea8:	d8801b15 	stw	r2,108(sp)
    ceac:	010001c4 	movi	r4,7
    ceb0:	2081dd16 	blt	r4,r2,d628 <___svfiprintf_internal_r+0xd50>
    ceb4:	42000204 	addi	r8,r8,8
    ceb8:	00008f06 	br	d0f8 <___svfiprintf_internal_r+0x820>
    cebc:	008000b4 	movhi	r2,2
    cec0:	10808404 	addi	r2,r2,528
    cec4:	d8802a15 	stw	r2,168(sp)
    cec8:	d9801d85 	stb	r6,118(sp)
    cecc:	8880080c 	andi	r2,r17,32
    ced0:	10003226 	beq	r2,zero,cf9c <___svfiprintf_internal_r+0x6c4>
    ced4:	da802317 	ldw	r10,140(sp)
    ced8:	dac02317 	ldw	r11,140(sp)
    cedc:	52400017 	ldw	r9,0(r10)
    cee0:	52800117 	ldw	r10,4(r10)
    cee4:	5ac00204 	addi	r11,r11,8
    cee8:	dac02315 	stw	r11,140(sp)
    ceec:	8880004c 	andi	r2,r17,1
    cef0:	10003426 	beq	r2,zero,cfc4 <___svfiprintf_internal_r+0x6ec>
    cef4:	4a86b03a 	or	r3,r9,r10
    cef8:	1802231e 	bne	r3,zero,d788 <___svfiprintf_internal_r+0xeb0>
    cefc:	00800084 	movi	r2,2
    cf00:	003f2e06 	br	cbbc <__alt_mem_Flash_flash_data+0xf400cbbc>
    cf04:	a9000007 	ldb	r4,0(r21)
    cf08:	a805883a 	mov	r2,r21
    cf0c:	21c22426 	beq	r4,r7,d7a0 <___svfiprintf_internal_r+0xec8>
    cf10:	8c400414 	ori	r17,r17,16
    cf14:	003ebc06 	br	ca08 <__alt_mem_Flash_flash_data+0xf400ca08>
    cf18:	8c401014 	ori	r17,r17,64
    cf1c:	a9000007 	ldb	r4,0(r21)
    cf20:	003eb906 	br	ca08 <__alt_mem_Flash_flash_data+0xf400ca08>
    cf24:	d9801d85 	stb	r6,118(sp)
    cf28:	8880080c 	andi	r2,r17,32
    cf2c:	10020d1e 	bne	r2,zero,d764 <___svfiprintf_internal_r+0xe8c>
    cf30:	8880040c 	andi	r2,r17,16
    cf34:	10021e1e 	bne	r2,zero,d7b0 <___svfiprintf_internal_r+0xed8>
    cf38:	8c40100c 	andi	r17,r17,64
    cf3c:	88021c26 	beq	r17,zero,d7b0 <___svfiprintf_internal_r+0xed8>
    cf40:	dac02317 	ldw	r11,140(sp)
    cf44:	da802417 	ldw	r10,144(sp)
    cf48:	58800017 	ldw	r2,0(r11)
    cf4c:	5ac00104 	addi	r11,r11,4
    cf50:	dac02315 	stw	r11,140(sp)
    cf54:	1280000d 	sth	r10,0(r2)
    cf58:	003e8306 	br	c968 <__alt_mem_Flash_flash_data+0xf400c968>
    cf5c:	8c400054 	ori	r17,r17,1
    cf60:	a9000007 	ldb	r4,0(r21)
    cf64:	003ea806 	br	ca08 <__alt_mem_Flash_flash_data+0xf400ca08>
    cf68:	30803fcc 	andi	r2,r6,255
    cf6c:	1080201c 	xori	r2,r2,128
    cf70:	10bfe004 	addi	r2,r2,-128
    cf74:	1001f91e 	bne	r2,zero,d75c <___svfiprintf_internal_r+0xe84>
    cf78:	01800804 	movi	r6,32
    cf7c:	a9000007 	ldb	r4,0(r21)
    cf80:	003ea106 	br	ca08 <__alt_mem_Flash_flash_data+0xf400ca08>
    cf84:	008000b4 	movhi	r2,2
    cf88:	10808904 	addi	r2,r2,548
    cf8c:	d8802a15 	stw	r2,168(sp)
    cf90:	d9801d85 	stb	r6,118(sp)
    cf94:	8880080c 	andi	r2,r17,32
    cf98:	103fce1e 	bne	r2,zero,ced4 <__alt_mem_Flash_flash_data+0xf400ced4>
    cf9c:	8880040c 	andi	r2,r17,16
    cfa0:	1001e526 	beq	r2,zero,d738 <___svfiprintf_internal_r+0xe60>
    cfa4:	da802317 	ldw	r10,140(sp)
    cfa8:	dac02317 	ldw	r11,140(sp)
    cfac:	52400017 	ldw	r9,0(r10)
    cfb0:	8880004c 	andi	r2,r17,1
    cfb4:	5ac00104 	addi	r11,r11,4
    cfb8:	dac02315 	stw	r11,140(sp)
    cfbc:	0015883a 	mov	r10,zero
    cfc0:	103fcc1e 	bne	r2,zero,cef4 <__alt_mem_Flash_flash_data+0xf400cef4>
    cfc4:	00800084 	movi	r2,2
    cfc8:	4a86b03a 	or	r3,r9,r10
    cfcc:	003efb06 	br	cbbc <__alt_mem_Flash_flash_data+0xf400cbbc>
    cfd0:	8c400414 	ori	r17,r17,16
    cfd4:	d9801d85 	stb	r6,118(sp)
    cfd8:	8880080c 	andi	r2,r17,32
    cfdc:	d8c02317 	ldw	r3,140(sp)
    cfe0:	103f651e 	bne	r2,zero,cd78 <__alt_mem_Flash_flash_data+0xf400cd78>
    cfe4:	8880040c 	andi	r2,r17,16
    cfe8:	1001c61e 	bne	r2,zero,d704 <___svfiprintf_internal_r+0xe2c>
    cfec:	8880100c 	andi	r2,r17,64
    cff0:	1001c426 	beq	r2,zero,d704 <___svfiprintf_internal_r+0xe2c>
    cff4:	1a40000f 	ldh	r9,0(r3)
    cff8:	dac02317 	ldw	r11,140(sp)
    cffc:	4815d7fa 	srai	r10,r9,31
    d000:	5ac00104 	addi	r11,r11,4
    d004:	dac02315 	stw	r11,140(sp)
    d008:	5005883a 	mov	r2,r10
    d00c:	103f610e 	bge	r2,zero,cd94 <__alt_mem_Flash_flash_data+0xf400cd94>
    d010:	0253c83a 	sub	r9,zero,r9
    d014:	4804c03a 	cmpne	r2,r9,zero
    d018:	0295c83a 	sub	r10,zero,r10
    d01c:	5095c83a 	sub	r10,r10,r2
    d020:	02c00b44 	movi	r11,45
    d024:	dac01d85 	stb	r11,118(sp)
    d028:	8039883a 	mov	fp,r16
    d02c:	00800044 	movi	r2,1
    d030:	4a86b03a 	or	r3,r9,r10
    d034:	003ee406 	br	cbc8 <__alt_mem_Flash_flash_data+0xf400cbc8>
    d038:	a815883a 	mov	r10,r21
    d03c:	d8002115 	stw	zero,132(sp)
    d040:	20bff404 	addi	r2,r4,-48
    d044:	51000007 	ldb	r4,0(r10)
    d048:	da802117 	ldw	r10,132(sp)
    d04c:	ad400044 	addi	r21,r21,1
    d050:	52c002a4 	muli	r11,r10,10
    d054:	a815883a 	mov	r10,r21
    d058:	5885883a 	add	r2,r11,r2
    d05c:	d8802115 	stw	r2,132(sp)
    d060:	20bff404 	addi	r2,r4,-48
    d064:	28bff72e 	bgeu	r5,r2,d044 <__alt_mem_Flash_flash_data+0xf400d044>
    d068:	20bff804 	addi	r2,r4,-32
    d06c:	18be692e 	bgeu	r3,r2,ca14 <__alt_mem_Flash_flash_data+0xf400ca14>
    d070:	d9801d85 	stb	r6,118(sp)
    d074:	2000ce26 	beq	r4,zero,d3b0 <___svfiprintf_internal_r+0xad8>
    d078:	02800044 	movi	r10,1
    d07c:	dac01004 	addi	r11,sp,64
    d080:	da802015 	stw	r10,128(sp)
    d084:	d9001005 	stb	r4,64(sp)
    d088:	d8001d85 	stb	zero,118(sp)
    d08c:	5039883a 	mov	fp,r10
    d090:	dac02615 	stw	r11,152(sp)
    d094:	003f4f06 	br	cdd4 <__alt_mem_Flash_flash_data+0xf400cdd4>
    d098:	8c402014 	ori	r17,r17,128
    d09c:	a9000007 	ldb	r4,0(r21)
    d0a0:	003e5906 	br	ca08 <__alt_mem_Flash_flash_data+0xf400ca08>
    d0a4:	01800ac4 	movi	r6,43
    d0a8:	a9000007 	ldb	r4,0(r21)
    d0ac:	003e5606 	br	ca08 <__alt_mem_Flash_flash_data+0xf400ca08>
    d0b0:	a9000007 	ldb	r4,0(r21)
    d0b4:	aa800044 	addi	r10,r21,1
    d0b8:	22420626 	beq	r4,r9,d8d4 <___svfiprintf_internal_r+0xffc>
    d0bc:	20bff404 	addi	r2,r4,-48
    d0c0:	502b883a 	mov	r21,r10
    d0c4:	0021883a 	mov	r16,zero
    d0c8:	28be5036 	bltu	r5,r2,ca0c <__alt_mem_Flash_flash_data+0xf400ca0c>
    d0cc:	a9000007 	ldb	r4,0(r21)
    d0d0:	840002a4 	muli	r16,r16,10
    d0d4:	ad400044 	addi	r21,r21,1
    d0d8:	1421883a 	add	r16,r2,r16
    d0dc:	20bff404 	addi	r2,r4,-48
    d0e0:	28bffa2e 	bgeu	r5,r2,d0cc <__alt_mem_Flash_flash_data+0xf400d0cc>
    d0e4:	803e490e 	bge	r16,zero,ca0c <__alt_mem_Flash_flash_data+0xf400ca0c>
    d0e8:	043fffc4 	movi	r16,-1
    d0ec:	003e4706 	br	ca0c <__alt_mem_Flash_flash_data+0xf400ca0c>
    d0f0:	d8c01c17 	ldw	r3,112(sp)
    d0f4:	d8801b17 	ldw	r2,108(sp)
    d0f8:	d9001d87 	ldb	r4,118(sp)
    d0fc:	20000b26 	beq	r4,zero,d12c <___svfiprintf_internal_r+0x854>
    d100:	d9001d84 	addi	r4,sp,118
    d104:	18c00044 	addi	r3,r3,1
    d108:	10800044 	addi	r2,r2,1
    d10c:	41000015 	stw	r4,0(r8)
    d110:	01000044 	movi	r4,1
    d114:	41000115 	stw	r4,4(r8)
    d118:	d8c01c15 	stw	r3,112(sp)
    d11c:	d8801b15 	stw	r2,108(sp)
    d120:	010001c4 	movi	r4,7
    d124:	20811e16 	blt	r4,r2,d5a0 <___svfiprintf_internal_r+0xcc8>
    d128:	42000204 	addi	r8,r8,8
    d12c:	da802217 	ldw	r10,136(sp)
    d130:	50000b26 	beq	r10,zero,d160 <___svfiprintf_internal_r+0x888>
    d134:	d9001d04 	addi	r4,sp,116
    d138:	18c00084 	addi	r3,r3,2
    d13c:	10800044 	addi	r2,r2,1
    d140:	41000015 	stw	r4,0(r8)
    d144:	01000084 	movi	r4,2
    d148:	41000115 	stw	r4,4(r8)
    d14c:	d8c01c15 	stw	r3,112(sp)
    d150:	d8801b15 	stw	r2,108(sp)
    d154:	010001c4 	movi	r4,7
    d158:	20811a16 	blt	r4,r2,d5c4 <___svfiprintf_internal_r+0xcec>
    d15c:	42000204 	addi	r8,r8,8
    d160:	dac02517 	ldw	r11,148(sp)
    d164:	01002004 	movi	r4,128
    d168:	5900a826 	beq	r11,r4,d40c <___svfiprintf_internal_r+0xb34>
    d16c:	8721c83a 	sub	r16,r16,fp
    d170:	0400260e 	bge	zero,r16,d20c <___svfiprintf_internal_r+0x934>
    d174:	01c00404 	movi	r7,16
    d178:	3c019d0e 	bge	r7,r16,d7f0 <___svfiprintf_internal_r+0xf18>
    d17c:	010000b4 	movhi	r4,2
    d180:	2100f204 	addi	r4,r4,968
    d184:	d9002215 	stw	r4,136(sp)
    d188:	382f883a 	mov	r23,r7
    d18c:	058001c4 	movi	r22,7
    d190:	00000306 	br	d1a0 <___svfiprintf_internal_r+0x8c8>
    d194:	843ffc04 	addi	r16,r16,-16
    d198:	42000204 	addi	r8,r8,8
    d19c:	bc00110e 	bge	r23,r16,d1e4 <___svfiprintf_internal_r+0x90c>
    d1a0:	18c00404 	addi	r3,r3,16
    d1a4:	10800044 	addi	r2,r2,1
    d1a8:	44c00015 	stw	r19,0(r8)
    d1ac:	45c00115 	stw	r23,4(r8)
    d1b0:	d8c01c15 	stw	r3,112(sp)
    d1b4:	d8801b15 	stw	r2,108(sp)
    d1b8:	b0bff60e 	bge	r22,r2,d194 <__alt_mem_Flash_flash_data+0xf400d194>
    d1bc:	9009883a 	mov	r4,r18
    d1c0:	a00b883a 	mov	r5,r20
    d1c4:	d9801a04 	addi	r6,sp,104
    d1c8:	000c70c0 	call	c70c <__ssprint_r>
    d1cc:	10007e1e 	bne	r2,zero,d3c8 <___svfiprintf_internal_r+0xaf0>
    d1d0:	843ffc04 	addi	r16,r16,-16
    d1d4:	d8c01c17 	ldw	r3,112(sp)
    d1d8:	d8801b17 	ldw	r2,108(sp)
    d1dc:	d811883a 	mov	r8,sp
    d1e0:	bc3fef16 	blt	r23,r16,d1a0 <__alt_mem_Flash_flash_data+0xf400d1a0>
    d1e4:	da802217 	ldw	r10,136(sp)
    d1e8:	1c07883a 	add	r3,r3,r16
    d1ec:	10800044 	addi	r2,r2,1
    d1f0:	42800015 	stw	r10,0(r8)
    d1f4:	44000115 	stw	r16,4(r8)
    d1f8:	d8c01c15 	stw	r3,112(sp)
    d1fc:	d8801b15 	stw	r2,108(sp)
    d200:	010001c4 	movi	r4,7
    d204:	2080ce16 	blt	r4,r2,d540 <___svfiprintf_internal_r+0xc68>
    d208:	42000204 	addi	r8,r8,8
    d20c:	dac02617 	ldw	r11,152(sp)
    d210:	1f07883a 	add	r3,r3,fp
    d214:	10800044 	addi	r2,r2,1
    d218:	42c00015 	stw	r11,0(r8)
    d21c:	47000115 	stw	fp,4(r8)
    d220:	d8c01c15 	stw	r3,112(sp)
    d224:	d8801b15 	stw	r2,108(sp)
    d228:	010001c4 	movi	r4,7
    d22c:	2080a316 	blt	r4,r2,d4bc <___svfiprintf_internal_r+0xbe4>
    d230:	42000204 	addi	r8,r8,8
    d234:	8c40010c 	andi	r17,r17,4
    d238:	88002b26 	beq	r17,zero,d2e8 <___svfiprintf_internal_r+0xa10>
    d23c:	da802117 	ldw	r10,132(sp)
    d240:	dac02017 	ldw	r11,128(sp)
    d244:	52e1c83a 	sub	r16,r10,r11
    d248:	0400270e 	bge	zero,r16,d2e8 <___svfiprintf_internal_r+0xa10>
    d24c:	04400404 	movi	r17,16
    d250:	d8801b17 	ldw	r2,108(sp)
    d254:	8c01900e 	bge	r17,r16,d898 <___svfiprintf_internal_r+0xfc0>
    d258:	014000b4 	movhi	r5,2
    d25c:	2940f604 	addi	r5,r5,984
    d260:	d9402815 	stw	r5,160(sp)
    d264:	070001c4 	movi	fp,7
    d268:	00000306 	br	d278 <___svfiprintf_internal_r+0x9a0>
    d26c:	843ffc04 	addi	r16,r16,-16
    d270:	42000204 	addi	r8,r8,8
    d274:	8c00130e 	bge	r17,r16,d2c4 <___svfiprintf_internal_r+0x9ec>
    d278:	028000b4 	movhi	r10,2
    d27c:	18c00404 	addi	r3,r3,16
    d280:	10800044 	addi	r2,r2,1
    d284:	5280f604 	addi	r10,r10,984
    d288:	42800015 	stw	r10,0(r8)
    d28c:	44400115 	stw	r17,4(r8)
    d290:	d8c01c15 	stw	r3,112(sp)
    d294:	d8801b15 	stw	r2,108(sp)
    d298:	e0bff40e 	bge	fp,r2,d26c <__alt_mem_Flash_flash_data+0xf400d26c>
    d29c:	9009883a 	mov	r4,r18
    d2a0:	a00b883a 	mov	r5,r20
    d2a4:	d9801a04 	addi	r6,sp,104
    d2a8:	000c70c0 	call	c70c <__ssprint_r>
    d2ac:	1000461e 	bne	r2,zero,d3c8 <___svfiprintf_internal_r+0xaf0>
    d2b0:	843ffc04 	addi	r16,r16,-16
    d2b4:	d8c01c17 	ldw	r3,112(sp)
    d2b8:	d8801b17 	ldw	r2,108(sp)
    d2bc:	d811883a 	mov	r8,sp
    d2c0:	8c3fed16 	blt	r17,r16,d278 <__alt_mem_Flash_flash_data+0xf400d278>
    d2c4:	dac02817 	ldw	r11,160(sp)
    d2c8:	1c07883a 	add	r3,r3,r16
    d2cc:	10800044 	addi	r2,r2,1
    d2d0:	42c00015 	stw	r11,0(r8)
    d2d4:	44000115 	stw	r16,4(r8)
    d2d8:	d8c01c15 	stw	r3,112(sp)
    d2dc:	d8801b15 	stw	r2,108(sp)
    d2e0:	010001c4 	movi	r4,7
    d2e4:	2080fd16 	blt	r4,r2,d6dc <___svfiprintf_internal_r+0xe04>
    d2e8:	dd802017 	ldw	r22,128(sp)
    d2ec:	da802117 	ldw	r10,132(sp)
    d2f0:	b280010e 	bge	r22,r10,d2f8 <___svfiprintf_internal_r+0xa20>
    d2f4:	502d883a 	mov	r22,r10
    d2f8:	dac02417 	ldw	r11,144(sp)
    d2fc:	5d97883a 	add	r11,r11,r22
    d300:	dac02415 	stw	r11,144(sp)
    d304:	1800751e 	bne	r3,zero,d4dc <___svfiprintf_internal_r+0xc04>
    d308:	a8800007 	ldb	r2,0(r21)
    d30c:	d8001b15 	stw	zero,108(sp)
    d310:	d811883a 	mov	r8,sp
    d314:	103d961e 	bne	r2,zero,c970 <__alt_mem_Flash_flash_data+0xf400c970>
    d318:	a82d883a 	mov	r22,r21
    d31c:	003dad06 	br	c9d4 <__alt_mem_Flash_flash_data+0xf400c9d4>
    d320:	10803fcc 	andi	r2,r2,255
    d324:	00c00044 	movi	r3,1
    d328:	10fe2f1e 	bne	r2,r3,cbe8 <__alt_mem_Flash_flash_data+0xf400cbe8>
    d32c:	5000e026 	beq	r10,zero,d6b0 <___svfiprintf_internal_r+0xdd8>
    d330:	dc002015 	stw	r16,128(sp)
    d334:	dc402215 	stw	r17,136(sp)
    d338:	dd801a04 	addi	r22,sp,104
    d33c:	402f883a 	mov	r23,r8
    d340:	5839883a 	mov	fp,r11
    d344:	4821883a 	mov	r16,r9
    d348:	5023883a 	mov	r17,r10
    d34c:	8009883a 	mov	r4,r16
    d350:	880b883a 	mov	r5,r17
    d354:	01800284 	movi	r6,10
    d358:	000f883a 	mov	r7,zero
    d35c:	000fc8c0 	call	fc8c <__umoddi3>
    d360:	10800c04 	addi	r2,r2,48
    d364:	b5bfffc4 	addi	r22,r22,-1
    d368:	8009883a 	mov	r4,r16
    d36c:	880b883a 	mov	r5,r17
    d370:	01800284 	movi	r6,10
    d374:	000f883a 	mov	r7,zero
    d378:	b0800005 	stb	r2,0(r22)
    d37c:	000f6cc0 	call	f6cc <__udivdi3>
    d380:	1021883a 	mov	r16,r2
    d384:	10c4b03a 	or	r2,r2,r3
    d388:	1823883a 	mov	r17,r3
    d38c:	103fef1e 	bne	r2,zero,d34c <__alt_mem_Flash_flash_data+0xf400d34c>
    d390:	da801e17 	ldw	r10,120(sp)
    d394:	e017883a 	mov	r11,fp
    d398:	dc002017 	ldw	r16,128(sp)
    d39c:	dc402217 	ldw	r17,136(sp)
    d3a0:	b811883a 	mov	r8,r23
    d3a4:	dd802615 	stw	r22,152(sp)
    d3a8:	55b9c83a 	sub	fp,r10,r22
    d3ac:	003e2006 	br	cc30 <__alt_mem_Flash_flash_data+0xf400cc30>
    d3b0:	d8801c17 	ldw	r2,112(sp)
    d3b4:	10000426 	beq	r2,zero,d3c8 <___svfiprintf_internal_r+0xaf0>
    d3b8:	d9002917 	ldw	r4,164(sp)
    d3bc:	d9402717 	ldw	r5,156(sp)
    d3c0:	d9801a04 	addi	r6,sp,104
    d3c4:	000c70c0 	call	c70c <__ssprint_r>
    d3c8:	da802717 	ldw	r10,156(sp)
    d3cc:	5080030b 	ldhu	r2,12(r10)
    d3d0:	1080100c 	andi	r2,r2,64
    d3d4:	1000511e 	bne	r2,zero,d51c <___svfiprintf_internal_r+0xc44>
    d3d8:	d8802417 	ldw	r2,144(sp)
    d3dc:	dfc03617 	ldw	ra,216(sp)
    d3e0:	df003517 	ldw	fp,212(sp)
    d3e4:	ddc03417 	ldw	r23,208(sp)
    d3e8:	dd803317 	ldw	r22,204(sp)
    d3ec:	dd403217 	ldw	r21,200(sp)
    d3f0:	dd003117 	ldw	r20,196(sp)
    d3f4:	dcc03017 	ldw	r19,192(sp)
    d3f8:	dc802f17 	ldw	r18,188(sp)
    d3fc:	dc402e17 	ldw	r17,184(sp)
    d400:	dc002d17 	ldw	r16,180(sp)
    d404:	dec03704 	addi	sp,sp,220
    d408:	f800283a 	ret
    d40c:	da802117 	ldw	r10,132(sp)
    d410:	dac02017 	ldw	r11,128(sp)
    d414:	52edc83a 	sub	r22,r10,r11
    d418:	05bf540e 	bge	zero,r22,d16c <__alt_mem_Flash_flash_data+0xf400d16c>
    d41c:	02400404 	movi	r9,16
    d420:	4d81210e 	bge	r9,r22,d8a8 <___svfiprintf_internal_r+0xfd0>
    d424:	014000b4 	movhi	r5,2
    d428:	2940f204 	addi	r5,r5,968
    d42c:	d9402215 	stw	r5,136(sp)
    d430:	05c001c4 	movi	r23,7
    d434:	00000306 	br	d444 <___svfiprintf_internal_r+0xb6c>
    d438:	b5bffc04 	addi	r22,r22,-16
    d43c:	42000204 	addi	r8,r8,8
    d440:	4d80130e 	bge	r9,r22,d490 <___svfiprintf_internal_r+0xbb8>
    d444:	18c00404 	addi	r3,r3,16
    d448:	10800044 	addi	r2,r2,1
    d44c:	44c00015 	stw	r19,0(r8)
    d450:	42400115 	stw	r9,4(r8)
    d454:	d8c01c15 	stw	r3,112(sp)
    d458:	d8801b15 	stw	r2,108(sp)
    d45c:	b8bff60e 	bge	r23,r2,d438 <__alt_mem_Flash_flash_data+0xf400d438>
    d460:	9009883a 	mov	r4,r18
    d464:	a00b883a 	mov	r5,r20
    d468:	d9801a04 	addi	r6,sp,104
    d46c:	da402c15 	stw	r9,176(sp)
    d470:	000c70c0 	call	c70c <__ssprint_r>
    d474:	da402c17 	ldw	r9,176(sp)
    d478:	103fd31e 	bne	r2,zero,d3c8 <__alt_mem_Flash_flash_data+0xf400d3c8>
    d47c:	b5bffc04 	addi	r22,r22,-16
    d480:	d8c01c17 	ldw	r3,112(sp)
    d484:	d8801b17 	ldw	r2,108(sp)
    d488:	d811883a 	mov	r8,sp
    d48c:	4dbfed16 	blt	r9,r22,d444 <__alt_mem_Flash_flash_data+0xf400d444>
    d490:	da802217 	ldw	r10,136(sp)
    d494:	1d87883a 	add	r3,r3,r22
    d498:	10800044 	addi	r2,r2,1
    d49c:	42800015 	stw	r10,0(r8)
    d4a0:	45800115 	stw	r22,4(r8)
    d4a4:	d8c01c15 	stw	r3,112(sp)
    d4a8:	d8801b15 	stw	r2,108(sp)
    d4ac:	010001c4 	movi	r4,7
    d4b0:	2080c616 	blt	r4,r2,d7cc <___svfiprintf_internal_r+0xef4>
    d4b4:	42000204 	addi	r8,r8,8
    d4b8:	003f2c06 	br	d16c <__alt_mem_Flash_flash_data+0xf400d16c>
    d4bc:	9009883a 	mov	r4,r18
    d4c0:	a00b883a 	mov	r5,r20
    d4c4:	d9801a04 	addi	r6,sp,104
    d4c8:	000c70c0 	call	c70c <__ssprint_r>
    d4cc:	103fbe1e 	bne	r2,zero,d3c8 <__alt_mem_Flash_flash_data+0xf400d3c8>
    d4d0:	d8c01c17 	ldw	r3,112(sp)
    d4d4:	d811883a 	mov	r8,sp
    d4d8:	003f5606 	br	d234 <__alt_mem_Flash_flash_data+0xf400d234>
    d4dc:	9009883a 	mov	r4,r18
    d4e0:	a00b883a 	mov	r5,r20
    d4e4:	d9801a04 	addi	r6,sp,104
    d4e8:	000c70c0 	call	c70c <__ssprint_r>
    d4ec:	103f8626 	beq	r2,zero,d308 <__alt_mem_Flash_flash_data+0xf400d308>
    d4f0:	003fb506 	br	d3c8 <__alt_mem_Flash_flash_data+0xf400d3c8>
    d4f4:	10803fcc 	andi	r2,r2,255
    d4f8:	10003b1e 	bne	r2,zero,d5e8 <___svfiprintf_internal_r+0xd10>
    d4fc:	8880004c 	andi	r2,r17,1
    d500:	10007d26 	beq	r2,zero,d6f8 <___svfiprintf_internal_r+0xe20>
    d504:	00800c04 	movi	r2,48
    d508:	d8c019c4 	addi	r3,sp,103
    d50c:	d88019c5 	stb	r2,103(sp)
    d510:	df002b17 	ldw	fp,172(sp)
    d514:	d8c02615 	stw	r3,152(sp)
    d518:	003dc506 	br	cc30 <__alt_mem_Flash_flash_data+0xf400cc30>
    d51c:	00bfffc4 	movi	r2,-1
    d520:	003fae06 	br	d3dc <__alt_mem_Flash_flash_data+0xf400d3dc>
    d524:	9009883a 	mov	r4,r18
    d528:	a00b883a 	mov	r5,r20
    d52c:	d9801a04 	addi	r6,sp,104
    d530:	000c70c0 	call	c70c <__ssprint_r>
    d534:	103fa41e 	bne	r2,zero,d3c8 <__alt_mem_Flash_flash_data+0xf400d3c8>
    d538:	d811883a 	mov	r8,sp
    d53c:	003d2206 	br	c9c8 <__alt_mem_Flash_flash_data+0xf400c9c8>
    d540:	9009883a 	mov	r4,r18
    d544:	a00b883a 	mov	r5,r20
    d548:	d9801a04 	addi	r6,sp,104
    d54c:	000c70c0 	call	c70c <__ssprint_r>
    d550:	103f9d1e 	bne	r2,zero,d3c8 <__alt_mem_Flash_flash_data+0xf400d3c8>
    d554:	d8c01c17 	ldw	r3,112(sp)
    d558:	d8801b17 	ldw	r2,108(sp)
    d55c:	d811883a 	mov	r8,sp
    d560:	003f2a06 	br	d20c <__alt_mem_Flash_flash_data+0xf400d20c>
    d564:	d9402a17 	ldw	r5,168(sp)
    d568:	d8c01a04 	addi	r3,sp,104
    d56c:	488003cc 	andi	r2,r9,15
    d570:	5008973a 	slli	r4,r10,28
    d574:	2885883a 	add	r2,r5,r2
    d578:	4812d13a 	srli	r9,r9,4
    d57c:	10800003 	ldbu	r2,0(r2)
    d580:	5014d13a 	srli	r10,r10,4
    d584:	18ffffc4 	addi	r3,r3,-1
    d588:	2252b03a 	or	r9,r4,r9
    d58c:	18800005 	stb	r2,0(r3)
    d590:	4a84b03a 	or	r2,r9,r10
    d594:	103ff51e 	bne	r2,zero,d56c <__alt_mem_Flash_flash_data+0xf400d56c>
    d598:	d8c02615 	stw	r3,152(sp)
    d59c:	003da206 	br	cc28 <__alt_mem_Flash_flash_data+0xf400cc28>
    d5a0:	9009883a 	mov	r4,r18
    d5a4:	a00b883a 	mov	r5,r20
    d5a8:	d9801a04 	addi	r6,sp,104
    d5ac:	000c70c0 	call	c70c <__ssprint_r>
    d5b0:	103f851e 	bne	r2,zero,d3c8 <__alt_mem_Flash_flash_data+0xf400d3c8>
    d5b4:	d8c01c17 	ldw	r3,112(sp)
    d5b8:	d8801b17 	ldw	r2,108(sp)
    d5bc:	d811883a 	mov	r8,sp
    d5c0:	003eda06 	br	d12c <__alt_mem_Flash_flash_data+0xf400d12c>
    d5c4:	9009883a 	mov	r4,r18
    d5c8:	a00b883a 	mov	r5,r20
    d5cc:	d9801a04 	addi	r6,sp,104
    d5d0:	000c70c0 	call	c70c <__ssprint_r>
    d5d4:	103f7c1e 	bne	r2,zero,d3c8 <__alt_mem_Flash_flash_data+0xf400d3c8>
    d5d8:	d8c01c17 	ldw	r3,112(sp)
    d5dc:	d8801b17 	ldw	r2,108(sp)
    d5e0:	d811883a 	mov	r8,sp
    d5e4:	003ede06 	br	d160 <__alt_mem_Flash_flash_data+0xf400d160>
    d5e8:	da801a04 	addi	r10,sp,104
    d5ec:	da802615 	stw	r10,152(sp)
    d5f0:	003d8f06 	br	cc30 <__alt_mem_Flash_flash_data+0xf400cc30>
    d5f4:	8880040c 	andi	r2,r17,16
    d5f8:	10004c1e 	bne	r2,zero,d72c <___svfiprintf_internal_r+0xe54>
    d5fc:	8880100c 	andi	r2,r17,64
    d600:	da802317 	ldw	r10,140(sp)
    d604:	10004a26 	beq	r2,zero,d730 <___svfiprintf_internal_r+0xe58>
    d608:	5240000b 	ldhu	r9,0(r10)
    d60c:	dac02317 	ldw	r11,140(sp)
    d610:	0015883a 	mov	r10,zero
    d614:	00800044 	movi	r2,1
    d618:	5ac00104 	addi	r11,r11,4
    d61c:	dac02315 	stw	r11,140(sp)
    d620:	4807883a 	mov	r3,r9
    d624:	003d6506 	br	cbbc <__alt_mem_Flash_flash_data+0xf400cbbc>
    d628:	9009883a 	mov	r4,r18
    d62c:	a00b883a 	mov	r5,r20
    d630:	d9801a04 	addi	r6,sp,104
    d634:	000c70c0 	call	c70c <__ssprint_r>
    d638:	103f631e 	bne	r2,zero,d3c8 <__alt_mem_Flash_flash_data+0xf400d3c8>
    d63c:	d8c01c17 	ldw	r3,112(sp)
    d640:	d8801b17 	ldw	r2,108(sp)
    d644:	d811883a 	mov	r8,sp
    d648:	003eab06 	br	d0f8 <__alt_mem_Flash_flash_data+0xf400d0f8>
    d64c:	8880040c 	andi	r2,r17,16
    d650:	1000331e 	bne	r2,zero,d720 <___svfiprintf_internal_r+0xe48>
    d654:	8880100c 	andi	r2,r17,64
    d658:	da802317 	ldw	r10,140(sp)
    d65c:	10003126 	beq	r2,zero,d724 <___svfiprintf_internal_r+0xe4c>
    d660:	5240000b 	ldhu	r9,0(r10)
    d664:	dac02317 	ldw	r11,140(sp)
    d668:	0015883a 	mov	r10,zero
    d66c:	0005883a 	mov	r2,zero
    d670:	5ac00104 	addi	r11,r11,4
    d674:	dac02315 	stw	r11,140(sp)
    d678:	4807883a 	mov	r3,r9
    d67c:	003d4f06 	br	cbbc <__alt_mem_Flash_flash_data+0xf400cbbc>
    d680:	10803fcc 	andi	r2,r2,255
    d684:	1080201c 	xori	r2,r2,128
    d688:	10bfe004 	addi	r2,r2,-128
    d68c:	01000c04 	movi	r4,48
    d690:	11005b26 	beq	r2,r4,d800 <___svfiprintf_internal_r+0xf28>
    d694:	da802617 	ldw	r10,152(sp)
    d698:	d8801e17 	ldw	r2,120(sp)
    d69c:	193fffc5 	stb	r4,-1(r3)
    d6a0:	52bfffc4 	addi	r10,r10,-1
    d6a4:	da802615 	stw	r10,152(sp)
    d6a8:	12b9c83a 	sub	fp,r2,r10
    d6ac:	003d6006 	br	cc30 <__alt_mem_Flash_flash_data+0xf400cc30>
    d6b0:	00800244 	movi	r2,9
    d6b4:	127f1e36 	bltu	r2,r9,d330 <__alt_mem_Flash_flash_data+0xf400d330>
    d6b8:	4a400c04 	addi	r9,r9,48
    d6bc:	d8c019c4 	addi	r3,sp,103
    d6c0:	da4019c5 	stb	r9,103(sp)
    d6c4:	df002b17 	ldw	fp,172(sp)
    d6c8:	d8c02615 	stw	r3,152(sp)
    d6cc:	003d5806 	br	cc30 <__alt_mem_Flash_flash_data+0xf400cc30>
    d6d0:	d8802315 	stw	r2,140(sp)
    d6d4:	a9000007 	ldb	r4,0(r21)
    d6d8:	003ccb06 	br	ca08 <__alt_mem_Flash_flash_data+0xf400ca08>
    d6dc:	9009883a 	mov	r4,r18
    d6e0:	a00b883a 	mov	r5,r20
    d6e4:	d9801a04 	addi	r6,sp,104
    d6e8:	000c70c0 	call	c70c <__ssprint_r>
    d6ec:	103f361e 	bne	r2,zero,d3c8 <__alt_mem_Flash_flash_data+0xf400d3c8>
    d6f0:	d8c01c17 	ldw	r3,112(sp)
    d6f4:	003efc06 	br	d2e8 <__alt_mem_Flash_flash_data+0xf400d2e8>
    d6f8:	d8c01a04 	addi	r3,sp,104
    d6fc:	d8c02615 	stw	r3,152(sp)
    d700:	003d4b06 	br	cc30 <__alt_mem_Flash_flash_data+0xf400cc30>
    d704:	da802317 	ldw	r10,140(sp)
    d708:	1a400017 	ldw	r9,0(r3)
    d70c:	52800104 	addi	r10,r10,4
    d710:	da802315 	stw	r10,140(sp)
    d714:	4815d7fa 	srai	r10,r9,31
    d718:	5005883a 	mov	r2,r10
    d71c:	003d9c06 	br	cd90 <__alt_mem_Flash_flash_data+0xf400cd90>
    d720:	da802317 	ldw	r10,140(sp)
    d724:	52400017 	ldw	r9,0(r10)
    d728:	003fce06 	br	d664 <__alt_mem_Flash_flash_data+0xf400d664>
    d72c:	da802317 	ldw	r10,140(sp)
    d730:	52400017 	ldw	r9,0(r10)
    d734:	003fb506 	br	d60c <__alt_mem_Flash_flash_data+0xf400d60c>
    d738:	8880100c 	andi	r2,r17,64
    d73c:	da802317 	ldw	r10,140(sp)
    d740:	103e1926 	beq	r2,zero,cfa8 <__alt_mem_Flash_flash_data+0xf400cfa8>
    d744:	dac02317 	ldw	r11,140(sp)
    d748:	5240000b 	ldhu	r9,0(r10)
    d74c:	0015883a 	mov	r10,zero
    d750:	5ac00104 	addi	r11,r11,4
    d754:	dac02315 	stw	r11,140(sp)
    d758:	003de406 	br	ceec <__alt_mem_Flash_flash_data+0xf400ceec>
    d75c:	a9000007 	ldb	r4,0(r21)
    d760:	003ca906 	br	ca08 <__alt_mem_Flash_flash_data+0xf400ca08>
    d764:	dac02317 	ldw	r11,140(sp)
    d768:	da802417 	ldw	r10,144(sp)
    d76c:	58800017 	ldw	r2,0(r11)
    d770:	5007d7fa 	srai	r3,r10,31
    d774:	5ac00104 	addi	r11,r11,4
    d778:	dac02315 	stw	r11,140(sp)
    d77c:	12800015 	stw	r10,0(r2)
    d780:	10c00115 	stw	r3,4(r2)
    d784:	003c7806 	br	c968 <__alt_mem_Flash_flash_data+0xf400c968>
    d788:	00800c04 	movi	r2,48
    d78c:	d8801d05 	stb	r2,116(sp)
    d790:	d9001d45 	stb	r4,117(sp)
    d794:	8c400094 	ori	r17,r17,2
    d798:	00800084 	movi	r2,2
    d79c:	003d0706 	br	cbbc <__alt_mem_Flash_flash_data+0xf400cbbc>
    d7a0:	ad400044 	addi	r21,r21,1
    d7a4:	8c400814 	ori	r17,r17,32
    d7a8:	11000047 	ldb	r4,1(r2)
    d7ac:	003c9606 	br	ca08 <__alt_mem_Flash_flash_data+0xf400ca08>
    d7b0:	dac02317 	ldw	r11,140(sp)
    d7b4:	da802417 	ldw	r10,144(sp)
    d7b8:	58800017 	ldw	r2,0(r11)
    d7bc:	5ac00104 	addi	r11,r11,4
    d7c0:	dac02315 	stw	r11,140(sp)
    d7c4:	12800015 	stw	r10,0(r2)
    d7c8:	003c6706 	br	c968 <__alt_mem_Flash_flash_data+0xf400c968>
    d7cc:	9009883a 	mov	r4,r18
    d7d0:	a00b883a 	mov	r5,r20
    d7d4:	d9801a04 	addi	r6,sp,104
    d7d8:	000c70c0 	call	c70c <__ssprint_r>
    d7dc:	103efa1e 	bne	r2,zero,d3c8 <__alt_mem_Flash_flash_data+0xf400d3c8>
    d7e0:	d8c01c17 	ldw	r3,112(sp)
    d7e4:	d8801b17 	ldw	r2,108(sp)
    d7e8:	d811883a 	mov	r8,sp
    d7ec:	003e5f06 	br	d16c <__alt_mem_Flash_flash_data+0xf400d16c>
    d7f0:	02c000b4 	movhi	r11,2
    d7f4:	5ac0f204 	addi	r11,r11,968
    d7f8:	dac02215 	stw	r11,136(sp)
    d7fc:	003e7906 	br	d1e4 <__alt_mem_Flash_flash_data+0xf400d1e4>
    d800:	da801e17 	ldw	r10,120(sp)
    d804:	d8c02617 	ldw	r3,152(sp)
    d808:	50f9c83a 	sub	fp,r10,r3
    d80c:	003d0806 	br	cc30 <__alt_mem_Flash_flash_data+0xf400cc30>
    d810:	da002c15 	stw	r8,176(sp)
    d814:	00035180 	call	3518 <strlen>
    d818:	1039883a 	mov	fp,r2
    d81c:	dac01d83 	ldbu	r11,118(sp)
    d820:	ddc02315 	stw	r23,140(sp)
    d824:	0021883a 	mov	r16,zero
    d828:	da002c17 	ldw	r8,176(sp)
    d82c:	003d0006 	br	cc30 <__alt_mem_Flash_flash_data+0xf400cc30>
    d830:	00800184 	movi	r2,6
    d834:	1400012e 	bgeu	r2,r16,d83c <___svfiprintf_internal_r+0xf64>
    d838:	1021883a 	mov	r16,r2
    d83c:	8039883a 	mov	fp,r16
    d840:	802d883a 	mov	r22,r16
    d844:	80002116 	blt	r16,zero,d8cc <___svfiprintf_internal_r+0xff4>
    d848:	008000b4 	movhi	r2,2
    d84c:	10808e04 	addi	r2,r2,568
    d850:	dd802015 	stw	r22,128(sp)
    d854:	ddc02315 	stw	r23,140(sp)
    d858:	d8802615 	stw	r2,152(sp)
    d85c:	003d5d06 	br	cdd4 <__alt_mem_Flash_flash_data+0xf400cdd4>
    d860:	04001004 	movi	r16,64
    d864:	800b883a 	mov	r5,r16
    d868:	000a3140 	call	a314 <_malloc_r>
    d86c:	da802717 	ldw	r10,156(sp)
    d870:	50800015 	stw	r2,0(r10)
    d874:	50800415 	stw	r2,16(r10)
    d878:	10002026 	beq	r2,zero,d8fc <___svfiprintf_internal_r+0x1024>
    d87c:	da802717 	ldw	r10,156(sp)
    d880:	54000515 	stw	r16,20(r10)
    d884:	003c2806 	br	c928 <__alt_mem_Flash_flash_data+0xf400c928>
    d888:	010000b4 	movhi	r4,2
    d88c:	2100f604 	addi	r4,r4,984
    d890:	d9002815 	stw	r4,160(sp)
    d894:	003d7e06 	br	ce90 <__alt_mem_Flash_flash_data+0xf400ce90>
    d898:	010000b4 	movhi	r4,2
    d89c:	2100f604 	addi	r4,r4,984
    d8a0:	d9002815 	stw	r4,160(sp)
    d8a4:	003e8706 	br	d2c4 <__alt_mem_Flash_flash_data+0xf400d2c4>
    d8a8:	010000b4 	movhi	r4,2
    d8ac:	2100f204 	addi	r4,r4,968
    d8b0:	d9002215 	stw	r4,136(sp)
    d8b4:	003ef606 	br	d490 <__alt_mem_Flash_flash_data+0xf400d490>
    d8b8:	8039883a 	mov	fp,r16
    d8bc:	dac01d83 	ldbu	r11,118(sp)
    d8c0:	ddc02315 	stw	r23,140(sp)
    d8c4:	0021883a 	mov	r16,zero
    d8c8:	003cd906 	br	cc30 <__alt_mem_Flash_flash_data+0xf400cc30>
    d8cc:	002d883a 	mov	r22,zero
    d8d0:	003fdd06 	br	d848 <__alt_mem_Flash_flash_data+0xf400d848>
    d8d4:	dac02317 	ldw	r11,140(sp)
    d8d8:	a805883a 	mov	r2,r21
    d8dc:	502b883a 	mov	r21,r10
    d8e0:	5c000017 	ldw	r16,0(r11)
    d8e4:	59000104 	addi	r4,r11,4
    d8e8:	d9002315 	stw	r4,140(sp)
    d8ec:	803fae0e 	bge	r16,zero,d7a8 <__alt_mem_Flash_flash_data+0xf400d7a8>
    d8f0:	043fffc4 	movi	r16,-1
    d8f4:	11000047 	ldb	r4,1(r2)
    d8f8:	003c4306 	br	ca08 <__alt_mem_Flash_flash_data+0xf400ca08>
    d8fc:	dac02917 	ldw	r11,164(sp)
    d900:	00800304 	movi	r2,12
    d904:	58800015 	stw	r2,0(r11)
    d908:	00bfffc4 	movi	r2,-1
    d90c:	003eb306 	br	d3dc <__alt_mem_Flash_flash_data+0xf400d3dc>

0000d910 <__sprint_r.part.0>:
    d910:	28801917 	ldw	r2,100(r5)
    d914:	defff604 	addi	sp,sp,-40
    d918:	dd400515 	stw	r21,20(sp)
    d91c:	dcc00315 	stw	r19,12(sp)
    d920:	dfc00915 	stw	ra,36(sp)
    d924:	df000815 	stw	fp,32(sp)
    d928:	ddc00715 	stw	r23,28(sp)
    d92c:	dd800615 	stw	r22,24(sp)
    d930:	dd000415 	stw	r20,16(sp)
    d934:	dc800215 	stw	r18,8(sp)
    d938:	dc400115 	stw	r17,4(sp)
    d93c:	dc000015 	stw	r16,0(sp)
    d940:	1088000c 	andi	r2,r2,8192
    d944:	2827883a 	mov	r19,r5
    d948:	302b883a 	mov	r21,r6
    d94c:	10002d26 	beq	r2,zero,da04 <__sprint_r.part.0+0xf4>
    d950:	30800217 	ldw	r2,8(r6)
    d954:	35800017 	ldw	r22,0(r6)
    d958:	10002826 	beq	r2,zero,d9fc <__sprint_r.part.0+0xec>
    d95c:	2029883a 	mov	r20,r4
    d960:	b5c00104 	addi	r23,r22,4
    d964:	04bfffc4 	movi	r18,-1
    d968:	bc400017 	ldw	r17,0(r23)
    d96c:	b4000017 	ldw	r16,0(r22)
    d970:	0039883a 	mov	fp,zero
    d974:	8822d0ba 	srli	r17,r17,2
    d978:	04400316 	blt	zero,r17,d988 <__sprint_r.part.0+0x78>
    d97c:	00001806 	br	d9e0 <__sprint_r.part.0+0xd0>
    d980:	84000104 	addi	r16,r16,4
    d984:	8f001526 	beq	r17,fp,d9dc <__sprint_r.part.0+0xcc>
    d988:	81400017 	ldw	r5,0(r16)
    d98c:	a009883a 	mov	r4,r20
    d990:	980d883a 	mov	r6,r19
    d994:	000f04c0 	call	f04c <_fputwc_r>
    d998:	e7000044 	addi	fp,fp,1
    d99c:	14bff81e 	bne	r2,r18,d980 <__alt_mem_Flash_flash_data+0xf400d980>
    d9a0:	9005883a 	mov	r2,r18
    d9a4:	a8000215 	stw	zero,8(r21)
    d9a8:	a8000115 	stw	zero,4(r21)
    d9ac:	dfc00917 	ldw	ra,36(sp)
    d9b0:	df000817 	ldw	fp,32(sp)
    d9b4:	ddc00717 	ldw	r23,28(sp)
    d9b8:	dd800617 	ldw	r22,24(sp)
    d9bc:	dd400517 	ldw	r21,20(sp)
    d9c0:	dd000417 	ldw	r20,16(sp)
    d9c4:	dcc00317 	ldw	r19,12(sp)
    d9c8:	dc800217 	ldw	r18,8(sp)
    d9cc:	dc400117 	ldw	r17,4(sp)
    d9d0:	dc000017 	ldw	r16,0(sp)
    d9d4:	dec00a04 	addi	sp,sp,40
    d9d8:	f800283a 	ret
    d9dc:	a8800217 	ldw	r2,8(r21)
    d9e0:	8c63883a 	add	r17,r17,r17
    d9e4:	8c63883a 	add	r17,r17,r17
    d9e8:	1445c83a 	sub	r2,r2,r17
    d9ec:	a8800215 	stw	r2,8(r21)
    d9f0:	b5800204 	addi	r22,r22,8
    d9f4:	bdc00204 	addi	r23,r23,8
    d9f8:	103fdb1e 	bne	r2,zero,d968 <__alt_mem_Flash_flash_data+0xf400d968>
    d9fc:	0005883a 	mov	r2,zero
    da00:	003fe806 	br	d9a4 <__alt_mem_Flash_flash_data+0xf400d9a4>
    da04:	0009a340 	call	9a34 <__sfvwrite_r>
    da08:	003fe606 	br	d9a4 <__alt_mem_Flash_flash_data+0xf400d9a4>

0000da0c <__sprint_r>:
    da0c:	30c00217 	ldw	r3,8(r6)
    da10:	18000126 	beq	r3,zero,da18 <__sprint_r+0xc>
    da14:	000d9101 	jmpi	d910 <__sprint_r.part.0>
    da18:	30000115 	stw	zero,4(r6)
    da1c:	0005883a 	mov	r2,zero
    da20:	f800283a 	ret

0000da24 <___vfiprintf_internal_r>:
    da24:	deffca04 	addi	sp,sp,-216
    da28:	dd803215 	stw	r22,200(sp)
    da2c:	dd403115 	stw	r21,196(sp)
    da30:	dfc03515 	stw	ra,212(sp)
    da34:	df003415 	stw	fp,208(sp)
    da38:	ddc03315 	stw	r23,204(sp)
    da3c:	dd003015 	stw	r20,192(sp)
    da40:	dcc02f15 	stw	r19,188(sp)
    da44:	dc802e15 	stw	r18,184(sp)
    da48:	dc402d15 	stw	r17,180(sp)
    da4c:	dc002c15 	stw	r16,176(sp)
    da50:	d9002015 	stw	r4,128(sp)
    da54:	d9c02215 	stw	r7,136(sp)
    da58:	282b883a 	mov	r21,r5
    da5c:	302d883a 	mov	r22,r6
    da60:	20000226 	beq	r4,zero,da6c <___vfiprintf_internal_r+0x48>
    da64:	20800e17 	ldw	r2,56(r4)
    da68:	1001b126 	beq	r2,zero,e130 <___vfiprintf_internal_r+0x70c>
    da6c:	a880030b 	ldhu	r2,12(r21)
    da70:	10c8000c 	andi	r3,r2,8192
    da74:	1800061e 	bne	r3,zero,da90 <___vfiprintf_internal_r+0x6c>
    da78:	a9001917 	ldw	r4,100(r21)
    da7c:	00f7ffc4 	movi	r3,-8193
    da80:	10880014 	ori	r2,r2,8192
    da84:	20c6703a 	and	r3,r4,r3
    da88:	a880030d 	sth	r2,12(r21)
    da8c:	a8c01915 	stw	r3,100(r21)
    da90:	10c0020c 	andi	r3,r2,8
    da94:	18018926 	beq	r3,zero,e0bc <___vfiprintf_internal_r+0x698>
    da98:	a8c00417 	ldw	r3,16(r21)
    da9c:	18018726 	beq	r3,zero,e0bc <___vfiprintf_internal_r+0x698>
    daa0:	1080068c 	andi	r2,r2,26
    daa4:	00c00284 	movi	r3,10
    daa8:	10c18c26 	beq	r2,r3,e0dc <___vfiprintf_internal_r+0x6b8>
    daac:	d8801a04 	addi	r2,sp,104
    dab0:	d8c019c4 	addi	r3,sp,103
    dab4:	070000b4 	movhi	fp,2
    dab8:	05c000b4 	movhi	r23,2
    dabc:	10c9c83a 	sub	r4,r2,r3
    dac0:	e700fe04 	addi	fp,fp,1016
    dac4:	bdc0fa04 	addi	r23,r23,1000
    dac8:	d8801e15 	stw	r2,120(sp)
    dacc:	d8c01f15 	stw	r3,124(sp)
    dad0:	dec01a15 	stw	sp,104(sp)
    dad4:	d8001c15 	stw	zero,112(sp)
    dad8:	d8001b15 	stw	zero,108(sp)
    dadc:	d8002615 	stw	zero,152(sp)
    dae0:	d8002315 	stw	zero,140(sp)
    dae4:	d9002715 	stw	r4,156(sp)
    dae8:	d811883a 	mov	r8,sp
    daec:	dd402115 	stw	r21,132(sp)
    daf0:	b021883a 	mov	r16,r22
    daf4:	80800007 	ldb	r2,0(r16)
    daf8:	10037226 	beq	r2,zero,e8c4 <___vfiprintf_internal_r+0xea0>
    dafc:	01000944 	movi	r4,37
    db00:	11037026 	beq	r2,r4,e8c4 <___vfiprintf_internal_r+0xea0>
    db04:	8005883a 	mov	r2,r16
    db08:	00000106 	br	db10 <___vfiprintf_internal_r+0xec>
    db0c:	19000326 	beq	r3,r4,db1c <___vfiprintf_internal_r+0xf8>
    db10:	10800044 	addi	r2,r2,1
    db14:	10c00007 	ldb	r3,0(r2)
    db18:	183ffc1e 	bne	r3,zero,db0c <__alt_mem_Flash_flash_data+0xf400db0c>
    db1c:	1425c83a 	sub	r18,r2,r16
    db20:	1023883a 	mov	r17,r2
    db24:	90001026 	beq	r18,zero,db68 <___vfiprintf_internal_r+0x144>
    db28:	d8c01c17 	ldw	r3,112(sp)
    db2c:	d8801b17 	ldw	r2,108(sp)
    db30:	44000015 	stw	r16,0(r8)
    db34:	90c7883a 	add	r3,r18,r3
    db38:	10800044 	addi	r2,r2,1
    db3c:	44800115 	stw	r18,4(r8)
    db40:	d8c01c15 	stw	r3,112(sp)
    db44:	d8801b15 	stw	r2,108(sp)
    db48:	010001c4 	movi	r4,7
    db4c:	2080750e 	bge	r4,r2,dd24 <___vfiprintf_internal_r+0x300>
    db50:	18036f1e 	bne	r3,zero,e910 <___vfiprintf_internal_r+0xeec>
    db54:	d8802317 	ldw	r2,140(sp)
    db58:	d8001b15 	stw	zero,108(sp)
    db5c:	d811883a 	mov	r8,sp
    db60:	1485883a 	add	r2,r2,r18
    db64:	d8802315 	stw	r2,140(sp)
    db68:	88800007 	ldb	r2,0(r17)
    db6c:	10041026 	beq	r2,zero,ebb0 <___vfiprintf_internal_r+0x118c>
    db70:	88c00047 	ldb	r3,1(r17)
    db74:	88800044 	addi	r2,r17,1
    db78:	d8001d85 	stb	zero,118(sp)
    db7c:	000f883a 	mov	r7,zero
    db80:	027fffc4 	movi	r9,-1
    db84:	0025883a 	mov	r18,zero
    db88:	002b883a 	mov	r21,zero
    db8c:	01401604 	movi	r5,88
    db90:	01800244 	movi	r6,9
    db94:	03400a84 	movi	r13,42
    db98:	03001b04 	movi	r12,108
    db9c:	14000044 	addi	r16,r2,1
    dba0:	18bff804 	addi	r2,r3,-32
    dba4:	28825536 	bltu	r5,r2,e4fc <___vfiprintf_internal_r+0xad8>
    dba8:	100490ba 	slli	r2,r2,2
    dbac:	01000074 	movhi	r4,1
    dbb0:	2136f004 	addi	r4,r4,-9280
    dbb4:	1105883a 	add	r2,r2,r4
    dbb8:	10800017 	ldw	r2,0(r2)
    dbbc:	1000683a 	jmp	r2
    dbc0:	0000e2c0 	call	e2c <gescoord+0x1e8>
    dbc4:	0000e4fc 	xorhi	zero,zero,915
    dbc8:	0000e4fc 	xorhi	zero,zero,915
    dbcc:	0000e2e0 	cmpeqi	zero,zero,907
    dbd0:	0000e4fc 	xorhi	zero,zero,915
    dbd4:	0000e4fc 	xorhi	zero,zero,915
    dbd8:	0000e4fc 	xorhi	zero,zero,915
    dbdc:	0000e4fc 	xorhi	zero,zero,915
    dbe0:	0000e4fc 	xorhi	zero,zero,915
    dbe4:	0000e4fc 	xorhi	zero,zero,915
    dbe8:	0000e2f0 	cmpltui	zero,zero,907
    dbec:	0000e310 	cmplti	zero,zero,908
    dbf0:	0000e4fc 	xorhi	zero,zero,915
    dbf4:	0000e138 	rdprs	zero,zero,900
    dbf8:	0000e224 	muli	zero,zero,904
    dbfc:	0000e4fc 	xorhi	zero,zero,915
    dc00:	0000e1a4 	muli	zero,zero,902
    dc04:	0000e1b4 	movhi	zero,902
    dc08:	0000e1b4 	movhi	zero,902
    dc0c:	0000e1b4 	movhi	zero,902
    dc10:	0000e1b4 	movhi	zero,902
    dc14:	0000e1b4 	movhi	zero,902
    dc18:	0000e1b4 	movhi	zero,902
    dc1c:	0000e1b4 	movhi	zero,902
    dc20:	0000e1b4 	movhi	zero,902
    dc24:	0000e1b4 	movhi	zero,902
    dc28:	0000e4fc 	xorhi	zero,zero,915
    dc2c:	0000e4fc 	xorhi	zero,zero,915
    dc30:	0000e4fc 	xorhi	zero,zero,915
    dc34:	0000e4fc 	xorhi	zero,zero,915
    dc38:	0000e4fc 	xorhi	zero,zero,915
    dc3c:	0000e4fc 	xorhi	zero,zero,915
    dc40:	0000e4fc 	xorhi	zero,zero,915
    dc44:	0000e4fc 	xorhi	zero,zero,915
    dc48:	0000e4fc 	xorhi	zero,zero,915
    dc4c:	0000e4fc 	xorhi	zero,zero,915
    dc50:	0000e1e0 	cmpeqi	zero,zero,903
    dc54:	0000e4fc 	xorhi	zero,zero,915
    dc58:	0000e4fc 	xorhi	zero,zero,915
    dc5c:	0000e4fc 	xorhi	zero,zero,915
    dc60:	0000e4fc 	xorhi	zero,zero,915
    dc64:	0000e4fc 	xorhi	zero,zero,915
    dc68:	0000e4fc 	xorhi	zero,zero,915
    dc6c:	0000e4fc 	xorhi	zero,zero,915
    dc70:	0000e4fc 	xorhi	zero,zero,915
    dc74:	0000e4fc 	xorhi	zero,zero,915
    dc78:	0000e4fc 	xorhi	zero,zero,915
    dc7c:	0000dd6c 	andhi	zero,zero,885
    dc80:	0000e4fc 	xorhi	zero,zero,915
    dc84:	0000e4fc 	xorhi	zero,zero,915
    dc88:	0000e4fc 	xorhi	zero,zero,915
    dc8c:	0000e4fc 	xorhi	zero,zero,915
    dc90:	0000e4fc 	xorhi	zero,zero,915
    dc94:	0000dd38 	rdprs	zero,zero,884
    dc98:	0000e4fc 	xorhi	zero,zero,915
    dc9c:	0000e4fc 	xorhi	zero,zero,915
    dca0:	0000e380 	call	e38 <gescoord+0x1f4>
    dca4:	0000e4fc 	xorhi	zero,zero,915
    dca8:	0000e4fc 	xorhi	zero,zero,915
    dcac:	0000e4fc 	xorhi	zero,zero,915
    dcb0:	0000e4fc 	xorhi	zero,zero,915
    dcb4:	0000e4fc 	xorhi	zero,zero,915
    dcb8:	0000e4fc 	xorhi	zero,zero,915
    dcbc:	0000e4fc 	xorhi	zero,zero,915
    dcc0:	0000e4fc 	xorhi	zero,zero,915
    dcc4:	0000e4fc 	xorhi	zero,zero,915
    dcc8:	0000e4fc 	xorhi	zero,zero,915
    dccc:	0000e320 	cmpeqi	zero,zero,908
    dcd0:	0000e34c 	andi	zero,zero,909
    dcd4:	0000e4fc 	xorhi	zero,zero,915
    dcd8:	0000e4fc 	xorhi	zero,zero,915
    dcdc:	0000e4fc 	xorhi	zero,zero,915
    dce0:	0000e428 	cmpgeui	zero,zero,912
    dce4:	0000e34c 	andi	zero,zero,909
    dce8:	0000e4fc 	xorhi	zero,zero,915
    dcec:	0000e4fc 	xorhi	zero,zero,915
    dcf0:	0000e438 	rdprs	zero,zero,912
    dcf4:	0000e4fc 	xorhi	zero,zero,915
    dcf8:	0000e264 	muli	zero,zero,905
    dcfc:	0000dd70 	cmpltui	zero,zero,885
    dd00:	0000e44c 	andi	zero,zero,913
    dd04:	0000e48c 	andi	zero,zero,914
    dd08:	0000e4fc 	xorhi	zero,zero,915
    dd0c:	0000e3d4 	movui	zero,911
    dd10:	0000e4fc 	xorhi	zero,zero,915
    dd14:	0000dd3c 	xorhi	zero,zero,884
    dd18:	0000e4fc 	xorhi	zero,zero,915
    dd1c:	0000e4fc 	xorhi	zero,zero,915
    dd20:	0000e49c 	xori	zero,zero,914
    dd24:	42000204 	addi	r8,r8,8
    dd28:	d8802317 	ldw	r2,140(sp)
    dd2c:	1485883a 	add	r2,r2,r18
    dd30:	d8802315 	stw	r2,140(sp)
    dd34:	003f8c06 	br	db68 <__alt_mem_Flash_flash_data+0xf400db68>
    dd38:	ad400414 	ori	r21,r21,16
    dd3c:	a880080c 	andi	r2,r21,32
    dd40:	1001e61e 	bne	r2,zero,e4dc <___vfiprintf_internal_r+0xab8>
    dd44:	a880040c 	andi	r2,r21,16
    dd48:	10034726 	beq	r2,zero,ea68 <___vfiprintf_internal_r+0x1044>
    dd4c:	d8802217 	ldw	r2,136(sp)
    dd50:	001b883a 	mov	r13,zero
    dd54:	15800017 	ldw	r22,0(r2)
    dd58:	10800104 	addi	r2,r2,4
    dd5c:	d8802215 	stw	r2,136(sp)
    dd60:	b009883a 	mov	r4,r22
    dd64:	00800044 	movi	r2,1
    dd68:	00000c06 	br	dd9c <___vfiprintf_internal_r+0x378>
    dd6c:	ad400414 	ori	r21,r21,16
    dd70:	a880080c 	andi	r2,r21,32
    dd74:	1001491e 	bne	r2,zero,e29c <___vfiprintf_internal_r+0x878>
    dd78:	a880040c 	andi	r2,r21,16
    dd7c:	10032d26 	beq	r2,zero,ea34 <___vfiprintf_internal_r+0x1010>
    dd80:	d9002217 	ldw	r4,136(sp)
    dd84:	001b883a 	mov	r13,zero
    dd88:	0005883a 	mov	r2,zero
    dd8c:	25800017 	ldw	r22,0(r4)
    dd90:	21000104 	addi	r4,r4,4
    dd94:	d9002215 	stw	r4,136(sp)
    dd98:	b009883a 	mov	r4,r22
    dd9c:	d8001d85 	stb	zero,118(sp)
    dda0:	4827883a 	mov	r19,r9
    dda4:	001d883a 	mov	r14,zero
    dda8:	48000216 	blt	r9,zero,ddb4 <___vfiprintf_internal_r+0x390>
    ddac:	00ffdfc4 	movi	r3,-129
    ddb0:	a8ea703a 	and	r21,r21,r3
    ddb4:	2002071e 	bne	r4,zero,e5d4 <___vfiprintf_internal_r+0xbb0>
    ddb8:	4802ad26 	beq	r9,zero,e870 <___vfiprintf_internal_r+0xe4c>
    ddbc:	10803fcc 	andi	r2,r2,255
    ddc0:	00c00044 	movi	r3,1
    ddc4:	10c22b26 	beq	r2,r3,e674 <___vfiprintf_internal_r+0xc50>
    ddc8:	00c00084 	movi	r3,2
    ddcc:	dd001a04 	addi	r20,sp,104
    ddd0:	10c0dd1e 	bne	r2,r3,e148 <___vfiprintf_internal_r+0x724>
    ddd4:	d9002617 	ldw	r4,152(sp)
    ddd8:	b08003cc 	andi	r2,r22,15
    dddc:	6806973a 	slli	r3,r13,28
    dde0:	2085883a 	add	r2,r4,r2
    dde4:	b02cd13a 	srli	r22,r22,4
    dde8:	10800003 	ldbu	r2,0(r2)
    ddec:	681ad13a 	srli	r13,r13,4
    ddf0:	a53fffc4 	addi	r20,r20,-1
    ddf4:	1dacb03a 	or	r22,r3,r22
    ddf8:	a0800005 	stb	r2,0(r20)
    ddfc:	b344b03a 	or	r2,r22,r13
    de00:	103ff51e 	bne	r2,zero,ddd8 <__alt_mem_Flash_flash_data+0xf400ddd8>
    de04:	d9001e17 	ldw	r4,120(sp)
    de08:	2527c83a 	sub	r19,r4,r20
    de0c:	9823883a 	mov	r17,r19
    de10:	9a40010e 	bge	r19,r9,de18 <___vfiprintf_internal_r+0x3f4>
    de14:	4823883a 	mov	r17,r9
    de18:	73803fcc 	andi	r14,r14,255
    de1c:	7380201c 	xori	r14,r14,128
    de20:	73bfe004 	addi	r14,r14,-128
    de24:	70000126 	beq	r14,zero,de2c <___vfiprintf_internal_r+0x408>
    de28:	8c400044 	addi	r17,r17,1
    de2c:	ab40008c 	andi	r13,r21,2
    de30:	68000126 	beq	r13,zero,de38 <___vfiprintf_internal_r+0x414>
    de34:	8c400084 	addi	r17,r17,2
    de38:	ad80210c 	andi	r22,r21,132
    de3c:	b001c51e 	bne	r22,zero,e554 <___vfiprintf_internal_r+0xb30>
    de40:	9447c83a 	sub	r3,r18,r17
    de44:	00c1c30e 	bge	zero,r3,e554 <___vfiprintf_internal_r+0xb30>
    de48:	01c00404 	movi	r7,16
    de4c:	d8801c17 	ldw	r2,112(sp)
    de50:	38c37b0e 	bge	r7,r3,ec40 <___vfiprintf_internal_r+0x121c>
    de54:	010000b4 	movhi	r4,2
    de58:	2100fe04 	addi	r4,r4,1016
    de5c:	dc002915 	stw	r16,164(sp)
    de60:	d9801b17 	ldw	r6,108(sp)
    de64:	d9002415 	stw	r4,144(sp)
    de68:	03c001c4 	movi	r15,7
    de6c:	da402515 	stw	r9,148(sp)
    de70:	db402815 	stw	r13,160(sp)
    de74:	1821883a 	mov	r16,r3
    de78:	00000506 	br	de90 <___vfiprintf_internal_r+0x46c>
    de7c:	31400084 	addi	r5,r6,2
    de80:	42000204 	addi	r8,r8,8
    de84:	200d883a 	mov	r6,r4
    de88:	843ffc04 	addi	r16,r16,-16
    de8c:	3c000d0e 	bge	r7,r16,dec4 <___vfiprintf_internal_r+0x4a0>
    de90:	10800404 	addi	r2,r2,16
    de94:	31000044 	addi	r4,r6,1
    de98:	47000015 	stw	fp,0(r8)
    de9c:	41c00115 	stw	r7,4(r8)
    dea0:	d8801c15 	stw	r2,112(sp)
    dea4:	d9001b15 	stw	r4,108(sp)
    dea8:	793ff40e 	bge	r15,r4,de7c <__alt_mem_Flash_flash_data+0xf400de7c>
    deac:	10019b1e 	bne	r2,zero,e51c <___vfiprintf_internal_r+0xaf8>
    deb0:	843ffc04 	addi	r16,r16,-16
    deb4:	000d883a 	mov	r6,zero
    deb8:	01400044 	movi	r5,1
    debc:	d811883a 	mov	r8,sp
    dec0:	3c3ff316 	blt	r7,r16,de90 <__alt_mem_Flash_flash_data+0xf400de90>
    dec4:	8007883a 	mov	r3,r16
    dec8:	da402517 	ldw	r9,148(sp)
    decc:	db402817 	ldw	r13,160(sp)
    ded0:	dc002917 	ldw	r16,164(sp)
    ded4:	d9002417 	ldw	r4,144(sp)
    ded8:	1885883a 	add	r2,r3,r2
    dedc:	40c00115 	stw	r3,4(r8)
    dee0:	41000015 	stw	r4,0(r8)
    dee4:	d8801c15 	stw	r2,112(sp)
    dee8:	d9401b15 	stw	r5,108(sp)
    deec:	00c001c4 	movi	r3,7
    def0:	19426a16 	blt	r3,r5,e89c <___vfiprintf_internal_r+0xe78>
    def4:	d8c01d87 	ldb	r3,118(sp)
    def8:	42000204 	addi	r8,r8,8
    defc:	29000044 	addi	r4,r5,1
    df00:	1801991e 	bne	r3,zero,e568 <___vfiprintf_internal_r+0xb44>
    df04:	68000c26 	beq	r13,zero,df38 <___vfiprintf_internal_r+0x514>
    df08:	d8c01d04 	addi	r3,sp,116
    df0c:	10800084 	addi	r2,r2,2
    df10:	40c00015 	stw	r3,0(r8)
    df14:	00c00084 	movi	r3,2
    df18:	40c00115 	stw	r3,4(r8)
    df1c:	d8801c15 	stw	r2,112(sp)
    df20:	d9001b15 	stw	r4,108(sp)
    df24:	00c001c4 	movi	r3,7
    df28:	19024c16 	blt	r3,r4,e85c <___vfiprintf_internal_r+0xe38>
    df2c:	200b883a 	mov	r5,r4
    df30:	42000204 	addi	r8,r8,8
    df34:	21000044 	addi	r4,r4,1
    df38:	00c02004 	movi	r3,128
    df3c:	b0c20126 	beq	r22,r3,e744 <___vfiprintf_internal_r+0xd20>
    df40:	4cedc83a 	sub	r22,r9,r19
    df44:	0580230e 	bge	zero,r22,dfd4 <___vfiprintf_internal_r+0x5b0>
    df48:	01c00404 	movi	r7,16
    df4c:	3d83140e 	bge	r7,r22,eba0 <___vfiprintf_internal_r+0x117c>
    df50:	010000b4 	movhi	r4,2
    df54:	2100fa04 	addi	r4,r4,1000
    df58:	d9002415 	stw	r4,144(sp)
    df5c:	034001c4 	movi	r13,7
    df60:	00000506 	br	df78 <___vfiprintf_internal_r+0x554>
    df64:	29000084 	addi	r4,r5,2
    df68:	42000204 	addi	r8,r8,8
    df6c:	180b883a 	mov	r5,r3
    df70:	b5bffc04 	addi	r22,r22,-16
    df74:	3d800d0e 	bge	r7,r22,dfac <___vfiprintf_internal_r+0x588>
    df78:	10800404 	addi	r2,r2,16
    df7c:	28c00044 	addi	r3,r5,1
    df80:	45c00015 	stw	r23,0(r8)
    df84:	41c00115 	stw	r7,4(r8)
    df88:	d8801c15 	stw	r2,112(sp)
    df8c:	d8c01b15 	stw	r3,108(sp)
    df90:	68fff40e 	bge	r13,r3,df64 <__alt_mem_Flash_flash_data+0xf400df64>
    df94:	1001811e 	bne	r2,zero,e59c <___vfiprintf_internal_r+0xb78>
    df98:	b5bffc04 	addi	r22,r22,-16
    df9c:	01000044 	movi	r4,1
    dfa0:	000b883a 	mov	r5,zero
    dfa4:	d811883a 	mov	r8,sp
    dfa8:	3dbff316 	blt	r7,r22,df78 <__alt_mem_Flash_flash_data+0xf400df78>
    dfac:	d8c02417 	ldw	r3,144(sp)
    dfb0:	1585883a 	add	r2,r2,r22
    dfb4:	45800115 	stw	r22,4(r8)
    dfb8:	40c00015 	stw	r3,0(r8)
    dfbc:	d8801c15 	stw	r2,112(sp)
    dfc0:	d9001b15 	stw	r4,108(sp)
    dfc4:	00c001c4 	movi	r3,7
    dfc8:	1901d016 	blt	r3,r4,e70c <___vfiprintf_internal_r+0xce8>
    dfcc:	42000204 	addi	r8,r8,8
    dfd0:	21000044 	addi	r4,r4,1
    dfd4:	14c5883a 	add	r2,r2,r19
    dfd8:	45000015 	stw	r20,0(r8)
    dfdc:	44c00115 	stw	r19,4(r8)
    dfe0:	d8801c15 	stw	r2,112(sp)
    dfe4:	d9001b15 	stw	r4,108(sp)
    dfe8:	00c001c4 	movi	r3,7
    dfec:	1901cf0e 	bge	r3,r4,e72c <___vfiprintf_internal_r+0xd08>
    dff0:	1002361e 	bne	r2,zero,e8cc <___vfiprintf_internal_r+0xea8>
    dff4:	d8001b15 	stw	zero,108(sp)
    dff8:	aac0010c 	andi	r11,r21,4
    dffc:	58002826 	beq	r11,zero,e0a0 <___vfiprintf_internal_r+0x67c>
    e000:	9467c83a 	sub	r19,r18,r17
    e004:	d811883a 	mov	r8,sp
    e008:	04c3340e 	bge	zero,r19,ecdc <___vfiprintf_internal_r+0x12b8>
    e00c:	01c00404 	movi	r7,16
    e010:	3cc31b0e 	bge	r7,r19,ec80 <___vfiprintf_internal_r+0x125c>
    e014:	00c000b4 	movhi	r3,2
    e018:	18c0fe04 	addi	r3,r3,1016
    e01c:	d9001b17 	ldw	r4,108(sp)
    e020:	d8c02415 	stw	r3,144(sp)
    e024:	382b883a 	mov	r21,r7
    e028:	050001c4 	movi	r20,7
    e02c:	dd802017 	ldw	r22,128(sp)
    e030:	00000506 	br	e048 <___vfiprintf_internal_r+0x624>
    e034:	21400084 	addi	r5,r4,2
    e038:	42000204 	addi	r8,r8,8
    e03c:	1809883a 	mov	r4,r3
    e040:	9cfffc04 	addi	r19,r19,-16
    e044:	acc00d0e 	bge	r21,r19,e07c <___vfiprintf_internal_r+0x658>
    e048:	10800404 	addi	r2,r2,16
    e04c:	20c00044 	addi	r3,r4,1
    e050:	47000015 	stw	fp,0(r8)
    e054:	45400115 	stw	r21,4(r8)
    e058:	d8801c15 	stw	r2,112(sp)
    e05c:	d8c01b15 	stw	r3,108(sp)
    e060:	a0fff40e 	bge	r20,r3,e034 <__alt_mem_Flash_flash_data+0xf400e034>
    e064:	10019f1e 	bne	r2,zero,e6e4 <___vfiprintf_internal_r+0xcc0>
    e068:	9cfffc04 	addi	r19,r19,-16
    e06c:	01400044 	movi	r5,1
    e070:	0009883a 	mov	r4,zero
    e074:	d811883a 	mov	r8,sp
    e078:	acfff316 	blt	r21,r19,e048 <__alt_mem_Flash_flash_data+0xf400e048>
    e07c:	d8c02417 	ldw	r3,144(sp)
    e080:	14c5883a 	add	r2,r2,r19
    e084:	44c00115 	stw	r19,4(r8)
    e088:	40c00015 	stw	r3,0(r8)
    e08c:	d8801c15 	stw	r2,112(sp)
    e090:	d9401b15 	stw	r5,108(sp)
    e094:	00c001c4 	movi	r3,7
    e098:	1941810e 	bge	r3,r5,e6a0 <___vfiprintf_internal_r+0xc7c>
    e09c:	10017a1e 	bne	r2,zero,e688 <___vfiprintf_internal_r+0xc64>
    e0a0:	8c82a416 	blt	r17,r18,eb34 <___vfiprintf_internal_r+0x1110>
    e0a4:	d9002317 	ldw	r4,140(sp)
    e0a8:	2449883a 	add	r4,r4,r17
    e0ac:	d9002315 	stw	r4,140(sp)
    e0b0:	d8001b15 	stw	zero,108(sp)
    e0b4:	d811883a 	mov	r8,sp
    e0b8:	003e8e06 	br	daf4 <__alt_mem_Flash_flash_data+0xf400daf4>
    e0bc:	d9002017 	ldw	r4,128(sp)
    e0c0:	a80b883a 	mov	r5,r21
    e0c4:	00075700 	call	7570 <__swsetup_r>
    e0c8:	10000c1e 	bne	r2,zero,e0fc <___vfiprintf_internal_r+0x6d8>
    e0cc:	a880030b 	ldhu	r2,12(r21)
    e0d0:	00c00284 	movi	r3,10
    e0d4:	1080068c 	andi	r2,r2,26
    e0d8:	10fe741e 	bne	r2,r3,daac <__alt_mem_Flash_flash_data+0xf400daac>
    e0dc:	a880038f 	ldh	r2,14(r21)
    e0e0:	103e7216 	blt	r2,zero,daac <__alt_mem_Flash_flash_data+0xf400daac>
    e0e4:	d9002017 	ldw	r4,128(sp)
    e0e8:	d9c02217 	ldw	r7,136(sp)
    e0ec:	a80b883a 	mov	r5,r21
    e0f0:	b00d883a 	mov	r6,r22
    e0f4:	000ed180 	call	ed18 <__sbprintf>
    e0f8:	00000106 	br	e100 <___vfiprintf_internal_r+0x6dc>
    e0fc:	00bfffc4 	movi	r2,-1
    e100:	dfc03517 	ldw	ra,212(sp)
    e104:	df003417 	ldw	fp,208(sp)
    e108:	ddc03317 	ldw	r23,204(sp)
    e10c:	dd803217 	ldw	r22,200(sp)
    e110:	dd403117 	ldw	r21,196(sp)
    e114:	dd003017 	ldw	r20,192(sp)
    e118:	dcc02f17 	ldw	r19,188(sp)
    e11c:	dc802e17 	ldw	r18,184(sp)
    e120:	dc402d17 	ldw	r17,180(sp)
    e124:	dc002c17 	ldw	r16,176(sp)
    e128:	dec03604 	addi	sp,sp,216
    e12c:	f800283a 	ret
    e130:	00095d00 	call	95d0 <__sinit>
    e134:	003e4d06 	br	da6c <__alt_mem_Flash_flash_data+0xf400da6c>
    e138:	8005883a 	mov	r2,r16
    e13c:	ad400114 	ori	r21,r21,4
    e140:	80c00007 	ldb	r3,0(r16)
    e144:	003e9506 	br	db9c <__alt_mem_Flash_flash_data+0xf400db9c>
    e148:	b006d0fa 	srli	r3,r22,3
    e14c:	6808977a 	slli	r4,r13,29
    e150:	681ad0fa 	srli	r13,r13,3
    e154:	b58001cc 	andi	r22,r22,7
    e158:	b0800c04 	addi	r2,r22,48
    e15c:	a53fffc4 	addi	r20,r20,-1
    e160:	20ecb03a 	or	r22,r4,r3
    e164:	a0800005 	stb	r2,0(r20)
    e168:	b346b03a 	or	r3,r22,r13
    e16c:	183ff61e 	bne	r3,zero,e148 <__alt_mem_Flash_flash_data+0xf400e148>
    e170:	a8c0004c 	andi	r3,r21,1
    e174:	a009883a 	mov	r4,r20
    e178:	18013b26 	beq	r3,zero,e668 <___vfiprintf_internal_r+0xc44>
    e17c:	10803fcc 	andi	r2,r2,255
    e180:	1080201c 	xori	r2,r2,128
    e184:	10bfe004 	addi	r2,r2,-128
    e188:	00c00c04 	movi	r3,48
    e18c:	10ff1d26 	beq	r2,r3,de04 <__alt_mem_Flash_flash_data+0xf400de04>
    e190:	d8801e17 	ldw	r2,120(sp)
    e194:	a53fffc4 	addi	r20,r20,-1
    e198:	20ffffc5 	stb	r3,-1(r4)
    e19c:	1527c83a 	sub	r19,r2,r20
    e1a0:	003f1a06 	br	de0c <__alt_mem_Flash_flash_data+0xf400de0c>
    e1a4:	ad402014 	ori	r21,r21,128
    e1a8:	8005883a 	mov	r2,r16
    e1ac:	80c00007 	ldb	r3,0(r16)
    e1b0:	003e7a06 	br	db9c <__alt_mem_Flash_flash_data+0xf400db9c>
    e1b4:	8005883a 	mov	r2,r16
    e1b8:	0025883a 	mov	r18,zero
    e1bc:	193ff404 	addi	r4,r3,-48
    e1c0:	10c00007 	ldb	r3,0(r2)
    e1c4:	948002a4 	muli	r18,r18,10
    e1c8:	84000044 	addi	r16,r16,1
    e1cc:	8005883a 	mov	r2,r16
    e1d0:	9125883a 	add	r18,r18,r4
    e1d4:	193ff404 	addi	r4,r3,-48
    e1d8:	313ff92e 	bgeu	r6,r4,e1c0 <__alt_mem_Flash_flash_data+0xf400e1c0>
    e1dc:	003e7006 	br	dba0 <__alt_mem_Flash_flash_data+0xf400dba0>
    e1e0:	ad400414 	ori	r21,r21,16
    e1e4:	d9c01d85 	stb	r7,118(sp)
    e1e8:	a880080c 	andi	r2,r21,32
    e1ec:	d8c02217 	ldw	r3,136(sp)
    e1f0:	10005a26 	beq	r2,zero,e35c <___vfiprintf_internal_r+0x938>
    e1f4:	d9002217 	ldw	r4,136(sp)
    e1f8:	18800117 	ldw	r2,4(r3)
    e1fc:	1d800017 	ldw	r22,0(r3)
    e200:	21000204 	addi	r4,r4,8
    e204:	d9002215 	stw	r4,136(sp)
    e208:	101b883a 	mov	r13,r2
    e20c:	1001f416 	blt	r2,zero,e9e0 <___vfiprintf_internal_r+0xfbc>
    e210:	db801d83 	ldbu	r14,118(sp)
    e214:	4827883a 	mov	r19,r9
    e218:	00800044 	movi	r2,1
    e21c:	b348b03a 	or	r4,r22,r13
    e220:	003ee106 	br	dda8 <__alt_mem_Flash_flash_data+0xf400dda8>
    e224:	80c00007 	ldb	r3,0(r16)
    e228:	80800044 	addi	r2,r16,1
    e22c:	1b42a326 	beq	r3,r13,ecbc <___vfiprintf_internal_r+0x1298>
    e230:	193ff404 	addi	r4,r3,-48
    e234:	1021883a 	mov	r16,r2
    e238:	0013883a 	mov	r9,zero
    e23c:	313e5836 	bltu	r6,r4,dba0 <__alt_mem_Flash_flash_data+0xf400dba0>
    e240:	80c00007 	ldb	r3,0(r16)
    e244:	4a4002a4 	muli	r9,r9,10
    e248:	84000044 	addi	r16,r16,1
    e24c:	2253883a 	add	r9,r4,r9
    e250:	193ff404 	addi	r4,r3,-48
    e254:	313ffa2e 	bgeu	r6,r4,e240 <__alt_mem_Flash_flash_data+0xf400e240>
    e258:	483e510e 	bge	r9,zero,dba0 <__alt_mem_Flash_flash_data+0xf400dba0>
    e25c:	027fffc4 	movi	r9,-1
    e260:	003e4f06 	br	dba0 <__alt_mem_Flash_flash_data+0xf400dba0>
    e264:	d9c01d85 	stb	r7,118(sp)
    e268:	a880080c 	andi	r2,r21,32
    e26c:	10020826 	beq	r2,zero,ea90 <___vfiprintf_internal_r+0x106c>
    e270:	d8c02217 	ldw	r3,136(sp)
    e274:	d9002317 	ldw	r4,140(sp)
    e278:	18800017 	ldw	r2,0(r3)
    e27c:	2007d7fa 	srai	r3,r4,31
    e280:	d9002217 	ldw	r4,136(sp)
    e284:	10c00115 	stw	r3,4(r2)
    e288:	21000104 	addi	r4,r4,4
    e28c:	d9002215 	stw	r4,136(sp)
    e290:	d9002317 	ldw	r4,140(sp)
    e294:	11000015 	stw	r4,0(r2)
    e298:	003e1606 	br	daf4 <__alt_mem_Flash_flash_data+0xf400daf4>
    e29c:	d8802217 	ldw	r2,136(sp)
    e2a0:	d8c02217 	ldw	r3,136(sp)
    e2a4:	15800017 	ldw	r22,0(r2)
    e2a8:	13400117 	ldw	r13,4(r2)
    e2ac:	18c00204 	addi	r3,r3,8
    e2b0:	0005883a 	mov	r2,zero
    e2b4:	d8c02215 	stw	r3,136(sp)
    e2b8:	b348b03a 	or	r4,r22,r13
    e2bc:	003eb706 	br	dd9c <__alt_mem_Flash_flash_data+0xf400dd9c>
    e2c0:	38803fcc 	andi	r2,r7,255
    e2c4:	1080201c 	xori	r2,r2,128
    e2c8:	10bfe004 	addi	r2,r2,-128
    e2cc:	1001e31e 	bne	r2,zero,ea5c <___vfiprintf_internal_r+0x1038>
    e2d0:	8005883a 	mov	r2,r16
    e2d4:	01c00804 	movi	r7,32
    e2d8:	80c00007 	ldb	r3,0(r16)
    e2dc:	003e2f06 	br	db9c <__alt_mem_Flash_flash_data+0xf400db9c>
    e2e0:	ad400054 	ori	r21,r21,1
    e2e4:	8005883a 	mov	r2,r16
    e2e8:	80c00007 	ldb	r3,0(r16)
    e2ec:	003e2b06 	br	db9c <__alt_mem_Flash_flash_data+0xf400db9c>
    e2f0:	d8c02217 	ldw	r3,136(sp)
    e2f4:	1c800017 	ldw	r18,0(r3)
    e2f8:	18c00104 	addi	r3,r3,4
    e2fc:	90023816 	blt	r18,zero,ebe0 <___vfiprintf_internal_r+0x11bc>
    e300:	d8c02215 	stw	r3,136(sp)
    e304:	8005883a 	mov	r2,r16
    e308:	80c00007 	ldb	r3,0(r16)
    e30c:	003e2306 	br	db9c <__alt_mem_Flash_flash_data+0xf400db9c>
    e310:	8005883a 	mov	r2,r16
    e314:	01c00ac4 	movi	r7,43
    e318:	80c00007 	ldb	r3,0(r16)
    e31c:	003e1f06 	br	db9c <__alt_mem_Flash_flash_data+0xf400db9c>
    e320:	d8c02217 	ldw	r3,136(sp)
    e324:	04400044 	movi	r17,1
    e328:	d8001d85 	stb	zero,118(sp)
    e32c:	18800017 	ldw	r2,0(r3)
    e330:	18c00104 	addi	r3,r3,4
    e334:	d8c02215 	stw	r3,136(sp)
    e338:	d8801005 	stb	r2,64(sp)
    e33c:	8827883a 	mov	r19,r17
    e340:	dd001004 	addi	r20,sp,64
    e344:	0013883a 	mov	r9,zero
    e348:	003eb806 	br	de2c <__alt_mem_Flash_flash_data+0xf400de2c>
    e34c:	d9c01d85 	stb	r7,118(sp)
    e350:	a880080c 	andi	r2,r21,32
    e354:	d8c02217 	ldw	r3,136(sp)
    e358:	103fa61e 	bne	r2,zero,e1f4 <__alt_mem_Flash_flash_data+0xf400e1f4>
    e35c:	a880040c 	andi	r2,r21,16
    e360:	1001dd26 	beq	r2,zero,ead8 <___vfiprintf_internal_r+0x10b4>
    e364:	1d800017 	ldw	r22,0(r3)
    e368:	d8802217 	ldw	r2,136(sp)
    e36c:	b01bd7fa 	srai	r13,r22,31
    e370:	10800104 	addi	r2,r2,4
    e374:	d8802215 	stw	r2,136(sp)
    e378:	6805883a 	mov	r2,r13
    e37c:	003fa306 	br	e20c <__alt_mem_Flash_flash_data+0xf400e20c>
    e380:	008000b4 	movhi	r2,2
    e384:	10808404 	addi	r2,r2,528
    e388:	d8802615 	stw	r2,152(sp)
    e38c:	d9c01d85 	stb	r7,118(sp)
    e390:	a880080c 	andi	r2,r21,32
    e394:	10004726 	beq	r2,zero,e4b4 <___vfiprintf_internal_r+0xa90>
    e398:	d9002217 	ldw	r4,136(sp)
    e39c:	25800017 	ldw	r22,0(r4)
    e3a0:	23400117 	ldw	r13,4(r4)
    e3a4:	21000204 	addi	r4,r4,8
    e3a8:	d9002215 	stw	r4,136(sp)
    e3ac:	a880004c 	andi	r2,r21,1
    e3b0:	10014e26 	beq	r2,zero,e8ec <___vfiprintf_internal_r+0xec8>
    e3b4:	b348b03a 	or	r4,r22,r13
    e3b8:	20019c26 	beq	r4,zero,ea2c <___vfiprintf_internal_r+0x1008>
    e3bc:	00800c04 	movi	r2,48
    e3c0:	d8801d05 	stb	r2,116(sp)
    e3c4:	d8c01d45 	stb	r3,117(sp)
    e3c8:	ad400094 	ori	r21,r21,2
    e3cc:	00800084 	movi	r2,2
    e3d0:	003e7206 	br	dd9c <__alt_mem_Flash_flash_data+0xf400dd9c>
    e3d4:	d8c02217 	ldw	r3,136(sp)
    e3d8:	d8001d85 	stb	zero,118(sp)
    e3dc:	1d000017 	ldw	r20,0(r3)
    e3e0:	1d800104 	addi	r22,r3,4
    e3e4:	a0021c26 	beq	r20,zero,ec58 <___vfiprintf_internal_r+0x1234>
    e3e8:	a009883a 	mov	r4,r20
    e3ec:	48020016 	blt	r9,zero,ebf0 <___vfiprintf_internal_r+0x11cc>
    e3f0:	480d883a 	mov	r6,r9
    e3f4:	000b883a 	mov	r5,zero
    e3f8:	da002a15 	stw	r8,168(sp)
    e3fc:	da402b15 	stw	r9,172(sp)
    e400:	000aabc0 	call	aabc <memchr>
    e404:	da002a17 	ldw	r8,168(sp)
    e408:	da402b17 	ldw	r9,172(sp)
    e40c:	10022226 	beq	r2,zero,ec98 <___vfiprintf_internal_r+0x1274>
    e410:	1527c83a 	sub	r19,r2,r20
    e414:	4cc1c916 	blt	r9,r19,eb3c <___vfiprintf_internal_r+0x1118>
    e418:	db801d83 	ldbu	r14,118(sp)
    e41c:	dd802215 	stw	r22,136(sp)
    e420:	0013883a 	mov	r9,zero
    e424:	003e7906 	br	de0c <__alt_mem_Flash_flash_data+0xf400de0c>
    e428:	ad401014 	ori	r21,r21,64
    e42c:	8005883a 	mov	r2,r16
    e430:	80c00007 	ldb	r3,0(r16)
    e434:	003dd906 	br	db9c <__alt_mem_Flash_flash_data+0xf400db9c>
    e438:	80c00007 	ldb	r3,0(r16)
    e43c:	8005883a 	mov	r2,r16
    e440:	1b01e326 	beq	r3,r12,ebd0 <___vfiprintf_internal_r+0x11ac>
    e444:	ad400414 	ori	r21,r21,16
    e448:	003dd406 	br	db9c <__alt_mem_Flash_flash_data+0xf400db9c>
    e44c:	d9002217 	ldw	r4,136(sp)
    e450:	00800c04 	movi	r2,48
    e454:	d8801d05 	stb	r2,116(sp)
    e458:	25800017 	ldw	r22,0(r4)
    e45c:	00801e04 	movi	r2,120
    e460:	d8801d45 	stb	r2,117(sp)
    e464:	008000b4 	movhi	r2,2
    e468:	21000104 	addi	r4,r4,4
    e46c:	10808904 	addi	r2,r2,548
    e470:	d9002215 	stw	r4,136(sp)
    e474:	d8802615 	stw	r2,152(sp)
    e478:	001b883a 	mov	r13,zero
    e47c:	ad400094 	ori	r21,r21,2
    e480:	00800084 	movi	r2,2
    e484:	b009883a 	mov	r4,r22
    e488:	003e4406 	br	dd9c <__alt_mem_Flash_flash_data+0xf400dd9c>
    e48c:	ad400814 	ori	r21,r21,32
    e490:	8005883a 	mov	r2,r16
    e494:	80c00007 	ldb	r3,0(r16)
    e498:	003dc006 	br	db9c <__alt_mem_Flash_flash_data+0xf400db9c>
    e49c:	008000b4 	movhi	r2,2
    e4a0:	10808904 	addi	r2,r2,548
    e4a4:	d8802615 	stw	r2,152(sp)
    e4a8:	d9c01d85 	stb	r7,118(sp)
    e4ac:	a880080c 	andi	r2,r21,32
    e4b0:	103fb91e 	bne	r2,zero,e398 <__alt_mem_Flash_flash_data+0xf400e398>
    e4b4:	a880040c 	andi	r2,r21,16
    e4b8:	10010f1e 	bne	r2,zero,e8f8 <___vfiprintf_internal_r+0xed4>
    e4bc:	a880100c 	andi	r2,r21,64
    e4c0:	10010d26 	beq	r2,zero,e8f8 <___vfiprintf_internal_r+0xed4>
    e4c4:	d9002217 	ldw	r4,136(sp)
    e4c8:	001b883a 	mov	r13,zero
    e4cc:	2580000b 	ldhu	r22,0(r4)
    e4d0:	21000104 	addi	r4,r4,4
    e4d4:	d9002215 	stw	r4,136(sp)
    e4d8:	003fb406 	br	e3ac <__alt_mem_Flash_flash_data+0xf400e3ac>
    e4dc:	d9002217 	ldw	r4,136(sp)
    e4e0:	00800044 	movi	r2,1
    e4e4:	25800017 	ldw	r22,0(r4)
    e4e8:	23400117 	ldw	r13,4(r4)
    e4ec:	21000204 	addi	r4,r4,8
    e4f0:	d9002215 	stw	r4,136(sp)
    e4f4:	b348b03a 	or	r4,r22,r13
    e4f8:	003e2806 	br	dd9c <__alt_mem_Flash_flash_data+0xf400dd9c>
    e4fc:	d9c01d85 	stb	r7,118(sp)
    e500:	1801ab26 	beq	r3,zero,ebb0 <___vfiprintf_internal_r+0x118c>
    e504:	04400044 	movi	r17,1
    e508:	d8c01005 	stb	r3,64(sp)
    e50c:	d8001d85 	stb	zero,118(sp)
    e510:	8827883a 	mov	r19,r17
    e514:	dd001004 	addi	r20,sp,64
    e518:	003f8a06 	br	e344 <__alt_mem_Flash_flash_data+0xf400e344>
    e51c:	d9002017 	ldw	r4,128(sp)
    e520:	d9402117 	ldw	r5,132(sp)
    e524:	d9801a04 	addi	r6,sp,104
    e528:	d9c02b15 	stw	r7,172(sp)
    e52c:	dbc02a15 	stw	r15,168(sp)
    e530:	000d9100 	call	d910 <__sprint_r.part.0>
    e534:	d9c02b17 	ldw	r7,172(sp)
    e538:	dbc02a17 	ldw	r15,168(sp)
    e53c:	1000631e 	bne	r2,zero,e6cc <___vfiprintf_internal_r+0xca8>
    e540:	d9801b17 	ldw	r6,108(sp)
    e544:	d8801c17 	ldw	r2,112(sp)
    e548:	d811883a 	mov	r8,sp
    e54c:	31400044 	addi	r5,r6,1
    e550:	003e4d06 	br	de88 <__alt_mem_Flash_flash_data+0xf400de88>
    e554:	d9401b17 	ldw	r5,108(sp)
    e558:	d8801c17 	ldw	r2,112(sp)
    e55c:	29000044 	addi	r4,r5,1
    e560:	d8c01d87 	ldb	r3,118(sp)
    e564:	183e6726 	beq	r3,zero,df04 <__alt_mem_Flash_flash_data+0xf400df04>
    e568:	00c00044 	movi	r3,1
    e56c:	d9401d84 	addi	r5,sp,118
    e570:	10c5883a 	add	r2,r2,r3
    e574:	41400015 	stw	r5,0(r8)
    e578:	40c00115 	stw	r3,4(r8)
    e57c:	d8801c15 	stw	r2,112(sp)
    e580:	d9001b15 	stw	r4,108(sp)
    e584:	014001c4 	movi	r5,7
    e588:	2900ab16 	blt	r5,r4,e838 <___vfiprintf_internal_r+0xe14>
    e58c:	200b883a 	mov	r5,r4
    e590:	42000204 	addi	r8,r8,8
    e594:	21000044 	addi	r4,r4,1
    e598:	003e5a06 	br	df04 <__alt_mem_Flash_flash_data+0xf400df04>
    e59c:	d9002017 	ldw	r4,128(sp)
    e5a0:	d9402117 	ldw	r5,132(sp)
    e5a4:	d9801a04 	addi	r6,sp,104
    e5a8:	d9c02b15 	stw	r7,172(sp)
    e5ac:	db402a15 	stw	r13,168(sp)
    e5b0:	000d9100 	call	d910 <__sprint_r.part.0>
    e5b4:	d9c02b17 	ldw	r7,172(sp)
    e5b8:	db402a17 	ldw	r13,168(sp)
    e5bc:	1000431e 	bne	r2,zero,e6cc <___vfiprintf_internal_r+0xca8>
    e5c0:	d9401b17 	ldw	r5,108(sp)
    e5c4:	d8801c17 	ldw	r2,112(sp)
    e5c8:	d811883a 	mov	r8,sp
    e5cc:	29000044 	addi	r4,r5,1
    e5d0:	003e6706 	br	df70 <__alt_mem_Flash_flash_data+0xf400df70>
    e5d4:	10803fcc 	andi	r2,r2,255
    e5d8:	00c00044 	movi	r3,1
    e5dc:	10fdfa1e 	bne	r2,r3,ddc8 <__alt_mem_Flash_flash_data+0xf400ddc8>
    e5e0:	6800021e 	bne	r13,zero,e5ec <___vfiprintf_internal_r+0xbc8>
    e5e4:	00800244 	movi	r2,9
    e5e8:	1580222e 	bgeu	r2,r22,e674 <___vfiprintf_internal_r+0xc50>
    e5ec:	dc802415 	stw	r18,144(sp)
    e5f0:	dc002515 	stw	r16,148(sp)
    e5f4:	dc401a04 	addi	r17,sp,104
    e5f8:	b021883a 	mov	r16,r22
    e5fc:	4827883a 	mov	r19,r9
    e600:	4029883a 	mov	r20,r8
    e604:	702d883a 	mov	r22,r14
    e608:	6825883a 	mov	r18,r13
    e60c:	8009883a 	mov	r4,r16
    e610:	900b883a 	mov	r5,r18
    e614:	01800284 	movi	r6,10
    e618:	000f883a 	mov	r7,zero
    e61c:	000fc8c0 	call	fc8c <__umoddi3>
    e620:	10800c04 	addi	r2,r2,48
    e624:	8c7fffc4 	addi	r17,r17,-1
    e628:	8009883a 	mov	r4,r16
    e62c:	900b883a 	mov	r5,r18
    e630:	01800284 	movi	r6,10
    e634:	000f883a 	mov	r7,zero
    e638:	88800005 	stb	r2,0(r17)
    e63c:	000f6cc0 	call	f6cc <__udivdi3>
    e640:	1021883a 	mov	r16,r2
    e644:	10c4b03a 	or	r2,r2,r3
    e648:	1825883a 	mov	r18,r3
    e64c:	103fef1e 	bne	r2,zero,e60c <__alt_mem_Flash_flash_data+0xf400e60c>
    e650:	dc802417 	ldw	r18,144(sp)
    e654:	dc002517 	ldw	r16,148(sp)
    e658:	a011883a 	mov	r8,r20
    e65c:	9813883a 	mov	r9,r19
    e660:	b01d883a 	mov	r14,r22
    e664:	8829883a 	mov	r20,r17
    e668:	d8c01e17 	ldw	r3,120(sp)
    e66c:	1d27c83a 	sub	r19,r3,r20
    e670:	003de606 	br	de0c <__alt_mem_Flash_flash_data+0xf400de0c>
    e674:	b5800c04 	addi	r22,r22,48
    e678:	dd8019c5 	stb	r22,103(sp)
    e67c:	dcc02717 	ldw	r19,156(sp)
    e680:	dd0019c4 	addi	r20,sp,103
    e684:	003de106 	br	de0c <__alt_mem_Flash_flash_data+0xf400de0c>
    e688:	d9002017 	ldw	r4,128(sp)
    e68c:	d9402117 	ldw	r5,132(sp)
    e690:	d9801a04 	addi	r6,sp,104
    e694:	000d9100 	call	d910 <__sprint_r.part.0>
    e698:	10000c1e 	bne	r2,zero,e6cc <___vfiprintf_internal_r+0xca8>
    e69c:	d8801c17 	ldw	r2,112(sp)
    e6a0:	8c80010e 	bge	r17,r18,e6a8 <___vfiprintf_internal_r+0xc84>
    e6a4:	9023883a 	mov	r17,r18
    e6a8:	d8c02317 	ldw	r3,140(sp)
    e6ac:	1c47883a 	add	r3,r3,r17
    e6b0:	d8c02315 	stw	r3,140(sp)
    e6b4:	103e7e26 	beq	r2,zero,e0b0 <__alt_mem_Flash_flash_data+0xf400e0b0>
    e6b8:	d9002017 	ldw	r4,128(sp)
    e6bc:	d9402117 	ldw	r5,132(sp)
    e6c0:	d9801a04 	addi	r6,sp,104
    e6c4:	000d9100 	call	d910 <__sprint_r.part.0>
    e6c8:	103e7926 	beq	r2,zero,e0b0 <__alt_mem_Flash_flash_data+0xf400e0b0>
    e6cc:	dd402117 	ldw	r21,132(sp)
    e6d0:	a880030b 	ldhu	r2,12(r21)
    e6d4:	1080100c 	andi	r2,r2,64
    e6d8:	103e881e 	bne	r2,zero,e0fc <__alt_mem_Flash_flash_data+0xf400e0fc>
    e6dc:	d8802317 	ldw	r2,140(sp)
    e6e0:	003e8706 	br	e100 <__alt_mem_Flash_flash_data+0xf400e100>
    e6e4:	d9402117 	ldw	r5,132(sp)
    e6e8:	b009883a 	mov	r4,r22
    e6ec:	d9801a04 	addi	r6,sp,104
    e6f0:	000d9100 	call	d910 <__sprint_r.part.0>
    e6f4:	103ff51e 	bne	r2,zero,e6cc <__alt_mem_Flash_flash_data+0xf400e6cc>
    e6f8:	d9001b17 	ldw	r4,108(sp)
    e6fc:	d8801c17 	ldw	r2,112(sp)
    e700:	d811883a 	mov	r8,sp
    e704:	21400044 	addi	r5,r4,1
    e708:	003e4d06 	br	e040 <__alt_mem_Flash_flash_data+0xf400e040>
    e70c:	1000aa1e 	bne	r2,zero,e9b8 <___vfiprintf_internal_r+0xf94>
    e710:	00c00044 	movi	r3,1
    e714:	9805883a 	mov	r2,r19
    e718:	dd000015 	stw	r20,0(sp)
    e71c:	dcc00115 	stw	r19,4(sp)
    e720:	dcc01c15 	stw	r19,112(sp)
    e724:	d8c01b15 	stw	r3,108(sp)
    e728:	d811883a 	mov	r8,sp
    e72c:	42000204 	addi	r8,r8,8
    e730:	aac0010c 	andi	r11,r21,4
    e734:	583fda26 	beq	r11,zero,e6a0 <__alt_mem_Flash_flash_data+0xf400e6a0>
    e738:	9467c83a 	sub	r19,r18,r17
    e73c:	04fe3316 	blt	zero,r19,e00c <__alt_mem_Flash_flash_data+0xf400e00c>
    e740:	003fd706 	br	e6a0 <__alt_mem_Flash_flash_data+0xf400e6a0>
    e744:	946dc83a 	sub	r22,r18,r17
    e748:	05bdfd0e 	bge	zero,r22,df40 <__alt_mem_Flash_flash_data+0xf400df40>
    e74c:	00c000b4 	movhi	r3,2
    e750:	18c0fa04 	addi	r3,r3,1000
    e754:	01c00404 	movi	r7,16
    e758:	d8c02415 	stw	r3,144(sp)
    e75c:	3d81530e 	bge	r7,r22,ecac <___vfiprintf_internal_r+0x1288>
    e760:	8007883a 	mov	r3,r16
    e764:	034001c4 	movi	r13,7
    e768:	b021883a 	mov	r16,r22
    e76c:	da402515 	stw	r9,148(sp)
    e770:	182d883a 	mov	r22,r3
    e774:	00000506 	br	e78c <___vfiprintf_internal_r+0xd68>
    e778:	29800084 	addi	r6,r5,2
    e77c:	42000204 	addi	r8,r8,8
    e780:	180b883a 	mov	r5,r3
    e784:	843ffc04 	addi	r16,r16,-16
    e788:	3c000d0e 	bge	r7,r16,e7c0 <___vfiprintf_internal_r+0xd9c>
    e78c:	10800404 	addi	r2,r2,16
    e790:	28c00044 	addi	r3,r5,1
    e794:	45c00015 	stw	r23,0(r8)
    e798:	41c00115 	stw	r7,4(r8)
    e79c:	d8801c15 	stw	r2,112(sp)
    e7a0:	d8c01b15 	stw	r3,108(sp)
    e7a4:	68fff40e 	bge	r13,r3,e778 <__alt_mem_Flash_flash_data+0xf400e778>
    e7a8:	1000151e 	bne	r2,zero,e800 <___vfiprintf_internal_r+0xddc>
    e7ac:	843ffc04 	addi	r16,r16,-16
    e7b0:	01800044 	movi	r6,1
    e7b4:	000b883a 	mov	r5,zero
    e7b8:	d811883a 	mov	r8,sp
    e7bc:	3c3ff316 	blt	r7,r16,e78c <__alt_mem_Flash_flash_data+0xf400e78c>
    e7c0:	da402517 	ldw	r9,148(sp)
    e7c4:	b007883a 	mov	r3,r22
    e7c8:	802d883a 	mov	r22,r16
    e7cc:	1821883a 	mov	r16,r3
    e7d0:	d8c02417 	ldw	r3,144(sp)
    e7d4:	1585883a 	add	r2,r2,r22
    e7d8:	45800115 	stw	r22,4(r8)
    e7dc:	40c00015 	stw	r3,0(r8)
    e7e0:	d8801c15 	stw	r2,112(sp)
    e7e4:	d9801b15 	stw	r6,108(sp)
    e7e8:	00c001c4 	movi	r3,7
    e7ec:	19806d16 	blt	r3,r6,e9a4 <___vfiprintf_internal_r+0xf80>
    e7f0:	42000204 	addi	r8,r8,8
    e7f4:	31000044 	addi	r4,r6,1
    e7f8:	300b883a 	mov	r5,r6
    e7fc:	003dd006 	br	df40 <__alt_mem_Flash_flash_data+0xf400df40>
    e800:	d9002017 	ldw	r4,128(sp)
    e804:	d9402117 	ldw	r5,132(sp)
    e808:	d9801a04 	addi	r6,sp,104
    e80c:	d9c02b15 	stw	r7,172(sp)
    e810:	db402a15 	stw	r13,168(sp)
    e814:	000d9100 	call	d910 <__sprint_r.part.0>
    e818:	d9c02b17 	ldw	r7,172(sp)
    e81c:	db402a17 	ldw	r13,168(sp)
    e820:	103faa1e 	bne	r2,zero,e6cc <__alt_mem_Flash_flash_data+0xf400e6cc>
    e824:	d9401b17 	ldw	r5,108(sp)
    e828:	d8801c17 	ldw	r2,112(sp)
    e82c:	d811883a 	mov	r8,sp
    e830:	29800044 	addi	r6,r5,1
    e834:	003fd306 	br	e784 <__alt_mem_Flash_flash_data+0xf400e784>
    e838:	1000401e 	bne	r2,zero,e93c <___vfiprintf_internal_r+0xf18>
    e83c:	68003b26 	beq	r13,zero,e92c <___vfiprintf_internal_r+0xf08>
    e840:	d9001d04 	addi	r4,sp,116
    e844:	00800084 	movi	r2,2
    e848:	d9000015 	stw	r4,0(sp)
    e84c:	d8800115 	stw	r2,4(sp)
    e850:	1809883a 	mov	r4,r3
    e854:	d811883a 	mov	r8,sp
    e858:	003db406 	br	df2c <__alt_mem_Flash_flash_data+0xf400df2c>
    e85c:	1000451e 	bne	r2,zero,e974 <___vfiprintf_internal_r+0xf50>
    e860:	01000044 	movi	r4,1
    e864:	000b883a 	mov	r5,zero
    e868:	d811883a 	mov	r8,sp
    e86c:	003db206 	br	df38 <__alt_mem_Flash_flash_data+0xf400df38>
    e870:	10803fcc 	andi	r2,r2,255
    e874:	1000071e 	bne	r2,zero,e894 <___vfiprintf_internal_r+0xe70>
    e878:	a880004c 	andi	r2,r21,1
    e87c:	10000526 	beq	r2,zero,e894 <___vfiprintf_internal_r+0xe70>
    e880:	00800c04 	movi	r2,48
    e884:	d88019c5 	stb	r2,103(sp)
    e888:	dcc02717 	ldw	r19,156(sp)
    e88c:	dd0019c4 	addi	r20,sp,103
    e890:	003d5e06 	br	de0c <__alt_mem_Flash_flash_data+0xf400de0c>
    e894:	dd001a04 	addi	r20,sp,104
    e898:	003d5c06 	br	de0c <__alt_mem_Flash_flash_data+0xf400de0c>
    e89c:	1000971e 	bne	r2,zero,eafc <___vfiprintf_internal_r+0x10d8>
    e8a0:	d8c01d87 	ldb	r3,118(sp)
    e8a4:	18005826 	beq	r3,zero,ea08 <___vfiprintf_internal_r+0xfe4>
    e8a8:	00800044 	movi	r2,1
    e8ac:	d8c01d84 	addi	r3,sp,118
    e8b0:	1009883a 	mov	r4,r2
    e8b4:	d8c00015 	stw	r3,0(sp)
    e8b8:	d8800115 	stw	r2,4(sp)
    e8bc:	d811883a 	mov	r8,sp
    e8c0:	003f3206 	br	e58c <__alt_mem_Flash_flash_data+0xf400e58c>
    e8c4:	8023883a 	mov	r17,r16
    e8c8:	003ca706 	br	db68 <__alt_mem_Flash_flash_data+0xf400db68>
    e8cc:	d9002017 	ldw	r4,128(sp)
    e8d0:	d9402117 	ldw	r5,132(sp)
    e8d4:	d9801a04 	addi	r6,sp,104
    e8d8:	000d9100 	call	d910 <__sprint_r.part.0>
    e8dc:	103f7b1e 	bne	r2,zero,e6cc <__alt_mem_Flash_flash_data+0xf400e6cc>
    e8e0:	d8801c17 	ldw	r2,112(sp)
    e8e4:	d811883a 	mov	r8,sp
    e8e8:	003f9106 	br	e730 <__alt_mem_Flash_flash_data+0xf400e730>
    e8ec:	00800084 	movi	r2,2
    e8f0:	b348b03a 	or	r4,r22,r13
    e8f4:	003d2906 	br	dd9c <__alt_mem_Flash_flash_data+0xf400dd9c>
    e8f8:	d8802217 	ldw	r2,136(sp)
    e8fc:	001b883a 	mov	r13,zero
    e900:	15800017 	ldw	r22,0(r2)
    e904:	10800104 	addi	r2,r2,4
    e908:	d8802215 	stw	r2,136(sp)
    e90c:	003ea706 	br	e3ac <__alt_mem_Flash_flash_data+0xf400e3ac>
    e910:	d9002017 	ldw	r4,128(sp)
    e914:	d9402117 	ldw	r5,132(sp)
    e918:	d9801a04 	addi	r6,sp,104
    e91c:	000d9100 	call	d910 <__sprint_r.part.0>
    e920:	103f6a1e 	bne	r2,zero,e6cc <__alt_mem_Flash_flash_data+0xf400e6cc>
    e924:	d811883a 	mov	r8,sp
    e928:	003cff06 	br	dd28 <__alt_mem_Flash_flash_data+0xf400dd28>
    e92c:	000b883a 	mov	r5,zero
    e930:	1809883a 	mov	r4,r3
    e934:	d811883a 	mov	r8,sp
    e938:	003d7f06 	br	df38 <__alt_mem_Flash_flash_data+0xf400df38>
    e93c:	d9002017 	ldw	r4,128(sp)
    e940:	d9402117 	ldw	r5,132(sp)
    e944:	d9801a04 	addi	r6,sp,104
    e948:	da402b15 	stw	r9,172(sp)
    e94c:	db402a15 	stw	r13,168(sp)
    e950:	000d9100 	call	d910 <__sprint_r.part.0>
    e954:	da402b17 	ldw	r9,172(sp)
    e958:	db402a17 	ldw	r13,168(sp)
    e95c:	103f5b1e 	bne	r2,zero,e6cc <__alt_mem_Flash_flash_data+0xf400e6cc>
    e960:	d9401b17 	ldw	r5,108(sp)
    e964:	d8801c17 	ldw	r2,112(sp)
    e968:	d811883a 	mov	r8,sp
    e96c:	29000044 	addi	r4,r5,1
    e970:	003d6406 	br	df04 <__alt_mem_Flash_flash_data+0xf400df04>
    e974:	d9002017 	ldw	r4,128(sp)
    e978:	d9402117 	ldw	r5,132(sp)
    e97c:	d9801a04 	addi	r6,sp,104
    e980:	da402b15 	stw	r9,172(sp)
    e984:	000d9100 	call	d910 <__sprint_r.part.0>
    e988:	da402b17 	ldw	r9,172(sp)
    e98c:	103f4f1e 	bne	r2,zero,e6cc <__alt_mem_Flash_flash_data+0xf400e6cc>
    e990:	d9401b17 	ldw	r5,108(sp)
    e994:	d8801c17 	ldw	r2,112(sp)
    e998:	d811883a 	mov	r8,sp
    e99c:	29000044 	addi	r4,r5,1
    e9a0:	003d6506 	br	df38 <__alt_mem_Flash_flash_data+0xf400df38>
    e9a4:	10009a1e 	bne	r2,zero,ec10 <___vfiprintf_internal_r+0x11ec>
    e9a8:	01000044 	movi	r4,1
    e9ac:	000b883a 	mov	r5,zero
    e9b0:	d811883a 	mov	r8,sp
    e9b4:	003d6206 	br	df40 <__alt_mem_Flash_flash_data+0xf400df40>
    e9b8:	d9002017 	ldw	r4,128(sp)
    e9bc:	d9402117 	ldw	r5,132(sp)
    e9c0:	d9801a04 	addi	r6,sp,104
    e9c4:	000d9100 	call	d910 <__sprint_r.part.0>
    e9c8:	103f401e 	bne	r2,zero,e6cc <__alt_mem_Flash_flash_data+0xf400e6cc>
    e9cc:	d9001b17 	ldw	r4,108(sp)
    e9d0:	d8801c17 	ldw	r2,112(sp)
    e9d4:	d811883a 	mov	r8,sp
    e9d8:	21000044 	addi	r4,r4,1
    e9dc:	003d7d06 	br	dfd4 <__alt_mem_Flash_flash_data+0xf400dfd4>
    e9e0:	05adc83a 	sub	r22,zero,r22
    e9e4:	b004c03a 	cmpne	r2,r22,zero
    e9e8:	035bc83a 	sub	r13,zero,r13
    e9ec:	689bc83a 	sub	r13,r13,r2
    e9f0:	03800b44 	movi	r14,45
    e9f4:	db801d85 	stb	r14,118(sp)
    e9f8:	4827883a 	mov	r19,r9
    e9fc:	00800044 	movi	r2,1
    ea00:	b348b03a 	or	r4,r22,r13
    ea04:	003ce806 	br	dda8 <__alt_mem_Flash_flash_data+0xf400dda8>
    ea08:	000b883a 	mov	r5,zero
    ea0c:	01000044 	movi	r4,1
    ea10:	d811883a 	mov	r8,sp
    ea14:	683d4826 	beq	r13,zero,df38 <__alt_mem_Flash_flash_data+0xf400df38>
    ea18:	00800084 	movi	r2,2
    ea1c:	d8c01d04 	addi	r3,sp,116
    ea20:	d8c00015 	stw	r3,0(sp)
    ea24:	d8800115 	stw	r2,4(sp)
    ea28:	003d4006 	br	df2c <__alt_mem_Flash_flash_data+0xf400df2c>
    ea2c:	00800084 	movi	r2,2
    ea30:	003cda06 	br	dd9c <__alt_mem_Flash_flash_data+0xf400dd9c>
    ea34:	a880100c 	andi	r2,r21,64
    ea38:	10004226 	beq	r2,zero,eb44 <___vfiprintf_internal_r+0x1120>
    ea3c:	d8802217 	ldw	r2,136(sp)
    ea40:	001b883a 	mov	r13,zero
    ea44:	1580000b 	ldhu	r22,0(r2)
    ea48:	10800104 	addi	r2,r2,4
    ea4c:	d8802215 	stw	r2,136(sp)
    ea50:	b009883a 	mov	r4,r22
    ea54:	0005883a 	mov	r2,zero
    ea58:	003cd006 	br	dd9c <__alt_mem_Flash_flash_data+0xf400dd9c>
    ea5c:	80c00007 	ldb	r3,0(r16)
    ea60:	8005883a 	mov	r2,r16
    ea64:	003c4d06 	br	db9c <__alt_mem_Flash_flash_data+0xf400db9c>
    ea68:	a880100c 	andi	r2,r21,64
    ea6c:	10004426 	beq	r2,zero,eb80 <___vfiprintf_internal_r+0x115c>
    ea70:	d8c02217 	ldw	r3,136(sp)
    ea74:	001b883a 	mov	r13,zero
    ea78:	00800044 	movi	r2,1
    ea7c:	1d80000b 	ldhu	r22,0(r3)
    ea80:	18c00104 	addi	r3,r3,4
    ea84:	d8c02215 	stw	r3,136(sp)
    ea88:	b009883a 	mov	r4,r22
    ea8c:	003cc306 	br	dd9c <__alt_mem_Flash_flash_data+0xf400dd9c>
    ea90:	a880040c 	andi	r2,r21,16
    ea94:	1000091e 	bne	r2,zero,eabc <___vfiprintf_internal_r+0x1098>
    ea98:	aac0100c 	andi	r11,r21,64
    ea9c:	58000726 	beq	r11,zero,eabc <___vfiprintf_internal_r+0x1098>
    eaa0:	d8c02217 	ldw	r3,136(sp)
    eaa4:	d9002317 	ldw	r4,140(sp)
    eaa8:	18800017 	ldw	r2,0(r3)
    eaac:	18c00104 	addi	r3,r3,4
    eab0:	d8c02215 	stw	r3,136(sp)
    eab4:	1100000d 	sth	r4,0(r2)
    eab8:	003c0e06 	br	daf4 <__alt_mem_Flash_flash_data+0xf400daf4>
    eabc:	d8c02217 	ldw	r3,136(sp)
    eac0:	d9002317 	ldw	r4,140(sp)
    eac4:	18800017 	ldw	r2,0(r3)
    eac8:	18c00104 	addi	r3,r3,4
    eacc:	d8c02215 	stw	r3,136(sp)
    ead0:	11000015 	stw	r4,0(r2)
    ead4:	003c0706 	br	daf4 <__alt_mem_Flash_flash_data+0xf400daf4>
    ead8:	a880100c 	andi	r2,r21,64
    eadc:	10002126 	beq	r2,zero,eb64 <___vfiprintf_internal_r+0x1140>
    eae0:	1d80000f 	ldh	r22,0(r3)
    eae4:	d8c02217 	ldw	r3,136(sp)
    eae8:	b01bd7fa 	srai	r13,r22,31
    eaec:	18c00104 	addi	r3,r3,4
    eaf0:	d8c02215 	stw	r3,136(sp)
    eaf4:	6805883a 	mov	r2,r13
    eaf8:	003dc406 	br	e20c <__alt_mem_Flash_flash_data+0xf400e20c>
    eafc:	d9002017 	ldw	r4,128(sp)
    eb00:	d9402117 	ldw	r5,132(sp)
    eb04:	d9801a04 	addi	r6,sp,104
    eb08:	da402b15 	stw	r9,172(sp)
    eb0c:	db402a15 	stw	r13,168(sp)
    eb10:	000d9100 	call	d910 <__sprint_r.part.0>
    eb14:	da402b17 	ldw	r9,172(sp)
    eb18:	db402a17 	ldw	r13,168(sp)
    eb1c:	103eeb1e 	bne	r2,zero,e6cc <__alt_mem_Flash_flash_data+0xf400e6cc>
    eb20:	d9401b17 	ldw	r5,108(sp)
    eb24:	d8801c17 	ldw	r2,112(sp)
    eb28:	d811883a 	mov	r8,sp
    eb2c:	29000044 	addi	r4,r5,1
    eb30:	003e8b06 	br	e560 <__alt_mem_Flash_flash_data+0xf400e560>
    eb34:	9023883a 	mov	r17,r18
    eb38:	003d5a06 	br	e0a4 <__alt_mem_Flash_flash_data+0xf400e0a4>
    eb3c:	4827883a 	mov	r19,r9
    eb40:	003e3506 	br	e418 <__alt_mem_Flash_flash_data+0xf400e418>
    eb44:	d8c02217 	ldw	r3,136(sp)
    eb48:	001b883a 	mov	r13,zero
    eb4c:	0005883a 	mov	r2,zero
    eb50:	1d800017 	ldw	r22,0(r3)
    eb54:	18c00104 	addi	r3,r3,4
    eb58:	d8c02215 	stw	r3,136(sp)
    eb5c:	b009883a 	mov	r4,r22
    eb60:	003c8e06 	br	dd9c <__alt_mem_Flash_flash_data+0xf400dd9c>
    eb64:	1d800017 	ldw	r22,0(r3)
    eb68:	d9002217 	ldw	r4,136(sp)
    eb6c:	b01bd7fa 	srai	r13,r22,31
    eb70:	21000104 	addi	r4,r4,4
    eb74:	d9002215 	stw	r4,136(sp)
    eb78:	6805883a 	mov	r2,r13
    eb7c:	003da306 	br	e20c <__alt_mem_Flash_flash_data+0xf400e20c>
    eb80:	d9002217 	ldw	r4,136(sp)
    eb84:	001b883a 	mov	r13,zero
    eb88:	00800044 	movi	r2,1
    eb8c:	25800017 	ldw	r22,0(r4)
    eb90:	21000104 	addi	r4,r4,4
    eb94:	d9002215 	stw	r4,136(sp)
    eb98:	b009883a 	mov	r4,r22
    eb9c:	003c7f06 	br	dd9c <__alt_mem_Flash_flash_data+0xf400dd9c>
    eba0:	00c000b4 	movhi	r3,2
    eba4:	18c0fa04 	addi	r3,r3,1000
    eba8:	d8c02415 	stw	r3,144(sp)
    ebac:	003cff06 	br	dfac <__alt_mem_Flash_flash_data+0xf400dfac>
    ebb0:	d8801c17 	ldw	r2,112(sp)
    ebb4:	dd402117 	ldw	r21,132(sp)
    ebb8:	103ec526 	beq	r2,zero,e6d0 <__alt_mem_Flash_flash_data+0xf400e6d0>
    ebbc:	d9002017 	ldw	r4,128(sp)
    ebc0:	a80b883a 	mov	r5,r21
    ebc4:	d9801a04 	addi	r6,sp,104
    ebc8:	000d9100 	call	d910 <__sprint_r.part.0>
    ebcc:	003ec006 	br	e6d0 <__alt_mem_Flash_flash_data+0xf400e6d0>
    ebd0:	80800044 	addi	r2,r16,1
    ebd4:	ad400814 	ori	r21,r21,32
    ebd8:	80c00047 	ldb	r3,1(r16)
    ebdc:	003bef06 	br	db9c <__alt_mem_Flash_flash_data+0xf400db9c>
    ebe0:	04a5c83a 	sub	r18,zero,r18
    ebe4:	8005883a 	mov	r2,r16
    ebe8:	d8c02215 	stw	r3,136(sp)
    ebec:	003d5306 	br	e13c <__alt_mem_Flash_flash_data+0xf400e13c>
    ebf0:	da002a15 	stw	r8,168(sp)
    ebf4:	00035180 	call	3518 <strlen>
    ebf8:	1027883a 	mov	r19,r2
    ebfc:	db801d83 	ldbu	r14,118(sp)
    ec00:	dd802215 	stw	r22,136(sp)
    ec04:	0013883a 	mov	r9,zero
    ec08:	da002a17 	ldw	r8,168(sp)
    ec0c:	003c7f06 	br	de0c <__alt_mem_Flash_flash_data+0xf400de0c>
    ec10:	d9002017 	ldw	r4,128(sp)
    ec14:	d9402117 	ldw	r5,132(sp)
    ec18:	d9801a04 	addi	r6,sp,104
    ec1c:	da402b15 	stw	r9,172(sp)
    ec20:	000d9100 	call	d910 <__sprint_r.part.0>
    ec24:	da402b17 	ldw	r9,172(sp)
    ec28:	103ea81e 	bne	r2,zero,e6cc <__alt_mem_Flash_flash_data+0xf400e6cc>
    ec2c:	d9401b17 	ldw	r5,108(sp)
    ec30:	d8801c17 	ldw	r2,112(sp)
    ec34:	d811883a 	mov	r8,sp
    ec38:	29000044 	addi	r4,r5,1
    ec3c:	003cc006 	br	df40 <__alt_mem_Flash_flash_data+0xf400df40>
    ec40:	d9401b17 	ldw	r5,108(sp)
    ec44:	010000b4 	movhi	r4,2
    ec48:	2100fe04 	addi	r4,r4,1016
    ec4c:	d9002415 	stw	r4,144(sp)
    ec50:	29400044 	addi	r5,r5,1
    ec54:	003c9f06 	br	ded4 <__alt_mem_Flash_flash_data+0xf400ded4>
    ec58:	00800184 	movi	r2,6
    ec5c:	1240012e 	bgeu	r2,r9,ec64 <___vfiprintf_internal_r+0x1240>
    ec60:	1013883a 	mov	r9,r2
    ec64:	4827883a 	mov	r19,r9
    ec68:	4823883a 	mov	r17,r9
    ec6c:	48001116 	blt	r9,zero,ecb4 <___vfiprintf_internal_r+0x1290>
    ec70:	050000b4 	movhi	r20,2
    ec74:	dd802215 	stw	r22,136(sp)
    ec78:	a5008e04 	addi	r20,r20,568
    ec7c:	003db106 	br	e344 <__alt_mem_Flash_flash_data+0xf400e344>
    ec80:	d9401b17 	ldw	r5,108(sp)
    ec84:	010000b4 	movhi	r4,2
    ec88:	2100fe04 	addi	r4,r4,1016
    ec8c:	d9002415 	stw	r4,144(sp)
    ec90:	29400044 	addi	r5,r5,1
    ec94:	003cf906 	br	e07c <__alt_mem_Flash_flash_data+0xf400e07c>
    ec98:	4827883a 	mov	r19,r9
    ec9c:	db801d83 	ldbu	r14,118(sp)
    eca0:	dd802215 	stw	r22,136(sp)
    eca4:	0013883a 	mov	r9,zero
    eca8:	003c5806 	br	de0c <__alt_mem_Flash_flash_data+0xf400de0c>
    ecac:	200d883a 	mov	r6,r4
    ecb0:	003ec706 	br	e7d0 <__alt_mem_Flash_flash_data+0xf400e7d0>
    ecb4:	0023883a 	mov	r17,zero
    ecb8:	003fed06 	br	ec70 <__alt_mem_Flash_flash_data+0xf400ec70>
    ecbc:	d9002217 	ldw	r4,136(sp)
    ecc0:	22400017 	ldw	r9,0(r4)
    ecc4:	20c00104 	addi	r3,r4,4
    ecc8:	d8c02215 	stw	r3,136(sp)
    eccc:	483fc20e 	bge	r9,zero,ebd8 <__alt_mem_Flash_flash_data+0xf400ebd8>
    ecd0:	027fffc4 	movi	r9,-1
    ecd4:	80c00047 	ldb	r3,1(r16)
    ecd8:	003bb006 	br	db9c <__alt_mem_Flash_flash_data+0xf400db9c>
    ecdc:	8c80010e 	bge	r17,r18,ece4 <___vfiprintf_internal_r+0x12c0>
    ece0:	9023883a 	mov	r17,r18
    ece4:	d8802317 	ldw	r2,140(sp)
    ece8:	1445883a 	add	r2,r2,r17
    ecec:	d8802315 	stw	r2,140(sp)
    ecf0:	003cef06 	br	e0b0 <__alt_mem_Flash_flash_data+0xf400e0b0>

0000ecf4 <__vfiprintf_internal>:
    ecf4:	2007883a 	mov	r3,r4
    ecf8:	010000b4 	movhi	r4,2
    ecfc:	21099a04 	addi	r4,r4,9832
    ed00:	21000017 	ldw	r4,0(r4)
    ed04:	2805883a 	mov	r2,r5
    ed08:	300f883a 	mov	r7,r6
    ed0c:	180b883a 	mov	r5,r3
    ed10:	100d883a 	mov	r6,r2
    ed14:	000da241 	jmpi	da24 <___vfiprintf_internal_r>

0000ed18 <__sbprintf>:
    ed18:	2880030b 	ldhu	r2,12(r5)
    ed1c:	2ac01917 	ldw	r11,100(r5)
    ed20:	2a80038b 	ldhu	r10,14(r5)
    ed24:	2a400717 	ldw	r9,28(r5)
    ed28:	2a000917 	ldw	r8,36(r5)
    ed2c:	defee204 	addi	sp,sp,-1144
    ed30:	00c10004 	movi	r3,1024
    ed34:	dc011a15 	stw	r16,1128(sp)
    ed38:	10bfff4c 	andi	r2,r2,65533
    ed3c:	2821883a 	mov	r16,r5
    ed40:	d8cb883a 	add	r5,sp,r3
    ed44:	dc811c15 	stw	r18,1136(sp)
    ed48:	dc411b15 	stw	r17,1132(sp)
    ed4c:	dfc11d15 	stw	ra,1140(sp)
    ed50:	2025883a 	mov	r18,r4
    ed54:	d881030d 	sth	r2,1036(sp)
    ed58:	dac11915 	stw	r11,1124(sp)
    ed5c:	da81038d 	sth	r10,1038(sp)
    ed60:	da410715 	stw	r9,1052(sp)
    ed64:	da010915 	stw	r8,1060(sp)
    ed68:	dec10015 	stw	sp,1024(sp)
    ed6c:	dec10415 	stw	sp,1040(sp)
    ed70:	d8c10215 	stw	r3,1032(sp)
    ed74:	d8c10515 	stw	r3,1044(sp)
    ed78:	d8010615 	stw	zero,1048(sp)
    ed7c:	000da240 	call	da24 <___vfiprintf_internal_r>
    ed80:	1023883a 	mov	r17,r2
    ed84:	10000416 	blt	r2,zero,ed98 <__sbprintf+0x80>
    ed88:	9009883a 	mov	r4,r18
    ed8c:	d9410004 	addi	r5,sp,1024
    ed90:	00091f40 	call	91f4 <_fflush_r>
    ed94:	10000d1e 	bne	r2,zero,edcc <__sbprintf+0xb4>
    ed98:	d8c1030b 	ldhu	r3,1036(sp)
    ed9c:	18c0100c 	andi	r3,r3,64
    eda0:	18000326 	beq	r3,zero,edb0 <__sbprintf+0x98>
    eda4:	8080030b 	ldhu	r2,12(r16)
    eda8:	10801014 	ori	r2,r2,64
    edac:	8080030d 	sth	r2,12(r16)
    edb0:	8805883a 	mov	r2,r17
    edb4:	dfc11d17 	ldw	ra,1140(sp)
    edb8:	dc811c17 	ldw	r18,1136(sp)
    edbc:	dc411b17 	ldw	r17,1132(sp)
    edc0:	dc011a17 	ldw	r16,1128(sp)
    edc4:	dec11e04 	addi	sp,sp,1144
    edc8:	f800283a 	ret
    edcc:	047fffc4 	movi	r17,-1
    edd0:	003ff106 	br	ed98 <__alt_mem_Flash_flash_data+0xf400ed98>

0000edd4 <_write_r>:
    edd4:	defffd04 	addi	sp,sp,-12
    edd8:	dc000015 	stw	r16,0(sp)
    eddc:	040000b4 	movhi	r16,2
    ede0:	dc400115 	stw	r17,4(sp)
    ede4:	8411b604 	addi	r16,r16,18136
    ede8:	2023883a 	mov	r17,r4
    edec:	2809883a 	mov	r4,r5
    edf0:	300b883a 	mov	r5,r6
    edf4:	380d883a 	mov	r6,r7
    edf8:	dfc00215 	stw	ra,8(sp)
    edfc:	80000015 	stw	zero,0(r16)
    ee00:	00132100 	call	13210 <write>
    ee04:	00ffffc4 	movi	r3,-1
    ee08:	10c00526 	beq	r2,r3,ee20 <_write_r+0x4c>
    ee0c:	dfc00217 	ldw	ra,8(sp)
    ee10:	dc400117 	ldw	r17,4(sp)
    ee14:	dc000017 	ldw	r16,0(sp)
    ee18:	dec00304 	addi	sp,sp,12
    ee1c:	f800283a 	ret
    ee20:	80c00017 	ldw	r3,0(r16)
    ee24:	183ff926 	beq	r3,zero,ee0c <__alt_mem_Flash_flash_data+0xf400ee0c>
    ee28:	88c00015 	stw	r3,0(r17)
    ee2c:	003ff706 	br	ee0c <__alt_mem_Flash_flash_data+0xf400ee0c>

0000ee30 <_close_r>:
    ee30:	defffd04 	addi	sp,sp,-12
    ee34:	dc000015 	stw	r16,0(sp)
    ee38:	040000b4 	movhi	r16,2
    ee3c:	dc400115 	stw	r17,4(sp)
    ee40:	8411b604 	addi	r16,r16,18136
    ee44:	2023883a 	mov	r17,r4
    ee48:	2809883a 	mov	r4,r5
    ee4c:	dfc00215 	stw	ra,8(sp)
    ee50:	80000015 	stw	zero,0(r16)
    ee54:	00129980 	call	12998 <close>
    ee58:	00ffffc4 	movi	r3,-1
    ee5c:	10c00526 	beq	r2,r3,ee74 <_close_r+0x44>
    ee60:	dfc00217 	ldw	ra,8(sp)
    ee64:	dc400117 	ldw	r17,4(sp)
    ee68:	dc000017 	ldw	r16,0(sp)
    ee6c:	dec00304 	addi	sp,sp,12
    ee70:	f800283a 	ret
    ee74:	80c00017 	ldw	r3,0(r16)
    ee78:	183ff926 	beq	r3,zero,ee60 <__alt_mem_Flash_flash_data+0xf400ee60>
    ee7c:	88c00015 	stw	r3,0(r17)
    ee80:	003ff706 	br	ee60 <__alt_mem_Flash_flash_data+0xf400ee60>

0000ee84 <_calloc_r>:
    ee84:	298b383a 	mul	r5,r5,r6
    ee88:	defffe04 	addi	sp,sp,-8
    ee8c:	dc000015 	stw	r16,0(sp)
    ee90:	dfc00115 	stw	ra,4(sp)
    ee94:	000a3140 	call	a314 <_malloc_r>
    ee98:	1021883a 	mov	r16,r2
    ee9c:	10002826 	beq	r2,zero,ef40 <_calloc_r+0xbc>
    eea0:	11bfff17 	ldw	r6,-4(r2)
    eea4:	00bfff04 	movi	r2,-4
    eea8:	00c00904 	movi	r3,36
    eeac:	308c703a 	and	r6,r6,r2
    eeb0:	308d883a 	add	r6,r6,r2
    eeb4:	19801436 	bltu	r3,r6,ef08 <_calloc_r+0x84>
    eeb8:	008004c4 	movi	r2,19
    eebc:	11800936 	bltu	r2,r6,eee4 <_calloc_r+0x60>
    eec0:	8005883a 	mov	r2,r16
    eec4:	10000015 	stw	zero,0(r2)
    eec8:	10000115 	stw	zero,4(r2)
    eecc:	10000215 	stw	zero,8(r2)
    eed0:	8005883a 	mov	r2,r16
    eed4:	dfc00117 	ldw	ra,4(sp)
    eed8:	dc000017 	ldw	r16,0(sp)
    eedc:	dec00204 	addi	sp,sp,8
    eee0:	f800283a 	ret
    eee4:	80000015 	stw	zero,0(r16)
    eee8:	80000115 	stw	zero,4(r16)
    eeec:	008006c4 	movi	r2,27
    eef0:	11800d2e 	bgeu	r2,r6,ef28 <_calloc_r+0xa4>
    eef4:	80000215 	stw	zero,8(r16)
    eef8:	80000315 	stw	zero,12(r16)
    eefc:	30c00c26 	beq	r6,r3,ef30 <_calloc_r+0xac>
    ef00:	80800404 	addi	r2,r16,16
    ef04:	003fef06 	br	eec4 <__alt_mem_Flash_flash_data+0xf400eec4>
    ef08:	8009883a 	mov	r4,r16
    ef0c:	000b883a 	mov	r5,zero
    ef10:	000ae380 	call	ae38 <memset>
    ef14:	8005883a 	mov	r2,r16
    ef18:	dfc00117 	ldw	ra,4(sp)
    ef1c:	dc000017 	ldw	r16,0(sp)
    ef20:	dec00204 	addi	sp,sp,8
    ef24:	f800283a 	ret
    ef28:	80800204 	addi	r2,r16,8
    ef2c:	003fe506 	br	eec4 <__alt_mem_Flash_flash_data+0xf400eec4>
    ef30:	80000415 	stw	zero,16(r16)
    ef34:	80800604 	addi	r2,r16,24
    ef38:	80000515 	stw	zero,20(r16)
    ef3c:	003fe106 	br	eec4 <__alt_mem_Flash_flash_data+0xf400eec4>
    ef40:	0005883a 	mov	r2,zero
    ef44:	003fe306 	br	eed4 <__alt_mem_Flash_flash_data+0xf400eed4>

0000ef48 <_fclose_r>:
    ef48:	28003926 	beq	r5,zero,f030 <_fclose_r+0xe8>
    ef4c:	defffc04 	addi	sp,sp,-16
    ef50:	dc400115 	stw	r17,4(sp)
    ef54:	dc000015 	stw	r16,0(sp)
    ef58:	dfc00315 	stw	ra,12(sp)
    ef5c:	dc800215 	stw	r18,8(sp)
    ef60:	2023883a 	mov	r17,r4
    ef64:	2821883a 	mov	r16,r5
    ef68:	20000226 	beq	r4,zero,ef74 <_fclose_r+0x2c>
    ef6c:	20800e17 	ldw	r2,56(r4)
    ef70:	10002726 	beq	r2,zero,f010 <_fclose_r+0xc8>
    ef74:	8080030f 	ldh	r2,12(r16)
    ef78:	1000071e 	bne	r2,zero,ef98 <_fclose_r+0x50>
    ef7c:	0005883a 	mov	r2,zero
    ef80:	dfc00317 	ldw	ra,12(sp)
    ef84:	dc800217 	ldw	r18,8(sp)
    ef88:	dc400117 	ldw	r17,4(sp)
    ef8c:	dc000017 	ldw	r16,0(sp)
    ef90:	dec00404 	addi	sp,sp,16
    ef94:	f800283a 	ret
    ef98:	8809883a 	mov	r4,r17
    ef9c:	800b883a 	mov	r5,r16
    efa0:	0008fec0 	call	8fec <__sflush_r>
    efa4:	1025883a 	mov	r18,r2
    efa8:	80800b17 	ldw	r2,44(r16)
    efac:	10000426 	beq	r2,zero,efc0 <_fclose_r+0x78>
    efb0:	81400717 	ldw	r5,28(r16)
    efb4:	8809883a 	mov	r4,r17
    efb8:	103ee83a 	callr	r2
    efbc:	10001616 	blt	r2,zero,f018 <_fclose_r+0xd0>
    efc0:	8080030b 	ldhu	r2,12(r16)
    efc4:	1080200c 	andi	r2,r2,128
    efc8:	1000151e 	bne	r2,zero,f020 <_fclose_r+0xd8>
    efcc:	81400c17 	ldw	r5,48(r16)
    efd0:	28000526 	beq	r5,zero,efe8 <_fclose_r+0xa0>
    efd4:	80801004 	addi	r2,r16,64
    efd8:	28800226 	beq	r5,r2,efe4 <_fclose_r+0x9c>
    efdc:	8809883a 	mov	r4,r17
    efe0:	00097440 	call	9744 <_free_r>
    efe4:	80000c15 	stw	zero,48(r16)
    efe8:	81401117 	ldw	r5,68(r16)
    efec:	28000326 	beq	r5,zero,effc <_fclose_r+0xb4>
    eff0:	8809883a 	mov	r4,r17
    eff4:	00097440 	call	9744 <_free_r>
    eff8:	80001115 	stw	zero,68(r16)
    effc:	00095e00 	call	95e0 <__sfp_lock_acquire>
    f000:	8000030d 	sth	zero,12(r16)
    f004:	00095e40 	call	95e4 <__sfp_lock_release>
    f008:	9005883a 	mov	r2,r18
    f00c:	003fdc06 	br	ef80 <__alt_mem_Flash_flash_data+0xf400ef80>
    f010:	00095d00 	call	95d0 <__sinit>
    f014:	003fd706 	br	ef74 <__alt_mem_Flash_flash_data+0xf400ef74>
    f018:	04bfffc4 	movi	r18,-1
    f01c:	003fe806 	br	efc0 <__alt_mem_Flash_flash_data+0xf400efc0>
    f020:	81400417 	ldw	r5,16(r16)
    f024:	8809883a 	mov	r4,r17
    f028:	00097440 	call	9744 <_free_r>
    f02c:	003fe706 	br	efcc <__alt_mem_Flash_flash_data+0xf400efcc>
    f030:	0005883a 	mov	r2,zero
    f034:	f800283a 	ret

0000f038 <fclose>:
    f038:	008000b4 	movhi	r2,2
    f03c:	10899a04 	addi	r2,r2,9832
    f040:	200b883a 	mov	r5,r4
    f044:	11000017 	ldw	r4,0(r2)
    f048:	000ef481 	jmpi	ef48 <_fclose_r>

0000f04c <_fputwc_r>:
    f04c:	3080030b 	ldhu	r2,12(r6)
    f050:	defff804 	addi	sp,sp,-32
    f054:	dcc00415 	stw	r19,16(sp)
    f058:	dc800315 	stw	r18,12(sp)
    f05c:	dc000115 	stw	r16,4(sp)
    f060:	dfc00715 	stw	ra,28(sp)
    f064:	dd400615 	stw	r21,24(sp)
    f068:	dd000515 	stw	r20,20(sp)
    f06c:	dc400215 	stw	r17,8(sp)
    f070:	10c8000c 	andi	r3,r2,8192
    f074:	3021883a 	mov	r16,r6
    f078:	2027883a 	mov	r19,r4
    f07c:	2825883a 	mov	r18,r5
    f080:	1800051e 	bne	r3,zero,f098 <_fputwc_r+0x4c>
    f084:	30c01917 	ldw	r3,100(r6)
    f088:	10880014 	ori	r2,r2,8192
    f08c:	3080030d 	sth	r2,12(r6)
    f090:	18880014 	ori	r2,r3,8192
    f094:	30801915 	stw	r2,100(r6)
    f098:	000a1040 	call	a104 <__locale_mb_cur_max>
    f09c:	00c00044 	movi	r3,1
    f0a0:	10c03e26 	beq	r2,r3,f19c <_fputwc_r+0x150>
    f0a4:	9809883a 	mov	r4,r19
    f0a8:	d80b883a 	mov	r5,sp
    f0ac:	900d883a 	mov	r6,r18
    f0b0:	81c01704 	addi	r7,r16,92
    f0b4:	000f4e40 	call	f4e4 <_wcrtomb_r>
    f0b8:	1029883a 	mov	r20,r2
    f0bc:	00bfffc4 	movi	r2,-1
    f0c0:	a0802026 	beq	r20,r2,f144 <_fputwc_r+0xf8>
    f0c4:	d9400003 	ldbu	r5,0(sp)
    f0c8:	a0001c26 	beq	r20,zero,f13c <_fputwc_r+0xf0>
    f0cc:	0023883a 	mov	r17,zero
    f0d0:	05400284 	movi	r21,10
    f0d4:	00000906 	br	f0fc <_fputwc_r+0xb0>
    f0d8:	80800017 	ldw	r2,0(r16)
    f0dc:	11400005 	stb	r5,0(r2)
    f0e0:	80c00017 	ldw	r3,0(r16)
    f0e4:	18c00044 	addi	r3,r3,1
    f0e8:	80c00015 	stw	r3,0(r16)
    f0ec:	8c400044 	addi	r17,r17,1
    f0f0:	dc45883a 	add	r2,sp,r17
    f0f4:	8d00112e 	bgeu	r17,r20,f13c <_fputwc_r+0xf0>
    f0f8:	11400003 	ldbu	r5,0(r2)
    f0fc:	80c00217 	ldw	r3,8(r16)
    f100:	18ffffc4 	addi	r3,r3,-1
    f104:	80c00215 	stw	r3,8(r16)
    f108:	183ff30e 	bge	r3,zero,f0d8 <__alt_mem_Flash_flash_data+0xf400f0d8>
    f10c:	80800617 	ldw	r2,24(r16)
    f110:	18801916 	blt	r3,r2,f178 <_fputwc_r+0x12c>
    f114:	80800017 	ldw	r2,0(r16)
    f118:	11400005 	stb	r5,0(r2)
    f11c:	80800017 	ldw	r2,0(r16)
    f120:	10c00003 	ldbu	r3,0(r2)
    f124:	10800044 	addi	r2,r2,1
    f128:	1d402326 	beq	r3,r21,f1b8 <_fputwc_r+0x16c>
    f12c:	80800015 	stw	r2,0(r16)
    f130:	8c400044 	addi	r17,r17,1
    f134:	dc45883a 	add	r2,sp,r17
    f138:	8d3fef36 	bltu	r17,r20,f0f8 <__alt_mem_Flash_flash_data+0xf400f0f8>
    f13c:	9005883a 	mov	r2,r18
    f140:	00000406 	br	f154 <_fputwc_r+0x108>
    f144:	80c0030b 	ldhu	r3,12(r16)
    f148:	a005883a 	mov	r2,r20
    f14c:	18c01014 	ori	r3,r3,64
    f150:	80c0030d 	sth	r3,12(r16)
    f154:	dfc00717 	ldw	ra,28(sp)
    f158:	dd400617 	ldw	r21,24(sp)
    f15c:	dd000517 	ldw	r20,20(sp)
    f160:	dcc00417 	ldw	r19,16(sp)
    f164:	dc800317 	ldw	r18,12(sp)
    f168:	dc400217 	ldw	r17,8(sp)
    f16c:	dc000117 	ldw	r16,4(sp)
    f170:	dec00804 	addi	sp,sp,32
    f174:	f800283a 	ret
    f178:	9809883a 	mov	r4,r19
    f17c:	29403fcc 	andi	r5,r5,255
    f180:	800d883a 	mov	r6,r16
    f184:	000f3900 	call	f390 <__swbuf_r>
    f188:	10bfffe0 	cmpeqi	r2,r2,-1
    f18c:	10803fcc 	andi	r2,r2,255
    f190:	103fd626 	beq	r2,zero,f0ec <__alt_mem_Flash_flash_data+0xf400f0ec>
    f194:	00bfffc4 	movi	r2,-1
    f198:	003fee06 	br	f154 <__alt_mem_Flash_flash_data+0xf400f154>
    f19c:	90ffffc4 	addi	r3,r18,-1
    f1a0:	01003f84 	movi	r4,254
    f1a4:	20ffbf36 	bltu	r4,r3,f0a4 <__alt_mem_Flash_flash_data+0xf400f0a4>
    f1a8:	900b883a 	mov	r5,r18
    f1ac:	dc800005 	stb	r18,0(sp)
    f1b0:	1029883a 	mov	r20,r2
    f1b4:	003fc506 	br	f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f1b8:	9809883a 	mov	r4,r19
    f1bc:	a80b883a 	mov	r5,r21
    f1c0:	800d883a 	mov	r6,r16
    f1c4:	000f3900 	call	f390 <__swbuf_r>
    f1c8:	10bfffe0 	cmpeqi	r2,r2,-1
    f1cc:	003fef06 	br	f18c <__alt_mem_Flash_flash_data+0xf400f18c>

0000f1d0 <fputwc>:
    f1d0:	008000b4 	movhi	r2,2
    f1d4:	defffc04 	addi	sp,sp,-16
    f1d8:	10899a04 	addi	r2,r2,9832
    f1dc:	dc000115 	stw	r16,4(sp)
    f1e0:	14000017 	ldw	r16,0(r2)
    f1e4:	dc400215 	stw	r17,8(sp)
    f1e8:	dfc00315 	stw	ra,12(sp)
    f1ec:	2023883a 	mov	r17,r4
    f1f0:	280d883a 	mov	r6,r5
    f1f4:	80000626 	beq	r16,zero,f210 <fputwc+0x40>
    f1f8:	80800e17 	ldw	r2,56(r16)
    f1fc:	1000041e 	bne	r2,zero,f210 <fputwc+0x40>
    f200:	8009883a 	mov	r4,r16
    f204:	d9400015 	stw	r5,0(sp)
    f208:	00095d00 	call	95d0 <__sinit>
    f20c:	d9800017 	ldw	r6,0(sp)
    f210:	8009883a 	mov	r4,r16
    f214:	880b883a 	mov	r5,r17
    f218:	dfc00317 	ldw	ra,12(sp)
    f21c:	dc400217 	ldw	r17,8(sp)
    f220:	dc000117 	ldw	r16,4(sp)
    f224:	dec00404 	addi	sp,sp,16
    f228:	000f04c1 	jmpi	f04c <_fputwc_r>

0000f22c <_fstat_r>:
    f22c:	defffd04 	addi	sp,sp,-12
    f230:	dc000015 	stw	r16,0(sp)
    f234:	040000b4 	movhi	r16,2
    f238:	dc400115 	stw	r17,4(sp)
    f23c:	8411b604 	addi	r16,r16,18136
    f240:	2023883a 	mov	r17,r4
    f244:	2809883a 	mov	r4,r5
    f248:	300b883a 	mov	r5,r6
    f24c:	dfc00215 	stw	ra,8(sp)
    f250:	80000015 	stw	zero,0(r16)
    f254:	0012ae40 	call	12ae4 <fstat>
    f258:	00ffffc4 	movi	r3,-1
    f25c:	10c00526 	beq	r2,r3,f274 <_fstat_r+0x48>
    f260:	dfc00217 	ldw	ra,8(sp)
    f264:	dc400117 	ldw	r17,4(sp)
    f268:	dc000017 	ldw	r16,0(sp)
    f26c:	dec00304 	addi	sp,sp,12
    f270:	f800283a 	ret
    f274:	80c00017 	ldw	r3,0(r16)
    f278:	183ff926 	beq	r3,zero,f260 <__alt_mem_Flash_flash_data+0xf400f260>
    f27c:	88c00015 	stw	r3,0(r17)
    f280:	003ff706 	br	f260 <__alt_mem_Flash_flash_data+0xf400f260>

0000f284 <_isatty_r>:
    f284:	defffd04 	addi	sp,sp,-12
    f288:	dc000015 	stw	r16,0(sp)
    f28c:	040000b4 	movhi	r16,2
    f290:	dc400115 	stw	r17,4(sp)
    f294:	8411b604 	addi	r16,r16,18136
    f298:	2023883a 	mov	r17,r4
    f29c:	2809883a 	mov	r4,r5
    f2a0:	dfc00215 	stw	ra,8(sp)
    f2a4:	80000015 	stw	zero,0(r16)
    f2a8:	0012be40 	call	12be4 <isatty>
    f2ac:	00ffffc4 	movi	r3,-1
    f2b0:	10c00526 	beq	r2,r3,f2c8 <_isatty_r+0x44>
    f2b4:	dfc00217 	ldw	ra,8(sp)
    f2b8:	dc400117 	ldw	r17,4(sp)
    f2bc:	dc000017 	ldw	r16,0(sp)
    f2c0:	dec00304 	addi	sp,sp,12
    f2c4:	f800283a 	ret
    f2c8:	80c00017 	ldw	r3,0(r16)
    f2cc:	183ff926 	beq	r3,zero,f2b4 <__alt_mem_Flash_flash_data+0xf400f2b4>
    f2d0:	88c00015 	stw	r3,0(r17)
    f2d4:	003ff706 	br	f2b4 <__alt_mem_Flash_flash_data+0xf400f2b4>

0000f2d8 <_lseek_r>:
    f2d8:	defffd04 	addi	sp,sp,-12
    f2dc:	dc000015 	stw	r16,0(sp)
    f2e0:	040000b4 	movhi	r16,2
    f2e4:	dc400115 	stw	r17,4(sp)
    f2e8:	8411b604 	addi	r16,r16,18136
    f2ec:	2023883a 	mov	r17,r4
    f2f0:	2809883a 	mov	r4,r5
    f2f4:	300b883a 	mov	r5,r6
    f2f8:	380d883a 	mov	r6,r7
    f2fc:	dfc00215 	stw	ra,8(sp)
    f300:	80000015 	stw	zero,0(r16)
    f304:	0012dbc0 	call	12dbc <lseek>
    f308:	00ffffc4 	movi	r3,-1
    f30c:	10c00526 	beq	r2,r3,f324 <_lseek_r+0x4c>
    f310:	dfc00217 	ldw	ra,8(sp)
    f314:	dc400117 	ldw	r17,4(sp)
    f318:	dc000017 	ldw	r16,0(sp)
    f31c:	dec00304 	addi	sp,sp,12
    f320:	f800283a 	ret
    f324:	80c00017 	ldw	r3,0(r16)
    f328:	183ff926 	beq	r3,zero,f310 <__alt_mem_Flash_flash_data+0xf400f310>
    f32c:	88c00015 	stw	r3,0(r17)
    f330:	003ff706 	br	f310 <__alt_mem_Flash_flash_data+0xf400f310>

0000f334 <_read_r>:
    f334:	defffd04 	addi	sp,sp,-12
    f338:	dc000015 	stw	r16,0(sp)
    f33c:	040000b4 	movhi	r16,2
    f340:	dc400115 	stw	r17,4(sp)
    f344:	8411b604 	addi	r16,r16,18136
    f348:	2023883a 	mov	r17,r4
    f34c:	2809883a 	mov	r4,r5
    f350:	300b883a 	mov	r5,r6
    f354:	380d883a 	mov	r6,r7
    f358:	dfc00215 	stw	ra,8(sp)
    f35c:	80000015 	stw	zero,0(r16)
    f360:	0012fb40 	call	12fb4 <read>
    f364:	00ffffc4 	movi	r3,-1
    f368:	10c00526 	beq	r2,r3,f380 <_read_r+0x4c>
    f36c:	dfc00217 	ldw	ra,8(sp)
    f370:	dc400117 	ldw	r17,4(sp)
    f374:	dc000017 	ldw	r16,0(sp)
    f378:	dec00304 	addi	sp,sp,12
    f37c:	f800283a 	ret
    f380:	80c00017 	ldw	r3,0(r16)
    f384:	183ff926 	beq	r3,zero,f36c <__alt_mem_Flash_flash_data+0xf400f36c>
    f388:	88c00015 	stw	r3,0(r17)
    f38c:	003ff706 	br	f36c <__alt_mem_Flash_flash_data+0xf400f36c>

0000f390 <__swbuf_r>:
    f390:	defffc04 	addi	sp,sp,-16
    f394:	dc800215 	stw	r18,8(sp)
    f398:	dc400115 	stw	r17,4(sp)
    f39c:	dc000015 	stw	r16,0(sp)
    f3a0:	dfc00315 	stw	ra,12(sp)
    f3a4:	2025883a 	mov	r18,r4
    f3a8:	2823883a 	mov	r17,r5
    f3ac:	3021883a 	mov	r16,r6
    f3b0:	20000226 	beq	r4,zero,f3bc <__swbuf_r+0x2c>
    f3b4:	20800e17 	ldw	r2,56(r4)
    f3b8:	10004126 	beq	r2,zero,f4c0 <__swbuf_r+0x130>
    f3bc:	80c00617 	ldw	r3,24(r16)
    f3c0:	8180030b 	ldhu	r6,12(r16)
    f3c4:	80c00215 	stw	r3,8(r16)
    f3c8:	30c0020c 	andi	r3,r6,8
    f3cc:	18003526 	beq	r3,zero,f4a4 <__swbuf_r+0x114>
    f3d0:	80c00417 	ldw	r3,16(r16)
    f3d4:	18003326 	beq	r3,zero,f4a4 <__swbuf_r+0x114>
    f3d8:	3088000c 	andi	r2,r6,8192
    f3dc:	8c403fcc 	andi	r17,r17,255
    f3e0:	10001726 	beq	r2,zero,f440 <__swbuf_r+0xb0>
    f3e4:	80800017 	ldw	r2,0(r16)
    f3e8:	81000517 	ldw	r4,20(r16)
    f3ec:	10c7c83a 	sub	r3,r2,r3
    f3f0:	19001d0e 	bge	r3,r4,f468 <__swbuf_r+0xd8>
    f3f4:	18c00044 	addi	r3,r3,1
    f3f8:	81400217 	ldw	r5,8(r16)
    f3fc:	11000044 	addi	r4,r2,1
    f400:	81000015 	stw	r4,0(r16)
    f404:	297fffc4 	addi	r5,r5,-1
    f408:	81400215 	stw	r5,8(r16)
    f40c:	14400005 	stb	r17,0(r2)
    f410:	80800517 	ldw	r2,20(r16)
    f414:	10c01d26 	beq	r2,r3,f48c <__swbuf_r+0xfc>
    f418:	8080030b 	ldhu	r2,12(r16)
    f41c:	1080004c 	andi	r2,r2,1
    f420:	1000181e 	bne	r2,zero,f484 <__swbuf_r+0xf4>
    f424:	8805883a 	mov	r2,r17
    f428:	dfc00317 	ldw	ra,12(sp)
    f42c:	dc800217 	ldw	r18,8(sp)
    f430:	dc400117 	ldw	r17,4(sp)
    f434:	dc000017 	ldw	r16,0(sp)
    f438:	dec00404 	addi	sp,sp,16
    f43c:	f800283a 	ret
    f440:	81001917 	ldw	r4,100(r16)
    f444:	00b7ffc4 	movi	r2,-8193
    f448:	31880014 	ori	r6,r6,8192
    f44c:	2084703a 	and	r2,r4,r2
    f450:	80801915 	stw	r2,100(r16)
    f454:	80800017 	ldw	r2,0(r16)
    f458:	81000517 	ldw	r4,20(r16)
    f45c:	8180030d 	sth	r6,12(r16)
    f460:	10c7c83a 	sub	r3,r2,r3
    f464:	193fe316 	blt	r3,r4,f3f4 <__alt_mem_Flash_flash_data+0xf400f3f4>
    f468:	9009883a 	mov	r4,r18
    f46c:	800b883a 	mov	r5,r16
    f470:	00091f40 	call	91f4 <_fflush_r>
    f474:	1000091e 	bne	r2,zero,f49c <__swbuf_r+0x10c>
    f478:	80800017 	ldw	r2,0(r16)
    f47c:	00c00044 	movi	r3,1
    f480:	003fdd06 	br	f3f8 <__alt_mem_Flash_flash_data+0xf400f3f8>
    f484:	00800284 	movi	r2,10
    f488:	88bfe61e 	bne	r17,r2,f424 <__alt_mem_Flash_flash_data+0xf400f424>
    f48c:	9009883a 	mov	r4,r18
    f490:	800b883a 	mov	r5,r16
    f494:	00091f40 	call	91f4 <_fflush_r>
    f498:	103fe226 	beq	r2,zero,f424 <__alt_mem_Flash_flash_data+0xf400f424>
    f49c:	00bfffc4 	movi	r2,-1
    f4a0:	003fe106 	br	f428 <__alt_mem_Flash_flash_data+0xf400f428>
    f4a4:	9009883a 	mov	r4,r18
    f4a8:	800b883a 	mov	r5,r16
    f4ac:	00075700 	call	7570 <__swsetup_r>
    f4b0:	103ffa1e 	bne	r2,zero,f49c <__alt_mem_Flash_flash_data+0xf400f49c>
    f4b4:	8180030b 	ldhu	r6,12(r16)
    f4b8:	80c00417 	ldw	r3,16(r16)
    f4bc:	003fc606 	br	f3d8 <__alt_mem_Flash_flash_data+0xf400f3d8>
    f4c0:	00095d00 	call	95d0 <__sinit>
    f4c4:	003fbd06 	br	f3bc <__alt_mem_Flash_flash_data+0xf400f3bc>

0000f4c8 <__swbuf>:
    f4c8:	00c000b4 	movhi	r3,2
    f4cc:	18c99a04 	addi	r3,r3,9832
    f4d0:	2005883a 	mov	r2,r4
    f4d4:	19000017 	ldw	r4,0(r3)
    f4d8:	280d883a 	mov	r6,r5
    f4dc:	100b883a 	mov	r5,r2
    f4e0:	000f3901 	jmpi	f390 <__swbuf_r>

0000f4e4 <_wcrtomb_r>:
    f4e4:	defff604 	addi	sp,sp,-40
    f4e8:	008000b4 	movhi	r2,2
    f4ec:	dc800815 	stw	r18,32(sp)
    f4f0:	dc400715 	stw	r17,28(sp)
    f4f4:	dc000615 	stw	r16,24(sp)
    f4f8:	10899e04 	addi	r2,r2,9848
    f4fc:	dfc00915 	stw	ra,36(sp)
    f500:	2021883a 	mov	r16,r4
    f504:	3823883a 	mov	r17,r7
    f508:	14800017 	ldw	r18,0(r2)
    f50c:	28001426 	beq	r5,zero,f560 <_wcrtomb_r+0x7c>
    f510:	d9400415 	stw	r5,16(sp)
    f514:	d9800515 	stw	r6,20(sp)
    f518:	000a0f80 	call	a0f8 <__locale_charset>
    f51c:	d9400417 	ldw	r5,16(sp)
    f520:	d9800517 	ldw	r6,20(sp)
    f524:	8009883a 	mov	r4,r16
    f528:	dc400015 	stw	r17,0(sp)
    f52c:	100f883a 	mov	r7,r2
    f530:	903ee83a 	callr	r18
    f534:	00ffffc4 	movi	r3,-1
    f538:	10c0031e 	bne	r2,r3,f548 <_wcrtomb_r+0x64>
    f53c:	88000015 	stw	zero,0(r17)
    f540:	00c02284 	movi	r3,138
    f544:	80c00015 	stw	r3,0(r16)
    f548:	dfc00917 	ldw	ra,36(sp)
    f54c:	dc800817 	ldw	r18,32(sp)
    f550:	dc400717 	ldw	r17,28(sp)
    f554:	dc000617 	ldw	r16,24(sp)
    f558:	dec00a04 	addi	sp,sp,40
    f55c:	f800283a 	ret
    f560:	000a0f80 	call	a0f8 <__locale_charset>
    f564:	8009883a 	mov	r4,r16
    f568:	dc400015 	stw	r17,0(sp)
    f56c:	d9400104 	addi	r5,sp,4
    f570:	000d883a 	mov	r6,zero
    f574:	100f883a 	mov	r7,r2
    f578:	903ee83a 	callr	r18
    f57c:	003fed06 	br	f534 <__alt_mem_Flash_flash_data+0xf400f534>

0000f580 <wcrtomb>:
    f580:	defff604 	addi	sp,sp,-40
    f584:	008000b4 	movhi	r2,2
    f588:	dc800615 	stw	r18,24(sp)
    f58c:	dc400515 	stw	r17,20(sp)
    f590:	dc000415 	stw	r16,16(sp)
    f594:	10899a04 	addi	r2,r2,9832
    f598:	dfc00915 	stw	ra,36(sp)
    f59c:	dd000815 	stw	r20,32(sp)
    f5a0:	dcc00715 	stw	r19,28(sp)
    f5a4:	2021883a 	mov	r16,r4
    f5a8:	3025883a 	mov	r18,r6
    f5ac:	14400017 	ldw	r17,0(r2)
    f5b0:	20001826 	beq	r4,zero,f614 <wcrtomb+0x94>
    f5b4:	008000b4 	movhi	r2,2
    f5b8:	10899e04 	addi	r2,r2,9848
    f5bc:	15000017 	ldw	r20,0(r2)
    f5c0:	2827883a 	mov	r19,r5
    f5c4:	000a0f80 	call	a0f8 <__locale_charset>
    f5c8:	8809883a 	mov	r4,r17
    f5cc:	dc800015 	stw	r18,0(sp)
    f5d0:	800b883a 	mov	r5,r16
    f5d4:	980d883a 	mov	r6,r19
    f5d8:	100f883a 	mov	r7,r2
    f5dc:	a03ee83a 	callr	r20
    f5e0:	00ffffc4 	movi	r3,-1
    f5e4:	10c0031e 	bne	r2,r3,f5f4 <wcrtomb+0x74>
    f5e8:	90000015 	stw	zero,0(r18)
    f5ec:	00c02284 	movi	r3,138
    f5f0:	88c00015 	stw	r3,0(r17)
    f5f4:	dfc00917 	ldw	ra,36(sp)
    f5f8:	dd000817 	ldw	r20,32(sp)
    f5fc:	dcc00717 	ldw	r19,28(sp)
    f600:	dc800617 	ldw	r18,24(sp)
    f604:	dc400517 	ldw	r17,20(sp)
    f608:	dc000417 	ldw	r16,16(sp)
    f60c:	dec00a04 	addi	sp,sp,40
    f610:	f800283a 	ret
    f614:	008000b4 	movhi	r2,2
    f618:	10899e04 	addi	r2,r2,9848
    f61c:	14000017 	ldw	r16,0(r2)
    f620:	000a0f80 	call	a0f8 <__locale_charset>
    f624:	8809883a 	mov	r4,r17
    f628:	dc800015 	stw	r18,0(sp)
    f62c:	d9400104 	addi	r5,sp,4
    f630:	000d883a 	mov	r6,zero
    f634:	100f883a 	mov	r7,r2
    f638:	803ee83a 	callr	r16
    f63c:	003fe806 	br	f5e0 <__alt_mem_Flash_flash_data+0xf400f5e0>

0000f640 <__ascii_wctomb>:
    f640:	28000526 	beq	r5,zero,f658 <__ascii_wctomb+0x18>
    f644:	00803fc4 	movi	r2,255
    f648:	11800536 	bltu	r2,r6,f660 <__ascii_wctomb+0x20>
    f64c:	29800005 	stb	r6,0(r5)
    f650:	00800044 	movi	r2,1
    f654:	f800283a 	ret
    f658:	0005883a 	mov	r2,zero
    f65c:	f800283a 	ret
    f660:	00802284 	movi	r2,138
    f664:	20800015 	stw	r2,0(r4)
    f668:	00bfffc4 	movi	r2,-1
    f66c:	f800283a 	ret

0000f670 <_wctomb_r>:
    f670:	008000b4 	movhi	r2,2
    f674:	defff904 	addi	sp,sp,-28
    f678:	10899e04 	addi	r2,r2,9848
    f67c:	dfc00615 	stw	ra,24(sp)
    f680:	dc400515 	stw	r17,20(sp)
    f684:	dc000415 	stw	r16,16(sp)
    f688:	3823883a 	mov	r17,r7
    f68c:	14000017 	ldw	r16,0(r2)
    f690:	d9000115 	stw	r4,4(sp)
    f694:	d9400215 	stw	r5,8(sp)
    f698:	d9800315 	stw	r6,12(sp)
    f69c:	000a0f80 	call	a0f8 <__locale_charset>
    f6a0:	d9000117 	ldw	r4,4(sp)
    f6a4:	d9400217 	ldw	r5,8(sp)
    f6a8:	d9800317 	ldw	r6,12(sp)
    f6ac:	dc400015 	stw	r17,0(sp)
    f6b0:	100f883a 	mov	r7,r2
    f6b4:	803ee83a 	callr	r16
    f6b8:	dfc00617 	ldw	ra,24(sp)
    f6bc:	dc400517 	ldw	r17,20(sp)
    f6c0:	dc000417 	ldw	r16,16(sp)
    f6c4:	dec00704 	addi	sp,sp,28
    f6c8:	f800283a 	ret

0000f6cc <__udivdi3>:
    f6cc:	defff504 	addi	sp,sp,-44
    f6d0:	dcc00415 	stw	r19,16(sp)
    f6d4:	dc000115 	stw	r16,4(sp)
    f6d8:	dfc00a15 	stw	ra,40(sp)
    f6dc:	df000915 	stw	fp,36(sp)
    f6e0:	ddc00815 	stw	r23,32(sp)
    f6e4:	dd800715 	stw	r22,28(sp)
    f6e8:	dd400615 	stw	r21,24(sp)
    f6ec:	dd000515 	stw	r20,20(sp)
    f6f0:	dc800315 	stw	r18,12(sp)
    f6f4:	dc400215 	stw	r17,8(sp)
    f6f8:	2027883a 	mov	r19,r4
    f6fc:	2821883a 	mov	r16,r5
    f700:	3800421e 	bne	r7,zero,f80c <__udivdi3+0x140>
    f704:	3025883a 	mov	r18,r6
    f708:	2023883a 	mov	r17,r4
    f70c:	2980542e 	bgeu	r5,r6,f860 <__udivdi3+0x194>
    f710:	00bfffd4 	movui	r2,65535
    f714:	282d883a 	mov	r22,r5
    f718:	1180a836 	bltu	r2,r6,f9bc <__udivdi3+0x2f0>
    f71c:	00803fc4 	movi	r2,255
    f720:	1181422e 	bgeu	r2,r6,fc2c <__udivdi3+0x560>
    f724:	00800204 	movi	r2,8
    f728:	1007883a 	mov	r3,r2
    f72c:	3084d83a 	srl	r2,r6,r2
    f730:	010000b4 	movhi	r4,2
    f734:	21010204 	addi	r4,r4,1032
    f738:	2085883a 	add	r2,r4,r2
    f73c:	10800003 	ldbu	r2,0(r2)
    f740:	10c7883a 	add	r3,r2,r3
    f744:	00800804 	movi	r2,32
    f748:	10c5c83a 	sub	r2,r2,r3
    f74c:	10000526 	beq	r2,zero,f764 <__udivdi3+0x98>
    f750:	80a0983a 	sll	r16,r16,r2
    f754:	98c6d83a 	srl	r3,r19,r3
    f758:	30a4983a 	sll	r18,r6,r2
    f75c:	98a2983a 	sll	r17,r19,r2
    f760:	80ecb03a 	or	r22,r16,r3
    f764:	902ad43a 	srli	r21,r18,16
    f768:	b009883a 	mov	r4,r22
    f76c:	953fffcc 	andi	r20,r18,65535
    f770:	a80b883a 	mov	r5,r21
    f774:	00103400 	call	10340 <__umodsi3>
    f778:	b009883a 	mov	r4,r22
    f77c:	a80b883a 	mov	r5,r21
    f780:	1027883a 	mov	r19,r2
    f784:	00103380 	call	10338 <__udivsi3>
    f788:	1021883a 	mov	r16,r2
    f78c:	8806d43a 	srli	r3,r17,16
    f790:	9804943a 	slli	r2,r19,16
    f794:	8527383a 	mul	r19,r16,r20
    f798:	10c4b03a 	or	r2,r2,r3
    f79c:	14c0052e 	bgeu	r2,r19,f7b4 <__udivdi3+0xe8>
    f7a0:	1485883a 	add	r2,r2,r18
    f7a4:	80ffffc4 	addi	r3,r16,-1
    f7a8:	14800136 	bltu	r2,r18,f7b0 <__udivdi3+0xe4>
    f7ac:	14c13436 	bltu	r2,r19,fc80 <__udivdi3+0x5b4>
    f7b0:	1821883a 	mov	r16,r3
    f7b4:	14e7c83a 	sub	r19,r2,r19
    f7b8:	9809883a 	mov	r4,r19
    f7bc:	a80b883a 	mov	r5,r21
    f7c0:	00103400 	call	10340 <__umodsi3>
    f7c4:	102d883a 	mov	r22,r2
    f7c8:	9809883a 	mov	r4,r19
    f7cc:	a80b883a 	mov	r5,r21
    f7d0:	00103380 	call	10338 <__udivsi3>
    f7d4:	b02c943a 	slli	r22,r22,16
    f7d8:	1529383a 	mul	r20,r2,r20
    f7dc:	8c7fffcc 	andi	r17,r17,65535
    f7e0:	b462b03a 	or	r17,r22,r17
    f7e4:	8d00052e 	bgeu	r17,r20,f7fc <__udivdi3+0x130>
    f7e8:	8ca3883a 	add	r17,r17,r18
    f7ec:	10ffffc4 	addi	r3,r2,-1
    f7f0:	8c80f636 	bltu	r17,r18,fbcc <__udivdi3+0x500>
    f7f4:	8d00f52e 	bgeu	r17,r20,fbcc <__udivdi3+0x500>
    f7f8:	10bfff84 	addi	r2,r2,-2
    f7fc:	8020943a 	slli	r16,r16,16
    f800:	0007883a 	mov	r3,zero
    f804:	1404b03a 	or	r2,r2,r16
    f808:	00005b06 	br	f978 <__udivdi3+0x2ac>
    f80c:	29c05836 	bltu	r5,r7,f970 <__udivdi3+0x2a4>
    f810:	00bfffd4 	movui	r2,65535
    f814:	11c0642e 	bgeu	r2,r7,f9a8 <__udivdi3+0x2dc>
    f818:	00804034 	movhi	r2,256
    f81c:	10bfffc4 	addi	r2,r2,-1
    f820:	11c0f32e 	bgeu	r2,r7,fbf0 <__udivdi3+0x524>
    f824:	00c00604 	movi	r3,24
    f828:	180b883a 	mov	r5,r3
    f82c:	38c6d83a 	srl	r3,r7,r3
    f830:	008000b4 	movhi	r2,2
    f834:	10810204 	addi	r2,r2,1032
    f838:	10c7883a 	add	r3,r2,r3
    f83c:	18c00003 	ldbu	r3,0(r3)
    f840:	01000804 	movi	r4,32
    f844:	1947883a 	add	r3,r3,r5
    f848:	20e5c83a 	sub	r18,r4,r3
    f84c:	9000661e 	bne	r18,zero,f9e8 <__udivdi3+0x31c>
    f850:	3c00f936 	bltu	r7,r16,fc38 <__udivdi3+0x56c>
    f854:	9985403a 	cmpgeu	r2,r19,r6
    f858:	0007883a 	mov	r3,zero
    f85c:	00004606 	br	f978 <__udivdi3+0x2ac>
    f860:	3000041e 	bne	r6,zero,f874 <__udivdi3+0x1a8>
    f864:	01000044 	movi	r4,1
    f868:	000b883a 	mov	r5,zero
    f86c:	00103380 	call	10338 <__udivsi3>
    f870:	1025883a 	mov	r18,r2
    f874:	00bfffd4 	movui	r2,65535
    f878:	1480562e 	bgeu	r2,r18,f9d4 <__udivdi3+0x308>
    f87c:	00804034 	movhi	r2,256
    f880:	10bfffc4 	addi	r2,r2,-1
    f884:	1480e32e 	bgeu	r2,r18,fc14 <__udivdi3+0x548>
    f888:	00800604 	movi	r2,24
    f88c:	1007883a 	mov	r3,r2
    f890:	9084d83a 	srl	r2,r18,r2
    f894:	010000b4 	movhi	r4,2
    f898:	21010204 	addi	r4,r4,1032
    f89c:	2085883a 	add	r2,r4,r2
    f8a0:	10800003 	ldbu	r2,0(r2)
    f8a4:	10c5883a 	add	r2,r2,r3
    f8a8:	00c00804 	movi	r3,32
    f8ac:	1887c83a 	sub	r3,r3,r2
    f8b0:	1800911e 	bne	r3,zero,faf8 <__udivdi3+0x42c>
    f8b4:	9028d43a 	srli	r20,r18,16
    f8b8:	84a1c83a 	sub	r16,r16,r18
    f8bc:	957fffcc 	andi	r21,r18,65535
    f8c0:	00c00044 	movi	r3,1
    f8c4:	8009883a 	mov	r4,r16
    f8c8:	a00b883a 	mov	r5,r20
    f8cc:	d8c00015 	stw	r3,0(sp)
    f8d0:	00103400 	call	10340 <__umodsi3>
    f8d4:	8009883a 	mov	r4,r16
    f8d8:	a00b883a 	mov	r5,r20
    f8dc:	1027883a 	mov	r19,r2
    f8e0:	00103380 	call	10338 <__udivsi3>
    f8e4:	1021883a 	mov	r16,r2
    f8e8:	880cd43a 	srli	r6,r17,16
    f8ec:	9804943a 	slli	r2,r19,16
    f8f0:	8567383a 	mul	r19,r16,r21
    f8f4:	d8c00017 	ldw	r3,0(sp)
    f8f8:	1188b03a 	or	r4,r2,r6
    f8fc:	24c0052e 	bgeu	r4,r19,f914 <__udivdi3+0x248>
    f900:	2489883a 	add	r4,r4,r18
    f904:	80bfffc4 	addi	r2,r16,-1
    f908:	24800136 	bltu	r4,r18,f910 <__udivdi3+0x244>
    f90c:	24c0d936 	bltu	r4,r19,fc74 <__udivdi3+0x5a8>
    f910:	1021883a 	mov	r16,r2
    f914:	24e7c83a 	sub	r19,r4,r19
    f918:	9809883a 	mov	r4,r19
    f91c:	a00b883a 	mov	r5,r20
    f920:	d8c00015 	stw	r3,0(sp)
    f924:	00103400 	call	10340 <__umodsi3>
    f928:	102d883a 	mov	r22,r2
    f92c:	9809883a 	mov	r4,r19
    f930:	a00b883a 	mov	r5,r20
    f934:	00103380 	call	10338 <__udivsi3>
    f938:	b02c943a 	slli	r22,r22,16
    f93c:	156b383a 	mul	r21,r2,r21
    f940:	8c7fffcc 	andi	r17,r17,65535
    f944:	b462b03a 	or	r17,r22,r17
    f948:	d8c00017 	ldw	r3,0(sp)
    f94c:	8d40052e 	bgeu	r17,r21,f964 <__udivdi3+0x298>
    f950:	8ca3883a 	add	r17,r17,r18
    f954:	113fffc4 	addi	r4,r2,-1
    f958:	8c809a36 	bltu	r17,r18,fbc4 <__udivdi3+0x4f8>
    f95c:	8d40992e 	bgeu	r17,r21,fbc4 <__udivdi3+0x4f8>
    f960:	10bfff84 	addi	r2,r2,-2
    f964:	8020943a 	slli	r16,r16,16
    f968:	1404b03a 	or	r2,r2,r16
    f96c:	00000206 	br	f978 <__udivdi3+0x2ac>
    f970:	0007883a 	mov	r3,zero
    f974:	0005883a 	mov	r2,zero
    f978:	dfc00a17 	ldw	ra,40(sp)
    f97c:	df000917 	ldw	fp,36(sp)
    f980:	ddc00817 	ldw	r23,32(sp)
    f984:	dd800717 	ldw	r22,28(sp)
    f988:	dd400617 	ldw	r21,24(sp)
    f98c:	dd000517 	ldw	r20,20(sp)
    f990:	dcc00417 	ldw	r19,16(sp)
    f994:	dc800317 	ldw	r18,12(sp)
    f998:	dc400217 	ldw	r17,8(sp)
    f99c:	dc000117 	ldw	r16,4(sp)
    f9a0:	dec00b04 	addi	sp,sp,44
    f9a4:	f800283a 	ret
    f9a8:	00803fc4 	movi	r2,255
    f9ac:	11c0932e 	bgeu	r2,r7,fbfc <__udivdi3+0x530>
    f9b0:	00c00204 	movi	r3,8
    f9b4:	180b883a 	mov	r5,r3
    f9b8:	003f9c06 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    f9bc:	00804034 	movhi	r2,256
    f9c0:	10bfffc4 	addi	r2,r2,-1
    f9c4:	1180902e 	bgeu	r2,r6,fc08 <__udivdi3+0x53c>
    f9c8:	00800604 	movi	r2,24
    f9cc:	1007883a 	mov	r3,r2
    f9d0:	003f5606 	br	f72c <__alt_mem_Flash_flash_data+0xf400f72c>
    f9d4:	00803fc4 	movi	r2,255
    f9d8:	1480912e 	bgeu	r2,r18,fc20 <__udivdi3+0x554>
    f9dc:	00800204 	movi	r2,8
    f9e0:	1007883a 	mov	r3,r2
    f9e4:	003faa06 	br	f890 <__alt_mem_Flash_flash_data+0xf400f890>
    f9e8:	30eed83a 	srl	r23,r6,r3
    f9ec:	3c8e983a 	sll	r7,r7,r18
    f9f0:	80f8d83a 	srl	fp,r16,r3
    f9f4:	98c6d83a 	srl	r3,r19,r3
    f9f8:	3deeb03a 	or	r23,r7,r23
    f9fc:	b828d43a 	srli	r20,r23,16
    fa00:	84a0983a 	sll	r16,r16,r18
    fa04:	e009883a 	mov	r4,fp
    fa08:	a00b883a 	mov	r5,r20
    fa0c:	80e2b03a 	or	r17,r16,r3
    fa10:	34aa983a 	sll	r21,r6,r18
    fa14:	00103400 	call	10340 <__umodsi3>
    fa18:	e009883a 	mov	r4,fp
    fa1c:	a00b883a 	mov	r5,r20
    fa20:	102d883a 	mov	r22,r2
    fa24:	00103380 	call	10338 <__udivsi3>
    fa28:	1021883a 	mov	r16,r2
    fa2c:	bf3fffcc 	andi	fp,r23,65535
    fa30:	b004943a 	slli	r2,r22,16
    fa34:	8808d43a 	srli	r4,r17,16
    fa38:	872d383a 	mul	r22,r16,fp
    fa3c:	1104b03a 	or	r2,r2,r4
    fa40:	1580042e 	bgeu	r2,r22,fa54 <__udivdi3+0x388>
    fa44:	15c5883a 	add	r2,r2,r23
    fa48:	80ffffc4 	addi	r3,r16,-1
    fa4c:	15c0812e 	bgeu	r2,r23,fc54 <__udivdi3+0x588>
    fa50:	1821883a 	mov	r16,r3
    fa54:	15adc83a 	sub	r22,r2,r22
    fa58:	b009883a 	mov	r4,r22
    fa5c:	a00b883a 	mov	r5,r20
    fa60:	00103400 	call	10340 <__umodsi3>
    fa64:	a00b883a 	mov	r5,r20
    fa68:	b009883a 	mov	r4,r22
    fa6c:	d8800015 	stw	r2,0(sp)
    fa70:	00103380 	call	10338 <__udivsi3>
    fa74:	d8c00017 	ldw	r3,0(sp)
    fa78:	170b383a 	mul	r5,r2,fp
    fa7c:	8c7fffcc 	andi	r17,r17,65535
    fa80:	1806943a 	slli	r3,r3,16
    fa84:	1c46b03a 	or	r3,r3,r17
    fa88:	1940042e 	bgeu	r3,r5,fa9c <__udivdi3+0x3d0>
    fa8c:	1dc7883a 	add	r3,r3,r23
    fa90:	113fffc4 	addi	r4,r2,-1
    fa94:	1dc06b2e 	bgeu	r3,r23,fc44 <__udivdi3+0x578>
    fa98:	2005883a 	mov	r2,r4
    fa9c:	8020943a 	slli	r16,r16,16
    faa0:	a9ffffcc 	andi	r7,r21,65535
    faa4:	a82ad43a 	srli	r21,r21,16
    faa8:	1404b03a 	or	r2,r2,r16
    faac:	113fffcc 	andi	r4,r2,65535
    fab0:	100cd43a 	srli	r6,r2,16
    fab4:	21d3383a 	mul	r9,r4,r7
    fab8:	2549383a 	mul	r4,r4,r21
    fabc:	31cf383a 	mul	r7,r6,r7
    fac0:	4810d43a 	srli	r8,r9,16
    fac4:	1947c83a 	sub	r3,r3,r5
    fac8:	3909883a 	add	r4,r7,r4
    facc:	2209883a 	add	r4,r4,r8
    fad0:	354d383a 	mul	r6,r6,r21
    fad4:	21c0022e 	bgeu	r4,r7,fae0 <__udivdi3+0x414>
    fad8:	01400074 	movhi	r5,1
    fadc:	314d883a 	add	r6,r6,r5
    fae0:	202ad43a 	srli	r21,r4,16
    fae4:	354d883a 	add	r6,r6,r21
    fae8:	19803f36 	bltu	r3,r6,fbe8 <__udivdi3+0x51c>
    faec:	19803926 	beq	r3,r6,fbd4 <__udivdi3+0x508>
    faf0:	0007883a 	mov	r3,zero
    faf4:	003fa006 	br	f978 <__alt_mem_Flash_flash_data+0xf400f978>
    faf8:	90e4983a 	sll	r18,r18,r3
    fafc:	80aad83a 	srl	r21,r16,r2
    fb00:	80e0983a 	sll	r16,r16,r3
    fb04:	9028d43a 	srli	r20,r18,16
    fb08:	9884d83a 	srl	r2,r19,r2
    fb0c:	a809883a 	mov	r4,r21
    fb10:	a00b883a 	mov	r5,r20
    fb14:	80acb03a 	or	r22,r16,r2
    fb18:	98e2983a 	sll	r17,r19,r3
    fb1c:	00103400 	call	10340 <__umodsi3>
    fb20:	a809883a 	mov	r4,r21
    fb24:	a00b883a 	mov	r5,r20
    fb28:	1021883a 	mov	r16,r2
    fb2c:	00103380 	call	10338 <__udivsi3>
    fb30:	957fffcc 	andi	r21,r18,65535
    fb34:	8020943a 	slli	r16,r16,16
    fb38:	b00ad43a 	srli	r5,r22,16
    fb3c:	1567383a 	mul	r19,r2,r21
    fb40:	102f883a 	mov	r23,r2
    fb44:	8148b03a 	or	r4,r16,r5
    fb48:	24c0062e 	bgeu	r4,r19,fb64 <__udivdi3+0x498>
    fb4c:	2489883a 	add	r4,r4,r18
    fb50:	10bfffc4 	addi	r2,r2,-1
    fb54:	24804536 	bltu	r4,r18,fc6c <__udivdi3+0x5a0>
    fb58:	24c0442e 	bgeu	r4,r19,fc6c <__udivdi3+0x5a0>
    fb5c:	bdffff84 	addi	r23,r23,-2
    fb60:	2489883a 	add	r4,r4,r18
    fb64:	24e7c83a 	sub	r19,r4,r19
    fb68:	9809883a 	mov	r4,r19
    fb6c:	a00b883a 	mov	r5,r20
    fb70:	00103400 	call	10340 <__umodsi3>
    fb74:	1021883a 	mov	r16,r2
    fb78:	9809883a 	mov	r4,r19
    fb7c:	a00b883a 	mov	r5,r20
    fb80:	00103380 	call	10338 <__udivsi3>
    fb84:	8020943a 	slli	r16,r16,16
    fb88:	1007883a 	mov	r3,r2
    fb8c:	1545383a 	mul	r2,r2,r21
    fb90:	b13fffcc 	andi	r4,r22,65535
    fb94:	8108b03a 	or	r4,r16,r4
    fb98:	2080062e 	bgeu	r4,r2,fbb4 <__udivdi3+0x4e8>
    fb9c:	2489883a 	add	r4,r4,r18
    fba0:	197fffc4 	addi	r5,r3,-1
    fba4:	24802f36 	bltu	r4,r18,fc64 <__udivdi3+0x598>
    fba8:	20802e2e 	bgeu	r4,r2,fc64 <__udivdi3+0x598>
    fbac:	18ffff84 	addi	r3,r3,-2
    fbb0:	2489883a 	add	r4,r4,r18
    fbb4:	b82e943a 	slli	r23,r23,16
    fbb8:	20a1c83a 	sub	r16,r4,r2
    fbbc:	1dc6b03a 	or	r3,r3,r23
    fbc0:	003f4006 	br	f8c4 <__alt_mem_Flash_flash_data+0xf400f8c4>
    fbc4:	2005883a 	mov	r2,r4
    fbc8:	003f6606 	br	f964 <__alt_mem_Flash_flash_data+0xf400f964>
    fbcc:	1805883a 	mov	r2,r3
    fbd0:	003f0a06 	br	f7fc <__alt_mem_Flash_flash_data+0xf400f7fc>
    fbd4:	2006943a 	slli	r3,r4,16
    fbd8:	9c88983a 	sll	r4,r19,r18
    fbdc:	4a7fffcc 	andi	r9,r9,65535
    fbe0:	1a47883a 	add	r3,r3,r9
    fbe4:	20ffc22e 	bgeu	r4,r3,faf0 <__alt_mem_Flash_flash_data+0xf400faf0>
    fbe8:	10bfffc4 	addi	r2,r2,-1
    fbec:	003fc006 	br	faf0 <__alt_mem_Flash_flash_data+0xf400faf0>
    fbf0:	00c00404 	movi	r3,16
    fbf4:	180b883a 	mov	r5,r3
    fbf8:	003f0c06 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    fbfc:	0007883a 	mov	r3,zero
    fc00:	000b883a 	mov	r5,zero
    fc04:	003f0906 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    fc08:	00800404 	movi	r2,16
    fc0c:	1007883a 	mov	r3,r2
    fc10:	003ec606 	br	f72c <__alt_mem_Flash_flash_data+0xf400f72c>
    fc14:	00800404 	movi	r2,16
    fc18:	1007883a 	mov	r3,r2
    fc1c:	003f1c06 	br	f890 <__alt_mem_Flash_flash_data+0xf400f890>
    fc20:	0005883a 	mov	r2,zero
    fc24:	0007883a 	mov	r3,zero
    fc28:	003f1906 	br	f890 <__alt_mem_Flash_flash_data+0xf400f890>
    fc2c:	0005883a 	mov	r2,zero
    fc30:	0007883a 	mov	r3,zero
    fc34:	003ebd06 	br	f72c <__alt_mem_Flash_flash_data+0xf400f72c>
    fc38:	0007883a 	mov	r3,zero
    fc3c:	00800044 	movi	r2,1
    fc40:	003f4d06 	br	f978 <__alt_mem_Flash_flash_data+0xf400f978>
    fc44:	197f942e 	bgeu	r3,r5,fa98 <__alt_mem_Flash_flash_data+0xf400fa98>
    fc48:	10bfff84 	addi	r2,r2,-2
    fc4c:	1dc7883a 	add	r3,r3,r23
    fc50:	003f9206 	br	fa9c <__alt_mem_Flash_flash_data+0xf400fa9c>
    fc54:	15bf7e2e 	bgeu	r2,r22,fa50 <__alt_mem_Flash_flash_data+0xf400fa50>
    fc58:	843fff84 	addi	r16,r16,-2
    fc5c:	15c5883a 	add	r2,r2,r23
    fc60:	003f7c06 	br	fa54 <__alt_mem_Flash_flash_data+0xf400fa54>
    fc64:	2807883a 	mov	r3,r5
    fc68:	003fd206 	br	fbb4 <__alt_mem_Flash_flash_data+0xf400fbb4>
    fc6c:	102f883a 	mov	r23,r2
    fc70:	003fbc06 	br	fb64 <__alt_mem_Flash_flash_data+0xf400fb64>
    fc74:	843fff84 	addi	r16,r16,-2
    fc78:	2489883a 	add	r4,r4,r18
    fc7c:	003f2506 	br	f914 <__alt_mem_Flash_flash_data+0xf400f914>
    fc80:	843fff84 	addi	r16,r16,-2
    fc84:	1485883a 	add	r2,r2,r18
    fc88:	003eca06 	br	f7b4 <__alt_mem_Flash_flash_data+0xf400f7b4>

0000fc8c <__umoddi3>:
    fc8c:	defff404 	addi	sp,sp,-48
    fc90:	ddc00915 	stw	r23,36(sp)
    fc94:	dc400315 	stw	r17,12(sp)
    fc98:	dc000215 	stw	r16,8(sp)
    fc9c:	dfc00b15 	stw	ra,44(sp)
    fca0:	df000a15 	stw	fp,40(sp)
    fca4:	dd800815 	stw	r22,32(sp)
    fca8:	dd400715 	stw	r21,28(sp)
    fcac:	dd000615 	stw	r20,24(sp)
    fcb0:	dcc00515 	stw	r19,20(sp)
    fcb4:	dc800415 	stw	r18,16(sp)
    fcb8:	2021883a 	mov	r16,r4
    fcbc:	2823883a 	mov	r17,r5
    fcc0:	282f883a 	mov	r23,r5
    fcc4:	3800381e 	bne	r7,zero,fda8 <__umoddi3+0x11c>
    fcc8:	3027883a 	mov	r19,r6
    fccc:	2029883a 	mov	r20,r4
    fcd0:	29804e2e 	bgeu	r5,r6,fe0c <__umoddi3+0x180>
    fcd4:	00bfffd4 	movui	r2,65535
    fcd8:	11809c36 	bltu	r2,r6,ff4c <__umoddi3+0x2c0>
    fcdc:	00803fc4 	movi	r2,255
    fce0:	11813b2e 	bgeu	r2,r6,101d0 <__umoddi3+0x544>
    fce4:	01400204 	movi	r5,8
    fce8:	2805883a 	mov	r2,r5
    fcec:	314ad83a 	srl	r5,r6,r5
    fcf0:	00c000b4 	movhi	r3,2
    fcf4:	18c10204 	addi	r3,r3,1032
    fcf8:	194b883a 	add	r5,r3,r5
    fcfc:	29000003 	ldbu	r4,0(r5)
    fd00:	2089883a 	add	r4,r4,r2
    fd04:	00800804 	movi	r2,32
    fd08:	1105c83a 	sub	r2,r2,r4
    fd0c:	1000ec26 	beq	r2,zero,100c0 <__umoddi3+0x434>
    fd10:	88a2983a 	sll	r17,r17,r2
    fd14:	8108d83a 	srl	r4,r16,r4
    fd18:	30a6983a 	sll	r19,r6,r2
    fd1c:	80a8983a 	sll	r20,r16,r2
    fd20:	1025883a 	mov	r18,r2
    fd24:	892eb03a 	or	r23,r17,r4
    fd28:	982cd43a 	srli	r22,r19,16
    fd2c:	b809883a 	mov	r4,r23
    fd30:	9d7fffcc 	andi	r21,r19,65535
    fd34:	b00b883a 	mov	r5,r22
    fd38:	00103400 	call	10340 <__umodsi3>
    fd3c:	b809883a 	mov	r4,r23
    fd40:	b00b883a 	mov	r5,r22
    fd44:	1021883a 	mov	r16,r2
    fd48:	00103380 	call	10338 <__udivsi3>
    fd4c:	8020943a 	slli	r16,r16,16
    fd50:	a00cd43a 	srli	r6,r20,16
    fd54:	1545383a 	mul	r2,r2,r21
    fd58:	8188b03a 	or	r4,r16,r6
    fd5c:	2080042e 	bgeu	r4,r2,fd70 <__umoddi3+0xe4>
    fd60:	24c9883a 	add	r4,r4,r19
    fd64:	24c00236 	bltu	r4,r19,fd70 <__umoddi3+0xe4>
    fd68:	2080012e 	bgeu	r4,r2,fd70 <__umoddi3+0xe4>
    fd6c:	24c9883a 	add	r4,r4,r19
    fd70:	20a3c83a 	sub	r17,r4,r2
    fd74:	8809883a 	mov	r4,r17
    fd78:	b00b883a 	mov	r5,r22
    fd7c:	00103400 	call	10340 <__umodsi3>
    fd80:	8809883a 	mov	r4,r17
    fd84:	b00b883a 	mov	r5,r22
    fd88:	1021883a 	mov	r16,r2
    fd8c:	00103380 	call	10338 <__udivsi3>
    fd90:	8006943a 	slli	r3,r16,16
    fd94:	1545383a 	mul	r2,r2,r21
    fd98:	a13fffcc 	andi	r4,r20,65535
    fd9c:	1906b03a 	or	r3,r3,r4
    fda0:	1880532e 	bgeu	r3,r2,fef0 <__umoddi3+0x264>
    fda4:	00004e06 	br	fee0 <__umoddi3+0x254>
    fda8:	29c05536 	bltu	r5,r7,ff00 <__umoddi3+0x274>
    fdac:	00bfffd4 	movui	r2,65535
    fdb0:	11c0612e 	bgeu	r2,r7,ff38 <__umoddi3+0x2ac>
    fdb4:	00804034 	movhi	r2,256
    fdb8:	10bfffc4 	addi	r2,r2,-1
    fdbc:	11c0f82e 	bgeu	r2,r7,101a0 <__umoddi3+0x514>
    fdc0:	01400604 	movi	r5,24
    fdc4:	282b883a 	mov	r21,r5
    fdc8:	394ad83a 	srl	r5,r7,r5
    fdcc:	00c000b4 	movhi	r3,2
    fdd0:	18c10204 	addi	r3,r3,1032
    fdd4:	194b883a 	add	r5,r3,r5
    fdd8:	28800003 	ldbu	r2,0(r5)
    fddc:	00c00804 	movi	r3,32
    fde0:	156b883a 	add	r21,r2,r21
    fde4:	1d69c83a 	sub	r20,r3,r21
    fde8:	a000631e 	bne	r20,zero,ff78 <__umoddi3+0x2ec>
    fdec:	3c400136 	bltu	r7,r17,fdf4 <__umoddi3+0x168>
    fdf0:	81810436 	bltu	r16,r6,10204 <__umoddi3+0x578>
    fdf4:	8185c83a 	sub	r2,r16,r6
    fdf8:	89e3c83a 	sub	r17,r17,r7
    fdfc:	8087803a 	cmpltu	r3,r16,r2
    fe00:	88efc83a 	sub	r23,r17,r3
    fe04:	b807883a 	mov	r3,r23
    fe08:	00003f06 	br	ff08 <__umoddi3+0x27c>
    fe0c:	3000041e 	bne	r6,zero,fe20 <__umoddi3+0x194>
    fe10:	01000044 	movi	r4,1
    fe14:	000b883a 	mov	r5,zero
    fe18:	00103380 	call	10338 <__udivsi3>
    fe1c:	1027883a 	mov	r19,r2
    fe20:	00bfffd4 	movui	r2,65535
    fe24:	14c04f2e 	bgeu	r2,r19,ff64 <__umoddi3+0x2d8>
    fe28:	00804034 	movhi	r2,256
    fe2c:	10bfffc4 	addi	r2,r2,-1
    fe30:	14c0e42e 	bgeu	r2,r19,101c4 <__umoddi3+0x538>
    fe34:	00800604 	movi	r2,24
    fe38:	1007883a 	mov	r3,r2
    fe3c:	9884d83a 	srl	r2,r19,r2
    fe40:	010000b4 	movhi	r4,2
    fe44:	21010204 	addi	r4,r4,1032
    fe48:	2085883a 	add	r2,r4,r2
    fe4c:	11000003 	ldbu	r4,0(r2)
    fe50:	00800804 	movi	r2,32
    fe54:	20c7883a 	add	r3,r4,r3
    fe58:	10c5c83a 	sub	r2,r2,r3
    fe5c:	10009a1e 	bne	r2,zero,100c8 <__umoddi3+0x43c>
    fe60:	982cd43a 	srli	r22,r19,16
    fe64:	8ce3c83a 	sub	r17,r17,r19
    fe68:	9c3fffcc 	andi	r16,r19,65535
    fe6c:	0025883a 	mov	r18,zero
    fe70:	8809883a 	mov	r4,r17
    fe74:	b00b883a 	mov	r5,r22
    fe78:	00103400 	call	10340 <__umodsi3>
    fe7c:	8809883a 	mov	r4,r17
    fe80:	b00b883a 	mov	r5,r22
    fe84:	102b883a 	mov	r21,r2
    fe88:	00103380 	call	10338 <__udivsi3>
    fe8c:	a806943a 	slli	r3,r21,16
    fe90:	a008d43a 	srli	r4,r20,16
    fe94:	1405383a 	mul	r2,r2,r16
    fe98:	190cb03a 	or	r6,r3,r4
    fe9c:	3080032e 	bgeu	r6,r2,feac <__umoddi3+0x220>
    fea0:	34cd883a 	add	r6,r6,r19
    fea4:	34c00136 	bltu	r6,r19,feac <__umoddi3+0x220>
    fea8:	3080d436 	bltu	r6,r2,101fc <__umoddi3+0x570>
    feac:	30abc83a 	sub	r21,r6,r2
    feb0:	a809883a 	mov	r4,r21
    feb4:	b00b883a 	mov	r5,r22
    feb8:	00103400 	call	10340 <__umodsi3>
    febc:	1023883a 	mov	r17,r2
    fec0:	a809883a 	mov	r4,r21
    fec4:	b00b883a 	mov	r5,r22
    fec8:	00103380 	call	10338 <__udivsi3>
    fecc:	8822943a 	slli	r17,r17,16
    fed0:	1405383a 	mul	r2,r2,r16
    fed4:	a13fffcc 	andi	r4,r20,65535
    fed8:	8906b03a 	or	r3,r17,r4
    fedc:	1880042e 	bgeu	r3,r2,fef0 <__umoddi3+0x264>
    fee0:	1cc7883a 	add	r3,r3,r19
    fee4:	1cc00236 	bltu	r3,r19,fef0 <__umoddi3+0x264>
    fee8:	1880012e 	bgeu	r3,r2,fef0 <__umoddi3+0x264>
    feec:	1cc7883a 	add	r3,r3,r19
    fef0:	1887c83a 	sub	r3,r3,r2
    fef4:	1c84d83a 	srl	r2,r3,r18
    fef8:	0007883a 	mov	r3,zero
    fefc:	00000206 	br	ff08 <__umoddi3+0x27c>
    ff00:	2005883a 	mov	r2,r4
    ff04:	2807883a 	mov	r3,r5
    ff08:	dfc00b17 	ldw	ra,44(sp)
    ff0c:	df000a17 	ldw	fp,40(sp)
    ff10:	ddc00917 	ldw	r23,36(sp)
    ff14:	dd800817 	ldw	r22,32(sp)
    ff18:	dd400717 	ldw	r21,28(sp)
    ff1c:	dd000617 	ldw	r20,24(sp)
    ff20:	dcc00517 	ldw	r19,20(sp)
    ff24:	dc800417 	ldw	r18,16(sp)
    ff28:	dc400317 	ldw	r17,12(sp)
    ff2c:	dc000217 	ldw	r16,8(sp)
    ff30:	dec00c04 	addi	sp,sp,48
    ff34:	f800283a 	ret
    ff38:	00803fc4 	movi	r2,255
    ff3c:	11c0952e 	bgeu	r2,r7,10194 <__umoddi3+0x508>
    ff40:	01400204 	movi	r5,8
    ff44:	282b883a 	mov	r21,r5
    ff48:	003f9f06 	br	fdc8 <__alt_mem_Flash_flash_data+0xf400fdc8>
    ff4c:	00804034 	movhi	r2,256
    ff50:	10bfffc4 	addi	r2,r2,-1
    ff54:	1180952e 	bgeu	r2,r6,101ac <__umoddi3+0x520>
    ff58:	01400604 	movi	r5,24
    ff5c:	2805883a 	mov	r2,r5
    ff60:	003f6206 	br	fcec <__alt_mem_Flash_flash_data+0xf400fcec>
    ff64:	00803fc4 	movi	r2,255
    ff68:	14c0932e 	bgeu	r2,r19,101b8 <__umoddi3+0x52c>
    ff6c:	00800204 	movi	r2,8
    ff70:	1007883a 	mov	r3,r2
    ff74:	003fb106 	br	fe3c <__alt_mem_Flash_flash_data+0xf400fe3c>
    ff78:	3548d83a 	srl	r4,r6,r21
    ff7c:	3d0e983a 	sll	r7,r7,r20
    ff80:	8d10983a 	sll	r8,r17,r20
    ff84:	8d6cd83a 	srl	r22,r17,r21
    ff88:	3922b03a 	or	r17,r7,r4
    ff8c:	882ed43a 	srli	r23,r17,16
    ff90:	8564d83a 	srl	r18,r16,r21
    ff94:	b009883a 	mov	r4,r22
    ff98:	b80b883a 	mov	r5,r23
    ff9c:	44a4b03a 	or	r18,r8,r18
    ffa0:	3526983a 	sll	r19,r6,r20
    ffa4:	00103400 	call	10340 <__umodsi3>
    ffa8:	b009883a 	mov	r4,r22
    ffac:	b80b883a 	mov	r5,r23
    ffb0:	1039883a 	mov	fp,r2
    ffb4:	00103380 	call	10338 <__udivsi3>
    ffb8:	102d883a 	mov	r22,r2
    ffbc:	8a3fffcc 	andi	r8,r17,65535
    ffc0:	e004943a 	slli	r2,fp,16
    ffc4:	900cd43a 	srli	r6,r18,16
    ffc8:	b239383a 	mul	fp,r22,r8
    ffcc:	8520983a 	sll	r16,r16,r20
    ffd0:	118ab03a 	or	r5,r2,r6
    ffd4:	2f00042e 	bgeu	r5,fp,ffe8 <__umoddi3+0x35c>
    ffd8:	2c4b883a 	add	r5,r5,r17
    ffdc:	b0bfffc4 	addi	r2,r22,-1
    ffe0:	2c40822e 	bgeu	r5,r17,101ec <__umoddi3+0x560>
    ffe4:	102d883a 	mov	r22,r2
    ffe8:	2f39c83a 	sub	fp,r5,fp
    ffec:	e009883a 	mov	r4,fp
    fff0:	b80b883a 	mov	r5,r23
    fff4:	da000115 	stw	r8,4(sp)
    fff8:	00103400 	call	10340 <__umodsi3>
    fffc:	e009883a 	mov	r4,fp
   10000:	b80b883a 	mov	r5,r23
   10004:	d8800015 	stw	r2,0(sp)
   10008:	00103380 	call	10338 <__udivsi3>
   1000c:	d9800017 	ldw	r6,0(sp)
   10010:	da000117 	ldw	r8,4(sp)
   10014:	94bfffcc 	andi	r18,r18,65535
   10018:	300c943a 	slli	r6,r6,16
   1001c:	1209383a 	mul	r4,r2,r8
   10020:	3490b03a 	or	r8,r6,r18
   10024:	4100042e 	bgeu	r8,r4,10038 <__umoddi3+0x3ac>
   10028:	4451883a 	add	r8,r8,r17
   1002c:	10ffffc4 	addi	r3,r2,-1
   10030:	44406a2e 	bgeu	r8,r17,101dc <__umoddi3+0x550>
   10034:	1805883a 	mov	r2,r3
   10038:	b012943a 	slli	r9,r22,16
   1003c:	9abfffcc 	andi	r10,r19,65535
   10040:	980ed43a 	srli	r7,r19,16
   10044:	124ab03a 	or	r5,r2,r9
   10048:	2a7fffcc 	andi	r9,r5,65535
   1004c:	280ad43a 	srli	r5,r5,16
   10050:	4a8d383a 	mul	r6,r9,r10
   10054:	49d3383a 	mul	r9,r9,r7
   10058:	2a95383a 	mul	r10,r5,r10
   1005c:	3004d43a 	srli	r2,r6,16
   10060:	4111c83a 	sub	r8,r8,r4
   10064:	5253883a 	add	r9,r10,r9
   10068:	4893883a 	add	r9,r9,r2
   1006c:	29cb383a 	mul	r5,r5,r7
   10070:	4a80022e 	bgeu	r9,r10,1007c <__umoddi3+0x3f0>
   10074:	00800074 	movhi	r2,1
   10078:	288b883a 	add	r5,r5,r2
   1007c:	4808d43a 	srli	r4,r9,16
   10080:	4812943a 	slli	r9,r9,16
   10084:	31bfffcc 	andi	r6,r6,65535
   10088:	290b883a 	add	r5,r5,r4
   1008c:	498d883a 	add	r6,r9,r6
   10090:	41403a36 	bltu	r8,r5,1017c <__umoddi3+0x4f0>
   10094:	41405d26 	beq	r8,r5,1020c <__umoddi3+0x580>
   10098:	4149c83a 	sub	r4,r8,r5
   1009c:	300f883a 	mov	r7,r6
   100a0:	81cfc83a 	sub	r7,r16,r7
   100a4:	81c7803a 	cmpltu	r3,r16,r7
   100a8:	20c7c83a 	sub	r3,r4,r3
   100ac:	1d44983a 	sll	r2,r3,r21
   100b0:	3d0ed83a 	srl	r7,r7,r20
   100b4:	1d06d83a 	srl	r3,r3,r20
   100b8:	11c4b03a 	or	r2,r2,r7
   100bc:	003f9206 	br	ff08 <__alt_mem_Flash_flash_data+0xf400ff08>
   100c0:	0025883a 	mov	r18,zero
   100c4:	003f1806 	br	fd28 <__alt_mem_Flash_flash_data+0xf400fd28>
   100c8:	98a6983a 	sll	r19,r19,r2
   100cc:	88e8d83a 	srl	r20,r17,r3
   100d0:	80c6d83a 	srl	r3,r16,r3
   100d4:	982cd43a 	srli	r22,r19,16
   100d8:	88a2983a 	sll	r17,r17,r2
   100dc:	a009883a 	mov	r4,r20
   100e0:	b00b883a 	mov	r5,r22
   100e4:	88eab03a 	or	r21,r17,r3
   100e8:	1025883a 	mov	r18,r2
   100ec:	00103400 	call	10340 <__umodsi3>
   100f0:	a009883a 	mov	r4,r20
   100f4:	b00b883a 	mov	r5,r22
   100f8:	1023883a 	mov	r17,r2
   100fc:	00103380 	call	10338 <__udivsi3>
   10100:	9f3fffcc 	andi	fp,r19,65535
   10104:	8822943a 	slli	r17,r17,16
   10108:	a80ad43a 	srli	r5,r21,16
   1010c:	1705383a 	mul	r2,r2,fp
   10110:	84a8983a 	sll	r20,r16,r18
   10114:	8948b03a 	or	r4,r17,r5
   10118:	2080042e 	bgeu	r4,r2,1012c <__umoddi3+0x4a0>
   1011c:	24c9883a 	add	r4,r4,r19
   10120:	24c00236 	bltu	r4,r19,1012c <__umoddi3+0x4a0>
   10124:	2080012e 	bgeu	r4,r2,1012c <__umoddi3+0x4a0>
   10128:	24c9883a 	add	r4,r4,r19
   1012c:	20afc83a 	sub	r23,r4,r2
   10130:	b809883a 	mov	r4,r23
   10134:	b00b883a 	mov	r5,r22
   10138:	00103400 	call	10340 <__umodsi3>
   1013c:	1023883a 	mov	r17,r2
   10140:	b809883a 	mov	r4,r23
   10144:	b00b883a 	mov	r5,r22
   10148:	00103380 	call	10338 <__udivsi3>
   1014c:	8822943a 	slli	r17,r17,16
   10150:	1705383a 	mul	r2,r2,fp
   10154:	a93fffcc 	andi	r4,r21,65535
   10158:	8908b03a 	or	r4,r17,r4
   1015c:	2080042e 	bgeu	r4,r2,10170 <__umoddi3+0x4e4>
   10160:	24c9883a 	add	r4,r4,r19
   10164:	24c00236 	bltu	r4,r19,10170 <__umoddi3+0x4e4>
   10168:	2080012e 	bgeu	r4,r2,10170 <__umoddi3+0x4e4>
   1016c:	24c9883a 	add	r4,r4,r19
   10170:	20a3c83a 	sub	r17,r4,r2
   10174:	e021883a 	mov	r16,fp
   10178:	003f3d06 	br	fe70 <__alt_mem_Flash_flash_data+0xf400fe70>
   1017c:	34cfc83a 	sub	r7,r6,r19
   10180:	2c4bc83a 	sub	r5,r5,r17
   10184:	31cd803a 	cmpltu	r6,r6,r7
   10188:	298dc83a 	sub	r6,r5,r6
   1018c:	4189c83a 	sub	r4,r8,r6
   10190:	003fc306 	br	100a0 <__alt_mem_Flash_flash_data+0xf40100a0>
   10194:	000b883a 	mov	r5,zero
   10198:	002b883a 	mov	r21,zero
   1019c:	003f0a06 	br	fdc8 <__alt_mem_Flash_flash_data+0xf400fdc8>
   101a0:	01400404 	movi	r5,16
   101a4:	282b883a 	mov	r21,r5
   101a8:	003f0706 	br	fdc8 <__alt_mem_Flash_flash_data+0xf400fdc8>
   101ac:	01400404 	movi	r5,16
   101b0:	2805883a 	mov	r2,r5
   101b4:	003ecd06 	br	fcec <__alt_mem_Flash_flash_data+0xf400fcec>
   101b8:	0005883a 	mov	r2,zero
   101bc:	0007883a 	mov	r3,zero
   101c0:	003f1e06 	br	fe3c <__alt_mem_Flash_flash_data+0xf400fe3c>
   101c4:	00800404 	movi	r2,16
   101c8:	1007883a 	mov	r3,r2
   101cc:	003f1b06 	br	fe3c <__alt_mem_Flash_flash_data+0xf400fe3c>
   101d0:	000b883a 	mov	r5,zero
   101d4:	0005883a 	mov	r2,zero
   101d8:	003ec406 	br	fcec <__alt_mem_Flash_flash_data+0xf400fcec>
   101dc:	413f952e 	bgeu	r8,r4,10034 <__alt_mem_Flash_flash_data+0xf4010034>
   101e0:	10bfff84 	addi	r2,r2,-2
   101e4:	4451883a 	add	r8,r8,r17
   101e8:	003f9306 	br	10038 <__alt_mem_Flash_flash_data+0xf4010038>
   101ec:	2f3f7d2e 	bgeu	r5,fp,ffe4 <__alt_mem_Flash_flash_data+0xf400ffe4>
   101f0:	b5bfff84 	addi	r22,r22,-2
   101f4:	2c4b883a 	add	r5,r5,r17
   101f8:	003f7b06 	br	ffe8 <__alt_mem_Flash_flash_data+0xf400ffe8>
   101fc:	34cd883a 	add	r6,r6,r19
   10200:	003f2a06 	br	feac <__alt_mem_Flash_flash_data+0xf400feac>
   10204:	8005883a 	mov	r2,r16
   10208:	003efe06 	br	fe04 <__alt_mem_Flash_flash_data+0xf400fe04>
   1020c:	81bfdb36 	bltu	r16,r6,1017c <__alt_mem_Flash_flash_data+0xf401017c>
   10210:	300f883a 	mov	r7,r6
   10214:	0009883a 	mov	r4,zero
   10218:	003fa106 	br	100a0 <__alt_mem_Flash_flash_data+0xf40100a0>

0001021c <udivmodsi4>:
   1021c:	2900182e 	bgeu	r5,r4,10280 <udivmodsi4+0x64>
   10220:	28001716 	blt	r5,zero,10280 <udivmodsi4+0x64>
   10224:	00800804 	movi	r2,32
   10228:	00c00044 	movi	r3,1
   1022c:	00000206 	br	10238 <udivmodsi4+0x1c>
   10230:	10001126 	beq	r2,zero,10278 <udivmodsi4+0x5c>
   10234:	28000516 	blt	r5,zero,1024c <udivmodsi4+0x30>
   10238:	294b883a 	add	r5,r5,r5
   1023c:	10bfffc4 	addi	r2,r2,-1
   10240:	18c7883a 	add	r3,r3,r3
   10244:	293ffa36 	bltu	r5,r4,10230 <__alt_mem_Flash_flash_data+0xf4010230>
   10248:	18000b26 	beq	r3,zero,10278 <udivmodsi4+0x5c>
   1024c:	0005883a 	mov	r2,zero
   10250:	21400236 	bltu	r4,r5,1025c <udivmodsi4+0x40>
   10254:	2149c83a 	sub	r4,r4,r5
   10258:	10c4b03a 	or	r2,r2,r3
   1025c:	1806d07a 	srli	r3,r3,1
   10260:	280ad07a 	srli	r5,r5,1
   10264:	183ffa1e 	bne	r3,zero,10250 <__alt_mem_Flash_flash_data+0xf4010250>
   10268:	3000011e 	bne	r6,zero,10270 <udivmodsi4+0x54>
   1026c:	f800283a 	ret
   10270:	2005883a 	mov	r2,r4
   10274:	f800283a 	ret
   10278:	0005883a 	mov	r2,zero
   1027c:	003ffa06 	br	10268 <__alt_mem_Flash_flash_data+0xf4010268>
   10280:	00c00044 	movi	r3,1
   10284:	003ff106 	br	1024c <__alt_mem_Flash_flash_data+0xf401024c>

00010288 <__divsi3>:
   10288:	defffe04 	addi	sp,sp,-8
   1028c:	dfc00115 	stw	ra,4(sp)
   10290:	dc000015 	stw	r16,0(sp)
   10294:	20000b16 	blt	r4,zero,102c4 <__divsi3+0x3c>
   10298:	0021883a 	mov	r16,zero
   1029c:	28000c16 	blt	r5,zero,102d0 <__divsi3+0x48>
   102a0:	000d883a 	mov	r6,zero
   102a4:	001021c0 	call	1021c <udivmodsi4>
   102a8:	0407c83a 	sub	r3,zero,r16
   102ac:	1884f03a 	xor	r2,r3,r2
   102b0:	1405883a 	add	r2,r2,r16
   102b4:	dfc00117 	ldw	ra,4(sp)
   102b8:	dc000017 	ldw	r16,0(sp)
   102bc:	dec00204 	addi	sp,sp,8
   102c0:	f800283a 	ret
   102c4:	0109c83a 	sub	r4,zero,r4
   102c8:	04000044 	movi	r16,1
   102cc:	283ff40e 	bge	r5,zero,102a0 <__alt_mem_Flash_flash_data+0xf40102a0>
   102d0:	014bc83a 	sub	r5,zero,r5
   102d4:	8400005c 	xori	r16,r16,1
   102d8:	003ff106 	br	102a0 <__alt_mem_Flash_flash_data+0xf40102a0>

000102dc <__modsi3>:
   102dc:	defffd04 	addi	sp,sp,-12
   102e0:	dfc00215 	stw	ra,8(sp)
   102e4:	dc400115 	stw	r17,4(sp)
   102e8:	dc000015 	stw	r16,0(sp)
   102ec:	20000c16 	blt	r4,zero,10320 <__modsi3+0x44>
   102f0:	0023883a 	mov	r17,zero
   102f4:	0021883a 	mov	r16,zero
   102f8:	28000d16 	blt	r5,zero,10330 <__modsi3+0x54>
   102fc:	01800044 	movi	r6,1
   10300:	001021c0 	call	1021c <udivmodsi4>
   10304:	1404f03a 	xor	r2,r2,r16
   10308:	8885883a 	add	r2,r17,r2
   1030c:	dfc00217 	ldw	ra,8(sp)
   10310:	dc400117 	ldw	r17,4(sp)
   10314:	dc000017 	ldw	r16,0(sp)
   10318:	dec00304 	addi	sp,sp,12
   1031c:	f800283a 	ret
   10320:	0109c83a 	sub	r4,zero,r4
   10324:	04400044 	movi	r17,1
   10328:	043fffc4 	movi	r16,-1
   1032c:	283ff30e 	bge	r5,zero,102fc <__alt_mem_Flash_flash_data+0xf40102fc>
   10330:	014bc83a 	sub	r5,zero,r5
   10334:	003ff106 	br	102fc <__alt_mem_Flash_flash_data+0xf40102fc>

00010338 <__udivsi3>:
   10338:	000d883a 	mov	r6,zero
   1033c:	001021c1 	jmpi	1021c <udivmodsi4>

00010340 <__umodsi3>:
   10340:	01800044 	movi	r6,1
   10344:	001021c1 	jmpi	1021c <udivmodsi4>

00010348 <__adddf3>:
   10348:	02000434 	movhi	r8,16
   1034c:	423fffc4 	addi	r8,r8,-1
   10350:	defffb04 	addi	sp,sp,-20
   10354:	2a12703a 	and	r9,r5,r8
   10358:	2806d7fa 	srli	r3,r5,31
   1035c:	3a10703a 	and	r8,r7,r8
   10360:	3804d53a 	srli	r2,r7,20
   10364:	3014d77a 	srli	r10,r6,29
   10368:	dc000015 	stw	r16,0(sp)
   1036c:	481290fa 	slli	r9,r9,3
   10370:	2820d53a 	srli	r16,r5,20
   10374:	401090fa 	slli	r8,r8,3
   10378:	200ad77a 	srli	r5,r4,29
   1037c:	380ed7fa 	srli	r7,r7,31
   10380:	dc800215 	stw	r18,8(sp)
   10384:	dc400115 	stw	r17,4(sp)
   10388:	dfc00415 	stw	ra,16(sp)
   1038c:	dcc00315 	stw	r19,12(sp)
   10390:	1c803fcc 	andi	r18,r3,255
   10394:	8401ffcc 	andi	r16,r16,2047
   10398:	494ab03a 	or	r5,r9,r5
   1039c:	202290fa 	slli	r17,r4,3
   103a0:	1081ffcc 	andi	r2,r2,2047
   103a4:	4290b03a 	or	r8,r8,r10
   103a8:	300c90fa 	slli	r6,r6,3
   103ac:	91c07026 	beq	r18,r7,10570 <__adddf3+0x228>
   103b0:	8087c83a 	sub	r3,r16,r2
   103b4:	00c0b30e 	bge	zero,r3,10684 <__adddf3+0x33c>
   103b8:	10002a1e 	bne	r2,zero,10464 <__adddf3+0x11c>
   103bc:	4184b03a 	or	r2,r8,r6
   103c0:	1000991e 	bne	r2,zero,10628 <__adddf3+0x2e0>
   103c4:	888001cc 	andi	r2,r17,7
   103c8:	10005b26 	beq	r2,zero,10538 <__adddf3+0x1f0>
   103cc:	88c003cc 	andi	r3,r17,15
   103d0:	00800104 	movi	r2,4
   103d4:	18805826 	beq	r3,r2,10538 <__adddf3+0x1f0>
   103d8:	89800104 	addi	r6,r17,4
   103dc:	3463803a 	cmpltu	r17,r6,r17
   103e0:	2c4b883a 	add	r5,r5,r17
   103e4:	2880202c 	andhi	r2,r5,128
   103e8:	9007883a 	mov	r3,r18
   103ec:	3023883a 	mov	r17,r6
   103f0:	10005426 	beq	r2,zero,10544 <__adddf3+0x1fc>
   103f4:	84000044 	addi	r16,r16,1
   103f8:	0081ffc4 	movi	r2,2047
   103fc:	8080c126 	beq	r16,r2,10704 <__adddf3+0x3bc>
   10400:	013fe034 	movhi	r4,65408
   10404:	213fffc4 	addi	r4,r4,-1
   10408:	290a703a 	and	r5,r5,r4
   1040c:	2804977a 	slli	r2,r5,29
   10410:	280a927a 	slli	r5,r5,9
   10414:	8822d0fa 	srli	r17,r17,3
   10418:	8401ffcc 	andi	r16,r16,2047
   1041c:	2808d33a 	srli	r4,r5,12
   10420:	1444b03a 	or	r2,r2,r17
   10424:	8401ffcc 	andi	r16,r16,2047
   10428:	800a953a 	slli	r5,r16,20
   1042c:	18c03fcc 	andi	r3,r3,255
   10430:	04000434 	movhi	r16,16
   10434:	180697fa 	slli	r3,r3,31
   10438:	843fffc4 	addi	r16,r16,-1
   1043c:	2420703a 	and	r16,r4,r16
   10440:	8160b03a 	or	r16,r16,r5
   10444:	80c6b03a 	or	r3,r16,r3
   10448:	dfc00417 	ldw	ra,16(sp)
   1044c:	dcc00317 	ldw	r19,12(sp)
   10450:	dc800217 	ldw	r18,8(sp)
   10454:	dc400117 	ldw	r17,4(sp)
   10458:	dc000017 	ldw	r16,0(sp)
   1045c:	dec00504 	addi	sp,sp,20
   10460:	f800283a 	ret
   10464:	0081ffc4 	movi	r2,2047
   10468:	80bfd626 	beq	r16,r2,103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   1046c:	42002034 	orhi	r8,r8,128
   10470:	00800e04 	movi	r2,56
   10474:	10c0a616 	blt	r2,r3,10710 <__adddf3+0x3c8>
   10478:	008007c4 	movi	r2,31
   1047c:	10c0c916 	blt	r2,r3,107a4 <__adddf3+0x45c>
   10480:	00800804 	movi	r2,32
   10484:	10c5c83a 	sub	r2,r2,r3
   10488:	408e983a 	sll	r7,r8,r2
   1048c:	30c8d83a 	srl	r4,r6,r3
   10490:	3084983a 	sll	r2,r6,r2
   10494:	40c6d83a 	srl	r3,r8,r3
   10498:	390cb03a 	or	r6,r7,r4
   1049c:	1004c03a 	cmpne	r2,r2,zero
   104a0:	308cb03a 	or	r6,r6,r2
   104a4:	898dc83a 	sub	r6,r17,r6
   104a8:	89a3803a 	cmpltu	r17,r17,r6
   104ac:	28cbc83a 	sub	r5,r5,r3
   104b0:	2c4bc83a 	sub	r5,r5,r17
   104b4:	3023883a 	mov	r17,r6
   104b8:	2880202c 	andhi	r2,r5,128
   104bc:	10006d26 	beq	r2,zero,10674 <__adddf3+0x32c>
   104c0:	04c02034 	movhi	r19,128
   104c4:	9cffffc4 	addi	r19,r19,-1
   104c8:	2ce6703a 	and	r19,r5,r19
   104cc:	98007e26 	beq	r19,zero,106c8 <__adddf3+0x380>
   104d0:	9809883a 	mov	r4,r19
   104d4:	00128e40 	call	128e4 <__clzsi2>
   104d8:	10fffe04 	addi	r3,r2,-8
   104dc:	010007c4 	movi	r4,31
   104e0:	20c07f16 	blt	r4,r3,106e0 <__adddf3+0x398>
   104e4:	01400a04 	movi	r5,40
   104e8:	2885c83a 	sub	r2,r5,r2
   104ec:	888ad83a 	srl	r5,r17,r2
   104f0:	98e6983a 	sll	r19,r19,r3
   104f4:	88e2983a 	sll	r17,r17,r3
   104f8:	2ce6b03a 	or	r19,r5,r19
   104fc:	1c007c16 	blt	r3,r16,106f0 <__adddf3+0x3a8>
   10500:	1c21c83a 	sub	r16,r3,r16
   10504:	81400044 	addi	r5,r16,1
   10508:	00c007c4 	movi	r3,31
   1050c:	19409816 	blt	r3,r5,10770 <__adddf3+0x428>
   10510:	1c21c83a 	sub	r16,r3,r16
   10514:	8c08983a 	sll	r4,r17,r16
   10518:	8946d83a 	srl	r3,r17,r5
   1051c:	9c20983a 	sll	r16,r19,r16
   10520:	2008c03a 	cmpne	r4,r4,zero
   10524:	994ad83a 	srl	r5,r19,r5
   10528:	1c06b03a 	or	r3,r3,r16
   1052c:	1922b03a 	or	r17,r3,r4
   10530:	0021883a 	mov	r16,zero
   10534:	003fa306 	br	103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   10538:	2880202c 	andhi	r2,r5,128
   1053c:	9007883a 	mov	r3,r18
   10540:	103fac1e 	bne	r2,zero,103f4 <__alt_mem_Flash_flash_data+0xf40103f4>
   10544:	2804977a 	slli	r2,r5,29
   10548:	8822d0fa 	srli	r17,r17,3
   1054c:	0101ffc4 	movi	r4,2047
   10550:	280ad0fa 	srli	r5,r5,3
   10554:	1444b03a 	or	r2,r2,r17
   10558:	81002c26 	beq	r16,r4,1060c <__adddf3+0x2c4>
   1055c:	8120703a 	and	r16,r16,r4
   10560:	01000434 	movhi	r4,16
   10564:	213fffc4 	addi	r4,r4,-1
   10568:	2908703a 	and	r4,r5,r4
   1056c:	003fad06 	br	10424 <__alt_mem_Flash_flash_data+0xf4010424>
   10570:	8089c83a 	sub	r4,r16,r2
   10574:	01006a0e 	bge	zero,r4,10720 <__adddf3+0x3d8>
   10578:	10003326 	beq	r2,zero,10648 <__adddf3+0x300>
   1057c:	0081ffc4 	movi	r2,2047
   10580:	80bf9026 	beq	r16,r2,103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   10584:	42002034 	orhi	r8,r8,128
   10588:	00800e04 	movi	r2,56
   1058c:	1100b116 	blt	r2,r4,10854 <__adddf3+0x50c>
   10590:	008007c4 	movi	r2,31
   10594:	1100e216 	blt	r2,r4,10920 <__adddf3+0x5d8>
   10598:	00800804 	movi	r2,32
   1059c:	1105c83a 	sub	r2,r2,r4
   105a0:	4092983a 	sll	r9,r8,r2
   105a4:	310ed83a 	srl	r7,r6,r4
   105a8:	3084983a 	sll	r2,r6,r2
   105ac:	4110d83a 	srl	r8,r8,r4
   105b0:	49ccb03a 	or	r6,r9,r7
   105b4:	1004c03a 	cmpne	r2,r2,zero
   105b8:	308cb03a 	or	r6,r6,r2
   105bc:	344d883a 	add	r6,r6,r17
   105c0:	3463803a 	cmpltu	r17,r6,r17
   105c4:	414b883a 	add	r5,r8,r5
   105c8:	2c4b883a 	add	r5,r5,r17
   105cc:	3023883a 	mov	r17,r6
   105d0:	2880202c 	andhi	r2,r5,128
   105d4:	10002726 	beq	r2,zero,10674 <__adddf3+0x32c>
   105d8:	84000044 	addi	r16,r16,1
   105dc:	0081ffc4 	movi	r2,2047
   105e0:	8080ae26 	beq	r16,r2,1089c <__adddf3+0x554>
   105e4:	00bfe034 	movhi	r2,65408
   105e8:	10bfffc4 	addi	r2,r2,-1
   105ec:	288a703a 	and	r5,r5,r2
   105f0:	880cd07a 	srli	r6,r17,1
   105f4:	280897fa 	slli	r4,r5,31
   105f8:	88c0004c 	andi	r3,r17,1
   105fc:	30e2b03a 	or	r17,r6,r3
   10600:	280ad07a 	srli	r5,r5,1
   10604:	8922b03a 	or	r17,r17,r4
   10608:	003f6e06 	br	103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   1060c:	1148b03a 	or	r4,r2,r5
   10610:	20003c26 	beq	r4,zero,10704 <__adddf3+0x3bc>
   10614:	29000234 	orhi	r4,r5,8
   10618:	01400434 	movhi	r5,16
   1061c:	297fffc4 	addi	r5,r5,-1
   10620:	2148703a 	and	r4,r4,r5
   10624:	003f7f06 	br	10424 <__alt_mem_Flash_flash_data+0xf4010424>
   10628:	18ffffc4 	addi	r3,r3,-1
   1062c:	18004d1e 	bne	r3,zero,10764 <__adddf3+0x41c>
   10630:	898dc83a 	sub	r6,r17,r6
   10634:	89a3803a 	cmpltu	r17,r17,r6
   10638:	2a0bc83a 	sub	r5,r5,r8
   1063c:	2c4bc83a 	sub	r5,r5,r17
   10640:	3023883a 	mov	r17,r6
   10644:	003f9c06 	br	104b8 <__alt_mem_Flash_flash_data+0xf40104b8>
   10648:	4184b03a 	or	r2,r8,r6
   1064c:	103f5d26 	beq	r2,zero,103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   10650:	213fffc4 	addi	r4,r4,-1
   10654:	203fd926 	beq	r4,zero,105bc <__alt_mem_Flash_flash_data+0xf40105bc>
   10658:	0081ffc4 	movi	r2,2047
   1065c:	80bfca1e 	bne	r16,r2,10588 <__alt_mem_Flash_flash_data+0xf4010588>
   10660:	003f5806 	br	103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   10664:	10c8b03a 	or	r4,r2,r3
   10668:	20008b26 	beq	r4,zero,10898 <__adddf3+0x550>
   1066c:	100b883a 	mov	r5,r2
   10670:	1823883a 	mov	r17,r3
   10674:	888001cc 	andi	r2,r17,7
   10678:	103f541e 	bne	r2,zero,103cc <__alt_mem_Flash_flash_data+0xf40103cc>
   1067c:	9007883a 	mov	r3,r18
   10680:	003fb006 	br	10544 <__alt_mem_Flash_flash_data+0xf4010544>
   10684:	1800531e 	bne	r3,zero,107d4 <__adddf3+0x48c>
   10688:	80800044 	addi	r2,r16,1
   1068c:	1081ffcc 	andi	r2,r2,2047
   10690:	00c00044 	movi	r3,1
   10694:	1880990e 	bge	r3,r2,108fc <__adddf3+0x5b4>
   10698:	8985c83a 	sub	r2,r17,r6
   1069c:	8887803a 	cmpltu	r3,r17,r2
   106a0:	2a27c83a 	sub	r19,r5,r8
   106a4:	98e7c83a 	sub	r19,r19,r3
   106a8:	98c0202c 	andhi	r3,r19,128
   106ac:	18006226 	beq	r3,zero,10838 <__adddf3+0x4f0>
   106b0:	3463c83a 	sub	r17,r6,r17
   106b4:	4151c83a 	sub	r8,r8,r5
   106b8:	344d803a 	cmpltu	r6,r6,r17
   106bc:	41a7c83a 	sub	r19,r8,r6
   106c0:	3825883a 	mov	r18,r7
   106c4:	983f821e 	bne	r19,zero,104d0 <__alt_mem_Flash_flash_data+0xf40104d0>
   106c8:	8809883a 	mov	r4,r17
   106cc:	00128e40 	call	128e4 <__clzsi2>
   106d0:	10800804 	addi	r2,r2,32
   106d4:	10fffe04 	addi	r3,r2,-8
   106d8:	010007c4 	movi	r4,31
   106dc:	20ff810e 	bge	r4,r3,104e4 <__alt_mem_Flash_flash_data+0xf40104e4>
   106e0:	14fff604 	addi	r19,r2,-40
   106e4:	8ce6983a 	sll	r19,r17,r19
   106e8:	0023883a 	mov	r17,zero
   106ec:	1c3f840e 	bge	r3,r16,10500 <__alt_mem_Flash_flash_data+0xf4010500>
   106f0:	017fe034 	movhi	r5,65408
   106f4:	297fffc4 	addi	r5,r5,-1
   106f8:	80e1c83a 	sub	r16,r16,r3
   106fc:	994a703a 	and	r5,r19,r5
   10700:	003f3006 	br	103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   10704:	0009883a 	mov	r4,zero
   10708:	0005883a 	mov	r2,zero
   1070c:	003f4506 	br	10424 <__alt_mem_Flash_flash_data+0xf4010424>
   10710:	418cb03a 	or	r6,r8,r6
   10714:	300cc03a 	cmpne	r6,r6,zero
   10718:	0007883a 	mov	r3,zero
   1071c:	003f6106 	br	104a4 <__alt_mem_Flash_flash_data+0xf40104a4>
   10720:	2000921e 	bne	r4,zero,1096c <__adddf3+0x624>
   10724:	80800044 	addi	r2,r16,1
   10728:	11c1ffcc 	andi	r7,r2,2047
   1072c:	01000044 	movi	r4,1
   10730:	21c0610e 	bge	r4,r7,108b8 <__adddf3+0x570>
   10734:	0101ffc4 	movi	r4,2047
   10738:	1100a326 	beq	r2,r4,109c8 <__adddf3+0x680>
   1073c:	344d883a 	add	r6,r6,r17
   10740:	3463803a 	cmpltu	r17,r6,r17
   10744:	414b883a 	add	r5,r8,r5
   10748:	2c4b883a 	add	r5,r5,r17
   1074c:	282297fa 	slli	r17,r5,31
   10750:	300cd07a 	srli	r6,r6,1
   10754:	280ad07a 	srli	r5,r5,1
   10758:	1021883a 	mov	r16,r2
   1075c:	89a2b03a 	or	r17,r17,r6
   10760:	003f1806 	br	103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   10764:	0081ffc4 	movi	r2,2047
   10768:	80bf411e 	bne	r16,r2,10470 <__alt_mem_Flash_flash_data+0xf4010470>
   1076c:	003f1506 	br	103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   10770:	80bff844 	addi	r2,r16,-31
   10774:	00c00804 	movi	r3,32
   10778:	9884d83a 	srl	r2,r19,r2
   1077c:	28c04a26 	beq	r5,r3,108a8 <__adddf3+0x560>
   10780:	00c00fc4 	movi	r3,63
   10784:	1c21c83a 	sub	r16,r3,r16
   10788:	9c26983a 	sll	r19,r19,r16
   1078c:	9c62b03a 	or	r17,r19,r17
   10790:	8822c03a 	cmpne	r17,r17,zero
   10794:	88a2b03a 	or	r17,r17,r2
   10798:	000b883a 	mov	r5,zero
   1079c:	0021883a 	mov	r16,zero
   107a0:	003fb406 	br	10674 <__alt_mem_Flash_flash_data+0xf4010674>
   107a4:	18bff804 	addi	r2,r3,-32
   107a8:	01000804 	movi	r4,32
   107ac:	4084d83a 	srl	r2,r8,r2
   107b0:	19003f26 	beq	r3,r4,108b0 <__adddf3+0x568>
   107b4:	01001004 	movi	r4,64
   107b8:	20c7c83a 	sub	r3,r4,r3
   107bc:	40d0983a 	sll	r8,r8,r3
   107c0:	418cb03a 	or	r6,r8,r6
   107c4:	300cc03a 	cmpne	r6,r6,zero
   107c8:	308cb03a 	or	r6,r6,r2
   107cc:	0007883a 	mov	r3,zero
   107d0:	003f3406 	br	104a4 <__alt_mem_Flash_flash_data+0xf40104a4>
   107d4:	80002326 	beq	r16,zero,10864 <__adddf3+0x51c>
   107d8:	0101ffc4 	movi	r4,2047
   107dc:	11005e26 	beq	r2,r4,10958 <__adddf3+0x610>
   107e0:	00c7c83a 	sub	r3,zero,r3
   107e4:	29402034 	orhi	r5,r5,128
   107e8:	01000e04 	movi	r4,56
   107ec:	20c07216 	blt	r4,r3,109b8 <__adddf3+0x670>
   107f0:	010007c4 	movi	r4,31
   107f4:	20c0ce16 	blt	r4,r3,10b30 <__adddf3+0x7e8>
   107f8:	01000804 	movi	r4,32
   107fc:	20c9c83a 	sub	r4,r4,r3
   10800:	2914983a 	sll	r10,r5,r4
   10804:	88d2d83a 	srl	r9,r17,r3
   10808:	8908983a 	sll	r4,r17,r4
   1080c:	28c6d83a 	srl	r3,r5,r3
   10810:	5262b03a 	or	r17,r10,r9
   10814:	2008c03a 	cmpne	r4,r4,zero
   10818:	8922b03a 	or	r17,r17,r4
   1081c:	3463c83a 	sub	r17,r6,r17
   10820:	40c7c83a 	sub	r3,r8,r3
   10824:	344d803a 	cmpltu	r6,r6,r17
   10828:	198bc83a 	sub	r5,r3,r6
   1082c:	1021883a 	mov	r16,r2
   10830:	3825883a 	mov	r18,r7
   10834:	003f2006 	br	104b8 <__alt_mem_Flash_flash_data+0xf40104b8>
   10838:	9886b03a 	or	r3,r19,r2
   1083c:	1800141e 	bne	r3,zero,10890 <__adddf3+0x548>
   10840:	0007883a 	mov	r3,zero
   10844:	000b883a 	mov	r5,zero
   10848:	0023883a 	mov	r17,zero
   1084c:	0021883a 	mov	r16,zero
   10850:	003f3c06 	br	10544 <__alt_mem_Flash_flash_data+0xf4010544>
   10854:	418cb03a 	or	r6,r8,r6
   10858:	300cc03a 	cmpne	r6,r6,zero
   1085c:	0011883a 	mov	r8,zero
   10860:	003f5606 	br	105bc <__alt_mem_Flash_flash_data+0xf40105bc>
   10864:	2c48b03a 	or	r4,r5,r17
   10868:	20003b26 	beq	r4,zero,10958 <__adddf3+0x610>
   1086c:	00c6303a 	nor	r3,zero,r3
   10870:	1800371e 	bne	r3,zero,10950 <__adddf3+0x608>
   10874:	3463c83a 	sub	r17,r6,r17
   10878:	414bc83a 	sub	r5,r8,r5
   1087c:	344d803a 	cmpltu	r6,r6,r17
   10880:	298bc83a 	sub	r5,r5,r6
   10884:	1021883a 	mov	r16,r2
   10888:	3825883a 	mov	r18,r7
   1088c:	003f0a06 	br	104b8 <__alt_mem_Flash_flash_data+0xf40104b8>
   10890:	1023883a 	mov	r17,r2
   10894:	003f0d06 	br	104cc <__alt_mem_Flash_flash_data+0xf40104cc>
   10898:	0007883a 	mov	r3,zero
   1089c:	000b883a 	mov	r5,zero
   108a0:	0023883a 	mov	r17,zero
   108a4:	003f2706 	br	10544 <__alt_mem_Flash_flash_data+0xf4010544>
   108a8:	0027883a 	mov	r19,zero
   108ac:	003fb706 	br	1078c <__alt_mem_Flash_flash_data+0xf401078c>
   108b0:	0011883a 	mov	r8,zero
   108b4:	003fc206 	br	107c0 <__alt_mem_Flash_flash_data+0xf40107c0>
   108b8:	2c44b03a 	or	r2,r5,r17
   108bc:	8000871e 	bne	r16,zero,10adc <__adddf3+0x794>
   108c0:	1000b126 	beq	r2,zero,10b88 <__adddf3+0x840>
   108c4:	4184b03a 	or	r2,r8,r6
   108c8:	103ebe26 	beq	r2,zero,103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   108cc:	3445883a 	add	r2,r6,r17
   108d0:	1463803a 	cmpltu	r17,r2,r17
   108d4:	414b883a 	add	r5,r8,r5
   108d8:	2c4b883a 	add	r5,r5,r17
   108dc:	28c0202c 	andhi	r3,r5,128
   108e0:	1023883a 	mov	r17,r2
   108e4:	183f6326 	beq	r3,zero,10674 <__alt_mem_Flash_flash_data+0xf4010674>
   108e8:	00bfe034 	movhi	r2,65408
   108ec:	10bfffc4 	addi	r2,r2,-1
   108f0:	2021883a 	mov	r16,r4
   108f4:	288a703a 	and	r5,r5,r2
   108f8:	003eb206 	br	103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   108fc:	2c44b03a 	or	r2,r5,r17
   10900:	8000251e 	bne	r16,zero,10998 <__adddf3+0x650>
   10904:	10004b1e 	bne	r2,zero,10a34 <__adddf3+0x6ec>
   10908:	4184b03a 	or	r2,r8,r6
   1090c:	103fe226 	beq	r2,zero,10898 <__alt_mem_Flash_flash_data+0xf4010898>
   10910:	400b883a 	mov	r5,r8
   10914:	3023883a 	mov	r17,r6
   10918:	3825883a 	mov	r18,r7
   1091c:	003ea906 	br	103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   10920:	20bff804 	addi	r2,r4,-32
   10924:	01c00804 	movi	r7,32
   10928:	4084d83a 	srl	r2,r8,r2
   1092c:	21c07e26 	beq	r4,r7,10b28 <__adddf3+0x7e0>
   10930:	01c01004 	movi	r7,64
   10934:	3909c83a 	sub	r4,r7,r4
   10938:	4110983a 	sll	r8,r8,r4
   1093c:	418cb03a 	or	r6,r8,r6
   10940:	300cc03a 	cmpne	r6,r6,zero
   10944:	308cb03a 	or	r6,r6,r2
   10948:	0011883a 	mov	r8,zero
   1094c:	003f1b06 	br	105bc <__alt_mem_Flash_flash_data+0xf40105bc>
   10950:	0101ffc4 	movi	r4,2047
   10954:	113fa41e 	bne	r2,r4,107e8 <__alt_mem_Flash_flash_data+0xf40107e8>
   10958:	400b883a 	mov	r5,r8
   1095c:	3023883a 	mov	r17,r6
   10960:	1021883a 	mov	r16,r2
   10964:	3825883a 	mov	r18,r7
   10968:	003e9606 	br	103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   1096c:	80001a1e 	bne	r16,zero,109d8 <__adddf3+0x690>
   10970:	2c4eb03a 	or	r7,r5,r17
   10974:	38005526 	beq	r7,zero,10acc <__adddf3+0x784>
   10978:	0108303a 	nor	r4,zero,r4
   1097c:	2000511e 	bne	r4,zero,10ac4 <__adddf3+0x77c>
   10980:	89a3883a 	add	r17,r17,r6
   10984:	414b883a 	add	r5,r8,r5
   10988:	898d803a 	cmpltu	r6,r17,r6
   1098c:	298b883a 	add	r5,r5,r6
   10990:	1021883a 	mov	r16,r2
   10994:	003f0e06 	br	105d0 <__alt_mem_Flash_flash_data+0xf40105d0>
   10998:	1000341e 	bne	r2,zero,10a6c <__adddf3+0x724>
   1099c:	4184b03a 	or	r2,r8,r6
   109a0:	10006f26 	beq	r2,zero,10b60 <__adddf3+0x818>
   109a4:	400b883a 	mov	r5,r8
   109a8:	3023883a 	mov	r17,r6
   109ac:	3825883a 	mov	r18,r7
   109b0:	0401ffc4 	movi	r16,2047
   109b4:	003e8306 	br	103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   109b8:	2c62b03a 	or	r17,r5,r17
   109bc:	8822c03a 	cmpne	r17,r17,zero
   109c0:	0007883a 	mov	r3,zero
   109c4:	003f9506 	br	1081c <__alt_mem_Flash_flash_data+0xf401081c>
   109c8:	1021883a 	mov	r16,r2
   109cc:	000b883a 	mov	r5,zero
   109d0:	0023883a 	mov	r17,zero
   109d4:	003edb06 	br	10544 <__alt_mem_Flash_flash_data+0xf4010544>
   109d8:	01c1ffc4 	movi	r7,2047
   109dc:	11c03b26 	beq	r2,r7,10acc <__adddf3+0x784>
   109e0:	0109c83a 	sub	r4,zero,r4
   109e4:	29402034 	orhi	r5,r5,128
   109e8:	01c00e04 	movi	r7,56
   109ec:	39006216 	blt	r7,r4,10b78 <__adddf3+0x830>
   109f0:	01c007c4 	movi	r7,31
   109f4:	39006b16 	blt	r7,r4,10ba4 <__adddf3+0x85c>
   109f8:	01c00804 	movi	r7,32
   109fc:	390fc83a 	sub	r7,r7,r4
   10a00:	29d4983a 	sll	r10,r5,r7
   10a04:	8912d83a 	srl	r9,r17,r4
   10a08:	89ce983a 	sll	r7,r17,r7
   10a0c:	2908d83a 	srl	r4,r5,r4
   10a10:	5262b03a 	or	r17,r10,r9
   10a14:	380ac03a 	cmpne	r5,r7,zero
   10a18:	8962b03a 	or	r17,r17,r5
   10a1c:	89a3883a 	add	r17,r17,r6
   10a20:	2211883a 	add	r8,r4,r8
   10a24:	898d803a 	cmpltu	r6,r17,r6
   10a28:	418b883a 	add	r5,r8,r6
   10a2c:	1021883a 	mov	r16,r2
   10a30:	003ee706 	br	105d0 <__alt_mem_Flash_flash_data+0xf40105d0>
   10a34:	4184b03a 	or	r2,r8,r6
   10a38:	103e6226 	beq	r2,zero,103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   10a3c:	8987c83a 	sub	r3,r17,r6
   10a40:	88c9803a 	cmpltu	r4,r17,r3
   10a44:	2a05c83a 	sub	r2,r5,r8
   10a48:	1105c83a 	sub	r2,r2,r4
   10a4c:	1100202c 	andhi	r4,r2,128
   10a50:	203f0426 	beq	r4,zero,10664 <__alt_mem_Flash_flash_data+0xf4010664>
   10a54:	3463c83a 	sub	r17,r6,r17
   10a58:	414bc83a 	sub	r5,r8,r5
   10a5c:	344d803a 	cmpltu	r6,r6,r17
   10a60:	298bc83a 	sub	r5,r5,r6
   10a64:	3825883a 	mov	r18,r7
   10a68:	003e5606 	br	103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   10a6c:	4184b03a 	or	r2,r8,r6
   10a70:	10002b26 	beq	r2,zero,10b20 <__adddf3+0x7d8>
   10a74:	2804d0fa 	srli	r2,r5,3
   10a78:	8822d0fa 	srli	r17,r17,3
   10a7c:	280a977a 	slli	r5,r5,29
   10a80:	10c0022c 	andhi	r3,r2,8
   10a84:	2c62b03a 	or	r17,r5,r17
   10a88:	18000826 	beq	r3,zero,10aac <__adddf3+0x764>
   10a8c:	4008d0fa 	srli	r4,r8,3
   10a90:	20c0022c 	andhi	r3,r4,8
   10a94:	1800051e 	bne	r3,zero,10aac <__adddf3+0x764>
   10a98:	300cd0fa 	srli	r6,r6,3
   10a9c:	4010977a 	slli	r8,r8,29
   10aa0:	2005883a 	mov	r2,r4
   10aa4:	3825883a 	mov	r18,r7
   10aa8:	41a2b03a 	or	r17,r8,r6
   10aac:	880ad77a 	srli	r5,r17,29
   10ab0:	100490fa 	slli	r2,r2,3
   10ab4:	882290fa 	slli	r17,r17,3
   10ab8:	0401ffc4 	movi	r16,2047
   10abc:	288ab03a 	or	r5,r5,r2
   10ac0:	003e4006 	br	103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   10ac4:	01c1ffc4 	movi	r7,2047
   10ac8:	11ffc71e 	bne	r2,r7,109e8 <__alt_mem_Flash_flash_data+0xf40109e8>
   10acc:	400b883a 	mov	r5,r8
   10ad0:	3023883a 	mov	r17,r6
   10ad4:	1021883a 	mov	r16,r2
   10ad8:	003e3a06 	br	103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   10adc:	10002d26 	beq	r2,zero,10b94 <__adddf3+0x84c>
   10ae0:	4184b03a 	or	r2,r8,r6
   10ae4:	10000e26 	beq	r2,zero,10b20 <__adddf3+0x7d8>
   10ae8:	2804d0fa 	srli	r2,r5,3
   10aec:	8822d0fa 	srli	r17,r17,3
   10af0:	280a977a 	slli	r5,r5,29
   10af4:	10c0022c 	andhi	r3,r2,8
   10af8:	2c62b03a 	or	r17,r5,r17
   10afc:	183feb26 	beq	r3,zero,10aac <__alt_mem_Flash_flash_data+0xf4010aac>
   10b00:	4008d0fa 	srli	r4,r8,3
   10b04:	20c0022c 	andhi	r3,r4,8
   10b08:	183fe81e 	bne	r3,zero,10aac <__alt_mem_Flash_flash_data+0xf4010aac>
   10b0c:	300cd0fa 	srli	r6,r6,3
   10b10:	4010977a 	slli	r8,r8,29
   10b14:	2005883a 	mov	r2,r4
   10b18:	41a2b03a 	or	r17,r8,r6
   10b1c:	003fe306 	br	10aac <__alt_mem_Flash_flash_data+0xf4010aac>
   10b20:	0401ffc4 	movi	r16,2047
   10b24:	003e2706 	br	103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   10b28:	0011883a 	mov	r8,zero
   10b2c:	003f8306 	br	1093c <__alt_mem_Flash_flash_data+0xf401093c>
   10b30:	193ff804 	addi	r4,r3,-32
   10b34:	02400804 	movi	r9,32
   10b38:	2908d83a 	srl	r4,r5,r4
   10b3c:	1a402526 	beq	r3,r9,10bd4 <__adddf3+0x88c>
   10b40:	02401004 	movi	r9,64
   10b44:	48c7c83a 	sub	r3,r9,r3
   10b48:	28ca983a 	sll	r5,r5,r3
   10b4c:	2c62b03a 	or	r17,r5,r17
   10b50:	8822c03a 	cmpne	r17,r17,zero
   10b54:	8922b03a 	or	r17,r17,r4
   10b58:	0007883a 	mov	r3,zero
   10b5c:	003f2f06 	br	1081c <__alt_mem_Flash_flash_data+0xf401081c>
   10b60:	01402034 	movhi	r5,128
   10b64:	0007883a 	mov	r3,zero
   10b68:	297fffc4 	addi	r5,r5,-1
   10b6c:	047ffe04 	movi	r17,-8
   10b70:	0401ffc4 	movi	r16,2047
   10b74:	003e7306 	br	10544 <__alt_mem_Flash_flash_data+0xf4010544>
   10b78:	2c62b03a 	or	r17,r5,r17
   10b7c:	8822c03a 	cmpne	r17,r17,zero
   10b80:	0009883a 	mov	r4,zero
   10b84:	003fa506 	br	10a1c <__alt_mem_Flash_flash_data+0xf4010a1c>
   10b88:	400b883a 	mov	r5,r8
   10b8c:	3023883a 	mov	r17,r6
   10b90:	003e0c06 	br	103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   10b94:	400b883a 	mov	r5,r8
   10b98:	3023883a 	mov	r17,r6
   10b9c:	0401ffc4 	movi	r16,2047
   10ba0:	003e0806 	br	103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   10ba4:	21fff804 	addi	r7,r4,-32
   10ba8:	02400804 	movi	r9,32
   10bac:	29ced83a 	srl	r7,r5,r7
   10bb0:	22400a26 	beq	r4,r9,10bdc <__adddf3+0x894>
   10bb4:	02401004 	movi	r9,64
   10bb8:	4909c83a 	sub	r4,r9,r4
   10bbc:	290a983a 	sll	r5,r5,r4
   10bc0:	2c62b03a 	or	r17,r5,r17
   10bc4:	8822c03a 	cmpne	r17,r17,zero
   10bc8:	89e2b03a 	or	r17,r17,r7
   10bcc:	0009883a 	mov	r4,zero
   10bd0:	003f9206 	br	10a1c <__alt_mem_Flash_flash_data+0xf4010a1c>
   10bd4:	000b883a 	mov	r5,zero
   10bd8:	003fdc06 	br	10b4c <__alt_mem_Flash_flash_data+0xf4010b4c>
   10bdc:	000b883a 	mov	r5,zero
   10be0:	003ff706 	br	10bc0 <__alt_mem_Flash_flash_data+0xf4010bc0>

00010be4 <__divdf3>:
   10be4:	defff204 	addi	sp,sp,-56
   10be8:	dd000815 	stw	r20,32(sp)
   10bec:	2828d53a 	srli	r20,r5,20
   10bf0:	dd800a15 	stw	r22,40(sp)
   10bf4:	282cd7fa 	srli	r22,r5,31
   10bf8:	dc000415 	stw	r16,16(sp)
   10bfc:	04000434 	movhi	r16,16
   10c00:	df000c15 	stw	fp,48(sp)
   10c04:	dcc00715 	stw	r19,28(sp)
   10c08:	dc800615 	stw	r18,24(sp)
   10c0c:	dc400515 	stw	r17,20(sp)
   10c10:	843fffc4 	addi	r16,r16,-1
   10c14:	dfc00d15 	stw	ra,52(sp)
   10c18:	ddc00b15 	stw	r23,44(sp)
   10c1c:	dd400915 	stw	r21,36(sp)
   10c20:	a501ffcc 	andi	r20,r20,2047
   10c24:	2025883a 	mov	r18,r4
   10c28:	2027883a 	mov	r19,r4
   10c2c:	2c22703a 	and	r17,r5,r16
   10c30:	b7003fcc 	andi	fp,r22,255
   10c34:	a0005e26 	beq	r20,zero,10db0 <__divdf3+0x1cc>
   10c38:	0081ffc4 	movi	r2,2047
   10c3c:	a0803526 	beq	r20,r2,10d14 <__divdf3+0x130>
   10c40:	8c000434 	orhi	r16,r17,16
   10c44:	2004d77a 	srli	r2,r4,29
   10c48:	802090fa 	slli	r16,r16,3
   10c4c:	202690fa 	slli	r19,r4,3
   10c50:	a53f0044 	addi	r20,r20,-1023
   10c54:	80a2b03a 	or	r17,r16,r2
   10c58:	0025883a 	mov	r18,zero
   10c5c:	0011883a 	mov	r8,zero
   10c60:	380ad53a 	srli	r5,r7,20
   10c64:	382ed7fa 	srli	r23,r7,31
   10c68:	04000434 	movhi	r16,16
   10c6c:	843fffc4 	addi	r16,r16,-1
   10c70:	2941ffcc 	andi	r5,r5,2047
   10c74:	302b883a 	mov	r21,r6
   10c78:	3c20703a 	and	r16,r7,r16
   10c7c:	ba403fcc 	andi	r9,r23,255
   10c80:	28006726 	beq	r5,zero,10e20 <__divdf3+0x23c>
   10c84:	0081ffc4 	movi	r2,2047
   10c88:	28805f26 	beq	r5,r2,10e08 <__divdf3+0x224>
   10c8c:	84000434 	orhi	r16,r16,16
   10c90:	3004d77a 	srli	r2,r6,29
   10c94:	802090fa 	slli	r16,r16,3
   10c98:	302a90fa 	slli	r21,r6,3
   10c9c:	297f0044 	addi	r5,r5,-1023
   10ca0:	80a0b03a 	or	r16,r16,r2
   10ca4:	000f883a 	mov	r7,zero
   10ca8:	3c86b03a 	or	r3,r7,r18
   10cac:	180690ba 	slli	r3,r3,2
   10cb0:	00800074 	movhi	r2,1
   10cb4:	10833504 	addi	r2,r2,3284
   10cb8:	1887883a 	add	r3,r3,r2
   10cbc:	18c00017 	ldw	r3,0(r3)
   10cc0:	b5c8f03a 	xor	r4,r22,r23
   10cc4:	200d883a 	mov	r6,r4
   10cc8:	24803fcc 	andi	r18,r4,255
   10ccc:	a169c83a 	sub	r20,r20,r5
   10cd0:	1800683a 	jmp	r3
   10cd4:	00010f1c 	xori	zero,zero,1084
   10cd8:	00010d4c 	andi	zero,zero,1077
   10cdc:	00010ee0 	cmpeqi	zero,zero,1083
   10ce0:	00010d30 	cmpltui	zero,zero,1076
   10ce4:	00010ee0 	cmpeqi	zero,zero,1083
   10ce8:	00010eb4 	movhi	zero,1082
   10cec:	00010ee0 	cmpeqi	zero,zero,1083
   10cf0:	00010d30 	cmpltui	zero,zero,1076
   10cf4:	00010d4c 	andi	zero,zero,1077
   10cf8:	00010d4c 	andi	zero,zero,1077
   10cfc:	00010eb4 	movhi	zero,1082
   10d00:	00010d30 	cmpltui	zero,zero,1076
   10d04:	00010d40 	call	10d4 <endSingleplayer+0xf0>
   10d08:	00010d40 	call	10d4 <endSingleplayer+0xf0>
   10d0c:	00010d40 	call	10d4 <endSingleplayer+0xf0>
   10d10:	00010ef0 	cmpltui	zero,zero,1083
   10d14:	8904b03a 	or	r2,r17,r4
   10d18:	1000631e 	bne	r2,zero,10ea8 <__divdf3+0x2c4>
   10d1c:	04800204 	movi	r18,8
   10d20:	0023883a 	mov	r17,zero
   10d24:	0027883a 	mov	r19,zero
   10d28:	02000084 	movi	r8,2
   10d2c:	003fcc06 	br	10c60 <__alt_mem_Flash_flash_data+0xf4010c60>
   10d30:	8023883a 	mov	r17,r16
   10d34:	a827883a 	mov	r19,r21
   10d38:	4839883a 	mov	fp,r9
   10d3c:	3811883a 	mov	r8,r7
   10d40:	00800084 	movi	r2,2
   10d44:	40812a1e 	bne	r8,r2,111f0 <__divdf3+0x60c>
   10d48:	e025883a 	mov	r18,fp
   10d4c:	9180004c 	andi	r6,r18,1
   10d50:	0101ffc4 	movi	r4,2047
   10d54:	000b883a 	mov	r5,zero
   10d58:	0027883a 	mov	r19,zero
   10d5c:	2008953a 	slli	r4,r4,20
   10d60:	30c03fcc 	andi	r3,r6,255
   10d64:	04000434 	movhi	r16,16
   10d68:	180697fa 	slli	r3,r3,31
   10d6c:	843fffc4 	addi	r16,r16,-1
   10d70:	2c20703a 	and	r16,r5,r16
   10d74:	8120b03a 	or	r16,r16,r4
   10d78:	80c6b03a 	or	r3,r16,r3
   10d7c:	9805883a 	mov	r2,r19
   10d80:	dfc00d17 	ldw	ra,52(sp)
   10d84:	df000c17 	ldw	fp,48(sp)
   10d88:	ddc00b17 	ldw	r23,44(sp)
   10d8c:	dd800a17 	ldw	r22,40(sp)
   10d90:	dd400917 	ldw	r21,36(sp)
   10d94:	dd000817 	ldw	r20,32(sp)
   10d98:	dcc00717 	ldw	r19,28(sp)
   10d9c:	dc800617 	ldw	r18,24(sp)
   10da0:	dc400517 	ldw	r17,20(sp)
   10da4:	dc000417 	ldw	r16,16(sp)
   10da8:	dec00e04 	addi	sp,sp,56
   10dac:	f800283a 	ret
   10db0:	8904b03a 	or	r2,r17,r4
   10db4:	10003726 	beq	r2,zero,10e94 <__divdf3+0x2b0>
   10db8:	88011c26 	beq	r17,zero,1122c <__divdf3+0x648>
   10dbc:	8809883a 	mov	r4,r17
   10dc0:	d9800315 	stw	r6,12(sp)
   10dc4:	d9c00115 	stw	r7,4(sp)
   10dc8:	00128e40 	call	128e4 <__clzsi2>
   10dcc:	d9800317 	ldw	r6,12(sp)
   10dd0:	d9c00117 	ldw	r7,4(sp)
   10dd4:	1007883a 	mov	r3,r2
   10dd8:	01000a04 	movi	r4,40
   10ddc:	1cfffe04 	addi	r19,r3,-8
   10de0:	20c9c83a 	sub	r4,r4,r3
   10de4:	8cca983a 	sll	r5,r17,r19
   10de8:	9108d83a 	srl	r4,r18,r4
   10dec:	94e6983a 	sll	r19,r18,r19
   10df0:	2162b03a 	or	r17,r4,r5
   10df4:	053f0344 	movi	r20,-1011
   10df8:	a0e9c83a 	sub	r20,r20,r3
   10dfc:	0025883a 	mov	r18,zero
   10e00:	0011883a 	mov	r8,zero
   10e04:	003f9606 	br	10c60 <__alt_mem_Flash_flash_data+0xf4010c60>
   10e08:	8184b03a 	or	r2,r16,r6
   10e0c:	10001f1e 	bne	r2,zero,10e8c <__divdf3+0x2a8>
   10e10:	0021883a 	mov	r16,zero
   10e14:	002b883a 	mov	r21,zero
   10e18:	01c00084 	movi	r7,2
   10e1c:	003fa206 	br	10ca8 <__alt_mem_Flash_flash_data+0xf4010ca8>
   10e20:	8184b03a 	or	r2,r16,r6
   10e24:	10001526 	beq	r2,zero,10e7c <__divdf3+0x298>
   10e28:	80010c26 	beq	r16,zero,1125c <__divdf3+0x678>
   10e2c:	8009883a 	mov	r4,r16
   10e30:	d9800315 	stw	r6,12(sp)
   10e34:	da000215 	stw	r8,8(sp)
   10e38:	da400015 	stw	r9,0(sp)
   10e3c:	00128e40 	call	128e4 <__clzsi2>
   10e40:	d9800317 	ldw	r6,12(sp)
   10e44:	da000217 	ldw	r8,8(sp)
   10e48:	da400017 	ldw	r9,0(sp)
   10e4c:	1007883a 	mov	r3,r2
   10e50:	01000a04 	movi	r4,40
   10e54:	1d7ffe04 	addi	r21,r3,-8
   10e58:	20c9c83a 	sub	r4,r4,r3
   10e5c:	8560983a 	sll	r16,r16,r21
   10e60:	3108d83a 	srl	r4,r6,r4
   10e64:	356a983a 	sll	r21,r6,r21
   10e68:	2420b03a 	or	r16,r4,r16
   10e6c:	017f0344 	movi	r5,-1011
   10e70:	28cbc83a 	sub	r5,r5,r3
   10e74:	000f883a 	mov	r7,zero
   10e78:	003f8b06 	br	10ca8 <__alt_mem_Flash_flash_data+0xf4010ca8>
   10e7c:	0021883a 	mov	r16,zero
   10e80:	002b883a 	mov	r21,zero
   10e84:	01c00044 	movi	r7,1
   10e88:	003f8706 	br	10ca8 <__alt_mem_Flash_flash_data+0xf4010ca8>
   10e8c:	01c000c4 	movi	r7,3
   10e90:	003f8506 	br	10ca8 <__alt_mem_Flash_flash_data+0xf4010ca8>
   10e94:	04800104 	movi	r18,4
   10e98:	0023883a 	mov	r17,zero
   10e9c:	0027883a 	mov	r19,zero
   10ea0:	02000044 	movi	r8,1
   10ea4:	003f6e06 	br	10c60 <__alt_mem_Flash_flash_data+0xf4010c60>
   10ea8:	04800304 	movi	r18,12
   10eac:	020000c4 	movi	r8,3
   10eb0:	003f6b06 	br	10c60 <__alt_mem_Flash_flash_data+0xf4010c60>
   10eb4:	01400434 	movhi	r5,16
   10eb8:	000d883a 	mov	r6,zero
   10ebc:	297fffc4 	addi	r5,r5,-1
   10ec0:	04ffffc4 	movi	r19,-1
   10ec4:	0101ffc4 	movi	r4,2047
   10ec8:	003fa406 	br	10d5c <__alt_mem_Flash_flash_data+0xf4010d5c>
   10ecc:	043f0084 	movi	r16,-1022
   10ed0:	8521c83a 	sub	r16,r16,r20
   10ed4:	00800e04 	movi	r2,56
   10ed8:	1401200e 	bge	r2,r16,1135c <__divdf3+0x778>
   10edc:	9180004c 	andi	r6,r18,1
   10ee0:	0009883a 	mov	r4,zero
   10ee4:	000b883a 	mov	r5,zero
   10ee8:	0027883a 	mov	r19,zero
   10eec:	003f9b06 	br	10d5c <__alt_mem_Flash_flash_data+0xf4010d5c>
   10ef0:	8880022c 	andhi	r2,r17,8
   10ef4:	1000c726 	beq	r2,zero,11214 <__divdf3+0x630>
   10ef8:	8080022c 	andhi	r2,r16,8
   10efc:	1000c51e 	bne	r2,zero,11214 <__divdf3+0x630>
   10f00:	00800434 	movhi	r2,16
   10f04:	81400234 	orhi	r5,r16,8
   10f08:	10bfffc4 	addi	r2,r2,-1
   10f0c:	b80d883a 	mov	r6,r23
   10f10:	288a703a 	and	r5,r5,r2
   10f14:	a827883a 	mov	r19,r21
   10f18:	003fea06 	br	10ec4 <__alt_mem_Flash_flash_data+0xf4010ec4>
   10f1c:	8440ea36 	bltu	r16,r17,112c8 <__divdf3+0x6e4>
   10f20:	8c00e826 	beq	r17,r16,112c4 <__divdf3+0x6e0>
   10f24:	a53fffc4 	addi	r20,r20,-1
   10f28:	882d883a 	mov	r22,r17
   10f2c:	000d883a 	mov	r6,zero
   10f30:	a804d63a 	srli	r2,r21,24
   10f34:	8020923a 	slli	r16,r16,8
   10f38:	b009883a 	mov	r4,r22
   10f3c:	d9800315 	stw	r6,12(sp)
   10f40:	1420b03a 	or	r16,r2,r16
   10f44:	802ed43a 	srli	r23,r16,16
   10f48:	873fffcc 	andi	fp,r16,65535
   10f4c:	a82a923a 	slli	r21,r21,8
   10f50:	b80b883a 	mov	r5,r23
   10f54:	00103380 	call	10338 <__udivsi3>
   10f58:	b009883a 	mov	r4,r22
   10f5c:	b80b883a 	mov	r5,r23
   10f60:	1023883a 	mov	r17,r2
   10f64:	00103400 	call	10340 <__umodsi3>
   10f68:	1004943a 	slli	r2,r2,16
   10f6c:	9808d43a 	srli	r4,r19,16
   10f70:	8f2d383a 	mul	r22,r17,fp
   10f74:	d9800317 	ldw	r6,12(sp)
   10f78:	1106b03a 	or	r3,r2,r4
   10f7c:	1d80062e 	bgeu	r3,r22,10f98 <__divdf3+0x3b4>
   10f80:	1c07883a 	add	r3,r3,r16
   10f84:	88bfffc4 	addi	r2,r17,-1
   10f88:	1c00dc36 	bltu	r3,r16,112fc <__divdf3+0x718>
   10f8c:	1d80db2e 	bgeu	r3,r22,112fc <__divdf3+0x718>
   10f90:	8c7fff84 	addi	r17,r17,-2
   10f94:	1c07883a 	add	r3,r3,r16
   10f98:	1dadc83a 	sub	r22,r3,r22
   10f9c:	b009883a 	mov	r4,r22
   10fa0:	b80b883a 	mov	r5,r23
   10fa4:	d9800315 	stw	r6,12(sp)
   10fa8:	00103380 	call	10338 <__udivsi3>
   10fac:	b009883a 	mov	r4,r22
   10fb0:	b80b883a 	mov	r5,r23
   10fb4:	d8800015 	stw	r2,0(sp)
   10fb8:	00103400 	call	10340 <__umodsi3>
   10fbc:	da400017 	ldw	r9,0(sp)
   10fc0:	1004943a 	slli	r2,r2,16
   10fc4:	9cffffcc 	andi	r19,r19,65535
   10fc8:	4f07383a 	mul	r3,r9,fp
   10fcc:	14c8b03a 	or	r4,r2,r19
   10fd0:	d9800317 	ldw	r6,12(sp)
   10fd4:	20c0062e 	bgeu	r4,r3,10ff0 <__divdf3+0x40c>
   10fd8:	2409883a 	add	r4,r4,r16
   10fdc:	48bfffc4 	addi	r2,r9,-1
   10fe0:	2400c436 	bltu	r4,r16,112f4 <__divdf3+0x710>
   10fe4:	20c0c32e 	bgeu	r4,r3,112f4 <__divdf3+0x710>
   10fe8:	4a7fff84 	addi	r9,r9,-2
   10fec:	2409883a 	add	r4,r4,r16
   10ff0:	8822943a 	slli	r17,r17,16
   10ff4:	a80ed43a 	srli	r7,r21,16
   10ff8:	aa3fffcc 	andi	r8,r21,65535
   10ffc:	4c62b03a 	or	r17,r9,r17
   11000:	8816d43a 	srli	r11,r17,16
   11004:	897fffcc 	andi	r5,r17,65535
   11008:	2a15383a 	mul	r10,r5,r8
   1100c:	5a19383a 	mul	r12,r11,r8
   11010:	29cb383a 	mul	r5,r5,r7
   11014:	5012d43a 	srli	r9,r10,16
   11018:	20c5c83a 	sub	r2,r4,r3
   1101c:	614b883a 	add	r5,r12,r5
   11020:	2a4b883a 	add	r5,r5,r9
   11024:	59c7383a 	mul	r3,r11,r7
   11028:	2b00022e 	bgeu	r5,r12,11034 <__divdf3+0x450>
   1102c:	01000074 	movhi	r4,1
   11030:	1907883a 	add	r3,r3,r4
   11034:	2808d43a 	srli	r4,r5,16
   11038:	280a943a 	slli	r5,r5,16
   1103c:	54ffffcc 	andi	r19,r10,65535
   11040:	1907883a 	add	r3,r3,r4
   11044:	2ccb883a 	add	r5,r5,r19
   11048:	10c09336 	bltu	r2,r3,11298 <__divdf3+0x6b4>
   1104c:	10c0ad26 	beq	r2,r3,11304 <__divdf3+0x720>
   11050:	10c7c83a 	sub	r3,r2,r3
   11054:	3167c83a 	sub	r19,r6,r5
   11058:	34ed803a 	cmpltu	r22,r6,r19
   1105c:	1dadc83a 	sub	r22,r3,r22
   11060:	b400b226 	beq	r22,r16,1132c <__divdf3+0x748>
   11064:	b009883a 	mov	r4,r22
   11068:	b80b883a 	mov	r5,r23
   1106c:	d9c00115 	stw	r7,4(sp)
   11070:	da000215 	stw	r8,8(sp)
   11074:	00103380 	call	10338 <__udivsi3>
   11078:	b009883a 	mov	r4,r22
   1107c:	b80b883a 	mov	r5,r23
   11080:	d8800315 	stw	r2,12(sp)
   11084:	00103400 	call	10340 <__umodsi3>
   11088:	d9800317 	ldw	r6,12(sp)
   1108c:	1004943a 	slli	r2,r2,16
   11090:	9808d43a 	srli	r4,r19,16
   11094:	372d383a 	mul	r22,r6,fp
   11098:	d9c00117 	ldw	r7,4(sp)
   1109c:	1106b03a 	or	r3,r2,r4
   110a0:	da000217 	ldw	r8,8(sp)
   110a4:	1d80062e 	bgeu	r3,r22,110c0 <__divdf3+0x4dc>
   110a8:	1c07883a 	add	r3,r3,r16
   110ac:	30bfffc4 	addi	r2,r6,-1
   110b0:	1c00a036 	bltu	r3,r16,11334 <__divdf3+0x750>
   110b4:	1d809f2e 	bgeu	r3,r22,11334 <__divdf3+0x750>
   110b8:	31bfff84 	addi	r6,r6,-2
   110bc:	1c07883a 	add	r3,r3,r16
   110c0:	1dadc83a 	sub	r22,r3,r22
   110c4:	b009883a 	mov	r4,r22
   110c8:	b80b883a 	mov	r5,r23
   110cc:	d9800315 	stw	r6,12(sp)
   110d0:	d9c00115 	stw	r7,4(sp)
   110d4:	da000215 	stw	r8,8(sp)
   110d8:	00103380 	call	10338 <__udivsi3>
   110dc:	b009883a 	mov	r4,r22
   110e0:	b80b883a 	mov	r5,r23
   110e4:	d8800015 	stw	r2,0(sp)
   110e8:	00103400 	call	10340 <__umodsi3>
   110ec:	da400017 	ldw	r9,0(sp)
   110f0:	1004943a 	slli	r2,r2,16
   110f4:	993fffcc 	andi	r4,r19,65535
   110f8:	4f39383a 	mul	fp,r9,fp
   110fc:	1106b03a 	or	r3,r2,r4
   11100:	d9800317 	ldw	r6,12(sp)
   11104:	d9c00117 	ldw	r7,4(sp)
   11108:	da000217 	ldw	r8,8(sp)
   1110c:	1f00062e 	bgeu	r3,fp,11128 <__divdf3+0x544>
   11110:	1c07883a 	add	r3,r3,r16
   11114:	48bfffc4 	addi	r2,r9,-1
   11118:	1c008836 	bltu	r3,r16,1133c <__divdf3+0x758>
   1111c:	1f00872e 	bgeu	r3,fp,1133c <__divdf3+0x758>
   11120:	4a7fff84 	addi	r9,r9,-2
   11124:	1c07883a 	add	r3,r3,r16
   11128:	3008943a 	slli	r4,r6,16
   1112c:	1f07c83a 	sub	r3,r3,fp
   11130:	4926b03a 	or	r19,r9,r4
   11134:	993fffcc 	andi	r4,r19,65535
   11138:	980cd43a 	srli	r6,r19,16
   1113c:	220b383a 	mul	r5,r4,r8
   11140:	21c5383a 	mul	r2,r4,r7
   11144:	3211383a 	mul	r8,r6,r8
   11148:	2808d43a 	srli	r4,r5,16
   1114c:	31cf383a 	mul	r7,r6,r7
   11150:	4085883a 	add	r2,r8,r2
   11154:	1105883a 	add	r2,r2,r4
   11158:	1200022e 	bgeu	r2,r8,11164 <__divdf3+0x580>
   1115c:	01000074 	movhi	r4,1
   11160:	390f883a 	add	r7,r7,r4
   11164:	1008d43a 	srli	r4,r2,16
   11168:	1004943a 	slli	r2,r2,16
   1116c:	297fffcc 	andi	r5,r5,65535
   11170:	390f883a 	add	r7,r7,r4
   11174:	1145883a 	add	r2,r2,r5
   11178:	19c06536 	bltu	r3,r7,11310 <__divdf3+0x72c>
   1117c:	19c09f26 	beq	r3,r7,113fc <__divdf3+0x818>
   11180:	9cc00054 	ori	r19,r19,1
   11184:	a100ffc4 	addi	r4,r20,1023
   11188:	013f500e 	bge	zero,r4,10ecc <__alt_mem_Flash_flash_data+0xf4010ecc>
   1118c:	988001cc 	andi	r2,r19,7
   11190:	10000726 	beq	r2,zero,111b0 <__divdf3+0x5cc>
   11194:	98c003cc 	andi	r3,r19,15
   11198:	00800104 	movi	r2,4
   1119c:	18800426 	beq	r3,r2,111b0 <__divdf3+0x5cc>
   111a0:	9885883a 	add	r2,r19,r2
   111a4:	14e1803a 	cmpltu	r16,r2,r19
   111a8:	8c23883a 	add	r17,r17,r16
   111ac:	1027883a 	mov	r19,r2
   111b0:	8880402c 	andhi	r2,r17,256
   111b4:	10000426 	beq	r2,zero,111c8 <__divdf3+0x5e4>
   111b8:	00bfc034 	movhi	r2,65280
   111bc:	10bfffc4 	addi	r2,r2,-1
   111c0:	a1010004 	addi	r4,r20,1024
   111c4:	88a2703a 	and	r17,r17,r2
   111c8:	0081ff84 	movi	r2,2046
   111cc:	113edf16 	blt	r2,r4,10d4c <__alt_mem_Flash_flash_data+0xf4010d4c>
   111d0:	9826d0fa 	srli	r19,r19,3
   111d4:	8804977a 	slli	r2,r17,29
   111d8:	8820927a 	slli	r16,r17,9
   111dc:	2101ffcc 	andi	r4,r4,2047
   111e0:	14e6b03a 	or	r19,r2,r19
   111e4:	800ad33a 	srli	r5,r16,12
   111e8:	9180004c 	andi	r6,r18,1
   111ec:	003edb06 	br	10d5c <__alt_mem_Flash_flash_data+0xf4010d5c>
   111f0:	008000c4 	movi	r2,3
   111f4:	4080a826 	beq	r8,r2,11498 <__divdf3+0x8b4>
   111f8:	00800044 	movi	r2,1
   111fc:	4080551e 	bne	r8,r2,11354 <__divdf3+0x770>
   11200:	e00d883a 	mov	r6,fp
   11204:	0009883a 	mov	r4,zero
   11208:	000b883a 	mov	r5,zero
   1120c:	0027883a 	mov	r19,zero
   11210:	003ed206 	br	10d5c <__alt_mem_Flash_flash_data+0xf4010d5c>
   11214:	00800434 	movhi	r2,16
   11218:	89400234 	orhi	r5,r17,8
   1121c:	10bfffc4 	addi	r2,r2,-1
   11220:	b00d883a 	mov	r6,r22
   11224:	288a703a 	and	r5,r5,r2
   11228:	003f2606 	br	10ec4 <__alt_mem_Flash_flash_data+0xf4010ec4>
   1122c:	d9800315 	stw	r6,12(sp)
   11230:	d9c00115 	stw	r7,4(sp)
   11234:	00128e40 	call	128e4 <__clzsi2>
   11238:	10c00804 	addi	r3,r2,32
   1123c:	010009c4 	movi	r4,39
   11240:	d9800317 	ldw	r6,12(sp)
   11244:	d9c00117 	ldw	r7,4(sp)
   11248:	20fee30e 	bge	r4,r3,10dd8 <__alt_mem_Flash_flash_data+0xf4010dd8>
   1124c:	117ffe04 	addi	r5,r2,-8
   11250:	9162983a 	sll	r17,r18,r5
   11254:	0027883a 	mov	r19,zero
   11258:	003ee606 	br	10df4 <__alt_mem_Flash_flash_data+0xf4010df4>
   1125c:	3009883a 	mov	r4,r6
   11260:	d9800315 	stw	r6,12(sp)
   11264:	da000215 	stw	r8,8(sp)
   11268:	da400015 	stw	r9,0(sp)
   1126c:	00128e40 	call	128e4 <__clzsi2>
   11270:	10c00804 	addi	r3,r2,32
   11274:	010009c4 	movi	r4,39
   11278:	d9800317 	ldw	r6,12(sp)
   1127c:	da000217 	ldw	r8,8(sp)
   11280:	da400017 	ldw	r9,0(sp)
   11284:	20fef20e 	bge	r4,r3,10e50 <__alt_mem_Flash_flash_data+0xf4010e50>
   11288:	10bffe04 	addi	r2,r2,-8
   1128c:	a8a0983a 	sll	r16,r21,r2
   11290:	002b883a 	mov	r21,zero
   11294:	003ef506 	br	10e6c <__alt_mem_Flash_flash_data+0xf4010e6c>
   11298:	354d883a 	add	r6,r6,r21
   1129c:	3549803a 	cmpltu	r4,r6,r21
   112a0:	2409883a 	add	r4,r4,r16
   112a4:	2089883a 	add	r4,r4,r2
   112a8:	88bfffc4 	addi	r2,r17,-1
   112ac:	81000c2e 	bgeu	r16,r4,112e0 <__divdf3+0x6fc>
   112b0:	20c04436 	bltu	r4,r3,113c4 <__divdf3+0x7e0>
   112b4:	19006f26 	beq	r3,r4,11474 <__divdf3+0x890>
   112b8:	20c7c83a 	sub	r3,r4,r3
   112bc:	1023883a 	mov	r17,r2
   112c0:	003f6406 	br	11054 <__alt_mem_Flash_flash_data+0xf4011054>
   112c4:	9d7f1736 	bltu	r19,r21,10f24 <__alt_mem_Flash_flash_data+0xf4010f24>
   112c8:	9806d07a 	srli	r3,r19,1
   112cc:	880497fa 	slli	r2,r17,31
   112d0:	980c97fa 	slli	r6,r19,31
   112d4:	882cd07a 	srli	r22,r17,1
   112d8:	18a6b03a 	or	r19,r3,r2
   112dc:	003f1406 	br	10f30 <__alt_mem_Flash_flash_data+0xf4010f30>
   112e0:	243ff51e 	bne	r4,r16,112b8 <__alt_mem_Flash_flash_data+0xf40112b8>
   112e4:	357ff22e 	bgeu	r6,r21,112b0 <__alt_mem_Flash_flash_data+0xf40112b0>
   112e8:	80c7c83a 	sub	r3,r16,r3
   112ec:	1023883a 	mov	r17,r2
   112f0:	003f5806 	br	11054 <__alt_mem_Flash_flash_data+0xf4011054>
   112f4:	1013883a 	mov	r9,r2
   112f8:	003f3d06 	br	10ff0 <__alt_mem_Flash_flash_data+0xf4010ff0>
   112fc:	1023883a 	mov	r17,r2
   11300:	003f2506 	br	10f98 <__alt_mem_Flash_flash_data+0xf4010f98>
   11304:	317fe436 	bltu	r6,r5,11298 <__alt_mem_Flash_flash_data+0xf4011298>
   11308:	0007883a 	mov	r3,zero
   1130c:	003f5106 	br	11054 <__alt_mem_Flash_flash_data+0xf4011054>
   11310:	1c07883a 	add	r3,r3,r16
   11314:	993fffc4 	addi	r4,r19,-1
   11318:	1c000a2e 	bgeu	r3,r16,11344 <__divdf3+0x760>
   1131c:	2027883a 	mov	r19,r4
   11320:	19ff971e 	bne	r3,r7,11180 <__alt_mem_Flash_flash_data+0xf4011180>
   11324:	a8bf961e 	bne	r21,r2,11180 <__alt_mem_Flash_flash_data+0xf4011180>
   11328:	003f9606 	br	11184 <__alt_mem_Flash_flash_data+0xf4011184>
   1132c:	04ffffc4 	movi	r19,-1
   11330:	003f9406 	br	11184 <__alt_mem_Flash_flash_data+0xf4011184>
   11334:	100d883a 	mov	r6,r2
   11338:	003f6106 	br	110c0 <__alt_mem_Flash_flash_data+0xf40110c0>
   1133c:	1013883a 	mov	r9,r2
   11340:	003f7906 	br	11128 <__alt_mem_Flash_flash_data+0xf4011128>
   11344:	19c02636 	bltu	r3,r7,113e0 <__divdf3+0x7fc>
   11348:	38c04d26 	beq	r7,r3,11480 <__divdf3+0x89c>
   1134c:	2027883a 	mov	r19,r4
   11350:	003f8b06 	br	11180 <__alt_mem_Flash_flash_data+0xf4011180>
   11354:	e025883a 	mov	r18,fp
   11358:	003f8a06 	br	11184 <__alt_mem_Flash_flash_data+0xf4011184>
   1135c:	008007c4 	movi	r2,31
   11360:	14002a16 	blt	r2,r16,1140c <__divdf3+0x828>
   11364:	a5010784 	addi	r20,r20,1054
   11368:	8d04983a 	sll	r2,r17,r20
   1136c:	9c06d83a 	srl	r3,r19,r16
   11370:	9d28983a 	sll	r20,r19,r20
   11374:	8c20d83a 	srl	r16,r17,r16
   11378:	1886b03a 	or	r3,r3,r2
   1137c:	a004c03a 	cmpne	r2,r20,zero
   11380:	1884b03a 	or	r2,r3,r2
   11384:	10c001cc 	andi	r3,r2,7
   11388:	18000726 	beq	r3,zero,113a8 <__divdf3+0x7c4>
   1138c:	110003cc 	andi	r4,r2,15
   11390:	00c00104 	movi	r3,4
   11394:	20c00426 	beq	r4,r3,113a8 <__divdf3+0x7c4>
   11398:	10c00104 	addi	r3,r2,4
   1139c:	1885803a 	cmpltu	r2,r3,r2
   113a0:	80a1883a 	add	r16,r16,r2
   113a4:	1805883a 	mov	r2,r3
   113a8:	80c0202c 	andhi	r3,r16,128
   113ac:	18002d26 	beq	r3,zero,11464 <__divdf3+0x880>
   113b0:	9180004c 	andi	r6,r18,1
   113b4:	01000044 	movi	r4,1
   113b8:	000b883a 	mov	r5,zero
   113bc:	0027883a 	mov	r19,zero
   113c0:	003e6606 	br	10d5c <__alt_mem_Flash_flash_data+0xf4010d5c>
   113c4:	354d883a 	add	r6,r6,r21
   113c8:	356d803a 	cmpltu	r22,r6,r21
   113cc:	b42d883a 	add	r22,r22,r16
   113d0:	b12d883a 	add	r22,r22,r4
   113d4:	8c7fff84 	addi	r17,r17,-2
   113d8:	b0c7c83a 	sub	r3,r22,r3
   113dc:	003f1d06 	br	11054 <__alt_mem_Flash_flash_data+0xf4011054>
   113e0:	ad4b883a 	add	r5,r21,r21
   113e4:	2d6b803a 	cmpltu	r21,r5,r21
   113e8:	ac2b883a 	add	r21,r21,r16
   113ec:	1d47883a 	add	r3,r3,r21
   113f0:	993fff84 	addi	r4,r19,-2
   113f4:	282b883a 	mov	r21,r5
   113f8:	003fc806 	br	1131c <__alt_mem_Flash_flash_data+0xf401131c>
   113fc:	103fc41e 	bne	r2,zero,11310 <__alt_mem_Flash_flash_data+0xf4011310>
   11400:	002b883a 	mov	r21,zero
   11404:	a8bf5e1e 	bne	r21,r2,11180 <__alt_mem_Flash_flash_data+0xf4011180>
   11408:	003f5e06 	br	11184 <__alt_mem_Flash_flash_data+0xf4011184>
   1140c:	00bef884 	movi	r2,-1054
   11410:	1505c83a 	sub	r2,r2,r20
   11414:	00c00804 	movi	r3,32
   11418:	8884d83a 	srl	r2,r17,r2
   1141c:	80c01c26 	beq	r16,r3,11490 <__divdf3+0x8ac>
   11420:	a0c10f84 	addi	r3,r20,1086
   11424:	88c6983a 	sll	r3,r17,r3
   11428:	1cc6b03a 	or	r3,r3,r19
   1142c:	1806c03a 	cmpne	r3,r3,zero
   11430:	1884b03a 	or	r2,r3,r2
   11434:	140001cc 	andi	r16,r2,7
   11438:	8000061e 	bne	r16,zero,11454 <__divdf3+0x870>
   1143c:	000b883a 	mov	r5,zero
   11440:	1004d0fa 	srli	r2,r2,3
   11444:	9180004c 	andi	r6,r18,1
   11448:	0009883a 	mov	r4,zero
   1144c:	1426b03a 	or	r19,r2,r16
   11450:	003e4206 	br	10d5c <__alt_mem_Flash_flash_data+0xf4010d5c>
   11454:	110003cc 	andi	r4,r2,15
   11458:	00c00104 	movi	r3,4
   1145c:	0021883a 	mov	r16,zero
   11460:	20ffcd1e 	bne	r4,r3,11398 <__alt_mem_Flash_flash_data+0xf4011398>
   11464:	800a927a 	slli	r5,r16,9
   11468:	8020977a 	slli	r16,r16,29
   1146c:	280ad33a 	srli	r5,r5,12
   11470:	003ff306 	br	11440 <__alt_mem_Flash_flash_data+0xf4011440>
   11474:	317fd336 	bltu	r6,r5,113c4 <__alt_mem_Flash_flash_data+0xf40113c4>
   11478:	1023883a 	mov	r17,r2
   1147c:	003fa206 	br	11308 <__alt_mem_Flash_flash_data+0xf4011308>
   11480:	a8bfd736 	bltu	r21,r2,113e0 <__alt_mem_Flash_flash_data+0xf40113e0>
   11484:	2027883a 	mov	r19,r4
   11488:	a8bf3d1e 	bne	r21,r2,11180 <__alt_mem_Flash_flash_data+0xf4011180>
   1148c:	003f3d06 	br	11184 <__alt_mem_Flash_flash_data+0xf4011184>
   11490:	0007883a 	mov	r3,zero
   11494:	003fe406 	br	11428 <__alt_mem_Flash_flash_data+0xf4011428>
   11498:	00800434 	movhi	r2,16
   1149c:	89400234 	orhi	r5,r17,8
   114a0:	10bfffc4 	addi	r2,r2,-1
   114a4:	e00d883a 	mov	r6,fp
   114a8:	288a703a 	and	r5,r5,r2
   114ac:	003e8506 	br	10ec4 <__alt_mem_Flash_flash_data+0xf4010ec4>

000114b0 <__eqdf2>:
   114b0:	2804d53a 	srli	r2,r5,20
   114b4:	3806d53a 	srli	r3,r7,20
   114b8:	02000434 	movhi	r8,16
   114bc:	423fffc4 	addi	r8,r8,-1
   114c0:	1081ffcc 	andi	r2,r2,2047
   114c4:	0241ffc4 	movi	r9,2047
   114c8:	2a14703a 	and	r10,r5,r8
   114cc:	18c1ffcc 	andi	r3,r3,2047
   114d0:	3a10703a 	and	r8,r7,r8
   114d4:	280ad7fa 	srli	r5,r5,31
   114d8:	380ed7fa 	srli	r7,r7,31
   114dc:	12400f26 	beq	r2,r9,1151c <__eqdf2+0x6c>
   114e0:	0241ffc4 	movi	r9,2047
   114e4:	1a400326 	beq	r3,r9,114f4 <__eqdf2+0x44>
   114e8:	10c00526 	beq	r2,r3,11500 <__eqdf2+0x50>
   114ec:	00800044 	movi	r2,1
   114f0:	f800283a 	ret
   114f4:	4192b03a 	or	r9,r8,r6
   114f8:	483ffc1e 	bne	r9,zero,114ec <__alt_mem_Flash_flash_data+0xf40114ec>
   114fc:	10fffb1e 	bne	r2,r3,114ec <__alt_mem_Flash_flash_data+0xf40114ec>
   11500:	523ffa1e 	bne	r10,r8,114ec <__alt_mem_Flash_flash_data+0xf40114ec>
   11504:	21bff91e 	bne	r4,r6,114ec <__alt_mem_Flash_flash_data+0xf40114ec>
   11508:	29c00826 	beq	r5,r7,1152c <__eqdf2+0x7c>
   1150c:	103ff71e 	bne	r2,zero,114ec <__alt_mem_Flash_flash_data+0xf40114ec>
   11510:	5104b03a 	or	r2,r10,r4
   11514:	1004c03a 	cmpne	r2,r2,zero
   11518:	f800283a 	ret
   1151c:	5112b03a 	or	r9,r10,r4
   11520:	483fef26 	beq	r9,zero,114e0 <__alt_mem_Flash_flash_data+0xf40114e0>
   11524:	00800044 	movi	r2,1
   11528:	f800283a 	ret
   1152c:	0005883a 	mov	r2,zero
   11530:	f800283a 	ret

00011534 <__gedf2>:
   11534:	2804d53a 	srli	r2,r5,20
   11538:	3806d53a 	srli	r3,r7,20
   1153c:	02000434 	movhi	r8,16
   11540:	423fffc4 	addi	r8,r8,-1
   11544:	0241ffc4 	movi	r9,2047
   11548:	1081ffcc 	andi	r2,r2,2047
   1154c:	2a14703a 	and	r10,r5,r8
   11550:	1a46703a 	and	r3,r3,r9
   11554:	3a10703a 	and	r8,r7,r8
   11558:	280ad7fa 	srli	r5,r5,31
   1155c:	380ed7fa 	srli	r7,r7,31
   11560:	12400b26 	beq	r2,r9,11590 <__gedf2+0x5c>
   11564:	1a401626 	beq	r3,r9,115c0 <__gedf2+0x8c>
   11568:	10000c1e 	bne	r2,zero,1159c <__gedf2+0x68>
   1156c:	5112b03a 	or	r9,r10,r4
   11570:	4813003a 	cmpeq	r9,r9,zero
   11574:	4817883a 	mov	r11,r9
   11578:	18000c1e 	bne	r3,zero,115ac <__gedf2+0x78>
   1157c:	4198b03a 	or	r12,r8,r6
   11580:	60000a1e 	bne	r12,zero,115ac <__gedf2+0x78>
   11584:	48001326 	beq	r9,zero,115d4 <__gedf2+0xa0>
   11588:	0005883a 	mov	r2,zero
   1158c:	f800283a 	ret
   11590:	5112b03a 	or	r9,r10,r4
   11594:	4800191e 	bne	r9,zero,115fc <__gedf2+0xc8>
   11598:	18800926 	beq	r3,r2,115c0 <__gedf2+0x8c>
   1159c:	18000b1e 	bne	r3,zero,115cc <__gedf2+0x98>
   115a0:	4192b03a 	or	r9,r8,r6
   115a4:	0017883a 	mov	r11,zero
   115a8:	48000a26 	beq	r9,zero,115d4 <__gedf2+0xa0>
   115ac:	39c03fcc 	andi	r7,r7,255
   115b0:	58000726 	beq	r11,zero,115d0 <__gedf2+0x9c>
   115b4:	3800081e 	bne	r7,zero,115d8 <__gedf2+0xa4>
   115b8:	00bfffc4 	movi	r2,-1
   115bc:	f800283a 	ret
   115c0:	4192b03a 	or	r9,r8,r6
   115c4:	48000d1e 	bne	r9,zero,115fc <__gedf2+0xc8>
   115c8:	103fe826 	beq	r2,zero,1156c <__alt_mem_Flash_flash_data+0xf401156c>
   115cc:	39c03fcc 	andi	r7,r7,255
   115d0:	29c00326 	beq	r5,r7,115e0 <__gedf2+0xac>
   115d4:	283ff81e 	bne	r5,zero,115b8 <__alt_mem_Flash_flash_data+0xf40115b8>
   115d8:	00800044 	movi	r2,1
   115dc:	f800283a 	ret
   115e0:	18bffc16 	blt	r3,r2,115d4 <__alt_mem_Flash_flash_data+0xf40115d4>
   115e4:	10c00316 	blt	r2,r3,115f4 <__gedf2+0xc0>
   115e8:	42bffa36 	bltu	r8,r10,115d4 <__alt_mem_Flash_flash_data+0xf40115d4>
   115ec:	52000526 	beq	r10,r8,11604 <__gedf2+0xd0>
   115f0:	523fe52e 	bgeu	r10,r8,11588 <__alt_mem_Flash_flash_data+0xf4011588>
   115f4:	283ff026 	beq	r5,zero,115b8 <__alt_mem_Flash_flash_data+0xf40115b8>
   115f8:	003ff706 	br	115d8 <__alt_mem_Flash_flash_data+0xf40115d8>
   115fc:	00bfff84 	movi	r2,-2
   11600:	f800283a 	ret
   11604:	313ff336 	bltu	r6,r4,115d4 <__alt_mem_Flash_flash_data+0xf40115d4>
   11608:	21bfdf2e 	bgeu	r4,r6,11588 <__alt_mem_Flash_flash_data+0xf4011588>
   1160c:	283fea26 	beq	r5,zero,115b8 <__alt_mem_Flash_flash_data+0xf40115b8>
   11610:	003ff106 	br	115d8 <__alt_mem_Flash_flash_data+0xf40115d8>

00011614 <__ledf2>:
   11614:	2804d53a 	srli	r2,r5,20
   11618:	3810d53a 	srli	r8,r7,20
   1161c:	00c00434 	movhi	r3,16
   11620:	18ffffc4 	addi	r3,r3,-1
   11624:	0241ffc4 	movi	r9,2047
   11628:	1081ffcc 	andi	r2,r2,2047
   1162c:	28d4703a 	and	r10,r5,r3
   11630:	4250703a 	and	r8,r8,r9
   11634:	38c6703a 	and	r3,r7,r3
   11638:	280ad7fa 	srli	r5,r5,31
   1163c:	380ed7fa 	srli	r7,r7,31
   11640:	12400b26 	beq	r2,r9,11670 <__ledf2+0x5c>
   11644:	42401926 	beq	r8,r9,116ac <__ledf2+0x98>
   11648:	10000c1e 	bne	r2,zero,1167c <__ledf2+0x68>
   1164c:	5112b03a 	or	r9,r10,r4
   11650:	4813003a 	cmpeq	r9,r9,zero
   11654:	4817883a 	mov	r11,r9
   11658:	40000f26 	beq	r8,zero,11698 <__ledf2+0x84>
   1165c:	39c03fcc 	andi	r7,r7,255
   11660:	58001826 	beq	r11,zero,116c4 <__ledf2+0xb0>
   11664:	38000a1e 	bne	r7,zero,11690 <__ledf2+0x7c>
   11668:	00bfffc4 	movi	r2,-1
   1166c:	f800283a 	ret
   11670:	5112b03a 	or	r9,r10,r4
   11674:	48000f1e 	bne	r9,zero,116b4 <__ledf2+0xa0>
   11678:	40800c26 	beq	r8,r2,116ac <__ledf2+0x98>
   1167c:	4000101e 	bne	r8,zero,116c0 <__ledf2+0xac>
   11680:	1992b03a 	or	r9,r3,r6
   11684:	0017883a 	mov	r11,zero
   11688:	483ff41e 	bne	r9,zero,1165c <__alt_mem_Flash_flash_data+0xf401165c>
   1168c:	283ff61e 	bne	r5,zero,11668 <__alt_mem_Flash_flash_data+0xf4011668>
   11690:	00800044 	movi	r2,1
   11694:	f800283a 	ret
   11698:	1998b03a 	or	r12,r3,r6
   1169c:	603fef1e 	bne	r12,zero,1165c <__alt_mem_Flash_flash_data+0xf401165c>
   116a0:	483ffa26 	beq	r9,zero,1168c <__alt_mem_Flash_flash_data+0xf401168c>
   116a4:	0005883a 	mov	r2,zero
   116a8:	f800283a 	ret
   116ac:	1992b03a 	or	r9,r3,r6
   116b0:	48000226 	beq	r9,zero,116bc <__ledf2+0xa8>
   116b4:	00800084 	movi	r2,2
   116b8:	f800283a 	ret
   116bc:	103fe326 	beq	r2,zero,1164c <__alt_mem_Flash_flash_data+0xf401164c>
   116c0:	39c03fcc 	andi	r7,r7,255
   116c4:	29fff11e 	bne	r5,r7,1168c <__alt_mem_Flash_flash_data+0xf401168c>
   116c8:	40bff016 	blt	r8,r2,1168c <__alt_mem_Flash_flash_data+0xf401168c>
   116cc:	12000316 	blt	r2,r8,116dc <__ledf2+0xc8>
   116d0:	1abfee36 	bltu	r3,r10,1168c <__alt_mem_Flash_flash_data+0xf401168c>
   116d4:	50c00326 	beq	r10,r3,116e4 <__ledf2+0xd0>
   116d8:	50fff22e 	bgeu	r10,r3,116a4 <__alt_mem_Flash_flash_data+0xf40116a4>
   116dc:	283fe226 	beq	r5,zero,11668 <__alt_mem_Flash_flash_data+0xf4011668>
   116e0:	003feb06 	br	11690 <__alt_mem_Flash_flash_data+0xf4011690>
   116e4:	313fe936 	bltu	r6,r4,1168c <__alt_mem_Flash_flash_data+0xf401168c>
   116e8:	21bfee2e 	bgeu	r4,r6,116a4 <__alt_mem_Flash_flash_data+0xf40116a4>
   116ec:	283fde26 	beq	r5,zero,11668 <__alt_mem_Flash_flash_data+0xf4011668>
   116f0:	003fe706 	br	11690 <__alt_mem_Flash_flash_data+0xf4011690>

000116f4 <__muldf3>:
   116f4:	defff204 	addi	sp,sp,-56
   116f8:	2804d53a 	srli	r2,r5,20
   116fc:	dd800a15 	stw	r22,40(sp)
   11700:	282cd7fa 	srli	r22,r5,31
   11704:	dc000415 	stw	r16,16(sp)
   11708:	04000434 	movhi	r16,16
   1170c:	df000c15 	stw	fp,48(sp)
   11710:	dd000815 	stw	r20,32(sp)
   11714:	dcc00715 	stw	r19,28(sp)
   11718:	dc800615 	stw	r18,24(sp)
   1171c:	dc400515 	stw	r17,20(sp)
   11720:	843fffc4 	addi	r16,r16,-1
   11724:	dfc00d15 	stw	ra,52(sp)
   11728:	ddc00b15 	stw	r23,44(sp)
   1172c:	dd400915 	stw	r21,36(sp)
   11730:	1501ffcc 	andi	r20,r2,2047
   11734:	2023883a 	mov	r17,r4
   11738:	2025883a 	mov	r18,r4
   1173c:	2c20703a 	and	r16,r5,r16
   11740:	b027883a 	mov	r19,r22
   11744:	b7003fcc 	andi	fp,r22,255
   11748:	a0005926 	beq	r20,zero,118b0 <__muldf3+0x1bc>
   1174c:	0081ffc4 	movi	r2,2047
   11750:	a0803426 	beq	r20,r2,11824 <__muldf3+0x130>
   11754:	84000434 	orhi	r16,r16,16
   11758:	2004d77a 	srli	r2,r4,29
   1175c:	802090fa 	slli	r16,r16,3
   11760:	202490fa 	slli	r18,r4,3
   11764:	a53f0044 	addi	r20,r20,-1023
   11768:	80a0b03a 	or	r16,r16,r2
   1176c:	002b883a 	mov	r21,zero
   11770:	0015883a 	mov	r10,zero
   11774:	3812d53a 	srli	r9,r7,20
   11778:	3806d7fa 	srli	r3,r7,31
   1177c:	02000434 	movhi	r8,16
   11780:	423fffc4 	addi	r8,r8,-1
   11784:	4941ffcc 	andi	r5,r9,2047
   11788:	302f883a 	mov	r23,r6
   1178c:	3a22703a 	and	r17,r7,r8
   11790:	1ac03fcc 	andi	r11,r3,255
   11794:	28006226 	beq	r5,zero,11920 <__muldf3+0x22c>
   11798:	0081ffc4 	movi	r2,2047
   1179c:	28805a26 	beq	r5,r2,11908 <__muldf3+0x214>
   117a0:	8a000434 	orhi	r8,r17,16
   117a4:	3004d77a 	srli	r2,r6,29
   117a8:	401090fa 	slli	r8,r8,3
   117ac:	302e90fa 	slli	r23,r6,3
   117b0:	297f0044 	addi	r5,r5,-1023
   117b4:	40a2b03a 	or	r17,r8,r2
   117b8:	0013883a 	mov	r9,zero
   117bc:	4d4cb03a 	or	r6,r9,r21
   117c0:	300c90ba 	slli	r6,r6,2
   117c4:	02000074 	movhi	r8,1
   117c8:	4205f904 	addi	r8,r8,6116
   117cc:	320d883a 	add	r6,r6,r8
   117d0:	31800017 	ldw	r6,0(r6)
   117d4:	a14b883a 	add	r5,r20,r5
   117d8:	1dacf03a 	xor	r22,r3,r22
   117dc:	2b000044 	addi	r12,r5,1
   117e0:	3000683a 	jmp	r6
   117e4:	00011a20 	cmpeqi	zero,zero,1128
   117e8:	00011a0c 	andi	zero,zero,1128
   117ec:	00011a0c 	andi	zero,zero,1128
   117f0:	000119f8 	rdprs	zero,zero,1127
   117f4:	00011840 	call	1184 <Singleplayer+0x54>
   117f8:	00011840 	call	1184 <Singleplayer+0x54>
   117fc:	000119e0 	cmpeqi	zero,zero,1127
   11800:	000119f8 	rdprs	zero,zero,1127
   11804:	00011840 	call	1184 <Singleplayer+0x54>
   11808:	000119e0 	cmpeqi	zero,zero,1127
   1180c:	00011840 	call	1184 <Singleplayer+0x54>
   11810:	000119f8 	rdprs	zero,zero,1127
   11814:	00011844 	movi	zero,1121
   11818:	00011844 	movi	zero,1121
   1181c:	00011844 	movi	zero,1121
   11820:	00011c1c 	xori	zero,zero,1136
   11824:	8104b03a 	or	r2,r16,r4
   11828:	10006a1e 	bne	r2,zero,119d4 <__muldf3+0x2e0>
   1182c:	05400204 	movi	r21,8
   11830:	0021883a 	mov	r16,zero
   11834:	0025883a 	mov	r18,zero
   11838:	02800084 	movi	r10,2
   1183c:	003fcd06 	br	11774 <__alt_mem_Flash_flash_data+0xf4011774>
   11840:	b039883a 	mov	fp,r22
   11844:	00800084 	movi	r2,2
   11848:	50804e1e 	bne	r10,r2,11984 <__muldf3+0x290>
   1184c:	e4c0004c 	andi	r19,fp,1
   11850:	0101ffc4 	movi	r4,2047
   11854:	0021883a 	mov	r16,zero
   11858:	0025883a 	mov	r18,zero
   1185c:	2008953a 	slli	r4,r4,20
   11860:	98c03fcc 	andi	r3,r19,255
   11864:	01400434 	movhi	r5,16
   11868:	297fffc4 	addi	r5,r5,-1
   1186c:	180697fa 	slli	r3,r3,31
   11870:	8160703a 	and	r16,r16,r5
   11874:	8120b03a 	or	r16,r16,r4
   11878:	80c6b03a 	or	r3,r16,r3
   1187c:	9005883a 	mov	r2,r18
   11880:	dfc00d17 	ldw	ra,52(sp)
   11884:	df000c17 	ldw	fp,48(sp)
   11888:	ddc00b17 	ldw	r23,44(sp)
   1188c:	dd800a17 	ldw	r22,40(sp)
   11890:	dd400917 	ldw	r21,36(sp)
   11894:	dd000817 	ldw	r20,32(sp)
   11898:	dcc00717 	ldw	r19,28(sp)
   1189c:	dc800617 	ldw	r18,24(sp)
   118a0:	dc400517 	ldw	r17,20(sp)
   118a4:	dc000417 	ldw	r16,16(sp)
   118a8:	dec00e04 	addi	sp,sp,56
   118ac:	f800283a 	ret
   118b0:	8104b03a 	or	r2,r16,r4
   118b4:	10004226 	beq	r2,zero,119c0 <__muldf3+0x2cc>
   118b8:	8000f926 	beq	r16,zero,11ca0 <__muldf3+0x5ac>
   118bc:	8009883a 	mov	r4,r16
   118c0:	d9800315 	stw	r6,12(sp)
   118c4:	d9c00015 	stw	r7,0(sp)
   118c8:	00128e40 	call	128e4 <__clzsi2>
   118cc:	d9800317 	ldw	r6,12(sp)
   118d0:	d9c00017 	ldw	r7,0(sp)
   118d4:	1007883a 	mov	r3,r2
   118d8:	01000a04 	movi	r4,40
   118dc:	18bffe04 	addi	r2,r3,-8
   118e0:	20c9c83a 	sub	r4,r4,r3
   118e4:	80a0983a 	sll	r16,r16,r2
   118e8:	8908d83a 	srl	r4,r17,r4
   118ec:	88a4983a 	sll	r18,r17,r2
   118f0:	2420b03a 	or	r16,r4,r16
   118f4:	017f0344 	movi	r5,-1011
   118f8:	28e9c83a 	sub	r20,r5,r3
   118fc:	002b883a 	mov	r21,zero
   11900:	0015883a 	mov	r10,zero
   11904:	003f9b06 	br	11774 <__alt_mem_Flash_flash_data+0xf4011774>
   11908:	8984b03a 	or	r2,r17,r6
   1190c:	10002a1e 	bne	r2,zero,119b8 <__muldf3+0x2c4>
   11910:	0023883a 	mov	r17,zero
   11914:	002f883a 	mov	r23,zero
   11918:	02400084 	movi	r9,2
   1191c:	003fa706 	br	117bc <__alt_mem_Flash_flash_data+0xf40117bc>
   11920:	8984b03a 	or	r2,r17,r6
   11924:	10002026 	beq	r2,zero,119a8 <__muldf3+0x2b4>
   11928:	8800cc26 	beq	r17,zero,11c5c <__muldf3+0x568>
   1192c:	8809883a 	mov	r4,r17
   11930:	d8c00215 	stw	r3,8(sp)
   11934:	d9800315 	stw	r6,12(sp)
   11938:	da800015 	stw	r10,0(sp)
   1193c:	dac00115 	stw	r11,4(sp)
   11940:	00128e40 	call	128e4 <__clzsi2>
   11944:	d8c00217 	ldw	r3,8(sp)
   11948:	d9800317 	ldw	r6,12(sp)
   1194c:	da800017 	ldw	r10,0(sp)
   11950:	dac00117 	ldw	r11,4(sp)
   11954:	1009883a 	mov	r4,r2
   11958:	01400a04 	movi	r5,40
   1195c:	25fffe04 	addi	r23,r4,-8
   11960:	290bc83a 	sub	r5,r5,r4
   11964:	8dd0983a 	sll	r8,r17,r23
   11968:	314ad83a 	srl	r5,r6,r5
   1196c:	35ee983a 	sll	r23,r6,r23
   11970:	2a22b03a 	or	r17,r5,r8
   11974:	017f0344 	movi	r5,-1011
   11978:	290bc83a 	sub	r5,r5,r4
   1197c:	0013883a 	mov	r9,zero
   11980:	003f8e06 	br	117bc <__alt_mem_Flash_flash_data+0xf40117bc>
   11984:	008000c4 	movi	r2,3
   11988:	50811d26 	beq	r10,r2,11e00 <__muldf3+0x70c>
   1198c:	00800044 	movi	r2,1
   11990:	5080e01e 	bne	r10,r2,11d14 <__muldf3+0x620>
   11994:	e0a6703a 	and	r19,fp,r2
   11998:	0009883a 	mov	r4,zero
   1199c:	0021883a 	mov	r16,zero
   119a0:	0025883a 	mov	r18,zero
   119a4:	003fad06 	br	1185c <__alt_mem_Flash_flash_data+0xf401185c>
   119a8:	0023883a 	mov	r17,zero
   119ac:	002f883a 	mov	r23,zero
   119b0:	02400044 	movi	r9,1
   119b4:	003f8106 	br	117bc <__alt_mem_Flash_flash_data+0xf40117bc>
   119b8:	024000c4 	movi	r9,3
   119bc:	003f7f06 	br	117bc <__alt_mem_Flash_flash_data+0xf40117bc>
   119c0:	05400104 	movi	r21,4
   119c4:	0021883a 	mov	r16,zero
   119c8:	0025883a 	mov	r18,zero
   119cc:	02800044 	movi	r10,1
   119d0:	003f6806 	br	11774 <__alt_mem_Flash_flash_data+0xf4011774>
   119d4:	05400304 	movi	r21,12
   119d8:	028000c4 	movi	r10,3
   119dc:	003f6506 	br	11774 <__alt_mem_Flash_flash_data+0xf4011774>
   119e0:	04000434 	movhi	r16,16
   119e4:	0027883a 	mov	r19,zero
   119e8:	843fffc4 	addi	r16,r16,-1
   119ec:	04bfffc4 	movi	r18,-1
   119f0:	0101ffc4 	movi	r4,2047
   119f4:	003f9906 	br	1185c <__alt_mem_Flash_flash_data+0xf401185c>
   119f8:	8821883a 	mov	r16,r17
   119fc:	b825883a 	mov	r18,r23
   11a00:	5839883a 	mov	fp,r11
   11a04:	4815883a 	mov	r10,r9
   11a08:	003f8e06 	br	11844 <__alt_mem_Flash_flash_data+0xf4011844>
   11a0c:	8821883a 	mov	r16,r17
   11a10:	b825883a 	mov	r18,r23
   11a14:	b039883a 	mov	fp,r22
   11a18:	4815883a 	mov	r10,r9
   11a1c:	003f8906 	br	11844 <__alt_mem_Flash_flash_data+0xf4011844>
   11a20:	b80cd43a 	srli	r6,r23,16
   11a24:	9006d43a 	srli	r3,r18,16
   11a28:	90bfffcc 	andi	r2,r18,65535
   11a2c:	bdffffcc 	andi	r23,r23,65535
   11a30:	b891383a 	mul	r8,r23,r2
   11a34:	b8c9383a 	mul	r4,r23,r3
   11a38:	309b383a 	mul	r13,r6,r2
   11a3c:	400ed43a 	srli	r7,r8,16
   11a40:	30df383a 	mul	r15,r6,r3
   11a44:	235b883a 	add	r13,r4,r13
   11a48:	69db883a 	add	r13,r13,r7
   11a4c:	6900022e 	bgeu	r13,r4,11a58 <__muldf3+0x364>
   11a50:	01000074 	movhi	r4,1
   11a54:	791f883a 	add	r15,r15,r4
   11a58:	8828d43a 	srli	r20,r17,16
   11a5c:	8c7fffcc 	andi	r17,r17,65535
   11a60:	888f383a 	mul	r7,r17,r2
   11a64:	88d3383a 	mul	r9,r17,r3
   11a68:	a0a5383a 	mul	r18,r20,r2
   11a6c:	3816d43a 	srli	r11,r7,16
   11a70:	6814943a 	slli	r10,r13,16
   11a74:	4ca5883a 	add	r18,r9,r18
   11a78:	423fffcc 	andi	r8,r8,65535
   11a7c:	92e5883a 	add	r18,r18,r11
   11a80:	6808d43a 	srli	r4,r13,16
   11a84:	5215883a 	add	r10,r10,r8
   11a88:	a0c7383a 	mul	r3,r20,r3
   11a8c:	9240022e 	bgeu	r18,r9,11a98 <__muldf3+0x3a4>
   11a90:	00800074 	movhi	r2,1
   11a94:	1887883a 	add	r3,r3,r2
   11a98:	802ad43a 	srli	r21,r16,16
   11a9c:	80bfffcc 	andi	r2,r16,65535
   11aa0:	b893383a 	mul	r9,r23,r2
   11aa4:	3091383a 	mul	r8,r6,r2
   11aa8:	bd6f383a 	mul	r23,r23,r21
   11aac:	9026943a 	slli	r19,r18,16
   11ab0:	481ad43a 	srli	r13,r9,16
   11ab4:	9024d43a 	srli	r18,r18,16
   11ab8:	39ffffcc 	andi	r7,r7,65535
   11abc:	ba11883a 	add	r8,r23,r8
   11ac0:	99e7883a 	add	r19,r19,r7
   11ac4:	4351883a 	add	r8,r8,r13
   11ac8:	1c97883a 	add	r11,r3,r18
   11acc:	354d383a 	mul	r6,r6,r21
   11ad0:	9925883a 	add	r18,r19,r4
   11ad4:	45c0022e 	bgeu	r8,r23,11ae0 <__muldf3+0x3ec>
   11ad8:	00c00074 	movhi	r3,1
   11adc:	30cd883a 	add	r6,r6,r3
   11ae0:	8889383a 	mul	r4,r17,r2
   11ae4:	8d63383a 	mul	r17,r17,r21
   11ae8:	a085383a 	mul	r2,r20,r2
   11aec:	200ed43a 	srli	r7,r4,16
   11af0:	401cd43a 	srli	r14,r8,16
   11af4:	401a943a 	slli	r13,r8,16
   11af8:	8885883a 	add	r2,r17,r2
   11afc:	4a3fffcc 	andi	r8,r9,65535
   11b00:	11c5883a 	add	r2,r2,r7
   11b04:	339d883a 	add	r14,r6,r14
   11b08:	6a11883a 	add	r8,r13,r8
   11b0c:	a561383a 	mul	r16,r20,r21
   11b10:	1440022e 	bgeu	r2,r17,11b1c <__muldf3+0x428>
   11b14:	00c00074 	movhi	r3,1
   11b18:	80e1883a 	add	r16,r16,r3
   11b1c:	1006943a 	slli	r3,r2,16
   11b20:	213fffcc 	andi	r4,r4,65535
   11b24:	93db883a 	add	r13,r18,r15
   11b28:	1909883a 	add	r4,r3,r4
   11b2c:	22c7883a 	add	r3,r4,r11
   11b30:	6cd3803a 	cmpltu	r9,r13,r19
   11b34:	6a09883a 	add	r4,r13,r8
   11b38:	1a5b883a 	add	r13,r3,r9
   11b3c:	2211803a 	cmpltu	r8,r4,r8
   11b40:	734d883a 	add	r6,r14,r13
   11b44:	100ed43a 	srli	r7,r2,16
   11b48:	6a53803a 	cmpltu	r9,r13,r9
   11b4c:	3205883a 	add	r2,r6,r8
   11b50:	1ac7803a 	cmpltu	r3,r3,r11
   11b54:	1211803a 	cmpltu	r8,r2,r8
   11b58:	48c6b03a 	or	r3,r9,r3
   11b5c:	338d803a 	cmpltu	r6,r6,r14
   11b60:	19c7883a 	add	r3,r3,r7
   11b64:	418cb03a 	or	r6,r8,r6
   11b68:	1987883a 	add	r3,r3,r6
   11b6c:	2024927a 	slli	r18,r4,9
   11b70:	1c07883a 	add	r3,r3,r16
   11b74:	1806927a 	slli	r3,r3,9
   11b78:	1020d5fa 	srli	r16,r2,23
   11b7c:	2008d5fa 	srli	r4,r4,23
   11b80:	9294b03a 	or	r10,r18,r10
   11b84:	1004927a 	slli	r2,r2,9
   11b88:	5024c03a 	cmpne	r18,r10,zero
   11b8c:	1c20b03a 	or	r16,r3,r16
   11b90:	9108b03a 	or	r4,r18,r4
   11b94:	80c0402c 	andhi	r3,r16,256
   11b98:	20a4b03a 	or	r18,r4,r2
   11b9c:	18000726 	beq	r3,zero,11bbc <__muldf3+0x4c8>
   11ba0:	9006d07a 	srli	r3,r18,1
   11ba4:	800897fa 	slli	r4,r16,31
   11ba8:	9080004c 	andi	r2,r18,1
   11bac:	8020d07a 	srli	r16,r16,1
   11bb0:	10c4b03a 	or	r2,r2,r3
   11bb4:	1124b03a 	or	r18,r2,r4
   11bb8:	600b883a 	mov	r5,r12
   11bbc:	2900ffc4 	addi	r4,r5,1023
   11bc0:	01004b0e 	bge	zero,r4,11cf0 <__muldf3+0x5fc>
   11bc4:	908001cc 	andi	r2,r18,7
   11bc8:	10000726 	beq	r2,zero,11be8 <__muldf3+0x4f4>
   11bcc:	90c003cc 	andi	r3,r18,15
   11bd0:	00800104 	movi	r2,4
   11bd4:	18800426 	beq	r3,r2,11be8 <__muldf3+0x4f4>
   11bd8:	9087883a 	add	r3,r18,r2
   11bdc:	1c85803a 	cmpltu	r2,r3,r18
   11be0:	80a1883a 	add	r16,r16,r2
   11be4:	1825883a 	mov	r18,r3
   11be8:	8080402c 	andhi	r2,r16,256
   11bec:	10000426 	beq	r2,zero,11c00 <__muldf3+0x50c>
   11bf0:	00bfc034 	movhi	r2,65280
   11bf4:	10bfffc4 	addi	r2,r2,-1
   11bf8:	29010004 	addi	r4,r5,1024
   11bfc:	80a0703a 	and	r16,r16,r2
   11c00:	0081ff84 	movi	r2,2046
   11c04:	1100320e 	bge	r2,r4,11cd0 <__muldf3+0x5dc>
   11c08:	b4c0004c 	andi	r19,r22,1
   11c0c:	0101ffc4 	movi	r4,2047
   11c10:	0021883a 	mov	r16,zero
   11c14:	0025883a 	mov	r18,zero
   11c18:	003f1006 	br	1185c <__alt_mem_Flash_flash_data+0xf401185c>
   11c1c:	8080022c 	andhi	r2,r16,8
   11c20:	10000926 	beq	r2,zero,11c48 <__muldf3+0x554>
   11c24:	8880022c 	andhi	r2,r17,8
   11c28:	1000071e 	bne	r2,zero,11c48 <__muldf3+0x554>
   11c2c:	00800434 	movhi	r2,16
   11c30:	8c000234 	orhi	r16,r17,8
   11c34:	10bfffc4 	addi	r2,r2,-1
   11c38:	1827883a 	mov	r19,r3
   11c3c:	80a0703a 	and	r16,r16,r2
   11c40:	b825883a 	mov	r18,r23
   11c44:	003f6a06 	br	119f0 <__alt_mem_Flash_flash_data+0xf40119f0>
   11c48:	00800434 	movhi	r2,16
   11c4c:	84000234 	orhi	r16,r16,8
   11c50:	10bfffc4 	addi	r2,r2,-1
   11c54:	80a0703a 	and	r16,r16,r2
   11c58:	003f6506 	br	119f0 <__alt_mem_Flash_flash_data+0xf40119f0>
   11c5c:	3009883a 	mov	r4,r6
   11c60:	d8c00215 	stw	r3,8(sp)
   11c64:	d9800315 	stw	r6,12(sp)
   11c68:	da800015 	stw	r10,0(sp)
   11c6c:	dac00115 	stw	r11,4(sp)
   11c70:	00128e40 	call	128e4 <__clzsi2>
   11c74:	11000804 	addi	r4,r2,32
   11c78:	014009c4 	movi	r5,39
   11c7c:	d8c00217 	ldw	r3,8(sp)
   11c80:	d9800317 	ldw	r6,12(sp)
   11c84:	da800017 	ldw	r10,0(sp)
   11c88:	dac00117 	ldw	r11,4(sp)
   11c8c:	293f320e 	bge	r5,r4,11958 <__alt_mem_Flash_flash_data+0xf4011958>
   11c90:	10bffe04 	addi	r2,r2,-8
   11c94:	b8a2983a 	sll	r17,r23,r2
   11c98:	002f883a 	mov	r23,zero
   11c9c:	003f3506 	br	11974 <__alt_mem_Flash_flash_data+0xf4011974>
   11ca0:	d9800315 	stw	r6,12(sp)
   11ca4:	d9c00015 	stw	r7,0(sp)
   11ca8:	00128e40 	call	128e4 <__clzsi2>
   11cac:	10c00804 	addi	r3,r2,32
   11cb0:	010009c4 	movi	r4,39
   11cb4:	d9800317 	ldw	r6,12(sp)
   11cb8:	d9c00017 	ldw	r7,0(sp)
   11cbc:	20ff060e 	bge	r4,r3,118d8 <__alt_mem_Flash_flash_data+0xf40118d8>
   11cc0:	10bffe04 	addi	r2,r2,-8
   11cc4:	88a0983a 	sll	r16,r17,r2
   11cc8:	0025883a 	mov	r18,zero
   11ccc:	003f0906 	br	118f4 <__alt_mem_Flash_flash_data+0xf40118f4>
   11cd0:	9004d0fa 	srli	r2,r18,3
   11cd4:	8024977a 	slli	r18,r16,29
   11cd8:	8020927a 	slli	r16,r16,9
   11cdc:	2101ffcc 	andi	r4,r4,2047
   11ce0:	90a4b03a 	or	r18,r18,r2
   11ce4:	8020d33a 	srli	r16,r16,12
   11ce8:	b4c0004c 	andi	r19,r22,1
   11cec:	003edb06 	br	1185c <__alt_mem_Flash_flash_data+0xf401185c>
   11cf0:	00ff0084 	movi	r3,-1022
   11cf4:	1947c83a 	sub	r3,r3,r5
   11cf8:	00800e04 	movi	r2,56
   11cfc:	10c0080e 	bge	r2,r3,11d20 <__muldf3+0x62c>
   11d00:	b4c0004c 	andi	r19,r22,1
   11d04:	0009883a 	mov	r4,zero
   11d08:	0021883a 	mov	r16,zero
   11d0c:	0025883a 	mov	r18,zero
   11d10:	003ed206 	br	1185c <__alt_mem_Flash_flash_data+0xf401185c>
   11d14:	600b883a 	mov	r5,r12
   11d18:	e02d883a 	mov	r22,fp
   11d1c:	003fa706 	br	11bbc <__alt_mem_Flash_flash_data+0xf4011bbc>
   11d20:	008007c4 	movi	r2,31
   11d24:	10c01816 	blt	r2,r3,11d88 <__muldf3+0x694>
   11d28:	29410784 	addi	r5,r5,1054
   11d2c:	8144983a 	sll	r2,r16,r5
   11d30:	90c8d83a 	srl	r4,r18,r3
   11d34:	914a983a 	sll	r5,r18,r5
   11d38:	80c6d83a 	srl	r3,r16,r3
   11d3c:	2088b03a 	or	r4,r4,r2
   11d40:	2804c03a 	cmpne	r2,r5,zero
   11d44:	2084b03a 	or	r2,r4,r2
   11d48:	110001cc 	andi	r4,r2,7
   11d4c:	20000726 	beq	r4,zero,11d6c <__muldf3+0x678>
   11d50:	114003cc 	andi	r5,r2,15
   11d54:	01000104 	movi	r4,4
   11d58:	29000426 	beq	r5,r4,11d6c <__muldf3+0x678>
   11d5c:	11000104 	addi	r4,r2,4
   11d60:	2085803a 	cmpltu	r2,r4,r2
   11d64:	1887883a 	add	r3,r3,r2
   11d68:	2005883a 	mov	r2,r4
   11d6c:	1900202c 	andhi	r4,r3,128
   11d70:	20001826 	beq	r4,zero,11dd4 <__muldf3+0x6e0>
   11d74:	b4c0004c 	andi	r19,r22,1
   11d78:	01000044 	movi	r4,1
   11d7c:	0021883a 	mov	r16,zero
   11d80:	0025883a 	mov	r18,zero
   11d84:	003eb506 	br	1185c <__alt_mem_Flash_flash_data+0xf401185c>
   11d88:	00bef884 	movi	r2,-1054
   11d8c:	1145c83a 	sub	r2,r2,r5
   11d90:	8088d83a 	srl	r4,r16,r2
   11d94:	00800804 	movi	r2,32
   11d98:	18801726 	beq	r3,r2,11df8 <__muldf3+0x704>
   11d9c:	28810f84 	addi	r2,r5,1086
   11da0:	8084983a 	sll	r2,r16,r2
   11da4:	1484b03a 	or	r2,r2,r18
   11da8:	1004c03a 	cmpne	r2,r2,zero
   11dac:	1104b03a 	or	r2,r2,r4
   11db0:	10c001cc 	andi	r3,r2,7
   11db4:	18000b1e 	bne	r3,zero,11de4 <__muldf3+0x6f0>
   11db8:	0021883a 	mov	r16,zero
   11dbc:	1004d0fa 	srli	r2,r2,3
   11dc0:	b4c0004c 	andi	r19,r22,1
   11dc4:	0009883a 	mov	r4,zero
   11dc8:	10e4b03a 	or	r18,r2,r3
   11dcc:	003ea306 	br	1185c <__alt_mem_Flash_flash_data+0xf401185c>
   11dd0:	0007883a 	mov	r3,zero
   11dd4:	1820927a 	slli	r16,r3,9
   11dd8:	1806977a 	slli	r3,r3,29
   11ddc:	8020d33a 	srli	r16,r16,12
   11de0:	003ff606 	br	11dbc <__alt_mem_Flash_flash_data+0xf4011dbc>
   11de4:	110003cc 	andi	r4,r2,15
   11de8:	00c00104 	movi	r3,4
   11dec:	20fff826 	beq	r4,r3,11dd0 <__alt_mem_Flash_flash_data+0xf4011dd0>
   11df0:	0007883a 	mov	r3,zero
   11df4:	003fd906 	br	11d5c <__alt_mem_Flash_flash_data+0xf4011d5c>
   11df8:	0005883a 	mov	r2,zero
   11dfc:	003fe906 	br	11da4 <__alt_mem_Flash_flash_data+0xf4011da4>
   11e00:	00800434 	movhi	r2,16
   11e04:	84000234 	orhi	r16,r16,8
   11e08:	10bfffc4 	addi	r2,r2,-1
   11e0c:	e4c0004c 	andi	r19,fp,1
   11e10:	80a0703a 	and	r16,r16,r2
   11e14:	003ef606 	br	119f0 <__alt_mem_Flash_flash_data+0xf40119f0>

00011e18 <__subdf3>:
   11e18:	00c00434 	movhi	r3,16
   11e1c:	18ffffc4 	addi	r3,r3,-1
   11e20:	defffb04 	addi	sp,sp,-20
   11e24:	28d2703a 	and	r9,r5,r3
   11e28:	3814d53a 	srli	r10,r7,20
   11e2c:	38c6703a 	and	r3,r7,r3
   11e30:	3004d77a 	srli	r2,r6,29
   11e34:	dc800215 	stw	r18,8(sp)
   11e38:	dc000015 	stw	r16,0(sp)
   11e3c:	2824d7fa 	srli	r18,r5,31
   11e40:	2820d53a 	srli	r16,r5,20
   11e44:	481290fa 	slli	r9,r9,3
   11e48:	200ad77a 	srli	r5,r4,29
   11e4c:	180690fa 	slli	r3,r3,3
   11e50:	dc400115 	stw	r17,4(sp)
   11e54:	dfc00415 	stw	ra,16(sp)
   11e58:	202290fa 	slli	r17,r4,3
   11e5c:	dcc00315 	stw	r19,12(sp)
   11e60:	5281ffcc 	andi	r10,r10,2047
   11e64:	0101ffc4 	movi	r4,2047
   11e68:	9011883a 	mov	r8,r18
   11e6c:	8401ffcc 	andi	r16,r16,2047
   11e70:	94803fcc 	andi	r18,r18,255
   11e74:	494ab03a 	or	r5,r9,r5
   11e78:	380ed7fa 	srli	r7,r7,31
   11e7c:	1886b03a 	or	r3,r3,r2
   11e80:	300c90fa 	slli	r6,r6,3
   11e84:	51009026 	beq	r10,r4,120c8 <__subdf3+0x2b0>
   11e88:	39c0005c 	xori	r7,r7,1
   11e8c:	8285c83a 	sub	r2,r16,r10
   11e90:	91c06f26 	beq	r18,r7,12050 <__subdf3+0x238>
   11e94:	0080b10e 	bge	zero,r2,1215c <__subdf3+0x344>
   11e98:	50002a1e 	bne	r10,zero,11f44 <__subdf3+0x12c>
   11e9c:	1988b03a 	or	r4,r3,r6
   11ea0:	2000941e 	bne	r4,zero,120f4 <__subdf3+0x2dc>
   11ea4:	888001cc 	andi	r2,r17,7
   11ea8:	10005b26 	beq	r2,zero,12018 <__subdf3+0x200>
   11eac:	88c003cc 	andi	r3,r17,15
   11eb0:	00800104 	movi	r2,4
   11eb4:	18805826 	beq	r3,r2,12018 <__subdf3+0x200>
   11eb8:	88c00104 	addi	r3,r17,4
   11ebc:	1c63803a 	cmpltu	r17,r3,r17
   11ec0:	2c4b883a 	add	r5,r5,r17
   11ec4:	2880202c 	andhi	r2,r5,128
   11ec8:	9200004c 	andi	r8,r18,1
   11ecc:	1823883a 	mov	r17,r3
   11ed0:	10005426 	beq	r2,zero,12024 <__subdf3+0x20c>
   11ed4:	84000044 	addi	r16,r16,1
   11ed8:	0081ffc4 	movi	r2,2047
   11edc:	8080bf26 	beq	r16,r2,121dc <__subdf3+0x3c4>
   11ee0:	013fe034 	movhi	r4,65408
   11ee4:	213fffc4 	addi	r4,r4,-1
   11ee8:	290a703a 	and	r5,r5,r4
   11eec:	2804977a 	slli	r2,r5,29
   11ef0:	280a927a 	slli	r5,r5,9
   11ef4:	8822d0fa 	srli	r17,r17,3
   11ef8:	8401ffcc 	andi	r16,r16,2047
   11efc:	2808d33a 	srli	r4,r5,12
   11f00:	1444b03a 	or	r2,r2,r17
   11f04:	8401ffcc 	andi	r16,r16,2047
   11f08:	800a953a 	slli	r5,r16,20
   11f0c:	40c03fcc 	andi	r3,r8,255
   11f10:	04000434 	movhi	r16,16
   11f14:	180697fa 	slli	r3,r3,31
   11f18:	843fffc4 	addi	r16,r16,-1
   11f1c:	2420703a 	and	r16,r4,r16
   11f20:	8160b03a 	or	r16,r16,r5
   11f24:	80c6b03a 	or	r3,r16,r3
   11f28:	dfc00417 	ldw	ra,16(sp)
   11f2c:	dcc00317 	ldw	r19,12(sp)
   11f30:	dc800217 	ldw	r18,8(sp)
   11f34:	dc400117 	ldw	r17,4(sp)
   11f38:	dc000017 	ldw	r16,0(sp)
   11f3c:	dec00504 	addi	sp,sp,20
   11f40:	f800283a 	ret
   11f44:	0101ffc4 	movi	r4,2047
   11f48:	813fd626 	beq	r16,r4,11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   11f4c:	18c02034 	orhi	r3,r3,128
   11f50:	01000e04 	movi	r4,56
   11f54:	2080a416 	blt	r4,r2,121e8 <__subdf3+0x3d0>
   11f58:	010007c4 	movi	r4,31
   11f5c:	2080c716 	blt	r4,r2,1227c <__subdf3+0x464>
   11f60:	01000804 	movi	r4,32
   11f64:	2089c83a 	sub	r4,r4,r2
   11f68:	1910983a 	sll	r8,r3,r4
   11f6c:	308ed83a 	srl	r7,r6,r2
   11f70:	3108983a 	sll	r4,r6,r4
   11f74:	1884d83a 	srl	r2,r3,r2
   11f78:	41ccb03a 	or	r6,r8,r7
   11f7c:	2008c03a 	cmpne	r4,r4,zero
   11f80:	310cb03a 	or	r6,r6,r4
   11f84:	898dc83a 	sub	r6,r17,r6
   11f88:	89a3803a 	cmpltu	r17,r17,r6
   11f8c:	288bc83a 	sub	r5,r5,r2
   11f90:	2c4bc83a 	sub	r5,r5,r17
   11f94:	3023883a 	mov	r17,r6
   11f98:	2880202c 	andhi	r2,r5,128
   11f9c:	10006b26 	beq	r2,zero,1214c <__subdf3+0x334>
   11fa0:	04c02034 	movhi	r19,128
   11fa4:	9cffffc4 	addi	r19,r19,-1
   11fa8:	2ce6703a 	and	r19,r5,r19
   11fac:	98007c26 	beq	r19,zero,121a0 <__subdf3+0x388>
   11fb0:	9809883a 	mov	r4,r19
   11fb4:	00128e40 	call	128e4 <__clzsi2>
   11fb8:	10fffe04 	addi	r3,r2,-8
   11fbc:	010007c4 	movi	r4,31
   11fc0:	20c07d16 	blt	r4,r3,121b8 <__subdf3+0x3a0>
   11fc4:	01400a04 	movi	r5,40
   11fc8:	2885c83a 	sub	r2,r5,r2
   11fcc:	888ad83a 	srl	r5,r17,r2
   11fd0:	98e6983a 	sll	r19,r19,r3
   11fd4:	88e2983a 	sll	r17,r17,r3
   11fd8:	2ce6b03a 	or	r19,r5,r19
   11fdc:	1c007a16 	blt	r3,r16,121c8 <__subdf3+0x3b0>
   11fe0:	1c21c83a 	sub	r16,r3,r16
   11fe4:	81400044 	addi	r5,r16,1
   11fe8:	00c007c4 	movi	r3,31
   11fec:	19409616 	blt	r3,r5,12248 <__subdf3+0x430>
   11ff0:	1c21c83a 	sub	r16,r3,r16
   11ff4:	8c08983a 	sll	r4,r17,r16
   11ff8:	8946d83a 	srl	r3,r17,r5
   11ffc:	9c20983a 	sll	r16,r19,r16
   12000:	2008c03a 	cmpne	r4,r4,zero
   12004:	994ad83a 	srl	r5,r19,r5
   12008:	1c06b03a 	or	r3,r3,r16
   1200c:	1922b03a 	or	r17,r3,r4
   12010:	0021883a 	mov	r16,zero
   12014:	003fa306 	br	11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   12018:	2880202c 	andhi	r2,r5,128
   1201c:	9200004c 	andi	r8,r18,1
   12020:	103fac1e 	bne	r2,zero,11ed4 <__alt_mem_Flash_flash_data+0xf4011ed4>
   12024:	2804977a 	slli	r2,r5,29
   12028:	8822d0fa 	srli	r17,r17,3
   1202c:	00c1ffc4 	movi	r3,2047
   12030:	280ad0fa 	srli	r5,r5,3
   12034:	1444b03a 	or	r2,r2,r17
   12038:	80c02726 	beq	r16,r3,120d8 <__subdf3+0x2c0>
   1203c:	01000434 	movhi	r4,16
   12040:	213fffc4 	addi	r4,r4,-1
   12044:	80e0703a 	and	r16,r16,r3
   12048:	2908703a 	and	r4,r5,r4
   1204c:	003fad06 	br	11f04 <__alt_mem_Flash_flash_data+0xf4011f04>
   12050:	0080690e 	bge	zero,r2,121f8 <__subdf3+0x3e0>
   12054:	50002f26 	beq	r10,zero,12114 <__subdf3+0x2fc>
   12058:	0101ffc4 	movi	r4,2047
   1205c:	813f9126 	beq	r16,r4,11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   12060:	18c02034 	orhi	r3,r3,128
   12064:	01000e04 	movi	r4,56
   12068:	2080b00e 	bge	r4,r2,1232c <__subdf3+0x514>
   1206c:	198cb03a 	or	r6,r3,r6
   12070:	300ec03a 	cmpne	r7,r6,zero
   12074:	0005883a 	mov	r2,zero
   12078:	3c4f883a 	add	r7,r7,r17
   1207c:	3c63803a 	cmpltu	r17,r7,r17
   12080:	114b883a 	add	r5,r2,r5
   12084:	2c4b883a 	add	r5,r5,r17
   12088:	3823883a 	mov	r17,r7
   1208c:	2880202c 	andhi	r2,r5,128
   12090:	10002e26 	beq	r2,zero,1214c <__subdf3+0x334>
   12094:	84000044 	addi	r16,r16,1
   12098:	0081ffc4 	movi	r2,2047
   1209c:	8080de26 	beq	r16,r2,12418 <__subdf3+0x600>
   120a0:	00bfe034 	movhi	r2,65408
   120a4:	10bfffc4 	addi	r2,r2,-1
   120a8:	288a703a 	and	r5,r5,r2
   120ac:	880cd07a 	srli	r6,r17,1
   120b0:	280897fa 	slli	r4,r5,31
   120b4:	88c0004c 	andi	r3,r17,1
   120b8:	30e2b03a 	or	r17,r6,r3
   120bc:	280ad07a 	srli	r5,r5,1
   120c0:	8922b03a 	or	r17,r17,r4
   120c4:	003f7706 	br	11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   120c8:	1984b03a 	or	r2,r3,r6
   120cc:	103f6e26 	beq	r2,zero,11e88 <__alt_mem_Flash_flash_data+0xf4011e88>
   120d0:	39c03fcc 	andi	r7,r7,255
   120d4:	003f6d06 	br	11e8c <__alt_mem_Flash_flash_data+0xf4011e8c>
   120d8:	1146b03a 	or	r3,r2,r5
   120dc:	18003f26 	beq	r3,zero,121dc <__subdf3+0x3c4>
   120e0:	00c00434 	movhi	r3,16
   120e4:	29000234 	orhi	r4,r5,8
   120e8:	18ffffc4 	addi	r3,r3,-1
   120ec:	20c8703a 	and	r4,r4,r3
   120f0:	003f8406 	br	11f04 <__alt_mem_Flash_flash_data+0xf4011f04>
   120f4:	10bfffc4 	addi	r2,r2,-1
   120f8:	1000501e 	bne	r2,zero,1223c <__subdf3+0x424>
   120fc:	898fc83a 	sub	r7,r17,r6
   12100:	89e3803a 	cmpltu	r17,r17,r7
   12104:	28cbc83a 	sub	r5,r5,r3
   12108:	2c4bc83a 	sub	r5,r5,r17
   1210c:	3823883a 	mov	r17,r7
   12110:	003fa106 	br	11f98 <__alt_mem_Flash_flash_data+0xf4011f98>
   12114:	1988b03a 	or	r4,r3,r6
   12118:	203f6226 	beq	r4,zero,11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   1211c:	10bfffc4 	addi	r2,r2,-1
   12120:	10009b1e 	bne	r2,zero,12390 <__subdf3+0x578>
   12124:	344d883a 	add	r6,r6,r17
   12128:	3463803a 	cmpltu	r17,r6,r17
   1212c:	194b883a 	add	r5,r3,r5
   12130:	2c4b883a 	add	r5,r5,r17
   12134:	3023883a 	mov	r17,r6
   12138:	003fd406 	br	1208c <__alt_mem_Flash_flash_data+0xf401208c>
   1213c:	1106b03a 	or	r3,r2,r4
   12140:	1800b426 	beq	r3,zero,12414 <__subdf3+0x5fc>
   12144:	100b883a 	mov	r5,r2
   12148:	2023883a 	mov	r17,r4
   1214c:	888001cc 	andi	r2,r17,7
   12150:	103f561e 	bne	r2,zero,11eac <__alt_mem_Flash_flash_data+0xf4011eac>
   12154:	9200004c 	andi	r8,r18,1
   12158:	003fb206 	br	12024 <__alt_mem_Flash_flash_data+0xf4012024>
   1215c:	1000531e 	bne	r2,zero,122ac <__subdf3+0x494>
   12160:	80800044 	addi	r2,r16,1
   12164:	1081ffcc 	andi	r2,r2,2047
   12168:	01000044 	movi	r4,1
   1216c:	2080a00e 	bge	r4,r2,123f0 <__subdf3+0x5d8>
   12170:	8985c83a 	sub	r2,r17,r6
   12174:	8889803a 	cmpltu	r4,r17,r2
   12178:	28e7c83a 	sub	r19,r5,r3
   1217c:	9927c83a 	sub	r19,r19,r4
   12180:	9900202c 	andhi	r4,r19,128
   12184:	20006226 	beq	r4,zero,12310 <__subdf3+0x4f8>
   12188:	3463c83a 	sub	r17,r6,r17
   1218c:	194bc83a 	sub	r5,r3,r5
   12190:	344d803a 	cmpltu	r6,r6,r17
   12194:	29a7c83a 	sub	r19,r5,r6
   12198:	3825883a 	mov	r18,r7
   1219c:	983f841e 	bne	r19,zero,11fb0 <__alt_mem_Flash_flash_data+0xf4011fb0>
   121a0:	8809883a 	mov	r4,r17
   121a4:	00128e40 	call	128e4 <__clzsi2>
   121a8:	10800804 	addi	r2,r2,32
   121ac:	10fffe04 	addi	r3,r2,-8
   121b0:	010007c4 	movi	r4,31
   121b4:	20ff830e 	bge	r4,r3,11fc4 <__alt_mem_Flash_flash_data+0xf4011fc4>
   121b8:	14fff604 	addi	r19,r2,-40
   121bc:	8ce6983a 	sll	r19,r17,r19
   121c0:	0023883a 	mov	r17,zero
   121c4:	1c3f860e 	bge	r3,r16,11fe0 <__alt_mem_Flash_flash_data+0xf4011fe0>
   121c8:	017fe034 	movhi	r5,65408
   121cc:	297fffc4 	addi	r5,r5,-1
   121d0:	80e1c83a 	sub	r16,r16,r3
   121d4:	994a703a 	and	r5,r19,r5
   121d8:	003f3206 	br	11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   121dc:	0009883a 	mov	r4,zero
   121e0:	0005883a 	mov	r2,zero
   121e4:	003f4706 	br	11f04 <__alt_mem_Flash_flash_data+0xf4011f04>
   121e8:	198cb03a 	or	r6,r3,r6
   121ec:	300cc03a 	cmpne	r6,r6,zero
   121f0:	0005883a 	mov	r2,zero
   121f4:	003f6306 	br	11f84 <__alt_mem_Flash_flash_data+0xf4011f84>
   121f8:	10009d1e 	bne	r2,zero,12470 <__subdf3+0x658>
   121fc:	81c00044 	addi	r7,r16,1
   12200:	3881ffcc 	andi	r2,r7,2047
   12204:	02400044 	movi	r9,1
   12208:	4880680e 	bge	r9,r2,123ac <__subdf3+0x594>
   1220c:	0081ffc4 	movi	r2,2047
   12210:	3880ae26 	beq	r7,r2,124cc <__subdf3+0x6b4>
   12214:	344d883a 	add	r6,r6,r17
   12218:	3463803a 	cmpltu	r17,r6,r17
   1221c:	194b883a 	add	r5,r3,r5
   12220:	2c4b883a 	add	r5,r5,r17
   12224:	282297fa 	slli	r17,r5,31
   12228:	300cd07a 	srli	r6,r6,1
   1222c:	280ad07a 	srli	r5,r5,1
   12230:	3821883a 	mov	r16,r7
   12234:	89a2b03a 	or	r17,r17,r6
   12238:	003f1a06 	br	11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   1223c:	0101ffc4 	movi	r4,2047
   12240:	813f431e 	bne	r16,r4,11f50 <__alt_mem_Flash_flash_data+0xf4011f50>
   12244:	003f1706 	br	11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   12248:	80bff844 	addi	r2,r16,-31
   1224c:	00c00804 	movi	r3,32
   12250:	9884d83a 	srl	r2,r19,r2
   12254:	28c05126 	beq	r5,r3,1239c <__subdf3+0x584>
   12258:	00c00fc4 	movi	r3,63
   1225c:	1c21c83a 	sub	r16,r3,r16
   12260:	9c26983a 	sll	r19,r19,r16
   12264:	9c62b03a 	or	r17,r19,r17
   12268:	8822c03a 	cmpne	r17,r17,zero
   1226c:	88a2b03a 	or	r17,r17,r2
   12270:	000b883a 	mov	r5,zero
   12274:	0021883a 	mov	r16,zero
   12278:	003fb406 	br	1214c <__alt_mem_Flash_flash_data+0xf401214c>
   1227c:	113ff804 	addi	r4,r2,-32
   12280:	01c00804 	movi	r7,32
   12284:	1908d83a 	srl	r4,r3,r4
   12288:	11c04626 	beq	r2,r7,123a4 <__subdf3+0x58c>
   1228c:	01c01004 	movi	r7,64
   12290:	3885c83a 	sub	r2,r7,r2
   12294:	1884983a 	sll	r2,r3,r2
   12298:	118cb03a 	or	r6,r2,r6
   1229c:	300cc03a 	cmpne	r6,r6,zero
   122a0:	310cb03a 	or	r6,r6,r4
   122a4:	0005883a 	mov	r2,zero
   122a8:	003f3606 	br	11f84 <__alt_mem_Flash_flash_data+0xf4011f84>
   122ac:	80002b26 	beq	r16,zero,1235c <__subdf3+0x544>
   122b0:	0101ffc4 	movi	r4,2047
   122b4:	51006926 	beq	r10,r4,1245c <__subdf3+0x644>
   122b8:	0085c83a 	sub	r2,zero,r2
   122bc:	29402034 	orhi	r5,r5,128
   122c0:	01000e04 	movi	r4,56
   122c4:	20807d16 	blt	r4,r2,124bc <__subdf3+0x6a4>
   122c8:	010007c4 	movi	r4,31
   122cc:	2080d916 	blt	r4,r2,12634 <__subdf3+0x81c>
   122d0:	01000804 	movi	r4,32
   122d4:	2089c83a 	sub	r4,r4,r2
   122d8:	2912983a 	sll	r9,r5,r4
   122dc:	8890d83a 	srl	r8,r17,r2
   122e0:	8908983a 	sll	r4,r17,r4
   122e4:	2884d83a 	srl	r2,r5,r2
   122e8:	4a22b03a 	or	r17,r9,r8
   122ec:	2008c03a 	cmpne	r4,r4,zero
   122f0:	8922b03a 	or	r17,r17,r4
   122f4:	3463c83a 	sub	r17,r6,r17
   122f8:	1885c83a 	sub	r2,r3,r2
   122fc:	344d803a 	cmpltu	r6,r6,r17
   12300:	118bc83a 	sub	r5,r2,r6
   12304:	5021883a 	mov	r16,r10
   12308:	3825883a 	mov	r18,r7
   1230c:	003f2206 	br	11f98 <__alt_mem_Flash_flash_data+0xf4011f98>
   12310:	9886b03a 	or	r3,r19,r2
   12314:	18001c1e 	bne	r3,zero,12388 <__subdf3+0x570>
   12318:	0011883a 	mov	r8,zero
   1231c:	000b883a 	mov	r5,zero
   12320:	0023883a 	mov	r17,zero
   12324:	0021883a 	mov	r16,zero
   12328:	003f3e06 	br	12024 <__alt_mem_Flash_flash_data+0xf4012024>
   1232c:	010007c4 	movi	r4,31
   12330:	20803c16 	blt	r4,r2,12424 <__subdf3+0x60c>
   12334:	01000804 	movi	r4,32
   12338:	2089c83a 	sub	r4,r4,r2
   1233c:	1912983a 	sll	r9,r3,r4
   12340:	308ed83a 	srl	r7,r6,r2
   12344:	3108983a 	sll	r4,r6,r4
   12348:	1884d83a 	srl	r2,r3,r2
   1234c:	49ceb03a 	or	r7,r9,r7
   12350:	2008c03a 	cmpne	r4,r4,zero
   12354:	390eb03a 	or	r7,r7,r4
   12358:	003f4706 	br	12078 <__alt_mem_Flash_flash_data+0xf4012078>
   1235c:	2c48b03a 	or	r4,r5,r17
   12360:	20003e26 	beq	r4,zero,1245c <__subdf3+0x644>
   12364:	0084303a 	nor	r2,zero,r2
   12368:	10003a1e 	bne	r2,zero,12454 <__subdf3+0x63c>
   1236c:	3463c83a 	sub	r17,r6,r17
   12370:	194bc83a 	sub	r5,r3,r5
   12374:	344d803a 	cmpltu	r6,r6,r17
   12378:	298bc83a 	sub	r5,r5,r6
   1237c:	5021883a 	mov	r16,r10
   12380:	3825883a 	mov	r18,r7
   12384:	003f0406 	br	11f98 <__alt_mem_Flash_flash_data+0xf4011f98>
   12388:	1023883a 	mov	r17,r2
   1238c:	003f0706 	br	11fac <__alt_mem_Flash_flash_data+0xf4011fac>
   12390:	0101ffc4 	movi	r4,2047
   12394:	813f331e 	bne	r16,r4,12064 <__alt_mem_Flash_flash_data+0xf4012064>
   12398:	003ec206 	br	11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   1239c:	0027883a 	mov	r19,zero
   123a0:	003fb006 	br	12264 <__alt_mem_Flash_flash_data+0xf4012264>
   123a4:	0005883a 	mov	r2,zero
   123a8:	003fbb06 	br	12298 <__alt_mem_Flash_flash_data+0xf4012298>
   123ac:	2c44b03a 	or	r2,r5,r17
   123b0:	80008b1e 	bne	r16,zero,125e0 <__subdf3+0x7c8>
   123b4:	1000b526 	beq	r2,zero,1268c <__subdf3+0x874>
   123b8:	1984b03a 	or	r2,r3,r6
   123bc:	103eb926 	beq	r2,zero,11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   123c0:	3449883a 	add	r4,r6,r17
   123c4:	2463803a 	cmpltu	r17,r4,r17
   123c8:	194b883a 	add	r5,r3,r5
   123cc:	2c4b883a 	add	r5,r5,r17
   123d0:	2880202c 	andhi	r2,r5,128
   123d4:	2023883a 	mov	r17,r4
   123d8:	103f5c26 	beq	r2,zero,1214c <__alt_mem_Flash_flash_data+0xf401214c>
   123dc:	00bfe034 	movhi	r2,65408
   123e0:	10bfffc4 	addi	r2,r2,-1
   123e4:	4821883a 	mov	r16,r9
   123e8:	288a703a 	and	r5,r5,r2
   123ec:	003ead06 	br	11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   123f0:	2c44b03a 	or	r2,r5,r17
   123f4:	8000291e 	bne	r16,zero,1249c <__subdf3+0x684>
   123f8:	10004f1e 	bne	r2,zero,12538 <__subdf3+0x720>
   123fc:	1984b03a 	or	r2,r3,r6
   12400:	10000426 	beq	r2,zero,12414 <__subdf3+0x5fc>
   12404:	180b883a 	mov	r5,r3
   12408:	3023883a 	mov	r17,r6
   1240c:	3825883a 	mov	r18,r7
   12410:	003ea406 	br	11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   12414:	0011883a 	mov	r8,zero
   12418:	000b883a 	mov	r5,zero
   1241c:	0023883a 	mov	r17,zero
   12420:	003f0006 	br	12024 <__alt_mem_Flash_flash_data+0xf4012024>
   12424:	11fff804 	addi	r7,r2,-32
   12428:	19c8d83a 	srl	r4,r3,r7
   1242c:	01c00804 	movi	r7,32
   12430:	11c07e26 	beq	r2,r7,1262c <__subdf3+0x814>
   12434:	01c01004 	movi	r7,64
   12438:	3885c83a 	sub	r2,r7,r2
   1243c:	1884983a 	sll	r2,r3,r2
   12440:	118cb03a 	or	r6,r2,r6
   12444:	300ec03a 	cmpne	r7,r6,zero
   12448:	390eb03a 	or	r7,r7,r4
   1244c:	0005883a 	mov	r2,zero
   12450:	003f0906 	br	12078 <__alt_mem_Flash_flash_data+0xf4012078>
   12454:	0101ffc4 	movi	r4,2047
   12458:	513f991e 	bne	r10,r4,122c0 <__alt_mem_Flash_flash_data+0xf40122c0>
   1245c:	180b883a 	mov	r5,r3
   12460:	3023883a 	mov	r17,r6
   12464:	5021883a 	mov	r16,r10
   12468:	3825883a 	mov	r18,r7
   1246c:	003e8d06 	br	11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   12470:	80001a1e 	bne	r16,zero,124dc <__subdf3+0x6c4>
   12474:	2c48b03a 	or	r4,r5,r17
   12478:	20005526 	beq	r4,zero,125d0 <__subdf3+0x7b8>
   1247c:	0084303a 	nor	r2,zero,r2
   12480:	1000511e 	bne	r2,zero,125c8 <__subdf3+0x7b0>
   12484:	89a3883a 	add	r17,r17,r6
   12488:	194b883a 	add	r5,r3,r5
   1248c:	898d803a 	cmpltu	r6,r17,r6
   12490:	298b883a 	add	r5,r5,r6
   12494:	5021883a 	mov	r16,r10
   12498:	003efc06 	br	1208c <__alt_mem_Flash_flash_data+0xf401208c>
   1249c:	1000341e 	bne	r2,zero,12570 <__subdf3+0x758>
   124a0:	1984b03a 	or	r2,r3,r6
   124a4:	10006f26 	beq	r2,zero,12664 <__subdf3+0x84c>
   124a8:	180b883a 	mov	r5,r3
   124ac:	3023883a 	mov	r17,r6
   124b0:	3825883a 	mov	r18,r7
   124b4:	0401ffc4 	movi	r16,2047
   124b8:	003e7a06 	br	11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   124bc:	2c62b03a 	or	r17,r5,r17
   124c0:	8822c03a 	cmpne	r17,r17,zero
   124c4:	0005883a 	mov	r2,zero
   124c8:	003f8a06 	br	122f4 <__alt_mem_Flash_flash_data+0xf40122f4>
   124cc:	3821883a 	mov	r16,r7
   124d0:	000b883a 	mov	r5,zero
   124d4:	0023883a 	mov	r17,zero
   124d8:	003ed206 	br	12024 <__alt_mem_Flash_flash_data+0xf4012024>
   124dc:	0101ffc4 	movi	r4,2047
   124e0:	51003b26 	beq	r10,r4,125d0 <__subdf3+0x7b8>
   124e4:	0085c83a 	sub	r2,zero,r2
   124e8:	29402034 	orhi	r5,r5,128
   124ec:	01000e04 	movi	r4,56
   124f0:	20806216 	blt	r4,r2,1267c <__subdf3+0x864>
   124f4:	010007c4 	movi	r4,31
   124f8:	20806b16 	blt	r4,r2,126a8 <__subdf3+0x890>
   124fc:	01000804 	movi	r4,32
   12500:	2089c83a 	sub	r4,r4,r2
   12504:	2912983a 	sll	r9,r5,r4
   12508:	888ed83a 	srl	r7,r17,r2
   1250c:	8908983a 	sll	r4,r17,r4
   12510:	2884d83a 	srl	r2,r5,r2
   12514:	49e2b03a 	or	r17,r9,r7
   12518:	2008c03a 	cmpne	r4,r4,zero
   1251c:	8922b03a 	or	r17,r17,r4
   12520:	89a3883a 	add	r17,r17,r6
   12524:	10c5883a 	add	r2,r2,r3
   12528:	898d803a 	cmpltu	r6,r17,r6
   1252c:	118b883a 	add	r5,r2,r6
   12530:	5021883a 	mov	r16,r10
   12534:	003ed506 	br	1208c <__alt_mem_Flash_flash_data+0xf401208c>
   12538:	1984b03a 	or	r2,r3,r6
   1253c:	103e5926 	beq	r2,zero,11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   12540:	8989c83a 	sub	r4,r17,r6
   12544:	8911803a 	cmpltu	r8,r17,r4
   12548:	28c5c83a 	sub	r2,r5,r3
   1254c:	1205c83a 	sub	r2,r2,r8
   12550:	1200202c 	andhi	r8,r2,128
   12554:	403ef926 	beq	r8,zero,1213c <__alt_mem_Flash_flash_data+0xf401213c>
   12558:	3463c83a 	sub	r17,r6,r17
   1255c:	194bc83a 	sub	r5,r3,r5
   12560:	344d803a 	cmpltu	r6,r6,r17
   12564:	298bc83a 	sub	r5,r5,r6
   12568:	3825883a 	mov	r18,r7
   1256c:	003e4d06 	br	11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   12570:	1984b03a 	or	r2,r3,r6
   12574:	10002b26 	beq	r2,zero,12624 <__subdf3+0x80c>
   12578:	2808d0fa 	srli	r4,r5,3
   1257c:	8822d0fa 	srli	r17,r17,3
   12580:	280a977a 	slli	r5,r5,29
   12584:	2080022c 	andhi	r2,r4,8
   12588:	2c62b03a 	or	r17,r5,r17
   1258c:	10000826 	beq	r2,zero,125b0 <__subdf3+0x798>
   12590:	1810d0fa 	srli	r8,r3,3
   12594:	4080022c 	andhi	r2,r8,8
   12598:	1000051e 	bne	r2,zero,125b0 <__subdf3+0x798>
   1259c:	300cd0fa 	srli	r6,r6,3
   125a0:	1804977a 	slli	r2,r3,29
   125a4:	4009883a 	mov	r4,r8
   125a8:	3825883a 	mov	r18,r7
   125ac:	11a2b03a 	or	r17,r2,r6
   125b0:	880ad77a 	srli	r5,r17,29
   125b4:	200890fa 	slli	r4,r4,3
   125b8:	882290fa 	slli	r17,r17,3
   125bc:	0401ffc4 	movi	r16,2047
   125c0:	290ab03a 	or	r5,r5,r4
   125c4:	003e3706 	br	11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   125c8:	0101ffc4 	movi	r4,2047
   125cc:	513fc71e 	bne	r10,r4,124ec <__alt_mem_Flash_flash_data+0xf40124ec>
   125d0:	180b883a 	mov	r5,r3
   125d4:	3023883a 	mov	r17,r6
   125d8:	5021883a 	mov	r16,r10
   125dc:	003e3106 	br	11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   125e0:	10002d26 	beq	r2,zero,12698 <__subdf3+0x880>
   125e4:	1984b03a 	or	r2,r3,r6
   125e8:	10000e26 	beq	r2,zero,12624 <__subdf3+0x80c>
   125ec:	2808d0fa 	srli	r4,r5,3
   125f0:	8822d0fa 	srli	r17,r17,3
   125f4:	280a977a 	slli	r5,r5,29
   125f8:	2080022c 	andhi	r2,r4,8
   125fc:	2c62b03a 	or	r17,r5,r17
   12600:	103feb26 	beq	r2,zero,125b0 <__alt_mem_Flash_flash_data+0xf40125b0>
   12604:	180ed0fa 	srli	r7,r3,3
   12608:	3880022c 	andhi	r2,r7,8
   1260c:	103fe81e 	bne	r2,zero,125b0 <__alt_mem_Flash_flash_data+0xf40125b0>
   12610:	300cd0fa 	srli	r6,r6,3
   12614:	1804977a 	slli	r2,r3,29
   12618:	3809883a 	mov	r4,r7
   1261c:	11a2b03a 	or	r17,r2,r6
   12620:	003fe306 	br	125b0 <__alt_mem_Flash_flash_data+0xf40125b0>
   12624:	0401ffc4 	movi	r16,2047
   12628:	003e1e06 	br	11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   1262c:	0005883a 	mov	r2,zero
   12630:	003f8306 	br	12440 <__alt_mem_Flash_flash_data+0xf4012440>
   12634:	113ff804 	addi	r4,r2,-32
   12638:	02000804 	movi	r8,32
   1263c:	2908d83a 	srl	r4,r5,r4
   12640:	12002526 	beq	r2,r8,126d8 <__subdf3+0x8c0>
   12644:	02001004 	movi	r8,64
   12648:	4085c83a 	sub	r2,r8,r2
   1264c:	288a983a 	sll	r5,r5,r2
   12650:	2c62b03a 	or	r17,r5,r17
   12654:	8822c03a 	cmpne	r17,r17,zero
   12658:	8922b03a 	or	r17,r17,r4
   1265c:	0005883a 	mov	r2,zero
   12660:	003f2406 	br	122f4 <__alt_mem_Flash_flash_data+0xf40122f4>
   12664:	01402034 	movhi	r5,128
   12668:	0011883a 	mov	r8,zero
   1266c:	297fffc4 	addi	r5,r5,-1
   12670:	047ffe04 	movi	r17,-8
   12674:	0401ffc4 	movi	r16,2047
   12678:	003e6a06 	br	12024 <__alt_mem_Flash_flash_data+0xf4012024>
   1267c:	2c62b03a 	or	r17,r5,r17
   12680:	8822c03a 	cmpne	r17,r17,zero
   12684:	0005883a 	mov	r2,zero
   12688:	003fa506 	br	12520 <__alt_mem_Flash_flash_data+0xf4012520>
   1268c:	180b883a 	mov	r5,r3
   12690:	3023883a 	mov	r17,r6
   12694:	003e0306 	br	11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   12698:	180b883a 	mov	r5,r3
   1269c:	3023883a 	mov	r17,r6
   126a0:	0401ffc4 	movi	r16,2047
   126a4:	003dff06 	br	11ea4 <__alt_mem_Flash_flash_data+0xf4011ea4>
   126a8:	113ff804 	addi	r4,r2,-32
   126ac:	01c00804 	movi	r7,32
   126b0:	2908d83a 	srl	r4,r5,r4
   126b4:	11c00a26 	beq	r2,r7,126e0 <__subdf3+0x8c8>
   126b8:	01c01004 	movi	r7,64
   126bc:	3885c83a 	sub	r2,r7,r2
   126c0:	288a983a 	sll	r5,r5,r2
   126c4:	2c62b03a 	or	r17,r5,r17
   126c8:	8822c03a 	cmpne	r17,r17,zero
   126cc:	8922b03a 	or	r17,r17,r4
   126d0:	0005883a 	mov	r2,zero
   126d4:	003f9206 	br	12520 <__alt_mem_Flash_flash_data+0xf4012520>
   126d8:	000b883a 	mov	r5,zero
   126dc:	003fdc06 	br	12650 <__alt_mem_Flash_flash_data+0xf4012650>
   126e0:	000b883a 	mov	r5,zero
   126e4:	003ff706 	br	126c4 <__alt_mem_Flash_flash_data+0xf40126c4>

000126e8 <__fixdfsi>:
   126e8:	2806d53a 	srli	r3,r5,20
   126ec:	00800434 	movhi	r2,16
   126f0:	10bfffc4 	addi	r2,r2,-1
   126f4:	18c1ffcc 	andi	r3,r3,2047
   126f8:	0180ff84 	movi	r6,1022
   126fc:	2884703a 	and	r2,r5,r2
   12700:	280ad7fa 	srli	r5,r5,31
   12704:	30c0130e 	bge	r6,r3,12754 <__fixdfsi+0x6c>
   12708:	01810744 	movi	r6,1053
   1270c:	30c00d16 	blt	r6,r3,12744 <__fixdfsi+0x5c>
   12710:	01810cc4 	movi	r6,1075
   12714:	30cdc83a 	sub	r6,r6,r3
   12718:	01c007c4 	movi	r7,31
   1271c:	10800434 	orhi	r2,r2,16
   12720:	39800e0e 	bge	r7,r6,1275c <__fixdfsi+0x74>
   12724:	010104c4 	movi	r4,1043
   12728:	20c7c83a 	sub	r3,r4,r3
   1272c:	10c6d83a 	srl	r3,r2,r3
   12730:	29403fcc 	andi	r5,r5,255
   12734:	0145c83a 	sub	r2,zero,r5
   12738:	1884f03a 	xor	r2,r3,r2
   1273c:	1145883a 	add	r2,r2,r5
   12740:	f800283a 	ret
   12744:	00a00034 	movhi	r2,32768
   12748:	10bfffc4 	addi	r2,r2,-1
   1274c:	2885883a 	add	r2,r5,r2
   12750:	f800283a 	ret
   12754:	0005883a 	mov	r2,zero
   12758:	f800283a 	ret
   1275c:	18fefb44 	addi	r3,r3,-1043
   12760:	2188d83a 	srl	r4,r4,r6
   12764:	10c6983a 	sll	r3,r2,r3
   12768:	20c6b03a 	or	r3,r4,r3
   1276c:	003ff006 	br	12730 <__alt_mem_Flash_flash_data+0xf4012730>

00012770 <__floatsidf>:
   12770:	defffd04 	addi	sp,sp,-12
   12774:	dc400115 	stw	r17,4(sp)
   12778:	dfc00215 	stw	ra,8(sp)
   1277c:	dc000015 	stw	r16,0(sp)
   12780:	2023883a 	mov	r17,r4
   12784:	20001426 	beq	r4,zero,127d8 <__floatsidf+0x68>
   12788:	2020d7fa 	srli	r16,r4,31
   1278c:	80000126 	beq	r16,zero,12794 <__floatsidf+0x24>
   12790:	0123c83a 	sub	r17,zero,r4
   12794:	8809883a 	mov	r4,r17
   12798:	00128e40 	call	128e4 <__clzsi2>
   1279c:	01410784 	movi	r5,1054
   127a0:	00c00284 	movi	r3,10
   127a4:	288bc83a 	sub	r5,r5,r2
   127a8:	18801c16 	blt	r3,r2,1281c <__floatsidf+0xac>
   127ac:	00c002c4 	movi	r3,11
   127b0:	1887c83a 	sub	r3,r3,r2
   127b4:	88c8d83a 	srl	r4,r17,r3
   127b8:	00c00434 	movhi	r3,16
   127bc:	18ffffc4 	addi	r3,r3,-1
   127c0:	10800544 	addi	r2,r2,21
   127c4:	20c8703a 	and	r4,r4,r3
   127c8:	8884983a 	sll	r2,r17,r2
   127cc:	28c1ffcc 	andi	r3,r5,2047
   127d0:	800d883a 	mov	r6,r16
   127d4:	00000406 	br	127e8 <__floatsidf+0x78>
   127d8:	000d883a 	mov	r6,zero
   127dc:	0007883a 	mov	r3,zero
   127e0:	0009883a 	mov	r4,zero
   127e4:	0005883a 	mov	r2,zero
   127e8:	180a953a 	slli	r5,r3,20
   127ec:	31803fcc 	andi	r6,r6,255
   127f0:	00c00434 	movhi	r3,16
   127f4:	300c97fa 	slli	r6,r6,31
   127f8:	18ffffc4 	addi	r3,r3,-1
   127fc:	20c6703a 	and	r3,r4,r3
   12800:	1946b03a 	or	r3,r3,r5
   12804:	1986b03a 	or	r3,r3,r6
   12808:	dfc00217 	ldw	ra,8(sp)
   1280c:	dc400117 	ldw	r17,4(sp)
   12810:	dc000017 	ldw	r16,0(sp)
   12814:	dec00304 	addi	sp,sp,12
   12818:	f800283a 	ret
   1281c:	10fffd44 	addi	r3,r2,-11
   12820:	88c8983a 	sll	r4,r17,r3
   12824:	00800434 	movhi	r2,16
   12828:	10bfffc4 	addi	r2,r2,-1
   1282c:	2088703a 	and	r4,r4,r2
   12830:	28c1ffcc 	andi	r3,r5,2047
   12834:	800d883a 	mov	r6,r16
   12838:	0005883a 	mov	r2,zero
   1283c:	003fea06 	br	127e8 <__alt_mem_Flash_flash_data+0xf40127e8>

00012840 <__floatunsidf>:
   12840:	defffe04 	addi	sp,sp,-8
   12844:	dc000015 	stw	r16,0(sp)
   12848:	dfc00115 	stw	ra,4(sp)
   1284c:	2021883a 	mov	r16,r4
   12850:	20001026 	beq	r4,zero,12894 <__floatunsidf+0x54>
   12854:	00128e40 	call	128e4 <__clzsi2>
   12858:	01410784 	movi	r5,1054
   1285c:	100d883a 	mov	r6,r2
   12860:	288bc83a 	sub	r5,r5,r2
   12864:	00800284 	movi	r2,10
   12868:	11801616 	blt	r2,r6,128c4 <__floatunsidf+0x84>
   1286c:	008002c4 	movi	r2,11
   12870:	1185c83a 	sub	r2,r2,r6
   12874:	8084d83a 	srl	r2,r16,r2
   12878:	00c00434 	movhi	r3,16
   1287c:	31c00544 	addi	r7,r6,21
   12880:	18ffffc4 	addi	r3,r3,-1
   12884:	81e0983a 	sll	r16,r16,r7
   12888:	10cc703a 	and	r6,r2,r3
   1288c:	2941ffcc 	andi	r5,r5,2047
   12890:	00000206 	br	1289c <__floatunsidf+0x5c>
   12894:	000b883a 	mov	r5,zero
   12898:	000d883a 	mov	r6,zero
   1289c:	280a953a 	slli	r5,r5,20
   128a0:	00c00434 	movhi	r3,16
   128a4:	18ffffc4 	addi	r3,r3,-1
   128a8:	30c6703a 	and	r3,r6,r3
   128ac:	8005883a 	mov	r2,r16
   128b0:	1946b03a 	or	r3,r3,r5
   128b4:	dfc00117 	ldw	ra,4(sp)
   128b8:	dc000017 	ldw	r16,0(sp)
   128bc:	dec00204 	addi	sp,sp,8
   128c0:	f800283a 	ret
   128c4:	31bffd44 	addi	r6,r6,-11
   128c8:	818c983a 	sll	r6,r16,r6
   128cc:	00800434 	movhi	r2,16
   128d0:	10bfffc4 	addi	r2,r2,-1
   128d4:	2941ffcc 	andi	r5,r5,2047
   128d8:	0021883a 	mov	r16,zero
   128dc:	308c703a 	and	r6,r6,r2
   128e0:	003fee06 	br	1289c <__alt_mem_Flash_flash_data+0xf401289c>

000128e4 <__clzsi2>:
   128e4:	00bfffd4 	movui	r2,65535
   128e8:	11000b36 	bltu	r2,r4,12918 <__clzsi2+0x34>
   128ec:	00803fc4 	movi	r2,255
   128f0:	1100122e 	bgeu	r2,r4,1293c <__clzsi2+0x58>
   128f4:	00c00204 	movi	r3,8
   128f8:	01400604 	movi	r5,24
   128fc:	20c8d83a 	srl	r4,r4,r3
   12900:	008000b4 	movhi	r2,2
   12904:	10810204 	addi	r2,r2,1032
   12908:	1109883a 	add	r4,r2,r4
   1290c:	20800003 	ldbu	r2,0(r4)
   12910:	2885c83a 	sub	r2,r5,r2
   12914:	f800283a 	ret
   12918:	00804034 	movhi	r2,256
   1291c:	10bfffc4 	addi	r2,r2,-1
   12920:	11000336 	bltu	r2,r4,12930 <__clzsi2+0x4c>
   12924:	00c00404 	movi	r3,16
   12928:	180b883a 	mov	r5,r3
   1292c:	003ff306 	br	128fc <__alt_mem_Flash_flash_data+0xf40128fc>
   12930:	00c00604 	movi	r3,24
   12934:	01400204 	movi	r5,8
   12938:	003ff006 	br	128fc <__alt_mem_Flash_flash_data+0xf40128fc>
   1293c:	0007883a 	mov	r3,zero
   12940:	01400804 	movi	r5,32
   12944:	003fed06 	br	128fc <__alt_mem_Flash_flash_data+0xf40128fc>

00012948 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12948:	defffe04 	addi	sp,sp,-8
   1294c:	dfc00115 	stw	ra,4(sp)
   12950:	df000015 	stw	fp,0(sp)
   12954:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12958:	008000b4 	movhi	r2,2
   1295c:	1089a404 	addi	r2,r2,9872
   12960:	10800017 	ldw	r2,0(r2)
   12964:	10000526 	beq	r2,zero,1297c <alt_get_errno+0x34>
   12968:	008000b4 	movhi	r2,2
   1296c:	1089a404 	addi	r2,r2,9872
   12970:	10800017 	ldw	r2,0(r2)
   12974:	103ee83a 	callr	r2
   12978:	00000206 	br	12984 <alt_get_errno+0x3c>
   1297c:	008000b4 	movhi	r2,2
   12980:	1091b604 	addi	r2,r2,18136
}
   12984:	e037883a 	mov	sp,fp
   12988:	dfc00117 	ldw	ra,4(sp)
   1298c:	df000017 	ldw	fp,0(sp)
   12990:	dec00204 	addi	sp,sp,8
   12994:	f800283a 	ret

00012998 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12998:	defffb04 	addi	sp,sp,-20
   1299c:	dfc00415 	stw	ra,16(sp)
   129a0:	df000315 	stw	fp,12(sp)
   129a4:	df000304 	addi	fp,sp,12
   129a8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   129ac:	e0bfff17 	ldw	r2,-4(fp)
   129b0:	10000616 	blt	r2,zero,129cc <close+0x34>
   129b4:	e0bfff17 	ldw	r2,-4(fp)
   129b8:	10c00324 	muli	r3,r2,12
   129bc:	008000b4 	movhi	r2,2
   129c0:	10843004 	addi	r2,r2,4288
   129c4:	1885883a 	add	r2,r3,r2
   129c8:	00000106 	br	129d0 <close+0x38>
   129cc:	0005883a 	mov	r2,zero
   129d0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   129d4:	e0bffd17 	ldw	r2,-12(fp)
   129d8:	10001926 	beq	r2,zero,12a40 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   129dc:	e0bffd17 	ldw	r2,-12(fp)
   129e0:	10800017 	ldw	r2,0(r2)
   129e4:	10800417 	ldw	r2,16(r2)
   129e8:	10000626 	beq	r2,zero,12a04 <close+0x6c>
   129ec:	e0bffd17 	ldw	r2,-12(fp)
   129f0:	10800017 	ldw	r2,0(r2)
   129f4:	10800417 	ldw	r2,16(r2)
   129f8:	e13ffd17 	ldw	r4,-12(fp)
   129fc:	103ee83a 	callr	r2
   12a00:	00000106 	br	12a08 <close+0x70>
   12a04:	0005883a 	mov	r2,zero
   12a08:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   12a0c:	e13fff17 	ldw	r4,-4(fp)
   12a10:	00130b00 	call	130b0 <alt_release_fd>
    if (rval < 0)
   12a14:	e0bffe17 	ldw	r2,-8(fp)
   12a18:	1000070e 	bge	r2,zero,12a38 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   12a1c:	00129480 	call	12948 <alt_get_errno>
   12a20:	1007883a 	mov	r3,r2
   12a24:	e0bffe17 	ldw	r2,-8(fp)
   12a28:	0085c83a 	sub	r2,zero,r2
   12a2c:	18800015 	stw	r2,0(r3)
      return -1;
   12a30:	00bfffc4 	movi	r2,-1
   12a34:	00000706 	br	12a54 <close+0xbc>
    }
    return 0;
   12a38:	0005883a 	mov	r2,zero
   12a3c:	00000506 	br	12a54 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12a40:	00129480 	call	12948 <alt_get_errno>
   12a44:	1007883a 	mov	r3,r2
   12a48:	00801444 	movi	r2,81
   12a4c:	18800015 	stw	r2,0(r3)
    return -1;
   12a50:	00bfffc4 	movi	r2,-1
  }
}
   12a54:	e037883a 	mov	sp,fp
   12a58:	dfc00117 	ldw	ra,4(sp)
   12a5c:	df000017 	ldw	fp,0(sp)
   12a60:	dec00204 	addi	sp,sp,8
   12a64:	f800283a 	ret

00012a68 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   12a68:	defffc04 	addi	sp,sp,-16
   12a6c:	df000315 	stw	fp,12(sp)
   12a70:	df000304 	addi	fp,sp,12
   12a74:	e13ffd15 	stw	r4,-12(fp)
   12a78:	e17ffe15 	stw	r5,-8(fp)
   12a7c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   12a80:	e0bfff17 	ldw	r2,-4(fp)
}
   12a84:	e037883a 	mov	sp,fp
   12a88:	df000017 	ldw	fp,0(sp)
   12a8c:	dec00104 	addi	sp,sp,4
   12a90:	f800283a 	ret

00012a94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12a94:	defffe04 	addi	sp,sp,-8
   12a98:	dfc00115 	stw	ra,4(sp)
   12a9c:	df000015 	stw	fp,0(sp)
   12aa0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12aa4:	008000b4 	movhi	r2,2
   12aa8:	1089a404 	addi	r2,r2,9872
   12aac:	10800017 	ldw	r2,0(r2)
   12ab0:	10000526 	beq	r2,zero,12ac8 <alt_get_errno+0x34>
   12ab4:	008000b4 	movhi	r2,2
   12ab8:	1089a404 	addi	r2,r2,9872
   12abc:	10800017 	ldw	r2,0(r2)
   12ac0:	103ee83a 	callr	r2
   12ac4:	00000206 	br	12ad0 <alt_get_errno+0x3c>
   12ac8:	008000b4 	movhi	r2,2
   12acc:	1091b604 	addi	r2,r2,18136
}
   12ad0:	e037883a 	mov	sp,fp
   12ad4:	dfc00117 	ldw	ra,4(sp)
   12ad8:	df000017 	ldw	fp,0(sp)
   12adc:	dec00204 	addi	sp,sp,8
   12ae0:	f800283a 	ret

00012ae4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   12ae4:	defffb04 	addi	sp,sp,-20
   12ae8:	dfc00415 	stw	ra,16(sp)
   12aec:	df000315 	stw	fp,12(sp)
   12af0:	df000304 	addi	fp,sp,12
   12af4:	e13ffe15 	stw	r4,-8(fp)
   12af8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12afc:	e0bffe17 	ldw	r2,-8(fp)
   12b00:	10000616 	blt	r2,zero,12b1c <fstat+0x38>
   12b04:	e0bffe17 	ldw	r2,-8(fp)
   12b08:	10c00324 	muli	r3,r2,12
   12b0c:	008000b4 	movhi	r2,2
   12b10:	10843004 	addi	r2,r2,4288
   12b14:	1885883a 	add	r2,r3,r2
   12b18:	00000106 	br	12b20 <fstat+0x3c>
   12b1c:	0005883a 	mov	r2,zero
   12b20:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   12b24:	e0bffd17 	ldw	r2,-12(fp)
   12b28:	10001026 	beq	r2,zero,12b6c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   12b2c:	e0bffd17 	ldw	r2,-12(fp)
   12b30:	10800017 	ldw	r2,0(r2)
   12b34:	10800817 	ldw	r2,32(r2)
   12b38:	10000726 	beq	r2,zero,12b58 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   12b3c:	e0bffd17 	ldw	r2,-12(fp)
   12b40:	10800017 	ldw	r2,0(r2)
   12b44:	10800817 	ldw	r2,32(r2)
   12b48:	e13ffd17 	ldw	r4,-12(fp)
   12b4c:	e17fff17 	ldw	r5,-4(fp)
   12b50:	103ee83a 	callr	r2
   12b54:	00000a06 	br	12b80 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   12b58:	e0bfff17 	ldw	r2,-4(fp)
   12b5c:	00c80004 	movi	r3,8192
   12b60:	10c00115 	stw	r3,4(r2)
      return 0;
   12b64:	0005883a 	mov	r2,zero
   12b68:	00000506 	br	12b80 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12b6c:	0012a940 	call	12a94 <alt_get_errno>
   12b70:	1007883a 	mov	r3,r2
   12b74:	00801444 	movi	r2,81
   12b78:	18800015 	stw	r2,0(r3)
    return -1;
   12b7c:	00bfffc4 	movi	r2,-1
  }
}
   12b80:	e037883a 	mov	sp,fp
   12b84:	dfc00117 	ldw	ra,4(sp)
   12b88:	df000017 	ldw	fp,0(sp)
   12b8c:	dec00204 	addi	sp,sp,8
   12b90:	f800283a 	ret

00012b94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12b94:	defffe04 	addi	sp,sp,-8
   12b98:	dfc00115 	stw	ra,4(sp)
   12b9c:	df000015 	stw	fp,0(sp)
   12ba0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12ba4:	008000b4 	movhi	r2,2
   12ba8:	1089a404 	addi	r2,r2,9872
   12bac:	10800017 	ldw	r2,0(r2)
   12bb0:	10000526 	beq	r2,zero,12bc8 <alt_get_errno+0x34>
   12bb4:	008000b4 	movhi	r2,2
   12bb8:	1089a404 	addi	r2,r2,9872
   12bbc:	10800017 	ldw	r2,0(r2)
   12bc0:	103ee83a 	callr	r2
   12bc4:	00000206 	br	12bd0 <alt_get_errno+0x3c>
   12bc8:	008000b4 	movhi	r2,2
   12bcc:	1091b604 	addi	r2,r2,18136
}
   12bd0:	e037883a 	mov	sp,fp
   12bd4:	dfc00117 	ldw	ra,4(sp)
   12bd8:	df000017 	ldw	fp,0(sp)
   12bdc:	dec00204 	addi	sp,sp,8
   12be0:	f800283a 	ret

00012be4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   12be4:	deffed04 	addi	sp,sp,-76
   12be8:	dfc01215 	stw	ra,72(sp)
   12bec:	df001115 	stw	fp,68(sp)
   12bf0:	df001104 	addi	fp,sp,68
   12bf4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12bf8:	e0bfff17 	ldw	r2,-4(fp)
   12bfc:	10000616 	blt	r2,zero,12c18 <isatty+0x34>
   12c00:	e0bfff17 	ldw	r2,-4(fp)
   12c04:	10c00324 	muli	r3,r2,12
   12c08:	008000b4 	movhi	r2,2
   12c0c:	10843004 	addi	r2,r2,4288
   12c10:	1885883a 	add	r2,r3,r2
   12c14:	00000106 	br	12c1c <isatty+0x38>
   12c18:	0005883a 	mov	r2,zero
   12c1c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   12c20:	e0bfef17 	ldw	r2,-68(fp)
   12c24:	10000e26 	beq	r2,zero,12c60 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   12c28:	e0bfef17 	ldw	r2,-68(fp)
   12c2c:	10800017 	ldw	r2,0(r2)
   12c30:	10800817 	ldw	r2,32(r2)
   12c34:	1000021e 	bne	r2,zero,12c40 <isatty+0x5c>
    {
      return 1;
   12c38:	00800044 	movi	r2,1
   12c3c:	00000d06 	br	12c74 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   12c40:	e0bff004 	addi	r2,fp,-64
   12c44:	e13fff17 	ldw	r4,-4(fp)
   12c48:	100b883a 	mov	r5,r2
   12c4c:	0012ae40 	call	12ae4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   12c50:	e0bff117 	ldw	r2,-60(fp)
   12c54:	10880020 	cmpeqi	r2,r2,8192
   12c58:	10803fcc 	andi	r2,r2,255
   12c5c:	00000506 	br	12c74 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12c60:	0012b940 	call	12b94 <alt_get_errno>
   12c64:	1007883a 	mov	r3,r2
   12c68:	00801444 	movi	r2,81
   12c6c:	18800015 	stw	r2,0(r3)
    return 0;
   12c70:	0005883a 	mov	r2,zero
  }
}
   12c74:	e037883a 	mov	sp,fp
   12c78:	dfc00117 	ldw	ra,4(sp)
   12c7c:	df000017 	ldw	fp,0(sp)
   12c80:	dec00204 	addi	sp,sp,8
   12c84:	f800283a 	ret

00012c88 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   12c88:	defffc04 	addi	sp,sp,-16
   12c8c:	df000315 	stw	fp,12(sp)
   12c90:	df000304 	addi	fp,sp,12
   12c94:	e13ffd15 	stw	r4,-12(fp)
   12c98:	e17ffe15 	stw	r5,-8(fp)
   12c9c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   12ca0:	e0fffe17 	ldw	r3,-8(fp)
   12ca4:	e0bffd17 	ldw	r2,-12(fp)
   12ca8:	18800c26 	beq	r3,r2,12cdc <alt_load_section+0x54>
  {
    while( to != end )
   12cac:	00000806 	br	12cd0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   12cb0:	e0bffe17 	ldw	r2,-8(fp)
   12cb4:	10c00104 	addi	r3,r2,4
   12cb8:	e0fffe15 	stw	r3,-8(fp)
   12cbc:	e0fffd17 	ldw	r3,-12(fp)
   12cc0:	19000104 	addi	r4,r3,4
   12cc4:	e13ffd15 	stw	r4,-12(fp)
   12cc8:	18c00017 	ldw	r3,0(r3)
   12ccc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   12cd0:	e0fffe17 	ldw	r3,-8(fp)
   12cd4:	e0bfff17 	ldw	r2,-4(fp)
   12cd8:	18bff51e 	bne	r3,r2,12cb0 <__alt_mem_Flash_flash_data+0xf4012cb0>
    {
      *to++ = *from++;
    }
  }
}
   12cdc:	e037883a 	mov	sp,fp
   12ce0:	df000017 	ldw	fp,0(sp)
   12ce4:	dec00104 	addi	sp,sp,4
   12ce8:	f800283a 	ret

00012cec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12cec:	defffe04 	addi	sp,sp,-8
   12cf0:	dfc00115 	stw	ra,4(sp)
   12cf4:	df000015 	stw	fp,0(sp)
   12cf8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   12cfc:	010000b4 	movhi	r4,2
   12d00:	2109c804 	addi	r4,r4,10016
   12d04:	014000b4 	movhi	r5,2
   12d08:	2941fd04 	addi	r5,r5,2036
   12d0c:	018000b4 	movhi	r6,2
   12d10:	3189c804 	addi	r6,r6,10016
   12d14:	0012c880 	call	12c88 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   12d18:	01000034 	movhi	r4,0
   12d1c:	21000804 	addi	r4,r4,32
   12d20:	01400034 	movhi	r5,0
   12d24:	29400804 	addi	r5,r5,32
   12d28:	01800034 	movhi	r6,0
   12d2c:	31809104 	addi	r6,r6,580
   12d30:	0012c880 	call	12c88 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   12d34:	010000b4 	movhi	r4,2
   12d38:	213ed304 	addi	r4,r4,-1204
   12d3c:	014000b4 	movhi	r5,2
   12d40:	297ed304 	addi	r5,r5,-1204
   12d44:	018000b4 	movhi	r6,2
   12d48:	3181fd04 	addi	r6,r6,2036
   12d4c:	0012c880 	call	12c88 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   12d50:	001e7940 	call	1e794 <alt_dcache_flush_all>
  alt_icache_flush_all();
   12d54:	001e9ec0 	call	1e9ec <alt_icache_flush_all>
}
   12d58:	e037883a 	mov	sp,fp
   12d5c:	dfc00117 	ldw	ra,4(sp)
   12d60:	df000017 	ldw	fp,0(sp)
   12d64:	dec00204 	addi	sp,sp,8
   12d68:	f800283a 	ret

00012d6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12d6c:	defffe04 	addi	sp,sp,-8
   12d70:	dfc00115 	stw	ra,4(sp)
   12d74:	df000015 	stw	fp,0(sp)
   12d78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12d7c:	008000b4 	movhi	r2,2
   12d80:	1089a404 	addi	r2,r2,9872
   12d84:	10800017 	ldw	r2,0(r2)
   12d88:	10000526 	beq	r2,zero,12da0 <alt_get_errno+0x34>
   12d8c:	008000b4 	movhi	r2,2
   12d90:	1089a404 	addi	r2,r2,9872
   12d94:	10800017 	ldw	r2,0(r2)
   12d98:	103ee83a 	callr	r2
   12d9c:	00000206 	br	12da8 <alt_get_errno+0x3c>
   12da0:	008000b4 	movhi	r2,2
   12da4:	1091b604 	addi	r2,r2,18136
}
   12da8:	e037883a 	mov	sp,fp
   12dac:	dfc00117 	ldw	ra,4(sp)
   12db0:	df000017 	ldw	fp,0(sp)
   12db4:	dec00204 	addi	sp,sp,8
   12db8:	f800283a 	ret

00012dbc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   12dbc:	defff904 	addi	sp,sp,-28
   12dc0:	dfc00615 	stw	ra,24(sp)
   12dc4:	df000515 	stw	fp,20(sp)
   12dc8:	df000504 	addi	fp,sp,20
   12dcc:	e13ffd15 	stw	r4,-12(fp)
   12dd0:	e17ffe15 	stw	r5,-8(fp)
   12dd4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   12dd8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12ddc:	e0bffd17 	ldw	r2,-12(fp)
   12de0:	10000616 	blt	r2,zero,12dfc <lseek+0x40>
   12de4:	e0bffd17 	ldw	r2,-12(fp)
   12de8:	10c00324 	muli	r3,r2,12
   12dec:	008000b4 	movhi	r2,2
   12df0:	10843004 	addi	r2,r2,4288
   12df4:	1885883a 	add	r2,r3,r2
   12df8:	00000106 	br	12e00 <lseek+0x44>
   12dfc:	0005883a 	mov	r2,zero
   12e00:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   12e04:	e0bffc17 	ldw	r2,-16(fp)
   12e08:	10001026 	beq	r2,zero,12e4c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   12e0c:	e0bffc17 	ldw	r2,-16(fp)
   12e10:	10800017 	ldw	r2,0(r2)
   12e14:	10800717 	ldw	r2,28(r2)
   12e18:	10000926 	beq	r2,zero,12e40 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   12e1c:	e0bffc17 	ldw	r2,-16(fp)
   12e20:	10800017 	ldw	r2,0(r2)
   12e24:	10800717 	ldw	r2,28(r2)
   12e28:	e13ffc17 	ldw	r4,-16(fp)
   12e2c:	e17ffe17 	ldw	r5,-8(fp)
   12e30:	e1bfff17 	ldw	r6,-4(fp)
   12e34:	103ee83a 	callr	r2
   12e38:	e0bffb15 	stw	r2,-20(fp)
   12e3c:	00000506 	br	12e54 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   12e40:	00bfde84 	movi	r2,-134
   12e44:	e0bffb15 	stw	r2,-20(fp)
   12e48:	00000206 	br	12e54 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   12e4c:	00bfebc4 	movi	r2,-81
   12e50:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   12e54:	e0bffb17 	ldw	r2,-20(fp)
   12e58:	1000070e 	bge	r2,zero,12e78 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   12e5c:	0012d6c0 	call	12d6c <alt_get_errno>
   12e60:	1007883a 	mov	r3,r2
   12e64:	e0bffb17 	ldw	r2,-20(fp)
   12e68:	0085c83a 	sub	r2,zero,r2
   12e6c:	18800015 	stw	r2,0(r3)
    rc = -1;
   12e70:	00bfffc4 	movi	r2,-1
   12e74:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   12e78:	e0bffb17 	ldw	r2,-20(fp)
}
   12e7c:	e037883a 	mov	sp,fp
   12e80:	dfc00117 	ldw	ra,4(sp)
   12e84:	df000017 	ldw	fp,0(sp)
   12e88:	dec00204 	addi	sp,sp,8
   12e8c:	f800283a 	ret

00012e90 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12e90:	defff904 	addi	sp,sp,-28
   12e94:	dfc00615 	stw	ra,24(sp)
   12e98:	df000515 	stw	fp,20(sp)
   12e9c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   12ea0:	0009883a 	mov	r4,zero
   12ea4:	001be640 	call	1be64 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   12ea8:	0013e800 	call	13e80 <OSInit>
   12eac:	01000044 	movi	r4,1
   12eb0:	00195780 	call	19578 <OSSemCreate>
   12eb4:	1007883a 	mov	r3,r2
   12eb8:	008000b4 	movhi	r2,2
   12ebc:	1091bc04 	addi	r2,r2,18160
   12ec0:	10c00015 	stw	r3,0(r2)
   12ec4:	01000044 	movi	r4,1
   12ec8:	00195780 	call	19578 <OSSemCreate>
   12ecc:	1007883a 	mov	r3,r2
   12ed0:	008000b4 	movhi	r2,2
   12ed4:	1091be04 	addi	r2,r2,18168
   12ed8:	10c00015 	stw	r3,0(r2)
   12edc:	008000b4 	movhi	r2,2
   12ee0:	1091b704 	addi	r2,r2,18140
   12ee4:	e0bffc15 	stw	r2,-16(fp)
   12ee8:	00800044 	movi	r2,1
   12eec:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   12ef0:	e0bffd0b 	ldhu	r2,-12(fp)
   12ef4:	1009883a 	mov	r4,r2
   12ef8:	00195780 	call	19578 <OSSemCreate>
   12efc:	1007883a 	mov	r3,r2
   12f00:	e0bffc17 	ldw	r2,-16(fp)
   12f04:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   12f08:	001be980 	call	1be98 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   12f0c:	010000b4 	movhi	r4,2
   12f10:	21014504 	addi	r4,r4,1300
   12f14:	014000b4 	movhi	r5,2
   12f18:	29414504 	addi	r5,r5,1300
   12f1c:	018000b4 	movhi	r6,2
   12f20:	31814504 	addi	r6,r6,1300
   12f24:	001eadc0 	call	1eadc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   12f28:	001e8a40 	call	1e8a4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   12f2c:	010000b4 	movhi	r4,2
   12f30:	213a4004 	addi	r4,r4,-5888
   12f34:	001f7a00 	call	1f7a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   12f38:	d1282c17 	ldw	r4,-24400(gp)
   12f3c:	d0e82d17 	ldw	r3,-24396(gp)
   12f40:	d0a82e17 	ldw	r2,-24392(gp)
   12f44:	180b883a 	mov	r5,r3
   12f48:	100d883a 	mov	r6,r2
   12f4c:	000276c0 	call	276c <main>
   12f50:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   12f54:	01000044 	movi	r4,1
   12f58:	00129980 	call	12998 <close>
  exit (result);
   12f5c:	e13ffb17 	ldw	r4,-20(fp)
   12f60:	001f7b40 	call	1f7b4 <exit>

00012f64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12f64:	defffe04 	addi	sp,sp,-8
   12f68:	dfc00115 	stw	ra,4(sp)
   12f6c:	df000015 	stw	fp,0(sp)
   12f70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12f74:	008000b4 	movhi	r2,2
   12f78:	1089a404 	addi	r2,r2,9872
   12f7c:	10800017 	ldw	r2,0(r2)
   12f80:	10000526 	beq	r2,zero,12f98 <alt_get_errno+0x34>
   12f84:	008000b4 	movhi	r2,2
   12f88:	1089a404 	addi	r2,r2,9872
   12f8c:	10800017 	ldw	r2,0(r2)
   12f90:	103ee83a 	callr	r2
   12f94:	00000206 	br	12fa0 <alt_get_errno+0x3c>
   12f98:	008000b4 	movhi	r2,2
   12f9c:	1091b604 	addi	r2,r2,18136
}
   12fa0:	e037883a 	mov	sp,fp
   12fa4:	dfc00117 	ldw	ra,4(sp)
   12fa8:	df000017 	ldw	fp,0(sp)
   12fac:	dec00204 	addi	sp,sp,8
   12fb0:	f800283a 	ret

00012fb4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   12fb4:	defff904 	addi	sp,sp,-28
   12fb8:	dfc00615 	stw	ra,24(sp)
   12fbc:	df000515 	stw	fp,20(sp)
   12fc0:	df000504 	addi	fp,sp,20
   12fc4:	e13ffd15 	stw	r4,-12(fp)
   12fc8:	e17ffe15 	stw	r5,-8(fp)
   12fcc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12fd0:	e0bffd17 	ldw	r2,-12(fp)
   12fd4:	10000616 	blt	r2,zero,12ff0 <read+0x3c>
   12fd8:	e0bffd17 	ldw	r2,-12(fp)
   12fdc:	10c00324 	muli	r3,r2,12
   12fe0:	008000b4 	movhi	r2,2
   12fe4:	10843004 	addi	r2,r2,4288
   12fe8:	1885883a 	add	r2,r3,r2
   12fec:	00000106 	br	12ff4 <read+0x40>
   12ff0:	0005883a 	mov	r2,zero
   12ff4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12ff8:	e0bffb17 	ldw	r2,-20(fp)
   12ffc:	10002226 	beq	r2,zero,13088 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13000:	e0bffb17 	ldw	r2,-20(fp)
   13004:	10800217 	ldw	r2,8(r2)
   13008:	108000cc 	andi	r2,r2,3
   1300c:	10800060 	cmpeqi	r2,r2,1
   13010:	1000181e 	bne	r2,zero,13074 <read+0xc0>
        (fd->dev->read))
   13014:	e0bffb17 	ldw	r2,-20(fp)
   13018:	10800017 	ldw	r2,0(r2)
   1301c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13020:	10001426 	beq	r2,zero,13074 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13024:	e0bffb17 	ldw	r2,-20(fp)
   13028:	10800017 	ldw	r2,0(r2)
   1302c:	10800517 	ldw	r2,20(r2)
   13030:	e0ffff17 	ldw	r3,-4(fp)
   13034:	e13ffb17 	ldw	r4,-20(fp)
   13038:	e17ffe17 	ldw	r5,-8(fp)
   1303c:	180d883a 	mov	r6,r3
   13040:	103ee83a 	callr	r2
   13044:	e0bffc15 	stw	r2,-16(fp)
   13048:	e0bffc17 	ldw	r2,-16(fp)
   1304c:	1000070e 	bge	r2,zero,1306c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   13050:	0012f640 	call	12f64 <alt_get_errno>
   13054:	1007883a 	mov	r3,r2
   13058:	e0bffc17 	ldw	r2,-16(fp)
   1305c:	0085c83a 	sub	r2,zero,r2
   13060:	18800015 	stw	r2,0(r3)
          return -1;
   13064:	00bfffc4 	movi	r2,-1
   13068:	00000c06 	br	1309c <read+0xe8>
        }
        return rval;
   1306c:	e0bffc17 	ldw	r2,-16(fp)
   13070:	00000a06 	br	1309c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13074:	0012f640 	call	12f64 <alt_get_errno>
   13078:	1007883a 	mov	r3,r2
   1307c:	00800344 	movi	r2,13
   13080:	18800015 	stw	r2,0(r3)
   13084:	00000406 	br	13098 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   13088:	0012f640 	call	12f64 <alt_get_errno>
   1308c:	1007883a 	mov	r3,r2
   13090:	00801444 	movi	r2,81
   13094:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13098:	00bfffc4 	movi	r2,-1
}
   1309c:	e037883a 	mov	sp,fp
   130a0:	dfc00117 	ldw	ra,4(sp)
   130a4:	df000017 	ldw	fp,0(sp)
   130a8:	dec00204 	addi	sp,sp,8
   130ac:	f800283a 	ret

000130b0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   130b0:	defffe04 	addi	sp,sp,-8
   130b4:	df000115 	stw	fp,4(sp)
   130b8:	df000104 	addi	fp,sp,4
   130bc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   130c0:	e0bfff17 	ldw	r2,-4(fp)
   130c4:	108000d0 	cmplti	r2,r2,3
   130c8:	10000d1e 	bne	r2,zero,13100 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   130cc:	008000b4 	movhi	r2,2
   130d0:	10843004 	addi	r2,r2,4288
   130d4:	e0ffff17 	ldw	r3,-4(fp)
   130d8:	18c00324 	muli	r3,r3,12
   130dc:	18c00204 	addi	r3,r3,8
   130e0:	10c5883a 	add	r2,r2,r3
   130e4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   130e8:	008000b4 	movhi	r2,2
   130ec:	10843004 	addi	r2,r2,4288
   130f0:	e0ffff17 	ldw	r3,-4(fp)
   130f4:	18c00324 	muli	r3,r3,12
   130f8:	10c5883a 	add	r2,r2,r3
   130fc:	10000015 	stw	zero,0(r2)
  }
}
   13100:	e037883a 	mov	sp,fp
   13104:	df000017 	ldw	fp,0(sp)
   13108:	dec00104 	addi	sp,sp,4
   1310c:	f800283a 	ret

00013110 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13110:	defff904 	addi	sp,sp,-28
   13114:	df000615 	stw	fp,24(sp)
   13118:	df000604 	addi	fp,sp,24
   1311c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13120:	0005303a 	rdctl	r2,status
   13124:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13128:	e0fffc17 	ldw	r3,-16(fp)
   1312c:	00bfff84 	movi	r2,-2
   13130:	1884703a 	and	r2,r3,r2
   13134:	1001703a 	wrctl	status,r2
  
  return context;
   13138:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1313c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13140:	d0a01917 	ldw	r2,-32668(gp)
   13144:	10c000c4 	addi	r3,r2,3
   13148:	00bfff04 	movi	r2,-4
   1314c:	1884703a 	and	r2,r3,r2
   13150:	d0a01915 	stw	r2,-32668(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13154:	d0e01917 	ldw	r3,-32668(gp)
   13158:	e0bfff17 	ldw	r2,-4(fp)
   1315c:	1887883a 	add	r3,r3,r2
   13160:	00810034 	movhi	r2,1024
   13164:	10800004 	addi	r2,r2,0
   13168:	10c0062e 	bgeu	r2,r3,13184 <sbrk+0x74>
   1316c:	e0bffa17 	ldw	r2,-24(fp)
   13170:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13174:	e0bffd17 	ldw	r2,-12(fp)
   13178:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1317c:	00bfffc4 	movi	r2,-1
   13180:	00000b06 	br	131b0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   13184:	d0a01917 	ldw	r2,-32668(gp)
   13188:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   1318c:	d0e01917 	ldw	r3,-32668(gp)
   13190:	e0bfff17 	ldw	r2,-4(fp)
   13194:	1885883a 	add	r2,r3,r2
   13198:	d0a01915 	stw	r2,-32668(gp)
   1319c:	e0bffa17 	ldw	r2,-24(fp)
   131a0:	e0bffe15 	stw	r2,-8(fp)
   131a4:	e0bffe17 	ldw	r2,-8(fp)
   131a8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   131ac:	e0bffb17 	ldw	r2,-20(fp)
} 
   131b0:	e037883a 	mov	sp,fp
   131b4:	df000017 	ldw	fp,0(sp)
   131b8:	dec00104 	addi	sp,sp,4
   131bc:	f800283a 	ret

000131c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   131c0:	defffe04 	addi	sp,sp,-8
   131c4:	dfc00115 	stw	ra,4(sp)
   131c8:	df000015 	stw	fp,0(sp)
   131cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   131d0:	008000b4 	movhi	r2,2
   131d4:	1089a404 	addi	r2,r2,9872
   131d8:	10800017 	ldw	r2,0(r2)
   131dc:	10000526 	beq	r2,zero,131f4 <alt_get_errno+0x34>
   131e0:	008000b4 	movhi	r2,2
   131e4:	1089a404 	addi	r2,r2,9872
   131e8:	10800017 	ldw	r2,0(r2)
   131ec:	103ee83a 	callr	r2
   131f0:	00000206 	br	131fc <alt_get_errno+0x3c>
   131f4:	008000b4 	movhi	r2,2
   131f8:	1091b604 	addi	r2,r2,18136
}
   131fc:	e037883a 	mov	sp,fp
   13200:	dfc00117 	ldw	ra,4(sp)
   13204:	df000017 	ldw	fp,0(sp)
   13208:	dec00204 	addi	sp,sp,8
   1320c:	f800283a 	ret

00013210 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13210:	defff904 	addi	sp,sp,-28
   13214:	dfc00615 	stw	ra,24(sp)
   13218:	df000515 	stw	fp,20(sp)
   1321c:	df000504 	addi	fp,sp,20
   13220:	e13ffd15 	stw	r4,-12(fp)
   13224:	e17ffe15 	stw	r5,-8(fp)
   13228:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1322c:	e0bffd17 	ldw	r2,-12(fp)
   13230:	10000616 	blt	r2,zero,1324c <write+0x3c>
   13234:	e0bffd17 	ldw	r2,-12(fp)
   13238:	10c00324 	muli	r3,r2,12
   1323c:	008000b4 	movhi	r2,2
   13240:	10843004 	addi	r2,r2,4288
   13244:	1885883a 	add	r2,r3,r2
   13248:	00000106 	br	13250 <write+0x40>
   1324c:	0005883a 	mov	r2,zero
   13250:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13254:	e0bffb17 	ldw	r2,-20(fp)
   13258:	10002126 	beq	r2,zero,132e0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1325c:	e0bffb17 	ldw	r2,-20(fp)
   13260:	10800217 	ldw	r2,8(r2)
   13264:	108000cc 	andi	r2,r2,3
   13268:	10001826 	beq	r2,zero,132cc <write+0xbc>
   1326c:	e0bffb17 	ldw	r2,-20(fp)
   13270:	10800017 	ldw	r2,0(r2)
   13274:	10800617 	ldw	r2,24(r2)
   13278:	10001426 	beq	r2,zero,132cc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1327c:	e0bffb17 	ldw	r2,-20(fp)
   13280:	10800017 	ldw	r2,0(r2)
   13284:	10800617 	ldw	r2,24(r2)
   13288:	e0ffff17 	ldw	r3,-4(fp)
   1328c:	e13ffb17 	ldw	r4,-20(fp)
   13290:	e17ffe17 	ldw	r5,-8(fp)
   13294:	180d883a 	mov	r6,r3
   13298:	103ee83a 	callr	r2
   1329c:	e0bffc15 	stw	r2,-16(fp)
   132a0:	e0bffc17 	ldw	r2,-16(fp)
   132a4:	1000070e 	bge	r2,zero,132c4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   132a8:	00131c00 	call	131c0 <alt_get_errno>
   132ac:	1007883a 	mov	r3,r2
   132b0:	e0bffc17 	ldw	r2,-16(fp)
   132b4:	0085c83a 	sub	r2,zero,r2
   132b8:	18800015 	stw	r2,0(r3)
        return -1;
   132bc:	00bfffc4 	movi	r2,-1
   132c0:	00000c06 	br	132f4 <write+0xe4>
      }
      return rval;
   132c4:	e0bffc17 	ldw	r2,-16(fp)
   132c8:	00000a06 	br	132f4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   132cc:	00131c00 	call	131c0 <alt_get_errno>
   132d0:	1007883a 	mov	r3,r2
   132d4:	00800344 	movi	r2,13
   132d8:	18800015 	stw	r2,0(r3)
   132dc:	00000406 	br	132f0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   132e0:	00131c00 	call	131c0 <alt_get_errno>
   132e4:	1007883a 	mov	r3,r2
   132e8:	00801444 	movi	r2,81
   132ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
   132f0:	00bfffc4 	movi	r2,-1
}
   132f4:	e037883a 	mov	sp,fp
   132f8:	dfc00117 	ldw	ra,4(sp)
   132fc:	df000017 	ldw	fp,0(sp)
   13300:	dec00204 	addi	sp,sp,8
   13304:	f800283a 	ret

00013308 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   13308:	deffdf04 	addi	sp,sp,-132
   1330c:	dfc02015 	stw	ra,128(sp)
   13310:	df001f15 	stw	fp,124(sp)
   13314:	df001f04 	addi	fp,sp,124
   13318:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   1331c:	e0bfe204 	addi	r2,fp,-120
   13320:	01003fc4 	movi	r4,255
   13324:	100b883a 	mov	r5,r2
   13328:	001b72c0 	call	1b72c <OSTaskQuery>
   1332c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   13330:	e0bffe83 	ldbu	r2,-6(fp)
   13334:	10803fcc 	andi	r2,r2,255
   13338:	10000126 	beq	r2,zero,13340 <__env_lock+0x38>
    return;
   1333c:	00001d06 	br	133b4 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
   13340:	e0bfee83 	ldbu	r2,-70(fp)
   13344:	10803fcc 	andi	r2,r2,255
   13348:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   1334c:	d0e83017 	ldw	r3,-24384(gp)
   13350:	e0bffd04 	addi	r2,fp,-12
   13354:	1809883a 	mov	r4,r3
   13358:	100b883a 	mov	r5,r2
   1335c:	0019dc40 	call	19dc4 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   13360:	e0bffe43 	ldbu	r2,-7(fp)
   13364:	10803fcc 	andi	r2,r2,255
   13368:	10000726 	beq	r2,zero,13388 <__env_lock+0x80>
   1336c:	d0a01a17 	ldw	r2,-32664(gp)
   13370:	e0ffe117 	ldw	r3,-124(fp)
   13374:	1880041e 	bne	r3,r2,13388 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
   13378:	d0a82f17 	ldw	r2,-24388(gp)
   1337c:	10800044 	addi	r2,r2,1
   13380:	d0a82f15 	stw	r2,-24388(gp)
   13384:	00000a06 	br	133b0 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   13388:	d0e83017 	ldw	r3,-24384(gp)
   1338c:	e0bffe84 	addi	r2,fp,-6
   13390:	1809883a 	mov	r4,r3
   13394:	000b883a 	mov	r5,zero
   13398:	100d883a 	mov	r6,r2
   1339c:	00198e00 	call	198e0 <OSSemPend>
    locks  = 1;
   133a0:	00800044 	movi	r2,1
   133a4:	d0a82f15 	stw	r2,-24388(gp)
    lockid = id;
   133a8:	e0bfe117 	ldw	r2,-124(fp)
   133ac:	d0a01a15 	stw	r2,-32664(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   133b0:	0001883a 	nop
}
   133b4:	e037883a 	mov	sp,fp
   133b8:	dfc00117 	ldw	ra,4(sp)
   133bc:	df000017 	ldw	fp,0(sp)
   133c0:	dec00204 	addi	sp,sp,8
   133c4:	f800283a 	ret

000133c8 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   133c8:	defffd04 	addi	sp,sp,-12
   133cc:	dfc00215 	stw	ra,8(sp)
   133d0:	df000115 	stw	fp,4(sp)
   133d4:	df000104 	addi	fp,sp,4
   133d8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   133dc:	d0a82f17 	ldw	r2,-24388(gp)
   133e0:	1000011e 	bne	r2,zero,133e8 <__env_unlock+0x20>
    return;
   133e4:	00000a06 	br	13410 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   133e8:	d0a82f17 	ldw	r2,-24388(gp)
   133ec:	10bfffc4 	addi	r2,r2,-1
   133f0:	d0a82f15 	stw	r2,-24388(gp)
   133f4:	d0a82f17 	ldw	r2,-24388(gp)
   133f8:	1000051e 	bne	r2,zero,13410 <__env_unlock+0x48>
  {
    lockid = -1;
   133fc:	00bfffc4 	movi	r2,-1
   13400:	d0a01a15 	stw	r2,-32664(gp)
    OSSemPost( alt_envsem );
   13404:	d0a83017 	ldw	r2,-24384(gp)
   13408:	1009883a 	mov	r4,r2
   1340c:	0019cb40 	call	19cb4 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   13410:	e037883a 	mov	sp,fp
   13414:	dfc00117 	ldw	ra,4(sp)
   13418:	df000017 	ldw	fp,0(sp)
   1341c:	dec00204 	addi	sp,sp,8
   13420:	f800283a 	ret

00013424 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   13424:	deffdb04 	addi	sp,sp,-148
   13428:	dfc02415 	stw	ra,144(sp)
   1342c:	df002315 	stw	fp,140(sp)
   13430:	df002304 	addi	fp,sp,140
   13434:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13438:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   1343c:	008000b4 	movhi	r2,2
   13440:	1091bf44 	addi	r2,r2,18173
   13444:	10800003 	ldbu	r2,0(r2)
   13448:	10803fcc 	andi	r2,r2,255
   1344c:	10800060 	cmpeqi	r2,r2,1
   13450:	1000011e 	bne	r2,zero,13458 <__malloc_lock+0x34>
      return;
   13454:	00003606 	br	13530 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   13458:	e0bfe204 	addi	r2,fp,-120
   1345c:	01003fc4 	movi	r4,255
   13460:	100b883a 	mov	r5,r2
   13464:	001b72c0 	call	1b72c <OSTaskQuery>
   13468:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   1346c:	e0bffe83 	ldbu	r2,-6(fp)
   13470:	10803fcc 	andi	r2,r2,255
   13474:	10000126 	beq	r2,zero,1347c <__malloc_lock+0x58>
    return;
   13478:	00002d06 	br	13530 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
   1347c:	e0bfee83 	ldbu	r2,-70(fp)
   13480:	10803fcc 	andi	r2,r2,255
   13484:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   13488:	d0e83217 	ldw	r3,-24376(gp)
   1348c:	e0bffd04 	addi	r2,fp,-12
   13490:	1809883a 	mov	r4,r3
   13494:	100b883a 	mov	r5,r2
   13498:	0019dc40 	call	19dc4 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1349c:	0005303a 	rdctl	r2,status
   134a0:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   134a4:	e0ffdf17 	ldw	r3,-132(fp)
   134a8:	00bfff84 	movi	r2,-2
   134ac:	1884703a 	and	r2,r3,r2
   134b0:	1001703a 	wrctl	status,r2
  
  return context;
   134b4:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   134b8:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   134bc:	e0bffd0b 	ldhu	r2,-12(fp)
   134c0:	10bfffcc 	andi	r2,r2,65535
   134c4:	10000b1e 	bne	r2,zero,134f4 <__malloc_lock+0xd0>
   134c8:	d0a01b17 	ldw	r2,-32660(gp)
   134cc:	e0ffde17 	ldw	r3,-136(fp)
   134d0:	1880081e 	bne	r3,r2,134f4 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
   134d4:	d0a83117 	ldw	r2,-24380(gp)
   134d8:	10800044 	addi	r2,r2,1
   134dc:	d0a83115 	stw	r2,-24380(gp)
   134e0:	e0bfdd17 	ldw	r2,-140(fp)
   134e4:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   134e8:	e0bfe017 	ldw	r2,-128(fp)
   134ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   134f0:	00000e06 	br	1352c <__malloc_lock+0x108>
   134f4:	e0bfdd17 	ldw	r2,-140(fp)
   134f8:	e0bfe115 	stw	r2,-124(fp)
   134fc:	e0bfe117 	ldw	r2,-124(fp)
   13500:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   13504:	d0e83217 	ldw	r3,-24376(gp)
   13508:	e0bffe84 	addi	r2,fp,-6
   1350c:	1809883a 	mov	r4,r3
   13510:	000b883a 	mov	r5,zero
   13514:	100d883a 	mov	r6,r2
   13518:	00198e00 	call	198e0 <OSSemPend>
    locks  = 1;
   1351c:	00800044 	movi	r2,1
   13520:	d0a83115 	stw	r2,-24380(gp)
    lockid = id;
   13524:	e0bfde17 	ldw	r2,-136(fp)
   13528:	d0a01b15 	stw	r2,-32660(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   1352c:	0001883a 	nop
}
   13530:	e037883a 	mov	sp,fp
   13534:	dfc00117 	ldw	ra,4(sp)
   13538:	df000017 	ldw	fp,0(sp)
   1353c:	dec00204 	addi	sp,sp,8
   13540:	f800283a 	ret

00013544 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13544:	defff804 	addi	sp,sp,-32
   13548:	dfc00715 	stw	ra,28(sp)
   1354c:	df000615 	stw	fp,24(sp)
   13550:	df000604 	addi	fp,sp,24
   13554:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13558:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   1355c:	008000b4 	movhi	r2,2
   13560:	1091bf44 	addi	r2,r2,18173
   13564:	10800003 	ldbu	r2,0(r2)
   13568:	10803fcc 	andi	r2,r2,255
   1356c:	10800060 	cmpeqi	r2,r2,1
   13570:	1000011e 	bne	r2,zero,13578 <__malloc_unlock+0x34>
      return;
   13574:	00002206 	br	13600 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13578:	0005303a 	rdctl	r2,status
   1357c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13580:	e0fffb17 	ldw	r3,-20(fp)
   13584:	00bfff84 	movi	r2,-2
   13588:	1884703a 	and	r2,r3,r2
   1358c:	1001703a 	wrctl	status,r2
  
  return context;
   13590:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
   13594:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   13598:	d0a83117 	ldw	r2,-24380(gp)
   1359c:	1000051e 	bne	r2,zero,135b4 <__malloc_unlock+0x70>
   135a0:	e0bffa17 	ldw	r2,-24(fp)
   135a4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   135a8:	e0bffc17 	ldw	r2,-16(fp)
   135ac:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   135b0:	00001306 	br	13600 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   135b4:	d0a83117 	ldw	r2,-24380(gp)
   135b8:	10bfffc4 	addi	r2,r2,-1
   135bc:	d0a83115 	stw	r2,-24380(gp)
   135c0:	d0a83117 	ldw	r2,-24380(gp)
   135c4:	10000a1e 	bne	r2,zero,135f0 <__malloc_unlock+0xac>
  {
    lockid = -1;
   135c8:	00bfffc4 	movi	r2,-1
   135cc:	d0a01b15 	stw	r2,-32660(gp)
   135d0:	e0bffa17 	ldw	r2,-24(fp)
   135d4:	e0bffd15 	stw	r2,-12(fp)
   135d8:	e0bffd17 	ldw	r2,-12(fp)
   135dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   135e0:	d0a83217 	ldw	r2,-24376(gp)
   135e4:	1009883a 	mov	r4,r2
   135e8:	0019cb40 	call	19cb4 <OSSemPost>
   135ec:	00000406 	br	13600 <__malloc_unlock+0xbc>
   135f0:	e0bffa17 	ldw	r2,-24(fp)
   135f4:	e0bffe15 	stw	r2,-8(fp)
   135f8:	e0bffe17 	ldw	r2,-8(fp)
   135fc:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   13600:	e037883a 	mov	sp,fp
   13604:	dfc00117 	ldw	ra,4(sp)
   13608:	df000017 	ldw	fp,0(sp)
   1360c:	dec00204 	addi	sp,sp,8
   13610:	f800283a 	ret

00013614 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   13614:	defff704 	addi	sp,sp,-36
   13618:	dfc00815 	stw	ra,32(sp)
   1361c:	df000715 	stw	fp,28(sp)
   13620:	df000704 	addi	fp,sp,28
   13624:	e13ffd15 	stw	r4,-12(fp)
   13628:	e17ffe15 	stw	r5,-8(fp)
   1362c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13630:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13634:	e0bfff17 	ldw	r2,-4(fp)
   13638:	1000021e 	bne	r2,zero,13644 <OSEventNameGet+0x30>
        return (0);
   1363c:	0005883a 	mov	r2,zero
   13640:	00003706 	br	13720 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   13644:	e0bffd17 	ldw	r2,-12(fp)
   13648:	1000051e 	bne	r2,zero,13660 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   1364c:	e0bfff17 	ldw	r2,-4(fp)
   13650:	00c00104 	movi	r3,4
   13654:	10c00005 	stb	r3,0(r2)
        return (0);
   13658:	0005883a 	mov	r2,zero
   1365c:	00003006 	br	13720 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13660:	e0bffe17 	ldw	r2,-8(fp)
   13664:	1000051e 	bne	r2,zero,1367c <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   13668:	e0bfff17 	ldw	r2,-4(fp)
   1366c:	00c00304 	movi	r3,12
   13670:	10c00005 	stb	r3,0(r2)
        return (0);
   13674:	0005883a 	mov	r2,zero
   13678:	00002906 	br	13720 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1367c:	d0a84103 	ldbu	r2,-24316(gp)
   13680:	10803fcc 	andi	r2,r2,255
   13684:	10000526 	beq	r2,zero,1369c <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   13688:	e0bfff17 	ldw	r2,-4(fp)
   1368c:	00c00444 	movi	r3,17
   13690:	10c00005 	stb	r3,0(r2)
        return (0);
   13694:	0005883a 	mov	r2,zero
   13698:	00002106 	br	13720 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   1369c:	e0bffd17 	ldw	r2,-12(fp)
   136a0:	10800003 	ldbu	r2,0(r2)
   136a4:	10803fcc 	andi	r2,r2,255
   136a8:	10bfffc4 	addi	r2,r2,-1
   136ac:	10800128 	cmpgeui	r2,r2,4
   136b0:	10000526 	beq	r2,zero,136c8 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   136b4:	e0bfff17 	ldw	r2,-4(fp)
   136b8:	00c00044 	movi	r3,1
   136bc:	10c00005 	stb	r3,0(r2)
             return (0);
   136c0:	0005883a 	mov	r2,zero
   136c4:	00001606 	br	13720 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   136c8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   136cc:	0005303a 	rdctl	r2,status
   136d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   136d4:	e0fffb17 	ldw	r3,-20(fp)
   136d8:	00bfff84 	movi	r2,-2
   136dc:	1884703a 	and	r2,r3,r2
   136e0:	1001703a 	wrctl	status,r2
  
  return context;
   136e4:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   136e8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   136ec:	e0bffd17 	ldw	r2,-12(fp)
   136f0:	10800384 	addi	r2,r2,14
   136f4:	e13ffe17 	ldw	r4,-8(fp)
   136f8:	100b883a 	mov	r5,r2
   136fc:	00150680 	call	15068 <OS_StrCopy>
   13700:	e0bffa05 	stb	r2,-24(fp)
   13704:	e0bff917 	ldw	r2,-28(fp)
   13708:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1370c:	e0bffc17 	ldw	r2,-16(fp)
   13710:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13714:	e0bfff17 	ldw	r2,-4(fp)
   13718:	10000005 	stb	zero,0(r2)
    return (len);
   1371c:	e0bffa03 	ldbu	r2,-24(fp)
}
   13720:	e037883a 	mov	sp,fp
   13724:	dfc00117 	ldw	ra,4(sp)
   13728:	df000017 	ldw	fp,0(sp)
   1372c:	dec00204 	addi	sp,sp,8
   13730:	f800283a 	ret

00013734 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   13734:	defff604 	addi	sp,sp,-40
   13738:	dfc00915 	stw	ra,36(sp)
   1373c:	df000815 	stw	fp,32(sp)
   13740:	df000804 	addi	fp,sp,32
   13744:	e13ffd15 	stw	r4,-12(fp)
   13748:	e17ffe15 	stw	r5,-8(fp)
   1374c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13750:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13754:	e0bfff17 	ldw	r2,-4(fp)
   13758:	1000011e 	bne	r2,zero,13760 <OSEventNameSet+0x2c>
        return;
   1375c:	00003f06 	br	1385c <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   13760:	e0bffd17 	ldw	r2,-12(fp)
   13764:	1000041e 	bne	r2,zero,13778 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   13768:	e0bfff17 	ldw	r2,-4(fp)
   1376c:	00c00104 	movi	r3,4
   13770:	10c00005 	stb	r3,0(r2)
        return;
   13774:	00003906 	br	1385c <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13778:	e0bffe17 	ldw	r2,-8(fp)
   1377c:	1000041e 	bne	r2,zero,13790 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   13780:	e0bfff17 	ldw	r2,-4(fp)
   13784:	00c00304 	movi	r3,12
   13788:	10c00005 	stb	r3,0(r2)
        return;
   1378c:	00003306 	br	1385c <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13790:	d0a84103 	ldbu	r2,-24316(gp)
   13794:	10803fcc 	andi	r2,r2,255
   13798:	10000426 	beq	r2,zero,137ac <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
   1379c:	e0bfff17 	ldw	r2,-4(fp)
   137a0:	00c00484 	movi	r3,18
   137a4:	10c00005 	stb	r3,0(r2)
        return;
   137a8:	00002c06 	br	1385c <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
   137ac:	e0bffd17 	ldw	r2,-12(fp)
   137b0:	10800003 	ldbu	r2,0(r2)
   137b4:	10803fcc 	andi	r2,r2,255
   137b8:	10bfffc4 	addi	r2,r2,-1
   137bc:	10800128 	cmpgeui	r2,r2,4
   137c0:	10000426 	beq	r2,zero,137d4 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   137c4:	e0bfff17 	ldw	r2,-4(fp)
   137c8:	00c00044 	movi	r3,1
   137cc:	10c00005 	stb	r3,0(r2)
             return;
   137d0:	00002206 	br	1385c <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   137d4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   137d8:	0005303a 	rdctl	r2,status
   137dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   137e0:	e0fffa17 	ldw	r3,-24(fp)
   137e4:	00bfff84 	movi	r2,-2
   137e8:	1884703a 	and	r2,r3,r2
   137ec:	1001703a 	wrctl	status,r2
  
  return context;
   137f0:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   137f4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   137f8:	e13ffe17 	ldw	r4,-8(fp)
   137fc:	00150dc0 	call	150dc <OS_StrLen>
   13800:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   13804:	e0bff903 	ldbu	r2,-28(fp)
   13808:	10800830 	cmpltui	r2,r2,32
   1380c:	1000081e 	bne	r2,zero,13830 <OSEventNameSet+0xfc>
   13810:	e0bff817 	ldw	r2,-32(fp)
   13814:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13818:	e0bffb17 	ldw	r2,-20(fp)
   1381c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   13820:	e0bfff17 	ldw	r2,-4(fp)
   13824:	00c002c4 	movi	r3,11
   13828:	10c00005 	stb	r3,0(r2)
        return;
   1382c:	00000b06 	br	1385c <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   13830:	e0bffd17 	ldw	r2,-12(fp)
   13834:	10800384 	addi	r2,r2,14
   13838:	1009883a 	mov	r4,r2
   1383c:	e17ffe17 	ldw	r5,-8(fp)
   13840:	00150680 	call	15068 <OS_StrCopy>
   13844:	e0bff817 	ldw	r2,-32(fp)
   13848:	e0bffc15 	stw	r2,-16(fp)
   1384c:	e0bffc17 	ldw	r2,-16(fp)
   13850:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13854:	e0bfff17 	ldw	r2,-4(fp)
   13858:	10000005 	stb	zero,0(r2)
}
   1385c:	e037883a 	mov	sp,fp
   13860:	dfc00117 	ldw	ra,4(sp)
   13864:	df000017 	ldw	fp,0(sp)
   13868:	dec00204 	addi	sp,sp,8
   1386c:	f800283a 	ret

00013870 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   13870:	deffed04 	addi	sp,sp,-76
   13874:	dfc01215 	stw	ra,72(sp)
   13878:	df001115 	stw	fp,68(sp)
   1387c:	df001104 	addi	fp,sp,68
   13880:	e13ffc15 	stw	r4,-16(fp)
   13884:	e17ffd15 	stw	r5,-12(fp)
   13888:	e1bffe15 	stw	r6,-8(fp)
   1388c:	3805883a 	mov	r2,r7
   13890:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   13894:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   13898:	e0800217 	ldw	r2,8(fp)
   1389c:	1000021e 	bne	r2,zero,138a8 <OSEventPendMulti+0x38>
        return (0);
   138a0:	0005883a 	mov	r2,zero
   138a4:	00017106 	br	13e6c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   138a8:	e0bffc17 	ldw	r2,-16(fp)
   138ac:	1000051e 	bne	r2,zero,138c4 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   138b0:	e0800217 	ldw	r2,8(fp)
   138b4:	00c00104 	movi	r3,4
   138b8:	10c00005 	stb	r3,0(r2)
        return (0);
   138bc:	0005883a 	mov	r2,zero
   138c0:	00016a06 	br	13e6c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   138c4:	e0bffd17 	ldw	r2,-12(fp)
   138c8:	1000051e 	bne	r2,zero,138e0 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   138cc:	e0800217 	ldw	r2,8(fp)
   138d0:	00c00104 	movi	r3,4
   138d4:	10c00005 	stb	r3,0(r2)
        return (0);
   138d8:	0005883a 	mov	r2,zero
   138dc:	00016306 	br	13e6c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   138e0:	e0bffe17 	ldw	r2,-8(fp)
   138e4:	1000051e 	bne	r2,zero,138fc <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   138e8:	e0800217 	ldw	r2,8(fp)
   138ec:	00c00104 	movi	r3,4
   138f0:	10c00005 	stb	r3,0(r2)
        return (0);
   138f4:	0005883a 	mov	r2,zero
   138f8:	00015c06 	br	13e6c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   138fc:	e0bffd17 	ldw	r2,-12(fp)
   13900:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   13904:	e0bffc17 	ldw	r2,-16(fp)
   13908:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   1390c:	e0bfef17 	ldw	r2,-68(fp)
   13910:	10800017 	ldw	r2,0(r2)
   13914:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   13918:	00001906 	br	13980 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   1391c:	e0bff017 	ldw	r2,-64(fp)
   13920:	10800003 	ldbu	r2,0(r2)
   13924:	10803fcc 	andi	r2,r2,255
   13928:	10c000a0 	cmpeqi	r3,r2,2
   1392c:	1800091e 	bne	r3,zero,13954 <OSEventPendMulti+0xe4>
   13930:	10c000e0 	cmpeqi	r3,r2,3
   13934:	1800091e 	bne	r3,zero,1395c <OSEventPendMulti+0xec>
   13938:	10800060 	cmpeqi	r2,r2,1
   1393c:	1000091e 	bne	r2,zero,13964 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   13940:	e0800217 	ldw	r2,8(fp)
   13944:	00c00044 	movi	r3,1
   13948:	10c00005 	stb	r3,0(r2)
                 return (0);
   1394c:	0005883a 	mov	r2,zero
   13950:	00014606 	br	13e6c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   13954:	0001883a 	nop
   13958:	00000306 	br	13968 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   1395c:	0001883a 	nop
   13960:	00000106 	br	13968 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   13964:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   13968:	e0bfef17 	ldw	r2,-68(fp)
   1396c:	10800104 	addi	r2,r2,4
   13970:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   13974:	e0bfef17 	ldw	r2,-68(fp)
   13978:	10800017 	ldw	r2,0(r2)
   1397c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   13980:	e0bff017 	ldw	r2,-64(fp)
   13984:	103fe51e 	bne	r2,zero,1391c <__alt_mem_Flash_flash_data+0xf401391c>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   13988:	d0a84103 	ldbu	r2,-24316(gp)
   1398c:	10803fcc 	andi	r2,r2,255
   13990:	10000526 	beq	r2,zero,139a8 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   13994:	e0800217 	ldw	r2,8(fp)
   13998:	00c00084 	movi	r3,2
   1399c:	10c00005 	stb	r3,0(r2)
        return (0);
   139a0:	0005883a 	mov	r2,zero
   139a4:	00013106 	br	13e6c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   139a8:	d0a83303 	ldbu	r2,-24372(gp)
   139ac:	10803fcc 	andi	r2,r2,255
   139b0:	10000526 	beq	r2,zero,139c8 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   139b4:	e0800217 	ldw	r2,8(fp)
   139b8:	00c00344 	movi	r3,13
   139bc:	10c00005 	stb	r3,0(r2)
        return (0);
   139c0:	0005883a 	mov	r2,zero
   139c4:	00012906 	br	13e6c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   139c8:	0005303a 	rdctl	r2,status
   139cc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   139d0:	e0fff517 	ldw	r3,-44(fp)
   139d4:	00bfff84 	movi	r2,-2
   139d8:	1884703a 	and	r2,r3,r2
   139dc:	1001703a 	wrctl	status,r2
  
  return context;
   139e0:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   139e4:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   139e8:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   139ec:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   139f0:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   139f4:	e0bffc17 	ldw	r2,-16(fp)
   139f8:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   139fc:	e0bfef17 	ldw	r2,-68(fp)
   13a00:	10800017 	ldw	r2,0(r2)
   13a04:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   13a08:	00008106 	br	13c10 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   13a0c:	e0bff017 	ldw	r2,-64(fp)
   13a10:	10800003 	ldbu	r2,0(r2)
   13a14:	10803fcc 	andi	r2,r2,255
   13a18:	10c000a0 	cmpeqi	r3,r2,2
   13a1c:	18003c1e 	bne	r3,zero,13b10 <OSEventPendMulti+0x2a0>
   13a20:	10c000e0 	cmpeqi	r3,r2,3
   13a24:	1800031e 	bne	r3,zero,13a34 <OSEventPendMulti+0x1c4>
   13a28:	10800060 	cmpeqi	r2,r2,1
   13a2c:	10001e1e 	bne	r2,zero,13aa8 <OSEventPendMulti+0x238>
   13a30:	00006606 	br	13bcc <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   13a34:	e0bff017 	ldw	r2,-64(fp)
   13a38:	1080020b 	ldhu	r2,8(r2)
   13a3c:	10bfffcc 	andi	r2,r2,65535
   13a40:	10001526 	beq	r2,zero,13a98 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   13a44:	e0bff017 	ldw	r2,-64(fp)
   13a48:	1080020b 	ldhu	r2,8(r2)
   13a4c:	10bfffc4 	addi	r2,r2,-1
   13a50:	1007883a 	mov	r3,r2
   13a54:	e0bff017 	ldw	r2,-64(fp)
   13a58:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   13a5c:	e0bffd17 	ldw	r2,-12(fp)
   13a60:	10c00104 	addi	r3,r2,4
   13a64:	e0fffd15 	stw	r3,-12(fp)
   13a68:	e0fff017 	ldw	r3,-64(fp)
   13a6c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   13a70:	00800044 	movi	r2,1
   13a74:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   13a78:	e0bffe17 	ldw	r2,-8(fp)
   13a7c:	10c00104 	addi	r3,r2,4
   13a80:	e0fffe15 	stw	r3,-8(fp)
   13a84:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   13a88:	e0bff18b 	ldhu	r2,-58(fp)
   13a8c:	10800044 	addi	r2,r2,1
   13a90:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   13a94:	00005806 	br	13bf8 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   13a98:	e0bff203 	ldbu	r2,-56(fp)
   13a9c:	10800054 	ori	r2,r2,1
   13aa0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   13aa4:	00005406 	br	13bf8 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   13aa8:	e0bff017 	ldw	r2,-64(fp)
   13aac:	10800117 	ldw	r2,4(r2)
   13ab0:	10001326 	beq	r2,zero,13b00 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   13ab4:	e0bffe17 	ldw	r2,-8(fp)
   13ab8:	10c00104 	addi	r3,r2,4
   13abc:	e0fffe15 	stw	r3,-8(fp)
   13ac0:	e0fff017 	ldw	r3,-64(fp)
   13ac4:	18c00117 	ldw	r3,4(r3)
   13ac8:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   13acc:	e0bff017 	ldw	r2,-64(fp)
   13ad0:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   13ad4:	e0bffd17 	ldw	r2,-12(fp)
   13ad8:	10c00104 	addi	r3,r2,4
   13adc:	e0fffd15 	stw	r3,-12(fp)
   13ae0:	e0fff017 	ldw	r3,-64(fp)
   13ae4:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   13ae8:	00800044 	movi	r2,1
   13aec:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   13af0:	e0bff18b 	ldhu	r2,-58(fp)
   13af4:	10800044 	addi	r2,r2,1
   13af8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   13afc:	00003e06 	br	13bf8 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   13b00:	e0bff203 	ldbu	r2,-56(fp)
   13b04:	10800094 	ori	r2,r2,2
   13b08:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   13b0c:	00003a06 	br	13bf8 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   13b10:	e0bff017 	ldw	r2,-64(fp)
   13b14:	10800117 	ldw	r2,4(r2)
   13b18:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   13b1c:	e0bff417 	ldw	r2,-48(fp)
   13b20:	1080058b 	ldhu	r2,22(r2)
   13b24:	10bfffcc 	andi	r2,r2,65535
   13b28:	10002426 	beq	r2,zero,13bbc <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   13b2c:	e0bffe17 	ldw	r2,-8(fp)
   13b30:	10c00104 	addi	r3,r2,4
   13b34:	e0fffe15 	stw	r3,-8(fp)
   13b38:	e0fff417 	ldw	r3,-48(fp)
   13b3c:	18c00417 	ldw	r3,16(r3)
   13b40:	19400104 	addi	r5,r3,4
   13b44:	e13ff417 	ldw	r4,-48(fp)
   13b48:	21400415 	stw	r5,16(r4)
   13b4c:	18c00017 	ldw	r3,0(r3)
   13b50:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   13b54:	e0bff417 	ldw	r2,-48(fp)
   13b58:	10c00417 	ldw	r3,16(r2)
   13b5c:	e0bff417 	ldw	r2,-48(fp)
   13b60:	10800217 	ldw	r2,8(r2)
   13b64:	1880041e 	bne	r3,r2,13b78 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   13b68:	e0bff417 	ldw	r2,-48(fp)
   13b6c:	10c00117 	ldw	r3,4(r2)
   13b70:	e0bff417 	ldw	r2,-48(fp)
   13b74:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   13b78:	e0bff417 	ldw	r2,-48(fp)
   13b7c:	1080058b 	ldhu	r2,22(r2)
   13b80:	10bfffc4 	addi	r2,r2,-1
   13b84:	1007883a 	mov	r3,r2
   13b88:	e0bff417 	ldw	r2,-48(fp)
   13b8c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   13b90:	e0bffd17 	ldw	r2,-12(fp)
   13b94:	10c00104 	addi	r3,r2,4
   13b98:	e0fffd15 	stw	r3,-12(fp)
   13b9c:	e0fff017 	ldw	r3,-64(fp)
   13ba0:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   13ba4:	00800044 	movi	r2,1
   13ba8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   13bac:	e0bff18b 	ldhu	r2,-58(fp)
   13bb0:	10800044 	addi	r2,r2,1
   13bb4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   13bb8:	00000f06 	br	13bf8 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   13bbc:	e0bff203 	ldbu	r2,-56(fp)
   13bc0:	10800114 	ori	r2,r2,4
   13bc4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   13bc8:	00000b06 	br	13bf8 <OSEventPendMulti+0x388>
   13bcc:	e0bff317 	ldw	r2,-52(fp)
   13bd0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13bd4:	e0bff617 	ldw	r2,-40(fp)
   13bd8:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   13bdc:	e0bffd17 	ldw	r2,-12(fp)
   13be0:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   13be4:	e0800217 	ldw	r2,8(fp)
   13be8:	00c00044 	movi	r3,1
   13bec:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   13bf0:	e0bff18b 	ldhu	r2,-58(fp)
   13bf4:	00009d06 	br	13e6c <OSEventPendMulti+0x5fc>
        }
        pevents++;
   13bf8:	e0bfef17 	ldw	r2,-68(fp)
   13bfc:	10800104 	addi	r2,r2,4
   13c00:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   13c04:	e0bfef17 	ldw	r2,-68(fp)
   13c08:	10800017 	ldw	r2,0(r2)
   13c0c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   13c10:	e0bff017 	ldw	r2,-64(fp)
   13c14:	103f7d1e 	bne	r2,zero,13a0c <__alt_mem_Flash_flash_data+0xf4013a0c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   13c18:	e0bff103 	ldbu	r2,-60(fp)
   13c1c:	10800058 	cmpnei	r2,r2,1
   13c20:	10000a1e 	bne	r2,zero,13c4c <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   13c24:	e0bffd17 	ldw	r2,-12(fp)
   13c28:	10000015 	stw	zero,0(r2)
   13c2c:	e0bff317 	ldw	r2,-52(fp)
   13c30:	e0bff715 	stw	r2,-36(fp)
   13c34:	e0bff717 	ldw	r2,-36(fp)
   13c38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   13c3c:	e0800217 	ldw	r2,8(fp)
   13c40:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   13c44:	e0bff18b 	ldhu	r2,-58(fp)
   13c48:	00008806 	br	13e6c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   13c4c:	d0a84217 	ldw	r2,-24312(gp)
   13c50:	d0e84217 	ldw	r3,-24312(gp)
   13c54:	19000c03 	ldbu	r4,48(r3)
   13c58:	e0fff203 	ldbu	r3,-56(fp)
   13c5c:	20c6b03a 	or	r3,r4,r3
   13c60:	1809883a 	mov	r4,r3
   13c64:	00ffe004 	movi	r3,-128
   13c68:	20c6b03a 	or	r3,r4,r3
   13c6c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13c70:	d0a84217 	ldw	r2,-24312(gp)
   13c74:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   13c78:	d0a84217 	ldw	r2,-24312(gp)
   13c7c:	e0ffff0b 	ldhu	r3,-4(fp)
   13c80:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   13c84:	e13ffc17 	ldw	r4,-16(fp)
   13c88:	00147b80 	call	147b8 <OS_EventTaskWaitMulti>
   13c8c:	e0bff317 	ldw	r2,-52(fp)
   13c90:	e0bff815 	stw	r2,-32(fp)
   13c94:	e0bff817 	ldw	r2,-32(fp)
   13c98:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   13c9c:	0014f2c0 	call	14f2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ca0:	0005303a 	rdctl	r2,status
   13ca4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ca8:	e0fff917 	ldw	r3,-28(fp)
   13cac:	00bfff84 	movi	r2,-2
   13cb0:	1884703a 	and	r2,r3,r2
   13cb4:	1001703a 	wrctl	status,r2
  
  return context;
   13cb8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   13cbc:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   13cc0:	d0a84217 	ldw	r2,-24312(gp)
   13cc4:	10800c43 	ldbu	r2,49(r2)
   13cc8:	10803fcc 	andi	r2,r2,255
   13ccc:	10000226 	beq	r2,zero,13cd8 <OSEventPendMulti+0x468>
   13cd0:	108000a0 	cmpeqi	r2,r2,2
   13cd4:	10001826 	beq	r2,zero,13d38 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   13cd8:	d0a84217 	ldw	r2,-24312(gp)
   13cdc:	10800717 	ldw	r2,28(r2)
   13ce0:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   13ce4:	e0bff017 	ldw	r2,-64(fp)
   13ce8:	10000b26 	beq	r2,zero,13d18 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   13cec:	e0bffd17 	ldw	r2,-12(fp)
   13cf0:	10c00104 	addi	r3,r2,4
   13cf4:	e0fffd15 	stw	r3,-12(fp)
   13cf8:	e0fff017 	ldw	r3,-64(fp)
   13cfc:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   13d00:	e0bffd17 	ldw	r2,-12(fp)
   13d04:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   13d08:	e0bff18b 	ldhu	r2,-58(fp)
   13d0c:	10800044 	addi	r2,r2,1
   13d10:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   13d14:	00000d06 	br	13d4c <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   13d18:	d0a84217 	ldw	r2,-24312(gp)
   13d1c:	00c00044 	movi	r3,1
   13d20:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   13d24:	d0a84217 	ldw	r2,-24312(gp)
   13d28:	1009883a 	mov	r4,r2
   13d2c:	e17ffc17 	ldw	r5,-16(fp)
   13d30:	00149b80 	call	149b8 <OS_EventTaskRemoveMulti>
             }
			 break;
   13d34:	00000506 	br	13d4c <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   13d38:	d0a84217 	ldw	r2,-24312(gp)
   13d3c:	1009883a 	mov	r4,r2
   13d40:	e17ffc17 	ldw	r5,-16(fp)
   13d44:	00149b80 	call	149b8 <OS_EventTaskRemoveMulti>
             break;
   13d48:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   13d4c:	d0a84217 	ldw	r2,-24312(gp)
   13d50:	10800c43 	ldbu	r2,49(r2)
   13d54:	10803fcc 	andi	r2,r2,255
   13d58:	10000326 	beq	r2,zero,13d68 <OSEventPendMulti+0x4f8>
   13d5c:	108000a0 	cmpeqi	r2,r2,2
   13d60:	1000231e 	bne	r2,zero,13df0 <OSEventPendMulti+0x580>
   13d64:	00002a06 	br	13e10 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   13d68:	e0bff017 	ldw	r2,-64(fp)
   13d6c:	10800003 	ldbu	r2,0(r2)
   13d70:	10803fcc 	andi	r2,r2,255
   13d74:	0080100e 	bge	zero,r2,13db8 <OSEventPendMulti+0x548>
   13d78:	10c000d0 	cmplti	r3,r2,3
   13d7c:	1800071e 	bne	r3,zero,13d9c <OSEventPendMulti+0x52c>
   13d80:	108000e0 	cmpeqi	r2,r2,3
   13d84:	10000c26 	beq	r2,zero,13db8 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   13d88:	e0bffe17 	ldw	r2,-8(fp)
   13d8c:	10c00104 	addi	r3,r2,4
   13d90:	e0fffe15 	stw	r3,-8(fp)
   13d94:	10000015 	stw	zero,0(r2)
                      break;
   13d98:	00001206 	br	13de4 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   13d9c:	e0bffe17 	ldw	r2,-8(fp)
   13da0:	10c00104 	addi	r3,r2,4
   13da4:	e0fffe15 	stw	r3,-8(fp)
   13da8:	d0e84217 	ldw	r3,-24312(gp)
   13dac:	18c00917 	ldw	r3,36(r3)
   13db0:	10c00015 	stw	r3,0(r2)
                      break;
   13db4:	00000b06 	br	13de4 <OSEventPendMulti+0x574>
   13db8:	e0bff317 	ldw	r2,-52(fp)
   13dbc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13dc0:	e0bffa17 	ldw	r2,-24(fp)
   13dc4:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   13dc8:	e0bffd17 	ldw	r2,-12(fp)
   13dcc:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   13dd0:	e0800217 	ldw	r2,8(fp)
   13dd4:	00c00044 	movi	r3,1
   13dd8:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   13ddc:	e0bff18b 	ldhu	r2,-58(fp)
   13de0:	00002206 	br	13e6c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   13de4:	e0800217 	ldw	r2,8(fp)
   13de8:	10000005 	stb	zero,0(r2)
             break;
   13dec:	00001006 	br	13e30 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   13df0:	e0bffe17 	ldw	r2,-8(fp)
   13df4:	10c00104 	addi	r3,r2,4
   13df8:	e0fffe15 	stw	r3,-8(fp)
   13dfc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   13e00:	e0800217 	ldw	r2,8(fp)
   13e04:	00c00384 	movi	r3,14
   13e08:	10c00005 	stb	r3,0(r2)
             break;
   13e0c:	00000806 	br	13e30 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   13e10:	e0bffe17 	ldw	r2,-8(fp)
   13e14:	10c00104 	addi	r3,r2,4
   13e18:	e0fffe15 	stw	r3,-8(fp)
   13e1c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   13e20:	e0800217 	ldw	r2,8(fp)
   13e24:	00c00284 	movi	r3,10
   13e28:	10c00005 	stb	r3,0(r2)
             break;
   13e2c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   13e30:	d0a84217 	ldw	r2,-24312(gp)
   13e34:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   13e38:	d0a84217 	ldw	r2,-24312(gp)
   13e3c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   13e40:	d0a84217 	ldw	r2,-24312(gp)
   13e44:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   13e48:	d0a84217 	ldw	r2,-24312(gp)
   13e4c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   13e50:	d0a84217 	ldw	r2,-24312(gp)
   13e54:	10000915 	stw	zero,36(r2)
   13e58:	e0bff317 	ldw	r2,-52(fp)
   13e5c:	e0bffb15 	stw	r2,-20(fp)
   13e60:	e0bffb17 	ldw	r2,-20(fp)
   13e64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   13e68:	e0bff18b 	ldhu	r2,-58(fp)
}
   13e6c:	e037883a 	mov	sp,fp
   13e70:	dfc00117 	ldw	ra,4(sp)
   13e74:	df000017 	ldw	fp,0(sp)
   13e78:	dec00204 	addi	sp,sp,8
   13e7c:	f800283a 	ret

00013e80 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   13e80:	defffe04 	addi	sp,sp,-8
   13e84:	dfc00115 	stw	ra,4(sp)
   13e88:	df000015 	stw	fp,0(sp)
   13e8c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   13e90:	001f3f40 	call	1f3f4 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   13e94:	0014bf40 	call	14bf4 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   13e98:	0014c380 	call	14c38 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   13e9c:	0014d980 	call	14d98 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   13ea0:	0014b180 	call	14b18 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   13ea4:	0016d180 	call	16d18 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   13ea8:	00181e80 	call	181e8 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   13eac:	001941c0 	call	1941c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   13eb0:	0014ca00 	call	14ca0 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   13eb4:	0014d1c0 	call	14d1c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   13eb8:	001f4100 	call	1f410 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   13ebc:	00156040 	call	15604 <OSDebugInit>
#endif
}
   13ec0:	e037883a 	mov	sp,fp
   13ec4:	dfc00117 	ldw	ra,4(sp)
   13ec8:	df000017 	ldw	fp,0(sp)
   13ecc:	dec00204 	addi	sp,sp,8
   13ed0:	f800283a 	ret

00013ed4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   13ed4:	defffc04 	addi	sp,sp,-16
   13ed8:	df000315 	stw	fp,12(sp)
   13edc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13ee0:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
   13ee4:	d0a83343 	ldbu	r2,-24371(gp)
   13ee8:	10803fcc 	andi	r2,r2,255
   13eec:	10800058 	cmpnei	r2,r2,1
   13ef0:	1000131e 	bne	r2,zero,13f40 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ef4:	0005303a 	rdctl	r2,status
   13ef8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13efc:	e0fffe17 	ldw	r3,-8(fp)
   13f00:	00bfff84 	movi	r2,-2
   13f04:	1884703a 	and	r2,r3,r2
   13f08:	1001703a 	wrctl	status,r2
  
  return context;
   13f0c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   13f10:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
   13f14:	d0a84103 	ldbu	r2,-24316(gp)
   13f18:	10803fcc 	andi	r2,r2,255
   13f1c:	10803fe0 	cmpeqi	r2,r2,255
   13f20:	1000031e 	bne	r2,zero,13f30 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   13f24:	d0a84103 	ldbu	r2,-24316(gp)
   13f28:	10800044 	addi	r2,r2,1
   13f2c:	d0a84105 	stb	r2,-24316(gp)
   13f30:	e0bffd17 	ldw	r2,-12(fp)
   13f34:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f38:	e0bfff17 	ldw	r2,-4(fp)
   13f3c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   13f40:	e037883a 	mov	sp,fp
   13f44:	df000017 	ldw	fp,0(sp)
   13f48:	dec00104 	addi	sp,sp,4
   13f4c:	f800283a 	ret

00013f50 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   13f50:	defffb04 	addi	sp,sp,-20
   13f54:	dfc00415 	stw	ra,16(sp)
   13f58:	df000315 	stw	fp,12(sp)
   13f5c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13f60:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   13f64:	d0a83343 	ldbu	r2,-24371(gp)
   13f68:	10803fcc 	andi	r2,r2,255
   13f6c:	10800058 	cmpnei	r2,r2,1
   13f70:	10002f1e 	bne	r2,zero,14030 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f74:	0005303a 	rdctl	r2,status
   13f78:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f7c:	e0fffe17 	ldw	r3,-8(fp)
   13f80:	00bfff84 	movi	r2,-2
   13f84:	1884703a 	and	r2,r3,r2
   13f88:	1001703a 	wrctl	status,r2
  
  return context;
   13f8c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   13f90:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   13f94:	d0a84103 	ldbu	r2,-24316(gp)
   13f98:	10803fcc 	andi	r2,r2,255
   13f9c:	10000326 	beq	r2,zero,13fac <OSIntExit+0x5c>
            OSIntNesting--;
   13fa0:	d0a84103 	ldbu	r2,-24316(gp)
   13fa4:	10bfffc4 	addi	r2,r2,-1
   13fa8:	d0a84105 	stb	r2,-24316(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   13fac:	d0a84103 	ldbu	r2,-24316(gp)
   13fb0:	10803fcc 	andi	r2,r2,255
   13fb4:	10001a1e 	bne	r2,zero,14020 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   13fb8:	d0a83303 	ldbu	r2,-24372(gp)
   13fbc:	10803fcc 	andi	r2,r2,255
   13fc0:	1000171e 	bne	r2,zero,14020 <OSIntExit+0xd0>
                OS_SchedNew();
   13fc4:	0014ff80 	call	14ff8 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   13fc8:	d0e83503 	ldbu	r3,-24364(gp)
   13fcc:	d0a83543 	ldbu	r2,-24363(gp)
   13fd0:	18c03fcc 	andi	r3,r3,255
   13fd4:	10803fcc 	andi	r2,r2,255
   13fd8:	18801126 	beq	r3,r2,14020 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   13fdc:	d0a83503 	ldbu	r2,-24364(gp)
   13fe0:	10c03fcc 	andi	r3,r2,255
   13fe4:	00800134 	movhi	r2,4
   13fe8:	109e6f04 	addi	r2,r2,31164
   13fec:	18c7883a 	add	r3,r3,r3
   13ff0:	18c7883a 	add	r3,r3,r3
   13ff4:	10c5883a 	add	r2,r2,r3
   13ff8:	10800017 	ldw	r2,0(r2)
   13ffc:	d0a83d15 	stw	r2,-24332(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   14000:	d0a83d17 	ldw	r2,-24332(gp)
   14004:	10c00e17 	ldw	r3,56(r2)
   14008:	18c00044 	addi	r3,r3,1
   1400c:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   14010:	d0a83817 	ldw	r2,-24352(gp)
   14014:	10800044 	addi	r2,r2,1
   14018:	d0a83815 	stw	r2,-24352(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   1401c:	001f1340 	call	1f134 <OSCtxSw>
   14020:	e0bffd17 	ldw	r2,-12(fp)
   14024:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14028:	e0bfff17 	ldw	r2,-4(fp)
   1402c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   14030:	e037883a 	mov	sp,fp
   14034:	dfc00117 	ldw	ra,4(sp)
   14038:	df000017 	ldw	fp,0(sp)
   1403c:	dec00204 	addi	sp,sp,8
   14040:	f800283a 	ret

00014044 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   14044:	defffc04 	addi	sp,sp,-16
   14048:	df000315 	stw	fp,12(sp)
   1404c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14050:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   14054:	d0a83343 	ldbu	r2,-24371(gp)
   14058:	10803fcc 	andi	r2,r2,255
   1405c:	10800058 	cmpnei	r2,r2,1
   14060:	1000161e 	bne	r2,zero,140bc <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14064:	0005303a 	rdctl	r2,status
   14068:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1406c:	e0fffe17 	ldw	r3,-8(fp)
   14070:	00bfff84 	movi	r2,-2
   14074:	1884703a 	and	r2,r3,r2
   14078:	1001703a 	wrctl	status,r2
  
  return context;
   1407c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   14080:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   14084:	d0a84103 	ldbu	r2,-24316(gp)
   14088:	10803fcc 	andi	r2,r2,255
   1408c:	1000071e 	bne	r2,zero,140ac <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   14090:	d0a83303 	ldbu	r2,-24372(gp)
   14094:	10803fcc 	andi	r2,r2,255
   14098:	10803fe0 	cmpeqi	r2,r2,255
   1409c:	1000031e 	bne	r2,zero,140ac <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   140a0:	d0a83303 	ldbu	r2,-24372(gp)
   140a4:	10800044 	addi	r2,r2,1
   140a8:	d0a83305 	stb	r2,-24372(gp)
   140ac:	e0bffd17 	ldw	r2,-12(fp)
   140b0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   140b4:	e0bfff17 	ldw	r2,-4(fp)
   140b8:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   140bc:	e037883a 	mov	sp,fp
   140c0:	df000017 	ldw	fp,0(sp)
   140c4:	dec00104 	addi	sp,sp,4
   140c8:	f800283a 	ret

000140cc <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   140cc:	defff804 	addi	sp,sp,-32
   140d0:	dfc00715 	stw	ra,28(sp)
   140d4:	df000615 	stw	fp,24(sp)
   140d8:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   140dc:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   140e0:	d0a83343 	ldbu	r2,-24371(gp)
   140e4:	10803fcc 	andi	r2,r2,255
   140e8:	10800058 	cmpnei	r2,r2,1
   140ec:	1000281e 	bne	r2,zero,14190 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   140f0:	0005303a 	rdctl	r2,status
   140f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   140f8:	e0fffb17 	ldw	r3,-20(fp)
   140fc:	00bfff84 	movi	r2,-2
   14100:	1884703a 	and	r2,r3,r2
   14104:	1001703a 	wrctl	status,r2
  
  return context;
   14108:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   1410c:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   14110:	d0a83303 	ldbu	r2,-24372(gp)
   14114:	10803fcc 	andi	r2,r2,255
   14118:	10001926 	beq	r2,zero,14180 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   1411c:	d0a83303 	ldbu	r2,-24372(gp)
   14120:	10bfffc4 	addi	r2,r2,-1
   14124:	d0a83305 	stb	r2,-24372(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   14128:	d0a83303 	ldbu	r2,-24372(gp)
   1412c:	10803fcc 	andi	r2,r2,255
   14130:	10000e1e 	bne	r2,zero,1416c <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   14134:	d0a84103 	ldbu	r2,-24316(gp)
   14138:	10803fcc 	andi	r2,r2,255
   1413c:	1000061e 	bne	r2,zero,14158 <OSSchedUnlock+0x8c>
   14140:	e0bffa17 	ldw	r2,-24(fp)
   14144:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14148:	e0bffc17 	ldw	r2,-16(fp)
   1414c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   14150:	0014f2c0 	call	14f2c <OS_Sched>
   14154:	00000e06 	br	14190 <OSSchedUnlock+0xc4>
   14158:	e0bffa17 	ldw	r2,-24(fp)
   1415c:	e0bffd15 	stw	r2,-12(fp)
   14160:	e0bffd17 	ldw	r2,-12(fp)
   14164:	1001703a 	wrctl	status,r2
   14168:	00000906 	br	14190 <OSSchedUnlock+0xc4>
   1416c:	e0bffa17 	ldw	r2,-24(fp)
   14170:	e0bffe15 	stw	r2,-8(fp)
   14174:	e0bffe17 	ldw	r2,-8(fp)
   14178:	1001703a 	wrctl	status,r2
   1417c:	00000406 	br	14190 <OSSchedUnlock+0xc4>
   14180:	e0bffa17 	ldw	r2,-24(fp)
   14184:	e0bfff15 	stw	r2,-4(fp)
   14188:	e0bfff17 	ldw	r2,-4(fp)
   1418c:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   14190:	e037883a 	mov	sp,fp
   14194:	dfc00117 	ldw	ra,4(sp)
   14198:	df000017 	ldw	fp,0(sp)
   1419c:	dec00204 	addi	sp,sp,8
   141a0:	f800283a 	ret

000141a4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   141a4:	defffe04 	addi	sp,sp,-8
   141a8:	dfc00115 	stw	ra,4(sp)
   141ac:	df000015 	stw	fp,0(sp)
   141b0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   141b4:	d0a83343 	ldbu	r2,-24371(gp)
   141b8:	10803fcc 	andi	r2,r2,255
   141bc:	10000f1e 	bne	r2,zero,141fc <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   141c0:	0014ff80 	call	14ff8 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   141c4:	d0a83503 	ldbu	r2,-24364(gp)
   141c8:	d0a83545 	stb	r2,-24363(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   141cc:	d0a83503 	ldbu	r2,-24364(gp)
   141d0:	10c03fcc 	andi	r3,r2,255
   141d4:	00800134 	movhi	r2,4
   141d8:	109e6f04 	addi	r2,r2,31164
   141dc:	18c7883a 	add	r3,r3,r3
   141e0:	18c7883a 	add	r3,r3,r3
   141e4:	10c5883a 	add	r2,r2,r3
   141e8:	10800017 	ldw	r2,0(r2)
   141ec:	d0a83d15 	stw	r2,-24332(gp)
        OSTCBCur      = OSTCBHighRdy;
   141f0:	d0a83d17 	ldw	r2,-24332(gp)
   141f4:	d0a84215 	stw	r2,-24312(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   141f8:	001f1c00 	call	1f1c0 <OSStartHighRdy>
    }
}
   141fc:	e037883a 	mov	sp,fp
   14200:	dfc00117 	ldw	ra,4(sp)
   14204:	df000017 	ldw	fp,0(sp)
   14208:	dec00204 	addi	sp,sp,8
   1420c:	f800283a 	ret

00014210 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   14210:	defff904 	addi	sp,sp,-28
   14214:	dfc00615 	stw	ra,24(sp)
   14218:	df000515 	stw	fp,20(sp)
   1421c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14220:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   14224:	01000084 	movi	r4,2
   14228:	001b8c40 	call	1b8c4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1422c:	0005303a 	rdctl	r2,status
   14230:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14234:	e0fffc17 	ldw	r3,-16(fp)
   14238:	00bfff84 	movi	r2,-2
   1423c:	1884703a 	and	r2,r3,r2
   14240:	1001703a 	wrctl	status,r2
  
  return context;
   14244:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   14248:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   1424c:	d0283415 	stw	zero,-24368(gp)
   14250:	e0bffb17 	ldw	r2,-20(fp)
   14254:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14258:	e0bffd17 	ldw	r2,-12(fp)
   1425c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   14260:	0009883a 	mov	r4,zero
   14264:	001b8c40 	call	1b8c4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14268:	0005303a 	rdctl	r2,status
   1426c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14270:	e0fffe17 	ldw	r3,-8(fp)
   14274:	00bfff84 	movi	r2,-2
   14278:	1884703a 	and	r2,r3,r2
   1427c:	1001703a 	wrctl	status,r2
  
  return context;
   14280:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   14284:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   14288:	d0a83417 	ldw	r2,-24368(gp)
   1428c:	d0a83915 	stw	r2,-24348(gp)
    OSStatRdy    = OS_TRUE;
   14290:	00800044 	movi	r2,1
   14294:	d0a84505 	stb	r2,-24300(gp)
   14298:	e0bffb17 	ldw	r2,-20(fp)
   1429c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   142a0:	e0bfff17 	ldw	r2,-4(fp)
   142a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   142a8:	e037883a 	mov	sp,fp
   142ac:	dfc00117 	ldw	ra,4(sp)
   142b0:	df000017 	ldw	fp,0(sp)
   142b4:	dec00204 	addi	sp,sp,8
   142b8:	f800283a 	ret

000142bc <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   142bc:	defff704 	addi	sp,sp,-36
   142c0:	dfc00815 	stw	ra,32(sp)
   142c4:	df000715 	stw	fp,28(sp)
   142c8:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   142cc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   142d0:	001f3d80 	call	1f3d8 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   142d4:	0005303a 	rdctl	r2,status
   142d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   142dc:	e0fffc17 	ldw	r3,-16(fp)
   142e0:	00bfff84 	movi	r2,-2
   142e4:	1884703a 	and	r2,r3,r2
   142e8:	1001703a 	wrctl	status,r2
  
  return context;
   142ec:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   142f0:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   142f4:	d0a84317 	ldw	r2,-24308(gp)
   142f8:	10800044 	addi	r2,r2,1
   142fc:	d0a84315 	stw	r2,-24308(gp)
   14300:	e0bffb17 	ldw	r2,-20(fp)
   14304:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14308:	e0bffd17 	ldw	r2,-12(fp)
   1430c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   14310:	d0a83343 	ldbu	r2,-24371(gp)
   14314:	10803fcc 	andi	r2,r2,255
   14318:	10800058 	cmpnei	r2,r2,1
   1431c:	1000691e 	bne	r2,zero,144c4 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   14320:	d0a83703 	ldbu	r2,-24356(gp)
   14324:	10803fcc 	andi	r2,r2,255
   14328:	10c00060 	cmpeqi	r3,r2,1
   1432c:	1800061e 	bne	r3,zero,14348 <OSTimeTick+0x8c>
   14330:	10c000a0 	cmpeqi	r3,r2,2
   14334:	1800061e 	bne	r3,zero,14350 <OSTimeTick+0x94>
   14338:	10000a1e 	bne	r2,zero,14364 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   1433c:	00800044 	movi	r2,1
   14340:	e0bffa05 	stb	r2,-24(fp)
                 break;
   14344:	00000b06 	br	14374 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   14348:	e03ffa05 	stb	zero,-24(fp)
                 break;
   1434c:	00000906 	br	14374 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   14350:	00800044 	movi	r2,1
   14354:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   14358:	00800044 	movi	r2,1
   1435c:	d0a83705 	stb	r2,-24356(gp)
                 break;
   14360:	00000406 	br	14374 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   14364:	00800044 	movi	r2,1
   14368:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   1436c:	d0283705 	stb	zero,-24356(gp)
                 break;
   14370:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   14374:	e0bffa03 	ldbu	r2,-24(fp)
   14378:	1000011e 	bne	r2,zero,14380 <OSTimeTick+0xc4>
            return;
   1437c:	00005106 	br	144c4 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   14380:	d0a83617 	ldw	r2,-24360(gp)
   14384:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   14388:	00004906 	br	144b0 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1438c:	0005303a 	rdctl	r2,status
   14390:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14394:	e0fffe17 	ldw	r3,-8(fp)
   14398:	00bfff84 	movi	r2,-2
   1439c:	1884703a 	and	r2,r3,r2
   143a0:	1001703a 	wrctl	status,r2
  
  return context;
   143a4:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
   143a8:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   143ac:	e0bff917 	ldw	r2,-28(fp)
   143b0:	10800b8b 	ldhu	r2,46(r2)
   143b4:	10bfffcc 	andi	r2,r2,65535
   143b8:	10003626 	beq	r2,zero,14494 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   143bc:	e0bff917 	ldw	r2,-28(fp)
   143c0:	10800b8b 	ldhu	r2,46(r2)
   143c4:	10bfffc4 	addi	r2,r2,-1
   143c8:	1007883a 	mov	r3,r2
   143cc:	e0bff917 	ldw	r2,-28(fp)
   143d0:	10c00b8d 	sth	r3,46(r2)
   143d4:	e0bff917 	ldw	r2,-28(fp)
   143d8:	10800b8b 	ldhu	r2,46(r2)
   143dc:	10bfffcc 	andi	r2,r2,65535
   143e0:	10002c1e 	bne	r2,zero,14494 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   143e4:	e0bff917 	ldw	r2,-28(fp)
   143e8:	10800c03 	ldbu	r2,48(r2)
   143ec:	10803fcc 	andi	r2,r2,255
   143f0:	10800dcc 	andi	r2,r2,55
   143f4:	10000b26 	beq	r2,zero,14424 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   143f8:	e0bff917 	ldw	r2,-28(fp)
   143fc:	10c00c03 	ldbu	r3,48(r2)
   14400:	00bff204 	movi	r2,-56
   14404:	1884703a 	and	r2,r3,r2
   14408:	1007883a 	mov	r3,r2
   1440c:	e0bff917 	ldw	r2,-28(fp)
   14410:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   14414:	e0bff917 	ldw	r2,-28(fp)
   14418:	00c00044 	movi	r3,1
   1441c:	10c00c45 	stb	r3,49(r2)
   14420:	00000206 	br	1442c <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   14424:	e0bff917 	ldw	r2,-28(fp)
   14428:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   1442c:	e0bff917 	ldw	r2,-28(fp)
   14430:	10800c03 	ldbu	r2,48(r2)
   14434:	10803fcc 	andi	r2,r2,255
   14438:	1080020c 	andi	r2,r2,8
   1443c:	1000151e 	bne	r2,zero,14494 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   14440:	e0bff917 	ldw	r2,-28(fp)
   14444:	10c00d83 	ldbu	r3,54(r2)
   14448:	d0a83f03 	ldbu	r2,-24324(gp)
   1444c:	1884b03a 	or	r2,r3,r2
   14450:	d0a83f05 	stb	r2,-24324(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   14454:	e0bff917 	ldw	r2,-28(fp)
   14458:	10800d03 	ldbu	r2,52(r2)
   1445c:	10c03fcc 	andi	r3,r2,255
   14460:	e0bff917 	ldw	r2,-28(fp)
   14464:	10800d03 	ldbu	r2,52(r2)
   14468:	11003fcc 	andi	r4,r2,255
   1446c:	d0a83f44 	addi	r2,gp,-24323
   14470:	2085883a 	add	r2,r4,r2
   14474:	11000003 	ldbu	r4,0(r2)
   14478:	e0bff917 	ldw	r2,-28(fp)
   1447c:	10800d43 	ldbu	r2,53(r2)
   14480:	2084b03a 	or	r2,r4,r2
   14484:	1009883a 	mov	r4,r2
   14488:	d0a83f44 	addi	r2,gp,-24323
   1448c:	1885883a 	add	r2,r3,r2
   14490:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   14494:	e0bff917 	ldw	r2,-28(fp)
   14498:	10800517 	ldw	r2,20(r2)
   1449c:	e0bff915 	stw	r2,-28(fp)
   144a0:	e0bffb17 	ldw	r2,-20(fp)
   144a4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   144a8:	e0bfff17 	ldw	r2,-4(fp)
   144ac:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   144b0:	e0bff917 	ldw	r2,-28(fp)
   144b4:	10800c83 	ldbu	r2,50(r2)
   144b8:	10803fcc 	andi	r2,r2,255
   144bc:	10800518 	cmpnei	r2,r2,20
   144c0:	103fb21e 	bne	r2,zero,1438c <__alt_mem_Flash_flash_data+0xf401438c>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   144c4:	e037883a 	mov	sp,fp
   144c8:	dfc00117 	ldw	ra,4(sp)
   144cc:	df000017 	ldw	fp,0(sp)
   144d0:	dec00204 	addi	sp,sp,8
   144d4:	f800283a 	ret

000144d8 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   144d8:	deffff04 	addi	sp,sp,-4
   144dc:	df000015 	stw	fp,0(sp)
   144e0:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   144e4:	00804784 	movi	r2,286
}
   144e8:	e037883a 	mov	sp,fp
   144ec:	df000017 	ldw	fp,0(sp)
   144f0:	dec00104 	addi	sp,sp,4
   144f4:	f800283a 	ret

000144f8 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   144f8:	deffff04 	addi	sp,sp,-4
   144fc:	df000015 	stw	fp,0(sp)
   14500:	d839883a 	mov	fp,sp
}
   14504:	e037883a 	mov	sp,fp
   14508:	df000017 	ldw	fp,0(sp)
   1450c:	dec00104 	addi	sp,sp,4
   14510:	f800283a 	ret

00014514 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   14514:	defff804 	addi	sp,sp,-32
   14518:	dfc00715 	stw	ra,28(sp)
   1451c:	df000615 	stw	fp,24(sp)
   14520:	df000604 	addi	fp,sp,24
   14524:	e13ffc15 	stw	r4,-16(fp)
   14528:	e17ffd15 	stw	r5,-12(fp)
   1452c:	3007883a 	mov	r3,r6
   14530:	3805883a 	mov	r2,r7
   14534:	e0fffe05 	stb	r3,-8(fp)
   14538:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   1453c:	e0bffc17 	ldw	r2,-16(fp)
   14540:	10800283 	ldbu	r2,10(r2)
   14544:	10c03fcc 	andi	r3,r2,255
   14548:	008000b4 	movhi	r2,2
   1454c:	10814904 	addi	r2,r2,1316
   14550:	10c5883a 	add	r2,r2,r3
   14554:	10800003 	ldbu	r2,0(r2)
   14558:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   1455c:	e0bffa03 	ldbu	r2,-24(fp)
   14560:	e0fffc17 	ldw	r3,-16(fp)
   14564:	1885883a 	add	r2,r3,r2
   14568:	10800204 	addi	r2,r2,8
   1456c:	108000c3 	ldbu	r2,3(r2)
   14570:	10c03fcc 	andi	r3,r2,255
   14574:	008000b4 	movhi	r2,2
   14578:	10814904 	addi	r2,r2,1316
   1457c:	10c5883a 	add	r2,r2,r3
   14580:	10800003 	ldbu	r2,0(r2)
   14584:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   14588:	e0bffa03 	ldbu	r2,-24(fp)
   1458c:	100490fa 	slli	r2,r2,3
   14590:	1007883a 	mov	r3,r2
   14594:	e0bffa43 	ldbu	r2,-23(fp)
   14598:	1885883a 	add	r2,r3,r2
   1459c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   145a0:	e0fffa83 	ldbu	r3,-22(fp)
   145a4:	00800134 	movhi	r2,4
   145a8:	109e6f04 	addi	r2,r2,31164
   145ac:	18c7883a 	add	r3,r3,r3
   145b0:	18c7883a 	add	r3,r3,r3
   145b4:	10c5883a 	add	r2,r2,r3
   145b8:	10800017 	ldw	r2,0(r2)
   145bc:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   145c0:	e0bffb17 	ldw	r2,-20(fp)
   145c4:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   145c8:	e0bffb17 	ldw	r2,-20(fp)
   145cc:	e0fffd17 	ldw	r3,-12(fp)
   145d0:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   145d4:	e0bffb17 	ldw	r2,-20(fp)
   145d8:	10800c03 	ldbu	r2,48(r2)
   145dc:	1007883a 	mov	r3,r2
   145e0:	e0bffe03 	ldbu	r2,-8(fp)
   145e4:	0084303a 	nor	r2,zero,r2
   145e8:	1884703a 	and	r2,r3,r2
   145ec:	1007883a 	mov	r3,r2
   145f0:	e0bffb17 	ldw	r2,-20(fp)
   145f4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   145f8:	e0bffb17 	ldw	r2,-20(fp)
   145fc:	e0ffff03 	ldbu	r3,-4(fp)
   14600:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   14604:	e0bffb17 	ldw	r2,-20(fp)
   14608:	10800c03 	ldbu	r2,48(r2)
   1460c:	10803fcc 	andi	r2,r2,255
   14610:	1080020c 	andi	r2,r2,8
   14614:	1000111e 	bne	r2,zero,1465c <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   14618:	e0bffb17 	ldw	r2,-20(fp)
   1461c:	10c00d83 	ldbu	r3,54(r2)
   14620:	d0a83f03 	ldbu	r2,-24324(gp)
   14624:	1884b03a 	or	r2,r3,r2
   14628:	d0a83f05 	stb	r2,-24324(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   1462c:	e0fffa03 	ldbu	r3,-24(fp)
   14630:	e13ffa03 	ldbu	r4,-24(fp)
   14634:	d0a83f44 	addi	r2,gp,-24323
   14638:	2085883a 	add	r2,r4,r2
   1463c:	11000003 	ldbu	r4,0(r2)
   14640:	e0bffb17 	ldw	r2,-20(fp)
   14644:	10800d43 	ldbu	r2,53(r2)
   14648:	2084b03a 	or	r2,r4,r2
   1464c:	1009883a 	mov	r4,r2
   14650:	d0a83f44 	addi	r2,gp,-24323
   14654:	1885883a 	add	r2,r3,r2
   14658:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   1465c:	e13ffb17 	ldw	r4,-20(fp)
   14660:	e17ffc17 	ldw	r5,-16(fp)
   14664:	00149040 	call	14904 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   14668:	e0bffb17 	ldw	r2,-20(fp)
   1466c:	10800817 	ldw	r2,32(r2)
   14670:	10000826 	beq	r2,zero,14694 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   14674:	e0bffb17 	ldw	r2,-20(fp)
   14678:	10800817 	ldw	r2,32(r2)
   1467c:	e13ffb17 	ldw	r4,-20(fp)
   14680:	100b883a 	mov	r5,r2
   14684:	00149b80 	call	149b8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   14688:	e0bffb17 	ldw	r2,-20(fp)
   1468c:	e0fffc17 	ldw	r3,-16(fp)
   14690:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   14694:	e0bffa83 	ldbu	r2,-22(fp)
}
   14698:	e037883a 	mov	sp,fp
   1469c:	dfc00117 	ldw	ra,4(sp)
   146a0:	df000017 	ldw	fp,0(sp)
   146a4:	dec00204 	addi	sp,sp,8
   146a8:	f800283a 	ret

000146ac <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   146ac:	defffd04 	addi	sp,sp,-12
   146b0:	df000215 	stw	fp,8(sp)
   146b4:	df000204 	addi	fp,sp,8
   146b8:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   146bc:	d0a84217 	ldw	r2,-24312(gp)
   146c0:	e0ffff17 	ldw	r3,-4(fp)
   146c4:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   146c8:	d0a84217 	ldw	r2,-24312(gp)
   146cc:	10800d03 	ldbu	r2,52(r2)
   146d0:	10803fcc 	andi	r2,r2,255
   146d4:	d0e84217 	ldw	r3,-24312(gp)
   146d8:	18c00d03 	ldbu	r3,52(r3)
   146dc:	18c03fcc 	andi	r3,r3,255
   146e0:	e13fff17 	ldw	r4,-4(fp)
   146e4:	20c7883a 	add	r3,r4,r3
   146e8:	18c00204 	addi	r3,r3,8
   146ec:	190000c3 	ldbu	r4,3(r3)
   146f0:	d0e84217 	ldw	r3,-24312(gp)
   146f4:	18c00d43 	ldbu	r3,53(r3)
   146f8:	20c6b03a 	or	r3,r4,r3
   146fc:	1809883a 	mov	r4,r3
   14700:	e0ffff17 	ldw	r3,-4(fp)
   14704:	1885883a 	add	r2,r3,r2
   14708:	10800204 	addi	r2,r2,8
   1470c:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   14710:	e0bfff17 	ldw	r2,-4(fp)
   14714:	10c00283 	ldbu	r3,10(r2)
   14718:	d0a84217 	ldw	r2,-24312(gp)
   1471c:	10800d83 	ldbu	r2,54(r2)
   14720:	1884b03a 	or	r2,r3,r2
   14724:	1007883a 	mov	r3,r2
   14728:	e0bfff17 	ldw	r2,-4(fp)
   1472c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   14730:	d0a84217 	ldw	r2,-24312(gp)
   14734:	10800d03 	ldbu	r2,52(r2)
   14738:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   1473c:	e0fffe03 	ldbu	r3,-8(fp)
   14740:	e13ffe03 	ldbu	r4,-8(fp)
   14744:	d0a83f44 	addi	r2,gp,-24323
   14748:	2085883a 	add	r2,r4,r2
   1474c:	10800003 	ldbu	r2,0(r2)
   14750:	1009883a 	mov	r4,r2
   14754:	d0a84217 	ldw	r2,-24312(gp)
   14758:	10800d43 	ldbu	r2,53(r2)
   1475c:	0084303a 	nor	r2,zero,r2
   14760:	2084703a 	and	r2,r4,r2
   14764:	1009883a 	mov	r4,r2
   14768:	d0a83f44 	addi	r2,gp,-24323
   1476c:	1885883a 	add	r2,r3,r2
   14770:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14774:	e0fffe03 	ldbu	r3,-8(fp)
   14778:	d0a83f44 	addi	r2,gp,-24323
   1477c:	1885883a 	add	r2,r3,r2
   14780:	10800003 	ldbu	r2,0(r2)
   14784:	10803fcc 	andi	r2,r2,255
   14788:	1000071e 	bne	r2,zero,147a8 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   1478c:	d0a84217 	ldw	r2,-24312(gp)
   14790:	10800d83 	ldbu	r2,54(r2)
   14794:	0084303a 	nor	r2,zero,r2
   14798:	1007883a 	mov	r3,r2
   1479c:	d0a83f03 	ldbu	r2,-24324(gp)
   147a0:	1884703a 	and	r2,r3,r2
   147a4:	d0a83f05 	stb	r2,-24324(gp)
    }
}
   147a8:	e037883a 	mov	sp,fp
   147ac:	df000017 	ldw	fp,0(sp)
   147b0:	dec00104 	addi	sp,sp,4
   147b4:	f800283a 	ret

000147b8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   147b8:	defffb04 	addi	sp,sp,-20
   147bc:	df000415 	stw	fp,16(sp)
   147c0:	df000404 	addi	fp,sp,16
   147c4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   147c8:	d0a84217 	ldw	r2,-24312(gp)
   147cc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   147d0:	d0a84217 	ldw	r2,-24312(gp)
   147d4:	e0ffff17 	ldw	r3,-4(fp)
   147d8:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   147dc:	e0bfff17 	ldw	r2,-4(fp)
   147e0:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   147e4:	e0bffc17 	ldw	r2,-16(fp)
   147e8:	10800017 	ldw	r2,0(r2)
   147ec:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   147f0:	00002006 	br	14874 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   147f4:	d0a84217 	ldw	r2,-24312(gp)
   147f8:	10800d03 	ldbu	r2,52(r2)
   147fc:	10803fcc 	andi	r2,r2,255
   14800:	d0e84217 	ldw	r3,-24312(gp)
   14804:	18c00d03 	ldbu	r3,52(r3)
   14808:	18c03fcc 	andi	r3,r3,255
   1480c:	e13ffd17 	ldw	r4,-12(fp)
   14810:	20c7883a 	add	r3,r4,r3
   14814:	18c00204 	addi	r3,r3,8
   14818:	190000c3 	ldbu	r4,3(r3)
   1481c:	d0e84217 	ldw	r3,-24312(gp)
   14820:	18c00d43 	ldbu	r3,53(r3)
   14824:	20c6b03a 	or	r3,r4,r3
   14828:	1809883a 	mov	r4,r3
   1482c:	e0fffd17 	ldw	r3,-12(fp)
   14830:	1885883a 	add	r2,r3,r2
   14834:	10800204 	addi	r2,r2,8
   14838:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   1483c:	e0bffd17 	ldw	r2,-12(fp)
   14840:	10c00283 	ldbu	r3,10(r2)
   14844:	d0a84217 	ldw	r2,-24312(gp)
   14848:	10800d83 	ldbu	r2,54(r2)
   1484c:	1884b03a 	or	r2,r3,r2
   14850:	1007883a 	mov	r3,r2
   14854:	e0bffd17 	ldw	r2,-12(fp)
   14858:	10c00285 	stb	r3,10(r2)
        pevents++;
   1485c:	e0bffc17 	ldw	r2,-16(fp)
   14860:	10800104 	addi	r2,r2,4
   14864:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   14868:	e0bffc17 	ldw	r2,-16(fp)
   1486c:	10800017 	ldw	r2,0(r2)
   14870:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   14874:	e0bffd17 	ldw	r2,-12(fp)
   14878:	103fde1e 	bne	r2,zero,147f4 <__alt_mem_Flash_flash_data+0xf40147f4>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   1487c:	d0a84217 	ldw	r2,-24312(gp)
   14880:	10800d03 	ldbu	r2,52(r2)
   14884:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   14888:	e0fffe03 	ldbu	r3,-8(fp)
   1488c:	e13ffe03 	ldbu	r4,-8(fp)
   14890:	d0a83f44 	addi	r2,gp,-24323
   14894:	2085883a 	add	r2,r4,r2
   14898:	10800003 	ldbu	r2,0(r2)
   1489c:	1009883a 	mov	r4,r2
   148a0:	d0a84217 	ldw	r2,-24312(gp)
   148a4:	10800d43 	ldbu	r2,53(r2)
   148a8:	0084303a 	nor	r2,zero,r2
   148ac:	2084703a 	and	r2,r4,r2
   148b0:	1009883a 	mov	r4,r2
   148b4:	d0a83f44 	addi	r2,gp,-24323
   148b8:	1885883a 	add	r2,r3,r2
   148bc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   148c0:	e0fffe03 	ldbu	r3,-8(fp)
   148c4:	d0a83f44 	addi	r2,gp,-24323
   148c8:	1885883a 	add	r2,r3,r2
   148cc:	10800003 	ldbu	r2,0(r2)
   148d0:	10803fcc 	andi	r2,r2,255
   148d4:	1000071e 	bne	r2,zero,148f4 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   148d8:	d0a84217 	ldw	r2,-24312(gp)
   148dc:	10800d83 	ldbu	r2,54(r2)
   148e0:	0084303a 	nor	r2,zero,r2
   148e4:	1007883a 	mov	r3,r2
   148e8:	d0a83f03 	ldbu	r2,-24324(gp)
   148ec:	1884703a 	and	r2,r3,r2
   148f0:	d0a83f05 	stb	r2,-24324(gp)
    }
}
   148f4:	e037883a 	mov	sp,fp
   148f8:	df000017 	ldw	fp,0(sp)
   148fc:	dec00104 	addi	sp,sp,4
   14900:	f800283a 	ret

00014904 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   14904:	defffc04 	addi	sp,sp,-16
   14908:	df000315 	stw	fp,12(sp)
   1490c:	df000304 	addi	fp,sp,12
   14910:	e13ffe15 	stw	r4,-8(fp)
   14914:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   14918:	e0bffe17 	ldw	r2,-8(fp)
   1491c:	10800d03 	ldbu	r2,52(r2)
   14920:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   14924:	e0bffd03 	ldbu	r2,-12(fp)
   14928:	e0fffd03 	ldbu	r3,-12(fp)
   1492c:	e13fff17 	ldw	r4,-4(fp)
   14930:	20c7883a 	add	r3,r4,r3
   14934:	18c00204 	addi	r3,r3,8
   14938:	18c000c3 	ldbu	r3,3(r3)
   1493c:	1809883a 	mov	r4,r3
   14940:	e0fffe17 	ldw	r3,-8(fp)
   14944:	18c00d43 	ldbu	r3,53(r3)
   14948:	00c6303a 	nor	r3,zero,r3
   1494c:	20c6703a 	and	r3,r4,r3
   14950:	1809883a 	mov	r4,r3
   14954:	e0ffff17 	ldw	r3,-4(fp)
   14958:	1885883a 	add	r2,r3,r2
   1495c:	10800204 	addi	r2,r2,8
   14960:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   14964:	e0bffd03 	ldbu	r2,-12(fp)
   14968:	e0ffff17 	ldw	r3,-4(fp)
   1496c:	1885883a 	add	r2,r3,r2
   14970:	10800204 	addi	r2,r2,8
   14974:	108000c3 	ldbu	r2,3(r2)
   14978:	10803fcc 	andi	r2,r2,255
   1497c:	10000a1e 	bne	r2,zero,149a8 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   14980:	e0bfff17 	ldw	r2,-4(fp)
   14984:	10800283 	ldbu	r2,10(r2)
   14988:	1007883a 	mov	r3,r2
   1498c:	e0bffe17 	ldw	r2,-8(fp)
   14990:	10800d83 	ldbu	r2,54(r2)
   14994:	0084303a 	nor	r2,zero,r2
   14998:	1884703a 	and	r2,r3,r2
   1499c:	1007883a 	mov	r3,r2
   149a0:	e0bfff17 	ldw	r2,-4(fp)
   149a4:	10c00285 	stb	r3,10(r2)
    }
}
   149a8:	e037883a 	mov	sp,fp
   149ac:	df000017 	ldw	fp,0(sp)
   149b0:	dec00104 	addi	sp,sp,4
   149b4:	f800283a 	ret

000149b8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   149b8:	defffa04 	addi	sp,sp,-24
   149bc:	df000515 	stw	fp,20(sp)
   149c0:	df000504 	addi	fp,sp,20
   149c4:	e13ffe15 	stw	r4,-8(fp)
   149c8:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   149cc:	e0bffe17 	ldw	r2,-8(fp)
   149d0:	10800d03 	ldbu	r2,52(r2)
   149d4:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   149d8:	e0bffe17 	ldw	r2,-8(fp)
   149dc:	10800d83 	ldbu	r2,54(r2)
   149e0:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   149e4:	e0bffe17 	ldw	r2,-8(fp)
   149e8:	10800d43 	ldbu	r2,53(r2)
   149ec:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   149f0:	e0bfff17 	ldw	r2,-4(fp)
   149f4:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   149f8:	e0bffb17 	ldw	r2,-20(fp)
   149fc:	10800017 	ldw	r2,0(r2)
   14a00:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   14a04:	00002506 	br	14a9c <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   14a08:	e0bffd03 	ldbu	r2,-12(fp)
   14a0c:	e0fffd03 	ldbu	r3,-12(fp)
   14a10:	e13ffc17 	ldw	r4,-16(fp)
   14a14:	20c7883a 	add	r3,r4,r3
   14a18:	18c00204 	addi	r3,r3,8
   14a1c:	18c000c3 	ldbu	r3,3(r3)
   14a20:	1809883a 	mov	r4,r3
   14a24:	e0fffd83 	ldbu	r3,-10(fp)
   14a28:	00c6303a 	nor	r3,zero,r3
   14a2c:	20c6703a 	and	r3,r4,r3
   14a30:	1809883a 	mov	r4,r3
   14a34:	e0fffc17 	ldw	r3,-16(fp)
   14a38:	1885883a 	add	r2,r3,r2
   14a3c:	10800204 	addi	r2,r2,8
   14a40:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   14a44:	e0bffd03 	ldbu	r2,-12(fp)
   14a48:	e0fffc17 	ldw	r3,-16(fp)
   14a4c:	1885883a 	add	r2,r3,r2
   14a50:	10800204 	addi	r2,r2,8
   14a54:	108000c3 	ldbu	r2,3(r2)
   14a58:	10803fcc 	andi	r2,r2,255
   14a5c:	1000091e 	bne	r2,zero,14a84 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   14a60:	e0bffc17 	ldw	r2,-16(fp)
   14a64:	10800283 	ldbu	r2,10(r2)
   14a68:	1007883a 	mov	r3,r2
   14a6c:	e0bffd43 	ldbu	r2,-11(fp)
   14a70:	0084303a 	nor	r2,zero,r2
   14a74:	1884703a 	and	r2,r3,r2
   14a78:	1007883a 	mov	r3,r2
   14a7c:	e0bffc17 	ldw	r2,-16(fp)
   14a80:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   14a84:	e0bffb17 	ldw	r2,-20(fp)
   14a88:	10800104 	addi	r2,r2,4
   14a8c:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   14a90:	e0bffb17 	ldw	r2,-20(fp)
   14a94:	10800017 	ldw	r2,0(r2)
   14a98:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   14a9c:	e0bffc17 	ldw	r2,-16(fp)
   14aa0:	103fd91e 	bne	r2,zero,14a08 <__alt_mem_Flash_flash_data+0xf4014a08>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   14aa4:	e037883a 	mov	sp,fp
   14aa8:	df000017 	ldw	fp,0(sp)
   14aac:	dec00104 	addi	sp,sp,4
   14ab0:	f800283a 	ret

00014ab4 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   14ab4:	defffc04 	addi	sp,sp,-16
   14ab8:	df000315 	stw	fp,12(sp)
   14abc:	df000304 	addi	fp,sp,12
   14ac0:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   14ac4:	e0bfff17 	ldw	r2,-4(fp)
   14ac8:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   14acc:	e0bfff17 	ldw	r2,-4(fp)
   14ad0:	108002c4 	addi	r2,r2,11
   14ad4:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   14ad8:	e03ffe05 	stb	zero,-8(fp)
   14adc:	00000706 	br	14afc <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   14ae0:	e0bffd17 	ldw	r2,-12(fp)
   14ae4:	10c00044 	addi	r3,r2,1
   14ae8:	e0fffd15 	stw	r3,-12(fp)
   14aec:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   14af0:	e0bffe03 	ldbu	r2,-8(fp)
   14af4:	10800044 	addi	r2,r2,1
   14af8:	e0bffe05 	stb	r2,-8(fp)
   14afc:	e0bffe03 	ldbu	r2,-8(fp)
   14b00:	108000f0 	cmpltui	r2,r2,3
   14b04:	103ff61e 	bne	r2,zero,14ae0 <__alt_mem_Flash_flash_data+0xf4014ae0>
        *ptbl++ = 0;
    }
}
   14b08:	e037883a 	mov	sp,fp
   14b0c:	df000017 	ldw	fp,0(sp)
   14b10:	dec00104 	addi	sp,sp,4
   14b14:	f800283a 	ret

00014b18 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   14b18:	defffb04 	addi	sp,sp,-20
   14b1c:	dfc00415 	stw	ra,16(sp)
   14b20:	df000315 	stw	fp,12(sp)
   14b24:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   14b28:	01000134 	movhi	r4,4
   14b2c:	211a5b04 	addi	r4,r4,26988
   14b30:	0142d004 	movi	r5,2880
   14b34:	0014e780 	call	14e78 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   14b38:	00800134 	movhi	r2,4
   14b3c:	109a5b04 	addi	r2,r2,26988
   14b40:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   14b44:	00800134 	movhi	r2,4
   14b48:	109a6704 	addi	r2,r2,27036
   14b4c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   14b50:	e03ffd0d 	sth	zero,-12(fp)
   14b54:	00001306 	br	14ba4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   14b58:	e0bffe17 	ldw	r2,-8(fp)
   14b5c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   14b60:	e0bffe17 	ldw	r2,-8(fp)
   14b64:	e0ffff17 	ldw	r3,-4(fp)
   14b68:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   14b6c:	e0bffe17 	ldw	r2,-8(fp)
   14b70:	00c00fc4 	movi	r3,63
   14b74:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   14b78:	e0bffe17 	ldw	r2,-8(fp)
   14b7c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   14b80:	e0bffe17 	ldw	r2,-8(fp)
   14b84:	10800c04 	addi	r2,r2,48
   14b88:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   14b8c:	e0bfff17 	ldw	r2,-4(fp)
   14b90:	10800c04 	addi	r2,r2,48
   14b94:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   14b98:	e0bffd0b 	ldhu	r2,-12(fp)
   14b9c:	10800044 	addi	r2,r2,1
   14ba0:	e0bffd0d 	sth	r2,-12(fp)
   14ba4:	e0bffd0b 	ldhu	r2,-12(fp)
   14ba8:	10800ef0 	cmpltui	r2,r2,59
   14bac:	103fea1e 	bne	r2,zero,14b58 <__alt_mem_Flash_flash_data+0xf4014b58>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   14bb0:	e0bffe17 	ldw	r2,-8(fp)
   14bb4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   14bb8:	e0bffe17 	ldw	r2,-8(fp)
   14bbc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   14bc0:	e0bffe17 	ldw	r2,-8(fp)
   14bc4:	00c00fc4 	movi	r3,63
   14bc8:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   14bcc:	e0bffe17 	ldw	r2,-8(fp)
   14bd0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   14bd4:	00800134 	movhi	r2,4
   14bd8:	109a5b04 	addi	r2,r2,26988
   14bdc:	d0a84015 	stw	r2,-24320(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   14be0:	e037883a 	mov	sp,fp
   14be4:	dfc00117 	ldw	ra,4(sp)
   14be8:	df000017 	ldw	fp,0(sp)
   14bec:	dec00204 	addi	sp,sp,8
   14bf0:	f800283a 	ret

00014bf4 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   14bf4:	deffff04 	addi	sp,sp,-4
   14bf8:	df000015 	stw	fp,0(sp)
   14bfc:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   14c00:	d0284315 	stw	zero,-24308(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   14c04:	d0284105 	stb	zero,-24316(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   14c08:	d0283305 	stb	zero,-24372(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   14c0c:	d0283b45 	stb	zero,-24339(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   14c10:	d0283345 	stb	zero,-24371(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   14c14:	d0283815 	stw	zero,-24352(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   14c18:	d0283415 	stw	zero,-24368(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   14c1c:	d0284615 	stw	zero,-24296(gp)
    OSIdleCtrMax  = 0L;
   14c20:	d0283915 	stw	zero,-24348(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   14c24:	d0284505 	stb	zero,-24300(gp)
#endif
}
   14c28:	e037883a 	mov	sp,fp
   14c2c:	df000017 	ldw	fp,0(sp)
   14c30:	dec00104 	addi	sp,sp,4
   14c34:	f800283a 	ret

00014c38 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   14c38:	defffd04 	addi	sp,sp,-12
   14c3c:	df000215 	stw	fp,8(sp)
   14c40:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   14c44:	d0283f05 	stb	zero,-24324(gp)
    prdytbl       = &OSRdyTbl[0];
   14c48:	d0a83f44 	addi	r2,gp,-24323
   14c4c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   14c50:	e03ffe05 	stb	zero,-8(fp)
   14c54:	00000706 	br	14c74 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   14c58:	e0bfff17 	ldw	r2,-4(fp)
   14c5c:	10c00044 	addi	r3,r2,1
   14c60:	e0ffff15 	stw	r3,-4(fp)
   14c64:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   14c68:	e0bffe03 	ldbu	r2,-8(fp)
   14c6c:	10800044 	addi	r2,r2,1
   14c70:	e0bffe05 	stb	r2,-8(fp)
   14c74:	e0bffe03 	ldbu	r2,-8(fp)
   14c78:	108000f0 	cmpltui	r2,r2,3
   14c7c:	103ff61e 	bne	r2,zero,14c58 <__alt_mem_Flash_flash_data+0xf4014c58>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   14c80:	d0283545 	stb	zero,-24363(gp)
    OSPrioHighRdy = 0;
   14c84:	d0283505 	stb	zero,-24364(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   14c88:	d0283d15 	stw	zero,-24332(gp)
    OSTCBCur      = (OS_TCB *)0;
   14c8c:	d0284215 	stw	zero,-24312(gp)
}
   14c90:	e037883a 	mov	sp,fp
   14c94:	df000017 	ldw	fp,0(sp)
   14c98:	dec00104 	addi	sp,sp,4
   14c9c:	f800283a 	ret

00014ca0 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   14ca0:	defff804 	addi	sp,sp,-32
   14ca4:	dfc00715 	stw	ra,28(sp)
   14ca8:	df000615 	stw	fp,24(sp)
   14cac:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   14cb0:	00bfffd4 	movui	r2,65535
   14cb4:	d8800015 	stw	r2,0(sp)
   14cb8:	00800134 	movhi	r2,4
   14cbc:	10985b04 	addi	r2,r2,24940
   14cc0:	d8800115 	stw	r2,4(sp)
   14cc4:	00808004 	movi	r2,512
   14cc8:	d8800215 	stw	r2,8(sp)
   14ccc:	d8000315 	stw	zero,12(sp)
   14cd0:	008000c4 	movi	r2,3
   14cd4:	d8800415 	stw	r2,16(sp)
   14cd8:	01000074 	movhi	r4,1
   14cdc:	21144c04 	addi	r4,r4,20784
   14ce0:	000b883a 	mov	r5,zero
   14ce4:	01800134 	movhi	r6,4
   14ce8:	319a5a04 	addi	r6,r6,26984
   14cec:	01c00504 	movi	r7,20
   14cf0:	001a6cc0 	call	1a6cc <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   14cf4:	01000504 	movi	r4,20
   14cf8:	014000b4 	movhi	r5,2
   14cfc:	29418904 	addi	r5,r5,1572
   14d00:	e1bfff04 	addi	r6,fp,-4
   14d04:	001af980 	call	1af98 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   14d08:	e037883a 	mov	sp,fp
   14d0c:	dfc00117 	ldw	ra,4(sp)
   14d10:	df000017 	ldw	fp,0(sp)
   14d14:	dec00204 	addi	sp,sp,8
   14d18:	f800283a 	ret

00014d1c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   14d1c:	defff804 	addi	sp,sp,-32
   14d20:	dfc00715 	stw	ra,28(sp)
   14d24:	df000615 	stw	fp,24(sp)
   14d28:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   14d2c:	00bfff94 	movui	r2,65534
   14d30:	d8800015 	stw	r2,0(sp)
   14d34:	00800134 	movhi	r2,4
   14d38:	1095e304 	addi	r2,r2,22412
   14d3c:	d8800115 	stw	r2,4(sp)
   14d40:	00808004 	movi	r2,512
   14d44:	d8800215 	stw	r2,8(sp)
   14d48:	d8000315 	stw	zero,12(sp)
   14d4c:	008000c4 	movi	r2,3
   14d50:	d8800415 	stw	r2,16(sp)
   14d54:	01000074 	movhi	r4,1
   14d58:	21146304 	addi	r4,r4,20876
   14d5c:	000b883a 	mov	r5,zero
   14d60:	01800134 	movhi	r6,4
   14d64:	3197e204 	addi	r6,r6,24456
   14d68:	01c004c4 	movi	r7,19
   14d6c:	001a6cc0 	call	1a6cc <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   14d70:	010004c4 	movi	r4,19
   14d74:	014000b4 	movhi	r5,2
   14d78:	29418d04 	addi	r5,r5,1588
   14d7c:	e1bfff04 	addi	r6,fp,-4
   14d80:	001af980 	call	1af98 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   14d84:	e037883a 	mov	sp,fp
   14d88:	dfc00117 	ldw	ra,4(sp)
   14d8c:	df000017 	ldw	fp,0(sp)
   14d90:	dec00204 	addi	sp,sp,8
   14d94:	f800283a 	ret

00014d98 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   14d98:	defffb04 	addi	sp,sp,-20
   14d9c:	dfc00415 	stw	ra,16(sp)
   14da0:	df000315 	stw	fp,12(sp)
   14da4:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   14da8:	01000134 	movhi	r4,4
   14dac:	211d2b04 	addi	r4,r4,29868
   14db0:	01414404 	movi	r5,1296
   14db4:	0014e780 	call	14e78 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   14db8:	01000134 	movhi	r4,4
   14dbc:	211e6f04 	addi	r4,r4,31164
   14dc0:	01401504 	movi	r5,84
   14dc4:	0014e780 	call	14e78 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   14dc8:	00800134 	movhi	r2,4
   14dcc:	109d2b04 	addi	r2,r2,29868
   14dd0:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   14dd4:	00800134 	movhi	r2,4
   14dd8:	109d4604 	addi	r2,r2,29976
   14ddc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   14de0:	e03ffd05 	stb	zero,-12(fp)
   14de4:	00001106 	br	14e2c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   14de8:	e0bffe17 	ldw	r2,-8(fp)
   14dec:	e0ffff17 	ldw	r3,-4(fp)
   14df0:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   14df4:	e0bffe17 	ldw	r2,-8(fp)
   14df8:	00c00fc4 	movi	r3,63
   14dfc:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   14e00:	e0bffe17 	ldw	r2,-8(fp)
   14e04:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   14e08:	e0bffe17 	ldw	r2,-8(fp)
   14e0c:	10801b04 	addi	r2,r2,108
   14e10:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   14e14:	e0bfff17 	ldw	r2,-4(fp)
   14e18:	10801b04 	addi	r2,r2,108
   14e1c:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   14e20:	e0bffd03 	ldbu	r2,-12(fp)
   14e24:	10800044 	addi	r2,r2,1
   14e28:	e0bffd05 	stb	r2,-12(fp)
   14e2c:	e0bffd03 	ldbu	r2,-12(fp)
   14e30:	108002f0 	cmpltui	r2,r2,11
   14e34:	103fec1e 	bne	r2,zero,14de8 <__alt_mem_Flash_flash_data+0xf4014de8>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   14e38:	e0bffe17 	ldw	r2,-8(fp)
   14e3c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   14e40:	e0bffe17 	ldw	r2,-8(fp)
   14e44:	00c00fc4 	movi	r3,63
   14e48:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   14e4c:	e0bffe17 	ldw	r2,-8(fp)
   14e50:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   14e54:	d0283615 	stw	zero,-24360(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   14e58:	00800134 	movhi	r2,4
   14e5c:	109d2b04 	addi	r2,r2,29868
   14e60:	d0a83a15 	stw	r2,-24344(gp)
}
   14e64:	e037883a 	mov	sp,fp
   14e68:	dfc00117 	ldw	ra,4(sp)
   14e6c:	df000017 	ldw	fp,0(sp)
   14e70:	dec00204 	addi	sp,sp,8
   14e74:	f800283a 	ret

00014e78 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   14e78:	defffd04 	addi	sp,sp,-12
   14e7c:	df000215 	stw	fp,8(sp)
   14e80:	df000204 	addi	fp,sp,8
   14e84:	e13ffe15 	stw	r4,-8(fp)
   14e88:	2805883a 	mov	r2,r5
   14e8c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   14e90:	00000706 	br	14eb0 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   14e94:	e0bffe17 	ldw	r2,-8(fp)
   14e98:	10c00044 	addi	r3,r2,1
   14e9c:	e0fffe15 	stw	r3,-8(fp)
   14ea0:	10000005 	stb	zero,0(r2)
        size--;
   14ea4:	e0bfff0b 	ldhu	r2,-4(fp)
   14ea8:	10bfffc4 	addi	r2,r2,-1
   14eac:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   14eb0:	e0bfff0b 	ldhu	r2,-4(fp)
   14eb4:	103ff71e 	bne	r2,zero,14e94 <__alt_mem_Flash_flash_data+0xf4014e94>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   14eb8:	e037883a 	mov	sp,fp
   14ebc:	df000017 	ldw	fp,0(sp)
   14ec0:	dec00104 	addi	sp,sp,4
   14ec4:	f800283a 	ret

00014ec8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   14ec8:	defffc04 	addi	sp,sp,-16
   14ecc:	df000315 	stw	fp,12(sp)
   14ed0:	df000304 	addi	fp,sp,12
   14ed4:	e13ffd15 	stw	r4,-12(fp)
   14ed8:	e17ffe15 	stw	r5,-8(fp)
   14edc:	3005883a 	mov	r2,r6
   14ee0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   14ee4:	00000b06 	br	14f14 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   14ee8:	e0bffd17 	ldw	r2,-12(fp)
   14eec:	10c00044 	addi	r3,r2,1
   14ef0:	e0fffd15 	stw	r3,-12(fp)
   14ef4:	e0fffe17 	ldw	r3,-8(fp)
   14ef8:	19000044 	addi	r4,r3,1
   14efc:	e13ffe15 	stw	r4,-8(fp)
   14f00:	18c00003 	ldbu	r3,0(r3)
   14f04:	10c00005 	stb	r3,0(r2)
        size--;
   14f08:	e0bfff0b 	ldhu	r2,-4(fp)
   14f0c:	10bfffc4 	addi	r2,r2,-1
   14f10:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   14f14:	e0bfff0b 	ldhu	r2,-4(fp)
   14f18:	103ff31e 	bne	r2,zero,14ee8 <__alt_mem_Flash_flash_data+0xf4014ee8>
        *pdest++ = *psrc++;
        size--;
    }
}
   14f1c:	e037883a 	mov	sp,fp
   14f20:	df000017 	ldw	fp,0(sp)
   14f24:	dec00104 	addi	sp,sp,4
   14f28:	f800283a 	ret

00014f2c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   14f2c:	defffb04 	addi	sp,sp,-20
   14f30:	dfc00415 	stw	ra,16(sp)
   14f34:	df000315 	stw	fp,12(sp)
   14f38:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14f3c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f40:	0005303a 	rdctl	r2,status
   14f44:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f48:	e0fffe17 	ldw	r3,-8(fp)
   14f4c:	00bfff84 	movi	r2,-2
   14f50:	1884703a 	and	r2,r3,r2
   14f54:	1001703a 	wrctl	status,r2
  
  return context;
   14f58:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   14f5c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   14f60:	d0a84103 	ldbu	r2,-24316(gp)
   14f64:	10803fcc 	andi	r2,r2,255
   14f68:	10001a1e 	bne	r2,zero,14fd4 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   14f6c:	d0a83303 	ldbu	r2,-24372(gp)
   14f70:	10803fcc 	andi	r2,r2,255
   14f74:	1000171e 	bne	r2,zero,14fd4 <OS_Sched+0xa8>
            OS_SchedNew();
   14f78:	0014ff80 	call	14ff8 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   14f7c:	d0e83503 	ldbu	r3,-24364(gp)
   14f80:	d0a83543 	ldbu	r2,-24363(gp)
   14f84:	18c03fcc 	andi	r3,r3,255
   14f88:	10803fcc 	andi	r2,r2,255
   14f8c:	18801126 	beq	r3,r2,14fd4 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   14f90:	d0a83503 	ldbu	r2,-24364(gp)
   14f94:	10c03fcc 	andi	r3,r2,255
   14f98:	00800134 	movhi	r2,4
   14f9c:	109e6f04 	addi	r2,r2,31164
   14fa0:	18c7883a 	add	r3,r3,r3
   14fa4:	18c7883a 	add	r3,r3,r3
   14fa8:	10c5883a 	add	r2,r2,r3
   14fac:	10800017 	ldw	r2,0(r2)
   14fb0:	d0a83d15 	stw	r2,-24332(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   14fb4:	d0a83d17 	ldw	r2,-24332(gp)
   14fb8:	10c00e17 	ldw	r3,56(r2)
   14fbc:	18c00044 	addi	r3,r3,1
   14fc0:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   14fc4:	d0a83817 	ldw	r2,-24352(gp)
   14fc8:	10800044 	addi	r2,r2,1
   14fcc:	d0a83815 	stw	r2,-24352(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   14fd0:	001f1340 	call	1f134 <OSCtxSw>
   14fd4:	e0bffd17 	ldw	r2,-12(fp)
   14fd8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14fdc:	e0bfff17 	ldw	r2,-4(fp)
   14fe0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   14fe4:	e037883a 	mov	sp,fp
   14fe8:	dfc00117 	ldw	ra,4(sp)
   14fec:	df000017 	ldw	fp,0(sp)
   14ff0:	dec00204 	addi	sp,sp,8
   14ff4:	f800283a 	ret

00014ff8 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   14ff8:	defffe04 	addi	sp,sp,-8
   14ffc:	df000115 	stw	fp,4(sp)
   15000:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   15004:	d0a83f03 	ldbu	r2,-24324(gp)
   15008:	10c03fcc 	andi	r3,r2,255
   1500c:	008000b4 	movhi	r2,2
   15010:	10814904 	addi	r2,r2,1316
   15014:	10c5883a 	add	r2,r2,r3
   15018:	10800003 	ldbu	r2,0(r2)
   1501c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   15020:	e0bfff03 	ldbu	r2,-4(fp)
   15024:	100490fa 	slli	r2,r2,3
   15028:	1009883a 	mov	r4,r2
   1502c:	e0ffff03 	ldbu	r3,-4(fp)
   15030:	d0a83f44 	addi	r2,gp,-24323
   15034:	1885883a 	add	r2,r3,r2
   15038:	10800003 	ldbu	r2,0(r2)
   1503c:	10c03fcc 	andi	r3,r2,255
   15040:	008000b4 	movhi	r2,2
   15044:	10814904 	addi	r2,r2,1316
   15048:	10c5883a 	add	r2,r2,r3
   1504c:	10800003 	ldbu	r2,0(r2)
   15050:	2085883a 	add	r2,r4,r2
   15054:	d0a83505 	stb	r2,-24364(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   15058:	e037883a 	mov	sp,fp
   1505c:	df000017 	ldw	fp,0(sp)
   15060:	dec00104 	addi	sp,sp,4
   15064:	f800283a 	ret

00015068 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   15068:	defffc04 	addi	sp,sp,-16
   1506c:	df000315 	stw	fp,12(sp)
   15070:	df000304 	addi	fp,sp,12
   15074:	e13ffe15 	stw	r4,-8(fp)
   15078:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   1507c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   15080:	00000b06 	br	150b0 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   15084:	e0bffe17 	ldw	r2,-8(fp)
   15088:	10c00044 	addi	r3,r2,1
   1508c:	e0fffe15 	stw	r3,-8(fp)
   15090:	e0ffff17 	ldw	r3,-4(fp)
   15094:	19000044 	addi	r4,r3,1
   15098:	e13fff15 	stw	r4,-4(fp)
   1509c:	18c00003 	ldbu	r3,0(r3)
   150a0:	10c00005 	stb	r3,0(r2)
        len++;
   150a4:	e0bffd03 	ldbu	r2,-12(fp)
   150a8:	10800044 	addi	r2,r2,1
   150ac:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   150b0:	e0bfff17 	ldw	r2,-4(fp)
   150b4:	10800003 	ldbu	r2,0(r2)
   150b8:	10803fcc 	andi	r2,r2,255
   150bc:	103ff11e 	bne	r2,zero,15084 <__alt_mem_Flash_flash_data+0xf4015084>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   150c0:	e0bffe17 	ldw	r2,-8(fp)
   150c4:	10000005 	stb	zero,0(r2)
    return (len);
   150c8:	e0bffd03 	ldbu	r2,-12(fp)
}
   150cc:	e037883a 	mov	sp,fp
   150d0:	df000017 	ldw	fp,0(sp)
   150d4:	dec00104 	addi	sp,sp,4
   150d8:	f800283a 	ret

000150dc <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   150dc:	defffd04 	addi	sp,sp,-12
   150e0:	df000215 	stw	fp,8(sp)
   150e4:	df000204 	addi	fp,sp,8
   150e8:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   150ec:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   150f0:	00000606 	br	1510c <OS_StrLen+0x30>
        psrc++;
   150f4:	e0bfff17 	ldw	r2,-4(fp)
   150f8:	10800044 	addi	r2,r2,1
   150fc:	e0bfff15 	stw	r2,-4(fp)
        len++;
   15100:	e0bffe03 	ldbu	r2,-8(fp)
   15104:	10800044 	addi	r2,r2,1
   15108:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   1510c:	e0bfff17 	ldw	r2,-4(fp)
   15110:	10800003 	ldbu	r2,0(r2)
   15114:	10803fcc 	andi	r2,r2,255
   15118:	103ff61e 	bne	r2,zero,150f4 <__alt_mem_Flash_flash_data+0xf40150f4>
        psrc++;
        len++;
    }
    return (len);
   1511c:	e0bffe03 	ldbu	r2,-8(fp)
}
   15120:	e037883a 	mov	sp,fp
   15124:	df000017 	ldw	fp,0(sp)
   15128:	dec00104 	addi	sp,sp,4
   1512c:	f800283a 	ret

00015130 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   15130:	defffa04 	addi	sp,sp,-24
   15134:	dfc00515 	stw	ra,20(sp)
   15138:	df000415 	stw	fp,16(sp)
   1513c:	df000404 	addi	fp,sp,16
   15140:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15144:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15148:	0005303a 	rdctl	r2,status
   1514c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15150:	e0fffd17 	ldw	r3,-12(fp)
   15154:	00bfff84 	movi	r2,-2
   15158:	1884703a 	and	r2,r3,r2
   1515c:	1001703a 	wrctl	status,r2
  
  return context;
   15160:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   15164:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   15168:	d0a83417 	ldw	r2,-24368(gp)
   1516c:	10800044 	addi	r2,r2,1
   15170:	d0a83415 	stw	r2,-24368(gp)
   15174:	e0bffc17 	ldw	r2,-16(fp)
   15178:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1517c:	e0bffe17 	ldw	r2,-8(fp)
   15180:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   15184:	001f42c0 	call	1f42c <OSTaskIdleHook>
    }
   15188:	003fef06 	br	15148 <__alt_mem_Flash_flash_data+0xf4015148>

0001518c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   1518c:	defff804 	addi	sp,sp,-32
   15190:	dfc00715 	stw	ra,28(sp)
   15194:	df000615 	stw	fp,24(sp)
   15198:	dc400515 	stw	r17,20(sp)
   1519c:	dc000415 	stw	r16,16(sp)
   151a0:	df000604 	addi	fp,sp,24
   151a4:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   151a8:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   151ac:	00000206 	br	151b8 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   151b0:	01000044 	movi	r4,1
   151b4:	001b8c40 	call	1b8c4 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   151b8:	d0a84503 	ldbu	r2,-24300(gp)
   151bc:	10803fcc 	andi	r2,r2,255
   151c0:	103ffb26 	beq	r2,zero,151b0 <__alt_mem_Flash_flash_data+0xf40151b0>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   151c4:	d0e83917 	ldw	r3,-24348(gp)
   151c8:	00947b34 	movhi	r2,20972
   151cc:	10a147c4 	addi	r2,r2,-31457
   151d0:	1888383a 	mulxuu	r4,r3,r2
   151d4:	1885383a 	mul	r2,r3,r2
   151d8:	1021883a 	mov	r16,r2
   151dc:	2023883a 	mov	r17,r4
   151e0:	8804d17a 	srli	r2,r17,5
   151e4:	d0a83915 	stw	r2,-24348(gp)
    if (OSIdleCtrMax == 0L) {
   151e8:	d0a83917 	ldw	r2,-24348(gp)
   151ec:	1000031e 	bne	r2,zero,151fc <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   151f0:	d0283b05 	stb	zero,-24340(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   151f4:	01003fc4 	movi	r4,255
   151f8:	001b5180 	call	1b518 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   151fc:	0005303a 	rdctl	r2,status
   15200:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15204:	e0fffb17 	ldw	r3,-20(fp)
   15208:	00bfff84 	movi	r2,-2
   1520c:	1884703a 	and	r2,r3,r2
   15210:	1001703a 	wrctl	status,r2
  
  return context;
   15214:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   15218:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   1521c:	d0a83417 	ldw	r2,-24368(gp)
   15220:	d0a84615 	stw	r2,-24296(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   15224:	d0283415 	stw	zero,-24368(gp)
   15228:	e0bffa17 	ldw	r2,-24(fp)
   1522c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15230:	e0bffc17 	ldw	r2,-16(fp)
   15234:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   15238:	d0e84617 	ldw	r3,-24296(gp)
   1523c:	d0a83917 	ldw	r2,-24348(gp)
   15240:	1885203a 	divu	r2,r3,r2
   15244:	1007883a 	mov	r3,r2
   15248:	00801904 	movi	r2,100
   1524c:	10c5c83a 	sub	r2,r2,r3
   15250:	d0a83b05 	stb	r2,-24340(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   15254:	001f3bc0 	call	1f3bc <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   15258:	00152680 	call	15268 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   1525c:	0009883a 	mov	r4,zero
   15260:	001b8c40 	call	1b8c4 <OSTimeDly>
    }
   15264:	003fe506 	br	151fc <__alt_mem_Flash_flash_data+0xf40151fc>

00015268 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   15268:	defffa04 	addi	sp,sp,-24
   1526c:	dfc00515 	stw	ra,20(sp)
   15270:	df000415 	stw	fp,16(sp)
   15274:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   15278:	e03ffc05 	stb	zero,-16(fp)
   1527c:	00002406 	br	15310 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   15280:	e0fffc03 	ldbu	r3,-16(fp)
   15284:	e0bffe04 	addi	r2,fp,-8
   15288:	1809883a 	mov	r4,r3
   1528c:	100b883a 	mov	r5,r2
   15290:	001b3500 	call	1b350 <OSTaskStkChk>
   15294:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   15298:	e0bffc43 	ldbu	r2,-15(fp)
   1529c:	1000191e 	bne	r2,zero,15304 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   152a0:	e0fffc03 	ldbu	r3,-16(fp)
   152a4:	00800134 	movhi	r2,4
   152a8:	109e6f04 	addi	r2,r2,31164
   152ac:	18c7883a 	add	r3,r3,r3
   152b0:	18c7883a 	add	r3,r3,r3
   152b4:	10c5883a 	add	r2,r2,r3
   152b8:	10800017 	ldw	r2,0(r2)
   152bc:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   152c0:	e0bffd17 	ldw	r2,-12(fp)
   152c4:	10000f26 	beq	r2,zero,15304 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   152c8:	e0bffd17 	ldw	r2,-12(fp)
   152cc:	10800060 	cmpeqi	r2,r2,1
   152d0:	10000c1e 	bne	r2,zero,15304 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   152d4:	e0bffd17 	ldw	r2,-12(fp)
   152d8:	10c00217 	ldw	r3,8(r2)
   152dc:	e0bffd17 	ldw	r2,-12(fp)
   152e0:	10800317 	ldw	r2,12(r2)
   152e4:	1085883a 	add	r2,r2,r2
   152e8:	1085883a 	add	r2,r2,r2
   152ec:	1887883a 	add	r3,r3,r2
   152f0:	e0bffd17 	ldw	r2,-12(fp)
   152f4:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   152f8:	e0ffff17 	ldw	r3,-4(fp)
   152fc:	e0bffd17 	ldw	r2,-12(fp)
   15300:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   15304:	e0bffc03 	ldbu	r2,-16(fp)
   15308:	10800044 	addi	r2,r2,1
   1530c:	e0bffc05 	stb	r2,-16(fp)
   15310:	e0bffc03 	ldbu	r2,-16(fp)
   15314:	10800570 	cmpltui	r2,r2,21
   15318:	103fd91e 	bne	r2,zero,15280 <__alt_mem_Flash_flash_data+0xf4015280>
#endif
                }
            }
        }
    }
}
   1531c:	e037883a 	mov	sp,fp
   15320:	dfc00117 	ldw	ra,4(sp)
   15324:	df000017 	ldw	fp,0(sp)
   15328:	dec00204 	addi	sp,sp,8
   1532c:	f800283a 	ret

00015330 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   15330:	defff204 	addi	sp,sp,-56
   15334:	dfc00d15 	stw	ra,52(sp)
   15338:	df000c15 	stw	fp,48(sp)
   1533c:	df000c04 	addi	fp,sp,48
   15340:	e17ffc15 	stw	r5,-16(fp)
   15344:	e1bffd15 	stw	r6,-12(fp)
   15348:	3807883a 	mov	r3,r7
   1534c:	e0800417 	ldw	r2,16(fp)
   15350:	e13ffb05 	stb	r4,-20(fp)
   15354:	e0fffe0d 	sth	r3,-8(fp)
   15358:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1535c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15360:	0005303a 	rdctl	r2,status
   15364:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15368:	e0fff617 	ldw	r3,-40(fp)
   1536c:	00bfff84 	movi	r2,-2
   15370:	1884703a 	and	r2,r3,r2
   15374:	1001703a 	wrctl	status,r2
  
  return context;
   15378:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   1537c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   15380:	d0a83a17 	ldw	r2,-24344(gp)
   15384:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   15388:	e0bff517 	ldw	r2,-44(fp)
   1538c:	10009326 	beq	r2,zero,155dc <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   15390:	e0bff517 	ldw	r2,-44(fp)
   15394:	10800517 	ldw	r2,20(r2)
   15398:	d0a83a15 	stw	r2,-24344(gp)
   1539c:	e0bff417 	ldw	r2,-48(fp)
   153a0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   153a4:	e0bff717 	ldw	r2,-36(fp)
   153a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   153ac:	e0bff517 	ldw	r2,-44(fp)
   153b0:	e0fffc17 	ldw	r3,-16(fp)
   153b4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   153b8:	e0bff517 	ldw	r2,-44(fp)
   153bc:	e0fffb03 	ldbu	r3,-20(fp)
   153c0:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   153c4:	e0bff517 	ldw	r2,-44(fp)
   153c8:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   153cc:	e0bff517 	ldw	r2,-44(fp)
   153d0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   153d4:	e0bff517 	ldw	r2,-44(fp)
   153d8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   153dc:	e0bff517 	ldw	r2,-44(fp)
   153e0:	e0c00317 	ldw	r3,12(fp)
   153e4:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   153e8:	e0bff517 	ldw	r2,-44(fp)
   153ec:	e0c00217 	ldw	r3,8(fp)
   153f0:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   153f4:	e0bff517 	ldw	r2,-44(fp)
   153f8:	e0fffd17 	ldw	r3,-12(fp)
   153fc:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   15400:	e0bff517 	ldw	r2,-44(fp)
   15404:	e0ffff0b 	ldhu	r3,-4(fp)
   15408:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   1540c:	e0bff517 	ldw	r2,-44(fp)
   15410:	e0fffe0b 	ldhu	r3,-8(fp)
   15414:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   15418:	e0bff517 	ldw	r2,-44(fp)
   1541c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   15420:	e0bffb03 	ldbu	r2,-20(fp)
   15424:	1004d0fa 	srli	r2,r2,3
   15428:	1007883a 	mov	r3,r2
   1542c:	e0bff517 	ldw	r2,-44(fp)
   15430:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   15434:	e0bffb03 	ldbu	r2,-20(fp)
   15438:	108001cc 	andi	r2,r2,7
   1543c:	1007883a 	mov	r3,r2
   15440:	e0bff517 	ldw	r2,-44(fp)
   15444:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   15448:	e0bff517 	ldw	r2,-44(fp)
   1544c:	10800d03 	ldbu	r2,52(r2)
   15450:	10803fcc 	andi	r2,r2,255
   15454:	00c00044 	movi	r3,1
   15458:	1884983a 	sll	r2,r3,r2
   1545c:	1007883a 	mov	r3,r2
   15460:	e0bff517 	ldw	r2,-44(fp)
   15464:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   15468:	e0bff517 	ldw	r2,-44(fp)
   1546c:	10800cc3 	ldbu	r2,51(r2)
   15470:	10803fcc 	andi	r2,r2,255
   15474:	00c00044 	movi	r3,1
   15478:	1884983a 	sll	r2,r3,r2
   1547c:	1007883a 	mov	r3,r2
   15480:	e0bff517 	ldw	r2,-44(fp)
   15484:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   15488:	e0bff517 	ldw	r2,-44(fp)
   1548c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   15490:	e0bff517 	ldw	r2,-44(fp)
   15494:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   15498:	e0bff517 	ldw	r2,-44(fp)
   1549c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   154a0:	e0bff517 	ldw	r2,-44(fp)
   154a4:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   154a8:	e0bff517 	ldw	r2,-44(fp)
   154ac:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   154b0:	e0bff517 	ldw	r2,-44(fp)
   154b4:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   154b8:	e0bff517 	ldw	r2,-44(fp)
   154bc:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   154c0:	e0bff517 	ldw	r2,-44(fp)
   154c4:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   154c8:	e0bff517 	ldw	r2,-44(fp)
   154cc:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   154d0:	e0bff517 	ldw	r2,-44(fp)
   154d4:	00c00fc4 	movi	r3,63
   154d8:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   154dc:	e0bff517 	ldw	r2,-44(fp)
   154e0:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   154e4:	e13ff517 	ldw	r4,-44(fp)
   154e8:	001f4480 	call	1f448 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   154ec:	e13ff517 	ldw	r4,-44(fp)
   154f0:	001f3600 	call	1f360 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   154f4:	0005303a 	rdctl	r2,status
   154f8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   154fc:	e0fff817 	ldw	r3,-32(fp)
   15500:	00bfff84 	movi	r2,-2
   15504:	1884703a 	and	r2,r3,r2
   15508:	1001703a 	wrctl	status,r2
  
  return context;
   1550c:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   15510:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   15514:	e0fffb03 	ldbu	r3,-20(fp)
   15518:	00800134 	movhi	r2,4
   1551c:	109e6f04 	addi	r2,r2,31164
   15520:	18c7883a 	add	r3,r3,r3
   15524:	18c7883a 	add	r3,r3,r3
   15528:	10c5883a 	add	r2,r2,r3
   1552c:	e0fff517 	ldw	r3,-44(fp)
   15530:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   15534:	d0e83617 	ldw	r3,-24360(gp)
   15538:	e0bff517 	ldw	r2,-44(fp)
   1553c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   15540:	e0bff517 	ldw	r2,-44(fp)
   15544:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   15548:	d0a83617 	ldw	r2,-24360(gp)
   1554c:	10000326 	beq	r2,zero,1555c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   15550:	d0a83617 	ldw	r2,-24360(gp)
   15554:	e0fff517 	ldw	r3,-44(fp)
   15558:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   1555c:	e0bff517 	ldw	r2,-44(fp)
   15560:	d0a83615 	stw	r2,-24360(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   15564:	e0bff517 	ldw	r2,-44(fp)
   15568:	10c00d83 	ldbu	r3,54(r2)
   1556c:	d0a83f03 	ldbu	r2,-24324(gp)
   15570:	1884b03a 	or	r2,r3,r2
   15574:	d0a83f05 	stb	r2,-24324(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15578:	e0bff517 	ldw	r2,-44(fp)
   1557c:	10800d03 	ldbu	r2,52(r2)
   15580:	10c03fcc 	andi	r3,r2,255
   15584:	e0bff517 	ldw	r2,-44(fp)
   15588:	10800d03 	ldbu	r2,52(r2)
   1558c:	11003fcc 	andi	r4,r2,255
   15590:	d0a83f44 	addi	r2,gp,-24323
   15594:	2085883a 	add	r2,r4,r2
   15598:	11000003 	ldbu	r4,0(r2)
   1559c:	e0bff517 	ldw	r2,-44(fp)
   155a0:	10800d43 	ldbu	r2,53(r2)
   155a4:	2084b03a 	or	r2,r4,r2
   155a8:	1009883a 	mov	r4,r2
   155ac:	d0a83f44 	addi	r2,gp,-24323
   155b0:	1885883a 	add	r2,r3,r2
   155b4:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   155b8:	d0a83b43 	ldbu	r2,-24339(gp)
   155bc:	10800044 	addi	r2,r2,1
   155c0:	d0a83b45 	stb	r2,-24339(gp)
   155c4:	e0bff417 	ldw	r2,-48(fp)
   155c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   155cc:	e0bff917 	ldw	r2,-28(fp)
   155d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   155d4:	0005883a 	mov	r2,zero
   155d8:	00000506 	br	155f0 <OS_TCBInit+0x2c0>
   155dc:	e0bff417 	ldw	r2,-48(fp)
   155e0:	e0bffa15 	stw	r2,-24(fp)
   155e4:	e0bffa17 	ldw	r2,-24(fp)
   155e8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   155ec:	00801084 	movi	r2,66
}
   155f0:	e037883a 	mov	sp,fp
   155f4:	dfc00117 	ldw	ra,4(sp)
   155f8:	df000017 	ldw	fp,0(sp)
   155fc:	dec00204 	addi	sp,sp,8
   15600:	f800283a 	ret

00015604 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   15604:	defffe04 	addi	sp,sp,-8
   15608:	df000115 	stw	fp,4(sp)
   1560c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   15610:	d0a01c04 	addi	r2,gp,-32656
   15614:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   15618:	d0a01d04 	addi	r2,gp,-32652
   1561c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   15620:	d0a01e84 	addi	r2,gp,-32646
   15624:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   15628:	d0a01f04 	addi	r2,gp,-32644
   1562c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   15630:	d0a01e04 	addi	r2,gp,-32648
   15634:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   15638:	d0a01f84 	addi	r2,gp,-32642
   1563c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   15640:	d0a02004 	addi	r2,gp,-32640
   15644:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   15648:	d0a02084 	addi	r2,gp,-32638
   1564c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   15650:	d0a02104 	addi	r2,gp,-32636
   15654:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   15658:	d0a02184 	addi	r2,gp,-32634
   1565c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   15660:	d0a02204 	addi	r2,gp,-32632
   15664:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   15668:	d0a02284 	addi	r2,gp,-32630
   1566c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   15670:	d0a02304 	addi	r2,gp,-32628
   15674:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   15678:	d0a02384 	addi	r2,gp,-32626
   1567c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   15680:	d0a02404 	addi	r2,gp,-32624
   15684:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   15688:	d0a02484 	addi	r2,gp,-32622
   1568c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   15690:	d0a02504 	addi	r2,gp,-32620
   15694:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   15698:	d0a02584 	addi	r2,gp,-32618
   1569c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   156a0:	d0a02604 	addi	r2,gp,-32616
   156a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   156a8:	d0a02684 	addi	r2,gp,-32614
   156ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   156b0:	d0a02704 	addi	r2,gp,-32612
   156b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   156b8:	d0a02784 	addi	r2,gp,-32610
   156bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   156c0:	d0a02804 	addi	r2,gp,-32608
   156c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   156c8:	d0a02884 	addi	r2,gp,-32606
   156cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   156d0:	d0a02904 	addi	r2,gp,-32604
   156d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   156d8:	d0a02984 	addi	r2,gp,-32602
   156dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   156e0:	d0a02a04 	addi	r2,gp,-32600
   156e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   156e8:	d0a02a84 	addi	r2,gp,-32598
   156ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   156f0:	d0a02b04 	addi	r2,gp,-32596
   156f4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   156f8:	d0a02b84 	addi	r2,gp,-32594
   156fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   15700:	d0a02c04 	addi	r2,gp,-32592
   15704:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   15708:	d0a02c84 	addi	r2,gp,-32590
   1570c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   15710:	d0a02d04 	addi	r2,gp,-32588
   15714:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   15718:	d0a02d84 	addi	r2,gp,-32586
   1571c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   15720:	d0a02e04 	addi	r2,gp,-32584
   15724:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   15728:	d0a02e84 	addi	r2,gp,-32582
   1572c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   15730:	d0a02f04 	addi	r2,gp,-32580
   15734:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   15738:	d0a02f84 	addi	r2,gp,-32578
   1573c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   15740:	d0a03004 	addi	r2,gp,-32576
   15744:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   15748:	d0a03084 	addi	r2,gp,-32574
   1574c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   15750:	d0a03104 	addi	r2,gp,-32572
   15754:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   15758:	d0a03184 	addi	r2,gp,-32570
   1575c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   15760:	d0a03204 	addi	r2,gp,-32568
   15764:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   15768:	d0a03284 	addi	r2,gp,-32566
   1576c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   15770:	d0a03304 	addi	r2,gp,-32564
   15774:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   15778:	d0a03804 	addi	r2,gp,-32544
   1577c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   15780:	e037883a 	mov	sp,fp
   15784:	df000017 	ldw	fp,0(sp)
   15788:	dec00104 	addi	sp,sp,4
   1578c:	f800283a 	ret

00015790 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   15790:	defff204 	addi	sp,sp,-56
   15794:	df000d15 	stw	fp,52(sp)
   15798:	df000d04 	addi	fp,sp,52
   1579c:	e13ffc15 	stw	r4,-16(fp)
   157a0:	2807883a 	mov	r3,r5
   157a4:	3005883a 	mov	r2,r6
   157a8:	e1ffff15 	stw	r7,-4(fp)
   157ac:	e0fffd0d 	sth	r3,-12(fp)
   157b0:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   157b4:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   157b8:	e0bfff17 	ldw	r2,-4(fp)
   157bc:	1000021e 	bne	r2,zero,157c8 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   157c0:	0005883a 	mov	r2,zero
   157c4:	0000b006 	br	15a88 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   157c8:	e0bffc17 	ldw	r2,-16(fp)
   157cc:	1000051e 	bne	r2,zero,157e4 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   157d0:	e0bfff17 	ldw	r2,-4(fp)
   157d4:	00c01b84 	movi	r3,110
   157d8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   157dc:	0005883a 	mov	r2,zero
   157e0:	0000a906 	br	15a88 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   157e4:	e0bffc17 	ldw	r2,-16(fp)
   157e8:	10800003 	ldbu	r2,0(r2)
   157ec:	10803fcc 	andi	r2,r2,255
   157f0:	10800160 	cmpeqi	r2,r2,5
   157f4:	1000051e 	bne	r2,zero,1580c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   157f8:	e0bfff17 	ldw	r2,-4(fp)
   157fc:	00c00044 	movi	r3,1
   15800:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15804:	0005883a 	mov	r2,zero
   15808:	00009f06 	br	15a88 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   1580c:	e0fffe03 	ldbu	r3,-8(fp)
   15810:	00bfe004 	movi	r2,-128
   15814:	1884703a 	and	r2,r3,r2
   15818:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   1581c:	e0bff503 	ldbu	r2,-44(fp)
   15820:	10000626 	beq	r2,zero,1583c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   15824:	e0bffe03 	ldbu	r2,-8(fp)
   15828:	10801fcc 	andi	r2,r2,127
   1582c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   15830:	00800044 	movi	r2,1
   15834:	e0bff385 	stb	r2,-50(fp)
   15838:	00000106 	br	15840 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   1583c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   15840:	e0bfff17 	ldw	r2,-4(fp)
   15844:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15848:	0005303a 	rdctl	r2,status
   1584c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15850:	e0fff617 	ldw	r3,-40(fp)
   15854:	00bfff84 	movi	r2,-2
   15858:	1884703a 	and	r2,r3,r2
   1585c:	1001703a 	wrctl	status,r2
  
  return context;
   15860:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   15864:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   15868:	e0bffe03 	ldbu	r2,-8(fp)
   1586c:	10c00060 	cmpeqi	r3,r2,1
   15870:	18005f1e 	bne	r3,zero,159f0 <OSFlagAccept+0x260>
   15874:	10c00088 	cmpgei	r3,r2,2
   15878:	1800021e 	bne	r3,zero,15884 <OSFlagAccept+0xf4>
   1587c:	10003f26 	beq	r2,zero,1597c <OSFlagAccept+0x1ec>
   15880:	00007706 	br	15a60 <OSFlagAccept+0x2d0>
   15884:	10c000a0 	cmpeqi	r3,r2,2
   15888:	1800031e 	bne	r3,zero,15898 <OSFlagAccept+0x108>
   1588c:	108000e0 	cmpeqi	r2,r2,3
   15890:	10001e1e 	bne	r2,zero,1590c <OSFlagAccept+0x17c>
   15894:	00007206 	br	15a60 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   15898:	e0bffc17 	ldw	r2,-16(fp)
   1589c:	10c0020b 	ldhu	r3,8(r2)
   158a0:	e0bffd0b 	ldhu	r2,-12(fp)
   158a4:	1884703a 	and	r2,r3,r2
   158a8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   158ac:	e0fff30b 	ldhu	r3,-52(fp)
   158b0:	e0bffd0b 	ldhu	r2,-12(fp)
   158b4:	18800d1e 	bne	r3,r2,158ec <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   158b8:	e0bff383 	ldbu	r2,-50(fp)
   158bc:	10800058 	cmpnei	r2,r2,1
   158c0:	10000d1e 	bne	r2,zero,158f8 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   158c4:	e0bffc17 	ldw	r2,-16(fp)
   158c8:	1080020b 	ldhu	r2,8(r2)
   158cc:	1007883a 	mov	r3,r2
   158d0:	e0bff30b 	ldhu	r2,-52(fp)
   158d4:	0084303a 	nor	r2,zero,r2
   158d8:	1884703a 	and	r2,r3,r2
   158dc:	1007883a 	mov	r3,r2
   158e0:	e0bffc17 	ldw	r2,-16(fp)
   158e4:	10c0020d 	sth	r3,8(r2)
   158e8:	00000306 	br	158f8 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   158ec:	e0bfff17 	ldw	r2,-4(fp)
   158f0:	00c01c04 	movi	r3,112
   158f4:	10c00005 	stb	r3,0(r2)
   158f8:	e0bff417 	ldw	r2,-48(fp)
   158fc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15900:	e0bff717 	ldw	r2,-36(fp)
   15904:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15908:	00005e06 	br	15a84 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1590c:	e0bffc17 	ldw	r2,-16(fp)
   15910:	10c0020b 	ldhu	r3,8(r2)
   15914:	e0bffd0b 	ldhu	r2,-12(fp)
   15918:	1884703a 	and	r2,r3,r2
   1591c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   15920:	e0bff30b 	ldhu	r2,-52(fp)
   15924:	10000d26 	beq	r2,zero,1595c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15928:	e0bff383 	ldbu	r2,-50(fp)
   1592c:	10800058 	cmpnei	r2,r2,1
   15930:	10000d1e 	bne	r2,zero,15968 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   15934:	e0bffc17 	ldw	r2,-16(fp)
   15938:	1080020b 	ldhu	r2,8(r2)
   1593c:	1007883a 	mov	r3,r2
   15940:	e0bff30b 	ldhu	r2,-52(fp)
   15944:	0084303a 	nor	r2,zero,r2
   15948:	1884703a 	and	r2,r3,r2
   1594c:	1007883a 	mov	r3,r2
   15950:	e0bffc17 	ldw	r2,-16(fp)
   15954:	10c0020d 	sth	r3,8(r2)
   15958:	00000306 	br	15968 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1595c:	e0bfff17 	ldw	r2,-4(fp)
   15960:	00c01c04 	movi	r3,112
   15964:	10c00005 	stb	r3,0(r2)
   15968:	e0bff417 	ldw	r2,-48(fp)
   1596c:	e0bff815 	stw	r2,-32(fp)
   15970:	e0bff817 	ldw	r2,-32(fp)
   15974:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15978:	00004206 	br	15a84 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   1597c:	e0bffc17 	ldw	r2,-16(fp)
   15980:	1080020b 	ldhu	r2,8(r2)
   15984:	0084303a 	nor	r2,zero,r2
   15988:	1007883a 	mov	r3,r2
   1598c:	e0bffd0b 	ldhu	r2,-12(fp)
   15990:	1884703a 	and	r2,r3,r2
   15994:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15998:	e0fff30b 	ldhu	r3,-52(fp)
   1599c:	e0bffd0b 	ldhu	r2,-12(fp)
   159a0:	18800b1e 	bne	r3,r2,159d0 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   159a4:	e0bff383 	ldbu	r2,-50(fp)
   159a8:	10800058 	cmpnei	r2,r2,1
   159ac:	10000b1e 	bne	r2,zero,159dc <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   159b0:	e0bffc17 	ldw	r2,-16(fp)
   159b4:	10c0020b 	ldhu	r3,8(r2)
   159b8:	e0bff30b 	ldhu	r2,-52(fp)
   159bc:	1884b03a 	or	r2,r3,r2
   159c0:	1007883a 	mov	r3,r2
   159c4:	e0bffc17 	ldw	r2,-16(fp)
   159c8:	10c0020d 	sth	r3,8(r2)
   159cc:	00000306 	br	159dc <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   159d0:	e0bfff17 	ldw	r2,-4(fp)
   159d4:	00c01c04 	movi	r3,112
   159d8:	10c00005 	stb	r3,0(r2)
   159dc:	e0bff417 	ldw	r2,-48(fp)
   159e0:	e0bff915 	stw	r2,-28(fp)
   159e4:	e0bff917 	ldw	r2,-28(fp)
   159e8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   159ec:	00002506 	br	15a84 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   159f0:	e0bffc17 	ldw	r2,-16(fp)
   159f4:	1080020b 	ldhu	r2,8(r2)
   159f8:	0084303a 	nor	r2,zero,r2
   159fc:	1007883a 	mov	r3,r2
   15a00:	e0bffd0b 	ldhu	r2,-12(fp)
   15a04:	1884703a 	and	r2,r3,r2
   15a08:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   15a0c:	e0bff30b 	ldhu	r2,-52(fp)
   15a10:	10000b26 	beq	r2,zero,15a40 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15a14:	e0bff383 	ldbu	r2,-50(fp)
   15a18:	10800058 	cmpnei	r2,r2,1
   15a1c:	10000b1e 	bne	r2,zero,15a4c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   15a20:	e0bffc17 	ldw	r2,-16(fp)
   15a24:	10c0020b 	ldhu	r3,8(r2)
   15a28:	e0bff30b 	ldhu	r2,-52(fp)
   15a2c:	1884b03a 	or	r2,r3,r2
   15a30:	1007883a 	mov	r3,r2
   15a34:	e0bffc17 	ldw	r2,-16(fp)
   15a38:	10c0020d 	sth	r3,8(r2)
   15a3c:	00000306 	br	15a4c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15a40:	e0bfff17 	ldw	r2,-4(fp)
   15a44:	00c01c04 	movi	r3,112
   15a48:	10c00005 	stb	r3,0(r2)
   15a4c:	e0bff417 	ldw	r2,-48(fp)
   15a50:	e0bffa15 	stw	r2,-24(fp)
   15a54:	e0bffa17 	ldw	r2,-24(fp)
   15a58:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15a5c:	00000906 	br	15a84 <OSFlagAccept+0x2f4>
   15a60:	e0bff417 	ldw	r2,-48(fp)
   15a64:	e0bffb15 	stw	r2,-20(fp)
   15a68:	e0bffb17 	ldw	r2,-20(fp)
   15a6c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   15a70:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   15a74:	e0bfff17 	ldw	r2,-4(fp)
   15a78:	00c01bc4 	movi	r3,111
   15a7c:	10c00005 	stb	r3,0(r2)
             break;
   15a80:	0001883a 	nop
    }
    return (flags_rdy);
   15a84:	e0bff30b 	ldhu	r2,-52(fp)
}
   15a88:	e037883a 	mov	sp,fp
   15a8c:	df000017 	ldw	fp,0(sp)
   15a90:	dec00104 	addi	sp,sp,4
   15a94:	f800283a 	ret

00015a98 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   15a98:	defff804 	addi	sp,sp,-32
   15a9c:	df000715 	stw	fp,28(sp)
   15aa0:	df000704 	addi	fp,sp,28
   15aa4:	2005883a 	mov	r2,r4
   15aa8:	e17fff15 	stw	r5,-4(fp)
   15aac:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   15ab0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   15ab4:	e0bfff17 	ldw	r2,-4(fp)
   15ab8:	1000021e 	bne	r2,zero,15ac4 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   15abc:	0005883a 	mov	r2,zero
   15ac0:	00003b06 	br	15bb0 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   15ac4:	008000b4 	movhi	r2,2
   15ac8:	1091cd04 	addi	r2,r2,18228
   15acc:	10800003 	ldbu	r2,0(r2)
   15ad0:	10803fcc 	andi	r2,r2,255
   15ad4:	10000526 	beq	r2,zero,15aec <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   15ad8:	e0bfff17 	ldw	r2,-4(fp)
   15adc:	00c00404 	movi	r3,16
   15ae0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   15ae4:	0005883a 	mov	r2,zero
   15ae8:	00003106 	br	15bb0 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15aec:	0005303a 	rdctl	r2,status
   15af0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15af4:	e0fffb17 	ldw	r3,-20(fp)
   15af8:	00bfff84 	movi	r2,-2
   15afc:	1884703a 	and	r2,r3,r2
   15b00:	1001703a 	wrctl	status,r2
  
  return context;
   15b04:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   15b08:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   15b0c:	008000b4 	movhi	r2,2
   15b10:	1091d004 	addi	r2,r2,18240
   15b14:	10800017 	ldw	r2,0(r2)
   15b18:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   15b1c:	e0bffa17 	ldw	r2,-24(fp)
   15b20:	10001b26 	beq	r2,zero,15b90 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   15b24:	008000b4 	movhi	r2,2
   15b28:	1091d004 	addi	r2,r2,18240
   15b2c:	10800017 	ldw	r2,0(r2)
   15b30:	10c00117 	ldw	r3,4(r2)
   15b34:	008000b4 	movhi	r2,2
   15b38:	1091d004 	addi	r2,r2,18240
   15b3c:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   15b40:	e0bffa17 	ldw	r2,-24(fp)
   15b44:	00c00144 	movi	r3,5
   15b48:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   15b4c:	e0bffa17 	ldw	r2,-24(fp)
   15b50:	e0fffe0b 	ldhu	r3,-8(fp)
   15b54:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   15b58:	e0bffa17 	ldw	r2,-24(fp)
   15b5c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   15b60:	e0bffa17 	ldw	r2,-24(fp)
   15b64:	00c00fc4 	movi	r3,63
   15b68:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   15b6c:	e0bffa17 	ldw	r2,-24(fp)
   15b70:	100002c5 	stb	zero,11(r2)
   15b74:	e0bff917 	ldw	r2,-28(fp)
   15b78:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b7c:	e0bffc17 	ldw	r2,-16(fp)
   15b80:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   15b84:	e0bfff17 	ldw	r2,-4(fp)
   15b88:	10000005 	stb	zero,0(r2)
   15b8c:	00000706 	br	15bac <OSFlagCreate+0x114>
   15b90:	e0bff917 	ldw	r2,-28(fp)
   15b94:	e0bffd15 	stw	r2,-12(fp)
   15b98:	e0bffd17 	ldw	r2,-12(fp)
   15b9c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   15ba0:	e0bfff17 	ldw	r2,-4(fp)
   15ba4:	00c01c84 	movi	r3,114
   15ba8:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   15bac:	e0bffa17 	ldw	r2,-24(fp)
}
   15bb0:	e037883a 	mov	sp,fp
   15bb4:	df000017 	ldw	fp,0(sp)
   15bb8:	dec00104 	addi	sp,sp,4
   15bbc:	f800283a 	ret

00015bc0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   15bc0:	defff204 	addi	sp,sp,-56
   15bc4:	dfc00d15 	stw	ra,52(sp)
   15bc8:	df000c15 	stw	fp,48(sp)
   15bcc:	df000c04 	addi	fp,sp,48
   15bd0:	e13ffd15 	stw	r4,-12(fp)
   15bd4:	2805883a 	mov	r2,r5
   15bd8:	e1bfff15 	stw	r6,-4(fp)
   15bdc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   15be0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15be4:	e0bfff17 	ldw	r2,-4(fp)
   15be8:	1000021e 	bne	r2,zero,15bf4 <OSFlagDel+0x34>
        return (pgrp);
   15bec:	e0bffd17 	ldw	r2,-12(fp)
   15bf0:	00008a06 	br	15e1c <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   15bf4:	e0bffd17 	ldw	r2,-12(fp)
   15bf8:	1000051e 	bne	r2,zero,15c10 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15bfc:	e0bfff17 	ldw	r2,-4(fp)
   15c00:	00c01b84 	movi	r3,110
   15c04:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   15c08:	e0bffd17 	ldw	r2,-12(fp)
   15c0c:	00008306 	br	15e1c <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15c10:	008000b4 	movhi	r2,2
   15c14:	1091cd04 	addi	r2,r2,18228
   15c18:	10800003 	ldbu	r2,0(r2)
   15c1c:	10803fcc 	andi	r2,r2,255
   15c20:	10000526 	beq	r2,zero,15c38 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   15c24:	e0bfff17 	ldw	r2,-4(fp)
   15c28:	00c003c4 	movi	r3,15
   15c2c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   15c30:	e0bffd17 	ldw	r2,-12(fp)
   15c34:	00007906 	br	15e1c <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   15c38:	e0bffd17 	ldw	r2,-12(fp)
   15c3c:	10800003 	ldbu	r2,0(r2)
   15c40:	10803fcc 	andi	r2,r2,255
   15c44:	10800160 	cmpeqi	r2,r2,5
   15c48:	1000051e 	bne	r2,zero,15c60 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   15c4c:	e0bfff17 	ldw	r2,-4(fp)
   15c50:	00c00044 	movi	r3,1
   15c54:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   15c58:	e0bffd17 	ldw	r2,-12(fp)
   15c5c:	00006f06 	br	15e1c <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15c60:	0005303a 	rdctl	r2,status
   15c64:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15c68:	e0fff817 	ldw	r3,-32(fp)
   15c6c:	00bfff84 	movi	r2,-2
   15c70:	1884703a 	and	r2,r3,r2
   15c74:	1001703a 	wrctl	status,r2
  
  return context;
   15c78:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   15c7c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   15c80:	e0bffd17 	ldw	r2,-12(fp)
   15c84:	10800117 	ldw	r2,4(r2)
   15c88:	10000326 	beq	r2,zero,15c98 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   15c8c:	00800044 	movi	r2,1
   15c90:	e0bff405 	stb	r2,-48(fp)
   15c94:	00000106 	br	15c9c <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   15c98:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   15c9c:	e0bffe03 	ldbu	r2,-8(fp)
   15ca0:	10000326 	beq	r2,zero,15cb0 <OSFlagDel+0xf0>
   15ca4:	10800060 	cmpeqi	r2,r2,1
   15ca8:	1000271e 	bne	r2,zero,15d48 <OSFlagDel+0x188>
   15cac:	00005006 	br	15df0 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   15cb0:	e0bff403 	ldbu	r2,-48(fp)
   15cb4:	10001a1e 	bne	r2,zero,15d20 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   15cb8:	e0bffd17 	ldw	r2,-12(fp)
   15cbc:	00c00fc4 	movi	r3,63
   15cc0:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   15cc4:	e0bffd17 	ldw	r2,-12(fp)
   15cc8:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   15ccc:	e0bffd17 	ldw	r2,-12(fp)
   15cd0:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   15cd4:	008000b4 	movhi	r2,2
   15cd8:	1091d004 	addi	r2,r2,18240
   15cdc:	10c00017 	ldw	r3,0(r2)
   15ce0:	e0bffd17 	ldw	r2,-12(fp)
   15ce4:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   15ce8:	e0bffd17 	ldw	r2,-12(fp)
   15cec:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   15cf0:	008000b4 	movhi	r2,2
   15cf4:	1091d004 	addi	r2,r2,18240
   15cf8:	e0fffd17 	ldw	r3,-12(fp)
   15cfc:	10c00015 	stw	r3,0(r2)
   15d00:	e0bff717 	ldw	r2,-36(fp)
   15d04:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15d08:	e0bff917 	ldw	r2,-28(fp)
   15d0c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   15d10:	e0bfff17 	ldw	r2,-4(fp)
   15d14:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   15d18:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   15d1c:	00003e06 	br	15e18 <OSFlagDel+0x258>
   15d20:	e0bff717 	ldw	r2,-36(fp)
   15d24:	e0bffa15 	stw	r2,-24(fp)
   15d28:	e0bffa17 	ldw	r2,-24(fp)
   15d2c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   15d30:	e0bfff17 	ldw	r2,-4(fp)
   15d34:	00c01244 	movi	r3,73
   15d38:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   15d3c:	e0bffd17 	ldw	r2,-12(fp)
   15d40:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   15d44:	00003406 	br	15e18 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   15d48:	e0bffd17 	ldw	r2,-12(fp)
   15d4c:	10800117 	ldw	r2,4(r2)
   15d50:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   15d54:	00000606 	br	15d70 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   15d58:	e13ff517 	ldw	r4,-44(fp)
   15d5c:	000b883a 	mov	r5,zero
   15d60:	0016dfc0 	call	16dfc <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   15d64:	e0bff517 	ldw	r2,-44(fp)
   15d68:	10800017 	ldw	r2,0(r2)
   15d6c:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   15d70:	e0bff517 	ldw	r2,-44(fp)
   15d74:	103ff81e 	bne	r2,zero,15d58 <__alt_mem_Flash_flash_data+0xf4015d58>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   15d78:	e0bffd17 	ldw	r2,-12(fp)
   15d7c:	00c00fc4 	movi	r3,63
   15d80:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   15d84:	e0bffd17 	ldw	r2,-12(fp)
   15d88:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   15d8c:	e0bffd17 	ldw	r2,-12(fp)
   15d90:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   15d94:	008000b4 	movhi	r2,2
   15d98:	1091d004 	addi	r2,r2,18240
   15d9c:	10c00017 	ldw	r3,0(r2)
   15da0:	e0bffd17 	ldw	r2,-12(fp)
   15da4:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   15da8:	e0bffd17 	ldw	r2,-12(fp)
   15dac:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   15db0:	008000b4 	movhi	r2,2
   15db4:	1091d004 	addi	r2,r2,18240
   15db8:	e0fffd17 	ldw	r3,-12(fp)
   15dbc:	10c00015 	stw	r3,0(r2)
   15dc0:	e0bff717 	ldw	r2,-36(fp)
   15dc4:	e0bffb15 	stw	r2,-20(fp)
   15dc8:	e0bffb17 	ldw	r2,-20(fp)
   15dcc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   15dd0:	e0bff403 	ldbu	r2,-48(fp)
   15dd4:	10800058 	cmpnei	r2,r2,1
   15dd8:	1000011e 	bne	r2,zero,15de0 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   15ddc:	0014f2c0 	call	14f2c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   15de0:	e0bfff17 	ldw	r2,-4(fp)
   15de4:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   15de8:	e03ff615 	stw	zero,-40(fp)
             break;
   15dec:	00000a06 	br	15e18 <OSFlagDel+0x258>
   15df0:	e0bff717 	ldw	r2,-36(fp)
   15df4:	e0bffc15 	stw	r2,-16(fp)
   15df8:	e0bffc17 	ldw	r2,-16(fp)
   15dfc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   15e00:	e0bfff17 	ldw	r2,-4(fp)
   15e04:	00c001c4 	movi	r3,7
   15e08:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   15e0c:	e0bffd17 	ldw	r2,-12(fp)
   15e10:	e0bff615 	stw	r2,-40(fp)
             break;
   15e14:	0001883a 	nop
    }
    return (pgrp_return);
   15e18:	e0bff617 	ldw	r2,-40(fp)
}
   15e1c:	e037883a 	mov	sp,fp
   15e20:	dfc00117 	ldw	ra,4(sp)
   15e24:	df000017 	ldw	fp,0(sp)
   15e28:	dec00204 	addi	sp,sp,8
   15e2c:	f800283a 	ret

00015e30 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   15e30:	defff604 	addi	sp,sp,-40
   15e34:	dfc00915 	stw	ra,36(sp)
   15e38:	df000815 	stw	fp,32(sp)
   15e3c:	df000804 	addi	fp,sp,32
   15e40:	e13ffd15 	stw	r4,-12(fp)
   15e44:	e17ffe15 	stw	r5,-8(fp)
   15e48:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15e4c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   15e50:	e0bfff17 	ldw	r2,-4(fp)
   15e54:	1000021e 	bne	r2,zero,15e60 <OSFlagNameGet+0x30>
        return (0);
   15e58:	0005883a 	mov	r2,zero
   15e5c:	00003b06 	br	15f4c <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   15e60:	e0bffd17 	ldw	r2,-12(fp)
   15e64:	1000051e 	bne	r2,zero,15e7c <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15e68:	e0bfff17 	ldw	r2,-4(fp)
   15e6c:	00c01b84 	movi	r3,110
   15e70:	10c00005 	stb	r3,0(r2)
        return (0);
   15e74:	0005883a 	mov	r2,zero
   15e78:	00003406 	br	15f4c <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   15e7c:	e0bffe17 	ldw	r2,-8(fp)
   15e80:	1000051e 	bne	r2,zero,15e98 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   15e84:	e0bfff17 	ldw	r2,-4(fp)
   15e88:	00c00304 	movi	r3,12
   15e8c:	10c00005 	stb	r3,0(r2)
        return (0);
   15e90:	0005883a 	mov	r2,zero
   15e94:	00002d06 	br	15f4c <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15e98:	008000b4 	movhi	r2,2
   15e9c:	1091cd04 	addi	r2,r2,18228
   15ea0:	10800003 	ldbu	r2,0(r2)
   15ea4:	10803fcc 	andi	r2,r2,255
   15ea8:	10000526 	beq	r2,zero,15ec0 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   15eac:	e0bfff17 	ldw	r2,-4(fp)
   15eb0:	00c00444 	movi	r3,17
   15eb4:	10c00005 	stb	r3,0(r2)
        return (0);
   15eb8:	0005883a 	mov	r2,zero
   15ebc:	00002306 	br	15f4c <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ec0:	0005303a 	rdctl	r2,status
   15ec4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ec8:	e0fffa17 	ldw	r3,-24(fp)
   15ecc:	00bfff84 	movi	r2,-2
   15ed0:	1884703a 	and	r2,r3,r2
   15ed4:	1001703a 	wrctl	status,r2
  
  return context;
   15ed8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   15edc:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   15ee0:	e0bffd17 	ldw	r2,-12(fp)
   15ee4:	10800003 	ldbu	r2,0(r2)
   15ee8:	10803fcc 	andi	r2,r2,255
   15eec:	10800160 	cmpeqi	r2,r2,5
   15ef0:	1000091e 	bne	r2,zero,15f18 <OSFlagNameGet+0xe8>
   15ef4:	e0bff817 	ldw	r2,-32(fp)
   15ef8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15efc:	e0bffb17 	ldw	r2,-20(fp)
   15f00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   15f04:	e0bfff17 	ldw	r2,-4(fp)
   15f08:	00c00044 	movi	r3,1
   15f0c:	10c00005 	stb	r3,0(r2)
        return (0);
   15f10:	0005883a 	mov	r2,zero
   15f14:	00000d06 	br	15f4c <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   15f18:	e0bffd17 	ldw	r2,-12(fp)
   15f1c:	10800284 	addi	r2,r2,10
   15f20:	e13ffe17 	ldw	r4,-8(fp)
   15f24:	100b883a 	mov	r5,r2
   15f28:	00150680 	call	15068 <OS_StrCopy>
   15f2c:	e0bff905 	stb	r2,-28(fp)
   15f30:	e0bff817 	ldw	r2,-32(fp)
   15f34:	e0bffc15 	stw	r2,-16(fp)
   15f38:	e0bffc17 	ldw	r2,-16(fp)
   15f3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15f40:	e0bfff17 	ldw	r2,-4(fp)
   15f44:	10000005 	stb	zero,0(r2)
    return (len);
   15f48:	e0bff903 	ldbu	r2,-28(fp)
}
   15f4c:	e037883a 	mov	sp,fp
   15f50:	dfc00117 	ldw	ra,4(sp)
   15f54:	df000017 	ldw	fp,0(sp)
   15f58:	dec00204 	addi	sp,sp,8
   15f5c:	f800283a 	ret

00015f60 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   15f60:	defff504 	addi	sp,sp,-44
   15f64:	dfc00a15 	stw	ra,40(sp)
   15f68:	df000915 	stw	fp,36(sp)
   15f6c:	df000904 	addi	fp,sp,36
   15f70:	e13ffd15 	stw	r4,-12(fp)
   15f74:	e17ffe15 	stw	r5,-8(fp)
   15f78:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15f7c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   15f80:	e0bfff17 	ldw	r2,-4(fp)
   15f84:	1000011e 	bne	r2,zero,15f8c <OSFlagNameSet+0x2c>
        return;
   15f88:	00004406 	br	1609c <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   15f8c:	e0bffd17 	ldw	r2,-12(fp)
   15f90:	1000041e 	bne	r2,zero,15fa4 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15f94:	e0bfff17 	ldw	r2,-4(fp)
   15f98:	00c01b84 	movi	r3,110
   15f9c:	10c00005 	stb	r3,0(r2)
        return;
   15fa0:	00003e06 	br	1609c <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   15fa4:	e0bffe17 	ldw	r2,-8(fp)
   15fa8:	1000041e 	bne	r2,zero,15fbc <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   15fac:	e0bfff17 	ldw	r2,-4(fp)
   15fb0:	00c00304 	movi	r3,12
   15fb4:	10c00005 	stb	r3,0(r2)
        return;
   15fb8:	00003806 	br	1609c <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15fbc:	008000b4 	movhi	r2,2
   15fc0:	1091cd04 	addi	r2,r2,18228
   15fc4:	10800003 	ldbu	r2,0(r2)
   15fc8:	10803fcc 	andi	r2,r2,255
   15fcc:	10000426 	beq	r2,zero,15fe0 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   15fd0:	e0bfff17 	ldw	r2,-4(fp)
   15fd4:	00c00484 	movi	r3,18
   15fd8:	10c00005 	stb	r3,0(r2)
        return;
   15fdc:	00002f06 	br	1609c <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15fe0:	0005303a 	rdctl	r2,status
   15fe4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15fe8:	e0fff917 	ldw	r3,-28(fp)
   15fec:	00bfff84 	movi	r2,-2
   15ff0:	1884703a 	and	r2,r3,r2
   15ff4:	1001703a 	wrctl	status,r2
  
  return context;
   15ff8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   15ffc:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   16000:	e0bffd17 	ldw	r2,-12(fp)
   16004:	10800003 	ldbu	r2,0(r2)
   16008:	10803fcc 	andi	r2,r2,255
   1600c:	10800160 	cmpeqi	r2,r2,5
   16010:	1000081e 	bne	r2,zero,16034 <OSFlagNameSet+0xd4>
   16014:	e0bff717 	ldw	r2,-36(fp)
   16018:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1601c:	e0bffa17 	ldw	r2,-24(fp)
   16020:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   16024:	e0bfff17 	ldw	r2,-4(fp)
   16028:	00c00044 	movi	r3,1
   1602c:	10c00005 	stb	r3,0(r2)
        return;
   16030:	00001a06 	br	1609c <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   16034:	e13ffe17 	ldw	r4,-8(fp)
   16038:	00150dc0 	call	150dc <OS_StrLen>
   1603c:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   16040:	e0bff803 	ldbu	r2,-32(fp)
   16044:	10800830 	cmpltui	r2,r2,32
   16048:	1000081e 	bne	r2,zero,1606c <OSFlagNameSet+0x10c>
   1604c:	e0bff717 	ldw	r2,-36(fp)
   16050:	e0bffb15 	stw	r2,-20(fp)
   16054:	e0bffb17 	ldw	r2,-20(fp)
   16058:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   1605c:	e0bfff17 	ldw	r2,-4(fp)
   16060:	00c01cc4 	movi	r3,115
   16064:	10c00005 	stb	r3,0(r2)
        return;
   16068:	00000c06 	br	1609c <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   1606c:	e0bffd17 	ldw	r2,-12(fp)
   16070:	10800284 	addi	r2,r2,10
   16074:	1009883a 	mov	r4,r2
   16078:	e17ffe17 	ldw	r5,-8(fp)
   1607c:	00150680 	call	15068 <OS_StrCopy>
   16080:	e0bff717 	ldw	r2,-36(fp)
   16084:	e0bffc15 	stw	r2,-16(fp)
   16088:	e0bffc17 	ldw	r2,-16(fp)
   1608c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16090:	e0bfff17 	ldw	r2,-4(fp)
   16094:	10000005 	stb	zero,0(r2)
    return;
   16098:	0001883a 	nop
}
   1609c:	e037883a 	mov	sp,fp
   160a0:	dfc00117 	ldw	ra,4(sp)
   160a4:	df000017 	ldw	fp,0(sp)
   160a8:	dec00204 	addi	sp,sp,8
   160ac:	f800283a 	ret

000160b0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   160b0:	deffe204 	addi	sp,sp,-120
   160b4:	dfc01d15 	stw	ra,116(sp)
   160b8:	df001c15 	stw	fp,112(sp)
   160bc:	df001c04 	addi	fp,sp,112
   160c0:	e13ffc15 	stw	r4,-16(fp)
   160c4:	2809883a 	mov	r4,r5
   160c8:	3007883a 	mov	r3,r6
   160cc:	3805883a 	mov	r2,r7
   160d0:	e13ffd0d 	sth	r4,-12(fp)
   160d4:	e0fffe05 	stb	r3,-8(fp)
   160d8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   160dc:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   160e0:	e0800217 	ldw	r2,8(fp)
   160e4:	1000021e 	bne	r2,zero,160f0 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   160e8:	0005883a 	mov	r2,zero
   160ec:	00016706 	br	1668c <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   160f0:	e0bffc17 	ldw	r2,-16(fp)
   160f4:	1000051e 	bne	r2,zero,1610c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   160f8:	e0800217 	ldw	r2,8(fp)
   160fc:	00c01b84 	movi	r3,110
   16100:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16104:	0005883a 	mov	r2,zero
   16108:	00016006 	br	1668c <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1610c:	008000b4 	movhi	r2,2
   16110:	1091cd04 	addi	r2,r2,18228
   16114:	10800003 	ldbu	r2,0(r2)
   16118:	10803fcc 	andi	r2,r2,255
   1611c:	10000526 	beq	r2,zero,16134 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   16120:	e0800217 	ldw	r2,8(fp)
   16124:	00c00084 	movi	r3,2
   16128:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1612c:	0005883a 	mov	r2,zero
   16130:	00015606 	br	1668c <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   16134:	008000b4 	movhi	r2,2
   16138:	1091bf04 	addi	r2,r2,18172
   1613c:	10800003 	ldbu	r2,0(r2)
   16140:	10803fcc 	andi	r2,r2,255
   16144:	10000526 	beq	r2,zero,1615c <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   16148:	e0800217 	ldw	r2,8(fp)
   1614c:	00c00344 	movi	r3,13
   16150:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16154:	0005883a 	mov	r2,zero
   16158:	00014c06 	br	1668c <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   1615c:	e0bffc17 	ldw	r2,-16(fp)
   16160:	10800003 	ldbu	r2,0(r2)
   16164:	10803fcc 	andi	r2,r2,255
   16168:	10800160 	cmpeqi	r2,r2,5
   1616c:	1000051e 	bne	r2,zero,16184 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   16170:	e0800217 	ldw	r2,8(fp)
   16174:	00c00044 	movi	r3,1
   16178:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1617c:	0005883a 	mov	r2,zero
   16180:	00014206 	br	1668c <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   16184:	e0fffe03 	ldbu	r3,-8(fp)
   16188:	00bfe004 	movi	r2,-128
   1618c:	1884703a 	and	r2,r3,r2
   16190:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   16194:	e0bfe703 	ldbu	r2,-100(fp)
   16198:	10000626 	beq	r2,zero,161b4 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   1619c:	e0bffe03 	ldbu	r2,-8(fp)
   161a0:	10801fcc 	andi	r2,r2,127
   161a4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   161a8:	00800044 	movi	r2,1
   161ac:	e0bfe505 	stb	r2,-108(fp)
   161b0:	00000106 	br	161b8 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   161b4:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   161b8:	0005303a 	rdctl	r2,status
   161bc:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   161c0:	e0ffe917 	ldw	r3,-92(fp)
   161c4:	00bfff84 	movi	r2,-2
   161c8:	1884703a 	and	r2,r3,r2
   161cc:	1001703a 	wrctl	status,r2
  
  return context;
   161d0:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   161d4:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   161d8:	e0bffe03 	ldbu	r2,-8(fp)
   161dc:	10c00060 	cmpeqi	r3,r2,1
   161e0:	1800921e 	bne	r3,zero,1642c <OSFlagPend+0x37c>
   161e4:	10c00088 	cmpgei	r3,r2,2
   161e8:	1800021e 	bne	r3,zero,161f4 <OSFlagPend+0x144>
   161ec:	10006126 	beq	r2,zero,16374 <OSFlagPend+0x2c4>
   161f0:	0000bb06 	br	164e0 <OSFlagPend+0x430>
   161f4:	10c000a0 	cmpeqi	r3,r2,2
   161f8:	1800031e 	bne	r3,zero,16208 <OSFlagPend+0x158>
   161fc:	108000e0 	cmpeqi	r2,r2,3
   16200:	10002f1e 	bne	r2,zero,162c0 <OSFlagPend+0x210>
   16204:	0000b606 	br	164e0 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   16208:	e0bffc17 	ldw	r2,-16(fp)
   1620c:	10c0020b 	ldhu	r3,8(r2)
   16210:	e0bffd0b 	ldhu	r2,-12(fp)
   16214:	1884703a 	and	r2,r3,r2
   16218:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1621c:	e0ffe78b 	ldhu	r3,-98(fp)
   16220:	e0bffd0b 	ldhu	r2,-12(fp)
   16224:	1880191e 	bne	r3,r2,1628c <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16228:	e0bfe503 	ldbu	r2,-108(fp)
   1622c:	10800058 	cmpnei	r2,r2,1
   16230:	1000091e 	bne	r2,zero,16258 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   16234:	e0bffc17 	ldw	r2,-16(fp)
   16238:	1080020b 	ldhu	r2,8(r2)
   1623c:	1007883a 	mov	r3,r2
   16240:	e0bfe78b 	ldhu	r2,-98(fp)
   16244:	0084303a 	nor	r2,zero,r2
   16248:	1884703a 	and	r2,r3,r2
   1624c:	1007883a 	mov	r3,r2
   16250:	e0bffc17 	ldw	r2,-16(fp)
   16254:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   16258:	008000b4 	movhi	r2,2
   1625c:	1091ce04 	addi	r2,r2,18232
   16260:	10800017 	ldw	r2,0(r2)
   16264:	e0ffe78b 	ldhu	r3,-98(fp)
   16268:	10c00b0d 	sth	r3,44(r2)
   1626c:	e0bfe617 	ldw	r2,-104(fp)
   16270:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16274:	e0bfea17 	ldw	r2,-88(fp)
   16278:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1627c:	e0800217 	ldw	r2,8(fp)
   16280:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   16284:	e0bfe78b 	ldhu	r2,-98(fp)
   16288:	00010006 	br	1668c <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1628c:	e1bffd0b 	ldhu	r6,-12(fp)
   16290:	e0fffe03 	ldbu	r3,-8(fp)
   16294:	e0bfff0b 	ldhu	r2,-4(fp)
   16298:	e17ff704 	addi	r5,fp,-36
   1629c:	d8800015 	stw	r2,0(sp)
   162a0:	e13ffc17 	ldw	r4,-16(fp)
   162a4:	180f883a 	mov	r7,r3
   162a8:	0016b540 	call	16b54 <OS_FlagBlock>
   162ac:	e0bfe617 	ldw	r2,-104(fp)
   162b0:	e0bfeb15 	stw	r2,-84(fp)
   162b4:	e0bfeb17 	ldw	r2,-84(fp)
   162b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   162bc:	00009206 	br	16508 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   162c0:	e0bffc17 	ldw	r2,-16(fp)
   162c4:	10c0020b 	ldhu	r3,8(r2)
   162c8:	e0bffd0b 	ldhu	r2,-12(fp)
   162cc:	1884703a 	and	r2,r3,r2
   162d0:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   162d4:	e0bfe78b 	ldhu	r2,-98(fp)
   162d8:	10001926 	beq	r2,zero,16340 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   162dc:	e0bfe503 	ldbu	r2,-108(fp)
   162e0:	10800058 	cmpnei	r2,r2,1
   162e4:	1000091e 	bne	r2,zero,1630c <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   162e8:	e0bffc17 	ldw	r2,-16(fp)
   162ec:	1080020b 	ldhu	r2,8(r2)
   162f0:	1007883a 	mov	r3,r2
   162f4:	e0bfe78b 	ldhu	r2,-98(fp)
   162f8:	0084303a 	nor	r2,zero,r2
   162fc:	1884703a 	and	r2,r3,r2
   16300:	1007883a 	mov	r3,r2
   16304:	e0bffc17 	ldw	r2,-16(fp)
   16308:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1630c:	008000b4 	movhi	r2,2
   16310:	1091ce04 	addi	r2,r2,18232
   16314:	10800017 	ldw	r2,0(r2)
   16318:	e0ffe78b 	ldhu	r3,-98(fp)
   1631c:	10c00b0d 	sth	r3,44(r2)
   16320:	e0bfe617 	ldw	r2,-104(fp)
   16324:	e0bfec15 	stw	r2,-80(fp)
   16328:	e0bfec17 	ldw	r2,-80(fp)
   1632c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   16330:	e0800217 	ldw	r2,8(fp)
   16334:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   16338:	e0bfe78b 	ldhu	r2,-98(fp)
   1633c:	0000d306 	br	1668c <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   16340:	e1bffd0b 	ldhu	r6,-12(fp)
   16344:	e0fffe03 	ldbu	r3,-8(fp)
   16348:	e0bfff0b 	ldhu	r2,-4(fp)
   1634c:	e17ff704 	addi	r5,fp,-36
   16350:	d8800015 	stw	r2,0(sp)
   16354:	e13ffc17 	ldw	r4,-16(fp)
   16358:	180f883a 	mov	r7,r3
   1635c:	0016b540 	call	16b54 <OS_FlagBlock>
   16360:	e0bfe617 	ldw	r2,-104(fp)
   16364:	e0bfed15 	stw	r2,-76(fp)
   16368:	e0bfed17 	ldw	r2,-76(fp)
   1636c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   16370:	00006506 	br	16508 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   16374:	e0bffc17 	ldw	r2,-16(fp)
   16378:	1080020b 	ldhu	r2,8(r2)
   1637c:	0084303a 	nor	r2,zero,r2
   16380:	1007883a 	mov	r3,r2
   16384:	e0bffd0b 	ldhu	r2,-12(fp)
   16388:	1884703a 	and	r2,r3,r2
   1638c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   16390:	e0ffe78b 	ldhu	r3,-98(fp)
   16394:	e0bffd0b 	ldhu	r2,-12(fp)
   16398:	1880171e 	bne	r3,r2,163f8 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1639c:	e0bfe503 	ldbu	r2,-108(fp)
   163a0:	10800058 	cmpnei	r2,r2,1
   163a4:	1000071e 	bne	r2,zero,163c4 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   163a8:	e0bffc17 	ldw	r2,-16(fp)
   163ac:	10c0020b 	ldhu	r3,8(r2)
   163b0:	e0bfe78b 	ldhu	r2,-98(fp)
   163b4:	1884b03a 	or	r2,r3,r2
   163b8:	1007883a 	mov	r3,r2
   163bc:	e0bffc17 	ldw	r2,-16(fp)
   163c0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   163c4:	008000b4 	movhi	r2,2
   163c8:	1091ce04 	addi	r2,r2,18232
   163cc:	10800017 	ldw	r2,0(r2)
   163d0:	e0ffe78b 	ldhu	r3,-98(fp)
   163d4:	10c00b0d 	sth	r3,44(r2)
   163d8:	e0bfe617 	ldw	r2,-104(fp)
   163dc:	e0bfee15 	stw	r2,-72(fp)
   163e0:	e0bfee17 	ldw	r2,-72(fp)
   163e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   163e8:	e0800217 	ldw	r2,8(fp)
   163ec:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   163f0:	e0bfe78b 	ldhu	r2,-98(fp)
   163f4:	0000a506 	br	1668c <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   163f8:	e1bffd0b 	ldhu	r6,-12(fp)
   163fc:	e0fffe03 	ldbu	r3,-8(fp)
   16400:	e0bfff0b 	ldhu	r2,-4(fp)
   16404:	e17ff704 	addi	r5,fp,-36
   16408:	d8800015 	stw	r2,0(sp)
   1640c:	e13ffc17 	ldw	r4,-16(fp)
   16410:	180f883a 	mov	r7,r3
   16414:	0016b540 	call	16b54 <OS_FlagBlock>
   16418:	e0bfe617 	ldw	r2,-104(fp)
   1641c:	e0bfef15 	stw	r2,-68(fp)
   16420:	e0bfef17 	ldw	r2,-68(fp)
   16424:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   16428:	00003706 	br	16508 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   1642c:	e0bffc17 	ldw	r2,-16(fp)
   16430:	1080020b 	ldhu	r2,8(r2)
   16434:	0084303a 	nor	r2,zero,r2
   16438:	1007883a 	mov	r3,r2
   1643c:	e0bffd0b 	ldhu	r2,-12(fp)
   16440:	1884703a 	and	r2,r3,r2
   16444:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   16448:	e0bfe78b 	ldhu	r2,-98(fp)
   1644c:	10001726 	beq	r2,zero,164ac <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16450:	e0bfe503 	ldbu	r2,-108(fp)
   16454:	10800058 	cmpnei	r2,r2,1
   16458:	1000071e 	bne	r2,zero,16478 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   1645c:	e0bffc17 	ldw	r2,-16(fp)
   16460:	10c0020b 	ldhu	r3,8(r2)
   16464:	e0bfe78b 	ldhu	r2,-98(fp)
   16468:	1884b03a 	or	r2,r3,r2
   1646c:	1007883a 	mov	r3,r2
   16470:	e0bffc17 	ldw	r2,-16(fp)
   16474:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   16478:	008000b4 	movhi	r2,2
   1647c:	1091ce04 	addi	r2,r2,18232
   16480:	10800017 	ldw	r2,0(r2)
   16484:	e0ffe78b 	ldhu	r3,-98(fp)
   16488:	10c00b0d 	sth	r3,44(r2)
   1648c:	e0bfe617 	ldw	r2,-104(fp)
   16490:	e0bff015 	stw	r2,-64(fp)
   16494:	e0bff017 	ldw	r2,-64(fp)
   16498:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1649c:	e0800217 	ldw	r2,8(fp)
   164a0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   164a4:	e0bfe78b 	ldhu	r2,-98(fp)
   164a8:	00007806 	br	1668c <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   164ac:	e1bffd0b 	ldhu	r6,-12(fp)
   164b0:	e0fffe03 	ldbu	r3,-8(fp)
   164b4:	e0bfff0b 	ldhu	r2,-4(fp)
   164b8:	e17ff704 	addi	r5,fp,-36
   164bc:	d8800015 	stw	r2,0(sp)
   164c0:	e13ffc17 	ldw	r4,-16(fp)
   164c4:	180f883a 	mov	r7,r3
   164c8:	0016b540 	call	16b54 <OS_FlagBlock>
   164cc:	e0bfe617 	ldw	r2,-104(fp)
   164d0:	e0bff115 	stw	r2,-60(fp)
   164d4:	e0bff117 	ldw	r2,-60(fp)
   164d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   164dc:	00000a06 	br	16508 <OSFlagPend+0x458>
   164e0:	e0bfe617 	ldw	r2,-104(fp)
   164e4:	e0bff215 	stw	r2,-56(fp)
   164e8:	e0bff217 	ldw	r2,-56(fp)
   164ec:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   164f0:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   164f4:	e0800217 	ldw	r2,8(fp)
   164f8:	00c01bc4 	movi	r3,111
   164fc:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   16500:	e0bfe78b 	ldhu	r2,-98(fp)
   16504:	00006106 	br	1668c <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   16508:	0014f2c0 	call	14f2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1650c:	0005303a 	rdctl	r2,status
   16510:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16514:	e0fff317 	ldw	r3,-52(fp)
   16518:	00bfff84 	movi	r2,-2
   1651c:	1884703a 	and	r2,r3,r2
   16520:	1001703a 	wrctl	status,r2
  
  return context;
   16524:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   16528:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   1652c:	008000b4 	movhi	r2,2
   16530:	1091ce04 	addi	r2,r2,18232
   16534:	10800017 	ldw	r2,0(r2)
   16538:	10800c43 	ldbu	r2,49(r2)
   1653c:	10803fcc 	andi	r2,r2,255
   16540:	10002226 	beq	r2,zero,165cc <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   16544:	008000b4 	movhi	r2,2
   16548:	1091ce04 	addi	r2,r2,18232
   1654c:	10800017 	ldw	r2,0(r2)
   16550:	10800c43 	ldbu	r2,49(r2)
   16554:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   16558:	008000b4 	movhi	r2,2
   1655c:	1091ce04 	addi	r2,r2,18232
   16560:	10800017 	ldw	r2,0(r2)
   16564:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   16568:	e0bff704 	addi	r2,fp,-36
   1656c:	1009883a 	mov	r4,r2
   16570:	0016f0c0 	call	16f0c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   16574:	008000b4 	movhi	r2,2
   16578:	1091ce04 	addi	r2,r2,18232
   1657c:	10800017 	ldw	r2,0(r2)
   16580:	10000c05 	stb	zero,48(r2)
   16584:	e0bfe617 	ldw	r2,-104(fp)
   16588:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1658c:	e0bff417 	ldw	r2,-48(fp)
   16590:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   16594:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   16598:	e0bfe803 	ldbu	r2,-96(fp)
   1659c:	108000a0 	cmpeqi	r2,r2,2
   165a0:	10000426 	beq	r2,zero,165b4 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   165a4:	e0800217 	ldw	r2,8(fp)
   165a8:	00c00384 	movi	r3,14
   165ac:	10c00005 	stb	r3,0(r2)
                 break;
   165b0:	00000406 	br	165c4 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   165b4:	e0800217 	ldw	r2,8(fp)
   165b8:	00c00284 	movi	r3,10
   165bc:	10c00005 	stb	r3,0(r2)
                 break;
   165c0:	0001883a 	nop
        }
        return (flags_rdy);
   165c4:	e0bfe78b 	ldhu	r2,-98(fp)
   165c8:	00003006 	br	1668c <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   165cc:	008000b4 	movhi	r2,2
   165d0:	1091ce04 	addi	r2,r2,18232
   165d4:	10800017 	ldw	r2,0(r2)
   165d8:	10800b0b 	ldhu	r2,44(r2)
   165dc:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   165e0:	e0bfe503 	ldbu	r2,-108(fp)
   165e4:	10800058 	cmpnei	r2,r2,1
   165e8:	1000211e 	bne	r2,zero,16670 <OSFlagPend+0x5c0>
        switch (wait_type) {
   165ec:	e0bffe03 	ldbu	r2,-8(fp)
   165f0:	10001616 	blt	r2,zero,1664c <OSFlagPend+0x59c>
   165f4:	10c00090 	cmplti	r3,r2,2
   165f8:	18000c1e 	bne	r3,zero,1662c <OSFlagPend+0x57c>
   165fc:	10800108 	cmpgei	r2,r2,4
   16600:	1000121e 	bne	r2,zero,1664c <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   16604:	e0bffc17 	ldw	r2,-16(fp)
   16608:	1080020b 	ldhu	r2,8(r2)
   1660c:	1007883a 	mov	r3,r2
   16610:	e0bfe78b 	ldhu	r2,-98(fp)
   16614:	0084303a 	nor	r2,zero,r2
   16618:	1884703a 	and	r2,r3,r2
   1661c:	1007883a 	mov	r3,r2
   16620:	e0bffc17 	ldw	r2,-16(fp)
   16624:	10c0020d 	sth	r3,8(r2)
                 break;
   16628:	00001106 	br	16670 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   1662c:	e0bffc17 	ldw	r2,-16(fp)
   16630:	10c0020b 	ldhu	r3,8(r2)
   16634:	e0bfe78b 	ldhu	r2,-98(fp)
   16638:	1884b03a 	or	r2,r3,r2
   1663c:	1007883a 	mov	r3,r2
   16640:	e0bffc17 	ldw	r2,-16(fp)
   16644:	10c0020d 	sth	r3,8(r2)
                 break;
   16648:	00000906 	br	16670 <OSFlagPend+0x5c0>
   1664c:	e0bfe617 	ldw	r2,-104(fp)
   16650:	e0bff515 	stw	r2,-44(fp)
   16654:	e0bff517 	ldw	r2,-44(fp)
   16658:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   1665c:	e0800217 	ldw	r2,8(fp)
   16660:	00c01bc4 	movi	r3,111
   16664:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   16668:	0005883a 	mov	r2,zero
   1666c:	00000706 	br	1668c <OSFlagPend+0x5dc>
   16670:	e0bfe617 	ldw	r2,-104(fp)
   16674:	e0bff615 	stw	r2,-40(fp)
   16678:	e0bff617 	ldw	r2,-40(fp)
   1667c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   16680:	e0800217 	ldw	r2,8(fp)
   16684:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   16688:	e0bfe78b 	ldhu	r2,-98(fp)
}
   1668c:	e037883a 	mov	sp,fp
   16690:	dfc00117 	ldw	ra,4(sp)
   16694:	df000017 	ldw	fp,0(sp)
   16698:	dec00204 	addi	sp,sp,8
   1669c:	f800283a 	ret

000166a0 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   166a0:	defffb04 	addi	sp,sp,-20
   166a4:	df000415 	stw	fp,16(sp)
   166a8:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   166ac:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   166b0:	0005303a 	rdctl	r2,status
   166b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   166b8:	e0fffe17 	ldw	r3,-8(fp)
   166bc:	00bfff84 	movi	r2,-2
   166c0:	1884703a 	and	r2,r3,r2
   166c4:	1001703a 	wrctl	status,r2
  
  return context;
   166c8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   166cc:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   166d0:	008000b4 	movhi	r2,2
   166d4:	1091ce04 	addi	r2,r2,18232
   166d8:	10800017 	ldw	r2,0(r2)
   166dc:	10800b0b 	ldhu	r2,44(r2)
   166e0:	e0bffd0d 	sth	r2,-12(fp)
   166e4:	e0bffc17 	ldw	r2,-16(fp)
   166e8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   166ec:	e0bfff17 	ldw	r2,-4(fp)
   166f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   166f4:	e0bffd0b 	ldhu	r2,-12(fp)
}
   166f8:	e037883a 	mov	sp,fp
   166fc:	df000017 	ldw	fp,0(sp)
   16700:	dec00104 	addi	sp,sp,4
   16704:	f800283a 	ret

00016708 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   16708:	deffef04 	addi	sp,sp,-68
   1670c:	dfc01015 	stw	ra,64(sp)
   16710:	df000f15 	stw	fp,60(sp)
   16714:	df000f04 	addi	fp,sp,60
   16718:	e13ffc15 	stw	r4,-16(fp)
   1671c:	2807883a 	mov	r3,r5
   16720:	3005883a 	mov	r2,r6
   16724:	e1ffff15 	stw	r7,-4(fp)
   16728:	e0fffd0d 	sth	r3,-12(fp)
   1672c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   16730:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   16734:	e0bfff17 	ldw	r2,-4(fp)
   16738:	1000021e 	bne	r2,zero,16744 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   1673c:	0005883a 	mov	r2,zero
   16740:	0000ce06 	br	16a7c <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   16744:	e0bffc17 	ldw	r2,-16(fp)
   16748:	1000051e 	bne	r2,zero,16760 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1674c:	e0bfff17 	ldw	r2,-4(fp)
   16750:	00c01b84 	movi	r3,110
   16754:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16758:	0005883a 	mov	r2,zero
   1675c:	0000c706 	br	16a7c <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   16760:	e0bffc17 	ldw	r2,-16(fp)
   16764:	10800003 	ldbu	r2,0(r2)
   16768:	10803fcc 	andi	r2,r2,255
   1676c:	10800160 	cmpeqi	r2,r2,5
   16770:	1000051e 	bne	r2,zero,16788 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   16774:	e0bfff17 	ldw	r2,-4(fp)
   16778:	00c00044 	movi	r3,1
   1677c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16780:	0005883a 	mov	r2,zero
   16784:	0000bd06 	br	16a7c <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16788:	0005303a 	rdctl	r2,status
   1678c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16790:	e0fff617 	ldw	r3,-40(fp)
   16794:	00bfff84 	movi	r2,-2
   16798:	1884703a 	and	r2,r3,r2
   1679c:	1001703a 	wrctl	status,r2
  
  return context;
   167a0:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   167a4:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   167a8:	e0bffe03 	ldbu	r2,-8(fp)
   167ac:	10000326 	beq	r2,zero,167bc <OSFlagPost+0xb4>
   167b0:	10800060 	cmpeqi	r2,r2,1
   167b4:	10000b1e 	bne	r2,zero,167e4 <OSFlagPost+0xdc>
   167b8:	00001206 	br	16804 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   167bc:	e0bffc17 	ldw	r2,-16(fp)
   167c0:	1080020b 	ldhu	r2,8(r2)
   167c4:	1007883a 	mov	r3,r2
   167c8:	e0bffd0b 	ldhu	r2,-12(fp)
   167cc:	0084303a 	nor	r2,zero,r2
   167d0:	1884703a 	and	r2,r3,r2
   167d4:	1007883a 	mov	r3,r2
   167d8:	e0bffc17 	ldw	r2,-16(fp)
   167dc:	10c0020d 	sth	r3,8(r2)
             break;
   167e0:	00001106 	br	16828 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   167e4:	e0bffc17 	ldw	r2,-16(fp)
   167e8:	10c0020b 	ldhu	r3,8(r2)
   167ec:	e0bffd0b 	ldhu	r2,-12(fp)
   167f0:	1884b03a 	or	r2,r3,r2
   167f4:	1007883a 	mov	r3,r2
   167f8:	e0bffc17 	ldw	r2,-16(fp)
   167fc:	10c0020d 	sth	r3,8(r2)
             break;
   16800:	00000906 	br	16828 <OSFlagPost+0x120>
   16804:	e0bff317 	ldw	r2,-52(fp)
   16808:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1680c:	e0bff717 	ldw	r2,-36(fp)
   16810:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   16814:	e0bfff17 	ldw	r2,-4(fp)
   16818:	00c01c44 	movi	r3,113
   1681c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   16820:	0005883a 	mov	r2,zero
   16824:	00009506 	br	16a7c <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   16828:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1682c:	e0bffc17 	ldw	r2,-16(fp)
   16830:	10800117 	ldw	r2,4(r2)
   16834:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   16838:	00007406 	br	16a0c <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   1683c:	e0bff117 	ldw	r2,-60(fp)
   16840:	10800483 	ldbu	r2,18(r2)
   16844:	10803fcc 	andi	r2,r2,255
   16848:	10c00060 	cmpeqi	r3,r2,1
   1684c:	18004d1e 	bne	r3,zero,16984 <OSFlagPost+0x27c>
   16850:	10c00088 	cmpgei	r3,r2,2
   16854:	1800021e 	bne	r3,zero,16860 <OSFlagPost+0x158>
   16858:	10003126 	beq	r2,zero,16920 <OSFlagPost+0x218>
   1685c:	00005f06 	br	169dc <OSFlagPost+0x2d4>
   16860:	10c000a0 	cmpeqi	r3,r2,2
   16864:	1800031e 	bne	r3,zero,16874 <OSFlagPost+0x16c>
   16868:	108000e0 	cmpeqi	r2,r2,3
   1686c:	1000181e 	bne	r2,zero,168d0 <OSFlagPost+0x1c8>
   16870:	00005a06 	br	169dc <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16874:	e0bffc17 	ldw	r2,-16(fp)
   16878:	10c0020b 	ldhu	r3,8(r2)
   1687c:	e0bff117 	ldw	r2,-60(fp)
   16880:	1080040b 	ldhu	r2,16(r2)
   16884:	1884703a 	and	r2,r3,r2
   16888:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   1688c:	e0bff117 	ldw	r2,-60(fp)
   16890:	1080040b 	ldhu	r2,16(r2)
   16894:	10ffffcc 	andi	r3,r2,65535
   16898:	e0bff40b 	ldhu	r2,-48(fp)
   1689c:	18800b1e 	bne	r3,r2,168cc <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   168a0:	e0bff40b 	ldhu	r2,-48(fp)
   168a4:	e13ff117 	ldw	r4,-60(fp)
   168a8:	100b883a 	mov	r5,r2
   168ac:	0016dfc0 	call	16dfc <OS_FlagTaskRdy>
   168b0:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   168b4:	e0bff483 	ldbu	r2,-46(fp)
   168b8:	10800058 	cmpnei	r2,r2,1
   168bc:	1000031e 	bne	r2,zero,168cc <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   168c0:	00800044 	movi	r2,1
   168c4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   168c8:	00004d06 	br	16a00 <OSFlagPost+0x2f8>
   168cc:	00004c06 	br	16a00 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   168d0:	e0bffc17 	ldw	r2,-16(fp)
   168d4:	10c0020b 	ldhu	r3,8(r2)
   168d8:	e0bff117 	ldw	r2,-60(fp)
   168dc:	1080040b 	ldhu	r2,16(r2)
   168e0:	1884703a 	and	r2,r3,r2
   168e4:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   168e8:	e0bff40b 	ldhu	r2,-48(fp)
   168ec:	10000b26 	beq	r2,zero,1691c <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   168f0:	e0bff40b 	ldhu	r2,-48(fp)
   168f4:	e13ff117 	ldw	r4,-60(fp)
   168f8:	100b883a 	mov	r5,r2
   168fc:	0016dfc0 	call	16dfc <OS_FlagTaskRdy>
   16900:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   16904:	e0bff483 	ldbu	r2,-46(fp)
   16908:	10800058 	cmpnei	r2,r2,1
   1690c:	1000031e 	bne	r2,zero,1691c <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   16910:	00800044 	movi	r2,1
   16914:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16918:	00003906 	br	16a00 <OSFlagPost+0x2f8>
   1691c:	00003806 	br	16a00 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16920:	e0bffc17 	ldw	r2,-16(fp)
   16924:	1080020b 	ldhu	r2,8(r2)
   16928:	0084303a 	nor	r2,zero,r2
   1692c:	1007883a 	mov	r3,r2
   16930:	e0bff117 	ldw	r2,-60(fp)
   16934:	1080040b 	ldhu	r2,16(r2)
   16938:	1884703a 	and	r2,r3,r2
   1693c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   16940:	e0bff117 	ldw	r2,-60(fp)
   16944:	1080040b 	ldhu	r2,16(r2)
   16948:	10ffffcc 	andi	r3,r2,65535
   1694c:	e0bff40b 	ldhu	r2,-48(fp)
   16950:	18800b1e 	bne	r3,r2,16980 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16954:	e0bff40b 	ldhu	r2,-48(fp)
   16958:	e13ff117 	ldw	r4,-60(fp)
   1695c:	100b883a 	mov	r5,r2
   16960:	0016dfc0 	call	16dfc <OS_FlagTaskRdy>
   16964:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   16968:	e0bff483 	ldbu	r2,-46(fp)
   1696c:	10800058 	cmpnei	r2,r2,1
   16970:	1000031e 	bne	r2,zero,16980 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   16974:	00800044 	movi	r2,1
   16978:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1697c:	00002006 	br	16a00 <OSFlagPost+0x2f8>
   16980:	00001f06 	br	16a00 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16984:	e0bffc17 	ldw	r2,-16(fp)
   16988:	1080020b 	ldhu	r2,8(r2)
   1698c:	0084303a 	nor	r2,zero,r2
   16990:	1007883a 	mov	r3,r2
   16994:	e0bff117 	ldw	r2,-60(fp)
   16998:	1080040b 	ldhu	r2,16(r2)
   1699c:	1884703a 	and	r2,r3,r2
   169a0:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   169a4:	e0bff40b 	ldhu	r2,-48(fp)
   169a8:	10000b26 	beq	r2,zero,169d8 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   169ac:	e0bff40b 	ldhu	r2,-48(fp)
   169b0:	e13ff117 	ldw	r4,-60(fp)
   169b4:	100b883a 	mov	r5,r2
   169b8:	0016dfc0 	call	16dfc <OS_FlagTaskRdy>
   169bc:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   169c0:	e0bff483 	ldbu	r2,-46(fp)
   169c4:	10800058 	cmpnei	r2,r2,1
   169c8:	1000031e 	bne	r2,zero,169d8 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   169cc:	00800044 	movi	r2,1
   169d0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   169d4:	00000a06 	br	16a00 <OSFlagPost+0x2f8>
   169d8:	00000906 	br	16a00 <OSFlagPost+0x2f8>
   169dc:	e0bff317 	ldw	r2,-52(fp)
   169e0:	e0bff815 	stw	r2,-32(fp)
   169e4:	e0bff817 	ldw	r2,-32(fp)
   169e8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   169ec:	e0bfff17 	ldw	r2,-4(fp)
   169f0:	00c01bc4 	movi	r3,111
   169f4:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   169f8:	0005883a 	mov	r2,zero
   169fc:	00001f06 	br	16a7c <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   16a00:	e0bff117 	ldw	r2,-60(fp)
   16a04:	10800017 	ldw	r2,0(r2)
   16a08:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   16a0c:	e0bff117 	ldw	r2,-60(fp)
   16a10:	103f8a1e 	bne	r2,zero,1683c <__alt_mem_Flash_flash_data+0xf401683c>
   16a14:	e0bff317 	ldw	r2,-52(fp)
   16a18:	e0bff915 	stw	r2,-28(fp)
   16a1c:	e0bff917 	ldw	r2,-28(fp)
   16a20:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   16a24:	e0bff203 	ldbu	r2,-56(fp)
   16a28:	10800058 	cmpnei	r2,r2,1
   16a2c:	1000011e 	bne	r2,zero,16a34 <OSFlagPost+0x32c>
        OS_Sched();
   16a30:	0014f2c0 	call	14f2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16a34:	0005303a 	rdctl	r2,status
   16a38:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16a3c:	e0fffa17 	ldw	r3,-24(fp)
   16a40:	00bfff84 	movi	r2,-2
   16a44:	1884703a 	and	r2,r3,r2
   16a48:	1001703a 	wrctl	status,r2
  
  return context;
   16a4c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   16a50:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   16a54:	e0bffc17 	ldw	r2,-16(fp)
   16a58:	1080020b 	ldhu	r2,8(r2)
   16a5c:	e0bff50d 	sth	r2,-44(fp)
   16a60:	e0bff317 	ldw	r2,-52(fp)
   16a64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a68:	e0bffb17 	ldw	r2,-20(fp)
   16a6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   16a70:	e0bfff17 	ldw	r2,-4(fp)
   16a74:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   16a78:	e0bff50b 	ldhu	r2,-44(fp)
}
   16a7c:	e037883a 	mov	sp,fp
   16a80:	dfc00117 	ldw	ra,4(sp)
   16a84:	df000017 	ldw	fp,0(sp)
   16a88:	dec00204 	addi	sp,sp,8
   16a8c:	f800283a 	ret

00016a90 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   16a90:	defff904 	addi	sp,sp,-28
   16a94:	df000615 	stw	fp,24(sp)
   16a98:	df000604 	addi	fp,sp,24
   16a9c:	e13ffe15 	stw	r4,-8(fp)
   16aa0:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   16aa4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   16aa8:	e0bfff17 	ldw	r2,-4(fp)
   16aac:	1000021e 	bne	r2,zero,16ab8 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   16ab0:	0005883a 	mov	r2,zero
   16ab4:	00002306 	br	16b44 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   16ab8:	e0bffe17 	ldw	r2,-8(fp)
   16abc:	1000051e 	bne	r2,zero,16ad4 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16ac0:	e0bfff17 	ldw	r2,-4(fp)
   16ac4:	00c01b84 	movi	r3,110
   16ac8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16acc:	0005883a 	mov	r2,zero
   16ad0:	00001c06 	br	16b44 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   16ad4:	e0bffe17 	ldw	r2,-8(fp)
   16ad8:	10800003 	ldbu	r2,0(r2)
   16adc:	10803fcc 	andi	r2,r2,255
   16ae0:	10800160 	cmpeqi	r2,r2,5
   16ae4:	1000051e 	bne	r2,zero,16afc <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   16ae8:	e0bfff17 	ldw	r2,-4(fp)
   16aec:	00c00044 	movi	r3,1
   16af0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16af4:	0005883a 	mov	r2,zero
   16af8:	00001206 	br	16b44 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16afc:	0005303a 	rdctl	r2,status
   16b00:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16b04:	e0fffc17 	ldw	r3,-16(fp)
   16b08:	00bfff84 	movi	r2,-2
   16b0c:	1884703a 	and	r2,r3,r2
   16b10:	1001703a 	wrctl	status,r2
  
  return context;
   16b14:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16b18:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   16b1c:	e0bffe17 	ldw	r2,-8(fp)
   16b20:	1080020b 	ldhu	r2,8(r2)
   16b24:	e0bffb0d 	sth	r2,-20(fp)
   16b28:	e0bffa17 	ldw	r2,-24(fp)
   16b2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16b30:	e0bffd17 	ldw	r2,-12(fp)
   16b34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16b38:	e0bfff17 	ldw	r2,-4(fp)
   16b3c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   16b40:	e0bffb0b 	ldhu	r2,-20(fp)
}
   16b44:	e037883a 	mov	sp,fp
   16b48:	df000017 	ldw	fp,0(sp)
   16b4c:	dec00104 	addi	sp,sp,4
   16b50:	f800283a 	ret

00016b54 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   16b54:	defff804 	addi	sp,sp,-32
   16b58:	df000715 	stw	fp,28(sp)
   16b5c:	df000704 	addi	fp,sp,28
   16b60:	e13ffb15 	stw	r4,-20(fp)
   16b64:	e17ffc15 	stw	r5,-16(fp)
   16b68:	3009883a 	mov	r4,r6
   16b6c:	3807883a 	mov	r3,r7
   16b70:	e0800117 	ldw	r2,4(fp)
   16b74:	e13ffd0d 	sth	r4,-12(fp)
   16b78:	e0fffe05 	stb	r3,-8(fp)
   16b7c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   16b80:	008000b4 	movhi	r2,2
   16b84:	1091ce04 	addi	r2,r2,18232
   16b88:	10c00017 	ldw	r3,0(r2)
   16b8c:	008000b4 	movhi	r2,2
   16b90:	1091ce04 	addi	r2,r2,18232
   16b94:	10800017 	ldw	r2,0(r2)
   16b98:	10800c03 	ldbu	r2,48(r2)
   16b9c:	10800814 	ori	r2,r2,32
   16ba0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   16ba4:	008000b4 	movhi	r2,2
   16ba8:	1091ce04 	addi	r2,r2,18232
   16bac:	10800017 	ldw	r2,0(r2)
   16bb0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   16bb4:	008000b4 	movhi	r2,2
   16bb8:	1091ce04 	addi	r2,r2,18232
   16bbc:	10800017 	ldw	r2,0(r2)
   16bc0:	e0ffff0b 	ldhu	r3,-4(fp)
   16bc4:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   16bc8:	008000b4 	movhi	r2,2
   16bcc:	1091ce04 	addi	r2,r2,18232
   16bd0:	10800017 	ldw	r2,0(r2)
   16bd4:	e0fffc17 	ldw	r3,-16(fp)
   16bd8:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   16bdc:	e0bffc17 	ldw	r2,-16(fp)
   16be0:	e0fffd0b 	ldhu	r3,-12(fp)
   16be4:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   16be8:	e0bffc17 	ldw	r2,-16(fp)
   16bec:	e0fffe03 	ldbu	r3,-8(fp)
   16bf0:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   16bf4:	008000b4 	movhi	r2,2
   16bf8:	1091ce04 	addi	r2,r2,18232
   16bfc:	10c00017 	ldw	r3,0(r2)
   16c00:	e0bffc17 	ldw	r2,-16(fp)
   16c04:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   16c08:	e0bffb17 	ldw	r2,-20(fp)
   16c0c:	10c00117 	ldw	r3,4(r2)
   16c10:	e0bffc17 	ldw	r2,-16(fp)
   16c14:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   16c18:	e0bffc17 	ldw	r2,-16(fp)
   16c1c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   16c20:	e0bffc17 	ldw	r2,-16(fp)
   16c24:	e0fffb17 	ldw	r3,-20(fp)
   16c28:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   16c2c:	e0bffb17 	ldw	r2,-20(fp)
   16c30:	10800117 	ldw	r2,4(r2)
   16c34:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   16c38:	e0bff917 	ldw	r2,-28(fp)
   16c3c:	10000326 	beq	r2,zero,16c4c <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   16c40:	e0bff917 	ldw	r2,-28(fp)
   16c44:	e0fffc17 	ldw	r3,-16(fp)
   16c48:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   16c4c:	e0bffb17 	ldw	r2,-20(fp)
   16c50:	e0fffc17 	ldw	r3,-16(fp)
   16c54:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   16c58:	008000b4 	movhi	r2,2
   16c5c:	1091ce04 	addi	r2,r2,18232
   16c60:	10800017 	ldw	r2,0(r2)
   16c64:	10800d03 	ldbu	r2,52(r2)
   16c68:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   16c6c:	e0fffa03 	ldbu	r3,-24(fp)
   16c70:	e13ffa03 	ldbu	r4,-24(fp)
   16c74:	008000b4 	movhi	r2,2
   16c78:	1091cb44 	addi	r2,r2,18221
   16c7c:	1105883a 	add	r2,r2,r4
   16c80:	10800003 	ldbu	r2,0(r2)
   16c84:	1009883a 	mov	r4,r2
   16c88:	008000b4 	movhi	r2,2
   16c8c:	1091ce04 	addi	r2,r2,18232
   16c90:	10800017 	ldw	r2,0(r2)
   16c94:	10800d43 	ldbu	r2,53(r2)
   16c98:	0084303a 	nor	r2,zero,r2
   16c9c:	2084703a 	and	r2,r4,r2
   16ca0:	1009883a 	mov	r4,r2
   16ca4:	008000b4 	movhi	r2,2
   16ca8:	1091cb44 	addi	r2,r2,18221
   16cac:	10c5883a 	add	r2,r2,r3
   16cb0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   16cb4:	e0fffa03 	ldbu	r3,-24(fp)
   16cb8:	008000b4 	movhi	r2,2
   16cbc:	1091cb44 	addi	r2,r2,18221
   16cc0:	10c5883a 	add	r2,r2,r3
   16cc4:	10800003 	ldbu	r2,0(r2)
   16cc8:	10803fcc 	andi	r2,r2,255
   16ccc:	10000e1e 	bne	r2,zero,16d08 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   16cd0:	008000b4 	movhi	r2,2
   16cd4:	1091ce04 	addi	r2,r2,18232
   16cd8:	10800017 	ldw	r2,0(r2)
   16cdc:	10800d83 	ldbu	r2,54(r2)
   16ce0:	0084303a 	nor	r2,zero,r2
   16ce4:	1007883a 	mov	r3,r2
   16ce8:	008000b4 	movhi	r2,2
   16cec:	1091cb04 	addi	r2,r2,18220
   16cf0:	10800003 	ldbu	r2,0(r2)
   16cf4:	1884703a 	and	r2,r3,r2
   16cf8:	1007883a 	mov	r3,r2
   16cfc:	008000b4 	movhi	r2,2
   16d00:	1091cb04 	addi	r2,r2,18220
   16d04:	10c00005 	stb	r3,0(r2)
    }
}
   16d08:	e037883a 	mov	sp,fp
   16d0c:	df000017 	ldw	fp,0(sp)
   16d10:	dec00104 	addi	sp,sp,4
   16d14:	f800283a 	ret

00016d18 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   16d18:	defffb04 	addi	sp,sp,-20
   16d1c:	dfc00415 	stw	ra,16(sp)
   16d20:	df000315 	stw	fp,12(sp)
   16d24:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   16d28:	01000134 	movhi	r4,4
   16d2c:	2111fb04 	addi	r4,r4,18412
   16d30:	0140dc04 	movi	r5,880
   16d34:	0014e780 	call	14e78 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   16d38:	00800134 	movhi	r2,4
   16d3c:	1091fb04 	addi	r2,r2,18412
   16d40:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   16d44:	00800134 	movhi	r2,4
   16d48:	10920604 	addi	r2,r2,18456
   16d4c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   16d50:	e03ffd0d 	sth	zero,-12(fp)
   16d54:	00001306 	br	16da4 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   16d58:	e0bffe17 	ldw	r2,-8(fp)
   16d5c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   16d60:	e0bffe17 	ldw	r2,-8(fp)
   16d64:	e0ffff17 	ldw	r3,-4(fp)
   16d68:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   16d6c:	e0bffe17 	ldw	r2,-8(fp)
   16d70:	00c00fc4 	movi	r3,63
   16d74:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   16d78:	e0bffe17 	ldw	r2,-8(fp)
   16d7c:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   16d80:	e0bffe17 	ldw	r2,-8(fp)
   16d84:	10800b04 	addi	r2,r2,44
   16d88:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   16d8c:	e0bfff17 	ldw	r2,-4(fp)
   16d90:	10800b04 	addi	r2,r2,44
   16d94:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   16d98:	e0bffd0b 	ldhu	r2,-12(fp)
   16d9c:	10800044 	addi	r2,r2,1
   16da0:	e0bffd0d 	sth	r2,-12(fp)
   16da4:	e0bffd0b 	ldhu	r2,-12(fp)
   16da8:	108004f0 	cmpltui	r2,r2,19
   16dac:	103fea1e 	bne	r2,zero,16d58 <__alt_mem_Flash_flash_data+0xf4016d58>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   16db0:	e0bffe17 	ldw	r2,-8(fp)
   16db4:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   16db8:	e0bffe17 	ldw	r2,-8(fp)
   16dbc:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   16dc0:	e0bffe17 	ldw	r2,-8(fp)
   16dc4:	00c00fc4 	movi	r3,63
   16dc8:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   16dcc:	e0bffe17 	ldw	r2,-8(fp)
   16dd0:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   16dd4:	008000b4 	movhi	r2,2
   16dd8:	1091d004 	addi	r2,r2,18240
   16ddc:	00c00134 	movhi	r3,4
   16de0:	18d1fb04 	addi	r3,r3,18412
   16de4:	10c00015 	stw	r3,0(r2)
#endif
}
   16de8:	e037883a 	mov	sp,fp
   16dec:	dfc00117 	ldw	ra,4(sp)
   16df0:	df000017 	ldw	fp,0(sp)
   16df4:	dec00204 	addi	sp,sp,8
   16df8:	f800283a 	ret

00016dfc <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   16dfc:	defffa04 	addi	sp,sp,-24
   16e00:	dfc00515 	stw	ra,20(sp)
   16e04:	df000415 	stw	fp,16(sp)
   16e08:	df000404 	addi	fp,sp,16
   16e0c:	e13ffe15 	stw	r4,-8(fp)
   16e10:	2805883a 	mov	r2,r5
   16e14:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   16e18:	e0bffe17 	ldw	r2,-8(fp)
   16e1c:	10800217 	ldw	r2,8(r2)
   16e20:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   16e24:	e0bffd17 	ldw	r2,-12(fp)
   16e28:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   16e2c:	e0bffd17 	ldw	r2,-12(fp)
   16e30:	e0ffff0b 	ldhu	r3,-4(fp)
   16e34:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   16e38:	e0bffd17 	ldw	r2,-12(fp)
   16e3c:	10c00c03 	ldbu	r3,48(r2)
   16e40:	00bff7c4 	movi	r2,-33
   16e44:	1884703a 	and	r2,r3,r2
   16e48:	1007883a 	mov	r3,r2
   16e4c:	e0bffd17 	ldw	r2,-12(fp)
   16e50:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   16e54:	e0bffd17 	ldw	r2,-12(fp)
   16e58:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   16e5c:	e0bffd17 	ldw	r2,-12(fp)
   16e60:	10800c03 	ldbu	r2,48(r2)
   16e64:	10803fcc 	andi	r2,r2,255
   16e68:	10001f1e 	bne	r2,zero,16ee8 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   16e6c:	e0bffd17 	ldw	r2,-12(fp)
   16e70:	10c00d83 	ldbu	r3,54(r2)
   16e74:	008000b4 	movhi	r2,2
   16e78:	1091cb04 	addi	r2,r2,18220
   16e7c:	10800003 	ldbu	r2,0(r2)
   16e80:	1884b03a 	or	r2,r3,r2
   16e84:	1007883a 	mov	r3,r2
   16e88:	008000b4 	movhi	r2,2
   16e8c:	1091cb04 	addi	r2,r2,18220
   16e90:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   16e94:	e0bffd17 	ldw	r2,-12(fp)
   16e98:	10800d03 	ldbu	r2,52(r2)
   16e9c:	10c03fcc 	andi	r3,r2,255
   16ea0:	e0bffd17 	ldw	r2,-12(fp)
   16ea4:	10800d03 	ldbu	r2,52(r2)
   16ea8:	11003fcc 	andi	r4,r2,255
   16eac:	008000b4 	movhi	r2,2
   16eb0:	1091cb44 	addi	r2,r2,18221
   16eb4:	1105883a 	add	r2,r2,r4
   16eb8:	11000003 	ldbu	r4,0(r2)
   16ebc:	e0bffd17 	ldw	r2,-12(fp)
   16ec0:	10800d43 	ldbu	r2,53(r2)
   16ec4:	2084b03a 	or	r2,r4,r2
   16ec8:	1009883a 	mov	r4,r2
   16ecc:	008000b4 	movhi	r2,2
   16ed0:	1091cb44 	addi	r2,r2,18221
   16ed4:	10c5883a 	add	r2,r2,r3
   16ed8:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   16edc:	00800044 	movi	r2,1
   16ee0:	e0bffc05 	stb	r2,-16(fp)
   16ee4:	00000106 	br	16eec <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   16ee8:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   16eec:	e13ffe17 	ldw	r4,-8(fp)
   16ef0:	0016f0c0 	call	16f0c <OS_FlagUnlink>
    return (sched);
   16ef4:	e0bffc03 	ldbu	r2,-16(fp)
}
   16ef8:	e037883a 	mov	sp,fp
   16efc:	dfc00117 	ldw	ra,4(sp)
   16f00:	df000017 	ldw	fp,0(sp)
   16f04:	dec00204 	addi	sp,sp,8
   16f08:	f800283a 	ret

00016f0c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   16f0c:	defffa04 	addi	sp,sp,-24
   16f10:	df000515 	stw	fp,20(sp)
   16f14:	df000504 	addi	fp,sp,20
   16f18:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   16f1c:	e0bfff17 	ldw	r2,-4(fp)
   16f20:	10800117 	ldw	r2,4(r2)
   16f24:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   16f28:	e0bfff17 	ldw	r2,-4(fp)
   16f2c:	10800017 	ldw	r2,0(r2)
   16f30:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   16f34:	e0bffb17 	ldw	r2,-20(fp)
   16f38:	10000b1e 	bne	r2,zero,16f68 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   16f3c:	e0bfff17 	ldw	r2,-4(fp)
   16f40:	10800317 	ldw	r2,12(r2)
   16f44:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   16f48:	e0bffd17 	ldw	r2,-12(fp)
   16f4c:	e0fffc17 	ldw	r3,-16(fp)
   16f50:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   16f54:	e0bffc17 	ldw	r2,-16(fp)
   16f58:	10000b26 	beq	r2,zero,16f88 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   16f5c:	e0bffc17 	ldw	r2,-16(fp)
   16f60:	10000115 	stw	zero,4(r2)
   16f64:	00000806 	br	16f88 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   16f68:	e0bffb17 	ldw	r2,-20(fp)
   16f6c:	e0fffc17 	ldw	r3,-16(fp)
   16f70:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   16f74:	e0bffc17 	ldw	r2,-16(fp)
   16f78:	10000326 	beq	r2,zero,16f88 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   16f7c:	e0bffc17 	ldw	r2,-16(fp)
   16f80:	e0fffb17 	ldw	r3,-20(fp)
   16f84:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   16f88:	e0bfff17 	ldw	r2,-4(fp)
   16f8c:	10800217 	ldw	r2,8(r2)
   16f90:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   16f94:	e0bffe17 	ldw	r2,-8(fp)
   16f98:	10000a15 	stw	zero,40(r2)
#endif
}
   16f9c:	e037883a 	mov	sp,fp
   16fa0:	df000017 	ldw	fp,0(sp)
   16fa4:	dec00104 	addi	sp,sp,4
   16fa8:	f800283a 	ret

00016fac <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
   16fac:	defffa04 	addi	sp,sp,-24
   16fb0:	df000515 	stw	fp,20(sp)
   16fb4:	df000504 	addi	fp,sp,20
   16fb8:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
   16fbc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
   16fc0:	e0bfff17 	ldw	r2,-4(fp)
   16fc4:	1000021e 	bne	r2,zero,16fd0 <OSMboxAccept+0x24>
        return ((void *)0);
   16fc8:	0005883a 	mov	r2,zero
   16fcc:	00001906 	br	17034 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
   16fd0:	e0bfff17 	ldw	r2,-4(fp)
   16fd4:	10800003 	ldbu	r2,0(r2)
   16fd8:	10803fcc 	andi	r2,r2,255
   16fdc:	10800060 	cmpeqi	r2,r2,1
   16fe0:	1000021e 	bne	r2,zero,16fec <OSMboxAccept+0x40>
        return ((void *)0);
   16fe4:	0005883a 	mov	r2,zero
   16fe8:	00001206 	br	17034 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16fec:	0005303a 	rdctl	r2,status
   16ff0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16ff4:	e0fffd17 	ldw	r3,-12(fp)
   16ff8:	00bfff84 	movi	r2,-2
   16ffc:	1884703a 	and	r2,r3,r2
   17000:	1001703a 	wrctl	status,r2
  
  return context;
   17004:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17008:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
   1700c:	e0bfff17 	ldw	r2,-4(fp)
   17010:	10800117 	ldw	r2,4(r2)
   17014:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
   17018:	e0bfff17 	ldw	r2,-4(fp)
   1701c:	10000115 	stw	zero,4(r2)
   17020:	e0bffb17 	ldw	r2,-20(fp)
   17024:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17028:	e0bffe17 	ldw	r2,-8(fp)
   1702c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
   17030:	e0bffc17 	ldw	r2,-16(fp)
}
   17034:	e037883a 	mov	sp,fp
   17038:	df000017 	ldw	fp,0(sp)
   1703c:	dec00104 	addi	sp,sp,4
   17040:	f800283a 	ret

00017044 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
   17044:	defff904 	addi	sp,sp,-28
   17048:	dfc00615 	stw	ra,24(sp)
   1704c:	df000515 	stw	fp,20(sp)
   17050:	df000504 	addi	fp,sp,20
   17054:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17058:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   1705c:	008000b4 	movhi	r2,2
   17060:	1091cd04 	addi	r2,r2,18228
   17064:	10800003 	ldbu	r2,0(r2)
   17068:	10803fcc 	andi	r2,r2,255
   1706c:	10000226 	beq	r2,zero,17078 <OSMboxCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   17070:	0005883a 	mov	r2,zero
   17074:	00002d06 	br	1712c <OSMboxCreate+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17078:	0005303a 	rdctl	r2,status
   1707c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17080:	e0fffd17 	ldw	r3,-12(fp)
   17084:	00bfff84 	movi	r2,-2
   17088:	1884703a 	and	r2,r3,r2
   1708c:	1001703a 	wrctl	status,r2
  
  return context;
   17090:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17094:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   17098:	008000b4 	movhi	r2,2
   1709c:	1091cc04 	addi	r2,r2,18224
   170a0:	10800017 	ldw	r2,0(r2)
   170a4:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   170a8:	008000b4 	movhi	r2,2
   170ac:	1091cc04 	addi	r2,r2,18224
   170b0:	10800017 	ldw	r2,0(r2)
   170b4:	10000726 	beq	r2,zero,170d4 <OSMboxCreate+0x90>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   170b8:	008000b4 	movhi	r2,2
   170bc:	1091cc04 	addi	r2,r2,18224
   170c0:	10800017 	ldw	r2,0(r2)
   170c4:	10c00117 	ldw	r3,4(r2)
   170c8:	008000b4 	movhi	r2,2
   170cc:	1091cc04 	addi	r2,r2,18224
   170d0:	10c00015 	stw	r3,0(r2)
   170d4:	e0bffb17 	ldw	r2,-20(fp)
   170d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   170dc:	e0bffe17 	ldw	r2,-8(fp)
   170e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
   170e4:	e0bffc17 	ldw	r2,-16(fp)
   170e8:	10000f26 	beq	r2,zero,17128 <OSMboxCreate+0xe4>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
   170ec:	e0bffc17 	ldw	r2,-16(fp)
   170f0:	00c00044 	movi	r3,1
   170f4:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
   170f8:	e0bffc17 	ldw	r2,-16(fp)
   170fc:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
   17100:	e0bffc17 	ldw	r2,-16(fp)
   17104:	e0ffff17 	ldw	r3,-4(fp)
   17108:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
   1710c:	e0bffc17 	ldw	r2,-16(fp)
   17110:	00c00fc4 	movi	r3,63
   17114:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   17118:	e0bffc17 	ldw	r2,-16(fp)
   1711c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
   17120:	e13ffc17 	ldw	r4,-16(fp)
   17124:	0014ab40 	call	14ab4 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
   17128:	e0bffc17 	ldw	r2,-16(fp)
}
   1712c:	e037883a 	mov	sp,fp
   17130:	dfc00117 	ldw	ra,4(sp)
   17134:	df000017 	ldw	fp,0(sp)
   17138:	dec00204 	addi	sp,sp,8
   1713c:	f800283a 	ret

00017140 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   17140:	defff304 	addi	sp,sp,-52
   17144:	dfc00c15 	stw	ra,48(sp)
   17148:	df000b15 	stw	fp,44(sp)
   1714c:	df000b04 	addi	fp,sp,44
   17150:	e13ffd15 	stw	r4,-12(fp)
   17154:	2805883a 	mov	r2,r5
   17158:	e1bfff15 	stw	r6,-4(fp)
   1715c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17160:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   17164:	e0bfff17 	ldw	r2,-4(fp)
   17168:	1000021e 	bne	r2,zero,17174 <OSMboxDel+0x34>
        return (pevent);
   1716c:	e0bffd17 	ldw	r2,-12(fp)
   17170:	00008806 	br	17394 <OSMboxDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17174:	e0bffd17 	ldw	r2,-12(fp)
   17178:	1000051e 	bne	r2,zero,17190 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1717c:	e0bfff17 	ldw	r2,-4(fp)
   17180:	00c00104 	movi	r3,4
   17184:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17188:	e0bffd17 	ldw	r2,-12(fp)
   1718c:	00008106 	br	17394 <OSMboxDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   17190:	e0bffd17 	ldw	r2,-12(fp)
   17194:	10800003 	ldbu	r2,0(r2)
   17198:	10803fcc 	andi	r2,r2,255
   1719c:	10800060 	cmpeqi	r2,r2,1
   171a0:	1000051e 	bne	r2,zero,171b8 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   171a4:	e0bfff17 	ldw	r2,-4(fp)
   171a8:	00c00044 	movi	r3,1
   171ac:	10c00005 	stb	r3,0(r2)
        return (pevent);
   171b0:	e0bffd17 	ldw	r2,-12(fp)
   171b4:	00007706 	br	17394 <OSMboxDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   171b8:	008000b4 	movhi	r2,2
   171bc:	1091cd04 	addi	r2,r2,18228
   171c0:	10800003 	ldbu	r2,0(r2)
   171c4:	10803fcc 	andi	r2,r2,255
   171c8:	10000526 	beq	r2,zero,171e0 <OSMboxDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   171cc:	e0bfff17 	ldw	r2,-4(fp)
   171d0:	00c003c4 	movi	r3,15
   171d4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   171d8:	e0bffd17 	ldw	r2,-12(fp)
   171dc:	00006d06 	br	17394 <OSMboxDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   171e0:	0005303a 	rdctl	r2,status
   171e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   171e8:	e0fff817 	ldw	r3,-32(fp)
   171ec:	00bfff84 	movi	r2,-2
   171f0:	1884703a 	and	r2,r3,r2
   171f4:	1001703a 	wrctl	status,r2
  
  return context;
   171f8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   171fc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
   17200:	e0bffd17 	ldw	r2,-12(fp)
   17204:	10800283 	ldbu	r2,10(r2)
   17208:	10803fcc 	andi	r2,r2,255
   1720c:	10000326 	beq	r2,zero,1721c <OSMboxDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   17210:	00800044 	movi	r2,1
   17214:	e0bff505 	stb	r2,-44(fp)
   17218:	00000106 	br	17220 <OSMboxDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1721c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   17220:	e0bffe03 	ldbu	r2,-8(fp)
   17224:	10000326 	beq	r2,zero,17234 <OSMboxDel+0xf4>
   17228:	10800060 	cmpeqi	r2,r2,1
   1722c:	10002c1e 	bne	r2,zero,172e0 <OSMboxDel+0x1a0>
   17230:	00004d06 	br	17368 <OSMboxDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
   17234:	e0bff503 	ldbu	r2,-44(fp)
   17238:	10001a1e 	bne	r2,zero,172a4 <OSMboxDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1723c:	e0bffd17 	ldw	r2,-12(fp)
   17240:	00c00fc4 	movi	r3,63
   17244:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   17248:	e0bffd17 	ldw	r2,-12(fp)
   1724c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   17250:	e0bffd17 	ldw	r2,-12(fp)
   17254:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   17258:	008000b4 	movhi	r2,2
   1725c:	1091cc04 	addi	r2,r2,18224
   17260:	10c00017 	ldw	r3,0(r2)
   17264:	e0bffd17 	ldw	r2,-12(fp)
   17268:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
   1726c:	e0bffd17 	ldw	r2,-12(fp)
   17270:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
   17274:	008000b4 	movhi	r2,2
   17278:	1091cc04 	addi	r2,r2,18224
   1727c:	e0fffd17 	ldw	r3,-12(fp)
   17280:	10c00015 	stw	r3,0(r2)
   17284:	e0bff717 	ldw	r2,-36(fp)
   17288:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1728c:	e0bff917 	ldw	r2,-28(fp)
   17290:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
   17294:	e0bfff17 	ldw	r2,-4(fp)
   17298:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
   1729c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
   172a0:	00003b06 	br	17390 <OSMboxDel+0x250>
   172a4:	e0bff717 	ldw	r2,-36(fp)
   172a8:	e0bffa15 	stw	r2,-24(fp)
   172ac:	e0bffa17 	ldw	r2,-24(fp)
   172b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
   172b4:	e0bfff17 	ldw	r2,-4(fp)
   172b8:	00c01244 	movi	r3,73
   172bc:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
   172c0:	e0bffd17 	ldw	r2,-12(fp)
   172c4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   172c8:	00003106 	br	17390 <OSMboxDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
   172cc:	e13ffd17 	ldw	r4,-12(fp)
   172d0:	000b883a 	mov	r5,zero
   172d4:	01800084 	movi	r6,2
   172d8:	000f883a 	mov	r7,zero
   172dc:	00145140 	call	14514 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
   172e0:	e0bffd17 	ldw	r2,-12(fp)
   172e4:	10800283 	ldbu	r2,10(r2)
   172e8:	10803fcc 	andi	r2,r2,255
   172ec:	103ff71e 	bne	r2,zero,172cc <__alt_mem_Flash_flash_data+0xf40172cc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   172f0:	e0bffd17 	ldw	r2,-12(fp)
   172f4:	00c00fc4 	movi	r3,63
   172f8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   172fc:	e0bffd17 	ldw	r2,-12(fp)
   17300:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   17304:	e0bffd17 	ldw	r2,-12(fp)
   17308:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   1730c:	008000b4 	movhi	r2,2
   17310:	1091cc04 	addi	r2,r2,18224
   17314:	10c00017 	ldw	r3,0(r2)
   17318:	e0bffd17 	ldw	r2,-12(fp)
   1731c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   17320:	e0bffd17 	ldw	r2,-12(fp)
   17324:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   17328:	008000b4 	movhi	r2,2
   1732c:	1091cc04 	addi	r2,r2,18224
   17330:	e0fffd17 	ldw	r3,-12(fp)
   17334:	10c00015 	stw	r3,0(r2)
   17338:	e0bff717 	ldw	r2,-36(fp)
   1733c:	e0bffb15 	stw	r2,-20(fp)
   17340:	e0bffb17 	ldw	r2,-20(fp)
   17344:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   17348:	e0bff503 	ldbu	r2,-44(fp)
   1734c:	10800058 	cmpnei	r2,r2,1
   17350:	1000011e 	bne	r2,zero,17358 <OSMboxDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   17354:	0014f2c0 	call	14f2c <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
   17358:	e0bfff17 	ldw	r2,-4(fp)
   1735c:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
   17360:	e03ff615 	stw	zero,-40(fp)
             break;
   17364:	00000a06 	br	17390 <OSMboxDel+0x250>
   17368:	e0bff717 	ldw	r2,-36(fp)
   1736c:	e0bffc15 	stw	r2,-16(fp)
   17370:	e0bffc17 	ldw	r2,-16(fp)
   17374:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
   17378:	e0bfff17 	ldw	r2,-4(fp)
   1737c:	00c001c4 	movi	r3,7
   17380:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
   17384:	e0bffd17 	ldw	r2,-12(fp)
   17388:	e0bff615 	stw	r2,-40(fp)
             break;
   1738c:	0001883a 	nop
    }
    return (pevent_return);
   17390:	e0bff617 	ldw	r2,-40(fp)
}
   17394:	e037883a 	mov	sp,fp
   17398:	dfc00117 	ldw	ra,4(sp)
   1739c:	df000017 	ldw	fp,0(sp)
   173a0:	dec00204 	addi	sp,sp,8
   173a4:	f800283a 	ret

000173a8 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   173a8:	defff404 	addi	sp,sp,-48
   173ac:	dfc00b15 	stw	ra,44(sp)
   173b0:	df000a15 	stw	fp,40(sp)
   173b4:	df000a04 	addi	fp,sp,40
   173b8:	e13ffd15 	stw	r4,-12(fp)
   173bc:	2805883a 	mov	r2,r5
   173c0:	e1bfff15 	stw	r6,-4(fp)
   173c4:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   173c8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   173cc:	e0bfff17 	ldw	r2,-4(fp)
   173d0:	1000021e 	bne	r2,zero,173dc <OSMboxPend+0x34>
        return ((void *)0);
   173d4:	0005883a 	mov	r2,zero
   173d8:	00009706 	br	17638 <OSMboxPend+0x290>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   173dc:	e0bffd17 	ldw	r2,-12(fp)
   173e0:	1000051e 	bne	r2,zero,173f8 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   173e4:	e0bfff17 	ldw	r2,-4(fp)
   173e8:	00c00104 	movi	r3,4
   173ec:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   173f0:	0005883a 	mov	r2,zero
   173f4:	00009006 	br	17638 <OSMboxPend+0x290>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   173f8:	e0bffd17 	ldw	r2,-12(fp)
   173fc:	10800003 	ldbu	r2,0(r2)
   17400:	10803fcc 	andi	r2,r2,255
   17404:	10800060 	cmpeqi	r2,r2,1
   17408:	1000051e 	bne	r2,zero,17420 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1740c:	e0bfff17 	ldw	r2,-4(fp)
   17410:	00c00044 	movi	r3,1
   17414:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17418:	0005883a 	mov	r2,zero
   1741c:	00008606 	br	17638 <OSMboxPend+0x290>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   17420:	008000b4 	movhi	r2,2
   17424:	1091cd04 	addi	r2,r2,18228
   17428:	10800003 	ldbu	r2,0(r2)
   1742c:	10803fcc 	andi	r2,r2,255
   17430:	10000526 	beq	r2,zero,17448 <OSMboxPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   17434:	e0bfff17 	ldw	r2,-4(fp)
   17438:	00c00084 	movi	r3,2
   1743c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17440:	0005883a 	mov	r2,zero
   17444:	00007c06 	br	17638 <OSMboxPend+0x290>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   17448:	008000b4 	movhi	r2,2
   1744c:	1091bf04 	addi	r2,r2,18172
   17450:	10800003 	ldbu	r2,0(r2)
   17454:	10803fcc 	andi	r2,r2,255
   17458:	10000526 	beq	r2,zero,17470 <OSMboxPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   1745c:	e0bfff17 	ldw	r2,-4(fp)
   17460:	00c00344 	movi	r3,13
   17464:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17468:	0005883a 	mov	r2,zero
   1746c:	00007206 	br	17638 <OSMboxPend+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17470:	0005303a 	rdctl	r2,status
   17474:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17478:	e0fff817 	ldw	r3,-32(fp)
   1747c:	00bfff84 	movi	r2,-2
   17480:	1884703a 	and	r2,r3,r2
   17484:	1001703a 	wrctl	status,r2
  
  return context;
   17488:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1748c:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
   17490:	e0bffd17 	ldw	r2,-12(fp)
   17494:	10800117 	ldw	r2,4(r2)
   17498:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
   1749c:	e0bff617 	ldw	r2,-40(fp)
   174a0:	10000a26 	beq	r2,zero,174cc <OSMboxPend+0x124>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
   174a4:	e0bffd17 	ldw	r2,-12(fp)
   174a8:	10000115 	stw	zero,4(r2)
   174ac:	e0bff717 	ldw	r2,-36(fp)
   174b0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   174b4:	e0bff917 	ldw	r2,-28(fp)
   174b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   174bc:	e0bfff17 	ldw	r2,-4(fp)
   174c0:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
   174c4:	e0bff617 	ldw	r2,-40(fp)
   174c8:	00005b06 	br	17638 <OSMboxPend+0x290>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
   174cc:	008000b4 	movhi	r2,2
   174d0:	1091ce04 	addi	r2,r2,18232
   174d4:	10c00017 	ldw	r3,0(r2)
   174d8:	008000b4 	movhi	r2,2
   174dc:	1091ce04 	addi	r2,r2,18232
   174e0:	10800017 	ldw	r2,0(r2)
   174e4:	10800c03 	ldbu	r2,48(r2)
   174e8:	10800094 	ori	r2,r2,2
   174ec:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   174f0:	008000b4 	movhi	r2,2
   174f4:	1091ce04 	addi	r2,r2,18232
   174f8:	10800017 	ldw	r2,0(r2)
   174fc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
   17500:	008000b4 	movhi	r2,2
   17504:	1091ce04 	addi	r2,r2,18232
   17508:	10800017 	ldw	r2,0(r2)
   1750c:	e0fffe0b 	ldhu	r3,-8(fp)
   17510:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   17514:	e13ffd17 	ldw	r4,-12(fp)
   17518:	00146ac0 	call	146ac <OS_EventTaskWait>
   1751c:	e0bff717 	ldw	r2,-36(fp)
   17520:	e0bffa15 	stw	r2,-24(fp)
   17524:	e0bffa17 	ldw	r2,-24(fp)
   17528:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
   1752c:	0014f2c0 	call	14f2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17530:	0005303a 	rdctl	r2,status
   17534:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17538:	e0fffb17 	ldw	r3,-20(fp)
   1753c:	00bfff84 	movi	r2,-2
   17540:	1884703a 	and	r2,r3,r2
   17544:	1001703a 	wrctl	status,r2
  
  return context;
   17548:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   1754c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   17550:	008000b4 	movhi	r2,2
   17554:	1091ce04 	addi	r2,r2,18232
   17558:	10800017 	ldw	r2,0(r2)
   1755c:	10800c43 	ldbu	r2,49(r2)
   17560:	10803fcc 	andi	r2,r2,255
   17564:	10000326 	beq	r2,zero,17574 <OSMboxPend+0x1cc>
   17568:	108000a0 	cmpeqi	r2,r2,2
   1756c:	1000091e 	bne	r2,zero,17594 <OSMboxPend+0x1ec>
   17570:	00000d06 	br	175a8 <OSMboxPend+0x200>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
   17574:	008000b4 	movhi	r2,2
   17578:	1091ce04 	addi	r2,r2,18232
   1757c:	10800017 	ldw	r2,0(r2)
   17580:	10800917 	ldw	r2,36(r2)
   17584:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
   17588:	e0bfff17 	ldw	r2,-4(fp)
   1758c:	10000005 	stb	zero,0(r2)
             break;
   17590:	00001006 	br	175d4 <OSMboxPend+0x22c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   17594:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   17598:	e0bfff17 	ldw	r2,-4(fp)
   1759c:	00c00384 	movi	r3,14
   175a0:	10c00005 	stb	r3,0(r2)
             break;
   175a4:	00000b06 	br	175d4 <OSMboxPend+0x22c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   175a8:	008000b4 	movhi	r2,2
   175ac:	1091ce04 	addi	r2,r2,18232
   175b0:	10800017 	ldw	r2,0(r2)
   175b4:	1009883a 	mov	r4,r2
   175b8:	e17ffd17 	ldw	r5,-12(fp)
   175bc:	00149040 	call	14904 <OS_EventTaskRemove>
             pmsg = (void *)0;
   175c0:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   175c4:	e0bfff17 	ldw	r2,-4(fp)
   175c8:	00c00284 	movi	r3,10
   175cc:	10c00005 	stb	r3,0(r2)
             break;
   175d0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   175d4:	008000b4 	movhi	r2,2
   175d8:	1091ce04 	addi	r2,r2,18232
   175dc:	10800017 	ldw	r2,0(r2)
   175e0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   175e4:	008000b4 	movhi	r2,2
   175e8:	1091ce04 	addi	r2,r2,18232
   175ec:	10800017 	ldw	r2,0(r2)
   175f0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   175f4:	008000b4 	movhi	r2,2
   175f8:	1091ce04 	addi	r2,r2,18232
   175fc:	10800017 	ldw	r2,0(r2)
   17600:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   17604:	008000b4 	movhi	r2,2
   17608:	1091ce04 	addi	r2,r2,18232
   1760c:	10800017 	ldw	r2,0(r2)
   17610:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   17614:	008000b4 	movhi	r2,2
   17618:	1091ce04 	addi	r2,r2,18232
   1761c:	10800017 	ldw	r2,0(r2)
   17620:	10000915 	stw	zero,36(r2)
   17624:	e0bff717 	ldw	r2,-36(fp)
   17628:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1762c:	e0bffc17 	ldw	r2,-16(fp)
   17630:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   17634:	e0bff617 	ldw	r2,-40(fp)
}
   17638:	e037883a 	mov	sp,fp
   1763c:	dfc00117 	ldw	ra,4(sp)
   17640:	df000017 	ldw	fp,0(sp)
   17644:	dec00204 	addi	sp,sp,8
   17648:	f800283a 	ret

0001764c <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1764c:	defff604 	addi	sp,sp,-40
   17650:	dfc00915 	stw	ra,36(sp)
   17654:	df000815 	stw	fp,32(sp)
   17658:	df000804 	addi	fp,sp,32
   1765c:	e13ffd15 	stw	r4,-12(fp)
   17660:	2805883a 	mov	r2,r5
   17664:	e1bfff15 	stw	r6,-4(fp)
   17668:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1766c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   17670:	e0bfff17 	ldw	r2,-4(fp)
   17674:	1000021e 	bne	r2,zero,17680 <OSMboxPendAbort+0x34>
        return (0);
   17678:	0005883a 	mov	r2,zero
   1767c:	00004906 	br	177a4 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17680:	e0bffd17 	ldw	r2,-12(fp)
   17684:	1000051e 	bne	r2,zero,1769c <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17688:	e0bfff17 	ldw	r2,-4(fp)
   1768c:	00c00104 	movi	r3,4
   17690:	10c00005 	stb	r3,0(r2)
        return (0);
   17694:	0005883a 	mov	r2,zero
   17698:	00004206 	br	177a4 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   1769c:	e0bffd17 	ldw	r2,-12(fp)
   176a0:	10800003 	ldbu	r2,0(r2)
   176a4:	10803fcc 	andi	r2,r2,255
   176a8:	10800060 	cmpeqi	r2,r2,1
   176ac:	1000051e 	bne	r2,zero,176c4 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   176b0:	e0bfff17 	ldw	r2,-4(fp)
   176b4:	00c00044 	movi	r3,1
   176b8:	10c00005 	stb	r3,0(r2)
        return (0);
   176bc:	0005883a 	mov	r2,zero
   176c0:	00003806 	br	177a4 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   176c4:	0005303a 	rdctl	r2,status
   176c8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   176cc:	e0fffa17 	ldw	r3,-24(fp)
   176d0:	00bfff84 	movi	r2,-2
   176d4:	1884703a 	and	r2,r3,r2
   176d8:	1001703a 	wrctl	status,r2
  
  return context;
   176dc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   176e0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
   176e4:	e0bffd17 	ldw	r2,-12(fp)
   176e8:	10800283 	ldbu	r2,10(r2)
   176ec:	10803fcc 	andi	r2,r2,255
   176f0:	10002526 	beq	r2,zero,17788 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
   176f4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   176f8:	e0bffe03 	ldbu	r2,-8(fp)
   176fc:	10800060 	cmpeqi	r2,r2,1
   17700:	10000e26 	beq	r2,zero,1773c <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   17704:	00000806 	br	17728 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   17708:	e13ffd17 	ldw	r4,-12(fp)
   1770c:	000b883a 	mov	r5,zero
   17710:	01800084 	movi	r6,2
   17714:	01c00084 	movi	r7,2
   17718:	00145140 	call	14514 <OS_EventTaskRdy>
                     nbr_tasks++;
   1771c:	e0bff803 	ldbu	r2,-32(fp)
   17720:	10800044 	addi	r2,r2,1
   17724:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   17728:	e0bffd17 	ldw	r2,-12(fp)
   1772c:	10800283 	ldbu	r2,10(r2)
   17730:	10803fcc 	andi	r2,r2,255
   17734:	103ff41e 	bne	r2,zero,17708 <__alt_mem_Flash_flash_data+0xf4017708>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   17738:	00000906 	br	17760 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   1773c:	e13ffd17 	ldw	r4,-12(fp)
   17740:	000b883a 	mov	r5,zero
   17744:	01800084 	movi	r6,2
   17748:	01c00084 	movi	r7,2
   1774c:	00145140 	call	14514 <OS_EventTaskRdy>
                 nbr_tasks++;
   17750:	e0bff803 	ldbu	r2,-32(fp)
   17754:	10800044 	addi	r2,r2,1
   17758:	e0bff805 	stb	r2,-32(fp)
                 break;
   1775c:	0001883a 	nop
   17760:	e0bff917 	ldw	r2,-28(fp)
   17764:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17768:	e0bffb17 	ldw	r2,-20(fp)
   1776c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   17770:	0014f2c0 	call	14f2c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   17774:	e0bfff17 	ldw	r2,-4(fp)
   17778:	00c00384 	movi	r3,14
   1777c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   17780:	e0bff803 	ldbu	r2,-32(fp)
   17784:	00000706 	br	177a4 <OSMboxPendAbort+0x158>
   17788:	e0bff917 	ldw	r2,-28(fp)
   1778c:	e0bffc15 	stw	r2,-16(fp)
   17790:	e0bffc17 	ldw	r2,-16(fp)
   17794:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17798:	e0bfff17 	ldw	r2,-4(fp)
   1779c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
   177a0:	0005883a 	mov	r2,zero
}
   177a4:	e037883a 	mov	sp,fp
   177a8:	dfc00117 	ldw	ra,4(sp)
   177ac:	df000017 	ldw	fp,0(sp)
   177b0:	dec00204 	addi	sp,sp,8
   177b4:	f800283a 	ret

000177b8 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
   177b8:	defff704 	addi	sp,sp,-36
   177bc:	dfc00815 	stw	ra,32(sp)
   177c0:	df000715 	stw	fp,28(sp)
   177c4:	df000704 	addi	fp,sp,28
   177c8:	e13ffe15 	stw	r4,-8(fp)
   177cc:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   177d0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   177d4:	e0bffe17 	ldw	r2,-8(fp)
   177d8:	1000021e 	bne	r2,zero,177e4 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   177dc:	00800104 	movi	r2,4
   177e0:	00003406 	br	178b4 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   177e4:	e0bfff17 	ldw	r2,-4(fp)
   177e8:	1000021e 	bne	r2,zero,177f4 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
   177ec:	008000c4 	movi	r2,3
   177f0:	00003006 	br	178b4 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   177f4:	e0bffe17 	ldw	r2,-8(fp)
   177f8:	10800003 	ldbu	r2,0(r2)
   177fc:	10803fcc 	andi	r2,r2,255
   17800:	10800060 	cmpeqi	r2,r2,1
   17804:	1000021e 	bne	r2,zero,17810 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
   17808:	00800044 	movi	r2,1
   1780c:	00002906 	br	178b4 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17810:	0005303a 	rdctl	r2,status
   17814:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17818:	e0fffa17 	ldw	r3,-24(fp)
   1781c:	00bfff84 	movi	r2,-2
   17820:	1884703a 	and	r2,r3,r2
   17824:	1001703a 	wrctl	status,r2
  
  return context;
   17828:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1782c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   17830:	e0bffe17 	ldw	r2,-8(fp)
   17834:	10800283 	ldbu	r2,10(r2)
   17838:	10803fcc 	andi	r2,r2,255
   1783c:	10000c26 	beq	r2,zero,17870 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   17840:	e13ffe17 	ldw	r4,-8(fp)
   17844:	e17fff17 	ldw	r5,-4(fp)
   17848:	01800084 	movi	r6,2
   1784c:	000f883a 	mov	r7,zero
   17850:	00145140 	call	14514 <OS_EventTaskRdy>
   17854:	e0bff917 	ldw	r2,-28(fp)
   17858:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1785c:	e0bffb17 	ldw	r2,-20(fp)
   17860:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   17864:	0014f2c0 	call	14f2c <OS_Sched>
        return (OS_ERR_NONE);
   17868:	0005883a 	mov	r2,zero
   1786c:	00001106 	br	178b4 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   17870:	e0bffe17 	ldw	r2,-8(fp)
   17874:	10800117 	ldw	r2,4(r2)
   17878:	10000626 	beq	r2,zero,17894 <OSMboxPost+0xdc>
   1787c:	e0bff917 	ldw	r2,-28(fp)
   17880:	e0bffc15 	stw	r2,-16(fp)
   17884:	e0bffc17 	ldw	r2,-16(fp)
   17888:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   1788c:	00800504 	movi	r2,20
   17890:	00000806 	br	178b4 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   17894:	e0bffe17 	ldw	r2,-8(fp)
   17898:	e0ffff17 	ldw	r3,-4(fp)
   1789c:	10c00115 	stw	r3,4(r2)
   178a0:	e0bff917 	ldw	r2,-28(fp)
   178a4:	e0bffd15 	stw	r2,-12(fp)
   178a8:	e0bffd17 	ldw	r2,-12(fp)
   178ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   178b0:	0005883a 	mov	r2,zero
}
   178b4:	e037883a 	mov	sp,fp
   178b8:	dfc00117 	ldw	ra,4(sp)
   178bc:	df000017 	ldw	fp,0(sp)
   178c0:	dec00204 	addi	sp,sp,8
   178c4:	f800283a 	ret

000178c8 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   178c8:	defff604 	addi	sp,sp,-40
   178cc:	dfc00915 	stw	ra,36(sp)
   178d0:	df000815 	stw	fp,32(sp)
   178d4:	df000804 	addi	fp,sp,32
   178d8:	e13ffd15 	stw	r4,-12(fp)
   178dc:	e17ffe15 	stw	r5,-8(fp)
   178e0:	3005883a 	mov	r2,r6
   178e4:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   178e8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   178ec:	e0bffd17 	ldw	r2,-12(fp)
   178f0:	1000021e 	bne	r2,zero,178fc <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   178f4:	00800104 	movi	r2,4
   178f8:	00004506 	br	17a10 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   178fc:	e0bffe17 	ldw	r2,-8(fp)
   17900:	1000021e 	bne	r2,zero,1790c <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
   17904:	008000c4 	movi	r2,3
   17908:	00004106 	br	17a10 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   1790c:	e0bffd17 	ldw	r2,-12(fp)
   17910:	10800003 	ldbu	r2,0(r2)
   17914:	10803fcc 	andi	r2,r2,255
   17918:	10800060 	cmpeqi	r2,r2,1
   1791c:	1000021e 	bne	r2,zero,17928 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
   17920:	00800044 	movi	r2,1
   17924:	00003a06 	br	17a10 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17928:	0005303a 	rdctl	r2,status
   1792c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17930:	e0fff917 	ldw	r3,-28(fp)
   17934:	00bfff84 	movi	r2,-2
   17938:	1884703a 	and	r2,r3,r2
   1793c:	1001703a 	wrctl	status,r2
  
  return context;
   17940:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   17944:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   17948:	e0bffd17 	ldw	r2,-12(fp)
   1794c:	10800283 	ldbu	r2,10(r2)
   17950:	10803fcc 	andi	r2,r2,255
   17954:	10001d26 	beq	r2,zero,179cc <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   17958:	e0bfff03 	ldbu	r2,-4(fp)
   1795c:	1080004c 	andi	r2,r2,1
   17960:	10000b26 	beq	r2,zero,17990 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   17964:	00000506 	br	1797c <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   17968:	e13ffd17 	ldw	r4,-12(fp)
   1796c:	e17ffe17 	ldw	r5,-8(fp)
   17970:	01800084 	movi	r6,2
   17974:	000f883a 	mov	r7,zero
   17978:	00145140 	call	14514 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   1797c:	e0bffd17 	ldw	r2,-12(fp)
   17980:	10800283 	ldbu	r2,10(r2)
   17984:	10803fcc 	andi	r2,r2,255
   17988:	103ff71e 	bne	r2,zero,17968 <__alt_mem_Flash_flash_data+0xf4017968>
   1798c:	00000506 	br	179a4 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   17990:	e13ffd17 	ldw	r4,-12(fp)
   17994:	e17ffe17 	ldw	r5,-8(fp)
   17998:	01800084 	movi	r6,2
   1799c:	000f883a 	mov	r7,zero
   179a0:	00145140 	call	14514 <OS_EventTaskRdy>
   179a4:	e0bff817 	ldw	r2,-32(fp)
   179a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   179ac:	e0bffa17 	ldw	r2,-24(fp)
   179b0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   179b4:	e0bfff03 	ldbu	r2,-4(fp)
   179b8:	1080010c 	andi	r2,r2,4
   179bc:	1000011e 	bne	r2,zero,179c4 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
   179c0:	0014f2c0 	call	14f2c <OS_Sched>
        }
        return (OS_ERR_NONE);
   179c4:	0005883a 	mov	r2,zero
   179c8:	00001106 	br	17a10 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   179cc:	e0bffd17 	ldw	r2,-12(fp)
   179d0:	10800117 	ldw	r2,4(r2)
   179d4:	10000626 	beq	r2,zero,179f0 <OSMboxPostOpt+0x128>
   179d8:	e0bff817 	ldw	r2,-32(fp)
   179dc:	e0bffb15 	stw	r2,-20(fp)
   179e0:	e0bffb17 	ldw	r2,-20(fp)
   179e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   179e8:	00800504 	movi	r2,20
   179ec:	00000806 	br	17a10 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   179f0:	e0bffd17 	ldw	r2,-12(fp)
   179f4:	e0fffe17 	ldw	r3,-8(fp)
   179f8:	10c00115 	stw	r3,4(r2)
   179fc:	e0bff817 	ldw	r2,-32(fp)
   17a00:	e0bffc15 	stw	r2,-16(fp)
   17a04:	e0bffc17 	ldw	r2,-16(fp)
   17a08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17a0c:	0005883a 	mov	r2,zero
}
   17a10:	e037883a 	mov	sp,fp
   17a14:	dfc00117 	ldw	ra,4(sp)
   17a18:	df000017 	ldw	fp,0(sp)
   17a1c:	dec00204 	addi	sp,sp,8
   17a20:	f800283a 	ret

00017a24 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
   17a24:	defff704 	addi	sp,sp,-36
   17a28:	df000815 	stw	fp,32(sp)
   17a2c:	df000804 	addi	fp,sp,32
   17a30:	e13ffe15 	stw	r4,-8(fp)
   17a34:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17a38:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17a3c:	e0bffe17 	ldw	r2,-8(fp)
   17a40:	1000021e 	bne	r2,zero,17a4c <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   17a44:	00800104 	movi	r2,4
   17a48:	00003606 	br	17b24 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
   17a4c:	e0bfff17 	ldw	r2,-4(fp)
   17a50:	1000021e 	bne	r2,zero,17a5c <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   17a54:	00800244 	movi	r2,9
   17a58:	00003206 	br	17b24 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   17a5c:	e0bffe17 	ldw	r2,-8(fp)
   17a60:	10800003 	ldbu	r2,0(r2)
   17a64:	10803fcc 	andi	r2,r2,255
   17a68:	10800060 	cmpeqi	r2,r2,1
   17a6c:	1000021e 	bne	r2,zero,17a78 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   17a70:	00800044 	movi	r2,1
   17a74:	00002b06 	br	17b24 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17a78:	0005303a 	rdctl	r2,status
   17a7c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17a80:	e0fffc17 	ldw	r3,-16(fp)
   17a84:	00bfff84 	movi	r2,-2
   17a88:	1884703a 	and	r2,r3,r2
   17a8c:	1001703a 	wrctl	status,r2
  
  return context;
   17a90:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17a94:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
   17a98:	e0bffe17 	ldw	r2,-8(fp)
   17a9c:	10c00283 	ldbu	r3,10(r2)
   17aa0:	e0bfff17 	ldw	r2,-4(fp)
   17aa4:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
   17aa8:	e0bffe17 	ldw	r2,-8(fp)
   17aac:	108002c4 	addi	r2,r2,11
   17ab0:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
   17ab4:	e0bfff17 	ldw	r2,-4(fp)
   17ab8:	10800104 	addi	r2,r2,4
   17abc:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   17ac0:	e03ff805 	stb	zero,-32(fp)
   17ac4:	00000b06 	br	17af4 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
   17ac8:	e0bffa17 	ldw	r2,-24(fp)
   17acc:	10c00044 	addi	r3,r2,1
   17ad0:	e0fffa15 	stw	r3,-24(fp)
   17ad4:	e0fff917 	ldw	r3,-28(fp)
   17ad8:	19000044 	addi	r4,r3,1
   17adc:	e13ff915 	stw	r4,-28(fp)
   17ae0:	18c00003 	ldbu	r3,0(r3)
   17ae4:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   17ae8:	e0bff803 	ldbu	r2,-32(fp)
   17aec:	10800044 	addi	r2,r2,1
   17af0:	e0bff805 	stb	r2,-32(fp)
   17af4:	e0bff803 	ldbu	r2,-32(fp)
   17af8:	108000f0 	cmpltui	r2,r2,3
   17afc:	103ff21e 	bne	r2,zero,17ac8 <__alt_mem_Flash_flash_data+0xf4017ac8>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
   17b00:	e0bffe17 	ldw	r2,-8(fp)
   17b04:	10c00117 	ldw	r3,4(r2)
   17b08:	e0bfff17 	ldw	r2,-4(fp)
   17b0c:	10c00015 	stw	r3,0(r2)
   17b10:	e0bffb17 	ldw	r2,-20(fp)
   17b14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17b18:	e0bffd17 	ldw	r2,-12(fp)
   17b1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17b20:	0005883a 	mov	r2,zero
}
   17b24:	e037883a 	mov	sp,fp
   17b28:	df000017 	ldw	fp,0(sp)
   17b2c:	dec00104 	addi	sp,sp,4
   17b30:	f800283a 	ret

00017b34 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   17b34:	defff404 	addi	sp,sp,-48
   17b38:	df000b15 	stw	fp,44(sp)
   17b3c:	df000b04 	addi	fp,sp,44
   17b40:	e13ffc15 	stw	r4,-16(fp)
   17b44:	e17ffd15 	stw	r5,-12(fp)
   17b48:	e1bffe15 	stw	r6,-8(fp)
   17b4c:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17b50:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   17b54:	e0bfff17 	ldw	r2,-4(fp)
   17b58:	1000021e 	bne	r2,zero,17b64 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   17b5c:	0005883a 	mov	r2,zero
   17b60:	00006d06 	br	17d18 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   17b64:	e0bffc17 	ldw	r2,-16(fp)
   17b68:	1000051e 	bne	r2,zero,17b80 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   17b6c:	e0bfff17 	ldw	r2,-4(fp)
   17b70:	00c01884 	movi	r3,98
   17b74:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   17b78:	0005883a 	mov	r2,zero
   17b7c:	00006606 	br	17d18 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   17b80:	e0bffc17 	ldw	r2,-16(fp)
   17b84:	108000cc 	andi	r2,r2,3
   17b88:	10000526 	beq	r2,zero,17ba0 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   17b8c:	e0bfff17 	ldw	r2,-4(fp)
   17b90:	00c01884 	movi	r3,98
   17b94:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   17b98:	0005883a 	mov	r2,zero
   17b9c:	00005e06 	br	17d18 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   17ba0:	e0bffd17 	ldw	r2,-12(fp)
   17ba4:	108000a8 	cmpgeui	r2,r2,2
   17ba8:	1000051e 	bne	r2,zero,17bc0 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   17bac:	e0bfff17 	ldw	r2,-4(fp)
   17bb0:	00c016c4 	movi	r3,91
   17bb4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   17bb8:	0005883a 	mov	r2,zero
   17bbc:	00005606 	br	17d18 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   17bc0:	e0bffe17 	ldw	r2,-8(fp)
   17bc4:	10800128 	cmpgeui	r2,r2,4
   17bc8:	1000051e 	bne	r2,zero,17be0 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   17bcc:	e0bfff17 	ldw	r2,-4(fp)
   17bd0:	00c01704 	movi	r3,92
   17bd4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   17bd8:	0005883a 	mov	r2,zero
   17bdc:	00004e06 	br	17d18 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17be0:	0005303a 	rdctl	r2,status
   17be4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17be8:	e0fffa17 	ldw	r3,-24(fp)
   17bec:	00bfff84 	movi	r2,-2
   17bf0:	1884703a 	and	r2,r3,r2
   17bf4:	1001703a 	wrctl	status,r2
  
  return context;
   17bf8:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17bfc:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   17c00:	008000b4 	movhi	r2,2
   17c04:	1091c804 	addi	r2,r2,18208
   17c08:	10800017 	ldw	r2,0(r2)
   17c0c:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   17c10:	008000b4 	movhi	r2,2
   17c14:	1091c804 	addi	r2,r2,18208
   17c18:	10800017 	ldw	r2,0(r2)
   17c1c:	10000726 	beq	r2,zero,17c3c <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   17c20:	008000b4 	movhi	r2,2
   17c24:	1091c804 	addi	r2,r2,18208
   17c28:	10800017 	ldw	r2,0(r2)
   17c2c:	10c00117 	ldw	r3,4(r2)
   17c30:	008000b4 	movhi	r2,2
   17c34:	1091c804 	addi	r2,r2,18208
   17c38:	10c00015 	stw	r3,0(r2)
   17c3c:	e0bff817 	ldw	r2,-32(fp)
   17c40:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17c44:	e0bffb17 	ldw	r2,-20(fp)
   17c48:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   17c4c:	e0bff917 	ldw	r2,-28(fp)
   17c50:	1000051e 	bne	r2,zero,17c68 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   17c54:	e0bfff17 	ldw	r2,-4(fp)
   17c58:	00c01684 	movi	r3,90
   17c5c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   17c60:	0005883a 	mov	r2,zero
   17c64:	00002c06 	br	17d18 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   17c68:	e0bffc17 	ldw	r2,-16(fp)
   17c6c:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   17c70:	e0fffc17 	ldw	r3,-16(fp)
   17c74:	e0bffe17 	ldw	r2,-8(fp)
   17c78:	1885883a 	add	r2,r3,r2
   17c7c:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   17c80:	e03ff715 	stw	zero,-36(fp)
   17c84:	00000c06 	br	17cb8 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   17c88:	e0bff617 	ldw	r2,-40(fp)
   17c8c:	e0fff517 	ldw	r3,-44(fp)
   17c90:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   17c94:	e0bff517 	ldw	r2,-44(fp)
   17c98:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   17c9c:	e0fff517 	ldw	r3,-44(fp)
   17ca0:	e0bffe17 	ldw	r2,-8(fp)
   17ca4:	1885883a 	add	r2,r3,r2
   17ca8:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   17cac:	e0bff717 	ldw	r2,-36(fp)
   17cb0:	10800044 	addi	r2,r2,1
   17cb4:	e0bff715 	stw	r2,-36(fp)
   17cb8:	e0bffd17 	ldw	r2,-12(fp)
   17cbc:	10bfffc4 	addi	r2,r2,-1
   17cc0:	e0fff717 	ldw	r3,-36(fp)
   17cc4:	18bff036 	bltu	r3,r2,17c88 <__alt_mem_Flash_flash_data+0xf4017c88>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   17cc8:	e0bff617 	ldw	r2,-40(fp)
   17ccc:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   17cd0:	e0bff917 	ldw	r2,-28(fp)
   17cd4:	e0fffc17 	ldw	r3,-16(fp)
   17cd8:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   17cdc:	e0bff917 	ldw	r2,-28(fp)
   17ce0:	e0fffc17 	ldw	r3,-16(fp)
   17ce4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   17ce8:	e0bff917 	ldw	r2,-28(fp)
   17cec:	e0fffd17 	ldw	r3,-12(fp)
   17cf0:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   17cf4:	e0bff917 	ldw	r2,-28(fp)
   17cf8:	e0fffd17 	ldw	r3,-12(fp)
   17cfc:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   17d00:	e0bff917 	ldw	r2,-28(fp)
   17d04:	e0fffe17 	ldw	r3,-8(fp)
   17d08:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   17d0c:	e0bfff17 	ldw	r2,-4(fp)
   17d10:	10000005 	stb	zero,0(r2)
    return (pmem);
   17d14:	e0bff917 	ldw	r2,-28(fp)
}
   17d18:	e037883a 	mov	sp,fp
   17d1c:	df000017 	ldw	fp,0(sp)
   17d20:	dec00104 	addi	sp,sp,4
   17d24:	f800283a 	ret

00017d28 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   17d28:	defff804 	addi	sp,sp,-32
   17d2c:	df000715 	stw	fp,28(sp)
   17d30:	df000704 	addi	fp,sp,28
   17d34:	e13ffe15 	stw	r4,-8(fp)
   17d38:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17d3c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   17d40:	e0bfff17 	ldw	r2,-4(fp)
   17d44:	1000021e 	bne	r2,zero,17d50 <OSMemGet+0x28>
        return ((void *)0);
   17d48:	0005883a 	mov	r2,zero
   17d4c:	00002e06 	br	17e08 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   17d50:	e0bffe17 	ldw	r2,-8(fp)
   17d54:	1000051e 	bne	r2,zero,17d6c <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   17d58:	e0bfff17 	ldw	r2,-4(fp)
   17d5c:	00c01804 	movi	r3,96
   17d60:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17d64:	0005883a 	mov	r2,zero
   17d68:	00002706 	br	17e08 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17d6c:	0005303a 	rdctl	r2,status
   17d70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17d74:	e0fffb17 	ldw	r3,-20(fp)
   17d78:	00bfff84 	movi	r2,-2
   17d7c:	1884703a 	and	r2,r3,r2
   17d80:	1001703a 	wrctl	status,r2
  
  return context;
   17d84:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17d88:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   17d8c:	e0bffe17 	ldw	r2,-8(fp)
   17d90:	10800417 	ldw	r2,16(r2)
   17d94:	10001426 	beq	r2,zero,17de8 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   17d98:	e0bffe17 	ldw	r2,-8(fp)
   17d9c:	10800117 	ldw	r2,4(r2)
   17da0:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   17da4:	e0bffa17 	ldw	r2,-24(fp)
   17da8:	10c00017 	ldw	r3,0(r2)
   17dac:	e0bffe17 	ldw	r2,-8(fp)
   17db0:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   17db4:	e0bffe17 	ldw	r2,-8(fp)
   17db8:	10800417 	ldw	r2,16(r2)
   17dbc:	10ffffc4 	addi	r3,r2,-1
   17dc0:	e0bffe17 	ldw	r2,-8(fp)
   17dc4:	10c00415 	stw	r3,16(r2)
   17dc8:	e0bff917 	ldw	r2,-28(fp)
   17dcc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17dd0:	e0bffc17 	ldw	r2,-16(fp)
   17dd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   17dd8:	e0bfff17 	ldw	r2,-4(fp)
   17ddc:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   17de0:	e0bffa17 	ldw	r2,-24(fp)
   17de4:	00000806 	br	17e08 <OSMemGet+0xe0>
   17de8:	e0bff917 	ldw	r2,-28(fp)
   17dec:	e0bffd15 	stw	r2,-12(fp)
   17df0:	e0bffd17 	ldw	r2,-12(fp)
   17df4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   17df8:	e0bfff17 	ldw	r2,-4(fp)
   17dfc:	00c01744 	movi	r3,93
   17e00:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   17e04:	0005883a 	mov	r2,zero
}
   17e08:	e037883a 	mov	sp,fp
   17e0c:	df000017 	ldw	fp,0(sp)
   17e10:	dec00104 	addi	sp,sp,4
   17e14:	f800283a 	ret

00017e18 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   17e18:	defff704 	addi	sp,sp,-36
   17e1c:	dfc00815 	stw	ra,32(sp)
   17e20:	df000715 	stw	fp,28(sp)
   17e24:	df000704 	addi	fp,sp,28
   17e28:	e13ffd15 	stw	r4,-12(fp)
   17e2c:	e17ffe15 	stw	r5,-8(fp)
   17e30:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17e34:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   17e38:	e0bfff17 	ldw	r2,-4(fp)
   17e3c:	1000021e 	bne	r2,zero,17e48 <OSMemNameGet+0x30>
        return (0);
   17e40:	0005883a 	mov	r2,zero
   17e44:	00002d06 	br	17efc <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   17e48:	e0bffd17 	ldw	r2,-12(fp)
   17e4c:	1000051e 	bne	r2,zero,17e64 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   17e50:	e0bfff17 	ldw	r2,-4(fp)
   17e54:	00c01804 	movi	r3,96
   17e58:	10c00005 	stb	r3,0(r2)
        return (0);
   17e5c:	0005883a 	mov	r2,zero
   17e60:	00002606 	br	17efc <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   17e64:	e0bffe17 	ldw	r2,-8(fp)
   17e68:	1000051e 	bne	r2,zero,17e80 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   17e6c:	e0bfff17 	ldw	r2,-4(fp)
   17e70:	00c00304 	movi	r3,12
   17e74:	10c00005 	stb	r3,0(r2)
        return (0);
   17e78:	0005883a 	mov	r2,zero
   17e7c:	00001f06 	br	17efc <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   17e80:	008000b4 	movhi	r2,2
   17e84:	1091cd04 	addi	r2,r2,18228
   17e88:	10800003 	ldbu	r2,0(r2)
   17e8c:	10803fcc 	andi	r2,r2,255
   17e90:	10000526 	beq	r2,zero,17ea8 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   17e94:	e0bfff17 	ldw	r2,-4(fp)
   17e98:	00c00444 	movi	r3,17
   17e9c:	10c00005 	stb	r3,0(r2)
        return (0);
   17ea0:	0005883a 	mov	r2,zero
   17ea4:	00001506 	br	17efc <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17ea8:	0005303a 	rdctl	r2,status
   17eac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17eb0:	e0fffb17 	ldw	r3,-20(fp)
   17eb4:	00bfff84 	movi	r2,-2
   17eb8:	1884703a 	and	r2,r3,r2
   17ebc:	1001703a 	wrctl	status,r2
  
  return context;
   17ec0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   17ec4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   17ec8:	e0bffd17 	ldw	r2,-12(fp)
   17ecc:	10800504 	addi	r2,r2,20
   17ed0:	e13ffe17 	ldw	r4,-8(fp)
   17ed4:	100b883a 	mov	r5,r2
   17ed8:	00150680 	call	15068 <OS_StrCopy>
   17edc:	e0bffa05 	stb	r2,-24(fp)
   17ee0:	e0bff917 	ldw	r2,-28(fp)
   17ee4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17ee8:	e0bffc17 	ldw	r2,-16(fp)
   17eec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17ef0:	e0bfff17 	ldw	r2,-4(fp)
   17ef4:	10000005 	stb	zero,0(r2)
    return (len);
   17ef8:	e0bffa03 	ldbu	r2,-24(fp)
}
   17efc:	e037883a 	mov	sp,fp
   17f00:	dfc00117 	ldw	ra,4(sp)
   17f04:	df000017 	ldw	fp,0(sp)
   17f08:	dec00204 	addi	sp,sp,8
   17f0c:	f800283a 	ret

00017f10 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   17f10:	defff604 	addi	sp,sp,-40
   17f14:	dfc00915 	stw	ra,36(sp)
   17f18:	df000815 	stw	fp,32(sp)
   17f1c:	df000804 	addi	fp,sp,32
   17f20:	e13ffd15 	stw	r4,-12(fp)
   17f24:	e17ffe15 	stw	r5,-8(fp)
   17f28:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17f2c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   17f30:	e0bfff17 	ldw	r2,-4(fp)
   17f34:	1000011e 	bne	r2,zero,17f3c <OSMemNameSet+0x2c>
        return;
   17f38:	00003606 	br	18014 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   17f3c:	e0bffd17 	ldw	r2,-12(fp)
   17f40:	1000041e 	bne	r2,zero,17f54 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   17f44:	e0bfff17 	ldw	r2,-4(fp)
   17f48:	00c01804 	movi	r3,96
   17f4c:	10c00005 	stb	r3,0(r2)
        return;
   17f50:	00003006 	br	18014 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   17f54:	e0bffe17 	ldw	r2,-8(fp)
   17f58:	1000041e 	bne	r2,zero,17f6c <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   17f5c:	e0bfff17 	ldw	r2,-4(fp)
   17f60:	00c00304 	movi	r3,12
   17f64:	10c00005 	stb	r3,0(r2)
        return;
   17f68:	00002a06 	br	18014 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   17f6c:	008000b4 	movhi	r2,2
   17f70:	1091cd04 	addi	r2,r2,18228
   17f74:	10800003 	ldbu	r2,0(r2)
   17f78:	10803fcc 	andi	r2,r2,255
   17f7c:	10000426 	beq	r2,zero,17f90 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   17f80:	e0bfff17 	ldw	r2,-4(fp)
   17f84:	00c00484 	movi	r3,18
   17f88:	10c00005 	stb	r3,0(r2)
        return;
   17f8c:	00002106 	br	18014 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17f90:	0005303a 	rdctl	r2,status
   17f94:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17f98:	e0fffa17 	ldw	r3,-24(fp)
   17f9c:	00bfff84 	movi	r2,-2
   17fa0:	1884703a 	and	r2,r3,r2
   17fa4:	1001703a 	wrctl	status,r2
  
  return context;
   17fa8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   17fac:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   17fb0:	e13ffe17 	ldw	r4,-8(fp)
   17fb4:	00150dc0 	call	150dc <OS_StrLen>
   17fb8:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   17fbc:	e0bff903 	ldbu	r2,-28(fp)
   17fc0:	10800830 	cmpltui	r2,r2,32
   17fc4:	1000081e 	bne	r2,zero,17fe8 <OSMemNameSet+0xd8>
   17fc8:	e0bff817 	ldw	r2,-32(fp)
   17fcc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17fd0:	e0bffb17 	ldw	r2,-20(fp)
   17fd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   17fd8:	e0bfff17 	ldw	r2,-4(fp)
   17fdc:	00c018c4 	movi	r3,99
   17fe0:	10c00005 	stb	r3,0(r2)
        return;
   17fe4:	00000b06 	br	18014 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   17fe8:	e0bffd17 	ldw	r2,-12(fp)
   17fec:	10800504 	addi	r2,r2,20
   17ff0:	1009883a 	mov	r4,r2
   17ff4:	e17ffe17 	ldw	r5,-8(fp)
   17ff8:	00150680 	call	15068 <OS_StrCopy>
   17ffc:	e0bff817 	ldw	r2,-32(fp)
   18000:	e0bffc15 	stw	r2,-16(fp)
   18004:	e0bffc17 	ldw	r2,-16(fp)
   18008:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1800c:	e0bfff17 	ldw	r2,-4(fp)
   18010:	10000005 	stb	zero,0(r2)
}
   18014:	e037883a 	mov	sp,fp
   18018:	dfc00117 	ldw	ra,4(sp)
   1801c:	df000017 	ldw	fp,0(sp)
   18020:	dec00204 	addi	sp,sp,8
   18024:	f800283a 	ret

00018028 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   18028:	defff904 	addi	sp,sp,-28
   1802c:	df000615 	stw	fp,24(sp)
   18030:	df000604 	addi	fp,sp,24
   18034:	e13ffe15 	stw	r4,-8(fp)
   18038:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1803c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   18040:	e0bffe17 	ldw	r2,-8(fp)
   18044:	1000021e 	bne	r2,zero,18050 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   18048:	00801804 	movi	r2,96
   1804c:	00002806 	br	180f0 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   18050:	e0bfff17 	ldw	r2,-4(fp)
   18054:	1000021e 	bne	r2,zero,18060 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   18058:	008017c4 	movi	r2,95
   1805c:	00002406 	br	180f0 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18060:	0005303a 	rdctl	r2,status
   18064:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18068:	e0fffb17 	ldw	r3,-20(fp)
   1806c:	00bfff84 	movi	r2,-2
   18070:	1884703a 	and	r2,r3,r2
   18074:	1001703a 	wrctl	status,r2
  
  return context;
   18078:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1807c:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   18080:	e0bffe17 	ldw	r2,-8(fp)
   18084:	10c00417 	ldw	r3,16(r2)
   18088:	e0bffe17 	ldw	r2,-8(fp)
   1808c:	10800317 	ldw	r2,12(r2)
   18090:	18800636 	bltu	r3,r2,180ac <OSMemPut+0x84>
   18094:	e0bffa17 	ldw	r2,-24(fp)
   18098:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1809c:	e0bffc17 	ldw	r2,-16(fp)
   180a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   180a4:	00801784 	movi	r2,94
   180a8:	00001106 	br	180f0 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   180ac:	e0bffe17 	ldw	r2,-8(fp)
   180b0:	10c00117 	ldw	r3,4(r2)
   180b4:	e0bfff17 	ldw	r2,-4(fp)
   180b8:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   180bc:	e0bffe17 	ldw	r2,-8(fp)
   180c0:	e0ffff17 	ldw	r3,-4(fp)
   180c4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   180c8:	e0bffe17 	ldw	r2,-8(fp)
   180cc:	10800417 	ldw	r2,16(r2)
   180d0:	10c00044 	addi	r3,r2,1
   180d4:	e0bffe17 	ldw	r2,-8(fp)
   180d8:	10c00415 	stw	r3,16(r2)
   180dc:	e0bffa17 	ldw	r2,-24(fp)
   180e0:	e0bffd15 	stw	r2,-12(fp)
   180e4:	e0bffd17 	ldw	r2,-12(fp)
   180e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   180ec:	0005883a 	mov	r2,zero
}
   180f0:	e037883a 	mov	sp,fp
   180f4:	df000017 	ldw	fp,0(sp)
   180f8:	dec00104 	addi	sp,sp,4
   180fc:	f800283a 	ret

00018100 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   18100:	defffa04 	addi	sp,sp,-24
   18104:	df000515 	stw	fp,20(sp)
   18108:	df000504 	addi	fp,sp,20
   1810c:	e13ffe15 	stw	r4,-8(fp)
   18110:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18114:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   18118:	e0bffe17 	ldw	r2,-8(fp)
   1811c:	1000021e 	bne	r2,zero,18128 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   18120:	00801804 	movi	r2,96
   18124:	00002c06 	br	181d8 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   18128:	e0bfff17 	ldw	r2,-4(fp)
   1812c:	1000021e 	bne	r2,zero,18138 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   18130:	00801844 	movi	r2,97
   18134:	00002806 	br	181d8 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18138:	0005303a 	rdctl	r2,status
   1813c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18140:	e0fffc17 	ldw	r3,-16(fp)
   18144:	00bfff84 	movi	r2,-2
   18148:	1884703a 	and	r2,r3,r2
   1814c:	1001703a 	wrctl	status,r2
  
  return context;
   18150:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18154:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   18158:	e0bffe17 	ldw	r2,-8(fp)
   1815c:	10c00017 	ldw	r3,0(r2)
   18160:	e0bfff17 	ldw	r2,-4(fp)
   18164:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   18168:	e0bffe17 	ldw	r2,-8(fp)
   1816c:	10c00117 	ldw	r3,4(r2)
   18170:	e0bfff17 	ldw	r2,-4(fp)
   18174:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   18178:	e0bffe17 	ldw	r2,-8(fp)
   1817c:	10c00217 	ldw	r3,8(r2)
   18180:	e0bfff17 	ldw	r2,-4(fp)
   18184:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   18188:	e0bffe17 	ldw	r2,-8(fp)
   1818c:	10c00317 	ldw	r3,12(r2)
   18190:	e0bfff17 	ldw	r2,-4(fp)
   18194:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   18198:	e0bffe17 	ldw	r2,-8(fp)
   1819c:	10c00417 	ldw	r3,16(r2)
   181a0:	e0bfff17 	ldw	r2,-4(fp)
   181a4:	10c00415 	stw	r3,16(r2)
   181a8:	e0bffb17 	ldw	r2,-20(fp)
   181ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   181b0:	e0bffd17 	ldw	r2,-12(fp)
   181b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   181b8:	e0bfff17 	ldw	r2,-4(fp)
   181bc:	10c00317 	ldw	r3,12(r2)
   181c0:	e0bfff17 	ldw	r2,-4(fp)
   181c4:	10800417 	ldw	r2,16(r2)
   181c8:	1887c83a 	sub	r3,r3,r2
   181cc:	e0bfff17 	ldw	r2,-4(fp)
   181d0:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   181d4:	0005883a 	mov	r2,zero
}
   181d8:	e037883a 	mov	sp,fp
   181dc:	df000017 	ldw	fp,0(sp)
   181e0:	dec00104 	addi	sp,sp,4
   181e4:	f800283a 	ret

000181e8 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   181e8:	defffc04 	addi	sp,sp,-16
   181ec:	dfc00315 	stw	ra,12(sp)
   181f0:	df000215 	stw	fp,8(sp)
   181f4:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   181f8:	01000134 	movhi	r4,4
   181fc:	2112d704 	addi	r4,r4,19292
   18200:	01430c04 	movi	r5,3120
   18204:	0014e780 	call	14e78 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   18208:	00800134 	movhi	r2,4
   1820c:	1092d704 	addi	r2,r2,19292
   18210:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   18214:	e03fff0d 	sth	zero,-4(fp)
   18218:	00001306 	br	18268 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   1821c:	e0bfff0b 	ldhu	r2,-4(fp)
   18220:	10800044 	addi	r2,r2,1
   18224:	10c00d24 	muli	r3,r2,52
   18228:	00800134 	movhi	r2,4
   1822c:	1092d704 	addi	r2,r2,19292
   18230:	1887883a 	add	r3,r3,r2
   18234:	e0bffe17 	ldw	r2,-8(fp)
   18238:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   1823c:	e0bffe17 	ldw	r2,-8(fp)
   18240:	00c00fc4 	movi	r3,63
   18244:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   18248:	e0bffe17 	ldw	r2,-8(fp)
   1824c:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   18250:	e0bffe17 	ldw	r2,-8(fp)
   18254:	10800d04 	addi	r2,r2,52
   18258:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   1825c:	e0bfff0b 	ldhu	r2,-4(fp)
   18260:	10800044 	addi	r2,r2,1
   18264:	e0bfff0d 	sth	r2,-4(fp)
   18268:	e0bfff0b 	ldhu	r2,-4(fp)
   1826c:	10800ef0 	cmpltui	r2,r2,59
   18270:	103fea1e 	bne	r2,zero,1821c <__alt_mem_Flash_flash_data+0xf401821c>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   18274:	e0bffe17 	ldw	r2,-8(fp)
   18278:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   1827c:	e0bffe17 	ldw	r2,-8(fp)
   18280:	00c00fc4 	movi	r3,63
   18284:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   18288:	e0bffe17 	ldw	r2,-8(fp)
   1828c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   18290:	008000b4 	movhi	r2,2
   18294:	1091c804 	addi	r2,r2,18208
   18298:	00c00134 	movhi	r3,4
   1829c:	18d2d704 	addi	r3,r3,19292
   182a0:	10c00015 	stw	r3,0(r2)
#endif
}
   182a4:	e037883a 	mov	sp,fp
   182a8:	dfc00117 	ldw	ra,4(sp)
   182ac:	df000017 	ldw	fp,0(sp)
   182b0:	dec00204 	addi	sp,sp,8
   182b4:	f800283a 	ret

000182b8 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   182b8:	defff804 	addi	sp,sp,-32
   182bc:	df000715 	stw	fp,28(sp)
   182c0:	df000704 	addi	fp,sp,28
   182c4:	e13ffe15 	stw	r4,-8(fp)
   182c8:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   182cc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   182d0:	e0bfff17 	ldw	r2,-4(fp)
   182d4:	1000021e 	bne	r2,zero,182e0 <OSQAccept+0x28>
        return ((void *)0);
   182d8:	0005883a 	mov	r2,zero
   182dc:	00004206 	br	183e8 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   182e0:	e0bffe17 	ldw	r2,-8(fp)
   182e4:	1000051e 	bne	r2,zero,182fc <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   182e8:	e0bfff17 	ldw	r2,-4(fp)
   182ec:	00c00104 	movi	r3,4
   182f0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   182f4:	0005883a 	mov	r2,zero
   182f8:	00003b06 	br	183e8 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   182fc:	e0bffe17 	ldw	r2,-8(fp)
   18300:	10800003 	ldbu	r2,0(r2)
   18304:	10803fcc 	andi	r2,r2,255
   18308:	108000a0 	cmpeqi	r2,r2,2
   1830c:	1000051e 	bne	r2,zero,18324 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   18310:	e0bfff17 	ldw	r2,-4(fp)
   18314:	00c00044 	movi	r3,1
   18318:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1831c:	0005883a 	mov	r2,zero
   18320:	00003106 	br	183e8 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18324:	0005303a 	rdctl	r2,status
   18328:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1832c:	e0fffc17 	ldw	r3,-16(fp)
   18330:	00bfff84 	movi	r2,-2
   18334:	1884703a 	and	r2,r3,r2
   18338:	1001703a 	wrctl	status,r2
  
  return context;
   1833c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18340:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   18344:	e0bffe17 	ldw	r2,-8(fp)
   18348:	10800117 	ldw	r2,4(r2)
   1834c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   18350:	e0bffb17 	ldw	r2,-20(fp)
   18354:	1080058b 	ldhu	r2,22(r2)
   18358:	10bfffcc 	andi	r2,r2,65535
   1835c:	10001926 	beq	r2,zero,183c4 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   18360:	e0bffb17 	ldw	r2,-20(fp)
   18364:	10800417 	ldw	r2,16(r2)
   18368:	11000104 	addi	r4,r2,4
   1836c:	e0fffb17 	ldw	r3,-20(fp)
   18370:	19000415 	stw	r4,16(r3)
   18374:	10800017 	ldw	r2,0(r2)
   18378:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1837c:	e0bffb17 	ldw	r2,-20(fp)
   18380:	1080058b 	ldhu	r2,22(r2)
   18384:	10bfffc4 	addi	r2,r2,-1
   18388:	1007883a 	mov	r3,r2
   1838c:	e0bffb17 	ldw	r2,-20(fp)
   18390:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   18394:	e0bffb17 	ldw	r2,-20(fp)
   18398:	10c00417 	ldw	r3,16(r2)
   1839c:	e0bffb17 	ldw	r2,-20(fp)
   183a0:	10800217 	ldw	r2,8(r2)
   183a4:	1880041e 	bne	r3,r2,183b8 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   183a8:	e0bffb17 	ldw	r2,-20(fp)
   183ac:	10c00117 	ldw	r3,4(r2)
   183b0:	e0bffb17 	ldw	r2,-20(fp)
   183b4:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   183b8:	e0bfff17 	ldw	r2,-4(fp)
   183bc:	10000005 	stb	zero,0(r2)
   183c0:	00000406 	br	183d4 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   183c4:	e0bfff17 	ldw	r2,-4(fp)
   183c8:	00c007c4 	movi	r3,31
   183cc:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   183d0:	e03ff915 	stw	zero,-28(fp)
   183d4:	e0bffa17 	ldw	r2,-24(fp)
   183d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   183dc:	e0bffd17 	ldw	r2,-12(fp)
   183e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   183e4:	e0bff917 	ldw	r2,-28(fp)
}
   183e8:	e037883a 	mov	sp,fp
   183ec:	df000017 	ldw	fp,0(sp)
   183f0:	dec00104 	addi	sp,sp,4
   183f4:	f800283a 	ret

000183f8 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   183f8:	defff404 	addi	sp,sp,-48
   183fc:	dfc00b15 	stw	ra,44(sp)
   18400:	df000a15 	stw	fp,40(sp)
   18404:	df000a04 	addi	fp,sp,40
   18408:	e13ffe15 	stw	r4,-8(fp)
   1840c:	2805883a 	mov	r2,r5
   18410:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18414:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   18418:	008000b4 	movhi	r2,2
   1841c:	1091cd04 	addi	r2,r2,18228
   18420:	10800003 	ldbu	r2,0(r2)
   18424:	10803fcc 	andi	r2,r2,255
   18428:	10000226 	beq	r2,zero,18434 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   1842c:	0005883a 	mov	r2,zero
   18430:	00006b06 	br	185e0 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18434:	0005303a 	rdctl	r2,status
   18438:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1843c:	e0fff917 	ldw	r3,-28(fp)
   18440:	00bfff84 	movi	r2,-2
   18444:	1884703a 	and	r2,r3,r2
   18448:	1001703a 	wrctl	status,r2
  
  return context;
   1844c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   18450:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   18454:	008000b4 	movhi	r2,2
   18458:	1091cc04 	addi	r2,r2,18224
   1845c:	10800017 	ldw	r2,0(r2)
   18460:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   18464:	008000b4 	movhi	r2,2
   18468:	1091cc04 	addi	r2,r2,18224
   1846c:	10800017 	ldw	r2,0(r2)
   18470:	10000726 	beq	r2,zero,18490 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   18474:	008000b4 	movhi	r2,2
   18478:	1091cc04 	addi	r2,r2,18224
   1847c:	10800017 	ldw	r2,0(r2)
   18480:	10c00117 	ldw	r3,4(r2)
   18484:	008000b4 	movhi	r2,2
   18488:	1091cc04 	addi	r2,r2,18224
   1848c:	10c00015 	stw	r3,0(r2)
   18490:	e0bff717 	ldw	r2,-36(fp)
   18494:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18498:	e0bffa17 	ldw	r2,-24(fp)
   1849c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   184a0:	e0bff617 	ldw	r2,-40(fp)
   184a4:	10004d26 	beq	r2,zero,185dc <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   184a8:	0005303a 	rdctl	r2,status
   184ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   184b0:	e0fffb17 	ldw	r3,-20(fp)
   184b4:	00bfff84 	movi	r2,-2
   184b8:	1884703a 	and	r2,r3,r2
   184bc:	1001703a 	wrctl	status,r2
  
  return context;
   184c0:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   184c4:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   184c8:	008000b4 	movhi	r2,2
   184cc:	1091ca04 	addi	r2,r2,18216
   184d0:	10800017 	ldw	r2,0(r2)
   184d4:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   184d8:	e0bff817 	ldw	r2,-32(fp)
   184dc:	10003126 	beq	r2,zero,185a4 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   184e0:	008000b4 	movhi	r2,2
   184e4:	1091ca04 	addi	r2,r2,18216
   184e8:	10800017 	ldw	r2,0(r2)
   184ec:	10c00017 	ldw	r3,0(r2)
   184f0:	008000b4 	movhi	r2,2
   184f4:	1091ca04 	addi	r2,r2,18216
   184f8:	10c00015 	stw	r3,0(r2)
   184fc:	e0bff717 	ldw	r2,-36(fp)
   18500:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18504:	e0bffc17 	ldw	r2,-16(fp)
   18508:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   1850c:	e0bff817 	ldw	r2,-32(fp)
   18510:	e0fffe17 	ldw	r3,-8(fp)
   18514:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   18518:	e0bfff0b 	ldhu	r2,-4(fp)
   1851c:	1085883a 	add	r2,r2,r2
   18520:	1085883a 	add	r2,r2,r2
   18524:	1007883a 	mov	r3,r2
   18528:	e0bffe17 	ldw	r2,-8(fp)
   1852c:	10c7883a 	add	r3,r2,r3
   18530:	e0bff817 	ldw	r2,-32(fp)
   18534:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   18538:	e0bff817 	ldw	r2,-32(fp)
   1853c:	e0fffe17 	ldw	r3,-8(fp)
   18540:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   18544:	e0bff817 	ldw	r2,-32(fp)
   18548:	e0fffe17 	ldw	r3,-8(fp)
   1854c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   18550:	e0bff817 	ldw	r2,-32(fp)
   18554:	e0ffff0b 	ldhu	r3,-4(fp)
   18558:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   1855c:	e0bff817 	ldw	r2,-32(fp)
   18560:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   18564:	e0bff617 	ldw	r2,-40(fp)
   18568:	00c00084 	movi	r3,2
   1856c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   18570:	e0bff617 	ldw	r2,-40(fp)
   18574:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   18578:	e0bff617 	ldw	r2,-40(fp)
   1857c:	e0fff817 	ldw	r3,-32(fp)
   18580:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   18584:	e0bff617 	ldw	r2,-40(fp)
   18588:	00c00fc4 	movi	r3,63
   1858c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   18590:	e0bff617 	ldw	r2,-40(fp)
   18594:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   18598:	e13ff617 	ldw	r4,-40(fp)
   1859c:	0014ab40 	call	14ab4 <OS_EventWaitListInit>
   185a0:	00000e06 	br	185dc <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   185a4:	008000b4 	movhi	r2,2
   185a8:	1091cc04 	addi	r2,r2,18224
   185ac:	10c00017 	ldw	r3,0(r2)
   185b0:	e0bff617 	ldw	r2,-40(fp)
   185b4:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   185b8:	008000b4 	movhi	r2,2
   185bc:	1091cc04 	addi	r2,r2,18224
   185c0:	e0fff617 	ldw	r3,-40(fp)
   185c4:	10c00015 	stw	r3,0(r2)
   185c8:	e0bff717 	ldw	r2,-36(fp)
   185cc:	e0bffd15 	stw	r2,-12(fp)
   185d0:	e0bffd17 	ldw	r2,-12(fp)
   185d4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   185d8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   185dc:	e0bff617 	ldw	r2,-40(fp)
}
   185e0:	e037883a 	mov	sp,fp
   185e4:	dfc00117 	ldw	ra,4(sp)
   185e8:	df000017 	ldw	fp,0(sp)
   185ec:	dec00204 	addi	sp,sp,8
   185f0:	f800283a 	ret

000185f4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   185f4:	defff204 	addi	sp,sp,-56
   185f8:	dfc00d15 	stw	ra,52(sp)
   185fc:	df000c15 	stw	fp,48(sp)
   18600:	df000c04 	addi	fp,sp,48
   18604:	e13ffd15 	stw	r4,-12(fp)
   18608:	2805883a 	mov	r2,r5
   1860c:	e1bfff15 	stw	r6,-4(fp)
   18610:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18614:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   18618:	e0bfff17 	ldw	r2,-4(fp)
   1861c:	1000021e 	bne	r2,zero,18628 <OSQDel+0x34>
        return (pevent);
   18620:	e0bffd17 	ldw	r2,-12(fp)
   18624:	0000a006 	br	188a8 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18628:	e0bffd17 	ldw	r2,-12(fp)
   1862c:	1000051e 	bne	r2,zero,18644 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18630:	e0bfff17 	ldw	r2,-4(fp)
   18634:	00c00104 	movi	r3,4
   18638:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1863c:	e0bffd17 	ldw	r2,-12(fp)
   18640:	00009906 	br	188a8 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   18644:	e0bffd17 	ldw	r2,-12(fp)
   18648:	10800003 	ldbu	r2,0(r2)
   1864c:	10803fcc 	andi	r2,r2,255
   18650:	108000a0 	cmpeqi	r2,r2,2
   18654:	1000051e 	bne	r2,zero,1866c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   18658:	e0bfff17 	ldw	r2,-4(fp)
   1865c:	00c00044 	movi	r3,1
   18660:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18664:	e0bffd17 	ldw	r2,-12(fp)
   18668:	00008f06 	br	188a8 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1866c:	008000b4 	movhi	r2,2
   18670:	1091cd04 	addi	r2,r2,18228
   18674:	10800003 	ldbu	r2,0(r2)
   18678:	10803fcc 	andi	r2,r2,255
   1867c:	10000526 	beq	r2,zero,18694 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   18680:	e0bfff17 	ldw	r2,-4(fp)
   18684:	00c003c4 	movi	r3,15
   18688:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1868c:	e0bffd17 	ldw	r2,-12(fp)
   18690:	00008506 	br	188a8 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18694:	0005303a 	rdctl	r2,status
   18698:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1869c:	e0fff817 	ldw	r3,-32(fp)
   186a0:	00bfff84 	movi	r2,-2
   186a4:	1884703a 	and	r2,r3,r2
   186a8:	1001703a 	wrctl	status,r2
  
  return context;
   186ac:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   186b0:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   186b4:	e0bffd17 	ldw	r2,-12(fp)
   186b8:	10800283 	ldbu	r2,10(r2)
   186bc:	10803fcc 	andi	r2,r2,255
   186c0:	10000326 	beq	r2,zero,186d0 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   186c4:	00800044 	movi	r2,1
   186c8:	e0bff405 	stb	r2,-48(fp)
   186cc:	00000106 	br	186d4 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   186d0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   186d4:	e0bffe03 	ldbu	r2,-8(fp)
   186d8:	10000326 	beq	r2,zero,186e8 <OSQDel+0xf4>
   186dc:	10800060 	cmpeqi	r2,r2,1
   186e0:	1000381e 	bne	r2,zero,187c4 <OSQDel+0x1d0>
   186e4:	00006506 	br	1887c <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   186e8:	e0bff403 	ldbu	r2,-48(fp)
   186ec:	1000261e 	bne	r2,zero,18788 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   186f0:	e0bffd17 	ldw	r2,-12(fp)
   186f4:	00c00fc4 	movi	r3,63
   186f8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   186fc:	e0bffd17 	ldw	r2,-12(fp)
   18700:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   18704:	e0bffd17 	ldw	r2,-12(fp)
   18708:	10800117 	ldw	r2,4(r2)
   1870c:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   18710:	008000b4 	movhi	r2,2
   18714:	1091ca04 	addi	r2,r2,18216
   18718:	10c00017 	ldw	r3,0(r2)
   1871c:	e0bff717 	ldw	r2,-36(fp)
   18720:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   18724:	008000b4 	movhi	r2,2
   18728:	1091ca04 	addi	r2,r2,18216
   1872c:	e0fff717 	ldw	r3,-36(fp)
   18730:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   18734:	e0bffd17 	ldw	r2,-12(fp)
   18738:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   1873c:	008000b4 	movhi	r2,2
   18740:	1091cc04 	addi	r2,r2,18224
   18744:	10c00017 	ldw	r3,0(r2)
   18748:	e0bffd17 	ldw	r2,-12(fp)
   1874c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   18750:	e0bffd17 	ldw	r2,-12(fp)
   18754:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   18758:	008000b4 	movhi	r2,2
   1875c:	1091cc04 	addi	r2,r2,18224
   18760:	e0fffd17 	ldw	r3,-12(fp)
   18764:	10c00015 	stw	r3,0(r2)
   18768:	e0bff617 	ldw	r2,-40(fp)
   1876c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18770:	e0bff917 	ldw	r2,-28(fp)
   18774:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   18778:	e0bfff17 	ldw	r2,-4(fp)
   1877c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   18780:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   18784:	00004706 	br	188a4 <OSQDel+0x2b0>
   18788:	e0bff617 	ldw	r2,-40(fp)
   1878c:	e0bffa15 	stw	r2,-24(fp)
   18790:	e0bffa17 	ldw	r2,-24(fp)
   18794:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   18798:	e0bfff17 	ldw	r2,-4(fp)
   1879c:	00c01244 	movi	r3,73
   187a0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   187a4:	e0bffd17 	ldw	r2,-12(fp)
   187a8:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   187ac:	00003d06 	br	188a4 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   187b0:	e13ffd17 	ldw	r4,-12(fp)
   187b4:	000b883a 	mov	r5,zero
   187b8:	01800104 	movi	r6,4
   187bc:	000f883a 	mov	r7,zero
   187c0:	00145140 	call	14514 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   187c4:	e0bffd17 	ldw	r2,-12(fp)
   187c8:	10800283 	ldbu	r2,10(r2)
   187cc:	10803fcc 	andi	r2,r2,255
   187d0:	103ff71e 	bne	r2,zero,187b0 <__alt_mem_Flash_flash_data+0xf40187b0>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   187d4:	e0bffd17 	ldw	r2,-12(fp)
   187d8:	00c00fc4 	movi	r3,63
   187dc:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   187e0:	e0bffd17 	ldw	r2,-12(fp)
   187e4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   187e8:	e0bffd17 	ldw	r2,-12(fp)
   187ec:	10800117 	ldw	r2,4(r2)
   187f0:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   187f4:	008000b4 	movhi	r2,2
   187f8:	1091ca04 	addi	r2,r2,18216
   187fc:	10c00017 	ldw	r3,0(r2)
   18800:	e0bff717 	ldw	r2,-36(fp)
   18804:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   18808:	008000b4 	movhi	r2,2
   1880c:	1091ca04 	addi	r2,r2,18216
   18810:	e0fff717 	ldw	r3,-36(fp)
   18814:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   18818:	e0bffd17 	ldw	r2,-12(fp)
   1881c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   18820:	008000b4 	movhi	r2,2
   18824:	1091cc04 	addi	r2,r2,18224
   18828:	10c00017 	ldw	r3,0(r2)
   1882c:	e0bffd17 	ldw	r2,-12(fp)
   18830:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   18834:	e0bffd17 	ldw	r2,-12(fp)
   18838:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1883c:	008000b4 	movhi	r2,2
   18840:	1091cc04 	addi	r2,r2,18224
   18844:	e0fffd17 	ldw	r3,-12(fp)
   18848:	10c00015 	stw	r3,0(r2)
   1884c:	e0bff617 	ldw	r2,-40(fp)
   18850:	e0bffb15 	stw	r2,-20(fp)
   18854:	e0bffb17 	ldw	r2,-20(fp)
   18858:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1885c:	e0bff403 	ldbu	r2,-48(fp)
   18860:	10800058 	cmpnei	r2,r2,1
   18864:	1000011e 	bne	r2,zero,1886c <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   18868:	0014f2c0 	call	14f2c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   1886c:	e0bfff17 	ldw	r2,-4(fp)
   18870:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   18874:	e03ff515 	stw	zero,-44(fp)
             break;
   18878:	00000a06 	br	188a4 <OSQDel+0x2b0>
   1887c:	e0bff617 	ldw	r2,-40(fp)
   18880:	e0bffc15 	stw	r2,-16(fp)
   18884:	e0bffc17 	ldw	r2,-16(fp)
   18888:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   1888c:	e0bfff17 	ldw	r2,-4(fp)
   18890:	00c001c4 	movi	r3,7
   18894:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   18898:	e0bffd17 	ldw	r2,-12(fp)
   1889c:	e0bff515 	stw	r2,-44(fp)
             break;
   188a0:	0001883a 	nop
    }
    return (pevent_return);
   188a4:	e0bff517 	ldw	r2,-44(fp)
}
   188a8:	e037883a 	mov	sp,fp
   188ac:	dfc00117 	ldw	ra,4(sp)
   188b0:	df000017 	ldw	fp,0(sp)
   188b4:	dec00204 	addi	sp,sp,8
   188b8:	f800283a 	ret

000188bc <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   188bc:	defffa04 	addi	sp,sp,-24
   188c0:	df000515 	stw	fp,20(sp)
   188c4:	df000504 	addi	fp,sp,20
   188c8:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   188cc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   188d0:	e0bfff17 	ldw	r2,-4(fp)
   188d4:	1000021e 	bne	r2,zero,188e0 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   188d8:	00800104 	movi	r2,4
   188dc:	00002106 	br	18964 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   188e0:	e0bfff17 	ldw	r2,-4(fp)
   188e4:	10800003 	ldbu	r2,0(r2)
   188e8:	10803fcc 	andi	r2,r2,255
   188ec:	108000a0 	cmpeqi	r2,r2,2
   188f0:	1000021e 	bne	r2,zero,188fc <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   188f4:	00800044 	movi	r2,1
   188f8:	00001a06 	br	18964 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   188fc:	0005303a 	rdctl	r2,status
   18900:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18904:	e0fffd17 	ldw	r3,-12(fp)
   18908:	00bfff84 	movi	r2,-2
   1890c:	1884703a 	and	r2,r3,r2
   18910:	1001703a 	wrctl	status,r2
  
  return context;
   18914:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18918:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   1891c:	e0bfff17 	ldw	r2,-4(fp)
   18920:	10800117 	ldw	r2,4(r2)
   18924:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   18928:	e0bffc17 	ldw	r2,-16(fp)
   1892c:	10c00117 	ldw	r3,4(r2)
   18930:	e0bffc17 	ldw	r2,-16(fp)
   18934:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   18938:	e0bffc17 	ldw	r2,-16(fp)
   1893c:	10c00117 	ldw	r3,4(r2)
   18940:	e0bffc17 	ldw	r2,-16(fp)
   18944:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   18948:	e0bffc17 	ldw	r2,-16(fp)
   1894c:	1000058d 	sth	zero,22(r2)
   18950:	e0bffb17 	ldw	r2,-20(fp)
   18954:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18958:	e0bffe17 	ldw	r2,-8(fp)
   1895c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18960:	0005883a 	mov	r2,zero
}
   18964:	e037883a 	mov	sp,fp
   18968:	df000017 	ldw	fp,0(sp)
   1896c:	dec00104 	addi	sp,sp,4
   18970:	f800283a 	ret

00018974 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   18974:	defff304 	addi	sp,sp,-52
   18978:	dfc00c15 	stw	ra,48(sp)
   1897c:	df000b15 	stw	fp,44(sp)
   18980:	df000b04 	addi	fp,sp,44
   18984:	e13ffd15 	stw	r4,-12(fp)
   18988:	2805883a 	mov	r2,r5
   1898c:	e1bfff15 	stw	r6,-4(fp)
   18990:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18994:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   18998:	e0bfff17 	ldw	r2,-4(fp)
   1899c:	1000021e 	bne	r2,zero,189a8 <OSQPend+0x34>
        return ((void *)0);
   189a0:	0005883a 	mov	r2,zero
   189a4:	0000ad06 	br	18c5c <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   189a8:	e0bffd17 	ldw	r2,-12(fp)
   189ac:	1000051e 	bne	r2,zero,189c4 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   189b0:	e0bfff17 	ldw	r2,-4(fp)
   189b4:	00c00104 	movi	r3,4
   189b8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   189bc:	0005883a 	mov	r2,zero
   189c0:	0000a606 	br	18c5c <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   189c4:	e0bffd17 	ldw	r2,-12(fp)
   189c8:	10800003 	ldbu	r2,0(r2)
   189cc:	10803fcc 	andi	r2,r2,255
   189d0:	108000a0 	cmpeqi	r2,r2,2
   189d4:	1000051e 	bne	r2,zero,189ec <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   189d8:	e0bfff17 	ldw	r2,-4(fp)
   189dc:	00c00044 	movi	r3,1
   189e0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   189e4:	0005883a 	mov	r2,zero
   189e8:	00009c06 	br	18c5c <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   189ec:	008000b4 	movhi	r2,2
   189f0:	1091cd04 	addi	r2,r2,18228
   189f4:	10800003 	ldbu	r2,0(r2)
   189f8:	10803fcc 	andi	r2,r2,255
   189fc:	10000526 	beq	r2,zero,18a14 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   18a00:	e0bfff17 	ldw	r2,-4(fp)
   18a04:	00c00084 	movi	r3,2
   18a08:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18a0c:	0005883a 	mov	r2,zero
   18a10:	00009206 	br	18c5c <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   18a14:	008000b4 	movhi	r2,2
   18a18:	1091bf04 	addi	r2,r2,18172
   18a1c:	10800003 	ldbu	r2,0(r2)
   18a20:	10803fcc 	andi	r2,r2,255
   18a24:	10000526 	beq	r2,zero,18a3c <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   18a28:	e0bfff17 	ldw	r2,-4(fp)
   18a2c:	00c00344 	movi	r3,13
   18a30:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18a34:	0005883a 	mov	r2,zero
   18a38:	00008806 	br	18c5c <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18a3c:	0005303a 	rdctl	r2,status
   18a40:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18a44:	e0fff817 	ldw	r3,-32(fp)
   18a48:	00bfff84 	movi	r2,-2
   18a4c:	1884703a 	and	r2,r3,r2
   18a50:	1001703a 	wrctl	status,r2
  
  return context;
   18a54:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   18a58:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   18a5c:	e0bffd17 	ldw	r2,-12(fp)
   18a60:	10800117 	ldw	r2,4(r2)
   18a64:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   18a68:	e0bff717 	ldw	r2,-36(fp)
   18a6c:	1080058b 	ldhu	r2,22(r2)
   18a70:	10bfffcc 	andi	r2,r2,65535
   18a74:	10001e26 	beq	r2,zero,18af0 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   18a78:	e0bff717 	ldw	r2,-36(fp)
   18a7c:	10800417 	ldw	r2,16(r2)
   18a80:	11000104 	addi	r4,r2,4
   18a84:	e0fff717 	ldw	r3,-36(fp)
   18a88:	19000415 	stw	r4,16(r3)
   18a8c:	10800017 	ldw	r2,0(r2)
   18a90:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   18a94:	e0bff717 	ldw	r2,-36(fp)
   18a98:	1080058b 	ldhu	r2,22(r2)
   18a9c:	10bfffc4 	addi	r2,r2,-1
   18aa0:	1007883a 	mov	r3,r2
   18aa4:	e0bff717 	ldw	r2,-36(fp)
   18aa8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   18aac:	e0bff717 	ldw	r2,-36(fp)
   18ab0:	10c00417 	ldw	r3,16(r2)
   18ab4:	e0bff717 	ldw	r2,-36(fp)
   18ab8:	10800217 	ldw	r2,8(r2)
   18abc:	1880041e 	bne	r3,r2,18ad0 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   18ac0:	e0bff717 	ldw	r2,-36(fp)
   18ac4:	10c00117 	ldw	r3,4(r2)
   18ac8:	e0bff717 	ldw	r2,-36(fp)
   18acc:	10c00415 	stw	r3,16(r2)
   18ad0:	e0bff617 	ldw	r2,-40(fp)
   18ad4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18ad8:	e0bff917 	ldw	r2,-28(fp)
   18adc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   18ae0:	e0bfff17 	ldw	r2,-4(fp)
   18ae4:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   18ae8:	e0bff517 	ldw	r2,-44(fp)
   18aec:	00005b06 	br	18c5c <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   18af0:	008000b4 	movhi	r2,2
   18af4:	1091ce04 	addi	r2,r2,18232
   18af8:	10c00017 	ldw	r3,0(r2)
   18afc:	008000b4 	movhi	r2,2
   18b00:	1091ce04 	addi	r2,r2,18232
   18b04:	10800017 	ldw	r2,0(r2)
   18b08:	10800c03 	ldbu	r2,48(r2)
   18b0c:	10800114 	ori	r2,r2,4
   18b10:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   18b14:	008000b4 	movhi	r2,2
   18b18:	1091ce04 	addi	r2,r2,18232
   18b1c:	10800017 	ldw	r2,0(r2)
   18b20:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   18b24:	008000b4 	movhi	r2,2
   18b28:	1091ce04 	addi	r2,r2,18232
   18b2c:	10800017 	ldw	r2,0(r2)
   18b30:	e0fffe0b 	ldhu	r3,-8(fp)
   18b34:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   18b38:	e13ffd17 	ldw	r4,-12(fp)
   18b3c:	00146ac0 	call	146ac <OS_EventTaskWait>
   18b40:	e0bff617 	ldw	r2,-40(fp)
   18b44:	e0bffa15 	stw	r2,-24(fp)
   18b48:	e0bffa17 	ldw	r2,-24(fp)
   18b4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   18b50:	0014f2c0 	call	14f2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18b54:	0005303a 	rdctl	r2,status
   18b58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18b5c:	e0fffb17 	ldw	r3,-20(fp)
   18b60:	00bfff84 	movi	r2,-2
   18b64:	1884703a 	and	r2,r3,r2
   18b68:	1001703a 	wrctl	status,r2
  
  return context;
   18b6c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   18b70:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   18b74:	008000b4 	movhi	r2,2
   18b78:	1091ce04 	addi	r2,r2,18232
   18b7c:	10800017 	ldw	r2,0(r2)
   18b80:	10800c43 	ldbu	r2,49(r2)
   18b84:	10803fcc 	andi	r2,r2,255
   18b88:	10000326 	beq	r2,zero,18b98 <OSQPend+0x224>
   18b8c:	108000a0 	cmpeqi	r2,r2,2
   18b90:	1000091e 	bne	r2,zero,18bb8 <OSQPend+0x244>
   18b94:	00000d06 	br	18bcc <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   18b98:	008000b4 	movhi	r2,2
   18b9c:	1091ce04 	addi	r2,r2,18232
   18ba0:	10800017 	ldw	r2,0(r2)
   18ba4:	10800917 	ldw	r2,36(r2)
   18ba8:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   18bac:	e0bfff17 	ldw	r2,-4(fp)
   18bb0:	10000005 	stb	zero,0(r2)
             break;
   18bb4:	00001006 	br	18bf8 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   18bb8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   18bbc:	e0bfff17 	ldw	r2,-4(fp)
   18bc0:	00c00384 	movi	r3,14
   18bc4:	10c00005 	stb	r3,0(r2)
             break;
   18bc8:	00000b06 	br	18bf8 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   18bcc:	008000b4 	movhi	r2,2
   18bd0:	1091ce04 	addi	r2,r2,18232
   18bd4:	10800017 	ldw	r2,0(r2)
   18bd8:	1009883a 	mov	r4,r2
   18bdc:	e17ffd17 	ldw	r5,-12(fp)
   18be0:	00149040 	call	14904 <OS_EventTaskRemove>
             pmsg = (void *)0;
   18be4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   18be8:	e0bfff17 	ldw	r2,-4(fp)
   18bec:	00c00284 	movi	r3,10
   18bf0:	10c00005 	stb	r3,0(r2)
             break;
   18bf4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   18bf8:	008000b4 	movhi	r2,2
   18bfc:	1091ce04 	addi	r2,r2,18232
   18c00:	10800017 	ldw	r2,0(r2)
   18c04:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   18c08:	008000b4 	movhi	r2,2
   18c0c:	1091ce04 	addi	r2,r2,18232
   18c10:	10800017 	ldw	r2,0(r2)
   18c14:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   18c18:	008000b4 	movhi	r2,2
   18c1c:	1091ce04 	addi	r2,r2,18232
   18c20:	10800017 	ldw	r2,0(r2)
   18c24:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   18c28:	008000b4 	movhi	r2,2
   18c2c:	1091ce04 	addi	r2,r2,18232
   18c30:	10800017 	ldw	r2,0(r2)
   18c34:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   18c38:	008000b4 	movhi	r2,2
   18c3c:	1091ce04 	addi	r2,r2,18232
   18c40:	10800017 	ldw	r2,0(r2)
   18c44:	10000915 	stw	zero,36(r2)
   18c48:	e0bff617 	ldw	r2,-40(fp)
   18c4c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18c50:	e0bffc17 	ldw	r2,-16(fp)
   18c54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   18c58:	e0bff517 	ldw	r2,-44(fp)
}
   18c5c:	e037883a 	mov	sp,fp
   18c60:	dfc00117 	ldw	ra,4(sp)
   18c64:	df000017 	ldw	fp,0(sp)
   18c68:	dec00204 	addi	sp,sp,8
   18c6c:	f800283a 	ret

00018c70 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   18c70:	defff604 	addi	sp,sp,-40
   18c74:	dfc00915 	stw	ra,36(sp)
   18c78:	df000815 	stw	fp,32(sp)
   18c7c:	df000804 	addi	fp,sp,32
   18c80:	e13ffd15 	stw	r4,-12(fp)
   18c84:	2805883a 	mov	r2,r5
   18c88:	e1bfff15 	stw	r6,-4(fp)
   18c8c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18c90:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   18c94:	e0bfff17 	ldw	r2,-4(fp)
   18c98:	1000021e 	bne	r2,zero,18ca4 <OSQPendAbort+0x34>
        return (0);
   18c9c:	0005883a 	mov	r2,zero
   18ca0:	00004906 	br	18dc8 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18ca4:	e0bffd17 	ldw	r2,-12(fp)
   18ca8:	1000051e 	bne	r2,zero,18cc0 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18cac:	e0bfff17 	ldw	r2,-4(fp)
   18cb0:	00c00104 	movi	r3,4
   18cb4:	10c00005 	stb	r3,0(r2)
        return (0);
   18cb8:	0005883a 	mov	r2,zero
   18cbc:	00004206 	br	18dc8 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   18cc0:	e0bffd17 	ldw	r2,-12(fp)
   18cc4:	10800003 	ldbu	r2,0(r2)
   18cc8:	10803fcc 	andi	r2,r2,255
   18ccc:	108000a0 	cmpeqi	r2,r2,2
   18cd0:	1000051e 	bne	r2,zero,18ce8 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   18cd4:	e0bfff17 	ldw	r2,-4(fp)
   18cd8:	00c00044 	movi	r3,1
   18cdc:	10c00005 	stb	r3,0(r2)
        return (0);
   18ce0:	0005883a 	mov	r2,zero
   18ce4:	00003806 	br	18dc8 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18ce8:	0005303a 	rdctl	r2,status
   18cec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18cf0:	e0fffa17 	ldw	r3,-24(fp)
   18cf4:	00bfff84 	movi	r2,-2
   18cf8:	1884703a 	and	r2,r3,r2
   18cfc:	1001703a 	wrctl	status,r2
  
  return context;
   18d00:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   18d04:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   18d08:	e0bffd17 	ldw	r2,-12(fp)
   18d0c:	10800283 	ldbu	r2,10(r2)
   18d10:	10803fcc 	andi	r2,r2,255
   18d14:	10002526 	beq	r2,zero,18dac <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   18d18:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   18d1c:	e0bffe03 	ldbu	r2,-8(fp)
   18d20:	10800060 	cmpeqi	r2,r2,1
   18d24:	10000e26 	beq	r2,zero,18d60 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   18d28:	00000806 	br	18d4c <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   18d2c:	e13ffd17 	ldw	r4,-12(fp)
   18d30:	000b883a 	mov	r5,zero
   18d34:	01800104 	movi	r6,4
   18d38:	01c00084 	movi	r7,2
   18d3c:	00145140 	call	14514 <OS_EventTaskRdy>
                     nbr_tasks++;
   18d40:	e0bff803 	ldbu	r2,-32(fp)
   18d44:	10800044 	addi	r2,r2,1
   18d48:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   18d4c:	e0bffd17 	ldw	r2,-12(fp)
   18d50:	10800283 	ldbu	r2,10(r2)
   18d54:	10803fcc 	andi	r2,r2,255
   18d58:	103ff41e 	bne	r2,zero,18d2c <__alt_mem_Flash_flash_data+0xf4018d2c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   18d5c:	00000906 	br	18d84 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   18d60:	e13ffd17 	ldw	r4,-12(fp)
   18d64:	000b883a 	mov	r5,zero
   18d68:	01800104 	movi	r6,4
   18d6c:	01c00084 	movi	r7,2
   18d70:	00145140 	call	14514 <OS_EventTaskRdy>
                 nbr_tasks++;
   18d74:	e0bff803 	ldbu	r2,-32(fp)
   18d78:	10800044 	addi	r2,r2,1
   18d7c:	e0bff805 	stb	r2,-32(fp)
                 break;
   18d80:	0001883a 	nop
   18d84:	e0bff917 	ldw	r2,-28(fp)
   18d88:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18d8c:	e0bffb17 	ldw	r2,-20(fp)
   18d90:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   18d94:	0014f2c0 	call	14f2c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   18d98:	e0bfff17 	ldw	r2,-4(fp)
   18d9c:	00c00384 	movi	r3,14
   18da0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   18da4:	e0bff803 	ldbu	r2,-32(fp)
   18da8:	00000706 	br	18dc8 <OSQPendAbort+0x158>
   18dac:	e0bff917 	ldw	r2,-28(fp)
   18db0:	e0bffc15 	stw	r2,-16(fp)
   18db4:	e0bffc17 	ldw	r2,-16(fp)
   18db8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   18dbc:	e0bfff17 	ldw	r2,-4(fp)
   18dc0:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   18dc4:	0005883a 	mov	r2,zero
}
   18dc8:	e037883a 	mov	sp,fp
   18dcc:	dfc00117 	ldw	ra,4(sp)
   18dd0:	df000017 	ldw	fp,0(sp)
   18dd4:	dec00204 	addi	sp,sp,8
   18dd8:	f800283a 	ret

00018ddc <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   18ddc:	defff604 	addi	sp,sp,-40
   18de0:	dfc00915 	stw	ra,36(sp)
   18de4:	df000815 	stw	fp,32(sp)
   18de8:	df000804 	addi	fp,sp,32
   18dec:	e13ffe15 	stw	r4,-8(fp)
   18df0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   18df4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   18df8:	e0bffe17 	ldw	r2,-8(fp)
   18dfc:	1000021e 	bne	r2,zero,18e08 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   18e00:	00800104 	movi	r2,4
   18e04:	00004a06 	br	18f30 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   18e08:	e0bffe17 	ldw	r2,-8(fp)
   18e0c:	10800003 	ldbu	r2,0(r2)
   18e10:	10803fcc 	andi	r2,r2,255
   18e14:	108000a0 	cmpeqi	r2,r2,2
   18e18:	1000021e 	bne	r2,zero,18e24 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   18e1c:	00800044 	movi	r2,1
   18e20:	00004306 	br	18f30 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18e24:	0005303a 	rdctl	r2,status
   18e28:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18e2c:	e0fffa17 	ldw	r3,-24(fp)
   18e30:	00bfff84 	movi	r2,-2
   18e34:	1884703a 	and	r2,r3,r2
   18e38:	1001703a 	wrctl	status,r2
  
  return context;
   18e3c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   18e40:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   18e44:	e0bffe17 	ldw	r2,-8(fp)
   18e48:	10800283 	ldbu	r2,10(r2)
   18e4c:	10803fcc 	andi	r2,r2,255
   18e50:	10000c26 	beq	r2,zero,18e84 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   18e54:	e13ffe17 	ldw	r4,-8(fp)
   18e58:	e17fff17 	ldw	r5,-4(fp)
   18e5c:	01800104 	movi	r6,4
   18e60:	000f883a 	mov	r7,zero
   18e64:	00145140 	call	14514 <OS_EventTaskRdy>
   18e68:	e0bff817 	ldw	r2,-32(fp)
   18e6c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18e70:	e0bffb17 	ldw	r2,-20(fp)
   18e74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   18e78:	0014f2c0 	call	14f2c <OS_Sched>
        return (OS_ERR_NONE);
   18e7c:	0005883a 	mov	r2,zero
   18e80:	00002b06 	br	18f30 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   18e84:	e0bffe17 	ldw	r2,-8(fp)
   18e88:	10800117 	ldw	r2,4(r2)
   18e8c:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   18e90:	e0bff917 	ldw	r2,-28(fp)
   18e94:	10c0058b 	ldhu	r3,22(r2)
   18e98:	e0bff917 	ldw	r2,-28(fp)
   18e9c:	1080050b 	ldhu	r2,20(r2)
   18ea0:	18ffffcc 	andi	r3,r3,65535
   18ea4:	10bfffcc 	andi	r2,r2,65535
   18ea8:	18800636 	bltu	r3,r2,18ec4 <OSQPost+0xe8>
   18eac:	e0bff817 	ldw	r2,-32(fp)
   18eb0:	e0bffc15 	stw	r2,-16(fp)
   18eb4:	e0bffc17 	ldw	r2,-16(fp)
   18eb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   18ebc:	00800784 	movi	r2,30
   18ec0:	00001b06 	br	18f30 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   18ec4:	e0bff917 	ldw	r2,-28(fp)
   18ec8:	10800317 	ldw	r2,12(r2)
   18ecc:	11000104 	addi	r4,r2,4
   18ed0:	e0fff917 	ldw	r3,-28(fp)
   18ed4:	19000315 	stw	r4,12(r3)
   18ed8:	e0ffff17 	ldw	r3,-4(fp)
   18edc:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   18ee0:	e0bff917 	ldw	r2,-28(fp)
   18ee4:	1080058b 	ldhu	r2,22(r2)
   18ee8:	10800044 	addi	r2,r2,1
   18eec:	1007883a 	mov	r3,r2
   18ef0:	e0bff917 	ldw	r2,-28(fp)
   18ef4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   18ef8:	e0bff917 	ldw	r2,-28(fp)
   18efc:	10c00317 	ldw	r3,12(r2)
   18f00:	e0bff917 	ldw	r2,-28(fp)
   18f04:	10800217 	ldw	r2,8(r2)
   18f08:	1880041e 	bne	r3,r2,18f1c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   18f0c:	e0bff917 	ldw	r2,-28(fp)
   18f10:	10c00117 	ldw	r3,4(r2)
   18f14:	e0bff917 	ldw	r2,-28(fp)
   18f18:	10c00315 	stw	r3,12(r2)
   18f1c:	e0bff817 	ldw	r2,-32(fp)
   18f20:	e0bffd15 	stw	r2,-12(fp)
   18f24:	e0bffd17 	ldw	r2,-12(fp)
   18f28:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18f2c:	0005883a 	mov	r2,zero
}
   18f30:	e037883a 	mov	sp,fp
   18f34:	dfc00117 	ldw	ra,4(sp)
   18f38:	df000017 	ldw	fp,0(sp)
   18f3c:	dec00204 	addi	sp,sp,8
   18f40:	f800283a 	ret

00018f44 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   18f44:	defff604 	addi	sp,sp,-40
   18f48:	dfc00915 	stw	ra,36(sp)
   18f4c:	df000815 	stw	fp,32(sp)
   18f50:	df000804 	addi	fp,sp,32
   18f54:	e13ffe15 	stw	r4,-8(fp)
   18f58:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18f5c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18f60:	e0bffe17 	ldw	r2,-8(fp)
   18f64:	1000021e 	bne	r2,zero,18f70 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   18f68:	00800104 	movi	r2,4
   18f6c:	00004c06 	br	190a0 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   18f70:	e0bffe17 	ldw	r2,-8(fp)
   18f74:	10800003 	ldbu	r2,0(r2)
   18f78:	10803fcc 	andi	r2,r2,255
   18f7c:	108000a0 	cmpeqi	r2,r2,2
   18f80:	1000021e 	bne	r2,zero,18f8c <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   18f84:	00800044 	movi	r2,1
   18f88:	00004506 	br	190a0 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18f8c:	0005303a 	rdctl	r2,status
   18f90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18f94:	e0fffa17 	ldw	r3,-24(fp)
   18f98:	00bfff84 	movi	r2,-2
   18f9c:	1884703a 	and	r2,r3,r2
   18fa0:	1001703a 	wrctl	status,r2
  
  return context;
   18fa4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   18fa8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   18fac:	e0bffe17 	ldw	r2,-8(fp)
   18fb0:	10800283 	ldbu	r2,10(r2)
   18fb4:	10803fcc 	andi	r2,r2,255
   18fb8:	10000c26 	beq	r2,zero,18fec <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   18fbc:	e13ffe17 	ldw	r4,-8(fp)
   18fc0:	e17fff17 	ldw	r5,-4(fp)
   18fc4:	01800104 	movi	r6,4
   18fc8:	000f883a 	mov	r7,zero
   18fcc:	00145140 	call	14514 <OS_EventTaskRdy>
   18fd0:	e0bff817 	ldw	r2,-32(fp)
   18fd4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18fd8:	e0bffb17 	ldw	r2,-20(fp)
   18fdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   18fe0:	0014f2c0 	call	14f2c <OS_Sched>
        return (OS_ERR_NONE);
   18fe4:	0005883a 	mov	r2,zero
   18fe8:	00002d06 	br	190a0 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   18fec:	e0bffe17 	ldw	r2,-8(fp)
   18ff0:	10800117 	ldw	r2,4(r2)
   18ff4:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   18ff8:	e0bff917 	ldw	r2,-28(fp)
   18ffc:	10c0058b 	ldhu	r3,22(r2)
   19000:	e0bff917 	ldw	r2,-28(fp)
   19004:	1080050b 	ldhu	r2,20(r2)
   19008:	18ffffcc 	andi	r3,r3,65535
   1900c:	10bfffcc 	andi	r2,r2,65535
   19010:	18800636 	bltu	r3,r2,1902c <OSQPostFront+0xe8>
   19014:	e0bff817 	ldw	r2,-32(fp)
   19018:	e0bffc15 	stw	r2,-16(fp)
   1901c:	e0bffc17 	ldw	r2,-16(fp)
   19020:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   19024:	00800784 	movi	r2,30
   19028:	00001d06 	br	190a0 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   1902c:	e0bff917 	ldw	r2,-28(fp)
   19030:	10c00417 	ldw	r3,16(r2)
   19034:	e0bff917 	ldw	r2,-28(fp)
   19038:	10800117 	ldw	r2,4(r2)
   1903c:	1880041e 	bne	r3,r2,19050 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   19040:	e0bff917 	ldw	r2,-28(fp)
   19044:	10c00217 	ldw	r3,8(r2)
   19048:	e0bff917 	ldw	r2,-28(fp)
   1904c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   19050:	e0bff917 	ldw	r2,-28(fp)
   19054:	10800417 	ldw	r2,16(r2)
   19058:	10ffff04 	addi	r3,r2,-4
   1905c:	e0bff917 	ldw	r2,-28(fp)
   19060:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   19064:	e0bff917 	ldw	r2,-28(fp)
   19068:	10800417 	ldw	r2,16(r2)
   1906c:	e0ffff17 	ldw	r3,-4(fp)
   19070:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   19074:	e0bff917 	ldw	r2,-28(fp)
   19078:	1080058b 	ldhu	r2,22(r2)
   1907c:	10800044 	addi	r2,r2,1
   19080:	1007883a 	mov	r3,r2
   19084:	e0bff917 	ldw	r2,-28(fp)
   19088:	10c0058d 	sth	r3,22(r2)
   1908c:	e0bff817 	ldw	r2,-32(fp)
   19090:	e0bffd15 	stw	r2,-12(fp)
   19094:	e0bffd17 	ldw	r2,-12(fp)
   19098:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1909c:	0005883a 	mov	r2,zero
}
   190a0:	e037883a 	mov	sp,fp
   190a4:	dfc00117 	ldw	ra,4(sp)
   190a8:	df000017 	ldw	fp,0(sp)
   190ac:	dec00204 	addi	sp,sp,8
   190b0:	f800283a 	ret

000190b4 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   190b4:	defff504 	addi	sp,sp,-44
   190b8:	dfc00a15 	stw	ra,40(sp)
   190bc:	df000915 	stw	fp,36(sp)
   190c0:	df000904 	addi	fp,sp,36
   190c4:	e13ffd15 	stw	r4,-12(fp)
   190c8:	e17ffe15 	stw	r5,-8(fp)
   190cc:	3005883a 	mov	r2,r6
   190d0:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   190d4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   190d8:	e0bffd17 	ldw	r2,-12(fp)
   190dc:	1000021e 	bne	r2,zero,190e8 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   190e0:	00800104 	movi	r2,4
   190e4:	00007106 	br	192ac <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   190e8:	e0bffd17 	ldw	r2,-12(fp)
   190ec:	10800003 	ldbu	r2,0(r2)
   190f0:	10803fcc 	andi	r2,r2,255
   190f4:	108000a0 	cmpeqi	r2,r2,2
   190f8:	1000021e 	bne	r2,zero,19104 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   190fc:	00800044 	movi	r2,1
   19100:	00006a06 	br	192ac <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19104:	0005303a 	rdctl	r2,status
   19108:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1910c:	e0fff917 	ldw	r3,-28(fp)
   19110:	00bfff84 	movi	r2,-2
   19114:	1884703a 	and	r2,r3,r2
   19118:	1001703a 	wrctl	status,r2
  
  return context;
   1911c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   19120:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   19124:	e0bffd17 	ldw	r2,-12(fp)
   19128:	10800283 	ldbu	r2,10(r2)
   1912c:	10803fcc 	andi	r2,r2,255
   19130:	10001d26 	beq	r2,zero,191a8 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   19134:	e0bfff03 	ldbu	r2,-4(fp)
   19138:	1080004c 	andi	r2,r2,1
   1913c:	10000b26 	beq	r2,zero,1916c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   19140:	00000506 	br	19158 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   19144:	e13ffd17 	ldw	r4,-12(fp)
   19148:	e17ffe17 	ldw	r5,-8(fp)
   1914c:	01800104 	movi	r6,4
   19150:	000f883a 	mov	r7,zero
   19154:	00145140 	call	14514 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   19158:	e0bffd17 	ldw	r2,-12(fp)
   1915c:	10800283 	ldbu	r2,10(r2)
   19160:	10803fcc 	andi	r2,r2,255
   19164:	103ff71e 	bne	r2,zero,19144 <__alt_mem_Flash_flash_data+0xf4019144>
   19168:	00000506 	br	19180 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1916c:	e13ffd17 	ldw	r4,-12(fp)
   19170:	e17ffe17 	ldw	r5,-8(fp)
   19174:	01800104 	movi	r6,4
   19178:	000f883a 	mov	r7,zero
   1917c:	00145140 	call	14514 <OS_EventTaskRdy>
   19180:	e0bff717 	ldw	r2,-36(fp)
   19184:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19188:	e0bffa17 	ldw	r2,-24(fp)
   1918c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   19190:	e0bfff03 	ldbu	r2,-4(fp)
   19194:	1080010c 	andi	r2,r2,4
   19198:	1000011e 	bne	r2,zero,191a0 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   1919c:	0014f2c0 	call	14f2c <OS_Sched>
        }
        return (OS_ERR_NONE);
   191a0:	0005883a 	mov	r2,zero
   191a4:	00004106 	br	192ac <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   191a8:	e0bffd17 	ldw	r2,-12(fp)
   191ac:	10800117 	ldw	r2,4(r2)
   191b0:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   191b4:	e0bff817 	ldw	r2,-32(fp)
   191b8:	10c0058b 	ldhu	r3,22(r2)
   191bc:	e0bff817 	ldw	r2,-32(fp)
   191c0:	1080050b 	ldhu	r2,20(r2)
   191c4:	18ffffcc 	andi	r3,r3,65535
   191c8:	10bfffcc 	andi	r2,r2,65535
   191cc:	18800636 	bltu	r3,r2,191e8 <OSQPostOpt+0x134>
   191d0:	e0bff717 	ldw	r2,-36(fp)
   191d4:	e0bffb15 	stw	r2,-20(fp)
   191d8:	e0bffb17 	ldw	r2,-20(fp)
   191dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   191e0:	00800784 	movi	r2,30
   191e4:	00003106 	br	192ac <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   191e8:	e0bfff03 	ldbu	r2,-4(fp)
   191ec:	1080008c 	andi	r2,r2,2
   191f0:	10001326 	beq	r2,zero,19240 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   191f4:	e0bff817 	ldw	r2,-32(fp)
   191f8:	10c00417 	ldw	r3,16(r2)
   191fc:	e0bff817 	ldw	r2,-32(fp)
   19200:	10800117 	ldw	r2,4(r2)
   19204:	1880041e 	bne	r3,r2,19218 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   19208:	e0bff817 	ldw	r2,-32(fp)
   1920c:	10c00217 	ldw	r3,8(r2)
   19210:	e0bff817 	ldw	r2,-32(fp)
   19214:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   19218:	e0bff817 	ldw	r2,-32(fp)
   1921c:	10800417 	ldw	r2,16(r2)
   19220:	10ffff04 	addi	r3,r2,-4
   19224:	e0bff817 	ldw	r2,-32(fp)
   19228:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   1922c:	e0bff817 	ldw	r2,-32(fp)
   19230:	10800417 	ldw	r2,16(r2)
   19234:	e0fffe17 	ldw	r3,-8(fp)
   19238:	10c00015 	stw	r3,0(r2)
   1923c:	00001006 	br	19280 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   19240:	e0bff817 	ldw	r2,-32(fp)
   19244:	10800317 	ldw	r2,12(r2)
   19248:	11000104 	addi	r4,r2,4
   1924c:	e0fff817 	ldw	r3,-32(fp)
   19250:	19000315 	stw	r4,12(r3)
   19254:	e0fffe17 	ldw	r3,-8(fp)
   19258:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   1925c:	e0bff817 	ldw	r2,-32(fp)
   19260:	10c00317 	ldw	r3,12(r2)
   19264:	e0bff817 	ldw	r2,-32(fp)
   19268:	10800217 	ldw	r2,8(r2)
   1926c:	1880041e 	bne	r3,r2,19280 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   19270:	e0bff817 	ldw	r2,-32(fp)
   19274:	10c00117 	ldw	r3,4(r2)
   19278:	e0bff817 	ldw	r2,-32(fp)
   1927c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   19280:	e0bff817 	ldw	r2,-32(fp)
   19284:	1080058b 	ldhu	r2,22(r2)
   19288:	10800044 	addi	r2,r2,1
   1928c:	1007883a 	mov	r3,r2
   19290:	e0bff817 	ldw	r2,-32(fp)
   19294:	10c0058d 	sth	r3,22(r2)
   19298:	e0bff717 	ldw	r2,-36(fp)
   1929c:	e0bffc15 	stw	r2,-16(fp)
   192a0:	e0bffc17 	ldw	r2,-16(fp)
   192a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   192a8:	0005883a 	mov	r2,zero
}
   192ac:	e037883a 	mov	sp,fp
   192b0:	dfc00117 	ldw	ra,4(sp)
   192b4:	df000017 	ldw	fp,0(sp)
   192b8:	dec00204 	addi	sp,sp,8
   192bc:	f800283a 	ret

000192c0 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   192c0:	defff604 	addi	sp,sp,-40
   192c4:	df000915 	stw	fp,36(sp)
   192c8:	df000904 	addi	fp,sp,36
   192cc:	e13ffe15 	stw	r4,-8(fp)
   192d0:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   192d4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   192d8:	e0bffe17 	ldw	r2,-8(fp)
   192dc:	1000021e 	bne	r2,zero,192e8 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   192e0:	00800104 	movi	r2,4
   192e4:	00004906 	br	1940c <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   192e8:	e0bfff17 	ldw	r2,-4(fp)
   192ec:	1000021e 	bne	r2,zero,192f8 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   192f0:	00800244 	movi	r2,9
   192f4:	00004506 	br	1940c <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   192f8:	e0bffe17 	ldw	r2,-8(fp)
   192fc:	10800003 	ldbu	r2,0(r2)
   19300:	10803fcc 	andi	r2,r2,255
   19304:	108000a0 	cmpeqi	r2,r2,2
   19308:	1000021e 	bne	r2,zero,19314 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1930c:	00800044 	movi	r2,1
   19310:	00003e06 	br	1940c <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19314:	0005303a 	rdctl	r2,status
   19318:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1931c:	e0fffc17 	ldw	r3,-16(fp)
   19320:	00bfff84 	movi	r2,-2
   19324:	1884703a 	and	r2,r3,r2
   19328:	1001703a 	wrctl	status,r2
  
  return context;
   1932c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   19330:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   19334:	e0bffe17 	ldw	r2,-8(fp)
   19338:	10c00283 	ldbu	r3,10(r2)
   1933c:	e0bfff17 	ldw	r2,-4(fp)
   19340:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   19344:	e0bffe17 	ldw	r2,-8(fp)
   19348:	108002c4 	addi	r2,r2,11
   1934c:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   19350:	e0bfff17 	ldw	r2,-4(fp)
   19354:	10800204 	addi	r2,r2,8
   19358:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1935c:	e03ff705 	stb	zero,-36(fp)
   19360:	00000b06 	br	19390 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   19364:	e0bff917 	ldw	r2,-28(fp)
   19368:	10c00044 	addi	r3,r2,1
   1936c:	e0fff915 	stw	r3,-28(fp)
   19370:	e0fff817 	ldw	r3,-32(fp)
   19374:	19000044 	addi	r4,r3,1
   19378:	e13ff815 	stw	r4,-32(fp)
   1937c:	18c00003 	ldbu	r3,0(r3)
   19380:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   19384:	e0bff703 	ldbu	r2,-36(fp)
   19388:	10800044 	addi	r2,r2,1
   1938c:	e0bff705 	stb	r2,-36(fp)
   19390:	e0bff703 	ldbu	r2,-36(fp)
   19394:	108000f0 	cmpltui	r2,r2,3
   19398:	103ff21e 	bne	r2,zero,19364 <__alt_mem_Flash_flash_data+0xf4019364>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   1939c:	e0bffe17 	ldw	r2,-8(fp)
   193a0:	10800117 	ldw	r2,4(r2)
   193a4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   193a8:	e0bffb17 	ldw	r2,-20(fp)
   193ac:	1080058b 	ldhu	r2,22(r2)
   193b0:	10bfffcc 	andi	r2,r2,65535
   193b4:	10000626 	beq	r2,zero,193d0 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   193b8:	e0bffb17 	ldw	r2,-20(fp)
   193bc:	10800417 	ldw	r2,16(r2)
   193c0:	10c00017 	ldw	r3,0(r2)
   193c4:	e0bfff17 	ldw	r2,-4(fp)
   193c8:	10c00015 	stw	r3,0(r2)
   193cc:	00000206 	br	193d8 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   193d0:	e0bfff17 	ldw	r2,-4(fp)
   193d4:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   193d8:	e0bffb17 	ldw	r2,-20(fp)
   193dc:	10c0058b 	ldhu	r3,22(r2)
   193e0:	e0bfff17 	ldw	r2,-4(fp)
   193e4:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   193e8:	e0bffb17 	ldw	r2,-20(fp)
   193ec:	10c0050b 	ldhu	r3,20(r2)
   193f0:	e0bfff17 	ldw	r2,-4(fp)
   193f4:	10c0018d 	sth	r3,6(r2)
   193f8:	e0bffa17 	ldw	r2,-24(fp)
   193fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19400:	e0bffd17 	ldw	r2,-12(fp)
   19404:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19408:	0005883a 	mov	r2,zero
}
   1940c:	e037883a 	mov	sp,fp
   19410:	df000017 	ldw	fp,0(sp)
   19414:	dec00104 	addi	sp,sp,4
   19418:	f800283a 	ret

0001941c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   1941c:	defffb04 	addi	sp,sp,-20
   19420:	dfc00415 	stw	ra,16(sp)
   19424:	df000315 	stw	fp,12(sp)
   19428:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   1942c:	01000134 	movhi	r4,4
   19430:	2117e304 	addi	r4,r4,24460
   19434:	01407804 	movi	r5,480
   19438:	0014e780 	call	14e78 <OS_MemClr>
    pq1 = &OSQTbl[0];
   1943c:	00800134 	movhi	r2,4
   19440:	1097e304 	addi	r2,r2,24460
   19444:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   19448:	00800134 	movhi	r2,4
   1944c:	1097e904 	addi	r2,r2,24484
   19450:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   19454:	e03ffd0d 	sth	zero,-12(fp)
   19458:	00000c06 	br	1948c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   1945c:	e0bffe17 	ldw	r2,-8(fp)
   19460:	e0ffff17 	ldw	r3,-4(fp)
   19464:	10c00015 	stw	r3,0(r2)
        pq1++;
   19468:	e0bffe17 	ldw	r2,-8(fp)
   1946c:	10800604 	addi	r2,r2,24
   19470:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   19474:	e0bfff17 	ldw	r2,-4(fp)
   19478:	10800604 	addi	r2,r2,24
   1947c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   19480:	e0bffd0b 	ldhu	r2,-12(fp)
   19484:	10800044 	addi	r2,r2,1
   19488:	e0bffd0d 	sth	r2,-12(fp)
   1948c:	e0bffd0b 	ldhu	r2,-12(fp)
   19490:	108004f0 	cmpltui	r2,r2,19
   19494:	103ff11e 	bne	r2,zero,1945c <__alt_mem_Flash_flash_data+0xf401945c>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   19498:	e0bffe17 	ldw	r2,-8(fp)
   1949c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   194a0:	008000b4 	movhi	r2,2
   194a4:	1091ca04 	addi	r2,r2,18216
   194a8:	00c00134 	movhi	r3,4
   194ac:	18d7e304 	addi	r3,r3,24460
   194b0:	10c00015 	stw	r3,0(r2)
#endif
}
   194b4:	e037883a 	mov	sp,fp
   194b8:	dfc00117 	ldw	ra,4(sp)
   194bc:	df000017 	ldw	fp,0(sp)
   194c0:	dec00204 	addi	sp,sp,8
   194c4:	f800283a 	ret

000194c8 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   194c8:	defffa04 	addi	sp,sp,-24
   194cc:	df000515 	stw	fp,20(sp)
   194d0:	df000504 	addi	fp,sp,20
   194d4:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   194d8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   194dc:	e0bfff17 	ldw	r2,-4(fp)
   194e0:	1000021e 	bne	r2,zero,194ec <OSSemAccept+0x24>
        return (0);
   194e4:	0005883a 	mov	r2,zero
   194e8:	00001f06 	br	19568 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   194ec:	e0bfff17 	ldw	r2,-4(fp)
   194f0:	10800003 	ldbu	r2,0(r2)
   194f4:	10803fcc 	andi	r2,r2,255
   194f8:	108000e0 	cmpeqi	r2,r2,3
   194fc:	1000021e 	bne	r2,zero,19508 <OSSemAccept+0x40>
        return (0);
   19500:	0005883a 	mov	r2,zero
   19504:	00001806 	br	19568 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19508:	0005303a 	rdctl	r2,status
   1950c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19510:	e0fffd17 	ldw	r3,-12(fp)
   19514:	00bfff84 	movi	r2,-2
   19518:	1884703a 	and	r2,r3,r2
   1951c:	1001703a 	wrctl	status,r2
  
  return context;
   19520:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   19524:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   19528:	e0bfff17 	ldw	r2,-4(fp)
   1952c:	1080020b 	ldhu	r2,8(r2)
   19530:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   19534:	e0bffc0b 	ldhu	r2,-16(fp)
   19538:	10000626 	beq	r2,zero,19554 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   1953c:	e0bfff17 	ldw	r2,-4(fp)
   19540:	1080020b 	ldhu	r2,8(r2)
   19544:	10bfffc4 	addi	r2,r2,-1
   19548:	1007883a 	mov	r3,r2
   1954c:	e0bfff17 	ldw	r2,-4(fp)
   19550:	10c0020d 	sth	r3,8(r2)
   19554:	e0bffb17 	ldw	r2,-20(fp)
   19558:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1955c:	e0bffe17 	ldw	r2,-8(fp)
   19560:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   19564:	e0bffc0b 	ldhu	r2,-16(fp)
}
   19568:	e037883a 	mov	sp,fp
   1956c:	df000017 	ldw	fp,0(sp)
   19570:	dec00104 	addi	sp,sp,4
   19574:	f800283a 	ret

00019578 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   19578:	defff904 	addi	sp,sp,-28
   1957c:	dfc00615 	stw	ra,24(sp)
   19580:	df000515 	stw	fp,20(sp)
   19584:	df000504 	addi	fp,sp,20
   19588:	2005883a 	mov	r2,r4
   1958c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   19590:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   19594:	008000b4 	movhi	r2,2
   19598:	1091cd04 	addi	r2,r2,18228
   1959c:	10800003 	ldbu	r2,0(r2)
   195a0:	10803fcc 	andi	r2,r2,255
   195a4:	10000226 	beq	r2,zero,195b0 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   195a8:	0005883a 	mov	r2,zero
   195ac:	00002d06 	br	19664 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   195b0:	0005303a 	rdctl	r2,status
   195b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   195b8:	e0fffd17 	ldw	r3,-12(fp)
   195bc:	00bfff84 	movi	r2,-2
   195c0:	1884703a 	and	r2,r3,r2
   195c4:	1001703a 	wrctl	status,r2
  
  return context;
   195c8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   195cc:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   195d0:	008000b4 	movhi	r2,2
   195d4:	1091cc04 	addi	r2,r2,18224
   195d8:	10800017 	ldw	r2,0(r2)
   195dc:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   195e0:	008000b4 	movhi	r2,2
   195e4:	1091cc04 	addi	r2,r2,18224
   195e8:	10800017 	ldw	r2,0(r2)
   195ec:	10000726 	beq	r2,zero,1960c <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   195f0:	008000b4 	movhi	r2,2
   195f4:	1091cc04 	addi	r2,r2,18224
   195f8:	10800017 	ldw	r2,0(r2)
   195fc:	10c00117 	ldw	r3,4(r2)
   19600:	008000b4 	movhi	r2,2
   19604:	1091cc04 	addi	r2,r2,18224
   19608:	10c00015 	stw	r3,0(r2)
   1960c:	e0bffb17 	ldw	r2,-20(fp)
   19610:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19614:	e0bffe17 	ldw	r2,-8(fp)
   19618:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   1961c:	e0bffc17 	ldw	r2,-16(fp)
   19620:	10000f26 	beq	r2,zero,19660 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   19624:	e0bffc17 	ldw	r2,-16(fp)
   19628:	00c000c4 	movi	r3,3
   1962c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   19630:	e0bffc17 	ldw	r2,-16(fp)
   19634:	e0ffff0b 	ldhu	r3,-4(fp)
   19638:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   1963c:	e0bffc17 	ldw	r2,-16(fp)
   19640:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   19644:	e0bffc17 	ldw	r2,-16(fp)
   19648:	00c00fc4 	movi	r3,63
   1964c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   19650:	e0bffc17 	ldw	r2,-16(fp)
   19654:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   19658:	e13ffc17 	ldw	r4,-16(fp)
   1965c:	0014ab40 	call	14ab4 <OS_EventWaitListInit>
    }
    return (pevent);
   19660:	e0bffc17 	ldw	r2,-16(fp)
}
   19664:	e037883a 	mov	sp,fp
   19668:	dfc00117 	ldw	ra,4(sp)
   1966c:	df000017 	ldw	fp,0(sp)
   19670:	dec00204 	addi	sp,sp,8
   19674:	f800283a 	ret

00019678 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   19678:	defff304 	addi	sp,sp,-52
   1967c:	dfc00c15 	stw	ra,48(sp)
   19680:	df000b15 	stw	fp,44(sp)
   19684:	df000b04 	addi	fp,sp,44
   19688:	e13ffd15 	stw	r4,-12(fp)
   1968c:	2805883a 	mov	r2,r5
   19690:	e1bfff15 	stw	r6,-4(fp)
   19694:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   19698:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1969c:	e0bfff17 	ldw	r2,-4(fp)
   196a0:	1000021e 	bne	r2,zero,196ac <OSSemDel+0x34>
        return (pevent);
   196a4:	e0bffd17 	ldw	r2,-12(fp)
   196a8:	00008806 	br	198cc <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   196ac:	e0bffd17 	ldw	r2,-12(fp)
   196b0:	1000051e 	bne	r2,zero,196c8 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   196b4:	e0bfff17 	ldw	r2,-4(fp)
   196b8:	00c00104 	movi	r3,4
   196bc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   196c0:	e0bffd17 	ldw	r2,-12(fp)
   196c4:	00008106 	br	198cc <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   196c8:	e0bffd17 	ldw	r2,-12(fp)
   196cc:	10800003 	ldbu	r2,0(r2)
   196d0:	10803fcc 	andi	r2,r2,255
   196d4:	108000e0 	cmpeqi	r2,r2,3
   196d8:	1000051e 	bne	r2,zero,196f0 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   196dc:	e0bfff17 	ldw	r2,-4(fp)
   196e0:	00c00044 	movi	r3,1
   196e4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   196e8:	e0bffd17 	ldw	r2,-12(fp)
   196ec:	00007706 	br	198cc <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   196f0:	008000b4 	movhi	r2,2
   196f4:	1091cd04 	addi	r2,r2,18228
   196f8:	10800003 	ldbu	r2,0(r2)
   196fc:	10803fcc 	andi	r2,r2,255
   19700:	10000526 	beq	r2,zero,19718 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   19704:	e0bfff17 	ldw	r2,-4(fp)
   19708:	00c003c4 	movi	r3,15
   1970c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   19710:	e0bffd17 	ldw	r2,-12(fp)
   19714:	00006d06 	br	198cc <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19718:	0005303a 	rdctl	r2,status
   1971c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19720:	e0fff817 	ldw	r3,-32(fp)
   19724:	00bfff84 	movi	r2,-2
   19728:	1884703a 	and	r2,r3,r2
   1972c:	1001703a 	wrctl	status,r2
  
  return context;
   19730:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   19734:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   19738:	e0bffd17 	ldw	r2,-12(fp)
   1973c:	10800283 	ldbu	r2,10(r2)
   19740:	10803fcc 	andi	r2,r2,255
   19744:	10000326 	beq	r2,zero,19754 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   19748:	00800044 	movi	r2,1
   1974c:	e0bff505 	stb	r2,-44(fp)
   19750:	00000106 	br	19758 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   19754:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   19758:	e0bffe03 	ldbu	r2,-8(fp)
   1975c:	10000326 	beq	r2,zero,1976c <OSSemDel+0xf4>
   19760:	10800060 	cmpeqi	r2,r2,1
   19764:	10002c1e 	bne	r2,zero,19818 <OSSemDel+0x1a0>
   19768:	00004d06 	br	198a0 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   1976c:	e0bff503 	ldbu	r2,-44(fp)
   19770:	10001a1e 	bne	r2,zero,197dc <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   19774:	e0bffd17 	ldw	r2,-12(fp)
   19778:	00c00fc4 	movi	r3,63
   1977c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   19780:	e0bffd17 	ldw	r2,-12(fp)
   19784:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   19788:	e0bffd17 	ldw	r2,-12(fp)
   1978c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   19790:	008000b4 	movhi	r2,2
   19794:	1091cc04 	addi	r2,r2,18224
   19798:	10c00017 	ldw	r3,0(r2)
   1979c:	e0bffd17 	ldw	r2,-12(fp)
   197a0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   197a4:	e0bffd17 	ldw	r2,-12(fp)
   197a8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   197ac:	008000b4 	movhi	r2,2
   197b0:	1091cc04 	addi	r2,r2,18224
   197b4:	e0fffd17 	ldw	r3,-12(fp)
   197b8:	10c00015 	stw	r3,0(r2)
   197bc:	e0bff717 	ldw	r2,-36(fp)
   197c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   197c4:	e0bff917 	ldw	r2,-28(fp)
   197c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   197cc:	e0bfff17 	ldw	r2,-4(fp)
   197d0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   197d4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   197d8:	00003b06 	br	198c8 <OSSemDel+0x250>
   197dc:	e0bff717 	ldw	r2,-36(fp)
   197e0:	e0bffa15 	stw	r2,-24(fp)
   197e4:	e0bffa17 	ldw	r2,-24(fp)
   197e8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   197ec:	e0bfff17 	ldw	r2,-4(fp)
   197f0:	00c01244 	movi	r3,73
   197f4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   197f8:	e0bffd17 	ldw	r2,-12(fp)
   197fc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   19800:	00003106 	br	198c8 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   19804:	e13ffd17 	ldw	r4,-12(fp)
   19808:	000b883a 	mov	r5,zero
   1980c:	01800044 	movi	r6,1
   19810:	000f883a 	mov	r7,zero
   19814:	00145140 	call	14514 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   19818:	e0bffd17 	ldw	r2,-12(fp)
   1981c:	10800283 	ldbu	r2,10(r2)
   19820:	10803fcc 	andi	r2,r2,255
   19824:	103ff71e 	bne	r2,zero,19804 <__alt_mem_Flash_flash_data+0xf4019804>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   19828:	e0bffd17 	ldw	r2,-12(fp)
   1982c:	00c00fc4 	movi	r3,63
   19830:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   19834:	e0bffd17 	ldw	r2,-12(fp)
   19838:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1983c:	e0bffd17 	ldw	r2,-12(fp)
   19840:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   19844:	008000b4 	movhi	r2,2
   19848:	1091cc04 	addi	r2,r2,18224
   1984c:	10c00017 	ldw	r3,0(r2)
   19850:	e0bffd17 	ldw	r2,-12(fp)
   19854:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   19858:	e0bffd17 	ldw	r2,-12(fp)
   1985c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   19860:	008000b4 	movhi	r2,2
   19864:	1091cc04 	addi	r2,r2,18224
   19868:	e0fffd17 	ldw	r3,-12(fp)
   1986c:	10c00015 	stw	r3,0(r2)
   19870:	e0bff717 	ldw	r2,-36(fp)
   19874:	e0bffb15 	stw	r2,-20(fp)
   19878:	e0bffb17 	ldw	r2,-20(fp)
   1987c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   19880:	e0bff503 	ldbu	r2,-44(fp)
   19884:	10800058 	cmpnei	r2,r2,1
   19888:	1000011e 	bne	r2,zero,19890 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1988c:	0014f2c0 	call	14f2c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   19890:	e0bfff17 	ldw	r2,-4(fp)
   19894:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   19898:	e03ff615 	stw	zero,-40(fp)
             break;
   1989c:	00000a06 	br	198c8 <OSSemDel+0x250>
   198a0:	e0bff717 	ldw	r2,-36(fp)
   198a4:	e0bffc15 	stw	r2,-16(fp)
   198a8:	e0bffc17 	ldw	r2,-16(fp)
   198ac:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   198b0:	e0bfff17 	ldw	r2,-4(fp)
   198b4:	00c001c4 	movi	r3,7
   198b8:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   198bc:	e0bffd17 	ldw	r2,-12(fp)
   198c0:	e0bff615 	stw	r2,-40(fp)
             break;
   198c4:	0001883a 	nop
    }
    return (pevent_return);
   198c8:	e0bff617 	ldw	r2,-40(fp)
}
   198cc:	e037883a 	mov	sp,fp
   198d0:	dfc00117 	ldw	ra,4(sp)
   198d4:	df000017 	ldw	fp,0(sp)
   198d8:	dec00204 	addi	sp,sp,8
   198dc:	f800283a 	ret

000198e0 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   198e0:	defff504 	addi	sp,sp,-44
   198e4:	dfc00a15 	stw	ra,40(sp)
   198e8:	df000915 	stw	fp,36(sp)
   198ec:	df000904 	addi	fp,sp,36
   198f0:	e13ffd15 	stw	r4,-12(fp)
   198f4:	2805883a 	mov	r2,r5
   198f8:	e1bfff15 	stw	r6,-4(fp)
   198fc:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19900:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   19904:	e0bfff17 	ldw	r2,-4(fp)
   19908:	1000011e 	bne	r2,zero,19910 <OSSemPend+0x30>
        return;
   1990c:	00008906 	br	19b34 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19910:	e0bffd17 	ldw	r2,-12(fp)
   19914:	1000041e 	bne	r2,zero,19928 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   19918:	e0bfff17 	ldw	r2,-4(fp)
   1991c:	00c00104 	movi	r3,4
   19920:	10c00005 	stb	r3,0(r2)
        return;
   19924:	00008306 	br	19b34 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   19928:	e0bffd17 	ldw	r2,-12(fp)
   1992c:	10800003 	ldbu	r2,0(r2)
   19930:	10803fcc 	andi	r2,r2,255
   19934:	108000e0 	cmpeqi	r2,r2,3
   19938:	1000041e 	bne	r2,zero,1994c <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1993c:	e0bfff17 	ldw	r2,-4(fp)
   19940:	00c00044 	movi	r3,1
   19944:	10c00005 	stb	r3,0(r2)
        return;
   19948:	00007a06 	br	19b34 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   1994c:	008000b4 	movhi	r2,2
   19950:	1091cd04 	addi	r2,r2,18228
   19954:	10800003 	ldbu	r2,0(r2)
   19958:	10803fcc 	andi	r2,r2,255
   1995c:	10000426 	beq	r2,zero,19970 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   19960:	e0bfff17 	ldw	r2,-4(fp)
   19964:	00c00084 	movi	r3,2
   19968:	10c00005 	stb	r3,0(r2)
        return;
   1996c:	00007106 	br	19b34 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   19970:	008000b4 	movhi	r2,2
   19974:	1091bf04 	addi	r2,r2,18172
   19978:	10800003 	ldbu	r2,0(r2)
   1997c:	10803fcc 	andi	r2,r2,255
   19980:	10000426 	beq	r2,zero,19994 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   19984:	e0bfff17 	ldw	r2,-4(fp)
   19988:	00c00344 	movi	r3,13
   1998c:	10c00005 	stb	r3,0(r2)
        return;
   19990:	00006806 	br	19b34 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19994:	0005303a 	rdctl	r2,status
   19998:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1999c:	e0fff817 	ldw	r3,-32(fp)
   199a0:	00bfff84 	movi	r2,-2
   199a4:	1884703a 	and	r2,r3,r2
   199a8:	1001703a 	wrctl	status,r2
  
  return context;
   199ac:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   199b0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   199b4:	e0bffd17 	ldw	r2,-12(fp)
   199b8:	1080020b 	ldhu	r2,8(r2)
   199bc:	10bfffcc 	andi	r2,r2,65535
   199c0:	10000d26 	beq	r2,zero,199f8 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   199c4:	e0bffd17 	ldw	r2,-12(fp)
   199c8:	1080020b 	ldhu	r2,8(r2)
   199cc:	10bfffc4 	addi	r2,r2,-1
   199d0:	1007883a 	mov	r3,r2
   199d4:	e0bffd17 	ldw	r2,-12(fp)
   199d8:	10c0020d 	sth	r3,8(r2)
   199dc:	e0bff717 	ldw	r2,-36(fp)
   199e0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   199e4:	e0bff917 	ldw	r2,-28(fp)
   199e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   199ec:	e0bfff17 	ldw	r2,-4(fp)
   199f0:	10000005 	stb	zero,0(r2)
        return;
   199f4:	00004f06 	br	19b34 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   199f8:	008000b4 	movhi	r2,2
   199fc:	1091ce04 	addi	r2,r2,18232
   19a00:	10c00017 	ldw	r3,0(r2)
   19a04:	008000b4 	movhi	r2,2
   19a08:	1091ce04 	addi	r2,r2,18232
   19a0c:	10800017 	ldw	r2,0(r2)
   19a10:	10800c03 	ldbu	r2,48(r2)
   19a14:	10800054 	ori	r2,r2,1
   19a18:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   19a1c:	008000b4 	movhi	r2,2
   19a20:	1091ce04 	addi	r2,r2,18232
   19a24:	10800017 	ldw	r2,0(r2)
   19a28:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   19a2c:	008000b4 	movhi	r2,2
   19a30:	1091ce04 	addi	r2,r2,18232
   19a34:	10800017 	ldw	r2,0(r2)
   19a38:	e0fffe0b 	ldhu	r3,-8(fp)
   19a3c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   19a40:	e13ffd17 	ldw	r4,-12(fp)
   19a44:	00146ac0 	call	146ac <OS_EventTaskWait>
   19a48:	e0bff717 	ldw	r2,-36(fp)
   19a4c:	e0bffa15 	stw	r2,-24(fp)
   19a50:	e0bffa17 	ldw	r2,-24(fp)
   19a54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   19a58:	0014f2c0 	call	14f2c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19a5c:	0005303a 	rdctl	r2,status
   19a60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19a64:	e0fffb17 	ldw	r3,-20(fp)
   19a68:	00bfff84 	movi	r2,-2
   19a6c:	1884703a 	and	r2,r3,r2
   19a70:	1001703a 	wrctl	status,r2
  
  return context;
   19a74:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   19a78:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   19a7c:	008000b4 	movhi	r2,2
   19a80:	1091ce04 	addi	r2,r2,18232
   19a84:	10800017 	ldw	r2,0(r2)
   19a88:	10800c43 	ldbu	r2,49(r2)
   19a8c:	10803fcc 	andi	r2,r2,255
   19a90:	10000326 	beq	r2,zero,19aa0 <OSSemPend+0x1c0>
   19a94:	108000a0 	cmpeqi	r2,r2,2
   19a98:	1000041e 	bne	r2,zero,19aac <OSSemPend+0x1cc>
   19a9c:	00000706 	br	19abc <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   19aa0:	e0bfff17 	ldw	r2,-4(fp)
   19aa4:	10000005 	stb	zero,0(r2)
             break;
   19aa8:	00000e06 	br	19ae4 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   19aac:	e0bfff17 	ldw	r2,-4(fp)
   19ab0:	00c00384 	movi	r3,14
   19ab4:	10c00005 	stb	r3,0(r2)
             break;
   19ab8:	00000a06 	br	19ae4 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   19abc:	008000b4 	movhi	r2,2
   19ac0:	1091ce04 	addi	r2,r2,18232
   19ac4:	10800017 	ldw	r2,0(r2)
   19ac8:	1009883a 	mov	r4,r2
   19acc:	e17ffd17 	ldw	r5,-12(fp)
   19ad0:	00149040 	call	14904 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   19ad4:	e0bfff17 	ldw	r2,-4(fp)
   19ad8:	00c00284 	movi	r3,10
   19adc:	10c00005 	stb	r3,0(r2)
             break;
   19ae0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   19ae4:	008000b4 	movhi	r2,2
   19ae8:	1091ce04 	addi	r2,r2,18232
   19aec:	10800017 	ldw	r2,0(r2)
   19af0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   19af4:	008000b4 	movhi	r2,2
   19af8:	1091ce04 	addi	r2,r2,18232
   19afc:	10800017 	ldw	r2,0(r2)
   19b00:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   19b04:	008000b4 	movhi	r2,2
   19b08:	1091ce04 	addi	r2,r2,18232
   19b0c:	10800017 	ldw	r2,0(r2)
   19b10:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   19b14:	008000b4 	movhi	r2,2
   19b18:	1091ce04 	addi	r2,r2,18232
   19b1c:	10800017 	ldw	r2,0(r2)
   19b20:	10000815 	stw	zero,32(r2)
   19b24:	e0bff717 	ldw	r2,-36(fp)
   19b28:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19b2c:	e0bffc17 	ldw	r2,-16(fp)
   19b30:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   19b34:	e037883a 	mov	sp,fp
   19b38:	dfc00117 	ldw	ra,4(sp)
   19b3c:	df000017 	ldw	fp,0(sp)
   19b40:	dec00204 	addi	sp,sp,8
   19b44:	f800283a 	ret

00019b48 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   19b48:	defff604 	addi	sp,sp,-40
   19b4c:	dfc00915 	stw	ra,36(sp)
   19b50:	df000815 	stw	fp,32(sp)
   19b54:	df000804 	addi	fp,sp,32
   19b58:	e13ffd15 	stw	r4,-12(fp)
   19b5c:	2805883a 	mov	r2,r5
   19b60:	e1bfff15 	stw	r6,-4(fp)
   19b64:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19b68:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   19b6c:	e0bfff17 	ldw	r2,-4(fp)
   19b70:	1000021e 	bne	r2,zero,19b7c <OSSemPendAbort+0x34>
        return (0);
   19b74:	0005883a 	mov	r2,zero
   19b78:	00004906 	br	19ca0 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19b7c:	e0bffd17 	ldw	r2,-12(fp)
   19b80:	1000051e 	bne	r2,zero,19b98 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   19b84:	e0bfff17 	ldw	r2,-4(fp)
   19b88:	00c00104 	movi	r3,4
   19b8c:	10c00005 	stb	r3,0(r2)
        return (0);
   19b90:	0005883a 	mov	r2,zero
   19b94:	00004206 	br	19ca0 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   19b98:	e0bffd17 	ldw	r2,-12(fp)
   19b9c:	10800003 	ldbu	r2,0(r2)
   19ba0:	10803fcc 	andi	r2,r2,255
   19ba4:	108000e0 	cmpeqi	r2,r2,3
   19ba8:	1000051e 	bne	r2,zero,19bc0 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   19bac:	e0bfff17 	ldw	r2,-4(fp)
   19bb0:	00c00044 	movi	r3,1
   19bb4:	10c00005 	stb	r3,0(r2)
        return (0);
   19bb8:	0005883a 	mov	r2,zero
   19bbc:	00003806 	br	19ca0 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19bc0:	0005303a 	rdctl	r2,status
   19bc4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19bc8:	e0fffa17 	ldw	r3,-24(fp)
   19bcc:	00bfff84 	movi	r2,-2
   19bd0:	1884703a 	and	r2,r3,r2
   19bd4:	1001703a 	wrctl	status,r2
  
  return context;
   19bd8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   19bdc:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   19be0:	e0bffd17 	ldw	r2,-12(fp)
   19be4:	10800283 	ldbu	r2,10(r2)
   19be8:	10803fcc 	andi	r2,r2,255
   19bec:	10002526 	beq	r2,zero,19c84 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   19bf0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   19bf4:	e0bffe03 	ldbu	r2,-8(fp)
   19bf8:	10800060 	cmpeqi	r2,r2,1
   19bfc:	10000e26 	beq	r2,zero,19c38 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   19c00:	00000806 	br	19c24 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   19c04:	e13ffd17 	ldw	r4,-12(fp)
   19c08:	000b883a 	mov	r5,zero
   19c0c:	01800044 	movi	r6,1
   19c10:	01c00084 	movi	r7,2
   19c14:	00145140 	call	14514 <OS_EventTaskRdy>
                     nbr_tasks++;
   19c18:	e0bff803 	ldbu	r2,-32(fp)
   19c1c:	10800044 	addi	r2,r2,1
   19c20:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   19c24:	e0bffd17 	ldw	r2,-12(fp)
   19c28:	10800283 	ldbu	r2,10(r2)
   19c2c:	10803fcc 	andi	r2,r2,255
   19c30:	103ff41e 	bne	r2,zero,19c04 <__alt_mem_Flash_flash_data+0xf4019c04>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   19c34:	00000906 	br	19c5c <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   19c38:	e13ffd17 	ldw	r4,-12(fp)
   19c3c:	000b883a 	mov	r5,zero
   19c40:	01800044 	movi	r6,1
   19c44:	01c00084 	movi	r7,2
   19c48:	00145140 	call	14514 <OS_EventTaskRdy>
                 nbr_tasks++;
   19c4c:	e0bff803 	ldbu	r2,-32(fp)
   19c50:	10800044 	addi	r2,r2,1
   19c54:	e0bff805 	stb	r2,-32(fp)
                 break;
   19c58:	0001883a 	nop
   19c5c:	e0bff917 	ldw	r2,-28(fp)
   19c60:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19c64:	e0bffb17 	ldw	r2,-20(fp)
   19c68:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   19c6c:	0014f2c0 	call	14f2c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   19c70:	e0bfff17 	ldw	r2,-4(fp)
   19c74:	00c00384 	movi	r3,14
   19c78:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   19c7c:	e0bff803 	ldbu	r2,-32(fp)
   19c80:	00000706 	br	19ca0 <OSSemPendAbort+0x158>
   19c84:	e0bff917 	ldw	r2,-28(fp)
   19c88:	e0bffc15 	stw	r2,-16(fp)
   19c8c:	e0bffc17 	ldw	r2,-16(fp)
   19c90:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   19c94:	e0bfff17 	ldw	r2,-4(fp)
   19c98:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   19c9c:	0005883a 	mov	r2,zero
}
   19ca0:	e037883a 	mov	sp,fp
   19ca4:	dfc00117 	ldw	ra,4(sp)
   19ca8:	df000017 	ldw	fp,0(sp)
   19cac:	dec00204 	addi	sp,sp,8
   19cb0:	f800283a 	ret

00019cb4 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   19cb4:	defff804 	addi	sp,sp,-32
   19cb8:	dfc00715 	stw	ra,28(sp)
   19cbc:	df000615 	stw	fp,24(sp)
   19cc0:	df000604 	addi	fp,sp,24
   19cc4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19cc8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19ccc:	e0bfff17 	ldw	r2,-4(fp)
   19cd0:	1000021e 	bne	r2,zero,19cdc <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   19cd4:	00800104 	movi	r2,4
   19cd8:	00003506 	br	19db0 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   19cdc:	e0bfff17 	ldw	r2,-4(fp)
   19ce0:	10800003 	ldbu	r2,0(r2)
   19ce4:	10803fcc 	andi	r2,r2,255
   19ce8:	108000e0 	cmpeqi	r2,r2,3
   19cec:	1000021e 	bne	r2,zero,19cf8 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   19cf0:	00800044 	movi	r2,1
   19cf4:	00002e06 	br	19db0 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19cf8:	0005303a 	rdctl	r2,status
   19cfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19d00:	e0fffb17 	ldw	r3,-20(fp)
   19d04:	00bfff84 	movi	r2,-2
   19d08:	1884703a 	and	r2,r3,r2
   19d0c:	1001703a 	wrctl	status,r2
  
  return context;
   19d10:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   19d14:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   19d18:	e0bfff17 	ldw	r2,-4(fp)
   19d1c:	10800283 	ldbu	r2,10(r2)
   19d20:	10803fcc 	andi	r2,r2,255
   19d24:	10000c26 	beq	r2,zero,19d58 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   19d28:	e13fff17 	ldw	r4,-4(fp)
   19d2c:	000b883a 	mov	r5,zero
   19d30:	01800044 	movi	r6,1
   19d34:	000f883a 	mov	r7,zero
   19d38:	00145140 	call	14514 <OS_EventTaskRdy>
   19d3c:	e0bffa17 	ldw	r2,-24(fp)
   19d40:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19d44:	e0bffc17 	ldw	r2,-16(fp)
   19d48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   19d4c:	0014f2c0 	call	14f2c <OS_Sched>
        return (OS_ERR_NONE);
   19d50:	0005883a 	mov	r2,zero
   19d54:	00001606 	br	19db0 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   19d58:	e0bfff17 	ldw	r2,-4(fp)
   19d5c:	1080020b 	ldhu	r2,8(r2)
   19d60:	10ffffcc 	andi	r3,r2,65535
   19d64:	00bfffd4 	movui	r2,65535
   19d68:	18800c26 	beq	r3,r2,19d9c <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   19d6c:	e0bfff17 	ldw	r2,-4(fp)
   19d70:	1080020b 	ldhu	r2,8(r2)
   19d74:	10800044 	addi	r2,r2,1
   19d78:	1007883a 	mov	r3,r2
   19d7c:	e0bfff17 	ldw	r2,-4(fp)
   19d80:	10c0020d 	sth	r3,8(r2)
   19d84:	e0bffa17 	ldw	r2,-24(fp)
   19d88:	e0bffd15 	stw	r2,-12(fp)
   19d8c:	e0bffd17 	ldw	r2,-12(fp)
   19d90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   19d94:	0005883a 	mov	r2,zero
   19d98:	00000506 	br	19db0 <OSSemPost+0xfc>
   19d9c:	e0bffa17 	ldw	r2,-24(fp)
   19da0:	e0bffe15 	stw	r2,-8(fp)
   19da4:	e0bffe17 	ldw	r2,-8(fp)
   19da8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   19dac:	00800c84 	movi	r2,50
}
   19db0:	e037883a 	mov	sp,fp
   19db4:	dfc00117 	ldw	ra,4(sp)
   19db8:	df000017 	ldw	fp,0(sp)
   19dbc:	dec00204 	addi	sp,sp,8
   19dc0:	f800283a 	ret

00019dc4 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   19dc4:	defff704 	addi	sp,sp,-36
   19dc8:	df000815 	stw	fp,32(sp)
   19dcc:	df000804 	addi	fp,sp,32
   19dd0:	e13ffe15 	stw	r4,-8(fp)
   19dd4:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   19dd8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   19ddc:	e0bffe17 	ldw	r2,-8(fp)
   19de0:	1000021e 	bne	r2,zero,19dec <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   19de4:	00800104 	movi	r2,4
   19de8:	00003606 	br	19ec4 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   19dec:	e0bfff17 	ldw	r2,-4(fp)
   19df0:	1000021e 	bne	r2,zero,19dfc <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   19df4:	00800244 	movi	r2,9
   19df8:	00003206 	br	19ec4 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   19dfc:	e0bffe17 	ldw	r2,-8(fp)
   19e00:	10800003 	ldbu	r2,0(r2)
   19e04:	10803fcc 	andi	r2,r2,255
   19e08:	108000e0 	cmpeqi	r2,r2,3
   19e0c:	1000021e 	bne	r2,zero,19e18 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   19e10:	00800044 	movi	r2,1
   19e14:	00002b06 	br	19ec4 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19e18:	0005303a 	rdctl	r2,status
   19e1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19e20:	e0fffc17 	ldw	r3,-16(fp)
   19e24:	00bfff84 	movi	r2,-2
   19e28:	1884703a 	and	r2,r3,r2
   19e2c:	1001703a 	wrctl	status,r2
  
  return context;
   19e30:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   19e34:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   19e38:	e0bffe17 	ldw	r2,-8(fp)
   19e3c:	10c00283 	ldbu	r3,10(r2)
   19e40:	e0bfff17 	ldw	r2,-4(fp)
   19e44:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   19e48:	e0bffe17 	ldw	r2,-8(fp)
   19e4c:	108002c4 	addi	r2,r2,11
   19e50:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   19e54:	e0bfff17 	ldw	r2,-4(fp)
   19e58:	10800084 	addi	r2,r2,2
   19e5c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   19e60:	e03ffa05 	stb	zero,-24(fp)
   19e64:	00000b06 	br	19e94 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   19e68:	e0bff917 	ldw	r2,-28(fp)
   19e6c:	10c00044 	addi	r3,r2,1
   19e70:	e0fff915 	stw	r3,-28(fp)
   19e74:	e0fff817 	ldw	r3,-32(fp)
   19e78:	19000044 	addi	r4,r3,1
   19e7c:	e13ff815 	stw	r4,-32(fp)
   19e80:	18c00003 	ldbu	r3,0(r3)
   19e84:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   19e88:	e0bffa03 	ldbu	r2,-24(fp)
   19e8c:	10800044 	addi	r2,r2,1
   19e90:	e0bffa05 	stb	r2,-24(fp)
   19e94:	e0bffa03 	ldbu	r2,-24(fp)
   19e98:	108000f0 	cmpltui	r2,r2,3
   19e9c:	103ff21e 	bne	r2,zero,19e68 <__alt_mem_Flash_flash_data+0xf4019e68>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   19ea0:	e0bffe17 	ldw	r2,-8(fp)
   19ea4:	10c0020b 	ldhu	r3,8(r2)
   19ea8:	e0bfff17 	ldw	r2,-4(fp)
   19eac:	10c0000d 	sth	r3,0(r2)
   19eb0:	e0bffb17 	ldw	r2,-20(fp)
   19eb4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19eb8:	e0bffd17 	ldw	r2,-12(fp)
   19ebc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19ec0:	0005883a 	mov	r2,zero
}
   19ec4:	e037883a 	mov	sp,fp
   19ec8:	df000017 	ldw	fp,0(sp)
   19ecc:	dec00104 	addi	sp,sp,4
   19ed0:	f800283a 	ret

00019ed4 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   19ed4:	defff904 	addi	sp,sp,-28
   19ed8:	df000615 	stw	fp,24(sp)
   19edc:	df000604 	addi	fp,sp,24
   19ee0:	e13ffd15 	stw	r4,-12(fp)
   19ee4:	2805883a 	mov	r2,r5
   19ee8:	e1bfff15 	stw	r6,-4(fp)
   19eec:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19ef0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   19ef4:	e0bfff17 	ldw	r2,-4(fp)
   19ef8:	1000011e 	bne	r2,zero,19f00 <OSSemSet+0x2c>
        return;
   19efc:	00003006 	br	19fc0 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19f00:	e0bffd17 	ldw	r2,-12(fp)
   19f04:	1000041e 	bne	r2,zero,19f18 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   19f08:	e0bfff17 	ldw	r2,-4(fp)
   19f0c:	00c00104 	movi	r3,4
   19f10:	10c00005 	stb	r3,0(r2)
        return;
   19f14:	00002a06 	br	19fc0 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   19f18:	e0bffd17 	ldw	r2,-12(fp)
   19f1c:	10800003 	ldbu	r2,0(r2)
   19f20:	10803fcc 	andi	r2,r2,255
   19f24:	108000e0 	cmpeqi	r2,r2,3
   19f28:	1000041e 	bne	r2,zero,19f3c <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   19f2c:	e0bfff17 	ldw	r2,-4(fp)
   19f30:	00c00044 	movi	r3,1
   19f34:	10c00005 	stb	r3,0(r2)
        return;
   19f38:	00002106 	br	19fc0 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19f3c:	0005303a 	rdctl	r2,status
   19f40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19f44:	e0fffb17 	ldw	r3,-20(fp)
   19f48:	00bfff84 	movi	r2,-2
   19f4c:	1884703a 	and	r2,r3,r2
   19f50:	1001703a 	wrctl	status,r2
  
  return context;
   19f54:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   19f58:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   19f5c:	e0bfff17 	ldw	r2,-4(fp)
   19f60:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   19f64:	e0bffd17 	ldw	r2,-12(fp)
   19f68:	1080020b 	ldhu	r2,8(r2)
   19f6c:	10bfffcc 	andi	r2,r2,65535
   19f70:	10000426 	beq	r2,zero,19f84 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   19f74:	e0bffd17 	ldw	r2,-12(fp)
   19f78:	e0fffe0b 	ldhu	r3,-8(fp)
   19f7c:	10c0020d 	sth	r3,8(r2)
   19f80:	00000b06 	br	19fb0 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   19f84:	e0bffd17 	ldw	r2,-12(fp)
   19f88:	10800283 	ldbu	r2,10(r2)
   19f8c:	10803fcc 	andi	r2,r2,255
   19f90:	1000041e 	bne	r2,zero,19fa4 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   19f94:	e0bffd17 	ldw	r2,-12(fp)
   19f98:	e0fffe0b 	ldhu	r3,-8(fp)
   19f9c:	10c0020d 	sth	r3,8(r2)
   19fa0:	00000306 	br	19fb0 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   19fa4:	e0bfff17 	ldw	r2,-4(fp)
   19fa8:	00c01244 	movi	r3,73
   19fac:	10c00005 	stb	r3,0(r2)
   19fb0:	e0bffa17 	ldw	r2,-24(fp)
   19fb4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19fb8:	e0bffc17 	ldw	r2,-16(fp)
   19fbc:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   19fc0:	e037883a 	mov	sp,fp
   19fc4:	df000017 	ldw	fp,0(sp)
   19fc8:	dec00104 	addi	sp,sp,4
   19fcc:	f800283a 	ret

00019fd0 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   19fd0:	defff104 	addi	sp,sp,-60
   19fd4:	dfc00e15 	stw	ra,56(sp)
   19fd8:	df000d15 	stw	fp,52(sp)
   19fdc:	df000d04 	addi	fp,sp,52
   19fe0:	2007883a 	mov	r3,r4
   19fe4:	2805883a 	mov	r2,r5
   19fe8:	e0fffe05 	stb	r3,-8(fp)
   19fec:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   19ff0:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   19ff4:	e0bffe03 	ldbu	r2,-8(fp)
   19ff8:	10800530 	cmpltui	r2,r2,20
   19ffc:	1000051e 	bne	r2,zero,1a014 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   1a000:	e0bffe03 	ldbu	r2,-8(fp)
   1a004:	10803fe0 	cmpeqi	r2,r2,255
   1a008:	1000021e 	bne	r2,zero,1a014 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   1a00c:	00800a84 	movi	r2,42
   1a010:	00013a06 	br	1a4fc <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   1a014:	e0bfff03 	ldbu	r2,-4(fp)
   1a018:	10800530 	cmpltui	r2,r2,20
   1a01c:	1000021e 	bne	r2,zero,1a028 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   1a020:	00800a84 	movi	r2,42
   1a024:	00013506 	br	1a4fc <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a028:	0005303a 	rdctl	r2,status
   1a02c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a030:	e0fff917 	ldw	r3,-28(fp)
   1a034:	00bfff84 	movi	r2,-2
   1a038:	1884703a 	and	r2,r3,r2
   1a03c:	1001703a 	wrctl	status,r2
  
  return context;
   1a040:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1a044:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   1a048:	e0ffff03 	ldbu	r3,-4(fp)
   1a04c:	00800134 	movhi	r2,4
   1a050:	109e6f04 	addi	r2,r2,31164
   1a054:	18c7883a 	add	r3,r3,r3
   1a058:	18c7883a 	add	r3,r3,r3
   1a05c:	10c5883a 	add	r2,r2,r3
   1a060:	10800017 	ldw	r2,0(r2)
   1a064:	10000626 	beq	r2,zero,1a080 <OSTaskChangePrio+0xb0>
   1a068:	e0bff517 	ldw	r2,-44(fp)
   1a06c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a070:	e0bffa17 	ldw	r2,-24(fp)
   1a074:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   1a078:	00800a04 	movi	r2,40
   1a07c:	00011f06 	br	1a4fc <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   1a080:	e0bffe03 	ldbu	r2,-8(fp)
   1a084:	10803fd8 	cmpnei	r2,r2,255
   1a088:	1000051e 	bne	r2,zero,1a0a0 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   1a08c:	008000b4 	movhi	r2,2
   1a090:	1091ce04 	addi	r2,r2,18232
   1a094:	10800017 	ldw	r2,0(r2)
   1a098:	10800c83 	ldbu	r2,50(r2)
   1a09c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   1a0a0:	e0fffe03 	ldbu	r3,-8(fp)
   1a0a4:	00800134 	movhi	r2,4
   1a0a8:	109e6f04 	addi	r2,r2,31164
   1a0ac:	18c7883a 	add	r3,r3,r3
   1a0b0:	18c7883a 	add	r3,r3,r3
   1a0b4:	10c5883a 	add	r2,r2,r3
   1a0b8:	10800017 	ldw	r2,0(r2)
   1a0bc:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   1a0c0:	e0bff617 	ldw	r2,-40(fp)
   1a0c4:	1000061e 	bne	r2,zero,1a0e0 <OSTaskChangePrio+0x110>
   1a0c8:	e0bff517 	ldw	r2,-44(fp)
   1a0cc:	e0bffb15 	stw	r2,-20(fp)
   1a0d0:	e0bffb17 	ldw	r2,-20(fp)
   1a0d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   1a0d8:	00800a44 	movi	r2,41
   1a0dc:	00010706 	br	1a4fc <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   1a0e0:	e0bff617 	ldw	r2,-40(fp)
   1a0e4:	10800058 	cmpnei	r2,r2,1
   1a0e8:	1000061e 	bne	r2,zero,1a104 <OSTaskChangePrio+0x134>
   1a0ec:	e0bff517 	ldw	r2,-44(fp)
   1a0f0:	e0bffc15 	stw	r2,-16(fp)
   1a0f4:	e0bffc17 	ldw	r2,-16(fp)
   1a0f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   1a0fc:	008010c4 	movi	r2,67
   1a100:	0000fe06 	br	1a4fc <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   1a104:	e0bfff03 	ldbu	r2,-4(fp)
   1a108:	1004d0fa 	srli	r2,r2,3
   1a10c:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   1a110:	e0bfff03 	ldbu	r2,-4(fp)
   1a114:	108001cc 	andi	r2,r2,7
   1a118:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   1a11c:	e0bff703 	ldbu	r2,-36(fp)
   1a120:	00c00044 	movi	r3,1
   1a124:	1884983a 	sll	r2,r3,r2
   1a128:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   1a12c:	e0bff743 	ldbu	r2,-35(fp)
   1a130:	00c00044 	movi	r3,1
   1a134:	1884983a 	sll	r2,r3,r2
   1a138:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   1a13c:	e0fffe03 	ldbu	r3,-8(fp)
   1a140:	00800134 	movhi	r2,4
   1a144:	109e6f04 	addi	r2,r2,31164
   1a148:	18c7883a 	add	r3,r3,r3
   1a14c:	18c7883a 	add	r3,r3,r3
   1a150:	10c5883a 	add	r2,r2,r3
   1a154:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   1a158:	e0ffff03 	ldbu	r3,-4(fp)
   1a15c:	00800134 	movhi	r2,4
   1a160:	109e6f04 	addi	r2,r2,31164
   1a164:	18c7883a 	add	r3,r3,r3
   1a168:	18c7883a 	add	r3,r3,r3
   1a16c:	10c5883a 	add	r2,r2,r3
   1a170:	e0fff617 	ldw	r3,-40(fp)
   1a174:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   1a178:	e0bff617 	ldw	r2,-40(fp)
   1a17c:	10800d03 	ldbu	r2,52(r2)
   1a180:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   1a184:	e0bff617 	ldw	r2,-40(fp)
   1a188:	10800d83 	ldbu	r2,54(r2)
   1a18c:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   1a190:	e0bff617 	ldw	r2,-40(fp)
   1a194:	10800d43 	ldbu	r2,53(r2)
   1a198:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   1a19c:	e0fff803 	ldbu	r3,-32(fp)
   1a1a0:	008000b4 	movhi	r2,2
   1a1a4:	1091cb44 	addi	r2,r2,18221
   1a1a8:	10c5883a 	add	r2,r2,r3
   1a1ac:	10c00003 	ldbu	r3,0(r2)
   1a1b0:	e0bff883 	ldbu	r2,-30(fp)
   1a1b4:	1884703a 	and	r2,r3,r2
   1a1b8:	10803fcc 	andi	r2,r2,255
   1a1bc:	10003726 	beq	r2,zero,1a29c <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   1a1c0:	e0fff803 	ldbu	r3,-32(fp)
   1a1c4:	e13ff803 	ldbu	r4,-32(fp)
   1a1c8:	008000b4 	movhi	r2,2
   1a1cc:	1091cb44 	addi	r2,r2,18221
   1a1d0:	1105883a 	add	r2,r2,r4
   1a1d4:	10800003 	ldbu	r2,0(r2)
   1a1d8:	1009883a 	mov	r4,r2
   1a1dc:	e0bff883 	ldbu	r2,-30(fp)
   1a1e0:	0084303a 	nor	r2,zero,r2
   1a1e4:	2084703a 	and	r2,r4,r2
   1a1e8:	1009883a 	mov	r4,r2
   1a1ec:	008000b4 	movhi	r2,2
   1a1f0:	1091cb44 	addi	r2,r2,18221
   1a1f4:	10c5883a 	add	r2,r2,r3
   1a1f8:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   1a1fc:	e0fff803 	ldbu	r3,-32(fp)
   1a200:	008000b4 	movhi	r2,2
   1a204:	1091cb44 	addi	r2,r2,18221
   1a208:	10c5883a 	add	r2,r2,r3
   1a20c:	10800003 	ldbu	r2,0(r2)
   1a210:	10803fcc 	andi	r2,r2,255
   1a214:	10000b1e 	bne	r2,zero,1a244 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   1a218:	e0bff843 	ldbu	r2,-31(fp)
   1a21c:	0084303a 	nor	r2,zero,r2
   1a220:	1007883a 	mov	r3,r2
   1a224:	008000b4 	movhi	r2,2
   1a228:	1091cb04 	addi	r2,r2,18220
   1a22c:	10800003 	ldbu	r2,0(r2)
   1a230:	1884703a 	and	r2,r3,r2
   1a234:	1007883a 	mov	r3,r2
   1a238:	008000b4 	movhi	r2,2
   1a23c:	1091cb04 	addi	r2,r2,18220
   1a240:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   1a244:	008000b4 	movhi	r2,2
   1a248:	1091cb04 	addi	r2,r2,18220
   1a24c:	10c00003 	ldbu	r3,0(r2)
   1a250:	e0bff783 	ldbu	r2,-34(fp)
   1a254:	1884b03a 	or	r2,r3,r2
   1a258:	1007883a 	mov	r3,r2
   1a25c:	008000b4 	movhi	r2,2
   1a260:	1091cb04 	addi	r2,r2,18220
   1a264:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   1a268:	e0fff703 	ldbu	r3,-36(fp)
   1a26c:	e13ff703 	ldbu	r4,-36(fp)
   1a270:	008000b4 	movhi	r2,2
   1a274:	1091cb44 	addi	r2,r2,18221
   1a278:	1105883a 	add	r2,r2,r4
   1a27c:	11000003 	ldbu	r4,0(r2)
   1a280:	e0bff7c3 	ldbu	r2,-33(fp)
   1a284:	2084b03a 	or	r2,r4,r2
   1a288:	1009883a 	mov	r4,r2
   1a28c:	008000b4 	movhi	r2,2
   1a290:	1091cb44 	addi	r2,r2,18221
   1a294:	10c5883a 	add	r2,r2,r3
   1a298:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   1a29c:	e0bff617 	ldw	r2,-40(fp)
   1a2a0:	10800717 	ldw	r2,28(r2)
   1a2a4:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   1a2a8:	e0bff317 	ldw	r2,-52(fp)
   1a2ac:	10003326 	beq	r2,zero,1a37c <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   1a2b0:	e0bff803 	ldbu	r2,-32(fp)
   1a2b4:	e0fff803 	ldbu	r3,-32(fp)
   1a2b8:	e13ff317 	ldw	r4,-52(fp)
   1a2bc:	20c7883a 	add	r3,r4,r3
   1a2c0:	18c00204 	addi	r3,r3,8
   1a2c4:	18c000c3 	ldbu	r3,3(r3)
   1a2c8:	1809883a 	mov	r4,r3
   1a2cc:	e0fff883 	ldbu	r3,-30(fp)
   1a2d0:	00c6303a 	nor	r3,zero,r3
   1a2d4:	20c6703a 	and	r3,r4,r3
   1a2d8:	1809883a 	mov	r4,r3
   1a2dc:	e0fff317 	ldw	r3,-52(fp)
   1a2e0:	1885883a 	add	r2,r3,r2
   1a2e4:	10800204 	addi	r2,r2,8
   1a2e8:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   1a2ec:	e0bff803 	ldbu	r2,-32(fp)
   1a2f0:	e0fff317 	ldw	r3,-52(fp)
   1a2f4:	1885883a 	add	r2,r3,r2
   1a2f8:	10800204 	addi	r2,r2,8
   1a2fc:	108000c3 	ldbu	r2,3(r2)
   1a300:	10803fcc 	andi	r2,r2,255
   1a304:	1000091e 	bne	r2,zero,1a32c <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   1a308:	e0bff317 	ldw	r2,-52(fp)
   1a30c:	10800283 	ldbu	r2,10(r2)
   1a310:	1007883a 	mov	r3,r2
   1a314:	e0bff843 	ldbu	r2,-31(fp)
   1a318:	0084303a 	nor	r2,zero,r2
   1a31c:	1884703a 	and	r2,r3,r2
   1a320:	1007883a 	mov	r3,r2
   1a324:	e0bff317 	ldw	r2,-52(fp)
   1a328:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   1a32c:	e0bff317 	ldw	r2,-52(fp)
   1a330:	10c00283 	ldbu	r3,10(r2)
   1a334:	e0bff783 	ldbu	r2,-34(fp)
   1a338:	1884b03a 	or	r2,r3,r2
   1a33c:	1007883a 	mov	r3,r2
   1a340:	e0bff317 	ldw	r2,-52(fp)
   1a344:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   1a348:	e0bff703 	ldbu	r2,-36(fp)
   1a34c:	e0fff703 	ldbu	r3,-36(fp)
   1a350:	e13ff317 	ldw	r4,-52(fp)
   1a354:	20c7883a 	add	r3,r4,r3
   1a358:	18c00204 	addi	r3,r3,8
   1a35c:	190000c3 	ldbu	r4,3(r3)
   1a360:	e0fff7c3 	ldbu	r3,-33(fp)
   1a364:	20c6b03a 	or	r3,r4,r3
   1a368:	1809883a 	mov	r4,r3
   1a36c:	e0fff317 	ldw	r3,-52(fp)
   1a370:	1885883a 	add	r2,r3,r2
   1a374:	10800204 	addi	r2,r2,8
   1a378:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   1a37c:	e0bff617 	ldw	r2,-40(fp)
   1a380:	10800817 	ldw	r2,32(r2)
   1a384:	10004226 	beq	r2,zero,1a490 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   1a388:	e0bff617 	ldw	r2,-40(fp)
   1a38c:	10800817 	ldw	r2,32(r2)
   1a390:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   1a394:	e0bff417 	ldw	r2,-48(fp)
   1a398:	10800017 	ldw	r2,0(r2)
   1a39c:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   1a3a0:	00003906 	br	1a488 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   1a3a4:	e0bff803 	ldbu	r2,-32(fp)
   1a3a8:	e0fff803 	ldbu	r3,-32(fp)
   1a3ac:	e13ff317 	ldw	r4,-52(fp)
   1a3b0:	20c7883a 	add	r3,r4,r3
   1a3b4:	18c00204 	addi	r3,r3,8
   1a3b8:	18c000c3 	ldbu	r3,3(r3)
   1a3bc:	1809883a 	mov	r4,r3
   1a3c0:	e0fff883 	ldbu	r3,-30(fp)
   1a3c4:	00c6303a 	nor	r3,zero,r3
   1a3c8:	20c6703a 	and	r3,r4,r3
   1a3cc:	1809883a 	mov	r4,r3
   1a3d0:	e0fff317 	ldw	r3,-52(fp)
   1a3d4:	1885883a 	add	r2,r3,r2
   1a3d8:	10800204 	addi	r2,r2,8
   1a3dc:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   1a3e0:	e0bff803 	ldbu	r2,-32(fp)
   1a3e4:	e0fff317 	ldw	r3,-52(fp)
   1a3e8:	1885883a 	add	r2,r3,r2
   1a3ec:	10800204 	addi	r2,r2,8
   1a3f0:	108000c3 	ldbu	r2,3(r2)
   1a3f4:	10803fcc 	andi	r2,r2,255
   1a3f8:	1000091e 	bne	r2,zero,1a420 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   1a3fc:	e0bff317 	ldw	r2,-52(fp)
   1a400:	10800283 	ldbu	r2,10(r2)
   1a404:	1007883a 	mov	r3,r2
   1a408:	e0bff843 	ldbu	r2,-31(fp)
   1a40c:	0084303a 	nor	r2,zero,r2
   1a410:	1884703a 	and	r2,r3,r2
   1a414:	1007883a 	mov	r3,r2
   1a418:	e0bff317 	ldw	r2,-52(fp)
   1a41c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   1a420:	e0bff317 	ldw	r2,-52(fp)
   1a424:	10c00283 	ldbu	r3,10(r2)
   1a428:	e0bff783 	ldbu	r2,-34(fp)
   1a42c:	1884b03a 	or	r2,r3,r2
   1a430:	1007883a 	mov	r3,r2
   1a434:	e0bff317 	ldw	r2,-52(fp)
   1a438:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   1a43c:	e0bff703 	ldbu	r2,-36(fp)
   1a440:	e0fff703 	ldbu	r3,-36(fp)
   1a444:	e13ff317 	ldw	r4,-52(fp)
   1a448:	20c7883a 	add	r3,r4,r3
   1a44c:	18c00204 	addi	r3,r3,8
   1a450:	190000c3 	ldbu	r4,3(r3)
   1a454:	e0fff7c3 	ldbu	r3,-33(fp)
   1a458:	20c6b03a 	or	r3,r4,r3
   1a45c:	1809883a 	mov	r4,r3
   1a460:	e0fff317 	ldw	r3,-52(fp)
   1a464:	1885883a 	add	r2,r3,r2
   1a468:	10800204 	addi	r2,r2,8
   1a46c:	110000c5 	stb	r4,3(r2)
            pevents++;
   1a470:	e0bff417 	ldw	r2,-48(fp)
   1a474:	10800104 	addi	r2,r2,4
   1a478:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   1a47c:	e0bff417 	ldw	r2,-48(fp)
   1a480:	10800017 	ldw	r2,0(r2)
   1a484:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   1a488:	e0bff317 	ldw	r2,-52(fp)
   1a48c:	103fc51e 	bne	r2,zero,1a3a4 <__alt_mem_Flash_flash_data+0xf401a3a4>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   1a490:	e0bff617 	ldw	r2,-40(fp)
   1a494:	e0ffff03 	ldbu	r3,-4(fp)
   1a498:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   1a49c:	e0bff617 	ldw	r2,-40(fp)
   1a4a0:	e0fff703 	ldbu	r3,-36(fp)
   1a4a4:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   1a4a8:	e0bff617 	ldw	r2,-40(fp)
   1a4ac:	e0fff743 	ldbu	r3,-35(fp)
   1a4b0:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   1a4b4:	e0bff617 	ldw	r2,-40(fp)
   1a4b8:	e0fff783 	ldbu	r3,-34(fp)
   1a4bc:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   1a4c0:	e0bff617 	ldw	r2,-40(fp)
   1a4c4:	e0fff7c3 	ldbu	r3,-33(fp)
   1a4c8:	10c00d45 	stb	r3,53(r2)
   1a4cc:	e0bff517 	ldw	r2,-44(fp)
   1a4d0:	e0bffd15 	stw	r2,-12(fp)
   1a4d4:	e0bffd17 	ldw	r2,-12(fp)
   1a4d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1a4dc:	008000b4 	movhi	r2,2
   1a4e0:	1091bf44 	addi	r2,r2,18173
   1a4e4:	10800003 	ldbu	r2,0(r2)
   1a4e8:	10803fcc 	andi	r2,r2,255
   1a4ec:	10800058 	cmpnei	r2,r2,1
   1a4f0:	1000011e 	bne	r2,zero,1a4f8 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   1a4f4:	0014f2c0 	call	14f2c <OS_Sched>
    }
    return (OS_ERR_NONE);
   1a4f8:	0005883a 	mov	r2,zero
}
   1a4fc:	e037883a 	mov	sp,fp
   1a500:	dfc00117 	ldw	ra,4(sp)
   1a504:	df000017 	ldw	fp,0(sp)
   1a508:	dec00204 	addi	sp,sp,8
   1a50c:	f800283a 	ret

0001a510 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   1a510:	deffee04 	addi	sp,sp,-72
   1a514:	dfc01115 	stw	ra,68(sp)
   1a518:	df001015 	stw	fp,64(sp)
   1a51c:	df001004 	addi	fp,sp,64
   1a520:	e13ffc15 	stw	r4,-16(fp)
   1a524:	e17ffd15 	stw	r5,-12(fp)
   1a528:	e1bffe15 	stw	r6,-8(fp)
   1a52c:	3805883a 	mov	r2,r7
   1a530:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1a534:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1a538:	e0bfff03 	ldbu	r2,-4(fp)
   1a53c:	10800570 	cmpltui	r2,r2,21
   1a540:	1000021e 	bne	r2,zero,1a54c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   1a544:	00800a84 	movi	r2,42
   1a548:	00005b06 	br	1a6b8 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a54c:	0005303a 	rdctl	r2,status
   1a550:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a554:	e0fff617 	ldw	r3,-40(fp)
   1a558:	00bfff84 	movi	r2,-2
   1a55c:	1884703a 	and	r2,r3,r2
   1a560:	1001703a 	wrctl	status,r2
  
  return context;
   1a564:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1a568:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1a56c:	008000b4 	movhi	r2,2
   1a570:	1091cd04 	addi	r2,r2,18228
   1a574:	10800003 	ldbu	r2,0(r2)
   1a578:	10803fcc 	andi	r2,r2,255
   1a57c:	10000626 	beq	r2,zero,1a598 <OSTaskCreate+0x88>
   1a580:	e0bff317 	ldw	r2,-52(fp)
   1a584:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a588:	e0bff717 	ldw	r2,-36(fp)
   1a58c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1a590:	00800f04 	movi	r2,60
   1a594:	00004806 	br	1a6b8 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1a598:	e0ffff03 	ldbu	r3,-4(fp)
   1a59c:	00800134 	movhi	r2,4
   1a5a0:	109e6f04 	addi	r2,r2,31164
   1a5a4:	18c7883a 	add	r3,r3,r3
   1a5a8:	18c7883a 	add	r3,r3,r3
   1a5ac:	10c5883a 	add	r2,r2,r3
   1a5b0:	10800017 	ldw	r2,0(r2)
   1a5b4:	10003b1e 	bne	r2,zero,1a6a4 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1a5b8:	e0ffff03 	ldbu	r3,-4(fp)
   1a5bc:	00800134 	movhi	r2,4
   1a5c0:	109e6f04 	addi	r2,r2,31164
   1a5c4:	18c7883a 	add	r3,r3,r3
   1a5c8:	18c7883a 	add	r3,r3,r3
   1a5cc:	10c5883a 	add	r2,r2,r3
   1a5d0:	00c00044 	movi	r3,1
   1a5d4:	10c00015 	stw	r3,0(r2)
   1a5d8:	e0bff317 	ldw	r2,-52(fp)
   1a5dc:	e0bff815 	stw	r2,-32(fp)
   1a5e0:	e0bff817 	ldw	r2,-32(fp)
   1a5e4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   1a5e8:	e13ffc17 	ldw	r4,-16(fp)
   1a5ec:	e17ffd17 	ldw	r5,-12(fp)
   1a5f0:	e1bffe17 	ldw	r6,-8(fp)
   1a5f4:	000f883a 	mov	r7,zero
   1a5f8:	001f2040 	call	1f204 <OSTaskStkInit>
   1a5fc:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   1a600:	e0bfff03 	ldbu	r2,-4(fp)
   1a604:	d8000015 	stw	zero,0(sp)
   1a608:	d8000115 	stw	zero,4(sp)
   1a60c:	d8000215 	stw	zero,8(sp)
   1a610:	1009883a 	mov	r4,r2
   1a614:	e17ff417 	ldw	r5,-48(fp)
   1a618:	000d883a 	mov	r6,zero
   1a61c:	000f883a 	mov	r7,zero
   1a620:	00153300 	call	15330 <OS_TCBInit>
   1a624:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   1a628:	e0bff503 	ldbu	r2,-44(fp)
   1a62c:	1000081e 	bne	r2,zero,1a650 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   1a630:	008000b4 	movhi	r2,2
   1a634:	1091bf44 	addi	r2,r2,18173
   1a638:	10800003 	ldbu	r2,0(r2)
   1a63c:	10803fcc 	andi	r2,r2,255
   1a640:	10800058 	cmpnei	r2,r2,1
   1a644:	1000151e 	bne	r2,zero,1a69c <OSTaskCreate+0x18c>
                OS_Sched();
   1a648:	0014f2c0 	call	14f2c <OS_Sched>
   1a64c:	00001306 	br	1a69c <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a650:	0005303a 	rdctl	r2,status
   1a654:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a658:	e0fff917 	ldw	r3,-28(fp)
   1a65c:	00bfff84 	movi	r2,-2
   1a660:	1884703a 	and	r2,r3,r2
   1a664:	1001703a 	wrctl	status,r2
  
  return context;
   1a668:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1a66c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   1a670:	e0ffff03 	ldbu	r3,-4(fp)
   1a674:	00800134 	movhi	r2,4
   1a678:	109e6f04 	addi	r2,r2,31164
   1a67c:	18c7883a 	add	r3,r3,r3
   1a680:	18c7883a 	add	r3,r3,r3
   1a684:	10c5883a 	add	r2,r2,r3
   1a688:	10000015 	stw	zero,0(r2)
   1a68c:	e0bff317 	ldw	r2,-52(fp)
   1a690:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a694:	e0bffa17 	ldw	r2,-24(fp)
   1a698:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1a69c:	e0bff503 	ldbu	r2,-44(fp)
   1a6a0:	00000506 	br	1a6b8 <OSTaskCreate+0x1a8>
   1a6a4:	e0bff317 	ldw	r2,-52(fp)
   1a6a8:	e0bffb15 	stw	r2,-20(fp)
   1a6ac:	e0bffb17 	ldw	r2,-20(fp)
   1a6b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1a6b4:	00800a04 	movi	r2,40
}
   1a6b8:	e037883a 	mov	sp,fp
   1a6bc:	dfc00117 	ldw	ra,4(sp)
   1a6c0:	df000017 	ldw	fp,0(sp)
   1a6c4:	dec00204 	addi	sp,sp,8
   1a6c8:	f800283a 	ret

0001a6cc <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   1a6cc:	deffec04 	addi	sp,sp,-80
   1a6d0:	dfc01315 	stw	ra,76(sp)
   1a6d4:	df001215 	stw	fp,72(sp)
   1a6d8:	df001204 	addi	fp,sp,72
   1a6dc:	e13ffa15 	stw	r4,-24(fp)
   1a6e0:	e17ffb15 	stw	r5,-20(fp)
   1a6e4:	e1bffc15 	stw	r6,-16(fp)
   1a6e8:	3809883a 	mov	r4,r7
   1a6ec:	e0c00217 	ldw	r3,8(fp)
   1a6f0:	e0800617 	ldw	r2,24(fp)
   1a6f4:	e13ffd05 	stb	r4,-12(fp)
   1a6f8:	e0fffe0d 	sth	r3,-8(fp)
   1a6fc:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1a700:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1a704:	e0bffd03 	ldbu	r2,-12(fp)
   1a708:	10800570 	cmpltui	r2,r2,21
   1a70c:	1000021e 	bne	r2,zero,1a718 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   1a710:	00800a84 	movi	r2,42
   1a714:	00006306 	br	1a8a4 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a718:	0005303a 	rdctl	r2,status
   1a71c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a720:	e0fff417 	ldw	r3,-48(fp)
   1a724:	00bfff84 	movi	r2,-2
   1a728:	1884703a 	and	r2,r3,r2
   1a72c:	1001703a 	wrctl	status,r2
  
  return context;
   1a730:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1a734:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1a738:	008000b4 	movhi	r2,2
   1a73c:	1091cd04 	addi	r2,r2,18228
   1a740:	10800003 	ldbu	r2,0(r2)
   1a744:	10803fcc 	andi	r2,r2,255
   1a748:	10000626 	beq	r2,zero,1a764 <OSTaskCreateExt+0x98>
   1a74c:	e0bff117 	ldw	r2,-60(fp)
   1a750:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a754:	e0bff517 	ldw	r2,-44(fp)
   1a758:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1a75c:	00800f04 	movi	r2,60
   1a760:	00005006 	br	1a8a4 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1a764:	e0fffd03 	ldbu	r3,-12(fp)
   1a768:	00800134 	movhi	r2,4
   1a76c:	109e6f04 	addi	r2,r2,31164
   1a770:	18c7883a 	add	r3,r3,r3
   1a774:	18c7883a 	add	r3,r3,r3
   1a778:	10c5883a 	add	r2,r2,r3
   1a77c:	10800017 	ldw	r2,0(r2)
   1a780:	1000431e 	bne	r2,zero,1a890 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1a784:	e0fffd03 	ldbu	r3,-12(fp)
   1a788:	00800134 	movhi	r2,4
   1a78c:	109e6f04 	addi	r2,r2,31164
   1a790:	18c7883a 	add	r3,r3,r3
   1a794:	18c7883a 	add	r3,r3,r3
   1a798:	10c5883a 	add	r2,r2,r3
   1a79c:	00c00044 	movi	r3,1
   1a7a0:	10c00015 	stw	r3,0(r2)
   1a7a4:	e0bff117 	ldw	r2,-60(fp)
   1a7a8:	e0bff615 	stw	r2,-40(fp)
   1a7ac:	e0bff617 	ldw	r2,-40(fp)
   1a7b0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   1a7b4:	e0bfff0b 	ldhu	r2,-4(fp)
   1a7b8:	e1000317 	ldw	r4,12(fp)
   1a7bc:	e1400417 	ldw	r5,16(fp)
   1a7c0:	100d883a 	mov	r6,r2
   1a7c4:	001b8580 	call	1b858 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   1a7c8:	e0bfff0b 	ldhu	r2,-4(fp)
   1a7cc:	e13ffa17 	ldw	r4,-24(fp)
   1a7d0:	e17ffb17 	ldw	r5,-20(fp)
   1a7d4:	e1bffc17 	ldw	r6,-16(fp)
   1a7d8:	100f883a 	mov	r7,r2
   1a7dc:	001f2040 	call	1f204 <OSTaskStkInit>
   1a7e0:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   1a7e4:	e13ffd03 	ldbu	r4,-12(fp)
   1a7e8:	e1fffe0b 	ldhu	r7,-8(fp)
   1a7ec:	e0bfff0b 	ldhu	r2,-4(fp)
   1a7f0:	e0c00417 	ldw	r3,16(fp)
   1a7f4:	d8c00015 	stw	r3,0(sp)
   1a7f8:	e0c00517 	ldw	r3,20(fp)
   1a7fc:	d8c00115 	stw	r3,4(sp)
   1a800:	d8800215 	stw	r2,8(sp)
   1a804:	e17ff217 	ldw	r5,-56(fp)
   1a808:	e1800317 	ldw	r6,12(fp)
   1a80c:	00153300 	call	15330 <OS_TCBInit>
   1a810:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   1a814:	e0bff303 	ldbu	r2,-52(fp)
   1a818:	1000081e 	bne	r2,zero,1a83c <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   1a81c:	008000b4 	movhi	r2,2
   1a820:	1091bf44 	addi	r2,r2,18173
   1a824:	10800003 	ldbu	r2,0(r2)
   1a828:	10803fcc 	andi	r2,r2,255
   1a82c:	10800058 	cmpnei	r2,r2,1
   1a830:	1000151e 	bne	r2,zero,1a888 <OSTaskCreateExt+0x1bc>
                OS_Sched();
   1a834:	0014f2c0 	call	14f2c <OS_Sched>
   1a838:	00001306 	br	1a888 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a83c:	0005303a 	rdctl	r2,status
   1a840:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a844:	e0fff717 	ldw	r3,-36(fp)
   1a848:	00bfff84 	movi	r2,-2
   1a84c:	1884703a 	and	r2,r3,r2
   1a850:	1001703a 	wrctl	status,r2
  
  return context;
   1a854:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1a858:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   1a85c:	e0fffd03 	ldbu	r3,-12(fp)
   1a860:	00800134 	movhi	r2,4
   1a864:	109e6f04 	addi	r2,r2,31164
   1a868:	18c7883a 	add	r3,r3,r3
   1a86c:	18c7883a 	add	r3,r3,r3
   1a870:	10c5883a 	add	r2,r2,r3
   1a874:	10000015 	stw	zero,0(r2)
   1a878:	e0bff117 	ldw	r2,-60(fp)
   1a87c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a880:	e0bff817 	ldw	r2,-32(fp)
   1a884:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1a888:	e0bff303 	ldbu	r2,-52(fp)
   1a88c:	00000506 	br	1a8a4 <OSTaskCreateExt+0x1d8>
   1a890:	e0bff117 	ldw	r2,-60(fp)
   1a894:	e0bff915 	stw	r2,-28(fp)
   1a898:	e0bff917 	ldw	r2,-28(fp)
   1a89c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1a8a0:	00800a04 	movi	r2,40
}
   1a8a4:	e037883a 	mov	sp,fp
   1a8a8:	dfc00117 	ldw	ra,4(sp)
   1a8ac:	df000017 	ldw	fp,0(sp)
   1a8b0:	dec00204 	addi	sp,sp,8
   1a8b4:	f800283a 	ret

0001a8b8 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   1a8b8:	defff404 	addi	sp,sp,-48
   1a8bc:	dfc00b15 	stw	ra,44(sp)
   1a8c0:	df000a15 	stw	fp,40(sp)
   1a8c4:	df000a04 	addi	fp,sp,40
   1a8c8:	2005883a 	mov	r2,r4
   1a8cc:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   1a8d0:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   1a8d4:	008000b4 	movhi	r2,2
   1a8d8:	1091cd04 	addi	r2,r2,18228
   1a8dc:	10800003 	ldbu	r2,0(r2)
   1a8e0:	10803fcc 	andi	r2,r2,255
   1a8e4:	10000226 	beq	r2,zero,1a8f0 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   1a8e8:	00801004 	movi	r2,64
   1a8ec:	0000e506 	br	1ac84 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   1a8f0:	e0bfff03 	ldbu	r2,-4(fp)
   1a8f4:	10800518 	cmpnei	r2,r2,20
   1a8f8:	1000021e 	bne	r2,zero,1a904 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   1a8fc:	00800f84 	movi	r2,62
   1a900:	0000e006 	br	1ac84 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   1a904:	e0bfff03 	ldbu	r2,-4(fp)
   1a908:	10800530 	cmpltui	r2,r2,20
   1a90c:	1000051e 	bne	r2,zero,1a924 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   1a910:	e0bfff03 	ldbu	r2,-4(fp)
   1a914:	10803fe0 	cmpeqi	r2,r2,255
   1a918:	1000021e 	bne	r2,zero,1a924 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   1a91c:	00800a84 	movi	r2,42
   1a920:	0000d806 	br	1ac84 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a924:	0005303a 	rdctl	r2,status
   1a928:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a92c:	e0fff917 	ldw	r3,-28(fp)
   1a930:	00bfff84 	movi	r2,-2
   1a934:	1884703a 	and	r2,r3,r2
   1a938:	1001703a 	wrctl	status,r2
  
  return context;
   1a93c:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1a940:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   1a944:	e0bfff03 	ldbu	r2,-4(fp)
   1a948:	10803fd8 	cmpnei	r2,r2,255
   1a94c:	1000051e 	bne	r2,zero,1a964 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   1a950:	008000b4 	movhi	r2,2
   1a954:	1091ce04 	addi	r2,r2,18232
   1a958:	10800017 	ldw	r2,0(r2)
   1a95c:	10800c83 	ldbu	r2,50(r2)
   1a960:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a964:	e0ffff03 	ldbu	r3,-4(fp)
   1a968:	00800134 	movhi	r2,4
   1a96c:	109e6f04 	addi	r2,r2,31164
   1a970:	18c7883a 	add	r3,r3,r3
   1a974:	18c7883a 	add	r3,r3,r3
   1a978:	10c5883a 	add	r2,r2,r3
   1a97c:	10800017 	ldw	r2,0(r2)
   1a980:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   1a984:	e0bff717 	ldw	r2,-36(fp)
   1a988:	1000061e 	bne	r2,zero,1a9a4 <OSTaskDel+0xec>
   1a98c:	e0bff617 	ldw	r2,-40(fp)
   1a990:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a994:	e0bffa17 	ldw	r2,-24(fp)
   1a998:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a99c:	008010c4 	movi	r2,67
   1a9a0:	0000b806 	br	1ac84 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   1a9a4:	e0bff717 	ldw	r2,-36(fp)
   1a9a8:	10800058 	cmpnei	r2,r2,1
   1a9ac:	1000061e 	bne	r2,zero,1a9c8 <OSTaskDel+0x110>
   1a9b0:	e0bff617 	ldw	r2,-40(fp)
   1a9b4:	e0bffb15 	stw	r2,-20(fp)
   1a9b8:	e0bffb17 	ldw	r2,-20(fp)
   1a9bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1a9c0:	00800f44 	movi	r2,61
   1a9c4:	0000af06 	br	1ac84 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   1a9c8:	e0bff717 	ldw	r2,-36(fp)
   1a9cc:	10800d03 	ldbu	r2,52(r2)
   1a9d0:	10c03fcc 	andi	r3,r2,255
   1a9d4:	e0bff717 	ldw	r2,-36(fp)
   1a9d8:	10800d03 	ldbu	r2,52(r2)
   1a9dc:	11003fcc 	andi	r4,r2,255
   1a9e0:	008000b4 	movhi	r2,2
   1a9e4:	1091cb44 	addi	r2,r2,18221
   1a9e8:	1105883a 	add	r2,r2,r4
   1a9ec:	10800003 	ldbu	r2,0(r2)
   1a9f0:	1009883a 	mov	r4,r2
   1a9f4:	e0bff717 	ldw	r2,-36(fp)
   1a9f8:	10800d43 	ldbu	r2,53(r2)
   1a9fc:	0084303a 	nor	r2,zero,r2
   1aa00:	2084703a 	and	r2,r4,r2
   1aa04:	1009883a 	mov	r4,r2
   1aa08:	008000b4 	movhi	r2,2
   1aa0c:	1091cb44 	addi	r2,r2,18221
   1aa10:	10c5883a 	add	r2,r2,r3
   1aa14:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   1aa18:	e0bff717 	ldw	r2,-36(fp)
   1aa1c:	10800d03 	ldbu	r2,52(r2)
   1aa20:	10c03fcc 	andi	r3,r2,255
   1aa24:	008000b4 	movhi	r2,2
   1aa28:	1091cb44 	addi	r2,r2,18221
   1aa2c:	10c5883a 	add	r2,r2,r3
   1aa30:	10800003 	ldbu	r2,0(r2)
   1aa34:	10803fcc 	andi	r2,r2,255
   1aa38:	10000c1e 	bne	r2,zero,1aa6c <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   1aa3c:	e0bff717 	ldw	r2,-36(fp)
   1aa40:	10800d83 	ldbu	r2,54(r2)
   1aa44:	0084303a 	nor	r2,zero,r2
   1aa48:	1007883a 	mov	r3,r2
   1aa4c:	008000b4 	movhi	r2,2
   1aa50:	1091cb04 	addi	r2,r2,18220
   1aa54:	10800003 	ldbu	r2,0(r2)
   1aa58:	1884703a 	and	r2,r3,r2
   1aa5c:	1007883a 	mov	r3,r2
   1aa60:	008000b4 	movhi	r2,2
   1aa64:	1091cb04 	addi	r2,r2,18220
   1aa68:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   1aa6c:	e0bff717 	ldw	r2,-36(fp)
   1aa70:	10800717 	ldw	r2,28(r2)
   1aa74:	10000526 	beq	r2,zero,1aa8c <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1aa78:	e0bff717 	ldw	r2,-36(fp)
   1aa7c:	10800717 	ldw	r2,28(r2)
   1aa80:	e13ff717 	ldw	r4,-36(fp)
   1aa84:	100b883a 	mov	r5,r2
   1aa88:	00149040 	call	14904 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   1aa8c:	e0bff717 	ldw	r2,-36(fp)
   1aa90:	10800817 	ldw	r2,32(r2)
   1aa94:	10000526 	beq	r2,zero,1aaac <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1aa98:	e0bff717 	ldw	r2,-36(fp)
   1aa9c:	10800817 	ldw	r2,32(r2)
   1aaa0:	e13ff717 	ldw	r4,-36(fp)
   1aaa4:	100b883a 	mov	r5,r2
   1aaa8:	00149b80 	call	149b8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   1aaac:	e0bff717 	ldw	r2,-36(fp)
   1aab0:	10800a17 	ldw	r2,40(r2)
   1aab4:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   1aab8:	e0bff817 	ldw	r2,-32(fp)
   1aabc:	10000226 	beq	r2,zero,1aac8 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   1aac0:	e13ff817 	ldw	r4,-32(fp)
   1aac4:	0016f0c0 	call	16f0c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   1aac8:	e0bff717 	ldw	r2,-36(fp)
   1aacc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   1aad0:	e0bff717 	ldw	r2,-36(fp)
   1aad4:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1aad8:	e0bff717 	ldw	r2,-36(fp)
   1aadc:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   1aae0:	008000b4 	movhi	r2,2
   1aae4:	1091bf04 	addi	r2,r2,18172
   1aae8:	10800003 	ldbu	r2,0(r2)
   1aaec:	10803fcc 	andi	r2,r2,255
   1aaf0:	10803fe0 	cmpeqi	r2,r2,255
   1aaf4:	1000081e 	bne	r2,zero,1ab18 <OSTaskDel+0x260>
        OSLockNesting++;
   1aaf8:	008000b4 	movhi	r2,2
   1aafc:	1091bf04 	addi	r2,r2,18172
   1ab00:	10800003 	ldbu	r2,0(r2)
   1ab04:	10800044 	addi	r2,r2,1
   1ab08:	1007883a 	mov	r3,r2
   1ab0c:	008000b4 	movhi	r2,2
   1ab10:	1091bf04 	addi	r2,r2,18172
   1ab14:	10c00005 	stb	r3,0(r2)
   1ab18:	e0bff617 	ldw	r2,-40(fp)
   1ab1c:	e0bffc15 	stw	r2,-16(fp)
   1ab20:	e0bffc17 	ldw	r2,-16(fp)
   1ab24:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   1ab28:	00144f80 	call	144f8 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ab2c:	0005303a 	rdctl	r2,status
   1ab30:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ab34:	e0fffd17 	ldw	r3,-12(fp)
   1ab38:	00bfff84 	movi	r2,-2
   1ab3c:	1884703a 	and	r2,r3,r2
   1ab40:	1001703a 	wrctl	status,r2
  
  return context;
   1ab44:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   1ab48:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   1ab4c:	008000b4 	movhi	r2,2
   1ab50:	1091bf04 	addi	r2,r2,18172
   1ab54:	10800003 	ldbu	r2,0(r2)
   1ab58:	10803fcc 	andi	r2,r2,255
   1ab5c:	10000826 	beq	r2,zero,1ab80 <OSTaskDel+0x2c8>
        OSLockNesting--;
   1ab60:	008000b4 	movhi	r2,2
   1ab64:	1091bf04 	addi	r2,r2,18172
   1ab68:	10800003 	ldbu	r2,0(r2)
   1ab6c:	10bfffc4 	addi	r2,r2,-1
   1ab70:	1007883a 	mov	r3,r2
   1ab74:	008000b4 	movhi	r2,2
   1ab78:	1091bf04 	addi	r2,r2,18172
   1ab7c:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   1ab80:	e13ff717 	ldw	r4,-36(fp)
   1ab84:	001f3800 	call	1f380 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   1ab88:	008000b4 	movhi	r2,2
   1ab8c:	1091c744 	addi	r2,r2,18205
   1ab90:	10800003 	ldbu	r2,0(r2)
   1ab94:	10bfffc4 	addi	r2,r2,-1
   1ab98:	1007883a 	mov	r3,r2
   1ab9c:	008000b4 	movhi	r2,2
   1aba0:	1091c744 	addi	r2,r2,18205
   1aba4:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   1aba8:	e0ffff03 	ldbu	r3,-4(fp)
   1abac:	00800134 	movhi	r2,4
   1abb0:	109e6f04 	addi	r2,r2,31164
   1abb4:	18c7883a 	add	r3,r3,r3
   1abb8:	18c7883a 	add	r3,r3,r3
   1abbc:	10c5883a 	add	r2,r2,r3
   1abc0:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1abc4:	e0bff717 	ldw	r2,-36(fp)
   1abc8:	10800617 	ldw	r2,24(r2)
   1abcc:	1000091e 	bne	r2,zero,1abf4 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   1abd0:	e0bff717 	ldw	r2,-36(fp)
   1abd4:	10800517 	ldw	r2,20(r2)
   1abd8:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   1abdc:	e0bff717 	ldw	r2,-36(fp)
   1abe0:	10c00517 	ldw	r3,20(r2)
   1abe4:	008000b4 	movhi	r2,2
   1abe8:	1091c204 	addi	r2,r2,18184
   1abec:	10c00015 	stw	r3,0(r2)
   1abf0:	00000a06 	br	1ac1c <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   1abf4:	e0bff717 	ldw	r2,-36(fp)
   1abf8:	10800617 	ldw	r2,24(r2)
   1abfc:	e0fff717 	ldw	r3,-36(fp)
   1ac00:	18c00517 	ldw	r3,20(r3)
   1ac04:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   1ac08:	e0bff717 	ldw	r2,-36(fp)
   1ac0c:	10800517 	ldw	r2,20(r2)
   1ac10:	e0fff717 	ldw	r3,-36(fp)
   1ac14:	18c00617 	ldw	r3,24(r3)
   1ac18:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   1ac1c:	008000b4 	movhi	r2,2
   1ac20:	1091c604 	addi	r2,r2,18200
   1ac24:	10c00017 	ldw	r3,0(r2)
   1ac28:	e0bff717 	ldw	r2,-36(fp)
   1ac2c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   1ac30:	008000b4 	movhi	r2,2
   1ac34:	1091c604 	addi	r2,r2,18200
   1ac38:	e0fff717 	ldw	r3,-36(fp)
   1ac3c:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   1ac40:	e0bff717 	ldw	r2,-36(fp)
   1ac44:	00c00fc4 	movi	r3,63
   1ac48:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1ac4c:	e0bff717 	ldw	r2,-36(fp)
   1ac50:	10001345 	stb	zero,77(r2)
   1ac54:	e0bff617 	ldw	r2,-40(fp)
   1ac58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ac5c:	e0bffe17 	ldw	r2,-8(fp)
   1ac60:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1ac64:	008000b4 	movhi	r2,2
   1ac68:	1091bf44 	addi	r2,r2,18173
   1ac6c:	10800003 	ldbu	r2,0(r2)
   1ac70:	10803fcc 	andi	r2,r2,255
   1ac74:	10800058 	cmpnei	r2,r2,1
   1ac78:	1000011e 	bne	r2,zero,1ac80 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   1ac7c:	0014f2c0 	call	14f2c <OS_Sched>
    }
    return (OS_ERR_NONE);
   1ac80:	0005883a 	mov	r2,zero
}
   1ac84:	e037883a 	mov	sp,fp
   1ac88:	dfc00117 	ldw	ra,4(sp)
   1ac8c:	df000017 	ldw	fp,0(sp)
   1ac90:	dec00204 	addi	sp,sp,8
   1ac94:	f800283a 	ret

0001ac98 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   1ac98:	defff504 	addi	sp,sp,-44
   1ac9c:	df000a15 	stw	fp,40(sp)
   1aca0:	df000a04 	addi	fp,sp,40
   1aca4:	2005883a 	mov	r2,r4
   1aca8:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1acac:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   1acb0:	e0bfff03 	ldbu	r2,-4(fp)
   1acb4:	10800518 	cmpnei	r2,r2,20
   1acb8:	1000021e 	bne	r2,zero,1acc4 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   1acbc:	00800f84 	movi	r2,62
   1acc0:	00004706 	br	1ade0 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1acc4:	e0bfff03 	ldbu	r2,-4(fp)
   1acc8:	10800530 	cmpltui	r2,r2,20
   1accc:	1000051e 	bne	r2,zero,1ace4 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   1acd0:	e0bfff03 	ldbu	r2,-4(fp)
   1acd4:	10803fe0 	cmpeqi	r2,r2,255
   1acd8:	1000021e 	bne	r2,zero,1ace4 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   1acdc:	00800a84 	movi	r2,42
   1ace0:	00003f06 	br	1ade0 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   1ace4:	e0bfff03 	ldbu	r2,-4(fp)
   1ace8:	10803fd8 	cmpnei	r2,r2,255
   1acec:	1000131e 	bne	r2,zero,1ad3c <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1acf0:	0005303a 	rdctl	r2,status
   1acf4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1acf8:	e0fff917 	ldw	r3,-28(fp)
   1acfc:	00bfff84 	movi	r2,-2
   1ad00:	1884703a 	and	r2,r3,r2
   1ad04:	1001703a 	wrctl	status,r2
  
  return context;
   1ad08:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   1ad0c:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   1ad10:	008000b4 	movhi	r2,2
   1ad14:	1091ce04 	addi	r2,r2,18232
   1ad18:	10800017 	ldw	r2,0(r2)
   1ad1c:	10800dc3 	ldbu	r2,55(r2)
   1ad20:	e0bff705 	stb	r2,-36(fp)
   1ad24:	e0bff617 	ldw	r2,-40(fp)
   1ad28:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ad2c:	e0bffa17 	ldw	r2,-24(fp)
   1ad30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   1ad34:	e0bff703 	ldbu	r2,-36(fp)
   1ad38:	00002906 	br	1ade0 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ad3c:	0005303a 	rdctl	r2,status
   1ad40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ad44:	e0fffb17 	ldw	r3,-20(fp)
   1ad48:	00bfff84 	movi	r2,-2
   1ad4c:	1884703a 	and	r2,r3,r2
   1ad50:	1001703a 	wrctl	status,r2
  
  return context;
   1ad54:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1ad58:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1ad5c:	e0ffff03 	ldbu	r3,-4(fp)
   1ad60:	00800134 	movhi	r2,4
   1ad64:	109e6f04 	addi	r2,r2,31164
   1ad68:	18c7883a 	add	r3,r3,r3
   1ad6c:	18c7883a 	add	r3,r3,r3
   1ad70:	10c5883a 	add	r2,r2,r3
   1ad74:	10800017 	ldw	r2,0(r2)
   1ad78:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   1ad7c:	e0bff817 	ldw	r2,-32(fp)
   1ad80:	1000061e 	bne	r2,zero,1ad9c <OSTaskDelReq+0x104>
   1ad84:	e0bff617 	ldw	r2,-40(fp)
   1ad88:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ad8c:	e0bffc17 	ldw	r2,-16(fp)
   1ad90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   1ad94:	008010c4 	movi	r2,67
   1ad98:	00001106 	br	1ade0 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   1ad9c:	e0bff817 	ldw	r2,-32(fp)
   1ada0:	10800058 	cmpnei	r2,r2,1
   1ada4:	1000061e 	bne	r2,zero,1adc0 <OSTaskDelReq+0x128>
   1ada8:	e0bff617 	ldw	r2,-40(fp)
   1adac:	e0bffd15 	stw	r2,-12(fp)
   1adb0:	e0bffd17 	ldw	r2,-12(fp)
   1adb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1adb8:	00800f44 	movi	r2,61
   1adbc:	00000806 	br	1ade0 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   1adc0:	e0bff817 	ldw	r2,-32(fp)
   1adc4:	00c00fc4 	movi	r3,63
   1adc8:	10c00dc5 	stb	r3,55(r2)
   1adcc:	e0bff617 	ldw	r2,-40(fp)
   1add0:	e0bffe15 	stw	r2,-8(fp)
   1add4:	e0bffe17 	ldw	r2,-8(fp)
   1add8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1addc:	0005883a 	mov	r2,zero
}
   1ade0:	e037883a 	mov	sp,fp
   1ade4:	df000017 	ldw	fp,0(sp)
   1ade8:	dec00104 	addi	sp,sp,4
   1adec:	f800283a 	ret

0001adf0 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1adf0:	defff404 	addi	sp,sp,-48
   1adf4:	dfc00b15 	stw	ra,44(sp)
   1adf8:	df000a15 	stw	fp,40(sp)
   1adfc:	df000a04 	addi	fp,sp,40
   1ae00:	2005883a 	mov	r2,r4
   1ae04:	e17ffe15 	stw	r5,-8(fp)
   1ae08:	e1bfff15 	stw	r6,-4(fp)
   1ae0c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   1ae10:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   1ae14:	e0bfff17 	ldw	r2,-4(fp)
   1ae18:	1000021e 	bne	r2,zero,1ae24 <OSTaskNameGet+0x34>
        return (0);
   1ae1c:	0005883a 	mov	r2,zero
   1ae20:	00005806 	br	1af84 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   1ae24:	e0bffd03 	ldbu	r2,-12(fp)
   1ae28:	10800570 	cmpltui	r2,r2,21
   1ae2c:	1000081e 	bne	r2,zero,1ae50 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   1ae30:	e0bffd03 	ldbu	r2,-12(fp)
   1ae34:	10803fe0 	cmpeqi	r2,r2,255
   1ae38:	1000051e 	bne	r2,zero,1ae50 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   1ae3c:	e0bfff17 	ldw	r2,-4(fp)
   1ae40:	00c00a84 	movi	r3,42
   1ae44:	10c00005 	stb	r3,0(r2)
            return (0);
   1ae48:	0005883a 	mov	r2,zero
   1ae4c:	00004d06 	br	1af84 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   1ae50:	e0bffe17 	ldw	r2,-8(fp)
   1ae54:	1000051e 	bne	r2,zero,1ae6c <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   1ae58:	e0bfff17 	ldw	r2,-4(fp)
   1ae5c:	00c00304 	movi	r3,12
   1ae60:	10c00005 	stb	r3,0(r2)
        return (0);
   1ae64:	0005883a 	mov	r2,zero
   1ae68:	00004606 	br	1af84 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   1ae6c:	008000b4 	movhi	r2,2
   1ae70:	1091cd04 	addi	r2,r2,18228
   1ae74:	10800003 	ldbu	r2,0(r2)
   1ae78:	10803fcc 	andi	r2,r2,255
   1ae7c:	10000526 	beq	r2,zero,1ae94 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   1ae80:	e0bfff17 	ldw	r2,-4(fp)
   1ae84:	00c00444 	movi	r3,17
   1ae88:	10c00005 	stb	r3,0(r2)
        return (0);
   1ae8c:	0005883a 	mov	r2,zero
   1ae90:	00003c06 	br	1af84 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ae94:	0005303a 	rdctl	r2,status
   1ae98:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ae9c:	e0fff917 	ldw	r3,-28(fp)
   1aea0:	00bfff84 	movi	r2,-2
   1aea4:	1884703a 	and	r2,r3,r2
   1aea8:	1001703a 	wrctl	status,r2
  
  return context;
   1aeac:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1aeb0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1aeb4:	e0bffd03 	ldbu	r2,-12(fp)
   1aeb8:	10803fd8 	cmpnei	r2,r2,255
   1aebc:	1000051e 	bne	r2,zero,1aed4 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   1aec0:	008000b4 	movhi	r2,2
   1aec4:	1091ce04 	addi	r2,r2,18232
   1aec8:	10800017 	ldw	r2,0(r2)
   1aecc:	10800c83 	ldbu	r2,50(r2)
   1aed0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1aed4:	e0fffd03 	ldbu	r3,-12(fp)
   1aed8:	00800134 	movhi	r2,4
   1aedc:	109e6f04 	addi	r2,r2,31164
   1aee0:	18c7883a 	add	r3,r3,r3
   1aee4:	18c7883a 	add	r3,r3,r3
   1aee8:	10c5883a 	add	r2,r2,r3
   1aeec:	10800017 	ldw	r2,0(r2)
   1aef0:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   1aef4:	e0bff717 	ldw	r2,-36(fp)
   1aef8:	1000091e 	bne	r2,zero,1af20 <OSTaskNameGet+0x130>
   1aefc:	e0bff617 	ldw	r2,-40(fp)
   1af00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1af04:	e0bffa17 	ldw	r2,-24(fp)
   1af08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1af0c:	e0bfff17 	ldw	r2,-4(fp)
   1af10:	00c010c4 	movi	r3,67
   1af14:	10c00005 	stb	r3,0(r2)
        return (0);
   1af18:	0005883a 	mov	r2,zero
   1af1c:	00001906 	br	1af84 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   1af20:	e0bff717 	ldw	r2,-36(fp)
   1af24:	10800058 	cmpnei	r2,r2,1
   1af28:	1000091e 	bne	r2,zero,1af50 <OSTaskNameGet+0x160>
   1af2c:	e0bff617 	ldw	r2,-40(fp)
   1af30:	e0bffb15 	stw	r2,-20(fp)
   1af34:	e0bffb17 	ldw	r2,-20(fp)
   1af38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1af3c:	e0bfff17 	ldw	r2,-4(fp)
   1af40:	00c010c4 	movi	r3,67
   1af44:	10c00005 	stb	r3,0(r2)
        return (0);
   1af48:	0005883a 	mov	r2,zero
   1af4c:	00000d06 	br	1af84 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   1af50:	e0bff717 	ldw	r2,-36(fp)
   1af54:	10801304 	addi	r2,r2,76
   1af58:	e13ffe17 	ldw	r4,-8(fp)
   1af5c:	100b883a 	mov	r5,r2
   1af60:	00150680 	call	15068 <OS_StrCopy>
   1af64:	e0bff805 	stb	r2,-32(fp)
   1af68:	e0bff617 	ldw	r2,-40(fp)
   1af6c:	e0bffc15 	stw	r2,-16(fp)
   1af70:	e0bffc17 	ldw	r2,-16(fp)
   1af74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1af78:	e0bfff17 	ldw	r2,-4(fp)
   1af7c:	10000005 	stb	zero,0(r2)
    return (len);
   1af80:	e0bff803 	ldbu	r2,-32(fp)
}
   1af84:	e037883a 	mov	sp,fp
   1af88:	dfc00117 	ldw	ra,4(sp)
   1af8c:	df000017 	ldw	fp,0(sp)
   1af90:	dec00204 	addi	sp,sp,8
   1af94:	f800283a 	ret

0001af98 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1af98:	defff304 	addi	sp,sp,-52
   1af9c:	dfc00c15 	stw	ra,48(sp)
   1afa0:	df000b15 	stw	fp,44(sp)
   1afa4:	df000b04 	addi	fp,sp,44
   1afa8:	2005883a 	mov	r2,r4
   1afac:	e17ffe15 	stw	r5,-8(fp)
   1afb0:	e1bfff15 	stw	r6,-4(fp)
   1afb4:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1afb8:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1afbc:	e0bfff17 	ldw	r2,-4(fp)
   1afc0:	1000011e 	bne	r2,zero,1afc8 <OSTaskNameSet+0x30>
        return;
   1afc4:	00005f06 	br	1b144 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   1afc8:	e0bffd03 	ldbu	r2,-12(fp)
   1afcc:	10800570 	cmpltui	r2,r2,21
   1afd0:	1000071e 	bne	r2,zero,1aff0 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   1afd4:	e0bffd03 	ldbu	r2,-12(fp)
   1afd8:	10803fe0 	cmpeqi	r2,r2,255
   1afdc:	1000041e 	bne	r2,zero,1aff0 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   1afe0:	e0bfff17 	ldw	r2,-4(fp)
   1afe4:	00c00a84 	movi	r3,42
   1afe8:	10c00005 	stb	r3,0(r2)
            return;
   1afec:	00005506 	br	1b144 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   1aff0:	e0bffe17 	ldw	r2,-8(fp)
   1aff4:	1000041e 	bne	r2,zero,1b008 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   1aff8:	e0bfff17 	ldw	r2,-4(fp)
   1affc:	00c00304 	movi	r3,12
   1b000:	10c00005 	stb	r3,0(r2)
        return;
   1b004:	00004f06 	br	1b144 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   1b008:	008000b4 	movhi	r2,2
   1b00c:	1091cd04 	addi	r2,r2,18228
   1b010:	10800003 	ldbu	r2,0(r2)
   1b014:	10803fcc 	andi	r2,r2,255
   1b018:	10000426 	beq	r2,zero,1b02c <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   1b01c:	e0bfff17 	ldw	r2,-4(fp)
   1b020:	00c00484 	movi	r3,18
   1b024:	10c00005 	stb	r3,0(r2)
        return;
   1b028:	00004606 	br	1b144 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b02c:	0005303a 	rdctl	r2,status
   1b030:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b034:	e0fff817 	ldw	r3,-32(fp)
   1b038:	00bfff84 	movi	r2,-2
   1b03c:	1884703a 	and	r2,r3,r2
   1b040:	1001703a 	wrctl	status,r2
  
  return context;
   1b044:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1b048:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   1b04c:	e0bffd03 	ldbu	r2,-12(fp)
   1b050:	10803fd8 	cmpnei	r2,r2,255
   1b054:	1000051e 	bne	r2,zero,1b06c <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   1b058:	008000b4 	movhi	r2,2
   1b05c:	1091ce04 	addi	r2,r2,18232
   1b060:	10800017 	ldw	r2,0(r2)
   1b064:	10800c83 	ldbu	r2,50(r2)
   1b068:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1b06c:	e0fffd03 	ldbu	r3,-12(fp)
   1b070:	00800134 	movhi	r2,4
   1b074:	109e6f04 	addi	r2,r2,31164
   1b078:	18c7883a 	add	r3,r3,r3
   1b07c:	18c7883a 	add	r3,r3,r3
   1b080:	10c5883a 	add	r2,r2,r3
   1b084:	10800017 	ldw	r2,0(r2)
   1b088:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   1b08c:	e0bff617 	ldw	r2,-40(fp)
   1b090:	1000081e 	bne	r2,zero,1b0b4 <OSTaskNameSet+0x11c>
   1b094:	e0bff517 	ldw	r2,-44(fp)
   1b098:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b09c:	e0bff917 	ldw	r2,-28(fp)
   1b0a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1b0a4:	e0bfff17 	ldw	r2,-4(fp)
   1b0a8:	00c010c4 	movi	r3,67
   1b0ac:	10c00005 	stb	r3,0(r2)
        return;
   1b0b0:	00002406 	br	1b144 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   1b0b4:	e0bff617 	ldw	r2,-40(fp)
   1b0b8:	10800058 	cmpnei	r2,r2,1
   1b0bc:	1000081e 	bne	r2,zero,1b0e0 <OSTaskNameSet+0x148>
   1b0c0:	e0bff517 	ldw	r2,-44(fp)
   1b0c4:	e0bffa15 	stw	r2,-24(fp)
   1b0c8:	e0bffa17 	ldw	r2,-24(fp)
   1b0cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1b0d0:	e0bfff17 	ldw	r2,-4(fp)
   1b0d4:	00c010c4 	movi	r3,67
   1b0d8:	10c00005 	stb	r3,0(r2)
        return;
   1b0dc:	00001906 	br	1b144 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   1b0e0:	e13ffe17 	ldw	r4,-8(fp)
   1b0e4:	00150dc0 	call	150dc <OS_StrLen>
   1b0e8:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   1b0ec:	e0bff703 	ldbu	r2,-36(fp)
   1b0f0:	10800830 	cmpltui	r2,r2,32
   1b0f4:	1000081e 	bne	r2,zero,1b118 <OSTaskNameSet+0x180>
   1b0f8:	e0bff517 	ldw	r2,-44(fp)
   1b0fc:	e0bffb15 	stw	r2,-20(fp)
   1b100:	e0bffb17 	ldw	r2,-20(fp)
   1b104:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   1b108:	e0bfff17 	ldw	r2,-4(fp)
   1b10c:	00c01044 	movi	r3,65
   1b110:	10c00005 	stb	r3,0(r2)
        return;
   1b114:	00000b06 	br	1b144 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   1b118:	e0bff617 	ldw	r2,-40(fp)
   1b11c:	10801304 	addi	r2,r2,76
   1b120:	1009883a 	mov	r4,r2
   1b124:	e17ffe17 	ldw	r5,-8(fp)
   1b128:	00150680 	call	15068 <OS_StrCopy>
   1b12c:	e0bff517 	ldw	r2,-44(fp)
   1b130:	e0bffc15 	stw	r2,-16(fp)
   1b134:	e0bffc17 	ldw	r2,-16(fp)
   1b138:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1b13c:	e0bfff17 	ldw	r2,-4(fp)
   1b140:	10000005 	stb	zero,0(r2)
}
   1b144:	e037883a 	mov	sp,fp
   1b148:	dfc00117 	ldw	ra,4(sp)
   1b14c:	df000017 	ldw	fp,0(sp)
   1b150:	dec00204 	addi	sp,sp,8
   1b154:	f800283a 	ret

0001b158 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   1b158:	defff404 	addi	sp,sp,-48
   1b15c:	dfc00b15 	stw	ra,44(sp)
   1b160:	df000a15 	stw	fp,40(sp)
   1b164:	df000a04 	addi	fp,sp,40
   1b168:	2005883a 	mov	r2,r4
   1b16c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1b170:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   1b174:	e0bfff03 	ldbu	r2,-4(fp)
   1b178:	10800530 	cmpltui	r2,r2,20
   1b17c:	1000021e 	bne	r2,zero,1b188 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1b180:	00800a84 	movi	r2,42
   1b184:	00006d06 	br	1b33c <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b188:	0005303a 	rdctl	r2,status
   1b18c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b190:	e0fff817 	ldw	r3,-32(fp)
   1b194:	00bfff84 	movi	r2,-2
   1b198:	1884703a 	and	r2,r3,r2
   1b19c:	1001703a 	wrctl	status,r2
  
  return context;
   1b1a0:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1b1a4:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1b1a8:	e0ffff03 	ldbu	r3,-4(fp)
   1b1ac:	00800134 	movhi	r2,4
   1b1b0:	109e6f04 	addi	r2,r2,31164
   1b1b4:	18c7883a 	add	r3,r3,r3
   1b1b8:	18c7883a 	add	r3,r3,r3
   1b1bc:	10c5883a 	add	r2,r2,r3
   1b1c0:	10800017 	ldw	r2,0(r2)
   1b1c4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   1b1c8:	e0bff717 	ldw	r2,-36(fp)
   1b1cc:	1000061e 	bne	r2,zero,1b1e8 <OSTaskResume+0x90>
   1b1d0:	e0bff617 	ldw	r2,-40(fp)
   1b1d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b1d8:	e0bff917 	ldw	r2,-28(fp)
   1b1dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   1b1e0:	00801184 	movi	r2,70
   1b1e4:	00005506 	br	1b33c <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   1b1e8:	e0bff717 	ldw	r2,-36(fp)
   1b1ec:	10800058 	cmpnei	r2,r2,1
   1b1f0:	1000061e 	bne	r2,zero,1b20c <OSTaskResume+0xb4>
   1b1f4:	e0bff617 	ldw	r2,-40(fp)
   1b1f8:	e0bffa15 	stw	r2,-24(fp)
   1b1fc:	e0bffa17 	ldw	r2,-24(fp)
   1b200:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1b204:	008010c4 	movi	r2,67
   1b208:	00004c06 	br	1b33c <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   1b20c:	e0bff717 	ldw	r2,-36(fp)
   1b210:	10800c03 	ldbu	r2,48(r2)
   1b214:	10803fcc 	andi	r2,r2,255
   1b218:	1080020c 	andi	r2,r2,8
   1b21c:	10004226 	beq	r2,zero,1b328 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   1b220:	e0bff717 	ldw	r2,-36(fp)
   1b224:	10c00c03 	ldbu	r3,48(r2)
   1b228:	00bffdc4 	movi	r2,-9
   1b22c:	1884703a 	and	r2,r3,r2
   1b230:	1007883a 	mov	r3,r2
   1b234:	e0bff717 	ldw	r2,-36(fp)
   1b238:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   1b23c:	e0bff717 	ldw	r2,-36(fp)
   1b240:	10800c03 	ldbu	r2,48(r2)
   1b244:	10803fcc 	andi	r2,r2,255
   1b248:	1000311e 	bne	r2,zero,1b310 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   1b24c:	e0bff717 	ldw	r2,-36(fp)
   1b250:	10800b8b 	ldhu	r2,46(r2)
   1b254:	10bfffcc 	andi	r2,r2,65535
   1b258:	1000281e 	bne	r2,zero,1b2fc <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   1b25c:	e0bff717 	ldw	r2,-36(fp)
   1b260:	10c00d83 	ldbu	r3,54(r2)
   1b264:	008000b4 	movhi	r2,2
   1b268:	1091cb04 	addi	r2,r2,18220
   1b26c:	10800003 	ldbu	r2,0(r2)
   1b270:	1884b03a 	or	r2,r3,r2
   1b274:	1007883a 	mov	r3,r2
   1b278:	008000b4 	movhi	r2,2
   1b27c:	1091cb04 	addi	r2,r2,18220
   1b280:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1b284:	e0bff717 	ldw	r2,-36(fp)
   1b288:	10800d03 	ldbu	r2,52(r2)
   1b28c:	10c03fcc 	andi	r3,r2,255
   1b290:	e0bff717 	ldw	r2,-36(fp)
   1b294:	10800d03 	ldbu	r2,52(r2)
   1b298:	11003fcc 	andi	r4,r2,255
   1b29c:	008000b4 	movhi	r2,2
   1b2a0:	1091cb44 	addi	r2,r2,18221
   1b2a4:	1105883a 	add	r2,r2,r4
   1b2a8:	11000003 	ldbu	r4,0(r2)
   1b2ac:	e0bff717 	ldw	r2,-36(fp)
   1b2b0:	10800d43 	ldbu	r2,53(r2)
   1b2b4:	2084b03a 	or	r2,r4,r2
   1b2b8:	1009883a 	mov	r4,r2
   1b2bc:	008000b4 	movhi	r2,2
   1b2c0:	1091cb44 	addi	r2,r2,18221
   1b2c4:	10c5883a 	add	r2,r2,r3
   1b2c8:	11000005 	stb	r4,0(r2)
   1b2cc:	e0bff617 	ldw	r2,-40(fp)
   1b2d0:	e0bffb15 	stw	r2,-20(fp)
   1b2d4:	e0bffb17 	ldw	r2,-20(fp)
   1b2d8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   1b2dc:	008000b4 	movhi	r2,2
   1b2e0:	1091bf44 	addi	r2,r2,18173
   1b2e4:	10800003 	ldbu	r2,0(r2)
   1b2e8:	10803fcc 	andi	r2,r2,255
   1b2ec:	10800058 	cmpnei	r2,r2,1
   1b2f0:	10000b1e 	bne	r2,zero,1b320 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   1b2f4:	0014f2c0 	call	14f2c <OS_Sched>
   1b2f8:	00000906 	br	1b320 <OSTaskResume+0x1c8>
   1b2fc:	e0bff617 	ldw	r2,-40(fp)
   1b300:	e0bffc15 	stw	r2,-16(fp)
   1b304:	e0bffc17 	ldw	r2,-16(fp)
   1b308:	1001703a 	wrctl	status,r2
   1b30c:	00000406 	br	1b320 <OSTaskResume+0x1c8>
   1b310:	e0bff617 	ldw	r2,-40(fp)
   1b314:	e0bffd15 	stw	r2,-12(fp)
   1b318:	e0bffd17 	ldw	r2,-12(fp)
   1b31c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   1b320:	0005883a 	mov	r2,zero
   1b324:	00000506 	br	1b33c <OSTaskResume+0x1e4>
   1b328:	e0bff617 	ldw	r2,-40(fp)
   1b32c:	e0bffe15 	stw	r2,-8(fp)
   1b330:	e0bffe17 	ldw	r2,-8(fp)
   1b334:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   1b338:	00801104 	movi	r2,68
}
   1b33c:	e037883a 	mov	sp,fp
   1b340:	dfc00117 	ldw	ra,4(sp)
   1b344:	df000017 	ldw	fp,0(sp)
   1b348:	dec00204 	addi	sp,sp,8
   1b34c:	f800283a 	ret

0001b350 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   1b350:	defff304 	addi	sp,sp,-52
   1b354:	df000c15 	stw	fp,48(sp)
   1b358:	df000c04 	addi	fp,sp,48
   1b35c:	2005883a 	mov	r2,r4
   1b360:	e17fff15 	stw	r5,-4(fp)
   1b364:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1b368:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1b36c:	e0bffe03 	ldbu	r2,-8(fp)
   1b370:	10800570 	cmpltui	r2,r2,21
   1b374:	1000051e 	bne	r2,zero,1b38c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   1b378:	e0bffe03 	ldbu	r2,-8(fp)
   1b37c:	10803fe0 	cmpeqi	r2,r2,255
   1b380:	1000021e 	bne	r2,zero,1b38c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   1b384:	00800a84 	movi	r2,42
   1b388:	00005f06 	br	1b508 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   1b38c:	e0bfff17 	ldw	r2,-4(fp)
   1b390:	1000021e 	bne	r2,zero,1b39c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   1b394:	00800244 	movi	r2,9
   1b398:	00005b06 	br	1b508 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   1b39c:	e0bfff17 	ldw	r2,-4(fp)
   1b3a0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   1b3a4:	e0bfff17 	ldw	r2,-4(fp)
   1b3a8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b3ac:	0005303a 	rdctl	r2,status
   1b3b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b3b4:	e0fff917 	ldw	r3,-28(fp)
   1b3b8:	00bfff84 	movi	r2,-2
   1b3bc:	1884703a 	and	r2,r3,r2
   1b3c0:	1001703a 	wrctl	status,r2
  
  return context;
   1b3c4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1b3c8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   1b3cc:	e0bffe03 	ldbu	r2,-8(fp)
   1b3d0:	10803fd8 	cmpnei	r2,r2,255
   1b3d4:	1000051e 	bne	r2,zero,1b3ec <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1b3d8:	008000b4 	movhi	r2,2
   1b3dc:	1091ce04 	addi	r2,r2,18232
   1b3e0:	10800017 	ldw	r2,0(r2)
   1b3e4:	10800c83 	ldbu	r2,50(r2)
   1b3e8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1b3ec:	e0fffe03 	ldbu	r3,-8(fp)
   1b3f0:	00800134 	movhi	r2,4
   1b3f4:	109e6f04 	addi	r2,r2,31164
   1b3f8:	18c7883a 	add	r3,r3,r3
   1b3fc:	18c7883a 	add	r3,r3,r3
   1b400:	10c5883a 	add	r2,r2,r3
   1b404:	10800017 	ldw	r2,0(r2)
   1b408:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   1b40c:	e0bff717 	ldw	r2,-36(fp)
   1b410:	1000061e 	bne	r2,zero,1b42c <OSTaskStkChk+0xdc>
   1b414:	e0bff617 	ldw	r2,-40(fp)
   1b418:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b41c:	e0bffa17 	ldw	r2,-24(fp)
   1b420:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1b424:	008010c4 	movi	r2,67
   1b428:	00003706 	br	1b508 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1b42c:	e0bff717 	ldw	r2,-36(fp)
   1b430:	10800058 	cmpnei	r2,r2,1
   1b434:	1000061e 	bne	r2,zero,1b450 <OSTaskStkChk+0x100>
   1b438:	e0bff617 	ldw	r2,-40(fp)
   1b43c:	e0bffb15 	stw	r2,-20(fp)
   1b440:	e0bffb17 	ldw	r2,-20(fp)
   1b444:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1b448:	008010c4 	movi	r2,67
   1b44c:	00002e06 	br	1b508 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   1b450:	e0bff717 	ldw	r2,-36(fp)
   1b454:	1080040b 	ldhu	r2,16(r2)
   1b458:	10bfffcc 	andi	r2,r2,65535
   1b45c:	1080004c 	andi	r2,r2,1
   1b460:	1000061e 	bne	r2,zero,1b47c <OSTaskStkChk+0x12c>
   1b464:	e0bff617 	ldw	r2,-40(fp)
   1b468:	e0bffc15 	stw	r2,-16(fp)
   1b46c:	e0bffc17 	ldw	r2,-16(fp)
   1b470:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1b474:	00801144 	movi	r2,69
   1b478:	00002306 	br	1b508 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   1b47c:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   1b480:	e0bff717 	ldw	r2,-36(fp)
   1b484:	10800317 	ldw	r2,12(r2)
   1b488:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   1b48c:	e0bff717 	ldw	r2,-36(fp)
   1b490:	10800217 	ldw	r2,8(r2)
   1b494:	e0bff415 	stw	r2,-48(fp)
   1b498:	e0bff617 	ldw	r2,-40(fp)
   1b49c:	e0bffd15 	stw	r2,-12(fp)
   1b4a0:	e0bffd17 	ldw	r2,-12(fp)
   1b4a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1b4a8:	00000306 	br	1b4b8 <OSTaskStkChk+0x168>
        nfree++;
   1b4ac:	e0bff517 	ldw	r2,-44(fp)
   1b4b0:	10800044 	addi	r2,r2,1
   1b4b4:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1b4b8:	e0bff417 	ldw	r2,-48(fp)
   1b4bc:	10c00104 	addi	r3,r2,4
   1b4c0:	e0fff415 	stw	r3,-48(fp)
   1b4c4:	10800017 	ldw	r2,0(r2)
   1b4c8:	103ff826 	beq	r2,zero,1b4ac <__alt_mem_Flash_flash_data+0xf401b4ac>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   1b4cc:	e0bff517 	ldw	r2,-44(fp)
   1b4d0:	1085883a 	add	r2,r2,r2
   1b4d4:	1085883a 	add	r2,r2,r2
   1b4d8:	1007883a 	mov	r3,r2
   1b4dc:	e0bfff17 	ldw	r2,-4(fp)
   1b4e0:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   1b4e4:	e0fff817 	ldw	r3,-32(fp)
   1b4e8:	e0bff517 	ldw	r2,-44(fp)
   1b4ec:	1885c83a 	sub	r2,r3,r2
   1b4f0:	1085883a 	add	r2,r2,r2
   1b4f4:	1085883a 	add	r2,r2,r2
   1b4f8:	1007883a 	mov	r3,r2
   1b4fc:	e0bfff17 	ldw	r2,-4(fp)
   1b500:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   1b504:	0005883a 	mov	r2,zero
}
   1b508:	e037883a 	mov	sp,fp
   1b50c:	df000017 	ldw	fp,0(sp)
   1b510:	dec00104 	addi	sp,sp,4
   1b514:	f800283a 	ret

0001b518 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   1b518:	defff504 	addi	sp,sp,-44
   1b51c:	dfc00a15 	stw	ra,40(sp)
   1b520:	df000915 	stw	fp,36(sp)
   1b524:	df000904 	addi	fp,sp,36
   1b528:	2005883a 	mov	r2,r4
   1b52c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b530:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   1b534:	e0bfff03 	ldbu	r2,-4(fp)
   1b538:	10800518 	cmpnei	r2,r2,20
   1b53c:	1000021e 	bne	r2,zero,1b548 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   1b540:	008011c4 	movi	r2,71
   1b544:	00007406 	br	1b718 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1b548:	e0bfff03 	ldbu	r2,-4(fp)
   1b54c:	10800530 	cmpltui	r2,r2,20
   1b550:	1000051e 	bne	r2,zero,1b568 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1b554:	e0bfff03 	ldbu	r2,-4(fp)
   1b558:	10803fe0 	cmpeqi	r2,r2,255
   1b55c:	1000021e 	bne	r2,zero,1b568 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   1b560:	00800a84 	movi	r2,42
   1b564:	00006c06 	br	1b718 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b568:	0005303a 	rdctl	r2,status
   1b56c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b570:	e0fffb17 	ldw	r3,-20(fp)
   1b574:	00bfff84 	movi	r2,-2
   1b578:	1884703a 	and	r2,r3,r2
   1b57c:	1001703a 	wrctl	status,r2
  
  return context;
   1b580:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1b584:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   1b588:	e0bfff03 	ldbu	r2,-4(fp)
   1b58c:	10803fd8 	cmpnei	r2,r2,255
   1b590:	1000081e 	bne	r2,zero,1b5b4 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1b594:	008000b4 	movhi	r2,2
   1b598:	1091ce04 	addi	r2,r2,18232
   1b59c:	10800017 	ldw	r2,0(r2)
   1b5a0:	10800c83 	ldbu	r2,50(r2)
   1b5a4:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   1b5a8:	00800044 	movi	r2,1
   1b5ac:	e0bff705 	stb	r2,-36(fp)
   1b5b0:	00000b06 	br	1b5e0 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1b5b4:	008000b4 	movhi	r2,2
   1b5b8:	1091ce04 	addi	r2,r2,18232
   1b5bc:	10800017 	ldw	r2,0(r2)
   1b5c0:	10800c83 	ldbu	r2,50(r2)
   1b5c4:	10c03fcc 	andi	r3,r2,255
   1b5c8:	e0bfff03 	ldbu	r2,-4(fp)
   1b5cc:	1880031e 	bne	r3,r2,1b5dc <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   1b5d0:	00800044 	movi	r2,1
   1b5d4:	e0bff705 	stb	r2,-36(fp)
   1b5d8:	00000106 	br	1b5e0 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   1b5dc:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1b5e0:	e0ffff03 	ldbu	r3,-4(fp)
   1b5e4:	00800134 	movhi	r2,4
   1b5e8:	109e6f04 	addi	r2,r2,31164
   1b5ec:	18c7883a 	add	r3,r3,r3
   1b5f0:	18c7883a 	add	r3,r3,r3
   1b5f4:	10c5883a 	add	r2,r2,r3
   1b5f8:	10800017 	ldw	r2,0(r2)
   1b5fc:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   1b600:	e0bff917 	ldw	r2,-28(fp)
   1b604:	1000061e 	bne	r2,zero,1b620 <OSTaskSuspend+0x108>
   1b608:	e0bff817 	ldw	r2,-32(fp)
   1b60c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b610:	e0bffc17 	ldw	r2,-16(fp)
   1b614:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   1b618:	00801204 	movi	r2,72
   1b61c:	00003e06 	br	1b718 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   1b620:	e0bff917 	ldw	r2,-28(fp)
   1b624:	10800058 	cmpnei	r2,r2,1
   1b628:	1000061e 	bne	r2,zero,1b644 <OSTaskSuspend+0x12c>
   1b62c:	e0bff817 	ldw	r2,-32(fp)
   1b630:	e0bffd15 	stw	r2,-12(fp)
   1b634:	e0bffd17 	ldw	r2,-12(fp)
   1b638:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1b63c:	008010c4 	movi	r2,67
   1b640:	00003506 	br	1b718 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   1b644:	e0bff917 	ldw	r2,-28(fp)
   1b648:	10800d03 	ldbu	r2,52(r2)
   1b64c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   1b650:	e0fffa03 	ldbu	r3,-24(fp)
   1b654:	e13ffa03 	ldbu	r4,-24(fp)
   1b658:	008000b4 	movhi	r2,2
   1b65c:	1091cb44 	addi	r2,r2,18221
   1b660:	1105883a 	add	r2,r2,r4
   1b664:	10800003 	ldbu	r2,0(r2)
   1b668:	1009883a 	mov	r4,r2
   1b66c:	e0bff917 	ldw	r2,-28(fp)
   1b670:	10800d43 	ldbu	r2,53(r2)
   1b674:	0084303a 	nor	r2,zero,r2
   1b678:	2084703a 	and	r2,r4,r2
   1b67c:	1009883a 	mov	r4,r2
   1b680:	008000b4 	movhi	r2,2
   1b684:	1091cb44 	addi	r2,r2,18221
   1b688:	10c5883a 	add	r2,r2,r3
   1b68c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1b690:	e0fffa03 	ldbu	r3,-24(fp)
   1b694:	008000b4 	movhi	r2,2
   1b698:	1091cb44 	addi	r2,r2,18221
   1b69c:	10c5883a 	add	r2,r2,r3
   1b6a0:	10800003 	ldbu	r2,0(r2)
   1b6a4:	10803fcc 	andi	r2,r2,255
   1b6a8:	10000c1e 	bne	r2,zero,1b6dc <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   1b6ac:	e0bff917 	ldw	r2,-28(fp)
   1b6b0:	10800d83 	ldbu	r2,54(r2)
   1b6b4:	0084303a 	nor	r2,zero,r2
   1b6b8:	1007883a 	mov	r3,r2
   1b6bc:	008000b4 	movhi	r2,2
   1b6c0:	1091cb04 	addi	r2,r2,18220
   1b6c4:	10800003 	ldbu	r2,0(r2)
   1b6c8:	1884703a 	and	r2,r3,r2
   1b6cc:	1007883a 	mov	r3,r2
   1b6d0:	008000b4 	movhi	r2,2
   1b6d4:	1091cb04 	addi	r2,r2,18220
   1b6d8:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   1b6dc:	e0bff917 	ldw	r2,-28(fp)
   1b6e0:	10800c03 	ldbu	r2,48(r2)
   1b6e4:	10800214 	ori	r2,r2,8
   1b6e8:	1007883a 	mov	r3,r2
   1b6ec:	e0bff917 	ldw	r2,-28(fp)
   1b6f0:	10c00c05 	stb	r3,48(r2)
   1b6f4:	e0bff817 	ldw	r2,-32(fp)
   1b6f8:	e0bffe15 	stw	r2,-8(fp)
   1b6fc:	e0bffe17 	ldw	r2,-8(fp)
   1b700:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1b704:	e0bff703 	ldbu	r2,-36(fp)
   1b708:	10800058 	cmpnei	r2,r2,1
   1b70c:	1000011e 	bne	r2,zero,1b714 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   1b710:	0014f2c0 	call	14f2c <OS_Sched>
    }
    return (OS_ERR_NONE);
   1b714:	0005883a 	mov	r2,zero
}
   1b718:	e037883a 	mov	sp,fp
   1b71c:	dfc00117 	ldw	ra,4(sp)
   1b720:	df000017 	ldw	fp,0(sp)
   1b724:	dec00204 	addi	sp,sp,8
   1b728:	f800283a 	ret

0001b72c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   1b72c:	defff604 	addi	sp,sp,-40
   1b730:	dfc00915 	stw	ra,36(sp)
   1b734:	df000815 	stw	fp,32(sp)
   1b738:	df000804 	addi	fp,sp,32
   1b73c:	2005883a 	mov	r2,r4
   1b740:	e17fff15 	stw	r5,-4(fp)
   1b744:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b748:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   1b74c:	e0bffe03 	ldbu	r2,-8(fp)
   1b750:	10800570 	cmpltui	r2,r2,21
   1b754:	1000051e 	bne	r2,zero,1b76c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   1b758:	e0bffe03 	ldbu	r2,-8(fp)
   1b75c:	10803fe0 	cmpeqi	r2,r2,255
   1b760:	1000021e 	bne	r2,zero,1b76c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1b764:	00800a84 	movi	r2,42
   1b768:	00003606 	br	1b844 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1b76c:	e0bfff17 	ldw	r2,-4(fp)
   1b770:	1000021e 	bne	r2,zero,1b77c <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1b774:	00800244 	movi	r2,9
   1b778:	00003206 	br	1b844 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b77c:	0005303a 	rdctl	r2,status
   1b780:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b784:	e0fffa17 	ldw	r3,-24(fp)
   1b788:	00bfff84 	movi	r2,-2
   1b78c:	1884703a 	and	r2,r3,r2
   1b790:	1001703a 	wrctl	status,r2
  
  return context;
   1b794:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1b798:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   1b79c:	e0bffe03 	ldbu	r2,-8(fp)
   1b7a0:	10803fd8 	cmpnei	r2,r2,255
   1b7a4:	1000051e 	bne	r2,zero,1b7bc <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   1b7a8:	008000b4 	movhi	r2,2
   1b7ac:	1091ce04 	addi	r2,r2,18232
   1b7b0:	10800017 	ldw	r2,0(r2)
   1b7b4:	10800c83 	ldbu	r2,50(r2)
   1b7b8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1b7bc:	e0fffe03 	ldbu	r3,-8(fp)
   1b7c0:	00800134 	movhi	r2,4
   1b7c4:	109e6f04 	addi	r2,r2,31164
   1b7c8:	18c7883a 	add	r3,r3,r3
   1b7cc:	18c7883a 	add	r3,r3,r3
   1b7d0:	10c5883a 	add	r2,r2,r3
   1b7d4:	10800017 	ldw	r2,0(r2)
   1b7d8:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1b7dc:	e0bff917 	ldw	r2,-28(fp)
   1b7e0:	1000061e 	bne	r2,zero,1b7fc <OSTaskQuery+0xd0>
   1b7e4:	e0bff817 	ldw	r2,-32(fp)
   1b7e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b7ec:	e0bffb17 	ldw	r2,-20(fp)
   1b7f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1b7f4:	00800a44 	movi	r2,41
   1b7f8:	00001206 	br	1b844 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1b7fc:	e0bff917 	ldw	r2,-28(fp)
   1b800:	10800058 	cmpnei	r2,r2,1
   1b804:	1000061e 	bne	r2,zero,1b820 <OSTaskQuery+0xf4>
   1b808:	e0bff817 	ldw	r2,-32(fp)
   1b80c:	e0bffc15 	stw	r2,-16(fp)
   1b810:	e0bffc17 	ldw	r2,-16(fp)
   1b814:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1b818:	008010c4 	movi	r2,67
   1b81c:	00000906 	br	1b844 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   1b820:	e13fff17 	ldw	r4,-4(fp)
   1b824:	e17ff917 	ldw	r5,-28(fp)
   1b828:	01801b04 	movi	r6,108
   1b82c:	0014ec80 	call	14ec8 <OS_MemCopy>
   1b830:	e0bff817 	ldw	r2,-32(fp)
   1b834:	e0bffd15 	stw	r2,-12(fp)
   1b838:	e0bffd17 	ldw	r2,-12(fp)
   1b83c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1b840:	0005883a 	mov	r2,zero
}
   1b844:	e037883a 	mov	sp,fp
   1b848:	dfc00117 	ldw	ra,4(sp)
   1b84c:	df000017 	ldw	fp,0(sp)
   1b850:	dec00204 	addi	sp,sp,8
   1b854:	f800283a 	ret

0001b858 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1b858:	defffc04 	addi	sp,sp,-16
   1b85c:	df000315 	stw	fp,12(sp)
   1b860:	df000304 	addi	fp,sp,12
   1b864:	e13ffd15 	stw	r4,-12(fp)
   1b868:	e17ffe15 	stw	r5,-8(fp)
   1b86c:	3005883a 	mov	r2,r6
   1b870:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1b874:	e0bfff0b 	ldhu	r2,-4(fp)
   1b878:	1080004c 	andi	r2,r2,1
   1b87c:	10000d26 	beq	r2,zero,1b8b4 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   1b880:	e0bfff0b 	ldhu	r2,-4(fp)
   1b884:	1080008c 	andi	r2,r2,2
   1b888:	10000a26 	beq	r2,zero,1b8b4 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1b88c:	00000706 	br	1b8ac <OS_TaskStkClr+0x54>
                size--;
   1b890:	e0bffe17 	ldw	r2,-8(fp)
   1b894:	10bfffc4 	addi	r2,r2,-1
   1b898:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1b89c:	e0bffd17 	ldw	r2,-12(fp)
   1b8a0:	10c00104 	addi	r3,r2,4
   1b8a4:	e0fffd15 	stw	r3,-12(fp)
   1b8a8:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1b8ac:	e0bffe17 	ldw	r2,-8(fp)
   1b8b0:	103ff71e 	bne	r2,zero,1b890 <__alt_mem_Flash_flash_data+0xf401b890>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1b8b4:	e037883a 	mov	sp,fp
   1b8b8:	df000017 	ldw	fp,0(sp)
   1b8bc:	dec00104 	addi	sp,sp,4
   1b8c0:	f800283a 	ret

0001b8c4 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1b8c4:	defff904 	addi	sp,sp,-28
   1b8c8:	dfc00615 	stw	ra,24(sp)
   1b8cc:	df000515 	stw	fp,20(sp)
   1b8d0:	df000504 	addi	fp,sp,20
   1b8d4:	2005883a 	mov	r2,r4
   1b8d8:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b8dc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1b8e0:	008000b4 	movhi	r2,2
   1b8e4:	1091cd04 	addi	r2,r2,18228
   1b8e8:	10800003 	ldbu	r2,0(r2)
   1b8ec:	10803fcc 	andi	r2,r2,255
   1b8f0:	10000126 	beq	r2,zero,1b8f8 <OSTimeDly+0x34>
        return;
   1b8f4:	00004006 	br	1b9f8 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   1b8f8:	e0bfff0b 	ldhu	r2,-4(fp)
   1b8fc:	10003e26 	beq	r2,zero,1b9f8 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b900:	0005303a 	rdctl	r2,status
   1b904:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b908:	e0fffd17 	ldw	r3,-12(fp)
   1b90c:	00bfff84 	movi	r2,-2
   1b910:	1884703a 	and	r2,r3,r2
   1b914:	1001703a 	wrctl	status,r2
  
  return context;
   1b918:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   1b91c:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   1b920:	008000b4 	movhi	r2,2
   1b924:	1091ce04 	addi	r2,r2,18232
   1b928:	10800017 	ldw	r2,0(r2)
   1b92c:	10800d03 	ldbu	r2,52(r2)
   1b930:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1b934:	e0fffc03 	ldbu	r3,-16(fp)
   1b938:	e13ffc03 	ldbu	r4,-16(fp)
   1b93c:	008000b4 	movhi	r2,2
   1b940:	1091cb44 	addi	r2,r2,18221
   1b944:	1105883a 	add	r2,r2,r4
   1b948:	10800003 	ldbu	r2,0(r2)
   1b94c:	1009883a 	mov	r4,r2
   1b950:	008000b4 	movhi	r2,2
   1b954:	1091ce04 	addi	r2,r2,18232
   1b958:	10800017 	ldw	r2,0(r2)
   1b95c:	10800d43 	ldbu	r2,53(r2)
   1b960:	0084303a 	nor	r2,zero,r2
   1b964:	2084703a 	and	r2,r4,r2
   1b968:	1009883a 	mov	r4,r2
   1b96c:	008000b4 	movhi	r2,2
   1b970:	1091cb44 	addi	r2,r2,18221
   1b974:	10c5883a 	add	r2,r2,r3
   1b978:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1b97c:	e0fffc03 	ldbu	r3,-16(fp)
   1b980:	008000b4 	movhi	r2,2
   1b984:	1091cb44 	addi	r2,r2,18221
   1b988:	10c5883a 	add	r2,r2,r3
   1b98c:	10800003 	ldbu	r2,0(r2)
   1b990:	10803fcc 	andi	r2,r2,255
   1b994:	10000e1e 	bne	r2,zero,1b9d0 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1b998:	008000b4 	movhi	r2,2
   1b99c:	1091ce04 	addi	r2,r2,18232
   1b9a0:	10800017 	ldw	r2,0(r2)
   1b9a4:	10800d83 	ldbu	r2,54(r2)
   1b9a8:	0084303a 	nor	r2,zero,r2
   1b9ac:	1007883a 	mov	r3,r2
   1b9b0:	008000b4 	movhi	r2,2
   1b9b4:	1091cb04 	addi	r2,r2,18220
   1b9b8:	10800003 	ldbu	r2,0(r2)
   1b9bc:	1884703a 	and	r2,r3,r2
   1b9c0:	1007883a 	mov	r3,r2
   1b9c4:	008000b4 	movhi	r2,2
   1b9c8:	1091cb04 	addi	r2,r2,18220
   1b9cc:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   1b9d0:	008000b4 	movhi	r2,2
   1b9d4:	1091ce04 	addi	r2,r2,18232
   1b9d8:	10800017 	ldw	r2,0(r2)
   1b9dc:	e0ffff0b 	ldhu	r3,-4(fp)
   1b9e0:	10c00b8d 	sth	r3,46(r2)
   1b9e4:	e0bffb17 	ldw	r2,-20(fp)
   1b9e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b9ec:	e0bffe17 	ldw	r2,-8(fp)
   1b9f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1b9f4:	0014f2c0 	call	14f2c <OS_Sched>
    }
}
   1b9f8:	e037883a 	mov	sp,fp
   1b9fc:	dfc00117 	ldw	ra,4(sp)
   1ba00:	df000017 	ldw	fp,0(sp)
   1ba04:	dec00204 	addi	sp,sp,8
   1ba08:	f800283a 	ret

0001ba0c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1ba0c:	defff804 	addi	sp,sp,-32
   1ba10:	dfc00715 	stw	ra,28(sp)
   1ba14:	df000615 	stw	fp,24(sp)
   1ba18:	df000604 	addi	fp,sp,24
   1ba1c:	2015883a 	mov	r10,r4
   1ba20:	2809883a 	mov	r4,r5
   1ba24:	3007883a 	mov	r3,r6
   1ba28:	3805883a 	mov	r2,r7
   1ba2c:	e2bffc05 	stb	r10,-16(fp)
   1ba30:	e13ffd05 	stb	r4,-12(fp)
   1ba34:	e0fffe05 	stb	r3,-8(fp)
   1ba38:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1ba3c:	008000b4 	movhi	r2,2
   1ba40:	1091cd04 	addi	r2,r2,18228
   1ba44:	10800003 	ldbu	r2,0(r2)
   1ba48:	10803fcc 	andi	r2,r2,255
   1ba4c:	10000226 	beq	r2,zero,1ba58 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   1ba50:	00801544 	movi	r2,85
   1ba54:	00004206 	br	1bb60 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1ba58:	e0bffc03 	ldbu	r2,-16(fp)
   1ba5c:	1000081e 	bne	r2,zero,1ba80 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   1ba60:	e0bffd03 	ldbu	r2,-12(fp)
   1ba64:	1000061e 	bne	r2,zero,1ba80 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   1ba68:	e0bffe03 	ldbu	r2,-8(fp)
   1ba6c:	1000041e 	bne	r2,zero,1ba80 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   1ba70:	e0bfff0b 	ldhu	r2,-4(fp)
   1ba74:	1000021e 	bne	r2,zero,1ba80 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   1ba78:	00801504 	movi	r2,84
   1ba7c:	00003806 	br	1bb60 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   1ba80:	e0bffd03 	ldbu	r2,-12(fp)
   1ba84:	10800f30 	cmpltui	r2,r2,60
   1ba88:	1000021e 	bne	r2,zero,1ba94 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   1ba8c:	00801444 	movi	r2,81
   1ba90:	00003306 	br	1bb60 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   1ba94:	e0bffe03 	ldbu	r2,-8(fp)
   1ba98:	10800f30 	cmpltui	r2,r2,60
   1ba9c:	1000021e 	bne	r2,zero,1baa8 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1baa0:	00801484 	movi	r2,82
   1baa4:	00002e06 	br	1bb60 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   1baa8:	e0bfff0b 	ldhu	r2,-4(fp)
   1baac:	1080fa30 	cmpltui	r2,r2,1000
   1bab0:	1000021e 	bne	r2,zero,1babc <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   1bab4:	008014c4 	movi	r2,83
   1bab8:	00002906 	br	1bb60 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1babc:	e0bffc03 	ldbu	r2,-16(fp)
   1bac0:	10c38424 	muli	r3,r2,3600
   1bac4:	e0bffd03 	ldbu	r2,-12(fp)
   1bac8:	10800f24 	muli	r2,r2,60
   1bacc:	1887883a 	add	r3,r3,r2
   1bad0:	e0bffe03 	ldbu	r2,-8(fp)
   1bad4:	1885883a 	add	r2,r3,r2
   1bad8:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   1badc:	e0bfff0b 	ldhu	r2,-4(fp)
   1bae0:	10800f84 	addi	r2,r2,62
   1bae4:	100690fa 	slli	r3,r2,3
   1bae8:	008418b4 	movhi	r2,4194
   1baec:	109374c4 	addi	r2,r2,19923
   1baf0:	188a383a 	mulxuu	r5,r3,r2
   1baf4:	1885383a 	mul	r2,r3,r2
   1baf8:	1011883a 	mov	r8,r2
   1bafc:	2813883a 	mov	r9,r5
   1bb00:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1bb04:	2085883a 	add	r2,r4,r2
   1bb08:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   1bb0c:	e0bffb17 	ldw	r2,-20(fp)
   1bb10:	1004d43a 	srli	r2,r2,16
   1bb14:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   1bb18:	e0bffb17 	ldw	r2,-20(fp)
   1bb1c:	10bfffcc 	andi	r2,r2,65535
   1bb20:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   1bb24:	e0bffb17 	ldw	r2,-20(fp)
   1bb28:	10bfffcc 	andi	r2,r2,65535
   1bb2c:	1009883a 	mov	r4,r2
   1bb30:	001b8c40 	call	1b8c4 <OSTimeDly>
    while (loops > 0) {
   1bb34:	00000706 	br	1bb54 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   1bb38:	01200014 	movui	r4,32768
   1bb3c:	001b8c40 	call	1b8c4 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   1bb40:	01200014 	movui	r4,32768
   1bb44:	001b8c40 	call	1b8c4 <OSTimeDly>
        loops--;
   1bb48:	e0bffa0b 	ldhu	r2,-24(fp)
   1bb4c:	10bfffc4 	addi	r2,r2,-1
   1bb50:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1bb54:	e0bffa0b 	ldhu	r2,-24(fp)
   1bb58:	103ff71e 	bne	r2,zero,1bb38 <__alt_mem_Flash_flash_data+0xf401bb38>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1bb5c:	0005883a 	mov	r2,zero
}
   1bb60:	e037883a 	mov	sp,fp
   1bb64:	dfc00117 	ldw	ra,4(sp)
   1bb68:	df000017 	ldw	fp,0(sp)
   1bb6c:	dec00204 	addi	sp,sp,8
   1bb70:	f800283a 	ret

0001bb74 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1bb74:	defff504 	addi	sp,sp,-44
   1bb78:	dfc00a15 	stw	ra,40(sp)
   1bb7c:	df000915 	stw	fp,36(sp)
   1bb80:	df000904 	addi	fp,sp,36
   1bb84:	2005883a 	mov	r2,r4
   1bb88:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1bb8c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   1bb90:	e0bfff03 	ldbu	r2,-4(fp)
   1bb94:	10800530 	cmpltui	r2,r2,20
   1bb98:	1000021e 	bne	r2,zero,1bba4 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1bb9c:	00800a84 	movi	r2,42
   1bba0:	00006b06 	br	1bd50 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bba4:	0005303a 	rdctl	r2,status
   1bba8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bbac:	e0fff917 	ldw	r3,-28(fp)
   1bbb0:	00bfff84 	movi	r2,-2
   1bbb4:	1884703a 	and	r2,r3,r2
   1bbb8:	1001703a 	wrctl	status,r2
  
  return context;
   1bbbc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1bbc0:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1bbc4:	e0ffff03 	ldbu	r3,-4(fp)
   1bbc8:	00800134 	movhi	r2,4
   1bbcc:	109e6f04 	addi	r2,r2,31164
   1bbd0:	18c7883a 	add	r3,r3,r3
   1bbd4:	18c7883a 	add	r3,r3,r3
   1bbd8:	10c5883a 	add	r2,r2,r3
   1bbdc:	10800017 	ldw	r2,0(r2)
   1bbe0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   1bbe4:	e0bff817 	ldw	r2,-32(fp)
   1bbe8:	1000061e 	bne	r2,zero,1bc04 <OSTimeDlyResume+0x90>
   1bbec:	e0bff717 	ldw	r2,-36(fp)
   1bbf0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bbf4:	e0bffa17 	ldw	r2,-24(fp)
   1bbf8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1bbfc:	008010c4 	movi	r2,67
   1bc00:	00005306 	br	1bd50 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1bc04:	e0bff817 	ldw	r2,-32(fp)
   1bc08:	10800058 	cmpnei	r2,r2,1
   1bc0c:	1000061e 	bne	r2,zero,1bc28 <OSTimeDlyResume+0xb4>
   1bc10:	e0bff717 	ldw	r2,-36(fp)
   1bc14:	e0bffb15 	stw	r2,-20(fp)
   1bc18:	e0bffb17 	ldw	r2,-20(fp)
   1bc1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1bc20:	008010c4 	movi	r2,67
   1bc24:	00004a06 	br	1bd50 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1bc28:	e0bff817 	ldw	r2,-32(fp)
   1bc2c:	10800b8b 	ldhu	r2,46(r2)
   1bc30:	10bfffcc 	andi	r2,r2,65535
   1bc34:	1000061e 	bne	r2,zero,1bc50 <OSTimeDlyResume+0xdc>
   1bc38:	e0bff717 	ldw	r2,-36(fp)
   1bc3c:	e0bffc15 	stw	r2,-16(fp)
   1bc40:	e0bffc17 	ldw	r2,-16(fp)
   1bc44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1bc48:	00801404 	movi	r2,80
   1bc4c:	00004006 	br	1bd50 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   1bc50:	e0bff817 	ldw	r2,-32(fp)
   1bc54:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1bc58:	e0bff817 	ldw	r2,-32(fp)
   1bc5c:	10800c03 	ldbu	r2,48(r2)
   1bc60:	10803fcc 	andi	r2,r2,255
   1bc64:	10800dcc 	andi	r2,r2,55
   1bc68:	10000b26 	beq	r2,zero,1bc98 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   1bc6c:	e0bff817 	ldw	r2,-32(fp)
   1bc70:	10c00c03 	ldbu	r3,48(r2)
   1bc74:	00bff204 	movi	r2,-56
   1bc78:	1884703a 	and	r2,r3,r2
   1bc7c:	1007883a 	mov	r3,r2
   1bc80:	e0bff817 	ldw	r2,-32(fp)
   1bc84:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1bc88:	e0bff817 	ldw	r2,-32(fp)
   1bc8c:	00c00044 	movi	r3,1
   1bc90:	10c00c45 	stb	r3,49(r2)
   1bc94:	00000206 	br	1bca0 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1bc98:	e0bff817 	ldw	r2,-32(fp)
   1bc9c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1bca0:	e0bff817 	ldw	r2,-32(fp)
   1bca4:	10800c03 	ldbu	r2,48(r2)
   1bca8:	10803fcc 	andi	r2,r2,255
   1bcac:	1080020c 	andi	r2,r2,8
   1bcb0:	1000221e 	bne	r2,zero,1bd3c <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1bcb4:	e0bff817 	ldw	r2,-32(fp)
   1bcb8:	10c00d83 	ldbu	r3,54(r2)
   1bcbc:	008000b4 	movhi	r2,2
   1bcc0:	1091cb04 	addi	r2,r2,18220
   1bcc4:	10800003 	ldbu	r2,0(r2)
   1bcc8:	1884b03a 	or	r2,r3,r2
   1bccc:	1007883a 	mov	r3,r2
   1bcd0:	008000b4 	movhi	r2,2
   1bcd4:	1091cb04 	addi	r2,r2,18220
   1bcd8:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1bcdc:	e0bff817 	ldw	r2,-32(fp)
   1bce0:	10800d03 	ldbu	r2,52(r2)
   1bce4:	10c03fcc 	andi	r3,r2,255
   1bce8:	e0bff817 	ldw	r2,-32(fp)
   1bcec:	10800d03 	ldbu	r2,52(r2)
   1bcf0:	11003fcc 	andi	r4,r2,255
   1bcf4:	008000b4 	movhi	r2,2
   1bcf8:	1091cb44 	addi	r2,r2,18221
   1bcfc:	1105883a 	add	r2,r2,r4
   1bd00:	11000003 	ldbu	r4,0(r2)
   1bd04:	e0bff817 	ldw	r2,-32(fp)
   1bd08:	10800d43 	ldbu	r2,53(r2)
   1bd0c:	2084b03a 	or	r2,r4,r2
   1bd10:	1009883a 	mov	r4,r2
   1bd14:	008000b4 	movhi	r2,2
   1bd18:	1091cb44 	addi	r2,r2,18221
   1bd1c:	10c5883a 	add	r2,r2,r3
   1bd20:	11000005 	stb	r4,0(r2)
   1bd24:	e0bff717 	ldw	r2,-36(fp)
   1bd28:	e0bffd15 	stw	r2,-12(fp)
   1bd2c:	e0bffd17 	ldw	r2,-12(fp)
   1bd30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   1bd34:	0014f2c0 	call	14f2c <OS_Sched>
   1bd38:	00000406 	br	1bd4c <OSTimeDlyResume+0x1d8>
   1bd3c:	e0bff717 	ldw	r2,-36(fp)
   1bd40:	e0bffe15 	stw	r2,-8(fp)
   1bd44:	e0bffe17 	ldw	r2,-8(fp)
   1bd48:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1bd4c:	0005883a 	mov	r2,zero
}
   1bd50:	e037883a 	mov	sp,fp
   1bd54:	dfc00117 	ldw	ra,4(sp)
   1bd58:	df000017 	ldw	fp,0(sp)
   1bd5c:	dec00204 	addi	sp,sp,8
   1bd60:	f800283a 	ret

0001bd64 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1bd64:	defffb04 	addi	sp,sp,-20
   1bd68:	df000415 	stw	fp,16(sp)
   1bd6c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1bd70:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bd74:	0005303a 	rdctl	r2,status
   1bd78:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bd7c:	e0fffe17 	ldw	r3,-8(fp)
   1bd80:	00bfff84 	movi	r2,-2
   1bd84:	1884703a 	and	r2,r3,r2
   1bd88:	1001703a 	wrctl	status,r2
  
  return context;
   1bd8c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1bd90:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1bd94:	008000b4 	movhi	r2,2
   1bd98:	1091cf04 	addi	r2,r2,18236
   1bd9c:	10800017 	ldw	r2,0(r2)
   1bda0:	e0bffd15 	stw	r2,-12(fp)
   1bda4:	e0bffc17 	ldw	r2,-16(fp)
   1bda8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bdac:	e0bfff17 	ldw	r2,-4(fp)
   1bdb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1bdb4:	e0bffd17 	ldw	r2,-12(fp)
}
   1bdb8:	e037883a 	mov	sp,fp
   1bdbc:	df000017 	ldw	fp,0(sp)
   1bdc0:	dec00104 	addi	sp,sp,4
   1bdc4:	f800283a 	ret

0001bdc8 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   1bdc8:	defffb04 	addi	sp,sp,-20
   1bdcc:	df000415 	stw	fp,16(sp)
   1bdd0:	df000404 	addi	fp,sp,16
   1bdd4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1bdd8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bddc:	0005303a 	rdctl	r2,status
   1bde0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bde4:	e0fffd17 	ldw	r3,-12(fp)
   1bde8:	00bfff84 	movi	r2,-2
   1bdec:	1884703a 	and	r2,r3,r2
   1bdf0:	1001703a 	wrctl	status,r2
  
  return context;
   1bdf4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   1bdf8:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1bdfc:	008000b4 	movhi	r2,2
   1be00:	1091cf04 	addi	r2,r2,18236
   1be04:	e0ffff17 	ldw	r3,-4(fp)
   1be08:	10c00015 	stw	r3,0(r2)
   1be0c:	e0bffc17 	ldw	r2,-16(fp)
   1be10:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1be14:	e0bffe17 	ldw	r2,-8(fp)
   1be18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1be1c:	e037883a 	mov	sp,fp
   1be20:	df000017 	ldw	fp,0(sp)
   1be24:	dec00104 	addi	sp,sp,4
   1be28:	f800283a 	ret

0001be2c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1be2c:	defffd04 	addi	sp,sp,-12
   1be30:	dfc00215 	stw	ra,8(sp)
   1be34:	df000115 	stw	fp,4(sp)
   1be38:	df000104 	addi	fp,sp,4
   1be3c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1be40:	e13fff17 	ldw	r4,-4(fp)
   1be44:	014000b4 	movhi	r5,2
   1be48:	2949a104 	addi	r5,r5,9860
   1be4c:	001e8000 	call	1e800 <alt_dev_llist_insert>
}
   1be50:	e037883a 	mov	sp,fp
   1be54:	dfc00117 	ldw	ra,4(sp)
   1be58:	df000017 	ldw	fp,0(sp)
   1be5c:	dec00204 	addi	sp,sp,8
   1be60:	f800283a 	ret

0001be64 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1be64:	defffd04 	addi	sp,sp,-12
   1be68:	dfc00215 	stw	ra,8(sp)
   1be6c:	df000115 	stw	fp,4(sp)
   1be70:	df000104 	addi	fp,sp,4
   1be74:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1be78:	001f1140 	call	1f114 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1be7c:	00800044 	movi	r2,1
   1be80:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1be84:	e037883a 	mov	sp,fp
   1be88:	dfc00117 	ldw	ra,4(sp)
   1be8c:	df000017 	ldw	fp,0(sp)
   1be90:	dec00204 	addi	sp,sp,8
   1be94:	f800283a 	ret

0001be98 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1be98:	defffd04 	addi	sp,sp,-12
   1be9c:	dfc00215 	stw	ra,8(sp)
   1bea0:	df000115 	stw	fp,4(sp)
   1bea4:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1bea8:	01040034 	movhi	r4,4096
   1beac:	21080004 	addi	r4,r4,8192
   1beb0:	000b883a 	mov	r5,zero
   1beb4:	000d883a 	mov	r6,zero
   1beb8:	01c00204 	movi	r7,8
   1bebc:	001d00c0 	call	1d00c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   1bec0:	010000b4 	movhi	r4,2
   1bec4:	21049a04 	addi	r4,r4,4712
   1bec8:	000b883a 	mov	r5,zero
   1becc:	01800204 	movi	r6,8
   1bed0:	001c3d40 	call	1c3d4 <altera_avalon_jtag_uart_init>
   1bed4:	010000b4 	movhi	r4,2
   1bed8:	21049004 	addi	r4,r4,4672
   1bedc:	001be2c0 	call	1be2c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   1bee0:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1bee4:	010000b4 	movhi	r4,2
   1bee8:	2108ab04 	addi	r4,r4,8876
   1beec:	001be2c0 	call	1be2c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   1bef0:	010000b4 	movhi	r4,2
   1bef4:	2108b704 	addi	r4,r4,8924
   1bef8:	001be2c0 	call	1be2c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   1befc:	010000b4 	movhi	r4,2
   1bf00:	2108c304 	addi	r4,r4,8972
   1bf04:	001d13c0 	call	1d13c <alt_up_character_lcd_init>
   1bf08:	010000b4 	movhi	r4,2
   1bf0c:	2108c304 	addi	r4,r4,8972
   1bf10:	001be2c0 	call	1be2c <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   1bf14:	010000b4 	movhi	r4,2
   1bf18:	2108ce04 	addi	r4,r4,9016
   1bf1c:	001be2c0 	call	1be2c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   1bf20:	010000b4 	movhi	r4,2
   1bf24:	2108d904 	addi	r4,r4,9060
   1bf28:	001be2c0 	call	1be2c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   1bf2c:	010000b4 	movhi	r4,2
   1bf30:	2108e404 	addi	r4,r4,9104
   1bf34:	001be2c0 	call	1be2c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   1bf38:	010000b4 	movhi	r4,2
   1bf3c:	2108ef04 	addi	r4,r4,9148
   1bf40:	001be2c0 	call	1be2c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   1bf44:	010000b4 	movhi	r4,2
   1bf48:	2108fa04 	addi	r4,r4,9192
   1bf4c:	001be2c0 	call	1be2c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   1bf50:	010000b4 	movhi	r4,2
   1bf54:	21090504 	addi	r4,r4,9236
   1bf58:	001be2c0 	call	1be2c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   1bf5c:	010000b4 	movhi	r4,2
   1bf60:	21091004 	addi	r4,r4,9280
   1bf64:	001be2c0 	call	1be2c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   1bf68:	010000b4 	movhi	r4,2
   1bf6c:	21091b04 	addi	r4,r4,9324
   1bf70:	001be2c0 	call	1be2c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   1bf74:	010000b4 	movhi	r4,2
   1bf78:	21092604 	addi	r4,r4,9368
   1bf7c:	001da540 	call	1da54 <alt_up_ps2_init>
   1bf80:	010000b4 	movhi	r4,2
   1bf84:	21092604 	addi	r4,r4,9368
   1bf88:	001be2c0 	call	1be2c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   1bf8c:	010000b4 	movhi	r4,2
   1bf90:	21093404 	addi	r4,r4,9424
   1bf94:	001da540 	call	1da54 <alt_up_ps2_init>
   1bf98:	010000b4 	movhi	r4,2
   1bf9c:	21093404 	addi	r4,r4,9424
   1bfa0:	001be2c0 	call	1be2c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1bfa4:	010000b4 	movhi	r4,2
   1bfa8:	21094204 	addi	r4,r4,9480
   1bfac:	001be2c0 	call	1be2c <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   1bfb0:	010000b4 	movhi	r4,2
   1bfb4:	21094d04 	addi	r4,r4,9524
   1bfb8:	001be2c0 	call	1be2c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   1bfbc:	008000b4 	movhi	r2,2
   1bfc0:	10895a04 	addi	r2,r2,9576
   1bfc4:	10800a17 	ldw	r2,40(r2)
   1bfc8:	10800104 	addi	r2,r2,4
   1bfcc:	10800017 	ldw	r2,0(r2)
   1bfd0:	10ffffcc 	andi	r3,r2,65535
   1bfd4:	008000b4 	movhi	r2,2
   1bfd8:	10895a04 	addi	r2,r2,9576
   1bfdc:	10c00c15 	stw	r3,48(r2)
   1bfe0:	008000b4 	movhi	r2,2
   1bfe4:	10895a04 	addi	r2,r2,9576
   1bfe8:	10800a17 	ldw	r2,40(r2)
   1bfec:	10800104 	addi	r2,r2,4
   1bff0:	10800017 	ldw	r2,0(r2)
   1bff4:	1006d43a 	srli	r3,r2,16
   1bff8:	008000b4 	movhi	r2,2
   1bffc:	10895a04 	addi	r2,r2,9576
   1c000:	10c00d15 	stw	r3,52(r2)
   1c004:	008000b4 	movhi	r2,2
   1c008:	10895a04 	addi	r2,r2,9576
   1c00c:	10800c17 	ldw	r2,48(r2)
   1c010:	10801068 	cmpgeui	r2,r2,65
   1c014:	1000081e 	bne	r2,zero,1c038 <alt_sys_init+0x1a0>
   1c018:	008000b4 	movhi	r2,2
   1c01c:	10895a04 	addi	r2,r2,9576
   1c020:	00c00fc4 	movi	r3,63
   1c024:	10c00f15 	stw	r3,60(r2)
   1c028:	008000b4 	movhi	r2,2
   1c02c:	10895a04 	addi	r2,r2,9576
   1c030:	00c00184 	movi	r3,6
   1c034:	10c01015 	stw	r3,64(r2)
   1c038:	008000b4 	movhi	r2,2
   1c03c:	10895a04 	addi	r2,r2,9576
   1c040:	10800d17 	ldw	r2,52(r2)
   1c044:	10800868 	cmpgeui	r2,r2,33
   1c048:	1000041e 	bne	r2,zero,1c05c <alt_sys_init+0x1c4>
   1c04c:	008000b4 	movhi	r2,2
   1c050:	10895a04 	addi	r2,r2,9576
   1c054:	00c007c4 	movi	r3,31
   1c058:	10c01115 	stw	r3,68(r2)
   1c05c:	010000b4 	movhi	r4,2
   1c060:	21095a04 	addi	r4,r4,9576
   1c064:	001e36c0 	call	1e36c <alt_up_char_buffer_init>
   1c068:	010000b4 	movhi	r4,2
   1c06c:	21095a04 	addi	r4,r4,9576
   1c070:	001be2c0 	call	1be2c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   1c074:	008000b4 	movhi	r2,2
   1c078:	10896c04 	addi	r2,r2,9648
   1c07c:	10800a17 	ldw	r2,40(r2)
   1c080:	10800017 	ldw	r2,0(r2)
   1c084:	1007883a 	mov	r3,r2
   1c088:	008000b4 	movhi	r2,2
   1c08c:	10896c04 	addi	r2,r2,9648
   1c090:	10c00b15 	stw	r3,44(r2)
   1c094:	008000b4 	movhi	r2,2
   1c098:	10896c04 	addi	r2,r2,9648
   1c09c:	10800a17 	ldw	r2,40(r2)
   1c0a0:	10800104 	addi	r2,r2,4
   1c0a4:	10800017 	ldw	r2,0(r2)
   1c0a8:	1007883a 	mov	r3,r2
   1c0ac:	008000b4 	movhi	r2,2
   1c0b0:	10896c04 	addi	r2,r2,9648
   1c0b4:	10c00c15 	stw	r3,48(r2)
   1c0b8:	008000b4 	movhi	r2,2
   1c0bc:	10896c04 	addi	r2,r2,9648
   1c0c0:	10800a17 	ldw	r2,40(r2)
   1c0c4:	10800204 	addi	r2,r2,8
   1c0c8:	10800017 	ldw	r2,0(r2)
   1c0cc:	10ffffcc 	andi	r3,r2,65535
   1c0d0:	008000b4 	movhi	r2,2
   1c0d4:	10896c04 	addi	r2,r2,9648
   1c0d8:	10c00f15 	stw	r3,60(r2)
   1c0dc:	008000b4 	movhi	r2,2
   1c0e0:	10896c04 	addi	r2,r2,9648
   1c0e4:	10800a17 	ldw	r2,40(r2)
   1c0e8:	10800204 	addi	r2,r2,8
   1c0ec:	10800017 	ldw	r2,0(r2)
   1c0f0:	1006d43a 	srli	r3,r2,16
   1c0f4:	008000b4 	movhi	r2,2
   1c0f8:	10896c04 	addi	r2,r2,9648
   1c0fc:	10c01015 	stw	r3,64(r2)
   1c100:	008000b4 	movhi	r2,2
   1c104:	10896c04 	addi	r2,r2,9648
   1c108:	10800a17 	ldw	r2,40(r2)
   1c10c:	10800304 	addi	r2,r2,12
   1c110:	10800017 	ldw	r2,0(r2)
   1c114:	1005d07a 	srai	r2,r2,1
   1c118:	10c0004c 	andi	r3,r2,1
   1c11c:	008000b4 	movhi	r2,2
   1c120:	10896c04 	addi	r2,r2,9648
   1c124:	10c00d15 	stw	r3,52(r2)
   1c128:	008000b4 	movhi	r2,2
   1c12c:	10896c04 	addi	r2,r2,9648
   1c130:	10800a17 	ldw	r2,40(r2)
   1c134:	10800304 	addi	r2,r2,12
   1c138:	10800017 	ldw	r2,0(r2)
   1c13c:	1005d13a 	srai	r2,r2,4
   1c140:	10c003cc 	andi	r3,r2,15
   1c144:	008000b4 	movhi	r2,2
   1c148:	10896c04 	addi	r2,r2,9648
   1c14c:	10c00e15 	stw	r3,56(r2)
   1c150:	008000b4 	movhi	r2,2
   1c154:	10896c04 	addi	r2,r2,9648
   1c158:	10800a17 	ldw	r2,40(r2)
   1c15c:	10800304 	addi	r2,r2,12
   1c160:	10800017 	ldw	r2,0(r2)
   1c164:	1005d43a 	srai	r2,r2,16
   1c168:	e0bfff05 	stb	r2,-4(fp)
   1c16c:	008000b4 	movhi	r2,2
   1c170:	10896c04 	addi	r2,r2,9648
   1c174:	10800a17 	ldw	r2,40(r2)
   1c178:	10800304 	addi	r2,r2,12
   1c17c:	10800017 	ldw	r2,0(r2)
   1c180:	1004d63a 	srli	r2,r2,24
   1c184:	e0bfff45 	stb	r2,-3(fp)
   1c188:	008000b4 	movhi	r2,2
   1c18c:	10896c04 	addi	r2,r2,9648
   1c190:	10800e17 	ldw	r2,56(r2)
   1c194:	10800058 	cmpnei	r2,r2,1
   1c198:	1000041e 	bne	r2,zero,1c1ac <alt_sys_init+0x314>
   1c19c:	008000b4 	movhi	r2,2
   1c1a0:	10896c04 	addi	r2,r2,9648
   1c1a4:	10001115 	stw	zero,68(r2)
   1c1a8:	00000e06 	br	1c1e4 <alt_sys_init+0x34c>
   1c1ac:	008000b4 	movhi	r2,2
   1c1b0:	10896c04 	addi	r2,r2,9648
   1c1b4:	10800e17 	ldw	r2,56(r2)
   1c1b8:	10800098 	cmpnei	r2,r2,2
   1c1bc:	1000051e 	bne	r2,zero,1c1d4 <alt_sys_init+0x33c>
   1c1c0:	008000b4 	movhi	r2,2
   1c1c4:	10896c04 	addi	r2,r2,9648
   1c1c8:	00c00044 	movi	r3,1
   1c1cc:	10c01115 	stw	r3,68(r2)
   1c1d0:	00000406 	br	1c1e4 <alt_sys_init+0x34c>
   1c1d4:	008000b4 	movhi	r2,2
   1c1d8:	10896c04 	addi	r2,r2,9648
   1c1dc:	00c00084 	movi	r3,2
   1c1e0:	10c01115 	stw	r3,68(r2)
   1c1e4:	e0bfff03 	ldbu	r2,-4(fp)
   1c1e8:	00c00804 	movi	r3,32
   1c1ec:	1885c83a 	sub	r2,r3,r2
   1c1f0:	00ffffc4 	movi	r3,-1
   1c1f4:	1886d83a 	srl	r3,r3,r2
   1c1f8:	008000b4 	movhi	r2,2
   1c1fc:	10896c04 	addi	r2,r2,9648
   1c200:	10c01215 	stw	r3,72(r2)
   1c204:	e0ffff03 	ldbu	r3,-4(fp)
   1c208:	008000b4 	movhi	r2,2
   1c20c:	10896c04 	addi	r2,r2,9648
   1c210:	10801117 	ldw	r2,68(r2)
   1c214:	1887883a 	add	r3,r3,r2
   1c218:	008000b4 	movhi	r2,2
   1c21c:	10896c04 	addi	r2,r2,9648
   1c220:	10c01315 	stw	r3,76(r2)
   1c224:	e0bfff43 	ldbu	r2,-3(fp)
   1c228:	00c00804 	movi	r3,32
   1c22c:	1885c83a 	sub	r2,r3,r2
   1c230:	00ffffc4 	movi	r3,-1
   1c234:	1886d83a 	srl	r3,r3,r2
   1c238:	008000b4 	movhi	r2,2
   1c23c:	10896c04 	addi	r2,r2,9648
   1c240:	10c01415 	stw	r3,80(r2)
   1c244:	010000b4 	movhi	r4,2
   1c248:	21096c04 	addi	r4,r4,9648
   1c24c:	001be2c0 	call	1be2c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   1c250:	010000b4 	movhi	r4,2
   1c254:	21098104 	addi	r4,r4,9732
   1c258:	001be2c0 	call	1be2c <alt_dev_reg>
}
   1c25c:	e037883a 	mov	sp,fp
   1c260:	dfc00117 	ldw	ra,4(sp)
   1c264:	df000017 	ldw	fp,0(sp)
   1c268:	dec00204 	addi	sp,sp,8
   1c26c:	f800283a 	ret

0001c270 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1c270:	defffa04 	addi	sp,sp,-24
   1c274:	dfc00515 	stw	ra,20(sp)
   1c278:	df000415 	stw	fp,16(sp)
   1c27c:	df000404 	addi	fp,sp,16
   1c280:	e13ffd15 	stw	r4,-12(fp)
   1c284:	e17ffe15 	stw	r5,-8(fp)
   1c288:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1c28c:	e0bffd17 	ldw	r2,-12(fp)
   1c290:	10800017 	ldw	r2,0(r2)
   1c294:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1c298:	e0bffc17 	ldw	r2,-16(fp)
   1c29c:	10c00a04 	addi	r3,r2,40
   1c2a0:	e0bffd17 	ldw	r2,-12(fp)
   1c2a4:	10800217 	ldw	r2,8(r2)
   1c2a8:	1809883a 	mov	r4,r3
   1c2ac:	e17ffe17 	ldw	r5,-8(fp)
   1c2b0:	e1bfff17 	ldw	r6,-4(fp)
   1c2b4:	100f883a 	mov	r7,r2
   1c2b8:	001ca200 	call	1ca20 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1c2bc:	e037883a 	mov	sp,fp
   1c2c0:	dfc00117 	ldw	ra,4(sp)
   1c2c4:	df000017 	ldw	fp,0(sp)
   1c2c8:	dec00204 	addi	sp,sp,8
   1c2cc:	f800283a 	ret

0001c2d0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1c2d0:	defffa04 	addi	sp,sp,-24
   1c2d4:	dfc00515 	stw	ra,20(sp)
   1c2d8:	df000415 	stw	fp,16(sp)
   1c2dc:	df000404 	addi	fp,sp,16
   1c2e0:	e13ffd15 	stw	r4,-12(fp)
   1c2e4:	e17ffe15 	stw	r5,-8(fp)
   1c2e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1c2ec:	e0bffd17 	ldw	r2,-12(fp)
   1c2f0:	10800017 	ldw	r2,0(r2)
   1c2f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1c2f8:	e0bffc17 	ldw	r2,-16(fp)
   1c2fc:	10c00a04 	addi	r3,r2,40
   1c300:	e0bffd17 	ldw	r2,-12(fp)
   1c304:	10800217 	ldw	r2,8(r2)
   1c308:	1809883a 	mov	r4,r3
   1c30c:	e17ffe17 	ldw	r5,-8(fp)
   1c310:	e1bfff17 	ldw	r6,-4(fp)
   1c314:	100f883a 	mov	r7,r2
   1c318:	001ccd40 	call	1ccd4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1c31c:	e037883a 	mov	sp,fp
   1c320:	dfc00117 	ldw	ra,4(sp)
   1c324:	df000017 	ldw	fp,0(sp)
   1c328:	dec00204 	addi	sp,sp,8
   1c32c:	f800283a 	ret

0001c330 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1c330:	defffc04 	addi	sp,sp,-16
   1c334:	dfc00315 	stw	ra,12(sp)
   1c338:	df000215 	stw	fp,8(sp)
   1c33c:	df000204 	addi	fp,sp,8
   1c340:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1c344:	e0bfff17 	ldw	r2,-4(fp)
   1c348:	10800017 	ldw	r2,0(r2)
   1c34c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1c350:	e0bffe17 	ldw	r2,-8(fp)
   1c354:	10c00a04 	addi	r3,r2,40
   1c358:	e0bfff17 	ldw	r2,-4(fp)
   1c35c:	10800217 	ldw	r2,8(r2)
   1c360:	1809883a 	mov	r4,r3
   1c364:	100b883a 	mov	r5,r2
   1c368:	001c8cc0 	call	1c8cc <altera_avalon_jtag_uart_close>
}
   1c36c:	e037883a 	mov	sp,fp
   1c370:	dfc00117 	ldw	ra,4(sp)
   1c374:	df000017 	ldw	fp,0(sp)
   1c378:	dec00204 	addi	sp,sp,8
   1c37c:	f800283a 	ret

0001c380 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1c380:	defffa04 	addi	sp,sp,-24
   1c384:	dfc00515 	stw	ra,20(sp)
   1c388:	df000415 	stw	fp,16(sp)
   1c38c:	df000404 	addi	fp,sp,16
   1c390:	e13ffd15 	stw	r4,-12(fp)
   1c394:	e17ffe15 	stw	r5,-8(fp)
   1c398:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1c39c:	e0bffd17 	ldw	r2,-12(fp)
   1c3a0:	10800017 	ldw	r2,0(r2)
   1c3a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1c3a8:	e0bffc17 	ldw	r2,-16(fp)
   1c3ac:	10800a04 	addi	r2,r2,40
   1c3b0:	1009883a 	mov	r4,r2
   1c3b4:	e17ffe17 	ldw	r5,-8(fp)
   1c3b8:	e1bfff17 	ldw	r6,-4(fp)
   1c3bc:	001c9340 	call	1c934 <altera_avalon_jtag_uart_ioctl>
}
   1c3c0:	e037883a 	mov	sp,fp
   1c3c4:	dfc00117 	ldw	ra,4(sp)
   1c3c8:	df000017 	ldw	fp,0(sp)
   1c3cc:	dec00204 	addi	sp,sp,8
   1c3d0:	f800283a 	ret

0001c3d4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1c3d4:	defff104 	addi	sp,sp,-60
   1c3d8:	dfc00e15 	stw	ra,56(sp)
   1c3dc:	df000d15 	stw	fp,52(sp)
   1c3e0:	df000d04 	addi	fp,sp,52
   1c3e4:	e13ff915 	stw	r4,-28(fp)
   1c3e8:	e17ffa15 	stw	r5,-24(fp)
   1c3ec:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   1c3f0:	e0bff917 	ldw	r2,-28(fp)
   1c3f4:	10800c04 	addi	r2,r2,48
   1c3f8:	e0bff315 	stw	r2,-52(fp)
   1c3fc:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   1c400:	e0fff40b 	ldhu	r3,-48(fp)
   1c404:	e0bff884 	addi	r2,fp,-30
   1c408:	1809883a 	mov	r4,r3
   1c40c:	100b883a 	mov	r5,r2
   1c410:	0015a980 	call	15a98 <OSFlagCreate>
   1c414:	1007883a 	mov	r3,r2
   1c418:	e0bff317 	ldw	r2,-52(fp)
   1c41c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   1c420:	e0bff917 	ldw	r2,-28(fp)
   1c424:	10800a04 	addi	r2,r2,40
   1c428:	e0bff515 	stw	r2,-44(fp)
   1c42c:	00800044 	movi	r2,1
   1c430:	e0bff60d 	sth	r2,-40(fp)
   1c434:	e0bff60b 	ldhu	r2,-40(fp)
   1c438:	1009883a 	mov	r4,r2
   1c43c:	00195780 	call	19578 <OSSemCreate>
   1c440:	1007883a 	mov	r3,r2
   1c444:	e0bff517 	ldw	r2,-44(fp)
   1c448:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   1c44c:	e0bff917 	ldw	r2,-28(fp)
   1c450:	10800b04 	addi	r2,r2,44
   1c454:	e0bff715 	stw	r2,-36(fp)
   1c458:	00800044 	movi	r2,1
   1c45c:	e0bff80d 	sth	r2,-32(fp)
   1c460:	e0bff80b 	ldhu	r2,-32(fp)
   1c464:	1009883a 	mov	r4,r2
   1c468:	00195780 	call	19578 <OSSemCreate>
   1c46c:	1007883a 	mov	r3,r2
   1c470:	e0bff717 	ldw	r2,-36(fp)
   1c474:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1c478:	e0bff917 	ldw	r2,-28(fp)
   1c47c:	00c00044 	movi	r3,1
   1c480:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1c484:	e0bff917 	ldw	r2,-28(fp)
   1c488:	10800017 	ldw	r2,0(r2)
   1c48c:	10800104 	addi	r2,r2,4
   1c490:	1007883a 	mov	r3,r2
   1c494:	e0bff917 	ldw	r2,-28(fp)
   1c498:	10800817 	ldw	r2,32(r2)
   1c49c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   1c4a0:	e0bffb17 	ldw	r2,-20(fp)
   1c4a4:	1009883a 	mov	r4,r2
   1c4a8:	e17ff917 	ldw	r5,-28(fp)
   1c4ac:	018000b4 	movhi	r6,2
   1c4b0:	31b14504 	addi	r6,r6,-15084
   1c4b4:	001eb540 	call	1eb54 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1c4b8:	e0bff917 	ldw	r2,-28(fp)
   1c4bc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1c4c0:	e0bff917 	ldw	r2,-28(fp)
   1c4c4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1c4c8:	008000b4 	movhi	r2,2
   1c4cc:	1091d404 	addi	r2,r2,18256
   1c4d0:	10800017 	ldw	r2,0(r2)
   1c4d4:	1809883a 	mov	r4,r3
   1c4d8:	100b883a 	mov	r5,r2
   1c4dc:	018000b4 	movhi	r6,2
   1c4e0:	31b1ef04 	addi	r6,r6,-14404
   1c4e4:	e1fff917 	ldw	r7,-28(fp)
   1c4e8:	001e6540 	call	1e654 <alt_alarm_start>
   1c4ec:	1000040e 	bge	r2,zero,1c500 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1c4f0:	e0fff917 	ldw	r3,-28(fp)
   1c4f4:	00a00034 	movhi	r2,32768
   1c4f8:	10bfffc4 	addi	r2,r2,-1
   1c4fc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1c500:	e037883a 	mov	sp,fp
   1c504:	dfc00117 	ldw	ra,4(sp)
   1c508:	df000017 	ldw	fp,0(sp)
   1c50c:	dec00204 	addi	sp,sp,8
   1c510:	f800283a 	ret

0001c514 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1c514:	defff104 	addi	sp,sp,-60
   1c518:	dfc00e15 	stw	ra,56(sp)
   1c51c:	df000d15 	stw	fp,52(sp)
   1c520:	df000d04 	addi	fp,sp,52
   1c524:	e13ffe15 	stw	r4,-8(fp)
   1c528:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1c52c:	e0bffe17 	ldw	r2,-8(fp)
   1c530:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   1c534:	e0bff517 	ldw	r2,-44(fp)
   1c538:	10800017 	ldw	r2,0(r2)
   1c53c:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1c540:	e0bff617 	ldw	r2,-40(fp)
   1c544:	10800104 	addi	r2,r2,4
   1c548:	10800037 	ldwio	r2,0(r2)
   1c54c:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1c550:	e0bff717 	ldw	r2,-36(fp)
   1c554:	1080c00c 	andi	r2,r2,768
   1c558:	1000011e 	bne	r2,zero,1c560 <altera_avalon_jtag_uart_irq+0x4c>
      break;
   1c55c:	00009206 	br	1c7a8 <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1c560:	e0bff717 	ldw	r2,-36(fp)
   1c564:	1080400c 	andi	r2,r2,256
   1c568:	10004726 	beq	r2,zero,1c688 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1c56c:	00800074 	movhi	r2,1
   1c570:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c574:	e0bff517 	ldw	r2,-44(fp)
   1c578:	10800d17 	ldw	r2,52(r2)
   1c57c:	10800044 	addi	r2,r2,1
   1c580:	1081ffcc 	andi	r2,r2,2047
   1c584:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   1c588:	e0bff517 	ldw	r2,-44(fp)
   1c58c:	10c00e17 	ldw	r3,56(r2)
   1c590:	e0bff817 	ldw	r2,-32(fp)
   1c594:	1880011e 	bne	r3,r2,1c59c <altera_avalon_jtag_uart_irq+0x88>
          break;
   1c598:	00002906 	br	1c640 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1c59c:	e0bff617 	ldw	r2,-40(fp)
   1c5a0:	10800037 	ldwio	r2,0(r2)
   1c5a4:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1c5a8:	e0bff317 	ldw	r2,-52(fp)
   1c5ac:	10a0000c 	andi	r2,r2,32768
   1c5b0:	1000011e 	bne	r2,zero,1c5b8 <altera_avalon_jtag_uart_irq+0xa4>
          break;
   1c5b4:	00002206 	br	1c640 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1c5b8:	e0bff517 	ldw	r2,-44(fp)
   1c5bc:	10800d17 	ldw	r2,52(r2)
   1c5c0:	e0fff317 	ldw	r3,-52(fp)
   1c5c4:	1809883a 	mov	r4,r3
   1c5c8:	e0fff517 	ldw	r3,-44(fp)
   1c5cc:	1885883a 	add	r2,r3,r2
   1c5d0:	10801104 	addi	r2,r2,68
   1c5d4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c5d8:	e0bff517 	ldw	r2,-44(fp)
   1c5dc:	10800d17 	ldw	r2,52(r2)
   1c5e0:	10800044 	addi	r2,r2,1
   1c5e4:	10c1ffcc 	andi	r3,r2,2047
   1c5e8:	e0bff517 	ldw	r2,-44(fp)
   1c5ec:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   1c5f0:	e0bff517 	ldw	r2,-44(fp)
   1c5f4:	10800c17 	ldw	r2,48(r2)
   1c5f8:	e0bff915 	stw	r2,-28(fp)
   1c5fc:	00800044 	movi	r2,1
   1c600:	e0bffa0d 	sth	r2,-24(fp)
   1c604:	00800044 	movi	r2,1
   1c608:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1c60c:	008000b4 	movhi	r2,2
   1c610:	1091bf44 	addi	r2,r2,18173
   1c614:	10800003 	ldbu	r2,0(r2)
   1c618:	10803fcc 	andi	r2,r2,255
   1c61c:	103fd526 	beq	r2,zero,1c574 <__alt_mem_Flash_flash_data+0xf401c574>
  {
    OSFlagPost (group, flags, opt, &err);
   1c620:	e17ffa0b 	ldhu	r5,-24(fp)
   1c624:	e0fffa83 	ldbu	r3,-22(fp)
   1c628:	e0bffcc4 	addi	r2,fp,-13
   1c62c:	e13ff917 	ldw	r4,-28(fp)
   1c630:	180d883a 	mov	r6,r3
   1c634:	100f883a 	mov	r7,r2
   1c638:	00167080 	call	16708 <OSFlagPost>
      }
   1c63c:	003fcd06 	br	1c574 <__alt_mem_Flash_flash_data+0xf401c574>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1c640:	e0bff317 	ldw	r2,-52(fp)
   1c644:	10bfffec 	andhi	r2,r2,65535
   1c648:	10000f26 	beq	r2,zero,1c688 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1c64c:	e0bff517 	ldw	r2,-44(fp)
   1c650:	10c00817 	ldw	r3,32(r2)
   1c654:	00bfff84 	movi	r2,-2
   1c658:	1886703a 	and	r3,r3,r2
   1c65c:	e0bff517 	ldw	r2,-44(fp)
   1c660:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1c664:	e0bff617 	ldw	r2,-40(fp)
   1c668:	10800104 	addi	r2,r2,4
   1c66c:	1007883a 	mov	r3,r2
   1c670:	e0bff517 	ldw	r2,-44(fp)
   1c674:	10800817 	ldw	r2,32(r2)
   1c678:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1c67c:	e0bff617 	ldw	r2,-40(fp)
   1c680:	10800104 	addi	r2,r2,4
   1c684:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1c688:	e0bff717 	ldw	r2,-36(fp)
   1c68c:	1080800c 	andi	r2,r2,512
   1c690:	10004426 	beq	r2,zero,1c7a4 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1c694:	e0bff717 	ldw	r2,-36(fp)
   1c698:	1004d43a 	srli	r2,r2,16
   1c69c:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1c6a0:	00002706 	br	1c740 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1c6a4:	e0bff617 	ldw	r2,-40(fp)
   1c6a8:	e0fff517 	ldw	r3,-44(fp)
   1c6ac:	18c01017 	ldw	r3,64(r3)
   1c6b0:	e13ff517 	ldw	r4,-44(fp)
   1c6b4:	20c7883a 	add	r3,r4,r3
   1c6b8:	18c21104 	addi	r3,r3,2116
   1c6bc:	18c00003 	ldbu	r3,0(r3)
   1c6c0:	18c03fcc 	andi	r3,r3,255
   1c6c4:	18c0201c 	xori	r3,r3,128
   1c6c8:	18ffe004 	addi	r3,r3,-128
   1c6cc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c6d0:	e0bff517 	ldw	r2,-44(fp)
   1c6d4:	10801017 	ldw	r2,64(r2)
   1c6d8:	10800044 	addi	r2,r2,1
   1c6dc:	10c1ffcc 	andi	r3,r2,2047
   1c6e0:	e0bff517 	ldw	r2,-44(fp)
   1c6e4:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   1c6e8:	e0bff517 	ldw	r2,-44(fp)
   1c6ec:	10800c17 	ldw	r2,48(r2)
   1c6f0:	e0bffb15 	stw	r2,-20(fp)
   1c6f4:	00800084 	movi	r2,2
   1c6f8:	e0bffc0d 	sth	r2,-16(fp)
   1c6fc:	00800044 	movi	r2,1
   1c700:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1c704:	008000b4 	movhi	r2,2
   1c708:	1091bf44 	addi	r2,r2,18173
   1c70c:	10800003 	ldbu	r2,0(r2)
   1c710:	10803fcc 	andi	r2,r2,255
   1c714:	10000726 	beq	r2,zero,1c734 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   1c718:	e17ffc0b 	ldhu	r5,-16(fp)
   1c71c:	e0fffc83 	ldbu	r3,-14(fp)
   1c720:	e0bffd04 	addi	r2,fp,-12
   1c724:	e13ffb17 	ldw	r4,-20(fp)
   1c728:	180d883a 	mov	r6,r3
   1c72c:	100f883a 	mov	r7,r2
   1c730:	00167080 	call	16708 <OSFlagPost>

        space--;
   1c734:	e0bff417 	ldw	r2,-48(fp)
   1c738:	10bfffc4 	addi	r2,r2,-1
   1c73c:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1c740:	e0bff417 	ldw	r2,-48(fp)
   1c744:	10000526 	beq	r2,zero,1c75c <altera_avalon_jtag_uart_irq+0x248>
   1c748:	e0bff517 	ldw	r2,-44(fp)
   1c74c:	10c01017 	ldw	r3,64(r2)
   1c750:	e0bff517 	ldw	r2,-44(fp)
   1c754:	10800f17 	ldw	r2,60(r2)
   1c758:	18bfd21e 	bne	r3,r2,1c6a4 <__alt_mem_Flash_flash_data+0xf401c6a4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1c75c:	e0bff417 	ldw	r2,-48(fp)
   1c760:	10001026 	beq	r2,zero,1c7a4 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1c764:	e0bff517 	ldw	r2,-44(fp)
   1c768:	10c00817 	ldw	r3,32(r2)
   1c76c:	00bfff44 	movi	r2,-3
   1c770:	1886703a 	and	r3,r3,r2
   1c774:	e0bff517 	ldw	r2,-44(fp)
   1c778:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1c77c:	e0bff517 	ldw	r2,-44(fp)
   1c780:	10800017 	ldw	r2,0(r2)
   1c784:	10800104 	addi	r2,r2,4
   1c788:	1007883a 	mov	r3,r2
   1c78c:	e0bff517 	ldw	r2,-44(fp)
   1c790:	10800817 	ldw	r2,32(r2)
   1c794:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1c798:	e0bff617 	ldw	r2,-40(fp)
   1c79c:	10800104 	addi	r2,r2,4
   1c7a0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1c7a4:	003f6606 	br	1c540 <__alt_mem_Flash_flash_data+0xf401c540>
}
   1c7a8:	e037883a 	mov	sp,fp
   1c7ac:	dfc00117 	ldw	ra,4(sp)
   1c7b0:	df000017 	ldw	fp,0(sp)
   1c7b4:	dec00204 	addi	sp,sp,8
   1c7b8:	f800283a 	ret

0001c7bc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1c7bc:	defff904 	addi	sp,sp,-28
   1c7c0:	dfc00615 	stw	ra,24(sp)
   1c7c4:	df000515 	stw	fp,20(sp)
   1c7c8:	df000504 	addi	fp,sp,20
   1c7cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1c7d0:	e0bfff17 	ldw	r2,-4(fp)
   1c7d4:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1c7d8:	e0bffb17 	ldw	r2,-20(fp)
   1c7dc:	10800017 	ldw	r2,0(r2)
   1c7e0:	10800104 	addi	r2,r2,4
   1c7e4:	10800037 	ldwio	r2,0(r2)
   1c7e8:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1c7ec:	e0bffc17 	ldw	r2,-16(fp)
   1c7f0:	1081000c 	andi	r2,r2,1024
   1c7f4:	10000b26 	beq	r2,zero,1c824 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1c7f8:	e0bffb17 	ldw	r2,-20(fp)
   1c7fc:	10800017 	ldw	r2,0(r2)
   1c800:	10800104 	addi	r2,r2,4
   1c804:	1007883a 	mov	r3,r2
   1c808:	e0bffb17 	ldw	r2,-20(fp)
   1c80c:	10800817 	ldw	r2,32(r2)
   1c810:	10810014 	ori	r2,r2,1024
   1c814:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1c818:	e0bffb17 	ldw	r2,-20(fp)
   1c81c:	10000915 	stw	zero,36(r2)
   1c820:	00002206 	br	1c8ac <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1c824:	e0bffb17 	ldw	r2,-20(fp)
   1c828:	10c00917 	ldw	r3,36(r2)
   1c82c:	00a00034 	movhi	r2,32768
   1c830:	10bfff04 	addi	r2,r2,-4
   1c834:	10c01d36 	bltu	r2,r3,1c8ac <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   1c838:	e0bffb17 	ldw	r2,-20(fp)
   1c83c:	10800917 	ldw	r2,36(r2)
   1c840:	10c00044 	addi	r3,r2,1
   1c844:	e0bffb17 	ldw	r2,-20(fp)
   1c848:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   1c84c:	e0bffb17 	ldw	r2,-20(fp)
   1c850:	10c00917 	ldw	r3,36(r2)
   1c854:	e0bffb17 	ldw	r2,-20(fp)
   1c858:	10800117 	ldw	r2,4(r2)
   1c85c:	18801336 	bltu	r3,r2,1c8ac <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   1c860:	e0bffb17 	ldw	r2,-20(fp)
   1c864:	10800c17 	ldw	r2,48(r2)
   1c868:	e0bffd15 	stw	r2,-12(fp)
   1c86c:	00800104 	movi	r2,4
   1c870:	e0bffe0d 	sth	r2,-8(fp)
   1c874:	00800044 	movi	r2,1
   1c878:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1c87c:	008000b4 	movhi	r2,2
   1c880:	1091bf44 	addi	r2,r2,18173
   1c884:	10800003 	ldbu	r2,0(r2)
   1c888:	10803fcc 	andi	r2,r2,255
   1c88c:	10000726 	beq	r2,zero,1c8ac <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   1c890:	e17ffe0b 	ldhu	r5,-8(fp)
   1c894:	e0fffe83 	ldbu	r3,-6(fp)
   1c898:	e0bffec4 	addi	r2,fp,-5
   1c89c:	e13ffd17 	ldw	r4,-12(fp)
   1c8a0:	180d883a 	mov	r6,r3
   1c8a4:	100f883a 	mov	r7,r2
   1c8a8:	00167080 	call	16708 <OSFlagPost>
   1c8ac:	008000b4 	movhi	r2,2
   1c8b0:	1091d404 	addi	r2,r2,18256
   1c8b4:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   1c8b8:	e037883a 	mov	sp,fp
   1c8bc:	dfc00117 	ldw	ra,4(sp)
   1c8c0:	df000017 	ldw	fp,0(sp)
   1c8c4:	dec00204 	addi	sp,sp,8
   1c8c8:	f800283a 	ret

0001c8cc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1c8cc:	defffd04 	addi	sp,sp,-12
   1c8d0:	df000215 	stw	fp,8(sp)
   1c8d4:	df000204 	addi	fp,sp,8
   1c8d8:	e13ffe15 	stw	r4,-8(fp)
   1c8dc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1c8e0:	00000506 	br	1c8f8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1c8e4:	e0bfff17 	ldw	r2,-4(fp)
   1c8e8:	1090000c 	andi	r2,r2,16384
   1c8ec:	10000226 	beq	r2,zero,1c8f8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1c8f0:	00bffd44 	movi	r2,-11
   1c8f4:	00000b06 	br	1c924 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1c8f8:	e0bffe17 	ldw	r2,-8(fp)
   1c8fc:	10c01017 	ldw	r3,64(r2)
   1c900:	e0bffe17 	ldw	r2,-8(fp)
   1c904:	10800f17 	ldw	r2,60(r2)
   1c908:	18800526 	beq	r3,r2,1c920 <altera_avalon_jtag_uart_close+0x54>
   1c90c:	e0bffe17 	ldw	r2,-8(fp)
   1c910:	10c00917 	ldw	r3,36(r2)
   1c914:	e0bffe17 	ldw	r2,-8(fp)
   1c918:	10800117 	ldw	r2,4(r2)
   1c91c:	18bff136 	bltu	r3,r2,1c8e4 <__alt_mem_Flash_flash_data+0xf401c8e4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1c920:	0005883a 	mov	r2,zero
}
   1c924:	e037883a 	mov	sp,fp
   1c928:	df000017 	ldw	fp,0(sp)
   1c92c:	dec00104 	addi	sp,sp,4
   1c930:	f800283a 	ret

0001c934 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1c934:	defffa04 	addi	sp,sp,-24
   1c938:	df000515 	stw	fp,20(sp)
   1c93c:	df000504 	addi	fp,sp,20
   1c940:	e13ffd15 	stw	r4,-12(fp)
   1c944:	e17ffe15 	stw	r5,-8(fp)
   1c948:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1c94c:	00bff9c4 	movi	r2,-25
   1c950:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1c954:	e0bffe17 	ldw	r2,-8(fp)
   1c958:	10da8060 	cmpeqi	r3,r2,27137
   1c95c:	1800031e 	bne	r3,zero,1c96c <altera_avalon_jtag_uart_ioctl+0x38>
   1c960:	109a80a0 	cmpeqi	r2,r2,27138
   1c964:	1000191e 	bne	r2,zero,1c9cc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   1c968:	00002806 	br	1ca0c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1c96c:	e0bffd17 	ldw	r2,-12(fp)
   1c970:	10c00117 	ldw	r3,4(r2)
   1c974:	00a00034 	movhi	r2,32768
   1c978:	10bfffc4 	addi	r2,r2,-1
   1c97c:	18801226 	beq	r3,r2,1c9c8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   1c980:	e0bfff17 	ldw	r2,-4(fp)
   1c984:	10800017 	ldw	r2,0(r2)
   1c988:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1c98c:	e0bffc17 	ldw	r2,-16(fp)
   1c990:	10800090 	cmplti	r2,r2,2
   1c994:	1000061e 	bne	r2,zero,1c9b0 <altera_avalon_jtag_uart_ioctl+0x7c>
   1c998:	e0fffc17 	ldw	r3,-16(fp)
   1c99c:	00a00034 	movhi	r2,32768
   1c9a0:	10bfffc4 	addi	r2,r2,-1
   1c9a4:	18800226 	beq	r3,r2,1c9b0 <altera_avalon_jtag_uart_ioctl+0x7c>
   1c9a8:	e0bffc17 	ldw	r2,-16(fp)
   1c9ac:	00000206 	br	1c9b8 <altera_avalon_jtag_uart_ioctl+0x84>
   1c9b0:	00a00034 	movhi	r2,32768
   1c9b4:	10bfff84 	addi	r2,r2,-2
   1c9b8:	e0fffd17 	ldw	r3,-12(fp)
   1c9bc:	18800115 	stw	r2,4(r3)
      rc = 0;
   1c9c0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1c9c4:	00001106 	br	1ca0c <altera_avalon_jtag_uart_ioctl+0xd8>
   1c9c8:	00001006 	br	1ca0c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1c9cc:	e0bffd17 	ldw	r2,-12(fp)
   1c9d0:	10c00117 	ldw	r3,4(r2)
   1c9d4:	00a00034 	movhi	r2,32768
   1c9d8:	10bfffc4 	addi	r2,r2,-1
   1c9dc:	18800a26 	beq	r3,r2,1ca08 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1c9e0:	e0bffd17 	ldw	r2,-12(fp)
   1c9e4:	10c00917 	ldw	r3,36(r2)
   1c9e8:	e0bffd17 	ldw	r2,-12(fp)
   1c9ec:	10800117 	ldw	r2,4(r2)
   1c9f0:	1885803a 	cmpltu	r2,r3,r2
   1c9f4:	10c03fcc 	andi	r3,r2,255
   1c9f8:	e0bfff17 	ldw	r2,-4(fp)
   1c9fc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1ca00:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1ca04:	00000006 	br	1ca08 <altera_avalon_jtag_uart_ioctl+0xd4>
   1ca08:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1ca0c:	e0bffb17 	ldw	r2,-20(fp)
}
   1ca10:	e037883a 	mov	sp,fp
   1ca14:	df000017 	ldw	fp,0(sp)
   1ca18:	dec00104 	addi	sp,sp,4
   1ca1c:	f800283a 	ret

0001ca20 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1ca20:	deffec04 	addi	sp,sp,-80
   1ca24:	dfc01315 	stw	ra,76(sp)
   1ca28:	df001215 	stw	fp,72(sp)
   1ca2c:	df001204 	addi	fp,sp,72
   1ca30:	e13ffc15 	stw	r4,-16(fp)
   1ca34:	e17ffd15 	stw	r5,-12(fp)
   1ca38:	e1bffe15 	stw	r6,-8(fp)
   1ca3c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1ca40:	e0bffd17 	ldw	r2,-12(fp)
   1ca44:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1ca48:	e0bffc17 	ldw	r2,-16(fp)
   1ca4c:	10800a17 	ldw	r2,40(r2)
   1ca50:	e0bff415 	stw	r2,-48(fp)
   1ca54:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1ca58:	e0fff50b 	ldhu	r3,-44(fp)
   1ca5c:	e0bffb04 	addi	r2,fp,-20
   1ca60:	e13ff417 	ldw	r4,-48(fp)
   1ca64:	180b883a 	mov	r5,r3
   1ca68:	100d883a 	mov	r6,r2
   1ca6c:	00198e00 	call	198e0 <OSSemPend>

  while (space > 0)
   1ca70:	00006506 	br	1cc08 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1ca74:	e0bffc17 	ldw	r2,-16(fp)
   1ca78:	10800d17 	ldw	r2,52(r2)
   1ca7c:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   1ca80:	e0bffc17 	ldw	r2,-16(fp)
   1ca84:	10800e17 	ldw	r2,56(r2)
   1ca88:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   1ca8c:	e0fff117 	ldw	r3,-60(fp)
   1ca90:	e0bff217 	ldw	r2,-56(fp)
   1ca94:	18800536 	bltu	r3,r2,1caac <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   1ca98:	e0fff117 	ldw	r3,-60(fp)
   1ca9c:	e0bff217 	ldw	r2,-56(fp)
   1caa0:	1885c83a 	sub	r2,r3,r2
   1caa4:	e0bff015 	stw	r2,-64(fp)
   1caa8:	00000406 	br	1cabc <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1caac:	00c20004 	movi	r3,2048
   1cab0:	e0bff217 	ldw	r2,-56(fp)
   1cab4:	1885c83a 	sub	r2,r3,r2
   1cab8:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   1cabc:	e0bff017 	ldw	r2,-64(fp)
   1cac0:	1000011e 	bne	r2,zero,1cac8 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   1cac4:	00001d06 	br	1cb3c <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   1cac8:	e0fffe17 	ldw	r3,-8(fp)
   1cacc:	e0bff017 	ldw	r2,-64(fp)
   1cad0:	1880022e 	bgeu	r3,r2,1cadc <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   1cad4:	e0bffe17 	ldw	r2,-8(fp)
   1cad8:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1cadc:	e0bff217 	ldw	r2,-56(fp)
   1cae0:	10801104 	addi	r2,r2,68
   1cae4:	e0fffc17 	ldw	r3,-16(fp)
   1cae8:	1885883a 	add	r2,r3,r2
   1caec:	e13fef17 	ldw	r4,-68(fp)
   1caf0:	100b883a 	mov	r5,r2
   1caf4:	e1bff017 	ldw	r6,-64(fp)
   1caf8:	000aba40 	call	aba4 <memcpy>
      ptr   += n;
   1cafc:	e0ffef17 	ldw	r3,-68(fp)
   1cb00:	e0bff017 	ldw	r2,-64(fp)
   1cb04:	1885883a 	add	r2,r3,r2
   1cb08:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   1cb0c:	e0fffe17 	ldw	r3,-8(fp)
   1cb10:	e0bff017 	ldw	r2,-64(fp)
   1cb14:	1885c83a 	sub	r2,r3,r2
   1cb18:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1cb1c:	e0fff217 	ldw	r3,-56(fp)
   1cb20:	e0bff017 	ldw	r2,-64(fp)
   1cb24:	1885883a 	add	r2,r3,r2
   1cb28:	10c1ffcc 	andi	r3,r2,2047
   1cb2c:	e0bffc17 	ldw	r2,-16(fp)
   1cb30:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   1cb34:	e0bffe17 	ldw	r2,-8(fp)
   1cb38:	00bfce16 	blt	zero,r2,1ca74 <__alt_mem_Flash_flash_data+0xf401ca74>

    /* If we read any data then return it */
    if (ptr != buffer)
   1cb3c:	e0ffef17 	ldw	r3,-68(fp)
   1cb40:	e0bffd17 	ldw	r2,-12(fp)
   1cb44:	18800126 	beq	r3,r2,1cb4c <altera_avalon_jtag_uart_read+0x12c>
      break;
   1cb48:	00003106 	br	1cc10 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1cb4c:	e0bfff17 	ldw	r2,-4(fp)
   1cb50:	1090000c 	andi	r2,r2,16384
   1cb54:	10000126 	beq	r2,zero,1cb5c <altera_avalon_jtag_uart_read+0x13c>
      break;
   1cb58:	00002d06 	br	1cc10 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   1cb5c:	008000b4 	movhi	r2,2
   1cb60:	1091bf44 	addi	r2,r2,18173
   1cb64:	10800003 	ldbu	r2,0(r2)
   1cb68:	10803fcc 	andi	r2,r2,255
   1cb6c:	10800058 	cmpnei	r2,r2,1
   1cb70:	1000161e 	bne	r2,zero,1cbcc <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1cb74:	e0bffc17 	ldw	r2,-16(fp)
   1cb78:	10800c17 	ldw	r2,48(r2)
   1cb7c:	e0bff615 	stw	r2,-40(fp)
   1cb80:	00800144 	movi	r2,5
   1cb84:	e0bff70d 	sth	r2,-36(fp)
   1cb88:	00bfe0c4 	movi	r2,-125
   1cb8c:	e0bff785 	stb	r2,-34(fp)
   1cb90:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1cb94:	008000b4 	movhi	r2,2
   1cb98:	1091bf44 	addi	r2,r2,18173
   1cb9c:	10800003 	ldbu	r2,0(r2)
   1cba0:	10803fcc 	andi	r2,r2,255
   1cba4:	10001326 	beq	r2,zero,1cbf4 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1cba8:	e17ff70b 	ldhu	r5,-36(fp)
   1cbac:	e1bff783 	ldbu	r6,-34(fp)
   1cbb0:	e0fff80b 	ldhu	r3,-32(fp)
   1cbb4:	e0bffb44 	addi	r2,fp,-19
   1cbb8:	d8800015 	stw	r2,0(sp)
   1cbbc:	e13ff617 	ldw	r4,-40(fp)
   1cbc0:	180f883a 	mov	r7,r3
   1cbc4:	00160b00 	call	160b0 <OSFlagPend>
   1cbc8:	00000a06 	br	1cbf4 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1cbcc:	0001883a 	nop
   1cbd0:	e0bffc17 	ldw	r2,-16(fp)
   1cbd4:	10c00d17 	ldw	r3,52(r2)
   1cbd8:	e0bff117 	ldw	r2,-60(fp)
   1cbdc:	1880051e 	bne	r3,r2,1cbf4 <altera_avalon_jtag_uart_read+0x1d4>
   1cbe0:	e0bffc17 	ldw	r2,-16(fp)
   1cbe4:	10c00917 	ldw	r3,36(r2)
   1cbe8:	e0bffc17 	ldw	r2,-16(fp)
   1cbec:	10800117 	ldw	r2,4(r2)
   1cbf0:	18bff736 	bltu	r3,r2,1cbd0 <__alt_mem_Flash_flash_data+0xf401cbd0>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1cbf4:	e0bffc17 	ldw	r2,-16(fp)
   1cbf8:	10c00d17 	ldw	r3,52(r2)
   1cbfc:	e0bff117 	ldw	r2,-60(fp)
   1cc00:	1880011e 	bne	r3,r2,1cc08 <altera_avalon_jtag_uart_read+0x1e8>
      break;
   1cc04:	00000206 	br	1cc10 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1cc08:	e0bffe17 	ldw	r2,-8(fp)
   1cc0c:	00bf9916 	blt	zero,r2,1ca74 <__alt_mem_Flash_flash_data+0xf401ca74>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   1cc10:	e0bffc17 	ldw	r2,-16(fp)
   1cc14:	10800a17 	ldw	r2,40(r2)
   1cc18:	1009883a 	mov	r4,r2
   1cc1c:	0019cb40 	call	19cb4 <OSSemPost>

  if (ptr != buffer)
   1cc20:	e0ffef17 	ldw	r3,-68(fp)
   1cc24:	e0bffd17 	ldw	r2,-12(fp)
   1cc28:	18801826 	beq	r3,r2,1cc8c <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cc2c:	0005303a 	rdctl	r2,status
   1cc30:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cc34:	e0fff917 	ldw	r3,-28(fp)
   1cc38:	00bfff84 	movi	r2,-2
   1cc3c:	1884703a 	and	r2,r3,r2
   1cc40:	1001703a 	wrctl	status,r2
  
  return context;
   1cc44:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1cc48:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1cc4c:	e0bffc17 	ldw	r2,-16(fp)
   1cc50:	10800817 	ldw	r2,32(r2)
   1cc54:	10c00054 	ori	r3,r2,1
   1cc58:	e0bffc17 	ldw	r2,-16(fp)
   1cc5c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1cc60:	e0bffc17 	ldw	r2,-16(fp)
   1cc64:	10800017 	ldw	r2,0(r2)
   1cc68:	10800104 	addi	r2,r2,4
   1cc6c:	1007883a 	mov	r3,r2
   1cc70:	e0bffc17 	ldw	r2,-16(fp)
   1cc74:	10800817 	ldw	r2,32(r2)
   1cc78:	18800035 	stwio	r2,0(r3)
   1cc7c:	e0bff317 	ldw	r2,-52(fp)
   1cc80:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cc84:	e0bffa17 	ldw	r2,-24(fp)
   1cc88:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1cc8c:	e0ffef17 	ldw	r3,-68(fp)
   1cc90:	e0bffd17 	ldw	r2,-12(fp)
   1cc94:	18800426 	beq	r3,r2,1cca8 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   1cc98:	e0ffef17 	ldw	r3,-68(fp)
   1cc9c:	e0bffd17 	ldw	r2,-12(fp)
   1cca0:	1885c83a 	sub	r2,r3,r2
   1cca4:	00000606 	br	1ccc0 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   1cca8:	e0bfff17 	ldw	r2,-4(fp)
   1ccac:	1090000c 	andi	r2,r2,16384
   1ccb0:	10000226 	beq	r2,zero,1ccbc <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   1ccb4:	00bffd44 	movi	r2,-11
   1ccb8:	00000106 	br	1ccc0 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   1ccbc:	00bffec4 	movi	r2,-5
}
   1ccc0:	e037883a 	mov	sp,fp
   1ccc4:	dfc00117 	ldw	ra,4(sp)
   1ccc8:	df000017 	ldw	fp,0(sp)
   1cccc:	dec00204 	addi	sp,sp,8
   1ccd0:	f800283a 	ret

0001ccd4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1ccd4:	deffed04 	addi	sp,sp,-76
   1ccd8:	dfc01215 	stw	ra,72(sp)
   1ccdc:	df001115 	stw	fp,68(sp)
   1cce0:	df001104 	addi	fp,sp,68
   1cce4:	e13ffc15 	stw	r4,-16(fp)
   1cce8:	e17ffd15 	stw	r5,-12(fp)
   1ccec:	e1bffe15 	stw	r6,-8(fp)
   1ccf0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1ccf4:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1ccf8:	e0bffd17 	ldw	r2,-12(fp)
   1ccfc:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   1cd00:	e0bffc17 	ldw	r2,-16(fp)
   1cd04:	10800b17 	ldw	r2,44(r2)
   1cd08:	e0bff515 	stw	r2,-44(fp)
   1cd0c:	e03ff60d 	sth	zero,-40(fp)
   1cd10:	e0fff60b 	ldhu	r3,-40(fp)
   1cd14:	e0bffbc4 	addi	r2,fp,-17
   1cd18:	e13ff517 	ldw	r4,-44(fp)
   1cd1c:	180b883a 	mov	r5,r3
   1cd20:	100d883a 	mov	r6,r2
   1cd24:	00198e00 	call	198e0 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1cd28:	00003806 	br	1ce0c <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1cd2c:	e0bffc17 	ldw	r2,-16(fp)
   1cd30:	10800f17 	ldw	r2,60(r2)
   1cd34:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   1cd38:	e0bffc17 	ldw	r2,-16(fp)
   1cd3c:	10801017 	ldw	r2,64(r2)
   1cd40:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   1cd44:	e0fff317 	ldw	r3,-52(fp)
   1cd48:	e0bff017 	ldw	r2,-64(fp)
   1cd4c:	1880062e 	bgeu	r3,r2,1cd68 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   1cd50:	e0fff017 	ldw	r3,-64(fp)
   1cd54:	e0bff317 	ldw	r2,-52(fp)
   1cd58:	1885c83a 	sub	r2,r3,r2
   1cd5c:	10bfffc4 	addi	r2,r2,-1
   1cd60:	e0bff115 	stw	r2,-60(fp)
   1cd64:	00000b06 	br	1cd94 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   1cd68:	e0bff017 	ldw	r2,-64(fp)
   1cd6c:	10000526 	beq	r2,zero,1cd84 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1cd70:	00c20004 	movi	r3,2048
   1cd74:	e0bff317 	ldw	r2,-52(fp)
   1cd78:	1885c83a 	sub	r2,r3,r2
   1cd7c:	e0bff115 	stw	r2,-60(fp)
   1cd80:	00000406 	br	1cd94 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1cd84:	00c1ffc4 	movi	r3,2047
   1cd88:	e0bff317 	ldw	r2,-52(fp)
   1cd8c:	1885c83a 	sub	r2,r3,r2
   1cd90:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1cd94:	e0bff117 	ldw	r2,-60(fp)
   1cd98:	1000011e 	bne	r2,zero,1cda0 <altera_avalon_jtag_uart_write+0xcc>
        break;
   1cd9c:	00001d06 	br	1ce14 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   1cda0:	e0fffe17 	ldw	r3,-8(fp)
   1cda4:	e0bff117 	ldw	r2,-60(fp)
   1cda8:	1880022e 	bgeu	r3,r2,1cdb4 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   1cdac:	e0bffe17 	ldw	r2,-8(fp)
   1cdb0:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1cdb4:	e0bff317 	ldw	r2,-52(fp)
   1cdb8:	10821104 	addi	r2,r2,2116
   1cdbc:	e0fffc17 	ldw	r3,-16(fp)
   1cdc0:	1885883a 	add	r2,r3,r2
   1cdc4:	1009883a 	mov	r4,r2
   1cdc8:	e17ffd17 	ldw	r5,-12(fp)
   1cdcc:	e1bff117 	ldw	r6,-60(fp)
   1cdd0:	000aba40 	call	aba4 <memcpy>
      ptr   += n;
   1cdd4:	e0fffd17 	ldw	r3,-12(fp)
   1cdd8:	e0bff117 	ldw	r2,-60(fp)
   1cddc:	1885883a 	add	r2,r3,r2
   1cde0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1cde4:	e0fffe17 	ldw	r3,-8(fp)
   1cde8:	e0bff117 	ldw	r2,-60(fp)
   1cdec:	1885c83a 	sub	r2,r3,r2
   1cdf0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1cdf4:	e0fff317 	ldw	r3,-52(fp)
   1cdf8:	e0bff117 	ldw	r2,-60(fp)
   1cdfc:	1885883a 	add	r2,r3,r2
   1ce00:	10c1ffcc 	andi	r3,r2,2047
   1ce04:	e0bffc17 	ldw	r2,-16(fp)
   1ce08:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1ce0c:	e0bffe17 	ldw	r2,-8(fp)
   1ce10:	00bfc616 	blt	zero,r2,1cd2c <__alt_mem_Flash_flash_data+0xf401cd2c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ce14:	0005303a 	rdctl	r2,status
   1ce18:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ce1c:	e0fff717 	ldw	r3,-36(fp)
   1ce20:	00bfff84 	movi	r2,-2
   1ce24:	1884703a 	and	r2,r3,r2
   1ce28:	1001703a 	wrctl	status,r2
  
  return context;
   1ce2c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1ce30:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1ce34:	e0bffc17 	ldw	r2,-16(fp)
   1ce38:	10800817 	ldw	r2,32(r2)
   1ce3c:	10c00094 	ori	r3,r2,2
   1ce40:	e0bffc17 	ldw	r2,-16(fp)
   1ce44:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1ce48:	e0bffc17 	ldw	r2,-16(fp)
   1ce4c:	10800017 	ldw	r2,0(r2)
   1ce50:	10800104 	addi	r2,r2,4
   1ce54:	1007883a 	mov	r3,r2
   1ce58:	e0bffc17 	ldw	r2,-16(fp)
   1ce5c:	10800817 	ldw	r2,32(r2)
   1ce60:	18800035 	stwio	r2,0(r3)
   1ce64:	e0bff417 	ldw	r2,-48(fp)
   1ce68:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ce6c:	e0bff817 	ldw	r2,-32(fp)
   1ce70:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1ce74:	e0bffe17 	ldw	r2,-8(fp)
   1ce78:	00802e0e 	bge	zero,r2,1cf34 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   1ce7c:	e0bfff17 	ldw	r2,-4(fp)
   1ce80:	1090000c 	andi	r2,r2,16384
   1ce84:	10000126 	beq	r2,zero,1ce8c <altera_avalon_jtag_uart_write+0x1b8>
        break;
   1ce88:	00002c06 	br	1cf3c <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   1ce8c:	008000b4 	movhi	r2,2
   1ce90:	1091bf44 	addi	r2,r2,18173
   1ce94:	10800003 	ldbu	r2,0(r2)
   1ce98:	10803fcc 	andi	r2,r2,255
   1ce9c:	10800058 	cmpnei	r2,r2,1
   1cea0:	1000161e 	bne	r2,zero,1cefc <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1cea4:	e0bffc17 	ldw	r2,-16(fp)
   1cea8:	10800c17 	ldw	r2,48(r2)
   1ceac:	e0bff915 	stw	r2,-28(fp)
   1ceb0:	00800184 	movi	r2,6
   1ceb4:	e0bffa0d 	sth	r2,-24(fp)
   1ceb8:	00bfe0c4 	movi	r2,-125
   1cebc:	e0bffa85 	stb	r2,-22(fp)
   1cec0:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1cec4:	008000b4 	movhi	r2,2
   1cec8:	1091bf44 	addi	r2,r2,18173
   1cecc:	10800003 	ldbu	r2,0(r2)
   1ced0:	10803fcc 	andi	r2,r2,255
   1ced4:	10001326 	beq	r2,zero,1cf24 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1ced8:	e17ffa0b 	ldhu	r5,-24(fp)
   1cedc:	e1bffa83 	ldbu	r6,-22(fp)
   1cee0:	e0fffb0b 	ldhu	r3,-20(fp)
   1cee4:	e0bffb84 	addi	r2,fp,-18
   1cee8:	d8800015 	stw	r2,0(sp)
   1ceec:	e13ff917 	ldw	r4,-28(fp)
   1cef0:	180f883a 	mov	r7,r3
   1cef4:	00160b00 	call	160b0 <OSFlagPend>
   1cef8:	00000a06 	br	1cf24 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1cefc:	0001883a 	nop
   1cf00:	e0bffc17 	ldw	r2,-16(fp)
   1cf04:	10c01017 	ldw	r3,64(r2)
   1cf08:	e0bff017 	ldw	r2,-64(fp)
   1cf0c:	1880051e 	bne	r3,r2,1cf24 <altera_avalon_jtag_uart_write+0x250>
   1cf10:	e0bffc17 	ldw	r2,-16(fp)
   1cf14:	10c00917 	ldw	r3,36(r2)
   1cf18:	e0bffc17 	ldw	r2,-16(fp)
   1cf1c:	10800117 	ldw	r2,4(r2)
   1cf20:	18bff736 	bltu	r3,r2,1cf00 <__alt_mem_Flash_flash_data+0xf401cf00>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1cf24:	e0bffc17 	ldw	r2,-16(fp)
   1cf28:	10800917 	ldw	r2,36(r2)
   1cf2c:	10000126 	beq	r2,zero,1cf34 <altera_avalon_jtag_uart_write+0x260>
         break;
   1cf30:	00000206 	br	1cf3c <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   1cf34:	e0bffe17 	ldw	r2,-8(fp)
   1cf38:	00bf7b16 	blt	zero,r2,1cd28 <__alt_mem_Flash_flash_data+0xf401cd28>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   1cf3c:	e0bffc17 	ldw	r2,-16(fp)
   1cf40:	10800b17 	ldw	r2,44(r2)
   1cf44:	1009883a 	mov	r4,r2
   1cf48:	0019cb40 	call	19cb4 <OSSemPost>

  if (ptr != start)
   1cf4c:	e0fffd17 	ldw	r3,-12(fp)
   1cf50:	e0bff217 	ldw	r2,-56(fp)
   1cf54:	18800426 	beq	r3,r2,1cf68 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   1cf58:	e0fffd17 	ldw	r3,-12(fp)
   1cf5c:	e0bff217 	ldw	r2,-56(fp)
   1cf60:	1885c83a 	sub	r2,r3,r2
   1cf64:	00000606 	br	1cf80 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   1cf68:	e0bfff17 	ldw	r2,-4(fp)
   1cf6c:	1090000c 	andi	r2,r2,16384
   1cf70:	10000226 	beq	r2,zero,1cf7c <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   1cf74:	00bffd44 	movi	r2,-11
   1cf78:	00000106 	br	1cf80 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1cf7c:	00bffec4 	movi	r2,-5
}
   1cf80:	e037883a 	mov	sp,fp
   1cf84:	dfc00117 	ldw	ra,4(sp)
   1cf88:	df000017 	ldw	fp,0(sp)
   1cf8c:	dec00204 	addi	sp,sp,8
   1cf90:	f800283a 	ret

0001cf94 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1cf94:	defff904 	addi	sp,sp,-28
   1cf98:	dfc00615 	stw	ra,24(sp)
   1cf9c:	df000515 	stw	fp,20(sp)
   1cfa0:	df000504 	addi	fp,sp,20
   1cfa4:	e13ffe15 	stw	r4,-8(fp)
   1cfa8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1cfac:	0007883a 	mov	r3,zero
   1cfb0:	e0bffe17 	ldw	r2,-8(fp)
   1cfb4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1cfb8:	e0bffe17 	ldw	r2,-8(fp)
   1cfbc:	10800104 	addi	r2,r2,4
   1cfc0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cfc4:	0005303a 	rdctl	r2,status
   1cfc8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cfcc:	e0fffc17 	ldw	r3,-16(fp)
   1cfd0:	00bfff84 	movi	r2,-2
   1cfd4:	1884703a 	and	r2,r3,r2
   1cfd8:	1001703a 	wrctl	status,r2
  
  return context;
   1cfdc:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1cfe0:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   1cfe4:	001f0100 	call	1f010 <alt_tick>
   1cfe8:	e0bffb17 	ldw	r2,-20(fp)
   1cfec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cff0:	e0bffd17 	ldw	r2,-12(fp)
   1cff4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1cff8:	e037883a 	mov	sp,fp
   1cffc:	dfc00117 	ldw	ra,4(sp)
   1d000:	df000017 	ldw	fp,0(sp)
   1d004:	dec00204 	addi	sp,sp,8
   1d008:	f800283a 	ret

0001d00c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1d00c:	defff904 	addi	sp,sp,-28
   1d010:	dfc00615 	stw	ra,24(sp)
   1d014:	df000515 	stw	fp,20(sp)
   1d018:	df000504 	addi	fp,sp,20
   1d01c:	e13ffc15 	stw	r4,-16(fp)
   1d020:	e17ffd15 	stw	r5,-12(fp)
   1d024:	e1bffe15 	stw	r6,-8(fp)
   1d028:	e1ffff15 	stw	r7,-4(fp)
   1d02c:	e0bfff17 	ldw	r2,-4(fp)
   1d030:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1d034:	008000b4 	movhi	r2,2
   1d038:	1091d404 	addi	r2,r2,18256
   1d03c:	10800017 	ldw	r2,0(r2)
   1d040:	1000041e 	bne	r2,zero,1d054 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   1d044:	008000b4 	movhi	r2,2
   1d048:	1091d404 	addi	r2,r2,18256
   1d04c:	e0fffb17 	ldw	r3,-20(fp)
   1d050:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1d054:	e0bffc17 	ldw	r2,-16(fp)
   1d058:	10800104 	addi	r2,r2,4
   1d05c:	00c001c4 	movi	r3,7
   1d060:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1d064:	e13ffe17 	ldw	r4,-8(fp)
   1d068:	e17ffc17 	ldw	r5,-16(fp)
   1d06c:	018000b4 	movhi	r6,2
   1d070:	31b3e504 	addi	r6,r6,-12396
   1d074:	001eb540 	call	1eb54 <alt_irq_register>
#endif  
}
   1d078:	e037883a 	mov	sp,fp
   1d07c:	dfc00117 	ldw	ra,4(sp)
   1d080:	df000017 	ldw	fp,0(sp)
   1d084:	dec00204 	addi	sp,sp,8
   1d088:	f800283a 	ret

0001d08c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   1d08c:	defffc04 	addi	sp,sp,-16
   1d090:	df000315 	stw	fp,12(sp)
   1d094:	df000304 	addi	fp,sp,12
   1d098:	e13ffe15 	stw	r4,-8(fp)
   1d09c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   1d0a0:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   1d0a4:	e0bfff17 	ldw	r2,-4(fp)
   1d0a8:	1000061e 	bne	r2,zero,1d0c4 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   1d0ac:	e0bffe17 	ldw	r2,-8(fp)
   1d0b0:	1007883a 	mov	r3,r2
   1d0b4:	e0bffd03 	ldbu	r2,-12(fp)
   1d0b8:	1884b03a 	or	r2,r3,r2
   1d0bc:	e0bffd05 	stb	r2,-12(fp)
   1d0c0:	00000806 	br	1d0e4 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   1d0c4:	e0bffe17 	ldw	r2,-8(fp)
   1d0c8:	1007883a 	mov	r3,r2
   1d0cc:	e0bffd03 	ldbu	r2,-12(fp)
   1d0d0:	1884b03a 	or	r2,r3,r2
   1d0d4:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   1d0d8:	e0bffd03 	ldbu	r2,-12(fp)
   1d0dc:	10801014 	ori	r2,r2,64
   1d0e0:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   1d0e4:	e0fffd03 	ldbu	r3,-12(fp)
   1d0e8:	00bfe004 	movi	r2,-128
   1d0ec:	1884b03a 	or	r2,r3,r2
}
   1d0f0:	e037883a 	mov	sp,fp
   1d0f4:	df000017 	ldw	fp,0(sp)
   1d0f8:	dec00104 	addi	sp,sp,4
   1d0fc:	f800283a 	ret

0001d100 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   1d100:	defffd04 	addi	sp,sp,-12
   1d104:	df000215 	stw	fp,8(sp)
   1d108:	df000204 	addi	fp,sp,8
   1d10c:	e13ffe15 	stw	r4,-8(fp)
   1d110:	2805883a 	mov	r2,r5
   1d114:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   1d118:	e0bffe17 	ldw	r2,-8(fp)
   1d11c:	10800a17 	ldw	r2,40(r2)
   1d120:	1007883a 	mov	r3,r2
   1d124:	e0bfff03 	ldbu	r2,-4(fp)
   1d128:	18800025 	stbio	r2,0(r3)
}
   1d12c:	e037883a 	mov	sp,fp
   1d130:	df000017 	ldw	fp,0(sp)
   1d134:	dec00104 	addi	sp,sp,4
   1d138:	f800283a 	ret

0001d13c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   1d13c:	defffe04 	addi	sp,sp,-8
   1d140:	df000115 	stw	fp,4(sp)
   1d144:	df000104 	addi	fp,sp,4
   1d148:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   1d14c:	e0bfff17 	ldw	r2,-4(fp)
   1d150:	10800a17 	ldw	r2,40(r2)
   1d154:	1007883a 	mov	r3,r2
   1d158:	00800044 	movi	r2,1
   1d15c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   1d160:	e037883a 	mov	sp,fp
   1d164:	df000017 	ldw	fp,0(sp)
   1d168:	dec00104 	addi	sp,sp,4
   1d16c:	f800283a 	ret

0001d170 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   1d170:	defffc04 	addi	sp,sp,-16
   1d174:	dfc00315 	stw	ra,12(sp)
   1d178:	df000215 	stw	fp,8(sp)
   1d17c:	df000204 	addi	fp,sp,8
   1d180:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1d184:	e13fff17 	ldw	r4,-4(fp)
   1d188:	014000b4 	movhi	r5,2
   1d18c:	2949a104 	addi	r5,r5,9860
   1d190:	001e95c0 	call	1e95c <alt_find_dev>
   1d194:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1d198:	e0bffe17 	ldw	r2,-8(fp)
}
   1d19c:	e037883a 	mov	sp,fp
   1d1a0:	dfc00117 	ldw	ra,4(sp)
   1d1a4:	df000017 	ldw	fp,0(sp)
   1d1a8:	dec00204 	addi	sp,sp,8
   1d1ac:	f800283a 	ret

0001d1b0 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   1d1b0:	defffb04 	addi	sp,sp,-20
   1d1b4:	df000415 	stw	fp,16(sp)
   1d1b8:	df000404 	addi	fp,sp,16
   1d1bc:	e13ffd15 	stw	r4,-12(fp)
   1d1c0:	e17ffe15 	stw	r5,-8(fp)
   1d1c4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   1d1c8:	e03ffc15 	stw	zero,-16(fp)
   1d1cc:	00000f06 	br	1d20c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   1d1d0:	e0bffd17 	ldw	r2,-12(fp)
   1d1d4:	10800a17 	ldw	r2,40(r2)
   1d1d8:	10800044 	addi	r2,r2,1
   1d1dc:	1009883a 	mov	r4,r2
   1d1e0:	e0fffe17 	ldw	r3,-8(fp)
   1d1e4:	e0bffc17 	ldw	r2,-16(fp)
   1d1e8:	1885883a 	add	r2,r3,r2
   1d1ec:	10800003 	ldbu	r2,0(r2)
   1d1f0:	10803fcc 	andi	r2,r2,255
   1d1f4:	1080201c 	xori	r2,r2,128
   1d1f8:	10bfe004 	addi	r2,r2,-128
   1d1fc:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   1d200:	e0bffc17 	ldw	r2,-16(fp)
   1d204:	10800044 	addi	r2,r2,1
   1d208:	e0bffc15 	stw	r2,-16(fp)
   1d20c:	e0fffc17 	ldw	r3,-16(fp)
   1d210:	e0bfff17 	ldw	r2,-4(fp)
   1d214:	18bfee36 	bltu	r3,r2,1d1d0 <__alt_mem_Flash_flash_data+0xf401d1d0>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   1d218:	e037883a 	mov	sp,fp
   1d21c:	df000017 	ldw	fp,0(sp)
   1d220:	dec00104 	addi	sp,sp,4
   1d224:	f800283a 	ret

0001d228 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   1d228:	defffd04 	addi	sp,sp,-12
   1d22c:	df000215 	stw	fp,8(sp)
   1d230:	df000204 	addi	fp,sp,8
   1d234:	e13ffe15 	stw	r4,-8(fp)
   1d238:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   1d23c:	00000d06 	br	1d274 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   1d240:	e0bffe17 	ldw	r2,-8(fp)
   1d244:	10800a17 	ldw	r2,40(r2)
   1d248:	10800044 	addi	r2,r2,1
   1d24c:	1007883a 	mov	r3,r2
   1d250:	e0bfff17 	ldw	r2,-4(fp)
   1d254:	10800003 	ldbu	r2,0(r2)
   1d258:	10803fcc 	andi	r2,r2,255
   1d25c:	1080201c 	xori	r2,r2,128
   1d260:	10bfe004 	addi	r2,r2,-128
   1d264:	18800025 	stbio	r2,0(r3)
		++ptr;
   1d268:	e0bfff17 	ldw	r2,-4(fp)
   1d26c:	10800044 	addi	r2,r2,1
   1d270:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   1d274:	e0bfff17 	ldw	r2,-4(fp)
   1d278:	10800003 	ldbu	r2,0(r2)
   1d27c:	10803fcc 	andi	r2,r2,255
   1d280:	1080201c 	xori	r2,r2,128
   1d284:	10bfe004 	addi	r2,r2,-128
   1d288:	103fed1e 	bne	r2,zero,1d240 <__alt_mem_Flash_flash_data+0xf401d240>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   1d28c:	e037883a 	mov	sp,fp
   1d290:	df000017 	ldw	fp,0(sp)
   1d294:	dec00104 	addi	sp,sp,4
   1d298:	f800283a 	ret

0001d29c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   1d29c:	defffb04 	addi	sp,sp,-20
   1d2a0:	dfc00415 	stw	ra,16(sp)
   1d2a4:	df000315 	stw	fp,12(sp)
   1d2a8:	df000304 	addi	fp,sp,12
   1d2ac:	e13ffd15 	stw	r4,-12(fp)
   1d2b0:	e17ffe15 	stw	r5,-8(fp)
   1d2b4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   1d2b8:	e0bffd17 	ldw	r2,-12(fp)
   1d2bc:	10c00017 	ldw	r3,0(r2)
   1d2c0:	e0bfff17 	ldw	r2,-4(fp)
   1d2c4:	1809883a 	mov	r4,r3
   1d2c8:	e17ffe17 	ldw	r5,-8(fp)
   1d2cc:	100d883a 	mov	r6,r2
   1d2d0:	001d1b00 	call	1d1b0 <alt_up_character_lcd_write>
	return 0;
   1d2d4:	0005883a 	mov	r2,zero
}
   1d2d8:	e037883a 	mov	sp,fp
   1d2dc:	dfc00117 	ldw	ra,4(sp)
   1d2e0:	df000017 	ldw	fp,0(sp)
   1d2e4:	dec00204 	addi	sp,sp,8
   1d2e8:	f800283a 	ret

0001d2ec <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   1d2ec:	defffa04 	addi	sp,sp,-24
   1d2f0:	dfc00515 	stw	ra,20(sp)
   1d2f4:	df000415 	stw	fp,16(sp)
   1d2f8:	df000404 	addi	fp,sp,16
   1d2fc:	e13ffd15 	stw	r4,-12(fp)
   1d300:	e17ffe15 	stw	r5,-8(fp)
   1d304:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   1d308:	e0bffe17 	ldw	r2,-8(fp)
   1d30c:	10800a28 	cmpgeui	r2,r2,40
   1d310:	1000031e 	bne	r2,zero,1d320 <alt_up_character_lcd_set_cursor_pos+0x34>
   1d314:	e0bfff17 	ldw	r2,-4(fp)
   1d318:	108000b0 	cmpltui	r2,r2,2
   1d31c:	1000021e 	bne	r2,zero,1d328 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   1d320:	00bfffc4 	movi	r2,-1
   1d324:	00000906 	br	1d34c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1d328:	e13ffe17 	ldw	r4,-8(fp)
   1d32c:	e17fff17 	ldw	r5,-4(fp)
   1d330:	001d08c0 	call	1d08c <get_DDRAM_addr>
   1d334:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   1d338:	e0bffc03 	ldbu	r2,-16(fp)
   1d33c:	e13ffd17 	ldw	r4,-12(fp)
   1d340:	100b883a 	mov	r5,r2
   1d344:	001d1000 	call	1d100 <alt_up_character_lcd_send_cmd>
	return 0;
   1d348:	0005883a 	mov	r2,zero
}
   1d34c:	e037883a 	mov	sp,fp
   1d350:	dfc00117 	ldw	ra,4(sp)
   1d354:	df000017 	ldw	fp,0(sp)
   1d358:	dec00204 	addi	sp,sp,8
   1d35c:	f800283a 	ret

0001d360 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1d360:	defffb04 	addi	sp,sp,-20
   1d364:	dfc00415 	stw	ra,16(sp)
   1d368:	df000315 	stw	fp,12(sp)
   1d36c:	df000304 	addi	fp,sp,12
   1d370:	e13ffe15 	stw	r4,-8(fp)
   1d374:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1d378:	e0bfff17 	ldw	r2,-4(fp)
   1d37c:	1000011e 	bne	r2,zero,1d384 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   1d380:	00001406 	br	1d3d4 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1d384:	e0bfff17 	ldw	r2,-4(fp)
   1d388:	0080020e 	bge	zero,r2,1d394 <alt_up_character_lcd_shift_cursor+0x34>
   1d38c:	00800504 	movi	r2,20
   1d390:	00000106 	br	1d398 <alt_up_character_lcd_shift_cursor+0x38>
   1d394:	00800404 	movi	r2,16
   1d398:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1d39c:	e0bfff17 	ldw	r2,-4(fp)
   1d3a0:	1000010e 	bge	r2,zero,1d3a8 <alt_up_character_lcd_shift_cursor+0x48>
   1d3a4:	0085c83a 	sub	r2,zero,r2
   1d3a8:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1d3ac:	00000406 	br	1d3c0 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1d3b0:	e0bffd43 	ldbu	r2,-11(fp)
   1d3b4:	e13ffe17 	ldw	r4,-8(fp)
   1d3b8:	100b883a 	mov	r5,r2
   1d3bc:	001d1000 	call	1d100 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1d3c0:	e0bffd03 	ldbu	r2,-12(fp)
   1d3c4:	10ffffc4 	addi	r3,r2,-1
   1d3c8:	e0fffd05 	stb	r3,-12(fp)
   1d3cc:	10803fcc 	andi	r2,r2,255
   1d3d0:	103ff71e 	bne	r2,zero,1d3b0 <__alt_mem_Flash_flash_data+0xf401d3b0>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1d3d4:	e037883a 	mov	sp,fp
   1d3d8:	dfc00117 	ldw	ra,4(sp)
   1d3dc:	df000017 	ldw	fp,0(sp)
   1d3e0:	dec00204 	addi	sp,sp,8
   1d3e4:	f800283a 	ret

0001d3e8 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1d3e8:	defffb04 	addi	sp,sp,-20
   1d3ec:	dfc00415 	stw	ra,16(sp)
   1d3f0:	df000315 	stw	fp,12(sp)
   1d3f4:	df000304 	addi	fp,sp,12
   1d3f8:	e13ffe15 	stw	r4,-8(fp)
   1d3fc:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1d400:	e0bfff17 	ldw	r2,-4(fp)
   1d404:	1000011e 	bne	r2,zero,1d40c <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   1d408:	00001406 	br	1d45c <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1d40c:	e0bfff17 	ldw	r2,-4(fp)
   1d410:	0080020e 	bge	zero,r2,1d41c <alt_up_character_lcd_shift_display+0x34>
   1d414:	00800704 	movi	r2,28
   1d418:	00000106 	br	1d420 <alt_up_character_lcd_shift_display+0x38>
   1d41c:	00800604 	movi	r2,24
   1d420:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1d424:	e0bfff17 	ldw	r2,-4(fp)
   1d428:	1000010e 	bge	r2,zero,1d430 <alt_up_character_lcd_shift_display+0x48>
   1d42c:	0085c83a 	sub	r2,zero,r2
   1d430:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1d434:	00000406 	br	1d448 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1d438:	e0bffd43 	ldbu	r2,-11(fp)
   1d43c:	e13ffe17 	ldw	r4,-8(fp)
   1d440:	100b883a 	mov	r5,r2
   1d444:	001d1000 	call	1d100 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1d448:	e0bffd03 	ldbu	r2,-12(fp)
   1d44c:	10ffffc4 	addi	r3,r2,-1
   1d450:	e0fffd05 	stb	r3,-12(fp)
   1d454:	10803fcc 	andi	r2,r2,255
   1d458:	103ff71e 	bne	r2,zero,1d438 <__alt_mem_Flash_flash_data+0xf401d438>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1d45c:	e037883a 	mov	sp,fp
   1d460:	dfc00117 	ldw	ra,4(sp)
   1d464:	df000017 	ldw	fp,0(sp)
   1d468:	dec00204 	addi	sp,sp,8
   1d46c:	f800283a 	ret

0001d470 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   1d470:	defffa04 	addi	sp,sp,-24
   1d474:	dfc00515 	stw	ra,20(sp)
   1d478:	df000415 	stw	fp,16(sp)
   1d47c:	df000404 	addi	fp,sp,16
   1d480:	e13ffd15 	stw	r4,-12(fp)
   1d484:	e17ffe15 	stw	r5,-8(fp)
   1d488:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   1d48c:	e0bffe17 	ldw	r2,-8(fp)
   1d490:	10800a28 	cmpgeui	r2,r2,40
   1d494:	1000031e 	bne	r2,zero,1d4a4 <alt_up_character_lcd_erase_pos+0x34>
   1d498:	e0bfff17 	ldw	r2,-4(fp)
   1d49c:	108000b0 	cmpltui	r2,r2,2
   1d4a0:	1000021e 	bne	r2,zero,1d4ac <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   1d4a4:	00bfffc4 	movi	r2,-1
   1d4a8:	00000f06 	br	1d4e8 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1d4ac:	e13ffe17 	ldw	r4,-8(fp)
   1d4b0:	e17fff17 	ldw	r5,-4(fp)
   1d4b4:	001d08c0 	call	1d08c <get_DDRAM_addr>
   1d4b8:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   1d4bc:	e0bffc03 	ldbu	r2,-16(fp)
   1d4c0:	e13ffd17 	ldw	r4,-12(fp)
   1d4c4:	100b883a 	mov	r5,r2
   1d4c8:	001d1000 	call	1d100 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   1d4cc:	e0bffd17 	ldw	r2,-12(fp)
   1d4d0:	10800a17 	ldw	r2,40(r2)
   1d4d4:	10800044 	addi	r2,r2,1
   1d4d8:	1007883a 	mov	r3,r2
   1d4dc:	00800084 	movi	r2,2
   1d4e0:	18800025 	stbio	r2,0(r3)
	return 0;
   1d4e4:	0005883a 	mov	r2,zero
}
   1d4e8:	e037883a 	mov	sp,fp
   1d4ec:	dfc00117 	ldw	ra,4(sp)
   1d4f0:	df000017 	ldw	fp,0(sp)
   1d4f4:	dec00204 	addi	sp,sp,8
   1d4f8:	f800283a 	ret

0001d4fc <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   1d4fc:	defffd04 	addi	sp,sp,-12
   1d500:	dfc00215 	stw	ra,8(sp)
   1d504:	df000115 	stw	fp,4(sp)
   1d508:	df000104 	addi	fp,sp,4
   1d50c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   1d510:	e13fff17 	ldw	r4,-4(fp)
   1d514:	01400304 	movi	r5,12
   1d518:	001d1000 	call	1d100 <alt_up_character_lcd_send_cmd>
}
   1d51c:	e037883a 	mov	sp,fp
   1d520:	dfc00117 	ldw	ra,4(sp)
   1d524:	df000017 	ldw	fp,0(sp)
   1d528:	dec00204 	addi	sp,sp,8
   1d52c:	f800283a 	ret

0001d530 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   1d530:	defffd04 	addi	sp,sp,-12
   1d534:	dfc00215 	stw	ra,8(sp)
   1d538:	df000115 	stw	fp,4(sp)
   1d53c:	df000104 	addi	fp,sp,4
   1d540:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1d544:	e13fff17 	ldw	r4,-4(fp)
   1d548:	014003c4 	movi	r5,15
   1d54c:	001d1000 	call	1d100 <alt_up_character_lcd_send_cmd>
}
   1d550:	e037883a 	mov	sp,fp
   1d554:	dfc00117 	ldw	ra,4(sp)
   1d558:	df000017 	ldw	fp,0(sp)
   1d55c:	dec00204 	addi	sp,sp,8
   1d560:	f800283a 	ret

0001d564 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1d564:	defffd04 	addi	sp,sp,-12
   1d568:	df000215 	stw	fp,8(sp)
   1d56c:	df000204 	addi	fp,sp,8
   1d570:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1d574:	e0bfff17 	ldw	r2,-4(fp)
   1d578:	10800a17 	ldw	r2,40(r2)
   1d57c:	10800104 	addi	r2,r2,4
   1d580:	10800037 	ldwio	r2,0(r2)
   1d584:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   1d588:	e0bffe17 	ldw	r2,-8(fp)
   1d58c:	10800054 	ori	r2,r2,1
   1d590:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1d594:	e0bfff17 	ldw	r2,-4(fp)
   1d598:	10800a17 	ldw	r2,40(r2)
   1d59c:	10800104 	addi	r2,r2,4
   1d5a0:	1007883a 	mov	r3,r2
   1d5a4:	e0bffe17 	ldw	r2,-8(fp)
   1d5a8:	18800035 	stwio	r2,0(r3)
}
   1d5ac:	e037883a 	mov	sp,fp
   1d5b0:	df000017 	ldw	fp,0(sp)
   1d5b4:	dec00104 	addi	sp,sp,4
   1d5b8:	f800283a 	ret

0001d5bc <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   1d5bc:	defffd04 	addi	sp,sp,-12
   1d5c0:	df000215 	stw	fp,8(sp)
   1d5c4:	df000204 	addi	fp,sp,8
   1d5c8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1d5cc:	e0bfff17 	ldw	r2,-4(fp)
   1d5d0:	10800a17 	ldw	r2,40(r2)
   1d5d4:	10800104 	addi	r2,r2,4
   1d5d8:	10800037 	ldwio	r2,0(r2)
   1d5dc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   1d5e0:	e0fffe17 	ldw	r3,-8(fp)
   1d5e4:	00bfff84 	movi	r2,-2
   1d5e8:	1884703a 	and	r2,r3,r2
   1d5ec:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1d5f0:	e0bfff17 	ldw	r2,-4(fp)
   1d5f4:	10800a17 	ldw	r2,40(r2)
   1d5f8:	10800104 	addi	r2,r2,4
   1d5fc:	1007883a 	mov	r3,r2
   1d600:	e0bffe17 	ldw	r2,-8(fp)
   1d604:	18800035 	stwio	r2,0(r3)
}
   1d608:	e037883a 	mov	sp,fp
   1d60c:	df000017 	ldw	fp,0(sp)
   1d610:	dec00104 	addi	sp,sp,4
   1d614:	f800283a 	ret

0001d618 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   1d618:	defffd04 	addi	sp,sp,-12
   1d61c:	df000215 	stw	fp,8(sp)
   1d620:	df000204 	addi	fp,sp,8
   1d624:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1d628:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   1d62c:	e0bfff17 	ldw	r2,-4(fp)
   1d630:	10800a17 	ldw	r2,40(r2)
   1d634:	10800084 	addi	r2,r2,2
   1d638:	1080002b 	ldhuio	r2,0(r2)
   1d63c:	10bfffcc 	andi	r2,r2,65535
   1d640:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1d644:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1d648:	e037883a 	mov	sp,fp
   1d64c:	df000017 	ldw	fp,0(sp)
   1d650:	dec00104 	addi	sp,sp,4
   1d654:	f800283a 	ret

0001d658 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1d658:	defffd04 	addi	sp,sp,-12
   1d65c:	df000215 	stw	fp,8(sp)
   1d660:	df000204 	addi	fp,sp,8
   1d664:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1d668:	e0bfff17 	ldw	r2,-4(fp)
   1d66c:	10800a17 	ldw	r2,40(r2)
   1d670:	10800104 	addi	r2,r2,4
   1d674:	10800037 	ldwio	r2,0(r2)
   1d678:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   1d67c:	e0bffe17 	ldw	r2,-8(fp)
   1d680:	1004d43a 	srli	r2,r2,16
}
   1d684:	e037883a 	mov	sp,fp
   1d688:	df000017 	ldw	fp,0(sp)
   1d68c:	dec00104 	addi	sp,sp,4
   1d690:	f800283a 	ret

0001d694 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1d694:	defffd04 	addi	sp,sp,-12
   1d698:	df000215 	stw	fp,8(sp)
   1d69c:	df000204 	addi	fp,sp,8
   1d6a0:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1d6a4:	e0bfff17 	ldw	r2,-4(fp)
   1d6a8:	1080800c 	andi	r2,r2,512
   1d6ac:	1004d27a 	srli	r2,r2,9
   1d6b0:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1d6b4:	e0bffe17 	ldw	r2,-8(fp)
   1d6b8:	10000226 	beq	r2,zero,1d6c4 <alt_up_irda_check_parity+0x30>
   1d6bc:	00bfffc4 	movi	r2,-1
   1d6c0:	00000106 	br	1d6c8 <alt_up_irda_check_parity+0x34>
   1d6c4:	0005883a 	mov	r2,zero
}
   1d6c8:	e037883a 	mov	sp,fp
   1d6cc:	df000017 	ldw	fp,0(sp)
   1d6d0:	dec00104 	addi	sp,sp,4
   1d6d4:	f800283a 	ret

0001d6d8 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   1d6d8:	defffd04 	addi	sp,sp,-12
   1d6dc:	df000215 	stw	fp,8(sp)
   1d6e0:	df000204 	addi	fp,sp,8
   1d6e4:	e13ffe15 	stw	r4,-8(fp)
   1d6e8:	2805883a 	mov	r2,r5
   1d6ec:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   1d6f0:	e0bffe17 	ldw	r2,-8(fp)
   1d6f4:	10800a17 	ldw	r2,40(r2)
   1d6f8:	1007883a 	mov	r3,r2
   1d6fc:	e0bfff03 	ldbu	r2,-4(fp)
   1d700:	18800035 	stwio	r2,0(r3)
	return 0;
   1d704:	0005883a 	mov	r2,zero
}
   1d708:	e037883a 	mov	sp,fp
   1d70c:	df000017 	ldw	fp,0(sp)
   1d710:	dec00104 	addi	sp,sp,4
   1d714:	f800283a 	ret

0001d718 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1d718:	defffa04 	addi	sp,sp,-24
   1d71c:	dfc00515 	stw	ra,20(sp)
   1d720:	df000415 	stw	fp,16(sp)
   1d724:	df000404 	addi	fp,sp,16
   1d728:	e13ffd15 	stw	r4,-12(fp)
   1d72c:	e17ffe15 	stw	r5,-8(fp)
   1d730:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1d734:	e0bffd17 	ldw	r2,-12(fp)
   1d738:	10800a17 	ldw	r2,40(r2)
   1d73c:	10800037 	ldwio	r2,0(r2)
   1d740:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1d744:	e0bffc17 	ldw	r2,-16(fp)
   1d748:	1007883a 	mov	r3,r2
   1d74c:	e0bffe17 	ldw	r2,-8(fp)
   1d750:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   1d754:	e13ffc17 	ldw	r4,-16(fp)
   1d758:	001d6940 	call	1d694 <alt_up_irda_check_parity>
   1d75c:	1007883a 	mov	r3,r2
   1d760:	e0bfff17 	ldw	r2,-4(fp)
   1d764:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1d768:	e0bffc17 	ldw	r2,-16(fp)
   1d76c:	10a0000c 	andi	r2,r2,32768
   1d770:	1004d3fa 	srli	r2,r2,15
   1d774:	10bfffc4 	addi	r2,r2,-1
}
   1d778:	e037883a 	mov	sp,fp
   1d77c:	dfc00117 	ldw	ra,4(sp)
   1d780:	df000017 	ldw	fp,0(sp)
   1d784:	dec00204 	addi	sp,sp,8
   1d788:	f800283a 	ret

0001d78c <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   1d78c:	defff804 	addi	sp,sp,-32
   1d790:	dfc00715 	stw	ra,28(sp)
   1d794:	df000615 	stw	fp,24(sp)
   1d798:	df000604 	addi	fp,sp,24
   1d79c:	e13ffd15 	stw	r4,-12(fp)
   1d7a0:	e17ffe15 	stw	r5,-8(fp)
   1d7a4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1d7a8:	e0bffd17 	ldw	r2,-12(fp)
   1d7ac:	10800017 	ldw	r2,0(r2)
   1d7b0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1d7b4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1d7b8:	00000e06 	br	1d7f4 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   1d7bc:	e0bffe17 	ldw	r2,-8(fp)
   1d7c0:	10c00044 	addi	r3,r2,1
   1d7c4:	e0fffe15 	stw	r3,-8(fp)
   1d7c8:	e0fffc04 	addi	r3,fp,-16
   1d7cc:	e13ffb17 	ldw	r4,-20(fp)
   1d7d0:	100b883a 	mov	r5,r2
   1d7d4:	180d883a 	mov	r6,r3
   1d7d8:	001d7180 	call	1d718 <alt_up_irda_read_data>
   1d7dc:	1000041e 	bne	r2,zero,1d7f0 <alt_up_irda_read_fd+0x64>
			count++;
   1d7e0:	e0bffa17 	ldw	r2,-24(fp)
   1d7e4:	10800044 	addi	r2,r2,1
   1d7e8:	e0bffa15 	stw	r2,-24(fp)
   1d7ec:	00000106 	br	1d7f4 <alt_up_irda_read_fd+0x68>
		else
			break;
   1d7f0:	00000406 	br	1d804 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1d7f4:	e0bfff17 	ldw	r2,-4(fp)
   1d7f8:	10ffffc4 	addi	r3,r2,-1
   1d7fc:	e0ffff15 	stw	r3,-4(fp)
   1d800:	103fee1e 	bne	r2,zero,1d7bc <__alt_mem_Flash_flash_data+0xf401d7bc>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1d804:	e0bffa17 	ldw	r2,-24(fp)
}
   1d808:	e037883a 	mov	sp,fp
   1d80c:	dfc00117 	ldw	ra,4(sp)
   1d810:	df000017 	ldw	fp,0(sp)
   1d814:	dec00204 	addi	sp,sp,8
   1d818:	f800283a 	ret

0001d81c <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1d81c:	defff904 	addi	sp,sp,-28
   1d820:	dfc00615 	stw	ra,24(sp)
   1d824:	df000515 	stw	fp,20(sp)
   1d828:	df000504 	addi	fp,sp,20
   1d82c:	e13ffd15 	stw	r4,-12(fp)
   1d830:	e17ffe15 	stw	r5,-8(fp)
   1d834:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1d838:	e0bffd17 	ldw	r2,-12(fp)
   1d83c:	10800017 	ldw	r2,0(r2)
   1d840:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1d844:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1d848:	00000e06 	br	1d884 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   1d84c:	e0bffe17 	ldw	r2,-8(fp)
   1d850:	10c00044 	addi	r3,r2,1
   1d854:	e0fffe15 	stw	r3,-8(fp)
   1d858:	10800003 	ldbu	r2,0(r2)
   1d85c:	10803fcc 	andi	r2,r2,255
   1d860:	e13ffc17 	ldw	r4,-16(fp)
   1d864:	100b883a 	mov	r5,r2
   1d868:	001d6d80 	call	1d6d8 <alt_up_irda_write_data>
   1d86c:	1000041e 	bne	r2,zero,1d880 <alt_up_irda_write_fd+0x64>
			count++;
   1d870:	e0bffb17 	ldw	r2,-20(fp)
   1d874:	10800044 	addi	r2,r2,1
   1d878:	e0bffb15 	stw	r2,-20(fp)
   1d87c:	00000106 	br	1d884 <alt_up_irda_write_fd+0x68>
		else
			break;
   1d880:	00000406 	br	1d894 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1d884:	e0bfff17 	ldw	r2,-4(fp)
   1d888:	10ffffc4 	addi	r3,r2,-1
   1d88c:	e0ffff15 	stw	r3,-4(fp)
   1d890:	103fee1e 	bne	r2,zero,1d84c <__alt_mem_Flash_flash_data+0xf401d84c>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   1d894:	e0bffb17 	ldw	r2,-20(fp)
}
   1d898:	e037883a 	mov	sp,fp
   1d89c:	dfc00117 	ldw	ra,4(sp)
   1d8a0:	df000017 	ldw	fp,0(sp)
   1d8a4:	dec00204 	addi	sp,sp,8
   1d8a8:	f800283a 	ret

0001d8ac <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   1d8ac:	defffc04 	addi	sp,sp,-16
   1d8b0:	dfc00315 	stw	ra,12(sp)
   1d8b4:	df000215 	stw	fp,8(sp)
   1d8b8:	df000204 	addi	fp,sp,8
   1d8bc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   1d8c0:	e13fff17 	ldw	r4,-4(fp)
   1d8c4:	014000b4 	movhi	r5,2
   1d8c8:	2949a104 	addi	r5,r5,9860
   1d8cc:	001e95c0 	call	1e95c <alt_find_dev>
   1d8d0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1d8d4:	e0bffe17 	ldw	r2,-8(fp)
}
   1d8d8:	e037883a 	mov	sp,fp
   1d8dc:	dfc00117 	ldw	ra,4(sp)
   1d8e0:	df000017 	ldw	fp,0(sp)
   1d8e4:	dec00204 	addi	sp,sp,8
   1d8e8:	f800283a 	ret

0001d8ec <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
   1d8ec:	defffc04 	addi	sp,sp,-16
   1d8f0:	dfc00315 	stw	ra,12(sp)
   1d8f4:	df000215 	stw	fp,8(sp)
   1d8f8:	df000204 	addi	fp,sp,8
   1d8fc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
   1d900:	e13fff17 	ldw	r4,-4(fp)
   1d904:	014000b4 	movhi	r5,2
   1d908:	2949a104 	addi	r5,r5,9860
   1d90c:	001e95c0 	call	1e95c <alt_find_dev>
   1d910:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1d914:	e0bffe17 	ldw	r2,-8(fp)
}
   1d918:	e037883a 	mov	sp,fp
   1d91c:	dfc00117 	ldw	ra,4(sp)
   1d920:	df000017 	ldw	fp,0(sp)
   1d924:	dec00204 	addi	sp,sp,8
   1d928:	f800283a 	ret

0001d92c <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   1d92c:	defffd04 	addi	sp,sp,-12
   1d930:	df000215 	stw	fp,8(sp)
   1d934:	df000204 	addi	fp,sp,8
   1d938:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   1d93c:	e0bfff17 	ldw	r2,-4(fp)
   1d940:	1080400c 	andi	r2,r2,256
   1d944:	1004d23a 	srli	r2,r2,8
   1d948:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   1d94c:	e0bffe03 	ldbu	r2,-8(fp)
}
   1d950:	e037883a 	mov	sp,fp
   1d954:	df000017 	ldw	fp,0(sp)
   1d958:	dec00104 	addi	sp,sp,4
   1d95c:	f800283a 	ret

0001d960 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1d960:	defffd04 	addi	sp,sp,-12
   1d964:	df000215 	stw	fp,8(sp)
   1d968:	df000204 	addi	fp,sp,8
   1d96c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1d970:	e0bfff17 	ldw	r2,-4(fp)
   1d974:	1080004c 	andi	r2,r2,1
   1d978:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1d97c:	e0bffe03 	ldbu	r2,-8(fp)
}
   1d980:	e037883a 	mov	sp,fp
   1d984:	df000017 	ldw	fp,0(sp)
   1d988:	dec00104 	addi	sp,sp,4
   1d98c:	f800283a 	ret

0001d990 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1d990:	defffd04 	addi	sp,sp,-12
   1d994:	df000215 	stw	fp,8(sp)
   1d998:	df000204 	addi	fp,sp,8
   1d99c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1d9a0:	e0bfff17 	ldw	r2,-4(fp)
   1d9a4:	1081000c 	andi	r2,r2,1024
   1d9a8:	1004d2ba 	srli	r2,r2,10
   1d9ac:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1d9b0:	e0bffe03 	ldbu	r2,-8(fp)
}
   1d9b4:	e037883a 	mov	sp,fp
   1d9b8:	df000017 	ldw	fp,0(sp)
   1d9bc:	dec00104 	addi	sp,sp,4
   1d9c0:	f800283a 	ret

0001d9c4 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1d9c4:	defffd04 	addi	sp,sp,-12
   1d9c8:	df000215 	stw	fp,8(sp)
   1d9cc:	df000204 	addi	fp,sp,8
   1d9d0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1d9d4:	e0bfff17 	ldw	r2,-4(fp)
   1d9d8:	1004d43a 	srli	r2,r2,16
   1d9dc:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1d9e0:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1d9e4:	e037883a 	mov	sp,fp
   1d9e8:	df000017 	ldw	fp,0(sp)
   1d9ec:	dec00104 	addi	sp,sp,4
   1d9f0:	f800283a 	ret

0001d9f4 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1d9f4:	defffd04 	addi	sp,sp,-12
   1d9f8:	df000215 	stw	fp,8(sp)
   1d9fc:	df000204 	addi	fp,sp,8
   1da00:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1da04:	e0bfff17 	ldw	r2,-4(fp)
   1da08:	10a0000c 	andi	r2,r2,32768
   1da0c:	1004d3fa 	srli	r2,r2,15
   1da10:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1da14:	e0bffe03 	ldbu	r2,-8(fp)
}
   1da18:	e037883a 	mov	sp,fp
   1da1c:	df000017 	ldw	fp,0(sp)
   1da20:	dec00104 	addi	sp,sp,4
   1da24:	f800283a 	ret

0001da28 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1da28:	defffd04 	addi	sp,sp,-12
   1da2c:	df000215 	stw	fp,8(sp)
   1da30:	df000204 	addi	fp,sp,8
   1da34:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1da38:	e0bfff17 	ldw	r2,-4(fp)
   1da3c:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1da40:	e0bffe03 	ldbu	r2,-8(fp)
}
   1da44:	e037883a 	mov	sp,fp
   1da48:	df000017 	ldw	fp,0(sp)
   1da4c:	dec00104 	addi	sp,sp,4
   1da50:	f800283a 	ret

0001da54 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1da54:	defffb04 	addi	sp,sp,-20
   1da58:	dfc00415 	stw	ra,16(sp)
   1da5c:	df000315 	stw	fp,12(sp)
   1da60:	df000304 	addi	fp,sp,12
   1da64:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1da68:	e13fff17 	ldw	r4,-4(fp)
   1da6c:	01403fc4 	movi	r5,255
   1da70:	001dcb00 	call	1dcb0 <alt_up_ps2_write_data_byte_with_ack>
   1da74:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1da78:	e0bffd17 	ldw	r2,-12(fp)
   1da7c:	1000211e 	bne	r2,zero,1db04 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1da80:	e0bffe04 	addi	r2,fp,-8
   1da84:	e13fff17 	ldw	r4,-4(fp)
   1da88:	100b883a 	mov	r5,r2
   1da8c:	001dd140 	call	1dd14 <alt_up_ps2_read_data_byte_timeout>
   1da90:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1da94:	e0bffd17 	ldw	r2,-12(fp)
   1da98:	10001a1e 	bne	r2,zero,1db04 <alt_up_ps2_init+0xb0>
   1da9c:	e0bffe03 	ldbu	r2,-8(fp)
   1daa0:	10803fcc 	andi	r2,r2,255
   1daa4:	10802a98 	cmpnei	r2,r2,170
   1daa8:	1000161e 	bne	r2,zero,1db04 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1daac:	e0bffe04 	addi	r2,fp,-8
   1dab0:	e13fff17 	ldw	r4,-4(fp)
   1dab4:	100b883a 	mov	r5,r2
   1dab8:	001dd140 	call	1dd14 <alt_up_ps2_read_data_byte_timeout>
   1dabc:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1dac0:	e0bffd17 	ldw	r2,-12(fp)
   1dac4:	10bfe318 	cmpnei	r2,r2,-116
   1dac8:	1000041e 	bne	r2,zero,1dadc <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1dacc:	e0bfff17 	ldw	r2,-4(fp)
   1dad0:	00c00044 	movi	r3,1
   1dad4:	10c00d15 	stw	r3,52(r2)
   1dad8:	00000a06 	br	1db04 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   1dadc:	e0bffd17 	ldw	r2,-12(fp)
   1dae0:	1000081e 	bne	r2,zero,1db04 <alt_up_ps2_init+0xb0>
   1dae4:	e0bffe03 	ldbu	r2,-8(fp)
   1dae8:	10803fcc 	andi	r2,r2,255
   1daec:	1000051e 	bne	r2,zero,1db04 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1daf0:	e0bfff17 	ldw	r2,-4(fp)
   1daf4:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1daf8:	e13fff17 	ldw	r4,-4(fp)
   1dafc:	01403d04 	movi	r5,244
   1db00:	001dbcc0 	call	1dbcc <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   1db04:	e037883a 	mov	sp,fp
   1db08:	dfc00117 	ldw	ra,4(sp)
   1db0c:	df000017 	ldw	fp,0(sp)
   1db10:	dec00204 	addi	sp,sp,8
   1db14:	f800283a 	ret

0001db18 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1db18:	defffd04 	addi	sp,sp,-12
   1db1c:	df000215 	stw	fp,8(sp)
   1db20:	df000204 	addi	fp,sp,8
   1db24:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1db28:	e0bfff17 	ldw	r2,-4(fp)
   1db2c:	10800a17 	ldw	r2,40(r2)
   1db30:	10800104 	addi	r2,r2,4
   1db34:	10800037 	ldwio	r2,0(r2)
   1db38:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1db3c:	e0bffe17 	ldw	r2,-8(fp)
   1db40:	10800054 	ori	r2,r2,1
   1db44:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1db48:	e0bfff17 	ldw	r2,-4(fp)
   1db4c:	10800a17 	ldw	r2,40(r2)
   1db50:	10800104 	addi	r2,r2,4
   1db54:	1007883a 	mov	r3,r2
   1db58:	e0bffe17 	ldw	r2,-8(fp)
   1db5c:	18800035 	stwio	r2,0(r3)
}
   1db60:	e037883a 	mov	sp,fp
   1db64:	df000017 	ldw	fp,0(sp)
   1db68:	dec00104 	addi	sp,sp,4
   1db6c:	f800283a 	ret

0001db70 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1db70:	defffd04 	addi	sp,sp,-12
   1db74:	df000215 	stw	fp,8(sp)
   1db78:	df000204 	addi	fp,sp,8
   1db7c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1db80:	e0bfff17 	ldw	r2,-4(fp)
   1db84:	10800a17 	ldw	r2,40(r2)
   1db88:	10800104 	addi	r2,r2,4
   1db8c:	10800037 	ldwio	r2,0(r2)
   1db90:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1db94:	e0fffe17 	ldw	r3,-8(fp)
   1db98:	00bfff84 	movi	r2,-2
   1db9c:	1884703a 	and	r2,r3,r2
   1dba0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1dba4:	e0bfff17 	ldw	r2,-4(fp)
   1dba8:	10800a17 	ldw	r2,40(r2)
   1dbac:	10800104 	addi	r2,r2,4
   1dbb0:	1007883a 	mov	r3,r2
   1dbb4:	e0bffe17 	ldw	r2,-8(fp)
   1dbb8:	18800035 	stwio	r2,0(r3)
}
   1dbbc:	e037883a 	mov	sp,fp
   1dbc0:	df000017 	ldw	fp,0(sp)
   1dbc4:	dec00104 	addi	sp,sp,4
   1dbc8:	f800283a 	ret

0001dbcc <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1dbcc:	defffb04 	addi	sp,sp,-20
   1dbd0:	dfc00415 	stw	ra,16(sp)
   1dbd4:	df000315 	stw	fp,12(sp)
   1dbd8:	df000304 	addi	fp,sp,12
   1dbdc:	e13ffe15 	stw	r4,-8(fp)
   1dbe0:	2805883a 	mov	r2,r5
   1dbe4:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1dbe8:	e0bffe17 	ldw	r2,-8(fp)
   1dbec:	10800a17 	ldw	r2,40(r2)
   1dbf0:	1007883a 	mov	r3,r2
   1dbf4:	e0bfff03 	ldbu	r2,-4(fp)
   1dbf8:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1dbfc:	e0bffe17 	ldw	r2,-8(fp)
   1dc00:	10800a17 	ldw	r2,40(r2)
   1dc04:	10800104 	addi	r2,r2,4
   1dc08:	10800037 	ldwio	r2,0(r2)
   1dc0c:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1dc10:	e13ffd17 	ldw	r4,-12(fp)
   1dc14:	001d9900 	call	1d990 <read_CE_bit>
   1dc18:	10803fcc 	andi	r2,r2,255
   1dc1c:	10000226 	beq	r2,zero,1dc28 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   1dc20:	00bffec4 	movi	r2,-5
   1dc24:	00000106 	br	1dc2c <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1dc28:	0005883a 	mov	r2,zero
}
   1dc2c:	e037883a 	mov	sp,fp
   1dc30:	dfc00117 	ldw	ra,4(sp)
   1dc34:	df000017 	ldw	fp,0(sp)
   1dc38:	dec00204 	addi	sp,sp,8
   1dc3c:	f800283a 	ret

0001dc40 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1dc40:	defffc04 	addi	sp,sp,-16
   1dc44:	dfc00315 	stw	ra,12(sp)
   1dc48:	df000215 	stw	fp,8(sp)
   1dc4c:	df000204 	addi	fp,sp,8
   1dc50:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1dc54:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1dc58:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   1dc5c:	e0bffe44 	addi	r2,fp,-7
   1dc60:	e13fff17 	ldw	r4,-4(fp)
   1dc64:	100b883a 	mov	r5,r2
   1dc68:	001dd140 	call	1dd14 <alt_up_ps2_read_data_byte_timeout>
   1dc6c:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   1dc70:	e0bffe03 	ldbu	r2,-8(fp)
   1dc74:	1000061e 	bne	r2,zero,1dc90 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1dc78:	e0bffe43 	ldbu	r2,-7(fp)
   1dc7c:	10803fcc 	andi	r2,r2,255
   1dc80:	10803e98 	cmpnei	r2,r2,250
   1dc84:	1000041e 	bne	r2,zero,1dc98 <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   1dc88:	0005883a 	mov	r2,zero
   1dc8c:	00000306 	br	1dc9c <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   1dc90:	e0bffe03 	ldbu	r2,-8(fp)
   1dc94:	00000106 	br	1dc9c <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   1dc98:	003ff006 	br	1dc5c <__alt_mem_Flash_flash_data+0xf401dc5c>
	return -ETIMEDOUT;
}
   1dc9c:	e037883a 	mov	sp,fp
   1dca0:	dfc00117 	ldw	ra,4(sp)
   1dca4:	df000017 	ldw	fp,0(sp)
   1dca8:	dec00204 	addi	sp,sp,8
   1dcac:	f800283a 	ret

0001dcb0 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1dcb0:	defffa04 	addi	sp,sp,-24
   1dcb4:	dfc00515 	stw	ra,20(sp)
   1dcb8:	df000415 	stw	fp,16(sp)
   1dcbc:	df000404 	addi	fp,sp,16
   1dcc0:	e13ffe15 	stw	r4,-8(fp)
   1dcc4:	2805883a 	mov	r2,r5
   1dcc8:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1dccc:	e0bfff03 	ldbu	r2,-4(fp)
   1dcd0:	e13ffe17 	ldw	r4,-8(fp)
   1dcd4:	100b883a 	mov	r5,r2
   1dcd8:	001dbcc0 	call	1dbcc <alt_up_ps2_write_data_byte>
   1dcdc:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1dce0:	e0bffc17 	ldw	r2,-16(fp)
   1dce4:	10000226 	beq	r2,zero,1dcf0 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1dce8:	e0bffc17 	ldw	r2,-16(fp)
   1dcec:	00000406 	br	1dd00 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1dcf0:	e13ffe17 	ldw	r4,-8(fp)
   1dcf4:	001dc400 	call	1dc40 <alt_up_ps2_wait_for_ack>
   1dcf8:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   1dcfc:	e0bffd17 	ldw	r2,-12(fp)
}
   1dd00:	e037883a 	mov	sp,fp
   1dd04:	dfc00117 	ldw	ra,4(sp)
   1dd08:	df000017 	ldw	fp,0(sp)
   1dd0c:	dec00204 	addi	sp,sp,8
   1dd10:	f800283a 	ret

0001dd14 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1dd14:	defffa04 	addi	sp,sp,-24
   1dd18:	dfc00515 	stw	ra,20(sp)
   1dd1c:	df000415 	stw	fp,16(sp)
   1dd20:	df000404 	addi	fp,sp,16
   1dd24:	e13ffe15 	stw	r4,-8(fp)
   1dd28:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1dd2c:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   1dd30:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1dd34:	e0bffc17 	ldw	r2,-16(fp)
   1dd38:	10800044 	addi	r2,r2,1
   1dd3c:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1dd40:	e0bffe17 	ldw	r2,-8(fp)
   1dd44:	10800a17 	ldw	r2,40(r2)
   1dd48:	10800037 	ldwio	r2,0(r2)
   1dd4c:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   1dd50:	e13ffd17 	ldw	r4,-12(fp)
   1dd54:	001d9f40 	call	1d9f4 <read_data_valid>
   1dd58:	10803fcc 	andi	r2,r2,255
   1dd5c:	10000726 	beq	r2,zero,1dd7c <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   1dd60:	e13ffd17 	ldw	r4,-12(fp)
   1dd64:	001da280 	call	1da28 <read_data_byte>
   1dd68:	1007883a 	mov	r3,r2
   1dd6c:	e0bfff17 	ldw	r2,-4(fp)
   1dd70:	10c00005 	stb	r3,0(r2)
			return 0;
   1dd74:	0005883a 	mov	r2,zero
   1dd78:	00000a06 	br	1dda4 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1dd7c:	e0bffe17 	ldw	r2,-8(fp)
   1dd80:	10800c17 	ldw	r2,48(r2)
   1dd84:	10000626 	beq	r2,zero,1dda0 <alt_up_ps2_read_data_byte_timeout+0x8c>
   1dd88:	e0bffe17 	ldw	r2,-8(fp)
   1dd8c:	10c00c17 	ldw	r3,48(r2)
   1dd90:	e0bffc17 	ldw	r2,-16(fp)
   1dd94:	1880022e 	bgeu	r3,r2,1dda0 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   1dd98:	00bfe304 	movi	r2,-116
   1dd9c:	00000106 	br	1dda4 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   1dda0:	003fe406 	br	1dd34 <__alt_mem_Flash_flash_data+0xf401dd34>
}
   1dda4:	e037883a 	mov	sp,fp
   1dda8:	dfc00117 	ldw	ra,4(sp)
   1ddac:	df000017 	ldw	fp,0(sp)
   1ddb0:	dec00204 	addi	sp,sp,8
   1ddb4:	f800283a 	ret

0001ddb8 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1ddb8:	defffb04 	addi	sp,sp,-20
   1ddbc:	dfc00415 	stw	ra,16(sp)
   1ddc0:	df000315 	stw	fp,12(sp)
   1ddc4:	df000304 	addi	fp,sp,12
   1ddc8:	e13ffe15 	stw	r4,-8(fp)
   1ddcc:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1ddd0:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1ddd4:	e0bffe17 	ldw	r2,-8(fp)
   1ddd8:	10800a17 	ldw	r2,40(r2)
   1dddc:	10800037 	ldwio	r2,0(r2)
   1dde0:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1dde4:	e13ffd17 	ldw	r4,-12(fp)
   1dde8:	001d9f40 	call	1d9f4 <read_data_valid>
   1ddec:	10803fcc 	andi	r2,r2,255
   1ddf0:	10000726 	beq	r2,zero,1de10 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1ddf4:	e13ffd17 	ldw	r4,-12(fp)
   1ddf8:	001da280 	call	1da28 <read_data_byte>
   1ddfc:	1007883a 	mov	r3,r2
   1de00:	e0bfff17 	ldw	r2,-4(fp)
   1de04:	10c00005 	stb	r3,0(r2)
		return 0;
   1de08:	0005883a 	mov	r2,zero
   1de0c:	00000106 	br	1de14 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1de10:	00bfffc4 	movi	r2,-1
}
   1de14:	e037883a 	mov	sp,fp
   1de18:	dfc00117 	ldw	ra,4(sp)
   1de1c:	df000017 	ldw	fp,0(sp)
   1de20:	dec00204 	addi	sp,sp,8
   1de24:	f800283a 	ret

0001de28 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1de28:	defffb04 	addi	sp,sp,-20
   1de2c:	dfc00415 	stw	ra,16(sp)
   1de30:	df000315 	stw	fp,12(sp)
   1de34:	df000304 	addi	fp,sp,12
   1de38:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1de3c:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   1de40:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1de44:	e0bfff17 	ldw	r2,-4(fp)
   1de48:	10800a17 	ldw	r2,40(r2)
   1de4c:	10800037 	ldwio	r2,0(r2)
   1de50:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1de54:	e13ffe17 	ldw	r4,-8(fp)
   1de58:	001d9c40 	call	1d9c4 <read_num_bytes_available>
   1de5c:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   1de60:	e0bffd0b 	ldhu	r2,-12(fp)
   1de64:	103ff71e 	bne	r2,zero,1de44 <__alt_mem_Flash_flash_data+0xf401de44>
}
   1de68:	e037883a 	mov	sp,fp
   1de6c:	dfc00117 	ldw	ra,4(sp)
   1de70:	df000017 	ldw	fp,0(sp)
   1de74:	dec00204 	addi	sp,sp,8
   1de78:	f800283a 	ret

0001de7c <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1de7c:	defff804 	addi	sp,sp,-32
   1de80:	dfc00715 	stw	ra,28(sp)
   1de84:	df000615 	stw	fp,24(sp)
   1de88:	df000604 	addi	fp,sp,24
   1de8c:	e13ffd15 	stw	r4,-12(fp)
   1de90:	e17ffe15 	stw	r5,-8(fp)
   1de94:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1de98:	e0bffd17 	ldw	r2,-12(fp)
   1de9c:	10800017 	ldw	r2,0(r2)
   1dea0:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1dea4:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1dea8:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1deac:	e0fffc17 	ldw	r3,-16(fp)
   1deb0:	e0bfff17 	ldw	r2,-4(fp)
   1deb4:	18bffd16 	blt	r3,r2,1deac <__alt_mem_Flash_flash_data+0xf401deac>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1deb8:	e0bffe17 	ldw	r2,-8(fp)
   1debc:	10c00044 	addi	r3,r2,1
   1dec0:	e0fffe15 	stw	r3,-8(fp)
   1dec4:	e13ffa17 	ldw	r4,-24(fp)
   1dec8:	100b883a 	mov	r5,r2
   1decc:	001dd140 	call	1dd14 <alt_up_ps2_read_data_byte_timeout>
   1ded0:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1ded4:	e0bffb17 	ldw	r2,-20(fp)
   1ded8:	10000226 	beq	r2,zero,1dee4 <alt_up_ps2_read_fd+0x68>
			return count;
   1dedc:	e0bffc17 	ldw	r2,-16(fp)
   1dee0:	00000406 	br	1def4 <alt_up_ps2_read_fd+0x78>
		count++;
   1dee4:	e0bffc17 	ldw	r2,-16(fp)
   1dee8:	10800044 	addi	r2,r2,1
   1deec:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   1def0:	e0bffc17 	ldw	r2,-16(fp)
}
   1def4:	e037883a 	mov	sp,fp
   1def8:	dfc00117 	ldw	ra,4(sp)
   1defc:	df000017 	ldw	fp,0(sp)
   1df00:	dec00204 	addi	sp,sp,8
   1df04:	f800283a 	ret

0001df08 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1df08:	defff804 	addi	sp,sp,-32
   1df0c:	dfc00715 	stw	ra,28(sp)
   1df10:	df000615 	stw	fp,24(sp)
   1df14:	df000604 	addi	fp,sp,24
   1df18:	e13ffd15 	stw	r4,-12(fp)
   1df1c:	e17ffe15 	stw	r5,-8(fp)
   1df20:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1df24:	e0bffd17 	ldw	r2,-12(fp)
   1df28:	10800017 	ldw	r2,0(r2)
   1df2c:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1df30:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1df34:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1df38:	00001006 	br	1df7c <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1df3c:	e0bffe17 	ldw	r2,-8(fp)
   1df40:	10c00044 	addi	r3,r2,1
   1df44:	e0fffe15 	stw	r3,-8(fp)
   1df48:	10800003 	ldbu	r2,0(r2)
   1df4c:	10803fcc 	andi	r2,r2,255
   1df50:	e13ffb17 	ldw	r4,-20(fp)
   1df54:	100b883a 	mov	r5,r2
   1df58:	001dbcc0 	call	1dbcc <alt_up_ps2_write_data_byte>
   1df5c:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1df60:	e0bffc17 	ldw	r2,-16(fp)
   1df64:	10000226 	beq	r2,zero,1df70 <alt_up_ps2_write_fd+0x68>
			return count;
   1df68:	e0bffa17 	ldw	r2,-24(fp)
   1df6c:	00000706 	br	1df8c <alt_up_ps2_write_fd+0x84>
		count++;
   1df70:	e0bffa17 	ldw	r2,-24(fp)
   1df74:	10800044 	addi	r2,r2,1
   1df78:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1df7c:	e0fffa17 	ldw	r3,-24(fp)
   1df80:	e0bfff17 	ldw	r2,-4(fp)
   1df84:	18bfed16 	blt	r3,r2,1df3c <__alt_mem_Flash_flash_data+0xf401df3c>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1df88:	e0bffa17 	ldw	r2,-24(fp)
}
   1df8c:	e037883a 	mov	sp,fp
   1df90:	dfc00117 	ldw	ra,4(sp)
   1df94:	df000017 	ldw	fp,0(sp)
   1df98:	dec00204 	addi	sp,sp,8
   1df9c:	f800283a 	ret

0001dfa0 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1dfa0:	defffc04 	addi	sp,sp,-16
   1dfa4:	dfc00315 	stw	ra,12(sp)
   1dfa8:	df000215 	stw	fp,8(sp)
   1dfac:	df000204 	addi	fp,sp,8
   1dfb0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1dfb4:	e13fff17 	ldw	r4,-4(fp)
   1dfb8:	014000b4 	movhi	r5,2
   1dfbc:	2949a104 	addi	r5,r5,9860
   1dfc0:	001e95c0 	call	1e95c <alt_find_dev>
   1dfc4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1dfc8:	e0bffe17 	ldw	r2,-8(fp)
}
   1dfcc:	e037883a 	mov	sp,fp
   1dfd0:	dfc00117 	ldw	ra,4(sp)
   1dfd4:	df000017 	ldw	fp,0(sp)
   1dfd8:	dec00204 	addi	sp,sp,8
   1dfdc:	f800283a 	ret

0001dfe0 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1dfe0:	defffd04 	addi	sp,sp,-12
   1dfe4:	df000215 	stw	fp,8(sp)
   1dfe8:	df000204 	addi	fp,sp,8
   1dfec:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1dff0:	e0bfff17 	ldw	r2,-4(fp)
   1dff4:	10800a17 	ldw	r2,40(r2)
   1dff8:	10800104 	addi	r2,r2,4
   1dffc:	10800037 	ldwio	r2,0(r2)
   1e000:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1e004:	e0bffe17 	ldw	r2,-8(fp)
   1e008:	10800054 	ori	r2,r2,1
   1e00c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1e010:	e0bfff17 	ldw	r2,-4(fp)
   1e014:	10800a17 	ldw	r2,40(r2)
   1e018:	10800104 	addi	r2,r2,4
   1e01c:	1007883a 	mov	r3,r2
   1e020:	e0bffe17 	ldw	r2,-8(fp)
   1e024:	18800035 	stwio	r2,0(r3)
}
   1e028:	e037883a 	mov	sp,fp
   1e02c:	df000017 	ldw	fp,0(sp)
   1e030:	dec00104 	addi	sp,sp,4
   1e034:	f800283a 	ret

0001e038 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1e038:	defffd04 	addi	sp,sp,-12
   1e03c:	df000215 	stw	fp,8(sp)
   1e040:	df000204 	addi	fp,sp,8
   1e044:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1e048:	e0bfff17 	ldw	r2,-4(fp)
   1e04c:	10800a17 	ldw	r2,40(r2)
   1e050:	10800104 	addi	r2,r2,4
   1e054:	10800037 	ldwio	r2,0(r2)
   1e058:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1e05c:	e0fffe17 	ldw	r3,-8(fp)
   1e060:	00bfff84 	movi	r2,-2
   1e064:	1884703a 	and	r2,r3,r2
   1e068:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1e06c:	e0bfff17 	ldw	r2,-4(fp)
   1e070:	10800a17 	ldw	r2,40(r2)
   1e074:	10800104 	addi	r2,r2,4
   1e078:	1007883a 	mov	r3,r2
   1e07c:	e0bffe17 	ldw	r2,-8(fp)
   1e080:	18800035 	stwio	r2,0(r3)
}
   1e084:	e037883a 	mov	sp,fp
   1e088:	df000017 	ldw	fp,0(sp)
   1e08c:	dec00104 	addi	sp,sp,4
   1e090:	f800283a 	ret

0001e094 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1e094:	defffd04 	addi	sp,sp,-12
   1e098:	df000215 	stw	fp,8(sp)
   1e09c:	df000204 	addi	fp,sp,8
   1e0a0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1e0a4:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1e0a8:	e0bfff17 	ldw	r2,-4(fp)
   1e0ac:	10800a17 	ldw	r2,40(r2)
   1e0b0:	10800084 	addi	r2,r2,2
   1e0b4:	1080002b 	ldhuio	r2,0(r2)
   1e0b8:	10bfffcc 	andi	r2,r2,65535
   1e0bc:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1e0c0:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1e0c4:	e037883a 	mov	sp,fp
   1e0c8:	df000017 	ldw	fp,0(sp)
   1e0cc:	dec00104 	addi	sp,sp,4
   1e0d0:	f800283a 	ret

0001e0d4 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1e0d4:	defffd04 	addi	sp,sp,-12
   1e0d8:	df000215 	stw	fp,8(sp)
   1e0dc:	df000204 	addi	fp,sp,8
   1e0e0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1e0e4:	e0bfff17 	ldw	r2,-4(fp)
   1e0e8:	10800a17 	ldw	r2,40(r2)
   1e0ec:	10800104 	addi	r2,r2,4
   1e0f0:	10800037 	ldwio	r2,0(r2)
   1e0f4:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1e0f8:	e0bffe17 	ldw	r2,-8(fp)
   1e0fc:	1004d43a 	srli	r2,r2,16
}
   1e100:	e037883a 	mov	sp,fp
   1e104:	df000017 	ldw	fp,0(sp)
   1e108:	dec00104 	addi	sp,sp,4
   1e10c:	f800283a 	ret

0001e110 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1e110:	defffd04 	addi	sp,sp,-12
   1e114:	df000215 	stw	fp,8(sp)
   1e118:	df000204 	addi	fp,sp,8
   1e11c:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1e120:	e0bfff17 	ldw	r2,-4(fp)
   1e124:	1080800c 	andi	r2,r2,512
   1e128:	1004d27a 	srli	r2,r2,9
   1e12c:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1e130:	e0bffe17 	ldw	r2,-8(fp)
   1e134:	10000226 	beq	r2,zero,1e140 <alt_up_rs232_check_parity+0x30>
   1e138:	00bfffc4 	movi	r2,-1
   1e13c:	00000106 	br	1e144 <alt_up_rs232_check_parity+0x34>
   1e140:	0005883a 	mov	r2,zero
}
   1e144:	e037883a 	mov	sp,fp
   1e148:	df000017 	ldw	fp,0(sp)
   1e14c:	dec00104 	addi	sp,sp,4
   1e150:	f800283a 	ret

0001e154 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1e154:	defffd04 	addi	sp,sp,-12
   1e158:	df000215 	stw	fp,8(sp)
   1e15c:	df000204 	addi	fp,sp,8
   1e160:	e13ffe15 	stw	r4,-8(fp)
   1e164:	2805883a 	mov	r2,r5
   1e168:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1e16c:	e0bffe17 	ldw	r2,-8(fp)
   1e170:	10800a17 	ldw	r2,40(r2)
   1e174:	1007883a 	mov	r3,r2
   1e178:	e0bfff03 	ldbu	r2,-4(fp)
   1e17c:	18800035 	stwio	r2,0(r3)
	return 0;
   1e180:	0005883a 	mov	r2,zero
}
   1e184:	e037883a 	mov	sp,fp
   1e188:	df000017 	ldw	fp,0(sp)
   1e18c:	dec00104 	addi	sp,sp,4
   1e190:	f800283a 	ret

0001e194 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1e194:	defffa04 	addi	sp,sp,-24
   1e198:	dfc00515 	stw	ra,20(sp)
   1e19c:	df000415 	stw	fp,16(sp)
   1e1a0:	df000404 	addi	fp,sp,16
   1e1a4:	e13ffd15 	stw	r4,-12(fp)
   1e1a8:	e17ffe15 	stw	r5,-8(fp)
   1e1ac:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1e1b0:	e0bffd17 	ldw	r2,-12(fp)
   1e1b4:	10800a17 	ldw	r2,40(r2)
   1e1b8:	10800037 	ldwio	r2,0(r2)
   1e1bc:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1e1c0:	e0bffc17 	ldw	r2,-16(fp)
   1e1c4:	1007883a 	mov	r3,r2
   1e1c8:	e0bffe17 	ldw	r2,-8(fp)
   1e1cc:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1e1d0:	e13ffc17 	ldw	r4,-16(fp)
   1e1d4:	001e1100 	call	1e110 <alt_up_rs232_check_parity>
   1e1d8:	1007883a 	mov	r3,r2
   1e1dc:	e0bfff17 	ldw	r2,-4(fp)
   1e1e0:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1e1e4:	e0bffc17 	ldw	r2,-16(fp)
   1e1e8:	10a0000c 	andi	r2,r2,32768
   1e1ec:	1004d3fa 	srli	r2,r2,15
   1e1f0:	10bfffc4 	addi	r2,r2,-1
}
   1e1f4:	e037883a 	mov	sp,fp
   1e1f8:	dfc00117 	ldw	ra,4(sp)
   1e1fc:	df000017 	ldw	fp,0(sp)
   1e200:	dec00204 	addi	sp,sp,8
   1e204:	f800283a 	ret

0001e208 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1e208:	defff804 	addi	sp,sp,-32
   1e20c:	dfc00715 	stw	ra,28(sp)
   1e210:	df000615 	stw	fp,24(sp)
   1e214:	df000604 	addi	fp,sp,24
   1e218:	e13ffd15 	stw	r4,-12(fp)
   1e21c:	e17ffe15 	stw	r5,-8(fp)
   1e220:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1e224:	e0bffd17 	ldw	r2,-12(fp)
   1e228:	10800017 	ldw	r2,0(r2)
   1e22c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1e230:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1e234:	00000e06 	br	1e270 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1e238:	e0bffe17 	ldw	r2,-8(fp)
   1e23c:	10c00044 	addi	r3,r2,1
   1e240:	e0fffe15 	stw	r3,-8(fp)
   1e244:	e0fffc04 	addi	r3,fp,-16
   1e248:	e13ffb17 	ldw	r4,-20(fp)
   1e24c:	100b883a 	mov	r5,r2
   1e250:	180d883a 	mov	r6,r3
   1e254:	001e1940 	call	1e194 <alt_up_rs232_read_data>
   1e258:	1000041e 	bne	r2,zero,1e26c <alt_up_rs232_read_fd+0x64>
			count++;
   1e25c:	e0bffa17 	ldw	r2,-24(fp)
   1e260:	10800044 	addi	r2,r2,1
   1e264:	e0bffa15 	stw	r2,-24(fp)
   1e268:	00000106 	br	1e270 <alt_up_rs232_read_fd+0x68>
		else
			break;
   1e26c:	00000406 	br	1e280 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1e270:	e0bfff17 	ldw	r2,-4(fp)
   1e274:	10ffffc4 	addi	r3,r2,-1
   1e278:	e0ffff15 	stw	r3,-4(fp)
   1e27c:	103fee1e 	bne	r2,zero,1e238 <__alt_mem_Flash_flash_data+0xf401e238>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1e280:	e0bffa17 	ldw	r2,-24(fp)
}
   1e284:	e037883a 	mov	sp,fp
   1e288:	dfc00117 	ldw	ra,4(sp)
   1e28c:	df000017 	ldw	fp,0(sp)
   1e290:	dec00204 	addi	sp,sp,8
   1e294:	f800283a 	ret

0001e298 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1e298:	defff904 	addi	sp,sp,-28
   1e29c:	dfc00615 	stw	ra,24(sp)
   1e2a0:	df000515 	stw	fp,20(sp)
   1e2a4:	df000504 	addi	fp,sp,20
   1e2a8:	e13ffd15 	stw	r4,-12(fp)
   1e2ac:	e17ffe15 	stw	r5,-8(fp)
   1e2b0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1e2b4:	e0bffd17 	ldw	r2,-12(fp)
   1e2b8:	10800017 	ldw	r2,0(r2)
   1e2bc:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1e2c0:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1e2c4:	00000f06 	br	1e304 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1e2c8:	e0bffe17 	ldw	r2,-8(fp)
   1e2cc:	10800003 	ldbu	r2,0(r2)
   1e2d0:	10803fcc 	andi	r2,r2,255
   1e2d4:	e13ffc17 	ldw	r4,-16(fp)
   1e2d8:	100b883a 	mov	r5,r2
   1e2dc:	001e1540 	call	1e154 <alt_up_rs232_write_data>
   1e2e0:	1000071e 	bne	r2,zero,1e300 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   1e2e4:	e0bffb17 	ldw	r2,-20(fp)
   1e2e8:	10800044 	addi	r2,r2,1
   1e2ec:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1e2f0:	e0bffe17 	ldw	r2,-8(fp)
   1e2f4:	10800044 	addi	r2,r2,1
   1e2f8:	e0bffe15 	stw	r2,-8(fp)
   1e2fc:	00000106 	br	1e304 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   1e300:	00000406 	br	1e314 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1e304:	e0bfff17 	ldw	r2,-4(fp)
   1e308:	10ffffc4 	addi	r3,r2,-1
   1e30c:	e0ffff15 	stw	r3,-4(fp)
   1e310:	103fed1e 	bne	r2,zero,1e2c8 <__alt_mem_Flash_flash_data+0xf401e2c8>
			ptr++;
		}
		else
			break;
	}
	return count;
   1e314:	e0bffb17 	ldw	r2,-20(fp)
}
   1e318:	e037883a 	mov	sp,fp
   1e31c:	dfc00117 	ldw	ra,4(sp)
   1e320:	df000017 	ldw	fp,0(sp)
   1e324:	dec00204 	addi	sp,sp,8
   1e328:	f800283a 	ret

0001e32c <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1e32c:	defffc04 	addi	sp,sp,-16
   1e330:	dfc00315 	stw	ra,12(sp)
   1e334:	df000215 	stw	fp,8(sp)
   1e338:	df000204 	addi	fp,sp,8
   1e33c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1e340:	e13fff17 	ldw	r4,-4(fp)
   1e344:	014000b4 	movhi	r5,2
   1e348:	2949a104 	addi	r5,r5,9860
   1e34c:	001e95c0 	call	1e95c <alt_find_dev>
   1e350:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1e354:	e0bffe17 	ldw	r2,-8(fp)
}
   1e358:	e037883a 	mov	sp,fp
   1e35c:	dfc00117 	ldw	ra,4(sp)
   1e360:	df000017 	ldw	fp,0(sp)
   1e364:	dec00204 	addi	sp,sp,8
   1e368:	f800283a 	ret

0001e36c <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   1e36c:	defffc04 	addi	sp,sp,-16
   1e370:	dfc00315 	stw	ra,12(sp)
   1e374:	df000215 	stw	fp,8(sp)
   1e378:	df000204 	addi	fp,sp,8
   1e37c:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   1e380:	e0bfff17 	ldw	r2,-4(fp)
   1e384:	10800217 	ldw	r2,8(r2)
   1e388:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   1e38c:	00000b06 	br	1e3bc <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   1e390:	e13ffe17 	ldw	r4,-8(fp)
   1e394:	014000b4 	movhi	r5,2
   1e398:	2941f504 	addi	r5,r5,2004
   1e39c:	000c6680 	call	c668 <strcmp>
   1e3a0:	1000031e 	bne	r2,zero,1e3b0 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   1e3a4:	e0bffe17 	ldw	r2,-8(fp)
   1e3a8:	10000005 	stb	zero,0(r2)
			break;
   1e3ac:	00000906 	br	1e3d4 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   1e3b0:	e0bffe17 	ldw	r2,-8(fp)
   1e3b4:	10800044 	addi	r2,r2,1
   1e3b8:	e0bffe15 	stw	r2,-8(fp)
   1e3bc:	e0bffe17 	ldw	r2,-8(fp)
   1e3c0:	10800003 	ldbu	r2,0(r2)
   1e3c4:	10803fcc 	andi	r2,r2,255
   1e3c8:	1080201c 	xori	r2,r2,128
   1e3cc:	10bfe004 	addi	r2,r2,-128
   1e3d0:	103fef1e 	bne	r2,zero,1e390 <__alt_mem_Flash_flash_data+0xf401e390>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   1e3d4:	0001883a 	nop
}
   1e3d8:	e037883a 	mov	sp,fp
   1e3dc:	dfc00117 	ldw	ra,4(sp)
   1e3e0:	df000017 	ldw	fp,0(sp)
   1e3e4:	dec00204 	addi	sp,sp,8
   1e3e8:	f800283a 	ret

0001e3ec <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   1e3ec:	defffc04 	addi	sp,sp,-16
   1e3f0:	dfc00315 	stw	ra,12(sp)
   1e3f4:	df000215 	stw	fp,8(sp)
   1e3f8:	df000204 	addi	fp,sp,8
   1e3fc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   1e400:	e13fff17 	ldw	r4,-4(fp)
   1e404:	014000b4 	movhi	r5,2
   1e408:	2949a104 	addi	r5,r5,9860
   1e40c:	001e95c0 	call	1e95c <alt_find_dev>
   1e410:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1e414:	e0bffe17 	ldw	r2,-8(fp)
}
   1e418:	e037883a 	mov	sp,fp
   1e41c:	dfc00117 	ldw	ra,4(sp)
   1e420:	df000017 	ldw	fp,0(sp)
   1e424:	dec00204 	addi	sp,sp,8
   1e428:	f800283a 	ret

0001e42c <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   1e42c:	defffa04 	addi	sp,sp,-24
   1e430:	df000515 	stw	fp,20(sp)
   1e434:	df000504 	addi	fp,sp,20
   1e438:	e13ffc15 	stw	r4,-16(fp)
   1e43c:	2805883a 	mov	r2,r5
   1e440:	e1bffe15 	stw	r6,-8(fp)
   1e444:	e1ffff15 	stw	r7,-4(fp)
   1e448:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1e44c:	e0bffc17 	ldw	r2,-16(fp)
   1e450:	10800c17 	ldw	r2,48(r2)
   1e454:	e0fffe17 	ldw	r3,-8(fp)
   1e458:	1880042e 	bgeu	r3,r2,1e46c <alt_up_char_buffer_draw+0x40>
   1e45c:	e0bffc17 	ldw	r2,-16(fp)
   1e460:	10800d17 	ldw	r2,52(r2)
   1e464:	e0ffff17 	ldw	r3,-4(fp)
   1e468:	18800236 	bltu	r3,r2,1e474 <alt_up_char_buffer_draw+0x48>
		return -1;
   1e46c:	00bfffc4 	movi	r2,-1
   1e470:	00001d06 	br	1e4e8 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   1e474:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   1e478:	e0bffc17 	ldw	r2,-16(fp)
   1e47c:	10c00f17 	ldw	r3,60(r2)
   1e480:	e0bffe17 	ldw	r2,-8(fp)
   1e484:	1884703a 	and	r2,r3,r2
   1e488:	e0fffc17 	ldw	r3,-16(fp)
   1e48c:	18c00e17 	ldw	r3,56(r3)
   1e490:	10c4983a 	sll	r2,r2,r3
   1e494:	e0fffb17 	ldw	r3,-20(fp)
   1e498:	1884b03a 	or	r2,r3,r2
   1e49c:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   1e4a0:	e0bffc17 	ldw	r2,-16(fp)
   1e4a4:	10c01117 	ldw	r3,68(r2)
   1e4a8:	e0bfff17 	ldw	r2,-4(fp)
   1e4ac:	1884703a 	and	r2,r3,r2
   1e4b0:	e0fffc17 	ldw	r3,-16(fp)
   1e4b4:	18c01017 	ldw	r3,64(r3)
   1e4b8:	10c4983a 	sll	r2,r2,r3
   1e4bc:	e0fffb17 	ldw	r3,-20(fp)
   1e4c0:	1884b03a 	or	r2,r3,r2
   1e4c4:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   1e4c8:	e0bffc17 	ldw	r2,-16(fp)
   1e4cc:	10c00b17 	ldw	r3,44(r2)
   1e4d0:	e0bffb17 	ldw	r2,-20(fp)
   1e4d4:	1885883a 	add	r2,r3,r2
   1e4d8:	1007883a 	mov	r3,r2
   1e4dc:	e0bffd03 	ldbu	r2,-12(fp)
   1e4e0:	18800025 	stbio	r2,0(r3)

	return 0;
   1e4e4:	0005883a 	mov	r2,zero
}
   1e4e8:	e037883a 	mov	sp,fp
   1e4ec:	df000017 	ldw	fp,0(sp)
   1e4f0:	dec00104 	addi	sp,sp,4
   1e4f4:	f800283a 	ret

0001e4f8 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   1e4f8:	defffa04 	addi	sp,sp,-24
   1e4fc:	df000515 	stw	fp,20(sp)
   1e500:	df000504 	addi	fp,sp,20
   1e504:	e13ffc15 	stw	r4,-16(fp)
   1e508:	e17ffd15 	stw	r5,-12(fp)
   1e50c:	e1bffe15 	stw	r6,-8(fp)
   1e510:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1e514:	e0bffc17 	ldw	r2,-16(fp)
   1e518:	10800c17 	ldw	r2,48(r2)
   1e51c:	e0fffe17 	ldw	r3,-8(fp)
   1e520:	1880042e 	bgeu	r3,r2,1e534 <alt_up_char_buffer_string+0x3c>
   1e524:	e0bffc17 	ldw	r2,-16(fp)
   1e528:	10800d17 	ldw	r2,52(r2)
   1e52c:	e0ffff17 	ldw	r3,-4(fp)
   1e530:	18800236 	bltu	r3,r2,1e53c <alt_up_char_buffer_string+0x44>
		return -1;
   1e534:	00bfffc4 	movi	r2,-1
   1e538:	00002b06 	br	1e5e8 <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   1e53c:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   1e540:	e0bffc17 	ldw	r2,-16(fp)
   1e544:	10801017 	ldw	r2,64(r2)
   1e548:	1007883a 	mov	r3,r2
   1e54c:	e0bfff17 	ldw	r2,-4(fp)
   1e550:	10c6983a 	sll	r3,r2,r3
   1e554:	e0bffe17 	ldw	r2,-8(fp)
   1e558:	1885883a 	add	r2,r3,r2
   1e55c:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   1e560:	00001a06 	br	1e5cc <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   1e564:	e0bffc17 	ldw	r2,-16(fp)
   1e568:	10c00b17 	ldw	r3,44(r2)
   1e56c:	e0bffb17 	ldw	r2,-20(fp)
   1e570:	1885883a 	add	r2,r3,r2
   1e574:	1007883a 	mov	r3,r2
   1e578:	e0bffd17 	ldw	r2,-12(fp)
   1e57c:	10800003 	ldbu	r2,0(r2)
   1e580:	10803fcc 	andi	r2,r2,255
   1e584:	1080201c 	xori	r2,r2,128
   1e588:	10bfe004 	addi	r2,r2,-128
   1e58c:	18800025 	stbio	r2,0(r3)
		++ptr;
   1e590:	e0bffd17 	ldw	r2,-12(fp)
   1e594:	10800044 	addi	r2,r2,1
   1e598:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   1e59c:	e0bffe17 	ldw	r2,-8(fp)
   1e5a0:	10800044 	addi	r2,r2,1
   1e5a4:	e0bffe15 	stw	r2,-8(fp)
   1e5a8:	e0bffc17 	ldw	r2,-16(fp)
   1e5ac:	10800c17 	ldw	r2,48(r2)
   1e5b0:	e0fffe17 	ldw	r3,-8(fp)
   1e5b4:	18800236 	bltu	r3,r2,1e5c0 <alt_up_char_buffer_string+0xc8>
			return -1;
   1e5b8:	00bfffc4 	movi	r2,-1
   1e5bc:	00000a06 	br	1e5e8 <alt_up_char_buffer_string+0xf0>
		++offset;
   1e5c0:	e0bffb17 	ldw	r2,-20(fp)
   1e5c4:	10800044 	addi	r2,r2,1
   1e5c8:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   1e5cc:	e0bffd17 	ldw	r2,-12(fp)
   1e5d0:	10800003 	ldbu	r2,0(r2)
   1e5d4:	10803fcc 	andi	r2,r2,255
   1e5d8:	1080201c 	xori	r2,r2,128
   1e5dc:	10bfe004 	addi	r2,r2,-128
   1e5e0:	103fe01e 	bne	r2,zero,1e564 <__alt_mem_Flash_flash_data+0xf401e564>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   1e5e4:	0005883a 	mov	r2,zero
}
   1e5e8:	e037883a 	mov	sp,fp
   1e5ec:	df000017 	ldw	fp,0(sp)
   1e5f0:	dec00104 	addi	sp,sp,4
   1e5f4:	f800283a 	ret

0001e5f8 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   1e5f8:	defffe04 	addi	sp,sp,-8
   1e5fc:	df000115 	stw	fp,4(sp)
   1e600:	df000104 	addi	fp,sp,4
   1e604:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   1e608:	e0bfff17 	ldw	r2,-4(fp)
   1e60c:	10800a17 	ldw	r2,40(r2)
   1e610:	10800084 	addi	r2,r2,2
   1e614:	1007883a 	mov	r3,r2
   1e618:	00800044 	movi	r2,1
   1e61c:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   1e620:	0001883a 	nop
   1e624:	e0bfff17 	ldw	r2,-4(fp)
   1e628:	10800a17 	ldw	r2,40(r2)
   1e62c:	10800084 	addi	r2,r2,2
   1e630:	10800023 	ldbuio	r2,0(r2)
   1e634:	10803fcc 	andi	r2,r2,255
   1e638:	1080004c 	andi	r2,r2,1
   1e63c:	103ff91e 	bne	r2,zero,1e624 <__alt_mem_Flash_flash_data+0xf401e624>
	return 0;
   1e640:	0005883a 	mov	r2,zero
}
   1e644:	e037883a 	mov	sp,fp
   1e648:	df000017 	ldw	fp,0(sp)
   1e64c:	dec00104 	addi	sp,sp,4
   1e650:	f800283a 	ret

0001e654 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1e654:	defff504 	addi	sp,sp,-44
   1e658:	df000a15 	stw	fp,40(sp)
   1e65c:	df000a04 	addi	fp,sp,40
   1e660:	e13ffc15 	stw	r4,-16(fp)
   1e664:	e17ffd15 	stw	r5,-12(fp)
   1e668:	e1bffe15 	stw	r6,-8(fp)
   1e66c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1e670:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1e674:	008000b4 	movhi	r2,2
   1e678:	1091d404 	addi	r2,r2,18256
   1e67c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1e680:	10003f26 	beq	r2,zero,1e780 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1e684:	e0bffc17 	ldw	r2,-16(fp)
   1e688:	10003b26 	beq	r2,zero,1e778 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1e68c:	e0bffc17 	ldw	r2,-16(fp)
   1e690:	e0fffe17 	ldw	r3,-8(fp)
   1e694:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1e698:	e0bffc17 	ldw	r2,-16(fp)
   1e69c:	e0ffff17 	ldw	r3,-4(fp)
   1e6a0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e6a4:	0005303a 	rdctl	r2,status
   1e6a8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e6ac:	e0fff817 	ldw	r3,-32(fp)
   1e6b0:	00bfff84 	movi	r2,-2
   1e6b4:	1884703a 	and	r2,r3,r2
   1e6b8:	1001703a 	wrctl	status,r2
  
  return context;
   1e6bc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1e6c0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1e6c4:	008000b4 	movhi	r2,2
   1e6c8:	1091d504 	addi	r2,r2,18260
   1e6cc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1e6d0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1e6d4:	e0fffd17 	ldw	r3,-12(fp)
   1e6d8:	e0bff617 	ldw	r2,-40(fp)
   1e6dc:	1885883a 	add	r2,r3,r2
   1e6e0:	10c00044 	addi	r3,r2,1
   1e6e4:	e0bffc17 	ldw	r2,-16(fp)
   1e6e8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1e6ec:	e0bffc17 	ldw	r2,-16(fp)
   1e6f0:	10c00217 	ldw	r3,8(r2)
   1e6f4:	e0bff617 	ldw	r2,-40(fp)
   1e6f8:	1880042e 	bgeu	r3,r2,1e70c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1e6fc:	e0bffc17 	ldw	r2,-16(fp)
   1e700:	00c00044 	movi	r3,1
   1e704:	10c00405 	stb	r3,16(r2)
   1e708:	00000206 	br	1e714 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1e70c:	e0bffc17 	ldw	r2,-16(fp)
   1e710:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1e714:	e0fffc17 	ldw	r3,-16(fp)
   1e718:	008000b4 	movhi	r2,2
   1e71c:	1089c604 	addi	r2,r2,10008
   1e720:	e0bff915 	stw	r2,-28(fp)
   1e724:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1e728:	e0bffa17 	ldw	r2,-24(fp)
   1e72c:	e0fff917 	ldw	r3,-28(fp)
   1e730:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1e734:	e0bff917 	ldw	r2,-28(fp)
   1e738:	10c00017 	ldw	r3,0(r2)
   1e73c:	e0bffa17 	ldw	r2,-24(fp)
   1e740:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1e744:	e0bff917 	ldw	r2,-28(fp)
   1e748:	10800017 	ldw	r2,0(r2)
   1e74c:	e0fffa17 	ldw	r3,-24(fp)
   1e750:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1e754:	e0bff917 	ldw	r2,-28(fp)
   1e758:	e0fffa17 	ldw	r3,-24(fp)
   1e75c:	10c00015 	stw	r3,0(r2)
   1e760:	e0bff717 	ldw	r2,-36(fp)
   1e764:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e768:	e0bffb17 	ldw	r2,-20(fp)
   1e76c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1e770:	0005883a 	mov	r2,zero
   1e774:	00000306 	br	1e784 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1e778:	00bffa84 	movi	r2,-22
   1e77c:	00000106 	br	1e784 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1e780:	00bfde84 	movi	r2,-134
  }
}
   1e784:	e037883a 	mov	sp,fp
   1e788:	df000017 	ldw	fp,0(sp)
   1e78c:	dec00104 	addi	sp,sp,4
   1e790:	f800283a 	ret

0001e794 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1e794:	deffff04 	addi	sp,sp,-4
   1e798:	df000015 	stw	fp,0(sp)
   1e79c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1e7a0:	e037883a 	mov	sp,fp
   1e7a4:	df000017 	ldw	fp,0(sp)
   1e7a8:	dec00104 	addi	sp,sp,4
   1e7ac:	f800283a 	ret

0001e7b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1e7b0:	defffe04 	addi	sp,sp,-8
   1e7b4:	dfc00115 	stw	ra,4(sp)
   1e7b8:	df000015 	stw	fp,0(sp)
   1e7bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1e7c0:	008000b4 	movhi	r2,2
   1e7c4:	1089a404 	addi	r2,r2,9872
   1e7c8:	10800017 	ldw	r2,0(r2)
   1e7cc:	10000526 	beq	r2,zero,1e7e4 <alt_get_errno+0x34>
   1e7d0:	008000b4 	movhi	r2,2
   1e7d4:	1089a404 	addi	r2,r2,9872
   1e7d8:	10800017 	ldw	r2,0(r2)
   1e7dc:	103ee83a 	callr	r2
   1e7e0:	00000206 	br	1e7ec <alt_get_errno+0x3c>
   1e7e4:	008000b4 	movhi	r2,2
   1e7e8:	1091b604 	addi	r2,r2,18136
}
   1e7ec:	e037883a 	mov	sp,fp
   1e7f0:	dfc00117 	ldw	ra,4(sp)
   1e7f4:	df000017 	ldw	fp,0(sp)
   1e7f8:	dec00204 	addi	sp,sp,8
   1e7fc:	f800283a 	ret

0001e800 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1e800:	defffa04 	addi	sp,sp,-24
   1e804:	dfc00515 	stw	ra,20(sp)
   1e808:	df000415 	stw	fp,16(sp)
   1e80c:	df000404 	addi	fp,sp,16
   1e810:	e13ffe15 	stw	r4,-8(fp)
   1e814:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1e818:	e0bffe17 	ldw	r2,-8(fp)
   1e81c:	10000326 	beq	r2,zero,1e82c <alt_dev_llist_insert+0x2c>
   1e820:	e0bffe17 	ldw	r2,-8(fp)
   1e824:	10800217 	ldw	r2,8(r2)
   1e828:	1000061e 	bne	r2,zero,1e844 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1e82c:	001e7b00 	call	1e7b0 <alt_get_errno>
   1e830:	1007883a 	mov	r3,r2
   1e834:	00800584 	movi	r2,22
   1e838:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1e83c:	00bffa84 	movi	r2,-22
   1e840:	00001306 	br	1e890 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1e844:	e0bffe17 	ldw	r2,-8(fp)
   1e848:	e0ffff17 	ldw	r3,-4(fp)
   1e84c:	e0fffc15 	stw	r3,-16(fp)
   1e850:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1e854:	e0bffd17 	ldw	r2,-12(fp)
   1e858:	e0fffc17 	ldw	r3,-16(fp)
   1e85c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1e860:	e0bffc17 	ldw	r2,-16(fp)
   1e864:	10c00017 	ldw	r3,0(r2)
   1e868:	e0bffd17 	ldw	r2,-12(fp)
   1e86c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1e870:	e0bffc17 	ldw	r2,-16(fp)
   1e874:	10800017 	ldw	r2,0(r2)
   1e878:	e0fffd17 	ldw	r3,-12(fp)
   1e87c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1e880:	e0bffc17 	ldw	r2,-16(fp)
   1e884:	e0fffd17 	ldw	r3,-12(fp)
   1e888:	10c00015 	stw	r3,0(r2)

  return 0;  
   1e88c:	0005883a 	mov	r2,zero
}
   1e890:	e037883a 	mov	sp,fp
   1e894:	dfc00117 	ldw	ra,4(sp)
   1e898:	df000017 	ldw	fp,0(sp)
   1e89c:	dec00204 	addi	sp,sp,8
   1e8a0:	f800283a 	ret

0001e8a4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1e8a4:	defffd04 	addi	sp,sp,-12
   1e8a8:	dfc00215 	stw	ra,8(sp)
   1e8ac:	df000115 	stw	fp,4(sp)
   1e8b0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1e8b4:	008000b4 	movhi	r2,2
   1e8b8:	10bed204 	addi	r2,r2,-1208
   1e8bc:	e0bfff15 	stw	r2,-4(fp)
   1e8c0:	00000606 	br	1e8dc <_do_ctors+0x38>
        (*ctor) (); 
   1e8c4:	e0bfff17 	ldw	r2,-4(fp)
   1e8c8:	10800017 	ldw	r2,0(r2)
   1e8cc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1e8d0:	e0bfff17 	ldw	r2,-4(fp)
   1e8d4:	10bfff04 	addi	r2,r2,-4
   1e8d8:	e0bfff15 	stw	r2,-4(fp)
   1e8dc:	e0ffff17 	ldw	r3,-4(fp)
   1e8e0:	008000b4 	movhi	r2,2
   1e8e4:	10bed304 	addi	r2,r2,-1204
   1e8e8:	18bff62e 	bgeu	r3,r2,1e8c4 <__alt_mem_Flash_flash_data+0xf401e8c4>
        (*ctor) (); 
}
   1e8ec:	e037883a 	mov	sp,fp
   1e8f0:	dfc00117 	ldw	ra,4(sp)
   1e8f4:	df000017 	ldw	fp,0(sp)
   1e8f8:	dec00204 	addi	sp,sp,8
   1e8fc:	f800283a 	ret

0001e900 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1e900:	defffd04 	addi	sp,sp,-12
   1e904:	dfc00215 	stw	ra,8(sp)
   1e908:	df000115 	stw	fp,4(sp)
   1e90c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1e910:	008000b4 	movhi	r2,2
   1e914:	10bed204 	addi	r2,r2,-1208
   1e918:	e0bfff15 	stw	r2,-4(fp)
   1e91c:	00000606 	br	1e938 <_do_dtors+0x38>
        (*dtor) (); 
   1e920:	e0bfff17 	ldw	r2,-4(fp)
   1e924:	10800017 	ldw	r2,0(r2)
   1e928:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1e92c:	e0bfff17 	ldw	r2,-4(fp)
   1e930:	10bfff04 	addi	r2,r2,-4
   1e934:	e0bfff15 	stw	r2,-4(fp)
   1e938:	e0ffff17 	ldw	r3,-4(fp)
   1e93c:	008000b4 	movhi	r2,2
   1e940:	10bed304 	addi	r2,r2,-1204
   1e944:	18bff62e 	bgeu	r3,r2,1e920 <__alt_mem_Flash_flash_data+0xf401e920>
        (*dtor) (); 
}
   1e948:	e037883a 	mov	sp,fp
   1e94c:	dfc00117 	ldw	ra,4(sp)
   1e950:	df000017 	ldw	fp,0(sp)
   1e954:	dec00204 	addi	sp,sp,8
   1e958:	f800283a 	ret

0001e95c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1e95c:	defffa04 	addi	sp,sp,-24
   1e960:	dfc00515 	stw	ra,20(sp)
   1e964:	df000415 	stw	fp,16(sp)
   1e968:	df000404 	addi	fp,sp,16
   1e96c:	e13ffe15 	stw	r4,-8(fp)
   1e970:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1e974:	e0bfff17 	ldw	r2,-4(fp)
   1e978:	10800017 	ldw	r2,0(r2)
   1e97c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1e980:	e13ffe17 	ldw	r4,-8(fp)
   1e984:	00035180 	call	3518 <strlen>
   1e988:	10800044 	addi	r2,r2,1
   1e98c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1e990:	00000d06 	br	1e9c8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1e994:	e0bffc17 	ldw	r2,-16(fp)
   1e998:	10c00217 	ldw	r3,8(r2)
   1e99c:	e0bffd17 	ldw	r2,-12(fp)
   1e9a0:	1809883a 	mov	r4,r3
   1e9a4:	e17ffe17 	ldw	r5,-8(fp)
   1e9a8:	100d883a 	mov	r6,r2
   1e9ac:	001f7ec0 	call	1f7ec <memcmp>
   1e9b0:	1000021e 	bne	r2,zero,1e9bc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1e9b4:	e0bffc17 	ldw	r2,-16(fp)
   1e9b8:	00000706 	br	1e9d8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1e9bc:	e0bffc17 	ldw	r2,-16(fp)
   1e9c0:	10800017 	ldw	r2,0(r2)
   1e9c4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1e9c8:	e0fffc17 	ldw	r3,-16(fp)
   1e9cc:	e0bfff17 	ldw	r2,-4(fp)
   1e9d0:	18bff01e 	bne	r3,r2,1e994 <__alt_mem_Flash_flash_data+0xf401e994>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1e9d4:	0005883a 	mov	r2,zero
}
   1e9d8:	e037883a 	mov	sp,fp
   1e9dc:	dfc00117 	ldw	ra,4(sp)
   1e9e0:	df000017 	ldw	fp,0(sp)
   1e9e4:	dec00204 	addi	sp,sp,8
   1e9e8:	f800283a 	ret

0001e9ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1e9ec:	defffe04 	addi	sp,sp,-8
   1e9f0:	dfc00115 	stw	ra,4(sp)
   1e9f4:	df000015 	stw	fp,0(sp)
   1e9f8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1e9fc:	0009883a 	mov	r4,zero
   1ea00:	01440004 	movi	r5,4096
   1ea04:	001f6780 	call	1f678 <alt_icache_flush>
#endif
}
   1ea08:	e037883a 	mov	sp,fp
   1ea0c:	dfc00117 	ldw	ra,4(sp)
   1ea10:	df000017 	ldw	fp,0(sp)
   1ea14:	dec00204 	addi	sp,sp,8
   1ea18:	f800283a 	ret

0001ea1c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1ea1c:	defff904 	addi	sp,sp,-28
   1ea20:	dfc00615 	stw	ra,24(sp)
   1ea24:	df000515 	stw	fp,20(sp)
   1ea28:	df000504 	addi	fp,sp,20
   1ea2c:	e13ffc15 	stw	r4,-16(fp)
   1ea30:	e17ffd15 	stw	r5,-12(fp)
   1ea34:	e1bffe15 	stw	r6,-8(fp)
   1ea38:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1ea3c:	e13ffd17 	ldw	r4,-12(fp)
   1ea40:	e17ffe17 	ldw	r5,-8(fp)
   1ea44:	e1bfff17 	ldw	r6,-4(fp)
   1ea48:	001ee200 	call	1ee20 <open>
   1ea4c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1ea50:	e0bffb17 	ldw	r2,-20(fp)
   1ea54:	10001c16 	blt	r2,zero,1eac8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1ea58:	008000b4 	movhi	r2,2
   1ea5c:	10843004 	addi	r2,r2,4288
   1ea60:	e0fffb17 	ldw	r3,-20(fp)
   1ea64:	18c00324 	muli	r3,r3,12
   1ea68:	10c5883a 	add	r2,r2,r3
   1ea6c:	10c00017 	ldw	r3,0(r2)
   1ea70:	e0bffc17 	ldw	r2,-16(fp)
   1ea74:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1ea78:	008000b4 	movhi	r2,2
   1ea7c:	10843004 	addi	r2,r2,4288
   1ea80:	e0fffb17 	ldw	r3,-20(fp)
   1ea84:	18c00324 	muli	r3,r3,12
   1ea88:	18c00104 	addi	r3,r3,4
   1ea8c:	10c5883a 	add	r2,r2,r3
   1ea90:	10c00017 	ldw	r3,0(r2)
   1ea94:	e0bffc17 	ldw	r2,-16(fp)
   1ea98:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1ea9c:	008000b4 	movhi	r2,2
   1eaa0:	10843004 	addi	r2,r2,4288
   1eaa4:	e0fffb17 	ldw	r3,-20(fp)
   1eaa8:	18c00324 	muli	r3,r3,12
   1eaac:	18c00204 	addi	r3,r3,8
   1eab0:	10c5883a 	add	r2,r2,r3
   1eab4:	10c00017 	ldw	r3,0(r2)
   1eab8:	e0bffc17 	ldw	r2,-16(fp)
   1eabc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1eac0:	e13ffb17 	ldw	r4,-20(fp)
   1eac4:	00130b00 	call	130b0 <alt_release_fd>
  }
} 
   1eac8:	e037883a 	mov	sp,fp
   1eacc:	dfc00117 	ldw	ra,4(sp)
   1ead0:	df000017 	ldw	fp,0(sp)
   1ead4:	dec00204 	addi	sp,sp,8
   1ead8:	f800283a 	ret

0001eadc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1eadc:	defffb04 	addi	sp,sp,-20
   1eae0:	dfc00415 	stw	ra,16(sp)
   1eae4:	df000315 	stw	fp,12(sp)
   1eae8:	df000304 	addi	fp,sp,12
   1eaec:	e13ffd15 	stw	r4,-12(fp)
   1eaf0:	e17ffe15 	stw	r5,-8(fp)
   1eaf4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1eaf8:	010000b4 	movhi	r4,2
   1eafc:	21043304 	addi	r4,r4,4300
   1eb00:	e17ffd17 	ldw	r5,-12(fp)
   1eb04:	01800044 	movi	r6,1
   1eb08:	01c07fc4 	movi	r7,511
   1eb0c:	001ea1c0 	call	1ea1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1eb10:	010000b4 	movhi	r4,2
   1eb14:	21043004 	addi	r4,r4,4288
   1eb18:	e17ffe17 	ldw	r5,-8(fp)
   1eb1c:	000d883a 	mov	r6,zero
   1eb20:	01c07fc4 	movi	r7,511
   1eb24:	001ea1c0 	call	1ea1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1eb28:	010000b4 	movhi	r4,2
   1eb2c:	21043604 	addi	r4,r4,4312
   1eb30:	e17fff17 	ldw	r5,-4(fp)
   1eb34:	01800044 	movi	r6,1
   1eb38:	01c07fc4 	movi	r7,511
   1eb3c:	001ea1c0 	call	1ea1c <alt_open_fd>
}  
   1eb40:	e037883a 	mov	sp,fp
   1eb44:	dfc00117 	ldw	ra,4(sp)
   1eb48:	df000017 	ldw	fp,0(sp)
   1eb4c:	dec00204 	addi	sp,sp,8
   1eb50:	f800283a 	ret

0001eb54 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1eb54:	defff004 	addi	sp,sp,-64
   1eb58:	df000f15 	stw	fp,60(sp)
   1eb5c:	df000f04 	addi	fp,sp,60
   1eb60:	e13ffd15 	stw	r4,-12(fp)
   1eb64:	e17ffe15 	stw	r5,-8(fp)
   1eb68:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1eb6c:	00bffa84 	movi	r2,-22
   1eb70:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1eb74:	e0bffd17 	ldw	r2,-12(fp)
   1eb78:	10800828 	cmpgeui	r2,r2,32
   1eb7c:	10005c1e 	bne	r2,zero,1ecf0 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1eb80:	0005303a 	rdctl	r2,status
   1eb84:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1eb88:	e0fff317 	ldw	r3,-52(fp)
   1eb8c:	00bfff84 	movi	r2,-2
   1eb90:	1884703a 	and	r2,r3,r2
   1eb94:	1001703a 	wrctl	status,r2
  
  return context;
   1eb98:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1eb9c:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   1eba0:	00800134 	movhi	r2,4
   1eba4:	109e8404 	addi	r2,r2,31248
   1eba8:	e0fffd17 	ldw	r3,-12(fp)
   1ebac:	180690fa 	slli	r3,r3,3
   1ebb0:	10c5883a 	add	r2,r2,r3
   1ebb4:	e0ffff17 	ldw	r3,-4(fp)
   1ebb8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1ebbc:	00800134 	movhi	r2,4
   1ebc0:	109e8404 	addi	r2,r2,31248
   1ebc4:	e0fffd17 	ldw	r3,-12(fp)
   1ebc8:	180690fa 	slli	r3,r3,3
   1ebcc:	18c00104 	addi	r3,r3,4
   1ebd0:	10c5883a 	add	r2,r2,r3
   1ebd4:	e0fffe17 	ldw	r3,-8(fp)
   1ebd8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1ebdc:	e0bfff17 	ldw	r2,-4(fp)
   1ebe0:	10001f26 	beq	r2,zero,1ec60 <alt_irq_register+0x10c>
   1ebe4:	e0bffd17 	ldw	r2,-12(fp)
   1ebe8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ebec:	0005303a 	rdctl	r2,status
   1ebf0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ebf4:	e0fff517 	ldw	r3,-44(fp)
   1ebf8:	00bfff84 	movi	r2,-2
   1ebfc:	1884703a 	and	r2,r3,r2
   1ec00:	1001703a 	wrctl	status,r2
  
  return context;
   1ec04:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1ec08:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   1ec0c:	e0bff417 	ldw	r2,-48(fp)
   1ec10:	00c00044 	movi	r3,1
   1ec14:	1884983a 	sll	r2,r3,r2
   1ec18:	1007883a 	mov	r3,r2
   1ec1c:	008000b4 	movhi	r2,2
   1ec20:	1091d304 	addi	r2,r2,18252
   1ec24:	10800017 	ldw	r2,0(r2)
   1ec28:	1886b03a 	or	r3,r3,r2
   1ec2c:	008000b4 	movhi	r2,2
   1ec30:	1091d304 	addi	r2,r2,18252
   1ec34:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1ec38:	008000b4 	movhi	r2,2
   1ec3c:	1091d304 	addi	r2,r2,18252
   1ec40:	10800017 	ldw	r2,0(r2)
   1ec44:	100170fa 	wrctl	ienable,r2
   1ec48:	e0bff617 	ldw	r2,-40(fp)
   1ec4c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ec50:	e0bff717 	ldw	r2,-36(fp)
   1ec54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1ec58:	0005883a 	mov	r2,zero
   1ec5c:	00001f06 	br	1ecdc <alt_irq_register+0x188>
   1ec60:	e0bffd17 	ldw	r2,-12(fp)
   1ec64:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ec68:	0005303a 	rdctl	r2,status
   1ec6c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ec70:	e0fff917 	ldw	r3,-28(fp)
   1ec74:	00bfff84 	movi	r2,-2
   1ec78:	1884703a 	and	r2,r3,r2
   1ec7c:	1001703a 	wrctl	status,r2
  
  return context;
   1ec80:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1ec84:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   1ec88:	e0bff817 	ldw	r2,-32(fp)
   1ec8c:	00c00044 	movi	r3,1
   1ec90:	1884983a 	sll	r2,r3,r2
   1ec94:	0084303a 	nor	r2,zero,r2
   1ec98:	1007883a 	mov	r3,r2
   1ec9c:	008000b4 	movhi	r2,2
   1eca0:	1091d304 	addi	r2,r2,18252
   1eca4:	10800017 	ldw	r2,0(r2)
   1eca8:	1886703a 	and	r3,r3,r2
   1ecac:	008000b4 	movhi	r2,2
   1ecb0:	1091d304 	addi	r2,r2,18252
   1ecb4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1ecb8:	008000b4 	movhi	r2,2
   1ecbc:	1091d304 	addi	r2,r2,18252
   1ecc0:	10800017 	ldw	r2,0(r2)
   1ecc4:	100170fa 	wrctl	ienable,r2
   1ecc8:	e0bffa17 	ldw	r2,-24(fp)
   1eccc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ecd0:	e0bffb17 	ldw	r2,-20(fp)
   1ecd4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1ecd8:	0005883a 	mov	r2,zero
   1ecdc:	e0bff115 	stw	r2,-60(fp)
   1ece0:	e0bff217 	ldw	r2,-56(fp)
   1ece4:	e0bffc15 	stw	r2,-16(fp)
   1ece8:	e0bffc17 	ldw	r2,-16(fp)
   1ecec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1ecf0:	e0bff117 	ldw	r2,-60(fp)
}
   1ecf4:	e037883a 	mov	sp,fp
   1ecf8:	df000017 	ldw	fp,0(sp)
   1ecfc:	dec00104 	addi	sp,sp,4
   1ed00:	f800283a 	ret

0001ed04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1ed04:	defffe04 	addi	sp,sp,-8
   1ed08:	dfc00115 	stw	ra,4(sp)
   1ed0c:	df000015 	stw	fp,0(sp)
   1ed10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ed14:	008000b4 	movhi	r2,2
   1ed18:	1089a404 	addi	r2,r2,9872
   1ed1c:	10800017 	ldw	r2,0(r2)
   1ed20:	10000526 	beq	r2,zero,1ed38 <alt_get_errno+0x34>
   1ed24:	008000b4 	movhi	r2,2
   1ed28:	1089a404 	addi	r2,r2,9872
   1ed2c:	10800017 	ldw	r2,0(r2)
   1ed30:	103ee83a 	callr	r2
   1ed34:	00000206 	br	1ed40 <alt_get_errno+0x3c>
   1ed38:	008000b4 	movhi	r2,2
   1ed3c:	1091b604 	addi	r2,r2,18136
}
   1ed40:	e037883a 	mov	sp,fp
   1ed44:	dfc00117 	ldw	ra,4(sp)
   1ed48:	df000017 	ldw	fp,0(sp)
   1ed4c:	dec00204 	addi	sp,sp,8
   1ed50:	f800283a 	ret

0001ed54 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1ed54:	defffd04 	addi	sp,sp,-12
   1ed58:	df000215 	stw	fp,8(sp)
   1ed5c:	df000204 	addi	fp,sp,8
   1ed60:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1ed64:	e0bfff17 	ldw	r2,-4(fp)
   1ed68:	10800217 	ldw	r2,8(r2)
   1ed6c:	10d00034 	orhi	r3,r2,16384
   1ed70:	e0bfff17 	ldw	r2,-4(fp)
   1ed74:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1ed78:	e03ffe15 	stw	zero,-8(fp)
   1ed7c:	00001d06 	br	1edf4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1ed80:	008000b4 	movhi	r2,2
   1ed84:	10843004 	addi	r2,r2,4288
   1ed88:	e0fffe17 	ldw	r3,-8(fp)
   1ed8c:	18c00324 	muli	r3,r3,12
   1ed90:	10c5883a 	add	r2,r2,r3
   1ed94:	10c00017 	ldw	r3,0(r2)
   1ed98:	e0bfff17 	ldw	r2,-4(fp)
   1ed9c:	10800017 	ldw	r2,0(r2)
   1eda0:	1880111e 	bne	r3,r2,1ede8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1eda4:	008000b4 	movhi	r2,2
   1eda8:	10843004 	addi	r2,r2,4288
   1edac:	e0fffe17 	ldw	r3,-8(fp)
   1edb0:	18c00324 	muli	r3,r3,12
   1edb4:	18c00204 	addi	r3,r3,8
   1edb8:	10c5883a 	add	r2,r2,r3
   1edbc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1edc0:	1000090e 	bge	r2,zero,1ede8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1edc4:	e0bffe17 	ldw	r2,-8(fp)
   1edc8:	10c00324 	muli	r3,r2,12
   1edcc:	008000b4 	movhi	r2,2
   1edd0:	10843004 	addi	r2,r2,4288
   1edd4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1edd8:	e0bfff17 	ldw	r2,-4(fp)
   1eddc:	18800226 	beq	r3,r2,1ede8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1ede0:	00bffcc4 	movi	r2,-13
   1ede4:	00000a06 	br	1ee10 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1ede8:	e0bffe17 	ldw	r2,-8(fp)
   1edec:	10800044 	addi	r2,r2,1
   1edf0:	e0bffe15 	stw	r2,-8(fp)
   1edf4:	008000b4 	movhi	r2,2
   1edf8:	1089a304 	addi	r2,r2,9868
   1edfc:	10800017 	ldw	r2,0(r2)
   1ee00:	1007883a 	mov	r3,r2
   1ee04:	e0bffe17 	ldw	r2,-8(fp)
   1ee08:	18bfdd2e 	bgeu	r3,r2,1ed80 <__alt_mem_Flash_flash_data+0xf401ed80>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1ee0c:	0005883a 	mov	r2,zero
}
   1ee10:	e037883a 	mov	sp,fp
   1ee14:	df000017 	ldw	fp,0(sp)
   1ee18:	dec00104 	addi	sp,sp,4
   1ee1c:	f800283a 	ret

0001ee20 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1ee20:	defff604 	addi	sp,sp,-40
   1ee24:	dfc00915 	stw	ra,36(sp)
   1ee28:	df000815 	stw	fp,32(sp)
   1ee2c:	df000804 	addi	fp,sp,32
   1ee30:	e13ffd15 	stw	r4,-12(fp)
   1ee34:	e17ffe15 	stw	r5,-8(fp)
   1ee38:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1ee3c:	00bfffc4 	movi	r2,-1
   1ee40:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1ee44:	00bffb44 	movi	r2,-19
   1ee48:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1ee4c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1ee50:	e13ffd17 	ldw	r4,-12(fp)
   1ee54:	014000b4 	movhi	r5,2
   1ee58:	2949a104 	addi	r5,r5,9860
   1ee5c:	001e95c0 	call	1e95c <alt_find_dev>
   1ee60:	e0bff815 	stw	r2,-32(fp)
   1ee64:	e0bff817 	ldw	r2,-32(fp)
   1ee68:	1000051e 	bne	r2,zero,1ee80 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1ee6c:	e13ffd17 	ldw	r4,-12(fp)
   1ee70:	001f4680 	call	1f468 <alt_find_file>
   1ee74:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1ee78:	00800044 	movi	r2,1
   1ee7c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1ee80:	e0bff817 	ldw	r2,-32(fp)
   1ee84:	10002926 	beq	r2,zero,1ef2c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1ee88:	e13ff817 	ldw	r4,-32(fp)
   1ee8c:	001f57c0 	call	1f57c <alt_get_fd>
   1ee90:	e0bff915 	stw	r2,-28(fp)
   1ee94:	e0bff917 	ldw	r2,-28(fp)
   1ee98:	1000030e 	bge	r2,zero,1eea8 <open+0x88>
    {
      status = index;
   1ee9c:	e0bff917 	ldw	r2,-28(fp)
   1eea0:	e0bffa15 	stw	r2,-24(fp)
   1eea4:	00002306 	br	1ef34 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   1eea8:	e0bff917 	ldw	r2,-28(fp)
   1eeac:	10c00324 	muli	r3,r2,12
   1eeb0:	008000b4 	movhi	r2,2
   1eeb4:	10843004 	addi	r2,r2,4288
   1eeb8:	1885883a 	add	r2,r3,r2
   1eebc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1eec0:	e0fffe17 	ldw	r3,-8(fp)
   1eec4:	00900034 	movhi	r2,16384
   1eec8:	10bfffc4 	addi	r2,r2,-1
   1eecc:	1886703a 	and	r3,r3,r2
   1eed0:	e0bffc17 	ldw	r2,-16(fp)
   1eed4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1eed8:	e0bffb17 	ldw	r2,-20(fp)
   1eedc:	1000051e 	bne	r2,zero,1eef4 <open+0xd4>
   1eee0:	e13ffc17 	ldw	r4,-16(fp)
   1eee4:	001ed540 	call	1ed54 <alt_file_locked>
   1eee8:	e0bffa15 	stw	r2,-24(fp)
   1eeec:	e0bffa17 	ldw	r2,-24(fp)
   1eef0:	10001016 	blt	r2,zero,1ef34 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1eef4:	e0bff817 	ldw	r2,-32(fp)
   1eef8:	10800317 	ldw	r2,12(r2)
   1eefc:	10000826 	beq	r2,zero,1ef20 <open+0x100>
   1ef00:	e0bff817 	ldw	r2,-32(fp)
   1ef04:	10800317 	ldw	r2,12(r2)
   1ef08:	e13ffc17 	ldw	r4,-16(fp)
   1ef0c:	e17ffd17 	ldw	r5,-12(fp)
   1ef10:	e1bffe17 	ldw	r6,-8(fp)
   1ef14:	e1ffff17 	ldw	r7,-4(fp)
   1ef18:	103ee83a 	callr	r2
   1ef1c:	00000106 	br	1ef24 <open+0x104>
   1ef20:	0005883a 	mov	r2,zero
   1ef24:	e0bffa15 	stw	r2,-24(fp)
   1ef28:	00000206 	br	1ef34 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1ef2c:	00bffb44 	movi	r2,-19
   1ef30:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1ef34:	e0bffa17 	ldw	r2,-24(fp)
   1ef38:	1000090e 	bge	r2,zero,1ef60 <open+0x140>
  {
    alt_release_fd (index);  
   1ef3c:	e13ff917 	ldw	r4,-28(fp)
   1ef40:	00130b00 	call	130b0 <alt_release_fd>
    ALT_ERRNO = -status;
   1ef44:	001ed040 	call	1ed04 <alt_get_errno>
   1ef48:	1007883a 	mov	r3,r2
   1ef4c:	e0bffa17 	ldw	r2,-24(fp)
   1ef50:	0085c83a 	sub	r2,zero,r2
   1ef54:	18800015 	stw	r2,0(r3)
    return -1;
   1ef58:	00bfffc4 	movi	r2,-1
   1ef5c:	00000106 	br	1ef64 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   1ef60:	e0bff917 	ldw	r2,-28(fp)
}
   1ef64:	e037883a 	mov	sp,fp
   1ef68:	dfc00117 	ldw	ra,4(sp)
   1ef6c:	df000017 	ldw	fp,0(sp)
   1ef70:	dec00204 	addi	sp,sp,8
   1ef74:	f800283a 	ret

0001ef78 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1ef78:	defffa04 	addi	sp,sp,-24
   1ef7c:	df000515 	stw	fp,20(sp)
   1ef80:	df000504 	addi	fp,sp,20
   1ef84:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ef88:	0005303a 	rdctl	r2,status
   1ef8c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ef90:	e0fffc17 	ldw	r3,-16(fp)
   1ef94:	00bfff84 	movi	r2,-2
   1ef98:	1884703a 	and	r2,r3,r2
   1ef9c:	1001703a 	wrctl	status,r2
  
  return context;
   1efa0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1efa4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1efa8:	e0bfff17 	ldw	r2,-4(fp)
   1efac:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1efb0:	e0bffd17 	ldw	r2,-12(fp)
   1efb4:	10800017 	ldw	r2,0(r2)
   1efb8:	e0fffd17 	ldw	r3,-12(fp)
   1efbc:	18c00117 	ldw	r3,4(r3)
   1efc0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1efc4:	e0bffd17 	ldw	r2,-12(fp)
   1efc8:	10800117 	ldw	r2,4(r2)
   1efcc:	e0fffd17 	ldw	r3,-12(fp)
   1efd0:	18c00017 	ldw	r3,0(r3)
   1efd4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1efd8:	e0bffd17 	ldw	r2,-12(fp)
   1efdc:	e0fffd17 	ldw	r3,-12(fp)
   1efe0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1efe4:	e0bffd17 	ldw	r2,-12(fp)
   1efe8:	e0fffd17 	ldw	r3,-12(fp)
   1efec:	10c00015 	stw	r3,0(r2)
   1eff0:	e0bffb17 	ldw	r2,-20(fp)
   1eff4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1eff8:	e0bffe17 	ldw	r2,-8(fp)
   1effc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1f000:	e037883a 	mov	sp,fp
   1f004:	df000017 	ldw	fp,0(sp)
   1f008:	dec00104 	addi	sp,sp,4
   1f00c:	f800283a 	ret

0001f010 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1f010:	defffb04 	addi	sp,sp,-20
   1f014:	dfc00415 	stw	ra,16(sp)
   1f018:	df000315 	stw	fp,12(sp)
   1f01c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1f020:	d0a03a17 	ldw	r2,-32536(gp)
   1f024:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1f028:	d0a84917 	ldw	r2,-24284(gp)
   1f02c:	10800044 	addi	r2,r2,1
   1f030:	d0a84915 	stw	r2,-24284(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1f034:	00002e06 	br	1f0f0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1f038:	e0bffd17 	ldw	r2,-12(fp)
   1f03c:	10800017 	ldw	r2,0(r2)
   1f040:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1f044:	e0bffd17 	ldw	r2,-12(fp)
   1f048:	10800403 	ldbu	r2,16(r2)
   1f04c:	10803fcc 	andi	r2,r2,255
   1f050:	10000426 	beq	r2,zero,1f064 <alt_tick+0x54>
   1f054:	d0a84917 	ldw	r2,-24284(gp)
   1f058:	1000021e 	bne	r2,zero,1f064 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1f05c:	e0bffd17 	ldw	r2,-12(fp)
   1f060:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1f064:	e0bffd17 	ldw	r2,-12(fp)
   1f068:	10800217 	ldw	r2,8(r2)
   1f06c:	d0e84917 	ldw	r3,-24284(gp)
   1f070:	18801d36 	bltu	r3,r2,1f0e8 <alt_tick+0xd8>
   1f074:	e0bffd17 	ldw	r2,-12(fp)
   1f078:	10800403 	ldbu	r2,16(r2)
   1f07c:	10803fcc 	andi	r2,r2,255
   1f080:	1000191e 	bne	r2,zero,1f0e8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1f084:	e0bffd17 	ldw	r2,-12(fp)
   1f088:	10800317 	ldw	r2,12(r2)
   1f08c:	e0fffd17 	ldw	r3,-12(fp)
   1f090:	18c00517 	ldw	r3,20(r3)
   1f094:	1809883a 	mov	r4,r3
   1f098:	103ee83a 	callr	r2
   1f09c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1f0a0:	e0bfff17 	ldw	r2,-4(fp)
   1f0a4:	1000031e 	bne	r2,zero,1f0b4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1f0a8:	e13ffd17 	ldw	r4,-12(fp)
   1f0ac:	001ef780 	call	1ef78 <alt_alarm_stop>
   1f0b0:	00000d06 	br	1f0e8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1f0b4:	e0bffd17 	ldw	r2,-12(fp)
   1f0b8:	10c00217 	ldw	r3,8(r2)
   1f0bc:	e0bfff17 	ldw	r2,-4(fp)
   1f0c0:	1887883a 	add	r3,r3,r2
   1f0c4:	e0bffd17 	ldw	r2,-12(fp)
   1f0c8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1f0cc:	e0bffd17 	ldw	r2,-12(fp)
   1f0d0:	10c00217 	ldw	r3,8(r2)
   1f0d4:	d0a84917 	ldw	r2,-24284(gp)
   1f0d8:	1880032e 	bgeu	r3,r2,1f0e8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1f0dc:	e0bffd17 	ldw	r2,-12(fp)
   1f0e0:	00c00044 	movi	r3,1
   1f0e4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1f0e8:	e0bffe17 	ldw	r2,-8(fp)
   1f0ec:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1f0f0:	e0fffd17 	ldw	r3,-12(fp)
   1f0f4:	d0a03a04 	addi	r2,gp,-32536
   1f0f8:	18bfcf1e 	bne	r3,r2,1f038 <__alt_mem_Flash_flash_data+0xf401f038>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1f0fc:	00142bc0 	call	142bc <OSTimeTick>
}
   1f100:	e037883a 	mov	sp,fp
   1f104:	dfc00117 	ldw	ra,4(sp)
   1f108:	df000017 	ldw	fp,0(sp)
   1f10c:	dec00204 	addi	sp,sp,8
   1f110:	f800283a 	ret

0001f114 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1f114:	deffff04 	addi	sp,sp,-4
   1f118:	df000015 	stw	fp,0(sp)
   1f11c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1f120:	000170fa 	wrctl	ienable,zero
}
   1f124:	e037883a 	mov	sp,fp
   1f128:	df000017 	ldw	fp,0(sp)
   1f12c:	dec00104 	addi	sp,sp,4
   1f130:	f800283a 	ret

0001f134 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1f134:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1f138:	d0e00e17 	ldw	r3,-32712(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1f13c:	d1284217 	ldw	r4,-24312(gp)

      stw ra,  0(sp)
   1f140:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1f144:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1f148:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1f14c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1f150:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1f154:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1f158:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1f15c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1f160:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1f164:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1f168:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1f16c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1f170:	001f3a00 	call	1f3a0 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1f174:	d1283d17 	ldw	r4,-24332(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1f178:	d1683507 	ldb	r5,-24364(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1f17c:	d1284215 	stw	r4,-24312(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1f180:	d1683545 	stb	r5,-24363(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1f184:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1f188:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1f18c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1f190:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1f194:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1f198:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1f19c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1f1a0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1f1a4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1f1a8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1f1ac:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1f1b0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1f1b4:	d0e00e15 	stw	r3,-32712(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1f1b8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1f1bc:	f800283a 	ret

0001f1c0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1f1c0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1f1c4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1f1c8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1f1cc:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1f1d0:	001f3a00 	call	1f3a0 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1f1d4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1f1d8:	d4a83345 	stb	r18,-24371(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1f1dc:	003fe506 	br	1f174 <__alt_mem_Flash_flash_data+0xf401f174>

0001f1e0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1f1e0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1f1e4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1f1e8:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1f1ec:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1f1f0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1f1f4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1f1f8:	dec00204 	addi	sp,sp,8

      callr r2
   1f1fc:	103ee83a 	callr	r2

      nop
   1f200:	0001883a 	nop

0001f204 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1f204:	defff704 	addi	sp,sp,-36
   1f208:	dfc00815 	stw	ra,32(sp)
   1f20c:	df000715 	stw	fp,28(sp)
   1f210:	df000704 	addi	fp,sp,28
   1f214:	e13ffc15 	stw	r4,-16(fp)
   1f218:	e17ffd15 	stw	r5,-12(fp)
   1f21c:	e1bffe15 	stw	r6,-8(fp)
   1f220:	3805883a 	mov	r2,r7
   1f224:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1f228:	e0fffe17 	ldw	r3,-8(fp)
   1f22c:	00bfff04 	movi	r2,-4
   1f230:	1884703a 	and	r2,r3,r2
   1f234:	10bef704 	addi	r2,r2,-1060
   1f238:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1f23c:	e13ff917 	ldw	r4,-28(fp)
   1f240:	000b883a 	mov	r5,zero
   1f244:	01810904 	movi	r6,1060
   1f248:	000ae380 	call	ae38 <memset>
   1f24c:	e0bff917 	ldw	r2,-28(fp)
   1f250:	10c0bb04 	addi	r3,r2,748
   1f254:	e0bff917 	ldw	r2,-28(fp)
   1f258:	10c00115 	stw	r3,4(r2)
   1f25c:	e0bff917 	ldw	r2,-28(fp)
   1f260:	10c0d504 	addi	r3,r2,852
   1f264:	e0bff917 	ldw	r2,-28(fp)
   1f268:	10c00215 	stw	r3,8(r2)
   1f26c:	e0bff917 	ldw	r2,-28(fp)
   1f270:	10c0ef04 	addi	r3,r2,956
   1f274:	e0bff917 	ldw	r2,-28(fp)
   1f278:	10c00315 	stw	r3,12(r2)
   1f27c:	e0fff917 	ldw	r3,-28(fp)
   1f280:	008000b4 	movhi	r2,2
   1f284:	1081fc04 	addi	r2,r2,2032
   1f288:	18800d15 	stw	r2,52(r3)
   1f28c:	e0bff917 	ldw	r2,-28(fp)
   1f290:	00c00044 	movi	r3,1
   1f294:	10c02915 	stw	r3,164(r2)
   1f298:	10002a15 	stw	zero,168(r2)
   1f29c:	e0bff917 	ldw	r2,-28(fp)
   1f2a0:	00ccc384 	movi	r3,13070
   1f2a4:	10c02b0d 	sth	r3,172(r2)
   1f2a8:	e0bff917 	ldw	r2,-28(fp)
   1f2ac:	00eaf344 	movi	r3,-21555
   1f2b0:	10c02b8d 	sth	r3,174(r2)
   1f2b4:	e0bff917 	ldw	r2,-28(fp)
   1f2b8:	00c48d04 	movi	r3,4660
   1f2bc:	10c02c0d 	sth	r3,176(r2)
   1f2c0:	e0bff917 	ldw	r2,-28(fp)
   1f2c4:	00f99b44 	movi	r3,-6547
   1f2c8:	10c02c8d 	sth	r3,178(r2)
   1f2cc:	e0bff917 	ldw	r2,-28(fp)
   1f2d0:	00f7bb04 	movi	r3,-8468
   1f2d4:	10c02d0d 	sth	r3,180(r2)
   1f2d8:	e0bff917 	ldw	r2,-28(fp)
   1f2dc:	00c00144 	movi	r3,5
   1f2e0:	10c02d8d 	sth	r3,182(r2)
   1f2e4:	e0bff917 	ldw	r2,-28(fp)
   1f2e8:	00c002c4 	movi	r3,11
   1f2ec:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1f2f0:	e0bff917 	ldw	r2,-28(fp)
   1f2f4:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1f2f8:	e0bffa17 	ldw	r2,-24(fp)
   1f2fc:	10bff304 	addi	r2,r2,-52
   1f300:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1f304:	e0bffb17 	ldw	r2,-20(fp)
   1f308:	10800c04 	addi	r2,r2,48
   1f30c:	e0fffc17 	ldw	r3,-16(fp)
   1f310:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1f314:	e0bffb17 	ldw	r2,-20(fp)
   1f318:	10800b04 	addi	r2,r2,44
   1f31c:	e0fffd17 	ldw	r3,-12(fp)
   1f320:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1f324:	e0bffb17 	ldw	r2,-20(fp)
   1f328:	10800a04 	addi	r2,r2,40
   1f32c:	e0fff917 	ldw	r3,-28(fp)
   1f330:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1f334:	008000b4 	movhi	r2,2
   1f338:	10bc7804 	addi	r2,r2,-3616
   1f33c:	10c00104 	addi	r3,r2,4
   1f340:	e0bffb17 	ldw	r2,-20(fp)
   1f344:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1f348:	e0bffb17 	ldw	r2,-20(fp)
}
   1f34c:	e037883a 	mov	sp,fp
   1f350:	dfc00117 	ldw	ra,4(sp)
   1f354:	df000017 	ldw	fp,0(sp)
   1f358:	dec00204 	addi	sp,sp,8
   1f35c:	f800283a 	ret

0001f360 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1f360:	defffe04 	addi	sp,sp,-8
   1f364:	df000115 	stw	fp,4(sp)
   1f368:	df000104 	addi	fp,sp,4
   1f36c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1f370:	e037883a 	mov	sp,fp
   1f374:	df000017 	ldw	fp,0(sp)
   1f378:	dec00104 	addi	sp,sp,4
   1f37c:	f800283a 	ret

0001f380 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1f380:	defffe04 	addi	sp,sp,-8
   1f384:	df000115 	stw	fp,4(sp)
   1f388:	df000104 	addi	fp,sp,4
   1f38c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1f390:	e037883a 	mov	sp,fp
   1f394:	df000017 	ldw	fp,0(sp)
   1f398:	dec00104 	addi	sp,sp,4
   1f39c:	f800283a 	ret

0001f3a0 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1f3a0:	deffff04 	addi	sp,sp,-4
   1f3a4:	df000015 	stw	fp,0(sp)
   1f3a8:	d839883a 	mov	fp,sp
}
   1f3ac:	e037883a 	mov	sp,fp
   1f3b0:	df000017 	ldw	fp,0(sp)
   1f3b4:	dec00104 	addi	sp,sp,4
   1f3b8:	f800283a 	ret

0001f3bc <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1f3bc:	deffff04 	addi	sp,sp,-4
   1f3c0:	df000015 	stw	fp,0(sp)
   1f3c4:	d839883a 	mov	fp,sp
}
   1f3c8:	e037883a 	mov	sp,fp
   1f3cc:	df000017 	ldw	fp,0(sp)
   1f3d0:	dec00104 	addi	sp,sp,4
   1f3d4:	f800283a 	ret

0001f3d8 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1f3d8:	deffff04 	addi	sp,sp,-4
   1f3dc:	df000015 	stw	fp,0(sp)
   1f3e0:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1f3e4:	e037883a 	mov	sp,fp
   1f3e8:	df000017 	ldw	fp,0(sp)
   1f3ec:	dec00104 	addi	sp,sp,4
   1f3f0:	f800283a 	ret

0001f3f4 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1f3f4:	deffff04 	addi	sp,sp,-4
   1f3f8:	df000015 	stw	fp,0(sp)
   1f3fc:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1f400:	e037883a 	mov	sp,fp
   1f404:	df000017 	ldw	fp,0(sp)
   1f408:	dec00104 	addi	sp,sp,4
   1f40c:	f800283a 	ret

0001f410 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1f410:	deffff04 	addi	sp,sp,-4
   1f414:	df000015 	stw	fp,0(sp)
   1f418:	d839883a 	mov	fp,sp
}
   1f41c:	e037883a 	mov	sp,fp
   1f420:	df000017 	ldw	fp,0(sp)
   1f424:	dec00104 	addi	sp,sp,4
   1f428:	f800283a 	ret

0001f42c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1f42c:	deffff04 	addi	sp,sp,-4
   1f430:	df000015 	stw	fp,0(sp)
   1f434:	d839883a 	mov	fp,sp
}
   1f438:	e037883a 	mov	sp,fp
   1f43c:	df000017 	ldw	fp,0(sp)
   1f440:	dec00104 	addi	sp,sp,4
   1f444:	f800283a 	ret

0001f448 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1f448:	defffe04 	addi	sp,sp,-8
   1f44c:	df000115 	stw	fp,4(sp)
   1f450:	df000104 	addi	fp,sp,4
   1f454:	e13fff15 	stw	r4,-4(fp)
}
   1f458:	e037883a 	mov	sp,fp
   1f45c:	df000017 	ldw	fp,0(sp)
   1f460:	dec00104 	addi	sp,sp,4
   1f464:	f800283a 	ret

0001f468 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1f468:	defffb04 	addi	sp,sp,-20
   1f46c:	dfc00415 	stw	ra,16(sp)
   1f470:	df000315 	stw	fp,12(sp)
   1f474:	df000304 	addi	fp,sp,12
   1f478:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1f47c:	008000b4 	movhi	r2,2
   1f480:	10899f04 	addi	r2,r2,9852
   1f484:	10800017 	ldw	r2,0(r2)
   1f488:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1f48c:	00003106 	br	1f554 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1f490:	e0bffd17 	ldw	r2,-12(fp)
   1f494:	10800217 	ldw	r2,8(r2)
   1f498:	1009883a 	mov	r4,r2
   1f49c:	00035180 	call	3518 <strlen>
   1f4a0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1f4a4:	e0bffd17 	ldw	r2,-12(fp)
   1f4a8:	10c00217 	ldw	r3,8(r2)
   1f4ac:	e0bffe17 	ldw	r2,-8(fp)
   1f4b0:	10bfffc4 	addi	r2,r2,-1
   1f4b4:	1885883a 	add	r2,r3,r2
   1f4b8:	10800003 	ldbu	r2,0(r2)
   1f4bc:	10803fcc 	andi	r2,r2,255
   1f4c0:	1080201c 	xori	r2,r2,128
   1f4c4:	10bfe004 	addi	r2,r2,-128
   1f4c8:	10800bd8 	cmpnei	r2,r2,47
   1f4cc:	1000031e 	bne	r2,zero,1f4dc <alt_find_file+0x74>
    {
      len -= 1;
   1f4d0:	e0bffe17 	ldw	r2,-8(fp)
   1f4d4:	10bfffc4 	addi	r2,r2,-1
   1f4d8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1f4dc:	e0bffe17 	ldw	r2,-8(fp)
   1f4e0:	e0ffff17 	ldw	r3,-4(fp)
   1f4e4:	1885883a 	add	r2,r3,r2
   1f4e8:	10800003 	ldbu	r2,0(r2)
   1f4ec:	10803fcc 	andi	r2,r2,255
   1f4f0:	1080201c 	xori	r2,r2,128
   1f4f4:	10bfe004 	addi	r2,r2,-128
   1f4f8:	10800be0 	cmpeqi	r2,r2,47
   1f4fc:	1000081e 	bne	r2,zero,1f520 <alt_find_file+0xb8>
   1f500:	e0bffe17 	ldw	r2,-8(fp)
   1f504:	e0ffff17 	ldw	r3,-4(fp)
   1f508:	1885883a 	add	r2,r3,r2
   1f50c:	10800003 	ldbu	r2,0(r2)
   1f510:	10803fcc 	andi	r2,r2,255
   1f514:	1080201c 	xori	r2,r2,128
   1f518:	10bfe004 	addi	r2,r2,-128
   1f51c:	10000a1e 	bne	r2,zero,1f548 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1f520:	e0bffd17 	ldw	r2,-12(fp)
   1f524:	10c00217 	ldw	r3,8(r2)
   1f528:	e0bffe17 	ldw	r2,-8(fp)
   1f52c:	1809883a 	mov	r4,r3
   1f530:	e17fff17 	ldw	r5,-4(fp)
   1f534:	100d883a 	mov	r6,r2
   1f538:	001f7ec0 	call	1f7ec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1f53c:	1000021e 	bne	r2,zero,1f548 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1f540:	e0bffd17 	ldw	r2,-12(fp)
   1f544:	00000806 	br	1f568 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1f548:	e0bffd17 	ldw	r2,-12(fp)
   1f54c:	10800017 	ldw	r2,0(r2)
   1f550:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1f554:	e0fffd17 	ldw	r3,-12(fp)
   1f558:	008000b4 	movhi	r2,2
   1f55c:	10899f04 	addi	r2,r2,9852
   1f560:	18bfcb1e 	bne	r3,r2,1f490 <__alt_mem_Flash_flash_data+0xf401f490>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1f564:	0005883a 	mov	r2,zero
}
   1f568:	e037883a 	mov	sp,fp
   1f56c:	dfc00117 	ldw	ra,4(sp)
   1f570:	df000017 	ldw	fp,0(sp)
   1f574:	dec00204 	addi	sp,sp,8
   1f578:	f800283a 	ret

0001f57c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1f57c:	defff904 	addi	sp,sp,-28
   1f580:	dfc00615 	stw	ra,24(sp)
   1f584:	df000515 	stw	fp,20(sp)
   1f588:	df000504 	addi	fp,sp,20
   1f58c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1f590:	00bffa04 	movi	r2,-24
   1f594:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1f598:	008000b4 	movhi	r2,2
   1f59c:	1091b704 	addi	r2,r2,18140
   1f5a0:	10800017 	ldw	r2,0(r2)
   1f5a4:	e0bffd15 	stw	r2,-12(fp)
   1f5a8:	e03ffe0d 	sth	zero,-8(fp)
   1f5ac:	e0fffe0b 	ldhu	r3,-8(fp)
   1f5b0:	e0bffe84 	addi	r2,fp,-6
   1f5b4:	e13ffd17 	ldw	r4,-12(fp)
   1f5b8:	180b883a 	mov	r5,r3
   1f5bc:	100d883a 	mov	r6,r2
   1f5c0:	00198e00 	call	198e0 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1f5c4:	e03ffb15 	stw	zero,-20(fp)
   1f5c8:	00001d06 	br	1f640 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   1f5cc:	008000b4 	movhi	r2,2
   1f5d0:	10843004 	addi	r2,r2,4288
   1f5d4:	e0fffb17 	ldw	r3,-20(fp)
   1f5d8:	18c00324 	muli	r3,r3,12
   1f5dc:	10c5883a 	add	r2,r2,r3
   1f5e0:	10800017 	ldw	r2,0(r2)
   1f5e4:	1000131e 	bne	r2,zero,1f634 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   1f5e8:	008000b4 	movhi	r2,2
   1f5ec:	10843004 	addi	r2,r2,4288
   1f5f0:	e0fffb17 	ldw	r3,-20(fp)
   1f5f4:	18c00324 	muli	r3,r3,12
   1f5f8:	10c5883a 	add	r2,r2,r3
   1f5fc:	e0ffff17 	ldw	r3,-4(fp)
   1f600:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1f604:	008000b4 	movhi	r2,2
   1f608:	1089a304 	addi	r2,r2,9868
   1f60c:	10c00017 	ldw	r3,0(r2)
   1f610:	e0bffb17 	ldw	r2,-20(fp)
   1f614:	1880040e 	bge	r3,r2,1f628 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   1f618:	008000b4 	movhi	r2,2
   1f61c:	1089a304 	addi	r2,r2,9868
   1f620:	e0fffb17 	ldw	r3,-20(fp)
   1f624:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1f628:	e0bffb17 	ldw	r2,-20(fp)
   1f62c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1f630:	00000606 	br	1f64c <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1f634:	e0bffb17 	ldw	r2,-20(fp)
   1f638:	10800044 	addi	r2,r2,1
   1f63c:	e0bffb15 	stw	r2,-20(fp)
   1f640:	e0bffb17 	ldw	r2,-20(fp)
   1f644:	10800810 	cmplti	r2,r2,32
   1f648:	103fe01e 	bne	r2,zero,1f5cc <__alt_mem_Flash_flash_data+0xf401f5cc>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1f64c:	008000b4 	movhi	r2,2
   1f650:	1091b704 	addi	r2,r2,18140
   1f654:	10800017 	ldw	r2,0(r2)
   1f658:	1009883a 	mov	r4,r2
   1f65c:	0019cb40 	call	19cb4 <OSSemPost>

  return rc;
   1f660:	e0bffc17 	ldw	r2,-16(fp)
}
   1f664:	e037883a 	mov	sp,fp
   1f668:	dfc00117 	ldw	ra,4(sp)
   1f66c:	df000017 	ldw	fp,0(sp)
   1f670:	dec00204 	addi	sp,sp,8
   1f674:	f800283a 	ret

0001f678 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1f678:	defffb04 	addi	sp,sp,-20
   1f67c:	df000415 	stw	fp,16(sp)
   1f680:	df000404 	addi	fp,sp,16
   1f684:	e13ffe15 	stw	r4,-8(fp)
   1f688:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1f68c:	e0bfff17 	ldw	r2,-4(fp)
   1f690:	10840070 	cmpltui	r2,r2,4097
   1f694:	1000021e 	bne	r2,zero,1f6a0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1f698:	00840004 	movi	r2,4096
   1f69c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1f6a0:	e0fffe17 	ldw	r3,-8(fp)
   1f6a4:	e0bfff17 	ldw	r2,-4(fp)
   1f6a8:	1885883a 	add	r2,r3,r2
   1f6ac:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1f6b0:	e0bffe17 	ldw	r2,-8(fp)
   1f6b4:	e0bffc15 	stw	r2,-16(fp)
   1f6b8:	00000506 	br	1f6d0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1f6bc:	e0bffc17 	ldw	r2,-16(fp)
   1f6c0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1f6c4:	e0bffc17 	ldw	r2,-16(fp)
   1f6c8:	10800804 	addi	r2,r2,32
   1f6cc:	e0bffc15 	stw	r2,-16(fp)
   1f6d0:	e0fffc17 	ldw	r3,-16(fp)
   1f6d4:	e0bffd17 	ldw	r2,-12(fp)
   1f6d8:	18bff836 	bltu	r3,r2,1f6bc <__alt_mem_Flash_flash_data+0xf401f6bc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1f6dc:	e0bffe17 	ldw	r2,-8(fp)
   1f6e0:	108007cc 	andi	r2,r2,31
   1f6e4:	10000226 	beq	r2,zero,1f6f0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1f6e8:	e0bffc17 	ldw	r2,-16(fp)
   1f6ec:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1f6f0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1f6f4:	e037883a 	mov	sp,fp
   1f6f8:	df000017 	ldw	fp,0(sp)
   1f6fc:	dec00104 	addi	sp,sp,4
   1f700:	f800283a 	ret

0001f704 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1f704:	defffe04 	addi	sp,sp,-8
   1f708:	df000115 	stw	fp,4(sp)
   1f70c:	df000104 	addi	fp,sp,4
   1f710:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1f714:	e0bfff17 	ldw	r2,-4(fp)
   1f718:	10bffe84 	addi	r2,r2,-6
   1f71c:	10c00428 	cmpgeui	r3,r2,16
   1f720:	18001a1e 	bne	r3,zero,1f78c <alt_exception_cause_generated_bad_addr+0x88>
   1f724:	100690ba 	slli	r3,r2,2
   1f728:	008000b4 	movhi	r2,2
   1f72c:	10bdcf04 	addi	r2,r2,-2244
   1f730:	1885883a 	add	r2,r3,r2
   1f734:	10800017 	ldw	r2,0(r2)
   1f738:	1000683a 	jmp	r2
   1f73c:	0001f77c 	xorhi	zero,zero,2013
   1f740:	0001f77c 	xorhi	zero,zero,2013
   1f744:	0001f78c 	andi	zero,zero,2014
   1f748:	0001f78c 	andi	zero,zero,2014
   1f74c:	0001f78c 	andi	zero,zero,2014
   1f750:	0001f77c 	xorhi	zero,zero,2013
   1f754:	0001f784 	movi	zero,2014
   1f758:	0001f78c 	andi	zero,zero,2014
   1f75c:	0001f77c 	xorhi	zero,zero,2013
   1f760:	0001f77c 	xorhi	zero,zero,2013
   1f764:	0001f78c 	andi	zero,zero,2014
   1f768:	0001f77c 	xorhi	zero,zero,2013
   1f76c:	0001f784 	movi	zero,2014
   1f770:	0001f78c 	andi	zero,zero,2014
   1f774:	0001f78c 	andi	zero,zero,2014
   1f778:	0001f77c 	xorhi	zero,zero,2013
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1f77c:	00800044 	movi	r2,1
   1f780:	00000306 	br	1f790 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1f784:	0005883a 	mov	r2,zero
   1f788:	00000106 	br	1f790 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1f78c:	0005883a 	mov	r2,zero
  }
}
   1f790:	e037883a 	mov	sp,fp
   1f794:	df000017 	ldw	fp,0(sp)
   1f798:	dec00104 	addi	sp,sp,4
   1f79c:	f800283a 	ret

0001f7a0 <atexit>:
   1f7a0:	200b883a 	mov	r5,r4
   1f7a4:	000d883a 	mov	r6,zero
   1f7a8:	0009883a 	mov	r4,zero
   1f7ac:	000f883a 	mov	r7,zero
   1f7b0:	001f8681 	jmpi	1f868 <__register_exitproc>

0001f7b4 <exit>:
   1f7b4:	defffe04 	addi	sp,sp,-8
   1f7b8:	000b883a 	mov	r5,zero
   1f7bc:	dc000015 	stw	r16,0(sp)
   1f7c0:	dfc00115 	stw	ra,4(sp)
   1f7c4:	2021883a 	mov	r16,r4
   1f7c8:	001f97c0 	call	1f97c <__call_exitprocs>
   1f7cc:	008000b4 	movhi	r2,2
   1f7d0:	10899904 	addi	r2,r2,9828
   1f7d4:	11000017 	ldw	r4,0(r2)
   1f7d8:	20800f17 	ldw	r2,60(r4)
   1f7dc:	10000126 	beq	r2,zero,1f7e4 <exit+0x30>
   1f7e0:	103ee83a 	callr	r2
   1f7e4:	8009883a 	mov	r4,r16
   1f7e8:	001fb100 	call	1fb10 <_exit>

0001f7ec <memcmp>:
   1f7ec:	01c000c4 	movi	r7,3
   1f7f0:	3980192e 	bgeu	r7,r6,1f858 <memcmp+0x6c>
   1f7f4:	2144b03a 	or	r2,r4,r5
   1f7f8:	11c4703a 	and	r2,r2,r7
   1f7fc:	10000f26 	beq	r2,zero,1f83c <memcmp+0x50>
   1f800:	20800003 	ldbu	r2,0(r4)
   1f804:	28c00003 	ldbu	r3,0(r5)
   1f808:	10c0151e 	bne	r2,r3,1f860 <memcmp+0x74>
   1f80c:	31bfff84 	addi	r6,r6,-2
   1f810:	01ffffc4 	movi	r7,-1
   1f814:	00000406 	br	1f828 <memcmp+0x3c>
   1f818:	20800003 	ldbu	r2,0(r4)
   1f81c:	28c00003 	ldbu	r3,0(r5)
   1f820:	31bfffc4 	addi	r6,r6,-1
   1f824:	10c00e1e 	bne	r2,r3,1f860 <memcmp+0x74>
   1f828:	21000044 	addi	r4,r4,1
   1f82c:	29400044 	addi	r5,r5,1
   1f830:	31fff91e 	bne	r6,r7,1f818 <__alt_mem_Flash_flash_data+0xf401f818>
   1f834:	0005883a 	mov	r2,zero
   1f838:	f800283a 	ret
   1f83c:	20c00017 	ldw	r3,0(r4)
   1f840:	28800017 	ldw	r2,0(r5)
   1f844:	1880041e 	bne	r3,r2,1f858 <memcmp+0x6c>
   1f848:	31bfff04 	addi	r6,r6,-4
   1f84c:	21000104 	addi	r4,r4,4
   1f850:	29400104 	addi	r5,r5,4
   1f854:	39bff936 	bltu	r7,r6,1f83c <__alt_mem_Flash_flash_data+0xf401f83c>
   1f858:	303fe91e 	bne	r6,zero,1f800 <__alt_mem_Flash_flash_data+0xf401f800>
   1f85c:	003ff506 	br	1f834 <__alt_mem_Flash_flash_data+0xf401f834>
   1f860:	10c5c83a 	sub	r2,r2,r3
   1f864:	f800283a 	ret

0001f868 <__register_exitproc>:
   1f868:	008000b4 	movhi	r2,2
   1f86c:	defffa04 	addi	sp,sp,-24
   1f870:	10899904 	addi	r2,r2,9828
   1f874:	dc000315 	stw	r16,12(sp)
   1f878:	14000017 	ldw	r16,0(r2)
   1f87c:	dc400415 	stw	r17,16(sp)
   1f880:	dfc00515 	stw	ra,20(sp)
   1f884:	80805217 	ldw	r2,328(r16)
   1f888:	2023883a 	mov	r17,r4
   1f88c:	10003626 	beq	r2,zero,1f968 <__register_exitproc+0x100>
   1f890:	10c00117 	ldw	r3,4(r2)
   1f894:	010007c4 	movi	r4,31
   1f898:	20c00e16 	blt	r4,r3,1f8d4 <__register_exitproc+0x6c>
   1f89c:	1a400044 	addi	r9,r3,1
   1f8a0:	8800211e 	bne	r17,zero,1f928 <__register_exitproc+0xc0>
   1f8a4:	18c00084 	addi	r3,r3,2
   1f8a8:	18c7883a 	add	r3,r3,r3
   1f8ac:	18c7883a 	add	r3,r3,r3
   1f8b0:	12400115 	stw	r9,4(r2)
   1f8b4:	10c7883a 	add	r3,r2,r3
   1f8b8:	19400015 	stw	r5,0(r3)
   1f8bc:	0005883a 	mov	r2,zero
   1f8c0:	dfc00517 	ldw	ra,20(sp)
   1f8c4:	dc400417 	ldw	r17,16(sp)
   1f8c8:	dc000317 	ldw	r16,12(sp)
   1f8cc:	dec00604 	addi	sp,sp,24
   1f8d0:	f800283a 	ret
   1f8d4:	00800034 	movhi	r2,0
   1f8d8:	10800004 	addi	r2,r2,0
   1f8dc:	10002526 	beq	r2,zero,1f974 <__register_exitproc+0x10c>
   1f8e0:	01006404 	movi	r4,400
   1f8e4:	d9400015 	stw	r5,0(sp)
   1f8e8:	d9800115 	stw	r6,4(sp)
   1f8ec:	d9c00215 	stw	r7,8(sp)
   1f8f0:	00000000 	call	0 <__alt_mem_SDRAM>
   1f8f4:	d9400017 	ldw	r5,0(sp)
   1f8f8:	d9800117 	ldw	r6,4(sp)
   1f8fc:	d9c00217 	ldw	r7,8(sp)
   1f900:	10001c26 	beq	r2,zero,1f974 <__register_exitproc+0x10c>
   1f904:	80c05217 	ldw	r3,328(r16)
   1f908:	10000115 	stw	zero,4(r2)
   1f90c:	02400044 	movi	r9,1
   1f910:	10c00015 	stw	r3,0(r2)
   1f914:	80805215 	stw	r2,328(r16)
   1f918:	10006215 	stw	zero,392(r2)
   1f91c:	10006315 	stw	zero,396(r2)
   1f920:	0007883a 	mov	r3,zero
   1f924:	883fdf26 	beq	r17,zero,1f8a4 <__alt_mem_Flash_flash_data+0xf401f8a4>
   1f928:	18d1883a 	add	r8,r3,r3
   1f92c:	4211883a 	add	r8,r8,r8
   1f930:	1211883a 	add	r8,r2,r8
   1f934:	41802215 	stw	r6,136(r8)
   1f938:	01000044 	movi	r4,1
   1f93c:	11806217 	ldw	r6,392(r2)
   1f940:	20c8983a 	sll	r4,r4,r3
   1f944:	310cb03a 	or	r6,r6,r4
   1f948:	11806215 	stw	r6,392(r2)
   1f94c:	41c04215 	stw	r7,264(r8)
   1f950:	01800084 	movi	r6,2
   1f954:	89bfd31e 	bne	r17,r6,1f8a4 <__alt_mem_Flash_flash_data+0xf401f8a4>
   1f958:	11806317 	ldw	r6,396(r2)
   1f95c:	3108b03a 	or	r4,r6,r4
   1f960:	11006315 	stw	r4,396(r2)
   1f964:	003fcf06 	br	1f8a4 <__alt_mem_Flash_flash_data+0xf401f8a4>
   1f968:	80805304 	addi	r2,r16,332
   1f96c:	80805215 	stw	r2,328(r16)
   1f970:	003fc706 	br	1f890 <__alt_mem_Flash_flash_data+0xf401f890>
   1f974:	00bfffc4 	movi	r2,-1
   1f978:	003fd106 	br	1f8c0 <__alt_mem_Flash_flash_data+0xf401f8c0>

0001f97c <__call_exitprocs>:
   1f97c:	008000b4 	movhi	r2,2
   1f980:	10899904 	addi	r2,r2,9828
   1f984:	10800017 	ldw	r2,0(r2)
   1f988:	defff404 	addi	sp,sp,-48
   1f98c:	dd800815 	stw	r22,32(sp)
   1f990:	d8800015 	stw	r2,0(sp)
   1f994:	10805204 	addi	r2,r2,328
   1f998:	dd000615 	stw	r20,24(sp)
   1f99c:	dc800415 	stw	r18,16(sp)
   1f9a0:	dfc00b15 	stw	ra,44(sp)
   1f9a4:	df000a15 	stw	fp,40(sp)
   1f9a8:	ddc00915 	stw	r23,36(sp)
   1f9ac:	dd400715 	stw	r21,28(sp)
   1f9b0:	dcc00515 	stw	r19,20(sp)
   1f9b4:	dc400315 	stw	r17,12(sp)
   1f9b8:	dc000215 	stw	r16,8(sp)
   1f9bc:	2025883a 	mov	r18,r4
   1f9c0:	2829883a 	mov	r20,r5
   1f9c4:	d8800115 	stw	r2,4(sp)
   1f9c8:	05bfffc4 	movi	r22,-1
   1f9cc:	d8800017 	ldw	r2,0(sp)
   1f9d0:	14c05217 	ldw	r19,328(r2)
   1f9d4:	98001d26 	beq	r19,zero,1fa4c <__call_exitprocs+0xd0>
   1f9d8:	dd400117 	ldw	r21,4(sp)
   1f9dc:	98800117 	ldw	r2,4(r19)
   1f9e0:	173fffc4 	addi	fp,r2,-1
   1f9e4:	e0000d16 	blt	fp,zero,1fa1c <__call_exitprocs+0xa0>
   1f9e8:	14000044 	addi	r16,r2,1
   1f9ec:	8421883a 	add	r16,r16,r16
   1f9f0:	8421883a 	add	r16,r16,r16
   1f9f4:	84402004 	addi	r17,r16,128
   1f9f8:	9c63883a 	add	r17,r19,r17
   1f9fc:	9c21883a 	add	r16,r19,r16
   1fa00:	a0001e26 	beq	r20,zero,1fa7c <__call_exitprocs+0x100>
   1fa04:	80804017 	ldw	r2,256(r16)
   1fa08:	15001c26 	beq	r2,r20,1fa7c <__call_exitprocs+0x100>
   1fa0c:	e73fffc4 	addi	fp,fp,-1
   1fa10:	843fff04 	addi	r16,r16,-4
   1fa14:	8c7fff04 	addi	r17,r17,-4
   1fa18:	e5bff91e 	bne	fp,r22,1fa00 <__alt_mem_Flash_flash_data+0xf401fa00>
   1fa1c:	00800034 	movhi	r2,0
   1fa20:	10800004 	addi	r2,r2,0
   1fa24:	10000926 	beq	r2,zero,1fa4c <__call_exitprocs+0xd0>
   1fa28:	98800117 	ldw	r2,4(r19)
   1fa2c:	1000311e 	bne	r2,zero,1faf4 <__call_exitprocs+0x178>
   1fa30:	98800017 	ldw	r2,0(r19)
   1fa34:	10003426 	beq	r2,zero,1fb08 <__call_exitprocs+0x18c>
   1fa38:	9809883a 	mov	r4,r19
   1fa3c:	a8800015 	stw	r2,0(r21)
   1fa40:	00000000 	call	0 <__alt_mem_SDRAM>
   1fa44:	acc00017 	ldw	r19,0(r21)
   1fa48:	983fe41e 	bne	r19,zero,1f9dc <__alt_mem_Flash_flash_data+0xf401f9dc>
   1fa4c:	dfc00b17 	ldw	ra,44(sp)
   1fa50:	df000a17 	ldw	fp,40(sp)
   1fa54:	ddc00917 	ldw	r23,36(sp)
   1fa58:	dd800817 	ldw	r22,32(sp)
   1fa5c:	dd400717 	ldw	r21,28(sp)
   1fa60:	dd000617 	ldw	r20,24(sp)
   1fa64:	dcc00517 	ldw	r19,20(sp)
   1fa68:	dc800417 	ldw	r18,16(sp)
   1fa6c:	dc400317 	ldw	r17,12(sp)
   1fa70:	dc000217 	ldw	r16,8(sp)
   1fa74:	dec00c04 	addi	sp,sp,48
   1fa78:	f800283a 	ret
   1fa7c:	98800117 	ldw	r2,4(r19)
   1fa80:	80c00017 	ldw	r3,0(r16)
   1fa84:	10bfffc4 	addi	r2,r2,-1
   1fa88:	17001526 	beq	r2,fp,1fae0 <__call_exitprocs+0x164>
   1fa8c:	80000015 	stw	zero,0(r16)
   1fa90:	183fde26 	beq	r3,zero,1fa0c <__alt_mem_Flash_flash_data+0xf401fa0c>
   1fa94:	00800044 	movi	r2,1
   1fa98:	1708983a 	sll	r4,r2,fp
   1fa9c:	98806217 	ldw	r2,392(r19)
   1faa0:	9dc00117 	ldw	r23,4(r19)
   1faa4:	2084703a 	and	r2,r4,r2
   1faa8:	1000061e 	bne	r2,zero,1fac4 <__call_exitprocs+0x148>
   1faac:	183ee83a 	callr	r3
   1fab0:	98800117 	ldw	r2,4(r19)
   1fab4:	15ffc51e 	bne	r2,r23,1f9cc <__alt_mem_Flash_flash_data+0xf401f9cc>
   1fab8:	a8800017 	ldw	r2,0(r21)
   1fabc:	14ffd326 	beq	r2,r19,1fa0c <__alt_mem_Flash_flash_data+0xf401fa0c>
   1fac0:	003fc206 	br	1f9cc <__alt_mem_Flash_flash_data+0xf401f9cc>
   1fac4:	98806317 	ldw	r2,396(r19)
   1fac8:	2084703a 	and	r2,r4,r2
   1facc:	1000061e 	bne	r2,zero,1fae8 <__call_exitprocs+0x16c>
   1fad0:	89400017 	ldw	r5,0(r17)
   1fad4:	9009883a 	mov	r4,r18
   1fad8:	183ee83a 	callr	r3
   1fadc:	003ff406 	br	1fab0 <__alt_mem_Flash_flash_data+0xf401fab0>
   1fae0:	9f000115 	stw	fp,4(r19)
   1fae4:	003fea06 	br	1fa90 <__alt_mem_Flash_flash_data+0xf401fa90>
   1fae8:	89000017 	ldw	r4,0(r17)
   1faec:	183ee83a 	callr	r3
   1faf0:	003fef06 	br	1fab0 <__alt_mem_Flash_flash_data+0xf401fab0>
   1faf4:	98800017 	ldw	r2,0(r19)
   1faf8:	982b883a 	mov	r21,r19
   1fafc:	1027883a 	mov	r19,r2
   1fb00:	983fb61e 	bne	r19,zero,1f9dc <__alt_mem_Flash_flash_data+0xf401f9dc>
   1fb04:	003fd106 	br	1fa4c <__alt_mem_Flash_flash_data+0xf401fa4c>
   1fb08:	0005883a 	mov	r2,zero
   1fb0c:	003ffa06 	br	1faf8 <__alt_mem_Flash_flash_data+0xf401faf8>

0001fb10 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1fb10:	defffd04 	addi	sp,sp,-12
   1fb14:	df000215 	stw	fp,8(sp)
   1fb18:	df000204 	addi	fp,sp,8
   1fb1c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1fb20:	008000b4 	movhi	r2,2
   1fb24:	1091bf44 	addi	r2,r2,18173
   1fb28:	10000005 	stb	zero,0(r2)
   1fb2c:	e0bfff17 	ldw	r2,-4(fp)
   1fb30:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1fb34:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1fb38:	10000226 	beq	r2,zero,1fb44 <_exit+0x34>
    ALT_SIM_FAIL();
   1fb3c:	002af070 	cmpltui	zero,zero,43969
   1fb40:	00000106 	br	1fb48 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   1fb44:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1fb48:	003fff06 	br	1fb48 <__alt_mem_Flash_flash_data+0xf401fb48>
