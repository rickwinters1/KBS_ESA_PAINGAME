
KBS_ESA_PAINGAME.elf:     file format elf32-littlenios2
KBS_ESA_PAINGAME.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001bdac memsz 0x0001bdac flags r-x
    LOAD off    0x0001cdcc vaddr 0x0001bdcc paddr 0x0001dcf4 align 2**12
         filesz 0x00001f28 memsz 0x00001f28 flags rw-
    LOAD off    0x0001fc1c vaddr 0x0001fc1c paddr 0x0001fc1c align 2**12
         filesz 0x00000000 memsz 0x0000dc18 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b3e0  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007a8  0001b624  0001b624  0001c624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f28  0001bdcc  0001dcf4  0001cdcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000dc18  0001fc1c  0001fc1c  0001fc1c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0002d834  0002d834  0001ecf4  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  0001ecf4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001ecf4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001150  00000000  00000000  0001ed18  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003176c  00000000  00000000  0001fe68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b94b  00000000  00000000  000515d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f1a3  00000000  00000000  0005cf1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003d98  00000000  00000000  0006c0c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000055d8  00000000  00000000  0006fe5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016ed8  00000000  00000000  00075434  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0008c30c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000017f0  00000000  00000000  0008c330  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00093962  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00093968  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0009396d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0009396e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0009396f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00093973  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00093977  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0009397b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00093984  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0009398d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00093996  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  000939a1  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  000939ff  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  0009e5c4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0001b624 l    d  .rodata	00000000 .rodata
0001bdcc l    d  .rwdata	00000000 .rwdata
0001fc1c l    d  .bss	00000000 .bss
0002d834 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/rickert/Documents/GitHub/KBS_ESA_PAINGAME/KBS_ESA_PAINGAME_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Contoller.c
00000000 l    df *ABS*	00000000 Game.c
00000000 l    df *ABS*	00000000 Menu.c
00000000 l    df *ABS*	00000000 Singleplayer.c
00000000 l    df *ABS*	00000000 Tutorial.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001b85a l     O .rodata	00000010 zeroes.4255
00004190 l     F .text	000000bc __sbprintf
0001b86a l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000043a0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005f5c l     F .text	00000008 __fp_lock
00005f64 l     F .text	00000008 __fp_unlock
00005f78 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001bdcc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001c210 l     O .rwdata	00000020 lc_ctype_charset
0001c1f0 l     O .rwdata	00000020 lc_message_charset
0001c230 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001b89c l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000093e8 l     F .text	000000fc __sprint_r.part.0
0001b9d0 l     O .rodata	00000010 blanks.4199
0001b9c0 l     O .rodata	00000010 zeroes.4200
0000a7f0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000bcf4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e420 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e540 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e56c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e66c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000e760 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e844 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000ea3c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001dc68 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000ec98 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001dc6c l     O .rwdata	00000004 lockid
0001fca8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001dc70 l     O .rwdata	00000004 lockid
0001fcb0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000106cc l     F .text	00000044 OS_InitMisc
00010710 l     F .text	00000068 OS_InitRdyList
00010870 l     F .text	000000e0 OS_InitTCBList
000105f0 l     F .text	000000dc OS_InitEventList
00010778 l     F .text	0000007c OS_InitTaskIdle
000107f4 l     F .text	0000007c OS_InitTaskStat
00010ad0 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
000128d4 l     F .text	00000110 OS_FlagTaskRdy
0001262c l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00017904 l     F .text	00000038 alt_dev_reg
0001c818 l     O .rwdata	0000106c JTAG_UART
0001d884 l     O .rwdata	00000030 AV_Config
0001d8b4 l     O .rwdata	00000030 Audio_Subsystem_Audio
0001d8e4 l     O .rwdata	0000002c Char_LCD_16x2
0001d910 l     O .rwdata	0000002c IrDA
0001d93c l     O .rwdata	0000002c Expansion_JP5
0001d968 l     O .rwdata	0000002c Green_LEDs
0001d994 l     O .rwdata	0000002c HEX3_HEX0
0001d9c0 l     O .rwdata	0000002c HEX7_HEX4
0001d9ec l     O .rwdata	0000002c Pushbuttons
0001da18 l     O .rwdata	0000002c Red_LEDs
0001da44 l     O .rwdata	0000002c Slider_Switches
0001da70 l     O .rwdata	00000038 PS2_Port
0001daa8 l     O .rwdata	00000038 PS2_Port_Dual
0001dae0 l     O .rwdata	0000002c Serial_Port
0001db0c l     O .rwdata	00000034 USB
0001db40 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
0001db88 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
0001dbdc l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00017fec l     F .text	000002a8 altera_avalon_jtag_uart_irq
00018294 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00018a6c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001a288 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001a4f4 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001a7dc l     F .text	00000050 alt_get_errno
0001a82c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001fd14 g     O .bss	00000004 alt_instruction_exception_handler
00008a60 g     F .text	00000074 _mprec_log10
0001dcbe g     O .rwdata	00000002 OSTaskNameSize
00008b4c g     F .text	0000008c __any_on
0000ad5c g     F .text	00000054 _isatty_r
0001b8a8 g     O .rodata	00000028 __mprec_tinytens
0000e968 g     F .text	000000d4 alt_main
000020c8 g     F .text	000000a8 _puts_r
0002d734 g     O .bss	00000100 alt_irq
00019648 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
0000adb0 g     F .text	0000005c _lseek_r
00013cc0 g     F .text	000000d0 OS_MemInit
0001dcf4 g       *ABS*	00000000 __flash_rwdata_start
000178a0 g     F .text	00000064 OSTimeSet
00018bd8 g     F .text	0000003c alt_up_character_lcd_send_cmd
0000cf88 g     F .text	00000084 .hidden __eqdf2
0000f348 g     F .text	00000610 OSEventPendMulti
0002d834 g       *ABS*	00000000 __alt_heap_start
0001ae38 g     F .text	00000020 OSTaskCreateHook
0000208c g     F .text	0000003c printf
0001dc96 g     O .rwdata	00000002 OSMboxEn
0001fc40 g     O .bss	00000004 random
0000f9ac g     F .text	0000007c OSIntEnter
0000afbc g     F .text	0000009c _wcrtomb_r
000092e0 g     F .text	0000005c __sseek
000062ac g     F .text	00000010 __sinit
00019fd0 g     F .text	00000100 alt_up_char_buffer_string
0000ae68 g     F .text	00000138 __swbuf_r
00019468 g     F .text	00000034 read_CE_bit
0001dca6 g     O .rwdata	00000002 OSQEn
00006d58 g     F .text	0000007c _setlocale_r
00006114 g     F .text	00000068 __sfmoreglue
0000f01c g     F .text	000000d0 __malloc_unlock
0001ae94 g     F .text	0000001c OSTaskStatHook
000197ec g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
00019ce0 g     F .text	00000090 alt_up_rs232_read_fd
0001fcb8 g     O .bss	00000001 OSLockNesting
00000eb8 g     F .text	000000ec menu
0001dce4 g     O .rwdata	00000002 OSDataSize
0001fcb9 g     O .bss	00000001 OSRunning
00019f04 g     F .text	000000cc alt_up_char_buffer_draw
0001fc1c g     O .bss	00000004 counter3
000079b8 g     F .text	0000015c memmove
0001aecc g     F .text	0000001c OSInitHookBegin
0001dcdc g     O .rwdata	00000002 OSTmrSize
00006294 g     F .text	00000018 _cleanup
00007c38 g     F .text	000000a8 _Balloc
0001dc10 g     O .rwdata	00000004 gameModeMenu
0001fcbc g     O .bss	00000004 OSIdleCtr
0000d00c g     F .text	000000e0 .hidden __gtdf2
0001dc18 g     O .rwdata	00000004 xRechts
0001abec g     F .text	00000020 altera_nios2_gen2_irq_init
0001acb8 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00018b64 g     F .text	00000074 get_DDRAM_addr
00010e08 g     F .text	000002d4 OS_TCBInit
0001dc28 g     O .rwdata	00000004 yMenu
00000000 g     F .entry	0000001c __reset
0001dce2 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001dc82 g     O .rwdata	00000002 OSEventSize
0001fcc0 g     O .bss	00000001 OSPrioHighRdy
0000ad04 g     F .text	00000058 _fstat_r
0001ae58 g     F .text	00000020 OSTaskDelHook
0001fc94 g     O .bss	00000004 errno
0000925c g     F .text	00000008 __seofread
0001ac98 g       .text	00000000 OSStartHighRdy
0001fc44 g     O .bss	00000004 pixel_buffer_y
000161a4 g     F .text	000001ec OSTaskCreateExt
00012178 g     F .text	00000068 OSFlagPendGetFlagsRdy
0001dcc2 g     O .rwdata	00000002 OSTaskStatStkSize
00011268 g     F .text	00000308 OSFlagAccept
00014394 g     F .text	000000b8 OSQFlush
00013d90 g     F .text	00000140 OSQAccept
0001fca0 g     O .bss	00000004 alt_argv
0001fc48 g     O .bss	00000004 score1
00025c08 g       *ABS*	00000000 _gp
00015fe8 g     F .text	000001bc OSTaskCreate
00015aa8 g     F .text	00000540 OSTaskChangePrio
0001fcb4 g     O .bss	00000004 alt_heapsem
000018f4 g     F .text	0000003c del_middenlijn
000110dc g     F .text	0000018c OSDebugInit
00016390 g     F .text	000003e0 OSTaskDel
0001dc1c g     O .rwdata	00000004 xBoven
0001c698 g     O .rwdata	00000180 alt_fd_list
0001dc30 g     O .rwdata	00000004 onePress
0002a510 g     O .bss	00000370 OSFlagTbl
000103dc g     F .text	000000b4 OS_EventTaskRemove
0001a434 g     F .text	00000090 alt_find_dev
00007880 g     F .text	00000138 memcpy
0001dcac g     O .rwdata	00000002 OSRdyTblSize
00018d74 g     F .text	00000050 alt_up_character_lcd_write_fd
0001a0d0 g     F .text	0000005c alt_up_char_buffer_clear
00005f6c g     F .text	0000000c _cleanup_r
0000e248 g     F .text	000000d0 .hidden __floatsidf
0001a5b4 g     F .text	00000078 alt_io_redirect
0000d0ec g     F .text	000000e0 .hidden __ltdf2
0001b624 g       *ABS*	00000000 __DTOR_END__
000192f4 g     F .text	00000090 alt_up_irda_write_fd
00019c6c g     F .text	00000074 alt_up_rs232_read_data
00002170 g     F .text	00000014 puts
0001b1dc g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000f0ec g     F .text	00000120 OSEventNameGet
0001dc90 g     O .rwdata	00000002 OSFlagMax
00009140 g     F .text	00000074 __fpclassifyd
0001fc6c g     O .bss	00000004 last
000089bc g     F .text	000000a4 __ratio
0000fa28 g     F .text	000000f4 OSIntExit
0000a7cc g     F .text	00000024 __vfiprintf_internal
0001dcca g     O .rwdata	00000002 OSTCBSize
0001fcc1 g     O .bss	00000001 OSPrioCur
000190f0 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
000184f8 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00002060 g     F .text	0000002c _printf_r
0000be10 g     F .text	00000008 .hidden __udivsi3
0000e6bc g     F .text	000000a4 isatty
0001dcb0 g     O .rwdata	00000002 OSStkWidth
0001b8f8 g     O .rodata	000000c8 __mprec_tens
0001dca4 g     O .rwdata	00000002 OSPtrSize
00006dd4 g     F .text	0000000c __locale_charset
0001dc84 g     O .rwdata	00000002 OSEventTblSize
00019094 g     F .text	0000005c alt_up_irda_disable_read_interrupt
0001dc24 g     O .rwdata	00000004 xMenu
0001ac0c g       .text	00000000 OSCtxSw
0001b150 g     F .text	0000008c alt_icache_flush
0001fc90 g     O .bss	00000004 __malloc_top_pad
00000658 g     F .text	00000104 moveDown
0001fcc4 g     O .bss	00000004 OSTCBList
0001fc20 g     O .bss	00000004 gpio_dev
0001fc98 g     O .bss	00000004 alt_fd_list_lock
0001dc40 g     O .rwdata	00000004 __mb_cur_max
00006e04 g     F .text	0000000c _localeconv_r
00008044 g     F .text	0000003c __i2b
00006710 g     F .text	000004c0 __sfvwrite_r
0002a880 g     O .bss	00000c30 OSMemTbl
0001fcc8 g     O .bss	00000001 OSTickStepState
000091b4 g     F .text	00000054 _sbrk_r
0001fd40 g     O .bss	00002000 menu_stk
0001dca8 g     O .rwdata	00000002 OSQMax
0002b4b0 g     O .bss	00000800 OSTaskStatStk
000138f0 g     F .text	000000f8 OSMemNameGet
0001dc88 g     O .rwdata	00000002 OSFlagEn
0000ae0c g     F .text	0000005c _read_r
0001dcce g     O .rwdata	00000002 OSTimeTickHookEn
000148b4 g     F .text	00000168 OSQPost
000129e4 g     F .text	000000a0 OS_FlagUnlink
0001dc60 g     O .rwdata	00000004 alt_max_fd
00019be8 g     F .text	00000044 alt_up_rs232_check_parity
000109a0 g     F .text	00000064 OS_MemCopy
00010a04 g     F .text	000000cc OS_Sched
0000aa20 g     F .text	000000f0 _fclose_r
00013800 g     F .text	000000f0 OSMemGet
000134fc g     F .text	00000110 OSMboxQuery
00016a70 g     F .text	000001c0 OSTaskNameSet
0001949c g     F .text	00000030 read_num_bytes_available
00005f2c g     F .text	00000030 fflush
0001fc8c g     O .bss	00000004 __malloc_max_sbrked_mem
0001fccc g     O .bss	00000004 OSCtxSwCtr
0001aeb0 g     F .text	0000001c OSTimeTickHook
0001a62c g     F .text	000001b0 alt_irq_register
0001dc92 g     O .rwdata	00000002 OSFlagNameSize
00019404 g     F .text	00000034 read_RI_bit
00010490 g     F .text	000000fc OS_EventTaskRemoveMulti
0001fc24 g     O .bss	00000004 controllerSem
0000be20 g     F .text	0000089c .hidden __adddf3
00010290 g     F .text	0000014c OS_EventTaskWaitMulti
00008764 g     F .text	0000011c __b2d
0001dcaa g     O .rwdata	00000002 OSQSize
0000b764 g     F .text	00000590 .hidden __umoddi3
0000e894 g     F .text	000000d4 lseek
000153b8 g     F .text	00000268 OSSemPend
0001dc38 g     O .rwdata	00000004 _global_impure_ptr
00008bd8 g     F .text	00000568 _realloc_r
0001fc68 g     O .bss	00000004 vorige
0001dc94 g     O .rwdata	00000002 OSLowestPrio
0002d834 g       *ABS*	00000000 __bss_end
0001af20 g     F .text	00000020 OSTCBInitHook
0001dcda g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001aae8 g     F .text	00000104 alt_tick
00013290 g     F .text	00000110 OSMboxPost
0001fc28 g     O .bss	00000004 counter1
0000b1a4 g     F .text	000005c0 .hidden __udivdi3
0000ab24 g     F .text	00000184 _fputwc_r
0001dc7c g     O .rwdata	00000002 OSEventEn
0001b8d0 g     O .rodata	00000028 __mprec_bigtens
00007e28 g     F .text	00000104 __s2b
0001dcd6 g     O .rwdata	00000002 OSTmrCfgNameSize
0000e318 g     F .text	000000a4 .hidden __floatunsidf
0000850c g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
00019500 g     F .text	0000002c read_data_byte
000062cc g     F .text	00000018 __fp_lock_all
000127f0 g     F .text	000000e4 OS_FlagInit
0001aa50 g     F .text	00000098 alt_alarm_stop
00019438 g     F .text	00000030 read_RE_bit
0001dcb8 g     O .rwdata	00000002 OSTaskIdleStkSize
0001fd08 g     O .bss	00000004 alt_irq_active
00014fa0 g     F .text	000000b0 OSSemAccept
000017fc g     F .text	00000090 VGA_text
00013b00 g     F .text	000000d8 OSMemPut
0001fc4c g     O .bss	00000004 pixel_buffer_x
0001360c g     F .text	000001f4 OSMemCreate
0001fcd0 g     O .bss	00000004 OSIdleCtrMax
00021d40 g     O .bss	00002000 controller1_stk
00019130 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
0001c670 g     O .rwdata	00000028 alt_dev_null
0001dccc g     O .rwdata	00000002 OSTicksPerSec
00019008 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
000193c4 g     F .text	00000040 alt_up_parallel_port_open_dev
0001ac0c g       .text	00000000 OSIntCtxSw
000196a4 g     F .text	00000074 alt_up_ps2_write_data_byte
00000db8 g     F .text	00000100 endGame
0001a26c g     F .text	0000001c alt_dcache_flush_all
00007f2c g     F .text	00000068 __hi0bits
0000e1c0 g     F .text	00000088 .hidden __fixdfsi
0001fcd4 g     O .bss	00000004 OSTCBFreeList
0001dcf4 g       *ABS*	00000000 __ram_rwdata_end
00015620 g     F .text	0000016c OSSemPendAbort
0001dc58 g     O .rwdata	00000008 alt_dev_list
0000ece8 g     F .text	000000f8 write
0001dcd0 g     O .rwdata	00000002 OSVersionNbr
0001bdcc g       *ABS*	00000000 __ram_rodata_end
0000e5bc g     F .text	000000b0 fstat
00019d70 g     F .text	00000094 alt_up_rs232_write_fd
00000fa4 g     F .text	00000324 selecteerMenu
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000d0ec g     F .text	000000e0 .hidden __ledf2
0001dc78 g     O .rwdata	00000004 OSEndiannessTest
0000827c g     F .text	00000140 __pow5mult
000094fc g     F .text	000012d0 ___vfiprintf_internal_r
0001fc84 g     O .bss	00000004 __nlocale_changed
0000be18 g     F .text	00000008 .hidden __umodsi3
0001dc8a g     O .rwdata	00000002 OSFlagGrpSize
00000280 g     F .text	000000dc controllers
0002d834 g       *ABS*	00000000 end
000199e0 g     F .text	00000098 alt_up_ps2_write_fd
0001916c g     F .text	00000044 alt_up_irda_check_parity
00019e44 g     F .text	00000080 alt_up_char_buffer_init
00001488 g     F .text	000000f8 teken_menu
00017eac g     F .text	00000140 altera_avalon_jtag_uart_init
00010c64 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000075c g     F .text	00000438 Game
0001dc0c g     O .rwdata	00000004 check
0001b624 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00018ae4 g     F .text	00000080 alt_avalon_timer_sc_init
0000e3bc g     F .text	00000064 .hidden __clzsi2
000187ac g     F .text	000002c0 altera_avalon_jtag_uart_write
000062bc g     F .text	00000004 __sfp_lock_acquire
00007798 g     F .text	000000e8 memchr
00010950 g     F .text	00000050 OS_MemClr
00018c88 g     F .text	00000078 alt_up_character_lcd_write
0000221c g     F .text	00001f50 ___vfprintf_internal_r
0001acdc g     F .text	0000015c OSTaskStkInit
00006420 g     F .text	000002f0 _free_r
00006de0 g     F .text	00000010 __locale_mb_cur_max
0000ffec g     F .text	00000198 OS_EventTaskRdy
0001b454 g     F .text	00000194 __call_exitprocs
0001fcd8 g     O .bss	00000001 OSCPUUsage
0001fc80 g     O .bss	00000004 __mlocale_changed
0001dc44 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
0001fd0c g     O .bss	00000004 _alt_tick_rate
0001444c g     F .text	000002fc OSQPend
0001739c g     F .text	00000148 OSTimeDly
00023d40 g     O .bss	00002000 controller2_stk
000083bc g     F .text	00000150 __lshift
0001fd10 g     O .bss	00000004 _alt_nticks
0000ea8c g     F .text	000000fc read
00017970 g     F .text	000003d8 alt_sys_init
00018ec0 g     F .text	00000088 alt_up_character_lcd_shift_display
0001b340 g     F .text	00000114 __register_exitproc
0001fcd9 g     O .bss	00000001 OSTaskCtr
00019900 g     F .text	00000054 alt_up_ps2_clear_fifo
00019bac g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
0001fc3c g     O .bss	00000004 score2
0001fc2c g     O .bss	00000004 MailBox2
00001748 g     F .text	000000b4 VGA_box
000174e4 g     F .text	00000168 OSTimeDlyHMSM
00008080 g     F .text	000001fc __multiply
00018f48 g     F .text	0000008c alt_up_character_lcd_erase_pos
000183a4 g     F .text	00000068 altera_avalon_jtag_uart_close
0001bdcc g       *ABS*	00000000 __ram_rwdata_start
0001b624 g       *ABS*	00000000 __ram_rodata_start
0001fd18 g     O .bss	00000028 __malloc_current_mallinfo
0001dc7e g     O .rwdata	00000002 OSEventMax
00008880 g     F .text	0000013c __d2b
0001578c g     F .text	00000110 OSSemPost
0000fba4 g     F .text	000000d8 OSSchedUnlock
0000188c g     F .text	00000068 draw_middenlijn
00017d48 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001b054 g     F .text	000000fc alt_get_fd
0001fcdc g     O .bss	00000004 OSMemFreeList
0000fce8 g     F .text	000000ac OSStatInit
00012568 g     F .text	000000c4 OSFlagQuery
0001dcb4 g     O .rwdata	00000002 OSTaskCreateExtEn
0000a908 g     F .text	00000054 _close_r
0001b2c4 g     F .text	0000007c memcmp
0000ffd0 g     F .text	0000001c OS_Dummy
00017e08 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002d834 g       *ABS*	00000000 __alt_stack_base
00017e58 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0001fc70 g     O .bss	00000004 changed
0001903c g     F .text	00000058 alt_up_irda_enable_read_interrupt
0000424c g     F .text	00000154 __swsetup_r
0002bcb0 g     O .bss	000001e0 OSQTbl
0000035c g     F .text	000001b0 controller
0000c6bc g     F .text	000008cc .hidden __divdf3
0000617c g     F .text	00000118 __sfp
00008ad4 g     F .text	00000078 __copybits
0001c268 g     O .rwdata	00000408 __malloc_av_
0001fc50 g     O .bss	00000004 ALT_y
000062c8 g     F .text	00000004 __sinit_lock_release
0001fce0 g     O .bss	00000004 OSTCBHighRdy
0000d1cc g     F .text	00000724 .hidden __muldf3
00009208 g     F .text	00000054 __sread
0001fce4 g     O .bss	00000004 OSQFreeList
00019b10 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
0001af40 g     F .text	00000114 alt_find_file
0001a2d8 g     F .text	000000a4 alt_dev_llist_insert
0000eefc g     F .text	00000120 __malloc_lock
0000ebe8 g     F .text	000000b0 sbrk
0001fc54 g     O .bss	00000004 ALT_inc_y
0000f20c g     F .text	0000013c OSEventNameSet
00005ed0 g     F .text	0000005c _fflush_r
0000a95c g     F .text	000000c4 _calloc_r
0001fce8 g     O .bss	00000001 OSRdyGrp
0001fc1c g       *ABS*	00000000 __bss_start
00007b14 g     F .text	00000124 memset
00001580 g     F .text	000001c8 main
0001fca4 g     O .bss	00000004 alt_envp
0001fc88 g     O .bss	00000004 __malloc_max_total_mem
00019ec4 g     F .text	00000040 alt_up_char_buffer_open_dev
00017da8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000afa0 g     F .text	0000001c __swbuf
0001bafc g     O .rodata	00000100 OSUnMapTbl
0001dcae g     O .rwdata	00000002 OSSemEn
00018e38 g     F .text	00000088 alt_up_character_lcd_shift_cursor
000121e0 g     F .text	00000388 OSFlagPost
0000933c g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000ab10 g     F .text	00000014 fclose
00010184 g     F .text	0000010c OS_EventTaskWait
00019890 g     F .text	00000070 alt_up_ps2_read_data_byte
0001fc78 g     O .bss	00000004 timeout
00010d40 g     F .text	000000c8 OS_TaskStatStkChk
00016770 g     F .text	00000158 OSTaskDelReq
000045a0 g     F .text	00001728 _dtoa_r
00006ff0 g     F .text	000007a8 _malloc_r
0000b118 g     F .text	00000030 __ascii_wctomb
0001dc64 g     O .rwdata	00000004 alt_errno
0000fc7c g     F .text	0000006c OSStart
0000eea0 g     F .text	0000005c __env_unlock
00006bd0 g     F .text	000000c4 _fwalk
00016c30 g     F .text	000001f8 OSTaskResume
00013bd8 g     F .text	000000e8 OSMemQuery
0001dcc0 g     O .rwdata	00000002 OSTaskStatEn
00025d40 g     O .bss	00002000 Game_stk
000191b0 g     F .text	00000040 alt_up_irda_write_data
0001dc9a g     O .rwdata	00000002 OSMemMax
00014a1c g     F .text	00000170 OSQPostFront
00019a78 g     F .text	00000040 alt_up_ps2_open_dev
0000bd60 g     F .text	00000054 .hidden __divsi3
0001fce9 g     O .bss	00000003 OSRdyTbl
0001dc74 g     O .rwdata	00000002 OSDebugEn
00018c48 g     F .text	00000040 alt_up_character_lcd_open_dev
000062fc g     F .text	00000124 _malloc_trim_r
000195f0 g     F .text	00000058 alt_up_ps2_enable_read_interrupt
0001b624 g       *ABS*	00000000 __CTOR_END__
0001dc8c g     O .rwdata	00000002 OSFlagNodeSize
0001dcd4 g     O .rwdata	00000002 OSTmrCfgMax
00018c14 g     F .text	00000034 alt_up_character_lcd_init
00009344 g     F .text	000000a4 strcmp
00013ed0 g     F .text	000001fc OSQCreate
000168c8 g     F .text	000001a8 OSTaskNameGet
0001b624 g       *ABS*	00000000 __flash_rodata_start
00014b8c g     F .text	0000020c OSQPostOpt
0000fd94 g     F .text	0000021c OSTimeTick
0001dcbc g     O .rwdata	00000002 OSTaskMax
0001b624 g       *ABS*	00000000 __DTOR_LIST__
00015050 g     F .text	00000100 OSSemCreate
0001dce0 g     O .rwdata	00000002 OSTmrWheelSize
00019e04 g     F .text	00000040 alt_up_rs232_open_dev
0001fc58 g     O .bss	00000004 gameSem
0000cf88 g     F .text	00000084 .hidden __nedf2
0001dcb6 g     O .rwdata	00000002 OSTaskDelEn
0001589c g     F .text	00000110 OSSemQuery
000140cc g     F .text	000002c8 OSQDel
00014748 g     F .text	0000016c OSQPendAbort
0001793c g     F .text	00000034 alt_irq_init
0000eb88 g     F .text	00000060 alt_release_fd
0000050c g     F .text	0000004c checkID
000194cc g     F .text	00000034 read_data_valid
00018fd4 g     F .text	00000034 alt_up_character_lcd_cursor_off
0001b9e0 g     O .rodata	00000100 .hidden __clz_tab
0001fc7c g     O .bss	00000004 _PathLocale
00019788 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001b278 g     F .text	00000014 atexit
00001930 g     F .text	00000070 del_number
0000a8ac g     F .text	0000005c _write_r
0000fb1c g     F .text	00000088 OSSchedLock
00006e10 g     F .text	0000001c setlocale
00011570 g     F .text	00000128 OSFlagCreate
0001dc3c g     O .rwdata	00000004 _impure_ptr
0001fc9c g     O .bss	00000004 alt_argc
00005cc8 g     F .text	00000208 __sflush_r
0001a3d8 g     F .text	0000005c _do_dtors
00006dfc g     F .text	00000008 __locale_cjk_lang
0001dc86 g     O .rwdata	00000002 OSEventMultiEn
00011698 g     F .text	00000270 OSFlagDel
0001fcec g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00013124 g     F .text	0000016c OSMboxPendAbort
00008704 g     F .text	00000060 __ulp
0001dcd2 g     O .rwdata	00000002 OSTmrEn
00011b88 g     F .text	000005f0 OSFlagPend
000062e4 g     F .text	00000018 __fp_unlock_all
0001dc50 g     O .rwdata	00000008 alt_fs_list
00010b40 g     F .text	00000074 OS_StrCopy
00019ab8 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
00019c2c g     F .text	00000040 alt_up_rs232_write_data
00000558 g     F .text	00000100 moveUp
0001dc9c g     O .rwdata	00000002 OSMemNameSize
0001fc5c g     O .bss	00000004 ALT_x1
0001aee8 g     F .text	0000001c OSInitHookEnd
00027d40 g     O .bss	000007d0 Messages
000019a0 g     F .text	00000674 draw_number
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001dcc8 g     O .rwdata	00000002 OSTCBPrioTblMax
00006e2c g     F .text	0000000c localeconv
0001dcc4 g     O .rwdata	00000002 OSTaskStatStkChkEn
00012b1c g     F .text	000000fc OSMboxCreate
0001dc98 g     O .rwdata	00000002 OSMemEn
0001dc08 g     O .rwdata	00000004 first
0001dca2 g     O .rwdata	00000002 OSMutexEn
0001dcf4 g       *ABS*	00000000 _edata
0001dc34 g     O .rwdata	00000004 interval_timer_ptr
0002d834 g       *ABS*	00000000 _end
0001fcf0 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
0001840c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0001764c g     F .text	000001f0 OSTimeDlyResume
00011a38 g     F .text	00000150 OSFlagNameSet
00001308 g     F .text	000000a0 clearText
00012e80 g     F .text	000002a4 OSMboxPend
00016e28 g     F .text	000001c8 OSTaskStkChk
0001dc9e g     O .rwdata	00000002 OSMemSize
00009264 g     F .text	0000007c __swrite
0001dc48 g     O .rwdata	00000004 __malloc_trim_threshold
00006df0 g     F .text	0000000c __locale_msgcharset
0001fcf4 g     O .bss	00000004 OSTCBCur
0001b28c g     F .text	00000038 exit
00002014 g     F .text	0000004c checkIDScore
000191f0 g     F .text	00000074 alt_up_irda_read_data
0001dca0 g     O .rwdata	00000002 OSMemTblSize
00006c94 g     F .text	000000c4 _fwalk_reent
0001952c g     F .text	000000c4 alt_up_ps2_init
0000856c g     F .text	00000198 __mdiff
0000bdb4 g     F .text	0000005c .hidden __modsi3
00028510 g     O .bss	00002000 menu_stk2
00012a84 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000062c0 g     F .text	00000004 __sfp_lock_release
0000f958 g     F .text	00000054 OSInit
00017204 g     F .text	0000012c OSTaskQuery
00018d00 g     F .text	00000074 alt_up_character_lcd_string
00014ef4 g     F .text	000000ac OS_QInit
00010bb4 g     F .text	00000054 OS_StrLen
00019384 g     F .text	00000040 alt_up_irda_open_dev
000139e8 g     F .text	00000118 OSMemNameSet
00000b94 g     F .text	00000224 gescoord
0001dcba g     O .rwdata	00000002 OSTaskProfileEn
0001fcf8 g     O .bss	00000004 OSTime
0001fc30 g     O .bss	00000004 Flags
000013a8 g     F .text	00000058 tekenBox
0002be90 g     O .bss	00000800 OSTaskIdleStk
0001b5e8 g     F .text	0000003c _exit
0001fc60 g     O .bss	00000004 ALT_inc_x
000133a0 g     F .text	0000015c OSMboxPostOpt
0001a12c g     F .text	00000140 alt_alarm_start
00011908 g     F .text	00000130 OSFlagNameGet
0001783c g     F .text	00000064 OSTimeGet
00006e38 g     F .text	000001b8 __smakebuf_r
00019718 g     F .text	00000070 alt_up_ps2_wait_for_ack
00002184 g     F .text	00000098 strlen
0001ae78 g     F .text	0000001c OSTaskSwHook
0001a8f8 g     F .text	00000158 open
0002c690 g     O .bss	00000b40 OSEventTbl
0000d00c g     F .text	000000e0 .hidden __gedf2
0002d1d0 g     O .bss	00000510 OSTCBTbl
000159ac g     F .text	000000fc OSSemSet
0001dc2c g     O .rwdata	00000004 eenkeer
000012c8 g     F .text	00000040 clearScreen
0001dc4c g     O .rwdata	00000004 __wctomb
000094e4 g     F .text	00000018 __sprint_r
0001fc64 g     O .bss	00000004 ALT_x2
0001a4c4 g     F .text	00000030 alt_icache_flush_all
00018dc4 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001dce8 g     O .rwdata	00000004 alt_priority_mask
00015150 g     F .text	00000268 OSSemDel
0001fcfc g     O .bss	00000004 OSFlagFreeList
0001dc80 g     O .rwdata	00000002 OSEventNameSize
00012c18 g     F .text	00000268 OSMboxDel
0000416c g     F .text	00000024 __vfprintf_internal
0001fd00 g     O .bss	00000001 OSStatRdy
0001fc34 g     O .bss	00000004 MailBox
0002d6e0 g     O .bss	00000054 OSTCBPrioTbl
0000b148 g     F .text	0000005c _wctomb_r
0000ede0 g     F .text	000000c0 __env_lock
00019954 g     F .text	0000008c alt_up_ps2_read_fd
0001dcc6 g     O .rwdata	00000002 OSTaskSwHookEn
0001dc14 g     O .rwdata	00000004 xLinks
0000d8f0 g     F .text	000008d0 .hidden __subdf3
00019264 g     F .text	00000090 alt_up_irda_read_fd
00007f94 g     F .text	000000b0 __lo0bits
0001dcec g     O .rwdata	00000008 alt_alarm_list
0001dc8e g     O .rwdata	00000002 OSFlagWidth
0001a37c g     F .text	0000005c _do_ctors
00019b6c g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000b058 g     F .text	000000c0 wcrtomb
0000e470 g     F .text	000000d0 close
0001fcac g     O .bss	00000004 alt_envsem
0001fd04 g     O .bss	00000004 OSIdleCtrRun
0001dc20 g     O .rwdata	00000004 xOnder
0000ffb0 g     F .text	00000020 OSVersion
0001dcd8 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000e7c4 g     F .text	00000080 alt_load
00017330 g     F .text	0000006c OS_TaskStkClr
00001400 g     F .text	00000088 tekenBox2
0001dcb2 g     O .rwdata	00000002 OSTaskCreateEn
0001fc74 g     O .bss	00000004 menuSem
0001058c g     F .text	00000064 OS_EventWaitListInit
0000aca8 g     F .text	0000005c fputwc
0001af04 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
000062c4 g     F .text	00000004 __sinit_lock_acquire
00007d08 g     F .text	00000120 __multadd
00016ff0 g     F .text	00000214 OSTaskSuspend
00007ce0 g     F .text	00000028 _Bfree
0001fc38 g     O .bss	00000004 counter2
00010c08 g     F .text	0000005c OS_TaskIdle
0001dcde g     O .rwdata	00000002 OSTmrTblSize
00014d98 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	000f9ac0 	call	f9ac <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000f4 	movhi	r2,3
 140:	10b5cd04 	addi	r2,r2,-10444
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10b5cd04 	addi	r2,r2,-10444
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	000fa280 	call	fa28 <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a84317 	ldw	r2,-24308(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a84317 	ldw	r2,-24308(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d6970214 	ori	gp,gp,23560
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	10bf0714 	ori	r2,r2,64540

    movhi r3, %hi(__bss_end)
     25c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     260:	18f60d14 	ori	r3,r3,55348

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000e7c40 	call	e7c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000e9680 	call	e968 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <controllers>:
}Balk;

alt_up_parallel_port_dev *gpio_dev; //	gpio device


void controllers(void* pdata) {
     280:	defff804 	addi	sp,sp,-32
     284:	dfc00715 	stw	ra,28(sp)
     288:	df000615 	stw	fp,24(sp)
     28c:	df000604 	addi	fp,sp,24
     290:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	int ID = (int*) pdata;
     294:	e0bfff17 	ldw	r2,-4(fp)
     298:	e0bffc15 	stw	r2,-16(fp)
	int hoogte = 50;
     29c:	00800c84 	movi	r2,50
     2a0:	e0bffb15 	stw	r2,-20(fp)

	Balk balkje;

	while (1) {
		OSFlagPend(Flags, C1_Flag + C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     2a4:	d0e80a17 	ldw	r3,-24536(gp)
     2a8:	e0bffd04 	addi	r2,fp,-12
     2ac:	d8800015 	stw	r2,0(sp)
     2b0:	1809883a 	mov	r4,r3
     2b4:	01400304 	movi	r5,12
     2b8:	01800044 	movi	r6,1
     2bc:	000f883a 	mov	r7,zero
     2c0:	0011b880 	call	11b88 <OSFlagPend>
		balkje.Hoogte = hoogte;
     2c4:	e0bffb17 	ldw	r2,-20(fp)
     2c8:	e0bffe15 	stw	r2,-8(fp)

		if (controller(ID) == 1) {
     2cc:	e13ffc17 	ldw	r4,-16(fp)
     2d0:	000035c0 	call	35c <controller>
     2d4:	10800058 	cmpnei	r2,r2,1
     2d8:	1000051e 	bne	r2,zero,2f0 <controllers+0x70>
			hoogte = moveDown(ID, hoogte);
     2dc:	e13ffc17 	ldw	r4,-16(fp)
     2e0:	e17ffb17 	ldw	r5,-20(fp)
     2e4:	00006580 	call	658 <moveDown>
     2e8:	e0bffb15 	stw	r2,-20(fp)
     2ec:	00000706 	br	30c <controllers+0x8c>
		} else if (controller(ID) == 0) {
     2f0:	e13ffc17 	ldw	r4,-16(fp)
     2f4:	000035c0 	call	35c <controller>
     2f8:	1000041e 	bne	r2,zero,30c <controllers+0x8c>
			hoogte = moveUp(ID, hoogte);
     2fc:	e13ffc17 	ldw	r4,-16(fp)
     300:	e17ffb17 	ldw	r5,-20(fp)
     304:	00005580 	call	558 <moveUp>
     308:	e0bffb15 	stw	r2,-20(fp)
		}

		if(ID == 1){
     30c:	e0bffc17 	ldw	r2,-16(fp)
     310:	10800058 	cmpnei	r2,r2,1
     314:	1000061e 	bne	r2,zero,330 <controllers+0xb0>
			OSMboxPost(MailBox, (void*)&balkje);
     318:	d0e80b17 	ldw	r3,-24532(gp)
     31c:	e0bffe04 	addi	r2,fp,-8
     320:	1809883a 	mov	r4,r3
     324:	100b883a 	mov	r5,r2
     328:	00132900 	call	13290 <OSMboxPost>
     32c:	00000806 	br	350 <controllers+0xd0>
		}else if(ID == 2){
     330:	e0bffc17 	ldw	r2,-16(fp)
     334:	10800098 	cmpnei	r2,r2,2
     338:	1000051e 	bne	r2,zero,350 <controllers+0xd0>
			OSMboxPost(MailBox2, (void*)&balkje);
     33c:	d0e80917 	ldw	r3,-24540(gp)
     340:	e0bffe04 	addi	r2,fp,-8
     344:	1809883a 	mov	r4,r3
     348:	100b883a 	mov	r5,r2
     34c:	00132900 	call	13290 <OSMboxPost>
		}

		OSTimeDly(1);
     350:	01000044 	movi	r4,1
     354:	001739c0 	call	1739c <OSTimeDly>
	}
     358:	003fd206 	br	2a4 <__alt_mem_Flash_flash_data+0xf40002a4>

0000035c <controller>:

}

int controller(int ID) {
     35c:	defff804 	addi	sp,sp,-32
     360:	dfc00715 	stw	ra,28(sp)
     364:	df000615 	stw	fp,24(sp)
     368:	df000604 	addi	fp,sp,24
     36c:	e13fff15 	stw	r4,-4(fp)
	alt_up_parallel_port_dev * KEY_ptr = alt_up_parallel_port_open_dev(
     370:	010000b4 	movhi	r4,2
     374:	212d8904 	addi	r4,r4,-18908
     378:	00193c40 	call	193c4 <alt_up_parallel_port_open_dev>
     37c:	e0bffa15 	stw	r2,-24(fp)
			"/dev/Pushbuttons");
	alt_up_parallel_port_dev * SW_switch_ptr = alt_up_parallel_port_open_dev(
     380:	010000b4 	movhi	r4,2
     384:	212d8e04 	addi	r4,r4,-18888
     388:	00193c40 	call	193c4 <alt_up_parallel_port_open_dev>
     38c:	e0bffb15 	stw	r2,-20(fp)
			"/dev/Slider_Switches");
	gpio_dev = alt_up_parallel_port_open_dev("/dev/Expansion_JP5");		//	DE2-115 gpio
     390:	010000b4 	movhi	r4,2
     394:	212d9404 	addi	r4,r4,-18864
     398:	00193c40 	call	193c4 <alt_up_parallel_port_open_dev>
     39c:	d0a80615 	stw	r2,-24552(gp)
	alt_up_parallel_port_set_port_direction(gpio_dev, 0x00000001);		// 1-0-1-1	(1 = output; 0 = input)
     3a0:	d0a80617 	ldw	r2,-24552(gp)
     3a4:	10800a17 	ldw	r2,40(r2)
     3a8:	10800104 	addi	r2,r2,4
     3ac:	1007883a 	mov	r3,r2
     3b0:	00800044 	movi	r2,1
     3b4:	18800035 	stwio	r2,0(r3)

	int KEY_value, SW_value, gpio_values;
	INT8U err;

	SW_value = alt_up_parallel_port_read_data(SW_switch_ptr);
     3b8:	e0bffb17 	ldw	r2,-20(fp)
     3bc:	10800a17 	ldw	r2,40(r2)
     3c0:	10800037 	ldwio	r2,0(r2)
     3c4:	e0bffc15 	stw	r2,-16(fp)
	KEY_value = alt_up_parallel_port_read_data(KEY_ptr); // read the pushbutton KEY values
     3c8:	e0bffa17 	ldw	r2,-24(fp)
     3cc:	10800a17 	ldw	r2,40(r2)
     3d0:	10800037 	ldwio	r2,0(r2)
     3d4:	e0bffd15 	stw	r2,-12(fp)
	gpio_values = alt_up_parallel_port_read_data(gpio_dev);
     3d8:	d0a80617 	ldw	r2,-24552(gp)
     3dc:	10800a17 	ldw	r2,40(r2)
     3e0:	10800037 	ldwio	r2,0(r2)
     3e4:	e0bffe15 	stw	r2,-8(fp)

	printf("SW_value is: %d\n", SW_value);
     3e8:	010000b4 	movhi	r4,2
     3ec:	212d9904 	addi	r4,r4,-18844
     3f0:	e17ffc17 	ldw	r5,-16(fp)
     3f4:	000208c0 	call	208c <printf>

	if (ID == 2) {
     3f8:	e0bfff17 	ldw	r2,-4(fp)
     3fc:	10800098 	cmpnei	r2,r2,2
     400:	1000131e 	bne	r2,zero,450 <controller+0xf4>
		if (KEY_value != 0) {
     404:	e0bffd17 	ldw	r2,-12(fp)
     408:	10000f26 	beq	r2,zero,448 <controller+0xec>
			if (KEY_value == 8) {
     40c:	e0bffd17 	ldw	r2,-12(fp)
     410:	10800218 	cmpnei	r2,r2,8
     414:	1000021e 	bne	r2,zero,420 <controller+0xc4>
				return 1;
     418:	00800044 	movi	r2,1
     41c:	00003606 	br	4f8 <controller+0x19c>
			}
			if (KEY_value == 4) {
     420:	e0bffd17 	ldw	r2,-12(fp)
     424:	10800118 	cmpnei	r2,r2,4
     428:	1000021e 	bne	r2,zero,434 <controller+0xd8>
				return 0;
     42c:	0005883a 	mov	r2,zero
     430:	00003106 	br	4f8 <controller+0x19c>
			}
			if (KEY_value == 2) {
     434:	e0bffd17 	ldw	r2,-12(fp)
     438:	10800098 	cmpnei	r2,r2,2
     43c:	10002b1e 	bne	r2,zero,4ec <controller+0x190>
				return 2;
     440:	00800084 	movi	r2,2
     444:	00002c06 	br	4f8 <controller+0x19c>
			}
		} else {
			return 3;
     448:	008000c4 	movi	r2,3
     44c:	00002a06 	br	4f8 <controller+0x19c>
		}

	} else if (ID == 1) {
     450:	e0bfff17 	ldw	r2,-4(fp)
     454:	10800058 	cmpnei	r2,r2,1
     458:	10000e1e 	bne	r2,zero,494 <controller+0x138>
		if (SW_value != 0) {
     45c:	e0bffc17 	ldw	r2,-16(fp)
     460:	10000a26 	beq	r2,zero,48c <controller+0x130>
			if (SW_value == 131072) {
     464:	e0fffc17 	ldw	r3,-16(fp)
     468:	008000b4 	movhi	r2,2
     46c:	1880021e 	bne	r3,r2,478 <controller+0x11c>
				return 0;
     470:	0005883a 	mov	r2,zero
     474:	00002006 	br	4f8 <controller+0x19c>
			}else if(SW_value == 4){
     478:	e0bffc17 	ldw	r2,-16(fp)
     47c:	10800118 	cmpnei	r2,r2,4
     480:	10001a1e 	bne	r2,zero,4ec <controller+0x190>
				return 4;
     484:	00800104 	movi	r2,4
     488:	00001b06 	br	4f8 <controller+0x19c>
			}
		} else {
			return 1;
     48c:	00800044 	movi	r2,1
     490:	00001906 	br	4f8 <controller+0x19c>
		}
	} else if(ID == 3){
     494:	e0bfff17 	ldw	r2,-4(fp)
     498:	108000d8 	cmpnei	r2,r2,3
     49c:	1000131e 	bne	r2,zero,4ec <controller+0x190>
		if(gpio_values != 0){
     4a0:	e0bffe17 	ldw	r2,-8(fp)
     4a4:	10000f26 	beq	r2,zero,4e4 <controller+0x188>
			if(gpio_values == -1){
     4a8:	e0bffe17 	ldw	r2,-8(fp)
     4ac:	10bfffd8 	cmpnei	r2,r2,-1
     4b0:	1000021e 	bne	r2,zero,4bc <controller+0x160>
				return 1;
     4b4:	00800044 	movi	r2,1
     4b8:	00000f06 	br	4f8 <controller+0x19c>
			} else if(gpio_values == -2){
     4bc:	e0bffe17 	ldw	r2,-8(fp)
     4c0:	10bfff98 	cmpnei	r2,r2,-2
     4c4:	1000021e 	bne	r2,zero,4d0 <controller+0x174>
				return 2;
     4c8:	00800084 	movi	r2,2
     4cc:	00000a06 	br	4f8 <controller+0x19c>
			} else if(gpio_values == -3){
     4d0:	e0bffe17 	ldw	r2,-8(fp)
     4d4:	10bfff58 	cmpnei	r2,r2,-3
     4d8:	1000041e 	bne	r2,zero,4ec <controller+0x190>
				return 3;
     4dc:	008000c4 	movi	r2,3
     4e0:	00000506 	br	4f8 <controller+0x19c>
			}
		}else{
			return 0;
     4e4:	0005883a 	mov	r2,zero
     4e8:	00000306 	br	4f8 <controller+0x19c>
		}
	}
	gpio_values &= 0x80000000;		//	negeer alle andere bits, die zijn waarschijnlijk HOOG !
     4ec:	e0bffe17 	ldw	r2,-8(fp)
     4f0:	10a0002c 	andhi	r2,r2,32768
     4f4:	e0bffe15 	stw	r2,-8(fp)

}
     4f8:	e037883a 	mov	sp,fp
     4fc:	dfc00117 	ldw	ra,4(sp)
     500:	df000017 	ldw	fp,0(sp)
     504:	dec00204 	addi	sp,sp,8
     508:	f800283a 	ret

0000050c <checkID>:

int checkID(int ID) {
     50c:	defffe04 	addi	sp,sp,-8
     510:	df000115 	stw	fp,4(sp)
     514:	df000104 	addi	fp,sp,4
     518:	e13fff15 	stw	r4,-4(fp)
	if (ID == 1) {
     51c:	e0bfff17 	ldw	r2,-4(fp)
     520:	10800058 	cmpnei	r2,r2,1
     524:	1000021e 	bne	r2,zero,530 <checkID+0x24>
		return 15;
     528:	008003c4 	movi	r2,15
     52c:	00000606 	br	548 <checkID+0x3c>
	} else if (ID == 2) {
     530:	e0bfff17 	ldw	r2,-4(fp)
     534:	10800098 	cmpnei	r2,r2,2
     538:	1000021e 	bne	r2,zero,544 <checkID+0x38>
		return 300;
     53c:	00804b04 	movi	r2,300
     540:	00000106 	br	548 <checkID+0x3c>

	}
	return 0;
     544:	0005883a 	mov	r2,zero
}
     548:	e037883a 	mov	sp,fp
     54c:	df000017 	ldw	fp,0(sp)
     550:	dec00104 	addi	sp,sp,4
     554:	f800283a 	ret

00000558 <moveUp>:

int moveUp(int ID, int current) {
     558:	defff904 	addi	sp,sp,-28
     55c:	dfc00615 	stw	ra,24(sp)
     560:	df000515 	stw	fp,20(sp)
     564:	df000504 	addi	fp,sp,20
     568:	e13ffe15 	stw	r4,-8(fp)
     56c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     570:	e0bfff17 	ldw	r2,-4(fp)
     574:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     578:	e13ffe17 	ldw	r4,-8(fp)
     57c:	000050c0 	call	50c <checkID>
     580:	e0bffd15 	stw	r2,-12(fp)

	if (boven >= 4 && boven <= 184) {
     584:	e0bffc17 	ldw	r2,-16(fp)
     588:	10800110 	cmplti	r2,r2,4
     58c:	10001c1e 	bne	r2,zero,600 <moveUp+0xa8>
     590:	e0bffc17 	ldw	r2,-16(fp)
     594:	10802e48 	cmpgei	r2,r2,185
     598:	1000191e 	bne	r2,zero,600 <moveUp+0xa8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
     59c:	e0bffd17 	ldw	r2,-12(fp)
     5a0:	11800144 	addi	r6,r2,5
     5a4:	e0bffc17 	ldw	r2,-16(fp)
     5a8:	10c00044 	addi	r3,r2,1
     5ac:	00803fc4 	movi	r2,255
     5b0:	d8800015 	stw	r2,0(sp)
     5b4:	e13ffd17 	ldw	r4,-12(fp)
     5b8:	e17ffc17 	ldw	r5,-16(fp)
     5bc:	180f883a 	mov	r7,r3
     5c0:	00017480 	call	1748 <VGA_box>
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
     5c4:	e0bffc17 	ldw	r2,-16(fp)
     5c8:	11400c84 	addi	r5,r2,50
     5cc:	e0bffd17 	ldw	r2,-12(fp)
     5d0:	10c00144 	addi	r3,r2,5
     5d4:	e0bffc17 	ldw	r2,-16(fp)
     5d8:	10800cc4 	addi	r2,r2,51
     5dc:	d8000015 	stw	zero,0(sp)
     5e0:	e13ffd17 	ldw	r4,-12(fp)
     5e4:	180d883a 	mov	r6,r3
     5e8:	100f883a 	mov	r7,r2
     5ec:	00017480 	call	1748 <VGA_box>
		boven--;
     5f0:	e0bffc17 	ldw	r2,-16(fp)
     5f4:	10bfffc4 	addi	r2,r2,-1
     5f8:	e0bffc15 	stw	r2,-16(fp)
int moveUp(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven >= 4 && boven <= 184) {
     5fc:	00001006 	br	640 <moveUp+0xe8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
		boven--;
	} else if (boven > 184) {
     600:	e0bffc17 	ldw	r2,-16(fp)
     604:	10802e50 	cmplti	r2,r2,185
     608:	10000d1e 	bne	r2,zero,640 <moveUp+0xe8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
     60c:	e0bffd17 	ldw	r2,-12(fp)
     610:	11800144 	addi	r6,r2,5
     614:	e0bffc17 	ldw	r2,-16(fp)
     618:	10c00044 	addi	r3,r2,1
     61c:	00803fc4 	movi	r2,255
     620:	d8800015 	stw	r2,0(sp)
     624:	e13ffd17 	ldw	r4,-12(fp)
     628:	e17ffc17 	ldw	r5,-16(fp)
     62c:	180f883a 	mov	r7,r3
     630:	00017480 	call	1748 <VGA_box>
		boven--;
     634:	e0bffc17 	ldw	r2,-16(fp)
     638:	10bfffc4 	addi	r2,r2,-1
     63c:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     640:	e0bffc17 	ldw	r2,-16(fp)

}
     644:	e037883a 	mov	sp,fp
     648:	dfc00117 	ldw	ra,4(sp)
     64c:	df000017 	ldw	fp,0(sp)
     650:	dec00204 	addi	sp,sp,8
     654:	f800283a 	ret

00000658 <moveDown>:
int moveDown(int ID, int current) {
     658:	defff904 	addi	sp,sp,-28
     65c:	dfc00615 	stw	ra,24(sp)
     660:	df000515 	stw	fp,20(sp)
     664:	df000504 	addi	fp,sp,20
     668:	e13ffe15 	stw	r4,-8(fp)
     66c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     670:	e0bfff17 	ldw	r2,-4(fp)
     674:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     678:	e13ffe17 	ldw	r4,-8(fp)
     67c:	000050c0 	call	50c <checkID>
     680:	e0bffd15 	stw	r2,-12(fp)

	if (boven <= 184 && boven >= 4) {
     684:	e0bffc17 	ldw	r2,-16(fp)
     688:	10802e48 	cmpgei	r2,r2,185
     68c:	10001c1e 	bne	r2,zero,700 <moveDown+0xa8>
     690:	e0bffc17 	ldw	r2,-16(fp)
     694:	10800110 	cmplti	r2,r2,4
     698:	1000191e 	bne	r2,zero,700 <moveDown+0xa8>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
     69c:	e0bffc17 	ldw	r2,-16(fp)
     6a0:	11400c84 	addi	r5,r2,50
     6a4:	e0bffd17 	ldw	r2,-12(fp)
     6a8:	11800144 	addi	r6,r2,5
     6ac:	e0bffc17 	ldw	r2,-16(fp)
     6b0:	10c00cc4 	addi	r3,r2,51
     6b4:	00803fc4 	movi	r2,255
     6b8:	d8800015 	stw	r2,0(sp)
     6bc:	e13ffd17 	ldw	r4,-12(fp)
     6c0:	180f883a 	mov	r7,r3
     6c4:	00017480 	call	1748 <VGA_box>
		VGA_box(X, boven, X + 5, boven + 1, 0);
     6c8:	e0bffd17 	ldw	r2,-12(fp)
     6cc:	10c00144 	addi	r3,r2,5
     6d0:	e0bffc17 	ldw	r2,-16(fp)
     6d4:	10800044 	addi	r2,r2,1
     6d8:	d8000015 	stw	zero,0(sp)
     6dc:	e13ffd17 	ldw	r4,-12(fp)
     6e0:	e17ffc17 	ldw	r5,-16(fp)
     6e4:	180d883a 	mov	r6,r3
     6e8:	100f883a 	mov	r7,r2
     6ec:	00017480 	call	1748 <VGA_box>
		boven++;
     6f0:	e0bffc17 	ldw	r2,-16(fp)
     6f4:	10800044 	addi	r2,r2,1
     6f8:	e0bffc15 	stw	r2,-16(fp)
int moveDown(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven <= 184 && boven >= 4) {
     6fc:	00001106 	br	744 <moveDown+0xec>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
		VGA_box(X, boven, X + 5, boven + 1, 0);
		boven++;
	} else if (boven < 4) {
     700:	e0bffc17 	ldw	r2,-16(fp)
     704:	10800108 	cmpgei	r2,r2,4
     708:	10000e1e 	bne	r2,zero,744 <moveDown+0xec>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
     70c:	e0bffc17 	ldw	r2,-16(fp)
     710:	11400c84 	addi	r5,r2,50
     714:	e0bffd17 	ldw	r2,-12(fp)
     718:	11800144 	addi	r6,r2,5
     71c:	e0bffc17 	ldw	r2,-16(fp)
     720:	10c00cc4 	addi	r3,r2,51
     724:	00803fc4 	movi	r2,255
     728:	d8800015 	stw	r2,0(sp)
     72c:	e13ffd17 	ldw	r4,-12(fp)
     730:	180f883a 	mov	r7,r3
     734:	00017480 	call	1748 <VGA_box>
		boven++;
     738:	e0bffc17 	ldw	r2,-16(fp)
     73c:	10800044 	addi	r2,r2,1
     740:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     744:	e0bffc17 	ldw	r2,-16(fp)

}
     748:	e037883a 	mov	sp,fp
     74c:	dfc00117 	ldw	ra,4(sp)
     750:	df000017 	ldw	fp,0(sp)
     754:	dec00204 	addi	sp,sp,8
     758:	f800283a 	ret

0000075c <Game>:

typedef struct balk {
	int Hoogte;
} Balk;

void Game(void* pdata) {
     75c:	defff604 	addi	sp,sp,-40
     760:	dfc00915 	stw	ra,36(sp)
     764:	df000815 	stw	fp,32(sp)
     768:	df000804 	addi	fp,sp,32
     76c:	e13ffd15 	stw	r4,-12(fp)


	ALT_x1 = 0;
     770:	d0281515 	stw	zero,-24492(gp)
	ALT_x2 = 165;
     774:	00802944 	movi	r2,165
     778:	d0a81715 	stw	r2,-24484(gp)
	ALT_y = 100;
     77c:	00801904 	movi	r2,100
     780:	d0a81215 	stw	r2,-24504(gp)
	ALT_inc_x = 1;
     784:	00800044 	movi	r2,1
     788:	d0a81615 	stw	r2,-24488(gp)
	ALT_inc_y = 1;
     78c:	00800044 	movi	r2,1
     790:	d0a81315 	stw	r2,-24500(gp)

	pixel_buffer_x = 319;
     794:	00804fc4 	movi	r2,319
     798:	d0a81115 	stw	r2,-24508(gp)
	pixel_buffer_y = 230;
     79c:	00803984 	movi	r2,230
     7a0:	d0a80f15 	stw	r2,-24516(gp)
	//char_buffer_x = 79; char_buffer_y = 59;

	//blue_x1 = 28; blue_x2 = 52; blue_y1 = 26; blue_y2 = 34;

	while (1) {
		OSFlagPend(Flags, Game_Flag + C1_Flag + C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     7a4:	d0e80a17 	ldw	r3,-24536(gp)
     7a8:	e0bffc04 	addi	r2,fp,-16
     7ac:	d8800015 	stw	r2,0(sp)
     7b0:	1809883a 	mov	r4,r3
     7b4:	01400384 	movi	r5,14
     7b8:	01800044 	movi	r6,1
     7bc:	000f883a 	mov	r7,zero
     7c0:	0011b880 	call	11b88 <OSFlagPend>

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
     7c4:	d0e80b17 	ldw	r3,-24532(gp)
     7c8:	e0bffc04 	addi	r2,fp,-16
     7cc:	1809883a 	mov	r4,r3
     7d0:	000b883a 	mov	r5,zero
     7d4:	100d883a 	mov	r6,r2
     7d8:	0012e800 	call	12e80 <OSMboxPend>
     7dc:	e0bffa15 	stw	r2,-24(fp)
		balkje2 = (Balk*) OSMboxPend(MailBox2, 0, &err);
     7e0:	d0e80917 	ldw	r3,-24540(gp)
     7e4:	e0bffc04 	addi	r2,fp,-16
     7e8:	1809883a 	mov	r4,r3
     7ec:	000b883a 	mov	r5,zero
     7f0:	100d883a 	mov	r6,r2
     7f4:	0012e800 	call	12e80 <OSMboxPend>
     7f8:	e0bffb15 	stw	r2,-20(fp)



		for (i = 0; i <= 9; i++) {
     7fc:	e03ff915 	stw	zero,-28(fp)
     800:	00001706 	br	860 <Game+0x104>

			if (score1 == i) {
     804:	d0e81017 	ldw	r3,-24512(gp)
     808:	e0bff917 	ldw	r2,-28(fp)
     80c:	1880031e 	bne	r3,r2,81c <Game+0xc0>
				draw_number(i, 1);
     810:	e13ff917 	ldw	r4,-28(fp)
     814:	01400044 	movi	r5,1
     818:	00019a00 	call	19a0 <draw_number>
			}
			if (score2 == i) {
     81c:	d0e80d17 	ldw	r3,-24524(gp)
     820:	e0bff917 	ldw	r2,-28(fp)
     824:	1880031e 	bne	r3,r2,834 <Game+0xd8>
				draw_number(i, 2);
     828:	e13ff917 	ldw	r4,-28(fp)
     82c:	01400084 	movi	r5,2
     830:	00019a00 	call	19a0 <draw_number>
			}
			if(score1 == 9 || score2 == 9){
     834:	d0a81017 	ldw	r2,-24512(gp)
     838:	10800260 	cmpeqi	r2,r2,9
     83c:	1000031e 	bne	r2,zero,84c <Game+0xf0>
     840:	d0a80d17 	ldw	r2,-24524(gp)
     844:	10800258 	cmpnei	r2,r2,9
     848:	1000021e 	bne	r2,zero,854 <Game+0xf8>
				score1 =0;
     84c:	d0281015 	stw	zero,-24512(gp)
				score2 =0;
     850:	d0280d15 	stw	zero,-24524(gp)
		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
		balkje2 = (Balk*) OSMboxPend(MailBox2, 0, &err);



		for (i = 0; i <= 9; i++) {
     854:	e0bff917 	ldw	r2,-28(fp)
     858:	10800044 	addi	r2,r2,1
     85c:	e0bff915 	stw	r2,-28(fp)
     860:	e0bff917 	ldw	r2,-28(fp)
     864:	10800290 	cmplti	r2,r2,10
     868:	103fe61e 	bne	r2,zero,804 <__alt_mem_Flash_flash_data+0xf4000804>
				score1 =0;
				score2 =0;

			}
		}
		draw_middenlijn();
     86c:	000188c0 	call	188c <draw_middenlijn>
		if (check == 1) {
     870:	d0a00117 	ldw	r2,-32764(gp)
     874:	10800058 	cmpnei	r2,r2,1
     878:	1000181e 	bne	r2,zero,8dc <Game+0x180>
			del_middenlijn();
     87c:	00018f40 	call	18f4 <del_middenlijn>
			VGA_text(20, 20, "Houdt de knop ingedrukt om te spelen");
     880:	01000504 	movi	r4,20
     884:	01400504 	movi	r5,20
     888:	018000b4 	movhi	r6,2
     88c:	31ad9e04 	addi	r6,r6,-18824
     890:	00017fc0 	call	17fc <VGA_text>
			OSTimeDlyHMSM(0, 1, 0, 0);
     894:	0009883a 	mov	r4,zero
     898:	01400044 	movi	r5,1
     89c:	000d883a 	mov	r6,zero
     8a0:	000f883a 	mov	r7,zero
     8a4:	00174e40 	call	174e4 <OSTimeDlyHMSM>
			VGA_text(20, 20, "                                    ");
     8a8:	01000504 	movi	r4,20
     8ac:	01400504 	movi	r5,20
     8b0:	018000b4 	movhi	r6,2
     8b4:	31ada804 	addi	r6,r6,-18784
     8b8:	00017fc0 	call	17fc <VGA_text>

			del_number(1);
     8bc:	01000044 	movi	r4,1
     8c0:	00019300 	call	1930 <del_number>
			del_number(2);
     8c4:	01000084 	movi	r4,2
     8c8:	00019300 	call	1930 <del_number>

			score1 = 0;
     8cc:	d0281015 	stw	zero,-24512(gp)
			score2 = 0;
     8d0:	d0280d15 	stw	zero,-24524(gp)

			i = 0;
     8d4:	e03ff915 	stw	zero,-28(fp)

			check = 0;
     8d8:	d0200115 	stw	zero,-32764(gp)
		}

		if (controller(3) == 1) {
     8dc:	010000c4 	movi	r4,3
     8e0:	000035c0 	call	35c <controller>
     8e4:	10800058 	cmpnei	r2,r2,1
     8e8:	1000a41e 	bne	r2,zero,b7c <Game+0x420>

			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     8ec:	d1281517 	ldw	r4,-24492(gp)
     8f0:	d1681217 	ldw	r5,-24504(gp)
     8f4:	d0a81517 	ldw	r2,-24492(gp)
     8f8:	10c00144 	addi	r3,r2,5
     8fc:	d0a81217 	ldw	r2,-24504(gp)
     900:	10800144 	addi	r2,r2,5
     904:	d8000015 	stw	zero,0(sp)
     908:	180d883a 	mov	r6,r3
     90c:	100f883a 	mov	r7,r2
     910:	00017480 	call	1748 <VGA_box>
			if (first == 1) {
     914:	d0a00017 	ldw	r2,-32768(gp)
     918:	10800058 	cmpnei	r2,r2,1
     91c:	10000f1e 	bne	r2,zero,95c <Game+0x200>
				ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
     920:	d0a81517 	ldw	r2,-24492(gp)
     924:	10c02804 	addi	r3,r2,160
     928:	d0a81617 	ldw	r2,-24488(gp)
     92c:	1885883a 	add	r2,r3,r2
     930:	d0a81515 	stw	r2,-24492(gp)
				ALT_x2 += ALT_inc_x;
     934:	d0e81717 	ldw	r3,-24484(gp)
     938:	d0a81617 	ldw	r2,-24488(gp)
     93c:	1885883a 	add	r2,r3,r2
     940:	d0a81715 	stw	r2,-24484(gp)
				ALT_y += ALT_inc_y;
     944:	d0e81217 	ldw	r3,-24504(gp)
     948:	d0a81317 	ldw	r2,-24500(gp)
     94c:	1885883a 	add	r2,r3,r2
     950:	d0a81215 	stw	r2,-24504(gp)
				first = 0;
     954:	d0200015 	stw	zero,-32768(gp)
     958:	00000c06 	br	98c <Game+0x230>
			} else {
				ALT_x1 += ALT_inc_x;
     95c:	d0e81517 	ldw	r3,-24492(gp)
     960:	d0a81617 	ldw	r2,-24488(gp)
     964:	1885883a 	add	r2,r3,r2
     968:	d0a81515 	stw	r2,-24492(gp)
				ALT_x2 += ALT_inc_x;
     96c:	d0e81717 	ldw	r3,-24484(gp)
     970:	d0a81617 	ldw	r2,-24488(gp)
     974:	1885883a 	add	r2,r3,r2
     978:	d0a81715 	stw	r2,-24484(gp)
				ALT_y += ALT_inc_y;
     97c:	d0e81217 	ldw	r3,-24504(gp)
     980:	d0a81317 	ldw	r2,-24500(gp)
     984:	1885883a 	add	r2,r3,r2
     988:	d0a81215 	stw	r2,-24504(gp)
			}
			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
     98c:	d1281517 	ldw	r4,-24492(gp)
     990:	d1681217 	ldw	r5,-24504(gp)
     994:	d0a81517 	ldw	r2,-24492(gp)
     998:	11800144 	addi	r6,r2,5
     99c:	d0a81217 	ldw	r2,-24504(gp)
     9a0:	10c00144 	addi	r3,r2,5
     9a4:	00804034 	movhi	r2,256
     9a8:	10bfffc4 	addi	r2,r2,-1
     9ac:	d8800015 	stw	r2,0(sp)
     9b0:	180f883a 	mov	r7,r3
     9b4:	00017480 	call	1748 <VGA_box>

			//collision rand boven en onder
			if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
     9b8:	d0e81217 	ldw	r3,-24504(gp)
     9bc:	d0a80f17 	ldw	r2,-24516(gp)
     9c0:	18800326 	beq	r3,r2,9d0 <Game+0x274>
     9c4:	d0a81217 	ldw	r2,-24504(gp)
     9c8:	10800118 	cmpnei	r2,r2,4
     9cc:	1000031e 	bne	r2,zero,9dc <Game+0x280>
				ALT_inc_y = -(ALT_inc_y);
     9d0:	d0a81317 	ldw	r2,-24500(gp)
     9d4:	0085c83a 	sub	r2,zero,r2
     9d8:	d0a81315 	stw	r2,-24500(gp)
			if ((ALT_x2 == pixel_buffer_x) || (ALT_x1 == 0)) {
				//ALT_inc_x = -(ALT_inc_x);
			}

			//links dood
			if (ALT_x1 == 0) {
     9dc:	d0a81517 	ldw	r2,-24492(gp)
     9e0:	1000071e 	bne	r2,zero,a00 <Game+0x2a4>
				score2++;
     9e4:	d0a80d17 	ldw	r2,-24524(gp)
     9e8:	10800044 	addi	r2,r2,1
     9ec:	d0a80d15 	stw	r2,-24524(gp)
				gescoord(2);
     9f0:	01000084 	movi	r4,2
     9f4:	0000b940 	call	b94 <gescoord>
				del_number(2);
     9f8:	01000084 	movi	r4,2
     9fc:	00019300 	call	1930 <del_number>
			}

			//rechts dood
			if (ALT_x2 == pixel_buffer_x) {
     a00:	d0e81717 	ldw	r3,-24484(gp)
     a04:	d0a81117 	ldw	r2,-24508(gp)
     a08:	1880071e 	bne	r3,r2,a28 <Game+0x2cc>
				score1++;
     a0c:	d0a81017 	ldw	r2,-24512(gp)
     a10:	10800044 	addi	r2,r2,1
     a14:	d0a81015 	stw	r2,-24512(gp)
				gescoord(1);
     a18:	01000044 	movi	r4,1
     a1c:	0000b940 	call	b94 <gescoord>
				del_number(1);
     a20:	01000044 	movi	r4,1
     a24:	00019300 	call	1930 <del_number>
			}

			//collision linker balkje
			//lange zijde
			if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte - 6 && ALT_y < balkje->Hoogte + 50)){
     a28:	d0a81517 	ldw	r2,-24492(gp)
     a2c:	10800558 	cmpnei	r2,r2,21
     a30:	10000d1e 	bne	r2,zero,a68 <Game+0x30c>
     a34:	e0bffa17 	ldw	r2,-24(fp)
     a38:	10800017 	ldw	r2,0(r2)
     a3c:	10fffe84 	addi	r3,r2,-6
     a40:	d0a81217 	ldw	r2,-24504(gp)
     a44:	1880080e 	bge	r3,r2,a68 <Game+0x30c>
     a48:	e0bffa17 	ldw	r2,-24(fp)
     a4c:	10800017 	ldw	r2,0(r2)
     a50:	10800c84 	addi	r2,r2,50
     a54:	d0e81217 	ldw	r3,-24504(gp)
     a58:	1880030e 	bge	r3,r2,a68 <Game+0x30c>
				ALT_inc_x = -(ALT_inc_x);
     a5c:	d0a81617 	ldw	r2,-24488(gp)
     a60:	0085c83a 	sub	r2,zero,r2
     a64:	d0a81615 	stw	r2,-24488(gp)
			}
			//boven
			if(((ALT_x1 <= 20 && ALT_x1 >= 15) && ALT_y == balkje->Hoogte - 6) || ((ALT_x1 <= 20 && ALT_x1 >= 15) && ALT_y == balkje->Hoogte + 50)){
     a68:	d0a81517 	ldw	r2,-24492(gp)
     a6c:	10800548 	cmpgei	r2,r2,21
     a70:	1000081e 	bne	r2,zero,a94 <Game+0x338>
     a74:	d0a81517 	ldw	r2,-24492(gp)
     a78:	108003d0 	cmplti	r2,r2,15
     a7c:	1000051e 	bne	r2,zero,a94 <Game+0x338>
     a80:	e0bffa17 	ldw	r2,-24(fp)
     a84:	10800017 	ldw	r2,0(r2)
     a88:	10fffe84 	addi	r3,r2,-6
     a8c:	d0a81217 	ldw	r2,-24504(gp)
     a90:	18800b26 	beq	r3,r2,ac0 <Game+0x364>
     a94:	d0a81517 	ldw	r2,-24492(gp)
     a98:	10800548 	cmpgei	r2,r2,21
     a9c:	10000b1e 	bne	r2,zero,acc <Game+0x370>
     aa0:	d0a81517 	ldw	r2,-24492(gp)
     aa4:	108003d0 	cmplti	r2,r2,15
     aa8:	1000081e 	bne	r2,zero,acc <Game+0x370>
     aac:	e0bffa17 	ldw	r2,-24(fp)
     ab0:	10800017 	ldw	r2,0(r2)
     ab4:	10c00c84 	addi	r3,r2,50
     ab8:	d0a81217 	ldw	r2,-24504(gp)
     abc:	1880031e 	bne	r3,r2,acc <Game+0x370>
				ALT_inc_y = -(ALT_inc_y);
     ac0:	d0a81317 	ldw	r2,-24500(gp)
     ac4:	0085c83a 	sub	r2,zero,r2
     ac8:	d0a81315 	stw	r2,-24500(gp)
			}

			//collision rechter balkje
			//lange zijde
			if(ALT_x2 == 299 && (ALT_y > balkje2->Hoogte - 6 && ALT_y < balkje2->Hoogte + 50)){
     acc:	d0a81717 	ldw	r2,-24484(gp)
     ad0:	10804ad8 	cmpnei	r2,r2,299
     ad4:	10000d1e 	bne	r2,zero,b0c <Game+0x3b0>
     ad8:	e0bffb17 	ldw	r2,-20(fp)
     adc:	10800017 	ldw	r2,0(r2)
     ae0:	10fffe84 	addi	r3,r2,-6
     ae4:	d0a81217 	ldw	r2,-24504(gp)
     ae8:	1880080e 	bge	r3,r2,b0c <Game+0x3b0>
     aec:	e0bffb17 	ldw	r2,-20(fp)
     af0:	10800017 	ldw	r2,0(r2)
     af4:	10800c84 	addi	r2,r2,50
     af8:	d0e81217 	ldw	r3,-24504(gp)
     afc:	1880030e 	bge	r3,r2,b0c <Game+0x3b0>
				ALT_inc_x = -(ALT_inc_x);
     b00:	d0a81617 	ldw	r2,-24488(gp)
     b04:	0085c83a 	sub	r2,zero,r2
     b08:	d0a81615 	stw	r2,-24488(gp)
			}
			//boven
			if(((ALT_x2 <= 305 && ALT_x2 >= 300) && ALT_y == balkje2->Hoogte - 6) || ((ALT_x2 <= 305 && ALT_x2 >= 300) && ALT_y == balkje2->Hoogte + 50)){
     b0c:	d0a81717 	ldw	r2,-24484(gp)
     b10:	10804c88 	cmpgei	r2,r2,306
     b14:	1000081e 	bne	r2,zero,b38 <Game+0x3dc>
     b18:	d0a81717 	ldw	r2,-24484(gp)
     b1c:	10804b10 	cmplti	r2,r2,300
     b20:	1000051e 	bne	r2,zero,b38 <Game+0x3dc>
     b24:	e0bffb17 	ldw	r2,-20(fp)
     b28:	10800017 	ldw	r2,0(r2)
     b2c:	10fffe84 	addi	r3,r2,-6
     b30:	d0a81217 	ldw	r2,-24504(gp)
     b34:	18800b26 	beq	r3,r2,b64 <Game+0x408>
     b38:	d0a81717 	ldw	r2,-24484(gp)
     b3c:	10804c88 	cmpgei	r2,r2,306
     b40:	10000b1e 	bne	r2,zero,b70 <Game+0x414>
     b44:	d0a81717 	ldw	r2,-24484(gp)
     b48:	10804b10 	cmplti	r2,r2,300
     b4c:	1000081e 	bne	r2,zero,b70 <Game+0x414>
     b50:	e0bffb17 	ldw	r2,-20(fp)
     b54:	10800017 	ldw	r2,0(r2)
     b58:	10c00c84 	addi	r3,r2,50
     b5c:	d0a81217 	ldw	r2,-24504(gp)
     b60:	1880031e 	bne	r3,r2,b70 <Game+0x414>
				ALT_inc_y = -(ALT_inc_y);
     b64:	d0a81317 	ldw	r2,-24500(gp)
     b68:	0085c83a 	sub	r2,zero,r2
     b6c:	d0a81315 	stw	r2,-24500(gp)
			}



			OSTimeDly(1);
     b70:	01000044 	movi	r4,1
     b74:	001739c0 	call	1739c <OSTimeDly>
     b78:	00000506 	br	b90 <Game+0x434>

		} else if (controller(2) != 2) {
     b7c:	01000084 	movi	r4,2
     b80:	000035c0 	call	35c <controller>
     b84:	108000a0 	cmpeqi	r2,r2,2
     b88:	1000011e 	bne	r2,zero,b90 <Game+0x434>
			endGame();
     b8c:	0000db80 	call	db8 <endGame>
		}

	}
     b90:	003f0406 	br	7a4 <__alt_mem_Flash_flash_data+0xf40007a4>

00000b94 <gescoord>:
}

void gescoord(int ID){
     b94:	defffc04 	addi	sp,sp,-16
     b98:	dfc00315 	stw	ra,12(sp)
     b9c:	df000215 	stw	fp,8(sp)
     ba0:	df000204 	addi	fp,sp,8
     ba4:	e13fff15 	stw	r4,-4(fp)

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     ba8:	d1281517 	ldw	r4,-24492(gp)
     bac:	d1681217 	ldw	r5,-24504(gp)
     bb0:	d0a81517 	ldw	r2,-24492(gp)
     bb4:	10c00144 	addi	r3,r2,5
     bb8:	d0a81217 	ldw	r2,-24504(gp)
     bbc:	10800144 	addi	r2,r2,5
     bc0:	d8000015 	stw	zero,0(sp)
     bc4:	180d883a 	mov	r6,r3
     bc8:	100f883a 	mov	r7,r2
     bcc:	00017480 	call	1748 <VGA_box>

	first = 1;
     bd0:	00800044 	movi	r2,1
     bd4:	d0a00015 	stw	r2,-32768(gp)

	if(ID == 1){
     bd8:	e0bfff17 	ldw	r2,-4(fp)
     bdc:	10800058 	cmpnei	r2,r2,1
     be0:	1000221e 	bne	r2,zero,c6c <gescoord+0xd8>
		VGA_text(30, 25, "Speler 1 heeft gescoord!");
     be4:	01000784 	movi	r4,30
     be8:	01400644 	movi	r5,25
     bec:	018000b4 	movhi	r6,2
     bf0:	31adb204 	addi	r6,r6,-18744
     bf4:	00017fc0 	call	17fc <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     bf8:	0009883a 	mov	r4,zero
     bfc:	000b883a 	mov	r5,zero
     c00:	018008c4 	movi	r6,35
     c04:	000f883a 	mov	r7,zero
     c08:	00174e40 	call	174e4 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                        ");
     c0c:	01000784 	movi	r4,30
     c10:	01400644 	movi	r5,25
     c14:	018000b4 	movhi	r6,2
     c18:	31adb904 	addi	r6,r6,-18716
     c1c:	00017fc0 	call	17fc <VGA_text>
		ALT_x1 = 0;
     c20:	d0281515 	stw	zero,-24492(gp)
		ALT_x2 = 165;
     c24:	00802944 	movi	r2,165
     c28:	d0a81715 	stw	r2,-24484(gp)
		ALT_y = 100;
     c2c:	00801904 	movi	r2,100
     c30:	d0a81215 	stw	r2,-24504(gp)
		ALT_inc_x = -1;
     c34:	00bfffc4 	movi	r2,-1
     c38:	d0a81615 	stw	r2,-24488(gp)
		if(random == 1){
     c3c:	d0a80e17 	ldw	r2,-24520(gp)
     c40:	10800058 	cmpnei	r2,r2,1
     c44:	1000031e 	bne	r2,zero,c54 <gescoord+0xc0>
			ALT_inc_y = -1;
     c48:	00bfffc4 	movi	r2,-1
     c4c:	d0a81315 	stw	r2,-24500(gp)
     c50:	00000506 	br	c68 <gescoord+0xd4>
			random == 0;
		}else if(random == 0){
     c54:	d0a80e17 	ldw	r2,-24520(gp)
     c58:	1000031e 	bne	r2,zero,c68 <gescoord+0xd4>
			ALT_inc_y = 1;
     c5c:	00800044 	movi	r2,1
     c60:	d0a81315 	stw	r2,-24500(gp)
     c64:	00004f06 	br	da4 <gescoord+0x210>
     c68:	00004e06 	br	da4 <gescoord+0x210>
			random == 1;
		}
	}else if(ID == 2){
     c6c:	e0bfff17 	ldw	r2,-4(fp)
     c70:	10800098 	cmpnei	r2,r2,2
     c74:	1000251e 	bne	r2,zero,d0c <gescoord+0x178>
		VGA_text(30, 25, "Speler 2 heeft gescoord!");
     c78:	01000784 	movi	r4,30
     c7c:	01400644 	movi	r5,25
     c80:	018000b4 	movhi	r6,2
     c84:	31adc004 	addi	r6,r6,-18688
     c88:	00017fc0 	call	17fc <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     c8c:	0009883a 	mov	r4,zero
     c90:	000b883a 	mov	r5,zero
     c94:	018008c4 	movi	r6,35
     c98:	000f883a 	mov	r7,zero
     c9c:	00174e40 	call	174e4 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                        ");
     ca0:	01000784 	movi	r4,30
     ca4:	01400644 	movi	r5,25
     ca8:	018000b4 	movhi	r6,2
     cac:	31adb904 	addi	r6,r6,-18716
     cb0:	00017fc0 	call	17fc <VGA_text>
		ALT_x1 = 0;
     cb4:	d0281515 	stw	zero,-24492(gp)
		ALT_x2 = 165;
     cb8:	00802944 	movi	r2,165
     cbc:	d0a81715 	stw	r2,-24484(gp)
		ALT_y = 100;
     cc0:	00801904 	movi	r2,100
     cc4:	d0a81215 	stw	r2,-24504(gp)
		ALT_inc_x = 1;
     cc8:	00800044 	movi	r2,1
     ccc:	d0a81615 	stw	r2,-24488(gp)
		if(random == 1){
     cd0:	d0a80e17 	ldw	r2,-24520(gp)
     cd4:	10800058 	cmpnei	r2,r2,1
     cd8:	1000041e 	bne	r2,zero,cec <gescoord+0x158>
			ALT_inc_y = 1;
     cdc:	00800044 	movi	r2,1
     ce0:	d0a81315 	stw	r2,-24500(gp)
			random = 0;
     ce4:	d0280e15 	stw	zero,-24520(gp)
     ce8:	00000706 	br	d08 <gescoord+0x174>
		}else if(random == 0){
     cec:	d0a80e17 	ldw	r2,-24520(gp)
     cf0:	1000051e 	bne	r2,zero,d08 <gescoord+0x174>
			ALT_inc_y = -1;
     cf4:	00bfffc4 	movi	r2,-1
     cf8:	d0a81315 	stw	r2,-24500(gp)
			random = 1;
     cfc:	00800044 	movi	r2,1
     d00:	d0a80e15 	stw	r2,-24520(gp)
     d04:	00002706 	br	da4 <gescoord+0x210>
     d08:	00002606 	br	da4 <gescoord+0x210>
		}
	}else if(ID == 3){
     d0c:	e0bfff17 	ldw	r2,-4(fp)
     d10:	108000d8 	cmpnei	r2,r2,3
     d14:	1000231e 	bne	r2,zero,da4 <gescoord+0x210>
		VGA_text(30, 25, "De computer heeft gescoord!");
     d18:	01000784 	movi	r4,30
     d1c:	01400644 	movi	r5,25
     d20:	018000b4 	movhi	r6,2
     d24:	31adc704 	addi	r6,r6,-18660
     d28:	00017fc0 	call	17fc <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     d2c:	0009883a 	mov	r4,zero
     d30:	000b883a 	mov	r5,zero
     d34:	018008c4 	movi	r6,35
     d38:	000f883a 	mov	r7,zero
     d3c:	00174e40 	call	174e4 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                           ");
     d40:	01000784 	movi	r4,30
     d44:	01400644 	movi	r5,25
     d48:	018000b4 	movhi	r6,2
     d4c:	31adce04 	addi	r6,r6,-18632
     d50:	00017fc0 	call	17fc <VGA_text>
		ALT_x1 = 0;
     d54:	d0281515 	stw	zero,-24492(gp)
		ALT_x2 = 165;
     d58:	00802944 	movi	r2,165
     d5c:	d0a81715 	stw	r2,-24484(gp)
		ALT_y = 100;
     d60:	00801904 	movi	r2,100
     d64:	d0a81215 	stw	r2,-24504(gp)
		ALT_inc_x = -1;
     d68:	00bfffc4 	movi	r2,-1
     d6c:	d0a81615 	stw	r2,-24488(gp)
		if(random == 1){
     d70:	d0a80e17 	ldw	r2,-24520(gp)
     d74:	10800058 	cmpnei	r2,r2,1
     d78:	1000041e 	bne	r2,zero,d8c <gescoord+0x1f8>
			ALT_inc_y = 1;
     d7c:	00800044 	movi	r2,1
     d80:	d0a81315 	stw	r2,-24500(gp)
			random = 0;
     d84:	d0280e15 	stw	zero,-24520(gp)
     d88:	00000606 	br	da4 <gescoord+0x210>
		}else if(random == 0){
     d8c:	d0a80e17 	ldw	r2,-24520(gp)
     d90:	1000041e 	bne	r2,zero,da4 <gescoord+0x210>
			ALT_inc_y = -1;
     d94:	00bfffc4 	movi	r2,-1
     d98:	d0a81315 	stw	r2,-24500(gp)
			random = 1;
     d9c:	00800044 	movi	r2,1
     da0:	d0a80e15 	stw	r2,-24520(gp)
		}
	}

}
     da4:	e037883a 	mov	sp,fp
     da8:	dfc00117 	ldw	ra,4(sp)
     dac:	df000017 	ldw	fp,0(sp)
     db0:	dec00204 	addi	sp,sp,8
     db4:	f800283a 	ret

00000db8 <endGame>:

void endGame() {
     db8:	defffc04 	addi	sp,sp,-16
     dbc:	dfc00315 	stw	ra,12(sp)
     dc0:	df000215 	stw	fp,8(sp)
     dc4:	df000204 	addi	fp,sp,8
	INT8U err;

	printf("end game\n");
     dc8:	010000b4 	movhi	r4,2
     dcc:	212dd504 	addi	r4,r4,-18604
     dd0:	00021700 	call	2170 <puts>

	clearScreen();
     dd4:	00012c80 	call	12c8 <clearScreen>

	OSFlagPost(Flags, Game_Flag + C1_Flag + C2_Flag, OS_FLAG_SET, &err);
     dd8:	d0a80a17 	ldw	r2,-24536(gp)
     ddc:	1009883a 	mov	r4,r2
     de0:	01400384 	movi	r5,14
     de4:	01800044 	movi	r6,1
     de8:	e1ffff04 	addi	r7,fp,-4
     dec:	00121e00 	call	121e0 <OSFlagPost>

	VGA_text(35, 25, "GAME OVER");
     df0:	010008c4 	movi	r4,35
     df4:	01400644 	movi	r5,25
     df8:	018000b4 	movhi	r6,2
     dfc:	31add804 	addi	r6,r6,-18592
     e00:	00017fc0 	call	17fc <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
     e04:	0009883a 	mov	r4,zero
     e08:	000b883a 	mov	r5,zero
     e0c:	01800a04 	movi	r6,40
     e10:	000f883a 	mov	r7,zero
     e14:	00174e40 	call	174e4 <OSTimeDlyHMSM>
	VGA_text(35, 25, "         ");
     e18:	010008c4 	movi	r4,35
     e1c:	01400644 	movi	r5,25
     e20:	018000b4 	movhi	r6,2
     e24:	31addb04 	addi	r6,r6,-18580
     e28:	00017fc0 	call	17fc <VGA_text>

	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
     e2c:	d0a80a17 	ldw	r2,-24536(gp)
     e30:	1009883a 	mov	r4,r2
     e34:	01400444 	movi	r5,17
     e38:	000d883a 	mov	r6,zero
     e3c:	e1ffff04 	addi	r7,fp,-4
     e40:	00121e00 	call	121e0 <OSFlagPost>

	teken_menu();
     e44:	00014880 	call	1488 <teken_menu>
	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     e48:	d1281517 	ldw	r4,-24492(gp)
     e4c:	d1681217 	ldw	r5,-24504(gp)
     e50:	d0a81517 	ldw	r2,-24492(gp)
     e54:	10c00144 	addi	r3,r2,5
     e58:	d0a81217 	ldw	r2,-24504(gp)
     e5c:	10800144 	addi	r2,r2,5
     e60:	d8000015 	stw	zero,0(sp)
     e64:	180d883a 	mov	r6,r3
     e68:	100f883a 	mov	r7,r2
     e6c:	00017480 	call	1748 <VGA_box>

	ALT_x1 = 0;
     e70:	d0281515 	stw	zero,-24492(gp)
	ALT_x2 = 165;
     e74:	00802944 	movi	r2,165
     e78:	d0a81715 	stw	r2,-24484(gp)
	ALT_y = 100;
     e7c:	00801904 	movi	r2,100
     e80:	d0a81215 	stw	r2,-24504(gp)
	ALT_inc_x = 1;
     e84:	00800044 	movi	r2,1
     e88:	d0a81615 	stw	r2,-24488(gp)
	ALT_inc_y = 1;
     e8c:	00800044 	movi	r2,1
     e90:	d0a81315 	stw	r2,-24500(gp)

	check = 1;
     e94:	00800044 	movi	r2,1
     e98:	d0a00115 	stw	r2,-32764(gp)
	first = 1;
     e9c:	00800044 	movi	r2,1
     ea0:	d0a00015 	stw	r2,-32768(gp)

}
     ea4:	e037883a 	mov	sp,fp
     ea8:	dfc00117 	ldw	ra,4(sp)
     eac:	df000017 	ldw	fp,0(sp)
     eb0:	dec00204 	addi	sp,sp,8
     eb4:	f800283a 	ret

00000eb8 <menu>:
int eenkeer = 1;
int onePress = 1;
int last;
int changed;

void menu(void* pdata){
     eb8:	defffa04 	addi	sp,sp,-24
     ebc:	dfc00515 	stw	ra,20(sp)
     ec0:	df000415 	stw	fp,16(sp)
     ec4:	df000404 	addi	fp,sp,16
     ec8:	e13fff15 	stw	r4,-4(fp)
	int ID = (int*)pdata;
     ecc:	e0bfff17 	ldw	r2,-4(fp)
     ed0:	e0bffd15 	stw	r2,-12(fp)
	INT8U err;

	teken_menu();
     ed4:	00014880 	call	1488 <teken_menu>

	while(1){
		OSFlagPend(Flags, Menu_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
     ed8:	d0e80a17 	ldw	r3,-24536(gp)
     edc:	e0bffe04 	addi	r2,fp,-8
     ee0:	d8800015 	stw	r2,0(sp)
     ee4:	1809883a 	mov	r4,r3
     ee8:	01400044 	movi	r5,1
     eec:	000d883a 	mov	r6,zero
     ef0:	000f883a 	mov	r7,zero
     ef4:	0011b880 	call	11b88 <OSFlagPend>

		if (controller(ID) == 1){
     ef8:	e13ffd17 	ldw	r4,-12(fp)
     efc:	000035c0 	call	35c <controller>
     f00:	10800058 	cmpnei	r2,r2,1
     f04:	1000111e 	bne	r2,zero,f4c <menu+0x94>
			if(changed != 0){
     f08:	d0a81a17 	ldw	r2,-24472(gp)
     f0c:	10000926 	beq	r2,zero,f34 <menu+0x7c>
				gameModeMenu++;
     f10:	d0a00217 	ldw	r2,-32760(gp)
     f14:	10800044 	addi	r2,r2,1
     f18:	d0a00215 	stw	r2,-32760(gp)
				eenkeer = 1;
     f1c:	00800044 	movi	r2,1
     f20:	d0a00915 	stw	r2,-32732(gp)
				changed=0;
     f24:	d0281a15 	stw	zero,-24472(gp)
				printf("heeft 1 gereturned \n");
     f28:	010000b4 	movhi	r4,2
     f2c:	212dde04 	addi	r4,r4,-18568
     f30:	00021700 	call	2170 <puts>
			}
			if (gameModeMenu >= 5){
     f34:	d0a00217 	ldw	r2,-32760(gp)
     f38:	10800150 	cmplti	r2,r2,5
     f3c:	1000161e 	bne	r2,zero,f98 <menu+0xe0>
				gameModeMenu = 1;
     f40:	00800044 	movi	r2,1
     f44:	d0a00215 	stw	r2,-32760(gp)
     f48:	00001306 	br	f98 <menu+0xe0>
			}
		} else if (controller(ID) == 0){
     f4c:	e13ffd17 	ldw	r4,-12(fp)
     f50:	000035c0 	call	35c <controller>
     f54:	1000101e 	bne	r2,zero,f98 <menu+0xe0>
			if(changed !=0){
     f58:	d0a81a17 	ldw	r2,-24472(gp)
     f5c:	10000a26 	beq	r2,zero,f88 <menu+0xd0>
				gameModeMenu--;
     f60:	d0a00217 	ldw	r2,-32760(gp)
     f64:	10bfffc4 	addi	r2,r2,-1
     f68:	d0a00215 	stw	r2,-32760(gp)
				last=0;
     f6c:	d0281915 	stw	zero,-24476(gp)
				changed=0;
     f70:	d0281a15 	stw	zero,-24472(gp)
				eenkeer = 1;
     f74:	00800044 	movi	r2,1
     f78:	d0a00915 	stw	r2,-32732(gp)
				printf("heeft 0 gereturned \n");
     f7c:	010000b4 	movhi	r4,2
     f80:	212de304 	addi	r4,r4,-18548
     f84:	00021700 	call	2170 <puts>
			}
			if (gameModeMenu <= 0){
     f88:	d0a00217 	ldw	r2,-32760(gp)
     f8c:	00800216 	blt	zero,r2,f98 <menu+0xe0>
				gameModeMenu = 4;
     f90:	00800104 	movi	r2,4
     f94:	d0a00215 	stw	r2,-32760(gp)
			}
		}
		OSTimeDly(20);
     f98:	01000504 	movi	r4,20
     f9c:	001739c0 	call	1739c <OSTimeDly>
	}
     fa0:	003fcd06 	br	ed8 <__alt_mem_Flash_flash_data+0xf4000ed8>

00000fa4 <selecteerMenu>:

}

void selecteerMenu(void *pdata){
     fa4:	defffa04 	addi	sp,sp,-24
     fa8:	dfc00515 	stw	ra,20(sp)
     fac:	df000415 	stw	fp,16(sp)
     fb0:	df000404 	addi	fp,sp,16
     fb4:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	int ID = (int*)pdata;
     fb8:	e0bfff17 	ldw	r2,-4(fp)
     fbc:	e0bffd15 	stw	r2,-12(fp)



	while(1){
	OSFlagPend(Flags, Menu2_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
     fc0:	d0e80a17 	ldw	r3,-24536(gp)
     fc4:	e0bffe04 	addi	r2,fp,-8
     fc8:	d8800015 	stw	r2,0(sp)
     fcc:	1809883a 	mov	r4,r3
     fd0:	01400404 	movi	r5,16
     fd4:	000d883a 	mov	r6,zero
     fd8:	000f883a 	mov	r7,zero
     fdc:	0011b880 	call	11b88 <OSFlagPend>

		if (gameModeMenu == 1){
     fe0:	d0a00217 	ldw	r2,-32760(gp)
     fe4:	10800058 	cmpnei	r2,r2,1
     fe8:	1000231e 	bne	r2,zero,1078 <selecteerMenu+0xd4>
			if(eenkeer == 1){
     fec:	d0a00917 	ldw	r2,-32732(gp)
     ff0:	10800058 	cmpnei	r2,r2,1
     ff4:	1000b11e 	bne	r2,zero,12bc <selecteerMenu+0x318>
				clearScreen();
     ff8:	00012c80 	call	12c8 <clearScreen>
				VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
     ffc:	d0a00317 	ldw	r2,-32756(gp)
    1000:	1085883a 	add	r2,r2,r2
    1004:	1085883a 	add	r2,r2,r2
    1008:	1009883a 	mov	r4,r2
    100c:	d0a00517 	ldw	r2,-32748(gp)
    1010:	1085883a 	add	r2,r2,r2
    1014:	1085883a 	add	r2,r2,r2
    1018:	100b883a 	mov	r5,r2
    101c:	d0a00417 	ldw	r2,-32752(gp)
    1020:	1085883a 	add	r2,r2,r2
    1024:	1085883a 	add	r2,r2,r2
    1028:	100d883a 	mov	r6,r2
    102c:	d0a00617 	ldw	r2,-32744(gp)
    1030:	1085883a 	add	r2,r2,r2
    1034:	1085883a 	add	r2,r2,r2
    1038:	1007883a 	mov	r3,r2
    103c:	00be0014 	movui	r2,63488
    1040:	d8800015 	stw	r2,0(sp)
    1044:	180f883a 	mov	r7,r3
    1048:	00017480 	call	1748 <VGA_box>
				VGA_text (xMenu, yMenu, "Singleplayer");
    104c:	d0e00717 	ldw	r3,-32740(gp)
    1050:	d0a00817 	ldw	r2,-32736(gp)
    1054:	1809883a 	mov	r4,r3
    1058:	100b883a 	mov	r5,r2
    105c:	018000b4 	movhi	r6,2
    1060:	31ade804 	addi	r6,r6,-18528
    1064:	00017fc0 	call	17fc <VGA_text>
				eenkeer = 0;
    1068:	d0200915 	stw	zero,-32732(gp)
				changed = 1;
    106c:	00800044 	movi	r2,1
    1070:	d0a81a15 	stw	r2,-24472(gp)
    1074:	00009106 	br	12bc <selecteerMenu+0x318>
			}
		} else if (gameModeMenu == 2){
    1078:	d0a00217 	ldw	r2,-32760(gp)
    107c:	10800098 	cmpnei	r2,r2,2
    1080:	10003d1e 	bne	r2,zero,1178 <selecteerMenu+0x1d4>
			if(eenkeer == 1){
    1084:	d0a00917 	ldw	r2,-32732(gp)
    1088:	10800058 	cmpnei	r2,r2,1
    108c:	1000221e 	bne	r2,zero,1118 <selecteerMenu+0x174>
				clearScreen();
    1090:	00012c80 	call	12c8 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    1094:	d0a00317 	ldw	r2,-32756(gp)
    1098:	1085883a 	add	r2,r2,r2
    109c:	1085883a 	add	r2,r2,r2
    10a0:	1009883a 	mov	r4,r2
    10a4:	d0a00517 	ldw	r2,-32748(gp)
    10a8:	10800104 	addi	r2,r2,4
    10ac:	1085883a 	add	r2,r2,r2
    10b0:	1085883a 	add	r2,r2,r2
    10b4:	100b883a 	mov	r5,r2
    10b8:	d0a00417 	ldw	r2,-32752(gp)
    10bc:	1085883a 	add	r2,r2,r2
    10c0:	1085883a 	add	r2,r2,r2
    10c4:	100d883a 	mov	r6,r2
    10c8:	d0a00617 	ldw	r2,-32744(gp)
    10cc:	10800104 	addi	r2,r2,4
    10d0:	1085883a 	add	r2,r2,r2
    10d4:	1085883a 	add	r2,r2,r2
    10d8:	1007883a 	mov	r3,r2
    10dc:	00be0014 	movui	r2,63488
    10e0:	d8800015 	stw	r2,0(sp)
    10e4:	180f883a 	mov	r7,r3
    10e8:	00017480 	call	1748 <VGA_box>
				VGA_text (xMenu, yMenu + 4, "Multiplayer");
    10ec:	d0e00717 	ldw	r3,-32740(gp)
    10f0:	d0a00817 	ldw	r2,-32736(gp)
    10f4:	10800104 	addi	r2,r2,4
    10f8:	1809883a 	mov	r4,r3
    10fc:	100b883a 	mov	r5,r2
    1100:	018000b4 	movhi	r6,2
    1104:	31adec04 	addi	r6,r6,-18512
    1108:	00017fc0 	call	17fc <VGA_text>
				eenkeer = 0;
    110c:	d0200915 	stw	zero,-32732(gp)
				changed = 1;
    1110:	00800044 	movi	r2,1
    1114:	d0a81a15 	stw	r2,-24472(gp)
			}
			if(controller(ID) == 1){
    1118:	e13ffd17 	ldw	r4,-12(fp)
    111c:	000035c0 	call	35c <controller>
    1120:	10800058 	cmpnei	r2,r2,1
    1124:	1000651e 	bne	r2,zero,12bc <selecteerMenu+0x318>
				clearScreen();
    1128:	00012c80 	call	12c8 <clearScreen>
				clearText();
    112c:	00013080 	call	1308 <clearText>
				printf("start game\n");
    1130:	010000b4 	movhi	r4,2
    1134:	212def04 	addi	r4,r4,-18500
    1138:	00021700 	call	2170 <puts>
				OSFlagPost(Flags, Game_Flag + C1_Flag + C2_Flag, OS_FLAG_CLR, &err);
    113c:	d0e80a17 	ldw	r3,-24536(gp)
    1140:	e0bffe04 	addi	r2,fp,-8
    1144:	1809883a 	mov	r4,r3
    1148:	01400384 	movi	r5,14
    114c:	000d883a 	mov	r6,zero
    1150:	100f883a 	mov	r7,r2
    1154:	00121e00 	call	121e0 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    1158:	d0e80a17 	ldw	r3,-24536(gp)
    115c:	e0bffe04 	addi	r2,fp,-8
    1160:	1809883a 	mov	r4,r3
    1164:	01400444 	movi	r5,17
    1168:	01800044 	movi	r6,1
    116c:	100f883a 	mov	r7,r2
    1170:	00121e00 	call	121e0 <OSFlagPost>
    1174:	00005106 	br	12bc <selecteerMenu+0x318>
			}

		} else if (gameModeMenu == 3){
    1178:	d0a00217 	ldw	r2,-32760(gp)
    117c:	108000d8 	cmpnei	r2,r2,3
    1180:	1000261e 	bne	r2,zero,121c <selecteerMenu+0x278>
			if(eenkeer == 1){
    1184:	d0a00917 	ldw	r2,-32732(gp)
    1188:	10800058 	cmpnei	r2,r2,1
    118c:	10004b1e 	bne	r2,zero,12bc <selecteerMenu+0x318>
				clearScreen();
    1190:	00012c80 	call	12c8 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 32, xRechts*4, xOnder*4 + 32, rood);
    1194:	d0a00317 	ldw	r2,-32756(gp)
    1198:	1085883a 	add	r2,r2,r2
    119c:	1085883a 	add	r2,r2,r2
    11a0:	1009883a 	mov	r4,r2
    11a4:	d0a00517 	ldw	r2,-32748(gp)
    11a8:	10800204 	addi	r2,r2,8
    11ac:	1085883a 	add	r2,r2,r2
    11b0:	1085883a 	add	r2,r2,r2
    11b4:	100b883a 	mov	r5,r2
    11b8:	d0a00417 	ldw	r2,-32752(gp)
    11bc:	1085883a 	add	r2,r2,r2
    11c0:	1085883a 	add	r2,r2,r2
    11c4:	100d883a 	mov	r6,r2
    11c8:	d0a00617 	ldw	r2,-32744(gp)
    11cc:	10800204 	addi	r2,r2,8
    11d0:	1085883a 	add	r2,r2,r2
    11d4:	1085883a 	add	r2,r2,r2
    11d8:	1007883a 	mov	r3,r2
    11dc:	00be0014 	movui	r2,63488
    11e0:	d8800015 	stw	r2,0(sp)
    11e4:	180f883a 	mov	r7,r3
    11e8:	00017480 	call	1748 <VGA_box>
				VGA_text (xMenu, yMenu +  8, "Highscores");
    11ec:	d0e00717 	ldw	r3,-32740(gp)
    11f0:	d0a00817 	ldw	r2,-32736(gp)
    11f4:	10800204 	addi	r2,r2,8
    11f8:	1809883a 	mov	r4,r3
    11fc:	100b883a 	mov	r5,r2
    1200:	018000b4 	movhi	r6,2
    1204:	31adf204 	addi	r6,r6,-18488
    1208:	00017fc0 	call	17fc <VGA_text>
				eenkeer = 0;
    120c:	d0200915 	stw	zero,-32732(gp)
				changed = 1;
    1210:	00800044 	movi	r2,1
    1214:	d0a81a15 	stw	r2,-24472(gp)
    1218:	00002806 	br	12bc <selecteerMenu+0x318>

			}
		} else if (gameModeMenu == 4){
    121c:	d0a00217 	ldw	r2,-32760(gp)
    1220:	10800118 	cmpnei	r2,r2,4
    1224:	1000251e 	bne	r2,zero,12bc <selecteerMenu+0x318>
			if(eenkeer == 1){
    1228:	d0a00917 	ldw	r2,-32732(gp)
    122c:	10800058 	cmpnei	r2,r2,1
    1230:	1000221e 	bne	r2,zero,12bc <selecteerMenu+0x318>
				clearScreen();
    1234:	00012c80 	call	12c8 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 48, xRechts*4, xOnder*4 + 48, rood);
    1238:	d0a00317 	ldw	r2,-32756(gp)
    123c:	1085883a 	add	r2,r2,r2
    1240:	1085883a 	add	r2,r2,r2
    1244:	1009883a 	mov	r4,r2
    1248:	d0a00517 	ldw	r2,-32748(gp)
    124c:	10800304 	addi	r2,r2,12
    1250:	1085883a 	add	r2,r2,r2
    1254:	1085883a 	add	r2,r2,r2
    1258:	100b883a 	mov	r5,r2
    125c:	d0a00417 	ldw	r2,-32752(gp)
    1260:	1085883a 	add	r2,r2,r2
    1264:	1085883a 	add	r2,r2,r2
    1268:	100d883a 	mov	r6,r2
    126c:	d0a00617 	ldw	r2,-32744(gp)
    1270:	10800304 	addi	r2,r2,12
    1274:	1085883a 	add	r2,r2,r2
    1278:	1085883a 	add	r2,r2,r2
    127c:	1007883a 	mov	r3,r2
    1280:	00be0014 	movui	r2,63488
    1284:	d8800015 	stw	r2,0(sp)
    1288:	180f883a 	mov	r7,r3
    128c:	00017480 	call	1748 <VGA_box>
				VGA_text (xMenu, yMenu + 12, "Tutorial");
    1290:	d0e00717 	ldw	r3,-32740(gp)
    1294:	d0a00817 	ldw	r2,-32736(gp)
    1298:	10800304 	addi	r2,r2,12
    129c:	1809883a 	mov	r4,r3
    12a0:	100b883a 	mov	r5,r2
    12a4:	018000b4 	movhi	r6,2
    12a8:	31adf504 	addi	r6,r6,-18476
    12ac:	00017fc0 	call	17fc <VGA_text>
				eenkeer = 0;
    12b0:	d0200915 	stw	zero,-32732(gp)
				changed = 1;
    12b4:	00800044 	movi	r2,1
    12b8:	d0a81a15 	stw	r2,-24472(gp)

			}
		}

		OSTimeDly(20);
    12bc:	01000504 	movi	r4,20
    12c0:	001739c0 	call	1739c <OSTimeDly>
	}
    12c4:	003f3e06 	br	fc0 <__alt_mem_Flash_flash_data+0xf4000fc0>

000012c8 <clearScreen>:
}

void clearScreen(){
    12c8:	defffd04 	addi	sp,sp,-12
    12cc:	dfc00215 	stw	ra,8(sp)
    12d0:	df000115 	stw	fp,4(sp)
    12d4:	df000104 	addi	fp,sp,4
	VGA_box(25,70, 200,135, 0);
    12d8:	d8000015 	stw	zero,0(sp)
    12dc:	01000644 	movi	r4,25
    12e0:	01401184 	movi	r5,70
    12e4:	01803204 	movi	r6,200
    12e8:	01c021c4 	movi	r7,135
    12ec:	00017480 	call	1748 <VGA_box>
	del_middenlijn();
    12f0:	00018f40 	call	18f4 <del_middenlijn>
}
    12f4:	e037883a 	mov	sp,fp
    12f8:	dfc00117 	ldw	ra,4(sp)
    12fc:	df000017 	ldw	fp,0(sp)
    1300:	dec00204 	addi	sp,sp,8
    1304:	f800283a 	ret

00001308 <clearText>:

void clearText(){
    1308:	defffe04 	addi	sp,sp,-8
    130c:	dfc00115 	stw	ra,4(sp)
    1310:	df000015 	stw	fp,0(sp)
    1314:	d839883a 	mov	fp,sp
	VGA_text (xMenu, yMenu, "            ");
    1318:	d0e00717 	ldw	r3,-32740(gp)
    131c:	d0a00817 	ldw	r2,-32736(gp)
    1320:	1809883a 	mov	r4,r3
    1324:	100b883a 	mov	r5,r2
    1328:	018000b4 	movhi	r6,2
    132c:	31adf804 	addi	r6,r6,-18464
    1330:	00017fc0 	call	17fc <VGA_text>
	VGA_text (xMenu, yMenu + 4, "           ");
    1334:	d0e00717 	ldw	r3,-32740(gp)
    1338:	d0a00817 	ldw	r2,-32736(gp)
    133c:	10800104 	addi	r2,r2,4
    1340:	1809883a 	mov	r4,r3
    1344:	100b883a 	mov	r5,r2
    1348:	018000b4 	movhi	r6,2
    134c:	31adfc04 	addi	r6,r6,-18448
    1350:	00017fc0 	call	17fc <VGA_text>
	VGA_text (xMenu, yMenu+8, "          ");
    1354:	d0e00717 	ldw	r3,-32740(gp)
    1358:	d0a00817 	ldw	r2,-32736(gp)
    135c:	10800204 	addi	r2,r2,8
    1360:	1809883a 	mov	r4,r3
    1364:	100b883a 	mov	r5,r2
    1368:	018000b4 	movhi	r6,2
    136c:	31adff04 	addi	r6,r6,-18436
    1370:	00017fc0 	call	17fc <VGA_text>
	VGA_text (xMenu, yMenu+12, "        ");
    1374:	d0e00717 	ldw	r3,-32740(gp)
    1378:	d0a00817 	ldw	r2,-32736(gp)
    137c:	10800304 	addi	r2,r2,12
    1380:	1809883a 	mov	r4,r3
    1384:	100b883a 	mov	r5,r2
    1388:	018000b4 	movhi	r6,2
    138c:	31ae0204 	addi	r6,r6,-18424
    1390:	00017fc0 	call	17fc <VGA_text>
}
    1394:	e037883a 	mov	sp,fp
    1398:	dfc00117 	ldw	ra,4(sp)
    139c:	df000017 	ldw	fp,0(sp)
    13a0:	dec00204 	addi	sp,sp,8
    13a4:	f800283a 	ret

000013a8 <tekenBox>:

void tekenBox(int Links, int Boven, int Rechts, int Onder, short Kleur){
    13a8:	defff804 	addi	sp,sp,-32
    13ac:	dfc00715 	stw	ra,28(sp)
    13b0:	df000615 	stw	fp,24(sp)
    13b4:	df000604 	addi	fp,sp,24
    13b8:	e13ffb15 	stw	r4,-20(fp)
    13bc:	e17ffc15 	stw	r5,-16(fp)
    13c0:	e1bffd15 	stw	r6,-12(fp)
    13c4:	e1fffe15 	stw	r7,-8(fp)
    13c8:	e0800217 	ldw	r2,8(fp)
    13cc:	e0bfff0d 	sth	r2,-4(fp)
	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    13d0:	e0bfff0f 	ldh	r2,-4(fp)
    13d4:	d8800015 	stw	r2,0(sp)
    13d8:	e13ffb17 	ldw	r4,-20(fp)
    13dc:	e17ffc17 	ldw	r5,-16(fp)
    13e0:	e1bffd17 	ldw	r6,-12(fp)
    13e4:	e1fffe17 	ldw	r7,-8(fp)
    13e8:	00017480 	call	1748 <VGA_box>
}
    13ec:	e037883a 	mov	sp,fp
    13f0:	dfc00117 	ldw	ra,4(sp)
    13f4:	df000017 	ldw	fp,0(sp)
    13f8:	dec00204 	addi	sp,sp,8
    13fc:	f800283a 	ret

00001400 <tekenBox2>:
// tekenBox en tekenBox2 maken samen het visuele effect van het selecteren van een menu optie.
void tekenBox2(int Links, int Boven, int Rechts, int Onder, short Kleur){
    1400:	defff804 	addi	sp,sp,-32
    1404:	dfc00715 	stw	ra,28(sp)
    1408:	df000615 	stw	fp,24(sp)
    140c:	df000604 	addi	fp,sp,24
    1410:	e13ffb15 	stw	r4,-20(fp)
    1414:	e17ffc15 	stw	r5,-16(fp)
    1418:	e1bffd15 	stw	r6,-12(fp)
    141c:	e1fffe15 	stw	r7,-8(fp)
    1420:	e0800217 	ldw	r2,8(fp)
    1424:	e0bfff0d 	sth	r2,-4(fp)
	Links = Links + 1;
    1428:	e0bffb17 	ldw	r2,-20(fp)
    142c:	10800044 	addi	r2,r2,1
    1430:	e0bffb15 	stw	r2,-20(fp)
	Boven = Boven + 1;
    1434:	e0bffc17 	ldw	r2,-16(fp)
    1438:	10800044 	addi	r2,r2,1
    143c:	e0bffc15 	stw	r2,-16(fp)
	Rechts = Rechts - 1;
    1440:	e0bffd17 	ldw	r2,-12(fp)
    1444:	10bfffc4 	addi	r2,r2,-1
    1448:	e0bffd15 	stw	r2,-12(fp)
	Onder = Onder -1;
    144c:	e0bffe17 	ldw	r2,-8(fp)
    1450:	10bfffc4 	addi	r2,r2,-1
    1454:	e0bffe15 	stw	r2,-8(fp)

	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    1458:	e0bfff0f 	ldh	r2,-4(fp)
    145c:	d8800015 	stw	r2,0(sp)
    1460:	e13ffb17 	ldw	r4,-20(fp)
    1464:	e17ffc17 	ldw	r5,-16(fp)
    1468:	e1bffd17 	ldw	r6,-12(fp)
    146c:	e1fffe17 	ldw	r7,-8(fp)
    1470:	00017480 	call	1748 <VGA_box>
}
    1474:	e037883a 	mov	sp,fp
    1478:	dfc00117 	ldw	ra,4(sp)
    147c:	df000017 	ldw	fp,0(sp)
    1480:	dec00204 	addi	sp,sp,8
    1484:	f800283a 	ret

00001488 <teken_menu>:

void teken_menu(){
    1488:	defffd04 	addi	sp,sp,-12
    148c:	dfc00215 	stw	ra,8(sp)
    1490:	df000115 	stw	fp,4(sp)
    1494:	df000104 	addi	fp,sp,4
	VGA_text (xMenu, yMenu, "Singleplayer");
    1498:	d0e00717 	ldw	r3,-32740(gp)
    149c:	d0a00817 	ldw	r2,-32736(gp)
    14a0:	1809883a 	mov	r4,r3
    14a4:	100b883a 	mov	r5,r2
    14a8:	018000b4 	movhi	r6,2
    14ac:	31ade804 	addi	r6,r6,-18528
    14b0:	00017fc0 	call	17fc <VGA_text>
	VGA_text (xMenu, yMenu + 4, "Multiplayer");
    14b4:	d0e00717 	ldw	r3,-32740(gp)
    14b8:	d0a00817 	ldw	r2,-32736(gp)
    14bc:	10800104 	addi	r2,r2,4
    14c0:	1809883a 	mov	r4,r3
    14c4:	100b883a 	mov	r5,r2
    14c8:	018000b4 	movhi	r6,2
    14cc:	31adec04 	addi	r6,r6,-18512
    14d0:	00017fc0 	call	17fc <VGA_text>
	VGA_text (xMenu, yMenu+8, "Highscores");
    14d4:	d0e00717 	ldw	r3,-32740(gp)
    14d8:	d0a00817 	ldw	r2,-32736(gp)
    14dc:	10800204 	addi	r2,r2,8
    14e0:	1809883a 	mov	r4,r3
    14e4:	100b883a 	mov	r5,r2
    14e8:	018000b4 	movhi	r6,2
    14ec:	31adf204 	addi	r6,r6,-18488
    14f0:	00017fc0 	call	17fc <VGA_text>
	VGA_text (xMenu, yMenu+12, "Tutorial");
    14f4:	d0e00717 	ldw	r3,-32740(gp)
    14f8:	d0a00817 	ldw	r2,-32736(gp)
    14fc:	10800304 	addi	r2,r2,12
    1500:	1809883a 	mov	r4,r3
    1504:	100b883a 	mov	r5,r2
    1508:	018000b4 	movhi	r6,2
    150c:	31adf504 	addi	r6,r6,-18476
    1510:	00017fc0 	call	17fc <VGA_text>
	VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    1514:	d0a00317 	ldw	r2,-32756(gp)
    1518:	1085883a 	add	r2,r2,r2
    151c:	1085883a 	add	r2,r2,r2
    1520:	1009883a 	mov	r4,r2
    1524:	d0a00517 	ldw	r2,-32748(gp)
    1528:	10800104 	addi	r2,r2,4
    152c:	1085883a 	add	r2,r2,r2
    1530:	1085883a 	add	r2,r2,r2
    1534:	100b883a 	mov	r5,r2
    1538:	d0a00417 	ldw	r2,-32752(gp)
    153c:	1085883a 	add	r2,r2,r2
    1540:	1085883a 	add	r2,r2,r2
    1544:	100d883a 	mov	r6,r2
    1548:	d0a00617 	ldw	r2,-32744(gp)
    154c:	10800104 	addi	r2,r2,4
    1550:	1085883a 	add	r2,r2,r2
    1554:	1085883a 	add	r2,r2,r2
    1558:	1007883a 	mov	r3,r2
    155c:	00be0014 	movui	r2,63488
    1560:	d8800015 	stw	r2,0(sp)
    1564:	180f883a 	mov	r7,r3
    1568:	00017480 	call	1748 <VGA_box>

}
    156c:	e037883a 	mov	sp,fp
    1570:	dfc00117 	ldw	ra,4(sp)
    1574:	df000017 	ldw	fp,0(sp)
    1578:	dec00204 	addi	sp,sp,8
    157c:	f800283a 	ret

00001580 <main>:
void * Messages[500];


/* The main function creates two task and starts multi-tasking */
int main(void)
{
    1580:	defffb04 	addi	sp,sp,-20
    1584:	dfc00415 	stw	ra,16(sp)
    1588:	df000315 	stw	fp,12(sp)
    158c:	df000304 	addi	fp,sp,12
	INT8U err;
	OSInit();
    1590:	000f9580 	call	f958 <OSInit>
	int counter = 0x50000;				// 1/(50 MHz) x (0x960000) ~= 200 msec
    1594:	00800174 	movhi	r2,5
    1598:	e0bffe15 	stw	r2,-8(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
    159c:	d0a00b17 	ldw	r2,-32724(gp)
    15a0:	10800204 	addi	r2,r2,8
    15a4:	e0fffe17 	ldw	r3,-8(fp)
    15a8:	18ffffcc 	andi	r3,r3,65535
    15ac:	10c00015 	stw	r3,0(r2)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
    15b0:	d0a00b17 	ldw	r2,-32724(gp)
    15b4:	10800304 	addi	r2,r2,12
    15b8:	e0fffe17 	ldw	r3,-8(fp)
    15bc:	1806d43a 	srli	r3,r3,16
    15c0:	10c00015 	stw	r3,0(r2)

	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
    15c4:	d0a00b17 	ldw	r2,-32724(gp)
    15c8:	10800104 	addi	r2,r2,4
    15cc:	00c001c4 	movi	r3,7
    15d0:	10c00015 	stw	r3,0(r2)

	Flags = OSFlagCreate(Game_Flag + C1_Flag + C2_Flag, &err);
    15d4:	e0bfff04 	addi	r2,fp,-4
    15d8:	01000384 	movi	r4,14
    15dc:	100b883a 	mov	r5,r2
    15e0:	00115700 	call	11570 <OSFlagCreate>
    15e4:	d0a80a15 	stw	r2,-24536(gp)

	gameSem = OSSemCreate(0);
    15e8:	0009883a 	mov	r4,zero
    15ec:	00150500 	call	15050 <OSSemCreate>
    15f0:	d0a81415 	stw	r2,-24496(gp)
	controllerSem = OSSemCreate(0);
    15f4:	0009883a 	mov	r4,zero
    15f8:	00150500 	call	15050 <OSSemCreate>
    15fc:	d0a80715 	stw	r2,-24548(gp)

	MailBox = OSMboxCreate((void *)0);
    1600:	0009883a 	mov	r4,zero
    1604:	0012b1c0 	call	12b1c <OSMboxCreate>
    1608:	d0a80b15 	stw	r2,-24532(gp)
	MailBox2 = OSMboxCreate((void *)0);
    160c:	0009883a 	mov	r4,zero
    1610:	0012b1c0 	call	12b1c <OSMboxCreate>
    1614:	d0a80915 	stw	r2,-24540(gp)


	VGA_box (0, 0, 319, 239, 0);						//clear screen
    1618:	d8000015 	stw	zero,0(sp)
    161c:	0009883a 	mov	r4,zero
    1620:	000b883a 	mov	r5,zero
    1624:	01804fc4 	movi	r6,319
    1628:	01c03bc4 	movi	r7,239
    162c:	00017480 	call	1748 <VGA_box>
	VGA_box (15, 50, 20, 100, 0x0000ff);				// links
    1630:	00803fc4 	movi	r2,255
    1634:	d8800015 	stw	r2,0(sp)
    1638:	010003c4 	movi	r4,15
    163c:	01400c84 	movi	r5,50
    1640:	01800504 	movi	r6,20
    1644:	01c01904 	movi	r7,100
    1648:	00017480 	call	1748 <VGA_box>
	VGA_box (300, 50, 305, 100, 0x0000ff);				// rechts
    164c:	00803fc4 	movi	r2,255
    1650:	d8800015 	stw	r2,0(sp)
    1654:	01004b04 	movi	r4,300
    1658:	01400c84 	movi	r5,50
    165c:	01804c44 	movi	r6,305
    1660:	01c01904 	movi	r7,100
    1664:	00017480 	call	1748 <VGA_box>

	VGA_box (0, 0, 319, 3, groen);					// boven
    1668:	0081a5c4 	movi	r2,1687
    166c:	d8800015 	stw	r2,0(sp)
    1670:	0009883a 	mov	r4,zero
    1674:	000b883a 	mov	r5,zero
    1678:	01804fc4 	movi	r6,319
    167c:	01c000c4 	movi	r7,3
    1680:	00017480 	call	1748 <VGA_box>
	VGA_box (0, 236, 319, 239, groen);				// onder
    1684:	0081a5c4 	movi	r2,1687
    1688:	d8800015 	stw	r2,0(sp)
    168c:	0009883a 	mov	r4,zero
    1690:	01403b04 	movi	r5,236
    1694:	01804fc4 	movi	r6,319
    1698:	01c03bc4 	movi	r7,239
    169c:	00017480 	call	1748 <VGA_box>


	OSTaskCreate(controllers,(void*) 1,&controller1_stk[TASK_STACKSIZE-1],controller1_PRIORITY);
    16a0:	01000034 	movhi	r4,0
    16a4:	2100a004 	addi	r4,r4,640
    16a8:	01400044 	movi	r5,1
    16ac:	018000b4 	movhi	r6,2
    16b0:	318f4f04 	addi	r6,r6,15676
    16b4:	01c002c4 	movi	r7,11
    16b8:	0015fe80 	call	15fe8 <OSTaskCreate>
	OSTaskCreate(controllers,(void*) 2,&controller2_stk[TASK_STACKSIZE-1],controller2_PRIORITY);
    16bc:	01000034 	movhi	r4,0
    16c0:	2100a004 	addi	r4,r4,640
    16c4:	01400084 	movi	r5,2
    16c8:	018000b4 	movhi	r6,2
    16cc:	31974f04 	addi	r6,r6,23868
    16d0:	01c00304 	movi	r7,12
    16d4:	0015fe80 	call	15fe8 <OSTaskCreate>
	OSTaskCreate(Game,(void*) 0, &Game_stk[TASK_STACKSIZE-1],Game_PRIORITY);
    16d8:	01000034 	movhi	r4,0
    16dc:	2101d704 	addi	r4,r4,1884
    16e0:	000b883a 	mov	r5,zero
    16e4:	018000b4 	movhi	r6,2
    16e8:	319f4f04 	addi	r6,r6,32060
    16ec:	01c00184 	movi	r7,6
    16f0:	0015fe80 	call	15fe8 <OSTaskCreate>

	OSTaskCreate(menu, (void*) 2, &menu_stk[TASK_STACKSIZE-1],menu_PRIORITY);
    16f4:	01000034 	movhi	r4,0
    16f8:	2103ae04 	addi	r4,r4,3768
    16fc:	01400084 	movi	r5,2
    1700:	018000b4 	movhi	r6,2
    1704:	31874f04 	addi	r6,r6,7484
    1708:	01c00244 	movi	r7,9
    170c:	0015fe80 	call	15fe8 <OSTaskCreate>
	OSTaskCreate(selecteerMenu, (void*) 3, &menu_stk2[TASK_STACKSIZE-1], menu_PRIORITY +1);
    1710:	01000034 	movhi	r4,0
    1714:	2103e904 	addi	r4,r4,4004
    1718:	014000c4 	movi	r5,3
    171c:	018000f4 	movhi	r6,3
    1720:	31a94304 	addi	r6,r6,-23284
    1724:	01c00284 	movi	r7,10
    1728:	0015fe80 	call	15fe8 <OSTaskCreate>
	OSStart();
    172c:	000fc7c0 	call	fc7c <OSStart>
	return 0;
    1730:	0005883a 	mov	r2,zero
}
    1734:	e037883a 	mov	sp,fp
    1738:	dfc00117 	ldw	ra,4(sp)
    173c:	df000017 	ldw	fp,0(sp)
    1740:	dec00204 	addi	sp,sp,8
    1744:	f800283a 	ret

00001748 <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
    1748:	defff604 	addi	sp,sp,-40
    174c:	df000915 	stw	fp,36(sp)
    1750:	df000904 	addi	fp,sp,36
    1754:	e13ffb15 	stw	r4,-20(fp)
    1758:	e17ffc15 	stw	r5,-16(fp)
    175c:	e1bffd15 	stw	r6,-12(fp)
    1760:	e1fffe15 	stw	r7,-8(fp)
    1764:	e0800117 	ldw	r2,4(fp)
    1768:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
    176c:	00820034 	movhi	r2,2048
    1770:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    1774:	e0bffc17 	ldw	r2,-16(fp)
    1778:	e0bff715 	stw	r2,-36(fp)
    177c:	00001806 	br	17e0 <VGA_box+0x98>
	{
		col = x1;
    1780:	e0bffb17 	ldw	r2,-20(fp)
    1784:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
    1788:	00000f06 	br	17c8 <VGA_box+0x80>
		{
			offset = (row << 9) + col;
    178c:	e0bff717 	ldw	r2,-36(fp)
    1790:	1006927a 	slli	r3,r2,9
    1794:	e0bff817 	ldw	r2,-32(fp)
    1798:	1885883a 	add	r2,r3,r2
    179c:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
    17a0:	e0bffa17 	ldw	r2,-24(fp)
    17a4:	1085883a 	add	r2,r2,r2
    17a8:	1007883a 	mov	r3,r2
    17ac:	e0bff917 	ldw	r2,-28(fp)
    17b0:	10c5883a 	add	r2,r2,r3
    17b4:	e0ffff0b 	ldhu	r3,-4(fp)
    17b8:	10c0000d 	sth	r3,0(r2)
			++col;
    17bc:	e0bff817 	ldw	r2,-32(fp)
    17c0:	10800044 	addi	r2,r2,1
    17c4:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
    17c8:	e0bff817 	ldw	r2,-32(fp)
    17cc:	e0fffd17 	ldw	r3,-12(fp)
    17d0:	18bfee0e 	bge	r3,r2,178c <__alt_mem_Flash_flash_data+0xf400178c>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    17d4:	e0bff717 	ldw	r2,-36(fp)
    17d8:	10800044 	addi	r2,r2,1
    17dc:	e0bff715 	stw	r2,-36(fp)
    17e0:	e0bff717 	ldw	r2,-36(fp)
    17e4:	e0fffe17 	ldw	r3,-8(fp)
    17e8:	18bfe50e 	bge	r3,r2,1780 <__alt_mem_Flash_flash_data+0xf4001780>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
    17ec:	e037883a 	mov	sp,fp
    17f0:	df000017 	ldw	fp,0(sp)
    17f4:	dec00104 	addi	sp,sp,4
    17f8:	f800283a 	ret

000017fc <VGA_text>:

void VGA_text(int x, int y, char * text_ptr)
{
    17fc:	defffa04 	addi	sp,sp,-24
    1800:	df000515 	stw	fp,20(sp)
    1804:	df000504 	addi	fp,sp,20
    1808:	e13ffd15 	stw	r4,-12(fp)
    180c:	e17ffe15 	stw	r5,-8(fp)
    1810:	e1bfff15 	stw	r6,-4(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer
    1814:	00824034 	movhi	r2,2304
    1818:	e0bffc15 	stw	r2,-16(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
    181c:	e0bffe17 	ldw	r2,-8(fp)
    1820:	100691fa 	slli	r3,r2,7
    1824:	e0bffd17 	ldw	r2,-12(fp)
    1828:	1885883a 	add	r2,r3,r2
    182c:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
    1830:	00000c06 	br	1864 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
    1834:	e0bffb17 	ldw	r2,-20(fp)
    1838:	e0fffc17 	ldw	r3,-16(fp)
    183c:	1885883a 	add	r2,r3,r2
    1840:	e0ffff17 	ldw	r3,-4(fp)
    1844:	18c00003 	ldbu	r3,0(r3)
    1848:	10c00005 	stb	r3,0(r2)
		++text_ptr;
    184c:	e0bfff17 	ldw	r2,-4(fp)
    1850:	10800044 	addi	r2,r2,1
    1854:	e0bfff15 	stw	r2,-4(fp)
		++offset;
    1858:	e0bffb17 	ldw	r2,-20(fp)
    185c:	10800044 	addi	r2,r2,1
    1860:	e0bffb15 	stw	r2,-20(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
    1864:	e0bfff17 	ldw	r2,-4(fp)
    1868:	10800003 	ldbu	r2,0(r2)
    186c:	10803fcc 	andi	r2,r2,255
    1870:	1080201c 	xori	r2,r2,128
    1874:	10bfe004 	addi	r2,r2,-128
    1878:	103fee1e 	bne	r2,zero,1834 <__alt_mem_Flash_flash_data+0xf4001834>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
    187c:	e037883a 	mov	sp,fp
    1880:	df000017 	ldw	fp,0(sp)
    1884:	dec00104 	addi	sp,sp,4
    1888:	f800283a 	ret

0000188c <draw_middenlijn>:

void draw_middenlijn(){
    188c:	defffc04 	addi	sp,sp,-16
    1890:	dfc00315 	stw	ra,12(sp)
    1894:	df000215 	stw	fp,8(sp)
    1898:	df000204 	addi	fp,sp,8
	int i = 0;
    189c:	e03fff15 	stw	zero,-4(fp)
	while(i < 240){
    18a0:	00000c06 	br	18d4 <draw_middenlijn+0x48>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
    18a4:	e0bfff17 	ldw	r2,-4(fp)
    18a8:	10c001c4 	addi	r3,r2,7
    18ac:	0081a5c4 	movi	r2,1687
    18b0:	d8800015 	stw	r2,0(sp)
    18b4:	010027c4 	movi	r4,159
    18b8:	e17fff17 	ldw	r5,-4(fp)
    18bc:	01802804 	movi	r6,160
    18c0:	180f883a 	mov	r7,r3
    18c4:	00017480 	call	1748 <VGA_box>
		i = i + 11;
    18c8:	e0bfff17 	ldw	r2,-4(fp)
    18cc:	108002c4 	addi	r2,r2,11
    18d0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void draw_middenlijn(){
	int i = 0;
	while(i < 240){
    18d4:	e0bfff17 	ldw	r2,-4(fp)
    18d8:	10803c10 	cmplti	r2,r2,240
    18dc:	103ff11e 	bne	r2,zero,18a4 <__alt_mem_Flash_flash_data+0xf40018a4>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
		i = i + 11;
	}
}
    18e0:	e037883a 	mov	sp,fp
    18e4:	dfc00117 	ldw	ra,4(sp)
    18e8:	df000017 	ldw	fp,0(sp)
    18ec:	dec00204 	addi	sp,sp,8
    18f0:	f800283a 	ret

000018f4 <del_middenlijn>:

void del_middenlijn(){
    18f4:	defffd04 	addi	sp,sp,-12
    18f8:	dfc00215 	stw	ra,8(sp)
    18fc:	df000115 	stw	fp,4(sp)
    1900:	df000104 	addi	fp,sp,4
	VGA_box(159, 4, 160, 235, 0);
    1904:	d8000015 	stw	zero,0(sp)
    1908:	010027c4 	movi	r4,159
    190c:	01400104 	movi	r5,4
    1910:	01802804 	movi	r6,160
    1914:	01c03ac4 	movi	r7,235
    1918:	00017480 	call	1748 <VGA_box>
}
    191c:	e037883a 	mov	sp,fp
    1920:	dfc00117 	ldw	ra,4(sp)
    1924:	df000017 	ldw	fp,0(sp)
    1928:	dec00204 	addi	sp,sp,8
    192c:	f800283a 	ret

00001930 <del_number>:

void del_number(int side){
    1930:	defffc04 	addi	sp,sp,-16
    1934:	dfc00315 	stw	ra,12(sp)
    1938:	df000215 	stw	fp,8(sp)
    193c:	df000204 	addi	fp,sp,8
    1940:	e13fff15 	stw	r4,-4(fp)
	if(side == 1){
    1944:	e0bfff17 	ldw	r2,-4(fp)
    1948:	10800058 	cmpnei	r2,r2,1
    194c:	1000061e 	bne	r2,zero,1968 <del_number+0x38>
		VGA_box(120, 20, 140, 60, 0);
    1950:	d8000015 	stw	zero,0(sp)
    1954:	01001e04 	movi	r4,120
    1958:	01400504 	movi	r5,20
    195c:	01802304 	movi	r6,140
    1960:	01c00f04 	movi	r7,60
    1964:	00017480 	call	1748 <VGA_box>
	}
	if(side == 2){
    1968:	e0bfff17 	ldw	r2,-4(fp)
    196c:	10800098 	cmpnei	r2,r2,2
    1970:	1000061e 	bne	r2,zero,198c <del_number+0x5c>
		VGA_box(180, 20, 200, 60, 0);
    1974:	d8000015 	stw	zero,0(sp)
    1978:	01002d04 	movi	r4,180
    197c:	01400504 	movi	r5,20
    1980:	01803204 	movi	r6,200
    1984:	01c00f04 	movi	r7,60
    1988:	00017480 	call	1748 <VGA_box>
	}
}
    198c:	e037883a 	mov	sp,fp
    1990:	dfc00117 	ldw	ra,4(sp)
    1994:	df000017 	ldw	fp,0(sp)
    1998:	dec00204 	addi	sp,sp,8
    199c:	f800283a 	ret

000019a0 <draw_number>:

void draw_number(int nummer, int ID){
    19a0:	defffa04 	addi	sp,sp,-24
    19a4:	dfc00515 	stw	ra,20(sp)
    19a8:	df000415 	stw	fp,16(sp)
    19ac:	df000404 	addi	fp,sp,16
    19b0:	e13ffe15 	stw	r4,-8(fp)
    19b4:	e17fff15 	stw	r5,-4(fp)

	int X = checkIDScore(ID);
    19b8:	e13fff17 	ldw	r4,-4(fp)
    19bc:	00020140 	call	2014 <checkIDScore>
    19c0:	e0bffd15 	stw	r2,-12(fp)

	if(nummer == 1){
    19c4:	e0bffe17 	ldw	r2,-8(fp)
    19c8:	10800058 	cmpnei	r2,r2,1
    19cc:	10000b1e 	bne	r2,zero,19fc <draw_number+0x5c>
		VGA_box(X + 5, 20, X+7, 60, wit);
    19d0:	e0bffd17 	ldw	r2,-12(fp)
    19d4:	11000144 	addi	r4,r2,5
    19d8:	e0bffd17 	ldw	r2,-12(fp)
    19dc:	10c001c4 	addi	r3,r2,7
    19e0:	00bfffc4 	movi	r2,-1
    19e4:	d8800015 	stw	r2,0(sp)
    19e8:	01400504 	movi	r5,20
    19ec:	180d883a 	mov	r6,r3
    19f0:	01c00f04 	movi	r7,60
    19f4:	00017480 	call	1748 <VGA_box>
    19f8:	00018106 	br	2000 <draw_number+0x660>
	}else if(nummer == 2){
    19fc:	e0bffe17 	ldw	r2,-8(fp)
    1a00:	10800098 	cmpnei	r2,r2,2
    1a04:	10002f1e 	bne	r2,zero,1ac4 <draw_number+0x124>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1a08:	e0bffd17 	ldw	r2,-12(fp)
    1a0c:	10c00504 	addi	r3,r2,20
    1a10:	00bfffc4 	movi	r2,-1
    1a14:	d8800015 	stw	r2,0(sp)
    1a18:	e13ffd17 	ldw	r4,-12(fp)
    1a1c:	01400504 	movi	r5,20
    1a20:	180d883a 	mov	r6,r3
    1a24:	01c00584 	movi	r7,22
    1a28:	00017480 	call	1748 <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 38, wit);			//lijn naar beneden
    1a2c:	e0bffd17 	ldw	r2,-12(fp)
    1a30:	11000484 	addi	r4,r2,18
    1a34:	e0bffd17 	ldw	r2,-12(fp)
    1a38:	10c00504 	addi	r3,r2,20
    1a3c:	00bfffc4 	movi	r2,-1
    1a40:	d8800015 	stw	r2,0(sp)
    1a44:	01400584 	movi	r5,22
    1a48:	180d883a 	mov	r6,r3
    1a4c:	01c00984 	movi	r7,38
    1a50:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    1a54:	e0bffd17 	ldw	r2,-12(fp)
    1a58:	10c00504 	addi	r3,r2,20
    1a5c:	00bfffc4 	movi	r2,-1
    1a60:	d8800015 	stw	r2,0(sp)
    1a64:	e13ffd17 	ldw	r4,-12(fp)
    1a68:	01400984 	movi	r5,38
    1a6c:	180d883a 	mov	r6,r3
    1a70:	01c00a04 	movi	r7,40
    1a74:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 40, X+ 2, 58, wit);					//lijn naar beneden
    1a78:	e0bffd17 	ldw	r2,-12(fp)
    1a7c:	10c00084 	addi	r3,r2,2
    1a80:	00bfffc4 	movi	r2,-1
    1a84:	d8800015 	stw	r2,0(sp)
    1a88:	e13ffd17 	ldw	r4,-12(fp)
    1a8c:	01400a04 	movi	r5,40
    1a90:	180d883a 	mov	r6,r3
    1a94:	01c00e84 	movi	r7,58
    1a98:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    1a9c:	e0bffd17 	ldw	r2,-12(fp)
    1aa0:	10c00504 	addi	r3,r2,20
    1aa4:	00bfffc4 	movi	r2,-1
    1aa8:	d8800015 	stw	r2,0(sp)
    1aac:	e13ffd17 	ldw	r4,-12(fp)
    1ab0:	01400e84 	movi	r5,58
    1ab4:	180d883a 	mov	r6,r3
    1ab8:	01c00f04 	movi	r7,60
    1abc:	00017480 	call	1748 <VGA_box>
    1ac0:	00014f06 	br	2000 <draw_number+0x660>
	}else if(nummer == 3){
    1ac4:	e0bffe17 	ldw	r2,-8(fp)
    1ac8:	108000d8 	cmpnei	r2,r2,3
    1acc:	1000261e 	bne	r2,zero,1b68 <draw_number+0x1c8>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1ad0:	e0bffd17 	ldw	r2,-12(fp)
    1ad4:	10c00504 	addi	r3,r2,20
    1ad8:	00bfffc4 	movi	r2,-1
    1adc:	d8800015 	stw	r2,0(sp)
    1ae0:	e13ffd17 	ldw	r4,-12(fp)
    1ae4:	01400504 	movi	r5,20
    1ae8:	180d883a 	mov	r6,r3
    1aec:	01c00584 	movi	r7,22
    1af0:	00017480 	call	1748 <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 60, wit);			//rechter lijn
    1af4:	e0bffd17 	ldw	r2,-12(fp)
    1af8:	11000484 	addi	r4,r2,18
    1afc:	e0bffd17 	ldw	r2,-12(fp)
    1b00:	10c00504 	addi	r3,r2,20
    1b04:	00bfffc4 	movi	r2,-1
    1b08:	d8800015 	stw	r2,0(sp)
    1b0c:	01400584 	movi	r5,22
    1b10:	180d883a 	mov	r6,r3
    1b14:	01c00f04 	movi	r7,60
    1b18:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 39, X+ 20, 41, wit);					//midden lijn
    1b1c:	e0bffd17 	ldw	r2,-12(fp)
    1b20:	10c00504 	addi	r3,r2,20
    1b24:	00bfffc4 	movi	r2,-1
    1b28:	d8800015 	stw	r2,0(sp)
    1b2c:	e13ffd17 	ldw	r4,-12(fp)
    1b30:	014009c4 	movi	r5,39
    1b34:	180d883a 	mov	r6,r3
    1b38:	01c00a44 	movi	r7,41
    1b3c:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    1b40:	e0bffd17 	ldw	r2,-12(fp)
    1b44:	10c00504 	addi	r3,r2,20
    1b48:	00bfffc4 	movi	r2,-1
    1b4c:	d8800015 	stw	r2,0(sp)
    1b50:	e13ffd17 	ldw	r4,-12(fp)
    1b54:	01400e84 	movi	r5,58
    1b58:	180d883a 	mov	r6,r3
    1b5c:	01c00f04 	movi	r7,60
    1b60:	00017480 	call	1748 <VGA_box>
    1b64:	00012606 	br	2000 <draw_number+0x660>
	}else if(nummer == 4){
    1b68:	e0bffe17 	ldw	r2,-8(fp)
    1b6c:	10800118 	cmpnei	r2,r2,4
    1b70:	10001d1e 	bne	r2,zero,1be8 <draw_number+0x248>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    1b74:	e0bffd17 	ldw	r2,-12(fp)
    1b78:	10c00084 	addi	r3,r2,2
    1b7c:	00bfffc4 	movi	r2,-1
    1b80:	d8800015 	stw	r2,0(sp)
    1b84:	e13ffd17 	ldw	r4,-12(fp)
    1b88:	01400504 	movi	r5,20
    1b8c:	180d883a 	mov	r6,r3
    1b90:	01c00a04 	movi	r7,40
    1b94:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    1b98:	e0bffd17 	ldw	r2,-12(fp)
    1b9c:	10c00504 	addi	r3,r2,20
    1ba0:	00bfffc4 	movi	r2,-1
    1ba4:	d8800015 	stw	r2,0(sp)
    1ba8:	e13ffd17 	ldw	r4,-12(fp)
    1bac:	014009c4 	movi	r5,39
    1bb0:	180d883a 	mov	r6,r3
    1bb4:	01c00a44 	movi	r7,41
    1bb8:	00017480 	call	1748 <VGA_box>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1bbc:	e0bffd17 	ldw	r2,-12(fp)
    1bc0:	11000484 	addi	r4,r2,18
    1bc4:	e0bffd17 	ldw	r2,-12(fp)
    1bc8:	10c00504 	addi	r3,r2,20
    1bcc:	00bfffc4 	movi	r2,-1
    1bd0:	d8800015 	stw	r2,0(sp)
    1bd4:	01400504 	movi	r5,20
    1bd8:	180d883a 	mov	r6,r3
    1bdc:	01c00f04 	movi	r7,60
    1be0:	00017480 	call	1748 <VGA_box>
    1be4:	00010606 	br	2000 <draw_number+0x660>
	}else if(nummer == 5){
    1be8:	e0bffe17 	ldw	r2,-8(fp)
    1bec:	10800158 	cmpnei	r2,r2,5
    1bf0:	10002f1e 	bne	r2,zero,1cb0 <draw_number+0x310>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1bf4:	e0bffd17 	ldw	r2,-12(fp)
    1bf8:	10c00504 	addi	r3,r2,20
    1bfc:	00bfffc4 	movi	r2,-1
    1c00:	d8800015 	stw	r2,0(sp)
    1c04:	e13ffd17 	ldw	r4,-12(fp)
    1c08:	01400504 	movi	r5,20
    1c0c:	180d883a 	mov	r6,r3
    1c10:	01c00584 	movi	r7,22
    1c14:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 22, X+ 2, 38, wit);					//lijn naar beneden
    1c18:	e0bffd17 	ldw	r2,-12(fp)
    1c1c:	10c00084 	addi	r3,r2,2
    1c20:	00bfffc4 	movi	r2,-1
    1c24:	d8800015 	stw	r2,0(sp)
    1c28:	e13ffd17 	ldw	r4,-12(fp)
    1c2c:	01400584 	movi	r5,22
    1c30:	180d883a 	mov	r6,r3
    1c34:	01c00984 	movi	r7,38
    1c38:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    1c3c:	e0bffd17 	ldw	r2,-12(fp)
    1c40:	10c00504 	addi	r3,r2,20
    1c44:	00bfffc4 	movi	r2,-1
    1c48:	d8800015 	stw	r2,0(sp)
    1c4c:	e13ffd17 	ldw	r4,-12(fp)
    1c50:	01400984 	movi	r5,38
    1c54:	180d883a 	mov	r6,r3
    1c58:	01c00a04 	movi	r7,40
    1c5c:	00017480 	call	1748 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn naar beneden
    1c60:	e0bffd17 	ldw	r2,-12(fp)
    1c64:	11000484 	addi	r4,r2,18
    1c68:	e0bffd17 	ldw	r2,-12(fp)
    1c6c:	10c00504 	addi	r3,r2,20
    1c70:	00bfffc4 	movi	r2,-1
    1c74:	d8800015 	stw	r2,0(sp)
    1c78:	01400a04 	movi	r5,40
    1c7c:	180d883a 	mov	r6,r3
    1c80:	01c00e84 	movi	r7,58
    1c84:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    1c88:	e0bffd17 	ldw	r2,-12(fp)
    1c8c:	10c00504 	addi	r3,r2,20
    1c90:	00bfffc4 	movi	r2,-1
    1c94:	d8800015 	stw	r2,0(sp)
    1c98:	e13ffd17 	ldw	r4,-12(fp)
    1c9c:	01400e84 	movi	r5,58
    1ca0:	180d883a 	mov	r6,r3
    1ca4:	01c00f04 	movi	r7,60
    1ca8:	00017480 	call	1748 <VGA_box>
    1cac:	0000d406 	br	2000 <draw_number+0x660>
	}else if(nummer == 6){
    1cb0:	e0bffe17 	ldw	r2,-8(fp)
    1cb4:	10800198 	cmpnei	r2,r2,6
    1cb8:	10002f1e 	bne	r2,zero,1d78 <draw_number+0x3d8>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    1cbc:	e0bffd17 	ldw	r2,-12(fp)
    1cc0:	10c00084 	addi	r3,r2,2
    1cc4:	00bfffc4 	movi	r2,-1
    1cc8:	d8800015 	stw	r2,0(sp)
    1ccc:	e13ffd17 	ldw	r4,-12(fp)
    1cd0:	01400504 	movi	r5,20
    1cd4:	180d883a 	mov	r6,r3
    1cd8:	01c00f04 	movi	r7,60
    1cdc:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1ce0:	e0bffd17 	ldw	r2,-12(fp)
    1ce4:	10c00504 	addi	r3,r2,20
    1ce8:	00bfffc4 	movi	r2,-1
    1cec:	d8800015 	stw	r2,0(sp)
    1cf0:	e13ffd17 	ldw	r4,-12(fp)
    1cf4:	01400504 	movi	r5,20
    1cf8:	180d883a 	mov	r6,r3
    1cfc:	01c00584 	movi	r7,22
    1d00:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    1d04:	e0bffd17 	ldw	r2,-12(fp)
    1d08:	10c00504 	addi	r3,r2,20
    1d0c:	00bfffc4 	movi	r2,-1
    1d10:	d8800015 	stw	r2,0(sp)
    1d14:	e13ffd17 	ldw	r4,-12(fp)
    1d18:	01400e84 	movi	r5,58
    1d1c:	180d883a 	mov	r6,r3
    1d20:	01c00f04 	movi	r7,60
    1d24:	00017480 	call	1748 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn rechts
    1d28:	e0bffd17 	ldw	r2,-12(fp)
    1d2c:	11000484 	addi	r4,r2,18
    1d30:	e0bffd17 	ldw	r2,-12(fp)
    1d34:	10c00504 	addi	r3,r2,20
    1d38:	00bfffc4 	movi	r2,-1
    1d3c:	d8800015 	stw	r2,0(sp)
    1d40:	01400a04 	movi	r5,40
    1d44:	180d883a 	mov	r6,r3
    1d48:	01c00e84 	movi	r7,58
    1d4c:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    1d50:	e0bffd17 	ldw	r2,-12(fp)
    1d54:	10c00504 	addi	r3,r2,20
    1d58:	00bfffc4 	movi	r2,-1
    1d5c:	d8800015 	stw	r2,0(sp)
    1d60:	e13ffd17 	ldw	r4,-12(fp)
    1d64:	014009c4 	movi	r5,39
    1d68:	180d883a 	mov	r6,r3
    1d6c:	01c00a44 	movi	r7,41
    1d70:	00017480 	call	1748 <VGA_box>
    1d74:	0000a206 	br	2000 <draw_number+0x660>
	}else if(nummer == 7){
    1d78:	e0bffe17 	ldw	r2,-8(fp)
    1d7c:	108001d8 	cmpnei	r2,r2,7
    1d80:	1000141e 	bne	r2,zero,1dd4 <draw_number+0x434>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1d84:	e0bffd17 	ldw	r2,-12(fp)
    1d88:	11000484 	addi	r4,r2,18
    1d8c:	e0bffd17 	ldw	r2,-12(fp)
    1d90:	10c00504 	addi	r3,r2,20
    1d94:	00bfffc4 	movi	r2,-1
    1d98:	d8800015 	stw	r2,0(sp)
    1d9c:	01400504 	movi	r5,20
    1da0:	180d883a 	mov	r6,r3
    1da4:	01c00f04 	movi	r7,60
    1da8:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1dac:	e0bffd17 	ldw	r2,-12(fp)
    1db0:	10c00504 	addi	r3,r2,20
    1db4:	00bfffc4 	movi	r2,-1
    1db8:	d8800015 	stw	r2,0(sp)
    1dbc:	e13ffd17 	ldw	r4,-12(fp)
    1dc0:	01400504 	movi	r5,20
    1dc4:	180d883a 	mov	r6,r3
    1dc8:	01c00584 	movi	r7,22
    1dcc:	00017480 	call	1748 <VGA_box>
    1dd0:	00008b06 	br	2000 <draw_number+0x660>
	}else if(nummer == 8){
    1dd4:	e0bffe17 	ldw	r2,-8(fp)
    1dd8:	10800218 	cmpnei	r2,r2,8
    1ddc:	10002f1e 	bne	r2,zero,1e9c <draw_number+0x4fc>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1de0:	e0bffd17 	ldw	r2,-12(fp)
    1de4:	11000484 	addi	r4,r2,18
    1de8:	e0bffd17 	ldw	r2,-12(fp)
    1dec:	10c00504 	addi	r3,r2,20
    1df0:	00bfffc4 	movi	r2,-1
    1df4:	d8800015 	stw	r2,0(sp)
    1df8:	01400504 	movi	r5,20
    1dfc:	180d883a 	mov	r6,r3
    1e00:	01c00f04 	movi	r7,60
    1e04:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    1e08:	e0bffd17 	ldw	r2,-12(fp)
    1e0c:	10c00084 	addi	r3,r2,2
    1e10:	00bfffc4 	movi	r2,-1
    1e14:	d8800015 	stw	r2,0(sp)
    1e18:	e13ffd17 	ldw	r4,-12(fp)
    1e1c:	01400504 	movi	r5,20
    1e20:	180d883a 	mov	r6,r3
    1e24:	01c00f04 	movi	r7,60
    1e28:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1e2c:	e0bffd17 	ldw	r2,-12(fp)
    1e30:	10c00504 	addi	r3,r2,20
    1e34:	00bfffc4 	movi	r2,-1
    1e38:	d8800015 	stw	r2,0(sp)
    1e3c:	e13ffd17 	ldw	r4,-12(fp)
    1e40:	01400504 	movi	r5,20
    1e44:	180d883a 	mov	r6,r3
    1e48:	01c00584 	movi	r7,22
    1e4c:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    1e50:	e0bffd17 	ldw	r2,-12(fp)
    1e54:	10c00504 	addi	r3,r2,20
    1e58:	00bfffc4 	movi	r2,-1
    1e5c:	d8800015 	stw	r2,0(sp)
    1e60:	e13ffd17 	ldw	r4,-12(fp)
    1e64:	014009c4 	movi	r5,39
    1e68:	180d883a 	mov	r6,r3
    1e6c:	01c00a44 	movi	r7,41
    1e70:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    1e74:	e0bffd17 	ldw	r2,-12(fp)
    1e78:	10c00504 	addi	r3,r2,20
    1e7c:	00bfffc4 	movi	r2,-1
    1e80:	d8800015 	stw	r2,0(sp)
    1e84:	e13ffd17 	ldw	r4,-12(fp)
    1e88:	01400e84 	movi	r5,58
    1e8c:	180d883a 	mov	r6,r3
    1e90:	01c00f04 	movi	r7,60
    1e94:	00017480 	call	1748 <VGA_box>
    1e98:	00005906 	br	2000 <draw_number+0x660>
	}else if(nummer == 9){
    1e9c:	e0bffe17 	ldw	r2,-8(fp)
    1ea0:	10800258 	cmpnei	r2,r2,9
    1ea4:	10002f1e 	bne	r2,zero,1f64 <draw_number+0x5c4>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1ea8:	e0bffd17 	ldw	r2,-12(fp)
    1eac:	11000484 	addi	r4,r2,18
    1eb0:	e0bffd17 	ldw	r2,-12(fp)
    1eb4:	10c00504 	addi	r3,r2,20
    1eb8:	00bfffc4 	movi	r2,-1
    1ebc:	d8800015 	stw	r2,0(sp)
    1ec0:	01400504 	movi	r5,20
    1ec4:	180d883a 	mov	r6,r3
    1ec8:	01c00f04 	movi	r7,60
    1ecc:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    1ed0:	e0bffd17 	ldw	r2,-12(fp)
    1ed4:	10c00084 	addi	r3,r2,2
    1ed8:	00bfffc4 	movi	r2,-1
    1edc:	d8800015 	stw	r2,0(sp)
    1ee0:	e13ffd17 	ldw	r4,-12(fp)
    1ee4:	01400504 	movi	r5,20
    1ee8:	180d883a 	mov	r6,r3
    1eec:	01c00a04 	movi	r7,40
    1ef0:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1ef4:	e0bffd17 	ldw	r2,-12(fp)
    1ef8:	10c00504 	addi	r3,r2,20
    1efc:	00bfffc4 	movi	r2,-1
    1f00:	d8800015 	stw	r2,0(sp)
    1f04:	e13ffd17 	ldw	r4,-12(fp)
    1f08:	01400504 	movi	r5,20
    1f0c:	180d883a 	mov	r6,r3
    1f10:	01c00584 	movi	r7,22
    1f14:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    1f18:	e0bffd17 	ldw	r2,-12(fp)
    1f1c:	10c00504 	addi	r3,r2,20
    1f20:	00bfffc4 	movi	r2,-1
    1f24:	d8800015 	stw	r2,0(sp)
    1f28:	e13ffd17 	ldw	r4,-12(fp)
    1f2c:	014009c4 	movi	r5,39
    1f30:	180d883a 	mov	r6,r3
    1f34:	01c00a44 	movi	r7,41
    1f38:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    1f3c:	e0bffd17 	ldw	r2,-12(fp)
    1f40:	10c00504 	addi	r3,r2,20
    1f44:	00bfffc4 	movi	r2,-1
    1f48:	d8800015 	stw	r2,0(sp)
    1f4c:	e13ffd17 	ldw	r4,-12(fp)
    1f50:	01400e84 	movi	r5,58
    1f54:	180d883a 	mov	r6,r3
    1f58:	01c00f04 	movi	r7,60
    1f5c:	00017480 	call	1748 <VGA_box>
    1f60:	00002706 	br	2000 <draw_number+0x660>
	}else if(nummer == 0){
    1f64:	e0bffe17 	ldw	r2,-8(fp)
    1f68:	1000251e 	bne	r2,zero,2000 <draw_number+0x660>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1f6c:	e0bffd17 	ldw	r2,-12(fp)
    1f70:	11000484 	addi	r4,r2,18
    1f74:	e0bffd17 	ldw	r2,-12(fp)
    1f78:	10c00504 	addi	r3,r2,20
    1f7c:	00bfffc4 	movi	r2,-1
    1f80:	d8800015 	stw	r2,0(sp)
    1f84:	01400504 	movi	r5,20
    1f88:	180d883a 	mov	r6,r3
    1f8c:	01c00f04 	movi	r7,60
    1f90:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    1f94:	e0bffd17 	ldw	r2,-12(fp)
    1f98:	10c00084 	addi	r3,r2,2
    1f9c:	00bfffc4 	movi	r2,-1
    1fa0:	d8800015 	stw	r2,0(sp)
    1fa4:	e13ffd17 	ldw	r4,-12(fp)
    1fa8:	01400504 	movi	r5,20
    1fac:	180d883a 	mov	r6,r3
    1fb0:	01c00f04 	movi	r7,60
    1fb4:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1fb8:	e0bffd17 	ldw	r2,-12(fp)
    1fbc:	10c00504 	addi	r3,r2,20
    1fc0:	00bfffc4 	movi	r2,-1
    1fc4:	d8800015 	stw	r2,0(sp)
    1fc8:	e13ffd17 	ldw	r4,-12(fp)
    1fcc:	01400504 	movi	r5,20
    1fd0:	180d883a 	mov	r6,r3
    1fd4:	01c00584 	movi	r7,22
    1fd8:	00017480 	call	1748 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    1fdc:	e0bffd17 	ldw	r2,-12(fp)
    1fe0:	10c00504 	addi	r3,r2,20
    1fe4:	00bfffc4 	movi	r2,-1
    1fe8:	d8800015 	stw	r2,0(sp)
    1fec:	e13ffd17 	ldw	r4,-12(fp)
    1ff0:	01400e84 	movi	r5,58
    1ff4:	180d883a 	mov	r6,r3
    1ff8:	01c00f04 	movi	r7,60
    1ffc:	00017480 	call	1748 <VGA_box>
	}
}
    2000:	e037883a 	mov	sp,fp
    2004:	dfc00117 	ldw	ra,4(sp)
    2008:	df000017 	ldw	fp,0(sp)
    200c:	dec00204 	addi	sp,sp,8
    2010:	f800283a 	ret

00002014 <checkIDScore>:

int checkIDScore(int ID){
    2014:	defffe04 	addi	sp,sp,-8
    2018:	df000115 	stw	fp,4(sp)
    201c:	df000104 	addi	fp,sp,4
    2020:	e13fff15 	stw	r4,-4(fp)
	if(ID == 1){
    2024:	e0bfff17 	ldw	r2,-4(fp)
    2028:	10800058 	cmpnei	r2,r2,1
    202c:	1000021e 	bne	r2,zero,2038 <checkIDScore+0x24>
		return 120;
    2030:	00801e04 	movi	r2,120
    2034:	00000606 	br	2050 <checkIDScore+0x3c>
	}else if(ID == 2){
    2038:	e0bfff17 	ldw	r2,-4(fp)
    203c:	10800098 	cmpnei	r2,r2,2
    2040:	1000021e 	bne	r2,zero,204c <checkIDScore+0x38>
		return 180;
    2044:	00802d04 	movi	r2,180
    2048:	00000106 	br	2050 <checkIDScore+0x3c>

	}
	return 0;
    204c:	0005883a 	mov	r2,zero
}
    2050:	e037883a 	mov	sp,fp
    2054:	df000017 	ldw	fp,0(sp)
    2058:	dec00104 	addi	sp,sp,4
    205c:	f800283a 	ret

00002060 <_printf_r>:
    2060:	defffd04 	addi	sp,sp,-12
    2064:	dfc00015 	stw	ra,0(sp)
    2068:	d9800115 	stw	r6,4(sp)
    206c:	d9c00215 	stw	r7,8(sp)
    2070:	280d883a 	mov	r6,r5
    2074:	21400217 	ldw	r5,8(r4)
    2078:	d9c00104 	addi	r7,sp,4
    207c:	000221c0 	call	221c <___vfprintf_internal_r>
    2080:	dfc00017 	ldw	ra,0(sp)
    2084:	dec00304 	addi	sp,sp,12
    2088:	f800283a 	ret

0000208c <printf>:
    208c:	defffc04 	addi	sp,sp,-16
    2090:	dfc00015 	stw	ra,0(sp)
    2094:	d9400115 	stw	r5,4(sp)
    2098:	d9800215 	stw	r6,8(sp)
    209c:	d9c00315 	stw	r7,12(sp)
    20a0:	008000b4 	movhi	r2,2
    20a4:	10b70f04 	addi	r2,r2,-9156
    20a8:	10800017 	ldw	r2,0(r2)
    20ac:	200b883a 	mov	r5,r4
    20b0:	d9800104 	addi	r6,sp,4
    20b4:	11000217 	ldw	r4,8(r2)
    20b8:	000416c0 	call	416c <__vfprintf_internal>
    20bc:	dfc00017 	ldw	ra,0(sp)
    20c0:	dec00404 	addi	sp,sp,16
    20c4:	f800283a 	ret

000020c8 <_puts_r>:
    20c8:	defff604 	addi	sp,sp,-40
    20cc:	dc000715 	stw	r16,28(sp)
    20d0:	2021883a 	mov	r16,r4
    20d4:	2809883a 	mov	r4,r5
    20d8:	dc400815 	stw	r17,32(sp)
    20dc:	dfc00915 	stw	ra,36(sp)
    20e0:	2823883a 	mov	r17,r5
    20e4:	00021840 	call	2184 <strlen>
    20e8:	81400217 	ldw	r5,8(r16)
    20ec:	11000044 	addi	r4,r2,1
    20f0:	d8800115 	stw	r2,4(sp)
    20f4:	008000b4 	movhi	r2,2
    20f8:	2980030b 	ldhu	r6,12(r5)
    20fc:	10ae0504 	addi	r2,r2,-18412
    2100:	d8800215 	stw	r2,8(sp)
    2104:	00800044 	movi	r2,1
    2108:	d8800315 	stw	r2,12(sp)
    210c:	00800084 	movi	r2,2
    2110:	d8800515 	stw	r2,20(sp)
    2114:	dc400015 	stw	r17,0(sp)
    2118:	d9000615 	stw	r4,24(sp)
    211c:	dec00415 	stw	sp,16(sp)
    2120:	3088000c 	andi	r2,r6,8192
    2124:	1000061e 	bne	r2,zero,2140 <_puts_r+0x78>
    2128:	29001917 	ldw	r4,100(r5)
    212c:	00b7ffc4 	movi	r2,-8193
    2130:	31880014 	ori	r6,r6,8192
    2134:	2084703a 	and	r2,r4,r2
    2138:	2980030d 	sth	r6,12(r5)
    213c:	28801915 	stw	r2,100(r5)
    2140:	8009883a 	mov	r4,r16
    2144:	d9800404 	addi	r6,sp,16
    2148:	00067100 	call	6710 <__sfvwrite_r>
    214c:	1000061e 	bne	r2,zero,2168 <_puts_r+0xa0>
    2150:	00800284 	movi	r2,10
    2154:	dfc00917 	ldw	ra,36(sp)
    2158:	dc400817 	ldw	r17,32(sp)
    215c:	dc000717 	ldw	r16,28(sp)
    2160:	dec00a04 	addi	sp,sp,40
    2164:	f800283a 	ret
    2168:	00bfffc4 	movi	r2,-1
    216c:	003ff906 	br	2154 <__alt_mem_Flash_flash_data+0xf4002154>

00002170 <puts>:
    2170:	008000b4 	movhi	r2,2
    2174:	10b70f04 	addi	r2,r2,-9156
    2178:	200b883a 	mov	r5,r4
    217c:	11000017 	ldw	r4,0(r2)
    2180:	00020c81 	jmpi	20c8 <_puts_r>

00002184 <strlen>:
    2184:	208000cc 	andi	r2,r4,3
    2188:	10002026 	beq	r2,zero,220c <strlen+0x88>
    218c:	20800007 	ldb	r2,0(r4)
    2190:	10002026 	beq	r2,zero,2214 <strlen+0x90>
    2194:	2005883a 	mov	r2,r4
    2198:	00000206 	br	21a4 <strlen+0x20>
    219c:	10c00007 	ldb	r3,0(r2)
    21a0:	18001826 	beq	r3,zero,2204 <strlen+0x80>
    21a4:	10800044 	addi	r2,r2,1
    21a8:	10c000cc 	andi	r3,r2,3
    21ac:	183ffb1e 	bne	r3,zero,219c <__alt_mem_Flash_flash_data+0xf400219c>
    21b0:	10c00017 	ldw	r3,0(r2)
    21b4:	01ffbff4 	movhi	r7,65279
    21b8:	39ffbfc4 	addi	r7,r7,-257
    21bc:	00ca303a 	nor	r5,zero,r3
    21c0:	01a02074 	movhi	r6,32897
    21c4:	19c7883a 	add	r3,r3,r7
    21c8:	31a02004 	addi	r6,r6,-32640
    21cc:	1946703a 	and	r3,r3,r5
    21d0:	1986703a 	and	r3,r3,r6
    21d4:	1800091e 	bne	r3,zero,21fc <strlen+0x78>
    21d8:	10800104 	addi	r2,r2,4
    21dc:	10c00017 	ldw	r3,0(r2)
    21e0:	19cb883a 	add	r5,r3,r7
    21e4:	00c6303a 	nor	r3,zero,r3
    21e8:	28c6703a 	and	r3,r5,r3
    21ec:	1986703a 	and	r3,r3,r6
    21f0:	183ff926 	beq	r3,zero,21d8 <__alt_mem_Flash_flash_data+0xf40021d8>
    21f4:	00000106 	br	21fc <strlen+0x78>
    21f8:	10800044 	addi	r2,r2,1
    21fc:	10c00007 	ldb	r3,0(r2)
    2200:	183ffd1e 	bne	r3,zero,21f8 <__alt_mem_Flash_flash_data+0xf40021f8>
    2204:	1105c83a 	sub	r2,r2,r4
    2208:	f800283a 	ret
    220c:	2005883a 	mov	r2,r4
    2210:	003fe706 	br	21b0 <__alt_mem_Flash_flash_data+0xf40021b0>
    2214:	0005883a 	mov	r2,zero
    2218:	f800283a 	ret

0000221c <___vfprintf_internal_r>:
    221c:	deffb604 	addi	sp,sp,-296
    2220:	dfc04915 	stw	ra,292(sp)
    2224:	ddc04715 	stw	r23,284(sp)
    2228:	dd804615 	stw	r22,280(sp)
    222c:	282f883a 	mov	r23,r5
    2230:	202d883a 	mov	r22,r4
    2234:	d9802a15 	stw	r6,168(sp)
    2238:	d9c02d15 	stw	r7,180(sp)
    223c:	df004815 	stw	fp,288(sp)
    2240:	dd404515 	stw	r21,276(sp)
    2244:	dd004415 	stw	r20,272(sp)
    2248:	dcc04315 	stw	r19,268(sp)
    224c:	dc804215 	stw	r18,264(sp)
    2250:	dc404115 	stw	r17,260(sp)
    2254:	dc004015 	stw	r16,256(sp)
    2258:	0006e040 	call	6e04 <_localeconv_r>
    225c:	10800017 	ldw	r2,0(r2)
    2260:	1009883a 	mov	r4,r2
    2264:	d8803515 	stw	r2,212(sp)
    2268:	00021840 	call	2184 <strlen>
    226c:	d8803815 	stw	r2,224(sp)
    2270:	b0000226 	beq	r22,zero,227c <___vfprintf_internal_r+0x60>
    2274:	b0800e17 	ldw	r2,56(r22)
    2278:	1000e126 	beq	r2,zero,2600 <___vfprintf_internal_r+0x3e4>
    227c:	b880030b 	ldhu	r2,12(r23)
    2280:	10c8000c 	andi	r3,r2,8192
    2284:	1800061e 	bne	r3,zero,22a0 <___vfprintf_internal_r+0x84>
    2288:	b9001917 	ldw	r4,100(r23)
    228c:	00f7ffc4 	movi	r3,-8193
    2290:	10880014 	ori	r2,r2,8192
    2294:	20c6703a 	and	r3,r4,r3
    2298:	b880030d 	sth	r2,12(r23)
    229c:	b8c01915 	stw	r3,100(r23)
    22a0:	10c0020c 	andi	r3,r2,8
    22a4:	1800a726 	beq	r3,zero,2544 <___vfprintf_internal_r+0x328>
    22a8:	b8c00417 	ldw	r3,16(r23)
    22ac:	1800a526 	beq	r3,zero,2544 <___vfprintf_internal_r+0x328>
    22b0:	1080068c 	andi	r2,r2,26
    22b4:	00c00284 	movi	r3,10
    22b8:	10c0aa26 	beq	r2,r3,2564 <___vfprintf_internal_r+0x348>
    22bc:	dac01e04 	addi	r11,sp,120
    22c0:	db001dc4 	addi	r12,sp,119
    22c4:	d8800404 	addi	r2,sp,16
    22c8:	050000b4 	movhi	r20,2
    22cc:	dac02815 	stw	r11,160(sp)
    22d0:	5b17c83a 	sub	r11,r11,r12
    22d4:	a52e1684 	addi	r20,r20,-18342
    22d8:	db002915 	stw	r12,164(sp)
    22dc:	d8801e15 	stw	r2,120(sp)
    22e0:	d8002015 	stw	zero,128(sp)
    22e4:	d8001f15 	stw	zero,124(sp)
    22e8:	d8003315 	stw	zero,204(sp)
    22ec:	d8003715 	stw	zero,220(sp)
    22f0:	d8003915 	stw	zero,228(sp)
    22f4:	1011883a 	mov	r8,r2
    22f8:	d8003b15 	stw	zero,236(sp)
    22fc:	d8003a15 	stw	zero,232(sp)
    2300:	d8002f15 	stw	zero,188(sp)
    2304:	dac03c15 	stw	r11,240(sp)
    2308:	db002a17 	ldw	r12,168(sp)
    230c:	60800007 	ldb	r2,0(r12)
    2310:	1000be26 	beq	r2,zero,260c <___vfprintf_internal_r+0x3f0>
    2314:	00c00944 	movi	r3,37
    2318:	10c0bc26 	beq	r2,r3,260c <___vfprintf_internal_r+0x3f0>
    231c:	6021883a 	mov	r16,r12
    2320:	00000106 	br	2328 <___vfprintf_internal_r+0x10c>
    2324:	10c08426 	beq	r2,r3,2538 <___vfprintf_internal_r+0x31c>
    2328:	84000044 	addi	r16,r16,1
    232c:	80800007 	ldb	r2,0(r16)
    2330:	103ffc1e 	bne	r2,zero,2324 <__alt_mem_Flash_flash_data+0xf4002324>
    2334:	dac02a17 	ldw	r11,168(sp)
    2338:	82e3c83a 	sub	r17,r16,r11
    233c:	88000f26 	beq	r17,zero,237c <___vfprintf_internal_r+0x160>
    2340:	d8c02017 	ldw	r3,128(sp)
    2344:	d8801f17 	ldw	r2,124(sp)
    2348:	dac02a17 	ldw	r11,168(sp)
    234c:	1c47883a 	add	r3,r3,r17
    2350:	10800044 	addi	r2,r2,1
    2354:	d8c02015 	stw	r3,128(sp)
    2358:	42c00015 	stw	r11,0(r8)
    235c:	44400115 	stw	r17,4(r8)
    2360:	d8801f15 	stw	r2,124(sp)
    2364:	00c001c4 	movi	r3,7
    2368:	18809316 	blt	r3,r2,25b8 <___vfprintf_internal_r+0x39c>
    236c:	42000204 	addi	r8,r8,8
    2370:	db002f17 	ldw	r12,188(sp)
    2374:	6459883a 	add	r12,r12,r17
    2378:	db002f15 	stw	r12,188(sp)
    237c:	80800007 	ldb	r2,0(r16)
    2380:	10009426 	beq	r2,zero,25d4 <___vfprintf_internal_r+0x3b8>
    2384:	80800044 	addi	r2,r16,1
    2388:	84000047 	ldb	r16,1(r16)
    238c:	d8002785 	stb	zero,158(sp)
    2390:	000d883a 	mov	r6,zero
    2394:	027fffc4 	movi	r9,-1
    2398:	d8002e15 	stw	zero,184(sp)
    239c:	0023883a 	mov	r17,zero
    23a0:	01001604 	movi	r4,88
    23a4:	01400244 	movi	r5,9
    23a8:	02800a84 	movi	r10,42
    23ac:	01c01b04 	movi	r7,108
    23b0:	10c00044 	addi	r3,r2,1
    23b4:	80bff804 	addi	r2,r16,-32
    23b8:	2082cd36 	bltu	r4,r2,2ef0 <___vfprintf_internal_r+0xcd4>
    23bc:	100490ba 	slli	r2,r2,2
    23c0:	02c00034 	movhi	r11,0
    23c4:	5ac8f504 	addi	r11,r11,9172
    23c8:	12c5883a 	add	r2,r2,r11
    23cc:	10800017 	ldw	r2,0(r2)
    23d0:	1000683a 	jmp	r2
    23d4:	00002d08 	cmpgei	zero,zero,180
    23d8:	00002ef0 	cmpltui	zero,zero,187
    23dc:	00002ef0 	cmpltui	zero,zero,187
    23e0:	00002e58 	cmpnei	zero,zero,185
    23e4:	00002ef0 	cmpltui	zero,zero,187
    23e8:	00002ef0 	cmpltui	zero,zero,187
    23ec:	00002ef0 	cmpltui	zero,zero,187
    23f0:	00002ef0 	cmpltui	zero,zero,187
    23f4:	00002ef0 	cmpltui	zero,zero,187
    23f8:	00002ef0 	cmpltui	zero,zero,187
    23fc:	00002d28 	cmpgeui	zero,zero,180
    2400:	00002d54 	movui	zero,181
    2404:	00002ef0 	cmpltui	zero,zero,187
    2408:	00002614 	movui	zero,152
    240c:	00002624 	muli	zero,zero,152
    2410:	00002ef0 	cmpltui	zero,zero,187
    2414:	00002664 	muli	zero,zero,153
    2418:	00002674 	movhi	zero,153
    241c:	00002674 	movhi	zero,153
    2420:	00002674 	movhi	zero,153
    2424:	00002674 	movhi	zero,153
    2428:	00002674 	movhi	zero,153
    242c:	00002674 	movhi	zero,153
    2430:	00002674 	movhi	zero,153
    2434:	00002674 	movhi	zero,153
    2438:	00002674 	movhi	zero,153
    243c:	00002ef0 	cmpltui	zero,zero,187
    2440:	00002ef0 	cmpltui	zero,zero,187
    2444:	00002ef0 	cmpltui	zero,zero,187
    2448:	00002ef0 	cmpltui	zero,zero,187
    244c:	00002ef0 	cmpltui	zero,zero,187
    2450:	00002ef0 	cmpltui	zero,zero,187
    2454:	00002ef0 	cmpltui	zero,zero,187
    2458:	00002ef0 	cmpltui	zero,zero,187
    245c:	00002ef0 	cmpltui	zero,zero,187
    2460:	00002ef0 	cmpltui	zero,zero,187
    2464:	000026a8 	cmpgeui	zero,zero,154
    2468:	00002b18 	cmpnei	zero,zero,172
    246c:	00002ef0 	cmpltui	zero,zero,187
    2470:	00002b18 	cmpnei	zero,zero,172
    2474:	00002ef0 	cmpltui	zero,zero,187
    2478:	00002ef0 	cmpltui	zero,zero,187
    247c:	00002ef0 	cmpltui	zero,zero,187
    2480:	00002ef0 	cmpltui	zero,zero,187
    2484:	00002c04 	movi	zero,176
    2488:	00002ef0 	cmpltui	zero,zero,187
    248c:	00002ef0 	cmpltui	zero,zero,187
    2490:	00002aac 	andhi	zero,zero,170
    2494:	00002ef0 	cmpltui	zero,zero,187
    2498:	00002ef0 	cmpltui	zero,zero,187
    249c:	00002ef0 	cmpltui	zero,zero,187
    24a0:	00002ef0 	cmpltui	zero,zero,187
    24a4:	00002ef0 	cmpltui	zero,zero,187
    24a8:	00002ae8 	cmpgeui	zero,zero,171
    24ac:	00002ef0 	cmpltui	zero,zero,187
    24b0:	00002ef0 	cmpltui	zero,zero,187
    24b4:	00002cac 	andhi	zero,zero,178
    24b8:	00002ef0 	cmpltui	zero,zero,187
    24bc:	00002ef0 	cmpltui	zero,zero,187
    24c0:	00002ef0 	cmpltui	zero,zero,187
    24c4:	00002ef0 	cmpltui	zero,zero,187
    24c8:	00002ef0 	cmpltui	zero,zero,187
    24cc:	00002ef0 	cmpltui	zero,zero,187
    24d0:	00002ef0 	cmpltui	zero,zero,187
    24d4:	00002ef0 	cmpltui	zero,zero,187
    24d8:	00002ef0 	cmpltui	zero,zero,187
    24dc:	00002ef0 	cmpltui	zero,zero,187
    24e0:	00002d64 	muli	zero,zero,181
    24e4:	00002c14 	movui	zero,176
    24e8:	00002b18 	cmpnei	zero,zero,172
    24ec:	00002b18 	cmpnei	zero,zero,172
    24f0:	00002b18 	cmpnei	zero,zero,172
    24f4:	00002c54 	movui	zero,177
    24f8:	00002c14 	movui	zero,176
    24fc:	00002ef0 	cmpltui	zero,zero,187
    2500:	00002ef0 	cmpltui	zero,zero,187
    2504:	00002c64 	muli	zero,zero,177
    2508:	00002ef0 	cmpltui	zero,zero,187
    250c:	00002c78 	rdprs	zero,zero,177
    2510:	00002eb4 	movhi	zero,186
    2514:	00002bbc 	xorhi	zero,zero,174
    2518:	00002e68 	cmpgeui	zero,zero,185
    251c:	00002ef0 	cmpltui	zero,zero,187
    2520:	00002da4 	muli	zero,zero,182
    2524:	00002ef0 	cmpltui	zero,zero,187
    2528:	00002e78 	rdprs	zero,zero,185
    252c:	00002ef0 	cmpltui	zero,zero,187
    2530:	00002ef0 	cmpltui	zero,zero,187
    2534:	00002e18 	cmpnei	zero,zero,184
    2538:	db002a17 	ldw	r12,168(sp)
    253c:	8323c83a 	sub	r17,r16,r12
    2540:	003f7e06 	br	233c <__alt_mem_Flash_flash_data+0xf400233c>
    2544:	b009883a 	mov	r4,r22
    2548:	b80b883a 	mov	r5,r23
    254c:	000424c0 	call	424c <__swsetup_r>
    2550:	10000c1e 	bne	r2,zero,2584 <___vfprintf_internal_r+0x368>
    2554:	b880030b 	ldhu	r2,12(r23)
    2558:	00c00284 	movi	r3,10
    255c:	1080068c 	andi	r2,r2,26
    2560:	10ff561e 	bne	r2,r3,22bc <__alt_mem_Flash_flash_data+0xf40022bc>
    2564:	b880038f 	ldh	r2,14(r23)
    2568:	103f5416 	blt	r2,zero,22bc <__alt_mem_Flash_flash_data+0xf40022bc>
    256c:	d9802a17 	ldw	r6,168(sp)
    2570:	d9c02d17 	ldw	r7,180(sp)
    2574:	b009883a 	mov	r4,r22
    2578:	b80b883a 	mov	r5,r23
    257c:	00041900 	call	4190 <__sbprintf>
    2580:	00000106 	br	2588 <___vfprintf_internal_r+0x36c>
    2584:	00bfffc4 	movi	r2,-1
    2588:	dfc04917 	ldw	ra,292(sp)
    258c:	df004817 	ldw	fp,288(sp)
    2590:	ddc04717 	ldw	r23,284(sp)
    2594:	dd804617 	ldw	r22,280(sp)
    2598:	dd404517 	ldw	r21,276(sp)
    259c:	dd004417 	ldw	r20,272(sp)
    25a0:	dcc04317 	ldw	r19,268(sp)
    25a4:	dc804217 	ldw	r18,264(sp)
    25a8:	dc404117 	ldw	r17,260(sp)
    25ac:	dc004017 	ldw	r16,256(sp)
    25b0:	dec04a04 	addi	sp,sp,296
    25b4:	f800283a 	ret
    25b8:	b009883a 	mov	r4,r22
    25bc:	b80b883a 	mov	r5,r23
    25c0:	d9801e04 	addi	r6,sp,120
    25c4:	00094e40 	call	94e4 <__sprint_r>
    25c8:	1000081e 	bne	r2,zero,25ec <___vfprintf_internal_r+0x3d0>
    25cc:	da000404 	addi	r8,sp,16
    25d0:	003f6706 	br	2370 <__alt_mem_Flash_flash_data+0xf4002370>
    25d4:	d8802017 	ldw	r2,128(sp)
    25d8:	10000426 	beq	r2,zero,25ec <___vfprintf_internal_r+0x3d0>
    25dc:	b009883a 	mov	r4,r22
    25e0:	b80b883a 	mov	r5,r23
    25e4:	d9801e04 	addi	r6,sp,120
    25e8:	00094e40 	call	94e4 <__sprint_r>
    25ec:	b880030b 	ldhu	r2,12(r23)
    25f0:	1080100c 	andi	r2,r2,64
    25f4:	103fe31e 	bne	r2,zero,2584 <__alt_mem_Flash_flash_data+0xf4002584>
    25f8:	d8802f17 	ldw	r2,188(sp)
    25fc:	003fe206 	br	2588 <__alt_mem_Flash_flash_data+0xf4002588>
    2600:	b009883a 	mov	r4,r22
    2604:	00062ac0 	call	62ac <__sinit>
    2608:	003f1c06 	br	227c <__alt_mem_Flash_flash_data+0xf400227c>
    260c:	dc002a17 	ldw	r16,168(sp)
    2610:	003f5a06 	br	237c <__alt_mem_Flash_flash_data+0xf400237c>
    2614:	1805883a 	mov	r2,r3
    2618:	8c400114 	ori	r17,r17,4
    261c:	1c000007 	ldb	r16,0(r3)
    2620:	003f6306 	br	23b0 <__alt_mem_Flash_flash_data+0xf40023b0>
    2624:	1c000007 	ldb	r16,0(r3)
    2628:	18800044 	addi	r2,r3,1
    262c:	8286ad26 	beq	r16,r10,40e4 <___vfprintf_internal_r+0x1ec8>
    2630:	82fff404 	addi	r11,r16,-48
    2634:	1007883a 	mov	r3,r2
    2638:	0013883a 	mov	r9,zero
    263c:	2aff5d36 	bltu	r5,r11,23b4 <__alt_mem_Flash_flash_data+0xf40023b4>
    2640:	1c000007 	ldb	r16,0(r3)
    2644:	4a4002a4 	muli	r9,r9,10
    2648:	18c00044 	addi	r3,r3,1
    264c:	5a53883a 	add	r9,r11,r9
    2650:	82fff404 	addi	r11,r16,-48
    2654:	2afffa2e 	bgeu	r5,r11,2640 <__alt_mem_Flash_flash_data+0xf4002640>
    2658:	483f560e 	bge	r9,zero,23b4 <__alt_mem_Flash_flash_data+0xf40023b4>
    265c:	027fffc4 	movi	r9,-1
    2660:	003f5406 	br	23b4 <__alt_mem_Flash_flash_data+0xf40023b4>
    2664:	8c402014 	ori	r17,r17,128
    2668:	1805883a 	mov	r2,r3
    266c:	1c000007 	ldb	r16,0(r3)
    2670:	003f4f06 	br	23b0 <__alt_mem_Flash_flash_data+0xf40023b0>
    2674:	1805883a 	mov	r2,r3
    2678:	d8002e15 	stw	zero,184(sp)
    267c:	82fff404 	addi	r11,r16,-48
    2680:	0019883a 	mov	r12,zero
    2684:	14000007 	ldb	r16,0(r2)
    2688:	630002a4 	muli	r12,r12,10
    268c:	18c00044 	addi	r3,r3,1
    2690:	1805883a 	mov	r2,r3
    2694:	62d9883a 	add	r12,r12,r11
    2698:	82fff404 	addi	r11,r16,-48
    269c:	2afff92e 	bgeu	r5,r11,2684 <__alt_mem_Flash_flash_data+0xf4002684>
    26a0:	db002e15 	stw	r12,184(sp)
    26a4:	003f4306 	br	23b4 <__alt_mem_Flash_flash_data+0xf40023b4>
    26a8:	8c400414 	ori	r17,r17,16
    26ac:	d8c02a15 	stw	r3,168(sp)
    26b0:	d9802785 	stb	r6,158(sp)
    26b4:	8880080c 	andi	r2,r17,32
    26b8:	d8c02d17 	ldw	r3,180(sp)
    26bc:	10015a26 	beq	r2,zero,2c28 <___vfprintf_internal_r+0xa0c>
    26c0:	db002d17 	ldw	r12,180(sp)
    26c4:	18800117 	ldw	r2,4(r3)
    26c8:	1cc00017 	ldw	r19,0(r3)
    26cc:	63000204 	addi	r12,r12,8
    26d0:	db002d15 	stw	r12,180(sp)
    26d4:	1039883a 	mov	fp,r2
    26d8:	10044516 	blt	r2,zero,37f0 <___vfprintf_internal_r+0x15d4>
    26dc:	dd402783 	ldbu	r21,158(sp)
    26e0:	da403215 	stw	r9,200(sp)
    26e4:	00800044 	movi	r2,1
    26e8:	9f06b03a 	or	r3,r19,fp
    26ec:	48000216 	blt	r9,zero,26f8 <___vfprintf_internal_r+0x4dc>
    26f0:	013fdfc4 	movi	r4,-129
    26f4:	8922703a 	and	r17,r17,r4
    26f8:	1802071e 	bne	r3,zero,2f18 <___vfprintf_internal_r+0xcfc>
    26fc:	4802fa26 	beq	r9,zero,32e8 <___vfprintf_internal_r+0x10cc>
    2700:	10803fcc 	andi	r2,r2,255
    2704:	00c00044 	movi	r3,1
    2708:	10c22926 	beq	r2,r3,2fb0 <___vfprintf_internal_r+0xd94>
    270c:	00c00084 	movi	r3,2
    2710:	10c31726 	beq	r2,r3,3370 <___vfprintf_internal_r+0x1154>
    2714:	d8c01e04 	addi	r3,sp,120
    2718:	9808d0fa 	srli	r4,r19,3
    271c:	e00a977a 	slli	r5,fp,29
    2720:	e038d0fa 	srli	fp,fp,3
    2724:	9cc001cc 	andi	r19,r19,7
    2728:	98800c04 	addi	r2,r19,48
    272c:	18ffffc4 	addi	r3,r3,-1
    2730:	2926b03a 	or	r19,r5,r4
    2734:	18800005 	stb	r2,0(r3)
    2738:	9f08b03a 	or	r4,r19,fp
    273c:	203ff61e 	bne	r4,zero,2718 <__alt_mem_Flash_flash_data+0xf4002718>
    2740:	8900004c 	andi	r4,r17,1
    2744:	d8c03115 	stw	r3,196(sp)
    2748:	2003931e 	bne	r4,zero,3598 <___vfprintf_internal_r+0x137c>
    274c:	dac02817 	ldw	r11,160(sp)
    2750:	58e5c83a 	sub	r18,r11,r3
    2754:	9005883a 	mov	r2,r18
    2758:	9240010e 	bge	r18,r9,2760 <___vfprintf_internal_r+0x544>
    275c:	4805883a 	mov	r2,r9
    2760:	d8802b15 	stw	r2,172(sp)
    2764:	d8003415 	stw	zero,208(sp)
    2768:	a8803fcc 	andi	r2,r21,255
    276c:	1080201c 	xori	r2,r2,128
    2770:	10bfe004 	addi	r2,r2,-128
    2774:	10000326 	beq	r2,zero,2784 <___vfprintf_internal_r+0x568>
    2778:	db002b17 	ldw	r12,172(sp)
    277c:	63000044 	addi	r12,r12,1
    2780:	db002b15 	stw	r12,172(sp)
    2784:	88c0008c 	andi	r3,r17,2
    2788:	d8c02c15 	stw	r3,176(sp)
    278c:	18000326 	beq	r3,zero,279c <___vfprintf_internal_r+0x580>
    2790:	dac02b17 	ldw	r11,172(sp)
    2794:	5ac00084 	addi	r11,r11,2
    2798:	dac02b15 	stw	r11,172(sp)
    279c:	8b00210c 	andi	r12,r17,132
    27a0:	db003015 	stw	r12,192(sp)
    27a4:	6001da1e 	bne	r12,zero,2f10 <___vfprintf_internal_r+0xcf4>
    27a8:	dac02e17 	ldw	r11,184(sp)
    27ac:	db002b17 	ldw	r12,172(sp)
    27b0:	5b39c83a 	sub	fp,r11,r12
    27b4:	0701d60e 	bge	zero,fp,2f10 <___vfprintf_internal_r+0xcf4>
    27b8:	02400404 	movi	r9,16
    27bc:	d8c02017 	ldw	r3,128(sp)
    27c0:	d8801f17 	ldw	r2,124(sp)
    27c4:	4f053c0e 	bge	r9,fp,3cb8 <___vfprintf_internal_r+0x1a9c>
    27c8:	014000b4 	movhi	r5,2
    27cc:	296e1a84 	addi	r5,r5,-18326
    27d0:	d9403615 	stw	r5,216(sp)
    27d4:	482b883a 	mov	r21,r9
    27d8:	04c001c4 	movi	r19,7
    27dc:	00000306 	br	27ec <___vfprintf_internal_r+0x5d0>
    27e0:	e73ffc04 	addi	fp,fp,-16
    27e4:	42000204 	addi	r8,r8,8
    27e8:	af00130e 	bge	r21,fp,2838 <___vfprintf_internal_r+0x61c>
    27ec:	02c000b4 	movhi	r11,2
    27f0:	18c00404 	addi	r3,r3,16
    27f4:	10800044 	addi	r2,r2,1
    27f8:	5aee1a84 	addi	r11,r11,-18326
    27fc:	42c00015 	stw	r11,0(r8)
    2800:	45400115 	stw	r21,4(r8)
    2804:	d8c02015 	stw	r3,128(sp)
    2808:	d8801f15 	stw	r2,124(sp)
    280c:	98bff40e 	bge	r19,r2,27e0 <__alt_mem_Flash_flash_data+0xf40027e0>
    2810:	b009883a 	mov	r4,r22
    2814:	b80b883a 	mov	r5,r23
    2818:	d9801e04 	addi	r6,sp,120
    281c:	00094e40 	call	94e4 <__sprint_r>
    2820:	103f721e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    2824:	e73ffc04 	addi	fp,fp,-16
    2828:	d8c02017 	ldw	r3,128(sp)
    282c:	d8801f17 	ldw	r2,124(sp)
    2830:	da000404 	addi	r8,sp,16
    2834:	af3fed16 	blt	r21,fp,27ec <__alt_mem_Flash_flash_data+0xf40027ec>
    2838:	db003617 	ldw	r12,216(sp)
    283c:	e0c7883a 	add	r3,fp,r3
    2840:	10800044 	addi	r2,r2,1
    2844:	43000015 	stw	r12,0(r8)
    2848:	47000115 	stw	fp,4(r8)
    284c:	d8c02015 	stw	r3,128(sp)
    2850:	d8801f15 	stw	r2,124(sp)
    2854:	010001c4 	movi	r4,7
    2858:	20830e16 	blt	r4,r2,3494 <___vfprintf_internal_r+0x1278>
    285c:	d8802787 	ldb	r2,158(sp)
    2860:	42000204 	addi	r8,r8,8
    2864:	10000c26 	beq	r2,zero,2898 <___vfprintf_internal_r+0x67c>
    2868:	d8801f17 	ldw	r2,124(sp)
    286c:	d9002784 	addi	r4,sp,158
    2870:	18c00044 	addi	r3,r3,1
    2874:	10800044 	addi	r2,r2,1
    2878:	41000015 	stw	r4,0(r8)
    287c:	01000044 	movi	r4,1
    2880:	41000115 	stw	r4,4(r8)
    2884:	d8c02015 	stw	r3,128(sp)
    2888:	d8801f15 	stw	r2,124(sp)
    288c:	010001c4 	movi	r4,7
    2890:	2082a716 	blt	r4,r2,3330 <___vfprintf_internal_r+0x1114>
    2894:	42000204 	addi	r8,r8,8
    2898:	dac02c17 	ldw	r11,176(sp)
    289c:	58000c26 	beq	r11,zero,28d0 <___vfprintf_internal_r+0x6b4>
    28a0:	d8801f17 	ldw	r2,124(sp)
    28a4:	d9002704 	addi	r4,sp,156
    28a8:	18c00084 	addi	r3,r3,2
    28ac:	10800044 	addi	r2,r2,1
    28b0:	41000015 	stw	r4,0(r8)
    28b4:	01000084 	movi	r4,2
    28b8:	41000115 	stw	r4,4(r8)
    28bc:	d8c02015 	stw	r3,128(sp)
    28c0:	d8801f15 	stw	r2,124(sp)
    28c4:	010001c4 	movi	r4,7
    28c8:	2082a116 	blt	r4,r2,3350 <___vfprintf_internal_r+0x1134>
    28cc:	42000204 	addi	r8,r8,8
    28d0:	db003017 	ldw	r12,192(sp)
    28d4:	00802004 	movi	r2,128
    28d8:	60820326 	beq	r12,r2,30e8 <___vfprintf_internal_r+0xecc>
    28dc:	db003217 	ldw	r12,200(sp)
    28e0:	64abc83a 	sub	r21,r12,r18
    28e4:	0540260e 	bge	zero,r21,2980 <___vfprintf_internal_r+0x764>
    28e8:	07000404 	movi	fp,16
    28ec:	d8801f17 	ldw	r2,124(sp)
    28f0:	e544570e 	bge	fp,r21,3a50 <___vfprintf_internal_r+0x1834>
    28f4:	014000b4 	movhi	r5,2
    28f8:	296e1684 	addi	r5,r5,-18342
    28fc:	d9402c15 	stw	r5,176(sp)
    2900:	04c001c4 	movi	r19,7
    2904:	00000306 	br	2914 <___vfprintf_internal_r+0x6f8>
    2908:	ad7ffc04 	addi	r21,r21,-16
    290c:	42000204 	addi	r8,r8,8
    2910:	e540110e 	bge	fp,r21,2958 <___vfprintf_internal_r+0x73c>
    2914:	18c00404 	addi	r3,r3,16
    2918:	10800044 	addi	r2,r2,1
    291c:	45000015 	stw	r20,0(r8)
    2920:	47000115 	stw	fp,4(r8)
    2924:	d8c02015 	stw	r3,128(sp)
    2928:	d8801f15 	stw	r2,124(sp)
    292c:	98bff60e 	bge	r19,r2,2908 <__alt_mem_Flash_flash_data+0xf4002908>
    2930:	b009883a 	mov	r4,r22
    2934:	b80b883a 	mov	r5,r23
    2938:	d9801e04 	addi	r6,sp,120
    293c:	00094e40 	call	94e4 <__sprint_r>
    2940:	103f2a1e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    2944:	ad7ffc04 	addi	r21,r21,-16
    2948:	d8c02017 	ldw	r3,128(sp)
    294c:	d8801f17 	ldw	r2,124(sp)
    2950:	da000404 	addi	r8,sp,16
    2954:	e57fef16 	blt	fp,r21,2914 <__alt_mem_Flash_flash_data+0xf4002914>
    2958:	dac02c17 	ldw	r11,176(sp)
    295c:	1d47883a 	add	r3,r3,r21
    2960:	10800044 	addi	r2,r2,1
    2964:	42c00015 	stw	r11,0(r8)
    2968:	45400115 	stw	r21,4(r8)
    296c:	d8c02015 	stw	r3,128(sp)
    2970:	d8801f15 	stw	r2,124(sp)
    2974:	010001c4 	movi	r4,7
    2978:	20826516 	blt	r4,r2,3310 <___vfprintf_internal_r+0x10f4>
    297c:	42000204 	addi	r8,r8,8
    2980:	8880400c 	andi	r2,r17,256
    2984:	1001901e 	bne	r2,zero,2fc8 <___vfprintf_internal_r+0xdac>
    2988:	d8801f17 	ldw	r2,124(sp)
    298c:	db003117 	ldw	r12,196(sp)
    2990:	1c87883a 	add	r3,r3,r18
    2994:	10800044 	addi	r2,r2,1
    2998:	43000015 	stw	r12,0(r8)
    299c:	44800115 	stw	r18,4(r8)
    29a0:	d8c02015 	stw	r3,128(sp)
    29a4:	d8801f15 	stw	r2,124(sp)
    29a8:	010001c4 	movi	r4,7
    29ac:	20824016 	blt	r4,r2,32b0 <___vfprintf_internal_r+0x1094>
    29b0:	42000204 	addi	r8,r8,8
    29b4:	8c40010c 	andi	r17,r17,4
    29b8:	88003126 	beq	r17,zero,2a80 <___vfprintf_internal_r+0x864>
    29bc:	db002e17 	ldw	r12,184(sp)
    29c0:	dac02b17 	ldw	r11,172(sp)
    29c4:	62e1c83a 	sub	r16,r12,r11
    29c8:	04002d0e 	bge	zero,r16,2a80 <___vfprintf_internal_r+0x864>
    29cc:	04400404 	movi	r17,16
    29d0:	d8801f17 	ldw	r2,124(sp)
    29d4:	8c05150e 	bge	r17,r16,3e2c <___vfprintf_internal_r+0x1c10>
    29d8:	010000b4 	movhi	r4,2
    29dc:	212e1a84 	addi	r4,r4,-18326
    29e0:	d9003615 	stw	r4,216(sp)
    29e4:	048001c4 	movi	r18,7
    29e8:	00000306 	br	29f8 <___vfprintf_internal_r+0x7dc>
    29ec:	843ffc04 	addi	r16,r16,-16
    29f0:	42000204 	addi	r8,r8,8
    29f4:	8c00130e 	bge	r17,r16,2a44 <___vfprintf_internal_r+0x828>
    29f8:	014000b4 	movhi	r5,2
    29fc:	18c00404 	addi	r3,r3,16
    2a00:	10800044 	addi	r2,r2,1
    2a04:	296e1a84 	addi	r5,r5,-18326
    2a08:	41400015 	stw	r5,0(r8)
    2a0c:	44400115 	stw	r17,4(r8)
    2a10:	d8c02015 	stw	r3,128(sp)
    2a14:	d8801f15 	stw	r2,124(sp)
    2a18:	90bff40e 	bge	r18,r2,29ec <__alt_mem_Flash_flash_data+0xf40029ec>
    2a1c:	b009883a 	mov	r4,r22
    2a20:	b80b883a 	mov	r5,r23
    2a24:	d9801e04 	addi	r6,sp,120
    2a28:	00094e40 	call	94e4 <__sprint_r>
    2a2c:	103eef1e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    2a30:	843ffc04 	addi	r16,r16,-16
    2a34:	d8c02017 	ldw	r3,128(sp)
    2a38:	d8801f17 	ldw	r2,124(sp)
    2a3c:	da000404 	addi	r8,sp,16
    2a40:	8c3fed16 	blt	r17,r16,29f8 <__alt_mem_Flash_flash_data+0xf40029f8>
    2a44:	dac03617 	ldw	r11,216(sp)
    2a48:	1c07883a 	add	r3,r3,r16
    2a4c:	10800044 	addi	r2,r2,1
    2a50:	42c00015 	stw	r11,0(r8)
    2a54:	44000115 	stw	r16,4(r8)
    2a58:	d8c02015 	stw	r3,128(sp)
    2a5c:	d8801f15 	stw	r2,124(sp)
    2a60:	010001c4 	movi	r4,7
    2a64:	2080060e 	bge	r4,r2,2a80 <___vfprintf_internal_r+0x864>
    2a68:	b009883a 	mov	r4,r22
    2a6c:	b80b883a 	mov	r5,r23
    2a70:	d9801e04 	addi	r6,sp,120
    2a74:	00094e40 	call	94e4 <__sprint_r>
    2a78:	103edc1e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    2a7c:	d8c02017 	ldw	r3,128(sp)
    2a80:	d8802b17 	ldw	r2,172(sp)
    2a84:	db002e17 	ldw	r12,184(sp)
    2a88:	1300010e 	bge	r2,r12,2a90 <___vfprintf_internal_r+0x874>
    2a8c:	6005883a 	mov	r2,r12
    2a90:	dac02f17 	ldw	r11,188(sp)
    2a94:	5897883a 	add	r11,r11,r2
    2a98:	dac02f15 	stw	r11,188(sp)
    2a9c:	18020c1e 	bne	r3,zero,32d0 <___vfprintf_internal_r+0x10b4>
    2aa0:	d8001f15 	stw	zero,124(sp)
    2aa4:	da000404 	addi	r8,sp,16
    2aa8:	003e1706 	br	2308 <__alt_mem_Flash_flash_data+0xf4002308>
    2aac:	8c400414 	ori	r17,r17,16
    2ab0:	d8c02a15 	stw	r3,168(sp)
    2ab4:	8880080c 	andi	r2,r17,32
    2ab8:	10010126 	beq	r2,zero,2ec0 <___vfprintf_internal_r+0xca4>
    2abc:	db002d17 	ldw	r12,180(sp)
    2ac0:	0005883a 	mov	r2,zero
    2ac4:	64c00017 	ldw	r19,0(r12)
    2ac8:	67000117 	ldw	fp,4(r12)
    2acc:	63000204 	addi	r12,r12,8
    2ad0:	db002d15 	stw	r12,180(sp)
    2ad4:	9f06b03a 	or	r3,r19,fp
    2ad8:	d8002785 	stb	zero,158(sp)
    2adc:	da403215 	stw	r9,200(sp)
    2ae0:	002b883a 	mov	r21,zero
    2ae4:	003f0106 	br	26ec <__alt_mem_Flash_flash_data+0xf40026ec>
    2ae8:	8c400414 	ori	r17,r17,16
    2aec:	d8c02a15 	stw	r3,168(sp)
    2af0:	8880080c 	andi	r2,r17,32
    2af4:	1000e326 	beq	r2,zero,2e84 <___vfprintf_internal_r+0xc68>
    2af8:	dac02d17 	ldw	r11,180(sp)
    2afc:	00800044 	movi	r2,1
    2b00:	5cc00017 	ldw	r19,0(r11)
    2b04:	5f000117 	ldw	fp,4(r11)
    2b08:	5ac00204 	addi	r11,r11,8
    2b0c:	dac02d15 	stw	r11,180(sp)
    2b10:	9f06b03a 	or	r3,r19,fp
    2b14:	003ff006 	br	2ad8 <__alt_mem_Flash_flash_data+0xf4002ad8>
    2b18:	db002d17 	ldw	r12,180(sp)
    2b1c:	dac02d17 	ldw	r11,180(sp)
    2b20:	d8c02a15 	stw	r3,168(sp)
    2b24:	63000017 	ldw	r12,0(r12)
    2b28:	5ac00117 	ldw	r11,4(r11)
    2b2c:	d9802785 	stb	r6,158(sp)
    2b30:	6009883a 	mov	r4,r12
    2b34:	580b883a 	mov	r5,r11
    2b38:	db003715 	stw	r12,220(sp)
    2b3c:	da003f15 	stw	r8,252(sp)
    2b40:	da403e15 	stw	r9,248(sp)
    2b44:	dac03915 	stw	r11,228(sp)
    2b48:	00091400 	call	9140 <__fpclassifyd>
    2b4c:	db002d17 	ldw	r12,180(sp)
    2b50:	04800044 	movi	r18,1
    2b54:	da003f17 	ldw	r8,252(sp)
    2b58:	64c00204 	addi	r19,r12,8
    2b5c:	da403e17 	ldw	r9,248(sp)
    2b60:	d9003717 	ldw	r4,220(sp)
    2b64:	d9403917 	ldw	r5,228(sp)
    2b68:	14832b1e 	bne	r2,r18,3818 <___vfprintf_internal_r+0x15fc>
    2b6c:	000d883a 	mov	r6,zero
    2b70:	000f883a 	mov	r7,zero
    2b74:	000d0ec0 	call	d0ec <__ledf2>
    2b78:	da003f17 	ldw	r8,252(sp)
    2b7c:	1004b716 	blt	r2,zero,3e5c <___vfprintf_internal_r+0x1c40>
    2b80:	dd402783 	ldbu	r21,158(sp)
    2b84:	008011c4 	movi	r2,71
    2b88:	14040e0e 	bge	r2,r16,3bc4 <___vfprintf_internal_r+0x19a8>
    2b8c:	00c000b4 	movhi	r3,2
    2b90:	18ee0704 	addi	r3,r3,-18404
    2b94:	d8c03115 	stw	r3,196(sp)
    2b98:	02c000c4 	movi	r11,3
    2b9c:	00bfdfc4 	movi	r2,-129
    2ba0:	dac02b15 	stw	r11,172(sp)
    2ba4:	88a2703a 	and	r17,r17,r2
    2ba8:	dcc02d15 	stw	r19,180(sp)
    2bac:	5825883a 	mov	r18,r11
    2bb0:	d8003215 	stw	zero,200(sp)
    2bb4:	d8003415 	stw	zero,208(sp)
    2bb8:	003eeb06 	br	2768 <__alt_mem_Flash_flash_data+0xf4002768>
    2bbc:	db002d17 	ldw	r12,180(sp)
    2bc0:	00800c04 	movi	r2,48
    2bc4:	d8802705 	stb	r2,156(sp)
    2bc8:	64c00017 	ldw	r19,0(r12)
    2bcc:	00801e04 	movi	r2,120
    2bd0:	d8802745 	stb	r2,157(sp)
    2bd4:	008000b4 	movhi	r2,2
    2bd8:	10ae0f04 	addi	r2,r2,-18372
    2bdc:	63000104 	addi	r12,r12,4
    2be0:	d8c02a15 	stw	r3,168(sp)
    2be4:	d8803b15 	stw	r2,236(sp)
    2be8:	0039883a 	mov	fp,zero
    2bec:	8c400094 	ori	r17,r17,2
    2bf0:	db002d15 	stw	r12,180(sp)
    2bf4:	00800084 	movi	r2,2
    2bf8:	04001e04 	movi	r16,120
    2bfc:	9807883a 	mov	r3,r19
    2c00:	003fb506 	br	2ad8 <__alt_mem_Flash_flash_data+0xf4002ad8>
    2c04:	8c400214 	ori	r17,r17,8
    2c08:	1805883a 	mov	r2,r3
    2c0c:	1c000007 	ldb	r16,0(r3)
    2c10:	003de706 	br	23b0 <__alt_mem_Flash_flash_data+0xf40023b0>
    2c14:	d8c02a15 	stw	r3,168(sp)
    2c18:	d9802785 	stb	r6,158(sp)
    2c1c:	8880080c 	andi	r2,r17,32
    2c20:	d8c02d17 	ldw	r3,180(sp)
    2c24:	103ea61e 	bne	r2,zero,26c0 <__alt_mem_Flash_flash_data+0xf40026c0>
    2c28:	8880040c 	andi	r2,r17,16
    2c2c:	1002221e 	bne	r2,zero,34b8 <___vfprintf_internal_r+0x129c>
    2c30:	8880100c 	andi	r2,r17,64
    2c34:	10022026 	beq	r2,zero,34b8 <___vfprintf_internal_r+0x129c>
    2c38:	1cc0000f 	ldh	r19,0(r3)
    2c3c:	db002d17 	ldw	r12,180(sp)
    2c40:	9839d7fa 	srai	fp,r19,31
    2c44:	63000104 	addi	r12,r12,4
    2c48:	db002d15 	stw	r12,180(sp)
    2c4c:	e005883a 	mov	r2,fp
    2c50:	003ea106 	br	26d8 <__alt_mem_Flash_flash_data+0xf40026d8>
    2c54:	8c401014 	ori	r17,r17,64
    2c58:	1805883a 	mov	r2,r3
    2c5c:	1c000007 	ldb	r16,0(r3)
    2c60:	003dd306 	br	23b0 <__alt_mem_Flash_flash_data+0xf40023b0>
    2c64:	1c000007 	ldb	r16,0(r3)
    2c68:	81c3e926 	beq	r16,r7,3c10 <___vfprintf_internal_r+0x19f4>
    2c6c:	8c400414 	ori	r17,r17,16
    2c70:	1805883a 	mov	r2,r3
    2c74:	003dce06 	br	23b0 <__alt_mem_Flash_flash_data+0xf40023b0>
    2c78:	d8c02a15 	stw	r3,168(sp)
    2c7c:	d9802785 	stb	r6,158(sp)
    2c80:	8880080c 	andi	r2,r17,32
    2c84:	10034726 	beq	r2,zero,39a4 <___vfprintf_internal_r+0x1788>
    2c88:	db002d17 	ldw	r12,180(sp)
    2c8c:	dac02f17 	ldw	r11,188(sp)
    2c90:	60800017 	ldw	r2,0(r12)
    2c94:	5807d7fa 	srai	r3,r11,31
    2c98:	63000104 	addi	r12,r12,4
    2c9c:	db002d15 	stw	r12,180(sp)
    2ca0:	12c00015 	stw	r11,0(r2)
    2ca4:	10c00115 	stw	r3,4(r2)
    2ca8:	003d9706 	br	2308 <__alt_mem_Flash_flash_data+0xf4002308>
    2cac:	030000b4 	movhi	r12,2
    2cb0:	632e0a04 	addi	r12,r12,-18392
    2cb4:	d8c02a15 	stw	r3,168(sp)
    2cb8:	d9802785 	stb	r6,158(sp)
    2cbc:	db003b15 	stw	r12,236(sp)
    2cc0:	88c0080c 	andi	r3,r17,32
    2cc4:	d8802d17 	ldw	r2,180(sp)
    2cc8:	18005b26 	beq	r3,zero,2e38 <___vfprintf_internal_r+0xc1c>
    2ccc:	dac02d17 	ldw	r11,180(sp)
    2cd0:	14c00017 	ldw	r19,0(r2)
    2cd4:	17000117 	ldw	fp,4(r2)
    2cd8:	5ac00204 	addi	r11,r11,8
    2cdc:	dac02d15 	stw	r11,180(sp)
    2ce0:	8880004c 	andi	r2,r17,1
    2ce4:	10022926 	beq	r2,zero,358c <___vfprintf_internal_r+0x1370>
    2ce8:	9f06b03a 	or	r3,r19,fp
    2cec:	18032b26 	beq	r3,zero,399c <___vfprintf_internal_r+0x1780>
    2cf0:	00800c04 	movi	r2,48
    2cf4:	d8802705 	stb	r2,156(sp)
    2cf8:	dc002745 	stb	r16,157(sp)
    2cfc:	8c400094 	ori	r17,r17,2
    2d00:	00800084 	movi	r2,2
    2d04:	003f7406 	br	2ad8 <__alt_mem_Flash_flash_data+0xf4002ad8>
    2d08:	30803fcc 	andi	r2,r6,255
    2d0c:	1080201c 	xori	r2,r2,128
    2d10:	10bfe004 	addi	r2,r2,-128
    2d14:	1003351e 	bne	r2,zero,39ec <___vfprintf_internal_r+0x17d0>
    2d18:	1805883a 	mov	r2,r3
    2d1c:	01800804 	movi	r6,32
    2d20:	1c000007 	ldb	r16,0(r3)
    2d24:	003da206 	br	23b0 <__alt_mem_Flash_flash_data+0xf40023b0>
    2d28:	dac02d17 	ldw	r11,180(sp)
    2d2c:	db002d17 	ldw	r12,180(sp)
    2d30:	5ac00017 	ldw	r11,0(r11)
    2d34:	dac02e15 	stw	r11,184(sp)
    2d38:	62c00104 	addi	r11,r12,4
    2d3c:	db002e17 	ldw	r12,184(sp)
    2d40:	6003ad16 	blt	r12,zero,3bf8 <___vfprintf_internal_r+0x19dc>
    2d44:	dac02d15 	stw	r11,180(sp)
    2d48:	1805883a 	mov	r2,r3
    2d4c:	1c000007 	ldb	r16,0(r3)
    2d50:	003d9706 	br	23b0 <__alt_mem_Flash_flash_data+0xf40023b0>
    2d54:	1805883a 	mov	r2,r3
    2d58:	01800ac4 	movi	r6,43
    2d5c:	1c000007 	ldb	r16,0(r3)
    2d60:	003d9306 	br	23b0 <__alt_mem_Flash_flash_data+0xf40023b0>
    2d64:	db002d17 	ldw	r12,180(sp)
    2d68:	d8c02a15 	stw	r3,168(sp)
    2d6c:	00c00044 	movi	r3,1
    2d70:	60800017 	ldw	r2,0(r12)
    2d74:	63000104 	addi	r12,r12,4
    2d78:	d8c02b15 	stw	r3,172(sp)
    2d7c:	d8002785 	stb	zero,158(sp)
    2d80:	d8801405 	stb	r2,80(sp)
    2d84:	db002d15 	stw	r12,180(sp)
    2d88:	dac01404 	addi	r11,sp,80
    2d8c:	1825883a 	mov	r18,r3
    2d90:	d8003215 	stw	zero,200(sp)
    2d94:	d8003415 	stw	zero,208(sp)
    2d98:	dac03115 	stw	r11,196(sp)
    2d9c:	0005883a 	mov	r2,zero
    2da0:	003e7806 	br	2784 <__alt_mem_Flash_flash_data+0xf4002784>
    2da4:	dac02d17 	ldw	r11,180(sp)
    2da8:	db002d17 	ldw	r12,180(sp)
    2dac:	d8c02a15 	stw	r3,168(sp)
    2db0:	5ac00017 	ldw	r11,0(r11)
    2db4:	d8002785 	stb	zero,158(sp)
    2db8:	64c00104 	addi	r19,r12,4
    2dbc:	dac03115 	stw	r11,196(sp)
    2dc0:	5803fe26 	beq	r11,zero,3dbc <___vfprintf_internal_r+0x1ba0>
    2dc4:	d9003117 	ldw	r4,196(sp)
    2dc8:	4803b416 	blt	r9,zero,3c9c <___vfprintf_internal_r+0x1a80>
    2dcc:	480d883a 	mov	r6,r9
    2dd0:	000b883a 	mov	r5,zero
    2dd4:	da003f15 	stw	r8,252(sp)
    2dd8:	da403e15 	stw	r9,248(sp)
    2ddc:	00077980 	call	7798 <memchr>
    2de0:	da003f17 	ldw	r8,252(sp)
    2de4:	da403e17 	ldw	r9,248(sp)
    2de8:	10043026 	beq	r2,zero,3eac <___vfprintf_internal_r+0x1c90>
    2dec:	d8c03117 	ldw	r3,196(sp)
    2df0:	10e5c83a 	sub	r18,r2,r3
    2df4:	4c836b16 	blt	r9,r18,3ba4 <___vfprintf_internal_r+0x1988>
    2df8:	9005883a 	mov	r2,r18
    2dfc:	9003ac16 	blt	r18,zero,3cb0 <___vfprintf_internal_r+0x1a94>
    2e00:	dd402783 	ldbu	r21,158(sp)
    2e04:	d8802b15 	stw	r2,172(sp)
    2e08:	dcc02d15 	stw	r19,180(sp)
    2e0c:	d8003215 	stw	zero,200(sp)
    2e10:	d8003415 	stw	zero,208(sp)
    2e14:	003e5406 	br	2768 <__alt_mem_Flash_flash_data+0xf4002768>
    2e18:	008000b4 	movhi	r2,2
    2e1c:	10ae0f04 	addi	r2,r2,-18372
    2e20:	d8c02a15 	stw	r3,168(sp)
    2e24:	d8803b15 	stw	r2,236(sp)
    2e28:	d9802785 	stb	r6,158(sp)
    2e2c:	88c0080c 	andi	r3,r17,32
    2e30:	d8802d17 	ldw	r2,180(sp)
    2e34:	183fa51e 	bne	r3,zero,2ccc <__alt_mem_Flash_flash_data+0xf4002ccc>
    2e38:	88c0040c 	andi	r3,r17,16
    2e3c:	1802ee26 	beq	r3,zero,39f8 <___vfprintf_internal_r+0x17dc>
    2e40:	db002d17 	ldw	r12,180(sp)
    2e44:	14c00017 	ldw	r19,0(r2)
    2e48:	0039883a 	mov	fp,zero
    2e4c:	63000104 	addi	r12,r12,4
    2e50:	db002d15 	stw	r12,180(sp)
    2e54:	003fa206 	br	2ce0 <__alt_mem_Flash_flash_data+0xf4002ce0>
    2e58:	8c400054 	ori	r17,r17,1
    2e5c:	1805883a 	mov	r2,r3
    2e60:	1c000007 	ldb	r16,0(r3)
    2e64:	003d5206 	br	23b0 <__alt_mem_Flash_flash_data+0xf40023b0>
    2e68:	8c400814 	ori	r17,r17,32
    2e6c:	1805883a 	mov	r2,r3
    2e70:	1c000007 	ldb	r16,0(r3)
    2e74:	003d4e06 	br	23b0 <__alt_mem_Flash_flash_data+0xf40023b0>
    2e78:	d8c02a15 	stw	r3,168(sp)
    2e7c:	8880080c 	andi	r2,r17,32
    2e80:	103f1d1e 	bne	r2,zero,2af8 <__alt_mem_Flash_flash_data+0xf4002af8>
    2e84:	8880040c 	andi	r2,r17,16
    2e88:	1001b81e 	bne	r2,zero,356c <___vfprintf_internal_r+0x1350>
    2e8c:	8880100c 	andi	r2,r17,64
    2e90:	1001b626 	beq	r2,zero,356c <___vfprintf_internal_r+0x1350>
    2e94:	dac02d17 	ldw	r11,180(sp)
    2e98:	0039883a 	mov	fp,zero
    2e9c:	00800044 	movi	r2,1
    2ea0:	5cc0000b 	ldhu	r19,0(r11)
    2ea4:	5ac00104 	addi	r11,r11,4
    2ea8:	dac02d15 	stw	r11,180(sp)
    2eac:	9807883a 	mov	r3,r19
    2eb0:	003f0906 	br	2ad8 <__alt_mem_Flash_flash_data+0xf4002ad8>
    2eb4:	d8c02a15 	stw	r3,168(sp)
    2eb8:	8880080c 	andi	r2,r17,32
    2ebc:	103eff1e 	bne	r2,zero,2abc <__alt_mem_Flash_flash_data+0xf4002abc>
    2ec0:	8880040c 	andi	r2,r17,16
    2ec4:	1001a11e 	bne	r2,zero,354c <___vfprintf_internal_r+0x1330>
    2ec8:	8880100c 	andi	r2,r17,64
    2ecc:	10019f26 	beq	r2,zero,354c <___vfprintf_internal_r+0x1330>
    2ed0:	db002d17 	ldw	r12,180(sp)
    2ed4:	0039883a 	mov	fp,zero
    2ed8:	0005883a 	mov	r2,zero
    2edc:	64c0000b 	ldhu	r19,0(r12)
    2ee0:	63000104 	addi	r12,r12,4
    2ee4:	db002d15 	stw	r12,180(sp)
    2ee8:	9807883a 	mov	r3,r19
    2eec:	003efa06 	br	2ad8 <__alt_mem_Flash_flash_data+0xf4002ad8>
    2ef0:	d8c02a15 	stw	r3,168(sp)
    2ef4:	d9802785 	stb	r6,158(sp)
    2ef8:	803db626 	beq	r16,zero,25d4 <__alt_mem_Flash_flash_data+0xf40025d4>
    2efc:	00c00044 	movi	r3,1
    2f00:	d8c02b15 	stw	r3,172(sp)
    2f04:	dc001405 	stb	r16,80(sp)
    2f08:	d8002785 	stb	zero,158(sp)
    2f0c:	003f9e06 	br	2d88 <__alt_mem_Flash_flash_data+0xf4002d88>
    2f10:	d8c02017 	ldw	r3,128(sp)
    2f14:	003e5306 	br	2864 <__alt_mem_Flash_flash_data+0xf4002864>
    2f18:	10803fcc 	andi	r2,r2,255
    2f1c:	00c00044 	movi	r3,1
    2f20:	10fdfa1e 	bne	r2,r3,270c <__alt_mem_Flash_flash_data+0xf400270c>
    2f24:	e000021e 	bne	fp,zero,2f30 <___vfprintf_internal_r+0xd14>
    2f28:	00800244 	movi	r2,9
    2f2c:	14c0202e 	bgeu	r2,r19,2fb0 <___vfprintf_internal_r+0xd94>
    2f30:	dc002b15 	stw	r16,172(sp)
    2f34:	dc402c15 	stw	r17,176(sp)
    2f38:	9821883a 	mov	r16,r19
    2f3c:	e023883a 	mov	r17,fp
    2f40:	dc801e04 	addi	r18,sp,120
    2f44:	4827883a 	mov	r19,r9
    2f48:	4039883a 	mov	fp,r8
    2f4c:	8009883a 	mov	r4,r16
    2f50:	880b883a 	mov	r5,r17
    2f54:	01800284 	movi	r6,10
    2f58:	000f883a 	mov	r7,zero
    2f5c:	000b7640 	call	b764 <__umoddi3>
    2f60:	10800c04 	addi	r2,r2,48
    2f64:	94bfffc4 	addi	r18,r18,-1
    2f68:	8009883a 	mov	r4,r16
    2f6c:	880b883a 	mov	r5,r17
    2f70:	01800284 	movi	r6,10
    2f74:	000f883a 	mov	r7,zero
    2f78:	90800005 	stb	r2,0(r18)
    2f7c:	000b1a40 	call	b1a4 <__udivdi3>
    2f80:	1021883a 	mov	r16,r2
    2f84:	10c4b03a 	or	r2,r2,r3
    2f88:	1823883a 	mov	r17,r3
    2f8c:	103fef1e 	bne	r2,zero,2f4c <__alt_mem_Flash_flash_data+0xf4002f4c>
    2f90:	dac02817 	ldw	r11,160(sp)
    2f94:	dc803115 	stw	r18,196(sp)
    2f98:	dc002b17 	ldw	r16,172(sp)
    2f9c:	dc402c17 	ldw	r17,176(sp)
    2fa0:	9813883a 	mov	r9,r19
    2fa4:	e011883a 	mov	r8,fp
    2fa8:	5ca5c83a 	sub	r18,r11,r18
    2fac:	003de906 	br	2754 <__alt_mem_Flash_flash_data+0xf4002754>
    2fb0:	9cc00c04 	addi	r19,r19,48
    2fb4:	d8c01dc4 	addi	r3,sp,119
    2fb8:	dcc01dc5 	stb	r19,119(sp)
    2fbc:	dc803c17 	ldw	r18,240(sp)
    2fc0:	d8c03115 	stw	r3,196(sp)
    2fc4:	003de306 	br	2754 <__alt_mem_Flash_flash_data+0xf4002754>
    2fc8:	00801944 	movi	r2,101
    2fcc:	1400710e 	bge	r2,r16,3194 <___vfprintf_internal_r+0xf78>
    2fd0:	d9003717 	ldw	r4,220(sp)
    2fd4:	d9403917 	ldw	r5,228(sp)
    2fd8:	000d883a 	mov	r6,zero
    2fdc:	000f883a 	mov	r7,zero
    2fe0:	d8c03d15 	stw	r3,244(sp)
    2fe4:	da003f15 	stw	r8,252(sp)
    2fe8:	000cf880 	call	cf88 <__eqdf2>
    2fec:	d8c03d17 	ldw	r3,244(sp)
    2ff0:	da003f17 	ldw	r8,252(sp)
    2ff4:	1000ef1e 	bne	r2,zero,33b4 <___vfprintf_internal_r+0x1198>
    2ff8:	d8801f17 	ldw	r2,124(sp)
    2ffc:	010000b4 	movhi	r4,2
    3000:	212e1604 	addi	r4,r4,-18344
    3004:	18c00044 	addi	r3,r3,1
    3008:	10800044 	addi	r2,r2,1
    300c:	41000015 	stw	r4,0(r8)
    3010:	01000044 	movi	r4,1
    3014:	41000115 	stw	r4,4(r8)
    3018:	d8c02015 	stw	r3,128(sp)
    301c:	d8801f15 	stw	r2,124(sp)
    3020:	010001c4 	movi	r4,7
    3024:	20828e16 	blt	r4,r2,3a60 <___vfprintf_internal_r+0x1844>
    3028:	42000204 	addi	r8,r8,8
    302c:	d8802617 	ldw	r2,152(sp)
    3030:	dac03317 	ldw	r11,204(sp)
    3034:	12c00216 	blt	r2,r11,3040 <___vfprintf_internal_r+0xe24>
    3038:	8880004c 	andi	r2,r17,1
    303c:	103e5d26 	beq	r2,zero,29b4 <__alt_mem_Flash_flash_data+0xf40029b4>
    3040:	db003817 	ldw	r12,224(sp)
    3044:	d8801f17 	ldw	r2,124(sp)
    3048:	dac03517 	ldw	r11,212(sp)
    304c:	1b07883a 	add	r3,r3,r12
    3050:	10800044 	addi	r2,r2,1
    3054:	42c00015 	stw	r11,0(r8)
    3058:	43000115 	stw	r12,4(r8)
    305c:	d8c02015 	stw	r3,128(sp)
    3060:	d8801f15 	stw	r2,124(sp)
    3064:	010001c4 	movi	r4,7
    3068:	2082ed16 	blt	r4,r2,3c20 <___vfprintf_internal_r+0x1a04>
    306c:	42000204 	addi	r8,r8,8
    3070:	db003317 	ldw	r12,204(sp)
    3074:	643fffc4 	addi	r16,r12,-1
    3078:	043e4e0e 	bge	zero,r16,29b4 <__alt_mem_Flash_flash_data+0xf40029b4>
    307c:	04800404 	movi	r18,16
    3080:	d8801f17 	ldw	r2,124(sp)
    3084:	94007e0e 	bge	r18,r16,3280 <___vfprintf_internal_r+0x1064>
    3088:	014000b4 	movhi	r5,2
    308c:	296e1684 	addi	r5,r5,-18342
    3090:	d9402c15 	stw	r5,176(sp)
    3094:	054001c4 	movi	r21,7
    3098:	00000306 	br	30a8 <___vfprintf_internal_r+0xe8c>
    309c:	42000204 	addi	r8,r8,8
    30a0:	843ffc04 	addi	r16,r16,-16
    30a4:	9400790e 	bge	r18,r16,328c <___vfprintf_internal_r+0x1070>
    30a8:	18c00404 	addi	r3,r3,16
    30ac:	10800044 	addi	r2,r2,1
    30b0:	45000015 	stw	r20,0(r8)
    30b4:	44800115 	stw	r18,4(r8)
    30b8:	d8c02015 	stw	r3,128(sp)
    30bc:	d8801f15 	stw	r2,124(sp)
    30c0:	a8bff60e 	bge	r21,r2,309c <__alt_mem_Flash_flash_data+0xf400309c>
    30c4:	b009883a 	mov	r4,r22
    30c8:	b80b883a 	mov	r5,r23
    30cc:	d9801e04 	addi	r6,sp,120
    30d0:	00094e40 	call	94e4 <__sprint_r>
    30d4:	103d451e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    30d8:	d8c02017 	ldw	r3,128(sp)
    30dc:	d8801f17 	ldw	r2,124(sp)
    30e0:	da000404 	addi	r8,sp,16
    30e4:	003fee06 	br	30a0 <__alt_mem_Flash_flash_data+0xf40030a0>
    30e8:	dac02e17 	ldw	r11,184(sp)
    30ec:	db002b17 	ldw	r12,172(sp)
    30f0:	5b2bc83a 	sub	r21,r11,r12
    30f4:	057df90e 	bge	zero,r21,28dc <__alt_mem_Flash_flash_data+0xf40028dc>
    30f8:	07000404 	movi	fp,16
    30fc:	d8801f17 	ldw	r2,124(sp)
    3100:	e543640e 	bge	fp,r21,3e94 <___vfprintf_internal_r+0x1c78>
    3104:	014000b4 	movhi	r5,2
    3108:	296e1684 	addi	r5,r5,-18342
    310c:	d9402c15 	stw	r5,176(sp)
    3110:	04c001c4 	movi	r19,7
    3114:	00000306 	br	3124 <___vfprintf_internal_r+0xf08>
    3118:	ad7ffc04 	addi	r21,r21,-16
    311c:	42000204 	addi	r8,r8,8
    3120:	e540110e 	bge	fp,r21,3168 <___vfprintf_internal_r+0xf4c>
    3124:	18c00404 	addi	r3,r3,16
    3128:	10800044 	addi	r2,r2,1
    312c:	45000015 	stw	r20,0(r8)
    3130:	47000115 	stw	fp,4(r8)
    3134:	d8c02015 	stw	r3,128(sp)
    3138:	d8801f15 	stw	r2,124(sp)
    313c:	98bff60e 	bge	r19,r2,3118 <__alt_mem_Flash_flash_data+0xf4003118>
    3140:	b009883a 	mov	r4,r22
    3144:	b80b883a 	mov	r5,r23
    3148:	d9801e04 	addi	r6,sp,120
    314c:	00094e40 	call	94e4 <__sprint_r>
    3150:	103d261e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    3154:	ad7ffc04 	addi	r21,r21,-16
    3158:	d8c02017 	ldw	r3,128(sp)
    315c:	d8801f17 	ldw	r2,124(sp)
    3160:	da000404 	addi	r8,sp,16
    3164:	e57fef16 	blt	fp,r21,3124 <__alt_mem_Flash_flash_data+0xf4003124>
    3168:	dac02c17 	ldw	r11,176(sp)
    316c:	1d47883a 	add	r3,r3,r21
    3170:	10800044 	addi	r2,r2,1
    3174:	42c00015 	stw	r11,0(r8)
    3178:	45400115 	stw	r21,4(r8)
    317c:	d8c02015 	stw	r3,128(sp)
    3180:	d8801f15 	stw	r2,124(sp)
    3184:	010001c4 	movi	r4,7
    3188:	20819116 	blt	r4,r2,37d0 <___vfprintf_internal_r+0x15b4>
    318c:	42000204 	addi	r8,r8,8
    3190:	003dd206 	br	28dc <__alt_mem_Flash_flash_data+0xf40028dc>
    3194:	db003317 	ldw	r12,204(sp)
    3198:	00800044 	movi	r2,1
    319c:	18c00044 	addi	r3,r3,1
    31a0:	1301530e 	bge	r2,r12,36f0 <___vfprintf_internal_r+0x14d4>
    31a4:	dc001f17 	ldw	r16,124(sp)
    31a8:	dac03117 	ldw	r11,196(sp)
    31ac:	00800044 	movi	r2,1
    31b0:	84000044 	addi	r16,r16,1
    31b4:	40800115 	stw	r2,4(r8)
    31b8:	42c00015 	stw	r11,0(r8)
    31bc:	d8c02015 	stw	r3,128(sp)
    31c0:	dc001f15 	stw	r16,124(sp)
    31c4:	008001c4 	movi	r2,7
    31c8:	14016b16 	blt	r2,r16,3778 <___vfprintf_internal_r+0x155c>
    31cc:	42000204 	addi	r8,r8,8
    31d0:	db003817 	ldw	r12,224(sp)
    31d4:	dac03517 	ldw	r11,212(sp)
    31d8:	84000044 	addi	r16,r16,1
    31dc:	1b07883a 	add	r3,r3,r12
    31e0:	42c00015 	stw	r11,0(r8)
    31e4:	43000115 	stw	r12,4(r8)
    31e8:	d8c02015 	stw	r3,128(sp)
    31ec:	dc001f15 	stw	r16,124(sp)
    31f0:	008001c4 	movi	r2,7
    31f4:	14016916 	blt	r2,r16,379c <___vfprintf_internal_r+0x1580>
    31f8:	44800204 	addi	r18,r8,8
    31fc:	d9003717 	ldw	r4,220(sp)
    3200:	d9403917 	ldw	r5,228(sp)
    3204:	000d883a 	mov	r6,zero
    3208:	000f883a 	mov	r7,zero
    320c:	d8c03d15 	stw	r3,244(sp)
    3210:	000cf880 	call	cf88 <__eqdf2>
    3214:	d8c03d17 	ldw	r3,244(sp)
    3218:	db003317 	ldw	r12,204(sp)
    321c:	1000ad26 	beq	r2,zero,34d4 <___vfprintf_internal_r+0x12b8>
    3220:	dac03117 	ldw	r11,196(sp)
    3224:	60bfffc4 	addi	r2,r12,-1
    3228:	1887883a 	add	r3,r3,r2
    322c:	59000044 	addi	r4,r11,1
    3230:	84000044 	addi	r16,r16,1
    3234:	90800115 	stw	r2,4(r18)
    3238:	91000015 	stw	r4,0(r18)
    323c:	d8c02015 	stw	r3,128(sp)
    3240:	dc001f15 	stw	r16,124(sp)
    3244:	008001c4 	movi	r2,7
    3248:	14014216 	blt	r2,r16,3754 <___vfprintf_internal_r+0x1538>
    324c:	94800204 	addi	r18,r18,8
    3250:	dac03a17 	ldw	r11,232(sp)
    3254:	dd4022c4 	addi	r21,sp,139
    3258:	84000044 	addi	r16,r16,1
    325c:	1ac7883a 	add	r3,r3,r11
    3260:	95400015 	stw	r21,0(r18)
    3264:	92c00115 	stw	r11,4(r18)
    3268:	d8c02015 	stw	r3,128(sp)
    326c:	dc001f15 	stw	r16,124(sp)
    3270:	008001c4 	movi	r2,7
    3274:	14000e16 	blt	r2,r16,32b0 <___vfprintf_internal_r+0x1094>
    3278:	92000204 	addi	r8,r18,8
    327c:	003dcd06 	br	29b4 <__alt_mem_Flash_flash_data+0xf40029b4>
    3280:	010000b4 	movhi	r4,2
    3284:	212e1684 	addi	r4,r4,-18342
    3288:	d9002c15 	stw	r4,176(sp)
    328c:	dac02c17 	ldw	r11,176(sp)
    3290:	1c07883a 	add	r3,r3,r16
    3294:	44000115 	stw	r16,4(r8)
    3298:	42c00015 	stw	r11,0(r8)
    329c:	10800044 	addi	r2,r2,1
    32a0:	d8c02015 	stw	r3,128(sp)
    32a4:	d8801f15 	stw	r2,124(sp)
    32a8:	010001c4 	movi	r4,7
    32ac:	20bdc00e 	bge	r4,r2,29b0 <__alt_mem_Flash_flash_data+0xf40029b0>
    32b0:	b009883a 	mov	r4,r22
    32b4:	b80b883a 	mov	r5,r23
    32b8:	d9801e04 	addi	r6,sp,120
    32bc:	00094e40 	call	94e4 <__sprint_r>
    32c0:	103cca1e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    32c4:	d8c02017 	ldw	r3,128(sp)
    32c8:	da000404 	addi	r8,sp,16
    32cc:	003db906 	br	29b4 <__alt_mem_Flash_flash_data+0xf40029b4>
    32d0:	b009883a 	mov	r4,r22
    32d4:	b80b883a 	mov	r5,r23
    32d8:	d9801e04 	addi	r6,sp,120
    32dc:	00094e40 	call	94e4 <__sprint_r>
    32e0:	103def26 	beq	r2,zero,2aa0 <__alt_mem_Flash_flash_data+0xf4002aa0>
    32e4:	003cc106 	br	25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    32e8:	10803fcc 	andi	r2,r2,255
    32ec:	1000651e 	bne	r2,zero,3484 <___vfprintf_internal_r+0x1268>
    32f0:	8880004c 	andi	r2,r17,1
    32f4:	10013226 	beq	r2,zero,37c0 <___vfprintf_internal_r+0x15a4>
    32f8:	00800c04 	movi	r2,48
    32fc:	d8c01dc4 	addi	r3,sp,119
    3300:	d8801dc5 	stb	r2,119(sp)
    3304:	dc803c17 	ldw	r18,240(sp)
    3308:	d8c03115 	stw	r3,196(sp)
    330c:	003d1106 	br	2754 <__alt_mem_Flash_flash_data+0xf4002754>
    3310:	b009883a 	mov	r4,r22
    3314:	b80b883a 	mov	r5,r23
    3318:	d9801e04 	addi	r6,sp,120
    331c:	00094e40 	call	94e4 <__sprint_r>
    3320:	103cb21e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    3324:	d8c02017 	ldw	r3,128(sp)
    3328:	da000404 	addi	r8,sp,16
    332c:	003d9406 	br	2980 <__alt_mem_Flash_flash_data+0xf4002980>
    3330:	b009883a 	mov	r4,r22
    3334:	b80b883a 	mov	r5,r23
    3338:	d9801e04 	addi	r6,sp,120
    333c:	00094e40 	call	94e4 <__sprint_r>
    3340:	103caa1e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    3344:	d8c02017 	ldw	r3,128(sp)
    3348:	da000404 	addi	r8,sp,16
    334c:	003d5206 	br	2898 <__alt_mem_Flash_flash_data+0xf4002898>
    3350:	b009883a 	mov	r4,r22
    3354:	b80b883a 	mov	r5,r23
    3358:	d9801e04 	addi	r6,sp,120
    335c:	00094e40 	call	94e4 <__sprint_r>
    3360:	103ca21e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    3364:	d8c02017 	ldw	r3,128(sp)
    3368:	da000404 	addi	r8,sp,16
    336c:	003d5806 	br	28d0 <__alt_mem_Flash_flash_data+0xf40028d0>
    3370:	d9403b17 	ldw	r5,236(sp)
    3374:	d8c01e04 	addi	r3,sp,120
    3378:	988003cc 	andi	r2,r19,15
    337c:	e008973a 	slli	r4,fp,28
    3380:	2885883a 	add	r2,r5,r2
    3384:	9826d13a 	srli	r19,r19,4
    3388:	10800003 	ldbu	r2,0(r2)
    338c:	e038d13a 	srli	fp,fp,4
    3390:	18ffffc4 	addi	r3,r3,-1
    3394:	24e6b03a 	or	r19,r4,r19
    3398:	18800005 	stb	r2,0(r3)
    339c:	9f04b03a 	or	r2,r19,fp
    33a0:	103ff51e 	bne	r2,zero,3378 <__alt_mem_Flash_flash_data+0xf4003378>
    33a4:	db002817 	ldw	r12,160(sp)
    33a8:	d8c03115 	stw	r3,196(sp)
    33ac:	60e5c83a 	sub	r18,r12,r3
    33b0:	003ce806 	br	2754 <__alt_mem_Flash_flash_data+0xf4002754>
    33b4:	dc002617 	ldw	r16,152(sp)
    33b8:	0401b10e 	bge	zero,r16,3a80 <___vfprintf_internal_r+0x1864>
    33bc:	db003117 	ldw	r12,196(sp)
    33c0:	dac03317 	ldw	r11,204(sp)
    33c4:	62e1883a 	add	r16,r12,r11
    33c8:	db003417 	ldw	r12,208(sp)
    33cc:	5825883a 	mov	r18,r11
    33d0:	62c0010e 	bge	r12,r11,33d8 <___vfprintf_internal_r+0x11bc>
    33d4:	6025883a 	mov	r18,r12
    33d8:	04800b0e 	bge	zero,r18,3408 <___vfprintf_internal_r+0x11ec>
    33dc:	d8801f17 	ldw	r2,124(sp)
    33e0:	dac03117 	ldw	r11,196(sp)
    33e4:	1c87883a 	add	r3,r3,r18
    33e8:	10800044 	addi	r2,r2,1
    33ec:	42c00015 	stw	r11,0(r8)
    33f0:	44800115 	stw	r18,4(r8)
    33f4:	d8c02015 	stw	r3,128(sp)
    33f8:	d8801f15 	stw	r2,124(sp)
    33fc:	010001c4 	movi	r4,7
    3400:	20824f16 	blt	r4,r2,3d40 <___vfprintf_internal_r+0x1b24>
    3404:	42000204 	addi	r8,r8,8
    3408:	90024b16 	blt	r18,zero,3d38 <___vfprintf_internal_r+0x1b1c>
    340c:	db003417 	ldw	r12,208(sp)
    3410:	64a5c83a 	sub	r18,r12,r18
    3414:	0480730e 	bge	zero,r18,35e4 <___vfprintf_internal_r+0x13c8>
    3418:	05400404 	movi	r21,16
    341c:	d8801f17 	ldw	r2,124(sp)
    3420:	ac817d0e 	bge	r21,r18,3a18 <___vfprintf_internal_r+0x17fc>
    3424:	014000b4 	movhi	r5,2
    3428:	296e1684 	addi	r5,r5,-18342
    342c:	d9402c15 	stw	r5,176(sp)
    3430:	070001c4 	movi	fp,7
    3434:	00000306 	br	3444 <___vfprintf_internal_r+0x1228>
    3438:	42000204 	addi	r8,r8,8
    343c:	94bffc04 	addi	r18,r18,-16
    3440:	ac81780e 	bge	r21,r18,3a24 <___vfprintf_internal_r+0x1808>
    3444:	18c00404 	addi	r3,r3,16
    3448:	10800044 	addi	r2,r2,1
    344c:	45000015 	stw	r20,0(r8)
    3450:	45400115 	stw	r21,4(r8)
    3454:	d8c02015 	stw	r3,128(sp)
    3458:	d8801f15 	stw	r2,124(sp)
    345c:	e0bff60e 	bge	fp,r2,3438 <__alt_mem_Flash_flash_data+0xf4003438>
    3460:	b009883a 	mov	r4,r22
    3464:	b80b883a 	mov	r5,r23
    3468:	d9801e04 	addi	r6,sp,120
    346c:	00094e40 	call	94e4 <__sprint_r>
    3470:	103c5e1e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    3474:	d8c02017 	ldw	r3,128(sp)
    3478:	d8801f17 	ldw	r2,124(sp)
    347c:	da000404 	addi	r8,sp,16
    3480:	003fee06 	br	343c <__alt_mem_Flash_flash_data+0xf400343c>
    3484:	dac01e04 	addi	r11,sp,120
    3488:	0025883a 	mov	r18,zero
    348c:	dac03115 	stw	r11,196(sp)
    3490:	003cb006 	br	2754 <__alt_mem_Flash_flash_data+0xf4002754>
    3494:	b009883a 	mov	r4,r22
    3498:	b80b883a 	mov	r5,r23
    349c:	d9801e04 	addi	r6,sp,120
    34a0:	00094e40 	call	94e4 <__sprint_r>
    34a4:	103c511e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    34a8:	d8c02017 	ldw	r3,128(sp)
    34ac:	d8802787 	ldb	r2,158(sp)
    34b0:	da000404 	addi	r8,sp,16
    34b4:	003ceb06 	br	2864 <__alt_mem_Flash_flash_data+0xf4002864>
    34b8:	1cc00017 	ldw	r19,0(r3)
    34bc:	dac02d17 	ldw	r11,180(sp)
    34c0:	9839d7fa 	srai	fp,r19,31
    34c4:	5ac00104 	addi	r11,r11,4
    34c8:	dac02d15 	stw	r11,180(sp)
    34cc:	e005883a 	mov	r2,fp
    34d0:	003c8106 	br	26d8 <__alt_mem_Flash_flash_data+0xf40026d8>
    34d4:	657fffc4 	addi	r21,r12,-1
    34d8:	057f5d0e 	bge	zero,r21,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    34dc:	07000404 	movi	fp,16
    34e0:	e540900e 	bge	fp,r21,3724 <___vfprintf_internal_r+0x1508>
    34e4:	010000b4 	movhi	r4,2
    34e8:	212e1684 	addi	r4,r4,-18342
    34ec:	d9002c15 	stw	r4,176(sp)
    34f0:	01c001c4 	movi	r7,7
    34f4:	00000306 	br	3504 <___vfprintf_internal_r+0x12e8>
    34f8:	94800204 	addi	r18,r18,8
    34fc:	ad7ffc04 	addi	r21,r21,-16
    3500:	e5408b0e 	bge	fp,r21,3730 <___vfprintf_internal_r+0x1514>
    3504:	18c00404 	addi	r3,r3,16
    3508:	84000044 	addi	r16,r16,1
    350c:	95000015 	stw	r20,0(r18)
    3510:	97000115 	stw	fp,4(r18)
    3514:	d8c02015 	stw	r3,128(sp)
    3518:	dc001f15 	stw	r16,124(sp)
    351c:	3c3ff60e 	bge	r7,r16,34f8 <__alt_mem_Flash_flash_data+0xf40034f8>
    3520:	b009883a 	mov	r4,r22
    3524:	b80b883a 	mov	r5,r23
    3528:	d9801e04 	addi	r6,sp,120
    352c:	d9c03d15 	stw	r7,244(sp)
    3530:	00094e40 	call	94e4 <__sprint_r>
    3534:	d9c03d17 	ldw	r7,244(sp)
    3538:	103c2c1e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    353c:	d8c02017 	ldw	r3,128(sp)
    3540:	dc001f17 	ldw	r16,124(sp)
    3544:	dc800404 	addi	r18,sp,16
    3548:	003fec06 	br	34fc <__alt_mem_Flash_flash_data+0xf40034fc>
    354c:	dac02d17 	ldw	r11,180(sp)
    3550:	0039883a 	mov	fp,zero
    3554:	0005883a 	mov	r2,zero
    3558:	5cc00017 	ldw	r19,0(r11)
    355c:	5ac00104 	addi	r11,r11,4
    3560:	dac02d15 	stw	r11,180(sp)
    3564:	9807883a 	mov	r3,r19
    3568:	003d5b06 	br	2ad8 <__alt_mem_Flash_flash_data+0xf4002ad8>
    356c:	db002d17 	ldw	r12,180(sp)
    3570:	0039883a 	mov	fp,zero
    3574:	00800044 	movi	r2,1
    3578:	64c00017 	ldw	r19,0(r12)
    357c:	63000104 	addi	r12,r12,4
    3580:	db002d15 	stw	r12,180(sp)
    3584:	9807883a 	mov	r3,r19
    3588:	003d5306 	br	2ad8 <__alt_mem_Flash_flash_data+0xf4002ad8>
    358c:	00800084 	movi	r2,2
    3590:	9f06b03a 	or	r3,r19,fp
    3594:	003d5006 	br	2ad8 <__alt_mem_Flash_flash_data+0xf4002ad8>
    3598:	10803fcc 	andi	r2,r2,255
    359c:	1080201c 	xori	r2,r2,128
    35a0:	10bfe004 	addi	r2,r2,-128
    35a4:	01000c04 	movi	r4,48
    35a8:	1101a526 	beq	r2,r4,3c40 <___vfprintf_internal_r+0x1a24>
    35ac:	dac03117 	ldw	r11,196(sp)
    35b0:	db002817 	ldw	r12,160(sp)
    35b4:	193fffc5 	stb	r4,-1(r3)
    35b8:	5affffc4 	addi	r11,r11,-1
    35bc:	dac03115 	stw	r11,196(sp)
    35c0:	62e5c83a 	sub	r18,r12,r11
    35c4:	003c6306 	br	2754 <__alt_mem_Flash_flash_data+0xf4002754>
    35c8:	b009883a 	mov	r4,r22
    35cc:	b80b883a 	mov	r5,r23
    35d0:	d9801e04 	addi	r6,sp,120
    35d4:	00094e40 	call	94e4 <__sprint_r>
    35d8:	103c041e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    35dc:	d8c02017 	ldw	r3,128(sp)
    35e0:	da000404 	addi	r8,sp,16
    35e4:	db003117 	ldw	r12,196(sp)
    35e8:	dac03417 	ldw	r11,208(sp)
    35ec:	d8802617 	ldw	r2,152(sp)
    35f0:	62e5883a 	add	r18,r12,r11
    35f4:	db003317 	ldw	r12,204(sp)
    35f8:	13000216 	blt	r2,r12,3604 <___vfprintf_internal_r+0x13e8>
    35fc:	8900004c 	andi	r4,r17,1
    3600:	20000c26 	beq	r4,zero,3634 <___vfprintf_internal_r+0x1418>
    3604:	dac03817 	ldw	r11,224(sp)
    3608:	d9001f17 	ldw	r4,124(sp)
    360c:	db003517 	ldw	r12,212(sp)
    3610:	1ac7883a 	add	r3,r3,r11
    3614:	21000044 	addi	r4,r4,1
    3618:	43000015 	stw	r12,0(r8)
    361c:	42c00115 	stw	r11,4(r8)
    3620:	d8c02015 	stw	r3,128(sp)
    3624:	d9001f15 	stw	r4,124(sp)
    3628:	014001c4 	movi	r5,7
    362c:	2901cc16 	blt	r5,r4,3d60 <___vfprintf_internal_r+0x1b44>
    3630:	42000204 	addi	r8,r8,8
    3634:	dac03317 	ldw	r11,204(sp)
    3638:	8489c83a 	sub	r4,r16,r18
    363c:	5885c83a 	sub	r2,r11,r2
    3640:	1021883a 	mov	r16,r2
    3644:	2080010e 	bge	r4,r2,364c <___vfprintf_internal_r+0x1430>
    3648:	2021883a 	mov	r16,r4
    364c:	04000a0e 	bge	zero,r16,3678 <___vfprintf_internal_r+0x145c>
    3650:	d9001f17 	ldw	r4,124(sp)
    3654:	1c07883a 	add	r3,r3,r16
    3658:	44800015 	stw	r18,0(r8)
    365c:	21000044 	addi	r4,r4,1
    3660:	44000115 	stw	r16,4(r8)
    3664:	d8c02015 	stw	r3,128(sp)
    3668:	d9001f15 	stw	r4,124(sp)
    366c:	014001c4 	movi	r5,7
    3670:	2901e316 	blt	r5,r4,3e00 <___vfprintf_internal_r+0x1be4>
    3674:	42000204 	addi	r8,r8,8
    3678:	8001df16 	blt	r16,zero,3df8 <___vfprintf_internal_r+0x1bdc>
    367c:	1421c83a 	sub	r16,r2,r16
    3680:	043ccc0e 	bge	zero,r16,29b4 <__alt_mem_Flash_flash_data+0xf40029b4>
    3684:	04800404 	movi	r18,16
    3688:	d8801f17 	ldw	r2,124(sp)
    368c:	943efc0e 	bge	r18,r16,3280 <__alt_mem_Flash_flash_data+0xf4003280>
    3690:	014000b4 	movhi	r5,2
    3694:	296e1684 	addi	r5,r5,-18342
    3698:	d9402c15 	stw	r5,176(sp)
    369c:	054001c4 	movi	r21,7
    36a0:	00000306 	br	36b0 <___vfprintf_internal_r+0x1494>
    36a4:	42000204 	addi	r8,r8,8
    36a8:	843ffc04 	addi	r16,r16,-16
    36ac:	943ef70e 	bge	r18,r16,328c <__alt_mem_Flash_flash_data+0xf400328c>
    36b0:	18c00404 	addi	r3,r3,16
    36b4:	10800044 	addi	r2,r2,1
    36b8:	45000015 	stw	r20,0(r8)
    36bc:	44800115 	stw	r18,4(r8)
    36c0:	d8c02015 	stw	r3,128(sp)
    36c4:	d8801f15 	stw	r2,124(sp)
    36c8:	a8bff60e 	bge	r21,r2,36a4 <__alt_mem_Flash_flash_data+0xf40036a4>
    36cc:	b009883a 	mov	r4,r22
    36d0:	b80b883a 	mov	r5,r23
    36d4:	d9801e04 	addi	r6,sp,120
    36d8:	00094e40 	call	94e4 <__sprint_r>
    36dc:	103bc31e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    36e0:	d8c02017 	ldw	r3,128(sp)
    36e4:	d8801f17 	ldw	r2,124(sp)
    36e8:	da000404 	addi	r8,sp,16
    36ec:	003fee06 	br	36a8 <__alt_mem_Flash_flash_data+0xf40036a8>
    36f0:	8888703a 	and	r4,r17,r2
    36f4:	203eab1e 	bne	r4,zero,31a4 <__alt_mem_Flash_flash_data+0xf40031a4>
    36f8:	dc001f17 	ldw	r16,124(sp)
    36fc:	db003117 	ldw	r12,196(sp)
    3700:	40800115 	stw	r2,4(r8)
    3704:	84000044 	addi	r16,r16,1
    3708:	43000015 	stw	r12,0(r8)
    370c:	d8c02015 	stw	r3,128(sp)
    3710:	dc001f15 	stw	r16,124(sp)
    3714:	008001c4 	movi	r2,7
    3718:	14000e16 	blt	r2,r16,3754 <___vfprintf_internal_r+0x1538>
    371c:	44800204 	addi	r18,r8,8
    3720:	003ecb06 	br	3250 <__alt_mem_Flash_flash_data+0xf4003250>
    3724:	008000b4 	movhi	r2,2
    3728:	10ae1684 	addi	r2,r2,-18342
    372c:	d8802c15 	stw	r2,176(sp)
    3730:	dac02c17 	ldw	r11,176(sp)
    3734:	1d47883a 	add	r3,r3,r21
    3738:	84000044 	addi	r16,r16,1
    373c:	92c00015 	stw	r11,0(r18)
    3740:	95400115 	stw	r21,4(r18)
    3744:	d8c02015 	stw	r3,128(sp)
    3748:	dc001f15 	stw	r16,124(sp)
    374c:	008001c4 	movi	r2,7
    3750:	143ebe0e 	bge	r2,r16,324c <__alt_mem_Flash_flash_data+0xf400324c>
    3754:	b009883a 	mov	r4,r22
    3758:	b80b883a 	mov	r5,r23
    375c:	d9801e04 	addi	r6,sp,120
    3760:	00094e40 	call	94e4 <__sprint_r>
    3764:	103ba11e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    3768:	d8c02017 	ldw	r3,128(sp)
    376c:	dc001f17 	ldw	r16,124(sp)
    3770:	dc800404 	addi	r18,sp,16
    3774:	003eb606 	br	3250 <__alt_mem_Flash_flash_data+0xf4003250>
    3778:	b009883a 	mov	r4,r22
    377c:	b80b883a 	mov	r5,r23
    3780:	d9801e04 	addi	r6,sp,120
    3784:	00094e40 	call	94e4 <__sprint_r>
    3788:	103b981e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    378c:	d8c02017 	ldw	r3,128(sp)
    3790:	dc001f17 	ldw	r16,124(sp)
    3794:	da000404 	addi	r8,sp,16
    3798:	003e8d06 	br	31d0 <__alt_mem_Flash_flash_data+0xf40031d0>
    379c:	b009883a 	mov	r4,r22
    37a0:	b80b883a 	mov	r5,r23
    37a4:	d9801e04 	addi	r6,sp,120
    37a8:	00094e40 	call	94e4 <__sprint_r>
    37ac:	103b8f1e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    37b0:	d8c02017 	ldw	r3,128(sp)
    37b4:	dc001f17 	ldw	r16,124(sp)
    37b8:	dc800404 	addi	r18,sp,16
    37bc:	003e8f06 	br	31fc <__alt_mem_Flash_flash_data+0xf40031fc>
    37c0:	db001e04 	addi	r12,sp,120
    37c4:	0025883a 	mov	r18,zero
    37c8:	db003115 	stw	r12,196(sp)
    37cc:	003be106 	br	2754 <__alt_mem_Flash_flash_data+0xf4002754>
    37d0:	b009883a 	mov	r4,r22
    37d4:	b80b883a 	mov	r5,r23
    37d8:	d9801e04 	addi	r6,sp,120
    37dc:	00094e40 	call	94e4 <__sprint_r>
    37e0:	103b821e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    37e4:	d8c02017 	ldw	r3,128(sp)
    37e8:	da000404 	addi	r8,sp,16
    37ec:	003c3b06 	br	28dc <__alt_mem_Flash_flash_data+0xf40028dc>
    37f0:	04e7c83a 	sub	r19,zero,r19
    37f4:	9804c03a 	cmpne	r2,r19,zero
    37f8:	0739c83a 	sub	fp,zero,fp
    37fc:	e0b9c83a 	sub	fp,fp,r2
    3800:	05400b44 	movi	r21,45
    3804:	dd402785 	stb	r21,158(sp)
    3808:	da403215 	stw	r9,200(sp)
    380c:	00800044 	movi	r2,1
    3810:	9f06b03a 	or	r3,r19,fp
    3814:	003bb506 	br	26ec <__alt_mem_Flash_flash_data+0xf40026ec>
    3818:	da003f15 	stw	r8,252(sp)
    381c:	da403e15 	stw	r9,248(sp)
    3820:	00091400 	call	9140 <__fpclassifyd>
    3824:	da003f17 	ldw	r8,252(sp)
    3828:	da403e17 	ldw	r9,248(sp)
    382c:	1000ce26 	beq	r2,zero,3b68 <___vfprintf_internal_r+0x194c>
    3830:	057ff7c4 	movi	r21,-33
    3834:	00bfffc4 	movi	r2,-1
    3838:	856a703a 	and	r21,r16,r21
    383c:	4881e826 	beq	r9,r2,3fe0 <___vfprintf_internal_r+0x1dc4>
    3840:	008011c4 	movi	r2,71
    3844:	a881e326 	beq	r21,r2,3fd4 <___vfprintf_internal_r+0x1db8>
    3848:	db003917 	ldw	r12,228(sp)
    384c:	8ac04014 	ori	r11,r17,256
    3850:	dac02d15 	stw	r11,180(sp)
    3854:	6001ed16 	blt	r12,zero,400c <___vfprintf_internal_r+0x1df0>
    3858:	dc803917 	ldw	r18,228(sp)
    385c:	d8002b05 	stb	zero,172(sp)
    3860:	00801984 	movi	r2,102
    3864:	80811826 	beq	r16,r2,3cc8 <___vfprintf_internal_r+0x1aac>
    3868:	00801184 	movi	r2,70
    386c:	80811626 	beq	r16,r2,3cc8 <___vfprintf_internal_r+0x1aac>
    3870:	00801144 	movi	r2,69
    3874:	a881e926 	beq	r21,r2,401c <___vfprintf_internal_r+0x1e00>
    3878:	4839883a 	mov	fp,r9
    387c:	d8802604 	addi	r2,sp,152
    3880:	d8800115 	stw	r2,4(sp)
    3884:	d9403717 	ldw	r5,220(sp)
    3888:	d8802504 	addi	r2,sp,148
    388c:	d8800215 	stw	r2,8(sp)
    3890:	d8802104 	addi	r2,sp,132
    3894:	df000015 	stw	fp,0(sp)
    3898:	d8800315 	stw	r2,12(sp)
    389c:	b009883a 	mov	r4,r22
    38a0:	900d883a 	mov	r6,r18
    38a4:	01c00084 	movi	r7,2
    38a8:	da003f15 	stw	r8,252(sp)
    38ac:	da403e15 	stw	r9,248(sp)
    38b0:	00045a00 	call	45a0 <_dtoa_r>
    38b4:	d8803115 	stw	r2,196(sp)
    38b8:	008019c4 	movi	r2,103
    38bc:	da003f17 	ldw	r8,252(sp)
    38c0:	da403e17 	ldw	r9,248(sp)
    38c4:	80800226 	beq	r16,r2,38d0 <___vfprintf_internal_r+0x16b4>
    38c8:	008011c4 	movi	r2,71
    38cc:	8081101e 	bne	r16,r2,3d10 <___vfprintf_internal_r+0x1af4>
    38d0:	8880004c 	andi	r2,r17,1
    38d4:	1001dd26 	beq	r2,zero,404c <___vfprintf_internal_r+0x1e30>
    38d8:	db003117 	ldw	r12,196(sp)
    38dc:	6715883a 	add	r10,r12,fp
    38e0:	d9003717 	ldw	r4,220(sp)
    38e4:	900b883a 	mov	r5,r18
    38e8:	000d883a 	mov	r6,zero
    38ec:	000f883a 	mov	r7,zero
    38f0:	da003f15 	stw	r8,252(sp)
    38f4:	da403e15 	stw	r9,248(sp)
    38f8:	da803d15 	stw	r10,244(sp)
    38fc:	000cf880 	call	cf88 <__eqdf2>
    3900:	da003f17 	ldw	r8,252(sp)
    3904:	da403e17 	ldw	r9,248(sp)
    3908:	da803d17 	ldw	r10,244(sp)
    390c:	10016526 	beq	r2,zero,3ea4 <___vfprintf_internal_r+0x1c88>
    3910:	d8802117 	ldw	r2,132(sp)
    3914:	1280062e 	bgeu	r2,r10,3930 <___vfprintf_internal_r+0x1714>
    3918:	01000c04 	movi	r4,48
    391c:	10c00044 	addi	r3,r2,1
    3920:	d8c02115 	stw	r3,132(sp)
    3924:	11000005 	stb	r4,0(r2)
    3928:	d8802117 	ldw	r2,132(sp)
    392c:	12bffb36 	bltu	r2,r10,391c <__alt_mem_Flash_flash_data+0xf400391c>
    3930:	db003117 	ldw	r12,196(sp)
    3934:	1305c83a 	sub	r2,r2,r12
    3938:	d8803315 	stw	r2,204(sp)
    393c:	008011c4 	movi	r2,71
    3940:	a8814d26 	beq	r21,r2,3e78 <___vfprintf_internal_r+0x1c5c>
    3944:	00801944 	movi	r2,101
    3948:	1402060e 	bge	r2,r16,4164 <___vfprintf_internal_r+0x1f48>
    394c:	00801984 	movi	r2,102
    3950:	8081b426 	beq	r16,r2,4024 <___vfprintf_internal_r+0x1e08>
    3954:	db002617 	ldw	r12,152(sp)
    3958:	db003415 	stw	r12,208(sp)
    395c:	db003417 	ldw	r12,208(sp)
    3960:	dac03317 	ldw	r11,204(sp)
    3964:	62c1a016 	blt	r12,r11,3fe8 <___vfprintf_internal_r+0x1dcc>
    3968:	8c40004c 	andi	r17,r17,1
    396c:	8801bf1e 	bne	r17,zero,406c <___vfprintf_internal_r+0x1e50>
    3970:	6005883a 	mov	r2,r12
    3974:	6001b316 	blt	r12,zero,4044 <___vfprintf_internal_r+0x1e28>
    3978:	dc803417 	ldw	r18,208(sp)
    397c:	df002b07 	ldb	fp,172(sp)
    3980:	e0012e1e 	bne	fp,zero,3e3c <___vfprintf_internal_r+0x1c20>
    3984:	dc402d17 	ldw	r17,180(sp)
    3988:	dd402783 	ldbu	r21,158(sp)
    398c:	d8802b15 	stw	r2,172(sp)
    3990:	dcc02d15 	stw	r19,180(sp)
    3994:	d8003215 	stw	zero,200(sp)
    3998:	003b7306 	br	2768 <__alt_mem_Flash_flash_data+0xf4002768>
    399c:	00800084 	movi	r2,2
    39a0:	003c4d06 	br	2ad8 <__alt_mem_Flash_flash_data+0xf4002ad8>
    39a4:	8880040c 	andi	r2,r17,16
    39a8:	1000091e 	bne	r2,zero,39d0 <___vfprintf_internal_r+0x17b4>
    39ac:	8c40100c 	andi	r17,r17,64
    39b0:	88000726 	beq	r17,zero,39d0 <___vfprintf_internal_r+0x17b4>
    39b4:	db002d17 	ldw	r12,180(sp)
    39b8:	dac02f17 	ldw	r11,188(sp)
    39bc:	60800017 	ldw	r2,0(r12)
    39c0:	63000104 	addi	r12,r12,4
    39c4:	db002d15 	stw	r12,180(sp)
    39c8:	12c0000d 	sth	r11,0(r2)
    39cc:	003a4e06 	br	2308 <__alt_mem_Flash_flash_data+0xf4002308>
    39d0:	db002d17 	ldw	r12,180(sp)
    39d4:	dac02f17 	ldw	r11,188(sp)
    39d8:	60800017 	ldw	r2,0(r12)
    39dc:	63000104 	addi	r12,r12,4
    39e0:	db002d15 	stw	r12,180(sp)
    39e4:	12c00015 	stw	r11,0(r2)
    39e8:	003a4706 	br	2308 <__alt_mem_Flash_flash_data+0xf4002308>
    39ec:	1c000007 	ldb	r16,0(r3)
    39f0:	1805883a 	mov	r2,r3
    39f4:	003a6e06 	br	23b0 <__alt_mem_Flash_flash_data+0xf40023b0>
    39f8:	88c0100c 	andi	r3,r17,64
    39fc:	18006b26 	beq	r3,zero,3bac <___vfprintf_internal_r+0x1990>
    3a00:	dac02d17 	ldw	r11,180(sp)
    3a04:	14c0000b 	ldhu	r19,0(r2)
    3a08:	0039883a 	mov	fp,zero
    3a0c:	5ac00104 	addi	r11,r11,4
    3a10:	dac02d15 	stw	r11,180(sp)
    3a14:	003cb206 	br	2ce0 <__alt_mem_Flash_flash_data+0xf4002ce0>
    3a18:	010000b4 	movhi	r4,2
    3a1c:	212e1684 	addi	r4,r4,-18342
    3a20:	d9002c15 	stw	r4,176(sp)
    3a24:	dac02c17 	ldw	r11,176(sp)
    3a28:	1c87883a 	add	r3,r3,r18
    3a2c:	10800044 	addi	r2,r2,1
    3a30:	42c00015 	stw	r11,0(r8)
    3a34:	44800115 	stw	r18,4(r8)
    3a38:	d8c02015 	stw	r3,128(sp)
    3a3c:	d8801f15 	stw	r2,124(sp)
    3a40:	010001c4 	movi	r4,7
    3a44:	20bee016 	blt	r4,r2,35c8 <__alt_mem_Flash_flash_data+0xf40035c8>
    3a48:	42000204 	addi	r8,r8,8
    3a4c:	003ee506 	br	35e4 <__alt_mem_Flash_flash_data+0xf40035e4>
    3a50:	010000b4 	movhi	r4,2
    3a54:	212e1684 	addi	r4,r4,-18342
    3a58:	d9002c15 	stw	r4,176(sp)
    3a5c:	003bbe06 	br	2958 <__alt_mem_Flash_flash_data+0xf4002958>
    3a60:	b009883a 	mov	r4,r22
    3a64:	b80b883a 	mov	r5,r23
    3a68:	d9801e04 	addi	r6,sp,120
    3a6c:	00094e40 	call	94e4 <__sprint_r>
    3a70:	103ade1e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    3a74:	d8c02017 	ldw	r3,128(sp)
    3a78:	da000404 	addi	r8,sp,16
    3a7c:	003d6b06 	br	302c <__alt_mem_Flash_flash_data+0xf400302c>
    3a80:	d8801f17 	ldw	r2,124(sp)
    3a84:	030000b4 	movhi	r12,2
    3a88:	01000044 	movi	r4,1
    3a8c:	18c00044 	addi	r3,r3,1
    3a90:	10800044 	addi	r2,r2,1
    3a94:	632e1604 	addi	r12,r12,-18344
    3a98:	41000115 	stw	r4,4(r8)
    3a9c:	43000015 	stw	r12,0(r8)
    3aa0:	d8c02015 	stw	r3,128(sp)
    3aa4:	d8801f15 	stw	r2,124(sp)
    3aa8:	010001c4 	movi	r4,7
    3aac:	20804916 	blt	r4,r2,3bd4 <___vfprintf_internal_r+0x19b8>
    3ab0:	42000204 	addi	r8,r8,8
    3ab4:	8000041e 	bne	r16,zero,3ac8 <___vfprintf_internal_r+0x18ac>
    3ab8:	dac03317 	ldw	r11,204(sp)
    3abc:	5800021e 	bne	r11,zero,3ac8 <___vfprintf_internal_r+0x18ac>
    3ac0:	8880004c 	andi	r2,r17,1
    3ac4:	103bbb26 	beq	r2,zero,29b4 <__alt_mem_Flash_flash_data+0xf40029b4>
    3ac8:	db003817 	ldw	r12,224(sp)
    3acc:	d8801f17 	ldw	r2,124(sp)
    3ad0:	dac03517 	ldw	r11,212(sp)
    3ad4:	1b07883a 	add	r3,r3,r12
    3ad8:	10800044 	addi	r2,r2,1
    3adc:	42c00015 	stw	r11,0(r8)
    3ae0:	43000115 	stw	r12,4(r8)
    3ae4:	d8c02015 	stw	r3,128(sp)
    3ae8:	d8801f15 	stw	r2,124(sp)
    3aec:	010001c4 	movi	r4,7
    3af0:	20812e16 	blt	r4,r2,3fac <___vfprintf_internal_r+0x1d90>
    3af4:	42000204 	addi	r8,r8,8
    3af8:	0421c83a 	sub	r16,zero,r16
    3afc:	04005c0e 	bge	zero,r16,3c70 <___vfprintf_internal_r+0x1a54>
    3b00:	04800404 	movi	r18,16
    3b04:	94009f0e 	bge	r18,r16,3d84 <___vfprintf_internal_r+0x1b68>
    3b08:	010000b4 	movhi	r4,2
    3b0c:	212e1684 	addi	r4,r4,-18342
    3b10:	d9002c15 	stw	r4,176(sp)
    3b14:	054001c4 	movi	r21,7
    3b18:	00000306 	br	3b28 <___vfprintf_internal_r+0x190c>
    3b1c:	42000204 	addi	r8,r8,8
    3b20:	843ffc04 	addi	r16,r16,-16
    3b24:	94009a0e 	bge	r18,r16,3d90 <___vfprintf_internal_r+0x1b74>
    3b28:	18c00404 	addi	r3,r3,16
    3b2c:	10800044 	addi	r2,r2,1
    3b30:	45000015 	stw	r20,0(r8)
    3b34:	44800115 	stw	r18,4(r8)
    3b38:	d8c02015 	stw	r3,128(sp)
    3b3c:	d8801f15 	stw	r2,124(sp)
    3b40:	a8bff60e 	bge	r21,r2,3b1c <__alt_mem_Flash_flash_data+0xf4003b1c>
    3b44:	b009883a 	mov	r4,r22
    3b48:	b80b883a 	mov	r5,r23
    3b4c:	d9801e04 	addi	r6,sp,120
    3b50:	00094e40 	call	94e4 <__sprint_r>
    3b54:	103aa51e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    3b58:	d8c02017 	ldw	r3,128(sp)
    3b5c:	d8801f17 	ldw	r2,124(sp)
    3b60:	da000404 	addi	r8,sp,16
    3b64:	003fee06 	br	3b20 <__alt_mem_Flash_flash_data+0xf4003b20>
    3b68:	008011c4 	movi	r2,71
    3b6c:	1400be16 	blt	r2,r16,3e68 <___vfprintf_internal_r+0x1c4c>
    3b70:	030000b4 	movhi	r12,2
    3b74:	632e0804 	addi	r12,r12,-18400
    3b78:	db003115 	stw	r12,196(sp)
    3b7c:	00c000c4 	movi	r3,3
    3b80:	00bfdfc4 	movi	r2,-129
    3b84:	d8c02b15 	stw	r3,172(sp)
    3b88:	88a2703a 	and	r17,r17,r2
    3b8c:	dd402783 	ldbu	r21,158(sp)
    3b90:	dcc02d15 	stw	r19,180(sp)
    3b94:	1825883a 	mov	r18,r3
    3b98:	d8003215 	stw	zero,200(sp)
    3b9c:	d8003415 	stw	zero,208(sp)
    3ba0:	003af106 	br	2768 <__alt_mem_Flash_flash_data+0xf4002768>
    3ba4:	4825883a 	mov	r18,r9
    3ba8:	003c9306 	br	2df8 <__alt_mem_Flash_flash_data+0xf4002df8>
    3bac:	db002d17 	ldw	r12,180(sp)
    3bb0:	14c00017 	ldw	r19,0(r2)
    3bb4:	0039883a 	mov	fp,zero
    3bb8:	63000104 	addi	r12,r12,4
    3bbc:	db002d15 	stw	r12,180(sp)
    3bc0:	003c4706 	br	2ce0 <__alt_mem_Flash_flash_data+0xf4002ce0>
    3bc4:	008000b4 	movhi	r2,2
    3bc8:	10ae0604 	addi	r2,r2,-18408
    3bcc:	d8803115 	stw	r2,196(sp)
    3bd0:	003bf106 	br	2b98 <__alt_mem_Flash_flash_data+0xf4002b98>
    3bd4:	b009883a 	mov	r4,r22
    3bd8:	b80b883a 	mov	r5,r23
    3bdc:	d9801e04 	addi	r6,sp,120
    3be0:	00094e40 	call	94e4 <__sprint_r>
    3be4:	103a811e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    3be8:	dc002617 	ldw	r16,152(sp)
    3bec:	d8c02017 	ldw	r3,128(sp)
    3bf0:	da000404 	addi	r8,sp,16
    3bf4:	003faf06 	br	3ab4 <__alt_mem_Flash_flash_data+0xf4003ab4>
    3bf8:	db002e17 	ldw	r12,184(sp)
    3bfc:	1805883a 	mov	r2,r3
    3c00:	dac02d15 	stw	r11,180(sp)
    3c04:	0319c83a 	sub	r12,zero,r12
    3c08:	db002e15 	stw	r12,184(sp)
    3c0c:	003a8206 	br	2618 <__alt_mem_Flash_flash_data+0xf4002618>
    3c10:	18800044 	addi	r2,r3,1
    3c14:	8c400814 	ori	r17,r17,32
    3c18:	1c000047 	ldb	r16,1(r3)
    3c1c:	0039e406 	br	23b0 <__alt_mem_Flash_flash_data+0xf40023b0>
    3c20:	b009883a 	mov	r4,r22
    3c24:	b80b883a 	mov	r5,r23
    3c28:	d9801e04 	addi	r6,sp,120
    3c2c:	00094e40 	call	94e4 <__sprint_r>
    3c30:	103a6e1e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    3c34:	d8c02017 	ldw	r3,128(sp)
    3c38:	da000404 	addi	r8,sp,16
    3c3c:	003d0c06 	br	3070 <__alt_mem_Flash_flash_data+0xf4003070>
    3c40:	db002817 	ldw	r12,160(sp)
    3c44:	d8c03117 	ldw	r3,196(sp)
    3c48:	60e5c83a 	sub	r18,r12,r3
    3c4c:	003ac106 	br	2754 <__alt_mem_Flash_flash_data+0xf4002754>
    3c50:	b009883a 	mov	r4,r22
    3c54:	b80b883a 	mov	r5,r23
    3c58:	d9801e04 	addi	r6,sp,120
    3c5c:	00094e40 	call	94e4 <__sprint_r>
    3c60:	103a621e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    3c64:	d8c02017 	ldw	r3,128(sp)
    3c68:	d8801f17 	ldw	r2,124(sp)
    3c6c:	da000404 	addi	r8,sp,16
    3c70:	db003317 	ldw	r12,204(sp)
    3c74:	dac03117 	ldw	r11,196(sp)
    3c78:	10800044 	addi	r2,r2,1
    3c7c:	1b07883a 	add	r3,r3,r12
    3c80:	42c00015 	stw	r11,0(r8)
    3c84:	43000115 	stw	r12,4(r8)
    3c88:	d8c02015 	stw	r3,128(sp)
    3c8c:	d8801f15 	stw	r2,124(sp)
    3c90:	010001c4 	movi	r4,7
    3c94:	20bb460e 	bge	r4,r2,29b0 <__alt_mem_Flash_flash_data+0xf40029b0>
    3c98:	003d8506 	br	32b0 <__alt_mem_Flash_flash_data+0xf40032b0>
    3c9c:	da003f15 	stw	r8,252(sp)
    3ca0:	00021840 	call	2184 <strlen>
    3ca4:	1025883a 	mov	r18,r2
    3ca8:	da003f17 	ldw	r8,252(sp)
    3cac:	903c540e 	bge	r18,zero,2e00 <__alt_mem_Flash_flash_data+0xf4002e00>
    3cb0:	0005883a 	mov	r2,zero
    3cb4:	003c5206 	br	2e00 <__alt_mem_Flash_flash_data+0xf4002e00>
    3cb8:	010000b4 	movhi	r4,2
    3cbc:	212e1a84 	addi	r4,r4,-18326
    3cc0:	d9003615 	stw	r4,216(sp)
    3cc4:	003adc06 	br	2838 <__alt_mem_Flash_flash_data+0xf4002838>
    3cc8:	d8802604 	addi	r2,sp,152
    3ccc:	d8800115 	stw	r2,4(sp)
    3cd0:	d9403717 	ldw	r5,220(sp)
    3cd4:	d8802504 	addi	r2,sp,148
    3cd8:	d8800215 	stw	r2,8(sp)
    3cdc:	d8802104 	addi	r2,sp,132
    3ce0:	da400015 	stw	r9,0(sp)
    3ce4:	d8800315 	stw	r2,12(sp)
    3ce8:	b009883a 	mov	r4,r22
    3cec:	900d883a 	mov	r6,r18
    3cf0:	01c000c4 	movi	r7,3
    3cf4:	da003f15 	stw	r8,252(sp)
    3cf8:	da403e15 	stw	r9,248(sp)
    3cfc:	00045a00 	call	45a0 <_dtoa_r>
    3d00:	da403e17 	ldw	r9,248(sp)
    3d04:	da003f17 	ldw	r8,252(sp)
    3d08:	d8803115 	stw	r2,196(sp)
    3d0c:	4839883a 	mov	fp,r9
    3d10:	dac03117 	ldw	r11,196(sp)
    3d14:	00801184 	movi	r2,70
    3d18:	5f15883a 	add	r10,r11,fp
    3d1c:	a8bef01e 	bne	r21,r2,38e0 <__alt_mem_Flash_flash_data+0xf40038e0>
    3d20:	59000007 	ldb	r4,0(r11)
    3d24:	00800c04 	movi	r2,48
    3d28:	2080d526 	beq	r4,r2,4080 <___vfprintf_internal_r+0x1e64>
    3d2c:	d8c02617 	ldw	r3,152(sp)
    3d30:	50d5883a 	add	r10,r10,r3
    3d34:	003eea06 	br	38e0 <__alt_mem_Flash_flash_data+0xf40038e0>
    3d38:	0025883a 	mov	r18,zero
    3d3c:	003db306 	br	340c <__alt_mem_Flash_flash_data+0xf400340c>
    3d40:	b009883a 	mov	r4,r22
    3d44:	b80b883a 	mov	r5,r23
    3d48:	d9801e04 	addi	r6,sp,120
    3d4c:	00094e40 	call	94e4 <__sprint_r>
    3d50:	103a261e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    3d54:	d8c02017 	ldw	r3,128(sp)
    3d58:	da000404 	addi	r8,sp,16
    3d5c:	003daa06 	br	3408 <__alt_mem_Flash_flash_data+0xf4003408>
    3d60:	b009883a 	mov	r4,r22
    3d64:	b80b883a 	mov	r5,r23
    3d68:	d9801e04 	addi	r6,sp,120
    3d6c:	00094e40 	call	94e4 <__sprint_r>
    3d70:	103a1e1e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    3d74:	d8802617 	ldw	r2,152(sp)
    3d78:	d8c02017 	ldw	r3,128(sp)
    3d7c:	da000404 	addi	r8,sp,16
    3d80:	003e2c06 	br	3634 <__alt_mem_Flash_flash_data+0xf4003634>
    3d84:	030000b4 	movhi	r12,2
    3d88:	632e1684 	addi	r12,r12,-18342
    3d8c:	db002c15 	stw	r12,176(sp)
    3d90:	dac02c17 	ldw	r11,176(sp)
    3d94:	1c07883a 	add	r3,r3,r16
    3d98:	10800044 	addi	r2,r2,1
    3d9c:	42c00015 	stw	r11,0(r8)
    3da0:	44000115 	stw	r16,4(r8)
    3da4:	d8c02015 	stw	r3,128(sp)
    3da8:	d8801f15 	stw	r2,124(sp)
    3dac:	010001c4 	movi	r4,7
    3db0:	20bfa716 	blt	r4,r2,3c50 <__alt_mem_Flash_flash_data+0xf4003c50>
    3db4:	42000204 	addi	r8,r8,8
    3db8:	003fad06 	br	3c70 <__alt_mem_Flash_flash_data+0xf4003c70>
    3dbc:	00800184 	movi	r2,6
    3dc0:	1240012e 	bgeu	r2,r9,3dc8 <___vfprintf_internal_r+0x1bac>
    3dc4:	1013883a 	mov	r9,r2
    3dc8:	4825883a 	mov	r18,r9
    3dcc:	4805883a 	mov	r2,r9
    3dd0:	4800c216 	blt	r9,zero,40dc <___vfprintf_internal_r+0x1ec0>
    3dd4:	d8802b15 	stw	r2,172(sp)
    3dd8:	008000b4 	movhi	r2,2
    3ddc:	10ae1404 	addi	r2,r2,-18352
    3de0:	d8803115 	stw	r2,196(sp)
    3de4:	dcc02d15 	stw	r19,180(sp)
    3de8:	d8003215 	stw	zero,200(sp)
    3dec:	d8003415 	stw	zero,208(sp)
    3df0:	0005883a 	mov	r2,zero
    3df4:	003a6306 	br	2784 <__alt_mem_Flash_flash_data+0xf4002784>
    3df8:	0021883a 	mov	r16,zero
    3dfc:	003e1f06 	br	367c <__alt_mem_Flash_flash_data+0xf400367c>
    3e00:	b009883a 	mov	r4,r22
    3e04:	b80b883a 	mov	r5,r23
    3e08:	d9801e04 	addi	r6,sp,120
    3e0c:	00094e40 	call	94e4 <__sprint_r>
    3e10:	1039f61e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    3e14:	d8802617 	ldw	r2,152(sp)
    3e18:	db003317 	ldw	r12,204(sp)
    3e1c:	d8c02017 	ldw	r3,128(sp)
    3e20:	da000404 	addi	r8,sp,16
    3e24:	6085c83a 	sub	r2,r12,r2
    3e28:	003e1306 	br	3678 <__alt_mem_Flash_flash_data+0xf4003678>
    3e2c:	030000b4 	movhi	r12,2
    3e30:	632e1a84 	addi	r12,r12,-18326
    3e34:	db003615 	stw	r12,216(sp)
    3e38:	003b0206 	br	2a44 <__alt_mem_Flash_flash_data+0xf4002a44>
    3e3c:	00c00b44 	movi	r3,45
    3e40:	d8802b15 	stw	r2,172(sp)
    3e44:	dc402d17 	ldw	r17,180(sp)
    3e48:	d8c02785 	stb	r3,158(sp)
    3e4c:	dcc02d15 	stw	r19,180(sp)
    3e50:	d8003215 	stw	zero,200(sp)
    3e54:	00800b44 	movi	r2,45
    3e58:	003a4706 	br	2778 <__alt_mem_Flash_flash_data+0xf4002778>
    3e5c:	05400b44 	movi	r21,45
    3e60:	dd402785 	stb	r21,158(sp)
    3e64:	003b4706 	br	2b84 <__alt_mem_Flash_flash_data+0xf4002b84>
    3e68:	008000b4 	movhi	r2,2
    3e6c:	10ae0904 	addi	r2,r2,-18396
    3e70:	d8803115 	stw	r2,196(sp)
    3e74:	003f4106 	br	3b7c <__alt_mem_Flash_flash_data+0xf4003b7c>
    3e78:	d8c02617 	ldw	r3,152(sp)
    3e7c:	00bfff44 	movi	r2,-3
    3e80:	18801116 	blt	r3,r2,3ec8 <___vfprintf_internal_r+0x1cac>
    3e84:	48c01016 	blt	r9,r3,3ec8 <___vfprintf_internal_r+0x1cac>
    3e88:	d8c03415 	stw	r3,208(sp)
    3e8c:	040019c4 	movi	r16,103
    3e90:	003eb206 	br	395c <__alt_mem_Flash_flash_data+0xf400395c>
    3e94:	010000b4 	movhi	r4,2
    3e98:	212e1684 	addi	r4,r4,-18342
    3e9c:	d9002c15 	stw	r4,176(sp)
    3ea0:	003cb106 	br	3168 <__alt_mem_Flash_flash_data+0xf4003168>
    3ea4:	5005883a 	mov	r2,r10
    3ea8:	003ea106 	br	3930 <__alt_mem_Flash_flash_data+0xf4003930>
    3eac:	da402b15 	stw	r9,172(sp)
    3eb0:	dd402783 	ldbu	r21,158(sp)
    3eb4:	4825883a 	mov	r18,r9
    3eb8:	dcc02d15 	stw	r19,180(sp)
    3ebc:	d8003215 	stw	zero,200(sp)
    3ec0:	d8003415 	stw	zero,208(sp)
    3ec4:	003a2806 	br	2768 <__alt_mem_Flash_flash_data+0xf4002768>
    3ec8:	843fff84 	addi	r16,r16,-2
    3ecc:	1f3fffc4 	addi	fp,r3,-1
    3ed0:	df002615 	stw	fp,152(sp)
    3ed4:	dc0022c5 	stb	r16,139(sp)
    3ed8:	e0009816 	blt	fp,zero,413c <___vfprintf_internal_r+0x1f20>
    3edc:	00800ac4 	movi	r2,43
    3ee0:	d8802305 	stb	r2,140(sp)
    3ee4:	00800244 	movi	r2,9
    3ee8:	1700750e 	bge	r2,fp,40c0 <___vfprintf_internal_r+0x1ea4>
    3eec:	dd4022c4 	addi	r21,sp,139
    3ef0:	dc002c15 	stw	r16,176(sp)
    3ef4:	4025883a 	mov	r18,r8
    3ef8:	a821883a 	mov	r16,r21
    3efc:	e009883a 	mov	r4,fp
    3f00:	01400284 	movi	r5,10
    3f04:	000bdb40 	call	bdb4 <__modsi3>
    3f08:	10800c04 	addi	r2,r2,48
    3f0c:	843fffc4 	addi	r16,r16,-1
    3f10:	e009883a 	mov	r4,fp
    3f14:	01400284 	movi	r5,10
    3f18:	80800005 	stb	r2,0(r16)
    3f1c:	000bd600 	call	bd60 <__divsi3>
    3f20:	1039883a 	mov	fp,r2
    3f24:	00800244 	movi	r2,9
    3f28:	173ff416 	blt	r2,fp,3efc <__alt_mem_Flash_flash_data+0xf4003efc>
    3f2c:	9011883a 	mov	r8,r18
    3f30:	e0800c04 	addi	r2,fp,48
    3f34:	8025883a 	mov	r18,r16
    3f38:	913fffc4 	addi	r4,r18,-1
    3f3c:	90bfffc5 	stb	r2,-1(r18)
    3f40:	dc002c17 	ldw	r16,176(sp)
    3f44:	2540852e 	bgeu	r4,r21,415c <___vfprintf_internal_r+0x1f40>
    3f48:	d9402384 	addi	r5,sp,142
    3f4c:	2c8bc83a 	sub	r5,r5,r18
    3f50:	d8c02344 	addi	r3,sp,141
    3f54:	a94b883a 	add	r5,r21,r5
    3f58:	00000106 	br	3f60 <___vfprintf_internal_r+0x1d44>
    3f5c:	20800003 	ldbu	r2,0(r4)
    3f60:	18800005 	stb	r2,0(r3)
    3f64:	18c00044 	addi	r3,r3,1
    3f68:	21000044 	addi	r4,r4,1
    3f6c:	197ffb1e 	bne	r3,r5,3f5c <__alt_mem_Flash_flash_data+0xf4003f5c>
    3f70:	d8802304 	addi	r2,sp,140
    3f74:	1485c83a 	sub	r2,r2,r18
    3f78:	d8c02344 	addi	r3,sp,141
    3f7c:	1885883a 	add	r2,r3,r2
    3f80:	dac03317 	ldw	r11,204(sp)
    3f84:	156bc83a 	sub	r21,r2,r21
    3f88:	dd403a15 	stw	r21,232(sp)
    3f8c:	00800044 	movi	r2,1
    3f90:	5d65883a 	add	r18,r11,r21
    3f94:	12c0660e 	bge	r2,r11,4130 <___vfprintf_internal_r+0x1f14>
    3f98:	94800044 	addi	r18,r18,1
    3f9c:	9005883a 	mov	r2,r18
    3fa0:	90006116 	blt	r18,zero,4128 <___vfprintf_internal_r+0x1f0c>
    3fa4:	d8003415 	stw	zero,208(sp)
    3fa8:	003e7406 	br	397c <__alt_mem_Flash_flash_data+0xf400397c>
    3fac:	b009883a 	mov	r4,r22
    3fb0:	b80b883a 	mov	r5,r23
    3fb4:	d9801e04 	addi	r6,sp,120
    3fb8:	00094e40 	call	94e4 <__sprint_r>
    3fbc:	10398b1e 	bne	r2,zero,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    3fc0:	dc002617 	ldw	r16,152(sp)
    3fc4:	d8c02017 	ldw	r3,128(sp)
    3fc8:	d8801f17 	ldw	r2,124(sp)
    3fcc:	da000404 	addi	r8,sp,16
    3fd0:	003ec906 	br	3af8 <__alt_mem_Flash_flash_data+0xf4003af8>
    3fd4:	483e1c1e 	bne	r9,zero,3848 <__alt_mem_Flash_flash_data+0xf4003848>
    3fd8:	9013883a 	mov	r9,r18
    3fdc:	003e1a06 	br	3848 <__alt_mem_Flash_flash_data+0xf4003848>
    3fe0:	02400184 	movi	r9,6
    3fe4:	003e1806 	br	3848 <__alt_mem_Flash_flash_data+0xf4003848>
    3fe8:	d8c03417 	ldw	r3,208(sp)
    3fec:	00c04b0e 	bge	zero,r3,411c <___vfprintf_internal_r+0x1f00>
    3ff0:	04800044 	movi	r18,1
    3ff4:	dac03317 	ldw	r11,204(sp)
    3ff8:	92e5883a 	add	r18,r18,r11
    3ffc:	9005883a 	mov	r2,r18
    4000:	903e5e0e 	bge	r18,zero,397c <__alt_mem_Flash_flash_data+0xf400397c>
    4004:	0005883a 	mov	r2,zero
    4008:	003e5c06 	br	397c <__alt_mem_Flash_flash_data+0xf400397c>
    400c:	00c00b44 	movi	r3,45
    4010:	64a0003c 	xorhi	r18,r12,32768
    4014:	d8c02b05 	stb	r3,172(sp)
    4018:	003e1106 	br	3860 <__alt_mem_Flash_flash_data+0xf4003860>
    401c:	4f000044 	addi	fp,r9,1
    4020:	003e1606 	br	387c <__alt_mem_Flash_flash_data+0xf400387c>
    4024:	d8c02617 	ldw	r3,152(sp)
    4028:	d8c03415 	stw	r3,208(sp)
    402c:	00c0350e 	bge	zero,r3,4104 <___vfprintf_internal_r+0x1ee8>
    4030:	4800081e 	bne	r9,zero,4054 <___vfprintf_internal_r+0x1e38>
    4034:	8c40004c 	andi	r17,r17,1
    4038:	8800061e 	bne	r17,zero,4054 <___vfprintf_internal_r+0x1e38>
    403c:	1805883a 	mov	r2,r3
    4040:	183e4d0e 	bge	r3,zero,3978 <__alt_mem_Flash_flash_data+0xf4003978>
    4044:	0005883a 	mov	r2,zero
    4048:	003e4b06 	br	3978 <__alt_mem_Flash_flash_data+0xf4003978>
    404c:	d8802117 	ldw	r2,132(sp)
    4050:	003e3706 	br	3930 <__alt_mem_Flash_flash_data+0xf4003930>
    4054:	dac03417 	ldw	r11,208(sp)
    4058:	4a400044 	addi	r9,r9,1
    405c:	5a65883a 	add	r18,r11,r9
    4060:	9005883a 	mov	r2,r18
    4064:	903e450e 	bge	r18,zero,397c <__alt_mem_Flash_flash_data+0xf400397c>
    4068:	003fe606 	br	4004 <__alt_mem_Flash_flash_data+0xf4004004>
    406c:	db003417 	ldw	r12,208(sp)
    4070:	64800044 	addi	r18,r12,1
    4074:	9005883a 	mov	r2,r18
    4078:	903e400e 	bge	r18,zero,397c <__alt_mem_Flash_flash_data+0xf400397c>
    407c:	003fe106 	br	4004 <__alt_mem_Flash_flash_data+0xf4004004>
    4080:	d9003717 	ldw	r4,220(sp)
    4084:	900b883a 	mov	r5,r18
    4088:	000d883a 	mov	r6,zero
    408c:	000f883a 	mov	r7,zero
    4090:	da003f15 	stw	r8,252(sp)
    4094:	da403e15 	stw	r9,248(sp)
    4098:	da803d15 	stw	r10,244(sp)
    409c:	000cf880 	call	cf88 <__eqdf2>
    40a0:	da003f17 	ldw	r8,252(sp)
    40a4:	da403e17 	ldw	r9,248(sp)
    40a8:	da803d17 	ldw	r10,244(sp)
    40ac:	103f1f26 	beq	r2,zero,3d2c <__alt_mem_Flash_flash_data+0xf4003d2c>
    40b0:	00800044 	movi	r2,1
    40b4:	1707c83a 	sub	r3,r2,fp
    40b8:	d8c02615 	stw	r3,152(sp)
    40bc:	003f1c06 	br	3d30 <__alt_mem_Flash_flash_data+0xf4003d30>
    40c0:	00800c04 	movi	r2,48
    40c4:	e0c00c04 	addi	r3,fp,48
    40c8:	d8802345 	stb	r2,141(sp)
    40cc:	d8c02385 	stb	r3,142(sp)
    40d0:	d88023c4 	addi	r2,sp,143
    40d4:	dd4022c4 	addi	r21,sp,139
    40d8:	003fa906 	br	3f80 <__alt_mem_Flash_flash_data+0xf4003f80>
    40dc:	0005883a 	mov	r2,zero
    40e0:	003f3c06 	br	3dd4 <__alt_mem_Flash_flash_data+0xf4003dd4>
    40e4:	dac02d17 	ldw	r11,180(sp)
    40e8:	5a400017 	ldw	r9,0(r11)
    40ec:	5ac00104 	addi	r11,r11,4
    40f0:	dac02d15 	stw	r11,180(sp)
    40f4:	483ec80e 	bge	r9,zero,3c18 <__alt_mem_Flash_flash_data+0xf4003c18>
    40f8:	027fffc4 	movi	r9,-1
    40fc:	1c000047 	ldb	r16,1(r3)
    4100:	0038ab06 	br	23b0 <__alt_mem_Flash_flash_data+0xf40023b0>
    4104:	4800111e 	bne	r9,zero,414c <___vfprintf_internal_r+0x1f30>
    4108:	8c40004c 	andi	r17,r17,1
    410c:	88000f1e 	bne	r17,zero,414c <___vfprintf_internal_r+0x1f30>
    4110:	00800044 	movi	r2,1
    4114:	1025883a 	mov	r18,r2
    4118:	003e1806 	br	397c <__alt_mem_Flash_flash_data+0xf400397c>
    411c:	04800084 	movi	r18,2
    4120:	90e5c83a 	sub	r18,r18,r3
    4124:	003fb306 	br	3ff4 <__alt_mem_Flash_flash_data+0xf4003ff4>
    4128:	0005883a 	mov	r2,zero
    412c:	003f9d06 	br	3fa4 <__alt_mem_Flash_flash_data+0xf4003fa4>
    4130:	88a2703a 	and	r17,r17,r2
    4134:	883f9926 	beq	r17,zero,3f9c <__alt_mem_Flash_flash_data+0xf4003f9c>
    4138:	003f9706 	br	3f98 <__alt_mem_Flash_flash_data+0xf4003f98>
    413c:	00800b44 	movi	r2,45
    4140:	0739c83a 	sub	fp,zero,fp
    4144:	d8802305 	stb	r2,140(sp)
    4148:	003f6606 	br	3ee4 <__alt_mem_Flash_flash_data+0xf4003ee4>
    414c:	4c800084 	addi	r18,r9,2
    4150:	9005883a 	mov	r2,r18
    4154:	903e090e 	bge	r18,zero,397c <__alt_mem_Flash_flash_data+0xf400397c>
    4158:	003faa06 	br	4004 <__alt_mem_Flash_flash_data+0xf4004004>
    415c:	d8802344 	addi	r2,sp,141
    4160:	003f8706 	br	3f80 <__alt_mem_Flash_flash_data+0xf4003f80>
    4164:	d8c02617 	ldw	r3,152(sp)
    4168:	003f5806 	br	3ecc <__alt_mem_Flash_flash_data+0xf4003ecc>

0000416c <__vfprintf_internal>:
    416c:	2007883a 	mov	r3,r4
    4170:	010000b4 	movhi	r4,2
    4174:	21370f04 	addi	r4,r4,-9156
    4178:	21000017 	ldw	r4,0(r4)
    417c:	2805883a 	mov	r2,r5
    4180:	300f883a 	mov	r7,r6
    4184:	180b883a 	mov	r5,r3
    4188:	100d883a 	mov	r6,r2
    418c:	000221c1 	jmpi	221c <___vfprintf_internal_r>

00004190 <__sbprintf>:
    4190:	2880030b 	ldhu	r2,12(r5)
    4194:	2ac01917 	ldw	r11,100(r5)
    4198:	2a80038b 	ldhu	r10,14(r5)
    419c:	2a400717 	ldw	r9,28(r5)
    41a0:	2a000917 	ldw	r8,36(r5)
    41a4:	defee204 	addi	sp,sp,-1144
    41a8:	00c10004 	movi	r3,1024
    41ac:	dc011a15 	stw	r16,1128(sp)
    41b0:	10bfff4c 	andi	r2,r2,65533
    41b4:	2821883a 	mov	r16,r5
    41b8:	d8cb883a 	add	r5,sp,r3
    41bc:	dc811c15 	stw	r18,1136(sp)
    41c0:	dc411b15 	stw	r17,1132(sp)
    41c4:	dfc11d15 	stw	ra,1140(sp)
    41c8:	2025883a 	mov	r18,r4
    41cc:	d881030d 	sth	r2,1036(sp)
    41d0:	dac11915 	stw	r11,1124(sp)
    41d4:	da81038d 	sth	r10,1038(sp)
    41d8:	da410715 	stw	r9,1052(sp)
    41dc:	da010915 	stw	r8,1060(sp)
    41e0:	dec10015 	stw	sp,1024(sp)
    41e4:	dec10415 	stw	sp,1040(sp)
    41e8:	d8c10215 	stw	r3,1032(sp)
    41ec:	d8c10515 	stw	r3,1044(sp)
    41f0:	d8010615 	stw	zero,1048(sp)
    41f4:	000221c0 	call	221c <___vfprintf_internal_r>
    41f8:	1023883a 	mov	r17,r2
    41fc:	10000416 	blt	r2,zero,4210 <__sbprintf+0x80>
    4200:	9009883a 	mov	r4,r18
    4204:	d9410004 	addi	r5,sp,1024
    4208:	0005ed00 	call	5ed0 <_fflush_r>
    420c:	10000d1e 	bne	r2,zero,4244 <__sbprintf+0xb4>
    4210:	d8c1030b 	ldhu	r3,1036(sp)
    4214:	18c0100c 	andi	r3,r3,64
    4218:	18000326 	beq	r3,zero,4228 <__sbprintf+0x98>
    421c:	8080030b 	ldhu	r2,12(r16)
    4220:	10801014 	ori	r2,r2,64
    4224:	8080030d 	sth	r2,12(r16)
    4228:	8805883a 	mov	r2,r17
    422c:	dfc11d17 	ldw	ra,1140(sp)
    4230:	dc811c17 	ldw	r18,1136(sp)
    4234:	dc411b17 	ldw	r17,1132(sp)
    4238:	dc011a17 	ldw	r16,1128(sp)
    423c:	dec11e04 	addi	sp,sp,1144
    4240:	f800283a 	ret
    4244:	047fffc4 	movi	r17,-1
    4248:	003ff106 	br	4210 <__alt_mem_Flash_flash_data+0xf4004210>

0000424c <__swsetup_r>:
    424c:	008000b4 	movhi	r2,2
    4250:	defffd04 	addi	sp,sp,-12
    4254:	10b70f04 	addi	r2,r2,-9156
    4258:	dc400115 	stw	r17,4(sp)
    425c:	2023883a 	mov	r17,r4
    4260:	11000017 	ldw	r4,0(r2)
    4264:	dc000015 	stw	r16,0(sp)
    4268:	dfc00215 	stw	ra,8(sp)
    426c:	2821883a 	mov	r16,r5
    4270:	20000226 	beq	r4,zero,427c <__swsetup_r+0x30>
    4274:	20c00e17 	ldw	r3,56(r4)
    4278:	18003126 	beq	r3,zero,4340 <__swsetup_r+0xf4>
    427c:	8080030b 	ldhu	r2,12(r16)
    4280:	10c0020c 	andi	r3,r2,8
    4284:	100d883a 	mov	r6,r2
    4288:	18000f26 	beq	r3,zero,42c8 <__swsetup_r+0x7c>
    428c:	80c00417 	ldw	r3,16(r16)
    4290:	18001526 	beq	r3,zero,42e8 <__swsetup_r+0x9c>
    4294:	1100004c 	andi	r4,r2,1
    4298:	20001c1e 	bne	r4,zero,430c <__swsetup_r+0xc0>
    429c:	1080008c 	andi	r2,r2,2
    42a0:	1000291e 	bne	r2,zero,4348 <__swsetup_r+0xfc>
    42a4:	80800517 	ldw	r2,20(r16)
    42a8:	80800215 	stw	r2,8(r16)
    42ac:	18001c26 	beq	r3,zero,4320 <__swsetup_r+0xd4>
    42b0:	0005883a 	mov	r2,zero
    42b4:	dfc00217 	ldw	ra,8(sp)
    42b8:	dc400117 	ldw	r17,4(sp)
    42bc:	dc000017 	ldw	r16,0(sp)
    42c0:	dec00304 	addi	sp,sp,12
    42c4:	f800283a 	ret
    42c8:	3080040c 	andi	r2,r6,16
    42cc:	10002e26 	beq	r2,zero,4388 <__swsetup_r+0x13c>
    42d0:	3080010c 	andi	r2,r6,4
    42d4:	10001e1e 	bne	r2,zero,4350 <__swsetup_r+0x104>
    42d8:	80c00417 	ldw	r3,16(r16)
    42dc:	30800214 	ori	r2,r6,8
    42e0:	8080030d 	sth	r2,12(r16)
    42e4:	183feb1e 	bne	r3,zero,4294 <__alt_mem_Flash_flash_data+0xf4004294>
    42e8:	1140a00c 	andi	r5,r2,640
    42ec:	01008004 	movi	r4,512
    42f0:	293fe826 	beq	r5,r4,4294 <__alt_mem_Flash_flash_data+0xf4004294>
    42f4:	8809883a 	mov	r4,r17
    42f8:	800b883a 	mov	r5,r16
    42fc:	0006e380 	call	6e38 <__smakebuf_r>
    4300:	8080030b 	ldhu	r2,12(r16)
    4304:	80c00417 	ldw	r3,16(r16)
    4308:	003fe206 	br	4294 <__alt_mem_Flash_flash_data+0xf4004294>
    430c:	80800517 	ldw	r2,20(r16)
    4310:	80000215 	stw	zero,8(r16)
    4314:	0085c83a 	sub	r2,zero,r2
    4318:	80800615 	stw	r2,24(r16)
    431c:	183fe41e 	bne	r3,zero,42b0 <__alt_mem_Flash_flash_data+0xf40042b0>
    4320:	80c0030b 	ldhu	r3,12(r16)
    4324:	0005883a 	mov	r2,zero
    4328:	1900200c 	andi	r4,r3,128
    432c:	203fe126 	beq	r4,zero,42b4 <__alt_mem_Flash_flash_data+0xf40042b4>
    4330:	18c01014 	ori	r3,r3,64
    4334:	80c0030d 	sth	r3,12(r16)
    4338:	00bfffc4 	movi	r2,-1
    433c:	003fdd06 	br	42b4 <__alt_mem_Flash_flash_data+0xf40042b4>
    4340:	00062ac0 	call	62ac <__sinit>
    4344:	003fcd06 	br	427c <__alt_mem_Flash_flash_data+0xf400427c>
    4348:	0005883a 	mov	r2,zero
    434c:	003fd606 	br	42a8 <__alt_mem_Flash_flash_data+0xf40042a8>
    4350:	81400c17 	ldw	r5,48(r16)
    4354:	28000626 	beq	r5,zero,4370 <__swsetup_r+0x124>
    4358:	80801004 	addi	r2,r16,64
    435c:	28800326 	beq	r5,r2,436c <__swsetup_r+0x120>
    4360:	8809883a 	mov	r4,r17
    4364:	00064200 	call	6420 <_free_r>
    4368:	8180030b 	ldhu	r6,12(r16)
    436c:	80000c15 	stw	zero,48(r16)
    4370:	80c00417 	ldw	r3,16(r16)
    4374:	00bff6c4 	movi	r2,-37
    4378:	118c703a 	and	r6,r2,r6
    437c:	80000115 	stw	zero,4(r16)
    4380:	80c00015 	stw	r3,0(r16)
    4384:	003fd506 	br	42dc <__alt_mem_Flash_flash_data+0xf40042dc>
    4388:	00800244 	movi	r2,9
    438c:	88800015 	stw	r2,0(r17)
    4390:	30801014 	ori	r2,r6,64
    4394:	8080030d 	sth	r2,12(r16)
    4398:	00bfffc4 	movi	r2,-1
    439c:	003fc506 	br	42b4 <__alt_mem_Flash_flash_data+0xf40042b4>

000043a0 <quorem>:
    43a0:	defff704 	addi	sp,sp,-36
    43a4:	dc800215 	stw	r18,8(sp)
    43a8:	20800417 	ldw	r2,16(r4)
    43ac:	2c800417 	ldw	r18,16(r5)
    43b0:	dfc00815 	stw	ra,32(sp)
    43b4:	ddc00715 	stw	r23,28(sp)
    43b8:	dd800615 	stw	r22,24(sp)
    43bc:	dd400515 	stw	r21,20(sp)
    43c0:	dd000415 	stw	r20,16(sp)
    43c4:	dcc00315 	stw	r19,12(sp)
    43c8:	dc400115 	stw	r17,4(sp)
    43cc:	dc000015 	stw	r16,0(sp)
    43d0:	14807116 	blt	r2,r18,4598 <quorem+0x1f8>
    43d4:	94bfffc4 	addi	r18,r18,-1
    43d8:	94ad883a 	add	r22,r18,r18
    43dc:	b5ad883a 	add	r22,r22,r22
    43e0:	2c400504 	addi	r17,r5,20
    43e4:	8da9883a 	add	r20,r17,r22
    43e8:	25400504 	addi	r21,r4,20
    43ec:	282f883a 	mov	r23,r5
    43f0:	adad883a 	add	r22,r21,r22
    43f4:	a1400017 	ldw	r5,0(r20)
    43f8:	2021883a 	mov	r16,r4
    43fc:	b1000017 	ldw	r4,0(r22)
    4400:	29400044 	addi	r5,r5,1
    4404:	000be100 	call	be10 <__udivsi3>
    4408:	1027883a 	mov	r19,r2
    440c:	10002c26 	beq	r2,zero,44c0 <quorem+0x120>
    4410:	a813883a 	mov	r9,r21
    4414:	8811883a 	mov	r8,r17
    4418:	0009883a 	mov	r4,zero
    441c:	000d883a 	mov	r6,zero
    4420:	41c00017 	ldw	r7,0(r8)
    4424:	49400017 	ldw	r5,0(r9)
    4428:	42000104 	addi	r8,r8,4
    442c:	38bfffcc 	andi	r2,r7,65535
    4430:	14c5383a 	mul	r2,r2,r19
    4434:	380ed43a 	srli	r7,r7,16
    4438:	28ffffcc 	andi	r3,r5,65535
    443c:	2085883a 	add	r2,r4,r2
    4440:	1008d43a 	srli	r4,r2,16
    4444:	3ccf383a 	mul	r7,r7,r19
    4448:	198d883a 	add	r6,r3,r6
    444c:	10ffffcc 	andi	r3,r2,65535
    4450:	30c7c83a 	sub	r3,r6,r3
    4454:	280ad43a 	srli	r5,r5,16
    4458:	21c9883a 	add	r4,r4,r7
    445c:	180dd43a 	srai	r6,r3,16
    4460:	20bfffcc 	andi	r2,r4,65535
    4464:	288bc83a 	sub	r5,r5,r2
    4468:	298b883a 	add	r5,r5,r6
    446c:	280e943a 	slli	r7,r5,16
    4470:	18ffffcc 	andi	r3,r3,65535
    4474:	2008d43a 	srli	r4,r4,16
    4478:	38ceb03a 	or	r7,r7,r3
    447c:	49c00015 	stw	r7,0(r9)
    4480:	280dd43a 	srai	r6,r5,16
    4484:	4a400104 	addi	r9,r9,4
    4488:	a23fe52e 	bgeu	r20,r8,4420 <__alt_mem_Flash_flash_data+0xf4004420>
    448c:	b0800017 	ldw	r2,0(r22)
    4490:	10000b1e 	bne	r2,zero,44c0 <quorem+0x120>
    4494:	b0bfff04 	addi	r2,r22,-4
    4498:	a880082e 	bgeu	r21,r2,44bc <quorem+0x11c>
    449c:	b0ffff17 	ldw	r3,-4(r22)
    44a0:	18000326 	beq	r3,zero,44b0 <quorem+0x110>
    44a4:	00000506 	br	44bc <quorem+0x11c>
    44a8:	10c00017 	ldw	r3,0(r2)
    44ac:	1800031e 	bne	r3,zero,44bc <quorem+0x11c>
    44b0:	10bfff04 	addi	r2,r2,-4
    44b4:	94bfffc4 	addi	r18,r18,-1
    44b8:	a8bffb36 	bltu	r21,r2,44a8 <__alt_mem_Flash_flash_data+0xf40044a8>
    44bc:	84800415 	stw	r18,16(r16)
    44c0:	8009883a 	mov	r4,r16
    44c4:	b80b883a 	mov	r5,r23
    44c8:	000850c0 	call	850c <__mcmp>
    44cc:	10002616 	blt	r2,zero,4568 <quorem+0x1c8>
    44d0:	9cc00044 	addi	r19,r19,1
    44d4:	a80d883a 	mov	r6,r21
    44d8:	000b883a 	mov	r5,zero
    44dc:	31000017 	ldw	r4,0(r6)
    44e0:	88800017 	ldw	r2,0(r17)
    44e4:	31800104 	addi	r6,r6,4
    44e8:	20ffffcc 	andi	r3,r4,65535
    44ec:	194b883a 	add	r5,r3,r5
    44f0:	10ffffcc 	andi	r3,r2,65535
    44f4:	28c7c83a 	sub	r3,r5,r3
    44f8:	1004d43a 	srli	r2,r2,16
    44fc:	2008d43a 	srli	r4,r4,16
    4500:	180bd43a 	srai	r5,r3,16
    4504:	18ffffcc 	andi	r3,r3,65535
    4508:	2089c83a 	sub	r4,r4,r2
    450c:	2149883a 	add	r4,r4,r5
    4510:	2004943a 	slli	r2,r4,16
    4514:	8c400104 	addi	r17,r17,4
    4518:	200bd43a 	srai	r5,r4,16
    451c:	10c6b03a 	or	r3,r2,r3
    4520:	30ffff15 	stw	r3,-4(r6)
    4524:	a47fed2e 	bgeu	r20,r17,44dc <__alt_mem_Flash_flash_data+0xf40044dc>
    4528:	9485883a 	add	r2,r18,r18
    452c:	1085883a 	add	r2,r2,r2
    4530:	a887883a 	add	r3,r21,r2
    4534:	18800017 	ldw	r2,0(r3)
    4538:	10000b1e 	bne	r2,zero,4568 <quorem+0x1c8>
    453c:	18bfff04 	addi	r2,r3,-4
    4540:	a880082e 	bgeu	r21,r2,4564 <quorem+0x1c4>
    4544:	18ffff17 	ldw	r3,-4(r3)
    4548:	18000326 	beq	r3,zero,4558 <quorem+0x1b8>
    454c:	00000506 	br	4564 <quorem+0x1c4>
    4550:	10c00017 	ldw	r3,0(r2)
    4554:	1800031e 	bne	r3,zero,4564 <quorem+0x1c4>
    4558:	10bfff04 	addi	r2,r2,-4
    455c:	94bfffc4 	addi	r18,r18,-1
    4560:	a8bffb36 	bltu	r21,r2,4550 <__alt_mem_Flash_flash_data+0xf4004550>
    4564:	84800415 	stw	r18,16(r16)
    4568:	9805883a 	mov	r2,r19
    456c:	dfc00817 	ldw	ra,32(sp)
    4570:	ddc00717 	ldw	r23,28(sp)
    4574:	dd800617 	ldw	r22,24(sp)
    4578:	dd400517 	ldw	r21,20(sp)
    457c:	dd000417 	ldw	r20,16(sp)
    4580:	dcc00317 	ldw	r19,12(sp)
    4584:	dc800217 	ldw	r18,8(sp)
    4588:	dc400117 	ldw	r17,4(sp)
    458c:	dc000017 	ldw	r16,0(sp)
    4590:	dec00904 	addi	sp,sp,36
    4594:	f800283a 	ret
    4598:	0005883a 	mov	r2,zero
    459c:	003ff306 	br	456c <__alt_mem_Flash_flash_data+0xf400456c>

000045a0 <_dtoa_r>:
    45a0:	20801017 	ldw	r2,64(r4)
    45a4:	deffde04 	addi	sp,sp,-136
    45a8:	dd401d15 	stw	r21,116(sp)
    45ac:	dcc01b15 	stw	r19,108(sp)
    45b0:	dc801a15 	stw	r18,104(sp)
    45b4:	dc401915 	stw	r17,100(sp)
    45b8:	dc001815 	stw	r16,96(sp)
    45bc:	dfc02115 	stw	ra,132(sp)
    45c0:	df002015 	stw	fp,128(sp)
    45c4:	ddc01f15 	stw	r23,124(sp)
    45c8:	dd801e15 	stw	r22,120(sp)
    45cc:	dd001c15 	stw	r20,112(sp)
    45d0:	d9c00315 	stw	r7,12(sp)
    45d4:	2021883a 	mov	r16,r4
    45d8:	302b883a 	mov	r21,r6
    45dc:	2825883a 	mov	r18,r5
    45e0:	dc402417 	ldw	r17,144(sp)
    45e4:	3027883a 	mov	r19,r6
    45e8:	10000826 	beq	r2,zero,460c <_dtoa_r+0x6c>
    45ec:	21801117 	ldw	r6,68(r4)
    45f0:	00c00044 	movi	r3,1
    45f4:	100b883a 	mov	r5,r2
    45f8:	1986983a 	sll	r3,r3,r6
    45fc:	11800115 	stw	r6,4(r2)
    4600:	10c00215 	stw	r3,8(r2)
    4604:	0007ce00 	call	7ce0 <_Bfree>
    4608:	80001015 	stw	zero,64(r16)
    460c:	a8002d16 	blt	r21,zero,46c4 <_dtoa_r+0x124>
    4610:	88000015 	stw	zero,0(r17)
    4614:	a8dffc2c 	andhi	r3,r21,32752
    4618:	009ffc34 	movhi	r2,32752
    461c:	18801b26 	beq	r3,r2,468c <_dtoa_r+0xec>
    4620:	9009883a 	mov	r4,r18
    4624:	980b883a 	mov	r5,r19
    4628:	000d883a 	mov	r6,zero
    462c:	000f883a 	mov	r7,zero
    4630:	000cf880 	call	cf88 <__eqdf2>
    4634:	10002a1e 	bne	r2,zero,46e0 <_dtoa_r+0x140>
    4638:	d8c02317 	ldw	r3,140(sp)
    463c:	d9002517 	ldw	r4,148(sp)
    4640:	00800044 	movi	r2,1
    4644:	18800015 	stw	r2,0(r3)
    4648:	2001a226 	beq	r4,zero,4cd4 <_dtoa_r+0x734>
    464c:	008000b4 	movhi	r2,2
    4650:	10ae1644 	addi	r2,r2,-18343
    4654:	20800015 	stw	r2,0(r4)
    4658:	10bfffc4 	addi	r2,r2,-1
    465c:	dfc02117 	ldw	ra,132(sp)
    4660:	df002017 	ldw	fp,128(sp)
    4664:	ddc01f17 	ldw	r23,124(sp)
    4668:	dd801e17 	ldw	r22,120(sp)
    466c:	dd401d17 	ldw	r21,116(sp)
    4670:	dd001c17 	ldw	r20,112(sp)
    4674:	dcc01b17 	ldw	r19,108(sp)
    4678:	dc801a17 	ldw	r18,104(sp)
    467c:	dc401917 	ldw	r17,100(sp)
    4680:	dc001817 	ldw	r16,96(sp)
    4684:	dec02204 	addi	sp,sp,136
    4688:	f800283a 	ret
    468c:	d8c02317 	ldw	r3,140(sp)
    4690:	0089c3c4 	movi	r2,9999
    4694:	18800015 	stw	r2,0(r3)
    4698:	90017c26 	beq	r18,zero,4c8c <_dtoa_r+0x6ec>
    469c:	008000b4 	movhi	r2,2
    46a0:	10ae2204 	addi	r2,r2,-18296
    46a4:	d9002517 	ldw	r4,148(sp)
    46a8:	203fec26 	beq	r4,zero,465c <__alt_mem_Flash_flash_data+0xf400465c>
    46ac:	10c000c7 	ldb	r3,3(r2)
    46b0:	18017d1e 	bne	r3,zero,4ca8 <_dtoa_r+0x708>
    46b4:	10c000c4 	addi	r3,r2,3
    46b8:	d9802517 	ldw	r6,148(sp)
    46bc:	30c00015 	stw	r3,0(r6)
    46c0:	003fe606 	br	465c <__alt_mem_Flash_flash_data+0xf400465c>
    46c4:	04e00034 	movhi	r19,32768
    46c8:	9cffffc4 	addi	r19,r19,-1
    46cc:	00800044 	movi	r2,1
    46d0:	ace6703a 	and	r19,r21,r19
    46d4:	88800015 	stw	r2,0(r17)
    46d8:	982b883a 	mov	r21,r19
    46dc:	003fcd06 	br	4614 <__alt_mem_Flash_flash_data+0xf4004614>
    46e0:	d8800204 	addi	r2,sp,8
    46e4:	a822d53a 	srli	r17,r21,20
    46e8:	d8800015 	stw	r2,0(sp)
    46ec:	8009883a 	mov	r4,r16
    46f0:	900b883a 	mov	r5,r18
    46f4:	980d883a 	mov	r6,r19
    46f8:	d9c00104 	addi	r7,sp,4
    46fc:	00088800 	call	8880 <__d2b>
    4700:	1039883a 	mov	fp,r2
    4704:	88016a1e 	bne	r17,zero,4cb0 <_dtoa_r+0x710>
    4708:	dd000217 	ldw	r20,8(sp)
    470c:	dc400117 	ldw	r17,4(sp)
    4710:	00befbc4 	movi	r2,-1041
    4714:	a463883a 	add	r17,r20,r17
    4718:	8882ea16 	blt	r17,r2,52c4 <_dtoa_r+0xd24>
    471c:	00bf0384 	movi	r2,-1010
    4720:	1445c83a 	sub	r2,r2,r17
    4724:	89010484 	addi	r4,r17,1042
    4728:	a8aa983a 	sll	r21,r21,r2
    472c:	9108d83a 	srl	r4,r18,r4
    4730:	a908b03a 	or	r4,r21,r4
    4734:	000e3180 	call	e318 <__floatunsidf>
    4738:	017f8434 	movhi	r5,65040
    473c:	01800044 	movi	r6,1
    4740:	1009883a 	mov	r4,r2
    4744:	194b883a 	add	r5,r3,r5
    4748:	8c7fffc4 	addi	r17,r17,-1
    474c:	d9800f15 	stw	r6,60(sp)
    4750:	000d883a 	mov	r6,zero
    4754:	01cffe34 	movhi	r7,16376
    4758:	000d8f00 	call	d8f0 <__subdf3>
    475c:	0198dbf4 	movhi	r6,25455
    4760:	01cff4f4 	movhi	r7,16339
    4764:	1009883a 	mov	r4,r2
    4768:	180b883a 	mov	r5,r3
    476c:	3190d844 	addi	r6,r6,17249
    4770:	39e1e9c4 	addi	r7,r7,-30809
    4774:	000d1cc0 	call	d1cc <__muldf3>
    4778:	01a2d874 	movhi	r6,35681
    477c:	01cff1f4 	movhi	r7,16327
    4780:	180b883a 	mov	r5,r3
    4784:	31b22cc4 	addi	r6,r6,-14157
    4788:	39e28a04 	addi	r7,r7,-30168
    478c:	1009883a 	mov	r4,r2
    4790:	000be200 	call	be20 <__adddf3>
    4794:	8809883a 	mov	r4,r17
    4798:	102d883a 	mov	r22,r2
    479c:	182b883a 	mov	r21,r3
    47a0:	000e2480 	call	e248 <__floatsidf>
    47a4:	019427f4 	movhi	r6,20639
    47a8:	01cff4f4 	movhi	r7,16339
    47ac:	1009883a 	mov	r4,r2
    47b0:	180b883a 	mov	r5,r3
    47b4:	319e7ec4 	addi	r6,r6,31227
    47b8:	39d104c4 	addi	r7,r7,17427
    47bc:	000d1cc0 	call	d1cc <__muldf3>
    47c0:	b009883a 	mov	r4,r22
    47c4:	a80b883a 	mov	r5,r21
    47c8:	100d883a 	mov	r6,r2
    47cc:	180f883a 	mov	r7,r3
    47d0:	000be200 	call	be20 <__adddf3>
    47d4:	1009883a 	mov	r4,r2
    47d8:	180b883a 	mov	r5,r3
    47dc:	102d883a 	mov	r22,r2
    47e0:	182b883a 	mov	r21,r3
    47e4:	000e1c00 	call	e1c0 <__fixdfsi>
    47e8:	b009883a 	mov	r4,r22
    47ec:	a80b883a 	mov	r5,r21
    47f0:	000d883a 	mov	r6,zero
    47f4:	000f883a 	mov	r7,zero
    47f8:	d8800515 	stw	r2,20(sp)
    47fc:	000d0ec0 	call	d0ec <__ledf2>
    4800:	10023116 	blt	r2,zero,50c8 <_dtoa_r+0xb28>
    4804:	d8c00517 	ldw	r3,20(sp)
    4808:	00800584 	movi	r2,22
    480c:	10c21f36 	bltu	r2,r3,508c <_dtoa_r+0xaec>
    4810:	180490fa 	slli	r2,r3,3
    4814:	00c000b4 	movhi	r3,2
    4818:	18ee3e04 	addi	r3,r3,-18184
    481c:	1885883a 	add	r2,r3,r2
    4820:	11000017 	ldw	r4,0(r2)
    4824:	11400117 	ldw	r5,4(r2)
    4828:	900d883a 	mov	r6,r18
    482c:	980f883a 	mov	r7,r19
    4830:	000d00c0 	call	d00c <__gedf2>
    4834:	0082a70e 	bge	zero,r2,52d4 <_dtoa_r+0xd34>
    4838:	d9000517 	ldw	r4,20(sp)
    483c:	d8000d15 	stw	zero,52(sp)
    4840:	213fffc4 	addi	r4,r4,-1
    4844:	d9000515 	stw	r4,20(sp)
    4848:	a463c83a 	sub	r17,r20,r17
    484c:	8dbfffc4 	addi	r22,r17,-1
    4850:	b0021916 	blt	r22,zero,50b8 <_dtoa_r+0xb18>
    4854:	d8000815 	stw	zero,32(sp)
    4858:	d8800517 	ldw	r2,20(sp)
    485c:	10020e16 	blt	r2,zero,5098 <_dtoa_r+0xaf8>
    4860:	b0ad883a 	add	r22,r22,r2
    4864:	d8800a15 	stw	r2,40(sp)
    4868:	d8000915 	stw	zero,36(sp)
    486c:	d8c00317 	ldw	r3,12(sp)
    4870:	00800244 	movi	r2,9
    4874:	10c11a36 	bltu	r2,r3,4ce0 <_dtoa_r+0x740>
    4878:	00800144 	movi	r2,5
    487c:	10c4fc0e 	bge	r2,r3,5c70 <_dtoa_r+0x16d0>
    4880:	18ffff04 	addi	r3,r3,-4
    4884:	d8c00315 	stw	r3,12(sp)
    4888:	0029883a 	mov	r20,zero
    488c:	d9800317 	ldw	r6,12(sp)
    4890:	008000c4 	movi	r2,3
    4894:	3083bd26 	beq	r6,r2,578c <_dtoa_r+0x11ec>
    4898:	1183670e 	bge	r2,r6,5638 <_dtoa_r+0x1098>
    489c:	d8c00317 	ldw	r3,12(sp)
    48a0:	00800104 	movi	r2,4
    48a4:	1882e726 	beq	r3,r2,5444 <_dtoa_r+0xea4>
    48a8:	00800144 	movi	r2,5
    48ac:	1884f21e 	bne	r3,r2,5c78 <_dtoa_r+0x16d8>
    48b0:	00800044 	movi	r2,1
    48b4:	d8800b15 	stw	r2,44(sp)
    48b8:	d8c02217 	ldw	r3,136(sp)
    48bc:	d9000517 	ldw	r4,20(sp)
    48c0:	1907883a 	add	r3,r3,r4
    48c4:	19800044 	addi	r6,r3,1
    48c8:	d8c00c15 	stw	r3,48(sp)
    48cc:	d9800615 	stw	r6,24(sp)
    48d0:	0183c30e 	bge	zero,r6,57e0 <_dtoa_r+0x1240>
    48d4:	d9800617 	ldw	r6,24(sp)
    48d8:	3023883a 	mov	r17,r6
    48dc:	80001115 	stw	zero,68(r16)
    48e0:	008005c4 	movi	r2,23
    48e4:	1184f62e 	bgeu	r2,r6,5cc0 <_dtoa_r+0x1720>
    48e8:	00c00044 	movi	r3,1
    48ec:	00800104 	movi	r2,4
    48f0:	1085883a 	add	r2,r2,r2
    48f4:	11000504 	addi	r4,r2,20
    48f8:	180b883a 	mov	r5,r3
    48fc:	18c00044 	addi	r3,r3,1
    4900:	313ffb2e 	bgeu	r6,r4,48f0 <__alt_mem_Flash_flash_data+0xf40048f0>
    4904:	81401115 	stw	r5,68(r16)
    4908:	8009883a 	mov	r4,r16
    490c:	0007c380 	call	7c38 <_Balloc>
    4910:	d8800715 	stw	r2,28(sp)
    4914:	80801015 	stw	r2,64(r16)
    4918:	00800384 	movi	r2,14
    491c:	1440fd36 	bltu	r2,r17,4d14 <_dtoa_r+0x774>
    4920:	a000fc26 	beq	r20,zero,4d14 <_dtoa_r+0x774>
    4924:	d8800517 	ldw	r2,20(sp)
    4928:	0083b90e 	bge	zero,r2,5810 <_dtoa_r+0x1270>
    492c:	d8c00517 	ldw	r3,20(sp)
    4930:	108003cc 	andi	r2,r2,15
    4934:	100490fa 	slli	r2,r2,3
    4938:	182fd13a 	srai	r23,r3,4
    493c:	00c000b4 	movhi	r3,2
    4940:	18ee3e04 	addi	r3,r3,-18184
    4944:	1885883a 	add	r2,r3,r2
    4948:	b8c0040c 	andi	r3,r23,16
    494c:	12c00017 	ldw	r11,0(r2)
    4950:	12800117 	ldw	r10,4(r2)
    4954:	18039726 	beq	r3,zero,57b4 <_dtoa_r+0x1214>
    4958:	008000b4 	movhi	r2,2
    495c:	10ae3404 	addi	r2,r2,-18224
    4960:	11800817 	ldw	r6,32(r2)
    4964:	11c00917 	ldw	r7,36(r2)
    4968:	9009883a 	mov	r4,r18
    496c:	980b883a 	mov	r5,r19
    4970:	da801615 	stw	r10,88(sp)
    4974:	dac01515 	stw	r11,84(sp)
    4978:	000c6bc0 	call	c6bc <__divdf3>
    497c:	da801617 	ldw	r10,88(sp)
    4980:	dac01517 	ldw	r11,84(sp)
    4984:	bdc003cc 	andi	r23,r23,15
    4988:	044000c4 	movi	r17,3
    498c:	d8800e15 	stw	r2,56(sp)
    4990:	182b883a 	mov	r21,r3
    4994:	b8001126 	beq	r23,zero,49dc <_dtoa_r+0x43c>
    4998:	050000b4 	movhi	r20,2
    499c:	a52e3404 	addi	r20,r20,-18224
    49a0:	5805883a 	mov	r2,r11
    49a4:	5007883a 	mov	r3,r10
    49a8:	b980004c 	andi	r6,r23,1
    49ac:	1009883a 	mov	r4,r2
    49b0:	b82fd07a 	srai	r23,r23,1
    49b4:	180b883a 	mov	r5,r3
    49b8:	30000426 	beq	r6,zero,49cc <_dtoa_r+0x42c>
    49bc:	a1800017 	ldw	r6,0(r20)
    49c0:	a1c00117 	ldw	r7,4(r20)
    49c4:	8c400044 	addi	r17,r17,1
    49c8:	000d1cc0 	call	d1cc <__muldf3>
    49cc:	a5000204 	addi	r20,r20,8
    49d0:	b83ff51e 	bne	r23,zero,49a8 <__alt_mem_Flash_flash_data+0xf40049a8>
    49d4:	1017883a 	mov	r11,r2
    49d8:	1815883a 	mov	r10,r3
    49dc:	d9000e17 	ldw	r4,56(sp)
    49e0:	a80b883a 	mov	r5,r21
    49e4:	580d883a 	mov	r6,r11
    49e8:	500f883a 	mov	r7,r10
    49ec:	000c6bc0 	call	c6bc <__divdf3>
    49f0:	1029883a 	mov	r20,r2
    49f4:	182b883a 	mov	r21,r3
    49f8:	d9800d17 	ldw	r6,52(sp)
    49fc:	30000626 	beq	r6,zero,4a18 <_dtoa_r+0x478>
    4a00:	a009883a 	mov	r4,r20
    4a04:	a80b883a 	mov	r5,r21
    4a08:	000d883a 	mov	r6,zero
    4a0c:	01cffc34 	movhi	r7,16368
    4a10:	000d0ec0 	call	d0ec <__ledf2>
    4a14:	10043216 	blt	r2,zero,5ae0 <_dtoa_r+0x1540>
    4a18:	8809883a 	mov	r4,r17
    4a1c:	000e2480 	call	e248 <__floatsidf>
    4a20:	1009883a 	mov	r4,r2
    4a24:	180b883a 	mov	r5,r3
    4a28:	a00d883a 	mov	r6,r20
    4a2c:	a80f883a 	mov	r7,r21
    4a30:	000d1cc0 	call	d1cc <__muldf3>
    4a34:	000d883a 	mov	r6,zero
    4a38:	1009883a 	mov	r4,r2
    4a3c:	180b883a 	mov	r5,r3
    4a40:	01d00734 	movhi	r7,16412
    4a44:	000be200 	call	be20 <__adddf3>
    4a48:	1023883a 	mov	r17,r2
    4a4c:	d9800617 	ldw	r6,24(sp)
    4a50:	00bf3034 	movhi	r2,64704
    4a54:	1885883a 	add	r2,r3,r2
    4a58:	d8800e15 	stw	r2,56(sp)
    4a5c:	30032e26 	beq	r6,zero,5718 <_dtoa_r+0x1178>
    4a60:	d8c00517 	ldw	r3,20(sp)
    4a64:	da800617 	ldw	r10,24(sp)
    4a68:	d8c01215 	stw	r3,72(sp)
    4a6c:	d9000b17 	ldw	r4,44(sp)
    4a70:	2003b026 	beq	r4,zero,5934 <_dtoa_r+0x1394>
    4a74:	50bfffc4 	addi	r2,r10,-1
    4a78:	100490fa 	slli	r2,r2,3
    4a7c:	00c000b4 	movhi	r3,2
    4a80:	18ee3e04 	addi	r3,r3,-18184
    4a84:	1885883a 	add	r2,r3,r2
    4a88:	11800017 	ldw	r6,0(r2)
    4a8c:	11c00117 	ldw	r7,4(r2)
    4a90:	d8800717 	ldw	r2,28(sp)
    4a94:	0009883a 	mov	r4,zero
    4a98:	014ff834 	movhi	r5,16352
    4a9c:	da801615 	stw	r10,88(sp)
    4aa0:	15c00044 	addi	r23,r2,1
    4aa4:	000c6bc0 	call	c6bc <__divdf3>
    4aa8:	d9c00e17 	ldw	r7,56(sp)
    4aac:	880d883a 	mov	r6,r17
    4ab0:	1009883a 	mov	r4,r2
    4ab4:	180b883a 	mov	r5,r3
    4ab8:	000d8f00 	call	d8f0 <__subdf3>
    4abc:	a80b883a 	mov	r5,r21
    4ac0:	a009883a 	mov	r4,r20
    4ac4:	d8c01015 	stw	r3,64(sp)
    4ac8:	d8800e15 	stw	r2,56(sp)
    4acc:	000e1c00 	call	e1c0 <__fixdfsi>
    4ad0:	1009883a 	mov	r4,r2
    4ad4:	d8801715 	stw	r2,92(sp)
    4ad8:	000e2480 	call	e248 <__floatsidf>
    4adc:	a009883a 	mov	r4,r20
    4ae0:	a80b883a 	mov	r5,r21
    4ae4:	100d883a 	mov	r6,r2
    4ae8:	180f883a 	mov	r7,r3
    4aec:	000d8f00 	call	d8f0 <__subdf3>
    4af0:	da001717 	ldw	r8,92(sp)
    4af4:	1829883a 	mov	r20,r3
    4af8:	d8c00717 	ldw	r3,28(sp)
    4afc:	d9000e17 	ldw	r4,56(sp)
    4b00:	d9401017 	ldw	r5,64(sp)
    4b04:	42000c04 	addi	r8,r8,48
    4b08:	1023883a 	mov	r17,r2
    4b0c:	1a000005 	stb	r8,0(r3)
    4b10:	880d883a 	mov	r6,r17
    4b14:	a00f883a 	mov	r7,r20
    4b18:	402b883a 	mov	r21,r8
    4b1c:	000d00c0 	call	d00c <__gedf2>
    4b20:	00844516 	blt	zero,r2,5c38 <_dtoa_r+0x1698>
    4b24:	0009883a 	mov	r4,zero
    4b28:	014ffc34 	movhi	r5,16368
    4b2c:	880d883a 	mov	r6,r17
    4b30:	a00f883a 	mov	r7,r20
    4b34:	000d8f00 	call	d8f0 <__subdf3>
    4b38:	d9000e17 	ldw	r4,56(sp)
    4b3c:	d9401017 	ldw	r5,64(sp)
    4b40:	100d883a 	mov	r6,r2
    4b44:	180f883a 	mov	r7,r3
    4b48:	000d00c0 	call	d00c <__gedf2>
    4b4c:	da801617 	ldw	r10,88(sp)
    4b50:	00843616 	blt	zero,r2,5c2c <_dtoa_r+0x168c>
    4b54:	00800044 	movi	r2,1
    4b58:	12806e0e 	bge	r2,r10,4d14 <_dtoa_r+0x774>
    4b5c:	d9000717 	ldw	r4,28(sp)
    4b60:	dd801315 	stw	r22,76(sp)
    4b64:	dc001115 	stw	r16,68(sp)
    4b68:	2295883a 	add	r10,r4,r10
    4b6c:	dcc01415 	stw	r19,80(sp)
    4b70:	502d883a 	mov	r22,r10
    4b74:	dcc01017 	ldw	r19,64(sp)
    4b78:	b821883a 	mov	r16,r23
    4b7c:	dc801015 	stw	r18,64(sp)
    4b80:	dc800e17 	ldw	r18,56(sp)
    4b84:	00000906 	br	4bac <_dtoa_r+0x60c>
    4b88:	000d8f00 	call	d8f0 <__subdf3>
    4b8c:	1009883a 	mov	r4,r2
    4b90:	180b883a 	mov	r5,r3
    4b94:	900d883a 	mov	r6,r18
    4b98:	980f883a 	mov	r7,r19
    4b9c:	000d0ec0 	call	d0ec <__ledf2>
    4ba0:	10040e16 	blt	r2,zero,5bdc <_dtoa_r+0x163c>
    4ba4:	b821883a 	mov	r16,r23
    4ba8:	bd841026 	beq	r23,r22,5bec <_dtoa_r+0x164c>
    4bac:	9009883a 	mov	r4,r18
    4bb0:	980b883a 	mov	r5,r19
    4bb4:	000d883a 	mov	r6,zero
    4bb8:	01d00934 	movhi	r7,16420
    4bbc:	000d1cc0 	call	d1cc <__muldf3>
    4bc0:	000d883a 	mov	r6,zero
    4bc4:	01d00934 	movhi	r7,16420
    4bc8:	8809883a 	mov	r4,r17
    4bcc:	a00b883a 	mov	r5,r20
    4bd0:	1025883a 	mov	r18,r2
    4bd4:	1827883a 	mov	r19,r3
    4bd8:	000d1cc0 	call	d1cc <__muldf3>
    4bdc:	180b883a 	mov	r5,r3
    4be0:	1009883a 	mov	r4,r2
    4be4:	1823883a 	mov	r17,r3
    4be8:	1029883a 	mov	r20,r2
    4bec:	000e1c00 	call	e1c0 <__fixdfsi>
    4bf0:	1009883a 	mov	r4,r2
    4bf4:	102b883a 	mov	r21,r2
    4bf8:	000e2480 	call	e248 <__floatsidf>
    4bfc:	a009883a 	mov	r4,r20
    4c00:	880b883a 	mov	r5,r17
    4c04:	100d883a 	mov	r6,r2
    4c08:	180f883a 	mov	r7,r3
    4c0c:	000d8f00 	call	d8f0 <__subdf3>
    4c10:	ad400c04 	addi	r21,r21,48
    4c14:	1009883a 	mov	r4,r2
    4c18:	180b883a 	mov	r5,r3
    4c1c:	900d883a 	mov	r6,r18
    4c20:	980f883a 	mov	r7,r19
    4c24:	85400005 	stb	r21,0(r16)
    4c28:	1023883a 	mov	r17,r2
    4c2c:	1829883a 	mov	r20,r3
    4c30:	000d0ec0 	call	d0ec <__ledf2>
    4c34:	bdc00044 	addi	r23,r23,1
    4c38:	0009883a 	mov	r4,zero
    4c3c:	014ffc34 	movhi	r5,16368
    4c40:	880d883a 	mov	r6,r17
    4c44:	a00f883a 	mov	r7,r20
    4c48:	103fcf0e 	bge	r2,zero,4b88 <__alt_mem_Flash_flash_data+0xf4004b88>
    4c4c:	d9801217 	ldw	r6,72(sp)
    4c50:	dc001117 	ldw	r16,68(sp)
    4c54:	d9800515 	stw	r6,20(sp)
    4c58:	8009883a 	mov	r4,r16
    4c5c:	e00b883a 	mov	r5,fp
    4c60:	0007ce00 	call	7ce0 <_Bfree>
    4c64:	d8c00517 	ldw	r3,20(sp)
    4c68:	d9002317 	ldw	r4,140(sp)
    4c6c:	d9802517 	ldw	r6,148(sp)
    4c70:	b8000005 	stb	zero,0(r23)
    4c74:	18800044 	addi	r2,r3,1
    4c78:	20800015 	stw	r2,0(r4)
    4c7c:	30027226 	beq	r6,zero,5648 <_dtoa_r+0x10a8>
    4c80:	35c00015 	stw	r23,0(r6)
    4c84:	d8800717 	ldw	r2,28(sp)
    4c88:	003e7406 	br	465c <__alt_mem_Flash_flash_data+0xf400465c>
    4c8c:	00800434 	movhi	r2,16
    4c90:	10bfffc4 	addi	r2,r2,-1
    4c94:	a8aa703a 	and	r21,r21,r2
    4c98:	a83e801e 	bne	r21,zero,469c <__alt_mem_Flash_flash_data+0xf400469c>
    4c9c:	008000b4 	movhi	r2,2
    4ca0:	10ae1f04 	addi	r2,r2,-18308
    4ca4:	003e7f06 	br	46a4 <__alt_mem_Flash_flash_data+0xf40046a4>
    4ca8:	10c00204 	addi	r3,r2,8
    4cac:	003e8206 	br	46b8 <__alt_mem_Flash_flash_data+0xf40046b8>
    4cb0:	01400434 	movhi	r5,16
    4cb4:	297fffc4 	addi	r5,r5,-1
    4cb8:	994a703a 	and	r5,r19,r5
    4cbc:	9009883a 	mov	r4,r18
    4cc0:	8c7f0044 	addi	r17,r17,-1023
    4cc4:	294ffc34 	orhi	r5,r5,16368
    4cc8:	dd000217 	ldw	r20,8(sp)
    4ccc:	d8000f15 	stw	zero,60(sp)
    4cd0:	003e9f06 	br	4750 <__alt_mem_Flash_flash_data+0xf4004750>
    4cd4:	008000b4 	movhi	r2,2
    4cd8:	10ae1604 	addi	r2,r2,-18344
    4cdc:	003e5f06 	br	465c <__alt_mem_Flash_flash_data+0xf400465c>
    4ce0:	80001115 	stw	zero,68(r16)
    4ce4:	8009883a 	mov	r4,r16
    4ce8:	000b883a 	mov	r5,zero
    4cec:	0007c380 	call	7c38 <_Balloc>
    4cf0:	01bfffc4 	movi	r6,-1
    4cf4:	d8800715 	stw	r2,28(sp)
    4cf8:	80801015 	stw	r2,64(r16)
    4cfc:	00800044 	movi	r2,1
    4d00:	d9800c15 	stw	r6,48(sp)
    4d04:	d8800b15 	stw	r2,44(sp)
    4d08:	d9800615 	stw	r6,24(sp)
    4d0c:	d8002215 	stw	zero,136(sp)
    4d10:	d8000315 	stw	zero,12(sp)
    4d14:	d8800117 	ldw	r2,4(sp)
    4d18:	10008e16 	blt	r2,zero,4f54 <_dtoa_r+0x9b4>
    4d1c:	d9000517 	ldw	r4,20(sp)
    4d20:	00c00384 	movi	r3,14
    4d24:	19008b16 	blt	r3,r4,4f54 <_dtoa_r+0x9b4>
    4d28:	200490fa 	slli	r2,r4,3
    4d2c:	00c000b4 	movhi	r3,2
    4d30:	d9802217 	ldw	r6,136(sp)
    4d34:	18ee3e04 	addi	r3,r3,-18184
    4d38:	1885883a 	add	r2,r3,r2
    4d3c:	14400017 	ldw	r17,0(r2)
    4d40:	15000117 	ldw	r20,4(r2)
    4d44:	3001c716 	blt	r6,zero,5464 <_dtoa_r+0xec4>
    4d48:	880d883a 	mov	r6,r17
    4d4c:	a00f883a 	mov	r7,r20
    4d50:	9009883a 	mov	r4,r18
    4d54:	980b883a 	mov	r5,r19
    4d58:	000c6bc0 	call	c6bc <__divdf3>
    4d5c:	180b883a 	mov	r5,r3
    4d60:	1009883a 	mov	r4,r2
    4d64:	000e1c00 	call	e1c0 <__fixdfsi>
    4d68:	1009883a 	mov	r4,r2
    4d6c:	102d883a 	mov	r22,r2
    4d70:	000e2480 	call	e248 <__floatsidf>
    4d74:	1009883a 	mov	r4,r2
    4d78:	180b883a 	mov	r5,r3
    4d7c:	880d883a 	mov	r6,r17
    4d80:	a00f883a 	mov	r7,r20
    4d84:	000d1cc0 	call	d1cc <__muldf3>
    4d88:	9009883a 	mov	r4,r18
    4d8c:	980b883a 	mov	r5,r19
    4d90:	100d883a 	mov	r6,r2
    4d94:	180f883a 	mov	r7,r3
    4d98:	000d8f00 	call	d8f0 <__subdf3>
    4d9c:	d9000717 	ldw	r4,28(sp)
    4da0:	d9800617 	ldw	r6,24(sp)
    4da4:	180b883a 	mov	r5,r3
    4da8:	b0c00c04 	addi	r3,r22,48
    4dac:	20c00005 	stb	r3,0(r4)
    4db0:	25c00044 	addi	r23,r4,1
    4db4:	01000044 	movi	r4,1
    4db8:	1011883a 	mov	r8,r2
    4dbc:	2807883a 	mov	r3,r5
    4dc0:	31003d26 	beq	r6,r4,4eb8 <_dtoa_r+0x918>
    4dc4:	000d883a 	mov	r6,zero
    4dc8:	01d00934 	movhi	r7,16420
    4dcc:	1009883a 	mov	r4,r2
    4dd0:	000d1cc0 	call	d1cc <__muldf3>
    4dd4:	1009883a 	mov	r4,r2
    4dd8:	180b883a 	mov	r5,r3
    4ddc:	000d883a 	mov	r6,zero
    4de0:	000f883a 	mov	r7,zero
    4de4:	1027883a 	mov	r19,r2
    4de8:	182b883a 	mov	r21,r3
    4dec:	000cf880 	call	cf88 <__eqdf2>
    4df0:	103f9926 	beq	r2,zero,4c58 <__alt_mem_Flash_flash_data+0xf4004c58>
    4df4:	d8c00617 	ldw	r3,24(sp)
    4df8:	d9000717 	ldw	r4,28(sp)
    4dfc:	b825883a 	mov	r18,r23
    4e00:	18bfffc4 	addi	r2,r3,-1
    4e04:	20ad883a 	add	r22,r4,r2
    4e08:	dc000315 	stw	r16,12(sp)
    4e0c:	00000a06 	br	4e38 <_dtoa_r+0x898>
    4e10:	000d1cc0 	call	d1cc <__muldf3>
    4e14:	1009883a 	mov	r4,r2
    4e18:	180b883a 	mov	r5,r3
    4e1c:	000d883a 	mov	r6,zero
    4e20:	000f883a 	mov	r7,zero
    4e24:	1027883a 	mov	r19,r2
    4e28:	182b883a 	mov	r21,r3
    4e2c:	b825883a 	mov	r18,r23
    4e30:	000cf880 	call	cf88 <__eqdf2>
    4e34:	10022626 	beq	r2,zero,56d0 <_dtoa_r+0x1130>
    4e38:	880d883a 	mov	r6,r17
    4e3c:	a00f883a 	mov	r7,r20
    4e40:	9809883a 	mov	r4,r19
    4e44:	a80b883a 	mov	r5,r21
    4e48:	000c6bc0 	call	c6bc <__divdf3>
    4e4c:	180b883a 	mov	r5,r3
    4e50:	1009883a 	mov	r4,r2
    4e54:	000e1c00 	call	e1c0 <__fixdfsi>
    4e58:	1009883a 	mov	r4,r2
    4e5c:	1021883a 	mov	r16,r2
    4e60:	000e2480 	call	e248 <__floatsidf>
    4e64:	1009883a 	mov	r4,r2
    4e68:	180b883a 	mov	r5,r3
    4e6c:	880d883a 	mov	r6,r17
    4e70:	a00f883a 	mov	r7,r20
    4e74:	000d1cc0 	call	d1cc <__muldf3>
    4e78:	9809883a 	mov	r4,r19
    4e7c:	a80b883a 	mov	r5,r21
    4e80:	100d883a 	mov	r6,r2
    4e84:	180f883a 	mov	r7,r3
    4e88:	000d8f00 	call	d8f0 <__subdf3>
    4e8c:	82000c04 	addi	r8,r16,48
    4e90:	92000005 	stb	r8,0(r18)
    4e94:	1009883a 	mov	r4,r2
    4e98:	180b883a 	mov	r5,r3
    4e9c:	000d883a 	mov	r6,zero
    4ea0:	01d00934 	movhi	r7,16420
    4ea4:	1011883a 	mov	r8,r2
    4ea8:	bdc00044 	addi	r23,r23,1
    4eac:	95bfd81e 	bne	r18,r22,4e10 <__alt_mem_Flash_flash_data+0xf4004e10>
    4eb0:	802d883a 	mov	r22,r16
    4eb4:	dc000317 	ldw	r16,12(sp)
    4eb8:	4009883a 	mov	r4,r8
    4ebc:	180b883a 	mov	r5,r3
    4ec0:	400d883a 	mov	r6,r8
    4ec4:	180f883a 	mov	r7,r3
    4ec8:	000be200 	call	be20 <__adddf3>
    4ecc:	8809883a 	mov	r4,r17
    4ed0:	a00b883a 	mov	r5,r20
    4ed4:	100d883a 	mov	r6,r2
    4ed8:	180f883a 	mov	r7,r3
    4edc:	1027883a 	mov	r19,r2
    4ee0:	1825883a 	mov	r18,r3
    4ee4:	000d0ec0 	call	d0ec <__ledf2>
    4ee8:	10000816 	blt	r2,zero,4f0c <_dtoa_r+0x96c>
    4eec:	8809883a 	mov	r4,r17
    4ef0:	a00b883a 	mov	r5,r20
    4ef4:	980d883a 	mov	r6,r19
    4ef8:	900f883a 	mov	r7,r18
    4efc:	000cf880 	call	cf88 <__eqdf2>
    4f00:	103f551e 	bne	r2,zero,4c58 <__alt_mem_Flash_flash_data+0xf4004c58>
    4f04:	b580004c 	andi	r22,r22,1
    4f08:	b03f5326 	beq	r22,zero,4c58 <__alt_mem_Flash_flash_data+0xf4004c58>
    4f0c:	bd7fffc3 	ldbu	r21,-1(r23)
    4f10:	b8bfffc4 	addi	r2,r23,-1
    4f14:	1007883a 	mov	r3,r2
    4f18:	01400e44 	movi	r5,57
    4f1c:	d9800717 	ldw	r6,28(sp)
    4f20:	00000506 	br	4f38 <_dtoa_r+0x998>
    4f24:	18ffffc4 	addi	r3,r3,-1
    4f28:	30825e26 	beq	r6,r2,58a4 <_dtoa_r+0x1304>
    4f2c:	1d400003 	ldbu	r21,0(r3)
    4f30:	102f883a 	mov	r23,r2
    4f34:	10bfffc4 	addi	r2,r2,-1
    4f38:	a9003fcc 	andi	r4,r21,255
    4f3c:	2100201c 	xori	r4,r4,128
    4f40:	213fe004 	addi	r4,r4,-128
    4f44:	217ff726 	beq	r4,r5,4f24 <__alt_mem_Flash_flash_data+0xf4004f24>
    4f48:	aa000044 	addi	r8,r21,1
    4f4c:	12000005 	stb	r8,0(r2)
    4f50:	003f4106 	br	4c58 <__alt_mem_Flash_flash_data+0xf4004c58>
    4f54:	d8c00b17 	ldw	r3,44(sp)
    4f58:	18006726 	beq	r3,zero,50f8 <_dtoa_r+0xb58>
    4f5c:	d9000317 	ldw	r4,12(sp)
    4f60:	00c00044 	movi	r3,1
    4f64:	19016a0e 	bge	r3,r4,5510 <_dtoa_r+0xf70>
    4f68:	d8800617 	ldw	r2,24(sp)
    4f6c:	d8c00917 	ldw	r3,36(sp)
    4f70:	157fffc4 	addi	r21,r2,-1
    4f74:	1d420716 	blt	r3,r21,5794 <_dtoa_r+0x11f4>
    4f78:	1d6bc83a 	sub	r21,r3,r21
    4f7c:	d8800617 	ldw	r2,24(sp)
    4f80:	1002c716 	blt	r2,zero,5aa0 <_dtoa_r+0x1500>
    4f84:	dd000817 	ldw	r20,32(sp)
    4f88:	d8800617 	ldw	r2,24(sp)
    4f8c:	d9800817 	ldw	r6,32(sp)
    4f90:	8009883a 	mov	r4,r16
    4f94:	01400044 	movi	r5,1
    4f98:	308d883a 	add	r6,r6,r2
    4f9c:	d9800815 	stw	r6,32(sp)
    4fa0:	b0ad883a 	add	r22,r22,r2
    4fa4:	00080440 	call	8044 <__i2b>
    4fa8:	1023883a 	mov	r17,r2
    4fac:	a0000826 	beq	r20,zero,4fd0 <_dtoa_r+0xa30>
    4fb0:	0580070e 	bge	zero,r22,4fd0 <_dtoa_r+0xa30>
    4fb4:	b005883a 	mov	r2,r22
    4fb8:	a5812016 	blt	r20,r22,543c <_dtoa_r+0xe9c>
    4fbc:	d8c00817 	ldw	r3,32(sp)
    4fc0:	a0a9c83a 	sub	r20,r20,r2
    4fc4:	b0adc83a 	sub	r22,r22,r2
    4fc8:	1887c83a 	sub	r3,r3,r2
    4fcc:	d8c00815 	stw	r3,32(sp)
    4fd0:	d9000917 	ldw	r4,36(sp)
    4fd4:	0100140e 	bge	zero,r4,5028 <_dtoa_r+0xa88>
    4fd8:	d9800b17 	ldw	r6,44(sp)
    4fdc:	3001e526 	beq	r6,zero,5774 <_dtoa_r+0x11d4>
    4fe0:	05400e0e 	bge	zero,r21,501c <_dtoa_r+0xa7c>
    4fe4:	880b883a 	mov	r5,r17
    4fe8:	8009883a 	mov	r4,r16
    4fec:	a80d883a 	mov	r6,r21
    4ff0:	000827c0 	call	827c <__pow5mult>
    4ff4:	e00d883a 	mov	r6,fp
    4ff8:	8009883a 	mov	r4,r16
    4ffc:	100b883a 	mov	r5,r2
    5000:	1023883a 	mov	r17,r2
    5004:	00080800 	call	8080 <__multiply>
    5008:	102f883a 	mov	r23,r2
    500c:	e00b883a 	mov	r5,fp
    5010:	8009883a 	mov	r4,r16
    5014:	0007ce00 	call	7ce0 <_Bfree>
    5018:	b839883a 	mov	fp,r23
    501c:	d8800917 	ldw	r2,36(sp)
    5020:	154dc83a 	sub	r6,r2,r21
    5024:	3001281e 	bne	r6,zero,54c8 <_dtoa_r+0xf28>
    5028:	05c00044 	movi	r23,1
    502c:	8009883a 	mov	r4,r16
    5030:	b80b883a 	mov	r5,r23
    5034:	00080440 	call	8044 <__i2b>
    5038:	d8c00a17 	ldw	r3,40(sp)
    503c:	102b883a 	mov	r21,r2
    5040:	00c0310e 	bge	zero,r3,5108 <_dtoa_r+0xb68>
    5044:	8009883a 	mov	r4,r16
    5048:	100b883a 	mov	r5,r2
    504c:	180d883a 	mov	r6,r3
    5050:	000827c0 	call	827c <__pow5mult>
    5054:	d9000317 	ldw	r4,12(sp)
    5058:	102b883a 	mov	r21,r2
    505c:	b9011f0e 	bge	r23,r4,54dc <_dtoa_r+0xf3c>
    5060:	0027883a 	mov	r19,zero
    5064:	a8800417 	ldw	r2,16(r21)
    5068:	10800104 	addi	r2,r2,4
    506c:	1085883a 	add	r2,r2,r2
    5070:	1085883a 	add	r2,r2,r2
    5074:	a885883a 	add	r2,r21,r2
    5078:	11000017 	ldw	r4,0(r2)
    507c:	0007f2c0 	call	7f2c <__hi0bits>
    5080:	00c00804 	movi	r3,32
    5084:	1885c83a 	sub	r2,r3,r2
    5088:	00002506 	br	5120 <_dtoa_r+0xb80>
    508c:	01800044 	movi	r6,1
    5090:	d9800d15 	stw	r6,52(sp)
    5094:	003dec06 	br	4848 <__alt_mem_Flash_flash_data+0xf4004848>
    5098:	d8c00817 	ldw	r3,32(sp)
    509c:	d9000517 	ldw	r4,20(sp)
    50a0:	d8000a15 	stw	zero,40(sp)
    50a4:	1907c83a 	sub	r3,r3,r4
    50a8:	010dc83a 	sub	r6,zero,r4
    50ac:	d8c00815 	stw	r3,32(sp)
    50b0:	d9800915 	stw	r6,36(sp)
    50b4:	003ded06 	br	486c <__alt_mem_Flash_flash_data+0xf400486c>
    50b8:	05adc83a 	sub	r22,zero,r22
    50bc:	dd800815 	stw	r22,32(sp)
    50c0:	002d883a 	mov	r22,zero
    50c4:	003de406 	br	4858 <__alt_mem_Flash_flash_data+0xf4004858>
    50c8:	d9000517 	ldw	r4,20(sp)
    50cc:	000e2480 	call	e248 <__floatsidf>
    50d0:	1009883a 	mov	r4,r2
    50d4:	180b883a 	mov	r5,r3
    50d8:	b00d883a 	mov	r6,r22
    50dc:	a80f883a 	mov	r7,r21
    50e0:	000cf880 	call	cf88 <__eqdf2>
    50e4:	103dc726 	beq	r2,zero,4804 <__alt_mem_Flash_flash_data+0xf4004804>
    50e8:	d8800517 	ldw	r2,20(sp)
    50ec:	10bfffc4 	addi	r2,r2,-1
    50f0:	d8800515 	stw	r2,20(sp)
    50f4:	003dc306 	br	4804 <__alt_mem_Flash_flash_data+0xf4004804>
    50f8:	dd400917 	ldw	r21,36(sp)
    50fc:	dd000817 	ldw	r20,32(sp)
    5100:	0023883a 	mov	r17,zero
    5104:	003fa906 	br	4fac <__alt_mem_Flash_flash_data+0xf4004fac>
    5108:	d9800317 	ldw	r6,12(sp)
    510c:	b981670e 	bge	r23,r6,56ac <_dtoa_r+0x110c>
    5110:	0027883a 	mov	r19,zero
    5114:	d8c00a17 	ldw	r3,40(sp)
    5118:	183fd21e 	bne	r3,zero,5064 <__alt_mem_Flash_flash_data+0xf4005064>
    511c:	00800044 	movi	r2,1
    5120:	1585883a 	add	r2,r2,r22
    5124:	108007cc 	andi	r2,r2,31
    5128:	10005f26 	beq	r2,zero,52a8 <_dtoa_r+0xd08>
    512c:	00c00804 	movi	r3,32
    5130:	1887c83a 	sub	r3,r3,r2
    5134:	01000104 	movi	r4,4
    5138:	20c2dd0e 	bge	r4,r3,5cb0 <_dtoa_r+0x1710>
    513c:	d9000817 	ldw	r4,32(sp)
    5140:	00c00704 	movi	r3,28
    5144:	1885c83a 	sub	r2,r3,r2
    5148:	2089883a 	add	r4,r4,r2
    514c:	d9000815 	stw	r4,32(sp)
    5150:	a0a9883a 	add	r20,r20,r2
    5154:	b0ad883a 	add	r22,r22,r2
    5158:	d8800817 	ldw	r2,32(sp)
    515c:	0080050e 	bge	zero,r2,5174 <_dtoa_r+0xbd4>
    5160:	e00b883a 	mov	r5,fp
    5164:	8009883a 	mov	r4,r16
    5168:	100d883a 	mov	r6,r2
    516c:	00083bc0 	call	83bc <__lshift>
    5170:	1039883a 	mov	fp,r2
    5174:	0580050e 	bge	zero,r22,518c <_dtoa_r+0xbec>
    5178:	a80b883a 	mov	r5,r21
    517c:	8009883a 	mov	r4,r16
    5180:	b00d883a 	mov	r6,r22
    5184:	00083bc0 	call	83bc <__lshift>
    5188:	102b883a 	mov	r21,r2
    518c:	d8c00d17 	ldw	r3,52(sp)
    5190:	1801161e 	bne	r3,zero,55ec <_dtoa_r+0x104c>
    5194:	d8c00617 	ldw	r3,24(sp)
    5198:	00c12d0e 	bge	zero,r3,5650 <_dtoa_r+0x10b0>
    519c:	d8c00b17 	ldw	r3,44(sp)
    51a0:	1800571e 	bne	r3,zero,5300 <_dtoa_r+0xd60>
    51a4:	dc800717 	ldw	r18,28(sp)
    51a8:	dcc00617 	ldw	r19,24(sp)
    51ac:	9029883a 	mov	r20,r18
    51b0:	00000206 	br	51bc <_dtoa_r+0xc1c>
    51b4:	0007d080 	call	7d08 <__multadd>
    51b8:	1039883a 	mov	fp,r2
    51bc:	e009883a 	mov	r4,fp
    51c0:	a80b883a 	mov	r5,r21
    51c4:	00043a00 	call	43a0 <quorem>
    51c8:	10800c04 	addi	r2,r2,48
    51cc:	90800005 	stb	r2,0(r18)
    51d0:	94800044 	addi	r18,r18,1
    51d4:	9507c83a 	sub	r3,r18,r20
    51d8:	8009883a 	mov	r4,r16
    51dc:	e00b883a 	mov	r5,fp
    51e0:	01800284 	movi	r6,10
    51e4:	000f883a 	mov	r7,zero
    51e8:	1cfff216 	blt	r3,r19,51b4 <__alt_mem_Flash_flash_data+0xf40051b4>
    51ec:	1011883a 	mov	r8,r2
    51f0:	d8800617 	ldw	r2,24(sp)
    51f4:	00822e0e 	bge	zero,r2,5ab0 <_dtoa_r+0x1510>
    51f8:	d9000717 	ldw	r4,28(sp)
    51fc:	0025883a 	mov	r18,zero
    5200:	20af883a 	add	r23,r4,r2
    5204:	e00b883a 	mov	r5,fp
    5208:	01800044 	movi	r6,1
    520c:	8009883a 	mov	r4,r16
    5210:	da001715 	stw	r8,92(sp)
    5214:	00083bc0 	call	83bc <__lshift>
    5218:	1009883a 	mov	r4,r2
    521c:	a80b883a 	mov	r5,r21
    5220:	1039883a 	mov	fp,r2
    5224:	000850c0 	call	850c <__mcmp>
    5228:	da001717 	ldw	r8,92(sp)
    522c:	00816e0e 	bge	zero,r2,57e8 <_dtoa_r+0x1248>
    5230:	b93fffc3 	ldbu	r4,-1(r23)
    5234:	b8bfffc4 	addi	r2,r23,-1
    5238:	1007883a 	mov	r3,r2
    523c:	01800e44 	movi	r6,57
    5240:	d9c00717 	ldw	r7,28(sp)
    5244:	00000506 	br	525c <_dtoa_r+0xcbc>
    5248:	18ffffc4 	addi	r3,r3,-1
    524c:	38811926 	beq	r7,r2,56b4 <_dtoa_r+0x1114>
    5250:	19000003 	ldbu	r4,0(r3)
    5254:	102f883a 	mov	r23,r2
    5258:	10bfffc4 	addi	r2,r2,-1
    525c:	21403fcc 	andi	r5,r4,255
    5260:	2940201c 	xori	r5,r5,128
    5264:	297fe004 	addi	r5,r5,-128
    5268:	29bff726 	beq	r5,r6,5248 <__alt_mem_Flash_flash_data+0xf4005248>
    526c:	21000044 	addi	r4,r4,1
    5270:	11000005 	stb	r4,0(r2)
    5274:	8009883a 	mov	r4,r16
    5278:	a80b883a 	mov	r5,r21
    527c:	0007ce00 	call	7ce0 <_Bfree>
    5280:	883e7526 	beq	r17,zero,4c58 <__alt_mem_Flash_flash_data+0xf4004c58>
    5284:	90000426 	beq	r18,zero,5298 <_dtoa_r+0xcf8>
    5288:	94400326 	beq	r18,r17,5298 <_dtoa_r+0xcf8>
    528c:	8009883a 	mov	r4,r16
    5290:	900b883a 	mov	r5,r18
    5294:	0007ce00 	call	7ce0 <_Bfree>
    5298:	8009883a 	mov	r4,r16
    529c:	880b883a 	mov	r5,r17
    52a0:	0007ce00 	call	7ce0 <_Bfree>
    52a4:	003e6c06 	br	4c58 <__alt_mem_Flash_flash_data+0xf4004c58>
    52a8:	00800704 	movi	r2,28
    52ac:	d9800817 	ldw	r6,32(sp)
    52b0:	a0a9883a 	add	r20,r20,r2
    52b4:	b0ad883a 	add	r22,r22,r2
    52b8:	308d883a 	add	r6,r6,r2
    52bc:	d9800815 	stw	r6,32(sp)
    52c0:	003fa506 	br	5158 <__alt_mem_Flash_flash_data+0xf4005158>
    52c4:	013efb84 	movi	r4,-1042
    52c8:	246bc83a 	sub	r21,r4,r17
    52cc:	9548983a 	sll	r4,r18,r21
    52d0:	003d1806 	br	4734 <__alt_mem_Flash_flash_data+0xf4004734>
    52d4:	d8000d15 	stw	zero,52(sp)
    52d8:	003d5b06 	br	4848 <__alt_mem_Flash_flash_data+0xf4004848>
    52dc:	880b883a 	mov	r5,r17
    52e0:	8009883a 	mov	r4,r16
    52e4:	01800284 	movi	r6,10
    52e8:	000f883a 	mov	r7,zero
    52ec:	0007d080 	call	7d08 <__multadd>
    52f0:	1023883a 	mov	r17,r2
    52f4:	d8800c17 	ldw	r2,48(sp)
    52f8:	0082550e 	bge	zero,r2,5c50 <_dtoa_r+0x16b0>
    52fc:	d8800615 	stw	r2,24(sp)
    5300:	0500050e 	bge	zero,r20,5318 <_dtoa_r+0xd78>
    5304:	880b883a 	mov	r5,r17
    5308:	8009883a 	mov	r4,r16
    530c:	a00d883a 	mov	r6,r20
    5310:	00083bc0 	call	83bc <__lshift>
    5314:	1023883a 	mov	r17,r2
    5318:	98016a1e 	bne	r19,zero,58c4 <_dtoa_r+0x1324>
    531c:	8829883a 	mov	r20,r17
    5320:	d9000617 	ldw	r4,24(sp)
    5324:	dcc00717 	ldw	r19,28(sp)
    5328:	9480004c 	andi	r18,r18,1
    532c:	20bfffc4 	addi	r2,r4,-1
    5330:	9885883a 	add	r2,r19,r2
    5334:	d8800415 	stw	r2,16(sp)
    5338:	dc800615 	stw	r18,24(sp)
    533c:	e009883a 	mov	r4,fp
    5340:	a80b883a 	mov	r5,r21
    5344:	00043a00 	call	43a0 <quorem>
    5348:	e009883a 	mov	r4,fp
    534c:	880b883a 	mov	r5,r17
    5350:	102f883a 	mov	r23,r2
    5354:	000850c0 	call	850c <__mcmp>
    5358:	8009883a 	mov	r4,r16
    535c:	a80b883a 	mov	r5,r21
    5360:	a00d883a 	mov	r6,r20
    5364:	102d883a 	mov	r22,r2
    5368:	000856c0 	call	856c <__mdiff>
    536c:	1007883a 	mov	r3,r2
    5370:	10800317 	ldw	r2,12(r2)
    5374:	bc800c04 	addi	r18,r23,48
    5378:	1000971e 	bne	r2,zero,55d8 <_dtoa_r+0x1038>
    537c:	180b883a 	mov	r5,r3
    5380:	e009883a 	mov	r4,fp
    5384:	d8c01515 	stw	r3,84(sp)
    5388:	000850c0 	call	850c <__mcmp>
    538c:	d8c01517 	ldw	r3,84(sp)
    5390:	8009883a 	mov	r4,r16
    5394:	d8801515 	stw	r2,84(sp)
    5398:	180b883a 	mov	r5,r3
    539c:	0007ce00 	call	7ce0 <_Bfree>
    53a0:	d8801517 	ldw	r2,84(sp)
    53a4:	1000041e 	bne	r2,zero,53b8 <_dtoa_r+0xe18>
    53a8:	d9800317 	ldw	r6,12(sp)
    53ac:	3000021e 	bne	r6,zero,53b8 <_dtoa_r+0xe18>
    53b0:	d8c00617 	ldw	r3,24(sp)
    53b4:	18007626 	beq	r3,zero,5590 <_dtoa_r+0xff0>
    53b8:	b0005b16 	blt	r22,zero,5528 <_dtoa_r+0xf88>
    53bc:	b000041e 	bne	r22,zero,53d0 <_dtoa_r+0xe30>
    53c0:	d9000317 	ldw	r4,12(sp)
    53c4:	2000021e 	bne	r4,zero,53d0 <_dtoa_r+0xe30>
    53c8:	d8c00617 	ldw	r3,24(sp)
    53cc:	18005626 	beq	r3,zero,5528 <_dtoa_r+0xf88>
    53d0:	00814d16 	blt	zero,r2,5908 <_dtoa_r+0x1368>
    53d4:	d8c00417 	ldw	r3,16(sp)
    53d8:	9d800044 	addi	r22,r19,1
    53dc:	9c800005 	stb	r18,0(r19)
    53e0:	b02f883a 	mov	r23,r22
    53e4:	98c14c26 	beq	r19,r3,5918 <_dtoa_r+0x1378>
    53e8:	e00b883a 	mov	r5,fp
    53ec:	8009883a 	mov	r4,r16
    53f0:	01800284 	movi	r6,10
    53f4:	000f883a 	mov	r7,zero
    53f8:	0007d080 	call	7d08 <__multadd>
    53fc:	1039883a 	mov	fp,r2
    5400:	8d006d26 	beq	r17,r20,55b8 <_dtoa_r+0x1018>
    5404:	880b883a 	mov	r5,r17
    5408:	01800284 	movi	r6,10
    540c:	000f883a 	mov	r7,zero
    5410:	8009883a 	mov	r4,r16
    5414:	0007d080 	call	7d08 <__multadd>
    5418:	a00b883a 	mov	r5,r20
    541c:	8009883a 	mov	r4,r16
    5420:	01800284 	movi	r6,10
    5424:	000f883a 	mov	r7,zero
    5428:	1023883a 	mov	r17,r2
    542c:	0007d080 	call	7d08 <__multadd>
    5430:	1029883a 	mov	r20,r2
    5434:	b027883a 	mov	r19,r22
    5438:	003fc006 	br	533c <__alt_mem_Flash_flash_data+0xf400533c>
    543c:	a005883a 	mov	r2,r20
    5440:	003ede06 	br	4fbc <__alt_mem_Flash_flash_data+0xf4004fbc>
    5444:	01000044 	movi	r4,1
    5448:	d9000b15 	stw	r4,44(sp)
    544c:	d9802217 	ldw	r6,136(sp)
    5450:	0180dc0e 	bge	zero,r6,57c4 <_dtoa_r+0x1224>
    5454:	3023883a 	mov	r17,r6
    5458:	d9800c15 	stw	r6,48(sp)
    545c:	d9800615 	stw	r6,24(sp)
    5460:	003d1e06 	br	48dc <__alt_mem_Flash_flash_data+0xf40048dc>
    5464:	d8800617 	ldw	r2,24(sp)
    5468:	00be3716 	blt	zero,r2,4d48 <__alt_mem_Flash_flash_data+0xf4004d48>
    546c:	1000be1e 	bne	r2,zero,5768 <_dtoa_r+0x11c8>
    5470:	8809883a 	mov	r4,r17
    5474:	a00b883a 	mov	r5,r20
    5478:	000d883a 	mov	r6,zero
    547c:	01d00534 	movhi	r7,16404
    5480:	000d1cc0 	call	d1cc <__muldf3>
    5484:	1009883a 	mov	r4,r2
    5488:	180b883a 	mov	r5,r3
    548c:	900d883a 	mov	r6,r18
    5490:	980f883a 	mov	r7,r19
    5494:	000d00c0 	call	d00c <__gedf2>
    5498:	002b883a 	mov	r21,zero
    549c:	0023883a 	mov	r17,zero
    54a0:	10007a16 	blt	r2,zero,568c <_dtoa_r+0x10ec>
    54a4:	d9002217 	ldw	r4,136(sp)
    54a8:	ddc00717 	ldw	r23,28(sp)
    54ac:	0108303a 	nor	r4,zero,r4
    54b0:	d9000515 	stw	r4,20(sp)
    54b4:	8009883a 	mov	r4,r16
    54b8:	a80b883a 	mov	r5,r21
    54bc:	0007ce00 	call	7ce0 <_Bfree>
    54c0:	883f751e 	bne	r17,zero,5298 <__alt_mem_Flash_flash_data+0xf4005298>
    54c4:	003de406 	br	4c58 <__alt_mem_Flash_flash_data+0xf4004c58>
    54c8:	e00b883a 	mov	r5,fp
    54cc:	8009883a 	mov	r4,r16
    54d0:	000827c0 	call	827c <__pow5mult>
    54d4:	1039883a 	mov	fp,r2
    54d8:	003ed306 	br	5028 <__alt_mem_Flash_flash_data+0xf4005028>
    54dc:	903ee01e 	bne	r18,zero,5060 <__alt_mem_Flash_flash_data+0xf4005060>
    54e0:	00800434 	movhi	r2,16
    54e4:	10bfffc4 	addi	r2,r2,-1
    54e8:	9884703a 	and	r2,r19,r2
    54ec:	103f081e 	bne	r2,zero,5110 <__alt_mem_Flash_flash_data+0xf4005110>
    54f0:	9cdffc2c 	andhi	r19,r19,32752
    54f4:	983f0626 	beq	r19,zero,5110 <__alt_mem_Flash_flash_data+0xf4005110>
    54f8:	d8800817 	ldw	r2,32(sp)
    54fc:	b5800044 	addi	r22,r22,1
    5500:	04c00044 	movi	r19,1
    5504:	10800044 	addi	r2,r2,1
    5508:	d8800815 	stw	r2,32(sp)
    550c:	003f0106 	br	5114 <__alt_mem_Flash_flash_data+0xf4005114>
    5510:	d9800f17 	ldw	r6,60(sp)
    5514:	30016826 	beq	r6,zero,5ab8 <_dtoa_r+0x1518>
    5518:	10810cc4 	addi	r2,r2,1075
    551c:	dd400917 	ldw	r21,36(sp)
    5520:	dd000817 	ldw	r20,32(sp)
    5524:	003e9906 	br	4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    5528:	9011883a 	mov	r8,r18
    552c:	4007883a 	mov	r3,r8
    5530:	e02d883a 	mov	r22,fp
    5534:	0080100e 	bge	zero,r2,5578 <_dtoa_r+0xfd8>
    5538:	01800044 	movi	r6,1
    553c:	8009883a 	mov	r4,r16
    5540:	e00b883a 	mov	r5,fp
    5544:	da001515 	stw	r8,84(sp)
    5548:	da001715 	stw	r8,92(sp)
    554c:	00083bc0 	call	83bc <__lshift>
    5550:	1009883a 	mov	r4,r2
    5554:	a80b883a 	mov	r5,r21
    5558:	102d883a 	mov	r22,r2
    555c:	000850c0 	call	850c <__mcmp>
    5560:	d8c01517 	ldw	r3,84(sp)
    5564:	da001717 	ldw	r8,92(sp)
    5568:	0081a50e 	bge	zero,r2,5c00 <_dtoa_r+0x1660>
    556c:	00800e44 	movi	r2,57
    5570:	40817b26 	beq	r8,r2,5b60 <_dtoa_r+0x15c0>
    5574:	40c00044 	addi	r3,r8,1
    5578:	8825883a 	mov	r18,r17
    557c:	9dc00044 	addi	r23,r19,1
    5580:	98c00005 	stb	r3,0(r19)
    5584:	a023883a 	mov	r17,r20
    5588:	b039883a 	mov	fp,r22
    558c:	003f3906 	br	5274 <__alt_mem_Flash_flash_data+0xf4005274>
    5590:	00800e44 	movi	r2,57
    5594:	9011883a 	mov	r8,r18
    5598:	90817226 	beq	r18,r2,5b64 <_dtoa_r+0x15c4>
    559c:	0580010e 	bge	zero,r22,55a4 <_dtoa_r+0x1004>
    55a0:	ba000c44 	addi	r8,r23,49
    55a4:	8825883a 	mov	r18,r17
    55a8:	9dc00044 	addi	r23,r19,1
    55ac:	9a000005 	stb	r8,0(r19)
    55b0:	a023883a 	mov	r17,r20
    55b4:	003f2f06 	br	5274 <__alt_mem_Flash_flash_data+0xf4005274>
    55b8:	880b883a 	mov	r5,r17
    55bc:	8009883a 	mov	r4,r16
    55c0:	01800284 	movi	r6,10
    55c4:	000f883a 	mov	r7,zero
    55c8:	0007d080 	call	7d08 <__multadd>
    55cc:	1023883a 	mov	r17,r2
    55d0:	1029883a 	mov	r20,r2
    55d4:	003f9706 	br	5434 <__alt_mem_Flash_flash_data+0xf4005434>
    55d8:	8009883a 	mov	r4,r16
    55dc:	180b883a 	mov	r5,r3
    55e0:	0007ce00 	call	7ce0 <_Bfree>
    55e4:	00800044 	movi	r2,1
    55e8:	003f7306 	br	53b8 <__alt_mem_Flash_flash_data+0xf40053b8>
    55ec:	e009883a 	mov	r4,fp
    55f0:	a80b883a 	mov	r5,r21
    55f4:	000850c0 	call	850c <__mcmp>
    55f8:	103ee60e 	bge	r2,zero,5194 <__alt_mem_Flash_flash_data+0xf4005194>
    55fc:	8009883a 	mov	r4,r16
    5600:	e00b883a 	mov	r5,fp
    5604:	01800284 	movi	r6,10
    5608:	000f883a 	mov	r7,zero
    560c:	0007d080 	call	7d08 <__multadd>
    5610:	d9000517 	ldw	r4,20(sp)
    5614:	d9800b17 	ldw	r6,44(sp)
    5618:	1039883a 	mov	fp,r2
    561c:	213fffc4 	addi	r4,r4,-1
    5620:	d9000515 	stw	r4,20(sp)
    5624:	303f2d1e 	bne	r6,zero,52dc <__alt_mem_Flash_flash_data+0xf40052dc>
    5628:	d9000c17 	ldw	r4,48(sp)
    562c:	0101780e 	bge	zero,r4,5c10 <_dtoa_r+0x1670>
    5630:	d9000615 	stw	r4,24(sp)
    5634:	003edb06 	br	51a4 <__alt_mem_Flash_flash_data+0xf40051a4>
    5638:	00800084 	movi	r2,2
    563c:	30818e1e 	bne	r6,r2,5c78 <_dtoa_r+0x16d8>
    5640:	d8000b15 	stw	zero,44(sp)
    5644:	003f8106 	br	544c <__alt_mem_Flash_flash_data+0xf400544c>
    5648:	d8800717 	ldw	r2,28(sp)
    564c:	003c0306 	br	465c <__alt_mem_Flash_flash_data+0xf400465c>
    5650:	d9000317 	ldw	r4,12(sp)
    5654:	00800084 	movi	r2,2
    5658:	113ed00e 	bge	r2,r4,519c <__alt_mem_Flash_flash_data+0xf400519c>
    565c:	d8c00617 	ldw	r3,24(sp)
    5660:	183f901e 	bne	r3,zero,54a4 <__alt_mem_Flash_flash_data+0xf40054a4>
    5664:	a80b883a 	mov	r5,r21
    5668:	8009883a 	mov	r4,r16
    566c:	01800144 	movi	r6,5
    5670:	000f883a 	mov	r7,zero
    5674:	0007d080 	call	7d08 <__multadd>
    5678:	e009883a 	mov	r4,fp
    567c:	100b883a 	mov	r5,r2
    5680:	102b883a 	mov	r21,r2
    5684:	000850c0 	call	850c <__mcmp>
    5688:	00bf860e 	bge	zero,r2,54a4 <__alt_mem_Flash_flash_data+0xf40054a4>
    568c:	d9800717 	ldw	r6,28(sp)
    5690:	00800c44 	movi	r2,49
    5694:	30800005 	stb	r2,0(r6)
    5698:	d8800517 	ldw	r2,20(sp)
    569c:	35c00044 	addi	r23,r6,1
    56a0:	10800044 	addi	r2,r2,1
    56a4:	d8800515 	stw	r2,20(sp)
    56a8:	003f8206 	br	54b4 <__alt_mem_Flash_flash_data+0xf40054b4>
    56ac:	903e981e 	bne	r18,zero,5110 <__alt_mem_Flash_flash_data+0xf4005110>
    56b0:	003f8b06 	br	54e0 <__alt_mem_Flash_flash_data+0xf40054e0>
    56b4:	d9800517 	ldw	r6,20(sp)
    56b8:	d8c00717 	ldw	r3,28(sp)
    56bc:	00800c44 	movi	r2,49
    56c0:	31800044 	addi	r6,r6,1
    56c4:	d9800515 	stw	r6,20(sp)
    56c8:	18800005 	stb	r2,0(r3)
    56cc:	003ee906 	br	5274 <__alt_mem_Flash_flash_data+0xf4005274>
    56d0:	dc000317 	ldw	r16,12(sp)
    56d4:	003d6006 	br	4c58 <__alt_mem_Flash_flash_data+0xf4004c58>
    56d8:	8809883a 	mov	r4,r17
    56dc:	000e2480 	call	e248 <__floatsidf>
    56e0:	a009883a 	mov	r4,r20
    56e4:	a80b883a 	mov	r5,r21
    56e8:	100d883a 	mov	r6,r2
    56ec:	180f883a 	mov	r7,r3
    56f0:	000d1cc0 	call	d1cc <__muldf3>
    56f4:	1009883a 	mov	r4,r2
    56f8:	180b883a 	mov	r5,r3
    56fc:	000d883a 	mov	r6,zero
    5700:	01d00734 	movhi	r7,16412
    5704:	000be200 	call	be20 <__adddf3>
    5708:	1023883a 	mov	r17,r2
    570c:	00bf3034 	movhi	r2,64704
    5710:	1885883a 	add	r2,r3,r2
    5714:	d8800e15 	stw	r2,56(sp)
    5718:	a009883a 	mov	r4,r20
    571c:	a80b883a 	mov	r5,r21
    5720:	000d883a 	mov	r6,zero
    5724:	01d00534 	movhi	r7,16404
    5728:	000d8f00 	call	d8f0 <__subdf3>
    572c:	d9c00e17 	ldw	r7,56(sp)
    5730:	1009883a 	mov	r4,r2
    5734:	180b883a 	mov	r5,r3
    5738:	880d883a 	mov	r6,r17
    573c:	102b883a 	mov	r21,r2
    5740:	1829883a 	mov	r20,r3
    5744:	000d00c0 	call	d00c <__gedf2>
    5748:	00807716 	blt	zero,r2,5928 <_dtoa_r+0x1388>
    574c:	d8800e17 	ldw	r2,56(sp)
    5750:	a809883a 	mov	r4,r21
    5754:	a00b883a 	mov	r5,r20
    5758:	11e0003c 	xorhi	r7,r2,32768
    575c:	880d883a 	mov	r6,r17
    5760:	000d0ec0 	call	d0ec <__ledf2>
    5764:	103d6b0e 	bge	r2,zero,4d14 <__alt_mem_Flash_flash_data+0xf4004d14>
    5768:	002b883a 	mov	r21,zero
    576c:	0023883a 	mov	r17,zero
    5770:	003f4c06 	br	54a4 <__alt_mem_Flash_flash_data+0xf40054a4>
    5774:	d9800917 	ldw	r6,36(sp)
    5778:	e00b883a 	mov	r5,fp
    577c:	8009883a 	mov	r4,r16
    5780:	000827c0 	call	827c <__pow5mult>
    5784:	1039883a 	mov	fp,r2
    5788:	003e2706 	br	5028 <__alt_mem_Flash_flash_data+0xf4005028>
    578c:	d8000b15 	stw	zero,44(sp)
    5790:	003c4906 	br	48b8 <__alt_mem_Flash_flash_data+0xf40048b8>
    5794:	d9000917 	ldw	r4,36(sp)
    5798:	d9800a17 	ldw	r6,40(sp)
    579c:	dd400915 	stw	r21,36(sp)
    57a0:	a905c83a 	sub	r2,r21,r4
    57a4:	308d883a 	add	r6,r6,r2
    57a8:	d9800a15 	stw	r6,40(sp)
    57ac:	002b883a 	mov	r21,zero
    57b0:	003df206 	br	4f7c <__alt_mem_Flash_flash_data+0xf4004f7c>
    57b4:	dc800e15 	stw	r18,56(sp)
    57b8:	982b883a 	mov	r21,r19
    57bc:	04400084 	movi	r17,2
    57c0:	003c7406 	br	4994 <__alt_mem_Flash_flash_data+0xf4004994>
    57c4:	04400044 	movi	r17,1
    57c8:	dc400c15 	stw	r17,48(sp)
    57cc:	dc400615 	stw	r17,24(sp)
    57d0:	dc402215 	stw	r17,136(sp)
    57d4:	80001115 	stw	zero,68(r16)
    57d8:	000b883a 	mov	r5,zero
    57dc:	003c4a06 	br	4908 <__alt_mem_Flash_flash_data+0xf4004908>
    57e0:	3023883a 	mov	r17,r6
    57e4:	003ffb06 	br	57d4 <__alt_mem_Flash_flash_data+0xf40057d4>
    57e8:	1000021e 	bne	r2,zero,57f4 <_dtoa_r+0x1254>
    57ec:	4200004c 	andi	r8,r8,1
    57f0:	403e8f1e 	bne	r8,zero,5230 <__alt_mem_Flash_flash_data+0xf4005230>
    57f4:	01000c04 	movi	r4,48
    57f8:	00000106 	br	5800 <_dtoa_r+0x1260>
    57fc:	102f883a 	mov	r23,r2
    5800:	b8bfffc4 	addi	r2,r23,-1
    5804:	10c00007 	ldb	r3,0(r2)
    5808:	193ffc26 	beq	r3,r4,57fc <__alt_mem_Flash_flash_data+0xf40057fc>
    580c:	003e9906 	br	5274 <__alt_mem_Flash_flash_data+0xf4005274>
    5810:	d9000517 	ldw	r4,20(sp)
    5814:	012fc83a 	sub	r23,zero,r4
    5818:	b800ad26 	beq	r23,zero,5ad0 <_dtoa_r+0x1530>
    581c:	b88003cc 	andi	r2,r23,15
    5820:	100490fa 	slli	r2,r2,3
    5824:	00c000b4 	movhi	r3,2
    5828:	18ee3e04 	addi	r3,r3,-18184
    582c:	1885883a 	add	r2,r3,r2
    5830:	11800017 	ldw	r6,0(r2)
    5834:	11c00117 	ldw	r7,4(r2)
    5838:	b82fd13a 	srai	r23,r23,4
    583c:	9009883a 	mov	r4,r18
    5840:	980b883a 	mov	r5,r19
    5844:	000d1cc0 	call	d1cc <__muldf3>
    5848:	1029883a 	mov	r20,r2
    584c:	182b883a 	mov	r21,r3
    5850:	b800f426 	beq	r23,zero,5c24 <_dtoa_r+0x1684>
    5854:	020000b4 	movhi	r8,2
    5858:	422e3404 	addi	r8,r8,-18224
    585c:	8029883a 	mov	r20,r16
    5860:	04400084 	movi	r17,2
    5864:	4021883a 	mov	r16,r8
    5868:	b980004c 	andi	r6,r23,1
    586c:	1009883a 	mov	r4,r2
    5870:	b82fd07a 	srai	r23,r23,1
    5874:	180b883a 	mov	r5,r3
    5878:	30000426 	beq	r6,zero,588c <_dtoa_r+0x12ec>
    587c:	81800017 	ldw	r6,0(r16)
    5880:	81c00117 	ldw	r7,4(r16)
    5884:	8c400044 	addi	r17,r17,1
    5888:	000d1cc0 	call	d1cc <__muldf3>
    588c:	84000204 	addi	r16,r16,8
    5890:	b83ff51e 	bne	r23,zero,5868 <__alt_mem_Flash_flash_data+0xf4005868>
    5894:	a021883a 	mov	r16,r20
    5898:	182b883a 	mov	r21,r3
    589c:	1029883a 	mov	r20,r2
    58a0:	003c5506 	br	49f8 <__alt_mem_Flash_flash_data+0xf40049f8>
    58a4:	d9800517 	ldw	r6,20(sp)
    58a8:	d9000717 	ldw	r4,28(sp)
    58ac:	00c00c04 	movi	r3,48
    58b0:	31800044 	addi	r6,r6,1
    58b4:	d9800515 	stw	r6,20(sp)
    58b8:	20c00005 	stb	r3,0(r4)
    58bc:	02000c44 	movi	r8,49
    58c0:	003da206 	br	4f4c <__alt_mem_Flash_flash_data+0xf4004f4c>
    58c4:	89400117 	ldw	r5,4(r17)
    58c8:	8009883a 	mov	r4,r16
    58cc:	0007c380 	call	7c38 <_Balloc>
    58d0:	89800417 	ldw	r6,16(r17)
    58d4:	11000304 	addi	r4,r2,12
    58d8:	89400304 	addi	r5,r17,12
    58dc:	31800084 	addi	r6,r6,2
    58e0:	318d883a 	add	r6,r6,r6
    58e4:	318d883a 	add	r6,r6,r6
    58e8:	1027883a 	mov	r19,r2
    58ec:	00078800 	call	7880 <memcpy>
    58f0:	8009883a 	mov	r4,r16
    58f4:	980b883a 	mov	r5,r19
    58f8:	01800044 	movi	r6,1
    58fc:	00083bc0 	call	83bc <__lshift>
    5900:	1029883a 	mov	r20,r2
    5904:	003e8606 	br	5320 <__alt_mem_Flash_flash_data+0xf4005320>
    5908:	00800e44 	movi	r2,57
    590c:	90809526 	beq	r18,r2,5b64 <_dtoa_r+0x15c4>
    5910:	92000044 	addi	r8,r18,1
    5914:	003f2306 	br	55a4 <__alt_mem_Flash_flash_data+0xf40055a4>
    5918:	9011883a 	mov	r8,r18
    591c:	8825883a 	mov	r18,r17
    5920:	a023883a 	mov	r17,r20
    5924:	003e3706 	br	5204 <__alt_mem_Flash_flash_data+0xf4005204>
    5928:	002b883a 	mov	r21,zero
    592c:	0023883a 	mov	r17,zero
    5930:	003f5606 	br	568c <__alt_mem_Flash_flash_data+0xf400568c>
    5934:	51bfffc4 	addi	r6,r10,-1
    5938:	300490fa 	slli	r2,r6,3
    593c:	00c000b4 	movhi	r3,2
    5940:	18ee3e04 	addi	r3,r3,-18184
    5944:	1885883a 	add	r2,r3,r2
    5948:	d9c00e17 	ldw	r7,56(sp)
    594c:	11000017 	ldw	r4,0(r2)
    5950:	11400117 	ldw	r5,4(r2)
    5954:	d8800717 	ldw	r2,28(sp)
    5958:	d9801015 	stw	r6,64(sp)
    595c:	880d883a 	mov	r6,r17
    5960:	da801615 	stw	r10,88(sp)
    5964:	15c00044 	addi	r23,r2,1
    5968:	000d1cc0 	call	d1cc <__muldf3>
    596c:	a80b883a 	mov	r5,r21
    5970:	a009883a 	mov	r4,r20
    5974:	d8c01115 	stw	r3,68(sp)
    5978:	d8800e15 	stw	r2,56(sp)
    597c:	000e1c00 	call	e1c0 <__fixdfsi>
    5980:	1009883a 	mov	r4,r2
    5984:	1023883a 	mov	r17,r2
    5988:	000e2480 	call	e248 <__floatsidf>
    598c:	a009883a 	mov	r4,r20
    5990:	a80b883a 	mov	r5,r21
    5994:	100d883a 	mov	r6,r2
    5998:	180f883a 	mov	r7,r3
    599c:	000d8f00 	call	d8f0 <__subdf3>
    59a0:	1813883a 	mov	r9,r3
    59a4:	d8c00717 	ldw	r3,28(sp)
    59a8:	8c400c04 	addi	r17,r17,48
    59ac:	1011883a 	mov	r8,r2
    59b0:	1c400005 	stb	r17,0(r3)
    59b4:	da801617 	ldw	r10,88(sp)
    59b8:	00800044 	movi	r2,1
    59bc:	50802326 	beq	r10,r2,5a4c <_dtoa_r+0x14ac>
    59c0:	d8800717 	ldw	r2,28(sp)
    59c4:	b82b883a 	mov	r21,r23
    59c8:	dc001315 	stw	r16,76(sp)
    59cc:	12a9883a 	add	r20,r2,r10
    59d0:	4807883a 	mov	r3,r9
    59d4:	4005883a 	mov	r2,r8
    59d8:	dc801415 	stw	r18,80(sp)
    59dc:	000d883a 	mov	r6,zero
    59e0:	01d00934 	movhi	r7,16420
    59e4:	1009883a 	mov	r4,r2
    59e8:	180b883a 	mov	r5,r3
    59ec:	000d1cc0 	call	d1cc <__muldf3>
    59f0:	180b883a 	mov	r5,r3
    59f4:	1009883a 	mov	r4,r2
    59f8:	1821883a 	mov	r16,r3
    59fc:	1025883a 	mov	r18,r2
    5a00:	000e1c00 	call	e1c0 <__fixdfsi>
    5a04:	1009883a 	mov	r4,r2
    5a08:	1023883a 	mov	r17,r2
    5a0c:	000e2480 	call	e248 <__floatsidf>
    5a10:	9009883a 	mov	r4,r18
    5a14:	800b883a 	mov	r5,r16
    5a18:	100d883a 	mov	r6,r2
    5a1c:	180f883a 	mov	r7,r3
    5a20:	8c400c04 	addi	r17,r17,48
    5a24:	000d8f00 	call	d8f0 <__subdf3>
    5a28:	ad400044 	addi	r21,r21,1
    5a2c:	ac7fffc5 	stb	r17,-1(r21)
    5a30:	ad3fea1e 	bne	r21,r20,59dc <__alt_mem_Flash_flash_data+0xf40059dc>
    5a34:	1813883a 	mov	r9,r3
    5a38:	d8c01017 	ldw	r3,64(sp)
    5a3c:	dc001317 	ldw	r16,76(sp)
    5a40:	dc801417 	ldw	r18,80(sp)
    5a44:	1011883a 	mov	r8,r2
    5a48:	b8ef883a 	add	r23,r23,r3
    5a4c:	d9000e17 	ldw	r4,56(sp)
    5a50:	d9401117 	ldw	r5,68(sp)
    5a54:	000d883a 	mov	r6,zero
    5a58:	01cff834 	movhi	r7,16352
    5a5c:	da001715 	stw	r8,92(sp)
    5a60:	da401515 	stw	r9,84(sp)
    5a64:	000be200 	call	be20 <__adddf3>
    5a68:	da001717 	ldw	r8,92(sp)
    5a6c:	da401517 	ldw	r9,84(sp)
    5a70:	1009883a 	mov	r4,r2
    5a74:	400d883a 	mov	r6,r8
    5a78:	480f883a 	mov	r7,r9
    5a7c:	180b883a 	mov	r5,r3
    5a80:	000d0ec0 	call	d0ec <__ledf2>
    5a84:	da001717 	ldw	r8,92(sp)
    5a88:	da401517 	ldw	r9,84(sp)
    5a8c:	10003b0e 	bge	r2,zero,5b7c <_dtoa_r+0x15dc>
    5a90:	d9001217 	ldw	r4,72(sp)
    5a94:	bd7fffc3 	ldbu	r21,-1(r23)
    5a98:	d9000515 	stw	r4,20(sp)
    5a9c:	003d1c06 	br	4f10 <__alt_mem_Flash_flash_data+0xf4004f10>
    5aa0:	d8c00817 	ldw	r3,32(sp)
    5aa4:	18a9c83a 	sub	r20,r3,r2
    5aa8:	0005883a 	mov	r2,zero
    5aac:	003d3706 	br	4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    5ab0:	00800044 	movi	r2,1
    5ab4:	003dd006 	br	51f8 <__alt_mem_Flash_flash_data+0xf40051f8>
    5ab8:	d8c00217 	ldw	r3,8(sp)
    5abc:	00800d84 	movi	r2,54
    5ac0:	dd400917 	ldw	r21,36(sp)
    5ac4:	10c5c83a 	sub	r2,r2,r3
    5ac8:	dd000817 	ldw	r20,32(sp)
    5acc:	003d2f06 	br	4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    5ad0:	9029883a 	mov	r20,r18
    5ad4:	982b883a 	mov	r21,r19
    5ad8:	04400084 	movi	r17,2
    5adc:	003bc606 	br	49f8 <__alt_mem_Flash_flash_data+0xf40049f8>
    5ae0:	d8800617 	ldw	r2,24(sp)
    5ae4:	103efc26 	beq	r2,zero,56d8 <__alt_mem_Flash_flash_data+0xf40056d8>
    5ae8:	d8c00c17 	ldw	r3,48(sp)
    5aec:	00fc890e 	bge	zero,r3,4d14 <__alt_mem_Flash_flash_data+0xf4004d14>
    5af0:	a80b883a 	mov	r5,r21
    5af4:	a009883a 	mov	r4,r20
    5af8:	000d883a 	mov	r6,zero
    5afc:	01d00934 	movhi	r7,16420
    5b00:	000d1cc0 	call	d1cc <__muldf3>
    5b04:	89000044 	addi	r4,r17,1
    5b08:	1029883a 	mov	r20,r2
    5b0c:	182b883a 	mov	r21,r3
    5b10:	000e2480 	call	e248 <__floatsidf>
    5b14:	a009883a 	mov	r4,r20
    5b18:	a80b883a 	mov	r5,r21
    5b1c:	100d883a 	mov	r6,r2
    5b20:	180f883a 	mov	r7,r3
    5b24:	000d1cc0 	call	d1cc <__muldf3>
    5b28:	1009883a 	mov	r4,r2
    5b2c:	180b883a 	mov	r5,r3
    5b30:	000d883a 	mov	r6,zero
    5b34:	01d00734 	movhi	r7,16412
    5b38:	000be200 	call	be20 <__adddf3>
    5b3c:	d9000517 	ldw	r4,20(sp)
    5b40:	1023883a 	mov	r17,r2
    5b44:	00bf3034 	movhi	r2,64704
    5b48:	213fffc4 	addi	r4,r4,-1
    5b4c:	1885883a 	add	r2,r3,r2
    5b50:	d9001215 	stw	r4,72(sp)
    5b54:	d8800e15 	stw	r2,56(sp)
    5b58:	da800c17 	ldw	r10,48(sp)
    5b5c:	003bc306 	br	4a6c <__alt_mem_Flash_flash_data+0xf4004a6c>
    5b60:	b039883a 	mov	fp,r22
    5b64:	01000e44 	movi	r4,57
    5b68:	8825883a 	mov	r18,r17
    5b6c:	9dc00044 	addi	r23,r19,1
    5b70:	99000005 	stb	r4,0(r19)
    5b74:	a023883a 	mov	r17,r20
    5b78:	003dae06 	br	5234 <__alt_mem_Flash_flash_data+0xf4005234>
    5b7c:	d9800e17 	ldw	r6,56(sp)
    5b80:	d9c01117 	ldw	r7,68(sp)
    5b84:	0009883a 	mov	r4,zero
    5b88:	014ff834 	movhi	r5,16352
    5b8c:	da001715 	stw	r8,92(sp)
    5b90:	da401515 	stw	r9,84(sp)
    5b94:	000d8f00 	call	d8f0 <__subdf3>
    5b98:	da001717 	ldw	r8,92(sp)
    5b9c:	da401517 	ldw	r9,84(sp)
    5ba0:	1009883a 	mov	r4,r2
    5ba4:	180b883a 	mov	r5,r3
    5ba8:	400d883a 	mov	r6,r8
    5bac:	480f883a 	mov	r7,r9
    5bb0:	000d00c0 	call	d00c <__gedf2>
    5bb4:	00bc570e 	bge	zero,r2,4d14 <__alt_mem_Flash_flash_data+0xf4004d14>
    5bb8:	01000c04 	movi	r4,48
    5bbc:	00000106 	br	5bc4 <_dtoa_r+0x1624>
    5bc0:	102f883a 	mov	r23,r2
    5bc4:	b8bfffc4 	addi	r2,r23,-1
    5bc8:	10c00007 	ldb	r3,0(r2)
    5bcc:	193ffc26 	beq	r3,r4,5bc0 <__alt_mem_Flash_flash_data+0xf4005bc0>
    5bd0:	d9801217 	ldw	r6,72(sp)
    5bd4:	d9800515 	stw	r6,20(sp)
    5bd8:	003c1f06 	br	4c58 <__alt_mem_Flash_flash_data+0xf4004c58>
    5bdc:	d8801217 	ldw	r2,72(sp)
    5be0:	dc001117 	ldw	r16,68(sp)
    5be4:	d8800515 	stw	r2,20(sp)
    5be8:	003cc906 	br	4f10 <__alt_mem_Flash_flash_data+0xf4004f10>
    5bec:	dd801317 	ldw	r22,76(sp)
    5bf0:	dc001117 	ldw	r16,68(sp)
    5bf4:	dcc01417 	ldw	r19,80(sp)
    5bf8:	dc801017 	ldw	r18,64(sp)
    5bfc:	003c4506 	br	4d14 <__alt_mem_Flash_flash_data+0xf4004d14>
    5c00:	103e5d1e 	bne	r2,zero,5578 <__alt_mem_Flash_flash_data+0xf4005578>
    5c04:	4080004c 	andi	r2,r8,1
    5c08:	103e5b26 	beq	r2,zero,5578 <__alt_mem_Flash_flash_data+0xf4005578>
    5c0c:	003e5706 	br	556c <__alt_mem_Flash_flash_data+0xf400556c>
    5c10:	d8c00317 	ldw	r3,12(sp)
    5c14:	00800084 	movi	r2,2
    5c18:	10c00a16 	blt	r2,r3,5c44 <_dtoa_r+0x16a4>
    5c1c:	d9000c17 	ldw	r4,48(sp)
    5c20:	003e8306 	br	5630 <__alt_mem_Flash_flash_data+0xf4005630>
    5c24:	04400084 	movi	r17,2
    5c28:	003b7306 	br	49f8 <__alt_mem_Flash_flash_data+0xf40049f8>
    5c2c:	d9801217 	ldw	r6,72(sp)
    5c30:	d9800515 	stw	r6,20(sp)
    5c34:	003cb606 	br	4f10 <__alt_mem_Flash_flash_data+0xf4004f10>
    5c38:	d9001217 	ldw	r4,72(sp)
    5c3c:	d9000515 	stw	r4,20(sp)
    5c40:	003c0506 	br	4c58 <__alt_mem_Flash_flash_data+0xf4004c58>
    5c44:	d9800c17 	ldw	r6,48(sp)
    5c48:	d9800615 	stw	r6,24(sp)
    5c4c:	003e8306 	br	565c <__alt_mem_Flash_flash_data+0xf400565c>
    5c50:	d9800317 	ldw	r6,12(sp)
    5c54:	00800084 	movi	r2,2
    5c58:	11800216 	blt	r2,r6,5c64 <_dtoa_r+0x16c4>
    5c5c:	d8800c17 	ldw	r2,48(sp)
    5c60:	003da606 	br	52fc <__alt_mem_Flash_flash_data+0xf40052fc>
    5c64:	d8800c17 	ldw	r2,48(sp)
    5c68:	d8800615 	stw	r2,24(sp)
    5c6c:	003e7b06 	br	565c <__alt_mem_Flash_flash_data+0xf400565c>
    5c70:	05000044 	movi	r20,1
    5c74:	003b0506 	br	488c <__alt_mem_Flash_flash_data+0xf400488c>
    5c78:	8009883a 	mov	r4,r16
    5c7c:	80001115 	stw	zero,68(r16)
    5c80:	000b883a 	mov	r5,zero
    5c84:	0007c380 	call	7c38 <_Balloc>
    5c88:	d8800715 	stw	r2,28(sp)
    5c8c:	d8c00717 	ldw	r3,28(sp)
    5c90:	00bfffc4 	movi	r2,-1
    5c94:	01000044 	movi	r4,1
    5c98:	d8800c15 	stw	r2,48(sp)
    5c9c:	80c01015 	stw	r3,64(r16)
    5ca0:	d9000b15 	stw	r4,44(sp)
    5ca4:	d8800615 	stw	r2,24(sp)
    5ca8:	d8002215 	stw	zero,136(sp)
    5cac:	003c1906 	br	4d14 <__alt_mem_Flash_flash_data+0xf4004d14>
    5cb0:	193d2926 	beq	r3,r4,5158 <__alt_mem_Flash_flash_data+0xf4005158>
    5cb4:	00c00f04 	movi	r3,60
    5cb8:	1885c83a 	sub	r2,r3,r2
    5cbc:	003d7b06 	br	52ac <__alt_mem_Flash_flash_data+0xf40052ac>
    5cc0:	000b883a 	mov	r5,zero
    5cc4:	003b1006 	br	4908 <__alt_mem_Flash_flash_data+0xf4004908>

00005cc8 <__sflush_r>:
    5cc8:	2880030b 	ldhu	r2,12(r5)
    5ccc:	defffb04 	addi	sp,sp,-20
    5cd0:	dcc00315 	stw	r19,12(sp)
    5cd4:	dc400115 	stw	r17,4(sp)
    5cd8:	dfc00415 	stw	ra,16(sp)
    5cdc:	dc800215 	stw	r18,8(sp)
    5ce0:	dc000015 	stw	r16,0(sp)
    5ce4:	10c0020c 	andi	r3,r2,8
    5ce8:	2823883a 	mov	r17,r5
    5cec:	2027883a 	mov	r19,r4
    5cf0:	1800311e 	bne	r3,zero,5db8 <__sflush_r+0xf0>
    5cf4:	28c00117 	ldw	r3,4(r5)
    5cf8:	10820014 	ori	r2,r2,2048
    5cfc:	2880030d 	sth	r2,12(r5)
    5d00:	00c04b0e 	bge	zero,r3,5e30 <__sflush_r+0x168>
    5d04:	8a000a17 	ldw	r8,40(r17)
    5d08:	40002326 	beq	r8,zero,5d98 <__sflush_r+0xd0>
    5d0c:	9c000017 	ldw	r16,0(r19)
    5d10:	10c4000c 	andi	r3,r2,4096
    5d14:	98000015 	stw	zero,0(r19)
    5d18:	18004826 	beq	r3,zero,5e3c <__sflush_r+0x174>
    5d1c:	89801417 	ldw	r6,80(r17)
    5d20:	10c0010c 	andi	r3,r2,4
    5d24:	18000626 	beq	r3,zero,5d40 <__sflush_r+0x78>
    5d28:	88c00117 	ldw	r3,4(r17)
    5d2c:	88800c17 	ldw	r2,48(r17)
    5d30:	30cdc83a 	sub	r6,r6,r3
    5d34:	10000226 	beq	r2,zero,5d40 <__sflush_r+0x78>
    5d38:	88800f17 	ldw	r2,60(r17)
    5d3c:	308dc83a 	sub	r6,r6,r2
    5d40:	89400717 	ldw	r5,28(r17)
    5d44:	9809883a 	mov	r4,r19
    5d48:	000f883a 	mov	r7,zero
    5d4c:	403ee83a 	callr	r8
    5d50:	00ffffc4 	movi	r3,-1
    5d54:	10c04426 	beq	r2,r3,5e68 <__sflush_r+0x1a0>
    5d58:	88c0030b 	ldhu	r3,12(r17)
    5d5c:	89000417 	ldw	r4,16(r17)
    5d60:	88000115 	stw	zero,4(r17)
    5d64:	197dffcc 	andi	r5,r3,63487
    5d68:	8940030d 	sth	r5,12(r17)
    5d6c:	89000015 	stw	r4,0(r17)
    5d70:	18c4000c 	andi	r3,r3,4096
    5d74:	18002c1e 	bne	r3,zero,5e28 <__sflush_r+0x160>
    5d78:	89400c17 	ldw	r5,48(r17)
    5d7c:	9c000015 	stw	r16,0(r19)
    5d80:	28000526 	beq	r5,zero,5d98 <__sflush_r+0xd0>
    5d84:	88801004 	addi	r2,r17,64
    5d88:	28800226 	beq	r5,r2,5d94 <__sflush_r+0xcc>
    5d8c:	9809883a 	mov	r4,r19
    5d90:	00064200 	call	6420 <_free_r>
    5d94:	88000c15 	stw	zero,48(r17)
    5d98:	0005883a 	mov	r2,zero
    5d9c:	dfc00417 	ldw	ra,16(sp)
    5da0:	dcc00317 	ldw	r19,12(sp)
    5da4:	dc800217 	ldw	r18,8(sp)
    5da8:	dc400117 	ldw	r17,4(sp)
    5dac:	dc000017 	ldw	r16,0(sp)
    5db0:	dec00504 	addi	sp,sp,20
    5db4:	f800283a 	ret
    5db8:	2c800417 	ldw	r18,16(r5)
    5dbc:	903ff626 	beq	r18,zero,5d98 <__alt_mem_Flash_flash_data+0xf4005d98>
    5dc0:	2c000017 	ldw	r16,0(r5)
    5dc4:	108000cc 	andi	r2,r2,3
    5dc8:	2c800015 	stw	r18,0(r5)
    5dcc:	84a1c83a 	sub	r16,r16,r18
    5dd0:	1000131e 	bne	r2,zero,5e20 <__sflush_r+0x158>
    5dd4:	28800517 	ldw	r2,20(r5)
    5dd8:	88800215 	stw	r2,8(r17)
    5ddc:	04000316 	blt	zero,r16,5dec <__sflush_r+0x124>
    5de0:	003fed06 	br	5d98 <__alt_mem_Flash_flash_data+0xf4005d98>
    5de4:	90a5883a 	add	r18,r18,r2
    5de8:	043feb0e 	bge	zero,r16,5d98 <__alt_mem_Flash_flash_data+0xf4005d98>
    5dec:	88800917 	ldw	r2,36(r17)
    5df0:	89400717 	ldw	r5,28(r17)
    5df4:	800f883a 	mov	r7,r16
    5df8:	900d883a 	mov	r6,r18
    5dfc:	9809883a 	mov	r4,r19
    5e00:	103ee83a 	callr	r2
    5e04:	80a1c83a 	sub	r16,r16,r2
    5e08:	00bff616 	blt	zero,r2,5de4 <__alt_mem_Flash_flash_data+0xf4005de4>
    5e0c:	88c0030b 	ldhu	r3,12(r17)
    5e10:	00bfffc4 	movi	r2,-1
    5e14:	18c01014 	ori	r3,r3,64
    5e18:	88c0030d 	sth	r3,12(r17)
    5e1c:	003fdf06 	br	5d9c <__alt_mem_Flash_flash_data+0xf4005d9c>
    5e20:	0005883a 	mov	r2,zero
    5e24:	003fec06 	br	5dd8 <__alt_mem_Flash_flash_data+0xf4005dd8>
    5e28:	88801415 	stw	r2,80(r17)
    5e2c:	003fd206 	br	5d78 <__alt_mem_Flash_flash_data+0xf4005d78>
    5e30:	28c00f17 	ldw	r3,60(r5)
    5e34:	00ffb316 	blt	zero,r3,5d04 <__alt_mem_Flash_flash_data+0xf4005d04>
    5e38:	003fd706 	br	5d98 <__alt_mem_Flash_flash_data+0xf4005d98>
    5e3c:	89400717 	ldw	r5,28(r17)
    5e40:	000d883a 	mov	r6,zero
    5e44:	9809883a 	mov	r4,r19
    5e48:	01c00044 	movi	r7,1
    5e4c:	403ee83a 	callr	r8
    5e50:	100d883a 	mov	r6,r2
    5e54:	00bfffc4 	movi	r2,-1
    5e58:	30801426 	beq	r6,r2,5eac <__sflush_r+0x1e4>
    5e5c:	8880030b 	ldhu	r2,12(r17)
    5e60:	8a000a17 	ldw	r8,40(r17)
    5e64:	003fae06 	br	5d20 <__alt_mem_Flash_flash_data+0xf4005d20>
    5e68:	98c00017 	ldw	r3,0(r19)
    5e6c:	183fba26 	beq	r3,zero,5d58 <__alt_mem_Flash_flash_data+0xf4005d58>
    5e70:	01000744 	movi	r4,29
    5e74:	19000626 	beq	r3,r4,5e90 <__sflush_r+0x1c8>
    5e78:	01000584 	movi	r4,22
    5e7c:	19000426 	beq	r3,r4,5e90 <__sflush_r+0x1c8>
    5e80:	88c0030b 	ldhu	r3,12(r17)
    5e84:	18c01014 	ori	r3,r3,64
    5e88:	88c0030d 	sth	r3,12(r17)
    5e8c:	003fc306 	br	5d9c <__alt_mem_Flash_flash_data+0xf4005d9c>
    5e90:	8880030b 	ldhu	r2,12(r17)
    5e94:	88c00417 	ldw	r3,16(r17)
    5e98:	88000115 	stw	zero,4(r17)
    5e9c:	10bdffcc 	andi	r2,r2,63487
    5ea0:	8880030d 	sth	r2,12(r17)
    5ea4:	88c00015 	stw	r3,0(r17)
    5ea8:	003fb306 	br	5d78 <__alt_mem_Flash_flash_data+0xf4005d78>
    5eac:	98800017 	ldw	r2,0(r19)
    5eb0:	103fea26 	beq	r2,zero,5e5c <__alt_mem_Flash_flash_data+0xf4005e5c>
    5eb4:	00c00744 	movi	r3,29
    5eb8:	10c00226 	beq	r2,r3,5ec4 <__sflush_r+0x1fc>
    5ebc:	00c00584 	movi	r3,22
    5ec0:	10ffd21e 	bne	r2,r3,5e0c <__alt_mem_Flash_flash_data+0xf4005e0c>
    5ec4:	9c000015 	stw	r16,0(r19)
    5ec8:	0005883a 	mov	r2,zero
    5ecc:	003fb306 	br	5d9c <__alt_mem_Flash_flash_data+0xf4005d9c>

00005ed0 <_fflush_r>:
    5ed0:	defffd04 	addi	sp,sp,-12
    5ed4:	dc000115 	stw	r16,4(sp)
    5ed8:	dfc00215 	stw	ra,8(sp)
    5edc:	2021883a 	mov	r16,r4
    5ee0:	20000226 	beq	r4,zero,5eec <_fflush_r+0x1c>
    5ee4:	20800e17 	ldw	r2,56(r4)
    5ee8:	10000c26 	beq	r2,zero,5f1c <_fflush_r+0x4c>
    5eec:	2880030f 	ldh	r2,12(r5)
    5ef0:	1000051e 	bne	r2,zero,5f08 <_fflush_r+0x38>
    5ef4:	0005883a 	mov	r2,zero
    5ef8:	dfc00217 	ldw	ra,8(sp)
    5efc:	dc000117 	ldw	r16,4(sp)
    5f00:	dec00304 	addi	sp,sp,12
    5f04:	f800283a 	ret
    5f08:	8009883a 	mov	r4,r16
    5f0c:	dfc00217 	ldw	ra,8(sp)
    5f10:	dc000117 	ldw	r16,4(sp)
    5f14:	dec00304 	addi	sp,sp,12
    5f18:	0005cc81 	jmpi	5cc8 <__sflush_r>
    5f1c:	d9400015 	stw	r5,0(sp)
    5f20:	00062ac0 	call	62ac <__sinit>
    5f24:	d9400017 	ldw	r5,0(sp)
    5f28:	003ff006 	br	5eec <__alt_mem_Flash_flash_data+0xf4005eec>

00005f2c <fflush>:
    5f2c:	20000526 	beq	r4,zero,5f44 <fflush+0x18>
    5f30:	008000b4 	movhi	r2,2
    5f34:	10b70f04 	addi	r2,r2,-9156
    5f38:	200b883a 	mov	r5,r4
    5f3c:	11000017 	ldw	r4,0(r2)
    5f40:	0005ed01 	jmpi	5ed0 <_fflush_r>
    5f44:	008000b4 	movhi	r2,2
    5f48:	10b70e04 	addi	r2,r2,-9160
    5f4c:	11000017 	ldw	r4,0(r2)
    5f50:	01400034 	movhi	r5,0
    5f54:	2957b404 	addi	r5,r5,24272
    5f58:	0006c941 	jmpi	6c94 <_fwalk_reent>

00005f5c <__fp_lock>:
    5f5c:	0005883a 	mov	r2,zero
    5f60:	f800283a 	ret

00005f64 <__fp_unlock>:
    5f64:	0005883a 	mov	r2,zero
    5f68:	f800283a 	ret

00005f6c <_cleanup_r>:
    5f6c:	01400074 	movhi	r5,1
    5f70:	296a8804 	addi	r5,r5,-21984
    5f74:	0006c941 	jmpi	6c94 <_fwalk_reent>

00005f78 <__sinit.part.1>:
    5f78:	defff704 	addi	sp,sp,-36
    5f7c:	00c00034 	movhi	r3,0
    5f80:	dfc00815 	stw	ra,32(sp)
    5f84:	ddc00715 	stw	r23,28(sp)
    5f88:	dd800615 	stw	r22,24(sp)
    5f8c:	dd400515 	stw	r21,20(sp)
    5f90:	dd000415 	stw	r20,16(sp)
    5f94:	dcc00315 	stw	r19,12(sp)
    5f98:	dc800215 	stw	r18,8(sp)
    5f9c:	dc400115 	stw	r17,4(sp)
    5fa0:	dc000015 	stw	r16,0(sp)
    5fa4:	18d7db04 	addi	r3,r3,24428
    5fa8:	24000117 	ldw	r16,4(r4)
    5fac:	20c00f15 	stw	r3,60(r4)
    5fb0:	2080bb04 	addi	r2,r4,748
    5fb4:	00c000c4 	movi	r3,3
    5fb8:	20c0b915 	stw	r3,740(r4)
    5fbc:	2080ba15 	stw	r2,744(r4)
    5fc0:	2000b815 	stw	zero,736(r4)
    5fc4:	05c00204 	movi	r23,8
    5fc8:	00800104 	movi	r2,4
    5fcc:	2025883a 	mov	r18,r4
    5fd0:	b80d883a 	mov	r6,r23
    5fd4:	81001704 	addi	r4,r16,92
    5fd8:	000b883a 	mov	r5,zero
    5fdc:	80000015 	stw	zero,0(r16)
    5fe0:	80000115 	stw	zero,4(r16)
    5fe4:	80000215 	stw	zero,8(r16)
    5fe8:	8080030d 	sth	r2,12(r16)
    5fec:	80001915 	stw	zero,100(r16)
    5ff0:	8000038d 	sth	zero,14(r16)
    5ff4:	80000415 	stw	zero,16(r16)
    5ff8:	80000515 	stw	zero,20(r16)
    5ffc:	80000615 	stw	zero,24(r16)
    6000:	0007b140 	call	7b14 <memset>
    6004:	05800074 	movhi	r22,1
    6008:	94400217 	ldw	r17,8(r18)
    600c:	05400074 	movhi	r21,1
    6010:	05000074 	movhi	r20,1
    6014:	04c00074 	movhi	r19,1
    6018:	b5a48204 	addi	r22,r22,-28152
    601c:	ad649904 	addi	r21,r21,-28060
    6020:	a524b804 	addi	r20,r20,-27936
    6024:	9ce4cf04 	addi	r19,r19,-27844
    6028:	85800815 	stw	r22,32(r16)
    602c:	85400915 	stw	r21,36(r16)
    6030:	85000a15 	stw	r20,40(r16)
    6034:	84c00b15 	stw	r19,44(r16)
    6038:	84000715 	stw	r16,28(r16)
    603c:	00800284 	movi	r2,10
    6040:	8880030d 	sth	r2,12(r17)
    6044:	00800044 	movi	r2,1
    6048:	89001704 	addi	r4,r17,92
    604c:	b80d883a 	mov	r6,r23
    6050:	000b883a 	mov	r5,zero
    6054:	88000015 	stw	zero,0(r17)
    6058:	88000115 	stw	zero,4(r17)
    605c:	88000215 	stw	zero,8(r17)
    6060:	88001915 	stw	zero,100(r17)
    6064:	8880038d 	sth	r2,14(r17)
    6068:	88000415 	stw	zero,16(r17)
    606c:	88000515 	stw	zero,20(r17)
    6070:	88000615 	stw	zero,24(r17)
    6074:	0007b140 	call	7b14 <memset>
    6078:	94000317 	ldw	r16,12(r18)
    607c:	00800484 	movi	r2,18
    6080:	8c400715 	stw	r17,28(r17)
    6084:	8d800815 	stw	r22,32(r17)
    6088:	8d400915 	stw	r21,36(r17)
    608c:	8d000a15 	stw	r20,40(r17)
    6090:	8cc00b15 	stw	r19,44(r17)
    6094:	8080030d 	sth	r2,12(r16)
    6098:	00800084 	movi	r2,2
    609c:	80000015 	stw	zero,0(r16)
    60a0:	80000115 	stw	zero,4(r16)
    60a4:	80000215 	stw	zero,8(r16)
    60a8:	80001915 	stw	zero,100(r16)
    60ac:	8080038d 	sth	r2,14(r16)
    60b0:	80000415 	stw	zero,16(r16)
    60b4:	80000515 	stw	zero,20(r16)
    60b8:	80000615 	stw	zero,24(r16)
    60bc:	81001704 	addi	r4,r16,92
    60c0:	000b883a 	mov	r5,zero
    60c4:	b80d883a 	mov	r6,r23
    60c8:	0007b140 	call	7b14 <memset>
    60cc:	00800044 	movi	r2,1
    60d0:	84000715 	stw	r16,28(r16)
    60d4:	85800815 	stw	r22,32(r16)
    60d8:	85400915 	stw	r21,36(r16)
    60dc:	85000a15 	stw	r20,40(r16)
    60e0:	84c00b15 	stw	r19,44(r16)
    60e4:	90800e15 	stw	r2,56(r18)
    60e8:	dfc00817 	ldw	ra,32(sp)
    60ec:	ddc00717 	ldw	r23,28(sp)
    60f0:	dd800617 	ldw	r22,24(sp)
    60f4:	dd400517 	ldw	r21,20(sp)
    60f8:	dd000417 	ldw	r20,16(sp)
    60fc:	dcc00317 	ldw	r19,12(sp)
    6100:	dc800217 	ldw	r18,8(sp)
    6104:	dc400117 	ldw	r17,4(sp)
    6108:	dc000017 	ldw	r16,0(sp)
    610c:	dec00904 	addi	sp,sp,36
    6110:	f800283a 	ret

00006114 <__sfmoreglue>:
    6114:	defffc04 	addi	sp,sp,-16
    6118:	dc400115 	stw	r17,4(sp)
    611c:	2c7fffc4 	addi	r17,r5,-1
    6120:	8c401a24 	muli	r17,r17,104
    6124:	dc800215 	stw	r18,8(sp)
    6128:	2825883a 	mov	r18,r5
    612c:	89401d04 	addi	r5,r17,116
    6130:	dc000015 	stw	r16,0(sp)
    6134:	dfc00315 	stw	ra,12(sp)
    6138:	0006ff00 	call	6ff0 <_malloc_r>
    613c:	1021883a 	mov	r16,r2
    6140:	10000726 	beq	r2,zero,6160 <__sfmoreglue+0x4c>
    6144:	11000304 	addi	r4,r2,12
    6148:	10000015 	stw	zero,0(r2)
    614c:	14800115 	stw	r18,4(r2)
    6150:	11000215 	stw	r4,8(r2)
    6154:	000b883a 	mov	r5,zero
    6158:	89801a04 	addi	r6,r17,104
    615c:	0007b140 	call	7b14 <memset>
    6160:	8005883a 	mov	r2,r16
    6164:	dfc00317 	ldw	ra,12(sp)
    6168:	dc800217 	ldw	r18,8(sp)
    616c:	dc400117 	ldw	r17,4(sp)
    6170:	dc000017 	ldw	r16,0(sp)
    6174:	dec00404 	addi	sp,sp,16
    6178:	f800283a 	ret

0000617c <__sfp>:
    617c:	008000b4 	movhi	r2,2
    6180:	defffb04 	addi	sp,sp,-20
    6184:	10b70e04 	addi	r2,r2,-9160
    6188:	dc800215 	stw	r18,8(sp)
    618c:	14800017 	ldw	r18,0(r2)
    6190:	dcc00315 	stw	r19,12(sp)
    6194:	dfc00415 	stw	ra,16(sp)
    6198:	90800e17 	ldw	r2,56(r18)
    619c:	dc400115 	stw	r17,4(sp)
    61a0:	dc000015 	stw	r16,0(sp)
    61a4:	2027883a 	mov	r19,r4
    61a8:	1000021e 	bne	r2,zero,61b4 <__sfp+0x38>
    61ac:	9009883a 	mov	r4,r18
    61b0:	0005f780 	call	5f78 <__sinit.part.1>
    61b4:	9480b804 	addi	r18,r18,736
    61b8:	047fffc4 	movi	r17,-1
    61bc:	91400117 	ldw	r5,4(r18)
    61c0:	94000217 	ldw	r16,8(r18)
    61c4:	297fffc4 	addi	r5,r5,-1
    61c8:	28000a16 	blt	r5,zero,61f4 <__sfp+0x78>
    61cc:	8080030f 	ldh	r2,12(r16)
    61d0:	10000c26 	beq	r2,zero,6204 <__sfp+0x88>
    61d4:	80c01d04 	addi	r3,r16,116
    61d8:	00000206 	br	61e4 <__sfp+0x68>
    61dc:	18bfe60f 	ldh	r2,-104(r3)
    61e0:	10000826 	beq	r2,zero,6204 <__sfp+0x88>
    61e4:	297fffc4 	addi	r5,r5,-1
    61e8:	1c3ffd04 	addi	r16,r3,-12
    61ec:	18c01a04 	addi	r3,r3,104
    61f0:	2c7ffa1e 	bne	r5,r17,61dc <__alt_mem_Flash_flash_data+0xf40061dc>
    61f4:	90800017 	ldw	r2,0(r18)
    61f8:	10001d26 	beq	r2,zero,6270 <__sfp+0xf4>
    61fc:	1025883a 	mov	r18,r2
    6200:	003fee06 	br	61bc <__alt_mem_Flash_flash_data+0xf40061bc>
    6204:	00bfffc4 	movi	r2,-1
    6208:	8080038d 	sth	r2,14(r16)
    620c:	00800044 	movi	r2,1
    6210:	8080030d 	sth	r2,12(r16)
    6214:	80001915 	stw	zero,100(r16)
    6218:	80000015 	stw	zero,0(r16)
    621c:	80000215 	stw	zero,8(r16)
    6220:	80000115 	stw	zero,4(r16)
    6224:	80000415 	stw	zero,16(r16)
    6228:	80000515 	stw	zero,20(r16)
    622c:	80000615 	stw	zero,24(r16)
    6230:	81001704 	addi	r4,r16,92
    6234:	000b883a 	mov	r5,zero
    6238:	01800204 	movi	r6,8
    623c:	0007b140 	call	7b14 <memset>
    6240:	8005883a 	mov	r2,r16
    6244:	80000c15 	stw	zero,48(r16)
    6248:	80000d15 	stw	zero,52(r16)
    624c:	80001115 	stw	zero,68(r16)
    6250:	80001215 	stw	zero,72(r16)
    6254:	dfc00417 	ldw	ra,16(sp)
    6258:	dcc00317 	ldw	r19,12(sp)
    625c:	dc800217 	ldw	r18,8(sp)
    6260:	dc400117 	ldw	r17,4(sp)
    6264:	dc000017 	ldw	r16,0(sp)
    6268:	dec00504 	addi	sp,sp,20
    626c:	f800283a 	ret
    6270:	9809883a 	mov	r4,r19
    6274:	01400104 	movi	r5,4
    6278:	00061140 	call	6114 <__sfmoreglue>
    627c:	90800015 	stw	r2,0(r18)
    6280:	103fde1e 	bne	r2,zero,61fc <__alt_mem_Flash_flash_data+0xf40061fc>
    6284:	00800304 	movi	r2,12
    6288:	98800015 	stw	r2,0(r19)
    628c:	0005883a 	mov	r2,zero
    6290:	003ff006 	br	6254 <__alt_mem_Flash_flash_data+0xf4006254>

00006294 <_cleanup>:
    6294:	008000b4 	movhi	r2,2
    6298:	10b70e04 	addi	r2,r2,-9160
    629c:	11000017 	ldw	r4,0(r2)
    62a0:	01400074 	movhi	r5,1
    62a4:	296a8804 	addi	r5,r5,-21984
    62a8:	0006c941 	jmpi	6c94 <_fwalk_reent>

000062ac <__sinit>:
    62ac:	20800e17 	ldw	r2,56(r4)
    62b0:	10000126 	beq	r2,zero,62b8 <__sinit+0xc>
    62b4:	f800283a 	ret
    62b8:	0005f781 	jmpi	5f78 <__sinit.part.1>

000062bc <__sfp_lock_acquire>:
    62bc:	f800283a 	ret

000062c0 <__sfp_lock_release>:
    62c0:	f800283a 	ret

000062c4 <__sinit_lock_acquire>:
    62c4:	f800283a 	ret

000062c8 <__sinit_lock_release>:
    62c8:	f800283a 	ret

000062cc <__fp_lock_all>:
    62cc:	008000b4 	movhi	r2,2
    62d0:	10b70f04 	addi	r2,r2,-9156
    62d4:	11000017 	ldw	r4,0(r2)
    62d8:	01400034 	movhi	r5,0
    62dc:	2957d704 	addi	r5,r5,24412
    62e0:	0006bd01 	jmpi	6bd0 <_fwalk>

000062e4 <__fp_unlock_all>:
    62e4:	008000b4 	movhi	r2,2
    62e8:	10b70f04 	addi	r2,r2,-9156
    62ec:	11000017 	ldw	r4,0(r2)
    62f0:	01400034 	movhi	r5,0
    62f4:	2957d904 	addi	r5,r5,24420
    62f8:	0006bd01 	jmpi	6bd0 <_fwalk>

000062fc <_malloc_trim_r>:
    62fc:	defffb04 	addi	sp,sp,-20
    6300:	dcc00315 	stw	r19,12(sp)
    6304:	04c000b4 	movhi	r19,2
    6308:	dc800215 	stw	r18,8(sp)
    630c:	dc400115 	stw	r17,4(sp)
    6310:	dc000015 	stw	r16,0(sp)
    6314:	dfc00415 	stw	ra,16(sp)
    6318:	2821883a 	mov	r16,r5
    631c:	9cf09a04 	addi	r19,r19,-15768
    6320:	2025883a 	mov	r18,r4
    6324:	000eefc0 	call	eefc <__malloc_lock>
    6328:	98800217 	ldw	r2,8(r19)
    632c:	14400117 	ldw	r17,4(r2)
    6330:	00bfff04 	movi	r2,-4
    6334:	88a2703a 	and	r17,r17,r2
    6338:	8c21c83a 	sub	r16,r17,r16
    633c:	8403fbc4 	addi	r16,r16,4079
    6340:	8020d33a 	srli	r16,r16,12
    6344:	0083ffc4 	movi	r2,4095
    6348:	843fffc4 	addi	r16,r16,-1
    634c:	8020933a 	slli	r16,r16,12
    6350:	1400060e 	bge	r2,r16,636c <_malloc_trim_r+0x70>
    6354:	9009883a 	mov	r4,r18
    6358:	000b883a 	mov	r5,zero
    635c:	00091b40 	call	91b4 <_sbrk_r>
    6360:	98c00217 	ldw	r3,8(r19)
    6364:	1c47883a 	add	r3,r3,r17
    6368:	10c00a26 	beq	r2,r3,6394 <_malloc_trim_r+0x98>
    636c:	9009883a 	mov	r4,r18
    6370:	000f01c0 	call	f01c <__malloc_unlock>
    6374:	0005883a 	mov	r2,zero
    6378:	dfc00417 	ldw	ra,16(sp)
    637c:	dcc00317 	ldw	r19,12(sp)
    6380:	dc800217 	ldw	r18,8(sp)
    6384:	dc400117 	ldw	r17,4(sp)
    6388:	dc000017 	ldw	r16,0(sp)
    638c:	dec00504 	addi	sp,sp,20
    6390:	f800283a 	ret
    6394:	9009883a 	mov	r4,r18
    6398:	040bc83a 	sub	r5,zero,r16
    639c:	00091b40 	call	91b4 <_sbrk_r>
    63a0:	00ffffc4 	movi	r3,-1
    63a4:	10c00d26 	beq	r2,r3,63dc <_malloc_trim_r+0xe0>
    63a8:	00c000b4 	movhi	r3,2
    63ac:	18ff4604 	addi	r3,r3,-744
    63b0:	18800017 	ldw	r2,0(r3)
    63b4:	99000217 	ldw	r4,8(r19)
    63b8:	8c23c83a 	sub	r17,r17,r16
    63bc:	8c400054 	ori	r17,r17,1
    63c0:	1421c83a 	sub	r16,r2,r16
    63c4:	24400115 	stw	r17,4(r4)
    63c8:	9009883a 	mov	r4,r18
    63cc:	1c000015 	stw	r16,0(r3)
    63d0:	000f01c0 	call	f01c <__malloc_unlock>
    63d4:	00800044 	movi	r2,1
    63d8:	003fe706 	br	6378 <__alt_mem_Flash_flash_data+0xf4006378>
    63dc:	9009883a 	mov	r4,r18
    63e0:	000b883a 	mov	r5,zero
    63e4:	00091b40 	call	91b4 <_sbrk_r>
    63e8:	99000217 	ldw	r4,8(r19)
    63ec:	014003c4 	movi	r5,15
    63f0:	1107c83a 	sub	r3,r2,r4
    63f4:	28ffdd0e 	bge	r5,r3,636c <__alt_mem_Flash_flash_data+0xf400636c>
    63f8:	014000b4 	movhi	r5,2
    63fc:	29771104 	addi	r5,r5,-9148
    6400:	29400017 	ldw	r5,0(r5)
    6404:	18c00054 	ori	r3,r3,1
    6408:	20c00115 	stw	r3,4(r4)
    640c:	00c000b4 	movhi	r3,2
    6410:	1145c83a 	sub	r2,r2,r5
    6414:	18ff4604 	addi	r3,r3,-744
    6418:	18800015 	stw	r2,0(r3)
    641c:	003fd306 	br	636c <__alt_mem_Flash_flash_data+0xf400636c>

00006420 <_free_r>:
    6420:	28004c26 	beq	r5,zero,6554 <_free_r+0x134>
    6424:	defffd04 	addi	sp,sp,-12
    6428:	dc400115 	stw	r17,4(sp)
    642c:	dc000015 	stw	r16,0(sp)
    6430:	2023883a 	mov	r17,r4
    6434:	2821883a 	mov	r16,r5
    6438:	dfc00215 	stw	ra,8(sp)
    643c:	000eefc0 	call	eefc <__malloc_lock>
    6440:	813fff17 	ldw	r4,-4(r16)
    6444:	00bfff84 	movi	r2,-2
    6448:	024000b4 	movhi	r9,2
    644c:	81bffe04 	addi	r6,r16,-8
    6450:	2084703a 	and	r2,r4,r2
    6454:	4a709a04 	addi	r9,r9,-15768
    6458:	308b883a 	add	r5,r6,r2
    645c:	2a000117 	ldw	r8,4(r5)
    6460:	49c00217 	ldw	r7,8(r9)
    6464:	00ffff04 	movi	r3,-4
    6468:	40c6703a 	and	r3,r8,r3
    646c:	39405326 	beq	r7,r5,65bc <_free_r+0x19c>
    6470:	28c00115 	stw	r3,4(r5)
    6474:	2100004c 	andi	r4,r4,1
    6478:	2000091e 	bne	r4,zero,64a0 <_free_r+0x80>
    647c:	81fffe17 	ldw	r7,-8(r16)
    6480:	4a000204 	addi	r8,r9,8
    6484:	31cdc83a 	sub	r6,r6,r7
    6488:	31000217 	ldw	r4,8(r6)
    648c:	11c5883a 	add	r2,r2,r7
    6490:	22006126 	beq	r4,r8,6618 <_free_r+0x1f8>
    6494:	31c00317 	ldw	r7,12(r6)
    6498:	21c00315 	stw	r7,12(r4)
    649c:	39000215 	stw	r4,8(r7)
    64a0:	28c9883a 	add	r4,r5,r3
    64a4:	21c00117 	ldw	r7,4(r4)
    64a8:	39c0004c 	andi	r7,r7,1
    64ac:	38000d1e 	bne	r7,zero,64e4 <_free_r+0xc4>
    64b0:	29000217 	ldw	r4,8(r5)
    64b4:	10c5883a 	add	r2,r2,r3
    64b8:	00c000b4 	movhi	r3,2
    64bc:	18f09c04 	addi	r3,r3,-15760
    64c0:	20c07526 	beq	r4,r3,6698 <_free_r+0x278>
    64c4:	29c00317 	ldw	r7,12(r5)
    64c8:	11400054 	ori	r5,r2,1
    64cc:	3087883a 	add	r3,r6,r2
    64d0:	21c00315 	stw	r7,12(r4)
    64d4:	39000215 	stw	r4,8(r7)
    64d8:	31400115 	stw	r5,4(r6)
    64dc:	18800015 	stw	r2,0(r3)
    64e0:	00000406 	br	64f4 <_free_r+0xd4>
    64e4:	10c00054 	ori	r3,r2,1
    64e8:	30c00115 	stw	r3,4(r6)
    64ec:	3087883a 	add	r3,r6,r2
    64f0:	18800015 	stw	r2,0(r3)
    64f4:	00c07fc4 	movi	r3,511
    64f8:	18801736 	bltu	r3,r2,6558 <_free_r+0x138>
    64fc:	1004d0fa 	srli	r2,r2,3
    6500:	01400044 	movi	r5,1
    6504:	49000117 	ldw	r4,4(r9)
    6508:	1087883a 	add	r3,r2,r2
    650c:	18c7883a 	add	r3,r3,r3
    6510:	1005d0ba 	srai	r2,r2,2
    6514:	18c7883a 	add	r3,r3,r3
    6518:	1a47883a 	add	r3,r3,r9
    651c:	19c00217 	ldw	r7,8(r3)
    6520:	2884983a 	sll	r2,r5,r2
    6524:	30c00315 	stw	r3,12(r6)
    6528:	31c00215 	stw	r7,8(r6)
    652c:	1104b03a 	or	r2,r2,r4
    6530:	19800215 	stw	r6,8(r3)
    6534:	48800115 	stw	r2,4(r9)
    6538:	39800315 	stw	r6,12(r7)
    653c:	8809883a 	mov	r4,r17
    6540:	dfc00217 	ldw	ra,8(sp)
    6544:	dc400117 	ldw	r17,4(sp)
    6548:	dc000017 	ldw	r16,0(sp)
    654c:	dec00304 	addi	sp,sp,12
    6550:	000f01c1 	jmpi	f01c <__malloc_unlock>
    6554:	f800283a 	ret
    6558:	1006d27a 	srli	r3,r2,9
    655c:	01000104 	movi	r4,4
    6560:	20c04036 	bltu	r4,r3,6664 <_free_r+0x244>
    6564:	1006d1ba 	srli	r3,r2,6
    6568:	19400e04 	addi	r5,r3,56
    656c:	2947883a 	add	r3,r5,r5
    6570:	18c7883a 	add	r3,r3,r3
    6574:	18c7883a 	add	r3,r3,r3
    6578:	1a49883a 	add	r4,r3,r9
    657c:	20c00217 	ldw	r3,8(r4)
    6580:	01c000b4 	movhi	r7,2
    6584:	39f09a04 	addi	r7,r7,-15768
    6588:	19003b26 	beq	r3,r4,6678 <_free_r+0x258>
    658c:	01ffff04 	movi	r7,-4
    6590:	19400117 	ldw	r5,4(r3)
    6594:	29ca703a 	and	r5,r5,r7
    6598:	1140022e 	bgeu	r2,r5,65a4 <_free_r+0x184>
    659c:	18c00217 	ldw	r3,8(r3)
    65a0:	20fffb1e 	bne	r4,r3,6590 <__alt_mem_Flash_flash_data+0xf4006590>
    65a4:	18800317 	ldw	r2,12(r3)
    65a8:	30800315 	stw	r2,12(r6)
    65ac:	30c00215 	stw	r3,8(r6)
    65b0:	11800215 	stw	r6,8(r2)
    65b4:	19800315 	stw	r6,12(r3)
    65b8:	003fe006 	br	653c <__alt_mem_Flash_flash_data+0xf400653c>
    65bc:	2100004c 	andi	r4,r4,1
    65c0:	1885883a 	add	r2,r3,r2
    65c4:	2000071e 	bne	r4,zero,65e4 <_free_r+0x1c4>
    65c8:	817ffe17 	ldw	r5,-8(r16)
    65cc:	314dc83a 	sub	r6,r6,r5
    65d0:	30c00317 	ldw	r3,12(r6)
    65d4:	31000217 	ldw	r4,8(r6)
    65d8:	1145883a 	add	r2,r2,r5
    65dc:	20c00315 	stw	r3,12(r4)
    65e0:	19000215 	stw	r4,8(r3)
    65e4:	10c00054 	ori	r3,r2,1
    65e8:	30c00115 	stw	r3,4(r6)
    65ec:	00c000b4 	movhi	r3,2
    65f0:	18f71204 	addi	r3,r3,-9144
    65f4:	18c00017 	ldw	r3,0(r3)
    65f8:	49800215 	stw	r6,8(r9)
    65fc:	10ffcf36 	bltu	r2,r3,653c <__alt_mem_Flash_flash_data+0xf400653c>
    6600:	008000b4 	movhi	r2,2
    6604:	10bf2404 	addi	r2,r2,-880
    6608:	11400017 	ldw	r5,0(r2)
    660c:	8809883a 	mov	r4,r17
    6610:	00062fc0 	call	62fc <_malloc_trim_r>
    6614:	003fc906 	br	653c <__alt_mem_Flash_flash_data+0xf400653c>
    6618:	28c9883a 	add	r4,r5,r3
    661c:	21000117 	ldw	r4,4(r4)
    6620:	2100004c 	andi	r4,r4,1
    6624:	20000a1e 	bne	r4,zero,6650 <_free_r+0x230>
    6628:	29000317 	ldw	r4,12(r5)
    662c:	29400217 	ldw	r5,8(r5)
    6630:	10c5883a 	add	r2,r2,r3
    6634:	10c00054 	ori	r3,r2,1
    6638:	29000315 	stw	r4,12(r5)
    663c:	21400215 	stw	r5,8(r4)
    6640:	30c00115 	stw	r3,4(r6)
    6644:	308d883a 	add	r6,r6,r2
    6648:	30800015 	stw	r2,0(r6)
    664c:	003fbb06 	br	653c <__alt_mem_Flash_flash_data+0xf400653c>
    6650:	10c00054 	ori	r3,r2,1
    6654:	30c00115 	stw	r3,4(r6)
    6658:	308d883a 	add	r6,r6,r2
    665c:	30800015 	stw	r2,0(r6)
    6660:	003fb606 	br	653c <__alt_mem_Flash_flash_data+0xf400653c>
    6664:	01000504 	movi	r4,20
    6668:	20c01436 	bltu	r4,r3,66bc <_free_r+0x29c>
    666c:	194016c4 	addi	r5,r3,91
    6670:	2947883a 	add	r3,r5,r5
    6674:	003fbe06 	br	6570 <__alt_mem_Flash_flash_data+0xf4006570>
    6678:	280bd0ba 	srai	r5,r5,2
    667c:	00800044 	movi	r2,1
    6680:	39000117 	ldw	r4,4(r7)
    6684:	114a983a 	sll	r5,r2,r5
    6688:	1805883a 	mov	r2,r3
    668c:	2908b03a 	or	r4,r5,r4
    6690:	39000115 	stw	r4,4(r7)
    6694:	003fc406 	br	65a8 <__alt_mem_Flash_flash_data+0xf40065a8>
    6698:	49800515 	stw	r6,20(r9)
    669c:	49800415 	stw	r6,16(r9)
    66a0:	10c00054 	ori	r3,r2,1
    66a4:	31000315 	stw	r4,12(r6)
    66a8:	31000215 	stw	r4,8(r6)
    66ac:	30c00115 	stw	r3,4(r6)
    66b0:	308d883a 	add	r6,r6,r2
    66b4:	30800015 	stw	r2,0(r6)
    66b8:	003fa006 	br	653c <__alt_mem_Flash_flash_data+0xf400653c>
    66bc:	01001504 	movi	r4,84
    66c0:	20c00436 	bltu	r4,r3,66d4 <_free_r+0x2b4>
    66c4:	1006d33a 	srli	r3,r2,12
    66c8:	19401b84 	addi	r5,r3,110
    66cc:	2947883a 	add	r3,r5,r5
    66d0:	003fa706 	br	6570 <__alt_mem_Flash_flash_data+0xf4006570>
    66d4:	01005504 	movi	r4,340
    66d8:	20c00436 	bltu	r4,r3,66ec <_free_r+0x2cc>
    66dc:	1006d3fa 	srli	r3,r2,15
    66e0:	19401dc4 	addi	r5,r3,119
    66e4:	2947883a 	add	r3,r5,r5
    66e8:	003fa106 	br	6570 <__alt_mem_Flash_flash_data+0xf4006570>
    66ec:	01015504 	movi	r4,1364
    66f0:	20c00436 	bltu	r4,r3,6704 <_free_r+0x2e4>
    66f4:	1006d4ba 	srli	r3,r2,18
    66f8:	19401f04 	addi	r5,r3,124
    66fc:	2947883a 	add	r3,r5,r5
    6700:	003f9b06 	br	6570 <__alt_mem_Flash_flash_data+0xf4006570>
    6704:	00c03f04 	movi	r3,252
    6708:	01401f84 	movi	r5,126
    670c:	003f9806 	br	6570 <__alt_mem_Flash_flash_data+0xf4006570>

00006710 <__sfvwrite_r>:
    6710:	30800217 	ldw	r2,8(r6)
    6714:	10006726 	beq	r2,zero,68b4 <__sfvwrite_r+0x1a4>
    6718:	defff404 	addi	sp,sp,-48
    671c:	dd000615 	stw	r20,24(sp)
    6720:	2029883a 	mov	r20,r4
    6724:	2900030b 	ldhu	r4,12(r5)
    6728:	ddc00915 	stw	r23,36(sp)
    672c:	dc000215 	stw	r16,8(sp)
    6730:	dfc00b15 	stw	ra,44(sp)
    6734:	df000a15 	stw	fp,40(sp)
    6738:	dd800815 	stw	r22,32(sp)
    673c:	dd400715 	stw	r21,28(sp)
    6740:	dcc00515 	stw	r19,20(sp)
    6744:	dc800415 	stw	r18,16(sp)
    6748:	dc400315 	stw	r17,12(sp)
    674c:	2080020c 	andi	r2,r4,8
    6750:	2821883a 	mov	r16,r5
    6754:	302f883a 	mov	r23,r6
    6758:	10002726 	beq	r2,zero,67f8 <__sfvwrite_r+0xe8>
    675c:	28800417 	ldw	r2,16(r5)
    6760:	10002526 	beq	r2,zero,67f8 <__sfvwrite_r+0xe8>
    6764:	2080008c 	andi	r2,r4,2
    6768:	bc400017 	ldw	r17,0(r23)
    676c:	10002a26 	beq	r2,zero,6818 <__sfvwrite_r+0x108>
    6770:	05600034 	movhi	r21,32768
    6774:	0027883a 	mov	r19,zero
    6778:	0025883a 	mov	r18,zero
    677c:	ad7f0004 	addi	r21,r21,-1024
    6780:	980d883a 	mov	r6,r19
    6784:	a009883a 	mov	r4,r20
    6788:	90004626 	beq	r18,zero,68a4 <__sfvwrite_r+0x194>
    678c:	900f883a 	mov	r7,r18
    6790:	81400717 	ldw	r5,28(r16)
    6794:	ac80022e 	bgeu	r21,r18,67a0 <__sfvwrite_r+0x90>
    6798:	01e00034 	movhi	r7,32768
    679c:	39ff0004 	addi	r7,r7,-1024
    67a0:	80800917 	ldw	r2,36(r16)
    67a4:	103ee83a 	callr	r2
    67a8:	0080520e 	bge	zero,r2,68f4 <__sfvwrite_r+0x1e4>
    67ac:	b8c00217 	ldw	r3,8(r23)
    67b0:	98a7883a 	add	r19,r19,r2
    67b4:	90a5c83a 	sub	r18,r18,r2
    67b8:	1885c83a 	sub	r2,r3,r2
    67bc:	b8800215 	stw	r2,8(r23)
    67c0:	103fef1e 	bne	r2,zero,6780 <__alt_mem_Flash_flash_data+0xf4006780>
    67c4:	0005883a 	mov	r2,zero
    67c8:	dfc00b17 	ldw	ra,44(sp)
    67cc:	df000a17 	ldw	fp,40(sp)
    67d0:	ddc00917 	ldw	r23,36(sp)
    67d4:	dd800817 	ldw	r22,32(sp)
    67d8:	dd400717 	ldw	r21,28(sp)
    67dc:	dd000617 	ldw	r20,24(sp)
    67e0:	dcc00517 	ldw	r19,20(sp)
    67e4:	dc800417 	ldw	r18,16(sp)
    67e8:	dc400317 	ldw	r17,12(sp)
    67ec:	dc000217 	ldw	r16,8(sp)
    67f0:	dec00c04 	addi	sp,sp,48
    67f4:	f800283a 	ret
    67f8:	a009883a 	mov	r4,r20
    67fc:	800b883a 	mov	r5,r16
    6800:	000424c0 	call	424c <__swsetup_r>
    6804:	1000ec1e 	bne	r2,zero,6bb8 <__sfvwrite_r+0x4a8>
    6808:	8100030b 	ldhu	r4,12(r16)
    680c:	bc400017 	ldw	r17,0(r23)
    6810:	2080008c 	andi	r2,r4,2
    6814:	103fd61e 	bne	r2,zero,6770 <__alt_mem_Flash_flash_data+0xf4006770>
    6818:	2080004c 	andi	r2,r4,1
    681c:	10003a1e 	bne	r2,zero,6908 <__sfvwrite_r+0x1f8>
    6820:	0039883a 	mov	fp,zero
    6824:	0025883a 	mov	r18,zero
    6828:	90001a26 	beq	r18,zero,6894 <__sfvwrite_r+0x184>
    682c:	2080800c 	andi	r2,r4,512
    6830:	85800217 	ldw	r22,8(r16)
    6834:	10007626 	beq	r2,zero,6a10 <__sfvwrite_r+0x300>
    6838:	b027883a 	mov	r19,r22
    683c:	95809436 	bltu	r18,r22,6a90 <__sfvwrite_r+0x380>
    6840:	2081200c 	andi	r2,r4,1152
    6844:	10009f1e 	bne	r2,zero,6ac4 <__sfvwrite_r+0x3b4>
    6848:	81000017 	ldw	r4,0(r16)
    684c:	e00b883a 	mov	r5,fp
    6850:	980d883a 	mov	r6,r19
    6854:	00079b80 	call	79b8 <memmove>
    6858:	81000217 	ldw	r4,8(r16)
    685c:	81400017 	ldw	r5,0(r16)
    6860:	9005883a 	mov	r2,r18
    6864:	2587c83a 	sub	r3,r4,r22
    6868:	2ce7883a 	add	r19,r5,r19
    686c:	80c00215 	stw	r3,8(r16)
    6870:	84c00015 	stw	r19,0(r16)
    6874:	b8c00217 	ldw	r3,8(r23)
    6878:	e0b9883a 	add	fp,fp,r2
    687c:	90a5c83a 	sub	r18,r18,r2
    6880:	1885c83a 	sub	r2,r3,r2
    6884:	b8800215 	stw	r2,8(r23)
    6888:	103fce26 	beq	r2,zero,67c4 <__alt_mem_Flash_flash_data+0xf40067c4>
    688c:	8100030b 	ldhu	r4,12(r16)
    6890:	903fe61e 	bne	r18,zero,682c <__alt_mem_Flash_flash_data+0xf400682c>
    6894:	8f000017 	ldw	fp,0(r17)
    6898:	8c800117 	ldw	r18,4(r17)
    689c:	8c400204 	addi	r17,r17,8
    68a0:	003fe106 	br	6828 <__alt_mem_Flash_flash_data+0xf4006828>
    68a4:	8cc00017 	ldw	r19,0(r17)
    68a8:	8c800117 	ldw	r18,4(r17)
    68ac:	8c400204 	addi	r17,r17,8
    68b0:	003fb306 	br	6780 <__alt_mem_Flash_flash_data+0xf4006780>
    68b4:	0005883a 	mov	r2,zero
    68b8:	f800283a 	ret
    68bc:	00a00034 	movhi	r2,32768
    68c0:	10bfffc4 	addi	r2,r2,-1
    68c4:	9009883a 	mov	r4,r18
    68c8:	1480012e 	bgeu	r2,r18,68d0 <__sfvwrite_r+0x1c0>
    68cc:	1009883a 	mov	r4,r2
    68d0:	980b883a 	mov	r5,r19
    68d4:	000bd600 	call	bd60 <__divsi3>
    68d8:	81400717 	ldw	r5,28(r16)
    68dc:	80c00917 	ldw	r3,36(r16)
    68e0:	988f383a 	mul	r7,r19,r2
    68e4:	a009883a 	mov	r4,r20
    68e8:	e00d883a 	mov	r6,fp
    68ec:	183ee83a 	callr	r3
    68f0:	00bfe016 	blt	zero,r2,6874 <__alt_mem_Flash_flash_data+0xf4006874>
    68f4:	8080030b 	ldhu	r2,12(r16)
    68f8:	10801014 	ori	r2,r2,64
    68fc:	8080030d 	sth	r2,12(r16)
    6900:	00bfffc4 	movi	r2,-1
    6904:	003fb006 	br	67c8 <__alt_mem_Flash_flash_data+0xf40067c8>
    6908:	0027883a 	mov	r19,zero
    690c:	0011883a 	mov	r8,zero
    6910:	0039883a 	mov	fp,zero
    6914:	0025883a 	mov	r18,zero
    6918:	90001f26 	beq	r18,zero,6998 <__sfvwrite_r+0x288>
    691c:	40006026 	beq	r8,zero,6aa0 <__sfvwrite_r+0x390>
    6920:	982b883a 	mov	r21,r19
    6924:	94c0012e 	bgeu	r18,r19,692c <__sfvwrite_r+0x21c>
    6928:	902b883a 	mov	r21,r18
    692c:	81000017 	ldw	r4,0(r16)
    6930:	80800417 	ldw	r2,16(r16)
    6934:	a82d883a 	mov	r22,r21
    6938:	81800217 	ldw	r6,8(r16)
    693c:	81c00517 	ldw	r7,20(r16)
    6940:	1100022e 	bgeu	r2,r4,694c <__sfvwrite_r+0x23c>
    6944:	31c7883a 	add	r3,r6,r7
    6948:	1d401816 	blt	r3,r21,69ac <__sfvwrite_r+0x29c>
    694c:	a9c04416 	blt	r21,r7,6a60 <__sfvwrite_r+0x350>
    6950:	80800917 	ldw	r2,36(r16)
    6954:	81400717 	ldw	r5,28(r16)
    6958:	a009883a 	mov	r4,r20
    695c:	da000115 	stw	r8,4(sp)
    6960:	e00d883a 	mov	r6,fp
    6964:	103ee83a 	callr	r2
    6968:	102d883a 	mov	r22,r2
    696c:	da000117 	ldw	r8,4(sp)
    6970:	00bfe00e 	bge	zero,r2,68f4 <__alt_mem_Flash_flash_data+0xf40068f4>
    6974:	9da7c83a 	sub	r19,r19,r22
    6978:	98001f26 	beq	r19,zero,69f8 <__sfvwrite_r+0x2e8>
    697c:	b8800217 	ldw	r2,8(r23)
    6980:	e5b9883a 	add	fp,fp,r22
    6984:	95a5c83a 	sub	r18,r18,r22
    6988:	15adc83a 	sub	r22,r2,r22
    698c:	bd800215 	stw	r22,8(r23)
    6990:	b03f8c26 	beq	r22,zero,67c4 <__alt_mem_Flash_flash_data+0xf40067c4>
    6994:	903fe11e 	bne	r18,zero,691c <__alt_mem_Flash_flash_data+0xf400691c>
    6998:	8f000017 	ldw	fp,0(r17)
    699c:	8c800117 	ldw	r18,4(r17)
    69a0:	0011883a 	mov	r8,zero
    69a4:	8c400204 	addi	r17,r17,8
    69a8:	003fdb06 	br	6918 <__alt_mem_Flash_flash_data+0xf4006918>
    69ac:	180d883a 	mov	r6,r3
    69b0:	e00b883a 	mov	r5,fp
    69b4:	da000115 	stw	r8,4(sp)
    69b8:	d8c00015 	stw	r3,0(sp)
    69bc:	00079b80 	call	79b8 <memmove>
    69c0:	d8c00017 	ldw	r3,0(sp)
    69c4:	80800017 	ldw	r2,0(r16)
    69c8:	a009883a 	mov	r4,r20
    69cc:	800b883a 	mov	r5,r16
    69d0:	10c5883a 	add	r2,r2,r3
    69d4:	80800015 	stw	r2,0(r16)
    69d8:	d8c00015 	stw	r3,0(sp)
    69dc:	0005ed00 	call	5ed0 <_fflush_r>
    69e0:	d8c00017 	ldw	r3,0(sp)
    69e4:	da000117 	ldw	r8,4(sp)
    69e8:	103fc21e 	bne	r2,zero,68f4 <__alt_mem_Flash_flash_data+0xf40068f4>
    69ec:	182d883a 	mov	r22,r3
    69f0:	9da7c83a 	sub	r19,r19,r22
    69f4:	983fe11e 	bne	r19,zero,697c <__alt_mem_Flash_flash_data+0xf400697c>
    69f8:	a009883a 	mov	r4,r20
    69fc:	800b883a 	mov	r5,r16
    6a00:	0005ed00 	call	5ed0 <_fflush_r>
    6a04:	103fbb1e 	bne	r2,zero,68f4 <__alt_mem_Flash_flash_data+0xf40068f4>
    6a08:	0011883a 	mov	r8,zero
    6a0c:	003fdb06 	br	697c <__alt_mem_Flash_flash_data+0xf400697c>
    6a10:	81000017 	ldw	r4,0(r16)
    6a14:	80800417 	ldw	r2,16(r16)
    6a18:	11000236 	bltu	r2,r4,6a24 <__sfvwrite_r+0x314>
    6a1c:	84c00517 	ldw	r19,20(r16)
    6a20:	94ffa62e 	bgeu	r18,r19,68bc <__alt_mem_Flash_flash_data+0xf40068bc>
    6a24:	9027883a 	mov	r19,r18
    6a28:	b480012e 	bgeu	r22,r18,6a30 <__sfvwrite_r+0x320>
    6a2c:	b027883a 	mov	r19,r22
    6a30:	e00b883a 	mov	r5,fp
    6a34:	980d883a 	mov	r6,r19
    6a38:	00079b80 	call	79b8 <memmove>
    6a3c:	80800217 	ldw	r2,8(r16)
    6a40:	80c00017 	ldw	r3,0(r16)
    6a44:	14c5c83a 	sub	r2,r2,r19
    6a48:	1cc7883a 	add	r3,r3,r19
    6a4c:	80800215 	stw	r2,8(r16)
    6a50:	80c00015 	stw	r3,0(r16)
    6a54:	10004326 	beq	r2,zero,6b64 <__sfvwrite_r+0x454>
    6a58:	9805883a 	mov	r2,r19
    6a5c:	003f8506 	br	6874 <__alt_mem_Flash_flash_data+0xf4006874>
    6a60:	a80d883a 	mov	r6,r21
    6a64:	e00b883a 	mov	r5,fp
    6a68:	da000115 	stw	r8,4(sp)
    6a6c:	00079b80 	call	79b8 <memmove>
    6a70:	80800217 	ldw	r2,8(r16)
    6a74:	80c00017 	ldw	r3,0(r16)
    6a78:	da000117 	ldw	r8,4(sp)
    6a7c:	1545c83a 	sub	r2,r2,r21
    6a80:	1d6b883a 	add	r21,r3,r21
    6a84:	80800215 	stw	r2,8(r16)
    6a88:	85400015 	stw	r21,0(r16)
    6a8c:	003fb906 	br	6974 <__alt_mem_Flash_flash_data+0xf4006974>
    6a90:	81000017 	ldw	r4,0(r16)
    6a94:	902d883a 	mov	r22,r18
    6a98:	9027883a 	mov	r19,r18
    6a9c:	003f6b06 	br	684c <__alt_mem_Flash_flash_data+0xf400684c>
    6aa0:	e009883a 	mov	r4,fp
    6aa4:	01400284 	movi	r5,10
    6aa8:	900d883a 	mov	r6,r18
    6aac:	00077980 	call	7798 <memchr>
    6ab0:	10003e26 	beq	r2,zero,6bac <__sfvwrite_r+0x49c>
    6ab4:	10800044 	addi	r2,r2,1
    6ab8:	1727c83a 	sub	r19,r2,fp
    6abc:	02000044 	movi	r8,1
    6ac0:	003f9706 	br	6920 <__alt_mem_Flash_flash_data+0xf4006920>
    6ac4:	80800517 	ldw	r2,20(r16)
    6ac8:	81400417 	ldw	r5,16(r16)
    6acc:	80c00017 	ldw	r3,0(r16)
    6ad0:	10a7883a 	add	r19,r2,r2
    6ad4:	9885883a 	add	r2,r19,r2
    6ad8:	1026d7fa 	srli	r19,r2,31
    6adc:	196bc83a 	sub	r21,r3,r5
    6ae0:	a9800044 	addi	r6,r21,1
    6ae4:	9885883a 	add	r2,r19,r2
    6ae8:	1027d07a 	srai	r19,r2,1
    6aec:	3485883a 	add	r2,r6,r18
    6af0:	980d883a 	mov	r6,r19
    6af4:	9880022e 	bgeu	r19,r2,6b00 <__sfvwrite_r+0x3f0>
    6af8:	1027883a 	mov	r19,r2
    6afc:	100d883a 	mov	r6,r2
    6b00:	2101000c 	andi	r4,r4,1024
    6b04:	20001c26 	beq	r4,zero,6b78 <__sfvwrite_r+0x468>
    6b08:	a009883a 	mov	r4,r20
    6b0c:	300b883a 	mov	r5,r6
    6b10:	0006ff00 	call	6ff0 <_malloc_r>
    6b14:	102d883a 	mov	r22,r2
    6b18:	10002926 	beq	r2,zero,6bc0 <__sfvwrite_r+0x4b0>
    6b1c:	81400417 	ldw	r5,16(r16)
    6b20:	1009883a 	mov	r4,r2
    6b24:	a80d883a 	mov	r6,r21
    6b28:	00078800 	call	7880 <memcpy>
    6b2c:	8080030b 	ldhu	r2,12(r16)
    6b30:	00fedfc4 	movi	r3,-1153
    6b34:	10c4703a 	and	r2,r2,r3
    6b38:	10802014 	ori	r2,r2,128
    6b3c:	8080030d 	sth	r2,12(r16)
    6b40:	b549883a 	add	r4,r22,r21
    6b44:	9d4bc83a 	sub	r5,r19,r21
    6b48:	85800415 	stw	r22,16(r16)
    6b4c:	84c00515 	stw	r19,20(r16)
    6b50:	81000015 	stw	r4,0(r16)
    6b54:	902d883a 	mov	r22,r18
    6b58:	81400215 	stw	r5,8(r16)
    6b5c:	9027883a 	mov	r19,r18
    6b60:	003f3a06 	br	684c <__alt_mem_Flash_flash_data+0xf400684c>
    6b64:	a009883a 	mov	r4,r20
    6b68:	800b883a 	mov	r5,r16
    6b6c:	0005ed00 	call	5ed0 <_fflush_r>
    6b70:	103fb926 	beq	r2,zero,6a58 <__alt_mem_Flash_flash_data+0xf4006a58>
    6b74:	003f5f06 	br	68f4 <__alt_mem_Flash_flash_data+0xf40068f4>
    6b78:	a009883a 	mov	r4,r20
    6b7c:	0008bd80 	call	8bd8 <_realloc_r>
    6b80:	102d883a 	mov	r22,r2
    6b84:	103fee1e 	bne	r2,zero,6b40 <__alt_mem_Flash_flash_data+0xf4006b40>
    6b88:	81400417 	ldw	r5,16(r16)
    6b8c:	a009883a 	mov	r4,r20
    6b90:	00064200 	call	6420 <_free_r>
    6b94:	8080030b 	ldhu	r2,12(r16)
    6b98:	00ffdfc4 	movi	r3,-129
    6b9c:	1884703a 	and	r2,r3,r2
    6ba0:	00c00304 	movi	r3,12
    6ba4:	a0c00015 	stw	r3,0(r20)
    6ba8:	003f5306 	br	68f8 <__alt_mem_Flash_flash_data+0xf40068f8>
    6bac:	94c00044 	addi	r19,r18,1
    6bb0:	02000044 	movi	r8,1
    6bb4:	003f5a06 	br	6920 <__alt_mem_Flash_flash_data+0xf4006920>
    6bb8:	00bfffc4 	movi	r2,-1
    6bbc:	003f0206 	br	67c8 <__alt_mem_Flash_flash_data+0xf40067c8>
    6bc0:	00800304 	movi	r2,12
    6bc4:	a0800015 	stw	r2,0(r20)
    6bc8:	8080030b 	ldhu	r2,12(r16)
    6bcc:	003f4a06 	br	68f8 <__alt_mem_Flash_flash_data+0xf40068f8>

00006bd0 <_fwalk>:
    6bd0:	defff704 	addi	sp,sp,-36
    6bd4:	dd000415 	stw	r20,16(sp)
    6bd8:	dfc00815 	stw	ra,32(sp)
    6bdc:	ddc00715 	stw	r23,28(sp)
    6be0:	dd800615 	stw	r22,24(sp)
    6be4:	dd400515 	stw	r21,20(sp)
    6be8:	dcc00315 	stw	r19,12(sp)
    6bec:	dc800215 	stw	r18,8(sp)
    6bf0:	dc400115 	stw	r17,4(sp)
    6bf4:	dc000015 	stw	r16,0(sp)
    6bf8:	2500b804 	addi	r20,r4,736
    6bfc:	a0002326 	beq	r20,zero,6c8c <_fwalk+0xbc>
    6c00:	282b883a 	mov	r21,r5
    6c04:	002f883a 	mov	r23,zero
    6c08:	05800044 	movi	r22,1
    6c0c:	04ffffc4 	movi	r19,-1
    6c10:	a4400117 	ldw	r17,4(r20)
    6c14:	a4800217 	ldw	r18,8(r20)
    6c18:	8c7fffc4 	addi	r17,r17,-1
    6c1c:	88000d16 	blt	r17,zero,6c54 <_fwalk+0x84>
    6c20:	94000304 	addi	r16,r18,12
    6c24:	94800384 	addi	r18,r18,14
    6c28:	80c0000b 	ldhu	r3,0(r16)
    6c2c:	8c7fffc4 	addi	r17,r17,-1
    6c30:	813ffd04 	addi	r4,r16,-12
    6c34:	b0c0042e 	bgeu	r22,r3,6c48 <_fwalk+0x78>
    6c38:	90c0000f 	ldh	r3,0(r18)
    6c3c:	1cc00226 	beq	r3,r19,6c48 <_fwalk+0x78>
    6c40:	a83ee83a 	callr	r21
    6c44:	b8aeb03a 	or	r23,r23,r2
    6c48:	84001a04 	addi	r16,r16,104
    6c4c:	94801a04 	addi	r18,r18,104
    6c50:	8cfff51e 	bne	r17,r19,6c28 <__alt_mem_Flash_flash_data+0xf4006c28>
    6c54:	a5000017 	ldw	r20,0(r20)
    6c58:	a03fed1e 	bne	r20,zero,6c10 <__alt_mem_Flash_flash_data+0xf4006c10>
    6c5c:	b805883a 	mov	r2,r23
    6c60:	dfc00817 	ldw	ra,32(sp)
    6c64:	ddc00717 	ldw	r23,28(sp)
    6c68:	dd800617 	ldw	r22,24(sp)
    6c6c:	dd400517 	ldw	r21,20(sp)
    6c70:	dd000417 	ldw	r20,16(sp)
    6c74:	dcc00317 	ldw	r19,12(sp)
    6c78:	dc800217 	ldw	r18,8(sp)
    6c7c:	dc400117 	ldw	r17,4(sp)
    6c80:	dc000017 	ldw	r16,0(sp)
    6c84:	dec00904 	addi	sp,sp,36
    6c88:	f800283a 	ret
    6c8c:	002f883a 	mov	r23,zero
    6c90:	003ff206 	br	6c5c <__alt_mem_Flash_flash_data+0xf4006c5c>

00006c94 <_fwalk_reent>:
    6c94:	defff704 	addi	sp,sp,-36
    6c98:	dd400515 	stw	r21,20(sp)
    6c9c:	dfc00815 	stw	ra,32(sp)
    6ca0:	ddc00715 	stw	r23,28(sp)
    6ca4:	dd800615 	stw	r22,24(sp)
    6ca8:	dd000415 	stw	r20,16(sp)
    6cac:	dcc00315 	stw	r19,12(sp)
    6cb0:	dc800215 	stw	r18,8(sp)
    6cb4:	dc400115 	stw	r17,4(sp)
    6cb8:	dc000015 	stw	r16,0(sp)
    6cbc:	2540b804 	addi	r21,r4,736
    6cc0:	a8002326 	beq	r21,zero,6d50 <_fwalk_reent+0xbc>
    6cc4:	2829883a 	mov	r20,r5
    6cc8:	202d883a 	mov	r22,r4
    6ccc:	002f883a 	mov	r23,zero
    6cd0:	04c00044 	movi	r19,1
    6cd4:	04bfffc4 	movi	r18,-1
    6cd8:	ac400117 	ldw	r17,4(r21)
    6cdc:	ac000217 	ldw	r16,8(r21)
    6ce0:	8c7fffc4 	addi	r17,r17,-1
    6ce4:	88000c16 	blt	r17,zero,6d18 <_fwalk_reent+0x84>
    6ce8:	84000304 	addi	r16,r16,12
    6cec:	80c0000b 	ldhu	r3,0(r16)
    6cf0:	8c7fffc4 	addi	r17,r17,-1
    6cf4:	817ffd04 	addi	r5,r16,-12
    6cf8:	98c0052e 	bgeu	r19,r3,6d10 <_fwalk_reent+0x7c>
    6cfc:	80c0008f 	ldh	r3,2(r16)
    6d00:	b009883a 	mov	r4,r22
    6d04:	1c800226 	beq	r3,r18,6d10 <_fwalk_reent+0x7c>
    6d08:	a03ee83a 	callr	r20
    6d0c:	b8aeb03a 	or	r23,r23,r2
    6d10:	84001a04 	addi	r16,r16,104
    6d14:	8cbff51e 	bne	r17,r18,6cec <__alt_mem_Flash_flash_data+0xf4006cec>
    6d18:	ad400017 	ldw	r21,0(r21)
    6d1c:	a83fee1e 	bne	r21,zero,6cd8 <__alt_mem_Flash_flash_data+0xf4006cd8>
    6d20:	b805883a 	mov	r2,r23
    6d24:	dfc00817 	ldw	ra,32(sp)
    6d28:	ddc00717 	ldw	r23,28(sp)
    6d2c:	dd800617 	ldw	r22,24(sp)
    6d30:	dd400517 	ldw	r21,20(sp)
    6d34:	dd000417 	ldw	r20,16(sp)
    6d38:	dcc00317 	ldw	r19,12(sp)
    6d3c:	dc800217 	ldw	r18,8(sp)
    6d40:	dc400117 	ldw	r17,4(sp)
    6d44:	dc000017 	ldw	r16,0(sp)
    6d48:	dec00904 	addi	sp,sp,36
    6d4c:	f800283a 	ret
    6d50:	002f883a 	mov	r23,zero
    6d54:	003ff206 	br	6d20 <__alt_mem_Flash_flash_data+0xf4006d20>

00006d58 <_setlocale_r>:
    6d58:	30001b26 	beq	r6,zero,6dc8 <_setlocale_r+0x70>
    6d5c:	014000b4 	movhi	r5,2
    6d60:	defffe04 	addi	sp,sp,-8
    6d64:	296e2404 	addi	r5,r5,-18288
    6d68:	3009883a 	mov	r4,r6
    6d6c:	dc000015 	stw	r16,0(sp)
    6d70:	dfc00115 	stw	ra,4(sp)
    6d74:	3021883a 	mov	r16,r6
    6d78:	00093440 	call	9344 <strcmp>
    6d7c:	1000061e 	bne	r2,zero,6d98 <_setlocale_r+0x40>
    6d80:	008000b4 	movhi	r2,2
    6d84:	10ae2304 	addi	r2,r2,-18292
    6d88:	dfc00117 	ldw	ra,4(sp)
    6d8c:	dc000017 	ldw	r16,0(sp)
    6d90:	dec00204 	addi	sp,sp,8
    6d94:	f800283a 	ret
    6d98:	014000b4 	movhi	r5,2
    6d9c:	296e2304 	addi	r5,r5,-18292
    6da0:	8009883a 	mov	r4,r16
    6da4:	00093440 	call	9344 <strcmp>
    6da8:	103ff526 	beq	r2,zero,6d80 <__alt_mem_Flash_flash_data+0xf4006d80>
    6dac:	014000b4 	movhi	r5,2
    6db0:	296e0e04 	addi	r5,r5,-18376
    6db4:	8009883a 	mov	r4,r16
    6db8:	00093440 	call	9344 <strcmp>
    6dbc:	103ff026 	beq	r2,zero,6d80 <__alt_mem_Flash_flash_data+0xf4006d80>
    6dc0:	0005883a 	mov	r2,zero
    6dc4:	003ff006 	br	6d88 <__alt_mem_Flash_flash_data+0xf4006d88>
    6dc8:	008000b4 	movhi	r2,2
    6dcc:	10ae2304 	addi	r2,r2,-18292
    6dd0:	f800283a 	ret

00006dd4 <__locale_charset>:
    6dd4:	008000b4 	movhi	r2,2
    6dd8:	10b08404 	addi	r2,r2,-15856
    6ddc:	f800283a 	ret

00006de0 <__locale_mb_cur_max>:
    6de0:	008000b4 	movhi	r2,2
    6de4:	10b71004 	addi	r2,r2,-9152
    6de8:	10800017 	ldw	r2,0(r2)
    6dec:	f800283a 	ret

00006df0 <__locale_msgcharset>:
    6df0:	008000b4 	movhi	r2,2
    6df4:	10b07c04 	addi	r2,r2,-15888
    6df8:	f800283a 	ret

00006dfc <__locale_cjk_lang>:
    6dfc:	0005883a 	mov	r2,zero
    6e00:	f800283a 	ret

00006e04 <_localeconv_r>:
    6e04:	008000b4 	movhi	r2,2
    6e08:	10b08c04 	addi	r2,r2,-15824
    6e0c:	f800283a 	ret

00006e10 <setlocale>:
    6e10:	00c000b4 	movhi	r3,2
    6e14:	18f70f04 	addi	r3,r3,-9156
    6e18:	2005883a 	mov	r2,r4
    6e1c:	19000017 	ldw	r4,0(r3)
    6e20:	280d883a 	mov	r6,r5
    6e24:	100b883a 	mov	r5,r2
    6e28:	0006d581 	jmpi	6d58 <_setlocale_r>

00006e2c <localeconv>:
    6e2c:	008000b4 	movhi	r2,2
    6e30:	10b08c04 	addi	r2,r2,-15824
    6e34:	f800283a 	ret

00006e38 <__smakebuf_r>:
    6e38:	2880030b 	ldhu	r2,12(r5)
    6e3c:	10c0008c 	andi	r3,r2,2
    6e40:	1800401e 	bne	r3,zero,6f44 <__smakebuf_r+0x10c>
    6e44:	deffec04 	addi	sp,sp,-80
    6e48:	dc000f15 	stw	r16,60(sp)
    6e4c:	2821883a 	mov	r16,r5
    6e50:	2940038f 	ldh	r5,14(r5)
    6e54:	dc401015 	stw	r17,64(sp)
    6e58:	dfc01315 	stw	ra,76(sp)
    6e5c:	dcc01215 	stw	r19,72(sp)
    6e60:	dc801115 	stw	r18,68(sp)
    6e64:	2023883a 	mov	r17,r4
    6e68:	28001b16 	blt	r5,zero,6ed8 <__smakebuf_r+0xa0>
    6e6c:	d80d883a 	mov	r6,sp
    6e70:	000ad040 	call	ad04 <_fstat_r>
    6e74:	10001716 	blt	r2,zero,6ed4 <__smakebuf_r+0x9c>
    6e78:	d8800117 	ldw	r2,4(sp)
    6e7c:	00e00014 	movui	r3,32768
    6e80:	10bc000c 	andi	r2,r2,61440
    6e84:	10c03726 	beq	r2,r3,6f64 <__smakebuf_r+0x12c>
    6e88:	80c0030b 	ldhu	r3,12(r16)
    6e8c:	18c20014 	ori	r3,r3,2048
    6e90:	80c0030d 	sth	r3,12(r16)
    6e94:	00c80004 	movi	r3,8192
    6e98:	10c03c1e 	bne	r2,r3,6f8c <__smakebuf_r+0x154>
    6e9c:	8140038f 	ldh	r5,14(r16)
    6ea0:	8809883a 	mov	r4,r17
    6ea4:	000ad5c0 	call	ad5c <_isatty_r>
    6ea8:	10004e26 	beq	r2,zero,6fe4 <__smakebuf_r+0x1ac>
    6eac:	8080030b 	ldhu	r2,12(r16)
    6eb0:	04c00044 	movi	r19,1
    6eb4:	80c010c4 	addi	r3,r16,67
    6eb8:	14c4b03a 	or	r2,r2,r19
    6ebc:	8080030d 	sth	r2,12(r16)
    6ec0:	80c00015 	stw	r3,0(r16)
    6ec4:	80c00415 	stw	r3,16(r16)
    6ec8:	84c00515 	stw	r19,20(r16)
    6ecc:	04810004 	movi	r18,1024
    6ed0:	00000706 	br	6ef0 <__smakebuf_r+0xb8>
    6ed4:	8080030b 	ldhu	r2,12(r16)
    6ed8:	10c0200c 	andi	r3,r2,128
    6edc:	18001f1e 	bne	r3,zero,6f5c <__smakebuf_r+0x124>
    6ee0:	04810004 	movi	r18,1024
    6ee4:	10820014 	ori	r2,r2,2048
    6ee8:	8080030d 	sth	r2,12(r16)
    6eec:	0027883a 	mov	r19,zero
    6ef0:	8809883a 	mov	r4,r17
    6ef4:	900b883a 	mov	r5,r18
    6ef8:	0006ff00 	call	6ff0 <_malloc_r>
    6efc:	10002e26 	beq	r2,zero,6fb8 <__smakebuf_r+0x180>
    6f00:	80c0030b 	ldhu	r3,12(r16)
    6f04:	01000034 	movhi	r4,0
    6f08:	2117db04 	addi	r4,r4,24428
    6f0c:	89000f15 	stw	r4,60(r17)
    6f10:	18c02014 	ori	r3,r3,128
    6f14:	80c0030d 	sth	r3,12(r16)
    6f18:	80800015 	stw	r2,0(r16)
    6f1c:	80800415 	stw	r2,16(r16)
    6f20:	84800515 	stw	r18,20(r16)
    6f24:	98001c1e 	bne	r19,zero,6f98 <__smakebuf_r+0x160>
    6f28:	dfc01317 	ldw	ra,76(sp)
    6f2c:	dcc01217 	ldw	r19,72(sp)
    6f30:	dc801117 	ldw	r18,68(sp)
    6f34:	dc401017 	ldw	r17,64(sp)
    6f38:	dc000f17 	ldw	r16,60(sp)
    6f3c:	dec01404 	addi	sp,sp,80
    6f40:	f800283a 	ret
    6f44:	288010c4 	addi	r2,r5,67
    6f48:	28800015 	stw	r2,0(r5)
    6f4c:	28800415 	stw	r2,16(r5)
    6f50:	00800044 	movi	r2,1
    6f54:	28800515 	stw	r2,20(r5)
    6f58:	f800283a 	ret
    6f5c:	04801004 	movi	r18,64
    6f60:	003fe006 	br	6ee4 <__alt_mem_Flash_flash_data+0xf4006ee4>
    6f64:	81000a17 	ldw	r4,40(r16)
    6f68:	00c00074 	movhi	r3,1
    6f6c:	18e4b804 	addi	r3,r3,-27936
    6f70:	20ffc51e 	bne	r4,r3,6e88 <__alt_mem_Flash_flash_data+0xf4006e88>
    6f74:	80c0030b 	ldhu	r3,12(r16)
    6f78:	01010004 	movi	r4,1024
    6f7c:	81001315 	stw	r4,76(r16)
    6f80:	1906b03a 	or	r3,r3,r4
    6f84:	80c0030d 	sth	r3,12(r16)
    6f88:	003fc206 	br	6e94 <__alt_mem_Flash_flash_data+0xf4006e94>
    6f8c:	0027883a 	mov	r19,zero
    6f90:	04810004 	movi	r18,1024
    6f94:	003fd606 	br	6ef0 <__alt_mem_Flash_flash_data+0xf4006ef0>
    6f98:	8140038f 	ldh	r5,14(r16)
    6f9c:	8809883a 	mov	r4,r17
    6fa0:	000ad5c0 	call	ad5c <_isatty_r>
    6fa4:	103fe026 	beq	r2,zero,6f28 <__alt_mem_Flash_flash_data+0xf4006f28>
    6fa8:	8080030b 	ldhu	r2,12(r16)
    6fac:	10800054 	ori	r2,r2,1
    6fb0:	8080030d 	sth	r2,12(r16)
    6fb4:	003fdc06 	br	6f28 <__alt_mem_Flash_flash_data+0xf4006f28>
    6fb8:	8080030b 	ldhu	r2,12(r16)
    6fbc:	10c0800c 	andi	r3,r2,512
    6fc0:	183fd91e 	bne	r3,zero,6f28 <__alt_mem_Flash_flash_data+0xf4006f28>
    6fc4:	10800094 	ori	r2,r2,2
    6fc8:	80c010c4 	addi	r3,r16,67
    6fcc:	8080030d 	sth	r2,12(r16)
    6fd0:	00800044 	movi	r2,1
    6fd4:	80c00015 	stw	r3,0(r16)
    6fd8:	80c00415 	stw	r3,16(r16)
    6fdc:	80800515 	stw	r2,20(r16)
    6fe0:	003fd106 	br	6f28 <__alt_mem_Flash_flash_data+0xf4006f28>
    6fe4:	04c00044 	movi	r19,1
    6fe8:	04810004 	movi	r18,1024
    6fec:	003fc006 	br	6ef0 <__alt_mem_Flash_flash_data+0xf4006ef0>

00006ff0 <_malloc_r>:
    6ff0:	defff504 	addi	sp,sp,-44
    6ff4:	dc800315 	stw	r18,12(sp)
    6ff8:	dfc00a15 	stw	ra,40(sp)
    6ffc:	df000915 	stw	fp,36(sp)
    7000:	ddc00815 	stw	r23,32(sp)
    7004:	dd800715 	stw	r22,28(sp)
    7008:	dd400615 	stw	r21,24(sp)
    700c:	dd000515 	stw	r20,20(sp)
    7010:	dcc00415 	stw	r19,16(sp)
    7014:	dc400215 	stw	r17,8(sp)
    7018:	dc000115 	stw	r16,4(sp)
    701c:	288002c4 	addi	r2,r5,11
    7020:	00c00584 	movi	r3,22
    7024:	2025883a 	mov	r18,r4
    7028:	18802a2e 	bgeu	r3,r2,70d4 <_malloc_r+0xe4>
    702c:	047ffe04 	movi	r17,-8
    7030:	1462703a 	and	r17,r2,r17
    7034:	88009e16 	blt	r17,zero,72b0 <_malloc_r+0x2c0>
    7038:	89409d36 	bltu	r17,r5,72b0 <_malloc_r+0x2c0>
    703c:	000eefc0 	call	eefc <__malloc_lock>
    7040:	00807dc4 	movi	r2,503
    7044:	14402736 	bltu	r2,r17,70e4 <_malloc_r+0xf4>
    7048:	8806d0fa 	srli	r3,r17,3
    704c:	04c000b4 	movhi	r19,2
    7050:	9cf09a04 	addi	r19,r19,-15768
    7054:	18c5883a 	add	r2,r3,r3
    7058:	1085883a 	add	r2,r2,r2
    705c:	1085883a 	add	r2,r2,r2
    7060:	9885883a 	add	r2,r19,r2
    7064:	14000317 	ldw	r16,12(r2)
    7068:	80814a26 	beq	r16,r2,7594 <_malloc_r+0x5a4>
    706c:	80c00117 	ldw	r3,4(r16)
    7070:	81000317 	ldw	r4,12(r16)
    7074:	00bfff04 	movi	r2,-4
    7078:	1884703a 	and	r2,r3,r2
    707c:	81400217 	ldw	r5,8(r16)
    7080:	8085883a 	add	r2,r16,r2
    7084:	10c00117 	ldw	r3,4(r2)
    7088:	29000315 	stw	r4,12(r5)
    708c:	21400215 	stw	r5,8(r4)
    7090:	18c00054 	ori	r3,r3,1
    7094:	10c00115 	stw	r3,4(r2)
    7098:	9009883a 	mov	r4,r18
    709c:	000f01c0 	call	f01c <__malloc_unlock>
    70a0:	80800204 	addi	r2,r16,8
    70a4:	dfc00a17 	ldw	ra,40(sp)
    70a8:	df000917 	ldw	fp,36(sp)
    70ac:	ddc00817 	ldw	r23,32(sp)
    70b0:	dd800717 	ldw	r22,28(sp)
    70b4:	dd400617 	ldw	r21,24(sp)
    70b8:	dd000517 	ldw	r20,20(sp)
    70bc:	dcc00417 	ldw	r19,16(sp)
    70c0:	dc800317 	ldw	r18,12(sp)
    70c4:	dc400217 	ldw	r17,8(sp)
    70c8:	dc000117 	ldw	r16,4(sp)
    70cc:	dec00b04 	addi	sp,sp,44
    70d0:	f800283a 	ret
    70d4:	04400404 	movi	r17,16
    70d8:	89407536 	bltu	r17,r5,72b0 <_malloc_r+0x2c0>
    70dc:	000eefc0 	call	eefc <__malloc_lock>
    70e0:	003fd906 	br	7048 <__alt_mem_Flash_flash_data+0xf4007048>
    70e4:	8806d27a 	srli	r3,r17,9
    70e8:	18007526 	beq	r3,zero,72c0 <_malloc_r+0x2d0>
    70ec:	00800104 	movi	r2,4
    70f0:	10c0ef36 	bltu	r2,r3,74b0 <_malloc_r+0x4c0>
    70f4:	8806d1ba 	srli	r3,r17,6
    70f8:	19c00e04 	addi	r7,r3,56
    70fc:	39cb883a 	add	r5,r7,r7
    7100:	04c000b4 	movhi	r19,2
    7104:	294b883a 	add	r5,r5,r5
    7108:	9cf09a04 	addi	r19,r19,-15768
    710c:	294b883a 	add	r5,r5,r5
    7110:	994b883a 	add	r5,r19,r5
    7114:	2c000317 	ldw	r16,12(r5)
    7118:	2c000e26 	beq	r5,r16,7154 <_malloc_r+0x164>
    711c:	80800117 	ldw	r2,4(r16)
    7120:	01bfff04 	movi	r6,-4
    7124:	010003c4 	movi	r4,15
    7128:	1184703a 	and	r2,r2,r6
    712c:	1447c83a 	sub	r3,r2,r17
    7130:	20c00716 	blt	r4,r3,7150 <_malloc_r+0x160>
    7134:	1800650e 	bge	r3,zero,72cc <_malloc_r+0x2dc>
    7138:	84000317 	ldw	r16,12(r16)
    713c:	2c000526 	beq	r5,r16,7154 <_malloc_r+0x164>
    7140:	80800117 	ldw	r2,4(r16)
    7144:	1184703a 	and	r2,r2,r6
    7148:	1447c83a 	sub	r3,r2,r17
    714c:	20fff90e 	bge	r4,r3,7134 <__alt_mem_Flash_flash_data+0xf4007134>
    7150:	39ffffc4 	addi	r7,r7,-1
    7154:	38c00044 	addi	r3,r7,1
    7158:	018000b4 	movhi	r6,2
    715c:	9c000417 	ldw	r16,16(r19)
    7160:	31b09a04 	addi	r6,r6,-15768
    7164:	32400204 	addi	r9,r6,8
    7168:	82410326 	beq	r16,r9,7578 <_malloc_r+0x588>
    716c:	81000117 	ldw	r4,4(r16)
    7170:	00bfff04 	movi	r2,-4
    7174:	208e703a 	and	r7,r4,r2
    7178:	3c45c83a 	sub	r2,r7,r17
    717c:	010003c4 	movi	r4,15
    7180:	2080ee16 	blt	r4,r2,753c <_malloc_r+0x54c>
    7184:	32400515 	stw	r9,20(r6)
    7188:	32400415 	stw	r9,16(r6)
    718c:	1000510e 	bge	r2,zero,72d4 <_malloc_r+0x2e4>
    7190:	00807fc4 	movi	r2,511
    7194:	11c0ce36 	bltu	r2,r7,74d0 <_malloc_r+0x4e0>
    7198:	3808d0fa 	srli	r4,r7,3
    719c:	01c00044 	movi	r7,1
    71a0:	30800117 	ldw	r2,4(r6)
    71a4:	210b883a 	add	r5,r4,r4
    71a8:	294b883a 	add	r5,r5,r5
    71ac:	2009d0ba 	srai	r4,r4,2
    71b0:	294b883a 	add	r5,r5,r5
    71b4:	298b883a 	add	r5,r5,r6
    71b8:	2a000217 	ldw	r8,8(r5)
    71bc:	3908983a 	sll	r4,r7,r4
    71c0:	81400315 	stw	r5,12(r16)
    71c4:	82000215 	stw	r8,8(r16)
    71c8:	2088b03a 	or	r4,r4,r2
    71cc:	2c000215 	stw	r16,8(r5)
    71d0:	31000115 	stw	r4,4(r6)
    71d4:	44000315 	stw	r16,12(r8)
    71d8:	1805d0ba 	srai	r2,r3,2
    71dc:	01400044 	movi	r5,1
    71e0:	288a983a 	sll	r5,r5,r2
    71e4:	21404336 	bltu	r4,r5,72f4 <_malloc_r+0x304>
    71e8:	2144703a 	and	r2,r4,r5
    71ec:	10000a1e 	bne	r2,zero,7218 <_malloc_r+0x228>
    71f0:	00bfff04 	movi	r2,-4
    71f4:	294b883a 	add	r5,r5,r5
    71f8:	1886703a 	and	r3,r3,r2
    71fc:	2144703a 	and	r2,r4,r5
    7200:	18c00104 	addi	r3,r3,4
    7204:	1000041e 	bne	r2,zero,7218 <_malloc_r+0x228>
    7208:	294b883a 	add	r5,r5,r5
    720c:	2144703a 	and	r2,r4,r5
    7210:	18c00104 	addi	r3,r3,4
    7214:	103ffc26 	beq	r2,zero,7208 <__alt_mem_Flash_flash_data+0xf4007208>
    7218:	023fff04 	movi	r8,-4
    721c:	01c003c4 	movi	r7,15
    7220:	18c5883a 	add	r2,r3,r3
    7224:	1085883a 	add	r2,r2,r2
    7228:	1085883a 	add	r2,r2,r2
    722c:	9895883a 	add	r10,r19,r2
    7230:	52c00304 	addi	r11,r10,12
    7234:	1819883a 	mov	r12,r3
    7238:	5c000017 	ldw	r16,0(r11)
    723c:	59bffd04 	addi	r6,r11,-12
    7240:	8180041e 	bne	r16,r6,7254 <_malloc_r+0x264>
    7244:	0000ce06 	br	7580 <_malloc_r+0x590>
    7248:	2000d70e 	bge	r4,zero,75a8 <_malloc_r+0x5b8>
    724c:	84000317 	ldw	r16,12(r16)
    7250:	8180cb26 	beq	r16,r6,7580 <_malloc_r+0x590>
    7254:	80800117 	ldw	r2,4(r16)
    7258:	1204703a 	and	r2,r2,r8
    725c:	1449c83a 	sub	r4,r2,r17
    7260:	393ff90e 	bge	r7,r4,7248 <__alt_mem_Flash_flash_data+0xf4007248>
    7264:	80800317 	ldw	r2,12(r16)
    7268:	80c00217 	ldw	r3,8(r16)
    726c:	89400054 	ori	r5,r17,1
    7270:	81400115 	stw	r5,4(r16)
    7274:	18800315 	stw	r2,12(r3)
    7278:	10c00215 	stw	r3,8(r2)
    727c:	8463883a 	add	r17,r16,r17
    7280:	9c400515 	stw	r17,20(r19)
    7284:	9c400415 	stw	r17,16(r19)
    7288:	20800054 	ori	r2,r4,1
    728c:	88800115 	stw	r2,4(r17)
    7290:	8a400315 	stw	r9,12(r17)
    7294:	8a400215 	stw	r9,8(r17)
    7298:	8923883a 	add	r17,r17,r4
    729c:	89000015 	stw	r4,0(r17)
    72a0:	9009883a 	mov	r4,r18
    72a4:	000f01c0 	call	f01c <__malloc_unlock>
    72a8:	80800204 	addi	r2,r16,8
    72ac:	003f7d06 	br	70a4 <__alt_mem_Flash_flash_data+0xf40070a4>
    72b0:	00800304 	movi	r2,12
    72b4:	90800015 	stw	r2,0(r18)
    72b8:	0005883a 	mov	r2,zero
    72bc:	003f7906 	br	70a4 <__alt_mem_Flash_flash_data+0xf40070a4>
    72c0:	01401f84 	movi	r5,126
    72c4:	01c00fc4 	movi	r7,63
    72c8:	003f8d06 	br	7100 <__alt_mem_Flash_flash_data+0xf4007100>
    72cc:	81000317 	ldw	r4,12(r16)
    72d0:	003f6a06 	br	707c <__alt_mem_Flash_flash_data+0xf400707c>
    72d4:	81c5883a 	add	r2,r16,r7
    72d8:	10c00117 	ldw	r3,4(r2)
    72dc:	9009883a 	mov	r4,r18
    72e0:	18c00054 	ori	r3,r3,1
    72e4:	10c00115 	stw	r3,4(r2)
    72e8:	000f01c0 	call	f01c <__malloc_unlock>
    72ec:	80800204 	addi	r2,r16,8
    72f0:	003f6c06 	br	70a4 <__alt_mem_Flash_flash_data+0xf40070a4>
    72f4:	9c000217 	ldw	r16,8(r19)
    72f8:	00bfff04 	movi	r2,-4
    72fc:	85800117 	ldw	r22,4(r16)
    7300:	b0ac703a 	and	r22,r22,r2
    7304:	b4400336 	bltu	r22,r17,7314 <_malloc_r+0x324>
    7308:	b445c83a 	sub	r2,r22,r17
    730c:	00c003c4 	movi	r3,15
    7310:	18805d16 	blt	r3,r2,7488 <_malloc_r+0x498>
    7314:	05c000b4 	movhi	r23,2
    7318:	008000b4 	movhi	r2,2
    731c:	bdf71104 	addi	r23,r23,-9148
    7320:	10bf2404 	addi	r2,r2,-880
    7324:	15400017 	ldw	r21,0(r2)
    7328:	b9000017 	ldw	r4,0(r23)
    732c:	00ffffc4 	movi	r3,-1
    7330:	858d883a 	add	r6,r16,r22
    7334:	8d6b883a 	add	r21,r17,r21
    7338:	20c0e426 	beq	r4,r3,76cc <_malloc_r+0x6dc>
    733c:	ad4403c4 	addi	r21,r21,4111
    7340:	00fc0004 	movi	r3,-4096
    7344:	a8ea703a 	and	r21,r21,r3
    7348:	9009883a 	mov	r4,r18
    734c:	a80b883a 	mov	r5,r21
    7350:	d9800015 	stw	r6,0(sp)
    7354:	00091b40 	call	91b4 <_sbrk_r>
    7358:	00ffffc4 	movi	r3,-1
    735c:	1029883a 	mov	r20,r2
    7360:	d9800017 	ldw	r6,0(sp)
    7364:	10c0a426 	beq	r2,r3,75f8 <_malloc_r+0x608>
    7368:	1180a236 	bltu	r2,r6,75f4 <_malloc_r+0x604>
    736c:	070000b4 	movhi	fp,2
    7370:	e73f4604 	addi	fp,fp,-744
    7374:	e0c00017 	ldw	r3,0(fp)
    7378:	a8c7883a 	add	r3,r21,r3
    737c:	e0c00015 	stw	r3,0(fp)
    7380:	3500da26 	beq	r6,r20,76ec <_malloc_r+0x6fc>
    7384:	b9000017 	ldw	r4,0(r23)
    7388:	00bfffc4 	movi	r2,-1
    738c:	2080e426 	beq	r4,r2,7720 <_malloc_r+0x730>
    7390:	a185c83a 	sub	r2,r20,r6
    7394:	1885883a 	add	r2,r3,r2
    7398:	e0800015 	stw	r2,0(fp)
    739c:	a0c001cc 	andi	r3,r20,7
    73a0:	1800b526 	beq	r3,zero,7678 <_malloc_r+0x688>
    73a4:	a0e9c83a 	sub	r20,r20,r3
    73a8:	00840204 	movi	r2,4104
    73ac:	a5000204 	addi	r20,r20,8
    73b0:	10c7c83a 	sub	r3,r2,r3
    73b4:	a545883a 	add	r2,r20,r21
    73b8:	1083ffcc 	andi	r2,r2,4095
    73bc:	18abc83a 	sub	r21,r3,r2
    73c0:	9009883a 	mov	r4,r18
    73c4:	a80b883a 	mov	r5,r21
    73c8:	00091b40 	call	91b4 <_sbrk_r>
    73cc:	00ffffc4 	movi	r3,-1
    73d0:	10c0d026 	beq	r2,r3,7714 <_malloc_r+0x724>
    73d4:	1507c83a 	sub	r3,r2,r20
    73d8:	a8c7883a 	add	r3,r21,r3
    73dc:	18c00054 	ori	r3,r3,1
    73e0:	e0800017 	ldw	r2,0(fp)
    73e4:	9d000215 	stw	r20,8(r19)
    73e8:	a0c00115 	stw	r3,4(r20)
    73ec:	a887883a 	add	r3,r21,r2
    73f0:	e0c00015 	stw	r3,0(fp)
    73f4:	84c00e26 	beq	r16,r19,7430 <_malloc_r+0x440>
    73f8:	018003c4 	movi	r6,15
    73fc:	3580a02e 	bgeu	r6,r22,7680 <_malloc_r+0x690>
    7400:	81400117 	ldw	r5,4(r16)
    7404:	013ffe04 	movi	r4,-8
    7408:	b0bffd04 	addi	r2,r22,-12
    740c:	1104703a 	and	r2,r2,r4
    7410:	2900004c 	andi	r4,r5,1
    7414:	1108b03a 	or	r4,r2,r4
    7418:	81000115 	stw	r4,4(r16)
    741c:	01400144 	movi	r5,5
    7420:	8089883a 	add	r4,r16,r2
    7424:	21400115 	stw	r5,4(r4)
    7428:	21400215 	stw	r5,8(r4)
    742c:	3080c036 	bltu	r6,r2,7730 <_malloc_r+0x740>
    7430:	008000b4 	movhi	r2,2
    7434:	10bf2304 	addi	r2,r2,-884
    7438:	11000017 	ldw	r4,0(r2)
    743c:	20c0012e 	bgeu	r4,r3,7444 <_malloc_r+0x454>
    7440:	10c00015 	stw	r3,0(r2)
    7444:	008000b4 	movhi	r2,2
    7448:	10bf2204 	addi	r2,r2,-888
    744c:	11000017 	ldw	r4,0(r2)
    7450:	9c000217 	ldw	r16,8(r19)
    7454:	20c0012e 	bgeu	r4,r3,745c <_malloc_r+0x46c>
    7458:	10c00015 	stw	r3,0(r2)
    745c:	80c00117 	ldw	r3,4(r16)
    7460:	00bfff04 	movi	r2,-4
    7464:	1886703a 	and	r3,r3,r2
    7468:	1c45c83a 	sub	r2,r3,r17
    746c:	1c400236 	bltu	r3,r17,7478 <_malloc_r+0x488>
    7470:	00c003c4 	movi	r3,15
    7474:	18800416 	blt	r3,r2,7488 <_malloc_r+0x498>
    7478:	9009883a 	mov	r4,r18
    747c:	000f01c0 	call	f01c <__malloc_unlock>
    7480:	0005883a 	mov	r2,zero
    7484:	003f0706 	br	70a4 <__alt_mem_Flash_flash_data+0xf40070a4>
    7488:	88c00054 	ori	r3,r17,1
    748c:	80c00115 	stw	r3,4(r16)
    7490:	8463883a 	add	r17,r16,r17
    7494:	10800054 	ori	r2,r2,1
    7498:	9c400215 	stw	r17,8(r19)
    749c:	88800115 	stw	r2,4(r17)
    74a0:	9009883a 	mov	r4,r18
    74a4:	000f01c0 	call	f01c <__malloc_unlock>
    74a8:	80800204 	addi	r2,r16,8
    74ac:	003efd06 	br	70a4 <__alt_mem_Flash_flash_data+0xf40070a4>
    74b0:	00800504 	movi	r2,20
    74b4:	10c0482e 	bgeu	r2,r3,75d8 <_malloc_r+0x5e8>
    74b8:	00801504 	movi	r2,84
    74bc:	10c06836 	bltu	r2,r3,7660 <_malloc_r+0x670>
    74c0:	8806d33a 	srli	r3,r17,12
    74c4:	19c01b84 	addi	r7,r3,110
    74c8:	39cb883a 	add	r5,r7,r7
    74cc:	003f0c06 	br	7100 <__alt_mem_Flash_flash_data+0xf4007100>
    74d0:	3804d27a 	srli	r2,r7,9
    74d4:	01000104 	movi	r4,4
    74d8:	2080422e 	bgeu	r4,r2,75e4 <_malloc_r+0x5f4>
    74dc:	01000504 	movi	r4,20
    74e0:	20807c36 	bltu	r4,r2,76d4 <_malloc_r+0x6e4>
    74e4:	110016c4 	addi	r4,r2,91
    74e8:	210b883a 	add	r5,r4,r4
    74ec:	294b883a 	add	r5,r5,r5
    74f0:	294b883a 	add	r5,r5,r5
    74f4:	994b883a 	add	r5,r19,r5
    74f8:	28800217 	ldw	r2,8(r5)
    74fc:	020000b4 	movhi	r8,2
    7500:	42309a04 	addi	r8,r8,-15768
    7504:	11406326 	beq	r2,r5,7694 <_malloc_r+0x6a4>
    7508:	01bfff04 	movi	r6,-4
    750c:	11000117 	ldw	r4,4(r2)
    7510:	2188703a 	and	r4,r4,r6
    7514:	3900022e 	bgeu	r7,r4,7520 <_malloc_r+0x530>
    7518:	10800217 	ldw	r2,8(r2)
    751c:	28bffb1e 	bne	r5,r2,750c <__alt_mem_Flash_flash_data+0xf400750c>
    7520:	11800317 	ldw	r6,12(r2)
    7524:	99000117 	ldw	r4,4(r19)
    7528:	81800315 	stw	r6,12(r16)
    752c:	80800215 	stw	r2,8(r16)
    7530:	34000215 	stw	r16,8(r6)
    7534:	14000315 	stw	r16,12(r2)
    7538:	003f2706 	br	71d8 <__alt_mem_Flash_flash_data+0xf40071d8>
    753c:	88c00054 	ori	r3,r17,1
    7540:	80c00115 	stw	r3,4(r16)
    7544:	8463883a 	add	r17,r16,r17
    7548:	34400515 	stw	r17,20(r6)
    754c:	34400415 	stw	r17,16(r6)
    7550:	10c00054 	ori	r3,r2,1
    7554:	8a400315 	stw	r9,12(r17)
    7558:	8a400215 	stw	r9,8(r17)
    755c:	88c00115 	stw	r3,4(r17)
    7560:	88a3883a 	add	r17,r17,r2
    7564:	88800015 	stw	r2,0(r17)
    7568:	9009883a 	mov	r4,r18
    756c:	000f01c0 	call	f01c <__malloc_unlock>
    7570:	80800204 	addi	r2,r16,8
    7574:	003ecb06 	br	70a4 <__alt_mem_Flash_flash_data+0xf40070a4>
    7578:	31000117 	ldw	r4,4(r6)
    757c:	003f1606 	br	71d8 <__alt_mem_Flash_flash_data+0xf40071d8>
    7580:	63000044 	addi	r12,r12,1
    7584:	608000cc 	andi	r2,r12,3
    7588:	5ac00204 	addi	r11,r11,8
    758c:	103f2a1e 	bne	r2,zero,7238 <__alt_mem_Flash_flash_data+0xf4007238>
    7590:	00002106 	br	7618 <_malloc_r+0x628>
    7594:	80800204 	addi	r2,r16,8
    7598:	84000517 	ldw	r16,20(r16)
    759c:	143eb31e 	bne	r2,r16,706c <__alt_mem_Flash_flash_data+0xf400706c>
    75a0:	18c00084 	addi	r3,r3,2
    75a4:	003eec06 	br	7158 <__alt_mem_Flash_flash_data+0xf4007158>
    75a8:	8085883a 	add	r2,r16,r2
    75ac:	10c00117 	ldw	r3,4(r2)
    75b0:	81000317 	ldw	r4,12(r16)
    75b4:	81400217 	ldw	r5,8(r16)
    75b8:	18c00054 	ori	r3,r3,1
    75bc:	10c00115 	stw	r3,4(r2)
    75c0:	29000315 	stw	r4,12(r5)
    75c4:	21400215 	stw	r5,8(r4)
    75c8:	9009883a 	mov	r4,r18
    75cc:	000f01c0 	call	f01c <__malloc_unlock>
    75d0:	80800204 	addi	r2,r16,8
    75d4:	003eb306 	br	70a4 <__alt_mem_Flash_flash_data+0xf40070a4>
    75d8:	19c016c4 	addi	r7,r3,91
    75dc:	39cb883a 	add	r5,r7,r7
    75e0:	003ec706 	br	7100 <__alt_mem_Flash_flash_data+0xf4007100>
    75e4:	3804d1ba 	srli	r2,r7,6
    75e8:	11000e04 	addi	r4,r2,56
    75ec:	210b883a 	add	r5,r4,r4
    75f0:	003fbe06 	br	74ec <__alt_mem_Flash_flash_data+0xf40074ec>
    75f4:	84ff5d26 	beq	r16,r19,736c <__alt_mem_Flash_flash_data+0xf400736c>
    75f8:	9c000217 	ldw	r16,8(r19)
    75fc:	00bfff04 	movi	r2,-4
    7600:	80c00117 	ldw	r3,4(r16)
    7604:	1886703a 	and	r3,r3,r2
    7608:	003f9706 	br	7468 <__alt_mem_Flash_flash_data+0xf4007468>
    760c:	52800017 	ldw	r10,0(r10)
    7610:	18ffffc4 	addi	r3,r3,-1
    7614:	50805c1e 	bne	r10,r2,7788 <_malloc_r+0x798>
    7618:	190000cc 	andi	r4,r3,3
    761c:	50bffe04 	addi	r2,r10,-8
    7620:	203ffa1e 	bne	r4,zero,760c <__alt_mem_Flash_flash_data+0xf400760c>
    7624:	98800117 	ldw	r2,4(r19)
    7628:	0146303a 	nor	r3,zero,r5
    762c:	1884703a 	and	r2,r3,r2
    7630:	98800115 	stw	r2,4(r19)
    7634:	294b883a 	add	r5,r5,r5
    7638:	117f2e36 	bltu	r2,r5,72f4 <__alt_mem_Flash_flash_data+0xf40072f4>
    763c:	283f2d26 	beq	r5,zero,72f4 <__alt_mem_Flash_flash_data+0xf40072f4>
    7640:	1146703a 	and	r3,r2,r5
    7644:	1800521e 	bne	r3,zero,7790 <_malloc_r+0x7a0>
    7648:	6007883a 	mov	r3,r12
    764c:	294b883a 	add	r5,r5,r5
    7650:	1148703a 	and	r4,r2,r5
    7654:	18c00104 	addi	r3,r3,4
    7658:	203ffc26 	beq	r4,zero,764c <__alt_mem_Flash_flash_data+0xf400764c>
    765c:	003ef006 	br	7220 <__alt_mem_Flash_flash_data+0xf4007220>
    7660:	00805504 	movi	r2,340
    7664:	10c01336 	bltu	r2,r3,76b4 <_malloc_r+0x6c4>
    7668:	8806d3fa 	srli	r3,r17,15
    766c:	19c01dc4 	addi	r7,r3,119
    7670:	39cb883a 	add	r5,r7,r7
    7674:	003ea206 	br	7100 <__alt_mem_Flash_flash_data+0xf4007100>
    7678:	00c40004 	movi	r3,4096
    767c:	003f4d06 	br	73b4 <__alt_mem_Flash_flash_data+0xf40073b4>
    7680:	00800044 	movi	r2,1
    7684:	a0800115 	stw	r2,4(r20)
    7688:	a021883a 	mov	r16,r20
    768c:	0007883a 	mov	r3,zero
    7690:	003f7506 	br	7468 <__alt_mem_Flash_flash_data+0xf4007468>
    7694:	200bd0ba 	srai	r5,r4,2
    7698:	01800044 	movi	r6,1
    769c:	41000117 	ldw	r4,4(r8)
    76a0:	314a983a 	sll	r5,r6,r5
    76a4:	100d883a 	mov	r6,r2
    76a8:	2908b03a 	or	r4,r5,r4
    76ac:	41000115 	stw	r4,4(r8)
    76b0:	003f9d06 	br	7528 <__alt_mem_Flash_flash_data+0xf4007528>
    76b4:	00815504 	movi	r2,1364
    76b8:	10c01336 	bltu	r2,r3,7708 <_malloc_r+0x718>
    76bc:	8806d4ba 	srli	r3,r17,18
    76c0:	19c01f04 	addi	r7,r3,124
    76c4:	39cb883a 	add	r5,r7,r7
    76c8:	003e8d06 	br	7100 <__alt_mem_Flash_flash_data+0xf4007100>
    76cc:	ad400404 	addi	r21,r21,16
    76d0:	003f1d06 	br	7348 <__alt_mem_Flash_flash_data+0xf4007348>
    76d4:	01001504 	movi	r4,84
    76d8:	20801c36 	bltu	r4,r2,774c <_malloc_r+0x75c>
    76dc:	3804d33a 	srli	r2,r7,12
    76e0:	11001b84 	addi	r4,r2,110
    76e4:	210b883a 	add	r5,r4,r4
    76e8:	003f8006 	br	74ec <__alt_mem_Flash_flash_data+0xf40074ec>
    76ec:	3083ffcc 	andi	r2,r6,4095
    76f0:	103f241e 	bne	r2,zero,7384 <__alt_mem_Flash_flash_data+0xf4007384>
    76f4:	99000217 	ldw	r4,8(r19)
    76f8:	ad85883a 	add	r2,r21,r22
    76fc:	10800054 	ori	r2,r2,1
    7700:	20800115 	stw	r2,4(r4)
    7704:	003f4a06 	br	7430 <__alt_mem_Flash_flash_data+0xf4007430>
    7708:	01403f04 	movi	r5,252
    770c:	01c01f84 	movi	r7,126
    7710:	003e7b06 	br	7100 <__alt_mem_Flash_flash_data+0xf4007100>
    7714:	00c00044 	movi	r3,1
    7718:	002b883a 	mov	r21,zero
    771c:	003f3006 	br	73e0 <__alt_mem_Flash_flash_data+0xf40073e0>
    7720:	008000b4 	movhi	r2,2
    7724:	10b71104 	addi	r2,r2,-9148
    7728:	15000015 	stw	r20,0(r2)
    772c:	003f1b06 	br	739c <__alt_mem_Flash_flash_data+0xf400739c>
    7730:	9009883a 	mov	r4,r18
    7734:	81400204 	addi	r5,r16,8
    7738:	00064200 	call	6420 <_free_r>
    773c:	008000b4 	movhi	r2,2
    7740:	10bf4604 	addi	r2,r2,-744
    7744:	10c00017 	ldw	r3,0(r2)
    7748:	003f3906 	br	7430 <__alt_mem_Flash_flash_data+0xf4007430>
    774c:	01005504 	movi	r4,340
    7750:	20800436 	bltu	r4,r2,7764 <_malloc_r+0x774>
    7754:	3804d3fa 	srli	r2,r7,15
    7758:	11001dc4 	addi	r4,r2,119
    775c:	210b883a 	add	r5,r4,r4
    7760:	003f6206 	br	74ec <__alt_mem_Flash_flash_data+0xf40074ec>
    7764:	01015504 	movi	r4,1364
    7768:	20800436 	bltu	r4,r2,777c <_malloc_r+0x78c>
    776c:	3804d4ba 	srli	r2,r7,18
    7770:	11001f04 	addi	r4,r2,124
    7774:	210b883a 	add	r5,r4,r4
    7778:	003f5c06 	br	74ec <__alt_mem_Flash_flash_data+0xf40074ec>
    777c:	01403f04 	movi	r5,252
    7780:	01001f84 	movi	r4,126
    7784:	003f5906 	br	74ec <__alt_mem_Flash_flash_data+0xf40074ec>
    7788:	98800117 	ldw	r2,4(r19)
    778c:	003fa906 	br	7634 <__alt_mem_Flash_flash_data+0xf4007634>
    7790:	6007883a 	mov	r3,r12
    7794:	003ea206 	br	7220 <__alt_mem_Flash_flash_data+0xf4007220>

00007798 <memchr>:
    7798:	208000cc 	andi	r2,r4,3
    779c:	280f883a 	mov	r7,r5
    77a0:	10003526 	beq	r2,zero,7878 <memchr+0xe0>
    77a4:	30bfffc4 	addi	r2,r6,-1
    77a8:	30001b26 	beq	r6,zero,7818 <memchr+0x80>
    77ac:	21800003 	ldbu	r6,0(r4)
    77b0:	28c03fcc 	andi	r3,r5,255
    77b4:	30c01a26 	beq	r6,r3,7820 <memchr+0x88>
    77b8:	180d883a 	mov	r6,r3
    77bc:	00000406 	br	77d0 <memchr+0x38>
    77c0:	10001526 	beq	r2,zero,7818 <memchr+0x80>
    77c4:	20c00003 	ldbu	r3,0(r4)
    77c8:	10bfffc4 	addi	r2,r2,-1
    77cc:	19801426 	beq	r3,r6,7820 <memchr+0x88>
    77d0:	21000044 	addi	r4,r4,1
    77d4:	20c000cc 	andi	r3,r4,3
    77d8:	183ff91e 	bne	r3,zero,77c0 <__alt_mem_Flash_flash_data+0xf40077c0>
    77dc:	024000c4 	movi	r9,3
    77e0:	48801136 	bltu	r9,r2,7828 <memchr+0x90>
    77e4:	10000c26 	beq	r2,zero,7818 <memchr+0x80>
    77e8:	20c00003 	ldbu	r3,0(r4)
    77ec:	29403fcc 	andi	r5,r5,255
    77f0:	19400b26 	beq	r3,r5,7820 <memchr+0x88>
    77f4:	20c00044 	addi	r3,r4,1
    77f8:	2085883a 	add	r2,r4,r2
    77fc:	39803fcc 	andi	r6,r7,255
    7800:	00000306 	br	7810 <memchr+0x78>
    7804:	18c00044 	addi	r3,r3,1
    7808:	197fffc3 	ldbu	r5,-1(r3)
    780c:	29800426 	beq	r5,r6,7820 <memchr+0x88>
    7810:	1809883a 	mov	r4,r3
    7814:	18bffb1e 	bne	r3,r2,7804 <__alt_mem_Flash_flash_data+0xf4007804>
    7818:	0005883a 	mov	r2,zero
    781c:	f800283a 	ret
    7820:	2005883a 	mov	r2,r4
    7824:	f800283a 	ret
    7828:	28c03fcc 	andi	r3,r5,255
    782c:	1810923a 	slli	r8,r3,8
    7830:	02ffbff4 	movhi	r11,65279
    7834:	02a02074 	movhi	r10,32897
    7838:	40c6b03a 	or	r3,r8,r3
    783c:	1810943a 	slli	r8,r3,16
    7840:	5affbfc4 	addi	r11,r11,-257
    7844:	52a02004 	addi	r10,r10,-32640
    7848:	40d0b03a 	or	r8,r8,r3
    784c:	20c00017 	ldw	r3,0(r4)
    7850:	40c6f03a 	xor	r3,r8,r3
    7854:	1acd883a 	add	r6,r3,r11
    7858:	00c6303a 	nor	r3,zero,r3
    785c:	30c6703a 	and	r3,r6,r3
    7860:	1a86703a 	and	r3,r3,r10
    7864:	183fdf1e 	bne	r3,zero,77e4 <__alt_mem_Flash_flash_data+0xf40077e4>
    7868:	10bfff04 	addi	r2,r2,-4
    786c:	21000104 	addi	r4,r4,4
    7870:	48bff636 	bltu	r9,r2,784c <__alt_mem_Flash_flash_data+0xf400784c>
    7874:	003fdb06 	br	77e4 <__alt_mem_Flash_flash_data+0xf40077e4>
    7878:	3005883a 	mov	r2,r6
    787c:	003fd706 	br	77dc <__alt_mem_Flash_flash_data+0xf40077dc>

00007880 <memcpy>:
    7880:	deffff04 	addi	sp,sp,-4
    7884:	dc000015 	stw	r16,0(sp)
    7888:	00c003c4 	movi	r3,15
    788c:	2005883a 	mov	r2,r4
    7890:	1980432e 	bgeu	r3,r6,79a0 <memcpy+0x120>
    7894:	2146b03a 	or	r3,r4,r5
    7898:	18c000cc 	andi	r3,r3,3
    789c:	1800421e 	bne	r3,zero,79a8 <memcpy+0x128>
    78a0:	343ffc04 	addi	r16,r6,-16
    78a4:	8020d13a 	srli	r16,r16,4
    78a8:	28c00104 	addi	r3,r5,4
    78ac:	23400104 	addi	r13,r4,4
    78b0:	801e913a 	slli	r15,r16,4
    78b4:	2b000204 	addi	r12,r5,8
    78b8:	22c00204 	addi	r11,r4,8
    78bc:	7bc00504 	addi	r15,r15,20
    78c0:	2a800304 	addi	r10,r5,12
    78c4:	22400304 	addi	r9,r4,12
    78c8:	2bdf883a 	add	r15,r5,r15
    78cc:	2811883a 	mov	r8,r5
    78d0:	200f883a 	mov	r7,r4
    78d4:	41000017 	ldw	r4,0(r8)
    78d8:	39c00404 	addi	r7,r7,16
    78dc:	18c00404 	addi	r3,r3,16
    78e0:	393ffc15 	stw	r4,-16(r7)
    78e4:	1bbffc17 	ldw	r14,-16(r3)
    78e8:	6b400404 	addi	r13,r13,16
    78ec:	5ac00404 	addi	r11,r11,16
    78f0:	6bbffc15 	stw	r14,-16(r13)
    78f4:	63800017 	ldw	r14,0(r12)
    78f8:	4a400404 	addi	r9,r9,16
    78fc:	42000404 	addi	r8,r8,16
    7900:	5bbffc15 	stw	r14,-16(r11)
    7904:	53800017 	ldw	r14,0(r10)
    7908:	63000404 	addi	r12,r12,16
    790c:	52800404 	addi	r10,r10,16
    7910:	4bbffc15 	stw	r14,-16(r9)
    7914:	1bffef1e 	bne	r3,r15,78d4 <__alt_mem_Flash_flash_data+0xf40078d4>
    7918:	81c00044 	addi	r7,r16,1
    791c:	380e913a 	slli	r7,r7,4
    7920:	310003cc 	andi	r4,r6,15
    7924:	02c000c4 	movi	r11,3
    7928:	11c7883a 	add	r3,r2,r7
    792c:	29cb883a 	add	r5,r5,r7
    7930:	59001f2e 	bgeu	r11,r4,79b0 <memcpy+0x130>
    7934:	1813883a 	mov	r9,r3
    7938:	2811883a 	mov	r8,r5
    793c:	200f883a 	mov	r7,r4
    7940:	42800017 	ldw	r10,0(r8)
    7944:	4a400104 	addi	r9,r9,4
    7948:	39ffff04 	addi	r7,r7,-4
    794c:	4abfff15 	stw	r10,-4(r9)
    7950:	42000104 	addi	r8,r8,4
    7954:	59fffa36 	bltu	r11,r7,7940 <__alt_mem_Flash_flash_data+0xf4007940>
    7958:	213fff04 	addi	r4,r4,-4
    795c:	2008d0ba 	srli	r4,r4,2
    7960:	318000cc 	andi	r6,r6,3
    7964:	21000044 	addi	r4,r4,1
    7968:	2109883a 	add	r4,r4,r4
    796c:	2109883a 	add	r4,r4,r4
    7970:	1907883a 	add	r3,r3,r4
    7974:	290b883a 	add	r5,r5,r4
    7978:	30000626 	beq	r6,zero,7994 <memcpy+0x114>
    797c:	198d883a 	add	r6,r3,r6
    7980:	29c00003 	ldbu	r7,0(r5)
    7984:	18c00044 	addi	r3,r3,1
    7988:	29400044 	addi	r5,r5,1
    798c:	19ffffc5 	stb	r7,-1(r3)
    7990:	19bffb1e 	bne	r3,r6,7980 <__alt_mem_Flash_flash_data+0xf4007980>
    7994:	dc000017 	ldw	r16,0(sp)
    7998:	dec00104 	addi	sp,sp,4
    799c:	f800283a 	ret
    79a0:	2007883a 	mov	r3,r4
    79a4:	003ff406 	br	7978 <__alt_mem_Flash_flash_data+0xf4007978>
    79a8:	2007883a 	mov	r3,r4
    79ac:	003ff306 	br	797c <__alt_mem_Flash_flash_data+0xf400797c>
    79b0:	200d883a 	mov	r6,r4
    79b4:	003ff006 	br	7978 <__alt_mem_Flash_flash_data+0xf4007978>

000079b8 <memmove>:
    79b8:	2005883a 	mov	r2,r4
    79bc:	29000b2e 	bgeu	r5,r4,79ec <memmove+0x34>
    79c0:	298f883a 	add	r7,r5,r6
    79c4:	21c0092e 	bgeu	r4,r7,79ec <memmove+0x34>
    79c8:	2187883a 	add	r3,r4,r6
    79cc:	198bc83a 	sub	r5,r3,r6
    79d0:	30004b26 	beq	r6,zero,7b00 <memmove+0x148>
    79d4:	39ffffc4 	addi	r7,r7,-1
    79d8:	39000003 	ldbu	r4,0(r7)
    79dc:	18ffffc4 	addi	r3,r3,-1
    79e0:	19000005 	stb	r4,0(r3)
    79e4:	197ffb1e 	bne	r3,r5,79d4 <__alt_mem_Flash_flash_data+0xf40079d4>
    79e8:	f800283a 	ret
    79ec:	00c003c4 	movi	r3,15
    79f0:	1980412e 	bgeu	r3,r6,7af8 <memmove+0x140>
    79f4:	1146b03a 	or	r3,r2,r5
    79f8:	18c000cc 	andi	r3,r3,3
    79fc:	1800411e 	bne	r3,zero,7b04 <memmove+0x14c>
    7a00:	33fffc04 	addi	r15,r6,-16
    7a04:	781ed13a 	srli	r15,r15,4
    7a08:	28c00104 	addi	r3,r5,4
    7a0c:	13400104 	addi	r13,r2,4
    7a10:	781c913a 	slli	r14,r15,4
    7a14:	2b000204 	addi	r12,r5,8
    7a18:	12c00204 	addi	r11,r2,8
    7a1c:	73800504 	addi	r14,r14,20
    7a20:	2a800304 	addi	r10,r5,12
    7a24:	12400304 	addi	r9,r2,12
    7a28:	2b9d883a 	add	r14,r5,r14
    7a2c:	2811883a 	mov	r8,r5
    7a30:	100f883a 	mov	r7,r2
    7a34:	41000017 	ldw	r4,0(r8)
    7a38:	39c00404 	addi	r7,r7,16
    7a3c:	18c00404 	addi	r3,r3,16
    7a40:	393ffc15 	stw	r4,-16(r7)
    7a44:	193ffc17 	ldw	r4,-16(r3)
    7a48:	6b400404 	addi	r13,r13,16
    7a4c:	5ac00404 	addi	r11,r11,16
    7a50:	693ffc15 	stw	r4,-16(r13)
    7a54:	61000017 	ldw	r4,0(r12)
    7a58:	4a400404 	addi	r9,r9,16
    7a5c:	42000404 	addi	r8,r8,16
    7a60:	593ffc15 	stw	r4,-16(r11)
    7a64:	51000017 	ldw	r4,0(r10)
    7a68:	63000404 	addi	r12,r12,16
    7a6c:	52800404 	addi	r10,r10,16
    7a70:	493ffc15 	stw	r4,-16(r9)
    7a74:	1bbfef1e 	bne	r3,r14,7a34 <__alt_mem_Flash_flash_data+0xf4007a34>
    7a78:	79000044 	addi	r4,r15,1
    7a7c:	2008913a 	slli	r4,r4,4
    7a80:	328003cc 	andi	r10,r6,15
    7a84:	02c000c4 	movi	r11,3
    7a88:	1107883a 	add	r3,r2,r4
    7a8c:	290b883a 	add	r5,r5,r4
    7a90:	5a801e2e 	bgeu	r11,r10,7b0c <memmove+0x154>
    7a94:	1813883a 	mov	r9,r3
    7a98:	2811883a 	mov	r8,r5
    7a9c:	500f883a 	mov	r7,r10
    7aa0:	41000017 	ldw	r4,0(r8)
    7aa4:	4a400104 	addi	r9,r9,4
    7aa8:	39ffff04 	addi	r7,r7,-4
    7aac:	493fff15 	stw	r4,-4(r9)
    7ab0:	42000104 	addi	r8,r8,4
    7ab4:	59fffa36 	bltu	r11,r7,7aa0 <__alt_mem_Flash_flash_data+0xf4007aa0>
    7ab8:	513fff04 	addi	r4,r10,-4
    7abc:	2008d0ba 	srli	r4,r4,2
    7ac0:	318000cc 	andi	r6,r6,3
    7ac4:	21000044 	addi	r4,r4,1
    7ac8:	2109883a 	add	r4,r4,r4
    7acc:	2109883a 	add	r4,r4,r4
    7ad0:	1907883a 	add	r3,r3,r4
    7ad4:	290b883a 	add	r5,r5,r4
    7ad8:	30000926 	beq	r6,zero,7b00 <memmove+0x148>
    7adc:	198d883a 	add	r6,r3,r6
    7ae0:	29c00003 	ldbu	r7,0(r5)
    7ae4:	18c00044 	addi	r3,r3,1
    7ae8:	29400044 	addi	r5,r5,1
    7aec:	19ffffc5 	stb	r7,-1(r3)
    7af0:	19bffb1e 	bne	r3,r6,7ae0 <__alt_mem_Flash_flash_data+0xf4007ae0>
    7af4:	f800283a 	ret
    7af8:	1007883a 	mov	r3,r2
    7afc:	003ff606 	br	7ad8 <__alt_mem_Flash_flash_data+0xf4007ad8>
    7b00:	f800283a 	ret
    7b04:	1007883a 	mov	r3,r2
    7b08:	003ff406 	br	7adc <__alt_mem_Flash_flash_data+0xf4007adc>
    7b0c:	500d883a 	mov	r6,r10
    7b10:	003ff106 	br	7ad8 <__alt_mem_Flash_flash_data+0xf4007ad8>

00007b14 <memset>:
    7b14:	20c000cc 	andi	r3,r4,3
    7b18:	2005883a 	mov	r2,r4
    7b1c:	18004326 	beq	r3,zero,7c2c <memset+0x118>
    7b20:	31ffffc4 	addi	r7,r6,-1
    7b24:	30004026 	beq	r6,zero,7c28 <memset+0x114>
    7b28:	2813883a 	mov	r9,r5
    7b2c:	200d883a 	mov	r6,r4
    7b30:	2007883a 	mov	r3,r4
    7b34:	00000406 	br	7b48 <memset+0x34>
    7b38:	3a3fffc4 	addi	r8,r7,-1
    7b3c:	31800044 	addi	r6,r6,1
    7b40:	38003926 	beq	r7,zero,7c28 <memset+0x114>
    7b44:	400f883a 	mov	r7,r8
    7b48:	18c00044 	addi	r3,r3,1
    7b4c:	32400005 	stb	r9,0(r6)
    7b50:	1a0000cc 	andi	r8,r3,3
    7b54:	403ff81e 	bne	r8,zero,7b38 <__alt_mem_Flash_flash_data+0xf4007b38>
    7b58:	010000c4 	movi	r4,3
    7b5c:	21c02d2e 	bgeu	r4,r7,7c14 <memset+0x100>
    7b60:	29803fcc 	andi	r6,r5,255
    7b64:	3008923a 	slli	r4,r6,8
    7b68:	218cb03a 	or	r6,r4,r6
    7b6c:	3008943a 	slli	r4,r6,16
    7b70:	218cb03a 	or	r6,r4,r6
    7b74:	010003c4 	movi	r4,15
    7b78:	21c0182e 	bgeu	r4,r7,7bdc <memset+0xc8>
    7b7c:	3b3ffc04 	addi	r12,r7,-16
    7b80:	6018d13a 	srli	r12,r12,4
    7b84:	1a000104 	addi	r8,r3,4
    7b88:	1ac00204 	addi	r11,r3,8
    7b8c:	6008913a 	slli	r4,r12,4
    7b90:	1a800304 	addi	r10,r3,12
    7b94:	1813883a 	mov	r9,r3
    7b98:	21000504 	addi	r4,r4,20
    7b9c:	1909883a 	add	r4,r3,r4
    7ba0:	49800015 	stw	r6,0(r9)
    7ba4:	41800015 	stw	r6,0(r8)
    7ba8:	59800015 	stw	r6,0(r11)
    7bac:	51800015 	stw	r6,0(r10)
    7bb0:	42000404 	addi	r8,r8,16
    7bb4:	4a400404 	addi	r9,r9,16
    7bb8:	5ac00404 	addi	r11,r11,16
    7bbc:	52800404 	addi	r10,r10,16
    7bc0:	413ff71e 	bne	r8,r4,7ba0 <__alt_mem_Flash_flash_data+0xf4007ba0>
    7bc4:	63000044 	addi	r12,r12,1
    7bc8:	6018913a 	slli	r12,r12,4
    7bcc:	39c003cc 	andi	r7,r7,15
    7bd0:	010000c4 	movi	r4,3
    7bd4:	1b07883a 	add	r3,r3,r12
    7bd8:	21c00e2e 	bgeu	r4,r7,7c14 <memset+0x100>
    7bdc:	1813883a 	mov	r9,r3
    7be0:	3811883a 	mov	r8,r7
    7be4:	010000c4 	movi	r4,3
    7be8:	49800015 	stw	r6,0(r9)
    7bec:	423fff04 	addi	r8,r8,-4
    7bf0:	4a400104 	addi	r9,r9,4
    7bf4:	223ffc36 	bltu	r4,r8,7be8 <__alt_mem_Flash_flash_data+0xf4007be8>
    7bf8:	393fff04 	addi	r4,r7,-4
    7bfc:	2008d0ba 	srli	r4,r4,2
    7c00:	39c000cc 	andi	r7,r7,3
    7c04:	21000044 	addi	r4,r4,1
    7c08:	2109883a 	add	r4,r4,r4
    7c0c:	2109883a 	add	r4,r4,r4
    7c10:	1907883a 	add	r3,r3,r4
    7c14:	38000426 	beq	r7,zero,7c28 <memset+0x114>
    7c18:	19cf883a 	add	r7,r3,r7
    7c1c:	19400005 	stb	r5,0(r3)
    7c20:	18c00044 	addi	r3,r3,1
    7c24:	19fffd1e 	bne	r3,r7,7c1c <__alt_mem_Flash_flash_data+0xf4007c1c>
    7c28:	f800283a 	ret
    7c2c:	2007883a 	mov	r3,r4
    7c30:	300f883a 	mov	r7,r6
    7c34:	003fc806 	br	7b58 <__alt_mem_Flash_flash_data+0xf4007b58>

00007c38 <_Balloc>:
    7c38:	20801317 	ldw	r2,76(r4)
    7c3c:	defffc04 	addi	sp,sp,-16
    7c40:	dc400115 	stw	r17,4(sp)
    7c44:	dc000015 	stw	r16,0(sp)
    7c48:	dfc00315 	stw	ra,12(sp)
    7c4c:	dc800215 	stw	r18,8(sp)
    7c50:	2023883a 	mov	r17,r4
    7c54:	2821883a 	mov	r16,r5
    7c58:	10000f26 	beq	r2,zero,7c98 <_Balloc+0x60>
    7c5c:	8407883a 	add	r3,r16,r16
    7c60:	18c7883a 	add	r3,r3,r3
    7c64:	10c7883a 	add	r3,r2,r3
    7c68:	18800017 	ldw	r2,0(r3)
    7c6c:	10001126 	beq	r2,zero,7cb4 <_Balloc+0x7c>
    7c70:	11000017 	ldw	r4,0(r2)
    7c74:	19000015 	stw	r4,0(r3)
    7c78:	10000415 	stw	zero,16(r2)
    7c7c:	10000315 	stw	zero,12(r2)
    7c80:	dfc00317 	ldw	ra,12(sp)
    7c84:	dc800217 	ldw	r18,8(sp)
    7c88:	dc400117 	ldw	r17,4(sp)
    7c8c:	dc000017 	ldw	r16,0(sp)
    7c90:	dec00404 	addi	sp,sp,16
    7c94:	f800283a 	ret
    7c98:	01400104 	movi	r5,4
    7c9c:	01800844 	movi	r6,33
    7ca0:	000a95c0 	call	a95c <_calloc_r>
    7ca4:	88801315 	stw	r2,76(r17)
    7ca8:	103fec1e 	bne	r2,zero,7c5c <__alt_mem_Flash_flash_data+0xf4007c5c>
    7cac:	0005883a 	mov	r2,zero
    7cb0:	003ff306 	br	7c80 <__alt_mem_Flash_flash_data+0xf4007c80>
    7cb4:	01400044 	movi	r5,1
    7cb8:	2c24983a 	sll	r18,r5,r16
    7cbc:	8809883a 	mov	r4,r17
    7cc0:	91800144 	addi	r6,r18,5
    7cc4:	318d883a 	add	r6,r6,r6
    7cc8:	318d883a 	add	r6,r6,r6
    7ccc:	000a95c0 	call	a95c <_calloc_r>
    7cd0:	103ff626 	beq	r2,zero,7cac <__alt_mem_Flash_flash_data+0xf4007cac>
    7cd4:	14000115 	stw	r16,4(r2)
    7cd8:	14800215 	stw	r18,8(r2)
    7cdc:	003fe606 	br	7c78 <__alt_mem_Flash_flash_data+0xf4007c78>

00007ce0 <_Bfree>:
    7ce0:	28000826 	beq	r5,zero,7d04 <_Bfree+0x24>
    7ce4:	28c00117 	ldw	r3,4(r5)
    7ce8:	20801317 	ldw	r2,76(r4)
    7cec:	18c7883a 	add	r3,r3,r3
    7cf0:	18c7883a 	add	r3,r3,r3
    7cf4:	10c5883a 	add	r2,r2,r3
    7cf8:	10c00017 	ldw	r3,0(r2)
    7cfc:	28c00015 	stw	r3,0(r5)
    7d00:	11400015 	stw	r5,0(r2)
    7d04:	f800283a 	ret

00007d08 <__multadd>:
    7d08:	defffa04 	addi	sp,sp,-24
    7d0c:	dc000115 	stw	r16,4(sp)
    7d10:	2c000417 	ldw	r16,16(r5)
    7d14:	dc800315 	stw	r18,12(sp)
    7d18:	dc400215 	stw	r17,8(sp)
    7d1c:	dfc00515 	stw	ra,20(sp)
    7d20:	dcc00415 	stw	r19,16(sp)
    7d24:	2823883a 	mov	r17,r5
    7d28:	2025883a 	mov	r18,r4
    7d2c:	2a400504 	addi	r9,r5,20
    7d30:	0015883a 	mov	r10,zero
    7d34:	4a000017 	ldw	r8,0(r9)
    7d38:	4a400104 	addi	r9,r9,4
    7d3c:	52800044 	addi	r10,r10,1
    7d40:	40ffffcc 	andi	r3,r8,65535
    7d44:	1987383a 	mul	r3,r3,r6
    7d48:	4010d43a 	srli	r8,r8,16
    7d4c:	19cf883a 	add	r7,r3,r7
    7d50:	4191383a 	mul	r8,r8,r6
    7d54:	3816d43a 	srli	r11,r7,16
    7d58:	38ffffcc 	andi	r3,r7,65535
    7d5c:	5a0f883a 	add	r7,r11,r8
    7d60:	3810943a 	slli	r8,r7,16
    7d64:	380ed43a 	srli	r7,r7,16
    7d68:	40c7883a 	add	r3,r8,r3
    7d6c:	48ffff15 	stw	r3,-4(r9)
    7d70:	543ff016 	blt	r10,r16,7d34 <__alt_mem_Flash_flash_data+0xf4007d34>
    7d74:	38000926 	beq	r7,zero,7d9c <__multadd+0x94>
    7d78:	88800217 	ldw	r2,8(r17)
    7d7c:	80800f0e 	bge	r16,r2,7dbc <__multadd+0xb4>
    7d80:	80800144 	addi	r2,r16,5
    7d84:	1085883a 	add	r2,r2,r2
    7d88:	1085883a 	add	r2,r2,r2
    7d8c:	8885883a 	add	r2,r17,r2
    7d90:	11c00015 	stw	r7,0(r2)
    7d94:	84000044 	addi	r16,r16,1
    7d98:	8c000415 	stw	r16,16(r17)
    7d9c:	8805883a 	mov	r2,r17
    7da0:	dfc00517 	ldw	ra,20(sp)
    7da4:	dcc00417 	ldw	r19,16(sp)
    7da8:	dc800317 	ldw	r18,12(sp)
    7dac:	dc400217 	ldw	r17,8(sp)
    7db0:	dc000117 	ldw	r16,4(sp)
    7db4:	dec00604 	addi	sp,sp,24
    7db8:	f800283a 	ret
    7dbc:	89400117 	ldw	r5,4(r17)
    7dc0:	9009883a 	mov	r4,r18
    7dc4:	d9c00015 	stw	r7,0(sp)
    7dc8:	29400044 	addi	r5,r5,1
    7dcc:	0007c380 	call	7c38 <_Balloc>
    7dd0:	89800417 	ldw	r6,16(r17)
    7dd4:	11000304 	addi	r4,r2,12
    7dd8:	89400304 	addi	r5,r17,12
    7ddc:	31800084 	addi	r6,r6,2
    7de0:	318d883a 	add	r6,r6,r6
    7de4:	318d883a 	add	r6,r6,r6
    7de8:	1027883a 	mov	r19,r2
    7dec:	00078800 	call	7880 <memcpy>
    7df0:	d9c00017 	ldw	r7,0(sp)
    7df4:	88000a26 	beq	r17,zero,7e20 <__multadd+0x118>
    7df8:	89000117 	ldw	r4,4(r17)
    7dfc:	90c01317 	ldw	r3,76(r18)
    7e00:	2109883a 	add	r4,r4,r4
    7e04:	2109883a 	add	r4,r4,r4
    7e08:	1907883a 	add	r3,r3,r4
    7e0c:	18800017 	ldw	r2,0(r3)
    7e10:	88800015 	stw	r2,0(r17)
    7e14:	1c400015 	stw	r17,0(r3)
    7e18:	9823883a 	mov	r17,r19
    7e1c:	003fd806 	br	7d80 <__alt_mem_Flash_flash_data+0xf4007d80>
    7e20:	9823883a 	mov	r17,r19
    7e24:	003fd606 	br	7d80 <__alt_mem_Flash_flash_data+0xf4007d80>

00007e28 <__s2b>:
    7e28:	defff904 	addi	sp,sp,-28
    7e2c:	dc400115 	stw	r17,4(sp)
    7e30:	dc000015 	stw	r16,0(sp)
    7e34:	2023883a 	mov	r17,r4
    7e38:	2821883a 	mov	r16,r5
    7e3c:	39000204 	addi	r4,r7,8
    7e40:	01400244 	movi	r5,9
    7e44:	dcc00315 	stw	r19,12(sp)
    7e48:	dc800215 	stw	r18,8(sp)
    7e4c:	dfc00615 	stw	ra,24(sp)
    7e50:	dd400515 	stw	r21,20(sp)
    7e54:	dd000415 	stw	r20,16(sp)
    7e58:	3825883a 	mov	r18,r7
    7e5c:	3027883a 	mov	r19,r6
    7e60:	000bd600 	call	bd60 <__divsi3>
    7e64:	00c00044 	movi	r3,1
    7e68:	000b883a 	mov	r5,zero
    7e6c:	1880030e 	bge	r3,r2,7e7c <__s2b+0x54>
    7e70:	18c7883a 	add	r3,r3,r3
    7e74:	29400044 	addi	r5,r5,1
    7e78:	18bffd16 	blt	r3,r2,7e70 <__alt_mem_Flash_flash_data+0xf4007e70>
    7e7c:	8809883a 	mov	r4,r17
    7e80:	0007c380 	call	7c38 <_Balloc>
    7e84:	d8c00717 	ldw	r3,28(sp)
    7e88:	10c00515 	stw	r3,20(r2)
    7e8c:	00c00044 	movi	r3,1
    7e90:	10c00415 	stw	r3,16(r2)
    7e94:	00c00244 	movi	r3,9
    7e98:	1cc0210e 	bge	r3,r19,7f20 <__s2b+0xf8>
    7e9c:	80eb883a 	add	r21,r16,r3
    7ea0:	a829883a 	mov	r20,r21
    7ea4:	84e1883a 	add	r16,r16,r19
    7ea8:	a1c00007 	ldb	r7,0(r20)
    7eac:	8809883a 	mov	r4,r17
    7eb0:	a5000044 	addi	r20,r20,1
    7eb4:	100b883a 	mov	r5,r2
    7eb8:	01800284 	movi	r6,10
    7ebc:	39fff404 	addi	r7,r7,-48
    7ec0:	0007d080 	call	7d08 <__multadd>
    7ec4:	a43ff81e 	bne	r20,r16,7ea8 <__alt_mem_Flash_flash_data+0xf4007ea8>
    7ec8:	ace1883a 	add	r16,r21,r19
    7ecc:	843ffe04 	addi	r16,r16,-8
    7ed0:	9c800a0e 	bge	r19,r18,7efc <__s2b+0xd4>
    7ed4:	94e5c83a 	sub	r18,r18,r19
    7ed8:	84a5883a 	add	r18,r16,r18
    7edc:	81c00007 	ldb	r7,0(r16)
    7ee0:	8809883a 	mov	r4,r17
    7ee4:	84000044 	addi	r16,r16,1
    7ee8:	100b883a 	mov	r5,r2
    7eec:	01800284 	movi	r6,10
    7ef0:	39fff404 	addi	r7,r7,-48
    7ef4:	0007d080 	call	7d08 <__multadd>
    7ef8:	84bff81e 	bne	r16,r18,7edc <__alt_mem_Flash_flash_data+0xf4007edc>
    7efc:	dfc00617 	ldw	ra,24(sp)
    7f00:	dd400517 	ldw	r21,20(sp)
    7f04:	dd000417 	ldw	r20,16(sp)
    7f08:	dcc00317 	ldw	r19,12(sp)
    7f0c:	dc800217 	ldw	r18,8(sp)
    7f10:	dc400117 	ldw	r17,4(sp)
    7f14:	dc000017 	ldw	r16,0(sp)
    7f18:	dec00704 	addi	sp,sp,28
    7f1c:	f800283a 	ret
    7f20:	84000284 	addi	r16,r16,10
    7f24:	1827883a 	mov	r19,r3
    7f28:	003fe906 	br	7ed0 <__alt_mem_Flash_flash_data+0xf4007ed0>

00007f2c <__hi0bits>:
    7f2c:	20bfffec 	andhi	r2,r4,65535
    7f30:	1000141e 	bne	r2,zero,7f84 <__hi0bits+0x58>
    7f34:	2008943a 	slli	r4,r4,16
    7f38:	00800404 	movi	r2,16
    7f3c:	20ffc02c 	andhi	r3,r4,65280
    7f40:	1800021e 	bne	r3,zero,7f4c <__hi0bits+0x20>
    7f44:	2008923a 	slli	r4,r4,8
    7f48:	10800204 	addi	r2,r2,8
    7f4c:	20fc002c 	andhi	r3,r4,61440
    7f50:	1800021e 	bne	r3,zero,7f5c <__hi0bits+0x30>
    7f54:	2008913a 	slli	r4,r4,4
    7f58:	10800104 	addi	r2,r2,4
    7f5c:	20f0002c 	andhi	r3,r4,49152
    7f60:	1800031e 	bne	r3,zero,7f70 <__hi0bits+0x44>
    7f64:	2109883a 	add	r4,r4,r4
    7f68:	10800084 	addi	r2,r2,2
    7f6c:	2109883a 	add	r4,r4,r4
    7f70:	20000316 	blt	r4,zero,7f80 <__hi0bits+0x54>
    7f74:	2110002c 	andhi	r4,r4,16384
    7f78:	2000041e 	bne	r4,zero,7f8c <__hi0bits+0x60>
    7f7c:	00800804 	movi	r2,32
    7f80:	f800283a 	ret
    7f84:	0005883a 	mov	r2,zero
    7f88:	003fec06 	br	7f3c <__alt_mem_Flash_flash_data+0xf4007f3c>
    7f8c:	10800044 	addi	r2,r2,1
    7f90:	f800283a 	ret

00007f94 <__lo0bits>:
    7f94:	20c00017 	ldw	r3,0(r4)
    7f98:	188001cc 	andi	r2,r3,7
    7f9c:	10000826 	beq	r2,zero,7fc0 <__lo0bits+0x2c>
    7fa0:	1880004c 	andi	r2,r3,1
    7fa4:	1000211e 	bne	r2,zero,802c <__lo0bits+0x98>
    7fa8:	1880008c 	andi	r2,r3,2
    7fac:	1000211e 	bne	r2,zero,8034 <__lo0bits+0xa0>
    7fb0:	1806d0ba 	srli	r3,r3,2
    7fb4:	00800084 	movi	r2,2
    7fb8:	20c00015 	stw	r3,0(r4)
    7fbc:	f800283a 	ret
    7fc0:	18bfffcc 	andi	r2,r3,65535
    7fc4:	10001326 	beq	r2,zero,8014 <__lo0bits+0x80>
    7fc8:	0005883a 	mov	r2,zero
    7fcc:	19403fcc 	andi	r5,r3,255
    7fd0:	2800021e 	bne	r5,zero,7fdc <__lo0bits+0x48>
    7fd4:	1806d23a 	srli	r3,r3,8
    7fd8:	10800204 	addi	r2,r2,8
    7fdc:	194003cc 	andi	r5,r3,15
    7fe0:	2800021e 	bne	r5,zero,7fec <__lo0bits+0x58>
    7fe4:	1806d13a 	srli	r3,r3,4
    7fe8:	10800104 	addi	r2,r2,4
    7fec:	194000cc 	andi	r5,r3,3
    7ff0:	2800021e 	bne	r5,zero,7ffc <__lo0bits+0x68>
    7ff4:	1806d0ba 	srli	r3,r3,2
    7ff8:	10800084 	addi	r2,r2,2
    7ffc:	1940004c 	andi	r5,r3,1
    8000:	2800081e 	bne	r5,zero,8024 <__lo0bits+0x90>
    8004:	1806d07a 	srli	r3,r3,1
    8008:	1800051e 	bne	r3,zero,8020 <__lo0bits+0x8c>
    800c:	00800804 	movi	r2,32
    8010:	f800283a 	ret
    8014:	1806d43a 	srli	r3,r3,16
    8018:	00800404 	movi	r2,16
    801c:	003feb06 	br	7fcc <__alt_mem_Flash_flash_data+0xf4007fcc>
    8020:	10800044 	addi	r2,r2,1
    8024:	20c00015 	stw	r3,0(r4)
    8028:	f800283a 	ret
    802c:	0005883a 	mov	r2,zero
    8030:	f800283a 	ret
    8034:	1806d07a 	srli	r3,r3,1
    8038:	00800044 	movi	r2,1
    803c:	20c00015 	stw	r3,0(r4)
    8040:	f800283a 	ret

00008044 <__i2b>:
    8044:	defffd04 	addi	sp,sp,-12
    8048:	dc000015 	stw	r16,0(sp)
    804c:	04000044 	movi	r16,1
    8050:	dc400115 	stw	r17,4(sp)
    8054:	2823883a 	mov	r17,r5
    8058:	800b883a 	mov	r5,r16
    805c:	dfc00215 	stw	ra,8(sp)
    8060:	0007c380 	call	7c38 <_Balloc>
    8064:	14400515 	stw	r17,20(r2)
    8068:	14000415 	stw	r16,16(r2)
    806c:	dfc00217 	ldw	ra,8(sp)
    8070:	dc400117 	ldw	r17,4(sp)
    8074:	dc000017 	ldw	r16,0(sp)
    8078:	dec00304 	addi	sp,sp,12
    807c:	f800283a 	ret

00008080 <__multiply>:
    8080:	defffa04 	addi	sp,sp,-24
    8084:	dcc00315 	stw	r19,12(sp)
    8088:	dc800215 	stw	r18,8(sp)
    808c:	2cc00417 	ldw	r19,16(r5)
    8090:	34800417 	ldw	r18,16(r6)
    8094:	dd000415 	stw	r20,16(sp)
    8098:	dc400115 	stw	r17,4(sp)
    809c:	dfc00515 	stw	ra,20(sp)
    80a0:	dc000015 	stw	r16,0(sp)
    80a4:	2829883a 	mov	r20,r5
    80a8:	3023883a 	mov	r17,r6
    80ac:	9c807016 	blt	r19,r18,8270 <__multiply+0x1f0>
    80b0:	9005883a 	mov	r2,r18
    80b4:	9825883a 	mov	r18,r19
    80b8:	1027883a 	mov	r19,r2
    80bc:	a0800217 	ldw	r2,8(r20)
    80c0:	94e1883a 	add	r16,r18,r19
    80c4:	a1400117 	ldw	r5,4(r20)
    80c8:	1400010e 	bge	r2,r16,80d0 <__multiply+0x50>
    80cc:	29400044 	addi	r5,r5,1
    80d0:	0007c380 	call	7c38 <_Balloc>
    80d4:	8417883a 	add	r11,r16,r16
    80d8:	13000504 	addi	r12,r2,20
    80dc:	5ad7883a 	add	r11,r11,r11
    80e0:	62d7883a 	add	r11,r12,r11
    80e4:	6007883a 	mov	r3,r12
    80e8:	62c0032e 	bgeu	r12,r11,80f8 <__multiply+0x78>
    80ec:	18000015 	stw	zero,0(r3)
    80f0:	18c00104 	addi	r3,r3,4
    80f4:	1afffd36 	bltu	r3,r11,80ec <__alt_mem_Flash_flash_data+0xf40080ec>
    80f8:	9ce7883a 	add	r19,r19,r19
    80fc:	94a5883a 	add	r18,r18,r18
    8100:	89800504 	addi	r6,r17,20
    8104:	9ce7883a 	add	r19,r19,r19
    8108:	a3800504 	addi	r14,r20,20
    810c:	94a5883a 	add	r18,r18,r18
    8110:	34db883a 	add	r13,r6,r19
    8114:	7495883a 	add	r10,r14,r18
    8118:	3340422e 	bgeu	r6,r13,8224 <__multiply+0x1a4>
    811c:	34400017 	ldw	r17,0(r6)
    8120:	8cbfffcc 	andi	r18,r17,65535
    8124:	90001b26 	beq	r18,zero,8194 <__multiply+0x114>
    8128:	6013883a 	mov	r9,r12
    812c:	7023883a 	mov	r17,r14
    8130:	0011883a 	mov	r8,zero
    8134:	88c00017 	ldw	r3,0(r17)
    8138:	4bc00017 	ldw	r15,0(r9)
    813c:	8c400104 	addi	r17,r17,4
    8140:	19ffffcc 	andi	r7,r3,65535
    8144:	3c8f383a 	mul	r7,r7,r18
    8148:	1808d43a 	srli	r4,r3,16
    814c:	797fffcc 	andi	r5,r15,65535
    8150:	29cb883a 	add	r5,r5,r7
    8154:	2a0b883a 	add	r5,r5,r8
    8158:	2489383a 	mul	r4,r4,r18
    815c:	7806d43a 	srli	r3,r15,16
    8160:	2810d43a 	srli	r8,r5,16
    8164:	297fffcc 	andi	r5,r5,65535
    8168:	1907883a 	add	r3,r3,r4
    816c:	1a07883a 	add	r3,r3,r8
    8170:	1808943a 	slli	r4,r3,16
    8174:	480f883a 	mov	r7,r9
    8178:	1810d43a 	srli	r8,r3,16
    817c:	214ab03a 	or	r5,r4,r5
    8180:	49400015 	stw	r5,0(r9)
    8184:	4a400104 	addi	r9,r9,4
    8188:	8abfea36 	bltu	r17,r10,8134 <__alt_mem_Flash_flash_data+0xf4008134>
    818c:	3a000115 	stw	r8,4(r7)
    8190:	34400017 	ldw	r17,0(r6)
    8194:	8822d43a 	srli	r17,r17,16
    8198:	88001f26 	beq	r17,zero,8218 <__multiply+0x198>
    819c:	60c00017 	ldw	r3,0(r12)
    81a0:	7013883a 	mov	r9,r14
    81a4:	601f883a 	mov	r15,r12
    81a8:	1811883a 	mov	r8,r3
    81ac:	6027883a 	mov	r19,r12
    81b0:	000f883a 	mov	r7,zero
    81b4:	00000106 	br	81bc <__multiply+0x13c>
    81b8:	9027883a 	mov	r19,r18
    81bc:	4940000b 	ldhu	r5,0(r9)
    81c0:	4010d43a 	srli	r8,r8,16
    81c4:	193fffcc 	andi	r4,r3,65535
    81c8:	2c4b383a 	mul	r5,r5,r17
    81cc:	7bc00104 	addi	r15,r15,4
    81d0:	4a400104 	addi	r9,r9,4
    81d4:	2a0b883a 	add	r5,r5,r8
    81d8:	29cb883a 	add	r5,r5,r7
    81dc:	2806943a 	slli	r3,r5,16
    81e0:	9c800104 	addi	r18,r19,4
    81e4:	280ad43a 	srli	r5,r5,16
    81e8:	1908b03a 	or	r4,r3,r4
    81ec:	793fff15 	stw	r4,-4(r15)
    81f0:	48ffff17 	ldw	r3,-4(r9)
    81f4:	92000017 	ldw	r8,0(r18)
    81f8:	1806d43a 	srli	r3,r3,16
    81fc:	413fffcc 	andi	r4,r8,65535
    8200:	1c47383a 	mul	r3,r3,r17
    8204:	1907883a 	add	r3,r3,r4
    8208:	1947883a 	add	r3,r3,r5
    820c:	180ed43a 	srli	r7,r3,16
    8210:	4abfe936 	bltu	r9,r10,81b8 <__alt_mem_Flash_flash_data+0xf40081b8>
    8214:	98c00115 	stw	r3,4(r19)
    8218:	31800104 	addi	r6,r6,4
    821c:	63000104 	addi	r12,r12,4
    8220:	337fbe36 	bltu	r6,r13,811c <__alt_mem_Flash_flash_data+0xf400811c>
    8224:	0400090e 	bge	zero,r16,824c <__multiply+0x1cc>
    8228:	58ffff17 	ldw	r3,-4(r11)
    822c:	5affff04 	addi	r11,r11,-4
    8230:	18000326 	beq	r3,zero,8240 <__multiply+0x1c0>
    8234:	00000506 	br	824c <__multiply+0x1cc>
    8238:	58c00017 	ldw	r3,0(r11)
    823c:	1800031e 	bne	r3,zero,824c <__multiply+0x1cc>
    8240:	843fffc4 	addi	r16,r16,-1
    8244:	5affff04 	addi	r11,r11,-4
    8248:	803ffb1e 	bne	r16,zero,8238 <__alt_mem_Flash_flash_data+0xf4008238>
    824c:	14000415 	stw	r16,16(r2)
    8250:	dfc00517 	ldw	ra,20(sp)
    8254:	dd000417 	ldw	r20,16(sp)
    8258:	dcc00317 	ldw	r19,12(sp)
    825c:	dc800217 	ldw	r18,8(sp)
    8260:	dc400117 	ldw	r17,4(sp)
    8264:	dc000017 	ldw	r16,0(sp)
    8268:	dec00604 	addi	sp,sp,24
    826c:	f800283a 	ret
    8270:	3029883a 	mov	r20,r6
    8274:	2823883a 	mov	r17,r5
    8278:	003f9006 	br	80bc <__alt_mem_Flash_flash_data+0xf40080bc>

0000827c <__pow5mult>:
    827c:	defffa04 	addi	sp,sp,-24
    8280:	dcc00315 	stw	r19,12(sp)
    8284:	dc800215 	stw	r18,8(sp)
    8288:	dc000015 	stw	r16,0(sp)
    828c:	dfc00515 	stw	ra,20(sp)
    8290:	dd000415 	stw	r20,16(sp)
    8294:	dc400115 	stw	r17,4(sp)
    8298:	308000cc 	andi	r2,r6,3
    829c:	3021883a 	mov	r16,r6
    82a0:	2027883a 	mov	r19,r4
    82a4:	2825883a 	mov	r18,r5
    82a8:	10002e1e 	bne	r2,zero,8364 <__pow5mult+0xe8>
    82ac:	8021d0ba 	srai	r16,r16,2
    82b0:	80001a26 	beq	r16,zero,831c <__pow5mult+0xa0>
    82b4:	9c401217 	ldw	r17,72(r19)
    82b8:	8800061e 	bne	r17,zero,82d4 <__pow5mult+0x58>
    82bc:	00003406 	br	8390 <__pow5mult+0x114>
    82c0:	8021d07a 	srai	r16,r16,1
    82c4:	80001526 	beq	r16,zero,831c <__pow5mult+0xa0>
    82c8:	88800017 	ldw	r2,0(r17)
    82cc:	10001c26 	beq	r2,zero,8340 <__pow5mult+0xc4>
    82d0:	1023883a 	mov	r17,r2
    82d4:	80c0004c 	andi	r3,r16,1
    82d8:	183ff926 	beq	r3,zero,82c0 <__alt_mem_Flash_flash_data+0xf40082c0>
    82dc:	900b883a 	mov	r5,r18
    82e0:	880d883a 	mov	r6,r17
    82e4:	9809883a 	mov	r4,r19
    82e8:	00080800 	call	8080 <__multiply>
    82ec:	90001b26 	beq	r18,zero,835c <__pow5mult+0xe0>
    82f0:	91c00117 	ldw	r7,4(r18)
    82f4:	98c01317 	ldw	r3,76(r19)
    82f8:	8021d07a 	srai	r16,r16,1
    82fc:	39cf883a 	add	r7,r7,r7
    8300:	39cf883a 	add	r7,r7,r7
    8304:	19c7883a 	add	r3,r3,r7
    8308:	19000017 	ldw	r4,0(r3)
    830c:	91000015 	stw	r4,0(r18)
    8310:	1c800015 	stw	r18,0(r3)
    8314:	1025883a 	mov	r18,r2
    8318:	803feb1e 	bne	r16,zero,82c8 <__alt_mem_Flash_flash_data+0xf40082c8>
    831c:	9005883a 	mov	r2,r18
    8320:	dfc00517 	ldw	ra,20(sp)
    8324:	dd000417 	ldw	r20,16(sp)
    8328:	dcc00317 	ldw	r19,12(sp)
    832c:	dc800217 	ldw	r18,8(sp)
    8330:	dc400117 	ldw	r17,4(sp)
    8334:	dc000017 	ldw	r16,0(sp)
    8338:	dec00604 	addi	sp,sp,24
    833c:	f800283a 	ret
    8340:	9809883a 	mov	r4,r19
    8344:	880b883a 	mov	r5,r17
    8348:	880d883a 	mov	r6,r17
    834c:	00080800 	call	8080 <__multiply>
    8350:	88800015 	stw	r2,0(r17)
    8354:	10000015 	stw	zero,0(r2)
    8358:	003fdd06 	br	82d0 <__alt_mem_Flash_flash_data+0xf40082d0>
    835c:	1025883a 	mov	r18,r2
    8360:	003fd706 	br	82c0 <__alt_mem_Flash_flash_data+0xf40082c0>
    8364:	10bfffc4 	addi	r2,r2,-1
    8368:	1085883a 	add	r2,r2,r2
    836c:	00c000b4 	movhi	r3,2
    8370:	18ee2704 	addi	r3,r3,-18276
    8374:	1085883a 	add	r2,r2,r2
    8378:	1885883a 	add	r2,r3,r2
    837c:	11800017 	ldw	r6,0(r2)
    8380:	000f883a 	mov	r7,zero
    8384:	0007d080 	call	7d08 <__multadd>
    8388:	1025883a 	mov	r18,r2
    838c:	003fc706 	br	82ac <__alt_mem_Flash_flash_data+0xf40082ac>
    8390:	05000044 	movi	r20,1
    8394:	9809883a 	mov	r4,r19
    8398:	a00b883a 	mov	r5,r20
    839c:	0007c380 	call	7c38 <_Balloc>
    83a0:	1023883a 	mov	r17,r2
    83a4:	00809c44 	movi	r2,625
    83a8:	88800515 	stw	r2,20(r17)
    83ac:	8d000415 	stw	r20,16(r17)
    83b0:	9c401215 	stw	r17,72(r19)
    83b4:	88000015 	stw	zero,0(r17)
    83b8:	003fc606 	br	82d4 <__alt_mem_Flash_flash_data+0xf40082d4>

000083bc <__lshift>:
    83bc:	defff904 	addi	sp,sp,-28
    83c0:	dd000415 	stw	r20,16(sp)
    83c4:	dcc00315 	stw	r19,12(sp)
    83c8:	3029d17a 	srai	r20,r6,5
    83cc:	2cc00417 	ldw	r19,16(r5)
    83d0:	28800217 	ldw	r2,8(r5)
    83d4:	dd400515 	stw	r21,20(sp)
    83d8:	a4e7883a 	add	r19,r20,r19
    83dc:	dc800215 	stw	r18,8(sp)
    83e0:	dc400115 	stw	r17,4(sp)
    83e4:	dc000015 	stw	r16,0(sp)
    83e8:	dfc00615 	stw	ra,24(sp)
    83ec:	9c000044 	addi	r16,r19,1
    83f0:	2823883a 	mov	r17,r5
    83f4:	302b883a 	mov	r21,r6
    83f8:	2025883a 	mov	r18,r4
    83fc:	29400117 	ldw	r5,4(r5)
    8400:	1400030e 	bge	r2,r16,8410 <__lshift+0x54>
    8404:	1085883a 	add	r2,r2,r2
    8408:	29400044 	addi	r5,r5,1
    840c:	143ffd16 	blt	r2,r16,8404 <__alt_mem_Flash_flash_data+0xf4008404>
    8410:	9009883a 	mov	r4,r18
    8414:	0007c380 	call	7c38 <_Balloc>
    8418:	11c00504 	addi	r7,r2,20
    841c:	0500090e 	bge	zero,r20,8444 <__lshift+0x88>
    8420:	3811883a 	mov	r8,r7
    8424:	0007883a 	mov	r3,zero
    8428:	40000015 	stw	zero,0(r8)
    842c:	18c00044 	addi	r3,r3,1
    8430:	42000104 	addi	r8,r8,4
    8434:	1d3ffc1e 	bne	r3,r20,8428 <__alt_mem_Flash_flash_data+0xf4008428>
    8438:	18c7883a 	add	r3,r3,r3
    843c:	18c7883a 	add	r3,r3,r3
    8440:	38cf883a 	add	r7,r7,r3
    8444:	89000417 	ldw	r4,16(r17)
    8448:	88c00504 	addi	r3,r17,20
    844c:	a98007cc 	andi	r6,r21,31
    8450:	2109883a 	add	r4,r4,r4
    8454:	2109883a 	add	r4,r4,r4
    8458:	1909883a 	add	r4,r3,r4
    845c:	30002326 	beq	r6,zero,84ec <__lshift+0x130>
    8460:	01400804 	movi	r5,32
    8464:	298bc83a 	sub	r5,r5,r6
    8468:	0013883a 	mov	r9,zero
    846c:	1a000017 	ldw	r8,0(r3)
    8470:	3815883a 	mov	r10,r7
    8474:	39c00104 	addi	r7,r7,4
    8478:	4190983a 	sll	r8,r8,r6
    847c:	18c00104 	addi	r3,r3,4
    8480:	4a10b03a 	or	r8,r9,r8
    8484:	3a3fff15 	stw	r8,-4(r7)
    8488:	1a3fff17 	ldw	r8,-4(r3)
    848c:	4152d83a 	srl	r9,r8,r5
    8490:	193ff636 	bltu	r3,r4,846c <__alt_mem_Flash_flash_data+0xf400846c>
    8494:	52400115 	stw	r9,4(r10)
    8498:	48001a1e 	bne	r9,zero,8504 <__lshift+0x148>
    849c:	843fffc4 	addi	r16,r16,-1
    84a0:	14000415 	stw	r16,16(r2)
    84a4:	88000826 	beq	r17,zero,84c8 <__lshift+0x10c>
    84a8:	89000117 	ldw	r4,4(r17)
    84ac:	90c01317 	ldw	r3,76(r18)
    84b0:	2109883a 	add	r4,r4,r4
    84b4:	2109883a 	add	r4,r4,r4
    84b8:	1907883a 	add	r3,r3,r4
    84bc:	19000017 	ldw	r4,0(r3)
    84c0:	89000015 	stw	r4,0(r17)
    84c4:	1c400015 	stw	r17,0(r3)
    84c8:	dfc00617 	ldw	ra,24(sp)
    84cc:	dd400517 	ldw	r21,20(sp)
    84d0:	dd000417 	ldw	r20,16(sp)
    84d4:	dcc00317 	ldw	r19,12(sp)
    84d8:	dc800217 	ldw	r18,8(sp)
    84dc:	dc400117 	ldw	r17,4(sp)
    84e0:	dc000017 	ldw	r16,0(sp)
    84e4:	dec00704 	addi	sp,sp,28
    84e8:	f800283a 	ret
    84ec:	19400017 	ldw	r5,0(r3)
    84f0:	39c00104 	addi	r7,r7,4
    84f4:	18c00104 	addi	r3,r3,4
    84f8:	397fff15 	stw	r5,-4(r7)
    84fc:	193ffb36 	bltu	r3,r4,84ec <__alt_mem_Flash_flash_data+0xf40084ec>
    8500:	003fe606 	br	849c <__alt_mem_Flash_flash_data+0xf400849c>
    8504:	9c000084 	addi	r16,r19,2
    8508:	003fe406 	br	849c <__alt_mem_Flash_flash_data+0xf400849c>

0000850c <__mcmp>:
    850c:	20800417 	ldw	r2,16(r4)
    8510:	28c00417 	ldw	r3,16(r5)
    8514:	10c5c83a 	sub	r2,r2,r3
    8518:	1000111e 	bne	r2,zero,8560 <__mcmp+0x54>
    851c:	18c7883a 	add	r3,r3,r3
    8520:	18c7883a 	add	r3,r3,r3
    8524:	21000504 	addi	r4,r4,20
    8528:	29400504 	addi	r5,r5,20
    852c:	20c5883a 	add	r2,r4,r3
    8530:	28cb883a 	add	r5,r5,r3
    8534:	00000106 	br	853c <__mcmp+0x30>
    8538:	20800a2e 	bgeu	r4,r2,8564 <__mcmp+0x58>
    853c:	10bfff04 	addi	r2,r2,-4
    8540:	297fff04 	addi	r5,r5,-4
    8544:	11800017 	ldw	r6,0(r2)
    8548:	28c00017 	ldw	r3,0(r5)
    854c:	30fffa26 	beq	r6,r3,8538 <__alt_mem_Flash_flash_data+0xf4008538>
    8550:	30c00236 	bltu	r6,r3,855c <__mcmp+0x50>
    8554:	00800044 	movi	r2,1
    8558:	f800283a 	ret
    855c:	00bfffc4 	movi	r2,-1
    8560:	f800283a 	ret
    8564:	0005883a 	mov	r2,zero
    8568:	f800283a 	ret

0000856c <__mdiff>:
    856c:	defffb04 	addi	sp,sp,-20
    8570:	dc000015 	stw	r16,0(sp)
    8574:	2821883a 	mov	r16,r5
    8578:	dcc00315 	stw	r19,12(sp)
    857c:	300b883a 	mov	r5,r6
    8580:	2027883a 	mov	r19,r4
    8584:	8009883a 	mov	r4,r16
    8588:	dc800215 	stw	r18,8(sp)
    858c:	dfc00415 	stw	ra,16(sp)
    8590:	dc400115 	stw	r17,4(sp)
    8594:	3025883a 	mov	r18,r6
    8598:	000850c0 	call	850c <__mcmp>
    859c:	10005226 	beq	r2,zero,86e8 <__mdiff+0x17c>
    85a0:	10004c16 	blt	r2,zero,86d4 <__mdiff+0x168>
    85a4:	0023883a 	mov	r17,zero
    85a8:	81400117 	ldw	r5,4(r16)
    85ac:	9809883a 	mov	r4,r19
    85b0:	0007c380 	call	7c38 <_Balloc>
    85b4:	83400417 	ldw	r13,16(r16)
    85b8:	93800417 	ldw	r14,16(r18)
    85bc:	81000504 	addi	r4,r16,20
    85c0:	6b59883a 	add	r12,r13,r13
    85c4:	739d883a 	add	r14,r14,r14
    85c8:	6319883a 	add	r12,r12,r12
    85cc:	91800504 	addi	r6,r18,20
    85d0:	739d883a 	add	r14,r14,r14
    85d4:	14400315 	stw	r17,12(r2)
    85d8:	2319883a 	add	r12,r4,r12
    85dc:	339d883a 	add	r14,r6,r14
    85e0:	12400504 	addi	r9,r2,20
    85e4:	0007883a 	mov	r3,zero
    85e8:	22000017 	ldw	r8,0(r4)
    85ec:	32800017 	ldw	r10,0(r6)
    85f0:	4ac00104 	addi	r11,r9,4
    85f4:	41ffffcc 	andi	r7,r8,65535
    85f8:	38c7883a 	add	r3,r7,r3
    85fc:	51ffffcc 	andi	r7,r10,65535
    8600:	19cfc83a 	sub	r7,r3,r7
    8604:	4010d43a 	srli	r8,r8,16
    8608:	5014d43a 	srli	r10,r10,16
    860c:	3807d43a 	srai	r3,r7,16
    8610:	39ffffcc 	andi	r7,r7,65535
    8614:	4291c83a 	sub	r8,r8,r10
    8618:	40c7883a 	add	r3,r8,r3
    861c:	1810943a 	slli	r8,r3,16
    8620:	31800104 	addi	r6,r6,4
    8624:	21000104 	addi	r4,r4,4
    8628:	41ceb03a 	or	r7,r8,r7
    862c:	49c00015 	stw	r7,0(r9)
    8630:	1807d43a 	srai	r3,r3,16
    8634:	580b883a 	mov	r5,r11
    8638:	5813883a 	mov	r9,r11
    863c:	33bfea36 	bltu	r6,r14,85e8 <__alt_mem_Flash_flash_data+0xf40085e8>
    8640:	2011883a 	mov	r8,r4
    8644:	2300152e 	bgeu	r4,r12,869c <__mdiff+0x130>
    8648:	21400017 	ldw	r5,0(r4)
    864c:	4a400104 	addi	r9,r9,4
    8650:	21000104 	addi	r4,r4,4
    8654:	29ffffcc 	andi	r7,r5,65535
    8658:	38c7883a 	add	r3,r7,r3
    865c:	280ad43a 	srli	r5,r5,16
    8660:	180dd43a 	srai	r6,r3,16
    8664:	19ffffcc 	andi	r7,r3,65535
    8668:	3147883a 	add	r3,r6,r5
    866c:	180a943a 	slli	r5,r3,16
    8670:	1807d43a 	srai	r3,r3,16
    8674:	29ceb03a 	or	r7,r5,r7
    8678:	49ffff15 	stw	r7,-4(r9)
    867c:	233ff236 	bltu	r4,r12,8648 <__alt_mem_Flash_flash_data+0xf4008648>
    8680:	0206303a 	nor	r3,zero,r8
    8684:	1b07883a 	add	r3,r3,r12
    8688:	1806d0ba 	srli	r3,r3,2
    868c:	18c00044 	addi	r3,r3,1
    8690:	18c7883a 	add	r3,r3,r3
    8694:	18c7883a 	add	r3,r3,r3
    8698:	58cb883a 	add	r5,r11,r3
    869c:	28ffff04 	addi	r3,r5,-4
    86a0:	3800041e 	bne	r7,zero,86b4 <__mdiff+0x148>
    86a4:	18ffff04 	addi	r3,r3,-4
    86a8:	19000017 	ldw	r4,0(r3)
    86ac:	6b7fffc4 	addi	r13,r13,-1
    86b0:	203ffc26 	beq	r4,zero,86a4 <__alt_mem_Flash_flash_data+0xf40086a4>
    86b4:	13400415 	stw	r13,16(r2)
    86b8:	dfc00417 	ldw	ra,16(sp)
    86bc:	dcc00317 	ldw	r19,12(sp)
    86c0:	dc800217 	ldw	r18,8(sp)
    86c4:	dc400117 	ldw	r17,4(sp)
    86c8:	dc000017 	ldw	r16,0(sp)
    86cc:	dec00504 	addi	sp,sp,20
    86d0:	f800283a 	ret
    86d4:	8005883a 	mov	r2,r16
    86d8:	04400044 	movi	r17,1
    86dc:	9021883a 	mov	r16,r18
    86e0:	1025883a 	mov	r18,r2
    86e4:	003fb006 	br	85a8 <__alt_mem_Flash_flash_data+0xf40085a8>
    86e8:	9809883a 	mov	r4,r19
    86ec:	000b883a 	mov	r5,zero
    86f0:	0007c380 	call	7c38 <_Balloc>
    86f4:	00c00044 	movi	r3,1
    86f8:	10c00415 	stw	r3,16(r2)
    86fc:	10000515 	stw	zero,20(r2)
    8700:	003fed06 	br	86b8 <__alt_mem_Flash_flash_data+0xf40086b8>

00008704 <__ulp>:
    8704:	295ffc2c 	andhi	r5,r5,32752
    8708:	00bf3034 	movhi	r2,64704
    870c:	2887883a 	add	r3,r5,r2
    8710:	00c0020e 	bge	zero,r3,871c <__ulp+0x18>
    8714:	0005883a 	mov	r2,zero
    8718:	f800283a 	ret
    871c:	00c7c83a 	sub	r3,zero,r3
    8720:	180bd53a 	srai	r5,r3,20
    8724:	008004c4 	movi	r2,19
    8728:	11400a0e 	bge	r2,r5,8754 <__ulp+0x50>
    872c:	00800c84 	movi	r2,50
    8730:	0007883a 	mov	r3,zero
    8734:	11400516 	blt	r2,r5,874c <__ulp+0x48>
    8738:	00800cc4 	movi	r2,51
    873c:	114bc83a 	sub	r5,r2,r5
    8740:	00800044 	movi	r2,1
    8744:	1144983a 	sll	r2,r2,r5
    8748:	f800283a 	ret
    874c:	00800044 	movi	r2,1
    8750:	f800283a 	ret
    8754:	00800234 	movhi	r2,8
    8758:	1147d83a 	sra	r3,r2,r5
    875c:	0005883a 	mov	r2,zero
    8760:	f800283a 	ret

00008764 <__b2d>:
    8764:	defffa04 	addi	sp,sp,-24
    8768:	dc000015 	stw	r16,0(sp)
    876c:	24000417 	ldw	r16,16(r4)
    8770:	dc400115 	stw	r17,4(sp)
    8774:	24400504 	addi	r17,r4,20
    8778:	8421883a 	add	r16,r16,r16
    877c:	8421883a 	add	r16,r16,r16
    8780:	8c21883a 	add	r16,r17,r16
    8784:	dc800215 	stw	r18,8(sp)
    8788:	84bfff17 	ldw	r18,-4(r16)
    878c:	dd000415 	stw	r20,16(sp)
    8790:	dcc00315 	stw	r19,12(sp)
    8794:	9009883a 	mov	r4,r18
    8798:	2829883a 	mov	r20,r5
    879c:	dfc00515 	stw	ra,20(sp)
    87a0:	0007f2c0 	call	7f2c <__hi0bits>
    87a4:	00c00804 	movi	r3,32
    87a8:	1887c83a 	sub	r3,r3,r2
    87ac:	a0c00015 	stw	r3,0(r20)
    87b0:	00c00284 	movi	r3,10
    87b4:	84ffff04 	addi	r19,r16,-4
    87b8:	18801216 	blt	r3,r2,8804 <__b2d+0xa0>
    87bc:	014002c4 	movi	r5,11
    87c0:	2889c83a 	sub	r4,r5,r2
    87c4:	9106d83a 	srl	r3,r18,r4
    87c8:	18cffc34 	orhi	r3,r3,16368
    87cc:	8cc0282e 	bgeu	r17,r19,8870 <__b2d+0x10c>
    87d0:	817ffe17 	ldw	r5,-8(r16)
    87d4:	290ad83a 	srl	r5,r5,r4
    87d8:	10800544 	addi	r2,r2,21
    87dc:	9084983a 	sll	r2,r18,r2
    87e0:	2884b03a 	or	r2,r5,r2
    87e4:	dfc00517 	ldw	ra,20(sp)
    87e8:	dd000417 	ldw	r20,16(sp)
    87ec:	dcc00317 	ldw	r19,12(sp)
    87f0:	dc800217 	ldw	r18,8(sp)
    87f4:	dc400117 	ldw	r17,4(sp)
    87f8:	dc000017 	ldw	r16,0(sp)
    87fc:	dec00604 	addi	sp,sp,24
    8800:	f800283a 	ret
    8804:	113ffd44 	addi	r4,r2,-11
    8808:	8cc00f2e 	bgeu	r17,r19,8848 <__b2d+0xe4>
    880c:	81bffe04 	addi	r6,r16,-8
    8810:	817ffe17 	ldw	r5,-8(r16)
    8814:	20001326 	beq	r4,zero,8864 <__b2d+0x100>
    8818:	00c00ac4 	movi	r3,43
    881c:	1885c83a 	sub	r2,r3,r2
    8820:	2886d83a 	srl	r3,r5,r2
    8824:	9124983a 	sll	r18,r18,r4
    8828:	90e4b03a 	or	r18,r18,r3
    882c:	90cffc34 	orhi	r3,r18,16368
    8830:	8980112e 	bgeu	r17,r6,8878 <__b2d+0x114>
    8834:	81bffd17 	ldw	r6,-12(r16)
    8838:	308cd83a 	srl	r6,r6,r2
    883c:	2904983a 	sll	r2,r5,r4
    8840:	1184b03a 	or	r2,r2,r6
    8844:	003fe706 	br	87e4 <__alt_mem_Flash_flash_data+0xf40087e4>
    8848:	20000526 	beq	r4,zero,8860 <__b2d+0xfc>
    884c:	9124983a 	sll	r18,r18,r4
    8850:	000d883a 	mov	r6,zero
    8854:	000b883a 	mov	r5,zero
    8858:	90cffc34 	orhi	r3,r18,16368
    885c:	003ff706 	br	883c <__alt_mem_Flash_flash_data+0xf400883c>
    8860:	000b883a 	mov	r5,zero
    8864:	90cffc34 	orhi	r3,r18,16368
    8868:	2805883a 	mov	r2,r5
    886c:	003fdd06 	br	87e4 <__alt_mem_Flash_flash_data+0xf40087e4>
    8870:	000b883a 	mov	r5,zero
    8874:	003fd806 	br	87d8 <__alt_mem_Flash_flash_data+0xf40087d8>
    8878:	000d883a 	mov	r6,zero
    887c:	003fef06 	br	883c <__alt_mem_Flash_flash_data+0xf400883c>

00008880 <__d2b>:
    8880:	defff704 	addi	sp,sp,-36
    8884:	dc000215 	stw	r16,8(sp)
    8888:	3021883a 	mov	r16,r6
    888c:	dc400315 	stw	r17,12(sp)
    8890:	8022907a 	slli	r17,r16,1
    8894:	dd400715 	stw	r21,28(sp)
    8898:	282b883a 	mov	r21,r5
    889c:	01400044 	movi	r5,1
    88a0:	dd000615 	stw	r20,24(sp)
    88a4:	dcc00515 	stw	r19,20(sp)
    88a8:	dc800415 	stw	r18,16(sp)
    88ac:	dfc00815 	stw	ra,32(sp)
    88b0:	3829883a 	mov	r20,r7
    88b4:	dc800917 	ldw	r18,36(sp)
    88b8:	8822d57a 	srli	r17,r17,21
    88bc:	0007c380 	call	7c38 <_Balloc>
    88c0:	1027883a 	mov	r19,r2
    88c4:	00800434 	movhi	r2,16
    88c8:	10bfffc4 	addi	r2,r2,-1
    88cc:	808c703a 	and	r6,r16,r2
    88d0:	88000126 	beq	r17,zero,88d8 <__d2b+0x58>
    88d4:	31800434 	orhi	r6,r6,16
    88d8:	d9800015 	stw	r6,0(sp)
    88dc:	a8001f26 	beq	r21,zero,895c <__d2b+0xdc>
    88e0:	d9000104 	addi	r4,sp,4
    88e4:	dd400115 	stw	r21,4(sp)
    88e8:	0007f940 	call	7f94 <__lo0bits>
    88ec:	d8c00017 	ldw	r3,0(sp)
    88f0:	1000291e 	bne	r2,zero,8998 <__d2b+0x118>
    88f4:	d9000117 	ldw	r4,4(sp)
    88f8:	99000515 	stw	r4,20(r19)
    88fc:	1820c03a 	cmpne	r16,r3,zero
    8900:	84000044 	addi	r16,r16,1
    8904:	98c00615 	stw	r3,24(r19)
    8908:	9c000415 	stw	r16,16(r19)
    890c:	88001b1e 	bne	r17,zero,897c <__d2b+0xfc>
    8910:	800690ba 	slli	r3,r16,2
    8914:	10bef384 	addi	r2,r2,-1074
    8918:	a0800015 	stw	r2,0(r20)
    891c:	98c5883a 	add	r2,r19,r3
    8920:	11000417 	ldw	r4,16(r2)
    8924:	8020917a 	slli	r16,r16,5
    8928:	0007f2c0 	call	7f2c <__hi0bits>
    892c:	8085c83a 	sub	r2,r16,r2
    8930:	90800015 	stw	r2,0(r18)
    8934:	9805883a 	mov	r2,r19
    8938:	dfc00817 	ldw	ra,32(sp)
    893c:	dd400717 	ldw	r21,28(sp)
    8940:	dd000617 	ldw	r20,24(sp)
    8944:	dcc00517 	ldw	r19,20(sp)
    8948:	dc800417 	ldw	r18,16(sp)
    894c:	dc400317 	ldw	r17,12(sp)
    8950:	dc000217 	ldw	r16,8(sp)
    8954:	dec00904 	addi	sp,sp,36
    8958:	f800283a 	ret
    895c:	d809883a 	mov	r4,sp
    8960:	0007f940 	call	7f94 <__lo0bits>
    8964:	d8c00017 	ldw	r3,0(sp)
    8968:	04000044 	movi	r16,1
    896c:	9c000415 	stw	r16,16(r19)
    8970:	98c00515 	stw	r3,20(r19)
    8974:	10800804 	addi	r2,r2,32
    8978:	883fe526 	beq	r17,zero,8910 <__alt_mem_Flash_flash_data+0xf4008910>
    897c:	8c7ef344 	addi	r17,r17,-1075
    8980:	88a3883a 	add	r17,r17,r2
    8984:	00c00d44 	movi	r3,53
    8988:	a4400015 	stw	r17,0(r20)
    898c:	1885c83a 	sub	r2,r3,r2
    8990:	90800015 	stw	r2,0(r18)
    8994:	003fe706 	br	8934 <__alt_mem_Flash_flash_data+0xf4008934>
    8998:	01000804 	movi	r4,32
    899c:	2089c83a 	sub	r4,r4,r2
    89a0:	1908983a 	sll	r4,r3,r4
    89a4:	d9400117 	ldw	r5,4(sp)
    89a8:	1886d83a 	srl	r3,r3,r2
    89ac:	2148b03a 	or	r4,r4,r5
    89b0:	99000515 	stw	r4,20(r19)
    89b4:	d8c00015 	stw	r3,0(sp)
    89b8:	003fd006 	br	88fc <__alt_mem_Flash_flash_data+0xf40088fc>

000089bc <__ratio>:
    89bc:	defff904 	addi	sp,sp,-28
    89c0:	dc400315 	stw	r17,12(sp)
    89c4:	2823883a 	mov	r17,r5
    89c8:	d9400104 	addi	r5,sp,4
    89cc:	dfc00615 	stw	ra,24(sp)
    89d0:	dcc00515 	stw	r19,20(sp)
    89d4:	dc800415 	stw	r18,16(sp)
    89d8:	2027883a 	mov	r19,r4
    89dc:	dc000215 	stw	r16,8(sp)
    89e0:	00087640 	call	8764 <__b2d>
    89e4:	8809883a 	mov	r4,r17
    89e8:	d80b883a 	mov	r5,sp
    89ec:	1025883a 	mov	r18,r2
    89f0:	1821883a 	mov	r16,r3
    89f4:	00087640 	call	8764 <__b2d>
    89f8:	8a400417 	ldw	r9,16(r17)
    89fc:	9a000417 	ldw	r8,16(r19)
    8a00:	100d883a 	mov	r6,r2
    8a04:	d8800017 	ldw	r2,0(sp)
    8a08:	4251c83a 	sub	r8,r8,r9
    8a0c:	4012917a 	slli	r9,r8,5
    8a10:	da000117 	ldw	r8,4(sp)
    8a14:	4091c83a 	sub	r8,r8,r2
    8a18:	4251883a 	add	r8,r8,r9
    8a1c:	02000d0e 	bge	zero,r8,8a54 <__ratio+0x98>
    8a20:	4010953a 	slli	r8,r8,20
    8a24:	4421883a 	add	r16,r8,r16
    8a28:	9009883a 	mov	r4,r18
    8a2c:	800b883a 	mov	r5,r16
    8a30:	180f883a 	mov	r7,r3
    8a34:	000c6bc0 	call	c6bc <__divdf3>
    8a38:	dfc00617 	ldw	ra,24(sp)
    8a3c:	dcc00517 	ldw	r19,20(sp)
    8a40:	dc800417 	ldw	r18,16(sp)
    8a44:	dc400317 	ldw	r17,12(sp)
    8a48:	dc000217 	ldw	r16,8(sp)
    8a4c:	dec00704 	addi	sp,sp,28
    8a50:	f800283a 	ret
    8a54:	4010953a 	slli	r8,r8,20
    8a58:	1a07c83a 	sub	r3,r3,r8
    8a5c:	003ff206 	br	8a28 <__alt_mem_Flash_flash_data+0xf4008a28>

00008a60 <_mprec_log10>:
    8a60:	defffe04 	addi	sp,sp,-8
    8a64:	dc000015 	stw	r16,0(sp)
    8a68:	dfc00115 	stw	ra,4(sp)
    8a6c:	008005c4 	movi	r2,23
    8a70:	2021883a 	mov	r16,r4
    8a74:	11000d0e 	bge	r2,r4,8aac <_mprec_log10+0x4c>
    8a78:	0005883a 	mov	r2,zero
    8a7c:	00cffc34 	movhi	r3,16368
    8a80:	843fffc4 	addi	r16,r16,-1
    8a84:	1009883a 	mov	r4,r2
    8a88:	180b883a 	mov	r5,r3
    8a8c:	000d883a 	mov	r6,zero
    8a90:	01d00934 	movhi	r7,16420
    8a94:	000d1cc0 	call	d1cc <__muldf3>
    8a98:	803ff91e 	bne	r16,zero,8a80 <__alt_mem_Flash_flash_data+0xf4008a80>
    8a9c:	dfc00117 	ldw	ra,4(sp)
    8aa0:	dc000017 	ldw	r16,0(sp)
    8aa4:	dec00204 	addi	sp,sp,8
    8aa8:	f800283a 	ret
    8aac:	202090fa 	slli	r16,r4,3
    8ab0:	008000b4 	movhi	r2,2
    8ab4:	10ae3e04 	addi	r2,r2,-18184
    8ab8:	1421883a 	add	r16,r2,r16
    8abc:	80800017 	ldw	r2,0(r16)
    8ac0:	80c00117 	ldw	r3,4(r16)
    8ac4:	dfc00117 	ldw	ra,4(sp)
    8ac8:	dc000017 	ldw	r16,0(sp)
    8acc:	dec00204 	addi	sp,sp,8
    8ad0:	f800283a 	ret

00008ad4 <__copybits>:
    8ad4:	297fffc4 	addi	r5,r5,-1
    8ad8:	280fd17a 	srai	r7,r5,5
    8adc:	30c00417 	ldw	r3,16(r6)
    8ae0:	30800504 	addi	r2,r6,20
    8ae4:	39c00044 	addi	r7,r7,1
    8ae8:	18c7883a 	add	r3,r3,r3
    8aec:	39cf883a 	add	r7,r7,r7
    8af0:	18c7883a 	add	r3,r3,r3
    8af4:	39cf883a 	add	r7,r7,r7
    8af8:	10c7883a 	add	r3,r2,r3
    8afc:	21cf883a 	add	r7,r4,r7
    8b00:	10c00d2e 	bgeu	r2,r3,8b38 <__copybits+0x64>
    8b04:	200b883a 	mov	r5,r4
    8b08:	12000017 	ldw	r8,0(r2)
    8b0c:	29400104 	addi	r5,r5,4
    8b10:	10800104 	addi	r2,r2,4
    8b14:	2a3fff15 	stw	r8,-4(r5)
    8b18:	10fffb36 	bltu	r2,r3,8b08 <__alt_mem_Flash_flash_data+0xf4008b08>
    8b1c:	1985c83a 	sub	r2,r3,r6
    8b20:	10bffac4 	addi	r2,r2,-21
    8b24:	1004d0ba 	srli	r2,r2,2
    8b28:	10800044 	addi	r2,r2,1
    8b2c:	1085883a 	add	r2,r2,r2
    8b30:	1085883a 	add	r2,r2,r2
    8b34:	2089883a 	add	r4,r4,r2
    8b38:	21c0032e 	bgeu	r4,r7,8b48 <__copybits+0x74>
    8b3c:	20000015 	stw	zero,0(r4)
    8b40:	21000104 	addi	r4,r4,4
    8b44:	21fffd36 	bltu	r4,r7,8b3c <__alt_mem_Flash_flash_data+0xf4008b3c>
    8b48:	f800283a 	ret

00008b4c <__any_on>:
    8b4c:	20c00417 	ldw	r3,16(r4)
    8b50:	2805d17a 	srai	r2,r5,5
    8b54:	21000504 	addi	r4,r4,20
    8b58:	18800d0e 	bge	r3,r2,8b90 <__any_on+0x44>
    8b5c:	18c7883a 	add	r3,r3,r3
    8b60:	18c7883a 	add	r3,r3,r3
    8b64:	20c7883a 	add	r3,r4,r3
    8b68:	20c0192e 	bgeu	r4,r3,8bd0 <__any_on+0x84>
    8b6c:	18bfff17 	ldw	r2,-4(r3)
    8b70:	18ffff04 	addi	r3,r3,-4
    8b74:	1000041e 	bne	r2,zero,8b88 <__any_on+0x3c>
    8b78:	20c0142e 	bgeu	r4,r3,8bcc <__any_on+0x80>
    8b7c:	18ffff04 	addi	r3,r3,-4
    8b80:	19400017 	ldw	r5,0(r3)
    8b84:	283ffc26 	beq	r5,zero,8b78 <__alt_mem_Flash_flash_data+0xf4008b78>
    8b88:	00800044 	movi	r2,1
    8b8c:	f800283a 	ret
    8b90:	10c00a0e 	bge	r2,r3,8bbc <__any_on+0x70>
    8b94:	1085883a 	add	r2,r2,r2
    8b98:	1085883a 	add	r2,r2,r2
    8b9c:	294007cc 	andi	r5,r5,31
    8ba0:	2087883a 	add	r3,r4,r2
    8ba4:	283ff026 	beq	r5,zero,8b68 <__alt_mem_Flash_flash_data+0xf4008b68>
    8ba8:	19800017 	ldw	r6,0(r3)
    8bac:	3144d83a 	srl	r2,r6,r5
    8bb0:	114a983a 	sll	r5,r2,r5
    8bb4:	29bff41e 	bne	r5,r6,8b88 <__alt_mem_Flash_flash_data+0xf4008b88>
    8bb8:	003feb06 	br	8b68 <__alt_mem_Flash_flash_data+0xf4008b68>
    8bbc:	1085883a 	add	r2,r2,r2
    8bc0:	1085883a 	add	r2,r2,r2
    8bc4:	2087883a 	add	r3,r4,r2
    8bc8:	003fe706 	br	8b68 <__alt_mem_Flash_flash_data+0xf4008b68>
    8bcc:	f800283a 	ret
    8bd0:	0005883a 	mov	r2,zero
    8bd4:	f800283a 	ret

00008bd8 <_realloc_r>:
    8bd8:	defff604 	addi	sp,sp,-40
    8bdc:	dd000415 	stw	r20,16(sp)
    8be0:	dc400115 	stw	r17,4(sp)
    8be4:	dfc00915 	stw	ra,36(sp)
    8be8:	df000815 	stw	fp,32(sp)
    8bec:	ddc00715 	stw	r23,28(sp)
    8bf0:	dd800615 	stw	r22,24(sp)
    8bf4:	dd400515 	stw	r21,20(sp)
    8bf8:	dcc00315 	stw	r19,12(sp)
    8bfc:	dc800215 	stw	r18,8(sp)
    8c00:	dc000015 	stw	r16,0(sp)
    8c04:	2829883a 	mov	r20,r5
    8c08:	3023883a 	mov	r17,r6
    8c0c:	2800ad26 	beq	r5,zero,8ec4 <_realloc_r+0x2ec>
    8c10:	2025883a 	mov	r18,r4
    8c14:	000eefc0 	call	eefc <__malloc_lock>
    8c18:	a0ffff17 	ldw	r3,-4(r20)
    8c1c:	043fff04 	movi	r16,-4
    8c20:	890002c4 	addi	r4,r17,11
    8c24:	01c00584 	movi	r7,22
    8c28:	a57ffe04 	addi	r21,r20,-8
    8c2c:	1c20703a 	and	r16,r3,r16
    8c30:	39001d2e 	bgeu	r7,r4,8ca8 <_realloc_r+0xd0>
    8c34:	05bffe04 	movi	r22,-8
    8c38:	25ac703a 	and	r22,r4,r22
    8c3c:	b00f883a 	mov	r7,r22
    8c40:	b0006516 	blt	r22,zero,8dd8 <_realloc_r+0x200>
    8c44:	b4406436 	bltu	r22,r17,8dd8 <_realloc_r+0x200>
    8c48:	81c01a0e 	bge	r16,r7,8cb4 <_realloc_r+0xdc>
    8c4c:	070000b4 	movhi	fp,2
    8c50:	e7309a04 	addi	fp,fp,-15768
    8c54:	e1400217 	ldw	r5,8(fp)
    8c58:	ac11883a 	add	r8,r21,r16
    8c5c:	2a006226 	beq	r5,r8,8de8 <_realloc_r+0x210>
    8c60:	41800117 	ldw	r6,4(r8)
    8c64:	027fff84 	movi	r9,-2
    8c68:	3252703a 	and	r9,r6,r9
    8c6c:	4253883a 	add	r9,r8,r9
    8c70:	49000117 	ldw	r4,4(r9)
    8c74:	2100004c 	andi	r4,r4,1
    8c78:	2000281e 	bne	r4,zero,8d1c <_realloc_r+0x144>
    8c7c:	00bfff04 	movi	r2,-4
    8c80:	3084703a 	and	r2,r6,r2
    8c84:	1409883a 	add	r4,r2,r16
    8c88:	21c05e16 	blt	r4,r7,8e04 <_realloc_r+0x22c>
    8c8c:	40800317 	ldw	r2,12(r8)
    8c90:	41400217 	ldw	r5,8(r8)
    8c94:	a023883a 	mov	r17,r20
    8c98:	2021883a 	mov	r16,r4
    8c9c:	28800315 	stw	r2,12(r5)
    8ca0:	11400215 	stw	r5,8(r2)
    8ca4:	00000406 	br	8cb8 <_realloc_r+0xe0>
    8ca8:	01c00404 	movi	r7,16
    8cac:	382d883a 	mov	r22,r7
    8cb0:	003fe406 	br	8c44 <__alt_mem_Flash_flash_data+0xf4008c44>
    8cb4:	a023883a 	mov	r17,r20
    8cb8:	858fc83a 	sub	r7,r16,r22
    8cbc:	008003c4 	movi	r2,15
    8cc0:	18c0004c 	andi	r3,r3,1
    8cc4:	11c07236 	bltu	r2,r7,8e90 <_realloc_r+0x2b8>
    8cc8:	1c06b03a 	or	r3,r3,r16
    8ccc:	a8c00115 	stw	r3,4(r21)
    8cd0:	ac21883a 	add	r16,r21,r16
    8cd4:	80800117 	ldw	r2,4(r16)
    8cd8:	10800054 	ori	r2,r2,1
    8cdc:	80800115 	stw	r2,4(r16)
    8ce0:	9009883a 	mov	r4,r18
    8ce4:	000f01c0 	call	f01c <__malloc_unlock>
    8ce8:	8805883a 	mov	r2,r17
    8cec:	dfc00917 	ldw	ra,36(sp)
    8cf0:	df000817 	ldw	fp,32(sp)
    8cf4:	ddc00717 	ldw	r23,28(sp)
    8cf8:	dd800617 	ldw	r22,24(sp)
    8cfc:	dd400517 	ldw	r21,20(sp)
    8d00:	dd000417 	ldw	r20,16(sp)
    8d04:	dcc00317 	ldw	r19,12(sp)
    8d08:	dc800217 	ldw	r18,8(sp)
    8d0c:	dc400117 	ldw	r17,4(sp)
    8d10:	dc000017 	ldw	r16,0(sp)
    8d14:	dec00a04 	addi	sp,sp,40
    8d18:	f800283a 	ret
    8d1c:	18c0004c 	andi	r3,r3,1
    8d20:	1800081e 	bne	r3,zero,8d44 <_realloc_r+0x16c>
    8d24:	a4fffe17 	ldw	r19,-8(r20)
    8d28:	00bfff04 	movi	r2,-4
    8d2c:	ace7c83a 	sub	r19,r21,r19
    8d30:	98c00117 	ldw	r3,4(r19)
    8d34:	1886703a 	and	r3,r3,r2
    8d38:	98000226 	beq	r19,zero,8d44 <_realloc_r+0x16c>
    8d3c:	1c2f883a 	add	r23,r3,r16
    8d40:	b9c06d0e 	bge	r23,r7,8ef8 <_realloc_r+0x320>
    8d44:	880b883a 	mov	r5,r17
    8d48:	9009883a 	mov	r4,r18
    8d4c:	0006ff00 	call	6ff0 <_malloc_r>
    8d50:	1023883a 	mov	r17,r2
    8d54:	1000ef26 	beq	r2,zero,9114 <_realloc_r+0x53c>
    8d58:	a0ffff17 	ldw	r3,-4(r20)
    8d5c:	113ffe04 	addi	r4,r2,-8
    8d60:	00bfff84 	movi	r2,-2
    8d64:	1884703a 	and	r2,r3,r2
    8d68:	a885883a 	add	r2,r21,r2
    8d6c:	2080bf26 	beq	r4,r2,906c <_realloc_r+0x494>
    8d70:	81bfff04 	addi	r6,r16,-4
    8d74:	00800904 	movi	r2,36
    8d78:	11808936 	bltu	r2,r6,8fa0 <_realloc_r+0x3c8>
    8d7c:	00c004c4 	movi	r3,19
    8d80:	19806c2e 	bgeu	r3,r6,8f34 <_realloc_r+0x35c>
    8d84:	a0c00017 	ldw	r3,0(r20)
    8d88:	88c00015 	stw	r3,0(r17)
    8d8c:	a0c00117 	ldw	r3,4(r20)
    8d90:	88c00115 	stw	r3,4(r17)
    8d94:	00c006c4 	movi	r3,27
    8d98:	1980ac36 	bltu	r3,r6,904c <_realloc_r+0x474>
    8d9c:	88800204 	addi	r2,r17,8
    8da0:	a0c00204 	addi	r3,r20,8
    8da4:	19000017 	ldw	r4,0(r3)
    8da8:	11000015 	stw	r4,0(r2)
    8dac:	19000117 	ldw	r4,4(r3)
    8db0:	11000115 	stw	r4,4(r2)
    8db4:	18c00217 	ldw	r3,8(r3)
    8db8:	10c00215 	stw	r3,8(r2)
    8dbc:	a00b883a 	mov	r5,r20
    8dc0:	9009883a 	mov	r4,r18
    8dc4:	00064200 	call	6420 <_free_r>
    8dc8:	9009883a 	mov	r4,r18
    8dcc:	000f01c0 	call	f01c <__malloc_unlock>
    8dd0:	8805883a 	mov	r2,r17
    8dd4:	003fc506 	br	8cec <__alt_mem_Flash_flash_data+0xf4008cec>
    8dd8:	00800304 	movi	r2,12
    8ddc:	90800015 	stw	r2,0(r18)
    8de0:	0005883a 	mov	r2,zero
    8de4:	003fc106 	br	8cec <__alt_mem_Flash_flash_data+0xf4008cec>
    8de8:	29800117 	ldw	r6,4(r5)
    8dec:	00bfff04 	movi	r2,-4
    8df0:	b1000404 	addi	r4,r22,16
    8df4:	3084703a 	and	r2,r6,r2
    8df8:	140d883a 	add	r6,r2,r16
    8dfc:	31005b0e 	bge	r6,r4,8f6c <_realloc_r+0x394>
    8e00:	2811883a 	mov	r8,r5
    8e04:	18c0004c 	andi	r3,r3,1
    8e08:	183fce1e 	bne	r3,zero,8d44 <__alt_mem_Flash_flash_data+0xf4008d44>
    8e0c:	a4fffe17 	ldw	r19,-8(r20)
    8e10:	00ffff04 	movi	r3,-4
    8e14:	ace7c83a 	sub	r19,r21,r19
    8e18:	99000117 	ldw	r4,4(r19)
    8e1c:	20c6703a 	and	r3,r4,r3
    8e20:	403fc526 	beq	r8,zero,8d38 <__alt_mem_Flash_flash_data+0xf4008d38>
    8e24:	1c2f883a 	add	r23,r3,r16
    8e28:	b8af883a 	add	r23,r23,r2
    8e2c:	41406026 	beq	r8,r5,8fb0 <_realloc_r+0x3d8>
    8e30:	b9ffc116 	blt	r23,r7,8d38 <__alt_mem_Flash_flash_data+0xf4008d38>
    8e34:	40c00217 	ldw	r3,8(r8)
    8e38:	40800317 	ldw	r2,12(r8)
    8e3c:	81bfff04 	addi	r6,r16,-4
    8e40:	01000904 	movi	r4,36
    8e44:	18800315 	stw	r2,12(r3)
    8e48:	10c00215 	stw	r3,8(r2)
    8e4c:	99400217 	ldw	r5,8(r19)
    8e50:	98c00317 	ldw	r3,12(r19)
    8e54:	9c400204 	addi	r17,r19,8
    8e58:	28c00315 	stw	r3,12(r5)
    8e5c:	19400215 	stw	r5,8(r3)
    8e60:	21802d36 	bltu	r4,r6,8f18 <_realloc_r+0x340>
    8e64:	008004c4 	movi	r2,19
    8e68:	1180352e 	bgeu	r2,r6,8f40 <_realloc_r+0x368>
    8e6c:	a0800017 	ldw	r2,0(r20)
    8e70:	98800215 	stw	r2,8(r19)
    8e74:	a0800117 	ldw	r2,4(r20)
    8e78:	98800315 	stw	r2,12(r19)
    8e7c:	008006c4 	movi	r2,27
    8e80:	11808036 	bltu	r2,r6,9084 <_realloc_r+0x4ac>
    8e84:	98c00404 	addi	r3,r19,16
    8e88:	a5000204 	addi	r20,r20,8
    8e8c:	00002d06 	br	8f44 <_realloc_r+0x36c>
    8e90:	1d86b03a 	or	r3,r3,r22
    8e94:	ad8b883a 	add	r5,r21,r22
    8e98:	a8c00115 	stw	r3,4(r21)
    8e9c:	38800054 	ori	r2,r7,1
    8ea0:	28800115 	stw	r2,4(r5)
    8ea4:	29cf883a 	add	r7,r5,r7
    8ea8:	38800117 	ldw	r2,4(r7)
    8eac:	9009883a 	mov	r4,r18
    8eb0:	29400204 	addi	r5,r5,8
    8eb4:	10800054 	ori	r2,r2,1
    8eb8:	38800115 	stw	r2,4(r7)
    8ebc:	00064200 	call	6420 <_free_r>
    8ec0:	003f8706 	br	8ce0 <__alt_mem_Flash_flash_data+0xf4008ce0>
    8ec4:	300b883a 	mov	r5,r6
    8ec8:	dfc00917 	ldw	ra,36(sp)
    8ecc:	df000817 	ldw	fp,32(sp)
    8ed0:	ddc00717 	ldw	r23,28(sp)
    8ed4:	dd800617 	ldw	r22,24(sp)
    8ed8:	dd400517 	ldw	r21,20(sp)
    8edc:	dd000417 	ldw	r20,16(sp)
    8ee0:	dcc00317 	ldw	r19,12(sp)
    8ee4:	dc800217 	ldw	r18,8(sp)
    8ee8:	dc400117 	ldw	r17,4(sp)
    8eec:	dc000017 	ldw	r16,0(sp)
    8ef0:	dec00a04 	addi	sp,sp,40
    8ef4:	0006ff01 	jmpi	6ff0 <_malloc_r>
    8ef8:	98800317 	ldw	r2,12(r19)
    8efc:	98c00217 	ldw	r3,8(r19)
    8f00:	81bfff04 	addi	r6,r16,-4
    8f04:	01000904 	movi	r4,36
    8f08:	18800315 	stw	r2,12(r3)
    8f0c:	10c00215 	stw	r3,8(r2)
    8f10:	9c400204 	addi	r17,r19,8
    8f14:	21bfd32e 	bgeu	r4,r6,8e64 <__alt_mem_Flash_flash_data+0xf4008e64>
    8f18:	8809883a 	mov	r4,r17
    8f1c:	a00b883a 	mov	r5,r20
    8f20:	00079b80 	call	79b8 <memmove>
    8f24:	98c00117 	ldw	r3,4(r19)
    8f28:	b821883a 	mov	r16,r23
    8f2c:	982b883a 	mov	r21,r19
    8f30:	003f6106 	br	8cb8 <__alt_mem_Flash_flash_data+0xf4008cb8>
    8f34:	8805883a 	mov	r2,r17
    8f38:	a007883a 	mov	r3,r20
    8f3c:	003f9906 	br	8da4 <__alt_mem_Flash_flash_data+0xf4008da4>
    8f40:	8807883a 	mov	r3,r17
    8f44:	a0800017 	ldw	r2,0(r20)
    8f48:	b821883a 	mov	r16,r23
    8f4c:	982b883a 	mov	r21,r19
    8f50:	18800015 	stw	r2,0(r3)
    8f54:	a0800117 	ldw	r2,4(r20)
    8f58:	18800115 	stw	r2,4(r3)
    8f5c:	a0800217 	ldw	r2,8(r20)
    8f60:	18800215 	stw	r2,8(r3)
    8f64:	98c00117 	ldw	r3,4(r19)
    8f68:	003f5306 	br	8cb8 <__alt_mem_Flash_flash_data+0xf4008cb8>
    8f6c:	adab883a 	add	r21,r21,r22
    8f70:	3585c83a 	sub	r2,r6,r22
    8f74:	e5400215 	stw	r21,8(fp)
    8f78:	10800054 	ori	r2,r2,1
    8f7c:	a8800115 	stw	r2,4(r21)
    8f80:	a0bfff17 	ldw	r2,-4(r20)
    8f84:	9009883a 	mov	r4,r18
    8f88:	1080004c 	andi	r2,r2,1
    8f8c:	b0acb03a 	or	r22,r22,r2
    8f90:	a5bfff15 	stw	r22,-4(r20)
    8f94:	000f01c0 	call	f01c <__malloc_unlock>
    8f98:	a005883a 	mov	r2,r20
    8f9c:	003f5306 	br	8cec <__alt_mem_Flash_flash_data+0xf4008cec>
    8fa0:	8809883a 	mov	r4,r17
    8fa4:	a00b883a 	mov	r5,r20
    8fa8:	00079b80 	call	79b8 <memmove>
    8fac:	003f8306 	br	8dbc <__alt_mem_Flash_flash_data+0xf4008dbc>
    8fb0:	b0800404 	addi	r2,r22,16
    8fb4:	b8bf6016 	blt	r23,r2,8d38 <__alt_mem_Flash_flash_data+0xf4008d38>
    8fb8:	98800317 	ldw	r2,12(r19)
    8fbc:	98c00217 	ldw	r3,8(r19)
    8fc0:	81bfff04 	addi	r6,r16,-4
    8fc4:	01000904 	movi	r4,36
    8fc8:	18800315 	stw	r2,12(r3)
    8fcc:	10c00215 	stw	r3,8(r2)
    8fd0:	9c400204 	addi	r17,r19,8
    8fd4:	21804336 	bltu	r4,r6,90e4 <_realloc_r+0x50c>
    8fd8:	008004c4 	movi	r2,19
    8fdc:	11803f2e 	bgeu	r2,r6,90dc <_realloc_r+0x504>
    8fe0:	a0800017 	ldw	r2,0(r20)
    8fe4:	98800215 	stw	r2,8(r19)
    8fe8:	a0800117 	ldw	r2,4(r20)
    8fec:	98800315 	stw	r2,12(r19)
    8ff0:	008006c4 	movi	r2,27
    8ff4:	11803f36 	bltu	r2,r6,90f4 <_realloc_r+0x51c>
    8ff8:	98800404 	addi	r2,r19,16
    8ffc:	a5000204 	addi	r20,r20,8
    9000:	a0c00017 	ldw	r3,0(r20)
    9004:	10c00015 	stw	r3,0(r2)
    9008:	a0c00117 	ldw	r3,4(r20)
    900c:	10c00115 	stw	r3,4(r2)
    9010:	a0c00217 	ldw	r3,8(r20)
    9014:	10c00215 	stw	r3,8(r2)
    9018:	9d87883a 	add	r3,r19,r22
    901c:	bd85c83a 	sub	r2,r23,r22
    9020:	e0c00215 	stw	r3,8(fp)
    9024:	10800054 	ori	r2,r2,1
    9028:	18800115 	stw	r2,4(r3)
    902c:	98800117 	ldw	r2,4(r19)
    9030:	9009883a 	mov	r4,r18
    9034:	1080004c 	andi	r2,r2,1
    9038:	b0acb03a 	or	r22,r22,r2
    903c:	9d800115 	stw	r22,4(r19)
    9040:	000f01c0 	call	f01c <__malloc_unlock>
    9044:	8805883a 	mov	r2,r17
    9048:	003f2806 	br	8cec <__alt_mem_Flash_flash_data+0xf4008cec>
    904c:	a0c00217 	ldw	r3,8(r20)
    9050:	88c00215 	stw	r3,8(r17)
    9054:	a0c00317 	ldw	r3,12(r20)
    9058:	88c00315 	stw	r3,12(r17)
    905c:	30801126 	beq	r6,r2,90a4 <_realloc_r+0x4cc>
    9060:	88800404 	addi	r2,r17,16
    9064:	a0c00404 	addi	r3,r20,16
    9068:	003f4e06 	br	8da4 <__alt_mem_Flash_flash_data+0xf4008da4>
    906c:	893fff17 	ldw	r4,-4(r17)
    9070:	00bfff04 	movi	r2,-4
    9074:	a023883a 	mov	r17,r20
    9078:	2084703a 	and	r2,r4,r2
    907c:	80a1883a 	add	r16,r16,r2
    9080:	003f0d06 	br	8cb8 <__alt_mem_Flash_flash_data+0xf4008cb8>
    9084:	a0800217 	ldw	r2,8(r20)
    9088:	98800415 	stw	r2,16(r19)
    908c:	a0800317 	ldw	r2,12(r20)
    9090:	98800515 	stw	r2,20(r19)
    9094:	31000a26 	beq	r6,r4,90c0 <_realloc_r+0x4e8>
    9098:	98c00604 	addi	r3,r19,24
    909c:	a5000404 	addi	r20,r20,16
    90a0:	003fa806 	br	8f44 <__alt_mem_Flash_flash_data+0xf4008f44>
    90a4:	a1000417 	ldw	r4,16(r20)
    90a8:	88800604 	addi	r2,r17,24
    90ac:	a0c00604 	addi	r3,r20,24
    90b0:	89000415 	stw	r4,16(r17)
    90b4:	a1000517 	ldw	r4,20(r20)
    90b8:	89000515 	stw	r4,20(r17)
    90bc:	003f3906 	br	8da4 <__alt_mem_Flash_flash_data+0xf4008da4>
    90c0:	a0800417 	ldw	r2,16(r20)
    90c4:	a5000604 	addi	r20,r20,24
    90c8:	98c00804 	addi	r3,r19,32
    90cc:	98800615 	stw	r2,24(r19)
    90d0:	a0bfff17 	ldw	r2,-4(r20)
    90d4:	98800715 	stw	r2,28(r19)
    90d8:	003f9a06 	br	8f44 <__alt_mem_Flash_flash_data+0xf4008f44>
    90dc:	8805883a 	mov	r2,r17
    90e0:	003fc706 	br	9000 <__alt_mem_Flash_flash_data+0xf4009000>
    90e4:	8809883a 	mov	r4,r17
    90e8:	a00b883a 	mov	r5,r20
    90ec:	00079b80 	call	79b8 <memmove>
    90f0:	003fc906 	br	9018 <__alt_mem_Flash_flash_data+0xf4009018>
    90f4:	a0800217 	ldw	r2,8(r20)
    90f8:	98800415 	stw	r2,16(r19)
    90fc:	a0800317 	ldw	r2,12(r20)
    9100:	98800515 	stw	r2,20(r19)
    9104:	31000726 	beq	r6,r4,9124 <_realloc_r+0x54c>
    9108:	98800604 	addi	r2,r19,24
    910c:	a5000404 	addi	r20,r20,16
    9110:	003fbb06 	br	9000 <__alt_mem_Flash_flash_data+0xf4009000>
    9114:	9009883a 	mov	r4,r18
    9118:	000f01c0 	call	f01c <__malloc_unlock>
    911c:	0005883a 	mov	r2,zero
    9120:	003ef206 	br	8cec <__alt_mem_Flash_flash_data+0xf4008cec>
    9124:	a0c00417 	ldw	r3,16(r20)
    9128:	a5000604 	addi	r20,r20,24
    912c:	98800804 	addi	r2,r19,32
    9130:	98c00615 	stw	r3,24(r19)
    9134:	a0ffff17 	ldw	r3,-4(r20)
    9138:	98c00715 	stw	r3,28(r19)
    913c:	003fb006 	br	9000 <__alt_mem_Flash_flash_data+0xf4009000>

00009140 <__fpclassifyd>:
    9140:	00a00034 	movhi	r2,32768
    9144:	10bfffc4 	addi	r2,r2,-1
    9148:	2884703a 	and	r2,r5,r2
    914c:	10000726 	beq	r2,zero,916c <__fpclassifyd+0x2c>
    9150:	00fffc34 	movhi	r3,65520
    9154:	019ff834 	movhi	r6,32736
    9158:	28c7883a 	add	r3,r5,r3
    915c:	31bfffc4 	addi	r6,r6,-1
    9160:	30c00536 	bltu	r6,r3,9178 <__fpclassifyd+0x38>
    9164:	00800104 	movi	r2,4
    9168:	f800283a 	ret
    916c:	2000021e 	bne	r4,zero,9178 <__fpclassifyd+0x38>
    9170:	00800084 	movi	r2,2
    9174:	f800283a 	ret
    9178:	00dffc34 	movhi	r3,32752
    917c:	019ff834 	movhi	r6,32736
    9180:	28cb883a 	add	r5,r5,r3
    9184:	31bfffc4 	addi	r6,r6,-1
    9188:	317ff62e 	bgeu	r6,r5,9164 <__alt_mem_Flash_flash_data+0xf4009164>
    918c:	01400434 	movhi	r5,16
    9190:	297fffc4 	addi	r5,r5,-1
    9194:	28800236 	bltu	r5,r2,91a0 <__fpclassifyd+0x60>
    9198:	008000c4 	movi	r2,3
    919c:	f800283a 	ret
    91a0:	10c00226 	beq	r2,r3,91ac <__fpclassifyd+0x6c>
    91a4:	0005883a 	mov	r2,zero
    91a8:	f800283a 	ret
    91ac:	2005003a 	cmpeq	r2,r4,zero
    91b0:	f800283a 	ret

000091b4 <_sbrk_r>:
    91b4:	defffd04 	addi	sp,sp,-12
    91b8:	dc000015 	stw	r16,0(sp)
    91bc:	040000b4 	movhi	r16,2
    91c0:	dc400115 	stw	r17,4(sp)
    91c4:	843f2504 	addi	r16,r16,-876
    91c8:	2023883a 	mov	r17,r4
    91cc:	2809883a 	mov	r4,r5
    91d0:	dfc00215 	stw	ra,8(sp)
    91d4:	80000015 	stw	zero,0(r16)
    91d8:	000ebe80 	call	ebe8 <sbrk>
    91dc:	00ffffc4 	movi	r3,-1
    91e0:	10c00526 	beq	r2,r3,91f8 <_sbrk_r+0x44>
    91e4:	dfc00217 	ldw	ra,8(sp)
    91e8:	dc400117 	ldw	r17,4(sp)
    91ec:	dc000017 	ldw	r16,0(sp)
    91f0:	dec00304 	addi	sp,sp,12
    91f4:	f800283a 	ret
    91f8:	80c00017 	ldw	r3,0(r16)
    91fc:	183ff926 	beq	r3,zero,91e4 <__alt_mem_Flash_flash_data+0xf40091e4>
    9200:	88c00015 	stw	r3,0(r17)
    9204:	003ff706 	br	91e4 <__alt_mem_Flash_flash_data+0xf40091e4>

00009208 <__sread>:
    9208:	defffe04 	addi	sp,sp,-8
    920c:	dc000015 	stw	r16,0(sp)
    9210:	2821883a 	mov	r16,r5
    9214:	2940038f 	ldh	r5,14(r5)
    9218:	dfc00115 	stw	ra,4(sp)
    921c:	000ae0c0 	call	ae0c <_read_r>
    9220:	10000716 	blt	r2,zero,9240 <__sread+0x38>
    9224:	80c01417 	ldw	r3,80(r16)
    9228:	1887883a 	add	r3,r3,r2
    922c:	80c01415 	stw	r3,80(r16)
    9230:	dfc00117 	ldw	ra,4(sp)
    9234:	dc000017 	ldw	r16,0(sp)
    9238:	dec00204 	addi	sp,sp,8
    923c:	f800283a 	ret
    9240:	80c0030b 	ldhu	r3,12(r16)
    9244:	18fbffcc 	andi	r3,r3,61439
    9248:	80c0030d 	sth	r3,12(r16)
    924c:	dfc00117 	ldw	ra,4(sp)
    9250:	dc000017 	ldw	r16,0(sp)
    9254:	dec00204 	addi	sp,sp,8
    9258:	f800283a 	ret

0000925c <__seofread>:
    925c:	0005883a 	mov	r2,zero
    9260:	f800283a 	ret

00009264 <__swrite>:
    9264:	2880030b 	ldhu	r2,12(r5)
    9268:	defffb04 	addi	sp,sp,-20
    926c:	dcc00315 	stw	r19,12(sp)
    9270:	dc800215 	stw	r18,8(sp)
    9274:	dc400115 	stw	r17,4(sp)
    9278:	dc000015 	stw	r16,0(sp)
    927c:	dfc00415 	stw	ra,16(sp)
    9280:	10c0400c 	andi	r3,r2,256
    9284:	2821883a 	mov	r16,r5
    9288:	2027883a 	mov	r19,r4
    928c:	3025883a 	mov	r18,r6
    9290:	3823883a 	mov	r17,r7
    9294:	18000526 	beq	r3,zero,92ac <__swrite+0x48>
    9298:	2940038f 	ldh	r5,14(r5)
    929c:	000d883a 	mov	r6,zero
    92a0:	01c00084 	movi	r7,2
    92a4:	000adb00 	call	adb0 <_lseek_r>
    92a8:	8080030b 	ldhu	r2,12(r16)
    92ac:	8140038f 	ldh	r5,14(r16)
    92b0:	10bbffcc 	andi	r2,r2,61439
    92b4:	9809883a 	mov	r4,r19
    92b8:	900d883a 	mov	r6,r18
    92bc:	880f883a 	mov	r7,r17
    92c0:	8080030d 	sth	r2,12(r16)
    92c4:	dfc00417 	ldw	ra,16(sp)
    92c8:	dcc00317 	ldw	r19,12(sp)
    92cc:	dc800217 	ldw	r18,8(sp)
    92d0:	dc400117 	ldw	r17,4(sp)
    92d4:	dc000017 	ldw	r16,0(sp)
    92d8:	dec00504 	addi	sp,sp,20
    92dc:	000a8ac1 	jmpi	a8ac <_write_r>

000092e0 <__sseek>:
    92e0:	defffe04 	addi	sp,sp,-8
    92e4:	dc000015 	stw	r16,0(sp)
    92e8:	2821883a 	mov	r16,r5
    92ec:	2940038f 	ldh	r5,14(r5)
    92f0:	dfc00115 	stw	ra,4(sp)
    92f4:	000adb00 	call	adb0 <_lseek_r>
    92f8:	00ffffc4 	movi	r3,-1
    92fc:	10c00826 	beq	r2,r3,9320 <__sseek+0x40>
    9300:	80c0030b 	ldhu	r3,12(r16)
    9304:	80801415 	stw	r2,80(r16)
    9308:	18c40014 	ori	r3,r3,4096
    930c:	80c0030d 	sth	r3,12(r16)
    9310:	dfc00117 	ldw	ra,4(sp)
    9314:	dc000017 	ldw	r16,0(sp)
    9318:	dec00204 	addi	sp,sp,8
    931c:	f800283a 	ret
    9320:	80c0030b 	ldhu	r3,12(r16)
    9324:	18fbffcc 	andi	r3,r3,61439
    9328:	80c0030d 	sth	r3,12(r16)
    932c:	dfc00117 	ldw	ra,4(sp)
    9330:	dc000017 	ldw	r16,0(sp)
    9334:	dec00204 	addi	sp,sp,8
    9338:	f800283a 	ret

0000933c <__sclose>:
    933c:	2940038f 	ldh	r5,14(r5)
    9340:	000a9081 	jmpi	a908 <_close_r>

00009344 <strcmp>:
    9344:	2144b03a 	or	r2,r4,r5
    9348:	108000cc 	andi	r2,r2,3
    934c:	1000171e 	bne	r2,zero,93ac <strcmp+0x68>
    9350:	20800017 	ldw	r2,0(r4)
    9354:	28c00017 	ldw	r3,0(r5)
    9358:	10c0141e 	bne	r2,r3,93ac <strcmp+0x68>
    935c:	027fbff4 	movhi	r9,65279
    9360:	4a7fbfc4 	addi	r9,r9,-257
    9364:	0086303a 	nor	r3,zero,r2
    9368:	02202074 	movhi	r8,32897
    936c:	1245883a 	add	r2,r2,r9
    9370:	42202004 	addi	r8,r8,-32640
    9374:	10c4703a 	and	r2,r2,r3
    9378:	1204703a 	and	r2,r2,r8
    937c:	10000226 	beq	r2,zero,9388 <strcmp+0x44>
    9380:	00001706 	br	93e0 <strcmp+0x9c>
    9384:	1000161e 	bne	r2,zero,93e0 <strcmp+0x9c>
    9388:	21000104 	addi	r4,r4,4
    938c:	20c00017 	ldw	r3,0(r4)
    9390:	29400104 	addi	r5,r5,4
    9394:	29800017 	ldw	r6,0(r5)
    9398:	1a4f883a 	add	r7,r3,r9
    939c:	00c4303a 	nor	r2,zero,r3
    93a0:	3884703a 	and	r2,r7,r2
    93a4:	1204703a 	and	r2,r2,r8
    93a8:	19bff626 	beq	r3,r6,9384 <__alt_mem_Flash_flash_data+0xf4009384>
    93ac:	20800007 	ldb	r2,0(r4)
    93b0:	1000051e 	bne	r2,zero,93c8 <strcmp+0x84>
    93b4:	00000606 	br	93d0 <strcmp+0x8c>
    93b8:	21000044 	addi	r4,r4,1
    93bc:	20800007 	ldb	r2,0(r4)
    93c0:	29400044 	addi	r5,r5,1
    93c4:	10000226 	beq	r2,zero,93d0 <strcmp+0x8c>
    93c8:	28c00007 	ldb	r3,0(r5)
    93cc:	10fffa26 	beq	r2,r3,93b8 <__alt_mem_Flash_flash_data+0xf40093b8>
    93d0:	20800003 	ldbu	r2,0(r4)
    93d4:	28c00003 	ldbu	r3,0(r5)
    93d8:	10c5c83a 	sub	r2,r2,r3
    93dc:	f800283a 	ret
    93e0:	0005883a 	mov	r2,zero
    93e4:	f800283a 	ret

000093e8 <__sprint_r.part.0>:
    93e8:	28801917 	ldw	r2,100(r5)
    93ec:	defff604 	addi	sp,sp,-40
    93f0:	dd400515 	stw	r21,20(sp)
    93f4:	dcc00315 	stw	r19,12(sp)
    93f8:	dfc00915 	stw	ra,36(sp)
    93fc:	df000815 	stw	fp,32(sp)
    9400:	ddc00715 	stw	r23,28(sp)
    9404:	dd800615 	stw	r22,24(sp)
    9408:	dd000415 	stw	r20,16(sp)
    940c:	dc800215 	stw	r18,8(sp)
    9410:	dc400115 	stw	r17,4(sp)
    9414:	dc000015 	stw	r16,0(sp)
    9418:	1088000c 	andi	r2,r2,8192
    941c:	2827883a 	mov	r19,r5
    9420:	302b883a 	mov	r21,r6
    9424:	10002d26 	beq	r2,zero,94dc <__sprint_r.part.0+0xf4>
    9428:	30800217 	ldw	r2,8(r6)
    942c:	35800017 	ldw	r22,0(r6)
    9430:	10002826 	beq	r2,zero,94d4 <__sprint_r.part.0+0xec>
    9434:	2029883a 	mov	r20,r4
    9438:	b5c00104 	addi	r23,r22,4
    943c:	04bfffc4 	movi	r18,-1
    9440:	bc400017 	ldw	r17,0(r23)
    9444:	b4000017 	ldw	r16,0(r22)
    9448:	0039883a 	mov	fp,zero
    944c:	8822d0ba 	srli	r17,r17,2
    9450:	04400316 	blt	zero,r17,9460 <__sprint_r.part.0+0x78>
    9454:	00001806 	br	94b8 <__sprint_r.part.0+0xd0>
    9458:	84000104 	addi	r16,r16,4
    945c:	8f001526 	beq	r17,fp,94b4 <__sprint_r.part.0+0xcc>
    9460:	81400017 	ldw	r5,0(r16)
    9464:	a009883a 	mov	r4,r20
    9468:	980d883a 	mov	r6,r19
    946c:	000ab240 	call	ab24 <_fputwc_r>
    9470:	e7000044 	addi	fp,fp,1
    9474:	14bff81e 	bne	r2,r18,9458 <__alt_mem_Flash_flash_data+0xf4009458>
    9478:	9005883a 	mov	r2,r18
    947c:	a8000215 	stw	zero,8(r21)
    9480:	a8000115 	stw	zero,4(r21)
    9484:	dfc00917 	ldw	ra,36(sp)
    9488:	df000817 	ldw	fp,32(sp)
    948c:	ddc00717 	ldw	r23,28(sp)
    9490:	dd800617 	ldw	r22,24(sp)
    9494:	dd400517 	ldw	r21,20(sp)
    9498:	dd000417 	ldw	r20,16(sp)
    949c:	dcc00317 	ldw	r19,12(sp)
    94a0:	dc800217 	ldw	r18,8(sp)
    94a4:	dc400117 	ldw	r17,4(sp)
    94a8:	dc000017 	ldw	r16,0(sp)
    94ac:	dec00a04 	addi	sp,sp,40
    94b0:	f800283a 	ret
    94b4:	a8800217 	ldw	r2,8(r21)
    94b8:	8c63883a 	add	r17,r17,r17
    94bc:	8c63883a 	add	r17,r17,r17
    94c0:	1445c83a 	sub	r2,r2,r17
    94c4:	a8800215 	stw	r2,8(r21)
    94c8:	b5800204 	addi	r22,r22,8
    94cc:	bdc00204 	addi	r23,r23,8
    94d0:	103fdb1e 	bne	r2,zero,9440 <__alt_mem_Flash_flash_data+0xf4009440>
    94d4:	0005883a 	mov	r2,zero
    94d8:	003fe806 	br	947c <__alt_mem_Flash_flash_data+0xf400947c>
    94dc:	00067100 	call	6710 <__sfvwrite_r>
    94e0:	003fe606 	br	947c <__alt_mem_Flash_flash_data+0xf400947c>

000094e4 <__sprint_r>:
    94e4:	30c00217 	ldw	r3,8(r6)
    94e8:	18000126 	beq	r3,zero,94f0 <__sprint_r+0xc>
    94ec:	00093e81 	jmpi	93e8 <__sprint_r.part.0>
    94f0:	30000115 	stw	zero,4(r6)
    94f4:	0005883a 	mov	r2,zero
    94f8:	f800283a 	ret

000094fc <___vfiprintf_internal_r>:
    94fc:	deffca04 	addi	sp,sp,-216
    9500:	dd803215 	stw	r22,200(sp)
    9504:	dd403115 	stw	r21,196(sp)
    9508:	dfc03515 	stw	ra,212(sp)
    950c:	df003415 	stw	fp,208(sp)
    9510:	ddc03315 	stw	r23,204(sp)
    9514:	dd003015 	stw	r20,192(sp)
    9518:	dcc02f15 	stw	r19,188(sp)
    951c:	dc802e15 	stw	r18,184(sp)
    9520:	dc402d15 	stw	r17,180(sp)
    9524:	dc002c15 	stw	r16,176(sp)
    9528:	d9002015 	stw	r4,128(sp)
    952c:	d9c02215 	stw	r7,136(sp)
    9530:	282b883a 	mov	r21,r5
    9534:	302d883a 	mov	r22,r6
    9538:	20000226 	beq	r4,zero,9544 <___vfiprintf_internal_r+0x48>
    953c:	20800e17 	ldw	r2,56(r4)
    9540:	1001b126 	beq	r2,zero,9c08 <___vfiprintf_internal_r+0x70c>
    9544:	a880030b 	ldhu	r2,12(r21)
    9548:	10c8000c 	andi	r3,r2,8192
    954c:	1800061e 	bne	r3,zero,9568 <___vfiprintf_internal_r+0x6c>
    9550:	a9001917 	ldw	r4,100(r21)
    9554:	00f7ffc4 	movi	r3,-8193
    9558:	10880014 	ori	r2,r2,8192
    955c:	20c6703a 	and	r3,r4,r3
    9560:	a880030d 	sth	r2,12(r21)
    9564:	a8c01915 	stw	r3,100(r21)
    9568:	10c0020c 	andi	r3,r2,8
    956c:	18018926 	beq	r3,zero,9b94 <___vfiprintf_internal_r+0x698>
    9570:	a8c00417 	ldw	r3,16(r21)
    9574:	18018726 	beq	r3,zero,9b94 <___vfiprintf_internal_r+0x698>
    9578:	1080068c 	andi	r2,r2,26
    957c:	00c00284 	movi	r3,10
    9580:	10c18c26 	beq	r2,r3,9bb4 <___vfiprintf_internal_r+0x6b8>
    9584:	d8801a04 	addi	r2,sp,104
    9588:	d8c019c4 	addi	r3,sp,103
    958c:	070000b4 	movhi	fp,2
    9590:	05c000b4 	movhi	r23,2
    9594:	10c9c83a 	sub	r4,r2,r3
    9598:	e72e7404 	addi	fp,fp,-17968
    959c:	bdee7004 	addi	r23,r23,-17984
    95a0:	d8801e15 	stw	r2,120(sp)
    95a4:	d8c01f15 	stw	r3,124(sp)
    95a8:	dec01a15 	stw	sp,104(sp)
    95ac:	d8001c15 	stw	zero,112(sp)
    95b0:	d8001b15 	stw	zero,108(sp)
    95b4:	d8002615 	stw	zero,152(sp)
    95b8:	d8002315 	stw	zero,140(sp)
    95bc:	d9002715 	stw	r4,156(sp)
    95c0:	d811883a 	mov	r8,sp
    95c4:	dd402115 	stw	r21,132(sp)
    95c8:	b021883a 	mov	r16,r22
    95cc:	80800007 	ldb	r2,0(r16)
    95d0:	10037226 	beq	r2,zero,a39c <___vfiprintf_internal_r+0xea0>
    95d4:	01000944 	movi	r4,37
    95d8:	11037026 	beq	r2,r4,a39c <___vfiprintf_internal_r+0xea0>
    95dc:	8005883a 	mov	r2,r16
    95e0:	00000106 	br	95e8 <___vfiprintf_internal_r+0xec>
    95e4:	19000326 	beq	r3,r4,95f4 <___vfiprintf_internal_r+0xf8>
    95e8:	10800044 	addi	r2,r2,1
    95ec:	10c00007 	ldb	r3,0(r2)
    95f0:	183ffc1e 	bne	r3,zero,95e4 <__alt_mem_Flash_flash_data+0xf40095e4>
    95f4:	1425c83a 	sub	r18,r2,r16
    95f8:	1023883a 	mov	r17,r2
    95fc:	90001026 	beq	r18,zero,9640 <___vfiprintf_internal_r+0x144>
    9600:	d8c01c17 	ldw	r3,112(sp)
    9604:	d8801b17 	ldw	r2,108(sp)
    9608:	44000015 	stw	r16,0(r8)
    960c:	90c7883a 	add	r3,r18,r3
    9610:	10800044 	addi	r2,r2,1
    9614:	44800115 	stw	r18,4(r8)
    9618:	d8c01c15 	stw	r3,112(sp)
    961c:	d8801b15 	stw	r2,108(sp)
    9620:	010001c4 	movi	r4,7
    9624:	2080750e 	bge	r4,r2,97fc <___vfiprintf_internal_r+0x300>
    9628:	18036f1e 	bne	r3,zero,a3e8 <___vfiprintf_internal_r+0xeec>
    962c:	d8802317 	ldw	r2,140(sp)
    9630:	d8001b15 	stw	zero,108(sp)
    9634:	d811883a 	mov	r8,sp
    9638:	1485883a 	add	r2,r2,r18
    963c:	d8802315 	stw	r2,140(sp)
    9640:	88800007 	ldb	r2,0(r17)
    9644:	10041026 	beq	r2,zero,a688 <___vfiprintf_internal_r+0x118c>
    9648:	88c00047 	ldb	r3,1(r17)
    964c:	88800044 	addi	r2,r17,1
    9650:	d8001d85 	stb	zero,118(sp)
    9654:	000f883a 	mov	r7,zero
    9658:	027fffc4 	movi	r9,-1
    965c:	0025883a 	mov	r18,zero
    9660:	002b883a 	mov	r21,zero
    9664:	01401604 	movi	r5,88
    9668:	01800244 	movi	r6,9
    966c:	03400a84 	movi	r13,42
    9670:	03001b04 	movi	r12,108
    9674:	14000044 	addi	r16,r2,1
    9678:	18bff804 	addi	r2,r3,-32
    967c:	28825536 	bltu	r5,r2,9fd4 <___vfiprintf_internal_r+0xad8>
    9680:	100490ba 	slli	r2,r2,2
    9684:	01000074 	movhi	r4,1
    9688:	2125a604 	addi	r4,r4,-26984
    968c:	1105883a 	add	r2,r2,r4
    9690:	10800017 	ldw	r2,0(r2)
    9694:	1000683a 	jmp	r2
    9698:	00009d98 	cmpnei	zero,zero,630
    969c:	00009fd4 	movui	zero,639
    96a0:	00009fd4 	movui	zero,639
    96a4:	00009db8 	rdprs	zero,zero,630
    96a8:	00009fd4 	movui	zero,639
    96ac:	00009fd4 	movui	zero,639
    96b0:	00009fd4 	movui	zero,639
    96b4:	00009fd4 	movui	zero,639
    96b8:	00009fd4 	movui	zero,639
    96bc:	00009fd4 	movui	zero,639
    96c0:	00009dc8 	cmpgei	zero,zero,631
    96c4:	00009de8 	cmpgeui	zero,zero,631
    96c8:	00009fd4 	movui	zero,639
    96cc:	00009c10 	cmplti	zero,zero,624
    96d0:	00009cfc 	xorhi	zero,zero,627
    96d4:	00009fd4 	movui	zero,639
    96d8:	00009c7c 	xorhi	zero,zero,625
    96dc:	00009c8c 	andi	zero,zero,626
    96e0:	00009c8c 	andi	zero,zero,626
    96e4:	00009c8c 	andi	zero,zero,626
    96e8:	00009c8c 	andi	zero,zero,626
    96ec:	00009c8c 	andi	zero,zero,626
    96f0:	00009c8c 	andi	zero,zero,626
    96f4:	00009c8c 	andi	zero,zero,626
    96f8:	00009c8c 	andi	zero,zero,626
    96fc:	00009c8c 	andi	zero,zero,626
    9700:	00009fd4 	movui	zero,639
    9704:	00009fd4 	movui	zero,639
    9708:	00009fd4 	movui	zero,639
    970c:	00009fd4 	movui	zero,639
    9710:	00009fd4 	movui	zero,639
    9714:	00009fd4 	movui	zero,639
    9718:	00009fd4 	movui	zero,639
    971c:	00009fd4 	movui	zero,639
    9720:	00009fd4 	movui	zero,639
    9724:	00009fd4 	movui	zero,639
    9728:	00009cb8 	rdprs	zero,zero,626
    972c:	00009fd4 	movui	zero,639
    9730:	00009fd4 	movui	zero,639
    9734:	00009fd4 	movui	zero,639
    9738:	00009fd4 	movui	zero,639
    973c:	00009fd4 	movui	zero,639
    9740:	00009fd4 	movui	zero,639
    9744:	00009fd4 	movui	zero,639
    9748:	00009fd4 	movui	zero,639
    974c:	00009fd4 	movui	zero,639
    9750:	00009fd4 	movui	zero,639
    9754:	00009844 	movi	zero,609
    9758:	00009fd4 	movui	zero,639
    975c:	00009fd4 	movui	zero,639
    9760:	00009fd4 	movui	zero,639
    9764:	00009fd4 	movui	zero,639
    9768:	00009fd4 	movui	zero,639
    976c:	00009810 	cmplti	zero,zero,608
    9770:	00009fd4 	movui	zero,639
    9774:	00009fd4 	movui	zero,639
    9778:	00009e58 	cmpnei	zero,zero,633
    977c:	00009fd4 	movui	zero,639
    9780:	00009fd4 	movui	zero,639
    9784:	00009fd4 	movui	zero,639
    9788:	00009fd4 	movui	zero,639
    978c:	00009fd4 	movui	zero,639
    9790:	00009fd4 	movui	zero,639
    9794:	00009fd4 	movui	zero,639
    9798:	00009fd4 	movui	zero,639
    979c:	00009fd4 	movui	zero,639
    97a0:	00009fd4 	movui	zero,639
    97a4:	00009df8 	rdprs	zero,zero,631
    97a8:	00009e24 	muli	zero,zero,632
    97ac:	00009fd4 	movui	zero,639
    97b0:	00009fd4 	movui	zero,639
    97b4:	00009fd4 	movui	zero,639
    97b8:	00009f00 	call	9f0 <Game+0x294>
    97bc:	00009e24 	muli	zero,zero,632
    97c0:	00009fd4 	movui	zero,639
    97c4:	00009fd4 	movui	zero,639
    97c8:	00009f10 	cmplti	zero,zero,636
    97cc:	00009fd4 	movui	zero,639
    97d0:	00009d3c 	xorhi	zero,zero,628
    97d4:	00009848 	cmpgei	zero,zero,609
    97d8:	00009f24 	muli	zero,zero,636
    97dc:	00009f64 	muli	zero,zero,637
    97e0:	00009fd4 	movui	zero,639
    97e4:	00009eac 	andhi	zero,zero,634
    97e8:	00009fd4 	movui	zero,639
    97ec:	00009814 	movui	zero,608
    97f0:	00009fd4 	movui	zero,639
    97f4:	00009fd4 	movui	zero,639
    97f8:	00009f74 	movhi	zero,637
    97fc:	42000204 	addi	r8,r8,8
    9800:	d8802317 	ldw	r2,140(sp)
    9804:	1485883a 	add	r2,r2,r18
    9808:	d8802315 	stw	r2,140(sp)
    980c:	003f8c06 	br	9640 <__alt_mem_Flash_flash_data+0xf4009640>
    9810:	ad400414 	ori	r21,r21,16
    9814:	a880080c 	andi	r2,r21,32
    9818:	1001e61e 	bne	r2,zero,9fb4 <___vfiprintf_internal_r+0xab8>
    981c:	a880040c 	andi	r2,r21,16
    9820:	10034726 	beq	r2,zero,a540 <___vfiprintf_internal_r+0x1044>
    9824:	d8802217 	ldw	r2,136(sp)
    9828:	001b883a 	mov	r13,zero
    982c:	15800017 	ldw	r22,0(r2)
    9830:	10800104 	addi	r2,r2,4
    9834:	d8802215 	stw	r2,136(sp)
    9838:	b009883a 	mov	r4,r22
    983c:	00800044 	movi	r2,1
    9840:	00000c06 	br	9874 <___vfiprintf_internal_r+0x378>
    9844:	ad400414 	ori	r21,r21,16
    9848:	a880080c 	andi	r2,r21,32
    984c:	1001491e 	bne	r2,zero,9d74 <___vfiprintf_internal_r+0x878>
    9850:	a880040c 	andi	r2,r21,16
    9854:	10032d26 	beq	r2,zero,a50c <___vfiprintf_internal_r+0x1010>
    9858:	d9002217 	ldw	r4,136(sp)
    985c:	001b883a 	mov	r13,zero
    9860:	0005883a 	mov	r2,zero
    9864:	25800017 	ldw	r22,0(r4)
    9868:	21000104 	addi	r4,r4,4
    986c:	d9002215 	stw	r4,136(sp)
    9870:	b009883a 	mov	r4,r22
    9874:	d8001d85 	stb	zero,118(sp)
    9878:	4827883a 	mov	r19,r9
    987c:	001d883a 	mov	r14,zero
    9880:	48000216 	blt	r9,zero,988c <___vfiprintf_internal_r+0x390>
    9884:	00ffdfc4 	movi	r3,-129
    9888:	a8ea703a 	and	r21,r21,r3
    988c:	2002071e 	bne	r4,zero,a0ac <___vfiprintf_internal_r+0xbb0>
    9890:	4802ad26 	beq	r9,zero,a348 <___vfiprintf_internal_r+0xe4c>
    9894:	10803fcc 	andi	r2,r2,255
    9898:	00c00044 	movi	r3,1
    989c:	10c22b26 	beq	r2,r3,a14c <___vfiprintf_internal_r+0xc50>
    98a0:	00c00084 	movi	r3,2
    98a4:	dd001a04 	addi	r20,sp,104
    98a8:	10c0dd1e 	bne	r2,r3,9c20 <___vfiprintf_internal_r+0x724>
    98ac:	d9002617 	ldw	r4,152(sp)
    98b0:	b08003cc 	andi	r2,r22,15
    98b4:	6806973a 	slli	r3,r13,28
    98b8:	2085883a 	add	r2,r4,r2
    98bc:	b02cd13a 	srli	r22,r22,4
    98c0:	10800003 	ldbu	r2,0(r2)
    98c4:	681ad13a 	srli	r13,r13,4
    98c8:	a53fffc4 	addi	r20,r20,-1
    98cc:	1dacb03a 	or	r22,r3,r22
    98d0:	a0800005 	stb	r2,0(r20)
    98d4:	b344b03a 	or	r2,r22,r13
    98d8:	103ff51e 	bne	r2,zero,98b0 <__alt_mem_Flash_flash_data+0xf40098b0>
    98dc:	d9001e17 	ldw	r4,120(sp)
    98e0:	2527c83a 	sub	r19,r4,r20
    98e4:	9823883a 	mov	r17,r19
    98e8:	9a40010e 	bge	r19,r9,98f0 <___vfiprintf_internal_r+0x3f4>
    98ec:	4823883a 	mov	r17,r9
    98f0:	73803fcc 	andi	r14,r14,255
    98f4:	7380201c 	xori	r14,r14,128
    98f8:	73bfe004 	addi	r14,r14,-128
    98fc:	70000126 	beq	r14,zero,9904 <___vfiprintf_internal_r+0x408>
    9900:	8c400044 	addi	r17,r17,1
    9904:	ab40008c 	andi	r13,r21,2
    9908:	68000126 	beq	r13,zero,9910 <___vfiprintf_internal_r+0x414>
    990c:	8c400084 	addi	r17,r17,2
    9910:	ad80210c 	andi	r22,r21,132
    9914:	b001c51e 	bne	r22,zero,a02c <___vfiprintf_internal_r+0xb30>
    9918:	9447c83a 	sub	r3,r18,r17
    991c:	00c1c30e 	bge	zero,r3,a02c <___vfiprintf_internal_r+0xb30>
    9920:	01c00404 	movi	r7,16
    9924:	d8801c17 	ldw	r2,112(sp)
    9928:	38c37b0e 	bge	r7,r3,a718 <___vfiprintf_internal_r+0x121c>
    992c:	010000b4 	movhi	r4,2
    9930:	212e7404 	addi	r4,r4,-17968
    9934:	dc002915 	stw	r16,164(sp)
    9938:	d9801b17 	ldw	r6,108(sp)
    993c:	d9002415 	stw	r4,144(sp)
    9940:	03c001c4 	movi	r15,7
    9944:	da402515 	stw	r9,148(sp)
    9948:	db402815 	stw	r13,160(sp)
    994c:	1821883a 	mov	r16,r3
    9950:	00000506 	br	9968 <___vfiprintf_internal_r+0x46c>
    9954:	31400084 	addi	r5,r6,2
    9958:	42000204 	addi	r8,r8,8
    995c:	200d883a 	mov	r6,r4
    9960:	843ffc04 	addi	r16,r16,-16
    9964:	3c000d0e 	bge	r7,r16,999c <___vfiprintf_internal_r+0x4a0>
    9968:	10800404 	addi	r2,r2,16
    996c:	31000044 	addi	r4,r6,1
    9970:	47000015 	stw	fp,0(r8)
    9974:	41c00115 	stw	r7,4(r8)
    9978:	d8801c15 	stw	r2,112(sp)
    997c:	d9001b15 	stw	r4,108(sp)
    9980:	793ff40e 	bge	r15,r4,9954 <__alt_mem_Flash_flash_data+0xf4009954>
    9984:	10019b1e 	bne	r2,zero,9ff4 <___vfiprintf_internal_r+0xaf8>
    9988:	843ffc04 	addi	r16,r16,-16
    998c:	000d883a 	mov	r6,zero
    9990:	01400044 	movi	r5,1
    9994:	d811883a 	mov	r8,sp
    9998:	3c3ff316 	blt	r7,r16,9968 <__alt_mem_Flash_flash_data+0xf4009968>
    999c:	8007883a 	mov	r3,r16
    99a0:	da402517 	ldw	r9,148(sp)
    99a4:	db402817 	ldw	r13,160(sp)
    99a8:	dc002917 	ldw	r16,164(sp)
    99ac:	d9002417 	ldw	r4,144(sp)
    99b0:	1885883a 	add	r2,r3,r2
    99b4:	40c00115 	stw	r3,4(r8)
    99b8:	41000015 	stw	r4,0(r8)
    99bc:	d8801c15 	stw	r2,112(sp)
    99c0:	d9401b15 	stw	r5,108(sp)
    99c4:	00c001c4 	movi	r3,7
    99c8:	19426a16 	blt	r3,r5,a374 <___vfiprintf_internal_r+0xe78>
    99cc:	d8c01d87 	ldb	r3,118(sp)
    99d0:	42000204 	addi	r8,r8,8
    99d4:	29000044 	addi	r4,r5,1
    99d8:	1801991e 	bne	r3,zero,a040 <___vfiprintf_internal_r+0xb44>
    99dc:	68000c26 	beq	r13,zero,9a10 <___vfiprintf_internal_r+0x514>
    99e0:	d8c01d04 	addi	r3,sp,116
    99e4:	10800084 	addi	r2,r2,2
    99e8:	40c00015 	stw	r3,0(r8)
    99ec:	00c00084 	movi	r3,2
    99f0:	40c00115 	stw	r3,4(r8)
    99f4:	d8801c15 	stw	r2,112(sp)
    99f8:	d9001b15 	stw	r4,108(sp)
    99fc:	00c001c4 	movi	r3,7
    9a00:	19024c16 	blt	r3,r4,a334 <___vfiprintf_internal_r+0xe38>
    9a04:	200b883a 	mov	r5,r4
    9a08:	42000204 	addi	r8,r8,8
    9a0c:	21000044 	addi	r4,r4,1
    9a10:	00c02004 	movi	r3,128
    9a14:	b0c20126 	beq	r22,r3,a21c <___vfiprintf_internal_r+0xd20>
    9a18:	4cedc83a 	sub	r22,r9,r19
    9a1c:	0580230e 	bge	zero,r22,9aac <___vfiprintf_internal_r+0x5b0>
    9a20:	01c00404 	movi	r7,16
    9a24:	3d83140e 	bge	r7,r22,a678 <___vfiprintf_internal_r+0x117c>
    9a28:	010000b4 	movhi	r4,2
    9a2c:	212e7004 	addi	r4,r4,-17984
    9a30:	d9002415 	stw	r4,144(sp)
    9a34:	034001c4 	movi	r13,7
    9a38:	00000506 	br	9a50 <___vfiprintf_internal_r+0x554>
    9a3c:	29000084 	addi	r4,r5,2
    9a40:	42000204 	addi	r8,r8,8
    9a44:	180b883a 	mov	r5,r3
    9a48:	b5bffc04 	addi	r22,r22,-16
    9a4c:	3d800d0e 	bge	r7,r22,9a84 <___vfiprintf_internal_r+0x588>
    9a50:	10800404 	addi	r2,r2,16
    9a54:	28c00044 	addi	r3,r5,1
    9a58:	45c00015 	stw	r23,0(r8)
    9a5c:	41c00115 	stw	r7,4(r8)
    9a60:	d8801c15 	stw	r2,112(sp)
    9a64:	d8c01b15 	stw	r3,108(sp)
    9a68:	68fff40e 	bge	r13,r3,9a3c <__alt_mem_Flash_flash_data+0xf4009a3c>
    9a6c:	1001811e 	bne	r2,zero,a074 <___vfiprintf_internal_r+0xb78>
    9a70:	b5bffc04 	addi	r22,r22,-16
    9a74:	01000044 	movi	r4,1
    9a78:	000b883a 	mov	r5,zero
    9a7c:	d811883a 	mov	r8,sp
    9a80:	3dbff316 	blt	r7,r22,9a50 <__alt_mem_Flash_flash_data+0xf4009a50>
    9a84:	d8c02417 	ldw	r3,144(sp)
    9a88:	1585883a 	add	r2,r2,r22
    9a8c:	45800115 	stw	r22,4(r8)
    9a90:	40c00015 	stw	r3,0(r8)
    9a94:	d8801c15 	stw	r2,112(sp)
    9a98:	d9001b15 	stw	r4,108(sp)
    9a9c:	00c001c4 	movi	r3,7
    9aa0:	1901d016 	blt	r3,r4,a1e4 <___vfiprintf_internal_r+0xce8>
    9aa4:	42000204 	addi	r8,r8,8
    9aa8:	21000044 	addi	r4,r4,1
    9aac:	14c5883a 	add	r2,r2,r19
    9ab0:	45000015 	stw	r20,0(r8)
    9ab4:	44c00115 	stw	r19,4(r8)
    9ab8:	d8801c15 	stw	r2,112(sp)
    9abc:	d9001b15 	stw	r4,108(sp)
    9ac0:	00c001c4 	movi	r3,7
    9ac4:	1901cf0e 	bge	r3,r4,a204 <___vfiprintf_internal_r+0xd08>
    9ac8:	1002361e 	bne	r2,zero,a3a4 <___vfiprintf_internal_r+0xea8>
    9acc:	d8001b15 	stw	zero,108(sp)
    9ad0:	aac0010c 	andi	r11,r21,4
    9ad4:	58002826 	beq	r11,zero,9b78 <___vfiprintf_internal_r+0x67c>
    9ad8:	9467c83a 	sub	r19,r18,r17
    9adc:	d811883a 	mov	r8,sp
    9ae0:	04c3340e 	bge	zero,r19,a7b4 <___vfiprintf_internal_r+0x12b8>
    9ae4:	01c00404 	movi	r7,16
    9ae8:	3cc31b0e 	bge	r7,r19,a758 <___vfiprintf_internal_r+0x125c>
    9aec:	00c000b4 	movhi	r3,2
    9af0:	18ee7404 	addi	r3,r3,-17968
    9af4:	d9001b17 	ldw	r4,108(sp)
    9af8:	d8c02415 	stw	r3,144(sp)
    9afc:	382b883a 	mov	r21,r7
    9b00:	050001c4 	movi	r20,7
    9b04:	dd802017 	ldw	r22,128(sp)
    9b08:	00000506 	br	9b20 <___vfiprintf_internal_r+0x624>
    9b0c:	21400084 	addi	r5,r4,2
    9b10:	42000204 	addi	r8,r8,8
    9b14:	1809883a 	mov	r4,r3
    9b18:	9cfffc04 	addi	r19,r19,-16
    9b1c:	acc00d0e 	bge	r21,r19,9b54 <___vfiprintf_internal_r+0x658>
    9b20:	10800404 	addi	r2,r2,16
    9b24:	20c00044 	addi	r3,r4,1
    9b28:	47000015 	stw	fp,0(r8)
    9b2c:	45400115 	stw	r21,4(r8)
    9b30:	d8801c15 	stw	r2,112(sp)
    9b34:	d8c01b15 	stw	r3,108(sp)
    9b38:	a0fff40e 	bge	r20,r3,9b0c <__alt_mem_Flash_flash_data+0xf4009b0c>
    9b3c:	10019f1e 	bne	r2,zero,a1bc <___vfiprintf_internal_r+0xcc0>
    9b40:	9cfffc04 	addi	r19,r19,-16
    9b44:	01400044 	movi	r5,1
    9b48:	0009883a 	mov	r4,zero
    9b4c:	d811883a 	mov	r8,sp
    9b50:	acfff316 	blt	r21,r19,9b20 <__alt_mem_Flash_flash_data+0xf4009b20>
    9b54:	d8c02417 	ldw	r3,144(sp)
    9b58:	14c5883a 	add	r2,r2,r19
    9b5c:	44c00115 	stw	r19,4(r8)
    9b60:	40c00015 	stw	r3,0(r8)
    9b64:	d8801c15 	stw	r2,112(sp)
    9b68:	d9401b15 	stw	r5,108(sp)
    9b6c:	00c001c4 	movi	r3,7
    9b70:	1941810e 	bge	r3,r5,a178 <___vfiprintf_internal_r+0xc7c>
    9b74:	10017a1e 	bne	r2,zero,a160 <___vfiprintf_internal_r+0xc64>
    9b78:	8c82a416 	blt	r17,r18,a60c <___vfiprintf_internal_r+0x1110>
    9b7c:	d9002317 	ldw	r4,140(sp)
    9b80:	2449883a 	add	r4,r4,r17
    9b84:	d9002315 	stw	r4,140(sp)
    9b88:	d8001b15 	stw	zero,108(sp)
    9b8c:	d811883a 	mov	r8,sp
    9b90:	003e8e06 	br	95cc <__alt_mem_Flash_flash_data+0xf40095cc>
    9b94:	d9002017 	ldw	r4,128(sp)
    9b98:	a80b883a 	mov	r5,r21
    9b9c:	000424c0 	call	424c <__swsetup_r>
    9ba0:	10000c1e 	bne	r2,zero,9bd4 <___vfiprintf_internal_r+0x6d8>
    9ba4:	a880030b 	ldhu	r2,12(r21)
    9ba8:	00c00284 	movi	r3,10
    9bac:	1080068c 	andi	r2,r2,26
    9bb0:	10fe741e 	bne	r2,r3,9584 <__alt_mem_Flash_flash_data+0xf4009584>
    9bb4:	a880038f 	ldh	r2,14(r21)
    9bb8:	103e7216 	blt	r2,zero,9584 <__alt_mem_Flash_flash_data+0xf4009584>
    9bbc:	d9002017 	ldw	r4,128(sp)
    9bc0:	d9c02217 	ldw	r7,136(sp)
    9bc4:	a80b883a 	mov	r5,r21
    9bc8:	b00d883a 	mov	r6,r22
    9bcc:	000a7f00 	call	a7f0 <__sbprintf>
    9bd0:	00000106 	br	9bd8 <___vfiprintf_internal_r+0x6dc>
    9bd4:	00bfffc4 	movi	r2,-1
    9bd8:	dfc03517 	ldw	ra,212(sp)
    9bdc:	df003417 	ldw	fp,208(sp)
    9be0:	ddc03317 	ldw	r23,204(sp)
    9be4:	dd803217 	ldw	r22,200(sp)
    9be8:	dd403117 	ldw	r21,196(sp)
    9bec:	dd003017 	ldw	r20,192(sp)
    9bf0:	dcc02f17 	ldw	r19,188(sp)
    9bf4:	dc802e17 	ldw	r18,184(sp)
    9bf8:	dc402d17 	ldw	r17,180(sp)
    9bfc:	dc002c17 	ldw	r16,176(sp)
    9c00:	dec03604 	addi	sp,sp,216
    9c04:	f800283a 	ret
    9c08:	00062ac0 	call	62ac <__sinit>
    9c0c:	003e4d06 	br	9544 <__alt_mem_Flash_flash_data+0xf4009544>
    9c10:	8005883a 	mov	r2,r16
    9c14:	ad400114 	ori	r21,r21,4
    9c18:	80c00007 	ldb	r3,0(r16)
    9c1c:	003e9506 	br	9674 <__alt_mem_Flash_flash_data+0xf4009674>
    9c20:	b006d0fa 	srli	r3,r22,3
    9c24:	6808977a 	slli	r4,r13,29
    9c28:	681ad0fa 	srli	r13,r13,3
    9c2c:	b58001cc 	andi	r22,r22,7
    9c30:	b0800c04 	addi	r2,r22,48
    9c34:	a53fffc4 	addi	r20,r20,-1
    9c38:	20ecb03a 	or	r22,r4,r3
    9c3c:	a0800005 	stb	r2,0(r20)
    9c40:	b346b03a 	or	r3,r22,r13
    9c44:	183ff61e 	bne	r3,zero,9c20 <__alt_mem_Flash_flash_data+0xf4009c20>
    9c48:	a8c0004c 	andi	r3,r21,1
    9c4c:	a009883a 	mov	r4,r20
    9c50:	18013b26 	beq	r3,zero,a140 <___vfiprintf_internal_r+0xc44>
    9c54:	10803fcc 	andi	r2,r2,255
    9c58:	1080201c 	xori	r2,r2,128
    9c5c:	10bfe004 	addi	r2,r2,-128
    9c60:	00c00c04 	movi	r3,48
    9c64:	10ff1d26 	beq	r2,r3,98dc <__alt_mem_Flash_flash_data+0xf40098dc>
    9c68:	d8801e17 	ldw	r2,120(sp)
    9c6c:	a53fffc4 	addi	r20,r20,-1
    9c70:	20ffffc5 	stb	r3,-1(r4)
    9c74:	1527c83a 	sub	r19,r2,r20
    9c78:	003f1a06 	br	98e4 <__alt_mem_Flash_flash_data+0xf40098e4>
    9c7c:	ad402014 	ori	r21,r21,128
    9c80:	8005883a 	mov	r2,r16
    9c84:	80c00007 	ldb	r3,0(r16)
    9c88:	003e7a06 	br	9674 <__alt_mem_Flash_flash_data+0xf4009674>
    9c8c:	8005883a 	mov	r2,r16
    9c90:	0025883a 	mov	r18,zero
    9c94:	193ff404 	addi	r4,r3,-48
    9c98:	10c00007 	ldb	r3,0(r2)
    9c9c:	948002a4 	muli	r18,r18,10
    9ca0:	84000044 	addi	r16,r16,1
    9ca4:	8005883a 	mov	r2,r16
    9ca8:	9125883a 	add	r18,r18,r4
    9cac:	193ff404 	addi	r4,r3,-48
    9cb0:	313ff92e 	bgeu	r6,r4,9c98 <__alt_mem_Flash_flash_data+0xf4009c98>
    9cb4:	003e7006 	br	9678 <__alt_mem_Flash_flash_data+0xf4009678>
    9cb8:	ad400414 	ori	r21,r21,16
    9cbc:	d9c01d85 	stb	r7,118(sp)
    9cc0:	a880080c 	andi	r2,r21,32
    9cc4:	d8c02217 	ldw	r3,136(sp)
    9cc8:	10005a26 	beq	r2,zero,9e34 <___vfiprintf_internal_r+0x938>
    9ccc:	d9002217 	ldw	r4,136(sp)
    9cd0:	18800117 	ldw	r2,4(r3)
    9cd4:	1d800017 	ldw	r22,0(r3)
    9cd8:	21000204 	addi	r4,r4,8
    9cdc:	d9002215 	stw	r4,136(sp)
    9ce0:	101b883a 	mov	r13,r2
    9ce4:	1001f416 	blt	r2,zero,a4b8 <___vfiprintf_internal_r+0xfbc>
    9ce8:	db801d83 	ldbu	r14,118(sp)
    9cec:	4827883a 	mov	r19,r9
    9cf0:	00800044 	movi	r2,1
    9cf4:	b348b03a 	or	r4,r22,r13
    9cf8:	003ee106 	br	9880 <__alt_mem_Flash_flash_data+0xf4009880>
    9cfc:	80c00007 	ldb	r3,0(r16)
    9d00:	80800044 	addi	r2,r16,1
    9d04:	1b42a326 	beq	r3,r13,a794 <___vfiprintf_internal_r+0x1298>
    9d08:	193ff404 	addi	r4,r3,-48
    9d0c:	1021883a 	mov	r16,r2
    9d10:	0013883a 	mov	r9,zero
    9d14:	313e5836 	bltu	r6,r4,9678 <__alt_mem_Flash_flash_data+0xf4009678>
    9d18:	80c00007 	ldb	r3,0(r16)
    9d1c:	4a4002a4 	muli	r9,r9,10
    9d20:	84000044 	addi	r16,r16,1
    9d24:	2253883a 	add	r9,r4,r9
    9d28:	193ff404 	addi	r4,r3,-48
    9d2c:	313ffa2e 	bgeu	r6,r4,9d18 <__alt_mem_Flash_flash_data+0xf4009d18>
    9d30:	483e510e 	bge	r9,zero,9678 <__alt_mem_Flash_flash_data+0xf4009678>
    9d34:	027fffc4 	movi	r9,-1
    9d38:	003e4f06 	br	9678 <__alt_mem_Flash_flash_data+0xf4009678>
    9d3c:	d9c01d85 	stb	r7,118(sp)
    9d40:	a880080c 	andi	r2,r21,32
    9d44:	10020826 	beq	r2,zero,a568 <___vfiprintf_internal_r+0x106c>
    9d48:	d8c02217 	ldw	r3,136(sp)
    9d4c:	d9002317 	ldw	r4,140(sp)
    9d50:	18800017 	ldw	r2,0(r3)
    9d54:	2007d7fa 	srai	r3,r4,31
    9d58:	d9002217 	ldw	r4,136(sp)
    9d5c:	10c00115 	stw	r3,4(r2)
    9d60:	21000104 	addi	r4,r4,4
    9d64:	d9002215 	stw	r4,136(sp)
    9d68:	d9002317 	ldw	r4,140(sp)
    9d6c:	11000015 	stw	r4,0(r2)
    9d70:	003e1606 	br	95cc <__alt_mem_Flash_flash_data+0xf40095cc>
    9d74:	d8802217 	ldw	r2,136(sp)
    9d78:	d8c02217 	ldw	r3,136(sp)
    9d7c:	15800017 	ldw	r22,0(r2)
    9d80:	13400117 	ldw	r13,4(r2)
    9d84:	18c00204 	addi	r3,r3,8
    9d88:	0005883a 	mov	r2,zero
    9d8c:	d8c02215 	stw	r3,136(sp)
    9d90:	b348b03a 	or	r4,r22,r13
    9d94:	003eb706 	br	9874 <__alt_mem_Flash_flash_data+0xf4009874>
    9d98:	38803fcc 	andi	r2,r7,255
    9d9c:	1080201c 	xori	r2,r2,128
    9da0:	10bfe004 	addi	r2,r2,-128
    9da4:	1001e31e 	bne	r2,zero,a534 <___vfiprintf_internal_r+0x1038>
    9da8:	8005883a 	mov	r2,r16
    9dac:	01c00804 	movi	r7,32
    9db0:	80c00007 	ldb	r3,0(r16)
    9db4:	003e2f06 	br	9674 <__alt_mem_Flash_flash_data+0xf4009674>
    9db8:	ad400054 	ori	r21,r21,1
    9dbc:	8005883a 	mov	r2,r16
    9dc0:	80c00007 	ldb	r3,0(r16)
    9dc4:	003e2b06 	br	9674 <__alt_mem_Flash_flash_data+0xf4009674>
    9dc8:	d8c02217 	ldw	r3,136(sp)
    9dcc:	1c800017 	ldw	r18,0(r3)
    9dd0:	18c00104 	addi	r3,r3,4
    9dd4:	90023816 	blt	r18,zero,a6b8 <___vfiprintf_internal_r+0x11bc>
    9dd8:	d8c02215 	stw	r3,136(sp)
    9ddc:	8005883a 	mov	r2,r16
    9de0:	80c00007 	ldb	r3,0(r16)
    9de4:	003e2306 	br	9674 <__alt_mem_Flash_flash_data+0xf4009674>
    9de8:	8005883a 	mov	r2,r16
    9dec:	01c00ac4 	movi	r7,43
    9df0:	80c00007 	ldb	r3,0(r16)
    9df4:	003e1f06 	br	9674 <__alt_mem_Flash_flash_data+0xf4009674>
    9df8:	d8c02217 	ldw	r3,136(sp)
    9dfc:	04400044 	movi	r17,1
    9e00:	d8001d85 	stb	zero,118(sp)
    9e04:	18800017 	ldw	r2,0(r3)
    9e08:	18c00104 	addi	r3,r3,4
    9e0c:	d8c02215 	stw	r3,136(sp)
    9e10:	d8801005 	stb	r2,64(sp)
    9e14:	8827883a 	mov	r19,r17
    9e18:	dd001004 	addi	r20,sp,64
    9e1c:	0013883a 	mov	r9,zero
    9e20:	003eb806 	br	9904 <__alt_mem_Flash_flash_data+0xf4009904>
    9e24:	d9c01d85 	stb	r7,118(sp)
    9e28:	a880080c 	andi	r2,r21,32
    9e2c:	d8c02217 	ldw	r3,136(sp)
    9e30:	103fa61e 	bne	r2,zero,9ccc <__alt_mem_Flash_flash_data+0xf4009ccc>
    9e34:	a880040c 	andi	r2,r21,16
    9e38:	1001dd26 	beq	r2,zero,a5b0 <___vfiprintf_internal_r+0x10b4>
    9e3c:	1d800017 	ldw	r22,0(r3)
    9e40:	d8802217 	ldw	r2,136(sp)
    9e44:	b01bd7fa 	srai	r13,r22,31
    9e48:	10800104 	addi	r2,r2,4
    9e4c:	d8802215 	stw	r2,136(sp)
    9e50:	6805883a 	mov	r2,r13
    9e54:	003fa306 	br	9ce4 <__alt_mem_Flash_flash_data+0xf4009ce4>
    9e58:	008000b4 	movhi	r2,2
    9e5c:	10ae0a04 	addi	r2,r2,-18392
    9e60:	d8802615 	stw	r2,152(sp)
    9e64:	d9c01d85 	stb	r7,118(sp)
    9e68:	a880080c 	andi	r2,r21,32
    9e6c:	10004726 	beq	r2,zero,9f8c <___vfiprintf_internal_r+0xa90>
    9e70:	d9002217 	ldw	r4,136(sp)
    9e74:	25800017 	ldw	r22,0(r4)
    9e78:	23400117 	ldw	r13,4(r4)
    9e7c:	21000204 	addi	r4,r4,8
    9e80:	d9002215 	stw	r4,136(sp)
    9e84:	a880004c 	andi	r2,r21,1
    9e88:	10014e26 	beq	r2,zero,a3c4 <___vfiprintf_internal_r+0xec8>
    9e8c:	b348b03a 	or	r4,r22,r13
    9e90:	20019c26 	beq	r4,zero,a504 <___vfiprintf_internal_r+0x1008>
    9e94:	00800c04 	movi	r2,48
    9e98:	d8801d05 	stb	r2,116(sp)
    9e9c:	d8c01d45 	stb	r3,117(sp)
    9ea0:	ad400094 	ori	r21,r21,2
    9ea4:	00800084 	movi	r2,2
    9ea8:	003e7206 	br	9874 <__alt_mem_Flash_flash_data+0xf4009874>
    9eac:	d8c02217 	ldw	r3,136(sp)
    9eb0:	d8001d85 	stb	zero,118(sp)
    9eb4:	1d000017 	ldw	r20,0(r3)
    9eb8:	1d800104 	addi	r22,r3,4
    9ebc:	a0021c26 	beq	r20,zero,a730 <___vfiprintf_internal_r+0x1234>
    9ec0:	a009883a 	mov	r4,r20
    9ec4:	48020016 	blt	r9,zero,a6c8 <___vfiprintf_internal_r+0x11cc>
    9ec8:	480d883a 	mov	r6,r9
    9ecc:	000b883a 	mov	r5,zero
    9ed0:	da002a15 	stw	r8,168(sp)
    9ed4:	da402b15 	stw	r9,172(sp)
    9ed8:	00077980 	call	7798 <memchr>
    9edc:	da002a17 	ldw	r8,168(sp)
    9ee0:	da402b17 	ldw	r9,172(sp)
    9ee4:	10022226 	beq	r2,zero,a770 <___vfiprintf_internal_r+0x1274>
    9ee8:	1527c83a 	sub	r19,r2,r20
    9eec:	4cc1c916 	blt	r9,r19,a614 <___vfiprintf_internal_r+0x1118>
    9ef0:	db801d83 	ldbu	r14,118(sp)
    9ef4:	dd802215 	stw	r22,136(sp)
    9ef8:	0013883a 	mov	r9,zero
    9efc:	003e7906 	br	98e4 <__alt_mem_Flash_flash_data+0xf40098e4>
    9f00:	ad401014 	ori	r21,r21,64
    9f04:	8005883a 	mov	r2,r16
    9f08:	80c00007 	ldb	r3,0(r16)
    9f0c:	003dd906 	br	9674 <__alt_mem_Flash_flash_data+0xf4009674>
    9f10:	80c00007 	ldb	r3,0(r16)
    9f14:	8005883a 	mov	r2,r16
    9f18:	1b01e326 	beq	r3,r12,a6a8 <___vfiprintf_internal_r+0x11ac>
    9f1c:	ad400414 	ori	r21,r21,16
    9f20:	003dd406 	br	9674 <__alt_mem_Flash_flash_data+0xf4009674>
    9f24:	d9002217 	ldw	r4,136(sp)
    9f28:	00800c04 	movi	r2,48
    9f2c:	d8801d05 	stb	r2,116(sp)
    9f30:	25800017 	ldw	r22,0(r4)
    9f34:	00801e04 	movi	r2,120
    9f38:	d8801d45 	stb	r2,117(sp)
    9f3c:	008000b4 	movhi	r2,2
    9f40:	21000104 	addi	r4,r4,4
    9f44:	10ae0f04 	addi	r2,r2,-18372
    9f48:	d9002215 	stw	r4,136(sp)
    9f4c:	d8802615 	stw	r2,152(sp)
    9f50:	001b883a 	mov	r13,zero
    9f54:	ad400094 	ori	r21,r21,2
    9f58:	00800084 	movi	r2,2
    9f5c:	b009883a 	mov	r4,r22
    9f60:	003e4406 	br	9874 <__alt_mem_Flash_flash_data+0xf4009874>
    9f64:	ad400814 	ori	r21,r21,32
    9f68:	8005883a 	mov	r2,r16
    9f6c:	80c00007 	ldb	r3,0(r16)
    9f70:	003dc006 	br	9674 <__alt_mem_Flash_flash_data+0xf4009674>
    9f74:	008000b4 	movhi	r2,2
    9f78:	10ae0f04 	addi	r2,r2,-18372
    9f7c:	d8802615 	stw	r2,152(sp)
    9f80:	d9c01d85 	stb	r7,118(sp)
    9f84:	a880080c 	andi	r2,r21,32
    9f88:	103fb91e 	bne	r2,zero,9e70 <__alt_mem_Flash_flash_data+0xf4009e70>
    9f8c:	a880040c 	andi	r2,r21,16
    9f90:	10010f1e 	bne	r2,zero,a3d0 <___vfiprintf_internal_r+0xed4>
    9f94:	a880100c 	andi	r2,r21,64
    9f98:	10010d26 	beq	r2,zero,a3d0 <___vfiprintf_internal_r+0xed4>
    9f9c:	d9002217 	ldw	r4,136(sp)
    9fa0:	001b883a 	mov	r13,zero
    9fa4:	2580000b 	ldhu	r22,0(r4)
    9fa8:	21000104 	addi	r4,r4,4
    9fac:	d9002215 	stw	r4,136(sp)
    9fb0:	003fb406 	br	9e84 <__alt_mem_Flash_flash_data+0xf4009e84>
    9fb4:	d9002217 	ldw	r4,136(sp)
    9fb8:	00800044 	movi	r2,1
    9fbc:	25800017 	ldw	r22,0(r4)
    9fc0:	23400117 	ldw	r13,4(r4)
    9fc4:	21000204 	addi	r4,r4,8
    9fc8:	d9002215 	stw	r4,136(sp)
    9fcc:	b348b03a 	or	r4,r22,r13
    9fd0:	003e2806 	br	9874 <__alt_mem_Flash_flash_data+0xf4009874>
    9fd4:	d9c01d85 	stb	r7,118(sp)
    9fd8:	1801ab26 	beq	r3,zero,a688 <___vfiprintf_internal_r+0x118c>
    9fdc:	04400044 	movi	r17,1
    9fe0:	d8c01005 	stb	r3,64(sp)
    9fe4:	d8001d85 	stb	zero,118(sp)
    9fe8:	8827883a 	mov	r19,r17
    9fec:	dd001004 	addi	r20,sp,64
    9ff0:	003f8a06 	br	9e1c <__alt_mem_Flash_flash_data+0xf4009e1c>
    9ff4:	d9002017 	ldw	r4,128(sp)
    9ff8:	d9402117 	ldw	r5,132(sp)
    9ffc:	d9801a04 	addi	r6,sp,104
    a000:	d9c02b15 	stw	r7,172(sp)
    a004:	dbc02a15 	stw	r15,168(sp)
    a008:	00093e80 	call	93e8 <__sprint_r.part.0>
    a00c:	d9c02b17 	ldw	r7,172(sp)
    a010:	dbc02a17 	ldw	r15,168(sp)
    a014:	1000631e 	bne	r2,zero,a1a4 <___vfiprintf_internal_r+0xca8>
    a018:	d9801b17 	ldw	r6,108(sp)
    a01c:	d8801c17 	ldw	r2,112(sp)
    a020:	d811883a 	mov	r8,sp
    a024:	31400044 	addi	r5,r6,1
    a028:	003e4d06 	br	9960 <__alt_mem_Flash_flash_data+0xf4009960>
    a02c:	d9401b17 	ldw	r5,108(sp)
    a030:	d8801c17 	ldw	r2,112(sp)
    a034:	29000044 	addi	r4,r5,1
    a038:	d8c01d87 	ldb	r3,118(sp)
    a03c:	183e6726 	beq	r3,zero,99dc <__alt_mem_Flash_flash_data+0xf40099dc>
    a040:	00c00044 	movi	r3,1
    a044:	d9401d84 	addi	r5,sp,118
    a048:	10c5883a 	add	r2,r2,r3
    a04c:	41400015 	stw	r5,0(r8)
    a050:	40c00115 	stw	r3,4(r8)
    a054:	d8801c15 	stw	r2,112(sp)
    a058:	d9001b15 	stw	r4,108(sp)
    a05c:	014001c4 	movi	r5,7
    a060:	2900ab16 	blt	r5,r4,a310 <___vfiprintf_internal_r+0xe14>
    a064:	200b883a 	mov	r5,r4
    a068:	42000204 	addi	r8,r8,8
    a06c:	21000044 	addi	r4,r4,1
    a070:	003e5a06 	br	99dc <__alt_mem_Flash_flash_data+0xf40099dc>
    a074:	d9002017 	ldw	r4,128(sp)
    a078:	d9402117 	ldw	r5,132(sp)
    a07c:	d9801a04 	addi	r6,sp,104
    a080:	d9c02b15 	stw	r7,172(sp)
    a084:	db402a15 	stw	r13,168(sp)
    a088:	00093e80 	call	93e8 <__sprint_r.part.0>
    a08c:	d9c02b17 	ldw	r7,172(sp)
    a090:	db402a17 	ldw	r13,168(sp)
    a094:	1000431e 	bne	r2,zero,a1a4 <___vfiprintf_internal_r+0xca8>
    a098:	d9401b17 	ldw	r5,108(sp)
    a09c:	d8801c17 	ldw	r2,112(sp)
    a0a0:	d811883a 	mov	r8,sp
    a0a4:	29000044 	addi	r4,r5,1
    a0a8:	003e6706 	br	9a48 <__alt_mem_Flash_flash_data+0xf4009a48>
    a0ac:	10803fcc 	andi	r2,r2,255
    a0b0:	00c00044 	movi	r3,1
    a0b4:	10fdfa1e 	bne	r2,r3,98a0 <__alt_mem_Flash_flash_data+0xf40098a0>
    a0b8:	6800021e 	bne	r13,zero,a0c4 <___vfiprintf_internal_r+0xbc8>
    a0bc:	00800244 	movi	r2,9
    a0c0:	1580222e 	bgeu	r2,r22,a14c <___vfiprintf_internal_r+0xc50>
    a0c4:	dc802415 	stw	r18,144(sp)
    a0c8:	dc002515 	stw	r16,148(sp)
    a0cc:	dc401a04 	addi	r17,sp,104
    a0d0:	b021883a 	mov	r16,r22
    a0d4:	4827883a 	mov	r19,r9
    a0d8:	4029883a 	mov	r20,r8
    a0dc:	702d883a 	mov	r22,r14
    a0e0:	6825883a 	mov	r18,r13
    a0e4:	8009883a 	mov	r4,r16
    a0e8:	900b883a 	mov	r5,r18
    a0ec:	01800284 	movi	r6,10
    a0f0:	000f883a 	mov	r7,zero
    a0f4:	000b7640 	call	b764 <__umoddi3>
    a0f8:	10800c04 	addi	r2,r2,48
    a0fc:	8c7fffc4 	addi	r17,r17,-1
    a100:	8009883a 	mov	r4,r16
    a104:	900b883a 	mov	r5,r18
    a108:	01800284 	movi	r6,10
    a10c:	000f883a 	mov	r7,zero
    a110:	88800005 	stb	r2,0(r17)
    a114:	000b1a40 	call	b1a4 <__udivdi3>
    a118:	1021883a 	mov	r16,r2
    a11c:	10c4b03a 	or	r2,r2,r3
    a120:	1825883a 	mov	r18,r3
    a124:	103fef1e 	bne	r2,zero,a0e4 <__alt_mem_Flash_flash_data+0xf400a0e4>
    a128:	dc802417 	ldw	r18,144(sp)
    a12c:	dc002517 	ldw	r16,148(sp)
    a130:	a011883a 	mov	r8,r20
    a134:	9813883a 	mov	r9,r19
    a138:	b01d883a 	mov	r14,r22
    a13c:	8829883a 	mov	r20,r17
    a140:	d8c01e17 	ldw	r3,120(sp)
    a144:	1d27c83a 	sub	r19,r3,r20
    a148:	003de606 	br	98e4 <__alt_mem_Flash_flash_data+0xf40098e4>
    a14c:	b5800c04 	addi	r22,r22,48
    a150:	dd8019c5 	stb	r22,103(sp)
    a154:	dcc02717 	ldw	r19,156(sp)
    a158:	dd0019c4 	addi	r20,sp,103
    a15c:	003de106 	br	98e4 <__alt_mem_Flash_flash_data+0xf40098e4>
    a160:	d9002017 	ldw	r4,128(sp)
    a164:	d9402117 	ldw	r5,132(sp)
    a168:	d9801a04 	addi	r6,sp,104
    a16c:	00093e80 	call	93e8 <__sprint_r.part.0>
    a170:	10000c1e 	bne	r2,zero,a1a4 <___vfiprintf_internal_r+0xca8>
    a174:	d8801c17 	ldw	r2,112(sp)
    a178:	8c80010e 	bge	r17,r18,a180 <___vfiprintf_internal_r+0xc84>
    a17c:	9023883a 	mov	r17,r18
    a180:	d8c02317 	ldw	r3,140(sp)
    a184:	1c47883a 	add	r3,r3,r17
    a188:	d8c02315 	stw	r3,140(sp)
    a18c:	103e7e26 	beq	r2,zero,9b88 <__alt_mem_Flash_flash_data+0xf4009b88>
    a190:	d9002017 	ldw	r4,128(sp)
    a194:	d9402117 	ldw	r5,132(sp)
    a198:	d9801a04 	addi	r6,sp,104
    a19c:	00093e80 	call	93e8 <__sprint_r.part.0>
    a1a0:	103e7926 	beq	r2,zero,9b88 <__alt_mem_Flash_flash_data+0xf4009b88>
    a1a4:	dd402117 	ldw	r21,132(sp)
    a1a8:	a880030b 	ldhu	r2,12(r21)
    a1ac:	1080100c 	andi	r2,r2,64
    a1b0:	103e881e 	bne	r2,zero,9bd4 <__alt_mem_Flash_flash_data+0xf4009bd4>
    a1b4:	d8802317 	ldw	r2,140(sp)
    a1b8:	003e8706 	br	9bd8 <__alt_mem_Flash_flash_data+0xf4009bd8>
    a1bc:	d9402117 	ldw	r5,132(sp)
    a1c0:	b009883a 	mov	r4,r22
    a1c4:	d9801a04 	addi	r6,sp,104
    a1c8:	00093e80 	call	93e8 <__sprint_r.part.0>
    a1cc:	103ff51e 	bne	r2,zero,a1a4 <__alt_mem_Flash_flash_data+0xf400a1a4>
    a1d0:	d9001b17 	ldw	r4,108(sp)
    a1d4:	d8801c17 	ldw	r2,112(sp)
    a1d8:	d811883a 	mov	r8,sp
    a1dc:	21400044 	addi	r5,r4,1
    a1e0:	003e4d06 	br	9b18 <__alt_mem_Flash_flash_data+0xf4009b18>
    a1e4:	1000aa1e 	bne	r2,zero,a490 <___vfiprintf_internal_r+0xf94>
    a1e8:	00c00044 	movi	r3,1
    a1ec:	9805883a 	mov	r2,r19
    a1f0:	dd000015 	stw	r20,0(sp)
    a1f4:	dcc00115 	stw	r19,4(sp)
    a1f8:	dcc01c15 	stw	r19,112(sp)
    a1fc:	d8c01b15 	stw	r3,108(sp)
    a200:	d811883a 	mov	r8,sp
    a204:	42000204 	addi	r8,r8,8
    a208:	aac0010c 	andi	r11,r21,4
    a20c:	583fda26 	beq	r11,zero,a178 <__alt_mem_Flash_flash_data+0xf400a178>
    a210:	9467c83a 	sub	r19,r18,r17
    a214:	04fe3316 	blt	zero,r19,9ae4 <__alt_mem_Flash_flash_data+0xf4009ae4>
    a218:	003fd706 	br	a178 <__alt_mem_Flash_flash_data+0xf400a178>
    a21c:	946dc83a 	sub	r22,r18,r17
    a220:	05bdfd0e 	bge	zero,r22,9a18 <__alt_mem_Flash_flash_data+0xf4009a18>
    a224:	00c000b4 	movhi	r3,2
    a228:	18ee7004 	addi	r3,r3,-17984
    a22c:	01c00404 	movi	r7,16
    a230:	d8c02415 	stw	r3,144(sp)
    a234:	3d81530e 	bge	r7,r22,a784 <___vfiprintf_internal_r+0x1288>
    a238:	8007883a 	mov	r3,r16
    a23c:	034001c4 	movi	r13,7
    a240:	b021883a 	mov	r16,r22
    a244:	da402515 	stw	r9,148(sp)
    a248:	182d883a 	mov	r22,r3
    a24c:	00000506 	br	a264 <___vfiprintf_internal_r+0xd68>
    a250:	29800084 	addi	r6,r5,2
    a254:	42000204 	addi	r8,r8,8
    a258:	180b883a 	mov	r5,r3
    a25c:	843ffc04 	addi	r16,r16,-16
    a260:	3c000d0e 	bge	r7,r16,a298 <___vfiprintf_internal_r+0xd9c>
    a264:	10800404 	addi	r2,r2,16
    a268:	28c00044 	addi	r3,r5,1
    a26c:	45c00015 	stw	r23,0(r8)
    a270:	41c00115 	stw	r7,4(r8)
    a274:	d8801c15 	stw	r2,112(sp)
    a278:	d8c01b15 	stw	r3,108(sp)
    a27c:	68fff40e 	bge	r13,r3,a250 <__alt_mem_Flash_flash_data+0xf400a250>
    a280:	1000151e 	bne	r2,zero,a2d8 <___vfiprintf_internal_r+0xddc>
    a284:	843ffc04 	addi	r16,r16,-16
    a288:	01800044 	movi	r6,1
    a28c:	000b883a 	mov	r5,zero
    a290:	d811883a 	mov	r8,sp
    a294:	3c3ff316 	blt	r7,r16,a264 <__alt_mem_Flash_flash_data+0xf400a264>
    a298:	da402517 	ldw	r9,148(sp)
    a29c:	b007883a 	mov	r3,r22
    a2a0:	802d883a 	mov	r22,r16
    a2a4:	1821883a 	mov	r16,r3
    a2a8:	d8c02417 	ldw	r3,144(sp)
    a2ac:	1585883a 	add	r2,r2,r22
    a2b0:	45800115 	stw	r22,4(r8)
    a2b4:	40c00015 	stw	r3,0(r8)
    a2b8:	d8801c15 	stw	r2,112(sp)
    a2bc:	d9801b15 	stw	r6,108(sp)
    a2c0:	00c001c4 	movi	r3,7
    a2c4:	19806d16 	blt	r3,r6,a47c <___vfiprintf_internal_r+0xf80>
    a2c8:	42000204 	addi	r8,r8,8
    a2cc:	31000044 	addi	r4,r6,1
    a2d0:	300b883a 	mov	r5,r6
    a2d4:	003dd006 	br	9a18 <__alt_mem_Flash_flash_data+0xf4009a18>
    a2d8:	d9002017 	ldw	r4,128(sp)
    a2dc:	d9402117 	ldw	r5,132(sp)
    a2e0:	d9801a04 	addi	r6,sp,104
    a2e4:	d9c02b15 	stw	r7,172(sp)
    a2e8:	db402a15 	stw	r13,168(sp)
    a2ec:	00093e80 	call	93e8 <__sprint_r.part.0>
    a2f0:	d9c02b17 	ldw	r7,172(sp)
    a2f4:	db402a17 	ldw	r13,168(sp)
    a2f8:	103faa1e 	bne	r2,zero,a1a4 <__alt_mem_Flash_flash_data+0xf400a1a4>
    a2fc:	d9401b17 	ldw	r5,108(sp)
    a300:	d8801c17 	ldw	r2,112(sp)
    a304:	d811883a 	mov	r8,sp
    a308:	29800044 	addi	r6,r5,1
    a30c:	003fd306 	br	a25c <__alt_mem_Flash_flash_data+0xf400a25c>
    a310:	1000401e 	bne	r2,zero,a414 <___vfiprintf_internal_r+0xf18>
    a314:	68003b26 	beq	r13,zero,a404 <___vfiprintf_internal_r+0xf08>
    a318:	d9001d04 	addi	r4,sp,116
    a31c:	00800084 	movi	r2,2
    a320:	d9000015 	stw	r4,0(sp)
    a324:	d8800115 	stw	r2,4(sp)
    a328:	1809883a 	mov	r4,r3
    a32c:	d811883a 	mov	r8,sp
    a330:	003db406 	br	9a04 <__alt_mem_Flash_flash_data+0xf4009a04>
    a334:	1000451e 	bne	r2,zero,a44c <___vfiprintf_internal_r+0xf50>
    a338:	01000044 	movi	r4,1
    a33c:	000b883a 	mov	r5,zero
    a340:	d811883a 	mov	r8,sp
    a344:	003db206 	br	9a10 <__alt_mem_Flash_flash_data+0xf4009a10>
    a348:	10803fcc 	andi	r2,r2,255
    a34c:	1000071e 	bne	r2,zero,a36c <___vfiprintf_internal_r+0xe70>
    a350:	a880004c 	andi	r2,r21,1
    a354:	10000526 	beq	r2,zero,a36c <___vfiprintf_internal_r+0xe70>
    a358:	00800c04 	movi	r2,48
    a35c:	d88019c5 	stb	r2,103(sp)
    a360:	dcc02717 	ldw	r19,156(sp)
    a364:	dd0019c4 	addi	r20,sp,103
    a368:	003d5e06 	br	98e4 <__alt_mem_Flash_flash_data+0xf40098e4>
    a36c:	dd001a04 	addi	r20,sp,104
    a370:	003d5c06 	br	98e4 <__alt_mem_Flash_flash_data+0xf40098e4>
    a374:	1000971e 	bne	r2,zero,a5d4 <___vfiprintf_internal_r+0x10d8>
    a378:	d8c01d87 	ldb	r3,118(sp)
    a37c:	18005826 	beq	r3,zero,a4e0 <___vfiprintf_internal_r+0xfe4>
    a380:	00800044 	movi	r2,1
    a384:	d8c01d84 	addi	r3,sp,118
    a388:	1009883a 	mov	r4,r2
    a38c:	d8c00015 	stw	r3,0(sp)
    a390:	d8800115 	stw	r2,4(sp)
    a394:	d811883a 	mov	r8,sp
    a398:	003f3206 	br	a064 <__alt_mem_Flash_flash_data+0xf400a064>
    a39c:	8023883a 	mov	r17,r16
    a3a0:	003ca706 	br	9640 <__alt_mem_Flash_flash_data+0xf4009640>
    a3a4:	d9002017 	ldw	r4,128(sp)
    a3a8:	d9402117 	ldw	r5,132(sp)
    a3ac:	d9801a04 	addi	r6,sp,104
    a3b0:	00093e80 	call	93e8 <__sprint_r.part.0>
    a3b4:	103f7b1e 	bne	r2,zero,a1a4 <__alt_mem_Flash_flash_data+0xf400a1a4>
    a3b8:	d8801c17 	ldw	r2,112(sp)
    a3bc:	d811883a 	mov	r8,sp
    a3c0:	003f9106 	br	a208 <__alt_mem_Flash_flash_data+0xf400a208>
    a3c4:	00800084 	movi	r2,2
    a3c8:	b348b03a 	or	r4,r22,r13
    a3cc:	003d2906 	br	9874 <__alt_mem_Flash_flash_data+0xf4009874>
    a3d0:	d8802217 	ldw	r2,136(sp)
    a3d4:	001b883a 	mov	r13,zero
    a3d8:	15800017 	ldw	r22,0(r2)
    a3dc:	10800104 	addi	r2,r2,4
    a3e0:	d8802215 	stw	r2,136(sp)
    a3e4:	003ea706 	br	9e84 <__alt_mem_Flash_flash_data+0xf4009e84>
    a3e8:	d9002017 	ldw	r4,128(sp)
    a3ec:	d9402117 	ldw	r5,132(sp)
    a3f0:	d9801a04 	addi	r6,sp,104
    a3f4:	00093e80 	call	93e8 <__sprint_r.part.0>
    a3f8:	103f6a1e 	bne	r2,zero,a1a4 <__alt_mem_Flash_flash_data+0xf400a1a4>
    a3fc:	d811883a 	mov	r8,sp
    a400:	003cff06 	br	9800 <__alt_mem_Flash_flash_data+0xf4009800>
    a404:	000b883a 	mov	r5,zero
    a408:	1809883a 	mov	r4,r3
    a40c:	d811883a 	mov	r8,sp
    a410:	003d7f06 	br	9a10 <__alt_mem_Flash_flash_data+0xf4009a10>
    a414:	d9002017 	ldw	r4,128(sp)
    a418:	d9402117 	ldw	r5,132(sp)
    a41c:	d9801a04 	addi	r6,sp,104
    a420:	da402b15 	stw	r9,172(sp)
    a424:	db402a15 	stw	r13,168(sp)
    a428:	00093e80 	call	93e8 <__sprint_r.part.0>
    a42c:	da402b17 	ldw	r9,172(sp)
    a430:	db402a17 	ldw	r13,168(sp)
    a434:	103f5b1e 	bne	r2,zero,a1a4 <__alt_mem_Flash_flash_data+0xf400a1a4>
    a438:	d9401b17 	ldw	r5,108(sp)
    a43c:	d8801c17 	ldw	r2,112(sp)
    a440:	d811883a 	mov	r8,sp
    a444:	29000044 	addi	r4,r5,1
    a448:	003d6406 	br	99dc <__alt_mem_Flash_flash_data+0xf40099dc>
    a44c:	d9002017 	ldw	r4,128(sp)
    a450:	d9402117 	ldw	r5,132(sp)
    a454:	d9801a04 	addi	r6,sp,104
    a458:	da402b15 	stw	r9,172(sp)
    a45c:	00093e80 	call	93e8 <__sprint_r.part.0>
    a460:	da402b17 	ldw	r9,172(sp)
    a464:	103f4f1e 	bne	r2,zero,a1a4 <__alt_mem_Flash_flash_data+0xf400a1a4>
    a468:	d9401b17 	ldw	r5,108(sp)
    a46c:	d8801c17 	ldw	r2,112(sp)
    a470:	d811883a 	mov	r8,sp
    a474:	29000044 	addi	r4,r5,1
    a478:	003d6506 	br	9a10 <__alt_mem_Flash_flash_data+0xf4009a10>
    a47c:	10009a1e 	bne	r2,zero,a6e8 <___vfiprintf_internal_r+0x11ec>
    a480:	01000044 	movi	r4,1
    a484:	000b883a 	mov	r5,zero
    a488:	d811883a 	mov	r8,sp
    a48c:	003d6206 	br	9a18 <__alt_mem_Flash_flash_data+0xf4009a18>
    a490:	d9002017 	ldw	r4,128(sp)
    a494:	d9402117 	ldw	r5,132(sp)
    a498:	d9801a04 	addi	r6,sp,104
    a49c:	00093e80 	call	93e8 <__sprint_r.part.0>
    a4a0:	103f401e 	bne	r2,zero,a1a4 <__alt_mem_Flash_flash_data+0xf400a1a4>
    a4a4:	d9001b17 	ldw	r4,108(sp)
    a4a8:	d8801c17 	ldw	r2,112(sp)
    a4ac:	d811883a 	mov	r8,sp
    a4b0:	21000044 	addi	r4,r4,1
    a4b4:	003d7d06 	br	9aac <__alt_mem_Flash_flash_data+0xf4009aac>
    a4b8:	05adc83a 	sub	r22,zero,r22
    a4bc:	b004c03a 	cmpne	r2,r22,zero
    a4c0:	035bc83a 	sub	r13,zero,r13
    a4c4:	689bc83a 	sub	r13,r13,r2
    a4c8:	03800b44 	movi	r14,45
    a4cc:	db801d85 	stb	r14,118(sp)
    a4d0:	4827883a 	mov	r19,r9
    a4d4:	00800044 	movi	r2,1
    a4d8:	b348b03a 	or	r4,r22,r13
    a4dc:	003ce806 	br	9880 <__alt_mem_Flash_flash_data+0xf4009880>
    a4e0:	000b883a 	mov	r5,zero
    a4e4:	01000044 	movi	r4,1
    a4e8:	d811883a 	mov	r8,sp
    a4ec:	683d4826 	beq	r13,zero,9a10 <__alt_mem_Flash_flash_data+0xf4009a10>
    a4f0:	00800084 	movi	r2,2
    a4f4:	d8c01d04 	addi	r3,sp,116
    a4f8:	d8c00015 	stw	r3,0(sp)
    a4fc:	d8800115 	stw	r2,4(sp)
    a500:	003d4006 	br	9a04 <__alt_mem_Flash_flash_data+0xf4009a04>
    a504:	00800084 	movi	r2,2
    a508:	003cda06 	br	9874 <__alt_mem_Flash_flash_data+0xf4009874>
    a50c:	a880100c 	andi	r2,r21,64
    a510:	10004226 	beq	r2,zero,a61c <___vfiprintf_internal_r+0x1120>
    a514:	d8802217 	ldw	r2,136(sp)
    a518:	001b883a 	mov	r13,zero
    a51c:	1580000b 	ldhu	r22,0(r2)
    a520:	10800104 	addi	r2,r2,4
    a524:	d8802215 	stw	r2,136(sp)
    a528:	b009883a 	mov	r4,r22
    a52c:	0005883a 	mov	r2,zero
    a530:	003cd006 	br	9874 <__alt_mem_Flash_flash_data+0xf4009874>
    a534:	80c00007 	ldb	r3,0(r16)
    a538:	8005883a 	mov	r2,r16
    a53c:	003c4d06 	br	9674 <__alt_mem_Flash_flash_data+0xf4009674>
    a540:	a880100c 	andi	r2,r21,64
    a544:	10004426 	beq	r2,zero,a658 <___vfiprintf_internal_r+0x115c>
    a548:	d8c02217 	ldw	r3,136(sp)
    a54c:	001b883a 	mov	r13,zero
    a550:	00800044 	movi	r2,1
    a554:	1d80000b 	ldhu	r22,0(r3)
    a558:	18c00104 	addi	r3,r3,4
    a55c:	d8c02215 	stw	r3,136(sp)
    a560:	b009883a 	mov	r4,r22
    a564:	003cc306 	br	9874 <__alt_mem_Flash_flash_data+0xf4009874>
    a568:	a880040c 	andi	r2,r21,16
    a56c:	1000091e 	bne	r2,zero,a594 <___vfiprintf_internal_r+0x1098>
    a570:	aac0100c 	andi	r11,r21,64
    a574:	58000726 	beq	r11,zero,a594 <___vfiprintf_internal_r+0x1098>
    a578:	d8c02217 	ldw	r3,136(sp)
    a57c:	d9002317 	ldw	r4,140(sp)
    a580:	18800017 	ldw	r2,0(r3)
    a584:	18c00104 	addi	r3,r3,4
    a588:	d8c02215 	stw	r3,136(sp)
    a58c:	1100000d 	sth	r4,0(r2)
    a590:	003c0e06 	br	95cc <__alt_mem_Flash_flash_data+0xf40095cc>
    a594:	d8c02217 	ldw	r3,136(sp)
    a598:	d9002317 	ldw	r4,140(sp)
    a59c:	18800017 	ldw	r2,0(r3)
    a5a0:	18c00104 	addi	r3,r3,4
    a5a4:	d8c02215 	stw	r3,136(sp)
    a5a8:	11000015 	stw	r4,0(r2)
    a5ac:	003c0706 	br	95cc <__alt_mem_Flash_flash_data+0xf40095cc>
    a5b0:	a880100c 	andi	r2,r21,64
    a5b4:	10002126 	beq	r2,zero,a63c <___vfiprintf_internal_r+0x1140>
    a5b8:	1d80000f 	ldh	r22,0(r3)
    a5bc:	d8c02217 	ldw	r3,136(sp)
    a5c0:	b01bd7fa 	srai	r13,r22,31
    a5c4:	18c00104 	addi	r3,r3,4
    a5c8:	d8c02215 	stw	r3,136(sp)
    a5cc:	6805883a 	mov	r2,r13
    a5d0:	003dc406 	br	9ce4 <__alt_mem_Flash_flash_data+0xf4009ce4>
    a5d4:	d9002017 	ldw	r4,128(sp)
    a5d8:	d9402117 	ldw	r5,132(sp)
    a5dc:	d9801a04 	addi	r6,sp,104
    a5e0:	da402b15 	stw	r9,172(sp)
    a5e4:	db402a15 	stw	r13,168(sp)
    a5e8:	00093e80 	call	93e8 <__sprint_r.part.0>
    a5ec:	da402b17 	ldw	r9,172(sp)
    a5f0:	db402a17 	ldw	r13,168(sp)
    a5f4:	103eeb1e 	bne	r2,zero,a1a4 <__alt_mem_Flash_flash_data+0xf400a1a4>
    a5f8:	d9401b17 	ldw	r5,108(sp)
    a5fc:	d8801c17 	ldw	r2,112(sp)
    a600:	d811883a 	mov	r8,sp
    a604:	29000044 	addi	r4,r5,1
    a608:	003e8b06 	br	a038 <__alt_mem_Flash_flash_data+0xf400a038>
    a60c:	9023883a 	mov	r17,r18
    a610:	003d5a06 	br	9b7c <__alt_mem_Flash_flash_data+0xf4009b7c>
    a614:	4827883a 	mov	r19,r9
    a618:	003e3506 	br	9ef0 <__alt_mem_Flash_flash_data+0xf4009ef0>
    a61c:	d8c02217 	ldw	r3,136(sp)
    a620:	001b883a 	mov	r13,zero
    a624:	0005883a 	mov	r2,zero
    a628:	1d800017 	ldw	r22,0(r3)
    a62c:	18c00104 	addi	r3,r3,4
    a630:	d8c02215 	stw	r3,136(sp)
    a634:	b009883a 	mov	r4,r22
    a638:	003c8e06 	br	9874 <__alt_mem_Flash_flash_data+0xf4009874>
    a63c:	1d800017 	ldw	r22,0(r3)
    a640:	d9002217 	ldw	r4,136(sp)
    a644:	b01bd7fa 	srai	r13,r22,31
    a648:	21000104 	addi	r4,r4,4
    a64c:	d9002215 	stw	r4,136(sp)
    a650:	6805883a 	mov	r2,r13
    a654:	003da306 	br	9ce4 <__alt_mem_Flash_flash_data+0xf4009ce4>
    a658:	d9002217 	ldw	r4,136(sp)
    a65c:	001b883a 	mov	r13,zero
    a660:	00800044 	movi	r2,1
    a664:	25800017 	ldw	r22,0(r4)
    a668:	21000104 	addi	r4,r4,4
    a66c:	d9002215 	stw	r4,136(sp)
    a670:	b009883a 	mov	r4,r22
    a674:	003c7f06 	br	9874 <__alt_mem_Flash_flash_data+0xf4009874>
    a678:	00c000b4 	movhi	r3,2
    a67c:	18ee7004 	addi	r3,r3,-17984
    a680:	d8c02415 	stw	r3,144(sp)
    a684:	003cff06 	br	9a84 <__alt_mem_Flash_flash_data+0xf4009a84>
    a688:	d8801c17 	ldw	r2,112(sp)
    a68c:	dd402117 	ldw	r21,132(sp)
    a690:	103ec526 	beq	r2,zero,a1a8 <__alt_mem_Flash_flash_data+0xf400a1a8>
    a694:	d9002017 	ldw	r4,128(sp)
    a698:	a80b883a 	mov	r5,r21
    a69c:	d9801a04 	addi	r6,sp,104
    a6a0:	00093e80 	call	93e8 <__sprint_r.part.0>
    a6a4:	003ec006 	br	a1a8 <__alt_mem_Flash_flash_data+0xf400a1a8>
    a6a8:	80800044 	addi	r2,r16,1
    a6ac:	ad400814 	ori	r21,r21,32
    a6b0:	80c00047 	ldb	r3,1(r16)
    a6b4:	003bef06 	br	9674 <__alt_mem_Flash_flash_data+0xf4009674>
    a6b8:	04a5c83a 	sub	r18,zero,r18
    a6bc:	8005883a 	mov	r2,r16
    a6c0:	d8c02215 	stw	r3,136(sp)
    a6c4:	003d5306 	br	9c14 <__alt_mem_Flash_flash_data+0xf4009c14>
    a6c8:	da002a15 	stw	r8,168(sp)
    a6cc:	00021840 	call	2184 <strlen>
    a6d0:	1027883a 	mov	r19,r2
    a6d4:	db801d83 	ldbu	r14,118(sp)
    a6d8:	dd802215 	stw	r22,136(sp)
    a6dc:	0013883a 	mov	r9,zero
    a6e0:	da002a17 	ldw	r8,168(sp)
    a6e4:	003c7f06 	br	98e4 <__alt_mem_Flash_flash_data+0xf40098e4>
    a6e8:	d9002017 	ldw	r4,128(sp)
    a6ec:	d9402117 	ldw	r5,132(sp)
    a6f0:	d9801a04 	addi	r6,sp,104
    a6f4:	da402b15 	stw	r9,172(sp)
    a6f8:	00093e80 	call	93e8 <__sprint_r.part.0>
    a6fc:	da402b17 	ldw	r9,172(sp)
    a700:	103ea81e 	bne	r2,zero,a1a4 <__alt_mem_Flash_flash_data+0xf400a1a4>
    a704:	d9401b17 	ldw	r5,108(sp)
    a708:	d8801c17 	ldw	r2,112(sp)
    a70c:	d811883a 	mov	r8,sp
    a710:	29000044 	addi	r4,r5,1
    a714:	003cc006 	br	9a18 <__alt_mem_Flash_flash_data+0xf4009a18>
    a718:	d9401b17 	ldw	r5,108(sp)
    a71c:	010000b4 	movhi	r4,2
    a720:	212e7404 	addi	r4,r4,-17968
    a724:	d9002415 	stw	r4,144(sp)
    a728:	29400044 	addi	r5,r5,1
    a72c:	003c9f06 	br	99ac <__alt_mem_Flash_flash_data+0xf40099ac>
    a730:	00800184 	movi	r2,6
    a734:	1240012e 	bgeu	r2,r9,a73c <___vfiprintf_internal_r+0x1240>
    a738:	1013883a 	mov	r9,r2
    a73c:	4827883a 	mov	r19,r9
    a740:	4823883a 	mov	r17,r9
    a744:	48001116 	blt	r9,zero,a78c <___vfiprintf_internal_r+0x1290>
    a748:	050000b4 	movhi	r20,2
    a74c:	dd802215 	stw	r22,136(sp)
    a750:	a52e1404 	addi	r20,r20,-18352
    a754:	003db106 	br	9e1c <__alt_mem_Flash_flash_data+0xf4009e1c>
    a758:	d9401b17 	ldw	r5,108(sp)
    a75c:	010000b4 	movhi	r4,2
    a760:	212e7404 	addi	r4,r4,-17968
    a764:	d9002415 	stw	r4,144(sp)
    a768:	29400044 	addi	r5,r5,1
    a76c:	003cf906 	br	9b54 <__alt_mem_Flash_flash_data+0xf4009b54>
    a770:	4827883a 	mov	r19,r9
    a774:	db801d83 	ldbu	r14,118(sp)
    a778:	dd802215 	stw	r22,136(sp)
    a77c:	0013883a 	mov	r9,zero
    a780:	003c5806 	br	98e4 <__alt_mem_Flash_flash_data+0xf40098e4>
    a784:	200d883a 	mov	r6,r4
    a788:	003ec706 	br	a2a8 <__alt_mem_Flash_flash_data+0xf400a2a8>
    a78c:	0023883a 	mov	r17,zero
    a790:	003fed06 	br	a748 <__alt_mem_Flash_flash_data+0xf400a748>
    a794:	d9002217 	ldw	r4,136(sp)
    a798:	22400017 	ldw	r9,0(r4)
    a79c:	20c00104 	addi	r3,r4,4
    a7a0:	d8c02215 	stw	r3,136(sp)
    a7a4:	483fc20e 	bge	r9,zero,a6b0 <__alt_mem_Flash_flash_data+0xf400a6b0>
    a7a8:	027fffc4 	movi	r9,-1
    a7ac:	80c00047 	ldb	r3,1(r16)
    a7b0:	003bb006 	br	9674 <__alt_mem_Flash_flash_data+0xf4009674>
    a7b4:	8c80010e 	bge	r17,r18,a7bc <___vfiprintf_internal_r+0x12c0>
    a7b8:	9023883a 	mov	r17,r18
    a7bc:	d8802317 	ldw	r2,140(sp)
    a7c0:	1445883a 	add	r2,r2,r17
    a7c4:	d8802315 	stw	r2,140(sp)
    a7c8:	003cef06 	br	9b88 <__alt_mem_Flash_flash_data+0xf4009b88>

0000a7cc <__vfiprintf_internal>:
    a7cc:	2007883a 	mov	r3,r4
    a7d0:	010000b4 	movhi	r4,2
    a7d4:	21370f04 	addi	r4,r4,-9156
    a7d8:	21000017 	ldw	r4,0(r4)
    a7dc:	2805883a 	mov	r2,r5
    a7e0:	300f883a 	mov	r7,r6
    a7e4:	180b883a 	mov	r5,r3
    a7e8:	100d883a 	mov	r6,r2
    a7ec:	00094fc1 	jmpi	94fc <___vfiprintf_internal_r>

0000a7f0 <__sbprintf>:
    a7f0:	2880030b 	ldhu	r2,12(r5)
    a7f4:	2ac01917 	ldw	r11,100(r5)
    a7f8:	2a80038b 	ldhu	r10,14(r5)
    a7fc:	2a400717 	ldw	r9,28(r5)
    a800:	2a000917 	ldw	r8,36(r5)
    a804:	defee204 	addi	sp,sp,-1144
    a808:	00c10004 	movi	r3,1024
    a80c:	dc011a15 	stw	r16,1128(sp)
    a810:	10bfff4c 	andi	r2,r2,65533
    a814:	2821883a 	mov	r16,r5
    a818:	d8cb883a 	add	r5,sp,r3
    a81c:	dc811c15 	stw	r18,1136(sp)
    a820:	dc411b15 	stw	r17,1132(sp)
    a824:	dfc11d15 	stw	ra,1140(sp)
    a828:	2025883a 	mov	r18,r4
    a82c:	d881030d 	sth	r2,1036(sp)
    a830:	dac11915 	stw	r11,1124(sp)
    a834:	da81038d 	sth	r10,1038(sp)
    a838:	da410715 	stw	r9,1052(sp)
    a83c:	da010915 	stw	r8,1060(sp)
    a840:	dec10015 	stw	sp,1024(sp)
    a844:	dec10415 	stw	sp,1040(sp)
    a848:	d8c10215 	stw	r3,1032(sp)
    a84c:	d8c10515 	stw	r3,1044(sp)
    a850:	d8010615 	stw	zero,1048(sp)
    a854:	00094fc0 	call	94fc <___vfiprintf_internal_r>
    a858:	1023883a 	mov	r17,r2
    a85c:	10000416 	blt	r2,zero,a870 <__sbprintf+0x80>
    a860:	9009883a 	mov	r4,r18
    a864:	d9410004 	addi	r5,sp,1024
    a868:	0005ed00 	call	5ed0 <_fflush_r>
    a86c:	10000d1e 	bne	r2,zero,a8a4 <__sbprintf+0xb4>
    a870:	d8c1030b 	ldhu	r3,1036(sp)
    a874:	18c0100c 	andi	r3,r3,64
    a878:	18000326 	beq	r3,zero,a888 <__sbprintf+0x98>
    a87c:	8080030b 	ldhu	r2,12(r16)
    a880:	10801014 	ori	r2,r2,64
    a884:	8080030d 	sth	r2,12(r16)
    a888:	8805883a 	mov	r2,r17
    a88c:	dfc11d17 	ldw	ra,1140(sp)
    a890:	dc811c17 	ldw	r18,1136(sp)
    a894:	dc411b17 	ldw	r17,1132(sp)
    a898:	dc011a17 	ldw	r16,1128(sp)
    a89c:	dec11e04 	addi	sp,sp,1144
    a8a0:	f800283a 	ret
    a8a4:	047fffc4 	movi	r17,-1
    a8a8:	003ff106 	br	a870 <__alt_mem_Flash_flash_data+0xf400a870>

0000a8ac <_write_r>:
    a8ac:	defffd04 	addi	sp,sp,-12
    a8b0:	dc000015 	stw	r16,0(sp)
    a8b4:	040000b4 	movhi	r16,2
    a8b8:	dc400115 	stw	r17,4(sp)
    a8bc:	843f2504 	addi	r16,r16,-876
    a8c0:	2023883a 	mov	r17,r4
    a8c4:	2809883a 	mov	r4,r5
    a8c8:	300b883a 	mov	r5,r6
    a8cc:	380d883a 	mov	r6,r7
    a8d0:	dfc00215 	stw	ra,8(sp)
    a8d4:	80000015 	stw	zero,0(r16)
    a8d8:	000ece80 	call	ece8 <write>
    a8dc:	00ffffc4 	movi	r3,-1
    a8e0:	10c00526 	beq	r2,r3,a8f8 <_write_r+0x4c>
    a8e4:	dfc00217 	ldw	ra,8(sp)
    a8e8:	dc400117 	ldw	r17,4(sp)
    a8ec:	dc000017 	ldw	r16,0(sp)
    a8f0:	dec00304 	addi	sp,sp,12
    a8f4:	f800283a 	ret
    a8f8:	80c00017 	ldw	r3,0(r16)
    a8fc:	183ff926 	beq	r3,zero,a8e4 <__alt_mem_Flash_flash_data+0xf400a8e4>
    a900:	88c00015 	stw	r3,0(r17)
    a904:	003ff706 	br	a8e4 <__alt_mem_Flash_flash_data+0xf400a8e4>

0000a908 <_close_r>:
    a908:	defffd04 	addi	sp,sp,-12
    a90c:	dc000015 	stw	r16,0(sp)
    a910:	040000b4 	movhi	r16,2
    a914:	dc400115 	stw	r17,4(sp)
    a918:	843f2504 	addi	r16,r16,-876
    a91c:	2023883a 	mov	r17,r4
    a920:	2809883a 	mov	r4,r5
    a924:	dfc00215 	stw	ra,8(sp)
    a928:	80000015 	stw	zero,0(r16)
    a92c:	000e4700 	call	e470 <close>
    a930:	00ffffc4 	movi	r3,-1
    a934:	10c00526 	beq	r2,r3,a94c <_close_r+0x44>
    a938:	dfc00217 	ldw	ra,8(sp)
    a93c:	dc400117 	ldw	r17,4(sp)
    a940:	dc000017 	ldw	r16,0(sp)
    a944:	dec00304 	addi	sp,sp,12
    a948:	f800283a 	ret
    a94c:	80c00017 	ldw	r3,0(r16)
    a950:	183ff926 	beq	r3,zero,a938 <__alt_mem_Flash_flash_data+0xf400a938>
    a954:	88c00015 	stw	r3,0(r17)
    a958:	003ff706 	br	a938 <__alt_mem_Flash_flash_data+0xf400a938>

0000a95c <_calloc_r>:
    a95c:	298b383a 	mul	r5,r5,r6
    a960:	defffe04 	addi	sp,sp,-8
    a964:	dc000015 	stw	r16,0(sp)
    a968:	dfc00115 	stw	ra,4(sp)
    a96c:	0006ff00 	call	6ff0 <_malloc_r>
    a970:	1021883a 	mov	r16,r2
    a974:	10002826 	beq	r2,zero,aa18 <_calloc_r+0xbc>
    a978:	11bfff17 	ldw	r6,-4(r2)
    a97c:	00bfff04 	movi	r2,-4
    a980:	00c00904 	movi	r3,36
    a984:	308c703a 	and	r6,r6,r2
    a988:	308d883a 	add	r6,r6,r2
    a98c:	19801436 	bltu	r3,r6,a9e0 <_calloc_r+0x84>
    a990:	008004c4 	movi	r2,19
    a994:	11800936 	bltu	r2,r6,a9bc <_calloc_r+0x60>
    a998:	8005883a 	mov	r2,r16
    a99c:	10000015 	stw	zero,0(r2)
    a9a0:	10000115 	stw	zero,4(r2)
    a9a4:	10000215 	stw	zero,8(r2)
    a9a8:	8005883a 	mov	r2,r16
    a9ac:	dfc00117 	ldw	ra,4(sp)
    a9b0:	dc000017 	ldw	r16,0(sp)
    a9b4:	dec00204 	addi	sp,sp,8
    a9b8:	f800283a 	ret
    a9bc:	80000015 	stw	zero,0(r16)
    a9c0:	80000115 	stw	zero,4(r16)
    a9c4:	008006c4 	movi	r2,27
    a9c8:	11800d2e 	bgeu	r2,r6,aa00 <_calloc_r+0xa4>
    a9cc:	80000215 	stw	zero,8(r16)
    a9d0:	80000315 	stw	zero,12(r16)
    a9d4:	30c00c26 	beq	r6,r3,aa08 <_calloc_r+0xac>
    a9d8:	80800404 	addi	r2,r16,16
    a9dc:	003fef06 	br	a99c <__alt_mem_Flash_flash_data+0xf400a99c>
    a9e0:	8009883a 	mov	r4,r16
    a9e4:	000b883a 	mov	r5,zero
    a9e8:	0007b140 	call	7b14 <memset>
    a9ec:	8005883a 	mov	r2,r16
    a9f0:	dfc00117 	ldw	ra,4(sp)
    a9f4:	dc000017 	ldw	r16,0(sp)
    a9f8:	dec00204 	addi	sp,sp,8
    a9fc:	f800283a 	ret
    aa00:	80800204 	addi	r2,r16,8
    aa04:	003fe506 	br	a99c <__alt_mem_Flash_flash_data+0xf400a99c>
    aa08:	80000415 	stw	zero,16(r16)
    aa0c:	80800604 	addi	r2,r16,24
    aa10:	80000515 	stw	zero,20(r16)
    aa14:	003fe106 	br	a99c <__alt_mem_Flash_flash_data+0xf400a99c>
    aa18:	0005883a 	mov	r2,zero
    aa1c:	003fe306 	br	a9ac <__alt_mem_Flash_flash_data+0xf400a9ac>

0000aa20 <_fclose_r>:
    aa20:	28003926 	beq	r5,zero,ab08 <_fclose_r+0xe8>
    aa24:	defffc04 	addi	sp,sp,-16
    aa28:	dc400115 	stw	r17,4(sp)
    aa2c:	dc000015 	stw	r16,0(sp)
    aa30:	dfc00315 	stw	ra,12(sp)
    aa34:	dc800215 	stw	r18,8(sp)
    aa38:	2023883a 	mov	r17,r4
    aa3c:	2821883a 	mov	r16,r5
    aa40:	20000226 	beq	r4,zero,aa4c <_fclose_r+0x2c>
    aa44:	20800e17 	ldw	r2,56(r4)
    aa48:	10002726 	beq	r2,zero,aae8 <_fclose_r+0xc8>
    aa4c:	8080030f 	ldh	r2,12(r16)
    aa50:	1000071e 	bne	r2,zero,aa70 <_fclose_r+0x50>
    aa54:	0005883a 	mov	r2,zero
    aa58:	dfc00317 	ldw	ra,12(sp)
    aa5c:	dc800217 	ldw	r18,8(sp)
    aa60:	dc400117 	ldw	r17,4(sp)
    aa64:	dc000017 	ldw	r16,0(sp)
    aa68:	dec00404 	addi	sp,sp,16
    aa6c:	f800283a 	ret
    aa70:	8809883a 	mov	r4,r17
    aa74:	800b883a 	mov	r5,r16
    aa78:	0005cc80 	call	5cc8 <__sflush_r>
    aa7c:	1025883a 	mov	r18,r2
    aa80:	80800b17 	ldw	r2,44(r16)
    aa84:	10000426 	beq	r2,zero,aa98 <_fclose_r+0x78>
    aa88:	81400717 	ldw	r5,28(r16)
    aa8c:	8809883a 	mov	r4,r17
    aa90:	103ee83a 	callr	r2
    aa94:	10001616 	blt	r2,zero,aaf0 <_fclose_r+0xd0>
    aa98:	8080030b 	ldhu	r2,12(r16)
    aa9c:	1080200c 	andi	r2,r2,128
    aaa0:	1000151e 	bne	r2,zero,aaf8 <_fclose_r+0xd8>
    aaa4:	81400c17 	ldw	r5,48(r16)
    aaa8:	28000526 	beq	r5,zero,aac0 <_fclose_r+0xa0>
    aaac:	80801004 	addi	r2,r16,64
    aab0:	28800226 	beq	r5,r2,aabc <_fclose_r+0x9c>
    aab4:	8809883a 	mov	r4,r17
    aab8:	00064200 	call	6420 <_free_r>
    aabc:	80000c15 	stw	zero,48(r16)
    aac0:	81401117 	ldw	r5,68(r16)
    aac4:	28000326 	beq	r5,zero,aad4 <_fclose_r+0xb4>
    aac8:	8809883a 	mov	r4,r17
    aacc:	00064200 	call	6420 <_free_r>
    aad0:	80001115 	stw	zero,68(r16)
    aad4:	00062bc0 	call	62bc <__sfp_lock_acquire>
    aad8:	8000030d 	sth	zero,12(r16)
    aadc:	00062c00 	call	62c0 <__sfp_lock_release>
    aae0:	9005883a 	mov	r2,r18
    aae4:	003fdc06 	br	aa58 <__alt_mem_Flash_flash_data+0xf400aa58>
    aae8:	00062ac0 	call	62ac <__sinit>
    aaec:	003fd706 	br	aa4c <__alt_mem_Flash_flash_data+0xf400aa4c>
    aaf0:	04bfffc4 	movi	r18,-1
    aaf4:	003fe806 	br	aa98 <__alt_mem_Flash_flash_data+0xf400aa98>
    aaf8:	81400417 	ldw	r5,16(r16)
    aafc:	8809883a 	mov	r4,r17
    ab00:	00064200 	call	6420 <_free_r>
    ab04:	003fe706 	br	aaa4 <__alt_mem_Flash_flash_data+0xf400aaa4>
    ab08:	0005883a 	mov	r2,zero
    ab0c:	f800283a 	ret

0000ab10 <fclose>:
    ab10:	008000b4 	movhi	r2,2
    ab14:	10b70f04 	addi	r2,r2,-9156
    ab18:	200b883a 	mov	r5,r4
    ab1c:	11000017 	ldw	r4,0(r2)
    ab20:	000aa201 	jmpi	aa20 <_fclose_r>

0000ab24 <_fputwc_r>:
    ab24:	3080030b 	ldhu	r2,12(r6)
    ab28:	defff804 	addi	sp,sp,-32
    ab2c:	dcc00415 	stw	r19,16(sp)
    ab30:	dc800315 	stw	r18,12(sp)
    ab34:	dc000115 	stw	r16,4(sp)
    ab38:	dfc00715 	stw	ra,28(sp)
    ab3c:	dd400615 	stw	r21,24(sp)
    ab40:	dd000515 	stw	r20,20(sp)
    ab44:	dc400215 	stw	r17,8(sp)
    ab48:	10c8000c 	andi	r3,r2,8192
    ab4c:	3021883a 	mov	r16,r6
    ab50:	2027883a 	mov	r19,r4
    ab54:	2825883a 	mov	r18,r5
    ab58:	1800051e 	bne	r3,zero,ab70 <_fputwc_r+0x4c>
    ab5c:	30c01917 	ldw	r3,100(r6)
    ab60:	10880014 	ori	r2,r2,8192
    ab64:	3080030d 	sth	r2,12(r6)
    ab68:	18880014 	ori	r2,r3,8192
    ab6c:	30801915 	stw	r2,100(r6)
    ab70:	0006de00 	call	6de0 <__locale_mb_cur_max>
    ab74:	00c00044 	movi	r3,1
    ab78:	10c03e26 	beq	r2,r3,ac74 <_fputwc_r+0x150>
    ab7c:	9809883a 	mov	r4,r19
    ab80:	d80b883a 	mov	r5,sp
    ab84:	900d883a 	mov	r6,r18
    ab88:	81c01704 	addi	r7,r16,92
    ab8c:	000afbc0 	call	afbc <_wcrtomb_r>
    ab90:	1029883a 	mov	r20,r2
    ab94:	00bfffc4 	movi	r2,-1
    ab98:	a0802026 	beq	r20,r2,ac1c <_fputwc_r+0xf8>
    ab9c:	d9400003 	ldbu	r5,0(sp)
    aba0:	a0001c26 	beq	r20,zero,ac14 <_fputwc_r+0xf0>
    aba4:	0023883a 	mov	r17,zero
    aba8:	05400284 	movi	r21,10
    abac:	00000906 	br	abd4 <_fputwc_r+0xb0>
    abb0:	80800017 	ldw	r2,0(r16)
    abb4:	11400005 	stb	r5,0(r2)
    abb8:	80c00017 	ldw	r3,0(r16)
    abbc:	18c00044 	addi	r3,r3,1
    abc0:	80c00015 	stw	r3,0(r16)
    abc4:	8c400044 	addi	r17,r17,1
    abc8:	dc45883a 	add	r2,sp,r17
    abcc:	8d00112e 	bgeu	r17,r20,ac14 <_fputwc_r+0xf0>
    abd0:	11400003 	ldbu	r5,0(r2)
    abd4:	80c00217 	ldw	r3,8(r16)
    abd8:	18ffffc4 	addi	r3,r3,-1
    abdc:	80c00215 	stw	r3,8(r16)
    abe0:	183ff30e 	bge	r3,zero,abb0 <__alt_mem_Flash_flash_data+0xf400abb0>
    abe4:	80800617 	ldw	r2,24(r16)
    abe8:	18801916 	blt	r3,r2,ac50 <_fputwc_r+0x12c>
    abec:	80800017 	ldw	r2,0(r16)
    abf0:	11400005 	stb	r5,0(r2)
    abf4:	80800017 	ldw	r2,0(r16)
    abf8:	10c00003 	ldbu	r3,0(r2)
    abfc:	10800044 	addi	r2,r2,1
    ac00:	1d402326 	beq	r3,r21,ac90 <_fputwc_r+0x16c>
    ac04:	80800015 	stw	r2,0(r16)
    ac08:	8c400044 	addi	r17,r17,1
    ac0c:	dc45883a 	add	r2,sp,r17
    ac10:	8d3fef36 	bltu	r17,r20,abd0 <__alt_mem_Flash_flash_data+0xf400abd0>
    ac14:	9005883a 	mov	r2,r18
    ac18:	00000406 	br	ac2c <_fputwc_r+0x108>
    ac1c:	80c0030b 	ldhu	r3,12(r16)
    ac20:	a005883a 	mov	r2,r20
    ac24:	18c01014 	ori	r3,r3,64
    ac28:	80c0030d 	sth	r3,12(r16)
    ac2c:	dfc00717 	ldw	ra,28(sp)
    ac30:	dd400617 	ldw	r21,24(sp)
    ac34:	dd000517 	ldw	r20,20(sp)
    ac38:	dcc00417 	ldw	r19,16(sp)
    ac3c:	dc800317 	ldw	r18,12(sp)
    ac40:	dc400217 	ldw	r17,8(sp)
    ac44:	dc000117 	ldw	r16,4(sp)
    ac48:	dec00804 	addi	sp,sp,32
    ac4c:	f800283a 	ret
    ac50:	9809883a 	mov	r4,r19
    ac54:	29403fcc 	andi	r5,r5,255
    ac58:	800d883a 	mov	r6,r16
    ac5c:	000ae680 	call	ae68 <__swbuf_r>
    ac60:	10bfffe0 	cmpeqi	r2,r2,-1
    ac64:	10803fcc 	andi	r2,r2,255
    ac68:	103fd626 	beq	r2,zero,abc4 <__alt_mem_Flash_flash_data+0xf400abc4>
    ac6c:	00bfffc4 	movi	r2,-1
    ac70:	003fee06 	br	ac2c <__alt_mem_Flash_flash_data+0xf400ac2c>
    ac74:	90ffffc4 	addi	r3,r18,-1
    ac78:	01003f84 	movi	r4,254
    ac7c:	20ffbf36 	bltu	r4,r3,ab7c <__alt_mem_Flash_flash_data+0xf400ab7c>
    ac80:	900b883a 	mov	r5,r18
    ac84:	dc800005 	stb	r18,0(sp)
    ac88:	1029883a 	mov	r20,r2
    ac8c:	003fc506 	br	aba4 <__alt_mem_Flash_flash_data+0xf400aba4>
    ac90:	9809883a 	mov	r4,r19
    ac94:	a80b883a 	mov	r5,r21
    ac98:	800d883a 	mov	r6,r16
    ac9c:	000ae680 	call	ae68 <__swbuf_r>
    aca0:	10bfffe0 	cmpeqi	r2,r2,-1
    aca4:	003fef06 	br	ac64 <__alt_mem_Flash_flash_data+0xf400ac64>

0000aca8 <fputwc>:
    aca8:	008000b4 	movhi	r2,2
    acac:	defffc04 	addi	sp,sp,-16
    acb0:	10b70f04 	addi	r2,r2,-9156
    acb4:	dc000115 	stw	r16,4(sp)
    acb8:	14000017 	ldw	r16,0(r2)
    acbc:	dc400215 	stw	r17,8(sp)
    acc0:	dfc00315 	stw	ra,12(sp)
    acc4:	2023883a 	mov	r17,r4
    acc8:	280d883a 	mov	r6,r5
    accc:	80000626 	beq	r16,zero,ace8 <fputwc+0x40>
    acd0:	80800e17 	ldw	r2,56(r16)
    acd4:	1000041e 	bne	r2,zero,ace8 <fputwc+0x40>
    acd8:	8009883a 	mov	r4,r16
    acdc:	d9400015 	stw	r5,0(sp)
    ace0:	00062ac0 	call	62ac <__sinit>
    ace4:	d9800017 	ldw	r6,0(sp)
    ace8:	8009883a 	mov	r4,r16
    acec:	880b883a 	mov	r5,r17
    acf0:	dfc00317 	ldw	ra,12(sp)
    acf4:	dc400217 	ldw	r17,8(sp)
    acf8:	dc000117 	ldw	r16,4(sp)
    acfc:	dec00404 	addi	sp,sp,16
    ad00:	000ab241 	jmpi	ab24 <_fputwc_r>

0000ad04 <_fstat_r>:
    ad04:	defffd04 	addi	sp,sp,-12
    ad08:	dc000015 	stw	r16,0(sp)
    ad0c:	040000b4 	movhi	r16,2
    ad10:	dc400115 	stw	r17,4(sp)
    ad14:	843f2504 	addi	r16,r16,-876
    ad18:	2023883a 	mov	r17,r4
    ad1c:	2809883a 	mov	r4,r5
    ad20:	300b883a 	mov	r5,r6
    ad24:	dfc00215 	stw	ra,8(sp)
    ad28:	80000015 	stw	zero,0(r16)
    ad2c:	000e5bc0 	call	e5bc <fstat>
    ad30:	00ffffc4 	movi	r3,-1
    ad34:	10c00526 	beq	r2,r3,ad4c <_fstat_r+0x48>
    ad38:	dfc00217 	ldw	ra,8(sp)
    ad3c:	dc400117 	ldw	r17,4(sp)
    ad40:	dc000017 	ldw	r16,0(sp)
    ad44:	dec00304 	addi	sp,sp,12
    ad48:	f800283a 	ret
    ad4c:	80c00017 	ldw	r3,0(r16)
    ad50:	183ff926 	beq	r3,zero,ad38 <__alt_mem_Flash_flash_data+0xf400ad38>
    ad54:	88c00015 	stw	r3,0(r17)
    ad58:	003ff706 	br	ad38 <__alt_mem_Flash_flash_data+0xf400ad38>

0000ad5c <_isatty_r>:
    ad5c:	defffd04 	addi	sp,sp,-12
    ad60:	dc000015 	stw	r16,0(sp)
    ad64:	040000b4 	movhi	r16,2
    ad68:	dc400115 	stw	r17,4(sp)
    ad6c:	843f2504 	addi	r16,r16,-876
    ad70:	2023883a 	mov	r17,r4
    ad74:	2809883a 	mov	r4,r5
    ad78:	dfc00215 	stw	ra,8(sp)
    ad7c:	80000015 	stw	zero,0(r16)
    ad80:	000e6bc0 	call	e6bc <isatty>
    ad84:	00ffffc4 	movi	r3,-1
    ad88:	10c00526 	beq	r2,r3,ada0 <_isatty_r+0x44>
    ad8c:	dfc00217 	ldw	ra,8(sp)
    ad90:	dc400117 	ldw	r17,4(sp)
    ad94:	dc000017 	ldw	r16,0(sp)
    ad98:	dec00304 	addi	sp,sp,12
    ad9c:	f800283a 	ret
    ada0:	80c00017 	ldw	r3,0(r16)
    ada4:	183ff926 	beq	r3,zero,ad8c <__alt_mem_Flash_flash_data+0xf400ad8c>
    ada8:	88c00015 	stw	r3,0(r17)
    adac:	003ff706 	br	ad8c <__alt_mem_Flash_flash_data+0xf400ad8c>

0000adb0 <_lseek_r>:
    adb0:	defffd04 	addi	sp,sp,-12
    adb4:	dc000015 	stw	r16,0(sp)
    adb8:	040000b4 	movhi	r16,2
    adbc:	dc400115 	stw	r17,4(sp)
    adc0:	843f2504 	addi	r16,r16,-876
    adc4:	2023883a 	mov	r17,r4
    adc8:	2809883a 	mov	r4,r5
    adcc:	300b883a 	mov	r5,r6
    add0:	380d883a 	mov	r6,r7
    add4:	dfc00215 	stw	ra,8(sp)
    add8:	80000015 	stw	zero,0(r16)
    addc:	000e8940 	call	e894 <lseek>
    ade0:	00ffffc4 	movi	r3,-1
    ade4:	10c00526 	beq	r2,r3,adfc <_lseek_r+0x4c>
    ade8:	dfc00217 	ldw	ra,8(sp)
    adec:	dc400117 	ldw	r17,4(sp)
    adf0:	dc000017 	ldw	r16,0(sp)
    adf4:	dec00304 	addi	sp,sp,12
    adf8:	f800283a 	ret
    adfc:	80c00017 	ldw	r3,0(r16)
    ae00:	183ff926 	beq	r3,zero,ade8 <__alt_mem_Flash_flash_data+0xf400ade8>
    ae04:	88c00015 	stw	r3,0(r17)
    ae08:	003ff706 	br	ade8 <__alt_mem_Flash_flash_data+0xf400ade8>

0000ae0c <_read_r>:
    ae0c:	defffd04 	addi	sp,sp,-12
    ae10:	dc000015 	stw	r16,0(sp)
    ae14:	040000b4 	movhi	r16,2
    ae18:	dc400115 	stw	r17,4(sp)
    ae1c:	843f2504 	addi	r16,r16,-876
    ae20:	2023883a 	mov	r17,r4
    ae24:	2809883a 	mov	r4,r5
    ae28:	300b883a 	mov	r5,r6
    ae2c:	380d883a 	mov	r6,r7
    ae30:	dfc00215 	stw	ra,8(sp)
    ae34:	80000015 	stw	zero,0(r16)
    ae38:	000ea8c0 	call	ea8c <read>
    ae3c:	00ffffc4 	movi	r3,-1
    ae40:	10c00526 	beq	r2,r3,ae58 <_read_r+0x4c>
    ae44:	dfc00217 	ldw	ra,8(sp)
    ae48:	dc400117 	ldw	r17,4(sp)
    ae4c:	dc000017 	ldw	r16,0(sp)
    ae50:	dec00304 	addi	sp,sp,12
    ae54:	f800283a 	ret
    ae58:	80c00017 	ldw	r3,0(r16)
    ae5c:	183ff926 	beq	r3,zero,ae44 <__alt_mem_Flash_flash_data+0xf400ae44>
    ae60:	88c00015 	stw	r3,0(r17)
    ae64:	003ff706 	br	ae44 <__alt_mem_Flash_flash_data+0xf400ae44>

0000ae68 <__swbuf_r>:
    ae68:	defffc04 	addi	sp,sp,-16
    ae6c:	dc800215 	stw	r18,8(sp)
    ae70:	dc400115 	stw	r17,4(sp)
    ae74:	dc000015 	stw	r16,0(sp)
    ae78:	dfc00315 	stw	ra,12(sp)
    ae7c:	2025883a 	mov	r18,r4
    ae80:	2823883a 	mov	r17,r5
    ae84:	3021883a 	mov	r16,r6
    ae88:	20000226 	beq	r4,zero,ae94 <__swbuf_r+0x2c>
    ae8c:	20800e17 	ldw	r2,56(r4)
    ae90:	10004126 	beq	r2,zero,af98 <__swbuf_r+0x130>
    ae94:	80c00617 	ldw	r3,24(r16)
    ae98:	8180030b 	ldhu	r6,12(r16)
    ae9c:	80c00215 	stw	r3,8(r16)
    aea0:	30c0020c 	andi	r3,r6,8
    aea4:	18003526 	beq	r3,zero,af7c <__swbuf_r+0x114>
    aea8:	80c00417 	ldw	r3,16(r16)
    aeac:	18003326 	beq	r3,zero,af7c <__swbuf_r+0x114>
    aeb0:	3088000c 	andi	r2,r6,8192
    aeb4:	8c403fcc 	andi	r17,r17,255
    aeb8:	10001726 	beq	r2,zero,af18 <__swbuf_r+0xb0>
    aebc:	80800017 	ldw	r2,0(r16)
    aec0:	81000517 	ldw	r4,20(r16)
    aec4:	10c7c83a 	sub	r3,r2,r3
    aec8:	19001d0e 	bge	r3,r4,af40 <__swbuf_r+0xd8>
    aecc:	18c00044 	addi	r3,r3,1
    aed0:	81400217 	ldw	r5,8(r16)
    aed4:	11000044 	addi	r4,r2,1
    aed8:	81000015 	stw	r4,0(r16)
    aedc:	297fffc4 	addi	r5,r5,-1
    aee0:	81400215 	stw	r5,8(r16)
    aee4:	14400005 	stb	r17,0(r2)
    aee8:	80800517 	ldw	r2,20(r16)
    aeec:	10c01d26 	beq	r2,r3,af64 <__swbuf_r+0xfc>
    aef0:	8080030b 	ldhu	r2,12(r16)
    aef4:	1080004c 	andi	r2,r2,1
    aef8:	1000181e 	bne	r2,zero,af5c <__swbuf_r+0xf4>
    aefc:	8805883a 	mov	r2,r17
    af00:	dfc00317 	ldw	ra,12(sp)
    af04:	dc800217 	ldw	r18,8(sp)
    af08:	dc400117 	ldw	r17,4(sp)
    af0c:	dc000017 	ldw	r16,0(sp)
    af10:	dec00404 	addi	sp,sp,16
    af14:	f800283a 	ret
    af18:	81001917 	ldw	r4,100(r16)
    af1c:	00b7ffc4 	movi	r2,-8193
    af20:	31880014 	ori	r6,r6,8192
    af24:	2084703a 	and	r2,r4,r2
    af28:	80801915 	stw	r2,100(r16)
    af2c:	80800017 	ldw	r2,0(r16)
    af30:	81000517 	ldw	r4,20(r16)
    af34:	8180030d 	sth	r6,12(r16)
    af38:	10c7c83a 	sub	r3,r2,r3
    af3c:	193fe316 	blt	r3,r4,aecc <__alt_mem_Flash_flash_data+0xf400aecc>
    af40:	9009883a 	mov	r4,r18
    af44:	800b883a 	mov	r5,r16
    af48:	0005ed00 	call	5ed0 <_fflush_r>
    af4c:	1000091e 	bne	r2,zero,af74 <__swbuf_r+0x10c>
    af50:	80800017 	ldw	r2,0(r16)
    af54:	00c00044 	movi	r3,1
    af58:	003fdd06 	br	aed0 <__alt_mem_Flash_flash_data+0xf400aed0>
    af5c:	00800284 	movi	r2,10
    af60:	88bfe61e 	bne	r17,r2,aefc <__alt_mem_Flash_flash_data+0xf400aefc>
    af64:	9009883a 	mov	r4,r18
    af68:	800b883a 	mov	r5,r16
    af6c:	0005ed00 	call	5ed0 <_fflush_r>
    af70:	103fe226 	beq	r2,zero,aefc <__alt_mem_Flash_flash_data+0xf400aefc>
    af74:	00bfffc4 	movi	r2,-1
    af78:	003fe106 	br	af00 <__alt_mem_Flash_flash_data+0xf400af00>
    af7c:	9009883a 	mov	r4,r18
    af80:	800b883a 	mov	r5,r16
    af84:	000424c0 	call	424c <__swsetup_r>
    af88:	103ffa1e 	bne	r2,zero,af74 <__alt_mem_Flash_flash_data+0xf400af74>
    af8c:	8180030b 	ldhu	r6,12(r16)
    af90:	80c00417 	ldw	r3,16(r16)
    af94:	003fc606 	br	aeb0 <__alt_mem_Flash_flash_data+0xf400aeb0>
    af98:	00062ac0 	call	62ac <__sinit>
    af9c:	003fbd06 	br	ae94 <__alt_mem_Flash_flash_data+0xf400ae94>

0000afa0 <__swbuf>:
    afa0:	00c000b4 	movhi	r3,2
    afa4:	18f70f04 	addi	r3,r3,-9156
    afa8:	2005883a 	mov	r2,r4
    afac:	19000017 	ldw	r4,0(r3)
    afb0:	280d883a 	mov	r6,r5
    afb4:	100b883a 	mov	r5,r2
    afb8:	000ae681 	jmpi	ae68 <__swbuf_r>

0000afbc <_wcrtomb_r>:
    afbc:	defff604 	addi	sp,sp,-40
    afc0:	008000b4 	movhi	r2,2
    afc4:	dc800815 	stw	r18,32(sp)
    afc8:	dc400715 	stw	r17,28(sp)
    afcc:	dc000615 	stw	r16,24(sp)
    afd0:	10b71304 	addi	r2,r2,-9140
    afd4:	dfc00915 	stw	ra,36(sp)
    afd8:	2021883a 	mov	r16,r4
    afdc:	3823883a 	mov	r17,r7
    afe0:	14800017 	ldw	r18,0(r2)
    afe4:	28001426 	beq	r5,zero,b038 <_wcrtomb_r+0x7c>
    afe8:	d9400415 	stw	r5,16(sp)
    afec:	d9800515 	stw	r6,20(sp)
    aff0:	0006dd40 	call	6dd4 <__locale_charset>
    aff4:	d9400417 	ldw	r5,16(sp)
    aff8:	d9800517 	ldw	r6,20(sp)
    affc:	8009883a 	mov	r4,r16
    b000:	dc400015 	stw	r17,0(sp)
    b004:	100f883a 	mov	r7,r2
    b008:	903ee83a 	callr	r18
    b00c:	00ffffc4 	movi	r3,-1
    b010:	10c0031e 	bne	r2,r3,b020 <_wcrtomb_r+0x64>
    b014:	88000015 	stw	zero,0(r17)
    b018:	00c02284 	movi	r3,138
    b01c:	80c00015 	stw	r3,0(r16)
    b020:	dfc00917 	ldw	ra,36(sp)
    b024:	dc800817 	ldw	r18,32(sp)
    b028:	dc400717 	ldw	r17,28(sp)
    b02c:	dc000617 	ldw	r16,24(sp)
    b030:	dec00a04 	addi	sp,sp,40
    b034:	f800283a 	ret
    b038:	0006dd40 	call	6dd4 <__locale_charset>
    b03c:	8009883a 	mov	r4,r16
    b040:	dc400015 	stw	r17,0(sp)
    b044:	d9400104 	addi	r5,sp,4
    b048:	000d883a 	mov	r6,zero
    b04c:	100f883a 	mov	r7,r2
    b050:	903ee83a 	callr	r18
    b054:	003fed06 	br	b00c <__alt_mem_Flash_flash_data+0xf400b00c>

0000b058 <wcrtomb>:
    b058:	defff604 	addi	sp,sp,-40
    b05c:	008000b4 	movhi	r2,2
    b060:	dc800615 	stw	r18,24(sp)
    b064:	dc400515 	stw	r17,20(sp)
    b068:	dc000415 	stw	r16,16(sp)
    b06c:	10b70f04 	addi	r2,r2,-9156
    b070:	dfc00915 	stw	ra,36(sp)
    b074:	dd000815 	stw	r20,32(sp)
    b078:	dcc00715 	stw	r19,28(sp)
    b07c:	2021883a 	mov	r16,r4
    b080:	3025883a 	mov	r18,r6
    b084:	14400017 	ldw	r17,0(r2)
    b088:	20001826 	beq	r4,zero,b0ec <wcrtomb+0x94>
    b08c:	008000b4 	movhi	r2,2
    b090:	10b71304 	addi	r2,r2,-9140
    b094:	15000017 	ldw	r20,0(r2)
    b098:	2827883a 	mov	r19,r5
    b09c:	0006dd40 	call	6dd4 <__locale_charset>
    b0a0:	8809883a 	mov	r4,r17
    b0a4:	dc800015 	stw	r18,0(sp)
    b0a8:	800b883a 	mov	r5,r16
    b0ac:	980d883a 	mov	r6,r19
    b0b0:	100f883a 	mov	r7,r2
    b0b4:	a03ee83a 	callr	r20
    b0b8:	00ffffc4 	movi	r3,-1
    b0bc:	10c0031e 	bne	r2,r3,b0cc <wcrtomb+0x74>
    b0c0:	90000015 	stw	zero,0(r18)
    b0c4:	00c02284 	movi	r3,138
    b0c8:	88c00015 	stw	r3,0(r17)
    b0cc:	dfc00917 	ldw	ra,36(sp)
    b0d0:	dd000817 	ldw	r20,32(sp)
    b0d4:	dcc00717 	ldw	r19,28(sp)
    b0d8:	dc800617 	ldw	r18,24(sp)
    b0dc:	dc400517 	ldw	r17,20(sp)
    b0e0:	dc000417 	ldw	r16,16(sp)
    b0e4:	dec00a04 	addi	sp,sp,40
    b0e8:	f800283a 	ret
    b0ec:	008000b4 	movhi	r2,2
    b0f0:	10b71304 	addi	r2,r2,-9140
    b0f4:	14000017 	ldw	r16,0(r2)
    b0f8:	0006dd40 	call	6dd4 <__locale_charset>
    b0fc:	8809883a 	mov	r4,r17
    b100:	dc800015 	stw	r18,0(sp)
    b104:	d9400104 	addi	r5,sp,4
    b108:	000d883a 	mov	r6,zero
    b10c:	100f883a 	mov	r7,r2
    b110:	803ee83a 	callr	r16
    b114:	003fe806 	br	b0b8 <__alt_mem_Flash_flash_data+0xf400b0b8>

0000b118 <__ascii_wctomb>:
    b118:	28000526 	beq	r5,zero,b130 <__ascii_wctomb+0x18>
    b11c:	00803fc4 	movi	r2,255
    b120:	11800536 	bltu	r2,r6,b138 <__ascii_wctomb+0x20>
    b124:	29800005 	stb	r6,0(r5)
    b128:	00800044 	movi	r2,1
    b12c:	f800283a 	ret
    b130:	0005883a 	mov	r2,zero
    b134:	f800283a 	ret
    b138:	00802284 	movi	r2,138
    b13c:	20800015 	stw	r2,0(r4)
    b140:	00bfffc4 	movi	r2,-1
    b144:	f800283a 	ret

0000b148 <_wctomb_r>:
    b148:	008000b4 	movhi	r2,2
    b14c:	defff904 	addi	sp,sp,-28
    b150:	10b71304 	addi	r2,r2,-9140
    b154:	dfc00615 	stw	ra,24(sp)
    b158:	dc400515 	stw	r17,20(sp)
    b15c:	dc000415 	stw	r16,16(sp)
    b160:	3823883a 	mov	r17,r7
    b164:	14000017 	ldw	r16,0(r2)
    b168:	d9000115 	stw	r4,4(sp)
    b16c:	d9400215 	stw	r5,8(sp)
    b170:	d9800315 	stw	r6,12(sp)
    b174:	0006dd40 	call	6dd4 <__locale_charset>
    b178:	d9000117 	ldw	r4,4(sp)
    b17c:	d9400217 	ldw	r5,8(sp)
    b180:	d9800317 	ldw	r6,12(sp)
    b184:	dc400015 	stw	r17,0(sp)
    b188:	100f883a 	mov	r7,r2
    b18c:	803ee83a 	callr	r16
    b190:	dfc00617 	ldw	ra,24(sp)
    b194:	dc400517 	ldw	r17,20(sp)
    b198:	dc000417 	ldw	r16,16(sp)
    b19c:	dec00704 	addi	sp,sp,28
    b1a0:	f800283a 	ret

0000b1a4 <__udivdi3>:
    b1a4:	defff504 	addi	sp,sp,-44
    b1a8:	dcc00415 	stw	r19,16(sp)
    b1ac:	dc000115 	stw	r16,4(sp)
    b1b0:	dfc00a15 	stw	ra,40(sp)
    b1b4:	df000915 	stw	fp,36(sp)
    b1b8:	ddc00815 	stw	r23,32(sp)
    b1bc:	dd800715 	stw	r22,28(sp)
    b1c0:	dd400615 	stw	r21,24(sp)
    b1c4:	dd000515 	stw	r20,20(sp)
    b1c8:	dc800315 	stw	r18,12(sp)
    b1cc:	dc400215 	stw	r17,8(sp)
    b1d0:	2027883a 	mov	r19,r4
    b1d4:	2821883a 	mov	r16,r5
    b1d8:	3800421e 	bne	r7,zero,b2e4 <__udivdi3+0x140>
    b1dc:	3025883a 	mov	r18,r6
    b1e0:	2023883a 	mov	r17,r4
    b1e4:	2980542e 	bgeu	r5,r6,b338 <__udivdi3+0x194>
    b1e8:	00bfffd4 	movui	r2,65535
    b1ec:	282d883a 	mov	r22,r5
    b1f0:	1180a836 	bltu	r2,r6,b494 <__udivdi3+0x2f0>
    b1f4:	00803fc4 	movi	r2,255
    b1f8:	1181422e 	bgeu	r2,r6,b704 <__udivdi3+0x560>
    b1fc:	00800204 	movi	r2,8
    b200:	1007883a 	mov	r3,r2
    b204:	3084d83a 	srl	r2,r6,r2
    b208:	010000b4 	movhi	r4,2
    b20c:	212e7804 	addi	r4,r4,-17952
    b210:	2085883a 	add	r2,r4,r2
    b214:	10800003 	ldbu	r2,0(r2)
    b218:	10c7883a 	add	r3,r2,r3
    b21c:	00800804 	movi	r2,32
    b220:	10c5c83a 	sub	r2,r2,r3
    b224:	10000526 	beq	r2,zero,b23c <__udivdi3+0x98>
    b228:	80a0983a 	sll	r16,r16,r2
    b22c:	98c6d83a 	srl	r3,r19,r3
    b230:	30a4983a 	sll	r18,r6,r2
    b234:	98a2983a 	sll	r17,r19,r2
    b238:	80ecb03a 	or	r22,r16,r3
    b23c:	902ad43a 	srli	r21,r18,16
    b240:	b009883a 	mov	r4,r22
    b244:	953fffcc 	andi	r20,r18,65535
    b248:	a80b883a 	mov	r5,r21
    b24c:	000be180 	call	be18 <__umodsi3>
    b250:	b009883a 	mov	r4,r22
    b254:	a80b883a 	mov	r5,r21
    b258:	1027883a 	mov	r19,r2
    b25c:	000be100 	call	be10 <__udivsi3>
    b260:	1021883a 	mov	r16,r2
    b264:	8806d43a 	srli	r3,r17,16
    b268:	9804943a 	slli	r2,r19,16
    b26c:	8527383a 	mul	r19,r16,r20
    b270:	10c4b03a 	or	r2,r2,r3
    b274:	14c0052e 	bgeu	r2,r19,b28c <__udivdi3+0xe8>
    b278:	1485883a 	add	r2,r2,r18
    b27c:	80ffffc4 	addi	r3,r16,-1
    b280:	14800136 	bltu	r2,r18,b288 <__udivdi3+0xe4>
    b284:	14c13436 	bltu	r2,r19,b758 <__udivdi3+0x5b4>
    b288:	1821883a 	mov	r16,r3
    b28c:	14e7c83a 	sub	r19,r2,r19
    b290:	9809883a 	mov	r4,r19
    b294:	a80b883a 	mov	r5,r21
    b298:	000be180 	call	be18 <__umodsi3>
    b29c:	102d883a 	mov	r22,r2
    b2a0:	9809883a 	mov	r4,r19
    b2a4:	a80b883a 	mov	r5,r21
    b2a8:	000be100 	call	be10 <__udivsi3>
    b2ac:	b02c943a 	slli	r22,r22,16
    b2b0:	1529383a 	mul	r20,r2,r20
    b2b4:	8c7fffcc 	andi	r17,r17,65535
    b2b8:	b462b03a 	or	r17,r22,r17
    b2bc:	8d00052e 	bgeu	r17,r20,b2d4 <__udivdi3+0x130>
    b2c0:	8ca3883a 	add	r17,r17,r18
    b2c4:	10ffffc4 	addi	r3,r2,-1
    b2c8:	8c80f636 	bltu	r17,r18,b6a4 <__udivdi3+0x500>
    b2cc:	8d00f52e 	bgeu	r17,r20,b6a4 <__udivdi3+0x500>
    b2d0:	10bfff84 	addi	r2,r2,-2
    b2d4:	8020943a 	slli	r16,r16,16
    b2d8:	0007883a 	mov	r3,zero
    b2dc:	1404b03a 	or	r2,r2,r16
    b2e0:	00005b06 	br	b450 <__udivdi3+0x2ac>
    b2e4:	29c05836 	bltu	r5,r7,b448 <__udivdi3+0x2a4>
    b2e8:	00bfffd4 	movui	r2,65535
    b2ec:	11c0642e 	bgeu	r2,r7,b480 <__udivdi3+0x2dc>
    b2f0:	00804034 	movhi	r2,256
    b2f4:	10bfffc4 	addi	r2,r2,-1
    b2f8:	11c0f32e 	bgeu	r2,r7,b6c8 <__udivdi3+0x524>
    b2fc:	00c00604 	movi	r3,24
    b300:	180b883a 	mov	r5,r3
    b304:	38c6d83a 	srl	r3,r7,r3
    b308:	008000b4 	movhi	r2,2
    b30c:	10ae7804 	addi	r2,r2,-17952
    b310:	10c7883a 	add	r3,r2,r3
    b314:	18c00003 	ldbu	r3,0(r3)
    b318:	01000804 	movi	r4,32
    b31c:	1947883a 	add	r3,r3,r5
    b320:	20e5c83a 	sub	r18,r4,r3
    b324:	9000661e 	bne	r18,zero,b4c0 <__udivdi3+0x31c>
    b328:	3c00f936 	bltu	r7,r16,b710 <__udivdi3+0x56c>
    b32c:	9985403a 	cmpgeu	r2,r19,r6
    b330:	0007883a 	mov	r3,zero
    b334:	00004606 	br	b450 <__udivdi3+0x2ac>
    b338:	3000041e 	bne	r6,zero,b34c <__udivdi3+0x1a8>
    b33c:	01000044 	movi	r4,1
    b340:	000b883a 	mov	r5,zero
    b344:	000be100 	call	be10 <__udivsi3>
    b348:	1025883a 	mov	r18,r2
    b34c:	00bfffd4 	movui	r2,65535
    b350:	1480562e 	bgeu	r2,r18,b4ac <__udivdi3+0x308>
    b354:	00804034 	movhi	r2,256
    b358:	10bfffc4 	addi	r2,r2,-1
    b35c:	1480e32e 	bgeu	r2,r18,b6ec <__udivdi3+0x548>
    b360:	00800604 	movi	r2,24
    b364:	1007883a 	mov	r3,r2
    b368:	9084d83a 	srl	r2,r18,r2
    b36c:	010000b4 	movhi	r4,2
    b370:	212e7804 	addi	r4,r4,-17952
    b374:	2085883a 	add	r2,r4,r2
    b378:	10800003 	ldbu	r2,0(r2)
    b37c:	10c5883a 	add	r2,r2,r3
    b380:	00c00804 	movi	r3,32
    b384:	1887c83a 	sub	r3,r3,r2
    b388:	1800911e 	bne	r3,zero,b5d0 <__udivdi3+0x42c>
    b38c:	9028d43a 	srli	r20,r18,16
    b390:	84a1c83a 	sub	r16,r16,r18
    b394:	957fffcc 	andi	r21,r18,65535
    b398:	00c00044 	movi	r3,1
    b39c:	8009883a 	mov	r4,r16
    b3a0:	a00b883a 	mov	r5,r20
    b3a4:	d8c00015 	stw	r3,0(sp)
    b3a8:	000be180 	call	be18 <__umodsi3>
    b3ac:	8009883a 	mov	r4,r16
    b3b0:	a00b883a 	mov	r5,r20
    b3b4:	1027883a 	mov	r19,r2
    b3b8:	000be100 	call	be10 <__udivsi3>
    b3bc:	1021883a 	mov	r16,r2
    b3c0:	880cd43a 	srli	r6,r17,16
    b3c4:	9804943a 	slli	r2,r19,16
    b3c8:	8567383a 	mul	r19,r16,r21
    b3cc:	d8c00017 	ldw	r3,0(sp)
    b3d0:	1188b03a 	or	r4,r2,r6
    b3d4:	24c0052e 	bgeu	r4,r19,b3ec <__udivdi3+0x248>
    b3d8:	2489883a 	add	r4,r4,r18
    b3dc:	80bfffc4 	addi	r2,r16,-1
    b3e0:	24800136 	bltu	r4,r18,b3e8 <__udivdi3+0x244>
    b3e4:	24c0d936 	bltu	r4,r19,b74c <__udivdi3+0x5a8>
    b3e8:	1021883a 	mov	r16,r2
    b3ec:	24e7c83a 	sub	r19,r4,r19
    b3f0:	9809883a 	mov	r4,r19
    b3f4:	a00b883a 	mov	r5,r20
    b3f8:	d8c00015 	stw	r3,0(sp)
    b3fc:	000be180 	call	be18 <__umodsi3>
    b400:	102d883a 	mov	r22,r2
    b404:	9809883a 	mov	r4,r19
    b408:	a00b883a 	mov	r5,r20
    b40c:	000be100 	call	be10 <__udivsi3>
    b410:	b02c943a 	slli	r22,r22,16
    b414:	156b383a 	mul	r21,r2,r21
    b418:	8c7fffcc 	andi	r17,r17,65535
    b41c:	b462b03a 	or	r17,r22,r17
    b420:	d8c00017 	ldw	r3,0(sp)
    b424:	8d40052e 	bgeu	r17,r21,b43c <__udivdi3+0x298>
    b428:	8ca3883a 	add	r17,r17,r18
    b42c:	113fffc4 	addi	r4,r2,-1
    b430:	8c809a36 	bltu	r17,r18,b69c <__udivdi3+0x4f8>
    b434:	8d40992e 	bgeu	r17,r21,b69c <__udivdi3+0x4f8>
    b438:	10bfff84 	addi	r2,r2,-2
    b43c:	8020943a 	slli	r16,r16,16
    b440:	1404b03a 	or	r2,r2,r16
    b444:	00000206 	br	b450 <__udivdi3+0x2ac>
    b448:	0007883a 	mov	r3,zero
    b44c:	0005883a 	mov	r2,zero
    b450:	dfc00a17 	ldw	ra,40(sp)
    b454:	df000917 	ldw	fp,36(sp)
    b458:	ddc00817 	ldw	r23,32(sp)
    b45c:	dd800717 	ldw	r22,28(sp)
    b460:	dd400617 	ldw	r21,24(sp)
    b464:	dd000517 	ldw	r20,20(sp)
    b468:	dcc00417 	ldw	r19,16(sp)
    b46c:	dc800317 	ldw	r18,12(sp)
    b470:	dc400217 	ldw	r17,8(sp)
    b474:	dc000117 	ldw	r16,4(sp)
    b478:	dec00b04 	addi	sp,sp,44
    b47c:	f800283a 	ret
    b480:	00803fc4 	movi	r2,255
    b484:	11c0932e 	bgeu	r2,r7,b6d4 <__udivdi3+0x530>
    b488:	00c00204 	movi	r3,8
    b48c:	180b883a 	mov	r5,r3
    b490:	003f9c06 	br	b304 <__alt_mem_Flash_flash_data+0xf400b304>
    b494:	00804034 	movhi	r2,256
    b498:	10bfffc4 	addi	r2,r2,-1
    b49c:	1180902e 	bgeu	r2,r6,b6e0 <__udivdi3+0x53c>
    b4a0:	00800604 	movi	r2,24
    b4a4:	1007883a 	mov	r3,r2
    b4a8:	003f5606 	br	b204 <__alt_mem_Flash_flash_data+0xf400b204>
    b4ac:	00803fc4 	movi	r2,255
    b4b0:	1480912e 	bgeu	r2,r18,b6f8 <__udivdi3+0x554>
    b4b4:	00800204 	movi	r2,8
    b4b8:	1007883a 	mov	r3,r2
    b4bc:	003faa06 	br	b368 <__alt_mem_Flash_flash_data+0xf400b368>
    b4c0:	30eed83a 	srl	r23,r6,r3
    b4c4:	3c8e983a 	sll	r7,r7,r18
    b4c8:	80f8d83a 	srl	fp,r16,r3
    b4cc:	98c6d83a 	srl	r3,r19,r3
    b4d0:	3deeb03a 	or	r23,r7,r23
    b4d4:	b828d43a 	srli	r20,r23,16
    b4d8:	84a0983a 	sll	r16,r16,r18
    b4dc:	e009883a 	mov	r4,fp
    b4e0:	a00b883a 	mov	r5,r20
    b4e4:	80e2b03a 	or	r17,r16,r3
    b4e8:	34aa983a 	sll	r21,r6,r18
    b4ec:	000be180 	call	be18 <__umodsi3>
    b4f0:	e009883a 	mov	r4,fp
    b4f4:	a00b883a 	mov	r5,r20
    b4f8:	102d883a 	mov	r22,r2
    b4fc:	000be100 	call	be10 <__udivsi3>
    b500:	1021883a 	mov	r16,r2
    b504:	bf3fffcc 	andi	fp,r23,65535
    b508:	b004943a 	slli	r2,r22,16
    b50c:	8808d43a 	srli	r4,r17,16
    b510:	872d383a 	mul	r22,r16,fp
    b514:	1104b03a 	or	r2,r2,r4
    b518:	1580042e 	bgeu	r2,r22,b52c <__udivdi3+0x388>
    b51c:	15c5883a 	add	r2,r2,r23
    b520:	80ffffc4 	addi	r3,r16,-1
    b524:	15c0812e 	bgeu	r2,r23,b72c <__udivdi3+0x588>
    b528:	1821883a 	mov	r16,r3
    b52c:	15adc83a 	sub	r22,r2,r22
    b530:	b009883a 	mov	r4,r22
    b534:	a00b883a 	mov	r5,r20
    b538:	000be180 	call	be18 <__umodsi3>
    b53c:	a00b883a 	mov	r5,r20
    b540:	b009883a 	mov	r4,r22
    b544:	d8800015 	stw	r2,0(sp)
    b548:	000be100 	call	be10 <__udivsi3>
    b54c:	d8c00017 	ldw	r3,0(sp)
    b550:	170b383a 	mul	r5,r2,fp
    b554:	8c7fffcc 	andi	r17,r17,65535
    b558:	1806943a 	slli	r3,r3,16
    b55c:	1c46b03a 	or	r3,r3,r17
    b560:	1940042e 	bgeu	r3,r5,b574 <__udivdi3+0x3d0>
    b564:	1dc7883a 	add	r3,r3,r23
    b568:	113fffc4 	addi	r4,r2,-1
    b56c:	1dc06b2e 	bgeu	r3,r23,b71c <__udivdi3+0x578>
    b570:	2005883a 	mov	r2,r4
    b574:	8020943a 	slli	r16,r16,16
    b578:	a9ffffcc 	andi	r7,r21,65535
    b57c:	a82ad43a 	srli	r21,r21,16
    b580:	1404b03a 	or	r2,r2,r16
    b584:	113fffcc 	andi	r4,r2,65535
    b588:	100cd43a 	srli	r6,r2,16
    b58c:	21d3383a 	mul	r9,r4,r7
    b590:	2549383a 	mul	r4,r4,r21
    b594:	31cf383a 	mul	r7,r6,r7
    b598:	4810d43a 	srli	r8,r9,16
    b59c:	1947c83a 	sub	r3,r3,r5
    b5a0:	3909883a 	add	r4,r7,r4
    b5a4:	2209883a 	add	r4,r4,r8
    b5a8:	354d383a 	mul	r6,r6,r21
    b5ac:	21c0022e 	bgeu	r4,r7,b5b8 <__udivdi3+0x414>
    b5b0:	01400074 	movhi	r5,1
    b5b4:	314d883a 	add	r6,r6,r5
    b5b8:	202ad43a 	srli	r21,r4,16
    b5bc:	354d883a 	add	r6,r6,r21
    b5c0:	19803f36 	bltu	r3,r6,b6c0 <__udivdi3+0x51c>
    b5c4:	19803926 	beq	r3,r6,b6ac <__udivdi3+0x508>
    b5c8:	0007883a 	mov	r3,zero
    b5cc:	003fa006 	br	b450 <__alt_mem_Flash_flash_data+0xf400b450>
    b5d0:	90e4983a 	sll	r18,r18,r3
    b5d4:	80aad83a 	srl	r21,r16,r2
    b5d8:	80e0983a 	sll	r16,r16,r3
    b5dc:	9028d43a 	srli	r20,r18,16
    b5e0:	9884d83a 	srl	r2,r19,r2
    b5e4:	a809883a 	mov	r4,r21
    b5e8:	a00b883a 	mov	r5,r20
    b5ec:	80acb03a 	or	r22,r16,r2
    b5f0:	98e2983a 	sll	r17,r19,r3
    b5f4:	000be180 	call	be18 <__umodsi3>
    b5f8:	a809883a 	mov	r4,r21
    b5fc:	a00b883a 	mov	r5,r20
    b600:	1021883a 	mov	r16,r2
    b604:	000be100 	call	be10 <__udivsi3>
    b608:	957fffcc 	andi	r21,r18,65535
    b60c:	8020943a 	slli	r16,r16,16
    b610:	b00ad43a 	srli	r5,r22,16
    b614:	1567383a 	mul	r19,r2,r21
    b618:	102f883a 	mov	r23,r2
    b61c:	8148b03a 	or	r4,r16,r5
    b620:	24c0062e 	bgeu	r4,r19,b63c <__udivdi3+0x498>
    b624:	2489883a 	add	r4,r4,r18
    b628:	10bfffc4 	addi	r2,r2,-1
    b62c:	24804536 	bltu	r4,r18,b744 <__udivdi3+0x5a0>
    b630:	24c0442e 	bgeu	r4,r19,b744 <__udivdi3+0x5a0>
    b634:	bdffff84 	addi	r23,r23,-2
    b638:	2489883a 	add	r4,r4,r18
    b63c:	24e7c83a 	sub	r19,r4,r19
    b640:	9809883a 	mov	r4,r19
    b644:	a00b883a 	mov	r5,r20
    b648:	000be180 	call	be18 <__umodsi3>
    b64c:	1021883a 	mov	r16,r2
    b650:	9809883a 	mov	r4,r19
    b654:	a00b883a 	mov	r5,r20
    b658:	000be100 	call	be10 <__udivsi3>
    b65c:	8020943a 	slli	r16,r16,16
    b660:	1007883a 	mov	r3,r2
    b664:	1545383a 	mul	r2,r2,r21
    b668:	b13fffcc 	andi	r4,r22,65535
    b66c:	8108b03a 	or	r4,r16,r4
    b670:	2080062e 	bgeu	r4,r2,b68c <__udivdi3+0x4e8>
    b674:	2489883a 	add	r4,r4,r18
    b678:	197fffc4 	addi	r5,r3,-1
    b67c:	24802f36 	bltu	r4,r18,b73c <__udivdi3+0x598>
    b680:	20802e2e 	bgeu	r4,r2,b73c <__udivdi3+0x598>
    b684:	18ffff84 	addi	r3,r3,-2
    b688:	2489883a 	add	r4,r4,r18
    b68c:	b82e943a 	slli	r23,r23,16
    b690:	20a1c83a 	sub	r16,r4,r2
    b694:	1dc6b03a 	or	r3,r3,r23
    b698:	003f4006 	br	b39c <__alt_mem_Flash_flash_data+0xf400b39c>
    b69c:	2005883a 	mov	r2,r4
    b6a0:	003f6606 	br	b43c <__alt_mem_Flash_flash_data+0xf400b43c>
    b6a4:	1805883a 	mov	r2,r3
    b6a8:	003f0a06 	br	b2d4 <__alt_mem_Flash_flash_data+0xf400b2d4>
    b6ac:	2006943a 	slli	r3,r4,16
    b6b0:	9c88983a 	sll	r4,r19,r18
    b6b4:	4a7fffcc 	andi	r9,r9,65535
    b6b8:	1a47883a 	add	r3,r3,r9
    b6bc:	20ffc22e 	bgeu	r4,r3,b5c8 <__alt_mem_Flash_flash_data+0xf400b5c8>
    b6c0:	10bfffc4 	addi	r2,r2,-1
    b6c4:	003fc006 	br	b5c8 <__alt_mem_Flash_flash_data+0xf400b5c8>
    b6c8:	00c00404 	movi	r3,16
    b6cc:	180b883a 	mov	r5,r3
    b6d0:	003f0c06 	br	b304 <__alt_mem_Flash_flash_data+0xf400b304>
    b6d4:	0007883a 	mov	r3,zero
    b6d8:	000b883a 	mov	r5,zero
    b6dc:	003f0906 	br	b304 <__alt_mem_Flash_flash_data+0xf400b304>
    b6e0:	00800404 	movi	r2,16
    b6e4:	1007883a 	mov	r3,r2
    b6e8:	003ec606 	br	b204 <__alt_mem_Flash_flash_data+0xf400b204>
    b6ec:	00800404 	movi	r2,16
    b6f0:	1007883a 	mov	r3,r2
    b6f4:	003f1c06 	br	b368 <__alt_mem_Flash_flash_data+0xf400b368>
    b6f8:	0005883a 	mov	r2,zero
    b6fc:	0007883a 	mov	r3,zero
    b700:	003f1906 	br	b368 <__alt_mem_Flash_flash_data+0xf400b368>
    b704:	0005883a 	mov	r2,zero
    b708:	0007883a 	mov	r3,zero
    b70c:	003ebd06 	br	b204 <__alt_mem_Flash_flash_data+0xf400b204>
    b710:	0007883a 	mov	r3,zero
    b714:	00800044 	movi	r2,1
    b718:	003f4d06 	br	b450 <__alt_mem_Flash_flash_data+0xf400b450>
    b71c:	197f942e 	bgeu	r3,r5,b570 <__alt_mem_Flash_flash_data+0xf400b570>
    b720:	10bfff84 	addi	r2,r2,-2
    b724:	1dc7883a 	add	r3,r3,r23
    b728:	003f9206 	br	b574 <__alt_mem_Flash_flash_data+0xf400b574>
    b72c:	15bf7e2e 	bgeu	r2,r22,b528 <__alt_mem_Flash_flash_data+0xf400b528>
    b730:	843fff84 	addi	r16,r16,-2
    b734:	15c5883a 	add	r2,r2,r23
    b738:	003f7c06 	br	b52c <__alt_mem_Flash_flash_data+0xf400b52c>
    b73c:	2807883a 	mov	r3,r5
    b740:	003fd206 	br	b68c <__alt_mem_Flash_flash_data+0xf400b68c>
    b744:	102f883a 	mov	r23,r2
    b748:	003fbc06 	br	b63c <__alt_mem_Flash_flash_data+0xf400b63c>
    b74c:	843fff84 	addi	r16,r16,-2
    b750:	2489883a 	add	r4,r4,r18
    b754:	003f2506 	br	b3ec <__alt_mem_Flash_flash_data+0xf400b3ec>
    b758:	843fff84 	addi	r16,r16,-2
    b75c:	1485883a 	add	r2,r2,r18
    b760:	003eca06 	br	b28c <__alt_mem_Flash_flash_data+0xf400b28c>

0000b764 <__umoddi3>:
    b764:	defff404 	addi	sp,sp,-48
    b768:	ddc00915 	stw	r23,36(sp)
    b76c:	dc400315 	stw	r17,12(sp)
    b770:	dc000215 	stw	r16,8(sp)
    b774:	dfc00b15 	stw	ra,44(sp)
    b778:	df000a15 	stw	fp,40(sp)
    b77c:	dd800815 	stw	r22,32(sp)
    b780:	dd400715 	stw	r21,28(sp)
    b784:	dd000615 	stw	r20,24(sp)
    b788:	dcc00515 	stw	r19,20(sp)
    b78c:	dc800415 	stw	r18,16(sp)
    b790:	2021883a 	mov	r16,r4
    b794:	2823883a 	mov	r17,r5
    b798:	282f883a 	mov	r23,r5
    b79c:	3800381e 	bne	r7,zero,b880 <__umoddi3+0x11c>
    b7a0:	3027883a 	mov	r19,r6
    b7a4:	2029883a 	mov	r20,r4
    b7a8:	29804e2e 	bgeu	r5,r6,b8e4 <__umoddi3+0x180>
    b7ac:	00bfffd4 	movui	r2,65535
    b7b0:	11809c36 	bltu	r2,r6,ba24 <__umoddi3+0x2c0>
    b7b4:	00803fc4 	movi	r2,255
    b7b8:	11813b2e 	bgeu	r2,r6,bca8 <__umoddi3+0x544>
    b7bc:	01400204 	movi	r5,8
    b7c0:	2805883a 	mov	r2,r5
    b7c4:	314ad83a 	srl	r5,r6,r5
    b7c8:	00c000b4 	movhi	r3,2
    b7cc:	18ee7804 	addi	r3,r3,-17952
    b7d0:	194b883a 	add	r5,r3,r5
    b7d4:	29000003 	ldbu	r4,0(r5)
    b7d8:	2089883a 	add	r4,r4,r2
    b7dc:	00800804 	movi	r2,32
    b7e0:	1105c83a 	sub	r2,r2,r4
    b7e4:	1000ec26 	beq	r2,zero,bb98 <__umoddi3+0x434>
    b7e8:	88a2983a 	sll	r17,r17,r2
    b7ec:	8108d83a 	srl	r4,r16,r4
    b7f0:	30a6983a 	sll	r19,r6,r2
    b7f4:	80a8983a 	sll	r20,r16,r2
    b7f8:	1025883a 	mov	r18,r2
    b7fc:	892eb03a 	or	r23,r17,r4
    b800:	982cd43a 	srli	r22,r19,16
    b804:	b809883a 	mov	r4,r23
    b808:	9d7fffcc 	andi	r21,r19,65535
    b80c:	b00b883a 	mov	r5,r22
    b810:	000be180 	call	be18 <__umodsi3>
    b814:	b809883a 	mov	r4,r23
    b818:	b00b883a 	mov	r5,r22
    b81c:	1021883a 	mov	r16,r2
    b820:	000be100 	call	be10 <__udivsi3>
    b824:	8020943a 	slli	r16,r16,16
    b828:	a00cd43a 	srli	r6,r20,16
    b82c:	1545383a 	mul	r2,r2,r21
    b830:	8188b03a 	or	r4,r16,r6
    b834:	2080042e 	bgeu	r4,r2,b848 <__umoddi3+0xe4>
    b838:	24c9883a 	add	r4,r4,r19
    b83c:	24c00236 	bltu	r4,r19,b848 <__umoddi3+0xe4>
    b840:	2080012e 	bgeu	r4,r2,b848 <__umoddi3+0xe4>
    b844:	24c9883a 	add	r4,r4,r19
    b848:	20a3c83a 	sub	r17,r4,r2
    b84c:	8809883a 	mov	r4,r17
    b850:	b00b883a 	mov	r5,r22
    b854:	000be180 	call	be18 <__umodsi3>
    b858:	8809883a 	mov	r4,r17
    b85c:	b00b883a 	mov	r5,r22
    b860:	1021883a 	mov	r16,r2
    b864:	000be100 	call	be10 <__udivsi3>
    b868:	8006943a 	slli	r3,r16,16
    b86c:	1545383a 	mul	r2,r2,r21
    b870:	a13fffcc 	andi	r4,r20,65535
    b874:	1906b03a 	or	r3,r3,r4
    b878:	1880532e 	bgeu	r3,r2,b9c8 <__umoddi3+0x264>
    b87c:	00004e06 	br	b9b8 <__umoddi3+0x254>
    b880:	29c05536 	bltu	r5,r7,b9d8 <__umoddi3+0x274>
    b884:	00bfffd4 	movui	r2,65535
    b888:	11c0612e 	bgeu	r2,r7,ba10 <__umoddi3+0x2ac>
    b88c:	00804034 	movhi	r2,256
    b890:	10bfffc4 	addi	r2,r2,-1
    b894:	11c0f82e 	bgeu	r2,r7,bc78 <__umoddi3+0x514>
    b898:	01400604 	movi	r5,24
    b89c:	282b883a 	mov	r21,r5
    b8a0:	394ad83a 	srl	r5,r7,r5
    b8a4:	00c000b4 	movhi	r3,2
    b8a8:	18ee7804 	addi	r3,r3,-17952
    b8ac:	194b883a 	add	r5,r3,r5
    b8b0:	28800003 	ldbu	r2,0(r5)
    b8b4:	00c00804 	movi	r3,32
    b8b8:	156b883a 	add	r21,r2,r21
    b8bc:	1d69c83a 	sub	r20,r3,r21
    b8c0:	a000631e 	bne	r20,zero,ba50 <__umoddi3+0x2ec>
    b8c4:	3c400136 	bltu	r7,r17,b8cc <__umoddi3+0x168>
    b8c8:	81810436 	bltu	r16,r6,bcdc <__umoddi3+0x578>
    b8cc:	8185c83a 	sub	r2,r16,r6
    b8d0:	89e3c83a 	sub	r17,r17,r7
    b8d4:	8087803a 	cmpltu	r3,r16,r2
    b8d8:	88efc83a 	sub	r23,r17,r3
    b8dc:	b807883a 	mov	r3,r23
    b8e0:	00003f06 	br	b9e0 <__umoddi3+0x27c>
    b8e4:	3000041e 	bne	r6,zero,b8f8 <__umoddi3+0x194>
    b8e8:	01000044 	movi	r4,1
    b8ec:	000b883a 	mov	r5,zero
    b8f0:	000be100 	call	be10 <__udivsi3>
    b8f4:	1027883a 	mov	r19,r2
    b8f8:	00bfffd4 	movui	r2,65535
    b8fc:	14c04f2e 	bgeu	r2,r19,ba3c <__umoddi3+0x2d8>
    b900:	00804034 	movhi	r2,256
    b904:	10bfffc4 	addi	r2,r2,-1
    b908:	14c0e42e 	bgeu	r2,r19,bc9c <__umoddi3+0x538>
    b90c:	00800604 	movi	r2,24
    b910:	1007883a 	mov	r3,r2
    b914:	9884d83a 	srl	r2,r19,r2
    b918:	010000b4 	movhi	r4,2
    b91c:	212e7804 	addi	r4,r4,-17952
    b920:	2085883a 	add	r2,r4,r2
    b924:	11000003 	ldbu	r4,0(r2)
    b928:	00800804 	movi	r2,32
    b92c:	20c7883a 	add	r3,r4,r3
    b930:	10c5c83a 	sub	r2,r2,r3
    b934:	10009a1e 	bne	r2,zero,bba0 <__umoddi3+0x43c>
    b938:	982cd43a 	srli	r22,r19,16
    b93c:	8ce3c83a 	sub	r17,r17,r19
    b940:	9c3fffcc 	andi	r16,r19,65535
    b944:	0025883a 	mov	r18,zero
    b948:	8809883a 	mov	r4,r17
    b94c:	b00b883a 	mov	r5,r22
    b950:	000be180 	call	be18 <__umodsi3>
    b954:	8809883a 	mov	r4,r17
    b958:	b00b883a 	mov	r5,r22
    b95c:	102b883a 	mov	r21,r2
    b960:	000be100 	call	be10 <__udivsi3>
    b964:	a806943a 	slli	r3,r21,16
    b968:	a008d43a 	srli	r4,r20,16
    b96c:	1405383a 	mul	r2,r2,r16
    b970:	190cb03a 	or	r6,r3,r4
    b974:	3080032e 	bgeu	r6,r2,b984 <__umoddi3+0x220>
    b978:	34cd883a 	add	r6,r6,r19
    b97c:	34c00136 	bltu	r6,r19,b984 <__umoddi3+0x220>
    b980:	3080d436 	bltu	r6,r2,bcd4 <__umoddi3+0x570>
    b984:	30abc83a 	sub	r21,r6,r2
    b988:	a809883a 	mov	r4,r21
    b98c:	b00b883a 	mov	r5,r22
    b990:	000be180 	call	be18 <__umodsi3>
    b994:	1023883a 	mov	r17,r2
    b998:	a809883a 	mov	r4,r21
    b99c:	b00b883a 	mov	r5,r22
    b9a0:	000be100 	call	be10 <__udivsi3>
    b9a4:	8822943a 	slli	r17,r17,16
    b9a8:	1405383a 	mul	r2,r2,r16
    b9ac:	a13fffcc 	andi	r4,r20,65535
    b9b0:	8906b03a 	or	r3,r17,r4
    b9b4:	1880042e 	bgeu	r3,r2,b9c8 <__umoddi3+0x264>
    b9b8:	1cc7883a 	add	r3,r3,r19
    b9bc:	1cc00236 	bltu	r3,r19,b9c8 <__umoddi3+0x264>
    b9c0:	1880012e 	bgeu	r3,r2,b9c8 <__umoddi3+0x264>
    b9c4:	1cc7883a 	add	r3,r3,r19
    b9c8:	1887c83a 	sub	r3,r3,r2
    b9cc:	1c84d83a 	srl	r2,r3,r18
    b9d0:	0007883a 	mov	r3,zero
    b9d4:	00000206 	br	b9e0 <__umoddi3+0x27c>
    b9d8:	2005883a 	mov	r2,r4
    b9dc:	2807883a 	mov	r3,r5
    b9e0:	dfc00b17 	ldw	ra,44(sp)
    b9e4:	df000a17 	ldw	fp,40(sp)
    b9e8:	ddc00917 	ldw	r23,36(sp)
    b9ec:	dd800817 	ldw	r22,32(sp)
    b9f0:	dd400717 	ldw	r21,28(sp)
    b9f4:	dd000617 	ldw	r20,24(sp)
    b9f8:	dcc00517 	ldw	r19,20(sp)
    b9fc:	dc800417 	ldw	r18,16(sp)
    ba00:	dc400317 	ldw	r17,12(sp)
    ba04:	dc000217 	ldw	r16,8(sp)
    ba08:	dec00c04 	addi	sp,sp,48
    ba0c:	f800283a 	ret
    ba10:	00803fc4 	movi	r2,255
    ba14:	11c0952e 	bgeu	r2,r7,bc6c <__umoddi3+0x508>
    ba18:	01400204 	movi	r5,8
    ba1c:	282b883a 	mov	r21,r5
    ba20:	003f9f06 	br	b8a0 <__alt_mem_Flash_flash_data+0xf400b8a0>
    ba24:	00804034 	movhi	r2,256
    ba28:	10bfffc4 	addi	r2,r2,-1
    ba2c:	1180952e 	bgeu	r2,r6,bc84 <__umoddi3+0x520>
    ba30:	01400604 	movi	r5,24
    ba34:	2805883a 	mov	r2,r5
    ba38:	003f6206 	br	b7c4 <__alt_mem_Flash_flash_data+0xf400b7c4>
    ba3c:	00803fc4 	movi	r2,255
    ba40:	14c0932e 	bgeu	r2,r19,bc90 <__umoddi3+0x52c>
    ba44:	00800204 	movi	r2,8
    ba48:	1007883a 	mov	r3,r2
    ba4c:	003fb106 	br	b914 <__alt_mem_Flash_flash_data+0xf400b914>
    ba50:	3548d83a 	srl	r4,r6,r21
    ba54:	3d0e983a 	sll	r7,r7,r20
    ba58:	8d10983a 	sll	r8,r17,r20
    ba5c:	8d6cd83a 	srl	r22,r17,r21
    ba60:	3922b03a 	or	r17,r7,r4
    ba64:	882ed43a 	srli	r23,r17,16
    ba68:	8564d83a 	srl	r18,r16,r21
    ba6c:	b009883a 	mov	r4,r22
    ba70:	b80b883a 	mov	r5,r23
    ba74:	44a4b03a 	or	r18,r8,r18
    ba78:	3526983a 	sll	r19,r6,r20
    ba7c:	000be180 	call	be18 <__umodsi3>
    ba80:	b009883a 	mov	r4,r22
    ba84:	b80b883a 	mov	r5,r23
    ba88:	1039883a 	mov	fp,r2
    ba8c:	000be100 	call	be10 <__udivsi3>
    ba90:	102d883a 	mov	r22,r2
    ba94:	8a3fffcc 	andi	r8,r17,65535
    ba98:	e004943a 	slli	r2,fp,16
    ba9c:	900cd43a 	srli	r6,r18,16
    baa0:	b239383a 	mul	fp,r22,r8
    baa4:	8520983a 	sll	r16,r16,r20
    baa8:	118ab03a 	or	r5,r2,r6
    baac:	2f00042e 	bgeu	r5,fp,bac0 <__umoddi3+0x35c>
    bab0:	2c4b883a 	add	r5,r5,r17
    bab4:	b0bfffc4 	addi	r2,r22,-1
    bab8:	2c40822e 	bgeu	r5,r17,bcc4 <__umoddi3+0x560>
    babc:	102d883a 	mov	r22,r2
    bac0:	2f39c83a 	sub	fp,r5,fp
    bac4:	e009883a 	mov	r4,fp
    bac8:	b80b883a 	mov	r5,r23
    bacc:	da000115 	stw	r8,4(sp)
    bad0:	000be180 	call	be18 <__umodsi3>
    bad4:	e009883a 	mov	r4,fp
    bad8:	b80b883a 	mov	r5,r23
    badc:	d8800015 	stw	r2,0(sp)
    bae0:	000be100 	call	be10 <__udivsi3>
    bae4:	d9800017 	ldw	r6,0(sp)
    bae8:	da000117 	ldw	r8,4(sp)
    baec:	94bfffcc 	andi	r18,r18,65535
    baf0:	300c943a 	slli	r6,r6,16
    baf4:	1209383a 	mul	r4,r2,r8
    baf8:	3490b03a 	or	r8,r6,r18
    bafc:	4100042e 	bgeu	r8,r4,bb10 <__umoddi3+0x3ac>
    bb00:	4451883a 	add	r8,r8,r17
    bb04:	10ffffc4 	addi	r3,r2,-1
    bb08:	44406a2e 	bgeu	r8,r17,bcb4 <__umoddi3+0x550>
    bb0c:	1805883a 	mov	r2,r3
    bb10:	b012943a 	slli	r9,r22,16
    bb14:	9abfffcc 	andi	r10,r19,65535
    bb18:	980ed43a 	srli	r7,r19,16
    bb1c:	124ab03a 	or	r5,r2,r9
    bb20:	2a7fffcc 	andi	r9,r5,65535
    bb24:	280ad43a 	srli	r5,r5,16
    bb28:	4a8d383a 	mul	r6,r9,r10
    bb2c:	49d3383a 	mul	r9,r9,r7
    bb30:	2a95383a 	mul	r10,r5,r10
    bb34:	3004d43a 	srli	r2,r6,16
    bb38:	4111c83a 	sub	r8,r8,r4
    bb3c:	5253883a 	add	r9,r10,r9
    bb40:	4893883a 	add	r9,r9,r2
    bb44:	29cb383a 	mul	r5,r5,r7
    bb48:	4a80022e 	bgeu	r9,r10,bb54 <__umoddi3+0x3f0>
    bb4c:	00800074 	movhi	r2,1
    bb50:	288b883a 	add	r5,r5,r2
    bb54:	4808d43a 	srli	r4,r9,16
    bb58:	4812943a 	slli	r9,r9,16
    bb5c:	31bfffcc 	andi	r6,r6,65535
    bb60:	290b883a 	add	r5,r5,r4
    bb64:	498d883a 	add	r6,r9,r6
    bb68:	41403a36 	bltu	r8,r5,bc54 <__umoddi3+0x4f0>
    bb6c:	41405d26 	beq	r8,r5,bce4 <__umoddi3+0x580>
    bb70:	4149c83a 	sub	r4,r8,r5
    bb74:	300f883a 	mov	r7,r6
    bb78:	81cfc83a 	sub	r7,r16,r7
    bb7c:	81c7803a 	cmpltu	r3,r16,r7
    bb80:	20c7c83a 	sub	r3,r4,r3
    bb84:	1d44983a 	sll	r2,r3,r21
    bb88:	3d0ed83a 	srl	r7,r7,r20
    bb8c:	1d06d83a 	srl	r3,r3,r20
    bb90:	11c4b03a 	or	r2,r2,r7
    bb94:	003f9206 	br	b9e0 <__alt_mem_Flash_flash_data+0xf400b9e0>
    bb98:	0025883a 	mov	r18,zero
    bb9c:	003f1806 	br	b800 <__alt_mem_Flash_flash_data+0xf400b800>
    bba0:	98a6983a 	sll	r19,r19,r2
    bba4:	88e8d83a 	srl	r20,r17,r3
    bba8:	80c6d83a 	srl	r3,r16,r3
    bbac:	982cd43a 	srli	r22,r19,16
    bbb0:	88a2983a 	sll	r17,r17,r2
    bbb4:	a009883a 	mov	r4,r20
    bbb8:	b00b883a 	mov	r5,r22
    bbbc:	88eab03a 	or	r21,r17,r3
    bbc0:	1025883a 	mov	r18,r2
    bbc4:	000be180 	call	be18 <__umodsi3>
    bbc8:	a009883a 	mov	r4,r20
    bbcc:	b00b883a 	mov	r5,r22
    bbd0:	1023883a 	mov	r17,r2
    bbd4:	000be100 	call	be10 <__udivsi3>
    bbd8:	9f3fffcc 	andi	fp,r19,65535
    bbdc:	8822943a 	slli	r17,r17,16
    bbe0:	a80ad43a 	srli	r5,r21,16
    bbe4:	1705383a 	mul	r2,r2,fp
    bbe8:	84a8983a 	sll	r20,r16,r18
    bbec:	8948b03a 	or	r4,r17,r5
    bbf0:	2080042e 	bgeu	r4,r2,bc04 <__umoddi3+0x4a0>
    bbf4:	24c9883a 	add	r4,r4,r19
    bbf8:	24c00236 	bltu	r4,r19,bc04 <__umoddi3+0x4a0>
    bbfc:	2080012e 	bgeu	r4,r2,bc04 <__umoddi3+0x4a0>
    bc00:	24c9883a 	add	r4,r4,r19
    bc04:	20afc83a 	sub	r23,r4,r2
    bc08:	b809883a 	mov	r4,r23
    bc0c:	b00b883a 	mov	r5,r22
    bc10:	000be180 	call	be18 <__umodsi3>
    bc14:	1023883a 	mov	r17,r2
    bc18:	b809883a 	mov	r4,r23
    bc1c:	b00b883a 	mov	r5,r22
    bc20:	000be100 	call	be10 <__udivsi3>
    bc24:	8822943a 	slli	r17,r17,16
    bc28:	1705383a 	mul	r2,r2,fp
    bc2c:	a93fffcc 	andi	r4,r21,65535
    bc30:	8908b03a 	or	r4,r17,r4
    bc34:	2080042e 	bgeu	r4,r2,bc48 <__umoddi3+0x4e4>
    bc38:	24c9883a 	add	r4,r4,r19
    bc3c:	24c00236 	bltu	r4,r19,bc48 <__umoddi3+0x4e4>
    bc40:	2080012e 	bgeu	r4,r2,bc48 <__umoddi3+0x4e4>
    bc44:	24c9883a 	add	r4,r4,r19
    bc48:	20a3c83a 	sub	r17,r4,r2
    bc4c:	e021883a 	mov	r16,fp
    bc50:	003f3d06 	br	b948 <__alt_mem_Flash_flash_data+0xf400b948>
    bc54:	34cfc83a 	sub	r7,r6,r19
    bc58:	2c4bc83a 	sub	r5,r5,r17
    bc5c:	31cd803a 	cmpltu	r6,r6,r7
    bc60:	298dc83a 	sub	r6,r5,r6
    bc64:	4189c83a 	sub	r4,r8,r6
    bc68:	003fc306 	br	bb78 <__alt_mem_Flash_flash_data+0xf400bb78>
    bc6c:	000b883a 	mov	r5,zero
    bc70:	002b883a 	mov	r21,zero
    bc74:	003f0a06 	br	b8a0 <__alt_mem_Flash_flash_data+0xf400b8a0>
    bc78:	01400404 	movi	r5,16
    bc7c:	282b883a 	mov	r21,r5
    bc80:	003f0706 	br	b8a0 <__alt_mem_Flash_flash_data+0xf400b8a0>
    bc84:	01400404 	movi	r5,16
    bc88:	2805883a 	mov	r2,r5
    bc8c:	003ecd06 	br	b7c4 <__alt_mem_Flash_flash_data+0xf400b7c4>
    bc90:	0005883a 	mov	r2,zero
    bc94:	0007883a 	mov	r3,zero
    bc98:	003f1e06 	br	b914 <__alt_mem_Flash_flash_data+0xf400b914>
    bc9c:	00800404 	movi	r2,16
    bca0:	1007883a 	mov	r3,r2
    bca4:	003f1b06 	br	b914 <__alt_mem_Flash_flash_data+0xf400b914>
    bca8:	000b883a 	mov	r5,zero
    bcac:	0005883a 	mov	r2,zero
    bcb0:	003ec406 	br	b7c4 <__alt_mem_Flash_flash_data+0xf400b7c4>
    bcb4:	413f952e 	bgeu	r8,r4,bb0c <__alt_mem_Flash_flash_data+0xf400bb0c>
    bcb8:	10bfff84 	addi	r2,r2,-2
    bcbc:	4451883a 	add	r8,r8,r17
    bcc0:	003f9306 	br	bb10 <__alt_mem_Flash_flash_data+0xf400bb10>
    bcc4:	2f3f7d2e 	bgeu	r5,fp,babc <__alt_mem_Flash_flash_data+0xf400babc>
    bcc8:	b5bfff84 	addi	r22,r22,-2
    bccc:	2c4b883a 	add	r5,r5,r17
    bcd0:	003f7b06 	br	bac0 <__alt_mem_Flash_flash_data+0xf400bac0>
    bcd4:	34cd883a 	add	r6,r6,r19
    bcd8:	003f2a06 	br	b984 <__alt_mem_Flash_flash_data+0xf400b984>
    bcdc:	8005883a 	mov	r2,r16
    bce0:	003efe06 	br	b8dc <__alt_mem_Flash_flash_data+0xf400b8dc>
    bce4:	81bfdb36 	bltu	r16,r6,bc54 <__alt_mem_Flash_flash_data+0xf400bc54>
    bce8:	300f883a 	mov	r7,r6
    bcec:	0009883a 	mov	r4,zero
    bcf0:	003fa106 	br	bb78 <__alt_mem_Flash_flash_data+0xf400bb78>

0000bcf4 <udivmodsi4>:
    bcf4:	2900182e 	bgeu	r5,r4,bd58 <udivmodsi4+0x64>
    bcf8:	28001716 	blt	r5,zero,bd58 <udivmodsi4+0x64>
    bcfc:	00800804 	movi	r2,32
    bd00:	00c00044 	movi	r3,1
    bd04:	00000206 	br	bd10 <udivmodsi4+0x1c>
    bd08:	10001126 	beq	r2,zero,bd50 <udivmodsi4+0x5c>
    bd0c:	28000516 	blt	r5,zero,bd24 <udivmodsi4+0x30>
    bd10:	294b883a 	add	r5,r5,r5
    bd14:	10bfffc4 	addi	r2,r2,-1
    bd18:	18c7883a 	add	r3,r3,r3
    bd1c:	293ffa36 	bltu	r5,r4,bd08 <__alt_mem_Flash_flash_data+0xf400bd08>
    bd20:	18000b26 	beq	r3,zero,bd50 <udivmodsi4+0x5c>
    bd24:	0005883a 	mov	r2,zero
    bd28:	21400236 	bltu	r4,r5,bd34 <udivmodsi4+0x40>
    bd2c:	2149c83a 	sub	r4,r4,r5
    bd30:	10c4b03a 	or	r2,r2,r3
    bd34:	1806d07a 	srli	r3,r3,1
    bd38:	280ad07a 	srli	r5,r5,1
    bd3c:	183ffa1e 	bne	r3,zero,bd28 <__alt_mem_Flash_flash_data+0xf400bd28>
    bd40:	3000011e 	bne	r6,zero,bd48 <udivmodsi4+0x54>
    bd44:	f800283a 	ret
    bd48:	2005883a 	mov	r2,r4
    bd4c:	f800283a 	ret
    bd50:	0005883a 	mov	r2,zero
    bd54:	003ffa06 	br	bd40 <__alt_mem_Flash_flash_data+0xf400bd40>
    bd58:	00c00044 	movi	r3,1
    bd5c:	003ff106 	br	bd24 <__alt_mem_Flash_flash_data+0xf400bd24>

0000bd60 <__divsi3>:
    bd60:	defffe04 	addi	sp,sp,-8
    bd64:	dfc00115 	stw	ra,4(sp)
    bd68:	dc000015 	stw	r16,0(sp)
    bd6c:	20000b16 	blt	r4,zero,bd9c <__divsi3+0x3c>
    bd70:	0021883a 	mov	r16,zero
    bd74:	28000c16 	blt	r5,zero,bda8 <__divsi3+0x48>
    bd78:	000d883a 	mov	r6,zero
    bd7c:	000bcf40 	call	bcf4 <udivmodsi4>
    bd80:	0407c83a 	sub	r3,zero,r16
    bd84:	1884f03a 	xor	r2,r3,r2
    bd88:	1405883a 	add	r2,r2,r16
    bd8c:	dfc00117 	ldw	ra,4(sp)
    bd90:	dc000017 	ldw	r16,0(sp)
    bd94:	dec00204 	addi	sp,sp,8
    bd98:	f800283a 	ret
    bd9c:	0109c83a 	sub	r4,zero,r4
    bda0:	04000044 	movi	r16,1
    bda4:	283ff40e 	bge	r5,zero,bd78 <__alt_mem_Flash_flash_data+0xf400bd78>
    bda8:	014bc83a 	sub	r5,zero,r5
    bdac:	8400005c 	xori	r16,r16,1
    bdb0:	003ff106 	br	bd78 <__alt_mem_Flash_flash_data+0xf400bd78>

0000bdb4 <__modsi3>:
    bdb4:	defffd04 	addi	sp,sp,-12
    bdb8:	dfc00215 	stw	ra,8(sp)
    bdbc:	dc400115 	stw	r17,4(sp)
    bdc0:	dc000015 	stw	r16,0(sp)
    bdc4:	20000c16 	blt	r4,zero,bdf8 <__modsi3+0x44>
    bdc8:	0023883a 	mov	r17,zero
    bdcc:	0021883a 	mov	r16,zero
    bdd0:	28000d16 	blt	r5,zero,be08 <__modsi3+0x54>
    bdd4:	01800044 	movi	r6,1
    bdd8:	000bcf40 	call	bcf4 <udivmodsi4>
    bddc:	1404f03a 	xor	r2,r2,r16
    bde0:	8885883a 	add	r2,r17,r2
    bde4:	dfc00217 	ldw	ra,8(sp)
    bde8:	dc400117 	ldw	r17,4(sp)
    bdec:	dc000017 	ldw	r16,0(sp)
    bdf0:	dec00304 	addi	sp,sp,12
    bdf4:	f800283a 	ret
    bdf8:	0109c83a 	sub	r4,zero,r4
    bdfc:	04400044 	movi	r17,1
    be00:	043fffc4 	movi	r16,-1
    be04:	283ff30e 	bge	r5,zero,bdd4 <__alt_mem_Flash_flash_data+0xf400bdd4>
    be08:	014bc83a 	sub	r5,zero,r5
    be0c:	003ff106 	br	bdd4 <__alt_mem_Flash_flash_data+0xf400bdd4>

0000be10 <__udivsi3>:
    be10:	000d883a 	mov	r6,zero
    be14:	000bcf41 	jmpi	bcf4 <udivmodsi4>

0000be18 <__umodsi3>:
    be18:	01800044 	movi	r6,1
    be1c:	000bcf41 	jmpi	bcf4 <udivmodsi4>

0000be20 <__adddf3>:
    be20:	02000434 	movhi	r8,16
    be24:	423fffc4 	addi	r8,r8,-1
    be28:	defffb04 	addi	sp,sp,-20
    be2c:	2a12703a 	and	r9,r5,r8
    be30:	2806d7fa 	srli	r3,r5,31
    be34:	3a10703a 	and	r8,r7,r8
    be38:	3804d53a 	srli	r2,r7,20
    be3c:	3014d77a 	srli	r10,r6,29
    be40:	dc000015 	stw	r16,0(sp)
    be44:	481290fa 	slli	r9,r9,3
    be48:	2820d53a 	srli	r16,r5,20
    be4c:	401090fa 	slli	r8,r8,3
    be50:	200ad77a 	srli	r5,r4,29
    be54:	380ed7fa 	srli	r7,r7,31
    be58:	dc800215 	stw	r18,8(sp)
    be5c:	dc400115 	stw	r17,4(sp)
    be60:	dfc00415 	stw	ra,16(sp)
    be64:	dcc00315 	stw	r19,12(sp)
    be68:	1c803fcc 	andi	r18,r3,255
    be6c:	8401ffcc 	andi	r16,r16,2047
    be70:	494ab03a 	or	r5,r9,r5
    be74:	202290fa 	slli	r17,r4,3
    be78:	1081ffcc 	andi	r2,r2,2047
    be7c:	4290b03a 	or	r8,r8,r10
    be80:	300c90fa 	slli	r6,r6,3
    be84:	91c07026 	beq	r18,r7,c048 <__adddf3+0x228>
    be88:	8087c83a 	sub	r3,r16,r2
    be8c:	00c0b30e 	bge	zero,r3,c15c <__adddf3+0x33c>
    be90:	10002a1e 	bne	r2,zero,bf3c <__adddf3+0x11c>
    be94:	4184b03a 	or	r2,r8,r6
    be98:	1000991e 	bne	r2,zero,c100 <__adddf3+0x2e0>
    be9c:	888001cc 	andi	r2,r17,7
    bea0:	10005b26 	beq	r2,zero,c010 <__adddf3+0x1f0>
    bea4:	88c003cc 	andi	r3,r17,15
    bea8:	00800104 	movi	r2,4
    beac:	18805826 	beq	r3,r2,c010 <__adddf3+0x1f0>
    beb0:	89800104 	addi	r6,r17,4
    beb4:	3463803a 	cmpltu	r17,r6,r17
    beb8:	2c4b883a 	add	r5,r5,r17
    bebc:	2880202c 	andhi	r2,r5,128
    bec0:	9007883a 	mov	r3,r18
    bec4:	3023883a 	mov	r17,r6
    bec8:	10005426 	beq	r2,zero,c01c <__adddf3+0x1fc>
    becc:	84000044 	addi	r16,r16,1
    bed0:	0081ffc4 	movi	r2,2047
    bed4:	8080c126 	beq	r16,r2,c1dc <__adddf3+0x3bc>
    bed8:	013fe034 	movhi	r4,65408
    bedc:	213fffc4 	addi	r4,r4,-1
    bee0:	290a703a 	and	r5,r5,r4
    bee4:	2804977a 	slli	r2,r5,29
    bee8:	280a927a 	slli	r5,r5,9
    beec:	8822d0fa 	srli	r17,r17,3
    bef0:	8401ffcc 	andi	r16,r16,2047
    bef4:	2808d33a 	srli	r4,r5,12
    bef8:	1444b03a 	or	r2,r2,r17
    befc:	8401ffcc 	andi	r16,r16,2047
    bf00:	800a953a 	slli	r5,r16,20
    bf04:	18c03fcc 	andi	r3,r3,255
    bf08:	04000434 	movhi	r16,16
    bf0c:	180697fa 	slli	r3,r3,31
    bf10:	843fffc4 	addi	r16,r16,-1
    bf14:	2420703a 	and	r16,r4,r16
    bf18:	8160b03a 	or	r16,r16,r5
    bf1c:	80c6b03a 	or	r3,r16,r3
    bf20:	dfc00417 	ldw	ra,16(sp)
    bf24:	dcc00317 	ldw	r19,12(sp)
    bf28:	dc800217 	ldw	r18,8(sp)
    bf2c:	dc400117 	ldw	r17,4(sp)
    bf30:	dc000017 	ldw	r16,0(sp)
    bf34:	dec00504 	addi	sp,sp,20
    bf38:	f800283a 	ret
    bf3c:	0081ffc4 	movi	r2,2047
    bf40:	80bfd626 	beq	r16,r2,be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    bf44:	42002034 	orhi	r8,r8,128
    bf48:	00800e04 	movi	r2,56
    bf4c:	10c0a616 	blt	r2,r3,c1e8 <__adddf3+0x3c8>
    bf50:	008007c4 	movi	r2,31
    bf54:	10c0c916 	blt	r2,r3,c27c <__adddf3+0x45c>
    bf58:	00800804 	movi	r2,32
    bf5c:	10c5c83a 	sub	r2,r2,r3
    bf60:	408e983a 	sll	r7,r8,r2
    bf64:	30c8d83a 	srl	r4,r6,r3
    bf68:	3084983a 	sll	r2,r6,r2
    bf6c:	40c6d83a 	srl	r3,r8,r3
    bf70:	390cb03a 	or	r6,r7,r4
    bf74:	1004c03a 	cmpne	r2,r2,zero
    bf78:	308cb03a 	or	r6,r6,r2
    bf7c:	898dc83a 	sub	r6,r17,r6
    bf80:	89a3803a 	cmpltu	r17,r17,r6
    bf84:	28cbc83a 	sub	r5,r5,r3
    bf88:	2c4bc83a 	sub	r5,r5,r17
    bf8c:	3023883a 	mov	r17,r6
    bf90:	2880202c 	andhi	r2,r5,128
    bf94:	10006d26 	beq	r2,zero,c14c <__adddf3+0x32c>
    bf98:	04c02034 	movhi	r19,128
    bf9c:	9cffffc4 	addi	r19,r19,-1
    bfa0:	2ce6703a 	and	r19,r5,r19
    bfa4:	98007e26 	beq	r19,zero,c1a0 <__adddf3+0x380>
    bfa8:	9809883a 	mov	r4,r19
    bfac:	000e3bc0 	call	e3bc <__clzsi2>
    bfb0:	10fffe04 	addi	r3,r2,-8
    bfb4:	010007c4 	movi	r4,31
    bfb8:	20c07f16 	blt	r4,r3,c1b8 <__adddf3+0x398>
    bfbc:	01400a04 	movi	r5,40
    bfc0:	2885c83a 	sub	r2,r5,r2
    bfc4:	888ad83a 	srl	r5,r17,r2
    bfc8:	98e6983a 	sll	r19,r19,r3
    bfcc:	88e2983a 	sll	r17,r17,r3
    bfd0:	2ce6b03a 	or	r19,r5,r19
    bfd4:	1c007c16 	blt	r3,r16,c1c8 <__adddf3+0x3a8>
    bfd8:	1c21c83a 	sub	r16,r3,r16
    bfdc:	81400044 	addi	r5,r16,1
    bfe0:	00c007c4 	movi	r3,31
    bfe4:	19409816 	blt	r3,r5,c248 <__adddf3+0x428>
    bfe8:	1c21c83a 	sub	r16,r3,r16
    bfec:	8c08983a 	sll	r4,r17,r16
    bff0:	8946d83a 	srl	r3,r17,r5
    bff4:	9c20983a 	sll	r16,r19,r16
    bff8:	2008c03a 	cmpne	r4,r4,zero
    bffc:	994ad83a 	srl	r5,r19,r5
    c000:	1c06b03a 	or	r3,r3,r16
    c004:	1922b03a 	or	r17,r3,r4
    c008:	0021883a 	mov	r16,zero
    c00c:	003fa306 	br	be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    c010:	2880202c 	andhi	r2,r5,128
    c014:	9007883a 	mov	r3,r18
    c018:	103fac1e 	bne	r2,zero,becc <__alt_mem_Flash_flash_data+0xf400becc>
    c01c:	2804977a 	slli	r2,r5,29
    c020:	8822d0fa 	srli	r17,r17,3
    c024:	0101ffc4 	movi	r4,2047
    c028:	280ad0fa 	srli	r5,r5,3
    c02c:	1444b03a 	or	r2,r2,r17
    c030:	81002c26 	beq	r16,r4,c0e4 <__adddf3+0x2c4>
    c034:	8120703a 	and	r16,r16,r4
    c038:	01000434 	movhi	r4,16
    c03c:	213fffc4 	addi	r4,r4,-1
    c040:	2908703a 	and	r4,r5,r4
    c044:	003fad06 	br	befc <__alt_mem_Flash_flash_data+0xf400befc>
    c048:	8089c83a 	sub	r4,r16,r2
    c04c:	01006a0e 	bge	zero,r4,c1f8 <__adddf3+0x3d8>
    c050:	10003326 	beq	r2,zero,c120 <__adddf3+0x300>
    c054:	0081ffc4 	movi	r2,2047
    c058:	80bf9026 	beq	r16,r2,be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    c05c:	42002034 	orhi	r8,r8,128
    c060:	00800e04 	movi	r2,56
    c064:	1100b116 	blt	r2,r4,c32c <__adddf3+0x50c>
    c068:	008007c4 	movi	r2,31
    c06c:	1100e216 	blt	r2,r4,c3f8 <__adddf3+0x5d8>
    c070:	00800804 	movi	r2,32
    c074:	1105c83a 	sub	r2,r2,r4
    c078:	4092983a 	sll	r9,r8,r2
    c07c:	310ed83a 	srl	r7,r6,r4
    c080:	3084983a 	sll	r2,r6,r2
    c084:	4110d83a 	srl	r8,r8,r4
    c088:	49ccb03a 	or	r6,r9,r7
    c08c:	1004c03a 	cmpne	r2,r2,zero
    c090:	308cb03a 	or	r6,r6,r2
    c094:	344d883a 	add	r6,r6,r17
    c098:	3463803a 	cmpltu	r17,r6,r17
    c09c:	414b883a 	add	r5,r8,r5
    c0a0:	2c4b883a 	add	r5,r5,r17
    c0a4:	3023883a 	mov	r17,r6
    c0a8:	2880202c 	andhi	r2,r5,128
    c0ac:	10002726 	beq	r2,zero,c14c <__adddf3+0x32c>
    c0b0:	84000044 	addi	r16,r16,1
    c0b4:	0081ffc4 	movi	r2,2047
    c0b8:	8080ae26 	beq	r16,r2,c374 <__adddf3+0x554>
    c0bc:	00bfe034 	movhi	r2,65408
    c0c0:	10bfffc4 	addi	r2,r2,-1
    c0c4:	288a703a 	and	r5,r5,r2
    c0c8:	880cd07a 	srli	r6,r17,1
    c0cc:	280897fa 	slli	r4,r5,31
    c0d0:	88c0004c 	andi	r3,r17,1
    c0d4:	30e2b03a 	or	r17,r6,r3
    c0d8:	280ad07a 	srli	r5,r5,1
    c0dc:	8922b03a 	or	r17,r17,r4
    c0e0:	003f6e06 	br	be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    c0e4:	1148b03a 	or	r4,r2,r5
    c0e8:	20003c26 	beq	r4,zero,c1dc <__adddf3+0x3bc>
    c0ec:	29000234 	orhi	r4,r5,8
    c0f0:	01400434 	movhi	r5,16
    c0f4:	297fffc4 	addi	r5,r5,-1
    c0f8:	2148703a 	and	r4,r4,r5
    c0fc:	003f7f06 	br	befc <__alt_mem_Flash_flash_data+0xf400befc>
    c100:	18ffffc4 	addi	r3,r3,-1
    c104:	18004d1e 	bne	r3,zero,c23c <__adddf3+0x41c>
    c108:	898dc83a 	sub	r6,r17,r6
    c10c:	89a3803a 	cmpltu	r17,r17,r6
    c110:	2a0bc83a 	sub	r5,r5,r8
    c114:	2c4bc83a 	sub	r5,r5,r17
    c118:	3023883a 	mov	r17,r6
    c11c:	003f9c06 	br	bf90 <__alt_mem_Flash_flash_data+0xf400bf90>
    c120:	4184b03a 	or	r2,r8,r6
    c124:	103f5d26 	beq	r2,zero,be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    c128:	213fffc4 	addi	r4,r4,-1
    c12c:	203fd926 	beq	r4,zero,c094 <__alt_mem_Flash_flash_data+0xf400c094>
    c130:	0081ffc4 	movi	r2,2047
    c134:	80bfca1e 	bne	r16,r2,c060 <__alt_mem_Flash_flash_data+0xf400c060>
    c138:	003f5806 	br	be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    c13c:	10c8b03a 	or	r4,r2,r3
    c140:	20008b26 	beq	r4,zero,c370 <__adddf3+0x550>
    c144:	100b883a 	mov	r5,r2
    c148:	1823883a 	mov	r17,r3
    c14c:	888001cc 	andi	r2,r17,7
    c150:	103f541e 	bne	r2,zero,bea4 <__alt_mem_Flash_flash_data+0xf400bea4>
    c154:	9007883a 	mov	r3,r18
    c158:	003fb006 	br	c01c <__alt_mem_Flash_flash_data+0xf400c01c>
    c15c:	1800531e 	bne	r3,zero,c2ac <__adddf3+0x48c>
    c160:	80800044 	addi	r2,r16,1
    c164:	1081ffcc 	andi	r2,r2,2047
    c168:	00c00044 	movi	r3,1
    c16c:	1880990e 	bge	r3,r2,c3d4 <__adddf3+0x5b4>
    c170:	8985c83a 	sub	r2,r17,r6
    c174:	8887803a 	cmpltu	r3,r17,r2
    c178:	2a27c83a 	sub	r19,r5,r8
    c17c:	98e7c83a 	sub	r19,r19,r3
    c180:	98c0202c 	andhi	r3,r19,128
    c184:	18006226 	beq	r3,zero,c310 <__adddf3+0x4f0>
    c188:	3463c83a 	sub	r17,r6,r17
    c18c:	4151c83a 	sub	r8,r8,r5
    c190:	344d803a 	cmpltu	r6,r6,r17
    c194:	41a7c83a 	sub	r19,r8,r6
    c198:	3825883a 	mov	r18,r7
    c19c:	983f821e 	bne	r19,zero,bfa8 <__alt_mem_Flash_flash_data+0xf400bfa8>
    c1a0:	8809883a 	mov	r4,r17
    c1a4:	000e3bc0 	call	e3bc <__clzsi2>
    c1a8:	10800804 	addi	r2,r2,32
    c1ac:	10fffe04 	addi	r3,r2,-8
    c1b0:	010007c4 	movi	r4,31
    c1b4:	20ff810e 	bge	r4,r3,bfbc <__alt_mem_Flash_flash_data+0xf400bfbc>
    c1b8:	14fff604 	addi	r19,r2,-40
    c1bc:	8ce6983a 	sll	r19,r17,r19
    c1c0:	0023883a 	mov	r17,zero
    c1c4:	1c3f840e 	bge	r3,r16,bfd8 <__alt_mem_Flash_flash_data+0xf400bfd8>
    c1c8:	017fe034 	movhi	r5,65408
    c1cc:	297fffc4 	addi	r5,r5,-1
    c1d0:	80e1c83a 	sub	r16,r16,r3
    c1d4:	994a703a 	and	r5,r19,r5
    c1d8:	003f3006 	br	be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    c1dc:	0009883a 	mov	r4,zero
    c1e0:	0005883a 	mov	r2,zero
    c1e4:	003f4506 	br	befc <__alt_mem_Flash_flash_data+0xf400befc>
    c1e8:	418cb03a 	or	r6,r8,r6
    c1ec:	300cc03a 	cmpne	r6,r6,zero
    c1f0:	0007883a 	mov	r3,zero
    c1f4:	003f6106 	br	bf7c <__alt_mem_Flash_flash_data+0xf400bf7c>
    c1f8:	2000921e 	bne	r4,zero,c444 <__adddf3+0x624>
    c1fc:	80800044 	addi	r2,r16,1
    c200:	11c1ffcc 	andi	r7,r2,2047
    c204:	01000044 	movi	r4,1
    c208:	21c0610e 	bge	r4,r7,c390 <__adddf3+0x570>
    c20c:	0101ffc4 	movi	r4,2047
    c210:	1100a326 	beq	r2,r4,c4a0 <__adddf3+0x680>
    c214:	344d883a 	add	r6,r6,r17
    c218:	3463803a 	cmpltu	r17,r6,r17
    c21c:	414b883a 	add	r5,r8,r5
    c220:	2c4b883a 	add	r5,r5,r17
    c224:	282297fa 	slli	r17,r5,31
    c228:	300cd07a 	srli	r6,r6,1
    c22c:	280ad07a 	srli	r5,r5,1
    c230:	1021883a 	mov	r16,r2
    c234:	89a2b03a 	or	r17,r17,r6
    c238:	003f1806 	br	be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    c23c:	0081ffc4 	movi	r2,2047
    c240:	80bf411e 	bne	r16,r2,bf48 <__alt_mem_Flash_flash_data+0xf400bf48>
    c244:	003f1506 	br	be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    c248:	80bff844 	addi	r2,r16,-31
    c24c:	00c00804 	movi	r3,32
    c250:	9884d83a 	srl	r2,r19,r2
    c254:	28c04a26 	beq	r5,r3,c380 <__adddf3+0x560>
    c258:	00c00fc4 	movi	r3,63
    c25c:	1c21c83a 	sub	r16,r3,r16
    c260:	9c26983a 	sll	r19,r19,r16
    c264:	9c62b03a 	or	r17,r19,r17
    c268:	8822c03a 	cmpne	r17,r17,zero
    c26c:	88a2b03a 	or	r17,r17,r2
    c270:	000b883a 	mov	r5,zero
    c274:	0021883a 	mov	r16,zero
    c278:	003fb406 	br	c14c <__alt_mem_Flash_flash_data+0xf400c14c>
    c27c:	18bff804 	addi	r2,r3,-32
    c280:	01000804 	movi	r4,32
    c284:	4084d83a 	srl	r2,r8,r2
    c288:	19003f26 	beq	r3,r4,c388 <__adddf3+0x568>
    c28c:	01001004 	movi	r4,64
    c290:	20c7c83a 	sub	r3,r4,r3
    c294:	40d0983a 	sll	r8,r8,r3
    c298:	418cb03a 	or	r6,r8,r6
    c29c:	300cc03a 	cmpne	r6,r6,zero
    c2a0:	308cb03a 	or	r6,r6,r2
    c2a4:	0007883a 	mov	r3,zero
    c2a8:	003f3406 	br	bf7c <__alt_mem_Flash_flash_data+0xf400bf7c>
    c2ac:	80002326 	beq	r16,zero,c33c <__adddf3+0x51c>
    c2b0:	0101ffc4 	movi	r4,2047
    c2b4:	11005e26 	beq	r2,r4,c430 <__adddf3+0x610>
    c2b8:	00c7c83a 	sub	r3,zero,r3
    c2bc:	29402034 	orhi	r5,r5,128
    c2c0:	01000e04 	movi	r4,56
    c2c4:	20c07216 	blt	r4,r3,c490 <__adddf3+0x670>
    c2c8:	010007c4 	movi	r4,31
    c2cc:	20c0ce16 	blt	r4,r3,c608 <__adddf3+0x7e8>
    c2d0:	01000804 	movi	r4,32
    c2d4:	20c9c83a 	sub	r4,r4,r3
    c2d8:	2914983a 	sll	r10,r5,r4
    c2dc:	88d2d83a 	srl	r9,r17,r3
    c2e0:	8908983a 	sll	r4,r17,r4
    c2e4:	28c6d83a 	srl	r3,r5,r3
    c2e8:	5262b03a 	or	r17,r10,r9
    c2ec:	2008c03a 	cmpne	r4,r4,zero
    c2f0:	8922b03a 	or	r17,r17,r4
    c2f4:	3463c83a 	sub	r17,r6,r17
    c2f8:	40c7c83a 	sub	r3,r8,r3
    c2fc:	344d803a 	cmpltu	r6,r6,r17
    c300:	198bc83a 	sub	r5,r3,r6
    c304:	1021883a 	mov	r16,r2
    c308:	3825883a 	mov	r18,r7
    c30c:	003f2006 	br	bf90 <__alt_mem_Flash_flash_data+0xf400bf90>
    c310:	9886b03a 	or	r3,r19,r2
    c314:	1800141e 	bne	r3,zero,c368 <__adddf3+0x548>
    c318:	0007883a 	mov	r3,zero
    c31c:	000b883a 	mov	r5,zero
    c320:	0023883a 	mov	r17,zero
    c324:	0021883a 	mov	r16,zero
    c328:	003f3c06 	br	c01c <__alt_mem_Flash_flash_data+0xf400c01c>
    c32c:	418cb03a 	or	r6,r8,r6
    c330:	300cc03a 	cmpne	r6,r6,zero
    c334:	0011883a 	mov	r8,zero
    c338:	003f5606 	br	c094 <__alt_mem_Flash_flash_data+0xf400c094>
    c33c:	2c48b03a 	or	r4,r5,r17
    c340:	20003b26 	beq	r4,zero,c430 <__adddf3+0x610>
    c344:	00c6303a 	nor	r3,zero,r3
    c348:	1800371e 	bne	r3,zero,c428 <__adddf3+0x608>
    c34c:	3463c83a 	sub	r17,r6,r17
    c350:	414bc83a 	sub	r5,r8,r5
    c354:	344d803a 	cmpltu	r6,r6,r17
    c358:	298bc83a 	sub	r5,r5,r6
    c35c:	1021883a 	mov	r16,r2
    c360:	3825883a 	mov	r18,r7
    c364:	003f0a06 	br	bf90 <__alt_mem_Flash_flash_data+0xf400bf90>
    c368:	1023883a 	mov	r17,r2
    c36c:	003f0d06 	br	bfa4 <__alt_mem_Flash_flash_data+0xf400bfa4>
    c370:	0007883a 	mov	r3,zero
    c374:	000b883a 	mov	r5,zero
    c378:	0023883a 	mov	r17,zero
    c37c:	003f2706 	br	c01c <__alt_mem_Flash_flash_data+0xf400c01c>
    c380:	0027883a 	mov	r19,zero
    c384:	003fb706 	br	c264 <__alt_mem_Flash_flash_data+0xf400c264>
    c388:	0011883a 	mov	r8,zero
    c38c:	003fc206 	br	c298 <__alt_mem_Flash_flash_data+0xf400c298>
    c390:	2c44b03a 	or	r2,r5,r17
    c394:	8000871e 	bne	r16,zero,c5b4 <__adddf3+0x794>
    c398:	1000b126 	beq	r2,zero,c660 <__adddf3+0x840>
    c39c:	4184b03a 	or	r2,r8,r6
    c3a0:	103ebe26 	beq	r2,zero,be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    c3a4:	3445883a 	add	r2,r6,r17
    c3a8:	1463803a 	cmpltu	r17,r2,r17
    c3ac:	414b883a 	add	r5,r8,r5
    c3b0:	2c4b883a 	add	r5,r5,r17
    c3b4:	28c0202c 	andhi	r3,r5,128
    c3b8:	1023883a 	mov	r17,r2
    c3bc:	183f6326 	beq	r3,zero,c14c <__alt_mem_Flash_flash_data+0xf400c14c>
    c3c0:	00bfe034 	movhi	r2,65408
    c3c4:	10bfffc4 	addi	r2,r2,-1
    c3c8:	2021883a 	mov	r16,r4
    c3cc:	288a703a 	and	r5,r5,r2
    c3d0:	003eb206 	br	be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    c3d4:	2c44b03a 	or	r2,r5,r17
    c3d8:	8000251e 	bne	r16,zero,c470 <__adddf3+0x650>
    c3dc:	10004b1e 	bne	r2,zero,c50c <__adddf3+0x6ec>
    c3e0:	4184b03a 	or	r2,r8,r6
    c3e4:	103fe226 	beq	r2,zero,c370 <__alt_mem_Flash_flash_data+0xf400c370>
    c3e8:	400b883a 	mov	r5,r8
    c3ec:	3023883a 	mov	r17,r6
    c3f0:	3825883a 	mov	r18,r7
    c3f4:	003ea906 	br	be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    c3f8:	20bff804 	addi	r2,r4,-32
    c3fc:	01c00804 	movi	r7,32
    c400:	4084d83a 	srl	r2,r8,r2
    c404:	21c07e26 	beq	r4,r7,c600 <__adddf3+0x7e0>
    c408:	01c01004 	movi	r7,64
    c40c:	3909c83a 	sub	r4,r7,r4
    c410:	4110983a 	sll	r8,r8,r4
    c414:	418cb03a 	or	r6,r8,r6
    c418:	300cc03a 	cmpne	r6,r6,zero
    c41c:	308cb03a 	or	r6,r6,r2
    c420:	0011883a 	mov	r8,zero
    c424:	003f1b06 	br	c094 <__alt_mem_Flash_flash_data+0xf400c094>
    c428:	0101ffc4 	movi	r4,2047
    c42c:	113fa41e 	bne	r2,r4,c2c0 <__alt_mem_Flash_flash_data+0xf400c2c0>
    c430:	400b883a 	mov	r5,r8
    c434:	3023883a 	mov	r17,r6
    c438:	1021883a 	mov	r16,r2
    c43c:	3825883a 	mov	r18,r7
    c440:	003e9606 	br	be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    c444:	80001a1e 	bne	r16,zero,c4b0 <__adddf3+0x690>
    c448:	2c4eb03a 	or	r7,r5,r17
    c44c:	38005526 	beq	r7,zero,c5a4 <__adddf3+0x784>
    c450:	0108303a 	nor	r4,zero,r4
    c454:	2000511e 	bne	r4,zero,c59c <__adddf3+0x77c>
    c458:	89a3883a 	add	r17,r17,r6
    c45c:	414b883a 	add	r5,r8,r5
    c460:	898d803a 	cmpltu	r6,r17,r6
    c464:	298b883a 	add	r5,r5,r6
    c468:	1021883a 	mov	r16,r2
    c46c:	003f0e06 	br	c0a8 <__alt_mem_Flash_flash_data+0xf400c0a8>
    c470:	1000341e 	bne	r2,zero,c544 <__adddf3+0x724>
    c474:	4184b03a 	or	r2,r8,r6
    c478:	10006f26 	beq	r2,zero,c638 <__adddf3+0x818>
    c47c:	400b883a 	mov	r5,r8
    c480:	3023883a 	mov	r17,r6
    c484:	3825883a 	mov	r18,r7
    c488:	0401ffc4 	movi	r16,2047
    c48c:	003e8306 	br	be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    c490:	2c62b03a 	or	r17,r5,r17
    c494:	8822c03a 	cmpne	r17,r17,zero
    c498:	0007883a 	mov	r3,zero
    c49c:	003f9506 	br	c2f4 <__alt_mem_Flash_flash_data+0xf400c2f4>
    c4a0:	1021883a 	mov	r16,r2
    c4a4:	000b883a 	mov	r5,zero
    c4a8:	0023883a 	mov	r17,zero
    c4ac:	003edb06 	br	c01c <__alt_mem_Flash_flash_data+0xf400c01c>
    c4b0:	01c1ffc4 	movi	r7,2047
    c4b4:	11c03b26 	beq	r2,r7,c5a4 <__adddf3+0x784>
    c4b8:	0109c83a 	sub	r4,zero,r4
    c4bc:	29402034 	orhi	r5,r5,128
    c4c0:	01c00e04 	movi	r7,56
    c4c4:	39006216 	blt	r7,r4,c650 <__adddf3+0x830>
    c4c8:	01c007c4 	movi	r7,31
    c4cc:	39006b16 	blt	r7,r4,c67c <__adddf3+0x85c>
    c4d0:	01c00804 	movi	r7,32
    c4d4:	390fc83a 	sub	r7,r7,r4
    c4d8:	29d4983a 	sll	r10,r5,r7
    c4dc:	8912d83a 	srl	r9,r17,r4
    c4e0:	89ce983a 	sll	r7,r17,r7
    c4e4:	2908d83a 	srl	r4,r5,r4
    c4e8:	5262b03a 	or	r17,r10,r9
    c4ec:	380ac03a 	cmpne	r5,r7,zero
    c4f0:	8962b03a 	or	r17,r17,r5
    c4f4:	89a3883a 	add	r17,r17,r6
    c4f8:	2211883a 	add	r8,r4,r8
    c4fc:	898d803a 	cmpltu	r6,r17,r6
    c500:	418b883a 	add	r5,r8,r6
    c504:	1021883a 	mov	r16,r2
    c508:	003ee706 	br	c0a8 <__alt_mem_Flash_flash_data+0xf400c0a8>
    c50c:	4184b03a 	or	r2,r8,r6
    c510:	103e6226 	beq	r2,zero,be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    c514:	8987c83a 	sub	r3,r17,r6
    c518:	88c9803a 	cmpltu	r4,r17,r3
    c51c:	2a05c83a 	sub	r2,r5,r8
    c520:	1105c83a 	sub	r2,r2,r4
    c524:	1100202c 	andhi	r4,r2,128
    c528:	203f0426 	beq	r4,zero,c13c <__alt_mem_Flash_flash_data+0xf400c13c>
    c52c:	3463c83a 	sub	r17,r6,r17
    c530:	414bc83a 	sub	r5,r8,r5
    c534:	344d803a 	cmpltu	r6,r6,r17
    c538:	298bc83a 	sub	r5,r5,r6
    c53c:	3825883a 	mov	r18,r7
    c540:	003e5606 	br	be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    c544:	4184b03a 	or	r2,r8,r6
    c548:	10002b26 	beq	r2,zero,c5f8 <__adddf3+0x7d8>
    c54c:	2804d0fa 	srli	r2,r5,3
    c550:	8822d0fa 	srli	r17,r17,3
    c554:	280a977a 	slli	r5,r5,29
    c558:	10c0022c 	andhi	r3,r2,8
    c55c:	2c62b03a 	or	r17,r5,r17
    c560:	18000826 	beq	r3,zero,c584 <__adddf3+0x764>
    c564:	4008d0fa 	srli	r4,r8,3
    c568:	20c0022c 	andhi	r3,r4,8
    c56c:	1800051e 	bne	r3,zero,c584 <__adddf3+0x764>
    c570:	300cd0fa 	srli	r6,r6,3
    c574:	4010977a 	slli	r8,r8,29
    c578:	2005883a 	mov	r2,r4
    c57c:	3825883a 	mov	r18,r7
    c580:	41a2b03a 	or	r17,r8,r6
    c584:	880ad77a 	srli	r5,r17,29
    c588:	100490fa 	slli	r2,r2,3
    c58c:	882290fa 	slli	r17,r17,3
    c590:	0401ffc4 	movi	r16,2047
    c594:	288ab03a 	or	r5,r5,r2
    c598:	003e4006 	br	be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    c59c:	01c1ffc4 	movi	r7,2047
    c5a0:	11ffc71e 	bne	r2,r7,c4c0 <__alt_mem_Flash_flash_data+0xf400c4c0>
    c5a4:	400b883a 	mov	r5,r8
    c5a8:	3023883a 	mov	r17,r6
    c5ac:	1021883a 	mov	r16,r2
    c5b0:	003e3a06 	br	be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    c5b4:	10002d26 	beq	r2,zero,c66c <__adddf3+0x84c>
    c5b8:	4184b03a 	or	r2,r8,r6
    c5bc:	10000e26 	beq	r2,zero,c5f8 <__adddf3+0x7d8>
    c5c0:	2804d0fa 	srli	r2,r5,3
    c5c4:	8822d0fa 	srli	r17,r17,3
    c5c8:	280a977a 	slli	r5,r5,29
    c5cc:	10c0022c 	andhi	r3,r2,8
    c5d0:	2c62b03a 	or	r17,r5,r17
    c5d4:	183feb26 	beq	r3,zero,c584 <__alt_mem_Flash_flash_data+0xf400c584>
    c5d8:	4008d0fa 	srli	r4,r8,3
    c5dc:	20c0022c 	andhi	r3,r4,8
    c5e0:	183fe81e 	bne	r3,zero,c584 <__alt_mem_Flash_flash_data+0xf400c584>
    c5e4:	300cd0fa 	srli	r6,r6,3
    c5e8:	4010977a 	slli	r8,r8,29
    c5ec:	2005883a 	mov	r2,r4
    c5f0:	41a2b03a 	or	r17,r8,r6
    c5f4:	003fe306 	br	c584 <__alt_mem_Flash_flash_data+0xf400c584>
    c5f8:	0401ffc4 	movi	r16,2047
    c5fc:	003e2706 	br	be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    c600:	0011883a 	mov	r8,zero
    c604:	003f8306 	br	c414 <__alt_mem_Flash_flash_data+0xf400c414>
    c608:	193ff804 	addi	r4,r3,-32
    c60c:	02400804 	movi	r9,32
    c610:	2908d83a 	srl	r4,r5,r4
    c614:	1a402526 	beq	r3,r9,c6ac <__adddf3+0x88c>
    c618:	02401004 	movi	r9,64
    c61c:	48c7c83a 	sub	r3,r9,r3
    c620:	28ca983a 	sll	r5,r5,r3
    c624:	2c62b03a 	or	r17,r5,r17
    c628:	8822c03a 	cmpne	r17,r17,zero
    c62c:	8922b03a 	or	r17,r17,r4
    c630:	0007883a 	mov	r3,zero
    c634:	003f2f06 	br	c2f4 <__alt_mem_Flash_flash_data+0xf400c2f4>
    c638:	01402034 	movhi	r5,128
    c63c:	0007883a 	mov	r3,zero
    c640:	297fffc4 	addi	r5,r5,-1
    c644:	047ffe04 	movi	r17,-8
    c648:	0401ffc4 	movi	r16,2047
    c64c:	003e7306 	br	c01c <__alt_mem_Flash_flash_data+0xf400c01c>
    c650:	2c62b03a 	or	r17,r5,r17
    c654:	8822c03a 	cmpne	r17,r17,zero
    c658:	0009883a 	mov	r4,zero
    c65c:	003fa506 	br	c4f4 <__alt_mem_Flash_flash_data+0xf400c4f4>
    c660:	400b883a 	mov	r5,r8
    c664:	3023883a 	mov	r17,r6
    c668:	003e0c06 	br	be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    c66c:	400b883a 	mov	r5,r8
    c670:	3023883a 	mov	r17,r6
    c674:	0401ffc4 	movi	r16,2047
    c678:	003e0806 	br	be9c <__alt_mem_Flash_flash_data+0xf400be9c>
    c67c:	21fff804 	addi	r7,r4,-32
    c680:	02400804 	movi	r9,32
    c684:	29ced83a 	srl	r7,r5,r7
    c688:	22400a26 	beq	r4,r9,c6b4 <__adddf3+0x894>
    c68c:	02401004 	movi	r9,64
    c690:	4909c83a 	sub	r4,r9,r4
    c694:	290a983a 	sll	r5,r5,r4
    c698:	2c62b03a 	or	r17,r5,r17
    c69c:	8822c03a 	cmpne	r17,r17,zero
    c6a0:	89e2b03a 	or	r17,r17,r7
    c6a4:	0009883a 	mov	r4,zero
    c6a8:	003f9206 	br	c4f4 <__alt_mem_Flash_flash_data+0xf400c4f4>
    c6ac:	000b883a 	mov	r5,zero
    c6b0:	003fdc06 	br	c624 <__alt_mem_Flash_flash_data+0xf400c624>
    c6b4:	000b883a 	mov	r5,zero
    c6b8:	003ff706 	br	c698 <__alt_mem_Flash_flash_data+0xf400c698>

0000c6bc <__divdf3>:
    c6bc:	defff204 	addi	sp,sp,-56
    c6c0:	dd000815 	stw	r20,32(sp)
    c6c4:	2828d53a 	srli	r20,r5,20
    c6c8:	dd800a15 	stw	r22,40(sp)
    c6cc:	282cd7fa 	srli	r22,r5,31
    c6d0:	dc000415 	stw	r16,16(sp)
    c6d4:	04000434 	movhi	r16,16
    c6d8:	df000c15 	stw	fp,48(sp)
    c6dc:	dcc00715 	stw	r19,28(sp)
    c6e0:	dc800615 	stw	r18,24(sp)
    c6e4:	dc400515 	stw	r17,20(sp)
    c6e8:	843fffc4 	addi	r16,r16,-1
    c6ec:	dfc00d15 	stw	ra,52(sp)
    c6f0:	ddc00b15 	stw	r23,44(sp)
    c6f4:	dd400915 	stw	r21,36(sp)
    c6f8:	a501ffcc 	andi	r20,r20,2047
    c6fc:	2025883a 	mov	r18,r4
    c700:	2027883a 	mov	r19,r4
    c704:	2c22703a 	and	r17,r5,r16
    c708:	b7003fcc 	andi	fp,r22,255
    c70c:	a0005e26 	beq	r20,zero,c888 <__divdf3+0x1cc>
    c710:	0081ffc4 	movi	r2,2047
    c714:	a0803526 	beq	r20,r2,c7ec <__divdf3+0x130>
    c718:	8c000434 	orhi	r16,r17,16
    c71c:	2004d77a 	srli	r2,r4,29
    c720:	802090fa 	slli	r16,r16,3
    c724:	202690fa 	slli	r19,r4,3
    c728:	a53f0044 	addi	r20,r20,-1023
    c72c:	80a2b03a 	or	r17,r16,r2
    c730:	0025883a 	mov	r18,zero
    c734:	0011883a 	mov	r8,zero
    c738:	380ad53a 	srli	r5,r7,20
    c73c:	382ed7fa 	srli	r23,r7,31
    c740:	04000434 	movhi	r16,16
    c744:	843fffc4 	addi	r16,r16,-1
    c748:	2941ffcc 	andi	r5,r5,2047
    c74c:	302b883a 	mov	r21,r6
    c750:	3c20703a 	and	r16,r7,r16
    c754:	ba403fcc 	andi	r9,r23,255
    c758:	28006726 	beq	r5,zero,c8f8 <__divdf3+0x23c>
    c75c:	0081ffc4 	movi	r2,2047
    c760:	28805f26 	beq	r5,r2,c8e0 <__divdf3+0x224>
    c764:	84000434 	orhi	r16,r16,16
    c768:	3004d77a 	srli	r2,r6,29
    c76c:	802090fa 	slli	r16,r16,3
    c770:	302a90fa 	slli	r21,r6,3
    c774:	297f0044 	addi	r5,r5,-1023
    c778:	80a0b03a 	or	r16,r16,r2
    c77c:	000f883a 	mov	r7,zero
    c780:	3c86b03a 	or	r3,r7,r18
    c784:	180690ba 	slli	r3,r3,2
    c788:	00800074 	movhi	r2,1
    c78c:	10b1eb04 	addi	r2,r2,-14420
    c790:	1887883a 	add	r3,r3,r2
    c794:	18c00017 	ldw	r3,0(r3)
    c798:	b5c8f03a 	xor	r4,r22,r23
    c79c:	200d883a 	mov	r6,r4
    c7a0:	24803fcc 	andi	r18,r4,255
    c7a4:	a169c83a 	sub	r20,r20,r5
    c7a8:	1800683a 	jmp	r3
    c7ac:	0000c9f4 	movhi	zero,807
    c7b0:	0000c824 	muli	zero,zero,800
    c7b4:	0000c9b8 	rdprs	zero,zero,806
    c7b8:	0000c808 	cmpgei	zero,zero,800
    c7bc:	0000c9b8 	rdprs	zero,zero,806
    c7c0:	0000c98c 	andi	zero,zero,806
    c7c4:	0000c9b8 	rdprs	zero,zero,806
    c7c8:	0000c808 	cmpgei	zero,zero,800
    c7cc:	0000c824 	muli	zero,zero,800
    c7d0:	0000c824 	muli	zero,zero,800
    c7d4:	0000c98c 	andi	zero,zero,806
    c7d8:	0000c808 	cmpgei	zero,zero,800
    c7dc:	0000c818 	cmpnei	zero,zero,800
    c7e0:	0000c818 	cmpnei	zero,zero,800
    c7e4:	0000c818 	cmpnei	zero,zero,800
    c7e8:	0000c9c8 	cmpgei	zero,zero,807
    c7ec:	8904b03a 	or	r2,r17,r4
    c7f0:	1000631e 	bne	r2,zero,c980 <__divdf3+0x2c4>
    c7f4:	04800204 	movi	r18,8
    c7f8:	0023883a 	mov	r17,zero
    c7fc:	0027883a 	mov	r19,zero
    c800:	02000084 	movi	r8,2
    c804:	003fcc06 	br	c738 <__alt_mem_Flash_flash_data+0xf400c738>
    c808:	8023883a 	mov	r17,r16
    c80c:	a827883a 	mov	r19,r21
    c810:	4839883a 	mov	fp,r9
    c814:	3811883a 	mov	r8,r7
    c818:	00800084 	movi	r2,2
    c81c:	40812a1e 	bne	r8,r2,ccc8 <__divdf3+0x60c>
    c820:	e025883a 	mov	r18,fp
    c824:	9180004c 	andi	r6,r18,1
    c828:	0101ffc4 	movi	r4,2047
    c82c:	000b883a 	mov	r5,zero
    c830:	0027883a 	mov	r19,zero
    c834:	2008953a 	slli	r4,r4,20
    c838:	30c03fcc 	andi	r3,r6,255
    c83c:	04000434 	movhi	r16,16
    c840:	180697fa 	slli	r3,r3,31
    c844:	843fffc4 	addi	r16,r16,-1
    c848:	2c20703a 	and	r16,r5,r16
    c84c:	8120b03a 	or	r16,r16,r4
    c850:	80c6b03a 	or	r3,r16,r3
    c854:	9805883a 	mov	r2,r19
    c858:	dfc00d17 	ldw	ra,52(sp)
    c85c:	df000c17 	ldw	fp,48(sp)
    c860:	ddc00b17 	ldw	r23,44(sp)
    c864:	dd800a17 	ldw	r22,40(sp)
    c868:	dd400917 	ldw	r21,36(sp)
    c86c:	dd000817 	ldw	r20,32(sp)
    c870:	dcc00717 	ldw	r19,28(sp)
    c874:	dc800617 	ldw	r18,24(sp)
    c878:	dc400517 	ldw	r17,20(sp)
    c87c:	dc000417 	ldw	r16,16(sp)
    c880:	dec00e04 	addi	sp,sp,56
    c884:	f800283a 	ret
    c888:	8904b03a 	or	r2,r17,r4
    c88c:	10003726 	beq	r2,zero,c96c <__divdf3+0x2b0>
    c890:	88011c26 	beq	r17,zero,cd04 <__divdf3+0x648>
    c894:	8809883a 	mov	r4,r17
    c898:	d9800315 	stw	r6,12(sp)
    c89c:	d9c00115 	stw	r7,4(sp)
    c8a0:	000e3bc0 	call	e3bc <__clzsi2>
    c8a4:	d9800317 	ldw	r6,12(sp)
    c8a8:	d9c00117 	ldw	r7,4(sp)
    c8ac:	1007883a 	mov	r3,r2
    c8b0:	01000a04 	movi	r4,40
    c8b4:	1cfffe04 	addi	r19,r3,-8
    c8b8:	20c9c83a 	sub	r4,r4,r3
    c8bc:	8cca983a 	sll	r5,r17,r19
    c8c0:	9108d83a 	srl	r4,r18,r4
    c8c4:	94e6983a 	sll	r19,r18,r19
    c8c8:	2162b03a 	or	r17,r4,r5
    c8cc:	053f0344 	movi	r20,-1011
    c8d0:	a0e9c83a 	sub	r20,r20,r3
    c8d4:	0025883a 	mov	r18,zero
    c8d8:	0011883a 	mov	r8,zero
    c8dc:	003f9606 	br	c738 <__alt_mem_Flash_flash_data+0xf400c738>
    c8e0:	8184b03a 	or	r2,r16,r6
    c8e4:	10001f1e 	bne	r2,zero,c964 <__divdf3+0x2a8>
    c8e8:	0021883a 	mov	r16,zero
    c8ec:	002b883a 	mov	r21,zero
    c8f0:	01c00084 	movi	r7,2
    c8f4:	003fa206 	br	c780 <__alt_mem_Flash_flash_data+0xf400c780>
    c8f8:	8184b03a 	or	r2,r16,r6
    c8fc:	10001526 	beq	r2,zero,c954 <__divdf3+0x298>
    c900:	80010c26 	beq	r16,zero,cd34 <__divdf3+0x678>
    c904:	8009883a 	mov	r4,r16
    c908:	d9800315 	stw	r6,12(sp)
    c90c:	da000215 	stw	r8,8(sp)
    c910:	da400015 	stw	r9,0(sp)
    c914:	000e3bc0 	call	e3bc <__clzsi2>
    c918:	d9800317 	ldw	r6,12(sp)
    c91c:	da000217 	ldw	r8,8(sp)
    c920:	da400017 	ldw	r9,0(sp)
    c924:	1007883a 	mov	r3,r2
    c928:	01000a04 	movi	r4,40
    c92c:	1d7ffe04 	addi	r21,r3,-8
    c930:	20c9c83a 	sub	r4,r4,r3
    c934:	8560983a 	sll	r16,r16,r21
    c938:	3108d83a 	srl	r4,r6,r4
    c93c:	356a983a 	sll	r21,r6,r21
    c940:	2420b03a 	or	r16,r4,r16
    c944:	017f0344 	movi	r5,-1011
    c948:	28cbc83a 	sub	r5,r5,r3
    c94c:	000f883a 	mov	r7,zero
    c950:	003f8b06 	br	c780 <__alt_mem_Flash_flash_data+0xf400c780>
    c954:	0021883a 	mov	r16,zero
    c958:	002b883a 	mov	r21,zero
    c95c:	01c00044 	movi	r7,1
    c960:	003f8706 	br	c780 <__alt_mem_Flash_flash_data+0xf400c780>
    c964:	01c000c4 	movi	r7,3
    c968:	003f8506 	br	c780 <__alt_mem_Flash_flash_data+0xf400c780>
    c96c:	04800104 	movi	r18,4
    c970:	0023883a 	mov	r17,zero
    c974:	0027883a 	mov	r19,zero
    c978:	02000044 	movi	r8,1
    c97c:	003f6e06 	br	c738 <__alt_mem_Flash_flash_data+0xf400c738>
    c980:	04800304 	movi	r18,12
    c984:	020000c4 	movi	r8,3
    c988:	003f6b06 	br	c738 <__alt_mem_Flash_flash_data+0xf400c738>
    c98c:	01400434 	movhi	r5,16
    c990:	000d883a 	mov	r6,zero
    c994:	297fffc4 	addi	r5,r5,-1
    c998:	04ffffc4 	movi	r19,-1
    c99c:	0101ffc4 	movi	r4,2047
    c9a0:	003fa406 	br	c834 <__alt_mem_Flash_flash_data+0xf400c834>
    c9a4:	043f0084 	movi	r16,-1022
    c9a8:	8521c83a 	sub	r16,r16,r20
    c9ac:	00800e04 	movi	r2,56
    c9b0:	1401200e 	bge	r2,r16,ce34 <__divdf3+0x778>
    c9b4:	9180004c 	andi	r6,r18,1
    c9b8:	0009883a 	mov	r4,zero
    c9bc:	000b883a 	mov	r5,zero
    c9c0:	0027883a 	mov	r19,zero
    c9c4:	003f9b06 	br	c834 <__alt_mem_Flash_flash_data+0xf400c834>
    c9c8:	8880022c 	andhi	r2,r17,8
    c9cc:	1000c726 	beq	r2,zero,ccec <__divdf3+0x630>
    c9d0:	8080022c 	andhi	r2,r16,8
    c9d4:	1000c51e 	bne	r2,zero,ccec <__divdf3+0x630>
    c9d8:	00800434 	movhi	r2,16
    c9dc:	81400234 	orhi	r5,r16,8
    c9e0:	10bfffc4 	addi	r2,r2,-1
    c9e4:	b80d883a 	mov	r6,r23
    c9e8:	288a703a 	and	r5,r5,r2
    c9ec:	a827883a 	mov	r19,r21
    c9f0:	003fea06 	br	c99c <__alt_mem_Flash_flash_data+0xf400c99c>
    c9f4:	8440ea36 	bltu	r16,r17,cda0 <__divdf3+0x6e4>
    c9f8:	8c00e826 	beq	r17,r16,cd9c <__divdf3+0x6e0>
    c9fc:	a53fffc4 	addi	r20,r20,-1
    ca00:	882d883a 	mov	r22,r17
    ca04:	000d883a 	mov	r6,zero
    ca08:	a804d63a 	srli	r2,r21,24
    ca0c:	8020923a 	slli	r16,r16,8
    ca10:	b009883a 	mov	r4,r22
    ca14:	d9800315 	stw	r6,12(sp)
    ca18:	1420b03a 	or	r16,r2,r16
    ca1c:	802ed43a 	srli	r23,r16,16
    ca20:	873fffcc 	andi	fp,r16,65535
    ca24:	a82a923a 	slli	r21,r21,8
    ca28:	b80b883a 	mov	r5,r23
    ca2c:	000be100 	call	be10 <__udivsi3>
    ca30:	b009883a 	mov	r4,r22
    ca34:	b80b883a 	mov	r5,r23
    ca38:	1023883a 	mov	r17,r2
    ca3c:	000be180 	call	be18 <__umodsi3>
    ca40:	1004943a 	slli	r2,r2,16
    ca44:	9808d43a 	srli	r4,r19,16
    ca48:	8f2d383a 	mul	r22,r17,fp
    ca4c:	d9800317 	ldw	r6,12(sp)
    ca50:	1106b03a 	or	r3,r2,r4
    ca54:	1d80062e 	bgeu	r3,r22,ca70 <__divdf3+0x3b4>
    ca58:	1c07883a 	add	r3,r3,r16
    ca5c:	88bfffc4 	addi	r2,r17,-1
    ca60:	1c00dc36 	bltu	r3,r16,cdd4 <__divdf3+0x718>
    ca64:	1d80db2e 	bgeu	r3,r22,cdd4 <__divdf3+0x718>
    ca68:	8c7fff84 	addi	r17,r17,-2
    ca6c:	1c07883a 	add	r3,r3,r16
    ca70:	1dadc83a 	sub	r22,r3,r22
    ca74:	b009883a 	mov	r4,r22
    ca78:	b80b883a 	mov	r5,r23
    ca7c:	d9800315 	stw	r6,12(sp)
    ca80:	000be100 	call	be10 <__udivsi3>
    ca84:	b009883a 	mov	r4,r22
    ca88:	b80b883a 	mov	r5,r23
    ca8c:	d8800015 	stw	r2,0(sp)
    ca90:	000be180 	call	be18 <__umodsi3>
    ca94:	da400017 	ldw	r9,0(sp)
    ca98:	1004943a 	slli	r2,r2,16
    ca9c:	9cffffcc 	andi	r19,r19,65535
    caa0:	4f07383a 	mul	r3,r9,fp
    caa4:	14c8b03a 	or	r4,r2,r19
    caa8:	d9800317 	ldw	r6,12(sp)
    caac:	20c0062e 	bgeu	r4,r3,cac8 <__divdf3+0x40c>
    cab0:	2409883a 	add	r4,r4,r16
    cab4:	48bfffc4 	addi	r2,r9,-1
    cab8:	2400c436 	bltu	r4,r16,cdcc <__divdf3+0x710>
    cabc:	20c0c32e 	bgeu	r4,r3,cdcc <__divdf3+0x710>
    cac0:	4a7fff84 	addi	r9,r9,-2
    cac4:	2409883a 	add	r4,r4,r16
    cac8:	8822943a 	slli	r17,r17,16
    cacc:	a80ed43a 	srli	r7,r21,16
    cad0:	aa3fffcc 	andi	r8,r21,65535
    cad4:	4c62b03a 	or	r17,r9,r17
    cad8:	8816d43a 	srli	r11,r17,16
    cadc:	897fffcc 	andi	r5,r17,65535
    cae0:	2a15383a 	mul	r10,r5,r8
    cae4:	5a19383a 	mul	r12,r11,r8
    cae8:	29cb383a 	mul	r5,r5,r7
    caec:	5012d43a 	srli	r9,r10,16
    caf0:	20c5c83a 	sub	r2,r4,r3
    caf4:	614b883a 	add	r5,r12,r5
    caf8:	2a4b883a 	add	r5,r5,r9
    cafc:	59c7383a 	mul	r3,r11,r7
    cb00:	2b00022e 	bgeu	r5,r12,cb0c <__divdf3+0x450>
    cb04:	01000074 	movhi	r4,1
    cb08:	1907883a 	add	r3,r3,r4
    cb0c:	2808d43a 	srli	r4,r5,16
    cb10:	280a943a 	slli	r5,r5,16
    cb14:	54ffffcc 	andi	r19,r10,65535
    cb18:	1907883a 	add	r3,r3,r4
    cb1c:	2ccb883a 	add	r5,r5,r19
    cb20:	10c09336 	bltu	r2,r3,cd70 <__divdf3+0x6b4>
    cb24:	10c0ad26 	beq	r2,r3,cddc <__divdf3+0x720>
    cb28:	10c7c83a 	sub	r3,r2,r3
    cb2c:	3167c83a 	sub	r19,r6,r5
    cb30:	34ed803a 	cmpltu	r22,r6,r19
    cb34:	1dadc83a 	sub	r22,r3,r22
    cb38:	b400b226 	beq	r22,r16,ce04 <__divdf3+0x748>
    cb3c:	b009883a 	mov	r4,r22
    cb40:	b80b883a 	mov	r5,r23
    cb44:	d9c00115 	stw	r7,4(sp)
    cb48:	da000215 	stw	r8,8(sp)
    cb4c:	000be100 	call	be10 <__udivsi3>
    cb50:	b009883a 	mov	r4,r22
    cb54:	b80b883a 	mov	r5,r23
    cb58:	d8800315 	stw	r2,12(sp)
    cb5c:	000be180 	call	be18 <__umodsi3>
    cb60:	d9800317 	ldw	r6,12(sp)
    cb64:	1004943a 	slli	r2,r2,16
    cb68:	9808d43a 	srli	r4,r19,16
    cb6c:	372d383a 	mul	r22,r6,fp
    cb70:	d9c00117 	ldw	r7,4(sp)
    cb74:	1106b03a 	or	r3,r2,r4
    cb78:	da000217 	ldw	r8,8(sp)
    cb7c:	1d80062e 	bgeu	r3,r22,cb98 <__divdf3+0x4dc>
    cb80:	1c07883a 	add	r3,r3,r16
    cb84:	30bfffc4 	addi	r2,r6,-1
    cb88:	1c00a036 	bltu	r3,r16,ce0c <__divdf3+0x750>
    cb8c:	1d809f2e 	bgeu	r3,r22,ce0c <__divdf3+0x750>
    cb90:	31bfff84 	addi	r6,r6,-2
    cb94:	1c07883a 	add	r3,r3,r16
    cb98:	1dadc83a 	sub	r22,r3,r22
    cb9c:	b009883a 	mov	r4,r22
    cba0:	b80b883a 	mov	r5,r23
    cba4:	d9800315 	stw	r6,12(sp)
    cba8:	d9c00115 	stw	r7,4(sp)
    cbac:	da000215 	stw	r8,8(sp)
    cbb0:	000be100 	call	be10 <__udivsi3>
    cbb4:	b009883a 	mov	r4,r22
    cbb8:	b80b883a 	mov	r5,r23
    cbbc:	d8800015 	stw	r2,0(sp)
    cbc0:	000be180 	call	be18 <__umodsi3>
    cbc4:	da400017 	ldw	r9,0(sp)
    cbc8:	1004943a 	slli	r2,r2,16
    cbcc:	993fffcc 	andi	r4,r19,65535
    cbd0:	4f39383a 	mul	fp,r9,fp
    cbd4:	1106b03a 	or	r3,r2,r4
    cbd8:	d9800317 	ldw	r6,12(sp)
    cbdc:	d9c00117 	ldw	r7,4(sp)
    cbe0:	da000217 	ldw	r8,8(sp)
    cbe4:	1f00062e 	bgeu	r3,fp,cc00 <__divdf3+0x544>
    cbe8:	1c07883a 	add	r3,r3,r16
    cbec:	48bfffc4 	addi	r2,r9,-1
    cbf0:	1c008836 	bltu	r3,r16,ce14 <__divdf3+0x758>
    cbf4:	1f00872e 	bgeu	r3,fp,ce14 <__divdf3+0x758>
    cbf8:	4a7fff84 	addi	r9,r9,-2
    cbfc:	1c07883a 	add	r3,r3,r16
    cc00:	3008943a 	slli	r4,r6,16
    cc04:	1f07c83a 	sub	r3,r3,fp
    cc08:	4926b03a 	or	r19,r9,r4
    cc0c:	993fffcc 	andi	r4,r19,65535
    cc10:	980cd43a 	srli	r6,r19,16
    cc14:	220b383a 	mul	r5,r4,r8
    cc18:	21c5383a 	mul	r2,r4,r7
    cc1c:	3211383a 	mul	r8,r6,r8
    cc20:	2808d43a 	srli	r4,r5,16
    cc24:	31cf383a 	mul	r7,r6,r7
    cc28:	4085883a 	add	r2,r8,r2
    cc2c:	1105883a 	add	r2,r2,r4
    cc30:	1200022e 	bgeu	r2,r8,cc3c <__divdf3+0x580>
    cc34:	01000074 	movhi	r4,1
    cc38:	390f883a 	add	r7,r7,r4
    cc3c:	1008d43a 	srli	r4,r2,16
    cc40:	1004943a 	slli	r2,r2,16
    cc44:	297fffcc 	andi	r5,r5,65535
    cc48:	390f883a 	add	r7,r7,r4
    cc4c:	1145883a 	add	r2,r2,r5
    cc50:	19c06536 	bltu	r3,r7,cde8 <__divdf3+0x72c>
    cc54:	19c09f26 	beq	r3,r7,ced4 <__divdf3+0x818>
    cc58:	9cc00054 	ori	r19,r19,1
    cc5c:	a100ffc4 	addi	r4,r20,1023
    cc60:	013f500e 	bge	zero,r4,c9a4 <__alt_mem_Flash_flash_data+0xf400c9a4>
    cc64:	988001cc 	andi	r2,r19,7
    cc68:	10000726 	beq	r2,zero,cc88 <__divdf3+0x5cc>
    cc6c:	98c003cc 	andi	r3,r19,15
    cc70:	00800104 	movi	r2,4
    cc74:	18800426 	beq	r3,r2,cc88 <__divdf3+0x5cc>
    cc78:	9885883a 	add	r2,r19,r2
    cc7c:	14e1803a 	cmpltu	r16,r2,r19
    cc80:	8c23883a 	add	r17,r17,r16
    cc84:	1027883a 	mov	r19,r2
    cc88:	8880402c 	andhi	r2,r17,256
    cc8c:	10000426 	beq	r2,zero,cca0 <__divdf3+0x5e4>
    cc90:	00bfc034 	movhi	r2,65280
    cc94:	10bfffc4 	addi	r2,r2,-1
    cc98:	a1010004 	addi	r4,r20,1024
    cc9c:	88a2703a 	and	r17,r17,r2
    cca0:	0081ff84 	movi	r2,2046
    cca4:	113edf16 	blt	r2,r4,c824 <__alt_mem_Flash_flash_data+0xf400c824>
    cca8:	9826d0fa 	srli	r19,r19,3
    ccac:	8804977a 	slli	r2,r17,29
    ccb0:	8820927a 	slli	r16,r17,9
    ccb4:	2101ffcc 	andi	r4,r4,2047
    ccb8:	14e6b03a 	or	r19,r2,r19
    ccbc:	800ad33a 	srli	r5,r16,12
    ccc0:	9180004c 	andi	r6,r18,1
    ccc4:	003edb06 	br	c834 <__alt_mem_Flash_flash_data+0xf400c834>
    ccc8:	008000c4 	movi	r2,3
    cccc:	4080a826 	beq	r8,r2,cf70 <__divdf3+0x8b4>
    ccd0:	00800044 	movi	r2,1
    ccd4:	4080551e 	bne	r8,r2,ce2c <__divdf3+0x770>
    ccd8:	e00d883a 	mov	r6,fp
    ccdc:	0009883a 	mov	r4,zero
    cce0:	000b883a 	mov	r5,zero
    cce4:	0027883a 	mov	r19,zero
    cce8:	003ed206 	br	c834 <__alt_mem_Flash_flash_data+0xf400c834>
    ccec:	00800434 	movhi	r2,16
    ccf0:	89400234 	orhi	r5,r17,8
    ccf4:	10bfffc4 	addi	r2,r2,-1
    ccf8:	b00d883a 	mov	r6,r22
    ccfc:	288a703a 	and	r5,r5,r2
    cd00:	003f2606 	br	c99c <__alt_mem_Flash_flash_data+0xf400c99c>
    cd04:	d9800315 	stw	r6,12(sp)
    cd08:	d9c00115 	stw	r7,4(sp)
    cd0c:	000e3bc0 	call	e3bc <__clzsi2>
    cd10:	10c00804 	addi	r3,r2,32
    cd14:	010009c4 	movi	r4,39
    cd18:	d9800317 	ldw	r6,12(sp)
    cd1c:	d9c00117 	ldw	r7,4(sp)
    cd20:	20fee30e 	bge	r4,r3,c8b0 <__alt_mem_Flash_flash_data+0xf400c8b0>
    cd24:	117ffe04 	addi	r5,r2,-8
    cd28:	9162983a 	sll	r17,r18,r5
    cd2c:	0027883a 	mov	r19,zero
    cd30:	003ee606 	br	c8cc <__alt_mem_Flash_flash_data+0xf400c8cc>
    cd34:	3009883a 	mov	r4,r6
    cd38:	d9800315 	stw	r6,12(sp)
    cd3c:	da000215 	stw	r8,8(sp)
    cd40:	da400015 	stw	r9,0(sp)
    cd44:	000e3bc0 	call	e3bc <__clzsi2>
    cd48:	10c00804 	addi	r3,r2,32
    cd4c:	010009c4 	movi	r4,39
    cd50:	d9800317 	ldw	r6,12(sp)
    cd54:	da000217 	ldw	r8,8(sp)
    cd58:	da400017 	ldw	r9,0(sp)
    cd5c:	20fef20e 	bge	r4,r3,c928 <__alt_mem_Flash_flash_data+0xf400c928>
    cd60:	10bffe04 	addi	r2,r2,-8
    cd64:	a8a0983a 	sll	r16,r21,r2
    cd68:	002b883a 	mov	r21,zero
    cd6c:	003ef506 	br	c944 <__alt_mem_Flash_flash_data+0xf400c944>
    cd70:	354d883a 	add	r6,r6,r21
    cd74:	3549803a 	cmpltu	r4,r6,r21
    cd78:	2409883a 	add	r4,r4,r16
    cd7c:	2089883a 	add	r4,r4,r2
    cd80:	88bfffc4 	addi	r2,r17,-1
    cd84:	81000c2e 	bgeu	r16,r4,cdb8 <__divdf3+0x6fc>
    cd88:	20c04436 	bltu	r4,r3,ce9c <__divdf3+0x7e0>
    cd8c:	19006f26 	beq	r3,r4,cf4c <__divdf3+0x890>
    cd90:	20c7c83a 	sub	r3,r4,r3
    cd94:	1023883a 	mov	r17,r2
    cd98:	003f6406 	br	cb2c <__alt_mem_Flash_flash_data+0xf400cb2c>
    cd9c:	9d7f1736 	bltu	r19,r21,c9fc <__alt_mem_Flash_flash_data+0xf400c9fc>
    cda0:	9806d07a 	srli	r3,r19,1
    cda4:	880497fa 	slli	r2,r17,31
    cda8:	980c97fa 	slli	r6,r19,31
    cdac:	882cd07a 	srli	r22,r17,1
    cdb0:	18a6b03a 	or	r19,r3,r2
    cdb4:	003f1406 	br	ca08 <__alt_mem_Flash_flash_data+0xf400ca08>
    cdb8:	243ff51e 	bne	r4,r16,cd90 <__alt_mem_Flash_flash_data+0xf400cd90>
    cdbc:	357ff22e 	bgeu	r6,r21,cd88 <__alt_mem_Flash_flash_data+0xf400cd88>
    cdc0:	80c7c83a 	sub	r3,r16,r3
    cdc4:	1023883a 	mov	r17,r2
    cdc8:	003f5806 	br	cb2c <__alt_mem_Flash_flash_data+0xf400cb2c>
    cdcc:	1013883a 	mov	r9,r2
    cdd0:	003f3d06 	br	cac8 <__alt_mem_Flash_flash_data+0xf400cac8>
    cdd4:	1023883a 	mov	r17,r2
    cdd8:	003f2506 	br	ca70 <__alt_mem_Flash_flash_data+0xf400ca70>
    cddc:	317fe436 	bltu	r6,r5,cd70 <__alt_mem_Flash_flash_data+0xf400cd70>
    cde0:	0007883a 	mov	r3,zero
    cde4:	003f5106 	br	cb2c <__alt_mem_Flash_flash_data+0xf400cb2c>
    cde8:	1c07883a 	add	r3,r3,r16
    cdec:	993fffc4 	addi	r4,r19,-1
    cdf0:	1c000a2e 	bgeu	r3,r16,ce1c <__divdf3+0x760>
    cdf4:	2027883a 	mov	r19,r4
    cdf8:	19ff971e 	bne	r3,r7,cc58 <__alt_mem_Flash_flash_data+0xf400cc58>
    cdfc:	a8bf961e 	bne	r21,r2,cc58 <__alt_mem_Flash_flash_data+0xf400cc58>
    ce00:	003f9606 	br	cc5c <__alt_mem_Flash_flash_data+0xf400cc5c>
    ce04:	04ffffc4 	movi	r19,-1
    ce08:	003f9406 	br	cc5c <__alt_mem_Flash_flash_data+0xf400cc5c>
    ce0c:	100d883a 	mov	r6,r2
    ce10:	003f6106 	br	cb98 <__alt_mem_Flash_flash_data+0xf400cb98>
    ce14:	1013883a 	mov	r9,r2
    ce18:	003f7906 	br	cc00 <__alt_mem_Flash_flash_data+0xf400cc00>
    ce1c:	19c02636 	bltu	r3,r7,ceb8 <__divdf3+0x7fc>
    ce20:	38c04d26 	beq	r7,r3,cf58 <__divdf3+0x89c>
    ce24:	2027883a 	mov	r19,r4
    ce28:	003f8b06 	br	cc58 <__alt_mem_Flash_flash_data+0xf400cc58>
    ce2c:	e025883a 	mov	r18,fp
    ce30:	003f8a06 	br	cc5c <__alt_mem_Flash_flash_data+0xf400cc5c>
    ce34:	008007c4 	movi	r2,31
    ce38:	14002a16 	blt	r2,r16,cee4 <__divdf3+0x828>
    ce3c:	a5010784 	addi	r20,r20,1054
    ce40:	8d04983a 	sll	r2,r17,r20
    ce44:	9c06d83a 	srl	r3,r19,r16
    ce48:	9d28983a 	sll	r20,r19,r20
    ce4c:	8c20d83a 	srl	r16,r17,r16
    ce50:	1886b03a 	or	r3,r3,r2
    ce54:	a004c03a 	cmpne	r2,r20,zero
    ce58:	1884b03a 	or	r2,r3,r2
    ce5c:	10c001cc 	andi	r3,r2,7
    ce60:	18000726 	beq	r3,zero,ce80 <__divdf3+0x7c4>
    ce64:	110003cc 	andi	r4,r2,15
    ce68:	00c00104 	movi	r3,4
    ce6c:	20c00426 	beq	r4,r3,ce80 <__divdf3+0x7c4>
    ce70:	10c00104 	addi	r3,r2,4
    ce74:	1885803a 	cmpltu	r2,r3,r2
    ce78:	80a1883a 	add	r16,r16,r2
    ce7c:	1805883a 	mov	r2,r3
    ce80:	80c0202c 	andhi	r3,r16,128
    ce84:	18002d26 	beq	r3,zero,cf3c <__divdf3+0x880>
    ce88:	9180004c 	andi	r6,r18,1
    ce8c:	01000044 	movi	r4,1
    ce90:	000b883a 	mov	r5,zero
    ce94:	0027883a 	mov	r19,zero
    ce98:	003e6606 	br	c834 <__alt_mem_Flash_flash_data+0xf400c834>
    ce9c:	354d883a 	add	r6,r6,r21
    cea0:	356d803a 	cmpltu	r22,r6,r21
    cea4:	b42d883a 	add	r22,r22,r16
    cea8:	b12d883a 	add	r22,r22,r4
    ceac:	8c7fff84 	addi	r17,r17,-2
    ceb0:	b0c7c83a 	sub	r3,r22,r3
    ceb4:	003f1d06 	br	cb2c <__alt_mem_Flash_flash_data+0xf400cb2c>
    ceb8:	ad4b883a 	add	r5,r21,r21
    cebc:	2d6b803a 	cmpltu	r21,r5,r21
    cec0:	ac2b883a 	add	r21,r21,r16
    cec4:	1d47883a 	add	r3,r3,r21
    cec8:	993fff84 	addi	r4,r19,-2
    cecc:	282b883a 	mov	r21,r5
    ced0:	003fc806 	br	cdf4 <__alt_mem_Flash_flash_data+0xf400cdf4>
    ced4:	103fc41e 	bne	r2,zero,cde8 <__alt_mem_Flash_flash_data+0xf400cde8>
    ced8:	002b883a 	mov	r21,zero
    cedc:	a8bf5e1e 	bne	r21,r2,cc58 <__alt_mem_Flash_flash_data+0xf400cc58>
    cee0:	003f5e06 	br	cc5c <__alt_mem_Flash_flash_data+0xf400cc5c>
    cee4:	00bef884 	movi	r2,-1054
    cee8:	1505c83a 	sub	r2,r2,r20
    ceec:	00c00804 	movi	r3,32
    cef0:	8884d83a 	srl	r2,r17,r2
    cef4:	80c01c26 	beq	r16,r3,cf68 <__divdf3+0x8ac>
    cef8:	a0c10f84 	addi	r3,r20,1086
    cefc:	88c6983a 	sll	r3,r17,r3
    cf00:	1cc6b03a 	or	r3,r3,r19
    cf04:	1806c03a 	cmpne	r3,r3,zero
    cf08:	1884b03a 	or	r2,r3,r2
    cf0c:	140001cc 	andi	r16,r2,7
    cf10:	8000061e 	bne	r16,zero,cf2c <__divdf3+0x870>
    cf14:	000b883a 	mov	r5,zero
    cf18:	1004d0fa 	srli	r2,r2,3
    cf1c:	9180004c 	andi	r6,r18,1
    cf20:	0009883a 	mov	r4,zero
    cf24:	1426b03a 	or	r19,r2,r16
    cf28:	003e4206 	br	c834 <__alt_mem_Flash_flash_data+0xf400c834>
    cf2c:	110003cc 	andi	r4,r2,15
    cf30:	00c00104 	movi	r3,4
    cf34:	0021883a 	mov	r16,zero
    cf38:	20ffcd1e 	bne	r4,r3,ce70 <__alt_mem_Flash_flash_data+0xf400ce70>
    cf3c:	800a927a 	slli	r5,r16,9
    cf40:	8020977a 	slli	r16,r16,29
    cf44:	280ad33a 	srli	r5,r5,12
    cf48:	003ff306 	br	cf18 <__alt_mem_Flash_flash_data+0xf400cf18>
    cf4c:	317fd336 	bltu	r6,r5,ce9c <__alt_mem_Flash_flash_data+0xf400ce9c>
    cf50:	1023883a 	mov	r17,r2
    cf54:	003fa206 	br	cde0 <__alt_mem_Flash_flash_data+0xf400cde0>
    cf58:	a8bfd736 	bltu	r21,r2,ceb8 <__alt_mem_Flash_flash_data+0xf400ceb8>
    cf5c:	2027883a 	mov	r19,r4
    cf60:	a8bf3d1e 	bne	r21,r2,cc58 <__alt_mem_Flash_flash_data+0xf400cc58>
    cf64:	003f3d06 	br	cc5c <__alt_mem_Flash_flash_data+0xf400cc5c>
    cf68:	0007883a 	mov	r3,zero
    cf6c:	003fe406 	br	cf00 <__alt_mem_Flash_flash_data+0xf400cf00>
    cf70:	00800434 	movhi	r2,16
    cf74:	89400234 	orhi	r5,r17,8
    cf78:	10bfffc4 	addi	r2,r2,-1
    cf7c:	e00d883a 	mov	r6,fp
    cf80:	288a703a 	and	r5,r5,r2
    cf84:	003e8506 	br	c99c <__alt_mem_Flash_flash_data+0xf400c99c>

0000cf88 <__eqdf2>:
    cf88:	2804d53a 	srli	r2,r5,20
    cf8c:	3806d53a 	srli	r3,r7,20
    cf90:	02000434 	movhi	r8,16
    cf94:	423fffc4 	addi	r8,r8,-1
    cf98:	1081ffcc 	andi	r2,r2,2047
    cf9c:	0241ffc4 	movi	r9,2047
    cfa0:	2a14703a 	and	r10,r5,r8
    cfa4:	18c1ffcc 	andi	r3,r3,2047
    cfa8:	3a10703a 	and	r8,r7,r8
    cfac:	280ad7fa 	srli	r5,r5,31
    cfb0:	380ed7fa 	srli	r7,r7,31
    cfb4:	12400f26 	beq	r2,r9,cff4 <__eqdf2+0x6c>
    cfb8:	0241ffc4 	movi	r9,2047
    cfbc:	1a400326 	beq	r3,r9,cfcc <__eqdf2+0x44>
    cfc0:	10c00526 	beq	r2,r3,cfd8 <__eqdf2+0x50>
    cfc4:	00800044 	movi	r2,1
    cfc8:	f800283a 	ret
    cfcc:	4192b03a 	or	r9,r8,r6
    cfd0:	483ffc1e 	bne	r9,zero,cfc4 <__alt_mem_Flash_flash_data+0xf400cfc4>
    cfd4:	10fffb1e 	bne	r2,r3,cfc4 <__alt_mem_Flash_flash_data+0xf400cfc4>
    cfd8:	523ffa1e 	bne	r10,r8,cfc4 <__alt_mem_Flash_flash_data+0xf400cfc4>
    cfdc:	21bff91e 	bne	r4,r6,cfc4 <__alt_mem_Flash_flash_data+0xf400cfc4>
    cfe0:	29c00826 	beq	r5,r7,d004 <__eqdf2+0x7c>
    cfe4:	103ff71e 	bne	r2,zero,cfc4 <__alt_mem_Flash_flash_data+0xf400cfc4>
    cfe8:	5104b03a 	or	r2,r10,r4
    cfec:	1004c03a 	cmpne	r2,r2,zero
    cff0:	f800283a 	ret
    cff4:	5112b03a 	or	r9,r10,r4
    cff8:	483fef26 	beq	r9,zero,cfb8 <__alt_mem_Flash_flash_data+0xf400cfb8>
    cffc:	00800044 	movi	r2,1
    d000:	f800283a 	ret
    d004:	0005883a 	mov	r2,zero
    d008:	f800283a 	ret

0000d00c <__gedf2>:
    d00c:	2804d53a 	srli	r2,r5,20
    d010:	3806d53a 	srli	r3,r7,20
    d014:	02000434 	movhi	r8,16
    d018:	423fffc4 	addi	r8,r8,-1
    d01c:	0241ffc4 	movi	r9,2047
    d020:	1081ffcc 	andi	r2,r2,2047
    d024:	2a14703a 	and	r10,r5,r8
    d028:	1a46703a 	and	r3,r3,r9
    d02c:	3a10703a 	and	r8,r7,r8
    d030:	280ad7fa 	srli	r5,r5,31
    d034:	380ed7fa 	srli	r7,r7,31
    d038:	12400b26 	beq	r2,r9,d068 <__gedf2+0x5c>
    d03c:	1a401626 	beq	r3,r9,d098 <__gedf2+0x8c>
    d040:	10000c1e 	bne	r2,zero,d074 <__gedf2+0x68>
    d044:	5112b03a 	or	r9,r10,r4
    d048:	4813003a 	cmpeq	r9,r9,zero
    d04c:	4817883a 	mov	r11,r9
    d050:	18000c1e 	bne	r3,zero,d084 <__gedf2+0x78>
    d054:	4198b03a 	or	r12,r8,r6
    d058:	60000a1e 	bne	r12,zero,d084 <__gedf2+0x78>
    d05c:	48001326 	beq	r9,zero,d0ac <__gedf2+0xa0>
    d060:	0005883a 	mov	r2,zero
    d064:	f800283a 	ret
    d068:	5112b03a 	or	r9,r10,r4
    d06c:	4800191e 	bne	r9,zero,d0d4 <__gedf2+0xc8>
    d070:	18800926 	beq	r3,r2,d098 <__gedf2+0x8c>
    d074:	18000b1e 	bne	r3,zero,d0a4 <__gedf2+0x98>
    d078:	4192b03a 	or	r9,r8,r6
    d07c:	0017883a 	mov	r11,zero
    d080:	48000a26 	beq	r9,zero,d0ac <__gedf2+0xa0>
    d084:	39c03fcc 	andi	r7,r7,255
    d088:	58000726 	beq	r11,zero,d0a8 <__gedf2+0x9c>
    d08c:	3800081e 	bne	r7,zero,d0b0 <__gedf2+0xa4>
    d090:	00bfffc4 	movi	r2,-1
    d094:	f800283a 	ret
    d098:	4192b03a 	or	r9,r8,r6
    d09c:	48000d1e 	bne	r9,zero,d0d4 <__gedf2+0xc8>
    d0a0:	103fe826 	beq	r2,zero,d044 <__alt_mem_Flash_flash_data+0xf400d044>
    d0a4:	39c03fcc 	andi	r7,r7,255
    d0a8:	29c00326 	beq	r5,r7,d0b8 <__gedf2+0xac>
    d0ac:	283ff81e 	bne	r5,zero,d090 <__alt_mem_Flash_flash_data+0xf400d090>
    d0b0:	00800044 	movi	r2,1
    d0b4:	f800283a 	ret
    d0b8:	18bffc16 	blt	r3,r2,d0ac <__alt_mem_Flash_flash_data+0xf400d0ac>
    d0bc:	10c00316 	blt	r2,r3,d0cc <__gedf2+0xc0>
    d0c0:	42bffa36 	bltu	r8,r10,d0ac <__alt_mem_Flash_flash_data+0xf400d0ac>
    d0c4:	52000526 	beq	r10,r8,d0dc <__gedf2+0xd0>
    d0c8:	523fe52e 	bgeu	r10,r8,d060 <__alt_mem_Flash_flash_data+0xf400d060>
    d0cc:	283ff026 	beq	r5,zero,d090 <__alt_mem_Flash_flash_data+0xf400d090>
    d0d0:	003ff706 	br	d0b0 <__alt_mem_Flash_flash_data+0xf400d0b0>
    d0d4:	00bfff84 	movi	r2,-2
    d0d8:	f800283a 	ret
    d0dc:	313ff336 	bltu	r6,r4,d0ac <__alt_mem_Flash_flash_data+0xf400d0ac>
    d0e0:	21bfdf2e 	bgeu	r4,r6,d060 <__alt_mem_Flash_flash_data+0xf400d060>
    d0e4:	283fea26 	beq	r5,zero,d090 <__alt_mem_Flash_flash_data+0xf400d090>
    d0e8:	003ff106 	br	d0b0 <__alt_mem_Flash_flash_data+0xf400d0b0>

0000d0ec <__ledf2>:
    d0ec:	2804d53a 	srli	r2,r5,20
    d0f0:	3810d53a 	srli	r8,r7,20
    d0f4:	00c00434 	movhi	r3,16
    d0f8:	18ffffc4 	addi	r3,r3,-1
    d0fc:	0241ffc4 	movi	r9,2047
    d100:	1081ffcc 	andi	r2,r2,2047
    d104:	28d4703a 	and	r10,r5,r3
    d108:	4250703a 	and	r8,r8,r9
    d10c:	38c6703a 	and	r3,r7,r3
    d110:	280ad7fa 	srli	r5,r5,31
    d114:	380ed7fa 	srli	r7,r7,31
    d118:	12400b26 	beq	r2,r9,d148 <__ledf2+0x5c>
    d11c:	42401926 	beq	r8,r9,d184 <__ledf2+0x98>
    d120:	10000c1e 	bne	r2,zero,d154 <__ledf2+0x68>
    d124:	5112b03a 	or	r9,r10,r4
    d128:	4813003a 	cmpeq	r9,r9,zero
    d12c:	4817883a 	mov	r11,r9
    d130:	40000f26 	beq	r8,zero,d170 <__ledf2+0x84>
    d134:	39c03fcc 	andi	r7,r7,255
    d138:	58001826 	beq	r11,zero,d19c <__ledf2+0xb0>
    d13c:	38000a1e 	bne	r7,zero,d168 <__ledf2+0x7c>
    d140:	00bfffc4 	movi	r2,-1
    d144:	f800283a 	ret
    d148:	5112b03a 	or	r9,r10,r4
    d14c:	48000f1e 	bne	r9,zero,d18c <__ledf2+0xa0>
    d150:	40800c26 	beq	r8,r2,d184 <__ledf2+0x98>
    d154:	4000101e 	bne	r8,zero,d198 <__ledf2+0xac>
    d158:	1992b03a 	or	r9,r3,r6
    d15c:	0017883a 	mov	r11,zero
    d160:	483ff41e 	bne	r9,zero,d134 <__alt_mem_Flash_flash_data+0xf400d134>
    d164:	283ff61e 	bne	r5,zero,d140 <__alt_mem_Flash_flash_data+0xf400d140>
    d168:	00800044 	movi	r2,1
    d16c:	f800283a 	ret
    d170:	1998b03a 	or	r12,r3,r6
    d174:	603fef1e 	bne	r12,zero,d134 <__alt_mem_Flash_flash_data+0xf400d134>
    d178:	483ffa26 	beq	r9,zero,d164 <__alt_mem_Flash_flash_data+0xf400d164>
    d17c:	0005883a 	mov	r2,zero
    d180:	f800283a 	ret
    d184:	1992b03a 	or	r9,r3,r6
    d188:	48000226 	beq	r9,zero,d194 <__ledf2+0xa8>
    d18c:	00800084 	movi	r2,2
    d190:	f800283a 	ret
    d194:	103fe326 	beq	r2,zero,d124 <__alt_mem_Flash_flash_data+0xf400d124>
    d198:	39c03fcc 	andi	r7,r7,255
    d19c:	29fff11e 	bne	r5,r7,d164 <__alt_mem_Flash_flash_data+0xf400d164>
    d1a0:	40bff016 	blt	r8,r2,d164 <__alt_mem_Flash_flash_data+0xf400d164>
    d1a4:	12000316 	blt	r2,r8,d1b4 <__ledf2+0xc8>
    d1a8:	1abfee36 	bltu	r3,r10,d164 <__alt_mem_Flash_flash_data+0xf400d164>
    d1ac:	50c00326 	beq	r10,r3,d1bc <__ledf2+0xd0>
    d1b0:	50fff22e 	bgeu	r10,r3,d17c <__alt_mem_Flash_flash_data+0xf400d17c>
    d1b4:	283fe226 	beq	r5,zero,d140 <__alt_mem_Flash_flash_data+0xf400d140>
    d1b8:	003feb06 	br	d168 <__alt_mem_Flash_flash_data+0xf400d168>
    d1bc:	313fe936 	bltu	r6,r4,d164 <__alt_mem_Flash_flash_data+0xf400d164>
    d1c0:	21bfee2e 	bgeu	r4,r6,d17c <__alt_mem_Flash_flash_data+0xf400d17c>
    d1c4:	283fde26 	beq	r5,zero,d140 <__alt_mem_Flash_flash_data+0xf400d140>
    d1c8:	003fe706 	br	d168 <__alt_mem_Flash_flash_data+0xf400d168>

0000d1cc <__muldf3>:
    d1cc:	defff204 	addi	sp,sp,-56
    d1d0:	2804d53a 	srli	r2,r5,20
    d1d4:	dd800a15 	stw	r22,40(sp)
    d1d8:	282cd7fa 	srli	r22,r5,31
    d1dc:	dc000415 	stw	r16,16(sp)
    d1e0:	04000434 	movhi	r16,16
    d1e4:	df000c15 	stw	fp,48(sp)
    d1e8:	dd000815 	stw	r20,32(sp)
    d1ec:	dcc00715 	stw	r19,28(sp)
    d1f0:	dc800615 	stw	r18,24(sp)
    d1f4:	dc400515 	stw	r17,20(sp)
    d1f8:	843fffc4 	addi	r16,r16,-1
    d1fc:	dfc00d15 	stw	ra,52(sp)
    d200:	ddc00b15 	stw	r23,44(sp)
    d204:	dd400915 	stw	r21,36(sp)
    d208:	1501ffcc 	andi	r20,r2,2047
    d20c:	2023883a 	mov	r17,r4
    d210:	2025883a 	mov	r18,r4
    d214:	2c20703a 	and	r16,r5,r16
    d218:	b027883a 	mov	r19,r22
    d21c:	b7003fcc 	andi	fp,r22,255
    d220:	a0005926 	beq	r20,zero,d388 <__muldf3+0x1bc>
    d224:	0081ffc4 	movi	r2,2047
    d228:	a0803426 	beq	r20,r2,d2fc <__muldf3+0x130>
    d22c:	84000434 	orhi	r16,r16,16
    d230:	2004d77a 	srli	r2,r4,29
    d234:	802090fa 	slli	r16,r16,3
    d238:	202490fa 	slli	r18,r4,3
    d23c:	a53f0044 	addi	r20,r20,-1023
    d240:	80a0b03a 	or	r16,r16,r2
    d244:	002b883a 	mov	r21,zero
    d248:	0015883a 	mov	r10,zero
    d24c:	3812d53a 	srli	r9,r7,20
    d250:	3806d7fa 	srli	r3,r7,31
    d254:	02000434 	movhi	r8,16
    d258:	423fffc4 	addi	r8,r8,-1
    d25c:	4941ffcc 	andi	r5,r9,2047
    d260:	302f883a 	mov	r23,r6
    d264:	3a22703a 	and	r17,r7,r8
    d268:	1ac03fcc 	andi	r11,r3,255
    d26c:	28006226 	beq	r5,zero,d3f8 <__muldf3+0x22c>
    d270:	0081ffc4 	movi	r2,2047
    d274:	28805a26 	beq	r5,r2,d3e0 <__muldf3+0x214>
    d278:	8a000434 	orhi	r8,r17,16
    d27c:	3004d77a 	srli	r2,r6,29
    d280:	401090fa 	slli	r8,r8,3
    d284:	302e90fa 	slli	r23,r6,3
    d288:	297f0044 	addi	r5,r5,-1023
    d28c:	40a2b03a 	or	r17,r8,r2
    d290:	0013883a 	mov	r9,zero
    d294:	4d4cb03a 	or	r6,r9,r21
    d298:	300c90ba 	slli	r6,r6,2
    d29c:	02000074 	movhi	r8,1
    d2a0:	4234af04 	addi	r8,r8,-11588
    d2a4:	320d883a 	add	r6,r6,r8
    d2a8:	31800017 	ldw	r6,0(r6)
    d2ac:	a14b883a 	add	r5,r20,r5
    d2b0:	1dacf03a 	xor	r22,r3,r22
    d2b4:	2b000044 	addi	r12,r5,1
    d2b8:	3000683a 	jmp	r6
    d2bc:	0000d4f8 	rdprs	zero,zero,851
    d2c0:	0000d4e4 	muli	zero,zero,851
    d2c4:	0000d4e4 	muli	zero,zero,851
    d2c8:	0000d4d0 	cmplti	zero,zero,851
    d2cc:	0000d318 	cmpnei	zero,zero,844
    d2d0:	0000d318 	cmpnei	zero,zero,844
    d2d4:	0000d4b8 	rdprs	zero,zero,850
    d2d8:	0000d4d0 	cmplti	zero,zero,851
    d2dc:	0000d318 	cmpnei	zero,zero,844
    d2e0:	0000d4b8 	rdprs	zero,zero,850
    d2e4:	0000d318 	cmpnei	zero,zero,844
    d2e8:	0000d4d0 	cmplti	zero,zero,851
    d2ec:	0000d31c 	xori	zero,zero,844
    d2f0:	0000d31c 	xori	zero,zero,844
    d2f4:	0000d31c 	xori	zero,zero,844
    d2f8:	0000d6f4 	movhi	zero,859
    d2fc:	8104b03a 	or	r2,r16,r4
    d300:	10006a1e 	bne	r2,zero,d4ac <__muldf3+0x2e0>
    d304:	05400204 	movi	r21,8
    d308:	0021883a 	mov	r16,zero
    d30c:	0025883a 	mov	r18,zero
    d310:	02800084 	movi	r10,2
    d314:	003fcd06 	br	d24c <__alt_mem_Flash_flash_data+0xf400d24c>
    d318:	b039883a 	mov	fp,r22
    d31c:	00800084 	movi	r2,2
    d320:	50804e1e 	bne	r10,r2,d45c <__muldf3+0x290>
    d324:	e4c0004c 	andi	r19,fp,1
    d328:	0101ffc4 	movi	r4,2047
    d32c:	0021883a 	mov	r16,zero
    d330:	0025883a 	mov	r18,zero
    d334:	2008953a 	slli	r4,r4,20
    d338:	98c03fcc 	andi	r3,r19,255
    d33c:	01400434 	movhi	r5,16
    d340:	297fffc4 	addi	r5,r5,-1
    d344:	180697fa 	slli	r3,r3,31
    d348:	8160703a 	and	r16,r16,r5
    d34c:	8120b03a 	or	r16,r16,r4
    d350:	80c6b03a 	or	r3,r16,r3
    d354:	9005883a 	mov	r2,r18
    d358:	dfc00d17 	ldw	ra,52(sp)
    d35c:	df000c17 	ldw	fp,48(sp)
    d360:	ddc00b17 	ldw	r23,44(sp)
    d364:	dd800a17 	ldw	r22,40(sp)
    d368:	dd400917 	ldw	r21,36(sp)
    d36c:	dd000817 	ldw	r20,32(sp)
    d370:	dcc00717 	ldw	r19,28(sp)
    d374:	dc800617 	ldw	r18,24(sp)
    d378:	dc400517 	ldw	r17,20(sp)
    d37c:	dc000417 	ldw	r16,16(sp)
    d380:	dec00e04 	addi	sp,sp,56
    d384:	f800283a 	ret
    d388:	8104b03a 	or	r2,r16,r4
    d38c:	10004226 	beq	r2,zero,d498 <__muldf3+0x2cc>
    d390:	8000f926 	beq	r16,zero,d778 <__muldf3+0x5ac>
    d394:	8009883a 	mov	r4,r16
    d398:	d9800315 	stw	r6,12(sp)
    d39c:	d9c00015 	stw	r7,0(sp)
    d3a0:	000e3bc0 	call	e3bc <__clzsi2>
    d3a4:	d9800317 	ldw	r6,12(sp)
    d3a8:	d9c00017 	ldw	r7,0(sp)
    d3ac:	1007883a 	mov	r3,r2
    d3b0:	01000a04 	movi	r4,40
    d3b4:	18bffe04 	addi	r2,r3,-8
    d3b8:	20c9c83a 	sub	r4,r4,r3
    d3bc:	80a0983a 	sll	r16,r16,r2
    d3c0:	8908d83a 	srl	r4,r17,r4
    d3c4:	88a4983a 	sll	r18,r17,r2
    d3c8:	2420b03a 	or	r16,r4,r16
    d3cc:	017f0344 	movi	r5,-1011
    d3d0:	28e9c83a 	sub	r20,r5,r3
    d3d4:	002b883a 	mov	r21,zero
    d3d8:	0015883a 	mov	r10,zero
    d3dc:	003f9b06 	br	d24c <__alt_mem_Flash_flash_data+0xf400d24c>
    d3e0:	8984b03a 	or	r2,r17,r6
    d3e4:	10002a1e 	bne	r2,zero,d490 <__muldf3+0x2c4>
    d3e8:	0023883a 	mov	r17,zero
    d3ec:	002f883a 	mov	r23,zero
    d3f0:	02400084 	movi	r9,2
    d3f4:	003fa706 	br	d294 <__alt_mem_Flash_flash_data+0xf400d294>
    d3f8:	8984b03a 	or	r2,r17,r6
    d3fc:	10002026 	beq	r2,zero,d480 <__muldf3+0x2b4>
    d400:	8800cc26 	beq	r17,zero,d734 <__muldf3+0x568>
    d404:	8809883a 	mov	r4,r17
    d408:	d8c00215 	stw	r3,8(sp)
    d40c:	d9800315 	stw	r6,12(sp)
    d410:	da800015 	stw	r10,0(sp)
    d414:	dac00115 	stw	r11,4(sp)
    d418:	000e3bc0 	call	e3bc <__clzsi2>
    d41c:	d8c00217 	ldw	r3,8(sp)
    d420:	d9800317 	ldw	r6,12(sp)
    d424:	da800017 	ldw	r10,0(sp)
    d428:	dac00117 	ldw	r11,4(sp)
    d42c:	1009883a 	mov	r4,r2
    d430:	01400a04 	movi	r5,40
    d434:	25fffe04 	addi	r23,r4,-8
    d438:	290bc83a 	sub	r5,r5,r4
    d43c:	8dd0983a 	sll	r8,r17,r23
    d440:	314ad83a 	srl	r5,r6,r5
    d444:	35ee983a 	sll	r23,r6,r23
    d448:	2a22b03a 	or	r17,r5,r8
    d44c:	017f0344 	movi	r5,-1011
    d450:	290bc83a 	sub	r5,r5,r4
    d454:	0013883a 	mov	r9,zero
    d458:	003f8e06 	br	d294 <__alt_mem_Flash_flash_data+0xf400d294>
    d45c:	008000c4 	movi	r2,3
    d460:	50811d26 	beq	r10,r2,d8d8 <__muldf3+0x70c>
    d464:	00800044 	movi	r2,1
    d468:	5080e01e 	bne	r10,r2,d7ec <__muldf3+0x620>
    d46c:	e0a6703a 	and	r19,fp,r2
    d470:	0009883a 	mov	r4,zero
    d474:	0021883a 	mov	r16,zero
    d478:	0025883a 	mov	r18,zero
    d47c:	003fad06 	br	d334 <__alt_mem_Flash_flash_data+0xf400d334>
    d480:	0023883a 	mov	r17,zero
    d484:	002f883a 	mov	r23,zero
    d488:	02400044 	movi	r9,1
    d48c:	003f8106 	br	d294 <__alt_mem_Flash_flash_data+0xf400d294>
    d490:	024000c4 	movi	r9,3
    d494:	003f7f06 	br	d294 <__alt_mem_Flash_flash_data+0xf400d294>
    d498:	05400104 	movi	r21,4
    d49c:	0021883a 	mov	r16,zero
    d4a0:	0025883a 	mov	r18,zero
    d4a4:	02800044 	movi	r10,1
    d4a8:	003f6806 	br	d24c <__alt_mem_Flash_flash_data+0xf400d24c>
    d4ac:	05400304 	movi	r21,12
    d4b0:	028000c4 	movi	r10,3
    d4b4:	003f6506 	br	d24c <__alt_mem_Flash_flash_data+0xf400d24c>
    d4b8:	04000434 	movhi	r16,16
    d4bc:	0027883a 	mov	r19,zero
    d4c0:	843fffc4 	addi	r16,r16,-1
    d4c4:	04bfffc4 	movi	r18,-1
    d4c8:	0101ffc4 	movi	r4,2047
    d4cc:	003f9906 	br	d334 <__alt_mem_Flash_flash_data+0xf400d334>
    d4d0:	8821883a 	mov	r16,r17
    d4d4:	b825883a 	mov	r18,r23
    d4d8:	5839883a 	mov	fp,r11
    d4dc:	4815883a 	mov	r10,r9
    d4e0:	003f8e06 	br	d31c <__alt_mem_Flash_flash_data+0xf400d31c>
    d4e4:	8821883a 	mov	r16,r17
    d4e8:	b825883a 	mov	r18,r23
    d4ec:	b039883a 	mov	fp,r22
    d4f0:	4815883a 	mov	r10,r9
    d4f4:	003f8906 	br	d31c <__alt_mem_Flash_flash_data+0xf400d31c>
    d4f8:	b80cd43a 	srli	r6,r23,16
    d4fc:	9006d43a 	srli	r3,r18,16
    d500:	90bfffcc 	andi	r2,r18,65535
    d504:	bdffffcc 	andi	r23,r23,65535
    d508:	b891383a 	mul	r8,r23,r2
    d50c:	b8c9383a 	mul	r4,r23,r3
    d510:	309b383a 	mul	r13,r6,r2
    d514:	400ed43a 	srli	r7,r8,16
    d518:	30df383a 	mul	r15,r6,r3
    d51c:	235b883a 	add	r13,r4,r13
    d520:	69db883a 	add	r13,r13,r7
    d524:	6900022e 	bgeu	r13,r4,d530 <__muldf3+0x364>
    d528:	01000074 	movhi	r4,1
    d52c:	791f883a 	add	r15,r15,r4
    d530:	8828d43a 	srli	r20,r17,16
    d534:	8c7fffcc 	andi	r17,r17,65535
    d538:	888f383a 	mul	r7,r17,r2
    d53c:	88d3383a 	mul	r9,r17,r3
    d540:	a0a5383a 	mul	r18,r20,r2
    d544:	3816d43a 	srli	r11,r7,16
    d548:	6814943a 	slli	r10,r13,16
    d54c:	4ca5883a 	add	r18,r9,r18
    d550:	423fffcc 	andi	r8,r8,65535
    d554:	92e5883a 	add	r18,r18,r11
    d558:	6808d43a 	srli	r4,r13,16
    d55c:	5215883a 	add	r10,r10,r8
    d560:	a0c7383a 	mul	r3,r20,r3
    d564:	9240022e 	bgeu	r18,r9,d570 <__muldf3+0x3a4>
    d568:	00800074 	movhi	r2,1
    d56c:	1887883a 	add	r3,r3,r2
    d570:	802ad43a 	srli	r21,r16,16
    d574:	80bfffcc 	andi	r2,r16,65535
    d578:	b893383a 	mul	r9,r23,r2
    d57c:	3091383a 	mul	r8,r6,r2
    d580:	bd6f383a 	mul	r23,r23,r21
    d584:	9026943a 	slli	r19,r18,16
    d588:	481ad43a 	srli	r13,r9,16
    d58c:	9024d43a 	srli	r18,r18,16
    d590:	39ffffcc 	andi	r7,r7,65535
    d594:	ba11883a 	add	r8,r23,r8
    d598:	99e7883a 	add	r19,r19,r7
    d59c:	4351883a 	add	r8,r8,r13
    d5a0:	1c97883a 	add	r11,r3,r18
    d5a4:	354d383a 	mul	r6,r6,r21
    d5a8:	9925883a 	add	r18,r19,r4
    d5ac:	45c0022e 	bgeu	r8,r23,d5b8 <__muldf3+0x3ec>
    d5b0:	00c00074 	movhi	r3,1
    d5b4:	30cd883a 	add	r6,r6,r3
    d5b8:	8889383a 	mul	r4,r17,r2
    d5bc:	8d63383a 	mul	r17,r17,r21
    d5c0:	a085383a 	mul	r2,r20,r2
    d5c4:	200ed43a 	srli	r7,r4,16
    d5c8:	401cd43a 	srli	r14,r8,16
    d5cc:	401a943a 	slli	r13,r8,16
    d5d0:	8885883a 	add	r2,r17,r2
    d5d4:	4a3fffcc 	andi	r8,r9,65535
    d5d8:	11c5883a 	add	r2,r2,r7
    d5dc:	339d883a 	add	r14,r6,r14
    d5e0:	6a11883a 	add	r8,r13,r8
    d5e4:	a561383a 	mul	r16,r20,r21
    d5e8:	1440022e 	bgeu	r2,r17,d5f4 <__muldf3+0x428>
    d5ec:	00c00074 	movhi	r3,1
    d5f0:	80e1883a 	add	r16,r16,r3
    d5f4:	1006943a 	slli	r3,r2,16
    d5f8:	213fffcc 	andi	r4,r4,65535
    d5fc:	93db883a 	add	r13,r18,r15
    d600:	1909883a 	add	r4,r3,r4
    d604:	22c7883a 	add	r3,r4,r11
    d608:	6cd3803a 	cmpltu	r9,r13,r19
    d60c:	6a09883a 	add	r4,r13,r8
    d610:	1a5b883a 	add	r13,r3,r9
    d614:	2211803a 	cmpltu	r8,r4,r8
    d618:	734d883a 	add	r6,r14,r13
    d61c:	100ed43a 	srli	r7,r2,16
    d620:	6a53803a 	cmpltu	r9,r13,r9
    d624:	3205883a 	add	r2,r6,r8
    d628:	1ac7803a 	cmpltu	r3,r3,r11
    d62c:	1211803a 	cmpltu	r8,r2,r8
    d630:	48c6b03a 	or	r3,r9,r3
    d634:	338d803a 	cmpltu	r6,r6,r14
    d638:	19c7883a 	add	r3,r3,r7
    d63c:	418cb03a 	or	r6,r8,r6
    d640:	1987883a 	add	r3,r3,r6
    d644:	2024927a 	slli	r18,r4,9
    d648:	1c07883a 	add	r3,r3,r16
    d64c:	1806927a 	slli	r3,r3,9
    d650:	1020d5fa 	srli	r16,r2,23
    d654:	2008d5fa 	srli	r4,r4,23
    d658:	9294b03a 	or	r10,r18,r10
    d65c:	1004927a 	slli	r2,r2,9
    d660:	5024c03a 	cmpne	r18,r10,zero
    d664:	1c20b03a 	or	r16,r3,r16
    d668:	9108b03a 	or	r4,r18,r4
    d66c:	80c0402c 	andhi	r3,r16,256
    d670:	20a4b03a 	or	r18,r4,r2
    d674:	18000726 	beq	r3,zero,d694 <__muldf3+0x4c8>
    d678:	9006d07a 	srli	r3,r18,1
    d67c:	800897fa 	slli	r4,r16,31
    d680:	9080004c 	andi	r2,r18,1
    d684:	8020d07a 	srli	r16,r16,1
    d688:	10c4b03a 	or	r2,r2,r3
    d68c:	1124b03a 	or	r18,r2,r4
    d690:	600b883a 	mov	r5,r12
    d694:	2900ffc4 	addi	r4,r5,1023
    d698:	01004b0e 	bge	zero,r4,d7c8 <__muldf3+0x5fc>
    d69c:	908001cc 	andi	r2,r18,7
    d6a0:	10000726 	beq	r2,zero,d6c0 <__muldf3+0x4f4>
    d6a4:	90c003cc 	andi	r3,r18,15
    d6a8:	00800104 	movi	r2,4
    d6ac:	18800426 	beq	r3,r2,d6c0 <__muldf3+0x4f4>
    d6b0:	9087883a 	add	r3,r18,r2
    d6b4:	1c85803a 	cmpltu	r2,r3,r18
    d6b8:	80a1883a 	add	r16,r16,r2
    d6bc:	1825883a 	mov	r18,r3
    d6c0:	8080402c 	andhi	r2,r16,256
    d6c4:	10000426 	beq	r2,zero,d6d8 <__muldf3+0x50c>
    d6c8:	00bfc034 	movhi	r2,65280
    d6cc:	10bfffc4 	addi	r2,r2,-1
    d6d0:	29010004 	addi	r4,r5,1024
    d6d4:	80a0703a 	and	r16,r16,r2
    d6d8:	0081ff84 	movi	r2,2046
    d6dc:	1100320e 	bge	r2,r4,d7a8 <__muldf3+0x5dc>
    d6e0:	b4c0004c 	andi	r19,r22,1
    d6e4:	0101ffc4 	movi	r4,2047
    d6e8:	0021883a 	mov	r16,zero
    d6ec:	0025883a 	mov	r18,zero
    d6f0:	003f1006 	br	d334 <__alt_mem_Flash_flash_data+0xf400d334>
    d6f4:	8080022c 	andhi	r2,r16,8
    d6f8:	10000926 	beq	r2,zero,d720 <__muldf3+0x554>
    d6fc:	8880022c 	andhi	r2,r17,8
    d700:	1000071e 	bne	r2,zero,d720 <__muldf3+0x554>
    d704:	00800434 	movhi	r2,16
    d708:	8c000234 	orhi	r16,r17,8
    d70c:	10bfffc4 	addi	r2,r2,-1
    d710:	1827883a 	mov	r19,r3
    d714:	80a0703a 	and	r16,r16,r2
    d718:	b825883a 	mov	r18,r23
    d71c:	003f6a06 	br	d4c8 <__alt_mem_Flash_flash_data+0xf400d4c8>
    d720:	00800434 	movhi	r2,16
    d724:	84000234 	orhi	r16,r16,8
    d728:	10bfffc4 	addi	r2,r2,-1
    d72c:	80a0703a 	and	r16,r16,r2
    d730:	003f6506 	br	d4c8 <__alt_mem_Flash_flash_data+0xf400d4c8>
    d734:	3009883a 	mov	r4,r6
    d738:	d8c00215 	stw	r3,8(sp)
    d73c:	d9800315 	stw	r6,12(sp)
    d740:	da800015 	stw	r10,0(sp)
    d744:	dac00115 	stw	r11,4(sp)
    d748:	000e3bc0 	call	e3bc <__clzsi2>
    d74c:	11000804 	addi	r4,r2,32
    d750:	014009c4 	movi	r5,39
    d754:	d8c00217 	ldw	r3,8(sp)
    d758:	d9800317 	ldw	r6,12(sp)
    d75c:	da800017 	ldw	r10,0(sp)
    d760:	dac00117 	ldw	r11,4(sp)
    d764:	293f320e 	bge	r5,r4,d430 <__alt_mem_Flash_flash_data+0xf400d430>
    d768:	10bffe04 	addi	r2,r2,-8
    d76c:	b8a2983a 	sll	r17,r23,r2
    d770:	002f883a 	mov	r23,zero
    d774:	003f3506 	br	d44c <__alt_mem_Flash_flash_data+0xf400d44c>
    d778:	d9800315 	stw	r6,12(sp)
    d77c:	d9c00015 	stw	r7,0(sp)
    d780:	000e3bc0 	call	e3bc <__clzsi2>
    d784:	10c00804 	addi	r3,r2,32
    d788:	010009c4 	movi	r4,39
    d78c:	d9800317 	ldw	r6,12(sp)
    d790:	d9c00017 	ldw	r7,0(sp)
    d794:	20ff060e 	bge	r4,r3,d3b0 <__alt_mem_Flash_flash_data+0xf400d3b0>
    d798:	10bffe04 	addi	r2,r2,-8
    d79c:	88a0983a 	sll	r16,r17,r2
    d7a0:	0025883a 	mov	r18,zero
    d7a4:	003f0906 	br	d3cc <__alt_mem_Flash_flash_data+0xf400d3cc>
    d7a8:	9004d0fa 	srli	r2,r18,3
    d7ac:	8024977a 	slli	r18,r16,29
    d7b0:	8020927a 	slli	r16,r16,9
    d7b4:	2101ffcc 	andi	r4,r4,2047
    d7b8:	90a4b03a 	or	r18,r18,r2
    d7bc:	8020d33a 	srli	r16,r16,12
    d7c0:	b4c0004c 	andi	r19,r22,1
    d7c4:	003edb06 	br	d334 <__alt_mem_Flash_flash_data+0xf400d334>
    d7c8:	00ff0084 	movi	r3,-1022
    d7cc:	1947c83a 	sub	r3,r3,r5
    d7d0:	00800e04 	movi	r2,56
    d7d4:	10c0080e 	bge	r2,r3,d7f8 <__muldf3+0x62c>
    d7d8:	b4c0004c 	andi	r19,r22,1
    d7dc:	0009883a 	mov	r4,zero
    d7e0:	0021883a 	mov	r16,zero
    d7e4:	0025883a 	mov	r18,zero
    d7e8:	003ed206 	br	d334 <__alt_mem_Flash_flash_data+0xf400d334>
    d7ec:	600b883a 	mov	r5,r12
    d7f0:	e02d883a 	mov	r22,fp
    d7f4:	003fa706 	br	d694 <__alt_mem_Flash_flash_data+0xf400d694>
    d7f8:	008007c4 	movi	r2,31
    d7fc:	10c01816 	blt	r2,r3,d860 <__muldf3+0x694>
    d800:	29410784 	addi	r5,r5,1054
    d804:	8144983a 	sll	r2,r16,r5
    d808:	90c8d83a 	srl	r4,r18,r3
    d80c:	914a983a 	sll	r5,r18,r5
    d810:	80c6d83a 	srl	r3,r16,r3
    d814:	2088b03a 	or	r4,r4,r2
    d818:	2804c03a 	cmpne	r2,r5,zero
    d81c:	2084b03a 	or	r2,r4,r2
    d820:	110001cc 	andi	r4,r2,7
    d824:	20000726 	beq	r4,zero,d844 <__muldf3+0x678>
    d828:	114003cc 	andi	r5,r2,15
    d82c:	01000104 	movi	r4,4
    d830:	29000426 	beq	r5,r4,d844 <__muldf3+0x678>
    d834:	11000104 	addi	r4,r2,4
    d838:	2085803a 	cmpltu	r2,r4,r2
    d83c:	1887883a 	add	r3,r3,r2
    d840:	2005883a 	mov	r2,r4
    d844:	1900202c 	andhi	r4,r3,128
    d848:	20001826 	beq	r4,zero,d8ac <__muldf3+0x6e0>
    d84c:	b4c0004c 	andi	r19,r22,1
    d850:	01000044 	movi	r4,1
    d854:	0021883a 	mov	r16,zero
    d858:	0025883a 	mov	r18,zero
    d85c:	003eb506 	br	d334 <__alt_mem_Flash_flash_data+0xf400d334>
    d860:	00bef884 	movi	r2,-1054
    d864:	1145c83a 	sub	r2,r2,r5
    d868:	8088d83a 	srl	r4,r16,r2
    d86c:	00800804 	movi	r2,32
    d870:	18801726 	beq	r3,r2,d8d0 <__muldf3+0x704>
    d874:	28810f84 	addi	r2,r5,1086
    d878:	8084983a 	sll	r2,r16,r2
    d87c:	1484b03a 	or	r2,r2,r18
    d880:	1004c03a 	cmpne	r2,r2,zero
    d884:	1104b03a 	or	r2,r2,r4
    d888:	10c001cc 	andi	r3,r2,7
    d88c:	18000b1e 	bne	r3,zero,d8bc <__muldf3+0x6f0>
    d890:	0021883a 	mov	r16,zero
    d894:	1004d0fa 	srli	r2,r2,3
    d898:	b4c0004c 	andi	r19,r22,1
    d89c:	0009883a 	mov	r4,zero
    d8a0:	10e4b03a 	or	r18,r2,r3
    d8a4:	003ea306 	br	d334 <__alt_mem_Flash_flash_data+0xf400d334>
    d8a8:	0007883a 	mov	r3,zero
    d8ac:	1820927a 	slli	r16,r3,9
    d8b0:	1806977a 	slli	r3,r3,29
    d8b4:	8020d33a 	srli	r16,r16,12
    d8b8:	003ff606 	br	d894 <__alt_mem_Flash_flash_data+0xf400d894>
    d8bc:	110003cc 	andi	r4,r2,15
    d8c0:	00c00104 	movi	r3,4
    d8c4:	20fff826 	beq	r4,r3,d8a8 <__alt_mem_Flash_flash_data+0xf400d8a8>
    d8c8:	0007883a 	mov	r3,zero
    d8cc:	003fd906 	br	d834 <__alt_mem_Flash_flash_data+0xf400d834>
    d8d0:	0005883a 	mov	r2,zero
    d8d4:	003fe906 	br	d87c <__alt_mem_Flash_flash_data+0xf400d87c>
    d8d8:	00800434 	movhi	r2,16
    d8dc:	84000234 	orhi	r16,r16,8
    d8e0:	10bfffc4 	addi	r2,r2,-1
    d8e4:	e4c0004c 	andi	r19,fp,1
    d8e8:	80a0703a 	and	r16,r16,r2
    d8ec:	003ef606 	br	d4c8 <__alt_mem_Flash_flash_data+0xf400d4c8>

0000d8f0 <__subdf3>:
    d8f0:	00c00434 	movhi	r3,16
    d8f4:	18ffffc4 	addi	r3,r3,-1
    d8f8:	defffb04 	addi	sp,sp,-20
    d8fc:	28d2703a 	and	r9,r5,r3
    d900:	3814d53a 	srli	r10,r7,20
    d904:	38c6703a 	and	r3,r7,r3
    d908:	3004d77a 	srli	r2,r6,29
    d90c:	dc800215 	stw	r18,8(sp)
    d910:	dc000015 	stw	r16,0(sp)
    d914:	2824d7fa 	srli	r18,r5,31
    d918:	2820d53a 	srli	r16,r5,20
    d91c:	481290fa 	slli	r9,r9,3
    d920:	200ad77a 	srli	r5,r4,29
    d924:	180690fa 	slli	r3,r3,3
    d928:	dc400115 	stw	r17,4(sp)
    d92c:	dfc00415 	stw	ra,16(sp)
    d930:	202290fa 	slli	r17,r4,3
    d934:	dcc00315 	stw	r19,12(sp)
    d938:	5281ffcc 	andi	r10,r10,2047
    d93c:	0101ffc4 	movi	r4,2047
    d940:	9011883a 	mov	r8,r18
    d944:	8401ffcc 	andi	r16,r16,2047
    d948:	94803fcc 	andi	r18,r18,255
    d94c:	494ab03a 	or	r5,r9,r5
    d950:	380ed7fa 	srli	r7,r7,31
    d954:	1886b03a 	or	r3,r3,r2
    d958:	300c90fa 	slli	r6,r6,3
    d95c:	51009026 	beq	r10,r4,dba0 <__subdf3+0x2b0>
    d960:	39c0005c 	xori	r7,r7,1
    d964:	8285c83a 	sub	r2,r16,r10
    d968:	91c06f26 	beq	r18,r7,db28 <__subdf3+0x238>
    d96c:	0080b10e 	bge	zero,r2,dc34 <__subdf3+0x344>
    d970:	50002a1e 	bne	r10,zero,da1c <__subdf3+0x12c>
    d974:	1988b03a 	or	r4,r3,r6
    d978:	2000941e 	bne	r4,zero,dbcc <__subdf3+0x2dc>
    d97c:	888001cc 	andi	r2,r17,7
    d980:	10005b26 	beq	r2,zero,daf0 <__subdf3+0x200>
    d984:	88c003cc 	andi	r3,r17,15
    d988:	00800104 	movi	r2,4
    d98c:	18805826 	beq	r3,r2,daf0 <__subdf3+0x200>
    d990:	88c00104 	addi	r3,r17,4
    d994:	1c63803a 	cmpltu	r17,r3,r17
    d998:	2c4b883a 	add	r5,r5,r17
    d99c:	2880202c 	andhi	r2,r5,128
    d9a0:	9200004c 	andi	r8,r18,1
    d9a4:	1823883a 	mov	r17,r3
    d9a8:	10005426 	beq	r2,zero,dafc <__subdf3+0x20c>
    d9ac:	84000044 	addi	r16,r16,1
    d9b0:	0081ffc4 	movi	r2,2047
    d9b4:	8080bf26 	beq	r16,r2,dcb4 <__subdf3+0x3c4>
    d9b8:	013fe034 	movhi	r4,65408
    d9bc:	213fffc4 	addi	r4,r4,-1
    d9c0:	290a703a 	and	r5,r5,r4
    d9c4:	2804977a 	slli	r2,r5,29
    d9c8:	280a927a 	slli	r5,r5,9
    d9cc:	8822d0fa 	srli	r17,r17,3
    d9d0:	8401ffcc 	andi	r16,r16,2047
    d9d4:	2808d33a 	srli	r4,r5,12
    d9d8:	1444b03a 	or	r2,r2,r17
    d9dc:	8401ffcc 	andi	r16,r16,2047
    d9e0:	800a953a 	slli	r5,r16,20
    d9e4:	40c03fcc 	andi	r3,r8,255
    d9e8:	04000434 	movhi	r16,16
    d9ec:	180697fa 	slli	r3,r3,31
    d9f0:	843fffc4 	addi	r16,r16,-1
    d9f4:	2420703a 	and	r16,r4,r16
    d9f8:	8160b03a 	or	r16,r16,r5
    d9fc:	80c6b03a 	or	r3,r16,r3
    da00:	dfc00417 	ldw	ra,16(sp)
    da04:	dcc00317 	ldw	r19,12(sp)
    da08:	dc800217 	ldw	r18,8(sp)
    da0c:	dc400117 	ldw	r17,4(sp)
    da10:	dc000017 	ldw	r16,0(sp)
    da14:	dec00504 	addi	sp,sp,20
    da18:	f800283a 	ret
    da1c:	0101ffc4 	movi	r4,2047
    da20:	813fd626 	beq	r16,r4,d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    da24:	18c02034 	orhi	r3,r3,128
    da28:	01000e04 	movi	r4,56
    da2c:	2080a416 	blt	r4,r2,dcc0 <__subdf3+0x3d0>
    da30:	010007c4 	movi	r4,31
    da34:	2080c716 	blt	r4,r2,dd54 <__subdf3+0x464>
    da38:	01000804 	movi	r4,32
    da3c:	2089c83a 	sub	r4,r4,r2
    da40:	1910983a 	sll	r8,r3,r4
    da44:	308ed83a 	srl	r7,r6,r2
    da48:	3108983a 	sll	r4,r6,r4
    da4c:	1884d83a 	srl	r2,r3,r2
    da50:	41ccb03a 	or	r6,r8,r7
    da54:	2008c03a 	cmpne	r4,r4,zero
    da58:	310cb03a 	or	r6,r6,r4
    da5c:	898dc83a 	sub	r6,r17,r6
    da60:	89a3803a 	cmpltu	r17,r17,r6
    da64:	288bc83a 	sub	r5,r5,r2
    da68:	2c4bc83a 	sub	r5,r5,r17
    da6c:	3023883a 	mov	r17,r6
    da70:	2880202c 	andhi	r2,r5,128
    da74:	10006b26 	beq	r2,zero,dc24 <__subdf3+0x334>
    da78:	04c02034 	movhi	r19,128
    da7c:	9cffffc4 	addi	r19,r19,-1
    da80:	2ce6703a 	and	r19,r5,r19
    da84:	98007c26 	beq	r19,zero,dc78 <__subdf3+0x388>
    da88:	9809883a 	mov	r4,r19
    da8c:	000e3bc0 	call	e3bc <__clzsi2>
    da90:	10fffe04 	addi	r3,r2,-8
    da94:	010007c4 	movi	r4,31
    da98:	20c07d16 	blt	r4,r3,dc90 <__subdf3+0x3a0>
    da9c:	01400a04 	movi	r5,40
    daa0:	2885c83a 	sub	r2,r5,r2
    daa4:	888ad83a 	srl	r5,r17,r2
    daa8:	98e6983a 	sll	r19,r19,r3
    daac:	88e2983a 	sll	r17,r17,r3
    dab0:	2ce6b03a 	or	r19,r5,r19
    dab4:	1c007a16 	blt	r3,r16,dca0 <__subdf3+0x3b0>
    dab8:	1c21c83a 	sub	r16,r3,r16
    dabc:	81400044 	addi	r5,r16,1
    dac0:	00c007c4 	movi	r3,31
    dac4:	19409616 	blt	r3,r5,dd20 <__subdf3+0x430>
    dac8:	1c21c83a 	sub	r16,r3,r16
    dacc:	8c08983a 	sll	r4,r17,r16
    dad0:	8946d83a 	srl	r3,r17,r5
    dad4:	9c20983a 	sll	r16,r19,r16
    dad8:	2008c03a 	cmpne	r4,r4,zero
    dadc:	994ad83a 	srl	r5,r19,r5
    dae0:	1c06b03a 	or	r3,r3,r16
    dae4:	1922b03a 	or	r17,r3,r4
    dae8:	0021883a 	mov	r16,zero
    daec:	003fa306 	br	d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    daf0:	2880202c 	andhi	r2,r5,128
    daf4:	9200004c 	andi	r8,r18,1
    daf8:	103fac1e 	bne	r2,zero,d9ac <__alt_mem_Flash_flash_data+0xf400d9ac>
    dafc:	2804977a 	slli	r2,r5,29
    db00:	8822d0fa 	srli	r17,r17,3
    db04:	00c1ffc4 	movi	r3,2047
    db08:	280ad0fa 	srli	r5,r5,3
    db0c:	1444b03a 	or	r2,r2,r17
    db10:	80c02726 	beq	r16,r3,dbb0 <__subdf3+0x2c0>
    db14:	01000434 	movhi	r4,16
    db18:	213fffc4 	addi	r4,r4,-1
    db1c:	80e0703a 	and	r16,r16,r3
    db20:	2908703a 	and	r4,r5,r4
    db24:	003fad06 	br	d9dc <__alt_mem_Flash_flash_data+0xf400d9dc>
    db28:	0080690e 	bge	zero,r2,dcd0 <__subdf3+0x3e0>
    db2c:	50002f26 	beq	r10,zero,dbec <__subdf3+0x2fc>
    db30:	0101ffc4 	movi	r4,2047
    db34:	813f9126 	beq	r16,r4,d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    db38:	18c02034 	orhi	r3,r3,128
    db3c:	01000e04 	movi	r4,56
    db40:	2080b00e 	bge	r4,r2,de04 <__subdf3+0x514>
    db44:	198cb03a 	or	r6,r3,r6
    db48:	300ec03a 	cmpne	r7,r6,zero
    db4c:	0005883a 	mov	r2,zero
    db50:	3c4f883a 	add	r7,r7,r17
    db54:	3c63803a 	cmpltu	r17,r7,r17
    db58:	114b883a 	add	r5,r2,r5
    db5c:	2c4b883a 	add	r5,r5,r17
    db60:	3823883a 	mov	r17,r7
    db64:	2880202c 	andhi	r2,r5,128
    db68:	10002e26 	beq	r2,zero,dc24 <__subdf3+0x334>
    db6c:	84000044 	addi	r16,r16,1
    db70:	0081ffc4 	movi	r2,2047
    db74:	8080de26 	beq	r16,r2,def0 <__subdf3+0x600>
    db78:	00bfe034 	movhi	r2,65408
    db7c:	10bfffc4 	addi	r2,r2,-1
    db80:	288a703a 	and	r5,r5,r2
    db84:	880cd07a 	srli	r6,r17,1
    db88:	280897fa 	slli	r4,r5,31
    db8c:	88c0004c 	andi	r3,r17,1
    db90:	30e2b03a 	or	r17,r6,r3
    db94:	280ad07a 	srli	r5,r5,1
    db98:	8922b03a 	or	r17,r17,r4
    db9c:	003f7706 	br	d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    dba0:	1984b03a 	or	r2,r3,r6
    dba4:	103f6e26 	beq	r2,zero,d960 <__alt_mem_Flash_flash_data+0xf400d960>
    dba8:	39c03fcc 	andi	r7,r7,255
    dbac:	003f6d06 	br	d964 <__alt_mem_Flash_flash_data+0xf400d964>
    dbb0:	1146b03a 	or	r3,r2,r5
    dbb4:	18003f26 	beq	r3,zero,dcb4 <__subdf3+0x3c4>
    dbb8:	00c00434 	movhi	r3,16
    dbbc:	29000234 	orhi	r4,r5,8
    dbc0:	18ffffc4 	addi	r3,r3,-1
    dbc4:	20c8703a 	and	r4,r4,r3
    dbc8:	003f8406 	br	d9dc <__alt_mem_Flash_flash_data+0xf400d9dc>
    dbcc:	10bfffc4 	addi	r2,r2,-1
    dbd0:	1000501e 	bne	r2,zero,dd14 <__subdf3+0x424>
    dbd4:	898fc83a 	sub	r7,r17,r6
    dbd8:	89e3803a 	cmpltu	r17,r17,r7
    dbdc:	28cbc83a 	sub	r5,r5,r3
    dbe0:	2c4bc83a 	sub	r5,r5,r17
    dbe4:	3823883a 	mov	r17,r7
    dbe8:	003fa106 	br	da70 <__alt_mem_Flash_flash_data+0xf400da70>
    dbec:	1988b03a 	or	r4,r3,r6
    dbf0:	203f6226 	beq	r4,zero,d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    dbf4:	10bfffc4 	addi	r2,r2,-1
    dbf8:	10009b1e 	bne	r2,zero,de68 <__subdf3+0x578>
    dbfc:	344d883a 	add	r6,r6,r17
    dc00:	3463803a 	cmpltu	r17,r6,r17
    dc04:	194b883a 	add	r5,r3,r5
    dc08:	2c4b883a 	add	r5,r5,r17
    dc0c:	3023883a 	mov	r17,r6
    dc10:	003fd406 	br	db64 <__alt_mem_Flash_flash_data+0xf400db64>
    dc14:	1106b03a 	or	r3,r2,r4
    dc18:	1800b426 	beq	r3,zero,deec <__subdf3+0x5fc>
    dc1c:	100b883a 	mov	r5,r2
    dc20:	2023883a 	mov	r17,r4
    dc24:	888001cc 	andi	r2,r17,7
    dc28:	103f561e 	bne	r2,zero,d984 <__alt_mem_Flash_flash_data+0xf400d984>
    dc2c:	9200004c 	andi	r8,r18,1
    dc30:	003fb206 	br	dafc <__alt_mem_Flash_flash_data+0xf400dafc>
    dc34:	1000531e 	bne	r2,zero,dd84 <__subdf3+0x494>
    dc38:	80800044 	addi	r2,r16,1
    dc3c:	1081ffcc 	andi	r2,r2,2047
    dc40:	01000044 	movi	r4,1
    dc44:	2080a00e 	bge	r4,r2,dec8 <__subdf3+0x5d8>
    dc48:	8985c83a 	sub	r2,r17,r6
    dc4c:	8889803a 	cmpltu	r4,r17,r2
    dc50:	28e7c83a 	sub	r19,r5,r3
    dc54:	9927c83a 	sub	r19,r19,r4
    dc58:	9900202c 	andhi	r4,r19,128
    dc5c:	20006226 	beq	r4,zero,dde8 <__subdf3+0x4f8>
    dc60:	3463c83a 	sub	r17,r6,r17
    dc64:	194bc83a 	sub	r5,r3,r5
    dc68:	344d803a 	cmpltu	r6,r6,r17
    dc6c:	29a7c83a 	sub	r19,r5,r6
    dc70:	3825883a 	mov	r18,r7
    dc74:	983f841e 	bne	r19,zero,da88 <__alt_mem_Flash_flash_data+0xf400da88>
    dc78:	8809883a 	mov	r4,r17
    dc7c:	000e3bc0 	call	e3bc <__clzsi2>
    dc80:	10800804 	addi	r2,r2,32
    dc84:	10fffe04 	addi	r3,r2,-8
    dc88:	010007c4 	movi	r4,31
    dc8c:	20ff830e 	bge	r4,r3,da9c <__alt_mem_Flash_flash_data+0xf400da9c>
    dc90:	14fff604 	addi	r19,r2,-40
    dc94:	8ce6983a 	sll	r19,r17,r19
    dc98:	0023883a 	mov	r17,zero
    dc9c:	1c3f860e 	bge	r3,r16,dab8 <__alt_mem_Flash_flash_data+0xf400dab8>
    dca0:	017fe034 	movhi	r5,65408
    dca4:	297fffc4 	addi	r5,r5,-1
    dca8:	80e1c83a 	sub	r16,r16,r3
    dcac:	994a703a 	and	r5,r19,r5
    dcb0:	003f3206 	br	d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    dcb4:	0009883a 	mov	r4,zero
    dcb8:	0005883a 	mov	r2,zero
    dcbc:	003f4706 	br	d9dc <__alt_mem_Flash_flash_data+0xf400d9dc>
    dcc0:	198cb03a 	or	r6,r3,r6
    dcc4:	300cc03a 	cmpne	r6,r6,zero
    dcc8:	0005883a 	mov	r2,zero
    dccc:	003f6306 	br	da5c <__alt_mem_Flash_flash_data+0xf400da5c>
    dcd0:	10009d1e 	bne	r2,zero,df48 <__subdf3+0x658>
    dcd4:	81c00044 	addi	r7,r16,1
    dcd8:	3881ffcc 	andi	r2,r7,2047
    dcdc:	02400044 	movi	r9,1
    dce0:	4880680e 	bge	r9,r2,de84 <__subdf3+0x594>
    dce4:	0081ffc4 	movi	r2,2047
    dce8:	3880ae26 	beq	r7,r2,dfa4 <__subdf3+0x6b4>
    dcec:	344d883a 	add	r6,r6,r17
    dcf0:	3463803a 	cmpltu	r17,r6,r17
    dcf4:	194b883a 	add	r5,r3,r5
    dcf8:	2c4b883a 	add	r5,r5,r17
    dcfc:	282297fa 	slli	r17,r5,31
    dd00:	300cd07a 	srli	r6,r6,1
    dd04:	280ad07a 	srli	r5,r5,1
    dd08:	3821883a 	mov	r16,r7
    dd0c:	89a2b03a 	or	r17,r17,r6
    dd10:	003f1a06 	br	d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    dd14:	0101ffc4 	movi	r4,2047
    dd18:	813f431e 	bne	r16,r4,da28 <__alt_mem_Flash_flash_data+0xf400da28>
    dd1c:	003f1706 	br	d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    dd20:	80bff844 	addi	r2,r16,-31
    dd24:	00c00804 	movi	r3,32
    dd28:	9884d83a 	srl	r2,r19,r2
    dd2c:	28c05126 	beq	r5,r3,de74 <__subdf3+0x584>
    dd30:	00c00fc4 	movi	r3,63
    dd34:	1c21c83a 	sub	r16,r3,r16
    dd38:	9c26983a 	sll	r19,r19,r16
    dd3c:	9c62b03a 	or	r17,r19,r17
    dd40:	8822c03a 	cmpne	r17,r17,zero
    dd44:	88a2b03a 	or	r17,r17,r2
    dd48:	000b883a 	mov	r5,zero
    dd4c:	0021883a 	mov	r16,zero
    dd50:	003fb406 	br	dc24 <__alt_mem_Flash_flash_data+0xf400dc24>
    dd54:	113ff804 	addi	r4,r2,-32
    dd58:	01c00804 	movi	r7,32
    dd5c:	1908d83a 	srl	r4,r3,r4
    dd60:	11c04626 	beq	r2,r7,de7c <__subdf3+0x58c>
    dd64:	01c01004 	movi	r7,64
    dd68:	3885c83a 	sub	r2,r7,r2
    dd6c:	1884983a 	sll	r2,r3,r2
    dd70:	118cb03a 	or	r6,r2,r6
    dd74:	300cc03a 	cmpne	r6,r6,zero
    dd78:	310cb03a 	or	r6,r6,r4
    dd7c:	0005883a 	mov	r2,zero
    dd80:	003f3606 	br	da5c <__alt_mem_Flash_flash_data+0xf400da5c>
    dd84:	80002b26 	beq	r16,zero,de34 <__subdf3+0x544>
    dd88:	0101ffc4 	movi	r4,2047
    dd8c:	51006926 	beq	r10,r4,df34 <__subdf3+0x644>
    dd90:	0085c83a 	sub	r2,zero,r2
    dd94:	29402034 	orhi	r5,r5,128
    dd98:	01000e04 	movi	r4,56
    dd9c:	20807d16 	blt	r4,r2,df94 <__subdf3+0x6a4>
    dda0:	010007c4 	movi	r4,31
    dda4:	2080d916 	blt	r4,r2,e10c <__subdf3+0x81c>
    dda8:	01000804 	movi	r4,32
    ddac:	2089c83a 	sub	r4,r4,r2
    ddb0:	2912983a 	sll	r9,r5,r4
    ddb4:	8890d83a 	srl	r8,r17,r2
    ddb8:	8908983a 	sll	r4,r17,r4
    ddbc:	2884d83a 	srl	r2,r5,r2
    ddc0:	4a22b03a 	or	r17,r9,r8
    ddc4:	2008c03a 	cmpne	r4,r4,zero
    ddc8:	8922b03a 	or	r17,r17,r4
    ddcc:	3463c83a 	sub	r17,r6,r17
    ddd0:	1885c83a 	sub	r2,r3,r2
    ddd4:	344d803a 	cmpltu	r6,r6,r17
    ddd8:	118bc83a 	sub	r5,r2,r6
    dddc:	5021883a 	mov	r16,r10
    dde0:	3825883a 	mov	r18,r7
    dde4:	003f2206 	br	da70 <__alt_mem_Flash_flash_data+0xf400da70>
    dde8:	9886b03a 	or	r3,r19,r2
    ddec:	18001c1e 	bne	r3,zero,de60 <__subdf3+0x570>
    ddf0:	0011883a 	mov	r8,zero
    ddf4:	000b883a 	mov	r5,zero
    ddf8:	0023883a 	mov	r17,zero
    ddfc:	0021883a 	mov	r16,zero
    de00:	003f3e06 	br	dafc <__alt_mem_Flash_flash_data+0xf400dafc>
    de04:	010007c4 	movi	r4,31
    de08:	20803c16 	blt	r4,r2,defc <__subdf3+0x60c>
    de0c:	01000804 	movi	r4,32
    de10:	2089c83a 	sub	r4,r4,r2
    de14:	1912983a 	sll	r9,r3,r4
    de18:	308ed83a 	srl	r7,r6,r2
    de1c:	3108983a 	sll	r4,r6,r4
    de20:	1884d83a 	srl	r2,r3,r2
    de24:	49ceb03a 	or	r7,r9,r7
    de28:	2008c03a 	cmpne	r4,r4,zero
    de2c:	390eb03a 	or	r7,r7,r4
    de30:	003f4706 	br	db50 <__alt_mem_Flash_flash_data+0xf400db50>
    de34:	2c48b03a 	or	r4,r5,r17
    de38:	20003e26 	beq	r4,zero,df34 <__subdf3+0x644>
    de3c:	0084303a 	nor	r2,zero,r2
    de40:	10003a1e 	bne	r2,zero,df2c <__subdf3+0x63c>
    de44:	3463c83a 	sub	r17,r6,r17
    de48:	194bc83a 	sub	r5,r3,r5
    de4c:	344d803a 	cmpltu	r6,r6,r17
    de50:	298bc83a 	sub	r5,r5,r6
    de54:	5021883a 	mov	r16,r10
    de58:	3825883a 	mov	r18,r7
    de5c:	003f0406 	br	da70 <__alt_mem_Flash_flash_data+0xf400da70>
    de60:	1023883a 	mov	r17,r2
    de64:	003f0706 	br	da84 <__alt_mem_Flash_flash_data+0xf400da84>
    de68:	0101ffc4 	movi	r4,2047
    de6c:	813f331e 	bne	r16,r4,db3c <__alt_mem_Flash_flash_data+0xf400db3c>
    de70:	003ec206 	br	d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    de74:	0027883a 	mov	r19,zero
    de78:	003fb006 	br	dd3c <__alt_mem_Flash_flash_data+0xf400dd3c>
    de7c:	0005883a 	mov	r2,zero
    de80:	003fbb06 	br	dd70 <__alt_mem_Flash_flash_data+0xf400dd70>
    de84:	2c44b03a 	or	r2,r5,r17
    de88:	80008b1e 	bne	r16,zero,e0b8 <__subdf3+0x7c8>
    de8c:	1000b526 	beq	r2,zero,e164 <__subdf3+0x874>
    de90:	1984b03a 	or	r2,r3,r6
    de94:	103eb926 	beq	r2,zero,d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    de98:	3449883a 	add	r4,r6,r17
    de9c:	2463803a 	cmpltu	r17,r4,r17
    dea0:	194b883a 	add	r5,r3,r5
    dea4:	2c4b883a 	add	r5,r5,r17
    dea8:	2880202c 	andhi	r2,r5,128
    deac:	2023883a 	mov	r17,r4
    deb0:	103f5c26 	beq	r2,zero,dc24 <__alt_mem_Flash_flash_data+0xf400dc24>
    deb4:	00bfe034 	movhi	r2,65408
    deb8:	10bfffc4 	addi	r2,r2,-1
    debc:	4821883a 	mov	r16,r9
    dec0:	288a703a 	and	r5,r5,r2
    dec4:	003ead06 	br	d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    dec8:	2c44b03a 	or	r2,r5,r17
    decc:	8000291e 	bne	r16,zero,df74 <__subdf3+0x684>
    ded0:	10004f1e 	bne	r2,zero,e010 <__subdf3+0x720>
    ded4:	1984b03a 	or	r2,r3,r6
    ded8:	10000426 	beq	r2,zero,deec <__subdf3+0x5fc>
    dedc:	180b883a 	mov	r5,r3
    dee0:	3023883a 	mov	r17,r6
    dee4:	3825883a 	mov	r18,r7
    dee8:	003ea406 	br	d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    deec:	0011883a 	mov	r8,zero
    def0:	000b883a 	mov	r5,zero
    def4:	0023883a 	mov	r17,zero
    def8:	003f0006 	br	dafc <__alt_mem_Flash_flash_data+0xf400dafc>
    defc:	11fff804 	addi	r7,r2,-32
    df00:	19c8d83a 	srl	r4,r3,r7
    df04:	01c00804 	movi	r7,32
    df08:	11c07e26 	beq	r2,r7,e104 <__subdf3+0x814>
    df0c:	01c01004 	movi	r7,64
    df10:	3885c83a 	sub	r2,r7,r2
    df14:	1884983a 	sll	r2,r3,r2
    df18:	118cb03a 	or	r6,r2,r6
    df1c:	300ec03a 	cmpne	r7,r6,zero
    df20:	390eb03a 	or	r7,r7,r4
    df24:	0005883a 	mov	r2,zero
    df28:	003f0906 	br	db50 <__alt_mem_Flash_flash_data+0xf400db50>
    df2c:	0101ffc4 	movi	r4,2047
    df30:	513f991e 	bne	r10,r4,dd98 <__alt_mem_Flash_flash_data+0xf400dd98>
    df34:	180b883a 	mov	r5,r3
    df38:	3023883a 	mov	r17,r6
    df3c:	5021883a 	mov	r16,r10
    df40:	3825883a 	mov	r18,r7
    df44:	003e8d06 	br	d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    df48:	80001a1e 	bne	r16,zero,dfb4 <__subdf3+0x6c4>
    df4c:	2c48b03a 	or	r4,r5,r17
    df50:	20005526 	beq	r4,zero,e0a8 <__subdf3+0x7b8>
    df54:	0084303a 	nor	r2,zero,r2
    df58:	1000511e 	bne	r2,zero,e0a0 <__subdf3+0x7b0>
    df5c:	89a3883a 	add	r17,r17,r6
    df60:	194b883a 	add	r5,r3,r5
    df64:	898d803a 	cmpltu	r6,r17,r6
    df68:	298b883a 	add	r5,r5,r6
    df6c:	5021883a 	mov	r16,r10
    df70:	003efc06 	br	db64 <__alt_mem_Flash_flash_data+0xf400db64>
    df74:	1000341e 	bne	r2,zero,e048 <__subdf3+0x758>
    df78:	1984b03a 	or	r2,r3,r6
    df7c:	10006f26 	beq	r2,zero,e13c <__subdf3+0x84c>
    df80:	180b883a 	mov	r5,r3
    df84:	3023883a 	mov	r17,r6
    df88:	3825883a 	mov	r18,r7
    df8c:	0401ffc4 	movi	r16,2047
    df90:	003e7a06 	br	d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    df94:	2c62b03a 	or	r17,r5,r17
    df98:	8822c03a 	cmpne	r17,r17,zero
    df9c:	0005883a 	mov	r2,zero
    dfa0:	003f8a06 	br	ddcc <__alt_mem_Flash_flash_data+0xf400ddcc>
    dfa4:	3821883a 	mov	r16,r7
    dfa8:	000b883a 	mov	r5,zero
    dfac:	0023883a 	mov	r17,zero
    dfb0:	003ed206 	br	dafc <__alt_mem_Flash_flash_data+0xf400dafc>
    dfb4:	0101ffc4 	movi	r4,2047
    dfb8:	51003b26 	beq	r10,r4,e0a8 <__subdf3+0x7b8>
    dfbc:	0085c83a 	sub	r2,zero,r2
    dfc0:	29402034 	orhi	r5,r5,128
    dfc4:	01000e04 	movi	r4,56
    dfc8:	20806216 	blt	r4,r2,e154 <__subdf3+0x864>
    dfcc:	010007c4 	movi	r4,31
    dfd0:	20806b16 	blt	r4,r2,e180 <__subdf3+0x890>
    dfd4:	01000804 	movi	r4,32
    dfd8:	2089c83a 	sub	r4,r4,r2
    dfdc:	2912983a 	sll	r9,r5,r4
    dfe0:	888ed83a 	srl	r7,r17,r2
    dfe4:	8908983a 	sll	r4,r17,r4
    dfe8:	2884d83a 	srl	r2,r5,r2
    dfec:	49e2b03a 	or	r17,r9,r7
    dff0:	2008c03a 	cmpne	r4,r4,zero
    dff4:	8922b03a 	or	r17,r17,r4
    dff8:	89a3883a 	add	r17,r17,r6
    dffc:	10c5883a 	add	r2,r2,r3
    e000:	898d803a 	cmpltu	r6,r17,r6
    e004:	118b883a 	add	r5,r2,r6
    e008:	5021883a 	mov	r16,r10
    e00c:	003ed506 	br	db64 <__alt_mem_Flash_flash_data+0xf400db64>
    e010:	1984b03a 	or	r2,r3,r6
    e014:	103e5926 	beq	r2,zero,d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    e018:	8989c83a 	sub	r4,r17,r6
    e01c:	8911803a 	cmpltu	r8,r17,r4
    e020:	28c5c83a 	sub	r2,r5,r3
    e024:	1205c83a 	sub	r2,r2,r8
    e028:	1200202c 	andhi	r8,r2,128
    e02c:	403ef926 	beq	r8,zero,dc14 <__alt_mem_Flash_flash_data+0xf400dc14>
    e030:	3463c83a 	sub	r17,r6,r17
    e034:	194bc83a 	sub	r5,r3,r5
    e038:	344d803a 	cmpltu	r6,r6,r17
    e03c:	298bc83a 	sub	r5,r5,r6
    e040:	3825883a 	mov	r18,r7
    e044:	003e4d06 	br	d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    e048:	1984b03a 	or	r2,r3,r6
    e04c:	10002b26 	beq	r2,zero,e0fc <__subdf3+0x80c>
    e050:	2808d0fa 	srli	r4,r5,3
    e054:	8822d0fa 	srli	r17,r17,3
    e058:	280a977a 	slli	r5,r5,29
    e05c:	2080022c 	andhi	r2,r4,8
    e060:	2c62b03a 	or	r17,r5,r17
    e064:	10000826 	beq	r2,zero,e088 <__subdf3+0x798>
    e068:	1810d0fa 	srli	r8,r3,3
    e06c:	4080022c 	andhi	r2,r8,8
    e070:	1000051e 	bne	r2,zero,e088 <__subdf3+0x798>
    e074:	300cd0fa 	srli	r6,r6,3
    e078:	1804977a 	slli	r2,r3,29
    e07c:	4009883a 	mov	r4,r8
    e080:	3825883a 	mov	r18,r7
    e084:	11a2b03a 	or	r17,r2,r6
    e088:	880ad77a 	srli	r5,r17,29
    e08c:	200890fa 	slli	r4,r4,3
    e090:	882290fa 	slli	r17,r17,3
    e094:	0401ffc4 	movi	r16,2047
    e098:	290ab03a 	or	r5,r5,r4
    e09c:	003e3706 	br	d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    e0a0:	0101ffc4 	movi	r4,2047
    e0a4:	513fc71e 	bne	r10,r4,dfc4 <__alt_mem_Flash_flash_data+0xf400dfc4>
    e0a8:	180b883a 	mov	r5,r3
    e0ac:	3023883a 	mov	r17,r6
    e0b0:	5021883a 	mov	r16,r10
    e0b4:	003e3106 	br	d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    e0b8:	10002d26 	beq	r2,zero,e170 <__subdf3+0x880>
    e0bc:	1984b03a 	or	r2,r3,r6
    e0c0:	10000e26 	beq	r2,zero,e0fc <__subdf3+0x80c>
    e0c4:	2808d0fa 	srli	r4,r5,3
    e0c8:	8822d0fa 	srli	r17,r17,3
    e0cc:	280a977a 	slli	r5,r5,29
    e0d0:	2080022c 	andhi	r2,r4,8
    e0d4:	2c62b03a 	or	r17,r5,r17
    e0d8:	103feb26 	beq	r2,zero,e088 <__alt_mem_Flash_flash_data+0xf400e088>
    e0dc:	180ed0fa 	srli	r7,r3,3
    e0e0:	3880022c 	andhi	r2,r7,8
    e0e4:	103fe81e 	bne	r2,zero,e088 <__alt_mem_Flash_flash_data+0xf400e088>
    e0e8:	300cd0fa 	srli	r6,r6,3
    e0ec:	1804977a 	slli	r2,r3,29
    e0f0:	3809883a 	mov	r4,r7
    e0f4:	11a2b03a 	or	r17,r2,r6
    e0f8:	003fe306 	br	e088 <__alt_mem_Flash_flash_data+0xf400e088>
    e0fc:	0401ffc4 	movi	r16,2047
    e100:	003e1e06 	br	d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    e104:	0005883a 	mov	r2,zero
    e108:	003f8306 	br	df18 <__alt_mem_Flash_flash_data+0xf400df18>
    e10c:	113ff804 	addi	r4,r2,-32
    e110:	02000804 	movi	r8,32
    e114:	2908d83a 	srl	r4,r5,r4
    e118:	12002526 	beq	r2,r8,e1b0 <__subdf3+0x8c0>
    e11c:	02001004 	movi	r8,64
    e120:	4085c83a 	sub	r2,r8,r2
    e124:	288a983a 	sll	r5,r5,r2
    e128:	2c62b03a 	or	r17,r5,r17
    e12c:	8822c03a 	cmpne	r17,r17,zero
    e130:	8922b03a 	or	r17,r17,r4
    e134:	0005883a 	mov	r2,zero
    e138:	003f2406 	br	ddcc <__alt_mem_Flash_flash_data+0xf400ddcc>
    e13c:	01402034 	movhi	r5,128
    e140:	0011883a 	mov	r8,zero
    e144:	297fffc4 	addi	r5,r5,-1
    e148:	047ffe04 	movi	r17,-8
    e14c:	0401ffc4 	movi	r16,2047
    e150:	003e6a06 	br	dafc <__alt_mem_Flash_flash_data+0xf400dafc>
    e154:	2c62b03a 	or	r17,r5,r17
    e158:	8822c03a 	cmpne	r17,r17,zero
    e15c:	0005883a 	mov	r2,zero
    e160:	003fa506 	br	dff8 <__alt_mem_Flash_flash_data+0xf400dff8>
    e164:	180b883a 	mov	r5,r3
    e168:	3023883a 	mov	r17,r6
    e16c:	003e0306 	br	d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    e170:	180b883a 	mov	r5,r3
    e174:	3023883a 	mov	r17,r6
    e178:	0401ffc4 	movi	r16,2047
    e17c:	003dff06 	br	d97c <__alt_mem_Flash_flash_data+0xf400d97c>
    e180:	113ff804 	addi	r4,r2,-32
    e184:	01c00804 	movi	r7,32
    e188:	2908d83a 	srl	r4,r5,r4
    e18c:	11c00a26 	beq	r2,r7,e1b8 <__subdf3+0x8c8>
    e190:	01c01004 	movi	r7,64
    e194:	3885c83a 	sub	r2,r7,r2
    e198:	288a983a 	sll	r5,r5,r2
    e19c:	2c62b03a 	or	r17,r5,r17
    e1a0:	8822c03a 	cmpne	r17,r17,zero
    e1a4:	8922b03a 	or	r17,r17,r4
    e1a8:	0005883a 	mov	r2,zero
    e1ac:	003f9206 	br	dff8 <__alt_mem_Flash_flash_data+0xf400dff8>
    e1b0:	000b883a 	mov	r5,zero
    e1b4:	003fdc06 	br	e128 <__alt_mem_Flash_flash_data+0xf400e128>
    e1b8:	000b883a 	mov	r5,zero
    e1bc:	003ff706 	br	e19c <__alt_mem_Flash_flash_data+0xf400e19c>

0000e1c0 <__fixdfsi>:
    e1c0:	2806d53a 	srli	r3,r5,20
    e1c4:	00800434 	movhi	r2,16
    e1c8:	10bfffc4 	addi	r2,r2,-1
    e1cc:	18c1ffcc 	andi	r3,r3,2047
    e1d0:	0180ff84 	movi	r6,1022
    e1d4:	2884703a 	and	r2,r5,r2
    e1d8:	280ad7fa 	srli	r5,r5,31
    e1dc:	30c0130e 	bge	r6,r3,e22c <__fixdfsi+0x6c>
    e1e0:	01810744 	movi	r6,1053
    e1e4:	30c00d16 	blt	r6,r3,e21c <__fixdfsi+0x5c>
    e1e8:	01810cc4 	movi	r6,1075
    e1ec:	30cdc83a 	sub	r6,r6,r3
    e1f0:	01c007c4 	movi	r7,31
    e1f4:	10800434 	orhi	r2,r2,16
    e1f8:	39800e0e 	bge	r7,r6,e234 <__fixdfsi+0x74>
    e1fc:	010104c4 	movi	r4,1043
    e200:	20c7c83a 	sub	r3,r4,r3
    e204:	10c6d83a 	srl	r3,r2,r3
    e208:	29403fcc 	andi	r5,r5,255
    e20c:	0145c83a 	sub	r2,zero,r5
    e210:	1884f03a 	xor	r2,r3,r2
    e214:	1145883a 	add	r2,r2,r5
    e218:	f800283a 	ret
    e21c:	00a00034 	movhi	r2,32768
    e220:	10bfffc4 	addi	r2,r2,-1
    e224:	2885883a 	add	r2,r5,r2
    e228:	f800283a 	ret
    e22c:	0005883a 	mov	r2,zero
    e230:	f800283a 	ret
    e234:	18fefb44 	addi	r3,r3,-1043
    e238:	2188d83a 	srl	r4,r4,r6
    e23c:	10c6983a 	sll	r3,r2,r3
    e240:	20c6b03a 	or	r3,r4,r3
    e244:	003ff006 	br	e208 <__alt_mem_Flash_flash_data+0xf400e208>

0000e248 <__floatsidf>:
    e248:	defffd04 	addi	sp,sp,-12
    e24c:	dc400115 	stw	r17,4(sp)
    e250:	dfc00215 	stw	ra,8(sp)
    e254:	dc000015 	stw	r16,0(sp)
    e258:	2023883a 	mov	r17,r4
    e25c:	20001426 	beq	r4,zero,e2b0 <__floatsidf+0x68>
    e260:	2020d7fa 	srli	r16,r4,31
    e264:	80000126 	beq	r16,zero,e26c <__floatsidf+0x24>
    e268:	0123c83a 	sub	r17,zero,r4
    e26c:	8809883a 	mov	r4,r17
    e270:	000e3bc0 	call	e3bc <__clzsi2>
    e274:	01410784 	movi	r5,1054
    e278:	00c00284 	movi	r3,10
    e27c:	288bc83a 	sub	r5,r5,r2
    e280:	18801c16 	blt	r3,r2,e2f4 <__floatsidf+0xac>
    e284:	00c002c4 	movi	r3,11
    e288:	1887c83a 	sub	r3,r3,r2
    e28c:	88c8d83a 	srl	r4,r17,r3
    e290:	00c00434 	movhi	r3,16
    e294:	18ffffc4 	addi	r3,r3,-1
    e298:	10800544 	addi	r2,r2,21
    e29c:	20c8703a 	and	r4,r4,r3
    e2a0:	8884983a 	sll	r2,r17,r2
    e2a4:	28c1ffcc 	andi	r3,r5,2047
    e2a8:	800d883a 	mov	r6,r16
    e2ac:	00000406 	br	e2c0 <__floatsidf+0x78>
    e2b0:	000d883a 	mov	r6,zero
    e2b4:	0007883a 	mov	r3,zero
    e2b8:	0009883a 	mov	r4,zero
    e2bc:	0005883a 	mov	r2,zero
    e2c0:	180a953a 	slli	r5,r3,20
    e2c4:	31803fcc 	andi	r6,r6,255
    e2c8:	00c00434 	movhi	r3,16
    e2cc:	300c97fa 	slli	r6,r6,31
    e2d0:	18ffffc4 	addi	r3,r3,-1
    e2d4:	20c6703a 	and	r3,r4,r3
    e2d8:	1946b03a 	or	r3,r3,r5
    e2dc:	1986b03a 	or	r3,r3,r6
    e2e0:	dfc00217 	ldw	ra,8(sp)
    e2e4:	dc400117 	ldw	r17,4(sp)
    e2e8:	dc000017 	ldw	r16,0(sp)
    e2ec:	dec00304 	addi	sp,sp,12
    e2f0:	f800283a 	ret
    e2f4:	10fffd44 	addi	r3,r2,-11
    e2f8:	88c8983a 	sll	r4,r17,r3
    e2fc:	00800434 	movhi	r2,16
    e300:	10bfffc4 	addi	r2,r2,-1
    e304:	2088703a 	and	r4,r4,r2
    e308:	28c1ffcc 	andi	r3,r5,2047
    e30c:	800d883a 	mov	r6,r16
    e310:	0005883a 	mov	r2,zero
    e314:	003fea06 	br	e2c0 <__alt_mem_Flash_flash_data+0xf400e2c0>

0000e318 <__floatunsidf>:
    e318:	defffe04 	addi	sp,sp,-8
    e31c:	dc000015 	stw	r16,0(sp)
    e320:	dfc00115 	stw	ra,4(sp)
    e324:	2021883a 	mov	r16,r4
    e328:	20001026 	beq	r4,zero,e36c <__floatunsidf+0x54>
    e32c:	000e3bc0 	call	e3bc <__clzsi2>
    e330:	01410784 	movi	r5,1054
    e334:	100d883a 	mov	r6,r2
    e338:	288bc83a 	sub	r5,r5,r2
    e33c:	00800284 	movi	r2,10
    e340:	11801616 	blt	r2,r6,e39c <__floatunsidf+0x84>
    e344:	008002c4 	movi	r2,11
    e348:	1185c83a 	sub	r2,r2,r6
    e34c:	8084d83a 	srl	r2,r16,r2
    e350:	00c00434 	movhi	r3,16
    e354:	31c00544 	addi	r7,r6,21
    e358:	18ffffc4 	addi	r3,r3,-1
    e35c:	81e0983a 	sll	r16,r16,r7
    e360:	10cc703a 	and	r6,r2,r3
    e364:	2941ffcc 	andi	r5,r5,2047
    e368:	00000206 	br	e374 <__floatunsidf+0x5c>
    e36c:	000b883a 	mov	r5,zero
    e370:	000d883a 	mov	r6,zero
    e374:	280a953a 	slli	r5,r5,20
    e378:	00c00434 	movhi	r3,16
    e37c:	18ffffc4 	addi	r3,r3,-1
    e380:	30c6703a 	and	r3,r6,r3
    e384:	8005883a 	mov	r2,r16
    e388:	1946b03a 	or	r3,r3,r5
    e38c:	dfc00117 	ldw	ra,4(sp)
    e390:	dc000017 	ldw	r16,0(sp)
    e394:	dec00204 	addi	sp,sp,8
    e398:	f800283a 	ret
    e39c:	31bffd44 	addi	r6,r6,-11
    e3a0:	818c983a 	sll	r6,r16,r6
    e3a4:	00800434 	movhi	r2,16
    e3a8:	10bfffc4 	addi	r2,r2,-1
    e3ac:	2941ffcc 	andi	r5,r5,2047
    e3b0:	0021883a 	mov	r16,zero
    e3b4:	308c703a 	and	r6,r6,r2
    e3b8:	003fee06 	br	e374 <__alt_mem_Flash_flash_data+0xf400e374>

0000e3bc <__clzsi2>:
    e3bc:	00bfffd4 	movui	r2,65535
    e3c0:	11000b36 	bltu	r2,r4,e3f0 <__clzsi2+0x34>
    e3c4:	00803fc4 	movi	r2,255
    e3c8:	1100122e 	bgeu	r2,r4,e414 <__clzsi2+0x58>
    e3cc:	00c00204 	movi	r3,8
    e3d0:	01400604 	movi	r5,24
    e3d4:	20c8d83a 	srl	r4,r4,r3
    e3d8:	008000b4 	movhi	r2,2
    e3dc:	10ae7804 	addi	r2,r2,-17952
    e3e0:	1109883a 	add	r4,r2,r4
    e3e4:	20800003 	ldbu	r2,0(r4)
    e3e8:	2885c83a 	sub	r2,r5,r2
    e3ec:	f800283a 	ret
    e3f0:	00804034 	movhi	r2,256
    e3f4:	10bfffc4 	addi	r2,r2,-1
    e3f8:	11000336 	bltu	r2,r4,e408 <__clzsi2+0x4c>
    e3fc:	00c00404 	movi	r3,16
    e400:	180b883a 	mov	r5,r3
    e404:	003ff306 	br	e3d4 <__alt_mem_Flash_flash_data+0xf400e3d4>
    e408:	00c00604 	movi	r3,24
    e40c:	01400204 	movi	r5,8
    e410:	003ff006 	br	e3d4 <__alt_mem_Flash_flash_data+0xf400e3d4>
    e414:	0007883a 	mov	r3,zero
    e418:	01400804 	movi	r5,32
    e41c:	003fed06 	br	e3d4 <__alt_mem_Flash_flash_data+0xf400e3d4>

0000e420 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e420:	defffe04 	addi	sp,sp,-8
    e424:	dfc00115 	stw	ra,4(sp)
    e428:	df000015 	stw	fp,0(sp)
    e42c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e430:	008000b4 	movhi	r2,2
    e434:	10b71904 	addi	r2,r2,-9116
    e438:	10800017 	ldw	r2,0(r2)
    e43c:	10000526 	beq	r2,zero,e454 <alt_get_errno+0x34>
    e440:	008000b4 	movhi	r2,2
    e444:	10b71904 	addi	r2,r2,-9116
    e448:	10800017 	ldw	r2,0(r2)
    e44c:	103ee83a 	callr	r2
    e450:	00000206 	br	e45c <alt_get_errno+0x3c>
    e454:	008000b4 	movhi	r2,2
    e458:	10bf2504 	addi	r2,r2,-876
}
    e45c:	e037883a 	mov	sp,fp
    e460:	dfc00117 	ldw	ra,4(sp)
    e464:	df000017 	ldw	fp,0(sp)
    e468:	dec00204 	addi	sp,sp,8
    e46c:	f800283a 	ret

0000e470 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e470:	defffb04 	addi	sp,sp,-20
    e474:	dfc00415 	stw	ra,16(sp)
    e478:	df000315 	stw	fp,12(sp)
    e47c:	df000304 	addi	fp,sp,12
    e480:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e484:	e0bfff17 	ldw	r2,-4(fp)
    e488:	10000616 	blt	r2,zero,e4a4 <close+0x34>
    e48c:	e0bfff17 	ldw	r2,-4(fp)
    e490:	10c00324 	muli	r3,r2,12
    e494:	008000b4 	movhi	r2,2
    e498:	10b1a604 	addi	r2,r2,-14696
    e49c:	1885883a 	add	r2,r3,r2
    e4a0:	00000106 	br	e4a8 <close+0x38>
    e4a4:	0005883a 	mov	r2,zero
    e4a8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    e4ac:	e0bffd17 	ldw	r2,-12(fp)
    e4b0:	10001926 	beq	r2,zero,e518 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e4b4:	e0bffd17 	ldw	r2,-12(fp)
    e4b8:	10800017 	ldw	r2,0(r2)
    e4bc:	10800417 	ldw	r2,16(r2)
    e4c0:	10000626 	beq	r2,zero,e4dc <close+0x6c>
    e4c4:	e0bffd17 	ldw	r2,-12(fp)
    e4c8:	10800017 	ldw	r2,0(r2)
    e4cc:	10800417 	ldw	r2,16(r2)
    e4d0:	e13ffd17 	ldw	r4,-12(fp)
    e4d4:	103ee83a 	callr	r2
    e4d8:	00000106 	br	e4e0 <close+0x70>
    e4dc:	0005883a 	mov	r2,zero
    e4e0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e4e4:	e13fff17 	ldw	r4,-4(fp)
    e4e8:	000eb880 	call	eb88 <alt_release_fd>
    if (rval < 0)
    e4ec:	e0bffe17 	ldw	r2,-8(fp)
    e4f0:	1000070e 	bge	r2,zero,e510 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    e4f4:	000e4200 	call	e420 <alt_get_errno>
    e4f8:	1007883a 	mov	r3,r2
    e4fc:	e0bffe17 	ldw	r2,-8(fp)
    e500:	0085c83a 	sub	r2,zero,r2
    e504:	18800015 	stw	r2,0(r3)
      return -1;
    e508:	00bfffc4 	movi	r2,-1
    e50c:	00000706 	br	e52c <close+0xbc>
    }
    return 0;
    e510:	0005883a 	mov	r2,zero
    e514:	00000506 	br	e52c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e518:	000e4200 	call	e420 <alt_get_errno>
    e51c:	1007883a 	mov	r3,r2
    e520:	00801444 	movi	r2,81
    e524:	18800015 	stw	r2,0(r3)
    return -1;
    e528:	00bfffc4 	movi	r2,-1
  }
}
    e52c:	e037883a 	mov	sp,fp
    e530:	dfc00117 	ldw	ra,4(sp)
    e534:	df000017 	ldw	fp,0(sp)
    e538:	dec00204 	addi	sp,sp,8
    e53c:	f800283a 	ret

0000e540 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e540:	defffc04 	addi	sp,sp,-16
    e544:	df000315 	stw	fp,12(sp)
    e548:	df000304 	addi	fp,sp,12
    e54c:	e13ffd15 	stw	r4,-12(fp)
    e550:	e17ffe15 	stw	r5,-8(fp)
    e554:	e1bfff15 	stw	r6,-4(fp)
  return len;
    e558:	e0bfff17 	ldw	r2,-4(fp)
}
    e55c:	e037883a 	mov	sp,fp
    e560:	df000017 	ldw	fp,0(sp)
    e564:	dec00104 	addi	sp,sp,4
    e568:	f800283a 	ret

0000e56c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e56c:	defffe04 	addi	sp,sp,-8
    e570:	dfc00115 	stw	ra,4(sp)
    e574:	df000015 	stw	fp,0(sp)
    e578:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e57c:	008000b4 	movhi	r2,2
    e580:	10b71904 	addi	r2,r2,-9116
    e584:	10800017 	ldw	r2,0(r2)
    e588:	10000526 	beq	r2,zero,e5a0 <alt_get_errno+0x34>
    e58c:	008000b4 	movhi	r2,2
    e590:	10b71904 	addi	r2,r2,-9116
    e594:	10800017 	ldw	r2,0(r2)
    e598:	103ee83a 	callr	r2
    e59c:	00000206 	br	e5a8 <alt_get_errno+0x3c>
    e5a0:	008000b4 	movhi	r2,2
    e5a4:	10bf2504 	addi	r2,r2,-876
}
    e5a8:	e037883a 	mov	sp,fp
    e5ac:	dfc00117 	ldw	ra,4(sp)
    e5b0:	df000017 	ldw	fp,0(sp)
    e5b4:	dec00204 	addi	sp,sp,8
    e5b8:	f800283a 	ret

0000e5bc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e5bc:	defffb04 	addi	sp,sp,-20
    e5c0:	dfc00415 	stw	ra,16(sp)
    e5c4:	df000315 	stw	fp,12(sp)
    e5c8:	df000304 	addi	fp,sp,12
    e5cc:	e13ffe15 	stw	r4,-8(fp)
    e5d0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e5d4:	e0bffe17 	ldw	r2,-8(fp)
    e5d8:	10000616 	blt	r2,zero,e5f4 <fstat+0x38>
    e5dc:	e0bffe17 	ldw	r2,-8(fp)
    e5e0:	10c00324 	muli	r3,r2,12
    e5e4:	008000b4 	movhi	r2,2
    e5e8:	10b1a604 	addi	r2,r2,-14696
    e5ec:	1885883a 	add	r2,r3,r2
    e5f0:	00000106 	br	e5f8 <fstat+0x3c>
    e5f4:	0005883a 	mov	r2,zero
    e5f8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e5fc:	e0bffd17 	ldw	r2,-12(fp)
    e600:	10001026 	beq	r2,zero,e644 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e604:	e0bffd17 	ldw	r2,-12(fp)
    e608:	10800017 	ldw	r2,0(r2)
    e60c:	10800817 	ldw	r2,32(r2)
    e610:	10000726 	beq	r2,zero,e630 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    e614:	e0bffd17 	ldw	r2,-12(fp)
    e618:	10800017 	ldw	r2,0(r2)
    e61c:	10800817 	ldw	r2,32(r2)
    e620:	e13ffd17 	ldw	r4,-12(fp)
    e624:	e17fff17 	ldw	r5,-4(fp)
    e628:	103ee83a 	callr	r2
    e62c:	00000a06 	br	e658 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e630:	e0bfff17 	ldw	r2,-4(fp)
    e634:	00c80004 	movi	r3,8192
    e638:	10c00115 	stw	r3,4(r2)
      return 0;
    e63c:	0005883a 	mov	r2,zero
    e640:	00000506 	br	e658 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e644:	000e56c0 	call	e56c <alt_get_errno>
    e648:	1007883a 	mov	r3,r2
    e64c:	00801444 	movi	r2,81
    e650:	18800015 	stw	r2,0(r3)
    return -1;
    e654:	00bfffc4 	movi	r2,-1
  }
}
    e658:	e037883a 	mov	sp,fp
    e65c:	dfc00117 	ldw	ra,4(sp)
    e660:	df000017 	ldw	fp,0(sp)
    e664:	dec00204 	addi	sp,sp,8
    e668:	f800283a 	ret

0000e66c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e66c:	defffe04 	addi	sp,sp,-8
    e670:	dfc00115 	stw	ra,4(sp)
    e674:	df000015 	stw	fp,0(sp)
    e678:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e67c:	008000b4 	movhi	r2,2
    e680:	10b71904 	addi	r2,r2,-9116
    e684:	10800017 	ldw	r2,0(r2)
    e688:	10000526 	beq	r2,zero,e6a0 <alt_get_errno+0x34>
    e68c:	008000b4 	movhi	r2,2
    e690:	10b71904 	addi	r2,r2,-9116
    e694:	10800017 	ldw	r2,0(r2)
    e698:	103ee83a 	callr	r2
    e69c:	00000206 	br	e6a8 <alt_get_errno+0x3c>
    e6a0:	008000b4 	movhi	r2,2
    e6a4:	10bf2504 	addi	r2,r2,-876
}
    e6a8:	e037883a 	mov	sp,fp
    e6ac:	dfc00117 	ldw	ra,4(sp)
    e6b0:	df000017 	ldw	fp,0(sp)
    e6b4:	dec00204 	addi	sp,sp,8
    e6b8:	f800283a 	ret

0000e6bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e6bc:	deffed04 	addi	sp,sp,-76
    e6c0:	dfc01215 	stw	ra,72(sp)
    e6c4:	df001115 	stw	fp,68(sp)
    e6c8:	df001104 	addi	fp,sp,68
    e6cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e6d0:	e0bfff17 	ldw	r2,-4(fp)
    e6d4:	10000616 	blt	r2,zero,e6f0 <isatty+0x34>
    e6d8:	e0bfff17 	ldw	r2,-4(fp)
    e6dc:	10c00324 	muli	r3,r2,12
    e6e0:	008000b4 	movhi	r2,2
    e6e4:	10b1a604 	addi	r2,r2,-14696
    e6e8:	1885883a 	add	r2,r3,r2
    e6ec:	00000106 	br	e6f4 <isatty+0x38>
    e6f0:	0005883a 	mov	r2,zero
    e6f4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    e6f8:	e0bfef17 	ldw	r2,-68(fp)
    e6fc:	10000e26 	beq	r2,zero,e738 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e700:	e0bfef17 	ldw	r2,-68(fp)
    e704:	10800017 	ldw	r2,0(r2)
    e708:	10800817 	ldw	r2,32(r2)
    e70c:	1000021e 	bne	r2,zero,e718 <isatty+0x5c>
    {
      return 1;
    e710:	00800044 	movi	r2,1
    e714:	00000d06 	br	e74c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e718:	e0bff004 	addi	r2,fp,-64
    e71c:	e13fff17 	ldw	r4,-4(fp)
    e720:	100b883a 	mov	r5,r2
    e724:	000e5bc0 	call	e5bc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e728:	e0bff117 	ldw	r2,-60(fp)
    e72c:	10880020 	cmpeqi	r2,r2,8192
    e730:	10803fcc 	andi	r2,r2,255
    e734:	00000506 	br	e74c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e738:	000e66c0 	call	e66c <alt_get_errno>
    e73c:	1007883a 	mov	r3,r2
    e740:	00801444 	movi	r2,81
    e744:	18800015 	stw	r2,0(r3)
    return 0;
    e748:	0005883a 	mov	r2,zero
  }
}
    e74c:	e037883a 	mov	sp,fp
    e750:	dfc00117 	ldw	ra,4(sp)
    e754:	df000017 	ldw	fp,0(sp)
    e758:	dec00204 	addi	sp,sp,8
    e75c:	f800283a 	ret

0000e760 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    e760:	defffc04 	addi	sp,sp,-16
    e764:	df000315 	stw	fp,12(sp)
    e768:	df000304 	addi	fp,sp,12
    e76c:	e13ffd15 	stw	r4,-12(fp)
    e770:	e17ffe15 	stw	r5,-8(fp)
    e774:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    e778:	e0fffe17 	ldw	r3,-8(fp)
    e77c:	e0bffd17 	ldw	r2,-12(fp)
    e780:	18800c26 	beq	r3,r2,e7b4 <alt_load_section+0x54>
  {
    while( to != end )
    e784:	00000806 	br	e7a8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    e788:	e0bffe17 	ldw	r2,-8(fp)
    e78c:	10c00104 	addi	r3,r2,4
    e790:	e0fffe15 	stw	r3,-8(fp)
    e794:	e0fffd17 	ldw	r3,-12(fp)
    e798:	19000104 	addi	r4,r3,4
    e79c:	e13ffd15 	stw	r4,-12(fp)
    e7a0:	18c00017 	ldw	r3,0(r3)
    e7a4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    e7a8:	e0fffe17 	ldw	r3,-8(fp)
    e7ac:	e0bfff17 	ldw	r2,-4(fp)
    e7b0:	18bff51e 	bne	r3,r2,e788 <__alt_mem_Flash_flash_data+0xf400e788>
    {
      *to++ = *from++;
    }
  }
}
    e7b4:	e037883a 	mov	sp,fp
    e7b8:	df000017 	ldw	fp,0(sp)
    e7bc:	dec00104 	addi	sp,sp,4
    e7c0:	f800283a 	ret

0000e7c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e7c4:	defffe04 	addi	sp,sp,-8
    e7c8:	dfc00115 	stw	ra,4(sp)
    e7cc:	df000015 	stw	fp,0(sp)
    e7d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    e7d4:	010000b4 	movhi	r4,2
    e7d8:	21373d04 	addi	r4,r4,-8972
    e7dc:	014000b4 	movhi	r5,2
    e7e0:	296f7304 	addi	r5,r5,-16948
    e7e4:	018000b4 	movhi	r6,2
    e7e8:	31b73d04 	addi	r6,r6,-8972
    e7ec:	000e7600 	call	e760 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    e7f0:	01000034 	movhi	r4,0
    e7f4:	21000804 	addi	r4,r4,32
    e7f8:	01400034 	movhi	r5,0
    e7fc:	29400804 	addi	r5,r5,32
    e800:	01800034 	movhi	r6,0
    e804:	31809104 	addi	r6,r6,580
    e808:	000e7600 	call	e760 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    e80c:	010000b4 	movhi	r4,2
    e810:	212d8904 	addi	r4,r4,-18908
    e814:	014000b4 	movhi	r5,2
    e818:	296d8904 	addi	r5,r5,-18908
    e81c:	018000b4 	movhi	r6,2
    e820:	31af7304 	addi	r6,r6,-16948
    e824:	000e7600 	call	e760 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e828:	001a26c0 	call	1a26c <alt_dcache_flush_all>
  alt_icache_flush_all();
    e82c:	001a4c40 	call	1a4c4 <alt_icache_flush_all>
}
    e830:	e037883a 	mov	sp,fp
    e834:	dfc00117 	ldw	ra,4(sp)
    e838:	df000017 	ldw	fp,0(sp)
    e83c:	dec00204 	addi	sp,sp,8
    e840:	f800283a 	ret

0000e844 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e844:	defffe04 	addi	sp,sp,-8
    e848:	dfc00115 	stw	ra,4(sp)
    e84c:	df000015 	stw	fp,0(sp)
    e850:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e854:	008000b4 	movhi	r2,2
    e858:	10b71904 	addi	r2,r2,-9116
    e85c:	10800017 	ldw	r2,0(r2)
    e860:	10000526 	beq	r2,zero,e878 <alt_get_errno+0x34>
    e864:	008000b4 	movhi	r2,2
    e868:	10b71904 	addi	r2,r2,-9116
    e86c:	10800017 	ldw	r2,0(r2)
    e870:	103ee83a 	callr	r2
    e874:	00000206 	br	e880 <alt_get_errno+0x3c>
    e878:	008000b4 	movhi	r2,2
    e87c:	10bf2504 	addi	r2,r2,-876
}
    e880:	e037883a 	mov	sp,fp
    e884:	dfc00117 	ldw	ra,4(sp)
    e888:	df000017 	ldw	fp,0(sp)
    e88c:	dec00204 	addi	sp,sp,8
    e890:	f800283a 	ret

0000e894 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e894:	defff904 	addi	sp,sp,-28
    e898:	dfc00615 	stw	ra,24(sp)
    e89c:	df000515 	stw	fp,20(sp)
    e8a0:	df000504 	addi	fp,sp,20
    e8a4:	e13ffd15 	stw	r4,-12(fp)
    e8a8:	e17ffe15 	stw	r5,-8(fp)
    e8ac:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    e8b0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e8b4:	e0bffd17 	ldw	r2,-12(fp)
    e8b8:	10000616 	blt	r2,zero,e8d4 <lseek+0x40>
    e8bc:	e0bffd17 	ldw	r2,-12(fp)
    e8c0:	10c00324 	muli	r3,r2,12
    e8c4:	008000b4 	movhi	r2,2
    e8c8:	10b1a604 	addi	r2,r2,-14696
    e8cc:	1885883a 	add	r2,r3,r2
    e8d0:	00000106 	br	e8d8 <lseek+0x44>
    e8d4:	0005883a 	mov	r2,zero
    e8d8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    e8dc:	e0bffc17 	ldw	r2,-16(fp)
    e8e0:	10001026 	beq	r2,zero,e924 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e8e4:	e0bffc17 	ldw	r2,-16(fp)
    e8e8:	10800017 	ldw	r2,0(r2)
    e8ec:	10800717 	ldw	r2,28(r2)
    e8f0:	10000926 	beq	r2,zero,e918 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e8f4:	e0bffc17 	ldw	r2,-16(fp)
    e8f8:	10800017 	ldw	r2,0(r2)
    e8fc:	10800717 	ldw	r2,28(r2)
    e900:	e13ffc17 	ldw	r4,-16(fp)
    e904:	e17ffe17 	ldw	r5,-8(fp)
    e908:	e1bfff17 	ldw	r6,-4(fp)
    e90c:	103ee83a 	callr	r2
    e910:	e0bffb15 	stw	r2,-20(fp)
    e914:	00000506 	br	e92c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    e918:	00bfde84 	movi	r2,-134
    e91c:	e0bffb15 	stw	r2,-20(fp)
    e920:	00000206 	br	e92c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    e924:	00bfebc4 	movi	r2,-81
    e928:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    e92c:	e0bffb17 	ldw	r2,-20(fp)
    e930:	1000070e 	bge	r2,zero,e950 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    e934:	000e8440 	call	e844 <alt_get_errno>
    e938:	1007883a 	mov	r3,r2
    e93c:	e0bffb17 	ldw	r2,-20(fp)
    e940:	0085c83a 	sub	r2,zero,r2
    e944:	18800015 	stw	r2,0(r3)
    rc = -1;
    e948:	00bfffc4 	movi	r2,-1
    e94c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    e950:	e0bffb17 	ldw	r2,-20(fp)
}
    e954:	e037883a 	mov	sp,fp
    e958:	dfc00117 	ldw	ra,4(sp)
    e95c:	df000017 	ldw	fp,0(sp)
    e960:	dec00204 	addi	sp,sp,8
    e964:	f800283a 	ret

0000e968 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e968:	defff904 	addi	sp,sp,-28
    e96c:	dfc00615 	stw	ra,24(sp)
    e970:	df000515 	stw	fp,20(sp)
    e974:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e978:	0009883a 	mov	r4,zero
    e97c:	001793c0 	call	1793c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    e980:	000f9580 	call	f958 <OSInit>
    e984:	01000044 	movi	r4,1
    e988:	00150500 	call	15050 <OSSemCreate>
    e98c:	1007883a 	mov	r3,r2
    e990:	008000b4 	movhi	r2,2
    e994:	10bf2b04 	addi	r2,r2,-852
    e998:	10c00015 	stw	r3,0(r2)
    e99c:	01000044 	movi	r4,1
    e9a0:	00150500 	call	15050 <OSSemCreate>
    e9a4:	1007883a 	mov	r3,r2
    e9a8:	008000b4 	movhi	r2,2
    e9ac:	10bf2d04 	addi	r2,r2,-844
    e9b0:	10c00015 	stw	r3,0(r2)
    e9b4:	008000b4 	movhi	r2,2
    e9b8:	10bf2604 	addi	r2,r2,-872
    e9bc:	e0bffc15 	stw	r2,-16(fp)
    e9c0:	00800044 	movi	r2,1
    e9c4:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    e9c8:	e0bffd0b 	ldhu	r2,-12(fp)
    e9cc:	1009883a 	mov	r4,r2
    e9d0:	00150500 	call	15050 <OSSemCreate>
    e9d4:	1007883a 	mov	r3,r2
    e9d8:	e0bffc17 	ldw	r2,-16(fp)
    e9dc:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e9e0:	00179700 	call	17970 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e9e4:	010000b4 	movhi	r4,2
    e9e8:	212ebb04 	addi	r4,r4,-17684
    e9ec:	014000b4 	movhi	r5,2
    e9f0:	296ebb04 	addi	r5,r5,-17684
    e9f4:	018000b4 	movhi	r6,2
    e9f8:	31aebb04 	addi	r6,r6,-17684
    e9fc:	001a5b40 	call	1a5b4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ea00:	001a37c0 	call	1a37c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ea04:	010000b4 	movhi	r4,2
    ea08:	2128f604 	addi	r4,r4,-23592
    ea0c:	001b2780 	call	1b278 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ea10:	d1282517 	ldw	r4,-24428(gp)
    ea14:	d0e82617 	ldw	r3,-24424(gp)
    ea18:	d0a82717 	ldw	r2,-24420(gp)
    ea1c:	180b883a 	mov	r5,r3
    ea20:	100d883a 	mov	r6,r2
    ea24:	00015800 	call	1580 <main>
    ea28:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    ea2c:	01000044 	movi	r4,1
    ea30:	000e4700 	call	e470 <close>
  exit (result);
    ea34:	e13ffb17 	ldw	r4,-20(fp)
    ea38:	001b28c0 	call	1b28c <exit>

0000ea3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ea3c:	defffe04 	addi	sp,sp,-8
    ea40:	dfc00115 	stw	ra,4(sp)
    ea44:	df000015 	stw	fp,0(sp)
    ea48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ea4c:	008000b4 	movhi	r2,2
    ea50:	10b71904 	addi	r2,r2,-9116
    ea54:	10800017 	ldw	r2,0(r2)
    ea58:	10000526 	beq	r2,zero,ea70 <alt_get_errno+0x34>
    ea5c:	008000b4 	movhi	r2,2
    ea60:	10b71904 	addi	r2,r2,-9116
    ea64:	10800017 	ldw	r2,0(r2)
    ea68:	103ee83a 	callr	r2
    ea6c:	00000206 	br	ea78 <alt_get_errno+0x3c>
    ea70:	008000b4 	movhi	r2,2
    ea74:	10bf2504 	addi	r2,r2,-876
}
    ea78:	e037883a 	mov	sp,fp
    ea7c:	dfc00117 	ldw	ra,4(sp)
    ea80:	df000017 	ldw	fp,0(sp)
    ea84:	dec00204 	addi	sp,sp,8
    ea88:	f800283a 	ret

0000ea8c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    ea8c:	defff904 	addi	sp,sp,-28
    ea90:	dfc00615 	stw	ra,24(sp)
    ea94:	df000515 	stw	fp,20(sp)
    ea98:	df000504 	addi	fp,sp,20
    ea9c:	e13ffd15 	stw	r4,-12(fp)
    eaa0:	e17ffe15 	stw	r5,-8(fp)
    eaa4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    eaa8:	e0bffd17 	ldw	r2,-12(fp)
    eaac:	10000616 	blt	r2,zero,eac8 <read+0x3c>
    eab0:	e0bffd17 	ldw	r2,-12(fp)
    eab4:	10c00324 	muli	r3,r2,12
    eab8:	008000b4 	movhi	r2,2
    eabc:	10b1a604 	addi	r2,r2,-14696
    eac0:	1885883a 	add	r2,r3,r2
    eac4:	00000106 	br	eacc <read+0x40>
    eac8:	0005883a 	mov	r2,zero
    eacc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ead0:	e0bffb17 	ldw	r2,-20(fp)
    ead4:	10002226 	beq	r2,zero,eb60 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ead8:	e0bffb17 	ldw	r2,-20(fp)
    eadc:	10800217 	ldw	r2,8(r2)
    eae0:	108000cc 	andi	r2,r2,3
    eae4:	10800060 	cmpeqi	r2,r2,1
    eae8:	1000181e 	bne	r2,zero,eb4c <read+0xc0>
        (fd->dev->read))
    eaec:	e0bffb17 	ldw	r2,-20(fp)
    eaf0:	10800017 	ldw	r2,0(r2)
    eaf4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    eaf8:	10001426 	beq	r2,zero,eb4c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    eafc:	e0bffb17 	ldw	r2,-20(fp)
    eb00:	10800017 	ldw	r2,0(r2)
    eb04:	10800517 	ldw	r2,20(r2)
    eb08:	e0ffff17 	ldw	r3,-4(fp)
    eb0c:	e13ffb17 	ldw	r4,-20(fp)
    eb10:	e17ffe17 	ldw	r5,-8(fp)
    eb14:	180d883a 	mov	r6,r3
    eb18:	103ee83a 	callr	r2
    eb1c:	e0bffc15 	stw	r2,-16(fp)
    eb20:	e0bffc17 	ldw	r2,-16(fp)
    eb24:	1000070e 	bge	r2,zero,eb44 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    eb28:	000ea3c0 	call	ea3c <alt_get_errno>
    eb2c:	1007883a 	mov	r3,r2
    eb30:	e0bffc17 	ldw	r2,-16(fp)
    eb34:	0085c83a 	sub	r2,zero,r2
    eb38:	18800015 	stw	r2,0(r3)
          return -1;
    eb3c:	00bfffc4 	movi	r2,-1
    eb40:	00000c06 	br	eb74 <read+0xe8>
        }
        return rval;
    eb44:	e0bffc17 	ldw	r2,-16(fp)
    eb48:	00000a06 	br	eb74 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    eb4c:	000ea3c0 	call	ea3c <alt_get_errno>
    eb50:	1007883a 	mov	r3,r2
    eb54:	00800344 	movi	r2,13
    eb58:	18800015 	stw	r2,0(r3)
    eb5c:	00000406 	br	eb70 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    eb60:	000ea3c0 	call	ea3c <alt_get_errno>
    eb64:	1007883a 	mov	r3,r2
    eb68:	00801444 	movi	r2,81
    eb6c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    eb70:	00bfffc4 	movi	r2,-1
}
    eb74:	e037883a 	mov	sp,fp
    eb78:	dfc00117 	ldw	ra,4(sp)
    eb7c:	df000017 	ldw	fp,0(sp)
    eb80:	dec00204 	addi	sp,sp,8
    eb84:	f800283a 	ret

0000eb88 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    eb88:	defffe04 	addi	sp,sp,-8
    eb8c:	df000115 	stw	fp,4(sp)
    eb90:	df000104 	addi	fp,sp,4
    eb94:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    eb98:	e0bfff17 	ldw	r2,-4(fp)
    eb9c:	108000d0 	cmplti	r2,r2,3
    eba0:	10000d1e 	bne	r2,zero,ebd8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    eba4:	008000b4 	movhi	r2,2
    eba8:	10b1a604 	addi	r2,r2,-14696
    ebac:	e0ffff17 	ldw	r3,-4(fp)
    ebb0:	18c00324 	muli	r3,r3,12
    ebb4:	18c00204 	addi	r3,r3,8
    ebb8:	10c5883a 	add	r2,r2,r3
    ebbc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    ebc0:	008000b4 	movhi	r2,2
    ebc4:	10b1a604 	addi	r2,r2,-14696
    ebc8:	e0ffff17 	ldw	r3,-4(fp)
    ebcc:	18c00324 	muli	r3,r3,12
    ebd0:	10c5883a 	add	r2,r2,r3
    ebd4:	10000015 	stw	zero,0(r2)
  }
}
    ebd8:	e037883a 	mov	sp,fp
    ebdc:	df000017 	ldw	fp,0(sp)
    ebe0:	dec00104 	addi	sp,sp,4
    ebe4:	f800283a 	ret

0000ebe8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ebe8:	defff904 	addi	sp,sp,-28
    ebec:	df000615 	stw	fp,24(sp)
    ebf0:	df000604 	addi	fp,sp,24
    ebf4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ebf8:	0005303a 	rdctl	r2,status
    ebfc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ec00:	e0fffc17 	ldw	r3,-16(fp)
    ec04:	00bfff84 	movi	r2,-2
    ec08:	1884703a 	and	r2,r3,r2
    ec0c:	1001703a 	wrctl	status,r2
  
  return context;
    ec10:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    ec14:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ec18:	d0a01817 	ldw	r2,-32672(gp)
    ec1c:	10c000c4 	addi	r3,r2,3
    ec20:	00bfff04 	movi	r2,-4
    ec24:	1884703a 	and	r2,r3,r2
    ec28:	d0a01815 	stw	r2,-32672(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ec2c:	d0e01817 	ldw	r3,-32672(gp)
    ec30:	e0bfff17 	ldw	r2,-4(fp)
    ec34:	1887883a 	add	r3,r3,r2
    ec38:	00810034 	movhi	r2,1024
    ec3c:	10800004 	addi	r2,r2,0
    ec40:	10c0062e 	bgeu	r2,r3,ec5c <sbrk+0x74>
    ec44:	e0bffa17 	ldw	r2,-24(fp)
    ec48:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ec4c:	e0bffd17 	ldw	r2,-12(fp)
    ec50:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ec54:	00bfffc4 	movi	r2,-1
    ec58:	00000b06 	br	ec88 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    ec5c:	d0a01817 	ldw	r2,-32672(gp)
    ec60:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    ec64:	d0e01817 	ldw	r3,-32672(gp)
    ec68:	e0bfff17 	ldw	r2,-4(fp)
    ec6c:	1885883a 	add	r2,r3,r2
    ec70:	d0a01815 	stw	r2,-32672(gp)
    ec74:	e0bffa17 	ldw	r2,-24(fp)
    ec78:	e0bffe15 	stw	r2,-8(fp)
    ec7c:	e0bffe17 	ldw	r2,-8(fp)
    ec80:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    ec84:	e0bffb17 	ldw	r2,-20(fp)
} 
    ec88:	e037883a 	mov	sp,fp
    ec8c:	df000017 	ldw	fp,0(sp)
    ec90:	dec00104 	addi	sp,sp,4
    ec94:	f800283a 	ret

0000ec98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ec98:	defffe04 	addi	sp,sp,-8
    ec9c:	dfc00115 	stw	ra,4(sp)
    eca0:	df000015 	stw	fp,0(sp)
    eca4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eca8:	008000b4 	movhi	r2,2
    ecac:	10b71904 	addi	r2,r2,-9116
    ecb0:	10800017 	ldw	r2,0(r2)
    ecb4:	10000526 	beq	r2,zero,eccc <alt_get_errno+0x34>
    ecb8:	008000b4 	movhi	r2,2
    ecbc:	10b71904 	addi	r2,r2,-9116
    ecc0:	10800017 	ldw	r2,0(r2)
    ecc4:	103ee83a 	callr	r2
    ecc8:	00000206 	br	ecd4 <alt_get_errno+0x3c>
    eccc:	008000b4 	movhi	r2,2
    ecd0:	10bf2504 	addi	r2,r2,-876
}
    ecd4:	e037883a 	mov	sp,fp
    ecd8:	dfc00117 	ldw	ra,4(sp)
    ecdc:	df000017 	ldw	fp,0(sp)
    ece0:	dec00204 	addi	sp,sp,8
    ece4:	f800283a 	ret

0000ece8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    ece8:	defff904 	addi	sp,sp,-28
    ecec:	dfc00615 	stw	ra,24(sp)
    ecf0:	df000515 	stw	fp,20(sp)
    ecf4:	df000504 	addi	fp,sp,20
    ecf8:	e13ffd15 	stw	r4,-12(fp)
    ecfc:	e17ffe15 	stw	r5,-8(fp)
    ed00:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ed04:	e0bffd17 	ldw	r2,-12(fp)
    ed08:	10000616 	blt	r2,zero,ed24 <write+0x3c>
    ed0c:	e0bffd17 	ldw	r2,-12(fp)
    ed10:	10c00324 	muli	r3,r2,12
    ed14:	008000b4 	movhi	r2,2
    ed18:	10b1a604 	addi	r2,r2,-14696
    ed1c:	1885883a 	add	r2,r3,r2
    ed20:	00000106 	br	ed28 <write+0x40>
    ed24:	0005883a 	mov	r2,zero
    ed28:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ed2c:	e0bffb17 	ldw	r2,-20(fp)
    ed30:	10002126 	beq	r2,zero,edb8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ed34:	e0bffb17 	ldw	r2,-20(fp)
    ed38:	10800217 	ldw	r2,8(r2)
    ed3c:	108000cc 	andi	r2,r2,3
    ed40:	10001826 	beq	r2,zero,eda4 <write+0xbc>
    ed44:	e0bffb17 	ldw	r2,-20(fp)
    ed48:	10800017 	ldw	r2,0(r2)
    ed4c:	10800617 	ldw	r2,24(r2)
    ed50:	10001426 	beq	r2,zero,eda4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ed54:	e0bffb17 	ldw	r2,-20(fp)
    ed58:	10800017 	ldw	r2,0(r2)
    ed5c:	10800617 	ldw	r2,24(r2)
    ed60:	e0ffff17 	ldw	r3,-4(fp)
    ed64:	e13ffb17 	ldw	r4,-20(fp)
    ed68:	e17ffe17 	ldw	r5,-8(fp)
    ed6c:	180d883a 	mov	r6,r3
    ed70:	103ee83a 	callr	r2
    ed74:	e0bffc15 	stw	r2,-16(fp)
    ed78:	e0bffc17 	ldw	r2,-16(fp)
    ed7c:	1000070e 	bge	r2,zero,ed9c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    ed80:	000ec980 	call	ec98 <alt_get_errno>
    ed84:	1007883a 	mov	r3,r2
    ed88:	e0bffc17 	ldw	r2,-16(fp)
    ed8c:	0085c83a 	sub	r2,zero,r2
    ed90:	18800015 	stw	r2,0(r3)
        return -1;
    ed94:	00bfffc4 	movi	r2,-1
    ed98:	00000c06 	br	edcc <write+0xe4>
      }
      return rval;
    ed9c:	e0bffc17 	ldw	r2,-16(fp)
    eda0:	00000a06 	br	edcc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    eda4:	000ec980 	call	ec98 <alt_get_errno>
    eda8:	1007883a 	mov	r3,r2
    edac:	00800344 	movi	r2,13
    edb0:	18800015 	stw	r2,0(r3)
    edb4:	00000406 	br	edc8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    edb8:	000ec980 	call	ec98 <alt_get_errno>
    edbc:	1007883a 	mov	r3,r2
    edc0:	00801444 	movi	r2,81
    edc4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    edc8:	00bfffc4 	movi	r2,-1
}
    edcc:	e037883a 	mov	sp,fp
    edd0:	dfc00117 	ldw	ra,4(sp)
    edd4:	df000017 	ldw	fp,0(sp)
    edd8:	dec00204 	addi	sp,sp,8
    eddc:	f800283a 	ret

0000ede0 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    ede0:	deffdf04 	addi	sp,sp,-132
    ede4:	dfc02015 	stw	ra,128(sp)
    ede8:	df001f15 	stw	fp,124(sp)
    edec:	df001f04 	addi	fp,sp,124
    edf0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    edf4:	e0bfe204 	addi	r2,fp,-120
    edf8:	01003fc4 	movi	r4,255
    edfc:	100b883a 	mov	r5,r2
    ee00:	00172040 	call	17204 <OSTaskQuery>
    ee04:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    ee08:	e0bffe83 	ldbu	r2,-6(fp)
    ee0c:	10803fcc 	andi	r2,r2,255
    ee10:	10000126 	beq	r2,zero,ee18 <__env_lock+0x38>
    return;
    ee14:	00001d06 	br	ee8c <__env_lock+0xac>

  id = tcb.OSTCBPrio;
    ee18:	e0bfee83 	ldbu	r2,-70(fp)
    ee1c:	10803fcc 	andi	r2,r2,255
    ee20:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    ee24:	d0e82917 	ldw	r3,-24412(gp)
    ee28:	e0bffd04 	addi	r2,fp,-12
    ee2c:	1809883a 	mov	r4,r3
    ee30:	100b883a 	mov	r5,r2
    ee34:	001589c0 	call	1589c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    ee38:	e0bffe43 	ldbu	r2,-7(fp)
    ee3c:	10803fcc 	andi	r2,r2,255
    ee40:	10000726 	beq	r2,zero,ee60 <__env_lock+0x80>
    ee44:	d0a01917 	ldw	r2,-32668(gp)
    ee48:	e0ffe117 	ldw	r3,-124(fp)
    ee4c:	1880041e 	bne	r3,r2,ee60 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
    ee50:	d0a82817 	ldw	r2,-24416(gp)
    ee54:	10800044 	addi	r2,r2,1
    ee58:	d0a82815 	stw	r2,-24416(gp)
    ee5c:	00000a06 	br	ee88 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    ee60:	d0e82917 	ldw	r3,-24412(gp)
    ee64:	e0bffe84 	addi	r2,fp,-6
    ee68:	1809883a 	mov	r4,r3
    ee6c:	000b883a 	mov	r5,zero
    ee70:	100d883a 	mov	r6,r2
    ee74:	00153b80 	call	153b8 <OSSemPend>
    locks  = 1;
    ee78:	00800044 	movi	r2,1
    ee7c:	d0a82815 	stw	r2,-24416(gp)
    lockid = id;
    ee80:	e0bfe117 	ldw	r2,-124(fp)
    ee84:	d0a01915 	stw	r2,-32668(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    ee88:	0001883a 	nop
}
    ee8c:	e037883a 	mov	sp,fp
    ee90:	dfc00117 	ldw	ra,4(sp)
    ee94:	df000017 	ldw	fp,0(sp)
    ee98:	dec00204 	addi	sp,sp,8
    ee9c:	f800283a 	ret

0000eea0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    eea0:	defffd04 	addi	sp,sp,-12
    eea4:	dfc00215 	stw	ra,8(sp)
    eea8:	df000115 	stw	fp,4(sp)
    eeac:	df000104 	addi	fp,sp,4
    eeb0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    eeb4:	d0a82817 	ldw	r2,-24416(gp)
    eeb8:	1000011e 	bne	r2,zero,eec0 <__env_unlock+0x20>
    return;
    eebc:	00000a06 	br	eee8 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    eec0:	d0a82817 	ldw	r2,-24416(gp)
    eec4:	10bfffc4 	addi	r2,r2,-1
    eec8:	d0a82815 	stw	r2,-24416(gp)
    eecc:	d0a82817 	ldw	r2,-24416(gp)
    eed0:	1000051e 	bne	r2,zero,eee8 <__env_unlock+0x48>
  {
    lockid = -1;
    eed4:	00bfffc4 	movi	r2,-1
    eed8:	d0a01915 	stw	r2,-32668(gp)
    OSSemPost( alt_envsem );
    eedc:	d0a82917 	ldw	r2,-24412(gp)
    eee0:	1009883a 	mov	r4,r2
    eee4:	001578c0 	call	1578c <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    eee8:	e037883a 	mov	sp,fp
    eeec:	dfc00117 	ldw	ra,4(sp)
    eef0:	df000017 	ldw	fp,0(sp)
    eef4:	dec00204 	addi	sp,sp,8
    eef8:	f800283a 	ret

0000eefc <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    eefc:	deffdb04 	addi	sp,sp,-148
    ef00:	dfc02415 	stw	ra,144(sp)
    ef04:	df002315 	stw	fp,140(sp)
    ef08:	df002304 	addi	fp,sp,140
    ef0c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ef10:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    ef14:	008000b4 	movhi	r2,2
    ef18:	10bf2e44 	addi	r2,r2,-839
    ef1c:	10800003 	ldbu	r2,0(r2)
    ef20:	10803fcc 	andi	r2,r2,255
    ef24:	10800060 	cmpeqi	r2,r2,1
    ef28:	1000011e 	bne	r2,zero,ef30 <__malloc_lock+0x34>
      return;
    ef2c:	00003606 	br	f008 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    ef30:	e0bfe204 	addi	r2,fp,-120
    ef34:	01003fc4 	movi	r4,255
    ef38:	100b883a 	mov	r5,r2
    ef3c:	00172040 	call	17204 <OSTaskQuery>
    ef40:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    ef44:	e0bffe83 	ldbu	r2,-6(fp)
    ef48:	10803fcc 	andi	r2,r2,255
    ef4c:	10000126 	beq	r2,zero,ef54 <__malloc_lock+0x58>
    return;
    ef50:	00002d06 	br	f008 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
    ef54:	e0bfee83 	ldbu	r2,-70(fp)
    ef58:	10803fcc 	andi	r2,r2,255
    ef5c:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    ef60:	d0e82b17 	ldw	r3,-24404(gp)
    ef64:	e0bffd04 	addi	r2,fp,-12
    ef68:	1809883a 	mov	r4,r3
    ef6c:	100b883a 	mov	r5,r2
    ef70:	001589c0 	call	1589c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ef74:	0005303a 	rdctl	r2,status
    ef78:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ef7c:	e0ffdf17 	ldw	r3,-132(fp)
    ef80:	00bfff84 	movi	r2,-2
    ef84:	1884703a 	and	r2,r3,r2
    ef88:	1001703a 	wrctl	status,r2
  
  return context;
    ef8c:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
    ef90:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    ef94:	e0bffd0b 	ldhu	r2,-12(fp)
    ef98:	10bfffcc 	andi	r2,r2,65535
    ef9c:	10000b1e 	bne	r2,zero,efcc <__malloc_lock+0xd0>
    efa0:	d0a01a17 	ldw	r2,-32664(gp)
    efa4:	e0ffde17 	ldw	r3,-136(fp)
    efa8:	1880081e 	bne	r3,r2,efcc <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
    efac:	d0a82a17 	ldw	r2,-24408(gp)
    efb0:	10800044 	addi	r2,r2,1
    efb4:	d0a82a15 	stw	r2,-24408(gp)
    efb8:	e0bfdd17 	ldw	r2,-140(fp)
    efbc:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    efc0:	e0bfe017 	ldw	r2,-128(fp)
    efc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    efc8:	00000e06 	br	f004 <__malloc_lock+0x108>
    efcc:	e0bfdd17 	ldw	r2,-140(fp)
    efd0:	e0bfe115 	stw	r2,-124(fp)
    efd4:	e0bfe117 	ldw	r2,-124(fp)
    efd8:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    efdc:	d0e82b17 	ldw	r3,-24404(gp)
    efe0:	e0bffe84 	addi	r2,fp,-6
    efe4:	1809883a 	mov	r4,r3
    efe8:	000b883a 	mov	r5,zero
    efec:	100d883a 	mov	r6,r2
    eff0:	00153b80 	call	153b8 <OSSemPend>
    locks  = 1;
    eff4:	00800044 	movi	r2,1
    eff8:	d0a82a15 	stw	r2,-24408(gp)
    lockid = id;
    effc:	e0bfde17 	ldw	r2,-136(fp)
    f000:	d0a01a15 	stw	r2,-32664(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    f004:	0001883a 	nop
}
    f008:	e037883a 	mov	sp,fp
    f00c:	dfc00117 	ldw	ra,4(sp)
    f010:	df000017 	ldw	fp,0(sp)
    f014:	dec00204 	addi	sp,sp,8
    f018:	f800283a 	ret

0000f01c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f01c:	defff804 	addi	sp,sp,-32
    f020:	dfc00715 	stw	ra,28(sp)
    f024:	df000615 	stw	fp,24(sp)
    f028:	df000604 	addi	fp,sp,24
    f02c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f030:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    f034:	008000b4 	movhi	r2,2
    f038:	10bf2e44 	addi	r2,r2,-839
    f03c:	10800003 	ldbu	r2,0(r2)
    f040:	10803fcc 	andi	r2,r2,255
    f044:	10800060 	cmpeqi	r2,r2,1
    f048:	1000011e 	bne	r2,zero,f050 <__malloc_unlock+0x34>
      return;
    f04c:	00002206 	br	f0d8 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f050:	0005303a 	rdctl	r2,status
    f054:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f058:	e0fffb17 	ldw	r3,-20(fp)
    f05c:	00bfff84 	movi	r2,-2
    f060:	1884703a 	and	r2,r3,r2
    f064:	1001703a 	wrctl	status,r2
  
  return context;
    f068:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
    f06c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    f070:	d0a82a17 	ldw	r2,-24408(gp)
    f074:	1000051e 	bne	r2,zero,f08c <__malloc_unlock+0x70>
    f078:	e0bffa17 	ldw	r2,-24(fp)
    f07c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f080:	e0bffc17 	ldw	r2,-16(fp)
    f084:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    f088:	00001306 	br	f0d8 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    f08c:	d0a82a17 	ldw	r2,-24408(gp)
    f090:	10bfffc4 	addi	r2,r2,-1
    f094:	d0a82a15 	stw	r2,-24408(gp)
    f098:	d0a82a17 	ldw	r2,-24408(gp)
    f09c:	10000a1e 	bne	r2,zero,f0c8 <__malloc_unlock+0xac>
  {
    lockid = -1;
    f0a0:	00bfffc4 	movi	r2,-1
    f0a4:	d0a01a15 	stw	r2,-32664(gp)
    f0a8:	e0bffa17 	ldw	r2,-24(fp)
    f0ac:	e0bffd15 	stw	r2,-12(fp)
    f0b0:	e0bffd17 	ldw	r2,-12(fp)
    f0b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    f0b8:	d0a82b17 	ldw	r2,-24404(gp)
    f0bc:	1009883a 	mov	r4,r2
    f0c0:	001578c0 	call	1578c <OSSemPost>
    f0c4:	00000406 	br	f0d8 <__malloc_unlock+0xbc>
    f0c8:	e0bffa17 	ldw	r2,-24(fp)
    f0cc:	e0bffe15 	stw	r2,-8(fp)
    f0d0:	e0bffe17 	ldw	r2,-8(fp)
    f0d4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    f0d8:	e037883a 	mov	sp,fp
    f0dc:	dfc00117 	ldw	ra,4(sp)
    f0e0:	df000017 	ldw	fp,0(sp)
    f0e4:	dec00204 	addi	sp,sp,8
    f0e8:	f800283a 	ret

0000f0ec <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    f0ec:	defff704 	addi	sp,sp,-36
    f0f0:	dfc00815 	stw	ra,32(sp)
    f0f4:	df000715 	stw	fp,28(sp)
    f0f8:	df000704 	addi	fp,sp,28
    f0fc:	e13ffd15 	stw	r4,-12(fp)
    f100:	e17ffe15 	stw	r5,-8(fp)
    f104:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f108:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    f10c:	e0bfff17 	ldw	r2,-4(fp)
    f110:	1000021e 	bne	r2,zero,f11c <OSEventNameGet+0x30>
        return (0);
    f114:	0005883a 	mov	r2,zero
    f118:	00003706 	br	f1f8 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    f11c:	e0bffd17 	ldw	r2,-12(fp)
    f120:	1000051e 	bne	r2,zero,f138 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    f124:	e0bfff17 	ldw	r2,-4(fp)
    f128:	00c00104 	movi	r3,4
    f12c:	10c00005 	stb	r3,0(r2)
        return (0);
    f130:	0005883a 	mov	r2,zero
    f134:	00003006 	br	f1f8 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    f138:	e0bffe17 	ldw	r2,-8(fp)
    f13c:	1000051e 	bne	r2,zero,f154 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    f140:	e0bfff17 	ldw	r2,-4(fp)
    f144:	00c00304 	movi	r3,12
    f148:	10c00005 	stb	r3,0(r2)
        return (0);
    f14c:	0005883a 	mov	r2,zero
    f150:	00002906 	br	f1f8 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    f154:	d0a83a03 	ldbu	r2,-24344(gp)
    f158:	10803fcc 	andi	r2,r2,255
    f15c:	10000526 	beq	r2,zero,f174 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    f160:	e0bfff17 	ldw	r2,-4(fp)
    f164:	00c00444 	movi	r3,17
    f168:	10c00005 	stb	r3,0(r2)
        return (0);
    f16c:	0005883a 	mov	r2,zero
    f170:	00002106 	br	f1f8 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    f174:	e0bffd17 	ldw	r2,-12(fp)
    f178:	10800003 	ldbu	r2,0(r2)
    f17c:	10803fcc 	andi	r2,r2,255
    f180:	10bfffc4 	addi	r2,r2,-1
    f184:	10800128 	cmpgeui	r2,r2,4
    f188:	10000526 	beq	r2,zero,f1a0 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    f18c:	e0bfff17 	ldw	r2,-4(fp)
    f190:	00c00044 	movi	r3,1
    f194:	10c00005 	stb	r3,0(r2)
             return (0);
    f198:	0005883a 	mov	r2,zero
    f19c:	00001606 	br	f1f8 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    f1a0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f1a4:	0005303a 	rdctl	r2,status
    f1a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f1ac:	e0fffb17 	ldw	r3,-20(fp)
    f1b0:	00bfff84 	movi	r2,-2
    f1b4:	1884703a 	and	r2,r3,r2
    f1b8:	1001703a 	wrctl	status,r2
  
  return context;
    f1bc:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    f1c0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    f1c4:	e0bffd17 	ldw	r2,-12(fp)
    f1c8:	10800384 	addi	r2,r2,14
    f1cc:	e13ffe17 	ldw	r4,-8(fp)
    f1d0:	100b883a 	mov	r5,r2
    f1d4:	0010b400 	call	10b40 <OS_StrCopy>
    f1d8:	e0bffa05 	stb	r2,-24(fp)
    f1dc:	e0bff917 	ldw	r2,-28(fp)
    f1e0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f1e4:	e0bffc17 	ldw	r2,-16(fp)
    f1e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    f1ec:	e0bfff17 	ldw	r2,-4(fp)
    f1f0:	10000005 	stb	zero,0(r2)
    return (len);
    f1f4:	e0bffa03 	ldbu	r2,-24(fp)
}
    f1f8:	e037883a 	mov	sp,fp
    f1fc:	dfc00117 	ldw	ra,4(sp)
    f200:	df000017 	ldw	fp,0(sp)
    f204:	dec00204 	addi	sp,sp,8
    f208:	f800283a 	ret

0000f20c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    f20c:	defff604 	addi	sp,sp,-40
    f210:	dfc00915 	stw	ra,36(sp)
    f214:	df000815 	stw	fp,32(sp)
    f218:	df000804 	addi	fp,sp,32
    f21c:	e13ffd15 	stw	r4,-12(fp)
    f220:	e17ffe15 	stw	r5,-8(fp)
    f224:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f228:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    f22c:	e0bfff17 	ldw	r2,-4(fp)
    f230:	1000011e 	bne	r2,zero,f238 <OSEventNameSet+0x2c>
        return;
    f234:	00003f06 	br	f334 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    f238:	e0bffd17 	ldw	r2,-12(fp)
    f23c:	1000041e 	bne	r2,zero,f250 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    f240:	e0bfff17 	ldw	r2,-4(fp)
    f244:	00c00104 	movi	r3,4
    f248:	10c00005 	stb	r3,0(r2)
        return;
    f24c:	00003906 	br	f334 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    f250:	e0bffe17 	ldw	r2,-8(fp)
    f254:	1000041e 	bne	r2,zero,f268 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    f258:	e0bfff17 	ldw	r2,-4(fp)
    f25c:	00c00304 	movi	r3,12
    f260:	10c00005 	stb	r3,0(r2)
        return;
    f264:	00003306 	br	f334 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    f268:	d0a83a03 	ldbu	r2,-24344(gp)
    f26c:	10803fcc 	andi	r2,r2,255
    f270:	10000426 	beq	r2,zero,f284 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
    f274:	e0bfff17 	ldw	r2,-4(fp)
    f278:	00c00484 	movi	r3,18
    f27c:	10c00005 	stb	r3,0(r2)
        return;
    f280:	00002c06 	br	f334 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
    f284:	e0bffd17 	ldw	r2,-12(fp)
    f288:	10800003 	ldbu	r2,0(r2)
    f28c:	10803fcc 	andi	r2,r2,255
    f290:	10bfffc4 	addi	r2,r2,-1
    f294:	10800128 	cmpgeui	r2,r2,4
    f298:	10000426 	beq	r2,zero,f2ac <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    f29c:	e0bfff17 	ldw	r2,-4(fp)
    f2a0:	00c00044 	movi	r3,1
    f2a4:	10c00005 	stb	r3,0(r2)
             return;
    f2a8:	00002206 	br	f334 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    f2ac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f2b0:	0005303a 	rdctl	r2,status
    f2b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f2b8:	e0fffa17 	ldw	r3,-24(fp)
    f2bc:	00bfff84 	movi	r2,-2
    f2c0:	1884703a 	and	r2,r3,r2
    f2c4:	1001703a 	wrctl	status,r2
  
  return context;
    f2c8:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    f2cc:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    f2d0:	e13ffe17 	ldw	r4,-8(fp)
    f2d4:	0010bb40 	call	10bb4 <OS_StrLen>
    f2d8:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    f2dc:	e0bff903 	ldbu	r2,-28(fp)
    f2e0:	10800830 	cmpltui	r2,r2,32
    f2e4:	1000081e 	bne	r2,zero,f308 <OSEventNameSet+0xfc>
    f2e8:	e0bff817 	ldw	r2,-32(fp)
    f2ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f2f0:	e0bffb17 	ldw	r2,-20(fp)
    f2f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    f2f8:	e0bfff17 	ldw	r2,-4(fp)
    f2fc:	00c002c4 	movi	r3,11
    f300:	10c00005 	stb	r3,0(r2)
        return;
    f304:	00000b06 	br	f334 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    f308:	e0bffd17 	ldw	r2,-12(fp)
    f30c:	10800384 	addi	r2,r2,14
    f310:	1009883a 	mov	r4,r2
    f314:	e17ffe17 	ldw	r5,-8(fp)
    f318:	0010b400 	call	10b40 <OS_StrCopy>
    f31c:	e0bff817 	ldw	r2,-32(fp)
    f320:	e0bffc15 	stw	r2,-16(fp)
    f324:	e0bffc17 	ldw	r2,-16(fp)
    f328:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    f32c:	e0bfff17 	ldw	r2,-4(fp)
    f330:	10000005 	stb	zero,0(r2)
}
    f334:	e037883a 	mov	sp,fp
    f338:	dfc00117 	ldw	ra,4(sp)
    f33c:	df000017 	ldw	fp,0(sp)
    f340:	dec00204 	addi	sp,sp,8
    f344:	f800283a 	ret

0000f348 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    f348:	deffed04 	addi	sp,sp,-76
    f34c:	dfc01215 	stw	ra,72(sp)
    f350:	df001115 	stw	fp,68(sp)
    f354:	df001104 	addi	fp,sp,68
    f358:	e13ffc15 	stw	r4,-16(fp)
    f35c:	e17ffd15 	stw	r5,-12(fp)
    f360:	e1bffe15 	stw	r6,-8(fp)
    f364:	3805883a 	mov	r2,r7
    f368:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    f36c:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    f370:	e0800217 	ldw	r2,8(fp)
    f374:	1000021e 	bne	r2,zero,f380 <OSEventPendMulti+0x38>
        return (0);
    f378:	0005883a 	mov	r2,zero
    f37c:	00017106 	br	f944 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    f380:	e0bffc17 	ldw	r2,-16(fp)
    f384:	1000051e 	bne	r2,zero,f39c <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    f388:	e0800217 	ldw	r2,8(fp)
    f38c:	00c00104 	movi	r3,4
    f390:	10c00005 	stb	r3,0(r2)
        return (0);
    f394:	0005883a 	mov	r2,zero
    f398:	00016a06 	br	f944 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    f39c:	e0bffd17 	ldw	r2,-12(fp)
    f3a0:	1000051e 	bne	r2,zero,f3b8 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    f3a4:	e0800217 	ldw	r2,8(fp)
    f3a8:	00c00104 	movi	r3,4
    f3ac:	10c00005 	stb	r3,0(r2)
        return (0);
    f3b0:	0005883a 	mov	r2,zero
    f3b4:	00016306 	br	f944 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    f3b8:	e0bffe17 	ldw	r2,-8(fp)
    f3bc:	1000051e 	bne	r2,zero,f3d4 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    f3c0:	e0800217 	ldw	r2,8(fp)
    f3c4:	00c00104 	movi	r3,4
    f3c8:	10c00005 	stb	r3,0(r2)
        return (0);
    f3cc:	0005883a 	mov	r2,zero
    f3d0:	00015c06 	br	f944 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    f3d4:	e0bffd17 	ldw	r2,-12(fp)
    f3d8:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    f3dc:	e0bffc17 	ldw	r2,-16(fp)
    f3e0:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    f3e4:	e0bfef17 	ldw	r2,-68(fp)
    f3e8:	10800017 	ldw	r2,0(r2)
    f3ec:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    f3f0:	00001906 	br	f458 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    f3f4:	e0bff017 	ldw	r2,-64(fp)
    f3f8:	10800003 	ldbu	r2,0(r2)
    f3fc:	10803fcc 	andi	r2,r2,255
    f400:	10c000a0 	cmpeqi	r3,r2,2
    f404:	1800091e 	bne	r3,zero,f42c <OSEventPendMulti+0xe4>
    f408:	10c000e0 	cmpeqi	r3,r2,3
    f40c:	1800091e 	bne	r3,zero,f434 <OSEventPendMulti+0xec>
    f410:	10800060 	cmpeqi	r2,r2,1
    f414:	1000091e 	bne	r2,zero,f43c <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    f418:	e0800217 	ldw	r2,8(fp)
    f41c:	00c00044 	movi	r3,1
    f420:	10c00005 	stb	r3,0(r2)
                 return (0);
    f424:	0005883a 	mov	r2,zero
    f428:	00014606 	br	f944 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    f42c:	0001883a 	nop
    f430:	00000306 	br	f440 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    f434:	0001883a 	nop
    f438:	00000106 	br	f440 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    f43c:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    f440:	e0bfef17 	ldw	r2,-68(fp)
    f444:	10800104 	addi	r2,r2,4
    f448:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    f44c:	e0bfef17 	ldw	r2,-68(fp)
    f450:	10800017 	ldw	r2,0(r2)
    f454:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    f458:	e0bff017 	ldw	r2,-64(fp)
    f45c:	103fe51e 	bne	r2,zero,f3f4 <__alt_mem_Flash_flash_data+0xf400f3f4>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    f460:	d0a83a03 	ldbu	r2,-24344(gp)
    f464:	10803fcc 	andi	r2,r2,255
    f468:	10000526 	beq	r2,zero,f480 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    f46c:	e0800217 	ldw	r2,8(fp)
    f470:	00c00084 	movi	r3,2
    f474:	10c00005 	stb	r3,0(r2)
        return (0);
    f478:	0005883a 	mov	r2,zero
    f47c:	00013106 	br	f944 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    f480:	d0a82c03 	ldbu	r2,-24400(gp)
    f484:	10803fcc 	andi	r2,r2,255
    f488:	10000526 	beq	r2,zero,f4a0 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    f48c:	e0800217 	ldw	r2,8(fp)
    f490:	00c00344 	movi	r3,13
    f494:	10c00005 	stb	r3,0(r2)
        return (0);
    f498:	0005883a 	mov	r2,zero
    f49c:	00012906 	br	f944 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f4a0:	0005303a 	rdctl	r2,status
    f4a4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f4a8:	e0fff517 	ldw	r3,-44(fp)
    f4ac:	00bfff84 	movi	r2,-2
    f4b0:	1884703a 	and	r2,r3,r2
    f4b4:	1001703a 	wrctl	status,r2
  
  return context;
    f4b8:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    f4bc:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    f4c0:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    f4c4:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    f4c8:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    f4cc:	e0bffc17 	ldw	r2,-16(fp)
    f4d0:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    f4d4:	e0bfef17 	ldw	r2,-68(fp)
    f4d8:	10800017 	ldw	r2,0(r2)
    f4dc:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    f4e0:	00008106 	br	f6e8 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    f4e4:	e0bff017 	ldw	r2,-64(fp)
    f4e8:	10800003 	ldbu	r2,0(r2)
    f4ec:	10803fcc 	andi	r2,r2,255
    f4f0:	10c000a0 	cmpeqi	r3,r2,2
    f4f4:	18003c1e 	bne	r3,zero,f5e8 <OSEventPendMulti+0x2a0>
    f4f8:	10c000e0 	cmpeqi	r3,r2,3
    f4fc:	1800031e 	bne	r3,zero,f50c <OSEventPendMulti+0x1c4>
    f500:	10800060 	cmpeqi	r2,r2,1
    f504:	10001e1e 	bne	r2,zero,f580 <OSEventPendMulti+0x238>
    f508:	00006606 	br	f6a4 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    f50c:	e0bff017 	ldw	r2,-64(fp)
    f510:	1080020b 	ldhu	r2,8(r2)
    f514:	10bfffcc 	andi	r2,r2,65535
    f518:	10001526 	beq	r2,zero,f570 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    f51c:	e0bff017 	ldw	r2,-64(fp)
    f520:	1080020b 	ldhu	r2,8(r2)
    f524:	10bfffc4 	addi	r2,r2,-1
    f528:	1007883a 	mov	r3,r2
    f52c:	e0bff017 	ldw	r2,-64(fp)
    f530:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    f534:	e0bffd17 	ldw	r2,-12(fp)
    f538:	10c00104 	addi	r3,r2,4
    f53c:	e0fffd15 	stw	r3,-12(fp)
    f540:	e0fff017 	ldw	r3,-64(fp)
    f544:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    f548:	00800044 	movi	r2,1
    f54c:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    f550:	e0bffe17 	ldw	r2,-8(fp)
    f554:	10c00104 	addi	r3,r2,4
    f558:	e0fffe15 	stw	r3,-8(fp)
    f55c:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    f560:	e0bff18b 	ldhu	r2,-58(fp)
    f564:	10800044 	addi	r2,r2,1
    f568:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    f56c:	00005806 	br	f6d0 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    f570:	e0bff203 	ldbu	r2,-56(fp)
    f574:	10800054 	ori	r2,r2,1
    f578:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    f57c:	00005406 	br	f6d0 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    f580:	e0bff017 	ldw	r2,-64(fp)
    f584:	10800117 	ldw	r2,4(r2)
    f588:	10001326 	beq	r2,zero,f5d8 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    f58c:	e0bffe17 	ldw	r2,-8(fp)
    f590:	10c00104 	addi	r3,r2,4
    f594:	e0fffe15 	stw	r3,-8(fp)
    f598:	e0fff017 	ldw	r3,-64(fp)
    f59c:	18c00117 	ldw	r3,4(r3)
    f5a0:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    f5a4:	e0bff017 	ldw	r2,-64(fp)
    f5a8:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    f5ac:	e0bffd17 	ldw	r2,-12(fp)
    f5b0:	10c00104 	addi	r3,r2,4
    f5b4:	e0fffd15 	stw	r3,-12(fp)
    f5b8:	e0fff017 	ldw	r3,-64(fp)
    f5bc:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    f5c0:	00800044 	movi	r2,1
    f5c4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    f5c8:	e0bff18b 	ldhu	r2,-58(fp)
    f5cc:	10800044 	addi	r2,r2,1
    f5d0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    f5d4:	00003e06 	br	f6d0 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    f5d8:	e0bff203 	ldbu	r2,-56(fp)
    f5dc:	10800094 	ori	r2,r2,2
    f5e0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    f5e4:	00003a06 	br	f6d0 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    f5e8:	e0bff017 	ldw	r2,-64(fp)
    f5ec:	10800117 	ldw	r2,4(r2)
    f5f0:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    f5f4:	e0bff417 	ldw	r2,-48(fp)
    f5f8:	1080058b 	ldhu	r2,22(r2)
    f5fc:	10bfffcc 	andi	r2,r2,65535
    f600:	10002426 	beq	r2,zero,f694 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    f604:	e0bffe17 	ldw	r2,-8(fp)
    f608:	10c00104 	addi	r3,r2,4
    f60c:	e0fffe15 	stw	r3,-8(fp)
    f610:	e0fff417 	ldw	r3,-48(fp)
    f614:	18c00417 	ldw	r3,16(r3)
    f618:	19400104 	addi	r5,r3,4
    f61c:	e13ff417 	ldw	r4,-48(fp)
    f620:	21400415 	stw	r5,16(r4)
    f624:	18c00017 	ldw	r3,0(r3)
    f628:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    f62c:	e0bff417 	ldw	r2,-48(fp)
    f630:	10c00417 	ldw	r3,16(r2)
    f634:	e0bff417 	ldw	r2,-48(fp)
    f638:	10800217 	ldw	r2,8(r2)
    f63c:	1880041e 	bne	r3,r2,f650 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    f640:	e0bff417 	ldw	r2,-48(fp)
    f644:	10c00117 	ldw	r3,4(r2)
    f648:	e0bff417 	ldw	r2,-48(fp)
    f64c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    f650:	e0bff417 	ldw	r2,-48(fp)
    f654:	1080058b 	ldhu	r2,22(r2)
    f658:	10bfffc4 	addi	r2,r2,-1
    f65c:	1007883a 	mov	r3,r2
    f660:	e0bff417 	ldw	r2,-48(fp)
    f664:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    f668:	e0bffd17 	ldw	r2,-12(fp)
    f66c:	10c00104 	addi	r3,r2,4
    f670:	e0fffd15 	stw	r3,-12(fp)
    f674:	e0fff017 	ldw	r3,-64(fp)
    f678:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    f67c:	00800044 	movi	r2,1
    f680:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    f684:	e0bff18b 	ldhu	r2,-58(fp)
    f688:	10800044 	addi	r2,r2,1
    f68c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    f690:	00000f06 	br	f6d0 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    f694:	e0bff203 	ldbu	r2,-56(fp)
    f698:	10800114 	ori	r2,r2,4
    f69c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    f6a0:	00000b06 	br	f6d0 <OSEventPendMulti+0x388>
    f6a4:	e0bff317 	ldw	r2,-52(fp)
    f6a8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f6ac:	e0bff617 	ldw	r2,-40(fp)
    f6b0:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    f6b4:	e0bffd17 	ldw	r2,-12(fp)
    f6b8:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    f6bc:	e0800217 	ldw	r2,8(fp)
    f6c0:	00c00044 	movi	r3,1
    f6c4:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    f6c8:	e0bff18b 	ldhu	r2,-58(fp)
    f6cc:	00009d06 	br	f944 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    f6d0:	e0bfef17 	ldw	r2,-68(fp)
    f6d4:	10800104 	addi	r2,r2,4
    f6d8:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    f6dc:	e0bfef17 	ldw	r2,-68(fp)
    f6e0:	10800017 	ldw	r2,0(r2)
    f6e4:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    f6e8:	e0bff017 	ldw	r2,-64(fp)
    f6ec:	103f7d1e 	bne	r2,zero,f4e4 <__alt_mem_Flash_flash_data+0xf400f4e4>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    f6f0:	e0bff103 	ldbu	r2,-60(fp)
    f6f4:	10800058 	cmpnei	r2,r2,1
    f6f8:	10000a1e 	bne	r2,zero,f724 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    f6fc:	e0bffd17 	ldw	r2,-12(fp)
    f700:	10000015 	stw	zero,0(r2)
    f704:	e0bff317 	ldw	r2,-52(fp)
    f708:	e0bff715 	stw	r2,-36(fp)
    f70c:	e0bff717 	ldw	r2,-36(fp)
    f710:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    f714:	e0800217 	ldw	r2,8(fp)
    f718:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    f71c:	e0bff18b 	ldhu	r2,-58(fp)
    f720:	00008806 	br	f944 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    f724:	d0a83b17 	ldw	r2,-24340(gp)
    f728:	d0e83b17 	ldw	r3,-24340(gp)
    f72c:	19000c03 	ldbu	r4,48(r3)
    f730:	e0fff203 	ldbu	r3,-56(fp)
    f734:	20c6b03a 	or	r3,r4,r3
    f738:	1809883a 	mov	r4,r3
    f73c:	00ffe004 	movi	r3,-128
    f740:	20c6b03a 	or	r3,r4,r3
    f744:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    f748:	d0a83b17 	ldw	r2,-24340(gp)
    f74c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    f750:	d0a83b17 	ldw	r2,-24340(gp)
    f754:	e0ffff0b 	ldhu	r3,-4(fp)
    f758:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    f75c:	e13ffc17 	ldw	r4,-16(fp)
    f760:	00102900 	call	10290 <OS_EventTaskWaitMulti>
    f764:	e0bff317 	ldw	r2,-52(fp)
    f768:	e0bff815 	stw	r2,-32(fp)
    f76c:	e0bff817 	ldw	r2,-32(fp)
    f770:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    f774:	0010a040 	call	10a04 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f778:	0005303a 	rdctl	r2,status
    f77c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f780:	e0fff917 	ldw	r3,-28(fp)
    f784:	00bfff84 	movi	r2,-2
    f788:	1884703a 	and	r2,r3,r2
    f78c:	1001703a 	wrctl	status,r2
  
  return context;
    f790:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    f794:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    f798:	d0a83b17 	ldw	r2,-24340(gp)
    f79c:	10800c43 	ldbu	r2,49(r2)
    f7a0:	10803fcc 	andi	r2,r2,255
    f7a4:	10000226 	beq	r2,zero,f7b0 <OSEventPendMulti+0x468>
    f7a8:	108000a0 	cmpeqi	r2,r2,2
    f7ac:	10001826 	beq	r2,zero,f810 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    f7b0:	d0a83b17 	ldw	r2,-24340(gp)
    f7b4:	10800717 	ldw	r2,28(r2)
    f7b8:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    f7bc:	e0bff017 	ldw	r2,-64(fp)
    f7c0:	10000b26 	beq	r2,zero,f7f0 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    f7c4:	e0bffd17 	ldw	r2,-12(fp)
    f7c8:	10c00104 	addi	r3,r2,4
    f7cc:	e0fffd15 	stw	r3,-12(fp)
    f7d0:	e0fff017 	ldw	r3,-64(fp)
    f7d4:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    f7d8:	e0bffd17 	ldw	r2,-12(fp)
    f7dc:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    f7e0:	e0bff18b 	ldhu	r2,-58(fp)
    f7e4:	10800044 	addi	r2,r2,1
    f7e8:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    f7ec:	00000d06 	br	f824 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    f7f0:	d0a83b17 	ldw	r2,-24340(gp)
    f7f4:	00c00044 	movi	r3,1
    f7f8:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    f7fc:	d0a83b17 	ldw	r2,-24340(gp)
    f800:	1009883a 	mov	r4,r2
    f804:	e17ffc17 	ldw	r5,-16(fp)
    f808:	00104900 	call	10490 <OS_EventTaskRemoveMulti>
             }
			 break;
    f80c:	00000506 	br	f824 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    f810:	d0a83b17 	ldw	r2,-24340(gp)
    f814:	1009883a 	mov	r4,r2
    f818:	e17ffc17 	ldw	r5,-16(fp)
    f81c:	00104900 	call	10490 <OS_EventTaskRemoveMulti>
             break;
    f820:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    f824:	d0a83b17 	ldw	r2,-24340(gp)
    f828:	10800c43 	ldbu	r2,49(r2)
    f82c:	10803fcc 	andi	r2,r2,255
    f830:	10000326 	beq	r2,zero,f840 <OSEventPendMulti+0x4f8>
    f834:	108000a0 	cmpeqi	r2,r2,2
    f838:	1000231e 	bne	r2,zero,f8c8 <OSEventPendMulti+0x580>
    f83c:	00002a06 	br	f8e8 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    f840:	e0bff017 	ldw	r2,-64(fp)
    f844:	10800003 	ldbu	r2,0(r2)
    f848:	10803fcc 	andi	r2,r2,255
    f84c:	0080100e 	bge	zero,r2,f890 <OSEventPendMulti+0x548>
    f850:	10c000d0 	cmplti	r3,r2,3
    f854:	1800071e 	bne	r3,zero,f874 <OSEventPendMulti+0x52c>
    f858:	108000e0 	cmpeqi	r2,r2,3
    f85c:	10000c26 	beq	r2,zero,f890 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    f860:	e0bffe17 	ldw	r2,-8(fp)
    f864:	10c00104 	addi	r3,r2,4
    f868:	e0fffe15 	stw	r3,-8(fp)
    f86c:	10000015 	stw	zero,0(r2)
                      break;
    f870:	00001206 	br	f8bc <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    f874:	e0bffe17 	ldw	r2,-8(fp)
    f878:	10c00104 	addi	r3,r2,4
    f87c:	e0fffe15 	stw	r3,-8(fp)
    f880:	d0e83b17 	ldw	r3,-24340(gp)
    f884:	18c00917 	ldw	r3,36(r3)
    f888:	10c00015 	stw	r3,0(r2)
                      break;
    f88c:	00000b06 	br	f8bc <OSEventPendMulti+0x574>
    f890:	e0bff317 	ldw	r2,-52(fp)
    f894:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f898:	e0bffa17 	ldw	r2,-24(fp)
    f89c:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    f8a0:	e0bffd17 	ldw	r2,-12(fp)
    f8a4:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    f8a8:	e0800217 	ldw	r2,8(fp)
    f8ac:	00c00044 	movi	r3,1
    f8b0:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    f8b4:	e0bff18b 	ldhu	r2,-58(fp)
    f8b8:	00002206 	br	f944 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    f8bc:	e0800217 	ldw	r2,8(fp)
    f8c0:	10000005 	stb	zero,0(r2)
             break;
    f8c4:	00001006 	br	f908 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    f8c8:	e0bffe17 	ldw	r2,-8(fp)
    f8cc:	10c00104 	addi	r3,r2,4
    f8d0:	e0fffe15 	stw	r3,-8(fp)
    f8d4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    f8d8:	e0800217 	ldw	r2,8(fp)
    f8dc:	00c00384 	movi	r3,14
    f8e0:	10c00005 	stb	r3,0(r2)
             break;
    f8e4:	00000806 	br	f908 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    f8e8:	e0bffe17 	ldw	r2,-8(fp)
    f8ec:	10c00104 	addi	r3,r2,4
    f8f0:	e0fffe15 	stw	r3,-8(fp)
    f8f4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    f8f8:	e0800217 	ldw	r2,8(fp)
    f8fc:	00c00284 	movi	r3,10
    f900:	10c00005 	stb	r3,0(r2)
             break;
    f904:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    f908:	d0a83b17 	ldw	r2,-24340(gp)
    f90c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    f910:	d0a83b17 	ldw	r2,-24340(gp)
    f914:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    f918:	d0a83b17 	ldw	r2,-24340(gp)
    f91c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    f920:	d0a83b17 	ldw	r2,-24340(gp)
    f924:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    f928:	d0a83b17 	ldw	r2,-24340(gp)
    f92c:	10000915 	stw	zero,36(r2)
    f930:	e0bff317 	ldw	r2,-52(fp)
    f934:	e0bffb15 	stw	r2,-20(fp)
    f938:	e0bffb17 	ldw	r2,-20(fp)
    f93c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    f940:	e0bff18b 	ldhu	r2,-58(fp)
}
    f944:	e037883a 	mov	sp,fp
    f948:	dfc00117 	ldw	ra,4(sp)
    f94c:	df000017 	ldw	fp,0(sp)
    f950:	dec00204 	addi	sp,sp,8
    f954:	f800283a 	ret

0000f958 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    f958:	defffe04 	addi	sp,sp,-8
    f95c:	dfc00115 	stw	ra,4(sp)
    f960:	df000015 	stw	fp,0(sp)
    f964:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    f968:	001aecc0 	call	1aecc <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    f96c:	00106cc0 	call	106cc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    f970:	00107100 	call	10710 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    f974:	00108700 	call	10870 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    f978:	00105f00 	call	105f0 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    f97c:	00127f00 	call	127f0 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    f980:	0013cc00 	call	13cc0 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    f984:	0014ef40 	call	14ef4 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    f988:	00107780 	call	10778 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    f98c:	00107f40 	call	107f4 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    f990:	001aee80 	call	1aee8 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    f994:	00110dc0 	call	110dc <OSDebugInit>
#endif
}
    f998:	e037883a 	mov	sp,fp
    f99c:	dfc00117 	ldw	ra,4(sp)
    f9a0:	df000017 	ldw	fp,0(sp)
    f9a4:	dec00204 	addi	sp,sp,8
    f9a8:	f800283a 	ret

0000f9ac <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    f9ac:	defffc04 	addi	sp,sp,-16
    f9b0:	df000315 	stw	fp,12(sp)
    f9b4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    f9b8:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
    f9bc:	d0a82c43 	ldbu	r2,-24399(gp)
    f9c0:	10803fcc 	andi	r2,r2,255
    f9c4:	10800058 	cmpnei	r2,r2,1
    f9c8:	1000131e 	bne	r2,zero,fa18 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f9cc:	0005303a 	rdctl	r2,status
    f9d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f9d4:	e0fffe17 	ldw	r3,-8(fp)
    f9d8:	00bfff84 	movi	r2,-2
    f9dc:	1884703a 	and	r2,r3,r2
    f9e0:	1001703a 	wrctl	status,r2
  
  return context;
    f9e4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    f9e8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
    f9ec:	d0a83a03 	ldbu	r2,-24344(gp)
    f9f0:	10803fcc 	andi	r2,r2,255
    f9f4:	10803fe0 	cmpeqi	r2,r2,255
    f9f8:	1000031e 	bne	r2,zero,fa08 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    f9fc:	d0a83a03 	ldbu	r2,-24344(gp)
    fa00:	10800044 	addi	r2,r2,1
    fa04:	d0a83a05 	stb	r2,-24344(gp)
    fa08:	e0bffd17 	ldw	r2,-12(fp)
    fa0c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa10:	e0bfff17 	ldw	r2,-4(fp)
    fa14:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
    fa18:	e037883a 	mov	sp,fp
    fa1c:	df000017 	ldw	fp,0(sp)
    fa20:	dec00104 	addi	sp,sp,4
    fa24:	f800283a 	ret

0000fa28 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    fa28:	defffb04 	addi	sp,sp,-20
    fa2c:	dfc00415 	stw	ra,16(sp)
    fa30:	df000315 	stw	fp,12(sp)
    fa34:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    fa38:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    fa3c:	d0a82c43 	ldbu	r2,-24399(gp)
    fa40:	10803fcc 	andi	r2,r2,255
    fa44:	10800058 	cmpnei	r2,r2,1
    fa48:	10002f1e 	bne	r2,zero,fb08 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fa4c:	0005303a 	rdctl	r2,status
    fa50:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa54:	e0fffe17 	ldw	r3,-8(fp)
    fa58:	00bfff84 	movi	r2,-2
    fa5c:	1884703a 	and	r2,r3,r2
    fa60:	1001703a 	wrctl	status,r2
  
  return context;
    fa64:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    fa68:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    fa6c:	d0a83a03 	ldbu	r2,-24344(gp)
    fa70:	10803fcc 	andi	r2,r2,255
    fa74:	10000326 	beq	r2,zero,fa84 <OSIntExit+0x5c>
            OSIntNesting--;
    fa78:	d0a83a03 	ldbu	r2,-24344(gp)
    fa7c:	10bfffc4 	addi	r2,r2,-1
    fa80:	d0a83a05 	stb	r2,-24344(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    fa84:	d0a83a03 	ldbu	r2,-24344(gp)
    fa88:	10803fcc 	andi	r2,r2,255
    fa8c:	10001a1e 	bne	r2,zero,faf8 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    fa90:	d0a82c03 	ldbu	r2,-24400(gp)
    fa94:	10803fcc 	andi	r2,r2,255
    fa98:	1000171e 	bne	r2,zero,faf8 <OSIntExit+0xd0>
                OS_SchedNew();
    fa9c:	0010ad00 	call	10ad0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    faa0:	d0e82e03 	ldbu	r3,-24392(gp)
    faa4:	d0a82e43 	ldbu	r2,-24391(gp)
    faa8:	18c03fcc 	andi	r3,r3,255
    faac:	10803fcc 	andi	r2,r2,255
    fab0:	18801126 	beq	r3,r2,faf8 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    fab4:	d0a82e03 	ldbu	r2,-24392(gp)
    fab8:	10c03fcc 	andi	r3,r2,255
    fabc:	008000f4 	movhi	r2,3
    fac0:	10b5b804 	addi	r2,r2,-10528
    fac4:	18c7883a 	add	r3,r3,r3
    fac8:	18c7883a 	add	r3,r3,r3
    facc:	10c5883a 	add	r2,r2,r3
    fad0:	10800017 	ldw	r2,0(r2)
    fad4:	d0a83615 	stw	r2,-24360(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    fad8:	d0a83617 	ldw	r2,-24360(gp)
    fadc:	10c00e17 	ldw	r3,56(r2)
    fae0:	18c00044 	addi	r3,r3,1
    fae4:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    fae8:	d0a83117 	ldw	r2,-24380(gp)
    faec:	10800044 	addi	r2,r2,1
    faf0:	d0a83115 	stw	r2,-24380(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    faf4:	001ac0c0 	call	1ac0c <OSCtxSw>
    faf8:	e0bffd17 	ldw	r2,-12(fp)
    fafc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb00:	e0bfff17 	ldw	r2,-4(fp)
    fb04:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    fb08:	e037883a 	mov	sp,fp
    fb0c:	dfc00117 	ldw	ra,4(sp)
    fb10:	df000017 	ldw	fp,0(sp)
    fb14:	dec00204 	addi	sp,sp,8
    fb18:	f800283a 	ret

0000fb1c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    fb1c:	defffc04 	addi	sp,sp,-16
    fb20:	df000315 	stw	fp,12(sp)
    fb24:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fb28:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    fb2c:	d0a82c43 	ldbu	r2,-24399(gp)
    fb30:	10803fcc 	andi	r2,r2,255
    fb34:	10800058 	cmpnei	r2,r2,1
    fb38:	1000161e 	bne	r2,zero,fb94 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb3c:	0005303a 	rdctl	r2,status
    fb40:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb44:	e0fffe17 	ldw	r3,-8(fp)
    fb48:	00bfff84 	movi	r2,-2
    fb4c:	1884703a 	and	r2,r3,r2
    fb50:	1001703a 	wrctl	status,r2
  
  return context;
    fb54:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    fb58:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    fb5c:	d0a83a03 	ldbu	r2,-24344(gp)
    fb60:	10803fcc 	andi	r2,r2,255
    fb64:	1000071e 	bne	r2,zero,fb84 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    fb68:	d0a82c03 	ldbu	r2,-24400(gp)
    fb6c:	10803fcc 	andi	r2,r2,255
    fb70:	10803fe0 	cmpeqi	r2,r2,255
    fb74:	1000031e 	bne	r2,zero,fb84 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    fb78:	d0a82c03 	ldbu	r2,-24400(gp)
    fb7c:	10800044 	addi	r2,r2,1
    fb80:	d0a82c05 	stb	r2,-24400(gp)
    fb84:	e0bffd17 	ldw	r2,-12(fp)
    fb88:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb8c:	e0bfff17 	ldw	r2,-4(fp)
    fb90:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    fb94:	e037883a 	mov	sp,fp
    fb98:	df000017 	ldw	fp,0(sp)
    fb9c:	dec00104 	addi	sp,sp,4
    fba0:	f800283a 	ret

0000fba4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    fba4:	defff804 	addi	sp,sp,-32
    fba8:	dfc00715 	stw	ra,28(sp)
    fbac:	df000615 	stw	fp,24(sp)
    fbb0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    fbb4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    fbb8:	d0a82c43 	ldbu	r2,-24399(gp)
    fbbc:	10803fcc 	andi	r2,r2,255
    fbc0:	10800058 	cmpnei	r2,r2,1
    fbc4:	1000281e 	bne	r2,zero,fc68 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fbc8:	0005303a 	rdctl	r2,status
    fbcc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fbd0:	e0fffb17 	ldw	r3,-20(fp)
    fbd4:	00bfff84 	movi	r2,-2
    fbd8:	1884703a 	and	r2,r3,r2
    fbdc:	1001703a 	wrctl	status,r2
  
  return context;
    fbe0:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    fbe4:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    fbe8:	d0a82c03 	ldbu	r2,-24400(gp)
    fbec:	10803fcc 	andi	r2,r2,255
    fbf0:	10001926 	beq	r2,zero,fc58 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    fbf4:	d0a82c03 	ldbu	r2,-24400(gp)
    fbf8:	10bfffc4 	addi	r2,r2,-1
    fbfc:	d0a82c05 	stb	r2,-24400(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    fc00:	d0a82c03 	ldbu	r2,-24400(gp)
    fc04:	10803fcc 	andi	r2,r2,255
    fc08:	10000e1e 	bne	r2,zero,fc44 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    fc0c:	d0a83a03 	ldbu	r2,-24344(gp)
    fc10:	10803fcc 	andi	r2,r2,255
    fc14:	1000061e 	bne	r2,zero,fc30 <OSSchedUnlock+0x8c>
    fc18:	e0bffa17 	ldw	r2,-24(fp)
    fc1c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc20:	e0bffc17 	ldw	r2,-16(fp)
    fc24:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    fc28:	0010a040 	call	10a04 <OS_Sched>
    fc2c:	00000e06 	br	fc68 <OSSchedUnlock+0xc4>
    fc30:	e0bffa17 	ldw	r2,-24(fp)
    fc34:	e0bffd15 	stw	r2,-12(fp)
    fc38:	e0bffd17 	ldw	r2,-12(fp)
    fc3c:	1001703a 	wrctl	status,r2
    fc40:	00000906 	br	fc68 <OSSchedUnlock+0xc4>
    fc44:	e0bffa17 	ldw	r2,-24(fp)
    fc48:	e0bffe15 	stw	r2,-8(fp)
    fc4c:	e0bffe17 	ldw	r2,-8(fp)
    fc50:	1001703a 	wrctl	status,r2
    fc54:	00000406 	br	fc68 <OSSchedUnlock+0xc4>
    fc58:	e0bffa17 	ldw	r2,-24(fp)
    fc5c:	e0bfff15 	stw	r2,-4(fp)
    fc60:	e0bfff17 	ldw	r2,-4(fp)
    fc64:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    fc68:	e037883a 	mov	sp,fp
    fc6c:	dfc00117 	ldw	ra,4(sp)
    fc70:	df000017 	ldw	fp,0(sp)
    fc74:	dec00204 	addi	sp,sp,8
    fc78:	f800283a 	ret

0000fc7c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    fc7c:	defffe04 	addi	sp,sp,-8
    fc80:	dfc00115 	stw	ra,4(sp)
    fc84:	df000015 	stw	fp,0(sp)
    fc88:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    fc8c:	d0a82c43 	ldbu	r2,-24399(gp)
    fc90:	10803fcc 	andi	r2,r2,255
    fc94:	10000f1e 	bne	r2,zero,fcd4 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    fc98:	0010ad00 	call	10ad0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    fc9c:	d0a82e03 	ldbu	r2,-24392(gp)
    fca0:	d0a82e45 	stb	r2,-24391(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    fca4:	d0a82e03 	ldbu	r2,-24392(gp)
    fca8:	10c03fcc 	andi	r3,r2,255
    fcac:	008000f4 	movhi	r2,3
    fcb0:	10b5b804 	addi	r2,r2,-10528
    fcb4:	18c7883a 	add	r3,r3,r3
    fcb8:	18c7883a 	add	r3,r3,r3
    fcbc:	10c5883a 	add	r2,r2,r3
    fcc0:	10800017 	ldw	r2,0(r2)
    fcc4:	d0a83615 	stw	r2,-24360(gp)
        OSTCBCur      = OSTCBHighRdy;
    fcc8:	d0a83617 	ldw	r2,-24360(gp)
    fccc:	d0a83b15 	stw	r2,-24340(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    fcd0:	001ac980 	call	1ac98 <OSStartHighRdy>
    }
}
    fcd4:	e037883a 	mov	sp,fp
    fcd8:	dfc00117 	ldw	ra,4(sp)
    fcdc:	df000017 	ldw	fp,0(sp)
    fce0:	dec00204 	addi	sp,sp,8
    fce4:	f800283a 	ret

0000fce8 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    fce8:	defff904 	addi	sp,sp,-28
    fcec:	dfc00615 	stw	ra,24(sp)
    fcf0:	df000515 	stw	fp,20(sp)
    fcf4:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fcf8:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    fcfc:	01000084 	movi	r4,2
    fd00:	001739c0 	call	1739c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fd04:	0005303a 	rdctl	r2,status
    fd08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd0c:	e0fffc17 	ldw	r3,-16(fp)
    fd10:	00bfff84 	movi	r2,-2
    fd14:	1884703a 	and	r2,r3,r2
    fd18:	1001703a 	wrctl	status,r2
  
  return context;
    fd1c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    fd20:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    fd24:	d0282d15 	stw	zero,-24396(gp)
    fd28:	e0bffb17 	ldw	r2,-20(fp)
    fd2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd30:	e0bffd17 	ldw	r2,-12(fp)
    fd34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    fd38:	0009883a 	mov	r4,zero
    fd3c:	001739c0 	call	1739c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fd40:	0005303a 	rdctl	r2,status
    fd44:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd48:	e0fffe17 	ldw	r3,-8(fp)
    fd4c:	00bfff84 	movi	r2,-2
    fd50:	1884703a 	and	r2,r3,r2
    fd54:	1001703a 	wrctl	status,r2
  
  return context;
    fd58:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    fd5c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    fd60:	d0a82d17 	ldw	r2,-24396(gp)
    fd64:	d0a83215 	stw	r2,-24376(gp)
    OSStatRdy    = OS_TRUE;
    fd68:	00800044 	movi	r2,1
    fd6c:	d0a83e05 	stb	r2,-24328(gp)
    fd70:	e0bffb17 	ldw	r2,-20(fp)
    fd74:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd78:	e0bfff17 	ldw	r2,-4(fp)
    fd7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    fd80:	e037883a 	mov	sp,fp
    fd84:	dfc00117 	ldw	ra,4(sp)
    fd88:	df000017 	ldw	fp,0(sp)
    fd8c:	dec00204 	addi	sp,sp,8
    fd90:	f800283a 	ret

0000fd94 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    fd94:	defff704 	addi	sp,sp,-36
    fd98:	dfc00815 	stw	ra,32(sp)
    fd9c:	df000715 	stw	fp,28(sp)
    fda0:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    fda4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    fda8:	001aeb00 	call	1aeb0 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fdac:	0005303a 	rdctl	r2,status
    fdb0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fdb4:	e0fffc17 	ldw	r3,-16(fp)
    fdb8:	00bfff84 	movi	r2,-2
    fdbc:	1884703a 	and	r2,r3,r2
    fdc0:	1001703a 	wrctl	status,r2
  
  return context;
    fdc4:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    fdc8:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    fdcc:	d0a83c17 	ldw	r2,-24336(gp)
    fdd0:	10800044 	addi	r2,r2,1
    fdd4:	d0a83c15 	stw	r2,-24336(gp)
    fdd8:	e0bffb17 	ldw	r2,-20(fp)
    fddc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fde0:	e0bffd17 	ldw	r2,-12(fp)
    fde4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    fde8:	d0a82c43 	ldbu	r2,-24399(gp)
    fdec:	10803fcc 	andi	r2,r2,255
    fdf0:	10800058 	cmpnei	r2,r2,1
    fdf4:	1000691e 	bne	r2,zero,ff9c <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    fdf8:	d0a83003 	ldbu	r2,-24384(gp)
    fdfc:	10803fcc 	andi	r2,r2,255
    fe00:	10c00060 	cmpeqi	r3,r2,1
    fe04:	1800061e 	bne	r3,zero,fe20 <OSTimeTick+0x8c>
    fe08:	10c000a0 	cmpeqi	r3,r2,2
    fe0c:	1800061e 	bne	r3,zero,fe28 <OSTimeTick+0x94>
    fe10:	10000a1e 	bne	r2,zero,fe3c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    fe14:	00800044 	movi	r2,1
    fe18:	e0bffa05 	stb	r2,-24(fp)
                 break;
    fe1c:	00000b06 	br	fe4c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    fe20:	e03ffa05 	stb	zero,-24(fp)
                 break;
    fe24:	00000906 	br	fe4c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    fe28:	00800044 	movi	r2,1
    fe2c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    fe30:	00800044 	movi	r2,1
    fe34:	d0a83005 	stb	r2,-24384(gp)
                 break;
    fe38:	00000406 	br	fe4c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    fe3c:	00800044 	movi	r2,1
    fe40:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    fe44:	d0283005 	stb	zero,-24384(gp)
                 break;
    fe48:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    fe4c:	e0bffa03 	ldbu	r2,-24(fp)
    fe50:	1000011e 	bne	r2,zero,fe58 <OSTimeTick+0xc4>
            return;
    fe54:	00005106 	br	ff9c <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    fe58:	d0a82f17 	ldw	r2,-24388(gp)
    fe5c:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    fe60:	00004906 	br	ff88 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe64:	0005303a 	rdctl	r2,status
    fe68:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe6c:	e0fffe17 	ldw	r3,-8(fp)
    fe70:	00bfff84 	movi	r2,-2
    fe74:	1884703a 	and	r2,r3,r2
    fe78:	1001703a 	wrctl	status,r2
  
  return context;
    fe7c:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
    fe80:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    fe84:	e0bff917 	ldw	r2,-28(fp)
    fe88:	10800b8b 	ldhu	r2,46(r2)
    fe8c:	10bfffcc 	andi	r2,r2,65535
    fe90:	10003626 	beq	r2,zero,ff6c <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    fe94:	e0bff917 	ldw	r2,-28(fp)
    fe98:	10800b8b 	ldhu	r2,46(r2)
    fe9c:	10bfffc4 	addi	r2,r2,-1
    fea0:	1007883a 	mov	r3,r2
    fea4:	e0bff917 	ldw	r2,-28(fp)
    fea8:	10c00b8d 	sth	r3,46(r2)
    feac:	e0bff917 	ldw	r2,-28(fp)
    feb0:	10800b8b 	ldhu	r2,46(r2)
    feb4:	10bfffcc 	andi	r2,r2,65535
    feb8:	10002c1e 	bne	r2,zero,ff6c <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    febc:	e0bff917 	ldw	r2,-28(fp)
    fec0:	10800c03 	ldbu	r2,48(r2)
    fec4:	10803fcc 	andi	r2,r2,255
    fec8:	10800dcc 	andi	r2,r2,55
    fecc:	10000b26 	beq	r2,zero,fefc <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    fed0:	e0bff917 	ldw	r2,-28(fp)
    fed4:	10c00c03 	ldbu	r3,48(r2)
    fed8:	00bff204 	movi	r2,-56
    fedc:	1884703a 	and	r2,r3,r2
    fee0:	1007883a 	mov	r3,r2
    fee4:	e0bff917 	ldw	r2,-28(fp)
    fee8:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    feec:	e0bff917 	ldw	r2,-28(fp)
    fef0:	00c00044 	movi	r3,1
    fef4:	10c00c45 	stb	r3,49(r2)
    fef8:	00000206 	br	ff04 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    fefc:	e0bff917 	ldw	r2,-28(fp)
    ff00:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    ff04:	e0bff917 	ldw	r2,-28(fp)
    ff08:	10800c03 	ldbu	r2,48(r2)
    ff0c:	10803fcc 	andi	r2,r2,255
    ff10:	1080020c 	andi	r2,r2,8
    ff14:	1000151e 	bne	r2,zero,ff6c <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    ff18:	e0bff917 	ldw	r2,-28(fp)
    ff1c:	10c00d83 	ldbu	r3,54(r2)
    ff20:	d0a83803 	ldbu	r2,-24352(gp)
    ff24:	1884b03a 	or	r2,r3,r2
    ff28:	d0a83805 	stb	r2,-24352(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    ff2c:	e0bff917 	ldw	r2,-28(fp)
    ff30:	10800d03 	ldbu	r2,52(r2)
    ff34:	10c03fcc 	andi	r3,r2,255
    ff38:	e0bff917 	ldw	r2,-28(fp)
    ff3c:	10800d03 	ldbu	r2,52(r2)
    ff40:	11003fcc 	andi	r4,r2,255
    ff44:	d0a83844 	addi	r2,gp,-24351
    ff48:	2085883a 	add	r2,r4,r2
    ff4c:	11000003 	ldbu	r4,0(r2)
    ff50:	e0bff917 	ldw	r2,-28(fp)
    ff54:	10800d43 	ldbu	r2,53(r2)
    ff58:	2084b03a 	or	r2,r4,r2
    ff5c:	1009883a 	mov	r4,r2
    ff60:	d0a83844 	addi	r2,gp,-24351
    ff64:	1885883a 	add	r2,r3,r2
    ff68:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    ff6c:	e0bff917 	ldw	r2,-28(fp)
    ff70:	10800517 	ldw	r2,20(r2)
    ff74:	e0bff915 	stw	r2,-28(fp)
    ff78:	e0bffb17 	ldw	r2,-20(fp)
    ff7c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff80:	e0bfff17 	ldw	r2,-4(fp)
    ff84:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    ff88:	e0bff917 	ldw	r2,-28(fp)
    ff8c:	10800c83 	ldbu	r2,50(r2)
    ff90:	10803fcc 	andi	r2,r2,255
    ff94:	10800518 	cmpnei	r2,r2,20
    ff98:	103fb21e 	bne	r2,zero,fe64 <__alt_mem_Flash_flash_data+0xf400fe64>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    ff9c:	e037883a 	mov	sp,fp
    ffa0:	dfc00117 	ldw	ra,4(sp)
    ffa4:	df000017 	ldw	fp,0(sp)
    ffa8:	dec00204 	addi	sp,sp,8
    ffac:	f800283a 	ret

0000ffb0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    ffb0:	deffff04 	addi	sp,sp,-4
    ffb4:	df000015 	stw	fp,0(sp)
    ffb8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    ffbc:	00804784 	movi	r2,286
}
    ffc0:	e037883a 	mov	sp,fp
    ffc4:	df000017 	ldw	fp,0(sp)
    ffc8:	dec00104 	addi	sp,sp,4
    ffcc:	f800283a 	ret

0000ffd0 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    ffd0:	deffff04 	addi	sp,sp,-4
    ffd4:	df000015 	stw	fp,0(sp)
    ffd8:	d839883a 	mov	fp,sp
}
    ffdc:	e037883a 	mov	sp,fp
    ffe0:	df000017 	ldw	fp,0(sp)
    ffe4:	dec00104 	addi	sp,sp,4
    ffe8:	f800283a 	ret

0000ffec <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    ffec:	defff804 	addi	sp,sp,-32
    fff0:	dfc00715 	stw	ra,28(sp)
    fff4:	df000615 	stw	fp,24(sp)
    fff8:	df000604 	addi	fp,sp,24
    fffc:	e13ffc15 	stw	r4,-16(fp)
   10000:	e17ffd15 	stw	r5,-12(fp)
   10004:	3007883a 	mov	r3,r6
   10008:	3805883a 	mov	r2,r7
   1000c:	e0fffe05 	stb	r3,-8(fp)
   10010:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   10014:	e0bffc17 	ldw	r2,-16(fp)
   10018:	10800283 	ldbu	r2,10(r2)
   1001c:	10c03fcc 	andi	r3,r2,255
   10020:	008000b4 	movhi	r2,2
   10024:	10aebf04 	addi	r2,r2,-17668
   10028:	10c5883a 	add	r2,r2,r3
   1002c:	10800003 	ldbu	r2,0(r2)
   10030:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   10034:	e0bffa03 	ldbu	r2,-24(fp)
   10038:	e0fffc17 	ldw	r3,-16(fp)
   1003c:	1885883a 	add	r2,r3,r2
   10040:	10800204 	addi	r2,r2,8
   10044:	108000c3 	ldbu	r2,3(r2)
   10048:	10c03fcc 	andi	r3,r2,255
   1004c:	008000b4 	movhi	r2,2
   10050:	10aebf04 	addi	r2,r2,-17668
   10054:	10c5883a 	add	r2,r2,r3
   10058:	10800003 	ldbu	r2,0(r2)
   1005c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   10060:	e0bffa03 	ldbu	r2,-24(fp)
   10064:	100490fa 	slli	r2,r2,3
   10068:	1007883a 	mov	r3,r2
   1006c:	e0bffa43 	ldbu	r2,-23(fp)
   10070:	1885883a 	add	r2,r3,r2
   10074:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   10078:	e0fffa83 	ldbu	r3,-22(fp)
   1007c:	008000f4 	movhi	r2,3
   10080:	10b5b804 	addi	r2,r2,-10528
   10084:	18c7883a 	add	r3,r3,r3
   10088:	18c7883a 	add	r3,r3,r3
   1008c:	10c5883a 	add	r2,r2,r3
   10090:	10800017 	ldw	r2,0(r2)
   10094:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   10098:	e0bffb17 	ldw	r2,-20(fp)
   1009c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   100a0:	e0bffb17 	ldw	r2,-20(fp)
   100a4:	e0fffd17 	ldw	r3,-12(fp)
   100a8:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   100ac:	e0bffb17 	ldw	r2,-20(fp)
   100b0:	10800c03 	ldbu	r2,48(r2)
   100b4:	1007883a 	mov	r3,r2
   100b8:	e0bffe03 	ldbu	r2,-8(fp)
   100bc:	0084303a 	nor	r2,zero,r2
   100c0:	1884703a 	and	r2,r3,r2
   100c4:	1007883a 	mov	r3,r2
   100c8:	e0bffb17 	ldw	r2,-20(fp)
   100cc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   100d0:	e0bffb17 	ldw	r2,-20(fp)
   100d4:	e0ffff03 	ldbu	r3,-4(fp)
   100d8:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   100dc:	e0bffb17 	ldw	r2,-20(fp)
   100e0:	10800c03 	ldbu	r2,48(r2)
   100e4:	10803fcc 	andi	r2,r2,255
   100e8:	1080020c 	andi	r2,r2,8
   100ec:	1000111e 	bne	r2,zero,10134 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   100f0:	e0bffb17 	ldw	r2,-20(fp)
   100f4:	10c00d83 	ldbu	r3,54(r2)
   100f8:	d0a83803 	ldbu	r2,-24352(gp)
   100fc:	1884b03a 	or	r2,r3,r2
   10100:	d0a83805 	stb	r2,-24352(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   10104:	e0fffa03 	ldbu	r3,-24(fp)
   10108:	e13ffa03 	ldbu	r4,-24(fp)
   1010c:	d0a83844 	addi	r2,gp,-24351
   10110:	2085883a 	add	r2,r4,r2
   10114:	11000003 	ldbu	r4,0(r2)
   10118:	e0bffb17 	ldw	r2,-20(fp)
   1011c:	10800d43 	ldbu	r2,53(r2)
   10120:	2084b03a 	or	r2,r4,r2
   10124:	1009883a 	mov	r4,r2
   10128:	d0a83844 	addi	r2,gp,-24351
   1012c:	1885883a 	add	r2,r3,r2
   10130:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   10134:	e13ffb17 	ldw	r4,-20(fp)
   10138:	e17ffc17 	ldw	r5,-16(fp)
   1013c:	00103dc0 	call	103dc <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   10140:	e0bffb17 	ldw	r2,-20(fp)
   10144:	10800817 	ldw	r2,32(r2)
   10148:	10000826 	beq	r2,zero,1016c <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1014c:	e0bffb17 	ldw	r2,-20(fp)
   10150:	10800817 	ldw	r2,32(r2)
   10154:	e13ffb17 	ldw	r4,-20(fp)
   10158:	100b883a 	mov	r5,r2
   1015c:	00104900 	call	10490 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   10160:	e0bffb17 	ldw	r2,-20(fp)
   10164:	e0fffc17 	ldw	r3,-16(fp)
   10168:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   1016c:	e0bffa83 	ldbu	r2,-22(fp)
}
   10170:	e037883a 	mov	sp,fp
   10174:	dfc00117 	ldw	ra,4(sp)
   10178:	df000017 	ldw	fp,0(sp)
   1017c:	dec00204 	addi	sp,sp,8
   10180:	f800283a 	ret

00010184 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   10184:	defffd04 	addi	sp,sp,-12
   10188:	df000215 	stw	fp,8(sp)
   1018c:	df000204 	addi	fp,sp,8
   10190:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   10194:	d0a83b17 	ldw	r2,-24340(gp)
   10198:	e0ffff17 	ldw	r3,-4(fp)
   1019c:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   101a0:	d0a83b17 	ldw	r2,-24340(gp)
   101a4:	10800d03 	ldbu	r2,52(r2)
   101a8:	10803fcc 	andi	r2,r2,255
   101ac:	d0e83b17 	ldw	r3,-24340(gp)
   101b0:	18c00d03 	ldbu	r3,52(r3)
   101b4:	18c03fcc 	andi	r3,r3,255
   101b8:	e13fff17 	ldw	r4,-4(fp)
   101bc:	20c7883a 	add	r3,r4,r3
   101c0:	18c00204 	addi	r3,r3,8
   101c4:	190000c3 	ldbu	r4,3(r3)
   101c8:	d0e83b17 	ldw	r3,-24340(gp)
   101cc:	18c00d43 	ldbu	r3,53(r3)
   101d0:	20c6b03a 	or	r3,r4,r3
   101d4:	1809883a 	mov	r4,r3
   101d8:	e0ffff17 	ldw	r3,-4(fp)
   101dc:	1885883a 	add	r2,r3,r2
   101e0:	10800204 	addi	r2,r2,8
   101e4:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   101e8:	e0bfff17 	ldw	r2,-4(fp)
   101ec:	10c00283 	ldbu	r3,10(r2)
   101f0:	d0a83b17 	ldw	r2,-24340(gp)
   101f4:	10800d83 	ldbu	r2,54(r2)
   101f8:	1884b03a 	or	r2,r3,r2
   101fc:	1007883a 	mov	r3,r2
   10200:	e0bfff17 	ldw	r2,-4(fp)
   10204:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   10208:	d0a83b17 	ldw	r2,-24340(gp)
   1020c:	10800d03 	ldbu	r2,52(r2)
   10210:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   10214:	e0fffe03 	ldbu	r3,-8(fp)
   10218:	e13ffe03 	ldbu	r4,-8(fp)
   1021c:	d0a83844 	addi	r2,gp,-24351
   10220:	2085883a 	add	r2,r4,r2
   10224:	10800003 	ldbu	r2,0(r2)
   10228:	1009883a 	mov	r4,r2
   1022c:	d0a83b17 	ldw	r2,-24340(gp)
   10230:	10800d43 	ldbu	r2,53(r2)
   10234:	0084303a 	nor	r2,zero,r2
   10238:	2084703a 	and	r2,r4,r2
   1023c:	1009883a 	mov	r4,r2
   10240:	d0a83844 	addi	r2,gp,-24351
   10244:	1885883a 	add	r2,r3,r2
   10248:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1024c:	e0fffe03 	ldbu	r3,-8(fp)
   10250:	d0a83844 	addi	r2,gp,-24351
   10254:	1885883a 	add	r2,r3,r2
   10258:	10800003 	ldbu	r2,0(r2)
   1025c:	10803fcc 	andi	r2,r2,255
   10260:	1000071e 	bne	r2,zero,10280 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   10264:	d0a83b17 	ldw	r2,-24340(gp)
   10268:	10800d83 	ldbu	r2,54(r2)
   1026c:	0084303a 	nor	r2,zero,r2
   10270:	1007883a 	mov	r3,r2
   10274:	d0a83803 	ldbu	r2,-24352(gp)
   10278:	1884703a 	and	r2,r3,r2
   1027c:	d0a83805 	stb	r2,-24352(gp)
    }
}
   10280:	e037883a 	mov	sp,fp
   10284:	df000017 	ldw	fp,0(sp)
   10288:	dec00104 	addi	sp,sp,4
   1028c:	f800283a 	ret

00010290 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   10290:	defffb04 	addi	sp,sp,-20
   10294:	df000415 	stw	fp,16(sp)
   10298:	df000404 	addi	fp,sp,16
   1029c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   102a0:	d0a83b17 	ldw	r2,-24340(gp)
   102a4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   102a8:	d0a83b17 	ldw	r2,-24340(gp)
   102ac:	e0ffff17 	ldw	r3,-4(fp)
   102b0:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   102b4:	e0bfff17 	ldw	r2,-4(fp)
   102b8:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   102bc:	e0bffc17 	ldw	r2,-16(fp)
   102c0:	10800017 	ldw	r2,0(r2)
   102c4:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   102c8:	00002006 	br	1034c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   102cc:	d0a83b17 	ldw	r2,-24340(gp)
   102d0:	10800d03 	ldbu	r2,52(r2)
   102d4:	10803fcc 	andi	r2,r2,255
   102d8:	d0e83b17 	ldw	r3,-24340(gp)
   102dc:	18c00d03 	ldbu	r3,52(r3)
   102e0:	18c03fcc 	andi	r3,r3,255
   102e4:	e13ffd17 	ldw	r4,-12(fp)
   102e8:	20c7883a 	add	r3,r4,r3
   102ec:	18c00204 	addi	r3,r3,8
   102f0:	190000c3 	ldbu	r4,3(r3)
   102f4:	d0e83b17 	ldw	r3,-24340(gp)
   102f8:	18c00d43 	ldbu	r3,53(r3)
   102fc:	20c6b03a 	or	r3,r4,r3
   10300:	1809883a 	mov	r4,r3
   10304:	e0fffd17 	ldw	r3,-12(fp)
   10308:	1885883a 	add	r2,r3,r2
   1030c:	10800204 	addi	r2,r2,8
   10310:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   10314:	e0bffd17 	ldw	r2,-12(fp)
   10318:	10c00283 	ldbu	r3,10(r2)
   1031c:	d0a83b17 	ldw	r2,-24340(gp)
   10320:	10800d83 	ldbu	r2,54(r2)
   10324:	1884b03a 	or	r2,r3,r2
   10328:	1007883a 	mov	r3,r2
   1032c:	e0bffd17 	ldw	r2,-12(fp)
   10330:	10c00285 	stb	r3,10(r2)
        pevents++;
   10334:	e0bffc17 	ldw	r2,-16(fp)
   10338:	10800104 	addi	r2,r2,4
   1033c:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   10340:	e0bffc17 	ldw	r2,-16(fp)
   10344:	10800017 	ldw	r2,0(r2)
   10348:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   1034c:	e0bffd17 	ldw	r2,-12(fp)
   10350:	103fde1e 	bne	r2,zero,102cc <__alt_mem_Flash_flash_data+0xf40102cc>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   10354:	d0a83b17 	ldw	r2,-24340(gp)
   10358:	10800d03 	ldbu	r2,52(r2)
   1035c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   10360:	e0fffe03 	ldbu	r3,-8(fp)
   10364:	e13ffe03 	ldbu	r4,-8(fp)
   10368:	d0a83844 	addi	r2,gp,-24351
   1036c:	2085883a 	add	r2,r4,r2
   10370:	10800003 	ldbu	r2,0(r2)
   10374:	1009883a 	mov	r4,r2
   10378:	d0a83b17 	ldw	r2,-24340(gp)
   1037c:	10800d43 	ldbu	r2,53(r2)
   10380:	0084303a 	nor	r2,zero,r2
   10384:	2084703a 	and	r2,r4,r2
   10388:	1009883a 	mov	r4,r2
   1038c:	d0a83844 	addi	r2,gp,-24351
   10390:	1885883a 	add	r2,r3,r2
   10394:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   10398:	e0fffe03 	ldbu	r3,-8(fp)
   1039c:	d0a83844 	addi	r2,gp,-24351
   103a0:	1885883a 	add	r2,r3,r2
   103a4:	10800003 	ldbu	r2,0(r2)
   103a8:	10803fcc 	andi	r2,r2,255
   103ac:	1000071e 	bne	r2,zero,103cc <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   103b0:	d0a83b17 	ldw	r2,-24340(gp)
   103b4:	10800d83 	ldbu	r2,54(r2)
   103b8:	0084303a 	nor	r2,zero,r2
   103bc:	1007883a 	mov	r3,r2
   103c0:	d0a83803 	ldbu	r2,-24352(gp)
   103c4:	1884703a 	and	r2,r3,r2
   103c8:	d0a83805 	stb	r2,-24352(gp)
    }
}
   103cc:	e037883a 	mov	sp,fp
   103d0:	df000017 	ldw	fp,0(sp)
   103d4:	dec00104 	addi	sp,sp,4
   103d8:	f800283a 	ret

000103dc <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   103dc:	defffc04 	addi	sp,sp,-16
   103e0:	df000315 	stw	fp,12(sp)
   103e4:	df000304 	addi	fp,sp,12
   103e8:	e13ffe15 	stw	r4,-8(fp)
   103ec:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   103f0:	e0bffe17 	ldw	r2,-8(fp)
   103f4:	10800d03 	ldbu	r2,52(r2)
   103f8:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   103fc:	e0bffd03 	ldbu	r2,-12(fp)
   10400:	e0fffd03 	ldbu	r3,-12(fp)
   10404:	e13fff17 	ldw	r4,-4(fp)
   10408:	20c7883a 	add	r3,r4,r3
   1040c:	18c00204 	addi	r3,r3,8
   10410:	18c000c3 	ldbu	r3,3(r3)
   10414:	1809883a 	mov	r4,r3
   10418:	e0fffe17 	ldw	r3,-8(fp)
   1041c:	18c00d43 	ldbu	r3,53(r3)
   10420:	00c6303a 	nor	r3,zero,r3
   10424:	20c6703a 	and	r3,r4,r3
   10428:	1809883a 	mov	r4,r3
   1042c:	e0ffff17 	ldw	r3,-4(fp)
   10430:	1885883a 	add	r2,r3,r2
   10434:	10800204 	addi	r2,r2,8
   10438:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   1043c:	e0bffd03 	ldbu	r2,-12(fp)
   10440:	e0ffff17 	ldw	r3,-4(fp)
   10444:	1885883a 	add	r2,r3,r2
   10448:	10800204 	addi	r2,r2,8
   1044c:	108000c3 	ldbu	r2,3(r2)
   10450:	10803fcc 	andi	r2,r2,255
   10454:	10000a1e 	bne	r2,zero,10480 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   10458:	e0bfff17 	ldw	r2,-4(fp)
   1045c:	10800283 	ldbu	r2,10(r2)
   10460:	1007883a 	mov	r3,r2
   10464:	e0bffe17 	ldw	r2,-8(fp)
   10468:	10800d83 	ldbu	r2,54(r2)
   1046c:	0084303a 	nor	r2,zero,r2
   10470:	1884703a 	and	r2,r3,r2
   10474:	1007883a 	mov	r3,r2
   10478:	e0bfff17 	ldw	r2,-4(fp)
   1047c:	10c00285 	stb	r3,10(r2)
    }
}
   10480:	e037883a 	mov	sp,fp
   10484:	df000017 	ldw	fp,0(sp)
   10488:	dec00104 	addi	sp,sp,4
   1048c:	f800283a 	ret

00010490 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   10490:	defffa04 	addi	sp,sp,-24
   10494:	df000515 	stw	fp,20(sp)
   10498:	df000504 	addi	fp,sp,20
   1049c:	e13ffe15 	stw	r4,-8(fp)
   104a0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   104a4:	e0bffe17 	ldw	r2,-8(fp)
   104a8:	10800d03 	ldbu	r2,52(r2)
   104ac:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   104b0:	e0bffe17 	ldw	r2,-8(fp)
   104b4:	10800d83 	ldbu	r2,54(r2)
   104b8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   104bc:	e0bffe17 	ldw	r2,-8(fp)
   104c0:	10800d43 	ldbu	r2,53(r2)
   104c4:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   104c8:	e0bfff17 	ldw	r2,-4(fp)
   104cc:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   104d0:	e0bffb17 	ldw	r2,-20(fp)
   104d4:	10800017 	ldw	r2,0(r2)
   104d8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   104dc:	00002506 	br	10574 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   104e0:	e0bffd03 	ldbu	r2,-12(fp)
   104e4:	e0fffd03 	ldbu	r3,-12(fp)
   104e8:	e13ffc17 	ldw	r4,-16(fp)
   104ec:	20c7883a 	add	r3,r4,r3
   104f0:	18c00204 	addi	r3,r3,8
   104f4:	18c000c3 	ldbu	r3,3(r3)
   104f8:	1809883a 	mov	r4,r3
   104fc:	e0fffd83 	ldbu	r3,-10(fp)
   10500:	00c6303a 	nor	r3,zero,r3
   10504:	20c6703a 	and	r3,r4,r3
   10508:	1809883a 	mov	r4,r3
   1050c:	e0fffc17 	ldw	r3,-16(fp)
   10510:	1885883a 	add	r2,r3,r2
   10514:	10800204 	addi	r2,r2,8
   10518:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   1051c:	e0bffd03 	ldbu	r2,-12(fp)
   10520:	e0fffc17 	ldw	r3,-16(fp)
   10524:	1885883a 	add	r2,r3,r2
   10528:	10800204 	addi	r2,r2,8
   1052c:	108000c3 	ldbu	r2,3(r2)
   10530:	10803fcc 	andi	r2,r2,255
   10534:	1000091e 	bne	r2,zero,1055c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   10538:	e0bffc17 	ldw	r2,-16(fp)
   1053c:	10800283 	ldbu	r2,10(r2)
   10540:	1007883a 	mov	r3,r2
   10544:	e0bffd43 	ldbu	r2,-11(fp)
   10548:	0084303a 	nor	r2,zero,r2
   1054c:	1884703a 	and	r2,r3,r2
   10550:	1007883a 	mov	r3,r2
   10554:	e0bffc17 	ldw	r2,-16(fp)
   10558:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   1055c:	e0bffb17 	ldw	r2,-20(fp)
   10560:	10800104 	addi	r2,r2,4
   10564:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   10568:	e0bffb17 	ldw	r2,-20(fp)
   1056c:	10800017 	ldw	r2,0(r2)
   10570:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   10574:	e0bffc17 	ldw	r2,-16(fp)
   10578:	103fd91e 	bne	r2,zero,104e0 <__alt_mem_Flash_flash_data+0xf40104e0>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   1057c:	e037883a 	mov	sp,fp
   10580:	df000017 	ldw	fp,0(sp)
   10584:	dec00104 	addi	sp,sp,4
   10588:	f800283a 	ret

0001058c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   1058c:	defffc04 	addi	sp,sp,-16
   10590:	df000315 	stw	fp,12(sp)
   10594:	df000304 	addi	fp,sp,12
   10598:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   1059c:	e0bfff17 	ldw	r2,-4(fp)
   105a0:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   105a4:	e0bfff17 	ldw	r2,-4(fp)
   105a8:	108002c4 	addi	r2,r2,11
   105ac:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   105b0:	e03ffe05 	stb	zero,-8(fp)
   105b4:	00000706 	br	105d4 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   105b8:	e0bffd17 	ldw	r2,-12(fp)
   105bc:	10c00044 	addi	r3,r2,1
   105c0:	e0fffd15 	stw	r3,-12(fp)
   105c4:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   105c8:	e0bffe03 	ldbu	r2,-8(fp)
   105cc:	10800044 	addi	r2,r2,1
   105d0:	e0bffe05 	stb	r2,-8(fp)
   105d4:	e0bffe03 	ldbu	r2,-8(fp)
   105d8:	108000f0 	cmpltui	r2,r2,3
   105dc:	103ff61e 	bne	r2,zero,105b8 <__alt_mem_Flash_flash_data+0xf40105b8>
        *ptbl++ = 0;
    }
}
   105e0:	e037883a 	mov	sp,fp
   105e4:	df000017 	ldw	fp,0(sp)
   105e8:	dec00104 	addi	sp,sp,4
   105ec:	f800283a 	ret

000105f0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   105f0:	defffb04 	addi	sp,sp,-20
   105f4:	dfc00415 	stw	ra,16(sp)
   105f8:	df000315 	stw	fp,12(sp)
   105fc:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   10600:	010000f4 	movhi	r4,3
   10604:	2131a404 	addi	r4,r4,-14704
   10608:	0142d004 	movi	r5,2880
   1060c:	00109500 	call	10950 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   10610:	008000f4 	movhi	r2,3
   10614:	10b1a404 	addi	r2,r2,-14704
   10618:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   1061c:	008000f4 	movhi	r2,3
   10620:	10b1b004 	addi	r2,r2,-14656
   10624:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   10628:	e03ffd0d 	sth	zero,-12(fp)
   1062c:	00001306 	br	1067c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   10630:	e0bffe17 	ldw	r2,-8(fp)
   10634:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   10638:	e0bffe17 	ldw	r2,-8(fp)
   1063c:	e0ffff17 	ldw	r3,-4(fp)
   10640:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   10644:	e0bffe17 	ldw	r2,-8(fp)
   10648:	00c00fc4 	movi	r3,63
   1064c:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   10650:	e0bffe17 	ldw	r2,-8(fp)
   10654:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   10658:	e0bffe17 	ldw	r2,-8(fp)
   1065c:	10800c04 	addi	r2,r2,48
   10660:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   10664:	e0bfff17 	ldw	r2,-4(fp)
   10668:	10800c04 	addi	r2,r2,48
   1066c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   10670:	e0bffd0b 	ldhu	r2,-12(fp)
   10674:	10800044 	addi	r2,r2,1
   10678:	e0bffd0d 	sth	r2,-12(fp)
   1067c:	e0bffd0b 	ldhu	r2,-12(fp)
   10680:	10800ef0 	cmpltui	r2,r2,59
   10684:	103fea1e 	bne	r2,zero,10630 <__alt_mem_Flash_flash_data+0xf4010630>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   10688:	e0bffe17 	ldw	r2,-8(fp)
   1068c:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   10690:	e0bffe17 	ldw	r2,-8(fp)
   10694:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   10698:	e0bffe17 	ldw	r2,-8(fp)
   1069c:	00c00fc4 	movi	r3,63
   106a0:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   106a4:	e0bffe17 	ldw	r2,-8(fp)
   106a8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   106ac:	008000f4 	movhi	r2,3
   106b0:	10b1a404 	addi	r2,r2,-14704
   106b4:	d0a83915 	stw	r2,-24348(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   106b8:	e037883a 	mov	sp,fp
   106bc:	dfc00117 	ldw	ra,4(sp)
   106c0:	df000017 	ldw	fp,0(sp)
   106c4:	dec00204 	addi	sp,sp,8
   106c8:	f800283a 	ret

000106cc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   106cc:	deffff04 	addi	sp,sp,-4
   106d0:	df000015 	stw	fp,0(sp)
   106d4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   106d8:	d0283c15 	stw	zero,-24336(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   106dc:	d0283a05 	stb	zero,-24344(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   106e0:	d0282c05 	stb	zero,-24400(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   106e4:	d0283445 	stb	zero,-24367(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   106e8:	d0282c45 	stb	zero,-24399(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   106ec:	d0283115 	stw	zero,-24380(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   106f0:	d0282d15 	stw	zero,-24396(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   106f4:	d0283f15 	stw	zero,-24324(gp)
    OSIdleCtrMax  = 0L;
   106f8:	d0283215 	stw	zero,-24376(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   106fc:	d0283e05 	stb	zero,-24328(gp)
#endif
}
   10700:	e037883a 	mov	sp,fp
   10704:	df000017 	ldw	fp,0(sp)
   10708:	dec00104 	addi	sp,sp,4
   1070c:	f800283a 	ret

00010710 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   10710:	defffd04 	addi	sp,sp,-12
   10714:	df000215 	stw	fp,8(sp)
   10718:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   1071c:	d0283805 	stb	zero,-24352(gp)
    prdytbl       = &OSRdyTbl[0];
   10720:	d0a83844 	addi	r2,gp,-24351
   10724:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   10728:	e03ffe05 	stb	zero,-8(fp)
   1072c:	00000706 	br	1074c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   10730:	e0bfff17 	ldw	r2,-4(fp)
   10734:	10c00044 	addi	r3,r2,1
   10738:	e0ffff15 	stw	r3,-4(fp)
   1073c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   10740:	e0bffe03 	ldbu	r2,-8(fp)
   10744:	10800044 	addi	r2,r2,1
   10748:	e0bffe05 	stb	r2,-8(fp)
   1074c:	e0bffe03 	ldbu	r2,-8(fp)
   10750:	108000f0 	cmpltui	r2,r2,3
   10754:	103ff61e 	bne	r2,zero,10730 <__alt_mem_Flash_flash_data+0xf4010730>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   10758:	d0282e45 	stb	zero,-24391(gp)
    OSPrioHighRdy = 0;
   1075c:	d0282e05 	stb	zero,-24392(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   10760:	d0283615 	stw	zero,-24360(gp)
    OSTCBCur      = (OS_TCB *)0;
   10764:	d0283b15 	stw	zero,-24340(gp)
}
   10768:	e037883a 	mov	sp,fp
   1076c:	df000017 	ldw	fp,0(sp)
   10770:	dec00104 	addi	sp,sp,4
   10774:	f800283a 	ret

00010778 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   10778:	defff804 	addi	sp,sp,-32
   1077c:	dfc00715 	stw	ra,28(sp)
   10780:	df000615 	stw	fp,24(sp)
   10784:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   10788:	00bfffd4 	movui	r2,65535
   1078c:	d8800015 	stw	r2,0(sp)
   10790:	008000f4 	movhi	r2,3
   10794:	10afa404 	addi	r2,r2,-16752
   10798:	d8800115 	stw	r2,4(sp)
   1079c:	00808004 	movi	r2,512
   107a0:	d8800215 	stw	r2,8(sp)
   107a4:	d8000315 	stw	zero,12(sp)
   107a8:	008000c4 	movi	r2,3
   107ac:	d8800415 	stw	r2,16(sp)
   107b0:	01000074 	movhi	r4,1
   107b4:	21030204 	addi	r4,r4,3080
   107b8:	000b883a 	mov	r5,zero
   107bc:	018000f4 	movhi	r6,3
   107c0:	31b1a304 	addi	r6,r6,-14708
   107c4:	01c00504 	movi	r7,20
   107c8:	00161a40 	call	161a4 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   107cc:	01000504 	movi	r4,20
   107d0:	014000b4 	movhi	r5,2
   107d4:	296eff04 	addi	r5,r5,-17412
   107d8:	e1bfff04 	addi	r6,fp,-4
   107dc:	0016a700 	call	16a70 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   107e0:	e037883a 	mov	sp,fp
   107e4:	dfc00117 	ldw	ra,4(sp)
   107e8:	df000017 	ldw	fp,0(sp)
   107ec:	dec00204 	addi	sp,sp,8
   107f0:	f800283a 	ret

000107f4 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   107f4:	defff804 	addi	sp,sp,-32
   107f8:	dfc00715 	stw	ra,28(sp)
   107fc:	df000615 	stw	fp,24(sp)
   10800:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   10804:	00bfff94 	movui	r2,65534
   10808:	d8800015 	stw	r2,0(sp)
   1080c:	008000f4 	movhi	r2,3
   10810:	10ad2c04 	addi	r2,r2,-19280
   10814:	d8800115 	stw	r2,4(sp)
   10818:	00808004 	movi	r2,512
   1081c:	d8800215 	stw	r2,8(sp)
   10820:	d8000315 	stw	zero,12(sp)
   10824:	008000c4 	movi	r2,3
   10828:	d8800415 	stw	r2,16(sp)
   1082c:	01000074 	movhi	r4,1
   10830:	21031904 	addi	r4,r4,3172
   10834:	000b883a 	mov	r5,zero
   10838:	018000f4 	movhi	r6,3
   1083c:	31af2b04 	addi	r6,r6,-17236
   10840:	01c004c4 	movi	r7,19
   10844:	00161a40 	call	161a4 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   10848:	010004c4 	movi	r4,19
   1084c:	014000b4 	movhi	r5,2
   10850:	296f0304 	addi	r5,r5,-17396
   10854:	e1bfff04 	addi	r6,fp,-4
   10858:	0016a700 	call	16a70 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   1085c:	e037883a 	mov	sp,fp
   10860:	dfc00117 	ldw	ra,4(sp)
   10864:	df000017 	ldw	fp,0(sp)
   10868:	dec00204 	addi	sp,sp,8
   1086c:	f800283a 	ret

00010870 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   10870:	defffb04 	addi	sp,sp,-20
   10874:	dfc00415 	stw	ra,16(sp)
   10878:	df000315 	stw	fp,12(sp)
   1087c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   10880:	010000f4 	movhi	r4,3
   10884:	21347404 	addi	r4,r4,-11824
   10888:	01414404 	movi	r5,1296
   1088c:	00109500 	call	10950 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   10890:	010000f4 	movhi	r4,3
   10894:	2135b804 	addi	r4,r4,-10528
   10898:	01401504 	movi	r5,84
   1089c:	00109500 	call	10950 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   108a0:	008000f4 	movhi	r2,3
   108a4:	10b47404 	addi	r2,r2,-11824
   108a8:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   108ac:	008000f4 	movhi	r2,3
   108b0:	10b48f04 	addi	r2,r2,-11716
   108b4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   108b8:	e03ffd05 	stb	zero,-12(fp)
   108bc:	00001106 	br	10904 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   108c0:	e0bffe17 	ldw	r2,-8(fp)
   108c4:	e0ffff17 	ldw	r3,-4(fp)
   108c8:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   108cc:	e0bffe17 	ldw	r2,-8(fp)
   108d0:	00c00fc4 	movi	r3,63
   108d4:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   108d8:	e0bffe17 	ldw	r2,-8(fp)
   108dc:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   108e0:	e0bffe17 	ldw	r2,-8(fp)
   108e4:	10801b04 	addi	r2,r2,108
   108e8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   108ec:	e0bfff17 	ldw	r2,-4(fp)
   108f0:	10801b04 	addi	r2,r2,108
   108f4:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   108f8:	e0bffd03 	ldbu	r2,-12(fp)
   108fc:	10800044 	addi	r2,r2,1
   10900:	e0bffd05 	stb	r2,-12(fp)
   10904:	e0bffd03 	ldbu	r2,-12(fp)
   10908:	108002f0 	cmpltui	r2,r2,11
   1090c:	103fec1e 	bne	r2,zero,108c0 <__alt_mem_Flash_flash_data+0xf40108c0>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   10910:	e0bffe17 	ldw	r2,-8(fp)
   10914:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   10918:	e0bffe17 	ldw	r2,-8(fp)
   1091c:	00c00fc4 	movi	r3,63
   10920:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   10924:	e0bffe17 	ldw	r2,-8(fp)
   10928:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   1092c:	d0282f15 	stw	zero,-24388(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   10930:	008000f4 	movhi	r2,3
   10934:	10b47404 	addi	r2,r2,-11824
   10938:	d0a83315 	stw	r2,-24372(gp)
}
   1093c:	e037883a 	mov	sp,fp
   10940:	dfc00117 	ldw	ra,4(sp)
   10944:	df000017 	ldw	fp,0(sp)
   10948:	dec00204 	addi	sp,sp,8
   1094c:	f800283a 	ret

00010950 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   10950:	defffd04 	addi	sp,sp,-12
   10954:	df000215 	stw	fp,8(sp)
   10958:	df000204 	addi	fp,sp,8
   1095c:	e13ffe15 	stw	r4,-8(fp)
   10960:	2805883a 	mov	r2,r5
   10964:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   10968:	00000706 	br	10988 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   1096c:	e0bffe17 	ldw	r2,-8(fp)
   10970:	10c00044 	addi	r3,r2,1
   10974:	e0fffe15 	stw	r3,-8(fp)
   10978:	10000005 	stb	zero,0(r2)
        size--;
   1097c:	e0bfff0b 	ldhu	r2,-4(fp)
   10980:	10bfffc4 	addi	r2,r2,-1
   10984:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   10988:	e0bfff0b 	ldhu	r2,-4(fp)
   1098c:	103ff71e 	bne	r2,zero,1096c <__alt_mem_Flash_flash_data+0xf401096c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   10990:	e037883a 	mov	sp,fp
   10994:	df000017 	ldw	fp,0(sp)
   10998:	dec00104 	addi	sp,sp,4
   1099c:	f800283a 	ret

000109a0 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   109a0:	defffc04 	addi	sp,sp,-16
   109a4:	df000315 	stw	fp,12(sp)
   109a8:	df000304 	addi	fp,sp,12
   109ac:	e13ffd15 	stw	r4,-12(fp)
   109b0:	e17ffe15 	stw	r5,-8(fp)
   109b4:	3005883a 	mov	r2,r6
   109b8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   109bc:	00000b06 	br	109ec <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   109c0:	e0bffd17 	ldw	r2,-12(fp)
   109c4:	10c00044 	addi	r3,r2,1
   109c8:	e0fffd15 	stw	r3,-12(fp)
   109cc:	e0fffe17 	ldw	r3,-8(fp)
   109d0:	19000044 	addi	r4,r3,1
   109d4:	e13ffe15 	stw	r4,-8(fp)
   109d8:	18c00003 	ldbu	r3,0(r3)
   109dc:	10c00005 	stb	r3,0(r2)
        size--;
   109e0:	e0bfff0b 	ldhu	r2,-4(fp)
   109e4:	10bfffc4 	addi	r2,r2,-1
   109e8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   109ec:	e0bfff0b 	ldhu	r2,-4(fp)
   109f0:	103ff31e 	bne	r2,zero,109c0 <__alt_mem_Flash_flash_data+0xf40109c0>
        *pdest++ = *psrc++;
        size--;
    }
}
   109f4:	e037883a 	mov	sp,fp
   109f8:	df000017 	ldw	fp,0(sp)
   109fc:	dec00104 	addi	sp,sp,4
   10a00:	f800283a 	ret

00010a04 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   10a04:	defffb04 	addi	sp,sp,-20
   10a08:	dfc00415 	stw	ra,16(sp)
   10a0c:	df000315 	stw	fp,12(sp)
   10a10:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   10a14:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a18:	0005303a 	rdctl	r2,status
   10a1c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a20:	e0fffe17 	ldw	r3,-8(fp)
   10a24:	00bfff84 	movi	r2,-2
   10a28:	1884703a 	and	r2,r3,r2
   10a2c:	1001703a 	wrctl	status,r2
  
  return context;
   10a30:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   10a34:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   10a38:	d0a83a03 	ldbu	r2,-24344(gp)
   10a3c:	10803fcc 	andi	r2,r2,255
   10a40:	10001a1e 	bne	r2,zero,10aac <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   10a44:	d0a82c03 	ldbu	r2,-24400(gp)
   10a48:	10803fcc 	andi	r2,r2,255
   10a4c:	1000171e 	bne	r2,zero,10aac <OS_Sched+0xa8>
            OS_SchedNew();
   10a50:	0010ad00 	call	10ad0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   10a54:	d0e82e03 	ldbu	r3,-24392(gp)
   10a58:	d0a82e43 	ldbu	r2,-24391(gp)
   10a5c:	18c03fcc 	andi	r3,r3,255
   10a60:	10803fcc 	andi	r2,r2,255
   10a64:	18801126 	beq	r3,r2,10aac <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   10a68:	d0a82e03 	ldbu	r2,-24392(gp)
   10a6c:	10c03fcc 	andi	r3,r2,255
   10a70:	008000f4 	movhi	r2,3
   10a74:	10b5b804 	addi	r2,r2,-10528
   10a78:	18c7883a 	add	r3,r3,r3
   10a7c:	18c7883a 	add	r3,r3,r3
   10a80:	10c5883a 	add	r2,r2,r3
   10a84:	10800017 	ldw	r2,0(r2)
   10a88:	d0a83615 	stw	r2,-24360(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   10a8c:	d0a83617 	ldw	r2,-24360(gp)
   10a90:	10c00e17 	ldw	r3,56(r2)
   10a94:	18c00044 	addi	r3,r3,1
   10a98:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   10a9c:	d0a83117 	ldw	r2,-24380(gp)
   10aa0:	10800044 	addi	r2,r2,1
   10aa4:	d0a83115 	stw	r2,-24380(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   10aa8:	001ac0c0 	call	1ac0c <OSCtxSw>
   10aac:	e0bffd17 	ldw	r2,-12(fp)
   10ab0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ab4:	e0bfff17 	ldw	r2,-4(fp)
   10ab8:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   10abc:	e037883a 	mov	sp,fp
   10ac0:	dfc00117 	ldw	ra,4(sp)
   10ac4:	df000017 	ldw	fp,0(sp)
   10ac8:	dec00204 	addi	sp,sp,8
   10acc:	f800283a 	ret

00010ad0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   10ad0:	defffe04 	addi	sp,sp,-8
   10ad4:	df000115 	stw	fp,4(sp)
   10ad8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   10adc:	d0a83803 	ldbu	r2,-24352(gp)
   10ae0:	10c03fcc 	andi	r3,r2,255
   10ae4:	008000b4 	movhi	r2,2
   10ae8:	10aebf04 	addi	r2,r2,-17668
   10aec:	10c5883a 	add	r2,r2,r3
   10af0:	10800003 	ldbu	r2,0(r2)
   10af4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   10af8:	e0bfff03 	ldbu	r2,-4(fp)
   10afc:	100490fa 	slli	r2,r2,3
   10b00:	1009883a 	mov	r4,r2
   10b04:	e0ffff03 	ldbu	r3,-4(fp)
   10b08:	d0a83844 	addi	r2,gp,-24351
   10b0c:	1885883a 	add	r2,r3,r2
   10b10:	10800003 	ldbu	r2,0(r2)
   10b14:	10c03fcc 	andi	r3,r2,255
   10b18:	008000b4 	movhi	r2,2
   10b1c:	10aebf04 	addi	r2,r2,-17668
   10b20:	10c5883a 	add	r2,r2,r3
   10b24:	10800003 	ldbu	r2,0(r2)
   10b28:	2085883a 	add	r2,r4,r2
   10b2c:	d0a82e05 	stb	r2,-24392(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   10b30:	e037883a 	mov	sp,fp
   10b34:	df000017 	ldw	fp,0(sp)
   10b38:	dec00104 	addi	sp,sp,4
   10b3c:	f800283a 	ret

00010b40 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   10b40:	defffc04 	addi	sp,sp,-16
   10b44:	df000315 	stw	fp,12(sp)
   10b48:	df000304 	addi	fp,sp,12
   10b4c:	e13ffe15 	stw	r4,-8(fp)
   10b50:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   10b54:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   10b58:	00000b06 	br	10b88 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   10b5c:	e0bffe17 	ldw	r2,-8(fp)
   10b60:	10c00044 	addi	r3,r2,1
   10b64:	e0fffe15 	stw	r3,-8(fp)
   10b68:	e0ffff17 	ldw	r3,-4(fp)
   10b6c:	19000044 	addi	r4,r3,1
   10b70:	e13fff15 	stw	r4,-4(fp)
   10b74:	18c00003 	ldbu	r3,0(r3)
   10b78:	10c00005 	stb	r3,0(r2)
        len++;
   10b7c:	e0bffd03 	ldbu	r2,-12(fp)
   10b80:	10800044 	addi	r2,r2,1
   10b84:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   10b88:	e0bfff17 	ldw	r2,-4(fp)
   10b8c:	10800003 	ldbu	r2,0(r2)
   10b90:	10803fcc 	andi	r2,r2,255
   10b94:	103ff11e 	bne	r2,zero,10b5c <__alt_mem_Flash_flash_data+0xf4010b5c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   10b98:	e0bffe17 	ldw	r2,-8(fp)
   10b9c:	10000005 	stb	zero,0(r2)
    return (len);
   10ba0:	e0bffd03 	ldbu	r2,-12(fp)
}
   10ba4:	e037883a 	mov	sp,fp
   10ba8:	df000017 	ldw	fp,0(sp)
   10bac:	dec00104 	addi	sp,sp,4
   10bb0:	f800283a 	ret

00010bb4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   10bb4:	defffd04 	addi	sp,sp,-12
   10bb8:	df000215 	stw	fp,8(sp)
   10bbc:	df000204 	addi	fp,sp,8
   10bc0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   10bc4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   10bc8:	00000606 	br	10be4 <OS_StrLen+0x30>
        psrc++;
   10bcc:	e0bfff17 	ldw	r2,-4(fp)
   10bd0:	10800044 	addi	r2,r2,1
   10bd4:	e0bfff15 	stw	r2,-4(fp)
        len++;
   10bd8:	e0bffe03 	ldbu	r2,-8(fp)
   10bdc:	10800044 	addi	r2,r2,1
   10be0:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   10be4:	e0bfff17 	ldw	r2,-4(fp)
   10be8:	10800003 	ldbu	r2,0(r2)
   10bec:	10803fcc 	andi	r2,r2,255
   10bf0:	103ff61e 	bne	r2,zero,10bcc <__alt_mem_Flash_flash_data+0xf4010bcc>
        psrc++;
        len++;
    }
    return (len);
   10bf4:	e0bffe03 	ldbu	r2,-8(fp)
}
   10bf8:	e037883a 	mov	sp,fp
   10bfc:	df000017 	ldw	fp,0(sp)
   10c00:	dec00104 	addi	sp,sp,4
   10c04:	f800283a 	ret

00010c08 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   10c08:	defffa04 	addi	sp,sp,-24
   10c0c:	dfc00515 	stw	ra,20(sp)
   10c10:	df000415 	stw	fp,16(sp)
   10c14:	df000404 	addi	fp,sp,16
   10c18:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10c1c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c20:	0005303a 	rdctl	r2,status
   10c24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c28:	e0fffd17 	ldw	r3,-12(fp)
   10c2c:	00bfff84 	movi	r2,-2
   10c30:	1884703a 	and	r2,r3,r2
   10c34:	1001703a 	wrctl	status,r2
  
  return context;
   10c38:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   10c3c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   10c40:	d0a82d17 	ldw	r2,-24396(gp)
   10c44:	10800044 	addi	r2,r2,1
   10c48:	d0a82d15 	stw	r2,-24396(gp)
   10c4c:	e0bffc17 	ldw	r2,-16(fp)
   10c50:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c54:	e0bffe17 	ldw	r2,-8(fp)
   10c58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   10c5c:	001af040 	call	1af04 <OSTaskIdleHook>
    }
   10c60:	003fef06 	br	10c20 <__alt_mem_Flash_flash_data+0xf4010c20>

00010c64 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   10c64:	defff804 	addi	sp,sp,-32
   10c68:	dfc00715 	stw	ra,28(sp)
   10c6c:	df000615 	stw	fp,24(sp)
   10c70:	dc400515 	stw	r17,20(sp)
   10c74:	dc000415 	stw	r16,16(sp)
   10c78:	df000604 	addi	fp,sp,24
   10c7c:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10c80:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   10c84:	00000206 	br	10c90 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   10c88:	01000044 	movi	r4,1
   10c8c:	001739c0 	call	1739c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   10c90:	d0a83e03 	ldbu	r2,-24328(gp)
   10c94:	10803fcc 	andi	r2,r2,255
   10c98:	103ffb26 	beq	r2,zero,10c88 <__alt_mem_Flash_flash_data+0xf4010c88>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   10c9c:	d0e83217 	ldw	r3,-24376(gp)
   10ca0:	00947b34 	movhi	r2,20972
   10ca4:	10a147c4 	addi	r2,r2,-31457
   10ca8:	1888383a 	mulxuu	r4,r3,r2
   10cac:	1885383a 	mul	r2,r3,r2
   10cb0:	1021883a 	mov	r16,r2
   10cb4:	2023883a 	mov	r17,r4
   10cb8:	8804d17a 	srli	r2,r17,5
   10cbc:	d0a83215 	stw	r2,-24376(gp)
    if (OSIdleCtrMax == 0L) {
   10cc0:	d0a83217 	ldw	r2,-24376(gp)
   10cc4:	1000031e 	bne	r2,zero,10cd4 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   10cc8:	d0283405 	stb	zero,-24368(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   10ccc:	01003fc4 	movi	r4,255
   10cd0:	0016ff00 	call	16ff0 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10cd4:	0005303a 	rdctl	r2,status
   10cd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10cdc:	e0fffb17 	ldw	r3,-20(fp)
   10ce0:	00bfff84 	movi	r2,-2
   10ce4:	1884703a 	and	r2,r3,r2
   10ce8:	1001703a 	wrctl	status,r2
  
  return context;
   10cec:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   10cf0:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   10cf4:	d0a82d17 	ldw	r2,-24396(gp)
   10cf8:	d0a83f15 	stw	r2,-24324(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   10cfc:	d0282d15 	stw	zero,-24396(gp)
   10d00:	e0bffa17 	ldw	r2,-24(fp)
   10d04:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d08:	e0bffc17 	ldw	r2,-16(fp)
   10d0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   10d10:	d0e83f17 	ldw	r3,-24324(gp)
   10d14:	d0a83217 	ldw	r2,-24376(gp)
   10d18:	1885203a 	divu	r2,r3,r2
   10d1c:	1007883a 	mov	r3,r2
   10d20:	00801904 	movi	r2,100
   10d24:	10c5c83a 	sub	r2,r2,r3
   10d28:	d0a83405 	stb	r2,-24368(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   10d2c:	001ae940 	call	1ae94 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   10d30:	0010d400 	call	10d40 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   10d34:	0009883a 	mov	r4,zero
   10d38:	001739c0 	call	1739c <OSTimeDly>
    }
   10d3c:	003fe506 	br	10cd4 <__alt_mem_Flash_flash_data+0xf4010cd4>

00010d40 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   10d40:	defffa04 	addi	sp,sp,-24
   10d44:	dfc00515 	stw	ra,20(sp)
   10d48:	df000415 	stw	fp,16(sp)
   10d4c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   10d50:	e03ffc05 	stb	zero,-16(fp)
   10d54:	00002406 	br	10de8 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   10d58:	e0fffc03 	ldbu	r3,-16(fp)
   10d5c:	e0bffe04 	addi	r2,fp,-8
   10d60:	1809883a 	mov	r4,r3
   10d64:	100b883a 	mov	r5,r2
   10d68:	0016e280 	call	16e28 <OSTaskStkChk>
   10d6c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   10d70:	e0bffc43 	ldbu	r2,-15(fp)
   10d74:	1000191e 	bne	r2,zero,10ddc <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   10d78:	e0fffc03 	ldbu	r3,-16(fp)
   10d7c:	008000f4 	movhi	r2,3
   10d80:	10b5b804 	addi	r2,r2,-10528
   10d84:	18c7883a 	add	r3,r3,r3
   10d88:	18c7883a 	add	r3,r3,r3
   10d8c:	10c5883a 	add	r2,r2,r3
   10d90:	10800017 	ldw	r2,0(r2)
   10d94:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   10d98:	e0bffd17 	ldw	r2,-12(fp)
   10d9c:	10000f26 	beq	r2,zero,10ddc <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   10da0:	e0bffd17 	ldw	r2,-12(fp)
   10da4:	10800060 	cmpeqi	r2,r2,1
   10da8:	10000c1e 	bne	r2,zero,10ddc <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   10dac:	e0bffd17 	ldw	r2,-12(fp)
   10db0:	10c00217 	ldw	r3,8(r2)
   10db4:	e0bffd17 	ldw	r2,-12(fp)
   10db8:	10800317 	ldw	r2,12(r2)
   10dbc:	1085883a 	add	r2,r2,r2
   10dc0:	1085883a 	add	r2,r2,r2
   10dc4:	1887883a 	add	r3,r3,r2
   10dc8:	e0bffd17 	ldw	r2,-12(fp)
   10dcc:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   10dd0:	e0ffff17 	ldw	r3,-4(fp)
   10dd4:	e0bffd17 	ldw	r2,-12(fp)
   10dd8:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   10ddc:	e0bffc03 	ldbu	r2,-16(fp)
   10de0:	10800044 	addi	r2,r2,1
   10de4:	e0bffc05 	stb	r2,-16(fp)
   10de8:	e0bffc03 	ldbu	r2,-16(fp)
   10dec:	10800570 	cmpltui	r2,r2,21
   10df0:	103fd91e 	bne	r2,zero,10d58 <__alt_mem_Flash_flash_data+0xf4010d58>
#endif
                }
            }
        }
    }
}
   10df4:	e037883a 	mov	sp,fp
   10df8:	dfc00117 	ldw	ra,4(sp)
   10dfc:	df000017 	ldw	fp,0(sp)
   10e00:	dec00204 	addi	sp,sp,8
   10e04:	f800283a 	ret

00010e08 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   10e08:	defff204 	addi	sp,sp,-56
   10e0c:	dfc00d15 	stw	ra,52(sp)
   10e10:	df000c15 	stw	fp,48(sp)
   10e14:	df000c04 	addi	fp,sp,48
   10e18:	e17ffc15 	stw	r5,-16(fp)
   10e1c:	e1bffd15 	stw	r6,-12(fp)
   10e20:	3807883a 	mov	r3,r7
   10e24:	e0800417 	ldw	r2,16(fp)
   10e28:	e13ffb05 	stb	r4,-20(fp)
   10e2c:	e0fffe0d 	sth	r3,-8(fp)
   10e30:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   10e34:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e38:	0005303a 	rdctl	r2,status
   10e3c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e40:	e0fff617 	ldw	r3,-40(fp)
   10e44:	00bfff84 	movi	r2,-2
   10e48:	1884703a 	and	r2,r3,r2
   10e4c:	1001703a 	wrctl	status,r2
  
  return context;
   10e50:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   10e54:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   10e58:	d0a83317 	ldw	r2,-24372(gp)
   10e5c:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   10e60:	e0bff517 	ldw	r2,-44(fp)
   10e64:	10009326 	beq	r2,zero,110b4 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   10e68:	e0bff517 	ldw	r2,-44(fp)
   10e6c:	10800517 	ldw	r2,20(r2)
   10e70:	d0a83315 	stw	r2,-24372(gp)
   10e74:	e0bff417 	ldw	r2,-48(fp)
   10e78:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e7c:	e0bff717 	ldw	r2,-36(fp)
   10e80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   10e84:	e0bff517 	ldw	r2,-44(fp)
   10e88:	e0fffc17 	ldw	r3,-16(fp)
   10e8c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   10e90:	e0bff517 	ldw	r2,-44(fp)
   10e94:	e0fffb03 	ldbu	r3,-20(fp)
   10e98:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   10e9c:	e0bff517 	ldw	r2,-44(fp)
   10ea0:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   10ea4:	e0bff517 	ldw	r2,-44(fp)
   10ea8:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   10eac:	e0bff517 	ldw	r2,-44(fp)
   10eb0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   10eb4:	e0bff517 	ldw	r2,-44(fp)
   10eb8:	e0c00317 	ldw	r3,12(fp)
   10ebc:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   10ec0:	e0bff517 	ldw	r2,-44(fp)
   10ec4:	e0c00217 	ldw	r3,8(fp)
   10ec8:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   10ecc:	e0bff517 	ldw	r2,-44(fp)
   10ed0:	e0fffd17 	ldw	r3,-12(fp)
   10ed4:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   10ed8:	e0bff517 	ldw	r2,-44(fp)
   10edc:	e0ffff0b 	ldhu	r3,-4(fp)
   10ee0:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   10ee4:	e0bff517 	ldw	r2,-44(fp)
   10ee8:	e0fffe0b 	ldhu	r3,-8(fp)
   10eec:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   10ef0:	e0bff517 	ldw	r2,-44(fp)
   10ef4:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   10ef8:	e0bffb03 	ldbu	r2,-20(fp)
   10efc:	1004d0fa 	srli	r2,r2,3
   10f00:	1007883a 	mov	r3,r2
   10f04:	e0bff517 	ldw	r2,-44(fp)
   10f08:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   10f0c:	e0bffb03 	ldbu	r2,-20(fp)
   10f10:	108001cc 	andi	r2,r2,7
   10f14:	1007883a 	mov	r3,r2
   10f18:	e0bff517 	ldw	r2,-44(fp)
   10f1c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   10f20:	e0bff517 	ldw	r2,-44(fp)
   10f24:	10800d03 	ldbu	r2,52(r2)
   10f28:	10803fcc 	andi	r2,r2,255
   10f2c:	00c00044 	movi	r3,1
   10f30:	1884983a 	sll	r2,r3,r2
   10f34:	1007883a 	mov	r3,r2
   10f38:	e0bff517 	ldw	r2,-44(fp)
   10f3c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   10f40:	e0bff517 	ldw	r2,-44(fp)
   10f44:	10800cc3 	ldbu	r2,51(r2)
   10f48:	10803fcc 	andi	r2,r2,255
   10f4c:	00c00044 	movi	r3,1
   10f50:	1884983a 	sll	r2,r3,r2
   10f54:	1007883a 	mov	r3,r2
   10f58:	e0bff517 	ldw	r2,-44(fp)
   10f5c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   10f60:	e0bff517 	ldw	r2,-44(fp)
   10f64:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   10f68:	e0bff517 	ldw	r2,-44(fp)
   10f6c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   10f70:	e0bff517 	ldw	r2,-44(fp)
   10f74:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   10f78:	e0bff517 	ldw	r2,-44(fp)
   10f7c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   10f80:	e0bff517 	ldw	r2,-44(fp)
   10f84:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   10f88:	e0bff517 	ldw	r2,-44(fp)
   10f8c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   10f90:	e0bff517 	ldw	r2,-44(fp)
   10f94:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   10f98:	e0bff517 	ldw	r2,-44(fp)
   10f9c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   10fa0:	e0bff517 	ldw	r2,-44(fp)
   10fa4:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   10fa8:	e0bff517 	ldw	r2,-44(fp)
   10fac:	00c00fc4 	movi	r3,63
   10fb0:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   10fb4:	e0bff517 	ldw	r2,-44(fp)
   10fb8:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   10fbc:	e13ff517 	ldw	r4,-44(fp)
   10fc0:	001af200 	call	1af20 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   10fc4:	e13ff517 	ldw	r4,-44(fp)
   10fc8:	001ae380 	call	1ae38 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10fcc:	0005303a 	rdctl	r2,status
   10fd0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10fd4:	e0fff817 	ldw	r3,-32(fp)
   10fd8:	00bfff84 	movi	r2,-2
   10fdc:	1884703a 	and	r2,r3,r2
   10fe0:	1001703a 	wrctl	status,r2
  
  return context;
   10fe4:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   10fe8:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   10fec:	e0fffb03 	ldbu	r3,-20(fp)
   10ff0:	008000f4 	movhi	r2,3
   10ff4:	10b5b804 	addi	r2,r2,-10528
   10ff8:	18c7883a 	add	r3,r3,r3
   10ffc:	18c7883a 	add	r3,r3,r3
   11000:	10c5883a 	add	r2,r2,r3
   11004:	e0fff517 	ldw	r3,-44(fp)
   11008:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   1100c:	d0e82f17 	ldw	r3,-24388(gp)
   11010:	e0bff517 	ldw	r2,-44(fp)
   11014:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   11018:	e0bff517 	ldw	r2,-44(fp)
   1101c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   11020:	d0a82f17 	ldw	r2,-24388(gp)
   11024:	10000326 	beq	r2,zero,11034 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   11028:	d0a82f17 	ldw	r2,-24388(gp)
   1102c:	e0fff517 	ldw	r3,-44(fp)
   11030:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   11034:	e0bff517 	ldw	r2,-44(fp)
   11038:	d0a82f15 	stw	r2,-24388(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   1103c:	e0bff517 	ldw	r2,-44(fp)
   11040:	10c00d83 	ldbu	r3,54(r2)
   11044:	d0a83803 	ldbu	r2,-24352(gp)
   11048:	1884b03a 	or	r2,r3,r2
   1104c:	d0a83805 	stb	r2,-24352(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   11050:	e0bff517 	ldw	r2,-44(fp)
   11054:	10800d03 	ldbu	r2,52(r2)
   11058:	10c03fcc 	andi	r3,r2,255
   1105c:	e0bff517 	ldw	r2,-44(fp)
   11060:	10800d03 	ldbu	r2,52(r2)
   11064:	11003fcc 	andi	r4,r2,255
   11068:	d0a83844 	addi	r2,gp,-24351
   1106c:	2085883a 	add	r2,r4,r2
   11070:	11000003 	ldbu	r4,0(r2)
   11074:	e0bff517 	ldw	r2,-44(fp)
   11078:	10800d43 	ldbu	r2,53(r2)
   1107c:	2084b03a 	or	r2,r4,r2
   11080:	1009883a 	mov	r4,r2
   11084:	d0a83844 	addi	r2,gp,-24351
   11088:	1885883a 	add	r2,r3,r2
   1108c:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   11090:	d0a83443 	ldbu	r2,-24367(gp)
   11094:	10800044 	addi	r2,r2,1
   11098:	d0a83445 	stb	r2,-24367(gp)
   1109c:	e0bff417 	ldw	r2,-48(fp)
   110a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   110a4:	e0bff917 	ldw	r2,-28(fp)
   110a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   110ac:	0005883a 	mov	r2,zero
   110b0:	00000506 	br	110c8 <OS_TCBInit+0x2c0>
   110b4:	e0bff417 	ldw	r2,-48(fp)
   110b8:	e0bffa15 	stw	r2,-24(fp)
   110bc:	e0bffa17 	ldw	r2,-24(fp)
   110c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   110c4:	00801084 	movi	r2,66
}
   110c8:	e037883a 	mov	sp,fp
   110cc:	dfc00117 	ldw	ra,4(sp)
   110d0:	df000017 	ldw	fp,0(sp)
   110d4:	dec00204 	addi	sp,sp,8
   110d8:	f800283a 	ret

000110dc <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   110dc:	defffe04 	addi	sp,sp,-8
   110e0:	df000115 	stw	fp,4(sp)
   110e4:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   110e8:	d0a01b04 	addi	r2,gp,-32660
   110ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   110f0:	d0a01c04 	addi	r2,gp,-32656
   110f4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   110f8:	d0a01d84 	addi	r2,gp,-32650
   110fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   11100:	d0a01e04 	addi	r2,gp,-32648
   11104:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   11108:	d0a01d04 	addi	r2,gp,-32652
   1110c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   11110:	d0a01e84 	addi	r2,gp,-32646
   11114:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   11118:	d0a01f04 	addi	r2,gp,-32644
   1111c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   11120:	d0a01f84 	addi	r2,gp,-32642
   11124:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   11128:	d0a02004 	addi	r2,gp,-32640
   1112c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   11130:	d0a02084 	addi	r2,gp,-32638
   11134:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   11138:	d0a02104 	addi	r2,gp,-32636
   1113c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   11140:	d0a02184 	addi	r2,gp,-32634
   11144:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   11148:	d0a02204 	addi	r2,gp,-32632
   1114c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   11150:	d0a02284 	addi	r2,gp,-32630
   11154:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   11158:	d0a02304 	addi	r2,gp,-32628
   1115c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   11160:	d0a02384 	addi	r2,gp,-32626
   11164:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   11168:	d0a02404 	addi	r2,gp,-32624
   1116c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   11170:	d0a02484 	addi	r2,gp,-32622
   11174:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   11178:	d0a02504 	addi	r2,gp,-32620
   1117c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   11180:	d0a02584 	addi	r2,gp,-32618
   11184:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   11188:	d0a02604 	addi	r2,gp,-32616
   1118c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   11190:	d0a02684 	addi	r2,gp,-32614
   11194:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   11198:	d0a02704 	addi	r2,gp,-32612
   1119c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   111a0:	d0a02784 	addi	r2,gp,-32610
   111a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   111a8:	d0a02804 	addi	r2,gp,-32608
   111ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   111b0:	d0a02884 	addi	r2,gp,-32606
   111b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   111b8:	d0a02904 	addi	r2,gp,-32604
   111bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   111c0:	d0a02984 	addi	r2,gp,-32602
   111c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   111c8:	d0a02a04 	addi	r2,gp,-32600
   111cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   111d0:	d0a02a84 	addi	r2,gp,-32598
   111d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   111d8:	d0a02b04 	addi	r2,gp,-32596
   111dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   111e0:	d0a02b84 	addi	r2,gp,-32594
   111e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   111e8:	d0a02c04 	addi	r2,gp,-32592
   111ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   111f0:	d0a02c84 	addi	r2,gp,-32590
   111f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   111f8:	d0a02d04 	addi	r2,gp,-32588
   111fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   11200:	d0a02d84 	addi	r2,gp,-32586
   11204:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   11208:	d0a02e04 	addi	r2,gp,-32584
   1120c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   11210:	d0a02e84 	addi	r2,gp,-32582
   11214:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   11218:	d0a02f04 	addi	r2,gp,-32580
   1121c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   11220:	d0a02f84 	addi	r2,gp,-32578
   11224:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   11228:	d0a03004 	addi	r2,gp,-32576
   1122c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   11230:	d0a03084 	addi	r2,gp,-32574
   11234:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   11238:	d0a03104 	addi	r2,gp,-32572
   1123c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   11240:	d0a03184 	addi	r2,gp,-32570
   11244:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   11248:	d0a03204 	addi	r2,gp,-32568
   1124c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   11250:	d0a03704 	addi	r2,gp,-32548
   11254:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   11258:	e037883a 	mov	sp,fp
   1125c:	df000017 	ldw	fp,0(sp)
   11260:	dec00104 	addi	sp,sp,4
   11264:	f800283a 	ret

00011268 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   11268:	defff204 	addi	sp,sp,-56
   1126c:	df000d15 	stw	fp,52(sp)
   11270:	df000d04 	addi	fp,sp,52
   11274:	e13ffc15 	stw	r4,-16(fp)
   11278:	2807883a 	mov	r3,r5
   1127c:	3005883a 	mov	r2,r6
   11280:	e1ffff15 	stw	r7,-4(fp)
   11284:	e0fffd0d 	sth	r3,-12(fp)
   11288:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1128c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   11290:	e0bfff17 	ldw	r2,-4(fp)
   11294:	1000021e 	bne	r2,zero,112a0 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   11298:	0005883a 	mov	r2,zero
   1129c:	0000b006 	br	11560 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   112a0:	e0bffc17 	ldw	r2,-16(fp)
   112a4:	1000051e 	bne	r2,zero,112bc <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   112a8:	e0bfff17 	ldw	r2,-4(fp)
   112ac:	00c01b84 	movi	r3,110
   112b0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   112b4:	0005883a 	mov	r2,zero
   112b8:	0000a906 	br	11560 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   112bc:	e0bffc17 	ldw	r2,-16(fp)
   112c0:	10800003 	ldbu	r2,0(r2)
   112c4:	10803fcc 	andi	r2,r2,255
   112c8:	10800160 	cmpeqi	r2,r2,5
   112cc:	1000051e 	bne	r2,zero,112e4 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   112d0:	e0bfff17 	ldw	r2,-4(fp)
   112d4:	00c00044 	movi	r3,1
   112d8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   112dc:	0005883a 	mov	r2,zero
   112e0:	00009f06 	br	11560 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   112e4:	e0fffe03 	ldbu	r3,-8(fp)
   112e8:	00bfe004 	movi	r2,-128
   112ec:	1884703a 	and	r2,r3,r2
   112f0:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   112f4:	e0bff503 	ldbu	r2,-44(fp)
   112f8:	10000626 	beq	r2,zero,11314 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   112fc:	e0bffe03 	ldbu	r2,-8(fp)
   11300:	10801fcc 	andi	r2,r2,127
   11304:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   11308:	00800044 	movi	r2,1
   1130c:	e0bff385 	stb	r2,-50(fp)
   11310:	00000106 	br	11318 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   11314:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   11318:	e0bfff17 	ldw	r2,-4(fp)
   1131c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11320:	0005303a 	rdctl	r2,status
   11324:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11328:	e0fff617 	ldw	r3,-40(fp)
   1132c:	00bfff84 	movi	r2,-2
   11330:	1884703a 	and	r2,r3,r2
   11334:	1001703a 	wrctl	status,r2
  
  return context;
   11338:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   1133c:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   11340:	e0bffe03 	ldbu	r2,-8(fp)
   11344:	10c00060 	cmpeqi	r3,r2,1
   11348:	18005f1e 	bne	r3,zero,114c8 <OSFlagAccept+0x260>
   1134c:	10c00088 	cmpgei	r3,r2,2
   11350:	1800021e 	bne	r3,zero,1135c <OSFlagAccept+0xf4>
   11354:	10003f26 	beq	r2,zero,11454 <OSFlagAccept+0x1ec>
   11358:	00007706 	br	11538 <OSFlagAccept+0x2d0>
   1135c:	10c000a0 	cmpeqi	r3,r2,2
   11360:	1800031e 	bne	r3,zero,11370 <OSFlagAccept+0x108>
   11364:	108000e0 	cmpeqi	r2,r2,3
   11368:	10001e1e 	bne	r2,zero,113e4 <OSFlagAccept+0x17c>
   1136c:	00007206 	br	11538 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   11370:	e0bffc17 	ldw	r2,-16(fp)
   11374:	10c0020b 	ldhu	r3,8(r2)
   11378:	e0bffd0b 	ldhu	r2,-12(fp)
   1137c:	1884703a 	and	r2,r3,r2
   11380:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   11384:	e0fff30b 	ldhu	r3,-52(fp)
   11388:	e0bffd0b 	ldhu	r2,-12(fp)
   1138c:	18800d1e 	bne	r3,r2,113c4 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11390:	e0bff383 	ldbu	r2,-50(fp)
   11394:	10800058 	cmpnei	r2,r2,1
   11398:	10000d1e 	bne	r2,zero,113d0 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   1139c:	e0bffc17 	ldw	r2,-16(fp)
   113a0:	1080020b 	ldhu	r2,8(r2)
   113a4:	1007883a 	mov	r3,r2
   113a8:	e0bff30b 	ldhu	r2,-52(fp)
   113ac:	0084303a 	nor	r2,zero,r2
   113b0:	1884703a 	and	r2,r3,r2
   113b4:	1007883a 	mov	r3,r2
   113b8:	e0bffc17 	ldw	r2,-16(fp)
   113bc:	10c0020d 	sth	r3,8(r2)
   113c0:	00000306 	br	113d0 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   113c4:	e0bfff17 	ldw	r2,-4(fp)
   113c8:	00c01c04 	movi	r3,112
   113cc:	10c00005 	stb	r3,0(r2)
   113d0:	e0bff417 	ldw	r2,-48(fp)
   113d4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   113d8:	e0bff717 	ldw	r2,-36(fp)
   113dc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   113e0:	00005e06 	br	1155c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   113e4:	e0bffc17 	ldw	r2,-16(fp)
   113e8:	10c0020b 	ldhu	r3,8(r2)
   113ec:	e0bffd0b 	ldhu	r2,-12(fp)
   113f0:	1884703a 	and	r2,r3,r2
   113f4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   113f8:	e0bff30b 	ldhu	r2,-52(fp)
   113fc:	10000d26 	beq	r2,zero,11434 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11400:	e0bff383 	ldbu	r2,-50(fp)
   11404:	10800058 	cmpnei	r2,r2,1
   11408:	10000d1e 	bne	r2,zero,11440 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   1140c:	e0bffc17 	ldw	r2,-16(fp)
   11410:	1080020b 	ldhu	r2,8(r2)
   11414:	1007883a 	mov	r3,r2
   11418:	e0bff30b 	ldhu	r2,-52(fp)
   1141c:	0084303a 	nor	r2,zero,r2
   11420:	1884703a 	and	r2,r3,r2
   11424:	1007883a 	mov	r3,r2
   11428:	e0bffc17 	ldw	r2,-16(fp)
   1142c:	10c0020d 	sth	r3,8(r2)
   11430:	00000306 	br	11440 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   11434:	e0bfff17 	ldw	r2,-4(fp)
   11438:	00c01c04 	movi	r3,112
   1143c:	10c00005 	stb	r3,0(r2)
   11440:	e0bff417 	ldw	r2,-48(fp)
   11444:	e0bff815 	stw	r2,-32(fp)
   11448:	e0bff817 	ldw	r2,-32(fp)
   1144c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   11450:	00004206 	br	1155c <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   11454:	e0bffc17 	ldw	r2,-16(fp)
   11458:	1080020b 	ldhu	r2,8(r2)
   1145c:	0084303a 	nor	r2,zero,r2
   11460:	1007883a 	mov	r3,r2
   11464:	e0bffd0b 	ldhu	r2,-12(fp)
   11468:	1884703a 	and	r2,r3,r2
   1146c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   11470:	e0fff30b 	ldhu	r3,-52(fp)
   11474:	e0bffd0b 	ldhu	r2,-12(fp)
   11478:	18800b1e 	bne	r3,r2,114a8 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1147c:	e0bff383 	ldbu	r2,-50(fp)
   11480:	10800058 	cmpnei	r2,r2,1
   11484:	10000b1e 	bne	r2,zero,114b4 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   11488:	e0bffc17 	ldw	r2,-16(fp)
   1148c:	10c0020b 	ldhu	r3,8(r2)
   11490:	e0bff30b 	ldhu	r2,-52(fp)
   11494:	1884b03a 	or	r2,r3,r2
   11498:	1007883a 	mov	r3,r2
   1149c:	e0bffc17 	ldw	r2,-16(fp)
   114a0:	10c0020d 	sth	r3,8(r2)
   114a4:	00000306 	br	114b4 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   114a8:	e0bfff17 	ldw	r2,-4(fp)
   114ac:	00c01c04 	movi	r3,112
   114b0:	10c00005 	stb	r3,0(r2)
   114b4:	e0bff417 	ldw	r2,-48(fp)
   114b8:	e0bff915 	stw	r2,-28(fp)
   114bc:	e0bff917 	ldw	r2,-28(fp)
   114c0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   114c4:	00002506 	br	1155c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   114c8:	e0bffc17 	ldw	r2,-16(fp)
   114cc:	1080020b 	ldhu	r2,8(r2)
   114d0:	0084303a 	nor	r2,zero,r2
   114d4:	1007883a 	mov	r3,r2
   114d8:	e0bffd0b 	ldhu	r2,-12(fp)
   114dc:	1884703a 	and	r2,r3,r2
   114e0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   114e4:	e0bff30b 	ldhu	r2,-52(fp)
   114e8:	10000b26 	beq	r2,zero,11518 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   114ec:	e0bff383 	ldbu	r2,-50(fp)
   114f0:	10800058 	cmpnei	r2,r2,1
   114f4:	10000b1e 	bne	r2,zero,11524 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   114f8:	e0bffc17 	ldw	r2,-16(fp)
   114fc:	10c0020b 	ldhu	r3,8(r2)
   11500:	e0bff30b 	ldhu	r2,-52(fp)
   11504:	1884b03a 	or	r2,r3,r2
   11508:	1007883a 	mov	r3,r2
   1150c:	e0bffc17 	ldw	r2,-16(fp)
   11510:	10c0020d 	sth	r3,8(r2)
   11514:	00000306 	br	11524 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   11518:	e0bfff17 	ldw	r2,-4(fp)
   1151c:	00c01c04 	movi	r3,112
   11520:	10c00005 	stb	r3,0(r2)
   11524:	e0bff417 	ldw	r2,-48(fp)
   11528:	e0bffa15 	stw	r2,-24(fp)
   1152c:	e0bffa17 	ldw	r2,-24(fp)
   11530:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   11534:	00000906 	br	1155c <OSFlagAccept+0x2f4>
   11538:	e0bff417 	ldw	r2,-48(fp)
   1153c:	e0bffb15 	stw	r2,-20(fp)
   11540:	e0bffb17 	ldw	r2,-20(fp)
   11544:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   11548:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   1154c:	e0bfff17 	ldw	r2,-4(fp)
   11550:	00c01bc4 	movi	r3,111
   11554:	10c00005 	stb	r3,0(r2)
             break;
   11558:	0001883a 	nop
    }
    return (flags_rdy);
   1155c:	e0bff30b 	ldhu	r2,-52(fp)
}
   11560:	e037883a 	mov	sp,fp
   11564:	df000017 	ldw	fp,0(sp)
   11568:	dec00104 	addi	sp,sp,4
   1156c:	f800283a 	ret

00011570 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   11570:	defff804 	addi	sp,sp,-32
   11574:	df000715 	stw	fp,28(sp)
   11578:	df000704 	addi	fp,sp,28
   1157c:	2005883a 	mov	r2,r4
   11580:	e17fff15 	stw	r5,-4(fp)
   11584:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   11588:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   1158c:	e0bfff17 	ldw	r2,-4(fp)
   11590:	1000021e 	bne	r2,zero,1159c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   11594:	0005883a 	mov	r2,zero
   11598:	00003b06 	br	11688 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   1159c:	008000b4 	movhi	r2,2
   115a0:	10bf3c04 	addi	r2,r2,-784
   115a4:	10800003 	ldbu	r2,0(r2)
   115a8:	10803fcc 	andi	r2,r2,255
   115ac:	10000526 	beq	r2,zero,115c4 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   115b0:	e0bfff17 	ldw	r2,-4(fp)
   115b4:	00c00404 	movi	r3,16
   115b8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   115bc:	0005883a 	mov	r2,zero
   115c0:	00003106 	br	11688 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   115c4:	0005303a 	rdctl	r2,status
   115c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115cc:	e0fffb17 	ldw	r3,-20(fp)
   115d0:	00bfff84 	movi	r2,-2
   115d4:	1884703a 	and	r2,r3,r2
   115d8:	1001703a 	wrctl	status,r2
  
  return context;
   115dc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   115e0:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   115e4:	008000b4 	movhi	r2,2
   115e8:	10bf3f04 	addi	r2,r2,-772
   115ec:	10800017 	ldw	r2,0(r2)
   115f0:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   115f4:	e0bffa17 	ldw	r2,-24(fp)
   115f8:	10001b26 	beq	r2,zero,11668 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   115fc:	008000b4 	movhi	r2,2
   11600:	10bf3f04 	addi	r2,r2,-772
   11604:	10800017 	ldw	r2,0(r2)
   11608:	10c00117 	ldw	r3,4(r2)
   1160c:	008000b4 	movhi	r2,2
   11610:	10bf3f04 	addi	r2,r2,-772
   11614:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   11618:	e0bffa17 	ldw	r2,-24(fp)
   1161c:	00c00144 	movi	r3,5
   11620:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   11624:	e0bffa17 	ldw	r2,-24(fp)
   11628:	e0fffe0b 	ldhu	r3,-8(fp)
   1162c:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   11630:	e0bffa17 	ldw	r2,-24(fp)
   11634:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   11638:	e0bffa17 	ldw	r2,-24(fp)
   1163c:	00c00fc4 	movi	r3,63
   11640:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   11644:	e0bffa17 	ldw	r2,-24(fp)
   11648:	100002c5 	stb	zero,11(r2)
   1164c:	e0bff917 	ldw	r2,-28(fp)
   11650:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11654:	e0bffc17 	ldw	r2,-16(fp)
   11658:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   1165c:	e0bfff17 	ldw	r2,-4(fp)
   11660:	10000005 	stb	zero,0(r2)
   11664:	00000706 	br	11684 <OSFlagCreate+0x114>
   11668:	e0bff917 	ldw	r2,-28(fp)
   1166c:	e0bffd15 	stw	r2,-12(fp)
   11670:	e0bffd17 	ldw	r2,-12(fp)
   11674:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   11678:	e0bfff17 	ldw	r2,-4(fp)
   1167c:	00c01c84 	movi	r3,114
   11680:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   11684:	e0bffa17 	ldw	r2,-24(fp)
}
   11688:	e037883a 	mov	sp,fp
   1168c:	df000017 	ldw	fp,0(sp)
   11690:	dec00104 	addi	sp,sp,4
   11694:	f800283a 	ret

00011698 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   11698:	defff204 	addi	sp,sp,-56
   1169c:	dfc00d15 	stw	ra,52(sp)
   116a0:	df000c15 	stw	fp,48(sp)
   116a4:	df000c04 	addi	fp,sp,48
   116a8:	e13ffd15 	stw	r4,-12(fp)
   116ac:	2805883a 	mov	r2,r5
   116b0:	e1bfff15 	stw	r6,-4(fp)
   116b4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   116b8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   116bc:	e0bfff17 	ldw	r2,-4(fp)
   116c0:	1000021e 	bne	r2,zero,116cc <OSFlagDel+0x34>
        return (pgrp);
   116c4:	e0bffd17 	ldw	r2,-12(fp)
   116c8:	00008a06 	br	118f4 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   116cc:	e0bffd17 	ldw	r2,-12(fp)
   116d0:	1000051e 	bne	r2,zero,116e8 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   116d4:	e0bfff17 	ldw	r2,-4(fp)
   116d8:	00c01b84 	movi	r3,110
   116dc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   116e0:	e0bffd17 	ldw	r2,-12(fp)
   116e4:	00008306 	br	118f4 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   116e8:	008000b4 	movhi	r2,2
   116ec:	10bf3c04 	addi	r2,r2,-784
   116f0:	10800003 	ldbu	r2,0(r2)
   116f4:	10803fcc 	andi	r2,r2,255
   116f8:	10000526 	beq	r2,zero,11710 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   116fc:	e0bfff17 	ldw	r2,-4(fp)
   11700:	00c003c4 	movi	r3,15
   11704:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   11708:	e0bffd17 	ldw	r2,-12(fp)
   1170c:	00007906 	br	118f4 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   11710:	e0bffd17 	ldw	r2,-12(fp)
   11714:	10800003 	ldbu	r2,0(r2)
   11718:	10803fcc 	andi	r2,r2,255
   1171c:	10800160 	cmpeqi	r2,r2,5
   11720:	1000051e 	bne	r2,zero,11738 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   11724:	e0bfff17 	ldw	r2,-4(fp)
   11728:	00c00044 	movi	r3,1
   1172c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   11730:	e0bffd17 	ldw	r2,-12(fp)
   11734:	00006f06 	br	118f4 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11738:	0005303a 	rdctl	r2,status
   1173c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11740:	e0fff817 	ldw	r3,-32(fp)
   11744:	00bfff84 	movi	r2,-2
   11748:	1884703a 	and	r2,r3,r2
   1174c:	1001703a 	wrctl	status,r2
  
  return context;
   11750:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   11754:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   11758:	e0bffd17 	ldw	r2,-12(fp)
   1175c:	10800117 	ldw	r2,4(r2)
   11760:	10000326 	beq	r2,zero,11770 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   11764:	00800044 	movi	r2,1
   11768:	e0bff405 	stb	r2,-48(fp)
   1176c:	00000106 	br	11774 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   11770:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   11774:	e0bffe03 	ldbu	r2,-8(fp)
   11778:	10000326 	beq	r2,zero,11788 <OSFlagDel+0xf0>
   1177c:	10800060 	cmpeqi	r2,r2,1
   11780:	1000271e 	bne	r2,zero,11820 <OSFlagDel+0x188>
   11784:	00005006 	br	118c8 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   11788:	e0bff403 	ldbu	r2,-48(fp)
   1178c:	10001a1e 	bne	r2,zero,117f8 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   11790:	e0bffd17 	ldw	r2,-12(fp)
   11794:	00c00fc4 	movi	r3,63
   11798:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1179c:	e0bffd17 	ldw	r2,-12(fp)
   117a0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   117a4:	e0bffd17 	ldw	r2,-12(fp)
   117a8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   117ac:	008000b4 	movhi	r2,2
   117b0:	10bf3f04 	addi	r2,r2,-772
   117b4:	10c00017 	ldw	r3,0(r2)
   117b8:	e0bffd17 	ldw	r2,-12(fp)
   117bc:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   117c0:	e0bffd17 	ldw	r2,-12(fp)
   117c4:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   117c8:	008000b4 	movhi	r2,2
   117cc:	10bf3f04 	addi	r2,r2,-772
   117d0:	e0fffd17 	ldw	r3,-12(fp)
   117d4:	10c00015 	stw	r3,0(r2)
   117d8:	e0bff717 	ldw	r2,-36(fp)
   117dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   117e0:	e0bff917 	ldw	r2,-28(fp)
   117e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   117e8:	e0bfff17 	ldw	r2,-4(fp)
   117ec:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   117f0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   117f4:	00003e06 	br	118f0 <OSFlagDel+0x258>
   117f8:	e0bff717 	ldw	r2,-36(fp)
   117fc:	e0bffa15 	stw	r2,-24(fp)
   11800:	e0bffa17 	ldw	r2,-24(fp)
   11804:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   11808:	e0bfff17 	ldw	r2,-4(fp)
   1180c:	00c01244 	movi	r3,73
   11810:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   11814:	e0bffd17 	ldw	r2,-12(fp)
   11818:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   1181c:	00003406 	br	118f0 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   11820:	e0bffd17 	ldw	r2,-12(fp)
   11824:	10800117 	ldw	r2,4(r2)
   11828:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1182c:	00000606 	br	11848 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   11830:	e13ff517 	ldw	r4,-44(fp)
   11834:	000b883a 	mov	r5,zero
   11838:	00128d40 	call	128d4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   1183c:	e0bff517 	ldw	r2,-44(fp)
   11840:	10800017 	ldw	r2,0(r2)
   11844:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   11848:	e0bff517 	ldw	r2,-44(fp)
   1184c:	103ff81e 	bne	r2,zero,11830 <__alt_mem_Flash_flash_data+0xf4011830>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   11850:	e0bffd17 	ldw	r2,-12(fp)
   11854:	00c00fc4 	movi	r3,63
   11858:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1185c:	e0bffd17 	ldw	r2,-12(fp)
   11860:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   11864:	e0bffd17 	ldw	r2,-12(fp)
   11868:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   1186c:	008000b4 	movhi	r2,2
   11870:	10bf3f04 	addi	r2,r2,-772
   11874:	10c00017 	ldw	r3,0(r2)
   11878:	e0bffd17 	ldw	r2,-12(fp)
   1187c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   11880:	e0bffd17 	ldw	r2,-12(fp)
   11884:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   11888:	008000b4 	movhi	r2,2
   1188c:	10bf3f04 	addi	r2,r2,-772
   11890:	e0fffd17 	ldw	r3,-12(fp)
   11894:	10c00015 	stw	r3,0(r2)
   11898:	e0bff717 	ldw	r2,-36(fp)
   1189c:	e0bffb15 	stw	r2,-20(fp)
   118a0:	e0bffb17 	ldw	r2,-20(fp)
   118a4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   118a8:	e0bff403 	ldbu	r2,-48(fp)
   118ac:	10800058 	cmpnei	r2,r2,1
   118b0:	1000011e 	bne	r2,zero,118b8 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   118b4:	0010a040 	call	10a04 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   118b8:	e0bfff17 	ldw	r2,-4(fp)
   118bc:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   118c0:	e03ff615 	stw	zero,-40(fp)
             break;
   118c4:	00000a06 	br	118f0 <OSFlagDel+0x258>
   118c8:	e0bff717 	ldw	r2,-36(fp)
   118cc:	e0bffc15 	stw	r2,-16(fp)
   118d0:	e0bffc17 	ldw	r2,-16(fp)
   118d4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   118d8:	e0bfff17 	ldw	r2,-4(fp)
   118dc:	00c001c4 	movi	r3,7
   118e0:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   118e4:	e0bffd17 	ldw	r2,-12(fp)
   118e8:	e0bff615 	stw	r2,-40(fp)
             break;
   118ec:	0001883a 	nop
    }
    return (pgrp_return);
   118f0:	e0bff617 	ldw	r2,-40(fp)
}
   118f4:	e037883a 	mov	sp,fp
   118f8:	dfc00117 	ldw	ra,4(sp)
   118fc:	df000017 	ldw	fp,0(sp)
   11900:	dec00204 	addi	sp,sp,8
   11904:	f800283a 	ret

00011908 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   11908:	defff604 	addi	sp,sp,-40
   1190c:	dfc00915 	stw	ra,36(sp)
   11910:	df000815 	stw	fp,32(sp)
   11914:	df000804 	addi	fp,sp,32
   11918:	e13ffd15 	stw	r4,-12(fp)
   1191c:	e17ffe15 	stw	r5,-8(fp)
   11920:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11924:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11928:	e0bfff17 	ldw	r2,-4(fp)
   1192c:	1000021e 	bne	r2,zero,11938 <OSFlagNameGet+0x30>
        return (0);
   11930:	0005883a 	mov	r2,zero
   11934:	00003b06 	br	11a24 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   11938:	e0bffd17 	ldw	r2,-12(fp)
   1193c:	1000051e 	bne	r2,zero,11954 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11940:	e0bfff17 	ldw	r2,-4(fp)
   11944:	00c01b84 	movi	r3,110
   11948:	10c00005 	stb	r3,0(r2)
        return (0);
   1194c:	0005883a 	mov	r2,zero
   11950:	00003406 	br	11a24 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11954:	e0bffe17 	ldw	r2,-8(fp)
   11958:	1000051e 	bne	r2,zero,11970 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1195c:	e0bfff17 	ldw	r2,-4(fp)
   11960:	00c00304 	movi	r3,12
   11964:	10c00005 	stb	r3,0(r2)
        return (0);
   11968:	0005883a 	mov	r2,zero
   1196c:	00002d06 	br	11a24 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11970:	008000b4 	movhi	r2,2
   11974:	10bf3c04 	addi	r2,r2,-784
   11978:	10800003 	ldbu	r2,0(r2)
   1197c:	10803fcc 	andi	r2,r2,255
   11980:	10000526 	beq	r2,zero,11998 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   11984:	e0bfff17 	ldw	r2,-4(fp)
   11988:	00c00444 	movi	r3,17
   1198c:	10c00005 	stb	r3,0(r2)
        return (0);
   11990:	0005883a 	mov	r2,zero
   11994:	00002306 	br	11a24 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11998:	0005303a 	rdctl	r2,status
   1199c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   119a0:	e0fffa17 	ldw	r3,-24(fp)
   119a4:	00bfff84 	movi	r2,-2
   119a8:	1884703a 	and	r2,r3,r2
   119ac:	1001703a 	wrctl	status,r2
  
  return context;
   119b0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   119b4:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   119b8:	e0bffd17 	ldw	r2,-12(fp)
   119bc:	10800003 	ldbu	r2,0(r2)
   119c0:	10803fcc 	andi	r2,r2,255
   119c4:	10800160 	cmpeqi	r2,r2,5
   119c8:	1000091e 	bne	r2,zero,119f0 <OSFlagNameGet+0xe8>
   119cc:	e0bff817 	ldw	r2,-32(fp)
   119d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   119d4:	e0bffb17 	ldw	r2,-20(fp)
   119d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   119dc:	e0bfff17 	ldw	r2,-4(fp)
   119e0:	00c00044 	movi	r3,1
   119e4:	10c00005 	stb	r3,0(r2)
        return (0);
   119e8:	0005883a 	mov	r2,zero
   119ec:	00000d06 	br	11a24 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   119f0:	e0bffd17 	ldw	r2,-12(fp)
   119f4:	10800284 	addi	r2,r2,10
   119f8:	e13ffe17 	ldw	r4,-8(fp)
   119fc:	100b883a 	mov	r5,r2
   11a00:	0010b400 	call	10b40 <OS_StrCopy>
   11a04:	e0bff905 	stb	r2,-28(fp)
   11a08:	e0bff817 	ldw	r2,-32(fp)
   11a0c:	e0bffc15 	stw	r2,-16(fp)
   11a10:	e0bffc17 	ldw	r2,-16(fp)
   11a14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11a18:	e0bfff17 	ldw	r2,-4(fp)
   11a1c:	10000005 	stb	zero,0(r2)
    return (len);
   11a20:	e0bff903 	ldbu	r2,-28(fp)
}
   11a24:	e037883a 	mov	sp,fp
   11a28:	dfc00117 	ldw	ra,4(sp)
   11a2c:	df000017 	ldw	fp,0(sp)
   11a30:	dec00204 	addi	sp,sp,8
   11a34:	f800283a 	ret

00011a38 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   11a38:	defff504 	addi	sp,sp,-44
   11a3c:	dfc00a15 	stw	ra,40(sp)
   11a40:	df000915 	stw	fp,36(sp)
   11a44:	df000904 	addi	fp,sp,36
   11a48:	e13ffd15 	stw	r4,-12(fp)
   11a4c:	e17ffe15 	stw	r5,-8(fp)
   11a50:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11a54:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11a58:	e0bfff17 	ldw	r2,-4(fp)
   11a5c:	1000011e 	bne	r2,zero,11a64 <OSFlagNameSet+0x2c>
        return;
   11a60:	00004406 	br	11b74 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   11a64:	e0bffd17 	ldw	r2,-12(fp)
   11a68:	1000041e 	bne	r2,zero,11a7c <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11a6c:	e0bfff17 	ldw	r2,-4(fp)
   11a70:	00c01b84 	movi	r3,110
   11a74:	10c00005 	stb	r3,0(r2)
        return;
   11a78:	00003e06 	br	11b74 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11a7c:	e0bffe17 	ldw	r2,-8(fp)
   11a80:	1000041e 	bne	r2,zero,11a94 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   11a84:	e0bfff17 	ldw	r2,-4(fp)
   11a88:	00c00304 	movi	r3,12
   11a8c:	10c00005 	stb	r3,0(r2)
        return;
   11a90:	00003806 	br	11b74 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11a94:	008000b4 	movhi	r2,2
   11a98:	10bf3c04 	addi	r2,r2,-784
   11a9c:	10800003 	ldbu	r2,0(r2)
   11aa0:	10803fcc 	andi	r2,r2,255
   11aa4:	10000426 	beq	r2,zero,11ab8 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   11aa8:	e0bfff17 	ldw	r2,-4(fp)
   11aac:	00c00484 	movi	r3,18
   11ab0:	10c00005 	stb	r3,0(r2)
        return;
   11ab4:	00002f06 	br	11b74 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ab8:	0005303a 	rdctl	r2,status
   11abc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ac0:	e0fff917 	ldw	r3,-28(fp)
   11ac4:	00bfff84 	movi	r2,-2
   11ac8:	1884703a 	and	r2,r3,r2
   11acc:	1001703a 	wrctl	status,r2
  
  return context;
   11ad0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   11ad4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   11ad8:	e0bffd17 	ldw	r2,-12(fp)
   11adc:	10800003 	ldbu	r2,0(r2)
   11ae0:	10803fcc 	andi	r2,r2,255
   11ae4:	10800160 	cmpeqi	r2,r2,5
   11ae8:	1000081e 	bne	r2,zero,11b0c <OSFlagNameSet+0xd4>
   11aec:	e0bff717 	ldw	r2,-36(fp)
   11af0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11af4:	e0bffa17 	ldw	r2,-24(fp)
   11af8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   11afc:	e0bfff17 	ldw	r2,-4(fp)
   11b00:	00c00044 	movi	r3,1
   11b04:	10c00005 	stb	r3,0(r2)
        return;
   11b08:	00001a06 	br	11b74 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   11b0c:	e13ffe17 	ldw	r4,-8(fp)
   11b10:	0010bb40 	call	10bb4 <OS_StrLen>
   11b14:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   11b18:	e0bff803 	ldbu	r2,-32(fp)
   11b1c:	10800830 	cmpltui	r2,r2,32
   11b20:	1000081e 	bne	r2,zero,11b44 <OSFlagNameSet+0x10c>
   11b24:	e0bff717 	ldw	r2,-36(fp)
   11b28:	e0bffb15 	stw	r2,-20(fp)
   11b2c:	e0bffb17 	ldw	r2,-20(fp)
   11b30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   11b34:	e0bfff17 	ldw	r2,-4(fp)
   11b38:	00c01cc4 	movi	r3,115
   11b3c:	10c00005 	stb	r3,0(r2)
        return;
   11b40:	00000c06 	br	11b74 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   11b44:	e0bffd17 	ldw	r2,-12(fp)
   11b48:	10800284 	addi	r2,r2,10
   11b4c:	1009883a 	mov	r4,r2
   11b50:	e17ffe17 	ldw	r5,-8(fp)
   11b54:	0010b400 	call	10b40 <OS_StrCopy>
   11b58:	e0bff717 	ldw	r2,-36(fp)
   11b5c:	e0bffc15 	stw	r2,-16(fp)
   11b60:	e0bffc17 	ldw	r2,-16(fp)
   11b64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11b68:	e0bfff17 	ldw	r2,-4(fp)
   11b6c:	10000005 	stb	zero,0(r2)
    return;
   11b70:	0001883a 	nop
}
   11b74:	e037883a 	mov	sp,fp
   11b78:	dfc00117 	ldw	ra,4(sp)
   11b7c:	df000017 	ldw	fp,0(sp)
   11b80:	dec00204 	addi	sp,sp,8
   11b84:	f800283a 	ret

00011b88 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   11b88:	deffe204 	addi	sp,sp,-120
   11b8c:	dfc01d15 	stw	ra,116(sp)
   11b90:	df001c15 	stw	fp,112(sp)
   11b94:	df001c04 	addi	fp,sp,112
   11b98:	e13ffc15 	stw	r4,-16(fp)
   11b9c:	2809883a 	mov	r4,r5
   11ba0:	3007883a 	mov	r3,r6
   11ba4:	3805883a 	mov	r2,r7
   11ba8:	e13ffd0d 	sth	r4,-12(fp)
   11bac:	e0fffe05 	stb	r3,-8(fp)
   11bb0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   11bb4:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   11bb8:	e0800217 	ldw	r2,8(fp)
   11bbc:	1000021e 	bne	r2,zero,11bc8 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   11bc0:	0005883a 	mov	r2,zero
   11bc4:	00016706 	br	12164 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   11bc8:	e0bffc17 	ldw	r2,-16(fp)
   11bcc:	1000051e 	bne	r2,zero,11be4 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11bd0:	e0800217 	ldw	r2,8(fp)
   11bd4:	00c01b84 	movi	r3,110
   11bd8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11bdc:	0005883a 	mov	r2,zero
   11be0:	00016006 	br	12164 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   11be4:	008000b4 	movhi	r2,2
   11be8:	10bf3c04 	addi	r2,r2,-784
   11bec:	10800003 	ldbu	r2,0(r2)
   11bf0:	10803fcc 	andi	r2,r2,255
   11bf4:	10000526 	beq	r2,zero,11c0c <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   11bf8:	e0800217 	ldw	r2,8(fp)
   11bfc:	00c00084 	movi	r3,2
   11c00:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11c04:	0005883a 	mov	r2,zero
   11c08:	00015606 	br	12164 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   11c0c:	008000b4 	movhi	r2,2
   11c10:	10bf2e04 	addi	r2,r2,-840
   11c14:	10800003 	ldbu	r2,0(r2)
   11c18:	10803fcc 	andi	r2,r2,255
   11c1c:	10000526 	beq	r2,zero,11c34 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   11c20:	e0800217 	ldw	r2,8(fp)
   11c24:	00c00344 	movi	r3,13
   11c28:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11c2c:	0005883a 	mov	r2,zero
   11c30:	00014c06 	br	12164 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   11c34:	e0bffc17 	ldw	r2,-16(fp)
   11c38:	10800003 	ldbu	r2,0(r2)
   11c3c:	10803fcc 	andi	r2,r2,255
   11c40:	10800160 	cmpeqi	r2,r2,5
   11c44:	1000051e 	bne	r2,zero,11c5c <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   11c48:	e0800217 	ldw	r2,8(fp)
   11c4c:	00c00044 	movi	r3,1
   11c50:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11c54:	0005883a 	mov	r2,zero
   11c58:	00014206 	br	12164 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   11c5c:	e0fffe03 	ldbu	r3,-8(fp)
   11c60:	00bfe004 	movi	r2,-128
   11c64:	1884703a 	and	r2,r3,r2
   11c68:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   11c6c:	e0bfe703 	ldbu	r2,-100(fp)
   11c70:	10000626 	beq	r2,zero,11c8c <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   11c74:	e0bffe03 	ldbu	r2,-8(fp)
   11c78:	10801fcc 	andi	r2,r2,127
   11c7c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   11c80:	00800044 	movi	r2,1
   11c84:	e0bfe505 	stb	r2,-108(fp)
   11c88:	00000106 	br	11c90 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   11c8c:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11c90:	0005303a 	rdctl	r2,status
   11c94:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c98:	e0ffe917 	ldw	r3,-92(fp)
   11c9c:	00bfff84 	movi	r2,-2
   11ca0:	1884703a 	and	r2,r3,r2
   11ca4:	1001703a 	wrctl	status,r2
  
  return context;
   11ca8:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   11cac:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   11cb0:	e0bffe03 	ldbu	r2,-8(fp)
   11cb4:	10c00060 	cmpeqi	r3,r2,1
   11cb8:	1800921e 	bne	r3,zero,11f04 <OSFlagPend+0x37c>
   11cbc:	10c00088 	cmpgei	r3,r2,2
   11cc0:	1800021e 	bne	r3,zero,11ccc <OSFlagPend+0x144>
   11cc4:	10006126 	beq	r2,zero,11e4c <OSFlagPend+0x2c4>
   11cc8:	0000bb06 	br	11fb8 <OSFlagPend+0x430>
   11ccc:	10c000a0 	cmpeqi	r3,r2,2
   11cd0:	1800031e 	bne	r3,zero,11ce0 <OSFlagPend+0x158>
   11cd4:	108000e0 	cmpeqi	r2,r2,3
   11cd8:	10002f1e 	bne	r2,zero,11d98 <OSFlagPend+0x210>
   11cdc:	0000b606 	br	11fb8 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   11ce0:	e0bffc17 	ldw	r2,-16(fp)
   11ce4:	10c0020b 	ldhu	r3,8(r2)
   11ce8:	e0bffd0b 	ldhu	r2,-12(fp)
   11cec:	1884703a 	and	r2,r3,r2
   11cf0:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   11cf4:	e0ffe78b 	ldhu	r3,-98(fp)
   11cf8:	e0bffd0b 	ldhu	r2,-12(fp)
   11cfc:	1880191e 	bne	r3,r2,11d64 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11d00:	e0bfe503 	ldbu	r2,-108(fp)
   11d04:	10800058 	cmpnei	r2,r2,1
   11d08:	1000091e 	bne	r2,zero,11d30 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   11d0c:	e0bffc17 	ldw	r2,-16(fp)
   11d10:	1080020b 	ldhu	r2,8(r2)
   11d14:	1007883a 	mov	r3,r2
   11d18:	e0bfe78b 	ldhu	r2,-98(fp)
   11d1c:	0084303a 	nor	r2,zero,r2
   11d20:	1884703a 	and	r2,r3,r2
   11d24:	1007883a 	mov	r3,r2
   11d28:	e0bffc17 	ldw	r2,-16(fp)
   11d2c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   11d30:	008000b4 	movhi	r2,2
   11d34:	10bf3d04 	addi	r2,r2,-780
   11d38:	10800017 	ldw	r2,0(r2)
   11d3c:	e0ffe78b 	ldhu	r3,-98(fp)
   11d40:	10c00b0d 	sth	r3,44(r2)
   11d44:	e0bfe617 	ldw	r2,-104(fp)
   11d48:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11d4c:	e0bfea17 	ldw	r2,-88(fp)
   11d50:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11d54:	e0800217 	ldw	r2,8(fp)
   11d58:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   11d5c:	e0bfe78b 	ldhu	r2,-98(fp)
   11d60:	00010006 	br	12164 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   11d64:	e1bffd0b 	ldhu	r6,-12(fp)
   11d68:	e0fffe03 	ldbu	r3,-8(fp)
   11d6c:	e0bfff0b 	ldhu	r2,-4(fp)
   11d70:	e17ff704 	addi	r5,fp,-36
   11d74:	d8800015 	stw	r2,0(sp)
   11d78:	e13ffc17 	ldw	r4,-16(fp)
   11d7c:	180f883a 	mov	r7,r3
   11d80:	001262c0 	call	1262c <OS_FlagBlock>
   11d84:	e0bfe617 	ldw	r2,-104(fp)
   11d88:	e0bfeb15 	stw	r2,-84(fp)
   11d8c:	e0bfeb17 	ldw	r2,-84(fp)
   11d90:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   11d94:	00009206 	br	11fe0 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   11d98:	e0bffc17 	ldw	r2,-16(fp)
   11d9c:	10c0020b 	ldhu	r3,8(r2)
   11da0:	e0bffd0b 	ldhu	r2,-12(fp)
   11da4:	1884703a 	and	r2,r3,r2
   11da8:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   11dac:	e0bfe78b 	ldhu	r2,-98(fp)
   11db0:	10001926 	beq	r2,zero,11e18 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11db4:	e0bfe503 	ldbu	r2,-108(fp)
   11db8:	10800058 	cmpnei	r2,r2,1
   11dbc:	1000091e 	bne	r2,zero,11de4 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   11dc0:	e0bffc17 	ldw	r2,-16(fp)
   11dc4:	1080020b 	ldhu	r2,8(r2)
   11dc8:	1007883a 	mov	r3,r2
   11dcc:	e0bfe78b 	ldhu	r2,-98(fp)
   11dd0:	0084303a 	nor	r2,zero,r2
   11dd4:	1884703a 	and	r2,r3,r2
   11dd8:	1007883a 	mov	r3,r2
   11ddc:	e0bffc17 	ldw	r2,-16(fp)
   11de0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   11de4:	008000b4 	movhi	r2,2
   11de8:	10bf3d04 	addi	r2,r2,-780
   11dec:	10800017 	ldw	r2,0(r2)
   11df0:	e0ffe78b 	ldhu	r3,-98(fp)
   11df4:	10c00b0d 	sth	r3,44(r2)
   11df8:	e0bfe617 	ldw	r2,-104(fp)
   11dfc:	e0bfec15 	stw	r2,-80(fp)
   11e00:	e0bfec17 	ldw	r2,-80(fp)
   11e04:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11e08:	e0800217 	ldw	r2,8(fp)
   11e0c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   11e10:	e0bfe78b 	ldhu	r2,-98(fp)
   11e14:	0000d306 	br	12164 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   11e18:	e1bffd0b 	ldhu	r6,-12(fp)
   11e1c:	e0fffe03 	ldbu	r3,-8(fp)
   11e20:	e0bfff0b 	ldhu	r2,-4(fp)
   11e24:	e17ff704 	addi	r5,fp,-36
   11e28:	d8800015 	stw	r2,0(sp)
   11e2c:	e13ffc17 	ldw	r4,-16(fp)
   11e30:	180f883a 	mov	r7,r3
   11e34:	001262c0 	call	1262c <OS_FlagBlock>
   11e38:	e0bfe617 	ldw	r2,-104(fp)
   11e3c:	e0bfed15 	stw	r2,-76(fp)
   11e40:	e0bfed17 	ldw	r2,-76(fp)
   11e44:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   11e48:	00006506 	br	11fe0 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   11e4c:	e0bffc17 	ldw	r2,-16(fp)
   11e50:	1080020b 	ldhu	r2,8(r2)
   11e54:	0084303a 	nor	r2,zero,r2
   11e58:	1007883a 	mov	r3,r2
   11e5c:	e0bffd0b 	ldhu	r2,-12(fp)
   11e60:	1884703a 	and	r2,r3,r2
   11e64:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   11e68:	e0ffe78b 	ldhu	r3,-98(fp)
   11e6c:	e0bffd0b 	ldhu	r2,-12(fp)
   11e70:	1880171e 	bne	r3,r2,11ed0 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11e74:	e0bfe503 	ldbu	r2,-108(fp)
   11e78:	10800058 	cmpnei	r2,r2,1
   11e7c:	1000071e 	bne	r2,zero,11e9c <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   11e80:	e0bffc17 	ldw	r2,-16(fp)
   11e84:	10c0020b 	ldhu	r3,8(r2)
   11e88:	e0bfe78b 	ldhu	r2,-98(fp)
   11e8c:	1884b03a 	or	r2,r3,r2
   11e90:	1007883a 	mov	r3,r2
   11e94:	e0bffc17 	ldw	r2,-16(fp)
   11e98:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   11e9c:	008000b4 	movhi	r2,2
   11ea0:	10bf3d04 	addi	r2,r2,-780
   11ea4:	10800017 	ldw	r2,0(r2)
   11ea8:	e0ffe78b 	ldhu	r3,-98(fp)
   11eac:	10c00b0d 	sth	r3,44(r2)
   11eb0:	e0bfe617 	ldw	r2,-104(fp)
   11eb4:	e0bfee15 	stw	r2,-72(fp)
   11eb8:	e0bfee17 	ldw	r2,-72(fp)
   11ebc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11ec0:	e0800217 	ldw	r2,8(fp)
   11ec4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   11ec8:	e0bfe78b 	ldhu	r2,-98(fp)
   11ecc:	0000a506 	br	12164 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   11ed0:	e1bffd0b 	ldhu	r6,-12(fp)
   11ed4:	e0fffe03 	ldbu	r3,-8(fp)
   11ed8:	e0bfff0b 	ldhu	r2,-4(fp)
   11edc:	e17ff704 	addi	r5,fp,-36
   11ee0:	d8800015 	stw	r2,0(sp)
   11ee4:	e13ffc17 	ldw	r4,-16(fp)
   11ee8:	180f883a 	mov	r7,r3
   11eec:	001262c0 	call	1262c <OS_FlagBlock>
   11ef0:	e0bfe617 	ldw	r2,-104(fp)
   11ef4:	e0bfef15 	stw	r2,-68(fp)
   11ef8:	e0bfef17 	ldw	r2,-68(fp)
   11efc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   11f00:	00003706 	br	11fe0 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   11f04:	e0bffc17 	ldw	r2,-16(fp)
   11f08:	1080020b 	ldhu	r2,8(r2)
   11f0c:	0084303a 	nor	r2,zero,r2
   11f10:	1007883a 	mov	r3,r2
   11f14:	e0bffd0b 	ldhu	r2,-12(fp)
   11f18:	1884703a 	and	r2,r3,r2
   11f1c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   11f20:	e0bfe78b 	ldhu	r2,-98(fp)
   11f24:	10001726 	beq	r2,zero,11f84 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11f28:	e0bfe503 	ldbu	r2,-108(fp)
   11f2c:	10800058 	cmpnei	r2,r2,1
   11f30:	1000071e 	bne	r2,zero,11f50 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   11f34:	e0bffc17 	ldw	r2,-16(fp)
   11f38:	10c0020b 	ldhu	r3,8(r2)
   11f3c:	e0bfe78b 	ldhu	r2,-98(fp)
   11f40:	1884b03a 	or	r2,r3,r2
   11f44:	1007883a 	mov	r3,r2
   11f48:	e0bffc17 	ldw	r2,-16(fp)
   11f4c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   11f50:	008000b4 	movhi	r2,2
   11f54:	10bf3d04 	addi	r2,r2,-780
   11f58:	10800017 	ldw	r2,0(r2)
   11f5c:	e0ffe78b 	ldhu	r3,-98(fp)
   11f60:	10c00b0d 	sth	r3,44(r2)
   11f64:	e0bfe617 	ldw	r2,-104(fp)
   11f68:	e0bff015 	stw	r2,-64(fp)
   11f6c:	e0bff017 	ldw	r2,-64(fp)
   11f70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11f74:	e0800217 	ldw	r2,8(fp)
   11f78:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   11f7c:	e0bfe78b 	ldhu	r2,-98(fp)
   11f80:	00007806 	br	12164 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   11f84:	e1bffd0b 	ldhu	r6,-12(fp)
   11f88:	e0fffe03 	ldbu	r3,-8(fp)
   11f8c:	e0bfff0b 	ldhu	r2,-4(fp)
   11f90:	e17ff704 	addi	r5,fp,-36
   11f94:	d8800015 	stw	r2,0(sp)
   11f98:	e13ffc17 	ldw	r4,-16(fp)
   11f9c:	180f883a 	mov	r7,r3
   11fa0:	001262c0 	call	1262c <OS_FlagBlock>
   11fa4:	e0bfe617 	ldw	r2,-104(fp)
   11fa8:	e0bff115 	stw	r2,-60(fp)
   11fac:	e0bff117 	ldw	r2,-60(fp)
   11fb0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   11fb4:	00000a06 	br	11fe0 <OSFlagPend+0x458>
   11fb8:	e0bfe617 	ldw	r2,-104(fp)
   11fbc:	e0bff215 	stw	r2,-56(fp)
   11fc0:	e0bff217 	ldw	r2,-56(fp)
   11fc4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   11fc8:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   11fcc:	e0800217 	ldw	r2,8(fp)
   11fd0:	00c01bc4 	movi	r3,111
   11fd4:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   11fd8:	e0bfe78b 	ldhu	r2,-98(fp)
   11fdc:	00006106 	br	12164 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   11fe0:	0010a040 	call	10a04 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11fe4:	0005303a 	rdctl	r2,status
   11fe8:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11fec:	e0fff317 	ldw	r3,-52(fp)
   11ff0:	00bfff84 	movi	r2,-2
   11ff4:	1884703a 	and	r2,r3,r2
   11ff8:	1001703a 	wrctl	status,r2
  
  return context;
   11ffc:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   12000:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   12004:	008000b4 	movhi	r2,2
   12008:	10bf3d04 	addi	r2,r2,-780
   1200c:	10800017 	ldw	r2,0(r2)
   12010:	10800c43 	ldbu	r2,49(r2)
   12014:	10803fcc 	andi	r2,r2,255
   12018:	10002226 	beq	r2,zero,120a4 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   1201c:	008000b4 	movhi	r2,2
   12020:	10bf3d04 	addi	r2,r2,-780
   12024:	10800017 	ldw	r2,0(r2)
   12028:	10800c43 	ldbu	r2,49(r2)
   1202c:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12030:	008000b4 	movhi	r2,2
   12034:	10bf3d04 	addi	r2,r2,-780
   12038:	10800017 	ldw	r2,0(r2)
   1203c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   12040:	e0bff704 	addi	r2,fp,-36
   12044:	1009883a 	mov	r4,r2
   12048:	00129e40 	call	129e4 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   1204c:	008000b4 	movhi	r2,2
   12050:	10bf3d04 	addi	r2,r2,-780
   12054:	10800017 	ldw	r2,0(r2)
   12058:	10000c05 	stb	zero,48(r2)
   1205c:	e0bfe617 	ldw	r2,-104(fp)
   12060:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12064:	e0bff417 	ldw	r2,-48(fp)
   12068:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   1206c:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   12070:	e0bfe803 	ldbu	r2,-96(fp)
   12074:	108000a0 	cmpeqi	r2,r2,2
   12078:	10000426 	beq	r2,zero,1208c <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   1207c:	e0800217 	ldw	r2,8(fp)
   12080:	00c00384 	movi	r3,14
   12084:	10c00005 	stb	r3,0(r2)
                 break;
   12088:	00000406 	br	1209c <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   1208c:	e0800217 	ldw	r2,8(fp)
   12090:	00c00284 	movi	r3,10
   12094:	10c00005 	stb	r3,0(r2)
                 break;
   12098:	0001883a 	nop
        }
        return (flags_rdy);
   1209c:	e0bfe78b 	ldhu	r2,-98(fp)
   120a0:	00003006 	br	12164 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   120a4:	008000b4 	movhi	r2,2
   120a8:	10bf3d04 	addi	r2,r2,-780
   120ac:	10800017 	ldw	r2,0(r2)
   120b0:	10800b0b 	ldhu	r2,44(r2)
   120b4:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   120b8:	e0bfe503 	ldbu	r2,-108(fp)
   120bc:	10800058 	cmpnei	r2,r2,1
   120c0:	1000211e 	bne	r2,zero,12148 <OSFlagPend+0x5c0>
        switch (wait_type) {
   120c4:	e0bffe03 	ldbu	r2,-8(fp)
   120c8:	10001616 	blt	r2,zero,12124 <OSFlagPend+0x59c>
   120cc:	10c00090 	cmplti	r3,r2,2
   120d0:	18000c1e 	bne	r3,zero,12104 <OSFlagPend+0x57c>
   120d4:	10800108 	cmpgei	r2,r2,4
   120d8:	1000121e 	bne	r2,zero,12124 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   120dc:	e0bffc17 	ldw	r2,-16(fp)
   120e0:	1080020b 	ldhu	r2,8(r2)
   120e4:	1007883a 	mov	r3,r2
   120e8:	e0bfe78b 	ldhu	r2,-98(fp)
   120ec:	0084303a 	nor	r2,zero,r2
   120f0:	1884703a 	and	r2,r3,r2
   120f4:	1007883a 	mov	r3,r2
   120f8:	e0bffc17 	ldw	r2,-16(fp)
   120fc:	10c0020d 	sth	r3,8(r2)
                 break;
   12100:	00001106 	br	12148 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   12104:	e0bffc17 	ldw	r2,-16(fp)
   12108:	10c0020b 	ldhu	r3,8(r2)
   1210c:	e0bfe78b 	ldhu	r2,-98(fp)
   12110:	1884b03a 	or	r2,r3,r2
   12114:	1007883a 	mov	r3,r2
   12118:	e0bffc17 	ldw	r2,-16(fp)
   1211c:	10c0020d 	sth	r3,8(r2)
                 break;
   12120:	00000906 	br	12148 <OSFlagPend+0x5c0>
   12124:	e0bfe617 	ldw	r2,-104(fp)
   12128:	e0bff515 	stw	r2,-44(fp)
   1212c:	e0bff517 	ldw	r2,-44(fp)
   12130:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   12134:	e0800217 	ldw	r2,8(fp)
   12138:	00c01bc4 	movi	r3,111
   1213c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   12140:	0005883a 	mov	r2,zero
   12144:	00000706 	br	12164 <OSFlagPend+0x5dc>
   12148:	e0bfe617 	ldw	r2,-104(fp)
   1214c:	e0bff615 	stw	r2,-40(fp)
   12150:	e0bff617 	ldw	r2,-40(fp)
   12154:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   12158:	e0800217 	ldw	r2,8(fp)
   1215c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   12160:	e0bfe78b 	ldhu	r2,-98(fp)
}
   12164:	e037883a 	mov	sp,fp
   12168:	dfc00117 	ldw	ra,4(sp)
   1216c:	df000017 	ldw	fp,0(sp)
   12170:	dec00204 	addi	sp,sp,8
   12174:	f800283a 	ret

00012178 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   12178:	defffb04 	addi	sp,sp,-20
   1217c:	df000415 	stw	fp,16(sp)
   12180:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   12184:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12188:	0005303a 	rdctl	r2,status
   1218c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12190:	e0fffe17 	ldw	r3,-8(fp)
   12194:	00bfff84 	movi	r2,-2
   12198:	1884703a 	and	r2,r3,r2
   1219c:	1001703a 	wrctl	status,r2
  
  return context;
   121a0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   121a4:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   121a8:	008000b4 	movhi	r2,2
   121ac:	10bf3d04 	addi	r2,r2,-780
   121b0:	10800017 	ldw	r2,0(r2)
   121b4:	10800b0b 	ldhu	r2,44(r2)
   121b8:	e0bffd0d 	sth	r2,-12(fp)
   121bc:	e0bffc17 	ldw	r2,-16(fp)
   121c0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   121c4:	e0bfff17 	ldw	r2,-4(fp)
   121c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   121cc:	e0bffd0b 	ldhu	r2,-12(fp)
}
   121d0:	e037883a 	mov	sp,fp
   121d4:	df000017 	ldw	fp,0(sp)
   121d8:	dec00104 	addi	sp,sp,4
   121dc:	f800283a 	ret

000121e0 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   121e0:	deffef04 	addi	sp,sp,-68
   121e4:	dfc01015 	stw	ra,64(sp)
   121e8:	df000f15 	stw	fp,60(sp)
   121ec:	df000f04 	addi	fp,sp,60
   121f0:	e13ffc15 	stw	r4,-16(fp)
   121f4:	2807883a 	mov	r3,r5
   121f8:	3005883a 	mov	r2,r6
   121fc:	e1ffff15 	stw	r7,-4(fp)
   12200:	e0fffd0d 	sth	r3,-12(fp)
   12204:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   12208:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1220c:	e0bfff17 	ldw	r2,-4(fp)
   12210:	1000021e 	bne	r2,zero,1221c <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   12214:	0005883a 	mov	r2,zero
   12218:	0000ce06 	br	12554 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   1221c:	e0bffc17 	ldw	r2,-16(fp)
   12220:	1000051e 	bne	r2,zero,12238 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12224:	e0bfff17 	ldw	r2,-4(fp)
   12228:	00c01b84 	movi	r3,110
   1222c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12230:	0005883a 	mov	r2,zero
   12234:	0000c706 	br	12554 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   12238:	e0bffc17 	ldw	r2,-16(fp)
   1223c:	10800003 	ldbu	r2,0(r2)
   12240:	10803fcc 	andi	r2,r2,255
   12244:	10800160 	cmpeqi	r2,r2,5
   12248:	1000051e 	bne	r2,zero,12260 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   1224c:	e0bfff17 	ldw	r2,-4(fp)
   12250:	00c00044 	movi	r3,1
   12254:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12258:	0005883a 	mov	r2,zero
   1225c:	0000bd06 	br	12554 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12260:	0005303a 	rdctl	r2,status
   12264:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12268:	e0fff617 	ldw	r3,-40(fp)
   1226c:	00bfff84 	movi	r2,-2
   12270:	1884703a 	and	r2,r3,r2
   12274:	1001703a 	wrctl	status,r2
  
  return context;
   12278:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   1227c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   12280:	e0bffe03 	ldbu	r2,-8(fp)
   12284:	10000326 	beq	r2,zero,12294 <OSFlagPost+0xb4>
   12288:	10800060 	cmpeqi	r2,r2,1
   1228c:	10000b1e 	bne	r2,zero,122bc <OSFlagPost+0xdc>
   12290:	00001206 	br	122dc <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   12294:	e0bffc17 	ldw	r2,-16(fp)
   12298:	1080020b 	ldhu	r2,8(r2)
   1229c:	1007883a 	mov	r3,r2
   122a0:	e0bffd0b 	ldhu	r2,-12(fp)
   122a4:	0084303a 	nor	r2,zero,r2
   122a8:	1884703a 	and	r2,r3,r2
   122ac:	1007883a 	mov	r3,r2
   122b0:	e0bffc17 	ldw	r2,-16(fp)
   122b4:	10c0020d 	sth	r3,8(r2)
             break;
   122b8:	00001106 	br	12300 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   122bc:	e0bffc17 	ldw	r2,-16(fp)
   122c0:	10c0020b 	ldhu	r3,8(r2)
   122c4:	e0bffd0b 	ldhu	r2,-12(fp)
   122c8:	1884b03a 	or	r2,r3,r2
   122cc:	1007883a 	mov	r3,r2
   122d0:	e0bffc17 	ldw	r2,-16(fp)
   122d4:	10c0020d 	sth	r3,8(r2)
             break;
   122d8:	00000906 	br	12300 <OSFlagPost+0x120>
   122dc:	e0bff317 	ldw	r2,-52(fp)
   122e0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   122e4:	e0bff717 	ldw	r2,-36(fp)
   122e8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   122ec:	e0bfff17 	ldw	r2,-4(fp)
   122f0:	00c01c44 	movi	r3,113
   122f4:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   122f8:	0005883a 	mov	r2,zero
   122fc:	00009506 	br	12554 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   12300:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   12304:	e0bffc17 	ldw	r2,-16(fp)
   12308:	10800117 	ldw	r2,4(r2)
   1230c:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   12310:	00007406 	br	124e4 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   12314:	e0bff117 	ldw	r2,-60(fp)
   12318:	10800483 	ldbu	r2,18(r2)
   1231c:	10803fcc 	andi	r2,r2,255
   12320:	10c00060 	cmpeqi	r3,r2,1
   12324:	18004d1e 	bne	r3,zero,1245c <OSFlagPost+0x27c>
   12328:	10c00088 	cmpgei	r3,r2,2
   1232c:	1800021e 	bne	r3,zero,12338 <OSFlagPost+0x158>
   12330:	10003126 	beq	r2,zero,123f8 <OSFlagPost+0x218>
   12334:	00005f06 	br	124b4 <OSFlagPost+0x2d4>
   12338:	10c000a0 	cmpeqi	r3,r2,2
   1233c:	1800031e 	bne	r3,zero,1234c <OSFlagPost+0x16c>
   12340:	108000e0 	cmpeqi	r2,r2,3
   12344:	1000181e 	bne	r2,zero,123a8 <OSFlagPost+0x1c8>
   12348:	00005a06 	br	124b4 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1234c:	e0bffc17 	ldw	r2,-16(fp)
   12350:	10c0020b 	ldhu	r3,8(r2)
   12354:	e0bff117 	ldw	r2,-60(fp)
   12358:	1080040b 	ldhu	r2,16(r2)
   1235c:	1884703a 	and	r2,r3,r2
   12360:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   12364:	e0bff117 	ldw	r2,-60(fp)
   12368:	1080040b 	ldhu	r2,16(r2)
   1236c:	10ffffcc 	andi	r3,r2,65535
   12370:	e0bff40b 	ldhu	r2,-48(fp)
   12374:	18800b1e 	bne	r3,r2,123a4 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   12378:	e0bff40b 	ldhu	r2,-48(fp)
   1237c:	e13ff117 	ldw	r4,-60(fp)
   12380:	100b883a 	mov	r5,r2
   12384:	00128d40 	call	128d4 <OS_FlagTaskRdy>
   12388:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   1238c:	e0bff483 	ldbu	r2,-46(fp)
   12390:	10800058 	cmpnei	r2,r2,1
   12394:	1000031e 	bne	r2,zero,123a4 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   12398:	00800044 	movi	r2,1
   1239c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   123a0:	00004d06 	br	124d8 <OSFlagPost+0x2f8>
   123a4:	00004c06 	br	124d8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   123a8:	e0bffc17 	ldw	r2,-16(fp)
   123ac:	10c0020b 	ldhu	r3,8(r2)
   123b0:	e0bff117 	ldw	r2,-60(fp)
   123b4:	1080040b 	ldhu	r2,16(r2)
   123b8:	1884703a 	and	r2,r3,r2
   123bc:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   123c0:	e0bff40b 	ldhu	r2,-48(fp)
   123c4:	10000b26 	beq	r2,zero,123f4 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   123c8:	e0bff40b 	ldhu	r2,-48(fp)
   123cc:	e13ff117 	ldw	r4,-60(fp)
   123d0:	100b883a 	mov	r5,r2
   123d4:	00128d40 	call	128d4 <OS_FlagTaskRdy>
   123d8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   123dc:	e0bff483 	ldbu	r2,-46(fp)
   123e0:	10800058 	cmpnei	r2,r2,1
   123e4:	1000031e 	bne	r2,zero,123f4 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   123e8:	00800044 	movi	r2,1
   123ec:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   123f0:	00003906 	br	124d8 <OSFlagPost+0x2f8>
   123f4:	00003806 	br	124d8 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   123f8:	e0bffc17 	ldw	r2,-16(fp)
   123fc:	1080020b 	ldhu	r2,8(r2)
   12400:	0084303a 	nor	r2,zero,r2
   12404:	1007883a 	mov	r3,r2
   12408:	e0bff117 	ldw	r2,-60(fp)
   1240c:	1080040b 	ldhu	r2,16(r2)
   12410:	1884703a 	and	r2,r3,r2
   12414:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   12418:	e0bff117 	ldw	r2,-60(fp)
   1241c:	1080040b 	ldhu	r2,16(r2)
   12420:	10ffffcc 	andi	r3,r2,65535
   12424:	e0bff40b 	ldhu	r2,-48(fp)
   12428:	18800b1e 	bne	r3,r2,12458 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1242c:	e0bff40b 	ldhu	r2,-48(fp)
   12430:	e13ff117 	ldw	r4,-60(fp)
   12434:	100b883a 	mov	r5,r2
   12438:	00128d40 	call	128d4 <OS_FlagTaskRdy>
   1243c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   12440:	e0bff483 	ldbu	r2,-46(fp)
   12444:	10800058 	cmpnei	r2,r2,1
   12448:	1000031e 	bne	r2,zero,12458 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1244c:	00800044 	movi	r2,1
   12450:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   12454:	00002006 	br	124d8 <OSFlagPost+0x2f8>
   12458:	00001f06 	br	124d8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1245c:	e0bffc17 	ldw	r2,-16(fp)
   12460:	1080020b 	ldhu	r2,8(r2)
   12464:	0084303a 	nor	r2,zero,r2
   12468:	1007883a 	mov	r3,r2
   1246c:	e0bff117 	ldw	r2,-60(fp)
   12470:	1080040b 	ldhu	r2,16(r2)
   12474:	1884703a 	and	r2,r3,r2
   12478:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   1247c:	e0bff40b 	ldhu	r2,-48(fp)
   12480:	10000b26 	beq	r2,zero,124b0 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   12484:	e0bff40b 	ldhu	r2,-48(fp)
   12488:	e13ff117 	ldw	r4,-60(fp)
   1248c:	100b883a 	mov	r5,r2
   12490:	00128d40 	call	128d4 <OS_FlagTaskRdy>
   12494:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   12498:	e0bff483 	ldbu	r2,-46(fp)
   1249c:	10800058 	cmpnei	r2,r2,1
   124a0:	1000031e 	bne	r2,zero,124b0 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   124a4:	00800044 	movi	r2,1
   124a8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   124ac:	00000a06 	br	124d8 <OSFlagPost+0x2f8>
   124b0:	00000906 	br	124d8 <OSFlagPost+0x2f8>
   124b4:	e0bff317 	ldw	r2,-52(fp)
   124b8:	e0bff815 	stw	r2,-32(fp)
   124bc:	e0bff817 	ldw	r2,-32(fp)
   124c0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   124c4:	e0bfff17 	ldw	r2,-4(fp)
   124c8:	00c01bc4 	movi	r3,111
   124cc:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   124d0:	0005883a 	mov	r2,zero
   124d4:	00001f06 	br	12554 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   124d8:	e0bff117 	ldw	r2,-60(fp)
   124dc:	10800017 	ldw	r2,0(r2)
   124e0:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   124e4:	e0bff117 	ldw	r2,-60(fp)
   124e8:	103f8a1e 	bne	r2,zero,12314 <__alt_mem_Flash_flash_data+0xf4012314>
   124ec:	e0bff317 	ldw	r2,-52(fp)
   124f0:	e0bff915 	stw	r2,-28(fp)
   124f4:	e0bff917 	ldw	r2,-28(fp)
   124f8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   124fc:	e0bff203 	ldbu	r2,-56(fp)
   12500:	10800058 	cmpnei	r2,r2,1
   12504:	1000011e 	bne	r2,zero,1250c <OSFlagPost+0x32c>
        OS_Sched();
   12508:	0010a040 	call	10a04 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1250c:	0005303a 	rdctl	r2,status
   12510:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12514:	e0fffa17 	ldw	r3,-24(fp)
   12518:	00bfff84 	movi	r2,-2
   1251c:	1884703a 	and	r2,r3,r2
   12520:	1001703a 	wrctl	status,r2
  
  return context;
   12524:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   12528:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   1252c:	e0bffc17 	ldw	r2,-16(fp)
   12530:	1080020b 	ldhu	r2,8(r2)
   12534:	e0bff50d 	sth	r2,-44(fp)
   12538:	e0bff317 	ldw	r2,-52(fp)
   1253c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12540:	e0bffb17 	ldw	r2,-20(fp)
   12544:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   12548:	e0bfff17 	ldw	r2,-4(fp)
   1254c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   12550:	e0bff50b 	ldhu	r2,-44(fp)
}
   12554:	e037883a 	mov	sp,fp
   12558:	dfc00117 	ldw	ra,4(sp)
   1255c:	df000017 	ldw	fp,0(sp)
   12560:	dec00204 	addi	sp,sp,8
   12564:	f800283a 	ret

00012568 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   12568:	defff904 	addi	sp,sp,-28
   1256c:	df000615 	stw	fp,24(sp)
   12570:	df000604 	addi	fp,sp,24
   12574:	e13ffe15 	stw	r4,-8(fp)
   12578:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   1257c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   12580:	e0bfff17 	ldw	r2,-4(fp)
   12584:	1000021e 	bne	r2,zero,12590 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   12588:	0005883a 	mov	r2,zero
   1258c:	00002306 	br	1261c <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   12590:	e0bffe17 	ldw	r2,-8(fp)
   12594:	1000051e 	bne	r2,zero,125ac <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12598:	e0bfff17 	ldw	r2,-4(fp)
   1259c:	00c01b84 	movi	r3,110
   125a0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   125a4:	0005883a 	mov	r2,zero
   125a8:	00001c06 	br	1261c <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   125ac:	e0bffe17 	ldw	r2,-8(fp)
   125b0:	10800003 	ldbu	r2,0(r2)
   125b4:	10803fcc 	andi	r2,r2,255
   125b8:	10800160 	cmpeqi	r2,r2,5
   125bc:	1000051e 	bne	r2,zero,125d4 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   125c0:	e0bfff17 	ldw	r2,-4(fp)
   125c4:	00c00044 	movi	r3,1
   125c8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   125cc:	0005883a 	mov	r2,zero
   125d0:	00001206 	br	1261c <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   125d4:	0005303a 	rdctl	r2,status
   125d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   125dc:	e0fffc17 	ldw	r3,-16(fp)
   125e0:	00bfff84 	movi	r2,-2
   125e4:	1884703a 	and	r2,r3,r2
   125e8:	1001703a 	wrctl	status,r2
  
  return context;
   125ec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   125f0:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   125f4:	e0bffe17 	ldw	r2,-8(fp)
   125f8:	1080020b 	ldhu	r2,8(r2)
   125fc:	e0bffb0d 	sth	r2,-20(fp)
   12600:	e0bffa17 	ldw	r2,-24(fp)
   12604:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12608:	e0bffd17 	ldw	r2,-12(fp)
   1260c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12610:	e0bfff17 	ldw	r2,-4(fp)
   12614:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   12618:	e0bffb0b 	ldhu	r2,-20(fp)
}
   1261c:	e037883a 	mov	sp,fp
   12620:	df000017 	ldw	fp,0(sp)
   12624:	dec00104 	addi	sp,sp,4
   12628:	f800283a 	ret

0001262c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   1262c:	defff804 	addi	sp,sp,-32
   12630:	df000715 	stw	fp,28(sp)
   12634:	df000704 	addi	fp,sp,28
   12638:	e13ffb15 	stw	r4,-20(fp)
   1263c:	e17ffc15 	stw	r5,-16(fp)
   12640:	3009883a 	mov	r4,r6
   12644:	3807883a 	mov	r3,r7
   12648:	e0800117 	ldw	r2,4(fp)
   1264c:	e13ffd0d 	sth	r4,-12(fp)
   12650:	e0fffe05 	stb	r3,-8(fp)
   12654:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   12658:	008000b4 	movhi	r2,2
   1265c:	10bf3d04 	addi	r2,r2,-780
   12660:	10c00017 	ldw	r3,0(r2)
   12664:	008000b4 	movhi	r2,2
   12668:	10bf3d04 	addi	r2,r2,-780
   1266c:	10800017 	ldw	r2,0(r2)
   12670:	10800c03 	ldbu	r2,48(r2)
   12674:	10800814 	ori	r2,r2,32
   12678:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   1267c:	008000b4 	movhi	r2,2
   12680:	10bf3d04 	addi	r2,r2,-780
   12684:	10800017 	ldw	r2,0(r2)
   12688:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   1268c:	008000b4 	movhi	r2,2
   12690:	10bf3d04 	addi	r2,r2,-780
   12694:	10800017 	ldw	r2,0(r2)
   12698:	e0ffff0b 	ldhu	r3,-4(fp)
   1269c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   126a0:	008000b4 	movhi	r2,2
   126a4:	10bf3d04 	addi	r2,r2,-780
   126a8:	10800017 	ldw	r2,0(r2)
   126ac:	e0fffc17 	ldw	r3,-16(fp)
   126b0:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   126b4:	e0bffc17 	ldw	r2,-16(fp)
   126b8:	e0fffd0b 	ldhu	r3,-12(fp)
   126bc:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   126c0:	e0bffc17 	ldw	r2,-16(fp)
   126c4:	e0fffe03 	ldbu	r3,-8(fp)
   126c8:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   126cc:	008000b4 	movhi	r2,2
   126d0:	10bf3d04 	addi	r2,r2,-780
   126d4:	10c00017 	ldw	r3,0(r2)
   126d8:	e0bffc17 	ldw	r2,-16(fp)
   126dc:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   126e0:	e0bffb17 	ldw	r2,-20(fp)
   126e4:	10c00117 	ldw	r3,4(r2)
   126e8:	e0bffc17 	ldw	r2,-16(fp)
   126ec:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   126f0:	e0bffc17 	ldw	r2,-16(fp)
   126f4:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   126f8:	e0bffc17 	ldw	r2,-16(fp)
   126fc:	e0fffb17 	ldw	r3,-20(fp)
   12700:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   12704:	e0bffb17 	ldw	r2,-20(fp)
   12708:	10800117 	ldw	r2,4(r2)
   1270c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   12710:	e0bff917 	ldw	r2,-28(fp)
   12714:	10000326 	beq	r2,zero,12724 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   12718:	e0bff917 	ldw	r2,-28(fp)
   1271c:	e0fffc17 	ldw	r3,-16(fp)
   12720:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   12724:	e0bffb17 	ldw	r2,-20(fp)
   12728:	e0fffc17 	ldw	r3,-16(fp)
   1272c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   12730:	008000b4 	movhi	r2,2
   12734:	10bf3d04 	addi	r2,r2,-780
   12738:	10800017 	ldw	r2,0(r2)
   1273c:	10800d03 	ldbu	r2,52(r2)
   12740:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   12744:	e0fffa03 	ldbu	r3,-24(fp)
   12748:	e13ffa03 	ldbu	r4,-24(fp)
   1274c:	008000b4 	movhi	r2,2
   12750:	10bf3a44 	addi	r2,r2,-791
   12754:	1105883a 	add	r2,r2,r4
   12758:	10800003 	ldbu	r2,0(r2)
   1275c:	1009883a 	mov	r4,r2
   12760:	008000b4 	movhi	r2,2
   12764:	10bf3d04 	addi	r2,r2,-780
   12768:	10800017 	ldw	r2,0(r2)
   1276c:	10800d43 	ldbu	r2,53(r2)
   12770:	0084303a 	nor	r2,zero,r2
   12774:	2084703a 	and	r2,r4,r2
   12778:	1009883a 	mov	r4,r2
   1277c:	008000b4 	movhi	r2,2
   12780:	10bf3a44 	addi	r2,r2,-791
   12784:	10c5883a 	add	r2,r2,r3
   12788:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   1278c:	e0fffa03 	ldbu	r3,-24(fp)
   12790:	008000b4 	movhi	r2,2
   12794:	10bf3a44 	addi	r2,r2,-791
   12798:	10c5883a 	add	r2,r2,r3
   1279c:	10800003 	ldbu	r2,0(r2)
   127a0:	10803fcc 	andi	r2,r2,255
   127a4:	10000e1e 	bne	r2,zero,127e0 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   127a8:	008000b4 	movhi	r2,2
   127ac:	10bf3d04 	addi	r2,r2,-780
   127b0:	10800017 	ldw	r2,0(r2)
   127b4:	10800d83 	ldbu	r2,54(r2)
   127b8:	0084303a 	nor	r2,zero,r2
   127bc:	1007883a 	mov	r3,r2
   127c0:	008000b4 	movhi	r2,2
   127c4:	10bf3a04 	addi	r2,r2,-792
   127c8:	10800003 	ldbu	r2,0(r2)
   127cc:	1884703a 	and	r2,r3,r2
   127d0:	1007883a 	mov	r3,r2
   127d4:	008000b4 	movhi	r2,2
   127d8:	10bf3a04 	addi	r2,r2,-792
   127dc:	10c00005 	stb	r3,0(r2)
    }
}
   127e0:	e037883a 	mov	sp,fp
   127e4:	df000017 	ldw	fp,0(sp)
   127e8:	dec00104 	addi	sp,sp,4
   127ec:	f800283a 	ret

000127f0 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   127f0:	defffb04 	addi	sp,sp,-20
   127f4:	dfc00415 	stw	ra,16(sp)
   127f8:	df000315 	stw	fp,12(sp)
   127fc:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   12800:	010000f4 	movhi	r4,3
   12804:	21294404 	addi	r4,r4,-23280
   12808:	0140dc04 	movi	r5,880
   1280c:	00109500 	call	10950 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   12810:	008000f4 	movhi	r2,3
   12814:	10a94404 	addi	r2,r2,-23280
   12818:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   1281c:	008000f4 	movhi	r2,3
   12820:	10a94f04 	addi	r2,r2,-23236
   12824:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   12828:	e03ffd0d 	sth	zero,-12(fp)
   1282c:	00001306 	br	1287c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   12830:	e0bffe17 	ldw	r2,-8(fp)
   12834:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   12838:	e0bffe17 	ldw	r2,-8(fp)
   1283c:	e0ffff17 	ldw	r3,-4(fp)
   12840:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   12844:	e0bffe17 	ldw	r2,-8(fp)
   12848:	00c00fc4 	movi	r3,63
   1284c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   12850:	e0bffe17 	ldw	r2,-8(fp)
   12854:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   12858:	e0bffe17 	ldw	r2,-8(fp)
   1285c:	10800b04 	addi	r2,r2,44
   12860:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   12864:	e0bfff17 	ldw	r2,-4(fp)
   12868:	10800b04 	addi	r2,r2,44
   1286c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   12870:	e0bffd0b 	ldhu	r2,-12(fp)
   12874:	10800044 	addi	r2,r2,1
   12878:	e0bffd0d 	sth	r2,-12(fp)
   1287c:	e0bffd0b 	ldhu	r2,-12(fp)
   12880:	108004f0 	cmpltui	r2,r2,19
   12884:	103fea1e 	bne	r2,zero,12830 <__alt_mem_Flash_flash_data+0xf4012830>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   12888:	e0bffe17 	ldw	r2,-8(fp)
   1288c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   12890:	e0bffe17 	ldw	r2,-8(fp)
   12894:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   12898:	e0bffe17 	ldw	r2,-8(fp)
   1289c:	00c00fc4 	movi	r3,63
   128a0:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   128a4:	e0bffe17 	ldw	r2,-8(fp)
   128a8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   128ac:	008000b4 	movhi	r2,2
   128b0:	10bf3f04 	addi	r2,r2,-772
   128b4:	00c000f4 	movhi	r3,3
   128b8:	18e94404 	addi	r3,r3,-23280
   128bc:	10c00015 	stw	r3,0(r2)
#endif
}
   128c0:	e037883a 	mov	sp,fp
   128c4:	dfc00117 	ldw	ra,4(sp)
   128c8:	df000017 	ldw	fp,0(sp)
   128cc:	dec00204 	addi	sp,sp,8
   128d0:	f800283a 	ret

000128d4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   128d4:	defffa04 	addi	sp,sp,-24
   128d8:	dfc00515 	stw	ra,20(sp)
   128dc:	df000415 	stw	fp,16(sp)
   128e0:	df000404 	addi	fp,sp,16
   128e4:	e13ffe15 	stw	r4,-8(fp)
   128e8:	2805883a 	mov	r2,r5
   128ec:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   128f0:	e0bffe17 	ldw	r2,-8(fp)
   128f4:	10800217 	ldw	r2,8(r2)
   128f8:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   128fc:	e0bffd17 	ldw	r2,-12(fp)
   12900:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   12904:	e0bffd17 	ldw	r2,-12(fp)
   12908:	e0ffff0b 	ldhu	r3,-4(fp)
   1290c:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   12910:	e0bffd17 	ldw	r2,-12(fp)
   12914:	10c00c03 	ldbu	r3,48(r2)
   12918:	00bff7c4 	movi	r2,-33
   1291c:	1884703a 	and	r2,r3,r2
   12920:	1007883a 	mov	r3,r2
   12924:	e0bffd17 	ldw	r2,-12(fp)
   12928:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   1292c:	e0bffd17 	ldw	r2,-12(fp)
   12930:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   12934:	e0bffd17 	ldw	r2,-12(fp)
   12938:	10800c03 	ldbu	r2,48(r2)
   1293c:	10803fcc 	andi	r2,r2,255
   12940:	10001f1e 	bne	r2,zero,129c0 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   12944:	e0bffd17 	ldw	r2,-12(fp)
   12948:	10c00d83 	ldbu	r3,54(r2)
   1294c:	008000b4 	movhi	r2,2
   12950:	10bf3a04 	addi	r2,r2,-792
   12954:	10800003 	ldbu	r2,0(r2)
   12958:	1884b03a 	or	r2,r3,r2
   1295c:	1007883a 	mov	r3,r2
   12960:	008000b4 	movhi	r2,2
   12964:	10bf3a04 	addi	r2,r2,-792
   12968:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1296c:	e0bffd17 	ldw	r2,-12(fp)
   12970:	10800d03 	ldbu	r2,52(r2)
   12974:	10c03fcc 	andi	r3,r2,255
   12978:	e0bffd17 	ldw	r2,-12(fp)
   1297c:	10800d03 	ldbu	r2,52(r2)
   12980:	11003fcc 	andi	r4,r2,255
   12984:	008000b4 	movhi	r2,2
   12988:	10bf3a44 	addi	r2,r2,-791
   1298c:	1105883a 	add	r2,r2,r4
   12990:	11000003 	ldbu	r4,0(r2)
   12994:	e0bffd17 	ldw	r2,-12(fp)
   12998:	10800d43 	ldbu	r2,53(r2)
   1299c:	2084b03a 	or	r2,r4,r2
   129a0:	1009883a 	mov	r4,r2
   129a4:	008000b4 	movhi	r2,2
   129a8:	10bf3a44 	addi	r2,r2,-791
   129ac:	10c5883a 	add	r2,r2,r3
   129b0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   129b4:	00800044 	movi	r2,1
   129b8:	e0bffc05 	stb	r2,-16(fp)
   129bc:	00000106 	br	129c4 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   129c0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   129c4:	e13ffe17 	ldw	r4,-8(fp)
   129c8:	00129e40 	call	129e4 <OS_FlagUnlink>
    return (sched);
   129cc:	e0bffc03 	ldbu	r2,-16(fp)
}
   129d0:	e037883a 	mov	sp,fp
   129d4:	dfc00117 	ldw	ra,4(sp)
   129d8:	df000017 	ldw	fp,0(sp)
   129dc:	dec00204 	addi	sp,sp,8
   129e0:	f800283a 	ret

000129e4 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   129e4:	defffa04 	addi	sp,sp,-24
   129e8:	df000515 	stw	fp,20(sp)
   129ec:	df000504 	addi	fp,sp,20
   129f0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   129f4:	e0bfff17 	ldw	r2,-4(fp)
   129f8:	10800117 	ldw	r2,4(r2)
   129fc:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   12a00:	e0bfff17 	ldw	r2,-4(fp)
   12a04:	10800017 	ldw	r2,0(r2)
   12a08:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   12a0c:	e0bffb17 	ldw	r2,-20(fp)
   12a10:	10000b1e 	bne	r2,zero,12a40 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   12a14:	e0bfff17 	ldw	r2,-4(fp)
   12a18:	10800317 	ldw	r2,12(r2)
   12a1c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   12a20:	e0bffd17 	ldw	r2,-12(fp)
   12a24:	e0fffc17 	ldw	r3,-16(fp)
   12a28:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   12a2c:	e0bffc17 	ldw	r2,-16(fp)
   12a30:	10000b26 	beq	r2,zero,12a60 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   12a34:	e0bffc17 	ldw	r2,-16(fp)
   12a38:	10000115 	stw	zero,4(r2)
   12a3c:	00000806 	br	12a60 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   12a40:	e0bffb17 	ldw	r2,-20(fp)
   12a44:	e0fffc17 	ldw	r3,-16(fp)
   12a48:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   12a4c:	e0bffc17 	ldw	r2,-16(fp)
   12a50:	10000326 	beq	r2,zero,12a60 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   12a54:	e0bffc17 	ldw	r2,-16(fp)
   12a58:	e0fffb17 	ldw	r3,-20(fp)
   12a5c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   12a60:	e0bfff17 	ldw	r2,-4(fp)
   12a64:	10800217 	ldw	r2,8(r2)
   12a68:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   12a6c:	e0bffe17 	ldw	r2,-8(fp)
   12a70:	10000a15 	stw	zero,40(r2)
#endif
}
   12a74:	e037883a 	mov	sp,fp
   12a78:	df000017 	ldw	fp,0(sp)
   12a7c:	dec00104 	addi	sp,sp,4
   12a80:	f800283a 	ret

00012a84 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
   12a84:	defffa04 	addi	sp,sp,-24
   12a88:	df000515 	stw	fp,20(sp)
   12a8c:	df000504 	addi	fp,sp,20
   12a90:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
   12a94:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
   12a98:	e0bfff17 	ldw	r2,-4(fp)
   12a9c:	1000021e 	bne	r2,zero,12aa8 <OSMboxAccept+0x24>
        return ((void *)0);
   12aa0:	0005883a 	mov	r2,zero
   12aa4:	00001906 	br	12b0c <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
   12aa8:	e0bfff17 	ldw	r2,-4(fp)
   12aac:	10800003 	ldbu	r2,0(r2)
   12ab0:	10803fcc 	andi	r2,r2,255
   12ab4:	10800060 	cmpeqi	r2,r2,1
   12ab8:	1000021e 	bne	r2,zero,12ac4 <OSMboxAccept+0x40>
        return ((void *)0);
   12abc:	0005883a 	mov	r2,zero
   12ac0:	00001206 	br	12b0c <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ac4:	0005303a 	rdctl	r2,status
   12ac8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12acc:	e0fffd17 	ldw	r3,-12(fp)
   12ad0:	00bfff84 	movi	r2,-2
   12ad4:	1884703a 	and	r2,r3,r2
   12ad8:	1001703a 	wrctl	status,r2
  
  return context;
   12adc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12ae0:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
   12ae4:	e0bfff17 	ldw	r2,-4(fp)
   12ae8:	10800117 	ldw	r2,4(r2)
   12aec:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
   12af0:	e0bfff17 	ldw	r2,-4(fp)
   12af4:	10000115 	stw	zero,4(r2)
   12af8:	e0bffb17 	ldw	r2,-20(fp)
   12afc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12b00:	e0bffe17 	ldw	r2,-8(fp)
   12b04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
   12b08:	e0bffc17 	ldw	r2,-16(fp)
}
   12b0c:	e037883a 	mov	sp,fp
   12b10:	df000017 	ldw	fp,0(sp)
   12b14:	dec00104 	addi	sp,sp,4
   12b18:	f800283a 	ret

00012b1c <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
   12b1c:	defff904 	addi	sp,sp,-28
   12b20:	dfc00615 	stw	ra,24(sp)
   12b24:	df000515 	stw	fp,20(sp)
   12b28:	df000504 	addi	fp,sp,20
   12b2c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12b30:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   12b34:	008000b4 	movhi	r2,2
   12b38:	10bf3c04 	addi	r2,r2,-784
   12b3c:	10800003 	ldbu	r2,0(r2)
   12b40:	10803fcc 	andi	r2,r2,255
   12b44:	10000226 	beq	r2,zero,12b50 <OSMboxCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   12b48:	0005883a 	mov	r2,zero
   12b4c:	00002d06 	br	12c04 <OSMboxCreate+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12b50:	0005303a 	rdctl	r2,status
   12b54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12b58:	e0fffd17 	ldw	r3,-12(fp)
   12b5c:	00bfff84 	movi	r2,-2
   12b60:	1884703a 	and	r2,r3,r2
   12b64:	1001703a 	wrctl	status,r2
  
  return context;
   12b68:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12b6c:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   12b70:	008000b4 	movhi	r2,2
   12b74:	10bf3b04 	addi	r2,r2,-788
   12b78:	10800017 	ldw	r2,0(r2)
   12b7c:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   12b80:	008000b4 	movhi	r2,2
   12b84:	10bf3b04 	addi	r2,r2,-788
   12b88:	10800017 	ldw	r2,0(r2)
   12b8c:	10000726 	beq	r2,zero,12bac <OSMboxCreate+0x90>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   12b90:	008000b4 	movhi	r2,2
   12b94:	10bf3b04 	addi	r2,r2,-788
   12b98:	10800017 	ldw	r2,0(r2)
   12b9c:	10c00117 	ldw	r3,4(r2)
   12ba0:	008000b4 	movhi	r2,2
   12ba4:	10bf3b04 	addi	r2,r2,-788
   12ba8:	10c00015 	stw	r3,0(r2)
   12bac:	e0bffb17 	ldw	r2,-20(fp)
   12bb0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12bb4:	e0bffe17 	ldw	r2,-8(fp)
   12bb8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
   12bbc:	e0bffc17 	ldw	r2,-16(fp)
   12bc0:	10000f26 	beq	r2,zero,12c00 <OSMboxCreate+0xe4>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
   12bc4:	e0bffc17 	ldw	r2,-16(fp)
   12bc8:	00c00044 	movi	r3,1
   12bcc:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
   12bd0:	e0bffc17 	ldw	r2,-16(fp)
   12bd4:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
   12bd8:	e0bffc17 	ldw	r2,-16(fp)
   12bdc:	e0ffff17 	ldw	r3,-4(fp)
   12be0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
   12be4:	e0bffc17 	ldw	r2,-16(fp)
   12be8:	00c00fc4 	movi	r3,63
   12bec:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   12bf0:	e0bffc17 	ldw	r2,-16(fp)
   12bf4:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
   12bf8:	e13ffc17 	ldw	r4,-16(fp)
   12bfc:	001058c0 	call	1058c <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
   12c00:	e0bffc17 	ldw	r2,-16(fp)
}
   12c04:	e037883a 	mov	sp,fp
   12c08:	dfc00117 	ldw	ra,4(sp)
   12c0c:	df000017 	ldw	fp,0(sp)
   12c10:	dec00204 	addi	sp,sp,8
   12c14:	f800283a 	ret

00012c18 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12c18:	defff304 	addi	sp,sp,-52
   12c1c:	dfc00c15 	stw	ra,48(sp)
   12c20:	df000b15 	stw	fp,44(sp)
   12c24:	df000b04 	addi	fp,sp,44
   12c28:	e13ffd15 	stw	r4,-12(fp)
   12c2c:	2805883a 	mov	r2,r5
   12c30:	e1bfff15 	stw	r6,-4(fp)
   12c34:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12c38:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12c3c:	e0bfff17 	ldw	r2,-4(fp)
   12c40:	1000021e 	bne	r2,zero,12c4c <OSMboxDel+0x34>
        return (pevent);
   12c44:	e0bffd17 	ldw	r2,-12(fp)
   12c48:	00008806 	br	12e6c <OSMboxDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   12c4c:	e0bffd17 	ldw	r2,-12(fp)
   12c50:	1000051e 	bne	r2,zero,12c68 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12c54:	e0bfff17 	ldw	r2,-4(fp)
   12c58:	00c00104 	movi	r3,4
   12c5c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12c60:	e0bffd17 	ldw	r2,-12(fp)
   12c64:	00008106 	br	12e6c <OSMboxDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   12c68:	e0bffd17 	ldw	r2,-12(fp)
   12c6c:	10800003 	ldbu	r2,0(r2)
   12c70:	10803fcc 	andi	r2,r2,255
   12c74:	10800060 	cmpeqi	r2,r2,1
   12c78:	1000051e 	bne	r2,zero,12c90 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12c7c:	e0bfff17 	ldw	r2,-4(fp)
   12c80:	00c00044 	movi	r3,1
   12c84:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12c88:	e0bffd17 	ldw	r2,-12(fp)
   12c8c:	00007706 	br	12e6c <OSMboxDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12c90:	008000b4 	movhi	r2,2
   12c94:	10bf3c04 	addi	r2,r2,-784
   12c98:	10800003 	ldbu	r2,0(r2)
   12c9c:	10803fcc 	andi	r2,r2,255
   12ca0:	10000526 	beq	r2,zero,12cb8 <OSMboxDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   12ca4:	e0bfff17 	ldw	r2,-4(fp)
   12ca8:	00c003c4 	movi	r3,15
   12cac:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12cb0:	e0bffd17 	ldw	r2,-12(fp)
   12cb4:	00006d06 	br	12e6c <OSMboxDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12cb8:	0005303a 	rdctl	r2,status
   12cbc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12cc0:	e0fff817 	ldw	r3,-32(fp)
   12cc4:	00bfff84 	movi	r2,-2
   12cc8:	1884703a 	and	r2,r3,r2
   12ccc:	1001703a 	wrctl	status,r2
  
  return context;
   12cd0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   12cd4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
   12cd8:	e0bffd17 	ldw	r2,-12(fp)
   12cdc:	10800283 	ldbu	r2,10(r2)
   12ce0:	10803fcc 	andi	r2,r2,255
   12ce4:	10000326 	beq	r2,zero,12cf4 <OSMboxDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   12ce8:	00800044 	movi	r2,1
   12cec:	e0bff505 	stb	r2,-44(fp)
   12cf0:	00000106 	br	12cf8 <OSMboxDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   12cf4:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   12cf8:	e0bffe03 	ldbu	r2,-8(fp)
   12cfc:	10000326 	beq	r2,zero,12d0c <OSMboxDel+0xf4>
   12d00:	10800060 	cmpeqi	r2,r2,1
   12d04:	10002c1e 	bne	r2,zero,12db8 <OSMboxDel+0x1a0>
   12d08:	00004d06 	br	12e40 <OSMboxDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
   12d0c:	e0bff503 	ldbu	r2,-44(fp)
   12d10:	10001a1e 	bne	r2,zero,12d7c <OSMboxDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   12d14:	e0bffd17 	ldw	r2,-12(fp)
   12d18:	00c00fc4 	movi	r3,63
   12d1c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   12d20:	e0bffd17 	ldw	r2,-12(fp)
   12d24:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   12d28:	e0bffd17 	ldw	r2,-12(fp)
   12d2c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   12d30:	008000b4 	movhi	r2,2
   12d34:	10bf3b04 	addi	r2,r2,-788
   12d38:	10c00017 	ldw	r3,0(r2)
   12d3c:	e0bffd17 	ldw	r2,-12(fp)
   12d40:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
   12d44:	e0bffd17 	ldw	r2,-12(fp)
   12d48:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
   12d4c:	008000b4 	movhi	r2,2
   12d50:	10bf3b04 	addi	r2,r2,-788
   12d54:	e0fffd17 	ldw	r3,-12(fp)
   12d58:	10c00015 	stw	r3,0(r2)
   12d5c:	e0bff717 	ldw	r2,-36(fp)
   12d60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12d64:	e0bff917 	ldw	r2,-28(fp)
   12d68:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
   12d6c:	e0bfff17 	ldw	r2,-4(fp)
   12d70:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
   12d74:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
   12d78:	00003b06 	br	12e68 <OSMboxDel+0x250>
   12d7c:	e0bff717 	ldw	r2,-36(fp)
   12d80:	e0bffa15 	stw	r2,-24(fp)
   12d84:	e0bffa17 	ldw	r2,-24(fp)
   12d88:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
   12d8c:	e0bfff17 	ldw	r2,-4(fp)
   12d90:	00c01244 	movi	r3,73
   12d94:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
   12d98:	e0bffd17 	ldw	r2,-12(fp)
   12d9c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   12da0:	00003106 	br	12e68 <OSMboxDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
   12da4:	e13ffd17 	ldw	r4,-12(fp)
   12da8:	000b883a 	mov	r5,zero
   12dac:	01800084 	movi	r6,2
   12db0:	000f883a 	mov	r7,zero
   12db4:	000ffec0 	call	ffec <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
   12db8:	e0bffd17 	ldw	r2,-12(fp)
   12dbc:	10800283 	ldbu	r2,10(r2)
   12dc0:	10803fcc 	andi	r2,r2,255
   12dc4:	103ff71e 	bne	r2,zero,12da4 <__alt_mem_Flash_flash_data+0xf4012da4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   12dc8:	e0bffd17 	ldw	r2,-12(fp)
   12dcc:	00c00fc4 	movi	r3,63
   12dd0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   12dd4:	e0bffd17 	ldw	r2,-12(fp)
   12dd8:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12ddc:	e0bffd17 	ldw	r2,-12(fp)
   12de0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   12de4:	008000b4 	movhi	r2,2
   12de8:	10bf3b04 	addi	r2,r2,-788
   12dec:	10c00017 	ldw	r3,0(r2)
   12df0:	e0bffd17 	ldw	r2,-12(fp)
   12df4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   12df8:	e0bffd17 	ldw	r2,-12(fp)
   12dfc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   12e00:	008000b4 	movhi	r2,2
   12e04:	10bf3b04 	addi	r2,r2,-788
   12e08:	e0fffd17 	ldw	r3,-12(fp)
   12e0c:	10c00015 	stw	r3,0(r2)
   12e10:	e0bff717 	ldw	r2,-36(fp)
   12e14:	e0bffb15 	stw	r2,-20(fp)
   12e18:	e0bffb17 	ldw	r2,-20(fp)
   12e1c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   12e20:	e0bff503 	ldbu	r2,-44(fp)
   12e24:	10800058 	cmpnei	r2,r2,1
   12e28:	1000011e 	bne	r2,zero,12e30 <OSMboxDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   12e2c:	0010a040 	call	10a04 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
   12e30:	e0bfff17 	ldw	r2,-4(fp)
   12e34:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
   12e38:	e03ff615 	stw	zero,-40(fp)
             break;
   12e3c:	00000a06 	br	12e68 <OSMboxDel+0x250>
   12e40:	e0bff717 	ldw	r2,-36(fp)
   12e44:	e0bffc15 	stw	r2,-16(fp)
   12e48:	e0bffc17 	ldw	r2,-16(fp)
   12e4c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
   12e50:	e0bfff17 	ldw	r2,-4(fp)
   12e54:	00c001c4 	movi	r3,7
   12e58:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
   12e5c:	e0bffd17 	ldw	r2,-12(fp)
   12e60:	e0bff615 	stw	r2,-40(fp)
             break;
   12e64:	0001883a 	nop
    }
    return (pevent_return);
   12e68:	e0bff617 	ldw	r2,-40(fp)
}
   12e6c:	e037883a 	mov	sp,fp
   12e70:	dfc00117 	ldw	ra,4(sp)
   12e74:	df000017 	ldw	fp,0(sp)
   12e78:	dec00204 	addi	sp,sp,8
   12e7c:	f800283a 	ret

00012e80 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   12e80:	defff404 	addi	sp,sp,-48
   12e84:	dfc00b15 	stw	ra,44(sp)
   12e88:	df000a15 	stw	fp,40(sp)
   12e8c:	df000a04 	addi	fp,sp,40
   12e90:	e13ffd15 	stw	r4,-12(fp)
   12e94:	2805883a 	mov	r2,r5
   12e98:	e1bfff15 	stw	r6,-4(fp)
   12e9c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12ea0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   12ea4:	e0bfff17 	ldw	r2,-4(fp)
   12ea8:	1000021e 	bne	r2,zero,12eb4 <OSMboxPend+0x34>
        return ((void *)0);
   12eac:	0005883a 	mov	r2,zero
   12eb0:	00009706 	br	13110 <OSMboxPend+0x290>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12eb4:	e0bffd17 	ldw	r2,-12(fp)
   12eb8:	1000051e 	bne	r2,zero,12ed0 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12ebc:	e0bfff17 	ldw	r2,-4(fp)
   12ec0:	00c00104 	movi	r3,4
   12ec4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12ec8:	0005883a 	mov	r2,zero
   12ecc:	00009006 	br	13110 <OSMboxPend+0x290>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   12ed0:	e0bffd17 	ldw	r2,-12(fp)
   12ed4:	10800003 	ldbu	r2,0(r2)
   12ed8:	10803fcc 	andi	r2,r2,255
   12edc:	10800060 	cmpeqi	r2,r2,1
   12ee0:	1000051e 	bne	r2,zero,12ef8 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12ee4:	e0bfff17 	ldw	r2,-4(fp)
   12ee8:	00c00044 	movi	r3,1
   12eec:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12ef0:	0005883a 	mov	r2,zero
   12ef4:	00008606 	br	13110 <OSMboxPend+0x290>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   12ef8:	008000b4 	movhi	r2,2
   12efc:	10bf3c04 	addi	r2,r2,-784
   12f00:	10800003 	ldbu	r2,0(r2)
   12f04:	10803fcc 	andi	r2,r2,255
   12f08:	10000526 	beq	r2,zero,12f20 <OSMboxPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   12f0c:	e0bfff17 	ldw	r2,-4(fp)
   12f10:	00c00084 	movi	r3,2
   12f14:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12f18:	0005883a 	mov	r2,zero
   12f1c:	00007c06 	br	13110 <OSMboxPend+0x290>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   12f20:	008000b4 	movhi	r2,2
   12f24:	10bf2e04 	addi	r2,r2,-840
   12f28:	10800003 	ldbu	r2,0(r2)
   12f2c:	10803fcc 	andi	r2,r2,255
   12f30:	10000526 	beq	r2,zero,12f48 <OSMboxPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   12f34:	e0bfff17 	ldw	r2,-4(fp)
   12f38:	00c00344 	movi	r3,13
   12f3c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12f40:	0005883a 	mov	r2,zero
   12f44:	00007206 	br	13110 <OSMboxPend+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12f48:	0005303a 	rdctl	r2,status
   12f4c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12f50:	e0fff817 	ldw	r3,-32(fp)
   12f54:	00bfff84 	movi	r2,-2
   12f58:	1884703a 	and	r2,r3,r2
   12f5c:	1001703a 	wrctl	status,r2
  
  return context;
   12f60:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   12f64:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
   12f68:	e0bffd17 	ldw	r2,-12(fp)
   12f6c:	10800117 	ldw	r2,4(r2)
   12f70:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
   12f74:	e0bff617 	ldw	r2,-40(fp)
   12f78:	10000a26 	beq	r2,zero,12fa4 <OSMboxPend+0x124>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
   12f7c:	e0bffd17 	ldw	r2,-12(fp)
   12f80:	10000115 	stw	zero,4(r2)
   12f84:	e0bff717 	ldw	r2,-36(fp)
   12f88:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12f8c:	e0bff917 	ldw	r2,-28(fp)
   12f90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   12f94:	e0bfff17 	ldw	r2,-4(fp)
   12f98:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
   12f9c:	e0bff617 	ldw	r2,-40(fp)
   12fa0:	00005b06 	br	13110 <OSMboxPend+0x290>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
   12fa4:	008000b4 	movhi	r2,2
   12fa8:	10bf3d04 	addi	r2,r2,-780
   12fac:	10c00017 	ldw	r3,0(r2)
   12fb0:	008000b4 	movhi	r2,2
   12fb4:	10bf3d04 	addi	r2,r2,-780
   12fb8:	10800017 	ldw	r2,0(r2)
   12fbc:	10800c03 	ldbu	r2,48(r2)
   12fc0:	10800094 	ori	r2,r2,2
   12fc4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12fc8:	008000b4 	movhi	r2,2
   12fcc:	10bf3d04 	addi	r2,r2,-780
   12fd0:	10800017 	ldw	r2,0(r2)
   12fd4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
   12fd8:	008000b4 	movhi	r2,2
   12fdc:	10bf3d04 	addi	r2,r2,-780
   12fe0:	10800017 	ldw	r2,0(r2)
   12fe4:	e0fffe0b 	ldhu	r3,-8(fp)
   12fe8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   12fec:	e13ffd17 	ldw	r4,-12(fp)
   12ff0:	00101840 	call	10184 <OS_EventTaskWait>
   12ff4:	e0bff717 	ldw	r2,-36(fp)
   12ff8:	e0bffa15 	stw	r2,-24(fp)
   12ffc:	e0bffa17 	ldw	r2,-24(fp)
   13000:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
   13004:	0010a040 	call	10a04 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13008:	0005303a 	rdctl	r2,status
   1300c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13010:	e0fffb17 	ldw	r3,-20(fp)
   13014:	00bfff84 	movi	r2,-2
   13018:	1884703a 	and	r2,r3,r2
   1301c:	1001703a 	wrctl	status,r2
  
  return context;
   13020:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   13024:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   13028:	008000b4 	movhi	r2,2
   1302c:	10bf3d04 	addi	r2,r2,-780
   13030:	10800017 	ldw	r2,0(r2)
   13034:	10800c43 	ldbu	r2,49(r2)
   13038:	10803fcc 	andi	r2,r2,255
   1303c:	10000326 	beq	r2,zero,1304c <OSMboxPend+0x1cc>
   13040:	108000a0 	cmpeqi	r2,r2,2
   13044:	1000091e 	bne	r2,zero,1306c <OSMboxPend+0x1ec>
   13048:	00000d06 	br	13080 <OSMboxPend+0x200>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
   1304c:	008000b4 	movhi	r2,2
   13050:	10bf3d04 	addi	r2,r2,-780
   13054:	10800017 	ldw	r2,0(r2)
   13058:	10800917 	ldw	r2,36(r2)
   1305c:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
   13060:	e0bfff17 	ldw	r2,-4(fp)
   13064:	10000005 	stb	zero,0(r2)
             break;
   13068:	00001006 	br	130ac <OSMboxPend+0x22c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   1306c:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   13070:	e0bfff17 	ldw	r2,-4(fp)
   13074:	00c00384 	movi	r3,14
   13078:	10c00005 	stb	r3,0(r2)
             break;
   1307c:	00000b06 	br	130ac <OSMboxPend+0x22c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   13080:	008000b4 	movhi	r2,2
   13084:	10bf3d04 	addi	r2,r2,-780
   13088:	10800017 	ldw	r2,0(r2)
   1308c:	1009883a 	mov	r4,r2
   13090:	e17ffd17 	ldw	r5,-12(fp)
   13094:	00103dc0 	call	103dc <OS_EventTaskRemove>
             pmsg = (void *)0;
   13098:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1309c:	e0bfff17 	ldw	r2,-4(fp)
   130a0:	00c00284 	movi	r3,10
   130a4:	10c00005 	stb	r3,0(r2)
             break;
   130a8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   130ac:	008000b4 	movhi	r2,2
   130b0:	10bf3d04 	addi	r2,r2,-780
   130b4:	10800017 	ldw	r2,0(r2)
   130b8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   130bc:	008000b4 	movhi	r2,2
   130c0:	10bf3d04 	addi	r2,r2,-780
   130c4:	10800017 	ldw	r2,0(r2)
   130c8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   130cc:	008000b4 	movhi	r2,2
   130d0:	10bf3d04 	addi	r2,r2,-780
   130d4:	10800017 	ldw	r2,0(r2)
   130d8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   130dc:	008000b4 	movhi	r2,2
   130e0:	10bf3d04 	addi	r2,r2,-780
   130e4:	10800017 	ldw	r2,0(r2)
   130e8:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   130ec:	008000b4 	movhi	r2,2
   130f0:	10bf3d04 	addi	r2,r2,-780
   130f4:	10800017 	ldw	r2,0(r2)
   130f8:	10000915 	stw	zero,36(r2)
   130fc:	e0bff717 	ldw	r2,-36(fp)
   13100:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13104:	e0bffc17 	ldw	r2,-16(fp)
   13108:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   1310c:	e0bff617 	ldw	r2,-40(fp)
}
   13110:	e037883a 	mov	sp,fp
   13114:	dfc00117 	ldw	ra,4(sp)
   13118:	df000017 	ldw	fp,0(sp)
   1311c:	dec00204 	addi	sp,sp,8
   13120:	f800283a 	ret

00013124 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13124:	defff604 	addi	sp,sp,-40
   13128:	dfc00915 	stw	ra,36(sp)
   1312c:	df000815 	stw	fp,32(sp)
   13130:	df000804 	addi	fp,sp,32
   13134:	e13ffd15 	stw	r4,-12(fp)
   13138:	2805883a 	mov	r2,r5
   1313c:	e1bfff15 	stw	r6,-4(fp)
   13140:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13144:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13148:	e0bfff17 	ldw	r2,-4(fp)
   1314c:	1000021e 	bne	r2,zero,13158 <OSMboxPendAbort+0x34>
        return (0);
   13150:	0005883a 	mov	r2,zero
   13154:	00004906 	br	1327c <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13158:	e0bffd17 	ldw	r2,-12(fp)
   1315c:	1000051e 	bne	r2,zero,13174 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   13160:	e0bfff17 	ldw	r2,-4(fp)
   13164:	00c00104 	movi	r3,4
   13168:	10c00005 	stb	r3,0(r2)
        return (0);
   1316c:	0005883a 	mov	r2,zero
   13170:	00004206 	br	1327c <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   13174:	e0bffd17 	ldw	r2,-12(fp)
   13178:	10800003 	ldbu	r2,0(r2)
   1317c:	10803fcc 	andi	r2,r2,255
   13180:	10800060 	cmpeqi	r2,r2,1
   13184:	1000051e 	bne	r2,zero,1319c <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   13188:	e0bfff17 	ldw	r2,-4(fp)
   1318c:	00c00044 	movi	r3,1
   13190:	10c00005 	stb	r3,0(r2)
        return (0);
   13194:	0005883a 	mov	r2,zero
   13198:	00003806 	br	1327c <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1319c:	0005303a 	rdctl	r2,status
   131a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   131a4:	e0fffa17 	ldw	r3,-24(fp)
   131a8:	00bfff84 	movi	r2,-2
   131ac:	1884703a 	and	r2,r3,r2
   131b0:	1001703a 	wrctl	status,r2
  
  return context;
   131b4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   131b8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
   131bc:	e0bffd17 	ldw	r2,-12(fp)
   131c0:	10800283 	ldbu	r2,10(r2)
   131c4:	10803fcc 	andi	r2,r2,255
   131c8:	10002526 	beq	r2,zero,13260 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
   131cc:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   131d0:	e0bffe03 	ldbu	r2,-8(fp)
   131d4:	10800060 	cmpeqi	r2,r2,1
   131d8:	10000e26 	beq	r2,zero,13214 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   131dc:	00000806 	br	13200 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   131e0:	e13ffd17 	ldw	r4,-12(fp)
   131e4:	000b883a 	mov	r5,zero
   131e8:	01800084 	movi	r6,2
   131ec:	01c00084 	movi	r7,2
   131f0:	000ffec0 	call	ffec <OS_EventTaskRdy>
                     nbr_tasks++;
   131f4:	e0bff803 	ldbu	r2,-32(fp)
   131f8:	10800044 	addi	r2,r2,1
   131fc:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   13200:	e0bffd17 	ldw	r2,-12(fp)
   13204:	10800283 	ldbu	r2,10(r2)
   13208:	10803fcc 	andi	r2,r2,255
   1320c:	103ff41e 	bne	r2,zero,131e0 <__alt_mem_Flash_flash_data+0xf40131e0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   13210:	00000906 	br	13238 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   13214:	e13ffd17 	ldw	r4,-12(fp)
   13218:	000b883a 	mov	r5,zero
   1321c:	01800084 	movi	r6,2
   13220:	01c00084 	movi	r7,2
   13224:	000ffec0 	call	ffec <OS_EventTaskRdy>
                 nbr_tasks++;
   13228:	e0bff803 	ldbu	r2,-32(fp)
   1322c:	10800044 	addi	r2,r2,1
   13230:	e0bff805 	stb	r2,-32(fp)
                 break;
   13234:	0001883a 	nop
   13238:	e0bff917 	ldw	r2,-28(fp)
   1323c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13240:	e0bffb17 	ldw	r2,-20(fp)
   13244:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   13248:	0010a040 	call	10a04 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1324c:	e0bfff17 	ldw	r2,-4(fp)
   13250:	00c00384 	movi	r3,14
   13254:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   13258:	e0bff803 	ldbu	r2,-32(fp)
   1325c:	00000706 	br	1327c <OSMboxPendAbort+0x158>
   13260:	e0bff917 	ldw	r2,-28(fp)
   13264:	e0bffc15 	stw	r2,-16(fp)
   13268:	e0bffc17 	ldw	r2,-16(fp)
   1326c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13270:	e0bfff17 	ldw	r2,-4(fp)
   13274:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
   13278:	0005883a 	mov	r2,zero
}
   1327c:	e037883a 	mov	sp,fp
   13280:	dfc00117 	ldw	ra,4(sp)
   13284:	df000017 	ldw	fp,0(sp)
   13288:	dec00204 	addi	sp,sp,8
   1328c:	f800283a 	ret

00013290 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
   13290:	defff704 	addi	sp,sp,-36
   13294:	dfc00815 	stw	ra,32(sp)
   13298:	df000715 	stw	fp,28(sp)
   1329c:	df000704 	addi	fp,sp,28
   132a0:	e13ffe15 	stw	r4,-8(fp)
   132a4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   132a8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   132ac:	e0bffe17 	ldw	r2,-8(fp)
   132b0:	1000021e 	bne	r2,zero,132bc <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   132b4:	00800104 	movi	r2,4
   132b8:	00003406 	br	1338c <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   132bc:	e0bfff17 	ldw	r2,-4(fp)
   132c0:	1000021e 	bne	r2,zero,132cc <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
   132c4:	008000c4 	movi	r2,3
   132c8:	00003006 	br	1338c <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   132cc:	e0bffe17 	ldw	r2,-8(fp)
   132d0:	10800003 	ldbu	r2,0(r2)
   132d4:	10803fcc 	andi	r2,r2,255
   132d8:	10800060 	cmpeqi	r2,r2,1
   132dc:	1000021e 	bne	r2,zero,132e8 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
   132e0:	00800044 	movi	r2,1
   132e4:	00002906 	br	1338c <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   132e8:	0005303a 	rdctl	r2,status
   132ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   132f0:	e0fffa17 	ldw	r3,-24(fp)
   132f4:	00bfff84 	movi	r2,-2
   132f8:	1884703a 	and	r2,r3,r2
   132fc:	1001703a 	wrctl	status,r2
  
  return context;
   13300:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   13304:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   13308:	e0bffe17 	ldw	r2,-8(fp)
   1330c:	10800283 	ldbu	r2,10(r2)
   13310:	10803fcc 	andi	r2,r2,255
   13314:	10000c26 	beq	r2,zero,13348 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   13318:	e13ffe17 	ldw	r4,-8(fp)
   1331c:	e17fff17 	ldw	r5,-4(fp)
   13320:	01800084 	movi	r6,2
   13324:	000f883a 	mov	r7,zero
   13328:	000ffec0 	call	ffec <OS_EventTaskRdy>
   1332c:	e0bff917 	ldw	r2,-28(fp)
   13330:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13334:	e0bffb17 	ldw	r2,-20(fp)
   13338:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   1333c:	0010a040 	call	10a04 <OS_Sched>
        return (OS_ERR_NONE);
   13340:	0005883a 	mov	r2,zero
   13344:	00001106 	br	1338c <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   13348:	e0bffe17 	ldw	r2,-8(fp)
   1334c:	10800117 	ldw	r2,4(r2)
   13350:	10000626 	beq	r2,zero,1336c <OSMboxPost+0xdc>
   13354:	e0bff917 	ldw	r2,-28(fp)
   13358:	e0bffc15 	stw	r2,-16(fp)
   1335c:	e0bffc17 	ldw	r2,-16(fp)
   13360:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   13364:	00800504 	movi	r2,20
   13368:	00000806 	br	1338c <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   1336c:	e0bffe17 	ldw	r2,-8(fp)
   13370:	e0ffff17 	ldw	r3,-4(fp)
   13374:	10c00115 	stw	r3,4(r2)
   13378:	e0bff917 	ldw	r2,-28(fp)
   1337c:	e0bffd15 	stw	r2,-12(fp)
   13380:	e0bffd17 	ldw	r2,-12(fp)
   13384:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13388:	0005883a 	mov	r2,zero
}
   1338c:	e037883a 	mov	sp,fp
   13390:	dfc00117 	ldw	ra,4(sp)
   13394:	df000017 	ldw	fp,0(sp)
   13398:	dec00204 	addi	sp,sp,8
   1339c:	f800283a 	ret

000133a0 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   133a0:	defff604 	addi	sp,sp,-40
   133a4:	dfc00915 	stw	ra,36(sp)
   133a8:	df000815 	stw	fp,32(sp)
   133ac:	df000804 	addi	fp,sp,32
   133b0:	e13ffd15 	stw	r4,-12(fp)
   133b4:	e17ffe15 	stw	r5,-8(fp)
   133b8:	3005883a 	mov	r2,r6
   133bc:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   133c0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   133c4:	e0bffd17 	ldw	r2,-12(fp)
   133c8:	1000021e 	bne	r2,zero,133d4 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   133cc:	00800104 	movi	r2,4
   133d0:	00004506 	br	134e8 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   133d4:	e0bffe17 	ldw	r2,-8(fp)
   133d8:	1000021e 	bne	r2,zero,133e4 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
   133dc:	008000c4 	movi	r2,3
   133e0:	00004106 	br	134e8 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   133e4:	e0bffd17 	ldw	r2,-12(fp)
   133e8:	10800003 	ldbu	r2,0(r2)
   133ec:	10803fcc 	andi	r2,r2,255
   133f0:	10800060 	cmpeqi	r2,r2,1
   133f4:	1000021e 	bne	r2,zero,13400 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
   133f8:	00800044 	movi	r2,1
   133fc:	00003a06 	br	134e8 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13400:	0005303a 	rdctl	r2,status
   13404:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13408:	e0fff917 	ldw	r3,-28(fp)
   1340c:	00bfff84 	movi	r2,-2
   13410:	1884703a 	and	r2,r3,r2
   13414:	1001703a 	wrctl	status,r2
  
  return context;
   13418:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1341c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   13420:	e0bffd17 	ldw	r2,-12(fp)
   13424:	10800283 	ldbu	r2,10(r2)
   13428:	10803fcc 	andi	r2,r2,255
   1342c:	10001d26 	beq	r2,zero,134a4 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   13430:	e0bfff03 	ldbu	r2,-4(fp)
   13434:	1080004c 	andi	r2,r2,1
   13438:	10000b26 	beq	r2,zero,13468 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   1343c:	00000506 	br	13454 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   13440:	e13ffd17 	ldw	r4,-12(fp)
   13444:	e17ffe17 	ldw	r5,-8(fp)
   13448:	01800084 	movi	r6,2
   1344c:	000f883a 	mov	r7,zero
   13450:	000ffec0 	call	ffec <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   13454:	e0bffd17 	ldw	r2,-12(fp)
   13458:	10800283 	ldbu	r2,10(r2)
   1345c:	10803fcc 	andi	r2,r2,255
   13460:	103ff71e 	bne	r2,zero,13440 <__alt_mem_Flash_flash_data+0xf4013440>
   13464:	00000506 	br	1347c <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   13468:	e13ffd17 	ldw	r4,-12(fp)
   1346c:	e17ffe17 	ldw	r5,-8(fp)
   13470:	01800084 	movi	r6,2
   13474:	000f883a 	mov	r7,zero
   13478:	000ffec0 	call	ffec <OS_EventTaskRdy>
   1347c:	e0bff817 	ldw	r2,-32(fp)
   13480:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13484:	e0bffa17 	ldw	r2,-24(fp)
   13488:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   1348c:	e0bfff03 	ldbu	r2,-4(fp)
   13490:	1080010c 	andi	r2,r2,4
   13494:	1000011e 	bne	r2,zero,1349c <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
   13498:	0010a040 	call	10a04 <OS_Sched>
        }
        return (OS_ERR_NONE);
   1349c:	0005883a 	mov	r2,zero
   134a0:	00001106 	br	134e8 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   134a4:	e0bffd17 	ldw	r2,-12(fp)
   134a8:	10800117 	ldw	r2,4(r2)
   134ac:	10000626 	beq	r2,zero,134c8 <OSMboxPostOpt+0x128>
   134b0:	e0bff817 	ldw	r2,-32(fp)
   134b4:	e0bffb15 	stw	r2,-20(fp)
   134b8:	e0bffb17 	ldw	r2,-20(fp)
   134bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   134c0:	00800504 	movi	r2,20
   134c4:	00000806 	br	134e8 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   134c8:	e0bffd17 	ldw	r2,-12(fp)
   134cc:	e0fffe17 	ldw	r3,-8(fp)
   134d0:	10c00115 	stw	r3,4(r2)
   134d4:	e0bff817 	ldw	r2,-32(fp)
   134d8:	e0bffc15 	stw	r2,-16(fp)
   134dc:	e0bffc17 	ldw	r2,-16(fp)
   134e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   134e4:	0005883a 	mov	r2,zero
}
   134e8:	e037883a 	mov	sp,fp
   134ec:	dfc00117 	ldw	ra,4(sp)
   134f0:	df000017 	ldw	fp,0(sp)
   134f4:	dec00204 	addi	sp,sp,8
   134f8:	f800283a 	ret

000134fc <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
   134fc:	defff704 	addi	sp,sp,-36
   13500:	df000815 	stw	fp,32(sp)
   13504:	df000804 	addi	fp,sp,32
   13508:	e13ffe15 	stw	r4,-8(fp)
   1350c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13510:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13514:	e0bffe17 	ldw	r2,-8(fp)
   13518:	1000021e 	bne	r2,zero,13524 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1351c:	00800104 	movi	r2,4
   13520:	00003606 	br	135fc <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
   13524:	e0bfff17 	ldw	r2,-4(fp)
   13528:	1000021e 	bne	r2,zero,13534 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1352c:	00800244 	movi	r2,9
   13530:	00003206 	br	135fc <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   13534:	e0bffe17 	ldw	r2,-8(fp)
   13538:	10800003 	ldbu	r2,0(r2)
   1353c:	10803fcc 	andi	r2,r2,255
   13540:	10800060 	cmpeqi	r2,r2,1
   13544:	1000021e 	bne	r2,zero,13550 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   13548:	00800044 	movi	r2,1
   1354c:	00002b06 	br	135fc <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13550:	0005303a 	rdctl	r2,status
   13554:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13558:	e0fffc17 	ldw	r3,-16(fp)
   1355c:	00bfff84 	movi	r2,-2
   13560:	1884703a 	and	r2,r3,r2
   13564:	1001703a 	wrctl	status,r2
  
  return context;
   13568:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1356c:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
   13570:	e0bffe17 	ldw	r2,-8(fp)
   13574:	10c00283 	ldbu	r3,10(r2)
   13578:	e0bfff17 	ldw	r2,-4(fp)
   1357c:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
   13580:	e0bffe17 	ldw	r2,-8(fp)
   13584:	108002c4 	addi	r2,r2,11
   13588:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
   1358c:	e0bfff17 	ldw	r2,-4(fp)
   13590:	10800104 	addi	r2,r2,4
   13594:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13598:	e03ff805 	stb	zero,-32(fp)
   1359c:	00000b06 	br	135cc <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
   135a0:	e0bffa17 	ldw	r2,-24(fp)
   135a4:	10c00044 	addi	r3,r2,1
   135a8:	e0fffa15 	stw	r3,-24(fp)
   135ac:	e0fff917 	ldw	r3,-28(fp)
   135b0:	19000044 	addi	r4,r3,1
   135b4:	e13ff915 	stw	r4,-28(fp)
   135b8:	18c00003 	ldbu	r3,0(r3)
   135bc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   135c0:	e0bff803 	ldbu	r2,-32(fp)
   135c4:	10800044 	addi	r2,r2,1
   135c8:	e0bff805 	stb	r2,-32(fp)
   135cc:	e0bff803 	ldbu	r2,-32(fp)
   135d0:	108000f0 	cmpltui	r2,r2,3
   135d4:	103ff21e 	bne	r2,zero,135a0 <__alt_mem_Flash_flash_data+0xf40135a0>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
   135d8:	e0bffe17 	ldw	r2,-8(fp)
   135dc:	10c00117 	ldw	r3,4(r2)
   135e0:	e0bfff17 	ldw	r2,-4(fp)
   135e4:	10c00015 	stw	r3,0(r2)
   135e8:	e0bffb17 	ldw	r2,-20(fp)
   135ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   135f0:	e0bffd17 	ldw	r2,-12(fp)
   135f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   135f8:	0005883a 	mov	r2,zero
}
   135fc:	e037883a 	mov	sp,fp
   13600:	df000017 	ldw	fp,0(sp)
   13604:	dec00104 	addi	sp,sp,4
   13608:	f800283a 	ret

0001360c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   1360c:	defff404 	addi	sp,sp,-48
   13610:	df000b15 	stw	fp,44(sp)
   13614:	df000b04 	addi	fp,sp,44
   13618:	e13ffc15 	stw	r4,-16(fp)
   1361c:	e17ffd15 	stw	r5,-12(fp)
   13620:	e1bffe15 	stw	r6,-8(fp)
   13624:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13628:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1362c:	e0bfff17 	ldw	r2,-4(fp)
   13630:	1000021e 	bne	r2,zero,1363c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   13634:	0005883a 	mov	r2,zero
   13638:	00006d06 	br	137f0 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   1363c:	e0bffc17 	ldw	r2,-16(fp)
   13640:	1000051e 	bne	r2,zero,13658 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   13644:	e0bfff17 	ldw	r2,-4(fp)
   13648:	00c01884 	movi	r3,98
   1364c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   13650:	0005883a 	mov	r2,zero
   13654:	00006606 	br	137f0 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   13658:	e0bffc17 	ldw	r2,-16(fp)
   1365c:	108000cc 	andi	r2,r2,3
   13660:	10000526 	beq	r2,zero,13678 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   13664:	e0bfff17 	ldw	r2,-4(fp)
   13668:	00c01884 	movi	r3,98
   1366c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   13670:	0005883a 	mov	r2,zero
   13674:	00005e06 	br	137f0 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   13678:	e0bffd17 	ldw	r2,-12(fp)
   1367c:	108000a8 	cmpgeui	r2,r2,2
   13680:	1000051e 	bne	r2,zero,13698 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   13684:	e0bfff17 	ldw	r2,-4(fp)
   13688:	00c016c4 	movi	r3,91
   1368c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   13690:	0005883a 	mov	r2,zero
   13694:	00005606 	br	137f0 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   13698:	e0bffe17 	ldw	r2,-8(fp)
   1369c:	10800128 	cmpgeui	r2,r2,4
   136a0:	1000051e 	bne	r2,zero,136b8 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   136a4:	e0bfff17 	ldw	r2,-4(fp)
   136a8:	00c01704 	movi	r3,92
   136ac:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   136b0:	0005883a 	mov	r2,zero
   136b4:	00004e06 	br	137f0 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   136b8:	0005303a 	rdctl	r2,status
   136bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   136c0:	e0fffa17 	ldw	r3,-24(fp)
   136c4:	00bfff84 	movi	r2,-2
   136c8:	1884703a 	and	r2,r3,r2
   136cc:	1001703a 	wrctl	status,r2
  
  return context;
   136d0:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   136d4:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   136d8:	008000b4 	movhi	r2,2
   136dc:	10bf3704 	addi	r2,r2,-804
   136e0:	10800017 	ldw	r2,0(r2)
   136e4:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   136e8:	008000b4 	movhi	r2,2
   136ec:	10bf3704 	addi	r2,r2,-804
   136f0:	10800017 	ldw	r2,0(r2)
   136f4:	10000726 	beq	r2,zero,13714 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   136f8:	008000b4 	movhi	r2,2
   136fc:	10bf3704 	addi	r2,r2,-804
   13700:	10800017 	ldw	r2,0(r2)
   13704:	10c00117 	ldw	r3,4(r2)
   13708:	008000b4 	movhi	r2,2
   1370c:	10bf3704 	addi	r2,r2,-804
   13710:	10c00015 	stw	r3,0(r2)
   13714:	e0bff817 	ldw	r2,-32(fp)
   13718:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1371c:	e0bffb17 	ldw	r2,-20(fp)
   13720:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   13724:	e0bff917 	ldw	r2,-28(fp)
   13728:	1000051e 	bne	r2,zero,13740 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   1372c:	e0bfff17 	ldw	r2,-4(fp)
   13730:	00c01684 	movi	r3,90
   13734:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   13738:	0005883a 	mov	r2,zero
   1373c:	00002c06 	br	137f0 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   13740:	e0bffc17 	ldw	r2,-16(fp)
   13744:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   13748:	e0fffc17 	ldw	r3,-16(fp)
   1374c:	e0bffe17 	ldw	r2,-8(fp)
   13750:	1885883a 	add	r2,r3,r2
   13754:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   13758:	e03ff715 	stw	zero,-36(fp)
   1375c:	00000c06 	br	13790 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   13760:	e0bff617 	ldw	r2,-40(fp)
   13764:	e0fff517 	ldw	r3,-44(fp)
   13768:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   1376c:	e0bff517 	ldw	r2,-44(fp)
   13770:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   13774:	e0fff517 	ldw	r3,-44(fp)
   13778:	e0bffe17 	ldw	r2,-8(fp)
   1377c:	1885883a 	add	r2,r3,r2
   13780:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   13784:	e0bff717 	ldw	r2,-36(fp)
   13788:	10800044 	addi	r2,r2,1
   1378c:	e0bff715 	stw	r2,-36(fp)
   13790:	e0bffd17 	ldw	r2,-12(fp)
   13794:	10bfffc4 	addi	r2,r2,-1
   13798:	e0fff717 	ldw	r3,-36(fp)
   1379c:	18bff036 	bltu	r3,r2,13760 <__alt_mem_Flash_flash_data+0xf4013760>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   137a0:	e0bff617 	ldw	r2,-40(fp)
   137a4:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   137a8:	e0bff917 	ldw	r2,-28(fp)
   137ac:	e0fffc17 	ldw	r3,-16(fp)
   137b0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   137b4:	e0bff917 	ldw	r2,-28(fp)
   137b8:	e0fffc17 	ldw	r3,-16(fp)
   137bc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   137c0:	e0bff917 	ldw	r2,-28(fp)
   137c4:	e0fffd17 	ldw	r3,-12(fp)
   137c8:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   137cc:	e0bff917 	ldw	r2,-28(fp)
   137d0:	e0fffd17 	ldw	r3,-12(fp)
   137d4:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   137d8:	e0bff917 	ldw	r2,-28(fp)
   137dc:	e0fffe17 	ldw	r3,-8(fp)
   137e0:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   137e4:	e0bfff17 	ldw	r2,-4(fp)
   137e8:	10000005 	stb	zero,0(r2)
    return (pmem);
   137ec:	e0bff917 	ldw	r2,-28(fp)
}
   137f0:	e037883a 	mov	sp,fp
   137f4:	df000017 	ldw	fp,0(sp)
   137f8:	dec00104 	addi	sp,sp,4
   137fc:	f800283a 	ret

00013800 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   13800:	defff804 	addi	sp,sp,-32
   13804:	df000715 	stw	fp,28(sp)
   13808:	df000704 	addi	fp,sp,28
   1380c:	e13ffe15 	stw	r4,-8(fp)
   13810:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13814:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13818:	e0bfff17 	ldw	r2,-4(fp)
   1381c:	1000021e 	bne	r2,zero,13828 <OSMemGet+0x28>
        return ((void *)0);
   13820:	0005883a 	mov	r2,zero
   13824:	00002e06 	br	138e0 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   13828:	e0bffe17 	ldw	r2,-8(fp)
   1382c:	1000051e 	bne	r2,zero,13844 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   13830:	e0bfff17 	ldw	r2,-4(fp)
   13834:	00c01804 	movi	r3,96
   13838:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1383c:	0005883a 	mov	r2,zero
   13840:	00002706 	br	138e0 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13844:	0005303a 	rdctl	r2,status
   13848:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1384c:	e0fffb17 	ldw	r3,-20(fp)
   13850:	00bfff84 	movi	r2,-2
   13854:	1884703a 	and	r2,r3,r2
   13858:	1001703a 	wrctl	status,r2
  
  return context;
   1385c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13860:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   13864:	e0bffe17 	ldw	r2,-8(fp)
   13868:	10800417 	ldw	r2,16(r2)
   1386c:	10001426 	beq	r2,zero,138c0 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   13870:	e0bffe17 	ldw	r2,-8(fp)
   13874:	10800117 	ldw	r2,4(r2)
   13878:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   1387c:	e0bffa17 	ldw	r2,-24(fp)
   13880:	10c00017 	ldw	r3,0(r2)
   13884:	e0bffe17 	ldw	r2,-8(fp)
   13888:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   1388c:	e0bffe17 	ldw	r2,-8(fp)
   13890:	10800417 	ldw	r2,16(r2)
   13894:	10ffffc4 	addi	r3,r2,-1
   13898:	e0bffe17 	ldw	r2,-8(fp)
   1389c:	10c00415 	stw	r3,16(r2)
   138a0:	e0bff917 	ldw	r2,-28(fp)
   138a4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   138a8:	e0bffc17 	ldw	r2,-16(fp)
   138ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   138b0:	e0bfff17 	ldw	r2,-4(fp)
   138b4:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   138b8:	e0bffa17 	ldw	r2,-24(fp)
   138bc:	00000806 	br	138e0 <OSMemGet+0xe0>
   138c0:	e0bff917 	ldw	r2,-28(fp)
   138c4:	e0bffd15 	stw	r2,-12(fp)
   138c8:	e0bffd17 	ldw	r2,-12(fp)
   138cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   138d0:	e0bfff17 	ldw	r2,-4(fp)
   138d4:	00c01744 	movi	r3,93
   138d8:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   138dc:	0005883a 	mov	r2,zero
}
   138e0:	e037883a 	mov	sp,fp
   138e4:	df000017 	ldw	fp,0(sp)
   138e8:	dec00104 	addi	sp,sp,4
   138ec:	f800283a 	ret

000138f0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   138f0:	defff704 	addi	sp,sp,-36
   138f4:	dfc00815 	stw	ra,32(sp)
   138f8:	df000715 	stw	fp,28(sp)
   138fc:	df000704 	addi	fp,sp,28
   13900:	e13ffd15 	stw	r4,-12(fp)
   13904:	e17ffe15 	stw	r5,-8(fp)
   13908:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1390c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13910:	e0bfff17 	ldw	r2,-4(fp)
   13914:	1000021e 	bne	r2,zero,13920 <OSMemNameGet+0x30>
        return (0);
   13918:	0005883a 	mov	r2,zero
   1391c:	00002d06 	br	139d4 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   13920:	e0bffd17 	ldw	r2,-12(fp)
   13924:	1000051e 	bne	r2,zero,1393c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   13928:	e0bfff17 	ldw	r2,-4(fp)
   1392c:	00c01804 	movi	r3,96
   13930:	10c00005 	stb	r3,0(r2)
        return (0);
   13934:	0005883a 	mov	r2,zero
   13938:	00002606 	br	139d4 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1393c:	e0bffe17 	ldw	r2,-8(fp)
   13940:	1000051e 	bne	r2,zero,13958 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   13944:	e0bfff17 	ldw	r2,-4(fp)
   13948:	00c00304 	movi	r3,12
   1394c:	10c00005 	stb	r3,0(r2)
        return (0);
   13950:	0005883a 	mov	r2,zero
   13954:	00001f06 	br	139d4 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13958:	008000b4 	movhi	r2,2
   1395c:	10bf3c04 	addi	r2,r2,-784
   13960:	10800003 	ldbu	r2,0(r2)
   13964:	10803fcc 	andi	r2,r2,255
   13968:	10000526 	beq	r2,zero,13980 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   1396c:	e0bfff17 	ldw	r2,-4(fp)
   13970:	00c00444 	movi	r3,17
   13974:	10c00005 	stb	r3,0(r2)
        return (0);
   13978:	0005883a 	mov	r2,zero
   1397c:	00001506 	br	139d4 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13980:	0005303a 	rdctl	r2,status
   13984:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13988:	e0fffb17 	ldw	r3,-20(fp)
   1398c:	00bfff84 	movi	r2,-2
   13990:	1884703a 	and	r2,r3,r2
   13994:	1001703a 	wrctl	status,r2
  
  return context;
   13998:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1399c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   139a0:	e0bffd17 	ldw	r2,-12(fp)
   139a4:	10800504 	addi	r2,r2,20
   139a8:	e13ffe17 	ldw	r4,-8(fp)
   139ac:	100b883a 	mov	r5,r2
   139b0:	0010b400 	call	10b40 <OS_StrCopy>
   139b4:	e0bffa05 	stb	r2,-24(fp)
   139b8:	e0bff917 	ldw	r2,-28(fp)
   139bc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   139c0:	e0bffc17 	ldw	r2,-16(fp)
   139c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   139c8:	e0bfff17 	ldw	r2,-4(fp)
   139cc:	10000005 	stb	zero,0(r2)
    return (len);
   139d0:	e0bffa03 	ldbu	r2,-24(fp)
}
   139d4:	e037883a 	mov	sp,fp
   139d8:	dfc00117 	ldw	ra,4(sp)
   139dc:	df000017 	ldw	fp,0(sp)
   139e0:	dec00204 	addi	sp,sp,8
   139e4:	f800283a 	ret

000139e8 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   139e8:	defff604 	addi	sp,sp,-40
   139ec:	dfc00915 	stw	ra,36(sp)
   139f0:	df000815 	stw	fp,32(sp)
   139f4:	df000804 	addi	fp,sp,32
   139f8:	e13ffd15 	stw	r4,-12(fp)
   139fc:	e17ffe15 	stw	r5,-8(fp)
   13a00:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13a04:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13a08:	e0bfff17 	ldw	r2,-4(fp)
   13a0c:	1000011e 	bne	r2,zero,13a14 <OSMemNameSet+0x2c>
        return;
   13a10:	00003606 	br	13aec <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   13a14:	e0bffd17 	ldw	r2,-12(fp)
   13a18:	1000041e 	bne	r2,zero,13a2c <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   13a1c:	e0bfff17 	ldw	r2,-4(fp)
   13a20:	00c01804 	movi	r3,96
   13a24:	10c00005 	stb	r3,0(r2)
        return;
   13a28:	00003006 	br	13aec <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13a2c:	e0bffe17 	ldw	r2,-8(fp)
   13a30:	1000041e 	bne	r2,zero,13a44 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   13a34:	e0bfff17 	ldw	r2,-4(fp)
   13a38:	00c00304 	movi	r3,12
   13a3c:	10c00005 	stb	r3,0(r2)
        return;
   13a40:	00002a06 	br	13aec <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13a44:	008000b4 	movhi	r2,2
   13a48:	10bf3c04 	addi	r2,r2,-784
   13a4c:	10800003 	ldbu	r2,0(r2)
   13a50:	10803fcc 	andi	r2,r2,255
   13a54:	10000426 	beq	r2,zero,13a68 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   13a58:	e0bfff17 	ldw	r2,-4(fp)
   13a5c:	00c00484 	movi	r3,18
   13a60:	10c00005 	stb	r3,0(r2)
        return;
   13a64:	00002106 	br	13aec <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a68:	0005303a 	rdctl	r2,status
   13a6c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a70:	e0fffa17 	ldw	r3,-24(fp)
   13a74:	00bfff84 	movi	r2,-2
   13a78:	1884703a 	and	r2,r3,r2
   13a7c:	1001703a 	wrctl	status,r2
  
  return context;
   13a80:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   13a84:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   13a88:	e13ffe17 	ldw	r4,-8(fp)
   13a8c:	0010bb40 	call	10bb4 <OS_StrLen>
   13a90:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   13a94:	e0bff903 	ldbu	r2,-28(fp)
   13a98:	10800830 	cmpltui	r2,r2,32
   13a9c:	1000081e 	bne	r2,zero,13ac0 <OSMemNameSet+0xd8>
   13aa0:	e0bff817 	ldw	r2,-32(fp)
   13aa4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13aa8:	e0bffb17 	ldw	r2,-20(fp)
   13aac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   13ab0:	e0bfff17 	ldw	r2,-4(fp)
   13ab4:	00c018c4 	movi	r3,99
   13ab8:	10c00005 	stb	r3,0(r2)
        return;
   13abc:	00000b06 	br	13aec <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   13ac0:	e0bffd17 	ldw	r2,-12(fp)
   13ac4:	10800504 	addi	r2,r2,20
   13ac8:	1009883a 	mov	r4,r2
   13acc:	e17ffe17 	ldw	r5,-8(fp)
   13ad0:	0010b400 	call	10b40 <OS_StrCopy>
   13ad4:	e0bff817 	ldw	r2,-32(fp)
   13ad8:	e0bffc15 	stw	r2,-16(fp)
   13adc:	e0bffc17 	ldw	r2,-16(fp)
   13ae0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13ae4:	e0bfff17 	ldw	r2,-4(fp)
   13ae8:	10000005 	stb	zero,0(r2)
}
   13aec:	e037883a 	mov	sp,fp
   13af0:	dfc00117 	ldw	ra,4(sp)
   13af4:	df000017 	ldw	fp,0(sp)
   13af8:	dec00204 	addi	sp,sp,8
   13afc:	f800283a 	ret

00013b00 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   13b00:	defff904 	addi	sp,sp,-28
   13b04:	df000615 	stw	fp,24(sp)
   13b08:	df000604 	addi	fp,sp,24
   13b0c:	e13ffe15 	stw	r4,-8(fp)
   13b10:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13b14:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   13b18:	e0bffe17 	ldw	r2,-8(fp)
   13b1c:	1000021e 	bne	r2,zero,13b28 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   13b20:	00801804 	movi	r2,96
   13b24:	00002806 	br	13bc8 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   13b28:	e0bfff17 	ldw	r2,-4(fp)
   13b2c:	1000021e 	bne	r2,zero,13b38 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   13b30:	008017c4 	movi	r2,95
   13b34:	00002406 	br	13bc8 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b38:	0005303a 	rdctl	r2,status
   13b3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b40:	e0fffb17 	ldw	r3,-20(fp)
   13b44:	00bfff84 	movi	r2,-2
   13b48:	1884703a 	and	r2,r3,r2
   13b4c:	1001703a 	wrctl	status,r2
  
  return context;
   13b50:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13b54:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   13b58:	e0bffe17 	ldw	r2,-8(fp)
   13b5c:	10c00417 	ldw	r3,16(r2)
   13b60:	e0bffe17 	ldw	r2,-8(fp)
   13b64:	10800317 	ldw	r2,12(r2)
   13b68:	18800636 	bltu	r3,r2,13b84 <OSMemPut+0x84>
   13b6c:	e0bffa17 	ldw	r2,-24(fp)
   13b70:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b74:	e0bffc17 	ldw	r2,-16(fp)
   13b78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   13b7c:	00801784 	movi	r2,94
   13b80:	00001106 	br	13bc8 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   13b84:	e0bffe17 	ldw	r2,-8(fp)
   13b88:	10c00117 	ldw	r3,4(r2)
   13b8c:	e0bfff17 	ldw	r2,-4(fp)
   13b90:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   13b94:	e0bffe17 	ldw	r2,-8(fp)
   13b98:	e0ffff17 	ldw	r3,-4(fp)
   13b9c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   13ba0:	e0bffe17 	ldw	r2,-8(fp)
   13ba4:	10800417 	ldw	r2,16(r2)
   13ba8:	10c00044 	addi	r3,r2,1
   13bac:	e0bffe17 	ldw	r2,-8(fp)
   13bb0:	10c00415 	stw	r3,16(r2)
   13bb4:	e0bffa17 	ldw	r2,-24(fp)
   13bb8:	e0bffd15 	stw	r2,-12(fp)
   13bbc:	e0bffd17 	ldw	r2,-12(fp)
   13bc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   13bc4:	0005883a 	mov	r2,zero
}
   13bc8:	e037883a 	mov	sp,fp
   13bcc:	df000017 	ldw	fp,0(sp)
   13bd0:	dec00104 	addi	sp,sp,4
   13bd4:	f800283a 	ret

00013bd8 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   13bd8:	defffa04 	addi	sp,sp,-24
   13bdc:	df000515 	stw	fp,20(sp)
   13be0:	df000504 	addi	fp,sp,20
   13be4:	e13ffe15 	stw	r4,-8(fp)
   13be8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13bec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   13bf0:	e0bffe17 	ldw	r2,-8(fp)
   13bf4:	1000021e 	bne	r2,zero,13c00 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   13bf8:	00801804 	movi	r2,96
   13bfc:	00002c06 	br	13cb0 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   13c00:	e0bfff17 	ldw	r2,-4(fp)
   13c04:	1000021e 	bne	r2,zero,13c10 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   13c08:	00801844 	movi	r2,97
   13c0c:	00002806 	br	13cb0 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c10:	0005303a 	rdctl	r2,status
   13c14:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c18:	e0fffc17 	ldw	r3,-16(fp)
   13c1c:	00bfff84 	movi	r2,-2
   13c20:	1884703a 	and	r2,r3,r2
   13c24:	1001703a 	wrctl	status,r2
  
  return context;
   13c28:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13c2c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   13c30:	e0bffe17 	ldw	r2,-8(fp)
   13c34:	10c00017 	ldw	r3,0(r2)
   13c38:	e0bfff17 	ldw	r2,-4(fp)
   13c3c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   13c40:	e0bffe17 	ldw	r2,-8(fp)
   13c44:	10c00117 	ldw	r3,4(r2)
   13c48:	e0bfff17 	ldw	r2,-4(fp)
   13c4c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   13c50:	e0bffe17 	ldw	r2,-8(fp)
   13c54:	10c00217 	ldw	r3,8(r2)
   13c58:	e0bfff17 	ldw	r2,-4(fp)
   13c5c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   13c60:	e0bffe17 	ldw	r2,-8(fp)
   13c64:	10c00317 	ldw	r3,12(r2)
   13c68:	e0bfff17 	ldw	r2,-4(fp)
   13c6c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   13c70:	e0bffe17 	ldw	r2,-8(fp)
   13c74:	10c00417 	ldw	r3,16(r2)
   13c78:	e0bfff17 	ldw	r2,-4(fp)
   13c7c:	10c00415 	stw	r3,16(r2)
   13c80:	e0bffb17 	ldw	r2,-20(fp)
   13c84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c88:	e0bffd17 	ldw	r2,-12(fp)
   13c8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   13c90:	e0bfff17 	ldw	r2,-4(fp)
   13c94:	10c00317 	ldw	r3,12(r2)
   13c98:	e0bfff17 	ldw	r2,-4(fp)
   13c9c:	10800417 	ldw	r2,16(r2)
   13ca0:	1887c83a 	sub	r3,r3,r2
   13ca4:	e0bfff17 	ldw	r2,-4(fp)
   13ca8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   13cac:	0005883a 	mov	r2,zero
}
   13cb0:	e037883a 	mov	sp,fp
   13cb4:	df000017 	ldw	fp,0(sp)
   13cb8:	dec00104 	addi	sp,sp,4
   13cbc:	f800283a 	ret

00013cc0 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   13cc0:	defffc04 	addi	sp,sp,-16
   13cc4:	dfc00315 	stw	ra,12(sp)
   13cc8:	df000215 	stw	fp,8(sp)
   13ccc:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   13cd0:	010000f4 	movhi	r4,3
   13cd4:	212a2004 	addi	r4,r4,-22400
   13cd8:	01430c04 	movi	r5,3120
   13cdc:	00109500 	call	10950 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   13ce0:	008000f4 	movhi	r2,3
   13ce4:	10aa2004 	addi	r2,r2,-22400
   13ce8:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   13cec:	e03fff0d 	sth	zero,-4(fp)
   13cf0:	00001306 	br	13d40 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   13cf4:	e0bfff0b 	ldhu	r2,-4(fp)
   13cf8:	10800044 	addi	r2,r2,1
   13cfc:	10c00d24 	muli	r3,r2,52
   13d00:	008000f4 	movhi	r2,3
   13d04:	10aa2004 	addi	r2,r2,-22400
   13d08:	1887883a 	add	r3,r3,r2
   13d0c:	e0bffe17 	ldw	r2,-8(fp)
   13d10:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   13d14:	e0bffe17 	ldw	r2,-8(fp)
   13d18:	00c00fc4 	movi	r3,63
   13d1c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   13d20:	e0bffe17 	ldw	r2,-8(fp)
   13d24:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   13d28:	e0bffe17 	ldw	r2,-8(fp)
   13d2c:	10800d04 	addi	r2,r2,52
   13d30:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   13d34:	e0bfff0b 	ldhu	r2,-4(fp)
   13d38:	10800044 	addi	r2,r2,1
   13d3c:	e0bfff0d 	sth	r2,-4(fp)
   13d40:	e0bfff0b 	ldhu	r2,-4(fp)
   13d44:	10800ef0 	cmpltui	r2,r2,59
   13d48:	103fea1e 	bne	r2,zero,13cf4 <__alt_mem_Flash_flash_data+0xf4013cf4>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   13d4c:	e0bffe17 	ldw	r2,-8(fp)
   13d50:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   13d54:	e0bffe17 	ldw	r2,-8(fp)
   13d58:	00c00fc4 	movi	r3,63
   13d5c:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   13d60:	e0bffe17 	ldw	r2,-8(fp)
   13d64:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   13d68:	008000b4 	movhi	r2,2
   13d6c:	10bf3704 	addi	r2,r2,-804
   13d70:	00c000f4 	movhi	r3,3
   13d74:	18ea2004 	addi	r3,r3,-22400
   13d78:	10c00015 	stw	r3,0(r2)
#endif
}
   13d7c:	e037883a 	mov	sp,fp
   13d80:	dfc00117 	ldw	ra,4(sp)
   13d84:	df000017 	ldw	fp,0(sp)
   13d88:	dec00204 	addi	sp,sp,8
   13d8c:	f800283a 	ret

00013d90 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   13d90:	defff804 	addi	sp,sp,-32
   13d94:	df000715 	stw	fp,28(sp)
   13d98:	df000704 	addi	fp,sp,28
   13d9c:	e13ffe15 	stw	r4,-8(fp)
   13da0:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13da4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13da8:	e0bfff17 	ldw	r2,-4(fp)
   13dac:	1000021e 	bne	r2,zero,13db8 <OSQAccept+0x28>
        return ((void *)0);
   13db0:	0005883a 	mov	r2,zero
   13db4:	00004206 	br	13ec0 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   13db8:	e0bffe17 	ldw	r2,-8(fp)
   13dbc:	1000051e 	bne	r2,zero,13dd4 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   13dc0:	e0bfff17 	ldw	r2,-4(fp)
   13dc4:	00c00104 	movi	r3,4
   13dc8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13dcc:	0005883a 	mov	r2,zero
   13dd0:	00003b06 	br	13ec0 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   13dd4:	e0bffe17 	ldw	r2,-8(fp)
   13dd8:	10800003 	ldbu	r2,0(r2)
   13ddc:	10803fcc 	andi	r2,r2,255
   13de0:	108000a0 	cmpeqi	r2,r2,2
   13de4:	1000051e 	bne	r2,zero,13dfc <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   13de8:	e0bfff17 	ldw	r2,-4(fp)
   13dec:	00c00044 	movi	r3,1
   13df0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13df4:	0005883a 	mov	r2,zero
   13df8:	00003106 	br	13ec0 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13dfc:	0005303a 	rdctl	r2,status
   13e00:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e04:	e0fffc17 	ldw	r3,-16(fp)
   13e08:	00bfff84 	movi	r2,-2
   13e0c:	1884703a 	and	r2,r3,r2
   13e10:	1001703a 	wrctl	status,r2
  
  return context;
   13e14:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13e18:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   13e1c:	e0bffe17 	ldw	r2,-8(fp)
   13e20:	10800117 	ldw	r2,4(r2)
   13e24:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   13e28:	e0bffb17 	ldw	r2,-20(fp)
   13e2c:	1080058b 	ldhu	r2,22(r2)
   13e30:	10bfffcc 	andi	r2,r2,65535
   13e34:	10001926 	beq	r2,zero,13e9c <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   13e38:	e0bffb17 	ldw	r2,-20(fp)
   13e3c:	10800417 	ldw	r2,16(r2)
   13e40:	11000104 	addi	r4,r2,4
   13e44:	e0fffb17 	ldw	r3,-20(fp)
   13e48:	19000415 	stw	r4,16(r3)
   13e4c:	10800017 	ldw	r2,0(r2)
   13e50:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   13e54:	e0bffb17 	ldw	r2,-20(fp)
   13e58:	1080058b 	ldhu	r2,22(r2)
   13e5c:	10bfffc4 	addi	r2,r2,-1
   13e60:	1007883a 	mov	r3,r2
   13e64:	e0bffb17 	ldw	r2,-20(fp)
   13e68:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   13e6c:	e0bffb17 	ldw	r2,-20(fp)
   13e70:	10c00417 	ldw	r3,16(r2)
   13e74:	e0bffb17 	ldw	r2,-20(fp)
   13e78:	10800217 	ldw	r2,8(r2)
   13e7c:	1880041e 	bne	r3,r2,13e90 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   13e80:	e0bffb17 	ldw	r2,-20(fp)
   13e84:	10c00117 	ldw	r3,4(r2)
   13e88:	e0bffb17 	ldw	r2,-20(fp)
   13e8c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   13e90:	e0bfff17 	ldw	r2,-4(fp)
   13e94:	10000005 	stb	zero,0(r2)
   13e98:	00000406 	br	13eac <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   13e9c:	e0bfff17 	ldw	r2,-4(fp)
   13ea0:	00c007c4 	movi	r3,31
   13ea4:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   13ea8:	e03ff915 	stw	zero,-28(fp)
   13eac:	e0bffa17 	ldw	r2,-24(fp)
   13eb0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13eb4:	e0bffd17 	ldw	r2,-12(fp)
   13eb8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   13ebc:	e0bff917 	ldw	r2,-28(fp)
}
   13ec0:	e037883a 	mov	sp,fp
   13ec4:	df000017 	ldw	fp,0(sp)
   13ec8:	dec00104 	addi	sp,sp,4
   13ecc:	f800283a 	ret

00013ed0 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   13ed0:	defff404 	addi	sp,sp,-48
   13ed4:	dfc00b15 	stw	ra,44(sp)
   13ed8:	df000a15 	stw	fp,40(sp)
   13edc:	df000a04 	addi	fp,sp,40
   13ee0:	e13ffe15 	stw	r4,-8(fp)
   13ee4:	2805883a 	mov	r2,r5
   13ee8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13eec:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   13ef0:	008000b4 	movhi	r2,2
   13ef4:	10bf3c04 	addi	r2,r2,-784
   13ef8:	10800003 	ldbu	r2,0(r2)
   13efc:	10803fcc 	andi	r2,r2,255
   13f00:	10000226 	beq	r2,zero,13f0c <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   13f04:	0005883a 	mov	r2,zero
   13f08:	00006b06 	br	140b8 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f0c:	0005303a 	rdctl	r2,status
   13f10:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f14:	e0fff917 	ldw	r3,-28(fp)
   13f18:	00bfff84 	movi	r2,-2
   13f1c:	1884703a 	and	r2,r3,r2
   13f20:	1001703a 	wrctl	status,r2
  
  return context;
   13f24:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   13f28:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   13f2c:	008000b4 	movhi	r2,2
   13f30:	10bf3b04 	addi	r2,r2,-788
   13f34:	10800017 	ldw	r2,0(r2)
   13f38:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   13f3c:	008000b4 	movhi	r2,2
   13f40:	10bf3b04 	addi	r2,r2,-788
   13f44:	10800017 	ldw	r2,0(r2)
   13f48:	10000726 	beq	r2,zero,13f68 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   13f4c:	008000b4 	movhi	r2,2
   13f50:	10bf3b04 	addi	r2,r2,-788
   13f54:	10800017 	ldw	r2,0(r2)
   13f58:	10c00117 	ldw	r3,4(r2)
   13f5c:	008000b4 	movhi	r2,2
   13f60:	10bf3b04 	addi	r2,r2,-788
   13f64:	10c00015 	stw	r3,0(r2)
   13f68:	e0bff717 	ldw	r2,-36(fp)
   13f6c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f70:	e0bffa17 	ldw	r2,-24(fp)
   13f74:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   13f78:	e0bff617 	ldw	r2,-40(fp)
   13f7c:	10004d26 	beq	r2,zero,140b4 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f80:	0005303a 	rdctl	r2,status
   13f84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f88:	e0fffb17 	ldw	r3,-20(fp)
   13f8c:	00bfff84 	movi	r2,-2
   13f90:	1884703a 	and	r2,r3,r2
   13f94:	1001703a 	wrctl	status,r2
  
  return context;
   13f98:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   13f9c:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   13fa0:	008000b4 	movhi	r2,2
   13fa4:	10bf3904 	addi	r2,r2,-796
   13fa8:	10800017 	ldw	r2,0(r2)
   13fac:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   13fb0:	e0bff817 	ldw	r2,-32(fp)
   13fb4:	10003126 	beq	r2,zero,1407c <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   13fb8:	008000b4 	movhi	r2,2
   13fbc:	10bf3904 	addi	r2,r2,-796
   13fc0:	10800017 	ldw	r2,0(r2)
   13fc4:	10c00017 	ldw	r3,0(r2)
   13fc8:	008000b4 	movhi	r2,2
   13fcc:	10bf3904 	addi	r2,r2,-796
   13fd0:	10c00015 	stw	r3,0(r2)
   13fd4:	e0bff717 	ldw	r2,-36(fp)
   13fd8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13fdc:	e0bffc17 	ldw	r2,-16(fp)
   13fe0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   13fe4:	e0bff817 	ldw	r2,-32(fp)
   13fe8:	e0fffe17 	ldw	r3,-8(fp)
   13fec:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   13ff0:	e0bfff0b 	ldhu	r2,-4(fp)
   13ff4:	1085883a 	add	r2,r2,r2
   13ff8:	1085883a 	add	r2,r2,r2
   13ffc:	1007883a 	mov	r3,r2
   14000:	e0bffe17 	ldw	r2,-8(fp)
   14004:	10c7883a 	add	r3,r2,r3
   14008:	e0bff817 	ldw	r2,-32(fp)
   1400c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   14010:	e0bff817 	ldw	r2,-32(fp)
   14014:	e0fffe17 	ldw	r3,-8(fp)
   14018:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   1401c:	e0bff817 	ldw	r2,-32(fp)
   14020:	e0fffe17 	ldw	r3,-8(fp)
   14024:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   14028:	e0bff817 	ldw	r2,-32(fp)
   1402c:	e0ffff0b 	ldhu	r3,-4(fp)
   14030:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   14034:	e0bff817 	ldw	r2,-32(fp)
   14038:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   1403c:	e0bff617 	ldw	r2,-40(fp)
   14040:	00c00084 	movi	r3,2
   14044:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   14048:	e0bff617 	ldw	r2,-40(fp)
   1404c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   14050:	e0bff617 	ldw	r2,-40(fp)
   14054:	e0fff817 	ldw	r3,-32(fp)
   14058:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   1405c:	e0bff617 	ldw	r2,-40(fp)
   14060:	00c00fc4 	movi	r3,63
   14064:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   14068:	e0bff617 	ldw	r2,-40(fp)
   1406c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   14070:	e13ff617 	ldw	r4,-40(fp)
   14074:	001058c0 	call	1058c <OS_EventWaitListInit>
   14078:	00000e06 	br	140b4 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   1407c:	008000b4 	movhi	r2,2
   14080:	10bf3b04 	addi	r2,r2,-788
   14084:	10c00017 	ldw	r3,0(r2)
   14088:	e0bff617 	ldw	r2,-40(fp)
   1408c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   14090:	008000b4 	movhi	r2,2
   14094:	10bf3b04 	addi	r2,r2,-788
   14098:	e0fff617 	ldw	r3,-40(fp)
   1409c:	10c00015 	stw	r3,0(r2)
   140a0:	e0bff717 	ldw	r2,-36(fp)
   140a4:	e0bffd15 	stw	r2,-12(fp)
   140a8:	e0bffd17 	ldw	r2,-12(fp)
   140ac:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   140b0:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   140b4:	e0bff617 	ldw	r2,-40(fp)
}
   140b8:	e037883a 	mov	sp,fp
   140bc:	dfc00117 	ldw	ra,4(sp)
   140c0:	df000017 	ldw	fp,0(sp)
   140c4:	dec00204 	addi	sp,sp,8
   140c8:	f800283a 	ret

000140cc <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   140cc:	defff204 	addi	sp,sp,-56
   140d0:	dfc00d15 	stw	ra,52(sp)
   140d4:	df000c15 	stw	fp,48(sp)
   140d8:	df000c04 	addi	fp,sp,48
   140dc:	e13ffd15 	stw	r4,-12(fp)
   140e0:	2805883a 	mov	r2,r5
   140e4:	e1bfff15 	stw	r6,-4(fp)
   140e8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   140ec:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   140f0:	e0bfff17 	ldw	r2,-4(fp)
   140f4:	1000021e 	bne	r2,zero,14100 <OSQDel+0x34>
        return (pevent);
   140f8:	e0bffd17 	ldw	r2,-12(fp)
   140fc:	0000a006 	br	14380 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   14100:	e0bffd17 	ldw	r2,-12(fp)
   14104:	1000051e 	bne	r2,zero,1411c <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   14108:	e0bfff17 	ldw	r2,-4(fp)
   1410c:	00c00104 	movi	r3,4
   14110:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14114:	e0bffd17 	ldw	r2,-12(fp)
   14118:	00009906 	br	14380 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   1411c:	e0bffd17 	ldw	r2,-12(fp)
   14120:	10800003 	ldbu	r2,0(r2)
   14124:	10803fcc 	andi	r2,r2,255
   14128:	108000a0 	cmpeqi	r2,r2,2
   1412c:	1000051e 	bne	r2,zero,14144 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   14130:	e0bfff17 	ldw	r2,-4(fp)
   14134:	00c00044 	movi	r3,1
   14138:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1413c:	e0bffd17 	ldw	r2,-12(fp)
   14140:	00008f06 	br	14380 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   14144:	008000b4 	movhi	r2,2
   14148:	10bf3c04 	addi	r2,r2,-784
   1414c:	10800003 	ldbu	r2,0(r2)
   14150:	10803fcc 	andi	r2,r2,255
   14154:	10000526 	beq	r2,zero,1416c <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   14158:	e0bfff17 	ldw	r2,-4(fp)
   1415c:	00c003c4 	movi	r3,15
   14160:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14164:	e0bffd17 	ldw	r2,-12(fp)
   14168:	00008506 	br	14380 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1416c:	0005303a 	rdctl	r2,status
   14170:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14174:	e0fff817 	ldw	r3,-32(fp)
   14178:	00bfff84 	movi	r2,-2
   1417c:	1884703a 	and	r2,r3,r2
   14180:	1001703a 	wrctl	status,r2
  
  return context;
   14184:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   14188:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   1418c:	e0bffd17 	ldw	r2,-12(fp)
   14190:	10800283 	ldbu	r2,10(r2)
   14194:	10803fcc 	andi	r2,r2,255
   14198:	10000326 	beq	r2,zero,141a8 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1419c:	00800044 	movi	r2,1
   141a0:	e0bff405 	stb	r2,-48(fp)
   141a4:	00000106 	br	141ac <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   141a8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   141ac:	e0bffe03 	ldbu	r2,-8(fp)
   141b0:	10000326 	beq	r2,zero,141c0 <OSQDel+0xf4>
   141b4:	10800060 	cmpeqi	r2,r2,1
   141b8:	1000381e 	bne	r2,zero,1429c <OSQDel+0x1d0>
   141bc:	00006506 	br	14354 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   141c0:	e0bff403 	ldbu	r2,-48(fp)
   141c4:	1000261e 	bne	r2,zero,14260 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   141c8:	e0bffd17 	ldw	r2,-12(fp)
   141cc:	00c00fc4 	movi	r3,63
   141d0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   141d4:	e0bffd17 	ldw	r2,-12(fp)
   141d8:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   141dc:	e0bffd17 	ldw	r2,-12(fp)
   141e0:	10800117 	ldw	r2,4(r2)
   141e4:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   141e8:	008000b4 	movhi	r2,2
   141ec:	10bf3904 	addi	r2,r2,-796
   141f0:	10c00017 	ldw	r3,0(r2)
   141f4:	e0bff717 	ldw	r2,-36(fp)
   141f8:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   141fc:	008000b4 	movhi	r2,2
   14200:	10bf3904 	addi	r2,r2,-796
   14204:	e0fff717 	ldw	r3,-36(fp)
   14208:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1420c:	e0bffd17 	ldw	r2,-12(fp)
   14210:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   14214:	008000b4 	movhi	r2,2
   14218:	10bf3b04 	addi	r2,r2,-788
   1421c:	10c00017 	ldw	r3,0(r2)
   14220:	e0bffd17 	ldw	r2,-12(fp)
   14224:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   14228:	e0bffd17 	ldw	r2,-12(fp)
   1422c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   14230:	008000b4 	movhi	r2,2
   14234:	10bf3b04 	addi	r2,r2,-788
   14238:	e0fffd17 	ldw	r3,-12(fp)
   1423c:	10c00015 	stw	r3,0(r2)
   14240:	e0bff617 	ldw	r2,-40(fp)
   14244:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14248:	e0bff917 	ldw	r2,-28(fp)
   1424c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   14250:	e0bfff17 	ldw	r2,-4(fp)
   14254:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   14258:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1425c:	00004706 	br	1437c <OSQDel+0x2b0>
   14260:	e0bff617 	ldw	r2,-40(fp)
   14264:	e0bffa15 	stw	r2,-24(fp)
   14268:	e0bffa17 	ldw	r2,-24(fp)
   1426c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   14270:	e0bfff17 	ldw	r2,-4(fp)
   14274:	00c01244 	movi	r3,73
   14278:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1427c:	e0bffd17 	ldw	r2,-12(fp)
   14280:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   14284:	00003d06 	br	1437c <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   14288:	e13ffd17 	ldw	r4,-12(fp)
   1428c:	000b883a 	mov	r5,zero
   14290:	01800104 	movi	r6,4
   14294:	000f883a 	mov	r7,zero
   14298:	000ffec0 	call	ffec <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   1429c:	e0bffd17 	ldw	r2,-12(fp)
   142a0:	10800283 	ldbu	r2,10(r2)
   142a4:	10803fcc 	andi	r2,r2,255
   142a8:	103ff71e 	bne	r2,zero,14288 <__alt_mem_Flash_flash_data+0xf4014288>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   142ac:	e0bffd17 	ldw	r2,-12(fp)
   142b0:	00c00fc4 	movi	r3,63
   142b4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   142b8:	e0bffd17 	ldw	r2,-12(fp)
   142bc:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   142c0:	e0bffd17 	ldw	r2,-12(fp)
   142c4:	10800117 	ldw	r2,4(r2)
   142c8:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   142cc:	008000b4 	movhi	r2,2
   142d0:	10bf3904 	addi	r2,r2,-796
   142d4:	10c00017 	ldw	r3,0(r2)
   142d8:	e0bff717 	ldw	r2,-36(fp)
   142dc:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   142e0:	008000b4 	movhi	r2,2
   142e4:	10bf3904 	addi	r2,r2,-796
   142e8:	e0fff717 	ldw	r3,-36(fp)
   142ec:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   142f0:	e0bffd17 	ldw	r2,-12(fp)
   142f4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   142f8:	008000b4 	movhi	r2,2
   142fc:	10bf3b04 	addi	r2,r2,-788
   14300:	10c00017 	ldw	r3,0(r2)
   14304:	e0bffd17 	ldw	r2,-12(fp)
   14308:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1430c:	e0bffd17 	ldw	r2,-12(fp)
   14310:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   14314:	008000b4 	movhi	r2,2
   14318:	10bf3b04 	addi	r2,r2,-788
   1431c:	e0fffd17 	ldw	r3,-12(fp)
   14320:	10c00015 	stw	r3,0(r2)
   14324:	e0bff617 	ldw	r2,-40(fp)
   14328:	e0bffb15 	stw	r2,-20(fp)
   1432c:	e0bffb17 	ldw	r2,-20(fp)
   14330:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   14334:	e0bff403 	ldbu	r2,-48(fp)
   14338:	10800058 	cmpnei	r2,r2,1
   1433c:	1000011e 	bne	r2,zero,14344 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   14340:	0010a040 	call	10a04 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   14344:	e0bfff17 	ldw	r2,-4(fp)
   14348:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   1434c:	e03ff515 	stw	zero,-44(fp)
             break;
   14350:	00000a06 	br	1437c <OSQDel+0x2b0>
   14354:	e0bff617 	ldw	r2,-40(fp)
   14358:	e0bffc15 	stw	r2,-16(fp)
   1435c:	e0bffc17 	ldw	r2,-16(fp)
   14360:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   14364:	e0bfff17 	ldw	r2,-4(fp)
   14368:	00c001c4 	movi	r3,7
   1436c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   14370:	e0bffd17 	ldw	r2,-12(fp)
   14374:	e0bff515 	stw	r2,-44(fp)
             break;
   14378:	0001883a 	nop
    }
    return (pevent_return);
   1437c:	e0bff517 	ldw	r2,-44(fp)
}
   14380:	e037883a 	mov	sp,fp
   14384:	dfc00117 	ldw	ra,4(sp)
   14388:	df000017 	ldw	fp,0(sp)
   1438c:	dec00204 	addi	sp,sp,8
   14390:	f800283a 	ret

00014394 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   14394:	defffa04 	addi	sp,sp,-24
   14398:	df000515 	stw	fp,20(sp)
   1439c:	df000504 	addi	fp,sp,20
   143a0:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   143a4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   143a8:	e0bfff17 	ldw	r2,-4(fp)
   143ac:	1000021e 	bne	r2,zero,143b8 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   143b0:	00800104 	movi	r2,4
   143b4:	00002106 	br	1443c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   143b8:	e0bfff17 	ldw	r2,-4(fp)
   143bc:	10800003 	ldbu	r2,0(r2)
   143c0:	10803fcc 	andi	r2,r2,255
   143c4:	108000a0 	cmpeqi	r2,r2,2
   143c8:	1000021e 	bne	r2,zero,143d4 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   143cc:	00800044 	movi	r2,1
   143d0:	00001a06 	br	1443c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   143d4:	0005303a 	rdctl	r2,status
   143d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   143dc:	e0fffd17 	ldw	r3,-12(fp)
   143e0:	00bfff84 	movi	r2,-2
   143e4:	1884703a 	and	r2,r3,r2
   143e8:	1001703a 	wrctl	status,r2
  
  return context;
   143ec:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   143f0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   143f4:	e0bfff17 	ldw	r2,-4(fp)
   143f8:	10800117 	ldw	r2,4(r2)
   143fc:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   14400:	e0bffc17 	ldw	r2,-16(fp)
   14404:	10c00117 	ldw	r3,4(r2)
   14408:	e0bffc17 	ldw	r2,-16(fp)
   1440c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   14410:	e0bffc17 	ldw	r2,-16(fp)
   14414:	10c00117 	ldw	r3,4(r2)
   14418:	e0bffc17 	ldw	r2,-16(fp)
   1441c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   14420:	e0bffc17 	ldw	r2,-16(fp)
   14424:	1000058d 	sth	zero,22(r2)
   14428:	e0bffb17 	ldw	r2,-20(fp)
   1442c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14430:	e0bffe17 	ldw	r2,-8(fp)
   14434:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14438:	0005883a 	mov	r2,zero
}
   1443c:	e037883a 	mov	sp,fp
   14440:	df000017 	ldw	fp,0(sp)
   14444:	dec00104 	addi	sp,sp,4
   14448:	f800283a 	ret

0001444c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1444c:	defff304 	addi	sp,sp,-52
   14450:	dfc00c15 	stw	ra,48(sp)
   14454:	df000b15 	stw	fp,44(sp)
   14458:	df000b04 	addi	fp,sp,44
   1445c:	e13ffd15 	stw	r4,-12(fp)
   14460:	2805883a 	mov	r2,r5
   14464:	e1bfff15 	stw	r6,-4(fp)
   14468:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1446c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14470:	e0bfff17 	ldw	r2,-4(fp)
   14474:	1000021e 	bne	r2,zero,14480 <OSQPend+0x34>
        return ((void *)0);
   14478:	0005883a 	mov	r2,zero
   1447c:	0000ad06 	br	14734 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   14480:	e0bffd17 	ldw	r2,-12(fp)
   14484:	1000051e 	bne	r2,zero,1449c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   14488:	e0bfff17 	ldw	r2,-4(fp)
   1448c:	00c00104 	movi	r3,4
   14490:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14494:	0005883a 	mov	r2,zero
   14498:	0000a606 	br	14734 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1449c:	e0bffd17 	ldw	r2,-12(fp)
   144a0:	10800003 	ldbu	r2,0(r2)
   144a4:	10803fcc 	andi	r2,r2,255
   144a8:	108000a0 	cmpeqi	r2,r2,2
   144ac:	1000051e 	bne	r2,zero,144c4 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   144b0:	e0bfff17 	ldw	r2,-4(fp)
   144b4:	00c00044 	movi	r3,1
   144b8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   144bc:	0005883a 	mov	r2,zero
   144c0:	00009c06 	br	14734 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   144c4:	008000b4 	movhi	r2,2
   144c8:	10bf3c04 	addi	r2,r2,-784
   144cc:	10800003 	ldbu	r2,0(r2)
   144d0:	10803fcc 	andi	r2,r2,255
   144d4:	10000526 	beq	r2,zero,144ec <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   144d8:	e0bfff17 	ldw	r2,-4(fp)
   144dc:	00c00084 	movi	r3,2
   144e0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   144e4:	0005883a 	mov	r2,zero
   144e8:	00009206 	br	14734 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   144ec:	008000b4 	movhi	r2,2
   144f0:	10bf2e04 	addi	r2,r2,-840
   144f4:	10800003 	ldbu	r2,0(r2)
   144f8:	10803fcc 	andi	r2,r2,255
   144fc:	10000526 	beq	r2,zero,14514 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   14500:	e0bfff17 	ldw	r2,-4(fp)
   14504:	00c00344 	movi	r3,13
   14508:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1450c:	0005883a 	mov	r2,zero
   14510:	00008806 	br	14734 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14514:	0005303a 	rdctl	r2,status
   14518:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1451c:	e0fff817 	ldw	r3,-32(fp)
   14520:	00bfff84 	movi	r2,-2
   14524:	1884703a 	and	r2,r3,r2
   14528:	1001703a 	wrctl	status,r2
  
  return context;
   1452c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   14530:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   14534:	e0bffd17 	ldw	r2,-12(fp)
   14538:	10800117 	ldw	r2,4(r2)
   1453c:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   14540:	e0bff717 	ldw	r2,-36(fp)
   14544:	1080058b 	ldhu	r2,22(r2)
   14548:	10bfffcc 	andi	r2,r2,65535
   1454c:	10001e26 	beq	r2,zero,145c8 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   14550:	e0bff717 	ldw	r2,-36(fp)
   14554:	10800417 	ldw	r2,16(r2)
   14558:	11000104 	addi	r4,r2,4
   1455c:	e0fff717 	ldw	r3,-36(fp)
   14560:	19000415 	stw	r4,16(r3)
   14564:	10800017 	ldw	r2,0(r2)
   14568:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1456c:	e0bff717 	ldw	r2,-36(fp)
   14570:	1080058b 	ldhu	r2,22(r2)
   14574:	10bfffc4 	addi	r2,r2,-1
   14578:	1007883a 	mov	r3,r2
   1457c:	e0bff717 	ldw	r2,-36(fp)
   14580:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   14584:	e0bff717 	ldw	r2,-36(fp)
   14588:	10c00417 	ldw	r3,16(r2)
   1458c:	e0bff717 	ldw	r2,-36(fp)
   14590:	10800217 	ldw	r2,8(r2)
   14594:	1880041e 	bne	r3,r2,145a8 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   14598:	e0bff717 	ldw	r2,-36(fp)
   1459c:	10c00117 	ldw	r3,4(r2)
   145a0:	e0bff717 	ldw	r2,-36(fp)
   145a4:	10c00415 	stw	r3,16(r2)
   145a8:	e0bff617 	ldw	r2,-40(fp)
   145ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   145b0:	e0bff917 	ldw	r2,-28(fp)
   145b4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   145b8:	e0bfff17 	ldw	r2,-4(fp)
   145bc:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   145c0:	e0bff517 	ldw	r2,-44(fp)
   145c4:	00005b06 	br	14734 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   145c8:	008000b4 	movhi	r2,2
   145cc:	10bf3d04 	addi	r2,r2,-780
   145d0:	10c00017 	ldw	r3,0(r2)
   145d4:	008000b4 	movhi	r2,2
   145d8:	10bf3d04 	addi	r2,r2,-780
   145dc:	10800017 	ldw	r2,0(r2)
   145e0:	10800c03 	ldbu	r2,48(r2)
   145e4:	10800114 	ori	r2,r2,4
   145e8:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   145ec:	008000b4 	movhi	r2,2
   145f0:	10bf3d04 	addi	r2,r2,-780
   145f4:	10800017 	ldw	r2,0(r2)
   145f8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   145fc:	008000b4 	movhi	r2,2
   14600:	10bf3d04 	addi	r2,r2,-780
   14604:	10800017 	ldw	r2,0(r2)
   14608:	e0fffe0b 	ldhu	r3,-8(fp)
   1460c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   14610:	e13ffd17 	ldw	r4,-12(fp)
   14614:	00101840 	call	10184 <OS_EventTaskWait>
   14618:	e0bff617 	ldw	r2,-40(fp)
   1461c:	e0bffa15 	stw	r2,-24(fp)
   14620:	e0bffa17 	ldw	r2,-24(fp)
   14624:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   14628:	0010a040 	call	10a04 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1462c:	0005303a 	rdctl	r2,status
   14630:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14634:	e0fffb17 	ldw	r3,-20(fp)
   14638:	00bfff84 	movi	r2,-2
   1463c:	1884703a 	and	r2,r3,r2
   14640:	1001703a 	wrctl	status,r2
  
  return context;
   14644:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   14648:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1464c:	008000b4 	movhi	r2,2
   14650:	10bf3d04 	addi	r2,r2,-780
   14654:	10800017 	ldw	r2,0(r2)
   14658:	10800c43 	ldbu	r2,49(r2)
   1465c:	10803fcc 	andi	r2,r2,255
   14660:	10000326 	beq	r2,zero,14670 <OSQPend+0x224>
   14664:	108000a0 	cmpeqi	r2,r2,2
   14668:	1000091e 	bne	r2,zero,14690 <OSQPend+0x244>
   1466c:	00000d06 	br	146a4 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   14670:	008000b4 	movhi	r2,2
   14674:	10bf3d04 	addi	r2,r2,-780
   14678:	10800017 	ldw	r2,0(r2)
   1467c:	10800917 	ldw	r2,36(r2)
   14680:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   14684:	e0bfff17 	ldw	r2,-4(fp)
   14688:	10000005 	stb	zero,0(r2)
             break;
   1468c:	00001006 	br	146d0 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   14690:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   14694:	e0bfff17 	ldw	r2,-4(fp)
   14698:	00c00384 	movi	r3,14
   1469c:	10c00005 	stb	r3,0(r2)
             break;
   146a0:	00000b06 	br	146d0 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   146a4:	008000b4 	movhi	r2,2
   146a8:	10bf3d04 	addi	r2,r2,-780
   146ac:	10800017 	ldw	r2,0(r2)
   146b0:	1009883a 	mov	r4,r2
   146b4:	e17ffd17 	ldw	r5,-12(fp)
   146b8:	00103dc0 	call	103dc <OS_EventTaskRemove>
             pmsg = (void *)0;
   146bc:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   146c0:	e0bfff17 	ldw	r2,-4(fp)
   146c4:	00c00284 	movi	r3,10
   146c8:	10c00005 	stb	r3,0(r2)
             break;
   146cc:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   146d0:	008000b4 	movhi	r2,2
   146d4:	10bf3d04 	addi	r2,r2,-780
   146d8:	10800017 	ldw	r2,0(r2)
   146dc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   146e0:	008000b4 	movhi	r2,2
   146e4:	10bf3d04 	addi	r2,r2,-780
   146e8:	10800017 	ldw	r2,0(r2)
   146ec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   146f0:	008000b4 	movhi	r2,2
   146f4:	10bf3d04 	addi	r2,r2,-780
   146f8:	10800017 	ldw	r2,0(r2)
   146fc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   14700:	008000b4 	movhi	r2,2
   14704:	10bf3d04 	addi	r2,r2,-780
   14708:	10800017 	ldw	r2,0(r2)
   1470c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   14710:	008000b4 	movhi	r2,2
   14714:	10bf3d04 	addi	r2,r2,-780
   14718:	10800017 	ldw	r2,0(r2)
   1471c:	10000915 	stw	zero,36(r2)
   14720:	e0bff617 	ldw	r2,-40(fp)
   14724:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14728:	e0bffc17 	ldw	r2,-16(fp)
   1472c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   14730:	e0bff517 	ldw	r2,-44(fp)
}
   14734:	e037883a 	mov	sp,fp
   14738:	dfc00117 	ldw	ra,4(sp)
   1473c:	df000017 	ldw	fp,0(sp)
   14740:	dec00204 	addi	sp,sp,8
   14744:	f800283a 	ret

00014748 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   14748:	defff604 	addi	sp,sp,-40
   1474c:	dfc00915 	stw	ra,36(sp)
   14750:	df000815 	stw	fp,32(sp)
   14754:	df000804 	addi	fp,sp,32
   14758:	e13ffd15 	stw	r4,-12(fp)
   1475c:	2805883a 	mov	r2,r5
   14760:	e1bfff15 	stw	r6,-4(fp)
   14764:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14768:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1476c:	e0bfff17 	ldw	r2,-4(fp)
   14770:	1000021e 	bne	r2,zero,1477c <OSQPendAbort+0x34>
        return (0);
   14774:	0005883a 	mov	r2,zero
   14778:	00004906 	br	148a0 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1477c:	e0bffd17 	ldw	r2,-12(fp)
   14780:	1000051e 	bne	r2,zero,14798 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   14784:	e0bfff17 	ldw	r2,-4(fp)
   14788:	00c00104 	movi	r3,4
   1478c:	10c00005 	stb	r3,0(r2)
        return (0);
   14790:	0005883a 	mov	r2,zero
   14794:	00004206 	br	148a0 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   14798:	e0bffd17 	ldw	r2,-12(fp)
   1479c:	10800003 	ldbu	r2,0(r2)
   147a0:	10803fcc 	andi	r2,r2,255
   147a4:	108000a0 	cmpeqi	r2,r2,2
   147a8:	1000051e 	bne	r2,zero,147c0 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   147ac:	e0bfff17 	ldw	r2,-4(fp)
   147b0:	00c00044 	movi	r3,1
   147b4:	10c00005 	stb	r3,0(r2)
        return (0);
   147b8:	0005883a 	mov	r2,zero
   147bc:	00003806 	br	148a0 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   147c0:	0005303a 	rdctl	r2,status
   147c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147c8:	e0fffa17 	ldw	r3,-24(fp)
   147cc:	00bfff84 	movi	r2,-2
   147d0:	1884703a 	and	r2,r3,r2
   147d4:	1001703a 	wrctl	status,r2
  
  return context;
   147d8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   147dc:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   147e0:	e0bffd17 	ldw	r2,-12(fp)
   147e4:	10800283 	ldbu	r2,10(r2)
   147e8:	10803fcc 	andi	r2,r2,255
   147ec:	10002526 	beq	r2,zero,14884 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   147f0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   147f4:	e0bffe03 	ldbu	r2,-8(fp)
   147f8:	10800060 	cmpeqi	r2,r2,1
   147fc:	10000e26 	beq	r2,zero,14838 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   14800:	00000806 	br	14824 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   14804:	e13ffd17 	ldw	r4,-12(fp)
   14808:	000b883a 	mov	r5,zero
   1480c:	01800104 	movi	r6,4
   14810:	01c00084 	movi	r7,2
   14814:	000ffec0 	call	ffec <OS_EventTaskRdy>
                     nbr_tasks++;
   14818:	e0bff803 	ldbu	r2,-32(fp)
   1481c:	10800044 	addi	r2,r2,1
   14820:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   14824:	e0bffd17 	ldw	r2,-12(fp)
   14828:	10800283 	ldbu	r2,10(r2)
   1482c:	10803fcc 	andi	r2,r2,255
   14830:	103ff41e 	bne	r2,zero,14804 <__alt_mem_Flash_flash_data+0xf4014804>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   14834:	00000906 	br	1485c <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   14838:	e13ffd17 	ldw	r4,-12(fp)
   1483c:	000b883a 	mov	r5,zero
   14840:	01800104 	movi	r6,4
   14844:	01c00084 	movi	r7,2
   14848:	000ffec0 	call	ffec <OS_EventTaskRdy>
                 nbr_tasks++;
   1484c:	e0bff803 	ldbu	r2,-32(fp)
   14850:	10800044 	addi	r2,r2,1
   14854:	e0bff805 	stb	r2,-32(fp)
                 break;
   14858:	0001883a 	nop
   1485c:	e0bff917 	ldw	r2,-28(fp)
   14860:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14864:	e0bffb17 	ldw	r2,-20(fp)
   14868:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   1486c:	0010a040 	call	10a04 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   14870:	e0bfff17 	ldw	r2,-4(fp)
   14874:	00c00384 	movi	r3,14
   14878:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1487c:	e0bff803 	ldbu	r2,-32(fp)
   14880:	00000706 	br	148a0 <OSQPendAbort+0x158>
   14884:	e0bff917 	ldw	r2,-28(fp)
   14888:	e0bffc15 	stw	r2,-16(fp)
   1488c:	e0bffc17 	ldw	r2,-16(fp)
   14890:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14894:	e0bfff17 	ldw	r2,-4(fp)
   14898:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   1489c:	0005883a 	mov	r2,zero
}
   148a0:	e037883a 	mov	sp,fp
   148a4:	dfc00117 	ldw	ra,4(sp)
   148a8:	df000017 	ldw	fp,0(sp)
   148ac:	dec00204 	addi	sp,sp,8
   148b0:	f800283a 	ret

000148b4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   148b4:	defff604 	addi	sp,sp,-40
   148b8:	dfc00915 	stw	ra,36(sp)
   148bc:	df000815 	stw	fp,32(sp)
   148c0:	df000804 	addi	fp,sp,32
   148c4:	e13ffe15 	stw	r4,-8(fp)
   148c8:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   148cc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   148d0:	e0bffe17 	ldw	r2,-8(fp)
   148d4:	1000021e 	bne	r2,zero,148e0 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   148d8:	00800104 	movi	r2,4
   148dc:	00004a06 	br	14a08 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   148e0:	e0bffe17 	ldw	r2,-8(fp)
   148e4:	10800003 	ldbu	r2,0(r2)
   148e8:	10803fcc 	andi	r2,r2,255
   148ec:	108000a0 	cmpeqi	r2,r2,2
   148f0:	1000021e 	bne	r2,zero,148fc <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   148f4:	00800044 	movi	r2,1
   148f8:	00004306 	br	14a08 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   148fc:	0005303a 	rdctl	r2,status
   14900:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14904:	e0fffa17 	ldw	r3,-24(fp)
   14908:	00bfff84 	movi	r2,-2
   1490c:	1884703a 	and	r2,r3,r2
   14910:	1001703a 	wrctl	status,r2
  
  return context;
   14914:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   14918:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   1491c:	e0bffe17 	ldw	r2,-8(fp)
   14920:	10800283 	ldbu	r2,10(r2)
   14924:	10803fcc 	andi	r2,r2,255
   14928:	10000c26 	beq	r2,zero,1495c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1492c:	e13ffe17 	ldw	r4,-8(fp)
   14930:	e17fff17 	ldw	r5,-4(fp)
   14934:	01800104 	movi	r6,4
   14938:	000f883a 	mov	r7,zero
   1493c:	000ffec0 	call	ffec <OS_EventTaskRdy>
   14940:	e0bff817 	ldw	r2,-32(fp)
   14944:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14948:	e0bffb17 	ldw	r2,-20(fp)
   1494c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   14950:	0010a040 	call	10a04 <OS_Sched>
        return (OS_ERR_NONE);
   14954:	0005883a 	mov	r2,zero
   14958:	00002b06 	br	14a08 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   1495c:	e0bffe17 	ldw	r2,-8(fp)
   14960:	10800117 	ldw	r2,4(r2)
   14964:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   14968:	e0bff917 	ldw	r2,-28(fp)
   1496c:	10c0058b 	ldhu	r3,22(r2)
   14970:	e0bff917 	ldw	r2,-28(fp)
   14974:	1080050b 	ldhu	r2,20(r2)
   14978:	18ffffcc 	andi	r3,r3,65535
   1497c:	10bfffcc 	andi	r2,r2,65535
   14980:	18800636 	bltu	r3,r2,1499c <OSQPost+0xe8>
   14984:	e0bff817 	ldw	r2,-32(fp)
   14988:	e0bffc15 	stw	r2,-16(fp)
   1498c:	e0bffc17 	ldw	r2,-16(fp)
   14990:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   14994:	00800784 	movi	r2,30
   14998:	00001b06 	br	14a08 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   1499c:	e0bff917 	ldw	r2,-28(fp)
   149a0:	10800317 	ldw	r2,12(r2)
   149a4:	11000104 	addi	r4,r2,4
   149a8:	e0fff917 	ldw	r3,-28(fp)
   149ac:	19000315 	stw	r4,12(r3)
   149b0:	e0ffff17 	ldw	r3,-4(fp)
   149b4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   149b8:	e0bff917 	ldw	r2,-28(fp)
   149bc:	1080058b 	ldhu	r2,22(r2)
   149c0:	10800044 	addi	r2,r2,1
   149c4:	1007883a 	mov	r3,r2
   149c8:	e0bff917 	ldw	r2,-28(fp)
   149cc:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   149d0:	e0bff917 	ldw	r2,-28(fp)
   149d4:	10c00317 	ldw	r3,12(r2)
   149d8:	e0bff917 	ldw	r2,-28(fp)
   149dc:	10800217 	ldw	r2,8(r2)
   149e0:	1880041e 	bne	r3,r2,149f4 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   149e4:	e0bff917 	ldw	r2,-28(fp)
   149e8:	10c00117 	ldw	r3,4(r2)
   149ec:	e0bff917 	ldw	r2,-28(fp)
   149f0:	10c00315 	stw	r3,12(r2)
   149f4:	e0bff817 	ldw	r2,-32(fp)
   149f8:	e0bffd15 	stw	r2,-12(fp)
   149fc:	e0bffd17 	ldw	r2,-12(fp)
   14a00:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14a04:	0005883a 	mov	r2,zero
}
   14a08:	e037883a 	mov	sp,fp
   14a0c:	dfc00117 	ldw	ra,4(sp)
   14a10:	df000017 	ldw	fp,0(sp)
   14a14:	dec00204 	addi	sp,sp,8
   14a18:	f800283a 	ret

00014a1c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   14a1c:	defff604 	addi	sp,sp,-40
   14a20:	dfc00915 	stw	ra,36(sp)
   14a24:	df000815 	stw	fp,32(sp)
   14a28:	df000804 	addi	fp,sp,32
   14a2c:	e13ffe15 	stw	r4,-8(fp)
   14a30:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14a34:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14a38:	e0bffe17 	ldw	r2,-8(fp)
   14a3c:	1000021e 	bne	r2,zero,14a48 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   14a40:	00800104 	movi	r2,4
   14a44:	00004c06 	br	14b78 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   14a48:	e0bffe17 	ldw	r2,-8(fp)
   14a4c:	10800003 	ldbu	r2,0(r2)
   14a50:	10803fcc 	andi	r2,r2,255
   14a54:	108000a0 	cmpeqi	r2,r2,2
   14a58:	1000021e 	bne	r2,zero,14a64 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   14a5c:	00800044 	movi	r2,1
   14a60:	00004506 	br	14b78 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a64:	0005303a 	rdctl	r2,status
   14a68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a6c:	e0fffa17 	ldw	r3,-24(fp)
   14a70:	00bfff84 	movi	r2,-2
   14a74:	1884703a 	and	r2,r3,r2
   14a78:	1001703a 	wrctl	status,r2
  
  return context;
   14a7c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   14a80:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   14a84:	e0bffe17 	ldw	r2,-8(fp)
   14a88:	10800283 	ldbu	r2,10(r2)
   14a8c:	10803fcc 	andi	r2,r2,255
   14a90:	10000c26 	beq	r2,zero,14ac4 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   14a94:	e13ffe17 	ldw	r4,-8(fp)
   14a98:	e17fff17 	ldw	r5,-4(fp)
   14a9c:	01800104 	movi	r6,4
   14aa0:	000f883a 	mov	r7,zero
   14aa4:	000ffec0 	call	ffec <OS_EventTaskRdy>
   14aa8:	e0bff817 	ldw	r2,-32(fp)
   14aac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ab0:	e0bffb17 	ldw	r2,-20(fp)
   14ab4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   14ab8:	0010a040 	call	10a04 <OS_Sched>
        return (OS_ERR_NONE);
   14abc:	0005883a 	mov	r2,zero
   14ac0:	00002d06 	br	14b78 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   14ac4:	e0bffe17 	ldw	r2,-8(fp)
   14ac8:	10800117 	ldw	r2,4(r2)
   14acc:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   14ad0:	e0bff917 	ldw	r2,-28(fp)
   14ad4:	10c0058b 	ldhu	r3,22(r2)
   14ad8:	e0bff917 	ldw	r2,-28(fp)
   14adc:	1080050b 	ldhu	r2,20(r2)
   14ae0:	18ffffcc 	andi	r3,r3,65535
   14ae4:	10bfffcc 	andi	r2,r2,65535
   14ae8:	18800636 	bltu	r3,r2,14b04 <OSQPostFront+0xe8>
   14aec:	e0bff817 	ldw	r2,-32(fp)
   14af0:	e0bffc15 	stw	r2,-16(fp)
   14af4:	e0bffc17 	ldw	r2,-16(fp)
   14af8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   14afc:	00800784 	movi	r2,30
   14b00:	00001d06 	br	14b78 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   14b04:	e0bff917 	ldw	r2,-28(fp)
   14b08:	10c00417 	ldw	r3,16(r2)
   14b0c:	e0bff917 	ldw	r2,-28(fp)
   14b10:	10800117 	ldw	r2,4(r2)
   14b14:	1880041e 	bne	r3,r2,14b28 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   14b18:	e0bff917 	ldw	r2,-28(fp)
   14b1c:	10c00217 	ldw	r3,8(r2)
   14b20:	e0bff917 	ldw	r2,-28(fp)
   14b24:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   14b28:	e0bff917 	ldw	r2,-28(fp)
   14b2c:	10800417 	ldw	r2,16(r2)
   14b30:	10ffff04 	addi	r3,r2,-4
   14b34:	e0bff917 	ldw	r2,-28(fp)
   14b38:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   14b3c:	e0bff917 	ldw	r2,-28(fp)
   14b40:	10800417 	ldw	r2,16(r2)
   14b44:	e0ffff17 	ldw	r3,-4(fp)
   14b48:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   14b4c:	e0bff917 	ldw	r2,-28(fp)
   14b50:	1080058b 	ldhu	r2,22(r2)
   14b54:	10800044 	addi	r2,r2,1
   14b58:	1007883a 	mov	r3,r2
   14b5c:	e0bff917 	ldw	r2,-28(fp)
   14b60:	10c0058d 	sth	r3,22(r2)
   14b64:	e0bff817 	ldw	r2,-32(fp)
   14b68:	e0bffd15 	stw	r2,-12(fp)
   14b6c:	e0bffd17 	ldw	r2,-12(fp)
   14b70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14b74:	0005883a 	mov	r2,zero
}
   14b78:	e037883a 	mov	sp,fp
   14b7c:	dfc00117 	ldw	ra,4(sp)
   14b80:	df000017 	ldw	fp,0(sp)
   14b84:	dec00204 	addi	sp,sp,8
   14b88:	f800283a 	ret

00014b8c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   14b8c:	defff504 	addi	sp,sp,-44
   14b90:	dfc00a15 	stw	ra,40(sp)
   14b94:	df000915 	stw	fp,36(sp)
   14b98:	df000904 	addi	fp,sp,36
   14b9c:	e13ffd15 	stw	r4,-12(fp)
   14ba0:	e17ffe15 	stw	r5,-8(fp)
   14ba4:	3005883a 	mov	r2,r6
   14ba8:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14bac:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14bb0:	e0bffd17 	ldw	r2,-12(fp)
   14bb4:	1000021e 	bne	r2,zero,14bc0 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   14bb8:	00800104 	movi	r2,4
   14bbc:	00007106 	br	14d84 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   14bc0:	e0bffd17 	ldw	r2,-12(fp)
   14bc4:	10800003 	ldbu	r2,0(r2)
   14bc8:	10803fcc 	andi	r2,r2,255
   14bcc:	108000a0 	cmpeqi	r2,r2,2
   14bd0:	1000021e 	bne	r2,zero,14bdc <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   14bd4:	00800044 	movi	r2,1
   14bd8:	00006a06 	br	14d84 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14bdc:	0005303a 	rdctl	r2,status
   14be0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14be4:	e0fff917 	ldw	r3,-28(fp)
   14be8:	00bfff84 	movi	r2,-2
   14bec:	1884703a 	and	r2,r3,r2
   14bf0:	1001703a 	wrctl	status,r2
  
  return context;
   14bf4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   14bf8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   14bfc:	e0bffd17 	ldw	r2,-12(fp)
   14c00:	10800283 	ldbu	r2,10(r2)
   14c04:	10803fcc 	andi	r2,r2,255
   14c08:	10001d26 	beq	r2,zero,14c80 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   14c0c:	e0bfff03 	ldbu	r2,-4(fp)
   14c10:	1080004c 	andi	r2,r2,1
   14c14:	10000b26 	beq	r2,zero,14c44 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   14c18:	00000506 	br	14c30 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   14c1c:	e13ffd17 	ldw	r4,-12(fp)
   14c20:	e17ffe17 	ldw	r5,-8(fp)
   14c24:	01800104 	movi	r6,4
   14c28:	000f883a 	mov	r7,zero
   14c2c:	000ffec0 	call	ffec <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   14c30:	e0bffd17 	ldw	r2,-12(fp)
   14c34:	10800283 	ldbu	r2,10(r2)
   14c38:	10803fcc 	andi	r2,r2,255
   14c3c:	103ff71e 	bne	r2,zero,14c1c <__alt_mem_Flash_flash_data+0xf4014c1c>
   14c40:	00000506 	br	14c58 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   14c44:	e13ffd17 	ldw	r4,-12(fp)
   14c48:	e17ffe17 	ldw	r5,-8(fp)
   14c4c:	01800104 	movi	r6,4
   14c50:	000f883a 	mov	r7,zero
   14c54:	000ffec0 	call	ffec <OS_EventTaskRdy>
   14c58:	e0bff717 	ldw	r2,-36(fp)
   14c5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14c60:	e0bffa17 	ldw	r2,-24(fp)
   14c64:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   14c68:	e0bfff03 	ldbu	r2,-4(fp)
   14c6c:	1080010c 	andi	r2,r2,4
   14c70:	1000011e 	bne	r2,zero,14c78 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   14c74:	0010a040 	call	10a04 <OS_Sched>
        }
        return (OS_ERR_NONE);
   14c78:	0005883a 	mov	r2,zero
   14c7c:	00004106 	br	14d84 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   14c80:	e0bffd17 	ldw	r2,-12(fp)
   14c84:	10800117 	ldw	r2,4(r2)
   14c88:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   14c8c:	e0bff817 	ldw	r2,-32(fp)
   14c90:	10c0058b 	ldhu	r3,22(r2)
   14c94:	e0bff817 	ldw	r2,-32(fp)
   14c98:	1080050b 	ldhu	r2,20(r2)
   14c9c:	18ffffcc 	andi	r3,r3,65535
   14ca0:	10bfffcc 	andi	r2,r2,65535
   14ca4:	18800636 	bltu	r3,r2,14cc0 <OSQPostOpt+0x134>
   14ca8:	e0bff717 	ldw	r2,-36(fp)
   14cac:	e0bffb15 	stw	r2,-20(fp)
   14cb0:	e0bffb17 	ldw	r2,-20(fp)
   14cb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   14cb8:	00800784 	movi	r2,30
   14cbc:	00003106 	br	14d84 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   14cc0:	e0bfff03 	ldbu	r2,-4(fp)
   14cc4:	1080008c 	andi	r2,r2,2
   14cc8:	10001326 	beq	r2,zero,14d18 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   14ccc:	e0bff817 	ldw	r2,-32(fp)
   14cd0:	10c00417 	ldw	r3,16(r2)
   14cd4:	e0bff817 	ldw	r2,-32(fp)
   14cd8:	10800117 	ldw	r2,4(r2)
   14cdc:	1880041e 	bne	r3,r2,14cf0 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   14ce0:	e0bff817 	ldw	r2,-32(fp)
   14ce4:	10c00217 	ldw	r3,8(r2)
   14ce8:	e0bff817 	ldw	r2,-32(fp)
   14cec:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   14cf0:	e0bff817 	ldw	r2,-32(fp)
   14cf4:	10800417 	ldw	r2,16(r2)
   14cf8:	10ffff04 	addi	r3,r2,-4
   14cfc:	e0bff817 	ldw	r2,-32(fp)
   14d00:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   14d04:	e0bff817 	ldw	r2,-32(fp)
   14d08:	10800417 	ldw	r2,16(r2)
   14d0c:	e0fffe17 	ldw	r3,-8(fp)
   14d10:	10c00015 	stw	r3,0(r2)
   14d14:	00001006 	br	14d58 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   14d18:	e0bff817 	ldw	r2,-32(fp)
   14d1c:	10800317 	ldw	r2,12(r2)
   14d20:	11000104 	addi	r4,r2,4
   14d24:	e0fff817 	ldw	r3,-32(fp)
   14d28:	19000315 	stw	r4,12(r3)
   14d2c:	e0fffe17 	ldw	r3,-8(fp)
   14d30:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   14d34:	e0bff817 	ldw	r2,-32(fp)
   14d38:	10c00317 	ldw	r3,12(r2)
   14d3c:	e0bff817 	ldw	r2,-32(fp)
   14d40:	10800217 	ldw	r2,8(r2)
   14d44:	1880041e 	bne	r3,r2,14d58 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   14d48:	e0bff817 	ldw	r2,-32(fp)
   14d4c:	10c00117 	ldw	r3,4(r2)
   14d50:	e0bff817 	ldw	r2,-32(fp)
   14d54:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   14d58:	e0bff817 	ldw	r2,-32(fp)
   14d5c:	1080058b 	ldhu	r2,22(r2)
   14d60:	10800044 	addi	r2,r2,1
   14d64:	1007883a 	mov	r3,r2
   14d68:	e0bff817 	ldw	r2,-32(fp)
   14d6c:	10c0058d 	sth	r3,22(r2)
   14d70:	e0bff717 	ldw	r2,-36(fp)
   14d74:	e0bffc15 	stw	r2,-16(fp)
   14d78:	e0bffc17 	ldw	r2,-16(fp)
   14d7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14d80:	0005883a 	mov	r2,zero
}
   14d84:	e037883a 	mov	sp,fp
   14d88:	dfc00117 	ldw	ra,4(sp)
   14d8c:	df000017 	ldw	fp,0(sp)
   14d90:	dec00204 	addi	sp,sp,8
   14d94:	f800283a 	ret

00014d98 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   14d98:	defff604 	addi	sp,sp,-40
   14d9c:	df000915 	stw	fp,36(sp)
   14da0:	df000904 	addi	fp,sp,36
   14da4:	e13ffe15 	stw	r4,-8(fp)
   14da8:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14dac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   14db0:	e0bffe17 	ldw	r2,-8(fp)
   14db4:	1000021e 	bne	r2,zero,14dc0 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   14db8:	00800104 	movi	r2,4
   14dbc:	00004906 	br	14ee4 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   14dc0:	e0bfff17 	ldw	r2,-4(fp)
   14dc4:	1000021e 	bne	r2,zero,14dd0 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   14dc8:	00800244 	movi	r2,9
   14dcc:	00004506 	br	14ee4 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   14dd0:	e0bffe17 	ldw	r2,-8(fp)
   14dd4:	10800003 	ldbu	r2,0(r2)
   14dd8:	10803fcc 	andi	r2,r2,255
   14ddc:	108000a0 	cmpeqi	r2,r2,2
   14de0:	1000021e 	bne	r2,zero,14dec <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   14de4:	00800044 	movi	r2,1
   14de8:	00003e06 	br	14ee4 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14dec:	0005303a 	rdctl	r2,status
   14df0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14df4:	e0fffc17 	ldw	r3,-16(fp)
   14df8:	00bfff84 	movi	r2,-2
   14dfc:	1884703a 	and	r2,r3,r2
   14e00:	1001703a 	wrctl	status,r2
  
  return context;
   14e04:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14e08:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   14e0c:	e0bffe17 	ldw	r2,-8(fp)
   14e10:	10c00283 	ldbu	r3,10(r2)
   14e14:	e0bfff17 	ldw	r2,-4(fp)
   14e18:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   14e1c:	e0bffe17 	ldw	r2,-8(fp)
   14e20:	108002c4 	addi	r2,r2,11
   14e24:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   14e28:	e0bfff17 	ldw	r2,-4(fp)
   14e2c:	10800204 	addi	r2,r2,8
   14e30:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   14e34:	e03ff705 	stb	zero,-36(fp)
   14e38:	00000b06 	br	14e68 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   14e3c:	e0bff917 	ldw	r2,-28(fp)
   14e40:	10c00044 	addi	r3,r2,1
   14e44:	e0fff915 	stw	r3,-28(fp)
   14e48:	e0fff817 	ldw	r3,-32(fp)
   14e4c:	19000044 	addi	r4,r3,1
   14e50:	e13ff815 	stw	r4,-32(fp)
   14e54:	18c00003 	ldbu	r3,0(r3)
   14e58:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   14e5c:	e0bff703 	ldbu	r2,-36(fp)
   14e60:	10800044 	addi	r2,r2,1
   14e64:	e0bff705 	stb	r2,-36(fp)
   14e68:	e0bff703 	ldbu	r2,-36(fp)
   14e6c:	108000f0 	cmpltui	r2,r2,3
   14e70:	103ff21e 	bne	r2,zero,14e3c <__alt_mem_Flash_flash_data+0xf4014e3c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   14e74:	e0bffe17 	ldw	r2,-8(fp)
   14e78:	10800117 	ldw	r2,4(r2)
   14e7c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   14e80:	e0bffb17 	ldw	r2,-20(fp)
   14e84:	1080058b 	ldhu	r2,22(r2)
   14e88:	10bfffcc 	andi	r2,r2,65535
   14e8c:	10000626 	beq	r2,zero,14ea8 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   14e90:	e0bffb17 	ldw	r2,-20(fp)
   14e94:	10800417 	ldw	r2,16(r2)
   14e98:	10c00017 	ldw	r3,0(r2)
   14e9c:	e0bfff17 	ldw	r2,-4(fp)
   14ea0:	10c00015 	stw	r3,0(r2)
   14ea4:	00000206 	br	14eb0 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   14ea8:	e0bfff17 	ldw	r2,-4(fp)
   14eac:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   14eb0:	e0bffb17 	ldw	r2,-20(fp)
   14eb4:	10c0058b 	ldhu	r3,22(r2)
   14eb8:	e0bfff17 	ldw	r2,-4(fp)
   14ebc:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   14ec0:	e0bffb17 	ldw	r2,-20(fp)
   14ec4:	10c0050b 	ldhu	r3,20(r2)
   14ec8:	e0bfff17 	ldw	r2,-4(fp)
   14ecc:	10c0018d 	sth	r3,6(r2)
   14ed0:	e0bffa17 	ldw	r2,-24(fp)
   14ed4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ed8:	e0bffd17 	ldw	r2,-12(fp)
   14edc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14ee0:	0005883a 	mov	r2,zero
}
   14ee4:	e037883a 	mov	sp,fp
   14ee8:	df000017 	ldw	fp,0(sp)
   14eec:	dec00104 	addi	sp,sp,4
   14ef0:	f800283a 	ret

00014ef4 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   14ef4:	defffb04 	addi	sp,sp,-20
   14ef8:	dfc00415 	stw	ra,16(sp)
   14efc:	df000315 	stw	fp,12(sp)
   14f00:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   14f04:	010000f4 	movhi	r4,3
   14f08:	212f2c04 	addi	r4,r4,-17232
   14f0c:	01407804 	movi	r5,480
   14f10:	00109500 	call	10950 <OS_MemClr>
    pq1 = &OSQTbl[0];
   14f14:	008000f4 	movhi	r2,3
   14f18:	10af2c04 	addi	r2,r2,-17232
   14f1c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   14f20:	008000f4 	movhi	r2,3
   14f24:	10af3204 	addi	r2,r2,-17208
   14f28:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   14f2c:	e03ffd0d 	sth	zero,-12(fp)
   14f30:	00000c06 	br	14f64 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   14f34:	e0bffe17 	ldw	r2,-8(fp)
   14f38:	e0ffff17 	ldw	r3,-4(fp)
   14f3c:	10c00015 	stw	r3,0(r2)
        pq1++;
   14f40:	e0bffe17 	ldw	r2,-8(fp)
   14f44:	10800604 	addi	r2,r2,24
   14f48:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   14f4c:	e0bfff17 	ldw	r2,-4(fp)
   14f50:	10800604 	addi	r2,r2,24
   14f54:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   14f58:	e0bffd0b 	ldhu	r2,-12(fp)
   14f5c:	10800044 	addi	r2,r2,1
   14f60:	e0bffd0d 	sth	r2,-12(fp)
   14f64:	e0bffd0b 	ldhu	r2,-12(fp)
   14f68:	108004f0 	cmpltui	r2,r2,19
   14f6c:	103ff11e 	bne	r2,zero,14f34 <__alt_mem_Flash_flash_data+0xf4014f34>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   14f70:	e0bffe17 	ldw	r2,-8(fp)
   14f74:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   14f78:	008000b4 	movhi	r2,2
   14f7c:	10bf3904 	addi	r2,r2,-796
   14f80:	00c000f4 	movhi	r3,3
   14f84:	18ef2c04 	addi	r3,r3,-17232
   14f88:	10c00015 	stw	r3,0(r2)
#endif
}
   14f8c:	e037883a 	mov	sp,fp
   14f90:	dfc00117 	ldw	ra,4(sp)
   14f94:	df000017 	ldw	fp,0(sp)
   14f98:	dec00204 	addi	sp,sp,8
   14f9c:	f800283a 	ret

00014fa0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   14fa0:	defffa04 	addi	sp,sp,-24
   14fa4:	df000515 	stw	fp,20(sp)
   14fa8:	df000504 	addi	fp,sp,20
   14fac:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14fb0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14fb4:	e0bfff17 	ldw	r2,-4(fp)
   14fb8:	1000021e 	bne	r2,zero,14fc4 <OSSemAccept+0x24>
        return (0);
   14fbc:	0005883a 	mov	r2,zero
   14fc0:	00001f06 	br	15040 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   14fc4:	e0bfff17 	ldw	r2,-4(fp)
   14fc8:	10800003 	ldbu	r2,0(r2)
   14fcc:	10803fcc 	andi	r2,r2,255
   14fd0:	108000e0 	cmpeqi	r2,r2,3
   14fd4:	1000021e 	bne	r2,zero,14fe0 <OSSemAccept+0x40>
        return (0);
   14fd8:	0005883a 	mov	r2,zero
   14fdc:	00001806 	br	15040 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14fe0:	0005303a 	rdctl	r2,status
   14fe4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14fe8:	e0fffd17 	ldw	r3,-12(fp)
   14fec:	00bfff84 	movi	r2,-2
   14ff0:	1884703a 	and	r2,r3,r2
   14ff4:	1001703a 	wrctl	status,r2
  
  return context;
   14ff8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   14ffc:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   15000:	e0bfff17 	ldw	r2,-4(fp)
   15004:	1080020b 	ldhu	r2,8(r2)
   15008:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   1500c:	e0bffc0b 	ldhu	r2,-16(fp)
   15010:	10000626 	beq	r2,zero,1502c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   15014:	e0bfff17 	ldw	r2,-4(fp)
   15018:	1080020b 	ldhu	r2,8(r2)
   1501c:	10bfffc4 	addi	r2,r2,-1
   15020:	1007883a 	mov	r3,r2
   15024:	e0bfff17 	ldw	r2,-4(fp)
   15028:	10c0020d 	sth	r3,8(r2)
   1502c:	e0bffb17 	ldw	r2,-20(fp)
   15030:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15034:	e0bffe17 	ldw	r2,-8(fp)
   15038:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   1503c:	e0bffc0b 	ldhu	r2,-16(fp)
}
   15040:	e037883a 	mov	sp,fp
   15044:	df000017 	ldw	fp,0(sp)
   15048:	dec00104 	addi	sp,sp,4
   1504c:	f800283a 	ret

00015050 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   15050:	defff904 	addi	sp,sp,-28
   15054:	dfc00615 	stw	ra,24(sp)
   15058:	df000515 	stw	fp,20(sp)
   1505c:	df000504 	addi	fp,sp,20
   15060:	2005883a 	mov	r2,r4
   15064:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15068:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1506c:	008000b4 	movhi	r2,2
   15070:	10bf3c04 	addi	r2,r2,-784
   15074:	10800003 	ldbu	r2,0(r2)
   15078:	10803fcc 	andi	r2,r2,255
   1507c:	10000226 	beq	r2,zero,15088 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   15080:	0005883a 	mov	r2,zero
   15084:	00002d06 	br	1513c <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15088:	0005303a 	rdctl	r2,status
   1508c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15090:	e0fffd17 	ldw	r3,-12(fp)
   15094:	00bfff84 	movi	r2,-2
   15098:	1884703a 	and	r2,r3,r2
   1509c:	1001703a 	wrctl	status,r2
  
  return context;
   150a0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   150a4:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   150a8:	008000b4 	movhi	r2,2
   150ac:	10bf3b04 	addi	r2,r2,-788
   150b0:	10800017 	ldw	r2,0(r2)
   150b4:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   150b8:	008000b4 	movhi	r2,2
   150bc:	10bf3b04 	addi	r2,r2,-788
   150c0:	10800017 	ldw	r2,0(r2)
   150c4:	10000726 	beq	r2,zero,150e4 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   150c8:	008000b4 	movhi	r2,2
   150cc:	10bf3b04 	addi	r2,r2,-788
   150d0:	10800017 	ldw	r2,0(r2)
   150d4:	10c00117 	ldw	r3,4(r2)
   150d8:	008000b4 	movhi	r2,2
   150dc:	10bf3b04 	addi	r2,r2,-788
   150e0:	10c00015 	stw	r3,0(r2)
   150e4:	e0bffb17 	ldw	r2,-20(fp)
   150e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150ec:	e0bffe17 	ldw	r2,-8(fp)
   150f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   150f4:	e0bffc17 	ldw	r2,-16(fp)
   150f8:	10000f26 	beq	r2,zero,15138 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   150fc:	e0bffc17 	ldw	r2,-16(fp)
   15100:	00c000c4 	movi	r3,3
   15104:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   15108:	e0bffc17 	ldw	r2,-16(fp)
   1510c:	e0ffff0b 	ldhu	r3,-4(fp)
   15110:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   15114:	e0bffc17 	ldw	r2,-16(fp)
   15118:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   1511c:	e0bffc17 	ldw	r2,-16(fp)
   15120:	00c00fc4 	movi	r3,63
   15124:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   15128:	e0bffc17 	ldw	r2,-16(fp)
   1512c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   15130:	e13ffc17 	ldw	r4,-16(fp)
   15134:	001058c0 	call	1058c <OS_EventWaitListInit>
    }
    return (pevent);
   15138:	e0bffc17 	ldw	r2,-16(fp)
}
   1513c:	e037883a 	mov	sp,fp
   15140:	dfc00117 	ldw	ra,4(sp)
   15144:	df000017 	ldw	fp,0(sp)
   15148:	dec00204 	addi	sp,sp,8
   1514c:	f800283a 	ret

00015150 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   15150:	defff304 	addi	sp,sp,-52
   15154:	dfc00c15 	stw	ra,48(sp)
   15158:	df000b15 	stw	fp,44(sp)
   1515c:	df000b04 	addi	fp,sp,44
   15160:	e13ffd15 	stw	r4,-12(fp)
   15164:	2805883a 	mov	r2,r5
   15168:	e1bfff15 	stw	r6,-4(fp)
   1516c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15170:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15174:	e0bfff17 	ldw	r2,-4(fp)
   15178:	1000021e 	bne	r2,zero,15184 <OSSemDel+0x34>
        return (pevent);
   1517c:	e0bffd17 	ldw	r2,-12(fp)
   15180:	00008806 	br	153a4 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   15184:	e0bffd17 	ldw	r2,-12(fp)
   15188:	1000051e 	bne	r2,zero,151a0 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1518c:	e0bfff17 	ldw	r2,-4(fp)
   15190:	00c00104 	movi	r3,4
   15194:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15198:	e0bffd17 	ldw	r2,-12(fp)
   1519c:	00008106 	br	153a4 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   151a0:	e0bffd17 	ldw	r2,-12(fp)
   151a4:	10800003 	ldbu	r2,0(r2)
   151a8:	10803fcc 	andi	r2,r2,255
   151ac:	108000e0 	cmpeqi	r2,r2,3
   151b0:	1000051e 	bne	r2,zero,151c8 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   151b4:	e0bfff17 	ldw	r2,-4(fp)
   151b8:	00c00044 	movi	r3,1
   151bc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   151c0:	e0bffd17 	ldw	r2,-12(fp)
   151c4:	00007706 	br	153a4 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   151c8:	008000b4 	movhi	r2,2
   151cc:	10bf3c04 	addi	r2,r2,-784
   151d0:	10800003 	ldbu	r2,0(r2)
   151d4:	10803fcc 	andi	r2,r2,255
   151d8:	10000526 	beq	r2,zero,151f0 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   151dc:	e0bfff17 	ldw	r2,-4(fp)
   151e0:	00c003c4 	movi	r3,15
   151e4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   151e8:	e0bffd17 	ldw	r2,-12(fp)
   151ec:	00006d06 	br	153a4 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   151f0:	0005303a 	rdctl	r2,status
   151f4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   151f8:	e0fff817 	ldw	r3,-32(fp)
   151fc:	00bfff84 	movi	r2,-2
   15200:	1884703a 	and	r2,r3,r2
   15204:	1001703a 	wrctl	status,r2
  
  return context;
   15208:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1520c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   15210:	e0bffd17 	ldw	r2,-12(fp)
   15214:	10800283 	ldbu	r2,10(r2)
   15218:	10803fcc 	andi	r2,r2,255
   1521c:	10000326 	beq	r2,zero,1522c <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   15220:	00800044 	movi	r2,1
   15224:	e0bff505 	stb	r2,-44(fp)
   15228:	00000106 	br	15230 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1522c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   15230:	e0bffe03 	ldbu	r2,-8(fp)
   15234:	10000326 	beq	r2,zero,15244 <OSSemDel+0xf4>
   15238:	10800060 	cmpeqi	r2,r2,1
   1523c:	10002c1e 	bne	r2,zero,152f0 <OSSemDel+0x1a0>
   15240:	00004d06 	br	15378 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   15244:	e0bff503 	ldbu	r2,-44(fp)
   15248:	10001a1e 	bne	r2,zero,152b4 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1524c:	e0bffd17 	ldw	r2,-12(fp)
   15250:	00c00fc4 	movi	r3,63
   15254:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   15258:	e0bffd17 	ldw	r2,-12(fp)
   1525c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   15260:	e0bffd17 	ldw	r2,-12(fp)
   15264:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   15268:	008000b4 	movhi	r2,2
   1526c:	10bf3b04 	addi	r2,r2,-788
   15270:	10c00017 	ldw	r3,0(r2)
   15274:	e0bffd17 	ldw	r2,-12(fp)
   15278:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   1527c:	e0bffd17 	ldw	r2,-12(fp)
   15280:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   15284:	008000b4 	movhi	r2,2
   15288:	10bf3b04 	addi	r2,r2,-788
   1528c:	e0fffd17 	ldw	r3,-12(fp)
   15290:	10c00015 	stw	r3,0(r2)
   15294:	e0bff717 	ldw	r2,-36(fp)
   15298:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1529c:	e0bff917 	ldw	r2,-28(fp)
   152a0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   152a4:	e0bfff17 	ldw	r2,-4(fp)
   152a8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   152ac:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   152b0:	00003b06 	br	153a0 <OSSemDel+0x250>
   152b4:	e0bff717 	ldw	r2,-36(fp)
   152b8:	e0bffa15 	stw	r2,-24(fp)
   152bc:	e0bffa17 	ldw	r2,-24(fp)
   152c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   152c4:	e0bfff17 	ldw	r2,-4(fp)
   152c8:	00c01244 	movi	r3,73
   152cc:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   152d0:	e0bffd17 	ldw	r2,-12(fp)
   152d4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   152d8:	00003106 	br	153a0 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   152dc:	e13ffd17 	ldw	r4,-12(fp)
   152e0:	000b883a 	mov	r5,zero
   152e4:	01800044 	movi	r6,1
   152e8:	000f883a 	mov	r7,zero
   152ec:	000ffec0 	call	ffec <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   152f0:	e0bffd17 	ldw	r2,-12(fp)
   152f4:	10800283 	ldbu	r2,10(r2)
   152f8:	10803fcc 	andi	r2,r2,255
   152fc:	103ff71e 	bne	r2,zero,152dc <__alt_mem_Flash_flash_data+0xf40152dc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   15300:	e0bffd17 	ldw	r2,-12(fp)
   15304:	00c00fc4 	movi	r3,63
   15308:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   1530c:	e0bffd17 	ldw	r2,-12(fp)
   15310:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   15314:	e0bffd17 	ldw	r2,-12(fp)
   15318:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   1531c:	008000b4 	movhi	r2,2
   15320:	10bf3b04 	addi	r2,r2,-788
   15324:	10c00017 	ldw	r3,0(r2)
   15328:	e0bffd17 	ldw	r2,-12(fp)
   1532c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   15330:	e0bffd17 	ldw	r2,-12(fp)
   15334:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   15338:	008000b4 	movhi	r2,2
   1533c:	10bf3b04 	addi	r2,r2,-788
   15340:	e0fffd17 	ldw	r3,-12(fp)
   15344:	10c00015 	stw	r3,0(r2)
   15348:	e0bff717 	ldw	r2,-36(fp)
   1534c:	e0bffb15 	stw	r2,-20(fp)
   15350:	e0bffb17 	ldw	r2,-20(fp)
   15354:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   15358:	e0bff503 	ldbu	r2,-44(fp)
   1535c:	10800058 	cmpnei	r2,r2,1
   15360:	1000011e 	bne	r2,zero,15368 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   15364:	0010a040 	call	10a04 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   15368:	e0bfff17 	ldw	r2,-4(fp)
   1536c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   15370:	e03ff615 	stw	zero,-40(fp)
             break;
   15374:	00000a06 	br	153a0 <OSSemDel+0x250>
   15378:	e0bff717 	ldw	r2,-36(fp)
   1537c:	e0bffc15 	stw	r2,-16(fp)
   15380:	e0bffc17 	ldw	r2,-16(fp)
   15384:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   15388:	e0bfff17 	ldw	r2,-4(fp)
   1538c:	00c001c4 	movi	r3,7
   15390:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   15394:	e0bffd17 	ldw	r2,-12(fp)
   15398:	e0bff615 	stw	r2,-40(fp)
             break;
   1539c:	0001883a 	nop
    }
    return (pevent_return);
   153a0:	e0bff617 	ldw	r2,-40(fp)
}
   153a4:	e037883a 	mov	sp,fp
   153a8:	dfc00117 	ldw	ra,4(sp)
   153ac:	df000017 	ldw	fp,0(sp)
   153b0:	dec00204 	addi	sp,sp,8
   153b4:	f800283a 	ret

000153b8 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   153b8:	defff504 	addi	sp,sp,-44
   153bc:	dfc00a15 	stw	ra,40(sp)
   153c0:	df000915 	stw	fp,36(sp)
   153c4:	df000904 	addi	fp,sp,36
   153c8:	e13ffd15 	stw	r4,-12(fp)
   153cc:	2805883a 	mov	r2,r5
   153d0:	e1bfff15 	stw	r6,-4(fp)
   153d4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   153d8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   153dc:	e0bfff17 	ldw	r2,-4(fp)
   153e0:	1000011e 	bne	r2,zero,153e8 <OSSemPend+0x30>
        return;
   153e4:	00008906 	br	1560c <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   153e8:	e0bffd17 	ldw	r2,-12(fp)
   153ec:	1000041e 	bne	r2,zero,15400 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   153f0:	e0bfff17 	ldw	r2,-4(fp)
   153f4:	00c00104 	movi	r3,4
   153f8:	10c00005 	stb	r3,0(r2)
        return;
   153fc:	00008306 	br	1560c <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   15400:	e0bffd17 	ldw	r2,-12(fp)
   15404:	10800003 	ldbu	r2,0(r2)
   15408:	10803fcc 	andi	r2,r2,255
   1540c:	108000e0 	cmpeqi	r2,r2,3
   15410:	1000041e 	bne	r2,zero,15424 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   15414:	e0bfff17 	ldw	r2,-4(fp)
   15418:	00c00044 	movi	r3,1
   1541c:	10c00005 	stb	r3,0(r2)
        return;
   15420:	00007a06 	br	1560c <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   15424:	008000b4 	movhi	r2,2
   15428:	10bf3c04 	addi	r2,r2,-784
   1542c:	10800003 	ldbu	r2,0(r2)
   15430:	10803fcc 	andi	r2,r2,255
   15434:	10000426 	beq	r2,zero,15448 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   15438:	e0bfff17 	ldw	r2,-4(fp)
   1543c:	00c00084 	movi	r3,2
   15440:	10c00005 	stb	r3,0(r2)
        return;
   15444:	00007106 	br	1560c <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   15448:	008000b4 	movhi	r2,2
   1544c:	10bf2e04 	addi	r2,r2,-840
   15450:	10800003 	ldbu	r2,0(r2)
   15454:	10803fcc 	andi	r2,r2,255
   15458:	10000426 	beq	r2,zero,1546c <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   1545c:	e0bfff17 	ldw	r2,-4(fp)
   15460:	00c00344 	movi	r3,13
   15464:	10c00005 	stb	r3,0(r2)
        return;
   15468:	00006806 	br	1560c <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1546c:	0005303a 	rdctl	r2,status
   15470:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15474:	e0fff817 	ldw	r3,-32(fp)
   15478:	00bfff84 	movi	r2,-2
   1547c:	1884703a 	and	r2,r3,r2
   15480:	1001703a 	wrctl	status,r2
  
  return context;
   15484:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   15488:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   1548c:	e0bffd17 	ldw	r2,-12(fp)
   15490:	1080020b 	ldhu	r2,8(r2)
   15494:	10bfffcc 	andi	r2,r2,65535
   15498:	10000d26 	beq	r2,zero,154d0 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   1549c:	e0bffd17 	ldw	r2,-12(fp)
   154a0:	1080020b 	ldhu	r2,8(r2)
   154a4:	10bfffc4 	addi	r2,r2,-1
   154a8:	1007883a 	mov	r3,r2
   154ac:	e0bffd17 	ldw	r2,-12(fp)
   154b0:	10c0020d 	sth	r3,8(r2)
   154b4:	e0bff717 	ldw	r2,-36(fp)
   154b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   154bc:	e0bff917 	ldw	r2,-28(fp)
   154c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   154c4:	e0bfff17 	ldw	r2,-4(fp)
   154c8:	10000005 	stb	zero,0(r2)
        return;
   154cc:	00004f06 	br	1560c <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   154d0:	008000b4 	movhi	r2,2
   154d4:	10bf3d04 	addi	r2,r2,-780
   154d8:	10c00017 	ldw	r3,0(r2)
   154dc:	008000b4 	movhi	r2,2
   154e0:	10bf3d04 	addi	r2,r2,-780
   154e4:	10800017 	ldw	r2,0(r2)
   154e8:	10800c03 	ldbu	r2,48(r2)
   154ec:	10800054 	ori	r2,r2,1
   154f0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   154f4:	008000b4 	movhi	r2,2
   154f8:	10bf3d04 	addi	r2,r2,-780
   154fc:	10800017 	ldw	r2,0(r2)
   15500:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   15504:	008000b4 	movhi	r2,2
   15508:	10bf3d04 	addi	r2,r2,-780
   1550c:	10800017 	ldw	r2,0(r2)
   15510:	e0fffe0b 	ldhu	r3,-8(fp)
   15514:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   15518:	e13ffd17 	ldw	r4,-12(fp)
   1551c:	00101840 	call	10184 <OS_EventTaskWait>
   15520:	e0bff717 	ldw	r2,-36(fp)
   15524:	e0bffa15 	stw	r2,-24(fp)
   15528:	e0bffa17 	ldw	r2,-24(fp)
   1552c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   15530:	0010a040 	call	10a04 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15534:	0005303a 	rdctl	r2,status
   15538:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1553c:	e0fffb17 	ldw	r3,-20(fp)
   15540:	00bfff84 	movi	r2,-2
   15544:	1884703a 	and	r2,r3,r2
   15548:	1001703a 	wrctl	status,r2
  
  return context;
   1554c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   15550:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   15554:	008000b4 	movhi	r2,2
   15558:	10bf3d04 	addi	r2,r2,-780
   1555c:	10800017 	ldw	r2,0(r2)
   15560:	10800c43 	ldbu	r2,49(r2)
   15564:	10803fcc 	andi	r2,r2,255
   15568:	10000326 	beq	r2,zero,15578 <OSSemPend+0x1c0>
   1556c:	108000a0 	cmpeqi	r2,r2,2
   15570:	1000041e 	bne	r2,zero,15584 <OSSemPend+0x1cc>
   15574:	00000706 	br	15594 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   15578:	e0bfff17 	ldw	r2,-4(fp)
   1557c:	10000005 	stb	zero,0(r2)
             break;
   15580:	00000e06 	br	155bc <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   15584:	e0bfff17 	ldw	r2,-4(fp)
   15588:	00c00384 	movi	r3,14
   1558c:	10c00005 	stb	r3,0(r2)
             break;
   15590:	00000a06 	br	155bc <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   15594:	008000b4 	movhi	r2,2
   15598:	10bf3d04 	addi	r2,r2,-780
   1559c:	10800017 	ldw	r2,0(r2)
   155a0:	1009883a 	mov	r4,r2
   155a4:	e17ffd17 	ldw	r5,-12(fp)
   155a8:	00103dc0 	call	103dc <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   155ac:	e0bfff17 	ldw	r2,-4(fp)
   155b0:	00c00284 	movi	r3,10
   155b4:	10c00005 	stb	r3,0(r2)
             break;
   155b8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   155bc:	008000b4 	movhi	r2,2
   155c0:	10bf3d04 	addi	r2,r2,-780
   155c4:	10800017 	ldw	r2,0(r2)
   155c8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   155cc:	008000b4 	movhi	r2,2
   155d0:	10bf3d04 	addi	r2,r2,-780
   155d4:	10800017 	ldw	r2,0(r2)
   155d8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   155dc:	008000b4 	movhi	r2,2
   155e0:	10bf3d04 	addi	r2,r2,-780
   155e4:	10800017 	ldw	r2,0(r2)
   155e8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   155ec:	008000b4 	movhi	r2,2
   155f0:	10bf3d04 	addi	r2,r2,-780
   155f4:	10800017 	ldw	r2,0(r2)
   155f8:	10000815 	stw	zero,32(r2)
   155fc:	e0bff717 	ldw	r2,-36(fp)
   15600:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15604:	e0bffc17 	ldw	r2,-16(fp)
   15608:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   1560c:	e037883a 	mov	sp,fp
   15610:	dfc00117 	ldw	ra,4(sp)
   15614:	df000017 	ldw	fp,0(sp)
   15618:	dec00204 	addi	sp,sp,8
   1561c:	f800283a 	ret

00015620 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   15620:	defff604 	addi	sp,sp,-40
   15624:	dfc00915 	stw	ra,36(sp)
   15628:	df000815 	stw	fp,32(sp)
   1562c:	df000804 	addi	fp,sp,32
   15630:	e13ffd15 	stw	r4,-12(fp)
   15634:	2805883a 	mov	r2,r5
   15638:	e1bfff15 	stw	r6,-4(fp)
   1563c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15640:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   15644:	e0bfff17 	ldw	r2,-4(fp)
   15648:	1000021e 	bne	r2,zero,15654 <OSSemPendAbort+0x34>
        return (0);
   1564c:	0005883a 	mov	r2,zero
   15650:	00004906 	br	15778 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15654:	e0bffd17 	ldw	r2,-12(fp)
   15658:	1000051e 	bne	r2,zero,15670 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1565c:	e0bfff17 	ldw	r2,-4(fp)
   15660:	00c00104 	movi	r3,4
   15664:	10c00005 	stb	r3,0(r2)
        return (0);
   15668:	0005883a 	mov	r2,zero
   1566c:	00004206 	br	15778 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   15670:	e0bffd17 	ldw	r2,-12(fp)
   15674:	10800003 	ldbu	r2,0(r2)
   15678:	10803fcc 	andi	r2,r2,255
   1567c:	108000e0 	cmpeqi	r2,r2,3
   15680:	1000051e 	bne	r2,zero,15698 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15684:	e0bfff17 	ldw	r2,-4(fp)
   15688:	00c00044 	movi	r3,1
   1568c:	10c00005 	stb	r3,0(r2)
        return (0);
   15690:	0005883a 	mov	r2,zero
   15694:	00003806 	br	15778 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15698:	0005303a 	rdctl	r2,status
   1569c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   156a0:	e0fffa17 	ldw	r3,-24(fp)
   156a4:	00bfff84 	movi	r2,-2
   156a8:	1884703a 	and	r2,r3,r2
   156ac:	1001703a 	wrctl	status,r2
  
  return context;
   156b0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   156b4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   156b8:	e0bffd17 	ldw	r2,-12(fp)
   156bc:	10800283 	ldbu	r2,10(r2)
   156c0:	10803fcc 	andi	r2,r2,255
   156c4:	10002526 	beq	r2,zero,1575c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   156c8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   156cc:	e0bffe03 	ldbu	r2,-8(fp)
   156d0:	10800060 	cmpeqi	r2,r2,1
   156d4:	10000e26 	beq	r2,zero,15710 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   156d8:	00000806 	br	156fc <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   156dc:	e13ffd17 	ldw	r4,-12(fp)
   156e0:	000b883a 	mov	r5,zero
   156e4:	01800044 	movi	r6,1
   156e8:	01c00084 	movi	r7,2
   156ec:	000ffec0 	call	ffec <OS_EventTaskRdy>
                     nbr_tasks++;
   156f0:	e0bff803 	ldbu	r2,-32(fp)
   156f4:	10800044 	addi	r2,r2,1
   156f8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   156fc:	e0bffd17 	ldw	r2,-12(fp)
   15700:	10800283 	ldbu	r2,10(r2)
   15704:	10803fcc 	andi	r2,r2,255
   15708:	103ff41e 	bne	r2,zero,156dc <__alt_mem_Flash_flash_data+0xf40156dc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1570c:	00000906 	br	15734 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   15710:	e13ffd17 	ldw	r4,-12(fp)
   15714:	000b883a 	mov	r5,zero
   15718:	01800044 	movi	r6,1
   1571c:	01c00084 	movi	r7,2
   15720:	000ffec0 	call	ffec <OS_EventTaskRdy>
                 nbr_tasks++;
   15724:	e0bff803 	ldbu	r2,-32(fp)
   15728:	10800044 	addi	r2,r2,1
   1572c:	e0bff805 	stb	r2,-32(fp)
                 break;
   15730:	0001883a 	nop
   15734:	e0bff917 	ldw	r2,-28(fp)
   15738:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1573c:	e0bffb17 	ldw	r2,-20(fp)
   15740:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   15744:	0010a040 	call	10a04 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   15748:	e0bfff17 	ldw	r2,-4(fp)
   1574c:	00c00384 	movi	r3,14
   15750:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   15754:	e0bff803 	ldbu	r2,-32(fp)
   15758:	00000706 	br	15778 <OSSemPendAbort+0x158>
   1575c:	e0bff917 	ldw	r2,-28(fp)
   15760:	e0bffc15 	stw	r2,-16(fp)
   15764:	e0bffc17 	ldw	r2,-16(fp)
   15768:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1576c:	e0bfff17 	ldw	r2,-4(fp)
   15770:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   15774:	0005883a 	mov	r2,zero
}
   15778:	e037883a 	mov	sp,fp
   1577c:	dfc00117 	ldw	ra,4(sp)
   15780:	df000017 	ldw	fp,0(sp)
   15784:	dec00204 	addi	sp,sp,8
   15788:	f800283a 	ret

0001578c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   1578c:	defff804 	addi	sp,sp,-32
   15790:	dfc00715 	stw	ra,28(sp)
   15794:	df000615 	stw	fp,24(sp)
   15798:	df000604 	addi	fp,sp,24
   1579c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   157a0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   157a4:	e0bfff17 	ldw	r2,-4(fp)
   157a8:	1000021e 	bne	r2,zero,157b4 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   157ac:	00800104 	movi	r2,4
   157b0:	00003506 	br	15888 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   157b4:	e0bfff17 	ldw	r2,-4(fp)
   157b8:	10800003 	ldbu	r2,0(r2)
   157bc:	10803fcc 	andi	r2,r2,255
   157c0:	108000e0 	cmpeqi	r2,r2,3
   157c4:	1000021e 	bne	r2,zero,157d0 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   157c8:	00800044 	movi	r2,1
   157cc:	00002e06 	br	15888 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   157d0:	0005303a 	rdctl	r2,status
   157d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   157d8:	e0fffb17 	ldw	r3,-20(fp)
   157dc:	00bfff84 	movi	r2,-2
   157e0:	1884703a 	and	r2,r3,r2
   157e4:	1001703a 	wrctl	status,r2
  
  return context;
   157e8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   157ec:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   157f0:	e0bfff17 	ldw	r2,-4(fp)
   157f4:	10800283 	ldbu	r2,10(r2)
   157f8:	10803fcc 	andi	r2,r2,255
   157fc:	10000c26 	beq	r2,zero,15830 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   15800:	e13fff17 	ldw	r4,-4(fp)
   15804:	000b883a 	mov	r5,zero
   15808:	01800044 	movi	r6,1
   1580c:	000f883a 	mov	r7,zero
   15810:	000ffec0 	call	ffec <OS_EventTaskRdy>
   15814:	e0bffa17 	ldw	r2,-24(fp)
   15818:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1581c:	e0bffc17 	ldw	r2,-16(fp)
   15820:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   15824:	0010a040 	call	10a04 <OS_Sched>
        return (OS_ERR_NONE);
   15828:	0005883a 	mov	r2,zero
   1582c:	00001606 	br	15888 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   15830:	e0bfff17 	ldw	r2,-4(fp)
   15834:	1080020b 	ldhu	r2,8(r2)
   15838:	10ffffcc 	andi	r3,r2,65535
   1583c:	00bfffd4 	movui	r2,65535
   15840:	18800c26 	beq	r3,r2,15874 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   15844:	e0bfff17 	ldw	r2,-4(fp)
   15848:	1080020b 	ldhu	r2,8(r2)
   1584c:	10800044 	addi	r2,r2,1
   15850:	1007883a 	mov	r3,r2
   15854:	e0bfff17 	ldw	r2,-4(fp)
   15858:	10c0020d 	sth	r3,8(r2)
   1585c:	e0bffa17 	ldw	r2,-24(fp)
   15860:	e0bffd15 	stw	r2,-12(fp)
   15864:	e0bffd17 	ldw	r2,-12(fp)
   15868:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1586c:	0005883a 	mov	r2,zero
   15870:	00000506 	br	15888 <OSSemPost+0xfc>
   15874:	e0bffa17 	ldw	r2,-24(fp)
   15878:	e0bffe15 	stw	r2,-8(fp)
   1587c:	e0bffe17 	ldw	r2,-8(fp)
   15880:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   15884:	00800c84 	movi	r2,50
}
   15888:	e037883a 	mov	sp,fp
   1588c:	dfc00117 	ldw	ra,4(sp)
   15890:	df000017 	ldw	fp,0(sp)
   15894:	dec00204 	addi	sp,sp,8
   15898:	f800283a 	ret

0001589c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   1589c:	defff704 	addi	sp,sp,-36
   158a0:	df000815 	stw	fp,32(sp)
   158a4:	df000804 	addi	fp,sp,32
   158a8:	e13ffe15 	stw	r4,-8(fp)
   158ac:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   158b0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   158b4:	e0bffe17 	ldw	r2,-8(fp)
   158b8:	1000021e 	bne	r2,zero,158c4 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   158bc:	00800104 	movi	r2,4
   158c0:	00003606 	br	1599c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   158c4:	e0bfff17 	ldw	r2,-4(fp)
   158c8:	1000021e 	bne	r2,zero,158d4 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   158cc:	00800244 	movi	r2,9
   158d0:	00003206 	br	1599c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   158d4:	e0bffe17 	ldw	r2,-8(fp)
   158d8:	10800003 	ldbu	r2,0(r2)
   158dc:	10803fcc 	andi	r2,r2,255
   158e0:	108000e0 	cmpeqi	r2,r2,3
   158e4:	1000021e 	bne	r2,zero,158f0 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   158e8:	00800044 	movi	r2,1
   158ec:	00002b06 	br	1599c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   158f0:	0005303a 	rdctl	r2,status
   158f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   158f8:	e0fffc17 	ldw	r3,-16(fp)
   158fc:	00bfff84 	movi	r2,-2
   15900:	1884703a 	and	r2,r3,r2
   15904:	1001703a 	wrctl	status,r2
  
  return context;
   15908:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1590c:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   15910:	e0bffe17 	ldw	r2,-8(fp)
   15914:	10c00283 	ldbu	r3,10(r2)
   15918:	e0bfff17 	ldw	r2,-4(fp)
   1591c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   15920:	e0bffe17 	ldw	r2,-8(fp)
   15924:	108002c4 	addi	r2,r2,11
   15928:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   1592c:	e0bfff17 	ldw	r2,-4(fp)
   15930:	10800084 	addi	r2,r2,2
   15934:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15938:	e03ffa05 	stb	zero,-24(fp)
   1593c:	00000b06 	br	1596c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   15940:	e0bff917 	ldw	r2,-28(fp)
   15944:	10c00044 	addi	r3,r2,1
   15948:	e0fff915 	stw	r3,-28(fp)
   1594c:	e0fff817 	ldw	r3,-32(fp)
   15950:	19000044 	addi	r4,r3,1
   15954:	e13ff815 	stw	r4,-32(fp)
   15958:	18c00003 	ldbu	r3,0(r3)
   1595c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15960:	e0bffa03 	ldbu	r2,-24(fp)
   15964:	10800044 	addi	r2,r2,1
   15968:	e0bffa05 	stb	r2,-24(fp)
   1596c:	e0bffa03 	ldbu	r2,-24(fp)
   15970:	108000f0 	cmpltui	r2,r2,3
   15974:	103ff21e 	bne	r2,zero,15940 <__alt_mem_Flash_flash_data+0xf4015940>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   15978:	e0bffe17 	ldw	r2,-8(fp)
   1597c:	10c0020b 	ldhu	r3,8(r2)
   15980:	e0bfff17 	ldw	r2,-4(fp)
   15984:	10c0000d 	sth	r3,0(r2)
   15988:	e0bffb17 	ldw	r2,-20(fp)
   1598c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15990:	e0bffd17 	ldw	r2,-12(fp)
   15994:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15998:	0005883a 	mov	r2,zero
}
   1599c:	e037883a 	mov	sp,fp
   159a0:	df000017 	ldw	fp,0(sp)
   159a4:	dec00104 	addi	sp,sp,4
   159a8:	f800283a 	ret

000159ac <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   159ac:	defff904 	addi	sp,sp,-28
   159b0:	df000615 	stw	fp,24(sp)
   159b4:	df000604 	addi	fp,sp,24
   159b8:	e13ffd15 	stw	r4,-12(fp)
   159bc:	2805883a 	mov	r2,r5
   159c0:	e1bfff15 	stw	r6,-4(fp)
   159c4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   159c8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   159cc:	e0bfff17 	ldw	r2,-4(fp)
   159d0:	1000011e 	bne	r2,zero,159d8 <OSSemSet+0x2c>
        return;
   159d4:	00003006 	br	15a98 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   159d8:	e0bffd17 	ldw	r2,-12(fp)
   159dc:	1000041e 	bne	r2,zero,159f0 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   159e0:	e0bfff17 	ldw	r2,-4(fp)
   159e4:	00c00104 	movi	r3,4
   159e8:	10c00005 	stb	r3,0(r2)
        return;
   159ec:	00002a06 	br	15a98 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   159f0:	e0bffd17 	ldw	r2,-12(fp)
   159f4:	10800003 	ldbu	r2,0(r2)
   159f8:	10803fcc 	andi	r2,r2,255
   159fc:	108000e0 	cmpeqi	r2,r2,3
   15a00:	1000041e 	bne	r2,zero,15a14 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   15a04:	e0bfff17 	ldw	r2,-4(fp)
   15a08:	00c00044 	movi	r3,1
   15a0c:	10c00005 	stb	r3,0(r2)
        return;
   15a10:	00002106 	br	15a98 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15a14:	0005303a 	rdctl	r2,status
   15a18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15a1c:	e0fffb17 	ldw	r3,-20(fp)
   15a20:	00bfff84 	movi	r2,-2
   15a24:	1884703a 	and	r2,r3,r2
   15a28:	1001703a 	wrctl	status,r2
  
  return context;
   15a2c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   15a30:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   15a34:	e0bfff17 	ldw	r2,-4(fp)
   15a38:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   15a3c:	e0bffd17 	ldw	r2,-12(fp)
   15a40:	1080020b 	ldhu	r2,8(r2)
   15a44:	10bfffcc 	andi	r2,r2,65535
   15a48:	10000426 	beq	r2,zero,15a5c <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   15a4c:	e0bffd17 	ldw	r2,-12(fp)
   15a50:	e0fffe0b 	ldhu	r3,-8(fp)
   15a54:	10c0020d 	sth	r3,8(r2)
   15a58:	00000b06 	br	15a88 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   15a5c:	e0bffd17 	ldw	r2,-12(fp)
   15a60:	10800283 	ldbu	r2,10(r2)
   15a64:	10803fcc 	andi	r2,r2,255
   15a68:	1000041e 	bne	r2,zero,15a7c <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   15a6c:	e0bffd17 	ldw	r2,-12(fp)
   15a70:	e0fffe0b 	ldhu	r3,-8(fp)
   15a74:	10c0020d 	sth	r3,8(r2)
   15a78:	00000306 	br	15a88 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   15a7c:	e0bfff17 	ldw	r2,-4(fp)
   15a80:	00c01244 	movi	r3,73
   15a84:	10c00005 	stb	r3,0(r2)
   15a88:	e0bffa17 	ldw	r2,-24(fp)
   15a8c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15a90:	e0bffc17 	ldw	r2,-16(fp)
   15a94:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   15a98:	e037883a 	mov	sp,fp
   15a9c:	df000017 	ldw	fp,0(sp)
   15aa0:	dec00104 	addi	sp,sp,4
   15aa4:	f800283a 	ret

00015aa8 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   15aa8:	defff104 	addi	sp,sp,-60
   15aac:	dfc00e15 	stw	ra,56(sp)
   15ab0:	df000d15 	stw	fp,52(sp)
   15ab4:	df000d04 	addi	fp,sp,52
   15ab8:	2007883a 	mov	r3,r4
   15abc:	2805883a 	mov	r2,r5
   15ac0:	e0fffe05 	stb	r3,-8(fp)
   15ac4:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   15ac8:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   15acc:	e0bffe03 	ldbu	r2,-8(fp)
   15ad0:	10800530 	cmpltui	r2,r2,20
   15ad4:	1000051e 	bne	r2,zero,15aec <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   15ad8:	e0bffe03 	ldbu	r2,-8(fp)
   15adc:	10803fe0 	cmpeqi	r2,r2,255
   15ae0:	1000021e 	bne	r2,zero,15aec <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   15ae4:	00800a84 	movi	r2,42
   15ae8:	00013a06 	br	15fd4 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   15aec:	e0bfff03 	ldbu	r2,-4(fp)
   15af0:	10800530 	cmpltui	r2,r2,20
   15af4:	1000021e 	bne	r2,zero,15b00 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   15af8:	00800a84 	movi	r2,42
   15afc:	00013506 	br	15fd4 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15b00:	0005303a 	rdctl	r2,status
   15b04:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15b08:	e0fff917 	ldw	r3,-28(fp)
   15b0c:	00bfff84 	movi	r2,-2
   15b10:	1884703a 	and	r2,r3,r2
   15b14:	1001703a 	wrctl	status,r2
  
  return context;
   15b18:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15b1c:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   15b20:	e0ffff03 	ldbu	r3,-4(fp)
   15b24:	008000f4 	movhi	r2,3
   15b28:	10b5b804 	addi	r2,r2,-10528
   15b2c:	18c7883a 	add	r3,r3,r3
   15b30:	18c7883a 	add	r3,r3,r3
   15b34:	10c5883a 	add	r2,r2,r3
   15b38:	10800017 	ldw	r2,0(r2)
   15b3c:	10000626 	beq	r2,zero,15b58 <OSTaskChangePrio+0xb0>
   15b40:	e0bff517 	ldw	r2,-44(fp)
   15b44:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b48:	e0bffa17 	ldw	r2,-24(fp)
   15b4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   15b50:	00800a04 	movi	r2,40
   15b54:	00011f06 	br	15fd4 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   15b58:	e0bffe03 	ldbu	r2,-8(fp)
   15b5c:	10803fd8 	cmpnei	r2,r2,255
   15b60:	1000051e 	bne	r2,zero,15b78 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   15b64:	008000b4 	movhi	r2,2
   15b68:	10bf3d04 	addi	r2,r2,-780
   15b6c:	10800017 	ldw	r2,0(r2)
   15b70:	10800c83 	ldbu	r2,50(r2)
   15b74:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   15b78:	e0fffe03 	ldbu	r3,-8(fp)
   15b7c:	008000f4 	movhi	r2,3
   15b80:	10b5b804 	addi	r2,r2,-10528
   15b84:	18c7883a 	add	r3,r3,r3
   15b88:	18c7883a 	add	r3,r3,r3
   15b8c:	10c5883a 	add	r2,r2,r3
   15b90:	10800017 	ldw	r2,0(r2)
   15b94:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   15b98:	e0bff617 	ldw	r2,-40(fp)
   15b9c:	1000061e 	bne	r2,zero,15bb8 <OSTaskChangePrio+0x110>
   15ba0:	e0bff517 	ldw	r2,-44(fp)
   15ba4:	e0bffb15 	stw	r2,-20(fp)
   15ba8:	e0bffb17 	ldw	r2,-20(fp)
   15bac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   15bb0:	00800a44 	movi	r2,41
   15bb4:	00010706 	br	15fd4 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   15bb8:	e0bff617 	ldw	r2,-40(fp)
   15bbc:	10800058 	cmpnei	r2,r2,1
   15bc0:	1000061e 	bne	r2,zero,15bdc <OSTaskChangePrio+0x134>
   15bc4:	e0bff517 	ldw	r2,-44(fp)
   15bc8:	e0bffc15 	stw	r2,-16(fp)
   15bcc:	e0bffc17 	ldw	r2,-16(fp)
   15bd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   15bd4:	008010c4 	movi	r2,67
   15bd8:	0000fe06 	br	15fd4 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   15bdc:	e0bfff03 	ldbu	r2,-4(fp)
   15be0:	1004d0fa 	srli	r2,r2,3
   15be4:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   15be8:	e0bfff03 	ldbu	r2,-4(fp)
   15bec:	108001cc 	andi	r2,r2,7
   15bf0:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   15bf4:	e0bff703 	ldbu	r2,-36(fp)
   15bf8:	00c00044 	movi	r3,1
   15bfc:	1884983a 	sll	r2,r3,r2
   15c00:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   15c04:	e0bff743 	ldbu	r2,-35(fp)
   15c08:	00c00044 	movi	r3,1
   15c0c:	1884983a 	sll	r2,r3,r2
   15c10:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   15c14:	e0fffe03 	ldbu	r3,-8(fp)
   15c18:	008000f4 	movhi	r2,3
   15c1c:	10b5b804 	addi	r2,r2,-10528
   15c20:	18c7883a 	add	r3,r3,r3
   15c24:	18c7883a 	add	r3,r3,r3
   15c28:	10c5883a 	add	r2,r2,r3
   15c2c:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   15c30:	e0ffff03 	ldbu	r3,-4(fp)
   15c34:	008000f4 	movhi	r2,3
   15c38:	10b5b804 	addi	r2,r2,-10528
   15c3c:	18c7883a 	add	r3,r3,r3
   15c40:	18c7883a 	add	r3,r3,r3
   15c44:	10c5883a 	add	r2,r2,r3
   15c48:	e0fff617 	ldw	r3,-40(fp)
   15c4c:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   15c50:	e0bff617 	ldw	r2,-40(fp)
   15c54:	10800d03 	ldbu	r2,52(r2)
   15c58:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   15c5c:	e0bff617 	ldw	r2,-40(fp)
   15c60:	10800d83 	ldbu	r2,54(r2)
   15c64:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   15c68:	e0bff617 	ldw	r2,-40(fp)
   15c6c:	10800d43 	ldbu	r2,53(r2)
   15c70:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   15c74:	e0fff803 	ldbu	r3,-32(fp)
   15c78:	008000b4 	movhi	r2,2
   15c7c:	10bf3a44 	addi	r2,r2,-791
   15c80:	10c5883a 	add	r2,r2,r3
   15c84:	10c00003 	ldbu	r3,0(r2)
   15c88:	e0bff883 	ldbu	r2,-30(fp)
   15c8c:	1884703a 	and	r2,r3,r2
   15c90:	10803fcc 	andi	r2,r2,255
   15c94:	10003726 	beq	r2,zero,15d74 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   15c98:	e0fff803 	ldbu	r3,-32(fp)
   15c9c:	e13ff803 	ldbu	r4,-32(fp)
   15ca0:	008000b4 	movhi	r2,2
   15ca4:	10bf3a44 	addi	r2,r2,-791
   15ca8:	1105883a 	add	r2,r2,r4
   15cac:	10800003 	ldbu	r2,0(r2)
   15cb0:	1009883a 	mov	r4,r2
   15cb4:	e0bff883 	ldbu	r2,-30(fp)
   15cb8:	0084303a 	nor	r2,zero,r2
   15cbc:	2084703a 	and	r2,r4,r2
   15cc0:	1009883a 	mov	r4,r2
   15cc4:	008000b4 	movhi	r2,2
   15cc8:	10bf3a44 	addi	r2,r2,-791
   15ccc:	10c5883a 	add	r2,r2,r3
   15cd0:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   15cd4:	e0fff803 	ldbu	r3,-32(fp)
   15cd8:	008000b4 	movhi	r2,2
   15cdc:	10bf3a44 	addi	r2,r2,-791
   15ce0:	10c5883a 	add	r2,r2,r3
   15ce4:	10800003 	ldbu	r2,0(r2)
   15ce8:	10803fcc 	andi	r2,r2,255
   15cec:	10000b1e 	bne	r2,zero,15d1c <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   15cf0:	e0bff843 	ldbu	r2,-31(fp)
   15cf4:	0084303a 	nor	r2,zero,r2
   15cf8:	1007883a 	mov	r3,r2
   15cfc:	008000b4 	movhi	r2,2
   15d00:	10bf3a04 	addi	r2,r2,-792
   15d04:	10800003 	ldbu	r2,0(r2)
   15d08:	1884703a 	and	r2,r3,r2
   15d0c:	1007883a 	mov	r3,r2
   15d10:	008000b4 	movhi	r2,2
   15d14:	10bf3a04 	addi	r2,r2,-792
   15d18:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   15d1c:	008000b4 	movhi	r2,2
   15d20:	10bf3a04 	addi	r2,r2,-792
   15d24:	10c00003 	ldbu	r3,0(r2)
   15d28:	e0bff783 	ldbu	r2,-34(fp)
   15d2c:	1884b03a 	or	r2,r3,r2
   15d30:	1007883a 	mov	r3,r2
   15d34:	008000b4 	movhi	r2,2
   15d38:	10bf3a04 	addi	r2,r2,-792
   15d3c:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   15d40:	e0fff703 	ldbu	r3,-36(fp)
   15d44:	e13ff703 	ldbu	r4,-36(fp)
   15d48:	008000b4 	movhi	r2,2
   15d4c:	10bf3a44 	addi	r2,r2,-791
   15d50:	1105883a 	add	r2,r2,r4
   15d54:	11000003 	ldbu	r4,0(r2)
   15d58:	e0bff7c3 	ldbu	r2,-33(fp)
   15d5c:	2084b03a 	or	r2,r4,r2
   15d60:	1009883a 	mov	r4,r2
   15d64:	008000b4 	movhi	r2,2
   15d68:	10bf3a44 	addi	r2,r2,-791
   15d6c:	10c5883a 	add	r2,r2,r3
   15d70:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   15d74:	e0bff617 	ldw	r2,-40(fp)
   15d78:	10800717 	ldw	r2,28(r2)
   15d7c:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   15d80:	e0bff317 	ldw	r2,-52(fp)
   15d84:	10003326 	beq	r2,zero,15e54 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   15d88:	e0bff803 	ldbu	r2,-32(fp)
   15d8c:	e0fff803 	ldbu	r3,-32(fp)
   15d90:	e13ff317 	ldw	r4,-52(fp)
   15d94:	20c7883a 	add	r3,r4,r3
   15d98:	18c00204 	addi	r3,r3,8
   15d9c:	18c000c3 	ldbu	r3,3(r3)
   15da0:	1809883a 	mov	r4,r3
   15da4:	e0fff883 	ldbu	r3,-30(fp)
   15da8:	00c6303a 	nor	r3,zero,r3
   15dac:	20c6703a 	and	r3,r4,r3
   15db0:	1809883a 	mov	r4,r3
   15db4:	e0fff317 	ldw	r3,-52(fp)
   15db8:	1885883a 	add	r2,r3,r2
   15dbc:	10800204 	addi	r2,r2,8
   15dc0:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   15dc4:	e0bff803 	ldbu	r2,-32(fp)
   15dc8:	e0fff317 	ldw	r3,-52(fp)
   15dcc:	1885883a 	add	r2,r3,r2
   15dd0:	10800204 	addi	r2,r2,8
   15dd4:	108000c3 	ldbu	r2,3(r2)
   15dd8:	10803fcc 	andi	r2,r2,255
   15ddc:	1000091e 	bne	r2,zero,15e04 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   15de0:	e0bff317 	ldw	r2,-52(fp)
   15de4:	10800283 	ldbu	r2,10(r2)
   15de8:	1007883a 	mov	r3,r2
   15dec:	e0bff843 	ldbu	r2,-31(fp)
   15df0:	0084303a 	nor	r2,zero,r2
   15df4:	1884703a 	and	r2,r3,r2
   15df8:	1007883a 	mov	r3,r2
   15dfc:	e0bff317 	ldw	r2,-52(fp)
   15e00:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   15e04:	e0bff317 	ldw	r2,-52(fp)
   15e08:	10c00283 	ldbu	r3,10(r2)
   15e0c:	e0bff783 	ldbu	r2,-34(fp)
   15e10:	1884b03a 	or	r2,r3,r2
   15e14:	1007883a 	mov	r3,r2
   15e18:	e0bff317 	ldw	r2,-52(fp)
   15e1c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   15e20:	e0bff703 	ldbu	r2,-36(fp)
   15e24:	e0fff703 	ldbu	r3,-36(fp)
   15e28:	e13ff317 	ldw	r4,-52(fp)
   15e2c:	20c7883a 	add	r3,r4,r3
   15e30:	18c00204 	addi	r3,r3,8
   15e34:	190000c3 	ldbu	r4,3(r3)
   15e38:	e0fff7c3 	ldbu	r3,-33(fp)
   15e3c:	20c6b03a 	or	r3,r4,r3
   15e40:	1809883a 	mov	r4,r3
   15e44:	e0fff317 	ldw	r3,-52(fp)
   15e48:	1885883a 	add	r2,r3,r2
   15e4c:	10800204 	addi	r2,r2,8
   15e50:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   15e54:	e0bff617 	ldw	r2,-40(fp)
   15e58:	10800817 	ldw	r2,32(r2)
   15e5c:	10004226 	beq	r2,zero,15f68 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   15e60:	e0bff617 	ldw	r2,-40(fp)
   15e64:	10800817 	ldw	r2,32(r2)
   15e68:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   15e6c:	e0bff417 	ldw	r2,-48(fp)
   15e70:	10800017 	ldw	r2,0(r2)
   15e74:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   15e78:	00003906 	br	15f60 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   15e7c:	e0bff803 	ldbu	r2,-32(fp)
   15e80:	e0fff803 	ldbu	r3,-32(fp)
   15e84:	e13ff317 	ldw	r4,-52(fp)
   15e88:	20c7883a 	add	r3,r4,r3
   15e8c:	18c00204 	addi	r3,r3,8
   15e90:	18c000c3 	ldbu	r3,3(r3)
   15e94:	1809883a 	mov	r4,r3
   15e98:	e0fff883 	ldbu	r3,-30(fp)
   15e9c:	00c6303a 	nor	r3,zero,r3
   15ea0:	20c6703a 	and	r3,r4,r3
   15ea4:	1809883a 	mov	r4,r3
   15ea8:	e0fff317 	ldw	r3,-52(fp)
   15eac:	1885883a 	add	r2,r3,r2
   15eb0:	10800204 	addi	r2,r2,8
   15eb4:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   15eb8:	e0bff803 	ldbu	r2,-32(fp)
   15ebc:	e0fff317 	ldw	r3,-52(fp)
   15ec0:	1885883a 	add	r2,r3,r2
   15ec4:	10800204 	addi	r2,r2,8
   15ec8:	108000c3 	ldbu	r2,3(r2)
   15ecc:	10803fcc 	andi	r2,r2,255
   15ed0:	1000091e 	bne	r2,zero,15ef8 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   15ed4:	e0bff317 	ldw	r2,-52(fp)
   15ed8:	10800283 	ldbu	r2,10(r2)
   15edc:	1007883a 	mov	r3,r2
   15ee0:	e0bff843 	ldbu	r2,-31(fp)
   15ee4:	0084303a 	nor	r2,zero,r2
   15ee8:	1884703a 	and	r2,r3,r2
   15eec:	1007883a 	mov	r3,r2
   15ef0:	e0bff317 	ldw	r2,-52(fp)
   15ef4:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   15ef8:	e0bff317 	ldw	r2,-52(fp)
   15efc:	10c00283 	ldbu	r3,10(r2)
   15f00:	e0bff783 	ldbu	r2,-34(fp)
   15f04:	1884b03a 	or	r2,r3,r2
   15f08:	1007883a 	mov	r3,r2
   15f0c:	e0bff317 	ldw	r2,-52(fp)
   15f10:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   15f14:	e0bff703 	ldbu	r2,-36(fp)
   15f18:	e0fff703 	ldbu	r3,-36(fp)
   15f1c:	e13ff317 	ldw	r4,-52(fp)
   15f20:	20c7883a 	add	r3,r4,r3
   15f24:	18c00204 	addi	r3,r3,8
   15f28:	190000c3 	ldbu	r4,3(r3)
   15f2c:	e0fff7c3 	ldbu	r3,-33(fp)
   15f30:	20c6b03a 	or	r3,r4,r3
   15f34:	1809883a 	mov	r4,r3
   15f38:	e0fff317 	ldw	r3,-52(fp)
   15f3c:	1885883a 	add	r2,r3,r2
   15f40:	10800204 	addi	r2,r2,8
   15f44:	110000c5 	stb	r4,3(r2)
            pevents++;
   15f48:	e0bff417 	ldw	r2,-48(fp)
   15f4c:	10800104 	addi	r2,r2,4
   15f50:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   15f54:	e0bff417 	ldw	r2,-48(fp)
   15f58:	10800017 	ldw	r2,0(r2)
   15f5c:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   15f60:	e0bff317 	ldw	r2,-52(fp)
   15f64:	103fc51e 	bne	r2,zero,15e7c <__alt_mem_Flash_flash_data+0xf4015e7c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   15f68:	e0bff617 	ldw	r2,-40(fp)
   15f6c:	e0ffff03 	ldbu	r3,-4(fp)
   15f70:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   15f74:	e0bff617 	ldw	r2,-40(fp)
   15f78:	e0fff703 	ldbu	r3,-36(fp)
   15f7c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   15f80:	e0bff617 	ldw	r2,-40(fp)
   15f84:	e0fff743 	ldbu	r3,-35(fp)
   15f88:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   15f8c:	e0bff617 	ldw	r2,-40(fp)
   15f90:	e0fff783 	ldbu	r3,-34(fp)
   15f94:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   15f98:	e0bff617 	ldw	r2,-40(fp)
   15f9c:	e0fff7c3 	ldbu	r3,-33(fp)
   15fa0:	10c00d45 	stb	r3,53(r2)
   15fa4:	e0bff517 	ldw	r2,-44(fp)
   15fa8:	e0bffd15 	stw	r2,-12(fp)
   15fac:	e0bffd17 	ldw	r2,-12(fp)
   15fb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   15fb4:	008000b4 	movhi	r2,2
   15fb8:	10bf2e44 	addi	r2,r2,-839
   15fbc:	10800003 	ldbu	r2,0(r2)
   15fc0:	10803fcc 	andi	r2,r2,255
   15fc4:	10800058 	cmpnei	r2,r2,1
   15fc8:	1000011e 	bne	r2,zero,15fd0 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   15fcc:	0010a040 	call	10a04 <OS_Sched>
    }
    return (OS_ERR_NONE);
   15fd0:	0005883a 	mov	r2,zero
}
   15fd4:	e037883a 	mov	sp,fp
   15fd8:	dfc00117 	ldw	ra,4(sp)
   15fdc:	df000017 	ldw	fp,0(sp)
   15fe0:	dec00204 	addi	sp,sp,8
   15fe4:	f800283a 	ret

00015fe8 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   15fe8:	deffee04 	addi	sp,sp,-72
   15fec:	dfc01115 	stw	ra,68(sp)
   15ff0:	df001015 	stw	fp,64(sp)
   15ff4:	df001004 	addi	fp,sp,64
   15ff8:	e13ffc15 	stw	r4,-16(fp)
   15ffc:	e17ffd15 	stw	r5,-12(fp)
   16000:	e1bffe15 	stw	r6,-8(fp)
   16004:	3805883a 	mov	r2,r7
   16008:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1600c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   16010:	e0bfff03 	ldbu	r2,-4(fp)
   16014:	10800570 	cmpltui	r2,r2,21
   16018:	1000021e 	bne	r2,zero,16024 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   1601c:	00800a84 	movi	r2,42
   16020:	00005b06 	br	16190 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16024:	0005303a 	rdctl	r2,status
   16028:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1602c:	e0fff617 	ldw	r3,-40(fp)
   16030:	00bfff84 	movi	r2,-2
   16034:	1884703a 	and	r2,r3,r2
   16038:	1001703a 	wrctl	status,r2
  
  return context;
   1603c:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16040:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   16044:	008000b4 	movhi	r2,2
   16048:	10bf3c04 	addi	r2,r2,-784
   1604c:	10800003 	ldbu	r2,0(r2)
   16050:	10803fcc 	andi	r2,r2,255
   16054:	10000626 	beq	r2,zero,16070 <OSTaskCreate+0x88>
   16058:	e0bff317 	ldw	r2,-52(fp)
   1605c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16060:	e0bff717 	ldw	r2,-36(fp)
   16064:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   16068:	00800f04 	movi	r2,60
   1606c:	00004806 	br	16190 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   16070:	e0ffff03 	ldbu	r3,-4(fp)
   16074:	008000f4 	movhi	r2,3
   16078:	10b5b804 	addi	r2,r2,-10528
   1607c:	18c7883a 	add	r3,r3,r3
   16080:	18c7883a 	add	r3,r3,r3
   16084:	10c5883a 	add	r2,r2,r3
   16088:	10800017 	ldw	r2,0(r2)
   1608c:	10003b1e 	bne	r2,zero,1617c <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   16090:	e0ffff03 	ldbu	r3,-4(fp)
   16094:	008000f4 	movhi	r2,3
   16098:	10b5b804 	addi	r2,r2,-10528
   1609c:	18c7883a 	add	r3,r3,r3
   160a0:	18c7883a 	add	r3,r3,r3
   160a4:	10c5883a 	add	r2,r2,r3
   160a8:	00c00044 	movi	r3,1
   160ac:	10c00015 	stw	r3,0(r2)
   160b0:	e0bff317 	ldw	r2,-52(fp)
   160b4:	e0bff815 	stw	r2,-32(fp)
   160b8:	e0bff817 	ldw	r2,-32(fp)
   160bc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   160c0:	e13ffc17 	ldw	r4,-16(fp)
   160c4:	e17ffd17 	ldw	r5,-12(fp)
   160c8:	e1bffe17 	ldw	r6,-8(fp)
   160cc:	000f883a 	mov	r7,zero
   160d0:	001acdc0 	call	1acdc <OSTaskStkInit>
   160d4:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   160d8:	e0bfff03 	ldbu	r2,-4(fp)
   160dc:	d8000015 	stw	zero,0(sp)
   160e0:	d8000115 	stw	zero,4(sp)
   160e4:	d8000215 	stw	zero,8(sp)
   160e8:	1009883a 	mov	r4,r2
   160ec:	e17ff417 	ldw	r5,-48(fp)
   160f0:	000d883a 	mov	r6,zero
   160f4:	000f883a 	mov	r7,zero
   160f8:	0010e080 	call	10e08 <OS_TCBInit>
   160fc:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   16100:	e0bff503 	ldbu	r2,-44(fp)
   16104:	1000081e 	bne	r2,zero,16128 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   16108:	008000b4 	movhi	r2,2
   1610c:	10bf2e44 	addi	r2,r2,-839
   16110:	10800003 	ldbu	r2,0(r2)
   16114:	10803fcc 	andi	r2,r2,255
   16118:	10800058 	cmpnei	r2,r2,1
   1611c:	1000151e 	bne	r2,zero,16174 <OSTaskCreate+0x18c>
                OS_Sched();
   16120:	0010a040 	call	10a04 <OS_Sched>
   16124:	00001306 	br	16174 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16128:	0005303a 	rdctl	r2,status
   1612c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16130:	e0fff917 	ldw	r3,-28(fp)
   16134:	00bfff84 	movi	r2,-2
   16138:	1884703a 	and	r2,r3,r2
   1613c:	1001703a 	wrctl	status,r2
  
  return context;
   16140:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   16144:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   16148:	e0ffff03 	ldbu	r3,-4(fp)
   1614c:	008000f4 	movhi	r2,3
   16150:	10b5b804 	addi	r2,r2,-10528
   16154:	18c7883a 	add	r3,r3,r3
   16158:	18c7883a 	add	r3,r3,r3
   1615c:	10c5883a 	add	r2,r2,r3
   16160:	10000015 	stw	zero,0(r2)
   16164:	e0bff317 	ldw	r2,-52(fp)
   16168:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1616c:	e0bffa17 	ldw	r2,-24(fp)
   16170:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   16174:	e0bff503 	ldbu	r2,-44(fp)
   16178:	00000506 	br	16190 <OSTaskCreate+0x1a8>
   1617c:	e0bff317 	ldw	r2,-52(fp)
   16180:	e0bffb15 	stw	r2,-20(fp)
   16184:	e0bffb17 	ldw	r2,-20(fp)
   16188:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1618c:	00800a04 	movi	r2,40
}
   16190:	e037883a 	mov	sp,fp
   16194:	dfc00117 	ldw	ra,4(sp)
   16198:	df000017 	ldw	fp,0(sp)
   1619c:	dec00204 	addi	sp,sp,8
   161a0:	f800283a 	ret

000161a4 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   161a4:	deffec04 	addi	sp,sp,-80
   161a8:	dfc01315 	stw	ra,76(sp)
   161ac:	df001215 	stw	fp,72(sp)
   161b0:	df001204 	addi	fp,sp,72
   161b4:	e13ffa15 	stw	r4,-24(fp)
   161b8:	e17ffb15 	stw	r5,-20(fp)
   161bc:	e1bffc15 	stw	r6,-16(fp)
   161c0:	3809883a 	mov	r4,r7
   161c4:	e0c00217 	ldw	r3,8(fp)
   161c8:	e0800617 	ldw	r2,24(fp)
   161cc:	e13ffd05 	stb	r4,-12(fp)
   161d0:	e0fffe0d 	sth	r3,-8(fp)
   161d4:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   161d8:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   161dc:	e0bffd03 	ldbu	r2,-12(fp)
   161e0:	10800570 	cmpltui	r2,r2,21
   161e4:	1000021e 	bne	r2,zero,161f0 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   161e8:	00800a84 	movi	r2,42
   161ec:	00006306 	br	1637c <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   161f0:	0005303a 	rdctl	r2,status
   161f4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   161f8:	e0fff417 	ldw	r3,-48(fp)
   161fc:	00bfff84 	movi	r2,-2
   16200:	1884703a 	and	r2,r3,r2
   16204:	1001703a 	wrctl	status,r2
  
  return context;
   16208:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1620c:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   16210:	008000b4 	movhi	r2,2
   16214:	10bf3c04 	addi	r2,r2,-784
   16218:	10800003 	ldbu	r2,0(r2)
   1621c:	10803fcc 	andi	r2,r2,255
   16220:	10000626 	beq	r2,zero,1623c <OSTaskCreateExt+0x98>
   16224:	e0bff117 	ldw	r2,-60(fp)
   16228:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1622c:	e0bff517 	ldw	r2,-44(fp)
   16230:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   16234:	00800f04 	movi	r2,60
   16238:	00005006 	br	1637c <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1623c:	e0fffd03 	ldbu	r3,-12(fp)
   16240:	008000f4 	movhi	r2,3
   16244:	10b5b804 	addi	r2,r2,-10528
   16248:	18c7883a 	add	r3,r3,r3
   1624c:	18c7883a 	add	r3,r3,r3
   16250:	10c5883a 	add	r2,r2,r3
   16254:	10800017 	ldw	r2,0(r2)
   16258:	1000431e 	bne	r2,zero,16368 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1625c:	e0fffd03 	ldbu	r3,-12(fp)
   16260:	008000f4 	movhi	r2,3
   16264:	10b5b804 	addi	r2,r2,-10528
   16268:	18c7883a 	add	r3,r3,r3
   1626c:	18c7883a 	add	r3,r3,r3
   16270:	10c5883a 	add	r2,r2,r3
   16274:	00c00044 	movi	r3,1
   16278:	10c00015 	stw	r3,0(r2)
   1627c:	e0bff117 	ldw	r2,-60(fp)
   16280:	e0bff615 	stw	r2,-40(fp)
   16284:	e0bff617 	ldw	r2,-40(fp)
   16288:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   1628c:	e0bfff0b 	ldhu	r2,-4(fp)
   16290:	e1000317 	ldw	r4,12(fp)
   16294:	e1400417 	ldw	r5,16(fp)
   16298:	100d883a 	mov	r6,r2
   1629c:	00173300 	call	17330 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   162a0:	e0bfff0b 	ldhu	r2,-4(fp)
   162a4:	e13ffa17 	ldw	r4,-24(fp)
   162a8:	e17ffb17 	ldw	r5,-20(fp)
   162ac:	e1bffc17 	ldw	r6,-16(fp)
   162b0:	100f883a 	mov	r7,r2
   162b4:	001acdc0 	call	1acdc <OSTaskStkInit>
   162b8:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   162bc:	e13ffd03 	ldbu	r4,-12(fp)
   162c0:	e1fffe0b 	ldhu	r7,-8(fp)
   162c4:	e0bfff0b 	ldhu	r2,-4(fp)
   162c8:	e0c00417 	ldw	r3,16(fp)
   162cc:	d8c00015 	stw	r3,0(sp)
   162d0:	e0c00517 	ldw	r3,20(fp)
   162d4:	d8c00115 	stw	r3,4(sp)
   162d8:	d8800215 	stw	r2,8(sp)
   162dc:	e17ff217 	ldw	r5,-56(fp)
   162e0:	e1800317 	ldw	r6,12(fp)
   162e4:	0010e080 	call	10e08 <OS_TCBInit>
   162e8:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   162ec:	e0bff303 	ldbu	r2,-52(fp)
   162f0:	1000081e 	bne	r2,zero,16314 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   162f4:	008000b4 	movhi	r2,2
   162f8:	10bf2e44 	addi	r2,r2,-839
   162fc:	10800003 	ldbu	r2,0(r2)
   16300:	10803fcc 	andi	r2,r2,255
   16304:	10800058 	cmpnei	r2,r2,1
   16308:	1000151e 	bne	r2,zero,16360 <OSTaskCreateExt+0x1bc>
                OS_Sched();
   1630c:	0010a040 	call	10a04 <OS_Sched>
   16310:	00001306 	br	16360 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16314:	0005303a 	rdctl	r2,status
   16318:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1631c:	e0fff717 	ldw	r3,-36(fp)
   16320:	00bfff84 	movi	r2,-2
   16324:	1884703a 	and	r2,r3,r2
   16328:	1001703a 	wrctl	status,r2
  
  return context;
   1632c:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   16330:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   16334:	e0fffd03 	ldbu	r3,-12(fp)
   16338:	008000f4 	movhi	r2,3
   1633c:	10b5b804 	addi	r2,r2,-10528
   16340:	18c7883a 	add	r3,r3,r3
   16344:	18c7883a 	add	r3,r3,r3
   16348:	10c5883a 	add	r2,r2,r3
   1634c:	10000015 	stw	zero,0(r2)
   16350:	e0bff117 	ldw	r2,-60(fp)
   16354:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16358:	e0bff817 	ldw	r2,-32(fp)
   1635c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   16360:	e0bff303 	ldbu	r2,-52(fp)
   16364:	00000506 	br	1637c <OSTaskCreateExt+0x1d8>
   16368:	e0bff117 	ldw	r2,-60(fp)
   1636c:	e0bff915 	stw	r2,-28(fp)
   16370:	e0bff917 	ldw	r2,-28(fp)
   16374:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   16378:	00800a04 	movi	r2,40
}
   1637c:	e037883a 	mov	sp,fp
   16380:	dfc00117 	ldw	ra,4(sp)
   16384:	df000017 	ldw	fp,0(sp)
   16388:	dec00204 	addi	sp,sp,8
   1638c:	f800283a 	ret

00016390 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   16390:	defff404 	addi	sp,sp,-48
   16394:	dfc00b15 	stw	ra,44(sp)
   16398:	df000a15 	stw	fp,40(sp)
   1639c:	df000a04 	addi	fp,sp,40
   163a0:	2005883a 	mov	r2,r4
   163a4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   163a8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   163ac:	008000b4 	movhi	r2,2
   163b0:	10bf3c04 	addi	r2,r2,-784
   163b4:	10800003 	ldbu	r2,0(r2)
   163b8:	10803fcc 	andi	r2,r2,255
   163bc:	10000226 	beq	r2,zero,163c8 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   163c0:	00801004 	movi	r2,64
   163c4:	0000e506 	br	1675c <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   163c8:	e0bfff03 	ldbu	r2,-4(fp)
   163cc:	10800518 	cmpnei	r2,r2,20
   163d0:	1000021e 	bne	r2,zero,163dc <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   163d4:	00800f84 	movi	r2,62
   163d8:	0000e006 	br	1675c <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   163dc:	e0bfff03 	ldbu	r2,-4(fp)
   163e0:	10800530 	cmpltui	r2,r2,20
   163e4:	1000051e 	bne	r2,zero,163fc <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   163e8:	e0bfff03 	ldbu	r2,-4(fp)
   163ec:	10803fe0 	cmpeqi	r2,r2,255
   163f0:	1000021e 	bne	r2,zero,163fc <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   163f4:	00800a84 	movi	r2,42
   163f8:	0000d806 	br	1675c <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   163fc:	0005303a 	rdctl	r2,status
   16400:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16404:	e0fff917 	ldw	r3,-28(fp)
   16408:	00bfff84 	movi	r2,-2
   1640c:	1884703a 	and	r2,r3,r2
   16410:	1001703a 	wrctl	status,r2
  
  return context;
   16414:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   16418:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   1641c:	e0bfff03 	ldbu	r2,-4(fp)
   16420:	10803fd8 	cmpnei	r2,r2,255
   16424:	1000051e 	bne	r2,zero,1643c <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   16428:	008000b4 	movhi	r2,2
   1642c:	10bf3d04 	addi	r2,r2,-780
   16430:	10800017 	ldw	r2,0(r2)
   16434:	10800c83 	ldbu	r2,50(r2)
   16438:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1643c:	e0ffff03 	ldbu	r3,-4(fp)
   16440:	008000f4 	movhi	r2,3
   16444:	10b5b804 	addi	r2,r2,-10528
   16448:	18c7883a 	add	r3,r3,r3
   1644c:	18c7883a 	add	r3,r3,r3
   16450:	10c5883a 	add	r2,r2,r3
   16454:	10800017 	ldw	r2,0(r2)
   16458:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   1645c:	e0bff717 	ldw	r2,-36(fp)
   16460:	1000061e 	bne	r2,zero,1647c <OSTaskDel+0xec>
   16464:	e0bff617 	ldw	r2,-40(fp)
   16468:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1646c:	e0bffa17 	ldw	r2,-24(fp)
   16470:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16474:	008010c4 	movi	r2,67
   16478:	0000b806 	br	1675c <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   1647c:	e0bff717 	ldw	r2,-36(fp)
   16480:	10800058 	cmpnei	r2,r2,1
   16484:	1000061e 	bne	r2,zero,164a0 <OSTaskDel+0x110>
   16488:	e0bff617 	ldw	r2,-40(fp)
   1648c:	e0bffb15 	stw	r2,-20(fp)
   16490:	e0bffb17 	ldw	r2,-20(fp)
   16494:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   16498:	00800f44 	movi	r2,61
   1649c:	0000af06 	br	1675c <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   164a0:	e0bff717 	ldw	r2,-36(fp)
   164a4:	10800d03 	ldbu	r2,52(r2)
   164a8:	10c03fcc 	andi	r3,r2,255
   164ac:	e0bff717 	ldw	r2,-36(fp)
   164b0:	10800d03 	ldbu	r2,52(r2)
   164b4:	11003fcc 	andi	r4,r2,255
   164b8:	008000b4 	movhi	r2,2
   164bc:	10bf3a44 	addi	r2,r2,-791
   164c0:	1105883a 	add	r2,r2,r4
   164c4:	10800003 	ldbu	r2,0(r2)
   164c8:	1009883a 	mov	r4,r2
   164cc:	e0bff717 	ldw	r2,-36(fp)
   164d0:	10800d43 	ldbu	r2,53(r2)
   164d4:	0084303a 	nor	r2,zero,r2
   164d8:	2084703a 	and	r2,r4,r2
   164dc:	1009883a 	mov	r4,r2
   164e0:	008000b4 	movhi	r2,2
   164e4:	10bf3a44 	addi	r2,r2,-791
   164e8:	10c5883a 	add	r2,r2,r3
   164ec:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   164f0:	e0bff717 	ldw	r2,-36(fp)
   164f4:	10800d03 	ldbu	r2,52(r2)
   164f8:	10c03fcc 	andi	r3,r2,255
   164fc:	008000b4 	movhi	r2,2
   16500:	10bf3a44 	addi	r2,r2,-791
   16504:	10c5883a 	add	r2,r2,r3
   16508:	10800003 	ldbu	r2,0(r2)
   1650c:	10803fcc 	andi	r2,r2,255
   16510:	10000c1e 	bne	r2,zero,16544 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   16514:	e0bff717 	ldw	r2,-36(fp)
   16518:	10800d83 	ldbu	r2,54(r2)
   1651c:	0084303a 	nor	r2,zero,r2
   16520:	1007883a 	mov	r3,r2
   16524:	008000b4 	movhi	r2,2
   16528:	10bf3a04 	addi	r2,r2,-792
   1652c:	10800003 	ldbu	r2,0(r2)
   16530:	1884703a 	and	r2,r3,r2
   16534:	1007883a 	mov	r3,r2
   16538:	008000b4 	movhi	r2,2
   1653c:	10bf3a04 	addi	r2,r2,-792
   16540:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   16544:	e0bff717 	ldw	r2,-36(fp)
   16548:	10800717 	ldw	r2,28(r2)
   1654c:	10000526 	beq	r2,zero,16564 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   16550:	e0bff717 	ldw	r2,-36(fp)
   16554:	10800717 	ldw	r2,28(r2)
   16558:	e13ff717 	ldw	r4,-36(fp)
   1655c:	100b883a 	mov	r5,r2
   16560:	00103dc0 	call	103dc <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   16564:	e0bff717 	ldw	r2,-36(fp)
   16568:	10800817 	ldw	r2,32(r2)
   1656c:	10000526 	beq	r2,zero,16584 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   16570:	e0bff717 	ldw	r2,-36(fp)
   16574:	10800817 	ldw	r2,32(r2)
   16578:	e13ff717 	ldw	r4,-36(fp)
   1657c:	100b883a 	mov	r5,r2
   16580:	00104900 	call	10490 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   16584:	e0bff717 	ldw	r2,-36(fp)
   16588:	10800a17 	ldw	r2,40(r2)
   1658c:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   16590:	e0bff817 	ldw	r2,-32(fp)
   16594:	10000226 	beq	r2,zero,165a0 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   16598:	e13ff817 	ldw	r4,-32(fp)
   1659c:	00129e40 	call	129e4 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   165a0:	e0bff717 	ldw	r2,-36(fp)
   165a4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   165a8:	e0bff717 	ldw	r2,-36(fp)
   165ac:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   165b0:	e0bff717 	ldw	r2,-36(fp)
   165b4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   165b8:	008000b4 	movhi	r2,2
   165bc:	10bf2e04 	addi	r2,r2,-840
   165c0:	10800003 	ldbu	r2,0(r2)
   165c4:	10803fcc 	andi	r2,r2,255
   165c8:	10803fe0 	cmpeqi	r2,r2,255
   165cc:	1000081e 	bne	r2,zero,165f0 <OSTaskDel+0x260>
        OSLockNesting++;
   165d0:	008000b4 	movhi	r2,2
   165d4:	10bf2e04 	addi	r2,r2,-840
   165d8:	10800003 	ldbu	r2,0(r2)
   165dc:	10800044 	addi	r2,r2,1
   165e0:	1007883a 	mov	r3,r2
   165e4:	008000b4 	movhi	r2,2
   165e8:	10bf2e04 	addi	r2,r2,-840
   165ec:	10c00005 	stb	r3,0(r2)
   165f0:	e0bff617 	ldw	r2,-40(fp)
   165f4:	e0bffc15 	stw	r2,-16(fp)
   165f8:	e0bffc17 	ldw	r2,-16(fp)
   165fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   16600:	000ffd00 	call	ffd0 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16604:	0005303a 	rdctl	r2,status
   16608:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1660c:	e0fffd17 	ldw	r3,-12(fp)
   16610:	00bfff84 	movi	r2,-2
   16614:	1884703a 	and	r2,r3,r2
   16618:	1001703a 	wrctl	status,r2
  
  return context;
   1661c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   16620:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   16624:	008000b4 	movhi	r2,2
   16628:	10bf2e04 	addi	r2,r2,-840
   1662c:	10800003 	ldbu	r2,0(r2)
   16630:	10803fcc 	andi	r2,r2,255
   16634:	10000826 	beq	r2,zero,16658 <OSTaskDel+0x2c8>
        OSLockNesting--;
   16638:	008000b4 	movhi	r2,2
   1663c:	10bf2e04 	addi	r2,r2,-840
   16640:	10800003 	ldbu	r2,0(r2)
   16644:	10bfffc4 	addi	r2,r2,-1
   16648:	1007883a 	mov	r3,r2
   1664c:	008000b4 	movhi	r2,2
   16650:	10bf2e04 	addi	r2,r2,-840
   16654:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   16658:	e13ff717 	ldw	r4,-36(fp)
   1665c:	001ae580 	call	1ae58 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   16660:	008000b4 	movhi	r2,2
   16664:	10bf3644 	addi	r2,r2,-807
   16668:	10800003 	ldbu	r2,0(r2)
   1666c:	10bfffc4 	addi	r2,r2,-1
   16670:	1007883a 	mov	r3,r2
   16674:	008000b4 	movhi	r2,2
   16678:	10bf3644 	addi	r2,r2,-807
   1667c:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   16680:	e0ffff03 	ldbu	r3,-4(fp)
   16684:	008000f4 	movhi	r2,3
   16688:	10b5b804 	addi	r2,r2,-10528
   1668c:	18c7883a 	add	r3,r3,r3
   16690:	18c7883a 	add	r3,r3,r3
   16694:	10c5883a 	add	r2,r2,r3
   16698:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1669c:	e0bff717 	ldw	r2,-36(fp)
   166a0:	10800617 	ldw	r2,24(r2)
   166a4:	1000091e 	bne	r2,zero,166cc <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   166a8:	e0bff717 	ldw	r2,-36(fp)
   166ac:	10800517 	ldw	r2,20(r2)
   166b0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   166b4:	e0bff717 	ldw	r2,-36(fp)
   166b8:	10c00517 	ldw	r3,20(r2)
   166bc:	008000b4 	movhi	r2,2
   166c0:	10bf3104 	addi	r2,r2,-828
   166c4:	10c00015 	stw	r3,0(r2)
   166c8:	00000a06 	br	166f4 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   166cc:	e0bff717 	ldw	r2,-36(fp)
   166d0:	10800617 	ldw	r2,24(r2)
   166d4:	e0fff717 	ldw	r3,-36(fp)
   166d8:	18c00517 	ldw	r3,20(r3)
   166dc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   166e0:	e0bff717 	ldw	r2,-36(fp)
   166e4:	10800517 	ldw	r2,20(r2)
   166e8:	e0fff717 	ldw	r3,-36(fp)
   166ec:	18c00617 	ldw	r3,24(r3)
   166f0:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   166f4:	008000b4 	movhi	r2,2
   166f8:	10bf3504 	addi	r2,r2,-812
   166fc:	10c00017 	ldw	r3,0(r2)
   16700:	e0bff717 	ldw	r2,-36(fp)
   16704:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   16708:	008000b4 	movhi	r2,2
   1670c:	10bf3504 	addi	r2,r2,-812
   16710:	e0fff717 	ldw	r3,-36(fp)
   16714:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   16718:	e0bff717 	ldw	r2,-36(fp)
   1671c:	00c00fc4 	movi	r3,63
   16720:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   16724:	e0bff717 	ldw	r2,-36(fp)
   16728:	10001345 	stb	zero,77(r2)
   1672c:	e0bff617 	ldw	r2,-40(fp)
   16730:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16734:	e0bffe17 	ldw	r2,-8(fp)
   16738:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1673c:	008000b4 	movhi	r2,2
   16740:	10bf2e44 	addi	r2,r2,-839
   16744:	10800003 	ldbu	r2,0(r2)
   16748:	10803fcc 	andi	r2,r2,255
   1674c:	10800058 	cmpnei	r2,r2,1
   16750:	1000011e 	bne	r2,zero,16758 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   16754:	0010a040 	call	10a04 <OS_Sched>
    }
    return (OS_ERR_NONE);
   16758:	0005883a 	mov	r2,zero
}
   1675c:	e037883a 	mov	sp,fp
   16760:	dfc00117 	ldw	ra,4(sp)
   16764:	df000017 	ldw	fp,0(sp)
   16768:	dec00204 	addi	sp,sp,8
   1676c:	f800283a 	ret

00016770 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   16770:	defff504 	addi	sp,sp,-44
   16774:	df000a15 	stw	fp,40(sp)
   16778:	df000a04 	addi	fp,sp,40
   1677c:	2005883a 	mov	r2,r4
   16780:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16784:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   16788:	e0bfff03 	ldbu	r2,-4(fp)
   1678c:	10800518 	cmpnei	r2,r2,20
   16790:	1000021e 	bne	r2,zero,1679c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   16794:	00800f84 	movi	r2,62
   16798:	00004706 	br	168b8 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1679c:	e0bfff03 	ldbu	r2,-4(fp)
   167a0:	10800530 	cmpltui	r2,r2,20
   167a4:	1000051e 	bne	r2,zero,167bc <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   167a8:	e0bfff03 	ldbu	r2,-4(fp)
   167ac:	10803fe0 	cmpeqi	r2,r2,255
   167b0:	1000021e 	bne	r2,zero,167bc <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   167b4:	00800a84 	movi	r2,42
   167b8:	00003f06 	br	168b8 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   167bc:	e0bfff03 	ldbu	r2,-4(fp)
   167c0:	10803fd8 	cmpnei	r2,r2,255
   167c4:	1000131e 	bne	r2,zero,16814 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   167c8:	0005303a 	rdctl	r2,status
   167cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   167d0:	e0fff917 	ldw	r3,-28(fp)
   167d4:	00bfff84 	movi	r2,-2
   167d8:	1884703a 	and	r2,r3,r2
   167dc:	1001703a 	wrctl	status,r2
  
  return context;
   167e0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   167e4:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   167e8:	008000b4 	movhi	r2,2
   167ec:	10bf3d04 	addi	r2,r2,-780
   167f0:	10800017 	ldw	r2,0(r2)
   167f4:	10800dc3 	ldbu	r2,55(r2)
   167f8:	e0bff705 	stb	r2,-36(fp)
   167fc:	e0bff617 	ldw	r2,-40(fp)
   16800:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16804:	e0bffa17 	ldw	r2,-24(fp)
   16808:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   1680c:	e0bff703 	ldbu	r2,-36(fp)
   16810:	00002906 	br	168b8 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16814:	0005303a 	rdctl	r2,status
   16818:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1681c:	e0fffb17 	ldw	r3,-20(fp)
   16820:	00bfff84 	movi	r2,-2
   16824:	1884703a 	and	r2,r3,r2
   16828:	1001703a 	wrctl	status,r2
  
  return context;
   1682c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   16830:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   16834:	e0ffff03 	ldbu	r3,-4(fp)
   16838:	008000f4 	movhi	r2,3
   1683c:	10b5b804 	addi	r2,r2,-10528
   16840:	18c7883a 	add	r3,r3,r3
   16844:	18c7883a 	add	r3,r3,r3
   16848:	10c5883a 	add	r2,r2,r3
   1684c:	10800017 	ldw	r2,0(r2)
   16850:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   16854:	e0bff817 	ldw	r2,-32(fp)
   16858:	1000061e 	bne	r2,zero,16874 <OSTaskDelReq+0x104>
   1685c:	e0bff617 	ldw	r2,-40(fp)
   16860:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16864:	e0bffc17 	ldw	r2,-16(fp)
   16868:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   1686c:	008010c4 	movi	r2,67
   16870:	00001106 	br	168b8 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   16874:	e0bff817 	ldw	r2,-32(fp)
   16878:	10800058 	cmpnei	r2,r2,1
   1687c:	1000061e 	bne	r2,zero,16898 <OSTaskDelReq+0x128>
   16880:	e0bff617 	ldw	r2,-40(fp)
   16884:	e0bffd15 	stw	r2,-12(fp)
   16888:	e0bffd17 	ldw	r2,-12(fp)
   1688c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   16890:	00800f44 	movi	r2,61
   16894:	00000806 	br	168b8 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   16898:	e0bff817 	ldw	r2,-32(fp)
   1689c:	00c00fc4 	movi	r3,63
   168a0:	10c00dc5 	stb	r3,55(r2)
   168a4:	e0bff617 	ldw	r2,-40(fp)
   168a8:	e0bffe15 	stw	r2,-8(fp)
   168ac:	e0bffe17 	ldw	r2,-8(fp)
   168b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   168b4:	0005883a 	mov	r2,zero
}
   168b8:	e037883a 	mov	sp,fp
   168bc:	df000017 	ldw	fp,0(sp)
   168c0:	dec00104 	addi	sp,sp,4
   168c4:	f800283a 	ret

000168c8 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   168c8:	defff404 	addi	sp,sp,-48
   168cc:	dfc00b15 	stw	ra,44(sp)
   168d0:	df000a15 	stw	fp,40(sp)
   168d4:	df000a04 	addi	fp,sp,40
   168d8:	2005883a 	mov	r2,r4
   168dc:	e17ffe15 	stw	r5,-8(fp)
   168e0:	e1bfff15 	stw	r6,-4(fp)
   168e4:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   168e8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   168ec:	e0bfff17 	ldw	r2,-4(fp)
   168f0:	1000021e 	bne	r2,zero,168fc <OSTaskNameGet+0x34>
        return (0);
   168f4:	0005883a 	mov	r2,zero
   168f8:	00005806 	br	16a5c <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   168fc:	e0bffd03 	ldbu	r2,-12(fp)
   16900:	10800570 	cmpltui	r2,r2,21
   16904:	1000081e 	bne	r2,zero,16928 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   16908:	e0bffd03 	ldbu	r2,-12(fp)
   1690c:	10803fe0 	cmpeqi	r2,r2,255
   16910:	1000051e 	bne	r2,zero,16928 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   16914:	e0bfff17 	ldw	r2,-4(fp)
   16918:	00c00a84 	movi	r3,42
   1691c:	10c00005 	stb	r3,0(r2)
            return (0);
   16920:	0005883a 	mov	r2,zero
   16924:	00004d06 	br	16a5c <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   16928:	e0bffe17 	ldw	r2,-8(fp)
   1692c:	1000051e 	bne	r2,zero,16944 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   16930:	e0bfff17 	ldw	r2,-4(fp)
   16934:	00c00304 	movi	r3,12
   16938:	10c00005 	stb	r3,0(r2)
        return (0);
   1693c:	0005883a 	mov	r2,zero
   16940:	00004606 	br	16a5c <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   16944:	008000b4 	movhi	r2,2
   16948:	10bf3c04 	addi	r2,r2,-784
   1694c:	10800003 	ldbu	r2,0(r2)
   16950:	10803fcc 	andi	r2,r2,255
   16954:	10000526 	beq	r2,zero,1696c <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   16958:	e0bfff17 	ldw	r2,-4(fp)
   1695c:	00c00444 	movi	r3,17
   16960:	10c00005 	stb	r3,0(r2)
        return (0);
   16964:	0005883a 	mov	r2,zero
   16968:	00003c06 	br	16a5c <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1696c:	0005303a 	rdctl	r2,status
   16970:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16974:	e0fff917 	ldw	r3,-28(fp)
   16978:	00bfff84 	movi	r2,-2
   1697c:	1884703a 	and	r2,r3,r2
   16980:	1001703a 	wrctl	status,r2
  
  return context;
   16984:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   16988:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1698c:	e0bffd03 	ldbu	r2,-12(fp)
   16990:	10803fd8 	cmpnei	r2,r2,255
   16994:	1000051e 	bne	r2,zero,169ac <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   16998:	008000b4 	movhi	r2,2
   1699c:	10bf3d04 	addi	r2,r2,-780
   169a0:	10800017 	ldw	r2,0(r2)
   169a4:	10800c83 	ldbu	r2,50(r2)
   169a8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   169ac:	e0fffd03 	ldbu	r3,-12(fp)
   169b0:	008000f4 	movhi	r2,3
   169b4:	10b5b804 	addi	r2,r2,-10528
   169b8:	18c7883a 	add	r3,r3,r3
   169bc:	18c7883a 	add	r3,r3,r3
   169c0:	10c5883a 	add	r2,r2,r3
   169c4:	10800017 	ldw	r2,0(r2)
   169c8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   169cc:	e0bff717 	ldw	r2,-36(fp)
   169d0:	1000091e 	bne	r2,zero,169f8 <OSTaskNameGet+0x130>
   169d4:	e0bff617 	ldw	r2,-40(fp)
   169d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   169dc:	e0bffa17 	ldw	r2,-24(fp)
   169e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   169e4:	e0bfff17 	ldw	r2,-4(fp)
   169e8:	00c010c4 	movi	r3,67
   169ec:	10c00005 	stb	r3,0(r2)
        return (0);
   169f0:	0005883a 	mov	r2,zero
   169f4:	00001906 	br	16a5c <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   169f8:	e0bff717 	ldw	r2,-36(fp)
   169fc:	10800058 	cmpnei	r2,r2,1
   16a00:	1000091e 	bne	r2,zero,16a28 <OSTaskNameGet+0x160>
   16a04:	e0bff617 	ldw	r2,-40(fp)
   16a08:	e0bffb15 	stw	r2,-20(fp)
   16a0c:	e0bffb17 	ldw	r2,-20(fp)
   16a10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   16a14:	e0bfff17 	ldw	r2,-4(fp)
   16a18:	00c010c4 	movi	r3,67
   16a1c:	10c00005 	stb	r3,0(r2)
        return (0);
   16a20:	0005883a 	mov	r2,zero
   16a24:	00000d06 	br	16a5c <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   16a28:	e0bff717 	ldw	r2,-36(fp)
   16a2c:	10801304 	addi	r2,r2,76
   16a30:	e13ffe17 	ldw	r4,-8(fp)
   16a34:	100b883a 	mov	r5,r2
   16a38:	0010b400 	call	10b40 <OS_StrCopy>
   16a3c:	e0bff805 	stb	r2,-32(fp)
   16a40:	e0bff617 	ldw	r2,-40(fp)
   16a44:	e0bffc15 	stw	r2,-16(fp)
   16a48:	e0bffc17 	ldw	r2,-16(fp)
   16a4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16a50:	e0bfff17 	ldw	r2,-4(fp)
   16a54:	10000005 	stb	zero,0(r2)
    return (len);
   16a58:	e0bff803 	ldbu	r2,-32(fp)
}
   16a5c:	e037883a 	mov	sp,fp
   16a60:	dfc00117 	ldw	ra,4(sp)
   16a64:	df000017 	ldw	fp,0(sp)
   16a68:	dec00204 	addi	sp,sp,8
   16a6c:	f800283a 	ret

00016a70 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   16a70:	defff304 	addi	sp,sp,-52
   16a74:	dfc00c15 	stw	ra,48(sp)
   16a78:	df000b15 	stw	fp,44(sp)
   16a7c:	df000b04 	addi	fp,sp,44
   16a80:	2005883a 	mov	r2,r4
   16a84:	e17ffe15 	stw	r5,-8(fp)
   16a88:	e1bfff15 	stw	r6,-4(fp)
   16a8c:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   16a90:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   16a94:	e0bfff17 	ldw	r2,-4(fp)
   16a98:	1000011e 	bne	r2,zero,16aa0 <OSTaskNameSet+0x30>
        return;
   16a9c:	00005f06 	br	16c1c <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   16aa0:	e0bffd03 	ldbu	r2,-12(fp)
   16aa4:	10800570 	cmpltui	r2,r2,21
   16aa8:	1000071e 	bne	r2,zero,16ac8 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   16aac:	e0bffd03 	ldbu	r2,-12(fp)
   16ab0:	10803fe0 	cmpeqi	r2,r2,255
   16ab4:	1000041e 	bne	r2,zero,16ac8 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   16ab8:	e0bfff17 	ldw	r2,-4(fp)
   16abc:	00c00a84 	movi	r3,42
   16ac0:	10c00005 	stb	r3,0(r2)
            return;
   16ac4:	00005506 	br	16c1c <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   16ac8:	e0bffe17 	ldw	r2,-8(fp)
   16acc:	1000041e 	bne	r2,zero,16ae0 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   16ad0:	e0bfff17 	ldw	r2,-4(fp)
   16ad4:	00c00304 	movi	r3,12
   16ad8:	10c00005 	stb	r3,0(r2)
        return;
   16adc:	00004f06 	br	16c1c <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   16ae0:	008000b4 	movhi	r2,2
   16ae4:	10bf3c04 	addi	r2,r2,-784
   16ae8:	10800003 	ldbu	r2,0(r2)
   16aec:	10803fcc 	andi	r2,r2,255
   16af0:	10000426 	beq	r2,zero,16b04 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   16af4:	e0bfff17 	ldw	r2,-4(fp)
   16af8:	00c00484 	movi	r3,18
   16afc:	10c00005 	stb	r3,0(r2)
        return;
   16b00:	00004606 	br	16c1c <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16b04:	0005303a 	rdctl	r2,status
   16b08:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16b0c:	e0fff817 	ldw	r3,-32(fp)
   16b10:	00bfff84 	movi	r2,-2
   16b14:	1884703a 	and	r2,r3,r2
   16b18:	1001703a 	wrctl	status,r2
  
  return context;
   16b1c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   16b20:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   16b24:	e0bffd03 	ldbu	r2,-12(fp)
   16b28:	10803fd8 	cmpnei	r2,r2,255
   16b2c:	1000051e 	bne	r2,zero,16b44 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   16b30:	008000b4 	movhi	r2,2
   16b34:	10bf3d04 	addi	r2,r2,-780
   16b38:	10800017 	ldw	r2,0(r2)
   16b3c:	10800c83 	ldbu	r2,50(r2)
   16b40:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16b44:	e0fffd03 	ldbu	r3,-12(fp)
   16b48:	008000f4 	movhi	r2,3
   16b4c:	10b5b804 	addi	r2,r2,-10528
   16b50:	18c7883a 	add	r3,r3,r3
   16b54:	18c7883a 	add	r3,r3,r3
   16b58:	10c5883a 	add	r2,r2,r3
   16b5c:	10800017 	ldw	r2,0(r2)
   16b60:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   16b64:	e0bff617 	ldw	r2,-40(fp)
   16b68:	1000081e 	bne	r2,zero,16b8c <OSTaskNameSet+0x11c>
   16b6c:	e0bff517 	ldw	r2,-44(fp)
   16b70:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16b74:	e0bff917 	ldw	r2,-28(fp)
   16b78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   16b7c:	e0bfff17 	ldw	r2,-4(fp)
   16b80:	00c010c4 	movi	r3,67
   16b84:	10c00005 	stb	r3,0(r2)
        return;
   16b88:	00002406 	br	16c1c <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   16b8c:	e0bff617 	ldw	r2,-40(fp)
   16b90:	10800058 	cmpnei	r2,r2,1
   16b94:	1000081e 	bne	r2,zero,16bb8 <OSTaskNameSet+0x148>
   16b98:	e0bff517 	ldw	r2,-44(fp)
   16b9c:	e0bffa15 	stw	r2,-24(fp)
   16ba0:	e0bffa17 	ldw	r2,-24(fp)
   16ba4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   16ba8:	e0bfff17 	ldw	r2,-4(fp)
   16bac:	00c010c4 	movi	r3,67
   16bb0:	10c00005 	stb	r3,0(r2)
        return;
   16bb4:	00001906 	br	16c1c <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   16bb8:	e13ffe17 	ldw	r4,-8(fp)
   16bbc:	0010bb40 	call	10bb4 <OS_StrLen>
   16bc0:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   16bc4:	e0bff703 	ldbu	r2,-36(fp)
   16bc8:	10800830 	cmpltui	r2,r2,32
   16bcc:	1000081e 	bne	r2,zero,16bf0 <OSTaskNameSet+0x180>
   16bd0:	e0bff517 	ldw	r2,-44(fp)
   16bd4:	e0bffb15 	stw	r2,-20(fp)
   16bd8:	e0bffb17 	ldw	r2,-20(fp)
   16bdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   16be0:	e0bfff17 	ldw	r2,-4(fp)
   16be4:	00c01044 	movi	r3,65
   16be8:	10c00005 	stb	r3,0(r2)
        return;
   16bec:	00000b06 	br	16c1c <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   16bf0:	e0bff617 	ldw	r2,-40(fp)
   16bf4:	10801304 	addi	r2,r2,76
   16bf8:	1009883a 	mov	r4,r2
   16bfc:	e17ffe17 	ldw	r5,-8(fp)
   16c00:	0010b400 	call	10b40 <OS_StrCopy>
   16c04:	e0bff517 	ldw	r2,-44(fp)
   16c08:	e0bffc15 	stw	r2,-16(fp)
   16c0c:	e0bffc17 	ldw	r2,-16(fp)
   16c10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16c14:	e0bfff17 	ldw	r2,-4(fp)
   16c18:	10000005 	stb	zero,0(r2)
}
   16c1c:	e037883a 	mov	sp,fp
   16c20:	dfc00117 	ldw	ra,4(sp)
   16c24:	df000017 	ldw	fp,0(sp)
   16c28:	dec00204 	addi	sp,sp,8
   16c2c:	f800283a 	ret

00016c30 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   16c30:	defff404 	addi	sp,sp,-48
   16c34:	dfc00b15 	stw	ra,44(sp)
   16c38:	df000a15 	stw	fp,40(sp)
   16c3c:	df000a04 	addi	fp,sp,40
   16c40:	2005883a 	mov	r2,r4
   16c44:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   16c48:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   16c4c:	e0bfff03 	ldbu	r2,-4(fp)
   16c50:	10800530 	cmpltui	r2,r2,20
   16c54:	1000021e 	bne	r2,zero,16c60 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   16c58:	00800a84 	movi	r2,42
   16c5c:	00006d06 	br	16e14 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16c60:	0005303a 	rdctl	r2,status
   16c64:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16c68:	e0fff817 	ldw	r3,-32(fp)
   16c6c:	00bfff84 	movi	r2,-2
   16c70:	1884703a 	and	r2,r3,r2
   16c74:	1001703a 	wrctl	status,r2
  
  return context;
   16c78:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16c7c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   16c80:	e0ffff03 	ldbu	r3,-4(fp)
   16c84:	008000f4 	movhi	r2,3
   16c88:	10b5b804 	addi	r2,r2,-10528
   16c8c:	18c7883a 	add	r3,r3,r3
   16c90:	18c7883a 	add	r3,r3,r3
   16c94:	10c5883a 	add	r2,r2,r3
   16c98:	10800017 	ldw	r2,0(r2)
   16c9c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   16ca0:	e0bff717 	ldw	r2,-36(fp)
   16ca4:	1000061e 	bne	r2,zero,16cc0 <OSTaskResume+0x90>
   16ca8:	e0bff617 	ldw	r2,-40(fp)
   16cac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16cb0:	e0bff917 	ldw	r2,-28(fp)
   16cb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   16cb8:	00801184 	movi	r2,70
   16cbc:	00005506 	br	16e14 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   16cc0:	e0bff717 	ldw	r2,-36(fp)
   16cc4:	10800058 	cmpnei	r2,r2,1
   16cc8:	1000061e 	bne	r2,zero,16ce4 <OSTaskResume+0xb4>
   16ccc:	e0bff617 	ldw	r2,-40(fp)
   16cd0:	e0bffa15 	stw	r2,-24(fp)
   16cd4:	e0bffa17 	ldw	r2,-24(fp)
   16cd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16cdc:	008010c4 	movi	r2,67
   16ce0:	00004c06 	br	16e14 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   16ce4:	e0bff717 	ldw	r2,-36(fp)
   16ce8:	10800c03 	ldbu	r2,48(r2)
   16cec:	10803fcc 	andi	r2,r2,255
   16cf0:	1080020c 	andi	r2,r2,8
   16cf4:	10004226 	beq	r2,zero,16e00 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   16cf8:	e0bff717 	ldw	r2,-36(fp)
   16cfc:	10c00c03 	ldbu	r3,48(r2)
   16d00:	00bffdc4 	movi	r2,-9
   16d04:	1884703a 	and	r2,r3,r2
   16d08:	1007883a 	mov	r3,r2
   16d0c:	e0bff717 	ldw	r2,-36(fp)
   16d10:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   16d14:	e0bff717 	ldw	r2,-36(fp)
   16d18:	10800c03 	ldbu	r2,48(r2)
   16d1c:	10803fcc 	andi	r2,r2,255
   16d20:	1000311e 	bne	r2,zero,16de8 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   16d24:	e0bff717 	ldw	r2,-36(fp)
   16d28:	10800b8b 	ldhu	r2,46(r2)
   16d2c:	10bfffcc 	andi	r2,r2,65535
   16d30:	1000281e 	bne	r2,zero,16dd4 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   16d34:	e0bff717 	ldw	r2,-36(fp)
   16d38:	10c00d83 	ldbu	r3,54(r2)
   16d3c:	008000b4 	movhi	r2,2
   16d40:	10bf3a04 	addi	r2,r2,-792
   16d44:	10800003 	ldbu	r2,0(r2)
   16d48:	1884b03a 	or	r2,r3,r2
   16d4c:	1007883a 	mov	r3,r2
   16d50:	008000b4 	movhi	r2,2
   16d54:	10bf3a04 	addi	r2,r2,-792
   16d58:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   16d5c:	e0bff717 	ldw	r2,-36(fp)
   16d60:	10800d03 	ldbu	r2,52(r2)
   16d64:	10c03fcc 	andi	r3,r2,255
   16d68:	e0bff717 	ldw	r2,-36(fp)
   16d6c:	10800d03 	ldbu	r2,52(r2)
   16d70:	11003fcc 	andi	r4,r2,255
   16d74:	008000b4 	movhi	r2,2
   16d78:	10bf3a44 	addi	r2,r2,-791
   16d7c:	1105883a 	add	r2,r2,r4
   16d80:	11000003 	ldbu	r4,0(r2)
   16d84:	e0bff717 	ldw	r2,-36(fp)
   16d88:	10800d43 	ldbu	r2,53(r2)
   16d8c:	2084b03a 	or	r2,r4,r2
   16d90:	1009883a 	mov	r4,r2
   16d94:	008000b4 	movhi	r2,2
   16d98:	10bf3a44 	addi	r2,r2,-791
   16d9c:	10c5883a 	add	r2,r2,r3
   16da0:	11000005 	stb	r4,0(r2)
   16da4:	e0bff617 	ldw	r2,-40(fp)
   16da8:	e0bffb15 	stw	r2,-20(fp)
   16dac:	e0bffb17 	ldw	r2,-20(fp)
   16db0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   16db4:	008000b4 	movhi	r2,2
   16db8:	10bf2e44 	addi	r2,r2,-839
   16dbc:	10800003 	ldbu	r2,0(r2)
   16dc0:	10803fcc 	andi	r2,r2,255
   16dc4:	10800058 	cmpnei	r2,r2,1
   16dc8:	10000b1e 	bne	r2,zero,16df8 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   16dcc:	0010a040 	call	10a04 <OS_Sched>
   16dd0:	00000906 	br	16df8 <OSTaskResume+0x1c8>
   16dd4:	e0bff617 	ldw	r2,-40(fp)
   16dd8:	e0bffc15 	stw	r2,-16(fp)
   16ddc:	e0bffc17 	ldw	r2,-16(fp)
   16de0:	1001703a 	wrctl	status,r2
   16de4:	00000406 	br	16df8 <OSTaskResume+0x1c8>
   16de8:	e0bff617 	ldw	r2,-40(fp)
   16dec:	e0bffd15 	stw	r2,-12(fp)
   16df0:	e0bffd17 	ldw	r2,-12(fp)
   16df4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   16df8:	0005883a 	mov	r2,zero
   16dfc:	00000506 	br	16e14 <OSTaskResume+0x1e4>
   16e00:	e0bff617 	ldw	r2,-40(fp)
   16e04:	e0bffe15 	stw	r2,-8(fp)
   16e08:	e0bffe17 	ldw	r2,-8(fp)
   16e0c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   16e10:	00801104 	movi	r2,68
}
   16e14:	e037883a 	mov	sp,fp
   16e18:	dfc00117 	ldw	ra,4(sp)
   16e1c:	df000017 	ldw	fp,0(sp)
   16e20:	dec00204 	addi	sp,sp,8
   16e24:	f800283a 	ret

00016e28 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   16e28:	defff304 	addi	sp,sp,-52
   16e2c:	df000c15 	stw	fp,48(sp)
   16e30:	df000c04 	addi	fp,sp,48
   16e34:	2005883a 	mov	r2,r4
   16e38:	e17fff15 	stw	r5,-4(fp)
   16e3c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   16e40:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   16e44:	e0bffe03 	ldbu	r2,-8(fp)
   16e48:	10800570 	cmpltui	r2,r2,21
   16e4c:	1000051e 	bne	r2,zero,16e64 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   16e50:	e0bffe03 	ldbu	r2,-8(fp)
   16e54:	10803fe0 	cmpeqi	r2,r2,255
   16e58:	1000021e 	bne	r2,zero,16e64 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   16e5c:	00800a84 	movi	r2,42
   16e60:	00005f06 	br	16fe0 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   16e64:	e0bfff17 	ldw	r2,-4(fp)
   16e68:	1000021e 	bne	r2,zero,16e74 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   16e6c:	00800244 	movi	r2,9
   16e70:	00005b06 	br	16fe0 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   16e74:	e0bfff17 	ldw	r2,-4(fp)
   16e78:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   16e7c:	e0bfff17 	ldw	r2,-4(fp)
   16e80:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16e84:	0005303a 	rdctl	r2,status
   16e88:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16e8c:	e0fff917 	ldw	r3,-28(fp)
   16e90:	00bfff84 	movi	r2,-2
   16e94:	1884703a 	and	r2,r3,r2
   16e98:	1001703a 	wrctl	status,r2
  
  return context;
   16e9c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   16ea0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   16ea4:	e0bffe03 	ldbu	r2,-8(fp)
   16ea8:	10803fd8 	cmpnei	r2,r2,255
   16eac:	1000051e 	bne	r2,zero,16ec4 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   16eb0:	008000b4 	movhi	r2,2
   16eb4:	10bf3d04 	addi	r2,r2,-780
   16eb8:	10800017 	ldw	r2,0(r2)
   16ebc:	10800c83 	ldbu	r2,50(r2)
   16ec0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16ec4:	e0fffe03 	ldbu	r3,-8(fp)
   16ec8:	008000f4 	movhi	r2,3
   16ecc:	10b5b804 	addi	r2,r2,-10528
   16ed0:	18c7883a 	add	r3,r3,r3
   16ed4:	18c7883a 	add	r3,r3,r3
   16ed8:	10c5883a 	add	r2,r2,r3
   16edc:	10800017 	ldw	r2,0(r2)
   16ee0:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   16ee4:	e0bff717 	ldw	r2,-36(fp)
   16ee8:	1000061e 	bne	r2,zero,16f04 <OSTaskStkChk+0xdc>
   16eec:	e0bff617 	ldw	r2,-40(fp)
   16ef0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16ef4:	e0bffa17 	ldw	r2,-24(fp)
   16ef8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16efc:	008010c4 	movi	r2,67
   16f00:	00003706 	br	16fe0 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   16f04:	e0bff717 	ldw	r2,-36(fp)
   16f08:	10800058 	cmpnei	r2,r2,1
   16f0c:	1000061e 	bne	r2,zero,16f28 <OSTaskStkChk+0x100>
   16f10:	e0bff617 	ldw	r2,-40(fp)
   16f14:	e0bffb15 	stw	r2,-20(fp)
   16f18:	e0bffb17 	ldw	r2,-20(fp)
   16f1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16f20:	008010c4 	movi	r2,67
   16f24:	00002e06 	br	16fe0 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   16f28:	e0bff717 	ldw	r2,-36(fp)
   16f2c:	1080040b 	ldhu	r2,16(r2)
   16f30:	10bfffcc 	andi	r2,r2,65535
   16f34:	1080004c 	andi	r2,r2,1
   16f38:	1000061e 	bne	r2,zero,16f54 <OSTaskStkChk+0x12c>
   16f3c:	e0bff617 	ldw	r2,-40(fp)
   16f40:	e0bffc15 	stw	r2,-16(fp)
   16f44:	e0bffc17 	ldw	r2,-16(fp)
   16f48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   16f4c:	00801144 	movi	r2,69
   16f50:	00002306 	br	16fe0 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   16f54:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   16f58:	e0bff717 	ldw	r2,-36(fp)
   16f5c:	10800317 	ldw	r2,12(r2)
   16f60:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   16f64:	e0bff717 	ldw	r2,-36(fp)
   16f68:	10800217 	ldw	r2,8(r2)
   16f6c:	e0bff415 	stw	r2,-48(fp)
   16f70:	e0bff617 	ldw	r2,-40(fp)
   16f74:	e0bffd15 	stw	r2,-12(fp)
   16f78:	e0bffd17 	ldw	r2,-12(fp)
   16f7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   16f80:	00000306 	br	16f90 <OSTaskStkChk+0x168>
        nfree++;
   16f84:	e0bff517 	ldw	r2,-44(fp)
   16f88:	10800044 	addi	r2,r2,1
   16f8c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   16f90:	e0bff417 	ldw	r2,-48(fp)
   16f94:	10c00104 	addi	r3,r2,4
   16f98:	e0fff415 	stw	r3,-48(fp)
   16f9c:	10800017 	ldw	r2,0(r2)
   16fa0:	103ff826 	beq	r2,zero,16f84 <__alt_mem_Flash_flash_data+0xf4016f84>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   16fa4:	e0bff517 	ldw	r2,-44(fp)
   16fa8:	1085883a 	add	r2,r2,r2
   16fac:	1085883a 	add	r2,r2,r2
   16fb0:	1007883a 	mov	r3,r2
   16fb4:	e0bfff17 	ldw	r2,-4(fp)
   16fb8:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   16fbc:	e0fff817 	ldw	r3,-32(fp)
   16fc0:	e0bff517 	ldw	r2,-44(fp)
   16fc4:	1885c83a 	sub	r2,r3,r2
   16fc8:	1085883a 	add	r2,r2,r2
   16fcc:	1085883a 	add	r2,r2,r2
   16fd0:	1007883a 	mov	r3,r2
   16fd4:	e0bfff17 	ldw	r2,-4(fp)
   16fd8:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   16fdc:	0005883a 	mov	r2,zero
}
   16fe0:	e037883a 	mov	sp,fp
   16fe4:	df000017 	ldw	fp,0(sp)
   16fe8:	dec00104 	addi	sp,sp,4
   16fec:	f800283a 	ret

00016ff0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   16ff0:	defff504 	addi	sp,sp,-44
   16ff4:	dfc00a15 	stw	ra,40(sp)
   16ff8:	df000915 	stw	fp,36(sp)
   16ffc:	df000904 	addi	fp,sp,36
   17000:	2005883a 	mov	r2,r4
   17004:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17008:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   1700c:	e0bfff03 	ldbu	r2,-4(fp)
   17010:	10800518 	cmpnei	r2,r2,20
   17014:	1000021e 	bne	r2,zero,17020 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   17018:	008011c4 	movi	r2,71
   1701c:	00007406 	br	171f0 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   17020:	e0bfff03 	ldbu	r2,-4(fp)
   17024:	10800530 	cmpltui	r2,r2,20
   17028:	1000051e 	bne	r2,zero,17040 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1702c:	e0bfff03 	ldbu	r2,-4(fp)
   17030:	10803fe0 	cmpeqi	r2,r2,255
   17034:	1000021e 	bne	r2,zero,17040 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   17038:	00800a84 	movi	r2,42
   1703c:	00006c06 	br	171f0 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17040:	0005303a 	rdctl	r2,status
   17044:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17048:	e0fffb17 	ldw	r3,-20(fp)
   1704c:	00bfff84 	movi	r2,-2
   17050:	1884703a 	and	r2,r3,r2
   17054:	1001703a 	wrctl	status,r2
  
  return context;
   17058:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1705c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   17060:	e0bfff03 	ldbu	r2,-4(fp)
   17064:	10803fd8 	cmpnei	r2,r2,255
   17068:	1000081e 	bne	r2,zero,1708c <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1706c:	008000b4 	movhi	r2,2
   17070:	10bf3d04 	addi	r2,r2,-780
   17074:	10800017 	ldw	r2,0(r2)
   17078:	10800c83 	ldbu	r2,50(r2)
   1707c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   17080:	00800044 	movi	r2,1
   17084:	e0bff705 	stb	r2,-36(fp)
   17088:	00000b06 	br	170b8 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1708c:	008000b4 	movhi	r2,2
   17090:	10bf3d04 	addi	r2,r2,-780
   17094:	10800017 	ldw	r2,0(r2)
   17098:	10800c83 	ldbu	r2,50(r2)
   1709c:	10c03fcc 	andi	r3,r2,255
   170a0:	e0bfff03 	ldbu	r2,-4(fp)
   170a4:	1880031e 	bne	r3,r2,170b4 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   170a8:	00800044 	movi	r2,1
   170ac:	e0bff705 	stb	r2,-36(fp)
   170b0:	00000106 	br	170b8 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   170b4:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   170b8:	e0ffff03 	ldbu	r3,-4(fp)
   170bc:	008000f4 	movhi	r2,3
   170c0:	10b5b804 	addi	r2,r2,-10528
   170c4:	18c7883a 	add	r3,r3,r3
   170c8:	18c7883a 	add	r3,r3,r3
   170cc:	10c5883a 	add	r2,r2,r3
   170d0:	10800017 	ldw	r2,0(r2)
   170d4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   170d8:	e0bff917 	ldw	r2,-28(fp)
   170dc:	1000061e 	bne	r2,zero,170f8 <OSTaskSuspend+0x108>
   170e0:	e0bff817 	ldw	r2,-32(fp)
   170e4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   170e8:	e0bffc17 	ldw	r2,-16(fp)
   170ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   170f0:	00801204 	movi	r2,72
   170f4:	00003e06 	br	171f0 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   170f8:	e0bff917 	ldw	r2,-28(fp)
   170fc:	10800058 	cmpnei	r2,r2,1
   17100:	1000061e 	bne	r2,zero,1711c <OSTaskSuspend+0x12c>
   17104:	e0bff817 	ldw	r2,-32(fp)
   17108:	e0bffd15 	stw	r2,-12(fp)
   1710c:	e0bffd17 	ldw	r2,-12(fp)
   17110:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17114:	008010c4 	movi	r2,67
   17118:	00003506 	br	171f0 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   1711c:	e0bff917 	ldw	r2,-28(fp)
   17120:	10800d03 	ldbu	r2,52(r2)
   17124:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   17128:	e0fffa03 	ldbu	r3,-24(fp)
   1712c:	e13ffa03 	ldbu	r4,-24(fp)
   17130:	008000b4 	movhi	r2,2
   17134:	10bf3a44 	addi	r2,r2,-791
   17138:	1105883a 	add	r2,r2,r4
   1713c:	10800003 	ldbu	r2,0(r2)
   17140:	1009883a 	mov	r4,r2
   17144:	e0bff917 	ldw	r2,-28(fp)
   17148:	10800d43 	ldbu	r2,53(r2)
   1714c:	0084303a 	nor	r2,zero,r2
   17150:	2084703a 	and	r2,r4,r2
   17154:	1009883a 	mov	r4,r2
   17158:	008000b4 	movhi	r2,2
   1715c:	10bf3a44 	addi	r2,r2,-791
   17160:	10c5883a 	add	r2,r2,r3
   17164:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   17168:	e0fffa03 	ldbu	r3,-24(fp)
   1716c:	008000b4 	movhi	r2,2
   17170:	10bf3a44 	addi	r2,r2,-791
   17174:	10c5883a 	add	r2,r2,r3
   17178:	10800003 	ldbu	r2,0(r2)
   1717c:	10803fcc 	andi	r2,r2,255
   17180:	10000c1e 	bne	r2,zero,171b4 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   17184:	e0bff917 	ldw	r2,-28(fp)
   17188:	10800d83 	ldbu	r2,54(r2)
   1718c:	0084303a 	nor	r2,zero,r2
   17190:	1007883a 	mov	r3,r2
   17194:	008000b4 	movhi	r2,2
   17198:	10bf3a04 	addi	r2,r2,-792
   1719c:	10800003 	ldbu	r2,0(r2)
   171a0:	1884703a 	and	r2,r3,r2
   171a4:	1007883a 	mov	r3,r2
   171a8:	008000b4 	movhi	r2,2
   171ac:	10bf3a04 	addi	r2,r2,-792
   171b0:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   171b4:	e0bff917 	ldw	r2,-28(fp)
   171b8:	10800c03 	ldbu	r2,48(r2)
   171bc:	10800214 	ori	r2,r2,8
   171c0:	1007883a 	mov	r3,r2
   171c4:	e0bff917 	ldw	r2,-28(fp)
   171c8:	10c00c05 	stb	r3,48(r2)
   171cc:	e0bff817 	ldw	r2,-32(fp)
   171d0:	e0bffe15 	stw	r2,-8(fp)
   171d4:	e0bffe17 	ldw	r2,-8(fp)
   171d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   171dc:	e0bff703 	ldbu	r2,-36(fp)
   171e0:	10800058 	cmpnei	r2,r2,1
   171e4:	1000011e 	bne	r2,zero,171ec <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   171e8:	0010a040 	call	10a04 <OS_Sched>
    }
    return (OS_ERR_NONE);
   171ec:	0005883a 	mov	r2,zero
}
   171f0:	e037883a 	mov	sp,fp
   171f4:	dfc00117 	ldw	ra,4(sp)
   171f8:	df000017 	ldw	fp,0(sp)
   171fc:	dec00204 	addi	sp,sp,8
   17200:	f800283a 	ret

00017204 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   17204:	defff604 	addi	sp,sp,-40
   17208:	dfc00915 	stw	ra,36(sp)
   1720c:	df000815 	stw	fp,32(sp)
   17210:	df000804 	addi	fp,sp,32
   17214:	2005883a 	mov	r2,r4
   17218:	e17fff15 	stw	r5,-4(fp)
   1721c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17220:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   17224:	e0bffe03 	ldbu	r2,-8(fp)
   17228:	10800570 	cmpltui	r2,r2,21
   1722c:	1000051e 	bne	r2,zero,17244 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   17230:	e0bffe03 	ldbu	r2,-8(fp)
   17234:	10803fe0 	cmpeqi	r2,r2,255
   17238:	1000021e 	bne	r2,zero,17244 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1723c:	00800a84 	movi	r2,42
   17240:	00003606 	br	1731c <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   17244:	e0bfff17 	ldw	r2,-4(fp)
   17248:	1000021e 	bne	r2,zero,17254 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1724c:	00800244 	movi	r2,9
   17250:	00003206 	br	1731c <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17254:	0005303a 	rdctl	r2,status
   17258:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1725c:	e0fffa17 	ldw	r3,-24(fp)
   17260:	00bfff84 	movi	r2,-2
   17264:	1884703a 	and	r2,r3,r2
   17268:	1001703a 	wrctl	status,r2
  
  return context;
   1726c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17270:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   17274:	e0bffe03 	ldbu	r2,-8(fp)
   17278:	10803fd8 	cmpnei	r2,r2,255
   1727c:	1000051e 	bne	r2,zero,17294 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   17280:	008000b4 	movhi	r2,2
   17284:	10bf3d04 	addi	r2,r2,-780
   17288:	10800017 	ldw	r2,0(r2)
   1728c:	10800c83 	ldbu	r2,50(r2)
   17290:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17294:	e0fffe03 	ldbu	r3,-8(fp)
   17298:	008000f4 	movhi	r2,3
   1729c:	10b5b804 	addi	r2,r2,-10528
   172a0:	18c7883a 	add	r3,r3,r3
   172a4:	18c7883a 	add	r3,r3,r3
   172a8:	10c5883a 	add	r2,r2,r3
   172ac:	10800017 	ldw	r2,0(r2)
   172b0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   172b4:	e0bff917 	ldw	r2,-28(fp)
   172b8:	1000061e 	bne	r2,zero,172d4 <OSTaskQuery+0xd0>
   172bc:	e0bff817 	ldw	r2,-32(fp)
   172c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   172c4:	e0bffb17 	ldw	r2,-20(fp)
   172c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   172cc:	00800a44 	movi	r2,41
   172d0:	00001206 	br	1731c <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   172d4:	e0bff917 	ldw	r2,-28(fp)
   172d8:	10800058 	cmpnei	r2,r2,1
   172dc:	1000061e 	bne	r2,zero,172f8 <OSTaskQuery+0xf4>
   172e0:	e0bff817 	ldw	r2,-32(fp)
   172e4:	e0bffc15 	stw	r2,-16(fp)
   172e8:	e0bffc17 	ldw	r2,-16(fp)
   172ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   172f0:	008010c4 	movi	r2,67
   172f4:	00000906 	br	1731c <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   172f8:	e13fff17 	ldw	r4,-4(fp)
   172fc:	e17ff917 	ldw	r5,-28(fp)
   17300:	01801b04 	movi	r6,108
   17304:	00109a00 	call	109a0 <OS_MemCopy>
   17308:	e0bff817 	ldw	r2,-32(fp)
   1730c:	e0bffd15 	stw	r2,-12(fp)
   17310:	e0bffd17 	ldw	r2,-12(fp)
   17314:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17318:	0005883a 	mov	r2,zero
}
   1731c:	e037883a 	mov	sp,fp
   17320:	dfc00117 	ldw	ra,4(sp)
   17324:	df000017 	ldw	fp,0(sp)
   17328:	dec00204 	addi	sp,sp,8
   1732c:	f800283a 	ret

00017330 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   17330:	defffc04 	addi	sp,sp,-16
   17334:	df000315 	stw	fp,12(sp)
   17338:	df000304 	addi	fp,sp,12
   1733c:	e13ffd15 	stw	r4,-12(fp)
   17340:	e17ffe15 	stw	r5,-8(fp)
   17344:	3005883a 	mov	r2,r6
   17348:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1734c:	e0bfff0b 	ldhu	r2,-4(fp)
   17350:	1080004c 	andi	r2,r2,1
   17354:	10000d26 	beq	r2,zero,1738c <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   17358:	e0bfff0b 	ldhu	r2,-4(fp)
   1735c:	1080008c 	andi	r2,r2,2
   17360:	10000a26 	beq	r2,zero,1738c <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   17364:	00000706 	br	17384 <OS_TaskStkClr+0x54>
                size--;
   17368:	e0bffe17 	ldw	r2,-8(fp)
   1736c:	10bfffc4 	addi	r2,r2,-1
   17370:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   17374:	e0bffd17 	ldw	r2,-12(fp)
   17378:	10c00104 	addi	r3,r2,4
   1737c:	e0fffd15 	stw	r3,-12(fp)
   17380:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   17384:	e0bffe17 	ldw	r2,-8(fp)
   17388:	103ff71e 	bne	r2,zero,17368 <__alt_mem_Flash_flash_data+0xf4017368>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1738c:	e037883a 	mov	sp,fp
   17390:	df000017 	ldw	fp,0(sp)
   17394:	dec00104 	addi	sp,sp,4
   17398:	f800283a 	ret

0001739c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1739c:	defff904 	addi	sp,sp,-28
   173a0:	dfc00615 	stw	ra,24(sp)
   173a4:	df000515 	stw	fp,20(sp)
   173a8:	df000504 	addi	fp,sp,20
   173ac:	2005883a 	mov	r2,r4
   173b0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   173b4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   173b8:	008000b4 	movhi	r2,2
   173bc:	10bf3c04 	addi	r2,r2,-784
   173c0:	10800003 	ldbu	r2,0(r2)
   173c4:	10803fcc 	andi	r2,r2,255
   173c8:	10000126 	beq	r2,zero,173d0 <OSTimeDly+0x34>
        return;
   173cc:	00004006 	br	174d0 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   173d0:	e0bfff0b 	ldhu	r2,-4(fp)
   173d4:	10003e26 	beq	r2,zero,174d0 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   173d8:	0005303a 	rdctl	r2,status
   173dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   173e0:	e0fffd17 	ldw	r3,-12(fp)
   173e4:	00bfff84 	movi	r2,-2
   173e8:	1884703a 	and	r2,r3,r2
   173ec:	1001703a 	wrctl	status,r2
  
  return context;
   173f0:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   173f4:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   173f8:	008000b4 	movhi	r2,2
   173fc:	10bf3d04 	addi	r2,r2,-780
   17400:	10800017 	ldw	r2,0(r2)
   17404:	10800d03 	ldbu	r2,52(r2)
   17408:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1740c:	e0fffc03 	ldbu	r3,-16(fp)
   17410:	e13ffc03 	ldbu	r4,-16(fp)
   17414:	008000b4 	movhi	r2,2
   17418:	10bf3a44 	addi	r2,r2,-791
   1741c:	1105883a 	add	r2,r2,r4
   17420:	10800003 	ldbu	r2,0(r2)
   17424:	1009883a 	mov	r4,r2
   17428:	008000b4 	movhi	r2,2
   1742c:	10bf3d04 	addi	r2,r2,-780
   17430:	10800017 	ldw	r2,0(r2)
   17434:	10800d43 	ldbu	r2,53(r2)
   17438:	0084303a 	nor	r2,zero,r2
   1743c:	2084703a 	and	r2,r4,r2
   17440:	1009883a 	mov	r4,r2
   17444:	008000b4 	movhi	r2,2
   17448:	10bf3a44 	addi	r2,r2,-791
   1744c:	10c5883a 	add	r2,r2,r3
   17450:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   17454:	e0fffc03 	ldbu	r3,-16(fp)
   17458:	008000b4 	movhi	r2,2
   1745c:	10bf3a44 	addi	r2,r2,-791
   17460:	10c5883a 	add	r2,r2,r3
   17464:	10800003 	ldbu	r2,0(r2)
   17468:	10803fcc 	andi	r2,r2,255
   1746c:	10000e1e 	bne	r2,zero,174a8 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   17470:	008000b4 	movhi	r2,2
   17474:	10bf3d04 	addi	r2,r2,-780
   17478:	10800017 	ldw	r2,0(r2)
   1747c:	10800d83 	ldbu	r2,54(r2)
   17480:	0084303a 	nor	r2,zero,r2
   17484:	1007883a 	mov	r3,r2
   17488:	008000b4 	movhi	r2,2
   1748c:	10bf3a04 	addi	r2,r2,-792
   17490:	10800003 	ldbu	r2,0(r2)
   17494:	1884703a 	and	r2,r3,r2
   17498:	1007883a 	mov	r3,r2
   1749c:	008000b4 	movhi	r2,2
   174a0:	10bf3a04 	addi	r2,r2,-792
   174a4:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   174a8:	008000b4 	movhi	r2,2
   174ac:	10bf3d04 	addi	r2,r2,-780
   174b0:	10800017 	ldw	r2,0(r2)
   174b4:	e0ffff0b 	ldhu	r3,-4(fp)
   174b8:	10c00b8d 	sth	r3,46(r2)
   174bc:	e0bffb17 	ldw	r2,-20(fp)
   174c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   174c4:	e0bffe17 	ldw	r2,-8(fp)
   174c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   174cc:	0010a040 	call	10a04 <OS_Sched>
    }
}
   174d0:	e037883a 	mov	sp,fp
   174d4:	dfc00117 	ldw	ra,4(sp)
   174d8:	df000017 	ldw	fp,0(sp)
   174dc:	dec00204 	addi	sp,sp,8
   174e0:	f800283a 	ret

000174e4 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   174e4:	defff804 	addi	sp,sp,-32
   174e8:	dfc00715 	stw	ra,28(sp)
   174ec:	df000615 	stw	fp,24(sp)
   174f0:	df000604 	addi	fp,sp,24
   174f4:	2015883a 	mov	r10,r4
   174f8:	2809883a 	mov	r4,r5
   174fc:	3007883a 	mov	r3,r6
   17500:	3805883a 	mov	r2,r7
   17504:	e2bffc05 	stb	r10,-16(fp)
   17508:	e13ffd05 	stb	r4,-12(fp)
   1750c:	e0fffe05 	stb	r3,-8(fp)
   17510:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   17514:	008000b4 	movhi	r2,2
   17518:	10bf3c04 	addi	r2,r2,-784
   1751c:	10800003 	ldbu	r2,0(r2)
   17520:	10803fcc 	andi	r2,r2,255
   17524:	10000226 	beq	r2,zero,17530 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   17528:	00801544 	movi	r2,85
   1752c:	00004206 	br	17638 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   17530:	e0bffc03 	ldbu	r2,-16(fp)
   17534:	1000081e 	bne	r2,zero,17558 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   17538:	e0bffd03 	ldbu	r2,-12(fp)
   1753c:	1000061e 	bne	r2,zero,17558 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   17540:	e0bffe03 	ldbu	r2,-8(fp)
   17544:	1000041e 	bne	r2,zero,17558 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   17548:	e0bfff0b 	ldhu	r2,-4(fp)
   1754c:	1000021e 	bne	r2,zero,17558 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   17550:	00801504 	movi	r2,84
   17554:	00003806 	br	17638 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   17558:	e0bffd03 	ldbu	r2,-12(fp)
   1755c:	10800f30 	cmpltui	r2,r2,60
   17560:	1000021e 	bne	r2,zero,1756c <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   17564:	00801444 	movi	r2,81
   17568:	00003306 	br	17638 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   1756c:	e0bffe03 	ldbu	r2,-8(fp)
   17570:	10800f30 	cmpltui	r2,r2,60
   17574:	1000021e 	bne	r2,zero,17580 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   17578:	00801484 	movi	r2,82
   1757c:	00002e06 	br	17638 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   17580:	e0bfff0b 	ldhu	r2,-4(fp)
   17584:	1080fa30 	cmpltui	r2,r2,1000
   17588:	1000021e 	bne	r2,zero,17594 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   1758c:	008014c4 	movi	r2,83
   17590:	00002906 	br	17638 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   17594:	e0bffc03 	ldbu	r2,-16(fp)
   17598:	10c38424 	muli	r3,r2,3600
   1759c:	e0bffd03 	ldbu	r2,-12(fp)
   175a0:	10800f24 	muli	r2,r2,60
   175a4:	1887883a 	add	r3,r3,r2
   175a8:	e0bffe03 	ldbu	r2,-8(fp)
   175ac:	1885883a 	add	r2,r3,r2
   175b0:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   175b4:	e0bfff0b 	ldhu	r2,-4(fp)
   175b8:	10800f84 	addi	r2,r2,62
   175bc:	100690fa 	slli	r3,r2,3
   175c0:	008418b4 	movhi	r2,4194
   175c4:	109374c4 	addi	r2,r2,19923
   175c8:	188a383a 	mulxuu	r5,r3,r2
   175cc:	1885383a 	mul	r2,r3,r2
   175d0:	1011883a 	mov	r8,r2
   175d4:	2813883a 	mov	r9,r5
   175d8:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   175dc:	2085883a 	add	r2,r4,r2
   175e0:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   175e4:	e0bffb17 	ldw	r2,-20(fp)
   175e8:	1004d43a 	srli	r2,r2,16
   175ec:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   175f0:	e0bffb17 	ldw	r2,-20(fp)
   175f4:	10bfffcc 	andi	r2,r2,65535
   175f8:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   175fc:	e0bffb17 	ldw	r2,-20(fp)
   17600:	10bfffcc 	andi	r2,r2,65535
   17604:	1009883a 	mov	r4,r2
   17608:	001739c0 	call	1739c <OSTimeDly>
    while (loops > 0) {
   1760c:	00000706 	br	1762c <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   17610:	01200014 	movui	r4,32768
   17614:	001739c0 	call	1739c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   17618:	01200014 	movui	r4,32768
   1761c:	001739c0 	call	1739c <OSTimeDly>
        loops--;
   17620:	e0bffa0b 	ldhu	r2,-24(fp)
   17624:	10bfffc4 	addi	r2,r2,-1
   17628:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1762c:	e0bffa0b 	ldhu	r2,-24(fp)
   17630:	103ff71e 	bne	r2,zero,17610 <__alt_mem_Flash_flash_data+0xf4017610>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   17634:	0005883a 	mov	r2,zero
}
   17638:	e037883a 	mov	sp,fp
   1763c:	dfc00117 	ldw	ra,4(sp)
   17640:	df000017 	ldw	fp,0(sp)
   17644:	dec00204 	addi	sp,sp,8
   17648:	f800283a 	ret

0001764c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1764c:	defff504 	addi	sp,sp,-44
   17650:	dfc00a15 	stw	ra,40(sp)
   17654:	df000915 	stw	fp,36(sp)
   17658:	df000904 	addi	fp,sp,36
   1765c:	2005883a 	mov	r2,r4
   17660:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17664:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   17668:	e0bfff03 	ldbu	r2,-4(fp)
   1766c:	10800530 	cmpltui	r2,r2,20
   17670:	1000021e 	bne	r2,zero,1767c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   17674:	00800a84 	movi	r2,42
   17678:	00006b06 	br	17828 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1767c:	0005303a 	rdctl	r2,status
   17680:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17684:	e0fff917 	ldw	r3,-28(fp)
   17688:	00bfff84 	movi	r2,-2
   1768c:	1884703a 	and	r2,r3,r2
   17690:	1001703a 	wrctl	status,r2
  
  return context;
   17694:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   17698:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1769c:	e0ffff03 	ldbu	r3,-4(fp)
   176a0:	008000f4 	movhi	r2,3
   176a4:	10b5b804 	addi	r2,r2,-10528
   176a8:	18c7883a 	add	r3,r3,r3
   176ac:	18c7883a 	add	r3,r3,r3
   176b0:	10c5883a 	add	r2,r2,r3
   176b4:	10800017 	ldw	r2,0(r2)
   176b8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   176bc:	e0bff817 	ldw	r2,-32(fp)
   176c0:	1000061e 	bne	r2,zero,176dc <OSTimeDlyResume+0x90>
   176c4:	e0bff717 	ldw	r2,-36(fp)
   176c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   176cc:	e0bffa17 	ldw	r2,-24(fp)
   176d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   176d4:	008010c4 	movi	r2,67
   176d8:	00005306 	br	17828 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   176dc:	e0bff817 	ldw	r2,-32(fp)
   176e0:	10800058 	cmpnei	r2,r2,1
   176e4:	1000061e 	bne	r2,zero,17700 <OSTimeDlyResume+0xb4>
   176e8:	e0bff717 	ldw	r2,-36(fp)
   176ec:	e0bffb15 	stw	r2,-20(fp)
   176f0:	e0bffb17 	ldw	r2,-20(fp)
   176f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   176f8:	008010c4 	movi	r2,67
   176fc:	00004a06 	br	17828 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   17700:	e0bff817 	ldw	r2,-32(fp)
   17704:	10800b8b 	ldhu	r2,46(r2)
   17708:	10bfffcc 	andi	r2,r2,65535
   1770c:	1000061e 	bne	r2,zero,17728 <OSTimeDlyResume+0xdc>
   17710:	e0bff717 	ldw	r2,-36(fp)
   17714:	e0bffc15 	stw	r2,-16(fp)
   17718:	e0bffc17 	ldw	r2,-16(fp)
   1771c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   17720:	00801404 	movi	r2,80
   17724:	00004006 	br	17828 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   17728:	e0bff817 	ldw	r2,-32(fp)
   1772c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   17730:	e0bff817 	ldw	r2,-32(fp)
   17734:	10800c03 	ldbu	r2,48(r2)
   17738:	10803fcc 	andi	r2,r2,255
   1773c:	10800dcc 	andi	r2,r2,55
   17740:	10000b26 	beq	r2,zero,17770 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   17744:	e0bff817 	ldw	r2,-32(fp)
   17748:	10c00c03 	ldbu	r3,48(r2)
   1774c:	00bff204 	movi	r2,-56
   17750:	1884703a 	and	r2,r3,r2
   17754:	1007883a 	mov	r3,r2
   17758:	e0bff817 	ldw	r2,-32(fp)
   1775c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   17760:	e0bff817 	ldw	r2,-32(fp)
   17764:	00c00044 	movi	r3,1
   17768:	10c00c45 	stb	r3,49(r2)
   1776c:	00000206 	br	17778 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   17770:	e0bff817 	ldw	r2,-32(fp)
   17774:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   17778:	e0bff817 	ldw	r2,-32(fp)
   1777c:	10800c03 	ldbu	r2,48(r2)
   17780:	10803fcc 	andi	r2,r2,255
   17784:	1080020c 	andi	r2,r2,8
   17788:	1000221e 	bne	r2,zero,17814 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1778c:	e0bff817 	ldw	r2,-32(fp)
   17790:	10c00d83 	ldbu	r3,54(r2)
   17794:	008000b4 	movhi	r2,2
   17798:	10bf3a04 	addi	r2,r2,-792
   1779c:	10800003 	ldbu	r2,0(r2)
   177a0:	1884b03a 	or	r2,r3,r2
   177a4:	1007883a 	mov	r3,r2
   177a8:	008000b4 	movhi	r2,2
   177ac:	10bf3a04 	addi	r2,r2,-792
   177b0:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   177b4:	e0bff817 	ldw	r2,-32(fp)
   177b8:	10800d03 	ldbu	r2,52(r2)
   177bc:	10c03fcc 	andi	r3,r2,255
   177c0:	e0bff817 	ldw	r2,-32(fp)
   177c4:	10800d03 	ldbu	r2,52(r2)
   177c8:	11003fcc 	andi	r4,r2,255
   177cc:	008000b4 	movhi	r2,2
   177d0:	10bf3a44 	addi	r2,r2,-791
   177d4:	1105883a 	add	r2,r2,r4
   177d8:	11000003 	ldbu	r4,0(r2)
   177dc:	e0bff817 	ldw	r2,-32(fp)
   177e0:	10800d43 	ldbu	r2,53(r2)
   177e4:	2084b03a 	or	r2,r4,r2
   177e8:	1009883a 	mov	r4,r2
   177ec:	008000b4 	movhi	r2,2
   177f0:	10bf3a44 	addi	r2,r2,-791
   177f4:	10c5883a 	add	r2,r2,r3
   177f8:	11000005 	stb	r4,0(r2)
   177fc:	e0bff717 	ldw	r2,-36(fp)
   17800:	e0bffd15 	stw	r2,-12(fp)
   17804:	e0bffd17 	ldw	r2,-12(fp)
   17808:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   1780c:	0010a040 	call	10a04 <OS_Sched>
   17810:	00000406 	br	17824 <OSTimeDlyResume+0x1d8>
   17814:	e0bff717 	ldw	r2,-36(fp)
   17818:	e0bffe15 	stw	r2,-8(fp)
   1781c:	e0bffe17 	ldw	r2,-8(fp)
   17820:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   17824:	0005883a 	mov	r2,zero
}
   17828:	e037883a 	mov	sp,fp
   1782c:	dfc00117 	ldw	ra,4(sp)
   17830:	df000017 	ldw	fp,0(sp)
   17834:	dec00204 	addi	sp,sp,8
   17838:	f800283a 	ret

0001783c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1783c:	defffb04 	addi	sp,sp,-20
   17840:	df000415 	stw	fp,16(sp)
   17844:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17848:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1784c:	0005303a 	rdctl	r2,status
   17850:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17854:	e0fffe17 	ldw	r3,-8(fp)
   17858:	00bfff84 	movi	r2,-2
   1785c:	1884703a 	and	r2,r3,r2
   17860:	1001703a 	wrctl	status,r2
  
  return context;
   17864:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   17868:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1786c:	008000b4 	movhi	r2,2
   17870:	10bf3e04 	addi	r2,r2,-776
   17874:	10800017 	ldw	r2,0(r2)
   17878:	e0bffd15 	stw	r2,-12(fp)
   1787c:	e0bffc17 	ldw	r2,-16(fp)
   17880:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17884:	e0bfff17 	ldw	r2,-4(fp)
   17888:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1788c:	e0bffd17 	ldw	r2,-12(fp)
}
   17890:	e037883a 	mov	sp,fp
   17894:	df000017 	ldw	fp,0(sp)
   17898:	dec00104 	addi	sp,sp,4
   1789c:	f800283a 	ret

000178a0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   178a0:	defffb04 	addi	sp,sp,-20
   178a4:	df000415 	stw	fp,16(sp)
   178a8:	df000404 	addi	fp,sp,16
   178ac:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   178b0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   178b4:	0005303a 	rdctl	r2,status
   178b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   178bc:	e0fffd17 	ldw	r3,-12(fp)
   178c0:	00bfff84 	movi	r2,-2
   178c4:	1884703a 	and	r2,r3,r2
   178c8:	1001703a 	wrctl	status,r2
  
  return context;
   178cc:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   178d0:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   178d4:	008000b4 	movhi	r2,2
   178d8:	10bf3e04 	addi	r2,r2,-776
   178dc:	e0ffff17 	ldw	r3,-4(fp)
   178e0:	10c00015 	stw	r3,0(r2)
   178e4:	e0bffc17 	ldw	r2,-16(fp)
   178e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   178ec:	e0bffe17 	ldw	r2,-8(fp)
   178f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   178f4:	e037883a 	mov	sp,fp
   178f8:	df000017 	ldw	fp,0(sp)
   178fc:	dec00104 	addi	sp,sp,4
   17900:	f800283a 	ret

00017904 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   17904:	defffd04 	addi	sp,sp,-12
   17908:	dfc00215 	stw	ra,8(sp)
   1790c:	df000115 	stw	fp,4(sp)
   17910:	df000104 	addi	fp,sp,4
   17914:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   17918:	e13fff17 	ldw	r4,-4(fp)
   1791c:	014000b4 	movhi	r5,2
   17920:	29771604 	addi	r5,r5,-9128
   17924:	001a2d80 	call	1a2d8 <alt_dev_llist_insert>
}
   17928:	e037883a 	mov	sp,fp
   1792c:	dfc00117 	ldw	ra,4(sp)
   17930:	df000017 	ldw	fp,0(sp)
   17934:	dec00204 	addi	sp,sp,8
   17938:	f800283a 	ret

0001793c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1793c:	defffd04 	addi	sp,sp,-12
   17940:	dfc00215 	stw	ra,8(sp)
   17944:	df000115 	stw	fp,4(sp)
   17948:	df000104 	addi	fp,sp,4
   1794c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   17950:	001abec0 	call	1abec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   17954:	00800044 	movi	r2,1
   17958:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1795c:	e037883a 	mov	sp,fp
   17960:	dfc00117 	ldw	ra,4(sp)
   17964:	df000017 	ldw	fp,0(sp)
   17968:	dec00204 	addi	sp,sp,8
   1796c:	f800283a 	ret

00017970 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   17970:	defffd04 	addi	sp,sp,-12
   17974:	dfc00215 	stw	ra,8(sp)
   17978:	df000115 	stw	fp,4(sp)
   1797c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   17980:	01040034 	movhi	r4,4096
   17984:	21080004 	addi	r4,r4,8192
   17988:	000b883a 	mov	r5,zero
   1798c:	000d883a 	mov	r6,zero
   17990:	01c00204 	movi	r7,8
   17994:	0018ae40 	call	18ae4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   17998:	010000b4 	movhi	r4,2
   1799c:	21321004 	addi	r4,r4,-14272
   179a0:	000b883a 	mov	r5,zero
   179a4:	01800204 	movi	r6,8
   179a8:	0017eac0 	call	17eac <altera_avalon_jtag_uart_init>
   179ac:	010000b4 	movhi	r4,2
   179b0:	21320604 	addi	r4,r4,-14312
   179b4:	00179040 	call	17904 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   179b8:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   179bc:	010000b4 	movhi	r4,2
   179c0:	21362104 	addi	r4,r4,-10108
   179c4:	00179040 	call	17904 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   179c8:	010000b4 	movhi	r4,2
   179cc:	21362d04 	addi	r4,r4,-10060
   179d0:	00179040 	call	17904 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   179d4:	010000b4 	movhi	r4,2
   179d8:	21363904 	addi	r4,r4,-10012
   179dc:	0018c140 	call	18c14 <alt_up_character_lcd_init>
   179e0:	010000b4 	movhi	r4,2
   179e4:	21363904 	addi	r4,r4,-10012
   179e8:	00179040 	call	17904 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   179ec:	010000b4 	movhi	r4,2
   179f0:	21364404 	addi	r4,r4,-9968
   179f4:	00179040 	call	17904 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   179f8:	010000b4 	movhi	r4,2
   179fc:	21364f04 	addi	r4,r4,-9924
   17a00:	00179040 	call	17904 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   17a04:	010000b4 	movhi	r4,2
   17a08:	21365a04 	addi	r4,r4,-9880
   17a0c:	00179040 	call	17904 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   17a10:	010000b4 	movhi	r4,2
   17a14:	21366504 	addi	r4,r4,-9836
   17a18:	00179040 	call	17904 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   17a1c:	010000b4 	movhi	r4,2
   17a20:	21367004 	addi	r4,r4,-9792
   17a24:	00179040 	call	17904 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   17a28:	010000b4 	movhi	r4,2
   17a2c:	21367b04 	addi	r4,r4,-9748
   17a30:	00179040 	call	17904 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   17a34:	010000b4 	movhi	r4,2
   17a38:	21368604 	addi	r4,r4,-9704
   17a3c:	00179040 	call	17904 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   17a40:	010000b4 	movhi	r4,2
   17a44:	21369104 	addi	r4,r4,-9660
   17a48:	00179040 	call	17904 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   17a4c:	010000b4 	movhi	r4,2
   17a50:	21369c04 	addi	r4,r4,-9616
   17a54:	001952c0 	call	1952c <alt_up_ps2_init>
   17a58:	010000b4 	movhi	r4,2
   17a5c:	21369c04 	addi	r4,r4,-9616
   17a60:	00179040 	call	17904 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   17a64:	010000b4 	movhi	r4,2
   17a68:	2136aa04 	addi	r4,r4,-9560
   17a6c:	001952c0 	call	1952c <alt_up_ps2_init>
   17a70:	010000b4 	movhi	r4,2
   17a74:	2136aa04 	addi	r4,r4,-9560
   17a78:	00179040 	call	17904 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   17a7c:	010000b4 	movhi	r4,2
   17a80:	2136b804 	addi	r4,r4,-9504
   17a84:	00179040 	call	17904 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   17a88:	010000b4 	movhi	r4,2
   17a8c:	2136c304 	addi	r4,r4,-9460
   17a90:	00179040 	call	17904 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   17a94:	008000b4 	movhi	r2,2
   17a98:	10b6d004 	addi	r2,r2,-9408
   17a9c:	10800a17 	ldw	r2,40(r2)
   17aa0:	10800104 	addi	r2,r2,4
   17aa4:	10800017 	ldw	r2,0(r2)
   17aa8:	10ffffcc 	andi	r3,r2,65535
   17aac:	008000b4 	movhi	r2,2
   17ab0:	10b6d004 	addi	r2,r2,-9408
   17ab4:	10c00c15 	stw	r3,48(r2)
   17ab8:	008000b4 	movhi	r2,2
   17abc:	10b6d004 	addi	r2,r2,-9408
   17ac0:	10800a17 	ldw	r2,40(r2)
   17ac4:	10800104 	addi	r2,r2,4
   17ac8:	10800017 	ldw	r2,0(r2)
   17acc:	1006d43a 	srli	r3,r2,16
   17ad0:	008000b4 	movhi	r2,2
   17ad4:	10b6d004 	addi	r2,r2,-9408
   17ad8:	10c00d15 	stw	r3,52(r2)
   17adc:	008000b4 	movhi	r2,2
   17ae0:	10b6d004 	addi	r2,r2,-9408
   17ae4:	10800c17 	ldw	r2,48(r2)
   17ae8:	10801068 	cmpgeui	r2,r2,65
   17aec:	1000081e 	bne	r2,zero,17b10 <alt_sys_init+0x1a0>
   17af0:	008000b4 	movhi	r2,2
   17af4:	10b6d004 	addi	r2,r2,-9408
   17af8:	00c00fc4 	movi	r3,63
   17afc:	10c00f15 	stw	r3,60(r2)
   17b00:	008000b4 	movhi	r2,2
   17b04:	10b6d004 	addi	r2,r2,-9408
   17b08:	00c00184 	movi	r3,6
   17b0c:	10c01015 	stw	r3,64(r2)
   17b10:	008000b4 	movhi	r2,2
   17b14:	10b6d004 	addi	r2,r2,-9408
   17b18:	10800d17 	ldw	r2,52(r2)
   17b1c:	10800868 	cmpgeui	r2,r2,33
   17b20:	1000041e 	bne	r2,zero,17b34 <alt_sys_init+0x1c4>
   17b24:	008000b4 	movhi	r2,2
   17b28:	10b6d004 	addi	r2,r2,-9408
   17b2c:	00c007c4 	movi	r3,31
   17b30:	10c01115 	stw	r3,68(r2)
   17b34:	010000b4 	movhi	r4,2
   17b38:	2136d004 	addi	r4,r4,-9408
   17b3c:	0019e440 	call	19e44 <alt_up_char_buffer_init>
   17b40:	010000b4 	movhi	r4,2
   17b44:	2136d004 	addi	r4,r4,-9408
   17b48:	00179040 	call	17904 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   17b4c:	008000b4 	movhi	r2,2
   17b50:	10b6e204 	addi	r2,r2,-9336
   17b54:	10800a17 	ldw	r2,40(r2)
   17b58:	10800017 	ldw	r2,0(r2)
   17b5c:	1007883a 	mov	r3,r2
   17b60:	008000b4 	movhi	r2,2
   17b64:	10b6e204 	addi	r2,r2,-9336
   17b68:	10c00b15 	stw	r3,44(r2)
   17b6c:	008000b4 	movhi	r2,2
   17b70:	10b6e204 	addi	r2,r2,-9336
   17b74:	10800a17 	ldw	r2,40(r2)
   17b78:	10800104 	addi	r2,r2,4
   17b7c:	10800017 	ldw	r2,0(r2)
   17b80:	1007883a 	mov	r3,r2
   17b84:	008000b4 	movhi	r2,2
   17b88:	10b6e204 	addi	r2,r2,-9336
   17b8c:	10c00c15 	stw	r3,48(r2)
   17b90:	008000b4 	movhi	r2,2
   17b94:	10b6e204 	addi	r2,r2,-9336
   17b98:	10800a17 	ldw	r2,40(r2)
   17b9c:	10800204 	addi	r2,r2,8
   17ba0:	10800017 	ldw	r2,0(r2)
   17ba4:	10ffffcc 	andi	r3,r2,65535
   17ba8:	008000b4 	movhi	r2,2
   17bac:	10b6e204 	addi	r2,r2,-9336
   17bb0:	10c00f15 	stw	r3,60(r2)
   17bb4:	008000b4 	movhi	r2,2
   17bb8:	10b6e204 	addi	r2,r2,-9336
   17bbc:	10800a17 	ldw	r2,40(r2)
   17bc0:	10800204 	addi	r2,r2,8
   17bc4:	10800017 	ldw	r2,0(r2)
   17bc8:	1006d43a 	srli	r3,r2,16
   17bcc:	008000b4 	movhi	r2,2
   17bd0:	10b6e204 	addi	r2,r2,-9336
   17bd4:	10c01015 	stw	r3,64(r2)
   17bd8:	008000b4 	movhi	r2,2
   17bdc:	10b6e204 	addi	r2,r2,-9336
   17be0:	10800a17 	ldw	r2,40(r2)
   17be4:	10800304 	addi	r2,r2,12
   17be8:	10800017 	ldw	r2,0(r2)
   17bec:	1005d07a 	srai	r2,r2,1
   17bf0:	10c0004c 	andi	r3,r2,1
   17bf4:	008000b4 	movhi	r2,2
   17bf8:	10b6e204 	addi	r2,r2,-9336
   17bfc:	10c00d15 	stw	r3,52(r2)
   17c00:	008000b4 	movhi	r2,2
   17c04:	10b6e204 	addi	r2,r2,-9336
   17c08:	10800a17 	ldw	r2,40(r2)
   17c0c:	10800304 	addi	r2,r2,12
   17c10:	10800017 	ldw	r2,0(r2)
   17c14:	1005d13a 	srai	r2,r2,4
   17c18:	10c003cc 	andi	r3,r2,15
   17c1c:	008000b4 	movhi	r2,2
   17c20:	10b6e204 	addi	r2,r2,-9336
   17c24:	10c00e15 	stw	r3,56(r2)
   17c28:	008000b4 	movhi	r2,2
   17c2c:	10b6e204 	addi	r2,r2,-9336
   17c30:	10800a17 	ldw	r2,40(r2)
   17c34:	10800304 	addi	r2,r2,12
   17c38:	10800017 	ldw	r2,0(r2)
   17c3c:	1005d43a 	srai	r2,r2,16
   17c40:	e0bfff05 	stb	r2,-4(fp)
   17c44:	008000b4 	movhi	r2,2
   17c48:	10b6e204 	addi	r2,r2,-9336
   17c4c:	10800a17 	ldw	r2,40(r2)
   17c50:	10800304 	addi	r2,r2,12
   17c54:	10800017 	ldw	r2,0(r2)
   17c58:	1004d63a 	srli	r2,r2,24
   17c5c:	e0bfff45 	stb	r2,-3(fp)
   17c60:	008000b4 	movhi	r2,2
   17c64:	10b6e204 	addi	r2,r2,-9336
   17c68:	10800e17 	ldw	r2,56(r2)
   17c6c:	10800058 	cmpnei	r2,r2,1
   17c70:	1000041e 	bne	r2,zero,17c84 <alt_sys_init+0x314>
   17c74:	008000b4 	movhi	r2,2
   17c78:	10b6e204 	addi	r2,r2,-9336
   17c7c:	10001115 	stw	zero,68(r2)
   17c80:	00000e06 	br	17cbc <alt_sys_init+0x34c>
   17c84:	008000b4 	movhi	r2,2
   17c88:	10b6e204 	addi	r2,r2,-9336
   17c8c:	10800e17 	ldw	r2,56(r2)
   17c90:	10800098 	cmpnei	r2,r2,2
   17c94:	1000051e 	bne	r2,zero,17cac <alt_sys_init+0x33c>
   17c98:	008000b4 	movhi	r2,2
   17c9c:	10b6e204 	addi	r2,r2,-9336
   17ca0:	00c00044 	movi	r3,1
   17ca4:	10c01115 	stw	r3,68(r2)
   17ca8:	00000406 	br	17cbc <alt_sys_init+0x34c>
   17cac:	008000b4 	movhi	r2,2
   17cb0:	10b6e204 	addi	r2,r2,-9336
   17cb4:	00c00084 	movi	r3,2
   17cb8:	10c01115 	stw	r3,68(r2)
   17cbc:	e0bfff03 	ldbu	r2,-4(fp)
   17cc0:	00c00804 	movi	r3,32
   17cc4:	1885c83a 	sub	r2,r3,r2
   17cc8:	00ffffc4 	movi	r3,-1
   17ccc:	1886d83a 	srl	r3,r3,r2
   17cd0:	008000b4 	movhi	r2,2
   17cd4:	10b6e204 	addi	r2,r2,-9336
   17cd8:	10c01215 	stw	r3,72(r2)
   17cdc:	e0ffff03 	ldbu	r3,-4(fp)
   17ce0:	008000b4 	movhi	r2,2
   17ce4:	10b6e204 	addi	r2,r2,-9336
   17ce8:	10801117 	ldw	r2,68(r2)
   17cec:	1887883a 	add	r3,r3,r2
   17cf0:	008000b4 	movhi	r2,2
   17cf4:	10b6e204 	addi	r2,r2,-9336
   17cf8:	10c01315 	stw	r3,76(r2)
   17cfc:	e0bfff43 	ldbu	r2,-3(fp)
   17d00:	00c00804 	movi	r3,32
   17d04:	1885c83a 	sub	r2,r3,r2
   17d08:	00ffffc4 	movi	r3,-1
   17d0c:	1886d83a 	srl	r3,r3,r2
   17d10:	008000b4 	movhi	r2,2
   17d14:	10b6e204 	addi	r2,r2,-9336
   17d18:	10c01415 	stw	r3,80(r2)
   17d1c:	010000b4 	movhi	r4,2
   17d20:	2136e204 	addi	r4,r4,-9336
   17d24:	00179040 	call	17904 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   17d28:	010000b4 	movhi	r4,2
   17d2c:	2136f704 	addi	r4,r4,-9252
   17d30:	00179040 	call	17904 <alt_dev_reg>
}
   17d34:	e037883a 	mov	sp,fp
   17d38:	dfc00117 	ldw	ra,4(sp)
   17d3c:	df000017 	ldw	fp,0(sp)
   17d40:	dec00204 	addi	sp,sp,8
   17d44:	f800283a 	ret

00017d48 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   17d48:	defffa04 	addi	sp,sp,-24
   17d4c:	dfc00515 	stw	ra,20(sp)
   17d50:	df000415 	stw	fp,16(sp)
   17d54:	df000404 	addi	fp,sp,16
   17d58:	e13ffd15 	stw	r4,-12(fp)
   17d5c:	e17ffe15 	stw	r5,-8(fp)
   17d60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   17d64:	e0bffd17 	ldw	r2,-12(fp)
   17d68:	10800017 	ldw	r2,0(r2)
   17d6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   17d70:	e0bffc17 	ldw	r2,-16(fp)
   17d74:	10c00a04 	addi	r3,r2,40
   17d78:	e0bffd17 	ldw	r2,-12(fp)
   17d7c:	10800217 	ldw	r2,8(r2)
   17d80:	1809883a 	mov	r4,r3
   17d84:	e17ffe17 	ldw	r5,-8(fp)
   17d88:	e1bfff17 	ldw	r6,-4(fp)
   17d8c:	100f883a 	mov	r7,r2
   17d90:	00184f80 	call	184f8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   17d94:	e037883a 	mov	sp,fp
   17d98:	dfc00117 	ldw	ra,4(sp)
   17d9c:	df000017 	ldw	fp,0(sp)
   17da0:	dec00204 	addi	sp,sp,8
   17da4:	f800283a 	ret

00017da8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   17da8:	defffa04 	addi	sp,sp,-24
   17dac:	dfc00515 	stw	ra,20(sp)
   17db0:	df000415 	stw	fp,16(sp)
   17db4:	df000404 	addi	fp,sp,16
   17db8:	e13ffd15 	stw	r4,-12(fp)
   17dbc:	e17ffe15 	stw	r5,-8(fp)
   17dc0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   17dc4:	e0bffd17 	ldw	r2,-12(fp)
   17dc8:	10800017 	ldw	r2,0(r2)
   17dcc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   17dd0:	e0bffc17 	ldw	r2,-16(fp)
   17dd4:	10c00a04 	addi	r3,r2,40
   17dd8:	e0bffd17 	ldw	r2,-12(fp)
   17ddc:	10800217 	ldw	r2,8(r2)
   17de0:	1809883a 	mov	r4,r3
   17de4:	e17ffe17 	ldw	r5,-8(fp)
   17de8:	e1bfff17 	ldw	r6,-4(fp)
   17dec:	100f883a 	mov	r7,r2
   17df0:	00187ac0 	call	187ac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   17df4:	e037883a 	mov	sp,fp
   17df8:	dfc00117 	ldw	ra,4(sp)
   17dfc:	df000017 	ldw	fp,0(sp)
   17e00:	dec00204 	addi	sp,sp,8
   17e04:	f800283a 	ret

00017e08 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   17e08:	defffc04 	addi	sp,sp,-16
   17e0c:	dfc00315 	stw	ra,12(sp)
   17e10:	df000215 	stw	fp,8(sp)
   17e14:	df000204 	addi	fp,sp,8
   17e18:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   17e1c:	e0bfff17 	ldw	r2,-4(fp)
   17e20:	10800017 	ldw	r2,0(r2)
   17e24:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   17e28:	e0bffe17 	ldw	r2,-8(fp)
   17e2c:	10c00a04 	addi	r3,r2,40
   17e30:	e0bfff17 	ldw	r2,-4(fp)
   17e34:	10800217 	ldw	r2,8(r2)
   17e38:	1809883a 	mov	r4,r3
   17e3c:	100b883a 	mov	r5,r2
   17e40:	00183a40 	call	183a4 <altera_avalon_jtag_uart_close>
}
   17e44:	e037883a 	mov	sp,fp
   17e48:	dfc00117 	ldw	ra,4(sp)
   17e4c:	df000017 	ldw	fp,0(sp)
   17e50:	dec00204 	addi	sp,sp,8
   17e54:	f800283a 	ret

00017e58 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   17e58:	defffa04 	addi	sp,sp,-24
   17e5c:	dfc00515 	stw	ra,20(sp)
   17e60:	df000415 	stw	fp,16(sp)
   17e64:	df000404 	addi	fp,sp,16
   17e68:	e13ffd15 	stw	r4,-12(fp)
   17e6c:	e17ffe15 	stw	r5,-8(fp)
   17e70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   17e74:	e0bffd17 	ldw	r2,-12(fp)
   17e78:	10800017 	ldw	r2,0(r2)
   17e7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   17e80:	e0bffc17 	ldw	r2,-16(fp)
   17e84:	10800a04 	addi	r2,r2,40
   17e88:	1009883a 	mov	r4,r2
   17e8c:	e17ffe17 	ldw	r5,-8(fp)
   17e90:	e1bfff17 	ldw	r6,-4(fp)
   17e94:	001840c0 	call	1840c <altera_avalon_jtag_uart_ioctl>
}
   17e98:	e037883a 	mov	sp,fp
   17e9c:	dfc00117 	ldw	ra,4(sp)
   17ea0:	df000017 	ldw	fp,0(sp)
   17ea4:	dec00204 	addi	sp,sp,8
   17ea8:	f800283a 	ret

00017eac <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   17eac:	defff104 	addi	sp,sp,-60
   17eb0:	dfc00e15 	stw	ra,56(sp)
   17eb4:	df000d15 	stw	fp,52(sp)
   17eb8:	df000d04 	addi	fp,sp,52
   17ebc:	e13ff915 	stw	r4,-28(fp)
   17ec0:	e17ffa15 	stw	r5,-24(fp)
   17ec4:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   17ec8:	e0bff917 	ldw	r2,-28(fp)
   17ecc:	10800c04 	addi	r2,r2,48
   17ed0:	e0bff315 	stw	r2,-52(fp)
   17ed4:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   17ed8:	e0fff40b 	ldhu	r3,-48(fp)
   17edc:	e0bff884 	addi	r2,fp,-30
   17ee0:	1809883a 	mov	r4,r3
   17ee4:	100b883a 	mov	r5,r2
   17ee8:	00115700 	call	11570 <OSFlagCreate>
   17eec:	1007883a 	mov	r3,r2
   17ef0:	e0bff317 	ldw	r2,-52(fp)
   17ef4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   17ef8:	e0bff917 	ldw	r2,-28(fp)
   17efc:	10800a04 	addi	r2,r2,40
   17f00:	e0bff515 	stw	r2,-44(fp)
   17f04:	00800044 	movi	r2,1
   17f08:	e0bff60d 	sth	r2,-40(fp)
   17f0c:	e0bff60b 	ldhu	r2,-40(fp)
   17f10:	1009883a 	mov	r4,r2
   17f14:	00150500 	call	15050 <OSSemCreate>
   17f18:	1007883a 	mov	r3,r2
   17f1c:	e0bff517 	ldw	r2,-44(fp)
   17f20:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   17f24:	e0bff917 	ldw	r2,-28(fp)
   17f28:	10800b04 	addi	r2,r2,44
   17f2c:	e0bff715 	stw	r2,-36(fp)
   17f30:	00800044 	movi	r2,1
   17f34:	e0bff80d 	sth	r2,-32(fp)
   17f38:	e0bff80b 	ldhu	r2,-32(fp)
   17f3c:	1009883a 	mov	r4,r2
   17f40:	00150500 	call	15050 <OSSemCreate>
   17f44:	1007883a 	mov	r3,r2
   17f48:	e0bff717 	ldw	r2,-36(fp)
   17f4c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   17f50:	e0bff917 	ldw	r2,-28(fp)
   17f54:	00c00044 	movi	r3,1
   17f58:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   17f5c:	e0bff917 	ldw	r2,-28(fp)
   17f60:	10800017 	ldw	r2,0(r2)
   17f64:	10800104 	addi	r2,r2,4
   17f68:	1007883a 	mov	r3,r2
   17f6c:	e0bff917 	ldw	r2,-28(fp)
   17f70:	10800817 	ldw	r2,32(r2)
   17f74:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   17f78:	e0bffb17 	ldw	r2,-20(fp)
   17f7c:	1009883a 	mov	r4,r2
   17f80:	e17ff917 	ldw	r5,-28(fp)
   17f84:	01800074 	movhi	r6,1
   17f88:	319ffb04 	addi	r6,r6,32748
   17f8c:	001a62c0 	call	1a62c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   17f90:	e0bff917 	ldw	r2,-28(fp)
   17f94:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   17f98:	e0bff917 	ldw	r2,-28(fp)
   17f9c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   17fa0:	008000b4 	movhi	r2,2
   17fa4:	10bf4304 	addi	r2,r2,-756
   17fa8:	10800017 	ldw	r2,0(r2)
   17fac:	1809883a 	mov	r4,r3
   17fb0:	100b883a 	mov	r5,r2
   17fb4:	018000b4 	movhi	r6,2
   17fb8:	31a0a504 	addi	r6,r6,-32108
   17fbc:	e1fff917 	ldw	r7,-28(fp)
   17fc0:	001a12c0 	call	1a12c <alt_alarm_start>
   17fc4:	1000040e 	bge	r2,zero,17fd8 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   17fc8:	e0fff917 	ldw	r3,-28(fp)
   17fcc:	00a00034 	movhi	r2,32768
   17fd0:	10bfffc4 	addi	r2,r2,-1
   17fd4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   17fd8:	e037883a 	mov	sp,fp
   17fdc:	dfc00117 	ldw	ra,4(sp)
   17fe0:	df000017 	ldw	fp,0(sp)
   17fe4:	dec00204 	addi	sp,sp,8
   17fe8:	f800283a 	ret

00017fec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   17fec:	defff104 	addi	sp,sp,-60
   17ff0:	dfc00e15 	stw	ra,56(sp)
   17ff4:	df000d15 	stw	fp,52(sp)
   17ff8:	df000d04 	addi	fp,sp,52
   17ffc:	e13ffe15 	stw	r4,-8(fp)
   18000:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   18004:	e0bffe17 	ldw	r2,-8(fp)
   18008:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   1800c:	e0bff517 	ldw	r2,-44(fp)
   18010:	10800017 	ldw	r2,0(r2)
   18014:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   18018:	e0bff617 	ldw	r2,-40(fp)
   1801c:	10800104 	addi	r2,r2,4
   18020:	10800037 	ldwio	r2,0(r2)
   18024:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   18028:	e0bff717 	ldw	r2,-36(fp)
   1802c:	1080c00c 	andi	r2,r2,768
   18030:	1000011e 	bne	r2,zero,18038 <altera_avalon_jtag_uart_irq+0x4c>
      break;
   18034:	00009206 	br	18280 <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   18038:	e0bff717 	ldw	r2,-36(fp)
   1803c:	1080400c 	andi	r2,r2,256
   18040:	10004726 	beq	r2,zero,18160 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   18044:	00800074 	movhi	r2,1
   18048:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1804c:	e0bff517 	ldw	r2,-44(fp)
   18050:	10800d17 	ldw	r2,52(r2)
   18054:	10800044 	addi	r2,r2,1
   18058:	1081ffcc 	andi	r2,r2,2047
   1805c:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   18060:	e0bff517 	ldw	r2,-44(fp)
   18064:	10c00e17 	ldw	r3,56(r2)
   18068:	e0bff817 	ldw	r2,-32(fp)
   1806c:	1880011e 	bne	r3,r2,18074 <altera_avalon_jtag_uart_irq+0x88>
          break;
   18070:	00002906 	br	18118 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   18074:	e0bff617 	ldw	r2,-40(fp)
   18078:	10800037 	ldwio	r2,0(r2)
   1807c:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   18080:	e0bff317 	ldw	r2,-52(fp)
   18084:	10a0000c 	andi	r2,r2,32768
   18088:	1000011e 	bne	r2,zero,18090 <altera_avalon_jtag_uart_irq+0xa4>
          break;
   1808c:	00002206 	br	18118 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   18090:	e0bff517 	ldw	r2,-44(fp)
   18094:	10800d17 	ldw	r2,52(r2)
   18098:	e0fff317 	ldw	r3,-52(fp)
   1809c:	1809883a 	mov	r4,r3
   180a0:	e0fff517 	ldw	r3,-44(fp)
   180a4:	1885883a 	add	r2,r3,r2
   180a8:	10801104 	addi	r2,r2,68
   180ac:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   180b0:	e0bff517 	ldw	r2,-44(fp)
   180b4:	10800d17 	ldw	r2,52(r2)
   180b8:	10800044 	addi	r2,r2,1
   180bc:	10c1ffcc 	andi	r3,r2,2047
   180c0:	e0bff517 	ldw	r2,-44(fp)
   180c4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   180c8:	e0bff517 	ldw	r2,-44(fp)
   180cc:	10800c17 	ldw	r2,48(r2)
   180d0:	e0bff915 	stw	r2,-28(fp)
   180d4:	00800044 	movi	r2,1
   180d8:	e0bffa0d 	sth	r2,-24(fp)
   180dc:	00800044 	movi	r2,1
   180e0:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   180e4:	008000b4 	movhi	r2,2
   180e8:	10bf2e44 	addi	r2,r2,-839
   180ec:	10800003 	ldbu	r2,0(r2)
   180f0:	10803fcc 	andi	r2,r2,255
   180f4:	103fd526 	beq	r2,zero,1804c <__alt_mem_Flash_flash_data+0xf401804c>
  {
    OSFlagPost (group, flags, opt, &err);
   180f8:	e17ffa0b 	ldhu	r5,-24(fp)
   180fc:	e0fffa83 	ldbu	r3,-22(fp)
   18100:	e0bffcc4 	addi	r2,fp,-13
   18104:	e13ff917 	ldw	r4,-28(fp)
   18108:	180d883a 	mov	r6,r3
   1810c:	100f883a 	mov	r7,r2
   18110:	00121e00 	call	121e0 <OSFlagPost>
      }
   18114:	003fcd06 	br	1804c <__alt_mem_Flash_flash_data+0xf401804c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   18118:	e0bff317 	ldw	r2,-52(fp)
   1811c:	10bfffec 	andhi	r2,r2,65535
   18120:	10000f26 	beq	r2,zero,18160 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   18124:	e0bff517 	ldw	r2,-44(fp)
   18128:	10c00817 	ldw	r3,32(r2)
   1812c:	00bfff84 	movi	r2,-2
   18130:	1886703a 	and	r3,r3,r2
   18134:	e0bff517 	ldw	r2,-44(fp)
   18138:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1813c:	e0bff617 	ldw	r2,-40(fp)
   18140:	10800104 	addi	r2,r2,4
   18144:	1007883a 	mov	r3,r2
   18148:	e0bff517 	ldw	r2,-44(fp)
   1814c:	10800817 	ldw	r2,32(r2)
   18150:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   18154:	e0bff617 	ldw	r2,-40(fp)
   18158:	10800104 	addi	r2,r2,4
   1815c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   18160:	e0bff717 	ldw	r2,-36(fp)
   18164:	1080800c 	andi	r2,r2,512
   18168:	10004426 	beq	r2,zero,1827c <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1816c:	e0bff717 	ldw	r2,-36(fp)
   18170:	1004d43a 	srli	r2,r2,16
   18174:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   18178:	00002706 	br	18218 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1817c:	e0bff617 	ldw	r2,-40(fp)
   18180:	e0fff517 	ldw	r3,-44(fp)
   18184:	18c01017 	ldw	r3,64(r3)
   18188:	e13ff517 	ldw	r4,-44(fp)
   1818c:	20c7883a 	add	r3,r4,r3
   18190:	18c21104 	addi	r3,r3,2116
   18194:	18c00003 	ldbu	r3,0(r3)
   18198:	18c03fcc 	andi	r3,r3,255
   1819c:	18c0201c 	xori	r3,r3,128
   181a0:	18ffe004 	addi	r3,r3,-128
   181a4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   181a8:	e0bff517 	ldw	r2,-44(fp)
   181ac:	10801017 	ldw	r2,64(r2)
   181b0:	10800044 	addi	r2,r2,1
   181b4:	10c1ffcc 	andi	r3,r2,2047
   181b8:	e0bff517 	ldw	r2,-44(fp)
   181bc:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   181c0:	e0bff517 	ldw	r2,-44(fp)
   181c4:	10800c17 	ldw	r2,48(r2)
   181c8:	e0bffb15 	stw	r2,-20(fp)
   181cc:	00800084 	movi	r2,2
   181d0:	e0bffc0d 	sth	r2,-16(fp)
   181d4:	00800044 	movi	r2,1
   181d8:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   181dc:	008000b4 	movhi	r2,2
   181e0:	10bf2e44 	addi	r2,r2,-839
   181e4:	10800003 	ldbu	r2,0(r2)
   181e8:	10803fcc 	andi	r2,r2,255
   181ec:	10000726 	beq	r2,zero,1820c <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   181f0:	e17ffc0b 	ldhu	r5,-16(fp)
   181f4:	e0fffc83 	ldbu	r3,-14(fp)
   181f8:	e0bffd04 	addi	r2,fp,-12
   181fc:	e13ffb17 	ldw	r4,-20(fp)
   18200:	180d883a 	mov	r6,r3
   18204:	100f883a 	mov	r7,r2
   18208:	00121e00 	call	121e0 <OSFlagPost>

        space--;
   1820c:	e0bff417 	ldw	r2,-48(fp)
   18210:	10bfffc4 	addi	r2,r2,-1
   18214:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   18218:	e0bff417 	ldw	r2,-48(fp)
   1821c:	10000526 	beq	r2,zero,18234 <altera_avalon_jtag_uart_irq+0x248>
   18220:	e0bff517 	ldw	r2,-44(fp)
   18224:	10c01017 	ldw	r3,64(r2)
   18228:	e0bff517 	ldw	r2,-44(fp)
   1822c:	10800f17 	ldw	r2,60(r2)
   18230:	18bfd21e 	bne	r3,r2,1817c <__alt_mem_Flash_flash_data+0xf401817c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   18234:	e0bff417 	ldw	r2,-48(fp)
   18238:	10001026 	beq	r2,zero,1827c <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1823c:	e0bff517 	ldw	r2,-44(fp)
   18240:	10c00817 	ldw	r3,32(r2)
   18244:	00bfff44 	movi	r2,-3
   18248:	1886703a 	and	r3,r3,r2
   1824c:	e0bff517 	ldw	r2,-44(fp)
   18250:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   18254:	e0bff517 	ldw	r2,-44(fp)
   18258:	10800017 	ldw	r2,0(r2)
   1825c:	10800104 	addi	r2,r2,4
   18260:	1007883a 	mov	r3,r2
   18264:	e0bff517 	ldw	r2,-44(fp)
   18268:	10800817 	ldw	r2,32(r2)
   1826c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   18270:	e0bff617 	ldw	r2,-40(fp)
   18274:	10800104 	addi	r2,r2,4
   18278:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1827c:	003f6606 	br	18018 <__alt_mem_Flash_flash_data+0xf4018018>
}
   18280:	e037883a 	mov	sp,fp
   18284:	dfc00117 	ldw	ra,4(sp)
   18288:	df000017 	ldw	fp,0(sp)
   1828c:	dec00204 	addi	sp,sp,8
   18290:	f800283a 	ret

00018294 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   18294:	defff904 	addi	sp,sp,-28
   18298:	dfc00615 	stw	ra,24(sp)
   1829c:	df000515 	stw	fp,20(sp)
   182a0:	df000504 	addi	fp,sp,20
   182a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   182a8:	e0bfff17 	ldw	r2,-4(fp)
   182ac:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   182b0:	e0bffb17 	ldw	r2,-20(fp)
   182b4:	10800017 	ldw	r2,0(r2)
   182b8:	10800104 	addi	r2,r2,4
   182bc:	10800037 	ldwio	r2,0(r2)
   182c0:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   182c4:	e0bffc17 	ldw	r2,-16(fp)
   182c8:	1081000c 	andi	r2,r2,1024
   182cc:	10000b26 	beq	r2,zero,182fc <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   182d0:	e0bffb17 	ldw	r2,-20(fp)
   182d4:	10800017 	ldw	r2,0(r2)
   182d8:	10800104 	addi	r2,r2,4
   182dc:	1007883a 	mov	r3,r2
   182e0:	e0bffb17 	ldw	r2,-20(fp)
   182e4:	10800817 	ldw	r2,32(r2)
   182e8:	10810014 	ori	r2,r2,1024
   182ec:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   182f0:	e0bffb17 	ldw	r2,-20(fp)
   182f4:	10000915 	stw	zero,36(r2)
   182f8:	00002206 	br	18384 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   182fc:	e0bffb17 	ldw	r2,-20(fp)
   18300:	10c00917 	ldw	r3,36(r2)
   18304:	00a00034 	movhi	r2,32768
   18308:	10bfff04 	addi	r2,r2,-4
   1830c:	10c01d36 	bltu	r2,r3,18384 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   18310:	e0bffb17 	ldw	r2,-20(fp)
   18314:	10800917 	ldw	r2,36(r2)
   18318:	10c00044 	addi	r3,r2,1
   1831c:	e0bffb17 	ldw	r2,-20(fp)
   18320:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   18324:	e0bffb17 	ldw	r2,-20(fp)
   18328:	10c00917 	ldw	r3,36(r2)
   1832c:	e0bffb17 	ldw	r2,-20(fp)
   18330:	10800117 	ldw	r2,4(r2)
   18334:	18801336 	bltu	r3,r2,18384 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   18338:	e0bffb17 	ldw	r2,-20(fp)
   1833c:	10800c17 	ldw	r2,48(r2)
   18340:	e0bffd15 	stw	r2,-12(fp)
   18344:	00800104 	movi	r2,4
   18348:	e0bffe0d 	sth	r2,-8(fp)
   1834c:	00800044 	movi	r2,1
   18350:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   18354:	008000b4 	movhi	r2,2
   18358:	10bf2e44 	addi	r2,r2,-839
   1835c:	10800003 	ldbu	r2,0(r2)
   18360:	10803fcc 	andi	r2,r2,255
   18364:	10000726 	beq	r2,zero,18384 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   18368:	e17ffe0b 	ldhu	r5,-8(fp)
   1836c:	e0fffe83 	ldbu	r3,-6(fp)
   18370:	e0bffec4 	addi	r2,fp,-5
   18374:	e13ffd17 	ldw	r4,-12(fp)
   18378:	180d883a 	mov	r6,r3
   1837c:	100f883a 	mov	r7,r2
   18380:	00121e00 	call	121e0 <OSFlagPost>
   18384:	008000b4 	movhi	r2,2
   18388:	10bf4304 	addi	r2,r2,-756
   1838c:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   18390:	e037883a 	mov	sp,fp
   18394:	dfc00117 	ldw	ra,4(sp)
   18398:	df000017 	ldw	fp,0(sp)
   1839c:	dec00204 	addi	sp,sp,8
   183a0:	f800283a 	ret

000183a4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   183a4:	defffd04 	addi	sp,sp,-12
   183a8:	df000215 	stw	fp,8(sp)
   183ac:	df000204 	addi	fp,sp,8
   183b0:	e13ffe15 	stw	r4,-8(fp)
   183b4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   183b8:	00000506 	br	183d0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   183bc:	e0bfff17 	ldw	r2,-4(fp)
   183c0:	1090000c 	andi	r2,r2,16384
   183c4:	10000226 	beq	r2,zero,183d0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   183c8:	00bffd44 	movi	r2,-11
   183cc:	00000b06 	br	183fc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   183d0:	e0bffe17 	ldw	r2,-8(fp)
   183d4:	10c01017 	ldw	r3,64(r2)
   183d8:	e0bffe17 	ldw	r2,-8(fp)
   183dc:	10800f17 	ldw	r2,60(r2)
   183e0:	18800526 	beq	r3,r2,183f8 <altera_avalon_jtag_uart_close+0x54>
   183e4:	e0bffe17 	ldw	r2,-8(fp)
   183e8:	10c00917 	ldw	r3,36(r2)
   183ec:	e0bffe17 	ldw	r2,-8(fp)
   183f0:	10800117 	ldw	r2,4(r2)
   183f4:	18bff136 	bltu	r3,r2,183bc <__alt_mem_Flash_flash_data+0xf40183bc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   183f8:	0005883a 	mov	r2,zero
}
   183fc:	e037883a 	mov	sp,fp
   18400:	df000017 	ldw	fp,0(sp)
   18404:	dec00104 	addi	sp,sp,4
   18408:	f800283a 	ret

0001840c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1840c:	defffa04 	addi	sp,sp,-24
   18410:	df000515 	stw	fp,20(sp)
   18414:	df000504 	addi	fp,sp,20
   18418:	e13ffd15 	stw	r4,-12(fp)
   1841c:	e17ffe15 	stw	r5,-8(fp)
   18420:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   18424:	00bff9c4 	movi	r2,-25
   18428:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1842c:	e0bffe17 	ldw	r2,-8(fp)
   18430:	10da8060 	cmpeqi	r3,r2,27137
   18434:	1800031e 	bne	r3,zero,18444 <altera_avalon_jtag_uart_ioctl+0x38>
   18438:	109a80a0 	cmpeqi	r2,r2,27138
   1843c:	1000191e 	bne	r2,zero,184a4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   18440:	00002806 	br	184e4 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   18444:	e0bffd17 	ldw	r2,-12(fp)
   18448:	10c00117 	ldw	r3,4(r2)
   1844c:	00a00034 	movhi	r2,32768
   18450:	10bfffc4 	addi	r2,r2,-1
   18454:	18801226 	beq	r3,r2,184a0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   18458:	e0bfff17 	ldw	r2,-4(fp)
   1845c:	10800017 	ldw	r2,0(r2)
   18460:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   18464:	e0bffc17 	ldw	r2,-16(fp)
   18468:	10800090 	cmplti	r2,r2,2
   1846c:	1000061e 	bne	r2,zero,18488 <altera_avalon_jtag_uart_ioctl+0x7c>
   18470:	e0fffc17 	ldw	r3,-16(fp)
   18474:	00a00034 	movhi	r2,32768
   18478:	10bfffc4 	addi	r2,r2,-1
   1847c:	18800226 	beq	r3,r2,18488 <altera_avalon_jtag_uart_ioctl+0x7c>
   18480:	e0bffc17 	ldw	r2,-16(fp)
   18484:	00000206 	br	18490 <altera_avalon_jtag_uart_ioctl+0x84>
   18488:	00a00034 	movhi	r2,32768
   1848c:	10bfff84 	addi	r2,r2,-2
   18490:	e0fffd17 	ldw	r3,-12(fp)
   18494:	18800115 	stw	r2,4(r3)
      rc = 0;
   18498:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1849c:	00001106 	br	184e4 <altera_avalon_jtag_uart_ioctl+0xd8>
   184a0:	00001006 	br	184e4 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   184a4:	e0bffd17 	ldw	r2,-12(fp)
   184a8:	10c00117 	ldw	r3,4(r2)
   184ac:	00a00034 	movhi	r2,32768
   184b0:	10bfffc4 	addi	r2,r2,-1
   184b4:	18800a26 	beq	r3,r2,184e0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   184b8:	e0bffd17 	ldw	r2,-12(fp)
   184bc:	10c00917 	ldw	r3,36(r2)
   184c0:	e0bffd17 	ldw	r2,-12(fp)
   184c4:	10800117 	ldw	r2,4(r2)
   184c8:	1885803a 	cmpltu	r2,r3,r2
   184cc:	10c03fcc 	andi	r3,r2,255
   184d0:	e0bfff17 	ldw	r2,-4(fp)
   184d4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   184d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   184dc:	00000006 	br	184e0 <altera_avalon_jtag_uart_ioctl+0xd4>
   184e0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   184e4:	e0bffb17 	ldw	r2,-20(fp)
}
   184e8:	e037883a 	mov	sp,fp
   184ec:	df000017 	ldw	fp,0(sp)
   184f0:	dec00104 	addi	sp,sp,4
   184f4:	f800283a 	ret

000184f8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   184f8:	deffec04 	addi	sp,sp,-80
   184fc:	dfc01315 	stw	ra,76(sp)
   18500:	df001215 	stw	fp,72(sp)
   18504:	df001204 	addi	fp,sp,72
   18508:	e13ffc15 	stw	r4,-16(fp)
   1850c:	e17ffd15 	stw	r5,-12(fp)
   18510:	e1bffe15 	stw	r6,-8(fp)
   18514:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   18518:	e0bffd17 	ldw	r2,-12(fp)
   1851c:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   18520:	e0bffc17 	ldw	r2,-16(fp)
   18524:	10800a17 	ldw	r2,40(r2)
   18528:	e0bff415 	stw	r2,-48(fp)
   1852c:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   18530:	e0fff50b 	ldhu	r3,-44(fp)
   18534:	e0bffb04 	addi	r2,fp,-20
   18538:	e13ff417 	ldw	r4,-48(fp)
   1853c:	180b883a 	mov	r5,r3
   18540:	100d883a 	mov	r6,r2
   18544:	00153b80 	call	153b8 <OSSemPend>

  while (space > 0)
   18548:	00006506 	br	186e0 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1854c:	e0bffc17 	ldw	r2,-16(fp)
   18550:	10800d17 	ldw	r2,52(r2)
   18554:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   18558:	e0bffc17 	ldw	r2,-16(fp)
   1855c:	10800e17 	ldw	r2,56(r2)
   18560:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   18564:	e0fff117 	ldw	r3,-60(fp)
   18568:	e0bff217 	ldw	r2,-56(fp)
   1856c:	18800536 	bltu	r3,r2,18584 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   18570:	e0fff117 	ldw	r3,-60(fp)
   18574:	e0bff217 	ldw	r2,-56(fp)
   18578:	1885c83a 	sub	r2,r3,r2
   1857c:	e0bff015 	stw	r2,-64(fp)
   18580:	00000406 	br	18594 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   18584:	00c20004 	movi	r3,2048
   18588:	e0bff217 	ldw	r2,-56(fp)
   1858c:	1885c83a 	sub	r2,r3,r2
   18590:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   18594:	e0bff017 	ldw	r2,-64(fp)
   18598:	1000011e 	bne	r2,zero,185a0 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   1859c:	00001d06 	br	18614 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   185a0:	e0fffe17 	ldw	r3,-8(fp)
   185a4:	e0bff017 	ldw	r2,-64(fp)
   185a8:	1880022e 	bgeu	r3,r2,185b4 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   185ac:	e0bffe17 	ldw	r2,-8(fp)
   185b0:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   185b4:	e0bff217 	ldw	r2,-56(fp)
   185b8:	10801104 	addi	r2,r2,68
   185bc:	e0fffc17 	ldw	r3,-16(fp)
   185c0:	1885883a 	add	r2,r3,r2
   185c4:	e13fef17 	ldw	r4,-68(fp)
   185c8:	100b883a 	mov	r5,r2
   185cc:	e1bff017 	ldw	r6,-64(fp)
   185d0:	00078800 	call	7880 <memcpy>
      ptr   += n;
   185d4:	e0ffef17 	ldw	r3,-68(fp)
   185d8:	e0bff017 	ldw	r2,-64(fp)
   185dc:	1885883a 	add	r2,r3,r2
   185e0:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   185e4:	e0fffe17 	ldw	r3,-8(fp)
   185e8:	e0bff017 	ldw	r2,-64(fp)
   185ec:	1885c83a 	sub	r2,r3,r2
   185f0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   185f4:	e0fff217 	ldw	r3,-56(fp)
   185f8:	e0bff017 	ldw	r2,-64(fp)
   185fc:	1885883a 	add	r2,r3,r2
   18600:	10c1ffcc 	andi	r3,r2,2047
   18604:	e0bffc17 	ldw	r2,-16(fp)
   18608:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   1860c:	e0bffe17 	ldw	r2,-8(fp)
   18610:	00bfce16 	blt	zero,r2,1854c <__alt_mem_Flash_flash_data+0xf401854c>

    /* If we read any data then return it */
    if (ptr != buffer)
   18614:	e0ffef17 	ldw	r3,-68(fp)
   18618:	e0bffd17 	ldw	r2,-12(fp)
   1861c:	18800126 	beq	r3,r2,18624 <altera_avalon_jtag_uart_read+0x12c>
      break;
   18620:	00003106 	br	186e8 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   18624:	e0bfff17 	ldw	r2,-4(fp)
   18628:	1090000c 	andi	r2,r2,16384
   1862c:	10000126 	beq	r2,zero,18634 <altera_avalon_jtag_uart_read+0x13c>
      break;
   18630:	00002d06 	br	186e8 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   18634:	008000b4 	movhi	r2,2
   18638:	10bf2e44 	addi	r2,r2,-839
   1863c:	10800003 	ldbu	r2,0(r2)
   18640:	10803fcc 	andi	r2,r2,255
   18644:	10800058 	cmpnei	r2,r2,1
   18648:	1000161e 	bne	r2,zero,186a4 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1864c:	e0bffc17 	ldw	r2,-16(fp)
   18650:	10800c17 	ldw	r2,48(r2)
   18654:	e0bff615 	stw	r2,-40(fp)
   18658:	00800144 	movi	r2,5
   1865c:	e0bff70d 	sth	r2,-36(fp)
   18660:	00bfe0c4 	movi	r2,-125
   18664:	e0bff785 	stb	r2,-34(fp)
   18668:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1866c:	008000b4 	movhi	r2,2
   18670:	10bf2e44 	addi	r2,r2,-839
   18674:	10800003 	ldbu	r2,0(r2)
   18678:	10803fcc 	andi	r2,r2,255
   1867c:	10001326 	beq	r2,zero,186cc <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   18680:	e17ff70b 	ldhu	r5,-36(fp)
   18684:	e1bff783 	ldbu	r6,-34(fp)
   18688:	e0fff80b 	ldhu	r3,-32(fp)
   1868c:	e0bffb44 	addi	r2,fp,-19
   18690:	d8800015 	stw	r2,0(sp)
   18694:	e13ff617 	ldw	r4,-40(fp)
   18698:	180f883a 	mov	r7,r3
   1869c:	0011b880 	call	11b88 <OSFlagPend>
   186a0:	00000a06 	br	186cc <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   186a4:	0001883a 	nop
   186a8:	e0bffc17 	ldw	r2,-16(fp)
   186ac:	10c00d17 	ldw	r3,52(r2)
   186b0:	e0bff117 	ldw	r2,-60(fp)
   186b4:	1880051e 	bne	r3,r2,186cc <altera_avalon_jtag_uart_read+0x1d4>
   186b8:	e0bffc17 	ldw	r2,-16(fp)
   186bc:	10c00917 	ldw	r3,36(r2)
   186c0:	e0bffc17 	ldw	r2,-16(fp)
   186c4:	10800117 	ldw	r2,4(r2)
   186c8:	18bff736 	bltu	r3,r2,186a8 <__alt_mem_Flash_flash_data+0xf40186a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   186cc:	e0bffc17 	ldw	r2,-16(fp)
   186d0:	10c00d17 	ldw	r3,52(r2)
   186d4:	e0bff117 	ldw	r2,-60(fp)
   186d8:	1880011e 	bne	r3,r2,186e0 <altera_avalon_jtag_uart_read+0x1e8>
      break;
   186dc:	00000206 	br	186e8 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   186e0:	e0bffe17 	ldw	r2,-8(fp)
   186e4:	00bf9916 	blt	zero,r2,1854c <__alt_mem_Flash_flash_data+0xf401854c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   186e8:	e0bffc17 	ldw	r2,-16(fp)
   186ec:	10800a17 	ldw	r2,40(r2)
   186f0:	1009883a 	mov	r4,r2
   186f4:	001578c0 	call	1578c <OSSemPost>

  if (ptr != buffer)
   186f8:	e0ffef17 	ldw	r3,-68(fp)
   186fc:	e0bffd17 	ldw	r2,-12(fp)
   18700:	18801826 	beq	r3,r2,18764 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18704:	0005303a 	rdctl	r2,status
   18708:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1870c:	e0fff917 	ldw	r3,-28(fp)
   18710:	00bfff84 	movi	r2,-2
   18714:	1884703a 	and	r2,r3,r2
   18718:	1001703a 	wrctl	status,r2
  
  return context;
   1871c:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   18720:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   18724:	e0bffc17 	ldw	r2,-16(fp)
   18728:	10800817 	ldw	r2,32(r2)
   1872c:	10c00054 	ori	r3,r2,1
   18730:	e0bffc17 	ldw	r2,-16(fp)
   18734:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   18738:	e0bffc17 	ldw	r2,-16(fp)
   1873c:	10800017 	ldw	r2,0(r2)
   18740:	10800104 	addi	r2,r2,4
   18744:	1007883a 	mov	r3,r2
   18748:	e0bffc17 	ldw	r2,-16(fp)
   1874c:	10800817 	ldw	r2,32(r2)
   18750:	18800035 	stwio	r2,0(r3)
   18754:	e0bff317 	ldw	r2,-52(fp)
   18758:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1875c:	e0bffa17 	ldw	r2,-24(fp)
   18760:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   18764:	e0ffef17 	ldw	r3,-68(fp)
   18768:	e0bffd17 	ldw	r2,-12(fp)
   1876c:	18800426 	beq	r3,r2,18780 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   18770:	e0ffef17 	ldw	r3,-68(fp)
   18774:	e0bffd17 	ldw	r2,-12(fp)
   18778:	1885c83a 	sub	r2,r3,r2
   1877c:	00000606 	br	18798 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   18780:	e0bfff17 	ldw	r2,-4(fp)
   18784:	1090000c 	andi	r2,r2,16384
   18788:	10000226 	beq	r2,zero,18794 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   1878c:	00bffd44 	movi	r2,-11
   18790:	00000106 	br	18798 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   18794:	00bffec4 	movi	r2,-5
}
   18798:	e037883a 	mov	sp,fp
   1879c:	dfc00117 	ldw	ra,4(sp)
   187a0:	df000017 	ldw	fp,0(sp)
   187a4:	dec00204 	addi	sp,sp,8
   187a8:	f800283a 	ret

000187ac <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   187ac:	deffed04 	addi	sp,sp,-76
   187b0:	dfc01215 	stw	ra,72(sp)
   187b4:	df001115 	stw	fp,68(sp)
   187b8:	df001104 	addi	fp,sp,68
   187bc:	e13ffc15 	stw	r4,-16(fp)
   187c0:	e17ffd15 	stw	r5,-12(fp)
   187c4:	e1bffe15 	stw	r6,-8(fp)
   187c8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   187cc:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   187d0:	e0bffd17 	ldw	r2,-12(fp)
   187d4:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   187d8:	e0bffc17 	ldw	r2,-16(fp)
   187dc:	10800b17 	ldw	r2,44(r2)
   187e0:	e0bff515 	stw	r2,-44(fp)
   187e4:	e03ff60d 	sth	zero,-40(fp)
   187e8:	e0fff60b 	ldhu	r3,-40(fp)
   187ec:	e0bffbc4 	addi	r2,fp,-17
   187f0:	e13ff517 	ldw	r4,-44(fp)
   187f4:	180b883a 	mov	r5,r3
   187f8:	100d883a 	mov	r6,r2
   187fc:	00153b80 	call	153b8 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   18800:	00003806 	br	188e4 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   18804:	e0bffc17 	ldw	r2,-16(fp)
   18808:	10800f17 	ldw	r2,60(r2)
   1880c:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   18810:	e0bffc17 	ldw	r2,-16(fp)
   18814:	10801017 	ldw	r2,64(r2)
   18818:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   1881c:	e0fff317 	ldw	r3,-52(fp)
   18820:	e0bff017 	ldw	r2,-64(fp)
   18824:	1880062e 	bgeu	r3,r2,18840 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   18828:	e0fff017 	ldw	r3,-64(fp)
   1882c:	e0bff317 	ldw	r2,-52(fp)
   18830:	1885c83a 	sub	r2,r3,r2
   18834:	10bfffc4 	addi	r2,r2,-1
   18838:	e0bff115 	stw	r2,-60(fp)
   1883c:	00000b06 	br	1886c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   18840:	e0bff017 	ldw	r2,-64(fp)
   18844:	10000526 	beq	r2,zero,1885c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   18848:	00c20004 	movi	r3,2048
   1884c:	e0bff317 	ldw	r2,-52(fp)
   18850:	1885c83a 	sub	r2,r3,r2
   18854:	e0bff115 	stw	r2,-60(fp)
   18858:	00000406 	br	1886c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1885c:	00c1ffc4 	movi	r3,2047
   18860:	e0bff317 	ldw	r2,-52(fp)
   18864:	1885c83a 	sub	r2,r3,r2
   18868:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1886c:	e0bff117 	ldw	r2,-60(fp)
   18870:	1000011e 	bne	r2,zero,18878 <altera_avalon_jtag_uart_write+0xcc>
        break;
   18874:	00001d06 	br	188ec <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   18878:	e0fffe17 	ldw	r3,-8(fp)
   1887c:	e0bff117 	ldw	r2,-60(fp)
   18880:	1880022e 	bgeu	r3,r2,1888c <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   18884:	e0bffe17 	ldw	r2,-8(fp)
   18888:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1888c:	e0bff317 	ldw	r2,-52(fp)
   18890:	10821104 	addi	r2,r2,2116
   18894:	e0fffc17 	ldw	r3,-16(fp)
   18898:	1885883a 	add	r2,r3,r2
   1889c:	1009883a 	mov	r4,r2
   188a0:	e17ffd17 	ldw	r5,-12(fp)
   188a4:	e1bff117 	ldw	r6,-60(fp)
   188a8:	00078800 	call	7880 <memcpy>
      ptr   += n;
   188ac:	e0fffd17 	ldw	r3,-12(fp)
   188b0:	e0bff117 	ldw	r2,-60(fp)
   188b4:	1885883a 	add	r2,r3,r2
   188b8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   188bc:	e0fffe17 	ldw	r3,-8(fp)
   188c0:	e0bff117 	ldw	r2,-60(fp)
   188c4:	1885c83a 	sub	r2,r3,r2
   188c8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   188cc:	e0fff317 	ldw	r3,-52(fp)
   188d0:	e0bff117 	ldw	r2,-60(fp)
   188d4:	1885883a 	add	r2,r3,r2
   188d8:	10c1ffcc 	andi	r3,r2,2047
   188dc:	e0bffc17 	ldw	r2,-16(fp)
   188e0:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   188e4:	e0bffe17 	ldw	r2,-8(fp)
   188e8:	00bfc616 	blt	zero,r2,18804 <__alt_mem_Flash_flash_data+0xf4018804>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   188ec:	0005303a 	rdctl	r2,status
   188f0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   188f4:	e0fff717 	ldw	r3,-36(fp)
   188f8:	00bfff84 	movi	r2,-2
   188fc:	1884703a 	and	r2,r3,r2
   18900:	1001703a 	wrctl	status,r2
  
  return context;
   18904:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   18908:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1890c:	e0bffc17 	ldw	r2,-16(fp)
   18910:	10800817 	ldw	r2,32(r2)
   18914:	10c00094 	ori	r3,r2,2
   18918:	e0bffc17 	ldw	r2,-16(fp)
   1891c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   18920:	e0bffc17 	ldw	r2,-16(fp)
   18924:	10800017 	ldw	r2,0(r2)
   18928:	10800104 	addi	r2,r2,4
   1892c:	1007883a 	mov	r3,r2
   18930:	e0bffc17 	ldw	r2,-16(fp)
   18934:	10800817 	ldw	r2,32(r2)
   18938:	18800035 	stwio	r2,0(r3)
   1893c:	e0bff417 	ldw	r2,-48(fp)
   18940:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18944:	e0bff817 	ldw	r2,-32(fp)
   18948:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1894c:	e0bffe17 	ldw	r2,-8(fp)
   18950:	00802e0e 	bge	zero,r2,18a0c <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   18954:	e0bfff17 	ldw	r2,-4(fp)
   18958:	1090000c 	andi	r2,r2,16384
   1895c:	10000126 	beq	r2,zero,18964 <altera_avalon_jtag_uart_write+0x1b8>
        break;
   18960:	00002c06 	br	18a14 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   18964:	008000b4 	movhi	r2,2
   18968:	10bf2e44 	addi	r2,r2,-839
   1896c:	10800003 	ldbu	r2,0(r2)
   18970:	10803fcc 	andi	r2,r2,255
   18974:	10800058 	cmpnei	r2,r2,1
   18978:	1000161e 	bne	r2,zero,189d4 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1897c:	e0bffc17 	ldw	r2,-16(fp)
   18980:	10800c17 	ldw	r2,48(r2)
   18984:	e0bff915 	stw	r2,-28(fp)
   18988:	00800184 	movi	r2,6
   1898c:	e0bffa0d 	sth	r2,-24(fp)
   18990:	00bfe0c4 	movi	r2,-125
   18994:	e0bffa85 	stb	r2,-22(fp)
   18998:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1899c:	008000b4 	movhi	r2,2
   189a0:	10bf2e44 	addi	r2,r2,-839
   189a4:	10800003 	ldbu	r2,0(r2)
   189a8:	10803fcc 	andi	r2,r2,255
   189ac:	10001326 	beq	r2,zero,189fc <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   189b0:	e17ffa0b 	ldhu	r5,-24(fp)
   189b4:	e1bffa83 	ldbu	r6,-22(fp)
   189b8:	e0fffb0b 	ldhu	r3,-20(fp)
   189bc:	e0bffb84 	addi	r2,fp,-18
   189c0:	d8800015 	stw	r2,0(sp)
   189c4:	e13ff917 	ldw	r4,-28(fp)
   189c8:	180f883a 	mov	r7,r3
   189cc:	0011b880 	call	11b88 <OSFlagPend>
   189d0:	00000a06 	br	189fc <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   189d4:	0001883a 	nop
   189d8:	e0bffc17 	ldw	r2,-16(fp)
   189dc:	10c01017 	ldw	r3,64(r2)
   189e0:	e0bff017 	ldw	r2,-64(fp)
   189e4:	1880051e 	bne	r3,r2,189fc <altera_avalon_jtag_uart_write+0x250>
   189e8:	e0bffc17 	ldw	r2,-16(fp)
   189ec:	10c00917 	ldw	r3,36(r2)
   189f0:	e0bffc17 	ldw	r2,-16(fp)
   189f4:	10800117 	ldw	r2,4(r2)
   189f8:	18bff736 	bltu	r3,r2,189d8 <__alt_mem_Flash_flash_data+0xf40189d8>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   189fc:	e0bffc17 	ldw	r2,-16(fp)
   18a00:	10800917 	ldw	r2,36(r2)
   18a04:	10000126 	beq	r2,zero,18a0c <altera_avalon_jtag_uart_write+0x260>
         break;
   18a08:	00000206 	br	18a14 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   18a0c:	e0bffe17 	ldw	r2,-8(fp)
   18a10:	00bf7b16 	blt	zero,r2,18800 <__alt_mem_Flash_flash_data+0xf4018800>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   18a14:	e0bffc17 	ldw	r2,-16(fp)
   18a18:	10800b17 	ldw	r2,44(r2)
   18a1c:	1009883a 	mov	r4,r2
   18a20:	001578c0 	call	1578c <OSSemPost>

  if (ptr != start)
   18a24:	e0fffd17 	ldw	r3,-12(fp)
   18a28:	e0bff217 	ldw	r2,-56(fp)
   18a2c:	18800426 	beq	r3,r2,18a40 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   18a30:	e0fffd17 	ldw	r3,-12(fp)
   18a34:	e0bff217 	ldw	r2,-56(fp)
   18a38:	1885c83a 	sub	r2,r3,r2
   18a3c:	00000606 	br	18a58 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   18a40:	e0bfff17 	ldw	r2,-4(fp)
   18a44:	1090000c 	andi	r2,r2,16384
   18a48:	10000226 	beq	r2,zero,18a54 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   18a4c:	00bffd44 	movi	r2,-11
   18a50:	00000106 	br	18a58 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   18a54:	00bffec4 	movi	r2,-5
}
   18a58:	e037883a 	mov	sp,fp
   18a5c:	dfc00117 	ldw	ra,4(sp)
   18a60:	df000017 	ldw	fp,0(sp)
   18a64:	dec00204 	addi	sp,sp,8
   18a68:	f800283a 	ret

00018a6c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   18a6c:	defff904 	addi	sp,sp,-28
   18a70:	dfc00615 	stw	ra,24(sp)
   18a74:	df000515 	stw	fp,20(sp)
   18a78:	df000504 	addi	fp,sp,20
   18a7c:	e13ffe15 	stw	r4,-8(fp)
   18a80:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   18a84:	0007883a 	mov	r3,zero
   18a88:	e0bffe17 	ldw	r2,-8(fp)
   18a8c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   18a90:	e0bffe17 	ldw	r2,-8(fp)
   18a94:	10800104 	addi	r2,r2,4
   18a98:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18a9c:	0005303a 	rdctl	r2,status
   18aa0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18aa4:	e0fffc17 	ldw	r3,-16(fp)
   18aa8:	00bfff84 	movi	r2,-2
   18aac:	1884703a 	and	r2,r3,r2
   18ab0:	1001703a 	wrctl	status,r2
  
  return context;
   18ab4:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   18ab8:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   18abc:	001aae80 	call	1aae8 <alt_tick>
   18ac0:	e0bffb17 	ldw	r2,-20(fp)
   18ac4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18ac8:	e0bffd17 	ldw	r2,-12(fp)
   18acc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   18ad0:	e037883a 	mov	sp,fp
   18ad4:	dfc00117 	ldw	ra,4(sp)
   18ad8:	df000017 	ldw	fp,0(sp)
   18adc:	dec00204 	addi	sp,sp,8
   18ae0:	f800283a 	ret

00018ae4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   18ae4:	defff904 	addi	sp,sp,-28
   18ae8:	dfc00615 	stw	ra,24(sp)
   18aec:	df000515 	stw	fp,20(sp)
   18af0:	df000504 	addi	fp,sp,20
   18af4:	e13ffc15 	stw	r4,-16(fp)
   18af8:	e17ffd15 	stw	r5,-12(fp)
   18afc:	e1bffe15 	stw	r6,-8(fp)
   18b00:	e1ffff15 	stw	r7,-4(fp)
   18b04:	e0bfff17 	ldw	r2,-4(fp)
   18b08:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   18b0c:	008000b4 	movhi	r2,2
   18b10:	10bf4304 	addi	r2,r2,-756
   18b14:	10800017 	ldw	r2,0(r2)
   18b18:	1000041e 	bne	r2,zero,18b2c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   18b1c:	008000b4 	movhi	r2,2
   18b20:	10bf4304 	addi	r2,r2,-756
   18b24:	e0fffb17 	ldw	r3,-20(fp)
   18b28:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   18b2c:	e0bffc17 	ldw	r2,-16(fp)
   18b30:	10800104 	addi	r2,r2,4
   18b34:	00c001c4 	movi	r3,7
   18b38:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   18b3c:	e13ffe17 	ldw	r4,-8(fp)
   18b40:	e17ffc17 	ldw	r5,-16(fp)
   18b44:	018000b4 	movhi	r6,2
   18b48:	31a29b04 	addi	r6,r6,-30100
   18b4c:	001a62c0 	call	1a62c <alt_irq_register>
#endif  
}
   18b50:	e037883a 	mov	sp,fp
   18b54:	dfc00117 	ldw	ra,4(sp)
   18b58:	df000017 	ldw	fp,0(sp)
   18b5c:	dec00204 	addi	sp,sp,8
   18b60:	f800283a 	ret

00018b64 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   18b64:	defffc04 	addi	sp,sp,-16
   18b68:	df000315 	stw	fp,12(sp)
   18b6c:	df000304 	addi	fp,sp,12
   18b70:	e13ffe15 	stw	r4,-8(fp)
   18b74:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   18b78:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   18b7c:	e0bfff17 	ldw	r2,-4(fp)
   18b80:	1000061e 	bne	r2,zero,18b9c <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   18b84:	e0bffe17 	ldw	r2,-8(fp)
   18b88:	1007883a 	mov	r3,r2
   18b8c:	e0bffd03 	ldbu	r2,-12(fp)
   18b90:	1884b03a 	or	r2,r3,r2
   18b94:	e0bffd05 	stb	r2,-12(fp)
   18b98:	00000806 	br	18bbc <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   18b9c:	e0bffe17 	ldw	r2,-8(fp)
   18ba0:	1007883a 	mov	r3,r2
   18ba4:	e0bffd03 	ldbu	r2,-12(fp)
   18ba8:	1884b03a 	or	r2,r3,r2
   18bac:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   18bb0:	e0bffd03 	ldbu	r2,-12(fp)
   18bb4:	10801014 	ori	r2,r2,64
   18bb8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   18bbc:	e0fffd03 	ldbu	r3,-12(fp)
   18bc0:	00bfe004 	movi	r2,-128
   18bc4:	1884b03a 	or	r2,r3,r2
}
   18bc8:	e037883a 	mov	sp,fp
   18bcc:	df000017 	ldw	fp,0(sp)
   18bd0:	dec00104 	addi	sp,sp,4
   18bd4:	f800283a 	ret

00018bd8 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   18bd8:	defffd04 	addi	sp,sp,-12
   18bdc:	df000215 	stw	fp,8(sp)
   18be0:	df000204 	addi	fp,sp,8
   18be4:	e13ffe15 	stw	r4,-8(fp)
   18be8:	2805883a 	mov	r2,r5
   18bec:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   18bf0:	e0bffe17 	ldw	r2,-8(fp)
   18bf4:	10800a17 	ldw	r2,40(r2)
   18bf8:	1007883a 	mov	r3,r2
   18bfc:	e0bfff03 	ldbu	r2,-4(fp)
   18c00:	18800025 	stbio	r2,0(r3)
}
   18c04:	e037883a 	mov	sp,fp
   18c08:	df000017 	ldw	fp,0(sp)
   18c0c:	dec00104 	addi	sp,sp,4
   18c10:	f800283a 	ret

00018c14 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   18c14:	defffe04 	addi	sp,sp,-8
   18c18:	df000115 	stw	fp,4(sp)
   18c1c:	df000104 	addi	fp,sp,4
   18c20:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   18c24:	e0bfff17 	ldw	r2,-4(fp)
   18c28:	10800a17 	ldw	r2,40(r2)
   18c2c:	1007883a 	mov	r3,r2
   18c30:	00800044 	movi	r2,1
   18c34:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   18c38:	e037883a 	mov	sp,fp
   18c3c:	df000017 	ldw	fp,0(sp)
   18c40:	dec00104 	addi	sp,sp,4
   18c44:	f800283a 	ret

00018c48 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   18c48:	defffc04 	addi	sp,sp,-16
   18c4c:	dfc00315 	stw	ra,12(sp)
   18c50:	df000215 	stw	fp,8(sp)
   18c54:	df000204 	addi	fp,sp,8
   18c58:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   18c5c:	e13fff17 	ldw	r4,-4(fp)
   18c60:	014000b4 	movhi	r5,2
   18c64:	29771604 	addi	r5,r5,-9128
   18c68:	001a4340 	call	1a434 <alt_find_dev>
   18c6c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   18c70:	e0bffe17 	ldw	r2,-8(fp)
}
   18c74:	e037883a 	mov	sp,fp
   18c78:	dfc00117 	ldw	ra,4(sp)
   18c7c:	df000017 	ldw	fp,0(sp)
   18c80:	dec00204 	addi	sp,sp,8
   18c84:	f800283a 	ret

00018c88 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   18c88:	defffb04 	addi	sp,sp,-20
   18c8c:	df000415 	stw	fp,16(sp)
   18c90:	df000404 	addi	fp,sp,16
   18c94:	e13ffd15 	stw	r4,-12(fp)
   18c98:	e17ffe15 	stw	r5,-8(fp)
   18c9c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   18ca0:	e03ffc15 	stw	zero,-16(fp)
   18ca4:	00000f06 	br	18ce4 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   18ca8:	e0bffd17 	ldw	r2,-12(fp)
   18cac:	10800a17 	ldw	r2,40(r2)
   18cb0:	10800044 	addi	r2,r2,1
   18cb4:	1009883a 	mov	r4,r2
   18cb8:	e0fffe17 	ldw	r3,-8(fp)
   18cbc:	e0bffc17 	ldw	r2,-16(fp)
   18cc0:	1885883a 	add	r2,r3,r2
   18cc4:	10800003 	ldbu	r2,0(r2)
   18cc8:	10803fcc 	andi	r2,r2,255
   18ccc:	1080201c 	xori	r2,r2,128
   18cd0:	10bfe004 	addi	r2,r2,-128
   18cd4:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   18cd8:	e0bffc17 	ldw	r2,-16(fp)
   18cdc:	10800044 	addi	r2,r2,1
   18ce0:	e0bffc15 	stw	r2,-16(fp)
   18ce4:	e0fffc17 	ldw	r3,-16(fp)
   18ce8:	e0bfff17 	ldw	r2,-4(fp)
   18cec:	18bfee36 	bltu	r3,r2,18ca8 <__alt_mem_Flash_flash_data+0xf4018ca8>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   18cf0:	e037883a 	mov	sp,fp
   18cf4:	df000017 	ldw	fp,0(sp)
   18cf8:	dec00104 	addi	sp,sp,4
   18cfc:	f800283a 	ret

00018d00 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   18d00:	defffd04 	addi	sp,sp,-12
   18d04:	df000215 	stw	fp,8(sp)
   18d08:	df000204 	addi	fp,sp,8
   18d0c:	e13ffe15 	stw	r4,-8(fp)
   18d10:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   18d14:	00000d06 	br	18d4c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   18d18:	e0bffe17 	ldw	r2,-8(fp)
   18d1c:	10800a17 	ldw	r2,40(r2)
   18d20:	10800044 	addi	r2,r2,1
   18d24:	1007883a 	mov	r3,r2
   18d28:	e0bfff17 	ldw	r2,-4(fp)
   18d2c:	10800003 	ldbu	r2,0(r2)
   18d30:	10803fcc 	andi	r2,r2,255
   18d34:	1080201c 	xori	r2,r2,128
   18d38:	10bfe004 	addi	r2,r2,-128
   18d3c:	18800025 	stbio	r2,0(r3)
		++ptr;
   18d40:	e0bfff17 	ldw	r2,-4(fp)
   18d44:	10800044 	addi	r2,r2,1
   18d48:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   18d4c:	e0bfff17 	ldw	r2,-4(fp)
   18d50:	10800003 	ldbu	r2,0(r2)
   18d54:	10803fcc 	andi	r2,r2,255
   18d58:	1080201c 	xori	r2,r2,128
   18d5c:	10bfe004 	addi	r2,r2,-128
   18d60:	103fed1e 	bne	r2,zero,18d18 <__alt_mem_Flash_flash_data+0xf4018d18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   18d64:	e037883a 	mov	sp,fp
   18d68:	df000017 	ldw	fp,0(sp)
   18d6c:	dec00104 	addi	sp,sp,4
   18d70:	f800283a 	ret

00018d74 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   18d74:	defffb04 	addi	sp,sp,-20
   18d78:	dfc00415 	stw	ra,16(sp)
   18d7c:	df000315 	stw	fp,12(sp)
   18d80:	df000304 	addi	fp,sp,12
   18d84:	e13ffd15 	stw	r4,-12(fp)
   18d88:	e17ffe15 	stw	r5,-8(fp)
   18d8c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   18d90:	e0bffd17 	ldw	r2,-12(fp)
   18d94:	10c00017 	ldw	r3,0(r2)
   18d98:	e0bfff17 	ldw	r2,-4(fp)
   18d9c:	1809883a 	mov	r4,r3
   18da0:	e17ffe17 	ldw	r5,-8(fp)
   18da4:	100d883a 	mov	r6,r2
   18da8:	0018c880 	call	18c88 <alt_up_character_lcd_write>
	return 0;
   18dac:	0005883a 	mov	r2,zero
}
   18db0:	e037883a 	mov	sp,fp
   18db4:	dfc00117 	ldw	ra,4(sp)
   18db8:	df000017 	ldw	fp,0(sp)
   18dbc:	dec00204 	addi	sp,sp,8
   18dc0:	f800283a 	ret

00018dc4 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   18dc4:	defffa04 	addi	sp,sp,-24
   18dc8:	dfc00515 	stw	ra,20(sp)
   18dcc:	df000415 	stw	fp,16(sp)
   18dd0:	df000404 	addi	fp,sp,16
   18dd4:	e13ffd15 	stw	r4,-12(fp)
   18dd8:	e17ffe15 	stw	r5,-8(fp)
   18ddc:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   18de0:	e0bffe17 	ldw	r2,-8(fp)
   18de4:	10800a28 	cmpgeui	r2,r2,40
   18de8:	1000031e 	bne	r2,zero,18df8 <alt_up_character_lcd_set_cursor_pos+0x34>
   18dec:	e0bfff17 	ldw	r2,-4(fp)
   18df0:	108000b0 	cmpltui	r2,r2,2
   18df4:	1000021e 	bne	r2,zero,18e00 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   18df8:	00bfffc4 	movi	r2,-1
   18dfc:	00000906 	br	18e24 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   18e00:	e13ffe17 	ldw	r4,-8(fp)
   18e04:	e17fff17 	ldw	r5,-4(fp)
   18e08:	0018b640 	call	18b64 <get_DDRAM_addr>
   18e0c:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   18e10:	e0bffc03 	ldbu	r2,-16(fp)
   18e14:	e13ffd17 	ldw	r4,-12(fp)
   18e18:	100b883a 	mov	r5,r2
   18e1c:	0018bd80 	call	18bd8 <alt_up_character_lcd_send_cmd>
	return 0;
   18e20:	0005883a 	mov	r2,zero
}
   18e24:	e037883a 	mov	sp,fp
   18e28:	dfc00117 	ldw	ra,4(sp)
   18e2c:	df000017 	ldw	fp,0(sp)
   18e30:	dec00204 	addi	sp,sp,8
   18e34:	f800283a 	ret

00018e38 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   18e38:	defffb04 	addi	sp,sp,-20
   18e3c:	dfc00415 	stw	ra,16(sp)
   18e40:	df000315 	stw	fp,12(sp)
   18e44:	df000304 	addi	fp,sp,12
   18e48:	e13ffe15 	stw	r4,-8(fp)
   18e4c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   18e50:	e0bfff17 	ldw	r2,-4(fp)
   18e54:	1000011e 	bne	r2,zero,18e5c <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   18e58:	00001406 	br	18eac <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   18e5c:	e0bfff17 	ldw	r2,-4(fp)
   18e60:	0080020e 	bge	zero,r2,18e6c <alt_up_character_lcd_shift_cursor+0x34>
   18e64:	00800504 	movi	r2,20
   18e68:	00000106 	br	18e70 <alt_up_character_lcd_shift_cursor+0x38>
   18e6c:	00800404 	movi	r2,16
   18e70:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   18e74:	e0bfff17 	ldw	r2,-4(fp)
   18e78:	1000010e 	bge	r2,zero,18e80 <alt_up_character_lcd_shift_cursor+0x48>
   18e7c:	0085c83a 	sub	r2,zero,r2
   18e80:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   18e84:	00000406 	br	18e98 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   18e88:	e0bffd43 	ldbu	r2,-11(fp)
   18e8c:	e13ffe17 	ldw	r4,-8(fp)
   18e90:	100b883a 	mov	r5,r2
   18e94:	0018bd80 	call	18bd8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   18e98:	e0bffd03 	ldbu	r2,-12(fp)
   18e9c:	10ffffc4 	addi	r3,r2,-1
   18ea0:	e0fffd05 	stb	r3,-12(fp)
   18ea4:	10803fcc 	andi	r2,r2,255
   18ea8:	103ff71e 	bne	r2,zero,18e88 <__alt_mem_Flash_flash_data+0xf4018e88>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   18eac:	e037883a 	mov	sp,fp
   18eb0:	dfc00117 	ldw	ra,4(sp)
   18eb4:	df000017 	ldw	fp,0(sp)
   18eb8:	dec00204 	addi	sp,sp,8
   18ebc:	f800283a 	ret

00018ec0 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   18ec0:	defffb04 	addi	sp,sp,-20
   18ec4:	dfc00415 	stw	ra,16(sp)
   18ec8:	df000315 	stw	fp,12(sp)
   18ecc:	df000304 	addi	fp,sp,12
   18ed0:	e13ffe15 	stw	r4,-8(fp)
   18ed4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   18ed8:	e0bfff17 	ldw	r2,-4(fp)
   18edc:	1000011e 	bne	r2,zero,18ee4 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   18ee0:	00001406 	br	18f34 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   18ee4:	e0bfff17 	ldw	r2,-4(fp)
   18ee8:	0080020e 	bge	zero,r2,18ef4 <alt_up_character_lcd_shift_display+0x34>
   18eec:	00800704 	movi	r2,28
   18ef0:	00000106 	br	18ef8 <alt_up_character_lcd_shift_display+0x38>
   18ef4:	00800604 	movi	r2,24
   18ef8:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   18efc:	e0bfff17 	ldw	r2,-4(fp)
   18f00:	1000010e 	bge	r2,zero,18f08 <alt_up_character_lcd_shift_display+0x48>
   18f04:	0085c83a 	sub	r2,zero,r2
   18f08:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   18f0c:	00000406 	br	18f20 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   18f10:	e0bffd43 	ldbu	r2,-11(fp)
   18f14:	e13ffe17 	ldw	r4,-8(fp)
   18f18:	100b883a 	mov	r5,r2
   18f1c:	0018bd80 	call	18bd8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   18f20:	e0bffd03 	ldbu	r2,-12(fp)
   18f24:	10ffffc4 	addi	r3,r2,-1
   18f28:	e0fffd05 	stb	r3,-12(fp)
   18f2c:	10803fcc 	andi	r2,r2,255
   18f30:	103ff71e 	bne	r2,zero,18f10 <__alt_mem_Flash_flash_data+0xf4018f10>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   18f34:	e037883a 	mov	sp,fp
   18f38:	dfc00117 	ldw	ra,4(sp)
   18f3c:	df000017 	ldw	fp,0(sp)
   18f40:	dec00204 	addi	sp,sp,8
   18f44:	f800283a 	ret

00018f48 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   18f48:	defffa04 	addi	sp,sp,-24
   18f4c:	dfc00515 	stw	ra,20(sp)
   18f50:	df000415 	stw	fp,16(sp)
   18f54:	df000404 	addi	fp,sp,16
   18f58:	e13ffd15 	stw	r4,-12(fp)
   18f5c:	e17ffe15 	stw	r5,-8(fp)
   18f60:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   18f64:	e0bffe17 	ldw	r2,-8(fp)
   18f68:	10800a28 	cmpgeui	r2,r2,40
   18f6c:	1000031e 	bne	r2,zero,18f7c <alt_up_character_lcd_erase_pos+0x34>
   18f70:	e0bfff17 	ldw	r2,-4(fp)
   18f74:	108000b0 	cmpltui	r2,r2,2
   18f78:	1000021e 	bne	r2,zero,18f84 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   18f7c:	00bfffc4 	movi	r2,-1
   18f80:	00000f06 	br	18fc0 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   18f84:	e13ffe17 	ldw	r4,-8(fp)
   18f88:	e17fff17 	ldw	r5,-4(fp)
   18f8c:	0018b640 	call	18b64 <get_DDRAM_addr>
   18f90:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   18f94:	e0bffc03 	ldbu	r2,-16(fp)
   18f98:	e13ffd17 	ldw	r4,-12(fp)
   18f9c:	100b883a 	mov	r5,r2
   18fa0:	0018bd80 	call	18bd8 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   18fa4:	e0bffd17 	ldw	r2,-12(fp)
   18fa8:	10800a17 	ldw	r2,40(r2)
   18fac:	10800044 	addi	r2,r2,1
   18fb0:	1007883a 	mov	r3,r2
   18fb4:	00800084 	movi	r2,2
   18fb8:	18800025 	stbio	r2,0(r3)
	return 0;
   18fbc:	0005883a 	mov	r2,zero
}
   18fc0:	e037883a 	mov	sp,fp
   18fc4:	dfc00117 	ldw	ra,4(sp)
   18fc8:	df000017 	ldw	fp,0(sp)
   18fcc:	dec00204 	addi	sp,sp,8
   18fd0:	f800283a 	ret

00018fd4 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   18fd4:	defffd04 	addi	sp,sp,-12
   18fd8:	dfc00215 	stw	ra,8(sp)
   18fdc:	df000115 	stw	fp,4(sp)
   18fe0:	df000104 	addi	fp,sp,4
   18fe4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   18fe8:	e13fff17 	ldw	r4,-4(fp)
   18fec:	01400304 	movi	r5,12
   18ff0:	0018bd80 	call	18bd8 <alt_up_character_lcd_send_cmd>
}
   18ff4:	e037883a 	mov	sp,fp
   18ff8:	dfc00117 	ldw	ra,4(sp)
   18ffc:	df000017 	ldw	fp,0(sp)
   19000:	dec00204 	addi	sp,sp,8
   19004:	f800283a 	ret

00019008 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   19008:	defffd04 	addi	sp,sp,-12
   1900c:	dfc00215 	stw	ra,8(sp)
   19010:	df000115 	stw	fp,4(sp)
   19014:	df000104 	addi	fp,sp,4
   19018:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1901c:	e13fff17 	ldw	r4,-4(fp)
   19020:	014003c4 	movi	r5,15
   19024:	0018bd80 	call	18bd8 <alt_up_character_lcd_send_cmd>
}
   19028:	e037883a 	mov	sp,fp
   1902c:	dfc00117 	ldw	ra,4(sp)
   19030:	df000017 	ldw	fp,0(sp)
   19034:	dec00204 	addi	sp,sp,8
   19038:	f800283a 	ret

0001903c <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1903c:	defffd04 	addi	sp,sp,-12
   19040:	df000215 	stw	fp,8(sp)
   19044:	df000204 	addi	fp,sp,8
   19048:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1904c:	e0bfff17 	ldw	r2,-4(fp)
   19050:	10800a17 	ldw	r2,40(r2)
   19054:	10800104 	addi	r2,r2,4
   19058:	10800037 	ldwio	r2,0(r2)
   1905c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   19060:	e0bffe17 	ldw	r2,-8(fp)
   19064:	10800054 	ori	r2,r2,1
   19068:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1906c:	e0bfff17 	ldw	r2,-4(fp)
   19070:	10800a17 	ldw	r2,40(r2)
   19074:	10800104 	addi	r2,r2,4
   19078:	1007883a 	mov	r3,r2
   1907c:	e0bffe17 	ldw	r2,-8(fp)
   19080:	18800035 	stwio	r2,0(r3)
}
   19084:	e037883a 	mov	sp,fp
   19088:	df000017 	ldw	fp,0(sp)
   1908c:	dec00104 	addi	sp,sp,4
   19090:	f800283a 	ret

00019094 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   19094:	defffd04 	addi	sp,sp,-12
   19098:	df000215 	stw	fp,8(sp)
   1909c:	df000204 	addi	fp,sp,8
   190a0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   190a4:	e0bfff17 	ldw	r2,-4(fp)
   190a8:	10800a17 	ldw	r2,40(r2)
   190ac:	10800104 	addi	r2,r2,4
   190b0:	10800037 	ldwio	r2,0(r2)
   190b4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   190b8:	e0fffe17 	ldw	r3,-8(fp)
   190bc:	00bfff84 	movi	r2,-2
   190c0:	1884703a 	and	r2,r3,r2
   190c4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   190c8:	e0bfff17 	ldw	r2,-4(fp)
   190cc:	10800a17 	ldw	r2,40(r2)
   190d0:	10800104 	addi	r2,r2,4
   190d4:	1007883a 	mov	r3,r2
   190d8:	e0bffe17 	ldw	r2,-8(fp)
   190dc:	18800035 	stwio	r2,0(r3)
}
   190e0:	e037883a 	mov	sp,fp
   190e4:	df000017 	ldw	fp,0(sp)
   190e8:	dec00104 	addi	sp,sp,4
   190ec:	f800283a 	ret

000190f0 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   190f0:	defffd04 	addi	sp,sp,-12
   190f4:	df000215 	stw	fp,8(sp)
   190f8:	df000204 	addi	fp,sp,8
   190fc:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   19100:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   19104:	e0bfff17 	ldw	r2,-4(fp)
   19108:	10800a17 	ldw	r2,40(r2)
   1910c:	10800084 	addi	r2,r2,2
   19110:	1080002b 	ldhuio	r2,0(r2)
   19114:	10bfffcc 	andi	r2,r2,65535
   19118:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1911c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   19120:	e037883a 	mov	sp,fp
   19124:	df000017 	ldw	fp,0(sp)
   19128:	dec00104 	addi	sp,sp,4
   1912c:	f800283a 	ret

00019130 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   19130:	defffd04 	addi	sp,sp,-12
   19134:	df000215 	stw	fp,8(sp)
   19138:	df000204 	addi	fp,sp,8
   1913c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   19140:	e0bfff17 	ldw	r2,-4(fp)
   19144:	10800a17 	ldw	r2,40(r2)
   19148:	10800104 	addi	r2,r2,4
   1914c:	10800037 	ldwio	r2,0(r2)
   19150:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   19154:	e0bffe17 	ldw	r2,-8(fp)
   19158:	1004d43a 	srli	r2,r2,16
}
   1915c:	e037883a 	mov	sp,fp
   19160:	df000017 	ldw	fp,0(sp)
   19164:	dec00104 	addi	sp,sp,4
   19168:	f800283a 	ret

0001916c <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1916c:	defffd04 	addi	sp,sp,-12
   19170:	df000215 	stw	fp,8(sp)
   19174:	df000204 	addi	fp,sp,8
   19178:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1917c:	e0bfff17 	ldw	r2,-4(fp)
   19180:	1080800c 	andi	r2,r2,512
   19184:	1004d27a 	srli	r2,r2,9
   19188:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1918c:	e0bffe17 	ldw	r2,-8(fp)
   19190:	10000226 	beq	r2,zero,1919c <alt_up_irda_check_parity+0x30>
   19194:	00bfffc4 	movi	r2,-1
   19198:	00000106 	br	191a0 <alt_up_irda_check_parity+0x34>
   1919c:	0005883a 	mov	r2,zero
}
   191a0:	e037883a 	mov	sp,fp
   191a4:	df000017 	ldw	fp,0(sp)
   191a8:	dec00104 	addi	sp,sp,4
   191ac:	f800283a 	ret

000191b0 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   191b0:	defffd04 	addi	sp,sp,-12
   191b4:	df000215 	stw	fp,8(sp)
   191b8:	df000204 	addi	fp,sp,8
   191bc:	e13ffe15 	stw	r4,-8(fp)
   191c0:	2805883a 	mov	r2,r5
   191c4:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   191c8:	e0bffe17 	ldw	r2,-8(fp)
   191cc:	10800a17 	ldw	r2,40(r2)
   191d0:	1007883a 	mov	r3,r2
   191d4:	e0bfff03 	ldbu	r2,-4(fp)
   191d8:	18800035 	stwio	r2,0(r3)
	return 0;
   191dc:	0005883a 	mov	r2,zero
}
   191e0:	e037883a 	mov	sp,fp
   191e4:	df000017 	ldw	fp,0(sp)
   191e8:	dec00104 	addi	sp,sp,4
   191ec:	f800283a 	ret

000191f0 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   191f0:	defffa04 	addi	sp,sp,-24
   191f4:	dfc00515 	stw	ra,20(sp)
   191f8:	df000415 	stw	fp,16(sp)
   191fc:	df000404 	addi	fp,sp,16
   19200:	e13ffd15 	stw	r4,-12(fp)
   19204:	e17ffe15 	stw	r5,-8(fp)
   19208:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1920c:	e0bffd17 	ldw	r2,-12(fp)
   19210:	10800a17 	ldw	r2,40(r2)
   19214:	10800037 	ldwio	r2,0(r2)
   19218:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1921c:	e0bffc17 	ldw	r2,-16(fp)
   19220:	1007883a 	mov	r3,r2
   19224:	e0bffe17 	ldw	r2,-8(fp)
   19228:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   1922c:	e13ffc17 	ldw	r4,-16(fp)
   19230:	001916c0 	call	1916c <alt_up_irda_check_parity>
   19234:	1007883a 	mov	r3,r2
   19238:	e0bfff17 	ldw	r2,-4(fp)
   1923c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   19240:	e0bffc17 	ldw	r2,-16(fp)
   19244:	10a0000c 	andi	r2,r2,32768
   19248:	1004d3fa 	srli	r2,r2,15
   1924c:	10bfffc4 	addi	r2,r2,-1
}
   19250:	e037883a 	mov	sp,fp
   19254:	dfc00117 	ldw	ra,4(sp)
   19258:	df000017 	ldw	fp,0(sp)
   1925c:	dec00204 	addi	sp,sp,8
   19260:	f800283a 	ret

00019264 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   19264:	defff804 	addi	sp,sp,-32
   19268:	dfc00715 	stw	ra,28(sp)
   1926c:	df000615 	stw	fp,24(sp)
   19270:	df000604 	addi	fp,sp,24
   19274:	e13ffd15 	stw	r4,-12(fp)
   19278:	e17ffe15 	stw	r5,-8(fp)
   1927c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   19280:	e0bffd17 	ldw	r2,-12(fp)
   19284:	10800017 	ldw	r2,0(r2)
   19288:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1928c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   19290:	00000e06 	br	192cc <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   19294:	e0bffe17 	ldw	r2,-8(fp)
   19298:	10c00044 	addi	r3,r2,1
   1929c:	e0fffe15 	stw	r3,-8(fp)
   192a0:	e0fffc04 	addi	r3,fp,-16
   192a4:	e13ffb17 	ldw	r4,-20(fp)
   192a8:	100b883a 	mov	r5,r2
   192ac:	180d883a 	mov	r6,r3
   192b0:	00191f00 	call	191f0 <alt_up_irda_read_data>
   192b4:	1000041e 	bne	r2,zero,192c8 <alt_up_irda_read_fd+0x64>
			count++;
   192b8:	e0bffa17 	ldw	r2,-24(fp)
   192bc:	10800044 	addi	r2,r2,1
   192c0:	e0bffa15 	stw	r2,-24(fp)
   192c4:	00000106 	br	192cc <alt_up_irda_read_fd+0x68>
		else
			break;
   192c8:	00000406 	br	192dc <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   192cc:	e0bfff17 	ldw	r2,-4(fp)
   192d0:	10ffffc4 	addi	r3,r2,-1
   192d4:	e0ffff15 	stw	r3,-4(fp)
   192d8:	103fee1e 	bne	r2,zero,19294 <__alt_mem_Flash_flash_data+0xf4019294>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   192dc:	e0bffa17 	ldw	r2,-24(fp)
}
   192e0:	e037883a 	mov	sp,fp
   192e4:	dfc00117 	ldw	ra,4(sp)
   192e8:	df000017 	ldw	fp,0(sp)
   192ec:	dec00204 	addi	sp,sp,8
   192f0:	f800283a 	ret

000192f4 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   192f4:	defff904 	addi	sp,sp,-28
   192f8:	dfc00615 	stw	ra,24(sp)
   192fc:	df000515 	stw	fp,20(sp)
   19300:	df000504 	addi	fp,sp,20
   19304:	e13ffd15 	stw	r4,-12(fp)
   19308:	e17ffe15 	stw	r5,-8(fp)
   1930c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   19310:	e0bffd17 	ldw	r2,-12(fp)
   19314:	10800017 	ldw	r2,0(r2)
   19318:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1931c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   19320:	00000e06 	br	1935c <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   19324:	e0bffe17 	ldw	r2,-8(fp)
   19328:	10c00044 	addi	r3,r2,1
   1932c:	e0fffe15 	stw	r3,-8(fp)
   19330:	10800003 	ldbu	r2,0(r2)
   19334:	10803fcc 	andi	r2,r2,255
   19338:	e13ffc17 	ldw	r4,-16(fp)
   1933c:	100b883a 	mov	r5,r2
   19340:	00191b00 	call	191b0 <alt_up_irda_write_data>
   19344:	1000041e 	bne	r2,zero,19358 <alt_up_irda_write_fd+0x64>
			count++;
   19348:	e0bffb17 	ldw	r2,-20(fp)
   1934c:	10800044 	addi	r2,r2,1
   19350:	e0bffb15 	stw	r2,-20(fp)
   19354:	00000106 	br	1935c <alt_up_irda_write_fd+0x68>
		else
			break;
   19358:	00000406 	br	1936c <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1935c:	e0bfff17 	ldw	r2,-4(fp)
   19360:	10ffffc4 	addi	r3,r2,-1
   19364:	e0ffff15 	stw	r3,-4(fp)
   19368:	103fee1e 	bne	r2,zero,19324 <__alt_mem_Flash_flash_data+0xf4019324>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   1936c:	e0bffb17 	ldw	r2,-20(fp)
}
   19370:	e037883a 	mov	sp,fp
   19374:	dfc00117 	ldw	ra,4(sp)
   19378:	df000017 	ldw	fp,0(sp)
   1937c:	dec00204 	addi	sp,sp,8
   19380:	f800283a 	ret

00019384 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   19384:	defffc04 	addi	sp,sp,-16
   19388:	dfc00315 	stw	ra,12(sp)
   1938c:	df000215 	stw	fp,8(sp)
   19390:	df000204 	addi	fp,sp,8
   19394:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   19398:	e13fff17 	ldw	r4,-4(fp)
   1939c:	014000b4 	movhi	r5,2
   193a0:	29771604 	addi	r5,r5,-9128
   193a4:	001a4340 	call	1a434 <alt_find_dev>
   193a8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   193ac:	e0bffe17 	ldw	r2,-8(fp)
}
   193b0:	e037883a 	mov	sp,fp
   193b4:	dfc00117 	ldw	ra,4(sp)
   193b8:	df000017 	ldw	fp,0(sp)
   193bc:	dec00204 	addi	sp,sp,8
   193c0:	f800283a 	ret

000193c4 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
   193c4:	defffc04 	addi	sp,sp,-16
   193c8:	dfc00315 	stw	ra,12(sp)
   193cc:	df000215 	stw	fp,8(sp)
   193d0:	df000204 	addi	fp,sp,8
   193d4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
   193d8:	e13fff17 	ldw	r4,-4(fp)
   193dc:	014000b4 	movhi	r5,2
   193e0:	29771604 	addi	r5,r5,-9128
   193e4:	001a4340 	call	1a434 <alt_find_dev>
   193e8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   193ec:	e0bffe17 	ldw	r2,-8(fp)
}
   193f0:	e037883a 	mov	sp,fp
   193f4:	dfc00117 	ldw	ra,4(sp)
   193f8:	df000017 	ldw	fp,0(sp)
   193fc:	dec00204 	addi	sp,sp,8
   19400:	f800283a 	ret

00019404 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   19404:	defffd04 	addi	sp,sp,-12
   19408:	df000215 	stw	fp,8(sp)
   1940c:	df000204 	addi	fp,sp,8
   19410:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   19414:	e0bfff17 	ldw	r2,-4(fp)
   19418:	1080400c 	andi	r2,r2,256
   1941c:	1004d23a 	srli	r2,r2,8
   19420:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   19424:	e0bffe03 	ldbu	r2,-8(fp)
}
   19428:	e037883a 	mov	sp,fp
   1942c:	df000017 	ldw	fp,0(sp)
   19430:	dec00104 	addi	sp,sp,4
   19434:	f800283a 	ret

00019438 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   19438:	defffd04 	addi	sp,sp,-12
   1943c:	df000215 	stw	fp,8(sp)
   19440:	df000204 	addi	fp,sp,8
   19444:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   19448:	e0bfff17 	ldw	r2,-4(fp)
   1944c:	1080004c 	andi	r2,r2,1
   19450:	e0bffe05 	stb	r2,-8(fp)
	return re;
   19454:	e0bffe03 	ldbu	r2,-8(fp)
}
   19458:	e037883a 	mov	sp,fp
   1945c:	df000017 	ldw	fp,0(sp)
   19460:	dec00104 	addi	sp,sp,4
   19464:	f800283a 	ret

00019468 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   19468:	defffd04 	addi	sp,sp,-12
   1946c:	df000215 	stw	fp,8(sp)
   19470:	df000204 	addi	fp,sp,8
   19474:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   19478:	e0bfff17 	ldw	r2,-4(fp)
   1947c:	1081000c 	andi	r2,r2,1024
   19480:	1004d2ba 	srli	r2,r2,10
   19484:	e0bffe05 	stb	r2,-8(fp)
	return re;
   19488:	e0bffe03 	ldbu	r2,-8(fp)
}
   1948c:	e037883a 	mov	sp,fp
   19490:	df000017 	ldw	fp,0(sp)
   19494:	dec00104 	addi	sp,sp,4
   19498:	f800283a 	ret

0001949c <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1949c:	defffd04 	addi	sp,sp,-12
   194a0:	df000215 	stw	fp,8(sp)
   194a4:	df000204 	addi	fp,sp,8
   194a8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   194ac:	e0bfff17 	ldw	r2,-4(fp)
   194b0:	1004d43a 	srli	r2,r2,16
   194b4:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   194b8:	e0bffe0b 	ldhu	r2,-8(fp)
}
   194bc:	e037883a 	mov	sp,fp
   194c0:	df000017 	ldw	fp,0(sp)
   194c4:	dec00104 	addi	sp,sp,4
   194c8:	f800283a 	ret

000194cc <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   194cc:	defffd04 	addi	sp,sp,-12
   194d0:	df000215 	stw	fp,8(sp)
   194d4:	df000204 	addi	fp,sp,8
   194d8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   194dc:	e0bfff17 	ldw	r2,-4(fp)
   194e0:	10a0000c 	andi	r2,r2,32768
   194e4:	1004d3fa 	srli	r2,r2,15
   194e8:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   194ec:	e0bffe03 	ldbu	r2,-8(fp)
}
   194f0:	e037883a 	mov	sp,fp
   194f4:	df000017 	ldw	fp,0(sp)
   194f8:	dec00104 	addi	sp,sp,4
   194fc:	f800283a 	ret

00019500 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   19500:	defffd04 	addi	sp,sp,-12
   19504:	df000215 	stw	fp,8(sp)
   19508:	df000204 	addi	fp,sp,8
   1950c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   19510:	e0bfff17 	ldw	r2,-4(fp)
   19514:	e0bffe05 	stb	r2,-8(fp)
	return data;
   19518:	e0bffe03 	ldbu	r2,-8(fp)
}
   1951c:	e037883a 	mov	sp,fp
   19520:	df000017 	ldw	fp,0(sp)
   19524:	dec00104 	addi	sp,sp,4
   19528:	f800283a 	ret

0001952c <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1952c:	defffb04 	addi	sp,sp,-20
   19530:	dfc00415 	stw	ra,16(sp)
   19534:	df000315 	stw	fp,12(sp)
   19538:	df000304 	addi	fp,sp,12
   1953c:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   19540:	e13fff17 	ldw	r4,-4(fp)
   19544:	01403fc4 	movi	r5,255
   19548:	00197880 	call	19788 <alt_up_ps2_write_data_byte_with_ack>
   1954c:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   19550:	e0bffd17 	ldw	r2,-12(fp)
   19554:	1000211e 	bne	r2,zero,195dc <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   19558:	e0bffe04 	addi	r2,fp,-8
   1955c:	e13fff17 	ldw	r4,-4(fp)
   19560:	100b883a 	mov	r5,r2
   19564:	00197ec0 	call	197ec <alt_up_ps2_read_data_byte_timeout>
   19568:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1956c:	e0bffd17 	ldw	r2,-12(fp)
   19570:	10001a1e 	bne	r2,zero,195dc <alt_up_ps2_init+0xb0>
   19574:	e0bffe03 	ldbu	r2,-8(fp)
   19578:	10803fcc 	andi	r2,r2,255
   1957c:	10802a98 	cmpnei	r2,r2,170
   19580:	1000161e 	bne	r2,zero,195dc <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   19584:	e0bffe04 	addi	r2,fp,-8
   19588:	e13fff17 	ldw	r4,-4(fp)
   1958c:	100b883a 	mov	r5,r2
   19590:	00197ec0 	call	197ec <alt_up_ps2_read_data_byte_timeout>
   19594:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   19598:	e0bffd17 	ldw	r2,-12(fp)
   1959c:	10bfe318 	cmpnei	r2,r2,-116
   195a0:	1000041e 	bne	r2,zero,195b4 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   195a4:	e0bfff17 	ldw	r2,-4(fp)
   195a8:	00c00044 	movi	r3,1
   195ac:	10c00d15 	stw	r3,52(r2)
   195b0:	00000a06 	br	195dc <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   195b4:	e0bffd17 	ldw	r2,-12(fp)
   195b8:	1000081e 	bne	r2,zero,195dc <alt_up_ps2_init+0xb0>
   195bc:	e0bffe03 	ldbu	r2,-8(fp)
   195c0:	10803fcc 	andi	r2,r2,255
   195c4:	1000051e 	bne	r2,zero,195dc <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   195c8:	e0bfff17 	ldw	r2,-4(fp)
   195cc:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   195d0:	e13fff17 	ldw	r4,-4(fp)
   195d4:	01403d04 	movi	r5,244
   195d8:	00196a40 	call	196a4 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   195dc:	e037883a 	mov	sp,fp
   195e0:	dfc00117 	ldw	ra,4(sp)
   195e4:	df000017 	ldw	fp,0(sp)
   195e8:	dec00204 	addi	sp,sp,8
   195ec:	f800283a 	ret

000195f0 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   195f0:	defffd04 	addi	sp,sp,-12
   195f4:	df000215 	stw	fp,8(sp)
   195f8:	df000204 	addi	fp,sp,8
   195fc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   19600:	e0bfff17 	ldw	r2,-4(fp)
   19604:	10800a17 	ldw	r2,40(r2)
   19608:	10800104 	addi	r2,r2,4
   1960c:	10800037 	ldwio	r2,0(r2)
   19610:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   19614:	e0bffe17 	ldw	r2,-8(fp)
   19618:	10800054 	ori	r2,r2,1
   1961c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   19620:	e0bfff17 	ldw	r2,-4(fp)
   19624:	10800a17 	ldw	r2,40(r2)
   19628:	10800104 	addi	r2,r2,4
   1962c:	1007883a 	mov	r3,r2
   19630:	e0bffe17 	ldw	r2,-8(fp)
   19634:	18800035 	stwio	r2,0(r3)
}
   19638:	e037883a 	mov	sp,fp
   1963c:	df000017 	ldw	fp,0(sp)
   19640:	dec00104 	addi	sp,sp,4
   19644:	f800283a 	ret

00019648 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   19648:	defffd04 	addi	sp,sp,-12
   1964c:	df000215 	stw	fp,8(sp)
   19650:	df000204 	addi	fp,sp,8
   19654:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   19658:	e0bfff17 	ldw	r2,-4(fp)
   1965c:	10800a17 	ldw	r2,40(r2)
   19660:	10800104 	addi	r2,r2,4
   19664:	10800037 	ldwio	r2,0(r2)
   19668:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1966c:	e0fffe17 	ldw	r3,-8(fp)
   19670:	00bfff84 	movi	r2,-2
   19674:	1884703a 	and	r2,r3,r2
   19678:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1967c:	e0bfff17 	ldw	r2,-4(fp)
   19680:	10800a17 	ldw	r2,40(r2)
   19684:	10800104 	addi	r2,r2,4
   19688:	1007883a 	mov	r3,r2
   1968c:	e0bffe17 	ldw	r2,-8(fp)
   19690:	18800035 	stwio	r2,0(r3)
}
   19694:	e037883a 	mov	sp,fp
   19698:	df000017 	ldw	fp,0(sp)
   1969c:	dec00104 	addi	sp,sp,4
   196a0:	f800283a 	ret

000196a4 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   196a4:	defffb04 	addi	sp,sp,-20
   196a8:	dfc00415 	stw	ra,16(sp)
   196ac:	df000315 	stw	fp,12(sp)
   196b0:	df000304 	addi	fp,sp,12
   196b4:	e13ffe15 	stw	r4,-8(fp)
   196b8:	2805883a 	mov	r2,r5
   196bc:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   196c0:	e0bffe17 	ldw	r2,-8(fp)
   196c4:	10800a17 	ldw	r2,40(r2)
   196c8:	1007883a 	mov	r3,r2
   196cc:	e0bfff03 	ldbu	r2,-4(fp)
   196d0:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   196d4:	e0bffe17 	ldw	r2,-8(fp)
   196d8:	10800a17 	ldw	r2,40(r2)
   196dc:	10800104 	addi	r2,r2,4
   196e0:	10800037 	ldwio	r2,0(r2)
   196e4:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   196e8:	e13ffd17 	ldw	r4,-12(fp)
   196ec:	00194680 	call	19468 <read_CE_bit>
   196f0:	10803fcc 	andi	r2,r2,255
   196f4:	10000226 	beq	r2,zero,19700 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   196f8:	00bffec4 	movi	r2,-5
   196fc:	00000106 	br	19704 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   19700:	0005883a 	mov	r2,zero
}
   19704:	e037883a 	mov	sp,fp
   19708:	dfc00117 	ldw	ra,4(sp)
   1970c:	df000017 	ldw	fp,0(sp)
   19710:	dec00204 	addi	sp,sp,8
   19714:	f800283a 	ret

00019718 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   19718:	defffc04 	addi	sp,sp,-16
   1971c:	dfc00315 	stw	ra,12(sp)
   19720:	df000215 	stw	fp,8(sp)
   19724:	df000204 	addi	fp,sp,8
   19728:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1972c:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   19730:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   19734:	e0bffe44 	addi	r2,fp,-7
   19738:	e13fff17 	ldw	r4,-4(fp)
   1973c:	100b883a 	mov	r5,r2
   19740:	00197ec0 	call	197ec <alt_up_ps2_read_data_byte_timeout>
   19744:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   19748:	e0bffe03 	ldbu	r2,-8(fp)
   1974c:	1000061e 	bne	r2,zero,19768 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   19750:	e0bffe43 	ldbu	r2,-7(fp)
   19754:	10803fcc 	andi	r2,r2,255
   19758:	10803e98 	cmpnei	r2,r2,250
   1975c:	1000041e 	bne	r2,zero,19770 <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   19760:	0005883a 	mov	r2,zero
   19764:	00000306 	br	19774 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   19768:	e0bffe03 	ldbu	r2,-8(fp)
   1976c:	00000106 	br	19774 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   19770:	003ff006 	br	19734 <__alt_mem_Flash_flash_data+0xf4019734>
	return -ETIMEDOUT;
}
   19774:	e037883a 	mov	sp,fp
   19778:	dfc00117 	ldw	ra,4(sp)
   1977c:	df000017 	ldw	fp,0(sp)
   19780:	dec00204 	addi	sp,sp,8
   19784:	f800283a 	ret

00019788 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   19788:	defffa04 	addi	sp,sp,-24
   1978c:	dfc00515 	stw	ra,20(sp)
   19790:	df000415 	stw	fp,16(sp)
   19794:	df000404 	addi	fp,sp,16
   19798:	e13ffe15 	stw	r4,-8(fp)
   1979c:	2805883a 	mov	r2,r5
   197a0:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   197a4:	e0bfff03 	ldbu	r2,-4(fp)
   197a8:	e13ffe17 	ldw	r4,-8(fp)
   197ac:	100b883a 	mov	r5,r2
   197b0:	00196a40 	call	196a4 <alt_up_ps2_write_data_byte>
   197b4:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   197b8:	e0bffc17 	ldw	r2,-16(fp)
   197bc:	10000226 	beq	r2,zero,197c8 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   197c0:	e0bffc17 	ldw	r2,-16(fp)
   197c4:	00000406 	br	197d8 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   197c8:	e13ffe17 	ldw	r4,-8(fp)
   197cc:	00197180 	call	19718 <alt_up_ps2_wait_for_ack>
   197d0:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   197d4:	e0bffd17 	ldw	r2,-12(fp)
}
   197d8:	e037883a 	mov	sp,fp
   197dc:	dfc00117 	ldw	ra,4(sp)
   197e0:	df000017 	ldw	fp,0(sp)
   197e4:	dec00204 	addi	sp,sp,8
   197e8:	f800283a 	ret

000197ec <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   197ec:	defffa04 	addi	sp,sp,-24
   197f0:	dfc00515 	stw	ra,20(sp)
   197f4:	df000415 	stw	fp,16(sp)
   197f8:	df000404 	addi	fp,sp,16
   197fc:	e13ffe15 	stw	r4,-8(fp)
   19800:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   19804:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   19808:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1980c:	e0bffc17 	ldw	r2,-16(fp)
   19810:	10800044 	addi	r2,r2,1
   19814:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   19818:	e0bffe17 	ldw	r2,-8(fp)
   1981c:	10800a17 	ldw	r2,40(r2)
   19820:	10800037 	ldwio	r2,0(r2)
   19824:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   19828:	e13ffd17 	ldw	r4,-12(fp)
   1982c:	00194cc0 	call	194cc <read_data_valid>
   19830:	10803fcc 	andi	r2,r2,255
   19834:	10000726 	beq	r2,zero,19854 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   19838:	e13ffd17 	ldw	r4,-12(fp)
   1983c:	00195000 	call	19500 <read_data_byte>
   19840:	1007883a 	mov	r3,r2
   19844:	e0bfff17 	ldw	r2,-4(fp)
   19848:	10c00005 	stb	r3,0(r2)
			return 0;
   1984c:	0005883a 	mov	r2,zero
   19850:	00000a06 	br	1987c <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   19854:	e0bffe17 	ldw	r2,-8(fp)
   19858:	10800c17 	ldw	r2,48(r2)
   1985c:	10000626 	beq	r2,zero,19878 <alt_up_ps2_read_data_byte_timeout+0x8c>
   19860:	e0bffe17 	ldw	r2,-8(fp)
   19864:	10c00c17 	ldw	r3,48(r2)
   19868:	e0bffc17 	ldw	r2,-16(fp)
   1986c:	1880022e 	bgeu	r3,r2,19878 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   19870:	00bfe304 	movi	r2,-116
   19874:	00000106 	br	1987c <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   19878:	003fe406 	br	1980c <__alt_mem_Flash_flash_data+0xf401980c>
}
   1987c:	e037883a 	mov	sp,fp
   19880:	dfc00117 	ldw	ra,4(sp)
   19884:	df000017 	ldw	fp,0(sp)
   19888:	dec00204 	addi	sp,sp,8
   1988c:	f800283a 	ret

00019890 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   19890:	defffb04 	addi	sp,sp,-20
   19894:	dfc00415 	stw	ra,16(sp)
   19898:	df000315 	stw	fp,12(sp)
   1989c:	df000304 	addi	fp,sp,12
   198a0:	e13ffe15 	stw	r4,-8(fp)
   198a4:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   198a8:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   198ac:	e0bffe17 	ldw	r2,-8(fp)
   198b0:	10800a17 	ldw	r2,40(r2)
   198b4:	10800037 	ldwio	r2,0(r2)
   198b8:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   198bc:	e13ffd17 	ldw	r4,-12(fp)
   198c0:	00194cc0 	call	194cc <read_data_valid>
   198c4:	10803fcc 	andi	r2,r2,255
   198c8:	10000726 	beq	r2,zero,198e8 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   198cc:	e13ffd17 	ldw	r4,-12(fp)
   198d0:	00195000 	call	19500 <read_data_byte>
   198d4:	1007883a 	mov	r3,r2
   198d8:	e0bfff17 	ldw	r2,-4(fp)
   198dc:	10c00005 	stb	r3,0(r2)
		return 0;
   198e0:	0005883a 	mov	r2,zero
   198e4:	00000106 	br	198ec <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   198e8:	00bfffc4 	movi	r2,-1
}
   198ec:	e037883a 	mov	sp,fp
   198f0:	dfc00117 	ldw	ra,4(sp)
   198f4:	df000017 	ldw	fp,0(sp)
   198f8:	dec00204 	addi	sp,sp,8
   198fc:	f800283a 	ret

00019900 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   19900:	defffb04 	addi	sp,sp,-20
   19904:	dfc00415 	stw	ra,16(sp)
   19908:	df000315 	stw	fp,12(sp)
   1990c:	df000304 	addi	fp,sp,12
   19910:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   19914:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   19918:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1991c:	e0bfff17 	ldw	r2,-4(fp)
   19920:	10800a17 	ldw	r2,40(r2)
   19924:	10800037 	ldwio	r2,0(r2)
   19928:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1992c:	e13ffe17 	ldw	r4,-8(fp)
   19930:	001949c0 	call	1949c <read_num_bytes_available>
   19934:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   19938:	e0bffd0b 	ldhu	r2,-12(fp)
   1993c:	103ff71e 	bne	r2,zero,1991c <__alt_mem_Flash_flash_data+0xf401991c>
}
   19940:	e037883a 	mov	sp,fp
   19944:	dfc00117 	ldw	ra,4(sp)
   19948:	df000017 	ldw	fp,0(sp)
   1994c:	dec00204 	addi	sp,sp,8
   19950:	f800283a 	ret

00019954 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   19954:	defff804 	addi	sp,sp,-32
   19958:	dfc00715 	stw	ra,28(sp)
   1995c:	df000615 	stw	fp,24(sp)
   19960:	df000604 	addi	fp,sp,24
   19964:	e13ffd15 	stw	r4,-12(fp)
   19968:	e17ffe15 	stw	r5,-8(fp)
   1996c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   19970:	e0bffd17 	ldw	r2,-12(fp)
   19974:	10800017 	ldw	r2,0(r2)
   19978:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1997c:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   19980:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   19984:	e0fffc17 	ldw	r3,-16(fp)
   19988:	e0bfff17 	ldw	r2,-4(fp)
   1998c:	18bffd16 	blt	r3,r2,19984 <__alt_mem_Flash_flash_data+0xf4019984>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   19990:	e0bffe17 	ldw	r2,-8(fp)
   19994:	10c00044 	addi	r3,r2,1
   19998:	e0fffe15 	stw	r3,-8(fp)
   1999c:	e13ffa17 	ldw	r4,-24(fp)
   199a0:	100b883a 	mov	r5,r2
   199a4:	00197ec0 	call	197ec <alt_up_ps2_read_data_byte_timeout>
   199a8:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   199ac:	e0bffb17 	ldw	r2,-20(fp)
   199b0:	10000226 	beq	r2,zero,199bc <alt_up_ps2_read_fd+0x68>
			return count;
   199b4:	e0bffc17 	ldw	r2,-16(fp)
   199b8:	00000406 	br	199cc <alt_up_ps2_read_fd+0x78>
		count++;
   199bc:	e0bffc17 	ldw	r2,-16(fp)
   199c0:	10800044 	addi	r2,r2,1
   199c4:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   199c8:	e0bffc17 	ldw	r2,-16(fp)
}
   199cc:	e037883a 	mov	sp,fp
   199d0:	dfc00117 	ldw	ra,4(sp)
   199d4:	df000017 	ldw	fp,0(sp)
   199d8:	dec00204 	addi	sp,sp,8
   199dc:	f800283a 	ret

000199e0 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   199e0:	defff804 	addi	sp,sp,-32
   199e4:	dfc00715 	stw	ra,28(sp)
   199e8:	df000615 	stw	fp,24(sp)
   199ec:	df000604 	addi	fp,sp,24
   199f0:	e13ffd15 	stw	r4,-12(fp)
   199f4:	e17ffe15 	stw	r5,-8(fp)
   199f8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   199fc:	e0bffd17 	ldw	r2,-12(fp)
   19a00:	10800017 	ldw	r2,0(r2)
   19a04:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   19a08:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   19a0c:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   19a10:	00001006 	br	19a54 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   19a14:	e0bffe17 	ldw	r2,-8(fp)
   19a18:	10c00044 	addi	r3,r2,1
   19a1c:	e0fffe15 	stw	r3,-8(fp)
   19a20:	10800003 	ldbu	r2,0(r2)
   19a24:	10803fcc 	andi	r2,r2,255
   19a28:	e13ffb17 	ldw	r4,-20(fp)
   19a2c:	100b883a 	mov	r5,r2
   19a30:	00196a40 	call	196a4 <alt_up_ps2_write_data_byte>
   19a34:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   19a38:	e0bffc17 	ldw	r2,-16(fp)
   19a3c:	10000226 	beq	r2,zero,19a48 <alt_up_ps2_write_fd+0x68>
			return count;
   19a40:	e0bffa17 	ldw	r2,-24(fp)
   19a44:	00000706 	br	19a64 <alt_up_ps2_write_fd+0x84>
		count++;
   19a48:	e0bffa17 	ldw	r2,-24(fp)
   19a4c:	10800044 	addi	r2,r2,1
   19a50:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   19a54:	e0fffa17 	ldw	r3,-24(fp)
   19a58:	e0bfff17 	ldw	r2,-4(fp)
   19a5c:	18bfed16 	blt	r3,r2,19a14 <__alt_mem_Flash_flash_data+0xf4019a14>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   19a60:	e0bffa17 	ldw	r2,-24(fp)
}
   19a64:	e037883a 	mov	sp,fp
   19a68:	dfc00117 	ldw	ra,4(sp)
   19a6c:	df000017 	ldw	fp,0(sp)
   19a70:	dec00204 	addi	sp,sp,8
   19a74:	f800283a 	ret

00019a78 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   19a78:	defffc04 	addi	sp,sp,-16
   19a7c:	dfc00315 	stw	ra,12(sp)
   19a80:	df000215 	stw	fp,8(sp)
   19a84:	df000204 	addi	fp,sp,8
   19a88:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   19a8c:	e13fff17 	ldw	r4,-4(fp)
   19a90:	014000b4 	movhi	r5,2
   19a94:	29771604 	addi	r5,r5,-9128
   19a98:	001a4340 	call	1a434 <alt_find_dev>
   19a9c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   19aa0:	e0bffe17 	ldw	r2,-8(fp)
}
   19aa4:	e037883a 	mov	sp,fp
   19aa8:	dfc00117 	ldw	ra,4(sp)
   19aac:	df000017 	ldw	fp,0(sp)
   19ab0:	dec00204 	addi	sp,sp,8
   19ab4:	f800283a 	ret

00019ab8 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   19ab8:	defffd04 	addi	sp,sp,-12
   19abc:	df000215 	stw	fp,8(sp)
   19ac0:	df000204 	addi	fp,sp,8
   19ac4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   19ac8:	e0bfff17 	ldw	r2,-4(fp)
   19acc:	10800a17 	ldw	r2,40(r2)
   19ad0:	10800104 	addi	r2,r2,4
   19ad4:	10800037 	ldwio	r2,0(r2)
   19ad8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   19adc:	e0bffe17 	ldw	r2,-8(fp)
   19ae0:	10800054 	ori	r2,r2,1
   19ae4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   19ae8:	e0bfff17 	ldw	r2,-4(fp)
   19aec:	10800a17 	ldw	r2,40(r2)
   19af0:	10800104 	addi	r2,r2,4
   19af4:	1007883a 	mov	r3,r2
   19af8:	e0bffe17 	ldw	r2,-8(fp)
   19afc:	18800035 	stwio	r2,0(r3)
}
   19b00:	e037883a 	mov	sp,fp
   19b04:	df000017 	ldw	fp,0(sp)
   19b08:	dec00104 	addi	sp,sp,4
   19b0c:	f800283a 	ret

00019b10 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   19b10:	defffd04 	addi	sp,sp,-12
   19b14:	df000215 	stw	fp,8(sp)
   19b18:	df000204 	addi	fp,sp,8
   19b1c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   19b20:	e0bfff17 	ldw	r2,-4(fp)
   19b24:	10800a17 	ldw	r2,40(r2)
   19b28:	10800104 	addi	r2,r2,4
   19b2c:	10800037 	ldwio	r2,0(r2)
   19b30:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   19b34:	e0fffe17 	ldw	r3,-8(fp)
   19b38:	00bfff84 	movi	r2,-2
   19b3c:	1884703a 	and	r2,r3,r2
   19b40:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   19b44:	e0bfff17 	ldw	r2,-4(fp)
   19b48:	10800a17 	ldw	r2,40(r2)
   19b4c:	10800104 	addi	r2,r2,4
   19b50:	1007883a 	mov	r3,r2
   19b54:	e0bffe17 	ldw	r2,-8(fp)
   19b58:	18800035 	stwio	r2,0(r3)
}
   19b5c:	e037883a 	mov	sp,fp
   19b60:	df000017 	ldw	fp,0(sp)
   19b64:	dec00104 	addi	sp,sp,4
   19b68:	f800283a 	ret

00019b6c <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   19b6c:	defffd04 	addi	sp,sp,-12
   19b70:	df000215 	stw	fp,8(sp)
   19b74:	df000204 	addi	fp,sp,8
   19b78:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   19b7c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   19b80:	e0bfff17 	ldw	r2,-4(fp)
   19b84:	10800a17 	ldw	r2,40(r2)
   19b88:	10800084 	addi	r2,r2,2
   19b8c:	1080002b 	ldhuio	r2,0(r2)
   19b90:	10bfffcc 	andi	r2,r2,65535
   19b94:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   19b98:	e0bffe0b 	ldhu	r2,-8(fp)
}
   19b9c:	e037883a 	mov	sp,fp
   19ba0:	df000017 	ldw	fp,0(sp)
   19ba4:	dec00104 	addi	sp,sp,4
   19ba8:	f800283a 	ret

00019bac <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   19bac:	defffd04 	addi	sp,sp,-12
   19bb0:	df000215 	stw	fp,8(sp)
   19bb4:	df000204 	addi	fp,sp,8
   19bb8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   19bbc:	e0bfff17 	ldw	r2,-4(fp)
   19bc0:	10800a17 	ldw	r2,40(r2)
   19bc4:	10800104 	addi	r2,r2,4
   19bc8:	10800037 	ldwio	r2,0(r2)
   19bcc:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   19bd0:	e0bffe17 	ldw	r2,-8(fp)
   19bd4:	1004d43a 	srli	r2,r2,16
}
   19bd8:	e037883a 	mov	sp,fp
   19bdc:	df000017 	ldw	fp,0(sp)
   19be0:	dec00104 	addi	sp,sp,4
   19be4:	f800283a 	ret

00019be8 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   19be8:	defffd04 	addi	sp,sp,-12
   19bec:	df000215 	stw	fp,8(sp)
   19bf0:	df000204 	addi	fp,sp,8
   19bf4:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   19bf8:	e0bfff17 	ldw	r2,-4(fp)
   19bfc:	1080800c 	andi	r2,r2,512
   19c00:	1004d27a 	srli	r2,r2,9
   19c04:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   19c08:	e0bffe17 	ldw	r2,-8(fp)
   19c0c:	10000226 	beq	r2,zero,19c18 <alt_up_rs232_check_parity+0x30>
   19c10:	00bfffc4 	movi	r2,-1
   19c14:	00000106 	br	19c1c <alt_up_rs232_check_parity+0x34>
   19c18:	0005883a 	mov	r2,zero
}
   19c1c:	e037883a 	mov	sp,fp
   19c20:	df000017 	ldw	fp,0(sp)
   19c24:	dec00104 	addi	sp,sp,4
   19c28:	f800283a 	ret

00019c2c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   19c2c:	defffd04 	addi	sp,sp,-12
   19c30:	df000215 	stw	fp,8(sp)
   19c34:	df000204 	addi	fp,sp,8
   19c38:	e13ffe15 	stw	r4,-8(fp)
   19c3c:	2805883a 	mov	r2,r5
   19c40:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   19c44:	e0bffe17 	ldw	r2,-8(fp)
   19c48:	10800a17 	ldw	r2,40(r2)
   19c4c:	1007883a 	mov	r3,r2
   19c50:	e0bfff03 	ldbu	r2,-4(fp)
   19c54:	18800035 	stwio	r2,0(r3)
	return 0;
   19c58:	0005883a 	mov	r2,zero
}
   19c5c:	e037883a 	mov	sp,fp
   19c60:	df000017 	ldw	fp,0(sp)
   19c64:	dec00104 	addi	sp,sp,4
   19c68:	f800283a 	ret

00019c6c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   19c6c:	defffa04 	addi	sp,sp,-24
   19c70:	dfc00515 	stw	ra,20(sp)
   19c74:	df000415 	stw	fp,16(sp)
   19c78:	df000404 	addi	fp,sp,16
   19c7c:	e13ffd15 	stw	r4,-12(fp)
   19c80:	e17ffe15 	stw	r5,-8(fp)
   19c84:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   19c88:	e0bffd17 	ldw	r2,-12(fp)
   19c8c:	10800a17 	ldw	r2,40(r2)
   19c90:	10800037 	ldwio	r2,0(r2)
   19c94:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   19c98:	e0bffc17 	ldw	r2,-16(fp)
   19c9c:	1007883a 	mov	r3,r2
   19ca0:	e0bffe17 	ldw	r2,-8(fp)
   19ca4:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   19ca8:	e13ffc17 	ldw	r4,-16(fp)
   19cac:	0019be80 	call	19be8 <alt_up_rs232_check_parity>
   19cb0:	1007883a 	mov	r3,r2
   19cb4:	e0bfff17 	ldw	r2,-4(fp)
   19cb8:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   19cbc:	e0bffc17 	ldw	r2,-16(fp)
   19cc0:	10a0000c 	andi	r2,r2,32768
   19cc4:	1004d3fa 	srli	r2,r2,15
   19cc8:	10bfffc4 	addi	r2,r2,-1
}
   19ccc:	e037883a 	mov	sp,fp
   19cd0:	dfc00117 	ldw	ra,4(sp)
   19cd4:	df000017 	ldw	fp,0(sp)
   19cd8:	dec00204 	addi	sp,sp,8
   19cdc:	f800283a 	ret

00019ce0 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   19ce0:	defff804 	addi	sp,sp,-32
   19ce4:	dfc00715 	stw	ra,28(sp)
   19ce8:	df000615 	stw	fp,24(sp)
   19cec:	df000604 	addi	fp,sp,24
   19cf0:	e13ffd15 	stw	r4,-12(fp)
   19cf4:	e17ffe15 	stw	r5,-8(fp)
   19cf8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   19cfc:	e0bffd17 	ldw	r2,-12(fp)
   19d00:	10800017 	ldw	r2,0(r2)
   19d04:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   19d08:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   19d0c:	00000e06 	br	19d48 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   19d10:	e0bffe17 	ldw	r2,-8(fp)
   19d14:	10c00044 	addi	r3,r2,1
   19d18:	e0fffe15 	stw	r3,-8(fp)
   19d1c:	e0fffc04 	addi	r3,fp,-16
   19d20:	e13ffb17 	ldw	r4,-20(fp)
   19d24:	100b883a 	mov	r5,r2
   19d28:	180d883a 	mov	r6,r3
   19d2c:	0019c6c0 	call	19c6c <alt_up_rs232_read_data>
   19d30:	1000041e 	bne	r2,zero,19d44 <alt_up_rs232_read_fd+0x64>
			count++;
   19d34:	e0bffa17 	ldw	r2,-24(fp)
   19d38:	10800044 	addi	r2,r2,1
   19d3c:	e0bffa15 	stw	r2,-24(fp)
   19d40:	00000106 	br	19d48 <alt_up_rs232_read_fd+0x68>
		else
			break;
   19d44:	00000406 	br	19d58 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   19d48:	e0bfff17 	ldw	r2,-4(fp)
   19d4c:	10ffffc4 	addi	r3,r2,-1
   19d50:	e0ffff15 	stw	r3,-4(fp)
   19d54:	103fee1e 	bne	r2,zero,19d10 <__alt_mem_Flash_flash_data+0xf4019d10>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   19d58:	e0bffa17 	ldw	r2,-24(fp)
}
   19d5c:	e037883a 	mov	sp,fp
   19d60:	dfc00117 	ldw	ra,4(sp)
   19d64:	df000017 	ldw	fp,0(sp)
   19d68:	dec00204 	addi	sp,sp,8
   19d6c:	f800283a 	ret

00019d70 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   19d70:	defff904 	addi	sp,sp,-28
   19d74:	dfc00615 	stw	ra,24(sp)
   19d78:	df000515 	stw	fp,20(sp)
   19d7c:	df000504 	addi	fp,sp,20
   19d80:	e13ffd15 	stw	r4,-12(fp)
   19d84:	e17ffe15 	stw	r5,-8(fp)
   19d88:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   19d8c:	e0bffd17 	ldw	r2,-12(fp)
   19d90:	10800017 	ldw	r2,0(r2)
   19d94:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   19d98:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   19d9c:	00000f06 	br	19ddc <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   19da0:	e0bffe17 	ldw	r2,-8(fp)
   19da4:	10800003 	ldbu	r2,0(r2)
   19da8:	10803fcc 	andi	r2,r2,255
   19dac:	e13ffc17 	ldw	r4,-16(fp)
   19db0:	100b883a 	mov	r5,r2
   19db4:	0019c2c0 	call	19c2c <alt_up_rs232_write_data>
   19db8:	1000071e 	bne	r2,zero,19dd8 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   19dbc:	e0bffb17 	ldw	r2,-20(fp)
   19dc0:	10800044 	addi	r2,r2,1
   19dc4:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   19dc8:	e0bffe17 	ldw	r2,-8(fp)
   19dcc:	10800044 	addi	r2,r2,1
   19dd0:	e0bffe15 	stw	r2,-8(fp)
   19dd4:	00000106 	br	19ddc <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   19dd8:	00000406 	br	19dec <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   19ddc:	e0bfff17 	ldw	r2,-4(fp)
   19de0:	10ffffc4 	addi	r3,r2,-1
   19de4:	e0ffff15 	stw	r3,-4(fp)
   19de8:	103fed1e 	bne	r2,zero,19da0 <__alt_mem_Flash_flash_data+0xf4019da0>
			ptr++;
		}
		else
			break;
	}
	return count;
   19dec:	e0bffb17 	ldw	r2,-20(fp)
}
   19df0:	e037883a 	mov	sp,fp
   19df4:	dfc00117 	ldw	ra,4(sp)
   19df8:	df000017 	ldw	fp,0(sp)
   19dfc:	dec00204 	addi	sp,sp,8
   19e00:	f800283a 	ret

00019e04 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   19e04:	defffc04 	addi	sp,sp,-16
   19e08:	dfc00315 	stw	ra,12(sp)
   19e0c:	df000215 	stw	fp,8(sp)
   19e10:	df000204 	addi	fp,sp,8
   19e14:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   19e18:	e13fff17 	ldw	r4,-4(fp)
   19e1c:	014000b4 	movhi	r5,2
   19e20:	29771604 	addi	r5,r5,-9128
   19e24:	001a4340 	call	1a434 <alt_find_dev>
   19e28:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   19e2c:	e0bffe17 	ldw	r2,-8(fp)
}
   19e30:	e037883a 	mov	sp,fp
   19e34:	dfc00117 	ldw	ra,4(sp)
   19e38:	df000017 	ldw	fp,0(sp)
   19e3c:	dec00204 	addi	sp,sp,8
   19e40:	f800283a 	ret

00019e44 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   19e44:	defffc04 	addi	sp,sp,-16
   19e48:	dfc00315 	stw	ra,12(sp)
   19e4c:	df000215 	stw	fp,8(sp)
   19e50:	df000204 	addi	fp,sp,8
   19e54:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   19e58:	e0bfff17 	ldw	r2,-4(fp)
   19e5c:	10800217 	ldw	r2,8(r2)
   19e60:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   19e64:	00000b06 	br	19e94 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   19e68:	e13ffe17 	ldw	r4,-8(fp)
   19e6c:	014000b4 	movhi	r5,2
   19e70:	296f6b04 	addi	r5,r5,-16980
   19e74:	00093440 	call	9344 <strcmp>
   19e78:	1000031e 	bne	r2,zero,19e88 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   19e7c:	e0bffe17 	ldw	r2,-8(fp)
   19e80:	10000005 	stb	zero,0(r2)
			break;
   19e84:	00000906 	br	19eac <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   19e88:	e0bffe17 	ldw	r2,-8(fp)
   19e8c:	10800044 	addi	r2,r2,1
   19e90:	e0bffe15 	stw	r2,-8(fp)
   19e94:	e0bffe17 	ldw	r2,-8(fp)
   19e98:	10800003 	ldbu	r2,0(r2)
   19e9c:	10803fcc 	andi	r2,r2,255
   19ea0:	1080201c 	xori	r2,r2,128
   19ea4:	10bfe004 	addi	r2,r2,-128
   19ea8:	103fef1e 	bne	r2,zero,19e68 <__alt_mem_Flash_flash_data+0xf4019e68>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   19eac:	0001883a 	nop
}
   19eb0:	e037883a 	mov	sp,fp
   19eb4:	dfc00117 	ldw	ra,4(sp)
   19eb8:	df000017 	ldw	fp,0(sp)
   19ebc:	dec00204 	addi	sp,sp,8
   19ec0:	f800283a 	ret

00019ec4 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   19ec4:	defffc04 	addi	sp,sp,-16
   19ec8:	dfc00315 	stw	ra,12(sp)
   19ecc:	df000215 	stw	fp,8(sp)
   19ed0:	df000204 	addi	fp,sp,8
   19ed4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   19ed8:	e13fff17 	ldw	r4,-4(fp)
   19edc:	014000b4 	movhi	r5,2
   19ee0:	29771604 	addi	r5,r5,-9128
   19ee4:	001a4340 	call	1a434 <alt_find_dev>
   19ee8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   19eec:	e0bffe17 	ldw	r2,-8(fp)
}
   19ef0:	e037883a 	mov	sp,fp
   19ef4:	dfc00117 	ldw	ra,4(sp)
   19ef8:	df000017 	ldw	fp,0(sp)
   19efc:	dec00204 	addi	sp,sp,8
   19f00:	f800283a 	ret

00019f04 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   19f04:	defffa04 	addi	sp,sp,-24
   19f08:	df000515 	stw	fp,20(sp)
   19f0c:	df000504 	addi	fp,sp,20
   19f10:	e13ffc15 	stw	r4,-16(fp)
   19f14:	2805883a 	mov	r2,r5
   19f18:	e1bffe15 	stw	r6,-8(fp)
   19f1c:	e1ffff15 	stw	r7,-4(fp)
   19f20:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   19f24:	e0bffc17 	ldw	r2,-16(fp)
   19f28:	10800c17 	ldw	r2,48(r2)
   19f2c:	e0fffe17 	ldw	r3,-8(fp)
   19f30:	1880042e 	bgeu	r3,r2,19f44 <alt_up_char_buffer_draw+0x40>
   19f34:	e0bffc17 	ldw	r2,-16(fp)
   19f38:	10800d17 	ldw	r2,52(r2)
   19f3c:	e0ffff17 	ldw	r3,-4(fp)
   19f40:	18800236 	bltu	r3,r2,19f4c <alt_up_char_buffer_draw+0x48>
		return -1;
   19f44:	00bfffc4 	movi	r2,-1
   19f48:	00001d06 	br	19fc0 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   19f4c:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   19f50:	e0bffc17 	ldw	r2,-16(fp)
   19f54:	10c00f17 	ldw	r3,60(r2)
   19f58:	e0bffe17 	ldw	r2,-8(fp)
   19f5c:	1884703a 	and	r2,r3,r2
   19f60:	e0fffc17 	ldw	r3,-16(fp)
   19f64:	18c00e17 	ldw	r3,56(r3)
   19f68:	10c4983a 	sll	r2,r2,r3
   19f6c:	e0fffb17 	ldw	r3,-20(fp)
   19f70:	1884b03a 	or	r2,r3,r2
   19f74:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   19f78:	e0bffc17 	ldw	r2,-16(fp)
   19f7c:	10c01117 	ldw	r3,68(r2)
   19f80:	e0bfff17 	ldw	r2,-4(fp)
   19f84:	1884703a 	and	r2,r3,r2
   19f88:	e0fffc17 	ldw	r3,-16(fp)
   19f8c:	18c01017 	ldw	r3,64(r3)
   19f90:	10c4983a 	sll	r2,r2,r3
   19f94:	e0fffb17 	ldw	r3,-20(fp)
   19f98:	1884b03a 	or	r2,r3,r2
   19f9c:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   19fa0:	e0bffc17 	ldw	r2,-16(fp)
   19fa4:	10c00b17 	ldw	r3,44(r2)
   19fa8:	e0bffb17 	ldw	r2,-20(fp)
   19fac:	1885883a 	add	r2,r3,r2
   19fb0:	1007883a 	mov	r3,r2
   19fb4:	e0bffd03 	ldbu	r2,-12(fp)
   19fb8:	18800025 	stbio	r2,0(r3)

	return 0;
   19fbc:	0005883a 	mov	r2,zero
}
   19fc0:	e037883a 	mov	sp,fp
   19fc4:	df000017 	ldw	fp,0(sp)
   19fc8:	dec00104 	addi	sp,sp,4
   19fcc:	f800283a 	ret

00019fd0 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   19fd0:	defffa04 	addi	sp,sp,-24
   19fd4:	df000515 	stw	fp,20(sp)
   19fd8:	df000504 	addi	fp,sp,20
   19fdc:	e13ffc15 	stw	r4,-16(fp)
   19fe0:	e17ffd15 	stw	r5,-12(fp)
   19fe4:	e1bffe15 	stw	r6,-8(fp)
   19fe8:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   19fec:	e0bffc17 	ldw	r2,-16(fp)
   19ff0:	10800c17 	ldw	r2,48(r2)
   19ff4:	e0fffe17 	ldw	r3,-8(fp)
   19ff8:	1880042e 	bgeu	r3,r2,1a00c <alt_up_char_buffer_string+0x3c>
   19ffc:	e0bffc17 	ldw	r2,-16(fp)
   1a000:	10800d17 	ldw	r2,52(r2)
   1a004:	e0ffff17 	ldw	r3,-4(fp)
   1a008:	18800236 	bltu	r3,r2,1a014 <alt_up_char_buffer_string+0x44>
		return -1;
   1a00c:	00bfffc4 	movi	r2,-1
   1a010:	00002b06 	br	1a0c0 <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   1a014:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   1a018:	e0bffc17 	ldw	r2,-16(fp)
   1a01c:	10801017 	ldw	r2,64(r2)
   1a020:	1007883a 	mov	r3,r2
   1a024:	e0bfff17 	ldw	r2,-4(fp)
   1a028:	10c6983a 	sll	r3,r2,r3
   1a02c:	e0bffe17 	ldw	r2,-8(fp)
   1a030:	1885883a 	add	r2,r3,r2
   1a034:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   1a038:	00001a06 	br	1a0a4 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   1a03c:	e0bffc17 	ldw	r2,-16(fp)
   1a040:	10c00b17 	ldw	r3,44(r2)
   1a044:	e0bffb17 	ldw	r2,-20(fp)
   1a048:	1885883a 	add	r2,r3,r2
   1a04c:	1007883a 	mov	r3,r2
   1a050:	e0bffd17 	ldw	r2,-12(fp)
   1a054:	10800003 	ldbu	r2,0(r2)
   1a058:	10803fcc 	andi	r2,r2,255
   1a05c:	1080201c 	xori	r2,r2,128
   1a060:	10bfe004 	addi	r2,r2,-128
   1a064:	18800025 	stbio	r2,0(r3)
		++ptr;
   1a068:	e0bffd17 	ldw	r2,-12(fp)
   1a06c:	10800044 	addi	r2,r2,1
   1a070:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   1a074:	e0bffe17 	ldw	r2,-8(fp)
   1a078:	10800044 	addi	r2,r2,1
   1a07c:	e0bffe15 	stw	r2,-8(fp)
   1a080:	e0bffc17 	ldw	r2,-16(fp)
   1a084:	10800c17 	ldw	r2,48(r2)
   1a088:	e0fffe17 	ldw	r3,-8(fp)
   1a08c:	18800236 	bltu	r3,r2,1a098 <alt_up_char_buffer_string+0xc8>
			return -1;
   1a090:	00bfffc4 	movi	r2,-1
   1a094:	00000a06 	br	1a0c0 <alt_up_char_buffer_string+0xf0>
		++offset;
   1a098:	e0bffb17 	ldw	r2,-20(fp)
   1a09c:	10800044 	addi	r2,r2,1
   1a0a0:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   1a0a4:	e0bffd17 	ldw	r2,-12(fp)
   1a0a8:	10800003 	ldbu	r2,0(r2)
   1a0ac:	10803fcc 	andi	r2,r2,255
   1a0b0:	1080201c 	xori	r2,r2,128
   1a0b4:	10bfe004 	addi	r2,r2,-128
   1a0b8:	103fe01e 	bne	r2,zero,1a03c <__alt_mem_Flash_flash_data+0xf401a03c>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   1a0bc:	0005883a 	mov	r2,zero
}
   1a0c0:	e037883a 	mov	sp,fp
   1a0c4:	df000017 	ldw	fp,0(sp)
   1a0c8:	dec00104 	addi	sp,sp,4
   1a0cc:	f800283a 	ret

0001a0d0 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   1a0d0:	defffe04 	addi	sp,sp,-8
   1a0d4:	df000115 	stw	fp,4(sp)
   1a0d8:	df000104 	addi	fp,sp,4
   1a0dc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   1a0e0:	e0bfff17 	ldw	r2,-4(fp)
   1a0e4:	10800a17 	ldw	r2,40(r2)
   1a0e8:	10800084 	addi	r2,r2,2
   1a0ec:	1007883a 	mov	r3,r2
   1a0f0:	00800044 	movi	r2,1
   1a0f4:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   1a0f8:	0001883a 	nop
   1a0fc:	e0bfff17 	ldw	r2,-4(fp)
   1a100:	10800a17 	ldw	r2,40(r2)
   1a104:	10800084 	addi	r2,r2,2
   1a108:	10800023 	ldbuio	r2,0(r2)
   1a10c:	10803fcc 	andi	r2,r2,255
   1a110:	1080004c 	andi	r2,r2,1
   1a114:	103ff91e 	bne	r2,zero,1a0fc <__alt_mem_Flash_flash_data+0xf401a0fc>
	return 0;
   1a118:	0005883a 	mov	r2,zero
}
   1a11c:	e037883a 	mov	sp,fp
   1a120:	df000017 	ldw	fp,0(sp)
   1a124:	dec00104 	addi	sp,sp,4
   1a128:	f800283a 	ret

0001a12c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1a12c:	defff504 	addi	sp,sp,-44
   1a130:	df000a15 	stw	fp,40(sp)
   1a134:	df000a04 	addi	fp,sp,40
   1a138:	e13ffc15 	stw	r4,-16(fp)
   1a13c:	e17ffd15 	stw	r5,-12(fp)
   1a140:	e1bffe15 	stw	r6,-8(fp)
   1a144:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1a148:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1a14c:	008000b4 	movhi	r2,2
   1a150:	10bf4304 	addi	r2,r2,-756
   1a154:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1a158:	10003f26 	beq	r2,zero,1a258 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1a15c:	e0bffc17 	ldw	r2,-16(fp)
   1a160:	10003b26 	beq	r2,zero,1a250 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1a164:	e0bffc17 	ldw	r2,-16(fp)
   1a168:	e0fffe17 	ldw	r3,-8(fp)
   1a16c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1a170:	e0bffc17 	ldw	r2,-16(fp)
   1a174:	e0ffff17 	ldw	r3,-4(fp)
   1a178:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a17c:	0005303a 	rdctl	r2,status
   1a180:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a184:	e0fff817 	ldw	r3,-32(fp)
   1a188:	00bfff84 	movi	r2,-2
   1a18c:	1884703a 	and	r2,r3,r2
   1a190:	1001703a 	wrctl	status,r2
  
  return context;
   1a194:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1a198:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1a19c:	008000b4 	movhi	r2,2
   1a1a0:	10bf4404 	addi	r2,r2,-752
   1a1a4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1a1a8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1a1ac:	e0fffd17 	ldw	r3,-12(fp)
   1a1b0:	e0bff617 	ldw	r2,-40(fp)
   1a1b4:	1885883a 	add	r2,r3,r2
   1a1b8:	10c00044 	addi	r3,r2,1
   1a1bc:	e0bffc17 	ldw	r2,-16(fp)
   1a1c0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1a1c4:	e0bffc17 	ldw	r2,-16(fp)
   1a1c8:	10c00217 	ldw	r3,8(r2)
   1a1cc:	e0bff617 	ldw	r2,-40(fp)
   1a1d0:	1880042e 	bgeu	r3,r2,1a1e4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1a1d4:	e0bffc17 	ldw	r2,-16(fp)
   1a1d8:	00c00044 	movi	r3,1
   1a1dc:	10c00405 	stb	r3,16(r2)
   1a1e0:	00000206 	br	1a1ec <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1a1e4:	e0bffc17 	ldw	r2,-16(fp)
   1a1e8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1a1ec:	e0fffc17 	ldw	r3,-16(fp)
   1a1f0:	008000b4 	movhi	r2,2
   1a1f4:	10b73b04 	addi	r2,r2,-8980
   1a1f8:	e0bff915 	stw	r2,-28(fp)
   1a1fc:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1a200:	e0bffa17 	ldw	r2,-24(fp)
   1a204:	e0fff917 	ldw	r3,-28(fp)
   1a208:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1a20c:	e0bff917 	ldw	r2,-28(fp)
   1a210:	10c00017 	ldw	r3,0(r2)
   1a214:	e0bffa17 	ldw	r2,-24(fp)
   1a218:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1a21c:	e0bff917 	ldw	r2,-28(fp)
   1a220:	10800017 	ldw	r2,0(r2)
   1a224:	e0fffa17 	ldw	r3,-24(fp)
   1a228:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1a22c:	e0bff917 	ldw	r2,-28(fp)
   1a230:	e0fffa17 	ldw	r3,-24(fp)
   1a234:	10c00015 	stw	r3,0(r2)
   1a238:	e0bff717 	ldw	r2,-36(fp)
   1a23c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a240:	e0bffb17 	ldw	r2,-20(fp)
   1a244:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1a248:	0005883a 	mov	r2,zero
   1a24c:	00000306 	br	1a25c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1a250:	00bffa84 	movi	r2,-22
   1a254:	00000106 	br	1a25c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1a258:	00bfde84 	movi	r2,-134
  }
}
   1a25c:	e037883a 	mov	sp,fp
   1a260:	df000017 	ldw	fp,0(sp)
   1a264:	dec00104 	addi	sp,sp,4
   1a268:	f800283a 	ret

0001a26c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1a26c:	deffff04 	addi	sp,sp,-4
   1a270:	df000015 	stw	fp,0(sp)
   1a274:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1a278:	e037883a 	mov	sp,fp
   1a27c:	df000017 	ldw	fp,0(sp)
   1a280:	dec00104 	addi	sp,sp,4
   1a284:	f800283a 	ret

0001a288 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a288:	defffe04 	addi	sp,sp,-8
   1a28c:	dfc00115 	stw	ra,4(sp)
   1a290:	df000015 	stw	fp,0(sp)
   1a294:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a298:	008000b4 	movhi	r2,2
   1a29c:	10b71904 	addi	r2,r2,-9116
   1a2a0:	10800017 	ldw	r2,0(r2)
   1a2a4:	10000526 	beq	r2,zero,1a2bc <alt_get_errno+0x34>
   1a2a8:	008000b4 	movhi	r2,2
   1a2ac:	10b71904 	addi	r2,r2,-9116
   1a2b0:	10800017 	ldw	r2,0(r2)
   1a2b4:	103ee83a 	callr	r2
   1a2b8:	00000206 	br	1a2c4 <alt_get_errno+0x3c>
   1a2bc:	008000b4 	movhi	r2,2
   1a2c0:	10bf2504 	addi	r2,r2,-876
}
   1a2c4:	e037883a 	mov	sp,fp
   1a2c8:	dfc00117 	ldw	ra,4(sp)
   1a2cc:	df000017 	ldw	fp,0(sp)
   1a2d0:	dec00204 	addi	sp,sp,8
   1a2d4:	f800283a 	ret

0001a2d8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1a2d8:	defffa04 	addi	sp,sp,-24
   1a2dc:	dfc00515 	stw	ra,20(sp)
   1a2e0:	df000415 	stw	fp,16(sp)
   1a2e4:	df000404 	addi	fp,sp,16
   1a2e8:	e13ffe15 	stw	r4,-8(fp)
   1a2ec:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1a2f0:	e0bffe17 	ldw	r2,-8(fp)
   1a2f4:	10000326 	beq	r2,zero,1a304 <alt_dev_llist_insert+0x2c>
   1a2f8:	e0bffe17 	ldw	r2,-8(fp)
   1a2fc:	10800217 	ldw	r2,8(r2)
   1a300:	1000061e 	bne	r2,zero,1a31c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1a304:	001a2880 	call	1a288 <alt_get_errno>
   1a308:	1007883a 	mov	r3,r2
   1a30c:	00800584 	movi	r2,22
   1a310:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1a314:	00bffa84 	movi	r2,-22
   1a318:	00001306 	br	1a368 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1a31c:	e0bffe17 	ldw	r2,-8(fp)
   1a320:	e0ffff17 	ldw	r3,-4(fp)
   1a324:	e0fffc15 	stw	r3,-16(fp)
   1a328:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1a32c:	e0bffd17 	ldw	r2,-12(fp)
   1a330:	e0fffc17 	ldw	r3,-16(fp)
   1a334:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1a338:	e0bffc17 	ldw	r2,-16(fp)
   1a33c:	10c00017 	ldw	r3,0(r2)
   1a340:	e0bffd17 	ldw	r2,-12(fp)
   1a344:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1a348:	e0bffc17 	ldw	r2,-16(fp)
   1a34c:	10800017 	ldw	r2,0(r2)
   1a350:	e0fffd17 	ldw	r3,-12(fp)
   1a354:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1a358:	e0bffc17 	ldw	r2,-16(fp)
   1a35c:	e0fffd17 	ldw	r3,-12(fp)
   1a360:	10c00015 	stw	r3,0(r2)

  return 0;  
   1a364:	0005883a 	mov	r2,zero
}
   1a368:	e037883a 	mov	sp,fp
   1a36c:	dfc00117 	ldw	ra,4(sp)
   1a370:	df000017 	ldw	fp,0(sp)
   1a374:	dec00204 	addi	sp,sp,8
   1a378:	f800283a 	ret

0001a37c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1a37c:	defffd04 	addi	sp,sp,-12
   1a380:	dfc00215 	stw	ra,8(sp)
   1a384:	df000115 	stw	fp,4(sp)
   1a388:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1a38c:	008000b4 	movhi	r2,2
   1a390:	10ad8804 	addi	r2,r2,-18912
   1a394:	e0bfff15 	stw	r2,-4(fp)
   1a398:	00000606 	br	1a3b4 <_do_ctors+0x38>
        (*ctor) (); 
   1a39c:	e0bfff17 	ldw	r2,-4(fp)
   1a3a0:	10800017 	ldw	r2,0(r2)
   1a3a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1a3a8:	e0bfff17 	ldw	r2,-4(fp)
   1a3ac:	10bfff04 	addi	r2,r2,-4
   1a3b0:	e0bfff15 	stw	r2,-4(fp)
   1a3b4:	e0ffff17 	ldw	r3,-4(fp)
   1a3b8:	008000b4 	movhi	r2,2
   1a3bc:	10ad8904 	addi	r2,r2,-18908
   1a3c0:	18bff62e 	bgeu	r3,r2,1a39c <__alt_mem_Flash_flash_data+0xf401a39c>
        (*ctor) (); 
}
   1a3c4:	e037883a 	mov	sp,fp
   1a3c8:	dfc00117 	ldw	ra,4(sp)
   1a3cc:	df000017 	ldw	fp,0(sp)
   1a3d0:	dec00204 	addi	sp,sp,8
   1a3d4:	f800283a 	ret

0001a3d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1a3d8:	defffd04 	addi	sp,sp,-12
   1a3dc:	dfc00215 	stw	ra,8(sp)
   1a3e0:	df000115 	stw	fp,4(sp)
   1a3e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1a3e8:	008000b4 	movhi	r2,2
   1a3ec:	10ad8804 	addi	r2,r2,-18912
   1a3f0:	e0bfff15 	stw	r2,-4(fp)
   1a3f4:	00000606 	br	1a410 <_do_dtors+0x38>
        (*dtor) (); 
   1a3f8:	e0bfff17 	ldw	r2,-4(fp)
   1a3fc:	10800017 	ldw	r2,0(r2)
   1a400:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1a404:	e0bfff17 	ldw	r2,-4(fp)
   1a408:	10bfff04 	addi	r2,r2,-4
   1a40c:	e0bfff15 	stw	r2,-4(fp)
   1a410:	e0ffff17 	ldw	r3,-4(fp)
   1a414:	008000b4 	movhi	r2,2
   1a418:	10ad8904 	addi	r2,r2,-18908
   1a41c:	18bff62e 	bgeu	r3,r2,1a3f8 <__alt_mem_Flash_flash_data+0xf401a3f8>
        (*dtor) (); 
}
   1a420:	e037883a 	mov	sp,fp
   1a424:	dfc00117 	ldw	ra,4(sp)
   1a428:	df000017 	ldw	fp,0(sp)
   1a42c:	dec00204 	addi	sp,sp,8
   1a430:	f800283a 	ret

0001a434 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1a434:	defffa04 	addi	sp,sp,-24
   1a438:	dfc00515 	stw	ra,20(sp)
   1a43c:	df000415 	stw	fp,16(sp)
   1a440:	df000404 	addi	fp,sp,16
   1a444:	e13ffe15 	stw	r4,-8(fp)
   1a448:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1a44c:	e0bfff17 	ldw	r2,-4(fp)
   1a450:	10800017 	ldw	r2,0(r2)
   1a454:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1a458:	e13ffe17 	ldw	r4,-8(fp)
   1a45c:	00021840 	call	2184 <strlen>
   1a460:	10800044 	addi	r2,r2,1
   1a464:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1a468:	00000d06 	br	1a4a0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1a46c:	e0bffc17 	ldw	r2,-16(fp)
   1a470:	10c00217 	ldw	r3,8(r2)
   1a474:	e0bffd17 	ldw	r2,-12(fp)
   1a478:	1809883a 	mov	r4,r3
   1a47c:	e17ffe17 	ldw	r5,-8(fp)
   1a480:	100d883a 	mov	r6,r2
   1a484:	001b2c40 	call	1b2c4 <memcmp>
   1a488:	1000021e 	bne	r2,zero,1a494 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1a48c:	e0bffc17 	ldw	r2,-16(fp)
   1a490:	00000706 	br	1a4b0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1a494:	e0bffc17 	ldw	r2,-16(fp)
   1a498:	10800017 	ldw	r2,0(r2)
   1a49c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1a4a0:	e0fffc17 	ldw	r3,-16(fp)
   1a4a4:	e0bfff17 	ldw	r2,-4(fp)
   1a4a8:	18bff01e 	bne	r3,r2,1a46c <__alt_mem_Flash_flash_data+0xf401a46c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1a4ac:	0005883a 	mov	r2,zero
}
   1a4b0:	e037883a 	mov	sp,fp
   1a4b4:	dfc00117 	ldw	ra,4(sp)
   1a4b8:	df000017 	ldw	fp,0(sp)
   1a4bc:	dec00204 	addi	sp,sp,8
   1a4c0:	f800283a 	ret

0001a4c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1a4c4:	defffe04 	addi	sp,sp,-8
   1a4c8:	dfc00115 	stw	ra,4(sp)
   1a4cc:	df000015 	stw	fp,0(sp)
   1a4d0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1a4d4:	0009883a 	mov	r4,zero
   1a4d8:	01440004 	movi	r5,4096
   1a4dc:	001b1500 	call	1b150 <alt_icache_flush>
#endif
}
   1a4e0:	e037883a 	mov	sp,fp
   1a4e4:	dfc00117 	ldw	ra,4(sp)
   1a4e8:	df000017 	ldw	fp,0(sp)
   1a4ec:	dec00204 	addi	sp,sp,8
   1a4f0:	f800283a 	ret

0001a4f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1a4f4:	defff904 	addi	sp,sp,-28
   1a4f8:	dfc00615 	stw	ra,24(sp)
   1a4fc:	df000515 	stw	fp,20(sp)
   1a500:	df000504 	addi	fp,sp,20
   1a504:	e13ffc15 	stw	r4,-16(fp)
   1a508:	e17ffd15 	stw	r5,-12(fp)
   1a50c:	e1bffe15 	stw	r6,-8(fp)
   1a510:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1a514:	e13ffd17 	ldw	r4,-12(fp)
   1a518:	e17ffe17 	ldw	r5,-8(fp)
   1a51c:	e1bfff17 	ldw	r6,-4(fp)
   1a520:	001a8f80 	call	1a8f8 <open>
   1a524:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1a528:	e0bffb17 	ldw	r2,-20(fp)
   1a52c:	10001c16 	blt	r2,zero,1a5a0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1a530:	008000b4 	movhi	r2,2
   1a534:	10b1a604 	addi	r2,r2,-14696
   1a538:	e0fffb17 	ldw	r3,-20(fp)
   1a53c:	18c00324 	muli	r3,r3,12
   1a540:	10c5883a 	add	r2,r2,r3
   1a544:	10c00017 	ldw	r3,0(r2)
   1a548:	e0bffc17 	ldw	r2,-16(fp)
   1a54c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1a550:	008000b4 	movhi	r2,2
   1a554:	10b1a604 	addi	r2,r2,-14696
   1a558:	e0fffb17 	ldw	r3,-20(fp)
   1a55c:	18c00324 	muli	r3,r3,12
   1a560:	18c00104 	addi	r3,r3,4
   1a564:	10c5883a 	add	r2,r2,r3
   1a568:	10c00017 	ldw	r3,0(r2)
   1a56c:	e0bffc17 	ldw	r2,-16(fp)
   1a570:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1a574:	008000b4 	movhi	r2,2
   1a578:	10b1a604 	addi	r2,r2,-14696
   1a57c:	e0fffb17 	ldw	r3,-20(fp)
   1a580:	18c00324 	muli	r3,r3,12
   1a584:	18c00204 	addi	r3,r3,8
   1a588:	10c5883a 	add	r2,r2,r3
   1a58c:	10c00017 	ldw	r3,0(r2)
   1a590:	e0bffc17 	ldw	r2,-16(fp)
   1a594:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1a598:	e13ffb17 	ldw	r4,-20(fp)
   1a59c:	000eb880 	call	eb88 <alt_release_fd>
  }
} 
   1a5a0:	e037883a 	mov	sp,fp
   1a5a4:	dfc00117 	ldw	ra,4(sp)
   1a5a8:	df000017 	ldw	fp,0(sp)
   1a5ac:	dec00204 	addi	sp,sp,8
   1a5b0:	f800283a 	ret

0001a5b4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1a5b4:	defffb04 	addi	sp,sp,-20
   1a5b8:	dfc00415 	stw	ra,16(sp)
   1a5bc:	df000315 	stw	fp,12(sp)
   1a5c0:	df000304 	addi	fp,sp,12
   1a5c4:	e13ffd15 	stw	r4,-12(fp)
   1a5c8:	e17ffe15 	stw	r5,-8(fp)
   1a5cc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1a5d0:	010000b4 	movhi	r4,2
   1a5d4:	2131a904 	addi	r4,r4,-14684
   1a5d8:	e17ffd17 	ldw	r5,-12(fp)
   1a5dc:	01800044 	movi	r6,1
   1a5e0:	01c07fc4 	movi	r7,511
   1a5e4:	001a4f40 	call	1a4f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1a5e8:	010000b4 	movhi	r4,2
   1a5ec:	2131a604 	addi	r4,r4,-14696
   1a5f0:	e17ffe17 	ldw	r5,-8(fp)
   1a5f4:	000d883a 	mov	r6,zero
   1a5f8:	01c07fc4 	movi	r7,511
   1a5fc:	001a4f40 	call	1a4f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1a600:	010000b4 	movhi	r4,2
   1a604:	2131ac04 	addi	r4,r4,-14672
   1a608:	e17fff17 	ldw	r5,-4(fp)
   1a60c:	01800044 	movi	r6,1
   1a610:	01c07fc4 	movi	r7,511
   1a614:	001a4f40 	call	1a4f4 <alt_open_fd>
}  
   1a618:	e037883a 	mov	sp,fp
   1a61c:	dfc00117 	ldw	ra,4(sp)
   1a620:	df000017 	ldw	fp,0(sp)
   1a624:	dec00204 	addi	sp,sp,8
   1a628:	f800283a 	ret

0001a62c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1a62c:	defff004 	addi	sp,sp,-64
   1a630:	df000f15 	stw	fp,60(sp)
   1a634:	df000f04 	addi	fp,sp,60
   1a638:	e13ffd15 	stw	r4,-12(fp)
   1a63c:	e17ffe15 	stw	r5,-8(fp)
   1a640:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1a644:	00bffa84 	movi	r2,-22
   1a648:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1a64c:	e0bffd17 	ldw	r2,-12(fp)
   1a650:	10800828 	cmpgeui	r2,r2,32
   1a654:	10005c1e 	bne	r2,zero,1a7c8 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a658:	0005303a 	rdctl	r2,status
   1a65c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a660:	e0fff317 	ldw	r3,-52(fp)
   1a664:	00bfff84 	movi	r2,-2
   1a668:	1884703a 	and	r2,r3,r2
   1a66c:	1001703a 	wrctl	status,r2
  
  return context;
   1a670:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1a674:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   1a678:	008000f4 	movhi	r2,3
   1a67c:	10b5cd04 	addi	r2,r2,-10444
   1a680:	e0fffd17 	ldw	r3,-12(fp)
   1a684:	180690fa 	slli	r3,r3,3
   1a688:	10c5883a 	add	r2,r2,r3
   1a68c:	e0ffff17 	ldw	r3,-4(fp)
   1a690:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1a694:	008000f4 	movhi	r2,3
   1a698:	10b5cd04 	addi	r2,r2,-10444
   1a69c:	e0fffd17 	ldw	r3,-12(fp)
   1a6a0:	180690fa 	slli	r3,r3,3
   1a6a4:	18c00104 	addi	r3,r3,4
   1a6a8:	10c5883a 	add	r2,r2,r3
   1a6ac:	e0fffe17 	ldw	r3,-8(fp)
   1a6b0:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1a6b4:	e0bfff17 	ldw	r2,-4(fp)
   1a6b8:	10001f26 	beq	r2,zero,1a738 <alt_irq_register+0x10c>
   1a6bc:	e0bffd17 	ldw	r2,-12(fp)
   1a6c0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a6c4:	0005303a 	rdctl	r2,status
   1a6c8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a6cc:	e0fff517 	ldw	r3,-44(fp)
   1a6d0:	00bfff84 	movi	r2,-2
   1a6d4:	1884703a 	and	r2,r3,r2
   1a6d8:	1001703a 	wrctl	status,r2
  
  return context;
   1a6dc:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1a6e0:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   1a6e4:	e0bff417 	ldw	r2,-48(fp)
   1a6e8:	00c00044 	movi	r3,1
   1a6ec:	1884983a 	sll	r2,r3,r2
   1a6f0:	1007883a 	mov	r3,r2
   1a6f4:	008000b4 	movhi	r2,2
   1a6f8:	10bf4204 	addi	r2,r2,-760
   1a6fc:	10800017 	ldw	r2,0(r2)
   1a700:	1886b03a 	or	r3,r3,r2
   1a704:	008000b4 	movhi	r2,2
   1a708:	10bf4204 	addi	r2,r2,-760
   1a70c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1a710:	008000b4 	movhi	r2,2
   1a714:	10bf4204 	addi	r2,r2,-760
   1a718:	10800017 	ldw	r2,0(r2)
   1a71c:	100170fa 	wrctl	ienable,r2
   1a720:	e0bff617 	ldw	r2,-40(fp)
   1a724:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a728:	e0bff717 	ldw	r2,-36(fp)
   1a72c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1a730:	0005883a 	mov	r2,zero
   1a734:	00001f06 	br	1a7b4 <alt_irq_register+0x188>
   1a738:	e0bffd17 	ldw	r2,-12(fp)
   1a73c:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a740:	0005303a 	rdctl	r2,status
   1a744:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a748:	e0fff917 	ldw	r3,-28(fp)
   1a74c:	00bfff84 	movi	r2,-2
   1a750:	1884703a 	and	r2,r3,r2
   1a754:	1001703a 	wrctl	status,r2
  
  return context;
   1a758:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1a75c:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   1a760:	e0bff817 	ldw	r2,-32(fp)
   1a764:	00c00044 	movi	r3,1
   1a768:	1884983a 	sll	r2,r3,r2
   1a76c:	0084303a 	nor	r2,zero,r2
   1a770:	1007883a 	mov	r3,r2
   1a774:	008000b4 	movhi	r2,2
   1a778:	10bf4204 	addi	r2,r2,-760
   1a77c:	10800017 	ldw	r2,0(r2)
   1a780:	1886703a 	and	r3,r3,r2
   1a784:	008000b4 	movhi	r2,2
   1a788:	10bf4204 	addi	r2,r2,-760
   1a78c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1a790:	008000b4 	movhi	r2,2
   1a794:	10bf4204 	addi	r2,r2,-760
   1a798:	10800017 	ldw	r2,0(r2)
   1a79c:	100170fa 	wrctl	ienable,r2
   1a7a0:	e0bffa17 	ldw	r2,-24(fp)
   1a7a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a7a8:	e0bffb17 	ldw	r2,-20(fp)
   1a7ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1a7b0:	0005883a 	mov	r2,zero
   1a7b4:	e0bff115 	stw	r2,-60(fp)
   1a7b8:	e0bff217 	ldw	r2,-56(fp)
   1a7bc:	e0bffc15 	stw	r2,-16(fp)
   1a7c0:	e0bffc17 	ldw	r2,-16(fp)
   1a7c4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1a7c8:	e0bff117 	ldw	r2,-60(fp)
}
   1a7cc:	e037883a 	mov	sp,fp
   1a7d0:	df000017 	ldw	fp,0(sp)
   1a7d4:	dec00104 	addi	sp,sp,4
   1a7d8:	f800283a 	ret

0001a7dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a7dc:	defffe04 	addi	sp,sp,-8
   1a7e0:	dfc00115 	stw	ra,4(sp)
   1a7e4:	df000015 	stw	fp,0(sp)
   1a7e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a7ec:	008000b4 	movhi	r2,2
   1a7f0:	10b71904 	addi	r2,r2,-9116
   1a7f4:	10800017 	ldw	r2,0(r2)
   1a7f8:	10000526 	beq	r2,zero,1a810 <alt_get_errno+0x34>
   1a7fc:	008000b4 	movhi	r2,2
   1a800:	10b71904 	addi	r2,r2,-9116
   1a804:	10800017 	ldw	r2,0(r2)
   1a808:	103ee83a 	callr	r2
   1a80c:	00000206 	br	1a818 <alt_get_errno+0x3c>
   1a810:	008000b4 	movhi	r2,2
   1a814:	10bf2504 	addi	r2,r2,-876
}
   1a818:	e037883a 	mov	sp,fp
   1a81c:	dfc00117 	ldw	ra,4(sp)
   1a820:	df000017 	ldw	fp,0(sp)
   1a824:	dec00204 	addi	sp,sp,8
   1a828:	f800283a 	ret

0001a82c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1a82c:	defffd04 	addi	sp,sp,-12
   1a830:	df000215 	stw	fp,8(sp)
   1a834:	df000204 	addi	fp,sp,8
   1a838:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1a83c:	e0bfff17 	ldw	r2,-4(fp)
   1a840:	10800217 	ldw	r2,8(r2)
   1a844:	10d00034 	orhi	r3,r2,16384
   1a848:	e0bfff17 	ldw	r2,-4(fp)
   1a84c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1a850:	e03ffe15 	stw	zero,-8(fp)
   1a854:	00001d06 	br	1a8cc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1a858:	008000b4 	movhi	r2,2
   1a85c:	10b1a604 	addi	r2,r2,-14696
   1a860:	e0fffe17 	ldw	r3,-8(fp)
   1a864:	18c00324 	muli	r3,r3,12
   1a868:	10c5883a 	add	r2,r2,r3
   1a86c:	10c00017 	ldw	r3,0(r2)
   1a870:	e0bfff17 	ldw	r2,-4(fp)
   1a874:	10800017 	ldw	r2,0(r2)
   1a878:	1880111e 	bne	r3,r2,1a8c0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1a87c:	008000b4 	movhi	r2,2
   1a880:	10b1a604 	addi	r2,r2,-14696
   1a884:	e0fffe17 	ldw	r3,-8(fp)
   1a888:	18c00324 	muli	r3,r3,12
   1a88c:	18c00204 	addi	r3,r3,8
   1a890:	10c5883a 	add	r2,r2,r3
   1a894:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1a898:	1000090e 	bge	r2,zero,1a8c0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1a89c:	e0bffe17 	ldw	r2,-8(fp)
   1a8a0:	10c00324 	muli	r3,r2,12
   1a8a4:	008000b4 	movhi	r2,2
   1a8a8:	10b1a604 	addi	r2,r2,-14696
   1a8ac:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1a8b0:	e0bfff17 	ldw	r2,-4(fp)
   1a8b4:	18800226 	beq	r3,r2,1a8c0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1a8b8:	00bffcc4 	movi	r2,-13
   1a8bc:	00000a06 	br	1a8e8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1a8c0:	e0bffe17 	ldw	r2,-8(fp)
   1a8c4:	10800044 	addi	r2,r2,1
   1a8c8:	e0bffe15 	stw	r2,-8(fp)
   1a8cc:	008000b4 	movhi	r2,2
   1a8d0:	10b71804 	addi	r2,r2,-9120
   1a8d4:	10800017 	ldw	r2,0(r2)
   1a8d8:	1007883a 	mov	r3,r2
   1a8dc:	e0bffe17 	ldw	r2,-8(fp)
   1a8e0:	18bfdd2e 	bgeu	r3,r2,1a858 <__alt_mem_Flash_flash_data+0xf401a858>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1a8e4:	0005883a 	mov	r2,zero
}
   1a8e8:	e037883a 	mov	sp,fp
   1a8ec:	df000017 	ldw	fp,0(sp)
   1a8f0:	dec00104 	addi	sp,sp,4
   1a8f4:	f800283a 	ret

0001a8f8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1a8f8:	defff604 	addi	sp,sp,-40
   1a8fc:	dfc00915 	stw	ra,36(sp)
   1a900:	df000815 	stw	fp,32(sp)
   1a904:	df000804 	addi	fp,sp,32
   1a908:	e13ffd15 	stw	r4,-12(fp)
   1a90c:	e17ffe15 	stw	r5,-8(fp)
   1a910:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1a914:	00bfffc4 	movi	r2,-1
   1a918:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1a91c:	00bffb44 	movi	r2,-19
   1a920:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1a924:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1a928:	e13ffd17 	ldw	r4,-12(fp)
   1a92c:	014000b4 	movhi	r5,2
   1a930:	29771604 	addi	r5,r5,-9128
   1a934:	001a4340 	call	1a434 <alt_find_dev>
   1a938:	e0bff815 	stw	r2,-32(fp)
   1a93c:	e0bff817 	ldw	r2,-32(fp)
   1a940:	1000051e 	bne	r2,zero,1a958 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1a944:	e13ffd17 	ldw	r4,-12(fp)
   1a948:	001af400 	call	1af40 <alt_find_file>
   1a94c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1a950:	00800044 	movi	r2,1
   1a954:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1a958:	e0bff817 	ldw	r2,-32(fp)
   1a95c:	10002926 	beq	r2,zero,1aa04 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1a960:	e13ff817 	ldw	r4,-32(fp)
   1a964:	001b0540 	call	1b054 <alt_get_fd>
   1a968:	e0bff915 	stw	r2,-28(fp)
   1a96c:	e0bff917 	ldw	r2,-28(fp)
   1a970:	1000030e 	bge	r2,zero,1a980 <open+0x88>
    {
      status = index;
   1a974:	e0bff917 	ldw	r2,-28(fp)
   1a978:	e0bffa15 	stw	r2,-24(fp)
   1a97c:	00002306 	br	1aa0c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   1a980:	e0bff917 	ldw	r2,-28(fp)
   1a984:	10c00324 	muli	r3,r2,12
   1a988:	008000b4 	movhi	r2,2
   1a98c:	10b1a604 	addi	r2,r2,-14696
   1a990:	1885883a 	add	r2,r3,r2
   1a994:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1a998:	e0fffe17 	ldw	r3,-8(fp)
   1a99c:	00900034 	movhi	r2,16384
   1a9a0:	10bfffc4 	addi	r2,r2,-1
   1a9a4:	1886703a 	and	r3,r3,r2
   1a9a8:	e0bffc17 	ldw	r2,-16(fp)
   1a9ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1a9b0:	e0bffb17 	ldw	r2,-20(fp)
   1a9b4:	1000051e 	bne	r2,zero,1a9cc <open+0xd4>
   1a9b8:	e13ffc17 	ldw	r4,-16(fp)
   1a9bc:	001a82c0 	call	1a82c <alt_file_locked>
   1a9c0:	e0bffa15 	stw	r2,-24(fp)
   1a9c4:	e0bffa17 	ldw	r2,-24(fp)
   1a9c8:	10001016 	blt	r2,zero,1aa0c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1a9cc:	e0bff817 	ldw	r2,-32(fp)
   1a9d0:	10800317 	ldw	r2,12(r2)
   1a9d4:	10000826 	beq	r2,zero,1a9f8 <open+0x100>
   1a9d8:	e0bff817 	ldw	r2,-32(fp)
   1a9dc:	10800317 	ldw	r2,12(r2)
   1a9e0:	e13ffc17 	ldw	r4,-16(fp)
   1a9e4:	e17ffd17 	ldw	r5,-12(fp)
   1a9e8:	e1bffe17 	ldw	r6,-8(fp)
   1a9ec:	e1ffff17 	ldw	r7,-4(fp)
   1a9f0:	103ee83a 	callr	r2
   1a9f4:	00000106 	br	1a9fc <open+0x104>
   1a9f8:	0005883a 	mov	r2,zero
   1a9fc:	e0bffa15 	stw	r2,-24(fp)
   1aa00:	00000206 	br	1aa0c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1aa04:	00bffb44 	movi	r2,-19
   1aa08:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1aa0c:	e0bffa17 	ldw	r2,-24(fp)
   1aa10:	1000090e 	bge	r2,zero,1aa38 <open+0x140>
  {
    alt_release_fd (index);  
   1aa14:	e13ff917 	ldw	r4,-28(fp)
   1aa18:	000eb880 	call	eb88 <alt_release_fd>
    ALT_ERRNO = -status;
   1aa1c:	001a7dc0 	call	1a7dc <alt_get_errno>
   1aa20:	1007883a 	mov	r3,r2
   1aa24:	e0bffa17 	ldw	r2,-24(fp)
   1aa28:	0085c83a 	sub	r2,zero,r2
   1aa2c:	18800015 	stw	r2,0(r3)
    return -1;
   1aa30:	00bfffc4 	movi	r2,-1
   1aa34:	00000106 	br	1aa3c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   1aa38:	e0bff917 	ldw	r2,-28(fp)
}
   1aa3c:	e037883a 	mov	sp,fp
   1aa40:	dfc00117 	ldw	ra,4(sp)
   1aa44:	df000017 	ldw	fp,0(sp)
   1aa48:	dec00204 	addi	sp,sp,8
   1aa4c:	f800283a 	ret

0001aa50 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1aa50:	defffa04 	addi	sp,sp,-24
   1aa54:	df000515 	stw	fp,20(sp)
   1aa58:	df000504 	addi	fp,sp,20
   1aa5c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aa60:	0005303a 	rdctl	r2,status
   1aa64:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aa68:	e0fffc17 	ldw	r3,-16(fp)
   1aa6c:	00bfff84 	movi	r2,-2
   1aa70:	1884703a 	and	r2,r3,r2
   1aa74:	1001703a 	wrctl	status,r2
  
  return context;
   1aa78:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1aa7c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1aa80:	e0bfff17 	ldw	r2,-4(fp)
   1aa84:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1aa88:	e0bffd17 	ldw	r2,-12(fp)
   1aa8c:	10800017 	ldw	r2,0(r2)
   1aa90:	e0fffd17 	ldw	r3,-12(fp)
   1aa94:	18c00117 	ldw	r3,4(r3)
   1aa98:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1aa9c:	e0bffd17 	ldw	r2,-12(fp)
   1aaa0:	10800117 	ldw	r2,4(r2)
   1aaa4:	e0fffd17 	ldw	r3,-12(fp)
   1aaa8:	18c00017 	ldw	r3,0(r3)
   1aaac:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1aab0:	e0bffd17 	ldw	r2,-12(fp)
   1aab4:	e0fffd17 	ldw	r3,-12(fp)
   1aab8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1aabc:	e0bffd17 	ldw	r2,-12(fp)
   1aac0:	e0fffd17 	ldw	r3,-12(fp)
   1aac4:	10c00015 	stw	r3,0(r2)
   1aac8:	e0bffb17 	ldw	r2,-20(fp)
   1aacc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aad0:	e0bffe17 	ldw	r2,-8(fp)
   1aad4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1aad8:	e037883a 	mov	sp,fp
   1aadc:	df000017 	ldw	fp,0(sp)
   1aae0:	dec00104 	addi	sp,sp,4
   1aae4:	f800283a 	ret

0001aae8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1aae8:	defffb04 	addi	sp,sp,-20
   1aaec:	dfc00415 	stw	ra,16(sp)
   1aaf0:	df000315 	stw	fp,12(sp)
   1aaf4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1aaf8:	d0a03917 	ldw	r2,-32540(gp)
   1aafc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1ab00:	d0a84217 	ldw	r2,-24312(gp)
   1ab04:	10800044 	addi	r2,r2,1
   1ab08:	d0a84215 	stw	r2,-24312(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1ab0c:	00002e06 	br	1abc8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1ab10:	e0bffd17 	ldw	r2,-12(fp)
   1ab14:	10800017 	ldw	r2,0(r2)
   1ab18:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1ab1c:	e0bffd17 	ldw	r2,-12(fp)
   1ab20:	10800403 	ldbu	r2,16(r2)
   1ab24:	10803fcc 	andi	r2,r2,255
   1ab28:	10000426 	beq	r2,zero,1ab3c <alt_tick+0x54>
   1ab2c:	d0a84217 	ldw	r2,-24312(gp)
   1ab30:	1000021e 	bne	r2,zero,1ab3c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1ab34:	e0bffd17 	ldw	r2,-12(fp)
   1ab38:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1ab3c:	e0bffd17 	ldw	r2,-12(fp)
   1ab40:	10800217 	ldw	r2,8(r2)
   1ab44:	d0e84217 	ldw	r3,-24312(gp)
   1ab48:	18801d36 	bltu	r3,r2,1abc0 <alt_tick+0xd8>
   1ab4c:	e0bffd17 	ldw	r2,-12(fp)
   1ab50:	10800403 	ldbu	r2,16(r2)
   1ab54:	10803fcc 	andi	r2,r2,255
   1ab58:	1000191e 	bne	r2,zero,1abc0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1ab5c:	e0bffd17 	ldw	r2,-12(fp)
   1ab60:	10800317 	ldw	r2,12(r2)
   1ab64:	e0fffd17 	ldw	r3,-12(fp)
   1ab68:	18c00517 	ldw	r3,20(r3)
   1ab6c:	1809883a 	mov	r4,r3
   1ab70:	103ee83a 	callr	r2
   1ab74:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1ab78:	e0bfff17 	ldw	r2,-4(fp)
   1ab7c:	1000031e 	bne	r2,zero,1ab8c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1ab80:	e13ffd17 	ldw	r4,-12(fp)
   1ab84:	001aa500 	call	1aa50 <alt_alarm_stop>
   1ab88:	00000d06 	br	1abc0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1ab8c:	e0bffd17 	ldw	r2,-12(fp)
   1ab90:	10c00217 	ldw	r3,8(r2)
   1ab94:	e0bfff17 	ldw	r2,-4(fp)
   1ab98:	1887883a 	add	r3,r3,r2
   1ab9c:	e0bffd17 	ldw	r2,-12(fp)
   1aba0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1aba4:	e0bffd17 	ldw	r2,-12(fp)
   1aba8:	10c00217 	ldw	r3,8(r2)
   1abac:	d0a84217 	ldw	r2,-24312(gp)
   1abb0:	1880032e 	bgeu	r3,r2,1abc0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1abb4:	e0bffd17 	ldw	r2,-12(fp)
   1abb8:	00c00044 	movi	r3,1
   1abbc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1abc0:	e0bffe17 	ldw	r2,-8(fp)
   1abc4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1abc8:	e0fffd17 	ldw	r3,-12(fp)
   1abcc:	d0a03904 	addi	r2,gp,-32540
   1abd0:	18bfcf1e 	bne	r3,r2,1ab10 <__alt_mem_Flash_flash_data+0xf401ab10>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1abd4:	000fd940 	call	fd94 <OSTimeTick>
}
   1abd8:	e037883a 	mov	sp,fp
   1abdc:	dfc00117 	ldw	ra,4(sp)
   1abe0:	df000017 	ldw	fp,0(sp)
   1abe4:	dec00204 	addi	sp,sp,8
   1abe8:	f800283a 	ret

0001abec <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1abec:	deffff04 	addi	sp,sp,-4
   1abf0:	df000015 	stw	fp,0(sp)
   1abf4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1abf8:	000170fa 	wrctl	ienable,zero
}
   1abfc:	e037883a 	mov	sp,fp
   1ac00:	df000017 	ldw	fp,0(sp)
   1ac04:	dec00104 	addi	sp,sp,4
   1ac08:	f800283a 	ret

0001ac0c <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1ac0c:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1ac10:	d0e00d17 	ldw	r3,-32716(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1ac14:	d1283b17 	ldw	r4,-24340(gp)

      stw ra,  0(sp)
   1ac18:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1ac1c:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1ac20:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1ac24:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1ac28:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1ac2c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1ac30:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1ac34:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1ac38:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1ac3c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1ac40:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1ac44:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1ac48:	001ae780 	call	1ae78 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1ac4c:	d1283617 	ldw	r4,-24360(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1ac50:	d1682e07 	ldb	r5,-24392(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1ac54:	d1283b15 	stw	r4,-24340(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1ac58:	d1682e45 	stb	r5,-24391(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1ac5c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1ac60:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1ac64:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1ac68:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1ac6c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1ac70:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1ac74:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1ac78:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1ac7c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1ac80:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1ac84:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1ac88:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1ac8c:	d0e00d15 	stw	r3,-32716(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1ac90:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1ac94:	f800283a 	ret

0001ac98 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1ac98:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1ac9c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1aca0:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1aca4:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1aca8:	001ae780 	call	1ae78 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1acac:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1acb0:	d4a82c45 	stb	r18,-24399(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1acb4:	003fe506 	br	1ac4c <__alt_mem_Flash_flash_data+0xf401ac4c>

0001acb8 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1acb8:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1acbc:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1acc0:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1acc4:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1acc8:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1accc:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1acd0:	dec00204 	addi	sp,sp,8

      callr r2
   1acd4:	103ee83a 	callr	r2

      nop
   1acd8:	0001883a 	nop

0001acdc <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1acdc:	defff704 	addi	sp,sp,-36
   1ace0:	dfc00815 	stw	ra,32(sp)
   1ace4:	df000715 	stw	fp,28(sp)
   1ace8:	df000704 	addi	fp,sp,28
   1acec:	e13ffc15 	stw	r4,-16(fp)
   1acf0:	e17ffd15 	stw	r5,-12(fp)
   1acf4:	e1bffe15 	stw	r6,-8(fp)
   1acf8:	3805883a 	mov	r2,r7
   1acfc:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1ad00:	e0fffe17 	ldw	r3,-8(fp)
   1ad04:	00bfff04 	movi	r2,-4
   1ad08:	1884703a 	and	r2,r3,r2
   1ad0c:	10bef704 	addi	r2,r2,-1060
   1ad10:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1ad14:	e13ff917 	ldw	r4,-28(fp)
   1ad18:	000b883a 	mov	r5,zero
   1ad1c:	01810904 	movi	r6,1060
   1ad20:	0007b140 	call	7b14 <memset>
   1ad24:	e0bff917 	ldw	r2,-28(fp)
   1ad28:	10c0bb04 	addi	r3,r2,748
   1ad2c:	e0bff917 	ldw	r2,-28(fp)
   1ad30:	10c00115 	stw	r3,4(r2)
   1ad34:	e0bff917 	ldw	r2,-28(fp)
   1ad38:	10c0d504 	addi	r3,r2,852
   1ad3c:	e0bff917 	ldw	r2,-28(fp)
   1ad40:	10c00215 	stw	r3,8(r2)
   1ad44:	e0bff917 	ldw	r2,-28(fp)
   1ad48:	10c0ef04 	addi	r3,r2,956
   1ad4c:	e0bff917 	ldw	r2,-28(fp)
   1ad50:	10c00315 	stw	r3,12(r2)
   1ad54:	e0fff917 	ldw	r3,-28(fp)
   1ad58:	008000b4 	movhi	r2,2
   1ad5c:	10af7204 	addi	r2,r2,-16952
   1ad60:	18800d15 	stw	r2,52(r3)
   1ad64:	e0bff917 	ldw	r2,-28(fp)
   1ad68:	00c00044 	movi	r3,1
   1ad6c:	10c02915 	stw	r3,164(r2)
   1ad70:	10002a15 	stw	zero,168(r2)
   1ad74:	e0bff917 	ldw	r2,-28(fp)
   1ad78:	00ccc384 	movi	r3,13070
   1ad7c:	10c02b0d 	sth	r3,172(r2)
   1ad80:	e0bff917 	ldw	r2,-28(fp)
   1ad84:	00eaf344 	movi	r3,-21555
   1ad88:	10c02b8d 	sth	r3,174(r2)
   1ad8c:	e0bff917 	ldw	r2,-28(fp)
   1ad90:	00c48d04 	movi	r3,4660
   1ad94:	10c02c0d 	sth	r3,176(r2)
   1ad98:	e0bff917 	ldw	r2,-28(fp)
   1ad9c:	00f99b44 	movi	r3,-6547
   1ada0:	10c02c8d 	sth	r3,178(r2)
   1ada4:	e0bff917 	ldw	r2,-28(fp)
   1ada8:	00f7bb04 	movi	r3,-8468
   1adac:	10c02d0d 	sth	r3,180(r2)
   1adb0:	e0bff917 	ldw	r2,-28(fp)
   1adb4:	00c00144 	movi	r3,5
   1adb8:	10c02d8d 	sth	r3,182(r2)
   1adbc:	e0bff917 	ldw	r2,-28(fp)
   1adc0:	00c002c4 	movi	r3,11
   1adc4:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1adc8:	e0bff917 	ldw	r2,-28(fp)
   1adcc:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1add0:	e0bffa17 	ldw	r2,-24(fp)
   1add4:	10bff304 	addi	r2,r2,-52
   1add8:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1addc:	e0bffb17 	ldw	r2,-20(fp)
   1ade0:	10800c04 	addi	r2,r2,48
   1ade4:	e0fffc17 	ldw	r3,-16(fp)
   1ade8:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1adec:	e0bffb17 	ldw	r2,-20(fp)
   1adf0:	10800b04 	addi	r2,r2,44
   1adf4:	e0fffd17 	ldw	r3,-12(fp)
   1adf8:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1adfc:	e0bffb17 	ldw	r2,-20(fp)
   1ae00:	10800a04 	addi	r2,r2,40
   1ae04:	e0fff917 	ldw	r3,-28(fp)
   1ae08:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1ae0c:	008000b4 	movhi	r2,2
   1ae10:	10ab2e04 	addi	r2,r2,-21320
   1ae14:	10c00104 	addi	r3,r2,4
   1ae18:	e0bffb17 	ldw	r2,-20(fp)
   1ae1c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1ae20:	e0bffb17 	ldw	r2,-20(fp)
}
   1ae24:	e037883a 	mov	sp,fp
   1ae28:	dfc00117 	ldw	ra,4(sp)
   1ae2c:	df000017 	ldw	fp,0(sp)
   1ae30:	dec00204 	addi	sp,sp,8
   1ae34:	f800283a 	ret

0001ae38 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1ae38:	defffe04 	addi	sp,sp,-8
   1ae3c:	df000115 	stw	fp,4(sp)
   1ae40:	df000104 	addi	fp,sp,4
   1ae44:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1ae48:	e037883a 	mov	sp,fp
   1ae4c:	df000017 	ldw	fp,0(sp)
   1ae50:	dec00104 	addi	sp,sp,4
   1ae54:	f800283a 	ret

0001ae58 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1ae58:	defffe04 	addi	sp,sp,-8
   1ae5c:	df000115 	stw	fp,4(sp)
   1ae60:	df000104 	addi	fp,sp,4
   1ae64:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1ae68:	e037883a 	mov	sp,fp
   1ae6c:	df000017 	ldw	fp,0(sp)
   1ae70:	dec00104 	addi	sp,sp,4
   1ae74:	f800283a 	ret

0001ae78 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1ae78:	deffff04 	addi	sp,sp,-4
   1ae7c:	df000015 	stw	fp,0(sp)
   1ae80:	d839883a 	mov	fp,sp
}
   1ae84:	e037883a 	mov	sp,fp
   1ae88:	df000017 	ldw	fp,0(sp)
   1ae8c:	dec00104 	addi	sp,sp,4
   1ae90:	f800283a 	ret

0001ae94 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1ae94:	deffff04 	addi	sp,sp,-4
   1ae98:	df000015 	stw	fp,0(sp)
   1ae9c:	d839883a 	mov	fp,sp
}
   1aea0:	e037883a 	mov	sp,fp
   1aea4:	df000017 	ldw	fp,0(sp)
   1aea8:	dec00104 	addi	sp,sp,4
   1aeac:	f800283a 	ret

0001aeb0 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1aeb0:	deffff04 	addi	sp,sp,-4
   1aeb4:	df000015 	stw	fp,0(sp)
   1aeb8:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1aebc:	e037883a 	mov	sp,fp
   1aec0:	df000017 	ldw	fp,0(sp)
   1aec4:	dec00104 	addi	sp,sp,4
   1aec8:	f800283a 	ret

0001aecc <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1aecc:	deffff04 	addi	sp,sp,-4
   1aed0:	df000015 	stw	fp,0(sp)
   1aed4:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1aed8:	e037883a 	mov	sp,fp
   1aedc:	df000017 	ldw	fp,0(sp)
   1aee0:	dec00104 	addi	sp,sp,4
   1aee4:	f800283a 	ret

0001aee8 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1aee8:	deffff04 	addi	sp,sp,-4
   1aeec:	df000015 	stw	fp,0(sp)
   1aef0:	d839883a 	mov	fp,sp
}
   1aef4:	e037883a 	mov	sp,fp
   1aef8:	df000017 	ldw	fp,0(sp)
   1aefc:	dec00104 	addi	sp,sp,4
   1af00:	f800283a 	ret

0001af04 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1af04:	deffff04 	addi	sp,sp,-4
   1af08:	df000015 	stw	fp,0(sp)
   1af0c:	d839883a 	mov	fp,sp
}
   1af10:	e037883a 	mov	sp,fp
   1af14:	df000017 	ldw	fp,0(sp)
   1af18:	dec00104 	addi	sp,sp,4
   1af1c:	f800283a 	ret

0001af20 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1af20:	defffe04 	addi	sp,sp,-8
   1af24:	df000115 	stw	fp,4(sp)
   1af28:	df000104 	addi	fp,sp,4
   1af2c:	e13fff15 	stw	r4,-4(fp)
}
   1af30:	e037883a 	mov	sp,fp
   1af34:	df000017 	ldw	fp,0(sp)
   1af38:	dec00104 	addi	sp,sp,4
   1af3c:	f800283a 	ret

0001af40 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1af40:	defffb04 	addi	sp,sp,-20
   1af44:	dfc00415 	stw	ra,16(sp)
   1af48:	df000315 	stw	fp,12(sp)
   1af4c:	df000304 	addi	fp,sp,12
   1af50:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1af54:	008000b4 	movhi	r2,2
   1af58:	10b71404 	addi	r2,r2,-9136
   1af5c:	10800017 	ldw	r2,0(r2)
   1af60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1af64:	00003106 	br	1b02c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1af68:	e0bffd17 	ldw	r2,-12(fp)
   1af6c:	10800217 	ldw	r2,8(r2)
   1af70:	1009883a 	mov	r4,r2
   1af74:	00021840 	call	2184 <strlen>
   1af78:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1af7c:	e0bffd17 	ldw	r2,-12(fp)
   1af80:	10c00217 	ldw	r3,8(r2)
   1af84:	e0bffe17 	ldw	r2,-8(fp)
   1af88:	10bfffc4 	addi	r2,r2,-1
   1af8c:	1885883a 	add	r2,r3,r2
   1af90:	10800003 	ldbu	r2,0(r2)
   1af94:	10803fcc 	andi	r2,r2,255
   1af98:	1080201c 	xori	r2,r2,128
   1af9c:	10bfe004 	addi	r2,r2,-128
   1afa0:	10800bd8 	cmpnei	r2,r2,47
   1afa4:	1000031e 	bne	r2,zero,1afb4 <alt_find_file+0x74>
    {
      len -= 1;
   1afa8:	e0bffe17 	ldw	r2,-8(fp)
   1afac:	10bfffc4 	addi	r2,r2,-1
   1afb0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1afb4:	e0bffe17 	ldw	r2,-8(fp)
   1afb8:	e0ffff17 	ldw	r3,-4(fp)
   1afbc:	1885883a 	add	r2,r3,r2
   1afc0:	10800003 	ldbu	r2,0(r2)
   1afc4:	10803fcc 	andi	r2,r2,255
   1afc8:	1080201c 	xori	r2,r2,128
   1afcc:	10bfe004 	addi	r2,r2,-128
   1afd0:	10800be0 	cmpeqi	r2,r2,47
   1afd4:	1000081e 	bne	r2,zero,1aff8 <alt_find_file+0xb8>
   1afd8:	e0bffe17 	ldw	r2,-8(fp)
   1afdc:	e0ffff17 	ldw	r3,-4(fp)
   1afe0:	1885883a 	add	r2,r3,r2
   1afe4:	10800003 	ldbu	r2,0(r2)
   1afe8:	10803fcc 	andi	r2,r2,255
   1afec:	1080201c 	xori	r2,r2,128
   1aff0:	10bfe004 	addi	r2,r2,-128
   1aff4:	10000a1e 	bne	r2,zero,1b020 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1aff8:	e0bffd17 	ldw	r2,-12(fp)
   1affc:	10c00217 	ldw	r3,8(r2)
   1b000:	e0bffe17 	ldw	r2,-8(fp)
   1b004:	1809883a 	mov	r4,r3
   1b008:	e17fff17 	ldw	r5,-4(fp)
   1b00c:	100d883a 	mov	r6,r2
   1b010:	001b2c40 	call	1b2c4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1b014:	1000021e 	bne	r2,zero,1b020 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1b018:	e0bffd17 	ldw	r2,-12(fp)
   1b01c:	00000806 	br	1b040 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1b020:	e0bffd17 	ldw	r2,-12(fp)
   1b024:	10800017 	ldw	r2,0(r2)
   1b028:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1b02c:	e0fffd17 	ldw	r3,-12(fp)
   1b030:	008000b4 	movhi	r2,2
   1b034:	10b71404 	addi	r2,r2,-9136
   1b038:	18bfcb1e 	bne	r3,r2,1af68 <__alt_mem_Flash_flash_data+0xf401af68>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1b03c:	0005883a 	mov	r2,zero
}
   1b040:	e037883a 	mov	sp,fp
   1b044:	dfc00117 	ldw	ra,4(sp)
   1b048:	df000017 	ldw	fp,0(sp)
   1b04c:	dec00204 	addi	sp,sp,8
   1b050:	f800283a 	ret

0001b054 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1b054:	defff904 	addi	sp,sp,-28
   1b058:	dfc00615 	stw	ra,24(sp)
   1b05c:	df000515 	stw	fp,20(sp)
   1b060:	df000504 	addi	fp,sp,20
   1b064:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1b068:	00bffa04 	movi	r2,-24
   1b06c:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1b070:	008000b4 	movhi	r2,2
   1b074:	10bf2604 	addi	r2,r2,-872
   1b078:	10800017 	ldw	r2,0(r2)
   1b07c:	e0bffd15 	stw	r2,-12(fp)
   1b080:	e03ffe0d 	sth	zero,-8(fp)
   1b084:	e0fffe0b 	ldhu	r3,-8(fp)
   1b088:	e0bffe84 	addi	r2,fp,-6
   1b08c:	e13ffd17 	ldw	r4,-12(fp)
   1b090:	180b883a 	mov	r5,r3
   1b094:	100d883a 	mov	r6,r2
   1b098:	00153b80 	call	153b8 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1b09c:	e03ffb15 	stw	zero,-20(fp)
   1b0a0:	00001d06 	br	1b118 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   1b0a4:	008000b4 	movhi	r2,2
   1b0a8:	10b1a604 	addi	r2,r2,-14696
   1b0ac:	e0fffb17 	ldw	r3,-20(fp)
   1b0b0:	18c00324 	muli	r3,r3,12
   1b0b4:	10c5883a 	add	r2,r2,r3
   1b0b8:	10800017 	ldw	r2,0(r2)
   1b0bc:	1000131e 	bne	r2,zero,1b10c <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   1b0c0:	008000b4 	movhi	r2,2
   1b0c4:	10b1a604 	addi	r2,r2,-14696
   1b0c8:	e0fffb17 	ldw	r3,-20(fp)
   1b0cc:	18c00324 	muli	r3,r3,12
   1b0d0:	10c5883a 	add	r2,r2,r3
   1b0d4:	e0ffff17 	ldw	r3,-4(fp)
   1b0d8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1b0dc:	008000b4 	movhi	r2,2
   1b0e0:	10b71804 	addi	r2,r2,-9120
   1b0e4:	10c00017 	ldw	r3,0(r2)
   1b0e8:	e0bffb17 	ldw	r2,-20(fp)
   1b0ec:	1880040e 	bge	r3,r2,1b100 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   1b0f0:	008000b4 	movhi	r2,2
   1b0f4:	10b71804 	addi	r2,r2,-9120
   1b0f8:	e0fffb17 	ldw	r3,-20(fp)
   1b0fc:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1b100:	e0bffb17 	ldw	r2,-20(fp)
   1b104:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1b108:	00000606 	br	1b124 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1b10c:	e0bffb17 	ldw	r2,-20(fp)
   1b110:	10800044 	addi	r2,r2,1
   1b114:	e0bffb15 	stw	r2,-20(fp)
   1b118:	e0bffb17 	ldw	r2,-20(fp)
   1b11c:	10800810 	cmplti	r2,r2,32
   1b120:	103fe01e 	bne	r2,zero,1b0a4 <__alt_mem_Flash_flash_data+0xf401b0a4>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1b124:	008000b4 	movhi	r2,2
   1b128:	10bf2604 	addi	r2,r2,-872
   1b12c:	10800017 	ldw	r2,0(r2)
   1b130:	1009883a 	mov	r4,r2
   1b134:	001578c0 	call	1578c <OSSemPost>

  return rc;
   1b138:	e0bffc17 	ldw	r2,-16(fp)
}
   1b13c:	e037883a 	mov	sp,fp
   1b140:	dfc00117 	ldw	ra,4(sp)
   1b144:	df000017 	ldw	fp,0(sp)
   1b148:	dec00204 	addi	sp,sp,8
   1b14c:	f800283a 	ret

0001b150 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1b150:	defffb04 	addi	sp,sp,-20
   1b154:	df000415 	stw	fp,16(sp)
   1b158:	df000404 	addi	fp,sp,16
   1b15c:	e13ffe15 	stw	r4,-8(fp)
   1b160:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1b164:	e0bfff17 	ldw	r2,-4(fp)
   1b168:	10840070 	cmpltui	r2,r2,4097
   1b16c:	1000021e 	bne	r2,zero,1b178 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1b170:	00840004 	movi	r2,4096
   1b174:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1b178:	e0fffe17 	ldw	r3,-8(fp)
   1b17c:	e0bfff17 	ldw	r2,-4(fp)
   1b180:	1885883a 	add	r2,r3,r2
   1b184:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1b188:	e0bffe17 	ldw	r2,-8(fp)
   1b18c:	e0bffc15 	stw	r2,-16(fp)
   1b190:	00000506 	br	1b1a8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1b194:	e0bffc17 	ldw	r2,-16(fp)
   1b198:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1b19c:	e0bffc17 	ldw	r2,-16(fp)
   1b1a0:	10800804 	addi	r2,r2,32
   1b1a4:	e0bffc15 	stw	r2,-16(fp)
   1b1a8:	e0fffc17 	ldw	r3,-16(fp)
   1b1ac:	e0bffd17 	ldw	r2,-12(fp)
   1b1b0:	18bff836 	bltu	r3,r2,1b194 <__alt_mem_Flash_flash_data+0xf401b194>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1b1b4:	e0bffe17 	ldw	r2,-8(fp)
   1b1b8:	108007cc 	andi	r2,r2,31
   1b1bc:	10000226 	beq	r2,zero,1b1c8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1b1c0:	e0bffc17 	ldw	r2,-16(fp)
   1b1c4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1b1c8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1b1cc:	e037883a 	mov	sp,fp
   1b1d0:	df000017 	ldw	fp,0(sp)
   1b1d4:	dec00104 	addi	sp,sp,4
   1b1d8:	f800283a 	ret

0001b1dc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1b1dc:	defffe04 	addi	sp,sp,-8
   1b1e0:	df000115 	stw	fp,4(sp)
   1b1e4:	df000104 	addi	fp,sp,4
   1b1e8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1b1ec:	e0bfff17 	ldw	r2,-4(fp)
   1b1f0:	10bffe84 	addi	r2,r2,-6
   1b1f4:	10c00428 	cmpgeui	r3,r2,16
   1b1f8:	18001a1e 	bne	r3,zero,1b264 <alt_exception_cause_generated_bad_addr+0x88>
   1b1fc:	100690ba 	slli	r3,r2,2
   1b200:	008000b4 	movhi	r2,2
   1b204:	10ac8504 	addi	r2,r2,-19948
   1b208:	1885883a 	add	r2,r3,r2
   1b20c:	10800017 	ldw	r2,0(r2)
   1b210:	1000683a 	jmp	r2
   1b214:	0001b254 	movui	zero,1737
   1b218:	0001b254 	movui	zero,1737
   1b21c:	0001b264 	muli	zero,zero,1737
   1b220:	0001b264 	muli	zero,zero,1737
   1b224:	0001b264 	muli	zero,zero,1737
   1b228:	0001b254 	movui	zero,1737
   1b22c:	0001b25c 	xori	zero,zero,1737
   1b230:	0001b264 	muli	zero,zero,1737
   1b234:	0001b254 	movui	zero,1737
   1b238:	0001b254 	movui	zero,1737
   1b23c:	0001b264 	muli	zero,zero,1737
   1b240:	0001b254 	movui	zero,1737
   1b244:	0001b25c 	xori	zero,zero,1737
   1b248:	0001b264 	muli	zero,zero,1737
   1b24c:	0001b264 	muli	zero,zero,1737
   1b250:	0001b254 	movui	zero,1737
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1b254:	00800044 	movi	r2,1
   1b258:	00000306 	br	1b268 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1b25c:	0005883a 	mov	r2,zero
   1b260:	00000106 	br	1b268 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1b264:	0005883a 	mov	r2,zero
  }
}
   1b268:	e037883a 	mov	sp,fp
   1b26c:	df000017 	ldw	fp,0(sp)
   1b270:	dec00104 	addi	sp,sp,4
   1b274:	f800283a 	ret

0001b278 <atexit>:
   1b278:	200b883a 	mov	r5,r4
   1b27c:	000d883a 	mov	r6,zero
   1b280:	0009883a 	mov	r4,zero
   1b284:	000f883a 	mov	r7,zero
   1b288:	001b3401 	jmpi	1b340 <__register_exitproc>

0001b28c <exit>:
   1b28c:	defffe04 	addi	sp,sp,-8
   1b290:	000b883a 	mov	r5,zero
   1b294:	dc000015 	stw	r16,0(sp)
   1b298:	dfc00115 	stw	ra,4(sp)
   1b29c:	2021883a 	mov	r16,r4
   1b2a0:	001b4540 	call	1b454 <__call_exitprocs>
   1b2a4:	008000b4 	movhi	r2,2
   1b2a8:	10b70e04 	addi	r2,r2,-9160
   1b2ac:	11000017 	ldw	r4,0(r2)
   1b2b0:	20800f17 	ldw	r2,60(r4)
   1b2b4:	10000126 	beq	r2,zero,1b2bc <exit+0x30>
   1b2b8:	103ee83a 	callr	r2
   1b2bc:	8009883a 	mov	r4,r16
   1b2c0:	001b5e80 	call	1b5e8 <_exit>

0001b2c4 <memcmp>:
   1b2c4:	01c000c4 	movi	r7,3
   1b2c8:	3980192e 	bgeu	r7,r6,1b330 <memcmp+0x6c>
   1b2cc:	2144b03a 	or	r2,r4,r5
   1b2d0:	11c4703a 	and	r2,r2,r7
   1b2d4:	10000f26 	beq	r2,zero,1b314 <memcmp+0x50>
   1b2d8:	20800003 	ldbu	r2,0(r4)
   1b2dc:	28c00003 	ldbu	r3,0(r5)
   1b2e0:	10c0151e 	bne	r2,r3,1b338 <memcmp+0x74>
   1b2e4:	31bfff84 	addi	r6,r6,-2
   1b2e8:	01ffffc4 	movi	r7,-1
   1b2ec:	00000406 	br	1b300 <memcmp+0x3c>
   1b2f0:	20800003 	ldbu	r2,0(r4)
   1b2f4:	28c00003 	ldbu	r3,0(r5)
   1b2f8:	31bfffc4 	addi	r6,r6,-1
   1b2fc:	10c00e1e 	bne	r2,r3,1b338 <memcmp+0x74>
   1b300:	21000044 	addi	r4,r4,1
   1b304:	29400044 	addi	r5,r5,1
   1b308:	31fff91e 	bne	r6,r7,1b2f0 <__alt_mem_Flash_flash_data+0xf401b2f0>
   1b30c:	0005883a 	mov	r2,zero
   1b310:	f800283a 	ret
   1b314:	20c00017 	ldw	r3,0(r4)
   1b318:	28800017 	ldw	r2,0(r5)
   1b31c:	1880041e 	bne	r3,r2,1b330 <memcmp+0x6c>
   1b320:	31bfff04 	addi	r6,r6,-4
   1b324:	21000104 	addi	r4,r4,4
   1b328:	29400104 	addi	r5,r5,4
   1b32c:	39bff936 	bltu	r7,r6,1b314 <__alt_mem_Flash_flash_data+0xf401b314>
   1b330:	303fe91e 	bne	r6,zero,1b2d8 <__alt_mem_Flash_flash_data+0xf401b2d8>
   1b334:	003ff506 	br	1b30c <__alt_mem_Flash_flash_data+0xf401b30c>
   1b338:	10c5c83a 	sub	r2,r2,r3
   1b33c:	f800283a 	ret

0001b340 <__register_exitproc>:
   1b340:	008000b4 	movhi	r2,2
   1b344:	defffa04 	addi	sp,sp,-24
   1b348:	10b70e04 	addi	r2,r2,-9160
   1b34c:	dc000315 	stw	r16,12(sp)
   1b350:	14000017 	ldw	r16,0(r2)
   1b354:	dc400415 	stw	r17,16(sp)
   1b358:	dfc00515 	stw	ra,20(sp)
   1b35c:	80805217 	ldw	r2,328(r16)
   1b360:	2023883a 	mov	r17,r4
   1b364:	10003626 	beq	r2,zero,1b440 <__register_exitproc+0x100>
   1b368:	10c00117 	ldw	r3,4(r2)
   1b36c:	010007c4 	movi	r4,31
   1b370:	20c00e16 	blt	r4,r3,1b3ac <__register_exitproc+0x6c>
   1b374:	1a400044 	addi	r9,r3,1
   1b378:	8800211e 	bne	r17,zero,1b400 <__register_exitproc+0xc0>
   1b37c:	18c00084 	addi	r3,r3,2
   1b380:	18c7883a 	add	r3,r3,r3
   1b384:	18c7883a 	add	r3,r3,r3
   1b388:	12400115 	stw	r9,4(r2)
   1b38c:	10c7883a 	add	r3,r2,r3
   1b390:	19400015 	stw	r5,0(r3)
   1b394:	0005883a 	mov	r2,zero
   1b398:	dfc00517 	ldw	ra,20(sp)
   1b39c:	dc400417 	ldw	r17,16(sp)
   1b3a0:	dc000317 	ldw	r16,12(sp)
   1b3a4:	dec00604 	addi	sp,sp,24
   1b3a8:	f800283a 	ret
   1b3ac:	00800034 	movhi	r2,0
   1b3b0:	10800004 	addi	r2,r2,0
   1b3b4:	10002526 	beq	r2,zero,1b44c <__register_exitproc+0x10c>
   1b3b8:	01006404 	movi	r4,400
   1b3bc:	d9400015 	stw	r5,0(sp)
   1b3c0:	d9800115 	stw	r6,4(sp)
   1b3c4:	d9c00215 	stw	r7,8(sp)
   1b3c8:	00000000 	call	0 <__alt_mem_SDRAM>
   1b3cc:	d9400017 	ldw	r5,0(sp)
   1b3d0:	d9800117 	ldw	r6,4(sp)
   1b3d4:	d9c00217 	ldw	r7,8(sp)
   1b3d8:	10001c26 	beq	r2,zero,1b44c <__register_exitproc+0x10c>
   1b3dc:	80c05217 	ldw	r3,328(r16)
   1b3e0:	10000115 	stw	zero,4(r2)
   1b3e4:	02400044 	movi	r9,1
   1b3e8:	10c00015 	stw	r3,0(r2)
   1b3ec:	80805215 	stw	r2,328(r16)
   1b3f0:	10006215 	stw	zero,392(r2)
   1b3f4:	10006315 	stw	zero,396(r2)
   1b3f8:	0007883a 	mov	r3,zero
   1b3fc:	883fdf26 	beq	r17,zero,1b37c <__alt_mem_Flash_flash_data+0xf401b37c>
   1b400:	18d1883a 	add	r8,r3,r3
   1b404:	4211883a 	add	r8,r8,r8
   1b408:	1211883a 	add	r8,r2,r8
   1b40c:	41802215 	stw	r6,136(r8)
   1b410:	01000044 	movi	r4,1
   1b414:	11806217 	ldw	r6,392(r2)
   1b418:	20c8983a 	sll	r4,r4,r3
   1b41c:	310cb03a 	or	r6,r6,r4
   1b420:	11806215 	stw	r6,392(r2)
   1b424:	41c04215 	stw	r7,264(r8)
   1b428:	01800084 	movi	r6,2
   1b42c:	89bfd31e 	bne	r17,r6,1b37c <__alt_mem_Flash_flash_data+0xf401b37c>
   1b430:	11806317 	ldw	r6,396(r2)
   1b434:	3108b03a 	or	r4,r6,r4
   1b438:	11006315 	stw	r4,396(r2)
   1b43c:	003fcf06 	br	1b37c <__alt_mem_Flash_flash_data+0xf401b37c>
   1b440:	80805304 	addi	r2,r16,332
   1b444:	80805215 	stw	r2,328(r16)
   1b448:	003fc706 	br	1b368 <__alt_mem_Flash_flash_data+0xf401b368>
   1b44c:	00bfffc4 	movi	r2,-1
   1b450:	003fd106 	br	1b398 <__alt_mem_Flash_flash_data+0xf401b398>

0001b454 <__call_exitprocs>:
   1b454:	008000b4 	movhi	r2,2
   1b458:	10b70e04 	addi	r2,r2,-9160
   1b45c:	10800017 	ldw	r2,0(r2)
   1b460:	defff404 	addi	sp,sp,-48
   1b464:	dd800815 	stw	r22,32(sp)
   1b468:	d8800015 	stw	r2,0(sp)
   1b46c:	10805204 	addi	r2,r2,328
   1b470:	dd000615 	stw	r20,24(sp)
   1b474:	dc800415 	stw	r18,16(sp)
   1b478:	dfc00b15 	stw	ra,44(sp)
   1b47c:	df000a15 	stw	fp,40(sp)
   1b480:	ddc00915 	stw	r23,36(sp)
   1b484:	dd400715 	stw	r21,28(sp)
   1b488:	dcc00515 	stw	r19,20(sp)
   1b48c:	dc400315 	stw	r17,12(sp)
   1b490:	dc000215 	stw	r16,8(sp)
   1b494:	2025883a 	mov	r18,r4
   1b498:	2829883a 	mov	r20,r5
   1b49c:	d8800115 	stw	r2,4(sp)
   1b4a0:	05bfffc4 	movi	r22,-1
   1b4a4:	d8800017 	ldw	r2,0(sp)
   1b4a8:	14c05217 	ldw	r19,328(r2)
   1b4ac:	98001d26 	beq	r19,zero,1b524 <__call_exitprocs+0xd0>
   1b4b0:	dd400117 	ldw	r21,4(sp)
   1b4b4:	98800117 	ldw	r2,4(r19)
   1b4b8:	173fffc4 	addi	fp,r2,-1
   1b4bc:	e0000d16 	blt	fp,zero,1b4f4 <__call_exitprocs+0xa0>
   1b4c0:	14000044 	addi	r16,r2,1
   1b4c4:	8421883a 	add	r16,r16,r16
   1b4c8:	8421883a 	add	r16,r16,r16
   1b4cc:	84402004 	addi	r17,r16,128
   1b4d0:	9c63883a 	add	r17,r19,r17
   1b4d4:	9c21883a 	add	r16,r19,r16
   1b4d8:	a0001e26 	beq	r20,zero,1b554 <__call_exitprocs+0x100>
   1b4dc:	80804017 	ldw	r2,256(r16)
   1b4e0:	15001c26 	beq	r2,r20,1b554 <__call_exitprocs+0x100>
   1b4e4:	e73fffc4 	addi	fp,fp,-1
   1b4e8:	843fff04 	addi	r16,r16,-4
   1b4ec:	8c7fff04 	addi	r17,r17,-4
   1b4f0:	e5bff91e 	bne	fp,r22,1b4d8 <__alt_mem_Flash_flash_data+0xf401b4d8>
   1b4f4:	00800034 	movhi	r2,0
   1b4f8:	10800004 	addi	r2,r2,0
   1b4fc:	10000926 	beq	r2,zero,1b524 <__call_exitprocs+0xd0>
   1b500:	98800117 	ldw	r2,4(r19)
   1b504:	1000311e 	bne	r2,zero,1b5cc <__call_exitprocs+0x178>
   1b508:	98800017 	ldw	r2,0(r19)
   1b50c:	10003426 	beq	r2,zero,1b5e0 <__call_exitprocs+0x18c>
   1b510:	9809883a 	mov	r4,r19
   1b514:	a8800015 	stw	r2,0(r21)
   1b518:	00000000 	call	0 <__alt_mem_SDRAM>
   1b51c:	acc00017 	ldw	r19,0(r21)
   1b520:	983fe41e 	bne	r19,zero,1b4b4 <__alt_mem_Flash_flash_data+0xf401b4b4>
   1b524:	dfc00b17 	ldw	ra,44(sp)
   1b528:	df000a17 	ldw	fp,40(sp)
   1b52c:	ddc00917 	ldw	r23,36(sp)
   1b530:	dd800817 	ldw	r22,32(sp)
   1b534:	dd400717 	ldw	r21,28(sp)
   1b538:	dd000617 	ldw	r20,24(sp)
   1b53c:	dcc00517 	ldw	r19,20(sp)
   1b540:	dc800417 	ldw	r18,16(sp)
   1b544:	dc400317 	ldw	r17,12(sp)
   1b548:	dc000217 	ldw	r16,8(sp)
   1b54c:	dec00c04 	addi	sp,sp,48
   1b550:	f800283a 	ret
   1b554:	98800117 	ldw	r2,4(r19)
   1b558:	80c00017 	ldw	r3,0(r16)
   1b55c:	10bfffc4 	addi	r2,r2,-1
   1b560:	17001526 	beq	r2,fp,1b5b8 <__call_exitprocs+0x164>
   1b564:	80000015 	stw	zero,0(r16)
   1b568:	183fde26 	beq	r3,zero,1b4e4 <__alt_mem_Flash_flash_data+0xf401b4e4>
   1b56c:	00800044 	movi	r2,1
   1b570:	1708983a 	sll	r4,r2,fp
   1b574:	98806217 	ldw	r2,392(r19)
   1b578:	9dc00117 	ldw	r23,4(r19)
   1b57c:	2084703a 	and	r2,r4,r2
   1b580:	1000061e 	bne	r2,zero,1b59c <__call_exitprocs+0x148>
   1b584:	183ee83a 	callr	r3
   1b588:	98800117 	ldw	r2,4(r19)
   1b58c:	15ffc51e 	bne	r2,r23,1b4a4 <__alt_mem_Flash_flash_data+0xf401b4a4>
   1b590:	a8800017 	ldw	r2,0(r21)
   1b594:	14ffd326 	beq	r2,r19,1b4e4 <__alt_mem_Flash_flash_data+0xf401b4e4>
   1b598:	003fc206 	br	1b4a4 <__alt_mem_Flash_flash_data+0xf401b4a4>
   1b59c:	98806317 	ldw	r2,396(r19)
   1b5a0:	2084703a 	and	r2,r4,r2
   1b5a4:	1000061e 	bne	r2,zero,1b5c0 <__call_exitprocs+0x16c>
   1b5a8:	89400017 	ldw	r5,0(r17)
   1b5ac:	9009883a 	mov	r4,r18
   1b5b0:	183ee83a 	callr	r3
   1b5b4:	003ff406 	br	1b588 <__alt_mem_Flash_flash_data+0xf401b588>
   1b5b8:	9f000115 	stw	fp,4(r19)
   1b5bc:	003fea06 	br	1b568 <__alt_mem_Flash_flash_data+0xf401b568>
   1b5c0:	89000017 	ldw	r4,0(r17)
   1b5c4:	183ee83a 	callr	r3
   1b5c8:	003fef06 	br	1b588 <__alt_mem_Flash_flash_data+0xf401b588>
   1b5cc:	98800017 	ldw	r2,0(r19)
   1b5d0:	982b883a 	mov	r21,r19
   1b5d4:	1027883a 	mov	r19,r2
   1b5d8:	983fb61e 	bne	r19,zero,1b4b4 <__alt_mem_Flash_flash_data+0xf401b4b4>
   1b5dc:	003fd106 	br	1b524 <__alt_mem_Flash_flash_data+0xf401b524>
   1b5e0:	0005883a 	mov	r2,zero
   1b5e4:	003ffa06 	br	1b5d0 <__alt_mem_Flash_flash_data+0xf401b5d0>

0001b5e8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1b5e8:	defffd04 	addi	sp,sp,-12
   1b5ec:	df000215 	stw	fp,8(sp)
   1b5f0:	df000204 	addi	fp,sp,8
   1b5f4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1b5f8:	008000b4 	movhi	r2,2
   1b5fc:	10bf2e44 	addi	r2,r2,-839
   1b600:	10000005 	stb	zero,0(r2)
   1b604:	e0bfff17 	ldw	r2,-4(fp)
   1b608:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1b60c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1b610:	10000226 	beq	r2,zero,1b61c <_exit+0x34>
    ALT_SIM_FAIL();
   1b614:	002af070 	cmpltui	zero,zero,43969
   1b618:	00000106 	br	1b620 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   1b61c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1b620:	003fff06 	br	1b620 <__alt_mem_Flash_flash_data+0xf401b620>
