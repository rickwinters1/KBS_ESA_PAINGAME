
KBS_ESA_PAINGAME.elf:     file format elf32-littlenios2
KBS_ESA_PAINGAME.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000106bc memsz 0x000106bc flags r-x
    LOAD off    0x000116dc vaddr 0x000106dc paddr 0x00012580 align 2**12
         filesz 0x00001ea4 memsz 0x00001ea4 flags rw-
    LOAD off    0x00014424 vaddr 0x00014424 paddr 0x00014424 align 2**12
         filesz 0x00000000 memsz 0x0000d434 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001011c  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000037c  00010360  00010360  00011360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ea4  000106dc  00012580  000116dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000d434  00014424  00014424  00014424  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00021858  00021858  00013580  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  00013580  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00013580  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cd0  00000000  00000000  000135a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023481  00000000  00000000  00014278  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000086be  00000000  00000000  000376f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a518  00000000  00000000  0003fdb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003044  00000000  00000000  0004a2d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000045c1  00000000  00000000  0004d314  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000047e0  00000000  00000000  000518d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  000560b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000005e8  00000000  00000000  000560d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0005b778  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0005b77e  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0005b783  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0005b784  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0005b785  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0005b789  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0005b78d  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0005b791  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0005b79a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0005b7a3  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0005b7ac  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  0005b7b7  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  0005b815  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  000663da  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00010360 l    d  .rodata	00000000 .rodata
000106dc l    d  .rwdata	00000000 .rwdata
00014424 l    d  .bss	00000000 .bss
00021858 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/rickert/Documents/GitHub/KBS_ESA_PAINGAME/KBS_ESA_PAINGAME_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Contoller.c
00000000 l    df *ABS*	00000000 Game.c
00000000 l    df *ABS*	00000000 Menu.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
000106dc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00002aa8 l     F .text	00000008 __fp_lock
00002ab0 l     F .text	00000008 __fp_unlock
00002ac4 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00003b14 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00003c40 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00003d60 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00003d8c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00003e8c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00003f80 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00004064 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000425c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000124f4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000044b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
000124f8 l     O .rwdata	00000004 lockid
0001449c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
000124fc l     O .rwdata	00000004 lockid
000144a4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00005eec l     F .text	00000044 OS_InitMisc
00005f30 l     F .text	00000068 OS_InitRdyList
00006090 l     F .text	000000e0 OS_InitTCBList
00005e10 l     F .text	000000dc OS_InitEventList
00005f98 l     F .text	0000007c OS_InitTaskIdle
00006014 l     F .text	0000007c OS_InitTaskStat
000062f0 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
000080f4 l     F .text	00000110 OS_FlagTaskRdy
00007e4c l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000c59c l     F .text	00000038 alt_dev_reg
000110b0 l     O .rwdata	0000106c JTAG_UART
0001211c l     O .rwdata	00000030 AV_Config
0001214c l     O .rwdata	00000030 Audio_Subsystem_Audio
0001217c l     O .rwdata	0000002c Char_LCD_16x2
000121a8 l     O .rwdata	0000002c IrDA
000121d4 l     O .rwdata	0000002c Expansion_JP5
00012200 l     O .rwdata	0000002c Green_LEDs
0001222c l     O .rwdata	0000002c HEX3_HEX0
00012258 l     O .rwdata	0000002c HEX7_HEX4
00012284 l     O .rwdata	0000002c Pushbuttons
000122b0 l     O .rwdata	0000002c Red_LEDs
000122dc l     O .rwdata	0000002c Slider_Switches
00012308 l     O .rwdata	00000038 PS2_Port
00012340 l     O .rwdata	00000038 PS2_Port_Dual
00012378 l     O .rwdata	0000002c Serial_Port
000123a4 l     O .rwdata	00000034 USB
000123d8 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
00012420 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
00012474 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000cc84 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0000cf2c l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000d704 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000ef20 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000f18c l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000f474 l     F .text	00000050 alt_get_errno
0000f4c4 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00014508 g     O .bss	00000004 alt_instruction_exception_handler
0001254a g     O .rwdata	00000002 OSTaskNameSize
00003a08 g     F .text	00000054 _isatty_r
00004188 g     F .text	000000d4 alt_main
00000fcc g     F .text	000000a8 _puts_r
00021758 g     O .bss	00000100 alt_irq
0000e2e0 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
00003a5c g     F .text	0000005c _lseek_r
00008958 g     F .text	000000d0 OS_MemInit
00012580 g       *ABS*	00000000 __flash_rwdata_start
0000c538 g     F .text	00000064 OSTimeSet
0000d870 g     F .text	0000003c alt_up_character_lcd_send_cmd
00004b68 g     F .text	00000610 OSEventPendMulti
00021858 g       *ABS*	00000000 __alt_heap_start
0000fad0 g     F .text	00000020 OSTaskCreateHook
00012522 g     O .rwdata	00000002 OSMboxEn
000051cc g     F .text	0000007c OSIntEnter
00003798 g     F .text	0000005c __sseek
00002df8 g     F .text	00000010 __sinit
0000ec68 g     F .text	00000100 alt_up_char_buffer_string
0000e100 g     F .text	00000034 read_CE_bit
00012532 g     O .rwdata	00000002 OSQEn
00002c60 g     F .text	00000068 __sfmoreglue
0000483c g     F .text	000000d0 __malloc_unlock
0000fb2c g     F .text	0000001c OSTaskStatHook
0000e484 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
0000e978 g     F .text	00000090 alt_up_rs232_read_fd
000144ac g     O .bss	00000001 OSLockNesting
000007b8 g     F .text	00000144 menu
00012570 g     O .rwdata	00000002 OSDataSize
000144ad g     O .bss	00000001 OSRunning
0000eb9c g     F .text	000000cc alt_up_char_buffer_draw
00014424 g     O .bss	00000004 counter3
00001fa8 g     F .text	0000015c memmove
0000fb64 g     F .text	0000001c OSInitHookBegin
00012568 g     O .rwdata	00000002 OSTmrSize
00002de0 g     F .text	00000018 _cleanup
000124a4 g     O .rwdata	00000004 gameModeMenu
000144b0 g     O .bss	00000004 OSIdleCtr
000124ac g     O .rwdata	00000004 xRechts
0000f884 g     F .text	00000020 altera_nios2_gen2_irq_init
0000f950 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0000d7fc g     F .text	00000074 get_DDRAM_addr
00006628 g     F .text	000002d4 OS_TCBInit
000124bc g     O .rwdata	00000004 yMenu
00000000 g     F .entry	0000001c __reset
0001256e g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001250e g     O .rwdata	00000002 OSEventSize
000144b4 g     O .bss	00000001 OSPrioHighRdy
000039b0 g     F .text	00000058 _fstat_r
0000faf0 g     F .text	00000020 OSTaskDelHook
00014488 g     O .bss	00000004 errno
00003714 g     F .text	00000008 __seofread
0000f930 g       .text	00000000 OSStartHighRdy
00014438 g     O .bss	00000004 pixel_buffer_y
0000ae3c g     F .text	000001ec OSTaskCreateExt
00007998 g     F .text	00000068 OSFlagPendGetFlagsRdy
0001254e g     O .rwdata	00000002 OSTaskStatStkSize
00006a88 g     F .text	00000308 OSFlagAccept
0000902c g     F .text	000000b8 OSQFlush
00008a28 g     F .text	00000140 OSQAccept
00014494 g     O .bss	00000004 alt_argv
0001a4a0 g       *ABS*	00000000 _gp
0000ac80 g     F .text	000001bc OSTaskCreate
0000a740 g     F .text	00000540 OSTaskChangePrio
000144a8 g     O .bss	00000004 alt_heapsem
000068fc g     F .text	0000018c OSDebugInit
0000b028 g     F .text	000003e0 OSTaskDel
000124b0 g     O .rwdata	00000004 xBoven
00010f30 g     O .rwdata	00000180 alt_fd_list
0001e534 g     O .bss	00000370 OSFlagTbl
00005bfc g     F .text	000000b4 OS_EventTaskRemove
0000f0cc g     F .text	00000090 alt_find_dev
00001e70 g     F .text	00000138 memcpy
00012538 g     O .rwdata	00000002 OSRdyTblSize
0000da0c g     F .text	00000050 alt_up_character_lcd_write_fd
0000ed68 g     F .text	0000005c alt_up_char_buffer_clear
00002ab8 g     F .text	0000000c _cleanup_r
0000f24c g     F .text	00000078 alt_io_redirect
00010360 g       *ABS*	00000000 __DTOR_END__
0000df8c g     F .text	00000090 alt_up_irda_write_fd
0000e904 g     F .text	00000074 alt_up_rs232_read_data
00001074 g     F .text	00000014 puts
0000fe74 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000490c g     F .text	00000120 OSEventNameGet
0001251c g     O .rwdata	00000002 OSFlagMax
0001446c g     O .bss	00000004 last
00005248 g     F .text	000000f4 OSIntExit
00012556 g     O .rwdata	00000002 OSTCBSize
000144b5 g     O .bss	00000001 OSPrioCur
0000dd88 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0000d190 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00003c30 g     F .text	00000008 .hidden __udivsi3
00003edc g     F .text	000000a4 isatty
0001253c g     O .rwdata	00000002 OSStkWidth
00012530 g     O .rwdata	00000002 OSPtrSize
00012510 g     O .rwdata	00000002 OSEventTblSize
0000dd2c g     F .text	0000005c alt_up_irda_disable_read_interrupt
000124b8 g     O .rwdata	00000004 xMenu
0000f8a4 g       .text	00000000 OSCtxSw
0000fde8 g     F .text	0000008c alt_icache_flush
00014484 g     O .bss	00000004 __malloc_top_pad
0000056c g     F .text	0000011c moveDown
000144b8 g     O .bss	00000004 OSTCBList
0001448c g     O .bss	00000004 alt_fd_list_lock
00001120 g     F .text	000004c0 __sfvwrite_r
0001e8a4 g     O .bss	00000c30 OSMemTbl
000144bc g     O .bss	00000001 OSTickStepState
0000266c g     F .text	00000054 _sbrk_r
00014534 g     O .bss	00002000 menu_stk
00012534 g     O .rwdata	00000002 OSQMax
0001f4d4 g     O .bss	00000800 OSTaskStatStk
00008588 g     F .text	000000f8 OSMemNameGet
00012514 g     O .rwdata	00000002 OSFlagEn
00003ab8 g     F .text	0000005c _read_r
0001255a g     O .rwdata	00000002 OSTimeTickHookEn
0000954c g     F .text	00000168 OSQPost
00008204 g     F .text	000000a0 OS_FlagUnlink
0001443c g     O .bss	00000004 blue_y2
000124ec g     O .rwdata	00000004 alt_max_fd
0000e880 g     F .text	00000044 alt_up_rs232_check_parity
000061c0 g     F .text	00000064 OS_MemCopy
00006224 g     F .text	000000cc OS_Sched
000038ac g     F .text	000000f0 _fclose_r
00008498 g     F .text	000000f0 OSMemGet
0000b708 g     F .text	000001c0 OSTaskNameSet
0000e134 g     F .text	00000030 read_num_bytes_available
00002a78 g     F .text	00000030 fflush
00014480 g     O .bss	00000004 __malloc_max_sbrked_mem
000144c0 g     O .bss	00000004 OSCtxSwCtr
0000fb48 g     F .text	0000001c OSTimeTickHook
0000f2c4 g     F .text	000001b0 alt_irq_register
0001251e g     O .rwdata	00000002 OSFlagNameSize
0000e09c g     F .text	00000034 read_RI_bit
00005cb0 g     F .text	000000fc OS_EventTaskRemoveMulti
00014428 g     O .bss	00000004 controllerSem
00005ab0 g     F .text	0000014c OS_EventTaskWaitMulti
00012536 g     O .rwdata	00000002 OSQSize
000040b4 g     F .text	000000d4 lseek
0000a050 g     F .text	00000268 OSSemPend
000124cc g     O .rwdata	00000004 _global_impure_ptr
00002104 g     F .text	00000568 _realloc_r
00014464 g     O .bss	00000004 vorige
00012520 g     O .rwdata	00000002 OSLowestPrio
00021858 g       *ABS*	00000000 __bss_end
0000fbb8 g     F .text	00000020 OSTCBInitHook
00012566 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0000f780 g     F .text	00000104 alt_tick
0001442c g     O .bss	00000004 counter1
00012508 g     O .rwdata	00000002 OSEventEn
00012562 g     O .rwdata	00000002 OSTmrCfgNameSize
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0000e198 g     F .text	0000002c read_data_byte
00002e18 g     F .text	00000018 __fp_lock_all
00008010 g     F .text	000000e4 OS_FlagInit
0000f6e8 g     F .text	00000098 alt_alarm_stop
0000e0d0 g     F .text	00000030 read_RE_bit
00012544 g     O .rwdata	00000002 OSTaskIdleStkSize
000144fc g     O .bss	00000004 alt_irq_active
00009c38 g     F .text	000000b0 OSSemAccept
00000f3c g     F .text	00000090 VGA_text
00008798 g     F .text	000000d8 OSMemPut
00014440 g     O .bss	00000004 pixel_buffer_x
000082a4 g     F .text	000001f4 OSMemCreate
000144c4 g     O .bss	00000004 OSIdleCtrMax
00016534 g     O .bss	00002000 controller1_stk
0000ddc8 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
00010f08 g     O .rwdata	00000028 alt_dev_null
00012558 g     O .rwdata	00000002 OSTicksPerSec
0000dca0 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0000e05c g     F .text	00000040 alt_up_parallel_port_open_dev
0000f8a4 g       .text	00000000 OSIntCtxSw
0000e33c g     F .text	00000074 alt_up_ps2_write_data_byte
0000ef04 g     F .text	0000001c alt_dcache_flush_all
000124c0 g     O .rwdata	00000002 geel
000144c8 g     O .bss	00000004 OSTCBFreeList
00012580 g       *ABS*	00000000 __ram_rwdata_end
0000a2b8 g     F .text	0000016c OSSemPendAbort
000124e4 g     O .rwdata	00000008 alt_dev_list
00004508 g     F .text	000000f8 write
0001255c g     O .rwdata	00000002 OSVersionNbr
000106dc g       *ABS*	00000000 __ram_rodata_end
00003ddc g     F .text	000000b0 fstat
0000ea08 g     F .text	00000094 alt_up_rs232_write_fd
000008fc g     F .text	000002e8 selecteerMenu
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00012504 g     O .rwdata	00000004 OSEndiannessTest
00003c38 g     F .text	00000008 .hidden __umodsi3
00014444 g     O .bss	00000004 blue_x1
00012516 g     O .rwdata	00000002 OSFlagGrpSize
00000280 g     F .text	00000070 controllers
00021858 g       *ABS*	00000000 end
0000e678 g     F .text	00000098 alt_up_ps2_write_fd
0000de04 g     F .text	00000044 alt_up_irda_check_parity
0000eadc g     F .text	00000080 alt_up_char_buffer_init
0000cb44 g     F .text	00000140 altera_avalon_jtag_uart_init
00006484 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00000688 g     F .text	00000130 Game
00014468 g     O .bss	00000002 zwart
00010360 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000d77c g     F .text	00000080 alt_avalon_timer_sc_init
0000d444 g     F .text	000002c0 altera_avalon_jtag_uart_write
00002e08 g     F .text	00000004 __sfp_lock_acquire
00001d88 g     F .text	000000e8 memchr
00006170 g     F .text	00000050 OS_MemClr
0000d920 g     F .text	00000078 alt_up_character_lcd_write
0000f974 g     F .text	0000015c OSTaskStkInit
00002f6c g     F .text	000002f0 _free_r
0000580c g     F .text	00000198 OS_EventTaskRdy
00010190 g     F .text	00000194 __call_exitprocs
000144cc g     O .bss	00000001 OSCPUUsage
000124d4 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00014500 g     O .bss	00000004 _alt_tick_rate
000090e4 g     F .text	000002fc OSQPend
0000c034 g     F .text	00000148 OSTimeDly
00018534 g     O .bss	00002000 controller2_stk
00014504 g     O .bss	00000004 _alt_nticks
000042ac g     F .text	000000fc read
0000c608 g     F .text	000003d8 alt_sys_init
0000db58 g     F .text	00000088 alt_up_character_lcd_shift_display
0001007c g     F .text	00000114 __register_exitproc
000144cd g     O .bss	00000001 OSTaskCtr
000124c2 g     O .rwdata	00000002 rood
0000e598 g     F .text	00000054 alt_up_ps2_clear_fifo
0000e844 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00000e88 g     F .text	000000b4 VGA_box
0000c17c g     F .text	00000168 OSTimeDlyHMSM
0000dbe0 g     F .text	0000008c alt_up_character_lcd_erase_pos
0000d03c g     F .text	00000068 altera_avalon_jtag_uart_close
000106dc g       *ABS*	00000000 __ram_rwdata_start
00010360 g       *ABS*	00000000 __ram_rodata_start
0001450c g     O .bss	00000028 __malloc_current_mallinfo
0001250a g     O .rwdata	00000002 OSEventMax
0000a424 g     F .text	00000110 OSSemPost
00014448 g     O .bss	00000004 blue_y1
000053c4 g     F .text	000000d8 OSSchedUnlock
0000c9e0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000fcec g     F .text	000000fc alt_get_fd
000144d0 g     O .bss	00000004 OSMemFreeList
00005508 g     F .text	000000ac OSStatInit
00007d88 g     F .text	000000c4 OSFlagQuery
00012540 g     O .rwdata	00000002 OSTaskCreateExtEn
00003858 g     F .text	00000054 _close_r
0000ff5c g     F .text	0000007c memcmp
000057f0 g     F .text	0000001c OS_Dummy
0000caa0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00021858 g       *ABS*	00000000 __alt_stack_base
0000caf0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00014470 g     O .bss	00000004 changed
0000dcd4 g     F .text	00000058 alt_up_irda_enable_read_interrupt
000026c0 g     F .text	00000154 __swsetup_r
0001fcd4 g     O .bss	000001e0 OSQTbl
000002f0 g     F .text	00000118 controller
00002cc8 g     F .text	00000118 __sfp
00010b00 g     O .rwdata	00000408 __malloc_av_
0001444c g     O .bss	00000004 ALT_y
00002e14 g     F .text	00000004 __sinit_lock_release
000144d4 g     O .bss	00000004 OSTCBHighRdy
000036c0 g     F .text	00000054 __sread
000144d8 g     O .bss	00000004 OSQFreeList
0000e7a8 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
0000fbd8 g     F .text	00000114 alt_find_file
0000ef70 g     F .text	000000a4 alt_dev_llist_insert
0000471c g     F .text	00000120 __malloc_lock
00004408 g     F .text	000000b0 sbrk
00014450 g     O .bss	00000004 ALT_inc_y
00004a2c g     F .text	0000013c OSEventNameSet
00002a1c g     F .text	0000005c _fflush_r
000144dc g     O .bss	00000001 OSRdyGrp
00014424 g       *ABS*	00000000 __bss_start
0000359c g     F .text	00000124 memset
00000d00 g     F .text	00000188 main
00014498 g     O .bss	00000004 alt_envp
0001447c g     O .bss	00000004 __malloc_max_total_mem
0000eb5c g     F .text	00000040 alt_up_char_buffer_open_dev
0000ca40 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0001040c g     O .rodata	00000100 OSUnMapTbl
0001253a g     O .rwdata	00000002 OSSemEn
0000dad0 g     F .text	00000088 alt_up_character_lcd_shift_cursor
00007a00 g     F .text	00000388 OSFlagPost
000037f4 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000399c g     F .text	00000014 fclose
000059a4 g     F .text	0000010c OS_EventTaskWait
0000e528 g     F .text	00000070 alt_up_ps2_read_data_byte
00014478 g     O .bss	00000004 timeout
00006560 g     F .text	000000c8 OS_TaskStatStkChk
0000b408 g     F .text	00000158 OSTaskDelReq
000015e0 g     F .text	000007a8 _malloc_r
000124f0 g     O .rwdata	00000004 alt_errno
0000549c g     F .text	0000006c OSStart
000046c0 g     F .text	0000005c __env_unlock
0000325c g     F .text	000000c4 _fwalk
0000b8c8 g     F .text	000001f8 OSTaskResume
00008870 g     F .text	000000e8 OSMemQuery
0001254c g     O .rwdata	00000002 OSTaskStatEn
0001a534 g     O .bss	00002000 Game_stk
0000de48 g     F .text	00000040 alt_up_irda_write_data
00012526 g     O .rwdata	00000002 OSMemMax
000096b4 g     F .text	00000170 OSQPostFront
0000e710 g     F .text	00000040 alt_up_ps2_open_dev
00003b80 g     F .text	00000054 .hidden __divsi3
000144dd g     O .bss	00000003 OSRdyTbl
00012500 g     O .rwdata	00000002 OSDebugEn
0000d8e0 g     F .text	00000040 alt_up_character_lcd_open_dev
00002e48 g     F .text	00000124 _malloc_trim_r
0000e288 g     F .text	00000058 alt_up_ps2_enable_read_interrupt
00010360 g       *ABS*	00000000 __CTOR_END__
000124a2 g     O .rwdata	00000002 balWit
00012518 g     O .rwdata	00000002 OSFlagNodeSize
00012560 g     O .rwdata	00000002 OSTmrCfgMax
0000d8ac g     F .text	00000034 alt_up_character_lcd_init
0000ffd8 g     F .text	000000a4 strcmp
00008b68 g     F .text	000001fc OSQCreate
0000b560 g     F .text	000001a8 OSTaskNameGet
00010360 g       *ABS*	00000000 __flash_rodata_start
00009824 g     F .text	0000020c OSQPostOpt
000055b4 g     F .text	0000021c OSTimeTick
00012548 g     O .rwdata	00000002 OSTaskMax
00010360 g       *ABS*	00000000 __DTOR_LIST__
00009ce8 g     F .text	00000100 OSSemCreate
0001256c g     O .rwdata	00000002 OSTmrWheelSize
0000ea9c g     F .text	00000040 alt_up_rs232_open_dev
00012542 g     O .rwdata	00000002 OSTaskDelEn
0000a534 g     F .text	00000110 OSSemQuery
00008d64 g     F .text	000002c8 OSQDel
000093e0 g     F .text	0000016c OSQPendAbort
0000c5d4 g     F .text	00000034 alt_irq_init
000043a8 g     F .text	00000060 alt_release_fd
00000408 g     F .text	0000004c checkID
0000e164 g     F .text	00000034 read_data_valid
0000dc6c g     F .text	00000034 alt_up_character_lcd_cursor_off
0000e420 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0000ff10 g     F .text	00000014 atexit
000037fc g     F .text	0000005c _write_r
0000533c g     F .text	00000088 OSSchedLock
00006d90 g     F .text	00000128 OSFlagCreate
000124d0 g     O .rwdata	00000004 _impure_ptr
00014490 g     O .bss	00000004 alt_argc
00002814 g     F .text	00000208 __sflush_r
0000f070 g     F .text	0000005c _do_dtors
00012512 g     O .rwdata	00000002 OSEventMultiEn
00006eb8 g     F .text	00000270 OSFlagDel
000144e0 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
000073a8 g     F .text	000005f0 OSFlagPend
0001255e g     O .rwdata	00000002 OSTmrEn
00002e30 g     F .text	00000018 __fp_unlock_all
000124dc g     O .rwdata	00000008 alt_fs_list
00006360 g     F .text	00000074 OS_StrCopy
0000e750 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0000e8c4 g     F .text	00000040 alt_up_rs232_write_data
00000454 g     F .text	00000118 moveUp
00012528 g     O .rwdata	00000002 OSMemNameSize
00014454 g     O .bss	00000004 ALT_x1
0000fb80 g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
00012554 g     O .rwdata	00000002 OSTCBPrioTblMax
00012550 g     O .rwdata	00000002 OSTaskStatStkChkEn
00012524 g     O .rwdata	00000002 OSMemEn
0001252e g     O .rwdata	00000002 OSMutexEn
00012580 g       *ABS*	00000000 _edata
000124c8 g     O .rwdata	00000004 interval_timer_ptr
00021858 g       *ABS*	00000000 _end
000144e4 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000d0a4 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0000c2e4 g     F .text	000001f0 OSTimeDlyResume
00007258 g     F .text	00000150 OSFlagNameSet
0000bac0 g     F .text	000001c8 OSTaskStkChk
0001252a g     O .rwdata	00000002 OSMemSize
0000371c g     F .text	0000007c __swrite
000124d8 g     O .rwdata	00000004 __malloc_trim_threshold
000144e8 g     O .bss	00000004 OSTCBCur
0000ff24 g     F .text	00000038 exit
0000de88 g     F .text	00000074 alt_up_irda_read_data
0001252c g     O .rwdata	00000002 OSMemTblSize
00003320 g     F .text	000000c4 _fwalk_reent
0000e1c4 g     F .text	000000c4 alt_up_ps2_init
00003bd4 g     F .text	0000005c .hidden __modsi3
0001c534 g     O .bss	00002000 menu_stk2
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00002e0c g     F .text	00000004 __sfp_lock_release
00005178 g     F .text	00000054 OSInit
0000be9c g     F .text	0000012c OSTaskQuery
0000d998 g     F .text	00000074 alt_up_character_lcd_string
00009b8c g     F .text	000000ac OS_QInit
000063d4 g     F .text	00000054 OS_StrLen
0000e01c g     F .text	00000040 alt_up_irda_open_dev
00008680 g     F .text	00000118 OSMemNameSet
00012546 g     O .rwdata	00000002 OSTaskProfileEn
000144ec g     O .bss	00000004 OSTime
00000c20 g     F .text	00000058 tekenBox
0001feb4 g     O .bss	00000800 OSTaskIdleStk
00010324 g     F .text	0000003c _exit
00014458 g     O .bss	00000004 ALT_inc_x
0000edc4 g     F .text	00000140 alt_alarm_start
00007128 g     F .text	00000130 OSFlagNameGet
0000c4d4 g     F .text	00000064 OSTimeGet
000033e4 g     F .text	000001b8 __smakebuf_r
0000e3b0 g     F .text	00000070 alt_up_ps2_wait_for_ack
00001088 g     F .text	00000098 strlen
0000fb10 g     F .text	0000001c OSTaskSwHook
0000f590 g     F .text	00000158 open
000206b4 g     O .bss	00000b40 OSEventTbl
000211f4 g     O .bss	00000510 OSTCBTbl
0000a644 g     F .text	000000fc OSSemSet
000124c4 g     O .rwdata	00000004 eenkeer
00000be4 g     F .text	0000003c clearScreen
0001445c g     O .bss	00000004 ALT_x2
0000f15c g     F .text	00000030 alt_icache_flush_all
0000da5c g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00012574 g     O .rwdata	00000004 alt_priority_mask
00009de8 g     F .text	00000268 OSSemDel
000144f0 g     O .bss	00000004 OSFlagFreeList
0001250c g     O .rwdata	00000002 OSEventNameSize
000144f4 g     O .bss	00000001 OSStatRdy
00021704 g     O .bss	00000054 OSTCBPrioTbl
00004600 g     F .text	000000c0 __env_lock
0000e5ec g     F .text	0000008c alt_up_ps2_read_fd
00012552 g     O .rwdata	00000002 OSTaskSwHookEn
000124a8 g     O .rwdata	00000004 xLinks
0000defc g     F .text	00000090 alt_up_irda_read_fd
00012578 g     O .rwdata	00000008 alt_alarm_list
0001251a g     O .rwdata	00000002 OSFlagWidth
0000f014 g     F .text	0000005c _do_ctors
000124a0 g     O .rwdata	00000002 kleur
0000e804 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00014434 g     O .bss	00000002 balZwart
00003c90 g     F .text	000000d0 close
00014460 g     O .bss	00000004 blue_x2
000144a0 g     O .bss	00000004 alt_envsem
000144f8 g     O .bss	00000004 OSIdleCtrRun
000124b4 g     O .rwdata	00000004 xOnder
000057d0 g     F .text	00000020 OSVersion
00012564 g     O .rwdata	00000002 OSTmrCfgWheelSize
00003fe4 g     F .text	00000080 alt_load
0000bfc8 g     F .text	0000006c OS_TaskStkClr
00000c78 g     F .text	00000088 tekenBox2
0001253e g     O .rwdata	00000002 OSTaskCreateEn
00014474 g     O .bss	00000004 menuSem
00005dac g     F .text	00000064 OS_EventWaitListInit
0000fb9c g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00002e10 g     F .text	00000004 __sinit_lock_acquire
0000bc88 g     F .text	00000214 OSTaskSuspend
00014430 g     O .bss	00000004 counter2
00006428 g     F .text	0000005c OS_TaskIdle
0001256a g     O .rwdata	00000002 OSTmrTblSize
00009a30 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00051cc0 	call	51cc <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	1085d604 	addi	r2,r2,5976
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	1085d604 	addi	r2,r2,5976
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	00052480 	call	5248 <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a81a17 	ldw	r2,-24472(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a81a17 	ldw	r2,-24472(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     250:	d6a92814 	ori	gp,gp,42144
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	10910914 	ori	r2,r2,17444

    movhi r3, %hi(__bss_end)
     25c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     260:	18c61614 	ori	r3,r3,6232

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	0003fe40 	call	3fe4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	00041880 	call	4188 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <controllers>:

short kleur = 0x0000ff;
int counter1, counter2, counter3 = 0;


void controllers(void* pdata){
     280:	defffb04 	addi	sp,sp,-20
     284:	dfc00415 	stw	ra,16(sp)
     288:	df000315 	stw	fp,12(sp)
     28c:	df000304 	addi	fp,sp,12
     290:	e13fff15 	stw	r4,-4(fp)



	int ID = (int*)pdata;
     294:	e0bfff17 	ldw	r2,-4(fp)
     298:	e0bffe15 	stw	r2,-8(fp)
	int hoogte = 50;
     29c:	00800c84 	movi	r2,50
     2a0:	e0bffd15 	stw	r2,-12(fp)

	while (1){
		if (controller(ID) == 1){
     2a4:	e13ffe17 	ldw	r4,-8(fp)
     2a8:	00002f00 	call	2f0 <controller>
     2ac:	10800058 	cmpnei	r2,r2,1
     2b0:	1000051e 	bne	r2,zero,2c8 <controllers+0x48>
			hoogte = moveDown(ID, hoogte);
     2b4:	e13ffe17 	ldw	r4,-8(fp)
     2b8:	e17ffd17 	ldw	r5,-12(fp)
     2bc:	000056c0 	call	56c <moveDown>
     2c0:	e0bffd15 	stw	r2,-12(fp)
     2c4:	00000706 	br	2e4 <controllers+0x64>
		}else if(controller(ID) == 0){
     2c8:	e13ffe17 	ldw	r4,-8(fp)
     2cc:	00002f00 	call	2f0 <controller>
     2d0:	1000041e 	bne	r2,zero,2e4 <controllers+0x64>
			hoogte = moveUp(ID, hoogte);
     2d4:	e13ffe17 	ldw	r4,-8(fp)
     2d8:	e17ffd17 	ldw	r5,-12(fp)
     2dc:	00004540 	call	454 <moveUp>
     2e0:	e0bffd15 	stw	r2,-12(fp)
		}

		OSTimeDly(1);
     2e4:	01000044 	movi	r4,1
     2e8:	000c0340 	call	c034 <OSTimeDly>
	}
     2ec:	003fed06 	br	2a4 <__alt_mem_Flash_flash_data+0xf40002a4>

000002f0 <controller>:


}

int controller(int ID){
     2f0:	defff904 	addi	sp,sp,-28
     2f4:	dfc00615 	stw	ra,24(sp)
     2f8:	df000515 	stw	fp,20(sp)
     2fc:	df000504 	addi	fp,sp,20
     300:	e13fff15 	stw	r4,-4(fp)
	alt_up_parallel_port_dev * KEY_ptr = alt_up_parallel_port_open_dev ("/dev/Pushbuttons");
     304:	01000074 	movhi	r4,1
     308:	2100d804 	addi	r4,r4,864
     30c:	000e05c0 	call	e05c <alt_up_parallel_port_open_dev>
     310:	e0bffb15 	stw	r2,-20(fp)
	alt_up_parallel_port_dev * SW_switch_ptr	= alt_up_parallel_port_open_dev ("/dev/Slider_Switches");
     314:	01000074 	movhi	r4,1
     318:	2100dd04 	addi	r4,r4,884
     31c:	000e05c0 	call	e05c <alt_up_parallel_port_open_dev>
     320:	e0bffc15 	stw	r2,-16(fp)

	int KEY_value, SW_value;
	INT8U err;

	SW_value = alt_up_parallel_port_read_data(SW_switch_ptr);
     324:	e0bffc17 	ldw	r2,-16(fp)
     328:	10800a17 	ldw	r2,40(r2)
     32c:	10800037 	ldwio	r2,0(r2)
     330:	e0bffd15 	stw	r2,-12(fp)
	KEY_value = alt_up_parallel_port_read_data(KEY_ptr); 		// read the pushbutton KEY values
     334:	e0bffb17 	ldw	r2,-20(fp)
     338:	10800a17 	ldw	r2,40(r2)
     33c:	10800037 	ldwio	r2,0(r2)
     340:	e0bffe15 	stw	r2,-8(fp)

	if(ID == 2){
     344:	e0bfff17 	ldw	r2,-4(fp)
     348:	10800098 	cmpnei	r2,r2,2
     34c:	1000131e 	bne	r2,zero,39c <controller+0xac>
		if(KEY_value != 0){
     350:	e0bffe17 	ldw	r2,-8(fp)
     354:	10000f26 	beq	r2,zero,394 <controller+0xa4>
			if(KEY_value == 8){
     358:	e0bffe17 	ldw	r2,-8(fp)
     35c:	10800218 	cmpnei	r2,r2,8
     360:	1000021e 	bne	r2,zero,36c <controller+0x7c>
				return 1;
     364:	00800044 	movi	r2,1
     368:	00002206 	br	3f4 <controller+0x104>
			}
			if(KEY_value == 4){
     36c:	e0bffe17 	ldw	r2,-8(fp)
     370:	10800118 	cmpnei	r2,r2,4
     374:	1000021e 	bne	r2,zero,380 <controller+0x90>
				return 0;
     378:	0005883a 	mov	r2,zero
     37c:	00001d06 	br	3f4 <controller+0x104>
			}
			if(KEY_value == 2){
     380:	e0bffe17 	ldw	r2,-8(fp)
     384:	10800098 	cmpnei	r2,r2,2
     388:	10001a1e 	bne	r2,zero,3f4 <controller+0x104>
				return 2;
     38c:	00800084 	movi	r2,2
     390:	00001806 	br	3f4 <controller+0x104>
			}
		}else{
			return 3;
     394:	008000c4 	movi	r2,3
     398:	00001606 	br	3f4 <controller+0x104>
		}

	}else if(ID == 1){
     39c:	e0bfff17 	ldw	r2,-4(fp)
     3a0:	10800058 	cmpnei	r2,r2,1
     3a4:	1000131e 	bne	r2,zero,3f4 <controller+0x104>
		if(SW_value != 0){
     3a8:	e0bffd17 	ldw	r2,-12(fp)
     3ac:	10000f26 	beq	r2,zero,3ec <controller+0xfc>
			if(SW_value == 2){
     3b0:	e0bffd17 	ldw	r2,-12(fp)
     3b4:	10800098 	cmpnei	r2,r2,2
     3b8:	1000021e 	bne	r2,zero,3c4 <controller+0xd4>
				return 1;
     3bc:	00800044 	movi	r2,1
     3c0:	00000c06 	br	3f4 <controller+0x104>
			}
			if(SW_value == 1){
     3c4:	e0bffd17 	ldw	r2,-12(fp)
     3c8:	10800058 	cmpnei	r2,r2,1
     3cc:	1000021e 	bne	r2,zero,3d8 <controller+0xe8>
				return 0;
     3d0:	0005883a 	mov	r2,zero
     3d4:	00000706 	br	3f4 <controller+0x104>
			}
			if(SW_value >= 3){
     3d8:	e0bffd17 	ldw	r2,-12(fp)
     3dc:	108000d0 	cmplti	r2,r2,3
     3e0:	1000041e 	bne	r2,zero,3f4 <controller+0x104>
				return 2;
     3e4:	00800084 	movi	r2,2
     3e8:	00000206 	br	3f4 <controller+0x104>
			}
		}else{
			return 3;
     3ec:	008000c4 	movi	r2,3
     3f0:	00000006 	br	3f4 <controller+0x104>
		}
	}

}
     3f4:	e037883a 	mov	sp,fp
     3f8:	dfc00117 	ldw	ra,4(sp)
     3fc:	df000017 	ldw	fp,0(sp)
     400:	dec00204 	addi	sp,sp,8
     404:	f800283a 	ret

00000408 <checkID>:

int checkID(int ID){
     408:	defffe04 	addi	sp,sp,-8
     40c:	df000115 	stw	fp,4(sp)
     410:	df000104 	addi	fp,sp,4
     414:	e13fff15 	stw	r4,-4(fp)
	if(ID == 1){
     418:	e0bfff17 	ldw	r2,-4(fp)
     41c:	10800058 	cmpnei	r2,r2,1
     420:	1000021e 	bne	r2,zero,42c <checkID+0x24>
		return 15;
     424:	008003c4 	movi	r2,15
     428:	00000606 	br	444 <checkID+0x3c>
	}else if(ID == 2){
     42c:	e0bfff17 	ldw	r2,-4(fp)
     430:	10800098 	cmpnei	r2,r2,2
     434:	1000021e 	bne	r2,zero,440 <checkID+0x38>
		return 300;
     438:	00804b04 	movi	r2,300
     43c:	00000106 	br	444 <checkID+0x3c>

	}
	return 0;
     440:	0005883a 	mov	r2,zero
}
     444:	e037883a 	mov	sp,fp
     448:	df000017 	ldw	fp,0(sp)
     44c:	dec00104 	addi	sp,sp,4
     450:	f800283a 	ret

00000454 <moveUp>:

int moveUp(int ID, int current){
     454:	defff904 	addi	sp,sp,-28
     458:	dfc00615 	stw	ra,24(sp)
     45c:	df000515 	stw	fp,20(sp)
     460:	df000504 	addi	fp,sp,20
     464:	e13ffe15 	stw	r4,-8(fp)
     468:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     46c:	e0bfff17 	ldw	r2,-4(fp)
     470:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     474:	e13ffe17 	ldw	r4,-8(fp)
     478:	00004080 	call	408 <checkID>
     47c:	e0bffd15 	stw	r2,-12(fp)

	if(boven >= 4 && boven <= 184){
     480:	e0bffc17 	ldw	r2,-16(fp)
     484:	10800110 	cmplti	r2,r2,4
     488:	10001f1e 	bne	r2,zero,508 <moveUp+0xb4>
     48c:	e0bffc17 	ldw	r2,-16(fp)
     490:	10802e48 	cmpgei	r2,r2,185
     494:	10001c1e 	bne	r2,zero,508 <moveUp+0xb4>
		VGA_box(X, boven, X + 5, boven + 1, kleur);
     498:	e0bffd17 	ldw	r2,-12(fp)
     49c:	11800144 	addi	r6,r2,5
     4a0:	e0bffc17 	ldw	r2,-16(fp)
     4a4:	10c00044 	addi	r3,r2,1
     4a8:	d0a0000b 	ldhu	r2,-32768(gp)
     4ac:	10bfffcc 	andi	r2,r2,65535
     4b0:	10a0001c 	xori	r2,r2,32768
     4b4:	10a00004 	addi	r2,r2,-32768
     4b8:	d8800015 	stw	r2,0(sp)
     4bc:	e13ffd17 	ldw	r4,-12(fp)
     4c0:	e17ffc17 	ldw	r5,-16(fp)
     4c4:	180f883a 	mov	r7,r3
     4c8:	0000e880 	call	e88 <VGA_box>
		VGA_box(X, boven +50, X + 5, boven + 51, 0);
     4cc:	e0bffc17 	ldw	r2,-16(fp)
     4d0:	11400c84 	addi	r5,r2,50
     4d4:	e0bffd17 	ldw	r2,-12(fp)
     4d8:	10c00144 	addi	r3,r2,5
     4dc:	e0bffc17 	ldw	r2,-16(fp)
     4e0:	10800cc4 	addi	r2,r2,51
     4e4:	d8000015 	stw	zero,0(sp)
     4e8:	e13ffd17 	ldw	r4,-12(fp)
     4ec:	180d883a 	mov	r6,r3
     4f0:	100f883a 	mov	r7,r2
     4f4:	0000e880 	call	e88 <VGA_box>
		boven--;
     4f8:	e0bffc17 	ldw	r2,-16(fp)
     4fc:	10bfffc4 	addi	r2,r2,-1
     500:	e0bffc15 	stw	r2,-16(fp)
int moveUp(int ID, int current){
	int boven = current;

	int X = checkID(ID);

	if(boven >= 4 && boven <= 184){
     504:	00001306 	br	554 <moveUp+0x100>
		VGA_box(X, boven, X + 5, boven + 1, kleur);
		VGA_box(X, boven +50, X + 5, boven + 51, 0);
		boven--;
	}else if(boven > 184){
     508:	e0bffc17 	ldw	r2,-16(fp)
     50c:	10802e50 	cmplti	r2,r2,185
     510:	1000101e 	bne	r2,zero,554 <moveUp+0x100>
		VGA_box(X, boven, X + 5, boven + 1, kleur);
     514:	e0bffd17 	ldw	r2,-12(fp)
     518:	11800144 	addi	r6,r2,5
     51c:	e0bffc17 	ldw	r2,-16(fp)
     520:	10c00044 	addi	r3,r2,1
     524:	d0a0000b 	ldhu	r2,-32768(gp)
     528:	10bfffcc 	andi	r2,r2,65535
     52c:	10a0001c 	xori	r2,r2,32768
     530:	10a00004 	addi	r2,r2,-32768
     534:	d8800015 	stw	r2,0(sp)
     538:	e13ffd17 	ldw	r4,-12(fp)
     53c:	e17ffc17 	ldw	r5,-16(fp)
     540:	180f883a 	mov	r7,r3
     544:	0000e880 	call	e88 <VGA_box>
		boven--;
     548:	e0bffc17 	ldw	r2,-16(fp)
     54c:	10bfffc4 	addi	r2,r2,-1
     550:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     554:	e0bffc17 	ldw	r2,-16(fp)

}
     558:	e037883a 	mov	sp,fp
     55c:	dfc00117 	ldw	ra,4(sp)
     560:	df000017 	ldw	fp,0(sp)
     564:	dec00204 	addi	sp,sp,8
     568:	f800283a 	ret

0000056c <moveDown>:
int moveDown(int ID, int current){
     56c:	defff904 	addi	sp,sp,-28
     570:	dfc00615 	stw	ra,24(sp)
     574:	df000515 	stw	fp,20(sp)
     578:	df000504 	addi	fp,sp,20
     57c:	e13ffe15 	stw	r4,-8(fp)
     580:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     584:	e0bfff17 	ldw	r2,-4(fp)
     588:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     58c:	e13ffe17 	ldw	r4,-8(fp)
     590:	00004080 	call	408 <checkID>
     594:	e0bffd15 	stw	r2,-12(fp)

	if(boven <= 184 && boven >= 4){
     598:	e0bffc17 	ldw	r2,-16(fp)
     59c:	10802e48 	cmpgei	r2,r2,185
     5a0:	10001f1e 	bne	r2,zero,620 <moveDown+0xb4>
     5a4:	e0bffc17 	ldw	r2,-16(fp)
     5a8:	10800110 	cmplti	r2,r2,4
     5ac:	10001c1e 	bne	r2,zero,620 <moveDown+0xb4>
		VGA_box(X, boven + 50, X + 5, boven + 51, kleur);
     5b0:	e0bffc17 	ldw	r2,-16(fp)
     5b4:	11400c84 	addi	r5,r2,50
     5b8:	e0bffd17 	ldw	r2,-12(fp)
     5bc:	11800144 	addi	r6,r2,5
     5c0:	e0bffc17 	ldw	r2,-16(fp)
     5c4:	10c00cc4 	addi	r3,r2,51
     5c8:	d0a0000b 	ldhu	r2,-32768(gp)
     5cc:	10bfffcc 	andi	r2,r2,65535
     5d0:	10a0001c 	xori	r2,r2,32768
     5d4:	10a00004 	addi	r2,r2,-32768
     5d8:	d8800015 	stw	r2,0(sp)
     5dc:	e13ffd17 	ldw	r4,-12(fp)
     5e0:	180f883a 	mov	r7,r3
     5e4:	0000e880 	call	e88 <VGA_box>
		VGA_box(X, boven, X + 5, boven + 1, 0);
     5e8:	e0bffd17 	ldw	r2,-12(fp)
     5ec:	10c00144 	addi	r3,r2,5
     5f0:	e0bffc17 	ldw	r2,-16(fp)
     5f4:	10800044 	addi	r2,r2,1
     5f8:	d8000015 	stw	zero,0(sp)
     5fc:	e13ffd17 	ldw	r4,-12(fp)
     600:	e17ffc17 	ldw	r5,-16(fp)
     604:	180d883a 	mov	r6,r3
     608:	100f883a 	mov	r7,r2
     60c:	0000e880 	call	e88 <VGA_box>
		boven++;
     610:	e0bffc17 	ldw	r2,-16(fp)
     614:	10800044 	addi	r2,r2,1
     618:	e0bffc15 	stw	r2,-16(fp)
int moveDown(int ID, int current){
	int boven = current;

	int X = checkID(ID);

	if(boven <= 184 && boven >= 4){
     61c:	00001406 	br	670 <moveDown+0x104>
		VGA_box(X, boven + 50, X + 5, boven + 51, kleur);
		VGA_box(X, boven, X + 5, boven + 1, 0);
		boven++;
	}else if(boven < 4){
     620:	e0bffc17 	ldw	r2,-16(fp)
     624:	10800108 	cmpgei	r2,r2,4
     628:	1000111e 	bne	r2,zero,670 <moveDown+0x104>
		VGA_box(X, boven + 50, X+5, boven + 51, kleur);
     62c:	e0bffc17 	ldw	r2,-16(fp)
     630:	11400c84 	addi	r5,r2,50
     634:	e0bffd17 	ldw	r2,-12(fp)
     638:	11800144 	addi	r6,r2,5
     63c:	e0bffc17 	ldw	r2,-16(fp)
     640:	10c00cc4 	addi	r3,r2,51
     644:	d0a0000b 	ldhu	r2,-32768(gp)
     648:	10bfffcc 	andi	r2,r2,65535
     64c:	10a0001c 	xori	r2,r2,32768
     650:	10a00004 	addi	r2,r2,-32768
     654:	d8800015 	stw	r2,0(sp)
     658:	e13ffd17 	ldw	r4,-12(fp)
     65c:	180f883a 	mov	r7,r3
     660:	0000e880 	call	e88 <VGA_box>
		boven++;
     664:	e0bffc17 	ldw	r2,-16(fp)
     668:	10800044 	addi	r2,r2,1
     66c:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     670:	e0bffc17 	ldw	r2,-16(fp)

}
     674:	e037883a 	mov	sp,fp
     678:	dfc00117 	ldw	ra,4(sp)
     67c:	df000017 	ldw	fp,0(sp)
     680:	dec00204 	addi	sp,sp,8
     684:	f800283a 	ret

00000688 <Game>:
int pixel_buffer_x; int pixel_buffer_y;
int blue_x1; int blue_y1; int blue_x2; int blue_y2;
short balZwart = 0x000000;
short balWit = 0xffffff;

void Game(void* pdata){
     688:	defffc04 	addi	sp,sp,-16
     68c:	dfc00315 	stw	ra,12(sp)
     690:	df000215 	stw	fp,8(sp)
     694:	df000204 	addi	fp,sp,8
     698:	e13fff15 	stw	r4,-4(fp)
	
	ALT_x1 = 0; ALT_x2 = 20; ALT_y = 5; ALT_inc_x = 1; ALT_inc_y = 1;
     69c:	d027ed15 	stw	zero,-24652(gp)
     6a0:	00800504 	movi	r2,20
     6a4:	d0a7ef15 	stw	r2,-24644(gp)
     6a8:	00800144 	movi	r2,5
     6ac:	d0a7eb15 	stw	r2,-24660(gp)
     6b0:	00800044 	movi	r2,1
     6b4:	d0a7ee15 	stw	r2,-24648(gp)
     6b8:	00800044 	movi	r2,1
     6bc:	d0a7ec15 	stw	r2,-24656(gp)

	pixel_buffer_x = 340; pixel_buffer_y = 230;
     6c0:	00805504 	movi	r2,340
     6c4:	d0a7e815 	stw	r2,-24672(gp)
     6c8:	00803984 	movi	r2,230
     6cc:	d0a7e615 	stw	r2,-24680(gp)
	//char_buffer_x = 79; char_buffer_y = 59;

	//blue_x1 = 28; blue_x2 = 52; blue_y1 = 26; blue_y2 = 34;
	while(1){
		
		VGA_box(ALT_x1, ALT_y, ALT_x1+5, ALT_y+5, balZwart); // erase
     6d0:	d127ed17 	ldw	r4,-24652(gp)
     6d4:	d167eb17 	ldw	r5,-24660(gp)
     6d8:	d0a7ed17 	ldw	r2,-24652(gp)
     6dc:	11800144 	addi	r6,r2,5
     6e0:	d0a7eb17 	ldw	r2,-24660(gp)
     6e4:	10c00144 	addi	r3,r2,5
     6e8:	d0a7e50b 	ldhu	r2,-24684(gp)
     6ec:	10bfffcc 	andi	r2,r2,65535
     6f0:	10a0001c 	xori	r2,r2,32768
     6f4:	10a00004 	addi	r2,r2,-32768
     6f8:	d8800015 	stw	r2,0(sp)
     6fc:	180f883a 	mov	r7,r3
     700:	0000e880 	call	e88 <VGA_box>
		ALT_x1 += ALT_inc_x;
     704:	d0e7ed17 	ldw	r3,-24652(gp)
     708:	d0a7ee17 	ldw	r2,-24648(gp)
     70c:	1885883a 	add	r2,r3,r2
     710:	d0a7ed15 	stw	r2,-24652(gp)
		ALT_x2 += ALT_inc_x;
     714:	d0e7ef17 	ldw	r3,-24644(gp)
     718:	d0a7ee17 	ldw	r2,-24648(gp)
     71c:	1885883a 	add	r2,r3,r2
     720:	d0a7ef15 	stw	r2,-24644(gp)
		ALT_y += ALT_inc_y;
     724:	d0e7eb17 	ldw	r3,-24660(gp)
     728:	d0a7ec17 	ldw	r2,-24656(gp)
     72c:	1885883a 	add	r2,r3,r2
     730:	d0a7eb15 	stw	r2,-24660(gp)

		if ( (ALT_y == pixel_buffer_y) || (ALT_y == 4) )
     734:	d0e7eb17 	ldw	r3,-24660(gp)
     738:	d0a7e617 	ldw	r2,-24680(gp)
     73c:	18800326 	beq	r3,r2,74c <Game+0xc4>
     740:	d0a7eb17 	ldw	r2,-24660(gp)
     744:	10800118 	cmpnei	r2,r2,4
     748:	1000031e 	bne	r2,zero,758 <Game+0xd0>
			ALT_inc_y = -(ALT_inc_y);
     74c:	d0a7ec17 	ldw	r2,-24656(gp)
     750:	0085c83a 	sub	r2,zero,r2
     754:	d0a7ec15 	stw	r2,-24656(gp)
		if ( (ALT_x2 == pixel_buffer_x) || (ALT_x1 == 0) )
     758:	d0e7ef17 	ldw	r3,-24644(gp)
     75c:	d0a7e817 	ldw	r2,-24672(gp)
     760:	18800226 	beq	r3,r2,76c <Game+0xe4>
     764:	d0a7ed17 	ldw	r2,-24652(gp)
     768:	1000031e 	bne	r2,zero,778 <Game+0xf0>
			ALT_inc_x = -(ALT_inc_x);
     76c:	d0a7ee17 	ldw	r2,-24648(gp)
     770:	0085c83a 	sub	r2,zero,r2
     774:	d0a7ee15 	stw	r2,-24648(gp)
//			ALT_inc_x = -(ALT_inc_x);
		// if balkje links collision


	
		VGA_box(ALT_x1, ALT_y, ALT_x1+5, ALT_y+5, balWit); // ball
     778:	d127ed17 	ldw	r4,-24652(gp)
     77c:	d167eb17 	ldw	r5,-24660(gp)
     780:	d0a7ed17 	ldw	r2,-24652(gp)
     784:	11800144 	addi	r6,r2,5
     788:	d0a7eb17 	ldw	r2,-24660(gp)
     78c:	10c00144 	addi	r3,r2,5
     790:	d0a0008b 	ldhu	r2,-32766(gp)
     794:	10bfffcc 	andi	r2,r2,65535
     798:	10a0001c 	xori	r2,r2,32768
     79c:	10a00004 	addi	r2,r2,-32768
     7a0:	d8800015 	stw	r2,0(sp)
     7a4:	180f883a 	mov	r7,r3
     7a8:	0000e880 	call	e88 <VGA_box>


		VGA_text (ALT_x1, ALT_y, "HALLOOO");
		*/

		OSTimeDly(1);
     7ac:	01000044 	movi	r4,1
     7b0:	000c0340 	call	c034 <OSTimeDly>
	}
     7b4:	003fc606 	br	6d0 <__alt_mem_Flash_flash_data+0xf40006d0>

000007b8 <menu>:

int eenkeer = 1;
int last;
int changed;

void menu(void* pdata){
     7b8:	defffc04 	addi	sp,sp,-16
     7bc:	dfc00315 	stw	ra,12(sp)
     7c0:	df000215 	stw	fp,8(sp)
     7c4:	df000204 	addi	fp,sp,8
     7c8:	e13fff15 	stw	r4,-4(fp)
	int ID = (int*)pdata;
     7cc:	e0bfff17 	ldw	r2,-4(fp)
     7d0:	e0bffe15 	stw	r2,-8(fp)


	VGA_text (xMenu, yMenu, "Singleplayer");
     7d4:	d0e00617 	ldw	r3,-32744(gp)
     7d8:	d0a00717 	ldw	r2,-32740(gp)
     7dc:	1809883a 	mov	r4,r3
     7e0:	100b883a 	mov	r5,r2
     7e4:	01800074 	movhi	r6,1
     7e8:	3180e304 	addi	r6,r6,908
     7ec:	0000f3c0 	call	f3c <VGA_text>
	VGA_text (xMenu, yMenu + 4, "Multiplayer");
     7f0:	d0e00617 	ldw	r3,-32744(gp)
     7f4:	d0a00717 	ldw	r2,-32740(gp)
     7f8:	10800104 	addi	r2,r2,4
     7fc:	1809883a 	mov	r4,r3
     800:	100b883a 	mov	r5,r2
     804:	01800074 	movhi	r6,1
     808:	3180e704 	addi	r6,r6,924
     80c:	0000f3c0 	call	f3c <VGA_text>
	VGA_text (xMenu, yMenu+8, "Highscores");
     810:	d0e00617 	ldw	r3,-32744(gp)
     814:	d0a00717 	ldw	r2,-32740(gp)
     818:	10800204 	addi	r2,r2,8
     81c:	1809883a 	mov	r4,r3
     820:	100b883a 	mov	r5,r2
     824:	01800074 	movhi	r6,1
     828:	3180ea04 	addi	r6,r6,936
     82c:	0000f3c0 	call	f3c <VGA_text>
	VGA_text (xMenu, yMenu+12, "Tutorial");
     830:	d0e00617 	ldw	r3,-32744(gp)
     834:	d0a00717 	ldw	r2,-32740(gp)
     838:	10800304 	addi	r2,r2,12
     83c:	1809883a 	mov	r4,r3
     840:	100b883a 	mov	r5,r2
     844:	01800074 	movhi	r6,1
     848:	3180ed04 	addi	r6,r6,948
     84c:	0000f3c0 	call	f3c <VGA_text>


	while(1){
		if (controller(ID) == 1){
     850:	e13ffe17 	ldw	r4,-8(fp)
     854:	00002f00 	call	2f0 <controller>
     858:	10800058 	cmpnei	r2,r2,1
     85c:	1000111e 	bne	r2,zero,8a4 <menu+0xec>
			if(changed != 0){
     860:	d0a7f417 	ldw	r2,-24624(gp)
     864:	10000926 	beq	r2,zero,88c <menu+0xd4>
				gameModeMenu++;
     868:	d0a00117 	ldw	r2,-32764(gp)
     86c:	10800044 	addi	r2,r2,1
     870:	d0a00115 	stw	r2,-32764(gp)
				eenkeer = 1;
     874:	00800044 	movi	r2,1
     878:	d0a00915 	stw	r2,-32732(gp)
				changed=0;
     87c:	d027f415 	stw	zero,-24624(gp)
				printf("heeft 1 gereturned \n");
     880:	01000074 	movhi	r4,1
     884:	2100f004 	addi	r4,r4,960
     888:	00010740 	call	1074 <puts>
			}
			if (gameModeMenu >= 5){
     88c:	d0a00117 	ldw	r2,-32764(gp)
     890:	10800150 	cmplti	r2,r2,5
     894:	1000161e 	bne	r2,zero,8f0 <menu+0x138>
				gameModeMenu = 1;
     898:	00800044 	movi	r2,1
     89c:	d0a00115 	stw	r2,-32764(gp)
     8a0:	00001306 	br	8f0 <menu+0x138>
			}
		} else if (controller(ID) == 0){
     8a4:	e13ffe17 	ldw	r4,-8(fp)
     8a8:	00002f00 	call	2f0 <controller>
     8ac:	1000101e 	bne	r2,zero,8f0 <menu+0x138>
			if(changed !=0){
     8b0:	d0a7f417 	ldw	r2,-24624(gp)
     8b4:	10000a26 	beq	r2,zero,8e0 <menu+0x128>
				gameModeMenu--;
     8b8:	d0a00117 	ldw	r2,-32764(gp)
     8bc:	10bfffc4 	addi	r2,r2,-1
     8c0:	d0a00115 	stw	r2,-32764(gp)
				last=0;
     8c4:	d027f315 	stw	zero,-24628(gp)
				changed=0;
     8c8:	d027f415 	stw	zero,-24624(gp)
				eenkeer = 1;
     8cc:	00800044 	movi	r2,1
     8d0:	d0a00915 	stw	r2,-32732(gp)
				printf("heeft 0 gereturned \n");
     8d4:	01000074 	movhi	r4,1
     8d8:	2100f504 	addi	r4,r4,980
     8dc:	00010740 	call	1074 <puts>
			}
			if (gameModeMenu <= 0){
     8e0:	d0a00117 	ldw	r2,-32764(gp)
     8e4:	00800216 	blt	zero,r2,8f0 <menu+0x138>
				gameModeMenu = 4;
     8e8:	00800104 	movi	r2,4
     8ec:	d0a00115 	stw	r2,-32764(gp)
			}
		}
		OSTimeDly(10);
     8f0:	01000284 	movi	r4,10
     8f4:	000c0340 	call	c034 <OSTimeDly>
	}
     8f8:	003fd506 	br	850 <__alt_mem_Flash_flash_data+0xf4000850>

000008fc <selecteerMenu>:

}

void selecteerMenu(void *pdata){
     8fc:	defffc04 	addi	sp,sp,-16
     900:	dfc00315 	stw	ra,12(sp)
     904:	df000215 	stw	fp,8(sp)
     908:	df000204 	addi	fp,sp,8
     90c:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	while(1){
		if (gameModeMenu == 1){
     910:	d0a00117 	ldw	r2,-32764(gp)
     914:	10800058 	cmpnei	r2,r2,1
     918:	1000261e 	bne	r2,zero,9b4 <selecteerMenu+0xb8>
			if(eenkeer == 1){
     91c:	d0a00917 	ldw	r2,-32732(gp)
     920:	10800058 	cmpnei	r2,r2,1
     924:	1000ac1e 	bne	r2,zero,bd8 <selecteerMenu+0x2dc>
				clearScreen();
     928:	0000be40 	call	be4 <clearScreen>
				VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
     92c:	d0a00217 	ldw	r2,-32760(gp)
     930:	1085883a 	add	r2,r2,r2
     934:	1085883a 	add	r2,r2,r2
     938:	1009883a 	mov	r4,r2
     93c:	d0a00417 	ldw	r2,-32752(gp)
     940:	1085883a 	add	r2,r2,r2
     944:	1085883a 	add	r2,r2,r2
     948:	100b883a 	mov	r5,r2
     94c:	d0a00317 	ldw	r2,-32756(gp)
     950:	1085883a 	add	r2,r2,r2
     954:	1085883a 	add	r2,r2,r2
     958:	100d883a 	mov	r6,r2
     95c:	d0a00517 	ldw	r2,-32748(gp)
     960:	1085883a 	add	r2,r2,r2
     964:	1085883a 	add	r2,r2,r2
     968:	1007883a 	mov	r3,r2
     96c:	d0a0088b 	ldhu	r2,-32734(gp)
     970:	10bfffcc 	andi	r2,r2,65535
     974:	10a0001c 	xori	r2,r2,32768
     978:	10a00004 	addi	r2,r2,-32768
     97c:	d8800015 	stw	r2,0(sp)
     980:	180f883a 	mov	r7,r3
     984:	0000e880 	call	e88 <VGA_box>
				VGA_text (xMenu, yMenu, "Singleplayer");
     988:	d0e00617 	ldw	r3,-32744(gp)
     98c:	d0a00717 	ldw	r2,-32740(gp)
     990:	1809883a 	mov	r4,r3
     994:	100b883a 	mov	r5,r2
     998:	01800074 	movhi	r6,1
     99c:	3180e304 	addi	r6,r6,908
     9a0:	0000f3c0 	call	f3c <VGA_text>
				eenkeer = 0;
     9a4:	d0200915 	stw	zero,-32732(gp)
				changed = 1;
     9a8:	00800044 	movi	r2,1
     9ac:	d0a7f415 	stw	r2,-24624(gp)
     9b0:	00008906 	br	bd8 <selecteerMenu+0x2dc>
			}
		} else if (gameModeMenu == 2){
     9b4:	d0a00117 	ldw	r2,-32764(gp)
     9b8:	10800098 	cmpnei	r2,r2,2
     9bc:	10002b1e 	bne	r2,zero,a6c <selecteerMenu+0x170>
			if(eenkeer == 1){
     9c0:	d0a00917 	ldw	r2,-32732(gp)
     9c4:	10800058 	cmpnei	r2,r2,1
     9c8:	1000831e 	bne	r2,zero,bd8 <selecteerMenu+0x2dc>
				clearScreen();
     9cc:	0000be40 	call	be4 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
     9d0:	d0a00217 	ldw	r2,-32760(gp)
     9d4:	1085883a 	add	r2,r2,r2
     9d8:	1085883a 	add	r2,r2,r2
     9dc:	1009883a 	mov	r4,r2
     9e0:	d0a00417 	ldw	r2,-32752(gp)
     9e4:	10800104 	addi	r2,r2,4
     9e8:	1085883a 	add	r2,r2,r2
     9ec:	1085883a 	add	r2,r2,r2
     9f0:	100b883a 	mov	r5,r2
     9f4:	d0a00317 	ldw	r2,-32756(gp)
     9f8:	1085883a 	add	r2,r2,r2
     9fc:	1085883a 	add	r2,r2,r2
     a00:	100d883a 	mov	r6,r2
     a04:	d0a00517 	ldw	r2,-32748(gp)
     a08:	10800104 	addi	r2,r2,4
     a0c:	1085883a 	add	r2,r2,r2
     a10:	1085883a 	add	r2,r2,r2
     a14:	1007883a 	mov	r3,r2
     a18:	d0a0088b 	ldhu	r2,-32734(gp)
     a1c:	10bfffcc 	andi	r2,r2,65535
     a20:	10a0001c 	xori	r2,r2,32768
     a24:	10a00004 	addi	r2,r2,-32768
     a28:	d8800015 	stw	r2,0(sp)
     a2c:	180f883a 	mov	r7,r3
     a30:	0000e880 	call	e88 <VGA_box>
				VGA_text (xMenu, yMenu + 4, "Multiplayer");
     a34:	d0e00617 	ldw	r3,-32744(gp)
     a38:	d0a00717 	ldw	r2,-32740(gp)
     a3c:	10800104 	addi	r2,r2,4
     a40:	1809883a 	mov	r4,r3
     a44:	100b883a 	mov	r5,r2
     a48:	01800074 	movhi	r6,1
     a4c:	3180e704 	addi	r6,r6,924
     a50:	0000f3c0 	call	f3c <VGA_text>
				eenkeer = 0;
     a54:	d0200915 	stw	zero,-32732(gp)
				vorige = 2;
     a58:	00800084 	movi	r2,2
     a5c:	d0a7f115 	stw	r2,-24636(gp)
				changed = 1;
     a60:	00800044 	movi	r2,1
     a64:	d0a7f415 	stw	r2,-24624(gp)
     a68:	00005b06 	br	bd8 <selecteerMenu+0x2dc>

			}
		} else if (gameModeMenu == 3){
     a6c:	d0a00117 	ldw	r2,-32764(gp)
     a70:	108000d8 	cmpnei	r2,r2,3
     a74:	10002b1e 	bne	r2,zero,b24 <selecteerMenu+0x228>
			if(eenkeer == 1){
     a78:	d0a00917 	ldw	r2,-32732(gp)
     a7c:	10800058 	cmpnei	r2,r2,1
     a80:	1000551e 	bne	r2,zero,bd8 <selecteerMenu+0x2dc>
				clearScreen();
     a84:	0000be40 	call	be4 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 32, xRechts*4, xOnder*4 + 32, rood);
     a88:	d0a00217 	ldw	r2,-32760(gp)
     a8c:	1085883a 	add	r2,r2,r2
     a90:	1085883a 	add	r2,r2,r2
     a94:	1009883a 	mov	r4,r2
     a98:	d0a00417 	ldw	r2,-32752(gp)
     a9c:	10800204 	addi	r2,r2,8
     aa0:	1085883a 	add	r2,r2,r2
     aa4:	1085883a 	add	r2,r2,r2
     aa8:	100b883a 	mov	r5,r2
     aac:	d0a00317 	ldw	r2,-32756(gp)
     ab0:	1085883a 	add	r2,r2,r2
     ab4:	1085883a 	add	r2,r2,r2
     ab8:	100d883a 	mov	r6,r2
     abc:	d0a00517 	ldw	r2,-32748(gp)
     ac0:	10800204 	addi	r2,r2,8
     ac4:	1085883a 	add	r2,r2,r2
     ac8:	1085883a 	add	r2,r2,r2
     acc:	1007883a 	mov	r3,r2
     ad0:	d0a0088b 	ldhu	r2,-32734(gp)
     ad4:	10bfffcc 	andi	r2,r2,65535
     ad8:	10a0001c 	xori	r2,r2,32768
     adc:	10a00004 	addi	r2,r2,-32768
     ae0:	d8800015 	stw	r2,0(sp)
     ae4:	180f883a 	mov	r7,r3
     ae8:	0000e880 	call	e88 <VGA_box>
				VGA_text (xMenu, yMenu +  8, "Highscores");
     aec:	d0e00617 	ldw	r3,-32744(gp)
     af0:	d0a00717 	ldw	r2,-32740(gp)
     af4:	10800204 	addi	r2,r2,8
     af8:	1809883a 	mov	r4,r3
     afc:	100b883a 	mov	r5,r2
     b00:	01800074 	movhi	r6,1
     b04:	3180ea04 	addi	r6,r6,936
     b08:	0000f3c0 	call	f3c <VGA_text>
				eenkeer = 0;
     b0c:	d0200915 	stw	zero,-32732(gp)
				vorige = 3;
     b10:	008000c4 	movi	r2,3
     b14:	d0a7f115 	stw	r2,-24636(gp)
				changed = 1;
     b18:	00800044 	movi	r2,1
     b1c:	d0a7f415 	stw	r2,-24624(gp)
     b20:	00002d06 	br	bd8 <selecteerMenu+0x2dc>

			}
		} else if (gameModeMenu == 4){
     b24:	d0a00117 	ldw	r2,-32764(gp)
     b28:	10800118 	cmpnei	r2,r2,4
     b2c:	10002a1e 	bne	r2,zero,bd8 <selecteerMenu+0x2dc>
			if(eenkeer == 1){
     b30:	d0a00917 	ldw	r2,-32732(gp)
     b34:	10800058 	cmpnei	r2,r2,1
     b38:	1000271e 	bne	r2,zero,bd8 <selecteerMenu+0x2dc>
				clearScreen();
     b3c:	0000be40 	call	be4 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 48, xRechts*4, xOnder*4 + 48, rood);
     b40:	d0a00217 	ldw	r2,-32760(gp)
     b44:	1085883a 	add	r2,r2,r2
     b48:	1085883a 	add	r2,r2,r2
     b4c:	1009883a 	mov	r4,r2
     b50:	d0a00417 	ldw	r2,-32752(gp)
     b54:	10800304 	addi	r2,r2,12
     b58:	1085883a 	add	r2,r2,r2
     b5c:	1085883a 	add	r2,r2,r2
     b60:	100b883a 	mov	r5,r2
     b64:	d0a00317 	ldw	r2,-32756(gp)
     b68:	1085883a 	add	r2,r2,r2
     b6c:	1085883a 	add	r2,r2,r2
     b70:	100d883a 	mov	r6,r2
     b74:	d0a00517 	ldw	r2,-32748(gp)
     b78:	10800304 	addi	r2,r2,12
     b7c:	1085883a 	add	r2,r2,r2
     b80:	1085883a 	add	r2,r2,r2
     b84:	1007883a 	mov	r3,r2
     b88:	d0a0088b 	ldhu	r2,-32734(gp)
     b8c:	10bfffcc 	andi	r2,r2,65535
     b90:	10a0001c 	xori	r2,r2,32768
     b94:	10a00004 	addi	r2,r2,-32768
     b98:	d8800015 	stw	r2,0(sp)
     b9c:	180f883a 	mov	r7,r3
     ba0:	0000e880 	call	e88 <VGA_box>
				VGA_text (xMenu, yMenu + 12, "Tutorial");
     ba4:	d0e00617 	ldw	r3,-32744(gp)
     ba8:	d0a00717 	ldw	r2,-32740(gp)
     bac:	10800304 	addi	r2,r2,12
     bb0:	1809883a 	mov	r4,r3
     bb4:	100b883a 	mov	r5,r2
     bb8:	01800074 	movhi	r6,1
     bbc:	3180ed04 	addi	r6,r6,948
     bc0:	0000f3c0 	call	f3c <VGA_text>
				eenkeer = 0;
     bc4:	d0200915 	stw	zero,-32732(gp)
				vorige = 4;
     bc8:	00800104 	movi	r2,4
     bcc:	d0a7f115 	stw	r2,-24636(gp)
				changed = 1;
     bd0:	00800044 	movi	r2,1
     bd4:	d0a7f415 	stw	r2,-24624(gp)

			}
		}

		OSTimeDly(10);
     bd8:	01000284 	movi	r4,10
     bdc:	000c0340 	call	c034 <OSTimeDly>
	}
     be0:	003f4b06 	br	910 <__alt_mem_Flash_flash_data+0xf4000910>

00000be4 <clearScreen>:
}

void clearScreen(){
     be4:	defffd04 	addi	sp,sp,-12
     be8:	dfc00215 	stw	ra,8(sp)
     bec:	df000115 	stw	fp,4(sp)
     bf0:	df000104 	addi	fp,sp,4
	VGA_box(25,25, 200,200, 0);
     bf4:	d8000015 	stw	zero,0(sp)
     bf8:	01000644 	movi	r4,25
     bfc:	01400644 	movi	r5,25
     c00:	01803204 	movi	r6,200
     c04:	01c03204 	movi	r7,200
     c08:	0000e880 	call	e88 <VGA_box>
}
     c0c:	e037883a 	mov	sp,fp
     c10:	dfc00117 	ldw	ra,4(sp)
     c14:	df000017 	ldw	fp,0(sp)
     c18:	dec00204 	addi	sp,sp,8
     c1c:	f800283a 	ret

00000c20 <tekenBox>:

void tekenBox(int Links, int Boven, int Rechts, int Onder, short Kleur){
     c20:	defff804 	addi	sp,sp,-32
     c24:	dfc00715 	stw	ra,28(sp)
     c28:	df000615 	stw	fp,24(sp)
     c2c:	df000604 	addi	fp,sp,24
     c30:	e13ffb15 	stw	r4,-20(fp)
     c34:	e17ffc15 	stw	r5,-16(fp)
     c38:	e1bffd15 	stw	r6,-12(fp)
     c3c:	e1fffe15 	stw	r7,-8(fp)
     c40:	e0800217 	ldw	r2,8(fp)
     c44:	e0bfff0d 	sth	r2,-4(fp)
	VGA_box(Links, Boven, Rechts, Onder, Kleur);
     c48:	e0bfff0f 	ldh	r2,-4(fp)
     c4c:	d8800015 	stw	r2,0(sp)
     c50:	e13ffb17 	ldw	r4,-20(fp)
     c54:	e17ffc17 	ldw	r5,-16(fp)
     c58:	e1bffd17 	ldw	r6,-12(fp)
     c5c:	e1fffe17 	ldw	r7,-8(fp)
     c60:	0000e880 	call	e88 <VGA_box>
}
     c64:	e037883a 	mov	sp,fp
     c68:	dfc00117 	ldw	ra,4(sp)
     c6c:	df000017 	ldw	fp,0(sp)
     c70:	dec00204 	addi	sp,sp,8
     c74:	f800283a 	ret

00000c78 <tekenBox2>:
// tekenBox en tekenBox2 maken samen het visuele effect van het selecteren van een menu optie.
void tekenBox2(int Links, int Boven, int Rechts, int Onder, short Kleur){
     c78:	defff804 	addi	sp,sp,-32
     c7c:	dfc00715 	stw	ra,28(sp)
     c80:	df000615 	stw	fp,24(sp)
     c84:	df000604 	addi	fp,sp,24
     c88:	e13ffb15 	stw	r4,-20(fp)
     c8c:	e17ffc15 	stw	r5,-16(fp)
     c90:	e1bffd15 	stw	r6,-12(fp)
     c94:	e1fffe15 	stw	r7,-8(fp)
     c98:	e0800217 	ldw	r2,8(fp)
     c9c:	e0bfff0d 	sth	r2,-4(fp)
	Links = Links + 1;
     ca0:	e0bffb17 	ldw	r2,-20(fp)
     ca4:	10800044 	addi	r2,r2,1
     ca8:	e0bffb15 	stw	r2,-20(fp)
	Boven = Boven + 1;
     cac:	e0bffc17 	ldw	r2,-16(fp)
     cb0:	10800044 	addi	r2,r2,1
     cb4:	e0bffc15 	stw	r2,-16(fp)
	Rechts = Rechts - 1;
     cb8:	e0bffd17 	ldw	r2,-12(fp)
     cbc:	10bfffc4 	addi	r2,r2,-1
     cc0:	e0bffd15 	stw	r2,-12(fp)
	Onder = Onder -1;
     cc4:	e0bffe17 	ldw	r2,-8(fp)
     cc8:	10bfffc4 	addi	r2,r2,-1
     ccc:	e0bffe15 	stw	r2,-8(fp)

	VGA_box(Links, Boven, Rechts, Onder, Kleur);
     cd0:	e0bfff0f 	ldh	r2,-4(fp)
     cd4:	d8800015 	stw	r2,0(sp)
     cd8:	e13ffb17 	ldw	r4,-20(fp)
     cdc:	e17ffc17 	ldw	r5,-16(fp)
     ce0:	e1bffd17 	ldw	r6,-12(fp)
     ce4:	e1fffe17 	ldw	r7,-8(fp)
     ce8:	0000e880 	call	e88 <VGA_box>
}
     cec:	e037883a 	mov	sp,fp
     cf0:	dfc00117 	ldw	ra,4(sp)
     cf4:	df000017 	ldw	fp,0(sp)
     cf8:	dec00204 	addi	sp,sp,8
     cfc:	f800283a 	ret

00000d00 <main>:
void selecteerMenu(void *pdata);
void Game(void* pdata);

/* The main function creates two task and starts multi-tasking */
int main(void)
{
     d00:	defffc04 	addi	sp,sp,-16
     d04:	dfc00315 	stw	ra,12(sp)
     d08:	df000215 	stw	fp,8(sp)
     d0c:	df000204 	addi	fp,sp,8
	OSInit();
     d10:	00051780 	call	5178 <OSInit>
	int counter = 0x40000;				// 1/(50 MHz) x (0x960000) ~= 200 msec
     d14:	00800134 	movhi	r2,4
     d18:	e0bfff15 	stw	r2,-4(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
     d1c:	d0a00a17 	ldw	r2,-32728(gp)
     d20:	10800204 	addi	r2,r2,8
     d24:	e0ffff17 	ldw	r3,-4(fp)
     d28:	18ffffcc 	andi	r3,r3,65535
     d2c:	10c00015 	stw	r3,0(r2)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
     d30:	d0a00a17 	ldw	r2,-32728(gp)
     d34:	10800304 	addi	r2,r2,12
     d38:	e0ffff17 	ldw	r3,-4(fp)
     d3c:	1806d43a 	srli	r3,r3,16
     d40:	10c00015 	stw	r3,0(r2)

	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
     d44:	d0a00a17 	ldw	r2,-32728(gp)
     d48:	10800104 	addi	r2,r2,4
     d4c:	00c001c4 	movi	r3,7
     d50:	10c00015 	stw	r3,0(r2)

	menuSem = OSSemCreate(1);
     d54:	01000044 	movi	r4,1
     d58:	0009ce80 	call	9ce8 <OSSemCreate>
     d5c:	d0a7f515 	stw	r2,-24620(gp)
	controllerSem = OSSemCreate(1);
     d60:	01000044 	movi	r4,1
     d64:	0009ce80 	call	9ce8 <OSSemCreate>
     d68:	d0a7e215 	stw	r2,-24696(gp)
	VGA_box (0, 0, 319, 239, 0);						//clear screen
     d6c:	d8000015 	stw	zero,0(sp)
     d70:	0009883a 	mov	r4,zero
     d74:	000b883a 	mov	r5,zero
     d78:	01804fc4 	movi	r6,319
     d7c:	01c03bc4 	movi	r7,239
     d80:	0000e880 	call	e88 <VGA_box>
	VGA_box (15, 50, 20, 100, 0x0000ff);				// links
     d84:	00803fc4 	movi	r2,255
     d88:	d8800015 	stw	r2,0(sp)
     d8c:	010003c4 	movi	r4,15
     d90:	01400c84 	movi	r5,50
     d94:	01800504 	movi	r6,20
     d98:	01c01904 	movi	r7,100
     d9c:	0000e880 	call	e88 <VGA_box>
	VGA_box (300, 50, 305, 100, 0x0000ff);				// rechts
     da0:	00803fc4 	movi	r2,255
     da4:	d8800015 	stw	r2,0(sp)
     da8:	01004b04 	movi	r4,300
     dac:	01400c84 	movi	r5,50
     db0:	01804c44 	movi	r6,305
     db4:	01c01904 	movi	r7,100
     db8:	0000e880 	call	e88 <VGA_box>

	VGA_box (0, 0, 319, 3, 0xFFFFFF);					// boven
     dbc:	00804034 	movhi	r2,256
     dc0:	10bfffc4 	addi	r2,r2,-1
     dc4:	d8800015 	stw	r2,0(sp)
     dc8:	0009883a 	mov	r4,zero
     dcc:	000b883a 	mov	r5,zero
     dd0:	01804fc4 	movi	r6,319
     dd4:	01c000c4 	movi	r7,3
     dd8:	0000e880 	call	e88 <VGA_box>
	VGA_box (0, 236, 319, 239, 0xFFFFFF);				// onder
     ddc:	00804034 	movhi	r2,256
     de0:	10bfffc4 	addi	r2,r2,-1
     de4:	d8800015 	stw	r2,0(sp)
     de8:	0009883a 	mov	r4,zero
     dec:	01403b04 	movi	r5,236
     df0:	01804fc4 	movi	r6,319
     df4:	01c03bc4 	movi	r7,239
     df8:	0000e880 	call	e88 <VGA_box>

//	VGA_box (159, 0, 160, 239, 0xFFFFFF);				// middenlijntje

	OSTaskCreate(controllers,(void*) 1,&controller1_stk[TASK_STACKSIZE-1],controller1_PRIORITY);
     dfc:	01000034 	movhi	r4,0
     e00:	2100a004 	addi	r4,r4,640
     e04:	01400044 	movi	r5,1
     e08:	018000b4 	movhi	r6,2
     e0c:	31a14c04 	addi	r6,r6,-31440
     e10:	01c001c4 	movi	r7,7
     e14:	000ac800 	call	ac80 <OSTaskCreate>
	OSTaskCreate(controllers,(void*) 2,&controller2_stk[TASK_STACKSIZE-1],controller2_PRIORITY);
     e18:	01000034 	movhi	r4,0
     e1c:	2100a004 	addi	r4,r4,640
     e20:	01400084 	movi	r5,2
     e24:	018000b4 	movhi	r6,2
     e28:	31a94c04 	addi	r6,r6,-23248
     e2c:	01c00204 	movi	r7,8
     e30:	000ac800 	call	ac80 <OSTaskCreate>
	//OSTaskCreate(Game,(void*) 0, &Game_stk[TASK_STACKSIZE-1],Game_PRIORITY);

	OSTaskCreate(menu, (void*) 2, &menu_stk[TASK_STACKSIZE-1],menu_PRIORITY);
     e34:	01000034 	movhi	r4,0
     e38:	2101ee04 	addi	r4,r4,1976
     e3c:	01400084 	movi	r5,2
     e40:	01800074 	movhi	r6,1
     e44:	31994c04 	addi	r6,r6,25904
     e48:	01c00244 	movi	r7,9
     e4c:	000ac800 	call	ac80 <OSTaskCreate>
	OSTaskCreate(selecteerMenu, (void*) 0, &menu_stk2[TASK_STACKSIZE-1], 10);
     e50:	01000034 	movhi	r4,0
     e54:	21023f04 	addi	r4,r4,2300
     e58:	000b883a 	mov	r5,zero
     e5c:	018000b4 	movhi	r6,2
     e60:	31b94c04 	addi	r6,r6,-6864
     e64:	01c00284 	movi	r7,10
     e68:	000ac800 	call	ac80 <OSTaskCreate>
	OSStart();
     e6c:	000549c0 	call	549c <OSStart>
	return 0;
     e70:	0005883a 	mov	r2,zero
}
     e74:	e037883a 	mov	sp,fp
     e78:	dfc00117 	ldw	ra,4(sp)
     e7c:	df000017 	ldw	fp,0(sp)
     e80:	dec00204 	addi	sp,sp,8
     e84:	f800283a 	ret

00000e88 <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
     e88:	defff604 	addi	sp,sp,-40
     e8c:	df000915 	stw	fp,36(sp)
     e90:	df000904 	addi	fp,sp,36
     e94:	e13ffb15 	stw	r4,-20(fp)
     e98:	e17ffc15 	stw	r5,-16(fp)
     e9c:	e1bffd15 	stw	r6,-12(fp)
     ea0:	e1fffe15 	stw	r7,-8(fp)
     ea4:	e0800117 	ldw	r2,4(fp)
     ea8:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
     eac:	00820034 	movhi	r2,2048
     eb0:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
     eb4:	e0bffc17 	ldw	r2,-16(fp)
     eb8:	e0bff715 	stw	r2,-36(fp)
     ebc:	00001806 	br	f20 <VGA_box+0x98>
	{
		col = x1;
     ec0:	e0bffb17 	ldw	r2,-20(fp)
     ec4:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
     ec8:	00000f06 	br	f08 <VGA_box+0x80>
		{
			offset = (row << 9) + col;
     ecc:	e0bff717 	ldw	r2,-36(fp)
     ed0:	1006927a 	slli	r3,r2,9
     ed4:	e0bff817 	ldw	r2,-32(fp)
     ed8:	1885883a 	add	r2,r3,r2
     edc:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
     ee0:	e0bffa17 	ldw	r2,-24(fp)
     ee4:	1085883a 	add	r2,r2,r2
     ee8:	1007883a 	mov	r3,r2
     eec:	e0bff917 	ldw	r2,-28(fp)
     ef0:	10c5883a 	add	r2,r2,r3
     ef4:	e0ffff0b 	ldhu	r3,-4(fp)
     ef8:	10c0000d 	sth	r3,0(r2)
			++col;
     efc:	e0bff817 	ldw	r2,-32(fp)
     f00:	10800044 	addi	r2,r2,1
     f04:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
     f08:	e0bff817 	ldw	r2,-32(fp)
     f0c:	e0fffd17 	ldw	r3,-12(fp)
     f10:	18bfee0e 	bge	r3,r2,ecc <__alt_mem_Flash_flash_data+0xf4000ecc>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
     f14:	e0bff717 	ldw	r2,-36(fp)
     f18:	10800044 	addi	r2,r2,1
     f1c:	e0bff715 	stw	r2,-36(fp)
     f20:	e0bff717 	ldw	r2,-36(fp)
     f24:	e0fffe17 	ldw	r3,-8(fp)
     f28:	18bfe50e 	bge	r3,r2,ec0 <__alt_mem_Flash_flash_data+0xf4000ec0>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
     f2c:	e037883a 	mov	sp,fp
     f30:	df000017 	ldw	fp,0(sp)
     f34:	dec00104 	addi	sp,sp,4
     f38:	f800283a 	ret

00000f3c <VGA_text>:

void VGA_text(int x, int y, char * text_ptr)
{
     f3c:	defffa04 	addi	sp,sp,-24
     f40:	df000515 	stw	fp,20(sp)
     f44:	df000504 	addi	fp,sp,20
     f48:	e13ffd15 	stw	r4,-12(fp)
     f4c:	e17ffe15 	stw	r5,-8(fp)
     f50:	e1bfff15 	stw	r6,-4(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer
     f54:	00824034 	movhi	r2,2304
     f58:	e0bffc15 	stw	r2,-16(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
     f5c:	e0bffe17 	ldw	r2,-8(fp)
     f60:	100691fa 	slli	r3,r2,7
     f64:	e0bffd17 	ldw	r2,-12(fp)
     f68:	1885883a 	add	r2,r3,r2
     f6c:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
     f70:	00000c06 	br	fa4 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
     f74:	e0bffb17 	ldw	r2,-20(fp)
     f78:	e0fffc17 	ldw	r3,-16(fp)
     f7c:	1885883a 	add	r2,r3,r2
     f80:	e0ffff17 	ldw	r3,-4(fp)
     f84:	18c00003 	ldbu	r3,0(r3)
     f88:	10c00005 	stb	r3,0(r2)
		++text_ptr;
     f8c:	e0bfff17 	ldw	r2,-4(fp)
     f90:	10800044 	addi	r2,r2,1
     f94:	e0bfff15 	stw	r2,-4(fp)
		++offset;
     f98:	e0bffb17 	ldw	r2,-20(fp)
     f9c:	10800044 	addi	r2,r2,1
     fa0:	e0bffb15 	stw	r2,-20(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
     fa4:	e0bfff17 	ldw	r2,-4(fp)
     fa8:	10800003 	ldbu	r2,0(r2)
     fac:	10803fcc 	andi	r2,r2,255
     fb0:	1080201c 	xori	r2,r2,128
     fb4:	10bfe004 	addi	r2,r2,-128
     fb8:	103fee1e 	bne	r2,zero,f74 <__alt_mem_Flash_flash_data+0xf4000f74>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
     fbc:	e037883a 	mov	sp,fp
     fc0:	df000017 	ldw	fp,0(sp)
     fc4:	dec00104 	addi	sp,sp,4
     fc8:	f800283a 	ret

00000fcc <_puts_r>:
     fcc:	defff604 	addi	sp,sp,-40
     fd0:	dc000715 	stw	r16,28(sp)
     fd4:	2021883a 	mov	r16,r4
     fd8:	2809883a 	mov	r4,r5
     fdc:	dc400815 	stw	r17,32(sp)
     fe0:	dfc00915 	stw	ra,36(sp)
     fe4:	2823883a 	mov	r17,r5
     fe8:	00010880 	call	1088 <strlen>
     fec:	81400217 	ldw	r5,8(r16)
     ff0:	11000044 	addi	r4,r2,1
     ff4:	d8800115 	stw	r2,4(sp)
     ff8:	00800074 	movhi	r2,1
     ffc:	2980030b 	ldhu	r6,12(r5)
    1000:	1080fa04 	addi	r2,r2,1000
    1004:	d8800215 	stw	r2,8(sp)
    1008:	00800044 	movi	r2,1
    100c:	d8800315 	stw	r2,12(sp)
    1010:	00800084 	movi	r2,2
    1014:	d8800515 	stw	r2,20(sp)
    1018:	dc400015 	stw	r17,0(sp)
    101c:	d9000615 	stw	r4,24(sp)
    1020:	dec00415 	stw	sp,16(sp)
    1024:	3088000c 	andi	r2,r6,8192
    1028:	1000061e 	bne	r2,zero,1044 <_puts_r+0x78>
    102c:	29001917 	ldw	r4,100(r5)
    1030:	00b7ffc4 	movi	r2,-8193
    1034:	31880014 	ori	r6,r6,8192
    1038:	2084703a 	and	r2,r4,r2
    103c:	2980030d 	sth	r6,12(r5)
    1040:	28801915 	stw	r2,100(r5)
    1044:	8009883a 	mov	r4,r16
    1048:	d9800404 	addi	r6,sp,16
    104c:	00011200 	call	1120 <__sfvwrite_r>
    1050:	1000061e 	bne	r2,zero,106c <_puts_r+0xa0>
    1054:	00800284 	movi	r2,10
    1058:	dfc00917 	ldw	ra,36(sp)
    105c:	dc400817 	ldw	r17,32(sp)
    1060:	dc000717 	ldw	r16,28(sp)
    1064:	dec00a04 	addi	sp,sp,40
    1068:	f800283a 	ret
    106c:	00bfffc4 	movi	r2,-1
    1070:	003ff906 	br	1058 <__alt_mem_Flash_flash_data+0xf4001058>

00001074 <puts>:
    1074:	00800074 	movhi	r2,1
    1078:	10893404 	addi	r2,r2,9424
    107c:	200b883a 	mov	r5,r4
    1080:	11000017 	ldw	r4,0(r2)
    1084:	0000fcc1 	jmpi	fcc <_puts_r>

00001088 <strlen>:
    1088:	208000cc 	andi	r2,r4,3
    108c:	10002026 	beq	r2,zero,1110 <strlen+0x88>
    1090:	20800007 	ldb	r2,0(r4)
    1094:	10002026 	beq	r2,zero,1118 <strlen+0x90>
    1098:	2005883a 	mov	r2,r4
    109c:	00000206 	br	10a8 <strlen+0x20>
    10a0:	10c00007 	ldb	r3,0(r2)
    10a4:	18001826 	beq	r3,zero,1108 <strlen+0x80>
    10a8:	10800044 	addi	r2,r2,1
    10ac:	10c000cc 	andi	r3,r2,3
    10b0:	183ffb1e 	bne	r3,zero,10a0 <__alt_mem_Flash_flash_data+0xf40010a0>
    10b4:	10c00017 	ldw	r3,0(r2)
    10b8:	01ffbff4 	movhi	r7,65279
    10bc:	39ffbfc4 	addi	r7,r7,-257
    10c0:	00ca303a 	nor	r5,zero,r3
    10c4:	01a02074 	movhi	r6,32897
    10c8:	19c7883a 	add	r3,r3,r7
    10cc:	31a02004 	addi	r6,r6,-32640
    10d0:	1946703a 	and	r3,r3,r5
    10d4:	1986703a 	and	r3,r3,r6
    10d8:	1800091e 	bne	r3,zero,1100 <strlen+0x78>
    10dc:	10800104 	addi	r2,r2,4
    10e0:	10c00017 	ldw	r3,0(r2)
    10e4:	19cb883a 	add	r5,r3,r7
    10e8:	00c6303a 	nor	r3,zero,r3
    10ec:	28c6703a 	and	r3,r5,r3
    10f0:	1986703a 	and	r3,r3,r6
    10f4:	183ff926 	beq	r3,zero,10dc <__alt_mem_Flash_flash_data+0xf40010dc>
    10f8:	00000106 	br	1100 <strlen+0x78>
    10fc:	10800044 	addi	r2,r2,1
    1100:	10c00007 	ldb	r3,0(r2)
    1104:	183ffd1e 	bne	r3,zero,10fc <__alt_mem_Flash_flash_data+0xf40010fc>
    1108:	1105c83a 	sub	r2,r2,r4
    110c:	f800283a 	ret
    1110:	2005883a 	mov	r2,r4
    1114:	003fe706 	br	10b4 <__alt_mem_Flash_flash_data+0xf40010b4>
    1118:	0005883a 	mov	r2,zero
    111c:	f800283a 	ret

00001120 <__sfvwrite_r>:
    1120:	30800217 	ldw	r2,8(r6)
    1124:	10006726 	beq	r2,zero,12c4 <__sfvwrite_r+0x1a4>
    1128:	defff404 	addi	sp,sp,-48
    112c:	dd000615 	stw	r20,24(sp)
    1130:	2029883a 	mov	r20,r4
    1134:	2900030b 	ldhu	r4,12(r5)
    1138:	ddc00915 	stw	r23,36(sp)
    113c:	dc000215 	stw	r16,8(sp)
    1140:	dfc00b15 	stw	ra,44(sp)
    1144:	df000a15 	stw	fp,40(sp)
    1148:	dd800815 	stw	r22,32(sp)
    114c:	dd400715 	stw	r21,28(sp)
    1150:	dcc00515 	stw	r19,20(sp)
    1154:	dc800415 	stw	r18,16(sp)
    1158:	dc400315 	stw	r17,12(sp)
    115c:	2080020c 	andi	r2,r4,8
    1160:	2821883a 	mov	r16,r5
    1164:	302f883a 	mov	r23,r6
    1168:	10002726 	beq	r2,zero,1208 <__sfvwrite_r+0xe8>
    116c:	28800417 	ldw	r2,16(r5)
    1170:	10002526 	beq	r2,zero,1208 <__sfvwrite_r+0xe8>
    1174:	2080008c 	andi	r2,r4,2
    1178:	bc400017 	ldw	r17,0(r23)
    117c:	10002a26 	beq	r2,zero,1228 <__sfvwrite_r+0x108>
    1180:	05600034 	movhi	r21,32768
    1184:	0027883a 	mov	r19,zero
    1188:	0025883a 	mov	r18,zero
    118c:	ad7f0004 	addi	r21,r21,-1024
    1190:	980d883a 	mov	r6,r19
    1194:	a009883a 	mov	r4,r20
    1198:	90004626 	beq	r18,zero,12b4 <__sfvwrite_r+0x194>
    119c:	900f883a 	mov	r7,r18
    11a0:	81400717 	ldw	r5,28(r16)
    11a4:	ac80022e 	bgeu	r21,r18,11b0 <__sfvwrite_r+0x90>
    11a8:	01e00034 	movhi	r7,32768
    11ac:	39ff0004 	addi	r7,r7,-1024
    11b0:	80800917 	ldw	r2,36(r16)
    11b4:	103ee83a 	callr	r2
    11b8:	0080520e 	bge	zero,r2,1304 <__sfvwrite_r+0x1e4>
    11bc:	b8c00217 	ldw	r3,8(r23)
    11c0:	98a7883a 	add	r19,r19,r2
    11c4:	90a5c83a 	sub	r18,r18,r2
    11c8:	1885c83a 	sub	r2,r3,r2
    11cc:	b8800215 	stw	r2,8(r23)
    11d0:	103fef1e 	bne	r2,zero,1190 <__alt_mem_Flash_flash_data+0xf4001190>
    11d4:	0005883a 	mov	r2,zero
    11d8:	dfc00b17 	ldw	ra,44(sp)
    11dc:	df000a17 	ldw	fp,40(sp)
    11e0:	ddc00917 	ldw	r23,36(sp)
    11e4:	dd800817 	ldw	r22,32(sp)
    11e8:	dd400717 	ldw	r21,28(sp)
    11ec:	dd000617 	ldw	r20,24(sp)
    11f0:	dcc00517 	ldw	r19,20(sp)
    11f4:	dc800417 	ldw	r18,16(sp)
    11f8:	dc400317 	ldw	r17,12(sp)
    11fc:	dc000217 	ldw	r16,8(sp)
    1200:	dec00c04 	addi	sp,sp,48
    1204:	f800283a 	ret
    1208:	a009883a 	mov	r4,r20
    120c:	800b883a 	mov	r5,r16
    1210:	00026c00 	call	26c0 <__swsetup_r>
    1214:	1000ec1e 	bne	r2,zero,15c8 <__sfvwrite_r+0x4a8>
    1218:	8100030b 	ldhu	r4,12(r16)
    121c:	bc400017 	ldw	r17,0(r23)
    1220:	2080008c 	andi	r2,r4,2
    1224:	103fd61e 	bne	r2,zero,1180 <__alt_mem_Flash_flash_data+0xf4001180>
    1228:	2080004c 	andi	r2,r4,1
    122c:	10003a1e 	bne	r2,zero,1318 <__sfvwrite_r+0x1f8>
    1230:	0039883a 	mov	fp,zero
    1234:	0025883a 	mov	r18,zero
    1238:	90001a26 	beq	r18,zero,12a4 <__sfvwrite_r+0x184>
    123c:	2080800c 	andi	r2,r4,512
    1240:	85800217 	ldw	r22,8(r16)
    1244:	10007626 	beq	r2,zero,1420 <__sfvwrite_r+0x300>
    1248:	b027883a 	mov	r19,r22
    124c:	95809436 	bltu	r18,r22,14a0 <__sfvwrite_r+0x380>
    1250:	2081200c 	andi	r2,r4,1152
    1254:	10009f1e 	bne	r2,zero,14d4 <__sfvwrite_r+0x3b4>
    1258:	81000017 	ldw	r4,0(r16)
    125c:	e00b883a 	mov	r5,fp
    1260:	980d883a 	mov	r6,r19
    1264:	0001fa80 	call	1fa8 <memmove>
    1268:	81000217 	ldw	r4,8(r16)
    126c:	81400017 	ldw	r5,0(r16)
    1270:	9005883a 	mov	r2,r18
    1274:	2587c83a 	sub	r3,r4,r22
    1278:	2ce7883a 	add	r19,r5,r19
    127c:	80c00215 	stw	r3,8(r16)
    1280:	84c00015 	stw	r19,0(r16)
    1284:	b8c00217 	ldw	r3,8(r23)
    1288:	e0b9883a 	add	fp,fp,r2
    128c:	90a5c83a 	sub	r18,r18,r2
    1290:	1885c83a 	sub	r2,r3,r2
    1294:	b8800215 	stw	r2,8(r23)
    1298:	103fce26 	beq	r2,zero,11d4 <__alt_mem_Flash_flash_data+0xf40011d4>
    129c:	8100030b 	ldhu	r4,12(r16)
    12a0:	903fe61e 	bne	r18,zero,123c <__alt_mem_Flash_flash_data+0xf400123c>
    12a4:	8f000017 	ldw	fp,0(r17)
    12a8:	8c800117 	ldw	r18,4(r17)
    12ac:	8c400204 	addi	r17,r17,8
    12b0:	003fe106 	br	1238 <__alt_mem_Flash_flash_data+0xf4001238>
    12b4:	8cc00017 	ldw	r19,0(r17)
    12b8:	8c800117 	ldw	r18,4(r17)
    12bc:	8c400204 	addi	r17,r17,8
    12c0:	003fb306 	br	1190 <__alt_mem_Flash_flash_data+0xf4001190>
    12c4:	0005883a 	mov	r2,zero
    12c8:	f800283a 	ret
    12cc:	00a00034 	movhi	r2,32768
    12d0:	10bfffc4 	addi	r2,r2,-1
    12d4:	9009883a 	mov	r4,r18
    12d8:	1480012e 	bgeu	r2,r18,12e0 <__sfvwrite_r+0x1c0>
    12dc:	1009883a 	mov	r4,r2
    12e0:	980b883a 	mov	r5,r19
    12e4:	0003b800 	call	3b80 <__divsi3>
    12e8:	81400717 	ldw	r5,28(r16)
    12ec:	80c00917 	ldw	r3,36(r16)
    12f0:	988f383a 	mul	r7,r19,r2
    12f4:	a009883a 	mov	r4,r20
    12f8:	e00d883a 	mov	r6,fp
    12fc:	183ee83a 	callr	r3
    1300:	00bfe016 	blt	zero,r2,1284 <__alt_mem_Flash_flash_data+0xf4001284>
    1304:	8080030b 	ldhu	r2,12(r16)
    1308:	10801014 	ori	r2,r2,64
    130c:	8080030d 	sth	r2,12(r16)
    1310:	00bfffc4 	movi	r2,-1
    1314:	003fb006 	br	11d8 <__alt_mem_Flash_flash_data+0xf40011d8>
    1318:	0027883a 	mov	r19,zero
    131c:	0011883a 	mov	r8,zero
    1320:	0039883a 	mov	fp,zero
    1324:	0025883a 	mov	r18,zero
    1328:	90001f26 	beq	r18,zero,13a8 <__sfvwrite_r+0x288>
    132c:	40006026 	beq	r8,zero,14b0 <__sfvwrite_r+0x390>
    1330:	982b883a 	mov	r21,r19
    1334:	94c0012e 	bgeu	r18,r19,133c <__sfvwrite_r+0x21c>
    1338:	902b883a 	mov	r21,r18
    133c:	81000017 	ldw	r4,0(r16)
    1340:	80800417 	ldw	r2,16(r16)
    1344:	a82d883a 	mov	r22,r21
    1348:	81800217 	ldw	r6,8(r16)
    134c:	81c00517 	ldw	r7,20(r16)
    1350:	1100022e 	bgeu	r2,r4,135c <__sfvwrite_r+0x23c>
    1354:	31c7883a 	add	r3,r6,r7
    1358:	1d401816 	blt	r3,r21,13bc <__sfvwrite_r+0x29c>
    135c:	a9c04416 	blt	r21,r7,1470 <__sfvwrite_r+0x350>
    1360:	80800917 	ldw	r2,36(r16)
    1364:	81400717 	ldw	r5,28(r16)
    1368:	a009883a 	mov	r4,r20
    136c:	da000115 	stw	r8,4(sp)
    1370:	e00d883a 	mov	r6,fp
    1374:	103ee83a 	callr	r2
    1378:	102d883a 	mov	r22,r2
    137c:	da000117 	ldw	r8,4(sp)
    1380:	00bfe00e 	bge	zero,r2,1304 <__alt_mem_Flash_flash_data+0xf4001304>
    1384:	9da7c83a 	sub	r19,r19,r22
    1388:	98001f26 	beq	r19,zero,1408 <__sfvwrite_r+0x2e8>
    138c:	b8800217 	ldw	r2,8(r23)
    1390:	e5b9883a 	add	fp,fp,r22
    1394:	95a5c83a 	sub	r18,r18,r22
    1398:	15adc83a 	sub	r22,r2,r22
    139c:	bd800215 	stw	r22,8(r23)
    13a0:	b03f8c26 	beq	r22,zero,11d4 <__alt_mem_Flash_flash_data+0xf40011d4>
    13a4:	903fe11e 	bne	r18,zero,132c <__alt_mem_Flash_flash_data+0xf400132c>
    13a8:	8f000017 	ldw	fp,0(r17)
    13ac:	8c800117 	ldw	r18,4(r17)
    13b0:	0011883a 	mov	r8,zero
    13b4:	8c400204 	addi	r17,r17,8
    13b8:	003fdb06 	br	1328 <__alt_mem_Flash_flash_data+0xf4001328>
    13bc:	180d883a 	mov	r6,r3
    13c0:	e00b883a 	mov	r5,fp
    13c4:	da000115 	stw	r8,4(sp)
    13c8:	d8c00015 	stw	r3,0(sp)
    13cc:	0001fa80 	call	1fa8 <memmove>
    13d0:	d8c00017 	ldw	r3,0(sp)
    13d4:	80800017 	ldw	r2,0(r16)
    13d8:	a009883a 	mov	r4,r20
    13dc:	800b883a 	mov	r5,r16
    13e0:	10c5883a 	add	r2,r2,r3
    13e4:	80800015 	stw	r2,0(r16)
    13e8:	d8c00015 	stw	r3,0(sp)
    13ec:	0002a1c0 	call	2a1c <_fflush_r>
    13f0:	d8c00017 	ldw	r3,0(sp)
    13f4:	da000117 	ldw	r8,4(sp)
    13f8:	103fc21e 	bne	r2,zero,1304 <__alt_mem_Flash_flash_data+0xf4001304>
    13fc:	182d883a 	mov	r22,r3
    1400:	9da7c83a 	sub	r19,r19,r22
    1404:	983fe11e 	bne	r19,zero,138c <__alt_mem_Flash_flash_data+0xf400138c>
    1408:	a009883a 	mov	r4,r20
    140c:	800b883a 	mov	r5,r16
    1410:	0002a1c0 	call	2a1c <_fflush_r>
    1414:	103fbb1e 	bne	r2,zero,1304 <__alt_mem_Flash_flash_data+0xf4001304>
    1418:	0011883a 	mov	r8,zero
    141c:	003fdb06 	br	138c <__alt_mem_Flash_flash_data+0xf400138c>
    1420:	81000017 	ldw	r4,0(r16)
    1424:	80800417 	ldw	r2,16(r16)
    1428:	11000236 	bltu	r2,r4,1434 <__sfvwrite_r+0x314>
    142c:	84c00517 	ldw	r19,20(r16)
    1430:	94ffa62e 	bgeu	r18,r19,12cc <__alt_mem_Flash_flash_data+0xf40012cc>
    1434:	9027883a 	mov	r19,r18
    1438:	b480012e 	bgeu	r22,r18,1440 <__sfvwrite_r+0x320>
    143c:	b027883a 	mov	r19,r22
    1440:	e00b883a 	mov	r5,fp
    1444:	980d883a 	mov	r6,r19
    1448:	0001fa80 	call	1fa8 <memmove>
    144c:	80800217 	ldw	r2,8(r16)
    1450:	80c00017 	ldw	r3,0(r16)
    1454:	14c5c83a 	sub	r2,r2,r19
    1458:	1cc7883a 	add	r3,r3,r19
    145c:	80800215 	stw	r2,8(r16)
    1460:	80c00015 	stw	r3,0(r16)
    1464:	10004326 	beq	r2,zero,1574 <__sfvwrite_r+0x454>
    1468:	9805883a 	mov	r2,r19
    146c:	003f8506 	br	1284 <__alt_mem_Flash_flash_data+0xf4001284>
    1470:	a80d883a 	mov	r6,r21
    1474:	e00b883a 	mov	r5,fp
    1478:	da000115 	stw	r8,4(sp)
    147c:	0001fa80 	call	1fa8 <memmove>
    1480:	80800217 	ldw	r2,8(r16)
    1484:	80c00017 	ldw	r3,0(r16)
    1488:	da000117 	ldw	r8,4(sp)
    148c:	1545c83a 	sub	r2,r2,r21
    1490:	1d6b883a 	add	r21,r3,r21
    1494:	80800215 	stw	r2,8(r16)
    1498:	85400015 	stw	r21,0(r16)
    149c:	003fb906 	br	1384 <__alt_mem_Flash_flash_data+0xf4001384>
    14a0:	81000017 	ldw	r4,0(r16)
    14a4:	902d883a 	mov	r22,r18
    14a8:	9027883a 	mov	r19,r18
    14ac:	003f6b06 	br	125c <__alt_mem_Flash_flash_data+0xf400125c>
    14b0:	e009883a 	mov	r4,fp
    14b4:	01400284 	movi	r5,10
    14b8:	900d883a 	mov	r6,r18
    14bc:	0001d880 	call	1d88 <memchr>
    14c0:	10003e26 	beq	r2,zero,15bc <__sfvwrite_r+0x49c>
    14c4:	10800044 	addi	r2,r2,1
    14c8:	1727c83a 	sub	r19,r2,fp
    14cc:	02000044 	movi	r8,1
    14d0:	003f9706 	br	1330 <__alt_mem_Flash_flash_data+0xf4001330>
    14d4:	80800517 	ldw	r2,20(r16)
    14d8:	81400417 	ldw	r5,16(r16)
    14dc:	80c00017 	ldw	r3,0(r16)
    14e0:	10a7883a 	add	r19,r2,r2
    14e4:	9885883a 	add	r2,r19,r2
    14e8:	1026d7fa 	srli	r19,r2,31
    14ec:	196bc83a 	sub	r21,r3,r5
    14f0:	a9800044 	addi	r6,r21,1
    14f4:	9885883a 	add	r2,r19,r2
    14f8:	1027d07a 	srai	r19,r2,1
    14fc:	3485883a 	add	r2,r6,r18
    1500:	980d883a 	mov	r6,r19
    1504:	9880022e 	bgeu	r19,r2,1510 <__sfvwrite_r+0x3f0>
    1508:	1027883a 	mov	r19,r2
    150c:	100d883a 	mov	r6,r2
    1510:	2101000c 	andi	r4,r4,1024
    1514:	20001c26 	beq	r4,zero,1588 <__sfvwrite_r+0x468>
    1518:	a009883a 	mov	r4,r20
    151c:	300b883a 	mov	r5,r6
    1520:	00015e00 	call	15e0 <_malloc_r>
    1524:	102d883a 	mov	r22,r2
    1528:	10002926 	beq	r2,zero,15d0 <__sfvwrite_r+0x4b0>
    152c:	81400417 	ldw	r5,16(r16)
    1530:	1009883a 	mov	r4,r2
    1534:	a80d883a 	mov	r6,r21
    1538:	0001e700 	call	1e70 <memcpy>
    153c:	8080030b 	ldhu	r2,12(r16)
    1540:	00fedfc4 	movi	r3,-1153
    1544:	10c4703a 	and	r2,r2,r3
    1548:	10802014 	ori	r2,r2,128
    154c:	8080030d 	sth	r2,12(r16)
    1550:	b549883a 	add	r4,r22,r21
    1554:	9d4bc83a 	sub	r5,r19,r21
    1558:	85800415 	stw	r22,16(r16)
    155c:	84c00515 	stw	r19,20(r16)
    1560:	81000015 	stw	r4,0(r16)
    1564:	902d883a 	mov	r22,r18
    1568:	81400215 	stw	r5,8(r16)
    156c:	9027883a 	mov	r19,r18
    1570:	003f3a06 	br	125c <__alt_mem_Flash_flash_data+0xf400125c>
    1574:	a009883a 	mov	r4,r20
    1578:	800b883a 	mov	r5,r16
    157c:	0002a1c0 	call	2a1c <_fflush_r>
    1580:	103fb926 	beq	r2,zero,1468 <__alt_mem_Flash_flash_data+0xf4001468>
    1584:	003f5f06 	br	1304 <__alt_mem_Flash_flash_data+0xf4001304>
    1588:	a009883a 	mov	r4,r20
    158c:	00021040 	call	2104 <_realloc_r>
    1590:	102d883a 	mov	r22,r2
    1594:	103fee1e 	bne	r2,zero,1550 <__alt_mem_Flash_flash_data+0xf4001550>
    1598:	81400417 	ldw	r5,16(r16)
    159c:	a009883a 	mov	r4,r20
    15a0:	0002f6c0 	call	2f6c <_free_r>
    15a4:	8080030b 	ldhu	r2,12(r16)
    15a8:	00ffdfc4 	movi	r3,-129
    15ac:	1884703a 	and	r2,r3,r2
    15b0:	00c00304 	movi	r3,12
    15b4:	a0c00015 	stw	r3,0(r20)
    15b8:	003f5306 	br	1308 <__alt_mem_Flash_flash_data+0xf4001308>
    15bc:	94c00044 	addi	r19,r18,1
    15c0:	02000044 	movi	r8,1
    15c4:	003f5a06 	br	1330 <__alt_mem_Flash_flash_data+0xf4001330>
    15c8:	00bfffc4 	movi	r2,-1
    15cc:	003f0206 	br	11d8 <__alt_mem_Flash_flash_data+0xf40011d8>
    15d0:	00800304 	movi	r2,12
    15d4:	a0800015 	stw	r2,0(r20)
    15d8:	8080030b 	ldhu	r2,12(r16)
    15dc:	003f4a06 	br	1308 <__alt_mem_Flash_flash_data+0xf4001308>

000015e0 <_malloc_r>:
    15e0:	defff504 	addi	sp,sp,-44
    15e4:	dc800315 	stw	r18,12(sp)
    15e8:	dfc00a15 	stw	ra,40(sp)
    15ec:	df000915 	stw	fp,36(sp)
    15f0:	ddc00815 	stw	r23,32(sp)
    15f4:	dd800715 	stw	r22,28(sp)
    15f8:	dd400615 	stw	r21,24(sp)
    15fc:	dd000515 	stw	r20,20(sp)
    1600:	dcc00415 	stw	r19,16(sp)
    1604:	dc400215 	stw	r17,8(sp)
    1608:	dc000115 	stw	r16,4(sp)
    160c:	288002c4 	addi	r2,r5,11
    1610:	00c00584 	movi	r3,22
    1614:	2025883a 	mov	r18,r4
    1618:	18802a2e 	bgeu	r3,r2,16c4 <_malloc_r+0xe4>
    161c:	047ffe04 	movi	r17,-8
    1620:	1462703a 	and	r17,r2,r17
    1624:	88009e16 	blt	r17,zero,18a0 <_malloc_r+0x2c0>
    1628:	89409d36 	bltu	r17,r5,18a0 <_malloc_r+0x2c0>
    162c:	000471c0 	call	471c <__malloc_lock>
    1630:	00807dc4 	movi	r2,503
    1634:	14402736 	bltu	r2,r17,16d4 <_malloc_r+0xf4>
    1638:	8806d0fa 	srli	r3,r17,3
    163c:	04c00074 	movhi	r19,1
    1640:	9cc2c004 	addi	r19,r19,2816
    1644:	18c5883a 	add	r2,r3,r3
    1648:	1085883a 	add	r2,r2,r2
    164c:	1085883a 	add	r2,r2,r2
    1650:	9885883a 	add	r2,r19,r2
    1654:	14000317 	ldw	r16,12(r2)
    1658:	80814a26 	beq	r16,r2,1b84 <_malloc_r+0x5a4>
    165c:	80c00117 	ldw	r3,4(r16)
    1660:	81000317 	ldw	r4,12(r16)
    1664:	00bfff04 	movi	r2,-4
    1668:	1884703a 	and	r2,r3,r2
    166c:	81400217 	ldw	r5,8(r16)
    1670:	8085883a 	add	r2,r16,r2
    1674:	10c00117 	ldw	r3,4(r2)
    1678:	29000315 	stw	r4,12(r5)
    167c:	21400215 	stw	r5,8(r4)
    1680:	18c00054 	ori	r3,r3,1
    1684:	10c00115 	stw	r3,4(r2)
    1688:	9009883a 	mov	r4,r18
    168c:	000483c0 	call	483c <__malloc_unlock>
    1690:	80800204 	addi	r2,r16,8
    1694:	dfc00a17 	ldw	ra,40(sp)
    1698:	df000917 	ldw	fp,36(sp)
    169c:	ddc00817 	ldw	r23,32(sp)
    16a0:	dd800717 	ldw	r22,28(sp)
    16a4:	dd400617 	ldw	r21,24(sp)
    16a8:	dd000517 	ldw	r20,20(sp)
    16ac:	dcc00417 	ldw	r19,16(sp)
    16b0:	dc800317 	ldw	r18,12(sp)
    16b4:	dc400217 	ldw	r17,8(sp)
    16b8:	dc000117 	ldw	r16,4(sp)
    16bc:	dec00b04 	addi	sp,sp,44
    16c0:	f800283a 	ret
    16c4:	04400404 	movi	r17,16
    16c8:	89407536 	bltu	r17,r5,18a0 <_malloc_r+0x2c0>
    16cc:	000471c0 	call	471c <__malloc_lock>
    16d0:	003fd906 	br	1638 <__alt_mem_Flash_flash_data+0xf4001638>
    16d4:	8806d27a 	srli	r3,r17,9
    16d8:	18007526 	beq	r3,zero,18b0 <_malloc_r+0x2d0>
    16dc:	00800104 	movi	r2,4
    16e0:	10c0ef36 	bltu	r2,r3,1aa0 <_malloc_r+0x4c0>
    16e4:	8806d1ba 	srli	r3,r17,6
    16e8:	19c00e04 	addi	r7,r3,56
    16ec:	39cb883a 	add	r5,r7,r7
    16f0:	04c00074 	movhi	r19,1
    16f4:	294b883a 	add	r5,r5,r5
    16f8:	9cc2c004 	addi	r19,r19,2816
    16fc:	294b883a 	add	r5,r5,r5
    1700:	994b883a 	add	r5,r19,r5
    1704:	2c000317 	ldw	r16,12(r5)
    1708:	2c000e26 	beq	r5,r16,1744 <_malloc_r+0x164>
    170c:	80800117 	ldw	r2,4(r16)
    1710:	01bfff04 	movi	r6,-4
    1714:	010003c4 	movi	r4,15
    1718:	1184703a 	and	r2,r2,r6
    171c:	1447c83a 	sub	r3,r2,r17
    1720:	20c00716 	blt	r4,r3,1740 <_malloc_r+0x160>
    1724:	1800650e 	bge	r3,zero,18bc <_malloc_r+0x2dc>
    1728:	84000317 	ldw	r16,12(r16)
    172c:	2c000526 	beq	r5,r16,1744 <_malloc_r+0x164>
    1730:	80800117 	ldw	r2,4(r16)
    1734:	1184703a 	and	r2,r2,r6
    1738:	1447c83a 	sub	r3,r2,r17
    173c:	20fff90e 	bge	r4,r3,1724 <__alt_mem_Flash_flash_data+0xf4001724>
    1740:	39ffffc4 	addi	r7,r7,-1
    1744:	38c00044 	addi	r3,r7,1
    1748:	01800074 	movhi	r6,1
    174c:	9c000417 	ldw	r16,16(r19)
    1750:	3182c004 	addi	r6,r6,2816
    1754:	32400204 	addi	r9,r6,8
    1758:	82410326 	beq	r16,r9,1b68 <_malloc_r+0x588>
    175c:	81000117 	ldw	r4,4(r16)
    1760:	00bfff04 	movi	r2,-4
    1764:	208e703a 	and	r7,r4,r2
    1768:	3c45c83a 	sub	r2,r7,r17
    176c:	010003c4 	movi	r4,15
    1770:	2080ee16 	blt	r4,r2,1b2c <_malloc_r+0x54c>
    1774:	32400515 	stw	r9,20(r6)
    1778:	32400415 	stw	r9,16(r6)
    177c:	1000510e 	bge	r2,zero,18c4 <_malloc_r+0x2e4>
    1780:	00807fc4 	movi	r2,511
    1784:	11c0ce36 	bltu	r2,r7,1ac0 <_malloc_r+0x4e0>
    1788:	3808d0fa 	srli	r4,r7,3
    178c:	01c00044 	movi	r7,1
    1790:	30800117 	ldw	r2,4(r6)
    1794:	210b883a 	add	r5,r4,r4
    1798:	294b883a 	add	r5,r5,r5
    179c:	2009d0ba 	srai	r4,r4,2
    17a0:	294b883a 	add	r5,r5,r5
    17a4:	298b883a 	add	r5,r5,r6
    17a8:	2a000217 	ldw	r8,8(r5)
    17ac:	3908983a 	sll	r4,r7,r4
    17b0:	81400315 	stw	r5,12(r16)
    17b4:	82000215 	stw	r8,8(r16)
    17b8:	2088b03a 	or	r4,r4,r2
    17bc:	2c000215 	stw	r16,8(r5)
    17c0:	31000115 	stw	r4,4(r6)
    17c4:	44000315 	stw	r16,12(r8)
    17c8:	1805d0ba 	srai	r2,r3,2
    17cc:	01400044 	movi	r5,1
    17d0:	288a983a 	sll	r5,r5,r2
    17d4:	21404336 	bltu	r4,r5,18e4 <_malloc_r+0x304>
    17d8:	2144703a 	and	r2,r4,r5
    17dc:	10000a1e 	bne	r2,zero,1808 <_malloc_r+0x228>
    17e0:	00bfff04 	movi	r2,-4
    17e4:	294b883a 	add	r5,r5,r5
    17e8:	1886703a 	and	r3,r3,r2
    17ec:	2144703a 	and	r2,r4,r5
    17f0:	18c00104 	addi	r3,r3,4
    17f4:	1000041e 	bne	r2,zero,1808 <_malloc_r+0x228>
    17f8:	294b883a 	add	r5,r5,r5
    17fc:	2144703a 	and	r2,r4,r5
    1800:	18c00104 	addi	r3,r3,4
    1804:	103ffc26 	beq	r2,zero,17f8 <__alt_mem_Flash_flash_data+0xf40017f8>
    1808:	023fff04 	movi	r8,-4
    180c:	01c003c4 	movi	r7,15
    1810:	18c5883a 	add	r2,r3,r3
    1814:	1085883a 	add	r2,r2,r2
    1818:	1085883a 	add	r2,r2,r2
    181c:	9895883a 	add	r10,r19,r2
    1820:	52c00304 	addi	r11,r10,12
    1824:	1819883a 	mov	r12,r3
    1828:	5c000017 	ldw	r16,0(r11)
    182c:	59bffd04 	addi	r6,r11,-12
    1830:	8180041e 	bne	r16,r6,1844 <_malloc_r+0x264>
    1834:	0000ce06 	br	1b70 <_malloc_r+0x590>
    1838:	2000d70e 	bge	r4,zero,1b98 <_malloc_r+0x5b8>
    183c:	84000317 	ldw	r16,12(r16)
    1840:	8180cb26 	beq	r16,r6,1b70 <_malloc_r+0x590>
    1844:	80800117 	ldw	r2,4(r16)
    1848:	1204703a 	and	r2,r2,r8
    184c:	1449c83a 	sub	r4,r2,r17
    1850:	393ff90e 	bge	r7,r4,1838 <__alt_mem_Flash_flash_data+0xf4001838>
    1854:	80800317 	ldw	r2,12(r16)
    1858:	80c00217 	ldw	r3,8(r16)
    185c:	89400054 	ori	r5,r17,1
    1860:	81400115 	stw	r5,4(r16)
    1864:	18800315 	stw	r2,12(r3)
    1868:	10c00215 	stw	r3,8(r2)
    186c:	8463883a 	add	r17,r16,r17
    1870:	9c400515 	stw	r17,20(r19)
    1874:	9c400415 	stw	r17,16(r19)
    1878:	20800054 	ori	r2,r4,1
    187c:	88800115 	stw	r2,4(r17)
    1880:	8a400315 	stw	r9,12(r17)
    1884:	8a400215 	stw	r9,8(r17)
    1888:	8923883a 	add	r17,r17,r4
    188c:	89000015 	stw	r4,0(r17)
    1890:	9009883a 	mov	r4,r18
    1894:	000483c0 	call	483c <__malloc_unlock>
    1898:	80800204 	addi	r2,r16,8
    189c:	003f7d06 	br	1694 <__alt_mem_Flash_flash_data+0xf4001694>
    18a0:	00800304 	movi	r2,12
    18a4:	90800015 	stw	r2,0(r18)
    18a8:	0005883a 	mov	r2,zero
    18ac:	003f7906 	br	1694 <__alt_mem_Flash_flash_data+0xf4001694>
    18b0:	01401f84 	movi	r5,126
    18b4:	01c00fc4 	movi	r7,63
    18b8:	003f8d06 	br	16f0 <__alt_mem_Flash_flash_data+0xf40016f0>
    18bc:	81000317 	ldw	r4,12(r16)
    18c0:	003f6a06 	br	166c <__alt_mem_Flash_flash_data+0xf400166c>
    18c4:	81c5883a 	add	r2,r16,r7
    18c8:	10c00117 	ldw	r3,4(r2)
    18cc:	9009883a 	mov	r4,r18
    18d0:	18c00054 	ori	r3,r3,1
    18d4:	10c00115 	stw	r3,4(r2)
    18d8:	000483c0 	call	483c <__malloc_unlock>
    18dc:	80800204 	addi	r2,r16,8
    18e0:	003f6c06 	br	1694 <__alt_mem_Flash_flash_data+0xf4001694>
    18e4:	9c000217 	ldw	r16,8(r19)
    18e8:	00bfff04 	movi	r2,-4
    18ec:	85800117 	ldw	r22,4(r16)
    18f0:	b0ac703a 	and	r22,r22,r2
    18f4:	b4400336 	bltu	r22,r17,1904 <_malloc_r+0x324>
    18f8:	b445c83a 	sub	r2,r22,r17
    18fc:	00c003c4 	movi	r3,15
    1900:	18805d16 	blt	r3,r2,1a78 <_malloc_r+0x498>
    1904:	05c00074 	movhi	r23,1
    1908:	00800074 	movhi	r2,1
    190c:	bdc93504 	addi	r23,r23,9428
    1910:	10912104 	addi	r2,r2,17540
    1914:	15400017 	ldw	r21,0(r2)
    1918:	b9000017 	ldw	r4,0(r23)
    191c:	00ffffc4 	movi	r3,-1
    1920:	858d883a 	add	r6,r16,r22
    1924:	8d6b883a 	add	r21,r17,r21
    1928:	20c0e426 	beq	r4,r3,1cbc <_malloc_r+0x6dc>
    192c:	ad4403c4 	addi	r21,r21,4111
    1930:	00fc0004 	movi	r3,-4096
    1934:	a8ea703a 	and	r21,r21,r3
    1938:	9009883a 	mov	r4,r18
    193c:	a80b883a 	mov	r5,r21
    1940:	d9800015 	stw	r6,0(sp)
    1944:	000266c0 	call	266c <_sbrk_r>
    1948:	00ffffc4 	movi	r3,-1
    194c:	1029883a 	mov	r20,r2
    1950:	d9800017 	ldw	r6,0(sp)
    1954:	10c0a426 	beq	r2,r3,1be8 <_malloc_r+0x608>
    1958:	1180a236 	bltu	r2,r6,1be4 <_malloc_r+0x604>
    195c:	07000074 	movhi	fp,1
    1960:	e7114304 	addi	fp,fp,17676
    1964:	e0c00017 	ldw	r3,0(fp)
    1968:	a8c7883a 	add	r3,r21,r3
    196c:	e0c00015 	stw	r3,0(fp)
    1970:	3500da26 	beq	r6,r20,1cdc <_malloc_r+0x6fc>
    1974:	b9000017 	ldw	r4,0(r23)
    1978:	00bfffc4 	movi	r2,-1
    197c:	2080e426 	beq	r4,r2,1d10 <_malloc_r+0x730>
    1980:	a185c83a 	sub	r2,r20,r6
    1984:	1885883a 	add	r2,r3,r2
    1988:	e0800015 	stw	r2,0(fp)
    198c:	a0c001cc 	andi	r3,r20,7
    1990:	1800b526 	beq	r3,zero,1c68 <_malloc_r+0x688>
    1994:	a0e9c83a 	sub	r20,r20,r3
    1998:	00840204 	movi	r2,4104
    199c:	a5000204 	addi	r20,r20,8
    19a0:	10c7c83a 	sub	r3,r2,r3
    19a4:	a545883a 	add	r2,r20,r21
    19a8:	1083ffcc 	andi	r2,r2,4095
    19ac:	18abc83a 	sub	r21,r3,r2
    19b0:	9009883a 	mov	r4,r18
    19b4:	a80b883a 	mov	r5,r21
    19b8:	000266c0 	call	266c <_sbrk_r>
    19bc:	00ffffc4 	movi	r3,-1
    19c0:	10c0d026 	beq	r2,r3,1d04 <_malloc_r+0x724>
    19c4:	1507c83a 	sub	r3,r2,r20
    19c8:	a8c7883a 	add	r3,r21,r3
    19cc:	18c00054 	ori	r3,r3,1
    19d0:	e0800017 	ldw	r2,0(fp)
    19d4:	9d000215 	stw	r20,8(r19)
    19d8:	a0c00115 	stw	r3,4(r20)
    19dc:	a887883a 	add	r3,r21,r2
    19e0:	e0c00015 	stw	r3,0(fp)
    19e4:	84c00e26 	beq	r16,r19,1a20 <_malloc_r+0x440>
    19e8:	018003c4 	movi	r6,15
    19ec:	3580a02e 	bgeu	r6,r22,1c70 <_malloc_r+0x690>
    19f0:	81400117 	ldw	r5,4(r16)
    19f4:	013ffe04 	movi	r4,-8
    19f8:	b0bffd04 	addi	r2,r22,-12
    19fc:	1104703a 	and	r2,r2,r4
    1a00:	2900004c 	andi	r4,r5,1
    1a04:	1108b03a 	or	r4,r2,r4
    1a08:	81000115 	stw	r4,4(r16)
    1a0c:	01400144 	movi	r5,5
    1a10:	8089883a 	add	r4,r16,r2
    1a14:	21400115 	stw	r5,4(r4)
    1a18:	21400215 	stw	r5,8(r4)
    1a1c:	3080c036 	bltu	r6,r2,1d20 <_malloc_r+0x740>
    1a20:	00800074 	movhi	r2,1
    1a24:	10912004 	addi	r2,r2,17536
    1a28:	11000017 	ldw	r4,0(r2)
    1a2c:	20c0012e 	bgeu	r4,r3,1a34 <_malloc_r+0x454>
    1a30:	10c00015 	stw	r3,0(r2)
    1a34:	00800074 	movhi	r2,1
    1a38:	10911f04 	addi	r2,r2,17532
    1a3c:	11000017 	ldw	r4,0(r2)
    1a40:	9c000217 	ldw	r16,8(r19)
    1a44:	20c0012e 	bgeu	r4,r3,1a4c <_malloc_r+0x46c>
    1a48:	10c00015 	stw	r3,0(r2)
    1a4c:	80c00117 	ldw	r3,4(r16)
    1a50:	00bfff04 	movi	r2,-4
    1a54:	1886703a 	and	r3,r3,r2
    1a58:	1c45c83a 	sub	r2,r3,r17
    1a5c:	1c400236 	bltu	r3,r17,1a68 <_malloc_r+0x488>
    1a60:	00c003c4 	movi	r3,15
    1a64:	18800416 	blt	r3,r2,1a78 <_malloc_r+0x498>
    1a68:	9009883a 	mov	r4,r18
    1a6c:	000483c0 	call	483c <__malloc_unlock>
    1a70:	0005883a 	mov	r2,zero
    1a74:	003f0706 	br	1694 <__alt_mem_Flash_flash_data+0xf4001694>
    1a78:	88c00054 	ori	r3,r17,1
    1a7c:	80c00115 	stw	r3,4(r16)
    1a80:	8463883a 	add	r17,r16,r17
    1a84:	10800054 	ori	r2,r2,1
    1a88:	9c400215 	stw	r17,8(r19)
    1a8c:	88800115 	stw	r2,4(r17)
    1a90:	9009883a 	mov	r4,r18
    1a94:	000483c0 	call	483c <__malloc_unlock>
    1a98:	80800204 	addi	r2,r16,8
    1a9c:	003efd06 	br	1694 <__alt_mem_Flash_flash_data+0xf4001694>
    1aa0:	00800504 	movi	r2,20
    1aa4:	10c0482e 	bgeu	r2,r3,1bc8 <_malloc_r+0x5e8>
    1aa8:	00801504 	movi	r2,84
    1aac:	10c06836 	bltu	r2,r3,1c50 <_malloc_r+0x670>
    1ab0:	8806d33a 	srli	r3,r17,12
    1ab4:	19c01b84 	addi	r7,r3,110
    1ab8:	39cb883a 	add	r5,r7,r7
    1abc:	003f0c06 	br	16f0 <__alt_mem_Flash_flash_data+0xf40016f0>
    1ac0:	3804d27a 	srli	r2,r7,9
    1ac4:	01000104 	movi	r4,4
    1ac8:	2080422e 	bgeu	r4,r2,1bd4 <_malloc_r+0x5f4>
    1acc:	01000504 	movi	r4,20
    1ad0:	20807c36 	bltu	r4,r2,1cc4 <_malloc_r+0x6e4>
    1ad4:	110016c4 	addi	r4,r2,91
    1ad8:	210b883a 	add	r5,r4,r4
    1adc:	294b883a 	add	r5,r5,r5
    1ae0:	294b883a 	add	r5,r5,r5
    1ae4:	994b883a 	add	r5,r19,r5
    1ae8:	28800217 	ldw	r2,8(r5)
    1aec:	02000074 	movhi	r8,1
    1af0:	4202c004 	addi	r8,r8,2816
    1af4:	11406326 	beq	r2,r5,1c84 <_malloc_r+0x6a4>
    1af8:	01bfff04 	movi	r6,-4
    1afc:	11000117 	ldw	r4,4(r2)
    1b00:	2188703a 	and	r4,r4,r6
    1b04:	3900022e 	bgeu	r7,r4,1b10 <_malloc_r+0x530>
    1b08:	10800217 	ldw	r2,8(r2)
    1b0c:	28bffb1e 	bne	r5,r2,1afc <__alt_mem_Flash_flash_data+0xf4001afc>
    1b10:	11800317 	ldw	r6,12(r2)
    1b14:	99000117 	ldw	r4,4(r19)
    1b18:	81800315 	stw	r6,12(r16)
    1b1c:	80800215 	stw	r2,8(r16)
    1b20:	34000215 	stw	r16,8(r6)
    1b24:	14000315 	stw	r16,12(r2)
    1b28:	003f2706 	br	17c8 <__alt_mem_Flash_flash_data+0xf40017c8>
    1b2c:	88c00054 	ori	r3,r17,1
    1b30:	80c00115 	stw	r3,4(r16)
    1b34:	8463883a 	add	r17,r16,r17
    1b38:	34400515 	stw	r17,20(r6)
    1b3c:	34400415 	stw	r17,16(r6)
    1b40:	10c00054 	ori	r3,r2,1
    1b44:	8a400315 	stw	r9,12(r17)
    1b48:	8a400215 	stw	r9,8(r17)
    1b4c:	88c00115 	stw	r3,4(r17)
    1b50:	88a3883a 	add	r17,r17,r2
    1b54:	88800015 	stw	r2,0(r17)
    1b58:	9009883a 	mov	r4,r18
    1b5c:	000483c0 	call	483c <__malloc_unlock>
    1b60:	80800204 	addi	r2,r16,8
    1b64:	003ecb06 	br	1694 <__alt_mem_Flash_flash_data+0xf4001694>
    1b68:	31000117 	ldw	r4,4(r6)
    1b6c:	003f1606 	br	17c8 <__alt_mem_Flash_flash_data+0xf40017c8>
    1b70:	63000044 	addi	r12,r12,1
    1b74:	608000cc 	andi	r2,r12,3
    1b78:	5ac00204 	addi	r11,r11,8
    1b7c:	103f2a1e 	bne	r2,zero,1828 <__alt_mem_Flash_flash_data+0xf4001828>
    1b80:	00002106 	br	1c08 <_malloc_r+0x628>
    1b84:	80800204 	addi	r2,r16,8
    1b88:	84000517 	ldw	r16,20(r16)
    1b8c:	143eb31e 	bne	r2,r16,165c <__alt_mem_Flash_flash_data+0xf400165c>
    1b90:	18c00084 	addi	r3,r3,2
    1b94:	003eec06 	br	1748 <__alt_mem_Flash_flash_data+0xf4001748>
    1b98:	8085883a 	add	r2,r16,r2
    1b9c:	10c00117 	ldw	r3,4(r2)
    1ba0:	81000317 	ldw	r4,12(r16)
    1ba4:	81400217 	ldw	r5,8(r16)
    1ba8:	18c00054 	ori	r3,r3,1
    1bac:	10c00115 	stw	r3,4(r2)
    1bb0:	29000315 	stw	r4,12(r5)
    1bb4:	21400215 	stw	r5,8(r4)
    1bb8:	9009883a 	mov	r4,r18
    1bbc:	000483c0 	call	483c <__malloc_unlock>
    1bc0:	80800204 	addi	r2,r16,8
    1bc4:	003eb306 	br	1694 <__alt_mem_Flash_flash_data+0xf4001694>
    1bc8:	19c016c4 	addi	r7,r3,91
    1bcc:	39cb883a 	add	r5,r7,r7
    1bd0:	003ec706 	br	16f0 <__alt_mem_Flash_flash_data+0xf40016f0>
    1bd4:	3804d1ba 	srli	r2,r7,6
    1bd8:	11000e04 	addi	r4,r2,56
    1bdc:	210b883a 	add	r5,r4,r4
    1be0:	003fbe06 	br	1adc <__alt_mem_Flash_flash_data+0xf4001adc>
    1be4:	84ff5d26 	beq	r16,r19,195c <__alt_mem_Flash_flash_data+0xf400195c>
    1be8:	9c000217 	ldw	r16,8(r19)
    1bec:	00bfff04 	movi	r2,-4
    1bf0:	80c00117 	ldw	r3,4(r16)
    1bf4:	1886703a 	and	r3,r3,r2
    1bf8:	003f9706 	br	1a58 <__alt_mem_Flash_flash_data+0xf4001a58>
    1bfc:	52800017 	ldw	r10,0(r10)
    1c00:	18ffffc4 	addi	r3,r3,-1
    1c04:	50805c1e 	bne	r10,r2,1d78 <_malloc_r+0x798>
    1c08:	190000cc 	andi	r4,r3,3
    1c0c:	50bffe04 	addi	r2,r10,-8
    1c10:	203ffa1e 	bne	r4,zero,1bfc <__alt_mem_Flash_flash_data+0xf4001bfc>
    1c14:	98800117 	ldw	r2,4(r19)
    1c18:	0146303a 	nor	r3,zero,r5
    1c1c:	1884703a 	and	r2,r3,r2
    1c20:	98800115 	stw	r2,4(r19)
    1c24:	294b883a 	add	r5,r5,r5
    1c28:	117f2e36 	bltu	r2,r5,18e4 <__alt_mem_Flash_flash_data+0xf40018e4>
    1c2c:	283f2d26 	beq	r5,zero,18e4 <__alt_mem_Flash_flash_data+0xf40018e4>
    1c30:	1146703a 	and	r3,r2,r5
    1c34:	1800521e 	bne	r3,zero,1d80 <_malloc_r+0x7a0>
    1c38:	6007883a 	mov	r3,r12
    1c3c:	294b883a 	add	r5,r5,r5
    1c40:	1148703a 	and	r4,r2,r5
    1c44:	18c00104 	addi	r3,r3,4
    1c48:	203ffc26 	beq	r4,zero,1c3c <__alt_mem_Flash_flash_data+0xf4001c3c>
    1c4c:	003ef006 	br	1810 <__alt_mem_Flash_flash_data+0xf4001810>
    1c50:	00805504 	movi	r2,340
    1c54:	10c01336 	bltu	r2,r3,1ca4 <_malloc_r+0x6c4>
    1c58:	8806d3fa 	srli	r3,r17,15
    1c5c:	19c01dc4 	addi	r7,r3,119
    1c60:	39cb883a 	add	r5,r7,r7
    1c64:	003ea206 	br	16f0 <__alt_mem_Flash_flash_data+0xf40016f0>
    1c68:	00c40004 	movi	r3,4096
    1c6c:	003f4d06 	br	19a4 <__alt_mem_Flash_flash_data+0xf40019a4>
    1c70:	00800044 	movi	r2,1
    1c74:	a0800115 	stw	r2,4(r20)
    1c78:	a021883a 	mov	r16,r20
    1c7c:	0007883a 	mov	r3,zero
    1c80:	003f7506 	br	1a58 <__alt_mem_Flash_flash_data+0xf4001a58>
    1c84:	200bd0ba 	srai	r5,r4,2
    1c88:	01800044 	movi	r6,1
    1c8c:	41000117 	ldw	r4,4(r8)
    1c90:	314a983a 	sll	r5,r6,r5
    1c94:	100d883a 	mov	r6,r2
    1c98:	2908b03a 	or	r4,r5,r4
    1c9c:	41000115 	stw	r4,4(r8)
    1ca0:	003f9d06 	br	1b18 <__alt_mem_Flash_flash_data+0xf4001b18>
    1ca4:	00815504 	movi	r2,1364
    1ca8:	10c01336 	bltu	r2,r3,1cf8 <_malloc_r+0x718>
    1cac:	8806d4ba 	srli	r3,r17,18
    1cb0:	19c01f04 	addi	r7,r3,124
    1cb4:	39cb883a 	add	r5,r7,r7
    1cb8:	003e8d06 	br	16f0 <__alt_mem_Flash_flash_data+0xf40016f0>
    1cbc:	ad400404 	addi	r21,r21,16
    1cc0:	003f1d06 	br	1938 <__alt_mem_Flash_flash_data+0xf4001938>
    1cc4:	01001504 	movi	r4,84
    1cc8:	20801c36 	bltu	r4,r2,1d3c <_malloc_r+0x75c>
    1ccc:	3804d33a 	srli	r2,r7,12
    1cd0:	11001b84 	addi	r4,r2,110
    1cd4:	210b883a 	add	r5,r4,r4
    1cd8:	003f8006 	br	1adc <__alt_mem_Flash_flash_data+0xf4001adc>
    1cdc:	3083ffcc 	andi	r2,r6,4095
    1ce0:	103f241e 	bne	r2,zero,1974 <__alt_mem_Flash_flash_data+0xf4001974>
    1ce4:	99000217 	ldw	r4,8(r19)
    1ce8:	ad85883a 	add	r2,r21,r22
    1cec:	10800054 	ori	r2,r2,1
    1cf0:	20800115 	stw	r2,4(r4)
    1cf4:	003f4a06 	br	1a20 <__alt_mem_Flash_flash_data+0xf4001a20>
    1cf8:	01403f04 	movi	r5,252
    1cfc:	01c01f84 	movi	r7,126
    1d00:	003e7b06 	br	16f0 <__alt_mem_Flash_flash_data+0xf40016f0>
    1d04:	00c00044 	movi	r3,1
    1d08:	002b883a 	mov	r21,zero
    1d0c:	003f3006 	br	19d0 <__alt_mem_Flash_flash_data+0xf40019d0>
    1d10:	00800074 	movhi	r2,1
    1d14:	10893504 	addi	r2,r2,9428
    1d18:	15000015 	stw	r20,0(r2)
    1d1c:	003f1b06 	br	198c <__alt_mem_Flash_flash_data+0xf400198c>
    1d20:	9009883a 	mov	r4,r18
    1d24:	81400204 	addi	r5,r16,8
    1d28:	0002f6c0 	call	2f6c <_free_r>
    1d2c:	00800074 	movhi	r2,1
    1d30:	10914304 	addi	r2,r2,17676
    1d34:	10c00017 	ldw	r3,0(r2)
    1d38:	003f3906 	br	1a20 <__alt_mem_Flash_flash_data+0xf4001a20>
    1d3c:	01005504 	movi	r4,340
    1d40:	20800436 	bltu	r4,r2,1d54 <_malloc_r+0x774>
    1d44:	3804d3fa 	srli	r2,r7,15
    1d48:	11001dc4 	addi	r4,r2,119
    1d4c:	210b883a 	add	r5,r4,r4
    1d50:	003f6206 	br	1adc <__alt_mem_Flash_flash_data+0xf4001adc>
    1d54:	01015504 	movi	r4,1364
    1d58:	20800436 	bltu	r4,r2,1d6c <_malloc_r+0x78c>
    1d5c:	3804d4ba 	srli	r2,r7,18
    1d60:	11001f04 	addi	r4,r2,124
    1d64:	210b883a 	add	r5,r4,r4
    1d68:	003f5c06 	br	1adc <__alt_mem_Flash_flash_data+0xf4001adc>
    1d6c:	01403f04 	movi	r5,252
    1d70:	01001f84 	movi	r4,126
    1d74:	003f5906 	br	1adc <__alt_mem_Flash_flash_data+0xf4001adc>
    1d78:	98800117 	ldw	r2,4(r19)
    1d7c:	003fa906 	br	1c24 <__alt_mem_Flash_flash_data+0xf4001c24>
    1d80:	6007883a 	mov	r3,r12
    1d84:	003ea206 	br	1810 <__alt_mem_Flash_flash_data+0xf4001810>

00001d88 <memchr>:
    1d88:	208000cc 	andi	r2,r4,3
    1d8c:	280f883a 	mov	r7,r5
    1d90:	10003526 	beq	r2,zero,1e68 <memchr+0xe0>
    1d94:	30bfffc4 	addi	r2,r6,-1
    1d98:	30001b26 	beq	r6,zero,1e08 <memchr+0x80>
    1d9c:	21800003 	ldbu	r6,0(r4)
    1da0:	28c03fcc 	andi	r3,r5,255
    1da4:	30c01a26 	beq	r6,r3,1e10 <memchr+0x88>
    1da8:	180d883a 	mov	r6,r3
    1dac:	00000406 	br	1dc0 <memchr+0x38>
    1db0:	10001526 	beq	r2,zero,1e08 <memchr+0x80>
    1db4:	20c00003 	ldbu	r3,0(r4)
    1db8:	10bfffc4 	addi	r2,r2,-1
    1dbc:	19801426 	beq	r3,r6,1e10 <memchr+0x88>
    1dc0:	21000044 	addi	r4,r4,1
    1dc4:	20c000cc 	andi	r3,r4,3
    1dc8:	183ff91e 	bne	r3,zero,1db0 <__alt_mem_Flash_flash_data+0xf4001db0>
    1dcc:	024000c4 	movi	r9,3
    1dd0:	48801136 	bltu	r9,r2,1e18 <memchr+0x90>
    1dd4:	10000c26 	beq	r2,zero,1e08 <memchr+0x80>
    1dd8:	20c00003 	ldbu	r3,0(r4)
    1ddc:	29403fcc 	andi	r5,r5,255
    1de0:	19400b26 	beq	r3,r5,1e10 <memchr+0x88>
    1de4:	20c00044 	addi	r3,r4,1
    1de8:	2085883a 	add	r2,r4,r2
    1dec:	39803fcc 	andi	r6,r7,255
    1df0:	00000306 	br	1e00 <memchr+0x78>
    1df4:	18c00044 	addi	r3,r3,1
    1df8:	197fffc3 	ldbu	r5,-1(r3)
    1dfc:	29800426 	beq	r5,r6,1e10 <memchr+0x88>
    1e00:	1809883a 	mov	r4,r3
    1e04:	18bffb1e 	bne	r3,r2,1df4 <__alt_mem_Flash_flash_data+0xf4001df4>
    1e08:	0005883a 	mov	r2,zero
    1e0c:	f800283a 	ret
    1e10:	2005883a 	mov	r2,r4
    1e14:	f800283a 	ret
    1e18:	28c03fcc 	andi	r3,r5,255
    1e1c:	1810923a 	slli	r8,r3,8
    1e20:	02ffbff4 	movhi	r11,65279
    1e24:	02a02074 	movhi	r10,32897
    1e28:	40c6b03a 	or	r3,r8,r3
    1e2c:	1810943a 	slli	r8,r3,16
    1e30:	5affbfc4 	addi	r11,r11,-257
    1e34:	52a02004 	addi	r10,r10,-32640
    1e38:	40d0b03a 	or	r8,r8,r3
    1e3c:	20c00017 	ldw	r3,0(r4)
    1e40:	40c6f03a 	xor	r3,r8,r3
    1e44:	1acd883a 	add	r6,r3,r11
    1e48:	00c6303a 	nor	r3,zero,r3
    1e4c:	30c6703a 	and	r3,r6,r3
    1e50:	1a86703a 	and	r3,r3,r10
    1e54:	183fdf1e 	bne	r3,zero,1dd4 <__alt_mem_Flash_flash_data+0xf4001dd4>
    1e58:	10bfff04 	addi	r2,r2,-4
    1e5c:	21000104 	addi	r4,r4,4
    1e60:	48bff636 	bltu	r9,r2,1e3c <__alt_mem_Flash_flash_data+0xf4001e3c>
    1e64:	003fdb06 	br	1dd4 <__alt_mem_Flash_flash_data+0xf4001dd4>
    1e68:	3005883a 	mov	r2,r6
    1e6c:	003fd706 	br	1dcc <__alt_mem_Flash_flash_data+0xf4001dcc>

00001e70 <memcpy>:
    1e70:	deffff04 	addi	sp,sp,-4
    1e74:	dc000015 	stw	r16,0(sp)
    1e78:	00c003c4 	movi	r3,15
    1e7c:	2005883a 	mov	r2,r4
    1e80:	1980432e 	bgeu	r3,r6,1f90 <memcpy+0x120>
    1e84:	2146b03a 	or	r3,r4,r5
    1e88:	18c000cc 	andi	r3,r3,3
    1e8c:	1800421e 	bne	r3,zero,1f98 <memcpy+0x128>
    1e90:	343ffc04 	addi	r16,r6,-16
    1e94:	8020d13a 	srli	r16,r16,4
    1e98:	28c00104 	addi	r3,r5,4
    1e9c:	23400104 	addi	r13,r4,4
    1ea0:	801e913a 	slli	r15,r16,4
    1ea4:	2b000204 	addi	r12,r5,8
    1ea8:	22c00204 	addi	r11,r4,8
    1eac:	7bc00504 	addi	r15,r15,20
    1eb0:	2a800304 	addi	r10,r5,12
    1eb4:	22400304 	addi	r9,r4,12
    1eb8:	2bdf883a 	add	r15,r5,r15
    1ebc:	2811883a 	mov	r8,r5
    1ec0:	200f883a 	mov	r7,r4
    1ec4:	41000017 	ldw	r4,0(r8)
    1ec8:	39c00404 	addi	r7,r7,16
    1ecc:	18c00404 	addi	r3,r3,16
    1ed0:	393ffc15 	stw	r4,-16(r7)
    1ed4:	1bbffc17 	ldw	r14,-16(r3)
    1ed8:	6b400404 	addi	r13,r13,16
    1edc:	5ac00404 	addi	r11,r11,16
    1ee0:	6bbffc15 	stw	r14,-16(r13)
    1ee4:	63800017 	ldw	r14,0(r12)
    1ee8:	4a400404 	addi	r9,r9,16
    1eec:	42000404 	addi	r8,r8,16
    1ef0:	5bbffc15 	stw	r14,-16(r11)
    1ef4:	53800017 	ldw	r14,0(r10)
    1ef8:	63000404 	addi	r12,r12,16
    1efc:	52800404 	addi	r10,r10,16
    1f00:	4bbffc15 	stw	r14,-16(r9)
    1f04:	1bffef1e 	bne	r3,r15,1ec4 <__alt_mem_Flash_flash_data+0xf4001ec4>
    1f08:	81c00044 	addi	r7,r16,1
    1f0c:	380e913a 	slli	r7,r7,4
    1f10:	310003cc 	andi	r4,r6,15
    1f14:	02c000c4 	movi	r11,3
    1f18:	11c7883a 	add	r3,r2,r7
    1f1c:	29cb883a 	add	r5,r5,r7
    1f20:	59001f2e 	bgeu	r11,r4,1fa0 <memcpy+0x130>
    1f24:	1813883a 	mov	r9,r3
    1f28:	2811883a 	mov	r8,r5
    1f2c:	200f883a 	mov	r7,r4
    1f30:	42800017 	ldw	r10,0(r8)
    1f34:	4a400104 	addi	r9,r9,4
    1f38:	39ffff04 	addi	r7,r7,-4
    1f3c:	4abfff15 	stw	r10,-4(r9)
    1f40:	42000104 	addi	r8,r8,4
    1f44:	59fffa36 	bltu	r11,r7,1f30 <__alt_mem_Flash_flash_data+0xf4001f30>
    1f48:	213fff04 	addi	r4,r4,-4
    1f4c:	2008d0ba 	srli	r4,r4,2
    1f50:	318000cc 	andi	r6,r6,3
    1f54:	21000044 	addi	r4,r4,1
    1f58:	2109883a 	add	r4,r4,r4
    1f5c:	2109883a 	add	r4,r4,r4
    1f60:	1907883a 	add	r3,r3,r4
    1f64:	290b883a 	add	r5,r5,r4
    1f68:	30000626 	beq	r6,zero,1f84 <memcpy+0x114>
    1f6c:	198d883a 	add	r6,r3,r6
    1f70:	29c00003 	ldbu	r7,0(r5)
    1f74:	18c00044 	addi	r3,r3,1
    1f78:	29400044 	addi	r5,r5,1
    1f7c:	19ffffc5 	stb	r7,-1(r3)
    1f80:	19bffb1e 	bne	r3,r6,1f70 <__alt_mem_Flash_flash_data+0xf4001f70>
    1f84:	dc000017 	ldw	r16,0(sp)
    1f88:	dec00104 	addi	sp,sp,4
    1f8c:	f800283a 	ret
    1f90:	2007883a 	mov	r3,r4
    1f94:	003ff406 	br	1f68 <__alt_mem_Flash_flash_data+0xf4001f68>
    1f98:	2007883a 	mov	r3,r4
    1f9c:	003ff306 	br	1f6c <__alt_mem_Flash_flash_data+0xf4001f6c>
    1fa0:	200d883a 	mov	r6,r4
    1fa4:	003ff006 	br	1f68 <__alt_mem_Flash_flash_data+0xf4001f68>

00001fa8 <memmove>:
    1fa8:	2005883a 	mov	r2,r4
    1fac:	29000b2e 	bgeu	r5,r4,1fdc <memmove+0x34>
    1fb0:	298f883a 	add	r7,r5,r6
    1fb4:	21c0092e 	bgeu	r4,r7,1fdc <memmove+0x34>
    1fb8:	2187883a 	add	r3,r4,r6
    1fbc:	198bc83a 	sub	r5,r3,r6
    1fc0:	30004b26 	beq	r6,zero,20f0 <memmove+0x148>
    1fc4:	39ffffc4 	addi	r7,r7,-1
    1fc8:	39000003 	ldbu	r4,0(r7)
    1fcc:	18ffffc4 	addi	r3,r3,-1
    1fd0:	19000005 	stb	r4,0(r3)
    1fd4:	197ffb1e 	bne	r3,r5,1fc4 <__alt_mem_Flash_flash_data+0xf4001fc4>
    1fd8:	f800283a 	ret
    1fdc:	00c003c4 	movi	r3,15
    1fe0:	1980412e 	bgeu	r3,r6,20e8 <memmove+0x140>
    1fe4:	1146b03a 	or	r3,r2,r5
    1fe8:	18c000cc 	andi	r3,r3,3
    1fec:	1800411e 	bne	r3,zero,20f4 <memmove+0x14c>
    1ff0:	33fffc04 	addi	r15,r6,-16
    1ff4:	781ed13a 	srli	r15,r15,4
    1ff8:	28c00104 	addi	r3,r5,4
    1ffc:	13400104 	addi	r13,r2,4
    2000:	781c913a 	slli	r14,r15,4
    2004:	2b000204 	addi	r12,r5,8
    2008:	12c00204 	addi	r11,r2,8
    200c:	73800504 	addi	r14,r14,20
    2010:	2a800304 	addi	r10,r5,12
    2014:	12400304 	addi	r9,r2,12
    2018:	2b9d883a 	add	r14,r5,r14
    201c:	2811883a 	mov	r8,r5
    2020:	100f883a 	mov	r7,r2
    2024:	41000017 	ldw	r4,0(r8)
    2028:	39c00404 	addi	r7,r7,16
    202c:	18c00404 	addi	r3,r3,16
    2030:	393ffc15 	stw	r4,-16(r7)
    2034:	193ffc17 	ldw	r4,-16(r3)
    2038:	6b400404 	addi	r13,r13,16
    203c:	5ac00404 	addi	r11,r11,16
    2040:	693ffc15 	stw	r4,-16(r13)
    2044:	61000017 	ldw	r4,0(r12)
    2048:	4a400404 	addi	r9,r9,16
    204c:	42000404 	addi	r8,r8,16
    2050:	593ffc15 	stw	r4,-16(r11)
    2054:	51000017 	ldw	r4,0(r10)
    2058:	63000404 	addi	r12,r12,16
    205c:	52800404 	addi	r10,r10,16
    2060:	493ffc15 	stw	r4,-16(r9)
    2064:	1bbfef1e 	bne	r3,r14,2024 <__alt_mem_Flash_flash_data+0xf4002024>
    2068:	79000044 	addi	r4,r15,1
    206c:	2008913a 	slli	r4,r4,4
    2070:	328003cc 	andi	r10,r6,15
    2074:	02c000c4 	movi	r11,3
    2078:	1107883a 	add	r3,r2,r4
    207c:	290b883a 	add	r5,r5,r4
    2080:	5a801e2e 	bgeu	r11,r10,20fc <memmove+0x154>
    2084:	1813883a 	mov	r9,r3
    2088:	2811883a 	mov	r8,r5
    208c:	500f883a 	mov	r7,r10
    2090:	41000017 	ldw	r4,0(r8)
    2094:	4a400104 	addi	r9,r9,4
    2098:	39ffff04 	addi	r7,r7,-4
    209c:	493fff15 	stw	r4,-4(r9)
    20a0:	42000104 	addi	r8,r8,4
    20a4:	59fffa36 	bltu	r11,r7,2090 <__alt_mem_Flash_flash_data+0xf4002090>
    20a8:	513fff04 	addi	r4,r10,-4
    20ac:	2008d0ba 	srli	r4,r4,2
    20b0:	318000cc 	andi	r6,r6,3
    20b4:	21000044 	addi	r4,r4,1
    20b8:	2109883a 	add	r4,r4,r4
    20bc:	2109883a 	add	r4,r4,r4
    20c0:	1907883a 	add	r3,r3,r4
    20c4:	290b883a 	add	r5,r5,r4
    20c8:	30000926 	beq	r6,zero,20f0 <memmove+0x148>
    20cc:	198d883a 	add	r6,r3,r6
    20d0:	29c00003 	ldbu	r7,0(r5)
    20d4:	18c00044 	addi	r3,r3,1
    20d8:	29400044 	addi	r5,r5,1
    20dc:	19ffffc5 	stb	r7,-1(r3)
    20e0:	19bffb1e 	bne	r3,r6,20d0 <__alt_mem_Flash_flash_data+0xf40020d0>
    20e4:	f800283a 	ret
    20e8:	1007883a 	mov	r3,r2
    20ec:	003ff606 	br	20c8 <__alt_mem_Flash_flash_data+0xf40020c8>
    20f0:	f800283a 	ret
    20f4:	1007883a 	mov	r3,r2
    20f8:	003ff406 	br	20cc <__alt_mem_Flash_flash_data+0xf40020cc>
    20fc:	500d883a 	mov	r6,r10
    2100:	003ff106 	br	20c8 <__alt_mem_Flash_flash_data+0xf40020c8>

00002104 <_realloc_r>:
    2104:	defff604 	addi	sp,sp,-40
    2108:	dd000415 	stw	r20,16(sp)
    210c:	dc400115 	stw	r17,4(sp)
    2110:	dfc00915 	stw	ra,36(sp)
    2114:	df000815 	stw	fp,32(sp)
    2118:	ddc00715 	stw	r23,28(sp)
    211c:	dd800615 	stw	r22,24(sp)
    2120:	dd400515 	stw	r21,20(sp)
    2124:	dcc00315 	stw	r19,12(sp)
    2128:	dc800215 	stw	r18,8(sp)
    212c:	dc000015 	stw	r16,0(sp)
    2130:	2829883a 	mov	r20,r5
    2134:	3023883a 	mov	r17,r6
    2138:	2800ad26 	beq	r5,zero,23f0 <_realloc_r+0x2ec>
    213c:	2025883a 	mov	r18,r4
    2140:	000471c0 	call	471c <__malloc_lock>
    2144:	a0ffff17 	ldw	r3,-4(r20)
    2148:	043fff04 	movi	r16,-4
    214c:	890002c4 	addi	r4,r17,11
    2150:	01c00584 	movi	r7,22
    2154:	a57ffe04 	addi	r21,r20,-8
    2158:	1c20703a 	and	r16,r3,r16
    215c:	39001d2e 	bgeu	r7,r4,21d4 <_realloc_r+0xd0>
    2160:	05bffe04 	movi	r22,-8
    2164:	25ac703a 	and	r22,r4,r22
    2168:	b00f883a 	mov	r7,r22
    216c:	b0006516 	blt	r22,zero,2304 <_realloc_r+0x200>
    2170:	b4406436 	bltu	r22,r17,2304 <_realloc_r+0x200>
    2174:	81c01a0e 	bge	r16,r7,21e0 <_realloc_r+0xdc>
    2178:	07000074 	movhi	fp,1
    217c:	e702c004 	addi	fp,fp,2816
    2180:	e1400217 	ldw	r5,8(fp)
    2184:	ac11883a 	add	r8,r21,r16
    2188:	2a006226 	beq	r5,r8,2314 <_realloc_r+0x210>
    218c:	41800117 	ldw	r6,4(r8)
    2190:	027fff84 	movi	r9,-2
    2194:	3252703a 	and	r9,r6,r9
    2198:	4253883a 	add	r9,r8,r9
    219c:	49000117 	ldw	r4,4(r9)
    21a0:	2100004c 	andi	r4,r4,1
    21a4:	2000281e 	bne	r4,zero,2248 <_realloc_r+0x144>
    21a8:	00bfff04 	movi	r2,-4
    21ac:	3084703a 	and	r2,r6,r2
    21b0:	1409883a 	add	r4,r2,r16
    21b4:	21c05e16 	blt	r4,r7,2330 <_realloc_r+0x22c>
    21b8:	40800317 	ldw	r2,12(r8)
    21bc:	41400217 	ldw	r5,8(r8)
    21c0:	a023883a 	mov	r17,r20
    21c4:	2021883a 	mov	r16,r4
    21c8:	28800315 	stw	r2,12(r5)
    21cc:	11400215 	stw	r5,8(r2)
    21d0:	00000406 	br	21e4 <_realloc_r+0xe0>
    21d4:	01c00404 	movi	r7,16
    21d8:	382d883a 	mov	r22,r7
    21dc:	003fe406 	br	2170 <__alt_mem_Flash_flash_data+0xf4002170>
    21e0:	a023883a 	mov	r17,r20
    21e4:	858fc83a 	sub	r7,r16,r22
    21e8:	008003c4 	movi	r2,15
    21ec:	18c0004c 	andi	r3,r3,1
    21f0:	11c07236 	bltu	r2,r7,23bc <_realloc_r+0x2b8>
    21f4:	1c06b03a 	or	r3,r3,r16
    21f8:	a8c00115 	stw	r3,4(r21)
    21fc:	ac21883a 	add	r16,r21,r16
    2200:	80800117 	ldw	r2,4(r16)
    2204:	10800054 	ori	r2,r2,1
    2208:	80800115 	stw	r2,4(r16)
    220c:	9009883a 	mov	r4,r18
    2210:	000483c0 	call	483c <__malloc_unlock>
    2214:	8805883a 	mov	r2,r17
    2218:	dfc00917 	ldw	ra,36(sp)
    221c:	df000817 	ldw	fp,32(sp)
    2220:	ddc00717 	ldw	r23,28(sp)
    2224:	dd800617 	ldw	r22,24(sp)
    2228:	dd400517 	ldw	r21,20(sp)
    222c:	dd000417 	ldw	r20,16(sp)
    2230:	dcc00317 	ldw	r19,12(sp)
    2234:	dc800217 	ldw	r18,8(sp)
    2238:	dc400117 	ldw	r17,4(sp)
    223c:	dc000017 	ldw	r16,0(sp)
    2240:	dec00a04 	addi	sp,sp,40
    2244:	f800283a 	ret
    2248:	18c0004c 	andi	r3,r3,1
    224c:	1800081e 	bne	r3,zero,2270 <_realloc_r+0x16c>
    2250:	a4fffe17 	ldw	r19,-8(r20)
    2254:	00bfff04 	movi	r2,-4
    2258:	ace7c83a 	sub	r19,r21,r19
    225c:	98c00117 	ldw	r3,4(r19)
    2260:	1886703a 	and	r3,r3,r2
    2264:	98000226 	beq	r19,zero,2270 <_realloc_r+0x16c>
    2268:	1c2f883a 	add	r23,r3,r16
    226c:	b9c06d0e 	bge	r23,r7,2424 <_realloc_r+0x320>
    2270:	880b883a 	mov	r5,r17
    2274:	9009883a 	mov	r4,r18
    2278:	00015e00 	call	15e0 <_malloc_r>
    227c:	1023883a 	mov	r17,r2
    2280:	1000ef26 	beq	r2,zero,2640 <_realloc_r+0x53c>
    2284:	a0ffff17 	ldw	r3,-4(r20)
    2288:	113ffe04 	addi	r4,r2,-8
    228c:	00bfff84 	movi	r2,-2
    2290:	1884703a 	and	r2,r3,r2
    2294:	a885883a 	add	r2,r21,r2
    2298:	2080bf26 	beq	r4,r2,2598 <_realloc_r+0x494>
    229c:	81bfff04 	addi	r6,r16,-4
    22a0:	00800904 	movi	r2,36
    22a4:	11808936 	bltu	r2,r6,24cc <_realloc_r+0x3c8>
    22a8:	00c004c4 	movi	r3,19
    22ac:	19806c2e 	bgeu	r3,r6,2460 <_realloc_r+0x35c>
    22b0:	a0c00017 	ldw	r3,0(r20)
    22b4:	88c00015 	stw	r3,0(r17)
    22b8:	a0c00117 	ldw	r3,4(r20)
    22bc:	88c00115 	stw	r3,4(r17)
    22c0:	00c006c4 	movi	r3,27
    22c4:	1980ac36 	bltu	r3,r6,2578 <_realloc_r+0x474>
    22c8:	88800204 	addi	r2,r17,8
    22cc:	a0c00204 	addi	r3,r20,8
    22d0:	19000017 	ldw	r4,0(r3)
    22d4:	11000015 	stw	r4,0(r2)
    22d8:	19000117 	ldw	r4,4(r3)
    22dc:	11000115 	stw	r4,4(r2)
    22e0:	18c00217 	ldw	r3,8(r3)
    22e4:	10c00215 	stw	r3,8(r2)
    22e8:	a00b883a 	mov	r5,r20
    22ec:	9009883a 	mov	r4,r18
    22f0:	0002f6c0 	call	2f6c <_free_r>
    22f4:	9009883a 	mov	r4,r18
    22f8:	000483c0 	call	483c <__malloc_unlock>
    22fc:	8805883a 	mov	r2,r17
    2300:	003fc506 	br	2218 <__alt_mem_Flash_flash_data+0xf4002218>
    2304:	00800304 	movi	r2,12
    2308:	90800015 	stw	r2,0(r18)
    230c:	0005883a 	mov	r2,zero
    2310:	003fc106 	br	2218 <__alt_mem_Flash_flash_data+0xf4002218>
    2314:	29800117 	ldw	r6,4(r5)
    2318:	00bfff04 	movi	r2,-4
    231c:	b1000404 	addi	r4,r22,16
    2320:	3084703a 	and	r2,r6,r2
    2324:	140d883a 	add	r6,r2,r16
    2328:	31005b0e 	bge	r6,r4,2498 <_realloc_r+0x394>
    232c:	2811883a 	mov	r8,r5
    2330:	18c0004c 	andi	r3,r3,1
    2334:	183fce1e 	bne	r3,zero,2270 <__alt_mem_Flash_flash_data+0xf4002270>
    2338:	a4fffe17 	ldw	r19,-8(r20)
    233c:	00ffff04 	movi	r3,-4
    2340:	ace7c83a 	sub	r19,r21,r19
    2344:	99000117 	ldw	r4,4(r19)
    2348:	20c6703a 	and	r3,r4,r3
    234c:	403fc526 	beq	r8,zero,2264 <__alt_mem_Flash_flash_data+0xf4002264>
    2350:	1c2f883a 	add	r23,r3,r16
    2354:	b8af883a 	add	r23,r23,r2
    2358:	41406026 	beq	r8,r5,24dc <_realloc_r+0x3d8>
    235c:	b9ffc116 	blt	r23,r7,2264 <__alt_mem_Flash_flash_data+0xf4002264>
    2360:	40c00217 	ldw	r3,8(r8)
    2364:	40800317 	ldw	r2,12(r8)
    2368:	81bfff04 	addi	r6,r16,-4
    236c:	01000904 	movi	r4,36
    2370:	18800315 	stw	r2,12(r3)
    2374:	10c00215 	stw	r3,8(r2)
    2378:	99400217 	ldw	r5,8(r19)
    237c:	98c00317 	ldw	r3,12(r19)
    2380:	9c400204 	addi	r17,r19,8
    2384:	28c00315 	stw	r3,12(r5)
    2388:	19400215 	stw	r5,8(r3)
    238c:	21802d36 	bltu	r4,r6,2444 <_realloc_r+0x340>
    2390:	008004c4 	movi	r2,19
    2394:	1180352e 	bgeu	r2,r6,246c <_realloc_r+0x368>
    2398:	a0800017 	ldw	r2,0(r20)
    239c:	98800215 	stw	r2,8(r19)
    23a0:	a0800117 	ldw	r2,4(r20)
    23a4:	98800315 	stw	r2,12(r19)
    23a8:	008006c4 	movi	r2,27
    23ac:	11808036 	bltu	r2,r6,25b0 <_realloc_r+0x4ac>
    23b0:	98c00404 	addi	r3,r19,16
    23b4:	a5000204 	addi	r20,r20,8
    23b8:	00002d06 	br	2470 <_realloc_r+0x36c>
    23bc:	1d86b03a 	or	r3,r3,r22
    23c0:	ad8b883a 	add	r5,r21,r22
    23c4:	a8c00115 	stw	r3,4(r21)
    23c8:	38800054 	ori	r2,r7,1
    23cc:	28800115 	stw	r2,4(r5)
    23d0:	29cf883a 	add	r7,r5,r7
    23d4:	38800117 	ldw	r2,4(r7)
    23d8:	9009883a 	mov	r4,r18
    23dc:	29400204 	addi	r5,r5,8
    23e0:	10800054 	ori	r2,r2,1
    23e4:	38800115 	stw	r2,4(r7)
    23e8:	0002f6c0 	call	2f6c <_free_r>
    23ec:	003f8706 	br	220c <__alt_mem_Flash_flash_data+0xf400220c>
    23f0:	300b883a 	mov	r5,r6
    23f4:	dfc00917 	ldw	ra,36(sp)
    23f8:	df000817 	ldw	fp,32(sp)
    23fc:	ddc00717 	ldw	r23,28(sp)
    2400:	dd800617 	ldw	r22,24(sp)
    2404:	dd400517 	ldw	r21,20(sp)
    2408:	dd000417 	ldw	r20,16(sp)
    240c:	dcc00317 	ldw	r19,12(sp)
    2410:	dc800217 	ldw	r18,8(sp)
    2414:	dc400117 	ldw	r17,4(sp)
    2418:	dc000017 	ldw	r16,0(sp)
    241c:	dec00a04 	addi	sp,sp,40
    2420:	00015e01 	jmpi	15e0 <_malloc_r>
    2424:	98800317 	ldw	r2,12(r19)
    2428:	98c00217 	ldw	r3,8(r19)
    242c:	81bfff04 	addi	r6,r16,-4
    2430:	01000904 	movi	r4,36
    2434:	18800315 	stw	r2,12(r3)
    2438:	10c00215 	stw	r3,8(r2)
    243c:	9c400204 	addi	r17,r19,8
    2440:	21bfd32e 	bgeu	r4,r6,2390 <__alt_mem_Flash_flash_data+0xf4002390>
    2444:	8809883a 	mov	r4,r17
    2448:	a00b883a 	mov	r5,r20
    244c:	0001fa80 	call	1fa8 <memmove>
    2450:	98c00117 	ldw	r3,4(r19)
    2454:	b821883a 	mov	r16,r23
    2458:	982b883a 	mov	r21,r19
    245c:	003f6106 	br	21e4 <__alt_mem_Flash_flash_data+0xf40021e4>
    2460:	8805883a 	mov	r2,r17
    2464:	a007883a 	mov	r3,r20
    2468:	003f9906 	br	22d0 <__alt_mem_Flash_flash_data+0xf40022d0>
    246c:	8807883a 	mov	r3,r17
    2470:	a0800017 	ldw	r2,0(r20)
    2474:	b821883a 	mov	r16,r23
    2478:	982b883a 	mov	r21,r19
    247c:	18800015 	stw	r2,0(r3)
    2480:	a0800117 	ldw	r2,4(r20)
    2484:	18800115 	stw	r2,4(r3)
    2488:	a0800217 	ldw	r2,8(r20)
    248c:	18800215 	stw	r2,8(r3)
    2490:	98c00117 	ldw	r3,4(r19)
    2494:	003f5306 	br	21e4 <__alt_mem_Flash_flash_data+0xf40021e4>
    2498:	adab883a 	add	r21,r21,r22
    249c:	3585c83a 	sub	r2,r6,r22
    24a0:	e5400215 	stw	r21,8(fp)
    24a4:	10800054 	ori	r2,r2,1
    24a8:	a8800115 	stw	r2,4(r21)
    24ac:	a0bfff17 	ldw	r2,-4(r20)
    24b0:	9009883a 	mov	r4,r18
    24b4:	1080004c 	andi	r2,r2,1
    24b8:	b0acb03a 	or	r22,r22,r2
    24bc:	a5bfff15 	stw	r22,-4(r20)
    24c0:	000483c0 	call	483c <__malloc_unlock>
    24c4:	a005883a 	mov	r2,r20
    24c8:	003f5306 	br	2218 <__alt_mem_Flash_flash_data+0xf4002218>
    24cc:	8809883a 	mov	r4,r17
    24d0:	a00b883a 	mov	r5,r20
    24d4:	0001fa80 	call	1fa8 <memmove>
    24d8:	003f8306 	br	22e8 <__alt_mem_Flash_flash_data+0xf40022e8>
    24dc:	b0800404 	addi	r2,r22,16
    24e0:	b8bf6016 	blt	r23,r2,2264 <__alt_mem_Flash_flash_data+0xf4002264>
    24e4:	98800317 	ldw	r2,12(r19)
    24e8:	98c00217 	ldw	r3,8(r19)
    24ec:	81bfff04 	addi	r6,r16,-4
    24f0:	01000904 	movi	r4,36
    24f4:	18800315 	stw	r2,12(r3)
    24f8:	10c00215 	stw	r3,8(r2)
    24fc:	9c400204 	addi	r17,r19,8
    2500:	21804336 	bltu	r4,r6,2610 <_realloc_r+0x50c>
    2504:	008004c4 	movi	r2,19
    2508:	11803f2e 	bgeu	r2,r6,2608 <_realloc_r+0x504>
    250c:	a0800017 	ldw	r2,0(r20)
    2510:	98800215 	stw	r2,8(r19)
    2514:	a0800117 	ldw	r2,4(r20)
    2518:	98800315 	stw	r2,12(r19)
    251c:	008006c4 	movi	r2,27
    2520:	11803f36 	bltu	r2,r6,2620 <_realloc_r+0x51c>
    2524:	98800404 	addi	r2,r19,16
    2528:	a5000204 	addi	r20,r20,8
    252c:	a0c00017 	ldw	r3,0(r20)
    2530:	10c00015 	stw	r3,0(r2)
    2534:	a0c00117 	ldw	r3,4(r20)
    2538:	10c00115 	stw	r3,4(r2)
    253c:	a0c00217 	ldw	r3,8(r20)
    2540:	10c00215 	stw	r3,8(r2)
    2544:	9d87883a 	add	r3,r19,r22
    2548:	bd85c83a 	sub	r2,r23,r22
    254c:	e0c00215 	stw	r3,8(fp)
    2550:	10800054 	ori	r2,r2,1
    2554:	18800115 	stw	r2,4(r3)
    2558:	98800117 	ldw	r2,4(r19)
    255c:	9009883a 	mov	r4,r18
    2560:	1080004c 	andi	r2,r2,1
    2564:	b0acb03a 	or	r22,r22,r2
    2568:	9d800115 	stw	r22,4(r19)
    256c:	000483c0 	call	483c <__malloc_unlock>
    2570:	8805883a 	mov	r2,r17
    2574:	003f2806 	br	2218 <__alt_mem_Flash_flash_data+0xf4002218>
    2578:	a0c00217 	ldw	r3,8(r20)
    257c:	88c00215 	stw	r3,8(r17)
    2580:	a0c00317 	ldw	r3,12(r20)
    2584:	88c00315 	stw	r3,12(r17)
    2588:	30801126 	beq	r6,r2,25d0 <_realloc_r+0x4cc>
    258c:	88800404 	addi	r2,r17,16
    2590:	a0c00404 	addi	r3,r20,16
    2594:	003f4e06 	br	22d0 <__alt_mem_Flash_flash_data+0xf40022d0>
    2598:	893fff17 	ldw	r4,-4(r17)
    259c:	00bfff04 	movi	r2,-4
    25a0:	a023883a 	mov	r17,r20
    25a4:	2084703a 	and	r2,r4,r2
    25a8:	80a1883a 	add	r16,r16,r2
    25ac:	003f0d06 	br	21e4 <__alt_mem_Flash_flash_data+0xf40021e4>
    25b0:	a0800217 	ldw	r2,8(r20)
    25b4:	98800415 	stw	r2,16(r19)
    25b8:	a0800317 	ldw	r2,12(r20)
    25bc:	98800515 	stw	r2,20(r19)
    25c0:	31000a26 	beq	r6,r4,25ec <_realloc_r+0x4e8>
    25c4:	98c00604 	addi	r3,r19,24
    25c8:	a5000404 	addi	r20,r20,16
    25cc:	003fa806 	br	2470 <__alt_mem_Flash_flash_data+0xf4002470>
    25d0:	a1000417 	ldw	r4,16(r20)
    25d4:	88800604 	addi	r2,r17,24
    25d8:	a0c00604 	addi	r3,r20,24
    25dc:	89000415 	stw	r4,16(r17)
    25e0:	a1000517 	ldw	r4,20(r20)
    25e4:	89000515 	stw	r4,20(r17)
    25e8:	003f3906 	br	22d0 <__alt_mem_Flash_flash_data+0xf40022d0>
    25ec:	a0800417 	ldw	r2,16(r20)
    25f0:	a5000604 	addi	r20,r20,24
    25f4:	98c00804 	addi	r3,r19,32
    25f8:	98800615 	stw	r2,24(r19)
    25fc:	a0bfff17 	ldw	r2,-4(r20)
    2600:	98800715 	stw	r2,28(r19)
    2604:	003f9a06 	br	2470 <__alt_mem_Flash_flash_data+0xf4002470>
    2608:	8805883a 	mov	r2,r17
    260c:	003fc706 	br	252c <__alt_mem_Flash_flash_data+0xf400252c>
    2610:	8809883a 	mov	r4,r17
    2614:	a00b883a 	mov	r5,r20
    2618:	0001fa80 	call	1fa8 <memmove>
    261c:	003fc906 	br	2544 <__alt_mem_Flash_flash_data+0xf4002544>
    2620:	a0800217 	ldw	r2,8(r20)
    2624:	98800415 	stw	r2,16(r19)
    2628:	a0800317 	ldw	r2,12(r20)
    262c:	98800515 	stw	r2,20(r19)
    2630:	31000726 	beq	r6,r4,2650 <_realloc_r+0x54c>
    2634:	98800604 	addi	r2,r19,24
    2638:	a5000404 	addi	r20,r20,16
    263c:	003fbb06 	br	252c <__alt_mem_Flash_flash_data+0xf400252c>
    2640:	9009883a 	mov	r4,r18
    2644:	000483c0 	call	483c <__malloc_unlock>
    2648:	0005883a 	mov	r2,zero
    264c:	003ef206 	br	2218 <__alt_mem_Flash_flash_data+0xf4002218>
    2650:	a0c00417 	ldw	r3,16(r20)
    2654:	a5000604 	addi	r20,r20,24
    2658:	98800804 	addi	r2,r19,32
    265c:	98c00615 	stw	r3,24(r19)
    2660:	a0ffff17 	ldw	r3,-4(r20)
    2664:	98c00715 	stw	r3,28(r19)
    2668:	003fb006 	br	252c <__alt_mem_Flash_flash_data+0xf400252c>

0000266c <_sbrk_r>:
    266c:	defffd04 	addi	sp,sp,-12
    2670:	dc000015 	stw	r16,0(sp)
    2674:	04000074 	movhi	r16,1
    2678:	dc400115 	stw	r17,4(sp)
    267c:	84112204 	addi	r16,r16,17544
    2680:	2023883a 	mov	r17,r4
    2684:	2809883a 	mov	r4,r5
    2688:	dfc00215 	stw	ra,8(sp)
    268c:	80000015 	stw	zero,0(r16)
    2690:	00044080 	call	4408 <sbrk>
    2694:	00ffffc4 	movi	r3,-1
    2698:	10c00526 	beq	r2,r3,26b0 <_sbrk_r+0x44>
    269c:	dfc00217 	ldw	ra,8(sp)
    26a0:	dc400117 	ldw	r17,4(sp)
    26a4:	dc000017 	ldw	r16,0(sp)
    26a8:	dec00304 	addi	sp,sp,12
    26ac:	f800283a 	ret
    26b0:	80c00017 	ldw	r3,0(r16)
    26b4:	183ff926 	beq	r3,zero,269c <__alt_mem_Flash_flash_data+0xf400269c>
    26b8:	88c00015 	stw	r3,0(r17)
    26bc:	003ff706 	br	269c <__alt_mem_Flash_flash_data+0xf400269c>

000026c0 <__swsetup_r>:
    26c0:	00800074 	movhi	r2,1
    26c4:	defffd04 	addi	sp,sp,-12
    26c8:	10893404 	addi	r2,r2,9424
    26cc:	dc400115 	stw	r17,4(sp)
    26d0:	2023883a 	mov	r17,r4
    26d4:	11000017 	ldw	r4,0(r2)
    26d8:	dc000015 	stw	r16,0(sp)
    26dc:	dfc00215 	stw	ra,8(sp)
    26e0:	2821883a 	mov	r16,r5
    26e4:	20000226 	beq	r4,zero,26f0 <__swsetup_r+0x30>
    26e8:	20c00e17 	ldw	r3,56(r4)
    26ec:	18003126 	beq	r3,zero,27b4 <__swsetup_r+0xf4>
    26f0:	8080030b 	ldhu	r2,12(r16)
    26f4:	10c0020c 	andi	r3,r2,8
    26f8:	100d883a 	mov	r6,r2
    26fc:	18000f26 	beq	r3,zero,273c <__swsetup_r+0x7c>
    2700:	80c00417 	ldw	r3,16(r16)
    2704:	18001526 	beq	r3,zero,275c <__swsetup_r+0x9c>
    2708:	1100004c 	andi	r4,r2,1
    270c:	20001c1e 	bne	r4,zero,2780 <__swsetup_r+0xc0>
    2710:	1080008c 	andi	r2,r2,2
    2714:	1000291e 	bne	r2,zero,27bc <__swsetup_r+0xfc>
    2718:	80800517 	ldw	r2,20(r16)
    271c:	80800215 	stw	r2,8(r16)
    2720:	18001c26 	beq	r3,zero,2794 <__swsetup_r+0xd4>
    2724:	0005883a 	mov	r2,zero
    2728:	dfc00217 	ldw	ra,8(sp)
    272c:	dc400117 	ldw	r17,4(sp)
    2730:	dc000017 	ldw	r16,0(sp)
    2734:	dec00304 	addi	sp,sp,12
    2738:	f800283a 	ret
    273c:	3080040c 	andi	r2,r6,16
    2740:	10002e26 	beq	r2,zero,27fc <__swsetup_r+0x13c>
    2744:	3080010c 	andi	r2,r6,4
    2748:	10001e1e 	bne	r2,zero,27c4 <__swsetup_r+0x104>
    274c:	80c00417 	ldw	r3,16(r16)
    2750:	30800214 	ori	r2,r6,8
    2754:	8080030d 	sth	r2,12(r16)
    2758:	183feb1e 	bne	r3,zero,2708 <__alt_mem_Flash_flash_data+0xf4002708>
    275c:	1140a00c 	andi	r5,r2,640
    2760:	01008004 	movi	r4,512
    2764:	293fe826 	beq	r5,r4,2708 <__alt_mem_Flash_flash_data+0xf4002708>
    2768:	8809883a 	mov	r4,r17
    276c:	800b883a 	mov	r5,r16
    2770:	00033e40 	call	33e4 <__smakebuf_r>
    2774:	8080030b 	ldhu	r2,12(r16)
    2778:	80c00417 	ldw	r3,16(r16)
    277c:	003fe206 	br	2708 <__alt_mem_Flash_flash_data+0xf4002708>
    2780:	80800517 	ldw	r2,20(r16)
    2784:	80000215 	stw	zero,8(r16)
    2788:	0085c83a 	sub	r2,zero,r2
    278c:	80800615 	stw	r2,24(r16)
    2790:	183fe41e 	bne	r3,zero,2724 <__alt_mem_Flash_flash_data+0xf4002724>
    2794:	80c0030b 	ldhu	r3,12(r16)
    2798:	0005883a 	mov	r2,zero
    279c:	1900200c 	andi	r4,r3,128
    27a0:	203fe126 	beq	r4,zero,2728 <__alt_mem_Flash_flash_data+0xf4002728>
    27a4:	18c01014 	ori	r3,r3,64
    27a8:	80c0030d 	sth	r3,12(r16)
    27ac:	00bfffc4 	movi	r2,-1
    27b0:	003fdd06 	br	2728 <__alt_mem_Flash_flash_data+0xf4002728>
    27b4:	0002df80 	call	2df8 <__sinit>
    27b8:	003fcd06 	br	26f0 <__alt_mem_Flash_flash_data+0xf40026f0>
    27bc:	0005883a 	mov	r2,zero
    27c0:	003fd606 	br	271c <__alt_mem_Flash_flash_data+0xf400271c>
    27c4:	81400c17 	ldw	r5,48(r16)
    27c8:	28000626 	beq	r5,zero,27e4 <__swsetup_r+0x124>
    27cc:	80801004 	addi	r2,r16,64
    27d0:	28800326 	beq	r5,r2,27e0 <__swsetup_r+0x120>
    27d4:	8809883a 	mov	r4,r17
    27d8:	0002f6c0 	call	2f6c <_free_r>
    27dc:	8180030b 	ldhu	r6,12(r16)
    27e0:	80000c15 	stw	zero,48(r16)
    27e4:	80c00417 	ldw	r3,16(r16)
    27e8:	00bff6c4 	movi	r2,-37
    27ec:	118c703a 	and	r6,r2,r6
    27f0:	80000115 	stw	zero,4(r16)
    27f4:	80c00015 	stw	r3,0(r16)
    27f8:	003fd506 	br	2750 <__alt_mem_Flash_flash_data+0xf4002750>
    27fc:	00800244 	movi	r2,9
    2800:	88800015 	stw	r2,0(r17)
    2804:	30801014 	ori	r2,r6,64
    2808:	8080030d 	sth	r2,12(r16)
    280c:	00bfffc4 	movi	r2,-1
    2810:	003fc506 	br	2728 <__alt_mem_Flash_flash_data+0xf4002728>

00002814 <__sflush_r>:
    2814:	2880030b 	ldhu	r2,12(r5)
    2818:	defffb04 	addi	sp,sp,-20
    281c:	dcc00315 	stw	r19,12(sp)
    2820:	dc400115 	stw	r17,4(sp)
    2824:	dfc00415 	stw	ra,16(sp)
    2828:	dc800215 	stw	r18,8(sp)
    282c:	dc000015 	stw	r16,0(sp)
    2830:	10c0020c 	andi	r3,r2,8
    2834:	2823883a 	mov	r17,r5
    2838:	2027883a 	mov	r19,r4
    283c:	1800311e 	bne	r3,zero,2904 <__sflush_r+0xf0>
    2840:	28c00117 	ldw	r3,4(r5)
    2844:	10820014 	ori	r2,r2,2048
    2848:	2880030d 	sth	r2,12(r5)
    284c:	00c04b0e 	bge	zero,r3,297c <__sflush_r+0x168>
    2850:	8a000a17 	ldw	r8,40(r17)
    2854:	40002326 	beq	r8,zero,28e4 <__sflush_r+0xd0>
    2858:	9c000017 	ldw	r16,0(r19)
    285c:	10c4000c 	andi	r3,r2,4096
    2860:	98000015 	stw	zero,0(r19)
    2864:	18004826 	beq	r3,zero,2988 <__sflush_r+0x174>
    2868:	89801417 	ldw	r6,80(r17)
    286c:	10c0010c 	andi	r3,r2,4
    2870:	18000626 	beq	r3,zero,288c <__sflush_r+0x78>
    2874:	88c00117 	ldw	r3,4(r17)
    2878:	88800c17 	ldw	r2,48(r17)
    287c:	30cdc83a 	sub	r6,r6,r3
    2880:	10000226 	beq	r2,zero,288c <__sflush_r+0x78>
    2884:	88800f17 	ldw	r2,60(r17)
    2888:	308dc83a 	sub	r6,r6,r2
    288c:	89400717 	ldw	r5,28(r17)
    2890:	9809883a 	mov	r4,r19
    2894:	000f883a 	mov	r7,zero
    2898:	403ee83a 	callr	r8
    289c:	00ffffc4 	movi	r3,-1
    28a0:	10c04426 	beq	r2,r3,29b4 <__sflush_r+0x1a0>
    28a4:	88c0030b 	ldhu	r3,12(r17)
    28a8:	89000417 	ldw	r4,16(r17)
    28ac:	88000115 	stw	zero,4(r17)
    28b0:	197dffcc 	andi	r5,r3,63487
    28b4:	8940030d 	sth	r5,12(r17)
    28b8:	89000015 	stw	r4,0(r17)
    28bc:	18c4000c 	andi	r3,r3,4096
    28c0:	18002c1e 	bne	r3,zero,2974 <__sflush_r+0x160>
    28c4:	89400c17 	ldw	r5,48(r17)
    28c8:	9c000015 	stw	r16,0(r19)
    28cc:	28000526 	beq	r5,zero,28e4 <__sflush_r+0xd0>
    28d0:	88801004 	addi	r2,r17,64
    28d4:	28800226 	beq	r5,r2,28e0 <__sflush_r+0xcc>
    28d8:	9809883a 	mov	r4,r19
    28dc:	0002f6c0 	call	2f6c <_free_r>
    28e0:	88000c15 	stw	zero,48(r17)
    28e4:	0005883a 	mov	r2,zero
    28e8:	dfc00417 	ldw	ra,16(sp)
    28ec:	dcc00317 	ldw	r19,12(sp)
    28f0:	dc800217 	ldw	r18,8(sp)
    28f4:	dc400117 	ldw	r17,4(sp)
    28f8:	dc000017 	ldw	r16,0(sp)
    28fc:	dec00504 	addi	sp,sp,20
    2900:	f800283a 	ret
    2904:	2c800417 	ldw	r18,16(r5)
    2908:	903ff626 	beq	r18,zero,28e4 <__alt_mem_Flash_flash_data+0xf40028e4>
    290c:	2c000017 	ldw	r16,0(r5)
    2910:	108000cc 	andi	r2,r2,3
    2914:	2c800015 	stw	r18,0(r5)
    2918:	84a1c83a 	sub	r16,r16,r18
    291c:	1000131e 	bne	r2,zero,296c <__sflush_r+0x158>
    2920:	28800517 	ldw	r2,20(r5)
    2924:	88800215 	stw	r2,8(r17)
    2928:	04000316 	blt	zero,r16,2938 <__sflush_r+0x124>
    292c:	003fed06 	br	28e4 <__alt_mem_Flash_flash_data+0xf40028e4>
    2930:	90a5883a 	add	r18,r18,r2
    2934:	043feb0e 	bge	zero,r16,28e4 <__alt_mem_Flash_flash_data+0xf40028e4>
    2938:	88800917 	ldw	r2,36(r17)
    293c:	89400717 	ldw	r5,28(r17)
    2940:	800f883a 	mov	r7,r16
    2944:	900d883a 	mov	r6,r18
    2948:	9809883a 	mov	r4,r19
    294c:	103ee83a 	callr	r2
    2950:	80a1c83a 	sub	r16,r16,r2
    2954:	00bff616 	blt	zero,r2,2930 <__alt_mem_Flash_flash_data+0xf4002930>
    2958:	88c0030b 	ldhu	r3,12(r17)
    295c:	00bfffc4 	movi	r2,-1
    2960:	18c01014 	ori	r3,r3,64
    2964:	88c0030d 	sth	r3,12(r17)
    2968:	003fdf06 	br	28e8 <__alt_mem_Flash_flash_data+0xf40028e8>
    296c:	0005883a 	mov	r2,zero
    2970:	003fec06 	br	2924 <__alt_mem_Flash_flash_data+0xf4002924>
    2974:	88801415 	stw	r2,80(r17)
    2978:	003fd206 	br	28c4 <__alt_mem_Flash_flash_data+0xf40028c4>
    297c:	28c00f17 	ldw	r3,60(r5)
    2980:	00ffb316 	blt	zero,r3,2850 <__alt_mem_Flash_flash_data+0xf4002850>
    2984:	003fd706 	br	28e4 <__alt_mem_Flash_flash_data+0xf40028e4>
    2988:	89400717 	ldw	r5,28(r17)
    298c:	000d883a 	mov	r6,zero
    2990:	9809883a 	mov	r4,r19
    2994:	01c00044 	movi	r7,1
    2998:	403ee83a 	callr	r8
    299c:	100d883a 	mov	r6,r2
    29a0:	00bfffc4 	movi	r2,-1
    29a4:	30801426 	beq	r6,r2,29f8 <__sflush_r+0x1e4>
    29a8:	8880030b 	ldhu	r2,12(r17)
    29ac:	8a000a17 	ldw	r8,40(r17)
    29b0:	003fae06 	br	286c <__alt_mem_Flash_flash_data+0xf400286c>
    29b4:	98c00017 	ldw	r3,0(r19)
    29b8:	183fba26 	beq	r3,zero,28a4 <__alt_mem_Flash_flash_data+0xf40028a4>
    29bc:	01000744 	movi	r4,29
    29c0:	19000626 	beq	r3,r4,29dc <__sflush_r+0x1c8>
    29c4:	01000584 	movi	r4,22
    29c8:	19000426 	beq	r3,r4,29dc <__sflush_r+0x1c8>
    29cc:	88c0030b 	ldhu	r3,12(r17)
    29d0:	18c01014 	ori	r3,r3,64
    29d4:	88c0030d 	sth	r3,12(r17)
    29d8:	003fc306 	br	28e8 <__alt_mem_Flash_flash_data+0xf40028e8>
    29dc:	8880030b 	ldhu	r2,12(r17)
    29e0:	88c00417 	ldw	r3,16(r17)
    29e4:	88000115 	stw	zero,4(r17)
    29e8:	10bdffcc 	andi	r2,r2,63487
    29ec:	8880030d 	sth	r2,12(r17)
    29f0:	88c00015 	stw	r3,0(r17)
    29f4:	003fb306 	br	28c4 <__alt_mem_Flash_flash_data+0xf40028c4>
    29f8:	98800017 	ldw	r2,0(r19)
    29fc:	103fea26 	beq	r2,zero,29a8 <__alt_mem_Flash_flash_data+0xf40029a8>
    2a00:	00c00744 	movi	r3,29
    2a04:	10c00226 	beq	r2,r3,2a10 <__sflush_r+0x1fc>
    2a08:	00c00584 	movi	r3,22
    2a0c:	10ffd21e 	bne	r2,r3,2958 <__alt_mem_Flash_flash_data+0xf4002958>
    2a10:	9c000015 	stw	r16,0(r19)
    2a14:	0005883a 	mov	r2,zero
    2a18:	003fb306 	br	28e8 <__alt_mem_Flash_flash_data+0xf40028e8>

00002a1c <_fflush_r>:
    2a1c:	defffd04 	addi	sp,sp,-12
    2a20:	dc000115 	stw	r16,4(sp)
    2a24:	dfc00215 	stw	ra,8(sp)
    2a28:	2021883a 	mov	r16,r4
    2a2c:	20000226 	beq	r4,zero,2a38 <_fflush_r+0x1c>
    2a30:	20800e17 	ldw	r2,56(r4)
    2a34:	10000c26 	beq	r2,zero,2a68 <_fflush_r+0x4c>
    2a38:	2880030f 	ldh	r2,12(r5)
    2a3c:	1000051e 	bne	r2,zero,2a54 <_fflush_r+0x38>
    2a40:	0005883a 	mov	r2,zero
    2a44:	dfc00217 	ldw	ra,8(sp)
    2a48:	dc000117 	ldw	r16,4(sp)
    2a4c:	dec00304 	addi	sp,sp,12
    2a50:	f800283a 	ret
    2a54:	8009883a 	mov	r4,r16
    2a58:	dfc00217 	ldw	ra,8(sp)
    2a5c:	dc000117 	ldw	r16,4(sp)
    2a60:	dec00304 	addi	sp,sp,12
    2a64:	00028141 	jmpi	2814 <__sflush_r>
    2a68:	d9400015 	stw	r5,0(sp)
    2a6c:	0002df80 	call	2df8 <__sinit>
    2a70:	d9400017 	ldw	r5,0(sp)
    2a74:	003ff006 	br	2a38 <__alt_mem_Flash_flash_data+0xf4002a38>

00002a78 <fflush>:
    2a78:	20000526 	beq	r4,zero,2a90 <fflush+0x18>
    2a7c:	00800074 	movhi	r2,1
    2a80:	10893404 	addi	r2,r2,9424
    2a84:	200b883a 	mov	r5,r4
    2a88:	11000017 	ldw	r4,0(r2)
    2a8c:	0002a1c1 	jmpi	2a1c <_fflush_r>
    2a90:	00800074 	movhi	r2,1
    2a94:	10893304 	addi	r2,r2,9420
    2a98:	11000017 	ldw	r4,0(r2)
    2a9c:	01400034 	movhi	r5,0
    2aa0:	294a8704 	addi	r5,r5,10780
    2aa4:	00033201 	jmpi	3320 <_fwalk_reent>

00002aa8 <__fp_lock>:
    2aa8:	0005883a 	mov	r2,zero
    2aac:	f800283a 	ret

00002ab0 <__fp_unlock>:
    2ab0:	0005883a 	mov	r2,zero
    2ab4:	f800283a 	ret

00002ab8 <_cleanup_r>:
    2ab8:	01400034 	movhi	r5,0
    2abc:	294e2b04 	addi	r5,r5,14508
    2ac0:	00033201 	jmpi	3320 <_fwalk_reent>

00002ac4 <__sinit.part.1>:
    2ac4:	defff704 	addi	sp,sp,-36
    2ac8:	00c00034 	movhi	r3,0
    2acc:	dfc00815 	stw	ra,32(sp)
    2ad0:	ddc00715 	stw	r23,28(sp)
    2ad4:	dd800615 	stw	r22,24(sp)
    2ad8:	dd400515 	stw	r21,20(sp)
    2adc:	dd000415 	stw	r20,16(sp)
    2ae0:	dcc00315 	stw	r19,12(sp)
    2ae4:	dc800215 	stw	r18,8(sp)
    2ae8:	dc400115 	stw	r17,4(sp)
    2aec:	dc000015 	stw	r16,0(sp)
    2af0:	18caae04 	addi	r3,r3,10936
    2af4:	24000117 	ldw	r16,4(r4)
    2af8:	20c00f15 	stw	r3,60(r4)
    2afc:	2080bb04 	addi	r2,r4,748
    2b00:	00c000c4 	movi	r3,3
    2b04:	20c0b915 	stw	r3,740(r4)
    2b08:	2080ba15 	stw	r2,744(r4)
    2b0c:	2000b815 	stw	zero,736(r4)
    2b10:	05c00204 	movi	r23,8
    2b14:	00800104 	movi	r2,4
    2b18:	2025883a 	mov	r18,r4
    2b1c:	b80d883a 	mov	r6,r23
    2b20:	81001704 	addi	r4,r16,92
    2b24:	000b883a 	mov	r5,zero
    2b28:	80000015 	stw	zero,0(r16)
    2b2c:	80000115 	stw	zero,4(r16)
    2b30:	80000215 	stw	zero,8(r16)
    2b34:	8080030d 	sth	r2,12(r16)
    2b38:	80001915 	stw	zero,100(r16)
    2b3c:	8000038d 	sth	zero,14(r16)
    2b40:	80000415 	stw	zero,16(r16)
    2b44:	80000515 	stw	zero,20(r16)
    2b48:	80000615 	stw	zero,24(r16)
    2b4c:	000359c0 	call	359c <memset>
    2b50:	05800034 	movhi	r22,0
    2b54:	94400217 	ldw	r17,8(r18)
    2b58:	05400034 	movhi	r21,0
    2b5c:	05000034 	movhi	r20,0
    2b60:	04c00034 	movhi	r19,0
    2b64:	b58db004 	addi	r22,r22,14016
    2b68:	ad4dc704 	addi	r21,r21,14108
    2b6c:	a50de604 	addi	r20,r20,14232
    2b70:	9ccdfd04 	addi	r19,r19,14324
    2b74:	85800815 	stw	r22,32(r16)
    2b78:	85400915 	stw	r21,36(r16)
    2b7c:	85000a15 	stw	r20,40(r16)
    2b80:	84c00b15 	stw	r19,44(r16)
    2b84:	84000715 	stw	r16,28(r16)
    2b88:	00800284 	movi	r2,10
    2b8c:	8880030d 	sth	r2,12(r17)
    2b90:	00800044 	movi	r2,1
    2b94:	89001704 	addi	r4,r17,92
    2b98:	b80d883a 	mov	r6,r23
    2b9c:	000b883a 	mov	r5,zero
    2ba0:	88000015 	stw	zero,0(r17)
    2ba4:	88000115 	stw	zero,4(r17)
    2ba8:	88000215 	stw	zero,8(r17)
    2bac:	88001915 	stw	zero,100(r17)
    2bb0:	8880038d 	sth	r2,14(r17)
    2bb4:	88000415 	stw	zero,16(r17)
    2bb8:	88000515 	stw	zero,20(r17)
    2bbc:	88000615 	stw	zero,24(r17)
    2bc0:	000359c0 	call	359c <memset>
    2bc4:	94000317 	ldw	r16,12(r18)
    2bc8:	00800484 	movi	r2,18
    2bcc:	8c400715 	stw	r17,28(r17)
    2bd0:	8d800815 	stw	r22,32(r17)
    2bd4:	8d400915 	stw	r21,36(r17)
    2bd8:	8d000a15 	stw	r20,40(r17)
    2bdc:	8cc00b15 	stw	r19,44(r17)
    2be0:	8080030d 	sth	r2,12(r16)
    2be4:	00800084 	movi	r2,2
    2be8:	80000015 	stw	zero,0(r16)
    2bec:	80000115 	stw	zero,4(r16)
    2bf0:	80000215 	stw	zero,8(r16)
    2bf4:	80001915 	stw	zero,100(r16)
    2bf8:	8080038d 	sth	r2,14(r16)
    2bfc:	80000415 	stw	zero,16(r16)
    2c00:	80000515 	stw	zero,20(r16)
    2c04:	80000615 	stw	zero,24(r16)
    2c08:	81001704 	addi	r4,r16,92
    2c0c:	000b883a 	mov	r5,zero
    2c10:	b80d883a 	mov	r6,r23
    2c14:	000359c0 	call	359c <memset>
    2c18:	00800044 	movi	r2,1
    2c1c:	84000715 	stw	r16,28(r16)
    2c20:	85800815 	stw	r22,32(r16)
    2c24:	85400915 	stw	r21,36(r16)
    2c28:	85000a15 	stw	r20,40(r16)
    2c2c:	84c00b15 	stw	r19,44(r16)
    2c30:	90800e15 	stw	r2,56(r18)
    2c34:	dfc00817 	ldw	ra,32(sp)
    2c38:	ddc00717 	ldw	r23,28(sp)
    2c3c:	dd800617 	ldw	r22,24(sp)
    2c40:	dd400517 	ldw	r21,20(sp)
    2c44:	dd000417 	ldw	r20,16(sp)
    2c48:	dcc00317 	ldw	r19,12(sp)
    2c4c:	dc800217 	ldw	r18,8(sp)
    2c50:	dc400117 	ldw	r17,4(sp)
    2c54:	dc000017 	ldw	r16,0(sp)
    2c58:	dec00904 	addi	sp,sp,36
    2c5c:	f800283a 	ret

00002c60 <__sfmoreglue>:
    2c60:	defffc04 	addi	sp,sp,-16
    2c64:	dc400115 	stw	r17,4(sp)
    2c68:	2c7fffc4 	addi	r17,r5,-1
    2c6c:	8c401a24 	muli	r17,r17,104
    2c70:	dc800215 	stw	r18,8(sp)
    2c74:	2825883a 	mov	r18,r5
    2c78:	89401d04 	addi	r5,r17,116
    2c7c:	dc000015 	stw	r16,0(sp)
    2c80:	dfc00315 	stw	ra,12(sp)
    2c84:	00015e00 	call	15e0 <_malloc_r>
    2c88:	1021883a 	mov	r16,r2
    2c8c:	10000726 	beq	r2,zero,2cac <__sfmoreglue+0x4c>
    2c90:	11000304 	addi	r4,r2,12
    2c94:	10000015 	stw	zero,0(r2)
    2c98:	14800115 	stw	r18,4(r2)
    2c9c:	11000215 	stw	r4,8(r2)
    2ca0:	000b883a 	mov	r5,zero
    2ca4:	89801a04 	addi	r6,r17,104
    2ca8:	000359c0 	call	359c <memset>
    2cac:	8005883a 	mov	r2,r16
    2cb0:	dfc00317 	ldw	ra,12(sp)
    2cb4:	dc800217 	ldw	r18,8(sp)
    2cb8:	dc400117 	ldw	r17,4(sp)
    2cbc:	dc000017 	ldw	r16,0(sp)
    2cc0:	dec00404 	addi	sp,sp,16
    2cc4:	f800283a 	ret

00002cc8 <__sfp>:
    2cc8:	00800074 	movhi	r2,1
    2ccc:	defffb04 	addi	sp,sp,-20
    2cd0:	10893304 	addi	r2,r2,9420
    2cd4:	dc800215 	stw	r18,8(sp)
    2cd8:	14800017 	ldw	r18,0(r2)
    2cdc:	dcc00315 	stw	r19,12(sp)
    2ce0:	dfc00415 	stw	ra,16(sp)
    2ce4:	90800e17 	ldw	r2,56(r18)
    2ce8:	dc400115 	stw	r17,4(sp)
    2cec:	dc000015 	stw	r16,0(sp)
    2cf0:	2027883a 	mov	r19,r4
    2cf4:	1000021e 	bne	r2,zero,2d00 <__sfp+0x38>
    2cf8:	9009883a 	mov	r4,r18
    2cfc:	0002ac40 	call	2ac4 <__sinit.part.1>
    2d00:	9480b804 	addi	r18,r18,736
    2d04:	047fffc4 	movi	r17,-1
    2d08:	91400117 	ldw	r5,4(r18)
    2d0c:	94000217 	ldw	r16,8(r18)
    2d10:	297fffc4 	addi	r5,r5,-1
    2d14:	28000a16 	blt	r5,zero,2d40 <__sfp+0x78>
    2d18:	8080030f 	ldh	r2,12(r16)
    2d1c:	10000c26 	beq	r2,zero,2d50 <__sfp+0x88>
    2d20:	80c01d04 	addi	r3,r16,116
    2d24:	00000206 	br	2d30 <__sfp+0x68>
    2d28:	18bfe60f 	ldh	r2,-104(r3)
    2d2c:	10000826 	beq	r2,zero,2d50 <__sfp+0x88>
    2d30:	297fffc4 	addi	r5,r5,-1
    2d34:	1c3ffd04 	addi	r16,r3,-12
    2d38:	18c01a04 	addi	r3,r3,104
    2d3c:	2c7ffa1e 	bne	r5,r17,2d28 <__alt_mem_Flash_flash_data+0xf4002d28>
    2d40:	90800017 	ldw	r2,0(r18)
    2d44:	10001d26 	beq	r2,zero,2dbc <__sfp+0xf4>
    2d48:	1025883a 	mov	r18,r2
    2d4c:	003fee06 	br	2d08 <__alt_mem_Flash_flash_data+0xf4002d08>
    2d50:	00bfffc4 	movi	r2,-1
    2d54:	8080038d 	sth	r2,14(r16)
    2d58:	00800044 	movi	r2,1
    2d5c:	8080030d 	sth	r2,12(r16)
    2d60:	80001915 	stw	zero,100(r16)
    2d64:	80000015 	stw	zero,0(r16)
    2d68:	80000215 	stw	zero,8(r16)
    2d6c:	80000115 	stw	zero,4(r16)
    2d70:	80000415 	stw	zero,16(r16)
    2d74:	80000515 	stw	zero,20(r16)
    2d78:	80000615 	stw	zero,24(r16)
    2d7c:	81001704 	addi	r4,r16,92
    2d80:	000b883a 	mov	r5,zero
    2d84:	01800204 	movi	r6,8
    2d88:	000359c0 	call	359c <memset>
    2d8c:	8005883a 	mov	r2,r16
    2d90:	80000c15 	stw	zero,48(r16)
    2d94:	80000d15 	stw	zero,52(r16)
    2d98:	80001115 	stw	zero,68(r16)
    2d9c:	80001215 	stw	zero,72(r16)
    2da0:	dfc00417 	ldw	ra,16(sp)
    2da4:	dcc00317 	ldw	r19,12(sp)
    2da8:	dc800217 	ldw	r18,8(sp)
    2dac:	dc400117 	ldw	r17,4(sp)
    2db0:	dc000017 	ldw	r16,0(sp)
    2db4:	dec00504 	addi	sp,sp,20
    2db8:	f800283a 	ret
    2dbc:	9809883a 	mov	r4,r19
    2dc0:	01400104 	movi	r5,4
    2dc4:	0002c600 	call	2c60 <__sfmoreglue>
    2dc8:	90800015 	stw	r2,0(r18)
    2dcc:	103fde1e 	bne	r2,zero,2d48 <__alt_mem_Flash_flash_data+0xf4002d48>
    2dd0:	00800304 	movi	r2,12
    2dd4:	98800015 	stw	r2,0(r19)
    2dd8:	0005883a 	mov	r2,zero
    2ddc:	003ff006 	br	2da0 <__alt_mem_Flash_flash_data+0xf4002da0>

00002de0 <_cleanup>:
    2de0:	00800074 	movhi	r2,1
    2de4:	10893304 	addi	r2,r2,9420
    2de8:	11000017 	ldw	r4,0(r2)
    2dec:	01400034 	movhi	r5,0
    2df0:	294e2b04 	addi	r5,r5,14508
    2df4:	00033201 	jmpi	3320 <_fwalk_reent>

00002df8 <__sinit>:
    2df8:	20800e17 	ldw	r2,56(r4)
    2dfc:	10000126 	beq	r2,zero,2e04 <__sinit+0xc>
    2e00:	f800283a 	ret
    2e04:	0002ac41 	jmpi	2ac4 <__sinit.part.1>

00002e08 <__sfp_lock_acquire>:
    2e08:	f800283a 	ret

00002e0c <__sfp_lock_release>:
    2e0c:	f800283a 	ret

00002e10 <__sinit_lock_acquire>:
    2e10:	f800283a 	ret

00002e14 <__sinit_lock_release>:
    2e14:	f800283a 	ret

00002e18 <__fp_lock_all>:
    2e18:	00800074 	movhi	r2,1
    2e1c:	10893404 	addi	r2,r2,9424
    2e20:	11000017 	ldw	r4,0(r2)
    2e24:	01400034 	movhi	r5,0
    2e28:	294aaa04 	addi	r5,r5,10920
    2e2c:	000325c1 	jmpi	325c <_fwalk>

00002e30 <__fp_unlock_all>:
    2e30:	00800074 	movhi	r2,1
    2e34:	10893404 	addi	r2,r2,9424
    2e38:	11000017 	ldw	r4,0(r2)
    2e3c:	01400034 	movhi	r5,0
    2e40:	294aac04 	addi	r5,r5,10928
    2e44:	000325c1 	jmpi	325c <_fwalk>

00002e48 <_malloc_trim_r>:
    2e48:	defffb04 	addi	sp,sp,-20
    2e4c:	dcc00315 	stw	r19,12(sp)
    2e50:	04c00074 	movhi	r19,1
    2e54:	dc800215 	stw	r18,8(sp)
    2e58:	dc400115 	stw	r17,4(sp)
    2e5c:	dc000015 	stw	r16,0(sp)
    2e60:	dfc00415 	stw	ra,16(sp)
    2e64:	2821883a 	mov	r16,r5
    2e68:	9cc2c004 	addi	r19,r19,2816
    2e6c:	2025883a 	mov	r18,r4
    2e70:	000471c0 	call	471c <__malloc_lock>
    2e74:	98800217 	ldw	r2,8(r19)
    2e78:	14400117 	ldw	r17,4(r2)
    2e7c:	00bfff04 	movi	r2,-4
    2e80:	88a2703a 	and	r17,r17,r2
    2e84:	8c21c83a 	sub	r16,r17,r16
    2e88:	8403fbc4 	addi	r16,r16,4079
    2e8c:	8020d33a 	srli	r16,r16,12
    2e90:	0083ffc4 	movi	r2,4095
    2e94:	843fffc4 	addi	r16,r16,-1
    2e98:	8020933a 	slli	r16,r16,12
    2e9c:	1400060e 	bge	r2,r16,2eb8 <_malloc_trim_r+0x70>
    2ea0:	9009883a 	mov	r4,r18
    2ea4:	000b883a 	mov	r5,zero
    2ea8:	000266c0 	call	266c <_sbrk_r>
    2eac:	98c00217 	ldw	r3,8(r19)
    2eb0:	1c47883a 	add	r3,r3,r17
    2eb4:	10c00a26 	beq	r2,r3,2ee0 <_malloc_trim_r+0x98>
    2eb8:	9009883a 	mov	r4,r18
    2ebc:	000483c0 	call	483c <__malloc_unlock>
    2ec0:	0005883a 	mov	r2,zero
    2ec4:	dfc00417 	ldw	ra,16(sp)
    2ec8:	dcc00317 	ldw	r19,12(sp)
    2ecc:	dc800217 	ldw	r18,8(sp)
    2ed0:	dc400117 	ldw	r17,4(sp)
    2ed4:	dc000017 	ldw	r16,0(sp)
    2ed8:	dec00504 	addi	sp,sp,20
    2edc:	f800283a 	ret
    2ee0:	9009883a 	mov	r4,r18
    2ee4:	040bc83a 	sub	r5,zero,r16
    2ee8:	000266c0 	call	266c <_sbrk_r>
    2eec:	00ffffc4 	movi	r3,-1
    2ef0:	10c00d26 	beq	r2,r3,2f28 <_malloc_trim_r+0xe0>
    2ef4:	00c00074 	movhi	r3,1
    2ef8:	18d14304 	addi	r3,r3,17676
    2efc:	18800017 	ldw	r2,0(r3)
    2f00:	99000217 	ldw	r4,8(r19)
    2f04:	8c23c83a 	sub	r17,r17,r16
    2f08:	8c400054 	ori	r17,r17,1
    2f0c:	1421c83a 	sub	r16,r2,r16
    2f10:	24400115 	stw	r17,4(r4)
    2f14:	9009883a 	mov	r4,r18
    2f18:	1c000015 	stw	r16,0(r3)
    2f1c:	000483c0 	call	483c <__malloc_unlock>
    2f20:	00800044 	movi	r2,1
    2f24:	003fe706 	br	2ec4 <__alt_mem_Flash_flash_data+0xf4002ec4>
    2f28:	9009883a 	mov	r4,r18
    2f2c:	000b883a 	mov	r5,zero
    2f30:	000266c0 	call	266c <_sbrk_r>
    2f34:	99000217 	ldw	r4,8(r19)
    2f38:	014003c4 	movi	r5,15
    2f3c:	1107c83a 	sub	r3,r2,r4
    2f40:	28ffdd0e 	bge	r5,r3,2eb8 <__alt_mem_Flash_flash_data+0xf4002eb8>
    2f44:	01400074 	movhi	r5,1
    2f48:	29493504 	addi	r5,r5,9428
    2f4c:	29400017 	ldw	r5,0(r5)
    2f50:	18c00054 	ori	r3,r3,1
    2f54:	20c00115 	stw	r3,4(r4)
    2f58:	00c00074 	movhi	r3,1
    2f5c:	1145c83a 	sub	r2,r2,r5
    2f60:	18d14304 	addi	r3,r3,17676
    2f64:	18800015 	stw	r2,0(r3)
    2f68:	003fd306 	br	2eb8 <__alt_mem_Flash_flash_data+0xf4002eb8>

00002f6c <_free_r>:
    2f6c:	28004c26 	beq	r5,zero,30a0 <_free_r+0x134>
    2f70:	defffd04 	addi	sp,sp,-12
    2f74:	dc400115 	stw	r17,4(sp)
    2f78:	dc000015 	stw	r16,0(sp)
    2f7c:	2023883a 	mov	r17,r4
    2f80:	2821883a 	mov	r16,r5
    2f84:	dfc00215 	stw	ra,8(sp)
    2f88:	000471c0 	call	471c <__malloc_lock>
    2f8c:	813fff17 	ldw	r4,-4(r16)
    2f90:	00bfff84 	movi	r2,-2
    2f94:	02400074 	movhi	r9,1
    2f98:	81bffe04 	addi	r6,r16,-8
    2f9c:	2084703a 	and	r2,r4,r2
    2fa0:	4a42c004 	addi	r9,r9,2816
    2fa4:	308b883a 	add	r5,r6,r2
    2fa8:	2a000117 	ldw	r8,4(r5)
    2fac:	49c00217 	ldw	r7,8(r9)
    2fb0:	00ffff04 	movi	r3,-4
    2fb4:	40c6703a 	and	r3,r8,r3
    2fb8:	39405326 	beq	r7,r5,3108 <_free_r+0x19c>
    2fbc:	28c00115 	stw	r3,4(r5)
    2fc0:	2100004c 	andi	r4,r4,1
    2fc4:	2000091e 	bne	r4,zero,2fec <_free_r+0x80>
    2fc8:	81fffe17 	ldw	r7,-8(r16)
    2fcc:	4a000204 	addi	r8,r9,8
    2fd0:	31cdc83a 	sub	r6,r6,r7
    2fd4:	31000217 	ldw	r4,8(r6)
    2fd8:	11c5883a 	add	r2,r2,r7
    2fdc:	22006126 	beq	r4,r8,3164 <_free_r+0x1f8>
    2fe0:	31c00317 	ldw	r7,12(r6)
    2fe4:	21c00315 	stw	r7,12(r4)
    2fe8:	39000215 	stw	r4,8(r7)
    2fec:	28c9883a 	add	r4,r5,r3
    2ff0:	21c00117 	ldw	r7,4(r4)
    2ff4:	39c0004c 	andi	r7,r7,1
    2ff8:	38000d1e 	bne	r7,zero,3030 <_free_r+0xc4>
    2ffc:	29000217 	ldw	r4,8(r5)
    3000:	10c5883a 	add	r2,r2,r3
    3004:	00c00074 	movhi	r3,1
    3008:	18c2c204 	addi	r3,r3,2824
    300c:	20c07526 	beq	r4,r3,31e4 <_free_r+0x278>
    3010:	29c00317 	ldw	r7,12(r5)
    3014:	11400054 	ori	r5,r2,1
    3018:	3087883a 	add	r3,r6,r2
    301c:	21c00315 	stw	r7,12(r4)
    3020:	39000215 	stw	r4,8(r7)
    3024:	31400115 	stw	r5,4(r6)
    3028:	18800015 	stw	r2,0(r3)
    302c:	00000406 	br	3040 <_free_r+0xd4>
    3030:	10c00054 	ori	r3,r2,1
    3034:	30c00115 	stw	r3,4(r6)
    3038:	3087883a 	add	r3,r6,r2
    303c:	18800015 	stw	r2,0(r3)
    3040:	00c07fc4 	movi	r3,511
    3044:	18801736 	bltu	r3,r2,30a4 <_free_r+0x138>
    3048:	1004d0fa 	srli	r2,r2,3
    304c:	01400044 	movi	r5,1
    3050:	49000117 	ldw	r4,4(r9)
    3054:	1087883a 	add	r3,r2,r2
    3058:	18c7883a 	add	r3,r3,r3
    305c:	1005d0ba 	srai	r2,r2,2
    3060:	18c7883a 	add	r3,r3,r3
    3064:	1a47883a 	add	r3,r3,r9
    3068:	19c00217 	ldw	r7,8(r3)
    306c:	2884983a 	sll	r2,r5,r2
    3070:	30c00315 	stw	r3,12(r6)
    3074:	31c00215 	stw	r7,8(r6)
    3078:	1104b03a 	or	r2,r2,r4
    307c:	19800215 	stw	r6,8(r3)
    3080:	48800115 	stw	r2,4(r9)
    3084:	39800315 	stw	r6,12(r7)
    3088:	8809883a 	mov	r4,r17
    308c:	dfc00217 	ldw	ra,8(sp)
    3090:	dc400117 	ldw	r17,4(sp)
    3094:	dc000017 	ldw	r16,0(sp)
    3098:	dec00304 	addi	sp,sp,12
    309c:	000483c1 	jmpi	483c <__malloc_unlock>
    30a0:	f800283a 	ret
    30a4:	1006d27a 	srli	r3,r2,9
    30a8:	01000104 	movi	r4,4
    30ac:	20c04036 	bltu	r4,r3,31b0 <_free_r+0x244>
    30b0:	1006d1ba 	srli	r3,r2,6
    30b4:	19400e04 	addi	r5,r3,56
    30b8:	2947883a 	add	r3,r5,r5
    30bc:	18c7883a 	add	r3,r3,r3
    30c0:	18c7883a 	add	r3,r3,r3
    30c4:	1a49883a 	add	r4,r3,r9
    30c8:	20c00217 	ldw	r3,8(r4)
    30cc:	01c00074 	movhi	r7,1
    30d0:	39c2c004 	addi	r7,r7,2816
    30d4:	19003b26 	beq	r3,r4,31c4 <_free_r+0x258>
    30d8:	01ffff04 	movi	r7,-4
    30dc:	19400117 	ldw	r5,4(r3)
    30e0:	29ca703a 	and	r5,r5,r7
    30e4:	1140022e 	bgeu	r2,r5,30f0 <_free_r+0x184>
    30e8:	18c00217 	ldw	r3,8(r3)
    30ec:	20fffb1e 	bne	r4,r3,30dc <__alt_mem_Flash_flash_data+0xf40030dc>
    30f0:	18800317 	ldw	r2,12(r3)
    30f4:	30800315 	stw	r2,12(r6)
    30f8:	30c00215 	stw	r3,8(r6)
    30fc:	11800215 	stw	r6,8(r2)
    3100:	19800315 	stw	r6,12(r3)
    3104:	003fe006 	br	3088 <__alt_mem_Flash_flash_data+0xf4003088>
    3108:	2100004c 	andi	r4,r4,1
    310c:	1885883a 	add	r2,r3,r2
    3110:	2000071e 	bne	r4,zero,3130 <_free_r+0x1c4>
    3114:	817ffe17 	ldw	r5,-8(r16)
    3118:	314dc83a 	sub	r6,r6,r5
    311c:	30c00317 	ldw	r3,12(r6)
    3120:	31000217 	ldw	r4,8(r6)
    3124:	1145883a 	add	r2,r2,r5
    3128:	20c00315 	stw	r3,12(r4)
    312c:	19000215 	stw	r4,8(r3)
    3130:	10c00054 	ori	r3,r2,1
    3134:	30c00115 	stw	r3,4(r6)
    3138:	00c00074 	movhi	r3,1
    313c:	18c93604 	addi	r3,r3,9432
    3140:	18c00017 	ldw	r3,0(r3)
    3144:	49800215 	stw	r6,8(r9)
    3148:	10ffcf36 	bltu	r2,r3,3088 <__alt_mem_Flash_flash_data+0xf4003088>
    314c:	00800074 	movhi	r2,1
    3150:	10912104 	addi	r2,r2,17540
    3154:	11400017 	ldw	r5,0(r2)
    3158:	8809883a 	mov	r4,r17
    315c:	0002e480 	call	2e48 <_malloc_trim_r>
    3160:	003fc906 	br	3088 <__alt_mem_Flash_flash_data+0xf4003088>
    3164:	28c9883a 	add	r4,r5,r3
    3168:	21000117 	ldw	r4,4(r4)
    316c:	2100004c 	andi	r4,r4,1
    3170:	20000a1e 	bne	r4,zero,319c <_free_r+0x230>
    3174:	29000317 	ldw	r4,12(r5)
    3178:	29400217 	ldw	r5,8(r5)
    317c:	10c5883a 	add	r2,r2,r3
    3180:	10c00054 	ori	r3,r2,1
    3184:	29000315 	stw	r4,12(r5)
    3188:	21400215 	stw	r5,8(r4)
    318c:	30c00115 	stw	r3,4(r6)
    3190:	308d883a 	add	r6,r6,r2
    3194:	30800015 	stw	r2,0(r6)
    3198:	003fbb06 	br	3088 <__alt_mem_Flash_flash_data+0xf4003088>
    319c:	10c00054 	ori	r3,r2,1
    31a0:	30c00115 	stw	r3,4(r6)
    31a4:	308d883a 	add	r6,r6,r2
    31a8:	30800015 	stw	r2,0(r6)
    31ac:	003fb606 	br	3088 <__alt_mem_Flash_flash_data+0xf4003088>
    31b0:	01000504 	movi	r4,20
    31b4:	20c01436 	bltu	r4,r3,3208 <_free_r+0x29c>
    31b8:	194016c4 	addi	r5,r3,91
    31bc:	2947883a 	add	r3,r5,r5
    31c0:	003fbe06 	br	30bc <__alt_mem_Flash_flash_data+0xf40030bc>
    31c4:	280bd0ba 	srai	r5,r5,2
    31c8:	00800044 	movi	r2,1
    31cc:	39000117 	ldw	r4,4(r7)
    31d0:	114a983a 	sll	r5,r2,r5
    31d4:	1805883a 	mov	r2,r3
    31d8:	2908b03a 	or	r4,r5,r4
    31dc:	39000115 	stw	r4,4(r7)
    31e0:	003fc406 	br	30f4 <__alt_mem_Flash_flash_data+0xf40030f4>
    31e4:	49800515 	stw	r6,20(r9)
    31e8:	49800415 	stw	r6,16(r9)
    31ec:	10c00054 	ori	r3,r2,1
    31f0:	31000315 	stw	r4,12(r6)
    31f4:	31000215 	stw	r4,8(r6)
    31f8:	30c00115 	stw	r3,4(r6)
    31fc:	308d883a 	add	r6,r6,r2
    3200:	30800015 	stw	r2,0(r6)
    3204:	003fa006 	br	3088 <__alt_mem_Flash_flash_data+0xf4003088>
    3208:	01001504 	movi	r4,84
    320c:	20c00436 	bltu	r4,r3,3220 <_free_r+0x2b4>
    3210:	1006d33a 	srli	r3,r2,12
    3214:	19401b84 	addi	r5,r3,110
    3218:	2947883a 	add	r3,r5,r5
    321c:	003fa706 	br	30bc <__alt_mem_Flash_flash_data+0xf40030bc>
    3220:	01005504 	movi	r4,340
    3224:	20c00436 	bltu	r4,r3,3238 <_free_r+0x2cc>
    3228:	1006d3fa 	srli	r3,r2,15
    322c:	19401dc4 	addi	r5,r3,119
    3230:	2947883a 	add	r3,r5,r5
    3234:	003fa106 	br	30bc <__alt_mem_Flash_flash_data+0xf40030bc>
    3238:	01015504 	movi	r4,1364
    323c:	20c00436 	bltu	r4,r3,3250 <_free_r+0x2e4>
    3240:	1006d4ba 	srli	r3,r2,18
    3244:	19401f04 	addi	r5,r3,124
    3248:	2947883a 	add	r3,r5,r5
    324c:	003f9b06 	br	30bc <__alt_mem_Flash_flash_data+0xf40030bc>
    3250:	00c03f04 	movi	r3,252
    3254:	01401f84 	movi	r5,126
    3258:	003f9806 	br	30bc <__alt_mem_Flash_flash_data+0xf40030bc>

0000325c <_fwalk>:
    325c:	defff704 	addi	sp,sp,-36
    3260:	dd000415 	stw	r20,16(sp)
    3264:	dfc00815 	stw	ra,32(sp)
    3268:	ddc00715 	stw	r23,28(sp)
    326c:	dd800615 	stw	r22,24(sp)
    3270:	dd400515 	stw	r21,20(sp)
    3274:	dcc00315 	stw	r19,12(sp)
    3278:	dc800215 	stw	r18,8(sp)
    327c:	dc400115 	stw	r17,4(sp)
    3280:	dc000015 	stw	r16,0(sp)
    3284:	2500b804 	addi	r20,r4,736
    3288:	a0002326 	beq	r20,zero,3318 <_fwalk+0xbc>
    328c:	282b883a 	mov	r21,r5
    3290:	002f883a 	mov	r23,zero
    3294:	05800044 	movi	r22,1
    3298:	04ffffc4 	movi	r19,-1
    329c:	a4400117 	ldw	r17,4(r20)
    32a0:	a4800217 	ldw	r18,8(r20)
    32a4:	8c7fffc4 	addi	r17,r17,-1
    32a8:	88000d16 	blt	r17,zero,32e0 <_fwalk+0x84>
    32ac:	94000304 	addi	r16,r18,12
    32b0:	94800384 	addi	r18,r18,14
    32b4:	80c0000b 	ldhu	r3,0(r16)
    32b8:	8c7fffc4 	addi	r17,r17,-1
    32bc:	813ffd04 	addi	r4,r16,-12
    32c0:	b0c0042e 	bgeu	r22,r3,32d4 <_fwalk+0x78>
    32c4:	90c0000f 	ldh	r3,0(r18)
    32c8:	1cc00226 	beq	r3,r19,32d4 <_fwalk+0x78>
    32cc:	a83ee83a 	callr	r21
    32d0:	b8aeb03a 	or	r23,r23,r2
    32d4:	84001a04 	addi	r16,r16,104
    32d8:	94801a04 	addi	r18,r18,104
    32dc:	8cfff51e 	bne	r17,r19,32b4 <__alt_mem_Flash_flash_data+0xf40032b4>
    32e0:	a5000017 	ldw	r20,0(r20)
    32e4:	a03fed1e 	bne	r20,zero,329c <__alt_mem_Flash_flash_data+0xf400329c>
    32e8:	b805883a 	mov	r2,r23
    32ec:	dfc00817 	ldw	ra,32(sp)
    32f0:	ddc00717 	ldw	r23,28(sp)
    32f4:	dd800617 	ldw	r22,24(sp)
    32f8:	dd400517 	ldw	r21,20(sp)
    32fc:	dd000417 	ldw	r20,16(sp)
    3300:	dcc00317 	ldw	r19,12(sp)
    3304:	dc800217 	ldw	r18,8(sp)
    3308:	dc400117 	ldw	r17,4(sp)
    330c:	dc000017 	ldw	r16,0(sp)
    3310:	dec00904 	addi	sp,sp,36
    3314:	f800283a 	ret
    3318:	002f883a 	mov	r23,zero
    331c:	003ff206 	br	32e8 <__alt_mem_Flash_flash_data+0xf40032e8>

00003320 <_fwalk_reent>:
    3320:	defff704 	addi	sp,sp,-36
    3324:	dd400515 	stw	r21,20(sp)
    3328:	dfc00815 	stw	ra,32(sp)
    332c:	ddc00715 	stw	r23,28(sp)
    3330:	dd800615 	stw	r22,24(sp)
    3334:	dd000415 	stw	r20,16(sp)
    3338:	dcc00315 	stw	r19,12(sp)
    333c:	dc800215 	stw	r18,8(sp)
    3340:	dc400115 	stw	r17,4(sp)
    3344:	dc000015 	stw	r16,0(sp)
    3348:	2540b804 	addi	r21,r4,736
    334c:	a8002326 	beq	r21,zero,33dc <_fwalk_reent+0xbc>
    3350:	2829883a 	mov	r20,r5
    3354:	202d883a 	mov	r22,r4
    3358:	002f883a 	mov	r23,zero
    335c:	04c00044 	movi	r19,1
    3360:	04bfffc4 	movi	r18,-1
    3364:	ac400117 	ldw	r17,4(r21)
    3368:	ac000217 	ldw	r16,8(r21)
    336c:	8c7fffc4 	addi	r17,r17,-1
    3370:	88000c16 	blt	r17,zero,33a4 <_fwalk_reent+0x84>
    3374:	84000304 	addi	r16,r16,12
    3378:	80c0000b 	ldhu	r3,0(r16)
    337c:	8c7fffc4 	addi	r17,r17,-1
    3380:	817ffd04 	addi	r5,r16,-12
    3384:	98c0052e 	bgeu	r19,r3,339c <_fwalk_reent+0x7c>
    3388:	80c0008f 	ldh	r3,2(r16)
    338c:	b009883a 	mov	r4,r22
    3390:	1c800226 	beq	r3,r18,339c <_fwalk_reent+0x7c>
    3394:	a03ee83a 	callr	r20
    3398:	b8aeb03a 	or	r23,r23,r2
    339c:	84001a04 	addi	r16,r16,104
    33a0:	8cbff51e 	bne	r17,r18,3378 <__alt_mem_Flash_flash_data+0xf4003378>
    33a4:	ad400017 	ldw	r21,0(r21)
    33a8:	a83fee1e 	bne	r21,zero,3364 <__alt_mem_Flash_flash_data+0xf4003364>
    33ac:	b805883a 	mov	r2,r23
    33b0:	dfc00817 	ldw	ra,32(sp)
    33b4:	ddc00717 	ldw	r23,28(sp)
    33b8:	dd800617 	ldw	r22,24(sp)
    33bc:	dd400517 	ldw	r21,20(sp)
    33c0:	dd000417 	ldw	r20,16(sp)
    33c4:	dcc00317 	ldw	r19,12(sp)
    33c8:	dc800217 	ldw	r18,8(sp)
    33cc:	dc400117 	ldw	r17,4(sp)
    33d0:	dc000017 	ldw	r16,0(sp)
    33d4:	dec00904 	addi	sp,sp,36
    33d8:	f800283a 	ret
    33dc:	002f883a 	mov	r23,zero
    33e0:	003ff206 	br	33ac <__alt_mem_Flash_flash_data+0xf40033ac>

000033e4 <__smakebuf_r>:
    33e4:	2880030b 	ldhu	r2,12(r5)
    33e8:	10c0008c 	andi	r3,r2,2
    33ec:	1800401e 	bne	r3,zero,34f0 <__smakebuf_r+0x10c>
    33f0:	deffec04 	addi	sp,sp,-80
    33f4:	dc000f15 	stw	r16,60(sp)
    33f8:	2821883a 	mov	r16,r5
    33fc:	2940038f 	ldh	r5,14(r5)
    3400:	dc401015 	stw	r17,64(sp)
    3404:	dfc01315 	stw	ra,76(sp)
    3408:	dcc01215 	stw	r19,72(sp)
    340c:	dc801115 	stw	r18,68(sp)
    3410:	2023883a 	mov	r17,r4
    3414:	28001b16 	blt	r5,zero,3484 <__smakebuf_r+0xa0>
    3418:	d80d883a 	mov	r6,sp
    341c:	00039b00 	call	39b0 <_fstat_r>
    3420:	10001716 	blt	r2,zero,3480 <__smakebuf_r+0x9c>
    3424:	d8800117 	ldw	r2,4(sp)
    3428:	00e00014 	movui	r3,32768
    342c:	10bc000c 	andi	r2,r2,61440
    3430:	10c03726 	beq	r2,r3,3510 <__smakebuf_r+0x12c>
    3434:	80c0030b 	ldhu	r3,12(r16)
    3438:	18c20014 	ori	r3,r3,2048
    343c:	80c0030d 	sth	r3,12(r16)
    3440:	00c80004 	movi	r3,8192
    3444:	10c03c1e 	bne	r2,r3,3538 <__smakebuf_r+0x154>
    3448:	8140038f 	ldh	r5,14(r16)
    344c:	8809883a 	mov	r4,r17
    3450:	0003a080 	call	3a08 <_isatty_r>
    3454:	10004e26 	beq	r2,zero,3590 <__smakebuf_r+0x1ac>
    3458:	8080030b 	ldhu	r2,12(r16)
    345c:	04c00044 	movi	r19,1
    3460:	80c010c4 	addi	r3,r16,67
    3464:	14c4b03a 	or	r2,r2,r19
    3468:	8080030d 	sth	r2,12(r16)
    346c:	80c00015 	stw	r3,0(r16)
    3470:	80c00415 	stw	r3,16(r16)
    3474:	84c00515 	stw	r19,20(r16)
    3478:	04810004 	movi	r18,1024
    347c:	00000706 	br	349c <__smakebuf_r+0xb8>
    3480:	8080030b 	ldhu	r2,12(r16)
    3484:	10c0200c 	andi	r3,r2,128
    3488:	18001f1e 	bne	r3,zero,3508 <__smakebuf_r+0x124>
    348c:	04810004 	movi	r18,1024
    3490:	10820014 	ori	r2,r2,2048
    3494:	8080030d 	sth	r2,12(r16)
    3498:	0027883a 	mov	r19,zero
    349c:	8809883a 	mov	r4,r17
    34a0:	900b883a 	mov	r5,r18
    34a4:	00015e00 	call	15e0 <_malloc_r>
    34a8:	10002e26 	beq	r2,zero,3564 <__smakebuf_r+0x180>
    34ac:	80c0030b 	ldhu	r3,12(r16)
    34b0:	01000034 	movhi	r4,0
    34b4:	210aae04 	addi	r4,r4,10936
    34b8:	89000f15 	stw	r4,60(r17)
    34bc:	18c02014 	ori	r3,r3,128
    34c0:	80c0030d 	sth	r3,12(r16)
    34c4:	80800015 	stw	r2,0(r16)
    34c8:	80800415 	stw	r2,16(r16)
    34cc:	84800515 	stw	r18,20(r16)
    34d0:	98001c1e 	bne	r19,zero,3544 <__smakebuf_r+0x160>
    34d4:	dfc01317 	ldw	ra,76(sp)
    34d8:	dcc01217 	ldw	r19,72(sp)
    34dc:	dc801117 	ldw	r18,68(sp)
    34e0:	dc401017 	ldw	r17,64(sp)
    34e4:	dc000f17 	ldw	r16,60(sp)
    34e8:	dec01404 	addi	sp,sp,80
    34ec:	f800283a 	ret
    34f0:	288010c4 	addi	r2,r5,67
    34f4:	28800015 	stw	r2,0(r5)
    34f8:	28800415 	stw	r2,16(r5)
    34fc:	00800044 	movi	r2,1
    3500:	28800515 	stw	r2,20(r5)
    3504:	f800283a 	ret
    3508:	04801004 	movi	r18,64
    350c:	003fe006 	br	3490 <__alt_mem_Flash_flash_data+0xf4003490>
    3510:	81000a17 	ldw	r4,40(r16)
    3514:	00c00034 	movhi	r3,0
    3518:	18cde604 	addi	r3,r3,14232
    351c:	20ffc51e 	bne	r4,r3,3434 <__alt_mem_Flash_flash_data+0xf4003434>
    3520:	80c0030b 	ldhu	r3,12(r16)
    3524:	01010004 	movi	r4,1024
    3528:	81001315 	stw	r4,76(r16)
    352c:	1906b03a 	or	r3,r3,r4
    3530:	80c0030d 	sth	r3,12(r16)
    3534:	003fc206 	br	3440 <__alt_mem_Flash_flash_data+0xf4003440>
    3538:	0027883a 	mov	r19,zero
    353c:	04810004 	movi	r18,1024
    3540:	003fd606 	br	349c <__alt_mem_Flash_flash_data+0xf400349c>
    3544:	8140038f 	ldh	r5,14(r16)
    3548:	8809883a 	mov	r4,r17
    354c:	0003a080 	call	3a08 <_isatty_r>
    3550:	103fe026 	beq	r2,zero,34d4 <__alt_mem_Flash_flash_data+0xf40034d4>
    3554:	8080030b 	ldhu	r2,12(r16)
    3558:	10800054 	ori	r2,r2,1
    355c:	8080030d 	sth	r2,12(r16)
    3560:	003fdc06 	br	34d4 <__alt_mem_Flash_flash_data+0xf40034d4>
    3564:	8080030b 	ldhu	r2,12(r16)
    3568:	10c0800c 	andi	r3,r2,512
    356c:	183fd91e 	bne	r3,zero,34d4 <__alt_mem_Flash_flash_data+0xf40034d4>
    3570:	10800094 	ori	r2,r2,2
    3574:	80c010c4 	addi	r3,r16,67
    3578:	8080030d 	sth	r2,12(r16)
    357c:	00800044 	movi	r2,1
    3580:	80c00015 	stw	r3,0(r16)
    3584:	80c00415 	stw	r3,16(r16)
    3588:	80800515 	stw	r2,20(r16)
    358c:	003fd106 	br	34d4 <__alt_mem_Flash_flash_data+0xf40034d4>
    3590:	04c00044 	movi	r19,1
    3594:	04810004 	movi	r18,1024
    3598:	003fc006 	br	349c <__alt_mem_Flash_flash_data+0xf400349c>

0000359c <memset>:
    359c:	20c000cc 	andi	r3,r4,3
    35a0:	2005883a 	mov	r2,r4
    35a4:	18004326 	beq	r3,zero,36b4 <memset+0x118>
    35a8:	31ffffc4 	addi	r7,r6,-1
    35ac:	30004026 	beq	r6,zero,36b0 <memset+0x114>
    35b0:	2813883a 	mov	r9,r5
    35b4:	200d883a 	mov	r6,r4
    35b8:	2007883a 	mov	r3,r4
    35bc:	00000406 	br	35d0 <memset+0x34>
    35c0:	3a3fffc4 	addi	r8,r7,-1
    35c4:	31800044 	addi	r6,r6,1
    35c8:	38003926 	beq	r7,zero,36b0 <memset+0x114>
    35cc:	400f883a 	mov	r7,r8
    35d0:	18c00044 	addi	r3,r3,1
    35d4:	32400005 	stb	r9,0(r6)
    35d8:	1a0000cc 	andi	r8,r3,3
    35dc:	403ff81e 	bne	r8,zero,35c0 <__alt_mem_Flash_flash_data+0xf40035c0>
    35e0:	010000c4 	movi	r4,3
    35e4:	21c02d2e 	bgeu	r4,r7,369c <memset+0x100>
    35e8:	29803fcc 	andi	r6,r5,255
    35ec:	3008923a 	slli	r4,r6,8
    35f0:	218cb03a 	or	r6,r4,r6
    35f4:	3008943a 	slli	r4,r6,16
    35f8:	218cb03a 	or	r6,r4,r6
    35fc:	010003c4 	movi	r4,15
    3600:	21c0182e 	bgeu	r4,r7,3664 <memset+0xc8>
    3604:	3b3ffc04 	addi	r12,r7,-16
    3608:	6018d13a 	srli	r12,r12,4
    360c:	1a000104 	addi	r8,r3,4
    3610:	1ac00204 	addi	r11,r3,8
    3614:	6008913a 	slli	r4,r12,4
    3618:	1a800304 	addi	r10,r3,12
    361c:	1813883a 	mov	r9,r3
    3620:	21000504 	addi	r4,r4,20
    3624:	1909883a 	add	r4,r3,r4
    3628:	49800015 	stw	r6,0(r9)
    362c:	41800015 	stw	r6,0(r8)
    3630:	59800015 	stw	r6,0(r11)
    3634:	51800015 	stw	r6,0(r10)
    3638:	42000404 	addi	r8,r8,16
    363c:	4a400404 	addi	r9,r9,16
    3640:	5ac00404 	addi	r11,r11,16
    3644:	52800404 	addi	r10,r10,16
    3648:	413ff71e 	bne	r8,r4,3628 <__alt_mem_Flash_flash_data+0xf4003628>
    364c:	63000044 	addi	r12,r12,1
    3650:	6018913a 	slli	r12,r12,4
    3654:	39c003cc 	andi	r7,r7,15
    3658:	010000c4 	movi	r4,3
    365c:	1b07883a 	add	r3,r3,r12
    3660:	21c00e2e 	bgeu	r4,r7,369c <memset+0x100>
    3664:	1813883a 	mov	r9,r3
    3668:	3811883a 	mov	r8,r7
    366c:	010000c4 	movi	r4,3
    3670:	49800015 	stw	r6,0(r9)
    3674:	423fff04 	addi	r8,r8,-4
    3678:	4a400104 	addi	r9,r9,4
    367c:	223ffc36 	bltu	r4,r8,3670 <__alt_mem_Flash_flash_data+0xf4003670>
    3680:	393fff04 	addi	r4,r7,-4
    3684:	2008d0ba 	srli	r4,r4,2
    3688:	39c000cc 	andi	r7,r7,3
    368c:	21000044 	addi	r4,r4,1
    3690:	2109883a 	add	r4,r4,r4
    3694:	2109883a 	add	r4,r4,r4
    3698:	1907883a 	add	r3,r3,r4
    369c:	38000426 	beq	r7,zero,36b0 <memset+0x114>
    36a0:	19cf883a 	add	r7,r3,r7
    36a4:	19400005 	stb	r5,0(r3)
    36a8:	18c00044 	addi	r3,r3,1
    36ac:	19fffd1e 	bne	r3,r7,36a4 <__alt_mem_Flash_flash_data+0xf40036a4>
    36b0:	f800283a 	ret
    36b4:	2007883a 	mov	r3,r4
    36b8:	300f883a 	mov	r7,r6
    36bc:	003fc806 	br	35e0 <__alt_mem_Flash_flash_data+0xf40035e0>

000036c0 <__sread>:
    36c0:	defffe04 	addi	sp,sp,-8
    36c4:	dc000015 	stw	r16,0(sp)
    36c8:	2821883a 	mov	r16,r5
    36cc:	2940038f 	ldh	r5,14(r5)
    36d0:	dfc00115 	stw	ra,4(sp)
    36d4:	0003ab80 	call	3ab8 <_read_r>
    36d8:	10000716 	blt	r2,zero,36f8 <__sread+0x38>
    36dc:	80c01417 	ldw	r3,80(r16)
    36e0:	1887883a 	add	r3,r3,r2
    36e4:	80c01415 	stw	r3,80(r16)
    36e8:	dfc00117 	ldw	ra,4(sp)
    36ec:	dc000017 	ldw	r16,0(sp)
    36f0:	dec00204 	addi	sp,sp,8
    36f4:	f800283a 	ret
    36f8:	80c0030b 	ldhu	r3,12(r16)
    36fc:	18fbffcc 	andi	r3,r3,61439
    3700:	80c0030d 	sth	r3,12(r16)
    3704:	dfc00117 	ldw	ra,4(sp)
    3708:	dc000017 	ldw	r16,0(sp)
    370c:	dec00204 	addi	sp,sp,8
    3710:	f800283a 	ret

00003714 <__seofread>:
    3714:	0005883a 	mov	r2,zero
    3718:	f800283a 	ret

0000371c <__swrite>:
    371c:	2880030b 	ldhu	r2,12(r5)
    3720:	defffb04 	addi	sp,sp,-20
    3724:	dcc00315 	stw	r19,12(sp)
    3728:	dc800215 	stw	r18,8(sp)
    372c:	dc400115 	stw	r17,4(sp)
    3730:	dc000015 	stw	r16,0(sp)
    3734:	dfc00415 	stw	ra,16(sp)
    3738:	10c0400c 	andi	r3,r2,256
    373c:	2821883a 	mov	r16,r5
    3740:	2027883a 	mov	r19,r4
    3744:	3025883a 	mov	r18,r6
    3748:	3823883a 	mov	r17,r7
    374c:	18000526 	beq	r3,zero,3764 <__swrite+0x48>
    3750:	2940038f 	ldh	r5,14(r5)
    3754:	000d883a 	mov	r6,zero
    3758:	01c00084 	movi	r7,2
    375c:	0003a5c0 	call	3a5c <_lseek_r>
    3760:	8080030b 	ldhu	r2,12(r16)
    3764:	8140038f 	ldh	r5,14(r16)
    3768:	10bbffcc 	andi	r2,r2,61439
    376c:	9809883a 	mov	r4,r19
    3770:	900d883a 	mov	r6,r18
    3774:	880f883a 	mov	r7,r17
    3778:	8080030d 	sth	r2,12(r16)
    377c:	dfc00417 	ldw	ra,16(sp)
    3780:	dcc00317 	ldw	r19,12(sp)
    3784:	dc800217 	ldw	r18,8(sp)
    3788:	dc400117 	ldw	r17,4(sp)
    378c:	dc000017 	ldw	r16,0(sp)
    3790:	dec00504 	addi	sp,sp,20
    3794:	00037fc1 	jmpi	37fc <_write_r>

00003798 <__sseek>:
    3798:	defffe04 	addi	sp,sp,-8
    379c:	dc000015 	stw	r16,0(sp)
    37a0:	2821883a 	mov	r16,r5
    37a4:	2940038f 	ldh	r5,14(r5)
    37a8:	dfc00115 	stw	ra,4(sp)
    37ac:	0003a5c0 	call	3a5c <_lseek_r>
    37b0:	00ffffc4 	movi	r3,-1
    37b4:	10c00826 	beq	r2,r3,37d8 <__sseek+0x40>
    37b8:	80c0030b 	ldhu	r3,12(r16)
    37bc:	80801415 	stw	r2,80(r16)
    37c0:	18c40014 	ori	r3,r3,4096
    37c4:	80c0030d 	sth	r3,12(r16)
    37c8:	dfc00117 	ldw	ra,4(sp)
    37cc:	dc000017 	ldw	r16,0(sp)
    37d0:	dec00204 	addi	sp,sp,8
    37d4:	f800283a 	ret
    37d8:	80c0030b 	ldhu	r3,12(r16)
    37dc:	18fbffcc 	andi	r3,r3,61439
    37e0:	80c0030d 	sth	r3,12(r16)
    37e4:	dfc00117 	ldw	ra,4(sp)
    37e8:	dc000017 	ldw	r16,0(sp)
    37ec:	dec00204 	addi	sp,sp,8
    37f0:	f800283a 	ret

000037f4 <__sclose>:
    37f4:	2940038f 	ldh	r5,14(r5)
    37f8:	00038581 	jmpi	3858 <_close_r>

000037fc <_write_r>:
    37fc:	defffd04 	addi	sp,sp,-12
    3800:	dc000015 	stw	r16,0(sp)
    3804:	04000074 	movhi	r16,1
    3808:	dc400115 	stw	r17,4(sp)
    380c:	84112204 	addi	r16,r16,17544
    3810:	2023883a 	mov	r17,r4
    3814:	2809883a 	mov	r4,r5
    3818:	300b883a 	mov	r5,r6
    381c:	380d883a 	mov	r6,r7
    3820:	dfc00215 	stw	ra,8(sp)
    3824:	80000015 	stw	zero,0(r16)
    3828:	00045080 	call	4508 <write>
    382c:	00ffffc4 	movi	r3,-1
    3830:	10c00526 	beq	r2,r3,3848 <_write_r+0x4c>
    3834:	dfc00217 	ldw	ra,8(sp)
    3838:	dc400117 	ldw	r17,4(sp)
    383c:	dc000017 	ldw	r16,0(sp)
    3840:	dec00304 	addi	sp,sp,12
    3844:	f800283a 	ret
    3848:	80c00017 	ldw	r3,0(r16)
    384c:	183ff926 	beq	r3,zero,3834 <__alt_mem_Flash_flash_data+0xf4003834>
    3850:	88c00015 	stw	r3,0(r17)
    3854:	003ff706 	br	3834 <__alt_mem_Flash_flash_data+0xf4003834>

00003858 <_close_r>:
    3858:	defffd04 	addi	sp,sp,-12
    385c:	dc000015 	stw	r16,0(sp)
    3860:	04000074 	movhi	r16,1
    3864:	dc400115 	stw	r17,4(sp)
    3868:	84112204 	addi	r16,r16,17544
    386c:	2023883a 	mov	r17,r4
    3870:	2809883a 	mov	r4,r5
    3874:	dfc00215 	stw	ra,8(sp)
    3878:	80000015 	stw	zero,0(r16)
    387c:	0003c900 	call	3c90 <close>
    3880:	00ffffc4 	movi	r3,-1
    3884:	10c00526 	beq	r2,r3,389c <_close_r+0x44>
    3888:	dfc00217 	ldw	ra,8(sp)
    388c:	dc400117 	ldw	r17,4(sp)
    3890:	dc000017 	ldw	r16,0(sp)
    3894:	dec00304 	addi	sp,sp,12
    3898:	f800283a 	ret
    389c:	80c00017 	ldw	r3,0(r16)
    38a0:	183ff926 	beq	r3,zero,3888 <__alt_mem_Flash_flash_data+0xf4003888>
    38a4:	88c00015 	stw	r3,0(r17)
    38a8:	003ff706 	br	3888 <__alt_mem_Flash_flash_data+0xf4003888>

000038ac <_fclose_r>:
    38ac:	28003926 	beq	r5,zero,3994 <_fclose_r+0xe8>
    38b0:	defffc04 	addi	sp,sp,-16
    38b4:	dc400115 	stw	r17,4(sp)
    38b8:	dc000015 	stw	r16,0(sp)
    38bc:	dfc00315 	stw	ra,12(sp)
    38c0:	dc800215 	stw	r18,8(sp)
    38c4:	2023883a 	mov	r17,r4
    38c8:	2821883a 	mov	r16,r5
    38cc:	20000226 	beq	r4,zero,38d8 <_fclose_r+0x2c>
    38d0:	20800e17 	ldw	r2,56(r4)
    38d4:	10002726 	beq	r2,zero,3974 <_fclose_r+0xc8>
    38d8:	8080030f 	ldh	r2,12(r16)
    38dc:	1000071e 	bne	r2,zero,38fc <_fclose_r+0x50>
    38e0:	0005883a 	mov	r2,zero
    38e4:	dfc00317 	ldw	ra,12(sp)
    38e8:	dc800217 	ldw	r18,8(sp)
    38ec:	dc400117 	ldw	r17,4(sp)
    38f0:	dc000017 	ldw	r16,0(sp)
    38f4:	dec00404 	addi	sp,sp,16
    38f8:	f800283a 	ret
    38fc:	8809883a 	mov	r4,r17
    3900:	800b883a 	mov	r5,r16
    3904:	00028140 	call	2814 <__sflush_r>
    3908:	1025883a 	mov	r18,r2
    390c:	80800b17 	ldw	r2,44(r16)
    3910:	10000426 	beq	r2,zero,3924 <_fclose_r+0x78>
    3914:	81400717 	ldw	r5,28(r16)
    3918:	8809883a 	mov	r4,r17
    391c:	103ee83a 	callr	r2
    3920:	10001616 	blt	r2,zero,397c <_fclose_r+0xd0>
    3924:	8080030b 	ldhu	r2,12(r16)
    3928:	1080200c 	andi	r2,r2,128
    392c:	1000151e 	bne	r2,zero,3984 <_fclose_r+0xd8>
    3930:	81400c17 	ldw	r5,48(r16)
    3934:	28000526 	beq	r5,zero,394c <_fclose_r+0xa0>
    3938:	80801004 	addi	r2,r16,64
    393c:	28800226 	beq	r5,r2,3948 <_fclose_r+0x9c>
    3940:	8809883a 	mov	r4,r17
    3944:	0002f6c0 	call	2f6c <_free_r>
    3948:	80000c15 	stw	zero,48(r16)
    394c:	81401117 	ldw	r5,68(r16)
    3950:	28000326 	beq	r5,zero,3960 <_fclose_r+0xb4>
    3954:	8809883a 	mov	r4,r17
    3958:	0002f6c0 	call	2f6c <_free_r>
    395c:	80001115 	stw	zero,68(r16)
    3960:	0002e080 	call	2e08 <__sfp_lock_acquire>
    3964:	8000030d 	sth	zero,12(r16)
    3968:	0002e0c0 	call	2e0c <__sfp_lock_release>
    396c:	9005883a 	mov	r2,r18
    3970:	003fdc06 	br	38e4 <__alt_mem_Flash_flash_data+0xf40038e4>
    3974:	0002df80 	call	2df8 <__sinit>
    3978:	003fd706 	br	38d8 <__alt_mem_Flash_flash_data+0xf40038d8>
    397c:	04bfffc4 	movi	r18,-1
    3980:	003fe806 	br	3924 <__alt_mem_Flash_flash_data+0xf4003924>
    3984:	81400417 	ldw	r5,16(r16)
    3988:	8809883a 	mov	r4,r17
    398c:	0002f6c0 	call	2f6c <_free_r>
    3990:	003fe706 	br	3930 <__alt_mem_Flash_flash_data+0xf4003930>
    3994:	0005883a 	mov	r2,zero
    3998:	f800283a 	ret

0000399c <fclose>:
    399c:	00800074 	movhi	r2,1
    39a0:	10893404 	addi	r2,r2,9424
    39a4:	200b883a 	mov	r5,r4
    39a8:	11000017 	ldw	r4,0(r2)
    39ac:	00038ac1 	jmpi	38ac <_fclose_r>

000039b0 <_fstat_r>:
    39b0:	defffd04 	addi	sp,sp,-12
    39b4:	dc000015 	stw	r16,0(sp)
    39b8:	04000074 	movhi	r16,1
    39bc:	dc400115 	stw	r17,4(sp)
    39c0:	84112204 	addi	r16,r16,17544
    39c4:	2023883a 	mov	r17,r4
    39c8:	2809883a 	mov	r4,r5
    39cc:	300b883a 	mov	r5,r6
    39d0:	dfc00215 	stw	ra,8(sp)
    39d4:	80000015 	stw	zero,0(r16)
    39d8:	0003ddc0 	call	3ddc <fstat>
    39dc:	00ffffc4 	movi	r3,-1
    39e0:	10c00526 	beq	r2,r3,39f8 <_fstat_r+0x48>
    39e4:	dfc00217 	ldw	ra,8(sp)
    39e8:	dc400117 	ldw	r17,4(sp)
    39ec:	dc000017 	ldw	r16,0(sp)
    39f0:	dec00304 	addi	sp,sp,12
    39f4:	f800283a 	ret
    39f8:	80c00017 	ldw	r3,0(r16)
    39fc:	183ff926 	beq	r3,zero,39e4 <__alt_mem_Flash_flash_data+0xf40039e4>
    3a00:	88c00015 	stw	r3,0(r17)
    3a04:	003ff706 	br	39e4 <__alt_mem_Flash_flash_data+0xf40039e4>

00003a08 <_isatty_r>:
    3a08:	defffd04 	addi	sp,sp,-12
    3a0c:	dc000015 	stw	r16,0(sp)
    3a10:	04000074 	movhi	r16,1
    3a14:	dc400115 	stw	r17,4(sp)
    3a18:	84112204 	addi	r16,r16,17544
    3a1c:	2023883a 	mov	r17,r4
    3a20:	2809883a 	mov	r4,r5
    3a24:	dfc00215 	stw	ra,8(sp)
    3a28:	80000015 	stw	zero,0(r16)
    3a2c:	0003edc0 	call	3edc <isatty>
    3a30:	00ffffc4 	movi	r3,-1
    3a34:	10c00526 	beq	r2,r3,3a4c <_isatty_r+0x44>
    3a38:	dfc00217 	ldw	ra,8(sp)
    3a3c:	dc400117 	ldw	r17,4(sp)
    3a40:	dc000017 	ldw	r16,0(sp)
    3a44:	dec00304 	addi	sp,sp,12
    3a48:	f800283a 	ret
    3a4c:	80c00017 	ldw	r3,0(r16)
    3a50:	183ff926 	beq	r3,zero,3a38 <__alt_mem_Flash_flash_data+0xf4003a38>
    3a54:	88c00015 	stw	r3,0(r17)
    3a58:	003ff706 	br	3a38 <__alt_mem_Flash_flash_data+0xf4003a38>

00003a5c <_lseek_r>:
    3a5c:	defffd04 	addi	sp,sp,-12
    3a60:	dc000015 	stw	r16,0(sp)
    3a64:	04000074 	movhi	r16,1
    3a68:	dc400115 	stw	r17,4(sp)
    3a6c:	84112204 	addi	r16,r16,17544
    3a70:	2023883a 	mov	r17,r4
    3a74:	2809883a 	mov	r4,r5
    3a78:	300b883a 	mov	r5,r6
    3a7c:	380d883a 	mov	r6,r7
    3a80:	dfc00215 	stw	ra,8(sp)
    3a84:	80000015 	stw	zero,0(r16)
    3a88:	00040b40 	call	40b4 <lseek>
    3a8c:	00ffffc4 	movi	r3,-1
    3a90:	10c00526 	beq	r2,r3,3aa8 <_lseek_r+0x4c>
    3a94:	dfc00217 	ldw	ra,8(sp)
    3a98:	dc400117 	ldw	r17,4(sp)
    3a9c:	dc000017 	ldw	r16,0(sp)
    3aa0:	dec00304 	addi	sp,sp,12
    3aa4:	f800283a 	ret
    3aa8:	80c00017 	ldw	r3,0(r16)
    3aac:	183ff926 	beq	r3,zero,3a94 <__alt_mem_Flash_flash_data+0xf4003a94>
    3ab0:	88c00015 	stw	r3,0(r17)
    3ab4:	003ff706 	br	3a94 <__alt_mem_Flash_flash_data+0xf4003a94>

00003ab8 <_read_r>:
    3ab8:	defffd04 	addi	sp,sp,-12
    3abc:	dc000015 	stw	r16,0(sp)
    3ac0:	04000074 	movhi	r16,1
    3ac4:	dc400115 	stw	r17,4(sp)
    3ac8:	84112204 	addi	r16,r16,17544
    3acc:	2023883a 	mov	r17,r4
    3ad0:	2809883a 	mov	r4,r5
    3ad4:	300b883a 	mov	r5,r6
    3ad8:	380d883a 	mov	r6,r7
    3adc:	dfc00215 	stw	ra,8(sp)
    3ae0:	80000015 	stw	zero,0(r16)
    3ae4:	00042ac0 	call	42ac <read>
    3ae8:	00ffffc4 	movi	r3,-1
    3aec:	10c00526 	beq	r2,r3,3b04 <_read_r+0x4c>
    3af0:	dfc00217 	ldw	ra,8(sp)
    3af4:	dc400117 	ldw	r17,4(sp)
    3af8:	dc000017 	ldw	r16,0(sp)
    3afc:	dec00304 	addi	sp,sp,12
    3b00:	f800283a 	ret
    3b04:	80c00017 	ldw	r3,0(r16)
    3b08:	183ff926 	beq	r3,zero,3af0 <__alt_mem_Flash_flash_data+0xf4003af0>
    3b0c:	88c00015 	stw	r3,0(r17)
    3b10:	003ff706 	br	3af0 <__alt_mem_Flash_flash_data+0xf4003af0>

00003b14 <udivmodsi4>:
    3b14:	2900182e 	bgeu	r5,r4,3b78 <udivmodsi4+0x64>
    3b18:	28001716 	blt	r5,zero,3b78 <udivmodsi4+0x64>
    3b1c:	00800804 	movi	r2,32
    3b20:	00c00044 	movi	r3,1
    3b24:	00000206 	br	3b30 <udivmodsi4+0x1c>
    3b28:	10001126 	beq	r2,zero,3b70 <udivmodsi4+0x5c>
    3b2c:	28000516 	blt	r5,zero,3b44 <udivmodsi4+0x30>
    3b30:	294b883a 	add	r5,r5,r5
    3b34:	10bfffc4 	addi	r2,r2,-1
    3b38:	18c7883a 	add	r3,r3,r3
    3b3c:	293ffa36 	bltu	r5,r4,3b28 <__alt_mem_Flash_flash_data+0xf4003b28>
    3b40:	18000b26 	beq	r3,zero,3b70 <udivmodsi4+0x5c>
    3b44:	0005883a 	mov	r2,zero
    3b48:	21400236 	bltu	r4,r5,3b54 <udivmodsi4+0x40>
    3b4c:	2149c83a 	sub	r4,r4,r5
    3b50:	10c4b03a 	or	r2,r2,r3
    3b54:	1806d07a 	srli	r3,r3,1
    3b58:	280ad07a 	srli	r5,r5,1
    3b5c:	183ffa1e 	bne	r3,zero,3b48 <__alt_mem_Flash_flash_data+0xf4003b48>
    3b60:	3000011e 	bne	r6,zero,3b68 <udivmodsi4+0x54>
    3b64:	f800283a 	ret
    3b68:	2005883a 	mov	r2,r4
    3b6c:	f800283a 	ret
    3b70:	0005883a 	mov	r2,zero
    3b74:	003ffa06 	br	3b60 <__alt_mem_Flash_flash_data+0xf4003b60>
    3b78:	00c00044 	movi	r3,1
    3b7c:	003ff106 	br	3b44 <__alt_mem_Flash_flash_data+0xf4003b44>

00003b80 <__divsi3>:
    3b80:	defffe04 	addi	sp,sp,-8
    3b84:	dfc00115 	stw	ra,4(sp)
    3b88:	dc000015 	stw	r16,0(sp)
    3b8c:	20000b16 	blt	r4,zero,3bbc <__divsi3+0x3c>
    3b90:	0021883a 	mov	r16,zero
    3b94:	28000c16 	blt	r5,zero,3bc8 <__divsi3+0x48>
    3b98:	000d883a 	mov	r6,zero
    3b9c:	0003b140 	call	3b14 <udivmodsi4>
    3ba0:	0407c83a 	sub	r3,zero,r16
    3ba4:	1884f03a 	xor	r2,r3,r2
    3ba8:	1405883a 	add	r2,r2,r16
    3bac:	dfc00117 	ldw	ra,4(sp)
    3bb0:	dc000017 	ldw	r16,0(sp)
    3bb4:	dec00204 	addi	sp,sp,8
    3bb8:	f800283a 	ret
    3bbc:	0109c83a 	sub	r4,zero,r4
    3bc0:	04000044 	movi	r16,1
    3bc4:	283ff40e 	bge	r5,zero,3b98 <__alt_mem_Flash_flash_data+0xf4003b98>
    3bc8:	014bc83a 	sub	r5,zero,r5
    3bcc:	8400005c 	xori	r16,r16,1
    3bd0:	003ff106 	br	3b98 <__alt_mem_Flash_flash_data+0xf4003b98>

00003bd4 <__modsi3>:
    3bd4:	defffd04 	addi	sp,sp,-12
    3bd8:	dfc00215 	stw	ra,8(sp)
    3bdc:	dc400115 	stw	r17,4(sp)
    3be0:	dc000015 	stw	r16,0(sp)
    3be4:	20000c16 	blt	r4,zero,3c18 <__modsi3+0x44>
    3be8:	0023883a 	mov	r17,zero
    3bec:	0021883a 	mov	r16,zero
    3bf0:	28000d16 	blt	r5,zero,3c28 <__modsi3+0x54>
    3bf4:	01800044 	movi	r6,1
    3bf8:	0003b140 	call	3b14 <udivmodsi4>
    3bfc:	1404f03a 	xor	r2,r2,r16
    3c00:	8885883a 	add	r2,r17,r2
    3c04:	dfc00217 	ldw	ra,8(sp)
    3c08:	dc400117 	ldw	r17,4(sp)
    3c0c:	dc000017 	ldw	r16,0(sp)
    3c10:	dec00304 	addi	sp,sp,12
    3c14:	f800283a 	ret
    3c18:	0109c83a 	sub	r4,zero,r4
    3c1c:	04400044 	movi	r17,1
    3c20:	043fffc4 	movi	r16,-1
    3c24:	283ff30e 	bge	r5,zero,3bf4 <__alt_mem_Flash_flash_data+0xf4003bf4>
    3c28:	014bc83a 	sub	r5,zero,r5
    3c2c:	003ff106 	br	3bf4 <__alt_mem_Flash_flash_data+0xf4003bf4>

00003c30 <__udivsi3>:
    3c30:	000d883a 	mov	r6,zero
    3c34:	0003b141 	jmpi	3b14 <udivmodsi4>

00003c38 <__umodsi3>:
    3c38:	01800044 	movi	r6,1
    3c3c:	0003b141 	jmpi	3b14 <udivmodsi4>

00003c40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3c40:	defffe04 	addi	sp,sp,-8
    3c44:	dfc00115 	stw	ra,4(sp)
    3c48:	df000015 	stw	fp,0(sp)
    3c4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3c50:	00800074 	movhi	r2,1
    3c54:	10893c04 	addi	r2,r2,9456
    3c58:	10800017 	ldw	r2,0(r2)
    3c5c:	10000526 	beq	r2,zero,3c74 <alt_get_errno+0x34>
    3c60:	00800074 	movhi	r2,1
    3c64:	10893c04 	addi	r2,r2,9456
    3c68:	10800017 	ldw	r2,0(r2)
    3c6c:	103ee83a 	callr	r2
    3c70:	00000206 	br	3c7c <alt_get_errno+0x3c>
    3c74:	00800074 	movhi	r2,1
    3c78:	10912204 	addi	r2,r2,17544
}
    3c7c:	e037883a 	mov	sp,fp
    3c80:	dfc00117 	ldw	ra,4(sp)
    3c84:	df000017 	ldw	fp,0(sp)
    3c88:	dec00204 	addi	sp,sp,8
    3c8c:	f800283a 	ret

00003c90 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    3c90:	defffb04 	addi	sp,sp,-20
    3c94:	dfc00415 	stw	ra,16(sp)
    3c98:	df000315 	stw	fp,12(sp)
    3c9c:	df000304 	addi	fp,sp,12
    3ca0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    3ca4:	e0bfff17 	ldw	r2,-4(fp)
    3ca8:	10000616 	blt	r2,zero,3cc4 <close+0x34>
    3cac:	e0bfff17 	ldw	r2,-4(fp)
    3cb0:	10c00324 	muli	r3,r2,12
    3cb4:	00800074 	movhi	r2,1
    3cb8:	1083cc04 	addi	r2,r2,3888
    3cbc:	1885883a 	add	r2,r3,r2
    3cc0:	00000106 	br	3cc8 <close+0x38>
    3cc4:	0005883a 	mov	r2,zero
    3cc8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    3ccc:	e0bffd17 	ldw	r2,-12(fp)
    3cd0:	10001926 	beq	r2,zero,3d38 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    3cd4:	e0bffd17 	ldw	r2,-12(fp)
    3cd8:	10800017 	ldw	r2,0(r2)
    3cdc:	10800417 	ldw	r2,16(r2)
    3ce0:	10000626 	beq	r2,zero,3cfc <close+0x6c>
    3ce4:	e0bffd17 	ldw	r2,-12(fp)
    3ce8:	10800017 	ldw	r2,0(r2)
    3cec:	10800417 	ldw	r2,16(r2)
    3cf0:	e13ffd17 	ldw	r4,-12(fp)
    3cf4:	103ee83a 	callr	r2
    3cf8:	00000106 	br	3d00 <close+0x70>
    3cfc:	0005883a 	mov	r2,zero
    3d00:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    3d04:	e13fff17 	ldw	r4,-4(fp)
    3d08:	00043a80 	call	43a8 <alt_release_fd>
    if (rval < 0)
    3d0c:	e0bffe17 	ldw	r2,-8(fp)
    3d10:	1000070e 	bge	r2,zero,3d30 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    3d14:	0003c400 	call	3c40 <alt_get_errno>
    3d18:	1007883a 	mov	r3,r2
    3d1c:	e0bffe17 	ldw	r2,-8(fp)
    3d20:	0085c83a 	sub	r2,zero,r2
    3d24:	18800015 	stw	r2,0(r3)
      return -1;
    3d28:	00bfffc4 	movi	r2,-1
    3d2c:	00000706 	br	3d4c <close+0xbc>
    }
    return 0;
    3d30:	0005883a 	mov	r2,zero
    3d34:	00000506 	br	3d4c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3d38:	0003c400 	call	3c40 <alt_get_errno>
    3d3c:	1007883a 	mov	r3,r2
    3d40:	00801444 	movi	r2,81
    3d44:	18800015 	stw	r2,0(r3)
    return -1;
    3d48:	00bfffc4 	movi	r2,-1
  }
}
    3d4c:	e037883a 	mov	sp,fp
    3d50:	dfc00117 	ldw	ra,4(sp)
    3d54:	df000017 	ldw	fp,0(sp)
    3d58:	dec00204 	addi	sp,sp,8
    3d5c:	f800283a 	ret

00003d60 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    3d60:	defffc04 	addi	sp,sp,-16
    3d64:	df000315 	stw	fp,12(sp)
    3d68:	df000304 	addi	fp,sp,12
    3d6c:	e13ffd15 	stw	r4,-12(fp)
    3d70:	e17ffe15 	stw	r5,-8(fp)
    3d74:	e1bfff15 	stw	r6,-4(fp)
  return len;
    3d78:	e0bfff17 	ldw	r2,-4(fp)
}
    3d7c:	e037883a 	mov	sp,fp
    3d80:	df000017 	ldw	fp,0(sp)
    3d84:	dec00104 	addi	sp,sp,4
    3d88:	f800283a 	ret

00003d8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3d8c:	defffe04 	addi	sp,sp,-8
    3d90:	dfc00115 	stw	ra,4(sp)
    3d94:	df000015 	stw	fp,0(sp)
    3d98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3d9c:	00800074 	movhi	r2,1
    3da0:	10893c04 	addi	r2,r2,9456
    3da4:	10800017 	ldw	r2,0(r2)
    3da8:	10000526 	beq	r2,zero,3dc0 <alt_get_errno+0x34>
    3dac:	00800074 	movhi	r2,1
    3db0:	10893c04 	addi	r2,r2,9456
    3db4:	10800017 	ldw	r2,0(r2)
    3db8:	103ee83a 	callr	r2
    3dbc:	00000206 	br	3dc8 <alt_get_errno+0x3c>
    3dc0:	00800074 	movhi	r2,1
    3dc4:	10912204 	addi	r2,r2,17544
}
    3dc8:	e037883a 	mov	sp,fp
    3dcc:	dfc00117 	ldw	ra,4(sp)
    3dd0:	df000017 	ldw	fp,0(sp)
    3dd4:	dec00204 	addi	sp,sp,8
    3dd8:	f800283a 	ret

00003ddc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    3ddc:	defffb04 	addi	sp,sp,-20
    3de0:	dfc00415 	stw	ra,16(sp)
    3de4:	df000315 	stw	fp,12(sp)
    3de8:	df000304 	addi	fp,sp,12
    3dec:	e13ffe15 	stw	r4,-8(fp)
    3df0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3df4:	e0bffe17 	ldw	r2,-8(fp)
    3df8:	10000616 	blt	r2,zero,3e14 <fstat+0x38>
    3dfc:	e0bffe17 	ldw	r2,-8(fp)
    3e00:	10c00324 	muli	r3,r2,12
    3e04:	00800074 	movhi	r2,1
    3e08:	1083cc04 	addi	r2,r2,3888
    3e0c:	1885883a 	add	r2,r3,r2
    3e10:	00000106 	br	3e18 <fstat+0x3c>
    3e14:	0005883a 	mov	r2,zero
    3e18:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    3e1c:	e0bffd17 	ldw	r2,-12(fp)
    3e20:	10001026 	beq	r2,zero,3e64 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    3e24:	e0bffd17 	ldw	r2,-12(fp)
    3e28:	10800017 	ldw	r2,0(r2)
    3e2c:	10800817 	ldw	r2,32(r2)
    3e30:	10000726 	beq	r2,zero,3e50 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    3e34:	e0bffd17 	ldw	r2,-12(fp)
    3e38:	10800017 	ldw	r2,0(r2)
    3e3c:	10800817 	ldw	r2,32(r2)
    3e40:	e13ffd17 	ldw	r4,-12(fp)
    3e44:	e17fff17 	ldw	r5,-4(fp)
    3e48:	103ee83a 	callr	r2
    3e4c:	00000a06 	br	3e78 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    3e50:	e0bfff17 	ldw	r2,-4(fp)
    3e54:	00c80004 	movi	r3,8192
    3e58:	10c00115 	stw	r3,4(r2)
      return 0;
    3e5c:	0005883a 	mov	r2,zero
    3e60:	00000506 	br	3e78 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3e64:	0003d8c0 	call	3d8c <alt_get_errno>
    3e68:	1007883a 	mov	r3,r2
    3e6c:	00801444 	movi	r2,81
    3e70:	18800015 	stw	r2,0(r3)
    return -1;
    3e74:	00bfffc4 	movi	r2,-1
  }
}
    3e78:	e037883a 	mov	sp,fp
    3e7c:	dfc00117 	ldw	ra,4(sp)
    3e80:	df000017 	ldw	fp,0(sp)
    3e84:	dec00204 	addi	sp,sp,8
    3e88:	f800283a 	ret

00003e8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3e8c:	defffe04 	addi	sp,sp,-8
    3e90:	dfc00115 	stw	ra,4(sp)
    3e94:	df000015 	stw	fp,0(sp)
    3e98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3e9c:	00800074 	movhi	r2,1
    3ea0:	10893c04 	addi	r2,r2,9456
    3ea4:	10800017 	ldw	r2,0(r2)
    3ea8:	10000526 	beq	r2,zero,3ec0 <alt_get_errno+0x34>
    3eac:	00800074 	movhi	r2,1
    3eb0:	10893c04 	addi	r2,r2,9456
    3eb4:	10800017 	ldw	r2,0(r2)
    3eb8:	103ee83a 	callr	r2
    3ebc:	00000206 	br	3ec8 <alt_get_errno+0x3c>
    3ec0:	00800074 	movhi	r2,1
    3ec4:	10912204 	addi	r2,r2,17544
}
    3ec8:	e037883a 	mov	sp,fp
    3ecc:	dfc00117 	ldw	ra,4(sp)
    3ed0:	df000017 	ldw	fp,0(sp)
    3ed4:	dec00204 	addi	sp,sp,8
    3ed8:	f800283a 	ret

00003edc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    3edc:	deffed04 	addi	sp,sp,-76
    3ee0:	dfc01215 	stw	ra,72(sp)
    3ee4:	df001115 	stw	fp,68(sp)
    3ee8:	df001104 	addi	fp,sp,68
    3eec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3ef0:	e0bfff17 	ldw	r2,-4(fp)
    3ef4:	10000616 	blt	r2,zero,3f10 <isatty+0x34>
    3ef8:	e0bfff17 	ldw	r2,-4(fp)
    3efc:	10c00324 	muli	r3,r2,12
    3f00:	00800074 	movhi	r2,1
    3f04:	1083cc04 	addi	r2,r2,3888
    3f08:	1885883a 	add	r2,r3,r2
    3f0c:	00000106 	br	3f14 <isatty+0x38>
    3f10:	0005883a 	mov	r2,zero
    3f14:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    3f18:	e0bfef17 	ldw	r2,-68(fp)
    3f1c:	10000e26 	beq	r2,zero,3f58 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    3f20:	e0bfef17 	ldw	r2,-68(fp)
    3f24:	10800017 	ldw	r2,0(r2)
    3f28:	10800817 	ldw	r2,32(r2)
    3f2c:	1000021e 	bne	r2,zero,3f38 <isatty+0x5c>
    {
      return 1;
    3f30:	00800044 	movi	r2,1
    3f34:	00000d06 	br	3f6c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    3f38:	e0bff004 	addi	r2,fp,-64
    3f3c:	e13fff17 	ldw	r4,-4(fp)
    3f40:	100b883a 	mov	r5,r2
    3f44:	0003ddc0 	call	3ddc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    3f48:	e0bff117 	ldw	r2,-60(fp)
    3f4c:	10880020 	cmpeqi	r2,r2,8192
    3f50:	10803fcc 	andi	r2,r2,255
    3f54:	00000506 	br	3f6c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3f58:	0003e8c0 	call	3e8c <alt_get_errno>
    3f5c:	1007883a 	mov	r3,r2
    3f60:	00801444 	movi	r2,81
    3f64:	18800015 	stw	r2,0(r3)
    return 0;
    3f68:	0005883a 	mov	r2,zero
  }
}
    3f6c:	e037883a 	mov	sp,fp
    3f70:	dfc00117 	ldw	ra,4(sp)
    3f74:	df000017 	ldw	fp,0(sp)
    3f78:	dec00204 	addi	sp,sp,8
    3f7c:	f800283a 	ret

00003f80 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    3f80:	defffc04 	addi	sp,sp,-16
    3f84:	df000315 	stw	fp,12(sp)
    3f88:	df000304 	addi	fp,sp,12
    3f8c:	e13ffd15 	stw	r4,-12(fp)
    3f90:	e17ffe15 	stw	r5,-8(fp)
    3f94:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    3f98:	e0fffe17 	ldw	r3,-8(fp)
    3f9c:	e0bffd17 	ldw	r2,-12(fp)
    3fa0:	18800c26 	beq	r3,r2,3fd4 <alt_load_section+0x54>
  {
    while( to != end )
    3fa4:	00000806 	br	3fc8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    3fa8:	e0bffe17 	ldw	r2,-8(fp)
    3fac:	10c00104 	addi	r3,r2,4
    3fb0:	e0fffe15 	stw	r3,-8(fp)
    3fb4:	e0fffd17 	ldw	r3,-12(fp)
    3fb8:	19000104 	addi	r4,r3,4
    3fbc:	e13ffd15 	stw	r4,-12(fp)
    3fc0:	18c00017 	ldw	r3,0(r3)
    3fc4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    3fc8:	e0fffe17 	ldw	r3,-8(fp)
    3fcc:	e0bfff17 	ldw	r2,-4(fp)
    3fd0:	18bff51e 	bne	r3,r2,3fa8 <__alt_mem_Flash_flash_data+0xf4003fa8>
    {
      *to++ = *from++;
    }
  }
}
    3fd4:	e037883a 	mov	sp,fp
    3fd8:	df000017 	ldw	fp,0(sp)
    3fdc:	dec00104 	addi	sp,sp,4
    3fe0:	f800283a 	ret

00003fe4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    3fe4:	defffe04 	addi	sp,sp,-8
    3fe8:	dfc00115 	stw	ra,4(sp)
    3fec:	df000015 	stw	fp,0(sp)
    3ff0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    3ff4:	01000074 	movhi	r4,1
    3ff8:	21096004 	addi	r4,r4,9600
    3ffc:	01400074 	movhi	r5,1
    4000:	2941b704 	addi	r5,r5,1756
    4004:	01800074 	movhi	r6,1
    4008:	31896004 	addi	r6,r6,9600
    400c:	0003f800 	call	3f80 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4010:	01000034 	movhi	r4,0
    4014:	21000804 	addi	r4,r4,32
    4018:	01400034 	movhi	r5,0
    401c:	29400804 	addi	r5,r5,32
    4020:	01800034 	movhi	r6,0
    4024:	31809104 	addi	r6,r6,580
    4028:	0003f800 	call	3f80 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    402c:	01000074 	movhi	r4,1
    4030:	2100d804 	addi	r4,r4,864
    4034:	01400074 	movhi	r5,1
    4038:	2940d804 	addi	r5,r5,864
    403c:	01800074 	movhi	r6,1
    4040:	3181b704 	addi	r6,r6,1756
    4044:	0003f800 	call	3f80 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4048:	000ef040 	call	ef04 <alt_dcache_flush_all>
  alt_icache_flush_all();
    404c:	000f15c0 	call	f15c <alt_icache_flush_all>
}
    4050:	e037883a 	mov	sp,fp
    4054:	dfc00117 	ldw	ra,4(sp)
    4058:	df000017 	ldw	fp,0(sp)
    405c:	dec00204 	addi	sp,sp,8
    4060:	f800283a 	ret

00004064 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4064:	defffe04 	addi	sp,sp,-8
    4068:	dfc00115 	stw	ra,4(sp)
    406c:	df000015 	stw	fp,0(sp)
    4070:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4074:	00800074 	movhi	r2,1
    4078:	10893c04 	addi	r2,r2,9456
    407c:	10800017 	ldw	r2,0(r2)
    4080:	10000526 	beq	r2,zero,4098 <alt_get_errno+0x34>
    4084:	00800074 	movhi	r2,1
    4088:	10893c04 	addi	r2,r2,9456
    408c:	10800017 	ldw	r2,0(r2)
    4090:	103ee83a 	callr	r2
    4094:	00000206 	br	40a0 <alt_get_errno+0x3c>
    4098:	00800074 	movhi	r2,1
    409c:	10912204 	addi	r2,r2,17544
}
    40a0:	e037883a 	mov	sp,fp
    40a4:	dfc00117 	ldw	ra,4(sp)
    40a8:	df000017 	ldw	fp,0(sp)
    40ac:	dec00204 	addi	sp,sp,8
    40b0:	f800283a 	ret

000040b4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    40b4:	defff904 	addi	sp,sp,-28
    40b8:	dfc00615 	stw	ra,24(sp)
    40bc:	df000515 	stw	fp,20(sp)
    40c0:	df000504 	addi	fp,sp,20
    40c4:	e13ffd15 	stw	r4,-12(fp)
    40c8:	e17ffe15 	stw	r5,-8(fp)
    40cc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    40d0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    40d4:	e0bffd17 	ldw	r2,-12(fp)
    40d8:	10000616 	blt	r2,zero,40f4 <lseek+0x40>
    40dc:	e0bffd17 	ldw	r2,-12(fp)
    40e0:	10c00324 	muli	r3,r2,12
    40e4:	00800074 	movhi	r2,1
    40e8:	1083cc04 	addi	r2,r2,3888
    40ec:	1885883a 	add	r2,r3,r2
    40f0:	00000106 	br	40f8 <lseek+0x44>
    40f4:	0005883a 	mov	r2,zero
    40f8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    40fc:	e0bffc17 	ldw	r2,-16(fp)
    4100:	10001026 	beq	r2,zero,4144 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    4104:	e0bffc17 	ldw	r2,-16(fp)
    4108:	10800017 	ldw	r2,0(r2)
    410c:	10800717 	ldw	r2,28(r2)
    4110:	10000926 	beq	r2,zero,4138 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    4114:	e0bffc17 	ldw	r2,-16(fp)
    4118:	10800017 	ldw	r2,0(r2)
    411c:	10800717 	ldw	r2,28(r2)
    4120:	e13ffc17 	ldw	r4,-16(fp)
    4124:	e17ffe17 	ldw	r5,-8(fp)
    4128:	e1bfff17 	ldw	r6,-4(fp)
    412c:	103ee83a 	callr	r2
    4130:	e0bffb15 	stw	r2,-20(fp)
    4134:	00000506 	br	414c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    4138:	00bfde84 	movi	r2,-134
    413c:	e0bffb15 	stw	r2,-20(fp)
    4140:	00000206 	br	414c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    4144:	00bfebc4 	movi	r2,-81
    4148:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    414c:	e0bffb17 	ldw	r2,-20(fp)
    4150:	1000070e 	bge	r2,zero,4170 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    4154:	00040640 	call	4064 <alt_get_errno>
    4158:	1007883a 	mov	r3,r2
    415c:	e0bffb17 	ldw	r2,-20(fp)
    4160:	0085c83a 	sub	r2,zero,r2
    4164:	18800015 	stw	r2,0(r3)
    rc = -1;
    4168:	00bfffc4 	movi	r2,-1
    416c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    4170:	e0bffb17 	ldw	r2,-20(fp)
}
    4174:	e037883a 	mov	sp,fp
    4178:	dfc00117 	ldw	ra,4(sp)
    417c:	df000017 	ldw	fp,0(sp)
    4180:	dec00204 	addi	sp,sp,8
    4184:	f800283a 	ret

00004188 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4188:	defff904 	addi	sp,sp,-28
    418c:	dfc00615 	stw	ra,24(sp)
    4190:	df000515 	stw	fp,20(sp)
    4194:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4198:	0009883a 	mov	r4,zero
    419c:	000c5d40 	call	c5d4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    41a0:	00051780 	call	5178 <OSInit>
    41a4:	01000044 	movi	r4,1
    41a8:	0009ce80 	call	9ce8 <OSSemCreate>
    41ac:	1007883a 	mov	r3,r2
    41b0:	00800074 	movhi	r2,1
    41b4:	10912804 	addi	r2,r2,17568
    41b8:	10c00015 	stw	r3,0(r2)
    41bc:	01000044 	movi	r4,1
    41c0:	0009ce80 	call	9ce8 <OSSemCreate>
    41c4:	1007883a 	mov	r3,r2
    41c8:	00800074 	movhi	r2,1
    41cc:	10912a04 	addi	r2,r2,17576
    41d0:	10c00015 	stw	r3,0(r2)
    41d4:	00800074 	movhi	r2,1
    41d8:	10912304 	addi	r2,r2,17548
    41dc:	e0bffc15 	stw	r2,-16(fp)
    41e0:	00800044 	movi	r2,1
    41e4:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    41e8:	e0bffd0b 	ldhu	r2,-12(fp)
    41ec:	1009883a 	mov	r4,r2
    41f0:	0009ce80 	call	9ce8 <OSSemCreate>
    41f4:	1007883a 	mov	r3,r2
    41f8:	e0bffc17 	ldw	r2,-16(fp)
    41fc:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4200:	000c6080 	call	c608 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    4204:	01000074 	movhi	r4,1
    4208:	2100ff04 	addi	r4,r4,1020
    420c:	01400074 	movhi	r5,1
    4210:	2940ff04 	addi	r5,r5,1020
    4214:	01800074 	movhi	r6,1
    4218:	3180ff04 	addi	r6,r6,1020
    421c:	000f24c0 	call	f24c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    4220:	000f0140 	call	f014 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    4224:	01000074 	movhi	r4,1
    4228:	213c1c04 	addi	r4,r4,-3984
    422c:	000ff100 	call	ff10 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    4230:	d127fc17 	ldw	r4,-24592(gp)
    4234:	d0e7fd17 	ldw	r3,-24588(gp)
    4238:	d0a7fe17 	ldw	r2,-24584(gp)
    423c:	180b883a 	mov	r5,r3
    4240:	100d883a 	mov	r6,r2
    4244:	0000d000 	call	d00 <main>
    4248:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    424c:	01000044 	movi	r4,1
    4250:	0003c900 	call	3c90 <close>
  exit (result);
    4254:	e13ffb17 	ldw	r4,-20(fp)
    4258:	000ff240 	call	ff24 <exit>

0000425c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    425c:	defffe04 	addi	sp,sp,-8
    4260:	dfc00115 	stw	ra,4(sp)
    4264:	df000015 	stw	fp,0(sp)
    4268:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    426c:	00800074 	movhi	r2,1
    4270:	10893c04 	addi	r2,r2,9456
    4274:	10800017 	ldw	r2,0(r2)
    4278:	10000526 	beq	r2,zero,4290 <alt_get_errno+0x34>
    427c:	00800074 	movhi	r2,1
    4280:	10893c04 	addi	r2,r2,9456
    4284:	10800017 	ldw	r2,0(r2)
    4288:	103ee83a 	callr	r2
    428c:	00000206 	br	4298 <alt_get_errno+0x3c>
    4290:	00800074 	movhi	r2,1
    4294:	10912204 	addi	r2,r2,17544
}
    4298:	e037883a 	mov	sp,fp
    429c:	dfc00117 	ldw	ra,4(sp)
    42a0:	df000017 	ldw	fp,0(sp)
    42a4:	dec00204 	addi	sp,sp,8
    42a8:	f800283a 	ret

000042ac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    42ac:	defff904 	addi	sp,sp,-28
    42b0:	dfc00615 	stw	ra,24(sp)
    42b4:	df000515 	stw	fp,20(sp)
    42b8:	df000504 	addi	fp,sp,20
    42bc:	e13ffd15 	stw	r4,-12(fp)
    42c0:	e17ffe15 	stw	r5,-8(fp)
    42c4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    42c8:	e0bffd17 	ldw	r2,-12(fp)
    42cc:	10000616 	blt	r2,zero,42e8 <read+0x3c>
    42d0:	e0bffd17 	ldw	r2,-12(fp)
    42d4:	10c00324 	muli	r3,r2,12
    42d8:	00800074 	movhi	r2,1
    42dc:	1083cc04 	addi	r2,r2,3888
    42e0:	1885883a 	add	r2,r3,r2
    42e4:	00000106 	br	42ec <read+0x40>
    42e8:	0005883a 	mov	r2,zero
    42ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    42f0:	e0bffb17 	ldw	r2,-20(fp)
    42f4:	10002226 	beq	r2,zero,4380 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    42f8:	e0bffb17 	ldw	r2,-20(fp)
    42fc:	10800217 	ldw	r2,8(r2)
    4300:	108000cc 	andi	r2,r2,3
    4304:	10800060 	cmpeqi	r2,r2,1
    4308:	1000181e 	bne	r2,zero,436c <read+0xc0>
        (fd->dev->read))
    430c:	e0bffb17 	ldw	r2,-20(fp)
    4310:	10800017 	ldw	r2,0(r2)
    4314:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    4318:	10001426 	beq	r2,zero,436c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    431c:	e0bffb17 	ldw	r2,-20(fp)
    4320:	10800017 	ldw	r2,0(r2)
    4324:	10800517 	ldw	r2,20(r2)
    4328:	e0ffff17 	ldw	r3,-4(fp)
    432c:	e13ffb17 	ldw	r4,-20(fp)
    4330:	e17ffe17 	ldw	r5,-8(fp)
    4334:	180d883a 	mov	r6,r3
    4338:	103ee83a 	callr	r2
    433c:	e0bffc15 	stw	r2,-16(fp)
    4340:	e0bffc17 	ldw	r2,-16(fp)
    4344:	1000070e 	bge	r2,zero,4364 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    4348:	000425c0 	call	425c <alt_get_errno>
    434c:	1007883a 	mov	r3,r2
    4350:	e0bffc17 	ldw	r2,-16(fp)
    4354:	0085c83a 	sub	r2,zero,r2
    4358:	18800015 	stw	r2,0(r3)
          return -1;
    435c:	00bfffc4 	movi	r2,-1
    4360:	00000c06 	br	4394 <read+0xe8>
        }
        return rval;
    4364:	e0bffc17 	ldw	r2,-16(fp)
    4368:	00000a06 	br	4394 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    436c:	000425c0 	call	425c <alt_get_errno>
    4370:	1007883a 	mov	r3,r2
    4374:	00800344 	movi	r2,13
    4378:	18800015 	stw	r2,0(r3)
    437c:	00000406 	br	4390 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    4380:	000425c0 	call	425c <alt_get_errno>
    4384:	1007883a 	mov	r3,r2
    4388:	00801444 	movi	r2,81
    438c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    4390:	00bfffc4 	movi	r2,-1
}
    4394:	e037883a 	mov	sp,fp
    4398:	dfc00117 	ldw	ra,4(sp)
    439c:	df000017 	ldw	fp,0(sp)
    43a0:	dec00204 	addi	sp,sp,8
    43a4:	f800283a 	ret

000043a8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    43a8:	defffe04 	addi	sp,sp,-8
    43ac:	df000115 	stw	fp,4(sp)
    43b0:	df000104 	addi	fp,sp,4
    43b4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    43b8:	e0bfff17 	ldw	r2,-4(fp)
    43bc:	108000d0 	cmplti	r2,r2,3
    43c0:	10000d1e 	bne	r2,zero,43f8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    43c4:	00800074 	movhi	r2,1
    43c8:	1083cc04 	addi	r2,r2,3888
    43cc:	e0ffff17 	ldw	r3,-4(fp)
    43d0:	18c00324 	muli	r3,r3,12
    43d4:	18c00204 	addi	r3,r3,8
    43d8:	10c5883a 	add	r2,r2,r3
    43dc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    43e0:	00800074 	movhi	r2,1
    43e4:	1083cc04 	addi	r2,r2,3888
    43e8:	e0ffff17 	ldw	r3,-4(fp)
    43ec:	18c00324 	muli	r3,r3,12
    43f0:	10c5883a 	add	r2,r2,r3
    43f4:	10000015 	stw	zero,0(r2)
  }
}
    43f8:	e037883a 	mov	sp,fp
    43fc:	df000017 	ldw	fp,0(sp)
    4400:	dec00104 	addi	sp,sp,4
    4404:	f800283a 	ret

00004408 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    4408:	defff904 	addi	sp,sp,-28
    440c:	df000615 	stw	fp,24(sp)
    4410:	df000604 	addi	fp,sp,24
    4414:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4418:	0005303a 	rdctl	r2,status
    441c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4420:	e0fffc17 	ldw	r3,-16(fp)
    4424:	00bfff84 	movi	r2,-2
    4428:	1884703a 	and	r2,r3,r2
    442c:	1001703a 	wrctl	status,r2
  
  return context;
    4430:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    4434:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    4438:	d0a01517 	ldw	r2,-32684(gp)
    443c:	10c000c4 	addi	r3,r2,3
    4440:	00bfff04 	movi	r2,-4
    4444:	1884703a 	and	r2,r3,r2
    4448:	d0a01515 	stw	r2,-32684(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    444c:	d0e01517 	ldw	r3,-32684(gp)
    4450:	e0bfff17 	ldw	r2,-4(fp)
    4454:	1887883a 	add	r3,r3,r2
    4458:	00810034 	movhi	r2,1024
    445c:	10800004 	addi	r2,r2,0
    4460:	10c0062e 	bgeu	r2,r3,447c <sbrk+0x74>
    4464:	e0bffa17 	ldw	r2,-24(fp)
    4468:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    446c:	e0bffd17 	ldw	r2,-12(fp)
    4470:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    4474:	00bfffc4 	movi	r2,-1
    4478:	00000b06 	br	44a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    447c:	d0a01517 	ldw	r2,-32684(gp)
    4480:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    4484:	d0e01517 	ldw	r3,-32684(gp)
    4488:	e0bfff17 	ldw	r2,-4(fp)
    448c:	1885883a 	add	r2,r3,r2
    4490:	d0a01515 	stw	r2,-32684(gp)
    4494:	e0bffa17 	ldw	r2,-24(fp)
    4498:	e0bffe15 	stw	r2,-8(fp)
    449c:	e0bffe17 	ldw	r2,-8(fp)
    44a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    44a4:	e0bffb17 	ldw	r2,-20(fp)
} 
    44a8:	e037883a 	mov	sp,fp
    44ac:	df000017 	ldw	fp,0(sp)
    44b0:	dec00104 	addi	sp,sp,4
    44b4:	f800283a 	ret

000044b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    44b8:	defffe04 	addi	sp,sp,-8
    44bc:	dfc00115 	stw	ra,4(sp)
    44c0:	df000015 	stw	fp,0(sp)
    44c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    44c8:	00800074 	movhi	r2,1
    44cc:	10893c04 	addi	r2,r2,9456
    44d0:	10800017 	ldw	r2,0(r2)
    44d4:	10000526 	beq	r2,zero,44ec <alt_get_errno+0x34>
    44d8:	00800074 	movhi	r2,1
    44dc:	10893c04 	addi	r2,r2,9456
    44e0:	10800017 	ldw	r2,0(r2)
    44e4:	103ee83a 	callr	r2
    44e8:	00000206 	br	44f4 <alt_get_errno+0x3c>
    44ec:	00800074 	movhi	r2,1
    44f0:	10912204 	addi	r2,r2,17544
}
    44f4:	e037883a 	mov	sp,fp
    44f8:	dfc00117 	ldw	ra,4(sp)
    44fc:	df000017 	ldw	fp,0(sp)
    4500:	dec00204 	addi	sp,sp,8
    4504:	f800283a 	ret

00004508 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4508:	defff904 	addi	sp,sp,-28
    450c:	dfc00615 	stw	ra,24(sp)
    4510:	df000515 	stw	fp,20(sp)
    4514:	df000504 	addi	fp,sp,20
    4518:	e13ffd15 	stw	r4,-12(fp)
    451c:	e17ffe15 	stw	r5,-8(fp)
    4520:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4524:	e0bffd17 	ldw	r2,-12(fp)
    4528:	10000616 	blt	r2,zero,4544 <write+0x3c>
    452c:	e0bffd17 	ldw	r2,-12(fp)
    4530:	10c00324 	muli	r3,r2,12
    4534:	00800074 	movhi	r2,1
    4538:	1083cc04 	addi	r2,r2,3888
    453c:	1885883a 	add	r2,r3,r2
    4540:	00000106 	br	4548 <write+0x40>
    4544:	0005883a 	mov	r2,zero
    4548:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    454c:	e0bffb17 	ldw	r2,-20(fp)
    4550:	10002126 	beq	r2,zero,45d8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    4554:	e0bffb17 	ldw	r2,-20(fp)
    4558:	10800217 	ldw	r2,8(r2)
    455c:	108000cc 	andi	r2,r2,3
    4560:	10001826 	beq	r2,zero,45c4 <write+0xbc>
    4564:	e0bffb17 	ldw	r2,-20(fp)
    4568:	10800017 	ldw	r2,0(r2)
    456c:	10800617 	ldw	r2,24(r2)
    4570:	10001426 	beq	r2,zero,45c4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    4574:	e0bffb17 	ldw	r2,-20(fp)
    4578:	10800017 	ldw	r2,0(r2)
    457c:	10800617 	ldw	r2,24(r2)
    4580:	e0ffff17 	ldw	r3,-4(fp)
    4584:	e13ffb17 	ldw	r4,-20(fp)
    4588:	e17ffe17 	ldw	r5,-8(fp)
    458c:	180d883a 	mov	r6,r3
    4590:	103ee83a 	callr	r2
    4594:	e0bffc15 	stw	r2,-16(fp)
    4598:	e0bffc17 	ldw	r2,-16(fp)
    459c:	1000070e 	bge	r2,zero,45bc <write+0xb4>
      {
        ALT_ERRNO = -rval;
    45a0:	00044b80 	call	44b8 <alt_get_errno>
    45a4:	1007883a 	mov	r3,r2
    45a8:	e0bffc17 	ldw	r2,-16(fp)
    45ac:	0085c83a 	sub	r2,zero,r2
    45b0:	18800015 	stw	r2,0(r3)
        return -1;
    45b4:	00bfffc4 	movi	r2,-1
    45b8:	00000c06 	br	45ec <write+0xe4>
      }
      return rval;
    45bc:	e0bffc17 	ldw	r2,-16(fp)
    45c0:	00000a06 	br	45ec <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    45c4:	00044b80 	call	44b8 <alt_get_errno>
    45c8:	1007883a 	mov	r3,r2
    45cc:	00800344 	movi	r2,13
    45d0:	18800015 	stw	r2,0(r3)
    45d4:	00000406 	br	45e8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    45d8:	00044b80 	call	44b8 <alt_get_errno>
    45dc:	1007883a 	mov	r3,r2
    45e0:	00801444 	movi	r2,81
    45e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    45e8:	00bfffc4 	movi	r2,-1
}
    45ec:	e037883a 	mov	sp,fp
    45f0:	dfc00117 	ldw	ra,4(sp)
    45f4:	df000017 	ldw	fp,0(sp)
    45f8:	dec00204 	addi	sp,sp,8
    45fc:	f800283a 	ret

00004600 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    4600:	deffdf04 	addi	sp,sp,-132
    4604:	dfc02015 	stw	ra,128(sp)
    4608:	df001f15 	stw	fp,124(sp)
    460c:	df001f04 	addi	fp,sp,124
    4610:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    4614:	e0bfe204 	addi	r2,fp,-120
    4618:	01003fc4 	movi	r4,255
    461c:	100b883a 	mov	r5,r2
    4620:	000be9c0 	call	be9c <OSTaskQuery>
    4624:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    4628:	e0bffe83 	ldbu	r2,-6(fp)
    462c:	10803fcc 	andi	r2,r2,255
    4630:	10000126 	beq	r2,zero,4638 <__env_lock+0x38>
    return;
    4634:	00001d06 	br	46ac <__env_lock+0xac>

  id = tcb.OSTCBPrio;
    4638:	e0bfee83 	ldbu	r2,-70(fp)
    463c:	10803fcc 	andi	r2,r2,255
    4640:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    4644:	d0e80017 	ldw	r3,-24576(gp)
    4648:	e0bffd04 	addi	r2,fp,-12
    464c:	1809883a 	mov	r4,r3
    4650:	100b883a 	mov	r5,r2
    4654:	000a5340 	call	a534 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    4658:	e0bffe43 	ldbu	r2,-7(fp)
    465c:	10803fcc 	andi	r2,r2,255
    4660:	10000726 	beq	r2,zero,4680 <__env_lock+0x80>
    4664:	d0a01617 	ldw	r2,-32680(gp)
    4668:	e0ffe117 	ldw	r3,-124(fp)
    466c:	1880041e 	bne	r3,r2,4680 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
    4670:	d0a7ff17 	ldw	r2,-24580(gp)
    4674:	10800044 	addi	r2,r2,1
    4678:	d0a7ff15 	stw	r2,-24580(gp)
    467c:	00000a06 	br	46a8 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    4680:	d0e80017 	ldw	r3,-24576(gp)
    4684:	e0bffe84 	addi	r2,fp,-6
    4688:	1809883a 	mov	r4,r3
    468c:	000b883a 	mov	r5,zero
    4690:	100d883a 	mov	r6,r2
    4694:	000a0500 	call	a050 <OSSemPend>
    locks  = 1;
    4698:	00800044 	movi	r2,1
    469c:	d0a7ff15 	stw	r2,-24580(gp)
    lockid = id;
    46a0:	e0bfe117 	ldw	r2,-124(fp)
    46a4:	d0a01615 	stw	r2,-32680(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    46a8:	0001883a 	nop
}
    46ac:	e037883a 	mov	sp,fp
    46b0:	dfc00117 	ldw	ra,4(sp)
    46b4:	df000017 	ldw	fp,0(sp)
    46b8:	dec00204 	addi	sp,sp,8
    46bc:	f800283a 	ret

000046c0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    46c0:	defffd04 	addi	sp,sp,-12
    46c4:	dfc00215 	stw	ra,8(sp)
    46c8:	df000115 	stw	fp,4(sp)
    46cc:	df000104 	addi	fp,sp,4
    46d0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    46d4:	d0a7ff17 	ldw	r2,-24580(gp)
    46d8:	1000011e 	bne	r2,zero,46e0 <__env_unlock+0x20>
    return;
    46dc:	00000a06 	br	4708 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    46e0:	d0a7ff17 	ldw	r2,-24580(gp)
    46e4:	10bfffc4 	addi	r2,r2,-1
    46e8:	d0a7ff15 	stw	r2,-24580(gp)
    46ec:	d0a7ff17 	ldw	r2,-24580(gp)
    46f0:	1000051e 	bne	r2,zero,4708 <__env_unlock+0x48>
  {
    lockid = -1;
    46f4:	00bfffc4 	movi	r2,-1
    46f8:	d0a01615 	stw	r2,-32680(gp)
    OSSemPost( alt_envsem );
    46fc:	d0a80017 	ldw	r2,-24576(gp)
    4700:	1009883a 	mov	r4,r2
    4704:	000a4240 	call	a424 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    4708:	e037883a 	mov	sp,fp
    470c:	dfc00117 	ldw	ra,4(sp)
    4710:	df000017 	ldw	fp,0(sp)
    4714:	dec00204 	addi	sp,sp,8
    4718:	f800283a 	ret

0000471c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    471c:	deffdb04 	addi	sp,sp,-148
    4720:	dfc02415 	stw	ra,144(sp)
    4724:	df002315 	stw	fp,140(sp)
    4728:	df002304 	addi	fp,sp,140
    472c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4730:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    4734:	00800074 	movhi	r2,1
    4738:	10912b44 	addi	r2,r2,17581
    473c:	10800003 	ldbu	r2,0(r2)
    4740:	10803fcc 	andi	r2,r2,255
    4744:	10800060 	cmpeqi	r2,r2,1
    4748:	1000011e 	bne	r2,zero,4750 <__malloc_lock+0x34>
      return;
    474c:	00003606 	br	4828 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    4750:	e0bfe204 	addi	r2,fp,-120
    4754:	01003fc4 	movi	r4,255
    4758:	100b883a 	mov	r5,r2
    475c:	000be9c0 	call	be9c <OSTaskQuery>
    4760:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    4764:	e0bffe83 	ldbu	r2,-6(fp)
    4768:	10803fcc 	andi	r2,r2,255
    476c:	10000126 	beq	r2,zero,4774 <__malloc_lock+0x58>
    return;
    4770:	00002d06 	br	4828 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
    4774:	e0bfee83 	ldbu	r2,-70(fp)
    4778:	10803fcc 	andi	r2,r2,255
    477c:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    4780:	d0e80217 	ldw	r3,-24568(gp)
    4784:	e0bffd04 	addi	r2,fp,-12
    4788:	1809883a 	mov	r4,r3
    478c:	100b883a 	mov	r5,r2
    4790:	000a5340 	call	a534 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4794:	0005303a 	rdctl	r2,status
    4798:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    479c:	e0ffdf17 	ldw	r3,-132(fp)
    47a0:	00bfff84 	movi	r2,-2
    47a4:	1884703a 	and	r2,r3,r2
    47a8:	1001703a 	wrctl	status,r2
  
  return context;
    47ac:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
    47b0:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    47b4:	e0bffd0b 	ldhu	r2,-12(fp)
    47b8:	10bfffcc 	andi	r2,r2,65535
    47bc:	10000b1e 	bne	r2,zero,47ec <__malloc_lock+0xd0>
    47c0:	d0a01717 	ldw	r2,-32676(gp)
    47c4:	e0ffde17 	ldw	r3,-136(fp)
    47c8:	1880081e 	bne	r3,r2,47ec <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
    47cc:	d0a80117 	ldw	r2,-24572(gp)
    47d0:	10800044 	addi	r2,r2,1
    47d4:	d0a80115 	stw	r2,-24572(gp)
    47d8:	e0bfdd17 	ldw	r2,-140(fp)
    47dc:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    47e0:	e0bfe017 	ldw	r2,-128(fp)
    47e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    47e8:	00000e06 	br	4824 <__malloc_lock+0x108>
    47ec:	e0bfdd17 	ldw	r2,-140(fp)
    47f0:	e0bfe115 	stw	r2,-124(fp)
    47f4:	e0bfe117 	ldw	r2,-124(fp)
    47f8:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    47fc:	d0e80217 	ldw	r3,-24568(gp)
    4800:	e0bffe84 	addi	r2,fp,-6
    4804:	1809883a 	mov	r4,r3
    4808:	000b883a 	mov	r5,zero
    480c:	100d883a 	mov	r6,r2
    4810:	000a0500 	call	a050 <OSSemPend>
    locks  = 1;
    4814:	00800044 	movi	r2,1
    4818:	d0a80115 	stw	r2,-24572(gp)
    lockid = id;
    481c:	e0bfde17 	ldw	r2,-136(fp)
    4820:	d0a01715 	stw	r2,-32676(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    4824:	0001883a 	nop
}
    4828:	e037883a 	mov	sp,fp
    482c:	dfc00117 	ldw	ra,4(sp)
    4830:	df000017 	ldw	fp,0(sp)
    4834:	dec00204 	addi	sp,sp,8
    4838:	f800283a 	ret

0000483c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    483c:	defff804 	addi	sp,sp,-32
    4840:	dfc00715 	stw	ra,28(sp)
    4844:	df000615 	stw	fp,24(sp)
    4848:	df000604 	addi	fp,sp,24
    484c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4850:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    4854:	00800074 	movhi	r2,1
    4858:	10912b44 	addi	r2,r2,17581
    485c:	10800003 	ldbu	r2,0(r2)
    4860:	10803fcc 	andi	r2,r2,255
    4864:	10800060 	cmpeqi	r2,r2,1
    4868:	1000011e 	bne	r2,zero,4870 <__malloc_unlock+0x34>
      return;
    486c:	00002206 	br	48f8 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4870:	0005303a 	rdctl	r2,status
    4874:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4878:	e0fffb17 	ldw	r3,-20(fp)
    487c:	00bfff84 	movi	r2,-2
    4880:	1884703a 	and	r2,r3,r2
    4884:	1001703a 	wrctl	status,r2
  
  return context;
    4888:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
    488c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    4890:	d0a80117 	ldw	r2,-24572(gp)
    4894:	1000051e 	bne	r2,zero,48ac <__malloc_unlock+0x70>
    4898:	e0bffa17 	ldw	r2,-24(fp)
    489c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    48a0:	e0bffc17 	ldw	r2,-16(fp)
    48a4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    48a8:	00001306 	br	48f8 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    48ac:	d0a80117 	ldw	r2,-24572(gp)
    48b0:	10bfffc4 	addi	r2,r2,-1
    48b4:	d0a80115 	stw	r2,-24572(gp)
    48b8:	d0a80117 	ldw	r2,-24572(gp)
    48bc:	10000a1e 	bne	r2,zero,48e8 <__malloc_unlock+0xac>
  {
    lockid = -1;
    48c0:	00bfffc4 	movi	r2,-1
    48c4:	d0a01715 	stw	r2,-32676(gp)
    48c8:	e0bffa17 	ldw	r2,-24(fp)
    48cc:	e0bffd15 	stw	r2,-12(fp)
    48d0:	e0bffd17 	ldw	r2,-12(fp)
    48d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    48d8:	d0a80217 	ldw	r2,-24568(gp)
    48dc:	1009883a 	mov	r4,r2
    48e0:	000a4240 	call	a424 <OSSemPost>
    48e4:	00000406 	br	48f8 <__malloc_unlock+0xbc>
    48e8:	e0bffa17 	ldw	r2,-24(fp)
    48ec:	e0bffe15 	stw	r2,-8(fp)
    48f0:	e0bffe17 	ldw	r2,-8(fp)
    48f4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    48f8:	e037883a 	mov	sp,fp
    48fc:	dfc00117 	ldw	ra,4(sp)
    4900:	df000017 	ldw	fp,0(sp)
    4904:	dec00204 	addi	sp,sp,8
    4908:	f800283a 	ret

0000490c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    490c:	defff704 	addi	sp,sp,-36
    4910:	dfc00815 	stw	ra,32(sp)
    4914:	df000715 	stw	fp,28(sp)
    4918:	df000704 	addi	fp,sp,28
    491c:	e13ffd15 	stw	r4,-12(fp)
    4920:	e17ffe15 	stw	r5,-8(fp)
    4924:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4928:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    492c:	e0bfff17 	ldw	r2,-4(fp)
    4930:	1000021e 	bne	r2,zero,493c <OSEventNameGet+0x30>
        return (0);
    4934:	0005883a 	mov	r2,zero
    4938:	00003706 	br	4a18 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    493c:	e0bffd17 	ldw	r2,-12(fp)
    4940:	1000051e 	bne	r2,zero,4958 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    4944:	e0bfff17 	ldw	r2,-4(fp)
    4948:	00c00104 	movi	r3,4
    494c:	10c00005 	stb	r3,0(r2)
        return (0);
    4950:	0005883a 	mov	r2,zero
    4954:	00003006 	br	4a18 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    4958:	e0bffe17 	ldw	r2,-8(fp)
    495c:	1000051e 	bne	r2,zero,4974 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    4960:	e0bfff17 	ldw	r2,-4(fp)
    4964:	00c00304 	movi	r3,12
    4968:	10c00005 	stb	r3,0(r2)
        return (0);
    496c:	0005883a 	mov	r2,zero
    4970:	00002906 	br	4a18 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    4974:	d0a81103 	ldbu	r2,-24508(gp)
    4978:	10803fcc 	andi	r2,r2,255
    497c:	10000526 	beq	r2,zero,4994 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    4980:	e0bfff17 	ldw	r2,-4(fp)
    4984:	00c00444 	movi	r3,17
    4988:	10c00005 	stb	r3,0(r2)
        return (0);
    498c:	0005883a 	mov	r2,zero
    4990:	00002106 	br	4a18 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    4994:	e0bffd17 	ldw	r2,-12(fp)
    4998:	10800003 	ldbu	r2,0(r2)
    499c:	10803fcc 	andi	r2,r2,255
    49a0:	10bfffc4 	addi	r2,r2,-1
    49a4:	10800128 	cmpgeui	r2,r2,4
    49a8:	10000526 	beq	r2,zero,49c0 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    49ac:	e0bfff17 	ldw	r2,-4(fp)
    49b0:	00c00044 	movi	r3,1
    49b4:	10c00005 	stb	r3,0(r2)
             return (0);
    49b8:	0005883a 	mov	r2,zero
    49bc:	00001606 	br	4a18 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    49c0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    49c4:	0005303a 	rdctl	r2,status
    49c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    49cc:	e0fffb17 	ldw	r3,-20(fp)
    49d0:	00bfff84 	movi	r2,-2
    49d4:	1884703a 	and	r2,r3,r2
    49d8:	1001703a 	wrctl	status,r2
  
  return context;
    49dc:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    49e0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    49e4:	e0bffd17 	ldw	r2,-12(fp)
    49e8:	10800384 	addi	r2,r2,14
    49ec:	e13ffe17 	ldw	r4,-8(fp)
    49f0:	100b883a 	mov	r5,r2
    49f4:	00063600 	call	6360 <OS_StrCopy>
    49f8:	e0bffa05 	stb	r2,-24(fp)
    49fc:	e0bff917 	ldw	r2,-28(fp)
    4a00:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4a04:	e0bffc17 	ldw	r2,-16(fp)
    4a08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    4a0c:	e0bfff17 	ldw	r2,-4(fp)
    4a10:	10000005 	stb	zero,0(r2)
    return (len);
    4a14:	e0bffa03 	ldbu	r2,-24(fp)
}
    4a18:	e037883a 	mov	sp,fp
    4a1c:	dfc00117 	ldw	ra,4(sp)
    4a20:	df000017 	ldw	fp,0(sp)
    4a24:	dec00204 	addi	sp,sp,8
    4a28:	f800283a 	ret

00004a2c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    4a2c:	defff604 	addi	sp,sp,-40
    4a30:	dfc00915 	stw	ra,36(sp)
    4a34:	df000815 	stw	fp,32(sp)
    4a38:	df000804 	addi	fp,sp,32
    4a3c:	e13ffd15 	stw	r4,-12(fp)
    4a40:	e17ffe15 	stw	r5,-8(fp)
    4a44:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4a48:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    4a4c:	e0bfff17 	ldw	r2,-4(fp)
    4a50:	1000011e 	bne	r2,zero,4a58 <OSEventNameSet+0x2c>
        return;
    4a54:	00003f06 	br	4b54 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    4a58:	e0bffd17 	ldw	r2,-12(fp)
    4a5c:	1000041e 	bne	r2,zero,4a70 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    4a60:	e0bfff17 	ldw	r2,-4(fp)
    4a64:	00c00104 	movi	r3,4
    4a68:	10c00005 	stb	r3,0(r2)
        return;
    4a6c:	00003906 	br	4b54 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    4a70:	e0bffe17 	ldw	r2,-8(fp)
    4a74:	1000041e 	bne	r2,zero,4a88 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    4a78:	e0bfff17 	ldw	r2,-4(fp)
    4a7c:	00c00304 	movi	r3,12
    4a80:	10c00005 	stb	r3,0(r2)
        return;
    4a84:	00003306 	br	4b54 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    4a88:	d0a81103 	ldbu	r2,-24508(gp)
    4a8c:	10803fcc 	andi	r2,r2,255
    4a90:	10000426 	beq	r2,zero,4aa4 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
    4a94:	e0bfff17 	ldw	r2,-4(fp)
    4a98:	00c00484 	movi	r3,18
    4a9c:	10c00005 	stb	r3,0(r2)
        return;
    4aa0:	00002c06 	br	4b54 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
    4aa4:	e0bffd17 	ldw	r2,-12(fp)
    4aa8:	10800003 	ldbu	r2,0(r2)
    4aac:	10803fcc 	andi	r2,r2,255
    4ab0:	10bfffc4 	addi	r2,r2,-1
    4ab4:	10800128 	cmpgeui	r2,r2,4
    4ab8:	10000426 	beq	r2,zero,4acc <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    4abc:	e0bfff17 	ldw	r2,-4(fp)
    4ac0:	00c00044 	movi	r3,1
    4ac4:	10c00005 	stb	r3,0(r2)
             return;
    4ac8:	00002206 	br	4b54 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    4acc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4ad0:	0005303a 	rdctl	r2,status
    4ad4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4ad8:	e0fffa17 	ldw	r3,-24(fp)
    4adc:	00bfff84 	movi	r2,-2
    4ae0:	1884703a 	and	r2,r3,r2
    4ae4:	1001703a 	wrctl	status,r2
  
  return context;
    4ae8:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    4aec:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    4af0:	e13ffe17 	ldw	r4,-8(fp)
    4af4:	00063d40 	call	63d4 <OS_StrLen>
    4af8:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    4afc:	e0bff903 	ldbu	r2,-28(fp)
    4b00:	10800830 	cmpltui	r2,r2,32
    4b04:	1000081e 	bne	r2,zero,4b28 <OSEventNameSet+0xfc>
    4b08:	e0bff817 	ldw	r2,-32(fp)
    4b0c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4b10:	e0bffb17 	ldw	r2,-20(fp)
    4b14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    4b18:	e0bfff17 	ldw	r2,-4(fp)
    4b1c:	00c002c4 	movi	r3,11
    4b20:	10c00005 	stb	r3,0(r2)
        return;
    4b24:	00000b06 	br	4b54 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    4b28:	e0bffd17 	ldw	r2,-12(fp)
    4b2c:	10800384 	addi	r2,r2,14
    4b30:	1009883a 	mov	r4,r2
    4b34:	e17ffe17 	ldw	r5,-8(fp)
    4b38:	00063600 	call	6360 <OS_StrCopy>
    4b3c:	e0bff817 	ldw	r2,-32(fp)
    4b40:	e0bffc15 	stw	r2,-16(fp)
    4b44:	e0bffc17 	ldw	r2,-16(fp)
    4b48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    4b4c:	e0bfff17 	ldw	r2,-4(fp)
    4b50:	10000005 	stb	zero,0(r2)
}
    4b54:	e037883a 	mov	sp,fp
    4b58:	dfc00117 	ldw	ra,4(sp)
    4b5c:	df000017 	ldw	fp,0(sp)
    4b60:	dec00204 	addi	sp,sp,8
    4b64:	f800283a 	ret

00004b68 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    4b68:	deffed04 	addi	sp,sp,-76
    4b6c:	dfc01215 	stw	ra,72(sp)
    4b70:	df001115 	stw	fp,68(sp)
    4b74:	df001104 	addi	fp,sp,68
    4b78:	e13ffc15 	stw	r4,-16(fp)
    4b7c:	e17ffd15 	stw	r5,-12(fp)
    4b80:	e1bffe15 	stw	r6,-8(fp)
    4b84:	3805883a 	mov	r2,r7
    4b88:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    4b8c:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    4b90:	e0800217 	ldw	r2,8(fp)
    4b94:	1000021e 	bne	r2,zero,4ba0 <OSEventPendMulti+0x38>
        return (0);
    4b98:	0005883a 	mov	r2,zero
    4b9c:	00017106 	br	5164 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    4ba0:	e0bffc17 	ldw	r2,-16(fp)
    4ba4:	1000051e 	bne	r2,zero,4bbc <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    4ba8:	e0800217 	ldw	r2,8(fp)
    4bac:	00c00104 	movi	r3,4
    4bb0:	10c00005 	stb	r3,0(r2)
        return (0);
    4bb4:	0005883a 	mov	r2,zero
    4bb8:	00016a06 	br	5164 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    4bbc:	e0bffd17 	ldw	r2,-12(fp)
    4bc0:	1000051e 	bne	r2,zero,4bd8 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    4bc4:	e0800217 	ldw	r2,8(fp)
    4bc8:	00c00104 	movi	r3,4
    4bcc:	10c00005 	stb	r3,0(r2)
        return (0);
    4bd0:	0005883a 	mov	r2,zero
    4bd4:	00016306 	br	5164 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    4bd8:	e0bffe17 	ldw	r2,-8(fp)
    4bdc:	1000051e 	bne	r2,zero,4bf4 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    4be0:	e0800217 	ldw	r2,8(fp)
    4be4:	00c00104 	movi	r3,4
    4be8:	10c00005 	stb	r3,0(r2)
        return (0);
    4bec:	0005883a 	mov	r2,zero
    4bf0:	00015c06 	br	5164 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    4bf4:	e0bffd17 	ldw	r2,-12(fp)
    4bf8:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    4bfc:	e0bffc17 	ldw	r2,-16(fp)
    4c00:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    4c04:	e0bfef17 	ldw	r2,-68(fp)
    4c08:	10800017 	ldw	r2,0(r2)
    4c0c:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    4c10:	00001906 	br	4c78 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    4c14:	e0bff017 	ldw	r2,-64(fp)
    4c18:	10800003 	ldbu	r2,0(r2)
    4c1c:	10803fcc 	andi	r2,r2,255
    4c20:	10c000a0 	cmpeqi	r3,r2,2
    4c24:	1800091e 	bne	r3,zero,4c4c <OSEventPendMulti+0xe4>
    4c28:	10c000e0 	cmpeqi	r3,r2,3
    4c2c:	1800091e 	bne	r3,zero,4c54 <OSEventPendMulti+0xec>
    4c30:	10800060 	cmpeqi	r2,r2,1
    4c34:	1000091e 	bne	r2,zero,4c5c <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    4c38:	e0800217 	ldw	r2,8(fp)
    4c3c:	00c00044 	movi	r3,1
    4c40:	10c00005 	stb	r3,0(r2)
                 return (0);
    4c44:	0005883a 	mov	r2,zero
    4c48:	00014606 	br	5164 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    4c4c:	0001883a 	nop
    4c50:	00000306 	br	4c60 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    4c54:	0001883a 	nop
    4c58:	00000106 	br	4c60 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    4c5c:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    4c60:	e0bfef17 	ldw	r2,-68(fp)
    4c64:	10800104 	addi	r2,r2,4
    4c68:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    4c6c:	e0bfef17 	ldw	r2,-68(fp)
    4c70:	10800017 	ldw	r2,0(r2)
    4c74:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    4c78:	e0bff017 	ldw	r2,-64(fp)
    4c7c:	103fe51e 	bne	r2,zero,4c14 <__alt_mem_Flash_flash_data+0xf4004c14>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    4c80:	d0a81103 	ldbu	r2,-24508(gp)
    4c84:	10803fcc 	andi	r2,r2,255
    4c88:	10000526 	beq	r2,zero,4ca0 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    4c8c:	e0800217 	ldw	r2,8(fp)
    4c90:	00c00084 	movi	r3,2
    4c94:	10c00005 	stb	r3,0(r2)
        return (0);
    4c98:	0005883a 	mov	r2,zero
    4c9c:	00013106 	br	5164 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    4ca0:	d0a80303 	ldbu	r2,-24564(gp)
    4ca4:	10803fcc 	andi	r2,r2,255
    4ca8:	10000526 	beq	r2,zero,4cc0 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    4cac:	e0800217 	ldw	r2,8(fp)
    4cb0:	00c00344 	movi	r3,13
    4cb4:	10c00005 	stb	r3,0(r2)
        return (0);
    4cb8:	0005883a 	mov	r2,zero
    4cbc:	00012906 	br	5164 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4cc0:	0005303a 	rdctl	r2,status
    4cc4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4cc8:	e0fff517 	ldw	r3,-44(fp)
    4ccc:	00bfff84 	movi	r2,-2
    4cd0:	1884703a 	and	r2,r3,r2
    4cd4:	1001703a 	wrctl	status,r2
  
  return context;
    4cd8:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    4cdc:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    4ce0:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    4ce4:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    4ce8:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    4cec:	e0bffc17 	ldw	r2,-16(fp)
    4cf0:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    4cf4:	e0bfef17 	ldw	r2,-68(fp)
    4cf8:	10800017 	ldw	r2,0(r2)
    4cfc:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    4d00:	00008106 	br	4f08 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    4d04:	e0bff017 	ldw	r2,-64(fp)
    4d08:	10800003 	ldbu	r2,0(r2)
    4d0c:	10803fcc 	andi	r2,r2,255
    4d10:	10c000a0 	cmpeqi	r3,r2,2
    4d14:	18003c1e 	bne	r3,zero,4e08 <OSEventPendMulti+0x2a0>
    4d18:	10c000e0 	cmpeqi	r3,r2,3
    4d1c:	1800031e 	bne	r3,zero,4d2c <OSEventPendMulti+0x1c4>
    4d20:	10800060 	cmpeqi	r2,r2,1
    4d24:	10001e1e 	bne	r2,zero,4da0 <OSEventPendMulti+0x238>
    4d28:	00006606 	br	4ec4 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    4d2c:	e0bff017 	ldw	r2,-64(fp)
    4d30:	1080020b 	ldhu	r2,8(r2)
    4d34:	10bfffcc 	andi	r2,r2,65535
    4d38:	10001526 	beq	r2,zero,4d90 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    4d3c:	e0bff017 	ldw	r2,-64(fp)
    4d40:	1080020b 	ldhu	r2,8(r2)
    4d44:	10bfffc4 	addi	r2,r2,-1
    4d48:	1007883a 	mov	r3,r2
    4d4c:	e0bff017 	ldw	r2,-64(fp)
    4d50:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    4d54:	e0bffd17 	ldw	r2,-12(fp)
    4d58:	10c00104 	addi	r3,r2,4
    4d5c:	e0fffd15 	stw	r3,-12(fp)
    4d60:	e0fff017 	ldw	r3,-64(fp)
    4d64:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    4d68:	00800044 	movi	r2,1
    4d6c:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    4d70:	e0bffe17 	ldw	r2,-8(fp)
    4d74:	10c00104 	addi	r3,r2,4
    4d78:	e0fffe15 	stw	r3,-8(fp)
    4d7c:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    4d80:	e0bff18b 	ldhu	r2,-58(fp)
    4d84:	10800044 	addi	r2,r2,1
    4d88:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    4d8c:	00005806 	br	4ef0 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    4d90:	e0bff203 	ldbu	r2,-56(fp)
    4d94:	10800054 	ori	r2,r2,1
    4d98:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    4d9c:	00005406 	br	4ef0 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    4da0:	e0bff017 	ldw	r2,-64(fp)
    4da4:	10800117 	ldw	r2,4(r2)
    4da8:	10001326 	beq	r2,zero,4df8 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    4dac:	e0bffe17 	ldw	r2,-8(fp)
    4db0:	10c00104 	addi	r3,r2,4
    4db4:	e0fffe15 	stw	r3,-8(fp)
    4db8:	e0fff017 	ldw	r3,-64(fp)
    4dbc:	18c00117 	ldw	r3,4(r3)
    4dc0:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    4dc4:	e0bff017 	ldw	r2,-64(fp)
    4dc8:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    4dcc:	e0bffd17 	ldw	r2,-12(fp)
    4dd0:	10c00104 	addi	r3,r2,4
    4dd4:	e0fffd15 	stw	r3,-12(fp)
    4dd8:	e0fff017 	ldw	r3,-64(fp)
    4ddc:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    4de0:	00800044 	movi	r2,1
    4de4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    4de8:	e0bff18b 	ldhu	r2,-58(fp)
    4dec:	10800044 	addi	r2,r2,1
    4df0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    4df4:	00003e06 	br	4ef0 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    4df8:	e0bff203 	ldbu	r2,-56(fp)
    4dfc:	10800094 	ori	r2,r2,2
    4e00:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    4e04:	00003a06 	br	4ef0 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    4e08:	e0bff017 	ldw	r2,-64(fp)
    4e0c:	10800117 	ldw	r2,4(r2)
    4e10:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    4e14:	e0bff417 	ldw	r2,-48(fp)
    4e18:	1080058b 	ldhu	r2,22(r2)
    4e1c:	10bfffcc 	andi	r2,r2,65535
    4e20:	10002426 	beq	r2,zero,4eb4 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    4e24:	e0bffe17 	ldw	r2,-8(fp)
    4e28:	10c00104 	addi	r3,r2,4
    4e2c:	e0fffe15 	stw	r3,-8(fp)
    4e30:	e0fff417 	ldw	r3,-48(fp)
    4e34:	18c00417 	ldw	r3,16(r3)
    4e38:	19400104 	addi	r5,r3,4
    4e3c:	e13ff417 	ldw	r4,-48(fp)
    4e40:	21400415 	stw	r5,16(r4)
    4e44:	18c00017 	ldw	r3,0(r3)
    4e48:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    4e4c:	e0bff417 	ldw	r2,-48(fp)
    4e50:	10c00417 	ldw	r3,16(r2)
    4e54:	e0bff417 	ldw	r2,-48(fp)
    4e58:	10800217 	ldw	r2,8(r2)
    4e5c:	1880041e 	bne	r3,r2,4e70 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    4e60:	e0bff417 	ldw	r2,-48(fp)
    4e64:	10c00117 	ldw	r3,4(r2)
    4e68:	e0bff417 	ldw	r2,-48(fp)
    4e6c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    4e70:	e0bff417 	ldw	r2,-48(fp)
    4e74:	1080058b 	ldhu	r2,22(r2)
    4e78:	10bfffc4 	addi	r2,r2,-1
    4e7c:	1007883a 	mov	r3,r2
    4e80:	e0bff417 	ldw	r2,-48(fp)
    4e84:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    4e88:	e0bffd17 	ldw	r2,-12(fp)
    4e8c:	10c00104 	addi	r3,r2,4
    4e90:	e0fffd15 	stw	r3,-12(fp)
    4e94:	e0fff017 	ldw	r3,-64(fp)
    4e98:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    4e9c:	00800044 	movi	r2,1
    4ea0:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    4ea4:	e0bff18b 	ldhu	r2,-58(fp)
    4ea8:	10800044 	addi	r2,r2,1
    4eac:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    4eb0:	00000f06 	br	4ef0 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    4eb4:	e0bff203 	ldbu	r2,-56(fp)
    4eb8:	10800114 	ori	r2,r2,4
    4ebc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    4ec0:	00000b06 	br	4ef0 <OSEventPendMulti+0x388>
    4ec4:	e0bff317 	ldw	r2,-52(fp)
    4ec8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4ecc:	e0bff617 	ldw	r2,-40(fp)
    4ed0:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    4ed4:	e0bffd17 	ldw	r2,-12(fp)
    4ed8:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    4edc:	e0800217 	ldw	r2,8(fp)
    4ee0:	00c00044 	movi	r3,1
    4ee4:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    4ee8:	e0bff18b 	ldhu	r2,-58(fp)
    4eec:	00009d06 	br	5164 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    4ef0:	e0bfef17 	ldw	r2,-68(fp)
    4ef4:	10800104 	addi	r2,r2,4
    4ef8:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    4efc:	e0bfef17 	ldw	r2,-68(fp)
    4f00:	10800017 	ldw	r2,0(r2)
    4f04:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    4f08:	e0bff017 	ldw	r2,-64(fp)
    4f0c:	103f7d1e 	bne	r2,zero,4d04 <__alt_mem_Flash_flash_data+0xf4004d04>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    4f10:	e0bff103 	ldbu	r2,-60(fp)
    4f14:	10800058 	cmpnei	r2,r2,1
    4f18:	10000a1e 	bne	r2,zero,4f44 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    4f1c:	e0bffd17 	ldw	r2,-12(fp)
    4f20:	10000015 	stw	zero,0(r2)
    4f24:	e0bff317 	ldw	r2,-52(fp)
    4f28:	e0bff715 	stw	r2,-36(fp)
    4f2c:	e0bff717 	ldw	r2,-36(fp)
    4f30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    4f34:	e0800217 	ldw	r2,8(fp)
    4f38:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    4f3c:	e0bff18b 	ldhu	r2,-58(fp)
    4f40:	00008806 	br	5164 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    4f44:	d0a81217 	ldw	r2,-24504(gp)
    4f48:	d0e81217 	ldw	r3,-24504(gp)
    4f4c:	19000c03 	ldbu	r4,48(r3)
    4f50:	e0fff203 	ldbu	r3,-56(fp)
    4f54:	20c6b03a 	or	r3,r4,r3
    4f58:	1809883a 	mov	r4,r3
    4f5c:	00ffe004 	movi	r3,-128
    4f60:	20c6b03a 	or	r3,r4,r3
    4f64:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    4f68:	d0a81217 	ldw	r2,-24504(gp)
    4f6c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    4f70:	d0a81217 	ldw	r2,-24504(gp)
    4f74:	e0ffff0b 	ldhu	r3,-4(fp)
    4f78:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    4f7c:	e13ffc17 	ldw	r4,-16(fp)
    4f80:	0005ab00 	call	5ab0 <OS_EventTaskWaitMulti>
    4f84:	e0bff317 	ldw	r2,-52(fp)
    4f88:	e0bff815 	stw	r2,-32(fp)
    4f8c:	e0bff817 	ldw	r2,-32(fp)
    4f90:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    4f94:	00062240 	call	6224 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4f98:	0005303a 	rdctl	r2,status
    4f9c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4fa0:	e0fff917 	ldw	r3,-28(fp)
    4fa4:	00bfff84 	movi	r2,-2
    4fa8:	1884703a 	and	r2,r3,r2
    4fac:	1001703a 	wrctl	status,r2
  
  return context;
    4fb0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    4fb4:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    4fb8:	d0a81217 	ldw	r2,-24504(gp)
    4fbc:	10800c43 	ldbu	r2,49(r2)
    4fc0:	10803fcc 	andi	r2,r2,255
    4fc4:	10000226 	beq	r2,zero,4fd0 <OSEventPendMulti+0x468>
    4fc8:	108000a0 	cmpeqi	r2,r2,2
    4fcc:	10001826 	beq	r2,zero,5030 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    4fd0:	d0a81217 	ldw	r2,-24504(gp)
    4fd4:	10800717 	ldw	r2,28(r2)
    4fd8:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    4fdc:	e0bff017 	ldw	r2,-64(fp)
    4fe0:	10000b26 	beq	r2,zero,5010 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    4fe4:	e0bffd17 	ldw	r2,-12(fp)
    4fe8:	10c00104 	addi	r3,r2,4
    4fec:	e0fffd15 	stw	r3,-12(fp)
    4ff0:	e0fff017 	ldw	r3,-64(fp)
    4ff4:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    4ff8:	e0bffd17 	ldw	r2,-12(fp)
    4ffc:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    5000:	e0bff18b 	ldhu	r2,-58(fp)
    5004:	10800044 	addi	r2,r2,1
    5008:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    500c:	00000d06 	br	5044 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    5010:	d0a81217 	ldw	r2,-24504(gp)
    5014:	00c00044 	movi	r3,1
    5018:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    501c:	d0a81217 	ldw	r2,-24504(gp)
    5020:	1009883a 	mov	r4,r2
    5024:	e17ffc17 	ldw	r5,-16(fp)
    5028:	0005cb00 	call	5cb0 <OS_EventTaskRemoveMulti>
             }
			 break;
    502c:	00000506 	br	5044 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    5030:	d0a81217 	ldw	r2,-24504(gp)
    5034:	1009883a 	mov	r4,r2
    5038:	e17ffc17 	ldw	r5,-16(fp)
    503c:	0005cb00 	call	5cb0 <OS_EventTaskRemoveMulti>
             break;
    5040:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    5044:	d0a81217 	ldw	r2,-24504(gp)
    5048:	10800c43 	ldbu	r2,49(r2)
    504c:	10803fcc 	andi	r2,r2,255
    5050:	10000326 	beq	r2,zero,5060 <OSEventPendMulti+0x4f8>
    5054:	108000a0 	cmpeqi	r2,r2,2
    5058:	1000231e 	bne	r2,zero,50e8 <OSEventPendMulti+0x580>
    505c:	00002a06 	br	5108 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    5060:	e0bff017 	ldw	r2,-64(fp)
    5064:	10800003 	ldbu	r2,0(r2)
    5068:	10803fcc 	andi	r2,r2,255
    506c:	0080100e 	bge	zero,r2,50b0 <OSEventPendMulti+0x548>
    5070:	10c000d0 	cmplti	r3,r2,3
    5074:	1800071e 	bne	r3,zero,5094 <OSEventPendMulti+0x52c>
    5078:	108000e0 	cmpeqi	r2,r2,3
    507c:	10000c26 	beq	r2,zero,50b0 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    5080:	e0bffe17 	ldw	r2,-8(fp)
    5084:	10c00104 	addi	r3,r2,4
    5088:	e0fffe15 	stw	r3,-8(fp)
    508c:	10000015 	stw	zero,0(r2)
                      break;
    5090:	00001206 	br	50dc <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    5094:	e0bffe17 	ldw	r2,-8(fp)
    5098:	10c00104 	addi	r3,r2,4
    509c:	e0fffe15 	stw	r3,-8(fp)
    50a0:	d0e81217 	ldw	r3,-24504(gp)
    50a4:	18c00917 	ldw	r3,36(r3)
    50a8:	10c00015 	stw	r3,0(r2)
                      break;
    50ac:	00000b06 	br	50dc <OSEventPendMulti+0x574>
    50b0:	e0bff317 	ldw	r2,-52(fp)
    50b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    50b8:	e0bffa17 	ldw	r2,-24(fp)
    50bc:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    50c0:	e0bffd17 	ldw	r2,-12(fp)
    50c4:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    50c8:	e0800217 	ldw	r2,8(fp)
    50cc:	00c00044 	movi	r3,1
    50d0:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    50d4:	e0bff18b 	ldhu	r2,-58(fp)
    50d8:	00002206 	br	5164 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    50dc:	e0800217 	ldw	r2,8(fp)
    50e0:	10000005 	stb	zero,0(r2)
             break;
    50e4:	00001006 	br	5128 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    50e8:	e0bffe17 	ldw	r2,-8(fp)
    50ec:	10c00104 	addi	r3,r2,4
    50f0:	e0fffe15 	stw	r3,-8(fp)
    50f4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    50f8:	e0800217 	ldw	r2,8(fp)
    50fc:	00c00384 	movi	r3,14
    5100:	10c00005 	stb	r3,0(r2)
             break;
    5104:	00000806 	br	5128 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    5108:	e0bffe17 	ldw	r2,-8(fp)
    510c:	10c00104 	addi	r3,r2,4
    5110:	e0fffe15 	stw	r3,-8(fp)
    5114:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    5118:	e0800217 	ldw	r2,8(fp)
    511c:	00c00284 	movi	r3,10
    5120:	10c00005 	stb	r3,0(r2)
             break;
    5124:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    5128:	d0a81217 	ldw	r2,-24504(gp)
    512c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    5130:	d0a81217 	ldw	r2,-24504(gp)
    5134:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    5138:	d0a81217 	ldw	r2,-24504(gp)
    513c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    5140:	d0a81217 	ldw	r2,-24504(gp)
    5144:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    5148:	d0a81217 	ldw	r2,-24504(gp)
    514c:	10000915 	stw	zero,36(r2)
    5150:	e0bff317 	ldw	r2,-52(fp)
    5154:	e0bffb15 	stw	r2,-20(fp)
    5158:	e0bffb17 	ldw	r2,-20(fp)
    515c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    5160:	e0bff18b 	ldhu	r2,-58(fp)
}
    5164:	e037883a 	mov	sp,fp
    5168:	dfc00117 	ldw	ra,4(sp)
    516c:	df000017 	ldw	fp,0(sp)
    5170:	dec00204 	addi	sp,sp,8
    5174:	f800283a 	ret

00005178 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    5178:	defffe04 	addi	sp,sp,-8
    517c:	dfc00115 	stw	ra,4(sp)
    5180:	df000015 	stw	fp,0(sp)
    5184:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    5188:	000fb640 	call	fb64 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    518c:	0005eec0 	call	5eec <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    5190:	0005f300 	call	5f30 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    5194:	00060900 	call	6090 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    5198:	0005e100 	call	5e10 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    519c:	00080100 	call	8010 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    51a0:	00089580 	call	8958 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    51a4:	0009b8c0 	call	9b8c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    51a8:	0005f980 	call	5f98 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    51ac:	00060140 	call	6014 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    51b0:	000fb800 	call	fb80 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    51b4:	00068fc0 	call	68fc <OSDebugInit>
#endif
}
    51b8:	e037883a 	mov	sp,fp
    51bc:	dfc00117 	ldw	ra,4(sp)
    51c0:	df000017 	ldw	fp,0(sp)
    51c4:	dec00204 	addi	sp,sp,8
    51c8:	f800283a 	ret

000051cc <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    51cc:	defffc04 	addi	sp,sp,-16
    51d0:	df000315 	stw	fp,12(sp)
    51d4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    51d8:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
    51dc:	d0a80343 	ldbu	r2,-24563(gp)
    51e0:	10803fcc 	andi	r2,r2,255
    51e4:	10800058 	cmpnei	r2,r2,1
    51e8:	1000131e 	bne	r2,zero,5238 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    51ec:	0005303a 	rdctl	r2,status
    51f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    51f4:	e0fffe17 	ldw	r3,-8(fp)
    51f8:	00bfff84 	movi	r2,-2
    51fc:	1884703a 	and	r2,r3,r2
    5200:	1001703a 	wrctl	status,r2
  
  return context;
    5204:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    5208:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
    520c:	d0a81103 	ldbu	r2,-24508(gp)
    5210:	10803fcc 	andi	r2,r2,255
    5214:	10803fe0 	cmpeqi	r2,r2,255
    5218:	1000031e 	bne	r2,zero,5228 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    521c:	d0a81103 	ldbu	r2,-24508(gp)
    5220:	10800044 	addi	r2,r2,1
    5224:	d0a81105 	stb	r2,-24508(gp)
    5228:	e0bffd17 	ldw	r2,-12(fp)
    522c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5230:	e0bfff17 	ldw	r2,-4(fp)
    5234:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
    5238:	e037883a 	mov	sp,fp
    523c:	df000017 	ldw	fp,0(sp)
    5240:	dec00104 	addi	sp,sp,4
    5244:	f800283a 	ret

00005248 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    5248:	defffb04 	addi	sp,sp,-20
    524c:	dfc00415 	stw	ra,16(sp)
    5250:	df000315 	stw	fp,12(sp)
    5254:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    5258:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    525c:	d0a80343 	ldbu	r2,-24563(gp)
    5260:	10803fcc 	andi	r2,r2,255
    5264:	10800058 	cmpnei	r2,r2,1
    5268:	10002f1e 	bne	r2,zero,5328 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    526c:	0005303a 	rdctl	r2,status
    5270:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5274:	e0fffe17 	ldw	r3,-8(fp)
    5278:	00bfff84 	movi	r2,-2
    527c:	1884703a 	and	r2,r3,r2
    5280:	1001703a 	wrctl	status,r2
  
  return context;
    5284:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    5288:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    528c:	d0a81103 	ldbu	r2,-24508(gp)
    5290:	10803fcc 	andi	r2,r2,255
    5294:	10000326 	beq	r2,zero,52a4 <OSIntExit+0x5c>
            OSIntNesting--;
    5298:	d0a81103 	ldbu	r2,-24508(gp)
    529c:	10bfffc4 	addi	r2,r2,-1
    52a0:	d0a81105 	stb	r2,-24508(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    52a4:	d0a81103 	ldbu	r2,-24508(gp)
    52a8:	10803fcc 	andi	r2,r2,255
    52ac:	10001a1e 	bne	r2,zero,5318 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    52b0:	d0a80303 	ldbu	r2,-24564(gp)
    52b4:	10803fcc 	andi	r2,r2,255
    52b8:	1000171e 	bne	r2,zero,5318 <OSIntExit+0xd0>
                OS_SchedNew();
    52bc:	00062f00 	call	62f0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    52c0:	d0e80503 	ldbu	r3,-24556(gp)
    52c4:	d0a80543 	ldbu	r2,-24555(gp)
    52c8:	18c03fcc 	andi	r3,r3,255
    52cc:	10803fcc 	andi	r2,r2,255
    52d0:	18801126 	beq	r3,r2,5318 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    52d4:	d0a80503 	ldbu	r2,-24556(gp)
    52d8:	10c03fcc 	andi	r3,r2,255
    52dc:	008000b4 	movhi	r2,2
    52e0:	1085c104 	addi	r2,r2,5892
    52e4:	18c7883a 	add	r3,r3,r3
    52e8:	18c7883a 	add	r3,r3,r3
    52ec:	10c5883a 	add	r2,r2,r3
    52f0:	10800017 	ldw	r2,0(r2)
    52f4:	d0a80d15 	stw	r2,-24524(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    52f8:	d0a80d17 	ldw	r2,-24524(gp)
    52fc:	10c00e17 	ldw	r3,56(r2)
    5300:	18c00044 	addi	r3,r3,1
    5304:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    5308:	d0a80817 	ldw	r2,-24544(gp)
    530c:	10800044 	addi	r2,r2,1
    5310:	d0a80815 	stw	r2,-24544(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    5314:	000f8a40 	call	f8a4 <OSCtxSw>
    5318:	e0bffd17 	ldw	r2,-12(fp)
    531c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5320:	e0bfff17 	ldw	r2,-4(fp)
    5324:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    5328:	e037883a 	mov	sp,fp
    532c:	dfc00117 	ldw	ra,4(sp)
    5330:	df000017 	ldw	fp,0(sp)
    5334:	dec00204 	addi	sp,sp,8
    5338:	f800283a 	ret

0000533c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    533c:	defffc04 	addi	sp,sp,-16
    5340:	df000315 	stw	fp,12(sp)
    5344:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5348:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    534c:	d0a80343 	ldbu	r2,-24563(gp)
    5350:	10803fcc 	andi	r2,r2,255
    5354:	10800058 	cmpnei	r2,r2,1
    5358:	1000161e 	bne	r2,zero,53b4 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    535c:	0005303a 	rdctl	r2,status
    5360:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5364:	e0fffe17 	ldw	r3,-8(fp)
    5368:	00bfff84 	movi	r2,-2
    536c:	1884703a 	and	r2,r3,r2
    5370:	1001703a 	wrctl	status,r2
  
  return context;
    5374:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    5378:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    537c:	d0a81103 	ldbu	r2,-24508(gp)
    5380:	10803fcc 	andi	r2,r2,255
    5384:	1000071e 	bne	r2,zero,53a4 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    5388:	d0a80303 	ldbu	r2,-24564(gp)
    538c:	10803fcc 	andi	r2,r2,255
    5390:	10803fe0 	cmpeqi	r2,r2,255
    5394:	1000031e 	bne	r2,zero,53a4 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    5398:	d0a80303 	ldbu	r2,-24564(gp)
    539c:	10800044 	addi	r2,r2,1
    53a0:	d0a80305 	stb	r2,-24564(gp)
    53a4:	e0bffd17 	ldw	r2,-12(fp)
    53a8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    53ac:	e0bfff17 	ldw	r2,-4(fp)
    53b0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    53b4:	e037883a 	mov	sp,fp
    53b8:	df000017 	ldw	fp,0(sp)
    53bc:	dec00104 	addi	sp,sp,4
    53c0:	f800283a 	ret

000053c4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    53c4:	defff804 	addi	sp,sp,-32
    53c8:	dfc00715 	stw	ra,28(sp)
    53cc:	df000615 	stw	fp,24(sp)
    53d0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    53d4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    53d8:	d0a80343 	ldbu	r2,-24563(gp)
    53dc:	10803fcc 	andi	r2,r2,255
    53e0:	10800058 	cmpnei	r2,r2,1
    53e4:	1000281e 	bne	r2,zero,5488 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    53e8:	0005303a 	rdctl	r2,status
    53ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    53f0:	e0fffb17 	ldw	r3,-20(fp)
    53f4:	00bfff84 	movi	r2,-2
    53f8:	1884703a 	and	r2,r3,r2
    53fc:	1001703a 	wrctl	status,r2
  
  return context;
    5400:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    5404:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    5408:	d0a80303 	ldbu	r2,-24564(gp)
    540c:	10803fcc 	andi	r2,r2,255
    5410:	10001926 	beq	r2,zero,5478 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    5414:	d0a80303 	ldbu	r2,-24564(gp)
    5418:	10bfffc4 	addi	r2,r2,-1
    541c:	d0a80305 	stb	r2,-24564(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    5420:	d0a80303 	ldbu	r2,-24564(gp)
    5424:	10803fcc 	andi	r2,r2,255
    5428:	10000e1e 	bne	r2,zero,5464 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    542c:	d0a81103 	ldbu	r2,-24508(gp)
    5430:	10803fcc 	andi	r2,r2,255
    5434:	1000061e 	bne	r2,zero,5450 <OSSchedUnlock+0x8c>
    5438:	e0bffa17 	ldw	r2,-24(fp)
    543c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5440:	e0bffc17 	ldw	r2,-16(fp)
    5444:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    5448:	00062240 	call	6224 <OS_Sched>
    544c:	00000e06 	br	5488 <OSSchedUnlock+0xc4>
    5450:	e0bffa17 	ldw	r2,-24(fp)
    5454:	e0bffd15 	stw	r2,-12(fp)
    5458:	e0bffd17 	ldw	r2,-12(fp)
    545c:	1001703a 	wrctl	status,r2
    5460:	00000906 	br	5488 <OSSchedUnlock+0xc4>
    5464:	e0bffa17 	ldw	r2,-24(fp)
    5468:	e0bffe15 	stw	r2,-8(fp)
    546c:	e0bffe17 	ldw	r2,-8(fp)
    5470:	1001703a 	wrctl	status,r2
    5474:	00000406 	br	5488 <OSSchedUnlock+0xc4>
    5478:	e0bffa17 	ldw	r2,-24(fp)
    547c:	e0bfff15 	stw	r2,-4(fp)
    5480:	e0bfff17 	ldw	r2,-4(fp)
    5484:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    5488:	e037883a 	mov	sp,fp
    548c:	dfc00117 	ldw	ra,4(sp)
    5490:	df000017 	ldw	fp,0(sp)
    5494:	dec00204 	addi	sp,sp,8
    5498:	f800283a 	ret

0000549c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    549c:	defffe04 	addi	sp,sp,-8
    54a0:	dfc00115 	stw	ra,4(sp)
    54a4:	df000015 	stw	fp,0(sp)
    54a8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    54ac:	d0a80343 	ldbu	r2,-24563(gp)
    54b0:	10803fcc 	andi	r2,r2,255
    54b4:	10000f1e 	bne	r2,zero,54f4 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    54b8:	00062f00 	call	62f0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    54bc:	d0a80503 	ldbu	r2,-24556(gp)
    54c0:	d0a80545 	stb	r2,-24555(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    54c4:	d0a80503 	ldbu	r2,-24556(gp)
    54c8:	10c03fcc 	andi	r3,r2,255
    54cc:	008000b4 	movhi	r2,2
    54d0:	1085c104 	addi	r2,r2,5892
    54d4:	18c7883a 	add	r3,r3,r3
    54d8:	18c7883a 	add	r3,r3,r3
    54dc:	10c5883a 	add	r2,r2,r3
    54e0:	10800017 	ldw	r2,0(r2)
    54e4:	d0a80d15 	stw	r2,-24524(gp)
        OSTCBCur      = OSTCBHighRdy;
    54e8:	d0a80d17 	ldw	r2,-24524(gp)
    54ec:	d0a81215 	stw	r2,-24504(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    54f0:	000f9300 	call	f930 <OSStartHighRdy>
    }
}
    54f4:	e037883a 	mov	sp,fp
    54f8:	dfc00117 	ldw	ra,4(sp)
    54fc:	df000017 	ldw	fp,0(sp)
    5500:	dec00204 	addi	sp,sp,8
    5504:	f800283a 	ret

00005508 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    5508:	defff904 	addi	sp,sp,-28
    550c:	dfc00615 	stw	ra,24(sp)
    5510:	df000515 	stw	fp,20(sp)
    5514:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5518:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    551c:	01000084 	movi	r4,2
    5520:	000c0340 	call	c034 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5524:	0005303a 	rdctl	r2,status
    5528:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    552c:	e0fffc17 	ldw	r3,-16(fp)
    5530:	00bfff84 	movi	r2,-2
    5534:	1884703a 	and	r2,r3,r2
    5538:	1001703a 	wrctl	status,r2
  
  return context;
    553c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    5540:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    5544:	d0280415 	stw	zero,-24560(gp)
    5548:	e0bffb17 	ldw	r2,-20(fp)
    554c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5550:	e0bffd17 	ldw	r2,-12(fp)
    5554:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    5558:	0009883a 	mov	r4,zero
    555c:	000c0340 	call	c034 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5560:	0005303a 	rdctl	r2,status
    5564:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5568:	e0fffe17 	ldw	r3,-8(fp)
    556c:	00bfff84 	movi	r2,-2
    5570:	1884703a 	and	r2,r3,r2
    5574:	1001703a 	wrctl	status,r2
  
  return context;
    5578:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    557c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    5580:	d0a80417 	ldw	r2,-24560(gp)
    5584:	d0a80915 	stw	r2,-24540(gp)
    OSStatRdy    = OS_TRUE;
    5588:	00800044 	movi	r2,1
    558c:	d0a81505 	stb	r2,-24492(gp)
    5590:	e0bffb17 	ldw	r2,-20(fp)
    5594:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5598:	e0bfff17 	ldw	r2,-4(fp)
    559c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    55a0:	e037883a 	mov	sp,fp
    55a4:	dfc00117 	ldw	ra,4(sp)
    55a8:	df000017 	ldw	fp,0(sp)
    55ac:	dec00204 	addi	sp,sp,8
    55b0:	f800283a 	ret

000055b4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    55b4:	defff704 	addi	sp,sp,-36
    55b8:	dfc00815 	stw	ra,32(sp)
    55bc:	df000715 	stw	fp,28(sp)
    55c0:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    55c4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    55c8:	000fb480 	call	fb48 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    55cc:	0005303a 	rdctl	r2,status
    55d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    55d4:	e0fffc17 	ldw	r3,-16(fp)
    55d8:	00bfff84 	movi	r2,-2
    55dc:	1884703a 	and	r2,r3,r2
    55e0:	1001703a 	wrctl	status,r2
  
  return context;
    55e4:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    55e8:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    55ec:	d0a81317 	ldw	r2,-24500(gp)
    55f0:	10800044 	addi	r2,r2,1
    55f4:	d0a81315 	stw	r2,-24500(gp)
    55f8:	e0bffb17 	ldw	r2,-20(fp)
    55fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5600:	e0bffd17 	ldw	r2,-12(fp)
    5604:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    5608:	d0a80343 	ldbu	r2,-24563(gp)
    560c:	10803fcc 	andi	r2,r2,255
    5610:	10800058 	cmpnei	r2,r2,1
    5614:	1000691e 	bne	r2,zero,57bc <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    5618:	d0a80703 	ldbu	r2,-24548(gp)
    561c:	10803fcc 	andi	r2,r2,255
    5620:	10c00060 	cmpeqi	r3,r2,1
    5624:	1800061e 	bne	r3,zero,5640 <OSTimeTick+0x8c>
    5628:	10c000a0 	cmpeqi	r3,r2,2
    562c:	1800061e 	bne	r3,zero,5648 <OSTimeTick+0x94>
    5630:	10000a1e 	bne	r2,zero,565c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    5634:	00800044 	movi	r2,1
    5638:	e0bffa05 	stb	r2,-24(fp)
                 break;
    563c:	00000b06 	br	566c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    5640:	e03ffa05 	stb	zero,-24(fp)
                 break;
    5644:	00000906 	br	566c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    5648:	00800044 	movi	r2,1
    564c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    5650:	00800044 	movi	r2,1
    5654:	d0a80705 	stb	r2,-24548(gp)
                 break;
    5658:	00000406 	br	566c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    565c:	00800044 	movi	r2,1
    5660:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    5664:	d0280705 	stb	zero,-24548(gp)
                 break;
    5668:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    566c:	e0bffa03 	ldbu	r2,-24(fp)
    5670:	1000011e 	bne	r2,zero,5678 <OSTimeTick+0xc4>
            return;
    5674:	00005106 	br	57bc <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    5678:	d0a80617 	ldw	r2,-24552(gp)
    567c:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    5680:	00004906 	br	57a8 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5684:	0005303a 	rdctl	r2,status
    5688:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    568c:	e0fffe17 	ldw	r3,-8(fp)
    5690:	00bfff84 	movi	r2,-2
    5694:	1884703a 	and	r2,r3,r2
    5698:	1001703a 	wrctl	status,r2
  
  return context;
    569c:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
    56a0:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    56a4:	e0bff917 	ldw	r2,-28(fp)
    56a8:	10800b8b 	ldhu	r2,46(r2)
    56ac:	10bfffcc 	andi	r2,r2,65535
    56b0:	10003626 	beq	r2,zero,578c <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    56b4:	e0bff917 	ldw	r2,-28(fp)
    56b8:	10800b8b 	ldhu	r2,46(r2)
    56bc:	10bfffc4 	addi	r2,r2,-1
    56c0:	1007883a 	mov	r3,r2
    56c4:	e0bff917 	ldw	r2,-28(fp)
    56c8:	10c00b8d 	sth	r3,46(r2)
    56cc:	e0bff917 	ldw	r2,-28(fp)
    56d0:	10800b8b 	ldhu	r2,46(r2)
    56d4:	10bfffcc 	andi	r2,r2,65535
    56d8:	10002c1e 	bne	r2,zero,578c <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    56dc:	e0bff917 	ldw	r2,-28(fp)
    56e0:	10800c03 	ldbu	r2,48(r2)
    56e4:	10803fcc 	andi	r2,r2,255
    56e8:	10800dcc 	andi	r2,r2,55
    56ec:	10000b26 	beq	r2,zero,571c <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    56f0:	e0bff917 	ldw	r2,-28(fp)
    56f4:	10c00c03 	ldbu	r3,48(r2)
    56f8:	00bff204 	movi	r2,-56
    56fc:	1884703a 	and	r2,r3,r2
    5700:	1007883a 	mov	r3,r2
    5704:	e0bff917 	ldw	r2,-28(fp)
    5708:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    570c:	e0bff917 	ldw	r2,-28(fp)
    5710:	00c00044 	movi	r3,1
    5714:	10c00c45 	stb	r3,49(r2)
    5718:	00000206 	br	5724 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    571c:	e0bff917 	ldw	r2,-28(fp)
    5720:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    5724:	e0bff917 	ldw	r2,-28(fp)
    5728:	10800c03 	ldbu	r2,48(r2)
    572c:	10803fcc 	andi	r2,r2,255
    5730:	1080020c 	andi	r2,r2,8
    5734:	1000151e 	bne	r2,zero,578c <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    5738:	e0bff917 	ldw	r2,-28(fp)
    573c:	10c00d83 	ldbu	r3,54(r2)
    5740:	d0a80f03 	ldbu	r2,-24516(gp)
    5744:	1884b03a 	or	r2,r3,r2
    5748:	d0a80f05 	stb	r2,-24516(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    574c:	e0bff917 	ldw	r2,-28(fp)
    5750:	10800d03 	ldbu	r2,52(r2)
    5754:	10c03fcc 	andi	r3,r2,255
    5758:	e0bff917 	ldw	r2,-28(fp)
    575c:	10800d03 	ldbu	r2,52(r2)
    5760:	11003fcc 	andi	r4,r2,255
    5764:	d0a80f44 	addi	r2,gp,-24515
    5768:	2085883a 	add	r2,r4,r2
    576c:	11000003 	ldbu	r4,0(r2)
    5770:	e0bff917 	ldw	r2,-28(fp)
    5774:	10800d43 	ldbu	r2,53(r2)
    5778:	2084b03a 	or	r2,r4,r2
    577c:	1009883a 	mov	r4,r2
    5780:	d0a80f44 	addi	r2,gp,-24515
    5784:	1885883a 	add	r2,r3,r2
    5788:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    578c:	e0bff917 	ldw	r2,-28(fp)
    5790:	10800517 	ldw	r2,20(r2)
    5794:	e0bff915 	stw	r2,-28(fp)
    5798:	e0bffb17 	ldw	r2,-20(fp)
    579c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    57a0:	e0bfff17 	ldw	r2,-4(fp)
    57a4:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    57a8:	e0bff917 	ldw	r2,-28(fp)
    57ac:	10800c83 	ldbu	r2,50(r2)
    57b0:	10803fcc 	andi	r2,r2,255
    57b4:	10800518 	cmpnei	r2,r2,20
    57b8:	103fb21e 	bne	r2,zero,5684 <__alt_mem_Flash_flash_data+0xf4005684>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    57bc:	e037883a 	mov	sp,fp
    57c0:	dfc00117 	ldw	ra,4(sp)
    57c4:	df000017 	ldw	fp,0(sp)
    57c8:	dec00204 	addi	sp,sp,8
    57cc:	f800283a 	ret

000057d0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    57d0:	deffff04 	addi	sp,sp,-4
    57d4:	df000015 	stw	fp,0(sp)
    57d8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    57dc:	00804784 	movi	r2,286
}
    57e0:	e037883a 	mov	sp,fp
    57e4:	df000017 	ldw	fp,0(sp)
    57e8:	dec00104 	addi	sp,sp,4
    57ec:	f800283a 	ret

000057f0 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    57f0:	deffff04 	addi	sp,sp,-4
    57f4:	df000015 	stw	fp,0(sp)
    57f8:	d839883a 	mov	fp,sp
}
    57fc:	e037883a 	mov	sp,fp
    5800:	df000017 	ldw	fp,0(sp)
    5804:	dec00104 	addi	sp,sp,4
    5808:	f800283a 	ret

0000580c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    580c:	defff804 	addi	sp,sp,-32
    5810:	dfc00715 	stw	ra,28(sp)
    5814:	df000615 	stw	fp,24(sp)
    5818:	df000604 	addi	fp,sp,24
    581c:	e13ffc15 	stw	r4,-16(fp)
    5820:	e17ffd15 	stw	r5,-12(fp)
    5824:	3007883a 	mov	r3,r6
    5828:	3805883a 	mov	r2,r7
    582c:	e0fffe05 	stb	r3,-8(fp)
    5830:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    5834:	e0bffc17 	ldw	r2,-16(fp)
    5838:	10800283 	ldbu	r2,10(r2)
    583c:	10c03fcc 	andi	r3,r2,255
    5840:	00800074 	movhi	r2,1
    5844:	10810304 	addi	r2,r2,1036
    5848:	10c5883a 	add	r2,r2,r3
    584c:	10800003 	ldbu	r2,0(r2)
    5850:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    5854:	e0bffa03 	ldbu	r2,-24(fp)
    5858:	e0fffc17 	ldw	r3,-16(fp)
    585c:	1885883a 	add	r2,r3,r2
    5860:	10800204 	addi	r2,r2,8
    5864:	108000c3 	ldbu	r2,3(r2)
    5868:	10c03fcc 	andi	r3,r2,255
    586c:	00800074 	movhi	r2,1
    5870:	10810304 	addi	r2,r2,1036
    5874:	10c5883a 	add	r2,r2,r3
    5878:	10800003 	ldbu	r2,0(r2)
    587c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    5880:	e0bffa03 	ldbu	r2,-24(fp)
    5884:	100490fa 	slli	r2,r2,3
    5888:	1007883a 	mov	r3,r2
    588c:	e0bffa43 	ldbu	r2,-23(fp)
    5890:	1885883a 	add	r2,r3,r2
    5894:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    5898:	e0fffa83 	ldbu	r3,-22(fp)
    589c:	008000b4 	movhi	r2,2
    58a0:	1085c104 	addi	r2,r2,5892
    58a4:	18c7883a 	add	r3,r3,r3
    58a8:	18c7883a 	add	r3,r3,r3
    58ac:	10c5883a 	add	r2,r2,r3
    58b0:	10800017 	ldw	r2,0(r2)
    58b4:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    58b8:	e0bffb17 	ldw	r2,-20(fp)
    58bc:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    58c0:	e0bffb17 	ldw	r2,-20(fp)
    58c4:	e0fffd17 	ldw	r3,-12(fp)
    58c8:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    58cc:	e0bffb17 	ldw	r2,-20(fp)
    58d0:	10800c03 	ldbu	r2,48(r2)
    58d4:	1007883a 	mov	r3,r2
    58d8:	e0bffe03 	ldbu	r2,-8(fp)
    58dc:	0084303a 	nor	r2,zero,r2
    58e0:	1884703a 	and	r2,r3,r2
    58e4:	1007883a 	mov	r3,r2
    58e8:	e0bffb17 	ldw	r2,-20(fp)
    58ec:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    58f0:	e0bffb17 	ldw	r2,-20(fp)
    58f4:	e0ffff03 	ldbu	r3,-4(fp)
    58f8:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    58fc:	e0bffb17 	ldw	r2,-20(fp)
    5900:	10800c03 	ldbu	r2,48(r2)
    5904:	10803fcc 	andi	r2,r2,255
    5908:	1080020c 	andi	r2,r2,8
    590c:	1000111e 	bne	r2,zero,5954 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    5910:	e0bffb17 	ldw	r2,-20(fp)
    5914:	10c00d83 	ldbu	r3,54(r2)
    5918:	d0a80f03 	ldbu	r2,-24516(gp)
    591c:	1884b03a 	or	r2,r3,r2
    5920:	d0a80f05 	stb	r2,-24516(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    5924:	e0fffa03 	ldbu	r3,-24(fp)
    5928:	e13ffa03 	ldbu	r4,-24(fp)
    592c:	d0a80f44 	addi	r2,gp,-24515
    5930:	2085883a 	add	r2,r4,r2
    5934:	11000003 	ldbu	r4,0(r2)
    5938:	e0bffb17 	ldw	r2,-20(fp)
    593c:	10800d43 	ldbu	r2,53(r2)
    5940:	2084b03a 	or	r2,r4,r2
    5944:	1009883a 	mov	r4,r2
    5948:	d0a80f44 	addi	r2,gp,-24515
    594c:	1885883a 	add	r2,r3,r2
    5950:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    5954:	e13ffb17 	ldw	r4,-20(fp)
    5958:	e17ffc17 	ldw	r5,-16(fp)
    595c:	0005bfc0 	call	5bfc <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    5960:	e0bffb17 	ldw	r2,-20(fp)
    5964:	10800817 	ldw	r2,32(r2)
    5968:	10000826 	beq	r2,zero,598c <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    596c:	e0bffb17 	ldw	r2,-20(fp)
    5970:	10800817 	ldw	r2,32(r2)
    5974:	e13ffb17 	ldw	r4,-20(fp)
    5978:	100b883a 	mov	r5,r2
    597c:	0005cb00 	call	5cb0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    5980:	e0bffb17 	ldw	r2,-20(fp)
    5984:	e0fffc17 	ldw	r3,-16(fp)
    5988:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    598c:	e0bffa83 	ldbu	r2,-22(fp)
}
    5990:	e037883a 	mov	sp,fp
    5994:	dfc00117 	ldw	ra,4(sp)
    5998:	df000017 	ldw	fp,0(sp)
    599c:	dec00204 	addi	sp,sp,8
    59a0:	f800283a 	ret

000059a4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    59a4:	defffd04 	addi	sp,sp,-12
    59a8:	df000215 	stw	fp,8(sp)
    59ac:	df000204 	addi	fp,sp,8
    59b0:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    59b4:	d0a81217 	ldw	r2,-24504(gp)
    59b8:	e0ffff17 	ldw	r3,-4(fp)
    59bc:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    59c0:	d0a81217 	ldw	r2,-24504(gp)
    59c4:	10800d03 	ldbu	r2,52(r2)
    59c8:	10803fcc 	andi	r2,r2,255
    59cc:	d0e81217 	ldw	r3,-24504(gp)
    59d0:	18c00d03 	ldbu	r3,52(r3)
    59d4:	18c03fcc 	andi	r3,r3,255
    59d8:	e13fff17 	ldw	r4,-4(fp)
    59dc:	20c7883a 	add	r3,r4,r3
    59e0:	18c00204 	addi	r3,r3,8
    59e4:	190000c3 	ldbu	r4,3(r3)
    59e8:	d0e81217 	ldw	r3,-24504(gp)
    59ec:	18c00d43 	ldbu	r3,53(r3)
    59f0:	20c6b03a 	or	r3,r4,r3
    59f4:	1809883a 	mov	r4,r3
    59f8:	e0ffff17 	ldw	r3,-4(fp)
    59fc:	1885883a 	add	r2,r3,r2
    5a00:	10800204 	addi	r2,r2,8
    5a04:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    5a08:	e0bfff17 	ldw	r2,-4(fp)
    5a0c:	10c00283 	ldbu	r3,10(r2)
    5a10:	d0a81217 	ldw	r2,-24504(gp)
    5a14:	10800d83 	ldbu	r2,54(r2)
    5a18:	1884b03a 	or	r2,r3,r2
    5a1c:	1007883a 	mov	r3,r2
    5a20:	e0bfff17 	ldw	r2,-4(fp)
    5a24:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    5a28:	d0a81217 	ldw	r2,-24504(gp)
    5a2c:	10800d03 	ldbu	r2,52(r2)
    5a30:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    5a34:	e0fffe03 	ldbu	r3,-8(fp)
    5a38:	e13ffe03 	ldbu	r4,-8(fp)
    5a3c:	d0a80f44 	addi	r2,gp,-24515
    5a40:	2085883a 	add	r2,r4,r2
    5a44:	10800003 	ldbu	r2,0(r2)
    5a48:	1009883a 	mov	r4,r2
    5a4c:	d0a81217 	ldw	r2,-24504(gp)
    5a50:	10800d43 	ldbu	r2,53(r2)
    5a54:	0084303a 	nor	r2,zero,r2
    5a58:	2084703a 	and	r2,r4,r2
    5a5c:	1009883a 	mov	r4,r2
    5a60:	d0a80f44 	addi	r2,gp,-24515
    5a64:	1885883a 	add	r2,r3,r2
    5a68:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    5a6c:	e0fffe03 	ldbu	r3,-8(fp)
    5a70:	d0a80f44 	addi	r2,gp,-24515
    5a74:	1885883a 	add	r2,r3,r2
    5a78:	10800003 	ldbu	r2,0(r2)
    5a7c:	10803fcc 	andi	r2,r2,255
    5a80:	1000071e 	bne	r2,zero,5aa0 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    5a84:	d0a81217 	ldw	r2,-24504(gp)
    5a88:	10800d83 	ldbu	r2,54(r2)
    5a8c:	0084303a 	nor	r2,zero,r2
    5a90:	1007883a 	mov	r3,r2
    5a94:	d0a80f03 	ldbu	r2,-24516(gp)
    5a98:	1884703a 	and	r2,r3,r2
    5a9c:	d0a80f05 	stb	r2,-24516(gp)
    }
}
    5aa0:	e037883a 	mov	sp,fp
    5aa4:	df000017 	ldw	fp,0(sp)
    5aa8:	dec00104 	addi	sp,sp,4
    5aac:	f800283a 	ret

00005ab0 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    5ab0:	defffb04 	addi	sp,sp,-20
    5ab4:	df000415 	stw	fp,16(sp)
    5ab8:	df000404 	addi	fp,sp,16
    5abc:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    5ac0:	d0a81217 	ldw	r2,-24504(gp)
    5ac4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    5ac8:	d0a81217 	ldw	r2,-24504(gp)
    5acc:	e0ffff17 	ldw	r3,-4(fp)
    5ad0:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    5ad4:	e0bfff17 	ldw	r2,-4(fp)
    5ad8:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    5adc:	e0bffc17 	ldw	r2,-16(fp)
    5ae0:	10800017 	ldw	r2,0(r2)
    5ae4:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    5ae8:	00002006 	br	5b6c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    5aec:	d0a81217 	ldw	r2,-24504(gp)
    5af0:	10800d03 	ldbu	r2,52(r2)
    5af4:	10803fcc 	andi	r2,r2,255
    5af8:	d0e81217 	ldw	r3,-24504(gp)
    5afc:	18c00d03 	ldbu	r3,52(r3)
    5b00:	18c03fcc 	andi	r3,r3,255
    5b04:	e13ffd17 	ldw	r4,-12(fp)
    5b08:	20c7883a 	add	r3,r4,r3
    5b0c:	18c00204 	addi	r3,r3,8
    5b10:	190000c3 	ldbu	r4,3(r3)
    5b14:	d0e81217 	ldw	r3,-24504(gp)
    5b18:	18c00d43 	ldbu	r3,53(r3)
    5b1c:	20c6b03a 	or	r3,r4,r3
    5b20:	1809883a 	mov	r4,r3
    5b24:	e0fffd17 	ldw	r3,-12(fp)
    5b28:	1885883a 	add	r2,r3,r2
    5b2c:	10800204 	addi	r2,r2,8
    5b30:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    5b34:	e0bffd17 	ldw	r2,-12(fp)
    5b38:	10c00283 	ldbu	r3,10(r2)
    5b3c:	d0a81217 	ldw	r2,-24504(gp)
    5b40:	10800d83 	ldbu	r2,54(r2)
    5b44:	1884b03a 	or	r2,r3,r2
    5b48:	1007883a 	mov	r3,r2
    5b4c:	e0bffd17 	ldw	r2,-12(fp)
    5b50:	10c00285 	stb	r3,10(r2)
        pevents++;
    5b54:	e0bffc17 	ldw	r2,-16(fp)
    5b58:	10800104 	addi	r2,r2,4
    5b5c:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    5b60:	e0bffc17 	ldw	r2,-16(fp)
    5b64:	10800017 	ldw	r2,0(r2)
    5b68:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    5b6c:	e0bffd17 	ldw	r2,-12(fp)
    5b70:	103fde1e 	bne	r2,zero,5aec <__alt_mem_Flash_flash_data+0xf4005aec>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    5b74:	d0a81217 	ldw	r2,-24504(gp)
    5b78:	10800d03 	ldbu	r2,52(r2)
    5b7c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    5b80:	e0fffe03 	ldbu	r3,-8(fp)
    5b84:	e13ffe03 	ldbu	r4,-8(fp)
    5b88:	d0a80f44 	addi	r2,gp,-24515
    5b8c:	2085883a 	add	r2,r4,r2
    5b90:	10800003 	ldbu	r2,0(r2)
    5b94:	1009883a 	mov	r4,r2
    5b98:	d0a81217 	ldw	r2,-24504(gp)
    5b9c:	10800d43 	ldbu	r2,53(r2)
    5ba0:	0084303a 	nor	r2,zero,r2
    5ba4:	2084703a 	and	r2,r4,r2
    5ba8:	1009883a 	mov	r4,r2
    5bac:	d0a80f44 	addi	r2,gp,-24515
    5bb0:	1885883a 	add	r2,r3,r2
    5bb4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    5bb8:	e0fffe03 	ldbu	r3,-8(fp)
    5bbc:	d0a80f44 	addi	r2,gp,-24515
    5bc0:	1885883a 	add	r2,r3,r2
    5bc4:	10800003 	ldbu	r2,0(r2)
    5bc8:	10803fcc 	andi	r2,r2,255
    5bcc:	1000071e 	bne	r2,zero,5bec <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    5bd0:	d0a81217 	ldw	r2,-24504(gp)
    5bd4:	10800d83 	ldbu	r2,54(r2)
    5bd8:	0084303a 	nor	r2,zero,r2
    5bdc:	1007883a 	mov	r3,r2
    5be0:	d0a80f03 	ldbu	r2,-24516(gp)
    5be4:	1884703a 	and	r2,r3,r2
    5be8:	d0a80f05 	stb	r2,-24516(gp)
    }
}
    5bec:	e037883a 	mov	sp,fp
    5bf0:	df000017 	ldw	fp,0(sp)
    5bf4:	dec00104 	addi	sp,sp,4
    5bf8:	f800283a 	ret

00005bfc <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    5bfc:	defffc04 	addi	sp,sp,-16
    5c00:	df000315 	stw	fp,12(sp)
    5c04:	df000304 	addi	fp,sp,12
    5c08:	e13ffe15 	stw	r4,-8(fp)
    5c0c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    5c10:	e0bffe17 	ldw	r2,-8(fp)
    5c14:	10800d03 	ldbu	r2,52(r2)
    5c18:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    5c1c:	e0bffd03 	ldbu	r2,-12(fp)
    5c20:	e0fffd03 	ldbu	r3,-12(fp)
    5c24:	e13fff17 	ldw	r4,-4(fp)
    5c28:	20c7883a 	add	r3,r4,r3
    5c2c:	18c00204 	addi	r3,r3,8
    5c30:	18c000c3 	ldbu	r3,3(r3)
    5c34:	1809883a 	mov	r4,r3
    5c38:	e0fffe17 	ldw	r3,-8(fp)
    5c3c:	18c00d43 	ldbu	r3,53(r3)
    5c40:	00c6303a 	nor	r3,zero,r3
    5c44:	20c6703a 	and	r3,r4,r3
    5c48:	1809883a 	mov	r4,r3
    5c4c:	e0ffff17 	ldw	r3,-4(fp)
    5c50:	1885883a 	add	r2,r3,r2
    5c54:	10800204 	addi	r2,r2,8
    5c58:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
    5c5c:	e0bffd03 	ldbu	r2,-12(fp)
    5c60:	e0ffff17 	ldw	r3,-4(fp)
    5c64:	1885883a 	add	r2,r3,r2
    5c68:	10800204 	addi	r2,r2,8
    5c6c:	108000c3 	ldbu	r2,3(r2)
    5c70:	10803fcc 	andi	r2,r2,255
    5c74:	10000a1e 	bne	r2,zero,5ca0 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    5c78:	e0bfff17 	ldw	r2,-4(fp)
    5c7c:	10800283 	ldbu	r2,10(r2)
    5c80:	1007883a 	mov	r3,r2
    5c84:	e0bffe17 	ldw	r2,-8(fp)
    5c88:	10800d83 	ldbu	r2,54(r2)
    5c8c:	0084303a 	nor	r2,zero,r2
    5c90:	1884703a 	and	r2,r3,r2
    5c94:	1007883a 	mov	r3,r2
    5c98:	e0bfff17 	ldw	r2,-4(fp)
    5c9c:	10c00285 	stb	r3,10(r2)
    }
}
    5ca0:	e037883a 	mov	sp,fp
    5ca4:	df000017 	ldw	fp,0(sp)
    5ca8:	dec00104 	addi	sp,sp,4
    5cac:	f800283a 	ret

00005cb0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    5cb0:	defffa04 	addi	sp,sp,-24
    5cb4:	df000515 	stw	fp,20(sp)
    5cb8:	df000504 	addi	fp,sp,20
    5cbc:	e13ffe15 	stw	r4,-8(fp)
    5cc0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    5cc4:	e0bffe17 	ldw	r2,-8(fp)
    5cc8:	10800d03 	ldbu	r2,52(r2)
    5ccc:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    5cd0:	e0bffe17 	ldw	r2,-8(fp)
    5cd4:	10800d83 	ldbu	r2,54(r2)
    5cd8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    5cdc:	e0bffe17 	ldw	r2,-8(fp)
    5ce0:	10800d43 	ldbu	r2,53(r2)
    5ce4:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    5ce8:	e0bfff17 	ldw	r2,-4(fp)
    5cec:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    5cf0:	e0bffb17 	ldw	r2,-20(fp)
    5cf4:	10800017 	ldw	r2,0(r2)
    5cf8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    5cfc:	00002506 	br	5d94 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    5d00:	e0bffd03 	ldbu	r2,-12(fp)
    5d04:	e0fffd03 	ldbu	r3,-12(fp)
    5d08:	e13ffc17 	ldw	r4,-16(fp)
    5d0c:	20c7883a 	add	r3,r4,r3
    5d10:	18c00204 	addi	r3,r3,8
    5d14:	18c000c3 	ldbu	r3,3(r3)
    5d18:	1809883a 	mov	r4,r3
    5d1c:	e0fffd83 	ldbu	r3,-10(fp)
    5d20:	00c6303a 	nor	r3,zero,r3
    5d24:	20c6703a 	and	r3,r4,r3
    5d28:	1809883a 	mov	r4,r3
    5d2c:	e0fffc17 	ldw	r3,-16(fp)
    5d30:	1885883a 	add	r2,r3,r2
    5d34:	10800204 	addi	r2,r2,8
    5d38:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
    5d3c:	e0bffd03 	ldbu	r2,-12(fp)
    5d40:	e0fffc17 	ldw	r3,-16(fp)
    5d44:	1885883a 	add	r2,r3,r2
    5d48:	10800204 	addi	r2,r2,8
    5d4c:	108000c3 	ldbu	r2,3(r2)
    5d50:	10803fcc 	andi	r2,r2,255
    5d54:	1000091e 	bne	r2,zero,5d7c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    5d58:	e0bffc17 	ldw	r2,-16(fp)
    5d5c:	10800283 	ldbu	r2,10(r2)
    5d60:	1007883a 	mov	r3,r2
    5d64:	e0bffd43 	ldbu	r2,-11(fp)
    5d68:	0084303a 	nor	r2,zero,r2
    5d6c:	1884703a 	and	r2,r3,r2
    5d70:	1007883a 	mov	r3,r2
    5d74:	e0bffc17 	ldw	r2,-16(fp)
    5d78:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    5d7c:	e0bffb17 	ldw	r2,-20(fp)
    5d80:	10800104 	addi	r2,r2,4
    5d84:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    5d88:	e0bffb17 	ldw	r2,-20(fp)
    5d8c:	10800017 	ldw	r2,0(r2)
    5d90:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    5d94:	e0bffc17 	ldw	r2,-16(fp)
    5d98:	103fd91e 	bne	r2,zero,5d00 <__alt_mem_Flash_flash_data+0xf4005d00>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    5d9c:	e037883a 	mov	sp,fp
    5da0:	df000017 	ldw	fp,0(sp)
    5da4:	dec00104 	addi	sp,sp,4
    5da8:	f800283a 	ret

00005dac <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    5dac:	defffc04 	addi	sp,sp,-16
    5db0:	df000315 	stw	fp,12(sp)
    5db4:	df000304 	addi	fp,sp,12
    5db8:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    5dbc:	e0bfff17 	ldw	r2,-4(fp)
    5dc0:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    5dc4:	e0bfff17 	ldw	r2,-4(fp)
    5dc8:	108002c4 	addi	r2,r2,11
    5dcc:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    5dd0:	e03ffe05 	stb	zero,-8(fp)
    5dd4:	00000706 	br	5df4 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    5dd8:	e0bffd17 	ldw	r2,-12(fp)
    5ddc:	10c00044 	addi	r3,r2,1
    5de0:	e0fffd15 	stw	r3,-12(fp)
    5de4:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    5de8:	e0bffe03 	ldbu	r2,-8(fp)
    5dec:	10800044 	addi	r2,r2,1
    5df0:	e0bffe05 	stb	r2,-8(fp)
    5df4:	e0bffe03 	ldbu	r2,-8(fp)
    5df8:	108000f0 	cmpltui	r2,r2,3
    5dfc:	103ff61e 	bne	r2,zero,5dd8 <__alt_mem_Flash_flash_data+0xf4005dd8>
        *ptbl++ = 0;
    }
}
    5e00:	e037883a 	mov	sp,fp
    5e04:	df000017 	ldw	fp,0(sp)
    5e08:	dec00104 	addi	sp,sp,4
    5e0c:	f800283a 	ret

00005e10 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    5e10:	defffb04 	addi	sp,sp,-20
    5e14:	dfc00415 	stw	ra,16(sp)
    5e18:	df000315 	stw	fp,12(sp)
    5e1c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    5e20:	010000b4 	movhi	r4,2
    5e24:	2101ad04 	addi	r4,r4,1716
    5e28:	0142d004 	movi	r5,2880
    5e2c:	00061700 	call	6170 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    5e30:	008000b4 	movhi	r2,2
    5e34:	1081ad04 	addi	r2,r2,1716
    5e38:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    5e3c:	008000b4 	movhi	r2,2
    5e40:	1081b904 	addi	r2,r2,1764
    5e44:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    5e48:	e03ffd0d 	sth	zero,-12(fp)
    5e4c:	00001306 	br	5e9c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    5e50:	e0bffe17 	ldw	r2,-8(fp)
    5e54:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    5e58:	e0bffe17 	ldw	r2,-8(fp)
    5e5c:	e0ffff17 	ldw	r3,-4(fp)
    5e60:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    5e64:	e0bffe17 	ldw	r2,-8(fp)
    5e68:	00c00fc4 	movi	r3,63
    5e6c:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    5e70:	e0bffe17 	ldw	r2,-8(fp)
    5e74:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    5e78:	e0bffe17 	ldw	r2,-8(fp)
    5e7c:	10800c04 	addi	r2,r2,48
    5e80:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    5e84:	e0bfff17 	ldw	r2,-4(fp)
    5e88:	10800c04 	addi	r2,r2,48
    5e8c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    5e90:	e0bffd0b 	ldhu	r2,-12(fp)
    5e94:	10800044 	addi	r2,r2,1
    5e98:	e0bffd0d 	sth	r2,-12(fp)
    5e9c:	e0bffd0b 	ldhu	r2,-12(fp)
    5ea0:	10800ef0 	cmpltui	r2,r2,59
    5ea4:	103fea1e 	bne	r2,zero,5e50 <__alt_mem_Flash_flash_data+0xf4005e50>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    5ea8:	e0bffe17 	ldw	r2,-8(fp)
    5eac:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    5eb0:	e0bffe17 	ldw	r2,-8(fp)
    5eb4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    5eb8:	e0bffe17 	ldw	r2,-8(fp)
    5ebc:	00c00fc4 	movi	r3,63
    5ec0:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    5ec4:	e0bffe17 	ldw	r2,-8(fp)
    5ec8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    5ecc:	008000b4 	movhi	r2,2
    5ed0:	1081ad04 	addi	r2,r2,1716
    5ed4:	d0a81015 	stw	r2,-24512(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    5ed8:	e037883a 	mov	sp,fp
    5edc:	dfc00117 	ldw	ra,4(sp)
    5ee0:	df000017 	ldw	fp,0(sp)
    5ee4:	dec00204 	addi	sp,sp,8
    5ee8:	f800283a 	ret

00005eec <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    5eec:	deffff04 	addi	sp,sp,-4
    5ef0:	df000015 	stw	fp,0(sp)
    5ef4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    5ef8:	d0281315 	stw	zero,-24500(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    5efc:	d0281105 	stb	zero,-24508(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    5f00:	d0280305 	stb	zero,-24564(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    5f04:	d0280b45 	stb	zero,-24531(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    5f08:	d0280345 	stb	zero,-24563(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    5f0c:	d0280815 	stw	zero,-24544(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    5f10:	d0280415 	stw	zero,-24560(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    5f14:	d0281615 	stw	zero,-24488(gp)
    OSIdleCtrMax  = 0L;
    5f18:	d0280915 	stw	zero,-24540(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    5f1c:	d0281505 	stb	zero,-24492(gp)
#endif
}
    5f20:	e037883a 	mov	sp,fp
    5f24:	df000017 	ldw	fp,0(sp)
    5f28:	dec00104 	addi	sp,sp,4
    5f2c:	f800283a 	ret

00005f30 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    5f30:	defffd04 	addi	sp,sp,-12
    5f34:	df000215 	stw	fp,8(sp)
    5f38:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    5f3c:	d0280f05 	stb	zero,-24516(gp)
    prdytbl       = &OSRdyTbl[0];
    5f40:	d0a80f44 	addi	r2,gp,-24515
    5f44:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    5f48:	e03ffe05 	stb	zero,-8(fp)
    5f4c:	00000706 	br	5f6c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    5f50:	e0bfff17 	ldw	r2,-4(fp)
    5f54:	10c00044 	addi	r3,r2,1
    5f58:	e0ffff15 	stw	r3,-4(fp)
    5f5c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    5f60:	e0bffe03 	ldbu	r2,-8(fp)
    5f64:	10800044 	addi	r2,r2,1
    5f68:	e0bffe05 	stb	r2,-8(fp)
    5f6c:	e0bffe03 	ldbu	r2,-8(fp)
    5f70:	108000f0 	cmpltui	r2,r2,3
    5f74:	103ff61e 	bne	r2,zero,5f50 <__alt_mem_Flash_flash_data+0xf4005f50>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    5f78:	d0280545 	stb	zero,-24555(gp)
    OSPrioHighRdy = 0;
    5f7c:	d0280505 	stb	zero,-24556(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    5f80:	d0280d15 	stw	zero,-24524(gp)
    OSTCBCur      = (OS_TCB *)0;
    5f84:	d0281215 	stw	zero,-24504(gp)
}
    5f88:	e037883a 	mov	sp,fp
    5f8c:	df000017 	ldw	fp,0(sp)
    5f90:	dec00104 	addi	sp,sp,4
    5f94:	f800283a 	ret

00005f98 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    5f98:	defff804 	addi	sp,sp,-32
    5f9c:	dfc00715 	stw	ra,28(sp)
    5fa0:	df000615 	stw	fp,24(sp)
    5fa4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    5fa8:	00bfffd4 	movui	r2,65535
    5fac:	d8800015 	stw	r2,0(sp)
    5fb0:	008000b4 	movhi	r2,2
    5fb4:	10bfad04 	addi	r2,r2,-332
    5fb8:	d8800115 	stw	r2,4(sp)
    5fbc:	00808004 	movi	r2,512
    5fc0:	d8800215 	stw	r2,8(sp)
    5fc4:	d8000315 	stw	zero,12(sp)
    5fc8:	008000c4 	movi	r2,3
    5fcc:	d8800415 	stw	r2,16(sp)
    5fd0:	01000034 	movhi	r4,0
    5fd4:	21190a04 	addi	r4,r4,25640
    5fd8:	000b883a 	mov	r5,zero
    5fdc:	018000b4 	movhi	r6,2
    5fe0:	3181ac04 	addi	r6,r6,1712
    5fe4:	01c00504 	movi	r7,20
    5fe8:	000ae3c0 	call	ae3c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    5fec:	01000504 	movi	r4,20
    5ff0:	01400074 	movhi	r5,1
    5ff4:	29414304 	addi	r5,r5,1292
    5ff8:	e1bfff04 	addi	r6,fp,-4
    5ffc:	000b7080 	call	b708 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    6000:	e037883a 	mov	sp,fp
    6004:	dfc00117 	ldw	ra,4(sp)
    6008:	df000017 	ldw	fp,0(sp)
    600c:	dec00204 	addi	sp,sp,8
    6010:	f800283a 	ret

00006014 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    6014:	defff804 	addi	sp,sp,-32
    6018:	dfc00715 	stw	ra,28(sp)
    601c:	df000615 	stw	fp,24(sp)
    6020:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    6024:	00bfff94 	movui	r2,65534
    6028:	d8800015 	stw	r2,0(sp)
    602c:	008000b4 	movhi	r2,2
    6030:	10bd3504 	addi	r2,r2,-2860
    6034:	d8800115 	stw	r2,4(sp)
    6038:	00808004 	movi	r2,512
    603c:	d8800215 	stw	r2,8(sp)
    6040:	d8000315 	stw	zero,12(sp)
    6044:	008000c4 	movi	r2,3
    6048:	d8800415 	stw	r2,16(sp)
    604c:	01000034 	movhi	r4,0
    6050:	21192104 	addi	r4,r4,25732
    6054:	000b883a 	mov	r5,zero
    6058:	018000b4 	movhi	r6,2
    605c:	31bf3404 	addi	r6,r6,-816
    6060:	01c004c4 	movi	r7,19
    6064:	000ae3c0 	call	ae3c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    6068:	010004c4 	movi	r4,19
    606c:	01400074 	movhi	r5,1
    6070:	29414704 	addi	r5,r5,1308
    6074:	e1bfff04 	addi	r6,fp,-4
    6078:	000b7080 	call	b708 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    607c:	e037883a 	mov	sp,fp
    6080:	dfc00117 	ldw	ra,4(sp)
    6084:	df000017 	ldw	fp,0(sp)
    6088:	dec00204 	addi	sp,sp,8
    608c:	f800283a 	ret

00006090 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    6090:	defffb04 	addi	sp,sp,-20
    6094:	dfc00415 	stw	ra,16(sp)
    6098:	df000315 	stw	fp,12(sp)
    609c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    60a0:	010000b4 	movhi	r4,2
    60a4:	21047d04 	addi	r4,r4,4596
    60a8:	01414404 	movi	r5,1296
    60ac:	00061700 	call	6170 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    60b0:	010000b4 	movhi	r4,2
    60b4:	2105c104 	addi	r4,r4,5892
    60b8:	01401504 	movi	r5,84
    60bc:	00061700 	call	6170 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    60c0:	008000b4 	movhi	r2,2
    60c4:	10847d04 	addi	r2,r2,4596
    60c8:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    60cc:	008000b4 	movhi	r2,2
    60d0:	10849804 	addi	r2,r2,4704
    60d4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    60d8:	e03ffd05 	stb	zero,-12(fp)
    60dc:	00001106 	br	6124 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    60e0:	e0bffe17 	ldw	r2,-8(fp)
    60e4:	e0ffff17 	ldw	r3,-4(fp)
    60e8:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    60ec:	e0bffe17 	ldw	r2,-8(fp)
    60f0:	00c00fc4 	movi	r3,63
    60f4:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    60f8:	e0bffe17 	ldw	r2,-8(fp)
    60fc:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    6100:	e0bffe17 	ldw	r2,-8(fp)
    6104:	10801b04 	addi	r2,r2,108
    6108:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    610c:	e0bfff17 	ldw	r2,-4(fp)
    6110:	10801b04 	addi	r2,r2,108
    6114:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    6118:	e0bffd03 	ldbu	r2,-12(fp)
    611c:	10800044 	addi	r2,r2,1
    6120:	e0bffd05 	stb	r2,-12(fp)
    6124:	e0bffd03 	ldbu	r2,-12(fp)
    6128:	108002f0 	cmpltui	r2,r2,11
    612c:	103fec1e 	bne	r2,zero,60e0 <__alt_mem_Flash_flash_data+0xf40060e0>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    6130:	e0bffe17 	ldw	r2,-8(fp)
    6134:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    6138:	e0bffe17 	ldw	r2,-8(fp)
    613c:	00c00fc4 	movi	r3,63
    6140:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    6144:	e0bffe17 	ldw	r2,-8(fp)
    6148:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    614c:	d0280615 	stw	zero,-24552(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    6150:	008000b4 	movhi	r2,2
    6154:	10847d04 	addi	r2,r2,4596
    6158:	d0a80a15 	stw	r2,-24536(gp)
}
    615c:	e037883a 	mov	sp,fp
    6160:	dfc00117 	ldw	ra,4(sp)
    6164:	df000017 	ldw	fp,0(sp)
    6168:	dec00204 	addi	sp,sp,8
    616c:	f800283a 	ret

00006170 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    6170:	defffd04 	addi	sp,sp,-12
    6174:	df000215 	stw	fp,8(sp)
    6178:	df000204 	addi	fp,sp,8
    617c:	e13ffe15 	stw	r4,-8(fp)
    6180:	2805883a 	mov	r2,r5
    6184:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    6188:	00000706 	br	61a8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    618c:	e0bffe17 	ldw	r2,-8(fp)
    6190:	10c00044 	addi	r3,r2,1
    6194:	e0fffe15 	stw	r3,-8(fp)
    6198:	10000005 	stb	zero,0(r2)
        size--;
    619c:	e0bfff0b 	ldhu	r2,-4(fp)
    61a0:	10bfffc4 	addi	r2,r2,-1
    61a4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    61a8:	e0bfff0b 	ldhu	r2,-4(fp)
    61ac:	103ff71e 	bne	r2,zero,618c <__alt_mem_Flash_flash_data+0xf400618c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    61b0:	e037883a 	mov	sp,fp
    61b4:	df000017 	ldw	fp,0(sp)
    61b8:	dec00104 	addi	sp,sp,4
    61bc:	f800283a 	ret

000061c0 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    61c0:	defffc04 	addi	sp,sp,-16
    61c4:	df000315 	stw	fp,12(sp)
    61c8:	df000304 	addi	fp,sp,12
    61cc:	e13ffd15 	stw	r4,-12(fp)
    61d0:	e17ffe15 	stw	r5,-8(fp)
    61d4:	3005883a 	mov	r2,r6
    61d8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    61dc:	00000b06 	br	620c <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    61e0:	e0bffd17 	ldw	r2,-12(fp)
    61e4:	10c00044 	addi	r3,r2,1
    61e8:	e0fffd15 	stw	r3,-12(fp)
    61ec:	e0fffe17 	ldw	r3,-8(fp)
    61f0:	19000044 	addi	r4,r3,1
    61f4:	e13ffe15 	stw	r4,-8(fp)
    61f8:	18c00003 	ldbu	r3,0(r3)
    61fc:	10c00005 	stb	r3,0(r2)
        size--;
    6200:	e0bfff0b 	ldhu	r2,-4(fp)
    6204:	10bfffc4 	addi	r2,r2,-1
    6208:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    620c:	e0bfff0b 	ldhu	r2,-4(fp)
    6210:	103ff31e 	bne	r2,zero,61e0 <__alt_mem_Flash_flash_data+0xf40061e0>
        *pdest++ = *psrc++;
        size--;
    }
}
    6214:	e037883a 	mov	sp,fp
    6218:	df000017 	ldw	fp,0(sp)
    621c:	dec00104 	addi	sp,sp,4
    6220:	f800283a 	ret

00006224 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    6224:	defffb04 	addi	sp,sp,-20
    6228:	dfc00415 	stw	ra,16(sp)
    622c:	df000315 	stw	fp,12(sp)
    6230:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    6234:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6238:	0005303a 	rdctl	r2,status
    623c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6240:	e0fffe17 	ldw	r3,-8(fp)
    6244:	00bfff84 	movi	r2,-2
    6248:	1884703a 	and	r2,r3,r2
    624c:	1001703a 	wrctl	status,r2
  
  return context;
    6250:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    6254:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    6258:	d0a81103 	ldbu	r2,-24508(gp)
    625c:	10803fcc 	andi	r2,r2,255
    6260:	10001a1e 	bne	r2,zero,62cc <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    6264:	d0a80303 	ldbu	r2,-24564(gp)
    6268:	10803fcc 	andi	r2,r2,255
    626c:	1000171e 	bne	r2,zero,62cc <OS_Sched+0xa8>
            OS_SchedNew();
    6270:	00062f00 	call	62f0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    6274:	d0e80503 	ldbu	r3,-24556(gp)
    6278:	d0a80543 	ldbu	r2,-24555(gp)
    627c:	18c03fcc 	andi	r3,r3,255
    6280:	10803fcc 	andi	r2,r2,255
    6284:	18801126 	beq	r3,r2,62cc <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    6288:	d0a80503 	ldbu	r2,-24556(gp)
    628c:	10c03fcc 	andi	r3,r2,255
    6290:	008000b4 	movhi	r2,2
    6294:	1085c104 	addi	r2,r2,5892
    6298:	18c7883a 	add	r3,r3,r3
    629c:	18c7883a 	add	r3,r3,r3
    62a0:	10c5883a 	add	r2,r2,r3
    62a4:	10800017 	ldw	r2,0(r2)
    62a8:	d0a80d15 	stw	r2,-24524(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    62ac:	d0a80d17 	ldw	r2,-24524(gp)
    62b0:	10c00e17 	ldw	r3,56(r2)
    62b4:	18c00044 	addi	r3,r3,1
    62b8:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    62bc:	d0a80817 	ldw	r2,-24544(gp)
    62c0:	10800044 	addi	r2,r2,1
    62c4:	d0a80815 	stw	r2,-24544(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    62c8:	000f8a40 	call	f8a4 <OSCtxSw>
    62cc:	e0bffd17 	ldw	r2,-12(fp)
    62d0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    62d4:	e0bfff17 	ldw	r2,-4(fp)
    62d8:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    62dc:	e037883a 	mov	sp,fp
    62e0:	dfc00117 	ldw	ra,4(sp)
    62e4:	df000017 	ldw	fp,0(sp)
    62e8:	dec00204 	addi	sp,sp,8
    62ec:	f800283a 	ret

000062f0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    62f0:	defffe04 	addi	sp,sp,-8
    62f4:	df000115 	stw	fp,4(sp)
    62f8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    62fc:	d0a80f03 	ldbu	r2,-24516(gp)
    6300:	10c03fcc 	andi	r3,r2,255
    6304:	00800074 	movhi	r2,1
    6308:	10810304 	addi	r2,r2,1036
    630c:	10c5883a 	add	r2,r2,r3
    6310:	10800003 	ldbu	r2,0(r2)
    6314:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    6318:	e0bfff03 	ldbu	r2,-4(fp)
    631c:	100490fa 	slli	r2,r2,3
    6320:	1009883a 	mov	r4,r2
    6324:	e0ffff03 	ldbu	r3,-4(fp)
    6328:	d0a80f44 	addi	r2,gp,-24515
    632c:	1885883a 	add	r2,r3,r2
    6330:	10800003 	ldbu	r2,0(r2)
    6334:	10c03fcc 	andi	r3,r2,255
    6338:	00800074 	movhi	r2,1
    633c:	10810304 	addi	r2,r2,1036
    6340:	10c5883a 	add	r2,r2,r3
    6344:	10800003 	ldbu	r2,0(r2)
    6348:	2085883a 	add	r2,r4,r2
    634c:	d0a80505 	stb	r2,-24556(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    6350:	e037883a 	mov	sp,fp
    6354:	df000017 	ldw	fp,0(sp)
    6358:	dec00104 	addi	sp,sp,4
    635c:	f800283a 	ret

00006360 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    6360:	defffc04 	addi	sp,sp,-16
    6364:	df000315 	stw	fp,12(sp)
    6368:	df000304 	addi	fp,sp,12
    636c:	e13ffe15 	stw	r4,-8(fp)
    6370:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    6374:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    6378:	00000b06 	br	63a8 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    637c:	e0bffe17 	ldw	r2,-8(fp)
    6380:	10c00044 	addi	r3,r2,1
    6384:	e0fffe15 	stw	r3,-8(fp)
    6388:	e0ffff17 	ldw	r3,-4(fp)
    638c:	19000044 	addi	r4,r3,1
    6390:	e13fff15 	stw	r4,-4(fp)
    6394:	18c00003 	ldbu	r3,0(r3)
    6398:	10c00005 	stb	r3,0(r2)
        len++;
    639c:	e0bffd03 	ldbu	r2,-12(fp)
    63a0:	10800044 	addi	r2,r2,1
    63a4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    63a8:	e0bfff17 	ldw	r2,-4(fp)
    63ac:	10800003 	ldbu	r2,0(r2)
    63b0:	10803fcc 	andi	r2,r2,255
    63b4:	103ff11e 	bne	r2,zero,637c <__alt_mem_Flash_flash_data+0xf400637c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    63b8:	e0bffe17 	ldw	r2,-8(fp)
    63bc:	10000005 	stb	zero,0(r2)
    return (len);
    63c0:	e0bffd03 	ldbu	r2,-12(fp)
}
    63c4:	e037883a 	mov	sp,fp
    63c8:	df000017 	ldw	fp,0(sp)
    63cc:	dec00104 	addi	sp,sp,4
    63d0:	f800283a 	ret

000063d4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    63d4:	defffd04 	addi	sp,sp,-12
    63d8:	df000215 	stw	fp,8(sp)
    63dc:	df000204 	addi	fp,sp,8
    63e0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    63e4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    63e8:	00000606 	br	6404 <OS_StrLen+0x30>
        psrc++;
    63ec:	e0bfff17 	ldw	r2,-4(fp)
    63f0:	10800044 	addi	r2,r2,1
    63f4:	e0bfff15 	stw	r2,-4(fp)
        len++;
    63f8:	e0bffe03 	ldbu	r2,-8(fp)
    63fc:	10800044 	addi	r2,r2,1
    6400:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    6404:	e0bfff17 	ldw	r2,-4(fp)
    6408:	10800003 	ldbu	r2,0(r2)
    640c:	10803fcc 	andi	r2,r2,255
    6410:	103ff61e 	bne	r2,zero,63ec <__alt_mem_Flash_flash_data+0xf40063ec>
        psrc++;
        len++;
    }
    return (len);
    6414:	e0bffe03 	ldbu	r2,-8(fp)
}
    6418:	e037883a 	mov	sp,fp
    641c:	df000017 	ldw	fp,0(sp)
    6420:	dec00104 	addi	sp,sp,4
    6424:	f800283a 	ret

00006428 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    6428:	defffa04 	addi	sp,sp,-24
    642c:	dfc00515 	stw	ra,20(sp)
    6430:	df000415 	stw	fp,16(sp)
    6434:	df000404 	addi	fp,sp,16
    6438:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    643c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6440:	0005303a 	rdctl	r2,status
    6444:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6448:	e0fffd17 	ldw	r3,-12(fp)
    644c:	00bfff84 	movi	r2,-2
    6450:	1884703a 	and	r2,r3,r2
    6454:	1001703a 	wrctl	status,r2
  
  return context;
    6458:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    645c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    6460:	d0a80417 	ldw	r2,-24560(gp)
    6464:	10800044 	addi	r2,r2,1
    6468:	d0a80415 	stw	r2,-24560(gp)
    646c:	e0bffc17 	ldw	r2,-16(fp)
    6470:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6474:	e0bffe17 	ldw	r2,-8(fp)
    6478:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    647c:	000fb9c0 	call	fb9c <OSTaskIdleHook>
    }
    6480:	003fef06 	br	6440 <__alt_mem_Flash_flash_data+0xf4006440>

00006484 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    6484:	defff804 	addi	sp,sp,-32
    6488:	dfc00715 	stw	ra,28(sp)
    648c:	df000615 	stw	fp,24(sp)
    6490:	dc400515 	stw	r17,20(sp)
    6494:	dc000415 	stw	r16,16(sp)
    6498:	df000604 	addi	fp,sp,24
    649c:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    64a0:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    64a4:	00000206 	br	64b0 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    64a8:	01000044 	movi	r4,1
    64ac:	000c0340 	call	c034 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    64b0:	d0a81503 	ldbu	r2,-24492(gp)
    64b4:	10803fcc 	andi	r2,r2,255
    64b8:	103ffb26 	beq	r2,zero,64a8 <__alt_mem_Flash_flash_data+0xf40064a8>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    64bc:	d0e80917 	ldw	r3,-24540(gp)
    64c0:	00947b34 	movhi	r2,20972
    64c4:	10a147c4 	addi	r2,r2,-31457
    64c8:	1888383a 	mulxuu	r4,r3,r2
    64cc:	1885383a 	mul	r2,r3,r2
    64d0:	1021883a 	mov	r16,r2
    64d4:	2023883a 	mov	r17,r4
    64d8:	8804d17a 	srli	r2,r17,5
    64dc:	d0a80915 	stw	r2,-24540(gp)
    if (OSIdleCtrMax == 0L) {
    64e0:	d0a80917 	ldw	r2,-24540(gp)
    64e4:	1000031e 	bne	r2,zero,64f4 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
    64e8:	d0280b05 	stb	zero,-24532(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    64ec:	01003fc4 	movi	r4,255
    64f0:	000bc880 	call	bc88 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    64f4:	0005303a 	rdctl	r2,status
    64f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    64fc:	e0fffb17 	ldw	r3,-20(fp)
    6500:	00bfff84 	movi	r2,-2
    6504:	1884703a 	and	r2,r3,r2
    6508:	1001703a 	wrctl	status,r2
  
  return context;
    650c:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    6510:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    6514:	d0a80417 	ldw	r2,-24560(gp)
    6518:	d0a81615 	stw	r2,-24488(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    651c:	d0280415 	stw	zero,-24560(gp)
    6520:	e0bffa17 	ldw	r2,-24(fp)
    6524:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6528:	e0bffc17 	ldw	r2,-16(fp)
    652c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    6530:	d0e81617 	ldw	r3,-24488(gp)
    6534:	d0a80917 	ldw	r2,-24540(gp)
    6538:	1885203a 	divu	r2,r3,r2
    653c:	1007883a 	mov	r3,r2
    6540:	00801904 	movi	r2,100
    6544:	10c5c83a 	sub	r2,r2,r3
    6548:	d0a80b05 	stb	r2,-24532(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    654c:	000fb2c0 	call	fb2c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    6550:	00065600 	call	6560 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    6554:	0009883a 	mov	r4,zero
    6558:	000c0340 	call	c034 <OSTimeDly>
    }
    655c:	003fe506 	br	64f4 <__alt_mem_Flash_flash_data+0xf40064f4>

00006560 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    6560:	defffa04 	addi	sp,sp,-24
    6564:	dfc00515 	stw	ra,20(sp)
    6568:	df000415 	stw	fp,16(sp)
    656c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    6570:	e03ffc05 	stb	zero,-16(fp)
    6574:	00002406 	br	6608 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    6578:	e0fffc03 	ldbu	r3,-16(fp)
    657c:	e0bffe04 	addi	r2,fp,-8
    6580:	1809883a 	mov	r4,r3
    6584:	100b883a 	mov	r5,r2
    6588:	000bac00 	call	bac0 <OSTaskStkChk>
    658c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    6590:	e0bffc43 	ldbu	r2,-15(fp)
    6594:	1000191e 	bne	r2,zero,65fc <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    6598:	e0fffc03 	ldbu	r3,-16(fp)
    659c:	008000b4 	movhi	r2,2
    65a0:	1085c104 	addi	r2,r2,5892
    65a4:	18c7883a 	add	r3,r3,r3
    65a8:	18c7883a 	add	r3,r3,r3
    65ac:	10c5883a 	add	r2,r2,r3
    65b0:	10800017 	ldw	r2,0(r2)
    65b4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    65b8:	e0bffd17 	ldw	r2,-12(fp)
    65bc:	10000f26 	beq	r2,zero,65fc <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    65c0:	e0bffd17 	ldw	r2,-12(fp)
    65c4:	10800060 	cmpeqi	r2,r2,1
    65c8:	10000c1e 	bne	r2,zero,65fc <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    65cc:	e0bffd17 	ldw	r2,-12(fp)
    65d0:	10c00217 	ldw	r3,8(r2)
    65d4:	e0bffd17 	ldw	r2,-12(fp)
    65d8:	10800317 	ldw	r2,12(r2)
    65dc:	1085883a 	add	r2,r2,r2
    65e0:	1085883a 	add	r2,r2,r2
    65e4:	1887883a 	add	r3,r3,r2
    65e8:	e0bffd17 	ldw	r2,-12(fp)
    65ec:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    65f0:	e0ffff17 	ldw	r3,-4(fp)
    65f4:	e0bffd17 	ldw	r2,-12(fp)
    65f8:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    65fc:	e0bffc03 	ldbu	r2,-16(fp)
    6600:	10800044 	addi	r2,r2,1
    6604:	e0bffc05 	stb	r2,-16(fp)
    6608:	e0bffc03 	ldbu	r2,-16(fp)
    660c:	10800570 	cmpltui	r2,r2,21
    6610:	103fd91e 	bne	r2,zero,6578 <__alt_mem_Flash_flash_data+0xf4006578>
#endif
                }
            }
        }
    }
}
    6614:	e037883a 	mov	sp,fp
    6618:	dfc00117 	ldw	ra,4(sp)
    661c:	df000017 	ldw	fp,0(sp)
    6620:	dec00204 	addi	sp,sp,8
    6624:	f800283a 	ret

00006628 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    6628:	defff204 	addi	sp,sp,-56
    662c:	dfc00d15 	stw	ra,52(sp)
    6630:	df000c15 	stw	fp,48(sp)
    6634:	df000c04 	addi	fp,sp,48
    6638:	e17ffc15 	stw	r5,-16(fp)
    663c:	e1bffd15 	stw	r6,-12(fp)
    6640:	3807883a 	mov	r3,r7
    6644:	e0800417 	ldw	r2,16(fp)
    6648:	e13ffb05 	stb	r4,-20(fp)
    664c:	e0fffe0d 	sth	r3,-8(fp)
    6650:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    6654:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6658:	0005303a 	rdctl	r2,status
    665c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6660:	e0fff617 	ldw	r3,-40(fp)
    6664:	00bfff84 	movi	r2,-2
    6668:	1884703a 	and	r2,r3,r2
    666c:	1001703a 	wrctl	status,r2
  
  return context;
    6670:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
    6674:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    6678:	d0a80a17 	ldw	r2,-24536(gp)
    667c:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
    6680:	e0bff517 	ldw	r2,-44(fp)
    6684:	10009326 	beq	r2,zero,68d4 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    6688:	e0bff517 	ldw	r2,-44(fp)
    668c:	10800517 	ldw	r2,20(r2)
    6690:	d0a80a15 	stw	r2,-24536(gp)
    6694:	e0bff417 	ldw	r2,-48(fp)
    6698:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    669c:	e0bff717 	ldw	r2,-36(fp)
    66a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    66a4:	e0bff517 	ldw	r2,-44(fp)
    66a8:	e0fffc17 	ldw	r3,-16(fp)
    66ac:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    66b0:	e0bff517 	ldw	r2,-44(fp)
    66b4:	e0fffb03 	ldbu	r3,-20(fp)
    66b8:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    66bc:	e0bff517 	ldw	r2,-44(fp)
    66c0:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    66c4:	e0bff517 	ldw	r2,-44(fp)
    66c8:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    66cc:	e0bff517 	ldw	r2,-44(fp)
    66d0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    66d4:	e0bff517 	ldw	r2,-44(fp)
    66d8:	e0c00317 	ldw	r3,12(fp)
    66dc:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    66e0:	e0bff517 	ldw	r2,-44(fp)
    66e4:	e0c00217 	ldw	r3,8(fp)
    66e8:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    66ec:	e0bff517 	ldw	r2,-44(fp)
    66f0:	e0fffd17 	ldw	r3,-12(fp)
    66f4:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    66f8:	e0bff517 	ldw	r2,-44(fp)
    66fc:	e0ffff0b 	ldhu	r3,-4(fp)
    6700:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    6704:	e0bff517 	ldw	r2,-44(fp)
    6708:	e0fffe0b 	ldhu	r3,-8(fp)
    670c:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    6710:	e0bff517 	ldw	r2,-44(fp)
    6714:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    6718:	e0bffb03 	ldbu	r2,-20(fp)
    671c:	1004d0fa 	srli	r2,r2,3
    6720:	1007883a 	mov	r3,r2
    6724:	e0bff517 	ldw	r2,-44(fp)
    6728:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    672c:	e0bffb03 	ldbu	r2,-20(fp)
    6730:	108001cc 	andi	r2,r2,7
    6734:	1007883a 	mov	r3,r2
    6738:	e0bff517 	ldw	r2,-44(fp)
    673c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    6740:	e0bff517 	ldw	r2,-44(fp)
    6744:	10800d03 	ldbu	r2,52(r2)
    6748:	10803fcc 	andi	r2,r2,255
    674c:	00c00044 	movi	r3,1
    6750:	1884983a 	sll	r2,r3,r2
    6754:	1007883a 	mov	r3,r2
    6758:	e0bff517 	ldw	r2,-44(fp)
    675c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    6760:	e0bff517 	ldw	r2,-44(fp)
    6764:	10800cc3 	ldbu	r2,51(r2)
    6768:	10803fcc 	andi	r2,r2,255
    676c:	00c00044 	movi	r3,1
    6770:	1884983a 	sll	r2,r3,r2
    6774:	1007883a 	mov	r3,r2
    6778:	e0bff517 	ldw	r2,-44(fp)
    677c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    6780:	e0bff517 	ldw	r2,-44(fp)
    6784:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    6788:	e0bff517 	ldw	r2,-44(fp)
    678c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    6790:	e0bff517 	ldw	r2,-44(fp)
    6794:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    6798:	e0bff517 	ldw	r2,-44(fp)
    679c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    67a0:	e0bff517 	ldw	r2,-44(fp)
    67a4:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    67a8:	e0bff517 	ldw	r2,-44(fp)
    67ac:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    67b0:	e0bff517 	ldw	r2,-44(fp)
    67b4:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    67b8:	e0bff517 	ldw	r2,-44(fp)
    67bc:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    67c0:	e0bff517 	ldw	r2,-44(fp)
    67c4:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    67c8:	e0bff517 	ldw	r2,-44(fp)
    67cc:	00c00fc4 	movi	r3,63
    67d0:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    67d4:	e0bff517 	ldw	r2,-44(fp)
    67d8:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    67dc:	e13ff517 	ldw	r4,-44(fp)
    67e0:	000fbb80 	call	fbb8 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    67e4:	e13ff517 	ldw	r4,-44(fp)
    67e8:	000fad00 	call	fad0 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    67ec:	0005303a 	rdctl	r2,status
    67f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    67f4:	e0fff817 	ldw	r3,-32(fp)
    67f8:	00bfff84 	movi	r2,-2
    67fc:	1884703a 	and	r2,r3,r2
    6800:	1001703a 	wrctl	status,r2
  
  return context;
    6804:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
    6808:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    680c:	e0fffb03 	ldbu	r3,-20(fp)
    6810:	008000b4 	movhi	r2,2
    6814:	1085c104 	addi	r2,r2,5892
    6818:	18c7883a 	add	r3,r3,r3
    681c:	18c7883a 	add	r3,r3,r3
    6820:	10c5883a 	add	r2,r2,r3
    6824:	e0fff517 	ldw	r3,-44(fp)
    6828:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    682c:	d0e80617 	ldw	r3,-24552(gp)
    6830:	e0bff517 	ldw	r2,-44(fp)
    6834:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    6838:	e0bff517 	ldw	r2,-44(fp)
    683c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    6840:	d0a80617 	ldw	r2,-24552(gp)
    6844:	10000326 	beq	r2,zero,6854 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    6848:	d0a80617 	ldw	r2,-24552(gp)
    684c:	e0fff517 	ldw	r3,-44(fp)
    6850:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    6854:	e0bff517 	ldw	r2,-44(fp)
    6858:	d0a80615 	stw	r2,-24552(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    685c:	e0bff517 	ldw	r2,-44(fp)
    6860:	10c00d83 	ldbu	r3,54(r2)
    6864:	d0a80f03 	ldbu	r2,-24516(gp)
    6868:	1884b03a 	or	r2,r3,r2
    686c:	d0a80f05 	stb	r2,-24516(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    6870:	e0bff517 	ldw	r2,-44(fp)
    6874:	10800d03 	ldbu	r2,52(r2)
    6878:	10c03fcc 	andi	r3,r2,255
    687c:	e0bff517 	ldw	r2,-44(fp)
    6880:	10800d03 	ldbu	r2,52(r2)
    6884:	11003fcc 	andi	r4,r2,255
    6888:	d0a80f44 	addi	r2,gp,-24515
    688c:	2085883a 	add	r2,r4,r2
    6890:	11000003 	ldbu	r4,0(r2)
    6894:	e0bff517 	ldw	r2,-44(fp)
    6898:	10800d43 	ldbu	r2,53(r2)
    689c:	2084b03a 	or	r2,r4,r2
    68a0:	1009883a 	mov	r4,r2
    68a4:	d0a80f44 	addi	r2,gp,-24515
    68a8:	1885883a 	add	r2,r3,r2
    68ac:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    68b0:	d0a80b43 	ldbu	r2,-24531(gp)
    68b4:	10800044 	addi	r2,r2,1
    68b8:	d0a80b45 	stb	r2,-24531(gp)
    68bc:	e0bff417 	ldw	r2,-48(fp)
    68c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    68c4:	e0bff917 	ldw	r2,-28(fp)
    68c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    68cc:	0005883a 	mov	r2,zero
    68d0:	00000506 	br	68e8 <OS_TCBInit+0x2c0>
    68d4:	e0bff417 	ldw	r2,-48(fp)
    68d8:	e0bffa15 	stw	r2,-24(fp)
    68dc:	e0bffa17 	ldw	r2,-24(fp)
    68e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    68e4:	00801084 	movi	r2,66
}
    68e8:	e037883a 	mov	sp,fp
    68ec:	dfc00117 	ldw	ra,4(sp)
    68f0:	df000017 	ldw	fp,0(sp)
    68f4:	dec00204 	addi	sp,sp,8
    68f8:	f800283a 	ret

000068fc <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    68fc:	defffe04 	addi	sp,sp,-8
    6900:	df000115 	stw	fp,4(sp)
    6904:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    6908:	d0a01804 	addi	r2,gp,-32672
    690c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    6910:	d0a01904 	addi	r2,gp,-32668
    6914:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    6918:	d0a01a84 	addi	r2,gp,-32662
    691c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    6920:	d0a01b04 	addi	r2,gp,-32660
    6924:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    6928:	d0a01a04 	addi	r2,gp,-32664
    692c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    6930:	d0a01b84 	addi	r2,gp,-32658
    6934:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    6938:	d0a01c04 	addi	r2,gp,-32656
    693c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    6940:	d0a01c84 	addi	r2,gp,-32654
    6944:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    6948:	d0a01d04 	addi	r2,gp,-32652
    694c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    6950:	d0a01d84 	addi	r2,gp,-32650
    6954:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    6958:	d0a01e04 	addi	r2,gp,-32648
    695c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    6960:	d0a01e84 	addi	r2,gp,-32646
    6964:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    6968:	d0a01f04 	addi	r2,gp,-32644
    696c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    6970:	d0a01f84 	addi	r2,gp,-32642
    6974:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    6978:	d0a02004 	addi	r2,gp,-32640
    697c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    6980:	d0a02084 	addi	r2,gp,-32638
    6984:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    6988:	d0a02104 	addi	r2,gp,-32636
    698c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    6990:	d0a02184 	addi	r2,gp,-32634
    6994:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    6998:	d0a02204 	addi	r2,gp,-32632
    699c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    69a0:	d0a02284 	addi	r2,gp,-32630
    69a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    69a8:	d0a02304 	addi	r2,gp,-32628
    69ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    69b0:	d0a02384 	addi	r2,gp,-32626
    69b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    69b8:	d0a02404 	addi	r2,gp,-32624
    69bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    69c0:	d0a02484 	addi	r2,gp,-32622
    69c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    69c8:	d0a02504 	addi	r2,gp,-32620
    69cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    69d0:	d0a02584 	addi	r2,gp,-32618
    69d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    69d8:	d0a02604 	addi	r2,gp,-32616
    69dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    69e0:	d0a02684 	addi	r2,gp,-32614
    69e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    69e8:	d0a02704 	addi	r2,gp,-32612
    69ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    69f0:	d0a02784 	addi	r2,gp,-32610
    69f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    69f8:	d0a02804 	addi	r2,gp,-32608
    69fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    6a00:	d0a02884 	addi	r2,gp,-32606
    6a04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    6a08:	d0a02904 	addi	r2,gp,-32604
    6a0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    6a10:	d0a02984 	addi	r2,gp,-32602
    6a14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    6a18:	d0a02a04 	addi	r2,gp,-32600
    6a1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    6a20:	d0a02a84 	addi	r2,gp,-32598
    6a24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    6a28:	d0a02b04 	addi	r2,gp,-32596
    6a2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    6a30:	d0a02b84 	addi	r2,gp,-32594
    6a34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    6a38:	d0a02c04 	addi	r2,gp,-32592
    6a3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    6a40:	d0a02c84 	addi	r2,gp,-32590
    6a44:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    6a48:	d0a02d04 	addi	r2,gp,-32588
    6a4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    6a50:	d0a02d84 	addi	r2,gp,-32586
    6a54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    6a58:	d0a02e04 	addi	r2,gp,-32584
    6a5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    6a60:	d0a02e84 	addi	r2,gp,-32582
    6a64:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    6a68:	d0a02f04 	addi	r2,gp,-32580
    6a6c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    6a70:	d0a03404 	addi	r2,gp,-32560
    6a74:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    6a78:	e037883a 	mov	sp,fp
    6a7c:	df000017 	ldw	fp,0(sp)
    6a80:	dec00104 	addi	sp,sp,4
    6a84:	f800283a 	ret

00006a88 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    6a88:	defff204 	addi	sp,sp,-56
    6a8c:	df000d15 	stw	fp,52(sp)
    6a90:	df000d04 	addi	fp,sp,52
    6a94:	e13ffc15 	stw	r4,-16(fp)
    6a98:	2807883a 	mov	r3,r5
    6a9c:	3005883a 	mov	r2,r6
    6aa0:	e1ffff15 	stw	r7,-4(fp)
    6aa4:	e0fffd0d 	sth	r3,-12(fp)
    6aa8:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6aac:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    6ab0:	e0bfff17 	ldw	r2,-4(fp)
    6ab4:	1000021e 	bne	r2,zero,6ac0 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    6ab8:	0005883a 	mov	r2,zero
    6abc:	0000b006 	br	6d80 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    6ac0:	e0bffc17 	ldw	r2,-16(fp)
    6ac4:	1000051e 	bne	r2,zero,6adc <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6ac8:	e0bfff17 	ldw	r2,-4(fp)
    6acc:	00c01b84 	movi	r3,110
    6ad0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6ad4:	0005883a 	mov	r2,zero
    6ad8:	0000a906 	br	6d80 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    6adc:	e0bffc17 	ldw	r2,-16(fp)
    6ae0:	10800003 	ldbu	r2,0(r2)
    6ae4:	10803fcc 	andi	r2,r2,255
    6ae8:	10800160 	cmpeqi	r2,r2,5
    6aec:	1000051e 	bne	r2,zero,6b04 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    6af0:	e0bfff17 	ldw	r2,-4(fp)
    6af4:	00c00044 	movi	r3,1
    6af8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6afc:	0005883a 	mov	r2,zero
    6b00:	00009f06 	br	6d80 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    6b04:	e0fffe03 	ldbu	r3,-8(fp)
    6b08:	00bfe004 	movi	r2,-128
    6b0c:	1884703a 	and	r2,r3,r2
    6b10:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    6b14:	e0bff503 	ldbu	r2,-44(fp)
    6b18:	10000626 	beq	r2,zero,6b34 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    6b1c:	e0bffe03 	ldbu	r2,-8(fp)
    6b20:	10801fcc 	andi	r2,r2,127
    6b24:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    6b28:	00800044 	movi	r2,1
    6b2c:	e0bff385 	stb	r2,-50(fp)
    6b30:	00000106 	br	6b38 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    6b34:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    6b38:	e0bfff17 	ldw	r2,-4(fp)
    6b3c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6b40:	0005303a 	rdctl	r2,status
    6b44:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6b48:	e0fff617 	ldw	r3,-40(fp)
    6b4c:	00bfff84 	movi	r2,-2
    6b50:	1884703a 	and	r2,r3,r2
    6b54:	1001703a 	wrctl	status,r2
  
  return context;
    6b58:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
    6b5c:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    6b60:	e0bffe03 	ldbu	r2,-8(fp)
    6b64:	10c00060 	cmpeqi	r3,r2,1
    6b68:	18005f1e 	bne	r3,zero,6ce8 <OSFlagAccept+0x260>
    6b6c:	10c00088 	cmpgei	r3,r2,2
    6b70:	1800021e 	bne	r3,zero,6b7c <OSFlagAccept+0xf4>
    6b74:	10003f26 	beq	r2,zero,6c74 <OSFlagAccept+0x1ec>
    6b78:	00007706 	br	6d58 <OSFlagAccept+0x2d0>
    6b7c:	10c000a0 	cmpeqi	r3,r2,2
    6b80:	1800031e 	bne	r3,zero,6b90 <OSFlagAccept+0x108>
    6b84:	108000e0 	cmpeqi	r2,r2,3
    6b88:	10001e1e 	bne	r2,zero,6c04 <OSFlagAccept+0x17c>
    6b8c:	00007206 	br	6d58 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    6b90:	e0bffc17 	ldw	r2,-16(fp)
    6b94:	10c0020b 	ldhu	r3,8(r2)
    6b98:	e0bffd0b 	ldhu	r2,-12(fp)
    6b9c:	1884703a 	and	r2,r3,r2
    6ba0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6ba4:	e0fff30b 	ldhu	r3,-52(fp)
    6ba8:	e0bffd0b 	ldhu	r2,-12(fp)
    6bac:	18800d1e 	bne	r3,r2,6be4 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6bb0:	e0bff383 	ldbu	r2,-50(fp)
    6bb4:	10800058 	cmpnei	r2,r2,1
    6bb8:	10000d1e 	bne	r2,zero,6bf0 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    6bbc:	e0bffc17 	ldw	r2,-16(fp)
    6bc0:	1080020b 	ldhu	r2,8(r2)
    6bc4:	1007883a 	mov	r3,r2
    6bc8:	e0bff30b 	ldhu	r2,-52(fp)
    6bcc:	0084303a 	nor	r2,zero,r2
    6bd0:	1884703a 	and	r2,r3,r2
    6bd4:	1007883a 	mov	r3,r2
    6bd8:	e0bffc17 	ldw	r2,-16(fp)
    6bdc:	10c0020d 	sth	r3,8(r2)
    6be0:	00000306 	br	6bf0 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    6be4:	e0bfff17 	ldw	r2,-4(fp)
    6be8:	00c01c04 	movi	r3,112
    6bec:	10c00005 	stb	r3,0(r2)
    6bf0:	e0bff417 	ldw	r2,-48(fp)
    6bf4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6bf8:	e0bff717 	ldw	r2,-36(fp)
    6bfc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    6c00:	00005e06 	br	6d7c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    6c04:	e0bffc17 	ldw	r2,-16(fp)
    6c08:	10c0020b 	ldhu	r3,8(r2)
    6c0c:	e0bffd0b 	ldhu	r2,-12(fp)
    6c10:	1884703a 	and	r2,r3,r2
    6c14:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    6c18:	e0bff30b 	ldhu	r2,-52(fp)
    6c1c:	10000d26 	beq	r2,zero,6c54 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6c20:	e0bff383 	ldbu	r2,-50(fp)
    6c24:	10800058 	cmpnei	r2,r2,1
    6c28:	10000d1e 	bne	r2,zero,6c60 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    6c2c:	e0bffc17 	ldw	r2,-16(fp)
    6c30:	1080020b 	ldhu	r2,8(r2)
    6c34:	1007883a 	mov	r3,r2
    6c38:	e0bff30b 	ldhu	r2,-52(fp)
    6c3c:	0084303a 	nor	r2,zero,r2
    6c40:	1884703a 	and	r2,r3,r2
    6c44:	1007883a 	mov	r3,r2
    6c48:	e0bffc17 	ldw	r2,-16(fp)
    6c4c:	10c0020d 	sth	r3,8(r2)
    6c50:	00000306 	br	6c60 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    6c54:	e0bfff17 	ldw	r2,-4(fp)
    6c58:	00c01c04 	movi	r3,112
    6c5c:	10c00005 	stb	r3,0(r2)
    6c60:	e0bff417 	ldw	r2,-48(fp)
    6c64:	e0bff815 	stw	r2,-32(fp)
    6c68:	e0bff817 	ldw	r2,-32(fp)
    6c6c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    6c70:	00004206 	br	6d7c <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    6c74:	e0bffc17 	ldw	r2,-16(fp)
    6c78:	1080020b 	ldhu	r2,8(r2)
    6c7c:	0084303a 	nor	r2,zero,r2
    6c80:	1007883a 	mov	r3,r2
    6c84:	e0bffd0b 	ldhu	r2,-12(fp)
    6c88:	1884703a 	and	r2,r3,r2
    6c8c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6c90:	e0fff30b 	ldhu	r3,-52(fp)
    6c94:	e0bffd0b 	ldhu	r2,-12(fp)
    6c98:	18800b1e 	bne	r3,r2,6cc8 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6c9c:	e0bff383 	ldbu	r2,-50(fp)
    6ca0:	10800058 	cmpnei	r2,r2,1
    6ca4:	10000b1e 	bne	r2,zero,6cd4 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    6ca8:	e0bffc17 	ldw	r2,-16(fp)
    6cac:	10c0020b 	ldhu	r3,8(r2)
    6cb0:	e0bff30b 	ldhu	r2,-52(fp)
    6cb4:	1884b03a 	or	r2,r3,r2
    6cb8:	1007883a 	mov	r3,r2
    6cbc:	e0bffc17 	ldw	r2,-16(fp)
    6cc0:	10c0020d 	sth	r3,8(r2)
    6cc4:	00000306 	br	6cd4 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    6cc8:	e0bfff17 	ldw	r2,-4(fp)
    6ccc:	00c01c04 	movi	r3,112
    6cd0:	10c00005 	stb	r3,0(r2)
    6cd4:	e0bff417 	ldw	r2,-48(fp)
    6cd8:	e0bff915 	stw	r2,-28(fp)
    6cdc:	e0bff917 	ldw	r2,-28(fp)
    6ce0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    6ce4:	00002506 	br	6d7c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    6ce8:	e0bffc17 	ldw	r2,-16(fp)
    6cec:	1080020b 	ldhu	r2,8(r2)
    6cf0:	0084303a 	nor	r2,zero,r2
    6cf4:	1007883a 	mov	r3,r2
    6cf8:	e0bffd0b 	ldhu	r2,-12(fp)
    6cfc:	1884703a 	and	r2,r3,r2
    6d00:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    6d04:	e0bff30b 	ldhu	r2,-52(fp)
    6d08:	10000b26 	beq	r2,zero,6d38 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6d0c:	e0bff383 	ldbu	r2,-50(fp)
    6d10:	10800058 	cmpnei	r2,r2,1
    6d14:	10000b1e 	bne	r2,zero,6d44 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    6d18:	e0bffc17 	ldw	r2,-16(fp)
    6d1c:	10c0020b 	ldhu	r3,8(r2)
    6d20:	e0bff30b 	ldhu	r2,-52(fp)
    6d24:	1884b03a 	or	r2,r3,r2
    6d28:	1007883a 	mov	r3,r2
    6d2c:	e0bffc17 	ldw	r2,-16(fp)
    6d30:	10c0020d 	sth	r3,8(r2)
    6d34:	00000306 	br	6d44 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    6d38:	e0bfff17 	ldw	r2,-4(fp)
    6d3c:	00c01c04 	movi	r3,112
    6d40:	10c00005 	stb	r3,0(r2)
    6d44:	e0bff417 	ldw	r2,-48(fp)
    6d48:	e0bffa15 	stw	r2,-24(fp)
    6d4c:	e0bffa17 	ldw	r2,-24(fp)
    6d50:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    6d54:	00000906 	br	6d7c <OSFlagAccept+0x2f4>
    6d58:	e0bff417 	ldw	r2,-48(fp)
    6d5c:	e0bffb15 	stw	r2,-20(fp)
    6d60:	e0bffb17 	ldw	r2,-20(fp)
    6d64:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    6d68:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    6d6c:	e0bfff17 	ldw	r2,-4(fp)
    6d70:	00c01bc4 	movi	r3,111
    6d74:	10c00005 	stb	r3,0(r2)
             break;
    6d78:	0001883a 	nop
    }
    return (flags_rdy);
    6d7c:	e0bff30b 	ldhu	r2,-52(fp)
}
    6d80:	e037883a 	mov	sp,fp
    6d84:	df000017 	ldw	fp,0(sp)
    6d88:	dec00104 	addi	sp,sp,4
    6d8c:	f800283a 	ret

00006d90 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    6d90:	defff804 	addi	sp,sp,-32
    6d94:	df000715 	stw	fp,28(sp)
    6d98:	df000704 	addi	fp,sp,28
    6d9c:	2005883a 	mov	r2,r4
    6da0:	e17fff15 	stw	r5,-4(fp)
    6da4:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    6da8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    6dac:	e0bfff17 	ldw	r2,-4(fp)
    6db0:	1000021e 	bne	r2,zero,6dbc <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    6db4:	0005883a 	mov	r2,zero
    6db8:	00003b06 	br	6ea8 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    6dbc:	00800074 	movhi	r2,1
    6dc0:	10913904 	addi	r2,r2,17636
    6dc4:	10800003 	ldbu	r2,0(r2)
    6dc8:	10803fcc 	andi	r2,r2,255
    6dcc:	10000526 	beq	r2,zero,6de4 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    6dd0:	e0bfff17 	ldw	r2,-4(fp)
    6dd4:	00c00404 	movi	r3,16
    6dd8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    6ddc:	0005883a 	mov	r2,zero
    6de0:	00003106 	br	6ea8 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6de4:	0005303a 	rdctl	r2,status
    6de8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6dec:	e0fffb17 	ldw	r3,-20(fp)
    6df0:	00bfff84 	movi	r2,-2
    6df4:	1884703a 	and	r2,r3,r2
    6df8:	1001703a 	wrctl	status,r2
  
  return context;
    6dfc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    6e00:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    6e04:	00800074 	movhi	r2,1
    6e08:	10913c04 	addi	r2,r2,17648
    6e0c:	10800017 	ldw	r2,0(r2)
    6e10:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    6e14:	e0bffa17 	ldw	r2,-24(fp)
    6e18:	10001b26 	beq	r2,zero,6e88 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    6e1c:	00800074 	movhi	r2,1
    6e20:	10913c04 	addi	r2,r2,17648
    6e24:	10800017 	ldw	r2,0(r2)
    6e28:	10c00117 	ldw	r3,4(r2)
    6e2c:	00800074 	movhi	r2,1
    6e30:	10913c04 	addi	r2,r2,17648
    6e34:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    6e38:	e0bffa17 	ldw	r2,-24(fp)
    6e3c:	00c00144 	movi	r3,5
    6e40:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    6e44:	e0bffa17 	ldw	r2,-24(fp)
    6e48:	e0fffe0b 	ldhu	r3,-8(fp)
    6e4c:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    6e50:	e0bffa17 	ldw	r2,-24(fp)
    6e54:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    6e58:	e0bffa17 	ldw	r2,-24(fp)
    6e5c:	00c00fc4 	movi	r3,63
    6e60:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    6e64:	e0bffa17 	ldw	r2,-24(fp)
    6e68:	100002c5 	stb	zero,11(r2)
    6e6c:	e0bff917 	ldw	r2,-28(fp)
    6e70:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6e74:	e0bffc17 	ldw	r2,-16(fp)
    6e78:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    6e7c:	e0bfff17 	ldw	r2,-4(fp)
    6e80:	10000005 	stb	zero,0(r2)
    6e84:	00000706 	br	6ea4 <OSFlagCreate+0x114>
    6e88:	e0bff917 	ldw	r2,-28(fp)
    6e8c:	e0bffd15 	stw	r2,-12(fp)
    6e90:	e0bffd17 	ldw	r2,-12(fp)
    6e94:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    6e98:	e0bfff17 	ldw	r2,-4(fp)
    6e9c:	00c01c84 	movi	r3,114
    6ea0:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    6ea4:	e0bffa17 	ldw	r2,-24(fp)
}
    6ea8:	e037883a 	mov	sp,fp
    6eac:	df000017 	ldw	fp,0(sp)
    6eb0:	dec00104 	addi	sp,sp,4
    6eb4:	f800283a 	ret

00006eb8 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    6eb8:	defff204 	addi	sp,sp,-56
    6ebc:	dfc00d15 	stw	ra,52(sp)
    6ec0:	df000c15 	stw	fp,48(sp)
    6ec4:	df000c04 	addi	fp,sp,48
    6ec8:	e13ffd15 	stw	r4,-12(fp)
    6ecc:	2805883a 	mov	r2,r5
    6ed0:	e1bfff15 	stw	r6,-4(fp)
    6ed4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6ed8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    6edc:	e0bfff17 	ldw	r2,-4(fp)
    6ee0:	1000021e 	bne	r2,zero,6eec <OSFlagDel+0x34>
        return (pgrp);
    6ee4:	e0bffd17 	ldw	r2,-12(fp)
    6ee8:	00008a06 	br	7114 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    6eec:	e0bffd17 	ldw	r2,-12(fp)
    6ef0:	1000051e 	bne	r2,zero,6f08 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6ef4:	e0bfff17 	ldw	r2,-4(fp)
    6ef8:	00c01b84 	movi	r3,110
    6efc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    6f00:	e0bffd17 	ldw	r2,-12(fp)
    6f04:	00008306 	br	7114 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    6f08:	00800074 	movhi	r2,1
    6f0c:	10913904 	addi	r2,r2,17636
    6f10:	10800003 	ldbu	r2,0(r2)
    6f14:	10803fcc 	andi	r2,r2,255
    6f18:	10000526 	beq	r2,zero,6f30 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    6f1c:	e0bfff17 	ldw	r2,-4(fp)
    6f20:	00c003c4 	movi	r3,15
    6f24:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    6f28:	e0bffd17 	ldw	r2,-12(fp)
    6f2c:	00007906 	br	7114 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    6f30:	e0bffd17 	ldw	r2,-12(fp)
    6f34:	10800003 	ldbu	r2,0(r2)
    6f38:	10803fcc 	andi	r2,r2,255
    6f3c:	10800160 	cmpeqi	r2,r2,5
    6f40:	1000051e 	bne	r2,zero,6f58 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
    6f44:	e0bfff17 	ldw	r2,-4(fp)
    6f48:	00c00044 	movi	r3,1
    6f4c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    6f50:	e0bffd17 	ldw	r2,-12(fp)
    6f54:	00006f06 	br	7114 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6f58:	0005303a 	rdctl	r2,status
    6f5c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6f60:	e0fff817 	ldw	r3,-32(fp)
    6f64:	00bfff84 	movi	r2,-2
    6f68:	1884703a 	and	r2,r3,r2
    6f6c:	1001703a 	wrctl	status,r2
  
  return context;
    6f70:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    6f74:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    6f78:	e0bffd17 	ldw	r2,-12(fp)
    6f7c:	10800117 	ldw	r2,4(r2)
    6f80:	10000326 	beq	r2,zero,6f90 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    6f84:	00800044 	movi	r2,1
    6f88:	e0bff405 	stb	r2,-48(fp)
    6f8c:	00000106 	br	6f94 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    6f90:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    6f94:	e0bffe03 	ldbu	r2,-8(fp)
    6f98:	10000326 	beq	r2,zero,6fa8 <OSFlagDel+0xf0>
    6f9c:	10800060 	cmpeqi	r2,r2,1
    6fa0:	1000271e 	bne	r2,zero,7040 <OSFlagDel+0x188>
    6fa4:	00005006 	br	70e8 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    6fa8:	e0bff403 	ldbu	r2,-48(fp)
    6fac:	10001a1e 	bne	r2,zero,7018 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    6fb0:	e0bffd17 	ldw	r2,-12(fp)
    6fb4:	00c00fc4 	movi	r3,63
    6fb8:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    6fbc:	e0bffd17 	ldw	r2,-12(fp)
    6fc0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    6fc4:	e0bffd17 	ldw	r2,-12(fp)
    6fc8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    6fcc:	00800074 	movhi	r2,1
    6fd0:	10913c04 	addi	r2,r2,17648
    6fd4:	10c00017 	ldw	r3,0(r2)
    6fd8:	e0bffd17 	ldw	r2,-12(fp)
    6fdc:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    6fe0:	e0bffd17 	ldw	r2,-12(fp)
    6fe4:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    6fe8:	00800074 	movhi	r2,1
    6fec:	10913c04 	addi	r2,r2,17648
    6ff0:	e0fffd17 	ldw	r3,-12(fp)
    6ff4:	10c00015 	stw	r3,0(r2)
    6ff8:	e0bff717 	ldw	r2,-36(fp)
    6ffc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7000:	e0bff917 	ldw	r2,-28(fp)
    7004:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    7008:	e0bfff17 	ldw	r2,-4(fp)
    700c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    7010:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    7014:	00003e06 	br	7110 <OSFlagDel+0x258>
    7018:	e0bff717 	ldw	r2,-36(fp)
    701c:	e0bffa15 	stw	r2,-24(fp)
    7020:	e0bffa17 	ldw	r2,-24(fp)
    7024:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    7028:	e0bfff17 	ldw	r2,-4(fp)
    702c:	00c01244 	movi	r3,73
    7030:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    7034:	e0bffd17 	ldw	r2,-12(fp)
    7038:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    703c:	00003406 	br	7110 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    7040:	e0bffd17 	ldw	r2,-12(fp)
    7044:	10800117 	ldw	r2,4(r2)
    7048:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    704c:	00000606 	br	7068 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    7050:	e13ff517 	ldw	r4,-44(fp)
    7054:	000b883a 	mov	r5,zero
    7058:	00080f40 	call	80f4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    705c:	e0bff517 	ldw	r2,-44(fp)
    7060:	10800017 	ldw	r2,0(r2)
    7064:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    7068:	e0bff517 	ldw	r2,-44(fp)
    706c:	103ff81e 	bne	r2,zero,7050 <__alt_mem_Flash_flash_data+0xf4007050>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    7070:	e0bffd17 	ldw	r2,-12(fp)
    7074:	00c00fc4 	movi	r3,63
    7078:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    707c:	e0bffd17 	ldw	r2,-12(fp)
    7080:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    7084:	e0bffd17 	ldw	r2,-12(fp)
    7088:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    708c:	00800074 	movhi	r2,1
    7090:	10913c04 	addi	r2,r2,17648
    7094:	10c00017 	ldw	r3,0(r2)
    7098:	e0bffd17 	ldw	r2,-12(fp)
    709c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    70a0:	e0bffd17 	ldw	r2,-12(fp)
    70a4:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    70a8:	00800074 	movhi	r2,1
    70ac:	10913c04 	addi	r2,r2,17648
    70b0:	e0fffd17 	ldw	r3,-12(fp)
    70b4:	10c00015 	stw	r3,0(r2)
    70b8:	e0bff717 	ldw	r2,-36(fp)
    70bc:	e0bffb15 	stw	r2,-20(fp)
    70c0:	e0bffb17 	ldw	r2,-20(fp)
    70c4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    70c8:	e0bff403 	ldbu	r2,-48(fp)
    70cc:	10800058 	cmpnei	r2,r2,1
    70d0:	1000011e 	bne	r2,zero,70d8 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    70d4:	00062240 	call	6224 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    70d8:	e0bfff17 	ldw	r2,-4(fp)
    70dc:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    70e0:	e03ff615 	stw	zero,-40(fp)
             break;
    70e4:	00000a06 	br	7110 <OSFlagDel+0x258>
    70e8:	e0bff717 	ldw	r2,-36(fp)
    70ec:	e0bffc15 	stw	r2,-16(fp)
    70f0:	e0bffc17 	ldw	r2,-16(fp)
    70f4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    70f8:	e0bfff17 	ldw	r2,-4(fp)
    70fc:	00c001c4 	movi	r3,7
    7100:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    7104:	e0bffd17 	ldw	r2,-12(fp)
    7108:	e0bff615 	stw	r2,-40(fp)
             break;
    710c:	0001883a 	nop
    }
    return (pgrp_return);
    7110:	e0bff617 	ldw	r2,-40(fp)
}
    7114:	e037883a 	mov	sp,fp
    7118:	dfc00117 	ldw	ra,4(sp)
    711c:	df000017 	ldw	fp,0(sp)
    7120:	dec00204 	addi	sp,sp,8
    7124:	f800283a 	ret

00007128 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    7128:	defff604 	addi	sp,sp,-40
    712c:	dfc00915 	stw	ra,36(sp)
    7130:	df000815 	stw	fp,32(sp)
    7134:	df000804 	addi	fp,sp,32
    7138:	e13ffd15 	stw	r4,-12(fp)
    713c:	e17ffe15 	stw	r5,-8(fp)
    7140:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7144:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7148:	e0bfff17 	ldw	r2,-4(fp)
    714c:	1000021e 	bne	r2,zero,7158 <OSFlagNameGet+0x30>
        return (0);
    7150:	0005883a 	mov	r2,zero
    7154:	00003b06 	br	7244 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    7158:	e0bffd17 	ldw	r2,-12(fp)
    715c:	1000051e 	bne	r2,zero,7174 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7160:	e0bfff17 	ldw	r2,-4(fp)
    7164:	00c01b84 	movi	r3,110
    7168:	10c00005 	stb	r3,0(r2)
        return (0);
    716c:	0005883a 	mov	r2,zero
    7170:	00003406 	br	7244 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    7174:	e0bffe17 	ldw	r2,-8(fp)
    7178:	1000051e 	bne	r2,zero,7190 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    717c:	e0bfff17 	ldw	r2,-4(fp)
    7180:	00c00304 	movi	r3,12
    7184:	10c00005 	stb	r3,0(r2)
        return (0);
    7188:	0005883a 	mov	r2,zero
    718c:	00002d06 	br	7244 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    7190:	00800074 	movhi	r2,1
    7194:	10913904 	addi	r2,r2,17636
    7198:	10800003 	ldbu	r2,0(r2)
    719c:	10803fcc 	andi	r2,r2,255
    71a0:	10000526 	beq	r2,zero,71b8 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    71a4:	e0bfff17 	ldw	r2,-4(fp)
    71a8:	00c00444 	movi	r3,17
    71ac:	10c00005 	stb	r3,0(r2)
        return (0);
    71b0:	0005883a 	mov	r2,zero
    71b4:	00002306 	br	7244 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    71b8:	0005303a 	rdctl	r2,status
    71bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    71c0:	e0fffa17 	ldw	r3,-24(fp)
    71c4:	00bfff84 	movi	r2,-2
    71c8:	1884703a 	and	r2,r3,r2
    71cc:	1001703a 	wrctl	status,r2
  
  return context;
    71d0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    71d4:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    71d8:	e0bffd17 	ldw	r2,-12(fp)
    71dc:	10800003 	ldbu	r2,0(r2)
    71e0:	10803fcc 	andi	r2,r2,255
    71e4:	10800160 	cmpeqi	r2,r2,5
    71e8:	1000091e 	bne	r2,zero,7210 <OSFlagNameGet+0xe8>
    71ec:	e0bff817 	ldw	r2,-32(fp)
    71f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    71f4:	e0bffb17 	ldw	r2,-20(fp)
    71f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    71fc:	e0bfff17 	ldw	r2,-4(fp)
    7200:	00c00044 	movi	r3,1
    7204:	10c00005 	stb	r3,0(r2)
        return (0);
    7208:	0005883a 	mov	r2,zero
    720c:	00000d06 	br	7244 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    7210:	e0bffd17 	ldw	r2,-12(fp)
    7214:	10800284 	addi	r2,r2,10
    7218:	e13ffe17 	ldw	r4,-8(fp)
    721c:	100b883a 	mov	r5,r2
    7220:	00063600 	call	6360 <OS_StrCopy>
    7224:	e0bff905 	stb	r2,-28(fp)
    7228:	e0bff817 	ldw	r2,-32(fp)
    722c:	e0bffc15 	stw	r2,-16(fp)
    7230:	e0bffc17 	ldw	r2,-16(fp)
    7234:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7238:	e0bfff17 	ldw	r2,-4(fp)
    723c:	10000005 	stb	zero,0(r2)
    return (len);
    7240:	e0bff903 	ldbu	r2,-28(fp)
}
    7244:	e037883a 	mov	sp,fp
    7248:	dfc00117 	ldw	ra,4(sp)
    724c:	df000017 	ldw	fp,0(sp)
    7250:	dec00204 	addi	sp,sp,8
    7254:	f800283a 	ret

00007258 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    7258:	defff504 	addi	sp,sp,-44
    725c:	dfc00a15 	stw	ra,40(sp)
    7260:	df000915 	stw	fp,36(sp)
    7264:	df000904 	addi	fp,sp,36
    7268:	e13ffd15 	stw	r4,-12(fp)
    726c:	e17ffe15 	stw	r5,-8(fp)
    7270:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7274:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7278:	e0bfff17 	ldw	r2,-4(fp)
    727c:	1000011e 	bne	r2,zero,7284 <OSFlagNameSet+0x2c>
        return;
    7280:	00004406 	br	7394 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    7284:	e0bffd17 	ldw	r2,-12(fp)
    7288:	1000041e 	bne	r2,zero,729c <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    728c:	e0bfff17 	ldw	r2,-4(fp)
    7290:	00c01b84 	movi	r3,110
    7294:	10c00005 	stb	r3,0(r2)
        return;
    7298:	00003e06 	br	7394 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    729c:	e0bffe17 	ldw	r2,-8(fp)
    72a0:	1000041e 	bne	r2,zero,72b4 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    72a4:	e0bfff17 	ldw	r2,-4(fp)
    72a8:	00c00304 	movi	r3,12
    72ac:	10c00005 	stb	r3,0(r2)
        return;
    72b0:	00003806 	br	7394 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    72b4:	00800074 	movhi	r2,1
    72b8:	10913904 	addi	r2,r2,17636
    72bc:	10800003 	ldbu	r2,0(r2)
    72c0:	10803fcc 	andi	r2,r2,255
    72c4:	10000426 	beq	r2,zero,72d8 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
    72c8:	e0bfff17 	ldw	r2,-4(fp)
    72cc:	00c00484 	movi	r3,18
    72d0:	10c00005 	stb	r3,0(r2)
        return;
    72d4:	00002f06 	br	7394 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    72d8:	0005303a 	rdctl	r2,status
    72dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    72e0:	e0fff917 	ldw	r3,-28(fp)
    72e4:	00bfff84 	movi	r2,-2
    72e8:	1884703a 	and	r2,r3,r2
    72ec:	1001703a 	wrctl	status,r2
  
  return context;
    72f0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    72f4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    72f8:	e0bffd17 	ldw	r2,-12(fp)
    72fc:	10800003 	ldbu	r2,0(r2)
    7300:	10803fcc 	andi	r2,r2,255
    7304:	10800160 	cmpeqi	r2,r2,5
    7308:	1000081e 	bne	r2,zero,732c <OSFlagNameSet+0xd4>
    730c:	e0bff717 	ldw	r2,-36(fp)
    7310:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7314:	e0bffa17 	ldw	r2,-24(fp)
    7318:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    731c:	e0bfff17 	ldw	r2,-4(fp)
    7320:	00c00044 	movi	r3,1
    7324:	10c00005 	stb	r3,0(r2)
        return;
    7328:	00001a06 	br	7394 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    732c:	e13ffe17 	ldw	r4,-8(fp)
    7330:	00063d40 	call	63d4 <OS_StrLen>
    7334:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    7338:	e0bff803 	ldbu	r2,-32(fp)
    733c:	10800830 	cmpltui	r2,r2,32
    7340:	1000081e 	bne	r2,zero,7364 <OSFlagNameSet+0x10c>
    7344:	e0bff717 	ldw	r2,-36(fp)
    7348:	e0bffb15 	stw	r2,-20(fp)
    734c:	e0bffb17 	ldw	r2,-20(fp)
    7350:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    7354:	e0bfff17 	ldw	r2,-4(fp)
    7358:	00c01cc4 	movi	r3,115
    735c:	10c00005 	stb	r3,0(r2)
        return;
    7360:	00000c06 	br	7394 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    7364:	e0bffd17 	ldw	r2,-12(fp)
    7368:	10800284 	addi	r2,r2,10
    736c:	1009883a 	mov	r4,r2
    7370:	e17ffe17 	ldw	r5,-8(fp)
    7374:	00063600 	call	6360 <OS_StrCopy>
    7378:	e0bff717 	ldw	r2,-36(fp)
    737c:	e0bffc15 	stw	r2,-16(fp)
    7380:	e0bffc17 	ldw	r2,-16(fp)
    7384:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7388:	e0bfff17 	ldw	r2,-4(fp)
    738c:	10000005 	stb	zero,0(r2)
    return;
    7390:	0001883a 	nop
}
    7394:	e037883a 	mov	sp,fp
    7398:	dfc00117 	ldw	ra,4(sp)
    739c:	df000017 	ldw	fp,0(sp)
    73a0:	dec00204 	addi	sp,sp,8
    73a4:	f800283a 	ret

000073a8 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    73a8:	deffe204 	addi	sp,sp,-120
    73ac:	dfc01d15 	stw	ra,116(sp)
    73b0:	df001c15 	stw	fp,112(sp)
    73b4:	df001c04 	addi	fp,sp,112
    73b8:	e13ffc15 	stw	r4,-16(fp)
    73bc:	2809883a 	mov	r4,r5
    73c0:	3007883a 	mov	r3,r6
    73c4:	3805883a 	mov	r2,r7
    73c8:	e13ffd0d 	sth	r4,-12(fp)
    73cc:	e0fffe05 	stb	r3,-8(fp)
    73d0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    73d4:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    73d8:	e0800217 	ldw	r2,8(fp)
    73dc:	1000021e 	bne	r2,zero,73e8 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
    73e0:	0005883a 	mov	r2,zero
    73e4:	00016706 	br	7984 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    73e8:	e0bffc17 	ldw	r2,-16(fp)
    73ec:	1000051e 	bne	r2,zero,7404 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    73f0:	e0800217 	ldw	r2,8(fp)
    73f4:	00c01b84 	movi	r3,110
    73f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    73fc:	0005883a 	mov	r2,zero
    7400:	00016006 	br	7984 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    7404:	00800074 	movhi	r2,1
    7408:	10913904 	addi	r2,r2,17636
    740c:	10800003 	ldbu	r2,0(r2)
    7410:	10803fcc 	andi	r2,r2,255
    7414:	10000526 	beq	r2,zero,742c <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    7418:	e0800217 	ldw	r2,8(fp)
    741c:	00c00084 	movi	r3,2
    7420:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7424:	0005883a 	mov	r2,zero
    7428:	00015606 	br	7984 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    742c:	00800074 	movhi	r2,1
    7430:	10912b04 	addi	r2,r2,17580
    7434:	10800003 	ldbu	r2,0(r2)
    7438:	10803fcc 	andi	r2,r2,255
    743c:	10000526 	beq	r2,zero,7454 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    7440:	e0800217 	ldw	r2,8(fp)
    7444:	00c00344 	movi	r3,13
    7448:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    744c:	0005883a 	mov	r2,zero
    7450:	00014c06 	br	7984 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    7454:	e0bffc17 	ldw	r2,-16(fp)
    7458:	10800003 	ldbu	r2,0(r2)
    745c:	10803fcc 	andi	r2,r2,255
    7460:	10800160 	cmpeqi	r2,r2,5
    7464:	1000051e 	bne	r2,zero,747c <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
    7468:	e0800217 	ldw	r2,8(fp)
    746c:	00c00044 	movi	r3,1
    7470:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7474:	0005883a 	mov	r2,zero
    7478:	00014206 	br	7984 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    747c:	e0fffe03 	ldbu	r3,-8(fp)
    7480:	00bfe004 	movi	r2,-128
    7484:	1884703a 	and	r2,r3,r2
    7488:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    748c:	e0bfe703 	ldbu	r2,-100(fp)
    7490:	10000626 	beq	r2,zero,74ac <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    7494:	e0bffe03 	ldbu	r2,-8(fp)
    7498:	10801fcc 	andi	r2,r2,127
    749c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    74a0:	00800044 	movi	r2,1
    74a4:	e0bfe505 	stb	r2,-108(fp)
    74a8:	00000106 	br	74b0 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
    74ac:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    74b0:	0005303a 	rdctl	r2,status
    74b4:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    74b8:	e0ffe917 	ldw	r3,-92(fp)
    74bc:	00bfff84 	movi	r2,-2
    74c0:	1884703a 	and	r2,r3,r2
    74c4:	1001703a 	wrctl	status,r2
  
  return context;
    74c8:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    74cc:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
    74d0:	e0bffe03 	ldbu	r2,-8(fp)
    74d4:	10c00060 	cmpeqi	r3,r2,1
    74d8:	1800921e 	bne	r3,zero,7724 <OSFlagPend+0x37c>
    74dc:	10c00088 	cmpgei	r3,r2,2
    74e0:	1800021e 	bne	r3,zero,74ec <OSFlagPend+0x144>
    74e4:	10006126 	beq	r2,zero,766c <OSFlagPend+0x2c4>
    74e8:	0000bb06 	br	77d8 <OSFlagPend+0x430>
    74ec:	10c000a0 	cmpeqi	r3,r2,2
    74f0:	1800031e 	bne	r3,zero,7500 <OSFlagPend+0x158>
    74f4:	108000e0 	cmpeqi	r2,r2,3
    74f8:	10002f1e 	bne	r2,zero,75b8 <OSFlagPend+0x210>
    74fc:	0000b606 	br	77d8 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    7500:	e0bffc17 	ldw	r2,-16(fp)
    7504:	10c0020b 	ldhu	r3,8(r2)
    7508:	e0bffd0b 	ldhu	r2,-12(fp)
    750c:	1884703a 	and	r2,r3,r2
    7510:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    7514:	e0ffe78b 	ldhu	r3,-98(fp)
    7518:	e0bffd0b 	ldhu	r2,-12(fp)
    751c:	1880191e 	bne	r3,r2,7584 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7520:	e0bfe503 	ldbu	r2,-108(fp)
    7524:	10800058 	cmpnei	r2,r2,1
    7528:	1000091e 	bne	r2,zero,7550 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    752c:	e0bffc17 	ldw	r2,-16(fp)
    7530:	1080020b 	ldhu	r2,8(r2)
    7534:	1007883a 	mov	r3,r2
    7538:	e0bfe78b 	ldhu	r2,-98(fp)
    753c:	0084303a 	nor	r2,zero,r2
    7540:	1884703a 	and	r2,r3,r2
    7544:	1007883a 	mov	r3,r2
    7548:	e0bffc17 	ldw	r2,-16(fp)
    754c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    7550:	00800074 	movhi	r2,1
    7554:	10913a04 	addi	r2,r2,17640
    7558:	10800017 	ldw	r2,0(r2)
    755c:	e0ffe78b 	ldhu	r3,-98(fp)
    7560:	10c00b0d 	sth	r3,44(r2)
    7564:	e0bfe617 	ldw	r2,-104(fp)
    7568:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    756c:	e0bfea17 	ldw	r2,-88(fp)
    7570:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    7574:	e0800217 	ldw	r2,8(fp)
    7578:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    757c:	e0bfe78b 	ldhu	r2,-98(fp)
    7580:	00010006 	br	7984 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    7584:	e1bffd0b 	ldhu	r6,-12(fp)
    7588:	e0fffe03 	ldbu	r3,-8(fp)
    758c:	e0bfff0b 	ldhu	r2,-4(fp)
    7590:	e17ff704 	addi	r5,fp,-36
    7594:	d8800015 	stw	r2,0(sp)
    7598:	e13ffc17 	ldw	r4,-16(fp)
    759c:	180f883a 	mov	r7,r3
    75a0:	0007e4c0 	call	7e4c <OS_FlagBlock>
    75a4:	e0bfe617 	ldw	r2,-104(fp)
    75a8:	e0bfeb15 	stw	r2,-84(fp)
    75ac:	e0bfeb17 	ldw	r2,-84(fp)
    75b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    75b4:	00009206 	br	7800 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    75b8:	e0bffc17 	ldw	r2,-16(fp)
    75bc:	10c0020b 	ldhu	r3,8(r2)
    75c0:	e0bffd0b 	ldhu	r2,-12(fp)
    75c4:	1884703a 	and	r2,r3,r2
    75c8:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    75cc:	e0bfe78b 	ldhu	r2,-98(fp)
    75d0:	10001926 	beq	r2,zero,7638 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    75d4:	e0bfe503 	ldbu	r2,-108(fp)
    75d8:	10800058 	cmpnei	r2,r2,1
    75dc:	1000091e 	bne	r2,zero,7604 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    75e0:	e0bffc17 	ldw	r2,-16(fp)
    75e4:	1080020b 	ldhu	r2,8(r2)
    75e8:	1007883a 	mov	r3,r2
    75ec:	e0bfe78b 	ldhu	r2,-98(fp)
    75f0:	0084303a 	nor	r2,zero,r2
    75f4:	1884703a 	and	r2,r3,r2
    75f8:	1007883a 	mov	r3,r2
    75fc:	e0bffc17 	ldw	r2,-16(fp)
    7600:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    7604:	00800074 	movhi	r2,1
    7608:	10913a04 	addi	r2,r2,17640
    760c:	10800017 	ldw	r2,0(r2)
    7610:	e0ffe78b 	ldhu	r3,-98(fp)
    7614:	10c00b0d 	sth	r3,44(r2)
    7618:	e0bfe617 	ldw	r2,-104(fp)
    761c:	e0bfec15 	stw	r2,-80(fp)
    7620:	e0bfec17 	ldw	r2,-80(fp)
    7624:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    7628:	e0800217 	ldw	r2,8(fp)
    762c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    7630:	e0bfe78b 	ldhu	r2,-98(fp)
    7634:	0000d306 	br	7984 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    7638:	e1bffd0b 	ldhu	r6,-12(fp)
    763c:	e0fffe03 	ldbu	r3,-8(fp)
    7640:	e0bfff0b 	ldhu	r2,-4(fp)
    7644:	e17ff704 	addi	r5,fp,-36
    7648:	d8800015 	stw	r2,0(sp)
    764c:	e13ffc17 	ldw	r4,-16(fp)
    7650:	180f883a 	mov	r7,r3
    7654:	0007e4c0 	call	7e4c <OS_FlagBlock>
    7658:	e0bfe617 	ldw	r2,-104(fp)
    765c:	e0bfed15 	stw	r2,-76(fp)
    7660:	e0bfed17 	ldw	r2,-76(fp)
    7664:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    7668:	00006506 	br	7800 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    766c:	e0bffc17 	ldw	r2,-16(fp)
    7670:	1080020b 	ldhu	r2,8(r2)
    7674:	0084303a 	nor	r2,zero,r2
    7678:	1007883a 	mov	r3,r2
    767c:	e0bffd0b 	ldhu	r2,-12(fp)
    7680:	1884703a 	and	r2,r3,r2
    7684:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    7688:	e0ffe78b 	ldhu	r3,-98(fp)
    768c:	e0bffd0b 	ldhu	r2,-12(fp)
    7690:	1880171e 	bne	r3,r2,76f0 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7694:	e0bfe503 	ldbu	r2,-108(fp)
    7698:	10800058 	cmpnei	r2,r2,1
    769c:	1000071e 	bne	r2,zero,76bc <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    76a0:	e0bffc17 	ldw	r2,-16(fp)
    76a4:	10c0020b 	ldhu	r3,8(r2)
    76a8:	e0bfe78b 	ldhu	r2,-98(fp)
    76ac:	1884b03a 	or	r2,r3,r2
    76b0:	1007883a 	mov	r3,r2
    76b4:	e0bffc17 	ldw	r2,-16(fp)
    76b8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    76bc:	00800074 	movhi	r2,1
    76c0:	10913a04 	addi	r2,r2,17640
    76c4:	10800017 	ldw	r2,0(r2)
    76c8:	e0ffe78b 	ldhu	r3,-98(fp)
    76cc:	10c00b0d 	sth	r3,44(r2)
    76d0:	e0bfe617 	ldw	r2,-104(fp)
    76d4:	e0bfee15 	stw	r2,-72(fp)
    76d8:	e0bfee17 	ldw	r2,-72(fp)
    76dc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    76e0:	e0800217 	ldw	r2,8(fp)
    76e4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    76e8:	e0bfe78b 	ldhu	r2,-98(fp)
    76ec:	0000a506 	br	7984 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    76f0:	e1bffd0b 	ldhu	r6,-12(fp)
    76f4:	e0fffe03 	ldbu	r3,-8(fp)
    76f8:	e0bfff0b 	ldhu	r2,-4(fp)
    76fc:	e17ff704 	addi	r5,fp,-36
    7700:	d8800015 	stw	r2,0(sp)
    7704:	e13ffc17 	ldw	r4,-16(fp)
    7708:	180f883a 	mov	r7,r3
    770c:	0007e4c0 	call	7e4c <OS_FlagBlock>
    7710:	e0bfe617 	ldw	r2,-104(fp)
    7714:	e0bfef15 	stw	r2,-68(fp)
    7718:	e0bfef17 	ldw	r2,-68(fp)
    771c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    7720:	00003706 	br	7800 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    7724:	e0bffc17 	ldw	r2,-16(fp)
    7728:	1080020b 	ldhu	r2,8(r2)
    772c:	0084303a 	nor	r2,zero,r2
    7730:	1007883a 	mov	r3,r2
    7734:	e0bffd0b 	ldhu	r2,-12(fp)
    7738:	1884703a 	and	r2,r3,r2
    773c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    7740:	e0bfe78b 	ldhu	r2,-98(fp)
    7744:	10001726 	beq	r2,zero,77a4 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7748:	e0bfe503 	ldbu	r2,-108(fp)
    774c:	10800058 	cmpnei	r2,r2,1
    7750:	1000071e 	bne	r2,zero,7770 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    7754:	e0bffc17 	ldw	r2,-16(fp)
    7758:	10c0020b 	ldhu	r3,8(r2)
    775c:	e0bfe78b 	ldhu	r2,-98(fp)
    7760:	1884b03a 	or	r2,r3,r2
    7764:	1007883a 	mov	r3,r2
    7768:	e0bffc17 	ldw	r2,-16(fp)
    776c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    7770:	00800074 	movhi	r2,1
    7774:	10913a04 	addi	r2,r2,17640
    7778:	10800017 	ldw	r2,0(r2)
    777c:	e0ffe78b 	ldhu	r3,-98(fp)
    7780:	10c00b0d 	sth	r3,44(r2)
    7784:	e0bfe617 	ldw	r2,-104(fp)
    7788:	e0bff015 	stw	r2,-64(fp)
    778c:	e0bff017 	ldw	r2,-64(fp)
    7790:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    7794:	e0800217 	ldw	r2,8(fp)
    7798:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    779c:	e0bfe78b 	ldhu	r2,-98(fp)
    77a0:	00007806 	br	7984 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    77a4:	e1bffd0b 	ldhu	r6,-12(fp)
    77a8:	e0fffe03 	ldbu	r3,-8(fp)
    77ac:	e0bfff0b 	ldhu	r2,-4(fp)
    77b0:	e17ff704 	addi	r5,fp,-36
    77b4:	d8800015 	stw	r2,0(sp)
    77b8:	e13ffc17 	ldw	r4,-16(fp)
    77bc:	180f883a 	mov	r7,r3
    77c0:	0007e4c0 	call	7e4c <OS_FlagBlock>
    77c4:	e0bfe617 	ldw	r2,-104(fp)
    77c8:	e0bff115 	stw	r2,-60(fp)
    77cc:	e0bff117 	ldw	r2,-60(fp)
    77d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    77d4:	00000a06 	br	7800 <OSFlagPend+0x458>
    77d8:	e0bfe617 	ldw	r2,-104(fp)
    77dc:	e0bff215 	stw	r2,-56(fp)
    77e0:	e0bff217 	ldw	r2,-56(fp)
    77e4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    77e8:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    77ec:	e0800217 	ldw	r2,8(fp)
    77f0:	00c01bc4 	movi	r3,111
    77f4:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    77f8:	e0bfe78b 	ldhu	r2,-98(fp)
    77fc:	00006106 	br	7984 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    7800:	00062240 	call	6224 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7804:	0005303a 	rdctl	r2,status
    7808:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    780c:	e0fff317 	ldw	r3,-52(fp)
    7810:	00bfff84 	movi	r2,-2
    7814:	1884703a 	and	r2,r3,r2
    7818:	1001703a 	wrctl	status,r2
  
  return context;
    781c:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
    7820:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    7824:	00800074 	movhi	r2,1
    7828:	10913a04 	addi	r2,r2,17640
    782c:	10800017 	ldw	r2,0(r2)
    7830:	10800c43 	ldbu	r2,49(r2)
    7834:	10803fcc 	andi	r2,r2,255
    7838:	10002226 	beq	r2,zero,78c4 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    783c:	00800074 	movhi	r2,1
    7840:	10913a04 	addi	r2,r2,17640
    7844:	10800017 	ldw	r2,0(r2)
    7848:	10800c43 	ldbu	r2,49(r2)
    784c:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    7850:	00800074 	movhi	r2,1
    7854:	10913a04 	addi	r2,r2,17640
    7858:	10800017 	ldw	r2,0(r2)
    785c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    7860:	e0bff704 	addi	r2,fp,-36
    7864:	1009883a 	mov	r4,r2
    7868:	00082040 	call	8204 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    786c:	00800074 	movhi	r2,1
    7870:	10913a04 	addi	r2,r2,17640
    7874:	10800017 	ldw	r2,0(r2)
    7878:	10000c05 	stb	zero,48(r2)
    787c:	e0bfe617 	ldw	r2,-104(fp)
    7880:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7884:	e0bff417 	ldw	r2,-48(fp)
    7888:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    788c:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
    7890:	e0bfe803 	ldbu	r2,-96(fp)
    7894:	108000a0 	cmpeqi	r2,r2,2
    7898:	10000426 	beq	r2,zero,78ac <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    789c:	e0800217 	ldw	r2,8(fp)
    78a0:	00c00384 	movi	r3,14
    78a4:	10c00005 	stb	r3,0(r2)
                 break;
    78a8:	00000406 	br	78bc <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    78ac:	e0800217 	ldw	r2,8(fp)
    78b0:	00c00284 	movi	r3,10
    78b4:	10c00005 	stb	r3,0(r2)
                 break;
    78b8:	0001883a 	nop
        }
        return (flags_rdy);
    78bc:	e0bfe78b 	ldhu	r2,-98(fp)
    78c0:	00003006 	br	7984 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    78c4:	00800074 	movhi	r2,1
    78c8:	10913a04 	addi	r2,r2,17640
    78cc:	10800017 	ldw	r2,0(r2)
    78d0:	10800b0b 	ldhu	r2,44(r2)
    78d4:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    78d8:	e0bfe503 	ldbu	r2,-108(fp)
    78dc:	10800058 	cmpnei	r2,r2,1
    78e0:	1000211e 	bne	r2,zero,7968 <OSFlagPend+0x5c0>
        switch (wait_type) {
    78e4:	e0bffe03 	ldbu	r2,-8(fp)
    78e8:	10001616 	blt	r2,zero,7944 <OSFlagPend+0x59c>
    78ec:	10c00090 	cmplti	r3,r2,2
    78f0:	18000c1e 	bne	r3,zero,7924 <OSFlagPend+0x57c>
    78f4:	10800108 	cmpgei	r2,r2,4
    78f8:	1000121e 	bne	r2,zero,7944 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    78fc:	e0bffc17 	ldw	r2,-16(fp)
    7900:	1080020b 	ldhu	r2,8(r2)
    7904:	1007883a 	mov	r3,r2
    7908:	e0bfe78b 	ldhu	r2,-98(fp)
    790c:	0084303a 	nor	r2,zero,r2
    7910:	1884703a 	and	r2,r3,r2
    7914:	1007883a 	mov	r3,r2
    7918:	e0bffc17 	ldw	r2,-16(fp)
    791c:	10c0020d 	sth	r3,8(r2)
                 break;
    7920:	00001106 	br	7968 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    7924:	e0bffc17 	ldw	r2,-16(fp)
    7928:	10c0020b 	ldhu	r3,8(r2)
    792c:	e0bfe78b 	ldhu	r2,-98(fp)
    7930:	1884b03a 	or	r2,r3,r2
    7934:	1007883a 	mov	r3,r2
    7938:	e0bffc17 	ldw	r2,-16(fp)
    793c:	10c0020d 	sth	r3,8(r2)
                 break;
    7940:	00000906 	br	7968 <OSFlagPend+0x5c0>
    7944:	e0bfe617 	ldw	r2,-104(fp)
    7948:	e0bff515 	stw	r2,-44(fp)
    794c:	e0bff517 	ldw	r2,-44(fp)
    7950:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    7954:	e0800217 	ldw	r2,8(fp)
    7958:	00c01bc4 	movi	r3,111
    795c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    7960:	0005883a 	mov	r2,zero
    7964:	00000706 	br	7984 <OSFlagPend+0x5dc>
    7968:	e0bfe617 	ldw	r2,-104(fp)
    796c:	e0bff615 	stw	r2,-40(fp)
    7970:	e0bff617 	ldw	r2,-40(fp)
    7974:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    7978:	e0800217 	ldw	r2,8(fp)
    797c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    7980:	e0bfe78b 	ldhu	r2,-98(fp)
}
    7984:	e037883a 	mov	sp,fp
    7988:	dfc00117 	ldw	ra,4(sp)
    798c:	df000017 	ldw	fp,0(sp)
    7990:	dec00204 	addi	sp,sp,8
    7994:	f800283a 	ret

00007998 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    7998:	defffb04 	addi	sp,sp,-20
    799c:	df000415 	stw	fp,16(sp)
    79a0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    79a4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    79a8:	0005303a 	rdctl	r2,status
    79ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    79b0:	e0fffe17 	ldw	r3,-8(fp)
    79b4:	00bfff84 	movi	r2,-2
    79b8:	1884703a 	and	r2,r3,r2
    79bc:	1001703a 	wrctl	status,r2
  
  return context;
    79c0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    79c4:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    79c8:	00800074 	movhi	r2,1
    79cc:	10913a04 	addi	r2,r2,17640
    79d0:	10800017 	ldw	r2,0(r2)
    79d4:	10800b0b 	ldhu	r2,44(r2)
    79d8:	e0bffd0d 	sth	r2,-12(fp)
    79dc:	e0bffc17 	ldw	r2,-16(fp)
    79e0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    79e4:	e0bfff17 	ldw	r2,-4(fp)
    79e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
    79ec:	e0bffd0b 	ldhu	r2,-12(fp)
}
    79f0:	e037883a 	mov	sp,fp
    79f4:	df000017 	ldw	fp,0(sp)
    79f8:	dec00104 	addi	sp,sp,4
    79fc:	f800283a 	ret

00007a00 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    7a00:	deffef04 	addi	sp,sp,-68
    7a04:	dfc01015 	stw	ra,64(sp)
    7a08:	df000f15 	stw	fp,60(sp)
    7a0c:	df000f04 	addi	fp,sp,60
    7a10:	e13ffc15 	stw	r4,-16(fp)
    7a14:	2807883a 	mov	r3,r5
    7a18:	3005883a 	mov	r2,r6
    7a1c:	e1ffff15 	stw	r7,-4(fp)
    7a20:	e0fffd0d 	sth	r3,-12(fp)
    7a24:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    7a28:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    7a2c:	e0bfff17 	ldw	r2,-4(fp)
    7a30:	1000021e 	bne	r2,zero,7a3c <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
    7a34:	0005883a 	mov	r2,zero
    7a38:	0000ce06 	br	7d74 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    7a3c:	e0bffc17 	ldw	r2,-16(fp)
    7a40:	1000051e 	bne	r2,zero,7a58 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7a44:	e0bfff17 	ldw	r2,-4(fp)
    7a48:	00c01b84 	movi	r3,110
    7a4c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7a50:	0005883a 	mov	r2,zero
    7a54:	0000c706 	br	7d74 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    7a58:	e0bffc17 	ldw	r2,-16(fp)
    7a5c:	10800003 	ldbu	r2,0(r2)
    7a60:	10803fcc 	andi	r2,r2,255
    7a64:	10800160 	cmpeqi	r2,r2,5
    7a68:	1000051e 	bne	r2,zero,7a80 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    7a6c:	e0bfff17 	ldw	r2,-4(fp)
    7a70:	00c00044 	movi	r3,1
    7a74:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7a78:	0005883a 	mov	r2,zero
    7a7c:	0000bd06 	br	7d74 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7a80:	0005303a 	rdctl	r2,status
    7a84:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7a88:	e0fff617 	ldw	r3,-40(fp)
    7a8c:	00bfff84 	movi	r2,-2
    7a90:	1884703a 	and	r2,r3,r2
    7a94:	1001703a 	wrctl	status,r2
  
  return context;
    7a98:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    7a9c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
    7aa0:	e0bffe03 	ldbu	r2,-8(fp)
    7aa4:	10000326 	beq	r2,zero,7ab4 <OSFlagPost+0xb4>
    7aa8:	10800060 	cmpeqi	r2,r2,1
    7aac:	10000b1e 	bne	r2,zero,7adc <OSFlagPost+0xdc>
    7ab0:	00001206 	br	7afc <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    7ab4:	e0bffc17 	ldw	r2,-16(fp)
    7ab8:	1080020b 	ldhu	r2,8(r2)
    7abc:	1007883a 	mov	r3,r2
    7ac0:	e0bffd0b 	ldhu	r2,-12(fp)
    7ac4:	0084303a 	nor	r2,zero,r2
    7ac8:	1884703a 	and	r2,r3,r2
    7acc:	1007883a 	mov	r3,r2
    7ad0:	e0bffc17 	ldw	r2,-16(fp)
    7ad4:	10c0020d 	sth	r3,8(r2)
             break;
    7ad8:	00001106 	br	7b20 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    7adc:	e0bffc17 	ldw	r2,-16(fp)
    7ae0:	10c0020b 	ldhu	r3,8(r2)
    7ae4:	e0bffd0b 	ldhu	r2,-12(fp)
    7ae8:	1884b03a 	or	r2,r3,r2
    7aec:	1007883a 	mov	r3,r2
    7af0:	e0bffc17 	ldw	r2,-16(fp)
    7af4:	10c0020d 	sth	r3,8(r2)
             break;
    7af8:	00000906 	br	7b20 <OSFlagPost+0x120>
    7afc:	e0bff317 	ldw	r2,-52(fp)
    7b00:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7b04:	e0bff717 	ldw	r2,-36(fp)
    7b08:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    7b0c:	e0bfff17 	ldw	r2,-4(fp)
    7b10:	00c01c44 	movi	r3,113
    7b14:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
    7b18:	0005883a 	mov	r2,zero
    7b1c:	00009506 	br	7d74 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    7b20:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    7b24:	e0bffc17 	ldw	r2,-16(fp)
    7b28:	10800117 	ldw	r2,4(r2)
    7b2c:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    7b30:	00007406 	br	7d04 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
    7b34:	e0bff117 	ldw	r2,-60(fp)
    7b38:	10800483 	ldbu	r2,18(r2)
    7b3c:	10803fcc 	andi	r2,r2,255
    7b40:	10c00060 	cmpeqi	r3,r2,1
    7b44:	18004d1e 	bne	r3,zero,7c7c <OSFlagPost+0x27c>
    7b48:	10c00088 	cmpgei	r3,r2,2
    7b4c:	1800021e 	bne	r3,zero,7b58 <OSFlagPost+0x158>
    7b50:	10003126 	beq	r2,zero,7c18 <OSFlagPost+0x218>
    7b54:	00005f06 	br	7cd4 <OSFlagPost+0x2d4>
    7b58:	10c000a0 	cmpeqi	r3,r2,2
    7b5c:	1800031e 	bne	r3,zero,7b6c <OSFlagPost+0x16c>
    7b60:	108000e0 	cmpeqi	r2,r2,3
    7b64:	1000181e 	bne	r2,zero,7bc8 <OSFlagPost+0x1c8>
    7b68:	00005a06 	br	7cd4 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    7b6c:	e0bffc17 	ldw	r2,-16(fp)
    7b70:	10c0020b 	ldhu	r3,8(r2)
    7b74:	e0bff117 	ldw	r2,-60(fp)
    7b78:	1080040b 	ldhu	r2,16(r2)
    7b7c:	1884703a 	and	r2,r3,r2
    7b80:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    7b84:	e0bff117 	ldw	r2,-60(fp)
    7b88:	1080040b 	ldhu	r2,16(r2)
    7b8c:	10ffffcc 	andi	r3,r2,65535
    7b90:	e0bff40b 	ldhu	r2,-48(fp)
    7b94:	18800b1e 	bne	r3,r2,7bc4 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    7b98:	e0bff40b 	ldhu	r2,-48(fp)
    7b9c:	e13ff117 	ldw	r4,-60(fp)
    7ba0:	100b883a 	mov	r5,r2
    7ba4:	00080f40 	call	80f4 <OS_FlagTaskRdy>
    7ba8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    7bac:	e0bff483 	ldbu	r2,-46(fp)
    7bb0:	10800058 	cmpnei	r2,r2,1
    7bb4:	1000031e 	bne	r2,zero,7bc4 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    7bb8:	00800044 	movi	r2,1
    7bbc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    7bc0:	00004d06 	br	7cf8 <OSFlagPost+0x2f8>
    7bc4:	00004c06 	br	7cf8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    7bc8:	e0bffc17 	ldw	r2,-16(fp)
    7bcc:	10c0020b 	ldhu	r3,8(r2)
    7bd0:	e0bff117 	ldw	r2,-60(fp)
    7bd4:	1080040b 	ldhu	r2,16(r2)
    7bd8:	1884703a 	and	r2,r3,r2
    7bdc:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    7be0:	e0bff40b 	ldhu	r2,-48(fp)
    7be4:	10000b26 	beq	r2,zero,7c14 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    7be8:	e0bff40b 	ldhu	r2,-48(fp)
    7bec:	e13ff117 	ldw	r4,-60(fp)
    7bf0:	100b883a 	mov	r5,r2
    7bf4:	00080f40 	call	80f4 <OS_FlagTaskRdy>
    7bf8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    7bfc:	e0bff483 	ldbu	r2,-46(fp)
    7c00:	10800058 	cmpnei	r2,r2,1
    7c04:	1000031e 	bne	r2,zero,7c14 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    7c08:	00800044 	movi	r2,1
    7c0c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    7c10:	00003906 	br	7cf8 <OSFlagPost+0x2f8>
    7c14:	00003806 	br	7cf8 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    7c18:	e0bffc17 	ldw	r2,-16(fp)
    7c1c:	1080020b 	ldhu	r2,8(r2)
    7c20:	0084303a 	nor	r2,zero,r2
    7c24:	1007883a 	mov	r3,r2
    7c28:	e0bff117 	ldw	r2,-60(fp)
    7c2c:	1080040b 	ldhu	r2,16(r2)
    7c30:	1884703a 	and	r2,r3,r2
    7c34:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    7c38:	e0bff117 	ldw	r2,-60(fp)
    7c3c:	1080040b 	ldhu	r2,16(r2)
    7c40:	10ffffcc 	andi	r3,r2,65535
    7c44:	e0bff40b 	ldhu	r2,-48(fp)
    7c48:	18800b1e 	bne	r3,r2,7c78 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    7c4c:	e0bff40b 	ldhu	r2,-48(fp)
    7c50:	e13ff117 	ldw	r4,-60(fp)
    7c54:	100b883a 	mov	r5,r2
    7c58:	00080f40 	call	80f4 <OS_FlagTaskRdy>
    7c5c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    7c60:	e0bff483 	ldbu	r2,-46(fp)
    7c64:	10800058 	cmpnei	r2,r2,1
    7c68:	1000031e 	bne	r2,zero,7c78 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    7c6c:	00800044 	movi	r2,1
    7c70:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    7c74:	00002006 	br	7cf8 <OSFlagPost+0x2f8>
    7c78:	00001f06 	br	7cf8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    7c7c:	e0bffc17 	ldw	r2,-16(fp)
    7c80:	1080020b 	ldhu	r2,8(r2)
    7c84:	0084303a 	nor	r2,zero,r2
    7c88:	1007883a 	mov	r3,r2
    7c8c:	e0bff117 	ldw	r2,-60(fp)
    7c90:	1080040b 	ldhu	r2,16(r2)
    7c94:	1884703a 	and	r2,r3,r2
    7c98:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    7c9c:	e0bff40b 	ldhu	r2,-48(fp)
    7ca0:	10000b26 	beq	r2,zero,7cd0 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    7ca4:	e0bff40b 	ldhu	r2,-48(fp)
    7ca8:	e13ff117 	ldw	r4,-60(fp)
    7cac:	100b883a 	mov	r5,r2
    7cb0:	00080f40 	call	80f4 <OS_FlagTaskRdy>
    7cb4:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    7cb8:	e0bff483 	ldbu	r2,-46(fp)
    7cbc:	10800058 	cmpnei	r2,r2,1
    7cc0:	1000031e 	bne	r2,zero,7cd0 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    7cc4:	00800044 	movi	r2,1
    7cc8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    7ccc:	00000a06 	br	7cf8 <OSFlagPost+0x2f8>
    7cd0:	00000906 	br	7cf8 <OSFlagPost+0x2f8>
    7cd4:	e0bff317 	ldw	r2,-52(fp)
    7cd8:	e0bff815 	stw	r2,-32(fp)
    7cdc:	e0bff817 	ldw	r2,-32(fp)
    7ce0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    7ce4:	e0bfff17 	ldw	r2,-4(fp)
    7ce8:	00c01bc4 	movi	r3,111
    7cec:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    7cf0:	0005883a 	mov	r2,zero
    7cf4:	00001f06 	br	7d74 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    7cf8:	e0bff117 	ldw	r2,-60(fp)
    7cfc:	10800017 	ldw	r2,0(r2)
    7d00:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    7d04:	e0bff117 	ldw	r2,-60(fp)
    7d08:	103f8a1e 	bne	r2,zero,7b34 <__alt_mem_Flash_flash_data+0xf4007b34>
    7d0c:	e0bff317 	ldw	r2,-52(fp)
    7d10:	e0bff915 	stw	r2,-28(fp)
    7d14:	e0bff917 	ldw	r2,-28(fp)
    7d18:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    7d1c:	e0bff203 	ldbu	r2,-56(fp)
    7d20:	10800058 	cmpnei	r2,r2,1
    7d24:	1000011e 	bne	r2,zero,7d2c <OSFlagPost+0x32c>
        OS_Sched();
    7d28:	00062240 	call	6224 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7d2c:	0005303a 	rdctl	r2,status
    7d30:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7d34:	e0fffa17 	ldw	r3,-24(fp)
    7d38:	00bfff84 	movi	r2,-2
    7d3c:	1884703a 	and	r2,r3,r2
    7d40:	1001703a 	wrctl	status,r2
  
  return context;
    7d44:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    7d48:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
    7d4c:	e0bffc17 	ldw	r2,-16(fp)
    7d50:	1080020b 	ldhu	r2,8(r2)
    7d54:	e0bff50d 	sth	r2,-44(fp)
    7d58:	e0bff317 	ldw	r2,-52(fp)
    7d5c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7d60:	e0bffb17 	ldw	r2,-20(fp)
    7d64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    7d68:	e0bfff17 	ldw	r2,-4(fp)
    7d6c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    7d70:	e0bff50b 	ldhu	r2,-44(fp)
}
    7d74:	e037883a 	mov	sp,fp
    7d78:	dfc00117 	ldw	ra,4(sp)
    7d7c:	df000017 	ldw	fp,0(sp)
    7d80:	dec00204 	addi	sp,sp,8
    7d84:	f800283a 	ret

00007d88 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    7d88:	defff904 	addi	sp,sp,-28
    7d8c:	df000615 	stw	fp,24(sp)
    7d90:	df000604 	addi	fp,sp,24
    7d94:	e13ffe15 	stw	r4,-8(fp)
    7d98:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    7d9c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    7da0:	e0bfff17 	ldw	r2,-4(fp)
    7da4:	1000021e 	bne	r2,zero,7db0 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    7da8:	0005883a 	mov	r2,zero
    7dac:	00002306 	br	7e3c <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    7db0:	e0bffe17 	ldw	r2,-8(fp)
    7db4:	1000051e 	bne	r2,zero,7dcc <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7db8:	e0bfff17 	ldw	r2,-4(fp)
    7dbc:	00c01b84 	movi	r3,110
    7dc0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7dc4:	0005883a 	mov	r2,zero
    7dc8:	00001c06 	br	7e3c <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    7dcc:	e0bffe17 	ldw	r2,-8(fp)
    7dd0:	10800003 	ldbu	r2,0(r2)
    7dd4:	10803fcc 	andi	r2,r2,255
    7dd8:	10800160 	cmpeqi	r2,r2,5
    7ddc:	1000051e 	bne	r2,zero,7df4 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    7de0:	e0bfff17 	ldw	r2,-4(fp)
    7de4:	00c00044 	movi	r3,1
    7de8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7dec:	0005883a 	mov	r2,zero
    7df0:	00001206 	br	7e3c <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7df4:	0005303a 	rdctl	r2,status
    7df8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7dfc:	e0fffc17 	ldw	r3,-16(fp)
    7e00:	00bfff84 	movi	r2,-2
    7e04:	1884703a 	and	r2,r3,r2
    7e08:	1001703a 	wrctl	status,r2
  
  return context;
    7e0c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    7e10:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
    7e14:	e0bffe17 	ldw	r2,-8(fp)
    7e18:	1080020b 	ldhu	r2,8(r2)
    7e1c:	e0bffb0d 	sth	r2,-20(fp)
    7e20:	e0bffa17 	ldw	r2,-24(fp)
    7e24:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7e28:	e0bffd17 	ldw	r2,-12(fp)
    7e2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7e30:	e0bfff17 	ldw	r2,-4(fp)
    7e34:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    7e38:	e0bffb0b 	ldhu	r2,-20(fp)
}
    7e3c:	e037883a 	mov	sp,fp
    7e40:	df000017 	ldw	fp,0(sp)
    7e44:	dec00104 	addi	sp,sp,4
    7e48:	f800283a 	ret

00007e4c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    7e4c:	defff804 	addi	sp,sp,-32
    7e50:	df000715 	stw	fp,28(sp)
    7e54:	df000704 	addi	fp,sp,28
    7e58:	e13ffb15 	stw	r4,-20(fp)
    7e5c:	e17ffc15 	stw	r5,-16(fp)
    7e60:	3009883a 	mov	r4,r6
    7e64:	3807883a 	mov	r3,r7
    7e68:	e0800117 	ldw	r2,4(fp)
    7e6c:	e13ffd0d 	sth	r4,-12(fp)
    7e70:	e0fffe05 	stb	r3,-8(fp)
    7e74:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    7e78:	00800074 	movhi	r2,1
    7e7c:	10913a04 	addi	r2,r2,17640
    7e80:	10c00017 	ldw	r3,0(r2)
    7e84:	00800074 	movhi	r2,1
    7e88:	10913a04 	addi	r2,r2,17640
    7e8c:	10800017 	ldw	r2,0(r2)
    7e90:	10800c03 	ldbu	r2,48(r2)
    7e94:	10800814 	ori	r2,r2,32
    7e98:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    7e9c:	00800074 	movhi	r2,1
    7ea0:	10913a04 	addi	r2,r2,17640
    7ea4:	10800017 	ldw	r2,0(r2)
    7ea8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    7eac:	00800074 	movhi	r2,1
    7eb0:	10913a04 	addi	r2,r2,17640
    7eb4:	10800017 	ldw	r2,0(r2)
    7eb8:	e0ffff0b 	ldhu	r3,-4(fp)
    7ebc:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    7ec0:	00800074 	movhi	r2,1
    7ec4:	10913a04 	addi	r2,r2,17640
    7ec8:	10800017 	ldw	r2,0(r2)
    7ecc:	e0fffc17 	ldw	r3,-16(fp)
    7ed0:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    7ed4:	e0bffc17 	ldw	r2,-16(fp)
    7ed8:	e0fffd0b 	ldhu	r3,-12(fp)
    7edc:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    7ee0:	e0bffc17 	ldw	r2,-16(fp)
    7ee4:	e0fffe03 	ldbu	r3,-8(fp)
    7ee8:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    7eec:	00800074 	movhi	r2,1
    7ef0:	10913a04 	addi	r2,r2,17640
    7ef4:	10c00017 	ldw	r3,0(r2)
    7ef8:	e0bffc17 	ldw	r2,-16(fp)
    7efc:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    7f00:	e0bffb17 	ldw	r2,-20(fp)
    7f04:	10c00117 	ldw	r3,4(r2)
    7f08:	e0bffc17 	ldw	r2,-16(fp)
    7f0c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    7f10:	e0bffc17 	ldw	r2,-16(fp)
    7f14:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    7f18:	e0bffc17 	ldw	r2,-16(fp)
    7f1c:	e0fffb17 	ldw	r3,-20(fp)
    7f20:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    7f24:	e0bffb17 	ldw	r2,-20(fp)
    7f28:	10800117 	ldw	r2,4(r2)
    7f2c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    7f30:	e0bff917 	ldw	r2,-28(fp)
    7f34:	10000326 	beq	r2,zero,7f44 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    7f38:	e0bff917 	ldw	r2,-28(fp)
    7f3c:	e0fffc17 	ldw	r3,-16(fp)
    7f40:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    7f44:	e0bffb17 	ldw	r2,-20(fp)
    7f48:	e0fffc17 	ldw	r3,-16(fp)
    7f4c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    7f50:	00800074 	movhi	r2,1
    7f54:	10913a04 	addi	r2,r2,17640
    7f58:	10800017 	ldw	r2,0(r2)
    7f5c:	10800d03 	ldbu	r2,52(r2)
    7f60:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    7f64:	e0fffa03 	ldbu	r3,-24(fp)
    7f68:	e13ffa03 	ldbu	r4,-24(fp)
    7f6c:	00800074 	movhi	r2,1
    7f70:	10913744 	addi	r2,r2,17629
    7f74:	1105883a 	add	r2,r2,r4
    7f78:	10800003 	ldbu	r2,0(r2)
    7f7c:	1009883a 	mov	r4,r2
    7f80:	00800074 	movhi	r2,1
    7f84:	10913a04 	addi	r2,r2,17640
    7f88:	10800017 	ldw	r2,0(r2)
    7f8c:	10800d43 	ldbu	r2,53(r2)
    7f90:	0084303a 	nor	r2,zero,r2
    7f94:	2084703a 	and	r2,r4,r2
    7f98:	1009883a 	mov	r4,r2
    7f9c:	00800074 	movhi	r2,1
    7fa0:	10913744 	addi	r2,r2,17629
    7fa4:	10c5883a 	add	r2,r2,r3
    7fa8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    7fac:	e0fffa03 	ldbu	r3,-24(fp)
    7fb0:	00800074 	movhi	r2,1
    7fb4:	10913744 	addi	r2,r2,17629
    7fb8:	10c5883a 	add	r2,r2,r3
    7fbc:	10800003 	ldbu	r2,0(r2)
    7fc0:	10803fcc 	andi	r2,r2,255
    7fc4:	10000e1e 	bne	r2,zero,8000 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    7fc8:	00800074 	movhi	r2,1
    7fcc:	10913a04 	addi	r2,r2,17640
    7fd0:	10800017 	ldw	r2,0(r2)
    7fd4:	10800d83 	ldbu	r2,54(r2)
    7fd8:	0084303a 	nor	r2,zero,r2
    7fdc:	1007883a 	mov	r3,r2
    7fe0:	00800074 	movhi	r2,1
    7fe4:	10913704 	addi	r2,r2,17628
    7fe8:	10800003 	ldbu	r2,0(r2)
    7fec:	1884703a 	and	r2,r3,r2
    7ff0:	1007883a 	mov	r3,r2
    7ff4:	00800074 	movhi	r2,1
    7ff8:	10913704 	addi	r2,r2,17628
    7ffc:	10c00005 	stb	r3,0(r2)
    }
}
    8000:	e037883a 	mov	sp,fp
    8004:	df000017 	ldw	fp,0(sp)
    8008:	dec00104 	addi	sp,sp,4
    800c:	f800283a 	ret

00008010 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    8010:	defffb04 	addi	sp,sp,-20
    8014:	dfc00415 	stw	ra,16(sp)
    8018:	df000315 	stw	fp,12(sp)
    801c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    8020:	010000b4 	movhi	r4,2
    8024:	21394d04 	addi	r4,r4,-6860
    8028:	0140dc04 	movi	r5,880
    802c:	00061700 	call	6170 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    8030:	008000b4 	movhi	r2,2
    8034:	10b94d04 	addi	r2,r2,-6860
    8038:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    803c:	008000b4 	movhi	r2,2
    8040:	10b95804 	addi	r2,r2,-6816
    8044:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    8048:	e03ffd0d 	sth	zero,-12(fp)
    804c:	00001306 	br	809c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    8050:	e0bffe17 	ldw	r2,-8(fp)
    8054:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    8058:	e0bffe17 	ldw	r2,-8(fp)
    805c:	e0ffff17 	ldw	r3,-4(fp)
    8060:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    8064:	e0bffe17 	ldw	r2,-8(fp)
    8068:	00c00fc4 	movi	r3,63
    806c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    8070:	e0bffe17 	ldw	r2,-8(fp)
    8074:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    8078:	e0bffe17 	ldw	r2,-8(fp)
    807c:	10800b04 	addi	r2,r2,44
    8080:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    8084:	e0bfff17 	ldw	r2,-4(fp)
    8088:	10800b04 	addi	r2,r2,44
    808c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    8090:	e0bffd0b 	ldhu	r2,-12(fp)
    8094:	10800044 	addi	r2,r2,1
    8098:	e0bffd0d 	sth	r2,-12(fp)
    809c:	e0bffd0b 	ldhu	r2,-12(fp)
    80a0:	108004f0 	cmpltui	r2,r2,19
    80a4:	103fea1e 	bne	r2,zero,8050 <__alt_mem_Flash_flash_data+0xf4008050>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    80a8:	e0bffe17 	ldw	r2,-8(fp)
    80ac:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    80b0:	e0bffe17 	ldw	r2,-8(fp)
    80b4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    80b8:	e0bffe17 	ldw	r2,-8(fp)
    80bc:	00c00fc4 	movi	r3,63
    80c0:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    80c4:	e0bffe17 	ldw	r2,-8(fp)
    80c8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    80cc:	00800074 	movhi	r2,1
    80d0:	10913c04 	addi	r2,r2,17648
    80d4:	00c000b4 	movhi	r3,2
    80d8:	18f94d04 	addi	r3,r3,-6860
    80dc:	10c00015 	stw	r3,0(r2)
#endif
}
    80e0:	e037883a 	mov	sp,fp
    80e4:	dfc00117 	ldw	ra,4(sp)
    80e8:	df000017 	ldw	fp,0(sp)
    80ec:	dec00204 	addi	sp,sp,8
    80f0:	f800283a 	ret

000080f4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    80f4:	defffa04 	addi	sp,sp,-24
    80f8:	dfc00515 	stw	ra,20(sp)
    80fc:	df000415 	stw	fp,16(sp)
    8100:	df000404 	addi	fp,sp,16
    8104:	e13ffe15 	stw	r4,-8(fp)
    8108:	2805883a 	mov	r2,r5
    810c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    8110:	e0bffe17 	ldw	r2,-8(fp)
    8114:	10800217 	ldw	r2,8(r2)
    8118:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
    811c:	e0bffd17 	ldw	r2,-12(fp)
    8120:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    8124:	e0bffd17 	ldw	r2,-12(fp)
    8128:	e0ffff0b 	ldhu	r3,-4(fp)
    812c:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    8130:	e0bffd17 	ldw	r2,-12(fp)
    8134:	10c00c03 	ldbu	r3,48(r2)
    8138:	00bff7c4 	movi	r2,-33
    813c:	1884703a 	and	r2,r3,r2
    8140:	1007883a 	mov	r3,r2
    8144:	e0bffd17 	ldw	r2,-12(fp)
    8148:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    814c:	e0bffd17 	ldw	r2,-12(fp)
    8150:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    8154:	e0bffd17 	ldw	r2,-12(fp)
    8158:	10800c03 	ldbu	r2,48(r2)
    815c:	10803fcc 	andi	r2,r2,255
    8160:	10001f1e 	bne	r2,zero,81e0 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    8164:	e0bffd17 	ldw	r2,-12(fp)
    8168:	10c00d83 	ldbu	r3,54(r2)
    816c:	00800074 	movhi	r2,1
    8170:	10913704 	addi	r2,r2,17628
    8174:	10800003 	ldbu	r2,0(r2)
    8178:	1884b03a 	or	r2,r3,r2
    817c:	1007883a 	mov	r3,r2
    8180:	00800074 	movhi	r2,1
    8184:	10913704 	addi	r2,r2,17628
    8188:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    818c:	e0bffd17 	ldw	r2,-12(fp)
    8190:	10800d03 	ldbu	r2,52(r2)
    8194:	10c03fcc 	andi	r3,r2,255
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800d03 	ldbu	r2,52(r2)
    81a0:	11003fcc 	andi	r4,r2,255
    81a4:	00800074 	movhi	r2,1
    81a8:	10913744 	addi	r2,r2,17629
    81ac:	1105883a 	add	r2,r2,r4
    81b0:	11000003 	ldbu	r4,0(r2)
    81b4:	e0bffd17 	ldw	r2,-12(fp)
    81b8:	10800d43 	ldbu	r2,53(r2)
    81bc:	2084b03a 	or	r2,r4,r2
    81c0:	1009883a 	mov	r4,r2
    81c4:	00800074 	movhi	r2,1
    81c8:	10913744 	addi	r2,r2,17629
    81cc:	10c5883a 	add	r2,r2,r3
    81d0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
    81d4:	00800044 	movi	r2,1
    81d8:	e0bffc05 	stb	r2,-16(fp)
    81dc:	00000106 	br	81e4 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
    81e0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
    81e4:	e13ffe17 	ldw	r4,-8(fp)
    81e8:	00082040 	call	8204 <OS_FlagUnlink>
    return (sched);
    81ec:	e0bffc03 	ldbu	r2,-16(fp)
}
    81f0:	e037883a 	mov	sp,fp
    81f4:	dfc00117 	ldw	ra,4(sp)
    81f8:	df000017 	ldw	fp,0(sp)
    81fc:	dec00204 	addi	sp,sp,8
    8200:	f800283a 	ret

00008204 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    8204:	defffa04 	addi	sp,sp,-24
    8208:	df000515 	stw	fp,20(sp)
    820c:	df000504 	addi	fp,sp,20
    8210:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    8214:	e0bfff17 	ldw	r2,-4(fp)
    8218:	10800117 	ldw	r2,4(r2)
    821c:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    8220:	e0bfff17 	ldw	r2,-4(fp)
    8224:	10800017 	ldw	r2,0(r2)
    8228:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    822c:	e0bffb17 	ldw	r2,-20(fp)
    8230:	10000b1e 	bne	r2,zero,8260 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    8234:	e0bfff17 	ldw	r2,-4(fp)
    8238:	10800317 	ldw	r2,12(r2)
    823c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    8240:	e0bffd17 	ldw	r2,-12(fp)
    8244:	e0fffc17 	ldw	r3,-16(fp)
    8248:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    824c:	e0bffc17 	ldw	r2,-16(fp)
    8250:	10000b26 	beq	r2,zero,8280 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    8254:	e0bffc17 	ldw	r2,-16(fp)
    8258:	10000115 	stw	zero,4(r2)
    825c:	00000806 	br	8280 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    8260:	e0bffb17 	ldw	r2,-20(fp)
    8264:	e0fffc17 	ldw	r3,-16(fp)
    8268:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    826c:	e0bffc17 	ldw	r2,-16(fp)
    8270:	10000326 	beq	r2,zero,8280 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    8274:	e0bffc17 	ldw	r2,-16(fp)
    8278:	e0fffb17 	ldw	r3,-20(fp)
    827c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    8280:	e0bfff17 	ldw	r2,-4(fp)
    8284:	10800217 	ldw	r2,8(r2)
    8288:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    828c:	e0bffe17 	ldw	r2,-8(fp)
    8290:	10000a15 	stw	zero,40(r2)
#endif
}
    8294:	e037883a 	mov	sp,fp
    8298:	df000017 	ldw	fp,0(sp)
    829c:	dec00104 	addi	sp,sp,4
    82a0:	f800283a 	ret

000082a4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    82a4:	defff404 	addi	sp,sp,-48
    82a8:	df000b15 	stw	fp,44(sp)
    82ac:	df000b04 	addi	fp,sp,44
    82b0:	e13ffc15 	stw	r4,-16(fp)
    82b4:	e17ffd15 	stw	r5,-12(fp)
    82b8:	e1bffe15 	stw	r6,-8(fp)
    82bc:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    82c0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    82c4:	e0bfff17 	ldw	r2,-4(fp)
    82c8:	1000021e 	bne	r2,zero,82d4 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
    82cc:	0005883a 	mov	r2,zero
    82d0:	00006d06 	br	8488 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    82d4:	e0bffc17 	ldw	r2,-16(fp)
    82d8:	1000051e 	bne	r2,zero,82f0 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    82dc:	e0bfff17 	ldw	r2,-4(fp)
    82e0:	00c01884 	movi	r3,98
    82e4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    82e8:	0005883a 	mov	r2,zero
    82ec:	00006606 	br	8488 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    82f0:	e0bffc17 	ldw	r2,-16(fp)
    82f4:	108000cc 	andi	r2,r2,3
    82f8:	10000526 	beq	r2,zero,8310 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    82fc:	e0bfff17 	ldw	r2,-4(fp)
    8300:	00c01884 	movi	r3,98
    8304:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    8308:	0005883a 	mov	r2,zero
    830c:	00005e06 	br	8488 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    8310:	e0bffd17 	ldw	r2,-12(fp)
    8314:	108000a8 	cmpgeui	r2,r2,2
    8318:	1000051e 	bne	r2,zero,8330 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    831c:	e0bfff17 	ldw	r2,-4(fp)
    8320:	00c016c4 	movi	r3,91
    8324:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    8328:	0005883a 	mov	r2,zero
    832c:	00005606 	br	8488 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    8330:	e0bffe17 	ldw	r2,-8(fp)
    8334:	10800128 	cmpgeui	r2,r2,4
    8338:	1000051e 	bne	r2,zero,8350 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    833c:	e0bfff17 	ldw	r2,-4(fp)
    8340:	00c01704 	movi	r3,92
    8344:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    8348:	0005883a 	mov	r2,zero
    834c:	00004e06 	br	8488 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8350:	0005303a 	rdctl	r2,status
    8354:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8358:	e0fffa17 	ldw	r3,-24(fp)
    835c:	00bfff84 	movi	r2,-2
    8360:	1884703a 	and	r2,r3,r2
    8364:	1001703a 	wrctl	status,r2
  
  return context;
    8368:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    836c:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    8370:	00800074 	movhi	r2,1
    8374:	10913404 	addi	r2,r2,17616
    8378:	10800017 	ldw	r2,0(r2)
    837c:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    8380:	00800074 	movhi	r2,1
    8384:	10913404 	addi	r2,r2,17616
    8388:	10800017 	ldw	r2,0(r2)
    838c:	10000726 	beq	r2,zero,83ac <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    8390:	00800074 	movhi	r2,1
    8394:	10913404 	addi	r2,r2,17616
    8398:	10800017 	ldw	r2,0(r2)
    839c:	10c00117 	ldw	r3,4(r2)
    83a0:	00800074 	movhi	r2,1
    83a4:	10913404 	addi	r2,r2,17616
    83a8:	10c00015 	stw	r3,0(r2)
    83ac:	e0bff817 	ldw	r2,-32(fp)
    83b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    83b4:	e0bffb17 	ldw	r2,-20(fp)
    83b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    83bc:	e0bff917 	ldw	r2,-28(fp)
    83c0:	1000051e 	bne	r2,zero,83d8 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
    83c4:	e0bfff17 	ldw	r2,-4(fp)
    83c8:	00c01684 	movi	r3,90
    83cc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    83d0:	0005883a 	mov	r2,zero
    83d4:	00002c06 	br	8488 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    83d8:	e0bffc17 	ldw	r2,-16(fp)
    83dc:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    83e0:	e0fffc17 	ldw	r3,-16(fp)
    83e4:	e0bffe17 	ldw	r2,-8(fp)
    83e8:	1885883a 	add	r2,r3,r2
    83ec:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
    83f0:	e03ff715 	stw	zero,-36(fp)
    83f4:	00000c06 	br	8428 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    83f8:	e0bff617 	ldw	r2,-40(fp)
    83fc:	e0fff517 	ldw	r3,-44(fp)
    8400:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    8404:	e0bff517 	ldw	r2,-44(fp)
    8408:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    840c:	e0fff517 	ldw	r3,-44(fp)
    8410:	e0bffe17 	ldw	r2,-8(fp)
    8414:	1885883a 	add	r2,r3,r2
    8418:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
    841c:	e0bff717 	ldw	r2,-36(fp)
    8420:	10800044 	addi	r2,r2,1
    8424:	e0bff715 	stw	r2,-36(fp)
    8428:	e0bffd17 	ldw	r2,-12(fp)
    842c:	10bfffc4 	addi	r2,r2,-1
    8430:	e0fff717 	ldw	r3,-36(fp)
    8434:	18bff036 	bltu	r3,r2,83f8 <__alt_mem_Flash_flash_data+0xf40083f8>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    8438:	e0bff617 	ldw	r2,-40(fp)
    843c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    8440:	e0bff917 	ldw	r2,-28(fp)
    8444:	e0fffc17 	ldw	r3,-16(fp)
    8448:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    844c:	e0bff917 	ldw	r2,-28(fp)
    8450:	e0fffc17 	ldw	r3,-16(fp)
    8454:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    8458:	e0bff917 	ldw	r2,-28(fp)
    845c:	e0fffd17 	ldw	r3,-12(fp)
    8460:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
    8464:	e0bff917 	ldw	r2,-28(fp)
    8468:	e0fffd17 	ldw	r3,-12(fp)
    846c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    8470:	e0bff917 	ldw	r2,-28(fp)
    8474:	e0fffe17 	ldw	r3,-8(fp)
    8478:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
    847c:	e0bfff17 	ldw	r2,-4(fp)
    8480:	10000005 	stb	zero,0(r2)
    return (pmem);
    8484:	e0bff917 	ldw	r2,-28(fp)
}
    8488:	e037883a 	mov	sp,fp
    848c:	df000017 	ldw	fp,0(sp)
    8490:	dec00104 	addi	sp,sp,4
    8494:	f800283a 	ret

00008498 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    8498:	defff804 	addi	sp,sp,-32
    849c:	df000715 	stw	fp,28(sp)
    84a0:	df000704 	addi	fp,sp,28
    84a4:	e13ffe15 	stw	r4,-8(fp)
    84a8:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    84ac:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    84b0:	e0bfff17 	ldw	r2,-4(fp)
    84b4:	1000021e 	bne	r2,zero,84c0 <OSMemGet+0x28>
        return ((void *)0);
    84b8:	0005883a 	mov	r2,zero
    84bc:	00002e06 	br	8578 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    84c0:	e0bffe17 	ldw	r2,-8(fp)
    84c4:	1000051e 	bne	r2,zero,84dc <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    84c8:	e0bfff17 	ldw	r2,-4(fp)
    84cc:	00c01804 	movi	r3,96
    84d0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    84d4:	0005883a 	mov	r2,zero
    84d8:	00002706 	br	8578 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    84dc:	0005303a 	rdctl	r2,status
    84e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    84e4:	e0fffb17 	ldw	r3,-20(fp)
    84e8:	00bfff84 	movi	r2,-2
    84ec:	1884703a 	and	r2,r3,r2
    84f0:	1001703a 	wrctl	status,r2
  
  return context;
    84f4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    84f8:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    84fc:	e0bffe17 	ldw	r2,-8(fp)
    8500:	10800417 	ldw	r2,16(r2)
    8504:	10001426 	beq	r2,zero,8558 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    8508:	e0bffe17 	ldw	r2,-8(fp)
    850c:	10800117 	ldw	r2,4(r2)
    8510:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    8514:	e0bffa17 	ldw	r2,-24(fp)
    8518:	10c00017 	ldw	r3,0(r2)
    851c:	e0bffe17 	ldw	r2,-8(fp)
    8520:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    8524:	e0bffe17 	ldw	r2,-8(fp)
    8528:	10800417 	ldw	r2,16(r2)
    852c:	10ffffc4 	addi	r3,r2,-1
    8530:	e0bffe17 	ldw	r2,-8(fp)
    8534:	10c00415 	stw	r3,16(r2)
    8538:	e0bff917 	ldw	r2,-28(fp)
    853c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8540:	e0bffc17 	ldw	r2,-16(fp)
    8544:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    8548:	e0bfff17 	ldw	r2,-4(fp)
    854c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    8550:	e0bffa17 	ldw	r2,-24(fp)
    8554:	00000806 	br	8578 <OSMemGet+0xe0>
    8558:	e0bff917 	ldw	r2,-28(fp)
    855c:	e0bffd15 	stw	r2,-12(fp)
    8560:	e0bffd17 	ldw	r2,-12(fp)
    8564:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    8568:	e0bfff17 	ldw	r2,-4(fp)
    856c:	00c01744 	movi	r3,93
    8570:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    8574:	0005883a 	mov	r2,zero
}
    8578:	e037883a 	mov	sp,fp
    857c:	df000017 	ldw	fp,0(sp)
    8580:	dec00104 	addi	sp,sp,4
    8584:	f800283a 	ret

00008588 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    8588:	defff704 	addi	sp,sp,-36
    858c:	dfc00815 	stw	ra,32(sp)
    8590:	df000715 	stw	fp,28(sp)
    8594:	df000704 	addi	fp,sp,28
    8598:	e13ffd15 	stw	r4,-12(fp)
    859c:	e17ffe15 	stw	r5,-8(fp)
    85a0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    85a4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    85a8:	e0bfff17 	ldw	r2,-4(fp)
    85ac:	1000021e 	bne	r2,zero,85b8 <OSMemNameGet+0x30>
        return (0);
    85b0:	0005883a 	mov	r2,zero
    85b4:	00002d06 	br	866c <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    85b8:	e0bffd17 	ldw	r2,-12(fp)
    85bc:	1000051e 	bne	r2,zero,85d4 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    85c0:	e0bfff17 	ldw	r2,-4(fp)
    85c4:	00c01804 	movi	r3,96
    85c8:	10c00005 	stb	r3,0(r2)
        return (0);
    85cc:	0005883a 	mov	r2,zero
    85d0:	00002606 	br	866c <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    85d4:	e0bffe17 	ldw	r2,-8(fp)
    85d8:	1000051e 	bne	r2,zero,85f0 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    85dc:	e0bfff17 	ldw	r2,-4(fp)
    85e0:	00c00304 	movi	r3,12
    85e4:	10c00005 	stb	r3,0(r2)
        return (0);
    85e8:	0005883a 	mov	r2,zero
    85ec:	00001f06 	br	866c <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    85f0:	00800074 	movhi	r2,1
    85f4:	10913904 	addi	r2,r2,17636
    85f8:	10800003 	ldbu	r2,0(r2)
    85fc:	10803fcc 	andi	r2,r2,255
    8600:	10000526 	beq	r2,zero,8618 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    8604:	e0bfff17 	ldw	r2,-4(fp)
    8608:	00c00444 	movi	r3,17
    860c:	10c00005 	stb	r3,0(r2)
        return (0);
    8610:	0005883a 	mov	r2,zero
    8614:	00001506 	br	866c <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8618:	0005303a 	rdctl	r2,status
    861c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8620:	e0fffb17 	ldw	r3,-20(fp)
    8624:	00bfff84 	movi	r2,-2
    8628:	1884703a 	and	r2,r3,r2
    862c:	1001703a 	wrctl	status,r2
  
  return context;
    8630:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    8634:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    8638:	e0bffd17 	ldw	r2,-12(fp)
    863c:	10800504 	addi	r2,r2,20
    8640:	e13ffe17 	ldw	r4,-8(fp)
    8644:	100b883a 	mov	r5,r2
    8648:	00063600 	call	6360 <OS_StrCopy>
    864c:	e0bffa05 	stb	r2,-24(fp)
    8650:	e0bff917 	ldw	r2,-28(fp)
    8654:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8658:	e0bffc17 	ldw	r2,-16(fp)
    865c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    8660:	e0bfff17 	ldw	r2,-4(fp)
    8664:	10000005 	stb	zero,0(r2)
    return (len);
    8668:	e0bffa03 	ldbu	r2,-24(fp)
}
    866c:	e037883a 	mov	sp,fp
    8670:	dfc00117 	ldw	ra,4(sp)
    8674:	df000017 	ldw	fp,0(sp)
    8678:	dec00204 	addi	sp,sp,8
    867c:	f800283a 	ret

00008680 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    8680:	defff604 	addi	sp,sp,-40
    8684:	dfc00915 	stw	ra,36(sp)
    8688:	df000815 	stw	fp,32(sp)
    868c:	df000804 	addi	fp,sp,32
    8690:	e13ffd15 	stw	r4,-12(fp)
    8694:	e17ffe15 	stw	r5,-8(fp)
    8698:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    869c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    86a0:	e0bfff17 	ldw	r2,-4(fp)
    86a4:	1000011e 	bne	r2,zero,86ac <OSMemNameSet+0x2c>
        return;
    86a8:	00003606 	br	8784 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    86ac:	e0bffd17 	ldw	r2,-12(fp)
    86b0:	1000041e 	bne	r2,zero,86c4 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    86b4:	e0bfff17 	ldw	r2,-4(fp)
    86b8:	00c01804 	movi	r3,96
    86bc:	10c00005 	stb	r3,0(r2)
        return;
    86c0:	00003006 	br	8784 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    86c4:	e0bffe17 	ldw	r2,-8(fp)
    86c8:	1000041e 	bne	r2,zero,86dc <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    86cc:	e0bfff17 	ldw	r2,-4(fp)
    86d0:	00c00304 	movi	r3,12
    86d4:	10c00005 	stb	r3,0(r2)
        return;
    86d8:	00002a06 	br	8784 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    86dc:	00800074 	movhi	r2,1
    86e0:	10913904 	addi	r2,r2,17636
    86e4:	10800003 	ldbu	r2,0(r2)
    86e8:	10803fcc 	andi	r2,r2,255
    86ec:	10000426 	beq	r2,zero,8700 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
    86f0:	e0bfff17 	ldw	r2,-4(fp)
    86f4:	00c00484 	movi	r3,18
    86f8:	10c00005 	stb	r3,0(r2)
        return;
    86fc:	00002106 	br	8784 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8700:	0005303a 	rdctl	r2,status
    8704:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8708:	e0fffa17 	ldw	r3,-24(fp)
    870c:	00bfff84 	movi	r2,-2
    8710:	1884703a 	and	r2,r3,r2
    8714:	1001703a 	wrctl	status,r2
  
  return context;
    8718:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    871c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    8720:	e13ffe17 	ldw	r4,-8(fp)
    8724:	00063d40 	call	63d4 <OS_StrLen>
    8728:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    872c:	e0bff903 	ldbu	r2,-28(fp)
    8730:	10800830 	cmpltui	r2,r2,32
    8734:	1000081e 	bne	r2,zero,8758 <OSMemNameSet+0xd8>
    8738:	e0bff817 	ldw	r2,-32(fp)
    873c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8740:	e0bffb17 	ldw	r2,-20(fp)
    8744:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    8748:	e0bfff17 	ldw	r2,-4(fp)
    874c:	00c018c4 	movi	r3,99
    8750:	10c00005 	stb	r3,0(r2)
        return;
    8754:	00000b06 	br	8784 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    8758:	e0bffd17 	ldw	r2,-12(fp)
    875c:	10800504 	addi	r2,r2,20
    8760:	1009883a 	mov	r4,r2
    8764:	e17ffe17 	ldw	r5,-8(fp)
    8768:	00063600 	call	6360 <OS_StrCopy>
    876c:	e0bff817 	ldw	r2,-32(fp)
    8770:	e0bffc15 	stw	r2,-16(fp)
    8774:	e0bffc17 	ldw	r2,-16(fp)
    8778:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    877c:	e0bfff17 	ldw	r2,-4(fp)
    8780:	10000005 	stb	zero,0(r2)
}
    8784:	e037883a 	mov	sp,fp
    8788:	dfc00117 	ldw	ra,4(sp)
    878c:	df000017 	ldw	fp,0(sp)
    8790:	dec00204 	addi	sp,sp,8
    8794:	f800283a 	ret

00008798 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    8798:	defff904 	addi	sp,sp,-28
    879c:	df000615 	stw	fp,24(sp)
    87a0:	df000604 	addi	fp,sp,24
    87a4:	e13ffe15 	stw	r4,-8(fp)
    87a8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    87ac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    87b0:	e0bffe17 	ldw	r2,-8(fp)
    87b4:	1000021e 	bne	r2,zero,87c0 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    87b8:	00801804 	movi	r2,96
    87bc:	00002806 	br	8860 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    87c0:	e0bfff17 	ldw	r2,-4(fp)
    87c4:	1000021e 	bne	r2,zero,87d0 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    87c8:	008017c4 	movi	r2,95
    87cc:	00002406 	br	8860 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    87d0:	0005303a 	rdctl	r2,status
    87d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    87d8:	e0fffb17 	ldw	r3,-20(fp)
    87dc:	00bfff84 	movi	r2,-2
    87e0:	1884703a 	and	r2,r3,r2
    87e4:	1001703a 	wrctl	status,r2
  
  return context;
    87e8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    87ec:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    87f0:	e0bffe17 	ldw	r2,-8(fp)
    87f4:	10c00417 	ldw	r3,16(r2)
    87f8:	e0bffe17 	ldw	r2,-8(fp)
    87fc:	10800317 	ldw	r2,12(r2)
    8800:	18800636 	bltu	r3,r2,881c <OSMemPut+0x84>
    8804:	e0bffa17 	ldw	r2,-24(fp)
    8808:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    880c:	e0bffc17 	ldw	r2,-16(fp)
    8810:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    8814:	00801784 	movi	r2,94
    8818:	00001106 	br	8860 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    881c:	e0bffe17 	ldw	r2,-8(fp)
    8820:	10c00117 	ldw	r3,4(r2)
    8824:	e0bfff17 	ldw	r2,-4(fp)
    8828:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
    882c:	e0bffe17 	ldw	r2,-8(fp)
    8830:	e0ffff17 	ldw	r3,-4(fp)
    8834:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    8838:	e0bffe17 	ldw	r2,-8(fp)
    883c:	10800417 	ldw	r2,16(r2)
    8840:	10c00044 	addi	r3,r2,1
    8844:	e0bffe17 	ldw	r2,-8(fp)
    8848:	10c00415 	stw	r3,16(r2)
    884c:	e0bffa17 	ldw	r2,-24(fp)
    8850:	e0bffd15 	stw	r2,-12(fp)
    8854:	e0bffd17 	ldw	r2,-12(fp)
    8858:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    885c:	0005883a 	mov	r2,zero
}
    8860:	e037883a 	mov	sp,fp
    8864:	df000017 	ldw	fp,0(sp)
    8868:	dec00104 	addi	sp,sp,4
    886c:	f800283a 	ret

00008870 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    8870:	defffa04 	addi	sp,sp,-24
    8874:	df000515 	stw	fp,20(sp)
    8878:	df000504 	addi	fp,sp,20
    887c:	e13ffe15 	stw	r4,-8(fp)
    8880:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8884:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    8888:	e0bffe17 	ldw	r2,-8(fp)
    888c:	1000021e 	bne	r2,zero,8898 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    8890:	00801804 	movi	r2,96
    8894:	00002c06 	br	8948 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    8898:	e0bfff17 	ldw	r2,-4(fp)
    889c:	1000021e 	bne	r2,zero,88a8 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    88a0:	00801844 	movi	r2,97
    88a4:	00002806 	br	8948 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    88a8:	0005303a 	rdctl	r2,status
    88ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    88b0:	e0fffc17 	ldw	r3,-16(fp)
    88b4:	00bfff84 	movi	r2,-2
    88b8:	1884703a 	and	r2,r3,r2
    88bc:	1001703a 	wrctl	status,r2
  
  return context;
    88c0:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    88c4:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    88c8:	e0bffe17 	ldw	r2,-8(fp)
    88cc:	10c00017 	ldw	r3,0(r2)
    88d0:	e0bfff17 	ldw	r2,-4(fp)
    88d4:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    88d8:	e0bffe17 	ldw	r2,-8(fp)
    88dc:	10c00117 	ldw	r3,4(r2)
    88e0:	e0bfff17 	ldw	r2,-4(fp)
    88e4:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    88e8:	e0bffe17 	ldw	r2,-8(fp)
    88ec:	10c00217 	ldw	r3,8(r2)
    88f0:	e0bfff17 	ldw	r2,-4(fp)
    88f4:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    88f8:	e0bffe17 	ldw	r2,-8(fp)
    88fc:	10c00317 	ldw	r3,12(r2)
    8900:	e0bfff17 	ldw	r2,-4(fp)
    8904:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    8908:	e0bffe17 	ldw	r2,-8(fp)
    890c:	10c00417 	ldw	r3,16(r2)
    8910:	e0bfff17 	ldw	r2,-4(fp)
    8914:	10c00415 	stw	r3,16(r2)
    8918:	e0bffb17 	ldw	r2,-20(fp)
    891c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8920:	e0bffd17 	ldw	r2,-12(fp)
    8924:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    8928:	e0bfff17 	ldw	r2,-4(fp)
    892c:	10c00317 	ldw	r3,12(r2)
    8930:	e0bfff17 	ldw	r2,-4(fp)
    8934:	10800417 	ldw	r2,16(r2)
    8938:	1887c83a 	sub	r3,r3,r2
    893c:	e0bfff17 	ldw	r2,-4(fp)
    8940:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    8944:	0005883a 	mov	r2,zero
}
    8948:	e037883a 	mov	sp,fp
    894c:	df000017 	ldw	fp,0(sp)
    8950:	dec00104 	addi	sp,sp,4
    8954:	f800283a 	ret

00008958 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    8958:	defffc04 	addi	sp,sp,-16
    895c:	dfc00315 	stw	ra,12(sp)
    8960:	df000215 	stw	fp,8(sp)
    8964:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    8968:	010000b4 	movhi	r4,2
    896c:	213a2904 	addi	r4,r4,-5980
    8970:	01430c04 	movi	r5,3120
    8974:	00061700 	call	6170 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    8978:	008000b4 	movhi	r2,2
    897c:	10ba2904 	addi	r2,r2,-5980
    8980:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    8984:	e03fff0d 	sth	zero,-4(fp)
    8988:	00001306 	br	89d8 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    898c:	e0bfff0b 	ldhu	r2,-4(fp)
    8990:	10800044 	addi	r2,r2,1
    8994:	10c00d24 	muli	r3,r2,52
    8998:	008000b4 	movhi	r2,2
    899c:	10ba2904 	addi	r2,r2,-5980
    89a0:	1887883a 	add	r3,r3,r2
    89a4:	e0bffe17 	ldw	r2,-8(fp)
    89a8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    89ac:	e0bffe17 	ldw	r2,-8(fp)
    89b0:	00c00fc4 	movi	r3,63
    89b4:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    89b8:	e0bffe17 	ldw	r2,-8(fp)
    89bc:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    89c0:	e0bffe17 	ldw	r2,-8(fp)
    89c4:	10800d04 	addi	r2,r2,52
    89c8:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    89cc:	e0bfff0b 	ldhu	r2,-4(fp)
    89d0:	10800044 	addi	r2,r2,1
    89d4:	e0bfff0d 	sth	r2,-4(fp)
    89d8:	e0bfff0b 	ldhu	r2,-4(fp)
    89dc:	10800ef0 	cmpltui	r2,r2,59
    89e0:	103fea1e 	bne	r2,zero,898c <__alt_mem_Flash_flash_data+0xf400898c>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    89e4:	e0bffe17 	ldw	r2,-8(fp)
    89e8:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    89ec:	e0bffe17 	ldw	r2,-8(fp)
    89f0:	00c00fc4 	movi	r3,63
    89f4:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    89f8:	e0bffe17 	ldw	r2,-8(fp)
    89fc:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    8a00:	00800074 	movhi	r2,1
    8a04:	10913404 	addi	r2,r2,17616
    8a08:	00c000b4 	movhi	r3,2
    8a0c:	18fa2904 	addi	r3,r3,-5980
    8a10:	10c00015 	stw	r3,0(r2)
#endif
}
    8a14:	e037883a 	mov	sp,fp
    8a18:	dfc00117 	ldw	ra,4(sp)
    8a1c:	df000017 	ldw	fp,0(sp)
    8a20:	dec00204 	addi	sp,sp,8
    8a24:	f800283a 	ret

00008a28 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    8a28:	defff804 	addi	sp,sp,-32
    8a2c:	df000715 	stw	fp,28(sp)
    8a30:	df000704 	addi	fp,sp,28
    8a34:	e13ffe15 	stw	r4,-8(fp)
    8a38:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8a3c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    8a40:	e0bfff17 	ldw	r2,-4(fp)
    8a44:	1000021e 	bne	r2,zero,8a50 <OSQAccept+0x28>
        return ((void *)0);
    8a48:	0005883a 	mov	r2,zero
    8a4c:	00004206 	br	8b58 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    8a50:	e0bffe17 	ldw	r2,-8(fp)
    8a54:	1000051e 	bne	r2,zero,8a6c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    8a58:	e0bfff17 	ldw	r2,-4(fp)
    8a5c:	00c00104 	movi	r3,4
    8a60:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8a64:	0005883a 	mov	r2,zero
    8a68:	00003b06 	br	8b58 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    8a6c:	e0bffe17 	ldw	r2,-8(fp)
    8a70:	10800003 	ldbu	r2,0(r2)
    8a74:	10803fcc 	andi	r2,r2,255
    8a78:	108000a0 	cmpeqi	r2,r2,2
    8a7c:	1000051e 	bne	r2,zero,8a94 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    8a80:	e0bfff17 	ldw	r2,-4(fp)
    8a84:	00c00044 	movi	r3,1
    8a88:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8a8c:	0005883a 	mov	r2,zero
    8a90:	00003106 	br	8b58 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8a94:	0005303a 	rdctl	r2,status
    8a98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8a9c:	e0fffc17 	ldw	r3,-16(fp)
    8aa0:	00bfff84 	movi	r2,-2
    8aa4:	1884703a 	and	r2,r3,r2
    8aa8:	1001703a 	wrctl	status,r2
  
  return context;
    8aac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8ab0:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    8ab4:	e0bffe17 	ldw	r2,-8(fp)
    8ab8:	10800117 	ldw	r2,4(r2)
    8abc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    8ac0:	e0bffb17 	ldw	r2,-20(fp)
    8ac4:	1080058b 	ldhu	r2,22(r2)
    8ac8:	10bfffcc 	andi	r2,r2,65535
    8acc:	10001926 	beq	r2,zero,8b34 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    8ad0:	e0bffb17 	ldw	r2,-20(fp)
    8ad4:	10800417 	ldw	r2,16(r2)
    8ad8:	11000104 	addi	r4,r2,4
    8adc:	e0fffb17 	ldw	r3,-20(fp)
    8ae0:	19000415 	stw	r4,16(r3)
    8ae4:	10800017 	ldw	r2,0(r2)
    8ae8:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    8aec:	e0bffb17 	ldw	r2,-20(fp)
    8af0:	1080058b 	ldhu	r2,22(r2)
    8af4:	10bfffc4 	addi	r2,r2,-1
    8af8:	1007883a 	mov	r3,r2
    8afc:	e0bffb17 	ldw	r2,-20(fp)
    8b00:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    8b04:	e0bffb17 	ldw	r2,-20(fp)
    8b08:	10c00417 	ldw	r3,16(r2)
    8b0c:	e0bffb17 	ldw	r2,-20(fp)
    8b10:	10800217 	ldw	r2,8(r2)
    8b14:	1880041e 	bne	r3,r2,8b28 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
    8b18:	e0bffb17 	ldw	r2,-20(fp)
    8b1c:	10c00117 	ldw	r3,4(r2)
    8b20:	e0bffb17 	ldw	r2,-20(fp)
    8b24:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    8b28:	e0bfff17 	ldw	r2,-4(fp)
    8b2c:	10000005 	stb	zero,0(r2)
    8b30:	00000406 	br	8b44 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    8b34:	e0bfff17 	ldw	r2,-4(fp)
    8b38:	00c007c4 	movi	r3,31
    8b3c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    8b40:	e03ff915 	stw	zero,-28(fp)
    8b44:	e0bffa17 	ldw	r2,-24(fp)
    8b48:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8b4c:	e0bffd17 	ldw	r2,-12(fp)
    8b50:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    8b54:	e0bff917 	ldw	r2,-28(fp)
}
    8b58:	e037883a 	mov	sp,fp
    8b5c:	df000017 	ldw	fp,0(sp)
    8b60:	dec00104 	addi	sp,sp,4
    8b64:	f800283a 	ret

00008b68 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    8b68:	defff404 	addi	sp,sp,-48
    8b6c:	dfc00b15 	stw	ra,44(sp)
    8b70:	df000a15 	stw	fp,40(sp)
    8b74:	df000a04 	addi	fp,sp,40
    8b78:	e13ffe15 	stw	r4,-8(fp)
    8b7c:	2805883a 	mov	r2,r5
    8b80:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8b84:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    8b88:	00800074 	movhi	r2,1
    8b8c:	10913904 	addi	r2,r2,17636
    8b90:	10800003 	ldbu	r2,0(r2)
    8b94:	10803fcc 	andi	r2,r2,255
    8b98:	10000226 	beq	r2,zero,8ba4 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    8b9c:	0005883a 	mov	r2,zero
    8ba0:	00006b06 	br	8d50 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8ba4:	0005303a 	rdctl	r2,status
    8ba8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8bac:	e0fff917 	ldw	r3,-28(fp)
    8bb0:	00bfff84 	movi	r2,-2
    8bb4:	1884703a 	and	r2,r3,r2
    8bb8:	1001703a 	wrctl	status,r2
  
  return context;
    8bbc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    8bc0:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    8bc4:	00800074 	movhi	r2,1
    8bc8:	10913804 	addi	r2,r2,17632
    8bcc:	10800017 	ldw	r2,0(r2)
    8bd0:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    8bd4:	00800074 	movhi	r2,1
    8bd8:	10913804 	addi	r2,r2,17632
    8bdc:	10800017 	ldw	r2,0(r2)
    8be0:	10000726 	beq	r2,zero,8c00 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    8be4:	00800074 	movhi	r2,1
    8be8:	10913804 	addi	r2,r2,17632
    8bec:	10800017 	ldw	r2,0(r2)
    8bf0:	10c00117 	ldw	r3,4(r2)
    8bf4:	00800074 	movhi	r2,1
    8bf8:	10913804 	addi	r2,r2,17632
    8bfc:	10c00015 	stw	r3,0(r2)
    8c00:	e0bff717 	ldw	r2,-36(fp)
    8c04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8c08:	e0bffa17 	ldw	r2,-24(fp)
    8c0c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    8c10:	e0bff617 	ldw	r2,-40(fp)
    8c14:	10004d26 	beq	r2,zero,8d4c <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8c18:	0005303a 	rdctl	r2,status
    8c1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8c20:	e0fffb17 	ldw	r3,-20(fp)
    8c24:	00bfff84 	movi	r2,-2
    8c28:	1884703a 	and	r2,r3,r2
    8c2c:	1001703a 	wrctl	status,r2
  
  return context;
    8c30:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    8c34:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    8c38:	00800074 	movhi	r2,1
    8c3c:	10913604 	addi	r2,r2,17624
    8c40:	10800017 	ldw	r2,0(r2)
    8c44:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    8c48:	e0bff817 	ldw	r2,-32(fp)
    8c4c:	10003126 	beq	r2,zero,8d14 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    8c50:	00800074 	movhi	r2,1
    8c54:	10913604 	addi	r2,r2,17624
    8c58:	10800017 	ldw	r2,0(r2)
    8c5c:	10c00017 	ldw	r3,0(r2)
    8c60:	00800074 	movhi	r2,1
    8c64:	10913604 	addi	r2,r2,17624
    8c68:	10c00015 	stw	r3,0(r2)
    8c6c:	e0bff717 	ldw	r2,-36(fp)
    8c70:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8c74:	e0bffc17 	ldw	r2,-16(fp)
    8c78:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    8c7c:	e0bff817 	ldw	r2,-32(fp)
    8c80:	e0fffe17 	ldw	r3,-8(fp)
    8c84:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
    8c88:	e0bfff0b 	ldhu	r2,-4(fp)
    8c8c:	1085883a 	add	r2,r2,r2
    8c90:	1085883a 	add	r2,r2,r2
    8c94:	1007883a 	mov	r3,r2
    8c98:	e0bffe17 	ldw	r2,-8(fp)
    8c9c:	10c7883a 	add	r3,r2,r3
    8ca0:	e0bff817 	ldw	r2,-32(fp)
    8ca4:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    8ca8:	e0bff817 	ldw	r2,-32(fp)
    8cac:	e0fffe17 	ldw	r3,-8(fp)
    8cb0:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
    8cb4:	e0bff817 	ldw	r2,-32(fp)
    8cb8:	e0fffe17 	ldw	r3,-8(fp)
    8cbc:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
    8cc0:	e0bff817 	ldw	r2,-32(fp)
    8cc4:	e0ffff0b 	ldhu	r3,-4(fp)
    8cc8:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
    8ccc:	e0bff817 	ldw	r2,-32(fp)
    8cd0:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    8cd4:	e0bff617 	ldw	r2,-40(fp)
    8cd8:	00c00084 	movi	r3,2
    8cdc:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
    8ce0:	e0bff617 	ldw	r2,-40(fp)
    8ce4:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    8ce8:	e0bff617 	ldw	r2,-40(fp)
    8cec:	e0fff817 	ldw	r3,-32(fp)
    8cf0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    8cf4:	e0bff617 	ldw	r2,-40(fp)
    8cf8:	00c00fc4 	movi	r3,63
    8cfc:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    8d00:	e0bff617 	ldw	r2,-40(fp)
    8d04:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    8d08:	e13ff617 	ldw	r4,-40(fp)
    8d0c:	0005dac0 	call	5dac <OS_EventWaitListInit>
    8d10:	00000e06 	br	8d4c <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    8d14:	00800074 	movhi	r2,1
    8d18:	10913804 	addi	r2,r2,17632
    8d1c:	10c00017 	ldw	r3,0(r2)
    8d20:	e0bff617 	ldw	r2,-40(fp)
    8d24:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    8d28:	00800074 	movhi	r2,1
    8d2c:	10913804 	addi	r2,r2,17632
    8d30:	e0fff617 	ldw	r3,-40(fp)
    8d34:	10c00015 	stw	r3,0(r2)
    8d38:	e0bff717 	ldw	r2,-36(fp)
    8d3c:	e0bffd15 	stw	r2,-12(fp)
    8d40:	e0bffd17 	ldw	r2,-12(fp)
    8d44:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    8d48:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
    8d4c:	e0bff617 	ldw	r2,-40(fp)
}
    8d50:	e037883a 	mov	sp,fp
    8d54:	dfc00117 	ldw	ra,4(sp)
    8d58:	df000017 	ldw	fp,0(sp)
    8d5c:	dec00204 	addi	sp,sp,8
    8d60:	f800283a 	ret

00008d64 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    8d64:	defff204 	addi	sp,sp,-56
    8d68:	dfc00d15 	stw	ra,52(sp)
    8d6c:	df000c15 	stw	fp,48(sp)
    8d70:	df000c04 	addi	fp,sp,48
    8d74:	e13ffd15 	stw	r4,-12(fp)
    8d78:	2805883a 	mov	r2,r5
    8d7c:	e1bfff15 	stw	r6,-4(fp)
    8d80:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    8d84:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    8d88:	e0bfff17 	ldw	r2,-4(fp)
    8d8c:	1000021e 	bne	r2,zero,8d98 <OSQDel+0x34>
        return (pevent);
    8d90:	e0bffd17 	ldw	r2,-12(fp)
    8d94:	0000a006 	br	9018 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    8d98:	e0bffd17 	ldw	r2,-12(fp)
    8d9c:	1000051e 	bne	r2,zero,8db4 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    8da0:	e0bfff17 	ldw	r2,-4(fp)
    8da4:	00c00104 	movi	r3,4
    8da8:	10c00005 	stb	r3,0(r2)
        return (pevent);
    8dac:	e0bffd17 	ldw	r2,-12(fp)
    8db0:	00009906 	br	9018 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    8db4:	e0bffd17 	ldw	r2,-12(fp)
    8db8:	10800003 	ldbu	r2,0(r2)
    8dbc:	10803fcc 	andi	r2,r2,255
    8dc0:	108000a0 	cmpeqi	r2,r2,2
    8dc4:	1000051e 	bne	r2,zero,8ddc <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    8dc8:	e0bfff17 	ldw	r2,-4(fp)
    8dcc:	00c00044 	movi	r3,1
    8dd0:	10c00005 	stb	r3,0(r2)
        return (pevent);
    8dd4:	e0bffd17 	ldw	r2,-12(fp)
    8dd8:	00008f06 	br	9018 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    8ddc:	00800074 	movhi	r2,1
    8de0:	10913904 	addi	r2,r2,17636
    8de4:	10800003 	ldbu	r2,0(r2)
    8de8:	10803fcc 	andi	r2,r2,255
    8dec:	10000526 	beq	r2,zero,8e04 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    8df0:	e0bfff17 	ldw	r2,-4(fp)
    8df4:	00c003c4 	movi	r3,15
    8df8:	10c00005 	stb	r3,0(r2)
        return (pevent);
    8dfc:	e0bffd17 	ldw	r2,-12(fp)
    8e00:	00008506 	br	9018 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8e04:	0005303a 	rdctl	r2,status
    8e08:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8e0c:	e0fff817 	ldw	r3,-32(fp)
    8e10:	00bfff84 	movi	r2,-2
    8e14:	1884703a 	and	r2,r3,r2
    8e18:	1001703a 	wrctl	status,r2
  
  return context;
    8e1c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    8e20:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    8e24:	e0bffd17 	ldw	r2,-12(fp)
    8e28:	10800283 	ldbu	r2,10(r2)
    8e2c:	10803fcc 	andi	r2,r2,255
    8e30:	10000326 	beq	r2,zero,8e40 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    8e34:	00800044 	movi	r2,1
    8e38:	e0bff405 	stb	r2,-48(fp)
    8e3c:	00000106 	br	8e44 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    8e40:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    8e44:	e0bffe03 	ldbu	r2,-8(fp)
    8e48:	10000326 	beq	r2,zero,8e58 <OSQDel+0xf4>
    8e4c:	10800060 	cmpeqi	r2,r2,1
    8e50:	1000381e 	bne	r2,zero,8f34 <OSQDel+0x1d0>
    8e54:	00006506 	br	8fec <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    8e58:	e0bff403 	ldbu	r2,-48(fp)
    8e5c:	1000261e 	bne	r2,zero,8ef8 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    8e60:	e0bffd17 	ldw	r2,-12(fp)
    8e64:	00c00fc4 	movi	r3,63
    8e68:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    8e6c:	e0bffd17 	ldw	r2,-12(fp)
    8e70:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    8e74:	e0bffd17 	ldw	r2,-12(fp)
    8e78:	10800117 	ldw	r2,4(r2)
    8e7c:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
    8e80:	00800074 	movhi	r2,1
    8e84:	10913604 	addi	r2,r2,17624
    8e88:	10c00017 	ldw	r3,0(r2)
    8e8c:	e0bff717 	ldw	r2,-36(fp)
    8e90:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    8e94:	00800074 	movhi	r2,1
    8e98:	10913604 	addi	r2,r2,17624
    8e9c:	e0fff717 	ldw	r3,-36(fp)
    8ea0:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    8ea4:	e0bffd17 	ldw	r2,-12(fp)
    8ea8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    8eac:	00800074 	movhi	r2,1
    8eb0:	10913804 	addi	r2,r2,17632
    8eb4:	10c00017 	ldw	r3,0(r2)
    8eb8:	e0bffd17 	ldw	r2,-12(fp)
    8ebc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    8ec0:	e0bffd17 	ldw	r2,-12(fp)
    8ec4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    8ec8:	00800074 	movhi	r2,1
    8ecc:	10913804 	addi	r2,r2,17632
    8ed0:	e0fffd17 	ldw	r3,-12(fp)
    8ed4:	10c00015 	stw	r3,0(r2)
    8ed8:	e0bff617 	ldw	r2,-40(fp)
    8edc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8ee0:	e0bff917 	ldw	r2,-28(fp)
    8ee4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    8ee8:	e0bfff17 	ldw	r2,-4(fp)
    8eec:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    8ef0:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    8ef4:	00004706 	br	9014 <OSQDel+0x2b0>
    8ef8:	e0bff617 	ldw	r2,-40(fp)
    8efc:	e0bffa15 	stw	r2,-24(fp)
    8f00:	e0bffa17 	ldw	r2,-24(fp)
    8f04:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    8f08:	e0bfff17 	ldw	r2,-4(fp)
    8f0c:	00c01244 	movi	r3,73
    8f10:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    8f14:	e0bffd17 	ldw	r2,-12(fp)
    8f18:	e0bff515 	stw	r2,-44(fp)
             }
             break;
    8f1c:	00003d06 	br	9014 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    8f20:	e13ffd17 	ldw	r4,-12(fp)
    8f24:	000b883a 	mov	r5,zero
    8f28:	01800104 	movi	r6,4
    8f2c:	000f883a 	mov	r7,zero
    8f30:	000580c0 	call	580c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    8f34:	e0bffd17 	ldw	r2,-12(fp)
    8f38:	10800283 	ldbu	r2,10(r2)
    8f3c:	10803fcc 	andi	r2,r2,255
    8f40:	103ff71e 	bne	r2,zero,8f20 <__alt_mem_Flash_flash_data+0xf4008f20>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    8f44:	e0bffd17 	ldw	r2,-12(fp)
    8f48:	00c00fc4 	movi	r3,63
    8f4c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    8f50:	e0bffd17 	ldw	r2,-12(fp)
    8f54:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    8f58:	e0bffd17 	ldw	r2,-12(fp)
    8f5c:	10800117 	ldw	r2,4(r2)
    8f60:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
    8f64:	00800074 	movhi	r2,1
    8f68:	10913604 	addi	r2,r2,17624
    8f6c:	10c00017 	ldw	r3,0(r2)
    8f70:	e0bff717 	ldw	r2,-36(fp)
    8f74:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    8f78:	00800074 	movhi	r2,1
    8f7c:	10913604 	addi	r2,r2,17624
    8f80:	e0fff717 	ldw	r3,-36(fp)
    8f84:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    8f88:	e0bffd17 	ldw	r2,-12(fp)
    8f8c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    8f90:	00800074 	movhi	r2,1
    8f94:	10913804 	addi	r2,r2,17632
    8f98:	10c00017 	ldw	r3,0(r2)
    8f9c:	e0bffd17 	ldw	r2,-12(fp)
    8fa0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    8fa4:	e0bffd17 	ldw	r2,-12(fp)
    8fa8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    8fac:	00800074 	movhi	r2,1
    8fb0:	10913804 	addi	r2,r2,17632
    8fb4:	e0fffd17 	ldw	r3,-12(fp)
    8fb8:	10c00015 	stw	r3,0(r2)
    8fbc:	e0bff617 	ldw	r2,-40(fp)
    8fc0:	e0bffb15 	stw	r2,-20(fp)
    8fc4:	e0bffb17 	ldw	r2,-20(fp)
    8fc8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    8fcc:	e0bff403 	ldbu	r2,-48(fp)
    8fd0:	10800058 	cmpnei	r2,r2,1
    8fd4:	1000011e 	bne	r2,zero,8fdc <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    8fd8:	00062240 	call	6224 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    8fdc:	e0bfff17 	ldw	r2,-4(fp)
    8fe0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    8fe4:	e03ff515 	stw	zero,-44(fp)
             break;
    8fe8:	00000a06 	br	9014 <OSQDel+0x2b0>
    8fec:	e0bff617 	ldw	r2,-40(fp)
    8ff0:	e0bffc15 	stw	r2,-16(fp)
    8ff4:	e0bffc17 	ldw	r2,-16(fp)
    8ff8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    8ffc:	e0bfff17 	ldw	r2,-4(fp)
    9000:	00c001c4 	movi	r3,7
    9004:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    9008:	e0bffd17 	ldw	r2,-12(fp)
    900c:	e0bff515 	stw	r2,-44(fp)
             break;
    9010:	0001883a 	nop
    }
    return (pevent_return);
    9014:	e0bff517 	ldw	r2,-44(fp)
}
    9018:	e037883a 	mov	sp,fp
    901c:	dfc00117 	ldw	ra,4(sp)
    9020:	df000017 	ldw	fp,0(sp)
    9024:	dec00204 	addi	sp,sp,8
    9028:	f800283a 	ret

0000902c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    902c:	defffa04 	addi	sp,sp,-24
    9030:	df000515 	stw	fp,20(sp)
    9034:	df000504 	addi	fp,sp,20
    9038:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    903c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9040:	e0bfff17 	ldw	r2,-4(fp)
    9044:	1000021e 	bne	r2,zero,9050 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    9048:	00800104 	movi	r2,4
    904c:	00002106 	br	90d4 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    9050:	e0bfff17 	ldw	r2,-4(fp)
    9054:	10800003 	ldbu	r2,0(r2)
    9058:	10803fcc 	andi	r2,r2,255
    905c:	108000a0 	cmpeqi	r2,r2,2
    9060:	1000021e 	bne	r2,zero,906c <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
    9064:	00800044 	movi	r2,1
    9068:	00001a06 	br	90d4 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    906c:	0005303a 	rdctl	r2,status
    9070:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9074:	e0fffd17 	ldw	r3,-12(fp)
    9078:	00bfff84 	movi	r2,-2
    907c:	1884703a 	and	r2,r3,r2
    9080:	1001703a 	wrctl	status,r2
  
  return context;
    9084:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    9088:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    908c:	e0bfff17 	ldw	r2,-4(fp)
    9090:	10800117 	ldw	r2,4(r2)
    9094:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
    9098:	e0bffc17 	ldw	r2,-16(fp)
    909c:	10c00117 	ldw	r3,4(r2)
    90a0:	e0bffc17 	ldw	r2,-16(fp)
    90a4:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    90a8:	e0bffc17 	ldw	r2,-16(fp)
    90ac:	10c00117 	ldw	r3,4(r2)
    90b0:	e0bffc17 	ldw	r2,-16(fp)
    90b4:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    90b8:	e0bffc17 	ldw	r2,-16(fp)
    90bc:	1000058d 	sth	zero,22(r2)
    90c0:	e0bffb17 	ldw	r2,-20(fp)
    90c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    90c8:	e0bffe17 	ldw	r2,-8(fp)
    90cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    90d0:	0005883a 	mov	r2,zero
}
    90d4:	e037883a 	mov	sp,fp
    90d8:	df000017 	ldw	fp,0(sp)
    90dc:	dec00104 	addi	sp,sp,4
    90e0:	f800283a 	ret

000090e4 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    90e4:	defff304 	addi	sp,sp,-52
    90e8:	dfc00c15 	stw	ra,48(sp)
    90ec:	df000b15 	stw	fp,44(sp)
    90f0:	df000b04 	addi	fp,sp,44
    90f4:	e13ffd15 	stw	r4,-12(fp)
    90f8:	2805883a 	mov	r2,r5
    90fc:	e1bfff15 	stw	r6,-4(fp)
    9100:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9104:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    9108:	e0bfff17 	ldw	r2,-4(fp)
    910c:	1000021e 	bne	r2,zero,9118 <OSQPend+0x34>
        return ((void *)0);
    9110:	0005883a 	mov	r2,zero
    9114:	0000ad06 	br	93cc <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    9118:	e0bffd17 	ldw	r2,-12(fp)
    911c:	1000051e 	bne	r2,zero,9134 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    9120:	e0bfff17 	ldw	r2,-4(fp)
    9124:	00c00104 	movi	r3,4
    9128:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    912c:	0005883a 	mov	r2,zero
    9130:	0000a606 	br	93cc <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    9134:	e0bffd17 	ldw	r2,-12(fp)
    9138:	10800003 	ldbu	r2,0(r2)
    913c:	10803fcc 	andi	r2,r2,255
    9140:	108000a0 	cmpeqi	r2,r2,2
    9144:	1000051e 	bne	r2,zero,915c <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    9148:	e0bfff17 	ldw	r2,-4(fp)
    914c:	00c00044 	movi	r3,1
    9150:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    9154:	0005883a 	mov	r2,zero
    9158:	00009c06 	br	93cc <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    915c:	00800074 	movhi	r2,1
    9160:	10913904 	addi	r2,r2,17636
    9164:	10800003 	ldbu	r2,0(r2)
    9168:	10803fcc 	andi	r2,r2,255
    916c:	10000526 	beq	r2,zero,9184 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    9170:	e0bfff17 	ldw	r2,-4(fp)
    9174:	00c00084 	movi	r3,2
    9178:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    917c:	0005883a 	mov	r2,zero
    9180:	00009206 	br	93cc <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    9184:	00800074 	movhi	r2,1
    9188:	10912b04 	addi	r2,r2,17580
    918c:	10800003 	ldbu	r2,0(r2)
    9190:	10803fcc 	andi	r2,r2,255
    9194:	10000526 	beq	r2,zero,91ac <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    9198:	e0bfff17 	ldw	r2,-4(fp)
    919c:	00c00344 	movi	r3,13
    91a0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    91a4:	0005883a 	mov	r2,zero
    91a8:	00008806 	br	93cc <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    91ac:	0005303a 	rdctl	r2,status
    91b0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    91b4:	e0fff817 	ldw	r3,-32(fp)
    91b8:	00bfff84 	movi	r2,-2
    91bc:	1884703a 	and	r2,r3,r2
    91c0:	1001703a 	wrctl	status,r2
  
  return context;
    91c4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    91c8:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    91cc:	e0bffd17 	ldw	r2,-12(fp)
    91d0:	10800117 	ldw	r2,4(r2)
    91d4:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    91d8:	e0bff717 	ldw	r2,-36(fp)
    91dc:	1080058b 	ldhu	r2,22(r2)
    91e0:	10bfffcc 	andi	r2,r2,65535
    91e4:	10001e26 	beq	r2,zero,9260 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    91e8:	e0bff717 	ldw	r2,-36(fp)
    91ec:	10800417 	ldw	r2,16(r2)
    91f0:	11000104 	addi	r4,r2,4
    91f4:	e0fff717 	ldw	r3,-36(fp)
    91f8:	19000415 	stw	r4,16(r3)
    91fc:	10800017 	ldw	r2,0(r2)
    9200:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    9204:	e0bff717 	ldw	r2,-36(fp)
    9208:	1080058b 	ldhu	r2,22(r2)
    920c:	10bfffc4 	addi	r2,r2,-1
    9210:	1007883a 	mov	r3,r2
    9214:	e0bff717 	ldw	r2,-36(fp)
    9218:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    921c:	e0bff717 	ldw	r2,-36(fp)
    9220:	10c00417 	ldw	r3,16(r2)
    9224:	e0bff717 	ldw	r2,-36(fp)
    9228:	10800217 	ldw	r2,8(r2)
    922c:	1880041e 	bne	r3,r2,9240 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
    9230:	e0bff717 	ldw	r2,-36(fp)
    9234:	10c00117 	ldw	r3,4(r2)
    9238:	e0bff717 	ldw	r2,-36(fp)
    923c:	10c00415 	stw	r3,16(r2)
    9240:	e0bff617 	ldw	r2,-40(fp)
    9244:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9248:	e0bff917 	ldw	r2,-28(fp)
    924c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    9250:	e0bfff17 	ldw	r2,-4(fp)
    9254:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    9258:	e0bff517 	ldw	r2,-44(fp)
    925c:	00005b06 	br	93cc <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    9260:	00800074 	movhi	r2,1
    9264:	10913a04 	addi	r2,r2,17640
    9268:	10c00017 	ldw	r3,0(r2)
    926c:	00800074 	movhi	r2,1
    9270:	10913a04 	addi	r2,r2,17640
    9274:	10800017 	ldw	r2,0(r2)
    9278:	10800c03 	ldbu	r2,48(r2)
    927c:	10800114 	ori	r2,r2,4
    9280:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    9284:	00800074 	movhi	r2,1
    9288:	10913a04 	addi	r2,r2,17640
    928c:	10800017 	ldw	r2,0(r2)
    9290:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    9294:	00800074 	movhi	r2,1
    9298:	10913a04 	addi	r2,r2,17640
    929c:	10800017 	ldw	r2,0(r2)
    92a0:	e0fffe0b 	ldhu	r3,-8(fp)
    92a4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    92a8:	e13ffd17 	ldw	r4,-12(fp)
    92ac:	00059a40 	call	59a4 <OS_EventTaskWait>
    92b0:	e0bff617 	ldw	r2,-40(fp)
    92b4:	e0bffa15 	stw	r2,-24(fp)
    92b8:	e0bffa17 	ldw	r2,-24(fp)
    92bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    92c0:	00062240 	call	6224 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    92c4:	0005303a 	rdctl	r2,status
    92c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    92cc:	e0fffb17 	ldw	r3,-20(fp)
    92d0:	00bfff84 	movi	r2,-2
    92d4:	1884703a 	and	r2,r3,r2
    92d8:	1001703a 	wrctl	status,r2
  
  return context;
    92dc:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    92e0:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    92e4:	00800074 	movhi	r2,1
    92e8:	10913a04 	addi	r2,r2,17640
    92ec:	10800017 	ldw	r2,0(r2)
    92f0:	10800c43 	ldbu	r2,49(r2)
    92f4:	10803fcc 	andi	r2,r2,255
    92f8:	10000326 	beq	r2,zero,9308 <OSQPend+0x224>
    92fc:	108000a0 	cmpeqi	r2,r2,2
    9300:	1000091e 	bne	r2,zero,9328 <OSQPend+0x244>
    9304:	00000d06 	br	933c <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    9308:	00800074 	movhi	r2,1
    930c:	10913a04 	addi	r2,r2,17640
    9310:	10800017 	ldw	r2,0(r2)
    9314:	10800917 	ldw	r2,36(r2)
    9318:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
    931c:	e0bfff17 	ldw	r2,-4(fp)
    9320:	10000005 	stb	zero,0(r2)
             break;
    9324:	00001006 	br	9368 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    9328:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    932c:	e0bfff17 	ldw	r2,-4(fp)
    9330:	00c00384 	movi	r3,14
    9334:	10c00005 	stb	r3,0(r2)
             break;
    9338:	00000b06 	br	9368 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    933c:	00800074 	movhi	r2,1
    9340:	10913a04 	addi	r2,r2,17640
    9344:	10800017 	ldw	r2,0(r2)
    9348:	1009883a 	mov	r4,r2
    934c:	e17ffd17 	ldw	r5,-12(fp)
    9350:	0005bfc0 	call	5bfc <OS_EventTaskRemove>
             pmsg = (void *)0;
    9354:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    9358:	e0bfff17 	ldw	r2,-4(fp)
    935c:	00c00284 	movi	r3,10
    9360:	10c00005 	stb	r3,0(r2)
             break;
    9364:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    9368:	00800074 	movhi	r2,1
    936c:	10913a04 	addi	r2,r2,17640
    9370:	10800017 	ldw	r2,0(r2)
    9374:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    9378:	00800074 	movhi	r2,1
    937c:	10913a04 	addi	r2,r2,17640
    9380:	10800017 	ldw	r2,0(r2)
    9384:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    9388:	00800074 	movhi	r2,1
    938c:	10913a04 	addi	r2,r2,17640
    9390:	10800017 	ldw	r2,0(r2)
    9394:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    9398:	00800074 	movhi	r2,1
    939c:	10913a04 	addi	r2,r2,17640
    93a0:	10800017 	ldw	r2,0(r2)
    93a4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    93a8:	00800074 	movhi	r2,1
    93ac:	10913a04 	addi	r2,r2,17640
    93b0:	10800017 	ldw	r2,0(r2)
    93b4:	10000915 	stw	zero,36(r2)
    93b8:	e0bff617 	ldw	r2,-40(fp)
    93bc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    93c0:	e0bffc17 	ldw	r2,-16(fp)
    93c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    93c8:	e0bff517 	ldw	r2,-44(fp)
}
    93cc:	e037883a 	mov	sp,fp
    93d0:	dfc00117 	ldw	ra,4(sp)
    93d4:	df000017 	ldw	fp,0(sp)
    93d8:	dec00204 	addi	sp,sp,8
    93dc:	f800283a 	ret

000093e0 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    93e0:	defff604 	addi	sp,sp,-40
    93e4:	dfc00915 	stw	ra,36(sp)
    93e8:	df000815 	stw	fp,32(sp)
    93ec:	df000804 	addi	fp,sp,32
    93f0:	e13ffd15 	stw	r4,-12(fp)
    93f4:	2805883a 	mov	r2,r5
    93f8:	e1bfff15 	stw	r6,-4(fp)
    93fc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    9400:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    9404:	e0bfff17 	ldw	r2,-4(fp)
    9408:	1000021e 	bne	r2,zero,9414 <OSQPendAbort+0x34>
        return (0);
    940c:	0005883a 	mov	r2,zero
    9410:	00004906 	br	9538 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    9414:	e0bffd17 	ldw	r2,-12(fp)
    9418:	1000051e 	bne	r2,zero,9430 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    941c:	e0bfff17 	ldw	r2,-4(fp)
    9420:	00c00104 	movi	r3,4
    9424:	10c00005 	stb	r3,0(r2)
        return (0);
    9428:	0005883a 	mov	r2,zero
    942c:	00004206 	br	9538 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    9430:	e0bffd17 	ldw	r2,-12(fp)
    9434:	10800003 	ldbu	r2,0(r2)
    9438:	10803fcc 	andi	r2,r2,255
    943c:	108000a0 	cmpeqi	r2,r2,2
    9440:	1000051e 	bne	r2,zero,9458 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    9444:	e0bfff17 	ldw	r2,-4(fp)
    9448:	00c00044 	movi	r3,1
    944c:	10c00005 	stb	r3,0(r2)
        return (0);
    9450:	0005883a 	mov	r2,zero
    9454:	00003806 	br	9538 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9458:	0005303a 	rdctl	r2,status
    945c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9460:	e0fffa17 	ldw	r3,-24(fp)
    9464:	00bfff84 	movi	r2,-2
    9468:	1884703a 	and	r2,r3,r2
    946c:	1001703a 	wrctl	status,r2
  
  return context;
    9470:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    9474:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    9478:	e0bffd17 	ldw	r2,-12(fp)
    947c:	10800283 	ldbu	r2,10(r2)
    9480:	10803fcc 	andi	r2,r2,255
    9484:	10002526 	beq	r2,zero,951c <OSQPendAbort+0x13c>
        nbr_tasks = 0;
    9488:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    948c:	e0bffe03 	ldbu	r2,-8(fp)
    9490:	10800060 	cmpeqi	r2,r2,1
    9494:	10000e26 	beq	r2,zero,94d0 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    9498:	00000806 	br	94bc <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    949c:	e13ffd17 	ldw	r4,-12(fp)
    94a0:	000b883a 	mov	r5,zero
    94a4:	01800104 	movi	r6,4
    94a8:	01c00084 	movi	r7,2
    94ac:	000580c0 	call	580c <OS_EventTaskRdy>
                     nbr_tasks++;
    94b0:	e0bff803 	ldbu	r2,-32(fp)
    94b4:	10800044 	addi	r2,r2,1
    94b8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    94bc:	e0bffd17 	ldw	r2,-12(fp)
    94c0:	10800283 	ldbu	r2,10(r2)
    94c4:	10803fcc 	andi	r2,r2,255
    94c8:	103ff41e 	bne	r2,zero,949c <__alt_mem_Flash_flash_data+0xf400949c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    94cc:	00000906 	br	94f4 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    94d0:	e13ffd17 	ldw	r4,-12(fp)
    94d4:	000b883a 	mov	r5,zero
    94d8:	01800104 	movi	r6,4
    94dc:	01c00084 	movi	r7,2
    94e0:	000580c0 	call	580c <OS_EventTaskRdy>
                 nbr_tasks++;
    94e4:	e0bff803 	ldbu	r2,-32(fp)
    94e8:	10800044 	addi	r2,r2,1
    94ec:	e0bff805 	stb	r2,-32(fp)
                 break;
    94f0:	0001883a 	nop
    94f4:	e0bff917 	ldw	r2,-28(fp)
    94f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    94fc:	e0bffb17 	ldw	r2,-20(fp)
    9500:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    9504:	00062240 	call	6224 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    9508:	e0bfff17 	ldw	r2,-4(fp)
    950c:	00c00384 	movi	r3,14
    9510:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    9514:	e0bff803 	ldbu	r2,-32(fp)
    9518:	00000706 	br	9538 <OSQPendAbort+0x158>
    951c:	e0bff917 	ldw	r2,-28(fp)
    9520:	e0bffc15 	stw	r2,-16(fp)
    9524:	e0bffc17 	ldw	r2,-16(fp)
    9528:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    952c:	e0bfff17 	ldw	r2,-4(fp)
    9530:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    9534:	0005883a 	mov	r2,zero
}
    9538:	e037883a 	mov	sp,fp
    953c:	dfc00117 	ldw	ra,4(sp)
    9540:	df000017 	ldw	fp,0(sp)
    9544:	dec00204 	addi	sp,sp,8
    9548:	f800283a 	ret

0000954c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    954c:	defff604 	addi	sp,sp,-40
    9550:	dfc00915 	stw	ra,36(sp)
    9554:	df000815 	stw	fp,32(sp)
    9558:	df000804 	addi	fp,sp,32
    955c:	e13ffe15 	stw	r4,-8(fp)
    9560:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    9564:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    9568:	e0bffe17 	ldw	r2,-8(fp)
    956c:	1000021e 	bne	r2,zero,9578 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    9570:	00800104 	movi	r2,4
    9574:	00004a06 	br	96a0 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    9578:	e0bffe17 	ldw	r2,-8(fp)
    957c:	10800003 	ldbu	r2,0(r2)
    9580:	10803fcc 	andi	r2,r2,255
    9584:	108000a0 	cmpeqi	r2,r2,2
    9588:	1000021e 	bne	r2,zero,9594 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
    958c:	00800044 	movi	r2,1
    9590:	00004306 	br	96a0 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9594:	0005303a 	rdctl	r2,status
    9598:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    959c:	e0fffa17 	ldw	r3,-24(fp)
    95a0:	00bfff84 	movi	r2,-2
    95a4:	1884703a 	and	r2,r3,r2
    95a8:	1001703a 	wrctl	status,r2
  
  return context;
    95ac:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    95b0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    95b4:	e0bffe17 	ldw	r2,-8(fp)
    95b8:	10800283 	ldbu	r2,10(r2)
    95bc:	10803fcc 	andi	r2,r2,255
    95c0:	10000c26 	beq	r2,zero,95f4 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    95c4:	e13ffe17 	ldw	r4,-8(fp)
    95c8:	e17fff17 	ldw	r5,-4(fp)
    95cc:	01800104 	movi	r6,4
    95d0:	000f883a 	mov	r7,zero
    95d4:	000580c0 	call	580c <OS_EventTaskRdy>
    95d8:	e0bff817 	ldw	r2,-32(fp)
    95dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    95e0:	e0bffb17 	ldw	r2,-20(fp)
    95e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    95e8:	00062240 	call	6224 <OS_Sched>
        return (OS_ERR_NONE);
    95ec:	0005883a 	mov	r2,zero
    95f0:	00002b06 	br	96a0 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    95f4:	e0bffe17 	ldw	r2,-8(fp)
    95f8:	10800117 	ldw	r2,4(r2)
    95fc:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    9600:	e0bff917 	ldw	r2,-28(fp)
    9604:	10c0058b 	ldhu	r3,22(r2)
    9608:	e0bff917 	ldw	r2,-28(fp)
    960c:	1080050b 	ldhu	r2,20(r2)
    9610:	18ffffcc 	andi	r3,r3,65535
    9614:	10bfffcc 	andi	r2,r2,65535
    9618:	18800636 	bltu	r3,r2,9634 <OSQPost+0xe8>
    961c:	e0bff817 	ldw	r2,-32(fp)
    9620:	e0bffc15 	stw	r2,-16(fp)
    9624:	e0bffc17 	ldw	r2,-16(fp)
    9628:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    962c:	00800784 	movi	r2,30
    9630:	00001b06 	br	96a0 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    9634:	e0bff917 	ldw	r2,-28(fp)
    9638:	10800317 	ldw	r2,12(r2)
    963c:	11000104 	addi	r4,r2,4
    9640:	e0fff917 	ldw	r3,-28(fp)
    9644:	19000315 	stw	r4,12(r3)
    9648:	e0ffff17 	ldw	r3,-4(fp)
    964c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    9650:	e0bff917 	ldw	r2,-28(fp)
    9654:	1080058b 	ldhu	r2,22(r2)
    9658:	10800044 	addi	r2,r2,1
    965c:	1007883a 	mov	r3,r2
    9660:	e0bff917 	ldw	r2,-28(fp)
    9664:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    9668:	e0bff917 	ldw	r2,-28(fp)
    966c:	10c00317 	ldw	r3,12(r2)
    9670:	e0bff917 	ldw	r2,-28(fp)
    9674:	10800217 	ldw	r2,8(r2)
    9678:	1880041e 	bne	r3,r2,968c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
    967c:	e0bff917 	ldw	r2,-28(fp)
    9680:	10c00117 	ldw	r3,4(r2)
    9684:	e0bff917 	ldw	r2,-28(fp)
    9688:	10c00315 	stw	r3,12(r2)
    968c:	e0bff817 	ldw	r2,-32(fp)
    9690:	e0bffd15 	stw	r2,-12(fp)
    9694:	e0bffd17 	ldw	r2,-12(fp)
    9698:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    969c:	0005883a 	mov	r2,zero
}
    96a0:	e037883a 	mov	sp,fp
    96a4:	dfc00117 	ldw	ra,4(sp)
    96a8:	df000017 	ldw	fp,0(sp)
    96ac:	dec00204 	addi	sp,sp,8
    96b0:	f800283a 	ret

000096b4 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    96b4:	defff604 	addi	sp,sp,-40
    96b8:	dfc00915 	stw	ra,36(sp)
    96bc:	df000815 	stw	fp,32(sp)
    96c0:	df000804 	addi	fp,sp,32
    96c4:	e13ffe15 	stw	r4,-8(fp)
    96c8:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    96cc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    96d0:	e0bffe17 	ldw	r2,-8(fp)
    96d4:	1000021e 	bne	r2,zero,96e0 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    96d8:	00800104 	movi	r2,4
    96dc:	00004c06 	br	9810 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    96e0:	e0bffe17 	ldw	r2,-8(fp)
    96e4:	10800003 	ldbu	r2,0(r2)
    96e8:	10803fcc 	andi	r2,r2,255
    96ec:	108000a0 	cmpeqi	r2,r2,2
    96f0:	1000021e 	bne	r2,zero,96fc <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
    96f4:	00800044 	movi	r2,1
    96f8:	00004506 	br	9810 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    96fc:	0005303a 	rdctl	r2,status
    9700:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9704:	e0fffa17 	ldw	r3,-24(fp)
    9708:	00bfff84 	movi	r2,-2
    970c:	1884703a 	and	r2,r3,r2
    9710:	1001703a 	wrctl	status,r2
  
  return context;
    9714:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    9718:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    971c:	e0bffe17 	ldw	r2,-8(fp)
    9720:	10800283 	ldbu	r2,10(r2)
    9724:	10803fcc 	andi	r2,r2,255
    9728:	10000c26 	beq	r2,zero,975c <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    972c:	e13ffe17 	ldw	r4,-8(fp)
    9730:	e17fff17 	ldw	r5,-4(fp)
    9734:	01800104 	movi	r6,4
    9738:	000f883a 	mov	r7,zero
    973c:	000580c0 	call	580c <OS_EventTaskRdy>
    9740:	e0bff817 	ldw	r2,-32(fp)
    9744:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9748:	e0bffb17 	ldw	r2,-20(fp)
    974c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    9750:	00062240 	call	6224 <OS_Sched>
        return (OS_ERR_NONE);
    9754:	0005883a 	mov	r2,zero
    9758:	00002d06 	br	9810 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    975c:	e0bffe17 	ldw	r2,-8(fp)
    9760:	10800117 	ldw	r2,4(r2)
    9764:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    9768:	e0bff917 	ldw	r2,-28(fp)
    976c:	10c0058b 	ldhu	r3,22(r2)
    9770:	e0bff917 	ldw	r2,-28(fp)
    9774:	1080050b 	ldhu	r2,20(r2)
    9778:	18ffffcc 	andi	r3,r3,65535
    977c:	10bfffcc 	andi	r2,r2,65535
    9780:	18800636 	bltu	r3,r2,979c <OSQPostFront+0xe8>
    9784:	e0bff817 	ldw	r2,-32(fp)
    9788:	e0bffc15 	stw	r2,-16(fp)
    978c:	e0bffc17 	ldw	r2,-16(fp)
    9790:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    9794:	00800784 	movi	r2,30
    9798:	00001d06 	br	9810 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    979c:	e0bff917 	ldw	r2,-28(fp)
    97a0:	10c00417 	ldw	r3,16(r2)
    97a4:	e0bff917 	ldw	r2,-28(fp)
    97a8:	10800117 	ldw	r2,4(r2)
    97ac:	1880041e 	bne	r3,r2,97c0 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
    97b0:	e0bff917 	ldw	r2,-28(fp)
    97b4:	10c00217 	ldw	r3,8(r2)
    97b8:	e0bff917 	ldw	r2,-28(fp)
    97bc:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    97c0:	e0bff917 	ldw	r2,-28(fp)
    97c4:	10800417 	ldw	r2,16(r2)
    97c8:	10ffff04 	addi	r3,r2,-4
    97cc:	e0bff917 	ldw	r2,-28(fp)
    97d0:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    97d4:	e0bff917 	ldw	r2,-28(fp)
    97d8:	10800417 	ldw	r2,16(r2)
    97dc:	e0ffff17 	ldw	r3,-4(fp)
    97e0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    97e4:	e0bff917 	ldw	r2,-28(fp)
    97e8:	1080058b 	ldhu	r2,22(r2)
    97ec:	10800044 	addi	r2,r2,1
    97f0:	1007883a 	mov	r3,r2
    97f4:	e0bff917 	ldw	r2,-28(fp)
    97f8:	10c0058d 	sth	r3,22(r2)
    97fc:	e0bff817 	ldw	r2,-32(fp)
    9800:	e0bffd15 	stw	r2,-12(fp)
    9804:	e0bffd17 	ldw	r2,-12(fp)
    9808:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    980c:	0005883a 	mov	r2,zero
}
    9810:	e037883a 	mov	sp,fp
    9814:	dfc00117 	ldw	ra,4(sp)
    9818:	df000017 	ldw	fp,0(sp)
    981c:	dec00204 	addi	sp,sp,8
    9820:	f800283a 	ret

00009824 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    9824:	defff504 	addi	sp,sp,-44
    9828:	dfc00a15 	stw	ra,40(sp)
    982c:	df000915 	stw	fp,36(sp)
    9830:	df000904 	addi	fp,sp,36
    9834:	e13ffd15 	stw	r4,-12(fp)
    9838:	e17ffe15 	stw	r5,-8(fp)
    983c:	3005883a 	mov	r2,r6
    9840:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9844:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9848:	e0bffd17 	ldw	r2,-12(fp)
    984c:	1000021e 	bne	r2,zero,9858 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    9850:	00800104 	movi	r2,4
    9854:	00007106 	br	9a1c <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    9858:	e0bffd17 	ldw	r2,-12(fp)
    985c:	10800003 	ldbu	r2,0(r2)
    9860:	10803fcc 	andi	r2,r2,255
    9864:	108000a0 	cmpeqi	r2,r2,2
    9868:	1000021e 	bne	r2,zero,9874 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
    986c:	00800044 	movi	r2,1
    9870:	00006a06 	br	9a1c <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9874:	0005303a 	rdctl	r2,status
    9878:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    987c:	e0fff917 	ldw	r3,-28(fp)
    9880:	00bfff84 	movi	r2,-2
    9884:	1884703a 	and	r2,r3,r2
    9888:	1001703a 	wrctl	status,r2
  
  return context;
    988c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    9890:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    9894:	e0bffd17 	ldw	r2,-12(fp)
    9898:	10800283 	ldbu	r2,10(r2)
    989c:	10803fcc 	andi	r2,r2,255
    98a0:	10001d26 	beq	r2,zero,9918 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    98a4:	e0bfff03 	ldbu	r2,-4(fp)
    98a8:	1080004c 	andi	r2,r2,1
    98ac:	10000b26 	beq	r2,zero,98dc <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    98b0:	00000506 	br	98c8 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    98b4:	e13ffd17 	ldw	r4,-12(fp)
    98b8:	e17ffe17 	ldw	r5,-8(fp)
    98bc:	01800104 	movi	r6,4
    98c0:	000f883a 	mov	r7,zero
    98c4:	000580c0 	call	580c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    98c8:	e0bffd17 	ldw	r2,-12(fp)
    98cc:	10800283 	ldbu	r2,10(r2)
    98d0:	10803fcc 	andi	r2,r2,255
    98d4:	103ff71e 	bne	r2,zero,98b4 <__alt_mem_Flash_flash_data+0xf40098b4>
    98d8:	00000506 	br	98f0 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    98dc:	e13ffd17 	ldw	r4,-12(fp)
    98e0:	e17ffe17 	ldw	r5,-8(fp)
    98e4:	01800104 	movi	r6,4
    98e8:	000f883a 	mov	r7,zero
    98ec:	000580c0 	call	580c <OS_EventTaskRdy>
    98f0:	e0bff717 	ldw	r2,-36(fp)
    98f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    98f8:	e0bffa17 	ldw	r2,-24(fp)
    98fc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    9900:	e0bfff03 	ldbu	r2,-4(fp)
    9904:	1080010c 	andi	r2,r2,4
    9908:	1000011e 	bne	r2,zero,9910 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
    990c:	00062240 	call	6224 <OS_Sched>
        }
        return (OS_ERR_NONE);
    9910:	0005883a 	mov	r2,zero
    9914:	00004106 	br	9a1c <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    9918:	e0bffd17 	ldw	r2,-12(fp)
    991c:	10800117 	ldw	r2,4(r2)
    9920:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    9924:	e0bff817 	ldw	r2,-32(fp)
    9928:	10c0058b 	ldhu	r3,22(r2)
    992c:	e0bff817 	ldw	r2,-32(fp)
    9930:	1080050b 	ldhu	r2,20(r2)
    9934:	18ffffcc 	andi	r3,r3,65535
    9938:	10bfffcc 	andi	r2,r2,65535
    993c:	18800636 	bltu	r3,r2,9958 <OSQPostOpt+0x134>
    9940:	e0bff717 	ldw	r2,-36(fp)
    9944:	e0bffb15 	stw	r2,-20(fp)
    9948:	e0bffb17 	ldw	r2,-20(fp)
    994c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    9950:	00800784 	movi	r2,30
    9954:	00003106 	br	9a1c <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    9958:	e0bfff03 	ldbu	r2,-4(fp)
    995c:	1080008c 	andi	r2,r2,2
    9960:	10001326 	beq	r2,zero,99b0 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    9964:	e0bff817 	ldw	r2,-32(fp)
    9968:	10c00417 	ldw	r3,16(r2)
    996c:	e0bff817 	ldw	r2,-32(fp)
    9970:	10800117 	ldw	r2,4(r2)
    9974:	1880041e 	bne	r3,r2,9988 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    9978:	e0bff817 	ldw	r2,-32(fp)
    997c:	10c00217 	ldw	r3,8(r2)
    9980:	e0bff817 	ldw	r2,-32(fp)
    9984:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    9988:	e0bff817 	ldw	r2,-32(fp)
    998c:	10800417 	ldw	r2,16(r2)
    9990:	10ffff04 	addi	r3,r2,-4
    9994:	e0bff817 	ldw	r2,-32(fp)
    9998:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    999c:	e0bff817 	ldw	r2,-32(fp)
    99a0:	10800417 	ldw	r2,16(r2)
    99a4:	e0fffe17 	ldw	r3,-8(fp)
    99a8:	10c00015 	stw	r3,0(r2)
    99ac:	00001006 	br	99f0 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    99b0:	e0bff817 	ldw	r2,-32(fp)
    99b4:	10800317 	ldw	r2,12(r2)
    99b8:	11000104 	addi	r4,r2,4
    99bc:	e0fff817 	ldw	r3,-32(fp)
    99c0:	19000315 	stw	r4,12(r3)
    99c4:	e0fffe17 	ldw	r3,-8(fp)
    99c8:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    99cc:	e0bff817 	ldw	r2,-32(fp)
    99d0:	10c00317 	ldw	r3,12(r2)
    99d4:	e0bff817 	ldw	r2,-32(fp)
    99d8:	10800217 	ldw	r2,8(r2)
    99dc:	1880041e 	bne	r3,r2,99f0 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
    99e0:	e0bff817 	ldw	r2,-32(fp)
    99e4:	10c00117 	ldw	r3,4(r2)
    99e8:	e0bff817 	ldw	r2,-32(fp)
    99ec:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    99f0:	e0bff817 	ldw	r2,-32(fp)
    99f4:	1080058b 	ldhu	r2,22(r2)
    99f8:	10800044 	addi	r2,r2,1
    99fc:	1007883a 	mov	r3,r2
    9a00:	e0bff817 	ldw	r2,-32(fp)
    9a04:	10c0058d 	sth	r3,22(r2)
    9a08:	e0bff717 	ldw	r2,-36(fp)
    9a0c:	e0bffc15 	stw	r2,-16(fp)
    9a10:	e0bffc17 	ldw	r2,-16(fp)
    9a14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    9a18:	0005883a 	mov	r2,zero
}
    9a1c:	e037883a 	mov	sp,fp
    9a20:	dfc00117 	ldw	ra,4(sp)
    9a24:	df000017 	ldw	fp,0(sp)
    9a28:	dec00204 	addi	sp,sp,8
    9a2c:	f800283a 	ret

00009a30 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    9a30:	defff604 	addi	sp,sp,-40
    9a34:	df000915 	stw	fp,36(sp)
    9a38:	df000904 	addi	fp,sp,36
    9a3c:	e13ffe15 	stw	r4,-8(fp)
    9a40:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    9a44:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    9a48:	e0bffe17 	ldw	r2,-8(fp)
    9a4c:	1000021e 	bne	r2,zero,9a58 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    9a50:	00800104 	movi	r2,4
    9a54:	00004906 	br	9b7c <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    9a58:	e0bfff17 	ldw	r2,-4(fp)
    9a5c:	1000021e 	bne	r2,zero,9a68 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    9a60:	00800244 	movi	r2,9
    9a64:	00004506 	br	9b7c <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    9a68:	e0bffe17 	ldw	r2,-8(fp)
    9a6c:	10800003 	ldbu	r2,0(r2)
    9a70:	10803fcc 	andi	r2,r2,255
    9a74:	108000a0 	cmpeqi	r2,r2,2
    9a78:	1000021e 	bne	r2,zero,9a84 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    9a7c:	00800044 	movi	r2,1
    9a80:	00003e06 	br	9b7c <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9a84:	0005303a 	rdctl	r2,status
    9a88:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9a8c:	e0fffc17 	ldw	r3,-16(fp)
    9a90:	00bfff84 	movi	r2,-2
    9a94:	1884703a 	and	r2,r3,r2
    9a98:	1001703a 	wrctl	status,r2
  
  return context;
    9a9c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9aa0:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    9aa4:	e0bffe17 	ldw	r2,-8(fp)
    9aa8:	10c00283 	ldbu	r3,10(r2)
    9aac:	e0bfff17 	ldw	r2,-4(fp)
    9ab0:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
    9ab4:	e0bffe17 	ldw	r2,-8(fp)
    9ab8:	108002c4 	addi	r2,r2,11
    9abc:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    9ac0:	e0bfff17 	ldw	r2,-4(fp)
    9ac4:	10800204 	addi	r2,r2,8
    9ac8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    9acc:	e03ff705 	stb	zero,-36(fp)
    9ad0:	00000b06 	br	9b00 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
    9ad4:	e0bff917 	ldw	r2,-28(fp)
    9ad8:	10c00044 	addi	r3,r2,1
    9adc:	e0fff915 	stw	r3,-28(fp)
    9ae0:	e0fff817 	ldw	r3,-32(fp)
    9ae4:	19000044 	addi	r4,r3,1
    9ae8:	e13ff815 	stw	r4,-32(fp)
    9aec:	18c00003 	ldbu	r3,0(r3)
    9af0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    9af4:	e0bff703 	ldbu	r2,-36(fp)
    9af8:	10800044 	addi	r2,r2,1
    9afc:	e0bff705 	stb	r2,-36(fp)
    9b00:	e0bff703 	ldbu	r2,-36(fp)
    9b04:	108000f0 	cmpltui	r2,r2,3
    9b08:	103ff21e 	bne	r2,zero,9ad4 <__alt_mem_Flash_flash_data+0xf4009ad4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    9b0c:	e0bffe17 	ldw	r2,-8(fp)
    9b10:	10800117 	ldw	r2,4(r2)
    9b14:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
    9b18:	e0bffb17 	ldw	r2,-20(fp)
    9b1c:	1080058b 	ldhu	r2,22(r2)
    9b20:	10bfffcc 	andi	r2,r2,65535
    9b24:	10000626 	beq	r2,zero,9b40 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    9b28:	e0bffb17 	ldw	r2,-20(fp)
    9b2c:	10800417 	ldw	r2,16(r2)
    9b30:	10c00017 	ldw	r3,0(r2)
    9b34:	e0bfff17 	ldw	r2,-4(fp)
    9b38:	10c00015 	stw	r3,0(r2)
    9b3c:	00000206 	br	9b48 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
    9b40:	e0bfff17 	ldw	r2,-4(fp)
    9b44:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    9b48:	e0bffb17 	ldw	r2,-20(fp)
    9b4c:	10c0058b 	ldhu	r3,22(r2)
    9b50:	e0bfff17 	ldw	r2,-4(fp)
    9b54:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    9b58:	e0bffb17 	ldw	r2,-20(fp)
    9b5c:	10c0050b 	ldhu	r3,20(r2)
    9b60:	e0bfff17 	ldw	r2,-4(fp)
    9b64:	10c0018d 	sth	r3,6(r2)
    9b68:	e0bffa17 	ldw	r2,-24(fp)
    9b6c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9b70:	e0bffd17 	ldw	r2,-12(fp)
    9b74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    9b78:	0005883a 	mov	r2,zero
}
    9b7c:	e037883a 	mov	sp,fp
    9b80:	df000017 	ldw	fp,0(sp)
    9b84:	dec00104 	addi	sp,sp,4
    9b88:	f800283a 	ret

00009b8c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    9b8c:	defffb04 	addi	sp,sp,-20
    9b90:	dfc00415 	stw	ra,16(sp)
    9b94:	df000315 	stw	fp,12(sp)
    9b98:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    9b9c:	010000b4 	movhi	r4,2
    9ba0:	213f3504 	addi	r4,r4,-812
    9ba4:	01407804 	movi	r5,480
    9ba8:	00061700 	call	6170 <OS_MemClr>
    pq1 = &OSQTbl[0];
    9bac:	008000b4 	movhi	r2,2
    9bb0:	10bf3504 	addi	r2,r2,-812
    9bb4:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    9bb8:	008000b4 	movhi	r2,2
    9bbc:	10bf3b04 	addi	r2,r2,-788
    9bc0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    9bc4:	e03ffd0d 	sth	zero,-12(fp)
    9bc8:	00000c06 	br	9bfc <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    9bcc:	e0bffe17 	ldw	r2,-8(fp)
    9bd0:	e0ffff17 	ldw	r3,-4(fp)
    9bd4:	10c00015 	stw	r3,0(r2)
        pq1++;
    9bd8:	e0bffe17 	ldw	r2,-8(fp)
    9bdc:	10800604 	addi	r2,r2,24
    9be0:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    9be4:	e0bfff17 	ldw	r2,-4(fp)
    9be8:	10800604 	addi	r2,r2,24
    9bec:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    9bf0:	e0bffd0b 	ldhu	r2,-12(fp)
    9bf4:	10800044 	addi	r2,r2,1
    9bf8:	e0bffd0d 	sth	r2,-12(fp)
    9bfc:	e0bffd0b 	ldhu	r2,-12(fp)
    9c00:	108004f0 	cmpltui	r2,r2,19
    9c04:	103ff11e 	bne	r2,zero,9bcc <__alt_mem_Flash_flash_data+0xf4009bcc>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    9c08:	e0bffe17 	ldw	r2,-8(fp)
    9c0c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    9c10:	00800074 	movhi	r2,1
    9c14:	10913604 	addi	r2,r2,17624
    9c18:	00c000b4 	movhi	r3,2
    9c1c:	18ff3504 	addi	r3,r3,-812
    9c20:	10c00015 	stw	r3,0(r2)
#endif
}
    9c24:	e037883a 	mov	sp,fp
    9c28:	dfc00117 	ldw	ra,4(sp)
    9c2c:	df000017 	ldw	fp,0(sp)
    9c30:	dec00204 	addi	sp,sp,8
    9c34:	f800283a 	ret

00009c38 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    9c38:	defffa04 	addi	sp,sp,-24
    9c3c:	df000515 	stw	fp,20(sp)
    9c40:	df000504 	addi	fp,sp,20
    9c44:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9c48:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9c4c:	e0bfff17 	ldw	r2,-4(fp)
    9c50:	1000021e 	bne	r2,zero,9c5c <OSSemAccept+0x24>
        return (0);
    9c54:	0005883a 	mov	r2,zero
    9c58:	00001f06 	br	9cd8 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9c5c:	e0bfff17 	ldw	r2,-4(fp)
    9c60:	10800003 	ldbu	r2,0(r2)
    9c64:	10803fcc 	andi	r2,r2,255
    9c68:	108000e0 	cmpeqi	r2,r2,3
    9c6c:	1000021e 	bne	r2,zero,9c78 <OSSemAccept+0x40>
        return (0);
    9c70:	0005883a 	mov	r2,zero
    9c74:	00001806 	br	9cd8 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9c78:	0005303a 	rdctl	r2,status
    9c7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9c80:	e0fffd17 	ldw	r3,-12(fp)
    9c84:	00bfff84 	movi	r2,-2
    9c88:	1884703a 	and	r2,r3,r2
    9c8c:	1001703a 	wrctl	status,r2
  
  return context;
    9c90:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    9c94:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
    9c98:	e0bfff17 	ldw	r2,-4(fp)
    9c9c:	1080020b 	ldhu	r2,8(r2)
    9ca0:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    9ca4:	e0bffc0b 	ldhu	r2,-16(fp)
    9ca8:	10000626 	beq	r2,zero,9cc4 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    9cac:	e0bfff17 	ldw	r2,-4(fp)
    9cb0:	1080020b 	ldhu	r2,8(r2)
    9cb4:	10bfffc4 	addi	r2,r2,-1
    9cb8:	1007883a 	mov	r3,r2
    9cbc:	e0bfff17 	ldw	r2,-4(fp)
    9cc0:	10c0020d 	sth	r3,8(r2)
    9cc4:	e0bffb17 	ldw	r2,-20(fp)
    9cc8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9ccc:	e0bffe17 	ldw	r2,-8(fp)
    9cd0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    9cd4:	e0bffc0b 	ldhu	r2,-16(fp)
}
    9cd8:	e037883a 	mov	sp,fp
    9cdc:	df000017 	ldw	fp,0(sp)
    9ce0:	dec00104 	addi	sp,sp,4
    9ce4:	f800283a 	ret

00009ce8 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    9ce8:	defff904 	addi	sp,sp,-28
    9cec:	dfc00615 	stw	ra,24(sp)
    9cf0:	df000515 	stw	fp,20(sp)
    9cf4:	df000504 	addi	fp,sp,20
    9cf8:	2005883a 	mov	r2,r4
    9cfc:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    9d00:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    9d04:	00800074 	movhi	r2,1
    9d08:	10913904 	addi	r2,r2,17636
    9d0c:	10800003 	ldbu	r2,0(r2)
    9d10:	10803fcc 	andi	r2,r2,255
    9d14:	10000226 	beq	r2,zero,9d20 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    9d18:	0005883a 	mov	r2,zero
    9d1c:	00002d06 	br	9dd4 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9d20:	0005303a 	rdctl	r2,status
    9d24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9d28:	e0fffd17 	ldw	r3,-12(fp)
    9d2c:	00bfff84 	movi	r2,-2
    9d30:	1884703a 	and	r2,r3,r2
    9d34:	1001703a 	wrctl	status,r2
  
  return context;
    9d38:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    9d3c:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    9d40:	00800074 	movhi	r2,1
    9d44:	10913804 	addi	r2,r2,17632
    9d48:	10800017 	ldw	r2,0(r2)
    9d4c:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    9d50:	00800074 	movhi	r2,1
    9d54:	10913804 	addi	r2,r2,17632
    9d58:	10800017 	ldw	r2,0(r2)
    9d5c:	10000726 	beq	r2,zero,9d7c <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    9d60:	00800074 	movhi	r2,1
    9d64:	10913804 	addi	r2,r2,17632
    9d68:	10800017 	ldw	r2,0(r2)
    9d6c:	10c00117 	ldw	r3,4(r2)
    9d70:	00800074 	movhi	r2,1
    9d74:	10913804 	addi	r2,r2,17632
    9d78:	10c00015 	stw	r3,0(r2)
    9d7c:	e0bffb17 	ldw	r2,-20(fp)
    9d80:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9d84:	e0bffe17 	ldw	r2,-8(fp)
    9d88:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    9d8c:	e0bffc17 	ldw	r2,-16(fp)
    9d90:	10000f26 	beq	r2,zero,9dd0 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    9d94:	e0bffc17 	ldw	r2,-16(fp)
    9d98:	00c000c4 	movi	r3,3
    9d9c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    9da0:	e0bffc17 	ldw	r2,-16(fp)
    9da4:	e0ffff0b 	ldhu	r3,-4(fp)
    9da8:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    9dac:	e0bffc17 	ldw	r2,-16(fp)
    9db0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    9db4:	e0bffc17 	ldw	r2,-16(fp)
    9db8:	00c00fc4 	movi	r3,63
    9dbc:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    9dc0:	e0bffc17 	ldw	r2,-16(fp)
    9dc4:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    9dc8:	e13ffc17 	ldw	r4,-16(fp)
    9dcc:	0005dac0 	call	5dac <OS_EventWaitListInit>
    }
    return (pevent);
    9dd0:	e0bffc17 	ldw	r2,-16(fp)
}
    9dd4:	e037883a 	mov	sp,fp
    9dd8:	dfc00117 	ldw	ra,4(sp)
    9ddc:	df000017 	ldw	fp,0(sp)
    9de0:	dec00204 	addi	sp,sp,8
    9de4:	f800283a 	ret

00009de8 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    9de8:	defff304 	addi	sp,sp,-52
    9dec:	dfc00c15 	stw	ra,48(sp)
    9df0:	df000b15 	stw	fp,44(sp)
    9df4:	df000b04 	addi	fp,sp,44
    9df8:	e13ffd15 	stw	r4,-12(fp)
    9dfc:	2805883a 	mov	r2,r5
    9e00:	e1bfff15 	stw	r6,-4(fp)
    9e04:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    9e08:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    9e0c:	e0bfff17 	ldw	r2,-4(fp)
    9e10:	1000021e 	bne	r2,zero,9e1c <OSSemDel+0x34>
        return (pevent);
    9e14:	e0bffd17 	ldw	r2,-12(fp)
    9e18:	00008806 	br	a03c <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    9e1c:	e0bffd17 	ldw	r2,-12(fp)
    9e20:	1000051e 	bne	r2,zero,9e38 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    9e24:	e0bfff17 	ldw	r2,-4(fp)
    9e28:	00c00104 	movi	r3,4
    9e2c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9e30:	e0bffd17 	ldw	r2,-12(fp)
    9e34:	00008106 	br	a03c <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    9e38:	e0bffd17 	ldw	r2,-12(fp)
    9e3c:	10800003 	ldbu	r2,0(r2)
    9e40:	10803fcc 	andi	r2,r2,255
    9e44:	108000e0 	cmpeqi	r2,r2,3
    9e48:	1000051e 	bne	r2,zero,9e60 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    9e4c:	e0bfff17 	ldw	r2,-4(fp)
    9e50:	00c00044 	movi	r3,1
    9e54:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9e58:	e0bffd17 	ldw	r2,-12(fp)
    9e5c:	00007706 	br	a03c <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    9e60:	00800074 	movhi	r2,1
    9e64:	10913904 	addi	r2,r2,17636
    9e68:	10800003 	ldbu	r2,0(r2)
    9e6c:	10803fcc 	andi	r2,r2,255
    9e70:	10000526 	beq	r2,zero,9e88 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    9e74:	e0bfff17 	ldw	r2,-4(fp)
    9e78:	00c003c4 	movi	r3,15
    9e7c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9e80:	e0bffd17 	ldw	r2,-12(fp)
    9e84:	00006d06 	br	a03c <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9e88:	0005303a 	rdctl	r2,status
    9e8c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9e90:	e0fff817 	ldw	r3,-32(fp)
    9e94:	00bfff84 	movi	r2,-2
    9e98:	1884703a 	and	r2,r3,r2
    9e9c:	1001703a 	wrctl	status,r2
  
  return context;
    9ea0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    9ea4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    9ea8:	e0bffd17 	ldw	r2,-12(fp)
    9eac:	10800283 	ldbu	r2,10(r2)
    9eb0:	10803fcc 	andi	r2,r2,255
    9eb4:	10000326 	beq	r2,zero,9ec4 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    9eb8:	00800044 	movi	r2,1
    9ebc:	e0bff505 	stb	r2,-44(fp)
    9ec0:	00000106 	br	9ec8 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    9ec4:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
    9ec8:	e0bffe03 	ldbu	r2,-8(fp)
    9ecc:	10000326 	beq	r2,zero,9edc <OSSemDel+0xf4>
    9ed0:	10800060 	cmpeqi	r2,r2,1
    9ed4:	10002c1e 	bne	r2,zero,9f88 <OSSemDel+0x1a0>
    9ed8:	00004d06 	br	a010 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    9edc:	e0bff503 	ldbu	r2,-44(fp)
    9ee0:	10001a1e 	bne	r2,zero,9f4c <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    9ee4:	e0bffd17 	ldw	r2,-12(fp)
    9ee8:	00c00fc4 	movi	r3,63
    9eec:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    9ef0:	e0bffd17 	ldw	r2,-12(fp)
    9ef4:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    9ef8:	e0bffd17 	ldw	r2,-12(fp)
    9efc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    9f00:	00800074 	movhi	r2,1
    9f04:	10913804 	addi	r2,r2,17632
    9f08:	10c00017 	ldw	r3,0(r2)
    9f0c:	e0bffd17 	ldw	r2,-12(fp)
    9f10:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    9f14:	e0bffd17 	ldw	r2,-12(fp)
    9f18:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    9f1c:	00800074 	movhi	r2,1
    9f20:	10913804 	addi	r2,r2,17632
    9f24:	e0fffd17 	ldw	r3,-12(fp)
    9f28:	10c00015 	stw	r3,0(r2)
    9f2c:	e0bff717 	ldw	r2,-36(fp)
    9f30:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9f34:	e0bff917 	ldw	r2,-28(fp)
    9f38:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    9f3c:	e0bfff17 	ldw	r2,-4(fp)
    9f40:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    9f44:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    9f48:	00003b06 	br	a038 <OSSemDel+0x250>
    9f4c:	e0bff717 	ldw	r2,-36(fp)
    9f50:	e0bffa15 	stw	r2,-24(fp)
    9f54:	e0bffa17 	ldw	r2,-24(fp)
    9f58:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    9f5c:	e0bfff17 	ldw	r2,-4(fp)
    9f60:	00c01244 	movi	r3,73
    9f64:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    9f68:	e0bffd17 	ldw	r2,-12(fp)
    9f6c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    9f70:	00003106 	br	a038 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    9f74:	e13ffd17 	ldw	r4,-12(fp)
    9f78:	000b883a 	mov	r5,zero
    9f7c:	01800044 	movi	r6,1
    9f80:	000f883a 	mov	r7,zero
    9f84:	000580c0 	call	580c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    9f88:	e0bffd17 	ldw	r2,-12(fp)
    9f8c:	10800283 	ldbu	r2,10(r2)
    9f90:	10803fcc 	andi	r2,r2,255
    9f94:	103ff71e 	bne	r2,zero,9f74 <__alt_mem_Flash_flash_data+0xf4009f74>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    9f98:	e0bffd17 	ldw	r2,-12(fp)
    9f9c:	00c00fc4 	movi	r3,63
    9fa0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    9fa4:	e0bffd17 	ldw	r2,-12(fp)
    9fa8:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    9fac:	e0bffd17 	ldw	r2,-12(fp)
    9fb0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    9fb4:	00800074 	movhi	r2,1
    9fb8:	10913804 	addi	r2,r2,17632
    9fbc:	10c00017 	ldw	r3,0(r2)
    9fc0:	e0bffd17 	ldw	r2,-12(fp)
    9fc4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    9fc8:	e0bffd17 	ldw	r2,-12(fp)
    9fcc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    9fd0:	00800074 	movhi	r2,1
    9fd4:	10913804 	addi	r2,r2,17632
    9fd8:	e0fffd17 	ldw	r3,-12(fp)
    9fdc:	10c00015 	stw	r3,0(r2)
    9fe0:	e0bff717 	ldw	r2,-36(fp)
    9fe4:	e0bffb15 	stw	r2,-20(fp)
    9fe8:	e0bffb17 	ldw	r2,-20(fp)
    9fec:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    9ff0:	e0bff503 	ldbu	r2,-44(fp)
    9ff4:	10800058 	cmpnei	r2,r2,1
    9ff8:	1000011e 	bne	r2,zero,a000 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    9ffc:	00062240 	call	6224 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    a000:	e0bfff17 	ldw	r2,-4(fp)
    a004:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    a008:	e03ff615 	stw	zero,-40(fp)
             break;
    a00c:	00000a06 	br	a038 <OSSemDel+0x250>
    a010:	e0bff717 	ldw	r2,-36(fp)
    a014:	e0bffc15 	stw	r2,-16(fp)
    a018:	e0bffc17 	ldw	r2,-16(fp)
    a01c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    a020:	e0bfff17 	ldw	r2,-4(fp)
    a024:	00c001c4 	movi	r3,7
    a028:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    a02c:	e0bffd17 	ldw	r2,-12(fp)
    a030:	e0bff615 	stw	r2,-40(fp)
             break;
    a034:	0001883a 	nop
    }
    return (pevent_return);
    a038:	e0bff617 	ldw	r2,-40(fp)
}
    a03c:	e037883a 	mov	sp,fp
    a040:	dfc00117 	ldw	ra,4(sp)
    a044:	df000017 	ldw	fp,0(sp)
    a048:	dec00204 	addi	sp,sp,8
    a04c:	f800283a 	ret

0000a050 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    a050:	defff504 	addi	sp,sp,-44
    a054:	dfc00a15 	stw	ra,40(sp)
    a058:	df000915 	stw	fp,36(sp)
    a05c:	df000904 	addi	fp,sp,36
    a060:	e13ffd15 	stw	r4,-12(fp)
    a064:	2805883a 	mov	r2,r5
    a068:	e1bfff15 	stw	r6,-4(fp)
    a06c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a070:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    a074:	e0bfff17 	ldw	r2,-4(fp)
    a078:	1000011e 	bne	r2,zero,a080 <OSSemPend+0x30>
        return;
    a07c:	00008906 	br	a2a4 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    a080:	e0bffd17 	ldw	r2,-12(fp)
    a084:	1000041e 	bne	r2,zero,a098 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
    a088:	e0bfff17 	ldw	r2,-4(fp)
    a08c:	00c00104 	movi	r3,4
    a090:	10c00005 	stb	r3,0(r2)
        return;
    a094:	00008306 	br	a2a4 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    a098:	e0bffd17 	ldw	r2,-12(fp)
    a09c:	10800003 	ldbu	r2,0(r2)
    a0a0:	10803fcc 	andi	r2,r2,255
    a0a4:	108000e0 	cmpeqi	r2,r2,3
    a0a8:	1000041e 	bne	r2,zero,a0bc <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    a0ac:	e0bfff17 	ldw	r2,-4(fp)
    a0b0:	00c00044 	movi	r3,1
    a0b4:	10c00005 	stb	r3,0(r2)
        return;
    a0b8:	00007a06 	br	a2a4 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    a0bc:	00800074 	movhi	r2,1
    a0c0:	10913904 	addi	r2,r2,17636
    a0c4:	10800003 	ldbu	r2,0(r2)
    a0c8:	10803fcc 	andi	r2,r2,255
    a0cc:	10000426 	beq	r2,zero,a0e0 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    a0d0:	e0bfff17 	ldw	r2,-4(fp)
    a0d4:	00c00084 	movi	r3,2
    a0d8:	10c00005 	stb	r3,0(r2)
        return;
    a0dc:	00007106 	br	a2a4 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    a0e0:	00800074 	movhi	r2,1
    a0e4:	10912b04 	addi	r2,r2,17580
    a0e8:	10800003 	ldbu	r2,0(r2)
    a0ec:	10803fcc 	andi	r2,r2,255
    a0f0:	10000426 	beq	r2,zero,a104 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    a0f4:	e0bfff17 	ldw	r2,-4(fp)
    a0f8:	00c00344 	movi	r3,13
    a0fc:	10c00005 	stb	r3,0(r2)
        return;
    a100:	00006806 	br	a2a4 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a104:	0005303a 	rdctl	r2,status
    a108:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a10c:	e0fff817 	ldw	r3,-32(fp)
    a110:	00bfff84 	movi	r2,-2
    a114:	1884703a 	and	r2,r3,r2
    a118:	1001703a 	wrctl	status,r2
  
  return context;
    a11c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    a120:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    a124:	e0bffd17 	ldw	r2,-12(fp)
    a128:	1080020b 	ldhu	r2,8(r2)
    a12c:	10bfffcc 	andi	r2,r2,65535
    a130:	10000d26 	beq	r2,zero,a168 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    a134:	e0bffd17 	ldw	r2,-12(fp)
    a138:	1080020b 	ldhu	r2,8(r2)
    a13c:	10bfffc4 	addi	r2,r2,-1
    a140:	1007883a 	mov	r3,r2
    a144:	e0bffd17 	ldw	r2,-12(fp)
    a148:	10c0020d 	sth	r3,8(r2)
    a14c:	e0bff717 	ldw	r2,-36(fp)
    a150:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a154:	e0bff917 	ldw	r2,-28(fp)
    a158:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    a15c:	e0bfff17 	ldw	r2,-4(fp)
    a160:	10000005 	stb	zero,0(r2)
        return;
    a164:	00004f06 	br	a2a4 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    a168:	00800074 	movhi	r2,1
    a16c:	10913a04 	addi	r2,r2,17640
    a170:	10c00017 	ldw	r3,0(r2)
    a174:	00800074 	movhi	r2,1
    a178:	10913a04 	addi	r2,r2,17640
    a17c:	10800017 	ldw	r2,0(r2)
    a180:	10800c03 	ldbu	r2,48(r2)
    a184:	10800054 	ori	r2,r2,1
    a188:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    a18c:	00800074 	movhi	r2,1
    a190:	10913a04 	addi	r2,r2,17640
    a194:	10800017 	ldw	r2,0(r2)
    a198:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    a19c:	00800074 	movhi	r2,1
    a1a0:	10913a04 	addi	r2,r2,17640
    a1a4:	10800017 	ldw	r2,0(r2)
    a1a8:	e0fffe0b 	ldhu	r3,-8(fp)
    a1ac:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    a1b0:	e13ffd17 	ldw	r4,-12(fp)
    a1b4:	00059a40 	call	59a4 <OS_EventTaskWait>
    a1b8:	e0bff717 	ldw	r2,-36(fp)
    a1bc:	e0bffa15 	stw	r2,-24(fp)
    a1c0:	e0bffa17 	ldw	r2,-24(fp)
    a1c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    a1c8:	00062240 	call	6224 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a1cc:	0005303a 	rdctl	r2,status
    a1d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a1d4:	e0fffb17 	ldw	r3,-20(fp)
    a1d8:	00bfff84 	movi	r2,-2
    a1dc:	1884703a 	and	r2,r3,r2
    a1e0:	1001703a 	wrctl	status,r2
  
  return context;
    a1e4:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    a1e8:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    a1ec:	00800074 	movhi	r2,1
    a1f0:	10913a04 	addi	r2,r2,17640
    a1f4:	10800017 	ldw	r2,0(r2)
    a1f8:	10800c43 	ldbu	r2,49(r2)
    a1fc:	10803fcc 	andi	r2,r2,255
    a200:	10000326 	beq	r2,zero,a210 <OSSemPend+0x1c0>
    a204:	108000a0 	cmpeqi	r2,r2,2
    a208:	1000041e 	bne	r2,zero,a21c <OSSemPend+0x1cc>
    a20c:	00000706 	br	a22c <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    a210:	e0bfff17 	ldw	r2,-4(fp)
    a214:	10000005 	stb	zero,0(r2)
             break;
    a218:	00000e06 	br	a254 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    a21c:	e0bfff17 	ldw	r2,-4(fp)
    a220:	00c00384 	movi	r3,14
    a224:	10c00005 	stb	r3,0(r2)
             break;
    a228:	00000a06 	br	a254 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    a22c:	00800074 	movhi	r2,1
    a230:	10913a04 	addi	r2,r2,17640
    a234:	10800017 	ldw	r2,0(r2)
    a238:	1009883a 	mov	r4,r2
    a23c:	e17ffd17 	ldw	r5,-12(fp)
    a240:	0005bfc0 	call	5bfc <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    a244:	e0bfff17 	ldw	r2,-4(fp)
    a248:	00c00284 	movi	r3,10
    a24c:	10c00005 	stb	r3,0(r2)
             break;
    a250:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    a254:	00800074 	movhi	r2,1
    a258:	10913a04 	addi	r2,r2,17640
    a25c:	10800017 	ldw	r2,0(r2)
    a260:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    a264:	00800074 	movhi	r2,1
    a268:	10913a04 	addi	r2,r2,17640
    a26c:	10800017 	ldw	r2,0(r2)
    a270:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    a274:	00800074 	movhi	r2,1
    a278:	10913a04 	addi	r2,r2,17640
    a27c:	10800017 	ldw	r2,0(r2)
    a280:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    a284:	00800074 	movhi	r2,1
    a288:	10913a04 	addi	r2,r2,17640
    a28c:	10800017 	ldw	r2,0(r2)
    a290:	10000815 	stw	zero,32(r2)
    a294:	e0bff717 	ldw	r2,-36(fp)
    a298:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a29c:	e0bffc17 	ldw	r2,-16(fp)
    a2a0:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
    a2a4:	e037883a 	mov	sp,fp
    a2a8:	dfc00117 	ldw	ra,4(sp)
    a2ac:	df000017 	ldw	fp,0(sp)
    a2b0:	dec00204 	addi	sp,sp,8
    a2b4:	f800283a 	ret

0000a2b8 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    a2b8:	defff604 	addi	sp,sp,-40
    a2bc:	dfc00915 	stw	ra,36(sp)
    a2c0:	df000815 	stw	fp,32(sp)
    a2c4:	df000804 	addi	fp,sp,32
    a2c8:	e13ffd15 	stw	r4,-12(fp)
    a2cc:	2805883a 	mov	r2,r5
    a2d0:	e1bfff15 	stw	r6,-4(fp)
    a2d4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a2d8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    a2dc:	e0bfff17 	ldw	r2,-4(fp)
    a2e0:	1000021e 	bne	r2,zero,a2ec <OSSemPendAbort+0x34>
        return (0);
    a2e4:	0005883a 	mov	r2,zero
    a2e8:	00004906 	br	a410 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    a2ec:	e0bffd17 	ldw	r2,-12(fp)
    a2f0:	1000051e 	bne	r2,zero,a308 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    a2f4:	e0bfff17 	ldw	r2,-4(fp)
    a2f8:	00c00104 	movi	r3,4
    a2fc:	10c00005 	stb	r3,0(r2)
        return (0);
    a300:	0005883a 	mov	r2,zero
    a304:	00004206 	br	a410 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    a308:	e0bffd17 	ldw	r2,-12(fp)
    a30c:	10800003 	ldbu	r2,0(r2)
    a310:	10803fcc 	andi	r2,r2,255
    a314:	108000e0 	cmpeqi	r2,r2,3
    a318:	1000051e 	bne	r2,zero,a330 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    a31c:	e0bfff17 	ldw	r2,-4(fp)
    a320:	00c00044 	movi	r3,1
    a324:	10c00005 	stb	r3,0(r2)
        return (0);
    a328:	0005883a 	mov	r2,zero
    a32c:	00003806 	br	a410 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a330:	0005303a 	rdctl	r2,status
    a334:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a338:	e0fffa17 	ldw	r3,-24(fp)
    a33c:	00bfff84 	movi	r2,-2
    a340:	1884703a 	and	r2,r3,r2
    a344:	1001703a 	wrctl	status,r2
  
  return context;
    a348:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    a34c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    a350:	e0bffd17 	ldw	r2,-12(fp)
    a354:	10800283 	ldbu	r2,10(r2)
    a358:	10803fcc 	andi	r2,r2,255
    a35c:	10002526 	beq	r2,zero,a3f4 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
    a360:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    a364:	e0bffe03 	ldbu	r2,-8(fp)
    a368:	10800060 	cmpeqi	r2,r2,1
    a36c:	10000e26 	beq	r2,zero,a3a8 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    a370:	00000806 	br	a394 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    a374:	e13ffd17 	ldw	r4,-12(fp)
    a378:	000b883a 	mov	r5,zero
    a37c:	01800044 	movi	r6,1
    a380:	01c00084 	movi	r7,2
    a384:	000580c0 	call	580c <OS_EventTaskRdy>
                     nbr_tasks++;
    a388:	e0bff803 	ldbu	r2,-32(fp)
    a38c:	10800044 	addi	r2,r2,1
    a390:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    a394:	e0bffd17 	ldw	r2,-12(fp)
    a398:	10800283 	ldbu	r2,10(r2)
    a39c:	10803fcc 	andi	r2,r2,255
    a3a0:	103ff41e 	bne	r2,zero,a374 <__alt_mem_Flash_flash_data+0xf400a374>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    a3a4:	00000906 	br	a3cc <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    a3a8:	e13ffd17 	ldw	r4,-12(fp)
    a3ac:	000b883a 	mov	r5,zero
    a3b0:	01800044 	movi	r6,1
    a3b4:	01c00084 	movi	r7,2
    a3b8:	000580c0 	call	580c <OS_EventTaskRdy>
                 nbr_tasks++;
    a3bc:	e0bff803 	ldbu	r2,-32(fp)
    a3c0:	10800044 	addi	r2,r2,1
    a3c4:	e0bff805 	stb	r2,-32(fp)
                 break;
    a3c8:	0001883a 	nop
    a3cc:	e0bff917 	ldw	r2,-28(fp)
    a3d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a3d4:	e0bffb17 	ldw	r2,-20(fp)
    a3d8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    a3dc:	00062240 	call	6224 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    a3e0:	e0bfff17 	ldw	r2,-4(fp)
    a3e4:	00c00384 	movi	r3,14
    a3e8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    a3ec:	e0bff803 	ldbu	r2,-32(fp)
    a3f0:	00000706 	br	a410 <OSSemPendAbort+0x158>
    a3f4:	e0bff917 	ldw	r2,-28(fp)
    a3f8:	e0bffc15 	stw	r2,-16(fp)
    a3fc:	e0bffc17 	ldw	r2,-16(fp)
    a400:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    a404:	e0bfff17 	ldw	r2,-4(fp)
    a408:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    a40c:	0005883a 	mov	r2,zero
}
    a410:	e037883a 	mov	sp,fp
    a414:	dfc00117 	ldw	ra,4(sp)
    a418:	df000017 	ldw	fp,0(sp)
    a41c:	dec00204 	addi	sp,sp,8
    a420:	f800283a 	ret

0000a424 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    a424:	defff804 	addi	sp,sp,-32
    a428:	dfc00715 	stw	ra,28(sp)
    a42c:	df000615 	stw	fp,24(sp)
    a430:	df000604 	addi	fp,sp,24
    a434:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a438:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    a43c:	e0bfff17 	ldw	r2,-4(fp)
    a440:	1000021e 	bne	r2,zero,a44c <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    a444:	00800104 	movi	r2,4
    a448:	00003506 	br	a520 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    a44c:	e0bfff17 	ldw	r2,-4(fp)
    a450:	10800003 	ldbu	r2,0(r2)
    a454:	10803fcc 	andi	r2,r2,255
    a458:	108000e0 	cmpeqi	r2,r2,3
    a45c:	1000021e 	bne	r2,zero,a468 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
    a460:	00800044 	movi	r2,1
    a464:	00002e06 	br	a520 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a468:	0005303a 	rdctl	r2,status
    a46c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a470:	e0fffb17 	ldw	r3,-20(fp)
    a474:	00bfff84 	movi	r2,-2
    a478:	1884703a 	and	r2,r3,r2
    a47c:	1001703a 	wrctl	status,r2
  
  return context;
    a480:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    a484:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    a488:	e0bfff17 	ldw	r2,-4(fp)
    a48c:	10800283 	ldbu	r2,10(r2)
    a490:	10803fcc 	andi	r2,r2,255
    a494:	10000c26 	beq	r2,zero,a4c8 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    a498:	e13fff17 	ldw	r4,-4(fp)
    a49c:	000b883a 	mov	r5,zero
    a4a0:	01800044 	movi	r6,1
    a4a4:	000f883a 	mov	r7,zero
    a4a8:	000580c0 	call	580c <OS_EventTaskRdy>
    a4ac:	e0bffa17 	ldw	r2,-24(fp)
    a4b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a4b4:	e0bffc17 	ldw	r2,-16(fp)
    a4b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    a4bc:	00062240 	call	6224 <OS_Sched>
        return (OS_ERR_NONE);
    a4c0:	0005883a 	mov	r2,zero
    a4c4:	00001606 	br	a520 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    a4c8:	e0bfff17 	ldw	r2,-4(fp)
    a4cc:	1080020b 	ldhu	r2,8(r2)
    a4d0:	10ffffcc 	andi	r3,r2,65535
    a4d4:	00bfffd4 	movui	r2,65535
    a4d8:	18800c26 	beq	r3,r2,a50c <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    a4dc:	e0bfff17 	ldw	r2,-4(fp)
    a4e0:	1080020b 	ldhu	r2,8(r2)
    a4e4:	10800044 	addi	r2,r2,1
    a4e8:	1007883a 	mov	r3,r2
    a4ec:	e0bfff17 	ldw	r2,-4(fp)
    a4f0:	10c0020d 	sth	r3,8(r2)
    a4f4:	e0bffa17 	ldw	r2,-24(fp)
    a4f8:	e0bffd15 	stw	r2,-12(fp)
    a4fc:	e0bffd17 	ldw	r2,-12(fp)
    a500:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    a504:	0005883a 	mov	r2,zero
    a508:	00000506 	br	a520 <OSSemPost+0xfc>
    a50c:	e0bffa17 	ldw	r2,-24(fp)
    a510:	e0bffe15 	stw	r2,-8(fp)
    a514:	e0bffe17 	ldw	r2,-8(fp)
    a518:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    a51c:	00800c84 	movi	r2,50
}
    a520:	e037883a 	mov	sp,fp
    a524:	dfc00117 	ldw	ra,4(sp)
    a528:	df000017 	ldw	fp,0(sp)
    a52c:	dec00204 	addi	sp,sp,8
    a530:	f800283a 	ret

0000a534 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    a534:	defff704 	addi	sp,sp,-36
    a538:	df000815 	stw	fp,32(sp)
    a53c:	df000804 	addi	fp,sp,32
    a540:	e13ffe15 	stw	r4,-8(fp)
    a544:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    a548:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    a54c:	e0bffe17 	ldw	r2,-8(fp)
    a550:	1000021e 	bne	r2,zero,a55c <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    a554:	00800104 	movi	r2,4
    a558:	00003606 	br	a634 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    a55c:	e0bfff17 	ldw	r2,-4(fp)
    a560:	1000021e 	bne	r2,zero,a56c <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    a564:	00800244 	movi	r2,9
    a568:	00003206 	br	a634 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    a56c:	e0bffe17 	ldw	r2,-8(fp)
    a570:	10800003 	ldbu	r2,0(r2)
    a574:	10803fcc 	andi	r2,r2,255
    a578:	108000e0 	cmpeqi	r2,r2,3
    a57c:	1000021e 	bne	r2,zero,a588 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    a580:	00800044 	movi	r2,1
    a584:	00002b06 	br	a634 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a588:	0005303a 	rdctl	r2,status
    a58c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a590:	e0fffc17 	ldw	r3,-16(fp)
    a594:	00bfff84 	movi	r2,-2
    a598:	1884703a 	and	r2,r3,r2
    a59c:	1001703a 	wrctl	status,r2
  
  return context;
    a5a0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    a5a4:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    a5a8:	e0bffe17 	ldw	r2,-8(fp)
    a5ac:	10c00283 	ldbu	r3,10(r2)
    a5b0:	e0bfff17 	ldw	r2,-4(fp)
    a5b4:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
    a5b8:	e0bffe17 	ldw	r2,-8(fp)
    a5bc:	108002c4 	addi	r2,r2,11
    a5c0:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    a5c4:	e0bfff17 	ldw	r2,-4(fp)
    a5c8:	10800084 	addi	r2,r2,2
    a5cc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    a5d0:	e03ffa05 	stb	zero,-24(fp)
    a5d4:	00000b06 	br	a604 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
    a5d8:	e0bff917 	ldw	r2,-28(fp)
    a5dc:	10c00044 	addi	r3,r2,1
    a5e0:	e0fff915 	stw	r3,-28(fp)
    a5e4:	e0fff817 	ldw	r3,-32(fp)
    a5e8:	19000044 	addi	r4,r3,1
    a5ec:	e13ff815 	stw	r4,-32(fp)
    a5f0:	18c00003 	ldbu	r3,0(r3)
    a5f4:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    a5f8:	e0bffa03 	ldbu	r2,-24(fp)
    a5fc:	10800044 	addi	r2,r2,1
    a600:	e0bffa05 	stb	r2,-24(fp)
    a604:	e0bffa03 	ldbu	r2,-24(fp)
    a608:	108000f0 	cmpltui	r2,r2,3
    a60c:	103ff21e 	bne	r2,zero,a5d8 <__alt_mem_Flash_flash_data+0xf400a5d8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    a610:	e0bffe17 	ldw	r2,-8(fp)
    a614:	10c0020b 	ldhu	r3,8(r2)
    a618:	e0bfff17 	ldw	r2,-4(fp)
    a61c:	10c0000d 	sth	r3,0(r2)
    a620:	e0bffb17 	ldw	r2,-20(fp)
    a624:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a628:	e0bffd17 	ldw	r2,-12(fp)
    a62c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a630:	0005883a 	mov	r2,zero
}
    a634:	e037883a 	mov	sp,fp
    a638:	df000017 	ldw	fp,0(sp)
    a63c:	dec00104 	addi	sp,sp,4
    a640:	f800283a 	ret

0000a644 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    a644:	defff904 	addi	sp,sp,-28
    a648:	df000615 	stw	fp,24(sp)
    a64c:	df000604 	addi	fp,sp,24
    a650:	e13ffd15 	stw	r4,-12(fp)
    a654:	2805883a 	mov	r2,r5
    a658:	e1bfff15 	stw	r6,-4(fp)
    a65c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a660:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    a664:	e0bfff17 	ldw	r2,-4(fp)
    a668:	1000011e 	bne	r2,zero,a670 <OSSemSet+0x2c>
        return;
    a66c:	00003006 	br	a730 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    a670:	e0bffd17 	ldw	r2,-12(fp)
    a674:	1000041e 	bne	r2,zero,a688 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    a678:	e0bfff17 	ldw	r2,-4(fp)
    a67c:	00c00104 	movi	r3,4
    a680:	10c00005 	stb	r3,0(r2)
        return;
    a684:	00002a06 	br	a730 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    a688:	e0bffd17 	ldw	r2,-12(fp)
    a68c:	10800003 	ldbu	r2,0(r2)
    a690:	10803fcc 	andi	r2,r2,255
    a694:	108000e0 	cmpeqi	r2,r2,3
    a698:	1000041e 	bne	r2,zero,a6ac <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    a69c:	e0bfff17 	ldw	r2,-4(fp)
    a6a0:	00c00044 	movi	r3,1
    a6a4:	10c00005 	stb	r3,0(r2)
        return;
    a6a8:	00002106 	br	a730 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a6ac:	0005303a 	rdctl	r2,status
    a6b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a6b4:	e0fffb17 	ldw	r3,-20(fp)
    a6b8:	00bfff84 	movi	r2,-2
    a6bc:	1884703a 	and	r2,r3,r2
    a6c0:	1001703a 	wrctl	status,r2
  
  return context;
    a6c4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    a6c8:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
    a6cc:	e0bfff17 	ldw	r2,-4(fp)
    a6d0:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    a6d4:	e0bffd17 	ldw	r2,-12(fp)
    a6d8:	1080020b 	ldhu	r2,8(r2)
    a6dc:	10bfffcc 	andi	r2,r2,65535
    a6e0:	10000426 	beq	r2,zero,a6f4 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    a6e4:	e0bffd17 	ldw	r2,-12(fp)
    a6e8:	e0fffe0b 	ldhu	r3,-8(fp)
    a6ec:	10c0020d 	sth	r3,8(r2)
    a6f0:	00000b06 	br	a720 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    a6f4:	e0bffd17 	ldw	r2,-12(fp)
    a6f8:	10800283 	ldbu	r2,10(r2)
    a6fc:	10803fcc 	andi	r2,r2,255
    a700:	1000041e 	bne	r2,zero,a714 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    a704:	e0bffd17 	ldw	r2,-12(fp)
    a708:	e0fffe0b 	ldhu	r3,-8(fp)
    a70c:	10c0020d 	sth	r3,8(r2)
    a710:	00000306 	br	a720 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    a714:	e0bfff17 	ldw	r2,-4(fp)
    a718:	00c01244 	movi	r3,73
    a71c:	10c00005 	stb	r3,0(r2)
    a720:	e0bffa17 	ldw	r2,-24(fp)
    a724:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a728:	e0bffc17 	ldw	r2,-16(fp)
    a72c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
    a730:	e037883a 	mov	sp,fp
    a734:	df000017 	ldw	fp,0(sp)
    a738:	dec00104 	addi	sp,sp,4
    a73c:	f800283a 	ret

0000a740 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    a740:	defff104 	addi	sp,sp,-60
    a744:	dfc00e15 	stw	ra,56(sp)
    a748:	df000d15 	stw	fp,52(sp)
    a74c:	df000d04 	addi	fp,sp,52
    a750:	2007883a 	mov	r3,r4
    a754:	2805883a 	mov	r2,r5
    a758:	e0fffe05 	stb	r3,-8(fp)
    a75c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    a760:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    a764:	e0bffe03 	ldbu	r2,-8(fp)
    a768:	10800530 	cmpltui	r2,r2,20
    a76c:	1000051e 	bne	r2,zero,a784 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
    a770:	e0bffe03 	ldbu	r2,-8(fp)
    a774:	10803fe0 	cmpeqi	r2,r2,255
    a778:	1000021e 	bne	r2,zero,a784 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
    a77c:	00800a84 	movi	r2,42
    a780:	00013a06 	br	ac6c <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    a784:	e0bfff03 	ldbu	r2,-4(fp)
    a788:	10800530 	cmpltui	r2,r2,20
    a78c:	1000021e 	bne	r2,zero,a798 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
    a790:	00800a84 	movi	r2,42
    a794:	00013506 	br	ac6c <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a798:	0005303a 	rdctl	r2,status
    a79c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a7a0:	e0fff917 	ldw	r3,-28(fp)
    a7a4:	00bfff84 	movi	r2,-2
    a7a8:	1884703a 	and	r2,r3,r2
    a7ac:	1001703a 	wrctl	status,r2
  
  return context;
    a7b0:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    a7b4:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    a7b8:	e0ffff03 	ldbu	r3,-4(fp)
    a7bc:	008000b4 	movhi	r2,2
    a7c0:	1085c104 	addi	r2,r2,5892
    a7c4:	18c7883a 	add	r3,r3,r3
    a7c8:	18c7883a 	add	r3,r3,r3
    a7cc:	10c5883a 	add	r2,r2,r3
    a7d0:	10800017 	ldw	r2,0(r2)
    a7d4:	10000626 	beq	r2,zero,a7f0 <OSTaskChangePrio+0xb0>
    a7d8:	e0bff517 	ldw	r2,-44(fp)
    a7dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a7e0:	e0bffa17 	ldw	r2,-24(fp)
    a7e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    a7e8:	00800a04 	movi	r2,40
    a7ec:	00011f06 	br	ac6c <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    a7f0:	e0bffe03 	ldbu	r2,-8(fp)
    a7f4:	10803fd8 	cmpnei	r2,r2,255
    a7f8:	1000051e 	bne	r2,zero,a810 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    a7fc:	00800074 	movhi	r2,1
    a800:	10913a04 	addi	r2,r2,17640
    a804:	10800017 	ldw	r2,0(r2)
    a808:	10800c83 	ldbu	r2,50(r2)
    a80c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    a810:	e0fffe03 	ldbu	r3,-8(fp)
    a814:	008000b4 	movhi	r2,2
    a818:	1085c104 	addi	r2,r2,5892
    a81c:	18c7883a 	add	r3,r3,r3
    a820:	18c7883a 	add	r3,r3,r3
    a824:	10c5883a 	add	r2,r2,r3
    a828:	10800017 	ldw	r2,0(r2)
    a82c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    a830:	e0bff617 	ldw	r2,-40(fp)
    a834:	1000061e 	bne	r2,zero,a850 <OSTaskChangePrio+0x110>
    a838:	e0bff517 	ldw	r2,-44(fp)
    a83c:	e0bffb15 	stw	r2,-20(fp)
    a840:	e0bffb17 	ldw	r2,-20(fp)
    a844:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    a848:	00800a44 	movi	r2,41
    a84c:	00010706 	br	ac6c <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    a850:	e0bff617 	ldw	r2,-40(fp)
    a854:	10800058 	cmpnei	r2,r2,1
    a858:	1000061e 	bne	r2,zero,a874 <OSTaskChangePrio+0x134>
    a85c:	e0bff517 	ldw	r2,-44(fp)
    a860:	e0bffc15 	stw	r2,-16(fp)
    a864:	e0bffc17 	ldw	r2,-16(fp)
    a868:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    a86c:	008010c4 	movi	r2,67
    a870:	0000fe06 	br	ac6c <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    a874:	e0bfff03 	ldbu	r2,-4(fp)
    a878:	1004d0fa 	srli	r2,r2,3
    a87c:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    a880:	e0bfff03 	ldbu	r2,-4(fp)
    a884:	108001cc 	andi	r2,r2,7
    a888:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
    a88c:	e0bff703 	ldbu	r2,-36(fp)
    a890:	00c00044 	movi	r3,1
    a894:	1884983a 	sll	r2,r3,r2
    a898:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
    a89c:	e0bff743 	ldbu	r2,-35(fp)
    a8a0:	00c00044 	movi	r3,1
    a8a4:	1884983a 	sll	r2,r3,r2
    a8a8:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    a8ac:	e0fffe03 	ldbu	r3,-8(fp)
    a8b0:	008000b4 	movhi	r2,2
    a8b4:	1085c104 	addi	r2,r2,5892
    a8b8:	18c7883a 	add	r3,r3,r3
    a8bc:	18c7883a 	add	r3,r3,r3
    a8c0:	10c5883a 	add	r2,r2,r3
    a8c4:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    a8c8:	e0ffff03 	ldbu	r3,-4(fp)
    a8cc:	008000b4 	movhi	r2,2
    a8d0:	1085c104 	addi	r2,r2,5892
    a8d4:	18c7883a 	add	r3,r3,r3
    a8d8:	18c7883a 	add	r3,r3,r3
    a8dc:	10c5883a 	add	r2,r2,r3
    a8e0:	e0fff617 	ldw	r3,-40(fp)
    a8e4:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
    a8e8:	e0bff617 	ldw	r2,-40(fp)
    a8ec:	10800d03 	ldbu	r2,52(r2)
    a8f0:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
    a8f4:	e0bff617 	ldw	r2,-40(fp)
    a8f8:	10800d83 	ldbu	r2,54(r2)
    a8fc:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    a900:	e0bff617 	ldw	r2,-40(fp)
    a904:	10800d43 	ldbu	r2,53(r2)
    a908:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    a90c:	e0fff803 	ldbu	r3,-32(fp)
    a910:	00800074 	movhi	r2,1
    a914:	10913744 	addi	r2,r2,17629
    a918:	10c5883a 	add	r2,r2,r3
    a91c:	10c00003 	ldbu	r3,0(r2)
    a920:	e0bff883 	ldbu	r2,-30(fp)
    a924:	1884703a 	and	r2,r3,r2
    a928:	10803fcc 	andi	r2,r2,255
    a92c:	10003726 	beq	r2,zero,aa0c <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
    a930:	e0fff803 	ldbu	r3,-32(fp)
    a934:	e13ff803 	ldbu	r4,-32(fp)
    a938:	00800074 	movhi	r2,1
    a93c:	10913744 	addi	r2,r2,17629
    a940:	1105883a 	add	r2,r2,r4
    a944:	10800003 	ldbu	r2,0(r2)
    a948:	1009883a 	mov	r4,r2
    a94c:	e0bff883 	ldbu	r2,-30(fp)
    a950:	0084303a 	nor	r2,zero,r2
    a954:	2084703a 	and	r2,r4,r2
    a958:	1009883a 	mov	r4,r2
    a95c:	00800074 	movhi	r2,1
    a960:	10913744 	addi	r2,r2,17629
    a964:	10c5883a 	add	r2,r2,r3
    a968:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    a96c:	e0fff803 	ldbu	r3,-32(fp)
    a970:	00800074 	movhi	r2,1
    a974:	10913744 	addi	r2,r2,17629
    a978:	10c5883a 	add	r2,r2,r3
    a97c:	10800003 	ldbu	r2,0(r2)
    a980:	10803fcc 	andi	r2,r2,255
    a984:	10000b1e 	bne	r2,zero,a9b4 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
    a988:	e0bff843 	ldbu	r2,-31(fp)
    a98c:	0084303a 	nor	r2,zero,r2
    a990:	1007883a 	mov	r3,r2
    a994:	00800074 	movhi	r2,1
    a998:	10913704 	addi	r2,r2,17628
    a99c:	10800003 	ldbu	r2,0(r2)
    a9a0:	1884703a 	and	r2,r3,r2
    a9a4:	1007883a 	mov	r3,r2
    a9a8:	00800074 	movhi	r2,1
    a9ac:	10913704 	addi	r2,r2,17628
    a9b0:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    a9b4:	00800074 	movhi	r2,1
    a9b8:	10913704 	addi	r2,r2,17628
    a9bc:	10c00003 	ldbu	r3,0(r2)
    a9c0:	e0bff783 	ldbu	r2,-34(fp)
    a9c4:	1884b03a 	or	r2,r3,r2
    a9c8:	1007883a 	mov	r3,r2
    a9cc:	00800074 	movhi	r2,1
    a9d0:	10913704 	addi	r2,r2,17628
    a9d4:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
    a9d8:	e0fff703 	ldbu	r3,-36(fp)
    a9dc:	e13ff703 	ldbu	r4,-36(fp)
    a9e0:	00800074 	movhi	r2,1
    a9e4:	10913744 	addi	r2,r2,17629
    a9e8:	1105883a 	add	r2,r2,r4
    a9ec:	11000003 	ldbu	r4,0(r2)
    a9f0:	e0bff7c3 	ldbu	r2,-33(fp)
    a9f4:	2084b03a 	or	r2,r4,r2
    a9f8:	1009883a 	mov	r4,r2
    a9fc:	00800074 	movhi	r2,1
    aa00:	10913744 	addi	r2,r2,17629
    aa04:	10c5883a 	add	r2,r2,r3
    aa08:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    aa0c:	e0bff617 	ldw	r2,-40(fp)
    aa10:	10800717 	ldw	r2,28(r2)
    aa14:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
    aa18:	e0bff317 	ldw	r2,-52(fp)
    aa1c:	10003326 	beq	r2,zero,aaec <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    aa20:	e0bff803 	ldbu	r2,-32(fp)
    aa24:	e0fff803 	ldbu	r3,-32(fp)
    aa28:	e13ff317 	ldw	r4,-52(fp)
    aa2c:	20c7883a 	add	r3,r4,r3
    aa30:	18c00204 	addi	r3,r3,8
    aa34:	18c000c3 	ldbu	r3,3(r3)
    aa38:	1809883a 	mov	r4,r3
    aa3c:	e0fff883 	ldbu	r3,-30(fp)
    aa40:	00c6303a 	nor	r3,zero,r3
    aa44:	20c6703a 	and	r3,r4,r3
    aa48:	1809883a 	mov	r4,r3
    aa4c:	e0fff317 	ldw	r3,-52(fp)
    aa50:	1885883a 	add	r2,r3,r2
    aa54:	10800204 	addi	r2,r2,8
    aa58:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    aa5c:	e0bff803 	ldbu	r2,-32(fp)
    aa60:	e0fff317 	ldw	r3,-52(fp)
    aa64:	1885883a 	add	r2,r3,r2
    aa68:	10800204 	addi	r2,r2,8
    aa6c:	108000c3 	ldbu	r2,3(r2)
    aa70:	10803fcc 	andi	r2,r2,255
    aa74:	1000091e 	bne	r2,zero,aa9c <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
    aa78:	e0bff317 	ldw	r2,-52(fp)
    aa7c:	10800283 	ldbu	r2,10(r2)
    aa80:	1007883a 	mov	r3,r2
    aa84:	e0bff843 	ldbu	r2,-31(fp)
    aa88:	0084303a 	nor	r2,zero,r2
    aa8c:	1884703a 	and	r2,r3,r2
    aa90:	1007883a 	mov	r3,r2
    aa94:	e0bff317 	ldw	r2,-52(fp)
    aa98:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    aa9c:	e0bff317 	ldw	r2,-52(fp)
    aaa0:	10c00283 	ldbu	r3,10(r2)
    aaa4:	e0bff783 	ldbu	r2,-34(fp)
    aaa8:	1884b03a 	or	r2,r3,r2
    aaac:	1007883a 	mov	r3,r2
    aab0:	e0bff317 	ldw	r2,-52(fp)
    aab4:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    aab8:	e0bff703 	ldbu	r2,-36(fp)
    aabc:	e0fff703 	ldbu	r3,-36(fp)
    aac0:	e13ff317 	ldw	r4,-52(fp)
    aac4:	20c7883a 	add	r3,r4,r3
    aac8:	18c00204 	addi	r3,r3,8
    aacc:	190000c3 	ldbu	r4,3(r3)
    aad0:	e0fff7c3 	ldbu	r3,-33(fp)
    aad4:	20c6b03a 	or	r3,r4,r3
    aad8:	1809883a 	mov	r4,r3
    aadc:	e0fff317 	ldw	r3,-52(fp)
    aae0:	1885883a 	add	r2,r3,r2
    aae4:	10800204 	addi	r2,r2,8
    aae8:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    aaec:	e0bff617 	ldw	r2,-40(fp)
    aaf0:	10800817 	ldw	r2,32(r2)
    aaf4:	10004226 	beq	r2,zero,ac00 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
    aaf8:	e0bff617 	ldw	r2,-40(fp)
    aafc:	10800817 	ldw	r2,32(r2)
    ab00:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
    ab04:	e0bff417 	ldw	r2,-48(fp)
    ab08:	10800017 	ldw	r2,0(r2)
    ab0c:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
    ab10:	00003906 	br	abf8 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    ab14:	e0bff803 	ldbu	r2,-32(fp)
    ab18:	e0fff803 	ldbu	r3,-32(fp)
    ab1c:	e13ff317 	ldw	r4,-52(fp)
    ab20:	20c7883a 	add	r3,r4,r3
    ab24:	18c00204 	addi	r3,r3,8
    ab28:	18c000c3 	ldbu	r3,3(r3)
    ab2c:	1809883a 	mov	r4,r3
    ab30:	e0fff883 	ldbu	r3,-30(fp)
    ab34:	00c6303a 	nor	r3,zero,r3
    ab38:	20c6703a 	and	r3,r4,r3
    ab3c:	1809883a 	mov	r4,r3
    ab40:	e0fff317 	ldw	r3,-52(fp)
    ab44:	1885883a 	add	r2,r3,r2
    ab48:	10800204 	addi	r2,r2,8
    ab4c:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    ab50:	e0bff803 	ldbu	r2,-32(fp)
    ab54:	e0fff317 	ldw	r3,-52(fp)
    ab58:	1885883a 	add	r2,r3,r2
    ab5c:	10800204 	addi	r2,r2,8
    ab60:	108000c3 	ldbu	r2,3(r2)
    ab64:	10803fcc 	andi	r2,r2,255
    ab68:	1000091e 	bne	r2,zero,ab90 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
    ab6c:	e0bff317 	ldw	r2,-52(fp)
    ab70:	10800283 	ldbu	r2,10(r2)
    ab74:	1007883a 	mov	r3,r2
    ab78:	e0bff843 	ldbu	r2,-31(fp)
    ab7c:	0084303a 	nor	r2,zero,r2
    ab80:	1884703a 	and	r2,r3,r2
    ab84:	1007883a 	mov	r3,r2
    ab88:	e0bff317 	ldw	r2,-52(fp)
    ab8c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    ab90:	e0bff317 	ldw	r2,-52(fp)
    ab94:	10c00283 	ldbu	r3,10(r2)
    ab98:	e0bff783 	ldbu	r2,-34(fp)
    ab9c:	1884b03a 	or	r2,r3,r2
    aba0:	1007883a 	mov	r3,r2
    aba4:	e0bff317 	ldw	r2,-52(fp)
    aba8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    abac:	e0bff703 	ldbu	r2,-36(fp)
    abb0:	e0fff703 	ldbu	r3,-36(fp)
    abb4:	e13ff317 	ldw	r4,-52(fp)
    abb8:	20c7883a 	add	r3,r4,r3
    abbc:	18c00204 	addi	r3,r3,8
    abc0:	190000c3 	ldbu	r4,3(r3)
    abc4:	e0fff7c3 	ldbu	r3,-33(fp)
    abc8:	20c6b03a 	or	r3,r4,r3
    abcc:	1809883a 	mov	r4,r3
    abd0:	e0fff317 	ldw	r3,-52(fp)
    abd4:	1885883a 	add	r2,r3,r2
    abd8:	10800204 	addi	r2,r2,8
    abdc:	110000c5 	stb	r4,3(r2)
            pevents++;
    abe0:	e0bff417 	ldw	r2,-48(fp)
    abe4:	10800104 	addi	r2,r2,4
    abe8:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
    abec:	e0bff417 	ldw	r2,-48(fp)
    abf0:	10800017 	ldw	r2,0(r2)
    abf4:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
    abf8:	e0bff317 	ldw	r2,-52(fp)
    abfc:	103fc51e 	bne	r2,zero,ab14 <__alt_mem_Flash_flash_data+0xf400ab14>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    ac00:	e0bff617 	ldw	r2,-40(fp)
    ac04:	e0ffff03 	ldbu	r3,-4(fp)
    ac08:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
    ac0c:	e0bff617 	ldw	r2,-40(fp)
    ac10:	e0fff703 	ldbu	r3,-36(fp)
    ac14:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
    ac18:	e0bff617 	ldw	r2,-40(fp)
    ac1c:	e0fff743 	ldbu	r3,-35(fp)
    ac20:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
    ac24:	e0bff617 	ldw	r2,-40(fp)
    ac28:	e0fff783 	ldbu	r3,-34(fp)
    ac2c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
    ac30:	e0bff617 	ldw	r2,-40(fp)
    ac34:	e0fff7c3 	ldbu	r3,-33(fp)
    ac38:	10c00d45 	stb	r3,53(r2)
    ac3c:	e0bff517 	ldw	r2,-44(fp)
    ac40:	e0bffd15 	stw	r2,-12(fp)
    ac44:	e0bffd17 	ldw	r2,-12(fp)
    ac48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    ac4c:	00800074 	movhi	r2,1
    ac50:	10912b44 	addi	r2,r2,17581
    ac54:	10800003 	ldbu	r2,0(r2)
    ac58:	10803fcc 	andi	r2,r2,255
    ac5c:	10800058 	cmpnei	r2,r2,1
    ac60:	1000011e 	bne	r2,zero,ac68 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
    ac64:	00062240 	call	6224 <OS_Sched>
    }
    return (OS_ERR_NONE);
    ac68:	0005883a 	mov	r2,zero
}
    ac6c:	e037883a 	mov	sp,fp
    ac70:	dfc00117 	ldw	ra,4(sp)
    ac74:	df000017 	ldw	fp,0(sp)
    ac78:	dec00204 	addi	sp,sp,8
    ac7c:	f800283a 	ret

0000ac80 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    ac80:	deffee04 	addi	sp,sp,-72
    ac84:	dfc01115 	stw	ra,68(sp)
    ac88:	df001015 	stw	fp,64(sp)
    ac8c:	df001004 	addi	fp,sp,64
    ac90:	e13ffc15 	stw	r4,-16(fp)
    ac94:	e17ffd15 	stw	r5,-12(fp)
    ac98:	e1bffe15 	stw	r6,-8(fp)
    ac9c:	3805883a 	mov	r2,r7
    aca0:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    aca4:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    aca8:	e0bfff03 	ldbu	r2,-4(fp)
    acac:	10800570 	cmpltui	r2,r2,21
    acb0:	1000021e 	bne	r2,zero,acbc <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    acb4:	00800a84 	movi	r2,42
    acb8:	00005b06 	br	ae28 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    acbc:	0005303a 	rdctl	r2,status
    acc0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    acc4:	e0fff617 	ldw	r3,-40(fp)
    acc8:	00bfff84 	movi	r2,-2
    accc:	1884703a 	and	r2,r3,r2
    acd0:	1001703a 	wrctl	status,r2
  
  return context;
    acd4:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    acd8:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    acdc:	00800074 	movhi	r2,1
    ace0:	10913904 	addi	r2,r2,17636
    ace4:	10800003 	ldbu	r2,0(r2)
    ace8:	10803fcc 	andi	r2,r2,255
    acec:	10000626 	beq	r2,zero,ad08 <OSTaskCreate+0x88>
    acf0:	e0bff317 	ldw	r2,-52(fp)
    acf4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    acf8:	e0bff717 	ldw	r2,-36(fp)
    acfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    ad00:	00800f04 	movi	r2,60
    ad04:	00004806 	br	ae28 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    ad08:	e0ffff03 	ldbu	r3,-4(fp)
    ad0c:	008000b4 	movhi	r2,2
    ad10:	1085c104 	addi	r2,r2,5892
    ad14:	18c7883a 	add	r3,r3,r3
    ad18:	18c7883a 	add	r3,r3,r3
    ad1c:	10c5883a 	add	r2,r2,r3
    ad20:	10800017 	ldw	r2,0(r2)
    ad24:	10003b1e 	bne	r2,zero,ae14 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    ad28:	e0ffff03 	ldbu	r3,-4(fp)
    ad2c:	008000b4 	movhi	r2,2
    ad30:	1085c104 	addi	r2,r2,5892
    ad34:	18c7883a 	add	r3,r3,r3
    ad38:	18c7883a 	add	r3,r3,r3
    ad3c:	10c5883a 	add	r2,r2,r3
    ad40:	00c00044 	movi	r3,1
    ad44:	10c00015 	stw	r3,0(r2)
    ad48:	e0bff317 	ldw	r2,-52(fp)
    ad4c:	e0bff815 	stw	r2,-32(fp)
    ad50:	e0bff817 	ldw	r2,-32(fp)
    ad54:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    ad58:	e13ffc17 	ldw	r4,-16(fp)
    ad5c:	e17ffd17 	ldw	r5,-12(fp)
    ad60:	e1bffe17 	ldw	r6,-8(fp)
    ad64:	000f883a 	mov	r7,zero
    ad68:	000f9740 	call	f974 <OSTaskStkInit>
    ad6c:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    ad70:	e0bfff03 	ldbu	r2,-4(fp)
    ad74:	d8000015 	stw	zero,0(sp)
    ad78:	d8000115 	stw	zero,4(sp)
    ad7c:	d8000215 	stw	zero,8(sp)
    ad80:	1009883a 	mov	r4,r2
    ad84:	e17ff417 	ldw	r5,-48(fp)
    ad88:	000d883a 	mov	r6,zero
    ad8c:	000f883a 	mov	r7,zero
    ad90:	00066280 	call	6628 <OS_TCBInit>
    ad94:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
    ad98:	e0bff503 	ldbu	r2,-44(fp)
    ad9c:	1000081e 	bne	r2,zero,adc0 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    ada0:	00800074 	movhi	r2,1
    ada4:	10912b44 	addi	r2,r2,17581
    ada8:	10800003 	ldbu	r2,0(r2)
    adac:	10803fcc 	andi	r2,r2,255
    adb0:	10800058 	cmpnei	r2,r2,1
    adb4:	1000151e 	bne	r2,zero,ae0c <OSTaskCreate+0x18c>
                OS_Sched();
    adb8:	00062240 	call	6224 <OS_Sched>
    adbc:	00001306 	br	ae0c <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    adc0:	0005303a 	rdctl	r2,status
    adc4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    adc8:	e0fff917 	ldw	r3,-28(fp)
    adcc:	00bfff84 	movi	r2,-2
    add0:	1884703a 	and	r2,r3,r2
    add4:	1001703a 	wrctl	status,r2
  
  return context;
    add8:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    addc:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    ade0:	e0ffff03 	ldbu	r3,-4(fp)
    ade4:	008000b4 	movhi	r2,2
    ade8:	1085c104 	addi	r2,r2,5892
    adec:	18c7883a 	add	r3,r3,r3
    adf0:	18c7883a 	add	r3,r3,r3
    adf4:	10c5883a 	add	r2,r2,r3
    adf8:	10000015 	stw	zero,0(r2)
    adfc:	e0bff317 	ldw	r2,-52(fp)
    ae00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ae04:	e0bffa17 	ldw	r2,-24(fp)
    ae08:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    ae0c:	e0bff503 	ldbu	r2,-44(fp)
    ae10:	00000506 	br	ae28 <OSTaskCreate+0x1a8>
    ae14:	e0bff317 	ldw	r2,-52(fp)
    ae18:	e0bffb15 	stw	r2,-20(fp)
    ae1c:	e0bffb17 	ldw	r2,-20(fp)
    ae20:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    ae24:	00800a04 	movi	r2,40
}
    ae28:	e037883a 	mov	sp,fp
    ae2c:	dfc00117 	ldw	ra,4(sp)
    ae30:	df000017 	ldw	fp,0(sp)
    ae34:	dec00204 	addi	sp,sp,8
    ae38:	f800283a 	ret

0000ae3c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    ae3c:	deffec04 	addi	sp,sp,-80
    ae40:	dfc01315 	stw	ra,76(sp)
    ae44:	df001215 	stw	fp,72(sp)
    ae48:	df001204 	addi	fp,sp,72
    ae4c:	e13ffa15 	stw	r4,-24(fp)
    ae50:	e17ffb15 	stw	r5,-20(fp)
    ae54:	e1bffc15 	stw	r6,-16(fp)
    ae58:	3809883a 	mov	r4,r7
    ae5c:	e0c00217 	ldw	r3,8(fp)
    ae60:	e0800617 	ldw	r2,24(fp)
    ae64:	e13ffd05 	stb	r4,-12(fp)
    ae68:	e0fffe0d 	sth	r3,-8(fp)
    ae6c:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    ae70:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    ae74:	e0bffd03 	ldbu	r2,-12(fp)
    ae78:	10800570 	cmpltui	r2,r2,21
    ae7c:	1000021e 	bne	r2,zero,ae88 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    ae80:	00800a84 	movi	r2,42
    ae84:	00006306 	br	b014 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ae88:	0005303a 	rdctl	r2,status
    ae8c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ae90:	e0fff417 	ldw	r3,-48(fp)
    ae94:	00bfff84 	movi	r2,-2
    ae98:	1884703a 	and	r2,r3,r2
    ae9c:	1001703a 	wrctl	status,r2
  
  return context;
    aea0:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    aea4:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    aea8:	00800074 	movhi	r2,1
    aeac:	10913904 	addi	r2,r2,17636
    aeb0:	10800003 	ldbu	r2,0(r2)
    aeb4:	10803fcc 	andi	r2,r2,255
    aeb8:	10000626 	beq	r2,zero,aed4 <OSTaskCreateExt+0x98>
    aebc:	e0bff117 	ldw	r2,-60(fp)
    aec0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    aec4:	e0bff517 	ldw	r2,-44(fp)
    aec8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    aecc:	00800f04 	movi	r2,60
    aed0:	00005006 	br	b014 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    aed4:	e0fffd03 	ldbu	r3,-12(fp)
    aed8:	008000b4 	movhi	r2,2
    aedc:	1085c104 	addi	r2,r2,5892
    aee0:	18c7883a 	add	r3,r3,r3
    aee4:	18c7883a 	add	r3,r3,r3
    aee8:	10c5883a 	add	r2,r2,r3
    aeec:	10800017 	ldw	r2,0(r2)
    aef0:	1000431e 	bne	r2,zero,b000 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    aef4:	e0fffd03 	ldbu	r3,-12(fp)
    aef8:	008000b4 	movhi	r2,2
    aefc:	1085c104 	addi	r2,r2,5892
    af00:	18c7883a 	add	r3,r3,r3
    af04:	18c7883a 	add	r3,r3,r3
    af08:	10c5883a 	add	r2,r2,r3
    af0c:	00c00044 	movi	r3,1
    af10:	10c00015 	stw	r3,0(r2)
    af14:	e0bff117 	ldw	r2,-60(fp)
    af18:	e0bff615 	stw	r2,-40(fp)
    af1c:	e0bff617 	ldw	r2,-40(fp)
    af20:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    af24:	e0bfff0b 	ldhu	r2,-4(fp)
    af28:	e1000317 	ldw	r4,12(fp)
    af2c:	e1400417 	ldw	r5,16(fp)
    af30:	100d883a 	mov	r6,r2
    af34:	000bfc80 	call	bfc8 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    af38:	e0bfff0b 	ldhu	r2,-4(fp)
    af3c:	e13ffa17 	ldw	r4,-24(fp)
    af40:	e17ffb17 	ldw	r5,-20(fp)
    af44:	e1bffc17 	ldw	r6,-16(fp)
    af48:	100f883a 	mov	r7,r2
    af4c:	000f9740 	call	f974 <OSTaskStkInit>
    af50:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    af54:	e13ffd03 	ldbu	r4,-12(fp)
    af58:	e1fffe0b 	ldhu	r7,-8(fp)
    af5c:	e0bfff0b 	ldhu	r2,-4(fp)
    af60:	e0c00417 	ldw	r3,16(fp)
    af64:	d8c00015 	stw	r3,0(sp)
    af68:	e0c00517 	ldw	r3,20(fp)
    af6c:	d8c00115 	stw	r3,4(sp)
    af70:	d8800215 	stw	r2,8(sp)
    af74:	e17ff217 	ldw	r5,-56(fp)
    af78:	e1800317 	ldw	r6,12(fp)
    af7c:	00066280 	call	6628 <OS_TCBInit>
    af80:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
    af84:	e0bff303 	ldbu	r2,-52(fp)
    af88:	1000081e 	bne	r2,zero,afac <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    af8c:	00800074 	movhi	r2,1
    af90:	10912b44 	addi	r2,r2,17581
    af94:	10800003 	ldbu	r2,0(r2)
    af98:	10803fcc 	andi	r2,r2,255
    af9c:	10800058 	cmpnei	r2,r2,1
    afa0:	1000151e 	bne	r2,zero,aff8 <OSTaskCreateExt+0x1bc>
                OS_Sched();
    afa4:	00062240 	call	6224 <OS_Sched>
    afa8:	00001306 	br	aff8 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    afac:	0005303a 	rdctl	r2,status
    afb0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    afb4:	e0fff717 	ldw	r3,-36(fp)
    afb8:	00bfff84 	movi	r2,-2
    afbc:	1884703a 	and	r2,r3,r2
    afc0:	1001703a 	wrctl	status,r2
  
  return context;
    afc4:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    afc8:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    afcc:	e0fffd03 	ldbu	r3,-12(fp)
    afd0:	008000b4 	movhi	r2,2
    afd4:	1085c104 	addi	r2,r2,5892
    afd8:	18c7883a 	add	r3,r3,r3
    afdc:	18c7883a 	add	r3,r3,r3
    afe0:	10c5883a 	add	r2,r2,r3
    afe4:	10000015 	stw	zero,0(r2)
    afe8:	e0bff117 	ldw	r2,-60(fp)
    afec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    aff0:	e0bff817 	ldw	r2,-32(fp)
    aff4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    aff8:	e0bff303 	ldbu	r2,-52(fp)
    affc:	00000506 	br	b014 <OSTaskCreateExt+0x1d8>
    b000:	e0bff117 	ldw	r2,-60(fp)
    b004:	e0bff915 	stw	r2,-28(fp)
    b008:	e0bff917 	ldw	r2,-28(fp)
    b00c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    b010:	00800a04 	movi	r2,40
}
    b014:	e037883a 	mov	sp,fp
    b018:	dfc00117 	ldw	ra,4(sp)
    b01c:	df000017 	ldw	fp,0(sp)
    b020:	dec00204 	addi	sp,sp,8
    b024:	f800283a 	ret

0000b028 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    b028:	defff404 	addi	sp,sp,-48
    b02c:	dfc00b15 	stw	ra,44(sp)
    b030:	df000a15 	stw	fp,40(sp)
    b034:	df000a04 	addi	fp,sp,40
    b038:	2005883a 	mov	r2,r4
    b03c:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    b040:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    b044:	00800074 	movhi	r2,1
    b048:	10913904 	addi	r2,r2,17636
    b04c:	10800003 	ldbu	r2,0(r2)
    b050:	10803fcc 	andi	r2,r2,255
    b054:	10000226 	beq	r2,zero,b060 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
    b058:	00801004 	movi	r2,64
    b05c:	0000e506 	br	b3f4 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    b060:	e0bfff03 	ldbu	r2,-4(fp)
    b064:	10800518 	cmpnei	r2,r2,20
    b068:	1000021e 	bne	r2,zero,b074 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
    b06c:	00800f84 	movi	r2,62
    b070:	0000e006 	br	b3f4 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    b074:	e0bfff03 	ldbu	r2,-4(fp)
    b078:	10800530 	cmpltui	r2,r2,20
    b07c:	1000051e 	bne	r2,zero,b094 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
    b080:	e0bfff03 	ldbu	r2,-4(fp)
    b084:	10803fe0 	cmpeqi	r2,r2,255
    b088:	1000021e 	bne	r2,zero,b094 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
    b08c:	00800a84 	movi	r2,42
    b090:	0000d806 	br	b3f4 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b094:	0005303a 	rdctl	r2,status
    b098:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b09c:	e0fff917 	ldw	r3,-28(fp)
    b0a0:	00bfff84 	movi	r2,-2
    b0a4:	1884703a 	and	r2,r3,r2
    b0a8:	1001703a 	wrctl	status,r2
  
  return context;
    b0ac:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    b0b0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    b0b4:	e0bfff03 	ldbu	r2,-4(fp)
    b0b8:	10803fd8 	cmpnei	r2,r2,255
    b0bc:	1000051e 	bne	r2,zero,b0d4 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    b0c0:	00800074 	movhi	r2,1
    b0c4:	10913a04 	addi	r2,r2,17640
    b0c8:	10800017 	ldw	r2,0(r2)
    b0cc:	10800c83 	ldbu	r2,50(r2)
    b0d0:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    b0d4:	e0ffff03 	ldbu	r3,-4(fp)
    b0d8:	008000b4 	movhi	r2,2
    b0dc:	1085c104 	addi	r2,r2,5892
    b0e0:	18c7883a 	add	r3,r3,r3
    b0e4:	18c7883a 	add	r3,r3,r3
    b0e8:	10c5883a 	add	r2,r2,r3
    b0ec:	10800017 	ldw	r2,0(r2)
    b0f0:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    b0f4:	e0bff717 	ldw	r2,-36(fp)
    b0f8:	1000061e 	bne	r2,zero,b114 <OSTaskDel+0xec>
    b0fc:	e0bff617 	ldw	r2,-40(fp)
    b100:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b104:	e0bffa17 	ldw	r2,-24(fp)
    b108:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    b10c:	008010c4 	movi	r2,67
    b110:	0000b806 	br	b3f4 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    b114:	e0bff717 	ldw	r2,-36(fp)
    b118:	10800058 	cmpnei	r2,r2,1
    b11c:	1000061e 	bne	r2,zero,b138 <OSTaskDel+0x110>
    b120:	e0bff617 	ldw	r2,-40(fp)
    b124:	e0bffb15 	stw	r2,-20(fp)
    b128:	e0bffb17 	ldw	r2,-20(fp)
    b12c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    b130:	00800f44 	movi	r2,61
    b134:	0000af06 	br	b3f4 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    b138:	e0bff717 	ldw	r2,-36(fp)
    b13c:	10800d03 	ldbu	r2,52(r2)
    b140:	10c03fcc 	andi	r3,r2,255
    b144:	e0bff717 	ldw	r2,-36(fp)
    b148:	10800d03 	ldbu	r2,52(r2)
    b14c:	11003fcc 	andi	r4,r2,255
    b150:	00800074 	movhi	r2,1
    b154:	10913744 	addi	r2,r2,17629
    b158:	1105883a 	add	r2,r2,r4
    b15c:	10800003 	ldbu	r2,0(r2)
    b160:	1009883a 	mov	r4,r2
    b164:	e0bff717 	ldw	r2,-36(fp)
    b168:	10800d43 	ldbu	r2,53(r2)
    b16c:	0084303a 	nor	r2,zero,r2
    b170:	2084703a 	and	r2,r4,r2
    b174:	1009883a 	mov	r4,r2
    b178:	00800074 	movhi	r2,1
    b17c:	10913744 	addi	r2,r2,17629
    b180:	10c5883a 	add	r2,r2,r3
    b184:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    b188:	e0bff717 	ldw	r2,-36(fp)
    b18c:	10800d03 	ldbu	r2,52(r2)
    b190:	10c03fcc 	andi	r3,r2,255
    b194:	00800074 	movhi	r2,1
    b198:	10913744 	addi	r2,r2,17629
    b19c:	10c5883a 	add	r2,r2,r3
    b1a0:	10800003 	ldbu	r2,0(r2)
    b1a4:	10803fcc 	andi	r2,r2,255
    b1a8:	10000c1e 	bne	r2,zero,b1dc <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    b1ac:	e0bff717 	ldw	r2,-36(fp)
    b1b0:	10800d83 	ldbu	r2,54(r2)
    b1b4:	0084303a 	nor	r2,zero,r2
    b1b8:	1007883a 	mov	r3,r2
    b1bc:	00800074 	movhi	r2,1
    b1c0:	10913704 	addi	r2,r2,17628
    b1c4:	10800003 	ldbu	r2,0(r2)
    b1c8:	1884703a 	and	r2,r3,r2
    b1cc:	1007883a 	mov	r3,r2
    b1d0:	00800074 	movhi	r2,1
    b1d4:	10913704 	addi	r2,r2,17628
    b1d8:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    b1dc:	e0bff717 	ldw	r2,-36(fp)
    b1e0:	10800717 	ldw	r2,28(r2)
    b1e4:	10000526 	beq	r2,zero,b1fc <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    b1e8:	e0bff717 	ldw	r2,-36(fp)
    b1ec:	10800717 	ldw	r2,28(r2)
    b1f0:	e13ff717 	ldw	r4,-36(fp)
    b1f4:	100b883a 	mov	r5,r2
    b1f8:	0005bfc0 	call	5bfc <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    b1fc:	e0bff717 	ldw	r2,-36(fp)
    b200:	10800817 	ldw	r2,32(r2)
    b204:	10000526 	beq	r2,zero,b21c <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    b208:	e0bff717 	ldw	r2,-36(fp)
    b20c:	10800817 	ldw	r2,32(r2)
    b210:	e13ff717 	ldw	r4,-36(fp)
    b214:	100b883a 	mov	r5,r2
    b218:	0005cb00 	call	5cb0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    b21c:	e0bff717 	ldw	r2,-36(fp)
    b220:	10800a17 	ldw	r2,40(r2)
    b224:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    b228:	e0bff817 	ldw	r2,-32(fp)
    b22c:	10000226 	beq	r2,zero,b238 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    b230:	e13ff817 	ldw	r4,-32(fp)
    b234:	00082040 	call	8204 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    b238:	e0bff717 	ldw	r2,-36(fp)
    b23c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    b240:	e0bff717 	ldw	r2,-36(fp)
    b244:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    b248:	e0bff717 	ldw	r2,-36(fp)
    b24c:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    b250:	00800074 	movhi	r2,1
    b254:	10912b04 	addi	r2,r2,17580
    b258:	10800003 	ldbu	r2,0(r2)
    b25c:	10803fcc 	andi	r2,r2,255
    b260:	10803fe0 	cmpeqi	r2,r2,255
    b264:	1000081e 	bne	r2,zero,b288 <OSTaskDel+0x260>
        OSLockNesting++;
    b268:	00800074 	movhi	r2,1
    b26c:	10912b04 	addi	r2,r2,17580
    b270:	10800003 	ldbu	r2,0(r2)
    b274:	10800044 	addi	r2,r2,1
    b278:	1007883a 	mov	r3,r2
    b27c:	00800074 	movhi	r2,1
    b280:	10912b04 	addi	r2,r2,17580
    b284:	10c00005 	stb	r3,0(r2)
    b288:	e0bff617 	ldw	r2,-40(fp)
    b28c:	e0bffc15 	stw	r2,-16(fp)
    b290:	e0bffc17 	ldw	r2,-16(fp)
    b294:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    b298:	00057f00 	call	57f0 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b29c:	0005303a 	rdctl	r2,status
    b2a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b2a4:	e0fffd17 	ldw	r3,-12(fp)
    b2a8:	00bfff84 	movi	r2,-2
    b2ac:	1884703a 	and	r2,r3,r2
    b2b0:	1001703a 	wrctl	status,r2
  
  return context;
    b2b4:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    b2b8:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    b2bc:	00800074 	movhi	r2,1
    b2c0:	10912b04 	addi	r2,r2,17580
    b2c4:	10800003 	ldbu	r2,0(r2)
    b2c8:	10803fcc 	andi	r2,r2,255
    b2cc:	10000826 	beq	r2,zero,b2f0 <OSTaskDel+0x2c8>
        OSLockNesting--;
    b2d0:	00800074 	movhi	r2,1
    b2d4:	10912b04 	addi	r2,r2,17580
    b2d8:	10800003 	ldbu	r2,0(r2)
    b2dc:	10bfffc4 	addi	r2,r2,-1
    b2e0:	1007883a 	mov	r3,r2
    b2e4:	00800074 	movhi	r2,1
    b2e8:	10912b04 	addi	r2,r2,17580
    b2ec:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    b2f0:	e13ff717 	ldw	r4,-36(fp)
    b2f4:	000faf00 	call	faf0 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    b2f8:	00800074 	movhi	r2,1
    b2fc:	10913344 	addi	r2,r2,17613
    b300:	10800003 	ldbu	r2,0(r2)
    b304:	10bfffc4 	addi	r2,r2,-1
    b308:	1007883a 	mov	r3,r2
    b30c:	00800074 	movhi	r2,1
    b310:	10913344 	addi	r2,r2,17613
    b314:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    b318:	e0ffff03 	ldbu	r3,-4(fp)
    b31c:	008000b4 	movhi	r2,2
    b320:	1085c104 	addi	r2,r2,5892
    b324:	18c7883a 	add	r3,r3,r3
    b328:	18c7883a 	add	r3,r3,r3
    b32c:	10c5883a 	add	r2,r2,r3
    b330:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    b334:	e0bff717 	ldw	r2,-36(fp)
    b338:	10800617 	ldw	r2,24(r2)
    b33c:	1000091e 	bne	r2,zero,b364 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    b340:	e0bff717 	ldw	r2,-36(fp)
    b344:	10800517 	ldw	r2,20(r2)
    b348:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    b34c:	e0bff717 	ldw	r2,-36(fp)
    b350:	10c00517 	ldw	r3,20(r2)
    b354:	00800074 	movhi	r2,1
    b358:	10912e04 	addi	r2,r2,17592
    b35c:	10c00015 	stw	r3,0(r2)
    b360:	00000a06 	br	b38c <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    b364:	e0bff717 	ldw	r2,-36(fp)
    b368:	10800617 	ldw	r2,24(r2)
    b36c:	e0fff717 	ldw	r3,-36(fp)
    b370:	18c00517 	ldw	r3,20(r3)
    b374:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    b378:	e0bff717 	ldw	r2,-36(fp)
    b37c:	10800517 	ldw	r2,20(r2)
    b380:	e0fff717 	ldw	r3,-36(fp)
    b384:	18c00617 	ldw	r3,24(r3)
    b388:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    b38c:	00800074 	movhi	r2,1
    b390:	10913204 	addi	r2,r2,17608
    b394:	10c00017 	ldw	r3,0(r2)
    b398:	e0bff717 	ldw	r2,-36(fp)
    b39c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    b3a0:	00800074 	movhi	r2,1
    b3a4:	10913204 	addi	r2,r2,17608
    b3a8:	e0fff717 	ldw	r3,-36(fp)
    b3ac:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    b3b0:	e0bff717 	ldw	r2,-36(fp)
    b3b4:	00c00fc4 	movi	r3,63
    b3b8:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    b3bc:	e0bff717 	ldw	r2,-36(fp)
    b3c0:	10001345 	stb	zero,77(r2)
    b3c4:	e0bff617 	ldw	r2,-40(fp)
    b3c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b3cc:	e0bffe17 	ldw	r2,-8(fp)
    b3d0:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    b3d4:	00800074 	movhi	r2,1
    b3d8:	10912b44 	addi	r2,r2,17581
    b3dc:	10800003 	ldbu	r2,0(r2)
    b3e0:	10803fcc 	andi	r2,r2,255
    b3e4:	10800058 	cmpnei	r2,r2,1
    b3e8:	1000011e 	bne	r2,zero,b3f0 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
    b3ec:	00062240 	call	6224 <OS_Sched>
    }
    return (OS_ERR_NONE);
    b3f0:	0005883a 	mov	r2,zero
}
    b3f4:	e037883a 	mov	sp,fp
    b3f8:	dfc00117 	ldw	ra,4(sp)
    b3fc:	df000017 	ldw	fp,0(sp)
    b400:	dec00204 	addi	sp,sp,8
    b404:	f800283a 	ret

0000b408 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    b408:	defff504 	addi	sp,sp,-44
    b40c:	df000a15 	stw	fp,40(sp)
    b410:	df000a04 	addi	fp,sp,40
    b414:	2005883a 	mov	r2,r4
    b418:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b41c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    b420:	e0bfff03 	ldbu	r2,-4(fp)
    b424:	10800518 	cmpnei	r2,r2,20
    b428:	1000021e 	bne	r2,zero,b434 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    b42c:	00800f84 	movi	r2,62
    b430:	00004706 	br	b550 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    b434:	e0bfff03 	ldbu	r2,-4(fp)
    b438:	10800530 	cmpltui	r2,r2,20
    b43c:	1000051e 	bne	r2,zero,b454 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    b440:	e0bfff03 	ldbu	r2,-4(fp)
    b444:	10803fe0 	cmpeqi	r2,r2,255
    b448:	1000021e 	bne	r2,zero,b454 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    b44c:	00800a84 	movi	r2,42
    b450:	00003f06 	br	b550 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    b454:	e0bfff03 	ldbu	r2,-4(fp)
    b458:	10803fd8 	cmpnei	r2,r2,255
    b45c:	1000131e 	bne	r2,zero,b4ac <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b460:	0005303a 	rdctl	r2,status
    b464:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b468:	e0fff917 	ldw	r3,-28(fp)
    b46c:	00bfff84 	movi	r2,-2
    b470:	1884703a 	and	r2,r3,r2
    b474:	1001703a 	wrctl	status,r2
  
  return context;
    b478:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    b47c:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    b480:	00800074 	movhi	r2,1
    b484:	10913a04 	addi	r2,r2,17640
    b488:	10800017 	ldw	r2,0(r2)
    b48c:	10800dc3 	ldbu	r2,55(r2)
    b490:	e0bff705 	stb	r2,-36(fp)
    b494:	e0bff617 	ldw	r2,-40(fp)
    b498:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b49c:	e0bffa17 	ldw	r2,-24(fp)
    b4a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
    b4a4:	e0bff703 	ldbu	r2,-36(fp)
    b4a8:	00002906 	br	b550 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b4ac:	0005303a 	rdctl	r2,status
    b4b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b4b4:	e0fffb17 	ldw	r3,-20(fp)
    b4b8:	00bfff84 	movi	r2,-2
    b4bc:	1884703a 	and	r2,r3,r2
    b4c0:	1001703a 	wrctl	status,r2
  
  return context;
    b4c4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    b4c8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    b4cc:	e0ffff03 	ldbu	r3,-4(fp)
    b4d0:	008000b4 	movhi	r2,2
    b4d4:	1085c104 	addi	r2,r2,5892
    b4d8:	18c7883a 	add	r3,r3,r3
    b4dc:	18c7883a 	add	r3,r3,r3
    b4e0:	10c5883a 	add	r2,r2,r3
    b4e4:	10800017 	ldw	r2,0(r2)
    b4e8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    b4ec:	e0bff817 	ldw	r2,-32(fp)
    b4f0:	1000061e 	bne	r2,zero,b50c <OSTaskDelReq+0x104>
    b4f4:	e0bff617 	ldw	r2,-40(fp)
    b4f8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b4fc:	e0bffc17 	ldw	r2,-16(fp)
    b500:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    b504:	008010c4 	movi	r2,67
    b508:	00001106 	br	b550 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    b50c:	e0bff817 	ldw	r2,-32(fp)
    b510:	10800058 	cmpnei	r2,r2,1
    b514:	1000061e 	bne	r2,zero,b530 <OSTaskDelReq+0x128>
    b518:	e0bff617 	ldw	r2,-40(fp)
    b51c:	e0bffd15 	stw	r2,-12(fp)
    b520:	e0bffd17 	ldw	r2,-12(fp)
    b524:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    b528:	00800f44 	movi	r2,61
    b52c:	00000806 	br	b550 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    b530:	e0bff817 	ldw	r2,-32(fp)
    b534:	00c00fc4 	movi	r3,63
    b538:	10c00dc5 	stb	r3,55(r2)
    b53c:	e0bff617 	ldw	r2,-40(fp)
    b540:	e0bffe15 	stw	r2,-8(fp)
    b544:	e0bffe17 	ldw	r2,-8(fp)
    b548:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    b54c:	0005883a 	mov	r2,zero
}
    b550:	e037883a 	mov	sp,fp
    b554:	df000017 	ldw	fp,0(sp)
    b558:	dec00104 	addi	sp,sp,4
    b55c:	f800283a 	ret

0000b560 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    b560:	defff404 	addi	sp,sp,-48
    b564:	dfc00b15 	stw	ra,44(sp)
    b568:	df000a15 	stw	fp,40(sp)
    b56c:	df000a04 	addi	fp,sp,40
    b570:	2005883a 	mov	r2,r4
    b574:	e17ffe15 	stw	r5,-8(fp)
    b578:	e1bfff15 	stw	r6,-4(fp)
    b57c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    b580:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    b584:	e0bfff17 	ldw	r2,-4(fp)
    b588:	1000021e 	bne	r2,zero,b594 <OSTaskNameGet+0x34>
        return (0);
    b58c:	0005883a 	mov	r2,zero
    b590:	00005806 	br	b6f4 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    b594:	e0bffd03 	ldbu	r2,-12(fp)
    b598:	10800570 	cmpltui	r2,r2,21
    b59c:	1000081e 	bne	r2,zero,b5c0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    b5a0:	e0bffd03 	ldbu	r2,-12(fp)
    b5a4:	10803fe0 	cmpeqi	r2,r2,255
    b5a8:	1000051e 	bne	r2,zero,b5c0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    b5ac:	e0bfff17 	ldw	r2,-4(fp)
    b5b0:	00c00a84 	movi	r3,42
    b5b4:	10c00005 	stb	r3,0(r2)
            return (0);
    b5b8:	0005883a 	mov	r2,zero
    b5bc:	00004d06 	br	b6f4 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    b5c0:	e0bffe17 	ldw	r2,-8(fp)
    b5c4:	1000051e 	bne	r2,zero,b5dc <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    b5c8:	e0bfff17 	ldw	r2,-4(fp)
    b5cc:	00c00304 	movi	r3,12
    b5d0:	10c00005 	stb	r3,0(r2)
        return (0);
    b5d4:	0005883a 	mov	r2,zero
    b5d8:	00004606 	br	b6f4 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    b5dc:	00800074 	movhi	r2,1
    b5e0:	10913904 	addi	r2,r2,17636
    b5e4:	10800003 	ldbu	r2,0(r2)
    b5e8:	10803fcc 	andi	r2,r2,255
    b5ec:	10000526 	beq	r2,zero,b604 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
    b5f0:	e0bfff17 	ldw	r2,-4(fp)
    b5f4:	00c00444 	movi	r3,17
    b5f8:	10c00005 	stb	r3,0(r2)
        return (0);
    b5fc:	0005883a 	mov	r2,zero
    b600:	00003c06 	br	b6f4 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b604:	0005303a 	rdctl	r2,status
    b608:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b60c:	e0fff917 	ldw	r3,-28(fp)
    b610:	00bfff84 	movi	r2,-2
    b614:	1884703a 	and	r2,r3,r2
    b618:	1001703a 	wrctl	status,r2
  
  return context;
    b61c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    b620:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    b624:	e0bffd03 	ldbu	r2,-12(fp)
    b628:	10803fd8 	cmpnei	r2,r2,255
    b62c:	1000051e 	bne	r2,zero,b644 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
    b630:	00800074 	movhi	r2,1
    b634:	10913a04 	addi	r2,r2,17640
    b638:	10800017 	ldw	r2,0(r2)
    b63c:	10800c83 	ldbu	r2,50(r2)
    b640:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    b644:	e0fffd03 	ldbu	r3,-12(fp)
    b648:	008000b4 	movhi	r2,2
    b64c:	1085c104 	addi	r2,r2,5892
    b650:	18c7883a 	add	r3,r3,r3
    b654:	18c7883a 	add	r3,r3,r3
    b658:	10c5883a 	add	r2,r2,r3
    b65c:	10800017 	ldw	r2,0(r2)
    b660:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    b664:	e0bff717 	ldw	r2,-36(fp)
    b668:	1000091e 	bne	r2,zero,b690 <OSTaskNameGet+0x130>
    b66c:	e0bff617 	ldw	r2,-40(fp)
    b670:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b674:	e0bffa17 	ldw	r2,-24(fp)
    b678:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    b67c:	e0bfff17 	ldw	r2,-4(fp)
    b680:	00c010c4 	movi	r3,67
    b684:	10c00005 	stb	r3,0(r2)
        return (0);
    b688:	0005883a 	mov	r2,zero
    b68c:	00001906 	br	b6f4 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    b690:	e0bff717 	ldw	r2,-36(fp)
    b694:	10800058 	cmpnei	r2,r2,1
    b698:	1000091e 	bne	r2,zero,b6c0 <OSTaskNameGet+0x160>
    b69c:	e0bff617 	ldw	r2,-40(fp)
    b6a0:	e0bffb15 	stw	r2,-20(fp)
    b6a4:	e0bffb17 	ldw	r2,-20(fp)
    b6a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    b6ac:	e0bfff17 	ldw	r2,-4(fp)
    b6b0:	00c010c4 	movi	r3,67
    b6b4:	10c00005 	stb	r3,0(r2)
        return (0);
    b6b8:	0005883a 	mov	r2,zero
    b6bc:	00000d06 	br	b6f4 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    b6c0:	e0bff717 	ldw	r2,-36(fp)
    b6c4:	10801304 	addi	r2,r2,76
    b6c8:	e13ffe17 	ldw	r4,-8(fp)
    b6cc:	100b883a 	mov	r5,r2
    b6d0:	00063600 	call	6360 <OS_StrCopy>
    b6d4:	e0bff805 	stb	r2,-32(fp)
    b6d8:	e0bff617 	ldw	r2,-40(fp)
    b6dc:	e0bffc15 	stw	r2,-16(fp)
    b6e0:	e0bffc17 	ldw	r2,-16(fp)
    b6e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    b6e8:	e0bfff17 	ldw	r2,-4(fp)
    b6ec:	10000005 	stb	zero,0(r2)
    return (len);
    b6f0:	e0bff803 	ldbu	r2,-32(fp)
}
    b6f4:	e037883a 	mov	sp,fp
    b6f8:	dfc00117 	ldw	ra,4(sp)
    b6fc:	df000017 	ldw	fp,0(sp)
    b700:	dec00204 	addi	sp,sp,8
    b704:	f800283a 	ret

0000b708 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    b708:	defff304 	addi	sp,sp,-52
    b70c:	dfc00c15 	stw	ra,48(sp)
    b710:	df000b15 	stw	fp,44(sp)
    b714:	df000b04 	addi	fp,sp,44
    b718:	2005883a 	mov	r2,r4
    b71c:	e17ffe15 	stw	r5,-8(fp)
    b720:	e1bfff15 	stw	r6,-4(fp)
    b724:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    b728:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    b72c:	e0bfff17 	ldw	r2,-4(fp)
    b730:	1000011e 	bne	r2,zero,b738 <OSTaskNameSet+0x30>
        return;
    b734:	00005f06 	br	b8b4 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    b738:	e0bffd03 	ldbu	r2,-12(fp)
    b73c:	10800570 	cmpltui	r2,r2,21
    b740:	1000071e 	bne	r2,zero,b760 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
    b744:	e0bffd03 	ldbu	r2,-12(fp)
    b748:	10803fe0 	cmpeqi	r2,r2,255
    b74c:	1000041e 	bne	r2,zero,b760 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    b750:	e0bfff17 	ldw	r2,-4(fp)
    b754:	00c00a84 	movi	r3,42
    b758:	10c00005 	stb	r3,0(r2)
            return;
    b75c:	00005506 	br	b8b4 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    b760:	e0bffe17 	ldw	r2,-8(fp)
    b764:	1000041e 	bne	r2,zero,b778 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    b768:	e0bfff17 	ldw	r2,-4(fp)
    b76c:	00c00304 	movi	r3,12
    b770:	10c00005 	stb	r3,0(r2)
        return;
    b774:	00004f06 	br	b8b4 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    b778:	00800074 	movhi	r2,1
    b77c:	10913904 	addi	r2,r2,17636
    b780:	10800003 	ldbu	r2,0(r2)
    b784:	10803fcc 	andi	r2,r2,255
    b788:	10000426 	beq	r2,zero,b79c <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
    b78c:	e0bfff17 	ldw	r2,-4(fp)
    b790:	00c00484 	movi	r3,18
    b794:	10c00005 	stb	r3,0(r2)
        return;
    b798:	00004606 	br	b8b4 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b79c:	0005303a 	rdctl	r2,status
    b7a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b7a4:	e0fff817 	ldw	r3,-32(fp)
    b7a8:	00bfff84 	movi	r2,-2
    b7ac:	1884703a 	and	r2,r3,r2
    b7b0:	1001703a 	wrctl	status,r2
  
  return context;
    b7b4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    b7b8:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    b7bc:	e0bffd03 	ldbu	r2,-12(fp)
    b7c0:	10803fd8 	cmpnei	r2,r2,255
    b7c4:	1000051e 	bne	r2,zero,b7dc <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
    b7c8:	00800074 	movhi	r2,1
    b7cc:	10913a04 	addi	r2,r2,17640
    b7d0:	10800017 	ldw	r2,0(r2)
    b7d4:	10800c83 	ldbu	r2,50(r2)
    b7d8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    b7dc:	e0fffd03 	ldbu	r3,-12(fp)
    b7e0:	008000b4 	movhi	r2,2
    b7e4:	1085c104 	addi	r2,r2,5892
    b7e8:	18c7883a 	add	r3,r3,r3
    b7ec:	18c7883a 	add	r3,r3,r3
    b7f0:	10c5883a 	add	r2,r2,r3
    b7f4:	10800017 	ldw	r2,0(r2)
    b7f8:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    b7fc:	e0bff617 	ldw	r2,-40(fp)
    b800:	1000081e 	bne	r2,zero,b824 <OSTaskNameSet+0x11c>
    b804:	e0bff517 	ldw	r2,-44(fp)
    b808:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b80c:	e0bff917 	ldw	r2,-28(fp)
    b810:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    b814:	e0bfff17 	ldw	r2,-4(fp)
    b818:	00c010c4 	movi	r3,67
    b81c:	10c00005 	stb	r3,0(r2)
        return;
    b820:	00002406 	br	b8b4 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    b824:	e0bff617 	ldw	r2,-40(fp)
    b828:	10800058 	cmpnei	r2,r2,1
    b82c:	1000081e 	bne	r2,zero,b850 <OSTaskNameSet+0x148>
    b830:	e0bff517 	ldw	r2,-44(fp)
    b834:	e0bffa15 	stw	r2,-24(fp)
    b838:	e0bffa17 	ldw	r2,-24(fp)
    b83c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    b840:	e0bfff17 	ldw	r2,-4(fp)
    b844:	00c010c4 	movi	r3,67
    b848:	10c00005 	stb	r3,0(r2)
        return;
    b84c:	00001906 	br	b8b4 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    b850:	e13ffe17 	ldw	r4,-8(fp)
    b854:	00063d40 	call	63d4 <OS_StrLen>
    b858:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    b85c:	e0bff703 	ldbu	r2,-36(fp)
    b860:	10800830 	cmpltui	r2,r2,32
    b864:	1000081e 	bne	r2,zero,b888 <OSTaskNameSet+0x180>
    b868:	e0bff517 	ldw	r2,-44(fp)
    b86c:	e0bffb15 	stw	r2,-20(fp)
    b870:	e0bffb17 	ldw	r2,-20(fp)
    b874:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    b878:	e0bfff17 	ldw	r2,-4(fp)
    b87c:	00c01044 	movi	r3,65
    b880:	10c00005 	stb	r3,0(r2)
        return;
    b884:	00000b06 	br	b8b4 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    b888:	e0bff617 	ldw	r2,-40(fp)
    b88c:	10801304 	addi	r2,r2,76
    b890:	1009883a 	mov	r4,r2
    b894:	e17ffe17 	ldw	r5,-8(fp)
    b898:	00063600 	call	6360 <OS_StrCopy>
    b89c:	e0bff517 	ldw	r2,-44(fp)
    b8a0:	e0bffc15 	stw	r2,-16(fp)
    b8a4:	e0bffc17 	ldw	r2,-16(fp)
    b8a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    b8ac:	e0bfff17 	ldw	r2,-4(fp)
    b8b0:	10000005 	stb	zero,0(r2)
}
    b8b4:	e037883a 	mov	sp,fp
    b8b8:	dfc00117 	ldw	ra,4(sp)
    b8bc:	df000017 	ldw	fp,0(sp)
    b8c0:	dec00204 	addi	sp,sp,8
    b8c4:	f800283a 	ret

0000b8c8 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    b8c8:	defff404 	addi	sp,sp,-48
    b8cc:	dfc00b15 	stw	ra,44(sp)
    b8d0:	df000a15 	stw	fp,40(sp)
    b8d4:	df000a04 	addi	fp,sp,40
    b8d8:	2005883a 	mov	r2,r4
    b8dc:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    b8e0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    b8e4:	e0bfff03 	ldbu	r2,-4(fp)
    b8e8:	10800530 	cmpltui	r2,r2,20
    b8ec:	1000021e 	bne	r2,zero,b8f8 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    b8f0:	00800a84 	movi	r2,42
    b8f4:	00006d06 	br	baac <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b8f8:	0005303a 	rdctl	r2,status
    b8fc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b900:	e0fff817 	ldw	r3,-32(fp)
    b904:	00bfff84 	movi	r2,-2
    b908:	1884703a 	and	r2,r3,r2
    b90c:	1001703a 	wrctl	status,r2
  
  return context;
    b910:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    b914:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    b918:	e0ffff03 	ldbu	r3,-4(fp)
    b91c:	008000b4 	movhi	r2,2
    b920:	1085c104 	addi	r2,r2,5892
    b924:	18c7883a 	add	r3,r3,r3
    b928:	18c7883a 	add	r3,r3,r3
    b92c:	10c5883a 	add	r2,r2,r3
    b930:	10800017 	ldw	r2,0(r2)
    b934:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    b938:	e0bff717 	ldw	r2,-36(fp)
    b93c:	1000061e 	bne	r2,zero,b958 <OSTaskResume+0x90>
    b940:	e0bff617 	ldw	r2,-40(fp)
    b944:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b948:	e0bff917 	ldw	r2,-28(fp)
    b94c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    b950:	00801184 	movi	r2,70
    b954:	00005506 	br	baac <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    b958:	e0bff717 	ldw	r2,-36(fp)
    b95c:	10800058 	cmpnei	r2,r2,1
    b960:	1000061e 	bne	r2,zero,b97c <OSTaskResume+0xb4>
    b964:	e0bff617 	ldw	r2,-40(fp)
    b968:	e0bffa15 	stw	r2,-24(fp)
    b96c:	e0bffa17 	ldw	r2,-24(fp)
    b970:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    b974:	008010c4 	movi	r2,67
    b978:	00004c06 	br	baac <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    b97c:	e0bff717 	ldw	r2,-36(fp)
    b980:	10800c03 	ldbu	r2,48(r2)
    b984:	10803fcc 	andi	r2,r2,255
    b988:	1080020c 	andi	r2,r2,8
    b98c:	10004226 	beq	r2,zero,ba98 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    b990:	e0bff717 	ldw	r2,-36(fp)
    b994:	10c00c03 	ldbu	r3,48(r2)
    b998:	00bffdc4 	movi	r2,-9
    b99c:	1884703a 	and	r2,r3,r2
    b9a0:	1007883a 	mov	r3,r2
    b9a4:	e0bff717 	ldw	r2,-36(fp)
    b9a8:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    b9ac:	e0bff717 	ldw	r2,-36(fp)
    b9b0:	10800c03 	ldbu	r2,48(r2)
    b9b4:	10803fcc 	andi	r2,r2,255
    b9b8:	1000311e 	bne	r2,zero,ba80 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
    b9bc:	e0bff717 	ldw	r2,-36(fp)
    b9c0:	10800b8b 	ldhu	r2,46(r2)
    b9c4:	10bfffcc 	andi	r2,r2,65535
    b9c8:	1000281e 	bne	r2,zero,ba6c <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    b9cc:	e0bff717 	ldw	r2,-36(fp)
    b9d0:	10c00d83 	ldbu	r3,54(r2)
    b9d4:	00800074 	movhi	r2,1
    b9d8:	10913704 	addi	r2,r2,17628
    b9dc:	10800003 	ldbu	r2,0(r2)
    b9e0:	1884b03a 	or	r2,r3,r2
    b9e4:	1007883a 	mov	r3,r2
    b9e8:	00800074 	movhi	r2,1
    b9ec:	10913704 	addi	r2,r2,17628
    b9f0:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    b9f4:	e0bff717 	ldw	r2,-36(fp)
    b9f8:	10800d03 	ldbu	r2,52(r2)
    b9fc:	10c03fcc 	andi	r3,r2,255
    ba00:	e0bff717 	ldw	r2,-36(fp)
    ba04:	10800d03 	ldbu	r2,52(r2)
    ba08:	11003fcc 	andi	r4,r2,255
    ba0c:	00800074 	movhi	r2,1
    ba10:	10913744 	addi	r2,r2,17629
    ba14:	1105883a 	add	r2,r2,r4
    ba18:	11000003 	ldbu	r4,0(r2)
    ba1c:	e0bff717 	ldw	r2,-36(fp)
    ba20:	10800d43 	ldbu	r2,53(r2)
    ba24:	2084b03a 	or	r2,r4,r2
    ba28:	1009883a 	mov	r4,r2
    ba2c:	00800074 	movhi	r2,1
    ba30:	10913744 	addi	r2,r2,17629
    ba34:	10c5883a 	add	r2,r2,r3
    ba38:	11000005 	stb	r4,0(r2)
    ba3c:	e0bff617 	ldw	r2,-40(fp)
    ba40:	e0bffb15 	stw	r2,-20(fp)
    ba44:	e0bffb17 	ldw	r2,-20(fp)
    ba48:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    ba4c:	00800074 	movhi	r2,1
    ba50:	10912b44 	addi	r2,r2,17581
    ba54:	10800003 	ldbu	r2,0(r2)
    ba58:	10803fcc 	andi	r2,r2,255
    ba5c:	10800058 	cmpnei	r2,r2,1
    ba60:	10000b1e 	bne	r2,zero,ba90 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
    ba64:	00062240 	call	6224 <OS_Sched>
    ba68:	00000906 	br	ba90 <OSTaskResume+0x1c8>
    ba6c:	e0bff617 	ldw	r2,-40(fp)
    ba70:	e0bffc15 	stw	r2,-16(fp)
    ba74:	e0bffc17 	ldw	r2,-16(fp)
    ba78:	1001703a 	wrctl	status,r2
    ba7c:	00000406 	br	ba90 <OSTaskResume+0x1c8>
    ba80:	e0bff617 	ldw	r2,-40(fp)
    ba84:	e0bffd15 	stw	r2,-12(fp)
    ba88:	e0bffd17 	ldw	r2,-12(fp)
    ba8c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    ba90:	0005883a 	mov	r2,zero
    ba94:	00000506 	br	baac <OSTaskResume+0x1e4>
    ba98:	e0bff617 	ldw	r2,-40(fp)
    ba9c:	e0bffe15 	stw	r2,-8(fp)
    baa0:	e0bffe17 	ldw	r2,-8(fp)
    baa4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    baa8:	00801104 	movi	r2,68
}
    baac:	e037883a 	mov	sp,fp
    bab0:	dfc00117 	ldw	ra,4(sp)
    bab4:	df000017 	ldw	fp,0(sp)
    bab8:	dec00204 	addi	sp,sp,8
    babc:	f800283a 	ret

0000bac0 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    bac0:	defff304 	addi	sp,sp,-52
    bac4:	df000c15 	stw	fp,48(sp)
    bac8:	df000c04 	addi	fp,sp,48
    bacc:	2005883a 	mov	r2,r4
    bad0:	e17fff15 	stw	r5,-4(fp)
    bad4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    bad8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    badc:	e0bffe03 	ldbu	r2,-8(fp)
    bae0:	10800570 	cmpltui	r2,r2,21
    bae4:	1000051e 	bne	r2,zero,bafc <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    bae8:	e0bffe03 	ldbu	r2,-8(fp)
    baec:	10803fe0 	cmpeqi	r2,r2,255
    baf0:	1000021e 	bne	r2,zero,bafc <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    baf4:	00800a84 	movi	r2,42
    baf8:	00005f06 	br	bc78 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    bafc:	e0bfff17 	ldw	r2,-4(fp)
    bb00:	1000021e 	bne	r2,zero,bb0c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    bb04:	00800244 	movi	r2,9
    bb08:	00005b06 	br	bc78 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    bb0c:	e0bfff17 	ldw	r2,-4(fp)
    bb10:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    bb14:	e0bfff17 	ldw	r2,-4(fp)
    bb18:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb1c:	0005303a 	rdctl	r2,status
    bb20:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bb24:	e0fff917 	ldw	r3,-28(fp)
    bb28:	00bfff84 	movi	r2,-2
    bb2c:	1884703a 	and	r2,r3,r2
    bb30:	1001703a 	wrctl	status,r2
  
  return context;
    bb34:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    bb38:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    bb3c:	e0bffe03 	ldbu	r2,-8(fp)
    bb40:	10803fd8 	cmpnei	r2,r2,255
    bb44:	1000051e 	bne	r2,zero,bb5c <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
    bb48:	00800074 	movhi	r2,1
    bb4c:	10913a04 	addi	r2,r2,17640
    bb50:	10800017 	ldw	r2,0(r2)
    bb54:	10800c83 	ldbu	r2,50(r2)
    bb58:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    bb5c:	e0fffe03 	ldbu	r3,-8(fp)
    bb60:	008000b4 	movhi	r2,2
    bb64:	1085c104 	addi	r2,r2,5892
    bb68:	18c7883a 	add	r3,r3,r3
    bb6c:	18c7883a 	add	r3,r3,r3
    bb70:	10c5883a 	add	r2,r2,r3
    bb74:	10800017 	ldw	r2,0(r2)
    bb78:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    bb7c:	e0bff717 	ldw	r2,-36(fp)
    bb80:	1000061e 	bne	r2,zero,bb9c <OSTaskStkChk+0xdc>
    bb84:	e0bff617 	ldw	r2,-40(fp)
    bb88:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bb8c:	e0bffa17 	ldw	r2,-24(fp)
    bb90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    bb94:	008010c4 	movi	r2,67
    bb98:	00003706 	br	bc78 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
    bb9c:	e0bff717 	ldw	r2,-36(fp)
    bba0:	10800058 	cmpnei	r2,r2,1
    bba4:	1000061e 	bne	r2,zero,bbc0 <OSTaskStkChk+0x100>
    bba8:	e0bff617 	ldw	r2,-40(fp)
    bbac:	e0bffb15 	stw	r2,-20(fp)
    bbb0:	e0bffb17 	ldw	r2,-20(fp)
    bbb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    bbb8:	008010c4 	movi	r2,67
    bbbc:	00002e06 	br	bc78 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    bbc0:	e0bff717 	ldw	r2,-36(fp)
    bbc4:	1080040b 	ldhu	r2,16(r2)
    bbc8:	10bfffcc 	andi	r2,r2,65535
    bbcc:	1080004c 	andi	r2,r2,1
    bbd0:	1000061e 	bne	r2,zero,bbec <OSTaskStkChk+0x12c>
    bbd4:	e0bff617 	ldw	r2,-40(fp)
    bbd8:	e0bffc15 	stw	r2,-16(fp)
    bbdc:	e0bffc17 	ldw	r2,-16(fp)
    bbe0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    bbe4:	00801144 	movi	r2,69
    bbe8:	00002306 	br	bc78 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
    bbec:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
    bbf0:	e0bff717 	ldw	r2,-36(fp)
    bbf4:	10800317 	ldw	r2,12(r2)
    bbf8:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
    bbfc:	e0bff717 	ldw	r2,-36(fp)
    bc00:	10800217 	ldw	r2,8(r2)
    bc04:	e0bff415 	stw	r2,-48(fp)
    bc08:	e0bff617 	ldw	r2,-40(fp)
    bc0c:	e0bffd15 	stw	r2,-12(fp)
    bc10:	e0bffd17 	ldw	r2,-12(fp)
    bc14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    bc18:	00000306 	br	bc28 <OSTaskStkChk+0x168>
        nfree++;
    bc1c:	e0bff517 	ldw	r2,-44(fp)
    bc20:	10800044 	addi	r2,r2,1
    bc24:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    bc28:	e0bff417 	ldw	r2,-48(fp)
    bc2c:	10c00104 	addi	r3,r2,4
    bc30:	e0fff415 	stw	r3,-48(fp)
    bc34:	10800017 	ldw	r2,0(r2)
    bc38:	103ff826 	beq	r2,zero,bc1c <__alt_mem_Flash_flash_data+0xf400bc1c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    bc3c:	e0bff517 	ldw	r2,-44(fp)
    bc40:	1085883a 	add	r2,r2,r2
    bc44:	1085883a 	add	r2,r2,r2
    bc48:	1007883a 	mov	r3,r2
    bc4c:	e0bfff17 	ldw	r2,-4(fp)
    bc50:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    bc54:	e0fff817 	ldw	r3,-32(fp)
    bc58:	e0bff517 	ldw	r2,-44(fp)
    bc5c:	1885c83a 	sub	r2,r3,r2
    bc60:	1085883a 	add	r2,r2,r2
    bc64:	1085883a 	add	r2,r2,r2
    bc68:	1007883a 	mov	r3,r2
    bc6c:	e0bfff17 	ldw	r2,-4(fp)
    bc70:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    bc74:	0005883a 	mov	r2,zero
}
    bc78:	e037883a 	mov	sp,fp
    bc7c:	df000017 	ldw	fp,0(sp)
    bc80:	dec00104 	addi	sp,sp,4
    bc84:	f800283a 	ret

0000bc88 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    bc88:	defff504 	addi	sp,sp,-44
    bc8c:	dfc00a15 	stw	ra,40(sp)
    bc90:	df000915 	stw	fp,36(sp)
    bc94:	df000904 	addi	fp,sp,36
    bc98:	2005883a 	mov	r2,r4
    bc9c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    bca0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    bca4:	e0bfff03 	ldbu	r2,-4(fp)
    bca8:	10800518 	cmpnei	r2,r2,20
    bcac:	1000021e 	bne	r2,zero,bcb8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    bcb0:	008011c4 	movi	r2,71
    bcb4:	00007406 	br	be88 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    bcb8:	e0bfff03 	ldbu	r2,-4(fp)
    bcbc:	10800530 	cmpltui	r2,r2,20
    bcc0:	1000051e 	bne	r2,zero,bcd8 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    bcc4:	e0bfff03 	ldbu	r2,-4(fp)
    bcc8:	10803fe0 	cmpeqi	r2,r2,255
    bccc:	1000021e 	bne	r2,zero,bcd8 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    bcd0:	00800a84 	movi	r2,42
    bcd4:	00006c06 	br	be88 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bcd8:	0005303a 	rdctl	r2,status
    bcdc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bce0:	e0fffb17 	ldw	r3,-20(fp)
    bce4:	00bfff84 	movi	r2,-2
    bce8:	1884703a 	and	r2,r3,r2
    bcec:	1001703a 	wrctl	status,r2
  
  return context;
    bcf0:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    bcf4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    bcf8:	e0bfff03 	ldbu	r2,-4(fp)
    bcfc:	10803fd8 	cmpnei	r2,r2,255
    bd00:	1000081e 	bne	r2,zero,bd24 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
    bd04:	00800074 	movhi	r2,1
    bd08:	10913a04 	addi	r2,r2,17640
    bd0c:	10800017 	ldw	r2,0(r2)
    bd10:	10800c83 	ldbu	r2,50(r2)
    bd14:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
    bd18:	00800044 	movi	r2,1
    bd1c:	e0bff705 	stb	r2,-36(fp)
    bd20:	00000b06 	br	bd50 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    bd24:	00800074 	movhi	r2,1
    bd28:	10913a04 	addi	r2,r2,17640
    bd2c:	10800017 	ldw	r2,0(r2)
    bd30:	10800c83 	ldbu	r2,50(r2)
    bd34:	10c03fcc 	andi	r3,r2,255
    bd38:	e0bfff03 	ldbu	r2,-4(fp)
    bd3c:	1880031e 	bne	r3,r2,bd4c <OSTaskSuspend+0xc4>
        self = OS_TRUE;
    bd40:	00800044 	movi	r2,1
    bd44:	e0bff705 	stb	r2,-36(fp)
    bd48:	00000106 	br	bd50 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    bd4c:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    bd50:	e0ffff03 	ldbu	r3,-4(fp)
    bd54:	008000b4 	movhi	r2,2
    bd58:	1085c104 	addi	r2,r2,5892
    bd5c:	18c7883a 	add	r3,r3,r3
    bd60:	18c7883a 	add	r3,r3,r3
    bd64:	10c5883a 	add	r2,r2,r3
    bd68:	10800017 	ldw	r2,0(r2)
    bd6c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    bd70:	e0bff917 	ldw	r2,-28(fp)
    bd74:	1000061e 	bne	r2,zero,bd90 <OSTaskSuspend+0x108>
    bd78:	e0bff817 	ldw	r2,-32(fp)
    bd7c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bd80:	e0bffc17 	ldw	r2,-16(fp)
    bd84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    bd88:	00801204 	movi	r2,72
    bd8c:	00003e06 	br	be88 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    bd90:	e0bff917 	ldw	r2,-28(fp)
    bd94:	10800058 	cmpnei	r2,r2,1
    bd98:	1000061e 	bne	r2,zero,bdb4 <OSTaskSuspend+0x12c>
    bd9c:	e0bff817 	ldw	r2,-32(fp)
    bda0:	e0bffd15 	stw	r2,-12(fp)
    bda4:	e0bffd17 	ldw	r2,-12(fp)
    bda8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    bdac:	008010c4 	movi	r2,67
    bdb0:	00003506 	br	be88 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
    bdb4:	e0bff917 	ldw	r2,-28(fp)
    bdb8:	10800d03 	ldbu	r2,52(r2)
    bdbc:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    bdc0:	e0fffa03 	ldbu	r3,-24(fp)
    bdc4:	e13ffa03 	ldbu	r4,-24(fp)
    bdc8:	00800074 	movhi	r2,1
    bdcc:	10913744 	addi	r2,r2,17629
    bdd0:	1105883a 	add	r2,r2,r4
    bdd4:	10800003 	ldbu	r2,0(r2)
    bdd8:	1009883a 	mov	r4,r2
    bddc:	e0bff917 	ldw	r2,-28(fp)
    bde0:	10800d43 	ldbu	r2,53(r2)
    bde4:	0084303a 	nor	r2,zero,r2
    bde8:	2084703a 	and	r2,r4,r2
    bdec:	1009883a 	mov	r4,r2
    bdf0:	00800074 	movhi	r2,1
    bdf4:	10913744 	addi	r2,r2,17629
    bdf8:	10c5883a 	add	r2,r2,r3
    bdfc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    be00:	e0fffa03 	ldbu	r3,-24(fp)
    be04:	00800074 	movhi	r2,1
    be08:	10913744 	addi	r2,r2,17629
    be0c:	10c5883a 	add	r2,r2,r3
    be10:	10800003 	ldbu	r2,0(r2)
    be14:	10803fcc 	andi	r2,r2,255
    be18:	10000c1e 	bne	r2,zero,be4c <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    be1c:	e0bff917 	ldw	r2,-28(fp)
    be20:	10800d83 	ldbu	r2,54(r2)
    be24:	0084303a 	nor	r2,zero,r2
    be28:	1007883a 	mov	r3,r2
    be2c:	00800074 	movhi	r2,1
    be30:	10913704 	addi	r2,r2,17628
    be34:	10800003 	ldbu	r2,0(r2)
    be38:	1884703a 	and	r2,r3,r2
    be3c:	1007883a 	mov	r3,r2
    be40:	00800074 	movhi	r2,1
    be44:	10913704 	addi	r2,r2,17628
    be48:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    be4c:	e0bff917 	ldw	r2,-28(fp)
    be50:	10800c03 	ldbu	r2,48(r2)
    be54:	10800214 	ori	r2,r2,8
    be58:	1007883a 	mov	r3,r2
    be5c:	e0bff917 	ldw	r2,-28(fp)
    be60:	10c00c05 	stb	r3,48(r2)
    be64:	e0bff817 	ldw	r2,-32(fp)
    be68:	e0bffe15 	stw	r2,-8(fp)
    be6c:	e0bffe17 	ldw	r2,-8(fp)
    be70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    be74:	e0bff703 	ldbu	r2,-36(fp)
    be78:	10800058 	cmpnei	r2,r2,1
    be7c:	1000011e 	bne	r2,zero,be84 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
    be80:	00062240 	call	6224 <OS_Sched>
    }
    return (OS_ERR_NONE);
    be84:	0005883a 	mov	r2,zero
}
    be88:	e037883a 	mov	sp,fp
    be8c:	dfc00117 	ldw	ra,4(sp)
    be90:	df000017 	ldw	fp,0(sp)
    be94:	dec00204 	addi	sp,sp,8
    be98:	f800283a 	ret

0000be9c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    be9c:	defff604 	addi	sp,sp,-40
    bea0:	dfc00915 	stw	ra,36(sp)
    bea4:	df000815 	stw	fp,32(sp)
    bea8:	df000804 	addi	fp,sp,32
    beac:	2005883a 	mov	r2,r4
    beb0:	e17fff15 	stw	r5,-4(fp)
    beb4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    beb8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    bebc:	e0bffe03 	ldbu	r2,-8(fp)
    bec0:	10800570 	cmpltui	r2,r2,21
    bec4:	1000051e 	bne	r2,zero,bedc <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    bec8:	e0bffe03 	ldbu	r2,-8(fp)
    becc:	10803fe0 	cmpeqi	r2,r2,255
    bed0:	1000021e 	bne	r2,zero,bedc <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    bed4:	00800a84 	movi	r2,42
    bed8:	00003606 	br	bfb4 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    bedc:	e0bfff17 	ldw	r2,-4(fp)
    bee0:	1000021e 	bne	r2,zero,beec <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    bee4:	00800244 	movi	r2,9
    bee8:	00003206 	br	bfb4 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    beec:	0005303a 	rdctl	r2,status
    bef0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bef4:	e0fffa17 	ldw	r3,-24(fp)
    bef8:	00bfff84 	movi	r2,-2
    befc:	1884703a 	and	r2,r3,r2
    bf00:	1001703a 	wrctl	status,r2
  
  return context;
    bf04:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    bf08:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    bf0c:	e0bffe03 	ldbu	r2,-8(fp)
    bf10:	10803fd8 	cmpnei	r2,r2,255
    bf14:	1000051e 	bne	r2,zero,bf2c <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
    bf18:	00800074 	movhi	r2,1
    bf1c:	10913a04 	addi	r2,r2,17640
    bf20:	10800017 	ldw	r2,0(r2)
    bf24:	10800c83 	ldbu	r2,50(r2)
    bf28:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    bf2c:	e0fffe03 	ldbu	r3,-8(fp)
    bf30:	008000b4 	movhi	r2,2
    bf34:	1085c104 	addi	r2,r2,5892
    bf38:	18c7883a 	add	r3,r3,r3
    bf3c:	18c7883a 	add	r3,r3,r3
    bf40:	10c5883a 	add	r2,r2,r3
    bf44:	10800017 	ldw	r2,0(r2)
    bf48:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    bf4c:	e0bff917 	ldw	r2,-28(fp)
    bf50:	1000061e 	bne	r2,zero,bf6c <OSTaskQuery+0xd0>
    bf54:	e0bff817 	ldw	r2,-32(fp)
    bf58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bf5c:	e0bffb17 	ldw	r2,-20(fp)
    bf60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    bf64:	00800a44 	movi	r2,41
    bf68:	00001206 	br	bfb4 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    bf6c:	e0bff917 	ldw	r2,-28(fp)
    bf70:	10800058 	cmpnei	r2,r2,1
    bf74:	1000061e 	bne	r2,zero,bf90 <OSTaskQuery+0xf4>
    bf78:	e0bff817 	ldw	r2,-32(fp)
    bf7c:	e0bffc15 	stw	r2,-16(fp)
    bf80:	e0bffc17 	ldw	r2,-16(fp)
    bf84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    bf88:	008010c4 	movi	r2,67
    bf8c:	00000906 	br	bfb4 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    bf90:	e13fff17 	ldw	r4,-4(fp)
    bf94:	e17ff917 	ldw	r5,-28(fp)
    bf98:	01801b04 	movi	r6,108
    bf9c:	00061c00 	call	61c0 <OS_MemCopy>
    bfa0:	e0bff817 	ldw	r2,-32(fp)
    bfa4:	e0bffd15 	stw	r2,-12(fp)
    bfa8:	e0bffd17 	ldw	r2,-12(fp)
    bfac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    bfb0:	0005883a 	mov	r2,zero
}
    bfb4:	e037883a 	mov	sp,fp
    bfb8:	dfc00117 	ldw	ra,4(sp)
    bfbc:	df000017 	ldw	fp,0(sp)
    bfc0:	dec00204 	addi	sp,sp,8
    bfc4:	f800283a 	ret

0000bfc8 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    bfc8:	defffc04 	addi	sp,sp,-16
    bfcc:	df000315 	stw	fp,12(sp)
    bfd0:	df000304 	addi	fp,sp,12
    bfd4:	e13ffd15 	stw	r4,-12(fp)
    bfd8:	e17ffe15 	stw	r5,-8(fp)
    bfdc:	3005883a 	mov	r2,r6
    bfe0:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    bfe4:	e0bfff0b 	ldhu	r2,-4(fp)
    bfe8:	1080004c 	andi	r2,r2,1
    bfec:	10000d26 	beq	r2,zero,c024 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    bff0:	e0bfff0b 	ldhu	r2,-4(fp)
    bff4:	1080008c 	andi	r2,r2,2
    bff8:	10000a26 	beq	r2,zero,c024 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    bffc:	00000706 	br	c01c <OS_TaskStkClr+0x54>
                size--;
    c000:	e0bffe17 	ldw	r2,-8(fp)
    c004:	10bfffc4 	addi	r2,r2,-1
    c008:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    c00c:	e0bffd17 	ldw	r2,-12(fp)
    c010:	10c00104 	addi	r3,r2,4
    c014:	e0fffd15 	stw	r3,-12(fp)
    c018:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    c01c:	e0bffe17 	ldw	r2,-8(fp)
    c020:	103ff71e 	bne	r2,zero,c000 <__alt_mem_Flash_flash_data+0xf400c000>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    c024:	e037883a 	mov	sp,fp
    c028:	df000017 	ldw	fp,0(sp)
    c02c:	dec00104 	addi	sp,sp,4
    c030:	f800283a 	ret

0000c034 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    c034:	defff904 	addi	sp,sp,-28
    c038:	dfc00615 	stw	ra,24(sp)
    c03c:	df000515 	stw	fp,20(sp)
    c040:	df000504 	addi	fp,sp,20
    c044:	2005883a 	mov	r2,r4
    c048:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    c04c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    c050:	00800074 	movhi	r2,1
    c054:	10913904 	addi	r2,r2,17636
    c058:	10800003 	ldbu	r2,0(r2)
    c05c:	10803fcc 	andi	r2,r2,255
    c060:	10000126 	beq	r2,zero,c068 <OSTimeDly+0x34>
        return;
    c064:	00004006 	br	c168 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    c068:	e0bfff0b 	ldhu	r2,-4(fp)
    c06c:	10003e26 	beq	r2,zero,c168 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c070:	0005303a 	rdctl	r2,status
    c074:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c078:	e0fffd17 	ldw	r3,-12(fp)
    c07c:	00bfff84 	movi	r2,-2
    c080:	1884703a 	and	r2,r3,r2
    c084:	1001703a 	wrctl	status,r2
  
  return context;
    c088:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
    c08c:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    c090:	00800074 	movhi	r2,1
    c094:	10913a04 	addi	r2,r2,17640
    c098:	10800017 	ldw	r2,0(r2)
    c09c:	10800d03 	ldbu	r2,52(r2)
    c0a0:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    c0a4:	e0fffc03 	ldbu	r3,-16(fp)
    c0a8:	e13ffc03 	ldbu	r4,-16(fp)
    c0ac:	00800074 	movhi	r2,1
    c0b0:	10913744 	addi	r2,r2,17629
    c0b4:	1105883a 	add	r2,r2,r4
    c0b8:	10800003 	ldbu	r2,0(r2)
    c0bc:	1009883a 	mov	r4,r2
    c0c0:	00800074 	movhi	r2,1
    c0c4:	10913a04 	addi	r2,r2,17640
    c0c8:	10800017 	ldw	r2,0(r2)
    c0cc:	10800d43 	ldbu	r2,53(r2)
    c0d0:	0084303a 	nor	r2,zero,r2
    c0d4:	2084703a 	and	r2,r4,r2
    c0d8:	1009883a 	mov	r4,r2
    c0dc:	00800074 	movhi	r2,1
    c0e0:	10913744 	addi	r2,r2,17629
    c0e4:	10c5883a 	add	r2,r2,r3
    c0e8:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
    c0ec:	e0fffc03 	ldbu	r3,-16(fp)
    c0f0:	00800074 	movhi	r2,1
    c0f4:	10913744 	addi	r2,r2,17629
    c0f8:	10c5883a 	add	r2,r2,r3
    c0fc:	10800003 	ldbu	r2,0(r2)
    c100:	10803fcc 	andi	r2,r2,255
    c104:	10000e1e 	bne	r2,zero,c140 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    c108:	00800074 	movhi	r2,1
    c10c:	10913a04 	addi	r2,r2,17640
    c110:	10800017 	ldw	r2,0(r2)
    c114:	10800d83 	ldbu	r2,54(r2)
    c118:	0084303a 	nor	r2,zero,r2
    c11c:	1007883a 	mov	r3,r2
    c120:	00800074 	movhi	r2,1
    c124:	10913704 	addi	r2,r2,17628
    c128:	10800003 	ldbu	r2,0(r2)
    c12c:	1884703a 	and	r2,r3,r2
    c130:	1007883a 	mov	r3,r2
    c134:	00800074 	movhi	r2,1
    c138:	10913704 	addi	r2,r2,17628
    c13c:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    c140:	00800074 	movhi	r2,1
    c144:	10913a04 	addi	r2,r2,17640
    c148:	10800017 	ldw	r2,0(r2)
    c14c:	e0ffff0b 	ldhu	r3,-4(fp)
    c150:	10c00b8d 	sth	r3,46(r2)
    c154:	e0bffb17 	ldw	r2,-20(fp)
    c158:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c15c:	e0bffe17 	ldw	r2,-8(fp)
    c160:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    c164:	00062240 	call	6224 <OS_Sched>
    }
}
    c168:	e037883a 	mov	sp,fp
    c16c:	dfc00117 	ldw	ra,4(sp)
    c170:	df000017 	ldw	fp,0(sp)
    c174:	dec00204 	addi	sp,sp,8
    c178:	f800283a 	ret

0000c17c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    c17c:	defff804 	addi	sp,sp,-32
    c180:	dfc00715 	stw	ra,28(sp)
    c184:	df000615 	stw	fp,24(sp)
    c188:	df000604 	addi	fp,sp,24
    c18c:	2015883a 	mov	r10,r4
    c190:	2809883a 	mov	r4,r5
    c194:	3007883a 	mov	r3,r6
    c198:	3805883a 	mov	r2,r7
    c19c:	e2bffc05 	stb	r10,-16(fp)
    c1a0:	e13ffd05 	stb	r4,-12(fp)
    c1a4:	e0fffe05 	stb	r3,-8(fp)
    c1a8:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    c1ac:	00800074 	movhi	r2,1
    c1b0:	10913904 	addi	r2,r2,17636
    c1b4:	10800003 	ldbu	r2,0(r2)
    c1b8:	10803fcc 	andi	r2,r2,255
    c1bc:	10000226 	beq	r2,zero,c1c8 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
    c1c0:	00801544 	movi	r2,85
    c1c4:	00004206 	br	c2d0 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    c1c8:	e0bffc03 	ldbu	r2,-16(fp)
    c1cc:	1000081e 	bne	r2,zero,c1f0 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
    c1d0:	e0bffd03 	ldbu	r2,-12(fp)
    c1d4:	1000061e 	bne	r2,zero,c1f0 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
    c1d8:	e0bffe03 	ldbu	r2,-8(fp)
    c1dc:	1000041e 	bne	r2,zero,c1f0 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
    c1e0:	e0bfff0b 	ldhu	r2,-4(fp)
    c1e4:	1000021e 	bne	r2,zero,c1f0 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
    c1e8:	00801504 	movi	r2,84
    c1ec:	00003806 	br	c2d0 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
    c1f0:	e0bffd03 	ldbu	r2,-12(fp)
    c1f4:	10800f30 	cmpltui	r2,r2,60
    c1f8:	1000021e 	bne	r2,zero,c204 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    c1fc:	00801444 	movi	r2,81
    c200:	00003306 	br	c2d0 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
    c204:	e0bffe03 	ldbu	r2,-8(fp)
    c208:	10800f30 	cmpltui	r2,r2,60
    c20c:	1000021e 	bne	r2,zero,c218 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
    c210:	00801484 	movi	r2,82
    c214:	00002e06 	br	c2d0 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
    c218:	e0bfff0b 	ldhu	r2,-4(fp)
    c21c:	1080fa30 	cmpltui	r2,r2,1000
    c220:	1000021e 	bne	r2,zero,c22c <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
    c224:	008014c4 	movi	r2,83
    c228:	00002906 	br	c2d0 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    c22c:	e0bffc03 	ldbu	r2,-16(fp)
    c230:	10c38424 	muli	r3,r2,3600
    c234:	e0bffd03 	ldbu	r2,-12(fp)
    c238:	10800f24 	muli	r2,r2,60
    c23c:	1887883a 	add	r3,r3,r2
    c240:	e0bffe03 	ldbu	r2,-8(fp)
    c244:	1885883a 	add	r2,r3,r2
    c248:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    c24c:	e0bfff0b 	ldhu	r2,-4(fp)
    c250:	10800f84 	addi	r2,r2,62
    c254:	100690fa 	slli	r3,r2,3
    c258:	008418b4 	movhi	r2,4194
    c25c:	109374c4 	addi	r2,r2,19923
    c260:	188a383a 	mulxuu	r5,r3,r2
    c264:	1885383a 	mul	r2,r3,r2
    c268:	1011883a 	mov	r8,r2
    c26c:	2813883a 	mov	r9,r5
    c270:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    c274:	2085883a 	add	r2,r4,r2
    c278:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    c27c:	e0bffb17 	ldw	r2,-20(fp)
    c280:	1004d43a 	srli	r2,r2,16
    c284:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    c288:	e0bffb17 	ldw	r2,-20(fp)
    c28c:	10bfffcc 	andi	r2,r2,65535
    c290:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
    c294:	e0bffb17 	ldw	r2,-20(fp)
    c298:	10bfffcc 	andi	r2,r2,65535
    c29c:	1009883a 	mov	r4,r2
    c2a0:	000c0340 	call	c034 <OSTimeDly>
    while (loops > 0) {
    c2a4:	00000706 	br	c2c4 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
    c2a8:	01200014 	movui	r4,32768
    c2ac:	000c0340 	call	c034 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    c2b0:	01200014 	movui	r4,32768
    c2b4:	000c0340 	call	c034 <OSTimeDly>
        loops--;
    c2b8:	e0bffa0b 	ldhu	r2,-24(fp)
    c2bc:	10bfffc4 	addi	r2,r2,-1
    c2c0:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    c2c4:	e0bffa0b 	ldhu	r2,-24(fp)
    c2c8:	103ff71e 	bne	r2,zero,c2a8 <__alt_mem_Flash_flash_data+0xf400c2a8>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    c2cc:	0005883a 	mov	r2,zero
}
    c2d0:	e037883a 	mov	sp,fp
    c2d4:	dfc00117 	ldw	ra,4(sp)
    c2d8:	df000017 	ldw	fp,0(sp)
    c2dc:	dec00204 	addi	sp,sp,8
    c2e0:	f800283a 	ret

0000c2e4 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    c2e4:	defff504 	addi	sp,sp,-44
    c2e8:	dfc00a15 	stw	ra,40(sp)
    c2ec:	df000915 	stw	fp,36(sp)
    c2f0:	df000904 	addi	fp,sp,36
    c2f4:	2005883a 	mov	r2,r4
    c2f8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    c2fc:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    c300:	e0bfff03 	ldbu	r2,-4(fp)
    c304:	10800530 	cmpltui	r2,r2,20
    c308:	1000021e 	bne	r2,zero,c314 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    c30c:	00800a84 	movi	r2,42
    c310:	00006b06 	br	c4c0 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c314:	0005303a 	rdctl	r2,status
    c318:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c31c:	e0fff917 	ldw	r3,-28(fp)
    c320:	00bfff84 	movi	r2,-2
    c324:	1884703a 	and	r2,r3,r2
    c328:	1001703a 	wrctl	status,r2
  
  return context;
    c32c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    c330:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    c334:	e0ffff03 	ldbu	r3,-4(fp)
    c338:	008000b4 	movhi	r2,2
    c33c:	1085c104 	addi	r2,r2,5892
    c340:	18c7883a 	add	r3,r3,r3
    c344:	18c7883a 	add	r3,r3,r3
    c348:	10c5883a 	add	r2,r2,r3
    c34c:	10800017 	ldw	r2,0(r2)
    c350:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
    c354:	e0bff817 	ldw	r2,-32(fp)
    c358:	1000061e 	bne	r2,zero,c374 <OSTimeDlyResume+0x90>
    c35c:	e0bff717 	ldw	r2,-36(fp)
    c360:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c364:	e0bffa17 	ldw	r2,-24(fp)
    c368:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    c36c:	008010c4 	movi	r2,67
    c370:	00005306 	br	c4c0 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
    c374:	e0bff817 	ldw	r2,-32(fp)
    c378:	10800058 	cmpnei	r2,r2,1
    c37c:	1000061e 	bne	r2,zero,c398 <OSTimeDlyResume+0xb4>
    c380:	e0bff717 	ldw	r2,-36(fp)
    c384:	e0bffb15 	stw	r2,-20(fp)
    c388:	e0bffb17 	ldw	r2,-20(fp)
    c38c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    c390:	008010c4 	movi	r2,67
    c394:	00004a06 	br	c4c0 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    c398:	e0bff817 	ldw	r2,-32(fp)
    c39c:	10800b8b 	ldhu	r2,46(r2)
    c3a0:	10bfffcc 	andi	r2,r2,65535
    c3a4:	1000061e 	bne	r2,zero,c3c0 <OSTimeDlyResume+0xdc>
    c3a8:	e0bff717 	ldw	r2,-36(fp)
    c3ac:	e0bffc15 	stw	r2,-16(fp)
    c3b0:	e0bffc17 	ldw	r2,-16(fp)
    c3b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    c3b8:	00801404 	movi	r2,80
    c3bc:	00004006 	br	c4c0 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    c3c0:	e0bff817 	ldw	r2,-32(fp)
    c3c4:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    c3c8:	e0bff817 	ldw	r2,-32(fp)
    c3cc:	10800c03 	ldbu	r2,48(r2)
    c3d0:	10803fcc 	andi	r2,r2,255
    c3d4:	10800dcc 	andi	r2,r2,55
    c3d8:	10000b26 	beq	r2,zero,c408 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    c3dc:	e0bff817 	ldw	r2,-32(fp)
    c3e0:	10c00c03 	ldbu	r3,48(r2)
    c3e4:	00bff204 	movi	r2,-56
    c3e8:	1884703a 	and	r2,r3,r2
    c3ec:	1007883a 	mov	r3,r2
    c3f0:	e0bff817 	ldw	r2,-32(fp)
    c3f4:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    c3f8:	e0bff817 	ldw	r2,-32(fp)
    c3fc:	00c00044 	movi	r3,1
    c400:	10c00c45 	stb	r3,49(r2)
    c404:	00000206 	br	c410 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    c408:	e0bff817 	ldw	r2,-32(fp)
    c40c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    c410:	e0bff817 	ldw	r2,-32(fp)
    c414:	10800c03 	ldbu	r2,48(r2)
    c418:	10803fcc 	andi	r2,r2,255
    c41c:	1080020c 	andi	r2,r2,8
    c420:	1000221e 	bne	r2,zero,c4ac <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    c424:	e0bff817 	ldw	r2,-32(fp)
    c428:	10c00d83 	ldbu	r3,54(r2)
    c42c:	00800074 	movhi	r2,1
    c430:	10913704 	addi	r2,r2,17628
    c434:	10800003 	ldbu	r2,0(r2)
    c438:	1884b03a 	or	r2,r3,r2
    c43c:	1007883a 	mov	r3,r2
    c440:	00800074 	movhi	r2,1
    c444:	10913704 	addi	r2,r2,17628
    c448:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    c44c:	e0bff817 	ldw	r2,-32(fp)
    c450:	10800d03 	ldbu	r2,52(r2)
    c454:	10c03fcc 	andi	r3,r2,255
    c458:	e0bff817 	ldw	r2,-32(fp)
    c45c:	10800d03 	ldbu	r2,52(r2)
    c460:	11003fcc 	andi	r4,r2,255
    c464:	00800074 	movhi	r2,1
    c468:	10913744 	addi	r2,r2,17629
    c46c:	1105883a 	add	r2,r2,r4
    c470:	11000003 	ldbu	r4,0(r2)
    c474:	e0bff817 	ldw	r2,-32(fp)
    c478:	10800d43 	ldbu	r2,53(r2)
    c47c:	2084b03a 	or	r2,r4,r2
    c480:	1009883a 	mov	r4,r2
    c484:	00800074 	movhi	r2,1
    c488:	10913744 	addi	r2,r2,17629
    c48c:	10c5883a 	add	r2,r2,r3
    c490:	11000005 	stb	r4,0(r2)
    c494:	e0bff717 	ldw	r2,-36(fp)
    c498:	e0bffd15 	stw	r2,-12(fp)
    c49c:	e0bffd17 	ldw	r2,-12(fp)
    c4a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    c4a4:	00062240 	call	6224 <OS_Sched>
    c4a8:	00000406 	br	c4bc <OSTimeDlyResume+0x1d8>
    c4ac:	e0bff717 	ldw	r2,-36(fp)
    c4b0:	e0bffe15 	stw	r2,-8(fp)
    c4b4:	e0bffe17 	ldw	r2,-8(fp)
    c4b8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    c4bc:	0005883a 	mov	r2,zero
}
    c4c0:	e037883a 	mov	sp,fp
    c4c4:	dfc00117 	ldw	ra,4(sp)
    c4c8:	df000017 	ldw	fp,0(sp)
    c4cc:	dec00204 	addi	sp,sp,8
    c4d0:	f800283a 	ret

0000c4d4 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    c4d4:	defffb04 	addi	sp,sp,-20
    c4d8:	df000415 	stw	fp,16(sp)
    c4dc:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    c4e0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c4e4:	0005303a 	rdctl	r2,status
    c4e8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c4ec:	e0fffe17 	ldw	r3,-8(fp)
    c4f0:	00bfff84 	movi	r2,-2
    c4f4:	1884703a 	and	r2,r3,r2
    c4f8:	1001703a 	wrctl	status,r2
  
  return context;
    c4fc:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    c500:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
    c504:	00800074 	movhi	r2,1
    c508:	10913b04 	addi	r2,r2,17644
    c50c:	10800017 	ldw	r2,0(r2)
    c510:	e0bffd15 	stw	r2,-12(fp)
    c514:	e0bffc17 	ldw	r2,-16(fp)
    c518:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c51c:	e0bfff17 	ldw	r2,-4(fp)
    c520:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
    c524:	e0bffd17 	ldw	r2,-12(fp)
}
    c528:	e037883a 	mov	sp,fp
    c52c:	df000017 	ldw	fp,0(sp)
    c530:	dec00104 	addi	sp,sp,4
    c534:	f800283a 	ret

0000c538 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    c538:	defffb04 	addi	sp,sp,-20
    c53c:	df000415 	stw	fp,16(sp)
    c540:	df000404 	addi	fp,sp,16
    c544:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    c548:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c54c:	0005303a 	rdctl	r2,status
    c550:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c554:	e0fffd17 	ldw	r3,-12(fp)
    c558:	00bfff84 	movi	r2,-2
    c55c:	1884703a 	and	r2,r3,r2
    c560:	1001703a 	wrctl	status,r2
  
  return context;
    c564:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    c568:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
    c56c:	00800074 	movhi	r2,1
    c570:	10913b04 	addi	r2,r2,17644
    c574:	e0ffff17 	ldw	r3,-4(fp)
    c578:	10c00015 	stw	r3,0(r2)
    c57c:	e0bffc17 	ldw	r2,-16(fp)
    c580:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c584:	e0bffe17 	ldw	r2,-8(fp)
    c588:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    c58c:	e037883a 	mov	sp,fp
    c590:	df000017 	ldw	fp,0(sp)
    c594:	dec00104 	addi	sp,sp,4
    c598:	f800283a 	ret

0000c59c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    c59c:	defffd04 	addi	sp,sp,-12
    c5a0:	dfc00215 	stw	ra,8(sp)
    c5a4:	df000115 	stw	fp,4(sp)
    c5a8:	df000104 	addi	fp,sp,4
    c5ac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    c5b0:	e13fff17 	ldw	r4,-4(fp)
    c5b4:	01400074 	movhi	r5,1
    c5b8:	29493904 	addi	r5,r5,9444
    c5bc:	000ef700 	call	ef70 <alt_dev_llist_insert>
}
    c5c0:	e037883a 	mov	sp,fp
    c5c4:	dfc00117 	ldw	ra,4(sp)
    c5c8:	df000017 	ldw	fp,0(sp)
    c5cc:	dec00204 	addi	sp,sp,8
    c5d0:	f800283a 	ret

0000c5d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    c5d4:	defffd04 	addi	sp,sp,-12
    c5d8:	dfc00215 	stw	ra,8(sp)
    c5dc:	df000115 	stw	fp,4(sp)
    c5e0:	df000104 	addi	fp,sp,4
    c5e4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    c5e8:	000f8840 	call	f884 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    c5ec:	00800044 	movi	r2,1
    c5f0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    c5f4:	e037883a 	mov	sp,fp
    c5f8:	dfc00117 	ldw	ra,4(sp)
    c5fc:	df000017 	ldw	fp,0(sp)
    c600:	dec00204 	addi	sp,sp,8
    c604:	f800283a 	ret

0000c608 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    c608:	defffd04 	addi	sp,sp,-12
    c60c:	dfc00215 	stw	ra,8(sp)
    c610:	df000115 	stw	fp,4(sp)
    c614:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    c618:	01040034 	movhi	r4,4096
    c61c:	21080004 	addi	r4,r4,8192
    c620:	000b883a 	mov	r5,zero
    c624:	000d883a 	mov	r6,zero
    c628:	01c00204 	movi	r7,8
    c62c:	000d77c0 	call	d77c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    c630:	01000074 	movhi	r4,1
    c634:	21043604 	addi	r4,r4,4312
    c638:	000b883a 	mov	r5,zero
    c63c:	01800204 	movi	r6,8
    c640:	000cb440 	call	cb44 <altera_avalon_jtag_uart_init>
    c644:	01000074 	movhi	r4,1
    c648:	21042c04 	addi	r4,r4,4272
    c64c:	000c59c0 	call	c59c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    c650:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    c654:	01000074 	movhi	r4,1
    c658:	21084704 	addi	r4,r4,8476
    c65c:	000c59c0 	call	c59c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    c660:	01000074 	movhi	r4,1
    c664:	21085304 	addi	r4,r4,8524
    c668:	000c59c0 	call	c59c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    c66c:	01000074 	movhi	r4,1
    c670:	21085f04 	addi	r4,r4,8572
    c674:	000d8ac0 	call	d8ac <alt_up_character_lcd_init>
    c678:	01000074 	movhi	r4,1
    c67c:	21085f04 	addi	r4,r4,8572
    c680:	000c59c0 	call	c59c <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
    c684:	01000074 	movhi	r4,1
    c688:	21086a04 	addi	r4,r4,8616
    c68c:	000c59c0 	call	c59c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
    c690:	01000074 	movhi	r4,1
    c694:	21087504 	addi	r4,r4,8660
    c698:	000c59c0 	call	c59c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    c69c:	01000074 	movhi	r4,1
    c6a0:	21088004 	addi	r4,r4,8704
    c6a4:	000c59c0 	call	c59c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    c6a8:	01000074 	movhi	r4,1
    c6ac:	21088b04 	addi	r4,r4,8748
    c6b0:	000c59c0 	call	c59c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    c6b4:	01000074 	movhi	r4,1
    c6b8:	21089604 	addi	r4,r4,8792
    c6bc:	000c59c0 	call	c59c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    c6c0:	01000074 	movhi	r4,1
    c6c4:	2108a104 	addi	r4,r4,8836
    c6c8:	000c59c0 	call	c59c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    c6cc:	01000074 	movhi	r4,1
    c6d0:	2108ac04 	addi	r4,r4,8880
    c6d4:	000c59c0 	call	c59c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    c6d8:	01000074 	movhi	r4,1
    c6dc:	2108b704 	addi	r4,r4,8924
    c6e0:	000c59c0 	call	c59c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    c6e4:	01000074 	movhi	r4,1
    c6e8:	2108c204 	addi	r4,r4,8968
    c6ec:	000e1c40 	call	e1c4 <alt_up_ps2_init>
    c6f0:	01000074 	movhi	r4,1
    c6f4:	2108c204 	addi	r4,r4,8968
    c6f8:	000c59c0 	call	c59c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    c6fc:	01000074 	movhi	r4,1
    c700:	2108d004 	addi	r4,r4,9024
    c704:	000e1c40 	call	e1c4 <alt_up_ps2_init>
    c708:	01000074 	movhi	r4,1
    c70c:	2108d004 	addi	r4,r4,9024
    c710:	000c59c0 	call	c59c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    c714:	01000074 	movhi	r4,1
    c718:	2108de04 	addi	r4,r4,9080
    c71c:	000c59c0 	call	c59c <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    c720:	01000074 	movhi	r4,1
    c724:	2108e904 	addi	r4,r4,9124
    c728:	000c59c0 	call	c59c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
    c72c:	00800074 	movhi	r2,1
    c730:	1088f604 	addi	r2,r2,9176
    c734:	10800a17 	ldw	r2,40(r2)
    c738:	10800104 	addi	r2,r2,4
    c73c:	10800017 	ldw	r2,0(r2)
    c740:	10ffffcc 	andi	r3,r2,65535
    c744:	00800074 	movhi	r2,1
    c748:	1088f604 	addi	r2,r2,9176
    c74c:	10c00c15 	stw	r3,48(r2)
    c750:	00800074 	movhi	r2,1
    c754:	1088f604 	addi	r2,r2,9176
    c758:	10800a17 	ldw	r2,40(r2)
    c75c:	10800104 	addi	r2,r2,4
    c760:	10800017 	ldw	r2,0(r2)
    c764:	1006d43a 	srli	r3,r2,16
    c768:	00800074 	movhi	r2,1
    c76c:	1088f604 	addi	r2,r2,9176
    c770:	10c00d15 	stw	r3,52(r2)
    c774:	00800074 	movhi	r2,1
    c778:	1088f604 	addi	r2,r2,9176
    c77c:	10800c17 	ldw	r2,48(r2)
    c780:	10801068 	cmpgeui	r2,r2,65
    c784:	1000081e 	bne	r2,zero,c7a8 <alt_sys_init+0x1a0>
    c788:	00800074 	movhi	r2,1
    c78c:	1088f604 	addi	r2,r2,9176
    c790:	00c00fc4 	movi	r3,63
    c794:	10c00f15 	stw	r3,60(r2)
    c798:	00800074 	movhi	r2,1
    c79c:	1088f604 	addi	r2,r2,9176
    c7a0:	00c00184 	movi	r3,6
    c7a4:	10c01015 	stw	r3,64(r2)
    c7a8:	00800074 	movhi	r2,1
    c7ac:	1088f604 	addi	r2,r2,9176
    c7b0:	10800d17 	ldw	r2,52(r2)
    c7b4:	10800868 	cmpgeui	r2,r2,33
    c7b8:	1000041e 	bne	r2,zero,c7cc <alt_sys_init+0x1c4>
    c7bc:	00800074 	movhi	r2,1
    c7c0:	1088f604 	addi	r2,r2,9176
    c7c4:	00c007c4 	movi	r3,31
    c7c8:	10c01115 	stw	r3,68(r2)
    c7cc:	01000074 	movhi	r4,1
    c7d0:	2108f604 	addi	r4,r4,9176
    c7d4:	000eadc0 	call	eadc <alt_up_char_buffer_init>
    c7d8:	01000074 	movhi	r4,1
    c7dc:	2108f604 	addi	r4,r4,9176
    c7e0:	000c59c0 	call	c59c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
    c7e4:	00800074 	movhi	r2,1
    c7e8:	10890804 	addi	r2,r2,9248
    c7ec:	10800a17 	ldw	r2,40(r2)
    c7f0:	10800017 	ldw	r2,0(r2)
    c7f4:	1007883a 	mov	r3,r2
    c7f8:	00800074 	movhi	r2,1
    c7fc:	10890804 	addi	r2,r2,9248
    c800:	10c00b15 	stw	r3,44(r2)
    c804:	00800074 	movhi	r2,1
    c808:	10890804 	addi	r2,r2,9248
    c80c:	10800a17 	ldw	r2,40(r2)
    c810:	10800104 	addi	r2,r2,4
    c814:	10800017 	ldw	r2,0(r2)
    c818:	1007883a 	mov	r3,r2
    c81c:	00800074 	movhi	r2,1
    c820:	10890804 	addi	r2,r2,9248
    c824:	10c00c15 	stw	r3,48(r2)
    c828:	00800074 	movhi	r2,1
    c82c:	10890804 	addi	r2,r2,9248
    c830:	10800a17 	ldw	r2,40(r2)
    c834:	10800204 	addi	r2,r2,8
    c838:	10800017 	ldw	r2,0(r2)
    c83c:	10ffffcc 	andi	r3,r2,65535
    c840:	00800074 	movhi	r2,1
    c844:	10890804 	addi	r2,r2,9248
    c848:	10c00f15 	stw	r3,60(r2)
    c84c:	00800074 	movhi	r2,1
    c850:	10890804 	addi	r2,r2,9248
    c854:	10800a17 	ldw	r2,40(r2)
    c858:	10800204 	addi	r2,r2,8
    c85c:	10800017 	ldw	r2,0(r2)
    c860:	1006d43a 	srli	r3,r2,16
    c864:	00800074 	movhi	r2,1
    c868:	10890804 	addi	r2,r2,9248
    c86c:	10c01015 	stw	r3,64(r2)
    c870:	00800074 	movhi	r2,1
    c874:	10890804 	addi	r2,r2,9248
    c878:	10800a17 	ldw	r2,40(r2)
    c87c:	10800304 	addi	r2,r2,12
    c880:	10800017 	ldw	r2,0(r2)
    c884:	1005d07a 	srai	r2,r2,1
    c888:	10c0004c 	andi	r3,r2,1
    c88c:	00800074 	movhi	r2,1
    c890:	10890804 	addi	r2,r2,9248
    c894:	10c00d15 	stw	r3,52(r2)
    c898:	00800074 	movhi	r2,1
    c89c:	10890804 	addi	r2,r2,9248
    c8a0:	10800a17 	ldw	r2,40(r2)
    c8a4:	10800304 	addi	r2,r2,12
    c8a8:	10800017 	ldw	r2,0(r2)
    c8ac:	1005d13a 	srai	r2,r2,4
    c8b0:	10c003cc 	andi	r3,r2,15
    c8b4:	00800074 	movhi	r2,1
    c8b8:	10890804 	addi	r2,r2,9248
    c8bc:	10c00e15 	stw	r3,56(r2)
    c8c0:	00800074 	movhi	r2,1
    c8c4:	10890804 	addi	r2,r2,9248
    c8c8:	10800a17 	ldw	r2,40(r2)
    c8cc:	10800304 	addi	r2,r2,12
    c8d0:	10800017 	ldw	r2,0(r2)
    c8d4:	1005d43a 	srai	r2,r2,16
    c8d8:	e0bfff05 	stb	r2,-4(fp)
    c8dc:	00800074 	movhi	r2,1
    c8e0:	10890804 	addi	r2,r2,9248
    c8e4:	10800a17 	ldw	r2,40(r2)
    c8e8:	10800304 	addi	r2,r2,12
    c8ec:	10800017 	ldw	r2,0(r2)
    c8f0:	1004d63a 	srli	r2,r2,24
    c8f4:	e0bfff45 	stb	r2,-3(fp)
    c8f8:	00800074 	movhi	r2,1
    c8fc:	10890804 	addi	r2,r2,9248
    c900:	10800e17 	ldw	r2,56(r2)
    c904:	10800058 	cmpnei	r2,r2,1
    c908:	1000041e 	bne	r2,zero,c91c <alt_sys_init+0x314>
    c90c:	00800074 	movhi	r2,1
    c910:	10890804 	addi	r2,r2,9248
    c914:	10001115 	stw	zero,68(r2)
    c918:	00000e06 	br	c954 <alt_sys_init+0x34c>
    c91c:	00800074 	movhi	r2,1
    c920:	10890804 	addi	r2,r2,9248
    c924:	10800e17 	ldw	r2,56(r2)
    c928:	10800098 	cmpnei	r2,r2,2
    c92c:	1000051e 	bne	r2,zero,c944 <alt_sys_init+0x33c>
    c930:	00800074 	movhi	r2,1
    c934:	10890804 	addi	r2,r2,9248
    c938:	00c00044 	movi	r3,1
    c93c:	10c01115 	stw	r3,68(r2)
    c940:	00000406 	br	c954 <alt_sys_init+0x34c>
    c944:	00800074 	movhi	r2,1
    c948:	10890804 	addi	r2,r2,9248
    c94c:	00c00084 	movi	r3,2
    c950:	10c01115 	stw	r3,68(r2)
    c954:	e0bfff03 	ldbu	r2,-4(fp)
    c958:	00c00804 	movi	r3,32
    c95c:	1885c83a 	sub	r2,r3,r2
    c960:	00ffffc4 	movi	r3,-1
    c964:	1886d83a 	srl	r3,r3,r2
    c968:	00800074 	movhi	r2,1
    c96c:	10890804 	addi	r2,r2,9248
    c970:	10c01215 	stw	r3,72(r2)
    c974:	e0ffff03 	ldbu	r3,-4(fp)
    c978:	00800074 	movhi	r2,1
    c97c:	10890804 	addi	r2,r2,9248
    c980:	10801117 	ldw	r2,68(r2)
    c984:	1887883a 	add	r3,r3,r2
    c988:	00800074 	movhi	r2,1
    c98c:	10890804 	addi	r2,r2,9248
    c990:	10c01315 	stw	r3,76(r2)
    c994:	e0bfff43 	ldbu	r2,-3(fp)
    c998:	00c00804 	movi	r3,32
    c99c:	1885c83a 	sub	r2,r3,r2
    c9a0:	00ffffc4 	movi	r3,-1
    c9a4:	1886d83a 	srl	r3,r3,r2
    c9a8:	00800074 	movhi	r2,1
    c9ac:	10890804 	addi	r2,r2,9248
    c9b0:	10c01415 	stw	r3,80(r2)
    c9b4:	01000074 	movhi	r4,1
    c9b8:	21090804 	addi	r4,r4,9248
    c9bc:	000c59c0 	call	c59c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    c9c0:	01000074 	movhi	r4,1
    c9c4:	21091d04 	addi	r4,r4,9332
    c9c8:	000c59c0 	call	c59c <alt_dev_reg>
}
    c9cc:	e037883a 	mov	sp,fp
    c9d0:	dfc00117 	ldw	ra,4(sp)
    c9d4:	df000017 	ldw	fp,0(sp)
    c9d8:	dec00204 	addi	sp,sp,8
    c9dc:	f800283a 	ret

0000c9e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    c9e0:	defffa04 	addi	sp,sp,-24
    c9e4:	dfc00515 	stw	ra,20(sp)
    c9e8:	df000415 	stw	fp,16(sp)
    c9ec:	df000404 	addi	fp,sp,16
    c9f0:	e13ffd15 	stw	r4,-12(fp)
    c9f4:	e17ffe15 	stw	r5,-8(fp)
    c9f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c9fc:	e0bffd17 	ldw	r2,-12(fp)
    ca00:	10800017 	ldw	r2,0(r2)
    ca04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ca08:	e0bffc17 	ldw	r2,-16(fp)
    ca0c:	10c00a04 	addi	r3,r2,40
    ca10:	e0bffd17 	ldw	r2,-12(fp)
    ca14:	10800217 	ldw	r2,8(r2)
    ca18:	1809883a 	mov	r4,r3
    ca1c:	e17ffe17 	ldw	r5,-8(fp)
    ca20:	e1bfff17 	ldw	r6,-4(fp)
    ca24:	100f883a 	mov	r7,r2
    ca28:	000d1900 	call	d190 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    ca2c:	e037883a 	mov	sp,fp
    ca30:	dfc00117 	ldw	ra,4(sp)
    ca34:	df000017 	ldw	fp,0(sp)
    ca38:	dec00204 	addi	sp,sp,8
    ca3c:	f800283a 	ret

0000ca40 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    ca40:	defffa04 	addi	sp,sp,-24
    ca44:	dfc00515 	stw	ra,20(sp)
    ca48:	df000415 	stw	fp,16(sp)
    ca4c:	df000404 	addi	fp,sp,16
    ca50:	e13ffd15 	stw	r4,-12(fp)
    ca54:	e17ffe15 	stw	r5,-8(fp)
    ca58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ca5c:	e0bffd17 	ldw	r2,-12(fp)
    ca60:	10800017 	ldw	r2,0(r2)
    ca64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ca68:	e0bffc17 	ldw	r2,-16(fp)
    ca6c:	10c00a04 	addi	r3,r2,40
    ca70:	e0bffd17 	ldw	r2,-12(fp)
    ca74:	10800217 	ldw	r2,8(r2)
    ca78:	1809883a 	mov	r4,r3
    ca7c:	e17ffe17 	ldw	r5,-8(fp)
    ca80:	e1bfff17 	ldw	r6,-4(fp)
    ca84:	100f883a 	mov	r7,r2
    ca88:	000d4440 	call	d444 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    ca8c:	e037883a 	mov	sp,fp
    ca90:	dfc00117 	ldw	ra,4(sp)
    ca94:	df000017 	ldw	fp,0(sp)
    ca98:	dec00204 	addi	sp,sp,8
    ca9c:	f800283a 	ret

0000caa0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    caa0:	defffc04 	addi	sp,sp,-16
    caa4:	dfc00315 	stw	ra,12(sp)
    caa8:	df000215 	stw	fp,8(sp)
    caac:	df000204 	addi	fp,sp,8
    cab0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    cab4:	e0bfff17 	ldw	r2,-4(fp)
    cab8:	10800017 	ldw	r2,0(r2)
    cabc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    cac0:	e0bffe17 	ldw	r2,-8(fp)
    cac4:	10c00a04 	addi	r3,r2,40
    cac8:	e0bfff17 	ldw	r2,-4(fp)
    cacc:	10800217 	ldw	r2,8(r2)
    cad0:	1809883a 	mov	r4,r3
    cad4:	100b883a 	mov	r5,r2
    cad8:	000d03c0 	call	d03c <altera_avalon_jtag_uart_close>
}
    cadc:	e037883a 	mov	sp,fp
    cae0:	dfc00117 	ldw	ra,4(sp)
    cae4:	df000017 	ldw	fp,0(sp)
    cae8:	dec00204 	addi	sp,sp,8
    caec:	f800283a 	ret

0000caf0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    caf0:	defffa04 	addi	sp,sp,-24
    caf4:	dfc00515 	stw	ra,20(sp)
    caf8:	df000415 	stw	fp,16(sp)
    cafc:	df000404 	addi	fp,sp,16
    cb00:	e13ffd15 	stw	r4,-12(fp)
    cb04:	e17ffe15 	stw	r5,-8(fp)
    cb08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    cb0c:	e0bffd17 	ldw	r2,-12(fp)
    cb10:	10800017 	ldw	r2,0(r2)
    cb14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    cb18:	e0bffc17 	ldw	r2,-16(fp)
    cb1c:	10800a04 	addi	r2,r2,40
    cb20:	1009883a 	mov	r4,r2
    cb24:	e17ffe17 	ldw	r5,-8(fp)
    cb28:	e1bfff17 	ldw	r6,-4(fp)
    cb2c:	000d0a40 	call	d0a4 <altera_avalon_jtag_uart_ioctl>
}
    cb30:	e037883a 	mov	sp,fp
    cb34:	dfc00117 	ldw	ra,4(sp)
    cb38:	df000017 	ldw	fp,0(sp)
    cb3c:	dec00204 	addi	sp,sp,8
    cb40:	f800283a 	ret

0000cb44 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    cb44:	defff104 	addi	sp,sp,-60
    cb48:	dfc00e15 	stw	ra,56(sp)
    cb4c:	df000d15 	stw	fp,52(sp)
    cb50:	df000d04 	addi	fp,sp,52
    cb54:	e13ff915 	stw	r4,-28(fp)
    cb58:	e17ffa15 	stw	r5,-24(fp)
    cb5c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    cb60:	e0bff917 	ldw	r2,-28(fp)
    cb64:	10800c04 	addi	r2,r2,48
    cb68:	e0bff315 	stw	r2,-52(fp)
    cb6c:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    cb70:	e0fff40b 	ldhu	r3,-48(fp)
    cb74:	e0bff884 	addi	r2,fp,-30
    cb78:	1809883a 	mov	r4,r3
    cb7c:	100b883a 	mov	r5,r2
    cb80:	0006d900 	call	6d90 <OSFlagCreate>
    cb84:	1007883a 	mov	r3,r2
    cb88:	e0bff317 	ldw	r2,-52(fp)
    cb8c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    cb90:	e0bff917 	ldw	r2,-28(fp)
    cb94:	10800a04 	addi	r2,r2,40
    cb98:	e0bff515 	stw	r2,-44(fp)
    cb9c:	00800044 	movi	r2,1
    cba0:	e0bff60d 	sth	r2,-40(fp)
    cba4:	e0bff60b 	ldhu	r2,-40(fp)
    cba8:	1009883a 	mov	r4,r2
    cbac:	0009ce80 	call	9ce8 <OSSemCreate>
    cbb0:	1007883a 	mov	r3,r2
    cbb4:	e0bff517 	ldw	r2,-44(fp)
    cbb8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
    cbbc:	e0bff917 	ldw	r2,-28(fp)
    cbc0:	10800b04 	addi	r2,r2,44
    cbc4:	e0bff715 	stw	r2,-36(fp)
    cbc8:	00800044 	movi	r2,1
    cbcc:	e0bff80d 	sth	r2,-32(fp)
    cbd0:	e0bff80b 	ldhu	r2,-32(fp)
    cbd4:	1009883a 	mov	r4,r2
    cbd8:	0009ce80 	call	9ce8 <OSSemCreate>
    cbdc:	1007883a 	mov	r3,r2
    cbe0:	e0bff717 	ldw	r2,-36(fp)
    cbe4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    cbe8:	e0bff917 	ldw	r2,-28(fp)
    cbec:	00c00044 	movi	r3,1
    cbf0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    cbf4:	e0bff917 	ldw	r2,-28(fp)
    cbf8:	10800017 	ldw	r2,0(r2)
    cbfc:	10800104 	addi	r2,r2,4
    cc00:	1007883a 	mov	r3,r2
    cc04:	e0bff917 	ldw	r2,-28(fp)
    cc08:	10800817 	ldw	r2,32(r2)
    cc0c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    cc10:	e0bffb17 	ldw	r2,-20(fp)
    cc14:	1009883a 	mov	r4,r2
    cc18:	e17ff917 	ldw	r5,-28(fp)
    cc1c:	01800074 	movhi	r6,1
    cc20:	31b32104 	addi	r6,r6,-13180
    cc24:	000f2c40 	call	f2c4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    cc28:	e0bff917 	ldw	r2,-28(fp)
    cc2c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    cc30:	e0bff917 	ldw	r2,-28(fp)
    cc34:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    cc38:	00800074 	movhi	r2,1
    cc3c:	10914004 	addi	r2,r2,17664
    cc40:	10800017 	ldw	r2,0(r2)
    cc44:	1809883a 	mov	r4,r3
    cc48:	100b883a 	mov	r5,r2
    cc4c:	01800074 	movhi	r6,1
    cc50:	31b3cb04 	addi	r6,r6,-12500
    cc54:	e1fff917 	ldw	r7,-28(fp)
    cc58:	000edc40 	call	edc4 <alt_alarm_start>
    cc5c:	1000040e 	bge	r2,zero,cc70 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    cc60:	e0fff917 	ldw	r3,-28(fp)
    cc64:	00a00034 	movhi	r2,32768
    cc68:	10bfffc4 	addi	r2,r2,-1
    cc6c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    cc70:	e037883a 	mov	sp,fp
    cc74:	dfc00117 	ldw	ra,4(sp)
    cc78:	df000017 	ldw	fp,0(sp)
    cc7c:	dec00204 	addi	sp,sp,8
    cc80:	f800283a 	ret

0000cc84 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    cc84:	defff104 	addi	sp,sp,-60
    cc88:	dfc00e15 	stw	ra,56(sp)
    cc8c:	df000d15 	stw	fp,52(sp)
    cc90:	df000d04 	addi	fp,sp,52
    cc94:	e13ffe15 	stw	r4,-8(fp)
    cc98:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    cc9c:	e0bffe17 	ldw	r2,-8(fp)
    cca0:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
    cca4:	e0bff517 	ldw	r2,-44(fp)
    cca8:	10800017 	ldw	r2,0(r2)
    ccac:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ccb0:	e0bff617 	ldw	r2,-40(fp)
    ccb4:	10800104 	addi	r2,r2,4
    ccb8:	10800037 	ldwio	r2,0(r2)
    ccbc:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ccc0:	e0bff717 	ldw	r2,-36(fp)
    ccc4:	1080c00c 	andi	r2,r2,768
    ccc8:	1000011e 	bne	r2,zero,ccd0 <altera_avalon_jtag_uart_irq+0x4c>
      break;
    cccc:	00009206 	br	cf18 <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ccd0:	e0bff717 	ldw	r2,-36(fp)
    ccd4:	1080400c 	andi	r2,r2,256
    ccd8:	10004726 	beq	r2,zero,cdf8 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    ccdc:	00800074 	movhi	r2,1
    cce0:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    cce4:	e0bff517 	ldw	r2,-44(fp)
    cce8:	10800d17 	ldw	r2,52(r2)
    ccec:	10800044 	addi	r2,r2,1
    ccf0:	1081ffcc 	andi	r2,r2,2047
    ccf4:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
    ccf8:	e0bff517 	ldw	r2,-44(fp)
    ccfc:	10c00e17 	ldw	r3,56(r2)
    cd00:	e0bff817 	ldw	r2,-32(fp)
    cd04:	1880011e 	bne	r3,r2,cd0c <altera_avalon_jtag_uart_irq+0x88>
          break;
    cd08:	00002906 	br	cdb0 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    cd0c:	e0bff617 	ldw	r2,-40(fp)
    cd10:	10800037 	ldwio	r2,0(r2)
    cd14:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    cd18:	e0bff317 	ldw	r2,-52(fp)
    cd1c:	10a0000c 	andi	r2,r2,32768
    cd20:	1000011e 	bne	r2,zero,cd28 <altera_avalon_jtag_uart_irq+0xa4>
          break;
    cd24:	00002206 	br	cdb0 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    cd28:	e0bff517 	ldw	r2,-44(fp)
    cd2c:	10800d17 	ldw	r2,52(r2)
    cd30:	e0fff317 	ldw	r3,-52(fp)
    cd34:	1809883a 	mov	r4,r3
    cd38:	e0fff517 	ldw	r3,-44(fp)
    cd3c:	1885883a 	add	r2,r3,r2
    cd40:	10801104 	addi	r2,r2,68
    cd44:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    cd48:	e0bff517 	ldw	r2,-44(fp)
    cd4c:	10800d17 	ldw	r2,52(r2)
    cd50:	10800044 	addi	r2,r2,1
    cd54:	10c1ffcc 	andi	r3,r2,2047
    cd58:	e0bff517 	ldw	r2,-44(fp)
    cd5c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    cd60:	e0bff517 	ldw	r2,-44(fp)
    cd64:	10800c17 	ldw	r2,48(r2)
    cd68:	e0bff915 	stw	r2,-28(fp)
    cd6c:	00800044 	movi	r2,1
    cd70:	e0bffa0d 	sth	r2,-24(fp)
    cd74:	00800044 	movi	r2,1
    cd78:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    cd7c:	00800074 	movhi	r2,1
    cd80:	10912b44 	addi	r2,r2,17581
    cd84:	10800003 	ldbu	r2,0(r2)
    cd88:	10803fcc 	andi	r2,r2,255
    cd8c:	103fd526 	beq	r2,zero,cce4 <__alt_mem_Flash_flash_data+0xf400cce4>
  {
    OSFlagPost (group, flags, opt, &err);
    cd90:	e17ffa0b 	ldhu	r5,-24(fp)
    cd94:	e0fffa83 	ldbu	r3,-22(fp)
    cd98:	e0bffcc4 	addi	r2,fp,-13
    cd9c:	e13ff917 	ldw	r4,-28(fp)
    cda0:	180d883a 	mov	r6,r3
    cda4:	100f883a 	mov	r7,r2
    cda8:	0007a000 	call	7a00 <OSFlagPost>
      }
    cdac:	003fcd06 	br	cce4 <__alt_mem_Flash_flash_data+0xf400cce4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    cdb0:	e0bff317 	ldw	r2,-52(fp)
    cdb4:	10bfffec 	andhi	r2,r2,65535
    cdb8:	10000f26 	beq	r2,zero,cdf8 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    cdbc:	e0bff517 	ldw	r2,-44(fp)
    cdc0:	10c00817 	ldw	r3,32(r2)
    cdc4:	00bfff84 	movi	r2,-2
    cdc8:	1886703a 	and	r3,r3,r2
    cdcc:	e0bff517 	ldw	r2,-44(fp)
    cdd0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    cdd4:	e0bff617 	ldw	r2,-40(fp)
    cdd8:	10800104 	addi	r2,r2,4
    cddc:	1007883a 	mov	r3,r2
    cde0:	e0bff517 	ldw	r2,-44(fp)
    cde4:	10800817 	ldw	r2,32(r2)
    cde8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    cdec:	e0bff617 	ldw	r2,-40(fp)
    cdf0:	10800104 	addi	r2,r2,4
    cdf4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    cdf8:	e0bff717 	ldw	r2,-36(fp)
    cdfc:	1080800c 	andi	r2,r2,512
    ce00:	10004426 	beq	r2,zero,cf14 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ce04:	e0bff717 	ldw	r2,-36(fp)
    ce08:	1004d43a 	srli	r2,r2,16
    ce0c:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    ce10:	00002706 	br	ceb0 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ce14:	e0bff617 	ldw	r2,-40(fp)
    ce18:	e0fff517 	ldw	r3,-44(fp)
    ce1c:	18c01017 	ldw	r3,64(r3)
    ce20:	e13ff517 	ldw	r4,-44(fp)
    ce24:	20c7883a 	add	r3,r4,r3
    ce28:	18c21104 	addi	r3,r3,2116
    ce2c:	18c00003 	ldbu	r3,0(r3)
    ce30:	18c03fcc 	andi	r3,r3,255
    ce34:	18c0201c 	xori	r3,r3,128
    ce38:	18ffe004 	addi	r3,r3,-128
    ce3c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ce40:	e0bff517 	ldw	r2,-44(fp)
    ce44:	10801017 	ldw	r2,64(r2)
    ce48:	10800044 	addi	r2,r2,1
    ce4c:	10c1ffcc 	andi	r3,r2,2047
    ce50:	e0bff517 	ldw	r2,-44(fp)
    ce54:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    ce58:	e0bff517 	ldw	r2,-44(fp)
    ce5c:	10800c17 	ldw	r2,48(r2)
    ce60:	e0bffb15 	stw	r2,-20(fp)
    ce64:	00800084 	movi	r2,2
    ce68:	e0bffc0d 	sth	r2,-16(fp)
    ce6c:	00800044 	movi	r2,1
    ce70:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    ce74:	00800074 	movhi	r2,1
    ce78:	10912b44 	addi	r2,r2,17581
    ce7c:	10800003 	ldbu	r2,0(r2)
    ce80:	10803fcc 	andi	r2,r2,255
    ce84:	10000726 	beq	r2,zero,cea4 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
    ce88:	e17ffc0b 	ldhu	r5,-16(fp)
    ce8c:	e0fffc83 	ldbu	r3,-14(fp)
    ce90:	e0bffd04 	addi	r2,fp,-12
    ce94:	e13ffb17 	ldw	r4,-20(fp)
    ce98:	180d883a 	mov	r6,r3
    ce9c:	100f883a 	mov	r7,r2
    cea0:	0007a000 	call	7a00 <OSFlagPost>

        space--;
    cea4:	e0bff417 	ldw	r2,-48(fp)
    cea8:	10bfffc4 	addi	r2,r2,-1
    ceac:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ceb0:	e0bff417 	ldw	r2,-48(fp)
    ceb4:	10000526 	beq	r2,zero,cecc <altera_avalon_jtag_uart_irq+0x248>
    ceb8:	e0bff517 	ldw	r2,-44(fp)
    cebc:	10c01017 	ldw	r3,64(r2)
    cec0:	e0bff517 	ldw	r2,-44(fp)
    cec4:	10800f17 	ldw	r2,60(r2)
    cec8:	18bfd21e 	bne	r3,r2,ce14 <__alt_mem_Flash_flash_data+0xf400ce14>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    cecc:	e0bff417 	ldw	r2,-48(fp)
    ced0:	10001026 	beq	r2,zero,cf14 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ced4:	e0bff517 	ldw	r2,-44(fp)
    ced8:	10c00817 	ldw	r3,32(r2)
    cedc:	00bfff44 	movi	r2,-3
    cee0:	1886703a 	and	r3,r3,r2
    cee4:	e0bff517 	ldw	r2,-44(fp)
    cee8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ceec:	e0bff517 	ldw	r2,-44(fp)
    cef0:	10800017 	ldw	r2,0(r2)
    cef4:	10800104 	addi	r2,r2,4
    cef8:	1007883a 	mov	r3,r2
    cefc:	e0bff517 	ldw	r2,-44(fp)
    cf00:	10800817 	ldw	r2,32(r2)
    cf04:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    cf08:	e0bff617 	ldw	r2,-40(fp)
    cf0c:	10800104 	addi	r2,r2,4
    cf10:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    cf14:	003f6606 	br	ccb0 <__alt_mem_Flash_flash_data+0xf400ccb0>
}
    cf18:	e037883a 	mov	sp,fp
    cf1c:	dfc00117 	ldw	ra,4(sp)
    cf20:	df000017 	ldw	fp,0(sp)
    cf24:	dec00204 	addi	sp,sp,8
    cf28:	f800283a 	ret

0000cf2c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    cf2c:	defff904 	addi	sp,sp,-28
    cf30:	dfc00615 	stw	ra,24(sp)
    cf34:	df000515 	stw	fp,20(sp)
    cf38:	df000504 	addi	fp,sp,20
    cf3c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    cf40:	e0bfff17 	ldw	r2,-4(fp)
    cf44:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    cf48:	e0bffb17 	ldw	r2,-20(fp)
    cf4c:	10800017 	ldw	r2,0(r2)
    cf50:	10800104 	addi	r2,r2,4
    cf54:	10800037 	ldwio	r2,0(r2)
    cf58:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    cf5c:	e0bffc17 	ldw	r2,-16(fp)
    cf60:	1081000c 	andi	r2,r2,1024
    cf64:	10000b26 	beq	r2,zero,cf94 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    cf68:	e0bffb17 	ldw	r2,-20(fp)
    cf6c:	10800017 	ldw	r2,0(r2)
    cf70:	10800104 	addi	r2,r2,4
    cf74:	1007883a 	mov	r3,r2
    cf78:	e0bffb17 	ldw	r2,-20(fp)
    cf7c:	10800817 	ldw	r2,32(r2)
    cf80:	10810014 	ori	r2,r2,1024
    cf84:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    cf88:	e0bffb17 	ldw	r2,-20(fp)
    cf8c:	10000915 	stw	zero,36(r2)
    cf90:	00002206 	br	d01c <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    cf94:	e0bffb17 	ldw	r2,-20(fp)
    cf98:	10c00917 	ldw	r3,36(r2)
    cf9c:	00a00034 	movhi	r2,32768
    cfa0:	10bfff04 	addi	r2,r2,-4
    cfa4:	10c01d36 	bltu	r2,r3,d01c <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
    cfa8:	e0bffb17 	ldw	r2,-20(fp)
    cfac:	10800917 	ldw	r2,36(r2)
    cfb0:	10c00044 	addi	r3,r2,1
    cfb4:	e0bffb17 	ldw	r2,-20(fp)
    cfb8:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    cfbc:	e0bffb17 	ldw	r2,-20(fp)
    cfc0:	10c00917 	ldw	r3,36(r2)
    cfc4:	e0bffb17 	ldw	r2,-20(fp)
    cfc8:	10800117 	ldw	r2,4(r2)
    cfcc:	18801336 	bltu	r3,r2,d01c <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    cfd0:	e0bffb17 	ldw	r2,-20(fp)
    cfd4:	10800c17 	ldw	r2,48(r2)
    cfd8:	e0bffd15 	stw	r2,-12(fp)
    cfdc:	00800104 	movi	r2,4
    cfe0:	e0bffe0d 	sth	r2,-8(fp)
    cfe4:	00800044 	movi	r2,1
    cfe8:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    cfec:	00800074 	movhi	r2,1
    cff0:	10912b44 	addi	r2,r2,17581
    cff4:	10800003 	ldbu	r2,0(r2)
    cff8:	10803fcc 	andi	r2,r2,255
    cffc:	10000726 	beq	r2,zero,d01c <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
    d000:	e17ffe0b 	ldhu	r5,-8(fp)
    d004:	e0fffe83 	ldbu	r3,-6(fp)
    d008:	e0bffec4 	addi	r2,fp,-5
    d00c:	e13ffd17 	ldw	r4,-12(fp)
    d010:	180d883a 	mov	r6,r3
    d014:	100f883a 	mov	r7,r2
    d018:	0007a000 	call	7a00 <OSFlagPost>
    d01c:	00800074 	movhi	r2,1
    d020:	10914004 	addi	r2,r2,17664
    d024:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
    d028:	e037883a 	mov	sp,fp
    d02c:	dfc00117 	ldw	ra,4(sp)
    d030:	df000017 	ldw	fp,0(sp)
    d034:	dec00204 	addi	sp,sp,8
    d038:	f800283a 	ret

0000d03c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    d03c:	defffd04 	addi	sp,sp,-12
    d040:	df000215 	stw	fp,8(sp)
    d044:	df000204 	addi	fp,sp,8
    d048:	e13ffe15 	stw	r4,-8(fp)
    d04c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    d050:	00000506 	br	d068 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    d054:	e0bfff17 	ldw	r2,-4(fp)
    d058:	1090000c 	andi	r2,r2,16384
    d05c:	10000226 	beq	r2,zero,d068 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    d060:	00bffd44 	movi	r2,-11
    d064:	00000b06 	br	d094 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    d068:	e0bffe17 	ldw	r2,-8(fp)
    d06c:	10c01017 	ldw	r3,64(r2)
    d070:	e0bffe17 	ldw	r2,-8(fp)
    d074:	10800f17 	ldw	r2,60(r2)
    d078:	18800526 	beq	r3,r2,d090 <altera_avalon_jtag_uart_close+0x54>
    d07c:	e0bffe17 	ldw	r2,-8(fp)
    d080:	10c00917 	ldw	r3,36(r2)
    d084:	e0bffe17 	ldw	r2,-8(fp)
    d088:	10800117 	ldw	r2,4(r2)
    d08c:	18bff136 	bltu	r3,r2,d054 <__alt_mem_Flash_flash_data+0xf400d054>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    d090:	0005883a 	mov	r2,zero
}
    d094:	e037883a 	mov	sp,fp
    d098:	df000017 	ldw	fp,0(sp)
    d09c:	dec00104 	addi	sp,sp,4
    d0a0:	f800283a 	ret

0000d0a4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    d0a4:	defffa04 	addi	sp,sp,-24
    d0a8:	df000515 	stw	fp,20(sp)
    d0ac:	df000504 	addi	fp,sp,20
    d0b0:	e13ffd15 	stw	r4,-12(fp)
    d0b4:	e17ffe15 	stw	r5,-8(fp)
    d0b8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    d0bc:	00bff9c4 	movi	r2,-25
    d0c0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    d0c4:	e0bffe17 	ldw	r2,-8(fp)
    d0c8:	10da8060 	cmpeqi	r3,r2,27137
    d0cc:	1800031e 	bne	r3,zero,d0dc <altera_avalon_jtag_uart_ioctl+0x38>
    d0d0:	109a80a0 	cmpeqi	r2,r2,27138
    d0d4:	1000191e 	bne	r2,zero,d13c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    d0d8:	00002806 	br	d17c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    d0dc:	e0bffd17 	ldw	r2,-12(fp)
    d0e0:	10c00117 	ldw	r3,4(r2)
    d0e4:	00a00034 	movhi	r2,32768
    d0e8:	10bfffc4 	addi	r2,r2,-1
    d0ec:	18801226 	beq	r3,r2,d138 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    d0f0:	e0bfff17 	ldw	r2,-4(fp)
    d0f4:	10800017 	ldw	r2,0(r2)
    d0f8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    d0fc:	e0bffc17 	ldw	r2,-16(fp)
    d100:	10800090 	cmplti	r2,r2,2
    d104:	1000061e 	bne	r2,zero,d120 <altera_avalon_jtag_uart_ioctl+0x7c>
    d108:	e0fffc17 	ldw	r3,-16(fp)
    d10c:	00a00034 	movhi	r2,32768
    d110:	10bfffc4 	addi	r2,r2,-1
    d114:	18800226 	beq	r3,r2,d120 <altera_avalon_jtag_uart_ioctl+0x7c>
    d118:	e0bffc17 	ldw	r2,-16(fp)
    d11c:	00000206 	br	d128 <altera_avalon_jtag_uart_ioctl+0x84>
    d120:	00a00034 	movhi	r2,32768
    d124:	10bfff84 	addi	r2,r2,-2
    d128:	e0fffd17 	ldw	r3,-12(fp)
    d12c:	18800115 	stw	r2,4(r3)
      rc = 0;
    d130:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    d134:	00001106 	br	d17c <altera_avalon_jtag_uart_ioctl+0xd8>
    d138:	00001006 	br	d17c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    d13c:	e0bffd17 	ldw	r2,-12(fp)
    d140:	10c00117 	ldw	r3,4(r2)
    d144:	00a00034 	movhi	r2,32768
    d148:	10bfffc4 	addi	r2,r2,-1
    d14c:	18800a26 	beq	r3,r2,d178 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    d150:	e0bffd17 	ldw	r2,-12(fp)
    d154:	10c00917 	ldw	r3,36(r2)
    d158:	e0bffd17 	ldw	r2,-12(fp)
    d15c:	10800117 	ldw	r2,4(r2)
    d160:	1885803a 	cmpltu	r2,r3,r2
    d164:	10c03fcc 	andi	r3,r2,255
    d168:	e0bfff17 	ldw	r2,-4(fp)
    d16c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    d170:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    d174:	00000006 	br	d178 <altera_avalon_jtag_uart_ioctl+0xd4>
    d178:	0001883a 	nop

  default:
    break;
  }

  return rc;
    d17c:	e0bffb17 	ldw	r2,-20(fp)
}
    d180:	e037883a 	mov	sp,fp
    d184:	df000017 	ldw	fp,0(sp)
    d188:	dec00104 	addi	sp,sp,4
    d18c:	f800283a 	ret

0000d190 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    d190:	deffec04 	addi	sp,sp,-80
    d194:	dfc01315 	stw	ra,76(sp)
    d198:	df001215 	stw	fp,72(sp)
    d19c:	df001204 	addi	fp,sp,72
    d1a0:	e13ffc15 	stw	r4,-16(fp)
    d1a4:	e17ffd15 	stw	r5,-12(fp)
    d1a8:	e1bffe15 	stw	r6,-8(fp)
    d1ac:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    d1b0:	e0bffd17 	ldw	r2,-12(fp)
    d1b4:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    d1b8:	e0bffc17 	ldw	r2,-16(fp)
    d1bc:	10800a17 	ldw	r2,40(r2)
    d1c0:	e0bff415 	stw	r2,-48(fp)
    d1c4:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    d1c8:	e0fff50b 	ldhu	r3,-44(fp)
    d1cc:	e0bffb04 	addi	r2,fp,-20
    d1d0:	e13ff417 	ldw	r4,-48(fp)
    d1d4:	180b883a 	mov	r5,r3
    d1d8:	100d883a 	mov	r6,r2
    d1dc:	000a0500 	call	a050 <OSSemPend>

  while (space > 0)
    d1e0:	00006506 	br	d378 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    d1e4:	e0bffc17 	ldw	r2,-16(fp)
    d1e8:	10800d17 	ldw	r2,52(r2)
    d1ec:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
    d1f0:	e0bffc17 	ldw	r2,-16(fp)
    d1f4:	10800e17 	ldw	r2,56(r2)
    d1f8:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
    d1fc:	e0fff117 	ldw	r3,-60(fp)
    d200:	e0bff217 	ldw	r2,-56(fp)
    d204:	18800536 	bltu	r3,r2,d21c <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    d208:	e0fff117 	ldw	r3,-60(fp)
    d20c:	e0bff217 	ldw	r2,-56(fp)
    d210:	1885c83a 	sub	r2,r3,r2
    d214:	e0bff015 	stw	r2,-64(fp)
    d218:	00000406 	br	d22c <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    d21c:	00c20004 	movi	r3,2048
    d220:	e0bff217 	ldw	r2,-56(fp)
    d224:	1885c83a 	sub	r2,r3,r2
    d228:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
    d22c:	e0bff017 	ldw	r2,-64(fp)
    d230:	1000011e 	bne	r2,zero,d238 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
    d234:	00001d06 	br	d2ac <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
    d238:	e0fffe17 	ldw	r3,-8(fp)
    d23c:	e0bff017 	ldw	r2,-64(fp)
    d240:	1880022e 	bgeu	r3,r2,d24c <altera_avalon_jtag_uart_read+0xbc>
        n = space;
    d244:	e0bffe17 	ldw	r2,-8(fp)
    d248:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    d24c:	e0bff217 	ldw	r2,-56(fp)
    d250:	10801104 	addi	r2,r2,68
    d254:	e0fffc17 	ldw	r3,-16(fp)
    d258:	1885883a 	add	r2,r3,r2
    d25c:	e13fef17 	ldw	r4,-68(fp)
    d260:	100b883a 	mov	r5,r2
    d264:	e1bff017 	ldw	r6,-64(fp)
    d268:	0001e700 	call	1e70 <memcpy>
      ptr   += n;
    d26c:	e0ffef17 	ldw	r3,-68(fp)
    d270:	e0bff017 	ldw	r2,-64(fp)
    d274:	1885883a 	add	r2,r3,r2
    d278:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
    d27c:	e0fffe17 	ldw	r3,-8(fp)
    d280:	e0bff017 	ldw	r2,-64(fp)
    d284:	1885c83a 	sub	r2,r3,r2
    d288:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d28c:	e0fff217 	ldw	r3,-56(fp)
    d290:	e0bff017 	ldw	r2,-64(fp)
    d294:	1885883a 	add	r2,r3,r2
    d298:	10c1ffcc 	andi	r3,r2,2047
    d29c:	e0bffc17 	ldw	r2,-16(fp)
    d2a0:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    d2a4:	e0bffe17 	ldw	r2,-8(fp)
    d2a8:	00bfce16 	blt	zero,r2,d1e4 <__alt_mem_Flash_flash_data+0xf400d1e4>

    /* If we read any data then return it */
    if (ptr != buffer)
    d2ac:	e0ffef17 	ldw	r3,-68(fp)
    d2b0:	e0bffd17 	ldw	r2,-12(fp)
    d2b4:	18800126 	beq	r3,r2,d2bc <altera_avalon_jtag_uart_read+0x12c>
      break;
    d2b8:	00003106 	br	d380 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    d2bc:	e0bfff17 	ldw	r2,-4(fp)
    d2c0:	1090000c 	andi	r2,r2,16384
    d2c4:	10000126 	beq	r2,zero,d2cc <altera_avalon_jtag_uart_read+0x13c>
      break;
    d2c8:	00002d06 	br	d380 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    d2cc:	00800074 	movhi	r2,1
    d2d0:	10912b44 	addi	r2,r2,17581
    d2d4:	10800003 	ldbu	r2,0(r2)
    d2d8:	10803fcc 	andi	r2,r2,255
    d2dc:	10800058 	cmpnei	r2,r2,1
    d2e0:	1000161e 	bne	r2,zero,d33c <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    d2e4:	e0bffc17 	ldw	r2,-16(fp)
    d2e8:	10800c17 	ldw	r2,48(r2)
    d2ec:	e0bff615 	stw	r2,-40(fp)
    d2f0:	00800144 	movi	r2,5
    d2f4:	e0bff70d 	sth	r2,-36(fp)
    d2f8:	00bfe0c4 	movi	r2,-125
    d2fc:	e0bff785 	stb	r2,-34(fp)
    d300:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    d304:	00800074 	movhi	r2,1
    d308:	10912b44 	addi	r2,r2,17581
    d30c:	10800003 	ldbu	r2,0(r2)
    d310:	10803fcc 	andi	r2,r2,255
    d314:	10001326 	beq	r2,zero,d364 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    d318:	e17ff70b 	ldhu	r5,-36(fp)
    d31c:	e1bff783 	ldbu	r6,-34(fp)
    d320:	e0fff80b 	ldhu	r3,-32(fp)
    d324:	e0bffb44 	addi	r2,fp,-19
    d328:	d8800015 	stw	r2,0(sp)
    d32c:	e13ff617 	ldw	r4,-40(fp)
    d330:	180f883a 	mov	r7,r3
    d334:	00073a80 	call	73a8 <OSFlagPend>
    d338:	00000a06 	br	d364 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    d33c:	0001883a 	nop
    d340:	e0bffc17 	ldw	r2,-16(fp)
    d344:	10c00d17 	ldw	r3,52(r2)
    d348:	e0bff117 	ldw	r2,-60(fp)
    d34c:	1880051e 	bne	r3,r2,d364 <altera_avalon_jtag_uart_read+0x1d4>
    d350:	e0bffc17 	ldw	r2,-16(fp)
    d354:	10c00917 	ldw	r3,36(r2)
    d358:	e0bffc17 	ldw	r2,-16(fp)
    d35c:	10800117 	ldw	r2,4(r2)
    d360:	18bff736 	bltu	r3,r2,d340 <__alt_mem_Flash_flash_data+0xf400d340>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    d364:	e0bffc17 	ldw	r2,-16(fp)
    d368:	10c00d17 	ldw	r3,52(r2)
    d36c:	e0bff117 	ldw	r2,-60(fp)
    d370:	1880011e 	bne	r3,r2,d378 <altera_avalon_jtag_uart_read+0x1e8>
      break;
    d374:	00000206 	br	d380 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    d378:	e0bffe17 	ldw	r2,-8(fp)
    d37c:	00bf9916 	blt	zero,r2,d1e4 <__alt_mem_Flash_flash_data+0xf400d1e4>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    d380:	e0bffc17 	ldw	r2,-16(fp)
    d384:	10800a17 	ldw	r2,40(r2)
    d388:	1009883a 	mov	r4,r2
    d38c:	000a4240 	call	a424 <OSSemPost>

  if (ptr != buffer)
    d390:	e0ffef17 	ldw	r3,-68(fp)
    d394:	e0bffd17 	ldw	r2,-12(fp)
    d398:	18801826 	beq	r3,r2,d3fc <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d39c:	0005303a 	rdctl	r2,status
    d3a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d3a4:	e0fff917 	ldw	r3,-28(fp)
    d3a8:	00bfff84 	movi	r2,-2
    d3ac:	1884703a 	and	r2,r3,r2
    d3b0:	1001703a 	wrctl	status,r2
  
  return context;
    d3b4:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    d3b8:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d3bc:	e0bffc17 	ldw	r2,-16(fp)
    d3c0:	10800817 	ldw	r2,32(r2)
    d3c4:	10c00054 	ori	r3,r2,1
    d3c8:	e0bffc17 	ldw	r2,-16(fp)
    d3cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d3d0:	e0bffc17 	ldw	r2,-16(fp)
    d3d4:	10800017 	ldw	r2,0(r2)
    d3d8:	10800104 	addi	r2,r2,4
    d3dc:	1007883a 	mov	r3,r2
    d3e0:	e0bffc17 	ldw	r2,-16(fp)
    d3e4:	10800817 	ldw	r2,32(r2)
    d3e8:	18800035 	stwio	r2,0(r3)
    d3ec:	e0bff317 	ldw	r2,-52(fp)
    d3f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d3f4:	e0bffa17 	ldw	r2,-24(fp)
    d3f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    d3fc:	e0ffef17 	ldw	r3,-68(fp)
    d400:	e0bffd17 	ldw	r2,-12(fp)
    d404:	18800426 	beq	r3,r2,d418 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
    d408:	e0ffef17 	ldw	r3,-68(fp)
    d40c:	e0bffd17 	ldw	r2,-12(fp)
    d410:	1885c83a 	sub	r2,r3,r2
    d414:	00000606 	br	d430 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
    d418:	e0bfff17 	ldw	r2,-4(fp)
    d41c:	1090000c 	andi	r2,r2,16384
    d420:	10000226 	beq	r2,zero,d42c <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
    d424:	00bffd44 	movi	r2,-11
    d428:	00000106 	br	d430 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
    d42c:	00bffec4 	movi	r2,-5
}
    d430:	e037883a 	mov	sp,fp
    d434:	dfc00117 	ldw	ra,4(sp)
    d438:	df000017 	ldw	fp,0(sp)
    d43c:	dec00204 	addi	sp,sp,8
    d440:	f800283a 	ret

0000d444 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    d444:	deffed04 	addi	sp,sp,-76
    d448:	dfc01215 	stw	ra,72(sp)
    d44c:	df001115 	stw	fp,68(sp)
    d450:	df001104 	addi	fp,sp,68
    d454:	e13ffc15 	stw	r4,-16(fp)
    d458:	e17ffd15 	stw	r5,-12(fp)
    d45c:	e1bffe15 	stw	r6,-8(fp)
    d460:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    d464:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    d468:	e0bffd17 	ldw	r2,-12(fp)
    d46c:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    d470:	e0bffc17 	ldw	r2,-16(fp)
    d474:	10800b17 	ldw	r2,44(r2)
    d478:	e0bff515 	stw	r2,-44(fp)
    d47c:	e03ff60d 	sth	zero,-40(fp)
    d480:	e0fff60b 	ldhu	r3,-40(fp)
    d484:	e0bffbc4 	addi	r2,fp,-17
    d488:	e13ff517 	ldw	r4,-44(fp)
    d48c:	180b883a 	mov	r5,r3
    d490:	100d883a 	mov	r6,r2
    d494:	000a0500 	call	a050 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    d498:	00003806 	br	d57c <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    d49c:	e0bffc17 	ldw	r2,-16(fp)
    d4a0:	10800f17 	ldw	r2,60(r2)
    d4a4:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
    d4a8:	e0bffc17 	ldw	r2,-16(fp)
    d4ac:	10801017 	ldw	r2,64(r2)
    d4b0:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
    d4b4:	e0fff317 	ldw	r3,-52(fp)
    d4b8:	e0bff017 	ldw	r2,-64(fp)
    d4bc:	1880062e 	bgeu	r3,r2,d4d8 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
    d4c0:	e0fff017 	ldw	r3,-64(fp)
    d4c4:	e0bff317 	ldw	r2,-52(fp)
    d4c8:	1885c83a 	sub	r2,r3,r2
    d4cc:	10bfffc4 	addi	r2,r2,-1
    d4d0:	e0bff115 	stw	r2,-60(fp)
    d4d4:	00000b06 	br	d504 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
    d4d8:	e0bff017 	ldw	r2,-64(fp)
    d4dc:	10000526 	beq	r2,zero,d4f4 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    d4e0:	00c20004 	movi	r3,2048
    d4e4:	e0bff317 	ldw	r2,-52(fp)
    d4e8:	1885c83a 	sub	r2,r3,r2
    d4ec:	e0bff115 	stw	r2,-60(fp)
    d4f0:	00000406 	br	d504 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    d4f4:	00c1ffc4 	movi	r3,2047
    d4f8:	e0bff317 	ldw	r2,-52(fp)
    d4fc:	1885c83a 	sub	r2,r3,r2
    d500:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    d504:	e0bff117 	ldw	r2,-60(fp)
    d508:	1000011e 	bne	r2,zero,d510 <altera_avalon_jtag_uart_write+0xcc>
        break;
    d50c:	00001d06 	br	d584 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
    d510:	e0fffe17 	ldw	r3,-8(fp)
    d514:	e0bff117 	ldw	r2,-60(fp)
    d518:	1880022e 	bgeu	r3,r2,d524 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
    d51c:	e0bffe17 	ldw	r2,-8(fp)
    d520:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    d524:	e0bff317 	ldw	r2,-52(fp)
    d528:	10821104 	addi	r2,r2,2116
    d52c:	e0fffc17 	ldw	r3,-16(fp)
    d530:	1885883a 	add	r2,r3,r2
    d534:	1009883a 	mov	r4,r2
    d538:	e17ffd17 	ldw	r5,-12(fp)
    d53c:	e1bff117 	ldw	r6,-60(fp)
    d540:	0001e700 	call	1e70 <memcpy>
      ptr   += n;
    d544:	e0fffd17 	ldw	r3,-12(fp)
    d548:	e0bff117 	ldw	r2,-60(fp)
    d54c:	1885883a 	add	r2,r3,r2
    d550:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    d554:	e0fffe17 	ldw	r3,-8(fp)
    d558:	e0bff117 	ldw	r2,-60(fp)
    d55c:	1885c83a 	sub	r2,r3,r2
    d560:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d564:	e0fff317 	ldw	r3,-52(fp)
    d568:	e0bff117 	ldw	r2,-60(fp)
    d56c:	1885883a 	add	r2,r3,r2
    d570:	10c1ffcc 	andi	r3,r2,2047
    d574:	e0bffc17 	ldw	r2,-16(fp)
    d578:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    d57c:	e0bffe17 	ldw	r2,-8(fp)
    d580:	00bfc616 	blt	zero,r2,d49c <__alt_mem_Flash_flash_data+0xf400d49c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d584:	0005303a 	rdctl	r2,status
    d588:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d58c:	e0fff717 	ldw	r3,-36(fp)
    d590:	00bfff84 	movi	r2,-2
    d594:	1884703a 	and	r2,r3,r2
    d598:	1001703a 	wrctl	status,r2
  
  return context;
    d59c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    d5a0:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    d5a4:	e0bffc17 	ldw	r2,-16(fp)
    d5a8:	10800817 	ldw	r2,32(r2)
    d5ac:	10c00094 	ori	r3,r2,2
    d5b0:	e0bffc17 	ldw	r2,-16(fp)
    d5b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d5b8:	e0bffc17 	ldw	r2,-16(fp)
    d5bc:	10800017 	ldw	r2,0(r2)
    d5c0:	10800104 	addi	r2,r2,4
    d5c4:	1007883a 	mov	r3,r2
    d5c8:	e0bffc17 	ldw	r2,-16(fp)
    d5cc:	10800817 	ldw	r2,32(r2)
    d5d0:	18800035 	stwio	r2,0(r3)
    d5d4:	e0bff417 	ldw	r2,-48(fp)
    d5d8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d5dc:	e0bff817 	ldw	r2,-32(fp)
    d5e0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    d5e4:	e0bffe17 	ldw	r2,-8(fp)
    d5e8:	00802e0e 	bge	zero,r2,d6a4 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
    d5ec:	e0bfff17 	ldw	r2,-4(fp)
    d5f0:	1090000c 	andi	r2,r2,16384
    d5f4:	10000126 	beq	r2,zero,d5fc <altera_avalon_jtag_uart_write+0x1b8>
        break;
    d5f8:	00002c06 	br	d6ac <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    d5fc:	00800074 	movhi	r2,1
    d600:	10912b44 	addi	r2,r2,17581
    d604:	10800003 	ldbu	r2,0(r2)
    d608:	10803fcc 	andi	r2,r2,255
    d60c:	10800058 	cmpnei	r2,r2,1
    d610:	1000161e 	bne	r2,zero,d66c <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    d614:	e0bffc17 	ldw	r2,-16(fp)
    d618:	10800c17 	ldw	r2,48(r2)
    d61c:	e0bff915 	stw	r2,-28(fp)
    d620:	00800184 	movi	r2,6
    d624:	e0bffa0d 	sth	r2,-24(fp)
    d628:	00bfe0c4 	movi	r2,-125
    d62c:	e0bffa85 	stb	r2,-22(fp)
    d630:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    d634:	00800074 	movhi	r2,1
    d638:	10912b44 	addi	r2,r2,17581
    d63c:	10800003 	ldbu	r2,0(r2)
    d640:	10803fcc 	andi	r2,r2,255
    d644:	10001326 	beq	r2,zero,d694 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    d648:	e17ffa0b 	ldhu	r5,-24(fp)
    d64c:	e1bffa83 	ldbu	r6,-22(fp)
    d650:	e0fffb0b 	ldhu	r3,-20(fp)
    d654:	e0bffb84 	addi	r2,fp,-18
    d658:	d8800015 	stw	r2,0(sp)
    d65c:	e13ff917 	ldw	r4,-28(fp)
    d660:	180f883a 	mov	r7,r3
    d664:	00073a80 	call	73a8 <OSFlagPend>
    d668:	00000a06 	br	d694 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    d66c:	0001883a 	nop
    d670:	e0bffc17 	ldw	r2,-16(fp)
    d674:	10c01017 	ldw	r3,64(r2)
    d678:	e0bff017 	ldw	r2,-64(fp)
    d67c:	1880051e 	bne	r3,r2,d694 <altera_avalon_jtag_uart_write+0x250>
    d680:	e0bffc17 	ldw	r2,-16(fp)
    d684:	10c00917 	ldw	r3,36(r2)
    d688:	e0bffc17 	ldw	r2,-16(fp)
    d68c:	10800117 	ldw	r2,4(r2)
    d690:	18bff736 	bltu	r3,r2,d670 <__alt_mem_Flash_flash_data+0xf400d670>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    d694:	e0bffc17 	ldw	r2,-16(fp)
    d698:	10800917 	ldw	r2,36(r2)
    d69c:	10000126 	beq	r2,zero,d6a4 <altera_avalon_jtag_uart_write+0x260>
         break;
    d6a0:	00000206 	br	d6ac <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
    d6a4:	e0bffe17 	ldw	r2,-8(fp)
    d6a8:	00bf7b16 	blt	zero,r2,d498 <__alt_mem_Flash_flash_data+0xf400d498>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    d6ac:	e0bffc17 	ldw	r2,-16(fp)
    d6b0:	10800b17 	ldw	r2,44(r2)
    d6b4:	1009883a 	mov	r4,r2
    d6b8:	000a4240 	call	a424 <OSSemPost>

  if (ptr != start)
    d6bc:	e0fffd17 	ldw	r3,-12(fp)
    d6c0:	e0bff217 	ldw	r2,-56(fp)
    d6c4:	18800426 	beq	r3,r2,d6d8 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
    d6c8:	e0fffd17 	ldw	r3,-12(fp)
    d6cc:	e0bff217 	ldw	r2,-56(fp)
    d6d0:	1885c83a 	sub	r2,r3,r2
    d6d4:	00000606 	br	d6f0 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
    d6d8:	e0bfff17 	ldw	r2,-4(fp)
    d6dc:	1090000c 	andi	r2,r2,16384
    d6e0:	10000226 	beq	r2,zero,d6ec <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
    d6e4:	00bffd44 	movi	r2,-11
    d6e8:	00000106 	br	d6f0 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    d6ec:	00bffec4 	movi	r2,-5
}
    d6f0:	e037883a 	mov	sp,fp
    d6f4:	dfc00117 	ldw	ra,4(sp)
    d6f8:	df000017 	ldw	fp,0(sp)
    d6fc:	dec00204 	addi	sp,sp,8
    d700:	f800283a 	ret

0000d704 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    d704:	defff904 	addi	sp,sp,-28
    d708:	dfc00615 	stw	ra,24(sp)
    d70c:	df000515 	stw	fp,20(sp)
    d710:	df000504 	addi	fp,sp,20
    d714:	e13ffe15 	stw	r4,-8(fp)
    d718:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    d71c:	0007883a 	mov	r3,zero
    d720:	e0bffe17 	ldw	r2,-8(fp)
    d724:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    d728:	e0bffe17 	ldw	r2,-8(fp)
    d72c:	10800104 	addi	r2,r2,4
    d730:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d734:	0005303a 	rdctl	r2,status
    d738:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d73c:	e0fffc17 	ldw	r3,-16(fp)
    d740:	00bfff84 	movi	r2,-2
    d744:	1884703a 	and	r2,r3,r2
    d748:	1001703a 	wrctl	status,r2
  
  return context;
    d74c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    d750:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    d754:	000f7800 	call	f780 <alt_tick>
    d758:	e0bffb17 	ldw	r2,-20(fp)
    d75c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d760:	e0bffd17 	ldw	r2,-12(fp)
    d764:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    d768:	e037883a 	mov	sp,fp
    d76c:	dfc00117 	ldw	ra,4(sp)
    d770:	df000017 	ldw	fp,0(sp)
    d774:	dec00204 	addi	sp,sp,8
    d778:	f800283a 	ret

0000d77c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    d77c:	defff904 	addi	sp,sp,-28
    d780:	dfc00615 	stw	ra,24(sp)
    d784:	df000515 	stw	fp,20(sp)
    d788:	df000504 	addi	fp,sp,20
    d78c:	e13ffc15 	stw	r4,-16(fp)
    d790:	e17ffd15 	stw	r5,-12(fp)
    d794:	e1bffe15 	stw	r6,-8(fp)
    d798:	e1ffff15 	stw	r7,-4(fp)
    d79c:	e0bfff17 	ldw	r2,-4(fp)
    d7a0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    d7a4:	00800074 	movhi	r2,1
    d7a8:	10914004 	addi	r2,r2,17664
    d7ac:	10800017 	ldw	r2,0(r2)
    d7b0:	1000041e 	bne	r2,zero,d7c4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    d7b4:	00800074 	movhi	r2,1
    d7b8:	10914004 	addi	r2,r2,17664
    d7bc:	e0fffb17 	ldw	r3,-20(fp)
    d7c0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    d7c4:	e0bffc17 	ldw	r2,-16(fp)
    d7c8:	10800104 	addi	r2,r2,4
    d7cc:	00c001c4 	movi	r3,7
    d7d0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    d7d4:	e13ffe17 	ldw	r4,-8(fp)
    d7d8:	e17ffc17 	ldw	r5,-16(fp)
    d7dc:	01800074 	movhi	r6,1
    d7e0:	31b5c104 	addi	r6,r6,-10492
    d7e4:	000f2c40 	call	f2c4 <alt_irq_register>
#endif  
}
    d7e8:	e037883a 	mov	sp,fp
    d7ec:	dfc00117 	ldw	ra,4(sp)
    d7f0:	df000017 	ldw	fp,0(sp)
    d7f4:	dec00204 	addi	sp,sp,8
    d7f8:	f800283a 	ret

0000d7fc <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    d7fc:	defffc04 	addi	sp,sp,-16
    d800:	df000315 	stw	fp,12(sp)
    d804:	df000304 	addi	fp,sp,12
    d808:	e13ffe15 	stw	r4,-8(fp)
    d80c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    d810:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    d814:	e0bfff17 	ldw	r2,-4(fp)
    d818:	1000061e 	bne	r2,zero,d834 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
    d81c:	e0bffe17 	ldw	r2,-8(fp)
    d820:	1007883a 	mov	r3,r2
    d824:	e0bffd03 	ldbu	r2,-12(fp)
    d828:	1884b03a 	or	r2,r3,r2
    d82c:	e0bffd05 	stb	r2,-12(fp)
    d830:	00000806 	br	d854 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
    d834:	e0bffe17 	ldw	r2,-8(fp)
    d838:	1007883a 	mov	r3,r2
    d83c:	e0bffd03 	ldbu	r2,-12(fp)
    d840:	1884b03a 	or	r2,r3,r2
    d844:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    d848:	e0bffd03 	ldbu	r2,-12(fp)
    d84c:	10801014 	ori	r2,r2,64
    d850:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    d854:	e0fffd03 	ldbu	r3,-12(fp)
    d858:	00bfe004 	movi	r2,-128
    d85c:	1884b03a 	or	r2,r3,r2
}
    d860:	e037883a 	mov	sp,fp
    d864:	df000017 	ldw	fp,0(sp)
    d868:	dec00104 	addi	sp,sp,4
    d86c:	f800283a 	ret

0000d870 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    d870:	defffd04 	addi	sp,sp,-12
    d874:	df000215 	stw	fp,8(sp)
    d878:	df000204 	addi	fp,sp,8
    d87c:	e13ffe15 	stw	r4,-8(fp)
    d880:	2805883a 	mov	r2,r5
    d884:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    d888:	e0bffe17 	ldw	r2,-8(fp)
    d88c:	10800a17 	ldw	r2,40(r2)
    d890:	1007883a 	mov	r3,r2
    d894:	e0bfff03 	ldbu	r2,-4(fp)
    d898:	18800025 	stbio	r2,0(r3)
}
    d89c:	e037883a 	mov	sp,fp
    d8a0:	df000017 	ldw	fp,0(sp)
    d8a4:	dec00104 	addi	sp,sp,4
    d8a8:	f800283a 	ret

0000d8ac <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    d8ac:	defffe04 	addi	sp,sp,-8
    d8b0:	df000115 	stw	fp,4(sp)
    d8b4:	df000104 	addi	fp,sp,4
    d8b8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    d8bc:	e0bfff17 	ldw	r2,-4(fp)
    d8c0:	10800a17 	ldw	r2,40(r2)
    d8c4:	1007883a 	mov	r3,r2
    d8c8:	00800044 	movi	r2,1
    d8cc:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    d8d0:	e037883a 	mov	sp,fp
    d8d4:	df000017 	ldw	fp,0(sp)
    d8d8:	dec00104 	addi	sp,sp,4
    d8dc:	f800283a 	ret

0000d8e0 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    d8e0:	defffc04 	addi	sp,sp,-16
    d8e4:	dfc00315 	stw	ra,12(sp)
    d8e8:	df000215 	stw	fp,8(sp)
    d8ec:	df000204 	addi	fp,sp,8
    d8f0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    d8f4:	e13fff17 	ldw	r4,-4(fp)
    d8f8:	01400074 	movhi	r5,1
    d8fc:	29493904 	addi	r5,r5,9444
    d900:	000f0cc0 	call	f0cc <alt_find_dev>
    d904:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    d908:	e0bffe17 	ldw	r2,-8(fp)
}
    d90c:	e037883a 	mov	sp,fp
    d910:	dfc00117 	ldw	ra,4(sp)
    d914:	df000017 	ldw	fp,0(sp)
    d918:	dec00204 	addi	sp,sp,8
    d91c:	f800283a 	ret

0000d920 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    d920:	defffb04 	addi	sp,sp,-20
    d924:	df000415 	stw	fp,16(sp)
    d928:	df000404 	addi	fp,sp,16
    d92c:	e13ffd15 	stw	r4,-12(fp)
    d930:	e17ffe15 	stw	r5,-8(fp)
    d934:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    d938:	e03ffc15 	stw	zero,-16(fp)
    d93c:	00000f06 	br	d97c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    d940:	e0bffd17 	ldw	r2,-12(fp)
    d944:	10800a17 	ldw	r2,40(r2)
    d948:	10800044 	addi	r2,r2,1
    d94c:	1009883a 	mov	r4,r2
    d950:	e0fffe17 	ldw	r3,-8(fp)
    d954:	e0bffc17 	ldw	r2,-16(fp)
    d958:	1885883a 	add	r2,r3,r2
    d95c:	10800003 	ldbu	r2,0(r2)
    d960:	10803fcc 	andi	r2,r2,255
    d964:	1080201c 	xori	r2,r2,128
    d968:	10bfe004 	addi	r2,r2,-128
    d96c:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    d970:	e0bffc17 	ldw	r2,-16(fp)
    d974:	10800044 	addi	r2,r2,1
    d978:	e0bffc15 	stw	r2,-16(fp)
    d97c:	e0fffc17 	ldw	r3,-16(fp)
    d980:	e0bfff17 	ldw	r2,-4(fp)
    d984:	18bfee36 	bltu	r3,r2,d940 <__alt_mem_Flash_flash_data+0xf400d940>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    d988:	e037883a 	mov	sp,fp
    d98c:	df000017 	ldw	fp,0(sp)
    d990:	dec00104 	addi	sp,sp,4
    d994:	f800283a 	ret

0000d998 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    d998:	defffd04 	addi	sp,sp,-12
    d99c:	df000215 	stw	fp,8(sp)
    d9a0:	df000204 	addi	fp,sp,8
    d9a4:	e13ffe15 	stw	r4,-8(fp)
    d9a8:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    d9ac:	00000d06 	br	d9e4 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    d9b0:	e0bffe17 	ldw	r2,-8(fp)
    d9b4:	10800a17 	ldw	r2,40(r2)
    d9b8:	10800044 	addi	r2,r2,1
    d9bc:	1007883a 	mov	r3,r2
    d9c0:	e0bfff17 	ldw	r2,-4(fp)
    d9c4:	10800003 	ldbu	r2,0(r2)
    d9c8:	10803fcc 	andi	r2,r2,255
    d9cc:	1080201c 	xori	r2,r2,128
    d9d0:	10bfe004 	addi	r2,r2,-128
    d9d4:	18800025 	stbio	r2,0(r3)
		++ptr;
    d9d8:	e0bfff17 	ldw	r2,-4(fp)
    d9dc:	10800044 	addi	r2,r2,1
    d9e0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    d9e4:	e0bfff17 	ldw	r2,-4(fp)
    d9e8:	10800003 	ldbu	r2,0(r2)
    d9ec:	10803fcc 	andi	r2,r2,255
    d9f0:	1080201c 	xori	r2,r2,128
    d9f4:	10bfe004 	addi	r2,r2,-128
    d9f8:	103fed1e 	bne	r2,zero,d9b0 <__alt_mem_Flash_flash_data+0xf400d9b0>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    d9fc:	e037883a 	mov	sp,fp
    da00:	df000017 	ldw	fp,0(sp)
    da04:	dec00104 	addi	sp,sp,4
    da08:	f800283a 	ret

0000da0c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    da0c:	defffb04 	addi	sp,sp,-20
    da10:	dfc00415 	stw	ra,16(sp)
    da14:	df000315 	stw	fp,12(sp)
    da18:	df000304 	addi	fp,sp,12
    da1c:	e13ffd15 	stw	r4,-12(fp)
    da20:	e17ffe15 	stw	r5,-8(fp)
    da24:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    da28:	e0bffd17 	ldw	r2,-12(fp)
    da2c:	10c00017 	ldw	r3,0(r2)
    da30:	e0bfff17 	ldw	r2,-4(fp)
    da34:	1809883a 	mov	r4,r3
    da38:	e17ffe17 	ldw	r5,-8(fp)
    da3c:	100d883a 	mov	r6,r2
    da40:	000d9200 	call	d920 <alt_up_character_lcd_write>
	return 0;
    da44:	0005883a 	mov	r2,zero
}
    da48:	e037883a 	mov	sp,fp
    da4c:	dfc00117 	ldw	ra,4(sp)
    da50:	df000017 	ldw	fp,0(sp)
    da54:	dec00204 	addi	sp,sp,8
    da58:	f800283a 	ret

0000da5c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    da5c:	defffa04 	addi	sp,sp,-24
    da60:	dfc00515 	stw	ra,20(sp)
    da64:	df000415 	stw	fp,16(sp)
    da68:	df000404 	addi	fp,sp,16
    da6c:	e13ffd15 	stw	r4,-12(fp)
    da70:	e17ffe15 	stw	r5,-8(fp)
    da74:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    da78:	e0bffe17 	ldw	r2,-8(fp)
    da7c:	10800a28 	cmpgeui	r2,r2,40
    da80:	1000031e 	bne	r2,zero,da90 <alt_up_character_lcd_set_cursor_pos+0x34>
    da84:	e0bfff17 	ldw	r2,-4(fp)
    da88:	108000b0 	cmpltui	r2,r2,2
    da8c:	1000021e 	bne	r2,zero,da98 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
    da90:	00bfffc4 	movi	r2,-1
    da94:	00000906 	br	dabc <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    da98:	e13ffe17 	ldw	r4,-8(fp)
    da9c:	e17fff17 	ldw	r5,-4(fp)
    daa0:	000d7fc0 	call	d7fc <get_DDRAM_addr>
    daa4:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    daa8:	e0bffc03 	ldbu	r2,-16(fp)
    daac:	e13ffd17 	ldw	r4,-12(fp)
    dab0:	100b883a 	mov	r5,r2
    dab4:	000d8700 	call	d870 <alt_up_character_lcd_send_cmd>
	return 0;
    dab8:	0005883a 	mov	r2,zero
}
    dabc:	e037883a 	mov	sp,fp
    dac0:	dfc00117 	ldw	ra,4(sp)
    dac4:	df000017 	ldw	fp,0(sp)
    dac8:	dec00204 	addi	sp,sp,8
    dacc:	f800283a 	ret

0000dad0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    dad0:	defffb04 	addi	sp,sp,-20
    dad4:	dfc00415 	stw	ra,16(sp)
    dad8:	df000315 	stw	fp,12(sp)
    dadc:	df000304 	addi	fp,sp,12
    dae0:	e13ffe15 	stw	r4,-8(fp)
    dae4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    dae8:	e0bfff17 	ldw	r2,-4(fp)
    daec:	1000011e 	bne	r2,zero,daf4 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
    daf0:	00001406 	br	db44 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    daf4:	e0bfff17 	ldw	r2,-4(fp)
    daf8:	0080020e 	bge	zero,r2,db04 <alt_up_character_lcd_shift_cursor+0x34>
    dafc:	00800504 	movi	r2,20
    db00:	00000106 	br	db08 <alt_up_character_lcd_shift_cursor+0x38>
    db04:	00800404 	movi	r2,16
    db08:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    db0c:	e0bfff17 	ldw	r2,-4(fp)
    db10:	1000010e 	bge	r2,zero,db18 <alt_up_character_lcd_shift_cursor+0x48>
    db14:	0085c83a 	sub	r2,zero,r2
    db18:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    db1c:	00000406 	br	db30 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    db20:	e0bffd43 	ldbu	r2,-11(fp)
    db24:	e13ffe17 	ldw	r4,-8(fp)
    db28:	100b883a 	mov	r5,r2
    db2c:	000d8700 	call	d870 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    db30:	e0bffd03 	ldbu	r2,-12(fp)
    db34:	10ffffc4 	addi	r3,r2,-1
    db38:	e0fffd05 	stb	r3,-12(fp)
    db3c:	10803fcc 	andi	r2,r2,255
    db40:	103ff71e 	bne	r2,zero,db20 <__alt_mem_Flash_flash_data+0xf400db20>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    db44:	e037883a 	mov	sp,fp
    db48:	dfc00117 	ldw	ra,4(sp)
    db4c:	df000017 	ldw	fp,0(sp)
    db50:	dec00204 	addi	sp,sp,8
    db54:	f800283a 	ret

0000db58 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    db58:	defffb04 	addi	sp,sp,-20
    db5c:	dfc00415 	stw	ra,16(sp)
    db60:	df000315 	stw	fp,12(sp)
    db64:	df000304 	addi	fp,sp,12
    db68:	e13ffe15 	stw	r4,-8(fp)
    db6c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    db70:	e0bfff17 	ldw	r2,-4(fp)
    db74:	1000011e 	bne	r2,zero,db7c <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
    db78:	00001406 	br	dbcc <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    db7c:	e0bfff17 	ldw	r2,-4(fp)
    db80:	0080020e 	bge	zero,r2,db8c <alt_up_character_lcd_shift_display+0x34>
    db84:	00800704 	movi	r2,28
    db88:	00000106 	br	db90 <alt_up_character_lcd_shift_display+0x38>
    db8c:	00800604 	movi	r2,24
    db90:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    db94:	e0bfff17 	ldw	r2,-4(fp)
    db98:	1000010e 	bge	r2,zero,dba0 <alt_up_character_lcd_shift_display+0x48>
    db9c:	0085c83a 	sub	r2,zero,r2
    dba0:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    dba4:	00000406 	br	dbb8 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    dba8:	e0bffd43 	ldbu	r2,-11(fp)
    dbac:	e13ffe17 	ldw	r4,-8(fp)
    dbb0:	100b883a 	mov	r5,r2
    dbb4:	000d8700 	call	d870 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    dbb8:	e0bffd03 	ldbu	r2,-12(fp)
    dbbc:	10ffffc4 	addi	r3,r2,-1
    dbc0:	e0fffd05 	stb	r3,-12(fp)
    dbc4:	10803fcc 	andi	r2,r2,255
    dbc8:	103ff71e 	bne	r2,zero,dba8 <__alt_mem_Flash_flash_data+0xf400dba8>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    dbcc:	e037883a 	mov	sp,fp
    dbd0:	dfc00117 	ldw	ra,4(sp)
    dbd4:	df000017 	ldw	fp,0(sp)
    dbd8:	dec00204 	addi	sp,sp,8
    dbdc:	f800283a 	ret

0000dbe0 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    dbe0:	defffa04 	addi	sp,sp,-24
    dbe4:	dfc00515 	stw	ra,20(sp)
    dbe8:	df000415 	stw	fp,16(sp)
    dbec:	df000404 	addi	fp,sp,16
    dbf0:	e13ffd15 	stw	r4,-12(fp)
    dbf4:	e17ffe15 	stw	r5,-8(fp)
    dbf8:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    dbfc:	e0bffe17 	ldw	r2,-8(fp)
    dc00:	10800a28 	cmpgeui	r2,r2,40
    dc04:	1000031e 	bne	r2,zero,dc14 <alt_up_character_lcd_erase_pos+0x34>
    dc08:	e0bfff17 	ldw	r2,-4(fp)
    dc0c:	108000b0 	cmpltui	r2,r2,2
    dc10:	1000021e 	bne	r2,zero,dc1c <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
    dc14:	00bfffc4 	movi	r2,-1
    dc18:	00000f06 	br	dc58 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    dc1c:	e13ffe17 	ldw	r4,-8(fp)
    dc20:	e17fff17 	ldw	r5,-4(fp)
    dc24:	000d7fc0 	call	d7fc <get_DDRAM_addr>
    dc28:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    dc2c:	e0bffc03 	ldbu	r2,-16(fp)
    dc30:	e13ffd17 	ldw	r4,-12(fp)
    dc34:	100b883a 	mov	r5,r2
    dc38:	000d8700 	call	d870 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    dc3c:	e0bffd17 	ldw	r2,-12(fp)
    dc40:	10800a17 	ldw	r2,40(r2)
    dc44:	10800044 	addi	r2,r2,1
    dc48:	1007883a 	mov	r3,r2
    dc4c:	00800084 	movi	r2,2
    dc50:	18800025 	stbio	r2,0(r3)
	return 0;
    dc54:	0005883a 	mov	r2,zero
}
    dc58:	e037883a 	mov	sp,fp
    dc5c:	dfc00117 	ldw	ra,4(sp)
    dc60:	df000017 	ldw	fp,0(sp)
    dc64:	dec00204 	addi	sp,sp,8
    dc68:	f800283a 	ret

0000dc6c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    dc6c:	defffd04 	addi	sp,sp,-12
    dc70:	dfc00215 	stw	ra,8(sp)
    dc74:	df000115 	stw	fp,4(sp)
    dc78:	df000104 	addi	fp,sp,4
    dc7c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    dc80:	e13fff17 	ldw	r4,-4(fp)
    dc84:	01400304 	movi	r5,12
    dc88:	000d8700 	call	d870 <alt_up_character_lcd_send_cmd>
}
    dc8c:	e037883a 	mov	sp,fp
    dc90:	dfc00117 	ldw	ra,4(sp)
    dc94:	df000017 	ldw	fp,0(sp)
    dc98:	dec00204 	addi	sp,sp,8
    dc9c:	f800283a 	ret

0000dca0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    dca0:	defffd04 	addi	sp,sp,-12
    dca4:	dfc00215 	stw	ra,8(sp)
    dca8:	df000115 	stw	fp,4(sp)
    dcac:	df000104 	addi	fp,sp,4
    dcb0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    dcb4:	e13fff17 	ldw	r4,-4(fp)
    dcb8:	014003c4 	movi	r5,15
    dcbc:	000d8700 	call	d870 <alt_up_character_lcd_send_cmd>
}
    dcc0:	e037883a 	mov	sp,fp
    dcc4:	dfc00117 	ldw	ra,4(sp)
    dcc8:	df000017 	ldw	fp,0(sp)
    dccc:	dec00204 	addi	sp,sp,8
    dcd0:	f800283a 	ret

0000dcd4 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    dcd4:	defffd04 	addi	sp,sp,-12
    dcd8:	df000215 	stw	fp,8(sp)
    dcdc:	df000204 	addi	fp,sp,8
    dce0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    dce4:	e0bfff17 	ldw	r2,-4(fp)
    dce8:	10800a17 	ldw	r2,40(r2)
    dcec:	10800104 	addi	r2,r2,4
    dcf0:	10800037 	ldwio	r2,0(r2)
    dcf4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    dcf8:	e0bffe17 	ldw	r2,-8(fp)
    dcfc:	10800054 	ori	r2,r2,1
    dd00:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    dd04:	e0bfff17 	ldw	r2,-4(fp)
    dd08:	10800a17 	ldw	r2,40(r2)
    dd0c:	10800104 	addi	r2,r2,4
    dd10:	1007883a 	mov	r3,r2
    dd14:	e0bffe17 	ldw	r2,-8(fp)
    dd18:	18800035 	stwio	r2,0(r3)
}
    dd1c:	e037883a 	mov	sp,fp
    dd20:	df000017 	ldw	fp,0(sp)
    dd24:	dec00104 	addi	sp,sp,4
    dd28:	f800283a 	ret

0000dd2c <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    dd2c:	defffd04 	addi	sp,sp,-12
    dd30:	df000215 	stw	fp,8(sp)
    dd34:	df000204 	addi	fp,sp,8
    dd38:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    dd3c:	e0bfff17 	ldw	r2,-4(fp)
    dd40:	10800a17 	ldw	r2,40(r2)
    dd44:	10800104 	addi	r2,r2,4
    dd48:	10800037 	ldwio	r2,0(r2)
    dd4c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    dd50:	e0fffe17 	ldw	r3,-8(fp)
    dd54:	00bfff84 	movi	r2,-2
    dd58:	1884703a 	and	r2,r3,r2
    dd5c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    dd60:	e0bfff17 	ldw	r2,-4(fp)
    dd64:	10800a17 	ldw	r2,40(r2)
    dd68:	10800104 	addi	r2,r2,4
    dd6c:	1007883a 	mov	r3,r2
    dd70:	e0bffe17 	ldw	r2,-8(fp)
    dd74:	18800035 	stwio	r2,0(r3)
}
    dd78:	e037883a 	mov	sp,fp
    dd7c:	df000017 	ldw	fp,0(sp)
    dd80:	dec00104 	addi	sp,sp,4
    dd84:	f800283a 	ret

0000dd88 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    dd88:	defffd04 	addi	sp,sp,-12
    dd8c:	df000215 	stw	fp,8(sp)
    dd90:	df000204 	addi	fp,sp,8
    dd94:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    dd98:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    dd9c:	e0bfff17 	ldw	r2,-4(fp)
    dda0:	10800a17 	ldw	r2,40(r2)
    dda4:	10800084 	addi	r2,r2,2
    dda8:	1080002b 	ldhuio	r2,0(r2)
    ddac:	10bfffcc 	andi	r2,r2,65535
    ddb0:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    ddb4:	e0bffe0b 	ldhu	r2,-8(fp)
}
    ddb8:	e037883a 	mov	sp,fp
    ddbc:	df000017 	ldw	fp,0(sp)
    ddc0:	dec00104 	addi	sp,sp,4
    ddc4:	f800283a 	ret

0000ddc8 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    ddc8:	defffd04 	addi	sp,sp,-12
    ddcc:	df000215 	stw	fp,8(sp)
    ddd0:	df000204 	addi	fp,sp,8
    ddd4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    ddd8:	e0bfff17 	ldw	r2,-4(fp)
    dddc:	10800a17 	ldw	r2,40(r2)
    dde0:	10800104 	addi	r2,r2,4
    dde4:	10800037 	ldwio	r2,0(r2)
    dde8:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    ddec:	e0bffe17 	ldw	r2,-8(fp)
    ddf0:	1004d43a 	srli	r2,r2,16
}
    ddf4:	e037883a 	mov	sp,fp
    ddf8:	df000017 	ldw	fp,0(sp)
    ddfc:	dec00104 	addi	sp,sp,4
    de00:	f800283a 	ret

0000de04 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    de04:	defffd04 	addi	sp,sp,-12
    de08:	df000215 	stw	fp,8(sp)
    de0c:	df000204 	addi	fp,sp,8
    de10:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    de14:	e0bfff17 	ldw	r2,-4(fp)
    de18:	1080800c 	andi	r2,r2,512
    de1c:	1004d27a 	srli	r2,r2,9
    de20:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    de24:	e0bffe17 	ldw	r2,-8(fp)
    de28:	10000226 	beq	r2,zero,de34 <alt_up_irda_check_parity+0x30>
    de2c:	00bfffc4 	movi	r2,-1
    de30:	00000106 	br	de38 <alt_up_irda_check_parity+0x34>
    de34:	0005883a 	mov	r2,zero
}
    de38:	e037883a 	mov	sp,fp
    de3c:	df000017 	ldw	fp,0(sp)
    de40:	dec00104 	addi	sp,sp,4
    de44:	f800283a 	ret

0000de48 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    de48:	defffd04 	addi	sp,sp,-12
    de4c:	df000215 	stw	fp,8(sp)
    de50:	df000204 	addi	fp,sp,8
    de54:	e13ffe15 	stw	r4,-8(fp)
    de58:	2805883a 	mov	r2,r5
    de5c:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    de60:	e0bffe17 	ldw	r2,-8(fp)
    de64:	10800a17 	ldw	r2,40(r2)
    de68:	1007883a 	mov	r3,r2
    de6c:	e0bfff03 	ldbu	r2,-4(fp)
    de70:	18800035 	stwio	r2,0(r3)
	return 0;
    de74:	0005883a 	mov	r2,zero
}
    de78:	e037883a 	mov	sp,fp
    de7c:	df000017 	ldw	fp,0(sp)
    de80:	dec00104 	addi	sp,sp,4
    de84:	f800283a 	ret

0000de88 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    de88:	defffa04 	addi	sp,sp,-24
    de8c:	dfc00515 	stw	ra,20(sp)
    de90:	df000415 	stw	fp,16(sp)
    de94:	df000404 	addi	fp,sp,16
    de98:	e13ffd15 	stw	r4,-12(fp)
    de9c:	e17ffe15 	stw	r5,-8(fp)
    dea0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    dea4:	e0bffd17 	ldw	r2,-12(fp)
    dea8:	10800a17 	ldw	r2,40(r2)
    deac:	10800037 	ldwio	r2,0(r2)
    deb0:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    deb4:	e0bffc17 	ldw	r2,-16(fp)
    deb8:	1007883a 	mov	r3,r2
    debc:	e0bffe17 	ldw	r2,-8(fp)
    dec0:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    dec4:	e13ffc17 	ldw	r4,-16(fp)
    dec8:	000de040 	call	de04 <alt_up_irda_check_parity>
    decc:	1007883a 	mov	r3,r2
    ded0:	e0bfff17 	ldw	r2,-4(fp)
    ded4:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    ded8:	e0bffc17 	ldw	r2,-16(fp)
    dedc:	10a0000c 	andi	r2,r2,32768
    dee0:	1004d3fa 	srli	r2,r2,15
    dee4:	10bfffc4 	addi	r2,r2,-1
}
    dee8:	e037883a 	mov	sp,fp
    deec:	dfc00117 	ldw	ra,4(sp)
    def0:	df000017 	ldw	fp,0(sp)
    def4:	dec00204 	addi	sp,sp,8
    def8:	f800283a 	ret

0000defc <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    defc:	defff804 	addi	sp,sp,-32
    df00:	dfc00715 	stw	ra,28(sp)
    df04:	df000615 	stw	fp,24(sp)
    df08:	df000604 	addi	fp,sp,24
    df0c:	e13ffd15 	stw	r4,-12(fp)
    df10:	e17ffe15 	stw	r5,-8(fp)
    df14:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    df18:	e0bffd17 	ldw	r2,-12(fp)
    df1c:	10800017 	ldw	r2,0(r2)
    df20:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    df24:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    df28:	00000e06 	br	df64 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
    df2c:	e0bffe17 	ldw	r2,-8(fp)
    df30:	10c00044 	addi	r3,r2,1
    df34:	e0fffe15 	stw	r3,-8(fp)
    df38:	e0fffc04 	addi	r3,fp,-16
    df3c:	e13ffb17 	ldw	r4,-20(fp)
    df40:	100b883a 	mov	r5,r2
    df44:	180d883a 	mov	r6,r3
    df48:	000de880 	call	de88 <alt_up_irda_read_data>
    df4c:	1000041e 	bne	r2,zero,df60 <alt_up_irda_read_fd+0x64>
			count++;
    df50:	e0bffa17 	ldw	r2,-24(fp)
    df54:	10800044 	addi	r2,r2,1
    df58:	e0bffa15 	stw	r2,-24(fp)
    df5c:	00000106 	br	df64 <alt_up_irda_read_fd+0x68>
		else
			break;
    df60:	00000406 	br	df74 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    df64:	e0bfff17 	ldw	r2,-4(fp)
    df68:	10ffffc4 	addi	r3,r2,-1
    df6c:	e0ffff15 	stw	r3,-4(fp)
    df70:	103fee1e 	bne	r2,zero,df2c <__alt_mem_Flash_flash_data+0xf400df2c>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    df74:	e0bffa17 	ldw	r2,-24(fp)
}
    df78:	e037883a 	mov	sp,fp
    df7c:	dfc00117 	ldw	ra,4(sp)
    df80:	df000017 	ldw	fp,0(sp)
    df84:	dec00204 	addi	sp,sp,8
    df88:	f800283a 	ret

0000df8c <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    df8c:	defff904 	addi	sp,sp,-28
    df90:	dfc00615 	stw	ra,24(sp)
    df94:	df000515 	stw	fp,20(sp)
    df98:	df000504 	addi	fp,sp,20
    df9c:	e13ffd15 	stw	r4,-12(fp)
    dfa0:	e17ffe15 	stw	r5,-8(fp)
    dfa4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    dfa8:	e0bffd17 	ldw	r2,-12(fp)
    dfac:	10800017 	ldw	r2,0(r2)
    dfb0:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    dfb4:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    dfb8:	00000e06 	br	dff4 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
    dfbc:	e0bffe17 	ldw	r2,-8(fp)
    dfc0:	10c00044 	addi	r3,r2,1
    dfc4:	e0fffe15 	stw	r3,-8(fp)
    dfc8:	10800003 	ldbu	r2,0(r2)
    dfcc:	10803fcc 	andi	r2,r2,255
    dfd0:	e13ffc17 	ldw	r4,-16(fp)
    dfd4:	100b883a 	mov	r5,r2
    dfd8:	000de480 	call	de48 <alt_up_irda_write_data>
    dfdc:	1000041e 	bne	r2,zero,dff0 <alt_up_irda_write_fd+0x64>
			count++;
    dfe0:	e0bffb17 	ldw	r2,-20(fp)
    dfe4:	10800044 	addi	r2,r2,1
    dfe8:	e0bffb15 	stw	r2,-20(fp)
    dfec:	00000106 	br	dff4 <alt_up_irda_write_fd+0x68>
		else
			break;
    dff0:	00000406 	br	e004 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    dff4:	e0bfff17 	ldw	r2,-4(fp)
    dff8:	10ffffc4 	addi	r3,r2,-1
    dffc:	e0ffff15 	stw	r3,-4(fp)
    e000:	103fee1e 	bne	r2,zero,dfbc <__alt_mem_Flash_flash_data+0xf400dfbc>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
    e004:	e0bffb17 	ldw	r2,-20(fp)
}
    e008:	e037883a 	mov	sp,fp
    e00c:	dfc00117 	ldw	ra,4(sp)
    e010:	df000017 	ldw	fp,0(sp)
    e014:	dec00204 	addi	sp,sp,8
    e018:	f800283a 	ret

0000e01c <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    e01c:	defffc04 	addi	sp,sp,-16
    e020:	dfc00315 	stw	ra,12(sp)
    e024:	df000215 	stw	fp,8(sp)
    e028:	df000204 	addi	fp,sp,8
    e02c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    e030:	e13fff17 	ldw	r4,-4(fp)
    e034:	01400074 	movhi	r5,1
    e038:	29493904 	addi	r5,r5,9444
    e03c:	000f0cc0 	call	f0cc <alt_find_dev>
    e040:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e044:	e0bffe17 	ldw	r2,-8(fp)
}
    e048:	e037883a 	mov	sp,fp
    e04c:	dfc00117 	ldw	ra,4(sp)
    e050:	df000017 	ldw	fp,0(sp)
    e054:	dec00204 	addi	sp,sp,8
    e058:	f800283a 	ret

0000e05c <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
    e05c:	defffc04 	addi	sp,sp,-16
    e060:	dfc00315 	stw	ra,12(sp)
    e064:	df000215 	stw	fp,8(sp)
    e068:	df000204 	addi	fp,sp,8
    e06c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
    e070:	e13fff17 	ldw	r4,-4(fp)
    e074:	01400074 	movhi	r5,1
    e078:	29493904 	addi	r5,r5,9444
    e07c:	000f0cc0 	call	f0cc <alt_find_dev>
    e080:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e084:	e0bffe17 	ldw	r2,-8(fp)
}
    e088:	e037883a 	mov	sp,fp
    e08c:	dfc00117 	ldw	ra,4(sp)
    e090:	df000017 	ldw	fp,0(sp)
    e094:	dec00204 	addi	sp,sp,8
    e098:	f800283a 	ret

0000e09c <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    e09c:	defffd04 	addi	sp,sp,-12
    e0a0:	df000215 	stw	fp,8(sp)
    e0a4:	df000204 	addi	fp,sp,8
    e0a8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    e0ac:	e0bfff17 	ldw	r2,-4(fp)
    e0b0:	1080400c 	andi	r2,r2,256
    e0b4:	1004d23a 	srli	r2,r2,8
    e0b8:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    e0bc:	e0bffe03 	ldbu	r2,-8(fp)
}
    e0c0:	e037883a 	mov	sp,fp
    e0c4:	df000017 	ldw	fp,0(sp)
    e0c8:	dec00104 	addi	sp,sp,4
    e0cc:	f800283a 	ret

0000e0d0 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    e0d0:	defffd04 	addi	sp,sp,-12
    e0d4:	df000215 	stw	fp,8(sp)
    e0d8:	df000204 	addi	fp,sp,8
    e0dc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    e0e0:	e0bfff17 	ldw	r2,-4(fp)
    e0e4:	1080004c 	andi	r2,r2,1
    e0e8:	e0bffe05 	stb	r2,-8(fp)
	return re;
    e0ec:	e0bffe03 	ldbu	r2,-8(fp)
}
    e0f0:	e037883a 	mov	sp,fp
    e0f4:	df000017 	ldw	fp,0(sp)
    e0f8:	dec00104 	addi	sp,sp,4
    e0fc:	f800283a 	ret

0000e100 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    e100:	defffd04 	addi	sp,sp,-12
    e104:	df000215 	stw	fp,8(sp)
    e108:	df000204 	addi	fp,sp,8
    e10c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    e110:	e0bfff17 	ldw	r2,-4(fp)
    e114:	1081000c 	andi	r2,r2,1024
    e118:	1004d2ba 	srli	r2,r2,10
    e11c:	e0bffe05 	stb	r2,-8(fp)
	return re;
    e120:	e0bffe03 	ldbu	r2,-8(fp)
}
    e124:	e037883a 	mov	sp,fp
    e128:	df000017 	ldw	fp,0(sp)
    e12c:	dec00104 	addi	sp,sp,4
    e130:	f800283a 	ret

0000e134 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    e134:	defffd04 	addi	sp,sp,-12
    e138:	df000215 	stw	fp,8(sp)
    e13c:	df000204 	addi	fp,sp,8
    e140:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    e144:	e0bfff17 	ldw	r2,-4(fp)
    e148:	1004d43a 	srli	r2,r2,16
    e14c:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    e150:	e0bffe0b 	ldhu	r2,-8(fp)
}
    e154:	e037883a 	mov	sp,fp
    e158:	df000017 	ldw	fp,0(sp)
    e15c:	dec00104 	addi	sp,sp,4
    e160:	f800283a 	ret

0000e164 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    e164:	defffd04 	addi	sp,sp,-12
    e168:	df000215 	stw	fp,8(sp)
    e16c:	df000204 	addi	fp,sp,8
    e170:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    e174:	e0bfff17 	ldw	r2,-4(fp)
    e178:	10a0000c 	andi	r2,r2,32768
    e17c:	1004d3fa 	srli	r2,r2,15
    e180:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    e184:	e0bffe03 	ldbu	r2,-8(fp)
}
    e188:	e037883a 	mov	sp,fp
    e18c:	df000017 	ldw	fp,0(sp)
    e190:	dec00104 	addi	sp,sp,4
    e194:	f800283a 	ret

0000e198 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    e198:	defffd04 	addi	sp,sp,-12
    e19c:	df000215 	stw	fp,8(sp)
    e1a0:	df000204 	addi	fp,sp,8
    e1a4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    e1a8:	e0bfff17 	ldw	r2,-4(fp)
    e1ac:	e0bffe05 	stb	r2,-8(fp)
	return data;
    e1b0:	e0bffe03 	ldbu	r2,-8(fp)
}
    e1b4:	e037883a 	mov	sp,fp
    e1b8:	df000017 	ldw	fp,0(sp)
    e1bc:	dec00104 	addi	sp,sp,4
    e1c0:	f800283a 	ret

0000e1c4 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    e1c4:	defffb04 	addi	sp,sp,-20
    e1c8:	dfc00415 	stw	ra,16(sp)
    e1cc:	df000315 	stw	fp,12(sp)
    e1d0:	df000304 	addi	fp,sp,12
    e1d4:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    e1d8:	e13fff17 	ldw	r4,-4(fp)
    e1dc:	01403fc4 	movi	r5,255
    e1e0:	000e4200 	call	e420 <alt_up_ps2_write_data_byte_with_ack>
    e1e4:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    e1e8:	e0bffd17 	ldw	r2,-12(fp)
    e1ec:	1000211e 	bne	r2,zero,e274 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    e1f0:	e0bffe04 	addi	r2,fp,-8
    e1f4:	e13fff17 	ldw	r4,-4(fp)
    e1f8:	100b883a 	mov	r5,r2
    e1fc:	000e4840 	call	e484 <alt_up_ps2_read_data_byte_timeout>
    e200:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    e204:	e0bffd17 	ldw	r2,-12(fp)
    e208:	10001a1e 	bne	r2,zero,e274 <alt_up_ps2_init+0xb0>
    e20c:	e0bffe03 	ldbu	r2,-8(fp)
    e210:	10803fcc 	andi	r2,r2,255
    e214:	10802a98 	cmpnei	r2,r2,170
    e218:	1000161e 	bne	r2,zero,e274 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    e21c:	e0bffe04 	addi	r2,fp,-8
    e220:	e13fff17 	ldw	r4,-4(fp)
    e224:	100b883a 	mov	r5,r2
    e228:	000e4840 	call	e484 <alt_up_ps2_read_data_byte_timeout>
    e22c:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    e230:	e0bffd17 	ldw	r2,-12(fp)
    e234:	10bfe318 	cmpnei	r2,r2,-116
    e238:	1000041e 	bne	r2,zero,e24c <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    e23c:	e0bfff17 	ldw	r2,-4(fp)
    e240:	00c00044 	movi	r3,1
    e244:	10c00d15 	stw	r3,52(r2)
    e248:	00000a06 	br	e274 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
    e24c:	e0bffd17 	ldw	r2,-12(fp)
    e250:	1000081e 	bne	r2,zero,e274 <alt_up_ps2_init+0xb0>
    e254:	e0bffe03 	ldbu	r2,-8(fp)
    e258:	10803fcc 	andi	r2,r2,255
    e25c:	1000051e 	bne	r2,zero,e274 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    e260:	e0bfff17 	ldw	r2,-4(fp)
    e264:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    e268:	e13fff17 	ldw	r4,-4(fp)
    e26c:	01403d04 	movi	r5,244
    e270:	000e33c0 	call	e33c <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    e274:	e037883a 	mov	sp,fp
    e278:	dfc00117 	ldw	ra,4(sp)
    e27c:	df000017 	ldw	fp,0(sp)
    e280:	dec00204 	addi	sp,sp,8
    e284:	f800283a 	ret

0000e288 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    e288:	defffd04 	addi	sp,sp,-12
    e28c:	df000215 	stw	fp,8(sp)
    e290:	df000204 	addi	fp,sp,8
    e294:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    e298:	e0bfff17 	ldw	r2,-4(fp)
    e29c:	10800a17 	ldw	r2,40(r2)
    e2a0:	10800104 	addi	r2,r2,4
    e2a4:	10800037 	ldwio	r2,0(r2)
    e2a8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    e2ac:	e0bffe17 	ldw	r2,-8(fp)
    e2b0:	10800054 	ori	r2,r2,1
    e2b4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    e2b8:	e0bfff17 	ldw	r2,-4(fp)
    e2bc:	10800a17 	ldw	r2,40(r2)
    e2c0:	10800104 	addi	r2,r2,4
    e2c4:	1007883a 	mov	r3,r2
    e2c8:	e0bffe17 	ldw	r2,-8(fp)
    e2cc:	18800035 	stwio	r2,0(r3)
}
    e2d0:	e037883a 	mov	sp,fp
    e2d4:	df000017 	ldw	fp,0(sp)
    e2d8:	dec00104 	addi	sp,sp,4
    e2dc:	f800283a 	ret

0000e2e0 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    e2e0:	defffd04 	addi	sp,sp,-12
    e2e4:	df000215 	stw	fp,8(sp)
    e2e8:	df000204 	addi	fp,sp,8
    e2ec:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    e2f0:	e0bfff17 	ldw	r2,-4(fp)
    e2f4:	10800a17 	ldw	r2,40(r2)
    e2f8:	10800104 	addi	r2,r2,4
    e2fc:	10800037 	ldwio	r2,0(r2)
    e300:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    e304:	e0fffe17 	ldw	r3,-8(fp)
    e308:	00bfff84 	movi	r2,-2
    e30c:	1884703a 	and	r2,r3,r2
    e310:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    e314:	e0bfff17 	ldw	r2,-4(fp)
    e318:	10800a17 	ldw	r2,40(r2)
    e31c:	10800104 	addi	r2,r2,4
    e320:	1007883a 	mov	r3,r2
    e324:	e0bffe17 	ldw	r2,-8(fp)
    e328:	18800035 	stwio	r2,0(r3)
}
    e32c:	e037883a 	mov	sp,fp
    e330:	df000017 	ldw	fp,0(sp)
    e334:	dec00104 	addi	sp,sp,4
    e338:	f800283a 	ret

0000e33c <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    e33c:	defffb04 	addi	sp,sp,-20
    e340:	dfc00415 	stw	ra,16(sp)
    e344:	df000315 	stw	fp,12(sp)
    e348:	df000304 	addi	fp,sp,12
    e34c:	e13ffe15 	stw	r4,-8(fp)
    e350:	2805883a 	mov	r2,r5
    e354:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    e358:	e0bffe17 	ldw	r2,-8(fp)
    e35c:	10800a17 	ldw	r2,40(r2)
    e360:	1007883a 	mov	r3,r2
    e364:	e0bfff03 	ldbu	r2,-4(fp)
    e368:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    e36c:	e0bffe17 	ldw	r2,-8(fp)
    e370:	10800a17 	ldw	r2,40(r2)
    e374:	10800104 	addi	r2,r2,4
    e378:	10800037 	ldwio	r2,0(r2)
    e37c:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
    e380:	e13ffd17 	ldw	r4,-12(fp)
    e384:	000e1000 	call	e100 <read_CE_bit>
    e388:	10803fcc 	andi	r2,r2,255
    e38c:	10000226 	beq	r2,zero,e398 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    e390:	00bffec4 	movi	r2,-5
    e394:	00000106 	br	e39c <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    e398:	0005883a 	mov	r2,zero
}
    e39c:	e037883a 	mov	sp,fp
    e3a0:	dfc00117 	ldw	ra,4(sp)
    e3a4:	df000017 	ldw	fp,0(sp)
    e3a8:	dec00204 	addi	sp,sp,8
    e3ac:	f800283a 	ret

0000e3b0 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    e3b0:	defffc04 	addi	sp,sp,-16
    e3b4:	dfc00315 	stw	ra,12(sp)
    e3b8:	df000215 	stw	fp,8(sp)
    e3bc:	df000204 	addi	fp,sp,8
    e3c0:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
    e3c4:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
    e3c8:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    e3cc:	e0bffe44 	addi	r2,fp,-7
    e3d0:	e13fff17 	ldw	r4,-4(fp)
    e3d4:	100b883a 	mov	r5,r2
    e3d8:	000e4840 	call	e484 <alt_up_ps2_read_data_byte_timeout>
    e3dc:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
    e3e0:	e0bffe03 	ldbu	r2,-8(fp)
    e3e4:	1000061e 	bne	r2,zero,e400 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    e3e8:	e0bffe43 	ldbu	r2,-7(fp)
    e3ec:	10803fcc 	andi	r2,r2,255
    e3f0:	10803e98 	cmpnei	r2,r2,250
    e3f4:	1000041e 	bne	r2,zero,e408 <alt_up_ps2_wait_for_ack+0x58>
				return 0;
    e3f8:	0005883a 	mov	r2,zero
    e3fc:	00000306 	br	e40c <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
    e400:	e0bffe03 	ldbu	r2,-8(fp)
    e404:	00000106 	br	e40c <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
    e408:	003ff006 	br	e3cc <__alt_mem_Flash_flash_data+0xf400e3cc>
	return -ETIMEDOUT;
}
    e40c:	e037883a 	mov	sp,fp
    e410:	dfc00117 	ldw	ra,4(sp)
    e414:	df000017 	ldw	fp,0(sp)
    e418:	dec00204 	addi	sp,sp,8
    e41c:	f800283a 	ret

0000e420 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    e420:	defffa04 	addi	sp,sp,-24
    e424:	dfc00515 	stw	ra,20(sp)
    e428:	df000415 	stw	fp,16(sp)
    e42c:	df000404 	addi	fp,sp,16
    e430:	e13ffe15 	stw	r4,-8(fp)
    e434:	2805883a 	mov	r2,r5
    e438:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    e43c:	e0bfff03 	ldbu	r2,-4(fp)
    e440:	e13ffe17 	ldw	r4,-8(fp)
    e444:	100b883a 	mov	r5,r2
    e448:	000e33c0 	call	e33c <alt_up_ps2_write_data_byte>
    e44c:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    e450:	e0bffc17 	ldw	r2,-16(fp)
    e454:	10000226 	beq	r2,zero,e460 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    e458:	e0bffc17 	ldw	r2,-16(fp)
    e45c:	00000406 	br	e470 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    e460:	e13ffe17 	ldw	r4,-8(fp)
    e464:	000e3b00 	call	e3b0 <alt_up_ps2_wait_for_ack>
    e468:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
    e46c:	e0bffd17 	ldw	r2,-12(fp)
}
    e470:	e037883a 	mov	sp,fp
    e474:	dfc00117 	ldw	ra,4(sp)
    e478:	df000017 	ldw	fp,0(sp)
    e47c:	dec00204 	addi	sp,sp,8
    e480:	f800283a 	ret

0000e484 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    e484:	defffa04 	addi	sp,sp,-24
    e488:	dfc00515 	stw	ra,20(sp)
    e48c:	df000415 	stw	fp,16(sp)
    e490:	df000404 	addi	fp,sp,16
    e494:	e13ffe15 	stw	r4,-8(fp)
    e498:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    e49c:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
    e4a0:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
    e4a4:	e0bffc17 	ldw	r2,-16(fp)
    e4a8:	10800044 	addi	r2,r2,1
    e4ac:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    e4b0:	e0bffe17 	ldw	r2,-8(fp)
    e4b4:	10800a17 	ldw	r2,40(r2)
    e4b8:	10800037 	ldwio	r2,0(r2)
    e4bc:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
    e4c0:	e13ffd17 	ldw	r4,-12(fp)
    e4c4:	000e1640 	call	e164 <read_data_valid>
    e4c8:	10803fcc 	andi	r2,r2,255
    e4cc:	10000726 	beq	r2,zero,e4ec <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    e4d0:	e13ffd17 	ldw	r4,-12(fp)
    e4d4:	000e1980 	call	e198 <read_data_byte>
    e4d8:	1007883a 	mov	r3,r2
    e4dc:	e0bfff17 	ldw	r2,-4(fp)
    e4e0:	10c00005 	stb	r3,0(r2)
			return 0;
    e4e4:	0005883a 	mov	r2,zero
    e4e8:	00000a06 	br	e514 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    e4ec:	e0bffe17 	ldw	r2,-8(fp)
    e4f0:	10800c17 	ldw	r2,48(r2)
    e4f4:	10000626 	beq	r2,zero,e510 <alt_up_ps2_read_data_byte_timeout+0x8c>
    e4f8:	e0bffe17 	ldw	r2,-8(fp)
    e4fc:	10c00c17 	ldw	r3,48(r2)
    e500:	e0bffc17 	ldw	r2,-16(fp)
    e504:	1880022e 	bgeu	r3,r2,e510 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
    e508:	00bfe304 	movi	r2,-116
    e50c:	00000106 	br	e514 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
    e510:	003fe406 	br	e4a4 <__alt_mem_Flash_flash_data+0xf400e4a4>
}
    e514:	e037883a 	mov	sp,fp
    e518:	dfc00117 	ldw	ra,4(sp)
    e51c:	df000017 	ldw	fp,0(sp)
    e520:	dec00204 	addi	sp,sp,8
    e524:	f800283a 	ret

0000e528 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    e528:	defffb04 	addi	sp,sp,-20
    e52c:	dfc00415 	stw	ra,16(sp)
    e530:	df000315 	stw	fp,12(sp)
    e534:	df000304 	addi	fp,sp,12
    e538:	e13ffe15 	stw	r4,-8(fp)
    e53c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    e540:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    e544:	e0bffe17 	ldw	r2,-8(fp)
    e548:	10800a17 	ldw	r2,40(r2)
    e54c:	10800037 	ldwio	r2,0(r2)
    e550:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
    e554:	e13ffd17 	ldw	r4,-12(fp)
    e558:	000e1640 	call	e164 <read_data_valid>
    e55c:	10803fcc 	andi	r2,r2,255
    e560:	10000726 	beq	r2,zero,e580 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    e564:	e13ffd17 	ldw	r4,-12(fp)
    e568:	000e1980 	call	e198 <read_data_byte>
    e56c:	1007883a 	mov	r3,r2
    e570:	e0bfff17 	ldw	r2,-4(fp)
    e574:	10c00005 	stb	r3,0(r2)
		return 0;
    e578:	0005883a 	mov	r2,zero
    e57c:	00000106 	br	e584 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    e580:	00bfffc4 	movi	r2,-1
}
    e584:	e037883a 	mov	sp,fp
    e588:	dfc00117 	ldw	ra,4(sp)
    e58c:	df000017 	ldw	fp,0(sp)
    e590:	dec00204 	addi	sp,sp,8
    e594:	f800283a 	ret

0000e598 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    e598:	defffb04 	addi	sp,sp,-20
    e59c:	dfc00415 	stw	ra,16(sp)
    e5a0:	df000315 	stw	fp,12(sp)
    e5a4:	df000304 	addi	fp,sp,12
    e5a8:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    e5ac:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
    e5b0:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    e5b4:	e0bfff17 	ldw	r2,-4(fp)
    e5b8:	10800a17 	ldw	r2,40(r2)
    e5bc:	10800037 	ldwio	r2,0(r2)
    e5c0:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    e5c4:	e13ffe17 	ldw	r4,-8(fp)
    e5c8:	000e1340 	call	e134 <read_num_bytes_available>
    e5cc:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
    e5d0:	e0bffd0b 	ldhu	r2,-12(fp)
    e5d4:	103ff71e 	bne	r2,zero,e5b4 <__alt_mem_Flash_flash_data+0xf400e5b4>
}
    e5d8:	e037883a 	mov	sp,fp
    e5dc:	dfc00117 	ldw	ra,4(sp)
    e5e0:	df000017 	ldw	fp,0(sp)
    e5e4:	dec00204 	addi	sp,sp,8
    e5e8:	f800283a 	ret

0000e5ec <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    e5ec:	defff804 	addi	sp,sp,-32
    e5f0:	dfc00715 	stw	ra,28(sp)
    e5f4:	df000615 	stw	fp,24(sp)
    e5f8:	df000604 	addi	fp,sp,24
    e5fc:	e13ffd15 	stw	r4,-12(fp)
    e600:	e17ffe15 	stw	r5,-8(fp)
    e604:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    e608:	e0bffd17 	ldw	r2,-12(fp)
    e60c:	10800017 	ldw	r2,0(r2)
    e610:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
    e614:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
    e618:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
    e61c:	e0fffc17 	ldw	r3,-16(fp)
    e620:	e0bfff17 	ldw	r2,-4(fp)
    e624:	18bffd16 	blt	r3,r2,e61c <__alt_mem_Flash_flash_data+0xf400e61c>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    e628:	e0bffe17 	ldw	r2,-8(fp)
    e62c:	10c00044 	addi	r3,r2,1
    e630:	e0fffe15 	stw	r3,-8(fp)
    e634:	e13ffa17 	ldw	r4,-24(fp)
    e638:	100b883a 	mov	r5,r2
    e63c:	000e4840 	call	e484 <alt_up_ps2_read_data_byte_timeout>
    e640:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
    e644:	e0bffb17 	ldw	r2,-20(fp)
    e648:	10000226 	beq	r2,zero,e654 <alt_up_ps2_read_fd+0x68>
			return count;
    e64c:	e0bffc17 	ldw	r2,-16(fp)
    e650:	00000406 	br	e664 <alt_up_ps2_read_fd+0x78>
		count++;
    e654:	e0bffc17 	ldw	r2,-16(fp)
    e658:	10800044 	addi	r2,r2,1
    e65c:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
    e660:	e0bffc17 	ldw	r2,-16(fp)
}
    e664:	e037883a 	mov	sp,fp
    e668:	dfc00117 	ldw	ra,4(sp)
    e66c:	df000017 	ldw	fp,0(sp)
    e670:	dec00204 	addi	sp,sp,8
    e674:	f800283a 	ret

0000e678 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    e678:	defff804 	addi	sp,sp,-32
    e67c:	dfc00715 	stw	ra,28(sp)
    e680:	df000615 	stw	fp,24(sp)
    e684:	df000604 	addi	fp,sp,24
    e688:	e13ffd15 	stw	r4,-12(fp)
    e68c:	e17ffe15 	stw	r5,-8(fp)
    e690:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    e694:	e0bffd17 	ldw	r2,-12(fp)
    e698:	10800017 	ldw	r2,0(r2)
    e69c:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    e6a0:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
    e6a4:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
    e6a8:	00001006 	br	e6ec <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    e6ac:	e0bffe17 	ldw	r2,-8(fp)
    e6b0:	10c00044 	addi	r3,r2,1
    e6b4:	e0fffe15 	stw	r3,-8(fp)
    e6b8:	10800003 	ldbu	r2,0(r2)
    e6bc:	10803fcc 	andi	r2,r2,255
    e6c0:	e13ffb17 	ldw	r4,-20(fp)
    e6c4:	100b883a 	mov	r5,r2
    e6c8:	000e33c0 	call	e33c <alt_up_ps2_write_data_byte>
    e6cc:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
    e6d0:	e0bffc17 	ldw	r2,-16(fp)
    e6d4:	10000226 	beq	r2,zero,e6e0 <alt_up_ps2_write_fd+0x68>
			return count;
    e6d8:	e0bffa17 	ldw	r2,-24(fp)
    e6dc:	00000706 	br	e6fc <alt_up_ps2_write_fd+0x84>
		count++;
    e6e0:	e0bffa17 	ldw	r2,-24(fp)
    e6e4:	10800044 	addi	r2,r2,1
    e6e8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    e6ec:	e0fffa17 	ldw	r3,-24(fp)
    e6f0:	e0bfff17 	ldw	r2,-4(fp)
    e6f4:	18bfed16 	blt	r3,r2,e6ac <__alt_mem_Flash_flash_data+0xf400e6ac>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    e6f8:	e0bffa17 	ldw	r2,-24(fp)
}
    e6fc:	e037883a 	mov	sp,fp
    e700:	dfc00117 	ldw	ra,4(sp)
    e704:	df000017 	ldw	fp,0(sp)
    e708:	dec00204 	addi	sp,sp,8
    e70c:	f800283a 	ret

0000e710 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    e710:	defffc04 	addi	sp,sp,-16
    e714:	dfc00315 	stw	ra,12(sp)
    e718:	df000215 	stw	fp,8(sp)
    e71c:	df000204 	addi	fp,sp,8
    e720:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    e724:	e13fff17 	ldw	r4,-4(fp)
    e728:	01400074 	movhi	r5,1
    e72c:	29493904 	addi	r5,r5,9444
    e730:	000f0cc0 	call	f0cc <alt_find_dev>
    e734:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e738:	e0bffe17 	ldw	r2,-8(fp)
}
    e73c:	e037883a 	mov	sp,fp
    e740:	dfc00117 	ldw	ra,4(sp)
    e744:	df000017 	ldw	fp,0(sp)
    e748:	dec00204 	addi	sp,sp,8
    e74c:	f800283a 	ret

0000e750 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    e750:	defffd04 	addi	sp,sp,-12
    e754:	df000215 	stw	fp,8(sp)
    e758:	df000204 	addi	fp,sp,8
    e75c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    e760:	e0bfff17 	ldw	r2,-4(fp)
    e764:	10800a17 	ldw	r2,40(r2)
    e768:	10800104 	addi	r2,r2,4
    e76c:	10800037 	ldwio	r2,0(r2)
    e770:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    e774:	e0bffe17 	ldw	r2,-8(fp)
    e778:	10800054 	ori	r2,r2,1
    e77c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    e780:	e0bfff17 	ldw	r2,-4(fp)
    e784:	10800a17 	ldw	r2,40(r2)
    e788:	10800104 	addi	r2,r2,4
    e78c:	1007883a 	mov	r3,r2
    e790:	e0bffe17 	ldw	r2,-8(fp)
    e794:	18800035 	stwio	r2,0(r3)
}
    e798:	e037883a 	mov	sp,fp
    e79c:	df000017 	ldw	fp,0(sp)
    e7a0:	dec00104 	addi	sp,sp,4
    e7a4:	f800283a 	ret

0000e7a8 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    e7a8:	defffd04 	addi	sp,sp,-12
    e7ac:	df000215 	stw	fp,8(sp)
    e7b0:	df000204 	addi	fp,sp,8
    e7b4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    e7b8:	e0bfff17 	ldw	r2,-4(fp)
    e7bc:	10800a17 	ldw	r2,40(r2)
    e7c0:	10800104 	addi	r2,r2,4
    e7c4:	10800037 	ldwio	r2,0(r2)
    e7c8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    e7cc:	e0fffe17 	ldw	r3,-8(fp)
    e7d0:	00bfff84 	movi	r2,-2
    e7d4:	1884703a 	and	r2,r3,r2
    e7d8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    e7dc:	e0bfff17 	ldw	r2,-4(fp)
    e7e0:	10800a17 	ldw	r2,40(r2)
    e7e4:	10800104 	addi	r2,r2,4
    e7e8:	1007883a 	mov	r3,r2
    e7ec:	e0bffe17 	ldw	r2,-8(fp)
    e7f0:	18800035 	stwio	r2,0(r3)
}
    e7f4:	e037883a 	mov	sp,fp
    e7f8:	df000017 	ldw	fp,0(sp)
    e7fc:	dec00104 	addi	sp,sp,4
    e800:	f800283a 	ret

0000e804 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    e804:	defffd04 	addi	sp,sp,-12
    e808:	df000215 	stw	fp,8(sp)
    e80c:	df000204 	addi	fp,sp,8
    e810:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    e814:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    e818:	e0bfff17 	ldw	r2,-4(fp)
    e81c:	10800a17 	ldw	r2,40(r2)
    e820:	10800084 	addi	r2,r2,2
    e824:	1080002b 	ldhuio	r2,0(r2)
    e828:	10bfffcc 	andi	r2,r2,65535
    e82c:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    e830:	e0bffe0b 	ldhu	r2,-8(fp)
}
    e834:	e037883a 	mov	sp,fp
    e838:	df000017 	ldw	fp,0(sp)
    e83c:	dec00104 	addi	sp,sp,4
    e840:	f800283a 	ret

0000e844 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    e844:	defffd04 	addi	sp,sp,-12
    e848:	df000215 	stw	fp,8(sp)
    e84c:	df000204 	addi	fp,sp,8
    e850:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    e854:	e0bfff17 	ldw	r2,-4(fp)
    e858:	10800a17 	ldw	r2,40(r2)
    e85c:	10800104 	addi	r2,r2,4
    e860:	10800037 	ldwio	r2,0(r2)
    e864:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    e868:	e0bffe17 	ldw	r2,-8(fp)
    e86c:	1004d43a 	srli	r2,r2,16
}
    e870:	e037883a 	mov	sp,fp
    e874:	df000017 	ldw	fp,0(sp)
    e878:	dec00104 	addi	sp,sp,4
    e87c:	f800283a 	ret

0000e880 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    e880:	defffd04 	addi	sp,sp,-12
    e884:	df000215 	stw	fp,8(sp)
    e888:	df000204 	addi	fp,sp,8
    e88c:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    e890:	e0bfff17 	ldw	r2,-4(fp)
    e894:	1080800c 	andi	r2,r2,512
    e898:	1004d27a 	srli	r2,r2,9
    e89c:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    e8a0:	e0bffe17 	ldw	r2,-8(fp)
    e8a4:	10000226 	beq	r2,zero,e8b0 <alt_up_rs232_check_parity+0x30>
    e8a8:	00bfffc4 	movi	r2,-1
    e8ac:	00000106 	br	e8b4 <alt_up_rs232_check_parity+0x34>
    e8b0:	0005883a 	mov	r2,zero
}
    e8b4:	e037883a 	mov	sp,fp
    e8b8:	df000017 	ldw	fp,0(sp)
    e8bc:	dec00104 	addi	sp,sp,4
    e8c0:	f800283a 	ret

0000e8c4 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    e8c4:	defffd04 	addi	sp,sp,-12
    e8c8:	df000215 	stw	fp,8(sp)
    e8cc:	df000204 	addi	fp,sp,8
    e8d0:	e13ffe15 	stw	r4,-8(fp)
    e8d4:	2805883a 	mov	r2,r5
    e8d8:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    e8dc:	e0bffe17 	ldw	r2,-8(fp)
    e8e0:	10800a17 	ldw	r2,40(r2)
    e8e4:	1007883a 	mov	r3,r2
    e8e8:	e0bfff03 	ldbu	r2,-4(fp)
    e8ec:	18800035 	stwio	r2,0(r3)
	return 0;
    e8f0:	0005883a 	mov	r2,zero
}
    e8f4:	e037883a 	mov	sp,fp
    e8f8:	df000017 	ldw	fp,0(sp)
    e8fc:	dec00104 	addi	sp,sp,4
    e900:	f800283a 	ret

0000e904 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    e904:	defffa04 	addi	sp,sp,-24
    e908:	dfc00515 	stw	ra,20(sp)
    e90c:	df000415 	stw	fp,16(sp)
    e910:	df000404 	addi	fp,sp,16
    e914:	e13ffd15 	stw	r4,-12(fp)
    e918:	e17ffe15 	stw	r5,-8(fp)
    e91c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    e920:	e0bffd17 	ldw	r2,-12(fp)
    e924:	10800a17 	ldw	r2,40(r2)
    e928:	10800037 	ldwio	r2,0(r2)
    e92c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    e930:	e0bffc17 	ldw	r2,-16(fp)
    e934:	1007883a 	mov	r3,r2
    e938:	e0bffe17 	ldw	r2,-8(fp)
    e93c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    e940:	e13ffc17 	ldw	r4,-16(fp)
    e944:	000e8800 	call	e880 <alt_up_rs232_check_parity>
    e948:	1007883a 	mov	r3,r2
    e94c:	e0bfff17 	ldw	r2,-4(fp)
    e950:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    e954:	e0bffc17 	ldw	r2,-16(fp)
    e958:	10a0000c 	andi	r2,r2,32768
    e95c:	1004d3fa 	srli	r2,r2,15
    e960:	10bfffc4 	addi	r2,r2,-1
}
    e964:	e037883a 	mov	sp,fp
    e968:	dfc00117 	ldw	ra,4(sp)
    e96c:	df000017 	ldw	fp,0(sp)
    e970:	dec00204 	addi	sp,sp,8
    e974:	f800283a 	ret

0000e978 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    e978:	defff804 	addi	sp,sp,-32
    e97c:	dfc00715 	stw	ra,28(sp)
    e980:	df000615 	stw	fp,24(sp)
    e984:	df000604 	addi	fp,sp,24
    e988:	e13ffd15 	stw	r4,-12(fp)
    e98c:	e17ffe15 	stw	r5,-8(fp)
    e990:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    e994:	e0bffd17 	ldw	r2,-12(fp)
    e998:	10800017 	ldw	r2,0(r2)
    e99c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    e9a0:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    e9a4:	00000e06 	br	e9e0 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    e9a8:	e0bffe17 	ldw	r2,-8(fp)
    e9ac:	10c00044 	addi	r3,r2,1
    e9b0:	e0fffe15 	stw	r3,-8(fp)
    e9b4:	e0fffc04 	addi	r3,fp,-16
    e9b8:	e13ffb17 	ldw	r4,-20(fp)
    e9bc:	100b883a 	mov	r5,r2
    e9c0:	180d883a 	mov	r6,r3
    e9c4:	000e9040 	call	e904 <alt_up_rs232_read_data>
    e9c8:	1000041e 	bne	r2,zero,e9dc <alt_up_rs232_read_fd+0x64>
			count++;
    e9cc:	e0bffa17 	ldw	r2,-24(fp)
    e9d0:	10800044 	addi	r2,r2,1
    e9d4:	e0bffa15 	stw	r2,-24(fp)
    e9d8:	00000106 	br	e9e0 <alt_up_rs232_read_fd+0x68>
		else
			break;
    e9dc:	00000406 	br	e9f0 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    e9e0:	e0bfff17 	ldw	r2,-4(fp)
    e9e4:	10ffffc4 	addi	r3,r2,-1
    e9e8:	e0ffff15 	stw	r3,-4(fp)
    e9ec:	103fee1e 	bne	r2,zero,e9a8 <__alt_mem_Flash_flash_data+0xf400e9a8>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    e9f0:	e0bffa17 	ldw	r2,-24(fp)
}
    e9f4:	e037883a 	mov	sp,fp
    e9f8:	dfc00117 	ldw	ra,4(sp)
    e9fc:	df000017 	ldw	fp,0(sp)
    ea00:	dec00204 	addi	sp,sp,8
    ea04:	f800283a 	ret

0000ea08 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    ea08:	defff904 	addi	sp,sp,-28
    ea0c:	dfc00615 	stw	ra,24(sp)
    ea10:	df000515 	stw	fp,20(sp)
    ea14:	df000504 	addi	fp,sp,20
    ea18:	e13ffd15 	stw	r4,-12(fp)
    ea1c:	e17ffe15 	stw	r5,-8(fp)
    ea20:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    ea24:	e0bffd17 	ldw	r2,-12(fp)
    ea28:	10800017 	ldw	r2,0(r2)
    ea2c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    ea30:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    ea34:	00000f06 	br	ea74 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    ea38:	e0bffe17 	ldw	r2,-8(fp)
    ea3c:	10800003 	ldbu	r2,0(r2)
    ea40:	10803fcc 	andi	r2,r2,255
    ea44:	e13ffc17 	ldw	r4,-16(fp)
    ea48:	100b883a 	mov	r5,r2
    ea4c:	000e8c40 	call	e8c4 <alt_up_rs232_write_data>
    ea50:	1000071e 	bne	r2,zero,ea70 <alt_up_rs232_write_fd+0x68>
		{
			count++;
    ea54:	e0bffb17 	ldw	r2,-20(fp)
    ea58:	10800044 	addi	r2,r2,1
    ea5c:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    ea60:	e0bffe17 	ldw	r2,-8(fp)
    ea64:	10800044 	addi	r2,r2,1
    ea68:	e0bffe15 	stw	r2,-8(fp)
    ea6c:	00000106 	br	ea74 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
    ea70:	00000406 	br	ea84 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    ea74:	e0bfff17 	ldw	r2,-4(fp)
    ea78:	10ffffc4 	addi	r3,r2,-1
    ea7c:	e0ffff15 	stw	r3,-4(fp)
    ea80:	103fed1e 	bne	r2,zero,ea38 <__alt_mem_Flash_flash_data+0xf400ea38>
			ptr++;
		}
		else
			break;
	}
	return count;
    ea84:	e0bffb17 	ldw	r2,-20(fp)
}
    ea88:	e037883a 	mov	sp,fp
    ea8c:	dfc00117 	ldw	ra,4(sp)
    ea90:	df000017 	ldw	fp,0(sp)
    ea94:	dec00204 	addi	sp,sp,8
    ea98:	f800283a 	ret

0000ea9c <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    ea9c:	defffc04 	addi	sp,sp,-16
    eaa0:	dfc00315 	stw	ra,12(sp)
    eaa4:	df000215 	stw	fp,8(sp)
    eaa8:	df000204 	addi	fp,sp,8
    eaac:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    eab0:	e13fff17 	ldw	r4,-4(fp)
    eab4:	01400074 	movhi	r5,1
    eab8:	29493904 	addi	r5,r5,9444
    eabc:	000f0cc0 	call	f0cc <alt_find_dev>
    eac0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    eac4:	e0bffe17 	ldw	r2,-8(fp)
}
    eac8:	e037883a 	mov	sp,fp
    eacc:	dfc00117 	ldw	ra,4(sp)
    ead0:	df000017 	ldw	fp,0(sp)
    ead4:	dec00204 	addi	sp,sp,8
    ead8:	f800283a 	ret

0000eadc <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    eadc:	defffc04 	addi	sp,sp,-16
    eae0:	dfc00315 	stw	ra,12(sp)
    eae4:	df000215 	stw	fp,8(sp)
    eae8:	df000204 	addi	fp,sp,8
    eaec:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    eaf0:	e0bfff17 	ldw	r2,-4(fp)
    eaf4:	10800217 	ldw	r2,8(r2)
    eaf8:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    eafc:	00000b06 	br	eb2c <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    eb00:	e13ffe17 	ldw	r4,-8(fp)
    eb04:	01400074 	movhi	r5,1
    eb08:	2941af04 	addi	r5,r5,1724
    eb0c:	000ffd80 	call	ffd8 <strcmp>
    eb10:	1000031e 	bne	r2,zero,eb20 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
    eb14:	e0bffe17 	ldw	r2,-8(fp)
    eb18:	10000005 	stb	zero,0(r2)
			break;
    eb1c:	00000906 	br	eb44 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    eb20:	e0bffe17 	ldw	r2,-8(fp)
    eb24:	10800044 	addi	r2,r2,1
    eb28:	e0bffe15 	stw	r2,-8(fp)
    eb2c:	e0bffe17 	ldw	r2,-8(fp)
    eb30:	10800003 	ldbu	r2,0(r2)
    eb34:	10803fcc 	andi	r2,r2,255
    eb38:	1080201c 	xori	r2,r2,128
    eb3c:	10bfe004 	addi	r2,r2,-128
    eb40:	103fef1e 	bne	r2,zero,eb00 <__alt_mem_Flash_flash_data+0xf400eb00>
			(*name) = '\0';
			break;
		}
	}
	
	return;
    eb44:	0001883a 	nop
}
    eb48:	e037883a 	mov	sp,fp
    eb4c:	dfc00117 	ldw	ra,4(sp)
    eb50:	df000017 	ldw	fp,0(sp)
    eb54:	dec00204 	addi	sp,sp,8
    eb58:	f800283a 	ret

0000eb5c <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    eb5c:	defffc04 	addi	sp,sp,-16
    eb60:	dfc00315 	stw	ra,12(sp)
    eb64:	df000215 	stw	fp,8(sp)
    eb68:	df000204 	addi	fp,sp,8
    eb6c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    eb70:	e13fff17 	ldw	r4,-4(fp)
    eb74:	01400074 	movhi	r5,1
    eb78:	29493904 	addi	r5,r5,9444
    eb7c:	000f0cc0 	call	f0cc <alt_find_dev>
    eb80:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    eb84:	e0bffe17 	ldw	r2,-8(fp)
}
    eb88:	e037883a 	mov	sp,fp
    eb8c:	dfc00117 	ldw	ra,4(sp)
    eb90:	df000017 	ldw	fp,0(sp)
    eb94:	dec00204 	addi	sp,sp,8
    eb98:	f800283a 	ret

0000eb9c <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    eb9c:	defffa04 	addi	sp,sp,-24
    eba0:	df000515 	stw	fp,20(sp)
    eba4:	df000504 	addi	fp,sp,20
    eba8:	e13ffc15 	stw	r4,-16(fp)
    ebac:	2805883a 	mov	r2,r5
    ebb0:	e1bffe15 	stw	r6,-8(fp)
    ebb4:	e1ffff15 	stw	r7,-4(fp)
    ebb8:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    ebbc:	e0bffc17 	ldw	r2,-16(fp)
    ebc0:	10800c17 	ldw	r2,48(r2)
    ebc4:	e0fffe17 	ldw	r3,-8(fp)
    ebc8:	1880042e 	bgeu	r3,r2,ebdc <alt_up_char_buffer_draw+0x40>
    ebcc:	e0bffc17 	ldw	r2,-16(fp)
    ebd0:	10800d17 	ldw	r2,52(r2)
    ebd4:	e0ffff17 	ldw	r3,-4(fp)
    ebd8:	18800236 	bltu	r3,r2,ebe4 <alt_up_char_buffer_draw+0x48>
		return -1;
    ebdc:	00bfffc4 	movi	r2,-1
    ebe0:	00001d06 	br	ec58 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    ebe4:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    ebe8:	e0bffc17 	ldw	r2,-16(fp)
    ebec:	10c00f17 	ldw	r3,60(r2)
    ebf0:	e0bffe17 	ldw	r2,-8(fp)
    ebf4:	1884703a 	and	r2,r3,r2
    ebf8:	e0fffc17 	ldw	r3,-16(fp)
    ebfc:	18c00e17 	ldw	r3,56(r3)
    ec00:	10c4983a 	sll	r2,r2,r3
    ec04:	e0fffb17 	ldw	r3,-20(fp)
    ec08:	1884b03a 	or	r2,r3,r2
    ec0c:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    ec10:	e0bffc17 	ldw	r2,-16(fp)
    ec14:	10c01117 	ldw	r3,68(r2)
    ec18:	e0bfff17 	ldw	r2,-4(fp)
    ec1c:	1884703a 	and	r2,r3,r2
    ec20:	e0fffc17 	ldw	r3,-16(fp)
    ec24:	18c01017 	ldw	r3,64(r3)
    ec28:	10c4983a 	sll	r2,r2,r3
    ec2c:	e0fffb17 	ldw	r3,-20(fp)
    ec30:	1884b03a 	or	r2,r3,r2
    ec34:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    ec38:	e0bffc17 	ldw	r2,-16(fp)
    ec3c:	10c00b17 	ldw	r3,44(r2)
    ec40:	e0bffb17 	ldw	r2,-20(fp)
    ec44:	1885883a 	add	r2,r3,r2
    ec48:	1007883a 	mov	r3,r2
    ec4c:	e0bffd03 	ldbu	r2,-12(fp)
    ec50:	18800025 	stbio	r2,0(r3)

	return 0;
    ec54:	0005883a 	mov	r2,zero
}
    ec58:	e037883a 	mov	sp,fp
    ec5c:	df000017 	ldw	fp,0(sp)
    ec60:	dec00104 	addi	sp,sp,4
    ec64:	f800283a 	ret

0000ec68 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    ec68:	defffa04 	addi	sp,sp,-24
    ec6c:	df000515 	stw	fp,20(sp)
    ec70:	df000504 	addi	fp,sp,20
    ec74:	e13ffc15 	stw	r4,-16(fp)
    ec78:	e17ffd15 	stw	r5,-12(fp)
    ec7c:	e1bffe15 	stw	r6,-8(fp)
    ec80:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    ec84:	e0bffc17 	ldw	r2,-16(fp)
    ec88:	10800c17 	ldw	r2,48(r2)
    ec8c:	e0fffe17 	ldw	r3,-8(fp)
    ec90:	1880042e 	bgeu	r3,r2,eca4 <alt_up_char_buffer_string+0x3c>
    ec94:	e0bffc17 	ldw	r2,-16(fp)
    ec98:	10800d17 	ldw	r2,52(r2)
    ec9c:	e0ffff17 	ldw	r3,-4(fp)
    eca0:	18800236 	bltu	r3,r2,ecac <alt_up_char_buffer_string+0x44>
		return -1;
    eca4:	00bfffc4 	movi	r2,-1
    eca8:	00002b06 	br	ed58 <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
    ecac:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    ecb0:	e0bffc17 	ldw	r2,-16(fp)
    ecb4:	10801017 	ldw	r2,64(r2)
    ecb8:	1007883a 	mov	r3,r2
    ecbc:	e0bfff17 	ldw	r2,-4(fp)
    ecc0:	10c6983a 	sll	r3,r2,r3
    ecc4:	e0bffe17 	ldw	r2,-8(fp)
    ecc8:	1885883a 	add	r2,r3,r2
    eccc:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
    ecd0:	00001a06 	br	ed3c <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    ecd4:	e0bffc17 	ldw	r2,-16(fp)
    ecd8:	10c00b17 	ldw	r3,44(r2)
    ecdc:	e0bffb17 	ldw	r2,-20(fp)
    ece0:	1885883a 	add	r2,r3,r2
    ece4:	1007883a 	mov	r3,r2
    ece8:	e0bffd17 	ldw	r2,-12(fp)
    ecec:	10800003 	ldbu	r2,0(r2)
    ecf0:	10803fcc 	andi	r2,r2,255
    ecf4:	1080201c 	xori	r2,r2,128
    ecf8:	10bfe004 	addi	r2,r2,-128
    ecfc:	18800025 	stbio	r2,0(r3)
		++ptr;
    ed00:	e0bffd17 	ldw	r2,-12(fp)
    ed04:	10800044 	addi	r2,r2,1
    ed08:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
    ed0c:	e0bffe17 	ldw	r2,-8(fp)
    ed10:	10800044 	addi	r2,r2,1
    ed14:	e0bffe15 	stw	r2,-8(fp)
    ed18:	e0bffc17 	ldw	r2,-16(fp)
    ed1c:	10800c17 	ldw	r2,48(r2)
    ed20:	e0fffe17 	ldw	r3,-8(fp)
    ed24:	18800236 	bltu	r3,r2,ed30 <alt_up_char_buffer_string+0xc8>
			return -1;
    ed28:	00bfffc4 	movi	r2,-1
    ed2c:	00000a06 	br	ed58 <alt_up_char_buffer_string+0xf0>
		++offset;
    ed30:	e0bffb17 	ldw	r2,-20(fp)
    ed34:	10800044 	addi	r2,r2,1
    ed38:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    ed3c:	e0bffd17 	ldw	r2,-12(fp)
    ed40:	10800003 	ldbu	r2,0(r2)
    ed44:	10803fcc 	andi	r2,r2,255
    ed48:	1080201c 	xori	r2,r2,128
    ed4c:	10bfe004 	addi	r2,r2,-128
    ed50:	103fe01e 	bne	r2,zero,ecd4 <__alt_mem_Flash_flash_data+0xf400ecd4>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    ed54:	0005883a 	mov	r2,zero
}
    ed58:	e037883a 	mov	sp,fp
    ed5c:	df000017 	ldw	fp,0(sp)
    ed60:	dec00104 	addi	sp,sp,4
    ed64:	f800283a 	ret

0000ed68 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    ed68:	defffe04 	addi	sp,sp,-8
    ed6c:	df000115 	stw	fp,4(sp)
    ed70:	df000104 	addi	fp,sp,4
    ed74:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    ed78:	e0bfff17 	ldw	r2,-4(fp)
    ed7c:	10800a17 	ldw	r2,40(r2)
    ed80:	10800084 	addi	r2,r2,2
    ed84:	1007883a 	mov	r3,r2
    ed88:	00800044 	movi	r2,1
    ed8c:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    ed90:	0001883a 	nop
    ed94:	e0bfff17 	ldw	r2,-4(fp)
    ed98:	10800a17 	ldw	r2,40(r2)
    ed9c:	10800084 	addi	r2,r2,2
    eda0:	10800023 	ldbuio	r2,0(r2)
    eda4:	10803fcc 	andi	r2,r2,255
    eda8:	1080004c 	andi	r2,r2,1
    edac:	103ff91e 	bne	r2,zero,ed94 <__alt_mem_Flash_flash_data+0xf400ed94>
	return 0;
    edb0:	0005883a 	mov	r2,zero
}
    edb4:	e037883a 	mov	sp,fp
    edb8:	df000017 	ldw	fp,0(sp)
    edbc:	dec00104 	addi	sp,sp,4
    edc0:	f800283a 	ret

0000edc4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    edc4:	defff504 	addi	sp,sp,-44
    edc8:	df000a15 	stw	fp,40(sp)
    edcc:	df000a04 	addi	fp,sp,40
    edd0:	e13ffc15 	stw	r4,-16(fp)
    edd4:	e17ffd15 	stw	r5,-12(fp)
    edd8:	e1bffe15 	stw	r6,-8(fp)
    eddc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    ede0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    ede4:	00800074 	movhi	r2,1
    ede8:	10914004 	addi	r2,r2,17664
    edec:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    edf0:	10003f26 	beq	r2,zero,eef0 <alt_alarm_start+0x12c>
  {
    if (alarm)
    edf4:	e0bffc17 	ldw	r2,-16(fp)
    edf8:	10003b26 	beq	r2,zero,eee8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    edfc:	e0bffc17 	ldw	r2,-16(fp)
    ee00:	e0fffe17 	ldw	r3,-8(fp)
    ee04:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    ee08:	e0bffc17 	ldw	r2,-16(fp)
    ee0c:	e0ffff17 	ldw	r3,-4(fp)
    ee10:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee14:	0005303a 	rdctl	r2,status
    ee18:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee1c:	e0fff817 	ldw	r3,-32(fp)
    ee20:	00bfff84 	movi	r2,-2
    ee24:	1884703a 	and	r2,r3,r2
    ee28:	1001703a 	wrctl	status,r2
  
  return context;
    ee2c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    ee30:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    ee34:	00800074 	movhi	r2,1
    ee38:	10914104 	addi	r2,r2,17668
    ee3c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    ee40:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    ee44:	e0fffd17 	ldw	r3,-12(fp)
    ee48:	e0bff617 	ldw	r2,-40(fp)
    ee4c:	1885883a 	add	r2,r3,r2
    ee50:	10c00044 	addi	r3,r2,1
    ee54:	e0bffc17 	ldw	r2,-16(fp)
    ee58:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    ee5c:	e0bffc17 	ldw	r2,-16(fp)
    ee60:	10c00217 	ldw	r3,8(r2)
    ee64:	e0bff617 	ldw	r2,-40(fp)
    ee68:	1880042e 	bgeu	r3,r2,ee7c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    ee6c:	e0bffc17 	ldw	r2,-16(fp)
    ee70:	00c00044 	movi	r3,1
    ee74:	10c00405 	stb	r3,16(r2)
    ee78:	00000206 	br	ee84 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    ee7c:	e0bffc17 	ldw	r2,-16(fp)
    ee80:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    ee84:	e0fffc17 	ldw	r3,-16(fp)
    ee88:	00800074 	movhi	r2,1
    ee8c:	10895e04 	addi	r2,r2,9592
    ee90:	e0bff915 	stw	r2,-28(fp)
    ee94:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ee98:	e0bffa17 	ldw	r2,-24(fp)
    ee9c:	e0fff917 	ldw	r3,-28(fp)
    eea0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    eea4:	e0bff917 	ldw	r2,-28(fp)
    eea8:	10c00017 	ldw	r3,0(r2)
    eeac:	e0bffa17 	ldw	r2,-24(fp)
    eeb0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    eeb4:	e0bff917 	ldw	r2,-28(fp)
    eeb8:	10800017 	ldw	r2,0(r2)
    eebc:	e0fffa17 	ldw	r3,-24(fp)
    eec0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    eec4:	e0bff917 	ldw	r2,-28(fp)
    eec8:	e0fffa17 	ldw	r3,-24(fp)
    eecc:	10c00015 	stw	r3,0(r2)
    eed0:	e0bff717 	ldw	r2,-36(fp)
    eed4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eed8:	e0bffb17 	ldw	r2,-20(fp)
    eedc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    eee0:	0005883a 	mov	r2,zero
    eee4:	00000306 	br	eef4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    eee8:	00bffa84 	movi	r2,-22
    eeec:	00000106 	br	eef4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    eef0:	00bfde84 	movi	r2,-134
  }
}
    eef4:	e037883a 	mov	sp,fp
    eef8:	df000017 	ldw	fp,0(sp)
    eefc:	dec00104 	addi	sp,sp,4
    ef00:	f800283a 	ret

0000ef04 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    ef04:	deffff04 	addi	sp,sp,-4
    ef08:	df000015 	stw	fp,0(sp)
    ef0c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    ef10:	e037883a 	mov	sp,fp
    ef14:	df000017 	ldw	fp,0(sp)
    ef18:	dec00104 	addi	sp,sp,4
    ef1c:	f800283a 	ret

0000ef20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ef20:	defffe04 	addi	sp,sp,-8
    ef24:	dfc00115 	stw	ra,4(sp)
    ef28:	df000015 	stw	fp,0(sp)
    ef2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ef30:	00800074 	movhi	r2,1
    ef34:	10893c04 	addi	r2,r2,9456
    ef38:	10800017 	ldw	r2,0(r2)
    ef3c:	10000526 	beq	r2,zero,ef54 <alt_get_errno+0x34>
    ef40:	00800074 	movhi	r2,1
    ef44:	10893c04 	addi	r2,r2,9456
    ef48:	10800017 	ldw	r2,0(r2)
    ef4c:	103ee83a 	callr	r2
    ef50:	00000206 	br	ef5c <alt_get_errno+0x3c>
    ef54:	00800074 	movhi	r2,1
    ef58:	10912204 	addi	r2,r2,17544
}
    ef5c:	e037883a 	mov	sp,fp
    ef60:	dfc00117 	ldw	ra,4(sp)
    ef64:	df000017 	ldw	fp,0(sp)
    ef68:	dec00204 	addi	sp,sp,8
    ef6c:	f800283a 	ret

0000ef70 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    ef70:	defffa04 	addi	sp,sp,-24
    ef74:	dfc00515 	stw	ra,20(sp)
    ef78:	df000415 	stw	fp,16(sp)
    ef7c:	df000404 	addi	fp,sp,16
    ef80:	e13ffe15 	stw	r4,-8(fp)
    ef84:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    ef88:	e0bffe17 	ldw	r2,-8(fp)
    ef8c:	10000326 	beq	r2,zero,ef9c <alt_dev_llist_insert+0x2c>
    ef90:	e0bffe17 	ldw	r2,-8(fp)
    ef94:	10800217 	ldw	r2,8(r2)
    ef98:	1000061e 	bne	r2,zero,efb4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    ef9c:	000ef200 	call	ef20 <alt_get_errno>
    efa0:	1007883a 	mov	r3,r2
    efa4:	00800584 	movi	r2,22
    efa8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    efac:	00bffa84 	movi	r2,-22
    efb0:	00001306 	br	f000 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    efb4:	e0bffe17 	ldw	r2,-8(fp)
    efb8:	e0ffff17 	ldw	r3,-4(fp)
    efbc:	e0fffc15 	stw	r3,-16(fp)
    efc0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    efc4:	e0bffd17 	ldw	r2,-12(fp)
    efc8:	e0fffc17 	ldw	r3,-16(fp)
    efcc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    efd0:	e0bffc17 	ldw	r2,-16(fp)
    efd4:	10c00017 	ldw	r3,0(r2)
    efd8:	e0bffd17 	ldw	r2,-12(fp)
    efdc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    efe0:	e0bffc17 	ldw	r2,-16(fp)
    efe4:	10800017 	ldw	r2,0(r2)
    efe8:	e0fffd17 	ldw	r3,-12(fp)
    efec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    eff0:	e0bffc17 	ldw	r2,-16(fp)
    eff4:	e0fffd17 	ldw	r3,-12(fp)
    eff8:	10c00015 	stw	r3,0(r2)

  return 0;  
    effc:	0005883a 	mov	r2,zero
}
    f000:	e037883a 	mov	sp,fp
    f004:	dfc00117 	ldw	ra,4(sp)
    f008:	df000017 	ldw	fp,0(sp)
    f00c:	dec00204 	addi	sp,sp,8
    f010:	f800283a 	ret

0000f014 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f014:	defffd04 	addi	sp,sp,-12
    f018:	dfc00215 	stw	ra,8(sp)
    f01c:	df000115 	stw	fp,4(sp)
    f020:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f024:	00800074 	movhi	r2,1
    f028:	1080d704 	addi	r2,r2,860
    f02c:	e0bfff15 	stw	r2,-4(fp)
    f030:	00000606 	br	f04c <_do_ctors+0x38>
        (*ctor) (); 
    f034:	e0bfff17 	ldw	r2,-4(fp)
    f038:	10800017 	ldw	r2,0(r2)
    f03c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f040:	e0bfff17 	ldw	r2,-4(fp)
    f044:	10bfff04 	addi	r2,r2,-4
    f048:	e0bfff15 	stw	r2,-4(fp)
    f04c:	e0ffff17 	ldw	r3,-4(fp)
    f050:	00800074 	movhi	r2,1
    f054:	1080d804 	addi	r2,r2,864
    f058:	18bff62e 	bgeu	r3,r2,f034 <__alt_mem_Flash_flash_data+0xf400f034>
        (*ctor) (); 
}
    f05c:	e037883a 	mov	sp,fp
    f060:	dfc00117 	ldw	ra,4(sp)
    f064:	df000017 	ldw	fp,0(sp)
    f068:	dec00204 	addi	sp,sp,8
    f06c:	f800283a 	ret

0000f070 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f070:	defffd04 	addi	sp,sp,-12
    f074:	dfc00215 	stw	ra,8(sp)
    f078:	df000115 	stw	fp,4(sp)
    f07c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f080:	00800074 	movhi	r2,1
    f084:	1080d704 	addi	r2,r2,860
    f088:	e0bfff15 	stw	r2,-4(fp)
    f08c:	00000606 	br	f0a8 <_do_dtors+0x38>
        (*dtor) (); 
    f090:	e0bfff17 	ldw	r2,-4(fp)
    f094:	10800017 	ldw	r2,0(r2)
    f098:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f09c:	e0bfff17 	ldw	r2,-4(fp)
    f0a0:	10bfff04 	addi	r2,r2,-4
    f0a4:	e0bfff15 	stw	r2,-4(fp)
    f0a8:	e0ffff17 	ldw	r3,-4(fp)
    f0ac:	00800074 	movhi	r2,1
    f0b0:	1080d804 	addi	r2,r2,864
    f0b4:	18bff62e 	bgeu	r3,r2,f090 <__alt_mem_Flash_flash_data+0xf400f090>
        (*dtor) (); 
}
    f0b8:	e037883a 	mov	sp,fp
    f0bc:	dfc00117 	ldw	ra,4(sp)
    f0c0:	df000017 	ldw	fp,0(sp)
    f0c4:	dec00204 	addi	sp,sp,8
    f0c8:	f800283a 	ret

0000f0cc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    f0cc:	defffa04 	addi	sp,sp,-24
    f0d0:	dfc00515 	stw	ra,20(sp)
    f0d4:	df000415 	stw	fp,16(sp)
    f0d8:	df000404 	addi	fp,sp,16
    f0dc:	e13ffe15 	stw	r4,-8(fp)
    f0e0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    f0e4:	e0bfff17 	ldw	r2,-4(fp)
    f0e8:	10800017 	ldw	r2,0(r2)
    f0ec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    f0f0:	e13ffe17 	ldw	r4,-8(fp)
    f0f4:	00010880 	call	1088 <strlen>
    f0f8:	10800044 	addi	r2,r2,1
    f0fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f100:	00000d06 	br	f138 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    f104:	e0bffc17 	ldw	r2,-16(fp)
    f108:	10c00217 	ldw	r3,8(r2)
    f10c:	e0bffd17 	ldw	r2,-12(fp)
    f110:	1809883a 	mov	r4,r3
    f114:	e17ffe17 	ldw	r5,-8(fp)
    f118:	100d883a 	mov	r6,r2
    f11c:	000ff5c0 	call	ff5c <memcmp>
    f120:	1000021e 	bne	r2,zero,f12c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    f124:	e0bffc17 	ldw	r2,-16(fp)
    f128:	00000706 	br	f148 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    f12c:	e0bffc17 	ldw	r2,-16(fp)
    f130:	10800017 	ldw	r2,0(r2)
    f134:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f138:	e0fffc17 	ldw	r3,-16(fp)
    f13c:	e0bfff17 	ldw	r2,-4(fp)
    f140:	18bff01e 	bne	r3,r2,f104 <__alt_mem_Flash_flash_data+0xf400f104>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    f144:	0005883a 	mov	r2,zero
}
    f148:	e037883a 	mov	sp,fp
    f14c:	dfc00117 	ldw	ra,4(sp)
    f150:	df000017 	ldw	fp,0(sp)
    f154:	dec00204 	addi	sp,sp,8
    f158:	f800283a 	ret

0000f15c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    f15c:	defffe04 	addi	sp,sp,-8
    f160:	dfc00115 	stw	ra,4(sp)
    f164:	df000015 	stw	fp,0(sp)
    f168:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    f16c:	0009883a 	mov	r4,zero
    f170:	01440004 	movi	r5,4096
    f174:	000fde80 	call	fde8 <alt_icache_flush>
#endif
}
    f178:	e037883a 	mov	sp,fp
    f17c:	dfc00117 	ldw	ra,4(sp)
    f180:	df000017 	ldw	fp,0(sp)
    f184:	dec00204 	addi	sp,sp,8
    f188:	f800283a 	ret

0000f18c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    f18c:	defff904 	addi	sp,sp,-28
    f190:	dfc00615 	stw	ra,24(sp)
    f194:	df000515 	stw	fp,20(sp)
    f198:	df000504 	addi	fp,sp,20
    f19c:	e13ffc15 	stw	r4,-16(fp)
    f1a0:	e17ffd15 	stw	r5,-12(fp)
    f1a4:	e1bffe15 	stw	r6,-8(fp)
    f1a8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    f1ac:	e13ffd17 	ldw	r4,-12(fp)
    f1b0:	e17ffe17 	ldw	r5,-8(fp)
    f1b4:	e1bfff17 	ldw	r6,-4(fp)
    f1b8:	000f5900 	call	f590 <open>
    f1bc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    f1c0:	e0bffb17 	ldw	r2,-20(fp)
    f1c4:	10001c16 	blt	r2,zero,f238 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    f1c8:	00800074 	movhi	r2,1
    f1cc:	1083cc04 	addi	r2,r2,3888
    f1d0:	e0fffb17 	ldw	r3,-20(fp)
    f1d4:	18c00324 	muli	r3,r3,12
    f1d8:	10c5883a 	add	r2,r2,r3
    f1dc:	10c00017 	ldw	r3,0(r2)
    f1e0:	e0bffc17 	ldw	r2,-16(fp)
    f1e4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    f1e8:	00800074 	movhi	r2,1
    f1ec:	1083cc04 	addi	r2,r2,3888
    f1f0:	e0fffb17 	ldw	r3,-20(fp)
    f1f4:	18c00324 	muli	r3,r3,12
    f1f8:	18c00104 	addi	r3,r3,4
    f1fc:	10c5883a 	add	r2,r2,r3
    f200:	10c00017 	ldw	r3,0(r2)
    f204:	e0bffc17 	ldw	r2,-16(fp)
    f208:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f20c:	00800074 	movhi	r2,1
    f210:	1083cc04 	addi	r2,r2,3888
    f214:	e0fffb17 	ldw	r3,-20(fp)
    f218:	18c00324 	muli	r3,r3,12
    f21c:	18c00204 	addi	r3,r3,8
    f220:	10c5883a 	add	r2,r2,r3
    f224:	10c00017 	ldw	r3,0(r2)
    f228:	e0bffc17 	ldw	r2,-16(fp)
    f22c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    f230:	e13ffb17 	ldw	r4,-20(fp)
    f234:	00043a80 	call	43a8 <alt_release_fd>
  }
} 
    f238:	e037883a 	mov	sp,fp
    f23c:	dfc00117 	ldw	ra,4(sp)
    f240:	df000017 	ldw	fp,0(sp)
    f244:	dec00204 	addi	sp,sp,8
    f248:	f800283a 	ret

0000f24c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f24c:	defffb04 	addi	sp,sp,-20
    f250:	dfc00415 	stw	ra,16(sp)
    f254:	df000315 	stw	fp,12(sp)
    f258:	df000304 	addi	fp,sp,12
    f25c:	e13ffd15 	stw	r4,-12(fp)
    f260:	e17ffe15 	stw	r5,-8(fp)
    f264:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    f268:	01000074 	movhi	r4,1
    f26c:	2103cf04 	addi	r4,r4,3900
    f270:	e17ffd17 	ldw	r5,-12(fp)
    f274:	01800044 	movi	r6,1
    f278:	01c07fc4 	movi	r7,511
    f27c:	000f18c0 	call	f18c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    f280:	01000074 	movhi	r4,1
    f284:	2103cc04 	addi	r4,r4,3888
    f288:	e17ffe17 	ldw	r5,-8(fp)
    f28c:	000d883a 	mov	r6,zero
    f290:	01c07fc4 	movi	r7,511
    f294:	000f18c0 	call	f18c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    f298:	01000074 	movhi	r4,1
    f29c:	2103d204 	addi	r4,r4,3912
    f2a0:	e17fff17 	ldw	r5,-4(fp)
    f2a4:	01800044 	movi	r6,1
    f2a8:	01c07fc4 	movi	r7,511
    f2ac:	000f18c0 	call	f18c <alt_open_fd>
}  
    f2b0:	e037883a 	mov	sp,fp
    f2b4:	dfc00117 	ldw	ra,4(sp)
    f2b8:	df000017 	ldw	fp,0(sp)
    f2bc:	dec00204 	addi	sp,sp,8
    f2c0:	f800283a 	ret

0000f2c4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    f2c4:	defff004 	addi	sp,sp,-64
    f2c8:	df000f15 	stw	fp,60(sp)
    f2cc:	df000f04 	addi	fp,sp,60
    f2d0:	e13ffd15 	stw	r4,-12(fp)
    f2d4:	e17ffe15 	stw	r5,-8(fp)
    f2d8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    f2dc:	00bffa84 	movi	r2,-22
    f2e0:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    f2e4:	e0bffd17 	ldw	r2,-12(fp)
    f2e8:	10800828 	cmpgeui	r2,r2,32
    f2ec:	10005c1e 	bne	r2,zero,f460 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f2f0:	0005303a 	rdctl	r2,status
    f2f4:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f2f8:	e0fff317 	ldw	r3,-52(fp)
    f2fc:	00bfff84 	movi	r2,-2
    f300:	1884703a 	and	r2,r3,r2
    f304:	1001703a 	wrctl	status,r2
  
  return context;
    f308:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    f30c:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
    f310:	008000b4 	movhi	r2,2
    f314:	1085d604 	addi	r2,r2,5976
    f318:	e0fffd17 	ldw	r3,-12(fp)
    f31c:	180690fa 	slli	r3,r3,3
    f320:	10c5883a 	add	r2,r2,r3
    f324:	e0ffff17 	ldw	r3,-4(fp)
    f328:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    f32c:	008000b4 	movhi	r2,2
    f330:	1085d604 	addi	r2,r2,5976
    f334:	e0fffd17 	ldw	r3,-12(fp)
    f338:	180690fa 	slli	r3,r3,3
    f33c:	18c00104 	addi	r3,r3,4
    f340:	10c5883a 	add	r2,r2,r3
    f344:	e0fffe17 	ldw	r3,-8(fp)
    f348:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    f34c:	e0bfff17 	ldw	r2,-4(fp)
    f350:	10001f26 	beq	r2,zero,f3d0 <alt_irq_register+0x10c>
    f354:	e0bffd17 	ldw	r2,-12(fp)
    f358:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f35c:	0005303a 	rdctl	r2,status
    f360:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f364:	e0fff517 	ldw	r3,-44(fp)
    f368:	00bfff84 	movi	r2,-2
    f36c:	1884703a 	and	r2,r3,r2
    f370:	1001703a 	wrctl	status,r2
  
  return context;
    f374:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    f378:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
    f37c:	e0bff417 	ldw	r2,-48(fp)
    f380:	00c00044 	movi	r3,1
    f384:	1884983a 	sll	r2,r3,r2
    f388:	1007883a 	mov	r3,r2
    f38c:	00800074 	movhi	r2,1
    f390:	10913f04 	addi	r2,r2,17660
    f394:	10800017 	ldw	r2,0(r2)
    f398:	1886b03a 	or	r3,r3,r2
    f39c:	00800074 	movhi	r2,1
    f3a0:	10913f04 	addi	r2,r2,17660
    f3a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f3a8:	00800074 	movhi	r2,1
    f3ac:	10913f04 	addi	r2,r2,17660
    f3b0:	10800017 	ldw	r2,0(r2)
    f3b4:	100170fa 	wrctl	ienable,r2
    f3b8:	e0bff617 	ldw	r2,-40(fp)
    f3bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f3c0:	e0bff717 	ldw	r2,-36(fp)
    f3c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    f3c8:	0005883a 	mov	r2,zero
    f3cc:	00001f06 	br	f44c <alt_irq_register+0x188>
    f3d0:	e0bffd17 	ldw	r2,-12(fp)
    f3d4:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f3d8:	0005303a 	rdctl	r2,status
    f3dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f3e0:	e0fff917 	ldw	r3,-28(fp)
    f3e4:	00bfff84 	movi	r2,-2
    f3e8:	1884703a 	and	r2,r3,r2
    f3ec:	1001703a 	wrctl	status,r2
  
  return context;
    f3f0:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    f3f4:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
    f3f8:	e0bff817 	ldw	r2,-32(fp)
    f3fc:	00c00044 	movi	r3,1
    f400:	1884983a 	sll	r2,r3,r2
    f404:	0084303a 	nor	r2,zero,r2
    f408:	1007883a 	mov	r3,r2
    f40c:	00800074 	movhi	r2,1
    f410:	10913f04 	addi	r2,r2,17660
    f414:	10800017 	ldw	r2,0(r2)
    f418:	1886703a 	and	r3,r3,r2
    f41c:	00800074 	movhi	r2,1
    f420:	10913f04 	addi	r2,r2,17660
    f424:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f428:	00800074 	movhi	r2,1
    f42c:	10913f04 	addi	r2,r2,17660
    f430:	10800017 	ldw	r2,0(r2)
    f434:	100170fa 	wrctl	ienable,r2
    f438:	e0bffa17 	ldw	r2,-24(fp)
    f43c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f440:	e0bffb17 	ldw	r2,-20(fp)
    f444:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    f448:	0005883a 	mov	r2,zero
    f44c:	e0bff115 	stw	r2,-60(fp)
    f450:	e0bff217 	ldw	r2,-56(fp)
    f454:	e0bffc15 	stw	r2,-16(fp)
    f458:	e0bffc17 	ldw	r2,-16(fp)
    f45c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    f460:	e0bff117 	ldw	r2,-60(fp)
}
    f464:	e037883a 	mov	sp,fp
    f468:	df000017 	ldw	fp,0(sp)
    f46c:	dec00104 	addi	sp,sp,4
    f470:	f800283a 	ret

0000f474 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f474:	defffe04 	addi	sp,sp,-8
    f478:	dfc00115 	stw	ra,4(sp)
    f47c:	df000015 	stw	fp,0(sp)
    f480:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f484:	00800074 	movhi	r2,1
    f488:	10893c04 	addi	r2,r2,9456
    f48c:	10800017 	ldw	r2,0(r2)
    f490:	10000526 	beq	r2,zero,f4a8 <alt_get_errno+0x34>
    f494:	00800074 	movhi	r2,1
    f498:	10893c04 	addi	r2,r2,9456
    f49c:	10800017 	ldw	r2,0(r2)
    f4a0:	103ee83a 	callr	r2
    f4a4:	00000206 	br	f4b0 <alt_get_errno+0x3c>
    f4a8:	00800074 	movhi	r2,1
    f4ac:	10912204 	addi	r2,r2,17544
}
    f4b0:	e037883a 	mov	sp,fp
    f4b4:	dfc00117 	ldw	ra,4(sp)
    f4b8:	df000017 	ldw	fp,0(sp)
    f4bc:	dec00204 	addi	sp,sp,8
    f4c0:	f800283a 	ret

0000f4c4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    f4c4:	defffd04 	addi	sp,sp,-12
    f4c8:	df000215 	stw	fp,8(sp)
    f4cc:	df000204 	addi	fp,sp,8
    f4d0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f4d4:	e0bfff17 	ldw	r2,-4(fp)
    f4d8:	10800217 	ldw	r2,8(r2)
    f4dc:	10d00034 	orhi	r3,r2,16384
    f4e0:	e0bfff17 	ldw	r2,-4(fp)
    f4e4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f4e8:	e03ffe15 	stw	zero,-8(fp)
    f4ec:	00001d06 	br	f564 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f4f0:	00800074 	movhi	r2,1
    f4f4:	1083cc04 	addi	r2,r2,3888
    f4f8:	e0fffe17 	ldw	r3,-8(fp)
    f4fc:	18c00324 	muli	r3,r3,12
    f500:	10c5883a 	add	r2,r2,r3
    f504:	10c00017 	ldw	r3,0(r2)
    f508:	e0bfff17 	ldw	r2,-4(fp)
    f50c:	10800017 	ldw	r2,0(r2)
    f510:	1880111e 	bne	r3,r2,f558 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f514:	00800074 	movhi	r2,1
    f518:	1083cc04 	addi	r2,r2,3888
    f51c:	e0fffe17 	ldw	r3,-8(fp)
    f520:	18c00324 	muli	r3,r3,12
    f524:	18c00204 	addi	r3,r3,8
    f528:	10c5883a 	add	r2,r2,r3
    f52c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f530:	1000090e 	bge	r2,zero,f558 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    f534:	e0bffe17 	ldw	r2,-8(fp)
    f538:	10c00324 	muli	r3,r2,12
    f53c:	00800074 	movhi	r2,1
    f540:	1083cc04 	addi	r2,r2,3888
    f544:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f548:	e0bfff17 	ldw	r2,-4(fp)
    f54c:	18800226 	beq	r3,r2,f558 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    f550:	00bffcc4 	movi	r2,-13
    f554:	00000a06 	br	f580 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f558:	e0bffe17 	ldw	r2,-8(fp)
    f55c:	10800044 	addi	r2,r2,1
    f560:	e0bffe15 	stw	r2,-8(fp)
    f564:	00800074 	movhi	r2,1
    f568:	10893b04 	addi	r2,r2,9452
    f56c:	10800017 	ldw	r2,0(r2)
    f570:	1007883a 	mov	r3,r2
    f574:	e0bffe17 	ldw	r2,-8(fp)
    f578:	18bfdd2e 	bgeu	r3,r2,f4f0 <__alt_mem_Flash_flash_data+0xf400f4f0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    f57c:	0005883a 	mov	r2,zero
}
    f580:	e037883a 	mov	sp,fp
    f584:	df000017 	ldw	fp,0(sp)
    f588:	dec00104 	addi	sp,sp,4
    f58c:	f800283a 	ret

0000f590 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f590:	defff604 	addi	sp,sp,-40
    f594:	dfc00915 	stw	ra,36(sp)
    f598:	df000815 	stw	fp,32(sp)
    f59c:	df000804 	addi	fp,sp,32
    f5a0:	e13ffd15 	stw	r4,-12(fp)
    f5a4:	e17ffe15 	stw	r5,-8(fp)
    f5a8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f5ac:	00bfffc4 	movi	r2,-1
    f5b0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    f5b4:	00bffb44 	movi	r2,-19
    f5b8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    f5bc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f5c0:	e13ffd17 	ldw	r4,-12(fp)
    f5c4:	01400074 	movhi	r5,1
    f5c8:	29493904 	addi	r5,r5,9444
    f5cc:	000f0cc0 	call	f0cc <alt_find_dev>
    f5d0:	e0bff815 	stw	r2,-32(fp)
    f5d4:	e0bff817 	ldw	r2,-32(fp)
    f5d8:	1000051e 	bne	r2,zero,f5f0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f5dc:	e13ffd17 	ldw	r4,-12(fp)
    f5e0:	000fbd80 	call	fbd8 <alt_find_file>
    f5e4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    f5e8:	00800044 	movi	r2,1
    f5ec:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f5f0:	e0bff817 	ldw	r2,-32(fp)
    f5f4:	10002926 	beq	r2,zero,f69c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    f5f8:	e13ff817 	ldw	r4,-32(fp)
    f5fc:	000fcec0 	call	fcec <alt_get_fd>
    f600:	e0bff915 	stw	r2,-28(fp)
    f604:	e0bff917 	ldw	r2,-28(fp)
    f608:	1000030e 	bge	r2,zero,f618 <open+0x88>
    {
      status = index;
    f60c:	e0bff917 	ldw	r2,-28(fp)
    f610:	e0bffa15 	stw	r2,-24(fp)
    f614:	00002306 	br	f6a4 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    f618:	e0bff917 	ldw	r2,-28(fp)
    f61c:	10c00324 	muli	r3,r2,12
    f620:	00800074 	movhi	r2,1
    f624:	1083cc04 	addi	r2,r2,3888
    f628:	1885883a 	add	r2,r3,r2
    f62c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f630:	e0fffe17 	ldw	r3,-8(fp)
    f634:	00900034 	movhi	r2,16384
    f638:	10bfffc4 	addi	r2,r2,-1
    f63c:	1886703a 	and	r3,r3,r2
    f640:	e0bffc17 	ldw	r2,-16(fp)
    f644:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    f648:	e0bffb17 	ldw	r2,-20(fp)
    f64c:	1000051e 	bne	r2,zero,f664 <open+0xd4>
    f650:	e13ffc17 	ldw	r4,-16(fp)
    f654:	000f4c40 	call	f4c4 <alt_file_locked>
    f658:	e0bffa15 	stw	r2,-24(fp)
    f65c:	e0bffa17 	ldw	r2,-24(fp)
    f660:	10001016 	blt	r2,zero,f6a4 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f664:	e0bff817 	ldw	r2,-32(fp)
    f668:	10800317 	ldw	r2,12(r2)
    f66c:	10000826 	beq	r2,zero,f690 <open+0x100>
    f670:	e0bff817 	ldw	r2,-32(fp)
    f674:	10800317 	ldw	r2,12(r2)
    f678:	e13ffc17 	ldw	r4,-16(fp)
    f67c:	e17ffd17 	ldw	r5,-12(fp)
    f680:	e1bffe17 	ldw	r6,-8(fp)
    f684:	e1ffff17 	ldw	r7,-4(fp)
    f688:	103ee83a 	callr	r2
    f68c:	00000106 	br	f694 <open+0x104>
    f690:	0005883a 	mov	r2,zero
    f694:	e0bffa15 	stw	r2,-24(fp)
    f698:	00000206 	br	f6a4 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    f69c:	00bffb44 	movi	r2,-19
    f6a0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f6a4:	e0bffa17 	ldw	r2,-24(fp)
    f6a8:	1000090e 	bge	r2,zero,f6d0 <open+0x140>
  {
    alt_release_fd (index);  
    f6ac:	e13ff917 	ldw	r4,-28(fp)
    f6b0:	00043a80 	call	43a8 <alt_release_fd>
    ALT_ERRNO = -status;
    f6b4:	000f4740 	call	f474 <alt_get_errno>
    f6b8:	1007883a 	mov	r3,r2
    f6bc:	e0bffa17 	ldw	r2,-24(fp)
    f6c0:	0085c83a 	sub	r2,zero,r2
    f6c4:	18800015 	stw	r2,0(r3)
    return -1;
    f6c8:	00bfffc4 	movi	r2,-1
    f6cc:	00000106 	br	f6d4 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    f6d0:	e0bff917 	ldw	r2,-28(fp)
}
    f6d4:	e037883a 	mov	sp,fp
    f6d8:	dfc00117 	ldw	ra,4(sp)
    f6dc:	df000017 	ldw	fp,0(sp)
    f6e0:	dec00204 	addi	sp,sp,8
    f6e4:	f800283a 	ret

0000f6e8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    f6e8:	defffa04 	addi	sp,sp,-24
    f6ec:	df000515 	stw	fp,20(sp)
    f6f0:	df000504 	addi	fp,sp,20
    f6f4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f6f8:	0005303a 	rdctl	r2,status
    f6fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f700:	e0fffc17 	ldw	r3,-16(fp)
    f704:	00bfff84 	movi	r2,-2
    f708:	1884703a 	and	r2,r3,r2
    f70c:	1001703a 	wrctl	status,r2
  
  return context;
    f710:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    f714:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    f718:	e0bfff17 	ldw	r2,-4(fp)
    f71c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f720:	e0bffd17 	ldw	r2,-12(fp)
    f724:	10800017 	ldw	r2,0(r2)
    f728:	e0fffd17 	ldw	r3,-12(fp)
    f72c:	18c00117 	ldw	r3,4(r3)
    f730:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    f734:	e0bffd17 	ldw	r2,-12(fp)
    f738:	10800117 	ldw	r2,4(r2)
    f73c:	e0fffd17 	ldw	r3,-12(fp)
    f740:	18c00017 	ldw	r3,0(r3)
    f744:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f748:	e0bffd17 	ldw	r2,-12(fp)
    f74c:	e0fffd17 	ldw	r3,-12(fp)
    f750:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    f754:	e0bffd17 	ldw	r2,-12(fp)
    f758:	e0fffd17 	ldw	r3,-12(fp)
    f75c:	10c00015 	stw	r3,0(r2)
    f760:	e0bffb17 	ldw	r2,-20(fp)
    f764:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f768:	e0bffe17 	ldw	r2,-8(fp)
    f76c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    f770:	e037883a 	mov	sp,fp
    f774:	df000017 	ldw	fp,0(sp)
    f778:	dec00104 	addi	sp,sp,4
    f77c:	f800283a 	ret

0000f780 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f780:	defffb04 	addi	sp,sp,-20
    f784:	dfc00415 	stw	ra,16(sp)
    f788:	df000315 	stw	fp,12(sp)
    f78c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f790:	d0a03617 	ldw	r2,-32552(gp)
    f794:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f798:	d0a81917 	ldw	r2,-24476(gp)
    f79c:	10800044 	addi	r2,r2,1
    f7a0:	d0a81915 	stw	r2,-24476(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f7a4:	00002e06 	br	f860 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    f7a8:	e0bffd17 	ldw	r2,-12(fp)
    f7ac:	10800017 	ldw	r2,0(r2)
    f7b0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f7b4:	e0bffd17 	ldw	r2,-12(fp)
    f7b8:	10800403 	ldbu	r2,16(r2)
    f7bc:	10803fcc 	andi	r2,r2,255
    f7c0:	10000426 	beq	r2,zero,f7d4 <alt_tick+0x54>
    f7c4:	d0a81917 	ldw	r2,-24476(gp)
    f7c8:	1000021e 	bne	r2,zero,f7d4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    f7cc:	e0bffd17 	ldw	r2,-12(fp)
    f7d0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f7d4:	e0bffd17 	ldw	r2,-12(fp)
    f7d8:	10800217 	ldw	r2,8(r2)
    f7dc:	d0e81917 	ldw	r3,-24476(gp)
    f7e0:	18801d36 	bltu	r3,r2,f858 <alt_tick+0xd8>
    f7e4:	e0bffd17 	ldw	r2,-12(fp)
    f7e8:	10800403 	ldbu	r2,16(r2)
    f7ec:	10803fcc 	andi	r2,r2,255
    f7f0:	1000191e 	bne	r2,zero,f858 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    f7f4:	e0bffd17 	ldw	r2,-12(fp)
    f7f8:	10800317 	ldw	r2,12(r2)
    f7fc:	e0fffd17 	ldw	r3,-12(fp)
    f800:	18c00517 	ldw	r3,20(r3)
    f804:	1809883a 	mov	r4,r3
    f808:	103ee83a 	callr	r2
    f80c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f810:	e0bfff17 	ldw	r2,-4(fp)
    f814:	1000031e 	bne	r2,zero,f824 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    f818:	e13ffd17 	ldw	r4,-12(fp)
    f81c:	000f6e80 	call	f6e8 <alt_alarm_stop>
    f820:	00000d06 	br	f858 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    f824:	e0bffd17 	ldw	r2,-12(fp)
    f828:	10c00217 	ldw	r3,8(r2)
    f82c:	e0bfff17 	ldw	r2,-4(fp)
    f830:	1887883a 	add	r3,r3,r2
    f834:	e0bffd17 	ldw	r2,-12(fp)
    f838:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f83c:	e0bffd17 	ldw	r2,-12(fp)
    f840:	10c00217 	ldw	r3,8(r2)
    f844:	d0a81917 	ldw	r2,-24476(gp)
    f848:	1880032e 	bgeu	r3,r2,f858 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    f84c:	e0bffd17 	ldw	r2,-12(fp)
    f850:	00c00044 	movi	r3,1
    f854:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    f858:	e0bffe17 	ldw	r2,-8(fp)
    f85c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f860:	e0fffd17 	ldw	r3,-12(fp)
    f864:	d0a03604 	addi	r2,gp,-32552
    f868:	18bfcf1e 	bne	r3,r2,f7a8 <__alt_mem_Flash_flash_data+0xf400f7a8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    f86c:	00055b40 	call	55b4 <OSTimeTick>
}
    f870:	e037883a 	mov	sp,fp
    f874:	dfc00117 	ldw	ra,4(sp)
    f878:	df000017 	ldw	fp,0(sp)
    f87c:	dec00204 	addi	sp,sp,8
    f880:	f800283a 	ret

0000f884 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    f884:	deffff04 	addi	sp,sp,-4
    f888:	df000015 	stw	fp,0(sp)
    f88c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    f890:	000170fa 	wrctl	ienable,zero
}
    f894:	e037883a 	mov	sp,fp
    f898:	df000017 	ldw	fp,0(sp)
    f89c:	dec00104 	addi	sp,sp,4
    f8a0:	f800283a 	ret

0000f8a4 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
    f8a4:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
    f8a8:	d0e00c17 	ldw	r3,-32720(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
    f8ac:	d1281217 	ldw	r4,-24504(gp)

      stw ra,  0(sp)
    f8b0:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
    f8b4:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
    f8b8:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
    f8bc:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
    f8c0:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
    f8c4:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
    f8c8:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
    f8cc:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
    f8d0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
    f8d4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
    f8d8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
    f8dc:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    f8e0:	000fb100 	call	fb10 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
    f8e4:	d1280d17 	ldw	r4,-24524(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
    f8e8:	d1680507 	ldb	r5,-24556(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
    f8ec:	d1281215 	stw	r4,-24504(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
    f8f0:	d1680545 	stb	r5,-24555(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
    f8f4:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
    f8f8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
    f8fc:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
    f900:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
    f904:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
    f908:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
    f90c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
    f910:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
    f914:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
    f918:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
    f91c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
    f920:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
    f924:	d0e00c15 	stw	r3,-32720(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
    f928:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
    f92c:	f800283a 	ret

0000f930 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
    f930:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
    f934:	047fff84 	movi	r17,-2
      and   r18, r18, r17
    f938:	9464703a 	and	r18,r18,r17
      wrctl status, r18
    f93c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    f940:	000fb100 	call	fb10 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
    f944:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
    f948:	d4a80345 	stb	r18,-24563(gp)

      /*
       * start execution of the new task.
       */

      br 9b
    f94c:	003fe506 	br	f8e4 <__alt_mem_Flash_flash_data+0xf400f8e4>

0000f950 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
    f950:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
    f954:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
    f958:	10800054 	ori	r2,r2,1
      wrctl status, r2
    f95c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
    f960:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
    f964:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
    f968:	dec00204 	addi	sp,sp,8

      callr r2
    f96c:	103ee83a 	callr	r2

      nop
    f970:	0001883a 	nop

0000f974 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
    f974:	defff704 	addi	sp,sp,-36
    f978:	dfc00815 	stw	ra,32(sp)
    f97c:	df000715 	stw	fp,28(sp)
    f980:	df000704 	addi	fp,sp,28
    f984:	e13ffc15 	stw	r4,-16(fp)
    f988:	e17ffd15 	stw	r5,-12(fp)
    f98c:	e1bffe15 	stw	r6,-8(fp)
    f990:	3805883a 	mov	r2,r7
    f994:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
    f998:	e0fffe17 	ldw	r3,-8(fp)
    f99c:	00bfff04 	movi	r2,-4
    f9a0:	1884703a 	and	r2,r3,r2
    f9a4:	10bef704 	addi	r2,r2,-1060
    f9a8:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
    f9ac:	e13ff917 	ldw	r4,-28(fp)
    f9b0:	000b883a 	mov	r5,zero
    f9b4:	01810904 	movi	r6,1060
    f9b8:	000359c0 	call	359c <memset>
    f9bc:	e0bff917 	ldw	r2,-28(fp)
    f9c0:	10c0bb04 	addi	r3,r2,748
    f9c4:	e0bff917 	ldw	r2,-28(fp)
    f9c8:	10c00115 	stw	r3,4(r2)
    f9cc:	e0bff917 	ldw	r2,-28(fp)
    f9d0:	10c0d504 	addi	r3,r2,852
    f9d4:	e0bff917 	ldw	r2,-28(fp)
    f9d8:	10c00215 	stw	r3,8(r2)
    f9dc:	e0bff917 	ldw	r2,-28(fp)
    f9e0:	10c0ef04 	addi	r3,r2,956
    f9e4:	e0bff917 	ldw	r2,-28(fp)
    f9e8:	10c00315 	stw	r3,12(r2)
    f9ec:	e0fff917 	ldw	r3,-28(fp)
    f9f0:	00800074 	movhi	r2,1
    f9f4:	1081b604 	addi	r2,r2,1752
    f9f8:	18800d15 	stw	r2,52(r3)
    f9fc:	e0bff917 	ldw	r2,-28(fp)
    fa00:	00c00044 	movi	r3,1
    fa04:	10c02915 	stw	r3,164(r2)
    fa08:	10002a15 	stw	zero,168(r2)
    fa0c:	e0bff917 	ldw	r2,-28(fp)
    fa10:	00ccc384 	movi	r3,13070
    fa14:	10c02b0d 	sth	r3,172(r2)
    fa18:	e0bff917 	ldw	r2,-28(fp)
    fa1c:	00eaf344 	movi	r3,-21555
    fa20:	10c02b8d 	sth	r3,174(r2)
    fa24:	e0bff917 	ldw	r2,-28(fp)
    fa28:	00c48d04 	movi	r3,4660
    fa2c:	10c02c0d 	sth	r3,176(r2)
    fa30:	e0bff917 	ldw	r2,-28(fp)
    fa34:	00f99b44 	movi	r3,-6547
    fa38:	10c02c8d 	sth	r3,178(r2)
    fa3c:	e0bff917 	ldw	r2,-28(fp)
    fa40:	00f7bb04 	movi	r3,-8468
    fa44:	10c02d0d 	sth	r3,180(r2)
    fa48:	e0bff917 	ldw	r2,-28(fp)
    fa4c:	00c00144 	movi	r3,5
    fa50:	10c02d8d 	sth	r3,182(r2)
    fa54:	e0bff917 	ldw	r2,-28(fp)
    fa58:	00c002c4 	movi	r3,11
    fa5c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
    fa60:	e0bff917 	ldw	r2,-28(fp)
    fa64:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
    fa68:	e0bffa17 	ldw	r2,-24(fp)
    fa6c:	10bff304 	addi	r2,r2,-52
    fa70:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
    fa74:	e0bffb17 	ldw	r2,-20(fp)
    fa78:	10800c04 	addi	r2,r2,48
    fa7c:	e0fffc17 	ldw	r3,-16(fp)
    fa80:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
    fa84:	e0bffb17 	ldw	r2,-20(fp)
    fa88:	10800b04 	addi	r2,r2,44
    fa8c:	e0fffd17 	ldw	r3,-12(fp)
    fa90:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
    fa94:	e0bffb17 	ldw	r2,-20(fp)
    fa98:	10800a04 	addi	r2,r2,40
    fa9c:	e0fff917 	ldw	r3,-28(fp)
    faa0:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
    faa4:	00800074 	movhi	r2,1
    faa8:	10be5404 	addi	r2,r2,-1712
    faac:	10c00104 	addi	r3,r2,4
    fab0:	e0bffb17 	ldw	r2,-20(fp)
    fab4:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
    fab8:	e0bffb17 	ldw	r2,-20(fp)
}
    fabc:	e037883a 	mov	sp,fp
    fac0:	dfc00117 	ldw	ra,4(sp)
    fac4:	df000017 	ldw	fp,0(sp)
    fac8:	dec00204 	addi	sp,sp,8
    facc:	f800283a 	ret

0000fad0 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    fad0:	defffe04 	addi	sp,sp,-8
    fad4:	df000115 	stw	fp,4(sp)
    fad8:	df000104 	addi	fp,sp,4
    fadc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
    fae0:	e037883a 	mov	sp,fp
    fae4:	df000017 	ldw	fp,0(sp)
    fae8:	dec00104 	addi	sp,sp,4
    faec:	f800283a 	ret

0000faf0 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    faf0:	defffe04 	addi	sp,sp,-8
    faf4:	df000115 	stw	fp,4(sp)
    faf8:	df000104 	addi	fp,sp,4
    fafc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    fb00:	e037883a 	mov	sp,fp
    fb04:	df000017 	ldw	fp,0(sp)
    fb08:	dec00104 	addi	sp,sp,4
    fb0c:	f800283a 	ret

0000fb10 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
    fb10:	deffff04 	addi	sp,sp,-4
    fb14:	df000015 	stw	fp,0(sp)
    fb18:	d839883a 	mov	fp,sp
}
    fb1c:	e037883a 	mov	sp,fp
    fb20:	df000017 	ldw	fp,0(sp)
    fb24:	dec00104 	addi	sp,sp,4
    fb28:	f800283a 	ret

0000fb2c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
    fb2c:	deffff04 	addi	sp,sp,-4
    fb30:	df000015 	stw	fp,0(sp)
    fb34:	d839883a 	mov	fp,sp
}
    fb38:	e037883a 	mov	sp,fp
    fb3c:	df000017 	ldw	fp,0(sp)
    fb40:	dec00104 	addi	sp,sp,4
    fb44:	f800283a 	ret

0000fb48 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
    fb48:	deffff04 	addi	sp,sp,-4
    fb4c:	df000015 	stw	fp,0(sp)
    fb50:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
    fb54:	e037883a 	mov	sp,fp
    fb58:	df000017 	ldw	fp,0(sp)
    fb5c:	dec00104 	addi	sp,sp,4
    fb60:	f800283a 	ret

0000fb64 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
    fb64:	deffff04 	addi	sp,sp,-4
    fb68:	df000015 	stw	fp,0(sp)
    fb6c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
    fb70:	e037883a 	mov	sp,fp
    fb74:	df000017 	ldw	fp,0(sp)
    fb78:	dec00104 	addi	sp,sp,4
    fb7c:	f800283a 	ret

0000fb80 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
    fb80:	deffff04 	addi	sp,sp,-4
    fb84:	df000015 	stw	fp,0(sp)
    fb88:	d839883a 	mov	fp,sp
}
    fb8c:	e037883a 	mov	sp,fp
    fb90:	df000017 	ldw	fp,0(sp)
    fb94:	dec00104 	addi	sp,sp,4
    fb98:	f800283a 	ret

0000fb9c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
    fb9c:	deffff04 	addi	sp,sp,-4
    fba0:	df000015 	stw	fp,0(sp)
    fba4:	d839883a 	mov	fp,sp
}
    fba8:	e037883a 	mov	sp,fp
    fbac:	df000017 	ldw	fp,0(sp)
    fbb0:	dec00104 	addi	sp,sp,4
    fbb4:	f800283a 	ret

0000fbb8 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
    fbb8:	defffe04 	addi	sp,sp,-8
    fbbc:	df000115 	stw	fp,4(sp)
    fbc0:	df000104 	addi	fp,sp,4
    fbc4:	e13fff15 	stw	r4,-4(fp)
}
    fbc8:	e037883a 	mov	sp,fp
    fbcc:	df000017 	ldw	fp,0(sp)
    fbd0:	dec00104 	addi	sp,sp,4
    fbd4:	f800283a 	ret

0000fbd8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    fbd8:	defffb04 	addi	sp,sp,-20
    fbdc:	dfc00415 	stw	ra,16(sp)
    fbe0:	df000315 	stw	fp,12(sp)
    fbe4:	df000304 	addi	fp,sp,12
    fbe8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    fbec:	00800074 	movhi	r2,1
    fbf0:	10893704 	addi	r2,r2,9436
    fbf4:	10800017 	ldw	r2,0(r2)
    fbf8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    fbfc:	00003106 	br	fcc4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    fc00:	e0bffd17 	ldw	r2,-12(fp)
    fc04:	10800217 	ldw	r2,8(r2)
    fc08:	1009883a 	mov	r4,r2
    fc0c:	00010880 	call	1088 <strlen>
    fc10:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    fc14:	e0bffd17 	ldw	r2,-12(fp)
    fc18:	10c00217 	ldw	r3,8(r2)
    fc1c:	e0bffe17 	ldw	r2,-8(fp)
    fc20:	10bfffc4 	addi	r2,r2,-1
    fc24:	1885883a 	add	r2,r3,r2
    fc28:	10800003 	ldbu	r2,0(r2)
    fc2c:	10803fcc 	andi	r2,r2,255
    fc30:	1080201c 	xori	r2,r2,128
    fc34:	10bfe004 	addi	r2,r2,-128
    fc38:	10800bd8 	cmpnei	r2,r2,47
    fc3c:	1000031e 	bne	r2,zero,fc4c <alt_find_file+0x74>
    {
      len -= 1;
    fc40:	e0bffe17 	ldw	r2,-8(fp)
    fc44:	10bfffc4 	addi	r2,r2,-1
    fc48:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    fc4c:	e0bffe17 	ldw	r2,-8(fp)
    fc50:	e0ffff17 	ldw	r3,-4(fp)
    fc54:	1885883a 	add	r2,r3,r2
    fc58:	10800003 	ldbu	r2,0(r2)
    fc5c:	10803fcc 	andi	r2,r2,255
    fc60:	1080201c 	xori	r2,r2,128
    fc64:	10bfe004 	addi	r2,r2,-128
    fc68:	10800be0 	cmpeqi	r2,r2,47
    fc6c:	1000081e 	bne	r2,zero,fc90 <alt_find_file+0xb8>
    fc70:	e0bffe17 	ldw	r2,-8(fp)
    fc74:	e0ffff17 	ldw	r3,-4(fp)
    fc78:	1885883a 	add	r2,r3,r2
    fc7c:	10800003 	ldbu	r2,0(r2)
    fc80:	10803fcc 	andi	r2,r2,255
    fc84:	1080201c 	xori	r2,r2,128
    fc88:	10bfe004 	addi	r2,r2,-128
    fc8c:	10000a1e 	bne	r2,zero,fcb8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    fc90:	e0bffd17 	ldw	r2,-12(fp)
    fc94:	10c00217 	ldw	r3,8(r2)
    fc98:	e0bffe17 	ldw	r2,-8(fp)
    fc9c:	1809883a 	mov	r4,r3
    fca0:	e17fff17 	ldw	r5,-4(fp)
    fca4:	100d883a 	mov	r6,r2
    fca8:	000ff5c0 	call	ff5c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    fcac:	1000021e 	bne	r2,zero,fcb8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    fcb0:	e0bffd17 	ldw	r2,-12(fp)
    fcb4:	00000806 	br	fcd8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    fcb8:	e0bffd17 	ldw	r2,-12(fp)
    fcbc:	10800017 	ldw	r2,0(r2)
    fcc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    fcc4:	e0fffd17 	ldw	r3,-12(fp)
    fcc8:	00800074 	movhi	r2,1
    fccc:	10893704 	addi	r2,r2,9436
    fcd0:	18bfcb1e 	bne	r3,r2,fc00 <__alt_mem_Flash_flash_data+0xf400fc00>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    fcd4:	0005883a 	mov	r2,zero
}
    fcd8:	e037883a 	mov	sp,fp
    fcdc:	dfc00117 	ldw	ra,4(sp)
    fce0:	df000017 	ldw	fp,0(sp)
    fce4:	dec00204 	addi	sp,sp,8
    fce8:	f800283a 	ret

0000fcec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    fcec:	defff904 	addi	sp,sp,-28
    fcf0:	dfc00615 	stw	ra,24(sp)
    fcf4:	df000515 	stw	fp,20(sp)
    fcf8:	df000504 	addi	fp,sp,20
    fcfc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    fd00:	00bffa04 	movi	r2,-24
    fd04:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
    fd08:	00800074 	movhi	r2,1
    fd0c:	10912304 	addi	r2,r2,17548
    fd10:	10800017 	ldw	r2,0(r2)
    fd14:	e0bffd15 	stw	r2,-12(fp)
    fd18:	e03ffe0d 	sth	zero,-8(fp)
    fd1c:	e0fffe0b 	ldhu	r3,-8(fp)
    fd20:	e0bffe84 	addi	r2,fp,-6
    fd24:	e13ffd17 	ldw	r4,-12(fp)
    fd28:	180b883a 	mov	r5,r3
    fd2c:	100d883a 	mov	r6,r2
    fd30:	000a0500 	call	a050 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    fd34:	e03ffb15 	stw	zero,-20(fp)
    fd38:	00001d06 	br	fdb0 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
    fd3c:	00800074 	movhi	r2,1
    fd40:	1083cc04 	addi	r2,r2,3888
    fd44:	e0fffb17 	ldw	r3,-20(fp)
    fd48:	18c00324 	muli	r3,r3,12
    fd4c:	10c5883a 	add	r2,r2,r3
    fd50:	10800017 	ldw	r2,0(r2)
    fd54:	1000131e 	bne	r2,zero,fda4 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
    fd58:	00800074 	movhi	r2,1
    fd5c:	1083cc04 	addi	r2,r2,3888
    fd60:	e0fffb17 	ldw	r3,-20(fp)
    fd64:	18c00324 	muli	r3,r3,12
    fd68:	10c5883a 	add	r2,r2,r3
    fd6c:	e0ffff17 	ldw	r3,-4(fp)
    fd70:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    fd74:	00800074 	movhi	r2,1
    fd78:	10893b04 	addi	r2,r2,9452
    fd7c:	10c00017 	ldw	r3,0(r2)
    fd80:	e0bffb17 	ldw	r2,-20(fp)
    fd84:	1880040e 	bge	r3,r2,fd98 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
    fd88:	00800074 	movhi	r2,1
    fd8c:	10893b04 	addi	r2,r2,9452
    fd90:	e0fffb17 	ldw	r3,-20(fp)
    fd94:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    fd98:	e0bffb17 	ldw	r2,-20(fp)
    fd9c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
    fda0:	00000606 	br	fdbc <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    fda4:	e0bffb17 	ldw	r2,-20(fp)
    fda8:	10800044 	addi	r2,r2,1
    fdac:	e0bffb15 	stw	r2,-20(fp)
    fdb0:	e0bffb17 	ldw	r2,-20(fp)
    fdb4:	10800810 	cmplti	r2,r2,32
    fdb8:	103fe01e 	bne	r2,zero,fd3c <__alt_mem_Flash_flash_data+0xf400fd3c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
    fdbc:	00800074 	movhi	r2,1
    fdc0:	10912304 	addi	r2,r2,17548
    fdc4:	10800017 	ldw	r2,0(r2)
    fdc8:	1009883a 	mov	r4,r2
    fdcc:	000a4240 	call	a424 <OSSemPost>

  return rc;
    fdd0:	e0bffc17 	ldw	r2,-16(fp)
}
    fdd4:	e037883a 	mov	sp,fp
    fdd8:	dfc00117 	ldw	ra,4(sp)
    fddc:	df000017 	ldw	fp,0(sp)
    fde0:	dec00204 	addi	sp,sp,8
    fde4:	f800283a 	ret

0000fde8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    fde8:	defffb04 	addi	sp,sp,-20
    fdec:	df000415 	stw	fp,16(sp)
    fdf0:	df000404 	addi	fp,sp,16
    fdf4:	e13ffe15 	stw	r4,-8(fp)
    fdf8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    fdfc:	e0bfff17 	ldw	r2,-4(fp)
    fe00:	10840070 	cmpltui	r2,r2,4097
    fe04:	1000021e 	bne	r2,zero,fe10 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    fe08:	00840004 	movi	r2,4096
    fe0c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    fe10:	e0fffe17 	ldw	r3,-8(fp)
    fe14:	e0bfff17 	ldw	r2,-4(fp)
    fe18:	1885883a 	add	r2,r3,r2
    fe1c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fe20:	e0bffe17 	ldw	r2,-8(fp)
    fe24:	e0bffc15 	stw	r2,-16(fp)
    fe28:	00000506 	br	fe40 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    fe2c:	e0bffc17 	ldw	r2,-16(fp)
    fe30:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fe34:	e0bffc17 	ldw	r2,-16(fp)
    fe38:	10800804 	addi	r2,r2,32
    fe3c:	e0bffc15 	stw	r2,-16(fp)
    fe40:	e0fffc17 	ldw	r3,-16(fp)
    fe44:	e0bffd17 	ldw	r2,-12(fp)
    fe48:	18bff836 	bltu	r3,r2,fe2c <__alt_mem_Flash_flash_data+0xf400fe2c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    fe4c:	e0bffe17 	ldw	r2,-8(fp)
    fe50:	108007cc 	andi	r2,r2,31
    fe54:	10000226 	beq	r2,zero,fe60 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    fe58:	e0bffc17 	ldw	r2,-16(fp)
    fe5c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    fe60:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    fe64:	e037883a 	mov	sp,fp
    fe68:	df000017 	ldw	fp,0(sp)
    fe6c:	dec00104 	addi	sp,sp,4
    fe70:	f800283a 	ret

0000fe74 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    fe74:	defffe04 	addi	sp,sp,-8
    fe78:	df000115 	stw	fp,4(sp)
    fe7c:	df000104 	addi	fp,sp,4
    fe80:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    fe84:	e0bfff17 	ldw	r2,-4(fp)
    fe88:	10bffe84 	addi	r2,r2,-6
    fe8c:	10c00428 	cmpgeui	r3,r2,16
    fe90:	18001a1e 	bne	r3,zero,fefc <alt_exception_cause_generated_bad_addr+0x88>
    fe94:	100690ba 	slli	r3,r2,2
    fe98:	00800074 	movhi	r2,1
    fe9c:	10bfab04 	addi	r2,r2,-340
    fea0:	1885883a 	add	r2,r3,r2
    fea4:	10800017 	ldw	r2,0(r2)
    fea8:	1000683a 	jmp	r2
    feac:	0000feec 	andhi	zero,zero,1019
    feb0:	0000feec 	andhi	zero,zero,1019
    feb4:	0000fefc 	xorhi	zero,zero,1019
    feb8:	0000fefc 	xorhi	zero,zero,1019
    febc:	0000fefc 	xorhi	zero,zero,1019
    fec0:	0000feec 	andhi	zero,zero,1019
    fec4:	0000fef4 	movhi	zero,1019
    fec8:	0000fefc 	xorhi	zero,zero,1019
    fecc:	0000feec 	andhi	zero,zero,1019
    fed0:	0000feec 	andhi	zero,zero,1019
    fed4:	0000fefc 	xorhi	zero,zero,1019
    fed8:	0000feec 	andhi	zero,zero,1019
    fedc:	0000fef4 	movhi	zero,1019
    fee0:	0000fefc 	xorhi	zero,zero,1019
    fee4:	0000fefc 	xorhi	zero,zero,1019
    fee8:	0000feec 	andhi	zero,zero,1019
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    feec:	00800044 	movi	r2,1
    fef0:	00000306 	br	ff00 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    fef4:	0005883a 	mov	r2,zero
    fef8:	00000106 	br	ff00 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    fefc:	0005883a 	mov	r2,zero
  }
}
    ff00:	e037883a 	mov	sp,fp
    ff04:	df000017 	ldw	fp,0(sp)
    ff08:	dec00104 	addi	sp,sp,4
    ff0c:	f800283a 	ret

0000ff10 <atexit>:
    ff10:	200b883a 	mov	r5,r4
    ff14:	000d883a 	mov	r6,zero
    ff18:	0009883a 	mov	r4,zero
    ff1c:	000f883a 	mov	r7,zero
    ff20:	001007c1 	jmpi	1007c <__register_exitproc>

0000ff24 <exit>:
    ff24:	defffe04 	addi	sp,sp,-8
    ff28:	000b883a 	mov	r5,zero
    ff2c:	dc000015 	stw	r16,0(sp)
    ff30:	dfc00115 	stw	ra,4(sp)
    ff34:	2021883a 	mov	r16,r4
    ff38:	00101900 	call	10190 <__call_exitprocs>
    ff3c:	00800074 	movhi	r2,1
    ff40:	10893304 	addi	r2,r2,9420
    ff44:	11000017 	ldw	r4,0(r2)
    ff48:	20800f17 	ldw	r2,60(r4)
    ff4c:	10000126 	beq	r2,zero,ff54 <exit+0x30>
    ff50:	103ee83a 	callr	r2
    ff54:	8009883a 	mov	r4,r16
    ff58:	00103240 	call	10324 <_exit>

0000ff5c <memcmp>:
    ff5c:	01c000c4 	movi	r7,3
    ff60:	3980192e 	bgeu	r7,r6,ffc8 <memcmp+0x6c>
    ff64:	2144b03a 	or	r2,r4,r5
    ff68:	11c4703a 	and	r2,r2,r7
    ff6c:	10000f26 	beq	r2,zero,ffac <memcmp+0x50>
    ff70:	20800003 	ldbu	r2,0(r4)
    ff74:	28c00003 	ldbu	r3,0(r5)
    ff78:	10c0151e 	bne	r2,r3,ffd0 <memcmp+0x74>
    ff7c:	31bfff84 	addi	r6,r6,-2
    ff80:	01ffffc4 	movi	r7,-1
    ff84:	00000406 	br	ff98 <memcmp+0x3c>
    ff88:	20800003 	ldbu	r2,0(r4)
    ff8c:	28c00003 	ldbu	r3,0(r5)
    ff90:	31bfffc4 	addi	r6,r6,-1
    ff94:	10c00e1e 	bne	r2,r3,ffd0 <memcmp+0x74>
    ff98:	21000044 	addi	r4,r4,1
    ff9c:	29400044 	addi	r5,r5,1
    ffa0:	31fff91e 	bne	r6,r7,ff88 <__alt_mem_Flash_flash_data+0xf400ff88>
    ffa4:	0005883a 	mov	r2,zero
    ffa8:	f800283a 	ret
    ffac:	20c00017 	ldw	r3,0(r4)
    ffb0:	28800017 	ldw	r2,0(r5)
    ffb4:	1880041e 	bne	r3,r2,ffc8 <memcmp+0x6c>
    ffb8:	31bfff04 	addi	r6,r6,-4
    ffbc:	21000104 	addi	r4,r4,4
    ffc0:	29400104 	addi	r5,r5,4
    ffc4:	39bff936 	bltu	r7,r6,ffac <__alt_mem_Flash_flash_data+0xf400ffac>
    ffc8:	303fe91e 	bne	r6,zero,ff70 <__alt_mem_Flash_flash_data+0xf400ff70>
    ffcc:	003ff506 	br	ffa4 <__alt_mem_Flash_flash_data+0xf400ffa4>
    ffd0:	10c5c83a 	sub	r2,r2,r3
    ffd4:	f800283a 	ret

0000ffd8 <strcmp>:
    ffd8:	2144b03a 	or	r2,r4,r5
    ffdc:	108000cc 	andi	r2,r2,3
    ffe0:	1000171e 	bne	r2,zero,10040 <strcmp+0x68>
    ffe4:	20800017 	ldw	r2,0(r4)
    ffe8:	28c00017 	ldw	r3,0(r5)
    ffec:	10c0141e 	bne	r2,r3,10040 <strcmp+0x68>
    fff0:	027fbff4 	movhi	r9,65279
    fff4:	4a7fbfc4 	addi	r9,r9,-257
    fff8:	0086303a 	nor	r3,zero,r2
    fffc:	02202074 	movhi	r8,32897
   10000:	1245883a 	add	r2,r2,r9
   10004:	42202004 	addi	r8,r8,-32640
   10008:	10c4703a 	and	r2,r2,r3
   1000c:	1204703a 	and	r2,r2,r8
   10010:	10000226 	beq	r2,zero,1001c <strcmp+0x44>
   10014:	00001706 	br	10074 <strcmp+0x9c>
   10018:	1000161e 	bne	r2,zero,10074 <strcmp+0x9c>
   1001c:	21000104 	addi	r4,r4,4
   10020:	20c00017 	ldw	r3,0(r4)
   10024:	29400104 	addi	r5,r5,4
   10028:	29800017 	ldw	r6,0(r5)
   1002c:	1a4f883a 	add	r7,r3,r9
   10030:	00c4303a 	nor	r2,zero,r3
   10034:	3884703a 	and	r2,r7,r2
   10038:	1204703a 	and	r2,r2,r8
   1003c:	19bff626 	beq	r3,r6,10018 <__alt_mem_Flash_flash_data+0xf4010018>
   10040:	20800007 	ldb	r2,0(r4)
   10044:	1000051e 	bne	r2,zero,1005c <strcmp+0x84>
   10048:	00000606 	br	10064 <strcmp+0x8c>
   1004c:	21000044 	addi	r4,r4,1
   10050:	20800007 	ldb	r2,0(r4)
   10054:	29400044 	addi	r5,r5,1
   10058:	10000226 	beq	r2,zero,10064 <strcmp+0x8c>
   1005c:	28c00007 	ldb	r3,0(r5)
   10060:	10fffa26 	beq	r2,r3,1004c <__alt_mem_Flash_flash_data+0xf401004c>
   10064:	20800003 	ldbu	r2,0(r4)
   10068:	28c00003 	ldbu	r3,0(r5)
   1006c:	10c5c83a 	sub	r2,r2,r3
   10070:	f800283a 	ret
   10074:	0005883a 	mov	r2,zero
   10078:	f800283a 	ret

0001007c <__register_exitproc>:
   1007c:	00800074 	movhi	r2,1
   10080:	defffa04 	addi	sp,sp,-24
   10084:	10893304 	addi	r2,r2,9420
   10088:	dc000315 	stw	r16,12(sp)
   1008c:	14000017 	ldw	r16,0(r2)
   10090:	dc400415 	stw	r17,16(sp)
   10094:	dfc00515 	stw	ra,20(sp)
   10098:	80805217 	ldw	r2,328(r16)
   1009c:	2023883a 	mov	r17,r4
   100a0:	10003626 	beq	r2,zero,1017c <__register_exitproc+0x100>
   100a4:	10c00117 	ldw	r3,4(r2)
   100a8:	010007c4 	movi	r4,31
   100ac:	20c00e16 	blt	r4,r3,100e8 <__register_exitproc+0x6c>
   100b0:	1a400044 	addi	r9,r3,1
   100b4:	8800211e 	bne	r17,zero,1013c <__register_exitproc+0xc0>
   100b8:	18c00084 	addi	r3,r3,2
   100bc:	18c7883a 	add	r3,r3,r3
   100c0:	18c7883a 	add	r3,r3,r3
   100c4:	12400115 	stw	r9,4(r2)
   100c8:	10c7883a 	add	r3,r2,r3
   100cc:	19400015 	stw	r5,0(r3)
   100d0:	0005883a 	mov	r2,zero
   100d4:	dfc00517 	ldw	ra,20(sp)
   100d8:	dc400417 	ldw	r17,16(sp)
   100dc:	dc000317 	ldw	r16,12(sp)
   100e0:	dec00604 	addi	sp,sp,24
   100e4:	f800283a 	ret
   100e8:	00800034 	movhi	r2,0
   100ec:	10800004 	addi	r2,r2,0
   100f0:	10002526 	beq	r2,zero,10188 <__register_exitproc+0x10c>
   100f4:	01006404 	movi	r4,400
   100f8:	d9400015 	stw	r5,0(sp)
   100fc:	d9800115 	stw	r6,4(sp)
   10100:	d9c00215 	stw	r7,8(sp)
   10104:	00000000 	call	0 <__alt_mem_SDRAM>
   10108:	d9400017 	ldw	r5,0(sp)
   1010c:	d9800117 	ldw	r6,4(sp)
   10110:	d9c00217 	ldw	r7,8(sp)
   10114:	10001c26 	beq	r2,zero,10188 <__register_exitproc+0x10c>
   10118:	80c05217 	ldw	r3,328(r16)
   1011c:	10000115 	stw	zero,4(r2)
   10120:	02400044 	movi	r9,1
   10124:	10c00015 	stw	r3,0(r2)
   10128:	80805215 	stw	r2,328(r16)
   1012c:	10006215 	stw	zero,392(r2)
   10130:	10006315 	stw	zero,396(r2)
   10134:	0007883a 	mov	r3,zero
   10138:	883fdf26 	beq	r17,zero,100b8 <__alt_mem_Flash_flash_data+0xf40100b8>
   1013c:	18d1883a 	add	r8,r3,r3
   10140:	4211883a 	add	r8,r8,r8
   10144:	1211883a 	add	r8,r2,r8
   10148:	41802215 	stw	r6,136(r8)
   1014c:	01000044 	movi	r4,1
   10150:	11806217 	ldw	r6,392(r2)
   10154:	20c8983a 	sll	r4,r4,r3
   10158:	310cb03a 	or	r6,r6,r4
   1015c:	11806215 	stw	r6,392(r2)
   10160:	41c04215 	stw	r7,264(r8)
   10164:	01800084 	movi	r6,2
   10168:	89bfd31e 	bne	r17,r6,100b8 <__alt_mem_Flash_flash_data+0xf40100b8>
   1016c:	11806317 	ldw	r6,396(r2)
   10170:	3108b03a 	or	r4,r6,r4
   10174:	11006315 	stw	r4,396(r2)
   10178:	003fcf06 	br	100b8 <__alt_mem_Flash_flash_data+0xf40100b8>
   1017c:	80805304 	addi	r2,r16,332
   10180:	80805215 	stw	r2,328(r16)
   10184:	003fc706 	br	100a4 <__alt_mem_Flash_flash_data+0xf40100a4>
   10188:	00bfffc4 	movi	r2,-1
   1018c:	003fd106 	br	100d4 <__alt_mem_Flash_flash_data+0xf40100d4>

00010190 <__call_exitprocs>:
   10190:	00800074 	movhi	r2,1
   10194:	10893304 	addi	r2,r2,9420
   10198:	10800017 	ldw	r2,0(r2)
   1019c:	defff404 	addi	sp,sp,-48
   101a0:	dd800815 	stw	r22,32(sp)
   101a4:	d8800015 	stw	r2,0(sp)
   101a8:	10805204 	addi	r2,r2,328
   101ac:	dd000615 	stw	r20,24(sp)
   101b0:	dc800415 	stw	r18,16(sp)
   101b4:	dfc00b15 	stw	ra,44(sp)
   101b8:	df000a15 	stw	fp,40(sp)
   101bc:	ddc00915 	stw	r23,36(sp)
   101c0:	dd400715 	stw	r21,28(sp)
   101c4:	dcc00515 	stw	r19,20(sp)
   101c8:	dc400315 	stw	r17,12(sp)
   101cc:	dc000215 	stw	r16,8(sp)
   101d0:	2025883a 	mov	r18,r4
   101d4:	2829883a 	mov	r20,r5
   101d8:	d8800115 	stw	r2,4(sp)
   101dc:	05bfffc4 	movi	r22,-1
   101e0:	d8800017 	ldw	r2,0(sp)
   101e4:	14c05217 	ldw	r19,328(r2)
   101e8:	98001d26 	beq	r19,zero,10260 <__call_exitprocs+0xd0>
   101ec:	dd400117 	ldw	r21,4(sp)
   101f0:	98800117 	ldw	r2,4(r19)
   101f4:	173fffc4 	addi	fp,r2,-1
   101f8:	e0000d16 	blt	fp,zero,10230 <__call_exitprocs+0xa0>
   101fc:	14000044 	addi	r16,r2,1
   10200:	8421883a 	add	r16,r16,r16
   10204:	8421883a 	add	r16,r16,r16
   10208:	84402004 	addi	r17,r16,128
   1020c:	9c63883a 	add	r17,r19,r17
   10210:	9c21883a 	add	r16,r19,r16
   10214:	a0001e26 	beq	r20,zero,10290 <__call_exitprocs+0x100>
   10218:	80804017 	ldw	r2,256(r16)
   1021c:	15001c26 	beq	r2,r20,10290 <__call_exitprocs+0x100>
   10220:	e73fffc4 	addi	fp,fp,-1
   10224:	843fff04 	addi	r16,r16,-4
   10228:	8c7fff04 	addi	r17,r17,-4
   1022c:	e5bff91e 	bne	fp,r22,10214 <__alt_mem_Flash_flash_data+0xf4010214>
   10230:	00800034 	movhi	r2,0
   10234:	10800004 	addi	r2,r2,0
   10238:	10000926 	beq	r2,zero,10260 <__call_exitprocs+0xd0>
   1023c:	98800117 	ldw	r2,4(r19)
   10240:	1000311e 	bne	r2,zero,10308 <__call_exitprocs+0x178>
   10244:	98800017 	ldw	r2,0(r19)
   10248:	10003426 	beq	r2,zero,1031c <__call_exitprocs+0x18c>
   1024c:	9809883a 	mov	r4,r19
   10250:	a8800015 	stw	r2,0(r21)
   10254:	00000000 	call	0 <__alt_mem_SDRAM>
   10258:	acc00017 	ldw	r19,0(r21)
   1025c:	983fe41e 	bne	r19,zero,101f0 <__alt_mem_Flash_flash_data+0xf40101f0>
   10260:	dfc00b17 	ldw	ra,44(sp)
   10264:	df000a17 	ldw	fp,40(sp)
   10268:	ddc00917 	ldw	r23,36(sp)
   1026c:	dd800817 	ldw	r22,32(sp)
   10270:	dd400717 	ldw	r21,28(sp)
   10274:	dd000617 	ldw	r20,24(sp)
   10278:	dcc00517 	ldw	r19,20(sp)
   1027c:	dc800417 	ldw	r18,16(sp)
   10280:	dc400317 	ldw	r17,12(sp)
   10284:	dc000217 	ldw	r16,8(sp)
   10288:	dec00c04 	addi	sp,sp,48
   1028c:	f800283a 	ret
   10290:	98800117 	ldw	r2,4(r19)
   10294:	80c00017 	ldw	r3,0(r16)
   10298:	10bfffc4 	addi	r2,r2,-1
   1029c:	17001526 	beq	r2,fp,102f4 <__call_exitprocs+0x164>
   102a0:	80000015 	stw	zero,0(r16)
   102a4:	183fde26 	beq	r3,zero,10220 <__alt_mem_Flash_flash_data+0xf4010220>
   102a8:	00800044 	movi	r2,1
   102ac:	1708983a 	sll	r4,r2,fp
   102b0:	98806217 	ldw	r2,392(r19)
   102b4:	9dc00117 	ldw	r23,4(r19)
   102b8:	2084703a 	and	r2,r4,r2
   102bc:	1000061e 	bne	r2,zero,102d8 <__call_exitprocs+0x148>
   102c0:	183ee83a 	callr	r3
   102c4:	98800117 	ldw	r2,4(r19)
   102c8:	15ffc51e 	bne	r2,r23,101e0 <__alt_mem_Flash_flash_data+0xf40101e0>
   102cc:	a8800017 	ldw	r2,0(r21)
   102d0:	14ffd326 	beq	r2,r19,10220 <__alt_mem_Flash_flash_data+0xf4010220>
   102d4:	003fc206 	br	101e0 <__alt_mem_Flash_flash_data+0xf40101e0>
   102d8:	98806317 	ldw	r2,396(r19)
   102dc:	2084703a 	and	r2,r4,r2
   102e0:	1000061e 	bne	r2,zero,102fc <__call_exitprocs+0x16c>
   102e4:	89400017 	ldw	r5,0(r17)
   102e8:	9009883a 	mov	r4,r18
   102ec:	183ee83a 	callr	r3
   102f0:	003ff406 	br	102c4 <__alt_mem_Flash_flash_data+0xf40102c4>
   102f4:	9f000115 	stw	fp,4(r19)
   102f8:	003fea06 	br	102a4 <__alt_mem_Flash_flash_data+0xf40102a4>
   102fc:	89000017 	ldw	r4,0(r17)
   10300:	183ee83a 	callr	r3
   10304:	003fef06 	br	102c4 <__alt_mem_Flash_flash_data+0xf40102c4>
   10308:	98800017 	ldw	r2,0(r19)
   1030c:	982b883a 	mov	r21,r19
   10310:	1027883a 	mov	r19,r2
   10314:	983fb61e 	bne	r19,zero,101f0 <__alt_mem_Flash_flash_data+0xf40101f0>
   10318:	003fd106 	br	10260 <__alt_mem_Flash_flash_data+0xf4010260>
   1031c:	0005883a 	mov	r2,zero
   10320:	003ffa06 	br	1030c <__alt_mem_Flash_flash_data+0xf401030c>

00010324 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   10324:	defffd04 	addi	sp,sp,-12
   10328:	df000215 	stw	fp,8(sp)
   1032c:	df000204 	addi	fp,sp,8
   10330:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   10334:	00800074 	movhi	r2,1
   10338:	10912b44 	addi	r2,r2,17581
   1033c:	10000005 	stb	zero,0(r2)
   10340:	e0bfff17 	ldw	r2,-4(fp)
   10344:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   10348:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1034c:	10000226 	beq	r2,zero,10358 <_exit+0x34>
    ALT_SIM_FAIL();
   10350:	002af070 	cmpltui	zero,zero,43969
   10354:	00000106 	br	1035c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   10358:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1035c:	003fff06 	br	1035c <__alt_mem_Flash_flash_data+0xf401035c>
