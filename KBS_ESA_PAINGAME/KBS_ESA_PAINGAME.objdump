
KBS_ESA_PAINGAME.elf:     file format elf32-littlenios2
KBS_ESA_PAINGAME.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000207a8 memsz 0x000207a8 flags r-x
    LOAD off    0x000217c8 vaddr 0x000207c8 paddr 0x0002271c align 2**12
         filesz 0x00001f54 memsz 0x00001f54 flags rw-
    LOAD off    0x00024670 vaddr 0x00024670 paddr 0x00024670 align 2**12
         filesz 0x00000000 memsz 0x00011c24 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001fb94  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000009f0  0001fdd8  0001fdd8  00020dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f54  000207c8  0002271c  000217c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00011c24  00024670  00024670  00024670  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00036294  00036294  0002371c  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  0002371c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0002371c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011c0  00000000  00000000  00023740  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00034df5  00000000  00000000  00024900  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c28f  00000000  00000000  000596f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010833  00000000  00000000  00065984  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000413c  00000000  00000000  000761b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005728  00000000  00000000  0007a2f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b16c  00000000  00000000  0007fa1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0009ab88  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001990  00000000  00000000  0009aba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000a2706  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000a270c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000a2711  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000a2712  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000a2713  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000a2717  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000a271b  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000a271f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000a2728  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000a2731  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000a273a  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  000a2745  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  000a27a3  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  000ad368  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0001fdd8 l    d  .rodata	00000000 .rodata
000207c8 l    d  .rwdata	00000000 .rwdata
00024670 l    d  .bss	00000000 .bss
00036294 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/rickert/Documents/GitHub/KBS_ESA_PAINGAME/KBS_ESA_PAINGAME_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Contoller.c
00000000 l    df *ABS*	00000000 Game.c
000019b4 l     F .text	00000054 nummer1
00001a08 l     F .text	000000f4 nummer2
00001afc l     F .text	000000cc nummer3
00001bc8 l     F .text	000000a4 nummer4
00001c6c l     F .text	000000f4 nummer5
00001d60 l     F .text	000000f4 nummer6
00001e54 l     F .text	0000007c nummer7
00001ed0 l     F .text	000000f4 nummer8
00001fc4 l     F .text	000000f4 nummer9
000020b8 l     F .text	000000cc nummer0
00000000 l    df *ABS*	00000000 Menu.c
00000000 l    df *ABS*	00000000 Singleplayer.c
00000000 l    df *ABS*	00000000 Tutorial.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00020216 l     O .rodata	00000010 zeroes.4240
00020226 l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 vfprintf.c
00020236 l     O .rodata	00000010 zeroes.4255
00007740 l     F .text	000000bc __sbprintf
00020246 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00007950 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000950c l     F .text	00000008 __fp_lock
00009514 l     F .text	00000008 __fp_unlock
00009528 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000207f0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00020c34 l     O .rwdata	00000020 lc_ctype_charset
00020c14 l     O .rwdata	00000020 lc_message_charset
00020c54 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00020278 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002039c l     O .rodata	00000010 zeroes.4184
000203ac l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 vfprintf.c
0000db9c l     F .text	000000fc __sprint_r.part.0
000203cc l     O .rodata	00000010 blanks.4199
000203bc l     O .rodata	00000010 zeroes.4200
0000efa4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000104a8 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00012bd4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00012cf4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00012d20 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00012e20 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00012f14 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00012ff8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
000131f0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00022690 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001344c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00022694 l     O .rwdata	00000004 lockid
00024708 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00022698 l     O .rwdata	00000004 lockid
00024710 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00014e80 l     F .text	00000044 OS_InitMisc
00014ec4 l     F .text	00000068 OS_InitRdyList
00015024 l     F .text	000000e0 OS_InitTCBList
00014da4 l     F .text	000000dc OS_InitEventList
00014f2c l     F .text	0000007c OS_InitTaskIdle
00014fa8 l     F .text	0000007c OS_InitTaskStat
00015284 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00017088 l     F .text	00000110 OS_FlagTaskRdy
00016de0 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001c0b8 l     F .text	00000038 alt_dev_reg
0002123c l     O .rwdata	0000106c JTAG_UART
000222a8 l     O .rwdata	00000030 AV_Config
000222d8 l     O .rwdata	00000030 Audio_Subsystem_Audio
00022308 l     O .rwdata	0000002c Char_LCD_16x2
00022334 l     O .rwdata	0000002c IrDA
00022360 l     O .rwdata	0000002c Expansion_JP5
0002238c l     O .rwdata	0000002c Green_LEDs
000223b8 l     O .rwdata	0000002c HEX3_HEX0
000223e4 l     O .rwdata	0000002c HEX7_HEX4
00022410 l     O .rwdata	0000002c Pushbuttons
0002243c l     O .rwdata	0000002c Red_LEDs
00022468 l     O .rwdata	0000002c Slider_Switches
00022494 l     O .rwdata	00000038 PS2_Port
000224cc l     O .rwdata	00000038 PS2_Port_Dual
00022504 l     O .rwdata	0000002c Serial_Port
00022530 l     O .rwdata	00000034 USB
00022564 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
000225ac l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
00022600 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001c7a0 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0001ca48 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001d220 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001ea3c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001eca8 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001ef90 l     F .text	00000050 alt_get_errno
0001efe0 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00024774 g     O .bss	00000004 alt_instruction_exception_handler
0000c010 g     F .text	00000074 _mprec_log10
000226e6 g     O .rwdata	00000002 OSTaskNameSize
0000c0fc g     F .text	0000008c __any_on
0000f510 g     F .text	00000054 _isatty_r
00020284 g     O .rodata	00000028 __mprec_tinytens
0001311c g     F .text	000000d4 alt_main
00003624 g     F .text	000000a8 _puts_r
00036194 g     O .bss	00000100 alt_irq
0001ddfc g     F .text	0000005c alt_up_ps2_disable_read_interrupt
0000f564 g     F .text	0000005c _lseek_r
00018474 g     F .text	000000d0 OS_MemInit
0002271c g       *ABS*	00000000 __flash_rwdata_start
0001c054 g     F .text	00000064 OSTimeSet
0001d38c g     F .text	0000003c alt_up_character_lcd_send_cmd
0001173c g     F .text	00000084 .hidden __eqdf2
00013afc g     F .text	00000610 OSEventPendMulti
00036294 g       *ABS*	00000000 __alt_heap_start
0001f5ec g     F .text	00000020 OSTaskCreateHook
000035e8 g     F .text	0000003c printf
000226be g     O .rwdata	00000002 OSMboxEn
00024698 g     O .bss	00000004 random
00014160 g     F .text	0000007c OSIntEnter
0000f770 g     F .text	0000009c _wcrtomb_r
0000c890 g     F .text	0000005c __sseek
0000985c g     F .text	00000010 __sinit
0001e784 g     F .text	00000100 alt_up_char_buffer_string
0000f61c g     F .text	00000138 __swbuf_r
0001dc1c g     F .text	00000034 read_CE_bit
000226ce g     O .rwdata	00000002 OSQEn
00001730 g     F .text	00000284 Tutorial
0000a308 g     F .text	0000007c _setlocale_r
000096c4 g     F .text	00000068 __sfmoreglue
000137d0 g     F .text	000000d0 __malloc_unlock
0001f648 g     F .text	0000001c OSTaskStatHook
0001dfa0 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
0001e494 g     F .text	00000090 alt_up_rs232_read_fd
00024718 g     O .bss	00000001 OSLockNesting
000021f8 g     F .text	000000ec menu
0002270c g     O .rwdata	00000002 OSDataSize
00024719 g     O .bss	00000001 OSRunning
0001e6b8 g     F .text	000000cc alt_up_char_buffer_draw
000247a0 g     O .bss	00002000 Singleplayer_stk
00024670 g     O .bss	00000004 counter3
0000af68 g     F .text	0000015c memmove
0001f680 g     F .text	0000001c OSInitHookBegin
00022704 g     O .rwdata	00000002 OSTmrSize
00009844 g     F .text	00000018 _cleanup
0000b1e8 g     F .text	000000a8 _Balloc
00022638 g     O .rwdata	00000004 gameModeMenu
0002471c g     O .bss	00000004 OSIdleCtr
000117c0 g     F .text	000000e0 .hidden __gtdf2
00022640 g     O .rwdata	00000004 xRechts
0001f3a0 g     F .text	00000020 altera_nios2_gen2_irq_init
0001f46c g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0001d318 g     F .text	00000074 get_DDRAM_addr
000155bc g     F .text	000002d4 OS_TCBInit
00022650 g     O .rwdata	00000004 yMenu
00000000 g     F .entry	0000001c __reset
0002270a g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
000226aa g     O .rwdata	00000002 OSEventSize
00024720 g     O .bss	00000001 OSPrioHighRdy
0000f4b8 g     F .text	00000058 _fstat_r
0001f60c g     F .text	00000020 OSTaskDelHook
000246f4 g     O .bss	00000004 errno
0000c80c g     F .text	00000008 __seofread
0001f44c g       .text	00000000 OSStartHighRdy
0002469c g     O .bss	00000004 pixel_buffer_y
0001a958 g     F .text	000001ec OSTaskCreateExt
0000cb64 g     F .text	00001038 ___svfiprintf_internal_r
0001692c g     F .text	00000068 OSFlagPendGetFlagsRdy
000226ea g     O .rwdata	00000002 OSTaskStatStkSize
00015a1c g     F .text	00000308 OSFlagAccept
00018b48 g     F .text	000000b8 OSQFlush
00018544 g     F .text	00000140 OSQAccept
00024700 g     O .bss	00000004 alt_argv
000246a0 g     O .bss	00000004 score1
0002a62c g       *ABS*	00000000 _gp
0001a79c g     F .text	000001bc OSTaskCreate
0001a25c g     F .text	00000540 OSTaskChangePrio
00024714 g     O .bss	00000004 alt_heapsem
00002e00 g     F .text	0000003c del_middenlijn
00015890 g     F .text	0000018c OSDebugInit
0001ab44 g     F .text	000003e0 OSTaskDel
00022644 g     O .rwdata	00000004 xBoven
000210bc g     O .rwdata	00000180 alt_fd_list
00022658 g     O .rwdata	00000004 onePress
00032f70 g     O .bss	00000370 OSFlagTbl
00014b90 g     F .text	000000b4 OS_EventTaskRemove
0001ebe8 g     F .text	00000090 alt_find_dev
0000ae30 g     F .text	00000138 memcpy
000226d4 g     O .rwdata	00000002 OSRdyTblSize
0001d528 g     F .text	00000050 alt_up_character_lcd_write_fd
0001e884 g     F .text	0000005c alt_up_char_buffer_clear
0000951c g     F .text	0000000c _cleanup_r
000129fc g     F .text	000000d0 .hidden __floatsidf
0001ed68 g     F .text	00000078 alt_io_redirect
000118a0 g     F .text	000000e0 .hidden __ltdf2
0001fdd8 g       *ABS*	00000000 __DTOR_END__
0001daa8 g     F .text	00000090 alt_up_irda_write_fd
0001e420 g     F .text	00000074 alt_up_rs232_read_data
000036cc g     F .text	00000014 puts
0001f990 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000138a0 g     F .text	00000120 OSEventNameGet
000226b8 g     O .rwdata	00000002 OSFlagMax
0000c6f0 g     F .text	00000074 __fpclassifyd
000246cc g     O .bss	00000004 last
0000bf6c g     F .text	000000a4 __ratio
000141dc g     F .text	000000f4 OSIntExit
0000ef80 g     F .text	00000024 __vfiprintf_internal
000226f2 g     O .rwdata	00000002 OSTCBSize
00024721 g     O .bss	00000001 OSPrioCur
0001d8a4 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0001ccac g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000035bc g     F .text	0000002c _printf_r
000105c4 g     F .text	00000008 .hidden __udivsi3
00012e70 g     F .text	000000a4 isatty
000226d8 g     O .rwdata	00000002 OSStkWidth
000202d4 g     O .rodata	000000c8 __mprec_tens
000226cc g     O .rwdata	00000002 OSPtrSize
0000a384 g     F .text	0000000c __locale_charset
000226ac g     O .rwdata	00000002 OSEventTblSize
0001d848 g     F .text	0000005c alt_up_irda_disable_read_interrupt
0002264c g     O .rwdata	00000004 xMenu
0001f3c0 g       .text	00000000 OSCtxSw
0001f904 g     F .text	0000008c alt_icache_flush
000246f0 g     O .bss	00000004 __malloc_top_pad
00000688 g     F .text	00000104 moveDown
00024724 g     O .bss	00000004 OSTCBList
00024674 g     O .bss	00000004 gpio_dev
00022634 g     O .rwdata	00000004 leven
000246f8 g     O .bss	00000004 alt_fd_list_lock
00022668 g     O .rwdata	00000004 __mb_cur_max
0000a3b4 g     F .text	0000000c _localeconv_r
0000b5f4 g     F .text	0000003c __i2b
00009cc0 g     F .text	000004c0 __sfvwrite_r
000332e0 g     O .bss	00000c30 OSMemTbl
00024728 g     O .bss	00000001 OSTickStepState
0000c764 g     F .text	00000054 _sbrk_r
000267a0 g     O .bss	00002000 menu_stk
000226d0 g     O .rwdata	00000002 OSQMax
00033f10 g     O .bss	00000800 OSTaskStatStk
000180a4 g     F .text	000000f8 OSMemNameGet
000226b0 g     O .rwdata	00000002 OSFlagEn
0000f5c0 g     F .text	0000005c _read_r
000226f6 g     O .rwdata	00000002 OSTimeTickHookEn
00019068 g     F .text	00000168 OSQPost
00017198 g     F .text	000000a0 OS_FlagUnlink
00022688 g     O .rwdata	00000004 alt_max_fd
0001e39c g     F .text	00000044 alt_up_rs232_check_parity
00015154 g     F .text	00000064 OS_MemCopy
000151b8 g     F .text	000000cc OS_Sched
0000f1d4 g     F .text	000000f0 _fclose_r
00017fb4 g     F .text	000000f0 OSMemGet
00017cb0 g     F .text	00000110 OSMboxQuery
0001b224 g     F .text	000001c0 OSTaskNameSet
0001dc50 g     F .text	00000030 read_num_bytes_available
000094dc g     F .text	00000030 fflush
000246ec g     O .bss	00000004 __malloc_max_sbrked_mem
0002472c g     O .bss	00000004 OSCtxSwCtr
0001f664 g     F .text	0000001c OSTimeTickHook
0001ede0 g     F .text	000001b0 alt_irq_register
000226ba g     O .rwdata	00000002 OSFlagNameSize
0001dbb8 g     F .text	00000034 read_RI_bit
00014c44 g     F .text	000000fc OS_EventTaskRemoveMulti
00024678 g     O .bss	00000004 controllerSem
000105d4 g     F .text	0000089c .hidden __adddf3
00014a44 g     F .text	0000014c OS_EventTaskWaitMulti
0000bd14 g     F .text	0000011c __b2d
000226d2 g     O .rwdata	00000002 OSQSize
0000ff18 g     F .text	00000590 .hidden __umoddi3
00013048 g     F .text	000000d4 lseek
00019b6c g     F .text	00000268 OSSemPend
00022660 g     O .rwdata	00000004 _global_impure_ptr
0000c188 g     F .text	00000568 _realloc_r
000246c8 g     O .bss	00000004 vorige
000226bc g     O .rwdata	00000002 OSLowestPrio
00036294 g       *ABS*	00000000 __bss_end
0001f6d4 g     F .text	00000020 OSTCBInitHook
00022702 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001f29c g     F .text	00000104 alt_tick
00017a44 g     F .text	00000110 OSMboxPost
0002467c g     O .bss	00000004 counter1
0000f958 g     F .text	000005c0 .hidden __udivdi3
0000f2d8 g     F .text	00000184 _fputwc_r
000226a4 g     O .rwdata	00000002 OSEventEn
000202ac g     O .rodata	00000028 __mprec_bigtens
0000b3d8 g     F .text	00000104 __s2b
000226fe g     O .rwdata	00000002 OSTmrCfgNameSize
00012acc g     F .text	000000a4 .hidden __floatunsidf
0000babc g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0001dcb4 g     F .text	0000002c read_data_byte
0000987c g     F .text	00000018 __fp_lock_all
00016fa4 g     F .text	000000e4 OS_FlagInit
0001f204 g     F .text	00000098 alt_alarm_stop
00024680 g     O .bss	00000004 Flags_Games
0001dbec g     F .text	00000030 read_RE_bit
000226e0 g     O .rwdata	00000002 OSTaskIdleStkSize
00024768 g     O .bss	00000004 alt_irq_active
00019754 g     F .text	000000b0 OSSemAccept
00002d08 g     F .text	00000090 VGA_text
000182b4 g     F .text	000000d8 OSMemPut
000246a4 g     O .bss	00000004 pixel_buffer_x
00017dc0 g     F .text	000001f4 OSMemCreate
00024730 g     O .bss	00000004 OSIdleCtrMax
000287a0 g     O .bss	00002000 controller1_stk
0001d8e4 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
00021094 g     O .rwdata	00000028 alt_dev_null
000226f4 g     O .rwdata	00000002 OSTicksPerSec
0001d7bc g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0001db78 g     F .text	00000040 alt_up_parallel_port_open_dev
0001f3c0 g       .text	00000000 OSIntCtxSw
0001de58 g     F .text	00000074 alt_up_ps2_write_data_byte
00000e3c g     F .text	0000017c endGame
0001ea20 g     F .text	0000001c alt_dcache_flush_all
0000b4dc g     F .text	00000068 __hi0bits
00012974 g     F .text	00000088 .hidden __fixdfsi
00024734 g     O .bss	00000004 OSTCBFreeList
0002271c g       *ABS*	00000000 __ram_rwdata_end
00019dd4 g     F .text	0000016c OSSemPendAbort
00022680 g     O .rwdata	00000008 alt_dev_list
0001349c g     F .text	000000f8 write
0002a7a0 g     O .bss	00002000 Tutorial_stk
000226f8 g     O .rwdata	00000002 OSVersionNbr
000207c8 g       *ABS*	00000000 __ram_rodata_end
00012d70 g     F .text	000000b0 fstat
0001e524 g     F .text	00000094 alt_up_rs232_write_fd
000022e4 g     F .text	00000430 selecteerMenu
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000118a0 g     F .text	000000e0 .hidden __ledf2
000226a0 g     O .rwdata	00000004 OSEndiannessTest
0000b82c g     F .text	00000140 __pow5mult
0000dcb0 g     F .text	000012d0 ___vfiprintf_internal_r
000246e4 g     O .bss	00000004 __nlocale_changed
000105cc g     F .text	00000008 .hidden __umodsi3
000226b2 g     O .rwdata	00000002 OSFlagGrpSize
00000280 g     F .text	0000011c controllers
00036294 g       *ABS*	00000000 end
0001e194 g     F .text	00000098 alt_up_ps2_write_fd
0001d920 g     F .text	00000044 alt_up_irda_check_parity
0001e5f8 g     F .text	00000080 alt_up_char_buffer_init
000207c8 g     O .rwdata	00000028 nummer
000028d4 g     F .text	00000168 teken_menu
0001c660 g     F .text	00000140 altera_avalon_jtag_uart_init
00015418 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000078c g     F .text	0000048c Game
00022630 g     O .rwdata	00000004 check
0001fdd8 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0001d298 g     F .text	00000080 alt_avalon_timer_sc_init
00012b70 g     F .text	00000064 .hidden __clzsi2
0001cf60 g     F .text	000002c0 altera_avalon_jtag_uart_write
0000986c g     F .text	00000004 __sfp_lock_acquire
00002184 g     F .text	00000074 exec
0000ad48 g     F .text	000000e8 memchr
00015104 g     F .text	00000050 OS_MemClr
0001d43c g     F .text	00000078 alt_up_character_lcd_write
000057cc g     F .text	00001f50 ___vfprintf_internal_r
0001f490 g     F .text	0000015c OSTaskStkInit
000036e0 g     F .text	00000058 _sprintf_r
000099d0 g     F .text	000002f0 _free_r
0000a390 g     F .text	00000010 __locale_mb_cur_max
000147a0 g     F .text	00000198 OS_EventTaskRdy
0001fc08 g     F .text	00000194 __call_exitprocs
00024738 g     O .bss	00000001 OSCPUUsage
000246e0 g     O .bss	00000004 __mlocale_changed
0002266c g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00002eac g     F .text	0000003c deleteNummer
0002476c g     O .bss	00000004 _alt_tick_rate
00018c00 g     F .text	000002fc OSQPend
00001540 g     F .text	000001f0 TutUitleg
0001bb50 g     F .text	00000148 OSTimeDly
0002c7a0 g     O .bss	00002000 controller2_stk
0000b96c g     F .text	00000150 __lshift
00024770 g     O .bss	00000004 _alt_nticks
00013240 g     F .text	000000fc read
0001c124 g     F .text	000003d8 alt_sys_init
0001d674 g     F .text	00000088 alt_up_character_lcd_shift_display
0000c998 g     F .text	000001cc __ssprint_r
0001faf4 g     F .text	00000114 __register_exitproc
00024739 g     O .bss	00000001 OSTaskCtr
0001e0b4 g     F .text	00000054 alt_up_ps2_clear_fifo
0001e360 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
000246a8 g     O .bss	00000004 score2
00024684 g     O .bss	00000004 MailBox2
00002c54 g     F .text	000000b4 VGA_box
0001bc98 g     F .text	00000168 OSTimeDlyHMSM
000010f0 g     F .text	00000450 Singleplayer
0000b630 g     F .text	000001fc __multiply
0001d6fc g     F .text	0000008c alt_up_character_lcd_erase_pos
0001cb58 g     F .text	00000068 altera_avalon_jtag_uart_close
000207c8 g       *ABS*	00000000 __ram_rwdata_start
0001fdd8 g       *ABS*	00000000 __ram_rodata_start
00024778 g     O .bss	00000028 __malloc_current_mallinfo
000226a6 g     O .rwdata	00000002 OSEventMax
0000be30 g     F .text	0000013c __d2b
00019f40 g     F .text	00000110 OSSemPost
00014358 g     F .text	000000d8 OSSchedUnlock
00002d98 g     F .text	00000068 draw_middenlijn
0001c4fc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001f808 g     F .text	000000fc alt_get_fd
0002473c g     O .bss	00000004 OSMemFreeList
0001449c g     F .text	000000ac OSStatInit
00016d1c g     F .text	000000c4 OSFlagQuery
000226dc g     O .rwdata	00000002 OSTaskCreateExtEn
0000f0bc g     F .text	00000054 _close_r
0001fa78 g     F .text	0000007c memcmp
00014784 g     F .text	0000001c OS_Dummy
0001c5bc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00036294 g       *ABS*	00000000 __alt_stack_base
0001c60c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000246d0 g     O .bss	00000004 changed
0001d7f0 g     F .text	00000058 alt_up_irda_enable_read_interrupt
000077fc g     F .text	00000154 __swsetup_r
00034710 g     O .bss	000001e0 OSQTbl
0000039c g     F .text	000001a0 controller
00010e70 g     F .text	000008cc .hidden __divdf3
0000972c g     F .text	00000118 __sfp
0000c084 g     F .text	00000078 __copybits
00020c8c g     O .rwdata	00000408 __malloc_av_
000246ac g     O .bss	00000004 ALT_y
00009878 g     F .text	00000004 __sinit_lock_release
00024740 g     O .bss	00000004 OSTCBHighRdy
00011980 g     F .text	00000724 .hidden __muldf3
0000c7b8 g     F .text	00000054 __sread
00024744 g     O .bss	00000004 OSQFreeList
0001e2c4 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
0001f6f4 g     F .text	00000114 alt_find_file
0001ea8c g     F .text	000000a4 alt_dev_llist_insert
000136b0 g     F .text	00000120 __malloc_lock
0001339c g     F .text	000000b0 sbrk
0000383c g     F .text	00001f90 ___svfprintf_internal_r
000246b0 g     O .bss	00000004 ALT_inc_y
000139c0 g     F .text	0000013c OSEventNameSet
00009480 g     F .text	0000005c _fflush_r
0000f110 g     F .text	000000c4 _calloc_r
00024748 g     O .bss	00000001 OSRdyGrp
00024670 g       *ABS*	00000000 __bss_start
0000b0c4 g     F .text	00000124 memset
00002a3c g     F .text	00000218 main
00024704 g     O .bss	00000004 alt_envp
000246e8 g     O .bss	00000004 __malloc_max_total_mem
0001e678 g     F .text	00000040 alt_up_char_buffer_open_dev
0001c55c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000f754 g     F .text	0000001c __swbuf
000204f8 g     O .rodata	00000100 OSUnMapTbl
000226d6 g     O .rwdata	00000002 OSSemEn
0001d5ec g     F .text	00000088 alt_up_character_lcd_shift_cursor
00016994 g     F .text	00000388 OSFlagPost
0000c8ec g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000f2c4 g     F .text	00000014 fclose
00014938 g     F .text	0000010c OS_EventTaskWait
0001e044 g     F .text	00000070 alt_up_ps2_read_data_byte
000246d8 g     O .bss	00000004 timeout
000154f4 g     F .text	000000c8 OS_TaskStatStkChk
0001af24 g     F .text	00000158 OSTaskDelReq
00007b50 g     F .text	00001728 _dtoa_r
0000a5a0 g     F .text	000007a8 _malloc_r
0000f8cc g     F .text	00000030 __ascii_wctomb
0002268c g     O .rwdata	00000004 alt_errno
00014430 g     F .text	0000006c OSStart
00013654 g     F .text	0000005c __env_unlock
0000a180 g     F .text	000000c4 _fwalk
0001b3e4 g     F .text	000001f8 OSTaskResume
0001838c g     F .text	000000e8 OSMemQuery
000226e8 g     O .rwdata	00000002 OSTaskStatEn
0002e7a0 g     O .bss	00002000 Game_stk
0001d964 g     F .text	00000040 alt_up_irda_write_data
000226c2 g     O .rwdata	00000002 OSMemMax
000191d0 g     F .text	00000170 OSQPostFront
0001e22c g     F .text	00000040 alt_up_ps2_open_dev
00010514 g     F .text	00000054 .hidden __divsi3
00024749 g     O .bss	00000003 OSRdyTbl
0002269c g     O .rwdata	00000002 OSDebugEn
0001d3fc g     F .text	00000040 alt_up_character_lcd_open_dev
000098ac g     F .text	00000124 _malloc_trim_r
0001dda4 g     F .text	00000058 alt_up_ps2_enable_read_interrupt
0001fdd8 g       *ABS*	00000000 __CTOR_END__
000226b4 g     O .rwdata	00000002 OSFlagNodeSize
000226fc g     O .rwdata	00000002 OSTmrCfgMax
0001d3c8 g     F .text	00000034 alt_up_character_lcd_init
0000c8f4 g     F .text	000000a4 strcmp
00018684 g     F .text	000001fc OSQCreate
0001b07c g     F .text	000001a8 OSTaskNameGet
0001fdd8 g       *ABS*	00000000 __flash_rodata_start
00019340 g     F .text	0000020c OSQPostOpt
00014548 g     F .text	0000021c OSTimeTick
000226e4 g     O .rwdata	00000002 OSTaskMax
0001fdd8 g       *ABS*	00000000 __DTOR_LIST__
00019804 g     F .text	00000100 OSSemCreate
00022708 g     O .rwdata	00000002 OSTmrWheelSize
0001e5b8 g     F .text	00000040 alt_up_rs232_open_dev
000246b4 g     O .bss	00000004 gameSem
0001173c g     F .text	00000084 .hidden __nedf2
000226de g     O .rwdata	00000002 OSTaskDelEn
0001a050 g     F .text	00000110 OSSemQuery
00018880 g     F .text	000002c8 OSQDel
00018efc g     F .text	0000016c OSQPendAbort
0001c0f0 g     F .text	00000034 alt_irq_init
0001333c g     F .text	00000060 alt_release_fd
0000053c g     F .text	0000004c checkID
0001dc80 g     F .text	00000034 read_data_valid
00003738 g     F .text	0000006c sprintf
0001d788 g     F .text	00000034 alt_up_character_lcd_cursor_off
000203dc g     O .rodata	00000100 .hidden __clz_tab
000246dc g     O .bss	00000004 _PathLocale
0001df3c g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001fa2c g     F .text	00000014 atexit
00002e3c g     F .text	00000070 del_number
0000f060 g     F .text	0000005c _write_r
000142d0 g     F .text	00000088 OSSchedLock
0000a3c0 g     F .text	0000001c setlocale
00015d24 g     F .text	00000128 OSFlagCreate
00022664 g     O .rwdata	00000004 _impure_ptr
000246fc g     O .bss	00000004 alt_argc
00009278 g     F .text	00000208 __sflush_r
0001eb8c g     F .text	0000005c _do_dtors
0000a3ac g     F .text	00000008 __locale_cjk_lang
000226ae g     O .rwdata	00000002 OSEventMultiEn
00015e4c g     F .text	00000270 OSFlagDel
0002474c g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
000178d8 g     F .text	0000016c OSMboxPendAbort
0000bcb4 g     F .text	00000060 __ulp
000226fa g     O .rwdata	00000002 OSTmrEn
0001633c g     F .text	000005f0 OSFlagPend
00009894 g     F .text	00000018 __fp_unlock_all
00022678 g     O .rwdata	00000008 alt_fs_list
000152f4 g     F .text	00000074 OS_StrCopy
0001e26c g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0001e3e0 g     F .text	00000040 alt_up_rs232_write_data
00000588 g     F .text	00000100 moveUp
000226c4 g     O .rwdata	00000002 OSMemNameSize
000246b8 g     O .bss	00000004 ALT_x1
0001f69c g     F .text	0000001c OSInitHookEnd
000307a0 g     O .bss	000007d0 Messages
00002ee8 g     F .text	00000674 draw_number
00000020 g       *ABS*	00000000 __ram_exceptions_start
000226f0 g     O .rwdata	00000002 OSTCBPrioTblMax
0000a3dc g     F .text	0000000c localeconv
000226ec g     O .rwdata	00000002 OSTaskStatStkChkEn
000172d0 g     F .text	000000fc OSMboxCreate
000226c0 g     O .rwdata	00000002 OSMemEn
0002262c g     O .rwdata	00000004 first
000226ca g     O .rwdata	00000002 OSMutexEn
00024694 g     O .bss	00000004 score3
0002271c g       *ABS*	00000000 _edata
0002265c g     O .rwdata	00000004 interval_timer_ptr
00036294 g       *ABS*	00000000 _end
00024750 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
0001cbc0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0001be00 g     F .text	000001f0 OSTimeDlyResume
000161ec g     F .text	00000150 OSFlagNameSet
00002754 g     F .text	000000a0 clearText
00017634 g     F .text	000002a4 OSMboxPend
0001b5dc g     F .text	000001c8 OSTaskStkChk
000226c6 g     O .rwdata	00000002 OSMemSize
0000c814 g     F .text	0000007c __swrite
00022670 g     O .rwdata	00000004 __malloc_trim_threshold
0000a3a0 g     F .text	0000000c __locale_msgcharset
00024754 g     O .bss	00000004 OSTCBCur
0001fa40 g     F .text	00000038 exit
0000355c g     F .text	00000060 checkIDScore
0001d9a4 g     F .text	00000074 alt_up_irda_read_data
000226c8 g     O .rwdata	00000002 OSMemTblSize
0000a244 g     F .text	000000c4 _fwalk_reent
0001dce0 g     F .text	000000c4 alt_up_ps2_init
0000bb1c g     F .text	00000198 __mdiff
00010568 g     F .text	0000005c .hidden __modsi3
00030f70 g     O .bss	00002000 menu_stk2
00017238 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00009870 g     F .text	00000004 __sfp_lock_release
0001410c g     F .text	00000054 OSInit
0001b9b8 g     F .text	0000012c OSTaskQuery
0001d4b4 g     F .text	00000074 alt_up_character_lcd_string
000196a8 g     F .text	000000ac OS_QInit
00015368 g     F .text	00000054 OS_StrLen
0001db38 g     F .text	00000040 alt_up_irda_open_dev
0001819c g     F .text	00000118 OSMemNameSet
00000c18 g     F .text	00000224 gescoord
000226e2 g     O .rwdata	00000002 OSTaskProfileEn
00024758 g     O .bss	00000004 OSTime
00024688 g     O .bss	00000004 Flags
000027f4 g     F .text	00000058 tekenBox
000348f0 g     O .bss	00000800 OSTaskIdleStk
0001fd9c g     F .text	0000003c _exit
000246bc g     O .bss	00000004 ALT_inc_x
00017b54 g     F .text	0000015c OSMboxPostOpt
0001e8e0 g     F .text	00000140 alt_alarm_start
000160bc g     F .text	00000130 OSFlagNameGet
0001bff0 g     F .text	00000064 OSTimeGet
0000a3e8 g     F .text	000001b8 __smakebuf_r
0001decc g     F .text	00000070 alt_up_ps2_wait_for_ack
000037a4 g     F .text	00000098 strlen
0001f62c g     F .text	0000001c OSTaskSwHook
0001f0ac g     F .text	00000158 open
000350f0 g     O .bss	00000b40 OSEventTbl
000117c0 g     F .text	000000e0 .hidden __gedf2
00035c30 g     O .bss	00000510 OSTCBTbl
0001a160 g     F .text	000000fc OSSemSet
00022654 g     O .rwdata	00000004 eenkeer
00002714 g     F .text	00000040 clearScreen
00022674 g     O .rwdata	00000004 __wctomb
0000dc98 g     F .text	00000018 __sprint_r
000246c0 g     O .bss	00000004 ALT_x2
0001ec78 g     F .text	00000030 alt_icache_flush_all
0001d578 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00022710 g     O .rwdata	00000004 alt_priority_mask
00019904 g     F .text	00000268 OSSemDel
0002475c g     O .bss	00000004 OSFlagFreeList
000226a8 g     O .rwdata	00000002 OSEventNameSize
000173cc g     F .text	00000268 OSMboxDel
0000771c g     F .text	00000024 __vfprintf_internal
00024760 g     O .bss	00000001 OSStatRdy
0002468c g     O .bss	00000004 MailBox
00036140 g     O .bss	00000054 OSTCBPrioTbl
0000f8fc g     F .text	0000005c _wctomb_r
00013594 g     F .text	000000c0 __env_lock
0001e108 g     F .text	0000008c alt_up_ps2_read_fd
000226ee g     O .rwdata	00000002 OSTaskSwHookEn
0002263c g     O .rwdata	00000004 xLinks
000120a4 g     F .text	000008d0 .hidden __subdf3
0001da18 g     F .text	00000090 alt_up_irda_read_fd
0000b544 g     F .text	000000b0 __lo0bits
00022714 g     O .rwdata	00000008 alt_alarm_list
000226b6 g     O .rwdata	00000002 OSFlagWidth
0001eb30 g     F .text	0000005c _do_ctors
0001e320 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000f80c g     F .text	000000c0 wcrtomb
00012c24 g     F .text	000000d0 close
0002470c g     O .bss	00000004 alt_envsem
00024764 g     O .bss	00000004 OSIdleCtrRun
00022648 g     O .rwdata	00000004 xOnder
00014764 g     F .text	00000020 OSVersion
00022700 g     O .rwdata	00000002 OSTmrCfgWheelSize
00012f78 g     F .text	00000080 alt_load
0001bae4 g     F .text	0000006c OS_TaskStkClr
0000284c g     F .text	00000088 tekenBox2
000226da g     O .rwdata	00000002 OSTaskCreateEn
000246d4 g     O .bss	00000004 menuSem
00014d40 g     F .text	00000064 OS_EventWaitListInit
0000f45c g     F .text	0000005c fputwc
0001f6b8 g     F .text	0000001c OSTaskIdleHook
000246c4 g     O .bss	00000004 X
00000000  w      *UND*	00000000 free
00009874 g     F .text	00000004 __sinit_lock_acquire
0000b2b8 g     F .text	00000120 __multadd
00000fb8 g     F .text	00000138 endSingleplayer
0001b7a4 g     F .text	00000214 OSTaskSuspend
0000b290 g     F .text	00000028 _Bfree
00024690 g     O .bss	00000004 counter2
000153bc g     F .text	0000005c OS_TaskIdle
00022706 g     O .rwdata	00000002 OSTmrTblSize
0001954c g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00141600 	call	14160 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000f4 	movhi	r2,3
 140:	10986504 	addi	r2,r2,24980
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10986504 	addi	r2,r2,24980
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	00141dc0 	call	141dc <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a85217 	ldw	r2,-24248(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a85217 	ldw	r2,-24248(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d6a98b14 	ori	gp,gp,42540
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     258:	10919c14 	ori	r2,r2,18032

    movhi r3, %hi(__bss_end)
     25c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     260:	18d8a514 	ori	r3,r3,25236

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	0012f780 	call	12f78 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	001311c0 	call	1311c <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <controllers>:
}Balk;

alt_up_parallel_port_dev *gpio_dev; //	gpio device


void controllers(void* pdata) {
     280:	defff804 	addi	sp,sp,-32
     284:	dfc00715 	stw	ra,28(sp)
     288:	df000615 	stw	fp,24(sp)
     28c:	df000604 	addi	fp,sp,24
     290:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	int ID = (int*) pdata;
     294:	e0bfff17 	ldw	r2,-4(fp)
     298:	e0bffc15 	stw	r2,-16(fp)
	int hoogte = 50;
     29c:	00800c84 	movi	r2,50
     2a0:	e0bffb15 	stw	r2,-20(fp)

	Balk balkje;

	while (1) {
		OSFlagPend(Flags, C1_Flag + C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     2a4:	d0e81717 	ldw	r3,-24484(gp)
     2a8:	e0bffd04 	addi	r2,fp,-12
     2ac:	d8800015 	stw	r2,0(sp)
     2b0:	1809883a 	mov	r4,r3
     2b4:	01400304 	movi	r5,12
     2b8:	01800044 	movi	r6,1
     2bc:	000f883a 	mov	r7,zero
     2c0:	001633c0 	call	1633c <OSFlagPend>
		balkje.Hoogte = hoogte;
     2c4:	e0bffb17 	ldw	r2,-20(fp)
     2c8:	e0bffe15 	stw	r2,-8(fp)

		if (controller(ID) == 1) {
     2cc:	e13ffc17 	ldw	r4,-16(fp)
     2d0:	000039c0 	call	39c <controller>
     2d4:	10800058 	cmpnei	r2,r2,1
     2d8:	1000051e 	bne	r2,zero,2f0 <controllers+0x70>
			hoogte = moveDown(ID, hoogte);
     2dc:	e13ffc17 	ldw	r4,-16(fp)
     2e0:	e17ffb17 	ldw	r5,-20(fp)
     2e4:	00006880 	call	688 <moveDown>
     2e8:	e0bffb15 	stw	r2,-20(fp)
     2ec:	00000706 	br	30c <controllers+0x8c>
		} else if (controller(ID) == 0) {
     2f0:	e13ffc17 	ldw	r4,-16(fp)
     2f4:	000039c0 	call	39c <controller>
     2f8:	1000041e 	bne	r2,zero,30c <controllers+0x8c>
			hoogte = moveUp(ID, hoogte);
     2fc:	e13ffc17 	ldw	r4,-16(fp)
     300:	e17ffb17 	ldw	r5,-20(fp)
     304:	00005880 	call	588 <moveUp>
     308:	e0bffb15 	stw	r2,-20(fp)
		}

		if(ID == 1){
     30c:	e0bffc17 	ldw	r2,-16(fp)
     310:	10800058 	cmpnei	r2,r2,1
     314:	10000e1e 	bne	r2,zero,350 <controllers+0xd0>
			OSFlagPend(Flags, C1_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     318:	d0e81717 	ldw	r3,-24484(gp)
     31c:	e0bffd04 	addi	r2,fp,-12
     320:	d8800015 	stw	r2,0(sp)
     324:	1809883a 	mov	r4,r3
     328:	01400104 	movi	r5,4
     32c:	01800044 	movi	r6,1
     330:	000f883a 	mov	r7,zero
     334:	001633c0 	call	1633c <OSFlagPend>
			OSMboxPost(MailBox, (void*)&balkje);
     338:	d0e81817 	ldw	r3,-24480(gp)
     33c:	e0bffe04 	addi	r2,fp,-8
     340:	1809883a 	mov	r4,r3
     344:	100b883a 	mov	r5,r2
     348:	0017a440 	call	17a44 <OSMboxPost>
     34c:	00001006 	br	390 <controllers+0x110>
		}else if(ID == 2){
     350:	e0bffc17 	ldw	r2,-16(fp)
     354:	10800098 	cmpnei	r2,r2,2
     358:	10000d1e 	bne	r2,zero,390 <controllers+0x110>
			OSFlagPend(Flags, C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     35c:	d0e81717 	ldw	r3,-24484(gp)
     360:	e0bffd04 	addi	r2,fp,-12
     364:	d8800015 	stw	r2,0(sp)
     368:	1809883a 	mov	r4,r3
     36c:	01400204 	movi	r5,8
     370:	01800044 	movi	r6,1
     374:	000f883a 	mov	r7,zero
     378:	001633c0 	call	1633c <OSFlagPend>
			OSMboxPost(MailBox2, (void*)&balkje);
     37c:	d0e81617 	ldw	r3,-24488(gp)
     380:	e0bffe04 	addi	r2,fp,-8
     384:	1809883a 	mov	r4,r3
     388:	100b883a 	mov	r5,r2
     38c:	0017a440 	call	17a44 <OSMboxPost>
		}

		OSTimeDly(1);
     390:	01000044 	movi	r4,1
     394:	001bb500 	call	1bb50 <OSTimeDly>
	}
     398:	003fc206 	br	2a4 <__alt_mem_Flash_flash_data+0xf40002a4>

0000039c <controller>:

}

int controller(int ID) {
     39c:	defff804 	addi	sp,sp,-32
     3a0:	dfc00715 	stw	ra,28(sp)
     3a4:	df000615 	stw	fp,24(sp)
     3a8:	df000604 	addi	fp,sp,24
     3ac:	e13fff15 	stw	r4,-4(fp)
	alt_up_parallel_port_dev * KEY_ptr = alt_up_parallel_port_open_dev(
     3b0:	010000b4 	movhi	r4,2
     3b4:	213f7604 	addi	r4,r4,-552
     3b8:	001db780 	call	1db78 <alt_up_parallel_port_open_dev>
     3bc:	e0bffa15 	stw	r2,-24(fp)
			"/dev/Pushbuttons");
	alt_up_parallel_port_dev * SW_switch_ptr = alt_up_parallel_port_open_dev(
     3c0:	010000b4 	movhi	r4,2
     3c4:	213f7b04 	addi	r4,r4,-532
     3c8:	001db780 	call	1db78 <alt_up_parallel_port_open_dev>
     3cc:	e0bffb15 	stw	r2,-20(fp)
			"/dev/Slider_Switches");
	gpio_dev = alt_up_parallel_port_open_dev("/dev/Expansion_JP5");		//	DE2-115 gpio
     3d0:	010000b4 	movhi	r4,2
     3d4:	213f8104 	addi	r4,r4,-508
     3d8:	001db780 	call	1db78 <alt_up_parallel_port_open_dev>
     3dc:	d0a81215 	stw	r2,-24504(gp)
	alt_up_parallel_port_set_port_direction(gpio_dev, 0x00000001);		// 1-0-1-1	(1 = output; 0 = input)
     3e0:	d0a81217 	ldw	r2,-24504(gp)
     3e4:	10800a17 	ldw	r2,40(r2)
     3e8:	10800104 	addi	r2,r2,4
     3ec:	1007883a 	mov	r3,r2
     3f0:	00800044 	movi	r2,1
     3f4:	18800035 	stwio	r2,0(r3)

	int KEY_value, SW_value, gpio_values;
	INT8U err;

	SW_value = alt_up_parallel_port_read_data(SW_switch_ptr);
     3f8:	e0bffb17 	ldw	r2,-20(fp)
     3fc:	10800a17 	ldw	r2,40(r2)
     400:	10800037 	ldwio	r2,0(r2)
     404:	e0bffc15 	stw	r2,-16(fp)
	KEY_value = alt_up_parallel_port_read_data(KEY_ptr); // read the pushbutton KEY values
     408:	e0bffa17 	ldw	r2,-24(fp)
     40c:	10800a17 	ldw	r2,40(r2)
     410:	10800037 	ldwio	r2,0(r2)
     414:	e0bffd15 	stw	r2,-12(fp)
	gpio_values = alt_up_parallel_port_read_data(gpio_dev);
     418:	d0a81217 	ldw	r2,-24504(gp)
     41c:	10800a17 	ldw	r2,40(r2)
     420:	10800037 	ldwio	r2,0(r2)
     424:	e0bffe15 	stw	r2,-8(fp)

	//printf("gpio_value is: %d\n", gpio_values);

	if (ID == 2) {
     428:	e0bfff17 	ldw	r2,-4(fp)
     42c:	10800098 	cmpnei	r2,r2,2
     430:	1000131e 	bne	r2,zero,480 <controller+0xe4>
		if (KEY_value != 0) {
     434:	e0bffd17 	ldw	r2,-12(fp)
     438:	10000f26 	beq	r2,zero,478 <controller+0xdc>
			if (KEY_value == 8) {
     43c:	e0bffd17 	ldw	r2,-12(fp)
     440:	10800218 	cmpnei	r2,r2,8
     444:	1000021e 	bne	r2,zero,450 <controller+0xb4>
				return 1;
     448:	00800044 	movi	r2,1
     44c:	00003606 	br	528 <controller+0x18c>
			}
			if (KEY_value == 4) {
     450:	e0bffd17 	ldw	r2,-12(fp)
     454:	10800118 	cmpnei	r2,r2,4
     458:	1000021e 	bne	r2,zero,464 <controller+0xc8>
				return 0;
     45c:	0005883a 	mov	r2,zero
     460:	00003106 	br	528 <controller+0x18c>
			}
			if (KEY_value == 2) {
     464:	e0bffd17 	ldw	r2,-12(fp)
     468:	10800098 	cmpnei	r2,r2,2
     46c:	10002b1e 	bne	r2,zero,51c <controller+0x180>
				return 2;
     470:	00800084 	movi	r2,2
     474:	00002c06 	br	528 <controller+0x18c>
			}
		} else {
			return 3;
     478:	008000c4 	movi	r2,3
     47c:	00002a06 	br	528 <controller+0x18c>
		}

	} else if (ID == 1) {
     480:	e0bfff17 	ldw	r2,-4(fp)
     484:	10800058 	cmpnei	r2,r2,1
     488:	10000e1e 	bne	r2,zero,4c4 <controller+0x128>
		if (SW_value != 0) {
     48c:	e0bffc17 	ldw	r2,-16(fp)
     490:	10000a26 	beq	r2,zero,4bc <controller+0x120>
			if (SW_value == 131072) {
     494:	e0fffc17 	ldw	r3,-16(fp)
     498:	008000b4 	movhi	r2,2
     49c:	1880021e 	bne	r3,r2,4a8 <controller+0x10c>
				return 0;
     4a0:	0005883a 	mov	r2,zero
     4a4:	00002006 	br	528 <controller+0x18c>
			}else if(SW_value == 4){
     4a8:	e0bffc17 	ldw	r2,-16(fp)
     4ac:	10800118 	cmpnei	r2,r2,4
     4b0:	10001a1e 	bne	r2,zero,51c <controller+0x180>
				return 4;
     4b4:	00800104 	movi	r2,4
     4b8:	00001b06 	br	528 <controller+0x18c>
			}
		} else {
			return 1;
     4bc:	00800044 	movi	r2,1
     4c0:	00001906 	br	528 <controller+0x18c>
		}
	} else if(ID == 3){
     4c4:	e0bfff17 	ldw	r2,-4(fp)
     4c8:	108000d8 	cmpnei	r2,r2,3
     4cc:	1000131e 	bne	r2,zero,51c <controller+0x180>
		if(gpio_values != 0){
     4d0:	e0bffe17 	ldw	r2,-8(fp)
     4d4:	10000f26 	beq	r2,zero,514 <controller+0x178>
			if(gpio_values == -1){
     4d8:	e0bffe17 	ldw	r2,-8(fp)
     4dc:	10bfffd8 	cmpnei	r2,r2,-1
     4e0:	1000021e 	bne	r2,zero,4ec <controller+0x150>
				return 1;
     4e4:	00800044 	movi	r2,1
     4e8:	00000f06 	br	528 <controller+0x18c>
			} else if(gpio_values == -2){
     4ec:	e0bffe17 	ldw	r2,-8(fp)
     4f0:	10bfff98 	cmpnei	r2,r2,-2
     4f4:	1000021e 	bne	r2,zero,500 <controller+0x164>
				return 2;
     4f8:	00800084 	movi	r2,2
     4fc:	00000a06 	br	528 <controller+0x18c>
			} else if(gpio_values == -3){
     500:	e0bffe17 	ldw	r2,-8(fp)
     504:	10bfff58 	cmpnei	r2,r2,-3
     508:	1000041e 	bne	r2,zero,51c <controller+0x180>
				return 3;
     50c:	008000c4 	movi	r2,3
     510:	00000506 	br	528 <controller+0x18c>
			}
		}else{
			return 0;
     514:	0005883a 	mov	r2,zero
     518:	00000306 	br	528 <controller+0x18c>
		}
	}
	gpio_values &= 0x80000000;		//	negeer alle andere bits, die zijn waarschijnlijk HOOG !
     51c:	e0bffe17 	ldw	r2,-8(fp)
     520:	10a0002c 	andhi	r2,r2,32768
     524:	e0bffe15 	stw	r2,-8(fp)

}
     528:	e037883a 	mov	sp,fp
     52c:	dfc00117 	ldw	ra,4(sp)
     530:	df000017 	ldw	fp,0(sp)
     534:	dec00204 	addi	sp,sp,8
     538:	f800283a 	ret

0000053c <checkID>:

int checkID(int ID) {
     53c:	defffe04 	addi	sp,sp,-8
     540:	df000115 	stw	fp,4(sp)
     544:	df000104 	addi	fp,sp,4
     548:	e13fff15 	stw	r4,-4(fp)
	if (ID == 1) {
     54c:	e0bfff17 	ldw	r2,-4(fp)
     550:	10800058 	cmpnei	r2,r2,1
     554:	1000021e 	bne	r2,zero,560 <checkID+0x24>
		return 15;
     558:	008003c4 	movi	r2,15
     55c:	00000606 	br	578 <checkID+0x3c>
	} else if (ID == 2) {
     560:	e0bfff17 	ldw	r2,-4(fp)
     564:	10800098 	cmpnei	r2,r2,2
     568:	1000021e 	bne	r2,zero,574 <checkID+0x38>
		return 300;
     56c:	00804b04 	movi	r2,300
     570:	00000106 	br	578 <checkID+0x3c>

	}
	return 0;
     574:	0005883a 	mov	r2,zero
}
     578:	e037883a 	mov	sp,fp
     57c:	df000017 	ldw	fp,0(sp)
     580:	dec00104 	addi	sp,sp,4
     584:	f800283a 	ret

00000588 <moveUp>:

int moveUp(int ID, int current) {
     588:	defff904 	addi	sp,sp,-28
     58c:	dfc00615 	stw	ra,24(sp)
     590:	df000515 	stw	fp,20(sp)
     594:	df000504 	addi	fp,sp,20
     598:	e13ffe15 	stw	r4,-8(fp)
     59c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     5a0:	e0bfff17 	ldw	r2,-4(fp)
     5a4:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     5a8:	e13ffe17 	ldw	r4,-8(fp)
     5ac:	000053c0 	call	53c <checkID>
     5b0:	e0bffd15 	stw	r2,-12(fp)

	if (boven >= 4 && boven <= 184) {
     5b4:	e0bffc17 	ldw	r2,-16(fp)
     5b8:	10800110 	cmplti	r2,r2,4
     5bc:	10001c1e 	bne	r2,zero,630 <moveUp+0xa8>
     5c0:	e0bffc17 	ldw	r2,-16(fp)
     5c4:	10802e48 	cmpgei	r2,r2,185
     5c8:	1000191e 	bne	r2,zero,630 <moveUp+0xa8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
     5cc:	e0bffd17 	ldw	r2,-12(fp)
     5d0:	11800144 	addi	r6,r2,5
     5d4:	e0bffc17 	ldw	r2,-16(fp)
     5d8:	10c00044 	addi	r3,r2,1
     5dc:	00803fc4 	movi	r2,255
     5e0:	d8800015 	stw	r2,0(sp)
     5e4:	e13ffd17 	ldw	r4,-12(fp)
     5e8:	e17ffc17 	ldw	r5,-16(fp)
     5ec:	180f883a 	mov	r7,r3
     5f0:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
     5f4:	e0bffc17 	ldw	r2,-16(fp)
     5f8:	11400c84 	addi	r5,r2,50
     5fc:	e0bffd17 	ldw	r2,-12(fp)
     600:	10c00144 	addi	r3,r2,5
     604:	e0bffc17 	ldw	r2,-16(fp)
     608:	10800cc4 	addi	r2,r2,51
     60c:	d8000015 	stw	zero,0(sp)
     610:	e13ffd17 	ldw	r4,-12(fp)
     614:	180d883a 	mov	r6,r3
     618:	100f883a 	mov	r7,r2
     61c:	0002c540 	call	2c54 <VGA_box>
		boven--;
     620:	e0bffc17 	ldw	r2,-16(fp)
     624:	10bfffc4 	addi	r2,r2,-1
     628:	e0bffc15 	stw	r2,-16(fp)
int moveUp(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven >= 4 && boven <= 184) {
     62c:	00001006 	br	670 <moveUp+0xe8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
		boven--;
	} else if (boven > 184) {
     630:	e0bffc17 	ldw	r2,-16(fp)
     634:	10802e50 	cmplti	r2,r2,185
     638:	10000d1e 	bne	r2,zero,670 <moveUp+0xe8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
     63c:	e0bffd17 	ldw	r2,-12(fp)
     640:	11800144 	addi	r6,r2,5
     644:	e0bffc17 	ldw	r2,-16(fp)
     648:	10c00044 	addi	r3,r2,1
     64c:	00803fc4 	movi	r2,255
     650:	d8800015 	stw	r2,0(sp)
     654:	e13ffd17 	ldw	r4,-12(fp)
     658:	e17ffc17 	ldw	r5,-16(fp)
     65c:	180f883a 	mov	r7,r3
     660:	0002c540 	call	2c54 <VGA_box>
		boven--;
     664:	e0bffc17 	ldw	r2,-16(fp)
     668:	10bfffc4 	addi	r2,r2,-1
     66c:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     670:	e0bffc17 	ldw	r2,-16(fp)

}
     674:	e037883a 	mov	sp,fp
     678:	dfc00117 	ldw	ra,4(sp)
     67c:	df000017 	ldw	fp,0(sp)
     680:	dec00204 	addi	sp,sp,8
     684:	f800283a 	ret

00000688 <moveDown>:
int moveDown(int ID, int current) {
     688:	defff904 	addi	sp,sp,-28
     68c:	dfc00615 	stw	ra,24(sp)
     690:	df000515 	stw	fp,20(sp)
     694:	df000504 	addi	fp,sp,20
     698:	e13ffe15 	stw	r4,-8(fp)
     69c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     6a0:	e0bfff17 	ldw	r2,-4(fp)
     6a4:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     6a8:	e13ffe17 	ldw	r4,-8(fp)
     6ac:	000053c0 	call	53c <checkID>
     6b0:	e0bffd15 	stw	r2,-12(fp)

	if (boven <= 184 && boven >= 4) {
     6b4:	e0bffc17 	ldw	r2,-16(fp)
     6b8:	10802e48 	cmpgei	r2,r2,185
     6bc:	10001c1e 	bne	r2,zero,730 <moveDown+0xa8>
     6c0:	e0bffc17 	ldw	r2,-16(fp)
     6c4:	10800110 	cmplti	r2,r2,4
     6c8:	1000191e 	bne	r2,zero,730 <moveDown+0xa8>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
     6cc:	e0bffc17 	ldw	r2,-16(fp)
     6d0:	11400c84 	addi	r5,r2,50
     6d4:	e0bffd17 	ldw	r2,-12(fp)
     6d8:	11800144 	addi	r6,r2,5
     6dc:	e0bffc17 	ldw	r2,-16(fp)
     6e0:	10c00cc4 	addi	r3,r2,51
     6e4:	00803fc4 	movi	r2,255
     6e8:	d8800015 	stw	r2,0(sp)
     6ec:	e13ffd17 	ldw	r4,-12(fp)
     6f0:	180f883a 	mov	r7,r3
     6f4:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, boven, X + 5, boven + 1, 0);
     6f8:	e0bffd17 	ldw	r2,-12(fp)
     6fc:	10c00144 	addi	r3,r2,5
     700:	e0bffc17 	ldw	r2,-16(fp)
     704:	10800044 	addi	r2,r2,1
     708:	d8000015 	stw	zero,0(sp)
     70c:	e13ffd17 	ldw	r4,-12(fp)
     710:	e17ffc17 	ldw	r5,-16(fp)
     714:	180d883a 	mov	r6,r3
     718:	100f883a 	mov	r7,r2
     71c:	0002c540 	call	2c54 <VGA_box>
		boven++;
     720:	e0bffc17 	ldw	r2,-16(fp)
     724:	10800044 	addi	r2,r2,1
     728:	e0bffc15 	stw	r2,-16(fp)
int moveDown(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven <= 184 && boven >= 4) {
     72c:	00001106 	br	774 <moveDown+0xec>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
		VGA_box(X, boven, X + 5, boven + 1, 0);
		boven++;
	} else if (boven < 4) {
     730:	e0bffc17 	ldw	r2,-16(fp)
     734:	10800108 	cmpgei	r2,r2,4
     738:	10000e1e 	bne	r2,zero,774 <moveDown+0xec>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
     73c:	e0bffc17 	ldw	r2,-16(fp)
     740:	11400c84 	addi	r5,r2,50
     744:	e0bffd17 	ldw	r2,-12(fp)
     748:	11800144 	addi	r6,r2,5
     74c:	e0bffc17 	ldw	r2,-16(fp)
     750:	10c00cc4 	addi	r3,r2,51
     754:	00803fc4 	movi	r2,255
     758:	d8800015 	stw	r2,0(sp)
     75c:	e13ffd17 	ldw	r4,-12(fp)
     760:	180f883a 	mov	r7,r3
     764:	0002c540 	call	2c54 <VGA_box>
		boven++;
     768:	e0bffc17 	ldw	r2,-16(fp)
     76c:	10800044 	addi	r2,r2,1
     770:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     774:	e0bffc17 	ldw	r2,-16(fp)

}
     778:	e037883a 	mov	sp,fp
     77c:	dfc00117 	ldw	ra,4(sp)
     780:	df000017 	ldw	fp,0(sp)
     784:	dec00204 	addi	sp,sp,8
     788:	f800283a 	ret

0000078c <Game>:

typedef struct balk {
	int Hoogte;
} Balk;

void Game(void* pdata) {
     78c:	defff604 	addi	sp,sp,-40
     790:	dfc00915 	stw	ra,36(sp)
     794:	df000815 	stw	fp,32(sp)
     798:	df000804 	addi	fp,sp,32
     79c:	e13ffd15 	stw	r4,-12(fp)


	ALT_x1 = 0;
     7a0:	d0282315 	stw	zero,-24436(gp)
	ALT_x2 = 165;
     7a4:	00802944 	movi	r2,165
     7a8:	d0a82515 	stw	r2,-24428(gp)
	ALT_y = 100;
     7ac:	00801904 	movi	r2,100
     7b0:	d0a82015 	stw	r2,-24448(gp)
	ALT_inc_x = 1;
     7b4:	00800044 	movi	r2,1
     7b8:	d0a82415 	stw	r2,-24432(gp)
	ALT_inc_y = 1;
     7bc:	00800044 	movi	r2,1
     7c0:	d0a82115 	stw	r2,-24444(gp)

	pixel_buffer_x = 319;
     7c4:	00804fc4 	movi	r2,319
     7c8:	d0a81e15 	stw	r2,-24456(gp)
	pixel_buffer_y = 230;
     7cc:	00803984 	movi	r2,230
     7d0:	d0a81c15 	stw	r2,-24464(gp)
	int ID;
	int count;
	Balk * balkje;
	Balk * balkje2;
	
	VGA_box (316, 5, 319, 235, zwart); 					// singleplayer balk weghalen voor de zekerheid
     7d4:	d8000015 	stw	zero,0(sp)
     7d8:	01004f04 	movi	r4,316
     7dc:	01400144 	movi	r5,5
     7e0:	01804fc4 	movi	r6,319
     7e4:	01c03ac4 	movi	r7,235
     7e8:	0002c540 	call	2c54 <VGA_box>
	//char_buffer_x = 79; char_buffer_y = 59;

	//blue_x1 = 28; blue_x2 = 52; blue_y1 = 26; blue_y2 = 34;

	while (1) {
		OSFlagPend(Flags_Games, Game_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     7ec:	d0e81517 	ldw	r3,-24492(gp)
     7f0:	e0bffc04 	addi	r2,fp,-16
     7f4:	d8800015 	stw	r2,0(sp)
     7f8:	1809883a 	mov	r4,r3
     7fc:	01400084 	movi	r5,2
     800:	01800044 	movi	r6,1
     804:	000f883a 	mov	r7,zero
     808:	001633c0 	call	1633c <OSFlagPend>

		//printf("Game flag is set\n");

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
     80c:	d0e81817 	ldw	r3,-24480(gp)
     810:	e0bffc04 	addi	r2,fp,-16
     814:	1809883a 	mov	r4,r3
     818:	000b883a 	mov	r5,zero
     81c:	100d883a 	mov	r6,r2
     820:	00176340 	call	17634 <OSMboxPend>
     824:	e0bffa15 	stw	r2,-24(fp)
		balkje2 = (Balk*) OSMboxPend(MailBox2, 0, &err);
     828:	d0e81617 	ldw	r3,-24488(gp)
     82c:	e0bffc04 	addi	r2,fp,-16
     830:	1809883a 	mov	r4,r3
     834:	000b883a 	mov	r5,zero
     838:	100d883a 	mov	r6,r2
     83c:	00176340 	call	17634 <OSMboxPend>
     840:	e0bffb15 	stw	r2,-20(fp)



		for (i = 0; i <= 9; i++) {
     844:	e03ff915 	stw	zero,-28(fp)
     848:	00001706 	br	8a8 <Game+0x11c>

			if (score1 == i) {
     84c:	d0e81d17 	ldw	r3,-24460(gp)
     850:	e0bff917 	ldw	r2,-28(fp)
     854:	1880031e 	bne	r3,r2,864 <Game+0xd8>
				draw_number(i, 1);
     858:	e13ff917 	ldw	r4,-28(fp)
     85c:	01400044 	movi	r5,1
     860:	0002ee80 	call	2ee8 <draw_number>
			}
			if (score2 == i) {
     864:	d0e81f17 	ldw	r3,-24452(gp)
     868:	e0bff917 	ldw	r2,-28(fp)
     86c:	1880031e 	bne	r3,r2,87c <Game+0xf0>
				draw_number(i, 3);
     870:	e13ff917 	ldw	r4,-28(fp)
     874:	014000c4 	movi	r5,3
     878:	0002ee80 	call	2ee8 <draw_number>
			}
			if(score1 == 9 || score2 == 9){
     87c:	d0a81d17 	ldw	r2,-24460(gp)
     880:	10800260 	cmpeqi	r2,r2,9
     884:	1000031e 	bne	r2,zero,894 <Game+0x108>
     888:	d0a81f17 	ldw	r2,-24452(gp)
     88c:	10800258 	cmpnei	r2,r2,9
     890:	1000021e 	bne	r2,zero,89c <Game+0x110>
				score1 =0;
     894:	d0281d15 	stw	zero,-24460(gp)
				score2 =0;
     898:	d0281f15 	stw	zero,-24452(gp)
		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
		balkje2 = (Balk*) OSMboxPend(MailBox2, 0, &err);



		for (i = 0; i <= 9; i++) {
     89c:	e0bff917 	ldw	r2,-28(fp)
     8a0:	10800044 	addi	r2,r2,1
     8a4:	e0bff915 	stw	r2,-28(fp)
     8a8:	e0bff917 	ldw	r2,-28(fp)
     8ac:	10800290 	cmplti	r2,r2,10
     8b0:	103fe61e 	bne	r2,zero,84c <__alt_mem_Flash_flash_data+0xf400084c>
				score1 =0;
				score2 =0;

			}
		}
		draw_middenlijn();
     8b4:	0002d980 	call	2d98 <draw_middenlijn>
		if (check == 1) {
     8b8:	d0a00117 	ldw	r2,-32764(gp)
     8bc:	10800058 	cmpnei	r2,r2,1
     8c0:	1000181e 	bne	r2,zero,924 <Game+0x198>
			del_middenlijn();
     8c4:	0002e000 	call	2e00 <del_middenlijn>
			VGA_text(20, 20, "Houdt de knop ingedrukt om te spelen");
     8c8:	01000504 	movi	r4,20
     8cc:	01400504 	movi	r5,20
     8d0:	018000b4 	movhi	r6,2
     8d4:	31bf8604 	addi	r6,r6,-488
     8d8:	0002d080 	call	2d08 <VGA_text>
			OSTimeDlyHMSM(0, 1, 0, 0);
     8dc:	0009883a 	mov	r4,zero
     8e0:	01400044 	movi	r5,1
     8e4:	000d883a 	mov	r6,zero
     8e8:	000f883a 	mov	r7,zero
     8ec:	001bc980 	call	1bc98 <OSTimeDlyHMSM>
			VGA_text(20, 20, "                                    ");
     8f0:	01000504 	movi	r4,20
     8f4:	01400504 	movi	r5,20
     8f8:	018000b4 	movhi	r6,2
     8fc:	31bf9004 	addi	r6,r6,-448
     900:	0002d080 	call	2d08 <VGA_text>

			del_number(1);
     904:	01000044 	movi	r4,1
     908:	0002e3c0 	call	2e3c <del_number>
			del_number(2);
     90c:	01000084 	movi	r4,2
     910:	0002e3c0 	call	2e3c <del_number>

			score1 = 0;
     914:	d0281d15 	stw	zero,-24460(gp)
			score2 = 0;
     918:	d0281f15 	stw	zero,-24452(gp)

			i = 0;
     91c:	e03ff915 	stw	zero,-28(fp)

			check = 0;
     920:	d0200115 	stw	zero,-32764(gp)
		}

		if (controller(3) == 1) {
     924:	010000c4 	movi	r4,3
     928:	000039c0 	call	39c <controller>
     92c:	10800058 	cmpnei	r2,r2,1
     930:	1000a41e 	bne	r2,zero,bc4 <Game+0x438>

			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     934:	d1282317 	ldw	r4,-24436(gp)
     938:	d1682017 	ldw	r5,-24448(gp)
     93c:	d0a82317 	ldw	r2,-24436(gp)
     940:	10c00144 	addi	r3,r2,5
     944:	d0a82017 	ldw	r2,-24448(gp)
     948:	10800144 	addi	r2,r2,5
     94c:	d8000015 	stw	zero,0(sp)
     950:	180d883a 	mov	r6,r3
     954:	100f883a 	mov	r7,r2
     958:	0002c540 	call	2c54 <VGA_box>
			if (first == 1) {
     95c:	d0a00017 	ldw	r2,-32768(gp)
     960:	10800058 	cmpnei	r2,r2,1
     964:	10000f1e 	bne	r2,zero,9a4 <Game+0x218>
				ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
     968:	d0a82317 	ldw	r2,-24436(gp)
     96c:	10c02804 	addi	r3,r2,160
     970:	d0a82417 	ldw	r2,-24432(gp)
     974:	1885883a 	add	r2,r3,r2
     978:	d0a82315 	stw	r2,-24436(gp)
				ALT_x2 += ALT_inc_x;
     97c:	d0e82517 	ldw	r3,-24428(gp)
     980:	d0a82417 	ldw	r2,-24432(gp)
     984:	1885883a 	add	r2,r3,r2
     988:	d0a82515 	stw	r2,-24428(gp)
				ALT_y += ALT_inc_y;
     98c:	d0e82017 	ldw	r3,-24448(gp)
     990:	d0a82117 	ldw	r2,-24444(gp)
     994:	1885883a 	add	r2,r3,r2
     998:	d0a82015 	stw	r2,-24448(gp)
				first = 0;
     99c:	d0200015 	stw	zero,-32768(gp)
     9a0:	00000c06 	br	9d4 <Game+0x248>
			} else {
				ALT_x1 += ALT_inc_x;
     9a4:	d0e82317 	ldw	r3,-24436(gp)
     9a8:	d0a82417 	ldw	r2,-24432(gp)
     9ac:	1885883a 	add	r2,r3,r2
     9b0:	d0a82315 	stw	r2,-24436(gp)
				ALT_x2 += ALT_inc_x;
     9b4:	d0e82517 	ldw	r3,-24428(gp)
     9b8:	d0a82417 	ldw	r2,-24432(gp)
     9bc:	1885883a 	add	r2,r3,r2
     9c0:	d0a82515 	stw	r2,-24428(gp)
				ALT_y += ALT_inc_y;
     9c4:	d0e82017 	ldw	r3,-24448(gp)
     9c8:	d0a82117 	ldw	r2,-24444(gp)
     9cc:	1885883a 	add	r2,r3,r2
     9d0:	d0a82015 	stw	r2,-24448(gp)
			}
			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
     9d4:	d1282317 	ldw	r4,-24436(gp)
     9d8:	d1682017 	ldw	r5,-24448(gp)
     9dc:	d0a82317 	ldw	r2,-24436(gp)
     9e0:	11800144 	addi	r6,r2,5
     9e4:	d0a82017 	ldw	r2,-24448(gp)
     9e8:	10c00144 	addi	r3,r2,5
     9ec:	00804034 	movhi	r2,256
     9f0:	10bfffc4 	addi	r2,r2,-1
     9f4:	d8800015 	stw	r2,0(sp)
     9f8:	180f883a 	mov	r7,r3
     9fc:	0002c540 	call	2c54 <VGA_box>

			//collision rand boven en onder
			if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
     a00:	d0e82017 	ldw	r3,-24448(gp)
     a04:	d0a81c17 	ldw	r2,-24464(gp)
     a08:	18800326 	beq	r3,r2,a18 <Game+0x28c>
     a0c:	d0a82017 	ldw	r2,-24448(gp)
     a10:	10800118 	cmpnei	r2,r2,4
     a14:	1000031e 	bne	r2,zero,a24 <Game+0x298>
				ALT_inc_y = -(ALT_inc_y);
     a18:	d0a82117 	ldw	r2,-24444(gp)
     a1c:	0085c83a 	sub	r2,zero,r2
     a20:	d0a82115 	stw	r2,-24444(gp)
			if ((ALT_x2 == pixel_buffer_x) || (ALT_x1 == 0)) {
				//ALT_inc_x = -(ALT_inc_x);
			}

			//links dood
			if (ALT_x1 == 0) {
     a24:	d0a82317 	ldw	r2,-24436(gp)
     a28:	1000071e 	bne	r2,zero,a48 <Game+0x2bc>
				score2++;
     a2c:	d0a81f17 	ldw	r2,-24452(gp)
     a30:	10800044 	addi	r2,r2,1
     a34:	d0a81f15 	stw	r2,-24452(gp)
				gescoord(2);
     a38:	01000084 	movi	r4,2
     a3c:	0000c180 	call	c18 <gescoord>
				del_number(2);
     a40:	01000084 	movi	r4,2
     a44:	0002e3c0 	call	2e3c <del_number>
			}

			//rechts dood
			if (ALT_x2 == pixel_buffer_x) {
     a48:	d0e82517 	ldw	r3,-24428(gp)
     a4c:	d0a81e17 	ldw	r2,-24456(gp)
     a50:	1880071e 	bne	r3,r2,a70 <Game+0x2e4>
				score1++;
     a54:	d0a81d17 	ldw	r2,-24460(gp)
     a58:	10800044 	addi	r2,r2,1
     a5c:	d0a81d15 	stw	r2,-24460(gp)
				gescoord(1);
     a60:	01000044 	movi	r4,1
     a64:	0000c180 	call	c18 <gescoord>
				del_number(1);
     a68:	01000044 	movi	r4,1
     a6c:	0002e3c0 	call	2e3c <del_number>
			}

			//collision linker balkje
			//lange zijde
			if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte - 6 && ALT_y < balkje->Hoogte + 50)){
     a70:	d0a82317 	ldw	r2,-24436(gp)
     a74:	10800558 	cmpnei	r2,r2,21
     a78:	10000d1e 	bne	r2,zero,ab0 <Game+0x324>
     a7c:	e0bffa17 	ldw	r2,-24(fp)
     a80:	10800017 	ldw	r2,0(r2)
     a84:	10fffe84 	addi	r3,r2,-6
     a88:	d0a82017 	ldw	r2,-24448(gp)
     a8c:	1880080e 	bge	r3,r2,ab0 <Game+0x324>
     a90:	e0bffa17 	ldw	r2,-24(fp)
     a94:	10800017 	ldw	r2,0(r2)
     a98:	10800c84 	addi	r2,r2,50
     a9c:	d0e82017 	ldw	r3,-24448(gp)
     aa0:	1880030e 	bge	r3,r2,ab0 <Game+0x324>
				ALT_inc_x = -(ALT_inc_x);
     aa4:	d0a82417 	ldw	r2,-24432(gp)
     aa8:	0085c83a 	sub	r2,zero,r2
     aac:	d0a82415 	stw	r2,-24432(gp)
			}
			//boven
			if(((ALT_x1 <= 20 && ALT_x1 >= 15) && ALT_y == balkje->Hoogte - 6) || ((ALT_x1 <= 20 && ALT_x1 >= 15) && ALT_y == balkje->Hoogte + 50)){
     ab0:	d0a82317 	ldw	r2,-24436(gp)
     ab4:	10800548 	cmpgei	r2,r2,21
     ab8:	1000081e 	bne	r2,zero,adc <Game+0x350>
     abc:	d0a82317 	ldw	r2,-24436(gp)
     ac0:	108003d0 	cmplti	r2,r2,15
     ac4:	1000051e 	bne	r2,zero,adc <Game+0x350>
     ac8:	e0bffa17 	ldw	r2,-24(fp)
     acc:	10800017 	ldw	r2,0(r2)
     ad0:	10fffe84 	addi	r3,r2,-6
     ad4:	d0a82017 	ldw	r2,-24448(gp)
     ad8:	18800b26 	beq	r3,r2,b08 <Game+0x37c>
     adc:	d0a82317 	ldw	r2,-24436(gp)
     ae0:	10800548 	cmpgei	r2,r2,21
     ae4:	10000b1e 	bne	r2,zero,b14 <Game+0x388>
     ae8:	d0a82317 	ldw	r2,-24436(gp)
     aec:	108003d0 	cmplti	r2,r2,15
     af0:	1000081e 	bne	r2,zero,b14 <Game+0x388>
     af4:	e0bffa17 	ldw	r2,-24(fp)
     af8:	10800017 	ldw	r2,0(r2)
     afc:	10c00c84 	addi	r3,r2,50
     b00:	d0a82017 	ldw	r2,-24448(gp)
     b04:	1880031e 	bne	r3,r2,b14 <Game+0x388>
				ALT_inc_y = -(ALT_inc_y);
     b08:	d0a82117 	ldw	r2,-24444(gp)
     b0c:	0085c83a 	sub	r2,zero,r2
     b10:	d0a82115 	stw	r2,-24444(gp)
			}

			//collision rechter balkje
			//lange zijde
			if(ALT_x2 == 299 && (ALT_y > balkje2->Hoogte - 6 && ALT_y < balkje2->Hoogte + 50)){
     b14:	d0a82517 	ldw	r2,-24428(gp)
     b18:	10804ad8 	cmpnei	r2,r2,299
     b1c:	10000d1e 	bne	r2,zero,b54 <Game+0x3c8>
     b20:	e0bffb17 	ldw	r2,-20(fp)
     b24:	10800017 	ldw	r2,0(r2)
     b28:	10fffe84 	addi	r3,r2,-6
     b2c:	d0a82017 	ldw	r2,-24448(gp)
     b30:	1880080e 	bge	r3,r2,b54 <Game+0x3c8>
     b34:	e0bffb17 	ldw	r2,-20(fp)
     b38:	10800017 	ldw	r2,0(r2)
     b3c:	10800c84 	addi	r2,r2,50
     b40:	d0e82017 	ldw	r3,-24448(gp)
     b44:	1880030e 	bge	r3,r2,b54 <Game+0x3c8>
				ALT_inc_x = -(ALT_inc_x);
     b48:	d0a82417 	ldw	r2,-24432(gp)
     b4c:	0085c83a 	sub	r2,zero,r2
     b50:	d0a82415 	stw	r2,-24432(gp)
			}
			//boven
			if(((ALT_x2 <= 305 && ALT_x2 >= 300) && ALT_y == balkje2->Hoogte - 6) || ((ALT_x2 <= 305 && ALT_x2 >= 300) && ALT_y == balkje2->Hoogte + 50)){
     b54:	d0a82517 	ldw	r2,-24428(gp)
     b58:	10804c88 	cmpgei	r2,r2,306
     b5c:	1000081e 	bne	r2,zero,b80 <Game+0x3f4>
     b60:	d0a82517 	ldw	r2,-24428(gp)
     b64:	10804b10 	cmplti	r2,r2,300
     b68:	1000051e 	bne	r2,zero,b80 <Game+0x3f4>
     b6c:	e0bffb17 	ldw	r2,-20(fp)
     b70:	10800017 	ldw	r2,0(r2)
     b74:	10fffe84 	addi	r3,r2,-6
     b78:	d0a82017 	ldw	r2,-24448(gp)
     b7c:	18800b26 	beq	r3,r2,bac <Game+0x420>
     b80:	d0a82517 	ldw	r2,-24428(gp)
     b84:	10804c88 	cmpgei	r2,r2,306
     b88:	10000b1e 	bne	r2,zero,bb8 <Game+0x42c>
     b8c:	d0a82517 	ldw	r2,-24428(gp)
     b90:	10804b10 	cmplti	r2,r2,300
     b94:	1000081e 	bne	r2,zero,bb8 <Game+0x42c>
     b98:	e0bffb17 	ldw	r2,-20(fp)
     b9c:	10800017 	ldw	r2,0(r2)
     ba0:	10c00c84 	addi	r3,r2,50
     ba4:	d0a82017 	ldw	r2,-24448(gp)
     ba8:	1880031e 	bne	r3,r2,bb8 <Game+0x42c>
				ALT_inc_y = -(ALT_inc_y);
     bac:	d0a82117 	ldw	r2,-24444(gp)
     bb0:	0085c83a 	sub	r2,zero,r2
     bb4:	d0a82115 	stw	r2,-24444(gp)
			}



			OSTimeDly(1);
     bb8:	01000044 	movi	r4,1
     bbc:	001bb500 	call	1bb50 <OSTimeDly>
     bc0:	00001406 	br	c14 <Game+0x488>

		} else if (controller(3) == 2) {
     bc4:	010000c4 	movi	r4,3
     bc8:	000039c0 	call	39c <controller>
     bcc:	10800098 	cmpnei	r2,r2,2
     bd0:	1000031e 	bne	r2,zero,be0 <Game+0x454>
			//links
			endGame(2);
     bd4:	01000084 	movi	r4,2
     bd8:	0000e3c0 	call	e3c <endGame>
     bdc:	00000d06 	br	c14 <Game+0x488>
		}else if(controller(3) == 3){
     be0:	010000c4 	movi	r4,3
     be4:	000039c0 	call	39c <controller>
     be8:	108000d8 	cmpnei	r2,r2,3
     bec:	1000031e 	bne	r2,zero,bfc <Game+0x470>
			//rechts
			endGame(1);
     bf0:	01000044 	movi	r4,1
     bf4:	0000e3c0 	call	e3c <endGame>
     bf8:	00000606 	br	c14 <Game+0x488>
		} else if(controller(2) != 2){
     bfc:	01000084 	movi	r4,2
     c00:	000039c0 	call	39c <controller>
     c04:	108000a0 	cmpeqi	r2,r2,2
     c08:	1000021e 	bne	r2,zero,c14 <Game+0x488>
			endGame(1);
     c0c:	01000044 	movi	r4,1
     c10:	0000e3c0 	call	e3c <endGame>
		}

	}
     c14:	003ef506 	br	7ec <__alt_mem_Flash_flash_data+0xf40007ec>

00000c18 <gescoord>:
}

void gescoord(int ID){
     c18:	defffc04 	addi	sp,sp,-16
     c1c:	dfc00315 	stw	ra,12(sp)
     c20:	df000215 	stw	fp,8(sp)
     c24:	df000204 	addi	fp,sp,8
     c28:	e13fff15 	stw	r4,-4(fp)

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     c2c:	d1282317 	ldw	r4,-24436(gp)
     c30:	d1682017 	ldw	r5,-24448(gp)
     c34:	d0a82317 	ldw	r2,-24436(gp)
     c38:	10c00144 	addi	r3,r2,5
     c3c:	d0a82017 	ldw	r2,-24448(gp)
     c40:	10800144 	addi	r2,r2,5
     c44:	d8000015 	stw	zero,0(sp)
     c48:	180d883a 	mov	r6,r3
     c4c:	100f883a 	mov	r7,r2
     c50:	0002c540 	call	2c54 <VGA_box>

	first = 1;
     c54:	00800044 	movi	r2,1
     c58:	d0a00015 	stw	r2,-32768(gp)

	if(ID == 1){
     c5c:	e0bfff17 	ldw	r2,-4(fp)
     c60:	10800058 	cmpnei	r2,r2,1
     c64:	1000221e 	bne	r2,zero,cf0 <gescoord+0xd8>
		VGA_text(30, 25, "Speler 1 heeft gescoord!");
     c68:	01000784 	movi	r4,30
     c6c:	01400644 	movi	r5,25
     c70:	018000b4 	movhi	r6,2
     c74:	31bf9a04 	addi	r6,r6,-408
     c78:	0002d080 	call	2d08 <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     c7c:	0009883a 	mov	r4,zero
     c80:	000b883a 	mov	r5,zero
     c84:	018008c4 	movi	r6,35
     c88:	000f883a 	mov	r7,zero
     c8c:	001bc980 	call	1bc98 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                        ");
     c90:	01000784 	movi	r4,30
     c94:	01400644 	movi	r5,25
     c98:	018000b4 	movhi	r6,2
     c9c:	31bfa104 	addi	r6,r6,-380
     ca0:	0002d080 	call	2d08 <VGA_text>
		ALT_x1 = 0;
     ca4:	d0282315 	stw	zero,-24436(gp)
		ALT_x2 = 165;
     ca8:	00802944 	movi	r2,165
     cac:	d0a82515 	stw	r2,-24428(gp)
		ALT_y = 100;
     cb0:	00801904 	movi	r2,100
     cb4:	d0a82015 	stw	r2,-24448(gp)
		ALT_inc_x = -1;
     cb8:	00bfffc4 	movi	r2,-1
     cbc:	d0a82415 	stw	r2,-24432(gp)
		if(random == 1){
     cc0:	d0a81b17 	ldw	r2,-24468(gp)
     cc4:	10800058 	cmpnei	r2,r2,1
     cc8:	1000031e 	bne	r2,zero,cd8 <gescoord+0xc0>
			ALT_inc_y = -1;
     ccc:	00bfffc4 	movi	r2,-1
     cd0:	d0a82115 	stw	r2,-24444(gp)
     cd4:	00000506 	br	cec <gescoord+0xd4>
			random == 0;
		}else if(random == 0){
     cd8:	d0a81b17 	ldw	r2,-24468(gp)
     cdc:	1000031e 	bne	r2,zero,cec <gescoord+0xd4>
			ALT_inc_y = 1;
     ce0:	00800044 	movi	r2,1
     ce4:	d0a82115 	stw	r2,-24444(gp)
     ce8:	00004f06 	br	e28 <gescoord+0x210>
     cec:	00004e06 	br	e28 <gescoord+0x210>
			random == 1;
		}
	}else if(ID == 2){
     cf0:	e0bfff17 	ldw	r2,-4(fp)
     cf4:	10800098 	cmpnei	r2,r2,2
     cf8:	1000251e 	bne	r2,zero,d90 <gescoord+0x178>
		VGA_text(30, 25, "Speler 2 heeft gescoord!");
     cfc:	01000784 	movi	r4,30
     d00:	01400644 	movi	r5,25
     d04:	018000b4 	movhi	r6,2
     d08:	31bfa804 	addi	r6,r6,-352
     d0c:	0002d080 	call	2d08 <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     d10:	0009883a 	mov	r4,zero
     d14:	000b883a 	mov	r5,zero
     d18:	018008c4 	movi	r6,35
     d1c:	000f883a 	mov	r7,zero
     d20:	001bc980 	call	1bc98 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                        ");
     d24:	01000784 	movi	r4,30
     d28:	01400644 	movi	r5,25
     d2c:	018000b4 	movhi	r6,2
     d30:	31bfa104 	addi	r6,r6,-380
     d34:	0002d080 	call	2d08 <VGA_text>
		ALT_x1 = 0;
     d38:	d0282315 	stw	zero,-24436(gp)
		ALT_x2 = 165;
     d3c:	00802944 	movi	r2,165
     d40:	d0a82515 	stw	r2,-24428(gp)
		ALT_y = 100;
     d44:	00801904 	movi	r2,100
     d48:	d0a82015 	stw	r2,-24448(gp)
		ALT_inc_x = 1;
     d4c:	00800044 	movi	r2,1
     d50:	d0a82415 	stw	r2,-24432(gp)
		if(random == 1){
     d54:	d0a81b17 	ldw	r2,-24468(gp)
     d58:	10800058 	cmpnei	r2,r2,1
     d5c:	1000041e 	bne	r2,zero,d70 <gescoord+0x158>
			ALT_inc_y = 1;
     d60:	00800044 	movi	r2,1
     d64:	d0a82115 	stw	r2,-24444(gp)
			random = 0;
     d68:	d0281b15 	stw	zero,-24468(gp)
     d6c:	00000706 	br	d8c <gescoord+0x174>
		}else if(random == 0){
     d70:	d0a81b17 	ldw	r2,-24468(gp)
     d74:	1000051e 	bne	r2,zero,d8c <gescoord+0x174>
			ALT_inc_y = -1;
     d78:	00bfffc4 	movi	r2,-1
     d7c:	d0a82115 	stw	r2,-24444(gp)
			random = 1;
     d80:	00800044 	movi	r2,1
     d84:	d0a81b15 	stw	r2,-24468(gp)
     d88:	00002706 	br	e28 <gescoord+0x210>
     d8c:	00002606 	br	e28 <gescoord+0x210>
		}
	}else if(ID == 3){
     d90:	e0bfff17 	ldw	r2,-4(fp)
     d94:	108000d8 	cmpnei	r2,r2,3
     d98:	1000231e 	bne	r2,zero,e28 <gescoord+0x210>
		VGA_text(30, 25, "De computer heeft gescoord!");
     d9c:	01000784 	movi	r4,30
     da0:	01400644 	movi	r5,25
     da4:	018000b4 	movhi	r6,2
     da8:	31bfaf04 	addi	r6,r6,-324
     dac:	0002d080 	call	2d08 <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     db0:	0009883a 	mov	r4,zero
     db4:	000b883a 	mov	r5,zero
     db8:	018008c4 	movi	r6,35
     dbc:	000f883a 	mov	r7,zero
     dc0:	001bc980 	call	1bc98 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                           ");
     dc4:	01000784 	movi	r4,30
     dc8:	01400644 	movi	r5,25
     dcc:	018000b4 	movhi	r6,2
     dd0:	31bfb604 	addi	r6,r6,-296
     dd4:	0002d080 	call	2d08 <VGA_text>
		ALT_x1 = 0;
     dd8:	d0282315 	stw	zero,-24436(gp)
		ALT_x2 = 165;
     ddc:	00802944 	movi	r2,165
     de0:	d0a82515 	stw	r2,-24428(gp)
		ALT_y = 100;
     de4:	00801904 	movi	r2,100
     de8:	d0a82015 	stw	r2,-24448(gp)
		ALT_inc_x = -1;
     dec:	00bfffc4 	movi	r2,-1
     df0:	d0a82415 	stw	r2,-24432(gp)
		if(random == 1){
     df4:	d0a81b17 	ldw	r2,-24468(gp)
     df8:	10800058 	cmpnei	r2,r2,1
     dfc:	1000041e 	bne	r2,zero,e10 <gescoord+0x1f8>
			ALT_inc_y = 1;
     e00:	00800044 	movi	r2,1
     e04:	d0a82115 	stw	r2,-24444(gp)
			random = 0;
     e08:	d0281b15 	stw	zero,-24468(gp)
     e0c:	00000606 	br	e28 <gescoord+0x210>
		}else if(random == 0){
     e10:	d0a81b17 	ldw	r2,-24468(gp)
     e14:	1000041e 	bne	r2,zero,e28 <gescoord+0x210>
			ALT_inc_y = -1;
     e18:	00bfffc4 	movi	r2,-1
     e1c:	d0a82115 	stw	r2,-24444(gp)
			random = 1;
     e20:	00800044 	movi	r2,1
     e24:	d0a81b15 	stw	r2,-24468(gp)
		}
	}

}
     e28:	e037883a 	mov	sp,fp
     e2c:	dfc00117 	ldw	ra,4(sp)
     e30:	df000017 	ldw	fp,0(sp)
     e34:	dec00204 	addi	sp,sp,8
     e38:	f800283a 	ret

00000e3c <endGame>:

void endGame(int ID) {
     e3c:	defffb04 	addi	sp,sp,-20
     e40:	dfc00415 	stw	ra,16(sp)
     e44:	df000315 	stw	fp,12(sp)
     e48:	df000304 	addi	fp,sp,12
     e4c:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	printf("end game\n");
     e50:	010000b4 	movhi	r4,2
     e54:	213fbd04 	addi	r4,r4,-268
     e58:	00036cc0 	call	36cc <puts>

	clearScreen();
     e5c:	00027140 	call	2714 <clearScreen>

	OSFlagPost(Flags, C1_Flag + C2_Flag, OS_FLAG_SET, &err);
     e60:	d0a81717 	ldw	r2,-24484(gp)
     e64:	1009883a 	mov	r4,r2
     e68:	01400304 	movi	r5,12
     e6c:	01800044 	movi	r6,1
     e70:	e1fffe04 	addi	r7,fp,-8
     e74:	00169940 	call	16994 <OSFlagPost>
	OSFlagPost(Flags_Games, Game_Flag, OS_FLAG_SET, &err);
     e78:	d0a81517 	ldw	r2,-24492(gp)
     e7c:	1009883a 	mov	r4,r2
     e80:	01400084 	movi	r5,2
     e84:	01800044 	movi	r6,1
     e88:	e1fffe04 	addi	r7,fp,-8
     e8c:	00169940 	call	16994 <OSFlagPost>


	if(ID == 1){
     e90:	e0bfff17 	ldw	r2,-4(fp)
     e94:	10800058 	cmpnei	r2,r2,1
     e98:	1000101e 	bne	r2,zero,edc <endGame+0xa0>
		VGA_text(35, 25, "Player 1 lost");
     e9c:	010008c4 	movi	r4,35
     ea0:	01400644 	movi	r5,25
     ea4:	018000b4 	movhi	r6,2
     ea8:	31bfc004 	addi	r6,r6,-256
     eac:	0002d080 	call	2d08 <VGA_text>
		OSTimeDlyHMSM(0, 0, 40, 0);
     eb0:	0009883a 	mov	r4,zero
     eb4:	000b883a 	mov	r5,zero
     eb8:	01800a04 	movi	r6,40
     ebc:	000f883a 	mov	r7,zero
     ec0:	001bc980 	call	1bc98 <OSTimeDlyHMSM>
		VGA_text(35, 25, "             ");
     ec4:	010008c4 	movi	r4,35
     ec8:	01400644 	movi	r5,25
     ecc:	018000b4 	movhi	r6,2
     ed0:	31bfc404 	addi	r6,r6,-240
     ed4:	0002d080 	call	2d08 <VGA_text>
     ed8:	00001206 	br	f24 <endGame+0xe8>
	} else if(ID == 2){
     edc:	e0bfff17 	ldw	r2,-4(fp)
     ee0:	10800098 	cmpnei	r2,r2,2
     ee4:	10000f1e 	bne	r2,zero,f24 <endGame+0xe8>
		VGA_text(35, 25, "Player 2 lost");
     ee8:	010008c4 	movi	r4,35
     eec:	01400644 	movi	r5,25
     ef0:	018000b4 	movhi	r6,2
     ef4:	31bfc804 	addi	r6,r6,-224
     ef8:	0002d080 	call	2d08 <VGA_text>
		OSTimeDlyHMSM(0, 0, 40, 0);
     efc:	0009883a 	mov	r4,zero
     f00:	000b883a 	mov	r5,zero
     f04:	01800a04 	movi	r6,40
     f08:	000f883a 	mov	r7,zero
     f0c:	001bc980 	call	1bc98 <OSTimeDlyHMSM>
		VGA_text(35, 25, "             ");
     f10:	010008c4 	movi	r4,35
     f14:	01400644 	movi	r5,25
     f18:	018000b4 	movhi	r6,2
     f1c:	31bfc404 	addi	r6,r6,-240
     f20:	0002d080 	call	2d08 <VGA_text>
	}


	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
     f24:	d0a81717 	ldw	r2,-24484(gp)
     f28:	1009883a 	mov	r4,r2
     f2c:	01400444 	movi	r5,17
     f30:	000d883a 	mov	r6,zero
     f34:	e1fffe04 	addi	r7,fp,-8
     f38:	00169940 	call	16994 <OSFlagPost>

	teken_menu(2);
     f3c:	01000084 	movi	r4,2
     f40:	00028d40 	call	28d4 <teken_menu>
	deleteNummer();
     f44:	0002eac0 	call	2eac <deleteNummer>


	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     f48:	d1282317 	ldw	r4,-24436(gp)
     f4c:	d1682017 	ldw	r5,-24448(gp)
     f50:	d0a82317 	ldw	r2,-24436(gp)
     f54:	10c00144 	addi	r3,r2,5
     f58:	d0a82017 	ldw	r2,-24448(gp)
     f5c:	10800144 	addi	r2,r2,5
     f60:	d8000015 	stw	zero,0(sp)
     f64:	180d883a 	mov	r6,r3
     f68:	100f883a 	mov	r7,r2
     f6c:	0002c540 	call	2c54 <VGA_box>

	ALT_x1 = 0;
     f70:	d0282315 	stw	zero,-24436(gp)
	ALT_x2 = 165;
     f74:	00802944 	movi	r2,165
     f78:	d0a82515 	stw	r2,-24428(gp)
	ALT_y = 100;
     f7c:	00801904 	movi	r2,100
     f80:	d0a82015 	stw	r2,-24448(gp)
	ALT_inc_x = 1;
     f84:	00800044 	movi	r2,1
     f88:	d0a82415 	stw	r2,-24432(gp)
	ALT_inc_y = 1;
     f8c:	00800044 	movi	r2,1
     f90:	d0a82115 	stw	r2,-24444(gp)

	check = 1;
     f94:	00800044 	movi	r2,1
     f98:	d0a00115 	stw	r2,-32764(gp)
	first = 1;
     f9c:	00800044 	movi	r2,1
     fa0:	d0a00015 	stw	r2,-32768(gp)

}
     fa4:	e037883a 	mov	sp,fp
     fa8:	dfc00117 	ldw	ra,4(sp)
     fac:	df000017 	ldw	fp,0(sp)
     fb0:	dec00204 	addi	sp,sp,8
     fb4:	f800283a 	ret

00000fb8 <endSingleplayer>:

void endSingleplayer(){
     fb8:	defffc04 	addi	sp,sp,-16
     fbc:	dfc00315 	stw	ra,12(sp)
     fc0:	df000215 	stw	fp,8(sp)
     fc4:	df000204 	addi	fp,sp,8
	INT8U err;

	printf("end Singleplayer\n");
     fc8:	010000b4 	movhi	r4,2
     fcc:	213fcc04 	addi	r4,r4,-208
     fd0:	00036cc0 	call	36cc <puts>

	//clearScreen();

	OSFlagPost(Flags, C1_Flag, OS_FLAG_SET, &err);
     fd4:	d0a81717 	ldw	r2,-24484(gp)
     fd8:	1009883a 	mov	r4,r2
     fdc:	01400104 	movi	r5,4
     fe0:	01800044 	movi	r6,1
     fe4:	e1ffff04 	addi	r7,fp,-4
     fe8:	00169940 	call	16994 <OSFlagPost>

	VGA_text(35, 25, "GAME OVER");
     fec:	010008c4 	movi	r4,35
     ff0:	01400644 	movi	r5,25
     ff4:	018000b4 	movhi	r6,2
     ff8:	31bfd104 	addi	r6,r6,-188
     ffc:	0002d080 	call	2d08 <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
    1000:	0009883a 	mov	r4,zero
    1004:	000b883a 	mov	r5,zero
    1008:	01800a04 	movi	r6,40
    100c:	000f883a 	mov	r7,zero
    1010:	001bc980 	call	1bc98 <OSTimeDlyHMSM>
	VGA_text(35, 25, "         ");
    1014:	010008c4 	movi	r4,35
    1018:	01400644 	movi	r5,25
    101c:	018000b4 	movhi	r6,2
    1020:	31bfd404 	addi	r6,r6,-176
    1024:	0002d080 	call	2d08 <VGA_text>




	teken_menu(1);
    1028:	01000044 	movi	r4,1
    102c:	00028d40 	call	28d4 <teken_menu>

	VGA_box (316, 4, 319, 235, zwart); 					// singleplayer balk weghalen voor de zekerheid
    1030:	d8000015 	stw	zero,0(sp)
    1034:	01004f04 	movi	r4,316
    1038:	01400104 	movi	r5,4
    103c:	01804fc4 	movi	r6,319
    1040:	01c03ac4 	movi	r7,235
    1044:	0002c540 	call	2c54 <VGA_box>

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1048:	d1282317 	ldw	r4,-24436(gp)
    104c:	d1682017 	ldw	r5,-24448(gp)
    1050:	d0a82317 	ldw	r2,-24436(gp)
    1054:	10c00144 	addi	r3,r2,5
    1058:	d0a82017 	ldw	r2,-24448(gp)
    105c:	10800144 	addi	r2,r2,5
    1060:	d8000015 	stw	zero,0(sp)
    1064:	180d883a 	mov	r6,r3
    1068:	100f883a 	mov	r7,r2
    106c:	0002c540 	call	2c54 <VGA_box>
	deleteNummer();
    1070:	0002eac0 	call	2eac <deleteNummer>


	ALT_x1 = 0;
    1074:	d0282315 	stw	zero,-24436(gp)
	ALT_x2 = 165;
    1078:	00802944 	movi	r2,165
    107c:	d0a82515 	stw	r2,-24428(gp)
	ALT_y = 100;
    1080:	00801904 	movi	r2,100
    1084:	d0a82015 	stw	r2,-24448(gp)
	ALT_inc_x = -1;
    1088:	00bfffc4 	movi	r2,-1
    108c:	d0a82415 	stw	r2,-24432(gp)
	ALT_inc_y = 1;
    1090:	00800044 	movi	r2,1
    1094:	d0a82115 	stw	r2,-24444(gp)

	leven = beginLevens;
    1098:	008000c4 	movi	r2,3
    109c:	d0a00215 	stw	r2,-32760(gp)
	score3 = 0;
    10a0:	d0281a15 	stw	zero,-24472(gp)
	first = 1;
    10a4:	00800044 	movi	r2,1
    10a8:	d0a00015 	stw	r2,-32768(gp)

	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    10ac:	d0a81717 	ldw	r2,-24484(gp)
    10b0:	1009883a 	mov	r4,r2
    10b4:	01400444 	movi	r5,17
    10b8:	000d883a 	mov	r6,zero
    10bc:	e1ffff04 	addi	r7,fp,-4
    10c0:	00169940 	call	16994 <OSFlagPost>

	OSFlagPost(Flags_Games, Singleplayer_Flag + Tutorial_Flag, OS_FLAG_SET, &err);
    10c4:	d0a81517 	ldw	r2,-24492(gp)
    10c8:	1009883a 	mov	r4,r2
    10cc:	01401804 	movi	r5,96
    10d0:	01800044 	movi	r6,1
    10d4:	e1ffff04 	addi	r7,fp,-4
    10d8:	00169940 	call	16994 <OSFlagPost>

}
    10dc:	e037883a 	mov	sp,fp
    10e0:	dfc00117 	ldw	ra,4(sp)
    10e4:	df000017 	ldw	fp,0(sp)
    10e8:	dec00204 	addi	sp,sp,8
    10ec:	f800283a 	ret

000010f0 <Singleplayer>:

void Singleplayer(void* pdata){
    10f0:	defff704 	addi	sp,sp,-36
    10f4:	dfc00815 	stw	ra,32(sp)
    10f8:	df000715 	stw	fp,28(sp)
    10fc:	df000704 	addi	fp,sp,28
    1100:	e13fff15 	stw	r4,-4(fp)
	
	ALT_x1 = 0;
    1104:	d0282315 	stw	zero,-24436(gp)
	ALT_x2 = 165;
    1108:	00802944 	movi	r2,165
    110c:	d0a82515 	stw	r2,-24428(gp)
	ALT_y = 100;
    1110:	00801904 	movi	r2,100
    1114:	d0a82015 	stw	r2,-24448(gp)
	ALT_inc_x = -1;
    1118:	00bfffc4 	movi	r2,-1
    111c:	d0a82415 	stw	r2,-24432(gp)
	ALT_inc_y = 1;
    1120:	00800044 	movi	r2,1
    1124:	d0a82115 	stw	r2,-24444(gp)

	pixel_buffer_x = 315;
    1128:	00804ec4 	movi	r2,315
    112c:	d0a81e15 	stw	r2,-24456(gp)
	pixel_buffer_y = 230;
    1130:	00803984 	movi	r2,230
    1134:	d0a81c15 	stw	r2,-24464(gp)
	int q;
	Balk * balkje;
	
	char levens[10];

	score3 = 0;
    1138:	d0281a15 	stw	zero,-24472(gp)
	

	while (1) {
		OSFlagPend(Flags_Games, Singleplayer_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    113c:	d0e81517 	ldw	r3,-24492(gp)
    1140:	e0bffc04 	addi	r2,fp,-16
    1144:	d8800015 	stw	r2,0(sp)
    1148:	1809883a 	mov	r4,r3
    114c:	01400804 	movi	r5,32
    1150:	000d883a 	mov	r6,zero
    1154:	000f883a 	mov	r7,zero
    1158:	001633c0 	call	1633c <OSFlagPend>

		//printf("Single flag is set\n");

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
    115c:	d0e81817 	ldw	r3,-24480(gp)
    1160:	e0bffc04 	addi	r2,fp,-16
    1164:	1809883a 	mov	r4,r3
    1168:	000b883a 	mov	r5,zero
    116c:	100d883a 	mov	r6,r2
    1170:	00176340 	call	17634 <OSMboxPend>
    1174:	e0bffb15 	stw	r2,-20(fp)
		//printf("ID is: %d\tHoogte is: %d\n", balkje->ID, balkje->Hoogte);




		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1178:	d1282317 	ldw	r4,-24436(gp)
    117c:	d1682017 	ldw	r5,-24448(gp)
    1180:	d0a82317 	ldw	r2,-24436(gp)
    1184:	10c00144 	addi	r3,r2,5
    1188:	d0a82017 	ldw	r2,-24448(gp)
    118c:	10800144 	addi	r2,r2,5
    1190:	d8000015 	stw	zero,0(sp)
    1194:	180d883a 	mov	r6,r3
    1198:	100f883a 	mov	r7,r2
    119c:	0002c540 	call	2c54 <VGA_box>

		if (first == 1) {
    11a0:	d0a00017 	ldw	r2,-32768(gp)
    11a4:	10800058 	cmpnei	r2,r2,1
    11a8:	1000201e 	bne	r2,zero,122c <Singleplayer+0x13c>
			printf("FIRST");
    11ac:	010000b4 	movhi	r4,2
    11b0:	213fd704 	addi	r4,r4,-164
    11b4:	00035e80 	call	35e8 <printf>
			ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
    11b8:	d0a82317 	ldw	r2,-24436(gp)
    11bc:	10c02804 	addi	r3,r2,160
    11c0:	d0a82417 	ldw	r2,-24432(gp)
    11c4:	1885883a 	add	r2,r3,r2
    11c8:	d0a82315 	stw	r2,-24436(gp)
			ALT_x2 += ALT_inc_x;
    11cc:	d0e82517 	ldw	r3,-24428(gp)
    11d0:	d0a82417 	ldw	r2,-24432(gp)
    11d4:	1885883a 	add	r2,r3,r2
    11d8:	d0a82515 	stw	r2,-24428(gp)
			ALT_y += ALT_inc_y;
    11dc:	d0e82017 	ldw	r3,-24448(gp)
    11e0:	d0a82117 	ldw	r2,-24444(gp)
    11e4:	1885883a 	add	r2,r3,r2
    11e8:	d0a82015 	stw	r2,-24448(gp)

			del_middenlijn();
    11ec:	0002e000 	call	2e00 <del_middenlijn>
			VGA_box (316, 0, 319, 239, groen); 					// rechts
    11f0:	0081a5c4 	movi	r2,1687
    11f4:	d8800015 	stw	r2,0(sp)
    11f8:	01004f04 	movi	r4,316
    11fc:	000b883a 	mov	r5,zero
    1200:	01804fc4 	movi	r6,319
    1204:	01c03bc4 	movi	r7,239
    1208:	0002c540 	call	2c54 <VGA_box>
			VGA_box(300, 4, 305, 235, zwart);
    120c:	d8000015 	stw	zero,0(sp)
    1210:	01004b04 	movi	r4,300
    1214:	01400104 	movi	r5,4
    1218:	01804c44 	movi	r6,305
    121c:	01c03ac4 	movi	r7,235
    1220:	0002c540 	call	2c54 <VGA_box>

			first = 0;
    1224:	d0200015 	stw	zero,-32768(gp)
    1228:	00000c06 	br	125c <Singleplayer+0x16c>
		} else {
			ALT_x1 += ALT_inc_x;
    122c:	d0e82317 	ldw	r3,-24436(gp)
    1230:	d0a82417 	ldw	r2,-24432(gp)
    1234:	1885883a 	add	r2,r3,r2
    1238:	d0a82315 	stw	r2,-24436(gp)
			ALT_x2 += ALT_inc_x;
    123c:	d0e82517 	ldw	r3,-24428(gp)
    1240:	d0a82417 	ldw	r2,-24432(gp)
    1244:	1885883a 	add	r2,r3,r2
    1248:	d0a82515 	stw	r2,-24428(gp)
			ALT_y += ALT_inc_y;
    124c:	d0e82017 	ldw	r3,-24448(gp)
    1250:	d0a82117 	ldw	r2,-24444(gp)
    1254:	1885883a 	add	r2,r3,r2
    1258:	d0a82015 	stw	r2,-24448(gp)
		}


		//collision rand boven en onder
		if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
    125c:	d0e82017 	ldw	r3,-24448(gp)
    1260:	d0a81c17 	ldw	r2,-24464(gp)
    1264:	18800326 	beq	r3,r2,1274 <Singleplayer+0x184>
    1268:	d0a82017 	ldw	r2,-24448(gp)
    126c:	10800118 	cmpnei	r2,r2,4
    1270:	1000031e 	bne	r2,zero,1280 <Singleplayer+0x190>
			ALT_inc_y = -(ALT_inc_y);
    1274:	d0a82117 	ldw	r2,-24444(gp)
    1278:	0085c83a 	sub	r2,zero,r2
    127c:	d0a82115 	stw	r2,-24444(gp)
		}
		//collision rand rechts en links
		if ((ALT_x2 == pixel_buffer_x)) {
    1280:	d0e82517 	ldw	r3,-24428(gp)
    1284:	d0a81e17 	ldw	r2,-24456(gp)
    1288:	1880071e 	bne	r3,r2,12a8 <Singleplayer+0x1b8>
			ALT_inc_x = -(ALT_inc_x);
    128c:	d0a82417 	ldw	r2,-24432(gp)
    1290:	0085c83a 	sub	r2,zero,r2
    1294:	d0a82415 	stw	r2,-24432(gp)
			deleteNummer();
    1298:	0002eac0 	call	2eac <deleteNummer>
			score3++;
    129c:	d0a81a17 	ldw	r2,-24472(gp)
    12a0:	10800044 	addi	r2,r2,1
    12a4:	d0a81a15 	stw	r2,-24472(gp)

		}

		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
    12a8:	d1282317 	ldw	r4,-24436(gp)
    12ac:	d1682017 	ldw	r5,-24448(gp)
    12b0:	d0a82317 	ldw	r2,-24436(gp)
    12b4:	11800144 	addi	r6,r2,5
    12b8:	d0a82017 	ldw	r2,-24448(gp)
    12bc:	10c00144 	addi	r3,r2,5
    12c0:	00804034 	movhi	r2,256
    12c4:	10bfffc4 	addi	r2,r2,-1
    12c8:	d8800015 	stw	r2,0(sp)
    12cc:	180f883a 	mov	r7,r3
    12d0:	0002c540 	call	2c54 <VGA_box>

		//links dood
		if (ALT_x1 == 0) {
    12d4:	d0a82317 	ldw	r2,-24436(gp)
    12d8:	1000051e 	bne	r2,zero,12f0 <Singleplayer+0x200>
			leven--;
    12dc:	d0a00217 	ldw	r2,-32760(gp)
    12e0:	10bfffc4 	addi	r2,r2,-1
    12e4:	d0a00215 	stw	r2,-32760(gp)
			gescoord(3);
    12e8:	010000c4 	movi	r4,3
    12ec:	0000c180 	call	c18 <gescoord>
//				score3++;
//			}

		//collision linker balkje
		//lange zijde
		if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte && ALT_y < balkje->Hoogte + 50)){
    12f0:	d0a82317 	ldw	r2,-24436(gp)
    12f4:	10800558 	cmpnei	r2,r2,21
    12f8:	10000c1e 	bne	r2,zero,132c <Singleplayer+0x23c>
    12fc:	e0bffb17 	ldw	r2,-20(fp)
    1300:	10c00017 	ldw	r3,0(r2)
    1304:	d0a82017 	ldw	r2,-24448(gp)
    1308:	1880080e 	bge	r3,r2,132c <Singleplayer+0x23c>
    130c:	e0bffb17 	ldw	r2,-20(fp)
    1310:	10800017 	ldw	r2,0(r2)
    1314:	10800c84 	addi	r2,r2,50
    1318:	d0e82017 	ldw	r3,-24448(gp)
    131c:	1880030e 	bge	r3,r2,132c <Singleplayer+0x23c>
			ALT_inc_x = -(ALT_inc_x);
    1320:	d0a82417 	ldw	r2,-24432(gp)
    1324:	0085c83a 	sub	r2,zero,r2
    1328:	d0a82415 	stw	r2,-24432(gp)
		}
		//boven
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte){
    132c:	d0a82317 	ldw	r2,-24436(gp)
    1330:	10800608 	cmpgei	r2,r2,24
    1334:	10000a1e 	bne	r2,zero,1360 <Singleplayer+0x270>
    1338:	d0a82317 	ldw	r2,-24436(gp)
    133c:	10800590 	cmplti	r2,r2,22
    1340:	1000071e 	bne	r2,zero,1360 <Singleplayer+0x270>
    1344:	e0bffb17 	ldw	r2,-20(fp)
    1348:	10c00017 	ldw	r3,0(r2)
    134c:	d0a82017 	ldw	r2,-24448(gp)
    1350:	1880031e 	bne	r3,r2,1360 <Singleplayer+0x270>
			ALT_inc_y = -(ALT_inc_y);
    1354:	d0a82117 	ldw	r2,-24444(gp)
    1358:	0085c83a 	sub	r2,zero,r2
    135c:	d0a82115 	stw	r2,-24444(gp)
		}
		//onder
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte + 50){
    1360:	d0a82317 	ldw	r2,-24436(gp)
    1364:	10800608 	cmpgei	r2,r2,24
    1368:	10000b1e 	bne	r2,zero,1398 <Singleplayer+0x2a8>
    136c:	d0a82317 	ldw	r2,-24436(gp)
    1370:	10800590 	cmplti	r2,r2,22
    1374:	1000081e 	bne	r2,zero,1398 <Singleplayer+0x2a8>
    1378:	e0bffb17 	ldw	r2,-20(fp)
    137c:	10800017 	ldw	r2,0(r2)
    1380:	10c00c84 	addi	r3,r2,50
    1384:	d0a82017 	ldw	r2,-24448(gp)
    1388:	1880031e 	bne	r3,r2,1398 <Singleplayer+0x2a8>
			ALT_inc_y = -(ALT_inc_y);
    138c:	d0a82117 	ldw	r2,-24444(gp)
    1390:	0085c83a 	sub	r2,zero,r2
    1394:	d0a82115 	stw	r2,-24444(gp)
		}

		for (i = 0; i <= 999; i++) {
    1398:	e03ffa15 	stw	zero,-24(fp)
    139c:	00005606 	br	14f8 <Singleplayer+0x408>

			if(score3 == i){
    13a0:	d0e81a17 	ldw	r3,-24472(gp)
    13a4:	e0bffa17 	ldw	r2,-24(fp)
    13a8:	18803c1e 	bne	r3,r2,149c <Singleplayer+0x3ac>

				if (score3 >= 0 && score3 <= 9){
    13ac:	d0a81a17 	ldw	r2,-24472(gp)
    13b0:	10000716 	blt	r2,zero,13d0 <Singleplayer+0x2e0>
    13b4:	d0a81a17 	ldw	r2,-24472(gp)
    13b8:	10800288 	cmpgei	r2,r2,10
    13bc:	1000041e 	bne	r2,zero,13d0 <Singleplayer+0x2e0>
					draw_number(i, 3);
    13c0:	e13ffa17 	ldw	r4,-24(fp)
    13c4:	014000c4 	movi	r5,3
    13c8:	0002ee80 	call	2ee8 <draw_number>

		for (i = 0; i <= 999; i++) {

			if(score3 == i){

				if (score3 >= 0 && score3 <= 9){
    13cc:	00003306 	br	149c <Singleplayer+0x3ac>
					draw_number(i, 3);
				} else if (score3 >= 10 && score3 <= 99){
    13d0:	d0a81a17 	ldw	r2,-24472(gp)
    13d4:	10800290 	cmplti	r2,r2,10
    13d8:	1000121e 	bne	r2,zero,1424 <Singleplayer+0x334>
    13dc:	d0a81a17 	ldw	r2,-24472(gp)
    13e0:	10801908 	cmpgei	r2,r2,100
    13e4:	10000f1e 	bne	r2,zero,1424 <Singleplayer+0x334>
					draw_number(i /10 , 2);
    13e8:	e0fffa17 	ldw	r3,-24(fp)
    13ec:	00800284 	movi	r2,10
    13f0:	1885283a 	div	r2,r3,r2
    13f4:	1009883a 	mov	r4,r2
    13f8:	01400084 	movi	r5,2
    13fc:	0002ee80 	call	2ee8 <draw_number>
					draw_number(i %10, 3);
    1400:	e0bffa17 	ldw	r2,-24(fp)
    1404:	00c00284 	movi	r3,10
    1408:	10c7283a 	div	r3,r2,r3
    140c:	18c002a4 	muli	r3,r3,10
    1410:	10c5c83a 	sub	r2,r2,r3
    1414:	1009883a 	mov	r4,r2
    1418:	014000c4 	movi	r5,3
    141c:	0002ee80 	call	2ee8 <draw_number>

			if(score3 == i){

				if (score3 >= 0 && score3 <= 9){
					draw_number(i, 3);
				} else if (score3 >= 10 && score3 <= 99){
    1420:	00001e06 	br	149c <Singleplayer+0x3ac>
					draw_number(i /10 , 2);
					draw_number(i %10, 3);
				} else if (score3 >= 100 && score3 <= 999){
    1424:	d0a81a17 	ldw	r2,-24472(gp)
    1428:	10801910 	cmplti	r2,r2,100
    142c:	10001b1e 	bne	r2,zero,149c <Singleplayer+0x3ac>
    1430:	d0a81a17 	ldw	r2,-24472(gp)
    1434:	1080fa08 	cmpgei	r2,r2,1000
    1438:	1000181e 	bne	r2,zero,149c <Singleplayer+0x3ac>
					draw_number(i /100 , 1);
    143c:	e0fffa17 	ldw	r3,-24(fp)
    1440:	00801904 	movi	r2,100
    1444:	1885283a 	div	r2,r3,r2
    1448:	1009883a 	mov	r4,r2
    144c:	01400044 	movi	r5,1
    1450:	0002ee80 	call	2ee8 <draw_number>
					draw_number(i /10 %10, 2);
    1454:	e0fffa17 	ldw	r3,-24(fp)
    1458:	00800284 	movi	r2,10
    145c:	1885283a 	div	r2,r3,r2
    1460:	00c00284 	movi	r3,10
    1464:	10c7283a 	div	r3,r2,r3
    1468:	18c002a4 	muli	r3,r3,10
    146c:	10c5c83a 	sub	r2,r2,r3
    1470:	1009883a 	mov	r4,r2
    1474:	01400084 	movi	r5,2
    1478:	0002ee80 	call	2ee8 <draw_number>
					draw_number(i %10, 3);
    147c:	e0bffa17 	ldw	r2,-24(fp)
    1480:	00c00284 	movi	r3,10
    1484:	10c7283a 	div	r3,r2,r3
    1488:	18c002a4 	muli	r3,r3,10
    148c:	10c5c83a 	sub	r2,r2,r3
    1490:	1009883a 	mov	r4,r2
    1494:	014000c4 	movi	r5,3
    1498:	0002ee80 	call	2ee8 <draw_number>
				}
			}
			if((score3 == 999) || (leven == 0)){ // max score of geen levens meer, spel eindigt.
    149c:	d0a81a17 	ldw	r2,-24472(gp)
    14a0:	1080f9e0 	cmpeqi	r2,r2,999
    14a4:	1000021e 	bne	r2,zero,14b0 <Singleplayer+0x3c0>
    14a8:	d0a00217 	ldw	r2,-32760(gp)
    14ac:	10000f1e 	bne	r2,zero,14ec <Singleplayer+0x3fc>
				leven = 0;
    14b0:	d0200215 	stw	zero,-32760(gp)
				score3 =0;
    14b4:	d0281a15 	stw	zero,-24472(gp)
				sprintf(levens, "LEVENS: %d", leven);
    14b8:	d0a00217 	ldw	r2,-32760(gp)
    14bc:	e0fffc44 	addi	r3,fp,-15
    14c0:	1809883a 	mov	r4,r3
    14c4:	014000b4 	movhi	r5,2
    14c8:	297fd904 	addi	r5,r5,-156
    14cc:	100d883a 	mov	r6,r2
    14d0:	00037380 	call	3738 <sprintf>
				VGA_text(6,5, levens);
    14d4:	e0bffc44 	addi	r2,fp,-15
    14d8:	01000184 	movi	r4,6
    14dc:	01400144 	movi	r5,5
    14e0:	100d883a 	mov	r6,r2
    14e4:	0002d080 	call	2d08 <VGA_text>
				endSingleplayer();
    14e8:	0000fb80 	call	fb8 <endSingleplayer>
		//onder
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte + 50){
			ALT_inc_y = -(ALT_inc_y);
		}

		for (i = 0; i <= 999; i++) {
    14ec:	e0bffa17 	ldw	r2,-24(fp)
    14f0:	10800044 	addi	r2,r2,1
    14f4:	e0bffa15 	stw	r2,-24(fp)
    14f8:	e0bffa17 	ldw	r2,-24(fp)
    14fc:	1080fa10 	cmplti	r2,r2,1000
    1500:	103fa71e 	bne	r2,zero,13a0 <__alt_mem_Flash_flash_data+0xf40013a0>
				endSingleplayer();
			}
		}


		sprintf(levens, "LEVENS: %d", leven);
    1504:	d0a00217 	ldw	r2,-32760(gp)
    1508:	e0fffc44 	addi	r3,fp,-15
    150c:	1809883a 	mov	r4,r3
    1510:	014000b4 	movhi	r5,2
    1514:	297fd904 	addi	r5,r5,-156
    1518:	100d883a 	mov	r6,r2
    151c:	00037380 	call	3738 <sprintf>
		VGA_text(6,5, levens);
    1520:	e0bffc44 	addi	r2,fp,-15
    1524:	01000184 	movi	r4,6
    1528:	01400144 	movi	r5,5
    152c:	100d883a 	mov	r6,r2
    1530:	0002d080 	call	2d08 <VGA_text>
		OSTimeDly(1);
    1534:	01000044 	movi	r4,1
    1538:	001bb500 	call	1bb50 <OSTimeDly>


	}
    153c:	003eff06 	br	113c <__alt_mem_Flash_flash_data+0xf400113c>

00001540 <TutUitleg>:
	
}

void TutUitleg(){
    1540:	defffe04 	addi	sp,sp,-8
    1544:	dfc00115 	stw	ra,4(sp)
    1548:	df000015 	stw	fp,0(sp)
    154c:	d839883a 	mov	fp,sp
	
	INT8U err;
	
	VGA_text(10, 10, "Het doel van het spel is om de bal");
    1550:	01000284 	movi	r4,10
    1554:	01400284 	movi	r5,10
    1558:	018000b4 	movhi	r6,2
    155c:	31bfdc04 	addi	r6,r6,-144
    1560:	0002d080 	call	2d08 <VGA_text>
	VGA_text(10, 11, "te kaatsen richting de tegenstander.");
    1564:	01000284 	movi	r4,10
    1568:	014002c4 	movi	r5,11
    156c:	018000b4 	movhi	r6,2
    1570:	31bfe504 	addi	r6,r6,-108
    1574:	0002d080 	call	2d08 <VGA_text>
	VGA_text(10, 12, "Bij Singleplayer speel je tegen de");
    1578:	01000284 	movi	r4,10
    157c:	01400304 	movi	r5,12
    1580:	018000b4 	movhi	r6,2
    1584:	31bfef04 	addi	r6,r6,-68
    1588:	0002d080 	call	2d08 <VGA_text>
	VGA_text(10, 13, "computer, waarbij je zoveel mogelijk");
    158c:	01000284 	movi	r4,10
    1590:	01400344 	movi	r5,13
    1594:	018000b4 	movhi	r6,2
    1598:	31bff804 	addi	r6,r6,-32
    159c:	0002d080 	call	2d08 <VGA_text>
	VGA_text(10, 14, "aantal punten moet bereiken door de bal");
    15a0:	01000284 	movi	r4,10
    15a4:	01400384 	movi	r5,14
    15a8:	018000b4 	movhi	r6,2
    15ac:	31800204 	addi	r6,r6,8
    15b0:	0002d080 	call	2d08 <VGA_text>
	VGA_text(10, 15, "tegen de muur te kaatsen.");
    15b4:	01000284 	movi	r4,10
    15b8:	014003c4 	movi	r5,15
    15bc:	018000b4 	movhi	r6,2
    15c0:	31800c04 	addi	r6,r6,48
    15c4:	0002d080 	call	2d08 <VGA_text>
	OSTimeDlyHMSM(0, 5, 0, 0);
    15c8:	0009883a 	mov	r4,zero
    15cc:	01400144 	movi	r5,5
    15d0:	000d883a 	mov	r6,zero
    15d4:	000f883a 	mov	r7,zero
    15d8:	001bc980 	call	1bc98 <OSTimeDlyHMSM>
	VGA_text(10, 10, "                                         ");
    15dc:	01000284 	movi	r4,10
    15e0:	01400284 	movi	r5,10
    15e4:	018000b4 	movhi	r6,2
    15e8:	31801304 	addi	r6,r6,76
    15ec:	0002d080 	call	2d08 <VGA_text>
	VGA_text(10, 11, "                                         ");	
    15f0:	01000284 	movi	r4,10
    15f4:	014002c4 	movi	r5,11
    15f8:	018000b4 	movhi	r6,2
    15fc:	31801304 	addi	r6,r6,76
    1600:	0002d080 	call	2d08 <VGA_text>
	VGA_text(10, 12, "                                         ");
    1604:	01000284 	movi	r4,10
    1608:	01400304 	movi	r5,12
    160c:	018000b4 	movhi	r6,2
    1610:	31801304 	addi	r6,r6,76
    1614:	0002d080 	call	2d08 <VGA_text>
	VGA_text(10, 13, "                                         ");
    1618:	01000284 	movi	r4,10
    161c:	01400344 	movi	r5,13
    1620:	018000b4 	movhi	r6,2
    1624:	31801304 	addi	r6,r6,76
    1628:	0002d080 	call	2d08 <VGA_text>
	VGA_text(10, 14, "                                         ");
    162c:	01000284 	movi	r4,10
    1630:	01400384 	movi	r5,14
    1634:	018000b4 	movhi	r6,2
    1638:	31801304 	addi	r6,r6,76
    163c:	0002d080 	call	2d08 <VGA_text>
	VGA_text(10, 15, "                                         ");
    1640:	01000284 	movi	r4,10
    1644:	014003c4 	movi	r5,15
    1648:	018000b4 	movhi	r6,2
    164c:	31801304 	addi	r6,r6,76
    1650:	0002d080 	call	2d08 <VGA_text>
	OSTimeDlyHMSM(0, 2, 0, 0);
    1654:	0009883a 	mov	r4,zero
    1658:	01400084 	movi	r5,2
    165c:	000d883a 	mov	r6,zero
    1660:	000f883a 	mov	r7,zero
    1664:	001bc980 	call	1bc98 <OSTimeDlyHMSM>
	VGA_text(10, 10, "In Multiplayer gaat het er om dat je");
    1668:	01000284 	movi	r4,10
    166c:	01400284 	movi	r5,10
    1670:	018000b4 	movhi	r6,2
    1674:	31801e04 	addi	r6,r6,120
    1678:	0002d080 	call	2d08 <VGA_text>
	VGA_text(10, 11, "de bal in het doel van de tegenstander");
    167c:	01000284 	movi	r4,10
    1680:	014002c4 	movi	r5,11
    1684:	018000b4 	movhi	r6,2
    1688:	31802804 	addi	r6,r6,160
    168c:	0002d080 	call	2d08 <VGA_text>
	VGA_text(10, 12, "krijgt. Het doel bevindt zich achter het");
    1690:	01000284 	movi	r4,10
    1694:	01400304 	movi	r5,12
    1698:	018000b4 	movhi	r6,2
    169c:	31803204 	addi	r6,r6,200
    16a0:	0002d080 	call	2d08 <VGA_text>
	VGA_text(10, 13, "balkje van de tegenstander.");
    16a4:	01000284 	movi	r4,10
    16a8:	01400344 	movi	r5,13
    16ac:	018000b4 	movhi	r6,2
    16b0:	31803d04 	addi	r6,r6,244
    16b4:	0002d080 	call	2d08 <VGA_text>
	OSTimeDlyHMSM(0, 5, 0, 0);
    16b8:	0009883a 	mov	r4,zero
    16bc:	01400144 	movi	r5,5
    16c0:	000d883a 	mov	r6,zero
    16c4:	000f883a 	mov	r7,zero
    16c8:	001bc980 	call	1bc98 <OSTimeDlyHMSM>
	VGA_text(10, 10, "                                         ");
    16cc:	01000284 	movi	r4,10
    16d0:	01400284 	movi	r5,10
    16d4:	018000b4 	movhi	r6,2
    16d8:	31801304 	addi	r6,r6,76
    16dc:	0002d080 	call	2d08 <VGA_text>
	VGA_text(10, 11, "                                         ");	
    16e0:	01000284 	movi	r4,10
    16e4:	014002c4 	movi	r5,11
    16e8:	018000b4 	movhi	r6,2
    16ec:	31801304 	addi	r6,r6,76
    16f0:	0002d080 	call	2d08 <VGA_text>
	VGA_text(10, 12, "                                         ");
    16f4:	01000284 	movi	r4,10
    16f8:	01400304 	movi	r5,12
    16fc:	018000b4 	movhi	r6,2
    1700:	31801304 	addi	r6,r6,76
    1704:	0002d080 	call	2d08 <VGA_text>
	VGA_text(10, 13, "                                         ");
    1708:	01000284 	movi	r4,10
    170c:	01400344 	movi	r5,13
    1710:	018000b4 	movhi	r6,2
    1714:	31801304 	addi	r6,r6,76
    1718:	0002d080 	call	2d08 <VGA_text>
}
    171c:	e037883a 	mov	sp,fp
    1720:	dfc00117 	ldw	ra,4(sp)
    1724:	df000017 	ldw	fp,0(sp)
    1728:	dec00204 	addi	sp,sp,8
    172c:	f800283a 	ret

00001730 <Tutorial>:

void Tutorial(void* pdata){
    1730:	defffa04 	addi	sp,sp,-24
    1734:	dfc00515 	stw	ra,20(sp)
    1738:	df000415 	stw	fp,16(sp)
    173c:	df000404 	addi	fp,sp,16
    1740:	e13fff15 	stw	r4,-4(fp)
	
	ALT_x1 = 0;
    1744:	d0282315 	stw	zero,-24436(gp)
	ALT_x2 = 165;
    1748:	00802944 	movi	r2,165
    174c:	d0a82515 	stw	r2,-24428(gp)
	ALT_y = 100;
    1750:	00801904 	movi	r2,100
    1754:	d0a82015 	stw	r2,-24448(gp)
	ALT_inc_x = 1;
    1758:	00800044 	movi	r2,1
    175c:	d0a82415 	stw	r2,-24432(gp)
	ALT_inc_y = 1;
    1760:	00800044 	movi	r2,1
    1764:	d0a82115 	stw	r2,-24444(gp)

	pixel_buffer_x = 315;
    1768:	00804ec4 	movi	r2,315
    176c:	d0a81e15 	stw	r2,-24456(gp)
	pixel_buffer_y = 230;
    1770:	00803984 	movi	r2,230
    1774:	d0a81c15 	stw	r2,-24464(gp)
	int count;
	int q;
	Balk * balkje;
	Balk * balkje2;
	
	VGA_box (316, 0, 319, 239, groen); 					// rechts
    1778:	0081a5c4 	movi	r2,1687
    177c:	d8800015 	stw	r2,0(sp)
    1780:	01004f04 	movi	r4,316
    1784:	000b883a 	mov	r5,zero
    1788:	01804fc4 	movi	r6,319
    178c:	01c03bc4 	movi	r7,239
    1790:	0002c540 	call	2c54 <VGA_box>
	
	while (1) {
		OSFlagPend(Flags, Tutorial_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
    1794:	d0e81717 	ldw	r3,-24484(gp)
    1798:	e0bffe04 	addi	r2,fp,-8
    179c:	d8800015 	stw	r2,0(sp)
    17a0:	1809883a 	mov	r4,r3
    17a4:	01401004 	movi	r5,64
    17a8:	01800044 	movi	r6,1
    17ac:	000f883a 	mov	r7,zero
    17b0:	001633c0 	call	1633c <OSFlagPend>

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
    17b4:	d0e81817 	ldw	r3,-24480(gp)
    17b8:	e0bffe04 	addi	r2,fp,-8
    17bc:	1809883a 	mov	r4,r3
    17c0:	000b883a 	mov	r5,zero
    17c4:	100d883a 	mov	r6,r2
    17c8:	00176340 	call	17634 <OSMboxPend>
    17cc:	e0bffd15 	stw	r2,-12(fp)

		//printf("ID is: %d\tHoogte is: %d\n", balkje->ID, balkje->Hoogte);

		TutUitleg();
    17d0:	00015400 	call	1540 <TutUitleg>
//
//			check = 0;
//		}
		

		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    17d4:	d1282317 	ldw	r4,-24436(gp)
    17d8:	d1682017 	ldw	r5,-24448(gp)
    17dc:	d0a82317 	ldw	r2,-24436(gp)
    17e0:	10c00144 	addi	r3,r2,5
    17e4:	d0a82017 	ldw	r2,-24448(gp)
    17e8:	10800144 	addi	r2,r2,5
    17ec:	d8000015 	stw	zero,0(sp)
    17f0:	180d883a 	mov	r6,r3
    17f4:	100f883a 	mov	r7,r2
    17f8:	0002c540 	call	2c54 <VGA_box>

		if (first == 1) {
    17fc:	d0a00017 	ldw	r2,-32768(gp)
    1800:	10800058 	cmpnei	r2,r2,1
    1804:	10000f1e 	bne	r2,zero,1844 <Tutorial+0x114>
			ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
    1808:	d0a82317 	ldw	r2,-24436(gp)
    180c:	10c02804 	addi	r3,r2,160
    1810:	d0a82417 	ldw	r2,-24432(gp)
    1814:	1885883a 	add	r2,r3,r2
    1818:	d0a82315 	stw	r2,-24436(gp)
			ALT_x2 += ALT_inc_x;
    181c:	d0e82517 	ldw	r3,-24428(gp)
    1820:	d0a82417 	ldw	r2,-24432(gp)
    1824:	1885883a 	add	r2,r3,r2
    1828:	d0a82515 	stw	r2,-24428(gp)
			ALT_y += ALT_inc_y;
    182c:	d0e82017 	ldw	r3,-24448(gp)
    1830:	d0a82117 	ldw	r2,-24444(gp)
    1834:	1885883a 	add	r2,r3,r2
    1838:	d0a82015 	stw	r2,-24448(gp)
			first = 0;
    183c:	d0200015 	stw	zero,-32768(gp)
    1840:	00000c06 	br	1874 <Tutorial+0x144>
		} else {
			ALT_x1 += ALT_inc_x;
    1844:	d0e82317 	ldw	r3,-24436(gp)
    1848:	d0a82417 	ldw	r2,-24432(gp)
    184c:	1885883a 	add	r2,r3,r2
    1850:	d0a82315 	stw	r2,-24436(gp)
			ALT_x2 += ALT_inc_x;
    1854:	d0e82517 	ldw	r3,-24428(gp)
    1858:	d0a82417 	ldw	r2,-24432(gp)
    185c:	1885883a 	add	r2,r3,r2
    1860:	d0a82515 	stw	r2,-24428(gp)
			ALT_y += ALT_inc_y;
    1864:	d0e82017 	ldw	r3,-24448(gp)
    1868:	d0a82117 	ldw	r2,-24444(gp)
    186c:	1885883a 	add	r2,r3,r2
    1870:	d0a82015 	stw	r2,-24448(gp)
		}
		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
    1874:	d1282317 	ldw	r4,-24436(gp)
    1878:	d1682017 	ldw	r5,-24448(gp)
    187c:	d0a82317 	ldw	r2,-24436(gp)
    1880:	11800144 	addi	r6,r2,5
    1884:	d0a82017 	ldw	r2,-24448(gp)
    1888:	10c00144 	addi	r3,r2,5
    188c:	00804034 	movhi	r2,256
    1890:	10bfffc4 	addi	r2,r2,-1
    1894:	d8800015 	stw	r2,0(sp)
    1898:	180f883a 	mov	r7,r3
    189c:	0002c540 	call	2c54 <VGA_box>

		//collision rand boven en onder
		if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
    18a0:	d0e82017 	ldw	r3,-24448(gp)
    18a4:	d0a81c17 	ldw	r2,-24464(gp)
    18a8:	18800326 	beq	r3,r2,18b8 <Tutorial+0x188>
    18ac:	d0a82017 	ldw	r2,-24448(gp)
    18b0:	10800118 	cmpnei	r2,r2,4
    18b4:	1000031e 	bne	r2,zero,18c4 <Tutorial+0x194>
			ALT_inc_y = -(ALT_inc_y);
    18b8:	d0a82117 	ldw	r2,-24444(gp)
    18bc:	0085c83a 	sub	r2,zero,r2
    18c0:	d0a82115 	stw	r2,-24444(gp)
		}
		//collision rand rechts en links
		if ((ALT_x2 == pixel_buffer_x)) {
    18c4:	d0e82517 	ldw	r3,-24428(gp)
    18c8:	d0a81e17 	ldw	r2,-24456(gp)
    18cc:	1880031e 	bne	r3,r2,18dc <Tutorial+0x1ac>
			ALT_inc_x = -(ALT_inc_x);
    18d0:	d0a82417 	ldw	r2,-24432(gp)
    18d4:	0085c83a 	sub	r2,zero,r2
    18d8:	d0a82415 	stw	r2,-24432(gp)

		}

		//links dood
		if (ALT_x1 == 0) {
    18dc:	d0a82317 	ldw	r2,-24436(gp)
    18e0:	1000021e 	bne	r2,zero,18ec <Tutorial+0x1bc>
			gescoord(3);
    18e4:	010000c4 	movi	r4,3
    18e8:	0000c180 	call	c18 <gescoord>
//				score3++;
//			}

		//collision linker balkje
		//lange zijde
		if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte && ALT_y < balkje->Hoogte + 50)){
    18ec:	d0a82317 	ldw	r2,-24436(gp)
    18f0:	10800558 	cmpnei	r2,r2,21
    18f4:	10000c1e 	bne	r2,zero,1928 <Tutorial+0x1f8>
    18f8:	e0bffd17 	ldw	r2,-12(fp)
    18fc:	10c00017 	ldw	r3,0(r2)
    1900:	d0a82017 	ldw	r2,-24448(gp)
    1904:	1880080e 	bge	r3,r2,1928 <Tutorial+0x1f8>
    1908:	e0bffd17 	ldw	r2,-12(fp)
    190c:	10800017 	ldw	r2,0(r2)
    1910:	10800c84 	addi	r2,r2,50
    1914:	d0e82017 	ldw	r3,-24448(gp)
    1918:	1880030e 	bge	r3,r2,1928 <Tutorial+0x1f8>
			ALT_inc_x = -(ALT_inc_x);
    191c:	d0a82417 	ldw	r2,-24432(gp)
    1920:	0085c83a 	sub	r2,zero,r2
    1924:	d0a82415 	stw	r2,-24432(gp)
		}
		//boven
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte){
    1928:	d0a82317 	ldw	r2,-24436(gp)
    192c:	10800608 	cmpgei	r2,r2,24
    1930:	10000a1e 	bne	r2,zero,195c <Tutorial+0x22c>
    1934:	d0a82317 	ldw	r2,-24436(gp)
    1938:	10800590 	cmplti	r2,r2,22
    193c:	1000071e 	bne	r2,zero,195c <Tutorial+0x22c>
    1940:	e0bffd17 	ldw	r2,-12(fp)
    1944:	10c00017 	ldw	r3,0(r2)
    1948:	d0a82017 	ldw	r2,-24448(gp)
    194c:	1880031e 	bne	r3,r2,195c <Tutorial+0x22c>
			ALT_inc_y = -(ALT_inc_y);
    1950:	d0a82117 	ldw	r2,-24444(gp)
    1954:	0085c83a 	sub	r2,zero,r2
    1958:	d0a82115 	stw	r2,-24444(gp)
		}
		//onder
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte + 50){
    195c:	d0a82317 	ldw	r2,-24436(gp)
    1960:	10800608 	cmpgei	r2,r2,24
    1964:	10000b1e 	bne	r2,zero,1994 <Tutorial+0x264>
    1968:	d0a82317 	ldw	r2,-24436(gp)
    196c:	10800590 	cmplti	r2,r2,22
    1970:	1000081e 	bne	r2,zero,1994 <Tutorial+0x264>
    1974:	e0bffd17 	ldw	r2,-12(fp)
    1978:	10800017 	ldw	r2,0(r2)
    197c:	10c00c84 	addi	r3,r2,50
    1980:	d0a82017 	ldw	r2,-24448(gp)
    1984:	1880031e 	bne	r3,r2,1994 <Tutorial+0x264>
			ALT_inc_y = -(ALT_inc_y);
    1988:	d0a82117 	ldw	r2,-24444(gp)
    198c:	0085c83a 	sub	r2,zero,r2
    1990:	d0a82115 	stw	r2,-24444(gp)
		}

		
		if (controller(3) == 1) {
    1994:	010000c4 	movi	r4,3
    1998:	000039c0 	call	39c <controller>
    199c:	10800058 	cmpnei	r2,r2,1
    19a0:	1000011e 	bne	r2,zero,19a8 <Tutorial+0x278>
			endSingleplayer();
    19a4:	0000fb80 	call	fb8 <endSingleplayer>
		}

		OSTimeDly(1);
    19a8:	01000044 	movi	r4,1
    19ac:	001bb500 	call	1bb50 <OSTimeDly>


	}
    19b0:	003f7806 	br	1794 <__alt_mem_Flash_flash_data+0xf4001794>

000019b4 <nummer1>:
	
}

static void nummer1(int q){
    19b4:	defffc04 	addi	sp,sp,-16
    19b8:	dfc00315 	stw	ra,12(sp)
    19bc:	df000215 	stw	fp,8(sp)
    19c0:	df000204 	addi	fp,sp,8
    19c4:	e13fff15 	stw	r4,-4(fp)

	VGA_box(X + 5, 20, X+7, 60, wit);
    19c8:	d0a82617 	ldw	r2,-24424(gp)
    19cc:	11000144 	addi	r4,r2,5
    19d0:	d0a82617 	ldw	r2,-24424(gp)
    19d4:	10c001c4 	addi	r3,r2,7
    19d8:	00804034 	movhi	r2,256
    19dc:	10bfffc4 	addi	r2,r2,-1
    19e0:	d8800015 	stw	r2,0(sp)
    19e4:	01400504 	movi	r5,20
    19e8:	180d883a 	mov	r6,r3
    19ec:	01c00f04 	movi	r7,60
    19f0:	0002c540 	call	2c54 <VGA_box>
}
    19f4:	e037883a 	mov	sp,fp
    19f8:	dfc00117 	ldw	ra,4(sp)
    19fc:	df000017 	ldw	fp,0(sp)
    1a00:	dec00204 	addi	sp,sp,8
    1a04:	f800283a 	ret

00001a08 <nummer2>:

static void nummer2(int q){
    1a08:	defffc04 	addi	sp,sp,-16
    1a0c:	dfc00315 	stw	ra,12(sp)
    1a10:	df000215 	stw	fp,8(sp)
    1a14:	df000204 	addi	fp,sp,8
    1a18:	e13fff15 	stw	r4,-4(fp)
	VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1a1c:	d1282617 	ldw	r4,-24424(gp)
    1a20:	d0a82617 	ldw	r2,-24424(gp)
    1a24:	10c00504 	addi	r3,r2,20
    1a28:	00804034 	movhi	r2,256
    1a2c:	10bfffc4 	addi	r2,r2,-1
    1a30:	d8800015 	stw	r2,0(sp)
    1a34:	01400504 	movi	r5,20
    1a38:	180d883a 	mov	r6,r3
    1a3c:	01c00584 	movi	r7,22
    1a40:	0002c540 	call	2c54 <VGA_box>
	VGA_box(X + 18, 22, X+ 20, 38, wit);			//lijn naar beneden
    1a44:	d0a82617 	ldw	r2,-24424(gp)
    1a48:	11000484 	addi	r4,r2,18
    1a4c:	d0a82617 	ldw	r2,-24424(gp)
    1a50:	10c00504 	addi	r3,r2,20
    1a54:	00804034 	movhi	r2,256
    1a58:	10bfffc4 	addi	r2,r2,-1
    1a5c:	d8800015 	stw	r2,0(sp)
    1a60:	01400584 	movi	r5,22
    1a64:	180d883a 	mov	r6,r3
    1a68:	01c00984 	movi	r7,38
    1a6c:	0002c540 	call	2c54 <VGA_box>
	VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    1a70:	d1282617 	ldw	r4,-24424(gp)
    1a74:	d0a82617 	ldw	r2,-24424(gp)
    1a78:	10c00504 	addi	r3,r2,20
    1a7c:	00804034 	movhi	r2,256
    1a80:	10bfffc4 	addi	r2,r2,-1
    1a84:	d8800015 	stw	r2,0(sp)
    1a88:	01400984 	movi	r5,38
    1a8c:	180d883a 	mov	r6,r3
    1a90:	01c00a04 	movi	r7,40
    1a94:	0002c540 	call	2c54 <VGA_box>
	VGA_box(X, 40, X+ 2, 58, wit);					//lijn naar beneden
    1a98:	d1282617 	ldw	r4,-24424(gp)
    1a9c:	d0a82617 	ldw	r2,-24424(gp)
    1aa0:	10c00084 	addi	r3,r2,2
    1aa4:	00804034 	movhi	r2,256
    1aa8:	10bfffc4 	addi	r2,r2,-1
    1aac:	d8800015 	stw	r2,0(sp)
    1ab0:	01400a04 	movi	r5,40
    1ab4:	180d883a 	mov	r6,r3
    1ab8:	01c00e84 	movi	r7,58
    1abc:	0002c540 	call	2c54 <VGA_box>
	VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    1ac0:	d1282617 	ldw	r4,-24424(gp)
    1ac4:	d0a82617 	ldw	r2,-24424(gp)
    1ac8:	10c00504 	addi	r3,r2,20
    1acc:	00804034 	movhi	r2,256
    1ad0:	10bfffc4 	addi	r2,r2,-1
    1ad4:	d8800015 	stw	r2,0(sp)
    1ad8:	01400e84 	movi	r5,58
    1adc:	180d883a 	mov	r6,r3
    1ae0:	01c00f04 	movi	r7,60
    1ae4:	0002c540 	call	2c54 <VGA_box>
}
    1ae8:	e037883a 	mov	sp,fp
    1aec:	dfc00117 	ldw	ra,4(sp)
    1af0:	df000017 	ldw	fp,0(sp)
    1af4:	dec00204 	addi	sp,sp,8
    1af8:	f800283a 	ret

00001afc <nummer3>:

static void nummer3(int q){
    1afc:	defffc04 	addi	sp,sp,-16
    1b00:	dfc00315 	stw	ra,12(sp)
    1b04:	df000215 	stw	fp,8(sp)
    1b08:	df000204 	addi	fp,sp,8
    1b0c:	e13fff15 	stw	r4,-4(fp)
	VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1b10:	d1282617 	ldw	r4,-24424(gp)
    1b14:	d0a82617 	ldw	r2,-24424(gp)
    1b18:	10c00504 	addi	r3,r2,20
    1b1c:	00804034 	movhi	r2,256
    1b20:	10bfffc4 	addi	r2,r2,-1
    1b24:	d8800015 	stw	r2,0(sp)
    1b28:	01400504 	movi	r5,20
    1b2c:	180d883a 	mov	r6,r3
    1b30:	01c00584 	movi	r7,22
    1b34:	0002c540 	call	2c54 <VGA_box>
	VGA_box(X + 18, 22, X+ 20, 60, wit);			//rechter lijn
    1b38:	d0a82617 	ldw	r2,-24424(gp)
    1b3c:	11000484 	addi	r4,r2,18
    1b40:	d0a82617 	ldw	r2,-24424(gp)
    1b44:	10c00504 	addi	r3,r2,20
    1b48:	00804034 	movhi	r2,256
    1b4c:	10bfffc4 	addi	r2,r2,-1
    1b50:	d8800015 	stw	r2,0(sp)
    1b54:	01400584 	movi	r5,22
    1b58:	180d883a 	mov	r6,r3
    1b5c:	01c00f04 	movi	r7,60
    1b60:	0002c540 	call	2c54 <VGA_box>
	VGA_box(X, 39, X+ 20, 41, wit);					//midden lijn
    1b64:	d1282617 	ldw	r4,-24424(gp)
    1b68:	d0a82617 	ldw	r2,-24424(gp)
    1b6c:	10c00504 	addi	r3,r2,20
    1b70:	00804034 	movhi	r2,256
    1b74:	10bfffc4 	addi	r2,r2,-1
    1b78:	d8800015 	stw	r2,0(sp)
    1b7c:	014009c4 	movi	r5,39
    1b80:	180d883a 	mov	r6,r3
    1b84:	01c00a44 	movi	r7,41
    1b88:	0002c540 	call	2c54 <VGA_box>
	VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    1b8c:	d1282617 	ldw	r4,-24424(gp)
    1b90:	d0a82617 	ldw	r2,-24424(gp)
    1b94:	10c00504 	addi	r3,r2,20
    1b98:	00804034 	movhi	r2,256
    1b9c:	10bfffc4 	addi	r2,r2,-1
    1ba0:	d8800015 	stw	r2,0(sp)
    1ba4:	01400e84 	movi	r5,58
    1ba8:	180d883a 	mov	r6,r3
    1bac:	01c00f04 	movi	r7,60
    1bb0:	0002c540 	call	2c54 <VGA_box>
}
    1bb4:	e037883a 	mov	sp,fp
    1bb8:	dfc00117 	ldw	ra,4(sp)
    1bbc:	df000017 	ldw	fp,0(sp)
    1bc0:	dec00204 	addi	sp,sp,8
    1bc4:	f800283a 	ret

00001bc8 <nummer4>:

static void nummer4(int q){
    1bc8:	defffc04 	addi	sp,sp,-16
    1bcc:	dfc00315 	stw	ra,12(sp)
    1bd0:	df000215 	stw	fp,8(sp)
    1bd4:	df000204 	addi	fp,sp,8
    1bd8:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    1bdc:	d1282617 	ldw	r4,-24424(gp)
    1be0:	d0a82617 	ldw	r2,-24424(gp)
    1be4:	10c00084 	addi	r3,r2,2
    1be8:	00804034 	movhi	r2,256
    1bec:	10bfffc4 	addi	r2,r2,-1
    1bf0:	d8800015 	stw	r2,0(sp)
    1bf4:	01400504 	movi	r5,20
    1bf8:	180d883a 	mov	r6,r3
    1bfc:	01c00a04 	movi	r7,40
    1c00:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    1c04:	d1282617 	ldw	r4,-24424(gp)
    1c08:	d0a82617 	ldw	r2,-24424(gp)
    1c0c:	10c00504 	addi	r3,r2,20
    1c10:	00804034 	movhi	r2,256
    1c14:	10bfffc4 	addi	r2,r2,-1
    1c18:	d8800015 	stw	r2,0(sp)
    1c1c:	014009c4 	movi	r5,39
    1c20:	180d883a 	mov	r6,r3
    1c24:	01c00a44 	movi	r7,41
    1c28:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1c2c:	d0a82617 	ldw	r2,-24424(gp)
    1c30:	11000484 	addi	r4,r2,18
    1c34:	d0a82617 	ldw	r2,-24424(gp)
    1c38:	10c00504 	addi	r3,r2,20
    1c3c:	00804034 	movhi	r2,256
    1c40:	10bfffc4 	addi	r2,r2,-1
    1c44:	d8800015 	stw	r2,0(sp)
    1c48:	01400504 	movi	r5,20
    1c4c:	180d883a 	mov	r6,r3
    1c50:	01c00f04 	movi	r7,60
    1c54:	0002c540 	call	2c54 <VGA_box>
}
    1c58:	e037883a 	mov	sp,fp
    1c5c:	dfc00117 	ldw	ra,4(sp)
    1c60:	df000017 	ldw	fp,0(sp)
    1c64:	dec00204 	addi	sp,sp,8
    1c68:	f800283a 	ret

00001c6c <nummer5>:

static void nummer5(int q){
    1c6c:	defffc04 	addi	sp,sp,-16
    1c70:	dfc00315 	stw	ra,12(sp)
    1c74:	df000215 	stw	fp,8(sp)
    1c78:	df000204 	addi	fp,sp,8
    1c7c:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1c80:	d1282617 	ldw	r4,-24424(gp)
    1c84:	d0a82617 	ldw	r2,-24424(gp)
    1c88:	10c00504 	addi	r3,r2,20
    1c8c:	00804034 	movhi	r2,256
    1c90:	10bfffc4 	addi	r2,r2,-1
    1c94:	d8800015 	stw	r2,0(sp)
    1c98:	01400504 	movi	r5,20
    1c9c:	180d883a 	mov	r6,r3
    1ca0:	01c00584 	movi	r7,22
    1ca4:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 22, X+ 2, 38, wit);					//lijn naar beneden
    1ca8:	d1282617 	ldw	r4,-24424(gp)
    1cac:	d0a82617 	ldw	r2,-24424(gp)
    1cb0:	10c00084 	addi	r3,r2,2
    1cb4:	00804034 	movhi	r2,256
    1cb8:	10bfffc4 	addi	r2,r2,-1
    1cbc:	d8800015 	stw	r2,0(sp)
    1cc0:	01400584 	movi	r5,22
    1cc4:	180d883a 	mov	r6,r3
    1cc8:	01c00984 	movi	r7,38
    1ccc:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    1cd0:	d1282617 	ldw	r4,-24424(gp)
    1cd4:	d0a82617 	ldw	r2,-24424(gp)
    1cd8:	10c00504 	addi	r3,r2,20
    1cdc:	00804034 	movhi	r2,256
    1ce0:	10bfffc4 	addi	r2,r2,-1
    1ce4:	d8800015 	stw	r2,0(sp)
    1ce8:	01400984 	movi	r5,38
    1cec:	180d883a 	mov	r6,r3
    1cf0:	01c00a04 	movi	r7,40
    1cf4:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn naar beneden
    1cf8:	d0a82617 	ldw	r2,-24424(gp)
    1cfc:	11000484 	addi	r4,r2,18
    1d00:	d0a82617 	ldw	r2,-24424(gp)
    1d04:	10c00504 	addi	r3,r2,20
    1d08:	00804034 	movhi	r2,256
    1d0c:	10bfffc4 	addi	r2,r2,-1
    1d10:	d8800015 	stw	r2,0(sp)
    1d14:	01400a04 	movi	r5,40
    1d18:	180d883a 	mov	r6,r3
    1d1c:	01c00e84 	movi	r7,58
    1d20:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    1d24:	d1282617 	ldw	r4,-24424(gp)
    1d28:	d0a82617 	ldw	r2,-24424(gp)
    1d2c:	10c00504 	addi	r3,r2,20
    1d30:	00804034 	movhi	r2,256
    1d34:	10bfffc4 	addi	r2,r2,-1
    1d38:	d8800015 	stw	r2,0(sp)
    1d3c:	01400e84 	movi	r5,58
    1d40:	180d883a 	mov	r6,r3
    1d44:	01c00f04 	movi	r7,60
    1d48:	0002c540 	call	2c54 <VGA_box>
}
    1d4c:	e037883a 	mov	sp,fp
    1d50:	dfc00117 	ldw	ra,4(sp)
    1d54:	df000017 	ldw	fp,0(sp)
    1d58:	dec00204 	addi	sp,sp,8
    1d5c:	f800283a 	ret

00001d60 <nummer6>:

static void nummer6(int q){
    1d60:	defffc04 	addi	sp,sp,-16
    1d64:	dfc00315 	stw	ra,12(sp)
    1d68:	df000215 	stw	fp,8(sp)
    1d6c:	df000204 	addi	fp,sp,8
    1d70:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    1d74:	d1282617 	ldw	r4,-24424(gp)
    1d78:	d0a82617 	ldw	r2,-24424(gp)
    1d7c:	10c00084 	addi	r3,r2,2
    1d80:	00804034 	movhi	r2,256
    1d84:	10bfffc4 	addi	r2,r2,-1
    1d88:	d8800015 	stw	r2,0(sp)
    1d8c:	01400504 	movi	r5,20
    1d90:	180d883a 	mov	r6,r3
    1d94:	01c00f04 	movi	r7,60
    1d98:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1d9c:	d1282617 	ldw	r4,-24424(gp)
    1da0:	d0a82617 	ldw	r2,-24424(gp)
    1da4:	10c00504 	addi	r3,r2,20
    1da8:	00804034 	movhi	r2,256
    1dac:	10bfffc4 	addi	r2,r2,-1
    1db0:	d8800015 	stw	r2,0(sp)
    1db4:	01400504 	movi	r5,20
    1db8:	180d883a 	mov	r6,r3
    1dbc:	01c00584 	movi	r7,22
    1dc0:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    1dc4:	d1282617 	ldw	r4,-24424(gp)
    1dc8:	d0a82617 	ldw	r2,-24424(gp)
    1dcc:	10c00504 	addi	r3,r2,20
    1dd0:	00804034 	movhi	r2,256
    1dd4:	10bfffc4 	addi	r2,r2,-1
    1dd8:	d8800015 	stw	r2,0(sp)
    1ddc:	01400e84 	movi	r5,58
    1de0:	180d883a 	mov	r6,r3
    1de4:	01c00f04 	movi	r7,60
    1de8:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn rechts
    1dec:	d0a82617 	ldw	r2,-24424(gp)
    1df0:	11000484 	addi	r4,r2,18
    1df4:	d0a82617 	ldw	r2,-24424(gp)
    1df8:	10c00504 	addi	r3,r2,20
    1dfc:	00804034 	movhi	r2,256
    1e00:	10bfffc4 	addi	r2,r2,-1
    1e04:	d8800015 	stw	r2,0(sp)
    1e08:	01400a04 	movi	r5,40
    1e0c:	180d883a 	mov	r6,r3
    1e10:	01c00e84 	movi	r7,58
    1e14:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    1e18:	d1282617 	ldw	r4,-24424(gp)
    1e1c:	d0a82617 	ldw	r2,-24424(gp)
    1e20:	10c00504 	addi	r3,r2,20
    1e24:	00804034 	movhi	r2,256
    1e28:	10bfffc4 	addi	r2,r2,-1
    1e2c:	d8800015 	stw	r2,0(sp)
    1e30:	014009c4 	movi	r5,39
    1e34:	180d883a 	mov	r6,r3
    1e38:	01c00a44 	movi	r7,41
    1e3c:	0002c540 	call	2c54 <VGA_box>
}
    1e40:	e037883a 	mov	sp,fp
    1e44:	dfc00117 	ldw	ra,4(sp)
    1e48:	df000017 	ldw	fp,0(sp)
    1e4c:	dec00204 	addi	sp,sp,8
    1e50:	f800283a 	ret

00001e54 <nummer7>:

static void nummer7(int q){
    1e54:	defffc04 	addi	sp,sp,-16
    1e58:	dfc00315 	stw	ra,12(sp)
    1e5c:	df000215 	stw	fp,8(sp)
    1e60:	df000204 	addi	fp,sp,8
    1e64:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1e68:	d0a82617 	ldw	r2,-24424(gp)
    1e6c:	11000484 	addi	r4,r2,18
    1e70:	d0a82617 	ldw	r2,-24424(gp)
    1e74:	10c00504 	addi	r3,r2,20
    1e78:	00804034 	movhi	r2,256
    1e7c:	10bfffc4 	addi	r2,r2,-1
    1e80:	d8800015 	stw	r2,0(sp)
    1e84:	01400504 	movi	r5,20
    1e88:	180d883a 	mov	r6,r3
    1e8c:	01c00f04 	movi	r7,60
    1e90:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1e94:	d1282617 	ldw	r4,-24424(gp)
    1e98:	d0a82617 	ldw	r2,-24424(gp)
    1e9c:	10c00504 	addi	r3,r2,20
    1ea0:	00804034 	movhi	r2,256
    1ea4:	10bfffc4 	addi	r2,r2,-1
    1ea8:	d8800015 	stw	r2,0(sp)
    1eac:	01400504 	movi	r5,20
    1eb0:	180d883a 	mov	r6,r3
    1eb4:	01c00584 	movi	r7,22
    1eb8:	0002c540 	call	2c54 <VGA_box>
}
    1ebc:	e037883a 	mov	sp,fp
    1ec0:	dfc00117 	ldw	ra,4(sp)
    1ec4:	df000017 	ldw	fp,0(sp)
    1ec8:	dec00204 	addi	sp,sp,8
    1ecc:	f800283a 	ret

00001ed0 <nummer8>:

static void nummer8(int q){
    1ed0:	defffc04 	addi	sp,sp,-16
    1ed4:	dfc00315 	stw	ra,12(sp)
    1ed8:	df000215 	stw	fp,8(sp)
    1edc:	df000204 	addi	fp,sp,8
    1ee0:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1ee4:	d0a82617 	ldw	r2,-24424(gp)
    1ee8:	11000484 	addi	r4,r2,18
    1eec:	d0a82617 	ldw	r2,-24424(gp)
    1ef0:	10c00504 	addi	r3,r2,20
    1ef4:	00804034 	movhi	r2,256
    1ef8:	10bfffc4 	addi	r2,r2,-1
    1efc:	d8800015 	stw	r2,0(sp)
    1f00:	01400504 	movi	r5,20
    1f04:	180d883a 	mov	r6,r3
    1f08:	01c00f04 	movi	r7,60
    1f0c:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    1f10:	d1282617 	ldw	r4,-24424(gp)
    1f14:	d0a82617 	ldw	r2,-24424(gp)
    1f18:	10c00084 	addi	r3,r2,2
    1f1c:	00804034 	movhi	r2,256
    1f20:	10bfffc4 	addi	r2,r2,-1
    1f24:	d8800015 	stw	r2,0(sp)
    1f28:	01400504 	movi	r5,20
    1f2c:	180d883a 	mov	r6,r3
    1f30:	01c00f04 	movi	r7,60
    1f34:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1f38:	d1282617 	ldw	r4,-24424(gp)
    1f3c:	d0a82617 	ldw	r2,-24424(gp)
    1f40:	10c00504 	addi	r3,r2,20
    1f44:	00804034 	movhi	r2,256
    1f48:	10bfffc4 	addi	r2,r2,-1
    1f4c:	d8800015 	stw	r2,0(sp)
    1f50:	01400504 	movi	r5,20
    1f54:	180d883a 	mov	r6,r3
    1f58:	01c00584 	movi	r7,22
    1f5c:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    1f60:	d1282617 	ldw	r4,-24424(gp)
    1f64:	d0a82617 	ldw	r2,-24424(gp)
    1f68:	10c00504 	addi	r3,r2,20
    1f6c:	00804034 	movhi	r2,256
    1f70:	10bfffc4 	addi	r2,r2,-1
    1f74:	d8800015 	stw	r2,0(sp)
    1f78:	014009c4 	movi	r5,39
    1f7c:	180d883a 	mov	r6,r3
    1f80:	01c00a44 	movi	r7,41
    1f84:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    1f88:	d1282617 	ldw	r4,-24424(gp)
    1f8c:	d0a82617 	ldw	r2,-24424(gp)
    1f90:	10c00504 	addi	r3,r2,20
    1f94:	00804034 	movhi	r2,256
    1f98:	10bfffc4 	addi	r2,r2,-1
    1f9c:	d8800015 	stw	r2,0(sp)
    1fa0:	01400e84 	movi	r5,58
    1fa4:	180d883a 	mov	r6,r3
    1fa8:	01c00f04 	movi	r7,60
    1fac:	0002c540 	call	2c54 <VGA_box>
}
    1fb0:	e037883a 	mov	sp,fp
    1fb4:	dfc00117 	ldw	ra,4(sp)
    1fb8:	df000017 	ldw	fp,0(sp)
    1fbc:	dec00204 	addi	sp,sp,8
    1fc0:	f800283a 	ret

00001fc4 <nummer9>:

static void nummer9(int q){
    1fc4:	defffc04 	addi	sp,sp,-16
    1fc8:	dfc00315 	stw	ra,12(sp)
    1fcc:	df000215 	stw	fp,8(sp)
    1fd0:	df000204 	addi	fp,sp,8
    1fd4:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1fd8:	d0a82617 	ldw	r2,-24424(gp)
    1fdc:	11000484 	addi	r4,r2,18
    1fe0:	d0a82617 	ldw	r2,-24424(gp)
    1fe4:	10c00504 	addi	r3,r2,20
    1fe8:	00804034 	movhi	r2,256
    1fec:	10bfffc4 	addi	r2,r2,-1
    1ff0:	d8800015 	stw	r2,0(sp)
    1ff4:	01400504 	movi	r5,20
    1ff8:	180d883a 	mov	r6,r3
    1ffc:	01c00f04 	movi	r7,60
    2000:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    2004:	d1282617 	ldw	r4,-24424(gp)
    2008:	d0a82617 	ldw	r2,-24424(gp)
    200c:	10c00084 	addi	r3,r2,2
    2010:	00804034 	movhi	r2,256
    2014:	10bfffc4 	addi	r2,r2,-1
    2018:	d8800015 	stw	r2,0(sp)
    201c:	01400504 	movi	r5,20
    2020:	180d883a 	mov	r6,r3
    2024:	01c00a04 	movi	r7,40
    2028:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    202c:	d1282617 	ldw	r4,-24424(gp)
    2030:	d0a82617 	ldw	r2,-24424(gp)
    2034:	10c00504 	addi	r3,r2,20
    2038:	00804034 	movhi	r2,256
    203c:	10bfffc4 	addi	r2,r2,-1
    2040:	d8800015 	stw	r2,0(sp)
    2044:	01400504 	movi	r5,20
    2048:	180d883a 	mov	r6,r3
    204c:	01c00584 	movi	r7,22
    2050:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    2054:	d1282617 	ldw	r4,-24424(gp)
    2058:	d0a82617 	ldw	r2,-24424(gp)
    205c:	10c00504 	addi	r3,r2,20
    2060:	00804034 	movhi	r2,256
    2064:	10bfffc4 	addi	r2,r2,-1
    2068:	d8800015 	stw	r2,0(sp)
    206c:	014009c4 	movi	r5,39
    2070:	180d883a 	mov	r6,r3
    2074:	01c00a44 	movi	r7,41
    2078:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    207c:	d1282617 	ldw	r4,-24424(gp)
    2080:	d0a82617 	ldw	r2,-24424(gp)
    2084:	10c00504 	addi	r3,r2,20
    2088:	00804034 	movhi	r2,256
    208c:	10bfffc4 	addi	r2,r2,-1
    2090:	d8800015 	stw	r2,0(sp)
    2094:	01400e84 	movi	r5,58
    2098:	180d883a 	mov	r6,r3
    209c:	01c00f04 	movi	r7,60
    20a0:	0002c540 	call	2c54 <VGA_box>
}
    20a4:	e037883a 	mov	sp,fp
    20a8:	dfc00117 	ldw	ra,4(sp)
    20ac:	df000017 	ldw	fp,0(sp)
    20b0:	dec00204 	addi	sp,sp,8
    20b4:	f800283a 	ret

000020b8 <nummer0>:

static void nummer0(int q){
    20b8:	defffc04 	addi	sp,sp,-16
    20bc:	dfc00315 	stw	ra,12(sp)
    20c0:	df000215 	stw	fp,8(sp)
    20c4:	df000204 	addi	fp,sp,8
    20c8:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    20cc:	d0a82617 	ldw	r2,-24424(gp)
    20d0:	11000484 	addi	r4,r2,18
    20d4:	d0a82617 	ldw	r2,-24424(gp)
    20d8:	10c00504 	addi	r3,r2,20
    20dc:	00804034 	movhi	r2,256
    20e0:	10bfffc4 	addi	r2,r2,-1
    20e4:	d8800015 	stw	r2,0(sp)
    20e8:	01400504 	movi	r5,20
    20ec:	180d883a 	mov	r6,r3
    20f0:	01c00f04 	movi	r7,60
    20f4:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    20f8:	d1282617 	ldw	r4,-24424(gp)
    20fc:	d0a82617 	ldw	r2,-24424(gp)
    2100:	10c00084 	addi	r3,r2,2
    2104:	00804034 	movhi	r2,256
    2108:	10bfffc4 	addi	r2,r2,-1
    210c:	d8800015 	stw	r2,0(sp)
    2110:	01400504 	movi	r5,20
    2114:	180d883a 	mov	r6,r3
    2118:	01c00f04 	movi	r7,60
    211c:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2120:	d1282617 	ldw	r4,-24424(gp)
    2124:	d0a82617 	ldw	r2,-24424(gp)
    2128:	10c00504 	addi	r3,r2,20
    212c:	00804034 	movhi	r2,256
    2130:	10bfffc4 	addi	r2,r2,-1
    2134:	d8800015 	stw	r2,0(sp)
    2138:	01400504 	movi	r5,20
    213c:	180d883a 	mov	r6,r3
    2140:	01c00584 	movi	r7,22
    2144:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2148:	d1282617 	ldw	r4,-24424(gp)
    214c:	d0a82617 	ldw	r2,-24424(gp)
    2150:	10c00504 	addi	r3,r2,20
    2154:	00804034 	movhi	r2,256
    2158:	10bfffc4 	addi	r2,r2,-1
    215c:	d8800015 	stw	r2,0(sp)
    2160:	01400e84 	movi	r5,58
    2164:	180d883a 	mov	r6,r3
    2168:	01c00f04 	movi	r7,60
    216c:	0002c540 	call	2c54 <VGA_box>
}
    2170:	e037883a 	mov	sp,fp
    2174:	dfc00117 	ldw	ra,4(sp)
    2178:	df000017 	ldw	fp,0(sp)
    217c:	dec00204 	addi	sp,sp,8
    2180:	f800283a 	ret

00002184 <exec>:

void(*nummer[])(void) = { nummer0, nummer1, nummer2, nummer3, nummer4, nummer5, nummer6, nummer7, nummer8, nummer9 };

void exec(int value)
{
    2184:	defffd04 	addi	sp,sp,-12
    2188:	dfc00215 	stw	ra,8(sp)
    218c:	df000115 	stw	fp,4(sp)
    2190:	df000104 	addi	fp,sp,4
    2194:	e13fff15 	stw	r4,-4(fp)
	if (value) {
    2198:	e0bfff17 	ldw	r2,-4(fp)
    219c:	10001126 	beq	r2,zero,21e4 <exec+0x60>
		exec(value / 10);
    21a0:	e0ffff17 	ldw	r3,-4(fp)
    21a4:	00800284 	movi	r2,10
    21a8:	1885283a 	div	r2,r3,r2
    21ac:	1009883a 	mov	r4,r2
    21b0:	00021840 	call	2184 <exec>
		nummer[value % 10]();
    21b4:	e0bfff17 	ldw	r2,-4(fp)
    21b8:	00c00284 	movi	r3,10
    21bc:	10c7283a 	div	r3,r2,r3
    21c0:	18c002a4 	muli	r3,r3,10
    21c4:	10c7c83a 	sub	r3,r2,r3
    21c8:	008000b4 	movhi	r2,2
    21cc:	1081f204 	addi	r2,r2,1992
    21d0:	18c7883a 	add	r3,r3,r3
    21d4:	18c7883a 	add	r3,r3,r3
    21d8:	10c5883a 	add	r2,r2,r3
    21dc:	10800017 	ldw	r2,0(r2)
    21e0:	103ee83a 	callr	r2
	}
}
    21e4:	e037883a 	mov	sp,fp
    21e8:	dfc00117 	ldw	ra,4(sp)
    21ec:	df000017 	ldw	fp,0(sp)
    21f0:	dec00204 	addi	sp,sp,8
    21f4:	f800283a 	ret

000021f8 <menu>:
int eenkeer = 1;
int onePress = 1;
int last;
int changed;

void menu(void* pdata){
    21f8:	defffa04 	addi	sp,sp,-24
    21fc:	dfc00515 	stw	ra,20(sp)
    2200:	df000415 	stw	fp,16(sp)
    2204:	df000404 	addi	fp,sp,16
    2208:	e13fff15 	stw	r4,-4(fp)
	int ID = (int*)pdata;
    220c:	e0bfff17 	ldw	r2,-4(fp)
    2210:	e0bffd15 	stw	r2,-12(fp)
	INT8U err;

	teken_menu();
    2214:	00028d40 	call	28d4 <teken_menu>

	while(1){
		OSFlagPend(Flags, Menu_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    2218:	d0e81717 	ldw	r3,-24484(gp)
    221c:	e0bffe04 	addi	r2,fp,-8
    2220:	d8800015 	stw	r2,0(sp)
    2224:	1809883a 	mov	r4,r3
    2228:	01400044 	movi	r5,1
    222c:	000d883a 	mov	r6,zero
    2230:	000f883a 	mov	r7,zero
    2234:	001633c0 	call	1633c <OSFlagPend>

		if (controller(ID) == 1){
    2238:	e13ffd17 	ldw	r4,-12(fp)
    223c:	000039c0 	call	39c <controller>
    2240:	10800058 	cmpnei	r2,r2,1
    2244:	1000111e 	bne	r2,zero,228c <menu+0x94>
			if(changed != 0){
    2248:	d0a82917 	ldw	r2,-24412(gp)
    224c:	10000926 	beq	r2,zero,2274 <menu+0x7c>
				gameModeMenu++;
    2250:	d0a00317 	ldw	r2,-32756(gp)
    2254:	10800044 	addi	r2,r2,1
    2258:	d0a00315 	stw	r2,-32756(gp)
				eenkeer = 1;
    225c:	00800044 	movi	r2,1
    2260:	d0a00a15 	stw	r2,-32728(gp)
				changed=0;
    2264:	d0282915 	stw	zero,-24412(gp)
				printf("heeft 1 gereturned \n");
    2268:	010000b4 	movhi	r4,2
    226c:	21004404 	addi	r4,r4,272
    2270:	00036cc0 	call	36cc <puts>
			}
			if (gameModeMenu >= 5){
    2274:	d0a00317 	ldw	r2,-32756(gp)
    2278:	10800150 	cmplti	r2,r2,5
    227c:	1000161e 	bne	r2,zero,22d8 <menu+0xe0>
				gameModeMenu = 1;
    2280:	00800044 	movi	r2,1
    2284:	d0a00315 	stw	r2,-32756(gp)
    2288:	00001306 	br	22d8 <menu+0xe0>
			}
		} else if (controller(ID) == 0){
    228c:	e13ffd17 	ldw	r4,-12(fp)
    2290:	000039c0 	call	39c <controller>
    2294:	1000101e 	bne	r2,zero,22d8 <menu+0xe0>
			if(changed !=0){
    2298:	d0a82917 	ldw	r2,-24412(gp)
    229c:	10000a26 	beq	r2,zero,22c8 <menu+0xd0>
				gameModeMenu--;
    22a0:	d0a00317 	ldw	r2,-32756(gp)
    22a4:	10bfffc4 	addi	r2,r2,-1
    22a8:	d0a00315 	stw	r2,-32756(gp)
				last=0;
    22ac:	d0282815 	stw	zero,-24416(gp)
				changed=0;
    22b0:	d0282915 	stw	zero,-24412(gp)
				eenkeer = 1;
    22b4:	00800044 	movi	r2,1
    22b8:	d0a00a15 	stw	r2,-32728(gp)
				printf("heeft 0 gereturned \n");
    22bc:	010000b4 	movhi	r4,2
    22c0:	21004904 	addi	r4,r4,292
    22c4:	00036cc0 	call	36cc <puts>
			}
			if (gameModeMenu <= 0){
    22c8:	d0a00317 	ldw	r2,-32756(gp)
    22cc:	00800216 	blt	zero,r2,22d8 <menu+0xe0>
				gameModeMenu = 4;
    22d0:	00800104 	movi	r2,4
    22d4:	d0a00315 	stw	r2,-32756(gp)
			}
		}
		OSTimeDly(20);
    22d8:	01000504 	movi	r4,20
    22dc:	001bb500 	call	1bb50 <OSTimeDly>
	}
    22e0:	003fcd06 	br	2218 <__alt_mem_Flash_flash_data+0xf4002218>

000022e4 <selecteerMenu>:

}

void selecteerMenu(void *pdata){
    22e4:	defffa04 	addi	sp,sp,-24
    22e8:	dfc00515 	stw	ra,20(sp)
    22ec:	df000415 	stw	fp,16(sp)
    22f0:	df000404 	addi	fp,sp,16
    22f4:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	int ID = (int*)pdata;
    22f8:	e0bfff17 	ldw	r2,-4(fp)
    22fc:	e0bffd15 	stw	r2,-12(fp)



	while(1){
	OSFlagPend(Flags, Menu2_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    2300:	d0e81717 	ldw	r3,-24484(gp)
    2304:	e0bffe04 	addi	r2,fp,-8
    2308:	d8800015 	stw	r2,0(sp)
    230c:	1809883a 	mov	r4,r3
    2310:	01400404 	movi	r5,16
    2314:	000d883a 	mov	r6,zero
    2318:	000f883a 	mov	r7,zero
    231c:	001633c0 	call	1633c <OSFlagPend>

		if (gameModeMenu == 1){
    2320:	d0a00317 	ldw	r2,-32756(gp)
    2324:	10800058 	cmpnei	r2,r2,1
    2328:	1000411e 	bne	r2,zero,2430 <selecteerMenu+0x14c>
			if(eenkeer == 1){
    232c:	d0a00a17 	ldw	r2,-32728(gp)
    2330:	10800058 	cmpnei	r2,r2,1
    2334:	10001f1e 	bne	r2,zero,23b4 <selecteerMenu+0xd0>
				clearScreen();
    2338:	00027140 	call	2714 <clearScreen>
				VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
    233c:	d0a00417 	ldw	r2,-32752(gp)
    2340:	1085883a 	add	r2,r2,r2
    2344:	1085883a 	add	r2,r2,r2
    2348:	1009883a 	mov	r4,r2
    234c:	d0a00617 	ldw	r2,-32744(gp)
    2350:	1085883a 	add	r2,r2,r2
    2354:	1085883a 	add	r2,r2,r2
    2358:	100b883a 	mov	r5,r2
    235c:	d0a00517 	ldw	r2,-32748(gp)
    2360:	1085883a 	add	r2,r2,r2
    2364:	1085883a 	add	r2,r2,r2
    2368:	100d883a 	mov	r6,r2
    236c:	d0a00717 	ldw	r2,-32740(gp)
    2370:	1085883a 	add	r2,r2,r2
    2374:	1085883a 	add	r2,r2,r2
    2378:	1007883a 	mov	r3,r2
    237c:	00be0014 	movui	r2,63488
    2380:	d8800015 	stw	r2,0(sp)
    2384:	180f883a 	mov	r7,r3
    2388:	0002c540 	call	2c54 <VGA_box>
				VGA_text (xMenu, yMenu, "Singleplayer");
    238c:	d0e00817 	ldw	r3,-32736(gp)
    2390:	d0a00917 	ldw	r2,-32732(gp)
    2394:	1809883a 	mov	r4,r3
    2398:	100b883a 	mov	r5,r2
    239c:	018000b4 	movhi	r6,2
    23a0:	31804e04 	addi	r6,r6,312
    23a4:	0002d080 	call	2d08 <VGA_text>
				eenkeer = 0;
    23a8:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    23ac:	00800044 	movi	r2,1
    23b0:	d0a82915 	stw	r2,-24412(gp)
			}
			if(controller(ID) == 2){
    23b4:	e13ffd17 	ldw	r4,-12(fp)
    23b8:	000039c0 	call	39c <controller>
    23bc:	10800098 	cmpnei	r2,r2,2
    23c0:	1000d11e 	bne	r2,zero,2708 <selecteerMenu+0x424>
				clearScreen();
    23c4:	00027140 	call	2714 <clearScreen>
				clearText();
    23c8:	00027540 	call	2754 <clearText>
				printf("start Singleplayer\n");
    23cc:	010000b4 	movhi	r4,2
    23d0:	21005204 	addi	r4,r4,328
    23d4:	00036cc0 	call	36cc <puts>
				OSFlagPost(Flags,C1_Flag, OS_FLAG_CLR, &err);
    23d8:	d0e81717 	ldw	r3,-24484(gp)
    23dc:	e0bffe04 	addi	r2,fp,-8
    23e0:	1809883a 	mov	r4,r3
    23e4:	01400104 	movi	r5,4
    23e8:	000d883a 	mov	r6,zero
    23ec:	100f883a 	mov	r7,r2
    23f0:	00169940 	call	16994 <OSFlagPost>
				OSFlagPost(Flags_Games, Singleplayer_Flag, OS_FLAG_CLR, &err);
    23f4:	d0e81517 	ldw	r3,-24492(gp)
    23f8:	e0bffe04 	addi	r2,fp,-8
    23fc:	1809883a 	mov	r4,r3
    2400:	01400804 	movi	r5,32
    2404:	000d883a 	mov	r6,zero
    2408:	100f883a 	mov	r7,r2
    240c:	00169940 	call	16994 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    2410:	d0e81717 	ldw	r3,-24484(gp)
    2414:	e0bffe04 	addi	r2,fp,-8
    2418:	1809883a 	mov	r4,r3
    241c:	01400444 	movi	r5,17
    2420:	01800044 	movi	r6,1
    2424:	100f883a 	mov	r7,r2
    2428:	00169940 	call	16994 <OSFlagPost>
    242c:	0000b606 	br	2708 <selecteerMenu+0x424>
			}
		} else if (gameModeMenu == 2){
    2430:	d0a00317 	ldw	r2,-32756(gp)
    2434:	10800098 	cmpnei	r2,r2,2
    2438:	1000441e 	bne	r2,zero,254c <selecteerMenu+0x268>
			if(eenkeer == 1){
    243c:	d0a00a17 	ldw	r2,-32728(gp)
    2440:	10800058 	cmpnei	r2,r2,1
    2444:	1000221e 	bne	r2,zero,24d0 <selecteerMenu+0x1ec>
				clearScreen();
    2448:	00027140 	call	2714 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    244c:	d0a00417 	ldw	r2,-32752(gp)
    2450:	1085883a 	add	r2,r2,r2
    2454:	1085883a 	add	r2,r2,r2
    2458:	1009883a 	mov	r4,r2
    245c:	d0a00617 	ldw	r2,-32744(gp)
    2460:	10800104 	addi	r2,r2,4
    2464:	1085883a 	add	r2,r2,r2
    2468:	1085883a 	add	r2,r2,r2
    246c:	100b883a 	mov	r5,r2
    2470:	d0a00517 	ldw	r2,-32748(gp)
    2474:	1085883a 	add	r2,r2,r2
    2478:	1085883a 	add	r2,r2,r2
    247c:	100d883a 	mov	r6,r2
    2480:	d0a00717 	ldw	r2,-32740(gp)
    2484:	10800104 	addi	r2,r2,4
    2488:	1085883a 	add	r2,r2,r2
    248c:	1085883a 	add	r2,r2,r2
    2490:	1007883a 	mov	r3,r2
    2494:	00be0014 	movui	r2,63488
    2498:	d8800015 	stw	r2,0(sp)
    249c:	180f883a 	mov	r7,r3
    24a0:	0002c540 	call	2c54 <VGA_box>
				VGA_text (xMenu, yMenu + 4, "Multiplayer");
    24a4:	d0e00817 	ldw	r3,-32736(gp)
    24a8:	d0a00917 	ldw	r2,-32732(gp)
    24ac:	10800104 	addi	r2,r2,4
    24b0:	1809883a 	mov	r4,r3
    24b4:	100b883a 	mov	r5,r2
    24b8:	018000b4 	movhi	r6,2
    24bc:	31805704 	addi	r6,r6,348
    24c0:	0002d080 	call	2d08 <VGA_text>
				eenkeer = 0;
    24c4:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    24c8:	00800044 	movi	r2,1
    24cc:	d0a82915 	stw	r2,-24412(gp)
			}
			if(controller(ID) == 2){
    24d0:	e13ffd17 	ldw	r4,-12(fp)
    24d4:	000039c0 	call	39c <controller>
    24d8:	10800098 	cmpnei	r2,r2,2
    24dc:	10008a1e 	bne	r2,zero,2708 <selecteerMenu+0x424>
				clearScreen();
    24e0:	00027140 	call	2714 <clearScreen>
				clearText();
    24e4:	00027540 	call	2754 <clearText>
				printf("start game\n");
    24e8:	010000b4 	movhi	r4,2
    24ec:	21005a04 	addi	r4,r4,360
    24f0:	00036cc0 	call	36cc <puts>
				OSFlagPost(Flags, C1_Flag + C2_Flag, OS_FLAG_CLR, &err);
    24f4:	d0e81717 	ldw	r3,-24484(gp)
    24f8:	e0bffe04 	addi	r2,fp,-8
    24fc:	1809883a 	mov	r4,r3
    2500:	01400304 	movi	r5,12
    2504:	000d883a 	mov	r6,zero
    2508:	100f883a 	mov	r7,r2
    250c:	00169940 	call	16994 <OSFlagPost>
				OSFlagPost(Flags_Games,Game_Flag, OS_FLAG_CLR, &err);
    2510:	d0e81517 	ldw	r3,-24492(gp)
    2514:	e0bffe04 	addi	r2,fp,-8
    2518:	1809883a 	mov	r4,r3
    251c:	01400084 	movi	r5,2
    2520:	000d883a 	mov	r6,zero
    2524:	100f883a 	mov	r7,r2
    2528:	00169940 	call	16994 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    252c:	d0e81717 	ldw	r3,-24484(gp)
    2530:	e0bffe04 	addi	r2,fp,-8
    2534:	1809883a 	mov	r4,r3
    2538:	01400444 	movi	r5,17
    253c:	01800044 	movi	r6,1
    2540:	100f883a 	mov	r7,r2
    2544:	00169940 	call	16994 <OSFlagPost>
    2548:	00006f06 	br	2708 <selecteerMenu+0x424>
			}

		} else if (gameModeMenu == 3){
    254c:	d0a00317 	ldw	r2,-32756(gp)
    2550:	108000d8 	cmpnei	r2,r2,3
    2554:	1000261e 	bne	r2,zero,25f0 <selecteerMenu+0x30c>
			if(eenkeer == 1){
    2558:	d0a00a17 	ldw	r2,-32728(gp)
    255c:	10800058 	cmpnei	r2,r2,1
    2560:	1000691e 	bne	r2,zero,2708 <selecteerMenu+0x424>
				clearScreen();
    2564:	00027140 	call	2714 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 32, xRechts*4, xOnder*4 + 32, rood);
    2568:	d0a00417 	ldw	r2,-32752(gp)
    256c:	1085883a 	add	r2,r2,r2
    2570:	1085883a 	add	r2,r2,r2
    2574:	1009883a 	mov	r4,r2
    2578:	d0a00617 	ldw	r2,-32744(gp)
    257c:	10800204 	addi	r2,r2,8
    2580:	1085883a 	add	r2,r2,r2
    2584:	1085883a 	add	r2,r2,r2
    2588:	100b883a 	mov	r5,r2
    258c:	d0a00517 	ldw	r2,-32748(gp)
    2590:	1085883a 	add	r2,r2,r2
    2594:	1085883a 	add	r2,r2,r2
    2598:	100d883a 	mov	r6,r2
    259c:	d0a00717 	ldw	r2,-32740(gp)
    25a0:	10800204 	addi	r2,r2,8
    25a4:	1085883a 	add	r2,r2,r2
    25a8:	1085883a 	add	r2,r2,r2
    25ac:	1007883a 	mov	r3,r2
    25b0:	00be0014 	movui	r2,63488
    25b4:	d8800015 	stw	r2,0(sp)
    25b8:	180f883a 	mov	r7,r3
    25bc:	0002c540 	call	2c54 <VGA_box>
				VGA_text (xMenu, yMenu +  8, "Highscores");
    25c0:	d0e00817 	ldw	r3,-32736(gp)
    25c4:	d0a00917 	ldw	r2,-32732(gp)
    25c8:	10800204 	addi	r2,r2,8
    25cc:	1809883a 	mov	r4,r3
    25d0:	100b883a 	mov	r5,r2
    25d4:	018000b4 	movhi	r6,2
    25d8:	31805d04 	addi	r6,r6,372
    25dc:	0002d080 	call	2d08 <VGA_text>
				eenkeer = 0;
    25e0:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    25e4:	00800044 	movi	r2,1
    25e8:	d0a82915 	stw	r2,-24412(gp)
    25ec:	00004606 	br	2708 <selecteerMenu+0x424>

			}
		} else if (gameModeMenu == 4){
    25f0:	d0a00317 	ldw	r2,-32756(gp)
    25f4:	10800118 	cmpnei	r2,r2,4
    25f8:	1000431e 	bne	r2,zero,2708 <selecteerMenu+0x424>
			if(eenkeer == 1){
    25fc:	d0a00a17 	ldw	r2,-32728(gp)
    2600:	10800058 	cmpnei	r2,r2,1
    2604:	1000221e 	bne	r2,zero,2690 <selecteerMenu+0x3ac>
				clearScreen();
    2608:	00027140 	call	2714 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 48, xRechts*4, xOnder*4 + 48, rood);
    260c:	d0a00417 	ldw	r2,-32752(gp)
    2610:	1085883a 	add	r2,r2,r2
    2614:	1085883a 	add	r2,r2,r2
    2618:	1009883a 	mov	r4,r2
    261c:	d0a00617 	ldw	r2,-32744(gp)
    2620:	10800304 	addi	r2,r2,12
    2624:	1085883a 	add	r2,r2,r2
    2628:	1085883a 	add	r2,r2,r2
    262c:	100b883a 	mov	r5,r2
    2630:	d0a00517 	ldw	r2,-32748(gp)
    2634:	1085883a 	add	r2,r2,r2
    2638:	1085883a 	add	r2,r2,r2
    263c:	100d883a 	mov	r6,r2
    2640:	d0a00717 	ldw	r2,-32740(gp)
    2644:	10800304 	addi	r2,r2,12
    2648:	1085883a 	add	r2,r2,r2
    264c:	1085883a 	add	r2,r2,r2
    2650:	1007883a 	mov	r3,r2
    2654:	00be0014 	movui	r2,63488
    2658:	d8800015 	stw	r2,0(sp)
    265c:	180f883a 	mov	r7,r3
    2660:	0002c540 	call	2c54 <VGA_box>
				VGA_text (xMenu, yMenu + 12, "Tutorial");
    2664:	d0e00817 	ldw	r3,-32736(gp)
    2668:	d0a00917 	ldw	r2,-32732(gp)
    266c:	10800304 	addi	r2,r2,12
    2670:	1809883a 	mov	r4,r3
    2674:	100b883a 	mov	r5,r2
    2678:	018000b4 	movhi	r6,2
    267c:	31806004 	addi	r6,r6,384
    2680:	0002d080 	call	2d08 <VGA_text>
				eenkeer = 0;
    2684:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    2688:	00800044 	movi	r2,1
    268c:	d0a82915 	stw	r2,-24412(gp)

			}
			
			if(controller(ID) == 2){
    2690:	e13ffd17 	ldw	r4,-12(fp)
    2694:	000039c0 	call	39c <controller>
    2698:	10800098 	cmpnei	r2,r2,2
    269c:	10001a1e 	bne	r2,zero,2708 <selecteerMenu+0x424>
				clearScreen();
    26a0:	00027140 	call	2714 <clearScreen>
				clearText();
    26a4:	00027540 	call	2754 <clearText>
				printf("Start Tutorial\n");
    26a8:	010000b4 	movhi	r4,2
    26ac:	21006304 	addi	r4,r4,396
    26b0:	00036cc0 	call	36cc <puts>
				OSFlagPost(Flags, C1_Flag, OS_FLAG_CLR, &err);
    26b4:	d0e81717 	ldw	r3,-24484(gp)
    26b8:	e0bffe04 	addi	r2,fp,-8
    26bc:	1809883a 	mov	r4,r3
    26c0:	01400104 	movi	r5,4
    26c4:	000d883a 	mov	r6,zero
    26c8:	100f883a 	mov	r7,r2
    26cc:	00169940 	call	16994 <OSFlagPost>
				OSFlagPost(Flags_Games,Tutorial_Flag, OS_FLAG_CLR, &err);
    26d0:	d0e81517 	ldw	r3,-24492(gp)
    26d4:	e0bffe04 	addi	r2,fp,-8
    26d8:	1809883a 	mov	r4,r3
    26dc:	01401004 	movi	r5,64
    26e0:	000d883a 	mov	r6,zero
    26e4:	100f883a 	mov	r7,r2
    26e8:	00169940 	call	16994 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    26ec:	d0e81717 	ldw	r3,-24484(gp)
    26f0:	e0bffe04 	addi	r2,fp,-8
    26f4:	1809883a 	mov	r4,r3
    26f8:	01400444 	movi	r5,17
    26fc:	01800044 	movi	r6,1
    2700:	100f883a 	mov	r7,r2
    2704:	00169940 	call	16994 <OSFlagPost>
			}
		}

		OSTimeDly(20);
    2708:	01000504 	movi	r4,20
    270c:	001bb500 	call	1bb50 <OSTimeDly>
	}
    2710:	003efb06 	br	2300 <__alt_mem_Flash_flash_data+0xf4002300>

00002714 <clearScreen>:
}

void clearScreen(){
    2714:	defffd04 	addi	sp,sp,-12
    2718:	dfc00215 	stw	ra,8(sp)
    271c:	df000115 	stw	fp,4(sp)
    2720:	df000104 	addi	fp,sp,4
	VGA_box(25,70, 200,135, 0);
    2724:	d8000015 	stw	zero,0(sp)
    2728:	01000644 	movi	r4,25
    272c:	01401184 	movi	r5,70
    2730:	01803204 	movi	r6,200
    2734:	01c021c4 	movi	r7,135
    2738:	0002c540 	call	2c54 <VGA_box>
	del_middenlijn();
    273c:	0002e000 	call	2e00 <del_middenlijn>
}
    2740:	e037883a 	mov	sp,fp
    2744:	dfc00117 	ldw	ra,4(sp)
    2748:	df000017 	ldw	fp,0(sp)
    274c:	dec00204 	addi	sp,sp,8
    2750:	f800283a 	ret

00002754 <clearText>:

void clearText(){
    2754:	defffe04 	addi	sp,sp,-8
    2758:	dfc00115 	stw	ra,4(sp)
    275c:	df000015 	stw	fp,0(sp)
    2760:	d839883a 	mov	fp,sp
	VGA_text (xMenu, yMenu, "            ");
    2764:	d0e00817 	ldw	r3,-32736(gp)
    2768:	d0a00917 	ldw	r2,-32732(gp)
    276c:	1809883a 	mov	r4,r3
    2770:	100b883a 	mov	r5,r2
    2774:	018000b4 	movhi	r6,2
    2778:	31806704 	addi	r6,r6,412
    277c:	0002d080 	call	2d08 <VGA_text>
	VGA_text (xMenu, yMenu + 4, "           ");
    2780:	d0e00817 	ldw	r3,-32736(gp)
    2784:	d0a00917 	ldw	r2,-32732(gp)
    2788:	10800104 	addi	r2,r2,4
    278c:	1809883a 	mov	r4,r3
    2790:	100b883a 	mov	r5,r2
    2794:	018000b4 	movhi	r6,2
    2798:	31806b04 	addi	r6,r6,428
    279c:	0002d080 	call	2d08 <VGA_text>
	VGA_text (xMenu, yMenu+8, "          ");
    27a0:	d0e00817 	ldw	r3,-32736(gp)
    27a4:	d0a00917 	ldw	r2,-32732(gp)
    27a8:	10800204 	addi	r2,r2,8
    27ac:	1809883a 	mov	r4,r3
    27b0:	100b883a 	mov	r5,r2
    27b4:	018000b4 	movhi	r6,2
    27b8:	31806e04 	addi	r6,r6,440
    27bc:	0002d080 	call	2d08 <VGA_text>
	VGA_text (xMenu, yMenu+12, "        ");
    27c0:	d0e00817 	ldw	r3,-32736(gp)
    27c4:	d0a00917 	ldw	r2,-32732(gp)
    27c8:	10800304 	addi	r2,r2,12
    27cc:	1809883a 	mov	r4,r3
    27d0:	100b883a 	mov	r5,r2
    27d4:	018000b4 	movhi	r6,2
    27d8:	31807104 	addi	r6,r6,452
    27dc:	0002d080 	call	2d08 <VGA_text>
}
    27e0:	e037883a 	mov	sp,fp
    27e4:	dfc00117 	ldw	ra,4(sp)
    27e8:	df000017 	ldw	fp,0(sp)
    27ec:	dec00204 	addi	sp,sp,8
    27f0:	f800283a 	ret

000027f4 <tekenBox>:

void tekenBox(int Links, int Boven, int Rechts, int Onder, short Kleur){
    27f4:	defff804 	addi	sp,sp,-32
    27f8:	dfc00715 	stw	ra,28(sp)
    27fc:	df000615 	stw	fp,24(sp)
    2800:	df000604 	addi	fp,sp,24
    2804:	e13ffb15 	stw	r4,-20(fp)
    2808:	e17ffc15 	stw	r5,-16(fp)
    280c:	e1bffd15 	stw	r6,-12(fp)
    2810:	e1fffe15 	stw	r7,-8(fp)
    2814:	e0800217 	ldw	r2,8(fp)
    2818:	e0bfff0d 	sth	r2,-4(fp)
	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    281c:	e0bfff0f 	ldh	r2,-4(fp)
    2820:	d8800015 	stw	r2,0(sp)
    2824:	e13ffb17 	ldw	r4,-20(fp)
    2828:	e17ffc17 	ldw	r5,-16(fp)
    282c:	e1bffd17 	ldw	r6,-12(fp)
    2830:	e1fffe17 	ldw	r7,-8(fp)
    2834:	0002c540 	call	2c54 <VGA_box>
}
    2838:	e037883a 	mov	sp,fp
    283c:	dfc00117 	ldw	ra,4(sp)
    2840:	df000017 	ldw	fp,0(sp)
    2844:	dec00204 	addi	sp,sp,8
    2848:	f800283a 	ret

0000284c <tekenBox2>:
// tekenBox en tekenBox2 maken samen het visuele effect van het selecteren van een menu optie.
void tekenBox2(int Links, int Boven, int Rechts, int Onder, short Kleur){
    284c:	defff804 	addi	sp,sp,-32
    2850:	dfc00715 	stw	ra,28(sp)
    2854:	df000615 	stw	fp,24(sp)
    2858:	df000604 	addi	fp,sp,24
    285c:	e13ffb15 	stw	r4,-20(fp)
    2860:	e17ffc15 	stw	r5,-16(fp)
    2864:	e1bffd15 	stw	r6,-12(fp)
    2868:	e1fffe15 	stw	r7,-8(fp)
    286c:	e0800217 	ldw	r2,8(fp)
    2870:	e0bfff0d 	sth	r2,-4(fp)
	Links = Links + 1;
    2874:	e0bffb17 	ldw	r2,-20(fp)
    2878:	10800044 	addi	r2,r2,1
    287c:	e0bffb15 	stw	r2,-20(fp)
	Boven = Boven + 1;
    2880:	e0bffc17 	ldw	r2,-16(fp)
    2884:	10800044 	addi	r2,r2,1
    2888:	e0bffc15 	stw	r2,-16(fp)
	Rechts = Rechts - 1;
    288c:	e0bffd17 	ldw	r2,-12(fp)
    2890:	10bfffc4 	addi	r2,r2,-1
    2894:	e0bffd15 	stw	r2,-12(fp)
	Onder = Onder -1;
    2898:	e0bffe17 	ldw	r2,-8(fp)
    289c:	10bfffc4 	addi	r2,r2,-1
    28a0:	e0bffe15 	stw	r2,-8(fp)

	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    28a4:	e0bfff0f 	ldh	r2,-4(fp)
    28a8:	d8800015 	stw	r2,0(sp)
    28ac:	e13ffb17 	ldw	r4,-20(fp)
    28b0:	e17ffc17 	ldw	r5,-16(fp)
    28b4:	e1bffd17 	ldw	r6,-12(fp)
    28b8:	e1fffe17 	ldw	r7,-8(fp)
    28bc:	0002c540 	call	2c54 <VGA_box>
}
    28c0:	e037883a 	mov	sp,fp
    28c4:	dfc00117 	ldw	ra,4(sp)
    28c8:	df000017 	ldw	fp,0(sp)
    28cc:	dec00204 	addi	sp,sp,8
    28d0:	f800283a 	ret

000028d4 <teken_menu>:

void teken_menu(int ID){
    28d4:	defffc04 	addi	sp,sp,-16
    28d8:	dfc00315 	stw	ra,12(sp)
    28dc:	df000215 	stw	fp,8(sp)
    28e0:	df000204 	addi	fp,sp,8
    28e4:	e13fff15 	stw	r4,-4(fp)
	VGA_text (xMenu, yMenu, "Singleplayer");
    28e8:	d0e00817 	ldw	r3,-32736(gp)
    28ec:	d0a00917 	ldw	r2,-32732(gp)
    28f0:	1809883a 	mov	r4,r3
    28f4:	100b883a 	mov	r5,r2
    28f8:	018000b4 	movhi	r6,2
    28fc:	31804e04 	addi	r6,r6,312
    2900:	0002d080 	call	2d08 <VGA_text>
	VGA_text (xMenu, yMenu + 4, "Multiplayer");
    2904:	d0e00817 	ldw	r3,-32736(gp)
    2908:	d0a00917 	ldw	r2,-32732(gp)
    290c:	10800104 	addi	r2,r2,4
    2910:	1809883a 	mov	r4,r3
    2914:	100b883a 	mov	r5,r2
    2918:	018000b4 	movhi	r6,2
    291c:	31805704 	addi	r6,r6,348
    2920:	0002d080 	call	2d08 <VGA_text>
	VGA_text (xMenu, yMenu+8, "Highscores");
    2924:	d0e00817 	ldw	r3,-32736(gp)
    2928:	d0a00917 	ldw	r2,-32732(gp)
    292c:	10800204 	addi	r2,r2,8
    2930:	1809883a 	mov	r4,r3
    2934:	100b883a 	mov	r5,r2
    2938:	018000b4 	movhi	r6,2
    293c:	31805d04 	addi	r6,r6,372
    2940:	0002d080 	call	2d08 <VGA_text>
	VGA_text (xMenu, yMenu+12, "Tutorial");
    2944:	d0e00817 	ldw	r3,-32736(gp)
    2948:	d0a00917 	ldw	r2,-32732(gp)
    294c:	10800304 	addi	r2,r2,12
    2950:	1809883a 	mov	r4,r3
    2954:	100b883a 	mov	r5,r2
    2958:	018000b4 	movhi	r6,2
    295c:	31806004 	addi	r6,r6,384
    2960:	0002d080 	call	2d08 <VGA_text>
	if(ID == 1){
    2964:	e0bfff17 	ldw	r2,-4(fp)
    2968:	10800058 	cmpnei	r2,r2,1
    296c:	1000151e 	bne	r2,zero,29c4 <teken_menu+0xf0>
		VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
    2970:	d0a00417 	ldw	r2,-32752(gp)
    2974:	1085883a 	add	r2,r2,r2
    2978:	1085883a 	add	r2,r2,r2
    297c:	1009883a 	mov	r4,r2
    2980:	d0a00617 	ldw	r2,-32744(gp)
    2984:	1085883a 	add	r2,r2,r2
    2988:	1085883a 	add	r2,r2,r2
    298c:	100b883a 	mov	r5,r2
    2990:	d0a00517 	ldw	r2,-32748(gp)
    2994:	1085883a 	add	r2,r2,r2
    2998:	1085883a 	add	r2,r2,r2
    299c:	100d883a 	mov	r6,r2
    29a0:	d0a00717 	ldw	r2,-32740(gp)
    29a4:	1085883a 	add	r2,r2,r2
    29a8:	1085883a 	add	r2,r2,r2
    29ac:	1007883a 	mov	r3,r2
    29b0:	00be0014 	movui	r2,63488
    29b4:	d8800015 	stw	r2,0(sp)
    29b8:	180f883a 	mov	r7,r3
    29bc:	0002c540 	call	2c54 <VGA_box>
    29c0:	00001906 	br	2a28 <teken_menu+0x154>
	}else if(ID == 2){
    29c4:	e0bfff17 	ldw	r2,-4(fp)
    29c8:	10800098 	cmpnei	r2,r2,2
    29cc:	1000161e 	bne	r2,zero,2a28 <teken_menu+0x154>
		VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    29d0:	d0a00417 	ldw	r2,-32752(gp)
    29d4:	1085883a 	add	r2,r2,r2
    29d8:	1085883a 	add	r2,r2,r2
    29dc:	1009883a 	mov	r4,r2
    29e0:	d0a00617 	ldw	r2,-32744(gp)
    29e4:	10800104 	addi	r2,r2,4
    29e8:	1085883a 	add	r2,r2,r2
    29ec:	1085883a 	add	r2,r2,r2
    29f0:	100b883a 	mov	r5,r2
    29f4:	d0a00517 	ldw	r2,-32748(gp)
    29f8:	1085883a 	add	r2,r2,r2
    29fc:	1085883a 	add	r2,r2,r2
    2a00:	100d883a 	mov	r6,r2
    2a04:	d0a00717 	ldw	r2,-32740(gp)
    2a08:	10800104 	addi	r2,r2,4
    2a0c:	1085883a 	add	r2,r2,r2
    2a10:	1085883a 	add	r2,r2,r2
    2a14:	1007883a 	mov	r3,r2
    2a18:	00be0014 	movui	r2,63488
    2a1c:	d8800015 	stw	r2,0(sp)
    2a20:	180f883a 	mov	r7,r3
    2a24:	0002c540 	call	2c54 <VGA_box>
	}

}
    2a28:	e037883a 	mov	sp,fp
    2a2c:	dfc00117 	ldw	ra,4(sp)
    2a30:	df000017 	ldw	fp,0(sp)
    2a34:	dec00204 	addi	sp,sp,8
    2a38:	f800283a 	ret

00002a3c <main>:
void * Messages[500];


/* The main function creates two task and starts multi-tasking */
int main(void)
{
    2a3c:	defffb04 	addi	sp,sp,-20
    2a40:	dfc00415 	stw	ra,16(sp)
    2a44:	df000315 	stw	fp,12(sp)
    2a48:	df000304 	addi	fp,sp,12
	INT8U err;
	OSInit();
    2a4c:	001410c0 	call	1410c <OSInit>
	int counter = 0x50500;				// 1/(50 MHz) x (0x960000) ~= 200 msec
    2a50:	00800174 	movhi	r2,5
    2a54:	10814004 	addi	r2,r2,1280
    2a58:	e0bffe15 	stw	r2,-8(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
    2a5c:	d0a00c17 	ldw	r2,-32720(gp)
    2a60:	10800204 	addi	r2,r2,8
    2a64:	e0fffe17 	ldw	r3,-8(fp)
    2a68:	18ffffcc 	andi	r3,r3,65535
    2a6c:	10c00015 	stw	r3,0(r2)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
    2a70:	d0a00c17 	ldw	r2,-32720(gp)
    2a74:	10800304 	addi	r2,r2,12
    2a78:	e0fffe17 	ldw	r3,-8(fp)
    2a7c:	1806d43a 	srli	r3,r3,16
    2a80:	10c00015 	stw	r3,0(r2)

	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
    2a84:	d0a00c17 	ldw	r2,-32720(gp)
    2a88:	10800104 	addi	r2,r2,4
    2a8c:	00c001c4 	movi	r3,7
    2a90:	10c00015 	stw	r3,0(r2)

	Flags = OSFlagCreate(C1_Flag + C2_Flag, &err);
    2a94:	e0bfff04 	addi	r2,fp,-4
    2a98:	01000304 	movi	r4,12
    2a9c:	100b883a 	mov	r5,r2
    2aa0:	0015d240 	call	15d24 <OSFlagCreate>
    2aa4:	d0a81715 	stw	r2,-24484(gp)
	Flags_Games = OSFlagCreate(Game_Flag + Singleplayer_Flag + Tutorial_Flag, &err);
    2aa8:	e0bfff04 	addi	r2,fp,-4
    2aac:	01001884 	movi	r4,98
    2ab0:	100b883a 	mov	r5,r2
    2ab4:	0015d240 	call	15d24 <OSFlagCreate>
    2ab8:	d0a81515 	stw	r2,-24492(gp)


	gameSem = OSSemCreate(0);
    2abc:	0009883a 	mov	r4,zero
    2ac0:	00198040 	call	19804 <OSSemCreate>
    2ac4:	d0a82215 	stw	r2,-24440(gp)
	controllerSem = OSSemCreate(0);
    2ac8:	0009883a 	mov	r4,zero
    2acc:	00198040 	call	19804 <OSSemCreate>
    2ad0:	d0a81315 	stw	r2,-24500(gp)

	MailBox = OSMboxCreate((void *)0);
    2ad4:	0009883a 	mov	r4,zero
    2ad8:	00172d00 	call	172d0 <OSMboxCreate>
    2adc:	d0a81815 	stw	r2,-24480(gp)
	MailBox2 = OSMboxCreate((void *)0);
    2ae0:	0009883a 	mov	r4,zero
    2ae4:	00172d00 	call	172d0 <OSMboxCreate>
    2ae8:	d0a81615 	stw	r2,-24488(gp)


	VGA_box (0, 0, 319, 239, 0);						//clear screen
    2aec:	d8000015 	stw	zero,0(sp)
    2af0:	0009883a 	mov	r4,zero
    2af4:	000b883a 	mov	r5,zero
    2af8:	01804fc4 	movi	r6,319
    2afc:	01c03bc4 	movi	r7,239
    2b00:	0002c540 	call	2c54 <VGA_box>
	VGA_box (15, 50, 20, 100, 0x0000ff);				// links
    2b04:	00803fc4 	movi	r2,255
    2b08:	d8800015 	stw	r2,0(sp)
    2b0c:	010003c4 	movi	r4,15
    2b10:	01400c84 	movi	r5,50
    2b14:	01800504 	movi	r6,20
    2b18:	01c01904 	movi	r7,100
    2b1c:	0002c540 	call	2c54 <VGA_box>
	VGA_box (300, 50, 305, 100, 0x0000ff);				// rechts
    2b20:	00803fc4 	movi	r2,255
    2b24:	d8800015 	stw	r2,0(sp)
    2b28:	01004b04 	movi	r4,300
    2b2c:	01400c84 	movi	r5,50
    2b30:	01804c44 	movi	r6,305
    2b34:	01c01904 	movi	r7,100
    2b38:	0002c540 	call	2c54 <VGA_box>

	VGA_box (0, 0, 319, 3, groen);					// boven
    2b3c:	0081a5c4 	movi	r2,1687
    2b40:	d8800015 	stw	r2,0(sp)
    2b44:	0009883a 	mov	r4,zero
    2b48:	000b883a 	mov	r5,zero
    2b4c:	01804fc4 	movi	r6,319
    2b50:	01c000c4 	movi	r7,3
    2b54:	0002c540 	call	2c54 <VGA_box>
	VGA_box (0, 236, 319, 239, groen);				// onder
    2b58:	0081a5c4 	movi	r2,1687
    2b5c:	d8800015 	stw	r2,0(sp)
    2b60:	0009883a 	mov	r4,zero
    2b64:	01403b04 	movi	r5,236
    2b68:	01804fc4 	movi	r6,319
    2b6c:	01c03bc4 	movi	r7,239
    2b70:	0002c540 	call	2c54 <VGA_box>


	OSTaskCreate(controllers,(void*) 1,&controller1_stk[TASK_STACKSIZE-1],controller1_PRIORITY);
    2b74:	01000034 	movhi	r4,0
    2b78:	2100a004 	addi	r4,r4,640
    2b7c:	01400044 	movi	r5,1
    2b80:	018000f4 	movhi	r6,3
    2b84:	31a9e704 	addi	r6,r6,-22628
    2b88:	01c002c4 	movi	r7,11
    2b8c:	001a79c0 	call	1a79c <OSTaskCreate>
	OSTaskCreate(controllers,(void*) 2,&controller2_stk[TASK_STACKSIZE-1],controller2_PRIORITY);
    2b90:	01000034 	movhi	r4,0
    2b94:	2100a004 	addi	r4,r4,640
    2b98:	01400084 	movi	r5,2
    2b9c:	018000f4 	movhi	r6,3
    2ba0:	31b9e704 	addi	r6,r6,-6244
    2ba4:	01c00304 	movi	r7,12
    2ba8:	001a79c0 	call	1a79c <OSTaskCreate>
	OSTaskCreate(Game,(void*) 0, &Game_stk[TASK_STACKSIZE-1],Game_PRIORITY);
    2bac:	01000034 	movhi	r4,0
    2bb0:	2101e304 	addi	r4,r4,1932
    2bb4:	000b883a 	mov	r5,zero
    2bb8:	018000f4 	movhi	r6,3
    2bbc:	3181e704 	addi	r6,r6,1948
    2bc0:	01c00184 	movi	r7,6
    2bc4:	001a79c0 	call	1a79c <OSTaskCreate>
	OSTaskCreate(Singleplayer,(void*) 0, &Singleplayer_stk[TASK_STACKSIZE-1],Singleplayer_PRIORITY);
    2bc8:	01000034 	movhi	r4,0
    2bcc:	21043c04 	addi	r4,r4,4336
    2bd0:	000b883a 	mov	r5,zero
    2bd4:	018000b4 	movhi	r6,2
    2bd8:	3199e704 	addi	r6,r6,26524
    2bdc:	01c001c4 	movi	r7,7
    2be0:	001a79c0 	call	1a79c <OSTaskCreate>
	OSTaskCreate(Tutorial,(void*) 0, &Tutorial_stk[TASK_STACKSIZE-1],Tutorial_PRIORITY);
    2be4:	01000034 	movhi	r4,0
    2be8:	2105cc04 	addi	r4,r4,5936
    2bec:	000b883a 	mov	r5,zero
    2bf0:	018000f4 	movhi	r6,3
    2bf4:	31b1e704 	addi	r6,r6,-14436
    2bf8:	01c00204 	movi	r7,8
    2bfc:	001a79c0 	call	1a79c <OSTaskCreate>


	OSTaskCreate(menu, (void*) 2, &menu_stk[TASK_STACKSIZE-1],menu_PRIORITY);
    2c00:	01000034 	movhi	r4,0
    2c04:	21087e04 	addi	r4,r4,8696
    2c08:	01400084 	movi	r5,2
    2c0c:	018000f4 	movhi	r6,3
    2c10:	31a1e704 	addi	r6,r6,-30820
    2c14:	01c00244 	movi	r7,9
    2c18:	001a79c0 	call	1a79c <OSTaskCreate>
	OSTaskCreate(selecteerMenu, (void*) 3, &menu_stk2[TASK_STACKSIZE-1], menu_PRIORITY +1);
    2c1c:	01000034 	movhi	r4,0
    2c20:	2108b904 	addi	r4,r4,8932
    2c24:	014000c4 	movi	r5,3
    2c28:	018000f4 	movhi	r6,3
    2c2c:	318bdb04 	addi	r6,r6,12140
    2c30:	01c00284 	movi	r7,10
    2c34:	001a79c0 	call	1a79c <OSTaskCreate>
	OSStart();
    2c38:	00144300 	call	14430 <OSStart>
	return 0;
    2c3c:	0005883a 	mov	r2,zero
}
    2c40:	e037883a 	mov	sp,fp
    2c44:	dfc00117 	ldw	ra,4(sp)
    2c48:	df000017 	ldw	fp,0(sp)
    2c4c:	dec00204 	addi	sp,sp,8
    2c50:	f800283a 	ret

00002c54 <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
    2c54:	defff604 	addi	sp,sp,-40
    2c58:	df000915 	stw	fp,36(sp)
    2c5c:	df000904 	addi	fp,sp,36
    2c60:	e13ffb15 	stw	r4,-20(fp)
    2c64:	e17ffc15 	stw	r5,-16(fp)
    2c68:	e1bffd15 	stw	r6,-12(fp)
    2c6c:	e1fffe15 	stw	r7,-8(fp)
    2c70:	e0800117 	ldw	r2,4(fp)
    2c74:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
    2c78:	00820034 	movhi	r2,2048
    2c7c:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    2c80:	e0bffc17 	ldw	r2,-16(fp)
    2c84:	e0bff715 	stw	r2,-36(fp)
    2c88:	00001806 	br	2cec <VGA_box+0x98>
	{
		col = x1;
    2c8c:	e0bffb17 	ldw	r2,-20(fp)
    2c90:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
    2c94:	00000f06 	br	2cd4 <VGA_box+0x80>
		{
			offset = (row << 9) + col;
    2c98:	e0bff717 	ldw	r2,-36(fp)
    2c9c:	1006927a 	slli	r3,r2,9
    2ca0:	e0bff817 	ldw	r2,-32(fp)
    2ca4:	1885883a 	add	r2,r3,r2
    2ca8:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
    2cac:	e0bffa17 	ldw	r2,-24(fp)
    2cb0:	1085883a 	add	r2,r2,r2
    2cb4:	1007883a 	mov	r3,r2
    2cb8:	e0bff917 	ldw	r2,-28(fp)
    2cbc:	10c5883a 	add	r2,r2,r3
    2cc0:	e0ffff0b 	ldhu	r3,-4(fp)
    2cc4:	10c0000d 	sth	r3,0(r2)
			++col;
    2cc8:	e0bff817 	ldw	r2,-32(fp)
    2ccc:	10800044 	addi	r2,r2,1
    2cd0:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
    2cd4:	e0bff817 	ldw	r2,-32(fp)
    2cd8:	e0fffd17 	ldw	r3,-12(fp)
    2cdc:	18bfee0e 	bge	r3,r2,2c98 <__alt_mem_Flash_flash_data+0xf4002c98>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    2ce0:	e0bff717 	ldw	r2,-36(fp)
    2ce4:	10800044 	addi	r2,r2,1
    2ce8:	e0bff715 	stw	r2,-36(fp)
    2cec:	e0bff717 	ldw	r2,-36(fp)
    2cf0:	e0fffe17 	ldw	r3,-8(fp)
    2cf4:	18bfe50e 	bge	r3,r2,2c8c <__alt_mem_Flash_flash_data+0xf4002c8c>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
    2cf8:	e037883a 	mov	sp,fp
    2cfc:	df000017 	ldw	fp,0(sp)
    2d00:	dec00104 	addi	sp,sp,4
    2d04:	f800283a 	ret

00002d08 <VGA_text>:

void VGA_text(int x, int y, char * text_ptr)
{
    2d08:	defffa04 	addi	sp,sp,-24
    2d0c:	df000515 	stw	fp,20(sp)
    2d10:	df000504 	addi	fp,sp,20
    2d14:	e13ffd15 	stw	r4,-12(fp)
    2d18:	e17ffe15 	stw	r5,-8(fp)
    2d1c:	e1bfff15 	stw	r6,-4(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer
    2d20:	00824034 	movhi	r2,2304
    2d24:	e0bffc15 	stw	r2,-16(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
    2d28:	e0bffe17 	ldw	r2,-8(fp)
    2d2c:	100691fa 	slli	r3,r2,7
    2d30:	e0bffd17 	ldw	r2,-12(fp)
    2d34:	1885883a 	add	r2,r3,r2
    2d38:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
    2d3c:	00000c06 	br	2d70 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
    2d40:	e0bffb17 	ldw	r2,-20(fp)
    2d44:	e0fffc17 	ldw	r3,-16(fp)
    2d48:	1885883a 	add	r2,r3,r2
    2d4c:	e0ffff17 	ldw	r3,-4(fp)
    2d50:	18c00003 	ldbu	r3,0(r3)
    2d54:	10c00005 	stb	r3,0(r2)
		++text_ptr;
    2d58:	e0bfff17 	ldw	r2,-4(fp)
    2d5c:	10800044 	addi	r2,r2,1
    2d60:	e0bfff15 	stw	r2,-4(fp)
		++offset;
    2d64:	e0bffb17 	ldw	r2,-20(fp)
    2d68:	10800044 	addi	r2,r2,1
    2d6c:	e0bffb15 	stw	r2,-20(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
    2d70:	e0bfff17 	ldw	r2,-4(fp)
    2d74:	10800003 	ldbu	r2,0(r2)
    2d78:	10803fcc 	andi	r2,r2,255
    2d7c:	1080201c 	xori	r2,r2,128
    2d80:	10bfe004 	addi	r2,r2,-128
    2d84:	103fee1e 	bne	r2,zero,2d40 <__alt_mem_Flash_flash_data+0xf4002d40>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
    2d88:	e037883a 	mov	sp,fp
    2d8c:	df000017 	ldw	fp,0(sp)
    2d90:	dec00104 	addi	sp,sp,4
    2d94:	f800283a 	ret

00002d98 <draw_middenlijn>:

void draw_middenlijn(){
    2d98:	defffc04 	addi	sp,sp,-16
    2d9c:	dfc00315 	stw	ra,12(sp)
    2da0:	df000215 	stw	fp,8(sp)
    2da4:	df000204 	addi	fp,sp,8
	int i = 0;
    2da8:	e03fff15 	stw	zero,-4(fp)
	while(i < 240){
    2dac:	00000c06 	br	2de0 <draw_middenlijn+0x48>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
    2db0:	e0bfff17 	ldw	r2,-4(fp)
    2db4:	10c001c4 	addi	r3,r2,7
    2db8:	0081a5c4 	movi	r2,1687
    2dbc:	d8800015 	stw	r2,0(sp)
    2dc0:	010027c4 	movi	r4,159
    2dc4:	e17fff17 	ldw	r5,-4(fp)
    2dc8:	01802804 	movi	r6,160
    2dcc:	180f883a 	mov	r7,r3
    2dd0:	0002c540 	call	2c54 <VGA_box>
		i = i + 11;
    2dd4:	e0bfff17 	ldw	r2,-4(fp)
    2dd8:	108002c4 	addi	r2,r2,11
    2ddc:	e0bfff15 	stw	r2,-4(fp)
	}
}

void draw_middenlijn(){
	int i = 0;
	while(i < 240){
    2de0:	e0bfff17 	ldw	r2,-4(fp)
    2de4:	10803c10 	cmplti	r2,r2,240
    2de8:	103ff11e 	bne	r2,zero,2db0 <__alt_mem_Flash_flash_data+0xf4002db0>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
		i = i + 11;
	}
}
    2dec:	e037883a 	mov	sp,fp
    2df0:	dfc00117 	ldw	ra,4(sp)
    2df4:	df000017 	ldw	fp,0(sp)
    2df8:	dec00204 	addi	sp,sp,8
    2dfc:	f800283a 	ret

00002e00 <del_middenlijn>:

void del_middenlijn(){
    2e00:	defffd04 	addi	sp,sp,-12
    2e04:	dfc00215 	stw	ra,8(sp)
    2e08:	df000115 	stw	fp,4(sp)
    2e0c:	df000104 	addi	fp,sp,4
	VGA_box(159, 4, 160, 235, 0);
    2e10:	d8000015 	stw	zero,0(sp)
    2e14:	010027c4 	movi	r4,159
    2e18:	01400104 	movi	r5,4
    2e1c:	01802804 	movi	r6,160
    2e20:	01c03ac4 	movi	r7,235
    2e24:	0002c540 	call	2c54 <VGA_box>
}
    2e28:	e037883a 	mov	sp,fp
    2e2c:	dfc00117 	ldw	ra,4(sp)
    2e30:	df000017 	ldw	fp,0(sp)
    2e34:	dec00204 	addi	sp,sp,8
    2e38:	f800283a 	ret

00002e3c <del_number>:

void del_number(int side){
    2e3c:	defffc04 	addi	sp,sp,-16
    2e40:	dfc00315 	stw	ra,12(sp)
    2e44:	df000215 	stw	fp,8(sp)
    2e48:	df000204 	addi	fp,sp,8
    2e4c:	e13fff15 	stw	r4,-4(fp)
	if(side == 1){
    2e50:	e0bfff17 	ldw	r2,-4(fp)
    2e54:	10800058 	cmpnei	r2,r2,1
    2e58:	1000061e 	bne	r2,zero,2e74 <del_number+0x38>
		VGA_box(120, 20, 140, 60, 0);
    2e5c:	d8000015 	stw	zero,0(sp)
    2e60:	01001e04 	movi	r4,120
    2e64:	01400504 	movi	r5,20
    2e68:	01802304 	movi	r6,140
    2e6c:	01c00f04 	movi	r7,60
    2e70:	0002c540 	call	2c54 <VGA_box>
	}
	if(side == 2){
    2e74:	e0bfff17 	ldw	r2,-4(fp)
    2e78:	10800098 	cmpnei	r2,r2,2
    2e7c:	1000061e 	bne	r2,zero,2e98 <del_number+0x5c>
		VGA_box(180, 20, 200, 60, 0);
    2e80:	d8000015 	stw	zero,0(sp)
    2e84:	01002d04 	movi	r4,180
    2e88:	01400504 	movi	r5,20
    2e8c:	01803204 	movi	r6,200
    2e90:	01c00f04 	movi	r7,60
    2e94:	0002c540 	call	2c54 <VGA_box>
	}
}
    2e98:	e037883a 	mov	sp,fp
    2e9c:	dfc00117 	ldw	ra,4(sp)
    2ea0:	df000017 	ldw	fp,0(sp)
    2ea4:	dec00204 	addi	sp,sp,8
    2ea8:	f800283a 	ret

00002eac <deleteNummer>:

void deleteNummer(){
    2eac:	defffd04 	addi	sp,sp,-12
    2eb0:	dfc00215 	stw	ra,8(sp)
    2eb4:	df000115 	stw	fp,4(sp)
    2eb8:	df000104 	addi	fp,sp,4
	VGA_box(120, 20, 200, 60, 0);
    2ebc:	d8000015 	stw	zero,0(sp)
    2ec0:	01001e04 	movi	r4,120
    2ec4:	01400504 	movi	r5,20
    2ec8:	01803204 	movi	r6,200
    2ecc:	01c00f04 	movi	r7,60
    2ed0:	0002c540 	call	2c54 <VGA_box>
}
    2ed4:	e037883a 	mov	sp,fp
    2ed8:	dfc00117 	ldw	ra,4(sp)
    2edc:	df000017 	ldw	fp,0(sp)
    2ee0:	dec00204 	addi	sp,sp,8
    2ee4:	f800283a 	ret

00002ee8 <draw_number>:

void draw_number(int nummer, int ID){
    2ee8:	defffa04 	addi	sp,sp,-24
    2eec:	dfc00515 	stw	ra,20(sp)
    2ef0:	df000415 	stw	fp,16(sp)
    2ef4:	df000404 	addi	fp,sp,16
    2ef8:	e13ffe15 	stw	r4,-8(fp)
    2efc:	e17fff15 	stw	r5,-4(fp)

	int X = checkIDScore(ID);
    2f00:	e13fff17 	ldw	r4,-4(fp)
    2f04:	000355c0 	call	355c <checkIDScore>
    2f08:	e0bffd15 	stw	r2,-12(fp)

	if(nummer == 1){
    2f0c:	e0bffe17 	ldw	r2,-8(fp)
    2f10:	10800058 	cmpnei	r2,r2,1
    2f14:	10000b1e 	bne	r2,zero,2f44 <draw_number+0x5c>
		VGA_box(X + 9, 20, X+12, 60, wit);
    2f18:	e0bffd17 	ldw	r2,-12(fp)
    2f1c:	11000244 	addi	r4,r2,9
    2f20:	e0bffd17 	ldw	r2,-12(fp)
    2f24:	10c00304 	addi	r3,r2,12
    2f28:	00bfffc4 	movi	r2,-1
    2f2c:	d8800015 	stw	r2,0(sp)
    2f30:	01400504 	movi	r5,20
    2f34:	180d883a 	mov	r6,r3
    2f38:	01c00f04 	movi	r7,60
    2f3c:	0002c540 	call	2c54 <VGA_box>
    2f40:	00018106 	br	3548 <draw_number+0x660>
	}else if(nummer == 2){
    2f44:	e0bffe17 	ldw	r2,-8(fp)
    2f48:	10800098 	cmpnei	r2,r2,2
    2f4c:	10002f1e 	bne	r2,zero,300c <draw_number+0x124>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2f50:	e0bffd17 	ldw	r2,-12(fp)
    2f54:	10c00504 	addi	r3,r2,20
    2f58:	00bfffc4 	movi	r2,-1
    2f5c:	d8800015 	stw	r2,0(sp)
    2f60:	e13ffd17 	ldw	r4,-12(fp)
    2f64:	01400504 	movi	r5,20
    2f68:	180d883a 	mov	r6,r3
    2f6c:	01c00584 	movi	r7,22
    2f70:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 38, wit);			//lijn naar beneden
    2f74:	e0bffd17 	ldw	r2,-12(fp)
    2f78:	11000484 	addi	r4,r2,18
    2f7c:	e0bffd17 	ldw	r2,-12(fp)
    2f80:	10c00504 	addi	r3,r2,20
    2f84:	00bfffc4 	movi	r2,-1
    2f88:	d8800015 	stw	r2,0(sp)
    2f8c:	01400584 	movi	r5,22
    2f90:	180d883a 	mov	r6,r3
    2f94:	01c00984 	movi	r7,38
    2f98:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    2f9c:	e0bffd17 	ldw	r2,-12(fp)
    2fa0:	10c00504 	addi	r3,r2,20
    2fa4:	00bfffc4 	movi	r2,-1
    2fa8:	d8800015 	stw	r2,0(sp)
    2fac:	e13ffd17 	ldw	r4,-12(fp)
    2fb0:	01400984 	movi	r5,38
    2fb4:	180d883a 	mov	r6,r3
    2fb8:	01c00a04 	movi	r7,40
    2fbc:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 40, X+ 2, 58, wit);					//lijn naar beneden
    2fc0:	e0bffd17 	ldw	r2,-12(fp)
    2fc4:	10c00084 	addi	r3,r2,2
    2fc8:	00bfffc4 	movi	r2,-1
    2fcc:	d8800015 	stw	r2,0(sp)
    2fd0:	e13ffd17 	ldw	r4,-12(fp)
    2fd4:	01400a04 	movi	r5,40
    2fd8:	180d883a 	mov	r6,r3
    2fdc:	01c00e84 	movi	r7,58
    2fe0:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    2fe4:	e0bffd17 	ldw	r2,-12(fp)
    2fe8:	10c00504 	addi	r3,r2,20
    2fec:	00bfffc4 	movi	r2,-1
    2ff0:	d8800015 	stw	r2,0(sp)
    2ff4:	e13ffd17 	ldw	r4,-12(fp)
    2ff8:	01400e84 	movi	r5,58
    2ffc:	180d883a 	mov	r6,r3
    3000:	01c00f04 	movi	r7,60
    3004:	0002c540 	call	2c54 <VGA_box>
    3008:	00014f06 	br	3548 <draw_number+0x660>
	}else if(nummer == 3){
    300c:	e0bffe17 	ldw	r2,-8(fp)
    3010:	108000d8 	cmpnei	r2,r2,3
    3014:	1000261e 	bne	r2,zero,30b0 <draw_number+0x1c8>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    3018:	e0bffd17 	ldw	r2,-12(fp)
    301c:	10c00504 	addi	r3,r2,20
    3020:	00bfffc4 	movi	r2,-1
    3024:	d8800015 	stw	r2,0(sp)
    3028:	e13ffd17 	ldw	r4,-12(fp)
    302c:	01400504 	movi	r5,20
    3030:	180d883a 	mov	r6,r3
    3034:	01c00584 	movi	r7,22
    3038:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 60, wit);			//rechter lijn
    303c:	e0bffd17 	ldw	r2,-12(fp)
    3040:	11000484 	addi	r4,r2,18
    3044:	e0bffd17 	ldw	r2,-12(fp)
    3048:	10c00504 	addi	r3,r2,20
    304c:	00bfffc4 	movi	r2,-1
    3050:	d8800015 	stw	r2,0(sp)
    3054:	01400584 	movi	r5,22
    3058:	180d883a 	mov	r6,r3
    305c:	01c00f04 	movi	r7,60
    3060:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 39, X+ 20, 41, wit);					//midden lijn
    3064:	e0bffd17 	ldw	r2,-12(fp)
    3068:	10c00504 	addi	r3,r2,20
    306c:	00bfffc4 	movi	r2,-1
    3070:	d8800015 	stw	r2,0(sp)
    3074:	e13ffd17 	ldw	r4,-12(fp)
    3078:	014009c4 	movi	r5,39
    307c:	180d883a 	mov	r6,r3
    3080:	01c00a44 	movi	r7,41
    3084:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    3088:	e0bffd17 	ldw	r2,-12(fp)
    308c:	10c00504 	addi	r3,r2,20
    3090:	00bfffc4 	movi	r2,-1
    3094:	d8800015 	stw	r2,0(sp)
    3098:	e13ffd17 	ldw	r4,-12(fp)
    309c:	01400e84 	movi	r5,58
    30a0:	180d883a 	mov	r6,r3
    30a4:	01c00f04 	movi	r7,60
    30a8:	0002c540 	call	2c54 <VGA_box>
    30ac:	00012606 	br	3548 <draw_number+0x660>
	}else if(nummer == 4){
    30b0:	e0bffe17 	ldw	r2,-8(fp)
    30b4:	10800118 	cmpnei	r2,r2,4
    30b8:	10001d1e 	bne	r2,zero,3130 <draw_number+0x248>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    30bc:	e0bffd17 	ldw	r2,-12(fp)
    30c0:	10c00084 	addi	r3,r2,2
    30c4:	00bfffc4 	movi	r2,-1
    30c8:	d8800015 	stw	r2,0(sp)
    30cc:	e13ffd17 	ldw	r4,-12(fp)
    30d0:	01400504 	movi	r5,20
    30d4:	180d883a 	mov	r6,r3
    30d8:	01c00a04 	movi	r7,40
    30dc:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    30e0:	e0bffd17 	ldw	r2,-12(fp)
    30e4:	10c00504 	addi	r3,r2,20
    30e8:	00bfffc4 	movi	r2,-1
    30ec:	d8800015 	stw	r2,0(sp)
    30f0:	e13ffd17 	ldw	r4,-12(fp)
    30f4:	014009c4 	movi	r5,39
    30f8:	180d883a 	mov	r6,r3
    30fc:	01c00a44 	movi	r7,41
    3100:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    3104:	e0bffd17 	ldw	r2,-12(fp)
    3108:	11000484 	addi	r4,r2,18
    310c:	e0bffd17 	ldw	r2,-12(fp)
    3110:	10c00504 	addi	r3,r2,20
    3114:	00bfffc4 	movi	r2,-1
    3118:	d8800015 	stw	r2,0(sp)
    311c:	01400504 	movi	r5,20
    3120:	180d883a 	mov	r6,r3
    3124:	01c00f04 	movi	r7,60
    3128:	0002c540 	call	2c54 <VGA_box>
    312c:	00010606 	br	3548 <draw_number+0x660>
	}else if(nummer == 5){
    3130:	e0bffe17 	ldw	r2,-8(fp)
    3134:	10800158 	cmpnei	r2,r2,5
    3138:	10002f1e 	bne	r2,zero,31f8 <draw_number+0x310>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    313c:	e0bffd17 	ldw	r2,-12(fp)
    3140:	10c00504 	addi	r3,r2,20
    3144:	00bfffc4 	movi	r2,-1
    3148:	d8800015 	stw	r2,0(sp)
    314c:	e13ffd17 	ldw	r4,-12(fp)
    3150:	01400504 	movi	r5,20
    3154:	180d883a 	mov	r6,r3
    3158:	01c00584 	movi	r7,22
    315c:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 22, X+ 2, 38, wit);					//lijn naar beneden
    3160:	e0bffd17 	ldw	r2,-12(fp)
    3164:	10c00084 	addi	r3,r2,2
    3168:	00bfffc4 	movi	r2,-1
    316c:	d8800015 	stw	r2,0(sp)
    3170:	e13ffd17 	ldw	r4,-12(fp)
    3174:	01400584 	movi	r5,22
    3178:	180d883a 	mov	r6,r3
    317c:	01c00984 	movi	r7,38
    3180:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    3184:	e0bffd17 	ldw	r2,-12(fp)
    3188:	10c00504 	addi	r3,r2,20
    318c:	00bfffc4 	movi	r2,-1
    3190:	d8800015 	stw	r2,0(sp)
    3194:	e13ffd17 	ldw	r4,-12(fp)
    3198:	01400984 	movi	r5,38
    319c:	180d883a 	mov	r6,r3
    31a0:	01c00a04 	movi	r7,40
    31a4:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn naar beneden
    31a8:	e0bffd17 	ldw	r2,-12(fp)
    31ac:	11000484 	addi	r4,r2,18
    31b0:	e0bffd17 	ldw	r2,-12(fp)
    31b4:	10c00504 	addi	r3,r2,20
    31b8:	00bfffc4 	movi	r2,-1
    31bc:	d8800015 	stw	r2,0(sp)
    31c0:	01400a04 	movi	r5,40
    31c4:	180d883a 	mov	r6,r3
    31c8:	01c00e84 	movi	r7,58
    31cc:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    31d0:	e0bffd17 	ldw	r2,-12(fp)
    31d4:	10c00504 	addi	r3,r2,20
    31d8:	00bfffc4 	movi	r2,-1
    31dc:	d8800015 	stw	r2,0(sp)
    31e0:	e13ffd17 	ldw	r4,-12(fp)
    31e4:	01400e84 	movi	r5,58
    31e8:	180d883a 	mov	r6,r3
    31ec:	01c00f04 	movi	r7,60
    31f0:	0002c540 	call	2c54 <VGA_box>
    31f4:	0000d406 	br	3548 <draw_number+0x660>
	}else if(nummer == 6){
    31f8:	e0bffe17 	ldw	r2,-8(fp)
    31fc:	10800198 	cmpnei	r2,r2,6
    3200:	10002f1e 	bne	r2,zero,32c0 <draw_number+0x3d8>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    3204:	e0bffd17 	ldw	r2,-12(fp)
    3208:	10c00084 	addi	r3,r2,2
    320c:	00bfffc4 	movi	r2,-1
    3210:	d8800015 	stw	r2,0(sp)
    3214:	e13ffd17 	ldw	r4,-12(fp)
    3218:	01400504 	movi	r5,20
    321c:	180d883a 	mov	r6,r3
    3220:	01c00f04 	movi	r7,60
    3224:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    3228:	e0bffd17 	ldw	r2,-12(fp)
    322c:	10c00504 	addi	r3,r2,20
    3230:	00bfffc4 	movi	r2,-1
    3234:	d8800015 	stw	r2,0(sp)
    3238:	e13ffd17 	ldw	r4,-12(fp)
    323c:	01400504 	movi	r5,20
    3240:	180d883a 	mov	r6,r3
    3244:	01c00584 	movi	r7,22
    3248:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    324c:	e0bffd17 	ldw	r2,-12(fp)
    3250:	10c00504 	addi	r3,r2,20
    3254:	00bfffc4 	movi	r2,-1
    3258:	d8800015 	stw	r2,0(sp)
    325c:	e13ffd17 	ldw	r4,-12(fp)
    3260:	01400e84 	movi	r5,58
    3264:	180d883a 	mov	r6,r3
    3268:	01c00f04 	movi	r7,60
    326c:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn rechts
    3270:	e0bffd17 	ldw	r2,-12(fp)
    3274:	11000484 	addi	r4,r2,18
    3278:	e0bffd17 	ldw	r2,-12(fp)
    327c:	10c00504 	addi	r3,r2,20
    3280:	00bfffc4 	movi	r2,-1
    3284:	d8800015 	stw	r2,0(sp)
    3288:	01400a04 	movi	r5,40
    328c:	180d883a 	mov	r6,r3
    3290:	01c00e84 	movi	r7,58
    3294:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    3298:	e0bffd17 	ldw	r2,-12(fp)
    329c:	10c00504 	addi	r3,r2,20
    32a0:	00bfffc4 	movi	r2,-1
    32a4:	d8800015 	stw	r2,0(sp)
    32a8:	e13ffd17 	ldw	r4,-12(fp)
    32ac:	014009c4 	movi	r5,39
    32b0:	180d883a 	mov	r6,r3
    32b4:	01c00a44 	movi	r7,41
    32b8:	0002c540 	call	2c54 <VGA_box>
    32bc:	0000a206 	br	3548 <draw_number+0x660>
	}else if(nummer == 7){
    32c0:	e0bffe17 	ldw	r2,-8(fp)
    32c4:	108001d8 	cmpnei	r2,r2,7
    32c8:	1000141e 	bne	r2,zero,331c <draw_number+0x434>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    32cc:	e0bffd17 	ldw	r2,-12(fp)
    32d0:	11000484 	addi	r4,r2,18
    32d4:	e0bffd17 	ldw	r2,-12(fp)
    32d8:	10c00504 	addi	r3,r2,20
    32dc:	00bfffc4 	movi	r2,-1
    32e0:	d8800015 	stw	r2,0(sp)
    32e4:	01400504 	movi	r5,20
    32e8:	180d883a 	mov	r6,r3
    32ec:	01c00f04 	movi	r7,60
    32f0:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    32f4:	e0bffd17 	ldw	r2,-12(fp)
    32f8:	10c00504 	addi	r3,r2,20
    32fc:	00bfffc4 	movi	r2,-1
    3300:	d8800015 	stw	r2,0(sp)
    3304:	e13ffd17 	ldw	r4,-12(fp)
    3308:	01400504 	movi	r5,20
    330c:	180d883a 	mov	r6,r3
    3310:	01c00584 	movi	r7,22
    3314:	0002c540 	call	2c54 <VGA_box>
    3318:	00008b06 	br	3548 <draw_number+0x660>
	}else if(nummer == 8){
    331c:	e0bffe17 	ldw	r2,-8(fp)
    3320:	10800218 	cmpnei	r2,r2,8
    3324:	10002f1e 	bne	r2,zero,33e4 <draw_number+0x4fc>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    3328:	e0bffd17 	ldw	r2,-12(fp)
    332c:	11000484 	addi	r4,r2,18
    3330:	e0bffd17 	ldw	r2,-12(fp)
    3334:	10c00504 	addi	r3,r2,20
    3338:	00bfffc4 	movi	r2,-1
    333c:	d8800015 	stw	r2,0(sp)
    3340:	01400504 	movi	r5,20
    3344:	180d883a 	mov	r6,r3
    3348:	01c00f04 	movi	r7,60
    334c:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    3350:	e0bffd17 	ldw	r2,-12(fp)
    3354:	10c00084 	addi	r3,r2,2
    3358:	00bfffc4 	movi	r2,-1
    335c:	d8800015 	stw	r2,0(sp)
    3360:	e13ffd17 	ldw	r4,-12(fp)
    3364:	01400504 	movi	r5,20
    3368:	180d883a 	mov	r6,r3
    336c:	01c00f04 	movi	r7,60
    3370:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    3374:	e0bffd17 	ldw	r2,-12(fp)
    3378:	10c00504 	addi	r3,r2,20
    337c:	00bfffc4 	movi	r2,-1
    3380:	d8800015 	stw	r2,0(sp)
    3384:	e13ffd17 	ldw	r4,-12(fp)
    3388:	01400504 	movi	r5,20
    338c:	180d883a 	mov	r6,r3
    3390:	01c00584 	movi	r7,22
    3394:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    3398:	e0bffd17 	ldw	r2,-12(fp)
    339c:	10c00504 	addi	r3,r2,20
    33a0:	00bfffc4 	movi	r2,-1
    33a4:	d8800015 	stw	r2,0(sp)
    33a8:	e13ffd17 	ldw	r4,-12(fp)
    33ac:	014009c4 	movi	r5,39
    33b0:	180d883a 	mov	r6,r3
    33b4:	01c00a44 	movi	r7,41
    33b8:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    33bc:	e0bffd17 	ldw	r2,-12(fp)
    33c0:	10c00504 	addi	r3,r2,20
    33c4:	00bfffc4 	movi	r2,-1
    33c8:	d8800015 	stw	r2,0(sp)
    33cc:	e13ffd17 	ldw	r4,-12(fp)
    33d0:	01400e84 	movi	r5,58
    33d4:	180d883a 	mov	r6,r3
    33d8:	01c00f04 	movi	r7,60
    33dc:	0002c540 	call	2c54 <VGA_box>
    33e0:	00005906 	br	3548 <draw_number+0x660>
	}else if(nummer == 9){
    33e4:	e0bffe17 	ldw	r2,-8(fp)
    33e8:	10800258 	cmpnei	r2,r2,9
    33ec:	10002f1e 	bne	r2,zero,34ac <draw_number+0x5c4>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    33f0:	e0bffd17 	ldw	r2,-12(fp)
    33f4:	11000484 	addi	r4,r2,18
    33f8:	e0bffd17 	ldw	r2,-12(fp)
    33fc:	10c00504 	addi	r3,r2,20
    3400:	00bfffc4 	movi	r2,-1
    3404:	d8800015 	stw	r2,0(sp)
    3408:	01400504 	movi	r5,20
    340c:	180d883a 	mov	r6,r3
    3410:	01c00f04 	movi	r7,60
    3414:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    3418:	e0bffd17 	ldw	r2,-12(fp)
    341c:	10c00084 	addi	r3,r2,2
    3420:	00bfffc4 	movi	r2,-1
    3424:	d8800015 	stw	r2,0(sp)
    3428:	e13ffd17 	ldw	r4,-12(fp)
    342c:	01400504 	movi	r5,20
    3430:	180d883a 	mov	r6,r3
    3434:	01c00a04 	movi	r7,40
    3438:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    343c:	e0bffd17 	ldw	r2,-12(fp)
    3440:	10c00504 	addi	r3,r2,20
    3444:	00bfffc4 	movi	r2,-1
    3448:	d8800015 	stw	r2,0(sp)
    344c:	e13ffd17 	ldw	r4,-12(fp)
    3450:	01400504 	movi	r5,20
    3454:	180d883a 	mov	r6,r3
    3458:	01c00584 	movi	r7,22
    345c:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    3460:	e0bffd17 	ldw	r2,-12(fp)
    3464:	10c00504 	addi	r3,r2,20
    3468:	00bfffc4 	movi	r2,-1
    346c:	d8800015 	stw	r2,0(sp)
    3470:	e13ffd17 	ldw	r4,-12(fp)
    3474:	014009c4 	movi	r5,39
    3478:	180d883a 	mov	r6,r3
    347c:	01c00a44 	movi	r7,41
    3480:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    3484:	e0bffd17 	ldw	r2,-12(fp)
    3488:	10c00504 	addi	r3,r2,20
    348c:	00bfffc4 	movi	r2,-1
    3490:	d8800015 	stw	r2,0(sp)
    3494:	e13ffd17 	ldw	r4,-12(fp)
    3498:	01400e84 	movi	r5,58
    349c:	180d883a 	mov	r6,r3
    34a0:	01c00f04 	movi	r7,60
    34a4:	0002c540 	call	2c54 <VGA_box>
    34a8:	00002706 	br	3548 <draw_number+0x660>
	}else if(nummer == 0){
    34ac:	e0bffe17 	ldw	r2,-8(fp)
    34b0:	1000251e 	bne	r2,zero,3548 <draw_number+0x660>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    34b4:	e0bffd17 	ldw	r2,-12(fp)
    34b8:	11000484 	addi	r4,r2,18
    34bc:	e0bffd17 	ldw	r2,-12(fp)
    34c0:	10c00504 	addi	r3,r2,20
    34c4:	00bfffc4 	movi	r2,-1
    34c8:	d8800015 	stw	r2,0(sp)
    34cc:	01400504 	movi	r5,20
    34d0:	180d883a 	mov	r6,r3
    34d4:	01c00f04 	movi	r7,60
    34d8:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    34dc:	e0bffd17 	ldw	r2,-12(fp)
    34e0:	10c00084 	addi	r3,r2,2
    34e4:	00bfffc4 	movi	r2,-1
    34e8:	d8800015 	stw	r2,0(sp)
    34ec:	e13ffd17 	ldw	r4,-12(fp)
    34f0:	01400504 	movi	r5,20
    34f4:	180d883a 	mov	r6,r3
    34f8:	01c00f04 	movi	r7,60
    34fc:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    3500:	e0bffd17 	ldw	r2,-12(fp)
    3504:	10c00504 	addi	r3,r2,20
    3508:	00bfffc4 	movi	r2,-1
    350c:	d8800015 	stw	r2,0(sp)
    3510:	e13ffd17 	ldw	r4,-12(fp)
    3514:	01400504 	movi	r5,20
    3518:	180d883a 	mov	r6,r3
    351c:	01c00584 	movi	r7,22
    3520:	0002c540 	call	2c54 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    3524:	e0bffd17 	ldw	r2,-12(fp)
    3528:	10c00504 	addi	r3,r2,20
    352c:	00bfffc4 	movi	r2,-1
    3530:	d8800015 	stw	r2,0(sp)
    3534:	e13ffd17 	ldw	r4,-12(fp)
    3538:	01400e84 	movi	r5,58
    353c:	180d883a 	mov	r6,r3
    3540:	01c00f04 	movi	r7,60
    3544:	0002c540 	call	2c54 <VGA_box>
	}
}
    3548:	e037883a 	mov	sp,fp
    354c:	dfc00117 	ldw	ra,4(sp)
    3550:	df000017 	ldw	fp,0(sp)
    3554:	dec00204 	addi	sp,sp,8
    3558:	f800283a 	ret

0000355c <checkIDScore>:

int checkIDScore(int ID){
    355c:	defffe04 	addi	sp,sp,-8
    3560:	df000115 	stw	fp,4(sp)
    3564:	df000104 	addi	fp,sp,4
    3568:	e13fff15 	stw	r4,-4(fp)
	if(ID == 1){
    356c:	e0bfff17 	ldw	r2,-4(fp)
    3570:	10800058 	cmpnei	r2,r2,1
    3574:	1000021e 	bne	r2,zero,3580 <checkIDScore+0x24>
		return 120;
    3578:	00801e04 	movi	r2,120
    357c:	00000b06 	br	35ac <checkIDScore+0x50>
	}else if(ID == 2){
    3580:	e0bfff17 	ldw	r2,-4(fp)
    3584:	10800098 	cmpnei	r2,r2,2
    3588:	1000021e 	bne	r2,zero,3594 <checkIDScore+0x38>
		return 150;
    358c:	00802584 	movi	r2,150
    3590:	00000606 	br	35ac <checkIDScore+0x50>
	}else if(ID == 3){
    3594:	e0bfff17 	ldw	r2,-4(fp)
    3598:	108000d8 	cmpnei	r2,r2,3
    359c:	1000021e 	bne	r2,zero,35a8 <checkIDScore+0x4c>
		return 180;
    35a0:	00802d04 	movi	r2,180
    35a4:	00000106 	br	35ac <checkIDScore+0x50>
	}
	
	return 0;
    35a8:	0005883a 	mov	r2,zero
}
    35ac:	e037883a 	mov	sp,fp
    35b0:	df000017 	ldw	fp,0(sp)
    35b4:	dec00104 	addi	sp,sp,4
    35b8:	f800283a 	ret

000035bc <_printf_r>:
    35bc:	defffd04 	addi	sp,sp,-12
    35c0:	dfc00015 	stw	ra,0(sp)
    35c4:	d9800115 	stw	r6,4(sp)
    35c8:	d9c00215 	stw	r7,8(sp)
    35cc:	280d883a 	mov	r6,r5
    35d0:	21400217 	ldw	r5,8(r4)
    35d4:	d9c00104 	addi	r7,sp,4
    35d8:	00057cc0 	call	57cc <___vfprintf_internal_r>
    35dc:	dfc00017 	ldw	ra,0(sp)
    35e0:	dec00304 	addi	sp,sp,12
    35e4:	f800283a 	ret

000035e8 <printf>:
    35e8:	defffc04 	addi	sp,sp,-16
    35ec:	dfc00015 	stw	ra,0(sp)
    35f0:	d9400115 	stw	r5,4(sp)
    35f4:	d9800215 	stw	r6,8(sp)
    35f8:	d9c00315 	stw	r7,12(sp)
    35fc:	008000b4 	movhi	r2,2
    3600:	10899904 	addi	r2,r2,9828
    3604:	10800017 	ldw	r2,0(r2)
    3608:	200b883a 	mov	r5,r4
    360c:	d9800104 	addi	r6,sp,4
    3610:	11000217 	ldw	r4,8(r2)
    3614:	000771c0 	call	771c <__vfprintf_internal>
    3618:	dfc00017 	ldw	ra,0(sp)
    361c:	dec00404 	addi	sp,sp,16
    3620:	f800283a 	ret

00003624 <_puts_r>:
    3624:	defff604 	addi	sp,sp,-40
    3628:	dc000715 	stw	r16,28(sp)
    362c:	2021883a 	mov	r16,r4
    3630:	2809883a 	mov	r4,r5
    3634:	dc400815 	stw	r17,32(sp)
    3638:	dfc00915 	stw	ra,36(sp)
    363c:	2823883a 	mov	r17,r5
    3640:	00037a40 	call	37a4 <strlen>
    3644:	81400217 	ldw	r5,8(r16)
    3648:	11000044 	addi	r4,r2,1
    364c:	d8800115 	stw	r2,4(sp)
    3650:	008000b4 	movhi	r2,2
    3654:	2980030b 	ldhu	r6,12(r5)
    3658:	10807404 	addi	r2,r2,464
    365c:	d8800215 	stw	r2,8(sp)
    3660:	00800044 	movi	r2,1
    3664:	d8800315 	stw	r2,12(sp)
    3668:	00800084 	movi	r2,2
    366c:	d8800515 	stw	r2,20(sp)
    3670:	dc400015 	stw	r17,0(sp)
    3674:	d9000615 	stw	r4,24(sp)
    3678:	dec00415 	stw	sp,16(sp)
    367c:	3088000c 	andi	r2,r6,8192
    3680:	1000061e 	bne	r2,zero,369c <_puts_r+0x78>
    3684:	29001917 	ldw	r4,100(r5)
    3688:	00b7ffc4 	movi	r2,-8193
    368c:	31880014 	ori	r6,r6,8192
    3690:	2084703a 	and	r2,r4,r2
    3694:	2980030d 	sth	r6,12(r5)
    3698:	28801915 	stw	r2,100(r5)
    369c:	8009883a 	mov	r4,r16
    36a0:	d9800404 	addi	r6,sp,16
    36a4:	0009cc00 	call	9cc0 <__sfvwrite_r>
    36a8:	1000061e 	bne	r2,zero,36c4 <_puts_r+0xa0>
    36ac:	00800284 	movi	r2,10
    36b0:	dfc00917 	ldw	ra,36(sp)
    36b4:	dc400817 	ldw	r17,32(sp)
    36b8:	dc000717 	ldw	r16,28(sp)
    36bc:	dec00a04 	addi	sp,sp,40
    36c0:	f800283a 	ret
    36c4:	00bfffc4 	movi	r2,-1
    36c8:	003ff906 	br	36b0 <__alt_mem_Flash_flash_data+0xf40036b0>

000036cc <puts>:
    36cc:	008000b4 	movhi	r2,2
    36d0:	10899904 	addi	r2,r2,9828
    36d4:	200b883a 	mov	r5,r4
    36d8:	11000017 	ldw	r4,0(r2)
    36dc:	00036241 	jmpi	3624 <_puts_r>

000036e0 <_sprintf_r>:
    36e0:	deffe404 	addi	sp,sp,-112
    36e4:	2807883a 	mov	r3,r5
    36e8:	dfc01a15 	stw	ra,104(sp)
    36ec:	d9c01b15 	stw	r7,108(sp)
    36f0:	00a00034 	movhi	r2,32768
    36f4:	10bfffc4 	addi	r2,r2,-1
    36f8:	02008204 	movi	r8,520
    36fc:	d8800215 	stw	r2,8(sp)
    3700:	d8800515 	stw	r2,20(sp)
    3704:	d80b883a 	mov	r5,sp
    3708:	d9c01b04 	addi	r7,sp,108
    370c:	00bfffc4 	movi	r2,-1
    3710:	d8c00015 	stw	r3,0(sp)
    3714:	d8c00415 	stw	r3,16(sp)
    3718:	da00030d 	sth	r8,12(sp)
    371c:	d880038d 	sth	r2,14(sp)
    3720:	000383c0 	call	383c <___svfprintf_internal_r>
    3724:	d8c00017 	ldw	r3,0(sp)
    3728:	18000005 	stb	zero,0(r3)
    372c:	dfc01a17 	ldw	ra,104(sp)
    3730:	dec01c04 	addi	sp,sp,112
    3734:	f800283a 	ret

00003738 <sprintf>:
    3738:	deffe304 	addi	sp,sp,-116
    373c:	2007883a 	mov	r3,r4
    3740:	dfc01a15 	stw	ra,104(sp)
    3744:	d9801b15 	stw	r6,108(sp)
    3748:	d9c01c15 	stw	r7,112(sp)
    374c:	010000b4 	movhi	r4,2
    3750:	21099904 	addi	r4,r4,9828
    3754:	21000017 	ldw	r4,0(r4)
    3758:	00a00034 	movhi	r2,32768
    375c:	10bfffc4 	addi	r2,r2,-1
    3760:	280d883a 	mov	r6,r5
    3764:	02008204 	movi	r8,520
    3768:	d8800215 	stw	r2,8(sp)
    376c:	d8800515 	stw	r2,20(sp)
    3770:	d80b883a 	mov	r5,sp
    3774:	d9c01b04 	addi	r7,sp,108
    3778:	00bfffc4 	movi	r2,-1
    377c:	d8c00015 	stw	r3,0(sp)
    3780:	d8c00415 	stw	r3,16(sp)
    3784:	da00030d 	sth	r8,12(sp)
    3788:	d880038d 	sth	r2,14(sp)
    378c:	000383c0 	call	383c <___svfprintf_internal_r>
    3790:	d8c00017 	ldw	r3,0(sp)
    3794:	18000005 	stb	zero,0(r3)
    3798:	dfc01a17 	ldw	ra,104(sp)
    379c:	dec01d04 	addi	sp,sp,116
    37a0:	f800283a 	ret

000037a4 <strlen>:
    37a4:	208000cc 	andi	r2,r4,3
    37a8:	10002026 	beq	r2,zero,382c <strlen+0x88>
    37ac:	20800007 	ldb	r2,0(r4)
    37b0:	10002026 	beq	r2,zero,3834 <strlen+0x90>
    37b4:	2005883a 	mov	r2,r4
    37b8:	00000206 	br	37c4 <strlen+0x20>
    37bc:	10c00007 	ldb	r3,0(r2)
    37c0:	18001826 	beq	r3,zero,3824 <strlen+0x80>
    37c4:	10800044 	addi	r2,r2,1
    37c8:	10c000cc 	andi	r3,r2,3
    37cc:	183ffb1e 	bne	r3,zero,37bc <__alt_mem_Flash_flash_data+0xf40037bc>
    37d0:	10c00017 	ldw	r3,0(r2)
    37d4:	01ffbff4 	movhi	r7,65279
    37d8:	39ffbfc4 	addi	r7,r7,-257
    37dc:	00ca303a 	nor	r5,zero,r3
    37e0:	01a02074 	movhi	r6,32897
    37e4:	19c7883a 	add	r3,r3,r7
    37e8:	31a02004 	addi	r6,r6,-32640
    37ec:	1946703a 	and	r3,r3,r5
    37f0:	1986703a 	and	r3,r3,r6
    37f4:	1800091e 	bne	r3,zero,381c <strlen+0x78>
    37f8:	10800104 	addi	r2,r2,4
    37fc:	10c00017 	ldw	r3,0(r2)
    3800:	19cb883a 	add	r5,r3,r7
    3804:	00c6303a 	nor	r3,zero,r3
    3808:	28c6703a 	and	r3,r5,r3
    380c:	1986703a 	and	r3,r3,r6
    3810:	183ff926 	beq	r3,zero,37f8 <__alt_mem_Flash_flash_data+0xf40037f8>
    3814:	00000106 	br	381c <strlen+0x78>
    3818:	10800044 	addi	r2,r2,1
    381c:	10c00007 	ldb	r3,0(r2)
    3820:	183ffd1e 	bne	r3,zero,3818 <__alt_mem_Flash_flash_data+0xf4003818>
    3824:	1105c83a 	sub	r2,r2,r4
    3828:	f800283a 	ret
    382c:	2005883a 	mov	r2,r4
    3830:	003fe706 	br	37d0 <__alt_mem_Flash_flash_data+0xf40037d0>
    3834:	0005883a 	mov	r2,zero
    3838:	f800283a 	ret

0000383c <___svfprintf_internal_r>:
    383c:	deffb504 	addi	sp,sp,-300
    3840:	dfc04a15 	stw	ra,296(sp)
    3844:	ddc04815 	stw	r23,288(sp)
    3848:	d9002f15 	stw	r4,188(sp)
    384c:	282f883a 	mov	r23,r5
    3850:	d9802915 	stw	r6,164(sp)
    3854:	d9c02d15 	stw	r7,180(sp)
    3858:	df004915 	stw	fp,292(sp)
    385c:	dd804715 	stw	r22,284(sp)
    3860:	dd404615 	stw	r21,280(sp)
    3864:	dd004515 	stw	r20,276(sp)
    3868:	dcc04415 	stw	r19,272(sp)
    386c:	dc804315 	stw	r18,268(sp)
    3870:	dc404215 	stw	r17,264(sp)
    3874:	dc004115 	stw	r16,260(sp)
    3878:	000a3b40 	call	a3b4 <_localeconv_r>
    387c:	10800017 	ldw	r2,0(r2)
    3880:	1009883a 	mov	r4,r2
    3884:	d8803515 	stw	r2,212(sp)
    3888:	00037a40 	call	37a4 <strlen>
    388c:	d8803915 	stw	r2,228(sp)
    3890:	b880030b 	ldhu	r2,12(r23)
    3894:	1080200c 	andi	r2,r2,128
    3898:	10000226 	beq	r2,zero,38a4 <___svfprintf_internal_r+0x68>
    389c:	b8800417 	ldw	r2,16(r23)
    38a0:	10065f26 	beq	r2,zero,5220 <___svfprintf_internal_r+0x19e4>
    38a4:	db001dc4 	addi	r12,sp,119
    38a8:	dd801e04 	addi	r22,sp,120
    38ac:	d8800404 	addi	r2,sp,16
    38b0:	050000b4 	movhi	r20,2
    38b4:	b317c83a 	sub	r11,r22,r12
    38b8:	a5008584 	addi	r20,r20,534
    38bc:	db002815 	stw	r12,160(sp)
    38c0:	d8801e15 	stw	r2,120(sp)
    38c4:	d8002015 	stw	zero,128(sp)
    38c8:	d8001f15 	stw	zero,124(sp)
    38cc:	d8003315 	stw	zero,204(sp)
    38d0:	d8003715 	stw	zero,220(sp)
    38d4:	d8003815 	stw	zero,224(sp)
    38d8:	1011883a 	mov	r8,r2
    38dc:	d8003b15 	stw	zero,236(sp)
    38e0:	d8003a15 	stw	zero,232(sp)
    38e4:	d8003015 	stw	zero,192(sp)
    38e8:	dac03d15 	stw	r11,244(sp)
    38ec:	db002917 	ldw	r12,164(sp)
    38f0:	60800007 	ldb	r2,0(r12)
    38f4:	1000ab26 	beq	r2,zero,3ba4 <___svfprintf_internal_r+0x368>
    38f8:	00c00944 	movi	r3,37
    38fc:	10c0a926 	beq	r2,r3,3ba4 <___svfprintf_internal_r+0x368>
    3900:	6021883a 	mov	r16,r12
    3904:	00000106 	br	390c <___svfprintf_internal_r+0xd0>
    3908:	10c08426 	beq	r2,r3,3b1c <___svfprintf_internal_r+0x2e0>
    390c:	84000044 	addi	r16,r16,1
    3910:	80800007 	ldb	r2,0(r16)
    3914:	103ffc1e 	bne	r2,zero,3908 <__alt_mem_Flash_flash_data+0xf4003908>
    3918:	dac02917 	ldw	r11,164(sp)
    391c:	82e3c83a 	sub	r17,r16,r11
    3920:	88000f26 	beq	r17,zero,3960 <___svfprintf_internal_r+0x124>
    3924:	d8c02017 	ldw	r3,128(sp)
    3928:	d8801f17 	ldw	r2,124(sp)
    392c:	dac02917 	ldw	r11,164(sp)
    3930:	1c47883a 	add	r3,r3,r17
    3934:	10800044 	addi	r2,r2,1
    3938:	d8c02015 	stw	r3,128(sp)
    393c:	42c00015 	stw	r11,0(r8)
    3940:	44400115 	stw	r17,4(r8)
    3944:	d8801f15 	stw	r2,124(sp)
    3948:	00c001c4 	movi	r3,7
    394c:	18807616 	blt	r3,r2,3b28 <___svfprintf_internal_r+0x2ec>
    3950:	42000204 	addi	r8,r8,8
    3954:	db003017 	ldw	r12,192(sp)
    3958:	6459883a 	add	r12,r12,r17
    395c:	db003015 	stw	r12,192(sp)
    3960:	80800007 	ldb	r2,0(r16)
    3964:	10007726 	beq	r2,zero,3b44 <___svfprintf_internal_r+0x308>
    3968:	80800044 	addi	r2,r16,1
    396c:	84000047 	ldb	r16,1(r16)
    3970:	d8002785 	stb	zero,158(sp)
    3974:	000d883a 	mov	r6,zero
    3978:	027fffc4 	movi	r9,-1
    397c:	d8002e15 	stw	zero,184(sp)
    3980:	0023883a 	mov	r17,zero
    3984:	01001604 	movi	r4,88
    3988:	01400244 	movi	r5,9
    398c:	02800a84 	movi	r10,42
    3990:	01c01b04 	movi	r7,108
    3994:	10c00044 	addi	r3,r2,1
    3998:	80bff804 	addi	r2,r16,-32
    399c:	2082e636 	bltu	r4,r2,4538 <___svfprintf_internal_r+0xcfc>
    39a0:	100490ba 	slli	r2,r2,2
    39a4:	02c00034 	movhi	r11,0
    39a8:	5ace6e04 	addi	r11,r11,14776
    39ac:	12c5883a 	add	r2,r2,r11
    39b0:	10800017 	ldw	r2,0(r2)
    39b4:	1000683a 	jmp	r2
    39b8:	00004318 	cmpnei	zero,zero,268
    39bc:	00004538 	rdprs	zero,zero,276
    39c0:	00004538 	rdprs	zero,zero,276
    39c4:	00004338 	rdprs	zero,zero,268
    39c8:	00004538 	rdprs	zero,zero,276
    39cc:	00004538 	rdprs	zero,zero,276
    39d0:	00004538 	rdprs	zero,zero,276
    39d4:	00004538 	rdprs	zero,zero,276
    39d8:	00004538 	rdprs	zero,zero,276
    39dc:	00004538 	rdprs	zero,zero,276
    39e0:	00004348 	cmpgei	zero,zero,269
    39e4:	00004374 	movhi	zero,269
    39e8:	00004538 	rdprs	zero,zero,276
    39ec:	00003bac 	andhi	zero,zero,238
    39f0:	00003bbc 	xorhi	zero,zero,238
    39f4:	00004538 	rdprs	zero,zero,276
    39f8:	00003bfc 	xorhi	zero,zero,239
    39fc:	000041dc 	xori	zero,zero,263
    3a00:	000041dc 	xori	zero,zero,263
    3a04:	000041dc 	xori	zero,zero,263
    3a08:	000041dc 	xori	zero,zero,263
    3a0c:	000041dc 	xori	zero,zero,263
    3a10:	000041dc 	xori	zero,zero,263
    3a14:	000041dc 	xori	zero,zero,263
    3a18:	000041dc 	xori	zero,zero,263
    3a1c:	000041dc 	xori	zero,zero,263
    3a20:	00004538 	rdprs	zero,zero,276
    3a24:	00004538 	rdprs	zero,zero,276
    3a28:	00004538 	rdprs	zero,zero,276
    3a2c:	00004538 	rdprs	zero,zero,276
    3a30:	00004538 	rdprs	zero,zero,276
    3a34:	00004538 	rdprs	zero,zero,276
    3a38:	00004538 	rdprs	zero,zero,276
    3a3c:	00004538 	rdprs	zero,zero,276
    3a40:	00004538 	rdprs	zero,zero,276
    3a44:	00004538 	rdprs	zero,zero,276
    3a48:	00003c0c 	andi	zero,zero,240
    3a4c:	0000408c 	andi	zero,zero,258
    3a50:	00004538 	rdprs	zero,zero,276
    3a54:	0000408c 	andi	zero,zero,258
    3a58:	00004538 	rdprs	zero,zero,276
    3a5c:	00004538 	rdprs	zero,zero,276
    3a60:	00004538 	rdprs	zero,zero,276
    3a64:	00004538 	rdprs	zero,zero,276
    3a68:	00004130 	cmpltui	zero,zero,260
    3a6c:	00004538 	rdprs	zero,zero,276
    3a70:	00004538 	rdprs	zero,zero,276
    3a74:	000044cc 	andi	zero,zero,275
    3a78:	00004538 	rdprs	zero,zero,276
    3a7c:	00004538 	rdprs	zero,zero,276
    3a80:	00004538 	rdprs	zero,zero,276
    3a84:	00004538 	rdprs	zero,zero,276
    3a88:	00004538 	rdprs	zero,zero,276
    3a8c:	00004140 	call	414 <controller+0x78>
    3a90:	00004538 	rdprs	zero,zero,276
    3a94:	00004538 	rdprs	zero,zero,276
    3a98:	00004180 	call	418 <controller+0x7c>
    3a9c:	00004538 	rdprs	zero,zero,276
    3aa0:	00004538 	rdprs	zero,zero,276
    3aa4:	00004538 	rdprs	zero,zero,276
    3aa8:	00004538 	rdprs	zero,zero,276
    3aac:	00004538 	rdprs	zero,zero,276
    3ab0:	00004538 	rdprs	zero,zero,276
    3ab4:	00004538 	rdprs	zero,zero,276
    3ab8:	00004538 	rdprs	zero,zero,276
    3abc:	00004538 	rdprs	zero,zero,276
    3ac0:	00004538 	rdprs	zero,zero,276
    3ac4:	00004424 	muli	zero,zero,272
    3ac8:	00004464 	muli	zero,zero,273
    3acc:	0000408c 	andi	zero,zero,258
    3ad0:	0000408c 	andi	zero,zero,258
    3ad4:	0000408c 	andi	zero,zero,258
    3ad8:	00004384 	movi	zero,270
    3adc:	00004464 	muli	zero,zero,273
    3ae0:	00004538 	rdprs	zero,zero,276
    3ae4:	00004538 	rdprs	zero,zero,276
    3ae8:	00004394 	movui	zero,270
    3aec:	00004538 	rdprs	zero,zero,276
    3af0:	000043a8 	cmpgeui	zero,zero,270
    3af4:	000044fc 	xorhi	zero,zero,275
    3af8:	000043dc 	xori	zero,zero,271
    3afc:	00004210 	cmplti	zero,zero,264
    3b00:	00004538 	rdprs	zero,zero,276
    3b04:	00004220 	cmpeqi	zero,zero,264
    3b08:	00004538 	rdprs	zero,zero,276
    3b0c:	00004298 	cmpnei	zero,zero,266
    3b10:	00004538 	rdprs	zero,zero,276
    3b14:	00004538 	rdprs	zero,zero,276
    3b18:	000042d8 	cmpnei	zero,zero,267
    3b1c:	db002917 	ldw	r12,164(sp)
    3b20:	8323c83a 	sub	r17,r16,r12
    3b24:	003f7e06 	br	3920 <__alt_mem_Flash_flash_data+0xf4003920>
    3b28:	d9002f17 	ldw	r4,188(sp)
    3b2c:	b80b883a 	mov	r5,r23
    3b30:	b00d883a 	mov	r6,r22
    3b34:	000c9980 	call	c998 <__ssprint_r>
    3b38:	1000081e 	bne	r2,zero,3b5c <___svfprintf_internal_r+0x320>
    3b3c:	da000404 	addi	r8,sp,16
    3b40:	003f8406 	br	3954 <__alt_mem_Flash_flash_data+0xf4003954>
    3b44:	d8802017 	ldw	r2,128(sp)
    3b48:	10000426 	beq	r2,zero,3b5c <___svfprintf_internal_r+0x320>
    3b4c:	d9002f17 	ldw	r4,188(sp)
    3b50:	b80b883a 	mov	r5,r23
    3b54:	d9801e04 	addi	r6,sp,120
    3b58:	000c9980 	call	c998 <__ssprint_r>
    3b5c:	b880030b 	ldhu	r2,12(r23)
    3b60:	1080100c 	andi	r2,r2,64
    3b64:	10000d1e 	bne	r2,zero,3b9c <___svfprintf_internal_r+0x360>
    3b68:	d8803017 	ldw	r2,192(sp)
    3b6c:	dfc04a17 	ldw	ra,296(sp)
    3b70:	df004917 	ldw	fp,292(sp)
    3b74:	ddc04817 	ldw	r23,288(sp)
    3b78:	dd804717 	ldw	r22,284(sp)
    3b7c:	dd404617 	ldw	r21,280(sp)
    3b80:	dd004517 	ldw	r20,276(sp)
    3b84:	dcc04417 	ldw	r19,272(sp)
    3b88:	dc804317 	ldw	r18,268(sp)
    3b8c:	dc404217 	ldw	r17,264(sp)
    3b90:	dc004117 	ldw	r16,260(sp)
    3b94:	dec04b04 	addi	sp,sp,300
    3b98:	f800283a 	ret
    3b9c:	00bfffc4 	movi	r2,-1
    3ba0:	003ff206 	br	3b6c <__alt_mem_Flash_flash_data+0xf4003b6c>
    3ba4:	dc002917 	ldw	r16,164(sp)
    3ba8:	003f6d06 	br	3960 <__alt_mem_Flash_flash_data+0xf4003960>
    3bac:	1805883a 	mov	r2,r3
    3bb0:	8c400114 	ori	r17,r17,4
    3bb4:	1c000007 	ldb	r16,0(r3)
    3bb8:	003f7606 	br	3994 <__alt_mem_Flash_flash_data+0xf4003994>
    3bbc:	1c000007 	ldb	r16,0(r3)
    3bc0:	18800044 	addi	r2,r3,1
    3bc4:	8286e726 	beq	r16,r10,5764 <___svfprintf_internal_r+0x1f28>
    3bc8:	82fff404 	addi	r11,r16,-48
    3bcc:	1007883a 	mov	r3,r2
    3bd0:	0013883a 	mov	r9,zero
    3bd4:	2aff7036 	bltu	r5,r11,3998 <__alt_mem_Flash_flash_data+0xf4003998>
    3bd8:	1c000007 	ldb	r16,0(r3)
    3bdc:	4a4002a4 	muli	r9,r9,10
    3be0:	18c00044 	addi	r3,r3,1
    3be4:	5a53883a 	add	r9,r11,r9
    3be8:	82fff404 	addi	r11,r16,-48
    3bec:	2afffa2e 	bgeu	r5,r11,3bd8 <__alt_mem_Flash_flash_data+0xf4003bd8>
    3bf0:	483f690e 	bge	r9,zero,3998 <__alt_mem_Flash_flash_data+0xf4003998>
    3bf4:	027fffc4 	movi	r9,-1
    3bf8:	003f6706 	br	3998 <__alt_mem_Flash_flash_data+0xf4003998>
    3bfc:	8c402014 	ori	r17,r17,128
    3c00:	1805883a 	mov	r2,r3
    3c04:	1c000007 	ldb	r16,0(r3)
    3c08:	003f6206 	br	3994 <__alt_mem_Flash_flash_data+0xf4003994>
    3c0c:	8c400414 	ori	r17,r17,16
    3c10:	d8c02915 	stw	r3,164(sp)
    3c14:	d9802785 	stb	r6,158(sp)
    3c18:	8880080c 	andi	r2,r17,32
    3c1c:	d8c02d17 	ldw	r3,180(sp)
    3c20:	10021526 	beq	r2,zero,4478 <___svfprintf_internal_r+0xc3c>
    3c24:	db002d17 	ldw	r12,180(sp)
    3c28:	18800117 	ldw	r2,4(r3)
    3c2c:	1cc00017 	ldw	r19,0(r3)
    3c30:	63000204 	addi	r12,r12,8
    3c34:	db002d15 	stw	r12,180(sp)
    3c38:	1039883a 	mov	fp,r2
    3c3c:	10021916 	blt	r2,zero,44a4 <___svfprintf_internal_r+0xc68>
    3c40:	dd402783 	ldbu	r21,158(sp)
    3c44:	da403215 	stw	r9,200(sp)
    3c48:	00800044 	movi	r2,1
    3c4c:	9f06b03a 	or	r3,r19,fp
    3c50:	48000216 	blt	r9,zero,3c5c <___svfprintf_internal_r+0x420>
    3c54:	013fdfc4 	movi	r4,-129
    3c58:	8922703a 	and	r17,r17,r4
    3c5c:	1802461e 	bne	r3,zero,4578 <___svfprintf_internal_r+0xd3c>
    3c60:	48035426 	beq	r9,zero,49b4 <___svfprintf_internal_r+0x1178>
    3c64:	10803fcc 	andi	r2,r2,255
    3c68:	00c00044 	movi	r3,1
    3c6c:	10c26726 	beq	r2,r3,460c <___svfprintf_internal_r+0xdd0>
    3c70:	00c00084 	movi	r3,2
    3c74:	10c2ea26 	beq	r2,r3,4820 <___svfprintf_internal_r+0xfe4>
    3c78:	b007883a 	mov	r3,r22
    3c7c:	9808d0fa 	srli	r4,r19,3
    3c80:	e00a977a 	slli	r5,fp,29
    3c84:	e038d0fa 	srli	fp,fp,3
    3c88:	9cc001cc 	andi	r19,r19,7
    3c8c:	98800c04 	addi	r2,r19,48
    3c90:	18ffffc4 	addi	r3,r3,-1
    3c94:	2926b03a 	or	r19,r5,r4
    3c98:	18800005 	stb	r2,0(r3)
    3c9c:	9f08b03a 	or	r4,r19,fp
    3ca0:	203ff61e 	bne	r4,zero,3c7c <__alt_mem_Flash_flash_data+0xf4003c7c>
    3ca4:	8900004c 	andi	r4,r17,1
    3ca8:	d8c03115 	stw	r3,196(sp)
    3cac:	2002ea26 	beq	r4,zero,4858 <___svfprintf_internal_r+0x101c>
    3cb0:	10803fcc 	andi	r2,r2,255
    3cb4:	1080201c 	xori	r2,r2,128
    3cb8:	10bfe004 	addi	r2,r2,-128
    3cbc:	01000c04 	movi	r4,48
    3cc0:	11057526 	beq	r2,r4,5298 <___svfprintf_internal_r+0x1a5c>
    3cc4:	dac03117 	ldw	r11,196(sp)
    3cc8:	193fffc5 	stb	r4,-1(r3)
    3ccc:	5affffc4 	addi	r11,r11,-1
    3cd0:	dac03115 	stw	r11,196(sp)
    3cd4:	b2e5c83a 	sub	r18,r22,r11
    3cd8:	9005883a 	mov	r2,r18
    3cdc:	9240010e 	bge	r18,r9,3ce4 <___svfprintf_internal_r+0x4a8>
    3ce0:	4805883a 	mov	r2,r9
    3ce4:	d8802a15 	stw	r2,168(sp)
    3ce8:	d8003415 	stw	zero,208(sp)
    3cec:	a8803fcc 	andi	r2,r21,255
    3cf0:	1080201c 	xori	r2,r2,128
    3cf4:	10bfe004 	addi	r2,r2,-128
    3cf8:	10000326 	beq	r2,zero,3d08 <___svfprintf_internal_r+0x4cc>
    3cfc:	d8c02a17 	ldw	r3,168(sp)
    3d00:	18c00044 	addi	r3,r3,1
    3d04:	d8c02a15 	stw	r3,168(sp)
    3d08:	8ac0008c 	andi	r11,r17,2
    3d0c:	dac02b15 	stw	r11,172(sp)
    3d10:	58000326 	beq	r11,zero,3d20 <___svfprintf_internal_r+0x4e4>
    3d14:	db002a17 	ldw	r12,168(sp)
    3d18:	63000084 	addi	r12,r12,2
    3d1c:	db002a15 	stw	r12,168(sp)
    3d20:	88c0210c 	andi	r3,r17,132
    3d24:	d8c02c15 	stw	r3,176(sp)
    3d28:	1802111e 	bne	r3,zero,4570 <___svfprintf_internal_r+0xd34>
    3d2c:	dac02e17 	ldw	r11,184(sp)
    3d30:	db002a17 	ldw	r12,168(sp)
    3d34:	5b39c83a 	sub	fp,r11,r12
    3d38:	07020d0e 	bge	zero,fp,4570 <___svfprintf_internal_r+0xd34>
    3d3c:	02400404 	movi	r9,16
    3d40:	d8c02017 	ldw	r3,128(sp)
    3d44:	d8801f17 	ldw	r2,124(sp)
    3d48:	4f058c0e 	bge	r9,fp,537c <___svfprintf_internal_r+0x1b40>
    3d4c:	014000b4 	movhi	r5,2
    3d50:	e009883a 	mov	r4,fp
    3d54:	29408984 	addi	r5,r5,550
    3d58:	dc003c15 	stw	r16,240(sp)
    3d5c:	9039883a 	mov	fp,r18
    3d60:	d9403615 	stw	r5,216(sp)
    3d64:	8825883a 	mov	r18,r17
    3d68:	482b883a 	mov	r21,r9
    3d6c:	04c001c4 	movi	r19,7
    3d70:	dc002f17 	ldw	r16,188(sp)
    3d74:	2023883a 	mov	r17,r4
    3d78:	00000306 	br	3d88 <___svfprintf_internal_r+0x54c>
    3d7c:	8c7ffc04 	addi	r17,r17,-16
    3d80:	42000204 	addi	r8,r8,8
    3d84:	ac40130e 	bge	r21,r17,3dd4 <___svfprintf_internal_r+0x598>
    3d88:	02c000b4 	movhi	r11,2
    3d8c:	18c00404 	addi	r3,r3,16
    3d90:	10800044 	addi	r2,r2,1
    3d94:	5ac08984 	addi	r11,r11,550
    3d98:	42c00015 	stw	r11,0(r8)
    3d9c:	45400115 	stw	r21,4(r8)
    3da0:	d8c02015 	stw	r3,128(sp)
    3da4:	d8801f15 	stw	r2,124(sp)
    3da8:	98bff40e 	bge	r19,r2,3d7c <__alt_mem_Flash_flash_data+0xf4003d7c>
    3dac:	8009883a 	mov	r4,r16
    3db0:	b80b883a 	mov	r5,r23
    3db4:	b00d883a 	mov	r6,r22
    3db8:	000c9980 	call	c998 <__ssprint_r>
    3dbc:	103f671e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    3dc0:	8c7ffc04 	addi	r17,r17,-16
    3dc4:	d8c02017 	ldw	r3,128(sp)
    3dc8:	d8801f17 	ldw	r2,124(sp)
    3dcc:	da000404 	addi	r8,sp,16
    3dd0:	ac7fed16 	blt	r21,r17,3d88 <__alt_mem_Flash_flash_data+0xf4003d88>
    3dd4:	dc003c17 	ldw	r16,240(sp)
    3dd8:	8809883a 	mov	r4,r17
    3ddc:	9023883a 	mov	r17,r18
    3de0:	e025883a 	mov	r18,fp
    3de4:	2039883a 	mov	fp,r4
    3de8:	db003617 	ldw	r12,216(sp)
    3dec:	e0c7883a 	add	r3,fp,r3
    3df0:	10800044 	addi	r2,r2,1
    3df4:	43000015 	stw	r12,0(r8)
    3df8:	47000115 	stw	fp,4(r8)
    3dfc:	d8c02015 	stw	r3,128(sp)
    3e00:	d8801f15 	stw	r2,124(sp)
    3e04:	010001c4 	movi	r4,7
    3e08:	20834416 	blt	r4,r2,4b1c <___svfprintf_internal_r+0x12e0>
    3e0c:	d8802787 	ldb	r2,158(sp)
    3e10:	42000204 	addi	r8,r8,8
    3e14:	10000c26 	beq	r2,zero,3e48 <___svfprintf_internal_r+0x60c>
    3e18:	d8801f17 	ldw	r2,124(sp)
    3e1c:	d9002784 	addi	r4,sp,158
    3e20:	18c00044 	addi	r3,r3,1
    3e24:	10800044 	addi	r2,r2,1
    3e28:	41000015 	stw	r4,0(r8)
    3e2c:	01000044 	movi	r4,1
    3e30:	41000115 	stw	r4,4(r8)
    3e34:	d8c02015 	stw	r3,128(sp)
    3e38:	d8801f15 	stw	r2,124(sp)
    3e3c:	010001c4 	movi	r4,7
    3e40:	2082f616 	blt	r4,r2,4a1c <___svfprintf_internal_r+0x11e0>
    3e44:	42000204 	addi	r8,r8,8
    3e48:	dac02b17 	ldw	r11,172(sp)
    3e4c:	58000c26 	beq	r11,zero,3e80 <___svfprintf_internal_r+0x644>
    3e50:	d8801f17 	ldw	r2,124(sp)
    3e54:	d9002704 	addi	r4,sp,156
    3e58:	18c00084 	addi	r3,r3,2
    3e5c:	10800044 	addi	r2,r2,1
    3e60:	41000015 	stw	r4,0(r8)
    3e64:	01000084 	movi	r4,2
    3e68:	41000115 	stw	r4,4(r8)
    3e6c:	d8c02015 	stw	r3,128(sp)
    3e70:	d8801f15 	stw	r2,124(sp)
    3e74:	010001c4 	movi	r4,7
    3e78:	2082e016 	blt	r4,r2,49fc <___svfprintf_internal_r+0x11c0>
    3e7c:	42000204 	addi	r8,r8,8
    3e80:	db002c17 	ldw	r12,176(sp)
    3e84:	00802004 	movi	r2,128
    3e88:	60822f26 	beq	r12,r2,4748 <___svfprintf_internal_r+0xf0c>
    3e8c:	db003217 	ldw	r12,200(sp)
    3e90:	64abc83a 	sub	r21,r12,r18
    3e94:	0540310e 	bge	zero,r21,3f5c <___svfprintf_internal_r+0x720>
    3e98:	07000404 	movi	fp,16
    3e9c:	d8801f17 	ldw	r2,124(sp)
    3ea0:	e544270e 	bge	fp,r21,4f40 <___svfprintf_internal_r+0x1704>
    3ea4:	014000b4 	movhi	r5,2
    3ea8:	a809883a 	mov	r4,r21
    3eac:	29408584 	addi	r5,r5,534
    3eb0:	dc002c15 	stw	r16,176(sp)
    3eb4:	902b883a 	mov	r21,r18
    3eb8:	d9402b15 	stw	r5,172(sp)
    3ebc:	8825883a 	mov	r18,r17
    3ec0:	04c001c4 	movi	r19,7
    3ec4:	dc002f17 	ldw	r16,188(sp)
    3ec8:	2023883a 	mov	r17,r4
    3ecc:	00000306 	br	3edc <___svfprintf_internal_r+0x6a0>
    3ed0:	8c7ffc04 	addi	r17,r17,-16
    3ed4:	42000204 	addi	r8,r8,8
    3ed8:	e440110e 	bge	fp,r17,3f20 <___svfprintf_internal_r+0x6e4>
    3edc:	18c00404 	addi	r3,r3,16
    3ee0:	10800044 	addi	r2,r2,1
    3ee4:	45000015 	stw	r20,0(r8)
    3ee8:	47000115 	stw	fp,4(r8)
    3eec:	d8c02015 	stw	r3,128(sp)
    3ef0:	d8801f15 	stw	r2,124(sp)
    3ef4:	98bff60e 	bge	r19,r2,3ed0 <__alt_mem_Flash_flash_data+0xf4003ed0>
    3ef8:	8009883a 	mov	r4,r16
    3efc:	b80b883a 	mov	r5,r23
    3f00:	b00d883a 	mov	r6,r22
    3f04:	000c9980 	call	c998 <__ssprint_r>
    3f08:	103f141e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    3f0c:	8c7ffc04 	addi	r17,r17,-16
    3f10:	d8c02017 	ldw	r3,128(sp)
    3f14:	d8801f17 	ldw	r2,124(sp)
    3f18:	da000404 	addi	r8,sp,16
    3f1c:	e47fef16 	blt	fp,r17,3edc <__alt_mem_Flash_flash_data+0xf4003edc>
    3f20:	dc002c17 	ldw	r16,176(sp)
    3f24:	8809883a 	mov	r4,r17
    3f28:	9023883a 	mov	r17,r18
    3f2c:	a825883a 	mov	r18,r21
    3f30:	202b883a 	mov	r21,r4
    3f34:	dac02b17 	ldw	r11,172(sp)
    3f38:	1d47883a 	add	r3,r3,r21
    3f3c:	10800044 	addi	r2,r2,1
    3f40:	42c00015 	stw	r11,0(r8)
    3f44:	45400115 	stw	r21,4(r8)
    3f48:	d8c02015 	stw	r3,128(sp)
    3f4c:	d8801f15 	stw	r2,124(sp)
    3f50:	010001c4 	movi	r4,7
    3f54:	2082a116 	blt	r4,r2,49dc <___svfprintf_internal_r+0x11a0>
    3f58:	42000204 	addi	r8,r8,8
    3f5c:	8880400c 	andi	r2,r17,256
    3f60:	1001b01e 	bne	r2,zero,4624 <___svfprintf_internal_r+0xde8>
    3f64:	d8801f17 	ldw	r2,124(sp)
    3f68:	db003117 	ldw	r12,196(sp)
    3f6c:	1c87883a 	add	r3,r3,r18
    3f70:	10800044 	addi	r2,r2,1
    3f74:	43000015 	stw	r12,0(r8)
    3f78:	44800115 	stw	r18,4(r8)
    3f7c:	d8c02015 	stw	r3,128(sp)
    3f80:	d8801f15 	stw	r2,124(sp)
    3f84:	010001c4 	movi	r4,7
    3f88:	20828216 	blt	r4,r2,4994 <___svfprintf_internal_r+0x1158>
    3f8c:	42000204 	addi	r8,r8,8
    3f90:	8c40010c 	andi	r17,r17,4
    3f94:	88003226 	beq	r17,zero,4060 <___svfprintf_internal_r+0x824>
    3f98:	db002e17 	ldw	r12,184(sp)
    3f9c:	dac02a17 	ldw	r11,168(sp)
    3fa0:	62e1c83a 	sub	r16,r12,r11
    3fa4:	04002e0e 	bge	zero,r16,4060 <___svfprintf_internal_r+0x824>
    3fa8:	04400404 	movi	r17,16
    3fac:	d8801f17 	ldw	r2,124(sp)
    3fb0:	8c05330e 	bge	r17,r16,5480 <___svfprintf_internal_r+0x1c44>
    3fb4:	010000b4 	movhi	r4,2
    3fb8:	21008984 	addi	r4,r4,550
    3fbc:	d9003615 	stw	r4,216(sp)
    3fc0:	048001c4 	movi	r18,7
    3fc4:	dcc02f17 	ldw	r19,188(sp)
    3fc8:	00000306 	br	3fd8 <___svfprintf_internal_r+0x79c>
    3fcc:	843ffc04 	addi	r16,r16,-16
    3fd0:	42000204 	addi	r8,r8,8
    3fd4:	8c00130e 	bge	r17,r16,4024 <___svfprintf_internal_r+0x7e8>
    3fd8:	014000b4 	movhi	r5,2
    3fdc:	18c00404 	addi	r3,r3,16
    3fe0:	10800044 	addi	r2,r2,1
    3fe4:	29408984 	addi	r5,r5,550
    3fe8:	41400015 	stw	r5,0(r8)
    3fec:	44400115 	stw	r17,4(r8)
    3ff0:	d8c02015 	stw	r3,128(sp)
    3ff4:	d8801f15 	stw	r2,124(sp)
    3ff8:	90bff40e 	bge	r18,r2,3fcc <__alt_mem_Flash_flash_data+0xf4003fcc>
    3ffc:	9809883a 	mov	r4,r19
    4000:	b80b883a 	mov	r5,r23
    4004:	b00d883a 	mov	r6,r22
    4008:	000c9980 	call	c998 <__ssprint_r>
    400c:	103ed31e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    4010:	843ffc04 	addi	r16,r16,-16
    4014:	d8c02017 	ldw	r3,128(sp)
    4018:	d8801f17 	ldw	r2,124(sp)
    401c:	da000404 	addi	r8,sp,16
    4020:	8c3fed16 	blt	r17,r16,3fd8 <__alt_mem_Flash_flash_data+0xf4003fd8>
    4024:	dac03617 	ldw	r11,216(sp)
    4028:	1c07883a 	add	r3,r3,r16
    402c:	10800044 	addi	r2,r2,1
    4030:	42c00015 	stw	r11,0(r8)
    4034:	44000115 	stw	r16,4(r8)
    4038:	d8c02015 	stw	r3,128(sp)
    403c:	d8801f15 	stw	r2,124(sp)
    4040:	010001c4 	movi	r4,7
    4044:	2080060e 	bge	r4,r2,4060 <___svfprintf_internal_r+0x824>
    4048:	d9002f17 	ldw	r4,188(sp)
    404c:	b80b883a 	mov	r5,r23
    4050:	b00d883a 	mov	r6,r22
    4054:	000c9980 	call	c998 <__ssprint_r>
    4058:	103ec01e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    405c:	d8c02017 	ldw	r3,128(sp)
    4060:	d8802a17 	ldw	r2,168(sp)
    4064:	db002e17 	ldw	r12,184(sp)
    4068:	1300010e 	bge	r2,r12,4070 <___svfprintf_internal_r+0x834>
    406c:	6005883a 	mov	r2,r12
    4070:	dac03017 	ldw	r11,192(sp)
    4074:	5897883a 	add	r11,r11,r2
    4078:	dac03015 	stw	r11,192(sp)
    407c:	1802331e 	bne	r3,zero,494c <___svfprintf_internal_r+0x1110>
    4080:	d8001f15 	stw	zero,124(sp)
    4084:	da000404 	addi	r8,sp,16
    4088:	003e1806 	br	38ec <__alt_mem_Flash_flash_data+0xf40038ec>
    408c:	db002d17 	ldw	r12,180(sp)
    4090:	dac02d17 	ldw	r11,180(sp)
    4094:	d8c02915 	stw	r3,164(sp)
    4098:	63000017 	ldw	r12,0(r12)
    409c:	5ac00117 	ldw	r11,4(r11)
    40a0:	d9802785 	stb	r6,158(sp)
    40a4:	6009883a 	mov	r4,r12
    40a8:	580b883a 	mov	r5,r11
    40ac:	db003715 	stw	r12,220(sp)
    40b0:	da004015 	stw	r8,256(sp)
    40b4:	da403f15 	stw	r9,252(sp)
    40b8:	dac03815 	stw	r11,224(sp)
    40bc:	000c6f00 	call	c6f0 <__fpclassifyd>
    40c0:	db002d17 	ldw	r12,180(sp)
    40c4:	04800044 	movi	r18,1
    40c8:	da004017 	ldw	r8,256(sp)
    40cc:	64c00204 	addi	r19,r12,8
    40d0:	da403f17 	ldw	r9,252(sp)
    40d4:	d9003717 	ldw	r4,220(sp)
    40d8:	d9403817 	ldw	r5,224(sp)
    40dc:	1483561e 	bne	r2,r18,4e38 <___svfprintf_internal_r+0x15fc>
    40e0:	000d883a 	mov	r6,zero
    40e4:	000f883a 	mov	r7,zero
    40e8:	00118a00 	call	118a0 <__ledf2>
    40ec:	da004017 	ldw	r8,256(sp)
    40f0:	1004ee16 	blt	r2,zero,54ac <___svfprintf_internal_r+0x1c70>
    40f4:	dd402783 	ldbu	r21,158(sp)
    40f8:	008011c4 	movi	r2,71
    40fc:	1404440e 	bge	r2,r16,5210 <___svfprintf_internal_r+0x19d4>
    4100:	00c000b4 	movhi	r3,2
    4104:	18c07604 	addi	r3,r3,472
    4108:	d8c03115 	stw	r3,196(sp)
    410c:	02c000c4 	movi	r11,3
    4110:	00bfdfc4 	movi	r2,-129
    4114:	dac02a15 	stw	r11,168(sp)
    4118:	88a2703a 	and	r17,r17,r2
    411c:	dcc02d15 	stw	r19,180(sp)
    4120:	5825883a 	mov	r18,r11
    4124:	d8003215 	stw	zero,200(sp)
    4128:	d8003415 	stw	zero,208(sp)
    412c:	003eef06 	br	3cec <__alt_mem_Flash_flash_data+0xf4003cec>
    4130:	8c400214 	ori	r17,r17,8
    4134:	1805883a 	mov	r2,r3
    4138:	1c000007 	ldb	r16,0(r3)
    413c:	003e1506 	br	3994 <__alt_mem_Flash_flash_data+0xf4003994>
    4140:	8c400414 	ori	r17,r17,16
    4144:	d8c02915 	stw	r3,164(sp)
    4148:	88c0080c 	andi	r3,r17,32
    414c:	d8802d17 	ldw	r2,180(sp)
    4150:	18005526 	beq	r3,zero,42a8 <___svfprintf_internal_r+0xa6c>
    4154:	dac02d17 	ldw	r11,180(sp)
    4158:	14c00017 	ldw	r19,0(r2)
    415c:	17000117 	ldw	fp,4(r2)
    4160:	5ac00204 	addi	r11,r11,8
    4164:	dac02d15 	stw	r11,180(sp)
    4168:	00800044 	movi	r2,1
    416c:	9f06b03a 	or	r3,r19,fp
    4170:	d8002785 	stb	zero,158(sp)
    4174:	da403215 	stw	r9,200(sp)
    4178:	002b883a 	mov	r21,zero
    417c:	003eb406 	br	3c50 <__alt_mem_Flash_flash_data+0xf4003c50>
    4180:	030000b4 	movhi	r12,2
    4184:	63007904 	addi	r12,r12,484
    4188:	d8c02915 	stw	r3,164(sp)
    418c:	d9802785 	stb	r6,158(sp)
    4190:	db003b15 	stw	r12,236(sp)
    4194:	88c0080c 	andi	r3,r17,32
    4198:	d8802d17 	ldw	r2,180(sp)
    419c:	18005626 	beq	r3,zero,42f8 <___svfprintf_internal_r+0xabc>
    41a0:	dac02d17 	ldw	r11,180(sp)
    41a4:	14c00017 	ldw	r19,0(r2)
    41a8:	17000117 	ldw	fp,4(r2)
    41ac:	5ac00204 	addi	r11,r11,8
    41b0:	dac02d15 	stw	r11,180(sp)
    41b4:	8880004c 	andi	r2,r17,1
    41b8:	10029326 	beq	r2,zero,4c08 <___svfprintf_internal_r+0x13cc>
    41bc:	9f06b03a 	or	r3,r19,fp
    41c0:	18033526 	beq	r3,zero,4e98 <___svfprintf_internal_r+0x165c>
    41c4:	00800c04 	movi	r2,48
    41c8:	d8802705 	stb	r2,156(sp)
    41cc:	dc002745 	stb	r16,157(sp)
    41d0:	8c400094 	ori	r17,r17,2
    41d4:	00800084 	movi	r2,2
    41d8:	003fe506 	br	4170 <__alt_mem_Flash_flash_data+0xf4004170>
    41dc:	1805883a 	mov	r2,r3
    41e0:	d8002e15 	stw	zero,184(sp)
    41e4:	82fff404 	addi	r11,r16,-48
    41e8:	0019883a 	mov	r12,zero
    41ec:	14000007 	ldb	r16,0(r2)
    41f0:	630002a4 	muli	r12,r12,10
    41f4:	18c00044 	addi	r3,r3,1
    41f8:	1805883a 	mov	r2,r3
    41fc:	62d9883a 	add	r12,r12,r11
    4200:	82fff404 	addi	r11,r16,-48
    4204:	2afff92e 	bgeu	r5,r11,41ec <__alt_mem_Flash_flash_data+0xf40041ec>
    4208:	db002e15 	stw	r12,184(sp)
    420c:	003de206 	br	3998 <__alt_mem_Flash_flash_data+0xf4003998>
    4210:	8c400814 	ori	r17,r17,32
    4214:	1805883a 	mov	r2,r3
    4218:	1c000007 	ldb	r16,0(r3)
    421c:	003ddd06 	br	3994 <__alt_mem_Flash_flash_data+0xf4003994>
    4220:	dac02d17 	ldw	r11,180(sp)
    4224:	db002d17 	ldw	r12,180(sp)
    4228:	d8c02915 	stw	r3,164(sp)
    422c:	5ac00017 	ldw	r11,0(r11)
    4230:	d8002785 	stb	zero,158(sp)
    4234:	64c00104 	addi	r19,r12,4
    4238:	dac03115 	stw	r11,196(sp)
    423c:	58048126 	beq	r11,zero,5444 <___svfprintf_internal_r+0x1c08>
    4240:	d9003117 	ldw	r4,196(sp)
    4244:	48041716 	blt	r9,zero,52a4 <___svfprintf_internal_r+0x1a68>
    4248:	480d883a 	mov	r6,r9
    424c:	000b883a 	mov	r5,zero
    4250:	da004015 	stw	r8,256(sp)
    4254:	da403f15 	stw	r9,252(sp)
    4258:	000ad480 	call	ad48 <memchr>
    425c:	da004017 	ldw	r8,256(sp)
    4260:	da403f17 	ldw	r9,252(sp)
    4264:	1004db26 	beq	r2,zero,55d4 <___svfprintf_internal_r+0x1d98>
    4268:	d8c03117 	ldw	r3,196(sp)
    426c:	10e5c83a 	sub	r18,r2,r3
    4270:	4c80010e 	bge	r9,r18,4278 <___svfprintf_internal_r+0xa3c>
    4274:	4825883a 	mov	r18,r9
    4278:	9005883a 	mov	r2,r18
    427c:	90040e16 	blt	r18,zero,52b8 <___svfprintf_internal_r+0x1a7c>
    4280:	dd402783 	ldbu	r21,158(sp)
    4284:	d8802a15 	stw	r2,168(sp)
    4288:	dcc02d15 	stw	r19,180(sp)
    428c:	d8003215 	stw	zero,200(sp)
    4290:	d8003415 	stw	zero,208(sp)
    4294:	003e9506 	br	3cec <__alt_mem_Flash_flash_data+0xf4003cec>
    4298:	d8c02915 	stw	r3,164(sp)
    429c:	88c0080c 	andi	r3,r17,32
    42a0:	d8802d17 	ldw	r2,180(sp)
    42a4:	183fab1e 	bne	r3,zero,4154 <__alt_mem_Flash_flash_data+0xf4004154>
    42a8:	88c0040c 	andi	r3,r17,16
    42ac:	1802681e 	bne	r3,zero,4c50 <___svfprintf_internal_r+0x1414>
    42b0:	88c0100c 	andi	r3,r17,64
    42b4:	18026626 	beq	r3,zero,4c50 <___svfprintf_internal_r+0x1414>
    42b8:	dac02d17 	ldw	r11,180(sp)
    42bc:	14c0000b 	ldhu	r19,0(r2)
    42c0:	0039883a 	mov	fp,zero
    42c4:	5ac00104 	addi	r11,r11,4
    42c8:	dac02d15 	stw	r11,180(sp)
    42cc:	00800044 	movi	r2,1
    42d0:	9807883a 	mov	r3,r19
    42d4:	003fa606 	br	4170 <__alt_mem_Flash_flash_data+0xf4004170>
    42d8:	008000b4 	movhi	r2,2
    42dc:	10807e04 	addi	r2,r2,504
    42e0:	d8c02915 	stw	r3,164(sp)
    42e4:	d8803b15 	stw	r2,236(sp)
    42e8:	d9802785 	stb	r6,158(sp)
    42ec:	88c0080c 	andi	r3,r17,32
    42f0:	d8802d17 	ldw	r2,180(sp)
    42f4:	183faa1e 	bne	r3,zero,41a0 <__alt_mem_Flash_flash_data+0xf40041a0>
    42f8:	88c0040c 	andi	r3,r17,16
    42fc:	1802e826 	beq	r3,zero,4ea0 <___svfprintf_internal_r+0x1664>
    4300:	db002d17 	ldw	r12,180(sp)
    4304:	14c00017 	ldw	r19,0(r2)
    4308:	0039883a 	mov	fp,zero
    430c:	63000104 	addi	r12,r12,4
    4310:	db002d15 	stw	r12,180(sp)
    4314:	003fa706 	br	41b4 <__alt_mem_Flash_flash_data+0xf40041b4>
    4318:	30803fcc 	andi	r2,r6,255
    431c:	1080201c 	xori	r2,r2,128
    4320:	10bfe004 	addi	r2,r2,-128
    4324:	1002d91e 	bne	r2,zero,4e8c <___svfprintf_internal_r+0x1650>
    4328:	1805883a 	mov	r2,r3
    432c:	01800804 	movi	r6,32
    4330:	1c000007 	ldb	r16,0(r3)
    4334:	003d9706 	br	3994 <__alt_mem_Flash_flash_data+0xf4003994>
    4338:	8c400054 	ori	r17,r17,1
    433c:	1805883a 	mov	r2,r3
    4340:	1c000007 	ldb	r16,0(r3)
    4344:	003d9306 	br	3994 <__alt_mem_Flash_flash_data+0xf4003994>
    4348:	dac02d17 	ldw	r11,180(sp)
    434c:	db002d17 	ldw	r12,180(sp)
    4350:	5ac00017 	ldw	r11,0(r11)
    4354:	dac02e15 	stw	r11,184(sp)
    4358:	62c00104 	addi	r11,r12,4
    435c:	db002e17 	ldw	r12,184(sp)
    4360:	60033e16 	blt	r12,zero,505c <___svfprintf_internal_r+0x1820>
    4364:	dac02d15 	stw	r11,180(sp)
    4368:	1805883a 	mov	r2,r3
    436c:	1c000007 	ldb	r16,0(r3)
    4370:	003d8806 	br	3994 <__alt_mem_Flash_flash_data+0xf4003994>
    4374:	1805883a 	mov	r2,r3
    4378:	01800ac4 	movi	r6,43
    437c:	1c000007 	ldb	r16,0(r3)
    4380:	003d8406 	br	3994 <__alt_mem_Flash_flash_data+0xf4003994>
    4384:	8c401014 	ori	r17,r17,64
    4388:	1805883a 	mov	r2,r3
    438c:	1c000007 	ldb	r16,0(r3)
    4390:	003d8006 	br	3994 <__alt_mem_Flash_flash_data+0xf4003994>
    4394:	1c000007 	ldb	r16,0(r3)
    4398:	81c33626 	beq	r16,r7,5074 <___svfprintf_internal_r+0x1838>
    439c:	8c400414 	ori	r17,r17,16
    43a0:	1805883a 	mov	r2,r3
    43a4:	003d7b06 	br	3994 <__alt_mem_Flash_flash_data+0xf4003994>
    43a8:	d8c02915 	stw	r3,164(sp)
    43ac:	d9802785 	stb	r6,158(sp)
    43b0:	8880080c 	andi	r2,r17,32
    43b4:	1002c226 	beq	r2,zero,4ec0 <___svfprintf_internal_r+0x1684>
    43b8:	db002d17 	ldw	r12,180(sp)
    43bc:	dac03017 	ldw	r11,192(sp)
    43c0:	60800017 	ldw	r2,0(r12)
    43c4:	5807d7fa 	srai	r3,r11,31
    43c8:	63000104 	addi	r12,r12,4
    43cc:	db002d15 	stw	r12,180(sp)
    43d0:	12c00015 	stw	r11,0(r2)
    43d4:	10c00115 	stw	r3,4(r2)
    43d8:	003d4406 	br	38ec <__alt_mem_Flash_flash_data+0xf40038ec>
    43dc:	db002d17 	ldw	r12,180(sp)
    43e0:	00800c04 	movi	r2,48
    43e4:	d8802705 	stb	r2,156(sp)
    43e8:	64c00017 	ldw	r19,0(r12)
    43ec:	00801e04 	movi	r2,120
    43f0:	d8802745 	stb	r2,157(sp)
    43f4:	008000b4 	movhi	r2,2
    43f8:	10807e04 	addi	r2,r2,504
    43fc:	63000104 	addi	r12,r12,4
    4400:	d8c02915 	stw	r3,164(sp)
    4404:	d8803b15 	stw	r2,236(sp)
    4408:	0039883a 	mov	fp,zero
    440c:	8c400094 	ori	r17,r17,2
    4410:	db002d15 	stw	r12,180(sp)
    4414:	00800084 	movi	r2,2
    4418:	04001e04 	movi	r16,120
    441c:	9807883a 	mov	r3,r19
    4420:	003f5306 	br	4170 <__alt_mem_Flash_flash_data+0xf4004170>
    4424:	db002d17 	ldw	r12,180(sp)
    4428:	d8c02915 	stw	r3,164(sp)
    442c:	dac01404 	addi	r11,sp,80
    4430:	60800017 	ldw	r2,0(r12)
    4434:	00c00044 	movi	r3,1
    4438:	63000104 	addi	r12,r12,4
    443c:	d8801405 	stb	r2,80(sp)
    4440:	d8c02a15 	stw	r3,168(sp)
    4444:	d8002785 	stb	zero,158(sp)
    4448:	db002d15 	stw	r12,180(sp)
    444c:	1825883a 	mov	r18,r3
    4450:	d8003215 	stw	zero,200(sp)
    4454:	d8003415 	stw	zero,208(sp)
    4458:	dac03115 	stw	r11,196(sp)
    445c:	0005883a 	mov	r2,zero
    4460:	003e2906 	br	3d08 <__alt_mem_Flash_flash_data+0xf4003d08>
    4464:	d8c02915 	stw	r3,164(sp)
    4468:	d9802785 	stb	r6,158(sp)
    446c:	8880080c 	andi	r2,r17,32
    4470:	d8c02d17 	ldw	r3,180(sp)
    4474:	103deb1e 	bne	r2,zero,3c24 <__alt_mem_Flash_flash_data+0xf4003c24>
    4478:	8880040c 	andi	r2,r17,16
    447c:	1001e51e 	bne	r2,zero,4c14 <___svfprintf_internal_r+0x13d8>
    4480:	8880100c 	andi	r2,r17,64
    4484:	1001e326 	beq	r2,zero,4c14 <___svfprintf_internal_r+0x13d8>
    4488:	1cc0000f 	ldh	r19,0(r3)
    448c:	db002d17 	ldw	r12,180(sp)
    4490:	9839d7fa 	srai	fp,r19,31
    4494:	63000104 	addi	r12,r12,4
    4498:	db002d15 	stw	r12,180(sp)
    449c:	e005883a 	mov	r2,fp
    44a0:	103de70e 	bge	r2,zero,3c40 <__alt_mem_Flash_flash_data+0xf4003c40>
    44a4:	04e7c83a 	sub	r19,zero,r19
    44a8:	9804c03a 	cmpne	r2,r19,zero
    44ac:	0739c83a 	sub	fp,zero,fp
    44b0:	e0b9c83a 	sub	fp,fp,r2
    44b4:	05400b44 	movi	r21,45
    44b8:	dd402785 	stb	r21,158(sp)
    44bc:	da403215 	stw	r9,200(sp)
    44c0:	00800044 	movi	r2,1
    44c4:	9f06b03a 	or	r3,r19,fp
    44c8:	003de106 	br	3c50 <__alt_mem_Flash_flash_data+0xf4003c50>
    44cc:	8c400414 	ori	r17,r17,16
    44d0:	d8c02915 	stw	r3,164(sp)
    44d4:	8880080c 	andi	r2,r17,32
    44d8:	10000b26 	beq	r2,zero,4508 <___svfprintf_internal_r+0xccc>
    44dc:	db002d17 	ldw	r12,180(sp)
    44e0:	0005883a 	mov	r2,zero
    44e4:	64c00017 	ldw	r19,0(r12)
    44e8:	67000117 	ldw	fp,4(r12)
    44ec:	63000204 	addi	r12,r12,8
    44f0:	db002d15 	stw	r12,180(sp)
    44f4:	9f06b03a 	or	r3,r19,fp
    44f8:	003f1d06 	br	4170 <__alt_mem_Flash_flash_data+0xf4004170>
    44fc:	d8c02915 	stw	r3,164(sp)
    4500:	8880080c 	andi	r2,r17,32
    4504:	103ff51e 	bne	r2,zero,44dc <__alt_mem_Flash_flash_data+0xf40044dc>
    4508:	8880040c 	andi	r2,r17,16
    450c:	1001c81e 	bne	r2,zero,4c30 <___svfprintf_internal_r+0x13f4>
    4510:	8880100c 	andi	r2,r17,64
    4514:	1001c626 	beq	r2,zero,4c30 <___svfprintf_internal_r+0x13f4>
    4518:	db002d17 	ldw	r12,180(sp)
    451c:	0039883a 	mov	fp,zero
    4520:	0005883a 	mov	r2,zero
    4524:	64c0000b 	ldhu	r19,0(r12)
    4528:	63000104 	addi	r12,r12,4
    452c:	db002d15 	stw	r12,180(sp)
    4530:	9807883a 	mov	r3,r19
    4534:	003f0e06 	br	4170 <__alt_mem_Flash_flash_data+0xf4004170>
    4538:	d8c02915 	stw	r3,164(sp)
    453c:	d9802785 	stb	r6,158(sp)
    4540:	803d8026 	beq	r16,zero,3b44 <__alt_mem_Flash_flash_data+0xf4003b44>
    4544:	02c00044 	movi	r11,1
    4548:	db001404 	addi	r12,sp,80
    454c:	dac02a15 	stw	r11,168(sp)
    4550:	dc001405 	stb	r16,80(sp)
    4554:	d8002785 	stb	zero,158(sp)
    4558:	5825883a 	mov	r18,r11
    455c:	d8003215 	stw	zero,200(sp)
    4560:	d8003415 	stw	zero,208(sp)
    4564:	db003115 	stw	r12,196(sp)
    4568:	0005883a 	mov	r2,zero
    456c:	003de606 	br	3d08 <__alt_mem_Flash_flash_data+0xf4003d08>
    4570:	d8c02017 	ldw	r3,128(sp)
    4574:	003e2706 	br	3e14 <__alt_mem_Flash_flash_data+0xf4003e14>
    4578:	10803fcc 	andi	r2,r2,255
    457c:	00c00044 	movi	r3,1
    4580:	10fdbb1e 	bne	r2,r3,3c70 <__alt_mem_Flash_flash_data+0xf4003c70>
    4584:	e000021e 	bne	fp,zero,4590 <___svfprintf_internal_r+0xd54>
    4588:	00800244 	movi	r2,9
    458c:	14c01f2e 	bgeu	r2,r19,460c <___svfprintf_internal_r+0xdd0>
    4590:	dc002a15 	stw	r16,168(sp)
    4594:	dc402b15 	stw	r17,172(sp)
    4598:	9821883a 	mov	r16,r19
    459c:	e023883a 	mov	r17,fp
    45a0:	b025883a 	mov	r18,r22
    45a4:	4827883a 	mov	r19,r9
    45a8:	4039883a 	mov	fp,r8
    45ac:	8009883a 	mov	r4,r16
    45b0:	880b883a 	mov	r5,r17
    45b4:	01800284 	movi	r6,10
    45b8:	000f883a 	mov	r7,zero
    45bc:	000ff180 	call	ff18 <__umoddi3>
    45c0:	10800c04 	addi	r2,r2,48
    45c4:	94bfffc4 	addi	r18,r18,-1
    45c8:	8009883a 	mov	r4,r16
    45cc:	880b883a 	mov	r5,r17
    45d0:	01800284 	movi	r6,10
    45d4:	000f883a 	mov	r7,zero
    45d8:	90800005 	stb	r2,0(r18)
    45dc:	000f9580 	call	f958 <__udivdi3>
    45e0:	1021883a 	mov	r16,r2
    45e4:	10c4b03a 	or	r2,r2,r3
    45e8:	1823883a 	mov	r17,r3
    45ec:	103fef1e 	bne	r2,zero,45ac <__alt_mem_Flash_flash_data+0xf40045ac>
    45f0:	dc803115 	stw	r18,196(sp)
    45f4:	dc002a17 	ldw	r16,168(sp)
    45f8:	dc402b17 	ldw	r17,172(sp)
    45fc:	9813883a 	mov	r9,r19
    4600:	e011883a 	mov	r8,fp
    4604:	b4a5c83a 	sub	r18,r22,r18
    4608:	003db306 	br	3cd8 <__alt_mem_Flash_flash_data+0xf4003cd8>
    460c:	9cc00c04 	addi	r19,r19,48
    4610:	db001dc4 	addi	r12,sp,119
    4614:	dcc01dc5 	stb	r19,119(sp)
    4618:	dc803d17 	ldw	r18,244(sp)
    461c:	db003115 	stw	r12,196(sp)
    4620:	003dad06 	br	3cd8 <__alt_mem_Flash_flash_data+0xf4003cd8>
    4624:	00801944 	movi	r2,101
    4628:	14008d0e 	bge	r2,r16,4860 <___svfprintf_internal_r+0x1024>
    462c:	d9003717 	ldw	r4,220(sp)
    4630:	d9403817 	ldw	r5,224(sp)
    4634:	000d883a 	mov	r6,zero
    4638:	000f883a 	mov	r7,zero
    463c:	d8c03e15 	stw	r3,248(sp)
    4640:	da004015 	stw	r8,256(sp)
    4644:	001173c0 	call	1173c <__eqdf2>
    4648:	d8c03e17 	ldw	r3,248(sp)
    464c:	da004017 	ldw	r8,256(sp)
    4650:	1000fd1e 	bne	r2,zero,4a48 <___svfprintf_internal_r+0x120c>
    4654:	d8801f17 	ldw	r2,124(sp)
    4658:	010000b4 	movhi	r4,2
    465c:	21008504 	addi	r4,r4,532
    4660:	18c00044 	addi	r3,r3,1
    4664:	10800044 	addi	r2,r2,1
    4668:	41000015 	stw	r4,0(r8)
    466c:	01000044 	movi	r4,1
    4670:	41000115 	stw	r4,4(r8)
    4674:	d8c02015 	stw	r3,128(sp)
    4678:	d8801f15 	stw	r2,124(sp)
    467c:	010001c4 	movi	r4,7
    4680:	20823316 	blt	r4,r2,4f50 <___svfprintf_internal_r+0x1714>
    4684:	42000204 	addi	r8,r8,8
    4688:	d8802617 	ldw	r2,152(sp)
    468c:	dac03317 	ldw	r11,204(sp)
    4690:	12c00216 	blt	r2,r11,469c <___svfprintf_internal_r+0xe60>
    4694:	8880004c 	andi	r2,r17,1
    4698:	103e3d26 	beq	r2,zero,3f90 <__alt_mem_Flash_flash_data+0xf4003f90>
    469c:	db003917 	ldw	r12,228(sp)
    46a0:	d8801f17 	ldw	r2,124(sp)
    46a4:	dac03517 	ldw	r11,212(sp)
    46a8:	1b07883a 	add	r3,r3,r12
    46ac:	10800044 	addi	r2,r2,1
    46b0:	42c00015 	stw	r11,0(r8)
    46b4:	43000115 	stw	r12,4(r8)
    46b8:	d8c02015 	stw	r3,128(sp)
    46bc:	d8801f15 	stw	r2,124(sp)
    46c0:	010001c4 	movi	r4,7
    46c4:	20826f16 	blt	r4,r2,5084 <___svfprintf_internal_r+0x1848>
    46c8:	42000204 	addi	r8,r8,8
    46cc:	db003317 	ldw	r12,204(sp)
    46d0:	643fffc4 	addi	r16,r12,-1
    46d4:	043e2e0e 	bge	zero,r16,3f90 <__alt_mem_Flash_flash_data+0xf4003f90>
    46d8:	04800404 	movi	r18,16
    46dc:	d8801f17 	ldw	r2,124(sp)
    46e0:	9400a00e 	bge	r18,r16,4964 <___svfprintf_internal_r+0x1128>
    46e4:	014000b4 	movhi	r5,2
    46e8:	29408584 	addi	r5,r5,534
    46ec:	d9402b15 	stw	r5,172(sp)
    46f0:	054001c4 	movi	r21,7
    46f4:	dcc02f17 	ldw	r19,188(sp)
    46f8:	00000306 	br	4708 <___svfprintf_internal_r+0xecc>
    46fc:	42000204 	addi	r8,r8,8
    4700:	843ffc04 	addi	r16,r16,-16
    4704:	94009a0e 	bge	r18,r16,4970 <___svfprintf_internal_r+0x1134>
    4708:	18c00404 	addi	r3,r3,16
    470c:	10800044 	addi	r2,r2,1
    4710:	45000015 	stw	r20,0(r8)
    4714:	44800115 	stw	r18,4(r8)
    4718:	d8c02015 	stw	r3,128(sp)
    471c:	d8801f15 	stw	r2,124(sp)
    4720:	a8bff60e 	bge	r21,r2,46fc <__alt_mem_Flash_flash_data+0xf40046fc>
    4724:	9809883a 	mov	r4,r19
    4728:	b80b883a 	mov	r5,r23
    472c:	b00d883a 	mov	r6,r22
    4730:	000c9980 	call	c998 <__ssprint_r>
    4734:	103d091e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    4738:	d8c02017 	ldw	r3,128(sp)
    473c:	d8801f17 	ldw	r2,124(sp)
    4740:	da000404 	addi	r8,sp,16
    4744:	003fee06 	br	4700 <__alt_mem_Flash_flash_data+0xf4004700>
    4748:	dac02e17 	ldw	r11,184(sp)
    474c:	db002a17 	ldw	r12,168(sp)
    4750:	5b2bc83a 	sub	r21,r11,r12
    4754:	057dcd0e 	bge	zero,r21,3e8c <__alt_mem_Flash_flash_data+0xf4003e8c>
    4758:	07000404 	movi	fp,16
    475c:	d8801f17 	ldw	r2,124(sp)
    4760:	e5435d0e 	bge	fp,r21,54d8 <___svfprintf_internal_r+0x1c9c>
    4764:	014000b4 	movhi	r5,2
    4768:	a809883a 	mov	r4,r21
    476c:	29408584 	addi	r5,r5,534
    4770:	dc002c15 	stw	r16,176(sp)
    4774:	902b883a 	mov	r21,r18
    4778:	d9402b15 	stw	r5,172(sp)
    477c:	8825883a 	mov	r18,r17
    4780:	04c001c4 	movi	r19,7
    4784:	dc002f17 	ldw	r16,188(sp)
    4788:	2023883a 	mov	r17,r4
    478c:	00000306 	br	479c <___svfprintf_internal_r+0xf60>
    4790:	8c7ffc04 	addi	r17,r17,-16
    4794:	42000204 	addi	r8,r8,8
    4798:	e440110e 	bge	fp,r17,47e0 <___svfprintf_internal_r+0xfa4>
    479c:	18c00404 	addi	r3,r3,16
    47a0:	10800044 	addi	r2,r2,1
    47a4:	45000015 	stw	r20,0(r8)
    47a8:	47000115 	stw	fp,4(r8)
    47ac:	d8c02015 	stw	r3,128(sp)
    47b0:	d8801f15 	stw	r2,124(sp)
    47b4:	98bff60e 	bge	r19,r2,4790 <__alt_mem_Flash_flash_data+0xf4004790>
    47b8:	8009883a 	mov	r4,r16
    47bc:	b80b883a 	mov	r5,r23
    47c0:	b00d883a 	mov	r6,r22
    47c4:	000c9980 	call	c998 <__ssprint_r>
    47c8:	103ce41e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    47cc:	8c7ffc04 	addi	r17,r17,-16
    47d0:	d8c02017 	ldw	r3,128(sp)
    47d4:	d8801f17 	ldw	r2,124(sp)
    47d8:	da000404 	addi	r8,sp,16
    47dc:	e47fef16 	blt	fp,r17,479c <__alt_mem_Flash_flash_data+0xf400479c>
    47e0:	dc002c17 	ldw	r16,176(sp)
    47e4:	8809883a 	mov	r4,r17
    47e8:	9023883a 	mov	r17,r18
    47ec:	a825883a 	mov	r18,r21
    47f0:	202b883a 	mov	r21,r4
    47f4:	dac02b17 	ldw	r11,172(sp)
    47f8:	1d47883a 	add	r3,r3,r21
    47fc:	10800044 	addi	r2,r2,1
    4800:	42c00015 	stw	r11,0(r8)
    4804:	45400115 	stw	r21,4(r8)
    4808:	d8c02015 	stw	r3,128(sp)
    480c:	d8801f15 	stw	r2,124(sp)
    4810:	010001c4 	movi	r4,7
    4814:	20818016 	blt	r4,r2,4e18 <___svfprintf_internal_r+0x15dc>
    4818:	42000204 	addi	r8,r8,8
    481c:	003d9b06 	br	3e8c <__alt_mem_Flash_flash_data+0xf4003e8c>
    4820:	d9403b17 	ldw	r5,236(sp)
    4824:	b007883a 	mov	r3,r22
    4828:	988003cc 	andi	r2,r19,15
    482c:	e008973a 	slli	r4,fp,28
    4830:	2885883a 	add	r2,r5,r2
    4834:	9826d13a 	srli	r19,r19,4
    4838:	10800003 	ldbu	r2,0(r2)
    483c:	e038d13a 	srli	fp,fp,4
    4840:	18ffffc4 	addi	r3,r3,-1
    4844:	24e6b03a 	or	r19,r4,r19
    4848:	18800005 	stb	r2,0(r3)
    484c:	9f04b03a 	or	r2,r19,fp
    4850:	103ff51e 	bne	r2,zero,4828 <__alt_mem_Flash_flash_data+0xf4004828>
    4854:	d8c03115 	stw	r3,196(sp)
    4858:	b0e5c83a 	sub	r18,r22,r3
    485c:	003d1e06 	br	3cd8 <__alt_mem_Flash_flash_data+0xf4003cd8>
    4860:	db003317 	ldw	r12,204(sp)
    4864:	00800044 	movi	r2,1
    4868:	18c00044 	addi	r3,r3,1
    486c:	13014b0e 	bge	r2,r12,4d9c <___svfprintf_internal_r+0x1560>
    4870:	dc001f17 	ldw	r16,124(sp)
    4874:	dac03117 	ldw	r11,196(sp)
    4878:	00800044 	movi	r2,1
    487c:	84000044 	addi	r16,r16,1
    4880:	40800115 	stw	r2,4(r8)
    4884:	42c00015 	stw	r11,0(r8)
    4888:	d8c02015 	stw	r3,128(sp)
    488c:	dc001f15 	stw	r16,124(sp)
    4890:	008001c4 	movi	r2,7
    4894:	14014e16 	blt	r2,r16,4dd0 <___svfprintf_internal_r+0x1594>
    4898:	42000204 	addi	r8,r8,8
    489c:	db003917 	ldw	r12,228(sp)
    48a0:	dac03517 	ldw	r11,212(sp)
    48a4:	84000044 	addi	r16,r16,1
    48a8:	1b07883a 	add	r3,r3,r12
    48ac:	42c00015 	stw	r11,0(r8)
    48b0:	43000115 	stw	r12,4(r8)
    48b4:	d8c02015 	stw	r3,128(sp)
    48b8:	dc001f15 	stw	r16,124(sp)
    48bc:	008001c4 	movi	r2,7
    48c0:	14014c16 	blt	r2,r16,4df4 <___svfprintf_internal_r+0x15b8>
    48c4:	44800204 	addi	r18,r8,8
    48c8:	d9003717 	ldw	r4,220(sp)
    48cc:	d9403817 	ldw	r5,224(sp)
    48d0:	000d883a 	mov	r6,zero
    48d4:	000f883a 	mov	r7,zero
    48d8:	d8c03e15 	stw	r3,248(sp)
    48dc:	001173c0 	call	1173c <__eqdf2>
    48e0:	d8c03e17 	ldw	r3,248(sp)
    48e4:	db003317 	ldw	r12,204(sp)
    48e8:	10009526 	beq	r2,zero,4b40 <___svfprintf_internal_r+0x1304>
    48ec:	dac03117 	ldw	r11,196(sp)
    48f0:	60bfffc4 	addi	r2,r12,-1
    48f4:	1887883a 	add	r3,r3,r2
    48f8:	59000044 	addi	r4,r11,1
    48fc:	84000044 	addi	r16,r16,1
    4900:	90800115 	stw	r2,4(r18)
    4904:	91000015 	stw	r4,0(r18)
    4908:	d8c02015 	stw	r3,128(sp)
    490c:	dc001f15 	stw	r16,124(sp)
    4910:	008001c4 	movi	r2,7
    4914:	1400b316 	blt	r2,r16,4be4 <___svfprintf_internal_r+0x13a8>
    4918:	94800204 	addi	r18,r18,8
    491c:	dac03a17 	ldw	r11,232(sp)
    4920:	dd4022c4 	addi	r21,sp,139
    4924:	84000044 	addi	r16,r16,1
    4928:	1ac7883a 	add	r3,r3,r11
    492c:	95400015 	stw	r21,0(r18)
    4930:	92c00115 	stw	r11,4(r18)
    4934:	d8c02015 	stw	r3,128(sp)
    4938:	dc001f15 	stw	r16,124(sp)
    493c:	008001c4 	movi	r2,7
    4940:	14001416 	blt	r2,r16,4994 <___svfprintf_internal_r+0x1158>
    4944:	92000204 	addi	r8,r18,8
    4948:	003d9106 	br	3f90 <__alt_mem_Flash_flash_data+0xf4003f90>
    494c:	d9002f17 	ldw	r4,188(sp)
    4950:	b80b883a 	mov	r5,r23
    4954:	b00d883a 	mov	r6,r22
    4958:	000c9980 	call	c998 <__ssprint_r>
    495c:	103dc826 	beq	r2,zero,4080 <__alt_mem_Flash_flash_data+0xf4004080>
    4960:	003c7e06 	br	3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    4964:	010000b4 	movhi	r4,2
    4968:	21008584 	addi	r4,r4,534
    496c:	d9002b15 	stw	r4,172(sp)
    4970:	dac02b17 	ldw	r11,172(sp)
    4974:	1c07883a 	add	r3,r3,r16
    4978:	44000115 	stw	r16,4(r8)
    497c:	42c00015 	stw	r11,0(r8)
    4980:	10800044 	addi	r2,r2,1
    4984:	d8c02015 	stw	r3,128(sp)
    4988:	d8801f15 	stw	r2,124(sp)
    498c:	010001c4 	movi	r4,7
    4990:	20bd7e0e 	bge	r4,r2,3f8c <__alt_mem_Flash_flash_data+0xf4003f8c>
    4994:	d9002f17 	ldw	r4,188(sp)
    4998:	b80b883a 	mov	r5,r23
    499c:	b00d883a 	mov	r6,r22
    49a0:	000c9980 	call	c998 <__ssprint_r>
    49a4:	103c6d1e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    49a8:	d8c02017 	ldw	r3,128(sp)
    49ac:	da000404 	addi	r8,sp,16
    49b0:	003d7706 	br	3f90 <__alt_mem_Flash_flash_data+0xf4003f90>
    49b4:	10803fcc 	andi	r2,r2,255
    49b8:	1000201e 	bne	r2,zero,4a3c <___svfprintf_internal_r+0x1200>
    49bc:	8880004c 	andi	r2,r17,1
    49c0:	10001e26 	beq	r2,zero,4a3c <___svfprintf_internal_r+0x1200>
    49c4:	00800c04 	movi	r2,48
    49c8:	d8c01dc4 	addi	r3,sp,119
    49cc:	d8801dc5 	stb	r2,119(sp)
    49d0:	dc803d17 	ldw	r18,244(sp)
    49d4:	d8c03115 	stw	r3,196(sp)
    49d8:	003cbf06 	br	3cd8 <__alt_mem_Flash_flash_data+0xf4003cd8>
    49dc:	d9002f17 	ldw	r4,188(sp)
    49e0:	b80b883a 	mov	r5,r23
    49e4:	b00d883a 	mov	r6,r22
    49e8:	000c9980 	call	c998 <__ssprint_r>
    49ec:	103c5b1e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    49f0:	d8c02017 	ldw	r3,128(sp)
    49f4:	da000404 	addi	r8,sp,16
    49f8:	003d5806 	br	3f5c <__alt_mem_Flash_flash_data+0xf4003f5c>
    49fc:	d9002f17 	ldw	r4,188(sp)
    4a00:	b80b883a 	mov	r5,r23
    4a04:	b00d883a 	mov	r6,r22
    4a08:	000c9980 	call	c998 <__ssprint_r>
    4a0c:	103c531e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    4a10:	d8c02017 	ldw	r3,128(sp)
    4a14:	da000404 	addi	r8,sp,16
    4a18:	003d1906 	br	3e80 <__alt_mem_Flash_flash_data+0xf4003e80>
    4a1c:	d9002f17 	ldw	r4,188(sp)
    4a20:	b80b883a 	mov	r5,r23
    4a24:	b00d883a 	mov	r6,r22
    4a28:	000c9980 	call	c998 <__ssprint_r>
    4a2c:	103c4b1e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    4a30:	d8c02017 	ldw	r3,128(sp)
    4a34:	da000404 	addi	r8,sp,16
    4a38:	003d0306 	br	3e48 <__alt_mem_Flash_flash_data+0xf4003e48>
    4a3c:	0025883a 	mov	r18,zero
    4a40:	dd803115 	stw	r22,196(sp)
    4a44:	003ca406 	br	3cd8 <__alt_mem_Flash_flash_data+0xf4003cd8>
    4a48:	dc002617 	ldw	r16,152(sp)
    4a4c:	0401480e 	bge	zero,r16,4f70 <___svfprintf_internal_r+0x1734>
    4a50:	db003117 	ldw	r12,196(sp)
    4a54:	dac03317 	ldw	r11,204(sp)
    4a58:	62e1883a 	add	r16,r12,r11
    4a5c:	db003417 	ldw	r12,208(sp)
    4a60:	5825883a 	mov	r18,r11
    4a64:	62c0010e 	bge	r12,r11,4a6c <___svfprintf_internal_r+0x1230>
    4a68:	6025883a 	mov	r18,r12
    4a6c:	04800b0e 	bge	zero,r18,4a9c <___svfprintf_internal_r+0x1260>
    4a70:	d8801f17 	ldw	r2,124(sp)
    4a74:	dac03117 	ldw	r11,196(sp)
    4a78:	1c87883a 	add	r3,r3,r18
    4a7c:	10800044 	addi	r2,r2,1
    4a80:	42c00015 	stw	r11,0(r8)
    4a84:	44800115 	stw	r18,4(r8)
    4a88:	d8c02015 	stw	r3,128(sp)
    4a8c:	d8801f15 	stw	r2,124(sp)
    4a90:	010001c4 	movi	r4,7
    4a94:	20823f16 	blt	r4,r2,5394 <___svfprintf_internal_r+0x1b58>
    4a98:	42000204 	addi	r8,r8,8
    4a9c:	90023b16 	blt	r18,zero,538c <___svfprintf_internal_r+0x1b50>
    4aa0:	db003417 	ldw	r12,208(sp)
    4aa4:	64a5c83a 	sub	r18,r12,r18
    4aa8:	0480780e 	bge	zero,r18,4c8c <___svfprintf_internal_r+0x1450>
    4aac:	05400404 	movi	r21,16
    4ab0:	d8801f17 	ldw	r2,124(sp)
    4ab4:	ac81140e 	bge	r21,r18,4f08 <___svfprintf_internal_r+0x16cc>
    4ab8:	014000b4 	movhi	r5,2
    4abc:	29408584 	addi	r5,r5,534
    4ac0:	d9402b15 	stw	r5,172(sp)
    4ac4:	070001c4 	movi	fp,7
    4ac8:	dcc02f17 	ldw	r19,188(sp)
    4acc:	00000306 	br	4adc <___svfprintf_internal_r+0x12a0>
    4ad0:	42000204 	addi	r8,r8,8
    4ad4:	94bffc04 	addi	r18,r18,-16
    4ad8:	ac810e0e 	bge	r21,r18,4f14 <___svfprintf_internal_r+0x16d8>
    4adc:	18c00404 	addi	r3,r3,16
    4ae0:	10800044 	addi	r2,r2,1
    4ae4:	45000015 	stw	r20,0(r8)
    4ae8:	45400115 	stw	r21,4(r8)
    4aec:	d8c02015 	stw	r3,128(sp)
    4af0:	d8801f15 	stw	r2,124(sp)
    4af4:	e0bff60e 	bge	fp,r2,4ad0 <__alt_mem_Flash_flash_data+0xf4004ad0>
    4af8:	9809883a 	mov	r4,r19
    4afc:	b80b883a 	mov	r5,r23
    4b00:	b00d883a 	mov	r6,r22
    4b04:	000c9980 	call	c998 <__ssprint_r>
    4b08:	103c141e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    4b0c:	d8c02017 	ldw	r3,128(sp)
    4b10:	d8801f17 	ldw	r2,124(sp)
    4b14:	da000404 	addi	r8,sp,16
    4b18:	003fee06 	br	4ad4 <__alt_mem_Flash_flash_data+0xf4004ad4>
    4b1c:	d9002f17 	ldw	r4,188(sp)
    4b20:	b80b883a 	mov	r5,r23
    4b24:	b00d883a 	mov	r6,r22
    4b28:	000c9980 	call	c998 <__ssprint_r>
    4b2c:	103c0b1e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    4b30:	d8c02017 	ldw	r3,128(sp)
    4b34:	d8802787 	ldb	r2,158(sp)
    4b38:	da000404 	addi	r8,sp,16
    4b3c:	003cb506 	br	3e14 <__alt_mem_Flash_flash_data+0xf4003e14>
    4b40:	657fffc4 	addi	r21,r12,-1
    4b44:	057f750e 	bge	zero,r21,491c <__alt_mem_Flash_flash_data+0xf400491c>
    4b48:	07000404 	movi	fp,16
    4b4c:	e542ed0e 	bge	fp,r21,5704 <___svfprintf_internal_r+0x1ec8>
    4b50:	010000b4 	movhi	r4,2
    4b54:	21008584 	addi	r4,r4,534
    4b58:	d9002b15 	stw	r4,172(sp)
    4b5c:	01c001c4 	movi	r7,7
    4b60:	dcc02f17 	ldw	r19,188(sp)
    4b64:	00000306 	br	4b74 <___svfprintf_internal_r+0x1338>
    4b68:	ad7ffc04 	addi	r21,r21,-16
    4b6c:	94800204 	addi	r18,r18,8
    4b70:	e540130e 	bge	fp,r21,4bc0 <___svfprintf_internal_r+0x1384>
    4b74:	18c00404 	addi	r3,r3,16
    4b78:	84000044 	addi	r16,r16,1
    4b7c:	95000015 	stw	r20,0(r18)
    4b80:	97000115 	stw	fp,4(r18)
    4b84:	d8c02015 	stw	r3,128(sp)
    4b88:	dc001f15 	stw	r16,124(sp)
    4b8c:	3c3ff60e 	bge	r7,r16,4b68 <__alt_mem_Flash_flash_data+0xf4004b68>
    4b90:	9809883a 	mov	r4,r19
    4b94:	b80b883a 	mov	r5,r23
    4b98:	b00d883a 	mov	r6,r22
    4b9c:	d9c03e15 	stw	r7,248(sp)
    4ba0:	000c9980 	call	c998 <__ssprint_r>
    4ba4:	d9c03e17 	ldw	r7,248(sp)
    4ba8:	103bec1e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    4bac:	ad7ffc04 	addi	r21,r21,-16
    4bb0:	d8c02017 	ldw	r3,128(sp)
    4bb4:	dc001f17 	ldw	r16,124(sp)
    4bb8:	dc800404 	addi	r18,sp,16
    4bbc:	e57fed16 	blt	fp,r21,4b74 <__alt_mem_Flash_flash_data+0xf4004b74>
    4bc0:	dac02b17 	ldw	r11,172(sp)
    4bc4:	1d47883a 	add	r3,r3,r21
    4bc8:	84000044 	addi	r16,r16,1
    4bcc:	92c00015 	stw	r11,0(r18)
    4bd0:	95400115 	stw	r21,4(r18)
    4bd4:	d8c02015 	stw	r3,128(sp)
    4bd8:	dc001f15 	stw	r16,124(sp)
    4bdc:	008001c4 	movi	r2,7
    4be0:	143f4d0e 	bge	r2,r16,4918 <__alt_mem_Flash_flash_data+0xf4004918>
    4be4:	d9002f17 	ldw	r4,188(sp)
    4be8:	b80b883a 	mov	r5,r23
    4bec:	b00d883a 	mov	r6,r22
    4bf0:	000c9980 	call	c998 <__ssprint_r>
    4bf4:	103bd91e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    4bf8:	d8c02017 	ldw	r3,128(sp)
    4bfc:	dc001f17 	ldw	r16,124(sp)
    4c00:	dc800404 	addi	r18,sp,16
    4c04:	003f4506 	br	491c <__alt_mem_Flash_flash_data+0xf400491c>
    4c08:	00800084 	movi	r2,2
    4c0c:	9f06b03a 	or	r3,r19,fp
    4c10:	003d5706 	br	4170 <__alt_mem_Flash_flash_data+0xf4004170>
    4c14:	1cc00017 	ldw	r19,0(r3)
    4c18:	dac02d17 	ldw	r11,180(sp)
    4c1c:	9839d7fa 	srai	fp,r19,31
    4c20:	5ac00104 	addi	r11,r11,4
    4c24:	dac02d15 	stw	r11,180(sp)
    4c28:	e005883a 	mov	r2,fp
    4c2c:	003c0306 	br	3c3c <__alt_mem_Flash_flash_data+0xf4003c3c>
    4c30:	dac02d17 	ldw	r11,180(sp)
    4c34:	0039883a 	mov	fp,zero
    4c38:	0005883a 	mov	r2,zero
    4c3c:	5cc00017 	ldw	r19,0(r11)
    4c40:	5ac00104 	addi	r11,r11,4
    4c44:	dac02d15 	stw	r11,180(sp)
    4c48:	9807883a 	mov	r3,r19
    4c4c:	003d4806 	br	4170 <__alt_mem_Flash_flash_data+0xf4004170>
    4c50:	db002d17 	ldw	r12,180(sp)
    4c54:	14c00017 	ldw	r19,0(r2)
    4c58:	0039883a 	mov	fp,zero
    4c5c:	63000104 	addi	r12,r12,4
    4c60:	db002d15 	stw	r12,180(sp)
    4c64:	00800044 	movi	r2,1
    4c68:	9807883a 	mov	r3,r19
    4c6c:	003d4006 	br	4170 <__alt_mem_Flash_flash_data+0xf4004170>
    4c70:	d9002f17 	ldw	r4,188(sp)
    4c74:	b80b883a 	mov	r5,r23
    4c78:	b00d883a 	mov	r6,r22
    4c7c:	000c9980 	call	c998 <__ssprint_r>
    4c80:	103bb61e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    4c84:	d8c02017 	ldw	r3,128(sp)
    4c88:	da000404 	addi	r8,sp,16
    4c8c:	db003117 	ldw	r12,196(sp)
    4c90:	dac03417 	ldw	r11,208(sp)
    4c94:	d8802617 	ldw	r2,152(sp)
    4c98:	62e5883a 	add	r18,r12,r11
    4c9c:	db003317 	ldw	r12,204(sp)
    4ca0:	13000216 	blt	r2,r12,4cac <___svfprintf_internal_r+0x1470>
    4ca4:	8900004c 	andi	r4,r17,1
    4ca8:	20000c26 	beq	r4,zero,4cdc <___svfprintf_internal_r+0x14a0>
    4cac:	dac03917 	ldw	r11,228(sp)
    4cb0:	d9001f17 	ldw	r4,124(sp)
    4cb4:	db003517 	ldw	r12,212(sp)
    4cb8:	1ac7883a 	add	r3,r3,r11
    4cbc:	21000044 	addi	r4,r4,1
    4cc0:	43000015 	stw	r12,0(r8)
    4cc4:	42c00115 	stw	r11,4(r8)
    4cc8:	d8c02015 	stw	r3,128(sp)
    4ccc:	d9001f15 	stw	r4,124(sp)
    4cd0:	014001c4 	movi	r5,7
    4cd4:	2901b716 	blt	r5,r4,53b4 <___svfprintf_internal_r+0x1b78>
    4cd8:	42000204 	addi	r8,r8,8
    4cdc:	dac03317 	ldw	r11,204(sp)
    4ce0:	8489c83a 	sub	r4,r16,r18
    4ce4:	5885c83a 	sub	r2,r11,r2
    4ce8:	1021883a 	mov	r16,r2
    4cec:	2080010e 	bge	r4,r2,4cf4 <___svfprintf_internal_r+0x14b8>
    4cf0:	2021883a 	mov	r16,r4
    4cf4:	04000a0e 	bge	zero,r16,4d20 <___svfprintf_internal_r+0x14e4>
    4cf8:	d9001f17 	ldw	r4,124(sp)
    4cfc:	1c07883a 	add	r3,r3,r16
    4d00:	44800015 	stw	r18,0(r8)
    4d04:	21000044 	addi	r4,r4,1
    4d08:	44000115 	stw	r16,4(r8)
    4d0c:	d8c02015 	stw	r3,128(sp)
    4d10:	d9001f15 	stw	r4,124(sp)
    4d14:	014001c4 	movi	r5,7
    4d18:	2901bf16 	blt	r5,r4,5418 <___svfprintf_internal_r+0x1bdc>
    4d1c:	42000204 	addi	r8,r8,8
    4d20:	8001bb16 	blt	r16,zero,5410 <___svfprintf_internal_r+0x1bd4>
    4d24:	1421c83a 	sub	r16,r2,r16
    4d28:	043c990e 	bge	zero,r16,3f90 <__alt_mem_Flash_flash_data+0xf4003f90>
    4d2c:	04800404 	movi	r18,16
    4d30:	d8801f17 	ldw	r2,124(sp)
    4d34:	943f0b0e 	bge	r18,r16,4964 <__alt_mem_Flash_flash_data+0xf4004964>
    4d38:	014000b4 	movhi	r5,2
    4d3c:	29408584 	addi	r5,r5,534
    4d40:	d9402b15 	stw	r5,172(sp)
    4d44:	054001c4 	movi	r21,7
    4d48:	dcc02f17 	ldw	r19,188(sp)
    4d4c:	00000306 	br	4d5c <___svfprintf_internal_r+0x1520>
    4d50:	42000204 	addi	r8,r8,8
    4d54:	843ffc04 	addi	r16,r16,-16
    4d58:	943f050e 	bge	r18,r16,4970 <__alt_mem_Flash_flash_data+0xf4004970>
    4d5c:	18c00404 	addi	r3,r3,16
    4d60:	10800044 	addi	r2,r2,1
    4d64:	45000015 	stw	r20,0(r8)
    4d68:	44800115 	stw	r18,4(r8)
    4d6c:	d8c02015 	stw	r3,128(sp)
    4d70:	d8801f15 	stw	r2,124(sp)
    4d74:	a8bff60e 	bge	r21,r2,4d50 <__alt_mem_Flash_flash_data+0xf4004d50>
    4d78:	9809883a 	mov	r4,r19
    4d7c:	b80b883a 	mov	r5,r23
    4d80:	b00d883a 	mov	r6,r22
    4d84:	000c9980 	call	c998 <__ssprint_r>
    4d88:	103b741e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    4d8c:	d8c02017 	ldw	r3,128(sp)
    4d90:	d8801f17 	ldw	r2,124(sp)
    4d94:	da000404 	addi	r8,sp,16
    4d98:	003fee06 	br	4d54 <__alt_mem_Flash_flash_data+0xf4004d54>
    4d9c:	8888703a 	and	r4,r17,r2
    4da0:	203eb31e 	bne	r4,zero,4870 <__alt_mem_Flash_flash_data+0xf4004870>
    4da4:	dc001f17 	ldw	r16,124(sp)
    4da8:	db003117 	ldw	r12,196(sp)
    4dac:	40800115 	stw	r2,4(r8)
    4db0:	84000044 	addi	r16,r16,1
    4db4:	43000015 	stw	r12,0(r8)
    4db8:	d8c02015 	stw	r3,128(sp)
    4dbc:	dc001f15 	stw	r16,124(sp)
    4dc0:	008001c4 	movi	r2,7
    4dc4:	143f8716 	blt	r2,r16,4be4 <__alt_mem_Flash_flash_data+0xf4004be4>
    4dc8:	44800204 	addi	r18,r8,8
    4dcc:	003ed306 	br	491c <__alt_mem_Flash_flash_data+0xf400491c>
    4dd0:	d9002f17 	ldw	r4,188(sp)
    4dd4:	b80b883a 	mov	r5,r23
    4dd8:	b00d883a 	mov	r6,r22
    4ddc:	000c9980 	call	c998 <__ssprint_r>
    4de0:	103b5e1e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    4de4:	d8c02017 	ldw	r3,128(sp)
    4de8:	dc001f17 	ldw	r16,124(sp)
    4dec:	da000404 	addi	r8,sp,16
    4df0:	003eaa06 	br	489c <__alt_mem_Flash_flash_data+0xf400489c>
    4df4:	d9002f17 	ldw	r4,188(sp)
    4df8:	b80b883a 	mov	r5,r23
    4dfc:	b00d883a 	mov	r6,r22
    4e00:	000c9980 	call	c998 <__ssprint_r>
    4e04:	103b551e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    4e08:	d8c02017 	ldw	r3,128(sp)
    4e0c:	dc001f17 	ldw	r16,124(sp)
    4e10:	dc800404 	addi	r18,sp,16
    4e14:	003eac06 	br	48c8 <__alt_mem_Flash_flash_data+0xf40048c8>
    4e18:	d9002f17 	ldw	r4,188(sp)
    4e1c:	b80b883a 	mov	r5,r23
    4e20:	b00d883a 	mov	r6,r22
    4e24:	000c9980 	call	c998 <__ssprint_r>
    4e28:	103b4c1e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    4e2c:	d8c02017 	ldw	r3,128(sp)
    4e30:	da000404 	addi	r8,sp,16
    4e34:	003c1506 	br	3e8c <__alt_mem_Flash_flash_data+0xf4003e8c>
    4e38:	da004015 	stw	r8,256(sp)
    4e3c:	da403f15 	stw	r9,252(sp)
    4e40:	000c6f00 	call	c6f0 <__fpclassifyd>
    4e44:	da004017 	ldw	r8,256(sp)
    4e48:	da403f17 	ldw	r9,252(sp)
    4e4c:	1000951e 	bne	r2,zero,50a4 <___svfprintf_internal_r+0x1868>
    4e50:	008011c4 	movi	r2,71
    4e54:	1400fb16 	blt	r2,r16,5244 <___svfprintf_internal_r+0x1a08>
    4e58:	030000b4 	movhi	r12,2
    4e5c:	63007704 	addi	r12,r12,476
    4e60:	db003115 	stw	r12,196(sp)
    4e64:	00c000c4 	movi	r3,3
    4e68:	00bfdfc4 	movi	r2,-129
    4e6c:	d8c02a15 	stw	r3,168(sp)
    4e70:	88a2703a 	and	r17,r17,r2
    4e74:	dd402783 	ldbu	r21,158(sp)
    4e78:	dcc02d15 	stw	r19,180(sp)
    4e7c:	1825883a 	mov	r18,r3
    4e80:	d8003215 	stw	zero,200(sp)
    4e84:	d8003415 	stw	zero,208(sp)
    4e88:	003b9806 	br	3cec <__alt_mem_Flash_flash_data+0xf4003cec>
    4e8c:	1c000007 	ldb	r16,0(r3)
    4e90:	1805883a 	mov	r2,r3
    4e94:	003abf06 	br	3994 <__alt_mem_Flash_flash_data+0xf4003994>
    4e98:	00800084 	movi	r2,2
    4e9c:	003cb406 	br	4170 <__alt_mem_Flash_flash_data+0xf4004170>
    4ea0:	88c0100c 	andi	r3,r17,64
    4ea4:	1800f626 	beq	r3,zero,5280 <___svfprintf_internal_r+0x1a44>
    4ea8:	dac02d17 	ldw	r11,180(sp)
    4eac:	14c0000b 	ldhu	r19,0(r2)
    4eb0:	0039883a 	mov	fp,zero
    4eb4:	5ac00104 	addi	r11,r11,4
    4eb8:	dac02d15 	stw	r11,180(sp)
    4ebc:	003cbd06 	br	41b4 <__alt_mem_Flash_flash_data+0xf40041b4>
    4ec0:	8880040c 	andi	r2,r17,16
    4ec4:	1000091e 	bne	r2,zero,4eec <___svfprintf_internal_r+0x16b0>
    4ec8:	8c40100c 	andi	r17,r17,64
    4ecc:	88000726 	beq	r17,zero,4eec <___svfprintf_internal_r+0x16b0>
    4ed0:	db002d17 	ldw	r12,180(sp)
    4ed4:	dac03017 	ldw	r11,192(sp)
    4ed8:	60800017 	ldw	r2,0(r12)
    4edc:	63000104 	addi	r12,r12,4
    4ee0:	db002d15 	stw	r12,180(sp)
    4ee4:	12c0000d 	sth	r11,0(r2)
    4ee8:	003a8006 	br	38ec <__alt_mem_Flash_flash_data+0xf40038ec>
    4eec:	db002d17 	ldw	r12,180(sp)
    4ef0:	dac03017 	ldw	r11,192(sp)
    4ef4:	60800017 	ldw	r2,0(r12)
    4ef8:	63000104 	addi	r12,r12,4
    4efc:	db002d15 	stw	r12,180(sp)
    4f00:	12c00015 	stw	r11,0(r2)
    4f04:	003a7906 	br	38ec <__alt_mem_Flash_flash_data+0xf40038ec>
    4f08:	010000b4 	movhi	r4,2
    4f0c:	21008584 	addi	r4,r4,534
    4f10:	d9002b15 	stw	r4,172(sp)
    4f14:	dac02b17 	ldw	r11,172(sp)
    4f18:	1c87883a 	add	r3,r3,r18
    4f1c:	10800044 	addi	r2,r2,1
    4f20:	42c00015 	stw	r11,0(r8)
    4f24:	44800115 	stw	r18,4(r8)
    4f28:	d8c02015 	stw	r3,128(sp)
    4f2c:	d8801f15 	stw	r2,124(sp)
    4f30:	010001c4 	movi	r4,7
    4f34:	20bf4e16 	blt	r4,r2,4c70 <__alt_mem_Flash_flash_data+0xf4004c70>
    4f38:	42000204 	addi	r8,r8,8
    4f3c:	003f5306 	br	4c8c <__alt_mem_Flash_flash_data+0xf4004c8c>
    4f40:	010000b4 	movhi	r4,2
    4f44:	21008584 	addi	r4,r4,534
    4f48:	d9002b15 	stw	r4,172(sp)
    4f4c:	003bf906 	br	3f34 <__alt_mem_Flash_flash_data+0xf4003f34>
    4f50:	d9002f17 	ldw	r4,188(sp)
    4f54:	b80b883a 	mov	r5,r23
    4f58:	b00d883a 	mov	r6,r22
    4f5c:	000c9980 	call	c998 <__ssprint_r>
    4f60:	103afe1e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    4f64:	d8c02017 	ldw	r3,128(sp)
    4f68:	da000404 	addi	r8,sp,16
    4f6c:	003dc606 	br	4688 <__alt_mem_Flash_flash_data+0xf4004688>
    4f70:	d8801f17 	ldw	r2,124(sp)
    4f74:	030000b4 	movhi	r12,2
    4f78:	01000044 	movi	r4,1
    4f7c:	18c00044 	addi	r3,r3,1
    4f80:	10800044 	addi	r2,r2,1
    4f84:	63008504 	addi	r12,r12,532
    4f88:	41000115 	stw	r4,4(r8)
    4f8c:	43000015 	stw	r12,0(r8)
    4f90:	d8c02015 	stw	r3,128(sp)
    4f94:	d8801f15 	stw	r2,124(sp)
    4f98:	010001c4 	movi	r4,7
    4f9c:	2080ad16 	blt	r4,r2,5254 <___svfprintf_internal_r+0x1a18>
    4fa0:	42000204 	addi	r8,r8,8
    4fa4:	8000041e 	bne	r16,zero,4fb8 <___svfprintf_internal_r+0x177c>
    4fa8:	dac03317 	ldw	r11,204(sp)
    4fac:	5800021e 	bne	r11,zero,4fb8 <___svfprintf_internal_r+0x177c>
    4fb0:	8880004c 	andi	r2,r17,1
    4fb4:	103bf626 	beq	r2,zero,3f90 <__alt_mem_Flash_flash_data+0xf4003f90>
    4fb8:	db003917 	ldw	r12,228(sp)
    4fbc:	d8801f17 	ldw	r2,124(sp)
    4fc0:	dac03517 	ldw	r11,212(sp)
    4fc4:	1b07883a 	add	r3,r3,r12
    4fc8:	10800044 	addi	r2,r2,1
    4fcc:	42c00015 	stw	r11,0(r8)
    4fd0:	43000115 	stw	r12,4(r8)
    4fd4:	d8c02015 	stw	r3,128(sp)
    4fd8:	d8801f15 	stw	r2,124(sp)
    4fdc:	010001c4 	movi	r4,7
    4fe0:	20818616 	blt	r4,r2,55fc <___svfprintf_internal_r+0x1dc0>
    4fe4:	42000204 	addi	r8,r8,8
    4fe8:	0421c83a 	sub	r16,zero,r16
    4fec:	0400bc0e 	bge	zero,r16,52e0 <___svfprintf_internal_r+0x1aa4>
    4ff0:	04800404 	movi	r18,16
    4ff4:	9400f80e 	bge	r18,r16,53d8 <___svfprintf_internal_r+0x1b9c>
    4ff8:	010000b4 	movhi	r4,2
    4ffc:	21008584 	addi	r4,r4,534
    5000:	d9002b15 	stw	r4,172(sp)
    5004:	054001c4 	movi	r21,7
    5008:	dcc02f17 	ldw	r19,188(sp)
    500c:	00000306 	br	501c <___svfprintf_internal_r+0x17e0>
    5010:	42000204 	addi	r8,r8,8
    5014:	843ffc04 	addi	r16,r16,-16
    5018:	9400f20e 	bge	r18,r16,53e4 <___svfprintf_internal_r+0x1ba8>
    501c:	18c00404 	addi	r3,r3,16
    5020:	10800044 	addi	r2,r2,1
    5024:	45000015 	stw	r20,0(r8)
    5028:	44800115 	stw	r18,4(r8)
    502c:	d8c02015 	stw	r3,128(sp)
    5030:	d8801f15 	stw	r2,124(sp)
    5034:	a8bff60e 	bge	r21,r2,5010 <__alt_mem_Flash_flash_data+0xf4005010>
    5038:	9809883a 	mov	r4,r19
    503c:	b80b883a 	mov	r5,r23
    5040:	b00d883a 	mov	r6,r22
    5044:	000c9980 	call	c998 <__ssprint_r>
    5048:	103ac41e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    504c:	d8c02017 	ldw	r3,128(sp)
    5050:	d8801f17 	ldw	r2,124(sp)
    5054:	da000404 	addi	r8,sp,16
    5058:	003fee06 	br	5014 <__alt_mem_Flash_flash_data+0xf4005014>
    505c:	db002e17 	ldw	r12,184(sp)
    5060:	1805883a 	mov	r2,r3
    5064:	dac02d15 	stw	r11,180(sp)
    5068:	0319c83a 	sub	r12,zero,r12
    506c:	db002e15 	stw	r12,184(sp)
    5070:	003acf06 	br	3bb0 <__alt_mem_Flash_flash_data+0xf4003bb0>
    5074:	18800044 	addi	r2,r3,1
    5078:	8c400814 	ori	r17,r17,32
    507c:	1c000047 	ldb	r16,1(r3)
    5080:	003a4406 	br	3994 <__alt_mem_Flash_flash_data+0xf4003994>
    5084:	d9002f17 	ldw	r4,188(sp)
    5088:	b80b883a 	mov	r5,r23
    508c:	b00d883a 	mov	r6,r22
    5090:	000c9980 	call	c998 <__ssprint_r>
    5094:	103ab11e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    5098:	d8c02017 	ldw	r3,128(sp)
    509c:	da000404 	addi	r8,sp,16
    50a0:	003d8a06 	br	46cc <__alt_mem_Flash_flash_data+0xf40046cc>
    50a4:	057ff7c4 	movi	r21,-33
    50a8:	00bfffc4 	movi	r2,-1
    50ac:	856a703a 	and	r21,r16,r21
    50b0:	48807126 	beq	r9,r2,5278 <___svfprintf_internal_r+0x1a3c>
    50b4:	008011c4 	movi	r2,71
    50b8:	a8814d26 	beq	r21,r2,55f0 <___svfprintf_internal_r+0x1db4>
    50bc:	db003817 	ldw	r12,224(sp)
    50c0:	8ac04014 	ori	r11,r17,256
    50c4:	dac02d15 	stw	r11,180(sp)
    50c8:	60015616 	blt	r12,zero,5624 <___svfprintf_internal_r+0x1de8>
    50cc:	dc803817 	ldw	r18,224(sp)
    50d0:	d8002a05 	stb	zero,168(sp)
    50d4:	00801984 	movi	r2,102
    50d8:	80808c26 	beq	r16,r2,530c <___svfprintf_internal_r+0x1ad0>
    50dc:	00801184 	movi	r2,70
    50e0:	80808a26 	beq	r16,r2,530c <___svfprintf_internal_r+0x1ad0>
    50e4:	00801144 	movi	r2,69
    50e8:	a8815226 	beq	r21,r2,5634 <___svfprintf_internal_r+0x1df8>
    50ec:	4839883a 	mov	fp,r9
    50f0:	d8802604 	addi	r2,sp,152
    50f4:	d8800115 	stw	r2,4(sp)
    50f8:	d9002f17 	ldw	r4,188(sp)
    50fc:	d8802504 	addi	r2,sp,148
    5100:	d9403717 	ldw	r5,220(sp)
    5104:	d8800215 	stw	r2,8(sp)
    5108:	d8802104 	addi	r2,sp,132
    510c:	df000015 	stw	fp,0(sp)
    5110:	d8800315 	stw	r2,12(sp)
    5114:	900d883a 	mov	r6,r18
    5118:	01c00084 	movi	r7,2
    511c:	da004015 	stw	r8,256(sp)
    5120:	da403f15 	stw	r9,252(sp)
    5124:	0007b500 	call	7b50 <_dtoa_r>
    5128:	d8803115 	stw	r2,196(sp)
    512c:	008019c4 	movi	r2,103
    5130:	da004017 	ldw	r8,256(sp)
    5134:	da403f17 	ldw	r9,252(sp)
    5138:	80800226 	beq	r16,r2,5144 <___svfprintf_internal_r+0x1908>
    513c:	008011c4 	movi	r2,71
    5140:	8080841e 	bne	r16,r2,5354 <___svfprintf_internal_r+0x1b18>
    5144:	8880004c 	andi	r2,r17,1
    5148:	10014f26 	beq	r2,zero,5688 <___svfprintf_internal_r+0x1e4c>
    514c:	db003117 	ldw	r12,196(sp)
    5150:	6715883a 	add	r10,r12,fp
    5154:	d9003717 	ldw	r4,220(sp)
    5158:	900b883a 	mov	r5,r18
    515c:	000d883a 	mov	r6,zero
    5160:	000f883a 	mov	r7,zero
    5164:	da004015 	stw	r8,256(sp)
    5168:	da403f15 	stw	r9,252(sp)
    516c:	da803e15 	stw	r10,248(sp)
    5170:	001173c0 	call	1173c <__eqdf2>
    5174:	da004017 	ldw	r8,256(sp)
    5178:	da403f17 	ldw	r9,252(sp)
    517c:	da803e17 	ldw	r10,248(sp)
    5180:	1000d926 	beq	r2,zero,54e8 <___svfprintf_internal_r+0x1cac>
    5184:	d8802117 	ldw	r2,132(sp)
    5188:	1280062e 	bgeu	r2,r10,51a4 <___svfprintf_internal_r+0x1968>
    518c:	01000c04 	movi	r4,48
    5190:	10c00044 	addi	r3,r2,1
    5194:	d8c02115 	stw	r3,132(sp)
    5198:	11000005 	stb	r4,0(r2)
    519c:	d8802117 	ldw	r2,132(sp)
    51a0:	12bffb36 	bltu	r2,r10,5190 <__alt_mem_Flash_flash_data+0xf4005190>
    51a4:	db003117 	ldw	r12,196(sp)
    51a8:	1305c83a 	sub	r2,r2,r12
    51ac:	d8803315 	stw	r2,204(sp)
    51b0:	008011c4 	movi	r2,71
    51b4:	a880b626 	beq	r21,r2,5490 <___svfprintf_internal_r+0x1c54>
    51b8:	00801944 	movi	r2,101
    51bc:	14017c0e 	bge	r2,r16,57b0 <___svfprintf_internal_r+0x1f74>
    51c0:	00801984 	movi	r2,102
    51c4:	80812626 	beq	r16,r2,5660 <___svfprintf_internal_r+0x1e24>
    51c8:	db002617 	ldw	r12,152(sp)
    51cc:	db003415 	stw	r12,208(sp)
    51d0:	db003417 	ldw	r12,208(sp)
    51d4:	dac03317 	ldw	r11,204(sp)
    51d8:	62c11816 	blt	r12,r11,563c <___svfprintf_internal_r+0x1e00>
    51dc:	8c40004c 	andi	r17,r17,1
    51e0:	88013b1e 	bne	r17,zero,56d0 <___svfprintf_internal_r+0x1e94>
    51e4:	6005883a 	mov	r2,r12
    51e8:	60012516 	blt	r12,zero,5680 <___svfprintf_internal_r+0x1e44>
    51ec:	dc803417 	ldw	r18,208(sp)
    51f0:	df002a07 	ldb	fp,168(sp)
    51f4:	e000b01e 	bne	fp,zero,54b8 <___svfprintf_internal_r+0x1c7c>
    51f8:	dc402d17 	ldw	r17,180(sp)
    51fc:	dd402783 	ldbu	r21,158(sp)
    5200:	d8802a15 	stw	r2,168(sp)
    5204:	dcc02d15 	stw	r19,180(sp)
    5208:	d8003215 	stw	zero,200(sp)
    520c:	003ab706 	br	3cec <__alt_mem_Flash_flash_data+0xf4003cec>
    5210:	008000b4 	movhi	r2,2
    5214:	10807504 	addi	r2,r2,468
    5218:	d8803115 	stw	r2,196(sp)
    521c:	003bbb06 	br	410c <__alt_mem_Flash_flash_data+0xf400410c>
    5220:	d9002f17 	ldw	r4,188(sp)
    5224:	04001004 	movi	r16,64
    5228:	800b883a 	mov	r5,r16
    522c:	000a5a00 	call	a5a0 <_malloc_r>
    5230:	b8800015 	stw	r2,0(r23)
    5234:	b8800415 	stw	r2,16(r23)
    5238:	10015f26 	beq	r2,zero,57b8 <___svfprintf_internal_r+0x1f7c>
    523c:	bc000515 	stw	r16,20(r23)
    5240:	00399806 	br	38a4 <__alt_mem_Flash_flash_data+0xf40038a4>
    5244:	008000b4 	movhi	r2,2
    5248:	10807804 	addi	r2,r2,480
    524c:	d8803115 	stw	r2,196(sp)
    5250:	003f0406 	br	4e64 <__alt_mem_Flash_flash_data+0xf4004e64>
    5254:	d9002f17 	ldw	r4,188(sp)
    5258:	b80b883a 	mov	r5,r23
    525c:	b00d883a 	mov	r6,r22
    5260:	000c9980 	call	c998 <__ssprint_r>
    5264:	103a3d1e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    5268:	dc002617 	ldw	r16,152(sp)
    526c:	d8c02017 	ldw	r3,128(sp)
    5270:	da000404 	addi	r8,sp,16
    5274:	003f4b06 	br	4fa4 <__alt_mem_Flash_flash_data+0xf4004fa4>
    5278:	02400184 	movi	r9,6
    527c:	003f8f06 	br	50bc <__alt_mem_Flash_flash_data+0xf40050bc>
    5280:	db002d17 	ldw	r12,180(sp)
    5284:	14c00017 	ldw	r19,0(r2)
    5288:	0039883a 	mov	fp,zero
    528c:	63000104 	addi	r12,r12,4
    5290:	db002d15 	stw	r12,180(sp)
    5294:	003bc706 	br	41b4 <__alt_mem_Flash_flash_data+0xf40041b4>
    5298:	d8c03117 	ldw	r3,196(sp)
    529c:	b0e5c83a 	sub	r18,r22,r3
    52a0:	003a8d06 	br	3cd8 <__alt_mem_Flash_flash_data+0xf4003cd8>
    52a4:	da004015 	stw	r8,256(sp)
    52a8:	00037a40 	call	37a4 <strlen>
    52ac:	1025883a 	mov	r18,r2
    52b0:	da004017 	ldw	r8,256(sp)
    52b4:	903bf20e 	bge	r18,zero,4280 <__alt_mem_Flash_flash_data+0xf4004280>
    52b8:	0005883a 	mov	r2,zero
    52bc:	003bf006 	br	4280 <__alt_mem_Flash_flash_data+0xf4004280>
    52c0:	d9002f17 	ldw	r4,188(sp)
    52c4:	b80b883a 	mov	r5,r23
    52c8:	b00d883a 	mov	r6,r22
    52cc:	000c9980 	call	c998 <__ssprint_r>
    52d0:	103a221e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    52d4:	d8c02017 	ldw	r3,128(sp)
    52d8:	d8801f17 	ldw	r2,124(sp)
    52dc:	da000404 	addi	r8,sp,16
    52e0:	db003317 	ldw	r12,204(sp)
    52e4:	dac03117 	ldw	r11,196(sp)
    52e8:	10800044 	addi	r2,r2,1
    52ec:	1b07883a 	add	r3,r3,r12
    52f0:	42c00015 	stw	r11,0(r8)
    52f4:	43000115 	stw	r12,4(r8)
    52f8:	d8c02015 	stw	r3,128(sp)
    52fc:	d8801f15 	stw	r2,124(sp)
    5300:	010001c4 	movi	r4,7
    5304:	20bb210e 	bge	r4,r2,3f8c <__alt_mem_Flash_flash_data+0xf4003f8c>
    5308:	003da206 	br	4994 <__alt_mem_Flash_flash_data+0xf4004994>
    530c:	d8802604 	addi	r2,sp,152
    5310:	d8800115 	stw	r2,4(sp)
    5314:	d9002f17 	ldw	r4,188(sp)
    5318:	d8802504 	addi	r2,sp,148
    531c:	d9403717 	ldw	r5,220(sp)
    5320:	d8800215 	stw	r2,8(sp)
    5324:	d8802104 	addi	r2,sp,132
    5328:	da400015 	stw	r9,0(sp)
    532c:	d8800315 	stw	r2,12(sp)
    5330:	900d883a 	mov	r6,r18
    5334:	01c000c4 	movi	r7,3
    5338:	da004015 	stw	r8,256(sp)
    533c:	da403f15 	stw	r9,252(sp)
    5340:	0007b500 	call	7b50 <_dtoa_r>
    5344:	da403f17 	ldw	r9,252(sp)
    5348:	da004017 	ldw	r8,256(sp)
    534c:	d8803115 	stw	r2,196(sp)
    5350:	4839883a 	mov	fp,r9
    5354:	dac03117 	ldw	r11,196(sp)
    5358:	00801184 	movi	r2,70
    535c:	5f15883a 	add	r10,r11,fp
    5360:	a8bf7c1e 	bne	r21,r2,5154 <__alt_mem_Flash_flash_data+0xf4005154>
    5364:	59000007 	ldb	r4,0(r11)
    5368:	00800c04 	movi	r2,48
    536c:	2080c826 	beq	r4,r2,5690 <___svfprintf_internal_r+0x1e54>
    5370:	d8c02617 	ldw	r3,152(sp)
    5374:	50d5883a 	add	r10,r10,r3
    5378:	003f7606 	br	5154 <__alt_mem_Flash_flash_data+0xf4005154>
    537c:	010000b4 	movhi	r4,2
    5380:	21008984 	addi	r4,r4,550
    5384:	d9003615 	stw	r4,216(sp)
    5388:	003a9706 	br	3de8 <__alt_mem_Flash_flash_data+0xf4003de8>
    538c:	0025883a 	mov	r18,zero
    5390:	003dc306 	br	4aa0 <__alt_mem_Flash_flash_data+0xf4004aa0>
    5394:	d9002f17 	ldw	r4,188(sp)
    5398:	b80b883a 	mov	r5,r23
    539c:	b00d883a 	mov	r6,r22
    53a0:	000c9980 	call	c998 <__ssprint_r>
    53a4:	1039ed1e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    53a8:	d8c02017 	ldw	r3,128(sp)
    53ac:	da000404 	addi	r8,sp,16
    53b0:	003dba06 	br	4a9c <__alt_mem_Flash_flash_data+0xf4004a9c>
    53b4:	d9002f17 	ldw	r4,188(sp)
    53b8:	b80b883a 	mov	r5,r23
    53bc:	b00d883a 	mov	r6,r22
    53c0:	000c9980 	call	c998 <__ssprint_r>
    53c4:	1039e51e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    53c8:	d8802617 	ldw	r2,152(sp)
    53cc:	d8c02017 	ldw	r3,128(sp)
    53d0:	da000404 	addi	r8,sp,16
    53d4:	003e4106 	br	4cdc <__alt_mem_Flash_flash_data+0xf4004cdc>
    53d8:	030000b4 	movhi	r12,2
    53dc:	63008584 	addi	r12,r12,534
    53e0:	db002b15 	stw	r12,172(sp)
    53e4:	dac02b17 	ldw	r11,172(sp)
    53e8:	1c07883a 	add	r3,r3,r16
    53ec:	10800044 	addi	r2,r2,1
    53f0:	42c00015 	stw	r11,0(r8)
    53f4:	44000115 	stw	r16,4(r8)
    53f8:	d8c02015 	stw	r3,128(sp)
    53fc:	d8801f15 	stw	r2,124(sp)
    5400:	010001c4 	movi	r4,7
    5404:	20bfae16 	blt	r4,r2,52c0 <__alt_mem_Flash_flash_data+0xf40052c0>
    5408:	42000204 	addi	r8,r8,8
    540c:	003fb406 	br	52e0 <__alt_mem_Flash_flash_data+0xf40052e0>
    5410:	0021883a 	mov	r16,zero
    5414:	003e4306 	br	4d24 <__alt_mem_Flash_flash_data+0xf4004d24>
    5418:	d9002f17 	ldw	r4,188(sp)
    541c:	b80b883a 	mov	r5,r23
    5420:	b00d883a 	mov	r6,r22
    5424:	000c9980 	call	c998 <__ssprint_r>
    5428:	1039cc1e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    542c:	d8802617 	ldw	r2,152(sp)
    5430:	db003317 	ldw	r12,204(sp)
    5434:	d8c02017 	ldw	r3,128(sp)
    5438:	da000404 	addi	r8,sp,16
    543c:	6085c83a 	sub	r2,r12,r2
    5440:	003e3706 	br	4d20 <__alt_mem_Flash_flash_data+0xf4004d20>
    5444:	00800184 	movi	r2,6
    5448:	1240012e 	bgeu	r2,r9,5450 <___svfprintf_internal_r+0x1c14>
    544c:	1013883a 	mov	r9,r2
    5450:	4825883a 	mov	r18,r9
    5454:	4805883a 	mov	r2,r9
    5458:	4800a216 	blt	r9,zero,56e4 <___svfprintf_internal_r+0x1ea8>
    545c:	d8802a15 	stw	r2,168(sp)
    5460:	008000b4 	movhi	r2,2
    5464:	10808304 	addi	r2,r2,524
    5468:	d8803115 	stw	r2,196(sp)
    546c:	dcc02d15 	stw	r19,180(sp)
    5470:	d8003215 	stw	zero,200(sp)
    5474:	d8003415 	stw	zero,208(sp)
    5478:	0005883a 	mov	r2,zero
    547c:	003a2206 	br	3d08 <__alt_mem_Flash_flash_data+0xf4003d08>
    5480:	030000b4 	movhi	r12,2
    5484:	63008984 	addi	r12,r12,550
    5488:	db003615 	stw	r12,216(sp)
    548c:	003ae506 	br	4024 <__alt_mem_Flash_flash_data+0xf4004024>
    5490:	d8c02617 	ldw	r3,152(sp)
    5494:	00bfff44 	movi	r2,-3
    5498:	18801516 	blt	r3,r2,54f0 <___svfprintf_internal_r+0x1cb4>
    549c:	48c01416 	blt	r9,r3,54f0 <___svfprintf_internal_r+0x1cb4>
    54a0:	d8c03415 	stw	r3,208(sp)
    54a4:	040019c4 	movi	r16,103
    54a8:	003f4906 	br	51d0 <__alt_mem_Flash_flash_data+0xf40051d0>
    54ac:	05400b44 	movi	r21,45
    54b0:	dd402785 	stb	r21,158(sp)
    54b4:	003b1006 	br	40f8 <__alt_mem_Flash_flash_data+0xf40040f8>
    54b8:	00c00b44 	movi	r3,45
    54bc:	d8802a15 	stw	r2,168(sp)
    54c0:	dc402d17 	ldw	r17,180(sp)
    54c4:	d8c02785 	stb	r3,158(sp)
    54c8:	dcc02d15 	stw	r19,180(sp)
    54cc:	d8003215 	stw	zero,200(sp)
    54d0:	00800b44 	movi	r2,45
    54d4:	003a0906 	br	3cfc <__alt_mem_Flash_flash_data+0xf4003cfc>
    54d8:	010000b4 	movhi	r4,2
    54dc:	21008584 	addi	r4,r4,534
    54e0:	d9002b15 	stw	r4,172(sp)
    54e4:	003cc306 	br	47f4 <__alt_mem_Flash_flash_data+0xf40047f4>
    54e8:	5005883a 	mov	r2,r10
    54ec:	003f2d06 	br	51a4 <__alt_mem_Flash_flash_data+0xf40051a4>
    54f0:	843fff84 	addi	r16,r16,-2
    54f4:	1f3fffc4 	addi	fp,r3,-1
    54f8:	df002615 	stw	fp,152(sp)
    54fc:	dc0022c5 	stb	r16,139(sp)
    5500:	e000a016 	blt	fp,zero,5784 <___svfprintf_internal_r+0x1f48>
    5504:	00800ac4 	movi	r2,43
    5508:	d8802305 	stb	r2,140(sp)
    550c:	00800244 	movi	r2,9
    5510:	1700800e 	bge	r2,fp,5714 <___svfprintf_internal_r+0x1ed8>
    5514:	dd4022c4 	addi	r21,sp,139
    5518:	dc002b15 	stw	r16,172(sp)
    551c:	4025883a 	mov	r18,r8
    5520:	a821883a 	mov	r16,r21
    5524:	e009883a 	mov	r4,fp
    5528:	01400284 	movi	r5,10
    552c:	00105680 	call	10568 <__modsi3>
    5530:	10800c04 	addi	r2,r2,48
    5534:	843fffc4 	addi	r16,r16,-1
    5538:	e009883a 	mov	r4,fp
    553c:	01400284 	movi	r5,10
    5540:	80800005 	stb	r2,0(r16)
    5544:	00105140 	call	10514 <__divsi3>
    5548:	1039883a 	mov	fp,r2
    554c:	00800244 	movi	r2,9
    5550:	173ff416 	blt	r2,fp,5524 <__alt_mem_Flash_flash_data+0xf4005524>
    5554:	9011883a 	mov	r8,r18
    5558:	e0800c04 	addi	r2,fp,48
    555c:	8025883a 	mov	r18,r16
    5560:	913fffc4 	addi	r4,r18,-1
    5564:	90bfffc5 	stb	r2,-1(r18)
    5568:	dc002b17 	ldw	r16,172(sp)
    556c:	25408e2e 	bgeu	r4,r21,57a8 <___svfprintf_internal_r+0x1f6c>
    5570:	d9402384 	addi	r5,sp,142
    5574:	2c8bc83a 	sub	r5,r5,r18
    5578:	d8c02344 	addi	r3,sp,141
    557c:	a94b883a 	add	r5,r21,r5
    5580:	00000106 	br	5588 <___svfprintf_internal_r+0x1d4c>
    5584:	20800003 	ldbu	r2,0(r4)
    5588:	18800005 	stb	r2,0(r3)
    558c:	18c00044 	addi	r3,r3,1
    5590:	21000044 	addi	r4,r4,1
    5594:	197ffb1e 	bne	r3,r5,5584 <__alt_mem_Flash_flash_data+0xf4005584>
    5598:	d8802304 	addi	r2,sp,140
    559c:	1485c83a 	sub	r2,r2,r18
    55a0:	d8c02344 	addi	r3,sp,141
    55a4:	1885883a 	add	r2,r3,r2
    55a8:	dac03317 	ldw	r11,204(sp)
    55ac:	156bc83a 	sub	r21,r2,r21
    55b0:	dd403a15 	stw	r21,232(sp)
    55b4:	00800044 	movi	r2,1
    55b8:	5d65883a 	add	r18,r11,r21
    55bc:	12c0770e 	bge	r2,r11,579c <___svfprintf_internal_r+0x1f60>
    55c0:	94800044 	addi	r18,r18,1
    55c4:	9005883a 	mov	r2,r18
    55c8:	90007216 	blt	r18,zero,5794 <___svfprintf_internal_r+0x1f58>
    55cc:	d8003415 	stw	zero,208(sp)
    55d0:	003f0706 	br	51f0 <__alt_mem_Flash_flash_data+0xf40051f0>
    55d4:	da402a15 	stw	r9,168(sp)
    55d8:	dd402783 	ldbu	r21,158(sp)
    55dc:	4825883a 	mov	r18,r9
    55e0:	dcc02d15 	stw	r19,180(sp)
    55e4:	d8003215 	stw	zero,200(sp)
    55e8:	d8003415 	stw	zero,208(sp)
    55ec:	0039bf06 	br	3cec <__alt_mem_Flash_flash_data+0xf4003cec>
    55f0:	483eb21e 	bne	r9,zero,50bc <__alt_mem_Flash_flash_data+0xf40050bc>
    55f4:	9013883a 	mov	r9,r18
    55f8:	003eb006 	br	50bc <__alt_mem_Flash_flash_data+0xf40050bc>
    55fc:	d9002f17 	ldw	r4,188(sp)
    5600:	b80b883a 	mov	r5,r23
    5604:	b00d883a 	mov	r6,r22
    5608:	000c9980 	call	c998 <__ssprint_r>
    560c:	1039531e 	bne	r2,zero,3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    5610:	dc002617 	ldw	r16,152(sp)
    5614:	d8c02017 	ldw	r3,128(sp)
    5618:	d8801f17 	ldw	r2,124(sp)
    561c:	da000404 	addi	r8,sp,16
    5620:	003e7106 	br	4fe8 <__alt_mem_Flash_flash_data+0xf4004fe8>
    5624:	00c00b44 	movi	r3,45
    5628:	64a0003c 	xorhi	r18,r12,32768
    562c:	d8c02a05 	stb	r3,168(sp)
    5630:	003ea806 	br	50d4 <__alt_mem_Flash_flash_data+0xf40050d4>
    5634:	4f000044 	addi	fp,r9,1
    5638:	003ead06 	br	50f0 <__alt_mem_Flash_flash_data+0xf40050f0>
    563c:	d8c03417 	ldw	r3,208(sp)
    5640:	00c0410e 	bge	zero,r3,5748 <___svfprintf_internal_r+0x1f0c>
    5644:	04800044 	movi	r18,1
    5648:	dac03317 	ldw	r11,204(sp)
    564c:	92e5883a 	add	r18,r18,r11
    5650:	9005883a 	mov	r2,r18
    5654:	903ee60e 	bge	r18,zero,51f0 <__alt_mem_Flash_flash_data+0xf40051f0>
    5658:	0005883a 	mov	r2,zero
    565c:	003ee406 	br	51f0 <__alt_mem_Flash_flash_data+0xf40051f0>
    5660:	d8c02617 	ldw	r3,152(sp)
    5664:	d8c03415 	stw	r3,208(sp)
    5668:	00c0310e 	bge	zero,r3,5730 <___svfprintf_internal_r+0x1ef4>
    566c:	48001f1e 	bne	r9,zero,56ec <___svfprintf_internal_r+0x1eb0>
    5670:	8c40004c 	andi	r17,r17,1
    5674:	88001d1e 	bne	r17,zero,56ec <___svfprintf_internal_r+0x1eb0>
    5678:	1805883a 	mov	r2,r3
    567c:	183edb0e 	bge	r3,zero,51ec <__alt_mem_Flash_flash_data+0xf40051ec>
    5680:	0005883a 	mov	r2,zero
    5684:	003ed906 	br	51ec <__alt_mem_Flash_flash_data+0xf40051ec>
    5688:	d8802117 	ldw	r2,132(sp)
    568c:	003ec506 	br	51a4 <__alt_mem_Flash_flash_data+0xf40051a4>
    5690:	d9003717 	ldw	r4,220(sp)
    5694:	900b883a 	mov	r5,r18
    5698:	000d883a 	mov	r6,zero
    569c:	000f883a 	mov	r7,zero
    56a0:	da004015 	stw	r8,256(sp)
    56a4:	da403f15 	stw	r9,252(sp)
    56a8:	da803e15 	stw	r10,248(sp)
    56ac:	001173c0 	call	1173c <__eqdf2>
    56b0:	da004017 	ldw	r8,256(sp)
    56b4:	da403f17 	ldw	r9,252(sp)
    56b8:	da803e17 	ldw	r10,248(sp)
    56bc:	103f2c26 	beq	r2,zero,5370 <__alt_mem_Flash_flash_data+0xf4005370>
    56c0:	00800044 	movi	r2,1
    56c4:	1707c83a 	sub	r3,r2,fp
    56c8:	d8c02615 	stw	r3,152(sp)
    56cc:	003f2906 	br	5374 <__alt_mem_Flash_flash_data+0xf4005374>
    56d0:	db003417 	ldw	r12,208(sp)
    56d4:	64800044 	addi	r18,r12,1
    56d8:	9005883a 	mov	r2,r18
    56dc:	903ec40e 	bge	r18,zero,51f0 <__alt_mem_Flash_flash_data+0xf40051f0>
    56e0:	003fdd06 	br	5658 <__alt_mem_Flash_flash_data+0xf4005658>
    56e4:	0005883a 	mov	r2,zero
    56e8:	003f5c06 	br	545c <__alt_mem_Flash_flash_data+0xf400545c>
    56ec:	dac03417 	ldw	r11,208(sp)
    56f0:	4a400044 	addi	r9,r9,1
    56f4:	5a65883a 	add	r18,r11,r9
    56f8:	9005883a 	mov	r2,r18
    56fc:	903ebc0e 	bge	r18,zero,51f0 <__alt_mem_Flash_flash_data+0xf40051f0>
    5700:	003fd506 	br	5658 <__alt_mem_Flash_flash_data+0xf4005658>
    5704:	008000b4 	movhi	r2,2
    5708:	10808584 	addi	r2,r2,534
    570c:	d8802b15 	stw	r2,172(sp)
    5710:	003d2b06 	br	4bc0 <__alt_mem_Flash_flash_data+0xf4004bc0>
    5714:	00800c04 	movi	r2,48
    5718:	e0c00c04 	addi	r3,fp,48
    571c:	d8802345 	stb	r2,141(sp)
    5720:	d8c02385 	stb	r3,142(sp)
    5724:	d88023c4 	addi	r2,sp,143
    5728:	dd4022c4 	addi	r21,sp,139
    572c:	003f9e06 	br	55a8 <__alt_mem_Flash_flash_data+0xf40055a8>
    5730:	4800081e 	bne	r9,zero,5754 <___svfprintf_internal_r+0x1f18>
    5734:	8c40004c 	andi	r17,r17,1
    5738:	8800061e 	bne	r17,zero,5754 <___svfprintf_internal_r+0x1f18>
    573c:	00800044 	movi	r2,1
    5740:	1025883a 	mov	r18,r2
    5744:	003eaa06 	br	51f0 <__alt_mem_Flash_flash_data+0xf40051f0>
    5748:	04800084 	movi	r18,2
    574c:	90e5c83a 	sub	r18,r18,r3
    5750:	003fbd06 	br	5648 <__alt_mem_Flash_flash_data+0xf4005648>
    5754:	4c800084 	addi	r18,r9,2
    5758:	9005883a 	mov	r2,r18
    575c:	903ea40e 	bge	r18,zero,51f0 <__alt_mem_Flash_flash_data+0xf40051f0>
    5760:	003fbd06 	br	5658 <__alt_mem_Flash_flash_data+0xf4005658>
    5764:	dac02d17 	ldw	r11,180(sp)
    5768:	5a400017 	ldw	r9,0(r11)
    576c:	5ac00104 	addi	r11,r11,4
    5770:	dac02d15 	stw	r11,180(sp)
    5774:	483e410e 	bge	r9,zero,507c <__alt_mem_Flash_flash_data+0xf400507c>
    5778:	027fffc4 	movi	r9,-1
    577c:	1c000047 	ldb	r16,1(r3)
    5780:	00388406 	br	3994 <__alt_mem_Flash_flash_data+0xf4003994>
    5784:	00800b44 	movi	r2,45
    5788:	0739c83a 	sub	fp,zero,fp
    578c:	d8802305 	stb	r2,140(sp)
    5790:	003f5e06 	br	550c <__alt_mem_Flash_flash_data+0xf400550c>
    5794:	0005883a 	mov	r2,zero
    5798:	003f8c06 	br	55cc <__alt_mem_Flash_flash_data+0xf40055cc>
    579c:	88a2703a 	and	r17,r17,r2
    57a0:	883f8826 	beq	r17,zero,55c4 <__alt_mem_Flash_flash_data+0xf40055c4>
    57a4:	003f8606 	br	55c0 <__alt_mem_Flash_flash_data+0xf40055c0>
    57a8:	d8802344 	addi	r2,sp,141
    57ac:	003f7e06 	br	55a8 <__alt_mem_Flash_flash_data+0xf40055a8>
    57b0:	d8c02617 	ldw	r3,152(sp)
    57b4:	003f4f06 	br	54f4 <__alt_mem_Flash_flash_data+0xf40054f4>
    57b8:	dac02f17 	ldw	r11,188(sp)
    57bc:	00800304 	movi	r2,12
    57c0:	58800015 	stw	r2,0(r11)
    57c4:	00bfffc4 	movi	r2,-1
    57c8:	0038e806 	br	3b6c <__alt_mem_Flash_flash_data+0xf4003b6c>

000057cc <___vfprintf_internal_r>:
    57cc:	deffb604 	addi	sp,sp,-296
    57d0:	dfc04915 	stw	ra,292(sp)
    57d4:	ddc04715 	stw	r23,284(sp)
    57d8:	dd804615 	stw	r22,280(sp)
    57dc:	282f883a 	mov	r23,r5
    57e0:	202d883a 	mov	r22,r4
    57e4:	d9802a15 	stw	r6,168(sp)
    57e8:	d9c02d15 	stw	r7,180(sp)
    57ec:	df004815 	stw	fp,288(sp)
    57f0:	dd404515 	stw	r21,276(sp)
    57f4:	dd004415 	stw	r20,272(sp)
    57f8:	dcc04315 	stw	r19,268(sp)
    57fc:	dc804215 	stw	r18,264(sp)
    5800:	dc404115 	stw	r17,260(sp)
    5804:	dc004015 	stw	r16,256(sp)
    5808:	000a3b40 	call	a3b4 <_localeconv_r>
    580c:	10800017 	ldw	r2,0(r2)
    5810:	1009883a 	mov	r4,r2
    5814:	d8803515 	stw	r2,212(sp)
    5818:	00037a40 	call	37a4 <strlen>
    581c:	d8803815 	stw	r2,224(sp)
    5820:	b0000226 	beq	r22,zero,582c <___vfprintf_internal_r+0x60>
    5824:	b0800e17 	ldw	r2,56(r22)
    5828:	1000e126 	beq	r2,zero,5bb0 <___vfprintf_internal_r+0x3e4>
    582c:	b880030b 	ldhu	r2,12(r23)
    5830:	10c8000c 	andi	r3,r2,8192
    5834:	1800061e 	bne	r3,zero,5850 <___vfprintf_internal_r+0x84>
    5838:	b9001917 	ldw	r4,100(r23)
    583c:	00f7ffc4 	movi	r3,-8193
    5840:	10880014 	ori	r2,r2,8192
    5844:	20c6703a 	and	r3,r4,r3
    5848:	b880030d 	sth	r2,12(r23)
    584c:	b8c01915 	stw	r3,100(r23)
    5850:	10c0020c 	andi	r3,r2,8
    5854:	1800a726 	beq	r3,zero,5af4 <___vfprintf_internal_r+0x328>
    5858:	b8c00417 	ldw	r3,16(r23)
    585c:	1800a526 	beq	r3,zero,5af4 <___vfprintf_internal_r+0x328>
    5860:	1080068c 	andi	r2,r2,26
    5864:	00c00284 	movi	r3,10
    5868:	10c0aa26 	beq	r2,r3,5b14 <___vfprintf_internal_r+0x348>
    586c:	dac01e04 	addi	r11,sp,120
    5870:	db001dc4 	addi	r12,sp,119
    5874:	d8800404 	addi	r2,sp,16
    5878:	050000b4 	movhi	r20,2
    587c:	dac02815 	stw	r11,160(sp)
    5880:	5b17c83a 	sub	r11,r11,r12
    5884:	a5008d84 	addi	r20,r20,566
    5888:	db002915 	stw	r12,164(sp)
    588c:	d8801e15 	stw	r2,120(sp)
    5890:	d8002015 	stw	zero,128(sp)
    5894:	d8001f15 	stw	zero,124(sp)
    5898:	d8003315 	stw	zero,204(sp)
    589c:	d8003715 	stw	zero,220(sp)
    58a0:	d8003915 	stw	zero,228(sp)
    58a4:	1011883a 	mov	r8,r2
    58a8:	d8003b15 	stw	zero,236(sp)
    58ac:	d8003a15 	stw	zero,232(sp)
    58b0:	d8002f15 	stw	zero,188(sp)
    58b4:	dac03c15 	stw	r11,240(sp)
    58b8:	db002a17 	ldw	r12,168(sp)
    58bc:	60800007 	ldb	r2,0(r12)
    58c0:	1000be26 	beq	r2,zero,5bbc <___vfprintf_internal_r+0x3f0>
    58c4:	00c00944 	movi	r3,37
    58c8:	10c0bc26 	beq	r2,r3,5bbc <___vfprintf_internal_r+0x3f0>
    58cc:	6021883a 	mov	r16,r12
    58d0:	00000106 	br	58d8 <___vfprintf_internal_r+0x10c>
    58d4:	10c08426 	beq	r2,r3,5ae8 <___vfprintf_internal_r+0x31c>
    58d8:	84000044 	addi	r16,r16,1
    58dc:	80800007 	ldb	r2,0(r16)
    58e0:	103ffc1e 	bne	r2,zero,58d4 <__alt_mem_Flash_flash_data+0xf40058d4>
    58e4:	dac02a17 	ldw	r11,168(sp)
    58e8:	82e3c83a 	sub	r17,r16,r11
    58ec:	88000f26 	beq	r17,zero,592c <___vfprintf_internal_r+0x160>
    58f0:	d8c02017 	ldw	r3,128(sp)
    58f4:	d8801f17 	ldw	r2,124(sp)
    58f8:	dac02a17 	ldw	r11,168(sp)
    58fc:	1c47883a 	add	r3,r3,r17
    5900:	10800044 	addi	r2,r2,1
    5904:	d8c02015 	stw	r3,128(sp)
    5908:	42c00015 	stw	r11,0(r8)
    590c:	44400115 	stw	r17,4(r8)
    5910:	d8801f15 	stw	r2,124(sp)
    5914:	00c001c4 	movi	r3,7
    5918:	18809316 	blt	r3,r2,5b68 <___vfprintf_internal_r+0x39c>
    591c:	42000204 	addi	r8,r8,8
    5920:	db002f17 	ldw	r12,188(sp)
    5924:	6459883a 	add	r12,r12,r17
    5928:	db002f15 	stw	r12,188(sp)
    592c:	80800007 	ldb	r2,0(r16)
    5930:	10009426 	beq	r2,zero,5b84 <___vfprintf_internal_r+0x3b8>
    5934:	80800044 	addi	r2,r16,1
    5938:	84000047 	ldb	r16,1(r16)
    593c:	d8002785 	stb	zero,158(sp)
    5940:	000d883a 	mov	r6,zero
    5944:	027fffc4 	movi	r9,-1
    5948:	d8002e15 	stw	zero,184(sp)
    594c:	0023883a 	mov	r17,zero
    5950:	01001604 	movi	r4,88
    5954:	01400244 	movi	r5,9
    5958:	02800a84 	movi	r10,42
    595c:	01c01b04 	movi	r7,108
    5960:	10c00044 	addi	r3,r2,1
    5964:	80bff804 	addi	r2,r16,-32
    5968:	2082cd36 	bltu	r4,r2,64a0 <___vfprintf_internal_r+0xcd4>
    596c:	100490ba 	slli	r2,r2,2
    5970:	02c00034 	movhi	r11,0
    5974:	5ad66104 	addi	r11,r11,22916
    5978:	12c5883a 	add	r2,r2,r11
    597c:	10800017 	ldw	r2,0(r2)
    5980:	1000683a 	jmp	r2
    5984:	000062b8 	rdprs	zero,zero,394
    5988:	000064a0 	cmpeqi	zero,zero,402
    598c:	000064a0 	cmpeqi	zero,zero,402
    5990:	00006408 	cmpgei	zero,zero,400
    5994:	000064a0 	cmpeqi	zero,zero,402
    5998:	000064a0 	cmpeqi	zero,zero,402
    599c:	000064a0 	cmpeqi	zero,zero,402
    59a0:	000064a0 	cmpeqi	zero,zero,402
    59a4:	000064a0 	cmpeqi	zero,zero,402
    59a8:	000064a0 	cmpeqi	zero,zero,402
    59ac:	000062d8 	cmpnei	zero,zero,395
    59b0:	00006304 	movi	zero,396
    59b4:	000064a0 	cmpeqi	zero,zero,402
    59b8:	00005bc4 	movi	zero,367
    59bc:	00005bd4 	movui	zero,367
    59c0:	000064a0 	cmpeqi	zero,zero,402
    59c4:	00005c14 	movui	zero,368
    59c8:	00005c24 	muli	zero,zero,368
    59cc:	00005c24 	muli	zero,zero,368
    59d0:	00005c24 	muli	zero,zero,368
    59d4:	00005c24 	muli	zero,zero,368
    59d8:	00005c24 	muli	zero,zero,368
    59dc:	00005c24 	muli	zero,zero,368
    59e0:	00005c24 	muli	zero,zero,368
    59e4:	00005c24 	muli	zero,zero,368
    59e8:	00005c24 	muli	zero,zero,368
    59ec:	000064a0 	cmpeqi	zero,zero,402
    59f0:	000064a0 	cmpeqi	zero,zero,402
    59f4:	000064a0 	cmpeqi	zero,zero,402
    59f8:	000064a0 	cmpeqi	zero,zero,402
    59fc:	000064a0 	cmpeqi	zero,zero,402
    5a00:	000064a0 	cmpeqi	zero,zero,402
    5a04:	000064a0 	cmpeqi	zero,zero,402
    5a08:	000064a0 	cmpeqi	zero,zero,402
    5a0c:	000064a0 	cmpeqi	zero,zero,402
    5a10:	000064a0 	cmpeqi	zero,zero,402
    5a14:	00005c58 	cmpnei	zero,zero,369
    5a18:	000060c8 	cmpgei	zero,zero,387
    5a1c:	000064a0 	cmpeqi	zero,zero,402
    5a20:	000060c8 	cmpgei	zero,zero,387
    5a24:	000064a0 	cmpeqi	zero,zero,402
    5a28:	000064a0 	cmpeqi	zero,zero,402
    5a2c:	000064a0 	cmpeqi	zero,zero,402
    5a30:	000064a0 	cmpeqi	zero,zero,402
    5a34:	000061b4 	movhi	zero,390
    5a38:	000064a0 	cmpeqi	zero,zero,402
    5a3c:	000064a0 	cmpeqi	zero,zero,402
    5a40:	0000605c 	xori	zero,zero,385
    5a44:	000064a0 	cmpeqi	zero,zero,402
    5a48:	000064a0 	cmpeqi	zero,zero,402
    5a4c:	000064a0 	cmpeqi	zero,zero,402
    5a50:	000064a0 	cmpeqi	zero,zero,402
    5a54:	000064a0 	cmpeqi	zero,zero,402
    5a58:	00006098 	cmpnei	zero,zero,386
    5a5c:	000064a0 	cmpeqi	zero,zero,402
    5a60:	000064a0 	cmpeqi	zero,zero,402
    5a64:	0000625c 	xori	zero,zero,393
    5a68:	000064a0 	cmpeqi	zero,zero,402
    5a6c:	000064a0 	cmpeqi	zero,zero,402
    5a70:	000064a0 	cmpeqi	zero,zero,402
    5a74:	000064a0 	cmpeqi	zero,zero,402
    5a78:	000064a0 	cmpeqi	zero,zero,402
    5a7c:	000064a0 	cmpeqi	zero,zero,402
    5a80:	000064a0 	cmpeqi	zero,zero,402
    5a84:	000064a0 	cmpeqi	zero,zero,402
    5a88:	000064a0 	cmpeqi	zero,zero,402
    5a8c:	000064a0 	cmpeqi	zero,zero,402
    5a90:	00006314 	movui	zero,396
    5a94:	000061c4 	movi	zero,391
    5a98:	000060c8 	cmpgei	zero,zero,387
    5a9c:	000060c8 	cmpgei	zero,zero,387
    5aa0:	000060c8 	cmpgei	zero,zero,387
    5aa4:	00006204 	movi	zero,392
    5aa8:	000061c4 	movi	zero,391
    5aac:	000064a0 	cmpeqi	zero,zero,402
    5ab0:	000064a0 	cmpeqi	zero,zero,402
    5ab4:	00006214 	movui	zero,392
    5ab8:	000064a0 	cmpeqi	zero,zero,402
    5abc:	00006228 	cmpgeui	zero,zero,392
    5ac0:	00006464 	muli	zero,zero,401
    5ac4:	0000616c 	andhi	zero,zero,389
    5ac8:	00006418 	cmpnei	zero,zero,400
    5acc:	000064a0 	cmpeqi	zero,zero,402
    5ad0:	00006354 	movui	zero,397
    5ad4:	000064a0 	cmpeqi	zero,zero,402
    5ad8:	00006428 	cmpgeui	zero,zero,400
    5adc:	000064a0 	cmpeqi	zero,zero,402
    5ae0:	000064a0 	cmpeqi	zero,zero,402
    5ae4:	000063c8 	cmpgei	zero,zero,399
    5ae8:	db002a17 	ldw	r12,168(sp)
    5aec:	8323c83a 	sub	r17,r16,r12
    5af0:	003f7e06 	br	58ec <__alt_mem_Flash_flash_data+0xf40058ec>
    5af4:	b009883a 	mov	r4,r22
    5af8:	b80b883a 	mov	r5,r23
    5afc:	00077fc0 	call	77fc <__swsetup_r>
    5b00:	10000c1e 	bne	r2,zero,5b34 <___vfprintf_internal_r+0x368>
    5b04:	b880030b 	ldhu	r2,12(r23)
    5b08:	00c00284 	movi	r3,10
    5b0c:	1080068c 	andi	r2,r2,26
    5b10:	10ff561e 	bne	r2,r3,586c <__alt_mem_Flash_flash_data+0xf400586c>
    5b14:	b880038f 	ldh	r2,14(r23)
    5b18:	103f5416 	blt	r2,zero,586c <__alt_mem_Flash_flash_data+0xf400586c>
    5b1c:	d9802a17 	ldw	r6,168(sp)
    5b20:	d9c02d17 	ldw	r7,180(sp)
    5b24:	b009883a 	mov	r4,r22
    5b28:	b80b883a 	mov	r5,r23
    5b2c:	00077400 	call	7740 <__sbprintf>
    5b30:	00000106 	br	5b38 <___vfprintf_internal_r+0x36c>
    5b34:	00bfffc4 	movi	r2,-1
    5b38:	dfc04917 	ldw	ra,292(sp)
    5b3c:	df004817 	ldw	fp,288(sp)
    5b40:	ddc04717 	ldw	r23,284(sp)
    5b44:	dd804617 	ldw	r22,280(sp)
    5b48:	dd404517 	ldw	r21,276(sp)
    5b4c:	dd004417 	ldw	r20,272(sp)
    5b50:	dcc04317 	ldw	r19,268(sp)
    5b54:	dc804217 	ldw	r18,264(sp)
    5b58:	dc404117 	ldw	r17,260(sp)
    5b5c:	dc004017 	ldw	r16,256(sp)
    5b60:	dec04a04 	addi	sp,sp,296
    5b64:	f800283a 	ret
    5b68:	b009883a 	mov	r4,r22
    5b6c:	b80b883a 	mov	r5,r23
    5b70:	d9801e04 	addi	r6,sp,120
    5b74:	000dc980 	call	dc98 <__sprint_r>
    5b78:	1000081e 	bne	r2,zero,5b9c <___vfprintf_internal_r+0x3d0>
    5b7c:	da000404 	addi	r8,sp,16
    5b80:	003f6706 	br	5920 <__alt_mem_Flash_flash_data+0xf4005920>
    5b84:	d8802017 	ldw	r2,128(sp)
    5b88:	10000426 	beq	r2,zero,5b9c <___vfprintf_internal_r+0x3d0>
    5b8c:	b009883a 	mov	r4,r22
    5b90:	b80b883a 	mov	r5,r23
    5b94:	d9801e04 	addi	r6,sp,120
    5b98:	000dc980 	call	dc98 <__sprint_r>
    5b9c:	b880030b 	ldhu	r2,12(r23)
    5ba0:	1080100c 	andi	r2,r2,64
    5ba4:	103fe31e 	bne	r2,zero,5b34 <__alt_mem_Flash_flash_data+0xf4005b34>
    5ba8:	d8802f17 	ldw	r2,188(sp)
    5bac:	003fe206 	br	5b38 <__alt_mem_Flash_flash_data+0xf4005b38>
    5bb0:	b009883a 	mov	r4,r22
    5bb4:	000985c0 	call	985c <__sinit>
    5bb8:	003f1c06 	br	582c <__alt_mem_Flash_flash_data+0xf400582c>
    5bbc:	dc002a17 	ldw	r16,168(sp)
    5bc0:	003f5a06 	br	592c <__alt_mem_Flash_flash_data+0xf400592c>
    5bc4:	1805883a 	mov	r2,r3
    5bc8:	8c400114 	ori	r17,r17,4
    5bcc:	1c000007 	ldb	r16,0(r3)
    5bd0:	003f6306 	br	5960 <__alt_mem_Flash_flash_data+0xf4005960>
    5bd4:	1c000007 	ldb	r16,0(r3)
    5bd8:	18800044 	addi	r2,r3,1
    5bdc:	8286ad26 	beq	r16,r10,7694 <___vfprintf_internal_r+0x1ec8>
    5be0:	82fff404 	addi	r11,r16,-48
    5be4:	1007883a 	mov	r3,r2
    5be8:	0013883a 	mov	r9,zero
    5bec:	2aff5d36 	bltu	r5,r11,5964 <__alt_mem_Flash_flash_data+0xf4005964>
    5bf0:	1c000007 	ldb	r16,0(r3)
    5bf4:	4a4002a4 	muli	r9,r9,10
    5bf8:	18c00044 	addi	r3,r3,1
    5bfc:	5a53883a 	add	r9,r11,r9
    5c00:	82fff404 	addi	r11,r16,-48
    5c04:	2afffa2e 	bgeu	r5,r11,5bf0 <__alt_mem_Flash_flash_data+0xf4005bf0>
    5c08:	483f560e 	bge	r9,zero,5964 <__alt_mem_Flash_flash_data+0xf4005964>
    5c0c:	027fffc4 	movi	r9,-1
    5c10:	003f5406 	br	5964 <__alt_mem_Flash_flash_data+0xf4005964>
    5c14:	8c402014 	ori	r17,r17,128
    5c18:	1805883a 	mov	r2,r3
    5c1c:	1c000007 	ldb	r16,0(r3)
    5c20:	003f4f06 	br	5960 <__alt_mem_Flash_flash_data+0xf4005960>
    5c24:	1805883a 	mov	r2,r3
    5c28:	d8002e15 	stw	zero,184(sp)
    5c2c:	82fff404 	addi	r11,r16,-48
    5c30:	0019883a 	mov	r12,zero
    5c34:	14000007 	ldb	r16,0(r2)
    5c38:	630002a4 	muli	r12,r12,10
    5c3c:	18c00044 	addi	r3,r3,1
    5c40:	1805883a 	mov	r2,r3
    5c44:	62d9883a 	add	r12,r12,r11
    5c48:	82fff404 	addi	r11,r16,-48
    5c4c:	2afff92e 	bgeu	r5,r11,5c34 <__alt_mem_Flash_flash_data+0xf4005c34>
    5c50:	db002e15 	stw	r12,184(sp)
    5c54:	003f4306 	br	5964 <__alt_mem_Flash_flash_data+0xf4005964>
    5c58:	8c400414 	ori	r17,r17,16
    5c5c:	d8c02a15 	stw	r3,168(sp)
    5c60:	d9802785 	stb	r6,158(sp)
    5c64:	8880080c 	andi	r2,r17,32
    5c68:	d8c02d17 	ldw	r3,180(sp)
    5c6c:	10015a26 	beq	r2,zero,61d8 <___vfprintf_internal_r+0xa0c>
    5c70:	db002d17 	ldw	r12,180(sp)
    5c74:	18800117 	ldw	r2,4(r3)
    5c78:	1cc00017 	ldw	r19,0(r3)
    5c7c:	63000204 	addi	r12,r12,8
    5c80:	db002d15 	stw	r12,180(sp)
    5c84:	1039883a 	mov	fp,r2
    5c88:	10044516 	blt	r2,zero,6da0 <___vfprintf_internal_r+0x15d4>
    5c8c:	dd402783 	ldbu	r21,158(sp)
    5c90:	da403215 	stw	r9,200(sp)
    5c94:	00800044 	movi	r2,1
    5c98:	9f06b03a 	or	r3,r19,fp
    5c9c:	48000216 	blt	r9,zero,5ca8 <___vfprintf_internal_r+0x4dc>
    5ca0:	013fdfc4 	movi	r4,-129
    5ca4:	8922703a 	and	r17,r17,r4
    5ca8:	1802071e 	bne	r3,zero,64c8 <___vfprintf_internal_r+0xcfc>
    5cac:	4802fa26 	beq	r9,zero,6898 <___vfprintf_internal_r+0x10cc>
    5cb0:	10803fcc 	andi	r2,r2,255
    5cb4:	00c00044 	movi	r3,1
    5cb8:	10c22926 	beq	r2,r3,6560 <___vfprintf_internal_r+0xd94>
    5cbc:	00c00084 	movi	r3,2
    5cc0:	10c31726 	beq	r2,r3,6920 <___vfprintf_internal_r+0x1154>
    5cc4:	d8c01e04 	addi	r3,sp,120
    5cc8:	9808d0fa 	srli	r4,r19,3
    5ccc:	e00a977a 	slli	r5,fp,29
    5cd0:	e038d0fa 	srli	fp,fp,3
    5cd4:	9cc001cc 	andi	r19,r19,7
    5cd8:	98800c04 	addi	r2,r19,48
    5cdc:	18ffffc4 	addi	r3,r3,-1
    5ce0:	2926b03a 	or	r19,r5,r4
    5ce4:	18800005 	stb	r2,0(r3)
    5ce8:	9f08b03a 	or	r4,r19,fp
    5cec:	203ff61e 	bne	r4,zero,5cc8 <__alt_mem_Flash_flash_data+0xf4005cc8>
    5cf0:	8900004c 	andi	r4,r17,1
    5cf4:	d8c03115 	stw	r3,196(sp)
    5cf8:	2003931e 	bne	r4,zero,6b48 <___vfprintf_internal_r+0x137c>
    5cfc:	dac02817 	ldw	r11,160(sp)
    5d00:	58e5c83a 	sub	r18,r11,r3
    5d04:	9005883a 	mov	r2,r18
    5d08:	9240010e 	bge	r18,r9,5d10 <___vfprintf_internal_r+0x544>
    5d0c:	4805883a 	mov	r2,r9
    5d10:	d8802b15 	stw	r2,172(sp)
    5d14:	d8003415 	stw	zero,208(sp)
    5d18:	a8803fcc 	andi	r2,r21,255
    5d1c:	1080201c 	xori	r2,r2,128
    5d20:	10bfe004 	addi	r2,r2,-128
    5d24:	10000326 	beq	r2,zero,5d34 <___vfprintf_internal_r+0x568>
    5d28:	db002b17 	ldw	r12,172(sp)
    5d2c:	63000044 	addi	r12,r12,1
    5d30:	db002b15 	stw	r12,172(sp)
    5d34:	88c0008c 	andi	r3,r17,2
    5d38:	d8c02c15 	stw	r3,176(sp)
    5d3c:	18000326 	beq	r3,zero,5d4c <___vfprintf_internal_r+0x580>
    5d40:	dac02b17 	ldw	r11,172(sp)
    5d44:	5ac00084 	addi	r11,r11,2
    5d48:	dac02b15 	stw	r11,172(sp)
    5d4c:	8b00210c 	andi	r12,r17,132
    5d50:	db003015 	stw	r12,192(sp)
    5d54:	6001da1e 	bne	r12,zero,64c0 <___vfprintf_internal_r+0xcf4>
    5d58:	dac02e17 	ldw	r11,184(sp)
    5d5c:	db002b17 	ldw	r12,172(sp)
    5d60:	5b39c83a 	sub	fp,r11,r12
    5d64:	0701d60e 	bge	zero,fp,64c0 <___vfprintf_internal_r+0xcf4>
    5d68:	02400404 	movi	r9,16
    5d6c:	d8c02017 	ldw	r3,128(sp)
    5d70:	d8801f17 	ldw	r2,124(sp)
    5d74:	4f053c0e 	bge	r9,fp,7268 <___vfprintf_internal_r+0x1a9c>
    5d78:	014000b4 	movhi	r5,2
    5d7c:	29409184 	addi	r5,r5,582
    5d80:	d9403615 	stw	r5,216(sp)
    5d84:	482b883a 	mov	r21,r9
    5d88:	04c001c4 	movi	r19,7
    5d8c:	00000306 	br	5d9c <___vfprintf_internal_r+0x5d0>
    5d90:	e73ffc04 	addi	fp,fp,-16
    5d94:	42000204 	addi	r8,r8,8
    5d98:	af00130e 	bge	r21,fp,5de8 <___vfprintf_internal_r+0x61c>
    5d9c:	02c000b4 	movhi	r11,2
    5da0:	18c00404 	addi	r3,r3,16
    5da4:	10800044 	addi	r2,r2,1
    5da8:	5ac09184 	addi	r11,r11,582
    5dac:	42c00015 	stw	r11,0(r8)
    5db0:	45400115 	stw	r21,4(r8)
    5db4:	d8c02015 	stw	r3,128(sp)
    5db8:	d8801f15 	stw	r2,124(sp)
    5dbc:	98bff40e 	bge	r19,r2,5d90 <__alt_mem_Flash_flash_data+0xf4005d90>
    5dc0:	b009883a 	mov	r4,r22
    5dc4:	b80b883a 	mov	r5,r23
    5dc8:	d9801e04 	addi	r6,sp,120
    5dcc:	000dc980 	call	dc98 <__sprint_r>
    5dd0:	103f721e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    5dd4:	e73ffc04 	addi	fp,fp,-16
    5dd8:	d8c02017 	ldw	r3,128(sp)
    5ddc:	d8801f17 	ldw	r2,124(sp)
    5de0:	da000404 	addi	r8,sp,16
    5de4:	af3fed16 	blt	r21,fp,5d9c <__alt_mem_Flash_flash_data+0xf4005d9c>
    5de8:	db003617 	ldw	r12,216(sp)
    5dec:	e0c7883a 	add	r3,fp,r3
    5df0:	10800044 	addi	r2,r2,1
    5df4:	43000015 	stw	r12,0(r8)
    5df8:	47000115 	stw	fp,4(r8)
    5dfc:	d8c02015 	stw	r3,128(sp)
    5e00:	d8801f15 	stw	r2,124(sp)
    5e04:	010001c4 	movi	r4,7
    5e08:	20830e16 	blt	r4,r2,6a44 <___vfprintf_internal_r+0x1278>
    5e0c:	d8802787 	ldb	r2,158(sp)
    5e10:	42000204 	addi	r8,r8,8
    5e14:	10000c26 	beq	r2,zero,5e48 <___vfprintf_internal_r+0x67c>
    5e18:	d8801f17 	ldw	r2,124(sp)
    5e1c:	d9002784 	addi	r4,sp,158
    5e20:	18c00044 	addi	r3,r3,1
    5e24:	10800044 	addi	r2,r2,1
    5e28:	41000015 	stw	r4,0(r8)
    5e2c:	01000044 	movi	r4,1
    5e30:	41000115 	stw	r4,4(r8)
    5e34:	d8c02015 	stw	r3,128(sp)
    5e38:	d8801f15 	stw	r2,124(sp)
    5e3c:	010001c4 	movi	r4,7
    5e40:	2082a716 	blt	r4,r2,68e0 <___vfprintf_internal_r+0x1114>
    5e44:	42000204 	addi	r8,r8,8
    5e48:	dac02c17 	ldw	r11,176(sp)
    5e4c:	58000c26 	beq	r11,zero,5e80 <___vfprintf_internal_r+0x6b4>
    5e50:	d8801f17 	ldw	r2,124(sp)
    5e54:	d9002704 	addi	r4,sp,156
    5e58:	18c00084 	addi	r3,r3,2
    5e5c:	10800044 	addi	r2,r2,1
    5e60:	41000015 	stw	r4,0(r8)
    5e64:	01000084 	movi	r4,2
    5e68:	41000115 	stw	r4,4(r8)
    5e6c:	d8c02015 	stw	r3,128(sp)
    5e70:	d8801f15 	stw	r2,124(sp)
    5e74:	010001c4 	movi	r4,7
    5e78:	2082a116 	blt	r4,r2,6900 <___vfprintf_internal_r+0x1134>
    5e7c:	42000204 	addi	r8,r8,8
    5e80:	db003017 	ldw	r12,192(sp)
    5e84:	00802004 	movi	r2,128
    5e88:	60820326 	beq	r12,r2,6698 <___vfprintf_internal_r+0xecc>
    5e8c:	db003217 	ldw	r12,200(sp)
    5e90:	64abc83a 	sub	r21,r12,r18
    5e94:	0540260e 	bge	zero,r21,5f30 <___vfprintf_internal_r+0x764>
    5e98:	07000404 	movi	fp,16
    5e9c:	d8801f17 	ldw	r2,124(sp)
    5ea0:	e544570e 	bge	fp,r21,7000 <___vfprintf_internal_r+0x1834>
    5ea4:	014000b4 	movhi	r5,2
    5ea8:	29408d84 	addi	r5,r5,566
    5eac:	d9402c15 	stw	r5,176(sp)
    5eb0:	04c001c4 	movi	r19,7
    5eb4:	00000306 	br	5ec4 <___vfprintf_internal_r+0x6f8>
    5eb8:	ad7ffc04 	addi	r21,r21,-16
    5ebc:	42000204 	addi	r8,r8,8
    5ec0:	e540110e 	bge	fp,r21,5f08 <___vfprintf_internal_r+0x73c>
    5ec4:	18c00404 	addi	r3,r3,16
    5ec8:	10800044 	addi	r2,r2,1
    5ecc:	45000015 	stw	r20,0(r8)
    5ed0:	47000115 	stw	fp,4(r8)
    5ed4:	d8c02015 	stw	r3,128(sp)
    5ed8:	d8801f15 	stw	r2,124(sp)
    5edc:	98bff60e 	bge	r19,r2,5eb8 <__alt_mem_Flash_flash_data+0xf4005eb8>
    5ee0:	b009883a 	mov	r4,r22
    5ee4:	b80b883a 	mov	r5,r23
    5ee8:	d9801e04 	addi	r6,sp,120
    5eec:	000dc980 	call	dc98 <__sprint_r>
    5ef0:	103f2a1e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    5ef4:	ad7ffc04 	addi	r21,r21,-16
    5ef8:	d8c02017 	ldw	r3,128(sp)
    5efc:	d8801f17 	ldw	r2,124(sp)
    5f00:	da000404 	addi	r8,sp,16
    5f04:	e57fef16 	blt	fp,r21,5ec4 <__alt_mem_Flash_flash_data+0xf4005ec4>
    5f08:	dac02c17 	ldw	r11,176(sp)
    5f0c:	1d47883a 	add	r3,r3,r21
    5f10:	10800044 	addi	r2,r2,1
    5f14:	42c00015 	stw	r11,0(r8)
    5f18:	45400115 	stw	r21,4(r8)
    5f1c:	d8c02015 	stw	r3,128(sp)
    5f20:	d8801f15 	stw	r2,124(sp)
    5f24:	010001c4 	movi	r4,7
    5f28:	20826516 	blt	r4,r2,68c0 <___vfprintf_internal_r+0x10f4>
    5f2c:	42000204 	addi	r8,r8,8
    5f30:	8880400c 	andi	r2,r17,256
    5f34:	1001901e 	bne	r2,zero,6578 <___vfprintf_internal_r+0xdac>
    5f38:	d8801f17 	ldw	r2,124(sp)
    5f3c:	db003117 	ldw	r12,196(sp)
    5f40:	1c87883a 	add	r3,r3,r18
    5f44:	10800044 	addi	r2,r2,1
    5f48:	43000015 	stw	r12,0(r8)
    5f4c:	44800115 	stw	r18,4(r8)
    5f50:	d8c02015 	stw	r3,128(sp)
    5f54:	d8801f15 	stw	r2,124(sp)
    5f58:	010001c4 	movi	r4,7
    5f5c:	20824016 	blt	r4,r2,6860 <___vfprintf_internal_r+0x1094>
    5f60:	42000204 	addi	r8,r8,8
    5f64:	8c40010c 	andi	r17,r17,4
    5f68:	88003126 	beq	r17,zero,6030 <___vfprintf_internal_r+0x864>
    5f6c:	db002e17 	ldw	r12,184(sp)
    5f70:	dac02b17 	ldw	r11,172(sp)
    5f74:	62e1c83a 	sub	r16,r12,r11
    5f78:	04002d0e 	bge	zero,r16,6030 <___vfprintf_internal_r+0x864>
    5f7c:	04400404 	movi	r17,16
    5f80:	d8801f17 	ldw	r2,124(sp)
    5f84:	8c05150e 	bge	r17,r16,73dc <___vfprintf_internal_r+0x1c10>
    5f88:	010000b4 	movhi	r4,2
    5f8c:	21009184 	addi	r4,r4,582
    5f90:	d9003615 	stw	r4,216(sp)
    5f94:	048001c4 	movi	r18,7
    5f98:	00000306 	br	5fa8 <___vfprintf_internal_r+0x7dc>
    5f9c:	843ffc04 	addi	r16,r16,-16
    5fa0:	42000204 	addi	r8,r8,8
    5fa4:	8c00130e 	bge	r17,r16,5ff4 <___vfprintf_internal_r+0x828>
    5fa8:	014000b4 	movhi	r5,2
    5fac:	18c00404 	addi	r3,r3,16
    5fb0:	10800044 	addi	r2,r2,1
    5fb4:	29409184 	addi	r5,r5,582
    5fb8:	41400015 	stw	r5,0(r8)
    5fbc:	44400115 	stw	r17,4(r8)
    5fc0:	d8c02015 	stw	r3,128(sp)
    5fc4:	d8801f15 	stw	r2,124(sp)
    5fc8:	90bff40e 	bge	r18,r2,5f9c <__alt_mem_Flash_flash_data+0xf4005f9c>
    5fcc:	b009883a 	mov	r4,r22
    5fd0:	b80b883a 	mov	r5,r23
    5fd4:	d9801e04 	addi	r6,sp,120
    5fd8:	000dc980 	call	dc98 <__sprint_r>
    5fdc:	103eef1e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    5fe0:	843ffc04 	addi	r16,r16,-16
    5fe4:	d8c02017 	ldw	r3,128(sp)
    5fe8:	d8801f17 	ldw	r2,124(sp)
    5fec:	da000404 	addi	r8,sp,16
    5ff0:	8c3fed16 	blt	r17,r16,5fa8 <__alt_mem_Flash_flash_data+0xf4005fa8>
    5ff4:	dac03617 	ldw	r11,216(sp)
    5ff8:	1c07883a 	add	r3,r3,r16
    5ffc:	10800044 	addi	r2,r2,1
    6000:	42c00015 	stw	r11,0(r8)
    6004:	44000115 	stw	r16,4(r8)
    6008:	d8c02015 	stw	r3,128(sp)
    600c:	d8801f15 	stw	r2,124(sp)
    6010:	010001c4 	movi	r4,7
    6014:	2080060e 	bge	r4,r2,6030 <___vfprintf_internal_r+0x864>
    6018:	b009883a 	mov	r4,r22
    601c:	b80b883a 	mov	r5,r23
    6020:	d9801e04 	addi	r6,sp,120
    6024:	000dc980 	call	dc98 <__sprint_r>
    6028:	103edc1e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    602c:	d8c02017 	ldw	r3,128(sp)
    6030:	d8802b17 	ldw	r2,172(sp)
    6034:	db002e17 	ldw	r12,184(sp)
    6038:	1300010e 	bge	r2,r12,6040 <___vfprintf_internal_r+0x874>
    603c:	6005883a 	mov	r2,r12
    6040:	dac02f17 	ldw	r11,188(sp)
    6044:	5897883a 	add	r11,r11,r2
    6048:	dac02f15 	stw	r11,188(sp)
    604c:	18020c1e 	bne	r3,zero,6880 <___vfprintf_internal_r+0x10b4>
    6050:	d8001f15 	stw	zero,124(sp)
    6054:	da000404 	addi	r8,sp,16
    6058:	003e1706 	br	58b8 <__alt_mem_Flash_flash_data+0xf40058b8>
    605c:	8c400414 	ori	r17,r17,16
    6060:	d8c02a15 	stw	r3,168(sp)
    6064:	8880080c 	andi	r2,r17,32
    6068:	10010126 	beq	r2,zero,6470 <___vfprintf_internal_r+0xca4>
    606c:	db002d17 	ldw	r12,180(sp)
    6070:	0005883a 	mov	r2,zero
    6074:	64c00017 	ldw	r19,0(r12)
    6078:	67000117 	ldw	fp,4(r12)
    607c:	63000204 	addi	r12,r12,8
    6080:	db002d15 	stw	r12,180(sp)
    6084:	9f06b03a 	or	r3,r19,fp
    6088:	d8002785 	stb	zero,158(sp)
    608c:	da403215 	stw	r9,200(sp)
    6090:	002b883a 	mov	r21,zero
    6094:	003f0106 	br	5c9c <__alt_mem_Flash_flash_data+0xf4005c9c>
    6098:	8c400414 	ori	r17,r17,16
    609c:	d8c02a15 	stw	r3,168(sp)
    60a0:	8880080c 	andi	r2,r17,32
    60a4:	1000e326 	beq	r2,zero,6434 <___vfprintf_internal_r+0xc68>
    60a8:	dac02d17 	ldw	r11,180(sp)
    60ac:	00800044 	movi	r2,1
    60b0:	5cc00017 	ldw	r19,0(r11)
    60b4:	5f000117 	ldw	fp,4(r11)
    60b8:	5ac00204 	addi	r11,r11,8
    60bc:	dac02d15 	stw	r11,180(sp)
    60c0:	9f06b03a 	or	r3,r19,fp
    60c4:	003ff006 	br	6088 <__alt_mem_Flash_flash_data+0xf4006088>
    60c8:	db002d17 	ldw	r12,180(sp)
    60cc:	dac02d17 	ldw	r11,180(sp)
    60d0:	d8c02a15 	stw	r3,168(sp)
    60d4:	63000017 	ldw	r12,0(r12)
    60d8:	5ac00117 	ldw	r11,4(r11)
    60dc:	d9802785 	stb	r6,158(sp)
    60e0:	6009883a 	mov	r4,r12
    60e4:	580b883a 	mov	r5,r11
    60e8:	db003715 	stw	r12,220(sp)
    60ec:	da003f15 	stw	r8,252(sp)
    60f0:	da403e15 	stw	r9,248(sp)
    60f4:	dac03915 	stw	r11,228(sp)
    60f8:	000c6f00 	call	c6f0 <__fpclassifyd>
    60fc:	db002d17 	ldw	r12,180(sp)
    6100:	04800044 	movi	r18,1
    6104:	da003f17 	ldw	r8,252(sp)
    6108:	64c00204 	addi	r19,r12,8
    610c:	da403e17 	ldw	r9,248(sp)
    6110:	d9003717 	ldw	r4,220(sp)
    6114:	d9403917 	ldw	r5,228(sp)
    6118:	14832b1e 	bne	r2,r18,6dc8 <___vfprintf_internal_r+0x15fc>
    611c:	000d883a 	mov	r6,zero
    6120:	000f883a 	mov	r7,zero
    6124:	00118a00 	call	118a0 <__ledf2>
    6128:	da003f17 	ldw	r8,252(sp)
    612c:	1004b716 	blt	r2,zero,740c <___vfprintf_internal_r+0x1c40>
    6130:	dd402783 	ldbu	r21,158(sp)
    6134:	008011c4 	movi	r2,71
    6138:	14040e0e 	bge	r2,r16,7174 <___vfprintf_internal_r+0x19a8>
    613c:	00c000b4 	movhi	r3,2
    6140:	18c07604 	addi	r3,r3,472
    6144:	d8c03115 	stw	r3,196(sp)
    6148:	02c000c4 	movi	r11,3
    614c:	00bfdfc4 	movi	r2,-129
    6150:	dac02b15 	stw	r11,172(sp)
    6154:	88a2703a 	and	r17,r17,r2
    6158:	dcc02d15 	stw	r19,180(sp)
    615c:	5825883a 	mov	r18,r11
    6160:	d8003215 	stw	zero,200(sp)
    6164:	d8003415 	stw	zero,208(sp)
    6168:	003eeb06 	br	5d18 <__alt_mem_Flash_flash_data+0xf4005d18>
    616c:	db002d17 	ldw	r12,180(sp)
    6170:	00800c04 	movi	r2,48
    6174:	d8802705 	stb	r2,156(sp)
    6178:	64c00017 	ldw	r19,0(r12)
    617c:	00801e04 	movi	r2,120
    6180:	d8802745 	stb	r2,157(sp)
    6184:	008000b4 	movhi	r2,2
    6188:	10807e04 	addi	r2,r2,504
    618c:	63000104 	addi	r12,r12,4
    6190:	d8c02a15 	stw	r3,168(sp)
    6194:	d8803b15 	stw	r2,236(sp)
    6198:	0039883a 	mov	fp,zero
    619c:	8c400094 	ori	r17,r17,2
    61a0:	db002d15 	stw	r12,180(sp)
    61a4:	00800084 	movi	r2,2
    61a8:	04001e04 	movi	r16,120
    61ac:	9807883a 	mov	r3,r19
    61b0:	003fb506 	br	6088 <__alt_mem_Flash_flash_data+0xf4006088>
    61b4:	8c400214 	ori	r17,r17,8
    61b8:	1805883a 	mov	r2,r3
    61bc:	1c000007 	ldb	r16,0(r3)
    61c0:	003de706 	br	5960 <__alt_mem_Flash_flash_data+0xf4005960>
    61c4:	d8c02a15 	stw	r3,168(sp)
    61c8:	d9802785 	stb	r6,158(sp)
    61cc:	8880080c 	andi	r2,r17,32
    61d0:	d8c02d17 	ldw	r3,180(sp)
    61d4:	103ea61e 	bne	r2,zero,5c70 <__alt_mem_Flash_flash_data+0xf4005c70>
    61d8:	8880040c 	andi	r2,r17,16
    61dc:	1002221e 	bne	r2,zero,6a68 <___vfprintf_internal_r+0x129c>
    61e0:	8880100c 	andi	r2,r17,64
    61e4:	10022026 	beq	r2,zero,6a68 <___vfprintf_internal_r+0x129c>
    61e8:	1cc0000f 	ldh	r19,0(r3)
    61ec:	db002d17 	ldw	r12,180(sp)
    61f0:	9839d7fa 	srai	fp,r19,31
    61f4:	63000104 	addi	r12,r12,4
    61f8:	db002d15 	stw	r12,180(sp)
    61fc:	e005883a 	mov	r2,fp
    6200:	003ea106 	br	5c88 <__alt_mem_Flash_flash_data+0xf4005c88>
    6204:	8c401014 	ori	r17,r17,64
    6208:	1805883a 	mov	r2,r3
    620c:	1c000007 	ldb	r16,0(r3)
    6210:	003dd306 	br	5960 <__alt_mem_Flash_flash_data+0xf4005960>
    6214:	1c000007 	ldb	r16,0(r3)
    6218:	81c3e926 	beq	r16,r7,71c0 <___vfprintf_internal_r+0x19f4>
    621c:	8c400414 	ori	r17,r17,16
    6220:	1805883a 	mov	r2,r3
    6224:	003dce06 	br	5960 <__alt_mem_Flash_flash_data+0xf4005960>
    6228:	d8c02a15 	stw	r3,168(sp)
    622c:	d9802785 	stb	r6,158(sp)
    6230:	8880080c 	andi	r2,r17,32
    6234:	10034726 	beq	r2,zero,6f54 <___vfprintf_internal_r+0x1788>
    6238:	db002d17 	ldw	r12,180(sp)
    623c:	dac02f17 	ldw	r11,188(sp)
    6240:	60800017 	ldw	r2,0(r12)
    6244:	5807d7fa 	srai	r3,r11,31
    6248:	63000104 	addi	r12,r12,4
    624c:	db002d15 	stw	r12,180(sp)
    6250:	12c00015 	stw	r11,0(r2)
    6254:	10c00115 	stw	r3,4(r2)
    6258:	003d9706 	br	58b8 <__alt_mem_Flash_flash_data+0xf40058b8>
    625c:	030000b4 	movhi	r12,2
    6260:	63007904 	addi	r12,r12,484
    6264:	d8c02a15 	stw	r3,168(sp)
    6268:	d9802785 	stb	r6,158(sp)
    626c:	db003b15 	stw	r12,236(sp)
    6270:	88c0080c 	andi	r3,r17,32
    6274:	d8802d17 	ldw	r2,180(sp)
    6278:	18005b26 	beq	r3,zero,63e8 <___vfprintf_internal_r+0xc1c>
    627c:	dac02d17 	ldw	r11,180(sp)
    6280:	14c00017 	ldw	r19,0(r2)
    6284:	17000117 	ldw	fp,4(r2)
    6288:	5ac00204 	addi	r11,r11,8
    628c:	dac02d15 	stw	r11,180(sp)
    6290:	8880004c 	andi	r2,r17,1
    6294:	10022926 	beq	r2,zero,6b3c <___vfprintf_internal_r+0x1370>
    6298:	9f06b03a 	or	r3,r19,fp
    629c:	18032b26 	beq	r3,zero,6f4c <___vfprintf_internal_r+0x1780>
    62a0:	00800c04 	movi	r2,48
    62a4:	d8802705 	stb	r2,156(sp)
    62a8:	dc002745 	stb	r16,157(sp)
    62ac:	8c400094 	ori	r17,r17,2
    62b0:	00800084 	movi	r2,2
    62b4:	003f7406 	br	6088 <__alt_mem_Flash_flash_data+0xf4006088>
    62b8:	30803fcc 	andi	r2,r6,255
    62bc:	1080201c 	xori	r2,r2,128
    62c0:	10bfe004 	addi	r2,r2,-128
    62c4:	1003351e 	bne	r2,zero,6f9c <___vfprintf_internal_r+0x17d0>
    62c8:	1805883a 	mov	r2,r3
    62cc:	01800804 	movi	r6,32
    62d0:	1c000007 	ldb	r16,0(r3)
    62d4:	003da206 	br	5960 <__alt_mem_Flash_flash_data+0xf4005960>
    62d8:	dac02d17 	ldw	r11,180(sp)
    62dc:	db002d17 	ldw	r12,180(sp)
    62e0:	5ac00017 	ldw	r11,0(r11)
    62e4:	dac02e15 	stw	r11,184(sp)
    62e8:	62c00104 	addi	r11,r12,4
    62ec:	db002e17 	ldw	r12,184(sp)
    62f0:	6003ad16 	blt	r12,zero,71a8 <___vfprintf_internal_r+0x19dc>
    62f4:	dac02d15 	stw	r11,180(sp)
    62f8:	1805883a 	mov	r2,r3
    62fc:	1c000007 	ldb	r16,0(r3)
    6300:	003d9706 	br	5960 <__alt_mem_Flash_flash_data+0xf4005960>
    6304:	1805883a 	mov	r2,r3
    6308:	01800ac4 	movi	r6,43
    630c:	1c000007 	ldb	r16,0(r3)
    6310:	003d9306 	br	5960 <__alt_mem_Flash_flash_data+0xf4005960>
    6314:	db002d17 	ldw	r12,180(sp)
    6318:	d8c02a15 	stw	r3,168(sp)
    631c:	00c00044 	movi	r3,1
    6320:	60800017 	ldw	r2,0(r12)
    6324:	63000104 	addi	r12,r12,4
    6328:	d8c02b15 	stw	r3,172(sp)
    632c:	d8002785 	stb	zero,158(sp)
    6330:	d8801405 	stb	r2,80(sp)
    6334:	db002d15 	stw	r12,180(sp)
    6338:	dac01404 	addi	r11,sp,80
    633c:	1825883a 	mov	r18,r3
    6340:	d8003215 	stw	zero,200(sp)
    6344:	d8003415 	stw	zero,208(sp)
    6348:	dac03115 	stw	r11,196(sp)
    634c:	0005883a 	mov	r2,zero
    6350:	003e7806 	br	5d34 <__alt_mem_Flash_flash_data+0xf4005d34>
    6354:	dac02d17 	ldw	r11,180(sp)
    6358:	db002d17 	ldw	r12,180(sp)
    635c:	d8c02a15 	stw	r3,168(sp)
    6360:	5ac00017 	ldw	r11,0(r11)
    6364:	d8002785 	stb	zero,158(sp)
    6368:	64c00104 	addi	r19,r12,4
    636c:	dac03115 	stw	r11,196(sp)
    6370:	5803fe26 	beq	r11,zero,736c <___vfprintf_internal_r+0x1ba0>
    6374:	d9003117 	ldw	r4,196(sp)
    6378:	4803b416 	blt	r9,zero,724c <___vfprintf_internal_r+0x1a80>
    637c:	480d883a 	mov	r6,r9
    6380:	000b883a 	mov	r5,zero
    6384:	da003f15 	stw	r8,252(sp)
    6388:	da403e15 	stw	r9,248(sp)
    638c:	000ad480 	call	ad48 <memchr>
    6390:	da003f17 	ldw	r8,252(sp)
    6394:	da403e17 	ldw	r9,248(sp)
    6398:	10043026 	beq	r2,zero,745c <___vfprintf_internal_r+0x1c90>
    639c:	d8c03117 	ldw	r3,196(sp)
    63a0:	10e5c83a 	sub	r18,r2,r3
    63a4:	4c836b16 	blt	r9,r18,7154 <___vfprintf_internal_r+0x1988>
    63a8:	9005883a 	mov	r2,r18
    63ac:	9003ac16 	blt	r18,zero,7260 <___vfprintf_internal_r+0x1a94>
    63b0:	dd402783 	ldbu	r21,158(sp)
    63b4:	d8802b15 	stw	r2,172(sp)
    63b8:	dcc02d15 	stw	r19,180(sp)
    63bc:	d8003215 	stw	zero,200(sp)
    63c0:	d8003415 	stw	zero,208(sp)
    63c4:	003e5406 	br	5d18 <__alt_mem_Flash_flash_data+0xf4005d18>
    63c8:	008000b4 	movhi	r2,2
    63cc:	10807e04 	addi	r2,r2,504
    63d0:	d8c02a15 	stw	r3,168(sp)
    63d4:	d8803b15 	stw	r2,236(sp)
    63d8:	d9802785 	stb	r6,158(sp)
    63dc:	88c0080c 	andi	r3,r17,32
    63e0:	d8802d17 	ldw	r2,180(sp)
    63e4:	183fa51e 	bne	r3,zero,627c <__alt_mem_Flash_flash_data+0xf400627c>
    63e8:	88c0040c 	andi	r3,r17,16
    63ec:	1802ee26 	beq	r3,zero,6fa8 <___vfprintf_internal_r+0x17dc>
    63f0:	db002d17 	ldw	r12,180(sp)
    63f4:	14c00017 	ldw	r19,0(r2)
    63f8:	0039883a 	mov	fp,zero
    63fc:	63000104 	addi	r12,r12,4
    6400:	db002d15 	stw	r12,180(sp)
    6404:	003fa206 	br	6290 <__alt_mem_Flash_flash_data+0xf4006290>
    6408:	8c400054 	ori	r17,r17,1
    640c:	1805883a 	mov	r2,r3
    6410:	1c000007 	ldb	r16,0(r3)
    6414:	003d5206 	br	5960 <__alt_mem_Flash_flash_data+0xf4005960>
    6418:	8c400814 	ori	r17,r17,32
    641c:	1805883a 	mov	r2,r3
    6420:	1c000007 	ldb	r16,0(r3)
    6424:	003d4e06 	br	5960 <__alt_mem_Flash_flash_data+0xf4005960>
    6428:	d8c02a15 	stw	r3,168(sp)
    642c:	8880080c 	andi	r2,r17,32
    6430:	103f1d1e 	bne	r2,zero,60a8 <__alt_mem_Flash_flash_data+0xf40060a8>
    6434:	8880040c 	andi	r2,r17,16
    6438:	1001b81e 	bne	r2,zero,6b1c <___vfprintf_internal_r+0x1350>
    643c:	8880100c 	andi	r2,r17,64
    6440:	1001b626 	beq	r2,zero,6b1c <___vfprintf_internal_r+0x1350>
    6444:	dac02d17 	ldw	r11,180(sp)
    6448:	0039883a 	mov	fp,zero
    644c:	00800044 	movi	r2,1
    6450:	5cc0000b 	ldhu	r19,0(r11)
    6454:	5ac00104 	addi	r11,r11,4
    6458:	dac02d15 	stw	r11,180(sp)
    645c:	9807883a 	mov	r3,r19
    6460:	003f0906 	br	6088 <__alt_mem_Flash_flash_data+0xf4006088>
    6464:	d8c02a15 	stw	r3,168(sp)
    6468:	8880080c 	andi	r2,r17,32
    646c:	103eff1e 	bne	r2,zero,606c <__alt_mem_Flash_flash_data+0xf400606c>
    6470:	8880040c 	andi	r2,r17,16
    6474:	1001a11e 	bne	r2,zero,6afc <___vfprintf_internal_r+0x1330>
    6478:	8880100c 	andi	r2,r17,64
    647c:	10019f26 	beq	r2,zero,6afc <___vfprintf_internal_r+0x1330>
    6480:	db002d17 	ldw	r12,180(sp)
    6484:	0039883a 	mov	fp,zero
    6488:	0005883a 	mov	r2,zero
    648c:	64c0000b 	ldhu	r19,0(r12)
    6490:	63000104 	addi	r12,r12,4
    6494:	db002d15 	stw	r12,180(sp)
    6498:	9807883a 	mov	r3,r19
    649c:	003efa06 	br	6088 <__alt_mem_Flash_flash_data+0xf4006088>
    64a0:	d8c02a15 	stw	r3,168(sp)
    64a4:	d9802785 	stb	r6,158(sp)
    64a8:	803db626 	beq	r16,zero,5b84 <__alt_mem_Flash_flash_data+0xf4005b84>
    64ac:	00c00044 	movi	r3,1
    64b0:	d8c02b15 	stw	r3,172(sp)
    64b4:	dc001405 	stb	r16,80(sp)
    64b8:	d8002785 	stb	zero,158(sp)
    64bc:	003f9e06 	br	6338 <__alt_mem_Flash_flash_data+0xf4006338>
    64c0:	d8c02017 	ldw	r3,128(sp)
    64c4:	003e5306 	br	5e14 <__alt_mem_Flash_flash_data+0xf4005e14>
    64c8:	10803fcc 	andi	r2,r2,255
    64cc:	00c00044 	movi	r3,1
    64d0:	10fdfa1e 	bne	r2,r3,5cbc <__alt_mem_Flash_flash_data+0xf4005cbc>
    64d4:	e000021e 	bne	fp,zero,64e0 <___vfprintf_internal_r+0xd14>
    64d8:	00800244 	movi	r2,9
    64dc:	14c0202e 	bgeu	r2,r19,6560 <___vfprintf_internal_r+0xd94>
    64e0:	dc002b15 	stw	r16,172(sp)
    64e4:	dc402c15 	stw	r17,176(sp)
    64e8:	9821883a 	mov	r16,r19
    64ec:	e023883a 	mov	r17,fp
    64f0:	dc801e04 	addi	r18,sp,120
    64f4:	4827883a 	mov	r19,r9
    64f8:	4039883a 	mov	fp,r8
    64fc:	8009883a 	mov	r4,r16
    6500:	880b883a 	mov	r5,r17
    6504:	01800284 	movi	r6,10
    6508:	000f883a 	mov	r7,zero
    650c:	000ff180 	call	ff18 <__umoddi3>
    6510:	10800c04 	addi	r2,r2,48
    6514:	94bfffc4 	addi	r18,r18,-1
    6518:	8009883a 	mov	r4,r16
    651c:	880b883a 	mov	r5,r17
    6520:	01800284 	movi	r6,10
    6524:	000f883a 	mov	r7,zero
    6528:	90800005 	stb	r2,0(r18)
    652c:	000f9580 	call	f958 <__udivdi3>
    6530:	1021883a 	mov	r16,r2
    6534:	10c4b03a 	or	r2,r2,r3
    6538:	1823883a 	mov	r17,r3
    653c:	103fef1e 	bne	r2,zero,64fc <__alt_mem_Flash_flash_data+0xf40064fc>
    6540:	dac02817 	ldw	r11,160(sp)
    6544:	dc803115 	stw	r18,196(sp)
    6548:	dc002b17 	ldw	r16,172(sp)
    654c:	dc402c17 	ldw	r17,176(sp)
    6550:	9813883a 	mov	r9,r19
    6554:	e011883a 	mov	r8,fp
    6558:	5ca5c83a 	sub	r18,r11,r18
    655c:	003de906 	br	5d04 <__alt_mem_Flash_flash_data+0xf4005d04>
    6560:	9cc00c04 	addi	r19,r19,48
    6564:	d8c01dc4 	addi	r3,sp,119
    6568:	dcc01dc5 	stb	r19,119(sp)
    656c:	dc803c17 	ldw	r18,240(sp)
    6570:	d8c03115 	stw	r3,196(sp)
    6574:	003de306 	br	5d04 <__alt_mem_Flash_flash_data+0xf4005d04>
    6578:	00801944 	movi	r2,101
    657c:	1400710e 	bge	r2,r16,6744 <___vfprintf_internal_r+0xf78>
    6580:	d9003717 	ldw	r4,220(sp)
    6584:	d9403917 	ldw	r5,228(sp)
    6588:	000d883a 	mov	r6,zero
    658c:	000f883a 	mov	r7,zero
    6590:	d8c03d15 	stw	r3,244(sp)
    6594:	da003f15 	stw	r8,252(sp)
    6598:	001173c0 	call	1173c <__eqdf2>
    659c:	d8c03d17 	ldw	r3,244(sp)
    65a0:	da003f17 	ldw	r8,252(sp)
    65a4:	1000ef1e 	bne	r2,zero,6964 <___vfprintf_internal_r+0x1198>
    65a8:	d8801f17 	ldw	r2,124(sp)
    65ac:	010000b4 	movhi	r4,2
    65b0:	21008504 	addi	r4,r4,532
    65b4:	18c00044 	addi	r3,r3,1
    65b8:	10800044 	addi	r2,r2,1
    65bc:	41000015 	stw	r4,0(r8)
    65c0:	01000044 	movi	r4,1
    65c4:	41000115 	stw	r4,4(r8)
    65c8:	d8c02015 	stw	r3,128(sp)
    65cc:	d8801f15 	stw	r2,124(sp)
    65d0:	010001c4 	movi	r4,7
    65d4:	20828e16 	blt	r4,r2,7010 <___vfprintf_internal_r+0x1844>
    65d8:	42000204 	addi	r8,r8,8
    65dc:	d8802617 	ldw	r2,152(sp)
    65e0:	dac03317 	ldw	r11,204(sp)
    65e4:	12c00216 	blt	r2,r11,65f0 <___vfprintf_internal_r+0xe24>
    65e8:	8880004c 	andi	r2,r17,1
    65ec:	103e5d26 	beq	r2,zero,5f64 <__alt_mem_Flash_flash_data+0xf4005f64>
    65f0:	db003817 	ldw	r12,224(sp)
    65f4:	d8801f17 	ldw	r2,124(sp)
    65f8:	dac03517 	ldw	r11,212(sp)
    65fc:	1b07883a 	add	r3,r3,r12
    6600:	10800044 	addi	r2,r2,1
    6604:	42c00015 	stw	r11,0(r8)
    6608:	43000115 	stw	r12,4(r8)
    660c:	d8c02015 	stw	r3,128(sp)
    6610:	d8801f15 	stw	r2,124(sp)
    6614:	010001c4 	movi	r4,7
    6618:	2082ed16 	blt	r4,r2,71d0 <___vfprintf_internal_r+0x1a04>
    661c:	42000204 	addi	r8,r8,8
    6620:	db003317 	ldw	r12,204(sp)
    6624:	643fffc4 	addi	r16,r12,-1
    6628:	043e4e0e 	bge	zero,r16,5f64 <__alt_mem_Flash_flash_data+0xf4005f64>
    662c:	04800404 	movi	r18,16
    6630:	d8801f17 	ldw	r2,124(sp)
    6634:	94007e0e 	bge	r18,r16,6830 <___vfprintf_internal_r+0x1064>
    6638:	014000b4 	movhi	r5,2
    663c:	29408d84 	addi	r5,r5,566
    6640:	d9402c15 	stw	r5,176(sp)
    6644:	054001c4 	movi	r21,7
    6648:	00000306 	br	6658 <___vfprintf_internal_r+0xe8c>
    664c:	42000204 	addi	r8,r8,8
    6650:	843ffc04 	addi	r16,r16,-16
    6654:	9400790e 	bge	r18,r16,683c <___vfprintf_internal_r+0x1070>
    6658:	18c00404 	addi	r3,r3,16
    665c:	10800044 	addi	r2,r2,1
    6660:	45000015 	stw	r20,0(r8)
    6664:	44800115 	stw	r18,4(r8)
    6668:	d8c02015 	stw	r3,128(sp)
    666c:	d8801f15 	stw	r2,124(sp)
    6670:	a8bff60e 	bge	r21,r2,664c <__alt_mem_Flash_flash_data+0xf400664c>
    6674:	b009883a 	mov	r4,r22
    6678:	b80b883a 	mov	r5,r23
    667c:	d9801e04 	addi	r6,sp,120
    6680:	000dc980 	call	dc98 <__sprint_r>
    6684:	103d451e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    6688:	d8c02017 	ldw	r3,128(sp)
    668c:	d8801f17 	ldw	r2,124(sp)
    6690:	da000404 	addi	r8,sp,16
    6694:	003fee06 	br	6650 <__alt_mem_Flash_flash_data+0xf4006650>
    6698:	dac02e17 	ldw	r11,184(sp)
    669c:	db002b17 	ldw	r12,172(sp)
    66a0:	5b2bc83a 	sub	r21,r11,r12
    66a4:	057df90e 	bge	zero,r21,5e8c <__alt_mem_Flash_flash_data+0xf4005e8c>
    66a8:	07000404 	movi	fp,16
    66ac:	d8801f17 	ldw	r2,124(sp)
    66b0:	e543640e 	bge	fp,r21,7444 <___vfprintf_internal_r+0x1c78>
    66b4:	014000b4 	movhi	r5,2
    66b8:	29408d84 	addi	r5,r5,566
    66bc:	d9402c15 	stw	r5,176(sp)
    66c0:	04c001c4 	movi	r19,7
    66c4:	00000306 	br	66d4 <___vfprintf_internal_r+0xf08>
    66c8:	ad7ffc04 	addi	r21,r21,-16
    66cc:	42000204 	addi	r8,r8,8
    66d0:	e540110e 	bge	fp,r21,6718 <___vfprintf_internal_r+0xf4c>
    66d4:	18c00404 	addi	r3,r3,16
    66d8:	10800044 	addi	r2,r2,1
    66dc:	45000015 	stw	r20,0(r8)
    66e0:	47000115 	stw	fp,4(r8)
    66e4:	d8c02015 	stw	r3,128(sp)
    66e8:	d8801f15 	stw	r2,124(sp)
    66ec:	98bff60e 	bge	r19,r2,66c8 <__alt_mem_Flash_flash_data+0xf40066c8>
    66f0:	b009883a 	mov	r4,r22
    66f4:	b80b883a 	mov	r5,r23
    66f8:	d9801e04 	addi	r6,sp,120
    66fc:	000dc980 	call	dc98 <__sprint_r>
    6700:	103d261e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    6704:	ad7ffc04 	addi	r21,r21,-16
    6708:	d8c02017 	ldw	r3,128(sp)
    670c:	d8801f17 	ldw	r2,124(sp)
    6710:	da000404 	addi	r8,sp,16
    6714:	e57fef16 	blt	fp,r21,66d4 <__alt_mem_Flash_flash_data+0xf40066d4>
    6718:	dac02c17 	ldw	r11,176(sp)
    671c:	1d47883a 	add	r3,r3,r21
    6720:	10800044 	addi	r2,r2,1
    6724:	42c00015 	stw	r11,0(r8)
    6728:	45400115 	stw	r21,4(r8)
    672c:	d8c02015 	stw	r3,128(sp)
    6730:	d8801f15 	stw	r2,124(sp)
    6734:	010001c4 	movi	r4,7
    6738:	20819116 	blt	r4,r2,6d80 <___vfprintf_internal_r+0x15b4>
    673c:	42000204 	addi	r8,r8,8
    6740:	003dd206 	br	5e8c <__alt_mem_Flash_flash_data+0xf4005e8c>
    6744:	db003317 	ldw	r12,204(sp)
    6748:	00800044 	movi	r2,1
    674c:	18c00044 	addi	r3,r3,1
    6750:	1301530e 	bge	r2,r12,6ca0 <___vfprintf_internal_r+0x14d4>
    6754:	dc001f17 	ldw	r16,124(sp)
    6758:	dac03117 	ldw	r11,196(sp)
    675c:	00800044 	movi	r2,1
    6760:	84000044 	addi	r16,r16,1
    6764:	40800115 	stw	r2,4(r8)
    6768:	42c00015 	stw	r11,0(r8)
    676c:	d8c02015 	stw	r3,128(sp)
    6770:	dc001f15 	stw	r16,124(sp)
    6774:	008001c4 	movi	r2,7
    6778:	14016b16 	blt	r2,r16,6d28 <___vfprintf_internal_r+0x155c>
    677c:	42000204 	addi	r8,r8,8
    6780:	db003817 	ldw	r12,224(sp)
    6784:	dac03517 	ldw	r11,212(sp)
    6788:	84000044 	addi	r16,r16,1
    678c:	1b07883a 	add	r3,r3,r12
    6790:	42c00015 	stw	r11,0(r8)
    6794:	43000115 	stw	r12,4(r8)
    6798:	d8c02015 	stw	r3,128(sp)
    679c:	dc001f15 	stw	r16,124(sp)
    67a0:	008001c4 	movi	r2,7
    67a4:	14016916 	blt	r2,r16,6d4c <___vfprintf_internal_r+0x1580>
    67a8:	44800204 	addi	r18,r8,8
    67ac:	d9003717 	ldw	r4,220(sp)
    67b0:	d9403917 	ldw	r5,228(sp)
    67b4:	000d883a 	mov	r6,zero
    67b8:	000f883a 	mov	r7,zero
    67bc:	d8c03d15 	stw	r3,244(sp)
    67c0:	001173c0 	call	1173c <__eqdf2>
    67c4:	d8c03d17 	ldw	r3,244(sp)
    67c8:	db003317 	ldw	r12,204(sp)
    67cc:	1000ad26 	beq	r2,zero,6a84 <___vfprintf_internal_r+0x12b8>
    67d0:	dac03117 	ldw	r11,196(sp)
    67d4:	60bfffc4 	addi	r2,r12,-1
    67d8:	1887883a 	add	r3,r3,r2
    67dc:	59000044 	addi	r4,r11,1
    67e0:	84000044 	addi	r16,r16,1
    67e4:	90800115 	stw	r2,4(r18)
    67e8:	91000015 	stw	r4,0(r18)
    67ec:	d8c02015 	stw	r3,128(sp)
    67f0:	dc001f15 	stw	r16,124(sp)
    67f4:	008001c4 	movi	r2,7
    67f8:	14014216 	blt	r2,r16,6d04 <___vfprintf_internal_r+0x1538>
    67fc:	94800204 	addi	r18,r18,8
    6800:	dac03a17 	ldw	r11,232(sp)
    6804:	dd4022c4 	addi	r21,sp,139
    6808:	84000044 	addi	r16,r16,1
    680c:	1ac7883a 	add	r3,r3,r11
    6810:	95400015 	stw	r21,0(r18)
    6814:	92c00115 	stw	r11,4(r18)
    6818:	d8c02015 	stw	r3,128(sp)
    681c:	dc001f15 	stw	r16,124(sp)
    6820:	008001c4 	movi	r2,7
    6824:	14000e16 	blt	r2,r16,6860 <___vfprintf_internal_r+0x1094>
    6828:	92000204 	addi	r8,r18,8
    682c:	003dcd06 	br	5f64 <__alt_mem_Flash_flash_data+0xf4005f64>
    6830:	010000b4 	movhi	r4,2
    6834:	21008d84 	addi	r4,r4,566
    6838:	d9002c15 	stw	r4,176(sp)
    683c:	dac02c17 	ldw	r11,176(sp)
    6840:	1c07883a 	add	r3,r3,r16
    6844:	44000115 	stw	r16,4(r8)
    6848:	42c00015 	stw	r11,0(r8)
    684c:	10800044 	addi	r2,r2,1
    6850:	d8c02015 	stw	r3,128(sp)
    6854:	d8801f15 	stw	r2,124(sp)
    6858:	010001c4 	movi	r4,7
    685c:	20bdc00e 	bge	r4,r2,5f60 <__alt_mem_Flash_flash_data+0xf4005f60>
    6860:	b009883a 	mov	r4,r22
    6864:	b80b883a 	mov	r5,r23
    6868:	d9801e04 	addi	r6,sp,120
    686c:	000dc980 	call	dc98 <__sprint_r>
    6870:	103cca1e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    6874:	d8c02017 	ldw	r3,128(sp)
    6878:	da000404 	addi	r8,sp,16
    687c:	003db906 	br	5f64 <__alt_mem_Flash_flash_data+0xf4005f64>
    6880:	b009883a 	mov	r4,r22
    6884:	b80b883a 	mov	r5,r23
    6888:	d9801e04 	addi	r6,sp,120
    688c:	000dc980 	call	dc98 <__sprint_r>
    6890:	103def26 	beq	r2,zero,6050 <__alt_mem_Flash_flash_data+0xf4006050>
    6894:	003cc106 	br	5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    6898:	10803fcc 	andi	r2,r2,255
    689c:	1000651e 	bne	r2,zero,6a34 <___vfprintf_internal_r+0x1268>
    68a0:	8880004c 	andi	r2,r17,1
    68a4:	10013226 	beq	r2,zero,6d70 <___vfprintf_internal_r+0x15a4>
    68a8:	00800c04 	movi	r2,48
    68ac:	d8c01dc4 	addi	r3,sp,119
    68b0:	d8801dc5 	stb	r2,119(sp)
    68b4:	dc803c17 	ldw	r18,240(sp)
    68b8:	d8c03115 	stw	r3,196(sp)
    68bc:	003d1106 	br	5d04 <__alt_mem_Flash_flash_data+0xf4005d04>
    68c0:	b009883a 	mov	r4,r22
    68c4:	b80b883a 	mov	r5,r23
    68c8:	d9801e04 	addi	r6,sp,120
    68cc:	000dc980 	call	dc98 <__sprint_r>
    68d0:	103cb21e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    68d4:	d8c02017 	ldw	r3,128(sp)
    68d8:	da000404 	addi	r8,sp,16
    68dc:	003d9406 	br	5f30 <__alt_mem_Flash_flash_data+0xf4005f30>
    68e0:	b009883a 	mov	r4,r22
    68e4:	b80b883a 	mov	r5,r23
    68e8:	d9801e04 	addi	r6,sp,120
    68ec:	000dc980 	call	dc98 <__sprint_r>
    68f0:	103caa1e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    68f4:	d8c02017 	ldw	r3,128(sp)
    68f8:	da000404 	addi	r8,sp,16
    68fc:	003d5206 	br	5e48 <__alt_mem_Flash_flash_data+0xf4005e48>
    6900:	b009883a 	mov	r4,r22
    6904:	b80b883a 	mov	r5,r23
    6908:	d9801e04 	addi	r6,sp,120
    690c:	000dc980 	call	dc98 <__sprint_r>
    6910:	103ca21e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    6914:	d8c02017 	ldw	r3,128(sp)
    6918:	da000404 	addi	r8,sp,16
    691c:	003d5806 	br	5e80 <__alt_mem_Flash_flash_data+0xf4005e80>
    6920:	d9403b17 	ldw	r5,236(sp)
    6924:	d8c01e04 	addi	r3,sp,120
    6928:	988003cc 	andi	r2,r19,15
    692c:	e008973a 	slli	r4,fp,28
    6930:	2885883a 	add	r2,r5,r2
    6934:	9826d13a 	srli	r19,r19,4
    6938:	10800003 	ldbu	r2,0(r2)
    693c:	e038d13a 	srli	fp,fp,4
    6940:	18ffffc4 	addi	r3,r3,-1
    6944:	24e6b03a 	or	r19,r4,r19
    6948:	18800005 	stb	r2,0(r3)
    694c:	9f04b03a 	or	r2,r19,fp
    6950:	103ff51e 	bne	r2,zero,6928 <__alt_mem_Flash_flash_data+0xf4006928>
    6954:	db002817 	ldw	r12,160(sp)
    6958:	d8c03115 	stw	r3,196(sp)
    695c:	60e5c83a 	sub	r18,r12,r3
    6960:	003ce806 	br	5d04 <__alt_mem_Flash_flash_data+0xf4005d04>
    6964:	dc002617 	ldw	r16,152(sp)
    6968:	0401b10e 	bge	zero,r16,7030 <___vfprintf_internal_r+0x1864>
    696c:	db003117 	ldw	r12,196(sp)
    6970:	dac03317 	ldw	r11,204(sp)
    6974:	62e1883a 	add	r16,r12,r11
    6978:	db003417 	ldw	r12,208(sp)
    697c:	5825883a 	mov	r18,r11
    6980:	62c0010e 	bge	r12,r11,6988 <___vfprintf_internal_r+0x11bc>
    6984:	6025883a 	mov	r18,r12
    6988:	04800b0e 	bge	zero,r18,69b8 <___vfprintf_internal_r+0x11ec>
    698c:	d8801f17 	ldw	r2,124(sp)
    6990:	dac03117 	ldw	r11,196(sp)
    6994:	1c87883a 	add	r3,r3,r18
    6998:	10800044 	addi	r2,r2,1
    699c:	42c00015 	stw	r11,0(r8)
    69a0:	44800115 	stw	r18,4(r8)
    69a4:	d8c02015 	stw	r3,128(sp)
    69a8:	d8801f15 	stw	r2,124(sp)
    69ac:	010001c4 	movi	r4,7
    69b0:	20824f16 	blt	r4,r2,72f0 <___vfprintf_internal_r+0x1b24>
    69b4:	42000204 	addi	r8,r8,8
    69b8:	90024b16 	blt	r18,zero,72e8 <___vfprintf_internal_r+0x1b1c>
    69bc:	db003417 	ldw	r12,208(sp)
    69c0:	64a5c83a 	sub	r18,r12,r18
    69c4:	0480730e 	bge	zero,r18,6b94 <___vfprintf_internal_r+0x13c8>
    69c8:	05400404 	movi	r21,16
    69cc:	d8801f17 	ldw	r2,124(sp)
    69d0:	ac817d0e 	bge	r21,r18,6fc8 <___vfprintf_internal_r+0x17fc>
    69d4:	014000b4 	movhi	r5,2
    69d8:	29408d84 	addi	r5,r5,566
    69dc:	d9402c15 	stw	r5,176(sp)
    69e0:	070001c4 	movi	fp,7
    69e4:	00000306 	br	69f4 <___vfprintf_internal_r+0x1228>
    69e8:	42000204 	addi	r8,r8,8
    69ec:	94bffc04 	addi	r18,r18,-16
    69f0:	ac81780e 	bge	r21,r18,6fd4 <___vfprintf_internal_r+0x1808>
    69f4:	18c00404 	addi	r3,r3,16
    69f8:	10800044 	addi	r2,r2,1
    69fc:	45000015 	stw	r20,0(r8)
    6a00:	45400115 	stw	r21,4(r8)
    6a04:	d8c02015 	stw	r3,128(sp)
    6a08:	d8801f15 	stw	r2,124(sp)
    6a0c:	e0bff60e 	bge	fp,r2,69e8 <__alt_mem_Flash_flash_data+0xf40069e8>
    6a10:	b009883a 	mov	r4,r22
    6a14:	b80b883a 	mov	r5,r23
    6a18:	d9801e04 	addi	r6,sp,120
    6a1c:	000dc980 	call	dc98 <__sprint_r>
    6a20:	103c5e1e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    6a24:	d8c02017 	ldw	r3,128(sp)
    6a28:	d8801f17 	ldw	r2,124(sp)
    6a2c:	da000404 	addi	r8,sp,16
    6a30:	003fee06 	br	69ec <__alt_mem_Flash_flash_data+0xf40069ec>
    6a34:	dac01e04 	addi	r11,sp,120
    6a38:	0025883a 	mov	r18,zero
    6a3c:	dac03115 	stw	r11,196(sp)
    6a40:	003cb006 	br	5d04 <__alt_mem_Flash_flash_data+0xf4005d04>
    6a44:	b009883a 	mov	r4,r22
    6a48:	b80b883a 	mov	r5,r23
    6a4c:	d9801e04 	addi	r6,sp,120
    6a50:	000dc980 	call	dc98 <__sprint_r>
    6a54:	103c511e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    6a58:	d8c02017 	ldw	r3,128(sp)
    6a5c:	d8802787 	ldb	r2,158(sp)
    6a60:	da000404 	addi	r8,sp,16
    6a64:	003ceb06 	br	5e14 <__alt_mem_Flash_flash_data+0xf4005e14>
    6a68:	1cc00017 	ldw	r19,0(r3)
    6a6c:	dac02d17 	ldw	r11,180(sp)
    6a70:	9839d7fa 	srai	fp,r19,31
    6a74:	5ac00104 	addi	r11,r11,4
    6a78:	dac02d15 	stw	r11,180(sp)
    6a7c:	e005883a 	mov	r2,fp
    6a80:	003c8106 	br	5c88 <__alt_mem_Flash_flash_data+0xf4005c88>
    6a84:	657fffc4 	addi	r21,r12,-1
    6a88:	057f5d0e 	bge	zero,r21,6800 <__alt_mem_Flash_flash_data+0xf4006800>
    6a8c:	07000404 	movi	fp,16
    6a90:	e540900e 	bge	fp,r21,6cd4 <___vfprintf_internal_r+0x1508>
    6a94:	010000b4 	movhi	r4,2
    6a98:	21008d84 	addi	r4,r4,566
    6a9c:	d9002c15 	stw	r4,176(sp)
    6aa0:	01c001c4 	movi	r7,7
    6aa4:	00000306 	br	6ab4 <___vfprintf_internal_r+0x12e8>
    6aa8:	94800204 	addi	r18,r18,8
    6aac:	ad7ffc04 	addi	r21,r21,-16
    6ab0:	e5408b0e 	bge	fp,r21,6ce0 <___vfprintf_internal_r+0x1514>
    6ab4:	18c00404 	addi	r3,r3,16
    6ab8:	84000044 	addi	r16,r16,1
    6abc:	95000015 	stw	r20,0(r18)
    6ac0:	97000115 	stw	fp,4(r18)
    6ac4:	d8c02015 	stw	r3,128(sp)
    6ac8:	dc001f15 	stw	r16,124(sp)
    6acc:	3c3ff60e 	bge	r7,r16,6aa8 <__alt_mem_Flash_flash_data+0xf4006aa8>
    6ad0:	b009883a 	mov	r4,r22
    6ad4:	b80b883a 	mov	r5,r23
    6ad8:	d9801e04 	addi	r6,sp,120
    6adc:	d9c03d15 	stw	r7,244(sp)
    6ae0:	000dc980 	call	dc98 <__sprint_r>
    6ae4:	d9c03d17 	ldw	r7,244(sp)
    6ae8:	103c2c1e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    6aec:	d8c02017 	ldw	r3,128(sp)
    6af0:	dc001f17 	ldw	r16,124(sp)
    6af4:	dc800404 	addi	r18,sp,16
    6af8:	003fec06 	br	6aac <__alt_mem_Flash_flash_data+0xf4006aac>
    6afc:	dac02d17 	ldw	r11,180(sp)
    6b00:	0039883a 	mov	fp,zero
    6b04:	0005883a 	mov	r2,zero
    6b08:	5cc00017 	ldw	r19,0(r11)
    6b0c:	5ac00104 	addi	r11,r11,4
    6b10:	dac02d15 	stw	r11,180(sp)
    6b14:	9807883a 	mov	r3,r19
    6b18:	003d5b06 	br	6088 <__alt_mem_Flash_flash_data+0xf4006088>
    6b1c:	db002d17 	ldw	r12,180(sp)
    6b20:	0039883a 	mov	fp,zero
    6b24:	00800044 	movi	r2,1
    6b28:	64c00017 	ldw	r19,0(r12)
    6b2c:	63000104 	addi	r12,r12,4
    6b30:	db002d15 	stw	r12,180(sp)
    6b34:	9807883a 	mov	r3,r19
    6b38:	003d5306 	br	6088 <__alt_mem_Flash_flash_data+0xf4006088>
    6b3c:	00800084 	movi	r2,2
    6b40:	9f06b03a 	or	r3,r19,fp
    6b44:	003d5006 	br	6088 <__alt_mem_Flash_flash_data+0xf4006088>
    6b48:	10803fcc 	andi	r2,r2,255
    6b4c:	1080201c 	xori	r2,r2,128
    6b50:	10bfe004 	addi	r2,r2,-128
    6b54:	01000c04 	movi	r4,48
    6b58:	1101a526 	beq	r2,r4,71f0 <___vfprintf_internal_r+0x1a24>
    6b5c:	dac03117 	ldw	r11,196(sp)
    6b60:	db002817 	ldw	r12,160(sp)
    6b64:	193fffc5 	stb	r4,-1(r3)
    6b68:	5affffc4 	addi	r11,r11,-1
    6b6c:	dac03115 	stw	r11,196(sp)
    6b70:	62e5c83a 	sub	r18,r12,r11
    6b74:	003c6306 	br	5d04 <__alt_mem_Flash_flash_data+0xf4005d04>
    6b78:	b009883a 	mov	r4,r22
    6b7c:	b80b883a 	mov	r5,r23
    6b80:	d9801e04 	addi	r6,sp,120
    6b84:	000dc980 	call	dc98 <__sprint_r>
    6b88:	103c041e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    6b8c:	d8c02017 	ldw	r3,128(sp)
    6b90:	da000404 	addi	r8,sp,16
    6b94:	db003117 	ldw	r12,196(sp)
    6b98:	dac03417 	ldw	r11,208(sp)
    6b9c:	d8802617 	ldw	r2,152(sp)
    6ba0:	62e5883a 	add	r18,r12,r11
    6ba4:	db003317 	ldw	r12,204(sp)
    6ba8:	13000216 	blt	r2,r12,6bb4 <___vfprintf_internal_r+0x13e8>
    6bac:	8900004c 	andi	r4,r17,1
    6bb0:	20000c26 	beq	r4,zero,6be4 <___vfprintf_internal_r+0x1418>
    6bb4:	dac03817 	ldw	r11,224(sp)
    6bb8:	d9001f17 	ldw	r4,124(sp)
    6bbc:	db003517 	ldw	r12,212(sp)
    6bc0:	1ac7883a 	add	r3,r3,r11
    6bc4:	21000044 	addi	r4,r4,1
    6bc8:	43000015 	stw	r12,0(r8)
    6bcc:	42c00115 	stw	r11,4(r8)
    6bd0:	d8c02015 	stw	r3,128(sp)
    6bd4:	d9001f15 	stw	r4,124(sp)
    6bd8:	014001c4 	movi	r5,7
    6bdc:	2901cc16 	blt	r5,r4,7310 <___vfprintf_internal_r+0x1b44>
    6be0:	42000204 	addi	r8,r8,8
    6be4:	dac03317 	ldw	r11,204(sp)
    6be8:	8489c83a 	sub	r4,r16,r18
    6bec:	5885c83a 	sub	r2,r11,r2
    6bf0:	1021883a 	mov	r16,r2
    6bf4:	2080010e 	bge	r4,r2,6bfc <___vfprintf_internal_r+0x1430>
    6bf8:	2021883a 	mov	r16,r4
    6bfc:	04000a0e 	bge	zero,r16,6c28 <___vfprintf_internal_r+0x145c>
    6c00:	d9001f17 	ldw	r4,124(sp)
    6c04:	1c07883a 	add	r3,r3,r16
    6c08:	44800015 	stw	r18,0(r8)
    6c0c:	21000044 	addi	r4,r4,1
    6c10:	44000115 	stw	r16,4(r8)
    6c14:	d8c02015 	stw	r3,128(sp)
    6c18:	d9001f15 	stw	r4,124(sp)
    6c1c:	014001c4 	movi	r5,7
    6c20:	2901e316 	blt	r5,r4,73b0 <___vfprintf_internal_r+0x1be4>
    6c24:	42000204 	addi	r8,r8,8
    6c28:	8001df16 	blt	r16,zero,73a8 <___vfprintf_internal_r+0x1bdc>
    6c2c:	1421c83a 	sub	r16,r2,r16
    6c30:	043ccc0e 	bge	zero,r16,5f64 <__alt_mem_Flash_flash_data+0xf4005f64>
    6c34:	04800404 	movi	r18,16
    6c38:	d8801f17 	ldw	r2,124(sp)
    6c3c:	943efc0e 	bge	r18,r16,6830 <__alt_mem_Flash_flash_data+0xf4006830>
    6c40:	014000b4 	movhi	r5,2
    6c44:	29408d84 	addi	r5,r5,566
    6c48:	d9402c15 	stw	r5,176(sp)
    6c4c:	054001c4 	movi	r21,7
    6c50:	00000306 	br	6c60 <___vfprintf_internal_r+0x1494>
    6c54:	42000204 	addi	r8,r8,8
    6c58:	843ffc04 	addi	r16,r16,-16
    6c5c:	943ef70e 	bge	r18,r16,683c <__alt_mem_Flash_flash_data+0xf400683c>
    6c60:	18c00404 	addi	r3,r3,16
    6c64:	10800044 	addi	r2,r2,1
    6c68:	45000015 	stw	r20,0(r8)
    6c6c:	44800115 	stw	r18,4(r8)
    6c70:	d8c02015 	stw	r3,128(sp)
    6c74:	d8801f15 	stw	r2,124(sp)
    6c78:	a8bff60e 	bge	r21,r2,6c54 <__alt_mem_Flash_flash_data+0xf4006c54>
    6c7c:	b009883a 	mov	r4,r22
    6c80:	b80b883a 	mov	r5,r23
    6c84:	d9801e04 	addi	r6,sp,120
    6c88:	000dc980 	call	dc98 <__sprint_r>
    6c8c:	103bc31e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    6c90:	d8c02017 	ldw	r3,128(sp)
    6c94:	d8801f17 	ldw	r2,124(sp)
    6c98:	da000404 	addi	r8,sp,16
    6c9c:	003fee06 	br	6c58 <__alt_mem_Flash_flash_data+0xf4006c58>
    6ca0:	8888703a 	and	r4,r17,r2
    6ca4:	203eab1e 	bne	r4,zero,6754 <__alt_mem_Flash_flash_data+0xf4006754>
    6ca8:	dc001f17 	ldw	r16,124(sp)
    6cac:	db003117 	ldw	r12,196(sp)
    6cb0:	40800115 	stw	r2,4(r8)
    6cb4:	84000044 	addi	r16,r16,1
    6cb8:	43000015 	stw	r12,0(r8)
    6cbc:	d8c02015 	stw	r3,128(sp)
    6cc0:	dc001f15 	stw	r16,124(sp)
    6cc4:	008001c4 	movi	r2,7
    6cc8:	14000e16 	blt	r2,r16,6d04 <___vfprintf_internal_r+0x1538>
    6ccc:	44800204 	addi	r18,r8,8
    6cd0:	003ecb06 	br	6800 <__alt_mem_Flash_flash_data+0xf4006800>
    6cd4:	008000b4 	movhi	r2,2
    6cd8:	10808d84 	addi	r2,r2,566
    6cdc:	d8802c15 	stw	r2,176(sp)
    6ce0:	dac02c17 	ldw	r11,176(sp)
    6ce4:	1d47883a 	add	r3,r3,r21
    6ce8:	84000044 	addi	r16,r16,1
    6cec:	92c00015 	stw	r11,0(r18)
    6cf0:	95400115 	stw	r21,4(r18)
    6cf4:	d8c02015 	stw	r3,128(sp)
    6cf8:	dc001f15 	stw	r16,124(sp)
    6cfc:	008001c4 	movi	r2,7
    6d00:	143ebe0e 	bge	r2,r16,67fc <__alt_mem_Flash_flash_data+0xf40067fc>
    6d04:	b009883a 	mov	r4,r22
    6d08:	b80b883a 	mov	r5,r23
    6d0c:	d9801e04 	addi	r6,sp,120
    6d10:	000dc980 	call	dc98 <__sprint_r>
    6d14:	103ba11e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    6d18:	d8c02017 	ldw	r3,128(sp)
    6d1c:	dc001f17 	ldw	r16,124(sp)
    6d20:	dc800404 	addi	r18,sp,16
    6d24:	003eb606 	br	6800 <__alt_mem_Flash_flash_data+0xf4006800>
    6d28:	b009883a 	mov	r4,r22
    6d2c:	b80b883a 	mov	r5,r23
    6d30:	d9801e04 	addi	r6,sp,120
    6d34:	000dc980 	call	dc98 <__sprint_r>
    6d38:	103b981e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    6d3c:	d8c02017 	ldw	r3,128(sp)
    6d40:	dc001f17 	ldw	r16,124(sp)
    6d44:	da000404 	addi	r8,sp,16
    6d48:	003e8d06 	br	6780 <__alt_mem_Flash_flash_data+0xf4006780>
    6d4c:	b009883a 	mov	r4,r22
    6d50:	b80b883a 	mov	r5,r23
    6d54:	d9801e04 	addi	r6,sp,120
    6d58:	000dc980 	call	dc98 <__sprint_r>
    6d5c:	103b8f1e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    6d60:	d8c02017 	ldw	r3,128(sp)
    6d64:	dc001f17 	ldw	r16,124(sp)
    6d68:	dc800404 	addi	r18,sp,16
    6d6c:	003e8f06 	br	67ac <__alt_mem_Flash_flash_data+0xf40067ac>
    6d70:	db001e04 	addi	r12,sp,120
    6d74:	0025883a 	mov	r18,zero
    6d78:	db003115 	stw	r12,196(sp)
    6d7c:	003be106 	br	5d04 <__alt_mem_Flash_flash_data+0xf4005d04>
    6d80:	b009883a 	mov	r4,r22
    6d84:	b80b883a 	mov	r5,r23
    6d88:	d9801e04 	addi	r6,sp,120
    6d8c:	000dc980 	call	dc98 <__sprint_r>
    6d90:	103b821e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    6d94:	d8c02017 	ldw	r3,128(sp)
    6d98:	da000404 	addi	r8,sp,16
    6d9c:	003c3b06 	br	5e8c <__alt_mem_Flash_flash_data+0xf4005e8c>
    6da0:	04e7c83a 	sub	r19,zero,r19
    6da4:	9804c03a 	cmpne	r2,r19,zero
    6da8:	0739c83a 	sub	fp,zero,fp
    6dac:	e0b9c83a 	sub	fp,fp,r2
    6db0:	05400b44 	movi	r21,45
    6db4:	dd402785 	stb	r21,158(sp)
    6db8:	da403215 	stw	r9,200(sp)
    6dbc:	00800044 	movi	r2,1
    6dc0:	9f06b03a 	or	r3,r19,fp
    6dc4:	003bb506 	br	5c9c <__alt_mem_Flash_flash_data+0xf4005c9c>
    6dc8:	da003f15 	stw	r8,252(sp)
    6dcc:	da403e15 	stw	r9,248(sp)
    6dd0:	000c6f00 	call	c6f0 <__fpclassifyd>
    6dd4:	da003f17 	ldw	r8,252(sp)
    6dd8:	da403e17 	ldw	r9,248(sp)
    6ddc:	1000ce26 	beq	r2,zero,7118 <___vfprintf_internal_r+0x194c>
    6de0:	057ff7c4 	movi	r21,-33
    6de4:	00bfffc4 	movi	r2,-1
    6de8:	856a703a 	and	r21,r16,r21
    6dec:	4881e826 	beq	r9,r2,7590 <___vfprintf_internal_r+0x1dc4>
    6df0:	008011c4 	movi	r2,71
    6df4:	a881e326 	beq	r21,r2,7584 <___vfprintf_internal_r+0x1db8>
    6df8:	db003917 	ldw	r12,228(sp)
    6dfc:	8ac04014 	ori	r11,r17,256
    6e00:	dac02d15 	stw	r11,180(sp)
    6e04:	6001ed16 	blt	r12,zero,75bc <___vfprintf_internal_r+0x1df0>
    6e08:	dc803917 	ldw	r18,228(sp)
    6e0c:	d8002b05 	stb	zero,172(sp)
    6e10:	00801984 	movi	r2,102
    6e14:	80811826 	beq	r16,r2,7278 <___vfprintf_internal_r+0x1aac>
    6e18:	00801184 	movi	r2,70
    6e1c:	80811626 	beq	r16,r2,7278 <___vfprintf_internal_r+0x1aac>
    6e20:	00801144 	movi	r2,69
    6e24:	a881e926 	beq	r21,r2,75cc <___vfprintf_internal_r+0x1e00>
    6e28:	4839883a 	mov	fp,r9
    6e2c:	d8802604 	addi	r2,sp,152
    6e30:	d8800115 	stw	r2,4(sp)
    6e34:	d9403717 	ldw	r5,220(sp)
    6e38:	d8802504 	addi	r2,sp,148
    6e3c:	d8800215 	stw	r2,8(sp)
    6e40:	d8802104 	addi	r2,sp,132
    6e44:	df000015 	stw	fp,0(sp)
    6e48:	d8800315 	stw	r2,12(sp)
    6e4c:	b009883a 	mov	r4,r22
    6e50:	900d883a 	mov	r6,r18
    6e54:	01c00084 	movi	r7,2
    6e58:	da003f15 	stw	r8,252(sp)
    6e5c:	da403e15 	stw	r9,248(sp)
    6e60:	0007b500 	call	7b50 <_dtoa_r>
    6e64:	d8803115 	stw	r2,196(sp)
    6e68:	008019c4 	movi	r2,103
    6e6c:	da003f17 	ldw	r8,252(sp)
    6e70:	da403e17 	ldw	r9,248(sp)
    6e74:	80800226 	beq	r16,r2,6e80 <___vfprintf_internal_r+0x16b4>
    6e78:	008011c4 	movi	r2,71
    6e7c:	8081101e 	bne	r16,r2,72c0 <___vfprintf_internal_r+0x1af4>
    6e80:	8880004c 	andi	r2,r17,1
    6e84:	1001dd26 	beq	r2,zero,75fc <___vfprintf_internal_r+0x1e30>
    6e88:	db003117 	ldw	r12,196(sp)
    6e8c:	6715883a 	add	r10,r12,fp
    6e90:	d9003717 	ldw	r4,220(sp)
    6e94:	900b883a 	mov	r5,r18
    6e98:	000d883a 	mov	r6,zero
    6e9c:	000f883a 	mov	r7,zero
    6ea0:	da003f15 	stw	r8,252(sp)
    6ea4:	da403e15 	stw	r9,248(sp)
    6ea8:	da803d15 	stw	r10,244(sp)
    6eac:	001173c0 	call	1173c <__eqdf2>
    6eb0:	da003f17 	ldw	r8,252(sp)
    6eb4:	da403e17 	ldw	r9,248(sp)
    6eb8:	da803d17 	ldw	r10,244(sp)
    6ebc:	10016526 	beq	r2,zero,7454 <___vfprintf_internal_r+0x1c88>
    6ec0:	d8802117 	ldw	r2,132(sp)
    6ec4:	1280062e 	bgeu	r2,r10,6ee0 <___vfprintf_internal_r+0x1714>
    6ec8:	01000c04 	movi	r4,48
    6ecc:	10c00044 	addi	r3,r2,1
    6ed0:	d8c02115 	stw	r3,132(sp)
    6ed4:	11000005 	stb	r4,0(r2)
    6ed8:	d8802117 	ldw	r2,132(sp)
    6edc:	12bffb36 	bltu	r2,r10,6ecc <__alt_mem_Flash_flash_data+0xf4006ecc>
    6ee0:	db003117 	ldw	r12,196(sp)
    6ee4:	1305c83a 	sub	r2,r2,r12
    6ee8:	d8803315 	stw	r2,204(sp)
    6eec:	008011c4 	movi	r2,71
    6ef0:	a8814d26 	beq	r21,r2,7428 <___vfprintf_internal_r+0x1c5c>
    6ef4:	00801944 	movi	r2,101
    6ef8:	1402060e 	bge	r2,r16,7714 <___vfprintf_internal_r+0x1f48>
    6efc:	00801984 	movi	r2,102
    6f00:	8081b426 	beq	r16,r2,75d4 <___vfprintf_internal_r+0x1e08>
    6f04:	db002617 	ldw	r12,152(sp)
    6f08:	db003415 	stw	r12,208(sp)
    6f0c:	db003417 	ldw	r12,208(sp)
    6f10:	dac03317 	ldw	r11,204(sp)
    6f14:	62c1a016 	blt	r12,r11,7598 <___vfprintf_internal_r+0x1dcc>
    6f18:	8c40004c 	andi	r17,r17,1
    6f1c:	8801bf1e 	bne	r17,zero,761c <___vfprintf_internal_r+0x1e50>
    6f20:	6005883a 	mov	r2,r12
    6f24:	6001b316 	blt	r12,zero,75f4 <___vfprintf_internal_r+0x1e28>
    6f28:	dc803417 	ldw	r18,208(sp)
    6f2c:	df002b07 	ldb	fp,172(sp)
    6f30:	e0012e1e 	bne	fp,zero,73ec <___vfprintf_internal_r+0x1c20>
    6f34:	dc402d17 	ldw	r17,180(sp)
    6f38:	dd402783 	ldbu	r21,158(sp)
    6f3c:	d8802b15 	stw	r2,172(sp)
    6f40:	dcc02d15 	stw	r19,180(sp)
    6f44:	d8003215 	stw	zero,200(sp)
    6f48:	003b7306 	br	5d18 <__alt_mem_Flash_flash_data+0xf4005d18>
    6f4c:	00800084 	movi	r2,2
    6f50:	003c4d06 	br	6088 <__alt_mem_Flash_flash_data+0xf4006088>
    6f54:	8880040c 	andi	r2,r17,16
    6f58:	1000091e 	bne	r2,zero,6f80 <___vfprintf_internal_r+0x17b4>
    6f5c:	8c40100c 	andi	r17,r17,64
    6f60:	88000726 	beq	r17,zero,6f80 <___vfprintf_internal_r+0x17b4>
    6f64:	db002d17 	ldw	r12,180(sp)
    6f68:	dac02f17 	ldw	r11,188(sp)
    6f6c:	60800017 	ldw	r2,0(r12)
    6f70:	63000104 	addi	r12,r12,4
    6f74:	db002d15 	stw	r12,180(sp)
    6f78:	12c0000d 	sth	r11,0(r2)
    6f7c:	003a4e06 	br	58b8 <__alt_mem_Flash_flash_data+0xf40058b8>
    6f80:	db002d17 	ldw	r12,180(sp)
    6f84:	dac02f17 	ldw	r11,188(sp)
    6f88:	60800017 	ldw	r2,0(r12)
    6f8c:	63000104 	addi	r12,r12,4
    6f90:	db002d15 	stw	r12,180(sp)
    6f94:	12c00015 	stw	r11,0(r2)
    6f98:	003a4706 	br	58b8 <__alt_mem_Flash_flash_data+0xf40058b8>
    6f9c:	1c000007 	ldb	r16,0(r3)
    6fa0:	1805883a 	mov	r2,r3
    6fa4:	003a6e06 	br	5960 <__alt_mem_Flash_flash_data+0xf4005960>
    6fa8:	88c0100c 	andi	r3,r17,64
    6fac:	18006b26 	beq	r3,zero,715c <___vfprintf_internal_r+0x1990>
    6fb0:	dac02d17 	ldw	r11,180(sp)
    6fb4:	14c0000b 	ldhu	r19,0(r2)
    6fb8:	0039883a 	mov	fp,zero
    6fbc:	5ac00104 	addi	r11,r11,4
    6fc0:	dac02d15 	stw	r11,180(sp)
    6fc4:	003cb206 	br	6290 <__alt_mem_Flash_flash_data+0xf4006290>
    6fc8:	010000b4 	movhi	r4,2
    6fcc:	21008d84 	addi	r4,r4,566
    6fd0:	d9002c15 	stw	r4,176(sp)
    6fd4:	dac02c17 	ldw	r11,176(sp)
    6fd8:	1c87883a 	add	r3,r3,r18
    6fdc:	10800044 	addi	r2,r2,1
    6fe0:	42c00015 	stw	r11,0(r8)
    6fe4:	44800115 	stw	r18,4(r8)
    6fe8:	d8c02015 	stw	r3,128(sp)
    6fec:	d8801f15 	stw	r2,124(sp)
    6ff0:	010001c4 	movi	r4,7
    6ff4:	20bee016 	blt	r4,r2,6b78 <__alt_mem_Flash_flash_data+0xf4006b78>
    6ff8:	42000204 	addi	r8,r8,8
    6ffc:	003ee506 	br	6b94 <__alt_mem_Flash_flash_data+0xf4006b94>
    7000:	010000b4 	movhi	r4,2
    7004:	21008d84 	addi	r4,r4,566
    7008:	d9002c15 	stw	r4,176(sp)
    700c:	003bbe06 	br	5f08 <__alt_mem_Flash_flash_data+0xf4005f08>
    7010:	b009883a 	mov	r4,r22
    7014:	b80b883a 	mov	r5,r23
    7018:	d9801e04 	addi	r6,sp,120
    701c:	000dc980 	call	dc98 <__sprint_r>
    7020:	103ade1e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    7024:	d8c02017 	ldw	r3,128(sp)
    7028:	da000404 	addi	r8,sp,16
    702c:	003d6b06 	br	65dc <__alt_mem_Flash_flash_data+0xf40065dc>
    7030:	d8801f17 	ldw	r2,124(sp)
    7034:	030000b4 	movhi	r12,2
    7038:	01000044 	movi	r4,1
    703c:	18c00044 	addi	r3,r3,1
    7040:	10800044 	addi	r2,r2,1
    7044:	63008504 	addi	r12,r12,532
    7048:	41000115 	stw	r4,4(r8)
    704c:	43000015 	stw	r12,0(r8)
    7050:	d8c02015 	stw	r3,128(sp)
    7054:	d8801f15 	stw	r2,124(sp)
    7058:	010001c4 	movi	r4,7
    705c:	20804916 	blt	r4,r2,7184 <___vfprintf_internal_r+0x19b8>
    7060:	42000204 	addi	r8,r8,8
    7064:	8000041e 	bne	r16,zero,7078 <___vfprintf_internal_r+0x18ac>
    7068:	dac03317 	ldw	r11,204(sp)
    706c:	5800021e 	bne	r11,zero,7078 <___vfprintf_internal_r+0x18ac>
    7070:	8880004c 	andi	r2,r17,1
    7074:	103bbb26 	beq	r2,zero,5f64 <__alt_mem_Flash_flash_data+0xf4005f64>
    7078:	db003817 	ldw	r12,224(sp)
    707c:	d8801f17 	ldw	r2,124(sp)
    7080:	dac03517 	ldw	r11,212(sp)
    7084:	1b07883a 	add	r3,r3,r12
    7088:	10800044 	addi	r2,r2,1
    708c:	42c00015 	stw	r11,0(r8)
    7090:	43000115 	stw	r12,4(r8)
    7094:	d8c02015 	stw	r3,128(sp)
    7098:	d8801f15 	stw	r2,124(sp)
    709c:	010001c4 	movi	r4,7
    70a0:	20812e16 	blt	r4,r2,755c <___vfprintf_internal_r+0x1d90>
    70a4:	42000204 	addi	r8,r8,8
    70a8:	0421c83a 	sub	r16,zero,r16
    70ac:	04005c0e 	bge	zero,r16,7220 <___vfprintf_internal_r+0x1a54>
    70b0:	04800404 	movi	r18,16
    70b4:	94009f0e 	bge	r18,r16,7334 <___vfprintf_internal_r+0x1b68>
    70b8:	010000b4 	movhi	r4,2
    70bc:	21008d84 	addi	r4,r4,566
    70c0:	d9002c15 	stw	r4,176(sp)
    70c4:	054001c4 	movi	r21,7
    70c8:	00000306 	br	70d8 <___vfprintf_internal_r+0x190c>
    70cc:	42000204 	addi	r8,r8,8
    70d0:	843ffc04 	addi	r16,r16,-16
    70d4:	94009a0e 	bge	r18,r16,7340 <___vfprintf_internal_r+0x1b74>
    70d8:	18c00404 	addi	r3,r3,16
    70dc:	10800044 	addi	r2,r2,1
    70e0:	45000015 	stw	r20,0(r8)
    70e4:	44800115 	stw	r18,4(r8)
    70e8:	d8c02015 	stw	r3,128(sp)
    70ec:	d8801f15 	stw	r2,124(sp)
    70f0:	a8bff60e 	bge	r21,r2,70cc <__alt_mem_Flash_flash_data+0xf40070cc>
    70f4:	b009883a 	mov	r4,r22
    70f8:	b80b883a 	mov	r5,r23
    70fc:	d9801e04 	addi	r6,sp,120
    7100:	000dc980 	call	dc98 <__sprint_r>
    7104:	103aa51e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    7108:	d8c02017 	ldw	r3,128(sp)
    710c:	d8801f17 	ldw	r2,124(sp)
    7110:	da000404 	addi	r8,sp,16
    7114:	003fee06 	br	70d0 <__alt_mem_Flash_flash_data+0xf40070d0>
    7118:	008011c4 	movi	r2,71
    711c:	1400be16 	blt	r2,r16,7418 <___vfprintf_internal_r+0x1c4c>
    7120:	030000b4 	movhi	r12,2
    7124:	63007704 	addi	r12,r12,476
    7128:	db003115 	stw	r12,196(sp)
    712c:	00c000c4 	movi	r3,3
    7130:	00bfdfc4 	movi	r2,-129
    7134:	d8c02b15 	stw	r3,172(sp)
    7138:	88a2703a 	and	r17,r17,r2
    713c:	dd402783 	ldbu	r21,158(sp)
    7140:	dcc02d15 	stw	r19,180(sp)
    7144:	1825883a 	mov	r18,r3
    7148:	d8003215 	stw	zero,200(sp)
    714c:	d8003415 	stw	zero,208(sp)
    7150:	003af106 	br	5d18 <__alt_mem_Flash_flash_data+0xf4005d18>
    7154:	4825883a 	mov	r18,r9
    7158:	003c9306 	br	63a8 <__alt_mem_Flash_flash_data+0xf40063a8>
    715c:	db002d17 	ldw	r12,180(sp)
    7160:	14c00017 	ldw	r19,0(r2)
    7164:	0039883a 	mov	fp,zero
    7168:	63000104 	addi	r12,r12,4
    716c:	db002d15 	stw	r12,180(sp)
    7170:	003c4706 	br	6290 <__alt_mem_Flash_flash_data+0xf4006290>
    7174:	008000b4 	movhi	r2,2
    7178:	10807504 	addi	r2,r2,468
    717c:	d8803115 	stw	r2,196(sp)
    7180:	003bf106 	br	6148 <__alt_mem_Flash_flash_data+0xf4006148>
    7184:	b009883a 	mov	r4,r22
    7188:	b80b883a 	mov	r5,r23
    718c:	d9801e04 	addi	r6,sp,120
    7190:	000dc980 	call	dc98 <__sprint_r>
    7194:	103a811e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    7198:	dc002617 	ldw	r16,152(sp)
    719c:	d8c02017 	ldw	r3,128(sp)
    71a0:	da000404 	addi	r8,sp,16
    71a4:	003faf06 	br	7064 <__alt_mem_Flash_flash_data+0xf4007064>
    71a8:	db002e17 	ldw	r12,184(sp)
    71ac:	1805883a 	mov	r2,r3
    71b0:	dac02d15 	stw	r11,180(sp)
    71b4:	0319c83a 	sub	r12,zero,r12
    71b8:	db002e15 	stw	r12,184(sp)
    71bc:	003a8206 	br	5bc8 <__alt_mem_Flash_flash_data+0xf4005bc8>
    71c0:	18800044 	addi	r2,r3,1
    71c4:	8c400814 	ori	r17,r17,32
    71c8:	1c000047 	ldb	r16,1(r3)
    71cc:	0039e406 	br	5960 <__alt_mem_Flash_flash_data+0xf4005960>
    71d0:	b009883a 	mov	r4,r22
    71d4:	b80b883a 	mov	r5,r23
    71d8:	d9801e04 	addi	r6,sp,120
    71dc:	000dc980 	call	dc98 <__sprint_r>
    71e0:	103a6e1e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    71e4:	d8c02017 	ldw	r3,128(sp)
    71e8:	da000404 	addi	r8,sp,16
    71ec:	003d0c06 	br	6620 <__alt_mem_Flash_flash_data+0xf4006620>
    71f0:	db002817 	ldw	r12,160(sp)
    71f4:	d8c03117 	ldw	r3,196(sp)
    71f8:	60e5c83a 	sub	r18,r12,r3
    71fc:	003ac106 	br	5d04 <__alt_mem_Flash_flash_data+0xf4005d04>
    7200:	b009883a 	mov	r4,r22
    7204:	b80b883a 	mov	r5,r23
    7208:	d9801e04 	addi	r6,sp,120
    720c:	000dc980 	call	dc98 <__sprint_r>
    7210:	103a621e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    7214:	d8c02017 	ldw	r3,128(sp)
    7218:	d8801f17 	ldw	r2,124(sp)
    721c:	da000404 	addi	r8,sp,16
    7220:	db003317 	ldw	r12,204(sp)
    7224:	dac03117 	ldw	r11,196(sp)
    7228:	10800044 	addi	r2,r2,1
    722c:	1b07883a 	add	r3,r3,r12
    7230:	42c00015 	stw	r11,0(r8)
    7234:	43000115 	stw	r12,4(r8)
    7238:	d8c02015 	stw	r3,128(sp)
    723c:	d8801f15 	stw	r2,124(sp)
    7240:	010001c4 	movi	r4,7
    7244:	20bb460e 	bge	r4,r2,5f60 <__alt_mem_Flash_flash_data+0xf4005f60>
    7248:	003d8506 	br	6860 <__alt_mem_Flash_flash_data+0xf4006860>
    724c:	da003f15 	stw	r8,252(sp)
    7250:	00037a40 	call	37a4 <strlen>
    7254:	1025883a 	mov	r18,r2
    7258:	da003f17 	ldw	r8,252(sp)
    725c:	903c540e 	bge	r18,zero,63b0 <__alt_mem_Flash_flash_data+0xf40063b0>
    7260:	0005883a 	mov	r2,zero
    7264:	003c5206 	br	63b0 <__alt_mem_Flash_flash_data+0xf40063b0>
    7268:	010000b4 	movhi	r4,2
    726c:	21009184 	addi	r4,r4,582
    7270:	d9003615 	stw	r4,216(sp)
    7274:	003adc06 	br	5de8 <__alt_mem_Flash_flash_data+0xf4005de8>
    7278:	d8802604 	addi	r2,sp,152
    727c:	d8800115 	stw	r2,4(sp)
    7280:	d9403717 	ldw	r5,220(sp)
    7284:	d8802504 	addi	r2,sp,148
    7288:	d8800215 	stw	r2,8(sp)
    728c:	d8802104 	addi	r2,sp,132
    7290:	da400015 	stw	r9,0(sp)
    7294:	d8800315 	stw	r2,12(sp)
    7298:	b009883a 	mov	r4,r22
    729c:	900d883a 	mov	r6,r18
    72a0:	01c000c4 	movi	r7,3
    72a4:	da003f15 	stw	r8,252(sp)
    72a8:	da403e15 	stw	r9,248(sp)
    72ac:	0007b500 	call	7b50 <_dtoa_r>
    72b0:	da403e17 	ldw	r9,248(sp)
    72b4:	da003f17 	ldw	r8,252(sp)
    72b8:	d8803115 	stw	r2,196(sp)
    72bc:	4839883a 	mov	fp,r9
    72c0:	dac03117 	ldw	r11,196(sp)
    72c4:	00801184 	movi	r2,70
    72c8:	5f15883a 	add	r10,r11,fp
    72cc:	a8bef01e 	bne	r21,r2,6e90 <__alt_mem_Flash_flash_data+0xf4006e90>
    72d0:	59000007 	ldb	r4,0(r11)
    72d4:	00800c04 	movi	r2,48
    72d8:	2080d526 	beq	r4,r2,7630 <___vfprintf_internal_r+0x1e64>
    72dc:	d8c02617 	ldw	r3,152(sp)
    72e0:	50d5883a 	add	r10,r10,r3
    72e4:	003eea06 	br	6e90 <__alt_mem_Flash_flash_data+0xf4006e90>
    72e8:	0025883a 	mov	r18,zero
    72ec:	003db306 	br	69bc <__alt_mem_Flash_flash_data+0xf40069bc>
    72f0:	b009883a 	mov	r4,r22
    72f4:	b80b883a 	mov	r5,r23
    72f8:	d9801e04 	addi	r6,sp,120
    72fc:	000dc980 	call	dc98 <__sprint_r>
    7300:	103a261e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    7304:	d8c02017 	ldw	r3,128(sp)
    7308:	da000404 	addi	r8,sp,16
    730c:	003daa06 	br	69b8 <__alt_mem_Flash_flash_data+0xf40069b8>
    7310:	b009883a 	mov	r4,r22
    7314:	b80b883a 	mov	r5,r23
    7318:	d9801e04 	addi	r6,sp,120
    731c:	000dc980 	call	dc98 <__sprint_r>
    7320:	103a1e1e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    7324:	d8802617 	ldw	r2,152(sp)
    7328:	d8c02017 	ldw	r3,128(sp)
    732c:	da000404 	addi	r8,sp,16
    7330:	003e2c06 	br	6be4 <__alt_mem_Flash_flash_data+0xf4006be4>
    7334:	030000b4 	movhi	r12,2
    7338:	63008d84 	addi	r12,r12,566
    733c:	db002c15 	stw	r12,176(sp)
    7340:	dac02c17 	ldw	r11,176(sp)
    7344:	1c07883a 	add	r3,r3,r16
    7348:	10800044 	addi	r2,r2,1
    734c:	42c00015 	stw	r11,0(r8)
    7350:	44000115 	stw	r16,4(r8)
    7354:	d8c02015 	stw	r3,128(sp)
    7358:	d8801f15 	stw	r2,124(sp)
    735c:	010001c4 	movi	r4,7
    7360:	20bfa716 	blt	r4,r2,7200 <__alt_mem_Flash_flash_data+0xf4007200>
    7364:	42000204 	addi	r8,r8,8
    7368:	003fad06 	br	7220 <__alt_mem_Flash_flash_data+0xf4007220>
    736c:	00800184 	movi	r2,6
    7370:	1240012e 	bgeu	r2,r9,7378 <___vfprintf_internal_r+0x1bac>
    7374:	1013883a 	mov	r9,r2
    7378:	4825883a 	mov	r18,r9
    737c:	4805883a 	mov	r2,r9
    7380:	4800c216 	blt	r9,zero,768c <___vfprintf_internal_r+0x1ec0>
    7384:	d8802b15 	stw	r2,172(sp)
    7388:	008000b4 	movhi	r2,2
    738c:	10808304 	addi	r2,r2,524
    7390:	d8803115 	stw	r2,196(sp)
    7394:	dcc02d15 	stw	r19,180(sp)
    7398:	d8003215 	stw	zero,200(sp)
    739c:	d8003415 	stw	zero,208(sp)
    73a0:	0005883a 	mov	r2,zero
    73a4:	003a6306 	br	5d34 <__alt_mem_Flash_flash_data+0xf4005d34>
    73a8:	0021883a 	mov	r16,zero
    73ac:	003e1f06 	br	6c2c <__alt_mem_Flash_flash_data+0xf4006c2c>
    73b0:	b009883a 	mov	r4,r22
    73b4:	b80b883a 	mov	r5,r23
    73b8:	d9801e04 	addi	r6,sp,120
    73bc:	000dc980 	call	dc98 <__sprint_r>
    73c0:	1039f61e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    73c4:	d8802617 	ldw	r2,152(sp)
    73c8:	db003317 	ldw	r12,204(sp)
    73cc:	d8c02017 	ldw	r3,128(sp)
    73d0:	da000404 	addi	r8,sp,16
    73d4:	6085c83a 	sub	r2,r12,r2
    73d8:	003e1306 	br	6c28 <__alt_mem_Flash_flash_data+0xf4006c28>
    73dc:	030000b4 	movhi	r12,2
    73e0:	63009184 	addi	r12,r12,582
    73e4:	db003615 	stw	r12,216(sp)
    73e8:	003b0206 	br	5ff4 <__alt_mem_Flash_flash_data+0xf4005ff4>
    73ec:	00c00b44 	movi	r3,45
    73f0:	d8802b15 	stw	r2,172(sp)
    73f4:	dc402d17 	ldw	r17,180(sp)
    73f8:	d8c02785 	stb	r3,158(sp)
    73fc:	dcc02d15 	stw	r19,180(sp)
    7400:	d8003215 	stw	zero,200(sp)
    7404:	00800b44 	movi	r2,45
    7408:	003a4706 	br	5d28 <__alt_mem_Flash_flash_data+0xf4005d28>
    740c:	05400b44 	movi	r21,45
    7410:	dd402785 	stb	r21,158(sp)
    7414:	003b4706 	br	6134 <__alt_mem_Flash_flash_data+0xf4006134>
    7418:	008000b4 	movhi	r2,2
    741c:	10807804 	addi	r2,r2,480
    7420:	d8803115 	stw	r2,196(sp)
    7424:	003f4106 	br	712c <__alt_mem_Flash_flash_data+0xf400712c>
    7428:	d8c02617 	ldw	r3,152(sp)
    742c:	00bfff44 	movi	r2,-3
    7430:	18801116 	blt	r3,r2,7478 <___vfprintf_internal_r+0x1cac>
    7434:	48c01016 	blt	r9,r3,7478 <___vfprintf_internal_r+0x1cac>
    7438:	d8c03415 	stw	r3,208(sp)
    743c:	040019c4 	movi	r16,103
    7440:	003eb206 	br	6f0c <__alt_mem_Flash_flash_data+0xf4006f0c>
    7444:	010000b4 	movhi	r4,2
    7448:	21008d84 	addi	r4,r4,566
    744c:	d9002c15 	stw	r4,176(sp)
    7450:	003cb106 	br	6718 <__alt_mem_Flash_flash_data+0xf4006718>
    7454:	5005883a 	mov	r2,r10
    7458:	003ea106 	br	6ee0 <__alt_mem_Flash_flash_data+0xf4006ee0>
    745c:	da402b15 	stw	r9,172(sp)
    7460:	dd402783 	ldbu	r21,158(sp)
    7464:	4825883a 	mov	r18,r9
    7468:	dcc02d15 	stw	r19,180(sp)
    746c:	d8003215 	stw	zero,200(sp)
    7470:	d8003415 	stw	zero,208(sp)
    7474:	003a2806 	br	5d18 <__alt_mem_Flash_flash_data+0xf4005d18>
    7478:	843fff84 	addi	r16,r16,-2
    747c:	1f3fffc4 	addi	fp,r3,-1
    7480:	df002615 	stw	fp,152(sp)
    7484:	dc0022c5 	stb	r16,139(sp)
    7488:	e0009816 	blt	fp,zero,76ec <___vfprintf_internal_r+0x1f20>
    748c:	00800ac4 	movi	r2,43
    7490:	d8802305 	stb	r2,140(sp)
    7494:	00800244 	movi	r2,9
    7498:	1700750e 	bge	r2,fp,7670 <___vfprintf_internal_r+0x1ea4>
    749c:	dd4022c4 	addi	r21,sp,139
    74a0:	dc002c15 	stw	r16,176(sp)
    74a4:	4025883a 	mov	r18,r8
    74a8:	a821883a 	mov	r16,r21
    74ac:	e009883a 	mov	r4,fp
    74b0:	01400284 	movi	r5,10
    74b4:	00105680 	call	10568 <__modsi3>
    74b8:	10800c04 	addi	r2,r2,48
    74bc:	843fffc4 	addi	r16,r16,-1
    74c0:	e009883a 	mov	r4,fp
    74c4:	01400284 	movi	r5,10
    74c8:	80800005 	stb	r2,0(r16)
    74cc:	00105140 	call	10514 <__divsi3>
    74d0:	1039883a 	mov	fp,r2
    74d4:	00800244 	movi	r2,9
    74d8:	173ff416 	blt	r2,fp,74ac <__alt_mem_Flash_flash_data+0xf40074ac>
    74dc:	9011883a 	mov	r8,r18
    74e0:	e0800c04 	addi	r2,fp,48
    74e4:	8025883a 	mov	r18,r16
    74e8:	913fffc4 	addi	r4,r18,-1
    74ec:	90bfffc5 	stb	r2,-1(r18)
    74f0:	dc002c17 	ldw	r16,176(sp)
    74f4:	2540852e 	bgeu	r4,r21,770c <___vfprintf_internal_r+0x1f40>
    74f8:	d9402384 	addi	r5,sp,142
    74fc:	2c8bc83a 	sub	r5,r5,r18
    7500:	d8c02344 	addi	r3,sp,141
    7504:	a94b883a 	add	r5,r21,r5
    7508:	00000106 	br	7510 <___vfprintf_internal_r+0x1d44>
    750c:	20800003 	ldbu	r2,0(r4)
    7510:	18800005 	stb	r2,0(r3)
    7514:	18c00044 	addi	r3,r3,1
    7518:	21000044 	addi	r4,r4,1
    751c:	197ffb1e 	bne	r3,r5,750c <__alt_mem_Flash_flash_data+0xf400750c>
    7520:	d8802304 	addi	r2,sp,140
    7524:	1485c83a 	sub	r2,r2,r18
    7528:	d8c02344 	addi	r3,sp,141
    752c:	1885883a 	add	r2,r3,r2
    7530:	dac03317 	ldw	r11,204(sp)
    7534:	156bc83a 	sub	r21,r2,r21
    7538:	dd403a15 	stw	r21,232(sp)
    753c:	00800044 	movi	r2,1
    7540:	5d65883a 	add	r18,r11,r21
    7544:	12c0660e 	bge	r2,r11,76e0 <___vfprintf_internal_r+0x1f14>
    7548:	94800044 	addi	r18,r18,1
    754c:	9005883a 	mov	r2,r18
    7550:	90006116 	blt	r18,zero,76d8 <___vfprintf_internal_r+0x1f0c>
    7554:	d8003415 	stw	zero,208(sp)
    7558:	003e7406 	br	6f2c <__alt_mem_Flash_flash_data+0xf4006f2c>
    755c:	b009883a 	mov	r4,r22
    7560:	b80b883a 	mov	r5,r23
    7564:	d9801e04 	addi	r6,sp,120
    7568:	000dc980 	call	dc98 <__sprint_r>
    756c:	10398b1e 	bne	r2,zero,5b9c <__alt_mem_Flash_flash_data+0xf4005b9c>
    7570:	dc002617 	ldw	r16,152(sp)
    7574:	d8c02017 	ldw	r3,128(sp)
    7578:	d8801f17 	ldw	r2,124(sp)
    757c:	da000404 	addi	r8,sp,16
    7580:	003ec906 	br	70a8 <__alt_mem_Flash_flash_data+0xf40070a8>
    7584:	483e1c1e 	bne	r9,zero,6df8 <__alt_mem_Flash_flash_data+0xf4006df8>
    7588:	9013883a 	mov	r9,r18
    758c:	003e1a06 	br	6df8 <__alt_mem_Flash_flash_data+0xf4006df8>
    7590:	02400184 	movi	r9,6
    7594:	003e1806 	br	6df8 <__alt_mem_Flash_flash_data+0xf4006df8>
    7598:	d8c03417 	ldw	r3,208(sp)
    759c:	00c04b0e 	bge	zero,r3,76cc <___vfprintf_internal_r+0x1f00>
    75a0:	04800044 	movi	r18,1
    75a4:	dac03317 	ldw	r11,204(sp)
    75a8:	92e5883a 	add	r18,r18,r11
    75ac:	9005883a 	mov	r2,r18
    75b0:	903e5e0e 	bge	r18,zero,6f2c <__alt_mem_Flash_flash_data+0xf4006f2c>
    75b4:	0005883a 	mov	r2,zero
    75b8:	003e5c06 	br	6f2c <__alt_mem_Flash_flash_data+0xf4006f2c>
    75bc:	00c00b44 	movi	r3,45
    75c0:	64a0003c 	xorhi	r18,r12,32768
    75c4:	d8c02b05 	stb	r3,172(sp)
    75c8:	003e1106 	br	6e10 <__alt_mem_Flash_flash_data+0xf4006e10>
    75cc:	4f000044 	addi	fp,r9,1
    75d0:	003e1606 	br	6e2c <__alt_mem_Flash_flash_data+0xf4006e2c>
    75d4:	d8c02617 	ldw	r3,152(sp)
    75d8:	d8c03415 	stw	r3,208(sp)
    75dc:	00c0350e 	bge	zero,r3,76b4 <___vfprintf_internal_r+0x1ee8>
    75e0:	4800081e 	bne	r9,zero,7604 <___vfprintf_internal_r+0x1e38>
    75e4:	8c40004c 	andi	r17,r17,1
    75e8:	8800061e 	bne	r17,zero,7604 <___vfprintf_internal_r+0x1e38>
    75ec:	1805883a 	mov	r2,r3
    75f0:	183e4d0e 	bge	r3,zero,6f28 <__alt_mem_Flash_flash_data+0xf4006f28>
    75f4:	0005883a 	mov	r2,zero
    75f8:	003e4b06 	br	6f28 <__alt_mem_Flash_flash_data+0xf4006f28>
    75fc:	d8802117 	ldw	r2,132(sp)
    7600:	003e3706 	br	6ee0 <__alt_mem_Flash_flash_data+0xf4006ee0>
    7604:	dac03417 	ldw	r11,208(sp)
    7608:	4a400044 	addi	r9,r9,1
    760c:	5a65883a 	add	r18,r11,r9
    7610:	9005883a 	mov	r2,r18
    7614:	903e450e 	bge	r18,zero,6f2c <__alt_mem_Flash_flash_data+0xf4006f2c>
    7618:	003fe606 	br	75b4 <__alt_mem_Flash_flash_data+0xf40075b4>
    761c:	db003417 	ldw	r12,208(sp)
    7620:	64800044 	addi	r18,r12,1
    7624:	9005883a 	mov	r2,r18
    7628:	903e400e 	bge	r18,zero,6f2c <__alt_mem_Flash_flash_data+0xf4006f2c>
    762c:	003fe106 	br	75b4 <__alt_mem_Flash_flash_data+0xf40075b4>
    7630:	d9003717 	ldw	r4,220(sp)
    7634:	900b883a 	mov	r5,r18
    7638:	000d883a 	mov	r6,zero
    763c:	000f883a 	mov	r7,zero
    7640:	da003f15 	stw	r8,252(sp)
    7644:	da403e15 	stw	r9,248(sp)
    7648:	da803d15 	stw	r10,244(sp)
    764c:	001173c0 	call	1173c <__eqdf2>
    7650:	da003f17 	ldw	r8,252(sp)
    7654:	da403e17 	ldw	r9,248(sp)
    7658:	da803d17 	ldw	r10,244(sp)
    765c:	103f1f26 	beq	r2,zero,72dc <__alt_mem_Flash_flash_data+0xf40072dc>
    7660:	00800044 	movi	r2,1
    7664:	1707c83a 	sub	r3,r2,fp
    7668:	d8c02615 	stw	r3,152(sp)
    766c:	003f1c06 	br	72e0 <__alt_mem_Flash_flash_data+0xf40072e0>
    7670:	00800c04 	movi	r2,48
    7674:	e0c00c04 	addi	r3,fp,48
    7678:	d8802345 	stb	r2,141(sp)
    767c:	d8c02385 	stb	r3,142(sp)
    7680:	d88023c4 	addi	r2,sp,143
    7684:	dd4022c4 	addi	r21,sp,139
    7688:	003fa906 	br	7530 <__alt_mem_Flash_flash_data+0xf4007530>
    768c:	0005883a 	mov	r2,zero
    7690:	003f3c06 	br	7384 <__alt_mem_Flash_flash_data+0xf4007384>
    7694:	dac02d17 	ldw	r11,180(sp)
    7698:	5a400017 	ldw	r9,0(r11)
    769c:	5ac00104 	addi	r11,r11,4
    76a0:	dac02d15 	stw	r11,180(sp)
    76a4:	483ec80e 	bge	r9,zero,71c8 <__alt_mem_Flash_flash_data+0xf40071c8>
    76a8:	027fffc4 	movi	r9,-1
    76ac:	1c000047 	ldb	r16,1(r3)
    76b0:	0038ab06 	br	5960 <__alt_mem_Flash_flash_data+0xf4005960>
    76b4:	4800111e 	bne	r9,zero,76fc <___vfprintf_internal_r+0x1f30>
    76b8:	8c40004c 	andi	r17,r17,1
    76bc:	88000f1e 	bne	r17,zero,76fc <___vfprintf_internal_r+0x1f30>
    76c0:	00800044 	movi	r2,1
    76c4:	1025883a 	mov	r18,r2
    76c8:	003e1806 	br	6f2c <__alt_mem_Flash_flash_data+0xf4006f2c>
    76cc:	04800084 	movi	r18,2
    76d0:	90e5c83a 	sub	r18,r18,r3
    76d4:	003fb306 	br	75a4 <__alt_mem_Flash_flash_data+0xf40075a4>
    76d8:	0005883a 	mov	r2,zero
    76dc:	003f9d06 	br	7554 <__alt_mem_Flash_flash_data+0xf4007554>
    76e0:	88a2703a 	and	r17,r17,r2
    76e4:	883f9926 	beq	r17,zero,754c <__alt_mem_Flash_flash_data+0xf400754c>
    76e8:	003f9706 	br	7548 <__alt_mem_Flash_flash_data+0xf4007548>
    76ec:	00800b44 	movi	r2,45
    76f0:	0739c83a 	sub	fp,zero,fp
    76f4:	d8802305 	stb	r2,140(sp)
    76f8:	003f6606 	br	7494 <__alt_mem_Flash_flash_data+0xf4007494>
    76fc:	4c800084 	addi	r18,r9,2
    7700:	9005883a 	mov	r2,r18
    7704:	903e090e 	bge	r18,zero,6f2c <__alt_mem_Flash_flash_data+0xf4006f2c>
    7708:	003faa06 	br	75b4 <__alt_mem_Flash_flash_data+0xf40075b4>
    770c:	d8802344 	addi	r2,sp,141
    7710:	003f8706 	br	7530 <__alt_mem_Flash_flash_data+0xf4007530>
    7714:	d8c02617 	ldw	r3,152(sp)
    7718:	003f5806 	br	747c <__alt_mem_Flash_flash_data+0xf400747c>

0000771c <__vfprintf_internal>:
    771c:	2007883a 	mov	r3,r4
    7720:	010000b4 	movhi	r4,2
    7724:	21099904 	addi	r4,r4,9828
    7728:	21000017 	ldw	r4,0(r4)
    772c:	2805883a 	mov	r2,r5
    7730:	300f883a 	mov	r7,r6
    7734:	180b883a 	mov	r5,r3
    7738:	100d883a 	mov	r6,r2
    773c:	00057cc1 	jmpi	57cc <___vfprintf_internal_r>

00007740 <__sbprintf>:
    7740:	2880030b 	ldhu	r2,12(r5)
    7744:	2ac01917 	ldw	r11,100(r5)
    7748:	2a80038b 	ldhu	r10,14(r5)
    774c:	2a400717 	ldw	r9,28(r5)
    7750:	2a000917 	ldw	r8,36(r5)
    7754:	defee204 	addi	sp,sp,-1144
    7758:	00c10004 	movi	r3,1024
    775c:	dc011a15 	stw	r16,1128(sp)
    7760:	10bfff4c 	andi	r2,r2,65533
    7764:	2821883a 	mov	r16,r5
    7768:	d8cb883a 	add	r5,sp,r3
    776c:	dc811c15 	stw	r18,1136(sp)
    7770:	dc411b15 	stw	r17,1132(sp)
    7774:	dfc11d15 	stw	ra,1140(sp)
    7778:	2025883a 	mov	r18,r4
    777c:	d881030d 	sth	r2,1036(sp)
    7780:	dac11915 	stw	r11,1124(sp)
    7784:	da81038d 	sth	r10,1038(sp)
    7788:	da410715 	stw	r9,1052(sp)
    778c:	da010915 	stw	r8,1060(sp)
    7790:	dec10015 	stw	sp,1024(sp)
    7794:	dec10415 	stw	sp,1040(sp)
    7798:	d8c10215 	stw	r3,1032(sp)
    779c:	d8c10515 	stw	r3,1044(sp)
    77a0:	d8010615 	stw	zero,1048(sp)
    77a4:	00057cc0 	call	57cc <___vfprintf_internal_r>
    77a8:	1023883a 	mov	r17,r2
    77ac:	10000416 	blt	r2,zero,77c0 <__sbprintf+0x80>
    77b0:	9009883a 	mov	r4,r18
    77b4:	d9410004 	addi	r5,sp,1024
    77b8:	00094800 	call	9480 <_fflush_r>
    77bc:	10000d1e 	bne	r2,zero,77f4 <__sbprintf+0xb4>
    77c0:	d8c1030b 	ldhu	r3,1036(sp)
    77c4:	18c0100c 	andi	r3,r3,64
    77c8:	18000326 	beq	r3,zero,77d8 <__sbprintf+0x98>
    77cc:	8080030b 	ldhu	r2,12(r16)
    77d0:	10801014 	ori	r2,r2,64
    77d4:	8080030d 	sth	r2,12(r16)
    77d8:	8805883a 	mov	r2,r17
    77dc:	dfc11d17 	ldw	ra,1140(sp)
    77e0:	dc811c17 	ldw	r18,1136(sp)
    77e4:	dc411b17 	ldw	r17,1132(sp)
    77e8:	dc011a17 	ldw	r16,1128(sp)
    77ec:	dec11e04 	addi	sp,sp,1144
    77f0:	f800283a 	ret
    77f4:	047fffc4 	movi	r17,-1
    77f8:	003ff106 	br	77c0 <__alt_mem_Flash_flash_data+0xf40077c0>

000077fc <__swsetup_r>:
    77fc:	008000b4 	movhi	r2,2
    7800:	defffd04 	addi	sp,sp,-12
    7804:	10899904 	addi	r2,r2,9828
    7808:	dc400115 	stw	r17,4(sp)
    780c:	2023883a 	mov	r17,r4
    7810:	11000017 	ldw	r4,0(r2)
    7814:	dc000015 	stw	r16,0(sp)
    7818:	dfc00215 	stw	ra,8(sp)
    781c:	2821883a 	mov	r16,r5
    7820:	20000226 	beq	r4,zero,782c <__swsetup_r+0x30>
    7824:	20c00e17 	ldw	r3,56(r4)
    7828:	18003126 	beq	r3,zero,78f0 <__swsetup_r+0xf4>
    782c:	8080030b 	ldhu	r2,12(r16)
    7830:	10c0020c 	andi	r3,r2,8
    7834:	100d883a 	mov	r6,r2
    7838:	18000f26 	beq	r3,zero,7878 <__swsetup_r+0x7c>
    783c:	80c00417 	ldw	r3,16(r16)
    7840:	18001526 	beq	r3,zero,7898 <__swsetup_r+0x9c>
    7844:	1100004c 	andi	r4,r2,1
    7848:	20001c1e 	bne	r4,zero,78bc <__swsetup_r+0xc0>
    784c:	1080008c 	andi	r2,r2,2
    7850:	1000291e 	bne	r2,zero,78f8 <__swsetup_r+0xfc>
    7854:	80800517 	ldw	r2,20(r16)
    7858:	80800215 	stw	r2,8(r16)
    785c:	18001c26 	beq	r3,zero,78d0 <__swsetup_r+0xd4>
    7860:	0005883a 	mov	r2,zero
    7864:	dfc00217 	ldw	ra,8(sp)
    7868:	dc400117 	ldw	r17,4(sp)
    786c:	dc000017 	ldw	r16,0(sp)
    7870:	dec00304 	addi	sp,sp,12
    7874:	f800283a 	ret
    7878:	3080040c 	andi	r2,r6,16
    787c:	10002e26 	beq	r2,zero,7938 <__swsetup_r+0x13c>
    7880:	3080010c 	andi	r2,r6,4
    7884:	10001e1e 	bne	r2,zero,7900 <__swsetup_r+0x104>
    7888:	80c00417 	ldw	r3,16(r16)
    788c:	30800214 	ori	r2,r6,8
    7890:	8080030d 	sth	r2,12(r16)
    7894:	183feb1e 	bne	r3,zero,7844 <__alt_mem_Flash_flash_data+0xf4007844>
    7898:	1140a00c 	andi	r5,r2,640
    789c:	01008004 	movi	r4,512
    78a0:	293fe826 	beq	r5,r4,7844 <__alt_mem_Flash_flash_data+0xf4007844>
    78a4:	8809883a 	mov	r4,r17
    78a8:	800b883a 	mov	r5,r16
    78ac:	000a3e80 	call	a3e8 <__smakebuf_r>
    78b0:	8080030b 	ldhu	r2,12(r16)
    78b4:	80c00417 	ldw	r3,16(r16)
    78b8:	003fe206 	br	7844 <__alt_mem_Flash_flash_data+0xf4007844>
    78bc:	80800517 	ldw	r2,20(r16)
    78c0:	80000215 	stw	zero,8(r16)
    78c4:	0085c83a 	sub	r2,zero,r2
    78c8:	80800615 	stw	r2,24(r16)
    78cc:	183fe41e 	bne	r3,zero,7860 <__alt_mem_Flash_flash_data+0xf4007860>
    78d0:	80c0030b 	ldhu	r3,12(r16)
    78d4:	0005883a 	mov	r2,zero
    78d8:	1900200c 	andi	r4,r3,128
    78dc:	203fe126 	beq	r4,zero,7864 <__alt_mem_Flash_flash_data+0xf4007864>
    78e0:	18c01014 	ori	r3,r3,64
    78e4:	80c0030d 	sth	r3,12(r16)
    78e8:	00bfffc4 	movi	r2,-1
    78ec:	003fdd06 	br	7864 <__alt_mem_Flash_flash_data+0xf4007864>
    78f0:	000985c0 	call	985c <__sinit>
    78f4:	003fcd06 	br	782c <__alt_mem_Flash_flash_data+0xf400782c>
    78f8:	0005883a 	mov	r2,zero
    78fc:	003fd606 	br	7858 <__alt_mem_Flash_flash_data+0xf4007858>
    7900:	81400c17 	ldw	r5,48(r16)
    7904:	28000626 	beq	r5,zero,7920 <__swsetup_r+0x124>
    7908:	80801004 	addi	r2,r16,64
    790c:	28800326 	beq	r5,r2,791c <__swsetup_r+0x120>
    7910:	8809883a 	mov	r4,r17
    7914:	00099d00 	call	99d0 <_free_r>
    7918:	8180030b 	ldhu	r6,12(r16)
    791c:	80000c15 	stw	zero,48(r16)
    7920:	80c00417 	ldw	r3,16(r16)
    7924:	00bff6c4 	movi	r2,-37
    7928:	118c703a 	and	r6,r2,r6
    792c:	80000115 	stw	zero,4(r16)
    7930:	80c00015 	stw	r3,0(r16)
    7934:	003fd506 	br	788c <__alt_mem_Flash_flash_data+0xf400788c>
    7938:	00800244 	movi	r2,9
    793c:	88800015 	stw	r2,0(r17)
    7940:	30801014 	ori	r2,r6,64
    7944:	8080030d 	sth	r2,12(r16)
    7948:	00bfffc4 	movi	r2,-1
    794c:	003fc506 	br	7864 <__alt_mem_Flash_flash_data+0xf4007864>

00007950 <quorem>:
    7950:	defff704 	addi	sp,sp,-36
    7954:	dc800215 	stw	r18,8(sp)
    7958:	20800417 	ldw	r2,16(r4)
    795c:	2c800417 	ldw	r18,16(r5)
    7960:	dfc00815 	stw	ra,32(sp)
    7964:	ddc00715 	stw	r23,28(sp)
    7968:	dd800615 	stw	r22,24(sp)
    796c:	dd400515 	stw	r21,20(sp)
    7970:	dd000415 	stw	r20,16(sp)
    7974:	dcc00315 	stw	r19,12(sp)
    7978:	dc400115 	stw	r17,4(sp)
    797c:	dc000015 	stw	r16,0(sp)
    7980:	14807116 	blt	r2,r18,7b48 <quorem+0x1f8>
    7984:	94bfffc4 	addi	r18,r18,-1
    7988:	94ad883a 	add	r22,r18,r18
    798c:	b5ad883a 	add	r22,r22,r22
    7990:	2c400504 	addi	r17,r5,20
    7994:	8da9883a 	add	r20,r17,r22
    7998:	25400504 	addi	r21,r4,20
    799c:	282f883a 	mov	r23,r5
    79a0:	adad883a 	add	r22,r21,r22
    79a4:	a1400017 	ldw	r5,0(r20)
    79a8:	2021883a 	mov	r16,r4
    79ac:	b1000017 	ldw	r4,0(r22)
    79b0:	29400044 	addi	r5,r5,1
    79b4:	00105c40 	call	105c4 <__udivsi3>
    79b8:	1027883a 	mov	r19,r2
    79bc:	10002c26 	beq	r2,zero,7a70 <quorem+0x120>
    79c0:	a813883a 	mov	r9,r21
    79c4:	8811883a 	mov	r8,r17
    79c8:	0009883a 	mov	r4,zero
    79cc:	000d883a 	mov	r6,zero
    79d0:	41c00017 	ldw	r7,0(r8)
    79d4:	49400017 	ldw	r5,0(r9)
    79d8:	42000104 	addi	r8,r8,4
    79dc:	38bfffcc 	andi	r2,r7,65535
    79e0:	14c5383a 	mul	r2,r2,r19
    79e4:	380ed43a 	srli	r7,r7,16
    79e8:	28ffffcc 	andi	r3,r5,65535
    79ec:	2085883a 	add	r2,r4,r2
    79f0:	1008d43a 	srli	r4,r2,16
    79f4:	3ccf383a 	mul	r7,r7,r19
    79f8:	198d883a 	add	r6,r3,r6
    79fc:	10ffffcc 	andi	r3,r2,65535
    7a00:	30c7c83a 	sub	r3,r6,r3
    7a04:	280ad43a 	srli	r5,r5,16
    7a08:	21c9883a 	add	r4,r4,r7
    7a0c:	180dd43a 	srai	r6,r3,16
    7a10:	20bfffcc 	andi	r2,r4,65535
    7a14:	288bc83a 	sub	r5,r5,r2
    7a18:	298b883a 	add	r5,r5,r6
    7a1c:	280e943a 	slli	r7,r5,16
    7a20:	18ffffcc 	andi	r3,r3,65535
    7a24:	2008d43a 	srli	r4,r4,16
    7a28:	38ceb03a 	or	r7,r7,r3
    7a2c:	49c00015 	stw	r7,0(r9)
    7a30:	280dd43a 	srai	r6,r5,16
    7a34:	4a400104 	addi	r9,r9,4
    7a38:	a23fe52e 	bgeu	r20,r8,79d0 <__alt_mem_Flash_flash_data+0xf40079d0>
    7a3c:	b0800017 	ldw	r2,0(r22)
    7a40:	10000b1e 	bne	r2,zero,7a70 <quorem+0x120>
    7a44:	b0bfff04 	addi	r2,r22,-4
    7a48:	a880082e 	bgeu	r21,r2,7a6c <quorem+0x11c>
    7a4c:	b0ffff17 	ldw	r3,-4(r22)
    7a50:	18000326 	beq	r3,zero,7a60 <quorem+0x110>
    7a54:	00000506 	br	7a6c <quorem+0x11c>
    7a58:	10c00017 	ldw	r3,0(r2)
    7a5c:	1800031e 	bne	r3,zero,7a6c <quorem+0x11c>
    7a60:	10bfff04 	addi	r2,r2,-4
    7a64:	94bfffc4 	addi	r18,r18,-1
    7a68:	a8bffb36 	bltu	r21,r2,7a58 <__alt_mem_Flash_flash_data+0xf4007a58>
    7a6c:	84800415 	stw	r18,16(r16)
    7a70:	8009883a 	mov	r4,r16
    7a74:	b80b883a 	mov	r5,r23
    7a78:	000babc0 	call	babc <__mcmp>
    7a7c:	10002616 	blt	r2,zero,7b18 <quorem+0x1c8>
    7a80:	9cc00044 	addi	r19,r19,1
    7a84:	a80d883a 	mov	r6,r21
    7a88:	000b883a 	mov	r5,zero
    7a8c:	31000017 	ldw	r4,0(r6)
    7a90:	88800017 	ldw	r2,0(r17)
    7a94:	31800104 	addi	r6,r6,4
    7a98:	20ffffcc 	andi	r3,r4,65535
    7a9c:	194b883a 	add	r5,r3,r5
    7aa0:	10ffffcc 	andi	r3,r2,65535
    7aa4:	28c7c83a 	sub	r3,r5,r3
    7aa8:	1004d43a 	srli	r2,r2,16
    7aac:	2008d43a 	srli	r4,r4,16
    7ab0:	180bd43a 	srai	r5,r3,16
    7ab4:	18ffffcc 	andi	r3,r3,65535
    7ab8:	2089c83a 	sub	r4,r4,r2
    7abc:	2149883a 	add	r4,r4,r5
    7ac0:	2004943a 	slli	r2,r4,16
    7ac4:	8c400104 	addi	r17,r17,4
    7ac8:	200bd43a 	srai	r5,r4,16
    7acc:	10c6b03a 	or	r3,r2,r3
    7ad0:	30ffff15 	stw	r3,-4(r6)
    7ad4:	a47fed2e 	bgeu	r20,r17,7a8c <__alt_mem_Flash_flash_data+0xf4007a8c>
    7ad8:	9485883a 	add	r2,r18,r18
    7adc:	1085883a 	add	r2,r2,r2
    7ae0:	a887883a 	add	r3,r21,r2
    7ae4:	18800017 	ldw	r2,0(r3)
    7ae8:	10000b1e 	bne	r2,zero,7b18 <quorem+0x1c8>
    7aec:	18bfff04 	addi	r2,r3,-4
    7af0:	a880082e 	bgeu	r21,r2,7b14 <quorem+0x1c4>
    7af4:	18ffff17 	ldw	r3,-4(r3)
    7af8:	18000326 	beq	r3,zero,7b08 <quorem+0x1b8>
    7afc:	00000506 	br	7b14 <quorem+0x1c4>
    7b00:	10c00017 	ldw	r3,0(r2)
    7b04:	1800031e 	bne	r3,zero,7b14 <quorem+0x1c4>
    7b08:	10bfff04 	addi	r2,r2,-4
    7b0c:	94bfffc4 	addi	r18,r18,-1
    7b10:	a8bffb36 	bltu	r21,r2,7b00 <__alt_mem_Flash_flash_data+0xf4007b00>
    7b14:	84800415 	stw	r18,16(r16)
    7b18:	9805883a 	mov	r2,r19
    7b1c:	dfc00817 	ldw	ra,32(sp)
    7b20:	ddc00717 	ldw	r23,28(sp)
    7b24:	dd800617 	ldw	r22,24(sp)
    7b28:	dd400517 	ldw	r21,20(sp)
    7b2c:	dd000417 	ldw	r20,16(sp)
    7b30:	dcc00317 	ldw	r19,12(sp)
    7b34:	dc800217 	ldw	r18,8(sp)
    7b38:	dc400117 	ldw	r17,4(sp)
    7b3c:	dc000017 	ldw	r16,0(sp)
    7b40:	dec00904 	addi	sp,sp,36
    7b44:	f800283a 	ret
    7b48:	0005883a 	mov	r2,zero
    7b4c:	003ff306 	br	7b1c <__alt_mem_Flash_flash_data+0xf4007b1c>

00007b50 <_dtoa_r>:
    7b50:	20801017 	ldw	r2,64(r4)
    7b54:	deffde04 	addi	sp,sp,-136
    7b58:	dd401d15 	stw	r21,116(sp)
    7b5c:	dcc01b15 	stw	r19,108(sp)
    7b60:	dc801a15 	stw	r18,104(sp)
    7b64:	dc401915 	stw	r17,100(sp)
    7b68:	dc001815 	stw	r16,96(sp)
    7b6c:	dfc02115 	stw	ra,132(sp)
    7b70:	df002015 	stw	fp,128(sp)
    7b74:	ddc01f15 	stw	r23,124(sp)
    7b78:	dd801e15 	stw	r22,120(sp)
    7b7c:	dd001c15 	stw	r20,112(sp)
    7b80:	d9c00315 	stw	r7,12(sp)
    7b84:	2021883a 	mov	r16,r4
    7b88:	302b883a 	mov	r21,r6
    7b8c:	2825883a 	mov	r18,r5
    7b90:	dc402417 	ldw	r17,144(sp)
    7b94:	3027883a 	mov	r19,r6
    7b98:	10000826 	beq	r2,zero,7bbc <_dtoa_r+0x6c>
    7b9c:	21801117 	ldw	r6,68(r4)
    7ba0:	00c00044 	movi	r3,1
    7ba4:	100b883a 	mov	r5,r2
    7ba8:	1986983a 	sll	r3,r3,r6
    7bac:	11800115 	stw	r6,4(r2)
    7bb0:	10c00215 	stw	r3,8(r2)
    7bb4:	000b2900 	call	b290 <_Bfree>
    7bb8:	80001015 	stw	zero,64(r16)
    7bbc:	a8002d16 	blt	r21,zero,7c74 <_dtoa_r+0x124>
    7bc0:	88000015 	stw	zero,0(r17)
    7bc4:	a8dffc2c 	andhi	r3,r21,32752
    7bc8:	009ffc34 	movhi	r2,32752
    7bcc:	18801b26 	beq	r3,r2,7c3c <_dtoa_r+0xec>
    7bd0:	9009883a 	mov	r4,r18
    7bd4:	980b883a 	mov	r5,r19
    7bd8:	000d883a 	mov	r6,zero
    7bdc:	000f883a 	mov	r7,zero
    7be0:	001173c0 	call	1173c <__eqdf2>
    7be4:	10002a1e 	bne	r2,zero,7c90 <_dtoa_r+0x140>
    7be8:	d8c02317 	ldw	r3,140(sp)
    7bec:	d9002517 	ldw	r4,148(sp)
    7bf0:	00800044 	movi	r2,1
    7bf4:	18800015 	stw	r2,0(r3)
    7bf8:	2001a226 	beq	r4,zero,8284 <_dtoa_r+0x734>
    7bfc:	008000b4 	movhi	r2,2
    7c00:	10808544 	addi	r2,r2,533
    7c04:	20800015 	stw	r2,0(r4)
    7c08:	10bfffc4 	addi	r2,r2,-1
    7c0c:	dfc02117 	ldw	ra,132(sp)
    7c10:	df002017 	ldw	fp,128(sp)
    7c14:	ddc01f17 	ldw	r23,124(sp)
    7c18:	dd801e17 	ldw	r22,120(sp)
    7c1c:	dd401d17 	ldw	r21,116(sp)
    7c20:	dd001c17 	ldw	r20,112(sp)
    7c24:	dcc01b17 	ldw	r19,108(sp)
    7c28:	dc801a17 	ldw	r18,104(sp)
    7c2c:	dc401917 	ldw	r17,100(sp)
    7c30:	dc001817 	ldw	r16,96(sp)
    7c34:	dec02204 	addi	sp,sp,136
    7c38:	f800283a 	ret
    7c3c:	d8c02317 	ldw	r3,140(sp)
    7c40:	0089c3c4 	movi	r2,9999
    7c44:	18800015 	stw	r2,0(r3)
    7c48:	90017c26 	beq	r18,zero,823c <_dtoa_r+0x6ec>
    7c4c:	008000b4 	movhi	r2,2
    7c50:	10809904 	addi	r2,r2,612
    7c54:	d9002517 	ldw	r4,148(sp)
    7c58:	203fec26 	beq	r4,zero,7c0c <__alt_mem_Flash_flash_data+0xf4007c0c>
    7c5c:	10c000c7 	ldb	r3,3(r2)
    7c60:	18017d1e 	bne	r3,zero,8258 <_dtoa_r+0x708>
    7c64:	10c000c4 	addi	r3,r2,3
    7c68:	d9802517 	ldw	r6,148(sp)
    7c6c:	30c00015 	stw	r3,0(r6)
    7c70:	003fe606 	br	7c0c <__alt_mem_Flash_flash_data+0xf4007c0c>
    7c74:	04e00034 	movhi	r19,32768
    7c78:	9cffffc4 	addi	r19,r19,-1
    7c7c:	00800044 	movi	r2,1
    7c80:	ace6703a 	and	r19,r21,r19
    7c84:	88800015 	stw	r2,0(r17)
    7c88:	982b883a 	mov	r21,r19
    7c8c:	003fcd06 	br	7bc4 <__alt_mem_Flash_flash_data+0xf4007bc4>
    7c90:	d8800204 	addi	r2,sp,8
    7c94:	a822d53a 	srli	r17,r21,20
    7c98:	d8800015 	stw	r2,0(sp)
    7c9c:	8009883a 	mov	r4,r16
    7ca0:	900b883a 	mov	r5,r18
    7ca4:	980d883a 	mov	r6,r19
    7ca8:	d9c00104 	addi	r7,sp,4
    7cac:	000be300 	call	be30 <__d2b>
    7cb0:	1039883a 	mov	fp,r2
    7cb4:	88016a1e 	bne	r17,zero,8260 <_dtoa_r+0x710>
    7cb8:	dd000217 	ldw	r20,8(sp)
    7cbc:	dc400117 	ldw	r17,4(sp)
    7cc0:	00befbc4 	movi	r2,-1041
    7cc4:	a463883a 	add	r17,r20,r17
    7cc8:	8882ea16 	blt	r17,r2,8874 <_dtoa_r+0xd24>
    7ccc:	00bf0384 	movi	r2,-1010
    7cd0:	1445c83a 	sub	r2,r2,r17
    7cd4:	89010484 	addi	r4,r17,1042
    7cd8:	a8aa983a 	sll	r21,r21,r2
    7cdc:	9108d83a 	srl	r4,r18,r4
    7ce0:	a908b03a 	or	r4,r21,r4
    7ce4:	0012acc0 	call	12acc <__floatunsidf>
    7ce8:	017f8434 	movhi	r5,65040
    7cec:	01800044 	movi	r6,1
    7cf0:	1009883a 	mov	r4,r2
    7cf4:	194b883a 	add	r5,r3,r5
    7cf8:	8c7fffc4 	addi	r17,r17,-1
    7cfc:	d9800f15 	stw	r6,60(sp)
    7d00:	000d883a 	mov	r6,zero
    7d04:	01cffe34 	movhi	r7,16376
    7d08:	00120a40 	call	120a4 <__subdf3>
    7d0c:	0198dbf4 	movhi	r6,25455
    7d10:	01cff4f4 	movhi	r7,16339
    7d14:	1009883a 	mov	r4,r2
    7d18:	180b883a 	mov	r5,r3
    7d1c:	3190d844 	addi	r6,r6,17249
    7d20:	39e1e9c4 	addi	r7,r7,-30809
    7d24:	00119800 	call	11980 <__muldf3>
    7d28:	01a2d874 	movhi	r6,35681
    7d2c:	01cff1f4 	movhi	r7,16327
    7d30:	180b883a 	mov	r5,r3
    7d34:	31b22cc4 	addi	r6,r6,-14157
    7d38:	39e28a04 	addi	r7,r7,-30168
    7d3c:	1009883a 	mov	r4,r2
    7d40:	00105d40 	call	105d4 <__adddf3>
    7d44:	8809883a 	mov	r4,r17
    7d48:	102d883a 	mov	r22,r2
    7d4c:	182b883a 	mov	r21,r3
    7d50:	00129fc0 	call	129fc <__floatsidf>
    7d54:	019427f4 	movhi	r6,20639
    7d58:	01cff4f4 	movhi	r7,16339
    7d5c:	1009883a 	mov	r4,r2
    7d60:	180b883a 	mov	r5,r3
    7d64:	319e7ec4 	addi	r6,r6,31227
    7d68:	39d104c4 	addi	r7,r7,17427
    7d6c:	00119800 	call	11980 <__muldf3>
    7d70:	b009883a 	mov	r4,r22
    7d74:	a80b883a 	mov	r5,r21
    7d78:	100d883a 	mov	r6,r2
    7d7c:	180f883a 	mov	r7,r3
    7d80:	00105d40 	call	105d4 <__adddf3>
    7d84:	1009883a 	mov	r4,r2
    7d88:	180b883a 	mov	r5,r3
    7d8c:	102d883a 	mov	r22,r2
    7d90:	182b883a 	mov	r21,r3
    7d94:	00129740 	call	12974 <__fixdfsi>
    7d98:	b009883a 	mov	r4,r22
    7d9c:	a80b883a 	mov	r5,r21
    7da0:	000d883a 	mov	r6,zero
    7da4:	000f883a 	mov	r7,zero
    7da8:	d8800515 	stw	r2,20(sp)
    7dac:	00118a00 	call	118a0 <__ledf2>
    7db0:	10023116 	blt	r2,zero,8678 <_dtoa_r+0xb28>
    7db4:	d8c00517 	ldw	r3,20(sp)
    7db8:	00800584 	movi	r2,22
    7dbc:	10c21f36 	bltu	r2,r3,863c <_dtoa_r+0xaec>
    7dc0:	180490fa 	slli	r2,r3,3
    7dc4:	00c000b4 	movhi	r3,2
    7dc8:	18c0b504 	addi	r3,r3,724
    7dcc:	1885883a 	add	r2,r3,r2
    7dd0:	11000017 	ldw	r4,0(r2)
    7dd4:	11400117 	ldw	r5,4(r2)
    7dd8:	900d883a 	mov	r6,r18
    7ddc:	980f883a 	mov	r7,r19
    7de0:	00117c00 	call	117c0 <__gedf2>
    7de4:	0082a70e 	bge	zero,r2,8884 <_dtoa_r+0xd34>
    7de8:	d9000517 	ldw	r4,20(sp)
    7dec:	d8000d15 	stw	zero,52(sp)
    7df0:	213fffc4 	addi	r4,r4,-1
    7df4:	d9000515 	stw	r4,20(sp)
    7df8:	a463c83a 	sub	r17,r20,r17
    7dfc:	8dbfffc4 	addi	r22,r17,-1
    7e00:	b0021916 	blt	r22,zero,8668 <_dtoa_r+0xb18>
    7e04:	d8000815 	stw	zero,32(sp)
    7e08:	d8800517 	ldw	r2,20(sp)
    7e0c:	10020e16 	blt	r2,zero,8648 <_dtoa_r+0xaf8>
    7e10:	b0ad883a 	add	r22,r22,r2
    7e14:	d8800a15 	stw	r2,40(sp)
    7e18:	d8000915 	stw	zero,36(sp)
    7e1c:	d8c00317 	ldw	r3,12(sp)
    7e20:	00800244 	movi	r2,9
    7e24:	10c11a36 	bltu	r2,r3,8290 <_dtoa_r+0x740>
    7e28:	00800144 	movi	r2,5
    7e2c:	10c4fc0e 	bge	r2,r3,9220 <_dtoa_r+0x16d0>
    7e30:	18ffff04 	addi	r3,r3,-4
    7e34:	d8c00315 	stw	r3,12(sp)
    7e38:	0029883a 	mov	r20,zero
    7e3c:	d9800317 	ldw	r6,12(sp)
    7e40:	008000c4 	movi	r2,3
    7e44:	3083bd26 	beq	r6,r2,8d3c <_dtoa_r+0x11ec>
    7e48:	1183670e 	bge	r2,r6,8be8 <_dtoa_r+0x1098>
    7e4c:	d8c00317 	ldw	r3,12(sp)
    7e50:	00800104 	movi	r2,4
    7e54:	1882e726 	beq	r3,r2,89f4 <_dtoa_r+0xea4>
    7e58:	00800144 	movi	r2,5
    7e5c:	1884f21e 	bne	r3,r2,9228 <_dtoa_r+0x16d8>
    7e60:	00800044 	movi	r2,1
    7e64:	d8800b15 	stw	r2,44(sp)
    7e68:	d8c02217 	ldw	r3,136(sp)
    7e6c:	d9000517 	ldw	r4,20(sp)
    7e70:	1907883a 	add	r3,r3,r4
    7e74:	19800044 	addi	r6,r3,1
    7e78:	d8c00c15 	stw	r3,48(sp)
    7e7c:	d9800615 	stw	r6,24(sp)
    7e80:	0183c30e 	bge	zero,r6,8d90 <_dtoa_r+0x1240>
    7e84:	d9800617 	ldw	r6,24(sp)
    7e88:	3023883a 	mov	r17,r6
    7e8c:	80001115 	stw	zero,68(r16)
    7e90:	008005c4 	movi	r2,23
    7e94:	1184f62e 	bgeu	r2,r6,9270 <_dtoa_r+0x1720>
    7e98:	00c00044 	movi	r3,1
    7e9c:	00800104 	movi	r2,4
    7ea0:	1085883a 	add	r2,r2,r2
    7ea4:	11000504 	addi	r4,r2,20
    7ea8:	180b883a 	mov	r5,r3
    7eac:	18c00044 	addi	r3,r3,1
    7eb0:	313ffb2e 	bgeu	r6,r4,7ea0 <__alt_mem_Flash_flash_data+0xf4007ea0>
    7eb4:	81401115 	stw	r5,68(r16)
    7eb8:	8009883a 	mov	r4,r16
    7ebc:	000b1e80 	call	b1e8 <_Balloc>
    7ec0:	d8800715 	stw	r2,28(sp)
    7ec4:	80801015 	stw	r2,64(r16)
    7ec8:	00800384 	movi	r2,14
    7ecc:	1440fd36 	bltu	r2,r17,82c4 <_dtoa_r+0x774>
    7ed0:	a000fc26 	beq	r20,zero,82c4 <_dtoa_r+0x774>
    7ed4:	d8800517 	ldw	r2,20(sp)
    7ed8:	0083b90e 	bge	zero,r2,8dc0 <_dtoa_r+0x1270>
    7edc:	d8c00517 	ldw	r3,20(sp)
    7ee0:	108003cc 	andi	r2,r2,15
    7ee4:	100490fa 	slli	r2,r2,3
    7ee8:	182fd13a 	srai	r23,r3,4
    7eec:	00c000b4 	movhi	r3,2
    7ef0:	18c0b504 	addi	r3,r3,724
    7ef4:	1885883a 	add	r2,r3,r2
    7ef8:	b8c0040c 	andi	r3,r23,16
    7efc:	12c00017 	ldw	r11,0(r2)
    7f00:	12800117 	ldw	r10,4(r2)
    7f04:	18039726 	beq	r3,zero,8d64 <_dtoa_r+0x1214>
    7f08:	008000b4 	movhi	r2,2
    7f0c:	1080ab04 	addi	r2,r2,684
    7f10:	11800817 	ldw	r6,32(r2)
    7f14:	11c00917 	ldw	r7,36(r2)
    7f18:	9009883a 	mov	r4,r18
    7f1c:	980b883a 	mov	r5,r19
    7f20:	da801615 	stw	r10,88(sp)
    7f24:	dac01515 	stw	r11,84(sp)
    7f28:	0010e700 	call	10e70 <__divdf3>
    7f2c:	da801617 	ldw	r10,88(sp)
    7f30:	dac01517 	ldw	r11,84(sp)
    7f34:	bdc003cc 	andi	r23,r23,15
    7f38:	044000c4 	movi	r17,3
    7f3c:	d8800e15 	stw	r2,56(sp)
    7f40:	182b883a 	mov	r21,r3
    7f44:	b8001126 	beq	r23,zero,7f8c <_dtoa_r+0x43c>
    7f48:	050000b4 	movhi	r20,2
    7f4c:	a500ab04 	addi	r20,r20,684
    7f50:	5805883a 	mov	r2,r11
    7f54:	5007883a 	mov	r3,r10
    7f58:	b980004c 	andi	r6,r23,1
    7f5c:	1009883a 	mov	r4,r2
    7f60:	b82fd07a 	srai	r23,r23,1
    7f64:	180b883a 	mov	r5,r3
    7f68:	30000426 	beq	r6,zero,7f7c <_dtoa_r+0x42c>
    7f6c:	a1800017 	ldw	r6,0(r20)
    7f70:	a1c00117 	ldw	r7,4(r20)
    7f74:	8c400044 	addi	r17,r17,1
    7f78:	00119800 	call	11980 <__muldf3>
    7f7c:	a5000204 	addi	r20,r20,8
    7f80:	b83ff51e 	bne	r23,zero,7f58 <__alt_mem_Flash_flash_data+0xf4007f58>
    7f84:	1017883a 	mov	r11,r2
    7f88:	1815883a 	mov	r10,r3
    7f8c:	d9000e17 	ldw	r4,56(sp)
    7f90:	a80b883a 	mov	r5,r21
    7f94:	580d883a 	mov	r6,r11
    7f98:	500f883a 	mov	r7,r10
    7f9c:	0010e700 	call	10e70 <__divdf3>
    7fa0:	1029883a 	mov	r20,r2
    7fa4:	182b883a 	mov	r21,r3
    7fa8:	d9800d17 	ldw	r6,52(sp)
    7fac:	30000626 	beq	r6,zero,7fc8 <_dtoa_r+0x478>
    7fb0:	a009883a 	mov	r4,r20
    7fb4:	a80b883a 	mov	r5,r21
    7fb8:	000d883a 	mov	r6,zero
    7fbc:	01cffc34 	movhi	r7,16368
    7fc0:	00118a00 	call	118a0 <__ledf2>
    7fc4:	10043216 	blt	r2,zero,9090 <_dtoa_r+0x1540>
    7fc8:	8809883a 	mov	r4,r17
    7fcc:	00129fc0 	call	129fc <__floatsidf>
    7fd0:	1009883a 	mov	r4,r2
    7fd4:	180b883a 	mov	r5,r3
    7fd8:	a00d883a 	mov	r6,r20
    7fdc:	a80f883a 	mov	r7,r21
    7fe0:	00119800 	call	11980 <__muldf3>
    7fe4:	000d883a 	mov	r6,zero
    7fe8:	1009883a 	mov	r4,r2
    7fec:	180b883a 	mov	r5,r3
    7ff0:	01d00734 	movhi	r7,16412
    7ff4:	00105d40 	call	105d4 <__adddf3>
    7ff8:	1023883a 	mov	r17,r2
    7ffc:	d9800617 	ldw	r6,24(sp)
    8000:	00bf3034 	movhi	r2,64704
    8004:	1885883a 	add	r2,r3,r2
    8008:	d8800e15 	stw	r2,56(sp)
    800c:	30032e26 	beq	r6,zero,8cc8 <_dtoa_r+0x1178>
    8010:	d8c00517 	ldw	r3,20(sp)
    8014:	da800617 	ldw	r10,24(sp)
    8018:	d8c01215 	stw	r3,72(sp)
    801c:	d9000b17 	ldw	r4,44(sp)
    8020:	2003b026 	beq	r4,zero,8ee4 <_dtoa_r+0x1394>
    8024:	50bfffc4 	addi	r2,r10,-1
    8028:	100490fa 	slli	r2,r2,3
    802c:	00c000b4 	movhi	r3,2
    8030:	18c0b504 	addi	r3,r3,724
    8034:	1885883a 	add	r2,r3,r2
    8038:	11800017 	ldw	r6,0(r2)
    803c:	11c00117 	ldw	r7,4(r2)
    8040:	d8800717 	ldw	r2,28(sp)
    8044:	0009883a 	mov	r4,zero
    8048:	014ff834 	movhi	r5,16352
    804c:	da801615 	stw	r10,88(sp)
    8050:	15c00044 	addi	r23,r2,1
    8054:	0010e700 	call	10e70 <__divdf3>
    8058:	d9c00e17 	ldw	r7,56(sp)
    805c:	880d883a 	mov	r6,r17
    8060:	1009883a 	mov	r4,r2
    8064:	180b883a 	mov	r5,r3
    8068:	00120a40 	call	120a4 <__subdf3>
    806c:	a80b883a 	mov	r5,r21
    8070:	a009883a 	mov	r4,r20
    8074:	d8c01015 	stw	r3,64(sp)
    8078:	d8800e15 	stw	r2,56(sp)
    807c:	00129740 	call	12974 <__fixdfsi>
    8080:	1009883a 	mov	r4,r2
    8084:	d8801715 	stw	r2,92(sp)
    8088:	00129fc0 	call	129fc <__floatsidf>
    808c:	a009883a 	mov	r4,r20
    8090:	a80b883a 	mov	r5,r21
    8094:	100d883a 	mov	r6,r2
    8098:	180f883a 	mov	r7,r3
    809c:	00120a40 	call	120a4 <__subdf3>
    80a0:	da001717 	ldw	r8,92(sp)
    80a4:	1829883a 	mov	r20,r3
    80a8:	d8c00717 	ldw	r3,28(sp)
    80ac:	d9000e17 	ldw	r4,56(sp)
    80b0:	d9401017 	ldw	r5,64(sp)
    80b4:	42000c04 	addi	r8,r8,48
    80b8:	1023883a 	mov	r17,r2
    80bc:	1a000005 	stb	r8,0(r3)
    80c0:	880d883a 	mov	r6,r17
    80c4:	a00f883a 	mov	r7,r20
    80c8:	402b883a 	mov	r21,r8
    80cc:	00117c00 	call	117c0 <__gedf2>
    80d0:	00844516 	blt	zero,r2,91e8 <_dtoa_r+0x1698>
    80d4:	0009883a 	mov	r4,zero
    80d8:	014ffc34 	movhi	r5,16368
    80dc:	880d883a 	mov	r6,r17
    80e0:	a00f883a 	mov	r7,r20
    80e4:	00120a40 	call	120a4 <__subdf3>
    80e8:	d9000e17 	ldw	r4,56(sp)
    80ec:	d9401017 	ldw	r5,64(sp)
    80f0:	100d883a 	mov	r6,r2
    80f4:	180f883a 	mov	r7,r3
    80f8:	00117c00 	call	117c0 <__gedf2>
    80fc:	da801617 	ldw	r10,88(sp)
    8100:	00843616 	blt	zero,r2,91dc <_dtoa_r+0x168c>
    8104:	00800044 	movi	r2,1
    8108:	12806e0e 	bge	r2,r10,82c4 <_dtoa_r+0x774>
    810c:	d9000717 	ldw	r4,28(sp)
    8110:	dd801315 	stw	r22,76(sp)
    8114:	dc001115 	stw	r16,68(sp)
    8118:	2295883a 	add	r10,r4,r10
    811c:	dcc01415 	stw	r19,80(sp)
    8120:	502d883a 	mov	r22,r10
    8124:	dcc01017 	ldw	r19,64(sp)
    8128:	b821883a 	mov	r16,r23
    812c:	dc801015 	stw	r18,64(sp)
    8130:	dc800e17 	ldw	r18,56(sp)
    8134:	00000906 	br	815c <_dtoa_r+0x60c>
    8138:	00120a40 	call	120a4 <__subdf3>
    813c:	1009883a 	mov	r4,r2
    8140:	180b883a 	mov	r5,r3
    8144:	900d883a 	mov	r6,r18
    8148:	980f883a 	mov	r7,r19
    814c:	00118a00 	call	118a0 <__ledf2>
    8150:	10040e16 	blt	r2,zero,918c <_dtoa_r+0x163c>
    8154:	b821883a 	mov	r16,r23
    8158:	bd841026 	beq	r23,r22,919c <_dtoa_r+0x164c>
    815c:	9009883a 	mov	r4,r18
    8160:	980b883a 	mov	r5,r19
    8164:	000d883a 	mov	r6,zero
    8168:	01d00934 	movhi	r7,16420
    816c:	00119800 	call	11980 <__muldf3>
    8170:	000d883a 	mov	r6,zero
    8174:	01d00934 	movhi	r7,16420
    8178:	8809883a 	mov	r4,r17
    817c:	a00b883a 	mov	r5,r20
    8180:	1025883a 	mov	r18,r2
    8184:	1827883a 	mov	r19,r3
    8188:	00119800 	call	11980 <__muldf3>
    818c:	180b883a 	mov	r5,r3
    8190:	1009883a 	mov	r4,r2
    8194:	1823883a 	mov	r17,r3
    8198:	1029883a 	mov	r20,r2
    819c:	00129740 	call	12974 <__fixdfsi>
    81a0:	1009883a 	mov	r4,r2
    81a4:	102b883a 	mov	r21,r2
    81a8:	00129fc0 	call	129fc <__floatsidf>
    81ac:	a009883a 	mov	r4,r20
    81b0:	880b883a 	mov	r5,r17
    81b4:	100d883a 	mov	r6,r2
    81b8:	180f883a 	mov	r7,r3
    81bc:	00120a40 	call	120a4 <__subdf3>
    81c0:	ad400c04 	addi	r21,r21,48
    81c4:	1009883a 	mov	r4,r2
    81c8:	180b883a 	mov	r5,r3
    81cc:	900d883a 	mov	r6,r18
    81d0:	980f883a 	mov	r7,r19
    81d4:	85400005 	stb	r21,0(r16)
    81d8:	1023883a 	mov	r17,r2
    81dc:	1829883a 	mov	r20,r3
    81e0:	00118a00 	call	118a0 <__ledf2>
    81e4:	bdc00044 	addi	r23,r23,1
    81e8:	0009883a 	mov	r4,zero
    81ec:	014ffc34 	movhi	r5,16368
    81f0:	880d883a 	mov	r6,r17
    81f4:	a00f883a 	mov	r7,r20
    81f8:	103fcf0e 	bge	r2,zero,8138 <__alt_mem_Flash_flash_data+0xf4008138>
    81fc:	d9801217 	ldw	r6,72(sp)
    8200:	dc001117 	ldw	r16,68(sp)
    8204:	d9800515 	stw	r6,20(sp)
    8208:	8009883a 	mov	r4,r16
    820c:	e00b883a 	mov	r5,fp
    8210:	000b2900 	call	b290 <_Bfree>
    8214:	d8c00517 	ldw	r3,20(sp)
    8218:	d9002317 	ldw	r4,140(sp)
    821c:	d9802517 	ldw	r6,148(sp)
    8220:	b8000005 	stb	zero,0(r23)
    8224:	18800044 	addi	r2,r3,1
    8228:	20800015 	stw	r2,0(r4)
    822c:	30027226 	beq	r6,zero,8bf8 <_dtoa_r+0x10a8>
    8230:	35c00015 	stw	r23,0(r6)
    8234:	d8800717 	ldw	r2,28(sp)
    8238:	003e7406 	br	7c0c <__alt_mem_Flash_flash_data+0xf4007c0c>
    823c:	00800434 	movhi	r2,16
    8240:	10bfffc4 	addi	r2,r2,-1
    8244:	a8aa703a 	and	r21,r21,r2
    8248:	a83e801e 	bne	r21,zero,7c4c <__alt_mem_Flash_flash_data+0xf4007c4c>
    824c:	008000b4 	movhi	r2,2
    8250:	10809604 	addi	r2,r2,600
    8254:	003e7f06 	br	7c54 <__alt_mem_Flash_flash_data+0xf4007c54>
    8258:	10c00204 	addi	r3,r2,8
    825c:	003e8206 	br	7c68 <__alt_mem_Flash_flash_data+0xf4007c68>
    8260:	01400434 	movhi	r5,16
    8264:	297fffc4 	addi	r5,r5,-1
    8268:	994a703a 	and	r5,r19,r5
    826c:	9009883a 	mov	r4,r18
    8270:	8c7f0044 	addi	r17,r17,-1023
    8274:	294ffc34 	orhi	r5,r5,16368
    8278:	dd000217 	ldw	r20,8(sp)
    827c:	d8000f15 	stw	zero,60(sp)
    8280:	003e9f06 	br	7d00 <__alt_mem_Flash_flash_data+0xf4007d00>
    8284:	008000b4 	movhi	r2,2
    8288:	10808504 	addi	r2,r2,532
    828c:	003e5f06 	br	7c0c <__alt_mem_Flash_flash_data+0xf4007c0c>
    8290:	80001115 	stw	zero,68(r16)
    8294:	8009883a 	mov	r4,r16
    8298:	000b883a 	mov	r5,zero
    829c:	000b1e80 	call	b1e8 <_Balloc>
    82a0:	01bfffc4 	movi	r6,-1
    82a4:	d8800715 	stw	r2,28(sp)
    82a8:	80801015 	stw	r2,64(r16)
    82ac:	00800044 	movi	r2,1
    82b0:	d9800c15 	stw	r6,48(sp)
    82b4:	d8800b15 	stw	r2,44(sp)
    82b8:	d9800615 	stw	r6,24(sp)
    82bc:	d8002215 	stw	zero,136(sp)
    82c0:	d8000315 	stw	zero,12(sp)
    82c4:	d8800117 	ldw	r2,4(sp)
    82c8:	10008e16 	blt	r2,zero,8504 <_dtoa_r+0x9b4>
    82cc:	d9000517 	ldw	r4,20(sp)
    82d0:	00c00384 	movi	r3,14
    82d4:	19008b16 	blt	r3,r4,8504 <_dtoa_r+0x9b4>
    82d8:	200490fa 	slli	r2,r4,3
    82dc:	00c000b4 	movhi	r3,2
    82e0:	d9802217 	ldw	r6,136(sp)
    82e4:	18c0b504 	addi	r3,r3,724
    82e8:	1885883a 	add	r2,r3,r2
    82ec:	14400017 	ldw	r17,0(r2)
    82f0:	15000117 	ldw	r20,4(r2)
    82f4:	3001c716 	blt	r6,zero,8a14 <_dtoa_r+0xec4>
    82f8:	880d883a 	mov	r6,r17
    82fc:	a00f883a 	mov	r7,r20
    8300:	9009883a 	mov	r4,r18
    8304:	980b883a 	mov	r5,r19
    8308:	0010e700 	call	10e70 <__divdf3>
    830c:	180b883a 	mov	r5,r3
    8310:	1009883a 	mov	r4,r2
    8314:	00129740 	call	12974 <__fixdfsi>
    8318:	1009883a 	mov	r4,r2
    831c:	102d883a 	mov	r22,r2
    8320:	00129fc0 	call	129fc <__floatsidf>
    8324:	1009883a 	mov	r4,r2
    8328:	180b883a 	mov	r5,r3
    832c:	880d883a 	mov	r6,r17
    8330:	a00f883a 	mov	r7,r20
    8334:	00119800 	call	11980 <__muldf3>
    8338:	9009883a 	mov	r4,r18
    833c:	980b883a 	mov	r5,r19
    8340:	100d883a 	mov	r6,r2
    8344:	180f883a 	mov	r7,r3
    8348:	00120a40 	call	120a4 <__subdf3>
    834c:	d9000717 	ldw	r4,28(sp)
    8350:	d9800617 	ldw	r6,24(sp)
    8354:	180b883a 	mov	r5,r3
    8358:	b0c00c04 	addi	r3,r22,48
    835c:	20c00005 	stb	r3,0(r4)
    8360:	25c00044 	addi	r23,r4,1
    8364:	01000044 	movi	r4,1
    8368:	1011883a 	mov	r8,r2
    836c:	2807883a 	mov	r3,r5
    8370:	31003d26 	beq	r6,r4,8468 <_dtoa_r+0x918>
    8374:	000d883a 	mov	r6,zero
    8378:	01d00934 	movhi	r7,16420
    837c:	1009883a 	mov	r4,r2
    8380:	00119800 	call	11980 <__muldf3>
    8384:	1009883a 	mov	r4,r2
    8388:	180b883a 	mov	r5,r3
    838c:	000d883a 	mov	r6,zero
    8390:	000f883a 	mov	r7,zero
    8394:	1027883a 	mov	r19,r2
    8398:	182b883a 	mov	r21,r3
    839c:	001173c0 	call	1173c <__eqdf2>
    83a0:	103f9926 	beq	r2,zero,8208 <__alt_mem_Flash_flash_data+0xf4008208>
    83a4:	d8c00617 	ldw	r3,24(sp)
    83a8:	d9000717 	ldw	r4,28(sp)
    83ac:	b825883a 	mov	r18,r23
    83b0:	18bfffc4 	addi	r2,r3,-1
    83b4:	20ad883a 	add	r22,r4,r2
    83b8:	dc000315 	stw	r16,12(sp)
    83bc:	00000a06 	br	83e8 <_dtoa_r+0x898>
    83c0:	00119800 	call	11980 <__muldf3>
    83c4:	1009883a 	mov	r4,r2
    83c8:	180b883a 	mov	r5,r3
    83cc:	000d883a 	mov	r6,zero
    83d0:	000f883a 	mov	r7,zero
    83d4:	1027883a 	mov	r19,r2
    83d8:	182b883a 	mov	r21,r3
    83dc:	b825883a 	mov	r18,r23
    83e0:	001173c0 	call	1173c <__eqdf2>
    83e4:	10022626 	beq	r2,zero,8c80 <_dtoa_r+0x1130>
    83e8:	880d883a 	mov	r6,r17
    83ec:	a00f883a 	mov	r7,r20
    83f0:	9809883a 	mov	r4,r19
    83f4:	a80b883a 	mov	r5,r21
    83f8:	0010e700 	call	10e70 <__divdf3>
    83fc:	180b883a 	mov	r5,r3
    8400:	1009883a 	mov	r4,r2
    8404:	00129740 	call	12974 <__fixdfsi>
    8408:	1009883a 	mov	r4,r2
    840c:	1021883a 	mov	r16,r2
    8410:	00129fc0 	call	129fc <__floatsidf>
    8414:	1009883a 	mov	r4,r2
    8418:	180b883a 	mov	r5,r3
    841c:	880d883a 	mov	r6,r17
    8420:	a00f883a 	mov	r7,r20
    8424:	00119800 	call	11980 <__muldf3>
    8428:	9809883a 	mov	r4,r19
    842c:	a80b883a 	mov	r5,r21
    8430:	100d883a 	mov	r6,r2
    8434:	180f883a 	mov	r7,r3
    8438:	00120a40 	call	120a4 <__subdf3>
    843c:	82000c04 	addi	r8,r16,48
    8440:	92000005 	stb	r8,0(r18)
    8444:	1009883a 	mov	r4,r2
    8448:	180b883a 	mov	r5,r3
    844c:	000d883a 	mov	r6,zero
    8450:	01d00934 	movhi	r7,16420
    8454:	1011883a 	mov	r8,r2
    8458:	bdc00044 	addi	r23,r23,1
    845c:	95bfd81e 	bne	r18,r22,83c0 <__alt_mem_Flash_flash_data+0xf40083c0>
    8460:	802d883a 	mov	r22,r16
    8464:	dc000317 	ldw	r16,12(sp)
    8468:	4009883a 	mov	r4,r8
    846c:	180b883a 	mov	r5,r3
    8470:	400d883a 	mov	r6,r8
    8474:	180f883a 	mov	r7,r3
    8478:	00105d40 	call	105d4 <__adddf3>
    847c:	8809883a 	mov	r4,r17
    8480:	a00b883a 	mov	r5,r20
    8484:	100d883a 	mov	r6,r2
    8488:	180f883a 	mov	r7,r3
    848c:	1027883a 	mov	r19,r2
    8490:	1825883a 	mov	r18,r3
    8494:	00118a00 	call	118a0 <__ledf2>
    8498:	10000816 	blt	r2,zero,84bc <_dtoa_r+0x96c>
    849c:	8809883a 	mov	r4,r17
    84a0:	a00b883a 	mov	r5,r20
    84a4:	980d883a 	mov	r6,r19
    84a8:	900f883a 	mov	r7,r18
    84ac:	001173c0 	call	1173c <__eqdf2>
    84b0:	103f551e 	bne	r2,zero,8208 <__alt_mem_Flash_flash_data+0xf4008208>
    84b4:	b580004c 	andi	r22,r22,1
    84b8:	b03f5326 	beq	r22,zero,8208 <__alt_mem_Flash_flash_data+0xf4008208>
    84bc:	bd7fffc3 	ldbu	r21,-1(r23)
    84c0:	b8bfffc4 	addi	r2,r23,-1
    84c4:	1007883a 	mov	r3,r2
    84c8:	01400e44 	movi	r5,57
    84cc:	d9800717 	ldw	r6,28(sp)
    84d0:	00000506 	br	84e8 <_dtoa_r+0x998>
    84d4:	18ffffc4 	addi	r3,r3,-1
    84d8:	30825e26 	beq	r6,r2,8e54 <_dtoa_r+0x1304>
    84dc:	1d400003 	ldbu	r21,0(r3)
    84e0:	102f883a 	mov	r23,r2
    84e4:	10bfffc4 	addi	r2,r2,-1
    84e8:	a9003fcc 	andi	r4,r21,255
    84ec:	2100201c 	xori	r4,r4,128
    84f0:	213fe004 	addi	r4,r4,-128
    84f4:	217ff726 	beq	r4,r5,84d4 <__alt_mem_Flash_flash_data+0xf40084d4>
    84f8:	aa000044 	addi	r8,r21,1
    84fc:	12000005 	stb	r8,0(r2)
    8500:	003f4106 	br	8208 <__alt_mem_Flash_flash_data+0xf4008208>
    8504:	d8c00b17 	ldw	r3,44(sp)
    8508:	18006726 	beq	r3,zero,86a8 <_dtoa_r+0xb58>
    850c:	d9000317 	ldw	r4,12(sp)
    8510:	00c00044 	movi	r3,1
    8514:	19016a0e 	bge	r3,r4,8ac0 <_dtoa_r+0xf70>
    8518:	d8800617 	ldw	r2,24(sp)
    851c:	d8c00917 	ldw	r3,36(sp)
    8520:	157fffc4 	addi	r21,r2,-1
    8524:	1d420716 	blt	r3,r21,8d44 <_dtoa_r+0x11f4>
    8528:	1d6bc83a 	sub	r21,r3,r21
    852c:	d8800617 	ldw	r2,24(sp)
    8530:	1002c716 	blt	r2,zero,9050 <_dtoa_r+0x1500>
    8534:	dd000817 	ldw	r20,32(sp)
    8538:	d8800617 	ldw	r2,24(sp)
    853c:	d9800817 	ldw	r6,32(sp)
    8540:	8009883a 	mov	r4,r16
    8544:	01400044 	movi	r5,1
    8548:	308d883a 	add	r6,r6,r2
    854c:	d9800815 	stw	r6,32(sp)
    8550:	b0ad883a 	add	r22,r22,r2
    8554:	000b5f40 	call	b5f4 <__i2b>
    8558:	1023883a 	mov	r17,r2
    855c:	a0000826 	beq	r20,zero,8580 <_dtoa_r+0xa30>
    8560:	0580070e 	bge	zero,r22,8580 <_dtoa_r+0xa30>
    8564:	b005883a 	mov	r2,r22
    8568:	a5812016 	blt	r20,r22,89ec <_dtoa_r+0xe9c>
    856c:	d8c00817 	ldw	r3,32(sp)
    8570:	a0a9c83a 	sub	r20,r20,r2
    8574:	b0adc83a 	sub	r22,r22,r2
    8578:	1887c83a 	sub	r3,r3,r2
    857c:	d8c00815 	stw	r3,32(sp)
    8580:	d9000917 	ldw	r4,36(sp)
    8584:	0100140e 	bge	zero,r4,85d8 <_dtoa_r+0xa88>
    8588:	d9800b17 	ldw	r6,44(sp)
    858c:	3001e526 	beq	r6,zero,8d24 <_dtoa_r+0x11d4>
    8590:	05400e0e 	bge	zero,r21,85cc <_dtoa_r+0xa7c>
    8594:	880b883a 	mov	r5,r17
    8598:	8009883a 	mov	r4,r16
    859c:	a80d883a 	mov	r6,r21
    85a0:	000b82c0 	call	b82c <__pow5mult>
    85a4:	e00d883a 	mov	r6,fp
    85a8:	8009883a 	mov	r4,r16
    85ac:	100b883a 	mov	r5,r2
    85b0:	1023883a 	mov	r17,r2
    85b4:	000b6300 	call	b630 <__multiply>
    85b8:	102f883a 	mov	r23,r2
    85bc:	e00b883a 	mov	r5,fp
    85c0:	8009883a 	mov	r4,r16
    85c4:	000b2900 	call	b290 <_Bfree>
    85c8:	b839883a 	mov	fp,r23
    85cc:	d8800917 	ldw	r2,36(sp)
    85d0:	154dc83a 	sub	r6,r2,r21
    85d4:	3001281e 	bne	r6,zero,8a78 <_dtoa_r+0xf28>
    85d8:	05c00044 	movi	r23,1
    85dc:	8009883a 	mov	r4,r16
    85e0:	b80b883a 	mov	r5,r23
    85e4:	000b5f40 	call	b5f4 <__i2b>
    85e8:	d8c00a17 	ldw	r3,40(sp)
    85ec:	102b883a 	mov	r21,r2
    85f0:	00c0310e 	bge	zero,r3,86b8 <_dtoa_r+0xb68>
    85f4:	8009883a 	mov	r4,r16
    85f8:	100b883a 	mov	r5,r2
    85fc:	180d883a 	mov	r6,r3
    8600:	000b82c0 	call	b82c <__pow5mult>
    8604:	d9000317 	ldw	r4,12(sp)
    8608:	102b883a 	mov	r21,r2
    860c:	b9011f0e 	bge	r23,r4,8a8c <_dtoa_r+0xf3c>
    8610:	0027883a 	mov	r19,zero
    8614:	a8800417 	ldw	r2,16(r21)
    8618:	10800104 	addi	r2,r2,4
    861c:	1085883a 	add	r2,r2,r2
    8620:	1085883a 	add	r2,r2,r2
    8624:	a885883a 	add	r2,r21,r2
    8628:	11000017 	ldw	r4,0(r2)
    862c:	000b4dc0 	call	b4dc <__hi0bits>
    8630:	00c00804 	movi	r3,32
    8634:	1885c83a 	sub	r2,r3,r2
    8638:	00002506 	br	86d0 <_dtoa_r+0xb80>
    863c:	01800044 	movi	r6,1
    8640:	d9800d15 	stw	r6,52(sp)
    8644:	003dec06 	br	7df8 <__alt_mem_Flash_flash_data+0xf4007df8>
    8648:	d8c00817 	ldw	r3,32(sp)
    864c:	d9000517 	ldw	r4,20(sp)
    8650:	d8000a15 	stw	zero,40(sp)
    8654:	1907c83a 	sub	r3,r3,r4
    8658:	010dc83a 	sub	r6,zero,r4
    865c:	d8c00815 	stw	r3,32(sp)
    8660:	d9800915 	stw	r6,36(sp)
    8664:	003ded06 	br	7e1c <__alt_mem_Flash_flash_data+0xf4007e1c>
    8668:	05adc83a 	sub	r22,zero,r22
    866c:	dd800815 	stw	r22,32(sp)
    8670:	002d883a 	mov	r22,zero
    8674:	003de406 	br	7e08 <__alt_mem_Flash_flash_data+0xf4007e08>
    8678:	d9000517 	ldw	r4,20(sp)
    867c:	00129fc0 	call	129fc <__floatsidf>
    8680:	1009883a 	mov	r4,r2
    8684:	180b883a 	mov	r5,r3
    8688:	b00d883a 	mov	r6,r22
    868c:	a80f883a 	mov	r7,r21
    8690:	001173c0 	call	1173c <__eqdf2>
    8694:	103dc726 	beq	r2,zero,7db4 <__alt_mem_Flash_flash_data+0xf4007db4>
    8698:	d8800517 	ldw	r2,20(sp)
    869c:	10bfffc4 	addi	r2,r2,-1
    86a0:	d8800515 	stw	r2,20(sp)
    86a4:	003dc306 	br	7db4 <__alt_mem_Flash_flash_data+0xf4007db4>
    86a8:	dd400917 	ldw	r21,36(sp)
    86ac:	dd000817 	ldw	r20,32(sp)
    86b0:	0023883a 	mov	r17,zero
    86b4:	003fa906 	br	855c <__alt_mem_Flash_flash_data+0xf400855c>
    86b8:	d9800317 	ldw	r6,12(sp)
    86bc:	b981670e 	bge	r23,r6,8c5c <_dtoa_r+0x110c>
    86c0:	0027883a 	mov	r19,zero
    86c4:	d8c00a17 	ldw	r3,40(sp)
    86c8:	183fd21e 	bne	r3,zero,8614 <__alt_mem_Flash_flash_data+0xf4008614>
    86cc:	00800044 	movi	r2,1
    86d0:	1585883a 	add	r2,r2,r22
    86d4:	108007cc 	andi	r2,r2,31
    86d8:	10005f26 	beq	r2,zero,8858 <_dtoa_r+0xd08>
    86dc:	00c00804 	movi	r3,32
    86e0:	1887c83a 	sub	r3,r3,r2
    86e4:	01000104 	movi	r4,4
    86e8:	20c2dd0e 	bge	r4,r3,9260 <_dtoa_r+0x1710>
    86ec:	d9000817 	ldw	r4,32(sp)
    86f0:	00c00704 	movi	r3,28
    86f4:	1885c83a 	sub	r2,r3,r2
    86f8:	2089883a 	add	r4,r4,r2
    86fc:	d9000815 	stw	r4,32(sp)
    8700:	a0a9883a 	add	r20,r20,r2
    8704:	b0ad883a 	add	r22,r22,r2
    8708:	d8800817 	ldw	r2,32(sp)
    870c:	0080050e 	bge	zero,r2,8724 <_dtoa_r+0xbd4>
    8710:	e00b883a 	mov	r5,fp
    8714:	8009883a 	mov	r4,r16
    8718:	100d883a 	mov	r6,r2
    871c:	000b96c0 	call	b96c <__lshift>
    8720:	1039883a 	mov	fp,r2
    8724:	0580050e 	bge	zero,r22,873c <_dtoa_r+0xbec>
    8728:	a80b883a 	mov	r5,r21
    872c:	8009883a 	mov	r4,r16
    8730:	b00d883a 	mov	r6,r22
    8734:	000b96c0 	call	b96c <__lshift>
    8738:	102b883a 	mov	r21,r2
    873c:	d8c00d17 	ldw	r3,52(sp)
    8740:	1801161e 	bne	r3,zero,8b9c <_dtoa_r+0x104c>
    8744:	d8c00617 	ldw	r3,24(sp)
    8748:	00c12d0e 	bge	zero,r3,8c00 <_dtoa_r+0x10b0>
    874c:	d8c00b17 	ldw	r3,44(sp)
    8750:	1800571e 	bne	r3,zero,88b0 <_dtoa_r+0xd60>
    8754:	dc800717 	ldw	r18,28(sp)
    8758:	dcc00617 	ldw	r19,24(sp)
    875c:	9029883a 	mov	r20,r18
    8760:	00000206 	br	876c <_dtoa_r+0xc1c>
    8764:	000b2b80 	call	b2b8 <__multadd>
    8768:	1039883a 	mov	fp,r2
    876c:	e009883a 	mov	r4,fp
    8770:	a80b883a 	mov	r5,r21
    8774:	00079500 	call	7950 <quorem>
    8778:	10800c04 	addi	r2,r2,48
    877c:	90800005 	stb	r2,0(r18)
    8780:	94800044 	addi	r18,r18,1
    8784:	9507c83a 	sub	r3,r18,r20
    8788:	8009883a 	mov	r4,r16
    878c:	e00b883a 	mov	r5,fp
    8790:	01800284 	movi	r6,10
    8794:	000f883a 	mov	r7,zero
    8798:	1cfff216 	blt	r3,r19,8764 <__alt_mem_Flash_flash_data+0xf4008764>
    879c:	1011883a 	mov	r8,r2
    87a0:	d8800617 	ldw	r2,24(sp)
    87a4:	00822e0e 	bge	zero,r2,9060 <_dtoa_r+0x1510>
    87a8:	d9000717 	ldw	r4,28(sp)
    87ac:	0025883a 	mov	r18,zero
    87b0:	20af883a 	add	r23,r4,r2
    87b4:	e00b883a 	mov	r5,fp
    87b8:	01800044 	movi	r6,1
    87bc:	8009883a 	mov	r4,r16
    87c0:	da001715 	stw	r8,92(sp)
    87c4:	000b96c0 	call	b96c <__lshift>
    87c8:	1009883a 	mov	r4,r2
    87cc:	a80b883a 	mov	r5,r21
    87d0:	1039883a 	mov	fp,r2
    87d4:	000babc0 	call	babc <__mcmp>
    87d8:	da001717 	ldw	r8,92(sp)
    87dc:	00816e0e 	bge	zero,r2,8d98 <_dtoa_r+0x1248>
    87e0:	b93fffc3 	ldbu	r4,-1(r23)
    87e4:	b8bfffc4 	addi	r2,r23,-1
    87e8:	1007883a 	mov	r3,r2
    87ec:	01800e44 	movi	r6,57
    87f0:	d9c00717 	ldw	r7,28(sp)
    87f4:	00000506 	br	880c <_dtoa_r+0xcbc>
    87f8:	18ffffc4 	addi	r3,r3,-1
    87fc:	38811926 	beq	r7,r2,8c64 <_dtoa_r+0x1114>
    8800:	19000003 	ldbu	r4,0(r3)
    8804:	102f883a 	mov	r23,r2
    8808:	10bfffc4 	addi	r2,r2,-1
    880c:	21403fcc 	andi	r5,r4,255
    8810:	2940201c 	xori	r5,r5,128
    8814:	297fe004 	addi	r5,r5,-128
    8818:	29bff726 	beq	r5,r6,87f8 <__alt_mem_Flash_flash_data+0xf40087f8>
    881c:	21000044 	addi	r4,r4,1
    8820:	11000005 	stb	r4,0(r2)
    8824:	8009883a 	mov	r4,r16
    8828:	a80b883a 	mov	r5,r21
    882c:	000b2900 	call	b290 <_Bfree>
    8830:	883e7526 	beq	r17,zero,8208 <__alt_mem_Flash_flash_data+0xf4008208>
    8834:	90000426 	beq	r18,zero,8848 <_dtoa_r+0xcf8>
    8838:	94400326 	beq	r18,r17,8848 <_dtoa_r+0xcf8>
    883c:	8009883a 	mov	r4,r16
    8840:	900b883a 	mov	r5,r18
    8844:	000b2900 	call	b290 <_Bfree>
    8848:	8009883a 	mov	r4,r16
    884c:	880b883a 	mov	r5,r17
    8850:	000b2900 	call	b290 <_Bfree>
    8854:	003e6c06 	br	8208 <__alt_mem_Flash_flash_data+0xf4008208>
    8858:	00800704 	movi	r2,28
    885c:	d9800817 	ldw	r6,32(sp)
    8860:	a0a9883a 	add	r20,r20,r2
    8864:	b0ad883a 	add	r22,r22,r2
    8868:	308d883a 	add	r6,r6,r2
    886c:	d9800815 	stw	r6,32(sp)
    8870:	003fa506 	br	8708 <__alt_mem_Flash_flash_data+0xf4008708>
    8874:	013efb84 	movi	r4,-1042
    8878:	246bc83a 	sub	r21,r4,r17
    887c:	9548983a 	sll	r4,r18,r21
    8880:	003d1806 	br	7ce4 <__alt_mem_Flash_flash_data+0xf4007ce4>
    8884:	d8000d15 	stw	zero,52(sp)
    8888:	003d5b06 	br	7df8 <__alt_mem_Flash_flash_data+0xf4007df8>
    888c:	880b883a 	mov	r5,r17
    8890:	8009883a 	mov	r4,r16
    8894:	01800284 	movi	r6,10
    8898:	000f883a 	mov	r7,zero
    889c:	000b2b80 	call	b2b8 <__multadd>
    88a0:	1023883a 	mov	r17,r2
    88a4:	d8800c17 	ldw	r2,48(sp)
    88a8:	0082550e 	bge	zero,r2,9200 <_dtoa_r+0x16b0>
    88ac:	d8800615 	stw	r2,24(sp)
    88b0:	0500050e 	bge	zero,r20,88c8 <_dtoa_r+0xd78>
    88b4:	880b883a 	mov	r5,r17
    88b8:	8009883a 	mov	r4,r16
    88bc:	a00d883a 	mov	r6,r20
    88c0:	000b96c0 	call	b96c <__lshift>
    88c4:	1023883a 	mov	r17,r2
    88c8:	98016a1e 	bne	r19,zero,8e74 <_dtoa_r+0x1324>
    88cc:	8829883a 	mov	r20,r17
    88d0:	d9000617 	ldw	r4,24(sp)
    88d4:	dcc00717 	ldw	r19,28(sp)
    88d8:	9480004c 	andi	r18,r18,1
    88dc:	20bfffc4 	addi	r2,r4,-1
    88e0:	9885883a 	add	r2,r19,r2
    88e4:	d8800415 	stw	r2,16(sp)
    88e8:	dc800615 	stw	r18,24(sp)
    88ec:	e009883a 	mov	r4,fp
    88f0:	a80b883a 	mov	r5,r21
    88f4:	00079500 	call	7950 <quorem>
    88f8:	e009883a 	mov	r4,fp
    88fc:	880b883a 	mov	r5,r17
    8900:	102f883a 	mov	r23,r2
    8904:	000babc0 	call	babc <__mcmp>
    8908:	8009883a 	mov	r4,r16
    890c:	a80b883a 	mov	r5,r21
    8910:	a00d883a 	mov	r6,r20
    8914:	102d883a 	mov	r22,r2
    8918:	000bb1c0 	call	bb1c <__mdiff>
    891c:	1007883a 	mov	r3,r2
    8920:	10800317 	ldw	r2,12(r2)
    8924:	bc800c04 	addi	r18,r23,48
    8928:	1000971e 	bne	r2,zero,8b88 <_dtoa_r+0x1038>
    892c:	180b883a 	mov	r5,r3
    8930:	e009883a 	mov	r4,fp
    8934:	d8c01515 	stw	r3,84(sp)
    8938:	000babc0 	call	babc <__mcmp>
    893c:	d8c01517 	ldw	r3,84(sp)
    8940:	8009883a 	mov	r4,r16
    8944:	d8801515 	stw	r2,84(sp)
    8948:	180b883a 	mov	r5,r3
    894c:	000b2900 	call	b290 <_Bfree>
    8950:	d8801517 	ldw	r2,84(sp)
    8954:	1000041e 	bne	r2,zero,8968 <_dtoa_r+0xe18>
    8958:	d9800317 	ldw	r6,12(sp)
    895c:	3000021e 	bne	r6,zero,8968 <_dtoa_r+0xe18>
    8960:	d8c00617 	ldw	r3,24(sp)
    8964:	18007626 	beq	r3,zero,8b40 <_dtoa_r+0xff0>
    8968:	b0005b16 	blt	r22,zero,8ad8 <_dtoa_r+0xf88>
    896c:	b000041e 	bne	r22,zero,8980 <_dtoa_r+0xe30>
    8970:	d9000317 	ldw	r4,12(sp)
    8974:	2000021e 	bne	r4,zero,8980 <_dtoa_r+0xe30>
    8978:	d8c00617 	ldw	r3,24(sp)
    897c:	18005626 	beq	r3,zero,8ad8 <_dtoa_r+0xf88>
    8980:	00814d16 	blt	zero,r2,8eb8 <_dtoa_r+0x1368>
    8984:	d8c00417 	ldw	r3,16(sp)
    8988:	9d800044 	addi	r22,r19,1
    898c:	9c800005 	stb	r18,0(r19)
    8990:	b02f883a 	mov	r23,r22
    8994:	98c14c26 	beq	r19,r3,8ec8 <_dtoa_r+0x1378>
    8998:	e00b883a 	mov	r5,fp
    899c:	8009883a 	mov	r4,r16
    89a0:	01800284 	movi	r6,10
    89a4:	000f883a 	mov	r7,zero
    89a8:	000b2b80 	call	b2b8 <__multadd>
    89ac:	1039883a 	mov	fp,r2
    89b0:	8d006d26 	beq	r17,r20,8b68 <_dtoa_r+0x1018>
    89b4:	880b883a 	mov	r5,r17
    89b8:	01800284 	movi	r6,10
    89bc:	000f883a 	mov	r7,zero
    89c0:	8009883a 	mov	r4,r16
    89c4:	000b2b80 	call	b2b8 <__multadd>
    89c8:	a00b883a 	mov	r5,r20
    89cc:	8009883a 	mov	r4,r16
    89d0:	01800284 	movi	r6,10
    89d4:	000f883a 	mov	r7,zero
    89d8:	1023883a 	mov	r17,r2
    89dc:	000b2b80 	call	b2b8 <__multadd>
    89e0:	1029883a 	mov	r20,r2
    89e4:	b027883a 	mov	r19,r22
    89e8:	003fc006 	br	88ec <__alt_mem_Flash_flash_data+0xf40088ec>
    89ec:	a005883a 	mov	r2,r20
    89f0:	003ede06 	br	856c <__alt_mem_Flash_flash_data+0xf400856c>
    89f4:	01000044 	movi	r4,1
    89f8:	d9000b15 	stw	r4,44(sp)
    89fc:	d9802217 	ldw	r6,136(sp)
    8a00:	0180dc0e 	bge	zero,r6,8d74 <_dtoa_r+0x1224>
    8a04:	3023883a 	mov	r17,r6
    8a08:	d9800c15 	stw	r6,48(sp)
    8a0c:	d9800615 	stw	r6,24(sp)
    8a10:	003d1e06 	br	7e8c <__alt_mem_Flash_flash_data+0xf4007e8c>
    8a14:	d8800617 	ldw	r2,24(sp)
    8a18:	00be3716 	blt	zero,r2,82f8 <__alt_mem_Flash_flash_data+0xf40082f8>
    8a1c:	1000be1e 	bne	r2,zero,8d18 <_dtoa_r+0x11c8>
    8a20:	8809883a 	mov	r4,r17
    8a24:	a00b883a 	mov	r5,r20
    8a28:	000d883a 	mov	r6,zero
    8a2c:	01d00534 	movhi	r7,16404
    8a30:	00119800 	call	11980 <__muldf3>
    8a34:	1009883a 	mov	r4,r2
    8a38:	180b883a 	mov	r5,r3
    8a3c:	900d883a 	mov	r6,r18
    8a40:	980f883a 	mov	r7,r19
    8a44:	00117c00 	call	117c0 <__gedf2>
    8a48:	002b883a 	mov	r21,zero
    8a4c:	0023883a 	mov	r17,zero
    8a50:	10007a16 	blt	r2,zero,8c3c <_dtoa_r+0x10ec>
    8a54:	d9002217 	ldw	r4,136(sp)
    8a58:	ddc00717 	ldw	r23,28(sp)
    8a5c:	0108303a 	nor	r4,zero,r4
    8a60:	d9000515 	stw	r4,20(sp)
    8a64:	8009883a 	mov	r4,r16
    8a68:	a80b883a 	mov	r5,r21
    8a6c:	000b2900 	call	b290 <_Bfree>
    8a70:	883f751e 	bne	r17,zero,8848 <__alt_mem_Flash_flash_data+0xf4008848>
    8a74:	003de406 	br	8208 <__alt_mem_Flash_flash_data+0xf4008208>
    8a78:	e00b883a 	mov	r5,fp
    8a7c:	8009883a 	mov	r4,r16
    8a80:	000b82c0 	call	b82c <__pow5mult>
    8a84:	1039883a 	mov	fp,r2
    8a88:	003ed306 	br	85d8 <__alt_mem_Flash_flash_data+0xf40085d8>
    8a8c:	903ee01e 	bne	r18,zero,8610 <__alt_mem_Flash_flash_data+0xf4008610>
    8a90:	00800434 	movhi	r2,16
    8a94:	10bfffc4 	addi	r2,r2,-1
    8a98:	9884703a 	and	r2,r19,r2
    8a9c:	103f081e 	bne	r2,zero,86c0 <__alt_mem_Flash_flash_data+0xf40086c0>
    8aa0:	9cdffc2c 	andhi	r19,r19,32752
    8aa4:	983f0626 	beq	r19,zero,86c0 <__alt_mem_Flash_flash_data+0xf40086c0>
    8aa8:	d8800817 	ldw	r2,32(sp)
    8aac:	b5800044 	addi	r22,r22,1
    8ab0:	04c00044 	movi	r19,1
    8ab4:	10800044 	addi	r2,r2,1
    8ab8:	d8800815 	stw	r2,32(sp)
    8abc:	003f0106 	br	86c4 <__alt_mem_Flash_flash_data+0xf40086c4>
    8ac0:	d9800f17 	ldw	r6,60(sp)
    8ac4:	30016826 	beq	r6,zero,9068 <_dtoa_r+0x1518>
    8ac8:	10810cc4 	addi	r2,r2,1075
    8acc:	dd400917 	ldw	r21,36(sp)
    8ad0:	dd000817 	ldw	r20,32(sp)
    8ad4:	003e9906 	br	853c <__alt_mem_Flash_flash_data+0xf400853c>
    8ad8:	9011883a 	mov	r8,r18
    8adc:	4007883a 	mov	r3,r8
    8ae0:	e02d883a 	mov	r22,fp
    8ae4:	0080100e 	bge	zero,r2,8b28 <_dtoa_r+0xfd8>
    8ae8:	01800044 	movi	r6,1
    8aec:	8009883a 	mov	r4,r16
    8af0:	e00b883a 	mov	r5,fp
    8af4:	da001515 	stw	r8,84(sp)
    8af8:	da001715 	stw	r8,92(sp)
    8afc:	000b96c0 	call	b96c <__lshift>
    8b00:	1009883a 	mov	r4,r2
    8b04:	a80b883a 	mov	r5,r21
    8b08:	102d883a 	mov	r22,r2
    8b0c:	000babc0 	call	babc <__mcmp>
    8b10:	d8c01517 	ldw	r3,84(sp)
    8b14:	da001717 	ldw	r8,92(sp)
    8b18:	0081a50e 	bge	zero,r2,91b0 <_dtoa_r+0x1660>
    8b1c:	00800e44 	movi	r2,57
    8b20:	40817b26 	beq	r8,r2,9110 <_dtoa_r+0x15c0>
    8b24:	40c00044 	addi	r3,r8,1
    8b28:	8825883a 	mov	r18,r17
    8b2c:	9dc00044 	addi	r23,r19,1
    8b30:	98c00005 	stb	r3,0(r19)
    8b34:	a023883a 	mov	r17,r20
    8b38:	b039883a 	mov	fp,r22
    8b3c:	003f3906 	br	8824 <__alt_mem_Flash_flash_data+0xf4008824>
    8b40:	00800e44 	movi	r2,57
    8b44:	9011883a 	mov	r8,r18
    8b48:	90817226 	beq	r18,r2,9114 <_dtoa_r+0x15c4>
    8b4c:	0580010e 	bge	zero,r22,8b54 <_dtoa_r+0x1004>
    8b50:	ba000c44 	addi	r8,r23,49
    8b54:	8825883a 	mov	r18,r17
    8b58:	9dc00044 	addi	r23,r19,1
    8b5c:	9a000005 	stb	r8,0(r19)
    8b60:	a023883a 	mov	r17,r20
    8b64:	003f2f06 	br	8824 <__alt_mem_Flash_flash_data+0xf4008824>
    8b68:	880b883a 	mov	r5,r17
    8b6c:	8009883a 	mov	r4,r16
    8b70:	01800284 	movi	r6,10
    8b74:	000f883a 	mov	r7,zero
    8b78:	000b2b80 	call	b2b8 <__multadd>
    8b7c:	1023883a 	mov	r17,r2
    8b80:	1029883a 	mov	r20,r2
    8b84:	003f9706 	br	89e4 <__alt_mem_Flash_flash_data+0xf40089e4>
    8b88:	8009883a 	mov	r4,r16
    8b8c:	180b883a 	mov	r5,r3
    8b90:	000b2900 	call	b290 <_Bfree>
    8b94:	00800044 	movi	r2,1
    8b98:	003f7306 	br	8968 <__alt_mem_Flash_flash_data+0xf4008968>
    8b9c:	e009883a 	mov	r4,fp
    8ba0:	a80b883a 	mov	r5,r21
    8ba4:	000babc0 	call	babc <__mcmp>
    8ba8:	103ee60e 	bge	r2,zero,8744 <__alt_mem_Flash_flash_data+0xf4008744>
    8bac:	8009883a 	mov	r4,r16
    8bb0:	e00b883a 	mov	r5,fp
    8bb4:	01800284 	movi	r6,10
    8bb8:	000f883a 	mov	r7,zero
    8bbc:	000b2b80 	call	b2b8 <__multadd>
    8bc0:	d9000517 	ldw	r4,20(sp)
    8bc4:	d9800b17 	ldw	r6,44(sp)
    8bc8:	1039883a 	mov	fp,r2
    8bcc:	213fffc4 	addi	r4,r4,-1
    8bd0:	d9000515 	stw	r4,20(sp)
    8bd4:	303f2d1e 	bne	r6,zero,888c <__alt_mem_Flash_flash_data+0xf400888c>
    8bd8:	d9000c17 	ldw	r4,48(sp)
    8bdc:	0101780e 	bge	zero,r4,91c0 <_dtoa_r+0x1670>
    8be0:	d9000615 	stw	r4,24(sp)
    8be4:	003edb06 	br	8754 <__alt_mem_Flash_flash_data+0xf4008754>
    8be8:	00800084 	movi	r2,2
    8bec:	30818e1e 	bne	r6,r2,9228 <_dtoa_r+0x16d8>
    8bf0:	d8000b15 	stw	zero,44(sp)
    8bf4:	003f8106 	br	89fc <__alt_mem_Flash_flash_data+0xf40089fc>
    8bf8:	d8800717 	ldw	r2,28(sp)
    8bfc:	003c0306 	br	7c0c <__alt_mem_Flash_flash_data+0xf4007c0c>
    8c00:	d9000317 	ldw	r4,12(sp)
    8c04:	00800084 	movi	r2,2
    8c08:	113ed00e 	bge	r2,r4,874c <__alt_mem_Flash_flash_data+0xf400874c>
    8c0c:	d8c00617 	ldw	r3,24(sp)
    8c10:	183f901e 	bne	r3,zero,8a54 <__alt_mem_Flash_flash_data+0xf4008a54>
    8c14:	a80b883a 	mov	r5,r21
    8c18:	8009883a 	mov	r4,r16
    8c1c:	01800144 	movi	r6,5
    8c20:	000f883a 	mov	r7,zero
    8c24:	000b2b80 	call	b2b8 <__multadd>
    8c28:	e009883a 	mov	r4,fp
    8c2c:	100b883a 	mov	r5,r2
    8c30:	102b883a 	mov	r21,r2
    8c34:	000babc0 	call	babc <__mcmp>
    8c38:	00bf860e 	bge	zero,r2,8a54 <__alt_mem_Flash_flash_data+0xf4008a54>
    8c3c:	d9800717 	ldw	r6,28(sp)
    8c40:	00800c44 	movi	r2,49
    8c44:	30800005 	stb	r2,0(r6)
    8c48:	d8800517 	ldw	r2,20(sp)
    8c4c:	35c00044 	addi	r23,r6,1
    8c50:	10800044 	addi	r2,r2,1
    8c54:	d8800515 	stw	r2,20(sp)
    8c58:	003f8206 	br	8a64 <__alt_mem_Flash_flash_data+0xf4008a64>
    8c5c:	903e981e 	bne	r18,zero,86c0 <__alt_mem_Flash_flash_data+0xf40086c0>
    8c60:	003f8b06 	br	8a90 <__alt_mem_Flash_flash_data+0xf4008a90>
    8c64:	d9800517 	ldw	r6,20(sp)
    8c68:	d8c00717 	ldw	r3,28(sp)
    8c6c:	00800c44 	movi	r2,49
    8c70:	31800044 	addi	r6,r6,1
    8c74:	d9800515 	stw	r6,20(sp)
    8c78:	18800005 	stb	r2,0(r3)
    8c7c:	003ee906 	br	8824 <__alt_mem_Flash_flash_data+0xf4008824>
    8c80:	dc000317 	ldw	r16,12(sp)
    8c84:	003d6006 	br	8208 <__alt_mem_Flash_flash_data+0xf4008208>
    8c88:	8809883a 	mov	r4,r17
    8c8c:	00129fc0 	call	129fc <__floatsidf>
    8c90:	a009883a 	mov	r4,r20
    8c94:	a80b883a 	mov	r5,r21
    8c98:	100d883a 	mov	r6,r2
    8c9c:	180f883a 	mov	r7,r3
    8ca0:	00119800 	call	11980 <__muldf3>
    8ca4:	1009883a 	mov	r4,r2
    8ca8:	180b883a 	mov	r5,r3
    8cac:	000d883a 	mov	r6,zero
    8cb0:	01d00734 	movhi	r7,16412
    8cb4:	00105d40 	call	105d4 <__adddf3>
    8cb8:	1023883a 	mov	r17,r2
    8cbc:	00bf3034 	movhi	r2,64704
    8cc0:	1885883a 	add	r2,r3,r2
    8cc4:	d8800e15 	stw	r2,56(sp)
    8cc8:	a009883a 	mov	r4,r20
    8ccc:	a80b883a 	mov	r5,r21
    8cd0:	000d883a 	mov	r6,zero
    8cd4:	01d00534 	movhi	r7,16404
    8cd8:	00120a40 	call	120a4 <__subdf3>
    8cdc:	d9c00e17 	ldw	r7,56(sp)
    8ce0:	1009883a 	mov	r4,r2
    8ce4:	180b883a 	mov	r5,r3
    8ce8:	880d883a 	mov	r6,r17
    8cec:	102b883a 	mov	r21,r2
    8cf0:	1829883a 	mov	r20,r3
    8cf4:	00117c00 	call	117c0 <__gedf2>
    8cf8:	00807716 	blt	zero,r2,8ed8 <_dtoa_r+0x1388>
    8cfc:	d8800e17 	ldw	r2,56(sp)
    8d00:	a809883a 	mov	r4,r21
    8d04:	a00b883a 	mov	r5,r20
    8d08:	11e0003c 	xorhi	r7,r2,32768
    8d0c:	880d883a 	mov	r6,r17
    8d10:	00118a00 	call	118a0 <__ledf2>
    8d14:	103d6b0e 	bge	r2,zero,82c4 <__alt_mem_Flash_flash_data+0xf40082c4>
    8d18:	002b883a 	mov	r21,zero
    8d1c:	0023883a 	mov	r17,zero
    8d20:	003f4c06 	br	8a54 <__alt_mem_Flash_flash_data+0xf4008a54>
    8d24:	d9800917 	ldw	r6,36(sp)
    8d28:	e00b883a 	mov	r5,fp
    8d2c:	8009883a 	mov	r4,r16
    8d30:	000b82c0 	call	b82c <__pow5mult>
    8d34:	1039883a 	mov	fp,r2
    8d38:	003e2706 	br	85d8 <__alt_mem_Flash_flash_data+0xf40085d8>
    8d3c:	d8000b15 	stw	zero,44(sp)
    8d40:	003c4906 	br	7e68 <__alt_mem_Flash_flash_data+0xf4007e68>
    8d44:	d9000917 	ldw	r4,36(sp)
    8d48:	d9800a17 	ldw	r6,40(sp)
    8d4c:	dd400915 	stw	r21,36(sp)
    8d50:	a905c83a 	sub	r2,r21,r4
    8d54:	308d883a 	add	r6,r6,r2
    8d58:	d9800a15 	stw	r6,40(sp)
    8d5c:	002b883a 	mov	r21,zero
    8d60:	003df206 	br	852c <__alt_mem_Flash_flash_data+0xf400852c>
    8d64:	dc800e15 	stw	r18,56(sp)
    8d68:	982b883a 	mov	r21,r19
    8d6c:	04400084 	movi	r17,2
    8d70:	003c7406 	br	7f44 <__alt_mem_Flash_flash_data+0xf4007f44>
    8d74:	04400044 	movi	r17,1
    8d78:	dc400c15 	stw	r17,48(sp)
    8d7c:	dc400615 	stw	r17,24(sp)
    8d80:	dc402215 	stw	r17,136(sp)
    8d84:	80001115 	stw	zero,68(r16)
    8d88:	000b883a 	mov	r5,zero
    8d8c:	003c4a06 	br	7eb8 <__alt_mem_Flash_flash_data+0xf4007eb8>
    8d90:	3023883a 	mov	r17,r6
    8d94:	003ffb06 	br	8d84 <__alt_mem_Flash_flash_data+0xf4008d84>
    8d98:	1000021e 	bne	r2,zero,8da4 <_dtoa_r+0x1254>
    8d9c:	4200004c 	andi	r8,r8,1
    8da0:	403e8f1e 	bne	r8,zero,87e0 <__alt_mem_Flash_flash_data+0xf40087e0>
    8da4:	01000c04 	movi	r4,48
    8da8:	00000106 	br	8db0 <_dtoa_r+0x1260>
    8dac:	102f883a 	mov	r23,r2
    8db0:	b8bfffc4 	addi	r2,r23,-1
    8db4:	10c00007 	ldb	r3,0(r2)
    8db8:	193ffc26 	beq	r3,r4,8dac <__alt_mem_Flash_flash_data+0xf4008dac>
    8dbc:	003e9906 	br	8824 <__alt_mem_Flash_flash_data+0xf4008824>
    8dc0:	d9000517 	ldw	r4,20(sp)
    8dc4:	012fc83a 	sub	r23,zero,r4
    8dc8:	b800ad26 	beq	r23,zero,9080 <_dtoa_r+0x1530>
    8dcc:	b88003cc 	andi	r2,r23,15
    8dd0:	100490fa 	slli	r2,r2,3
    8dd4:	00c000b4 	movhi	r3,2
    8dd8:	18c0b504 	addi	r3,r3,724
    8ddc:	1885883a 	add	r2,r3,r2
    8de0:	11800017 	ldw	r6,0(r2)
    8de4:	11c00117 	ldw	r7,4(r2)
    8de8:	b82fd13a 	srai	r23,r23,4
    8dec:	9009883a 	mov	r4,r18
    8df0:	980b883a 	mov	r5,r19
    8df4:	00119800 	call	11980 <__muldf3>
    8df8:	1029883a 	mov	r20,r2
    8dfc:	182b883a 	mov	r21,r3
    8e00:	b800f426 	beq	r23,zero,91d4 <_dtoa_r+0x1684>
    8e04:	020000b4 	movhi	r8,2
    8e08:	4200ab04 	addi	r8,r8,684
    8e0c:	8029883a 	mov	r20,r16
    8e10:	04400084 	movi	r17,2
    8e14:	4021883a 	mov	r16,r8
    8e18:	b980004c 	andi	r6,r23,1
    8e1c:	1009883a 	mov	r4,r2
    8e20:	b82fd07a 	srai	r23,r23,1
    8e24:	180b883a 	mov	r5,r3
    8e28:	30000426 	beq	r6,zero,8e3c <_dtoa_r+0x12ec>
    8e2c:	81800017 	ldw	r6,0(r16)
    8e30:	81c00117 	ldw	r7,4(r16)
    8e34:	8c400044 	addi	r17,r17,1
    8e38:	00119800 	call	11980 <__muldf3>
    8e3c:	84000204 	addi	r16,r16,8
    8e40:	b83ff51e 	bne	r23,zero,8e18 <__alt_mem_Flash_flash_data+0xf4008e18>
    8e44:	a021883a 	mov	r16,r20
    8e48:	182b883a 	mov	r21,r3
    8e4c:	1029883a 	mov	r20,r2
    8e50:	003c5506 	br	7fa8 <__alt_mem_Flash_flash_data+0xf4007fa8>
    8e54:	d9800517 	ldw	r6,20(sp)
    8e58:	d9000717 	ldw	r4,28(sp)
    8e5c:	00c00c04 	movi	r3,48
    8e60:	31800044 	addi	r6,r6,1
    8e64:	d9800515 	stw	r6,20(sp)
    8e68:	20c00005 	stb	r3,0(r4)
    8e6c:	02000c44 	movi	r8,49
    8e70:	003da206 	br	84fc <__alt_mem_Flash_flash_data+0xf40084fc>
    8e74:	89400117 	ldw	r5,4(r17)
    8e78:	8009883a 	mov	r4,r16
    8e7c:	000b1e80 	call	b1e8 <_Balloc>
    8e80:	89800417 	ldw	r6,16(r17)
    8e84:	11000304 	addi	r4,r2,12
    8e88:	89400304 	addi	r5,r17,12
    8e8c:	31800084 	addi	r6,r6,2
    8e90:	318d883a 	add	r6,r6,r6
    8e94:	318d883a 	add	r6,r6,r6
    8e98:	1027883a 	mov	r19,r2
    8e9c:	000ae300 	call	ae30 <memcpy>
    8ea0:	8009883a 	mov	r4,r16
    8ea4:	980b883a 	mov	r5,r19
    8ea8:	01800044 	movi	r6,1
    8eac:	000b96c0 	call	b96c <__lshift>
    8eb0:	1029883a 	mov	r20,r2
    8eb4:	003e8606 	br	88d0 <__alt_mem_Flash_flash_data+0xf40088d0>
    8eb8:	00800e44 	movi	r2,57
    8ebc:	90809526 	beq	r18,r2,9114 <_dtoa_r+0x15c4>
    8ec0:	92000044 	addi	r8,r18,1
    8ec4:	003f2306 	br	8b54 <__alt_mem_Flash_flash_data+0xf4008b54>
    8ec8:	9011883a 	mov	r8,r18
    8ecc:	8825883a 	mov	r18,r17
    8ed0:	a023883a 	mov	r17,r20
    8ed4:	003e3706 	br	87b4 <__alt_mem_Flash_flash_data+0xf40087b4>
    8ed8:	002b883a 	mov	r21,zero
    8edc:	0023883a 	mov	r17,zero
    8ee0:	003f5606 	br	8c3c <__alt_mem_Flash_flash_data+0xf4008c3c>
    8ee4:	51bfffc4 	addi	r6,r10,-1
    8ee8:	300490fa 	slli	r2,r6,3
    8eec:	00c000b4 	movhi	r3,2
    8ef0:	18c0b504 	addi	r3,r3,724
    8ef4:	1885883a 	add	r2,r3,r2
    8ef8:	d9c00e17 	ldw	r7,56(sp)
    8efc:	11000017 	ldw	r4,0(r2)
    8f00:	11400117 	ldw	r5,4(r2)
    8f04:	d8800717 	ldw	r2,28(sp)
    8f08:	d9801015 	stw	r6,64(sp)
    8f0c:	880d883a 	mov	r6,r17
    8f10:	da801615 	stw	r10,88(sp)
    8f14:	15c00044 	addi	r23,r2,1
    8f18:	00119800 	call	11980 <__muldf3>
    8f1c:	a80b883a 	mov	r5,r21
    8f20:	a009883a 	mov	r4,r20
    8f24:	d8c01115 	stw	r3,68(sp)
    8f28:	d8800e15 	stw	r2,56(sp)
    8f2c:	00129740 	call	12974 <__fixdfsi>
    8f30:	1009883a 	mov	r4,r2
    8f34:	1023883a 	mov	r17,r2
    8f38:	00129fc0 	call	129fc <__floatsidf>
    8f3c:	a009883a 	mov	r4,r20
    8f40:	a80b883a 	mov	r5,r21
    8f44:	100d883a 	mov	r6,r2
    8f48:	180f883a 	mov	r7,r3
    8f4c:	00120a40 	call	120a4 <__subdf3>
    8f50:	1813883a 	mov	r9,r3
    8f54:	d8c00717 	ldw	r3,28(sp)
    8f58:	8c400c04 	addi	r17,r17,48
    8f5c:	1011883a 	mov	r8,r2
    8f60:	1c400005 	stb	r17,0(r3)
    8f64:	da801617 	ldw	r10,88(sp)
    8f68:	00800044 	movi	r2,1
    8f6c:	50802326 	beq	r10,r2,8ffc <_dtoa_r+0x14ac>
    8f70:	d8800717 	ldw	r2,28(sp)
    8f74:	b82b883a 	mov	r21,r23
    8f78:	dc001315 	stw	r16,76(sp)
    8f7c:	12a9883a 	add	r20,r2,r10
    8f80:	4807883a 	mov	r3,r9
    8f84:	4005883a 	mov	r2,r8
    8f88:	dc801415 	stw	r18,80(sp)
    8f8c:	000d883a 	mov	r6,zero
    8f90:	01d00934 	movhi	r7,16420
    8f94:	1009883a 	mov	r4,r2
    8f98:	180b883a 	mov	r5,r3
    8f9c:	00119800 	call	11980 <__muldf3>
    8fa0:	180b883a 	mov	r5,r3
    8fa4:	1009883a 	mov	r4,r2
    8fa8:	1821883a 	mov	r16,r3
    8fac:	1025883a 	mov	r18,r2
    8fb0:	00129740 	call	12974 <__fixdfsi>
    8fb4:	1009883a 	mov	r4,r2
    8fb8:	1023883a 	mov	r17,r2
    8fbc:	00129fc0 	call	129fc <__floatsidf>
    8fc0:	9009883a 	mov	r4,r18
    8fc4:	800b883a 	mov	r5,r16
    8fc8:	100d883a 	mov	r6,r2
    8fcc:	180f883a 	mov	r7,r3
    8fd0:	8c400c04 	addi	r17,r17,48
    8fd4:	00120a40 	call	120a4 <__subdf3>
    8fd8:	ad400044 	addi	r21,r21,1
    8fdc:	ac7fffc5 	stb	r17,-1(r21)
    8fe0:	ad3fea1e 	bne	r21,r20,8f8c <__alt_mem_Flash_flash_data+0xf4008f8c>
    8fe4:	1813883a 	mov	r9,r3
    8fe8:	d8c01017 	ldw	r3,64(sp)
    8fec:	dc001317 	ldw	r16,76(sp)
    8ff0:	dc801417 	ldw	r18,80(sp)
    8ff4:	1011883a 	mov	r8,r2
    8ff8:	b8ef883a 	add	r23,r23,r3
    8ffc:	d9000e17 	ldw	r4,56(sp)
    9000:	d9401117 	ldw	r5,68(sp)
    9004:	000d883a 	mov	r6,zero
    9008:	01cff834 	movhi	r7,16352
    900c:	da001715 	stw	r8,92(sp)
    9010:	da401515 	stw	r9,84(sp)
    9014:	00105d40 	call	105d4 <__adddf3>
    9018:	da001717 	ldw	r8,92(sp)
    901c:	da401517 	ldw	r9,84(sp)
    9020:	1009883a 	mov	r4,r2
    9024:	400d883a 	mov	r6,r8
    9028:	480f883a 	mov	r7,r9
    902c:	180b883a 	mov	r5,r3
    9030:	00118a00 	call	118a0 <__ledf2>
    9034:	da001717 	ldw	r8,92(sp)
    9038:	da401517 	ldw	r9,84(sp)
    903c:	10003b0e 	bge	r2,zero,912c <_dtoa_r+0x15dc>
    9040:	d9001217 	ldw	r4,72(sp)
    9044:	bd7fffc3 	ldbu	r21,-1(r23)
    9048:	d9000515 	stw	r4,20(sp)
    904c:	003d1c06 	br	84c0 <__alt_mem_Flash_flash_data+0xf40084c0>
    9050:	d8c00817 	ldw	r3,32(sp)
    9054:	18a9c83a 	sub	r20,r3,r2
    9058:	0005883a 	mov	r2,zero
    905c:	003d3706 	br	853c <__alt_mem_Flash_flash_data+0xf400853c>
    9060:	00800044 	movi	r2,1
    9064:	003dd006 	br	87a8 <__alt_mem_Flash_flash_data+0xf40087a8>
    9068:	d8c00217 	ldw	r3,8(sp)
    906c:	00800d84 	movi	r2,54
    9070:	dd400917 	ldw	r21,36(sp)
    9074:	10c5c83a 	sub	r2,r2,r3
    9078:	dd000817 	ldw	r20,32(sp)
    907c:	003d2f06 	br	853c <__alt_mem_Flash_flash_data+0xf400853c>
    9080:	9029883a 	mov	r20,r18
    9084:	982b883a 	mov	r21,r19
    9088:	04400084 	movi	r17,2
    908c:	003bc606 	br	7fa8 <__alt_mem_Flash_flash_data+0xf4007fa8>
    9090:	d8800617 	ldw	r2,24(sp)
    9094:	103efc26 	beq	r2,zero,8c88 <__alt_mem_Flash_flash_data+0xf4008c88>
    9098:	d8c00c17 	ldw	r3,48(sp)
    909c:	00fc890e 	bge	zero,r3,82c4 <__alt_mem_Flash_flash_data+0xf40082c4>
    90a0:	a80b883a 	mov	r5,r21
    90a4:	a009883a 	mov	r4,r20
    90a8:	000d883a 	mov	r6,zero
    90ac:	01d00934 	movhi	r7,16420
    90b0:	00119800 	call	11980 <__muldf3>
    90b4:	89000044 	addi	r4,r17,1
    90b8:	1029883a 	mov	r20,r2
    90bc:	182b883a 	mov	r21,r3
    90c0:	00129fc0 	call	129fc <__floatsidf>
    90c4:	a009883a 	mov	r4,r20
    90c8:	a80b883a 	mov	r5,r21
    90cc:	100d883a 	mov	r6,r2
    90d0:	180f883a 	mov	r7,r3
    90d4:	00119800 	call	11980 <__muldf3>
    90d8:	1009883a 	mov	r4,r2
    90dc:	180b883a 	mov	r5,r3
    90e0:	000d883a 	mov	r6,zero
    90e4:	01d00734 	movhi	r7,16412
    90e8:	00105d40 	call	105d4 <__adddf3>
    90ec:	d9000517 	ldw	r4,20(sp)
    90f0:	1023883a 	mov	r17,r2
    90f4:	00bf3034 	movhi	r2,64704
    90f8:	213fffc4 	addi	r4,r4,-1
    90fc:	1885883a 	add	r2,r3,r2
    9100:	d9001215 	stw	r4,72(sp)
    9104:	d8800e15 	stw	r2,56(sp)
    9108:	da800c17 	ldw	r10,48(sp)
    910c:	003bc306 	br	801c <__alt_mem_Flash_flash_data+0xf400801c>
    9110:	b039883a 	mov	fp,r22
    9114:	01000e44 	movi	r4,57
    9118:	8825883a 	mov	r18,r17
    911c:	9dc00044 	addi	r23,r19,1
    9120:	99000005 	stb	r4,0(r19)
    9124:	a023883a 	mov	r17,r20
    9128:	003dae06 	br	87e4 <__alt_mem_Flash_flash_data+0xf40087e4>
    912c:	d9800e17 	ldw	r6,56(sp)
    9130:	d9c01117 	ldw	r7,68(sp)
    9134:	0009883a 	mov	r4,zero
    9138:	014ff834 	movhi	r5,16352
    913c:	da001715 	stw	r8,92(sp)
    9140:	da401515 	stw	r9,84(sp)
    9144:	00120a40 	call	120a4 <__subdf3>
    9148:	da001717 	ldw	r8,92(sp)
    914c:	da401517 	ldw	r9,84(sp)
    9150:	1009883a 	mov	r4,r2
    9154:	180b883a 	mov	r5,r3
    9158:	400d883a 	mov	r6,r8
    915c:	480f883a 	mov	r7,r9
    9160:	00117c00 	call	117c0 <__gedf2>
    9164:	00bc570e 	bge	zero,r2,82c4 <__alt_mem_Flash_flash_data+0xf40082c4>
    9168:	01000c04 	movi	r4,48
    916c:	00000106 	br	9174 <_dtoa_r+0x1624>
    9170:	102f883a 	mov	r23,r2
    9174:	b8bfffc4 	addi	r2,r23,-1
    9178:	10c00007 	ldb	r3,0(r2)
    917c:	193ffc26 	beq	r3,r4,9170 <__alt_mem_Flash_flash_data+0xf4009170>
    9180:	d9801217 	ldw	r6,72(sp)
    9184:	d9800515 	stw	r6,20(sp)
    9188:	003c1f06 	br	8208 <__alt_mem_Flash_flash_data+0xf4008208>
    918c:	d8801217 	ldw	r2,72(sp)
    9190:	dc001117 	ldw	r16,68(sp)
    9194:	d8800515 	stw	r2,20(sp)
    9198:	003cc906 	br	84c0 <__alt_mem_Flash_flash_data+0xf40084c0>
    919c:	dd801317 	ldw	r22,76(sp)
    91a0:	dc001117 	ldw	r16,68(sp)
    91a4:	dcc01417 	ldw	r19,80(sp)
    91a8:	dc801017 	ldw	r18,64(sp)
    91ac:	003c4506 	br	82c4 <__alt_mem_Flash_flash_data+0xf40082c4>
    91b0:	103e5d1e 	bne	r2,zero,8b28 <__alt_mem_Flash_flash_data+0xf4008b28>
    91b4:	4080004c 	andi	r2,r8,1
    91b8:	103e5b26 	beq	r2,zero,8b28 <__alt_mem_Flash_flash_data+0xf4008b28>
    91bc:	003e5706 	br	8b1c <__alt_mem_Flash_flash_data+0xf4008b1c>
    91c0:	d8c00317 	ldw	r3,12(sp)
    91c4:	00800084 	movi	r2,2
    91c8:	10c00a16 	blt	r2,r3,91f4 <_dtoa_r+0x16a4>
    91cc:	d9000c17 	ldw	r4,48(sp)
    91d0:	003e8306 	br	8be0 <__alt_mem_Flash_flash_data+0xf4008be0>
    91d4:	04400084 	movi	r17,2
    91d8:	003b7306 	br	7fa8 <__alt_mem_Flash_flash_data+0xf4007fa8>
    91dc:	d9801217 	ldw	r6,72(sp)
    91e0:	d9800515 	stw	r6,20(sp)
    91e4:	003cb606 	br	84c0 <__alt_mem_Flash_flash_data+0xf40084c0>
    91e8:	d9001217 	ldw	r4,72(sp)
    91ec:	d9000515 	stw	r4,20(sp)
    91f0:	003c0506 	br	8208 <__alt_mem_Flash_flash_data+0xf4008208>
    91f4:	d9800c17 	ldw	r6,48(sp)
    91f8:	d9800615 	stw	r6,24(sp)
    91fc:	003e8306 	br	8c0c <__alt_mem_Flash_flash_data+0xf4008c0c>
    9200:	d9800317 	ldw	r6,12(sp)
    9204:	00800084 	movi	r2,2
    9208:	11800216 	blt	r2,r6,9214 <_dtoa_r+0x16c4>
    920c:	d8800c17 	ldw	r2,48(sp)
    9210:	003da606 	br	88ac <__alt_mem_Flash_flash_data+0xf40088ac>
    9214:	d8800c17 	ldw	r2,48(sp)
    9218:	d8800615 	stw	r2,24(sp)
    921c:	003e7b06 	br	8c0c <__alt_mem_Flash_flash_data+0xf4008c0c>
    9220:	05000044 	movi	r20,1
    9224:	003b0506 	br	7e3c <__alt_mem_Flash_flash_data+0xf4007e3c>
    9228:	8009883a 	mov	r4,r16
    922c:	80001115 	stw	zero,68(r16)
    9230:	000b883a 	mov	r5,zero
    9234:	000b1e80 	call	b1e8 <_Balloc>
    9238:	d8800715 	stw	r2,28(sp)
    923c:	d8c00717 	ldw	r3,28(sp)
    9240:	00bfffc4 	movi	r2,-1
    9244:	01000044 	movi	r4,1
    9248:	d8800c15 	stw	r2,48(sp)
    924c:	80c01015 	stw	r3,64(r16)
    9250:	d9000b15 	stw	r4,44(sp)
    9254:	d8800615 	stw	r2,24(sp)
    9258:	d8002215 	stw	zero,136(sp)
    925c:	003c1906 	br	82c4 <__alt_mem_Flash_flash_data+0xf40082c4>
    9260:	193d2926 	beq	r3,r4,8708 <__alt_mem_Flash_flash_data+0xf4008708>
    9264:	00c00f04 	movi	r3,60
    9268:	1885c83a 	sub	r2,r3,r2
    926c:	003d7b06 	br	885c <__alt_mem_Flash_flash_data+0xf400885c>
    9270:	000b883a 	mov	r5,zero
    9274:	003b1006 	br	7eb8 <__alt_mem_Flash_flash_data+0xf4007eb8>

00009278 <__sflush_r>:
    9278:	2880030b 	ldhu	r2,12(r5)
    927c:	defffb04 	addi	sp,sp,-20
    9280:	dcc00315 	stw	r19,12(sp)
    9284:	dc400115 	stw	r17,4(sp)
    9288:	dfc00415 	stw	ra,16(sp)
    928c:	dc800215 	stw	r18,8(sp)
    9290:	dc000015 	stw	r16,0(sp)
    9294:	10c0020c 	andi	r3,r2,8
    9298:	2823883a 	mov	r17,r5
    929c:	2027883a 	mov	r19,r4
    92a0:	1800311e 	bne	r3,zero,9368 <__sflush_r+0xf0>
    92a4:	28c00117 	ldw	r3,4(r5)
    92a8:	10820014 	ori	r2,r2,2048
    92ac:	2880030d 	sth	r2,12(r5)
    92b0:	00c04b0e 	bge	zero,r3,93e0 <__sflush_r+0x168>
    92b4:	8a000a17 	ldw	r8,40(r17)
    92b8:	40002326 	beq	r8,zero,9348 <__sflush_r+0xd0>
    92bc:	9c000017 	ldw	r16,0(r19)
    92c0:	10c4000c 	andi	r3,r2,4096
    92c4:	98000015 	stw	zero,0(r19)
    92c8:	18004826 	beq	r3,zero,93ec <__sflush_r+0x174>
    92cc:	89801417 	ldw	r6,80(r17)
    92d0:	10c0010c 	andi	r3,r2,4
    92d4:	18000626 	beq	r3,zero,92f0 <__sflush_r+0x78>
    92d8:	88c00117 	ldw	r3,4(r17)
    92dc:	88800c17 	ldw	r2,48(r17)
    92e0:	30cdc83a 	sub	r6,r6,r3
    92e4:	10000226 	beq	r2,zero,92f0 <__sflush_r+0x78>
    92e8:	88800f17 	ldw	r2,60(r17)
    92ec:	308dc83a 	sub	r6,r6,r2
    92f0:	89400717 	ldw	r5,28(r17)
    92f4:	9809883a 	mov	r4,r19
    92f8:	000f883a 	mov	r7,zero
    92fc:	403ee83a 	callr	r8
    9300:	00ffffc4 	movi	r3,-1
    9304:	10c04426 	beq	r2,r3,9418 <__sflush_r+0x1a0>
    9308:	88c0030b 	ldhu	r3,12(r17)
    930c:	89000417 	ldw	r4,16(r17)
    9310:	88000115 	stw	zero,4(r17)
    9314:	197dffcc 	andi	r5,r3,63487
    9318:	8940030d 	sth	r5,12(r17)
    931c:	89000015 	stw	r4,0(r17)
    9320:	18c4000c 	andi	r3,r3,4096
    9324:	18002c1e 	bne	r3,zero,93d8 <__sflush_r+0x160>
    9328:	89400c17 	ldw	r5,48(r17)
    932c:	9c000015 	stw	r16,0(r19)
    9330:	28000526 	beq	r5,zero,9348 <__sflush_r+0xd0>
    9334:	88801004 	addi	r2,r17,64
    9338:	28800226 	beq	r5,r2,9344 <__sflush_r+0xcc>
    933c:	9809883a 	mov	r4,r19
    9340:	00099d00 	call	99d0 <_free_r>
    9344:	88000c15 	stw	zero,48(r17)
    9348:	0005883a 	mov	r2,zero
    934c:	dfc00417 	ldw	ra,16(sp)
    9350:	dcc00317 	ldw	r19,12(sp)
    9354:	dc800217 	ldw	r18,8(sp)
    9358:	dc400117 	ldw	r17,4(sp)
    935c:	dc000017 	ldw	r16,0(sp)
    9360:	dec00504 	addi	sp,sp,20
    9364:	f800283a 	ret
    9368:	2c800417 	ldw	r18,16(r5)
    936c:	903ff626 	beq	r18,zero,9348 <__alt_mem_Flash_flash_data+0xf4009348>
    9370:	2c000017 	ldw	r16,0(r5)
    9374:	108000cc 	andi	r2,r2,3
    9378:	2c800015 	stw	r18,0(r5)
    937c:	84a1c83a 	sub	r16,r16,r18
    9380:	1000131e 	bne	r2,zero,93d0 <__sflush_r+0x158>
    9384:	28800517 	ldw	r2,20(r5)
    9388:	88800215 	stw	r2,8(r17)
    938c:	04000316 	blt	zero,r16,939c <__sflush_r+0x124>
    9390:	003fed06 	br	9348 <__alt_mem_Flash_flash_data+0xf4009348>
    9394:	90a5883a 	add	r18,r18,r2
    9398:	043feb0e 	bge	zero,r16,9348 <__alt_mem_Flash_flash_data+0xf4009348>
    939c:	88800917 	ldw	r2,36(r17)
    93a0:	89400717 	ldw	r5,28(r17)
    93a4:	800f883a 	mov	r7,r16
    93a8:	900d883a 	mov	r6,r18
    93ac:	9809883a 	mov	r4,r19
    93b0:	103ee83a 	callr	r2
    93b4:	80a1c83a 	sub	r16,r16,r2
    93b8:	00bff616 	blt	zero,r2,9394 <__alt_mem_Flash_flash_data+0xf4009394>
    93bc:	88c0030b 	ldhu	r3,12(r17)
    93c0:	00bfffc4 	movi	r2,-1
    93c4:	18c01014 	ori	r3,r3,64
    93c8:	88c0030d 	sth	r3,12(r17)
    93cc:	003fdf06 	br	934c <__alt_mem_Flash_flash_data+0xf400934c>
    93d0:	0005883a 	mov	r2,zero
    93d4:	003fec06 	br	9388 <__alt_mem_Flash_flash_data+0xf4009388>
    93d8:	88801415 	stw	r2,80(r17)
    93dc:	003fd206 	br	9328 <__alt_mem_Flash_flash_data+0xf4009328>
    93e0:	28c00f17 	ldw	r3,60(r5)
    93e4:	00ffb316 	blt	zero,r3,92b4 <__alt_mem_Flash_flash_data+0xf40092b4>
    93e8:	003fd706 	br	9348 <__alt_mem_Flash_flash_data+0xf4009348>
    93ec:	89400717 	ldw	r5,28(r17)
    93f0:	000d883a 	mov	r6,zero
    93f4:	9809883a 	mov	r4,r19
    93f8:	01c00044 	movi	r7,1
    93fc:	403ee83a 	callr	r8
    9400:	100d883a 	mov	r6,r2
    9404:	00bfffc4 	movi	r2,-1
    9408:	30801426 	beq	r6,r2,945c <__sflush_r+0x1e4>
    940c:	8880030b 	ldhu	r2,12(r17)
    9410:	8a000a17 	ldw	r8,40(r17)
    9414:	003fae06 	br	92d0 <__alt_mem_Flash_flash_data+0xf40092d0>
    9418:	98c00017 	ldw	r3,0(r19)
    941c:	183fba26 	beq	r3,zero,9308 <__alt_mem_Flash_flash_data+0xf4009308>
    9420:	01000744 	movi	r4,29
    9424:	19000626 	beq	r3,r4,9440 <__sflush_r+0x1c8>
    9428:	01000584 	movi	r4,22
    942c:	19000426 	beq	r3,r4,9440 <__sflush_r+0x1c8>
    9430:	88c0030b 	ldhu	r3,12(r17)
    9434:	18c01014 	ori	r3,r3,64
    9438:	88c0030d 	sth	r3,12(r17)
    943c:	003fc306 	br	934c <__alt_mem_Flash_flash_data+0xf400934c>
    9440:	8880030b 	ldhu	r2,12(r17)
    9444:	88c00417 	ldw	r3,16(r17)
    9448:	88000115 	stw	zero,4(r17)
    944c:	10bdffcc 	andi	r2,r2,63487
    9450:	8880030d 	sth	r2,12(r17)
    9454:	88c00015 	stw	r3,0(r17)
    9458:	003fb306 	br	9328 <__alt_mem_Flash_flash_data+0xf4009328>
    945c:	98800017 	ldw	r2,0(r19)
    9460:	103fea26 	beq	r2,zero,940c <__alt_mem_Flash_flash_data+0xf400940c>
    9464:	00c00744 	movi	r3,29
    9468:	10c00226 	beq	r2,r3,9474 <__sflush_r+0x1fc>
    946c:	00c00584 	movi	r3,22
    9470:	10ffd21e 	bne	r2,r3,93bc <__alt_mem_Flash_flash_data+0xf40093bc>
    9474:	9c000015 	stw	r16,0(r19)
    9478:	0005883a 	mov	r2,zero
    947c:	003fb306 	br	934c <__alt_mem_Flash_flash_data+0xf400934c>

00009480 <_fflush_r>:
    9480:	defffd04 	addi	sp,sp,-12
    9484:	dc000115 	stw	r16,4(sp)
    9488:	dfc00215 	stw	ra,8(sp)
    948c:	2021883a 	mov	r16,r4
    9490:	20000226 	beq	r4,zero,949c <_fflush_r+0x1c>
    9494:	20800e17 	ldw	r2,56(r4)
    9498:	10000c26 	beq	r2,zero,94cc <_fflush_r+0x4c>
    949c:	2880030f 	ldh	r2,12(r5)
    94a0:	1000051e 	bne	r2,zero,94b8 <_fflush_r+0x38>
    94a4:	0005883a 	mov	r2,zero
    94a8:	dfc00217 	ldw	ra,8(sp)
    94ac:	dc000117 	ldw	r16,4(sp)
    94b0:	dec00304 	addi	sp,sp,12
    94b4:	f800283a 	ret
    94b8:	8009883a 	mov	r4,r16
    94bc:	dfc00217 	ldw	ra,8(sp)
    94c0:	dc000117 	ldw	r16,4(sp)
    94c4:	dec00304 	addi	sp,sp,12
    94c8:	00092781 	jmpi	9278 <__sflush_r>
    94cc:	d9400015 	stw	r5,0(sp)
    94d0:	000985c0 	call	985c <__sinit>
    94d4:	d9400017 	ldw	r5,0(sp)
    94d8:	003ff006 	br	949c <__alt_mem_Flash_flash_data+0xf400949c>

000094dc <fflush>:
    94dc:	20000526 	beq	r4,zero,94f4 <fflush+0x18>
    94e0:	008000b4 	movhi	r2,2
    94e4:	10899904 	addi	r2,r2,9828
    94e8:	200b883a 	mov	r5,r4
    94ec:	11000017 	ldw	r4,0(r2)
    94f0:	00094801 	jmpi	9480 <_fflush_r>
    94f4:	008000b4 	movhi	r2,2
    94f8:	10899804 	addi	r2,r2,9824
    94fc:	11000017 	ldw	r4,0(r2)
    9500:	01400074 	movhi	r5,1
    9504:	29652004 	addi	r5,r5,-27520
    9508:	000a2441 	jmpi	a244 <_fwalk_reent>

0000950c <__fp_lock>:
    950c:	0005883a 	mov	r2,zero
    9510:	f800283a 	ret

00009514 <__fp_unlock>:
    9514:	0005883a 	mov	r2,zero
    9518:	f800283a 	ret

0000951c <_cleanup_r>:
    951c:	01400074 	movhi	r5,1
    9520:	297c7504 	addi	r5,r5,-3628
    9524:	000a2441 	jmpi	a244 <_fwalk_reent>

00009528 <__sinit.part.1>:
    9528:	defff704 	addi	sp,sp,-36
    952c:	00c00074 	movhi	r3,1
    9530:	dfc00815 	stw	ra,32(sp)
    9534:	ddc00715 	stw	r23,28(sp)
    9538:	dd800615 	stw	r22,24(sp)
    953c:	dd400515 	stw	r21,20(sp)
    9540:	dd000415 	stw	r20,16(sp)
    9544:	dcc00315 	stw	r19,12(sp)
    9548:	dc800215 	stw	r18,8(sp)
    954c:	dc400115 	stw	r17,4(sp)
    9550:	dc000015 	stw	r16,0(sp)
    9554:	18e54704 	addi	r3,r3,-27364
    9558:	24000117 	ldw	r16,4(r4)
    955c:	20c00f15 	stw	r3,60(r4)
    9560:	2080bb04 	addi	r2,r4,748
    9564:	00c000c4 	movi	r3,3
    9568:	20c0b915 	stw	r3,740(r4)
    956c:	2080ba15 	stw	r2,744(r4)
    9570:	2000b815 	stw	zero,736(r4)
    9574:	05c00204 	movi	r23,8
    9578:	00800104 	movi	r2,4
    957c:	2025883a 	mov	r18,r4
    9580:	b80d883a 	mov	r6,r23
    9584:	81001704 	addi	r4,r16,92
    9588:	000b883a 	mov	r5,zero
    958c:	80000015 	stw	zero,0(r16)
    9590:	80000115 	stw	zero,4(r16)
    9594:	80000215 	stw	zero,8(r16)
    9598:	8080030d 	sth	r2,12(r16)
    959c:	80001915 	stw	zero,100(r16)
    95a0:	8000038d 	sth	zero,14(r16)
    95a4:	80000415 	stw	zero,16(r16)
    95a8:	80000515 	stw	zero,20(r16)
    95ac:	80000615 	stw	zero,24(r16)
    95b0:	000b0c40 	call	b0c4 <memset>
    95b4:	05800074 	movhi	r22,1
    95b8:	94400217 	ldw	r17,8(r18)
    95bc:	05400074 	movhi	r21,1
    95c0:	05000074 	movhi	r20,1
    95c4:	04c00074 	movhi	r19,1
    95c8:	b5b1ee04 	addi	r22,r22,-14408
    95cc:	ad720504 	addi	r21,r21,-14316
    95d0:	a5322404 	addi	r20,r20,-14192
    95d4:	9cf23b04 	addi	r19,r19,-14100
    95d8:	85800815 	stw	r22,32(r16)
    95dc:	85400915 	stw	r21,36(r16)
    95e0:	85000a15 	stw	r20,40(r16)
    95e4:	84c00b15 	stw	r19,44(r16)
    95e8:	84000715 	stw	r16,28(r16)
    95ec:	00800284 	movi	r2,10
    95f0:	8880030d 	sth	r2,12(r17)
    95f4:	00800044 	movi	r2,1
    95f8:	89001704 	addi	r4,r17,92
    95fc:	b80d883a 	mov	r6,r23
    9600:	000b883a 	mov	r5,zero
    9604:	88000015 	stw	zero,0(r17)
    9608:	88000115 	stw	zero,4(r17)
    960c:	88000215 	stw	zero,8(r17)
    9610:	88001915 	stw	zero,100(r17)
    9614:	8880038d 	sth	r2,14(r17)
    9618:	88000415 	stw	zero,16(r17)
    961c:	88000515 	stw	zero,20(r17)
    9620:	88000615 	stw	zero,24(r17)
    9624:	000b0c40 	call	b0c4 <memset>
    9628:	94000317 	ldw	r16,12(r18)
    962c:	00800484 	movi	r2,18
    9630:	8c400715 	stw	r17,28(r17)
    9634:	8d800815 	stw	r22,32(r17)
    9638:	8d400915 	stw	r21,36(r17)
    963c:	8d000a15 	stw	r20,40(r17)
    9640:	8cc00b15 	stw	r19,44(r17)
    9644:	8080030d 	sth	r2,12(r16)
    9648:	00800084 	movi	r2,2
    964c:	80000015 	stw	zero,0(r16)
    9650:	80000115 	stw	zero,4(r16)
    9654:	80000215 	stw	zero,8(r16)
    9658:	80001915 	stw	zero,100(r16)
    965c:	8080038d 	sth	r2,14(r16)
    9660:	80000415 	stw	zero,16(r16)
    9664:	80000515 	stw	zero,20(r16)
    9668:	80000615 	stw	zero,24(r16)
    966c:	81001704 	addi	r4,r16,92
    9670:	000b883a 	mov	r5,zero
    9674:	b80d883a 	mov	r6,r23
    9678:	000b0c40 	call	b0c4 <memset>
    967c:	00800044 	movi	r2,1
    9680:	84000715 	stw	r16,28(r16)
    9684:	85800815 	stw	r22,32(r16)
    9688:	85400915 	stw	r21,36(r16)
    968c:	85000a15 	stw	r20,40(r16)
    9690:	84c00b15 	stw	r19,44(r16)
    9694:	90800e15 	stw	r2,56(r18)
    9698:	dfc00817 	ldw	ra,32(sp)
    969c:	ddc00717 	ldw	r23,28(sp)
    96a0:	dd800617 	ldw	r22,24(sp)
    96a4:	dd400517 	ldw	r21,20(sp)
    96a8:	dd000417 	ldw	r20,16(sp)
    96ac:	dcc00317 	ldw	r19,12(sp)
    96b0:	dc800217 	ldw	r18,8(sp)
    96b4:	dc400117 	ldw	r17,4(sp)
    96b8:	dc000017 	ldw	r16,0(sp)
    96bc:	dec00904 	addi	sp,sp,36
    96c0:	f800283a 	ret

000096c4 <__sfmoreglue>:
    96c4:	defffc04 	addi	sp,sp,-16
    96c8:	dc400115 	stw	r17,4(sp)
    96cc:	2c7fffc4 	addi	r17,r5,-1
    96d0:	8c401a24 	muli	r17,r17,104
    96d4:	dc800215 	stw	r18,8(sp)
    96d8:	2825883a 	mov	r18,r5
    96dc:	89401d04 	addi	r5,r17,116
    96e0:	dc000015 	stw	r16,0(sp)
    96e4:	dfc00315 	stw	ra,12(sp)
    96e8:	000a5a00 	call	a5a0 <_malloc_r>
    96ec:	1021883a 	mov	r16,r2
    96f0:	10000726 	beq	r2,zero,9710 <__sfmoreglue+0x4c>
    96f4:	11000304 	addi	r4,r2,12
    96f8:	10000015 	stw	zero,0(r2)
    96fc:	14800115 	stw	r18,4(r2)
    9700:	11000215 	stw	r4,8(r2)
    9704:	000b883a 	mov	r5,zero
    9708:	89801a04 	addi	r6,r17,104
    970c:	000b0c40 	call	b0c4 <memset>
    9710:	8005883a 	mov	r2,r16
    9714:	dfc00317 	ldw	ra,12(sp)
    9718:	dc800217 	ldw	r18,8(sp)
    971c:	dc400117 	ldw	r17,4(sp)
    9720:	dc000017 	ldw	r16,0(sp)
    9724:	dec00404 	addi	sp,sp,16
    9728:	f800283a 	ret

0000972c <__sfp>:
    972c:	008000b4 	movhi	r2,2
    9730:	defffb04 	addi	sp,sp,-20
    9734:	10899804 	addi	r2,r2,9824
    9738:	dc800215 	stw	r18,8(sp)
    973c:	14800017 	ldw	r18,0(r2)
    9740:	dcc00315 	stw	r19,12(sp)
    9744:	dfc00415 	stw	ra,16(sp)
    9748:	90800e17 	ldw	r2,56(r18)
    974c:	dc400115 	stw	r17,4(sp)
    9750:	dc000015 	stw	r16,0(sp)
    9754:	2027883a 	mov	r19,r4
    9758:	1000021e 	bne	r2,zero,9764 <__sfp+0x38>
    975c:	9009883a 	mov	r4,r18
    9760:	00095280 	call	9528 <__sinit.part.1>
    9764:	9480b804 	addi	r18,r18,736
    9768:	047fffc4 	movi	r17,-1
    976c:	91400117 	ldw	r5,4(r18)
    9770:	94000217 	ldw	r16,8(r18)
    9774:	297fffc4 	addi	r5,r5,-1
    9778:	28000a16 	blt	r5,zero,97a4 <__sfp+0x78>
    977c:	8080030f 	ldh	r2,12(r16)
    9780:	10000c26 	beq	r2,zero,97b4 <__sfp+0x88>
    9784:	80c01d04 	addi	r3,r16,116
    9788:	00000206 	br	9794 <__sfp+0x68>
    978c:	18bfe60f 	ldh	r2,-104(r3)
    9790:	10000826 	beq	r2,zero,97b4 <__sfp+0x88>
    9794:	297fffc4 	addi	r5,r5,-1
    9798:	1c3ffd04 	addi	r16,r3,-12
    979c:	18c01a04 	addi	r3,r3,104
    97a0:	2c7ffa1e 	bne	r5,r17,978c <__alt_mem_Flash_flash_data+0xf400978c>
    97a4:	90800017 	ldw	r2,0(r18)
    97a8:	10001d26 	beq	r2,zero,9820 <__sfp+0xf4>
    97ac:	1025883a 	mov	r18,r2
    97b0:	003fee06 	br	976c <__alt_mem_Flash_flash_data+0xf400976c>
    97b4:	00bfffc4 	movi	r2,-1
    97b8:	8080038d 	sth	r2,14(r16)
    97bc:	00800044 	movi	r2,1
    97c0:	8080030d 	sth	r2,12(r16)
    97c4:	80001915 	stw	zero,100(r16)
    97c8:	80000015 	stw	zero,0(r16)
    97cc:	80000215 	stw	zero,8(r16)
    97d0:	80000115 	stw	zero,4(r16)
    97d4:	80000415 	stw	zero,16(r16)
    97d8:	80000515 	stw	zero,20(r16)
    97dc:	80000615 	stw	zero,24(r16)
    97e0:	81001704 	addi	r4,r16,92
    97e4:	000b883a 	mov	r5,zero
    97e8:	01800204 	movi	r6,8
    97ec:	000b0c40 	call	b0c4 <memset>
    97f0:	8005883a 	mov	r2,r16
    97f4:	80000c15 	stw	zero,48(r16)
    97f8:	80000d15 	stw	zero,52(r16)
    97fc:	80001115 	stw	zero,68(r16)
    9800:	80001215 	stw	zero,72(r16)
    9804:	dfc00417 	ldw	ra,16(sp)
    9808:	dcc00317 	ldw	r19,12(sp)
    980c:	dc800217 	ldw	r18,8(sp)
    9810:	dc400117 	ldw	r17,4(sp)
    9814:	dc000017 	ldw	r16,0(sp)
    9818:	dec00504 	addi	sp,sp,20
    981c:	f800283a 	ret
    9820:	9809883a 	mov	r4,r19
    9824:	01400104 	movi	r5,4
    9828:	00096c40 	call	96c4 <__sfmoreglue>
    982c:	90800015 	stw	r2,0(r18)
    9830:	103fde1e 	bne	r2,zero,97ac <__alt_mem_Flash_flash_data+0xf40097ac>
    9834:	00800304 	movi	r2,12
    9838:	98800015 	stw	r2,0(r19)
    983c:	0005883a 	mov	r2,zero
    9840:	003ff006 	br	9804 <__alt_mem_Flash_flash_data+0xf4009804>

00009844 <_cleanup>:
    9844:	008000b4 	movhi	r2,2
    9848:	10899804 	addi	r2,r2,9824
    984c:	11000017 	ldw	r4,0(r2)
    9850:	01400074 	movhi	r5,1
    9854:	297c7504 	addi	r5,r5,-3628
    9858:	000a2441 	jmpi	a244 <_fwalk_reent>

0000985c <__sinit>:
    985c:	20800e17 	ldw	r2,56(r4)
    9860:	10000126 	beq	r2,zero,9868 <__sinit+0xc>
    9864:	f800283a 	ret
    9868:	00095281 	jmpi	9528 <__sinit.part.1>

0000986c <__sfp_lock_acquire>:
    986c:	f800283a 	ret

00009870 <__sfp_lock_release>:
    9870:	f800283a 	ret

00009874 <__sinit_lock_acquire>:
    9874:	f800283a 	ret

00009878 <__sinit_lock_release>:
    9878:	f800283a 	ret

0000987c <__fp_lock_all>:
    987c:	008000b4 	movhi	r2,2
    9880:	10899904 	addi	r2,r2,9828
    9884:	11000017 	ldw	r4,0(r2)
    9888:	01400074 	movhi	r5,1
    988c:	29654304 	addi	r5,r5,-27380
    9890:	000a1801 	jmpi	a180 <_fwalk>

00009894 <__fp_unlock_all>:
    9894:	008000b4 	movhi	r2,2
    9898:	10899904 	addi	r2,r2,9828
    989c:	11000017 	ldw	r4,0(r2)
    98a0:	01400074 	movhi	r5,1
    98a4:	29654504 	addi	r5,r5,-27372
    98a8:	000a1801 	jmpi	a180 <_fwalk>

000098ac <_malloc_trim_r>:
    98ac:	defffb04 	addi	sp,sp,-20
    98b0:	dcc00315 	stw	r19,12(sp)
    98b4:	04c000b4 	movhi	r19,2
    98b8:	dc800215 	stw	r18,8(sp)
    98bc:	dc400115 	stw	r17,4(sp)
    98c0:	dc000015 	stw	r16,0(sp)
    98c4:	dfc00415 	stw	ra,16(sp)
    98c8:	2821883a 	mov	r16,r5
    98cc:	9cc32304 	addi	r19,r19,3212
    98d0:	2025883a 	mov	r18,r4
    98d4:	00136b00 	call	136b0 <__malloc_lock>
    98d8:	98800217 	ldw	r2,8(r19)
    98dc:	14400117 	ldw	r17,4(r2)
    98e0:	00bfff04 	movi	r2,-4
    98e4:	88a2703a 	and	r17,r17,r2
    98e8:	8c21c83a 	sub	r16,r17,r16
    98ec:	8403fbc4 	addi	r16,r16,4079
    98f0:	8020d33a 	srli	r16,r16,12
    98f4:	0083ffc4 	movi	r2,4095
    98f8:	843fffc4 	addi	r16,r16,-1
    98fc:	8020933a 	slli	r16,r16,12
    9900:	1400060e 	bge	r2,r16,991c <_malloc_trim_r+0x70>
    9904:	9009883a 	mov	r4,r18
    9908:	000b883a 	mov	r5,zero
    990c:	000c7640 	call	c764 <_sbrk_r>
    9910:	98c00217 	ldw	r3,8(r19)
    9914:	1c47883a 	add	r3,r3,r17
    9918:	10c00a26 	beq	r2,r3,9944 <_malloc_trim_r+0x98>
    991c:	9009883a 	mov	r4,r18
    9920:	00137d00 	call	137d0 <__malloc_unlock>
    9924:	0005883a 	mov	r2,zero
    9928:	dfc00417 	ldw	ra,16(sp)
    992c:	dcc00317 	ldw	r19,12(sp)
    9930:	dc800217 	ldw	r18,8(sp)
    9934:	dc400117 	ldw	r17,4(sp)
    9938:	dc000017 	ldw	r16,0(sp)
    993c:	dec00504 	addi	sp,sp,20
    9940:	f800283a 	ret
    9944:	9009883a 	mov	r4,r18
    9948:	040bc83a 	sub	r5,zero,r16
    994c:	000c7640 	call	c764 <_sbrk_r>
    9950:	00ffffc4 	movi	r3,-1
    9954:	10c00d26 	beq	r2,r3,998c <_malloc_trim_r+0xe0>
    9958:	00c000b4 	movhi	r3,2
    995c:	18d1de04 	addi	r3,r3,18296
    9960:	18800017 	ldw	r2,0(r3)
    9964:	99000217 	ldw	r4,8(r19)
    9968:	8c23c83a 	sub	r17,r17,r16
    996c:	8c400054 	ori	r17,r17,1
    9970:	1421c83a 	sub	r16,r2,r16
    9974:	24400115 	stw	r17,4(r4)
    9978:	9009883a 	mov	r4,r18
    997c:	1c000015 	stw	r16,0(r3)
    9980:	00137d00 	call	137d0 <__malloc_unlock>
    9984:	00800044 	movi	r2,1
    9988:	003fe706 	br	9928 <__alt_mem_Flash_flash_data+0xf4009928>
    998c:	9009883a 	mov	r4,r18
    9990:	000b883a 	mov	r5,zero
    9994:	000c7640 	call	c764 <_sbrk_r>
    9998:	99000217 	ldw	r4,8(r19)
    999c:	014003c4 	movi	r5,15
    99a0:	1107c83a 	sub	r3,r2,r4
    99a4:	28ffdd0e 	bge	r5,r3,991c <__alt_mem_Flash_flash_data+0xf400991c>
    99a8:	014000b4 	movhi	r5,2
    99ac:	29499b04 	addi	r5,r5,9836
    99b0:	29400017 	ldw	r5,0(r5)
    99b4:	18c00054 	ori	r3,r3,1
    99b8:	20c00115 	stw	r3,4(r4)
    99bc:	00c000b4 	movhi	r3,2
    99c0:	1145c83a 	sub	r2,r2,r5
    99c4:	18d1de04 	addi	r3,r3,18296
    99c8:	18800015 	stw	r2,0(r3)
    99cc:	003fd306 	br	991c <__alt_mem_Flash_flash_data+0xf400991c>

000099d0 <_free_r>:
    99d0:	28004c26 	beq	r5,zero,9b04 <_free_r+0x134>
    99d4:	defffd04 	addi	sp,sp,-12
    99d8:	dc400115 	stw	r17,4(sp)
    99dc:	dc000015 	stw	r16,0(sp)
    99e0:	2023883a 	mov	r17,r4
    99e4:	2821883a 	mov	r16,r5
    99e8:	dfc00215 	stw	ra,8(sp)
    99ec:	00136b00 	call	136b0 <__malloc_lock>
    99f0:	813fff17 	ldw	r4,-4(r16)
    99f4:	00bfff84 	movi	r2,-2
    99f8:	024000b4 	movhi	r9,2
    99fc:	81bffe04 	addi	r6,r16,-8
    9a00:	2084703a 	and	r2,r4,r2
    9a04:	4a432304 	addi	r9,r9,3212
    9a08:	308b883a 	add	r5,r6,r2
    9a0c:	2a000117 	ldw	r8,4(r5)
    9a10:	49c00217 	ldw	r7,8(r9)
    9a14:	00ffff04 	movi	r3,-4
    9a18:	40c6703a 	and	r3,r8,r3
    9a1c:	39405326 	beq	r7,r5,9b6c <_free_r+0x19c>
    9a20:	28c00115 	stw	r3,4(r5)
    9a24:	2100004c 	andi	r4,r4,1
    9a28:	2000091e 	bne	r4,zero,9a50 <_free_r+0x80>
    9a2c:	81fffe17 	ldw	r7,-8(r16)
    9a30:	4a000204 	addi	r8,r9,8
    9a34:	31cdc83a 	sub	r6,r6,r7
    9a38:	31000217 	ldw	r4,8(r6)
    9a3c:	11c5883a 	add	r2,r2,r7
    9a40:	22006126 	beq	r4,r8,9bc8 <_free_r+0x1f8>
    9a44:	31c00317 	ldw	r7,12(r6)
    9a48:	21c00315 	stw	r7,12(r4)
    9a4c:	39000215 	stw	r4,8(r7)
    9a50:	28c9883a 	add	r4,r5,r3
    9a54:	21c00117 	ldw	r7,4(r4)
    9a58:	39c0004c 	andi	r7,r7,1
    9a5c:	38000d1e 	bne	r7,zero,9a94 <_free_r+0xc4>
    9a60:	29000217 	ldw	r4,8(r5)
    9a64:	10c5883a 	add	r2,r2,r3
    9a68:	00c000b4 	movhi	r3,2
    9a6c:	18c32504 	addi	r3,r3,3220
    9a70:	20c07526 	beq	r4,r3,9c48 <_free_r+0x278>
    9a74:	29c00317 	ldw	r7,12(r5)
    9a78:	11400054 	ori	r5,r2,1
    9a7c:	3087883a 	add	r3,r6,r2
    9a80:	21c00315 	stw	r7,12(r4)
    9a84:	39000215 	stw	r4,8(r7)
    9a88:	31400115 	stw	r5,4(r6)
    9a8c:	18800015 	stw	r2,0(r3)
    9a90:	00000406 	br	9aa4 <_free_r+0xd4>
    9a94:	10c00054 	ori	r3,r2,1
    9a98:	30c00115 	stw	r3,4(r6)
    9a9c:	3087883a 	add	r3,r6,r2
    9aa0:	18800015 	stw	r2,0(r3)
    9aa4:	00c07fc4 	movi	r3,511
    9aa8:	18801736 	bltu	r3,r2,9b08 <_free_r+0x138>
    9aac:	1004d0fa 	srli	r2,r2,3
    9ab0:	01400044 	movi	r5,1
    9ab4:	49000117 	ldw	r4,4(r9)
    9ab8:	1087883a 	add	r3,r2,r2
    9abc:	18c7883a 	add	r3,r3,r3
    9ac0:	1005d0ba 	srai	r2,r2,2
    9ac4:	18c7883a 	add	r3,r3,r3
    9ac8:	1a47883a 	add	r3,r3,r9
    9acc:	19c00217 	ldw	r7,8(r3)
    9ad0:	2884983a 	sll	r2,r5,r2
    9ad4:	30c00315 	stw	r3,12(r6)
    9ad8:	31c00215 	stw	r7,8(r6)
    9adc:	1104b03a 	or	r2,r2,r4
    9ae0:	19800215 	stw	r6,8(r3)
    9ae4:	48800115 	stw	r2,4(r9)
    9ae8:	39800315 	stw	r6,12(r7)
    9aec:	8809883a 	mov	r4,r17
    9af0:	dfc00217 	ldw	ra,8(sp)
    9af4:	dc400117 	ldw	r17,4(sp)
    9af8:	dc000017 	ldw	r16,0(sp)
    9afc:	dec00304 	addi	sp,sp,12
    9b00:	00137d01 	jmpi	137d0 <__malloc_unlock>
    9b04:	f800283a 	ret
    9b08:	1006d27a 	srli	r3,r2,9
    9b0c:	01000104 	movi	r4,4
    9b10:	20c04036 	bltu	r4,r3,9c14 <_free_r+0x244>
    9b14:	1006d1ba 	srli	r3,r2,6
    9b18:	19400e04 	addi	r5,r3,56
    9b1c:	2947883a 	add	r3,r5,r5
    9b20:	18c7883a 	add	r3,r3,r3
    9b24:	18c7883a 	add	r3,r3,r3
    9b28:	1a49883a 	add	r4,r3,r9
    9b2c:	20c00217 	ldw	r3,8(r4)
    9b30:	01c000b4 	movhi	r7,2
    9b34:	39c32304 	addi	r7,r7,3212
    9b38:	19003b26 	beq	r3,r4,9c28 <_free_r+0x258>
    9b3c:	01ffff04 	movi	r7,-4
    9b40:	19400117 	ldw	r5,4(r3)
    9b44:	29ca703a 	and	r5,r5,r7
    9b48:	1140022e 	bgeu	r2,r5,9b54 <_free_r+0x184>
    9b4c:	18c00217 	ldw	r3,8(r3)
    9b50:	20fffb1e 	bne	r4,r3,9b40 <__alt_mem_Flash_flash_data+0xf4009b40>
    9b54:	18800317 	ldw	r2,12(r3)
    9b58:	30800315 	stw	r2,12(r6)
    9b5c:	30c00215 	stw	r3,8(r6)
    9b60:	11800215 	stw	r6,8(r2)
    9b64:	19800315 	stw	r6,12(r3)
    9b68:	003fe006 	br	9aec <__alt_mem_Flash_flash_data+0xf4009aec>
    9b6c:	2100004c 	andi	r4,r4,1
    9b70:	1885883a 	add	r2,r3,r2
    9b74:	2000071e 	bne	r4,zero,9b94 <_free_r+0x1c4>
    9b78:	817ffe17 	ldw	r5,-8(r16)
    9b7c:	314dc83a 	sub	r6,r6,r5
    9b80:	30c00317 	ldw	r3,12(r6)
    9b84:	31000217 	ldw	r4,8(r6)
    9b88:	1145883a 	add	r2,r2,r5
    9b8c:	20c00315 	stw	r3,12(r4)
    9b90:	19000215 	stw	r4,8(r3)
    9b94:	10c00054 	ori	r3,r2,1
    9b98:	30c00115 	stw	r3,4(r6)
    9b9c:	00c000b4 	movhi	r3,2
    9ba0:	18c99c04 	addi	r3,r3,9840
    9ba4:	18c00017 	ldw	r3,0(r3)
    9ba8:	49800215 	stw	r6,8(r9)
    9bac:	10ffcf36 	bltu	r2,r3,9aec <__alt_mem_Flash_flash_data+0xf4009aec>
    9bb0:	008000b4 	movhi	r2,2
    9bb4:	1091bc04 	addi	r2,r2,18160
    9bb8:	11400017 	ldw	r5,0(r2)
    9bbc:	8809883a 	mov	r4,r17
    9bc0:	00098ac0 	call	98ac <_malloc_trim_r>
    9bc4:	003fc906 	br	9aec <__alt_mem_Flash_flash_data+0xf4009aec>
    9bc8:	28c9883a 	add	r4,r5,r3
    9bcc:	21000117 	ldw	r4,4(r4)
    9bd0:	2100004c 	andi	r4,r4,1
    9bd4:	20000a1e 	bne	r4,zero,9c00 <_free_r+0x230>
    9bd8:	29000317 	ldw	r4,12(r5)
    9bdc:	29400217 	ldw	r5,8(r5)
    9be0:	10c5883a 	add	r2,r2,r3
    9be4:	10c00054 	ori	r3,r2,1
    9be8:	29000315 	stw	r4,12(r5)
    9bec:	21400215 	stw	r5,8(r4)
    9bf0:	30c00115 	stw	r3,4(r6)
    9bf4:	308d883a 	add	r6,r6,r2
    9bf8:	30800015 	stw	r2,0(r6)
    9bfc:	003fbb06 	br	9aec <__alt_mem_Flash_flash_data+0xf4009aec>
    9c00:	10c00054 	ori	r3,r2,1
    9c04:	30c00115 	stw	r3,4(r6)
    9c08:	308d883a 	add	r6,r6,r2
    9c0c:	30800015 	stw	r2,0(r6)
    9c10:	003fb606 	br	9aec <__alt_mem_Flash_flash_data+0xf4009aec>
    9c14:	01000504 	movi	r4,20
    9c18:	20c01436 	bltu	r4,r3,9c6c <_free_r+0x29c>
    9c1c:	194016c4 	addi	r5,r3,91
    9c20:	2947883a 	add	r3,r5,r5
    9c24:	003fbe06 	br	9b20 <__alt_mem_Flash_flash_data+0xf4009b20>
    9c28:	280bd0ba 	srai	r5,r5,2
    9c2c:	00800044 	movi	r2,1
    9c30:	39000117 	ldw	r4,4(r7)
    9c34:	114a983a 	sll	r5,r2,r5
    9c38:	1805883a 	mov	r2,r3
    9c3c:	2908b03a 	or	r4,r5,r4
    9c40:	39000115 	stw	r4,4(r7)
    9c44:	003fc406 	br	9b58 <__alt_mem_Flash_flash_data+0xf4009b58>
    9c48:	49800515 	stw	r6,20(r9)
    9c4c:	49800415 	stw	r6,16(r9)
    9c50:	10c00054 	ori	r3,r2,1
    9c54:	31000315 	stw	r4,12(r6)
    9c58:	31000215 	stw	r4,8(r6)
    9c5c:	30c00115 	stw	r3,4(r6)
    9c60:	308d883a 	add	r6,r6,r2
    9c64:	30800015 	stw	r2,0(r6)
    9c68:	003fa006 	br	9aec <__alt_mem_Flash_flash_data+0xf4009aec>
    9c6c:	01001504 	movi	r4,84
    9c70:	20c00436 	bltu	r4,r3,9c84 <_free_r+0x2b4>
    9c74:	1006d33a 	srli	r3,r2,12
    9c78:	19401b84 	addi	r5,r3,110
    9c7c:	2947883a 	add	r3,r5,r5
    9c80:	003fa706 	br	9b20 <__alt_mem_Flash_flash_data+0xf4009b20>
    9c84:	01005504 	movi	r4,340
    9c88:	20c00436 	bltu	r4,r3,9c9c <_free_r+0x2cc>
    9c8c:	1006d3fa 	srli	r3,r2,15
    9c90:	19401dc4 	addi	r5,r3,119
    9c94:	2947883a 	add	r3,r5,r5
    9c98:	003fa106 	br	9b20 <__alt_mem_Flash_flash_data+0xf4009b20>
    9c9c:	01015504 	movi	r4,1364
    9ca0:	20c00436 	bltu	r4,r3,9cb4 <_free_r+0x2e4>
    9ca4:	1006d4ba 	srli	r3,r2,18
    9ca8:	19401f04 	addi	r5,r3,124
    9cac:	2947883a 	add	r3,r5,r5
    9cb0:	003f9b06 	br	9b20 <__alt_mem_Flash_flash_data+0xf4009b20>
    9cb4:	00c03f04 	movi	r3,252
    9cb8:	01401f84 	movi	r5,126
    9cbc:	003f9806 	br	9b20 <__alt_mem_Flash_flash_data+0xf4009b20>

00009cc0 <__sfvwrite_r>:
    9cc0:	30800217 	ldw	r2,8(r6)
    9cc4:	10006726 	beq	r2,zero,9e64 <__sfvwrite_r+0x1a4>
    9cc8:	defff404 	addi	sp,sp,-48
    9ccc:	dd000615 	stw	r20,24(sp)
    9cd0:	2029883a 	mov	r20,r4
    9cd4:	2900030b 	ldhu	r4,12(r5)
    9cd8:	ddc00915 	stw	r23,36(sp)
    9cdc:	dc000215 	stw	r16,8(sp)
    9ce0:	dfc00b15 	stw	ra,44(sp)
    9ce4:	df000a15 	stw	fp,40(sp)
    9ce8:	dd800815 	stw	r22,32(sp)
    9cec:	dd400715 	stw	r21,28(sp)
    9cf0:	dcc00515 	stw	r19,20(sp)
    9cf4:	dc800415 	stw	r18,16(sp)
    9cf8:	dc400315 	stw	r17,12(sp)
    9cfc:	2080020c 	andi	r2,r4,8
    9d00:	2821883a 	mov	r16,r5
    9d04:	302f883a 	mov	r23,r6
    9d08:	10002726 	beq	r2,zero,9da8 <__sfvwrite_r+0xe8>
    9d0c:	28800417 	ldw	r2,16(r5)
    9d10:	10002526 	beq	r2,zero,9da8 <__sfvwrite_r+0xe8>
    9d14:	2080008c 	andi	r2,r4,2
    9d18:	bc400017 	ldw	r17,0(r23)
    9d1c:	10002a26 	beq	r2,zero,9dc8 <__sfvwrite_r+0x108>
    9d20:	05600034 	movhi	r21,32768
    9d24:	0027883a 	mov	r19,zero
    9d28:	0025883a 	mov	r18,zero
    9d2c:	ad7f0004 	addi	r21,r21,-1024
    9d30:	980d883a 	mov	r6,r19
    9d34:	a009883a 	mov	r4,r20
    9d38:	90004626 	beq	r18,zero,9e54 <__sfvwrite_r+0x194>
    9d3c:	900f883a 	mov	r7,r18
    9d40:	81400717 	ldw	r5,28(r16)
    9d44:	ac80022e 	bgeu	r21,r18,9d50 <__sfvwrite_r+0x90>
    9d48:	01e00034 	movhi	r7,32768
    9d4c:	39ff0004 	addi	r7,r7,-1024
    9d50:	80800917 	ldw	r2,36(r16)
    9d54:	103ee83a 	callr	r2
    9d58:	0080520e 	bge	zero,r2,9ea4 <__sfvwrite_r+0x1e4>
    9d5c:	b8c00217 	ldw	r3,8(r23)
    9d60:	98a7883a 	add	r19,r19,r2
    9d64:	90a5c83a 	sub	r18,r18,r2
    9d68:	1885c83a 	sub	r2,r3,r2
    9d6c:	b8800215 	stw	r2,8(r23)
    9d70:	103fef1e 	bne	r2,zero,9d30 <__alt_mem_Flash_flash_data+0xf4009d30>
    9d74:	0005883a 	mov	r2,zero
    9d78:	dfc00b17 	ldw	ra,44(sp)
    9d7c:	df000a17 	ldw	fp,40(sp)
    9d80:	ddc00917 	ldw	r23,36(sp)
    9d84:	dd800817 	ldw	r22,32(sp)
    9d88:	dd400717 	ldw	r21,28(sp)
    9d8c:	dd000617 	ldw	r20,24(sp)
    9d90:	dcc00517 	ldw	r19,20(sp)
    9d94:	dc800417 	ldw	r18,16(sp)
    9d98:	dc400317 	ldw	r17,12(sp)
    9d9c:	dc000217 	ldw	r16,8(sp)
    9da0:	dec00c04 	addi	sp,sp,48
    9da4:	f800283a 	ret
    9da8:	a009883a 	mov	r4,r20
    9dac:	800b883a 	mov	r5,r16
    9db0:	00077fc0 	call	77fc <__swsetup_r>
    9db4:	1000ec1e 	bne	r2,zero,a168 <__sfvwrite_r+0x4a8>
    9db8:	8100030b 	ldhu	r4,12(r16)
    9dbc:	bc400017 	ldw	r17,0(r23)
    9dc0:	2080008c 	andi	r2,r4,2
    9dc4:	103fd61e 	bne	r2,zero,9d20 <__alt_mem_Flash_flash_data+0xf4009d20>
    9dc8:	2080004c 	andi	r2,r4,1
    9dcc:	10003a1e 	bne	r2,zero,9eb8 <__sfvwrite_r+0x1f8>
    9dd0:	0039883a 	mov	fp,zero
    9dd4:	0025883a 	mov	r18,zero
    9dd8:	90001a26 	beq	r18,zero,9e44 <__sfvwrite_r+0x184>
    9ddc:	2080800c 	andi	r2,r4,512
    9de0:	85800217 	ldw	r22,8(r16)
    9de4:	10007626 	beq	r2,zero,9fc0 <__sfvwrite_r+0x300>
    9de8:	b027883a 	mov	r19,r22
    9dec:	95809436 	bltu	r18,r22,a040 <__sfvwrite_r+0x380>
    9df0:	2081200c 	andi	r2,r4,1152
    9df4:	10009f1e 	bne	r2,zero,a074 <__sfvwrite_r+0x3b4>
    9df8:	81000017 	ldw	r4,0(r16)
    9dfc:	e00b883a 	mov	r5,fp
    9e00:	980d883a 	mov	r6,r19
    9e04:	000af680 	call	af68 <memmove>
    9e08:	81000217 	ldw	r4,8(r16)
    9e0c:	81400017 	ldw	r5,0(r16)
    9e10:	9005883a 	mov	r2,r18
    9e14:	2587c83a 	sub	r3,r4,r22
    9e18:	2ce7883a 	add	r19,r5,r19
    9e1c:	80c00215 	stw	r3,8(r16)
    9e20:	84c00015 	stw	r19,0(r16)
    9e24:	b8c00217 	ldw	r3,8(r23)
    9e28:	e0b9883a 	add	fp,fp,r2
    9e2c:	90a5c83a 	sub	r18,r18,r2
    9e30:	1885c83a 	sub	r2,r3,r2
    9e34:	b8800215 	stw	r2,8(r23)
    9e38:	103fce26 	beq	r2,zero,9d74 <__alt_mem_Flash_flash_data+0xf4009d74>
    9e3c:	8100030b 	ldhu	r4,12(r16)
    9e40:	903fe61e 	bne	r18,zero,9ddc <__alt_mem_Flash_flash_data+0xf4009ddc>
    9e44:	8f000017 	ldw	fp,0(r17)
    9e48:	8c800117 	ldw	r18,4(r17)
    9e4c:	8c400204 	addi	r17,r17,8
    9e50:	003fe106 	br	9dd8 <__alt_mem_Flash_flash_data+0xf4009dd8>
    9e54:	8cc00017 	ldw	r19,0(r17)
    9e58:	8c800117 	ldw	r18,4(r17)
    9e5c:	8c400204 	addi	r17,r17,8
    9e60:	003fb306 	br	9d30 <__alt_mem_Flash_flash_data+0xf4009d30>
    9e64:	0005883a 	mov	r2,zero
    9e68:	f800283a 	ret
    9e6c:	00a00034 	movhi	r2,32768
    9e70:	10bfffc4 	addi	r2,r2,-1
    9e74:	9009883a 	mov	r4,r18
    9e78:	1480012e 	bgeu	r2,r18,9e80 <__sfvwrite_r+0x1c0>
    9e7c:	1009883a 	mov	r4,r2
    9e80:	980b883a 	mov	r5,r19
    9e84:	00105140 	call	10514 <__divsi3>
    9e88:	81400717 	ldw	r5,28(r16)
    9e8c:	80c00917 	ldw	r3,36(r16)
    9e90:	988f383a 	mul	r7,r19,r2
    9e94:	a009883a 	mov	r4,r20
    9e98:	e00d883a 	mov	r6,fp
    9e9c:	183ee83a 	callr	r3
    9ea0:	00bfe016 	blt	zero,r2,9e24 <__alt_mem_Flash_flash_data+0xf4009e24>
    9ea4:	8080030b 	ldhu	r2,12(r16)
    9ea8:	10801014 	ori	r2,r2,64
    9eac:	8080030d 	sth	r2,12(r16)
    9eb0:	00bfffc4 	movi	r2,-1
    9eb4:	003fb006 	br	9d78 <__alt_mem_Flash_flash_data+0xf4009d78>
    9eb8:	0027883a 	mov	r19,zero
    9ebc:	0011883a 	mov	r8,zero
    9ec0:	0039883a 	mov	fp,zero
    9ec4:	0025883a 	mov	r18,zero
    9ec8:	90001f26 	beq	r18,zero,9f48 <__sfvwrite_r+0x288>
    9ecc:	40006026 	beq	r8,zero,a050 <__sfvwrite_r+0x390>
    9ed0:	982b883a 	mov	r21,r19
    9ed4:	94c0012e 	bgeu	r18,r19,9edc <__sfvwrite_r+0x21c>
    9ed8:	902b883a 	mov	r21,r18
    9edc:	81000017 	ldw	r4,0(r16)
    9ee0:	80800417 	ldw	r2,16(r16)
    9ee4:	a82d883a 	mov	r22,r21
    9ee8:	81800217 	ldw	r6,8(r16)
    9eec:	81c00517 	ldw	r7,20(r16)
    9ef0:	1100022e 	bgeu	r2,r4,9efc <__sfvwrite_r+0x23c>
    9ef4:	31c7883a 	add	r3,r6,r7
    9ef8:	1d401816 	blt	r3,r21,9f5c <__sfvwrite_r+0x29c>
    9efc:	a9c04416 	blt	r21,r7,a010 <__sfvwrite_r+0x350>
    9f00:	80800917 	ldw	r2,36(r16)
    9f04:	81400717 	ldw	r5,28(r16)
    9f08:	a009883a 	mov	r4,r20
    9f0c:	da000115 	stw	r8,4(sp)
    9f10:	e00d883a 	mov	r6,fp
    9f14:	103ee83a 	callr	r2
    9f18:	102d883a 	mov	r22,r2
    9f1c:	da000117 	ldw	r8,4(sp)
    9f20:	00bfe00e 	bge	zero,r2,9ea4 <__alt_mem_Flash_flash_data+0xf4009ea4>
    9f24:	9da7c83a 	sub	r19,r19,r22
    9f28:	98001f26 	beq	r19,zero,9fa8 <__sfvwrite_r+0x2e8>
    9f2c:	b8800217 	ldw	r2,8(r23)
    9f30:	e5b9883a 	add	fp,fp,r22
    9f34:	95a5c83a 	sub	r18,r18,r22
    9f38:	15adc83a 	sub	r22,r2,r22
    9f3c:	bd800215 	stw	r22,8(r23)
    9f40:	b03f8c26 	beq	r22,zero,9d74 <__alt_mem_Flash_flash_data+0xf4009d74>
    9f44:	903fe11e 	bne	r18,zero,9ecc <__alt_mem_Flash_flash_data+0xf4009ecc>
    9f48:	8f000017 	ldw	fp,0(r17)
    9f4c:	8c800117 	ldw	r18,4(r17)
    9f50:	0011883a 	mov	r8,zero
    9f54:	8c400204 	addi	r17,r17,8
    9f58:	003fdb06 	br	9ec8 <__alt_mem_Flash_flash_data+0xf4009ec8>
    9f5c:	180d883a 	mov	r6,r3
    9f60:	e00b883a 	mov	r5,fp
    9f64:	da000115 	stw	r8,4(sp)
    9f68:	d8c00015 	stw	r3,0(sp)
    9f6c:	000af680 	call	af68 <memmove>
    9f70:	d8c00017 	ldw	r3,0(sp)
    9f74:	80800017 	ldw	r2,0(r16)
    9f78:	a009883a 	mov	r4,r20
    9f7c:	800b883a 	mov	r5,r16
    9f80:	10c5883a 	add	r2,r2,r3
    9f84:	80800015 	stw	r2,0(r16)
    9f88:	d8c00015 	stw	r3,0(sp)
    9f8c:	00094800 	call	9480 <_fflush_r>
    9f90:	d8c00017 	ldw	r3,0(sp)
    9f94:	da000117 	ldw	r8,4(sp)
    9f98:	103fc21e 	bne	r2,zero,9ea4 <__alt_mem_Flash_flash_data+0xf4009ea4>
    9f9c:	182d883a 	mov	r22,r3
    9fa0:	9da7c83a 	sub	r19,r19,r22
    9fa4:	983fe11e 	bne	r19,zero,9f2c <__alt_mem_Flash_flash_data+0xf4009f2c>
    9fa8:	a009883a 	mov	r4,r20
    9fac:	800b883a 	mov	r5,r16
    9fb0:	00094800 	call	9480 <_fflush_r>
    9fb4:	103fbb1e 	bne	r2,zero,9ea4 <__alt_mem_Flash_flash_data+0xf4009ea4>
    9fb8:	0011883a 	mov	r8,zero
    9fbc:	003fdb06 	br	9f2c <__alt_mem_Flash_flash_data+0xf4009f2c>
    9fc0:	81000017 	ldw	r4,0(r16)
    9fc4:	80800417 	ldw	r2,16(r16)
    9fc8:	11000236 	bltu	r2,r4,9fd4 <__sfvwrite_r+0x314>
    9fcc:	84c00517 	ldw	r19,20(r16)
    9fd0:	94ffa62e 	bgeu	r18,r19,9e6c <__alt_mem_Flash_flash_data+0xf4009e6c>
    9fd4:	9027883a 	mov	r19,r18
    9fd8:	b480012e 	bgeu	r22,r18,9fe0 <__sfvwrite_r+0x320>
    9fdc:	b027883a 	mov	r19,r22
    9fe0:	e00b883a 	mov	r5,fp
    9fe4:	980d883a 	mov	r6,r19
    9fe8:	000af680 	call	af68 <memmove>
    9fec:	80800217 	ldw	r2,8(r16)
    9ff0:	80c00017 	ldw	r3,0(r16)
    9ff4:	14c5c83a 	sub	r2,r2,r19
    9ff8:	1cc7883a 	add	r3,r3,r19
    9ffc:	80800215 	stw	r2,8(r16)
    a000:	80c00015 	stw	r3,0(r16)
    a004:	10004326 	beq	r2,zero,a114 <__sfvwrite_r+0x454>
    a008:	9805883a 	mov	r2,r19
    a00c:	003f8506 	br	9e24 <__alt_mem_Flash_flash_data+0xf4009e24>
    a010:	a80d883a 	mov	r6,r21
    a014:	e00b883a 	mov	r5,fp
    a018:	da000115 	stw	r8,4(sp)
    a01c:	000af680 	call	af68 <memmove>
    a020:	80800217 	ldw	r2,8(r16)
    a024:	80c00017 	ldw	r3,0(r16)
    a028:	da000117 	ldw	r8,4(sp)
    a02c:	1545c83a 	sub	r2,r2,r21
    a030:	1d6b883a 	add	r21,r3,r21
    a034:	80800215 	stw	r2,8(r16)
    a038:	85400015 	stw	r21,0(r16)
    a03c:	003fb906 	br	9f24 <__alt_mem_Flash_flash_data+0xf4009f24>
    a040:	81000017 	ldw	r4,0(r16)
    a044:	902d883a 	mov	r22,r18
    a048:	9027883a 	mov	r19,r18
    a04c:	003f6b06 	br	9dfc <__alt_mem_Flash_flash_data+0xf4009dfc>
    a050:	e009883a 	mov	r4,fp
    a054:	01400284 	movi	r5,10
    a058:	900d883a 	mov	r6,r18
    a05c:	000ad480 	call	ad48 <memchr>
    a060:	10003e26 	beq	r2,zero,a15c <__sfvwrite_r+0x49c>
    a064:	10800044 	addi	r2,r2,1
    a068:	1727c83a 	sub	r19,r2,fp
    a06c:	02000044 	movi	r8,1
    a070:	003f9706 	br	9ed0 <__alt_mem_Flash_flash_data+0xf4009ed0>
    a074:	80800517 	ldw	r2,20(r16)
    a078:	81400417 	ldw	r5,16(r16)
    a07c:	80c00017 	ldw	r3,0(r16)
    a080:	10a7883a 	add	r19,r2,r2
    a084:	9885883a 	add	r2,r19,r2
    a088:	1026d7fa 	srli	r19,r2,31
    a08c:	196bc83a 	sub	r21,r3,r5
    a090:	a9800044 	addi	r6,r21,1
    a094:	9885883a 	add	r2,r19,r2
    a098:	1027d07a 	srai	r19,r2,1
    a09c:	3485883a 	add	r2,r6,r18
    a0a0:	980d883a 	mov	r6,r19
    a0a4:	9880022e 	bgeu	r19,r2,a0b0 <__sfvwrite_r+0x3f0>
    a0a8:	1027883a 	mov	r19,r2
    a0ac:	100d883a 	mov	r6,r2
    a0b0:	2101000c 	andi	r4,r4,1024
    a0b4:	20001c26 	beq	r4,zero,a128 <__sfvwrite_r+0x468>
    a0b8:	a009883a 	mov	r4,r20
    a0bc:	300b883a 	mov	r5,r6
    a0c0:	000a5a00 	call	a5a0 <_malloc_r>
    a0c4:	102d883a 	mov	r22,r2
    a0c8:	10002926 	beq	r2,zero,a170 <__sfvwrite_r+0x4b0>
    a0cc:	81400417 	ldw	r5,16(r16)
    a0d0:	1009883a 	mov	r4,r2
    a0d4:	a80d883a 	mov	r6,r21
    a0d8:	000ae300 	call	ae30 <memcpy>
    a0dc:	8080030b 	ldhu	r2,12(r16)
    a0e0:	00fedfc4 	movi	r3,-1153
    a0e4:	10c4703a 	and	r2,r2,r3
    a0e8:	10802014 	ori	r2,r2,128
    a0ec:	8080030d 	sth	r2,12(r16)
    a0f0:	b549883a 	add	r4,r22,r21
    a0f4:	9d4bc83a 	sub	r5,r19,r21
    a0f8:	85800415 	stw	r22,16(r16)
    a0fc:	84c00515 	stw	r19,20(r16)
    a100:	81000015 	stw	r4,0(r16)
    a104:	902d883a 	mov	r22,r18
    a108:	81400215 	stw	r5,8(r16)
    a10c:	9027883a 	mov	r19,r18
    a110:	003f3a06 	br	9dfc <__alt_mem_Flash_flash_data+0xf4009dfc>
    a114:	a009883a 	mov	r4,r20
    a118:	800b883a 	mov	r5,r16
    a11c:	00094800 	call	9480 <_fflush_r>
    a120:	103fb926 	beq	r2,zero,a008 <__alt_mem_Flash_flash_data+0xf400a008>
    a124:	003f5f06 	br	9ea4 <__alt_mem_Flash_flash_data+0xf4009ea4>
    a128:	a009883a 	mov	r4,r20
    a12c:	000c1880 	call	c188 <_realloc_r>
    a130:	102d883a 	mov	r22,r2
    a134:	103fee1e 	bne	r2,zero,a0f0 <__alt_mem_Flash_flash_data+0xf400a0f0>
    a138:	81400417 	ldw	r5,16(r16)
    a13c:	a009883a 	mov	r4,r20
    a140:	00099d00 	call	99d0 <_free_r>
    a144:	8080030b 	ldhu	r2,12(r16)
    a148:	00ffdfc4 	movi	r3,-129
    a14c:	1884703a 	and	r2,r3,r2
    a150:	00c00304 	movi	r3,12
    a154:	a0c00015 	stw	r3,0(r20)
    a158:	003f5306 	br	9ea8 <__alt_mem_Flash_flash_data+0xf4009ea8>
    a15c:	94c00044 	addi	r19,r18,1
    a160:	02000044 	movi	r8,1
    a164:	003f5a06 	br	9ed0 <__alt_mem_Flash_flash_data+0xf4009ed0>
    a168:	00bfffc4 	movi	r2,-1
    a16c:	003f0206 	br	9d78 <__alt_mem_Flash_flash_data+0xf4009d78>
    a170:	00800304 	movi	r2,12
    a174:	a0800015 	stw	r2,0(r20)
    a178:	8080030b 	ldhu	r2,12(r16)
    a17c:	003f4a06 	br	9ea8 <__alt_mem_Flash_flash_data+0xf4009ea8>

0000a180 <_fwalk>:
    a180:	defff704 	addi	sp,sp,-36
    a184:	dd000415 	stw	r20,16(sp)
    a188:	dfc00815 	stw	ra,32(sp)
    a18c:	ddc00715 	stw	r23,28(sp)
    a190:	dd800615 	stw	r22,24(sp)
    a194:	dd400515 	stw	r21,20(sp)
    a198:	dcc00315 	stw	r19,12(sp)
    a19c:	dc800215 	stw	r18,8(sp)
    a1a0:	dc400115 	stw	r17,4(sp)
    a1a4:	dc000015 	stw	r16,0(sp)
    a1a8:	2500b804 	addi	r20,r4,736
    a1ac:	a0002326 	beq	r20,zero,a23c <_fwalk+0xbc>
    a1b0:	282b883a 	mov	r21,r5
    a1b4:	002f883a 	mov	r23,zero
    a1b8:	05800044 	movi	r22,1
    a1bc:	04ffffc4 	movi	r19,-1
    a1c0:	a4400117 	ldw	r17,4(r20)
    a1c4:	a4800217 	ldw	r18,8(r20)
    a1c8:	8c7fffc4 	addi	r17,r17,-1
    a1cc:	88000d16 	blt	r17,zero,a204 <_fwalk+0x84>
    a1d0:	94000304 	addi	r16,r18,12
    a1d4:	94800384 	addi	r18,r18,14
    a1d8:	80c0000b 	ldhu	r3,0(r16)
    a1dc:	8c7fffc4 	addi	r17,r17,-1
    a1e0:	813ffd04 	addi	r4,r16,-12
    a1e4:	b0c0042e 	bgeu	r22,r3,a1f8 <_fwalk+0x78>
    a1e8:	90c0000f 	ldh	r3,0(r18)
    a1ec:	1cc00226 	beq	r3,r19,a1f8 <_fwalk+0x78>
    a1f0:	a83ee83a 	callr	r21
    a1f4:	b8aeb03a 	or	r23,r23,r2
    a1f8:	84001a04 	addi	r16,r16,104
    a1fc:	94801a04 	addi	r18,r18,104
    a200:	8cfff51e 	bne	r17,r19,a1d8 <__alt_mem_Flash_flash_data+0xf400a1d8>
    a204:	a5000017 	ldw	r20,0(r20)
    a208:	a03fed1e 	bne	r20,zero,a1c0 <__alt_mem_Flash_flash_data+0xf400a1c0>
    a20c:	b805883a 	mov	r2,r23
    a210:	dfc00817 	ldw	ra,32(sp)
    a214:	ddc00717 	ldw	r23,28(sp)
    a218:	dd800617 	ldw	r22,24(sp)
    a21c:	dd400517 	ldw	r21,20(sp)
    a220:	dd000417 	ldw	r20,16(sp)
    a224:	dcc00317 	ldw	r19,12(sp)
    a228:	dc800217 	ldw	r18,8(sp)
    a22c:	dc400117 	ldw	r17,4(sp)
    a230:	dc000017 	ldw	r16,0(sp)
    a234:	dec00904 	addi	sp,sp,36
    a238:	f800283a 	ret
    a23c:	002f883a 	mov	r23,zero
    a240:	003ff206 	br	a20c <__alt_mem_Flash_flash_data+0xf400a20c>

0000a244 <_fwalk_reent>:
    a244:	defff704 	addi	sp,sp,-36
    a248:	dd400515 	stw	r21,20(sp)
    a24c:	dfc00815 	stw	ra,32(sp)
    a250:	ddc00715 	stw	r23,28(sp)
    a254:	dd800615 	stw	r22,24(sp)
    a258:	dd000415 	stw	r20,16(sp)
    a25c:	dcc00315 	stw	r19,12(sp)
    a260:	dc800215 	stw	r18,8(sp)
    a264:	dc400115 	stw	r17,4(sp)
    a268:	dc000015 	stw	r16,0(sp)
    a26c:	2540b804 	addi	r21,r4,736
    a270:	a8002326 	beq	r21,zero,a300 <_fwalk_reent+0xbc>
    a274:	2829883a 	mov	r20,r5
    a278:	202d883a 	mov	r22,r4
    a27c:	002f883a 	mov	r23,zero
    a280:	04c00044 	movi	r19,1
    a284:	04bfffc4 	movi	r18,-1
    a288:	ac400117 	ldw	r17,4(r21)
    a28c:	ac000217 	ldw	r16,8(r21)
    a290:	8c7fffc4 	addi	r17,r17,-1
    a294:	88000c16 	blt	r17,zero,a2c8 <_fwalk_reent+0x84>
    a298:	84000304 	addi	r16,r16,12
    a29c:	80c0000b 	ldhu	r3,0(r16)
    a2a0:	8c7fffc4 	addi	r17,r17,-1
    a2a4:	817ffd04 	addi	r5,r16,-12
    a2a8:	98c0052e 	bgeu	r19,r3,a2c0 <_fwalk_reent+0x7c>
    a2ac:	80c0008f 	ldh	r3,2(r16)
    a2b0:	b009883a 	mov	r4,r22
    a2b4:	1c800226 	beq	r3,r18,a2c0 <_fwalk_reent+0x7c>
    a2b8:	a03ee83a 	callr	r20
    a2bc:	b8aeb03a 	or	r23,r23,r2
    a2c0:	84001a04 	addi	r16,r16,104
    a2c4:	8cbff51e 	bne	r17,r18,a29c <__alt_mem_Flash_flash_data+0xf400a29c>
    a2c8:	ad400017 	ldw	r21,0(r21)
    a2cc:	a83fee1e 	bne	r21,zero,a288 <__alt_mem_Flash_flash_data+0xf400a288>
    a2d0:	b805883a 	mov	r2,r23
    a2d4:	dfc00817 	ldw	ra,32(sp)
    a2d8:	ddc00717 	ldw	r23,28(sp)
    a2dc:	dd800617 	ldw	r22,24(sp)
    a2e0:	dd400517 	ldw	r21,20(sp)
    a2e4:	dd000417 	ldw	r20,16(sp)
    a2e8:	dcc00317 	ldw	r19,12(sp)
    a2ec:	dc800217 	ldw	r18,8(sp)
    a2f0:	dc400117 	ldw	r17,4(sp)
    a2f4:	dc000017 	ldw	r16,0(sp)
    a2f8:	dec00904 	addi	sp,sp,36
    a2fc:	f800283a 	ret
    a300:	002f883a 	mov	r23,zero
    a304:	003ff206 	br	a2d0 <__alt_mem_Flash_flash_data+0xf400a2d0>

0000a308 <_setlocale_r>:
    a308:	30001b26 	beq	r6,zero,a378 <_setlocale_r+0x70>
    a30c:	014000b4 	movhi	r5,2
    a310:	defffe04 	addi	sp,sp,-8
    a314:	29409b04 	addi	r5,r5,620
    a318:	3009883a 	mov	r4,r6
    a31c:	dc000015 	stw	r16,0(sp)
    a320:	dfc00115 	stw	ra,4(sp)
    a324:	3021883a 	mov	r16,r6
    a328:	000c8f40 	call	c8f4 <strcmp>
    a32c:	1000061e 	bne	r2,zero,a348 <_setlocale_r+0x40>
    a330:	008000b4 	movhi	r2,2
    a334:	10809a04 	addi	r2,r2,616
    a338:	dfc00117 	ldw	ra,4(sp)
    a33c:	dc000017 	ldw	r16,0(sp)
    a340:	dec00204 	addi	sp,sp,8
    a344:	f800283a 	ret
    a348:	014000b4 	movhi	r5,2
    a34c:	29409a04 	addi	r5,r5,616
    a350:	8009883a 	mov	r4,r16
    a354:	000c8f40 	call	c8f4 <strcmp>
    a358:	103ff526 	beq	r2,zero,a330 <__alt_mem_Flash_flash_data+0xf400a330>
    a35c:	014000b4 	movhi	r5,2
    a360:	29407d04 	addi	r5,r5,500
    a364:	8009883a 	mov	r4,r16
    a368:	000c8f40 	call	c8f4 <strcmp>
    a36c:	103ff026 	beq	r2,zero,a330 <__alt_mem_Flash_flash_data+0xf400a330>
    a370:	0005883a 	mov	r2,zero
    a374:	003ff006 	br	a338 <__alt_mem_Flash_flash_data+0xf400a338>
    a378:	008000b4 	movhi	r2,2
    a37c:	10809a04 	addi	r2,r2,616
    a380:	f800283a 	ret

0000a384 <__locale_charset>:
    a384:	008000b4 	movhi	r2,2
    a388:	10830d04 	addi	r2,r2,3124
    a38c:	f800283a 	ret

0000a390 <__locale_mb_cur_max>:
    a390:	008000b4 	movhi	r2,2
    a394:	10899a04 	addi	r2,r2,9832
    a398:	10800017 	ldw	r2,0(r2)
    a39c:	f800283a 	ret

0000a3a0 <__locale_msgcharset>:
    a3a0:	008000b4 	movhi	r2,2
    a3a4:	10830504 	addi	r2,r2,3092
    a3a8:	f800283a 	ret

0000a3ac <__locale_cjk_lang>:
    a3ac:	0005883a 	mov	r2,zero
    a3b0:	f800283a 	ret

0000a3b4 <_localeconv_r>:
    a3b4:	008000b4 	movhi	r2,2
    a3b8:	10831504 	addi	r2,r2,3156
    a3bc:	f800283a 	ret

0000a3c0 <setlocale>:
    a3c0:	00c000b4 	movhi	r3,2
    a3c4:	18c99904 	addi	r3,r3,9828
    a3c8:	2005883a 	mov	r2,r4
    a3cc:	19000017 	ldw	r4,0(r3)
    a3d0:	280d883a 	mov	r6,r5
    a3d4:	100b883a 	mov	r5,r2
    a3d8:	000a3081 	jmpi	a308 <_setlocale_r>

0000a3dc <localeconv>:
    a3dc:	008000b4 	movhi	r2,2
    a3e0:	10831504 	addi	r2,r2,3156
    a3e4:	f800283a 	ret

0000a3e8 <__smakebuf_r>:
    a3e8:	2880030b 	ldhu	r2,12(r5)
    a3ec:	10c0008c 	andi	r3,r2,2
    a3f0:	1800401e 	bne	r3,zero,a4f4 <__smakebuf_r+0x10c>
    a3f4:	deffec04 	addi	sp,sp,-80
    a3f8:	dc000f15 	stw	r16,60(sp)
    a3fc:	2821883a 	mov	r16,r5
    a400:	2940038f 	ldh	r5,14(r5)
    a404:	dc401015 	stw	r17,64(sp)
    a408:	dfc01315 	stw	ra,76(sp)
    a40c:	dcc01215 	stw	r19,72(sp)
    a410:	dc801115 	stw	r18,68(sp)
    a414:	2023883a 	mov	r17,r4
    a418:	28001b16 	blt	r5,zero,a488 <__smakebuf_r+0xa0>
    a41c:	d80d883a 	mov	r6,sp
    a420:	000f4b80 	call	f4b8 <_fstat_r>
    a424:	10001716 	blt	r2,zero,a484 <__smakebuf_r+0x9c>
    a428:	d8800117 	ldw	r2,4(sp)
    a42c:	00e00014 	movui	r3,32768
    a430:	10bc000c 	andi	r2,r2,61440
    a434:	10c03726 	beq	r2,r3,a514 <__smakebuf_r+0x12c>
    a438:	80c0030b 	ldhu	r3,12(r16)
    a43c:	18c20014 	ori	r3,r3,2048
    a440:	80c0030d 	sth	r3,12(r16)
    a444:	00c80004 	movi	r3,8192
    a448:	10c03c1e 	bne	r2,r3,a53c <__smakebuf_r+0x154>
    a44c:	8140038f 	ldh	r5,14(r16)
    a450:	8809883a 	mov	r4,r17
    a454:	000f5100 	call	f510 <_isatty_r>
    a458:	10004e26 	beq	r2,zero,a594 <__smakebuf_r+0x1ac>
    a45c:	8080030b 	ldhu	r2,12(r16)
    a460:	04c00044 	movi	r19,1
    a464:	80c010c4 	addi	r3,r16,67
    a468:	14c4b03a 	or	r2,r2,r19
    a46c:	8080030d 	sth	r2,12(r16)
    a470:	80c00015 	stw	r3,0(r16)
    a474:	80c00415 	stw	r3,16(r16)
    a478:	84c00515 	stw	r19,20(r16)
    a47c:	04810004 	movi	r18,1024
    a480:	00000706 	br	a4a0 <__smakebuf_r+0xb8>
    a484:	8080030b 	ldhu	r2,12(r16)
    a488:	10c0200c 	andi	r3,r2,128
    a48c:	18001f1e 	bne	r3,zero,a50c <__smakebuf_r+0x124>
    a490:	04810004 	movi	r18,1024
    a494:	10820014 	ori	r2,r2,2048
    a498:	8080030d 	sth	r2,12(r16)
    a49c:	0027883a 	mov	r19,zero
    a4a0:	8809883a 	mov	r4,r17
    a4a4:	900b883a 	mov	r5,r18
    a4a8:	000a5a00 	call	a5a0 <_malloc_r>
    a4ac:	10002e26 	beq	r2,zero,a568 <__smakebuf_r+0x180>
    a4b0:	80c0030b 	ldhu	r3,12(r16)
    a4b4:	01000074 	movhi	r4,1
    a4b8:	21254704 	addi	r4,r4,-27364
    a4bc:	89000f15 	stw	r4,60(r17)
    a4c0:	18c02014 	ori	r3,r3,128
    a4c4:	80c0030d 	sth	r3,12(r16)
    a4c8:	80800015 	stw	r2,0(r16)
    a4cc:	80800415 	stw	r2,16(r16)
    a4d0:	84800515 	stw	r18,20(r16)
    a4d4:	98001c1e 	bne	r19,zero,a548 <__smakebuf_r+0x160>
    a4d8:	dfc01317 	ldw	ra,76(sp)
    a4dc:	dcc01217 	ldw	r19,72(sp)
    a4e0:	dc801117 	ldw	r18,68(sp)
    a4e4:	dc401017 	ldw	r17,64(sp)
    a4e8:	dc000f17 	ldw	r16,60(sp)
    a4ec:	dec01404 	addi	sp,sp,80
    a4f0:	f800283a 	ret
    a4f4:	288010c4 	addi	r2,r5,67
    a4f8:	28800015 	stw	r2,0(r5)
    a4fc:	28800415 	stw	r2,16(r5)
    a500:	00800044 	movi	r2,1
    a504:	28800515 	stw	r2,20(r5)
    a508:	f800283a 	ret
    a50c:	04801004 	movi	r18,64
    a510:	003fe006 	br	a494 <__alt_mem_Flash_flash_data+0xf400a494>
    a514:	81000a17 	ldw	r4,40(r16)
    a518:	00c00074 	movhi	r3,1
    a51c:	18f22404 	addi	r3,r3,-14192
    a520:	20ffc51e 	bne	r4,r3,a438 <__alt_mem_Flash_flash_data+0xf400a438>
    a524:	80c0030b 	ldhu	r3,12(r16)
    a528:	01010004 	movi	r4,1024
    a52c:	81001315 	stw	r4,76(r16)
    a530:	1906b03a 	or	r3,r3,r4
    a534:	80c0030d 	sth	r3,12(r16)
    a538:	003fc206 	br	a444 <__alt_mem_Flash_flash_data+0xf400a444>
    a53c:	0027883a 	mov	r19,zero
    a540:	04810004 	movi	r18,1024
    a544:	003fd606 	br	a4a0 <__alt_mem_Flash_flash_data+0xf400a4a0>
    a548:	8140038f 	ldh	r5,14(r16)
    a54c:	8809883a 	mov	r4,r17
    a550:	000f5100 	call	f510 <_isatty_r>
    a554:	103fe026 	beq	r2,zero,a4d8 <__alt_mem_Flash_flash_data+0xf400a4d8>
    a558:	8080030b 	ldhu	r2,12(r16)
    a55c:	10800054 	ori	r2,r2,1
    a560:	8080030d 	sth	r2,12(r16)
    a564:	003fdc06 	br	a4d8 <__alt_mem_Flash_flash_data+0xf400a4d8>
    a568:	8080030b 	ldhu	r2,12(r16)
    a56c:	10c0800c 	andi	r3,r2,512
    a570:	183fd91e 	bne	r3,zero,a4d8 <__alt_mem_Flash_flash_data+0xf400a4d8>
    a574:	10800094 	ori	r2,r2,2
    a578:	80c010c4 	addi	r3,r16,67
    a57c:	8080030d 	sth	r2,12(r16)
    a580:	00800044 	movi	r2,1
    a584:	80c00015 	stw	r3,0(r16)
    a588:	80c00415 	stw	r3,16(r16)
    a58c:	80800515 	stw	r2,20(r16)
    a590:	003fd106 	br	a4d8 <__alt_mem_Flash_flash_data+0xf400a4d8>
    a594:	04c00044 	movi	r19,1
    a598:	04810004 	movi	r18,1024
    a59c:	003fc006 	br	a4a0 <__alt_mem_Flash_flash_data+0xf400a4a0>

0000a5a0 <_malloc_r>:
    a5a0:	defff504 	addi	sp,sp,-44
    a5a4:	dc800315 	stw	r18,12(sp)
    a5a8:	dfc00a15 	stw	ra,40(sp)
    a5ac:	df000915 	stw	fp,36(sp)
    a5b0:	ddc00815 	stw	r23,32(sp)
    a5b4:	dd800715 	stw	r22,28(sp)
    a5b8:	dd400615 	stw	r21,24(sp)
    a5bc:	dd000515 	stw	r20,20(sp)
    a5c0:	dcc00415 	stw	r19,16(sp)
    a5c4:	dc400215 	stw	r17,8(sp)
    a5c8:	dc000115 	stw	r16,4(sp)
    a5cc:	288002c4 	addi	r2,r5,11
    a5d0:	00c00584 	movi	r3,22
    a5d4:	2025883a 	mov	r18,r4
    a5d8:	18802a2e 	bgeu	r3,r2,a684 <_malloc_r+0xe4>
    a5dc:	047ffe04 	movi	r17,-8
    a5e0:	1462703a 	and	r17,r2,r17
    a5e4:	88009e16 	blt	r17,zero,a860 <_malloc_r+0x2c0>
    a5e8:	89409d36 	bltu	r17,r5,a860 <_malloc_r+0x2c0>
    a5ec:	00136b00 	call	136b0 <__malloc_lock>
    a5f0:	00807dc4 	movi	r2,503
    a5f4:	14402736 	bltu	r2,r17,a694 <_malloc_r+0xf4>
    a5f8:	8806d0fa 	srli	r3,r17,3
    a5fc:	04c000b4 	movhi	r19,2
    a600:	9cc32304 	addi	r19,r19,3212
    a604:	18c5883a 	add	r2,r3,r3
    a608:	1085883a 	add	r2,r2,r2
    a60c:	1085883a 	add	r2,r2,r2
    a610:	9885883a 	add	r2,r19,r2
    a614:	14000317 	ldw	r16,12(r2)
    a618:	80814a26 	beq	r16,r2,ab44 <_malloc_r+0x5a4>
    a61c:	80c00117 	ldw	r3,4(r16)
    a620:	81000317 	ldw	r4,12(r16)
    a624:	00bfff04 	movi	r2,-4
    a628:	1884703a 	and	r2,r3,r2
    a62c:	81400217 	ldw	r5,8(r16)
    a630:	8085883a 	add	r2,r16,r2
    a634:	10c00117 	ldw	r3,4(r2)
    a638:	29000315 	stw	r4,12(r5)
    a63c:	21400215 	stw	r5,8(r4)
    a640:	18c00054 	ori	r3,r3,1
    a644:	10c00115 	stw	r3,4(r2)
    a648:	9009883a 	mov	r4,r18
    a64c:	00137d00 	call	137d0 <__malloc_unlock>
    a650:	80800204 	addi	r2,r16,8
    a654:	dfc00a17 	ldw	ra,40(sp)
    a658:	df000917 	ldw	fp,36(sp)
    a65c:	ddc00817 	ldw	r23,32(sp)
    a660:	dd800717 	ldw	r22,28(sp)
    a664:	dd400617 	ldw	r21,24(sp)
    a668:	dd000517 	ldw	r20,20(sp)
    a66c:	dcc00417 	ldw	r19,16(sp)
    a670:	dc800317 	ldw	r18,12(sp)
    a674:	dc400217 	ldw	r17,8(sp)
    a678:	dc000117 	ldw	r16,4(sp)
    a67c:	dec00b04 	addi	sp,sp,44
    a680:	f800283a 	ret
    a684:	04400404 	movi	r17,16
    a688:	89407536 	bltu	r17,r5,a860 <_malloc_r+0x2c0>
    a68c:	00136b00 	call	136b0 <__malloc_lock>
    a690:	003fd906 	br	a5f8 <__alt_mem_Flash_flash_data+0xf400a5f8>
    a694:	8806d27a 	srli	r3,r17,9
    a698:	18007526 	beq	r3,zero,a870 <_malloc_r+0x2d0>
    a69c:	00800104 	movi	r2,4
    a6a0:	10c0ef36 	bltu	r2,r3,aa60 <_malloc_r+0x4c0>
    a6a4:	8806d1ba 	srli	r3,r17,6
    a6a8:	19c00e04 	addi	r7,r3,56
    a6ac:	39cb883a 	add	r5,r7,r7
    a6b0:	04c000b4 	movhi	r19,2
    a6b4:	294b883a 	add	r5,r5,r5
    a6b8:	9cc32304 	addi	r19,r19,3212
    a6bc:	294b883a 	add	r5,r5,r5
    a6c0:	994b883a 	add	r5,r19,r5
    a6c4:	2c000317 	ldw	r16,12(r5)
    a6c8:	2c000e26 	beq	r5,r16,a704 <_malloc_r+0x164>
    a6cc:	80800117 	ldw	r2,4(r16)
    a6d0:	01bfff04 	movi	r6,-4
    a6d4:	010003c4 	movi	r4,15
    a6d8:	1184703a 	and	r2,r2,r6
    a6dc:	1447c83a 	sub	r3,r2,r17
    a6e0:	20c00716 	blt	r4,r3,a700 <_malloc_r+0x160>
    a6e4:	1800650e 	bge	r3,zero,a87c <_malloc_r+0x2dc>
    a6e8:	84000317 	ldw	r16,12(r16)
    a6ec:	2c000526 	beq	r5,r16,a704 <_malloc_r+0x164>
    a6f0:	80800117 	ldw	r2,4(r16)
    a6f4:	1184703a 	and	r2,r2,r6
    a6f8:	1447c83a 	sub	r3,r2,r17
    a6fc:	20fff90e 	bge	r4,r3,a6e4 <__alt_mem_Flash_flash_data+0xf400a6e4>
    a700:	39ffffc4 	addi	r7,r7,-1
    a704:	38c00044 	addi	r3,r7,1
    a708:	018000b4 	movhi	r6,2
    a70c:	9c000417 	ldw	r16,16(r19)
    a710:	31832304 	addi	r6,r6,3212
    a714:	32400204 	addi	r9,r6,8
    a718:	82410326 	beq	r16,r9,ab28 <_malloc_r+0x588>
    a71c:	81000117 	ldw	r4,4(r16)
    a720:	00bfff04 	movi	r2,-4
    a724:	208e703a 	and	r7,r4,r2
    a728:	3c45c83a 	sub	r2,r7,r17
    a72c:	010003c4 	movi	r4,15
    a730:	2080ee16 	blt	r4,r2,aaec <_malloc_r+0x54c>
    a734:	32400515 	stw	r9,20(r6)
    a738:	32400415 	stw	r9,16(r6)
    a73c:	1000510e 	bge	r2,zero,a884 <_malloc_r+0x2e4>
    a740:	00807fc4 	movi	r2,511
    a744:	11c0ce36 	bltu	r2,r7,aa80 <_malloc_r+0x4e0>
    a748:	3808d0fa 	srli	r4,r7,3
    a74c:	01c00044 	movi	r7,1
    a750:	30800117 	ldw	r2,4(r6)
    a754:	210b883a 	add	r5,r4,r4
    a758:	294b883a 	add	r5,r5,r5
    a75c:	2009d0ba 	srai	r4,r4,2
    a760:	294b883a 	add	r5,r5,r5
    a764:	298b883a 	add	r5,r5,r6
    a768:	2a000217 	ldw	r8,8(r5)
    a76c:	3908983a 	sll	r4,r7,r4
    a770:	81400315 	stw	r5,12(r16)
    a774:	82000215 	stw	r8,8(r16)
    a778:	2088b03a 	or	r4,r4,r2
    a77c:	2c000215 	stw	r16,8(r5)
    a780:	31000115 	stw	r4,4(r6)
    a784:	44000315 	stw	r16,12(r8)
    a788:	1805d0ba 	srai	r2,r3,2
    a78c:	01400044 	movi	r5,1
    a790:	288a983a 	sll	r5,r5,r2
    a794:	21404336 	bltu	r4,r5,a8a4 <_malloc_r+0x304>
    a798:	2144703a 	and	r2,r4,r5
    a79c:	10000a1e 	bne	r2,zero,a7c8 <_malloc_r+0x228>
    a7a0:	00bfff04 	movi	r2,-4
    a7a4:	294b883a 	add	r5,r5,r5
    a7a8:	1886703a 	and	r3,r3,r2
    a7ac:	2144703a 	and	r2,r4,r5
    a7b0:	18c00104 	addi	r3,r3,4
    a7b4:	1000041e 	bne	r2,zero,a7c8 <_malloc_r+0x228>
    a7b8:	294b883a 	add	r5,r5,r5
    a7bc:	2144703a 	and	r2,r4,r5
    a7c0:	18c00104 	addi	r3,r3,4
    a7c4:	103ffc26 	beq	r2,zero,a7b8 <__alt_mem_Flash_flash_data+0xf400a7b8>
    a7c8:	023fff04 	movi	r8,-4
    a7cc:	01c003c4 	movi	r7,15
    a7d0:	18c5883a 	add	r2,r3,r3
    a7d4:	1085883a 	add	r2,r2,r2
    a7d8:	1085883a 	add	r2,r2,r2
    a7dc:	9895883a 	add	r10,r19,r2
    a7e0:	52c00304 	addi	r11,r10,12
    a7e4:	1819883a 	mov	r12,r3
    a7e8:	5c000017 	ldw	r16,0(r11)
    a7ec:	59bffd04 	addi	r6,r11,-12
    a7f0:	8180041e 	bne	r16,r6,a804 <_malloc_r+0x264>
    a7f4:	0000ce06 	br	ab30 <_malloc_r+0x590>
    a7f8:	2000d70e 	bge	r4,zero,ab58 <_malloc_r+0x5b8>
    a7fc:	84000317 	ldw	r16,12(r16)
    a800:	8180cb26 	beq	r16,r6,ab30 <_malloc_r+0x590>
    a804:	80800117 	ldw	r2,4(r16)
    a808:	1204703a 	and	r2,r2,r8
    a80c:	1449c83a 	sub	r4,r2,r17
    a810:	393ff90e 	bge	r7,r4,a7f8 <__alt_mem_Flash_flash_data+0xf400a7f8>
    a814:	80800317 	ldw	r2,12(r16)
    a818:	80c00217 	ldw	r3,8(r16)
    a81c:	89400054 	ori	r5,r17,1
    a820:	81400115 	stw	r5,4(r16)
    a824:	18800315 	stw	r2,12(r3)
    a828:	10c00215 	stw	r3,8(r2)
    a82c:	8463883a 	add	r17,r16,r17
    a830:	9c400515 	stw	r17,20(r19)
    a834:	9c400415 	stw	r17,16(r19)
    a838:	20800054 	ori	r2,r4,1
    a83c:	88800115 	stw	r2,4(r17)
    a840:	8a400315 	stw	r9,12(r17)
    a844:	8a400215 	stw	r9,8(r17)
    a848:	8923883a 	add	r17,r17,r4
    a84c:	89000015 	stw	r4,0(r17)
    a850:	9009883a 	mov	r4,r18
    a854:	00137d00 	call	137d0 <__malloc_unlock>
    a858:	80800204 	addi	r2,r16,8
    a85c:	003f7d06 	br	a654 <__alt_mem_Flash_flash_data+0xf400a654>
    a860:	00800304 	movi	r2,12
    a864:	90800015 	stw	r2,0(r18)
    a868:	0005883a 	mov	r2,zero
    a86c:	003f7906 	br	a654 <__alt_mem_Flash_flash_data+0xf400a654>
    a870:	01401f84 	movi	r5,126
    a874:	01c00fc4 	movi	r7,63
    a878:	003f8d06 	br	a6b0 <__alt_mem_Flash_flash_data+0xf400a6b0>
    a87c:	81000317 	ldw	r4,12(r16)
    a880:	003f6a06 	br	a62c <__alt_mem_Flash_flash_data+0xf400a62c>
    a884:	81c5883a 	add	r2,r16,r7
    a888:	10c00117 	ldw	r3,4(r2)
    a88c:	9009883a 	mov	r4,r18
    a890:	18c00054 	ori	r3,r3,1
    a894:	10c00115 	stw	r3,4(r2)
    a898:	00137d00 	call	137d0 <__malloc_unlock>
    a89c:	80800204 	addi	r2,r16,8
    a8a0:	003f6c06 	br	a654 <__alt_mem_Flash_flash_data+0xf400a654>
    a8a4:	9c000217 	ldw	r16,8(r19)
    a8a8:	00bfff04 	movi	r2,-4
    a8ac:	85800117 	ldw	r22,4(r16)
    a8b0:	b0ac703a 	and	r22,r22,r2
    a8b4:	b4400336 	bltu	r22,r17,a8c4 <_malloc_r+0x324>
    a8b8:	b445c83a 	sub	r2,r22,r17
    a8bc:	00c003c4 	movi	r3,15
    a8c0:	18805d16 	blt	r3,r2,aa38 <_malloc_r+0x498>
    a8c4:	05c000b4 	movhi	r23,2
    a8c8:	008000b4 	movhi	r2,2
    a8cc:	bdc99b04 	addi	r23,r23,9836
    a8d0:	1091bc04 	addi	r2,r2,18160
    a8d4:	15400017 	ldw	r21,0(r2)
    a8d8:	b9000017 	ldw	r4,0(r23)
    a8dc:	00ffffc4 	movi	r3,-1
    a8e0:	858d883a 	add	r6,r16,r22
    a8e4:	8d6b883a 	add	r21,r17,r21
    a8e8:	20c0e426 	beq	r4,r3,ac7c <_malloc_r+0x6dc>
    a8ec:	ad4403c4 	addi	r21,r21,4111
    a8f0:	00fc0004 	movi	r3,-4096
    a8f4:	a8ea703a 	and	r21,r21,r3
    a8f8:	9009883a 	mov	r4,r18
    a8fc:	a80b883a 	mov	r5,r21
    a900:	d9800015 	stw	r6,0(sp)
    a904:	000c7640 	call	c764 <_sbrk_r>
    a908:	00ffffc4 	movi	r3,-1
    a90c:	1029883a 	mov	r20,r2
    a910:	d9800017 	ldw	r6,0(sp)
    a914:	10c0a426 	beq	r2,r3,aba8 <_malloc_r+0x608>
    a918:	1180a236 	bltu	r2,r6,aba4 <_malloc_r+0x604>
    a91c:	070000b4 	movhi	fp,2
    a920:	e711de04 	addi	fp,fp,18296
    a924:	e0c00017 	ldw	r3,0(fp)
    a928:	a8c7883a 	add	r3,r21,r3
    a92c:	e0c00015 	stw	r3,0(fp)
    a930:	3500da26 	beq	r6,r20,ac9c <_malloc_r+0x6fc>
    a934:	b9000017 	ldw	r4,0(r23)
    a938:	00bfffc4 	movi	r2,-1
    a93c:	2080e426 	beq	r4,r2,acd0 <_malloc_r+0x730>
    a940:	a185c83a 	sub	r2,r20,r6
    a944:	1885883a 	add	r2,r3,r2
    a948:	e0800015 	stw	r2,0(fp)
    a94c:	a0c001cc 	andi	r3,r20,7
    a950:	1800b526 	beq	r3,zero,ac28 <_malloc_r+0x688>
    a954:	a0e9c83a 	sub	r20,r20,r3
    a958:	00840204 	movi	r2,4104
    a95c:	a5000204 	addi	r20,r20,8
    a960:	10c7c83a 	sub	r3,r2,r3
    a964:	a545883a 	add	r2,r20,r21
    a968:	1083ffcc 	andi	r2,r2,4095
    a96c:	18abc83a 	sub	r21,r3,r2
    a970:	9009883a 	mov	r4,r18
    a974:	a80b883a 	mov	r5,r21
    a978:	000c7640 	call	c764 <_sbrk_r>
    a97c:	00ffffc4 	movi	r3,-1
    a980:	10c0d026 	beq	r2,r3,acc4 <_malloc_r+0x724>
    a984:	1507c83a 	sub	r3,r2,r20
    a988:	a8c7883a 	add	r3,r21,r3
    a98c:	18c00054 	ori	r3,r3,1
    a990:	e0800017 	ldw	r2,0(fp)
    a994:	9d000215 	stw	r20,8(r19)
    a998:	a0c00115 	stw	r3,4(r20)
    a99c:	a887883a 	add	r3,r21,r2
    a9a0:	e0c00015 	stw	r3,0(fp)
    a9a4:	84c00e26 	beq	r16,r19,a9e0 <_malloc_r+0x440>
    a9a8:	018003c4 	movi	r6,15
    a9ac:	3580a02e 	bgeu	r6,r22,ac30 <_malloc_r+0x690>
    a9b0:	81400117 	ldw	r5,4(r16)
    a9b4:	013ffe04 	movi	r4,-8
    a9b8:	b0bffd04 	addi	r2,r22,-12
    a9bc:	1104703a 	and	r2,r2,r4
    a9c0:	2900004c 	andi	r4,r5,1
    a9c4:	1108b03a 	or	r4,r2,r4
    a9c8:	81000115 	stw	r4,4(r16)
    a9cc:	01400144 	movi	r5,5
    a9d0:	8089883a 	add	r4,r16,r2
    a9d4:	21400115 	stw	r5,4(r4)
    a9d8:	21400215 	stw	r5,8(r4)
    a9dc:	3080c036 	bltu	r6,r2,ace0 <_malloc_r+0x740>
    a9e0:	008000b4 	movhi	r2,2
    a9e4:	1091bb04 	addi	r2,r2,18156
    a9e8:	11000017 	ldw	r4,0(r2)
    a9ec:	20c0012e 	bgeu	r4,r3,a9f4 <_malloc_r+0x454>
    a9f0:	10c00015 	stw	r3,0(r2)
    a9f4:	008000b4 	movhi	r2,2
    a9f8:	1091ba04 	addi	r2,r2,18152
    a9fc:	11000017 	ldw	r4,0(r2)
    aa00:	9c000217 	ldw	r16,8(r19)
    aa04:	20c0012e 	bgeu	r4,r3,aa0c <_malloc_r+0x46c>
    aa08:	10c00015 	stw	r3,0(r2)
    aa0c:	80c00117 	ldw	r3,4(r16)
    aa10:	00bfff04 	movi	r2,-4
    aa14:	1886703a 	and	r3,r3,r2
    aa18:	1c45c83a 	sub	r2,r3,r17
    aa1c:	1c400236 	bltu	r3,r17,aa28 <_malloc_r+0x488>
    aa20:	00c003c4 	movi	r3,15
    aa24:	18800416 	blt	r3,r2,aa38 <_malloc_r+0x498>
    aa28:	9009883a 	mov	r4,r18
    aa2c:	00137d00 	call	137d0 <__malloc_unlock>
    aa30:	0005883a 	mov	r2,zero
    aa34:	003f0706 	br	a654 <__alt_mem_Flash_flash_data+0xf400a654>
    aa38:	88c00054 	ori	r3,r17,1
    aa3c:	80c00115 	stw	r3,4(r16)
    aa40:	8463883a 	add	r17,r16,r17
    aa44:	10800054 	ori	r2,r2,1
    aa48:	9c400215 	stw	r17,8(r19)
    aa4c:	88800115 	stw	r2,4(r17)
    aa50:	9009883a 	mov	r4,r18
    aa54:	00137d00 	call	137d0 <__malloc_unlock>
    aa58:	80800204 	addi	r2,r16,8
    aa5c:	003efd06 	br	a654 <__alt_mem_Flash_flash_data+0xf400a654>
    aa60:	00800504 	movi	r2,20
    aa64:	10c0482e 	bgeu	r2,r3,ab88 <_malloc_r+0x5e8>
    aa68:	00801504 	movi	r2,84
    aa6c:	10c06836 	bltu	r2,r3,ac10 <_malloc_r+0x670>
    aa70:	8806d33a 	srli	r3,r17,12
    aa74:	19c01b84 	addi	r7,r3,110
    aa78:	39cb883a 	add	r5,r7,r7
    aa7c:	003f0c06 	br	a6b0 <__alt_mem_Flash_flash_data+0xf400a6b0>
    aa80:	3804d27a 	srli	r2,r7,9
    aa84:	01000104 	movi	r4,4
    aa88:	2080422e 	bgeu	r4,r2,ab94 <_malloc_r+0x5f4>
    aa8c:	01000504 	movi	r4,20
    aa90:	20807c36 	bltu	r4,r2,ac84 <_malloc_r+0x6e4>
    aa94:	110016c4 	addi	r4,r2,91
    aa98:	210b883a 	add	r5,r4,r4
    aa9c:	294b883a 	add	r5,r5,r5
    aaa0:	294b883a 	add	r5,r5,r5
    aaa4:	994b883a 	add	r5,r19,r5
    aaa8:	28800217 	ldw	r2,8(r5)
    aaac:	020000b4 	movhi	r8,2
    aab0:	42032304 	addi	r8,r8,3212
    aab4:	11406326 	beq	r2,r5,ac44 <_malloc_r+0x6a4>
    aab8:	01bfff04 	movi	r6,-4
    aabc:	11000117 	ldw	r4,4(r2)
    aac0:	2188703a 	and	r4,r4,r6
    aac4:	3900022e 	bgeu	r7,r4,aad0 <_malloc_r+0x530>
    aac8:	10800217 	ldw	r2,8(r2)
    aacc:	28bffb1e 	bne	r5,r2,aabc <__alt_mem_Flash_flash_data+0xf400aabc>
    aad0:	11800317 	ldw	r6,12(r2)
    aad4:	99000117 	ldw	r4,4(r19)
    aad8:	81800315 	stw	r6,12(r16)
    aadc:	80800215 	stw	r2,8(r16)
    aae0:	34000215 	stw	r16,8(r6)
    aae4:	14000315 	stw	r16,12(r2)
    aae8:	003f2706 	br	a788 <__alt_mem_Flash_flash_data+0xf400a788>
    aaec:	88c00054 	ori	r3,r17,1
    aaf0:	80c00115 	stw	r3,4(r16)
    aaf4:	8463883a 	add	r17,r16,r17
    aaf8:	34400515 	stw	r17,20(r6)
    aafc:	34400415 	stw	r17,16(r6)
    ab00:	10c00054 	ori	r3,r2,1
    ab04:	8a400315 	stw	r9,12(r17)
    ab08:	8a400215 	stw	r9,8(r17)
    ab0c:	88c00115 	stw	r3,4(r17)
    ab10:	88a3883a 	add	r17,r17,r2
    ab14:	88800015 	stw	r2,0(r17)
    ab18:	9009883a 	mov	r4,r18
    ab1c:	00137d00 	call	137d0 <__malloc_unlock>
    ab20:	80800204 	addi	r2,r16,8
    ab24:	003ecb06 	br	a654 <__alt_mem_Flash_flash_data+0xf400a654>
    ab28:	31000117 	ldw	r4,4(r6)
    ab2c:	003f1606 	br	a788 <__alt_mem_Flash_flash_data+0xf400a788>
    ab30:	63000044 	addi	r12,r12,1
    ab34:	608000cc 	andi	r2,r12,3
    ab38:	5ac00204 	addi	r11,r11,8
    ab3c:	103f2a1e 	bne	r2,zero,a7e8 <__alt_mem_Flash_flash_data+0xf400a7e8>
    ab40:	00002106 	br	abc8 <_malloc_r+0x628>
    ab44:	80800204 	addi	r2,r16,8
    ab48:	84000517 	ldw	r16,20(r16)
    ab4c:	143eb31e 	bne	r2,r16,a61c <__alt_mem_Flash_flash_data+0xf400a61c>
    ab50:	18c00084 	addi	r3,r3,2
    ab54:	003eec06 	br	a708 <__alt_mem_Flash_flash_data+0xf400a708>
    ab58:	8085883a 	add	r2,r16,r2
    ab5c:	10c00117 	ldw	r3,4(r2)
    ab60:	81000317 	ldw	r4,12(r16)
    ab64:	81400217 	ldw	r5,8(r16)
    ab68:	18c00054 	ori	r3,r3,1
    ab6c:	10c00115 	stw	r3,4(r2)
    ab70:	29000315 	stw	r4,12(r5)
    ab74:	21400215 	stw	r5,8(r4)
    ab78:	9009883a 	mov	r4,r18
    ab7c:	00137d00 	call	137d0 <__malloc_unlock>
    ab80:	80800204 	addi	r2,r16,8
    ab84:	003eb306 	br	a654 <__alt_mem_Flash_flash_data+0xf400a654>
    ab88:	19c016c4 	addi	r7,r3,91
    ab8c:	39cb883a 	add	r5,r7,r7
    ab90:	003ec706 	br	a6b0 <__alt_mem_Flash_flash_data+0xf400a6b0>
    ab94:	3804d1ba 	srli	r2,r7,6
    ab98:	11000e04 	addi	r4,r2,56
    ab9c:	210b883a 	add	r5,r4,r4
    aba0:	003fbe06 	br	aa9c <__alt_mem_Flash_flash_data+0xf400aa9c>
    aba4:	84ff5d26 	beq	r16,r19,a91c <__alt_mem_Flash_flash_data+0xf400a91c>
    aba8:	9c000217 	ldw	r16,8(r19)
    abac:	00bfff04 	movi	r2,-4
    abb0:	80c00117 	ldw	r3,4(r16)
    abb4:	1886703a 	and	r3,r3,r2
    abb8:	003f9706 	br	aa18 <__alt_mem_Flash_flash_data+0xf400aa18>
    abbc:	52800017 	ldw	r10,0(r10)
    abc0:	18ffffc4 	addi	r3,r3,-1
    abc4:	50805c1e 	bne	r10,r2,ad38 <_malloc_r+0x798>
    abc8:	190000cc 	andi	r4,r3,3
    abcc:	50bffe04 	addi	r2,r10,-8
    abd0:	203ffa1e 	bne	r4,zero,abbc <__alt_mem_Flash_flash_data+0xf400abbc>
    abd4:	98800117 	ldw	r2,4(r19)
    abd8:	0146303a 	nor	r3,zero,r5
    abdc:	1884703a 	and	r2,r3,r2
    abe0:	98800115 	stw	r2,4(r19)
    abe4:	294b883a 	add	r5,r5,r5
    abe8:	117f2e36 	bltu	r2,r5,a8a4 <__alt_mem_Flash_flash_data+0xf400a8a4>
    abec:	283f2d26 	beq	r5,zero,a8a4 <__alt_mem_Flash_flash_data+0xf400a8a4>
    abf0:	1146703a 	and	r3,r2,r5
    abf4:	1800521e 	bne	r3,zero,ad40 <_malloc_r+0x7a0>
    abf8:	6007883a 	mov	r3,r12
    abfc:	294b883a 	add	r5,r5,r5
    ac00:	1148703a 	and	r4,r2,r5
    ac04:	18c00104 	addi	r3,r3,4
    ac08:	203ffc26 	beq	r4,zero,abfc <__alt_mem_Flash_flash_data+0xf400abfc>
    ac0c:	003ef006 	br	a7d0 <__alt_mem_Flash_flash_data+0xf400a7d0>
    ac10:	00805504 	movi	r2,340
    ac14:	10c01336 	bltu	r2,r3,ac64 <_malloc_r+0x6c4>
    ac18:	8806d3fa 	srli	r3,r17,15
    ac1c:	19c01dc4 	addi	r7,r3,119
    ac20:	39cb883a 	add	r5,r7,r7
    ac24:	003ea206 	br	a6b0 <__alt_mem_Flash_flash_data+0xf400a6b0>
    ac28:	00c40004 	movi	r3,4096
    ac2c:	003f4d06 	br	a964 <__alt_mem_Flash_flash_data+0xf400a964>
    ac30:	00800044 	movi	r2,1
    ac34:	a0800115 	stw	r2,4(r20)
    ac38:	a021883a 	mov	r16,r20
    ac3c:	0007883a 	mov	r3,zero
    ac40:	003f7506 	br	aa18 <__alt_mem_Flash_flash_data+0xf400aa18>
    ac44:	200bd0ba 	srai	r5,r4,2
    ac48:	01800044 	movi	r6,1
    ac4c:	41000117 	ldw	r4,4(r8)
    ac50:	314a983a 	sll	r5,r6,r5
    ac54:	100d883a 	mov	r6,r2
    ac58:	2908b03a 	or	r4,r5,r4
    ac5c:	41000115 	stw	r4,4(r8)
    ac60:	003f9d06 	br	aad8 <__alt_mem_Flash_flash_data+0xf400aad8>
    ac64:	00815504 	movi	r2,1364
    ac68:	10c01336 	bltu	r2,r3,acb8 <_malloc_r+0x718>
    ac6c:	8806d4ba 	srli	r3,r17,18
    ac70:	19c01f04 	addi	r7,r3,124
    ac74:	39cb883a 	add	r5,r7,r7
    ac78:	003e8d06 	br	a6b0 <__alt_mem_Flash_flash_data+0xf400a6b0>
    ac7c:	ad400404 	addi	r21,r21,16
    ac80:	003f1d06 	br	a8f8 <__alt_mem_Flash_flash_data+0xf400a8f8>
    ac84:	01001504 	movi	r4,84
    ac88:	20801c36 	bltu	r4,r2,acfc <_malloc_r+0x75c>
    ac8c:	3804d33a 	srli	r2,r7,12
    ac90:	11001b84 	addi	r4,r2,110
    ac94:	210b883a 	add	r5,r4,r4
    ac98:	003f8006 	br	aa9c <__alt_mem_Flash_flash_data+0xf400aa9c>
    ac9c:	3083ffcc 	andi	r2,r6,4095
    aca0:	103f241e 	bne	r2,zero,a934 <__alt_mem_Flash_flash_data+0xf400a934>
    aca4:	99000217 	ldw	r4,8(r19)
    aca8:	ad85883a 	add	r2,r21,r22
    acac:	10800054 	ori	r2,r2,1
    acb0:	20800115 	stw	r2,4(r4)
    acb4:	003f4a06 	br	a9e0 <__alt_mem_Flash_flash_data+0xf400a9e0>
    acb8:	01403f04 	movi	r5,252
    acbc:	01c01f84 	movi	r7,126
    acc0:	003e7b06 	br	a6b0 <__alt_mem_Flash_flash_data+0xf400a6b0>
    acc4:	00c00044 	movi	r3,1
    acc8:	002b883a 	mov	r21,zero
    accc:	003f3006 	br	a990 <__alt_mem_Flash_flash_data+0xf400a990>
    acd0:	008000b4 	movhi	r2,2
    acd4:	10899b04 	addi	r2,r2,9836
    acd8:	15000015 	stw	r20,0(r2)
    acdc:	003f1b06 	br	a94c <__alt_mem_Flash_flash_data+0xf400a94c>
    ace0:	9009883a 	mov	r4,r18
    ace4:	81400204 	addi	r5,r16,8
    ace8:	00099d00 	call	99d0 <_free_r>
    acec:	008000b4 	movhi	r2,2
    acf0:	1091de04 	addi	r2,r2,18296
    acf4:	10c00017 	ldw	r3,0(r2)
    acf8:	003f3906 	br	a9e0 <__alt_mem_Flash_flash_data+0xf400a9e0>
    acfc:	01005504 	movi	r4,340
    ad00:	20800436 	bltu	r4,r2,ad14 <_malloc_r+0x774>
    ad04:	3804d3fa 	srli	r2,r7,15
    ad08:	11001dc4 	addi	r4,r2,119
    ad0c:	210b883a 	add	r5,r4,r4
    ad10:	003f6206 	br	aa9c <__alt_mem_Flash_flash_data+0xf400aa9c>
    ad14:	01015504 	movi	r4,1364
    ad18:	20800436 	bltu	r4,r2,ad2c <_malloc_r+0x78c>
    ad1c:	3804d4ba 	srli	r2,r7,18
    ad20:	11001f04 	addi	r4,r2,124
    ad24:	210b883a 	add	r5,r4,r4
    ad28:	003f5c06 	br	aa9c <__alt_mem_Flash_flash_data+0xf400aa9c>
    ad2c:	01403f04 	movi	r5,252
    ad30:	01001f84 	movi	r4,126
    ad34:	003f5906 	br	aa9c <__alt_mem_Flash_flash_data+0xf400aa9c>
    ad38:	98800117 	ldw	r2,4(r19)
    ad3c:	003fa906 	br	abe4 <__alt_mem_Flash_flash_data+0xf400abe4>
    ad40:	6007883a 	mov	r3,r12
    ad44:	003ea206 	br	a7d0 <__alt_mem_Flash_flash_data+0xf400a7d0>

0000ad48 <memchr>:
    ad48:	208000cc 	andi	r2,r4,3
    ad4c:	280f883a 	mov	r7,r5
    ad50:	10003526 	beq	r2,zero,ae28 <memchr+0xe0>
    ad54:	30bfffc4 	addi	r2,r6,-1
    ad58:	30001b26 	beq	r6,zero,adc8 <memchr+0x80>
    ad5c:	21800003 	ldbu	r6,0(r4)
    ad60:	28c03fcc 	andi	r3,r5,255
    ad64:	30c01a26 	beq	r6,r3,add0 <memchr+0x88>
    ad68:	180d883a 	mov	r6,r3
    ad6c:	00000406 	br	ad80 <memchr+0x38>
    ad70:	10001526 	beq	r2,zero,adc8 <memchr+0x80>
    ad74:	20c00003 	ldbu	r3,0(r4)
    ad78:	10bfffc4 	addi	r2,r2,-1
    ad7c:	19801426 	beq	r3,r6,add0 <memchr+0x88>
    ad80:	21000044 	addi	r4,r4,1
    ad84:	20c000cc 	andi	r3,r4,3
    ad88:	183ff91e 	bne	r3,zero,ad70 <__alt_mem_Flash_flash_data+0xf400ad70>
    ad8c:	024000c4 	movi	r9,3
    ad90:	48801136 	bltu	r9,r2,add8 <memchr+0x90>
    ad94:	10000c26 	beq	r2,zero,adc8 <memchr+0x80>
    ad98:	20c00003 	ldbu	r3,0(r4)
    ad9c:	29403fcc 	andi	r5,r5,255
    ada0:	19400b26 	beq	r3,r5,add0 <memchr+0x88>
    ada4:	20c00044 	addi	r3,r4,1
    ada8:	2085883a 	add	r2,r4,r2
    adac:	39803fcc 	andi	r6,r7,255
    adb0:	00000306 	br	adc0 <memchr+0x78>
    adb4:	18c00044 	addi	r3,r3,1
    adb8:	197fffc3 	ldbu	r5,-1(r3)
    adbc:	29800426 	beq	r5,r6,add0 <memchr+0x88>
    adc0:	1809883a 	mov	r4,r3
    adc4:	18bffb1e 	bne	r3,r2,adb4 <__alt_mem_Flash_flash_data+0xf400adb4>
    adc8:	0005883a 	mov	r2,zero
    adcc:	f800283a 	ret
    add0:	2005883a 	mov	r2,r4
    add4:	f800283a 	ret
    add8:	28c03fcc 	andi	r3,r5,255
    addc:	1810923a 	slli	r8,r3,8
    ade0:	02ffbff4 	movhi	r11,65279
    ade4:	02a02074 	movhi	r10,32897
    ade8:	40c6b03a 	or	r3,r8,r3
    adec:	1810943a 	slli	r8,r3,16
    adf0:	5affbfc4 	addi	r11,r11,-257
    adf4:	52a02004 	addi	r10,r10,-32640
    adf8:	40d0b03a 	or	r8,r8,r3
    adfc:	20c00017 	ldw	r3,0(r4)
    ae00:	40c6f03a 	xor	r3,r8,r3
    ae04:	1acd883a 	add	r6,r3,r11
    ae08:	00c6303a 	nor	r3,zero,r3
    ae0c:	30c6703a 	and	r3,r6,r3
    ae10:	1a86703a 	and	r3,r3,r10
    ae14:	183fdf1e 	bne	r3,zero,ad94 <__alt_mem_Flash_flash_data+0xf400ad94>
    ae18:	10bfff04 	addi	r2,r2,-4
    ae1c:	21000104 	addi	r4,r4,4
    ae20:	48bff636 	bltu	r9,r2,adfc <__alt_mem_Flash_flash_data+0xf400adfc>
    ae24:	003fdb06 	br	ad94 <__alt_mem_Flash_flash_data+0xf400ad94>
    ae28:	3005883a 	mov	r2,r6
    ae2c:	003fd706 	br	ad8c <__alt_mem_Flash_flash_data+0xf400ad8c>

0000ae30 <memcpy>:
    ae30:	deffff04 	addi	sp,sp,-4
    ae34:	dc000015 	stw	r16,0(sp)
    ae38:	00c003c4 	movi	r3,15
    ae3c:	2005883a 	mov	r2,r4
    ae40:	1980432e 	bgeu	r3,r6,af50 <memcpy+0x120>
    ae44:	2146b03a 	or	r3,r4,r5
    ae48:	18c000cc 	andi	r3,r3,3
    ae4c:	1800421e 	bne	r3,zero,af58 <memcpy+0x128>
    ae50:	343ffc04 	addi	r16,r6,-16
    ae54:	8020d13a 	srli	r16,r16,4
    ae58:	28c00104 	addi	r3,r5,4
    ae5c:	23400104 	addi	r13,r4,4
    ae60:	801e913a 	slli	r15,r16,4
    ae64:	2b000204 	addi	r12,r5,8
    ae68:	22c00204 	addi	r11,r4,8
    ae6c:	7bc00504 	addi	r15,r15,20
    ae70:	2a800304 	addi	r10,r5,12
    ae74:	22400304 	addi	r9,r4,12
    ae78:	2bdf883a 	add	r15,r5,r15
    ae7c:	2811883a 	mov	r8,r5
    ae80:	200f883a 	mov	r7,r4
    ae84:	41000017 	ldw	r4,0(r8)
    ae88:	39c00404 	addi	r7,r7,16
    ae8c:	18c00404 	addi	r3,r3,16
    ae90:	393ffc15 	stw	r4,-16(r7)
    ae94:	1bbffc17 	ldw	r14,-16(r3)
    ae98:	6b400404 	addi	r13,r13,16
    ae9c:	5ac00404 	addi	r11,r11,16
    aea0:	6bbffc15 	stw	r14,-16(r13)
    aea4:	63800017 	ldw	r14,0(r12)
    aea8:	4a400404 	addi	r9,r9,16
    aeac:	42000404 	addi	r8,r8,16
    aeb0:	5bbffc15 	stw	r14,-16(r11)
    aeb4:	53800017 	ldw	r14,0(r10)
    aeb8:	63000404 	addi	r12,r12,16
    aebc:	52800404 	addi	r10,r10,16
    aec0:	4bbffc15 	stw	r14,-16(r9)
    aec4:	1bffef1e 	bne	r3,r15,ae84 <__alt_mem_Flash_flash_data+0xf400ae84>
    aec8:	81c00044 	addi	r7,r16,1
    aecc:	380e913a 	slli	r7,r7,4
    aed0:	310003cc 	andi	r4,r6,15
    aed4:	02c000c4 	movi	r11,3
    aed8:	11c7883a 	add	r3,r2,r7
    aedc:	29cb883a 	add	r5,r5,r7
    aee0:	59001f2e 	bgeu	r11,r4,af60 <memcpy+0x130>
    aee4:	1813883a 	mov	r9,r3
    aee8:	2811883a 	mov	r8,r5
    aeec:	200f883a 	mov	r7,r4
    aef0:	42800017 	ldw	r10,0(r8)
    aef4:	4a400104 	addi	r9,r9,4
    aef8:	39ffff04 	addi	r7,r7,-4
    aefc:	4abfff15 	stw	r10,-4(r9)
    af00:	42000104 	addi	r8,r8,4
    af04:	59fffa36 	bltu	r11,r7,aef0 <__alt_mem_Flash_flash_data+0xf400aef0>
    af08:	213fff04 	addi	r4,r4,-4
    af0c:	2008d0ba 	srli	r4,r4,2
    af10:	318000cc 	andi	r6,r6,3
    af14:	21000044 	addi	r4,r4,1
    af18:	2109883a 	add	r4,r4,r4
    af1c:	2109883a 	add	r4,r4,r4
    af20:	1907883a 	add	r3,r3,r4
    af24:	290b883a 	add	r5,r5,r4
    af28:	30000626 	beq	r6,zero,af44 <memcpy+0x114>
    af2c:	198d883a 	add	r6,r3,r6
    af30:	29c00003 	ldbu	r7,0(r5)
    af34:	18c00044 	addi	r3,r3,1
    af38:	29400044 	addi	r5,r5,1
    af3c:	19ffffc5 	stb	r7,-1(r3)
    af40:	19bffb1e 	bne	r3,r6,af30 <__alt_mem_Flash_flash_data+0xf400af30>
    af44:	dc000017 	ldw	r16,0(sp)
    af48:	dec00104 	addi	sp,sp,4
    af4c:	f800283a 	ret
    af50:	2007883a 	mov	r3,r4
    af54:	003ff406 	br	af28 <__alt_mem_Flash_flash_data+0xf400af28>
    af58:	2007883a 	mov	r3,r4
    af5c:	003ff306 	br	af2c <__alt_mem_Flash_flash_data+0xf400af2c>
    af60:	200d883a 	mov	r6,r4
    af64:	003ff006 	br	af28 <__alt_mem_Flash_flash_data+0xf400af28>

0000af68 <memmove>:
    af68:	2005883a 	mov	r2,r4
    af6c:	29000b2e 	bgeu	r5,r4,af9c <memmove+0x34>
    af70:	298f883a 	add	r7,r5,r6
    af74:	21c0092e 	bgeu	r4,r7,af9c <memmove+0x34>
    af78:	2187883a 	add	r3,r4,r6
    af7c:	198bc83a 	sub	r5,r3,r6
    af80:	30004b26 	beq	r6,zero,b0b0 <memmove+0x148>
    af84:	39ffffc4 	addi	r7,r7,-1
    af88:	39000003 	ldbu	r4,0(r7)
    af8c:	18ffffc4 	addi	r3,r3,-1
    af90:	19000005 	stb	r4,0(r3)
    af94:	197ffb1e 	bne	r3,r5,af84 <__alt_mem_Flash_flash_data+0xf400af84>
    af98:	f800283a 	ret
    af9c:	00c003c4 	movi	r3,15
    afa0:	1980412e 	bgeu	r3,r6,b0a8 <memmove+0x140>
    afa4:	1146b03a 	or	r3,r2,r5
    afa8:	18c000cc 	andi	r3,r3,3
    afac:	1800411e 	bne	r3,zero,b0b4 <memmove+0x14c>
    afb0:	33fffc04 	addi	r15,r6,-16
    afb4:	781ed13a 	srli	r15,r15,4
    afb8:	28c00104 	addi	r3,r5,4
    afbc:	13400104 	addi	r13,r2,4
    afc0:	781c913a 	slli	r14,r15,4
    afc4:	2b000204 	addi	r12,r5,8
    afc8:	12c00204 	addi	r11,r2,8
    afcc:	73800504 	addi	r14,r14,20
    afd0:	2a800304 	addi	r10,r5,12
    afd4:	12400304 	addi	r9,r2,12
    afd8:	2b9d883a 	add	r14,r5,r14
    afdc:	2811883a 	mov	r8,r5
    afe0:	100f883a 	mov	r7,r2
    afe4:	41000017 	ldw	r4,0(r8)
    afe8:	39c00404 	addi	r7,r7,16
    afec:	18c00404 	addi	r3,r3,16
    aff0:	393ffc15 	stw	r4,-16(r7)
    aff4:	193ffc17 	ldw	r4,-16(r3)
    aff8:	6b400404 	addi	r13,r13,16
    affc:	5ac00404 	addi	r11,r11,16
    b000:	693ffc15 	stw	r4,-16(r13)
    b004:	61000017 	ldw	r4,0(r12)
    b008:	4a400404 	addi	r9,r9,16
    b00c:	42000404 	addi	r8,r8,16
    b010:	593ffc15 	stw	r4,-16(r11)
    b014:	51000017 	ldw	r4,0(r10)
    b018:	63000404 	addi	r12,r12,16
    b01c:	52800404 	addi	r10,r10,16
    b020:	493ffc15 	stw	r4,-16(r9)
    b024:	1bbfef1e 	bne	r3,r14,afe4 <__alt_mem_Flash_flash_data+0xf400afe4>
    b028:	79000044 	addi	r4,r15,1
    b02c:	2008913a 	slli	r4,r4,4
    b030:	328003cc 	andi	r10,r6,15
    b034:	02c000c4 	movi	r11,3
    b038:	1107883a 	add	r3,r2,r4
    b03c:	290b883a 	add	r5,r5,r4
    b040:	5a801e2e 	bgeu	r11,r10,b0bc <memmove+0x154>
    b044:	1813883a 	mov	r9,r3
    b048:	2811883a 	mov	r8,r5
    b04c:	500f883a 	mov	r7,r10
    b050:	41000017 	ldw	r4,0(r8)
    b054:	4a400104 	addi	r9,r9,4
    b058:	39ffff04 	addi	r7,r7,-4
    b05c:	493fff15 	stw	r4,-4(r9)
    b060:	42000104 	addi	r8,r8,4
    b064:	59fffa36 	bltu	r11,r7,b050 <__alt_mem_Flash_flash_data+0xf400b050>
    b068:	513fff04 	addi	r4,r10,-4
    b06c:	2008d0ba 	srli	r4,r4,2
    b070:	318000cc 	andi	r6,r6,3
    b074:	21000044 	addi	r4,r4,1
    b078:	2109883a 	add	r4,r4,r4
    b07c:	2109883a 	add	r4,r4,r4
    b080:	1907883a 	add	r3,r3,r4
    b084:	290b883a 	add	r5,r5,r4
    b088:	30000926 	beq	r6,zero,b0b0 <memmove+0x148>
    b08c:	198d883a 	add	r6,r3,r6
    b090:	29c00003 	ldbu	r7,0(r5)
    b094:	18c00044 	addi	r3,r3,1
    b098:	29400044 	addi	r5,r5,1
    b09c:	19ffffc5 	stb	r7,-1(r3)
    b0a0:	19bffb1e 	bne	r3,r6,b090 <__alt_mem_Flash_flash_data+0xf400b090>
    b0a4:	f800283a 	ret
    b0a8:	1007883a 	mov	r3,r2
    b0ac:	003ff606 	br	b088 <__alt_mem_Flash_flash_data+0xf400b088>
    b0b0:	f800283a 	ret
    b0b4:	1007883a 	mov	r3,r2
    b0b8:	003ff406 	br	b08c <__alt_mem_Flash_flash_data+0xf400b08c>
    b0bc:	500d883a 	mov	r6,r10
    b0c0:	003ff106 	br	b088 <__alt_mem_Flash_flash_data+0xf400b088>

0000b0c4 <memset>:
    b0c4:	20c000cc 	andi	r3,r4,3
    b0c8:	2005883a 	mov	r2,r4
    b0cc:	18004326 	beq	r3,zero,b1dc <memset+0x118>
    b0d0:	31ffffc4 	addi	r7,r6,-1
    b0d4:	30004026 	beq	r6,zero,b1d8 <memset+0x114>
    b0d8:	2813883a 	mov	r9,r5
    b0dc:	200d883a 	mov	r6,r4
    b0e0:	2007883a 	mov	r3,r4
    b0e4:	00000406 	br	b0f8 <memset+0x34>
    b0e8:	3a3fffc4 	addi	r8,r7,-1
    b0ec:	31800044 	addi	r6,r6,1
    b0f0:	38003926 	beq	r7,zero,b1d8 <memset+0x114>
    b0f4:	400f883a 	mov	r7,r8
    b0f8:	18c00044 	addi	r3,r3,1
    b0fc:	32400005 	stb	r9,0(r6)
    b100:	1a0000cc 	andi	r8,r3,3
    b104:	403ff81e 	bne	r8,zero,b0e8 <__alt_mem_Flash_flash_data+0xf400b0e8>
    b108:	010000c4 	movi	r4,3
    b10c:	21c02d2e 	bgeu	r4,r7,b1c4 <memset+0x100>
    b110:	29803fcc 	andi	r6,r5,255
    b114:	3008923a 	slli	r4,r6,8
    b118:	218cb03a 	or	r6,r4,r6
    b11c:	3008943a 	slli	r4,r6,16
    b120:	218cb03a 	or	r6,r4,r6
    b124:	010003c4 	movi	r4,15
    b128:	21c0182e 	bgeu	r4,r7,b18c <memset+0xc8>
    b12c:	3b3ffc04 	addi	r12,r7,-16
    b130:	6018d13a 	srli	r12,r12,4
    b134:	1a000104 	addi	r8,r3,4
    b138:	1ac00204 	addi	r11,r3,8
    b13c:	6008913a 	slli	r4,r12,4
    b140:	1a800304 	addi	r10,r3,12
    b144:	1813883a 	mov	r9,r3
    b148:	21000504 	addi	r4,r4,20
    b14c:	1909883a 	add	r4,r3,r4
    b150:	49800015 	stw	r6,0(r9)
    b154:	41800015 	stw	r6,0(r8)
    b158:	59800015 	stw	r6,0(r11)
    b15c:	51800015 	stw	r6,0(r10)
    b160:	42000404 	addi	r8,r8,16
    b164:	4a400404 	addi	r9,r9,16
    b168:	5ac00404 	addi	r11,r11,16
    b16c:	52800404 	addi	r10,r10,16
    b170:	413ff71e 	bne	r8,r4,b150 <__alt_mem_Flash_flash_data+0xf400b150>
    b174:	63000044 	addi	r12,r12,1
    b178:	6018913a 	slli	r12,r12,4
    b17c:	39c003cc 	andi	r7,r7,15
    b180:	010000c4 	movi	r4,3
    b184:	1b07883a 	add	r3,r3,r12
    b188:	21c00e2e 	bgeu	r4,r7,b1c4 <memset+0x100>
    b18c:	1813883a 	mov	r9,r3
    b190:	3811883a 	mov	r8,r7
    b194:	010000c4 	movi	r4,3
    b198:	49800015 	stw	r6,0(r9)
    b19c:	423fff04 	addi	r8,r8,-4
    b1a0:	4a400104 	addi	r9,r9,4
    b1a4:	223ffc36 	bltu	r4,r8,b198 <__alt_mem_Flash_flash_data+0xf400b198>
    b1a8:	393fff04 	addi	r4,r7,-4
    b1ac:	2008d0ba 	srli	r4,r4,2
    b1b0:	39c000cc 	andi	r7,r7,3
    b1b4:	21000044 	addi	r4,r4,1
    b1b8:	2109883a 	add	r4,r4,r4
    b1bc:	2109883a 	add	r4,r4,r4
    b1c0:	1907883a 	add	r3,r3,r4
    b1c4:	38000426 	beq	r7,zero,b1d8 <memset+0x114>
    b1c8:	19cf883a 	add	r7,r3,r7
    b1cc:	19400005 	stb	r5,0(r3)
    b1d0:	18c00044 	addi	r3,r3,1
    b1d4:	19fffd1e 	bne	r3,r7,b1cc <__alt_mem_Flash_flash_data+0xf400b1cc>
    b1d8:	f800283a 	ret
    b1dc:	2007883a 	mov	r3,r4
    b1e0:	300f883a 	mov	r7,r6
    b1e4:	003fc806 	br	b108 <__alt_mem_Flash_flash_data+0xf400b108>

0000b1e8 <_Balloc>:
    b1e8:	20801317 	ldw	r2,76(r4)
    b1ec:	defffc04 	addi	sp,sp,-16
    b1f0:	dc400115 	stw	r17,4(sp)
    b1f4:	dc000015 	stw	r16,0(sp)
    b1f8:	dfc00315 	stw	ra,12(sp)
    b1fc:	dc800215 	stw	r18,8(sp)
    b200:	2023883a 	mov	r17,r4
    b204:	2821883a 	mov	r16,r5
    b208:	10000f26 	beq	r2,zero,b248 <_Balloc+0x60>
    b20c:	8407883a 	add	r3,r16,r16
    b210:	18c7883a 	add	r3,r3,r3
    b214:	10c7883a 	add	r3,r2,r3
    b218:	18800017 	ldw	r2,0(r3)
    b21c:	10001126 	beq	r2,zero,b264 <_Balloc+0x7c>
    b220:	11000017 	ldw	r4,0(r2)
    b224:	19000015 	stw	r4,0(r3)
    b228:	10000415 	stw	zero,16(r2)
    b22c:	10000315 	stw	zero,12(r2)
    b230:	dfc00317 	ldw	ra,12(sp)
    b234:	dc800217 	ldw	r18,8(sp)
    b238:	dc400117 	ldw	r17,4(sp)
    b23c:	dc000017 	ldw	r16,0(sp)
    b240:	dec00404 	addi	sp,sp,16
    b244:	f800283a 	ret
    b248:	01400104 	movi	r5,4
    b24c:	01800844 	movi	r6,33
    b250:	000f1100 	call	f110 <_calloc_r>
    b254:	88801315 	stw	r2,76(r17)
    b258:	103fec1e 	bne	r2,zero,b20c <__alt_mem_Flash_flash_data+0xf400b20c>
    b25c:	0005883a 	mov	r2,zero
    b260:	003ff306 	br	b230 <__alt_mem_Flash_flash_data+0xf400b230>
    b264:	01400044 	movi	r5,1
    b268:	2c24983a 	sll	r18,r5,r16
    b26c:	8809883a 	mov	r4,r17
    b270:	91800144 	addi	r6,r18,5
    b274:	318d883a 	add	r6,r6,r6
    b278:	318d883a 	add	r6,r6,r6
    b27c:	000f1100 	call	f110 <_calloc_r>
    b280:	103ff626 	beq	r2,zero,b25c <__alt_mem_Flash_flash_data+0xf400b25c>
    b284:	14000115 	stw	r16,4(r2)
    b288:	14800215 	stw	r18,8(r2)
    b28c:	003fe606 	br	b228 <__alt_mem_Flash_flash_data+0xf400b228>

0000b290 <_Bfree>:
    b290:	28000826 	beq	r5,zero,b2b4 <_Bfree+0x24>
    b294:	28c00117 	ldw	r3,4(r5)
    b298:	20801317 	ldw	r2,76(r4)
    b29c:	18c7883a 	add	r3,r3,r3
    b2a0:	18c7883a 	add	r3,r3,r3
    b2a4:	10c5883a 	add	r2,r2,r3
    b2a8:	10c00017 	ldw	r3,0(r2)
    b2ac:	28c00015 	stw	r3,0(r5)
    b2b0:	11400015 	stw	r5,0(r2)
    b2b4:	f800283a 	ret

0000b2b8 <__multadd>:
    b2b8:	defffa04 	addi	sp,sp,-24
    b2bc:	dc000115 	stw	r16,4(sp)
    b2c0:	2c000417 	ldw	r16,16(r5)
    b2c4:	dc800315 	stw	r18,12(sp)
    b2c8:	dc400215 	stw	r17,8(sp)
    b2cc:	dfc00515 	stw	ra,20(sp)
    b2d0:	dcc00415 	stw	r19,16(sp)
    b2d4:	2823883a 	mov	r17,r5
    b2d8:	2025883a 	mov	r18,r4
    b2dc:	2a400504 	addi	r9,r5,20
    b2e0:	0015883a 	mov	r10,zero
    b2e4:	4a000017 	ldw	r8,0(r9)
    b2e8:	4a400104 	addi	r9,r9,4
    b2ec:	52800044 	addi	r10,r10,1
    b2f0:	40ffffcc 	andi	r3,r8,65535
    b2f4:	1987383a 	mul	r3,r3,r6
    b2f8:	4010d43a 	srli	r8,r8,16
    b2fc:	19cf883a 	add	r7,r3,r7
    b300:	4191383a 	mul	r8,r8,r6
    b304:	3816d43a 	srli	r11,r7,16
    b308:	38ffffcc 	andi	r3,r7,65535
    b30c:	5a0f883a 	add	r7,r11,r8
    b310:	3810943a 	slli	r8,r7,16
    b314:	380ed43a 	srli	r7,r7,16
    b318:	40c7883a 	add	r3,r8,r3
    b31c:	48ffff15 	stw	r3,-4(r9)
    b320:	543ff016 	blt	r10,r16,b2e4 <__alt_mem_Flash_flash_data+0xf400b2e4>
    b324:	38000926 	beq	r7,zero,b34c <__multadd+0x94>
    b328:	88800217 	ldw	r2,8(r17)
    b32c:	80800f0e 	bge	r16,r2,b36c <__multadd+0xb4>
    b330:	80800144 	addi	r2,r16,5
    b334:	1085883a 	add	r2,r2,r2
    b338:	1085883a 	add	r2,r2,r2
    b33c:	8885883a 	add	r2,r17,r2
    b340:	11c00015 	stw	r7,0(r2)
    b344:	84000044 	addi	r16,r16,1
    b348:	8c000415 	stw	r16,16(r17)
    b34c:	8805883a 	mov	r2,r17
    b350:	dfc00517 	ldw	ra,20(sp)
    b354:	dcc00417 	ldw	r19,16(sp)
    b358:	dc800317 	ldw	r18,12(sp)
    b35c:	dc400217 	ldw	r17,8(sp)
    b360:	dc000117 	ldw	r16,4(sp)
    b364:	dec00604 	addi	sp,sp,24
    b368:	f800283a 	ret
    b36c:	89400117 	ldw	r5,4(r17)
    b370:	9009883a 	mov	r4,r18
    b374:	d9c00015 	stw	r7,0(sp)
    b378:	29400044 	addi	r5,r5,1
    b37c:	000b1e80 	call	b1e8 <_Balloc>
    b380:	89800417 	ldw	r6,16(r17)
    b384:	11000304 	addi	r4,r2,12
    b388:	89400304 	addi	r5,r17,12
    b38c:	31800084 	addi	r6,r6,2
    b390:	318d883a 	add	r6,r6,r6
    b394:	318d883a 	add	r6,r6,r6
    b398:	1027883a 	mov	r19,r2
    b39c:	000ae300 	call	ae30 <memcpy>
    b3a0:	d9c00017 	ldw	r7,0(sp)
    b3a4:	88000a26 	beq	r17,zero,b3d0 <__multadd+0x118>
    b3a8:	89000117 	ldw	r4,4(r17)
    b3ac:	90c01317 	ldw	r3,76(r18)
    b3b0:	2109883a 	add	r4,r4,r4
    b3b4:	2109883a 	add	r4,r4,r4
    b3b8:	1907883a 	add	r3,r3,r4
    b3bc:	18800017 	ldw	r2,0(r3)
    b3c0:	88800015 	stw	r2,0(r17)
    b3c4:	1c400015 	stw	r17,0(r3)
    b3c8:	9823883a 	mov	r17,r19
    b3cc:	003fd806 	br	b330 <__alt_mem_Flash_flash_data+0xf400b330>
    b3d0:	9823883a 	mov	r17,r19
    b3d4:	003fd606 	br	b330 <__alt_mem_Flash_flash_data+0xf400b330>

0000b3d8 <__s2b>:
    b3d8:	defff904 	addi	sp,sp,-28
    b3dc:	dc400115 	stw	r17,4(sp)
    b3e0:	dc000015 	stw	r16,0(sp)
    b3e4:	2023883a 	mov	r17,r4
    b3e8:	2821883a 	mov	r16,r5
    b3ec:	39000204 	addi	r4,r7,8
    b3f0:	01400244 	movi	r5,9
    b3f4:	dcc00315 	stw	r19,12(sp)
    b3f8:	dc800215 	stw	r18,8(sp)
    b3fc:	dfc00615 	stw	ra,24(sp)
    b400:	dd400515 	stw	r21,20(sp)
    b404:	dd000415 	stw	r20,16(sp)
    b408:	3825883a 	mov	r18,r7
    b40c:	3027883a 	mov	r19,r6
    b410:	00105140 	call	10514 <__divsi3>
    b414:	00c00044 	movi	r3,1
    b418:	000b883a 	mov	r5,zero
    b41c:	1880030e 	bge	r3,r2,b42c <__s2b+0x54>
    b420:	18c7883a 	add	r3,r3,r3
    b424:	29400044 	addi	r5,r5,1
    b428:	18bffd16 	blt	r3,r2,b420 <__alt_mem_Flash_flash_data+0xf400b420>
    b42c:	8809883a 	mov	r4,r17
    b430:	000b1e80 	call	b1e8 <_Balloc>
    b434:	d8c00717 	ldw	r3,28(sp)
    b438:	10c00515 	stw	r3,20(r2)
    b43c:	00c00044 	movi	r3,1
    b440:	10c00415 	stw	r3,16(r2)
    b444:	00c00244 	movi	r3,9
    b448:	1cc0210e 	bge	r3,r19,b4d0 <__s2b+0xf8>
    b44c:	80eb883a 	add	r21,r16,r3
    b450:	a829883a 	mov	r20,r21
    b454:	84e1883a 	add	r16,r16,r19
    b458:	a1c00007 	ldb	r7,0(r20)
    b45c:	8809883a 	mov	r4,r17
    b460:	a5000044 	addi	r20,r20,1
    b464:	100b883a 	mov	r5,r2
    b468:	01800284 	movi	r6,10
    b46c:	39fff404 	addi	r7,r7,-48
    b470:	000b2b80 	call	b2b8 <__multadd>
    b474:	a43ff81e 	bne	r20,r16,b458 <__alt_mem_Flash_flash_data+0xf400b458>
    b478:	ace1883a 	add	r16,r21,r19
    b47c:	843ffe04 	addi	r16,r16,-8
    b480:	9c800a0e 	bge	r19,r18,b4ac <__s2b+0xd4>
    b484:	94e5c83a 	sub	r18,r18,r19
    b488:	84a5883a 	add	r18,r16,r18
    b48c:	81c00007 	ldb	r7,0(r16)
    b490:	8809883a 	mov	r4,r17
    b494:	84000044 	addi	r16,r16,1
    b498:	100b883a 	mov	r5,r2
    b49c:	01800284 	movi	r6,10
    b4a0:	39fff404 	addi	r7,r7,-48
    b4a4:	000b2b80 	call	b2b8 <__multadd>
    b4a8:	84bff81e 	bne	r16,r18,b48c <__alt_mem_Flash_flash_data+0xf400b48c>
    b4ac:	dfc00617 	ldw	ra,24(sp)
    b4b0:	dd400517 	ldw	r21,20(sp)
    b4b4:	dd000417 	ldw	r20,16(sp)
    b4b8:	dcc00317 	ldw	r19,12(sp)
    b4bc:	dc800217 	ldw	r18,8(sp)
    b4c0:	dc400117 	ldw	r17,4(sp)
    b4c4:	dc000017 	ldw	r16,0(sp)
    b4c8:	dec00704 	addi	sp,sp,28
    b4cc:	f800283a 	ret
    b4d0:	84000284 	addi	r16,r16,10
    b4d4:	1827883a 	mov	r19,r3
    b4d8:	003fe906 	br	b480 <__alt_mem_Flash_flash_data+0xf400b480>

0000b4dc <__hi0bits>:
    b4dc:	20bfffec 	andhi	r2,r4,65535
    b4e0:	1000141e 	bne	r2,zero,b534 <__hi0bits+0x58>
    b4e4:	2008943a 	slli	r4,r4,16
    b4e8:	00800404 	movi	r2,16
    b4ec:	20ffc02c 	andhi	r3,r4,65280
    b4f0:	1800021e 	bne	r3,zero,b4fc <__hi0bits+0x20>
    b4f4:	2008923a 	slli	r4,r4,8
    b4f8:	10800204 	addi	r2,r2,8
    b4fc:	20fc002c 	andhi	r3,r4,61440
    b500:	1800021e 	bne	r3,zero,b50c <__hi0bits+0x30>
    b504:	2008913a 	slli	r4,r4,4
    b508:	10800104 	addi	r2,r2,4
    b50c:	20f0002c 	andhi	r3,r4,49152
    b510:	1800031e 	bne	r3,zero,b520 <__hi0bits+0x44>
    b514:	2109883a 	add	r4,r4,r4
    b518:	10800084 	addi	r2,r2,2
    b51c:	2109883a 	add	r4,r4,r4
    b520:	20000316 	blt	r4,zero,b530 <__hi0bits+0x54>
    b524:	2110002c 	andhi	r4,r4,16384
    b528:	2000041e 	bne	r4,zero,b53c <__hi0bits+0x60>
    b52c:	00800804 	movi	r2,32
    b530:	f800283a 	ret
    b534:	0005883a 	mov	r2,zero
    b538:	003fec06 	br	b4ec <__alt_mem_Flash_flash_data+0xf400b4ec>
    b53c:	10800044 	addi	r2,r2,1
    b540:	f800283a 	ret

0000b544 <__lo0bits>:
    b544:	20c00017 	ldw	r3,0(r4)
    b548:	188001cc 	andi	r2,r3,7
    b54c:	10000826 	beq	r2,zero,b570 <__lo0bits+0x2c>
    b550:	1880004c 	andi	r2,r3,1
    b554:	1000211e 	bne	r2,zero,b5dc <__lo0bits+0x98>
    b558:	1880008c 	andi	r2,r3,2
    b55c:	1000211e 	bne	r2,zero,b5e4 <__lo0bits+0xa0>
    b560:	1806d0ba 	srli	r3,r3,2
    b564:	00800084 	movi	r2,2
    b568:	20c00015 	stw	r3,0(r4)
    b56c:	f800283a 	ret
    b570:	18bfffcc 	andi	r2,r3,65535
    b574:	10001326 	beq	r2,zero,b5c4 <__lo0bits+0x80>
    b578:	0005883a 	mov	r2,zero
    b57c:	19403fcc 	andi	r5,r3,255
    b580:	2800021e 	bne	r5,zero,b58c <__lo0bits+0x48>
    b584:	1806d23a 	srli	r3,r3,8
    b588:	10800204 	addi	r2,r2,8
    b58c:	194003cc 	andi	r5,r3,15
    b590:	2800021e 	bne	r5,zero,b59c <__lo0bits+0x58>
    b594:	1806d13a 	srli	r3,r3,4
    b598:	10800104 	addi	r2,r2,4
    b59c:	194000cc 	andi	r5,r3,3
    b5a0:	2800021e 	bne	r5,zero,b5ac <__lo0bits+0x68>
    b5a4:	1806d0ba 	srli	r3,r3,2
    b5a8:	10800084 	addi	r2,r2,2
    b5ac:	1940004c 	andi	r5,r3,1
    b5b0:	2800081e 	bne	r5,zero,b5d4 <__lo0bits+0x90>
    b5b4:	1806d07a 	srli	r3,r3,1
    b5b8:	1800051e 	bne	r3,zero,b5d0 <__lo0bits+0x8c>
    b5bc:	00800804 	movi	r2,32
    b5c0:	f800283a 	ret
    b5c4:	1806d43a 	srli	r3,r3,16
    b5c8:	00800404 	movi	r2,16
    b5cc:	003feb06 	br	b57c <__alt_mem_Flash_flash_data+0xf400b57c>
    b5d0:	10800044 	addi	r2,r2,1
    b5d4:	20c00015 	stw	r3,0(r4)
    b5d8:	f800283a 	ret
    b5dc:	0005883a 	mov	r2,zero
    b5e0:	f800283a 	ret
    b5e4:	1806d07a 	srli	r3,r3,1
    b5e8:	00800044 	movi	r2,1
    b5ec:	20c00015 	stw	r3,0(r4)
    b5f0:	f800283a 	ret

0000b5f4 <__i2b>:
    b5f4:	defffd04 	addi	sp,sp,-12
    b5f8:	dc000015 	stw	r16,0(sp)
    b5fc:	04000044 	movi	r16,1
    b600:	dc400115 	stw	r17,4(sp)
    b604:	2823883a 	mov	r17,r5
    b608:	800b883a 	mov	r5,r16
    b60c:	dfc00215 	stw	ra,8(sp)
    b610:	000b1e80 	call	b1e8 <_Balloc>
    b614:	14400515 	stw	r17,20(r2)
    b618:	14000415 	stw	r16,16(r2)
    b61c:	dfc00217 	ldw	ra,8(sp)
    b620:	dc400117 	ldw	r17,4(sp)
    b624:	dc000017 	ldw	r16,0(sp)
    b628:	dec00304 	addi	sp,sp,12
    b62c:	f800283a 	ret

0000b630 <__multiply>:
    b630:	defffa04 	addi	sp,sp,-24
    b634:	dcc00315 	stw	r19,12(sp)
    b638:	dc800215 	stw	r18,8(sp)
    b63c:	2cc00417 	ldw	r19,16(r5)
    b640:	34800417 	ldw	r18,16(r6)
    b644:	dd000415 	stw	r20,16(sp)
    b648:	dc400115 	stw	r17,4(sp)
    b64c:	dfc00515 	stw	ra,20(sp)
    b650:	dc000015 	stw	r16,0(sp)
    b654:	2829883a 	mov	r20,r5
    b658:	3023883a 	mov	r17,r6
    b65c:	9c807016 	blt	r19,r18,b820 <__multiply+0x1f0>
    b660:	9005883a 	mov	r2,r18
    b664:	9825883a 	mov	r18,r19
    b668:	1027883a 	mov	r19,r2
    b66c:	a0800217 	ldw	r2,8(r20)
    b670:	94e1883a 	add	r16,r18,r19
    b674:	a1400117 	ldw	r5,4(r20)
    b678:	1400010e 	bge	r2,r16,b680 <__multiply+0x50>
    b67c:	29400044 	addi	r5,r5,1
    b680:	000b1e80 	call	b1e8 <_Balloc>
    b684:	8417883a 	add	r11,r16,r16
    b688:	13000504 	addi	r12,r2,20
    b68c:	5ad7883a 	add	r11,r11,r11
    b690:	62d7883a 	add	r11,r12,r11
    b694:	6007883a 	mov	r3,r12
    b698:	62c0032e 	bgeu	r12,r11,b6a8 <__multiply+0x78>
    b69c:	18000015 	stw	zero,0(r3)
    b6a0:	18c00104 	addi	r3,r3,4
    b6a4:	1afffd36 	bltu	r3,r11,b69c <__alt_mem_Flash_flash_data+0xf400b69c>
    b6a8:	9ce7883a 	add	r19,r19,r19
    b6ac:	94a5883a 	add	r18,r18,r18
    b6b0:	89800504 	addi	r6,r17,20
    b6b4:	9ce7883a 	add	r19,r19,r19
    b6b8:	a3800504 	addi	r14,r20,20
    b6bc:	94a5883a 	add	r18,r18,r18
    b6c0:	34db883a 	add	r13,r6,r19
    b6c4:	7495883a 	add	r10,r14,r18
    b6c8:	3340422e 	bgeu	r6,r13,b7d4 <__multiply+0x1a4>
    b6cc:	34400017 	ldw	r17,0(r6)
    b6d0:	8cbfffcc 	andi	r18,r17,65535
    b6d4:	90001b26 	beq	r18,zero,b744 <__multiply+0x114>
    b6d8:	6013883a 	mov	r9,r12
    b6dc:	7023883a 	mov	r17,r14
    b6e0:	0011883a 	mov	r8,zero
    b6e4:	88c00017 	ldw	r3,0(r17)
    b6e8:	4bc00017 	ldw	r15,0(r9)
    b6ec:	8c400104 	addi	r17,r17,4
    b6f0:	19ffffcc 	andi	r7,r3,65535
    b6f4:	3c8f383a 	mul	r7,r7,r18
    b6f8:	1808d43a 	srli	r4,r3,16
    b6fc:	797fffcc 	andi	r5,r15,65535
    b700:	29cb883a 	add	r5,r5,r7
    b704:	2a0b883a 	add	r5,r5,r8
    b708:	2489383a 	mul	r4,r4,r18
    b70c:	7806d43a 	srli	r3,r15,16
    b710:	2810d43a 	srli	r8,r5,16
    b714:	297fffcc 	andi	r5,r5,65535
    b718:	1907883a 	add	r3,r3,r4
    b71c:	1a07883a 	add	r3,r3,r8
    b720:	1808943a 	slli	r4,r3,16
    b724:	480f883a 	mov	r7,r9
    b728:	1810d43a 	srli	r8,r3,16
    b72c:	214ab03a 	or	r5,r4,r5
    b730:	49400015 	stw	r5,0(r9)
    b734:	4a400104 	addi	r9,r9,4
    b738:	8abfea36 	bltu	r17,r10,b6e4 <__alt_mem_Flash_flash_data+0xf400b6e4>
    b73c:	3a000115 	stw	r8,4(r7)
    b740:	34400017 	ldw	r17,0(r6)
    b744:	8822d43a 	srli	r17,r17,16
    b748:	88001f26 	beq	r17,zero,b7c8 <__multiply+0x198>
    b74c:	60c00017 	ldw	r3,0(r12)
    b750:	7013883a 	mov	r9,r14
    b754:	601f883a 	mov	r15,r12
    b758:	1811883a 	mov	r8,r3
    b75c:	6027883a 	mov	r19,r12
    b760:	000f883a 	mov	r7,zero
    b764:	00000106 	br	b76c <__multiply+0x13c>
    b768:	9027883a 	mov	r19,r18
    b76c:	4940000b 	ldhu	r5,0(r9)
    b770:	4010d43a 	srli	r8,r8,16
    b774:	193fffcc 	andi	r4,r3,65535
    b778:	2c4b383a 	mul	r5,r5,r17
    b77c:	7bc00104 	addi	r15,r15,4
    b780:	4a400104 	addi	r9,r9,4
    b784:	2a0b883a 	add	r5,r5,r8
    b788:	29cb883a 	add	r5,r5,r7
    b78c:	2806943a 	slli	r3,r5,16
    b790:	9c800104 	addi	r18,r19,4
    b794:	280ad43a 	srli	r5,r5,16
    b798:	1908b03a 	or	r4,r3,r4
    b79c:	793fff15 	stw	r4,-4(r15)
    b7a0:	48ffff17 	ldw	r3,-4(r9)
    b7a4:	92000017 	ldw	r8,0(r18)
    b7a8:	1806d43a 	srli	r3,r3,16
    b7ac:	413fffcc 	andi	r4,r8,65535
    b7b0:	1c47383a 	mul	r3,r3,r17
    b7b4:	1907883a 	add	r3,r3,r4
    b7b8:	1947883a 	add	r3,r3,r5
    b7bc:	180ed43a 	srli	r7,r3,16
    b7c0:	4abfe936 	bltu	r9,r10,b768 <__alt_mem_Flash_flash_data+0xf400b768>
    b7c4:	98c00115 	stw	r3,4(r19)
    b7c8:	31800104 	addi	r6,r6,4
    b7cc:	63000104 	addi	r12,r12,4
    b7d0:	337fbe36 	bltu	r6,r13,b6cc <__alt_mem_Flash_flash_data+0xf400b6cc>
    b7d4:	0400090e 	bge	zero,r16,b7fc <__multiply+0x1cc>
    b7d8:	58ffff17 	ldw	r3,-4(r11)
    b7dc:	5affff04 	addi	r11,r11,-4
    b7e0:	18000326 	beq	r3,zero,b7f0 <__multiply+0x1c0>
    b7e4:	00000506 	br	b7fc <__multiply+0x1cc>
    b7e8:	58c00017 	ldw	r3,0(r11)
    b7ec:	1800031e 	bne	r3,zero,b7fc <__multiply+0x1cc>
    b7f0:	843fffc4 	addi	r16,r16,-1
    b7f4:	5affff04 	addi	r11,r11,-4
    b7f8:	803ffb1e 	bne	r16,zero,b7e8 <__alt_mem_Flash_flash_data+0xf400b7e8>
    b7fc:	14000415 	stw	r16,16(r2)
    b800:	dfc00517 	ldw	ra,20(sp)
    b804:	dd000417 	ldw	r20,16(sp)
    b808:	dcc00317 	ldw	r19,12(sp)
    b80c:	dc800217 	ldw	r18,8(sp)
    b810:	dc400117 	ldw	r17,4(sp)
    b814:	dc000017 	ldw	r16,0(sp)
    b818:	dec00604 	addi	sp,sp,24
    b81c:	f800283a 	ret
    b820:	3029883a 	mov	r20,r6
    b824:	2823883a 	mov	r17,r5
    b828:	003f9006 	br	b66c <__alt_mem_Flash_flash_data+0xf400b66c>

0000b82c <__pow5mult>:
    b82c:	defffa04 	addi	sp,sp,-24
    b830:	dcc00315 	stw	r19,12(sp)
    b834:	dc800215 	stw	r18,8(sp)
    b838:	dc000015 	stw	r16,0(sp)
    b83c:	dfc00515 	stw	ra,20(sp)
    b840:	dd000415 	stw	r20,16(sp)
    b844:	dc400115 	stw	r17,4(sp)
    b848:	308000cc 	andi	r2,r6,3
    b84c:	3021883a 	mov	r16,r6
    b850:	2027883a 	mov	r19,r4
    b854:	2825883a 	mov	r18,r5
    b858:	10002e1e 	bne	r2,zero,b914 <__pow5mult+0xe8>
    b85c:	8021d0ba 	srai	r16,r16,2
    b860:	80001a26 	beq	r16,zero,b8cc <__pow5mult+0xa0>
    b864:	9c401217 	ldw	r17,72(r19)
    b868:	8800061e 	bne	r17,zero,b884 <__pow5mult+0x58>
    b86c:	00003406 	br	b940 <__pow5mult+0x114>
    b870:	8021d07a 	srai	r16,r16,1
    b874:	80001526 	beq	r16,zero,b8cc <__pow5mult+0xa0>
    b878:	88800017 	ldw	r2,0(r17)
    b87c:	10001c26 	beq	r2,zero,b8f0 <__pow5mult+0xc4>
    b880:	1023883a 	mov	r17,r2
    b884:	80c0004c 	andi	r3,r16,1
    b888:	183ff926 	beq	r3,zero,b870 <__alt_mem_Flash_flash_data+0xf400b870>
    b88c:	900b883a 	mov	r5,r18
    b890:	880d883a 	mov	r6,r17
    b894:	9809883a 	mov	r4,r19
    b898:	000b6300 	call	b630 <__multiply>
    b89c:	90001b26 	beq	r18,zero,b90c <__pow5mult+0xe0>
    b8a0:	91c00117 	ldw	r7,4(r18)
    b8a4:	98c01317 	ldw	r3,76(r19)
    b8a8:	8021d07a 	srai	r16,r16,1
    b8ac:	39cf883a 	add	r7,r7,r7
    b8b0:	39cf883a 	add	r7,r7,r7
    b8b4:	19c7883a 	add	r3,r3,r7
    b8b8:	19000017 	ldw	r4,0(r3)
    b8bc:	91000015 	stw	r4,0(r18)
    b8c0:	1c800015 	stw	r18,0(r3)
    b8c4:	1025883a 	mov	r18,r2
    b8c8:	803feb1e 	bne	r16,zero,b878 <__alt_mem_Flash_flash_data+0xf400b878>
    b8cc:	9005883a 	mov	r2,r18
    b8d0:	dfc00517 	ldw	ra,20(sp)
    b8d4:	dd000417 	ldw	r20,16(sp)
    b8d8:	dcc00317 	ldw	r19,12(sp)
    b8dc:	dc800217 	ldw	r18,8(sp)
    b8e0:	dc400117 	ldw	r17,4(sp)
    b8e4:	dc000017 	ldw	r16,0(sp)
    b8e8:	dec00604 	addi	sp,sp,24
    b8ec:	f800283a 	ret
    b8f0:	9809883a 	mov	r4,r19
    b8f4:	880b883a 	mov	r5,r17
    b8f8:	880d883a 	mov	r6,r17
    b8fc:	000b6300 	call	b630 <__multiply>
    b900:	88800015 	stw	r2,0(r17)
    b904:	10000015 	stw	zero,0(r2)
    b908:	003fdd06 	br	b880 <__alt_mem_Flash_flash_data+0xf400b880>
    b90c:	1025883a 	mov	r18,r2
    b910:	003fd706 	br	b870 <__alt_mem_Flash_flash_data+0xf400b870>
    b914:	10bfffc4 	addi	r2,r2,-1
    b918:	1085883a 	add	r2,r2,r2
    b91c:	00c000b4 	movhi	r3,2
    b920:	18c09e04 	addi	r3,r3,632
    b924:	1085883a 	add	r2,r2,r2
    b928:	1885883a 	add	r2,r3,r2
    b92c:	11800017 	ldw	r6,0(r2)
    b930:	000f883a 	mov	r7,zero
    b934:	000b2b80 	call	b2b8 <__multadd>
    b938:	1025883a 	mov	r18,r2
    b93c:	003fc706 	br	b85c <__alt_mem_Flash_flash_data+0xf400b85c>
    b940:	05000044 	movi	r20,1
    b944:	9809883a 	mov	r4,r19
    b948:	a00b883a 	mov	r5,r20
    b94c:	000b1e80 	call	b1e8 <_Balloc>
    b950:	1023883a 	mov	r17,r2
    b954:	00809c44 	movi	r2,625
    b958:	88800515 	stw	r2,20(r17)
    b95c:	8d000415 	stw	r20,16(r17)
    b960:	9c401215 	stw	r17,72(r19)
    b964:	88000015 	stw	zero,0(r17)
    b968:	003fc606 	br	b884 <__alt_mem_Flash_flash_data+0xf400b884>

0000b96c <__lshift>:
    b96c:	defff904 	addi	sp,sp,-28
    b970:	dd000415 	stw	r20,16(sp)
    b974:	dcc00315 	stw	r19,12(sp)
    b978:	3029d17a 	srai	r20,r6,5
    b97c:	2cc00417 	ldw	r19,16(r5)
    b980:	28800217 	ldw	r2,8(r5)
    b984:	dd400515 	stw	r21,20(sp)
    b988:	a4e7883a 	add	r19,r20,r19
    b98c:	dc800215 	stw	r18,8(sp)
    b990:	dc400115 	stw	r17,4(sp)
    b994:	dc000015 	stw	r16,0(sp)
    b998:	dfc00615 	stw	ra,24(sp)
    b99c:	9c000044 	addi	r16,r19,1
    b9a0:	2823883a 	mov	r17,r5
    b9a4:	302b883a 	mov	r21,r6
    b9a8:	2025883a 	mov	r18,r4
    b9ac:	29400117 	ldw	r5,4(r5)
    b9b0:	1400030e 	bge	r2,r16,b9c0 <__lshift+0x54>
    b9b4:	1085883a 	add	r2,r2,r2
    b9b8:	29400044 	addi	r5,r5,1
    b9bc:	143ffd16 	blt	r2,r16,b9b4 <__alt_mem_Flash_flash_data+0xf400b9b4>
    b9c0:	9009883a 	mov	r4,r18
    b9c4:	000b1e80 	call	b1e8 <_Balloc>
    b9c8:	11c00504 	addi	r7,r2,20
    b9cc:	0500090e 	bge	zero,r20,b9f4 <__lshift+0x88>
    b9d0:	3811883a 	mov	r8,r7
    b9d4:	0007883a 	mov	r3,zero
    b9d8:	40000015 	stw	zero,0(r8)
    b9dc:	18c00044 	addi	r3,r3,1
    b9e0:	42000104 	addi	r8,r8,4
    b9e4:	1d3ffc1e 	bne	r3,r20,b9d8 <__alt_mem_Flash_flash_data+0xf400b9d8>
    b9e8:	18c7883a 	add	r3,r3,r3
    b9ec:	18c7883a 	add	r3,r3,r3
    b9f0:	38cf883a 	add	r7,r7,r3
    b9f4:	89000417 	ldw	r4,16(r17)
    b9f8:	88c00504 	addi	r3,r17,20
    b9fc:	a98007cc 	andi	r6,r21,31
    ba00:	2109883a 	add	r4,r4,r4
    ba04:	2109883a 	add	r4,r4,r4
    ba08:	1909883a 	add	r4,r3,r4
    ba0c:	30002326 	beq	r6,zero,ba9c <__lshift+0x130>
    ba10:	01400804 	movi	r5,32
    ba14:	298bc83a 	sub	r5,r5,r6
    ba18:	0013883a 	mov	r9,zero
    ba1c:	1a000017 	ldw	r8,0(r3)
    ba20:	3815883a 	mov	r10,r7
    ba24:	39c00104 	addi	r7,r7,4
    ba28:	4190983a 	sll	r8,r8,r6
    ba2c:	18c00104 	addi	r3,r3,4
    ba30:	4a10b03a 	or	r8,r9,r8
    ba34:	3a3fff15 	stw	r8,-4(r7)
    ba38:	1a3fff17 	ldw	r8,-4(r3)
    ba3c:	4152d83a 	srl	r9,r8,r5
    ba40:	193ff636 	bltu	r3,r4,ba1c <__alt_mem_Flash_flash_data+0xf400ba1c>
    ba44:	52400115 	stw	r9,4(r10)
    ba48:	48001a1e 	bne	r9,zero,bab4 <__lshift+0x148>
    ba4c:	843fffc4 	addi	r16,r16,-1
    ba50:	14000415 	stw	r16,16(r2)
    ba54:	88000826 	beq	r17,zero,ba78 <__lshift+0x10c>
    ba58:	89000117 	ldw	r4,4(r17)
    ba5c:	90c01317 	ldw	r3,76(r18)
    ba60:	2109883a 	add	r4,r4,r4
    ba64:	2109883a 	add	r4,r4,r4
    ba68:	1907883a 	add	r3,r3,r4
    ba6c:	19000017 	ldw	r4,0(r3)
    ba70:	89000015 	stw	r4,0(r17)
    ba74:	1c400015 	stw	r17,0(r3)
    ba78:	dfc00617 	ldw	ra,24(sp)
    ba7c:	dd400517 	ldw	r21,20(sp)
    ba80:	dd000417 	ldw	r20,16(sp)
    ba84:	dcc00317 	ldw	r19,12(sp)
    ba88:	dc800217 	ldw	r18,8(sp)
    ba8c:	dc400117 	ldw	r17,4(sp)
    ba90:	dc000017 	ldw	r16,0(sp)
    ba94:	dec00704 	addi	sp,sp,28
    ba98:	f800283a 	ret
    ba9c:	19400017 	ldw	r5,0(r3)
    baa0:	39c00104 	addi	r7,r7,4
    baa4:	18c00104 	addi	r3,r3,4
    baa8:	397fff15 	stw	r5,-4(r7)
    baac:	193ffb36 	bltu	r3,r4,ba9c <__alt_mem_Flash_flash_data+0xf400ba9c>
    bab0:	003fe606 	br	ba4c <__alt_mem_Flash_flash_data+0xf400ba4c>
    bab4:	9c000084 	addi	r16,r19,2
    bab8:	003fe406 	br	ba4c <__alt_mem_Flash_flash_data+0xf400ba4c>

0000babc <__mcmp>:
    babc:	20800417 	ldw	r2,16(r4)
    bac0:	28c00417 	ldw	r3,16(r5)
    bac4:	10c5c83a 	sub	r2,r2,r3
    bac8:	1000111e 	bne	r2,zero,bb10 <__mcmp+0x54>
    bacc:	18c7883a 	add	r3,r3,r3
    bad0:	18c7883a 	add	r3,r3,r3
    bad4:	21000504 	addi	r4,r4,20
    bad8:	29400504 	addi	r5,r5,20
    badc:	20c5883a 	add	r2,r4,r3
    bae0:	28cb883a 	add	r5,r5,r3
    bae4:	00000106 	br	baec <__mcmp+0x30>
    bae8:	20800a2e 	bgeu	r4,r2,bb14 <__mcmp+0x58>
    baec:	10bfff04 	addi	r2,r2,-4
    baf0:	297fff04 	addi	r5,r5,-4
    baf4:	11800017 	ldw	r6,0(r2)
    baf8:	28c00017 	ldw	r3,0(r5)
    bafc:	30fffa26 	beq	r6,r3,bae8 <__alt_mem_Flash_flash_data+0xf400bae8>
    bb00:	30c00236 	bltu	r6,r3,bb0c <__mcmp+0x50>
    bb04:	00800044 	movi	r2,1
    bb08:	f800283a 	ret
    bb0c:	00bfffc4 	movi	r2,-1
    bb10:	f800283a 	ret
    bb14:	0005883a 	mov	r2,zero
    bb18:	f800283a 	ret

0000bb1c <__mdiff>:
    bb1c:	defffb04 	addi	sp,sp,-20
    bb20:	dc000015 	stw	r16,0(sp)
    bb24:	2821883a 	mov	r16,r5
    bb28:	dcc00315 	stw	r19,12(sp)
    bb2c:	300b883a 	mov	r5,r6
    bb30:	2027883a 	mov	r19,r4
    bb34:	8009883a 	mov	r4,r16
    bb38:	dc800215 	stw	r18,8(sp)
    bb3c:	dfc00415 	stw	ra,16(sp)
    bb40:	dc400115 	stw	r17,4(sp)
    bb44:	3025883a 	mov	r18,r6
    bb48:	000babc0 	call	babc <__mcmp>
    bb4c:	10005226 	beq	r2,zero,bc98 <__mdiff+0x17c>
    bb50:	10004c16 	blt	r2,zero,bc84 <__mdiff+0x168>
    bb54:	0023883a 	mov	r17,zero
    bb58:	81400117 	ldw	r5,4(r16)
    bb5c:	9809883a 	mov	r4,r19
    bb60:	000b1e80 	call	b1e8 <_Balloc>
    bb64:	83400417 	ldw	r13,16(r16)
    bb68:	93800417 	ldw	r14,16(r18)
    bb6c:	81000504 	addi	r4,r16,20
    bb70:	6b59883a 	add	r12,r13,r13
    bb74:	739d883a 	add	r14,r14,r14
    bb78:	6319883a 	add	r12,r12,r12
    bb7c:	91800504 	addi	r6,r18,20
    bb80:	739d883a 	add	r14,r14,r14
    bb84:	14400315 	stw	r17,12(r2)
    bb88:	2319883a 	add	r12,r4,r12
    bb8c:	339d883a 	add	r14,r6,r14
    bb90:	12400504 	addi	r9,r2,20
    bb94:	0007883a 	mov	r3,zero
    bb98:	22000017 	ldw	r8,0(r4)
    bb9c:	32800017 	ldw	r10,0(r6)
    bba0:	4ac00104 	addi	r11,r9,4
    bba4:	41ffffcc 	andi	r7,r8,65535
    bba8:	38c7883a 	add	r3,r7,r3
    bbac:	51ffffcc 	andi	r7,r10,65535
    bbb0:	19cfc83a 	sub	r7,r3,r7
    bbb4:	4010d43a 	srli	r8,r8,16
    bbb8:	5014d43a 	srli	r10,r10,16
    bbbc:	3807d43a 	srai	r3,r7,16
    bbc0:	39ffffcc 	andi	r7,r7,65535
    bbc4:	4291c83a 	sub	r8,r8,r10
    bbc8:	40c7883a 	add	r3,r8,r3
    bbcc:	1810943a 	slli	r8,r3,16
    bbd0:	31800104 	addi	r6,r6,4
    bbd4:	21000104 	addi	r4,r4,4
    bbd8:	41ceb03a 	or	r7,r8,r7
    bbdc:	49c00015 	stw	r7,0(r9)
    bbe0:	1807d43a 	srai	r3,r3,16
    bbe4:	580b883a 	mov	r5,r11
    bbe8:	5813883a 	mov	r9,r11
    bbec:	33bfea36 	bltu	r6,r14,bb98 <__alt_mem_Flash_flash_data+0xf400bb98>
    bbf0:	2011883a 	mov	r8,r4
    bbf4:	2300152e 	bgeu	r4,r12,bc4c <__mdiff+0x130>
    bbf8:	21400017 	ldw	r5,0(r4)
    bbfc:	4a400104 	addi	r9,r9,4
    bc00:	21000104 	addi	r4,r4,4
    bc04:	29ffffcc 	andi	r7,r5,65535
    bc08:	38c7883a 	add	r3,r7,r3
    bc0c:	280ad43a 	srli	r5,r5,16
    bc10:	180dd43a 	srai	r6,r3,16
    bc14:	19ffffcc 	andi	r7,r3,65535
    bc18:	3147883a 	add	r3,r6,r5
    bc1c:	180a943a 	slli	r5,r3,16
    bc20:	1807d43a 	srai	r3,r3,16
    bc24:	29ceb03a 	or	r7,r5,r7
    bc28:	49ffff15 	stw	r7,-4(r9)
    bc2c:	233ff236 	bltu	r4,r12,bbf8 <__alt_mem_Flash_flash_data+0xf400bbf8>
    bc30:	0206303a 	nor	r3,zero,r8
    bc34:	1b07883a 	add	r3,r3,r12
    bc38:	1806d0ba 	srli	r3,r3,2
    bc3c:	18c00044 	addi	r3,r3,1
    bc40:	18c7883a 	add	r3,r3,r3
    bc44:	18c7883a 	add	r3,r3,r3
    bc48:	58cb883a 	add	r5,r11,r3
    bc4c:	28ffff04 	addi	r3,r5,-4
    bc50:	3800041e 	bne	r7,zero,bc64 <__mdiff+0x148>
    bc54:	18ffff04 	addi	r3,r3,-4
    bc58:	19000017 	ldw	r4,0(r3)
    bc5c:	6b7fffc4 	addi	r13,r13,-1
    bc60:	203ffc26 	beq	r4,zero,bc54 <__alt_mem_Flash_flash_data+0xf400bc54>
    bc64:	13400415 	stw	r13,16(r2)
    bc68:	dfc00417 	ldw	ra,16(sp)
    bc6c:	dcc00317 	ldw	r19,12(sp)
    bc70:	dc800217 	ldw	r18,8(sp)
    bc74:	dc400117 	ldw	r17,4(sp)
    bc78:	dc000017 	ldw	r16,0(sp)
    bc7c:	dec00504 	addi	sp,sp,20
    bc80:	f800283a 	ret
    bc84:	8005883a 	mov	r2,r16
    bc88:	04400044 	movi	r17,1
    bc8c:	9021883a 	mov	r16,r18
    bc90:	1025883a 	mov	r18,r2
    bc94:	003fb006 	br	bb58 <__alt_mem_Flash_flash_data+0xf400bb58>
    bc98:	9809883a 	mov	r4,r19
    bc9c:	000b883a 	mov	r5,zero
    bca0:	000b1e80 	call	b1e8 <_Balloc>
    bca4:	00c00044 	movi	r3,1
    bca8:	10c00415 	stw	r3,16(r2)
    bcac:	10000515 	stw	zero,20(r2)
    bcb0:	003fed06 	br	bc68 <__alt_mem_Flash_flash_data+0xf400bc68>

0000bcb4 <__ulp>:
    bcb4:	295ffc2c 	andhi	r5,r5,32752
    bcb8:	00bf3034 	movhi	r2,64704
    bcbc:	2887883a 	add	r3,r5,r2
    bcc0:	00c0020e 	bge	zero,r3,bccc <__ulp+0x18>
    bcc4:	0005883a 	mov	r2,zero
    bcc8:	f800283a 	ret
    bccc:	00c7c83a 	sub	r3,zero,r3
    bcd0:	180bd53a 	srai	r5,r3,20
    bcd4:	008004c4 	movi	r2,19
    bcd8:	11400a0e 	bge	r2,r5,bd04 <__ulp+0x50>
    bcdc:	00800c84 	movi	r2,50
    bce0:	0007883a 	mov	r3,zero
    bce4:	11400516 	blt	r2,r5,bcfc <__ulp+0x48>
    bce8:	00800cc4 	movi	r2,51
    bcec:	114bc83a 	sub	r5,r2,r5
    bcf0:	00800044 	movi	r2,1
    bcf4:	1144983a 	sll	r2,r2,r5
    bcf8:	f800283a 	ret
    bcfc:	00800044 	movi	r2,1
    bd00:	f800283a 	ret
    bd04:	00800234 	movhi	r2,8
    bd08:	1147d83a 	sra	r3,r2,r5
    bd0c:	0005883a 	mov	r2,zero
    bd10:	f800283a 	ret

0000bd14 <__b2d>:
    bd14:	defffa04 	addi	sp,sp,-24
    bd18:	dc000015 	stw	r16,0(sp)
    bd1c:	24000417 	ldw	r16,16(r4)
    bd20:	dc400115 	stw	r17,4(sp)
    bd24:	24400504 	addi	r17,r4,20
    bd28:	8421883a 	add	r16,r16,r16
    bd2c:	8421883a 	add	r16,r16,r16
    bd30:	8c21883a 	add	r16,r17,r16
    bd34:	dc800215 	stw	r18,8(sp)
    bd38:	84bfff17 	ldw	r18,-4(r16)
    bd3c:	dd000415 	stw	r20,16(sp)
    bd40:	dcc00315 	stw	r19,12(sp)
    bd44:	9009883a 	mov	r4,r18
    bd48:	2829883a 	mov	r20,r5
    bd4c:	dfc00515 	stw	ra,20(sp)
    bd50:	000b4dc0 	call	b4dc <__hi0bits>
    bd54:	00c00804 	movi	r3,32
    bd58:	1887c83a 	sub	r3,r3,r2
    bd5c:	a0c00015 	stw	r3,0(r20)
    bd60:	00c00284 	movi	r3,10
    bd64:	84ffff04 	addi	r19,r16,-4
    bd68:	18801216 	blt	r3,r2,bdb4 <__b2d+0xa0>
    bd6c:	014002c4 	movi	r5,11
    bd70:	2889c83a 	sub	r4,r5,r2
    bd74:	9106d83a 	srl	r3,r18,r4
    bd78:	18cffc34 	orhi	r3,r3,16368
    bd7c:	8cc0282e 	bgeu	r17,r19,be20 <__b2d+0x10c>
    bd80:	817ffe17 	ldw	r5,-8(r16)
    bd84:	290ad83a 	srl	r5,r5,r4
    bd88:	10800544 	addi	r2,r2,21
    bd8c:	9084983a 	sll	r2,r18,r2
    bd90:	2884b03a 	or	r2,r5,r2
    bd94:	dfc00517 	ldw	ra,20(sp)
    bd98:	dd000417 	ldw	r20,16(sp)
    bd9c:	dcc00317 	ldw	r19,12(sp)
    bda0:	dc800217 	ldw	r18,8(sp)
    bda4:	dc400117 	ldw	r17,4(sp)
    bda8:	dc000017 	ldw	r16,0(sp)
    bdac:	dec00604 	addi	sp,sp,24
    bdb0:	f800283a 	ret
    bdb4:	113ffd44 	addi	r4,r2,-11
    bdb8:	8cc00f2e 	bgeu	r17,r19,bdf8 <__b2d+0xe4>
    bdbc:	81bffe04 	addi	r6,r16,-8
    bdc0:	817ffe17 	ldw	r5,-8(r16)
    bdc4:	20001326 	beq	r4,zero,be14 <__b2d+0x100>
    bdc8:	00c00ac4 	movi	r3,43
    bdcc:	1885c83a 	sub	r2,r3,r2
    bdd0:	2886d83a 	srl	r3,r5,r2
    bdd4:	9124983a 	sll	r18,r18,r4
    bdd8:	90e4b03a 	or	r18,r18,r3
    bddc:	90cffc34 	orhi	r3,r18,16368
    bde0:	8980112e 	bgeu	r17,r6,be28 <__b2d+0x114>
    bde4:	81bffd17 	ldw	r6,-12(r16)
    bde8:	308cd83a 	srl	r6,r6,r2
    bdec:	2904983a 	sll	r2,r5,r4
    bdf0:	1184b03a 	or	r2,r2,r6
    bdf4:	003fe706 	br	bd94 <__alt_mem_Flash_flash_data+0xf400bd94>
    bdf8:	20000526 	beq	r4,zero,be10 <__b2d+0xfc>
    bdfc:	9124983a 	sll	r18,r18,r4
    be00:	000d883a 	mov	r6,zero
    be04:	000b883a 	mov	r5,zero
    be08:	90cffc34 	orhi	r3,r18,16368
    be0c:	003ff706 	br	bdec <__alt_mem_Flash_flash_data+0xf400bdec>
    be10:	000b883a 	mov	r5,zero
    be14:	90cffc34 	orhi	r3,r18,16368
    be18:	2805883a 	mov	r2,r5
    be1c:	003fdd06 	br	bd94 <__alt_mem_Flash_flash_data+0xf400bd94>
    be20:	000b883a 	mov	r5,zero
    be24:	003fd806 	br	bd88 <__alt_mem_Flash_flash_data+0xf400bd88>
    be28:	000d883a 	mov	r6,zero
    be2c:	003fef06 	br	bdec <__alt_mem_Flash_flash_data+0xf400bdec>

0000be30 <__d2b>:
    be30:	defff704 	addi	sp,sp,-36
    be34:	dc000215 	stw	r16,8(sp)
    be38:	3021883a 	mov	r16,r6
    be3c:	dc400315 	stw	r17,12(sp)
    be40:	8022907a 	slli	r17,r16,1
    be44:	dd400715 	stw	r21,28(sp)
    be48:	282b883a 	mov	r21,r5
    be4c:	01400044 	movi	r5,1
    be50:	dd000615 	stw	r20,24(sp)
    be54:	dcc00515 	stw	r19,20(sp)
    be58:	dc800415 	stw	r18,16(sp)
    be5c:	dfc00815 	stw	ra,32(sp)
    be60:	3829883a 	mov	r20,r7
    be64:	dc800917 	ldw	r18,36(sp)
    be68:	8822d57a 	srli	r17,r17,21
    be6c:	000b1e80 	call	b1e8 <_Balloc>
    be70:	1027883a 	mov	r19,r2
    be74:	00800434 	movhi	r2,16
    be78:	10bfffc4 	addi	r2,r2,-1
    be7c:	808c703a 	and	r6,r16,r2
    be80:	88000126 	beq	r17,zero,be88 <__d2b+0x58>
    be84:	31800434 	orhi	r6,r6,16
    be88:	d9800015 	stw	r6,0(sp)
    be8c:	a8001f26 	beq	r21,zero,bf0c <__d2b+0xdc>
    be90:	d9000104 	addi	r4,sp,4
    be94:	dd400115 	stw	r21,4(sp)
    be98:	000b5440 	call	b544 <__lo0bits>
    be9c:	d8c00017 	ldw	r3,0(sp)
    bea0:	1000291e 	bne	r2,zero,bf48 <__d2b+0x118>
    bea4:	d9000117 	ldw	r4,4(sp)
    bea8:	99000515 	stw	r4,20(r19)
    beac:	1820c03a 	cmpne	r16,r3,zero
    beb0:	84000044 	addi	r16,r16,1
    beb4:	98c00615 	stw	r3,24(r19)
    beb8:	9c000415 	stw	r16,16(r19)
    bebc:	88001b1e 	bne	r17,zero,bf2c <__d2b+0xfc>
    bec0:	800690ba 	slli	r3,r16,2
    bec4:	10bef384 	addi	r2,r2,-1074
    bec8:	a0800015 	stw	r2,0(r20)
    becc:	98c5883a 	add	r2,r19,r3
    bed0:	11000417 	ldw	r4,16(r2)
    bed4:	8020917a 	slli	r16,r16,5
    bed8:	000b4dc0 	call	b4dc <__hi0bits>
    bedc:	8085c83a 	sub	r2,r16,r2
    bee0:	90800015 	stw	r2,0(r18)
    bee4:	9805883a 	mov	r2,r19
    bee8:	dfc00817 	ldw	ra,32(sp)
    beec:	dd400717 	ldw	r21,28(sp)
    bef0:	dd000617 	ldw	r20,24(sp)
    bef4:	dcc00517 	ldw	r19,20(sp)
    bef8:	dc800417 	ldw	r18,16(sp)
    befc:	dc400317 	ldw	r17,12(sp)
    bf00:	dc000217 	ldw	r16,8(sp)
    bf04:	dec00904 	addi	sp,sp,36
    bf08:	f800283a 	ret
    bf0c:	d809883a 	mov	r4,sp
    bf10:	000b5440 	call	b544 <__lo0bits>
    bf14:	d8c00017 	ldw	r3,0(sp)
    bf18:	04000044 	movi	r16,1
    bf1c:	9c000415 	stw	r16,16(r19)
    bf20:	98c00515 	stw	r3,20(r19)
    bf24:	10800804 	addi	r2,r2,32
    bf28:	883fe526 	beq	r17,zero,bec0 <__alt_mem_Flash_flash_data+0xf400bec0>
    bf2c:	8c7ef344 	addi	r17,r17,-1075
    bf30:	88a3883a 	add	r17,r17,r2
    bf34:	00c00d44 	movi	r3,53
    bf38:	a4400015 	stw	r17,0(r20)
    bf3c:	1885c83a 	sub	r2,r3,r2
    bf40:	90800015 	stw	r2,0(r18)
    bf44:	003fe706 	br	bee4 <__alt_mem_Flash_flash_data+0xf400bee4>
    bf48:	01000804 	movi	r4,32
    bf4c:	2089c83a 	sub	r4,r4,r2
    bf50:	1908983a 	sll	r4,r3,r4
    bf54:	d9400117 	ldw	r5,4(sp)
    bf58:	1886d83a 	srl	r3,r3,r2
    bf5c:	2148b03a 	or	r4,r4,r5
    bf60:	99000515 	stw	r4,20(r19)
    bf64:	d8c00015 	stw	r3,0(sp)
    bf68:	003fd006 	br	beac <__alt_mem_Flash_flash_data+0xf400beac>

0000bf6c <__ratio>:
    bf6c:	defff904 	addi	sp,sp,-28
    bf70:	dc400315 	stw	r17,12(sp)
    bf74:	2823883a 	mov	r17,r5
    bf78:	d9400104 	addi	r5,sp,4
    bf7c:	dfc00615 	stw	ra,24(sp)
    bf80:	dcc00515 	stw	r19,20(sp)
    bf84:	dc800415 	stw	r18,16(sp)
    bf88:	2027883a 	mov	r19,r4
    bf8c:	dc000215 	stw	r16,8(sp)
    bf90:	000bd140 	call	bd14 <__b2d>
    bf94:	8809883a 	mov	r4,r17
    bf98:	d80b883a 	mov	r5,sp
    bf9c:	1025883a 	mov	r18,r2
    bfa0:	1821883a 	mov	r16,r3
    bfa4:	000bd140 	call	bd14 <__b2d>
    bfa8:	8a400417 	ldw	r9,16(r17)
    bfac:	9a000417 	ldw	r8,16(r19)
    bfb0:	100d883a 	mov	r6,r2
    bfb4:	d8800017 	ldw	r2,0(sp)
    bfb8:	4251c83a 	sub	r8,r8,r9
    bfbc:	4012917a 	slli	r9,r8,5
    bfc0:	da000117 	ldw	r8,4(sp)
    bfc4:	4091c83a 	sub	r8,r8,r2
    bfc8:	4251883a 	add	r8,r8,r9
    bfcc:	02000d0e 	bge	zero,r8,c004 <__ratio+0x98>
    bfd0:	4010953a 	slli	r8,r8,20
    bfd4:	4421883a 	add	r16,r8,r16
    bfd8:	9009883a 	mov	r4,r18
    bfdc:	800b883a 	mov	r5,r16
    bfe0:	180f883a 	mov	r7,r3
    bfe4:	0010e700 	call	10e70 <__divdf3>
    bfe8:	dfc00617 	ldw	ra,24(sp)
    bfec:	dcc00517 	ldw	r19,20(sp)
    bff0:	dc800417 	ldw	r18,16(sp)
    bff4:	dc400317 	ldw	r17,12(sp)
    bff8:	dc000217 	ldw	r16,8(sp)
    bffc:	dec00704 	addi	sp,sp,28
    c000:	f800283a 	ret
    c004:	4010953a 	slli	r8,r8,20
    c008:	1a07c83a 	sub	r3,r3,r8
    c00c:	003ff206 	br	bfd8 <__alt_mem_Flash_flash_data+0xf400bfd8>

0000c010 <_mprec_log10>:
    c010:	defffe04 	addi	sp,sp,-8
    c014:	dc000015 	stw	r16,0(sp)
    c018:	dfc00115 	stw	ra,4(sp)
    c01c:	008005c4 	movi	r2,23
    c020:	2021883a 	mov	r16,r4
    c024:	11000d0e 	bge	r2,r4,c05c <_mprec_log10+0x4c>
    c028:	0005883a 	mov	r2,zero
    c02c:	00cffc34 	movhi	r3,16368
    c030:	843fffc4 	addi	r16,r16,-1
    c034:	1009883a 	mov	r4,r2
    c038:	180b883a 	mov	r5,r3
    c03c:	000d883a 	mov	r6,zero
    c040:	01d00934 	movhi	r7,16420
    c044:	00119800 	call	11980 <__muldf3>
    c048:	803ff91e 	bne	r16,zero,c030 <__alt_mem_Flash_flash_data+0xf400c030>
    c04c:	dfc00117 	ldw	ra,4(sp)
    c050:	dc000017 	ldw	r16,0(sp)
    c054:	dec00204 	addi	sp,sp,8
    c058:	f800283a 	ret
    c05c:	202090fa 	slli	r16,r4,3
    c060:	008000b4 	movhi	r2,2
    c064:	1080b504 	addi	r2,r2,724
    c068:	1421883a 	add	r16,r2,r16
    c06c:	80800017 	ldw	r2,0(r16)
    c070:	80c00117 	ldw	r3,4(r16)
    c074:	dfc00117 	ldw	ra,4(sp)
    c078:	dc000017 	ldw	r16,0(sp)
    c07c:	dec00204 	addi	sp,sp,8
    c080:	f800283a 	ret

0000c084 <__copybits>:
    c084:	297fffc4 	addi	r5,r5,-1
    c088:	280fd17a 	srai	r7,r5,5
    c08c:	30c00417 	ldw	r3,16(r6)
    c090:	30800504 	addi	r2,r6,20
    c094:	39c00044 	addi	r7,r7,1
    c098:	18c7883a 	add	r3,r3,r3
    c09c:	39cf883a 	add	r7,r7,r7
    c0a0:	18c7883a 	add	r3,r3,r3
    c0a4:	39cf883a 	add	r7,r7,r7
    c0a8:	10c7883a 	add	r3,r2,r3
    c0ac:	21cf883a 	add	r7,r4,r7
    c0b0:	10c00d2e 	bgeu	r2,r3,c0e8 <__copybits+0x64>
    c0b4:	200b883a 	mov	r5,r4
    c0b8:	12000017 	ldw	r8,0(r2)
    c0bc:	29400104 	addi	r5,r5,4
    c0c0:	10800104 	addi	r2,r2,4
    c0c4:	2a3fff15 	stw	r8,-4(r5)
    c0c8:	10fffb36 	bltu	r2,r3,c0b8 <__alt_mem_Flash_flash_data+0xf400c0b8>
    c0cc:	1985c83a 	sub	r2,r3,r6
    c0d0:	10bffac4 	addi	r2,r2,-21
    c0d4:	1004d0ba 	srli	r2,r2,2
    c0d8:	10800044 	addi	r2,r2,1
    c0dc:	1085883a 	add	r2,r2,r2
    c0e0:	1085883a 	add	r2,r2,r2
    c0e4:	2089883a 	add	r4,r4,r2
    c0e8:	21c0032e 	bgeu	r4,r7,c0f8 <__copybits+0x74>
    c0ec:	20000015 	stw	zero,0(r4)
    c0f0:	21000104 	addi	r4,r4,4
    c0f4:	21fffd36 	bltu	r4,r7,c0ec <__alt_mem_Flash_flash_data+0xf400c0ec>
    c0f8:	f800283a 	ret

0000c0fc <__any_on>:
    c0fc:	20c00417 	ldw	r3,16(r4)
    c100:	2805d17a 	srai	r2,r5,5
    c104:	21000504 	addi	r4,r4,20
    c108:	18800d0e 	bge	r3,r2,c140 <__any_on+0x44>
    c10c:	18c7883a 	add	r3,r3,r3
    c110:	18c7883a 	add	r3,r3,r3
    c114:	20c7883a 	add	r3,r4,r3
    c118:	20c0192e 	bgeu	r4,r3,c180 <__any_on+0x84>
    c11c:	18bfff17 	ldw	r2,-4(r3)
    c120:	18ffff04 	addi	r3,r3,-4
    c124:	1000041e 	bne	r2,zero,c138 <__any_on+0x3c>
    c128:	20c0142e 	bgeu	r4,r3,c17c <__any_on+0x80>
    c12c:	18ffff04 	addi	r3,r3,-4
    c130:	19400017 	ldw	r5,0(r3)
    c134:	283ffc26 	beq	r5,zero,c128 <__alt_mem_Flash_flash_data+0xf400c128>
    c138:	00800044 	movi	r2,1
    c13c:	f800283a 	ret
    c140:	10c00a0e 	bge	r2,r3,c16c <__any_on+0x70>
    c144:	1085883a 	add	r2,r2,r2
    c148:	1085883a 	add	r2,r2,r2
    c14c:	294007cc 	andi	r5,r5,31
    c150:	2087883a 	add	r3,r4,r2
    c154:	283ff026 	beq	r5,zero,c118 <__alt_mem_Flash_flash_data+0xf400c118>
    c158:	19800017 	ldw	r6,0(r3)
    c15c:	3144d83a 	srl	r2,r6,r5
    c160:	114a983a 	sll	r5,r2,r5
    c164:	29bff41e 	bne	r5,r6,c138 <__alt_mem_Flash_flash_data+0xf400c138>
    c168:	003feb06 	br	c118 <__alt_mem_Flash_flash_data+0xf400c118>
    c16c:	1085883a 	add	r2,r2,r2
    c170:	1085883a 	add	r2,r2,r2
    c174:	2087883a 	add	r3,r4,r2
    c178:	003fe706 	br	c118 <__alt_mem_Flash_flash_data+0xf400c118>
    c17c:	f800283a 	ret
    c180:	0005883a 	mov	r2,zero
    c184:	f800283a 	ret

0000c188 <_realloc_r>:
    c188:	defff604 	addi	sp,sp,-40
    c18c:	dd000415 	stw	r20,16(sp)
    c190:	dc400115 	stw	r17,4(sp)
    c194:	dfc00915 	stw	ra,36(sp)
    c198:	df000815 	stw	fp,32(sp)
    c19c:	ddc00715 	stw	r23,28(sp)
    c1a0:	dd800615 	stw	r22,24(sp)
    c1a4:	dd400515 	stw	r21,20(sp)
    c1a8:	dcc00315 	stw	r19,12(sp)
    c1ac:	dc800215 	stw	r18,8(sp)
    c1b0:	dc000015 	stw	r16,0(sp)
    c1b4:	2829883a 	mov	r20,r5
    c1b8:	3023883a 	mov	r17,r6
    c1bc:	2800ad26 	beq	r5,zero,c474 <_realloc_r+0x2ec>
    c1c0:	2025883a 	mov	r18,r4
    c1c4:	00136b00 	call	136b0 <__malloc_lock>
    c1c8:	a0ffff17 	ldw	r3,-4(r20)
    c1cc:	043fff04 	movi	r16,-4
    c1d0:	890002c4 	addi	r4,r17,11
    c1d4:	01c00584 	movi	r7,22
    c1d8:	a57ffe04 	addi	r21,r20,-8
    c1dc:	1c20703a 	and	r16,r3,r16
    c1e0:	39001d2e 	bgeu	r7,r4,c258 <_realloc_r+0xd0>
    c1e4:	05bffe04 	movi	r22,-8
    c1e8:	25ac703a 	and	r22,r4,r22
    c1ec:	b00f883a 	mov	r7,r22
    c1f0:	b0006516 	blt	r22,zero,c388 <_realloc_r+0x200>
    c1f4:	b4406436 	bltu	r22,r17,c388 <_realloc_r+0x200>
    c1f8:	81c01a0e 	bge	r16,r7,c264 <_realloc_r+0xdc>
    c1fc:	070000b4 	movhi	fp,2
    c200:	e7032304 	addi	fp,fp,3212
    c204:	e1400217 	ldw	r5,8(fp)
    c208:	ac11883a 	add	r8,r21,r16
    c20c:	2a006226 	beq	r5,r8,c398 <_realloc_r+0x210>
    c210:	41800117 	ldw	r6,4(r8)
    c214:	027fff84 	movi	r9,-2
    c218:	3252703a 	and	r9,r6,r9
    c21c:	4253883a 	add	r9,r8,r9
    c220:	49000117 	ldw	r4,4(r9)
    c224:	2100004c 	andi	r4,r4,1
    c228:	2000281e 	bne	r4,zero,c2cc <_realloc_r+0x144>
    c22c:	00bfff04 	movi	r2,-4
    c230:	3084703a 	and	r2,r6,r2
    c234:	1409883a 	add	r4,r2,r16
    c238:	21c05e16 	blt	r4,r7,c3b4 <_realloc_r+0x22c>
    c23c:	40800317 	ldw	r2,12(r8)
    c240:	41400217 	ldw	r5,8(r8)
    c244:	a023883a 	mov	r17,r20
    c248:	2021883a 	mov	r16,r4
    c24c:	28800315 	stw	r2,12(r5)
    c250:	11400215 	stw	r5,8(r2)
    c254:	00000406 	br	c268 <_realloc_r+0xe0>
    c258:	01c00404 	movi	r7,16
    c25c:	382d883a 	mov	r22,r7
    c260:	003fe406 	br	c1f4 <__alt_mem_Flash_flash_data+0xf400c1f4>
    c264:	a023883a 	mov	r17,r20
    c268:	858fc83a 	sub	r7,r16,r22
    c26c:	008003c4 	movi	r2,15
    c270:	18c0004c 	andi	r3,r3,1
    c274:	11c07236 	bltu	r2,r7,c440 <_realloc_r+0x2b8>
    c278:	1c06b03a 	or	r3,r3,r16
    c27c:	a8c00115 	stw	r3,4(r21)
    c280:	ac21883a 	add	r16,r21,r16
    c284:	80800117 	ldw	r2,4(r16)
    c288:	10800054 	ori	r2,r2,1
    c28c:	80800115 	stw	r2,4(r16)
    c290:	9009883a 	mov	r4,r18
    c294:	00137d00 	call	137d0 <__malloc_unlock>
    c298:	8805883a 	mov	r2,r17
    c29c:	dfc00917 	ldw	ra,36(sp)
    c2a0:	df000817 	ldw	fp,32(sp)
    c2a4:	ddc00717 	ldw	r23,28(sp)
    c2a8:	dd800617 	ldw	r22,24(sp)
    c2ac:	dd400517 	ldw	r21,20(sp)
    c2b0:	dd000417 	ldw	r20,16(sp)
    c2b4:	dcc00317 	ldw	r19,12(sp)
    c2b8:	dc800217 	ldw	r18,8(sp)
    c2bc:	dc400117 	ldw	r17,4(sp)
    c2c0:	dc000017 	ldw	r16,0(sp)
    c2c4:	dec00a04 	addi	sp,sp,40
    c2c8:	f800283a 	ret
    c2cc:	18c0004c 	andi	r3,r3,1
    c2d0:	1800081e 	bne	r3,zero,c2f4 <_realloc_r+0x16c>
    c2d4:	a4fffe17 	ldw	r19,-8(r20)
    c2d8:	00bfff04 	movi	r2,-4
    c2dc:	ace7c83a 	sub	r19,r21,r19
    c2e0:	98c00117 	ldw	r3,4(r19)
    c2e4:	1886703a 	and	r3,r3,r2
    c2e8:	98000226 	beq	r19,zero,c2f4 <_realloc_r+0x16c>
    c2ec:	1c2f883a 	add	r23,r3,r16
    c2f0:	b9c06d0e 	bge	r23,r7,c4a8 <_realloc_r+0x320>
    c2f4:	880b883a 	mov	r5,r17
    c2f8:	9009883a 	mov	r4,r18
    c2fc:	000a5a00 	call	a5a0 <_malloc_r>
    c300:	1023883a 	mov	r17,r2
    c304:	1000ef26 	beq	r2,zero,c6c4 <_realloc_r+0x53c>
    c308:	a0ffff17 	ldw	r3,-4(r20)
    c30c:	113ffe04 	addi	r4,r2,-8
    c310:	00bfff84 	movi	r2,-2
    c314:	1884703a 	and	r2,r3,r2
    c318:	a885883a 	add	r2,r21,r2
    c31c:	2080bf26 	beq	r4,r2,c61c <_realloc_r+0x494>
    c320:	81bfff04 	addi	r6,r16,-4
    c324:	00800904 	movi	r2,36
    c328:	11808936 	bltu	r2,r6,c550 <_realloc_r+0x3c8>
    c32c:	00c004c4 	movi	r3,19
    c330:	19806c2e 	bgeu	r3,r6,c4e4 <_realloc_r+0x35c>
    c334:	a0c00017 	ldw	r3,0(r20)
    c338:	88c00015 	stw	r3,0(r17)
    c33c:	a0c00117 	ldw	r3,4(r20)
    c340:	88c00115 	stw	r3,4(r17)
    c344:	00c006c4 	movi	r3,27
    c348:	1980ac36 	bltu	r3,r6,c5fc <_realloc_r+0x474>
    c34c:	88800204 	addi	r2,r17,8
    c350:	a0c00204 	addi	r3,r20,8
    c354:	19000017 	ldw	r4,0(r3)
    c358:	11000015 	stw	r4,0(r2)
    c35c:	19000117 	ldw	r4,4(r3)
    c360:	11000115 	stw	r4,4(r2)
    c364:	18c00217 	ldw	r3,8(r3)
    c368:	10c00215 	stw	r3,8(r2)
    c36c:	a00b883a 	mov	r5,r20
    c370:	9009883a 	mov	r4,r18
    c374:	00099d00 	call	99d0 <_free_r>
    c378:	9009883a 	mov	r4,r18
    c37c:	00137d00 	call	137d0 <__malloc_unlock>
    c380:	8805883a 	mov	r2,r17
    c384:	003fc506 	br	c29c <__alt_mem_Flash_flash_data+0xf400c29c>
    c388:	00800304 	movi	r2,12
    c38c:	90800015 	stw	r2,0(r18)
    c390:	0005883a 	mov	r2,zero
    c394:	003fc106 	br	c29c <__alt_mem_Flash_flash_data+0xf400c29c>
    c398:	29800117 	ldw	r6,4(r5)
    c39c:	00bfff04 	movi	r2,-4
    c3a0:	b1000404 	addi	r4,r22,16
    c3a4:	3084703a 	and	r2,r6,r2
    c3a8:	140d883a 	add	r6,r2,r16
    c3ac:	31005b0e 	bge	r6,r4,c51c <_realloc_r+0x394>
    c3b0:	2811883a 	mov	r8,r5
    c3b4:	18c0004c 	andi	r3,r3,1
    c3b8:	183fce1e 	bne	r3,zero,c2f4 <__alt_mem_Flash_flash_data+0xf400c2f4>
    c3bc:	a4fffe17 	ldw	r19,-8(r20)
    c3c0:	00ffff04 	movi	r3,-4
    c3c4:	ace7c83a 	sub	r19,r21,r19
    c3c8:	99000117 	ldw	r4,4(r19)
    c3cc:	20c6703a 	and	r3,r4,r3
    c3d0:	403fc526 	beq	r8,zero,c2e8 <__alt_mem_Flash_flash_data+0xf400c2e8>
    c3d4:	1c2f883a 	add	r23,r3,r16
    c3d8:	b8af883a 	add	r23,r23,r2
    c3dc:	41406026 	beq	r8,r5,c560 <_realloc_r+0x3d8>
    c3e0:	b9ffc116 	blt	r23,r7,c2e8 <__alt_mem_Flash_flash_data+0xf400c2e8>
    c3e4:	40c00217 	ldw	r3,8(r8)
    c3e8:	40800317 	ldw	r2,12(r8)
    c3ec:	81bfff04 	addi	r6,r16,-4
    c3f0:	01000904 	movi	r4,36
    c3f4:	18800315 	stw	r2,12(r3)
    c3f8:	10c00215 	stw	r3,8(r2)
    c3fc:	99400217 	ldw	r5,8(r19)
    c400:	98c00317 	ldw	r3,12(r19)
    c404:	9c400204 	addi	r17,r19,8
    c408:	28c00315 	stw	r3,12(r5)
    c40c:	19400215 	stw	r5,8(r3)
    c410:	21802d36 	bltu	r4,r6,c4c8 <_realloc_r+0x340>
    c414:	008004c4 	movi	r2,19
    c418:	1180352e 	bgeu	r2,r6,c4f0 <_realloc_r+0x368>
    c41c:	a0800017 	ldw	r2,0(r20)
    c420:	98800215 	stw	r2,8(r19)
    c424:	a0800117 	ldw	r2,4(r20)
    c428:	98800315 	stw	r2,12(r19)
    c42c:	008006c4 	movi	r2,27
    c430:	11808036 	bltu	r2,r6,c634 <_realloc_r+0x4ac>
    c434:	98c00404 	addi	r3,r19,16
    c438:	a5000204 	addi	r20,r20,8
    c43c:	00002d06 	br	c4f4 <_realloc_r+0x36c>
    c440:	1d86b03a 	or	r3,r3,r22
    c444:	ad8b883a 	add	r5,r21,r22
    c448:	a8c00115 	stw	r3,4(r21)
    c44c:	38800054 	ori	r2,r7,1
    c450:	28800115 	stw	r2,4(r5)
    c454:	29cf883a 	add	r7,r5,r7
    c458:	38800117 	ldw	r2,4(r7)
    c45c:	9009883a 	mov	r4,r18
    c460:	29400204 	addi	r5,r5,8
    c464:	10800054 	ori	r2,r2,1
    c468:	38800115 	stw	r2,4(r7)
    c46c:	00099d00 	call	99d0 <_free_r>
    c470:	003f8706 	br	c290 <__alt_mem_Flash_flash_data+0xf400c290>
    c474:	300b883a 	mov	r5,r6
    c478:	dfc00917 	ldw	ra,36(sp)
    c47c:	df000817 	ldw	fp,32(sp)
    c480:	ddc00717 	ldw	r23,28(sp)
    c484:	dd800617 	ldw	r22,24(sp)
    c488:	dd400517 	ldw	r21,20(sp)
    c48c:	dd000417 	ldw	r20,16(sp)
    c490:	dcc00317 	ldw	r19,12(sp)
    c494:	dc800217 	ldw	r18,8(sp)
    c498:	dc400117 	ldw	r17,4(sp)
    c49c:	dc000017 	ldw	r16,0(sp)
    c4a0:	dec00a04 	addi	sp,sp,40
    c4a4:	000a5a01 	jmpi	a5a0 <_malloc_r>
    c4a8:	98800317 	ldw	r2,12(r19)
    c4ac:	98c00217 	ldw	r3,8(r19)
    c4b0:	81bfff04 	addi	r6,r16,-4
    c4b4:	01000904 	movi	r4,36
    c4b8:	18800315 	stw	r2,12(r3)
    c4bc:	10c00215 	stw	r3,8(r2)
    c4c0:	9c400204 	addi	r17,r19,8
    c4c4:	21bfd32e 	bgeu	r4,r6,c414 <__alt_mem_Flash_flash_data+0xf400c414>
    c4c8:	8809883a 	mov	r4,r17
    c4cc:	a00b883a 	mov	r5,r20
    c4d0:	000af680 	call	af68 <memmove>
    c4d4:	98c00117 	ldw	r3,4(r19)
    c4d8:	b821883a 	mov	r16,r23
    c4dc:	982b883a 	mov	r21,r19
    c4e0:	003f6106 	br	c268 <__alt_mem_Flash_flash_data+0xf400c268>
    c4e4:	8805883a 	mov	r2,r17
    c4e8:	a007883a 	mov	r3,r20
    c4ec:	003f9906 	br	c354 <__alt_mem_Flash_flash_data+0xf400c354>
    c4f0:	8807883a 	mov	r3,r17
    c4f4:	a0800017 	ldw	r2,0(r20)
    c4f8:	b821883a 	mov	r16,r23
    c4fc:	982b883a 	mov	r21,r19
    c500:	18800015 	stw	r2,0(r3)
    c504:	a0800117 	ldw	r2,4(r20)
    c508:	18800115 	stw	r2,4(r3)
    c50c:	a0800217 	ldw	r2,8(r20)
    c510:	18800215 	stw	r2,8(r3)
    c514:	98c00117 	ldw	r3,4(r19)
    c518:	003f5306 	br	c268 <__alt_mem_Flash_flash_data+0xf400c268>
    c51c:	adab883a 	add	r21,r21,r22
    c520:	3585c83a 	sub	r2,r6,r22
    c524:	e5400215 	stw	r21,8(fp)
    c528:	10800054 	ori	r2,r2,1
    c52c:	a8800115 	stw	r2,4(r21)
    c530:	a0bfff17 	ldw	r2,-4(r20)
    c534:	9009883a 	mov	r4,r18
    c538:	1080004c 	andi	r2,r2,1
    c53c:	b0acb03a 	or	r22,r22,r2
    c540:	a5bfff15 	stw	r22,-4(r20)
    c544:	00137d00 	call	137d0 <__malloc_unlock>
    c548:	a005883a 	mov	r2,r20
    c54c:	003f5306 	br	c29c <__alt_mem_Flash_flash_data+0xf400c29c>
    c550:	8809883a 	mov	r4,r17
    c554:	a00b883a 	mov	r5,r20
    c558:	000af680 	call	af68 <memmove>
    c55c:	003f8306 	br	c36c <__alt_mem_Flash_flash_data+0xf400c36c>
    c560:	b0800404 	addi	r2,r22,16
    c564:	b8bf6016 	blt	r23,r2,c2e8 <__alt_mem_Flash_flash_data+0xf400c2e8>
    c568:	98800317 	ldw	r2,12(r19)
    c56c:	98c00217 	ldw	r3,8(r19)
    c570:	81bfff04 	addi	r6,r16,-4
    c574:	01000904 	movi	r4,36
    c578:	18800315 	stw	r2,12(r3)
    c57c:	10c00215 	stw	r3,8(r2)
    c580:	9c400204 	addi	r17,r19,8
    c584:	21804336 	bltu	r4,r6,c694 <_realloc_r+0x50c>
    c588:	008004c4 	movi	r2,19
    c58c:	11803f2e 	bgeu	r2,r6,c68c <_realloc_r+0x504>
    c590:	a0800017 	ldw	r2,0(r20)
    c594:	98800215 	stw	r2,8(r19)
    c598:	a0800117 	ldw	r2,4(r20)
    c59c:	98800315 	stw	r2,12(r19)
    c5a0:	008006c4 	movi	r2,27
    c5a4:	11803f36 	bltu	r2,r6,c6a4 <_realloc_r+0x51c>
    c5a8:	98800404 	addi	r2,r19,16
    c5ac:	a5000204 	addi	r20,r20,8
    c5b0:	a0c00017 	ldw	r3,0(r20)
    c5b4:	10c00015 	stw	r3,0(r2)
    c5b8:	a0c00117 	ldw	r3,4(r20)
    c5bc:	10c00115 	stw	r3,4(r2)
    c5c0:	a0c00217 	ldw	r3,8(r20)
    c5c4:	10c00215 	stw	r3,8(r2)
    c5c8:	9d87883a 	add	r3,r19,r22
    c5cc:	bd85c83a 	sub	r2,r23,r22
    c5d0:	e0c00215 	stw	r3,8(fp)
    c5d4:	10800054 	ori	r2,r2,1
    c5d8:	18800115 	stw	r2,4(r3)
    c5dc:	98800117 	ldw	r2,4(r19)
    c5e0:	9009883a 	mov	r4,r18
    c5e4:	1080004c 	andi	r2,r2,1
    c5e8:	b0acb03a 	or	r22,r22,r2
    c5ec:	9d800115 	stw	r22,4(r19)
    c5f0:	00137d00 	call	137d0 <__malloc_unlock>
    c5f4:	8805883a 	mov	r2,r17
    c5f8:	003f2806 	br	c29c <__alt_mem_Flash_flash_data+0xf400c29c>
    c5fc:	a0c00217 	ldw	r3,8(r20)
    c600:	88c00215 	stw	r3,8(r17)
    c604:	a0c00317 	ldw	r3,12(r20)
    c608:	88c00315 	stw	r3,12(r17)
    c60c:	30801126 	beq	r6,r2,c654 <_realloc_r+0x4cc>
    c610:	88800404 	addi	r2,r17,16
    c614:	a0c00404 	addi	r3,r20,16
    c618:	003f4e06 	br	c354 <__alt_mem_Flash_flash_data+0xf400c354>
    c61c:	893fff17 	ldw	r4,-4(r17)
    c620:	00bfff04 	movi	r2,-4
    c624:	a023883a 	mov	r17,r20
    c628:	2084703a 	and	r2,r4,r2
    c62c:	80a1883a 	add	r16,r16,r2
    c630:	003f0d06 	br	c268 <__alt_mem_Flash_flash_data+0xf400c268>
    c634:	a0800217 	ldw	r2,8(r20)
    c638:	98800415 	stw	r2,16(r19)
    c63c:	a0800317 	ldw	r2,12(r20)
    c640:	98800515 	stw	r2,20(r19)
    c644:	31000a26 	beq	r6,r4,c670 <_realloc_r+0x4e8>
    c648:	98c00604 	addi	r3,r19,24
    c64c:	a5000404 	addi	r20,r20,16
    c650:	003fa806 	br	c4f4 <__alt_mem_Flash_flash_data+0xf400c4f4>
    c654:	a1000417 	ldw	r4,16(r20)
    c658:	88800604 	addi	r2,r17,24
    c65c:	a0c00604 	addi	r3,r20,24
    c660:	89000415 	stw	r4,16(r17)
    c664:	a1000517 	ldw	r4,20(r20)
    c668:	89000515 	stw	r4,20(r17)
    c66c:	003f3906 	br	c354 <__alt_mem_Flash_flash_data+0xf400c354>
    c670:	a0800417 	ldw	r2,16(r20)
    c674:	a5000604 	addi	r20,r20,24
    c678:	98c00804 	addi	r3,r19,32
    c67c:	98800615 	stw	r2,24(r19)
    c680:	a0bfff17 	ldw	r2,-4(r20)
    c684:	98800715 	stw	r2,28(r19)
    c688:	003f9a06 	br	c4f4 <__alt_mem_Flash_flash_data+0xf400c4f4>
    c68c:	8805883a 	mov	r2,r17
    c690:	003fc706 	br	c5b0 <__alt_mem_Flash_flash_data+0xf400c5b0>
    c694:	8809883a 	mov	r4,r17
    c698:	a00b883a 	mov	r5,r20
    c69c:	000af680 	call	af68 <memmove>
    c6a0:	003fc906 	br	c5c8 <__alt_mem_Flash_flash_data+0xf400c5c8>
    c6a4:	a0800217 	ldw	r2,8(r20)
    c6a8:	98800415 	stw	r2,16(r19)
    c6ac:	a0800317 	ldw	r2,12(r20)
    c6b0:	98800515 	stw	r2,20(r19)
    c6b4:	31000726 	beq	r6,r4,c6d4 <_realloc_r+0x54c>
    c6b8:	98800604 	addi	r2,r19,24
    c6bc:	a5000404 	addi	r20,r20,16
    c6c0:	003fbb06 	br	c5b0 <__alt_mem_Flash_flash_data+0xf400c5b0>
    c6c4:	9009883a 	mov	r4,r18
    c6c8:	00137d00 	call	137d0 <__malloc_unlock>
    c6cc:	0005883a 	mov	r2,zero
    c6d0:	003ef206 	br	c29c <__alt_mem_Flash_flash_data+0xf400c29c>
    c6d4:	a0c00417 	ldw	r3,16(r20)
    c6d8:	a5000604 	addi	r20,r20,24
    c6dc:	98800804 	addi	r2,r19,32
    c6e0:	98c00615 	stw	r3,24(r19)
    c6e4:	a0ffff17 	ldw	r3,-4(r20)
    c6e8:	98c00715 	stw	r3,28(r19)
    c6ec:	003fb006 	br	c5b0 <__alt_mem_Flash_flash_data+0xf400c5b0>

0000c6f0 <__fpclassifyd>:
    c6f0:	00a00034 	movhi	r2,32768
    c6f4:	10bfffc4 	addi	r2,r2,-1
    c6f8:	2884703a 	and	r2,r5,r2
    c6fc:	10000726 	beq	r2,zero,c71c <__fpclassifyd+0x2c>
    c700:	00fffc34 	movhi	r3,65520
    c704:	019ff834 	movhi	r6,32736
    c708:	28c7883a 	add	r3,r5,r3
    c70c:	31bfffc4 	addi	r6,r6,-1
    c710:	30c00536 	bltu	r6,r3,c728 <__fpclassifyd+0x38>
    c714:	00800104 	movi	r2,4
    c718:	f800283a 	ret
    c71c:	2000021e 	bne	r4,zero,c728 <__fpclassifyd+0x38>
    c720:	00800084 	movi	r2,2
    c724:	f800283a 	ret
    c728:	00dffc34 	movhi	r3,32752
    c72c:	019ff834 	movhi	r6,32736
    c730:	28cb883a 	add	r5,r5,r3
    c734:	31bfffc4 	addi	r6,r6,-1
    c738:	317ff62e 	bgeu	r6,r5,c714 <__alt_mem_Flash_flash_data+0xf400c714>
    c73c:	01400434 	movhi	r5,16
    c740:	297fffc4 	addi	r5,r5,-1
    c744:	28800236 	bltu	r5,r2,c750 <__fpclassifyd+0x60>
    c748:	008000c4 	movi	r2,3
    c74c:	f800283a 	ret
    c750:	10c00226 	beq	r2,r3,c75c <__fpclassifyd+0x6c>
    c754:	0005883a 	mov	r2,zero
    c758:	f800283a 	ret
    c75c:	2005003a 	cmpeq	r2,r4,zero
    c760:	f800283a 	ret

0000c764 <_sbrk_r>:
    c764:	defffd04 	addi	sp,sp,-12
    c768:	dc000015 	stw	r16,0(sp)
    c76c:	040000b4 	movhi	r16,2
    c770:	dc400115 	stw	r17,4(sp)
    c774:	8411bd04 	addi	r16,r16,18164
    c778:	2023883a 	mov	r17,r4
    c77c:	2809883a 	mov	r4,r5
    c780:	dfc00215 	stw	ra,8(sp)
    c784:	80000015 	stw	zero,0(r16)
    c788:	001339c0 	call	1339c <sbrk>
    c78c:	00ffffc4 	movi	r3,-1
    c790:	10c00526 	beq	r2,r3,c7a8 <_sbrk_r+0x44>
    c794:	dfc00217 	ldw	ra,8(sp)
    c798:	dc400117 	ldw	r17,4(sp)
    c79c:	dc000017 	ldw	r16,0(sp)
    c7a0:	dec00304 	addi	sp,sp,12
    c7a4:	f800283a 	ret
    c7a8:	80c00017 	ldw	r3,0(r16)
    c7ac:	183ff926 	beq	r3,zero,c794 <__alt_mem_Flash_flash_data+0xf400c794>
    c7b0:	88c00015 	stw	r3,0(r17)
    c7b4:	003ff706 	br	c794 <__alt_mem_Flash_flash_data+0xf400c794>

0000c7b8 <__sread>:
    c7b8:	defffe04 	addi	sp,sp,-8
    c7bc:	dc000015 	stw	r16,0(sp)
    c7c0:	2821883a 	mov	r16,r5
    c7c4:	2940038f 	ldh	r5,14(r5)
    c7c8:	dfc00115 	stw	ra,4(sp)
    c7cc:	000f5c00 	call	f5c0 <_read_r>
    c7d0:	10000716 	blt	r2,zero,c7f0 <__sread+0x38>
    c7d4:	80c01417 	ldw	r3,80(r16)
    c7d8:	1887883a 	add	r3,r3,r2
    c7dc:	80c01415 	stw	r3,80(r16)
    c7e0:	dfc00117 	ldw	ra,4(sp)
    c7e4:	dc000017 	ldw	r16,0(sp)
    c7e8:	dec00204 	addi	sp,sp,8
    c7ec:	f800283a 	ret
    c7f0:	80c0030b 	ldhu	r3,12(r16)
    c7f4:	18fbffcc 	andi	r3,r3,61439
    c7f8:	80c0030d 	sth	r3,12(r16)
    c7fc:	dfc00117 	ldw	ra,4(sp)
    c800:	dc000017 	ldw	r16,0(sp)
    c804:	dec00204 	addi	sp,sp,8
    c808:	f800283a 	ret

0000c80c <__seofread>:
    c80c:	0005883a 	mov	r2,zero
    c810:	f800283a 	ret

0000c814 <__swrite>:
    c814:	2880030b 	ldhu	r2,12(r5)
    c818:	defffb04 	addi	sp,sp,-20
    c81c:	dcc00315 	stw	r19,12(sp)
    c820:	dc800215 	stw	r18,8(sp)
    c824:	dc400115 	stw	r17,4(sp)
    c828:	dc000015 	stw	r16,0(sp)
    c82c:	dfc00415 	stw	ra,16(sp)
    c830:	10c0400c 	andi	r3,r2,256
    c834:	2821883a 	mov	r16,r5
    c838:	2027883a 	mov	r19,r4
    c83c:	3025883a 	mov	r18,r6
    c840:	3823883a 	mov	r17,r7
    c844:	18000526 	beq	r3,zero,c85c <__swrite+0x48>
    c848:	2940038f 	ldh	r5,14(r5)
    c84c:	000d883a 	mov	r6,zero
    c850:	01c00084 	movi	r7,2
    c854:	000f5640 	call	f564 <_lseek_r>
    c858:	8080030b 	ldhu	r2,12(r16)
    c85c:	8140038f 	ldh	r5,14(r16)
    c860:	10bbffcc 	andi	r2,r2,61439
    c864:	9809883a 	mov	r4,r19
    c868:	900d883a 	mov	r6,r18
    c86c:	880f883a 	mov	r7,r17
    c870:	8080030d 	sth	r2,12(r16)
    c874:	dfc00417 	ldw	ra,16(sp)
    c878:	dcc00317 	ldw	r19,12(sp)
    c87c:	dc800217 	ldw	r18,8(sp)
    c880:	dc400117 	ldw	r17,4(sp)
    c884:	dc000017 	ldw	r16,0(sp)
    c888:	dec00504 	addi	sp,sp,20
    c88c:	000f0601 	jmpi	f060 <_write_r>

0000c890 <__sseek>:
    c890:	defffe04 	addi	sp,sp,-8
    c894:	dc000015 	stw	r16,0(sp)
    c898:	2821883a 	mov	r16,r5
    c89c:	2940038f 	ldh	r5,14(r5)
    c8a0:	dfc00115 	stw	ra,4(sp)
    c8a4:	000f5640 	call	f564 <_lseek_r>
    c8a8:	00ffffc4 	movi	r3,-1
    c8ac:	10c00826 	beq	r2,r3,c8d0 <__sseek+0x40>
    c8b0:	80c0030b 	ldhu	r3,12(r16)
    c8b4:	80801415 	stw	r2,80(r16)
    c8b8:	18c40014 	ori	r3,r3,4096
    c8bc:	80c0030d 	sth	r3,12(r16)
    c8c0:	dfc00117 	ldw	ra,4(sp)
    c8c4:	dc000017 	ldw	r16,0(sp)
    c8c8:	dec00204 	addi	sp,sp,8
    c8cc:	f800283a 	ret
    c8d0:	80c0030b 	ldhu	r3,12(r16)
    c8d4:	18fbffcc 	andi	r3,r3,61439
    c8d8:	80c0030d 	sth	r3,12(r16)
    c8dc:	dfc00117 	ldw	ra,4(sp)
    c8e0:	dc000017 	ldw	r16,0(sp)
    c8e4:	dec00204 	addi	sp,sp,8
    c8e8:	f800283a 	ret

0000c8ec <__sclose>:
    c8ec:	2940038f 	ldh	r5,14(r5)
    c8f0:	000f0bc1 	jmpi	f0bc <_close_r>

0000c8f4 <strcmp>:
    c8f4:	2144b03a 	or	r2,r4,r5
    c8f8:	108000cc 	andi	r2,r2,3
    c8fc:	1000171e 	bne	r2,zero,c95c <strcmp+0x68>
    c900:	20800017 	ldw	r2,0(r4)
    c904:	28c00017 	ldw	r3,0(r5)
    c908:	10c0141e 	bne	r2,r3,c95c <strcmp+0x68>
    c90c:	027fbff4 	movhi	r9,65279
    c910:	4a7fbfc4 	addi	r9,r9,-257
    c914:	0086303a 	nor	r3,zero,r2
    c918:	02202074 	movhi	r8,32897
    c91c:	1245883a 	add	r2,r2,r9
    c920:	42202004 	addi	r8,r8,-32640
    c924:	10c4703a 	and	r2,r2,r3
    c928:	1204703a 	and	r2,r2,r8
    c92c:	10000226 	beq	r2,zero,c938 <strcmp+0x44>
    c930:	00001706 	br	c990 <strcmp+0x9c>
    c934:	1000161e 	bne	r2,zero,c990 <strcmp+0x9c>
    c938:	21000104 	addi	r4,r4,4
    c93c:	20c00017 	ldw	r3,0(r4)
    c940:	29400104 	addi	r5,r5,4
    c944:	29800017 	ldw	r6,0(r5)
    c948:	1a4f883a 	add	r7,r3,r9
    c94c:	00c4303a 	nor	r2,zero,r3
    c950:	3884703a 	and	r2,r7,r2
    c954:	1204703a 	and	r2,r2,r8
    c958:	19bff626 	beq	r3,r6,c934 <__alt_mem_Flash_flash_data+0xf400c934>
    c95c:	20800007 	ldb	r2,0(r4)
    c960:	1000051e 	bne	r2,zero,c978 <strcmp+0x84>
    c964:	00000606 	br	c980 <strcmp+0x8c>
    c968:	21000044 	addi	r4,r4,1
    c96c:	20800007 	ldb	r2,0(r4)
    c970:	29400044 	addi	r5,r5,1
    c974:	10000226 	beq	r2,zero,c980 <strcmp+0x8c>
    c978:	28c00007 	ldb	r3,0(r5)
    c97c:	10fffa26 	beq	r2,r3,c968 <__alt_mem_Flash_flash_data+0xf400c968>
    c980:	20800003 	ldbu	r2,0(r4)
    c984:	28c00003 	ldbu	r3,0(r5)
    c988:	10c5c83a 	sub	r2,r2,r3
    c98c:	f800283a 	ret
    c990:	0005883a 	mov	r2,zero
    c994:	f800283a 	ret

0000c998 <__ssprint_r>:
    c998:	30800217 	ldw	r2,8(r6)
    c99c:	defff604 	addi	sp,sp,-40
    c9a0:	ddc00715 	stw	r23,28(sp)
    c9a4:	dc800215 	stw	r18,8(sp)
    c9a8:	dfc00915 	stw	ra,36(sp)
    c9ac:	df000815 	stw	fp,32(sp)
    c9b0:	dd800615 	stw	r22,24(sp)
    c9b4:	dd400515 	stw	r21,20(sp)
    c9b8:	dd000415 	stw	r20,16(sp)
    c9bc:	dcc00315 	stw	r19,12(sp)
    c9c0:	dc400115 	stw	r17,4(sp)
    c9c4:	dc000015 	stw	r16,0(sp)
    c9c8:	3025883a 	mov	r18,r6
    c9cc:	35c00017 	ldw	r23,0(r6)
    c9d0:	10005626 	beq	r2,zero,cb2c <__ssprint_r+0x194>
    c9d4:	2027883a 	mov	r19,r4
    c9d8:	28800217 	ldw	r2,8(r5)
    c9dc:	29000017 	ldw	r4,0(r5)
    c9e0:	2823883a 	mov	r17,r5
    c9e4:	0039883a 	mov	fp,zero
    c9e8:	0021883a 	mov	r16,zero
    c9ec:	80003926 	beq	r16,zero,cad4 <__ssprint_r+0x13c>
    c9f0:	102b883a 	mov	r21,r2
    c9f4:	102d883a 	mov	r22,r2
    c9f8:	80803a36 	bltu	r16,r2,cae4 <__ssprint_r+0x14c>
    c9fc:	88c0030b 	ldhu	r3,12(r17)
    ca00:	1881200c 	andi	r2,r3,1152
    ca04:	10002626 	beq	r2,zero,caa0 <__ssprint_r+0x108>
    ca08:	88800517 	ldw	r2,20(r17)
    ca0c:	89400417 	ldw	r5,16(r17)
    ca10:	81c00044 	addi	r7,r16,1
    ca14:	108d883a 	add	r6,r2,r2
    ca18:	3085883a 	add	r2,r6,r2
    ca1c:	100cd7fa 	srli	r6,r2,31
    ca20:	216dc83a 	sub	r22,r4,r5
    ca24:	3d89883a 	add	r4,r7,r22
    ca28:	3085883a 	add	r2,r6,r2
    ca2c:	102bd07a 	srai	r21,r2,1
    ca30:	a80d883a 	mov	r6,r21
    ca34:	a900022e 	bgeu	r21,r4,ca40 <__ssprint_r+0xa8>
    ca38:	202b883a 	mov	r21,r4
    ca3c:	200d883a 	mov	r6,r4
    ca40:	18c1000c 	andi	r3,r3,1024
    ca44:	9809883a 	mov	r4,r19
    ca48:	18002926 	beq	r3,zero,caf0 <__ssprint_r+0x158>
    ca4c:	300b883a 	mov	r5,r6
    ca50:	000a5a00 	call	a5a0 <_malloc_r>
    ca54:	1029883a 	mov	r20,r2
    ca58:	10002b26 	beq	r2,zero,cb08 <__ssprint_r+0x170>
    ca5c:	89400417 	ldw	r5,16(r17)
    ca60:	1009883a 	mov	r4,r2
    ca64:	b00d883a 	mov	r6,r22
    ca68:	000ae300 	call	ae30 <memcpy>
    ca6c:	8880030b 	ldhu	r2,12(r17)
    ca70:	00fedfc4 	movi	r3,-1153
    ca74:	10c4703a 	and	r2,r2,r3
    ca78:	10802014 	ori	r2,r2,128
    ca7c:	8880030d 	sth	r2,12(r17)
    ca80:	a589883a 	add	r4,r20,r22
    ca84:	adadc83a 	sub	r22,r21,r22
    ca88:	8d400515 	stw	r21,20(r17)
    ca8c:	8d800215 	stw	r22,8(r17)
    ca90:	8d000415 	stw	r20,16(r17)
    ca94:	89000015 	stw	r4,0(r17)
    ca98:	802b883a 	mov	r21,r16
    ca9c:	802d883a 	mov	r22,r16
    caa0:	e00b883a 	mov	r5,fp
    caa4:	b00d883a 	mov	r6,r22
    caa8:	000af680 	call	af68 <memmove>
    caac:	88800217 	ldw	r2,8(r17)
    cab0:	89000017 	ldw	r4,0(r17)
    cab4:	90c00217 	ldw	r3,8(r18)
    cab8:	1545c83a 	sub	r2,r2,r21
    cabc:	2589883a 	add	r4,r4,r22
    cac0:	88800215 	stw	r2,8(r17)
    cac4:	89000015 	stw	r4,0(r17)
    cac8:	1c21c83a 	sub	r16,r3,r16
    cacc:	94000215 	stw	r16,8(r18)
    cad0:	80001626 	beq	r16,zero,cb2c <__ssprint_r+0x194>
    cad4:	bf000017 	ldw	fp,0(r23)
    cad8:	bc000117 	ldw	r16,4(r23)
    cadc:	bdc00204 	addi	r23,r23,8
    cae0:	003fc206 	br	c9ec <__alt_mem_Flash_flash_data+0xf400c9ec>
    cae4:	802b883a 	mov	r21,r16
    cae8:	802d883a 	mov	r22,r16
    caec:	003fec06 	br	caa0 <__alt_mem_Flash_flash_data+0xf400caa0>
    caf0:	000c1880 	call	c188 <_realloc_r>
    caf4:	1029883a 	mov	r20,r2
    caf8:	103fe11e 	bne	r2,zero,ca80 <__alt_mem_Flash_flash_data+0xf400ca80>
    cafc:	89400417 	ldw	r5,16(r17)
    cb00:	9809883a 	mov	r4,r19
    cb04:	00099d00 	call	99d0 <_free_r>
    cb08:	88c0030b 	ldhu	r3,12(r17)
    cb0c:	00800304 	movi	r2,12
    cb10:	98800015 	stw	r2,0(r19)
    cb14:	18c01014 	ori	r3,r3,64
    cb18:	88c0030d 	sth	r3,12(r17)
    cb1c:	00bfffc4 	movi	r2,-1
    cb20:	90000215 	stw	zero,8(r18)
    cb24:	90000115 	stw	zero,4(r18)
    cb28:	00000206 	br	cb34 <__ssprint_r+0x19c>
    cb2c:	90000115 	stw	zero,4(r18)
    cb30:	0005883a 	mov	r2,zero
    cb34:	dfc00917 	ldw	ra,36(sp)
    cb38:	df000817 	ldw	fp,32(sp)
    cb3c:	ddc00717 	ldw	r23,28(sp)
    cb40:	dd800617 	ldw	r22,24(sp)
    cb44:	dd400517 	ldw	r21,20(sp)
    cb48:	dd000417 	ldw	r20,16(sp)
    cb4c:	dcc00317 	ldw	r19,12(sp)
    cb50:	dc800217 	ldw	r18,8(sp)
    cb54:	dc400117 	ldw	r17,4(sp)
    cb58:	dc000017 	ldw	r16,0(sp)
    cb5c:	dec00a04 	addi	sp,sp,40
    cb60:	f800283a 	ret

0000cb64 <___svfiprintf_internal_r>:
    cb64:	2880030b 	ldhu	r2,12(r5)
    cb68:	deffc904 	addi	sp,sp,-220
    cb6c:	dd403215 	stw	r21,200(sp)
    cb70:	dfc03615 	stw	ra,216(sp)
    cb74:	df003515 	stw	fp,212(sp)
    cb78:	ddc03415 	stw	r23,208(sp)
    cb7c:	dd803315 	stw	r22,204(sp)
    cb80:	dd003115 	stw	r20,196(sp)
    cb84:	dcc03015 	stw	r19,192(sp)
    cb88:	dc802f15 	stw	r18,188(sp)
    cb8c:	dc402e15 	stw	r17,184(sp)
    cb90:	dc002d15 	stw	r16,180(sp)
    cb94:	d9402715 	stw	r5,156(sp)
    cb98:	d9002915 	stw	r4,164(sp)
    cb9c:	1080200c 	andi	r2,r2,128
    cba0:	d9c02315 	stw	r7,140(sp)
    cba4:	302b883a 	mov	r21,r6
    cba8:	10000226 	beq	r2,zero,cbb4 <___svfiprintf_internal_r+0x50>
    cbac:	28800417 	ldw	r2,16(r5)
    cbb0:	1003ce26 	beq	r2,zero,daec <___svfiprintf_internal_r+0xf88>
    cbb4:	dac01a04 	addi	r11,sp,104
    cbb8:	da8019c4 	addi	r10,sp,103
    cbbc:	dc802917 	ldw	r18,164(sp)
    cbc0:	dd002717 	ldw	r20,156(sp)
    cbc4:	04c000b4 	movhi	r19,2
    cbc8:	dac01e15 	stw	r11,120(sp)
    cbcc:	5a97c83a 	sub	r11,r11,r10
    cbd0:	9cc0e704 	addi	r19,r19,924
    cbd4:	da801f15 	stw	r10,124(sp)
    cbd8:	dec01a15 	stw	sp,104(sp)
    cbdc:	d8001c15 	stw	zero,112(sp)
    cbe0:	d8001b15 	stw	zero,108(sp)
    cbe4:	d811883a 	mov	r8,sp
    cbe8:	d8002a15 	stw	zero,168(sp)
    cbec:	d8002415 	stw	zero,144(sp)
    cbf0:	dac02b15 	stw	r11,172(sp)
    cbf4:	a8800007 	ldb	r2,0(r21)
    cbf8:	10026a26 	beq	r2,zero,d5a4 <___svfiprintf_internal_r+0xa40>
    cbfc:	01000944 	movi	r4,37
    cc00:	11026826 	beq	r2,r4,d5a4 <___svfiprintf_internal_r+0xa40>
    cc04:	a805883a 	mov	r2,r21
    cc08:	00000106 	br	cc10 <___svfiprintf_internal_r+0xac>
    cc0c:	19000326 	beq	r3,r4,cc1c <___svfiprintf_internal_r+0xb8>
    cc10:	10800044 	addi	r2,r2,1
    cc14:	10c00007 	ldb	r3,0(r2)
    cc18:	183ffc1e 	bne	r3,zero,cc0c <__alt_mem_Flash_flash_data+0xf400cc0c>
    cc1c:	1561c83a 	sub	r16,r2,r21
    cc20:	102d883a 	mov	r22,r2
    cc24:	80000e26 	beq	r16,zero,cc60 <___svfiprintf_internal_r+0xfc>
    cc28:	d8c01c17 	ldw	r3,112(sp)
    cc2c:	d8801b17 	ldw	r2,108(sp)
    cc30:	45400015 	stw	r21,0(r8)
    cc34:	1c07883a 	add	r3,r3,r16
    cc38:	10800044 	addi	r2,r2,1
    cc3c:	d8c01c15 	stw	r3,112(sp)
    cc40:	44000115 	stw	r16,4(r8)
    cc44:	d8801b15 	stw	r2,108(sp)
    cc48:	00c001c4 	movi	r3,7
    cc4c:	1882d816 	blt	r3,r2,d7b0 <___svfiprintf_internal_r+0xc4c>
    cc50:	42000204 	addi	r8,r8,8
    cc54:	da802417 	ldw	r10,144(sp)
    cc58:	5415883a 	add	r10,r10,r16
    cc5c:	da802415 	stw	r10,144(sp)
    cc60:	b0800007 	ldb	r2,0(r22)
    cc64:	10027526 	beq	r2,zero,d63c <___svfiprintf_internal_r+0xad8>
    cc68:	b1000047 	ldb	r4,1(r22)
    cc6c:	b5400044 	addi	r21,r22,1
    cc70:	d8001d85 	stb	zero,118(sp)
    cc74:	000d883a 	mov	r6,zero
    cc78:	043fffc4 	movi	r16,-1
    cc7c:	d8002115 	stw	zero,132(sp)
    cc80:	0023883a 	mov	r17,zero
    cc84:	00c01604 	movi	r3,88
    cc88:	01400244 	movi	r5,9
    cc8c:	02400a84 	movi	r9,42
    cc90:	01c01b04 	movi	r7,108
    cc94:	ad400044 	addi	r21,r21,1
    cc98:	20bff804 	addi	r2,r4,-32
    cc9c:	18819736 	bltu	r3,r2,d2fc <___svfiprintf_internal_r+0x798>
    cca0:	100490ba 	slli	r2,r2,2
    cca4:	02c00074 	movhi	r11,1
    cca8:	5af32e04 	addi	r11,r11,-13128
    ccac:	12c5883a 	add	r2,r2,r11
    ccb0:	10800017 	ldw	r2,0(r2)
    ccb4:	1000683a 	jmp	r2
    ccb8:	0000d1f4 	movhi	zero,839
    ccbc:	0000d2fc 	xorhi	zero,zero,843
    ccc0:	0000d2fc 	xorhi	zero,zero,843
    ccc4:	0000d1e8 	cmpgeui	zero,zero,839
    ccc8:	0000d2fc 	xorhi	zero,zero,843
    cccc:	0000d2fc 	xorhi	zero,zero,843
    ccd0:	0000d2fc 	xorhi	zero,zero,843
    ccd4:	0000d2fc 	xorhi	zero,zero,843
    ccd8:	0000d2fc 	xorhi	zero,zero,843
    ccdc:	0000d2fc 	xorhi	zero,zero,843
    cce0:	0000cf14 	movui	zero,828
    cce4:	0000d330 	cmpltui	zero,zero,844
    cce8:	0000d2fc 	xorhi	zero,zero,843
    ccec:	0000cf3c 	xorhi	zero,zero,828
    ccf0:	0000d33c 	xorhi	zero,zero,844
    ccf4:	0000d2fc 	xorhi	zero,zero,843
    ccf8:	0000d324 	muli	zero,zero,844
    ccfc:	0000d2c4 	movi	zero,843
    cd00:	0000d2c4 	movi	zero,843
    cd04:	0000d2c4 	movi	zero,843
    cd08:	0000d2c4 	movi	zero,843
    cd0c:	0000d2c4 	movi	zero,843
    cd10:	0000d2c4 	movi	zero,843
    cd14:	0000d2c4 	movi	zero,843
    cd18:	0000d2c4 	movi	zero,843
    cd1c:	0000d2c4 	movi	zero,843
    cd20:	0000d2fc 	xorhi	zero,zero,843
    cd24:	0000d2fc 	xorhi	zero,zero,843
    cd28:	0000d2fc 	xorhi	zero,zero,843
    cd2c:	0000d2fc 	xorhi	zero,zero,843
    cd30:	0000d2fc 	xorhi	zero,zero,843
    cd34:	0000d2fc 	xorhi	zero,zero,843
    cd38:	0000d2fc 	xorhi	zero,zero,843
    cd3c:	0000d2fc 	xorhi	zero,zero,843
    cd40:	0000d2fc 	xorhi	zero,zero,843
    cd44:	0000d2fc 	xorhi	zero,zero,843
    cd48:	0000d25c 	xori	zero,zero,841
    cd4c:	0000d2fc 	xorhi	zero,zero,843
    cd50:	0000d2fc 	xorhi	zero,zero,843
    cd54:	0000d2fc 	xorhi	zero,zero,843
    cd58:	0000d2fc 	xorhi	zero,zero,843
    cd5c:	0000d2fc 	xorhi	zero,zero,843
    cd60:	0000d2fc 	xorhi	zero,zero,843
    cd64:	0000d2fc 	xorhi	zero,zero,843
    cd68:	0000d2fc 	xorhi	zero,zero,843
    cd6c:	0000d2fc 	xorhi	zero,zero,843
    cd70:	0000d2fc 	xorhi	zero,zero,843
    cd74:	0000cee8 	cmpgeui	zero,zero,827
    cd78:	0000d2fc 	xorhi	zero,zero,843
    cd7c:	0000d2fc 	xorhi	zero,zero,843
    cd80:	0000d2fc 	xorhi	zero,zero,843
    cd84:	0000d2fc 	xorhi	zero,zero,843
    cd88:	0000d2fc 	xorhi	zero,zero,843
    cd8c:	0000ce1c 	xori	zero,zero,824
    cd90:	0000d2fc 	xorhi	zero,zero,843
    cd94:	0000d2fc 	xorhi	zero,zero,843
    cd98:	0000d148 	cmpgei	zero,zero,837
    cd9c:	0000d2fc 	xorhi	zero,zero,843
    cda0:	0000d2fc 	xorhi	zero,zero,843
    cda4:	0000d2fc 	xorhi	zero,zero,843
    cda8:	0000d2fc 	xorhi	zero,zero,843
    cdac:	0000d2fc 	xorhi	zero,zero,843
    cdb0:	0000d2fc 	xorhi	zero,zero,843
    cdb4:	0000d2fc 	xorhi	zero,zero,843
    cdb8:	0000d2fc 	xorhi	zero,zero,843
    cdbc:	0000d2fc 	xorhi	zero,zero,843
    cdc0:	0000d2fc 	xorhi	zero,zero,843
    cdc4:	0000d034 	movhi	zero,832
    cdc8:	0000cff4 	movhi	zero,831
    cdcc:	0000d2fc 	xorhi	zero,zero,843
    cdd0:	0000d2fc 	xorhi	zero,zero,843
    cdd4:	0000d2fc 	xorhi	zero,zero,843
    cdd8:	0000d1a4 	muli	zero,zero,838
    cddc:	0000cff4 	movhi	zero,831
    cde0:	0000d2fc 	xorhi	zero,zero,843
    cde4:	0000d2fc 	xorhi	zero,zero,843
    cde8:	0000d190 	cmplti	zero,zero,838
    cdec:	0000d2fc 	xorhi	zero,zero,843
    cdf0:	0000d1b0 	cmpltui	zero,zero,838
    cdf4:	0000ceec 	andhi	zero,zero,827
    cdf8:	0000cfb0 	cmpltui	zero,zero,830
    cdfc:	0000cfa4 	muli	zero,zero,830
    ce00:	0000d2fc 	xorhi	zero,zero,843
    ce04:	0000cf48 	cmpgei	zero,zero,829
    ce08:	0000d2fc 	xorhi	zero,zero,843
    ce0c:	0000ce20 	cmpeqi	zero,zero,824
    ce10:	0000d2fc 	xorhi	zero,zero,843
    ce14:	0000d2fc 	xorhi	zero,zero,843
    ce18:	0000d210 	cmplti	zero,zero,840
    ce1c:	8c400414 	ori	r17,r17,16
    ce20:	8880080c 	andi	r2,r17,32
    ce24:	10029626 	beq	r2,zero,d880 <___svfiprintf_internal_r+0xd1c>
    ce28:	da802317 	ldw	r10,140(sp)
    ce2c:	dac02317 	ldw	r11,140(sp)
    ce30:	00800044 	movi	r2,1
    ce34:	52400017 	ldw	r9,0(r10)
    ce38:	52800117 	ldw	r10,4(r10)
    ce3c:	5ac00204 	addi	r11,r11,8
    ce40:	dac02315 	stw	r11,140(sp)
    ce44:	4a86b03a 	or	r3,r9,r10
    ce48:	d8001d85 	stb	zero,118(sp)
    ce4c:	8039883a 	mov	fp,r16
    ce50:	0017883a 	mov	r11,zero
    ce54:	80000216 	blt	r16,zero,ce60 <___svfiprintf_internal_r+0x2fc>
    ce58:	013fdfc4 	movi	r4,-129
    ce5c:	8922703a 	and	r17,r17,r4
    ce60:	1801d21e 	bne	r3,zero,d5ac <___svfiprintf_internal_r+0xa48>
    ce64:	80024626 	beq	r16,zero,d780 <___svfiprintf_internal_r+0xc1c>
    ce68:	10803fcc 	andi	r2,r2,255
    ce6c:	00c00044 	movi	r3,1
    ce70:	10c2b426 	beq	r2,r3,d944 <___svfiprintf_internal_r+0xde0>
    ce74:	00c00084 	movi	r3,2
    ce78:	10c25d26 	beq	r2,r3,d7f0 <___svfiprintf_internal_r+0xc8c>
    ce7c:	d8c01a04 	addi	r3,sp,104
    ce80:	4808d0fa 	srli	r4,r9,3
    ce84:	500a977a 	slli	r5,r10,29
    ce88:	5014d0fa 	srli	r10,r10,3
    ce8c:	4a4001cc 	andi	r9,r9,7
    ce90:	48800c04 	addi	r2,r9,48
    ce94:	18ffffc4 	addi	r3,r3,-1
    ce98:	2912b03a 	or	r9,r5,r4
    ce9c:	18800005 	stb	r2,0(r3)
    cea0:	4a88b03a 	or	r4,r9,r10
    cea4:	203ff61e 	bne	r4,zero,ce80 <__alt_mem_Flash_flash_data+0xf400ce80>
    cea8:	8900004c 	andi	r4,r17,1
    ceac:	d8c02615 	stw	r3,152(sp)
    ceb0:	2002961e 	bne	r4,zero,d90c <___svfiprintf_internal_r+0xda8>
    ceb4:	da801e17 	ldw	r10,120(sp)
    ceb8:	50f9c83a 	sub	fp,r10,r3
    cebc:	df002015 	stw	fp,128(sp)
    cec0:	e400010e 	bge	fp,r16,cec8 <___svfiprintf_internal_r+0x364>
    cec4:	dc002015 	stw	r16,128(sp)
    cec8:	5ac03fcc 	andi	r11,r11,255
    cecc:	5ac0201c 	xori	r11,r11,128
    ced0:	5affe004 	addi	r11,r11,-128
    ced4:	58006326 	beq	r11,zero,d064 <___svfiprintf_internal_r+0x500>
    ced8:	d8c02017 	ldw	r3,128(sp)
    cedc:	18c00044 	addi	r3,r3,1
    cee0:	d8c02015 	stw	r3,128(sp)
    cee4:	00005f06 	br	d064 <___svfiprintf_internal_r+0x500>
    cee8:	8c400414 	ori	r17,r17,16
    ceec:	8880080c 	andi	r2,r17,32
    cef0:	10027926 	beq	r2,zero,d8d8 <___svfiprintf_internal_r+0xd74>
    cef4:	dac02317 	ldw	r11,140(sp)
    cef8:	0005883a 	mov	r2,zero
    cefc:	5a400017 	ldw	r9,0(r11)
    cf00:	5a800117 	ldw	r10,4(r11)
    cf04:	5ac00204 	addi	r11,r11,8
    cf08:	dac02315 	stw	r11,140(sp)
    cf0c:	4a86b03a 	or	r3,r9,r10
    cf10:	003fcd06 	br	ce48 <__alt_mem_Flash_flash_data+0xf400ce48>
    cf14:	da802317 	ldw	r10,140(sp)
    cf18:	dac02317 	ldw	r11,140(sp)
    cf1c:	52800017 	ldw	r10,0(r10)
    cf20:	58800104 	addi	r2,r11,4
    cf24:	da802115 	stw	r10,132(sp)
    cf28:	50028c0e 	bge	r10,zero,d95c <___svfiprintf_internal_r+0xdf8>
    cf2c:	da802117 	ldw	r10,132(sp)
    cf30:	d8802315 	stw	r2,140(sp)
    cf34:	0295c83a 	sub	r10,zero,r10
    cf38:	da802115 	stw	r10,132(sp)
    cf3c:	8c400114 	ori	r17,r17,4
    cf40:	a9000007 	ldb	r4,0(r21)
    cf44:	003f5306 	br	cc94 <__alt_mem_Flash_flash_data+0xf400cc94>
    cf48:	da802317 	ldw	r10,140(sp)
    cf4c:	dac02317 	ldw	r11,140(sp)
    cf50:	d8001d85 	stb	zero,118(sp)
    cf54:	52800017 	ldw	r10,0(r10)
    cf58:	5dc00104 	addi	r23,r11,4
    cf5c:	da802615 	stw	r10,152(sp)
    cf60:	5002d626 	beq	r10,zero,dabc <___svfiprintf_internal_r+0xf58>
    cf64:	d9002617 	ldw	r4,152(sp)
    cf68:	8002cc16 	blt	r16,zero,da9c <___svfiprintf_internal_r+0xf38>
    cf6c:	000b883a 	mov	r5,zero
    cf70:	800d883a 	mov	r6,r16
    cf74:	da002c15 	stw	r8,176(sp)
    cf78:	000ad480 	call	ad48 <memchr>
    cf7c:	da002c17 	ldw	r8,176(sp)
    cf80:	1002f026 	beq	r2,zero,db44 <___svfiprintf_internal_r+0xfe0>
    cf84:	d8c02617 	ldw	r3,152(sp)
    cf88:	10f9c83a 	sub	fp,r2,r3
    cf8c:	8700010e 	bge	r16,fp,cf94 <___svfiprintf_internal_r+0x430>
    cf90:	8039883a 	mov	fp,r16
    cf94:	dac01d83 	ldbu	r11,118(sp)
    cf98:	ddc02315 	stw	r23,140(sp)
    cf9c:	0021883a 	mov	r16,zero
    cfa0:	003fc606 	br	cebc <__alt_mem_Flash_flash_data+0xf400cebc>
    cfa4:	8c400814 	ori	r17,r17,32
    cfa8:	a9000007 	ldb	r4,0(r21)
    cfac:	003f3906 	br	cc94 <__alt_mem_Flash_flash_data+0xf400cc94>
    cfb0:	da802317 	ldw	r10,140(sp)
    cfb4:	00800c04 	movi	r2,48
    cfb8:	dac02317 	ldw	r11,140(sp)
    cfbc:	52400017 	ldw	r9,0(r10)
    cfc0:	d8801d05 	stb	r2,116(sp)
    cfc4:	00801e04 	movi	r2,120
    cfc8:	d8801d45 	stb	r2,117(sp)
    cfcc:	008000b4 	movhi	r2,2
    cfd0:	10807e04 	addi	r2,r2,504
    cfd4:	5ac00104 	addi	r11,r11,4
    cfd8:	d8802a15 	stw	r2,168(sp)
    cfdc:	0015883a 	mov	r10,zero
    cfe0:	8c400094 	ori	r17,r17,2
    cfe4:	dac02315 	stw	r11,140(sp)
    cfe8:	00800084 	movi	r2,2
    cfec:	4807883a 	mov	r3,r9
    cff0:	003f9506 	br	ce48 <__alt_mem_Flash_flash_data+0xf400ce48>
    cff4:	d9801d85 	stb	r6,118(sp)
    cff8:	8880080c 	andi	r2,r17,32
    cffc:	d8c02317 	ldw	r3,140(sp)
    d000:	10009b26 	beq	r2,zero,d270 <___svfiprintf_internal_r+0x70c>
    d004:	dac02317 	ldw	r11,140(sp)
    d008:	18800117 	ldw	r2,4(r3)
    d00c:	1a400017 	ldw	r9,0(r3)
    d010:	5ac00204 	addi	r11,r11,8
    d014:	dac02315 	stw	r11,140(sp)
    d018:	1015883a 	mov	r10,r2
    d01c:	10009f16 	blt	r2,zero,d29c <___svfiprintf_internal_r+0x738>
    d020:	dac01d83 	ldbu	r11,118(sp)
    d024:	8039883a 	mov	fp,r16
    d028:	00800044 	movi	r2,1
    d02c:	4a86b03a 	or	r3,r9,r10
    d030:	003f8806 	br	ce54 <__alt_mem_Flash_flash_data+0xf400ce54>
    d034:	dac02317 	ldw	r11,140(sp)
    d038:	00c00044 	movi	r3,1
    d03c:	da801004 	addi	r10,sp,64
    d040:	58800017 	ldw	r2,0(r11)
    d044:	5ac00104 	addi	r11,r11,4
    d048:	d8c02015 	stw	r3,128(sp)
    d04c:	d8001d85 	stb	zero,118(sp)
    d050:	d8801005 	stb	r2,64(sp)
    d054:	dac02315 	stw	r11,140(sp)
    d058:	1839883a 	mov	fp,r3
    d05c:	da802615 	stw	r10,152(sp)
    d060:	0021883a 	mov	r16,zero
    d064:	8a80008c 	andi	r10,r17,2
    d068:	da802215 	stw	r10,136(sp)
    d06c:	50000326 	beq	r10,zero,d07c <___svfiprintf_internal_r+0x518>
    d070:	dac02017 	ldw	r11,128(sp)
    d074:	5ac00084 	addi	r11,r11,2
    d078:	dac02015 	stw	r11,128(sp)
    d07c:	88c0210c 	andi	r3,r17,132
    d080:	d8c02515 	stw	r3,148(sp)
    d084:	1800bd1e 	bne	r3,zero,d37c <___svfiprintf_internal_r+0x818>
    d088:	da802117 	ldw	r10,132(sp)
    d08c:	dac02017 	ldw	r11,128(sp)
    d090:	52edc83a 	sub	r22,r10,r11
    d094:	0580b90e 	bge	zero,r22,d37c <___svfiprintf_internal_r+0x818>
    d098:	02400404 	movi	r9,16
    d09c:	d8c01c17 	ldw	r3,112(sp)
    d0a0:	d8801b17 	ldw	r2,108(sp)
    d0a4:	4d829b0e 	bge	r9,r22,db14 <___svfiprintf_internal_r+0xfb0>
    d0a8:	014000b4 	movhi	r5,2
    d0ac:	2940eb04 	addi	r5,r5,940
    d0b0:	d9402815 	stw	r5,160(sp)
    d0b4:	05c001c4 	movi	r23,7
    d0b8:	00000306 	br	d0c8 <___svfiprintf_internal_r+0x564>
    d0bc:	b5bffc04 	addi	r22,r22,-16
    d0c0:	42000204 	addi	r8,r8,8
    d0c4:	4d80150e 	bge	r9,r22,d11c <___svfiprintf_internal_r+0x5b8>
    d0c8:	028000b4 	movhi	r10,2
    d0cc:	18c00404 	addi	r3,r3,16
    d0d0:	10800044 	addi	r2,r2,1
    d0d4:	5280eb04 	addi	r10,r10,940
    d0d8:	42800015 	stw	r10,0(r8)
    d0dc:	42400115 	stw	r9,4(r8)
    d0e0:	d8c01c15 	stw	r3,112(sp)
    d0e4:	d8801b15 	stw	r2,108(sp)
    d0e8:	b8bff40e 	bge	r23,r2,d0bc <__alt_mem_Flash_flash_data+0xf400d0bc>
    d0ec:	9009883a 	mov	r4,r18
    d0f0:	a00b883a 	mov	r5,r20
    d0f4:	d9801a04 	addi	r6,sp,104
    d0f8:	da402c15 	stw	r9,176(sp)
    d0fc:	000c9980 	call	c998 <__ssprint_r>
    d100:	da402c17 	ldw	r9,176(sp)
    d104:	1001531e 	bne	r2,zero,d654 <___svfiprintf_internal_r+0xaf0>
    d108:	b5bffc04 	addi	r22,r22,-16
    d10c:	d8c01c17 	ldw	r3,112(sp)
    d110:	d8801b17 	ldw	r2,108(sp)
    d114:	d811883a 	mov	r8,sp
    d118:	4dbfeb16 	blt	r9,r22,d0c8 <__alt_mem_Flash_flash_data+0xf400d0c8>
    d11c:	dac02817 	ldw	r11,160(sp)
    d120:	b0c7883a 	add	r3,r22,r3
    d124:	10800044 	addi	r2,r2,1
    d128:	42c00015 	stw	r11,0(r8)
    d12c:	45800115 	stw	r22,4(r8)
    d130:	d8c01c15 	stw	r3,112(sp)
    d134:	d8801b15 	stw	r2,108(sp)
    d138:	010001c4 	movi	r4,7
    d13c:	2081dd16 	blt	r4,r2,d8b4 <___svfiprintf_internal_r+0xd50>
    d140:	42000204 	addi	r8,r8,8
    d144:	00008f06 	br	d384 <___svfiprintf_internal_r+0x820>
    d148:	008000b4 	movhi	r2,2
    d14c:	10807904 	addi	r2,r2,484
    d150:	d8802a15 	stw	r2,168(sp)
    d154:	d9801d85 	stb	r6,118(sp)
    d158:	8880080c 	andi	r2,r17,32
    d15c:	10003226 	beq	r2,zero,d228 <___svfiprintf_internal_r+0x6c4>
    d160:	da802317 	ldw	r10,140(sp)
    d164:	dac02317 	ldw	r11,140(sp)
    d168:	52400017 	ldw	r9,0(r10)
    d16c:	52800117 	ldw	r10,4(r10)
    d170:	5ac00204 	addi	r11,r11,8
    d174:	dac02315 	stw	r11,140(sp)
    d178:	8880004c 	andi	r2,r17,1
    d17c:	10003426 	beq	r2,zero,d250 <___svfiprintf_internal_r+0x6ec>
    d180:	4a86b03a 	or	r3,r9,r10
    d184:	1802231e 	bne	r3,zero,da14 <___svfiprintf_internal_r+0xeb0>
    d188:	00800084 	movi	r2,2
    d18c:	003f2e06 	br	ce48 <__alt_mem_Flash_flash_data+0xf400ce48>
    d190:	a9000007 	ldb	r4,0(r21)
    d194:	a805883a 	mov	r2,r21
    d198:	21c22426 	beq	r4,r7,da2c <___svfiprintf_internal_r+0xec8>
    d19c:	8c400414 	ori	r17,r17,16
    d1a0:	003ebc06 	br	cc94 <__alt_mem_Flash_flash_data+0xf400cc94>
    d1a4:	8c401014 	ori	r17,r17,64
    d1a8:	a9000007 	ldb	r4,0(r21)
    d1ac:	003eb906 	br	cc94 <__alt_mem_Flash_flash_data+0xf400cc94>
    d1b0:	d9801d85 	stb	r6,118(sp)
    d1b4:	8880080c 	andi	r2,r17,32
    d1b8:	10020d1e 	bne	r2,zero,d9f0 <___svfiprintf_internal_r+0xe8c>
    d1bc:	8880040c 	andi	r2,r17,16
    d1c0:	10021e1e 	bne	r2,zero,da3c <___svfiprintf_internal_r+0xed8>
    d1c4:	8c40100c 	andi	r17,r17,64
    d1c8:	88021c26 	beq	r17,zero,da3c <___svfiprintf_internal_r+0xed8>
    d1cc:	dac02317 	ldw	r11,140(sp)
    d1d0:	da802417 	ldw	r10,144(sp)
    d1d4:	58800017 	ldw	r2,0(r11)
    d1d8:	5ac00104 	addi	r11,r11,4
    d1dc:	dac02315 	stw	r11,140(sp)
    d1e0:	1280000d 	sth	r10,0(r2)
    d1e4:	003e8306 	br	cbf4 <__alt_mem_Flash_flash_data+0xf400cbf4>
    d1e8:	8c400054 	ori	r17,r17,1
    d1ec:	a9000007 	ldb	r4,0(r21)
    d1f0:	003ea806 	br	cc94 <__alt_mem_Flash_flash_data+0xf400cc94>
    d1f4:	30803fcc 	andi	r2,r6,255
    d1f8:	1080201c 	xori	r2,r2,128
    d1fc:	10bfe004 	addi	r2,r2,-128
    d200:	1001f91e 	bne	r2,zero,d9e8 <___svfiprintf_internal_r+0xe84>
    d204:	01800804 	movi	r6,32
    d208:	a9000007 	ldb	r4,0(r21)
    d20c:	003ea106 	br	cc94 <__alt_mem_Flash_flash_data+0xf400cc94>
    d210:	008000b4 	movhi	r2,2
    d214:	10807e04 	addi	r2,r2,504
    d218:	d8802a15 	stw	r2,168(sp)
    d21c:	d9801d85 	stb	r6,118(sp)
    d220:	8880080c 	andi	r2,r17,32
    d224:	103fce1e 	bne	r2,zero,d160 <__alt_mem_Flash_flash_data+0xf400d160>
    d228:	8880040c 	andi	r2,r17,16
    d22c:	1001e526 	beq	r2,zero,d9c4 <___svfiprintf_internal_r+0xe60>
    d230:	da802317 	ldw	r10,140(sp)
    d234:	dac02317 	ldw	r11,140(sp)
    d238:	52400017 	ldw	r9,0(r10)
    d23c:	8880004c 	andi	r2,r17,1
    d240:	5ac00104 	addi	r11,r11,4
    d244:	dac02315 	stw	r11,140(sp)
    d248:	0015883a 	mov	r10,zero
    d24c:	103fcc1e 	bne	r2,zero,d180 <__alt_mem_Flash_flash_data+0xf400d180>
    d250:	00800084 	movi	r2,2
    d254:	4a86b03a 	or	r3,r9,r10
    d258:	003efb06 	br	ce48 <__alt_mem_Flash_flash_data+0xf400ce48>
    d25c:	8c400414 	ori	r17,r17,16
    d260:	d9801d85 	stb	r6,118(sp)
    d264:	8880080c 	andi	r2,r17,32
    d268:	d8c02317 	ldw	r3,140(sp)
    d26c:	103f651e 	bne	r2,zero,d004 <__alt_mem_Flash_flash_data+0xf400d004>
    d270:	8880040c 	andi	r2,r17,16
    d274:	1001c61e 	bne	r2,zero,d990 <___svfiprintf_internal_r+0xe2c>
    d278:	8880100c 	andi	r2,r17,64
    d27c:	1001c426 	beq	r2,zero,d990 <___svfiprintf_internal_r+0xe2c>
    d280:	1a40000f 	ldh	r9,0(r3)
    d284:	dac02317 	ldw	r11,140(sp)
    d288:	4815d7fa 	srai	r10,r9,31
    d28c:	5ac00104 	addi	r11,r11,4
    d290:	dac02315 	stw	r11,140(sp)
    d294:	5005883a 	mov	r2,r10
    d298:	103f610e 	bge	r2,zero,d020 <__alt_mem_Flash_flash_data+0xf400d020>
    d29c:	0253c83a 	sub	r9,zero,r9
    d2a0:	4804c03a 	cmpne	r2,r9,zero
    d2a4:	0295c83a 	sub	r10,zero,r10
    d2a8:	5095c83a 	sub	r10,r10,r2
    d2ac:	02c00b44 	movi	r11,45
    d2b0:	dac01d85 	stb	r11,118(sp)
    d2b4:	8039883a 	mov	fp,r16
    d2b8:	00800044 	movi	r2,1
    d2bc:	4a86b03a 	or	r3,r9,r10
    d2c0:	003ee406 	br	ce54 <__alt_mem_Flash_flash_data+0xf400ce54>
    d2c4:	a815883a 	mov	r10,r21
    d2c8:	d8002115 	stw	zero,132(sp)
    d2cc:	20bff404 	addi	r2,r4,-48
    d2d0:	51000007 	ldb	r4,0(r10)
    d2d4:	da802117 	ldw	r10,132(sp)
    d2d8:	ad400044 	addi	r21,r21,1
    d2dc:	52c002a4 	muli	r11,r10,10
    d2e0:	a815883a 	mov	r10,r21
    d2e4:	5885883a 	add	r2,r11,r2
    d2e8:	d8802115 	stw	r2,132(sp)
    d2ec:	20bff404 	addi	r2,r4,-48
    d2f0:	28bff72e 	bgeu	r5,r2,d2d0 <__alt_mem_Flash_flash_data+0xf400d2d0>
    d2f4:	20bff804 	addi	r2,r4,-32
    d2f8:	18be692e 	bgeu	r3,r2,cca0 <__alt_mem_Flash_flash_data+0xf400cca0>
    d2fc:	d9801d85 	stb	r6,118(sp)
    d300:	2000ce26 	beq	r4,zero,d63c <___svfiprintf_internal_r+0xad8>
    d304:	02800044 	movi	r10,1
    d308:	dac01004 	addi	r11,sp,64
    d30c:	da802015 	stw	r10,128(sp)
    d310:	d9001005 	stb	r4,64(sp)
    d314:	d8001d85 	stb	zero,118(sp)
    d318:	5039883a 	mov	fp,r10
    d31c:	dac02615 	stw	r11,152(sp)
    d320:	003f4f06 	br	d060 <__alt_mem_Flash_flash_data+0xf400d060>
    d324:	8c402014 	ori	r17,r17,128
    d328:	a9000007 	ldb	r4,0(r21)
    d32c:	003e5906 	br	cc94 <__alt_mem_Flash_flash_data+0xf400cc94>
    d330:	01800ac4 	movi	r6,43
    d334:	a9000007 	ldb	r4,0(r21)
    d338:	003e5606 	br	cc94 <__alt_mem_Flash_flash_data+0xf400cc94>
    d33c:	a9000007 	ldb	r4,0(r21)
    d340:	aa800044 	addi	r10,r21,1
    d344:	22420626 	beq	r4,r9,db60 <___svfiprintf_internal_r+0xffc>
    d348:	20bff404 	addi	r2,r4,-48
    d34c:	502b883a 	mov	r21,r10
    d350:	0021883a 	mov	r16,zero
    d354:	28be5036 	bltu	r5,r2,cc98 <__alt_mem_Flash_flash_data+0xf400cc98>
    d358:	a9000007 	ldb	r4,0(r21)
    d35c:	840002a4 	muli	r16,r16,10
    d360:	ad400044 	addi	r21,r21,1
    d364:	1421883a 	add	r16,r2,r16
    d368:	20bff404 	addi	r2,r4,-48
    d36c:	28bffa2e 	bgeu	r5,r2,d358 <__alt_mem_Flash_flash_data+0xf400d358>
    d370:	803e490e 	bge	r16,zero,cc98 <__alt_mem_Flash_flash_data+0xf400cc98>
    d374:	043fffc4 	movi	r16,-1
    d378:	003e4706 	br	cc98 <__alt_mem_Flash_flash_data+0xf400cc98>
    d37c:	d8c01c17 	ldw	r3,112(sp)
    d380:	d8801b17 	ldw	r2,108(sp)
    d384:	d9001d87 	ldb	r4,118(sp)
    d388:	20000b26 	beq	r4,zero,d3b8 <___svfiprintf_internal_r+0x854>
    d38c:	d9001d84 	addi	r4,sp,118
    d390:	18c00044 	addi	r3,r3,1
    d394:	10800044 	addi	r2,r2,1
    d398:	41000015 	stw	r4,0(r8)
    d39c:	01000044 	movi	r4,1
    d3a0:	41000115 	stw	r4,4(r8)
    d3a4:	d8c01c15 	stw	r3,112(sp)
    d3a8:	d8801b15 	stw	r2,108(sp)
    d3ac:	010001c4 	movi	r4,7
    d3b0:	20811e16 	blt	r4,r2,d82c <___svfiprintf_internal_r+0xcc8>
    d3b4:	42000204 	addi	r8,r8,8
    d3b8:	da802217 	ldw	r10,136(sp)
    d3bc:	50000b26 	beq	r10,zero,d3ec <___svfiprintf_internal_r+0x888>
    d3c0:	d9001d04 	addi	r4,sp,116
    d3c4:	18c00084 	addi	r3,r3,2
    d3c8:	10800044 	addi	r2,r2,1
    d3cc:	41000015 	stw	r4,0(r8)
    d3d0:	01000084 	movi	r4,2
    d3d4:	41000115 	stw	r4,4(r8)
    d3d8:	d8c01c15 	stw	r3,112(sp)
    d3dc:	d8801b15 	stw	r2,108(sp)
    d3e0:	010001c4 	movi	r4,7
    d3e4:	20811a16 	blt	r4,r2,d850 <___svfiprintf_internal_r+0xcec>
    d3e8:	42000204 	addi	r8,r8,8
    d3ec:	dac02517 	ldw	r11,148(sp)
    d3f0:	01002004 	movi	r4,128
    d3f4:	5900a826 	beq	r11,r4,d698 <___svfiprintf_internal_r+0xb34>
    d3f8:	8721c83a 	sub	r16,r16,fp
    d3fc:	0400260e 	bge	zero,r16,d498 <___svfiprintf_internal_r+0x934>
    d400:	01c00404 	movi	r7,16
    d404:	3c019d0e 	bge	r7,r16,da7c <___svfiprintf_internal_r+0xf18>
    d408:	010000b4 	movhi	r4,2
    d40c:	2100e704 	addi	r4,r4,924
    d410:	d9002215 	stw	r4,136(sp)
    d414:	382f883a 	mov	r23,r7
    d418:	058001c4 	movi	r22,7
    d41c:	00000306 	br	d42c <___svfiprintf_internal_r+0x8c8>
    d420:	843ffc04 	addi	r16,r16,-16
    d424:	42000204 	addi	r8,r8,8
    d428:	bc00110e 	bge	r23,r16,d470 <___svfiprintf_internal_r+0x90c>
    d42c:	18c00404 	addi	r3,r3,16
    d430:	10800044 	addi	r2,r2,1
    d434:	44c00015 	stw	r19,0(r8)
    d438:	45c00115 	stw	r23,4(r8)
    d43c:	d8c01c15 	stw	r3,112(sp)
    d440:	d8801b15 	stw	r2,108(sp)
    d444:	b0bff60e 	bge	r22,r2,d420 <__alt_mem_Flash_flash_data+0xf400d420>
    d448:	9009883a 	mov	r4,r18
    d44c:	a00b883a 	mov	r5,r20
    d450:	d9801a04 	addi	r6,sp,104
    d454:	000c9980 	call	c998 <__ssprint_r>
    d458:	10007e1e 	bne	r2,zero,d654 <___svfiprintf_internal_r+0xaf0>
    d45c:	843ffc04 	addi	r16,r16,-16
    d460:	d8c01c17 	ldw	r3,112(sp)
    d464:	d8801b17 	ldw	r2,108(sp)
    d468:	d811883a 	mov	r8,sp
    d46c:	bc3fef16 	blt	r23,r16,d42c <__alt_mem_Flash_flash_data+0xf400d42c>
    d470:	da802217 	ldw	r10,136(sp)
    d474:	1c07883a 	add	r3,r3,r16
    d478:	10800044 	addi	r2,r2,1
    d47c:	42800015 	stw	r10,0(r8)
    d480:	44000115 	stw	r16,4(r8)
    d484:	d8c01c15 	stw	r3,112(sp)
    d488:	d8801b15 	stw	r2,108(sp)
    d48c:	010001c4 	movi	r4,7
    d490:	2080ce16 	blt	r4,r2,d7cc <___svfiprintf_internal_r+0xc68>
    d494:	42000204 	addi	r8,r8,8
    d498:	dac02617 	ldw	r11,152(sp)
    d49c:	1f07883a 	add	r3,r3,fp
    d4a0:	10800044 	addi	r2,r2,1
    d4a4:	42c00015 	stw	r11,0(r8)
    d4a8:	47000115 	stw	fp,4(r8)
    d4ac:	d8c01c15 	stw	r3,112(sp)
    d4b0:	d8801b15 	stw	r2,108(sp)
    d4b4:	010001c4 	movi	r4,7
    d4b8:	2080a316 	blt	r4,r2,d748 <___svfiprintf_internal_r+0xbe4>
    d4bc:	42000204 	addi	r8,r8,8
    d4c0:	8c40010c 	andi	r17,r17,4
    d4c4:	88002b26 	beq	r17,zero,d574 <___svfiprintf_internal_r+0xa10>
    d4c8:	da802117 	ldw	r10,132(sp)
    d4cc:	dac02017 	ldw	r11,128(sp)
    d4d0:	52e1c83a 	sub	r16,r10,r11
    d4d4:	0400270e 	bge	zero,r16,d574 <___svfiprintf_internal_r+0xa10>
    d4d8:	04400404 	movi	r17,16
    d4dc:	d8801b17 	ldw	r2,108(sp)
    d4e0:	8c01900e 	bge	r17,r16,db24 <___svfiprintf_internal_r+0xfc0>
    d4e4:	014000b4 	movhi	r5,2
    d4e8:	2940eb04 	addi	r5,r5,940
    d4ec:	d9402815 	stw	r5,160(sp)
    d4f0:	070001c4 	movi	fp,7
    d4f4:	00000306 	br	d504 <___svfiprintf_internal_r+0x9a0>
    d4f8:	843ffc04 	addi	r16,r16,-16
    d4fc:	42000204 	addi	r8,r8,8
    d500:	8c00130e 	bge	r17,r16,d550 <___svfiprintf_internal_r+0x9ec>
    d504:	028000b4 	movhi	r10,2
    d508:	18c00404 	addi	r3,r3,16
    d50c:	10800044 	addi	r2,r2,1
    d510:	5280eb04 	addi	r10,r10,940
    d514:	42800015 	stw	r10,0(r8)
    d518:	44400115 	stw	r17,4(r8)
    d51c:	d8c01c15 	stw	r3,112(sp)
    d520:	d8801b15 	stw	r2,108(sp)
    d524:	e0bff40e 	bge	fp,r2,d4f8 <__alt_mem_Flash_flash_data+0xf400d4f8>
    d528:	9009883a 	mov	r4,r18
    d52c:	a00b883a 	mov	r5,r20
    d530:	d9801a04 	addi	r6,sp,104
    d534:	000c9980 	call	c998 <__ssprint_r>
    d538:	1000461e 	bne	r2,zero,d654 <___svfiprintf_internal_r+0xaf0>
    d53c:	843ffc04 	addi	r16,r16,-16
    d540:	d8c01c17 	ldw	r3,112(sp)
    d544:	d8801b17 	ldw	r2,108(sp)
    d548:	d811883a 	mov	r8,sp
    d54c:	8c3fed16 	blt	r17,r16,d504 <__alt_mem_Flash_flash_data+0xf400d504>
    d550:	dac02817 	ldw	r11,160(sp)
    d554:	1c07883a 	add	r3,r3,r16
    d558:	10800044 	addi	r2,r2,1
    d55c:	42c00015 	stw	r11,0(r8)
    d560:	44000115 	stw	r16,4(r8)
    d564:	d8c01c15 	stw	r3,112(sp)
    d568:	d8801b15 	stw	r2,108(sp)
    d56c:	010001c4 	movi	r4,7
    d570:	2080fd16 	blt	r4,r2,d968 <___svfiprintf_internal_r+0xe04>
    d574:	dd802017 	ldw	r22,128(sp)
    d578:	da802117 	ldw	r10,132(sp)
    d57c:	b280010e 	bge	r22,r10,d584 <___svfiprintf_internal_r+0xa20>
    d580:	502d883a 	mov	r22,r10
    d584:	dac02417 	ldw	r11,144(sp)
    d588:	5d97883a 	add	r11,r11,r22
    d58c:	dac02415 	stw	r11,144(sp)
    d590:	1800751e 	bne	r3,zero,d768 <___svfiprintf_internal_r+0xc04>
    d594:	a8800007 	ldb	r2,0(r21)
    d598:	d8001b15 	stw	zero,108(sp)
    d59c:	d811883a 	mov	r8,sp
    d5a0:	103d961e 	bne	r2,zero,cbfc <__alt_mem_Flash_flash_data+0xf400cbfc>
    d5a4:	a82d883a 	mov	r22,r21
    d5a8:	003dad06 	br	cc60 <__alt_mem_Flash_flash_data+0xf400cc60>
    d5ac:	10803fcc 	andi	r2,r2,255
    d5b0:	00c00044 	movi	r3,1
    d5b4:	10fe2f1e 	bne	r2,r3,ce74 <__alt_mem_Flash_flash_data+0xf400ce74>
    d5b8:	5000e026 	beq	r10,zero,d93c <___svfiprintf_internal_r+0xdd8>
    d5bc:	dc002015 	stw	r16,128(sp)
    d5c0:	dc402215 	stw	r17,136(sp)
    d5c4:	dd801a04 	addi	r22,sp,104
    d5c8:	402f883a 	mov	r23,r8
    d5cc:	5839883a 	mov	fp,r11
    d5d0:	4821883a 	mov	r16,r9
    d5d4:	5023883a 	mov	r17,r10
    d5d8:	8009883a 	mov	r4,r16
    d5dc:	880b883a 	mov	r5,r17
    d5e0:	01800284 	movi	r6,10
    d5e4:	000f883a 	mov	r7,zero
    d5e8:	000ff180 	call	ff18 <__umoddi3>
    d5ec:	10800c04 	addi	r2,r2,48
    d5f0:	b5bfffc4 	addi	r22,r22,-1
    d5f4:	8009883a 	mov	r4,r16
    d5f8:	880b883a 	mov	r5,r17
    d5fc:	01800284 	movi	r6,10
    d600:	000f883a 	mov	r7,zero
    d604:	b0800005 	stb	r2,0(r22)
    d608:	000f9580 	call	f958 <__udivdi3>
    d60c:	1021883a 	mov	r16,r2
    d610:	10c4b03a 	or	r2,r2,r3
    d614:	1823883a 	mov	r17,r3
    d618:	103fef1e 	bne	r2,zero,d5d8 <__alt_mem_Flash_flash_data+0xf400d5d8>
    d61c:	da801e17 	ldw	r10,120(sp)
    d620:	e017883a 	mov	r11,fp
    d624:	dc002017 	ldw	r16,128(sp)
    d628:	dc402217 	ldw	r17,136(sp)
    d62c:	b811883a 	mov	r8,r23
    d630:	dd802615 	stw	r22,152(sp)
    d634:	55b9c83a 	sub	fp,r10,r22
    d638:	003e2006 	br	cebc <__alt_mem_Flash_flash_data+0xf400cebc>
    d63c:	d8801c17 	ldw	r2,112(sp)
    d640:	10000426 	beq	r2,zero,d654 <___svfiprintf_internal_r+0xaf0>
    d644:	d9002917 	ldw	r4,164(sp)
    d648:	d9402717 	ldw	r5,156(sp)
    d64c:	d9801a04 	addi	r6,sp,104
    d650:	000c9980 	call	c998 <__ssprint_r>
    d654:	da802717 	ldw	r10,156(sp)
    d658:	5080030b 	ldhu	r2,12(r10)
    d65c:	1080100c 	andi	r2,r2,64
    d660:	1000511e 	bne	r2,zero,d7a8 <___svfiprintf_internal_r+0xc44>
    d664:	d8802417 	ldw	r2,144(sp)
    d668:	dfc03617 	ldw	ra,216(sp)
    d66c:	df003517 	ldw	fp,212(sp)
    d670:	ddc03417 	ldw	r23,208(sp)
    d674:	dd803317 	ldw	r22,204(sp)
    d678:	dd403217 	ldw	r21,200(sp)
    d67c:	dd003117 	ldw	r20,196(sp)
    d680:	dcc03017 	ldw	r19,192(sp)
    d684:	dc802f17 	ldw	r18,188(sp)
    d688:	dc402e17 	ldw	r17,184(sp)
    d68c:	dc002d17 	ldw	r16,180(sp)
    d690:	dec03704 	addi	sp,sp,220
    d694:	f800283a 	ret
    d698:	da802117 	ldw	r10,132(sp)
    d69c:	dac02017 	ldw	r11,128(sp)
    d6a0:	52edc83a 	sub	r22,r10,r11
    d6a4:	05bf540e 	bge	zero,r22,d3f8 <__alt_mem_Flash_flash_data+0xf400d3f8>
    d6a8:	02400404 	movi	r9,16
    d6ac:	4d81210e 	bge	r9,r22,db34 <___svfiprintf_internal_r+0xfd0>
    d6b0:	014000b4 	movhi	r5,2
    d6b4:	2940e704 	addi	r5,r5,924
    d6b8:	d9402215 	stw	r5,136(sp)
    d6bc:	05c001c4 	movi	r23,7
    d6c0:	00000306 	br	d6d0 <___svfiprintf_internal_r+0xb6c>
    d6c4:	b5bffc04 	addi	r22,r22,-16
    d6c8:	42000204 	addi	r8,r8,8
    d6cc:	4d80130e 	bge	r9,r22,d71c <___svfiprintf_internal_r+0xbb8>
    d6d0:	18c00404 	addi	r3,r3,16
    d6d4:	10800044 	addi	r2,r2,1
    d6d8:	44c00015 	stw	r19,0(r8)
    d6dc:	42400115 	stw	r9,4(r8)
    d6e0:	d8c01c15 	stw	r3,112(sp)
    d6e4:	d8801b15 	stw	r2,108(sp)
    d6e8:	b8bff60e 	bge	r23,r2,d6c4 <__alt_mem_Flash_flash_data+0xf400d6c4>
    d6ec:	9009883a 	mov	r4,r18
    d6f0:	a00b883a 	mov	r5,r20
    d6f4:	d9801a04 	addi	r6,sp,104
    d6f8:	da402c15 	stw	r9,176(sp)
    d6fc:	000c9980 	call	c998 <__ssprint_r>
    d700:	da402c17 	ldw	r9,176(sp)
    d704:	103fd31e 	bne	r2,zero,d654 <__alt_mem_Flash_flash_data+0xf400d654>
    d708:	b5bffc04 	addi	r22,r22,-16
    d70c:	d8c01c17 	ldw	r3,112(sp)
    d710:	d8801b17 	ldw	r2,108(sp)
    d714:	d811883a 	mov	r8,sp
    d718:	4dbfed16 	blt	r9,r22,d6d0 <__alt_mem_Flash_flash_data+0xf400d6d0>
    d71c:	da802217 	ldw	r10,136(sp)
    d720:	1d87883a 	add	r3,r3,r22
    d724:	10800044 	addi	r2,r2,1
    d728:	42800015 	stw	r10,0(r8)
    d72c:	45800115 	stw	r22,4(r8)
    d730:	d8c01c15 	stw	r3,112(sp)
    d734:	d8801b15 	stw	r2,108(sp)
    d738:	010001c4 	movi	r4,7
    d73c:	2080c616 	blt	r4,r2,da58 <___svfiprintf_internal_r+0xef4>
    d740:	42000204 	addi	r8,r8,8
    d744:	003f2c06 	br	d3f8 <__alt_mem_Flash_flash_data+0xf400d3f8>
    d748:	9009883a 	mov	r4,r18
    d74c:	a00b883a 	mov	r5,r20
    d750:	d9801a04 	addi	r6,sp,104
    d754:	000c9980 	call	c998 <__ssprint_r>
    d758:	103fbe1e 	bne	r2,zero,d654 <__alt_mem_Flash_flash_data+0xf400d654>
    d75c:	d8c01c17 	ldw	r3,112(sp)
    d760:	d811883a 	mov	r8,sp
    d764:	003f5606 	br	d4c0 <__alt_mem_Flash_flash_data+0xf400d4c0>
    d768:	9009883a 	mov	r4,r18
    d76c:	a00b883a 	mov	r5,r20
    d770:	d9801a04 	addi	r6,sp,104
    d774:	000c9980 	call	c998 <__ssprint_r>
    d778:	103f8626 	beq	r2,zero,d594 <__alt_mem_Flash_flash_data+0xf400d594>
    d77c:	003fb506 	br	d654 <__alt_mem_Flash_flash_data+0xf400d654>
    d780:	10803fcc 	andi	r2,r2,255
    d784:	10003b1e 	bne	r2,zero,d874 <___svfiprintf_internal_r+0xd10>
    d788:	8880004c 	andi	r2,r17,1
    d78c:	10007d26 	beq	r2,zero,d984 <___svfiprintf_internal_r+0xe20>
    d790:	00800c04 	movi	r2,48
    d794:	d8c019c4 	addi	r3,sp,103
    d798:	d88019c5 	stb	r2,103(sp)
    d79c:	df002b17 	ldw	fp,172(sp)
    d7a0:	d8c02615 	stw	r3,152(sp)
    d7a4:	003dc506 	br	cebc <__alt_mem_Flash_flash_data+0xf400cebc>
    d7a8:	00bfffc4 	movi	r2,-1
    d7ac:	003fae06 	br	d668 <__alt_mem_Flash_flash_data+0xf400d668>
    d7b0:	9009883a 	mov	r4,r18
    d7b4:	a00b883a 	mov	r5,r20
    d7b8:	d9801a04 	addi	r6,sp,104
    d7bc:	000c9980 	call	c998 <__ssprint_r>
    d7c0:	103fa41e 	bne	r2,zero,d654 <__alt_mem_Flash_flash_data+0xf400d654>
    d7c4:	d811883a 	mov	r8,sp
    d7c8:	003d2206 	br	cc54 <__alt_mem_Flash_flash_data+0xf400cc54>
    d7cc:	9009883a 	mov	r4,r18
    d7d0:	a00b883a 	mov	r5,r20
    d7d4:	d9801a04 	addi	r6,sp,104
    d7d8:	000c9980 	call	c998 <__ssprint_r>
    d7dc:	103f9d1e 	bne	r2,zero,d654 <__alt_mem_Flash_flash_data+0xf400d654>
    d7e0:	d8c01c17 	ldw	r3,112(sp)
    d7e4:	d8801b17 	ldw	r2,108(sp)
    d7e8:	d811883a 	mov	r8,sp
    d7ec:	003f2a06 	br	d498 <__alt_mem_Flash_flash_data+0xf400d498>
    d7f0:	d9402a17 	ldw	r5,168(sp)
    d7f4:	d8c01a04 	addi	r3,sp,104
    d7f8:	488003cc 	andi	r2,r9,15
    d7fc:	5008973a 	slli	r4,r10,28
    d800:	2885883a 	add	r2,r5,r2
    d804:	4812d13a 	srli	r9,r9,4
    d808:	10800003 	ldbu	r2,0(r2)
    d80c:	5014d13a 	srli	r10,r10,4
    d810:	18ffffc4 	addi	r3,r3,-1
    d814:	2252b03a 	or	r9,r4,r9
    d818:	18800005 	stb	r2,0(r3)
    d81c:	4a84b03a 	or	r2,r9,r10
    d820:	103ff51e 	bne	r2,zero,d7f8 <__alt_mem_Flash_flash_data+0xf400d7f8>
    d824:	d8c02615 	stw	r3,152(sp)
    d828:	003da206 	br	ceb4 <__alt_mem_Flash_flash_data+0xf400ceb4>
    d82c:	9009883a 	mov	r4,r18
    d830:	a00b883a 	mov	r5,r20
    d834:	d9801a04 	addi	r6,sp,104
    d838:	000c9980 	call	c998 <__ssprint_r>
    d83c:	103f851e 	bne	r2,zero,d654 <__alt_mem_Flash_flash_data+0xf400d654>
    d840:	d8c01c17 	ldw	r3,112(sp)
    d844:	d8801b17 	ldw	r2,108(sp)
    d848:	d811883a 	mov	r8,sp
    d84c:	003eda06 	br	d3b8 <__alt_mem_Flash_flash_data+0xf400d3b8>
    d850:	9009883a 	mov	r4,r18
    d854:	a00b883a 	mov	r5,r20
    d858:	d9801a04 	addi	r6,sp,104
    d85c:	000c9980 	call	c998 <__ssprint_r>
    d860:	103f7c1e 	bne	r2,zero,d654 <__alt_mem_Flash_flash_data+0xf400d654>
    d864:	d8c01c17 	ldw	r3,112(sp)
    d868:	d8801b17 	ldw	r2,108(sp)
    d86c:	d811883a 	mov	r8,sp
    d870:	003ede06 	br	d3ec <__alt_mem_Flash_flash_data+0xf400d3ec>
    d874:	da801a04 	addi	r10,sp,104
    d878:	da802615 	stw	r10,152(sp)
    d87c:	003d8f06 	br	cebc <__alt_mem_Flash_flash_data+0xf400cebc>
    d880:	8880040c 	andi	r2,r17,16
    d884:	10004c1e 	bne	r2,zero,d9b8 <___svfiprintf_internal_r+0xe54>
    d888:	8880100c 	andi	r2,r17,64
    d88c:	da802317 	ldw	r10,140(sp)
    d890:	10004a26 	beq	r2,zero,d9bc <___svfiprintf_internal_r+0xe58>
    d894:	5240000b 	ldhu	r9,0(r10)
    d898:	dac02317 	ldw	r11,140(sp)
    d89c:	0015883a 	mov	r10,zero
    d8a0:	00800044 	movi	r2,1
    d8a4:	5ac00104 	addi	r11,r11,4
    d8a8:	dac02315 	stw	r11,140(sp)
    d8ac:	4807883a 	mov	r3,r9
    d8b0:	003d6506 	br	ce48 <__alt_mem_Flash_flash_data+0xf400ce48>
    d8b4:	9009883a 	mov	r4,r18
    d8b8:	a00b883a 	mov	r5,r20
    d8bc:	d9801a04 	addi	r6,sp,104
    d8c0:	000c9980 	call	c998 <__ssprint_r>
    d8c4:	103f631e 	bne	r2,zero,d654 <__alt_mem_Flash_flash_data+0xf400d654>
    d8c8:	d8c01c17 	ldw	r3,112(sp)
    d8cc:	d8801b17 	ldw	r2,108(sp)
    d8d0:	d811883a 	mov	r8,sp
    d8d4:	003eab06 	br	d384 <__alt_mem_Flash_flash_data+0xf400d384>
    d8d8:	8880040c 	andi	r2,r17,16
    d8dc:	1000331e 	bne	r2,zero,d9ac <___svfiprintf_internal_r+0xe48>
    d8e0:	8880100c 	andi	r2,r17,64
    d8e4:	da802317 	ldw	r10,140(sp)
    d8e8:	10003126 	beq	r2,zero,d9b0 <___svfiprintf_internal_r+0xe4c>
    d8ec:	5240000b 	ldhu	r9,0(r10)
    d8f0:	dac02317 	ldw	r11,140(sp)
    d8f4:	0015883a 	mov	r10,zero
    d8f8:	0005883a 	mov	r2,zero
    d8fc:	5ac00104 	addi	r11,r11,4
    d900:	dac02315 	stw	r11,140(sp)
    d904:	4807883a 	mov	r3,r9
    d908:	003d4f06 	br	ce48 <__alt_mem_Flash_flash_data+0xf400ce48>
    d90c:	10803fcc 	andi	r2,r2,255
    d910:	1080201c 	xori	r2,r2,128
    d914:	10bfe004 	addi	r2,r2,-128
    d918:	01000c04 	movi	r4,48
    d91c:	11005b26 	beq	r2,r4,da8c <___svfiprintf_internal_r+0xf28>
    d920:	da802617 	ldw	r10,152(sp)
    d924:	d8801e17 	ldw	r2,120(sp)
    d928:	193fffc5 	stb	r4,-1(r3)
    d92c:	52bfffc4 	addi	r10,r10,-1
    d930:	da802615 	stw	r10,152(sp)
    d934:	12b9c83a 	sub	fp,r2,r10
    d938:	003d6006 	br	cebc <__alt_mem_Flash_flash_data+0xf400cebc>
    d93c:	00800244 	movi	r2,9
    d940:	127f1e36 	bltu	r2,r9,d5bc <__alt_mem_Flash_flash_data+0xf400d5bc>
    d944:	4a400c04 	addi	r9,r9,48
    d948:	d8c019c4 	addi	r3,sp,103
    d94c:	da4019c5 	stb	r9,103(sp)
    d950:	df002b17 	ldw	fp,172(sp)
    d954:	d8c02615 	stw	r3,152(sp)
    d958:	003d5806 	br	cebc <__alt_mem_Flash_flash_data+0xf400cebc>
    d95c:	d8802315 	stw	r2,140(sp)
    d960:	a9000007 	ldb	r4,0(r21)
    d964:	003ccb06 	br	cc94 <__alt_mem_Flash_flash_data+0xf400cc94>
    d968:	9009883a 	mov	r4,r18
    d96c:	a00b883a 	mov	r5,r20
    d970:	d9801a04 	addi	r6,sp,104
    d974:	000c9980 	call	c998 <__ssprint_r>
    d978:	103f361e 	bne	r2,zero,d654 <__alt_mem_Flash_flash_data+0xf400d654>
    d97c:	d8c01c17 	ldw	r3,112(sp)
    d980:	003efc06 	br	d574 <__alt_mem_Flash_flash_data+0xf400d574>
    d984:	d8c01a04 	addi	r3,sp,104
    d988:	d8c02615 	stw	r3,152(sp)
    d98c:	003d4b06 	br	cebc <__alt_mem_Flash_flash_data+0xf400cebc>
    d990:	da802317 	ldw	r10,140(sp)
    d994:	1a400017 	ldw	r9,0(r3)
    d998:	52800104 	addi	r10,r10,4
    d99c:	da802315 	stw	r10,140(sp)
    d9a0:	4815d7fa 	srai	r10,r9,31
    d9a4:	5005883a 	mov	r2,r10
    d9a8:	003d9c06 	br	d01c <__alt_mem_Flash_flash_data+0xf400d01c>
    d9ac:	da802317 	ldw	r10,140(sp)
    d9b0:	52400017 	ldw	r9,0(r10)
    d9b4:	003fce06 	br	d8f0 <__alt_mem_Flash_flash_data+0xf400d8f0>
    d9b8:	da802317 	ldw	r10,140(sp)
    d9bc:	52400017 	ldw	r9,0(r10)
    d9c0:	003fb506 	br	d898 <__alt_mem_Flash_flash_data+0xf400d898>
    d9c4:	8880100c 	andi	r2,r17,64
    d9c8:	da802317 	ldw	r10,140(sp)
    d9cc:	103e1926 	beq	r2,zero,d234 <__alt_mem_Flash_flash_data+0xf400d234>
    d9d0:	dac02317 	ldw	r11,140(sp)
    d9d4:	5240000b 	ldhu	r9,0(r10)
    d9d8:	0015883a 	mov	r10,zero
    d9dc:	5ac00104 	addi	r11,r11,4
    d9e0:	dac02315 	stw	r11,140(sp)
    d9e4:	003de406 	br	d178 <__alt_mem_Flash_flash_data+0xf400d178>
    d9e8:	a9000007 	ldb	r4,0(r21)
    d9ec:	003ca906 	br	cc94 <__alt_mem_Flash_flash_data+0xf400cc94>
    d9f0:	dac02317 	ldw	r11,140(sp)
    d9f4:	da802417 	ldw	r10,144(sp)
    d9f8:	58800017 	ldw	r2,0(r11)
    d9fc:	5007d7fa 	srai	r3,r10,31
    da00:	5ac00104 	addi	r11,r11,4
    da04:	dac02315 	stw	r11,140(sp)
    da08:	12800015 	stw	r10,0(r2)
    da0c:	10c00115 	stw	r3,4(r2)
    da10:	003c7806 	br	cbf4 <__alt_mem_Flash_flash_data+0xf400cbf4>
    da14:	00800c04 	movi	r2,48
    da18:	d8801d05 	stb	r2,116(sp)
    da1c:	d9001d45 	stb	r4,117(sp)
    da20:	8c400094 	ori	r17,r17,2
    da24:	00800084 	movi	r2,2
    da28:	003d0706 	br	ce48 <__alt_mem_Flash_flash_data+0xf400ce48>
    da2c:	ad400044 	addi	r21,r21,1
    da30:	8c400814 	ori	r17,r17,32
    da34:	11000047 	ldb	r4,1(r2)
    da38:	003c9606 	br	cc94 <__alt_mem_Flash_flash_data+0xf400cc94>
    da3c:	dac02317 	ldw	r11,140(sp)
    da40:	da802417 	ldw	r10,144(sp)
    da44:	58800017 	ldw	r2,0(r11)
    da48:	5ac00104 	addi	r11,r11,4
    da4c:	dac02315 	stw	r11,140(sp)
    da50:	12800015 	stw	r10,0(r2)
    da54:	003c6706 	br	cbf4 <__alt_mem_Flash_flash_data+0xf400cbf4>
    da58:	9009883a 	mov	r4,r18
    da5c:	a00b883a 	mov	r5,r20
    da60:	d9801a04 	addi	r6,sp,104
    da64:	000c9980 	call	c998 <__ssprint_r>
    da68:	103efa1e 	bne	r2,zero,d654 <__alt_mem_Flash_flash_data+0xf400d654>
    da6c:	d8c01c17 	ldw	r3,112(sp)
    da70:	d8801b17 	ldw	r2,108(sp)
    da74:	d811883a 	mov	r8,sp
    da78:	003e5f06 	br	d3f8 <__alt_mem_Flash_flash_data+0xf400d3f8>
    da7c:	02c000b4 	movhi	r11,2
    da80:	5ac0e704 	addi	r11,r11,924
    da84:	dac02215 	stw	r11,136(sp)
    da88:	003e7906 	br	d470 <__alt_mem_Flash_flash_data+0xf400d470>
    da8c:	da801e17 	ldw	r10,120(sp)
    da90:	d8c02617 	ldw	r3,152(sp)
    da94:	50f9c83a 	sub	fp,r10,r3
    da98:	003d0806 	br	cebc <__alt_mem_Flash_flash_data+0xf400cebc>
    da9c:	da002c15 	stw	r8,176(sp)
    daa0:	00037a40 	call	37a4 <strlen>
    daa4:	1039883a 	mov	fp,r2
    daa8:	dac01d83 	ldbu	r11,118(sp)
    daac:	ddc02315 	stw	r23,140(sp)
    dab0:	0021883a 	mov	r16,zero
    dab4:	da002c17 	ldw	r8,176(sp)
    dab8:	003d0006 	br	cebc <__alt_mem_Flash_flash_data+0xf400cebc>
    dabc:	00800184 	movi	r2,6
    dac0:	1400012e 	bgeu	r2,r16,dac8 <___svfiprintf_internal_r+0xf64>
    dac4:	1021883a 	mov	r16,r2
    dac8:	8039883a 	mov	fp,r16
    dacc:	802d883a 	mov	r22,r16
    dad0:	80002116 	blt	r16,zero,db58 <___svfiprintf_internal_r+0xff4>
    dad4:	008000b4 	movhi	r2,2
    dad8:	10808304 	addi	r2,r2,524
    dadc:	dd802015 	stw	r22,128(sp)
    dae0:	ddc02315 	stw	r23,140(sp)
    dae4:	d8802615 	stw	r2,152(sp)
    dae8:	003d5d06 	br	d060 <__alt_mem_Flash_flash_data+0xf400d060>
    daec:	04001004 	movi	r16,64
    daf0:	800b883a 	mov	r5,r16
    daf4:	000a5a00 	call	a5a0 <_malloc_r>
    daf8:	da802717 	ldw	r10,156(sp)
    dafc:	50800015 	stw	r2,0(r10)
    db00:	50800415 	stw	r2,16(r10)
    db04:	10002026 	beq	r2,zero,db88 <___svfiprintf_internal_r+0x1024>
    db08:	da802717 	ldw	r10,156(sp)
    db0c:	54000515 	stw	r16,20(r10)
    db10:	003c2806 	br	cbb4 <__alt_mem_Flash_flash_data+0xf400cbb4>
    db14:	010000b4 	movhi	r4,2
    db18:	2100eb04 	addi	r4,r4,940
    db1c:	d9002815 	stw	r4,160(sp)
    db20:	003d7e06 	br	d11c <__alt_mem_Flash_flash_data+0xf400d11c>
    db24:	010000b4 	movhi	r4,2
    db28:	2100eb04 	addi	r4,r4,940
    db2c:	d9002815 	stw	r4,160(sp)
    db30:	003e8706 	br	d550 <__alt_mem_Flash_flash_data+0xf400d550>
    db34:	010000b4 	movhi	r4,2
    db38:	2100e704 	addi	r4,r4,924
    db3c:	d9002215 	stw	r4,136(sp)
    db40:	003ef606 	br	d71c <__alt_mem_Flash_flash_data+0xf400d71c>
    db44:	8039883a 	mov	fp,r16
    db48:	dac01d83 	ldbu	r11,118(sp)
    db4c:	ddc02315 	stw	r23,140(sp)
    db50:	0021883a 	mov	r16,zero
    db54:	003cd906 	br	cebc <__alt_mem_Flash_flash_data+0xf400cebc>
    db58:	002d883a 	mov	r22,zero
    db5c:	003fdd06 	br	dad4 <__alt_mem_Flash_flash_data+0xf400dad4>
    db60:	dac02317 	ldw	r11,140(sp)
    db64:	a805883a 	mov	r2,r21
    db68:	502b883a 	mov	r21,r10
    db6c:	5c000017 	ldw	r16,0(r11)
    db70:	59000104 	addi	r4,r11,4
    db74:	d9002315 	stw	r4,140(sp)
    db78:	803fae0e 	bge	r16,zero,da34 <__alt_mem_Flash_flash_data+0xf400da34>
    db7c:	043fffc4 	movi	r16,-1
    db80:	11000047 	ldb	r4,1(r2)
    db84:	003c4306 	br	cc94 <__alt_mem_Flash_flash_data+0xf400cc94>
    db88:	dac02917 	ldw	r11,164(sp)
    db8c:	00800304 	movi	r2,12
    db90:	58800015 	stw	r2,0(r11)
    db94:	00bfffc4 	movi	r2,-1
    db98:	003eb306 	br	d668 <__alt_mem_Flash_flash_data+0xf400d668>

0000db9c <__sprint_r.part.0>:
    db9c:	28801917 	ldw	r2,100(r5)
    dba0:	defff604 	addi	sp,sp,-40
    dba4:	dd400515 	stw	r21,20(sp)
    dba8:	dcc00315 	stw	r19,12(sp)
    dbac:	dfc00915 	stw	ra,36(sp)
    dbb0:	df000815 	stw	fp,32(sp)
    dbb4:	ddc00715 	stw	r23,28(sp)
    dbb8:	dd800615 	stw	r22,24(sp)
    dbbc:	dd000415 	stw	r20,16(sp)
    dbc0:	dc800215 	stw	r18,8(sp)
    dbc4:	dc400115 	stw	r17,4(sp)
    dbc8:	dc000015 	stw	r16,0(sp)
    dbcc:	1088000c 	andi	r2,r2,8192
    dbd0:	2827883a 	mov	r19,r5
    dbd4:	302b883a 	mov	r21,r6
    dbd8:	10002d26 	beq	r2,zero,dc90 <__sprint_r.part.0+0xf4>
    dbdc:	30800217 	ldw	r2,8(r6)
    dbe0:	35800017 	ldw	r22,0(r6)
    dbe4:	10002826 	beq	r2,zero,dc88 <__sprint_r.part.0+0xec>
    dbe8:	2029883a 	mov	r20,r4
    dbec:	b5c00104 	addi	r23,r22,4
    dbf0:	04bfffc4 	movi	r18,-1
    dbf4:	bc400017 	ldw	r17,0(r23)
    dbf8:	b4000017 	ldw	r16,0(r22)
    dbfc:	0039883a 	mov	fp,zero
    dc00:	8822d0ba 	srli	r17,r17,2
    dc04:	04400316 	blt	zero,r17,dc14 <__sprint_r.part.0+0x78>
    dc08:	00001806 	br	dc6c <__sprint_r.part.0+0xd0>
    dc0c:	84000104 	addi	r16,r16,4
    dc10:	8f001526 	beq	r17,fp,dc68 <__sprint_r.part.0+0xcc>
    dc14:	81400017 	ldw	r5,0(r16)
    dc18:	a009883a 	mov	r4,r20
    dc1c:	980d883a 	mov	r6,r19
    dc20:	000f2d80 	call	f2d8 <_fputwc_r>
    dc24:	e7000044 	addi	fp,fp,1
    dc28:	14bff81e 	bne	r2,r18,dc0c <__alt_mem_Flash_flash_data+0xf400dc0c>
    dc2c:	9005883a 	mov	r2,r18
    dc30:	a8000215 	stw	zero,8(r21)
    dc34:	a8000115 	stw	zero,4(r21)
    dc38:	dfc00917 	ldw	ra,36(sp)
    dc3c:	df000817 	ldw	fp,32(sp)
    dc40:	ddc00717 	ldw	r23,28(sp)
    dc44:	dd800617 	ldw	r22,24(sp)
    dc48:	dd400517 	ldw	r21,20(sp)
    dc4c:	dd000417 	ldw	r20,16(sp)
    dc50:	dcc00317 	ldw	r19,12(sp)
    dc54:	dc800217 	ldw	r18,8(sp)
    dc58:	dc400117 	ldw	r17,4(sp)
    dc5c:	dc000017 	ldw	r16,0(sp)
    dc60:	dec00a04 	addi	sp,sp,40
    dc64:	f800283a 	ret
    dc68:	a8800217 	ldw	r2,8(r21)
    dc6c:	8c63883a 	add	r17,r17,r17
    dc70:	8c63883a 	add	r17,r17,r17
    dc74:	1445c83a 	sub	r2,r2,r17
    dc78:	a8800215 	stw	r2,8(r21)
    dc7c:	b5800204 	addi	r22,r22,8
    dc80:	bdc00204 	addi	r23,r23,8
    dc84:	103fdb1e 	bne	r2,zero,dbf4 <__alt_mem_Flash_flash_data+0xf400dbf4>
    dc88:	0005883a 	mov	r2,zero
    dc8c:	003fe806 	br	dc30 <__alt_mem_Flash_flash_data+0xf400dc30>
    dc90:	0009cc00 	call	9cc0 <__sfvwrite_r>
    dc94:	003fe606 	br	dc30 <__alt_mem_Flash_flash_data+0xf400dc30>

0000dc98 <__sprint_r>:
    dc98:	30c00217 	ldw	r3,8(r6)
    dc9c:	18000126 	beq	r3,zero,dca4 <__sprint_r+0xc>
    dca0:	000db9c1 	jmpi	db9c <__sprint_r.part.0>
    dca4:	30000115 	stw	zero,4(r6)
    dca8:	0005883a 	mov	r2,zero
    dcac:	f800283a 	ret

0000dcb0 <___vfiprintf_internal_r>:
    dcb0:	deffca04 	addi	sp,sp,-216
    dcb4:	dd803215 	stw	r22,200(sp)
    dcb8:	dd403115 	stw	r21,196(sp)
    dcbc:	dfc03515 	stw	ra,212(sp)
    dcc0:	df003415 	stw	fp,208(sp)
    dcc4:	ddc03315 	stw	r23,204(sp)
    dcc8:	dd003015 	stw	r20,192(sp)
    dccc:	dcc02f15 	stw	r19,188(sp)
    dcd0:	dc802e15 	stw	r18,184(sp)
    dcd4:	dc402d15 	stw	r17,180(sp)
    dcd8:	dc002c15 	stw	r16,176(sp)
    dcdc:	d9002015 	stw	r4,128(sp)
    dce0:	d9c02215 	stw	r7,136(sp)
    dce4:	282b883a 	mov	r21,r5
    dce8:	302d883a 	mov	r22,r6
    dcec:	20000226 	beq	r4,zero,dcf8 <___vfiprintf_internal_r+0x48>
    dcf0:	20800e17 	ldw	r2,56(r4)
    dcf4:	1001b126 	beq	r2,zero,e3bc <___vfiprintf_internal_r+0x70c>
    dcf8:	a880030b 	ldhu	r2,12(r21)
    dcfc:	10c8000c 	andi	r3,r2,8192
    dd00:	1800061e 	bne	r3,zero,dd1c <___vfiprintf_internal_r+0x6c>
    dd04:	a9001917 	ldw	r4,100(r21)
    dd08:	00f7ffc4 	movi	r3,-8193
    dd0c:	10880014 	ori	r2,r2,8192
    dd10:	20c6703a 	and	r3,r4,r3
    dd14:	a880030d 	sth	r2,12(r21)
    dd18:	a8c01915 	stw	r3,100(r21)
    dd1c:	10c0020c 	andi	r3,r2,8
    dd20:	18018926 	beq	r3,zero,e348 <___vfiprintf_internal_r+0x698>
    dd24:	a8c00417 	ldw	r3,16(r21)
    dd28:	18018726 	beq	r3,zero,e348 <___vfiprintf_internal_r+0x698>
    dd2c:	1080068c 	andi	r2,r2,26
    dd30:	00c00284 	movi	r3,10
    dd34:	10c18c26 	beq	r2,r3,e368 <___vfiprintf_internal_r+0x6b8>
    dd38:	d8801a04 	addi	r2,sp,104
    dd3c:	d8c019c4 	addi	r3,sp,103
    dd40:	070000b4 	movhi	fp,2
    dd44:	05c000b4 	movhi	r23,2
    dd48:	10c9c83a 	sub	r4,r2,r3
    dd4c:	e700f304 	addi	fp,fp,972
    dd50:	bdc0ef04 	addi	r23,r23,956
    dd54:	d8801e15 	stw	r2,120(sp)
    dd58:	d8c01f15 	stw	r3,124(sp)
    dd5c:	dec01a15 	stw	sp,104(sp)
    dd60:	d8001c15 	stw	zero,112(sp)
    dd64:	d8001b15 	stw	zero,108(sp)
    dd68:	d8002615 	stw	zero,152(sp)
    dd6c:	d8002315 	stw	zero,140(sp)
    dd70:	d9002715 	stw	r4,156(sp)
    dd74:	d811883a 	mov	r8,sp
    dd78:	dd402115 	stw	r21,132(sp)
    dd7c:	b021883a 	mov	r16,r22
    dd80:	80800007 	ldb	r2,0(r16)
    dd84:	10037226 	beq	r2,zero,eb50 <___vfiprintf_internal_r+0xea0>
    dd88:	01000944 	movi	r4,37
    dd8c:	11037026 	beq	r2,r4,eb50 <___vfiprintf_internal_r+0xea0>
    dd90:	8005883a 	mov	r2,r16
    dd94:	00000106 	br	dd9c <___vfiprintf_internal_r+0xec>
    dd98:	19000326 	beq	r3,r4,dda8 <___vfiprintf_internal_r+0xf8>
    dd9c:	10800044 	addi	r2,r2,1
    dda0:	10c00007 	ldb	r3,0(r2)
    dda4:	183ffc1e 	bne	r3,zero,dd98 <__alt_mem_Flash_flash_data+0xf400dd98>
    dda8:	1425c83a 	sub	r18,r2,r16
    ddac:	1023883a 	mov	r17,r2
    ddb0:	90001026 	beq	r18,zero,ddf4 <___vfiprintf_internal_r+0x144>
    ddb4:	d8c01c17 	ldw	r3,112(sp)
    ddb8:	d8801b17 	ldw	r2,108(sp)
    ddbc:	44000015 	stw	r16,0(r8)
    ddc0:	90c7883a 	add	r3,r18,r3
    ddc4:	10800044 	addi	r2,r2,1
    ddc8:	44800115 	stw	r18,4(r8)
    ddcc:	d8c01c15 	stw	r3,112(sp)
    ddd0:	d8801b15 	stw	r2,108(sp)
    ddd4:	010001c4 	movi	r4,7
    ddd8:	2080750e 	bge	r4,r2,dfb0 <___vfiprintf_internal_r+0x300>
    dddc:	18036f1e 	bne	r3,zero,eb9c <___vfiprintf_internal_r+0xeec>
    dde0:	d8802317 	ldw	r2,140(sp)
    dde4:	d8001b15 	stw	zero,108(sp)
    dde8:	d811883a 	mov	r8,sp
    ddec:	1485883a 	add	r2,r2,r18
    ddf0:	d8802315 	stw	r2,140(sp)
    ddf4:	88800007 	ldb	r2,0(r17)
    ddf8:	10041026 	beq	r2,zero,ee3c <___vfiprintf_internal_r+0x118c>
    ddfc:	88c00047 	ldb	r3,1(r17)
    de00:	88800044 	addi	r2,r17,1
    de04:	d8001d85 	stb	zero,118(sp)
    de08:	000f883a 	mov	r7,zero
    de0c:	027fffc4 	movi	r9,-1
    de10:	0025883a 	mov	r18,zero
    de14:	002b883a 	mov	r21,zero
    de18:	01401604 	movi	r5,88
    de1c:	01800244 	movi	r6,9
    de20:	03400a84 	movi	r13,42
    de24:	03001b04 	movi	r12,108
    de28:	14000044 	addi	r16,r2,1
    de2c:	18bff804 	addi	r2,r3,-32
    de30:	28825536 	bltu	r5,r2,e788 <___vfiprintf_internal_r+0xad8>
    de34:	100490ba 	slli	r2,r2,2
    de38:	01000074 	movhi	r4,1
    de3c:	21379304 	addi	r4,r4,-8628
    de40:	1105883a 	add	r2,r2,r4
    de44:	10800017 	ldw	r2,0(r2)
    de48:	1000683a 	jmp	r2
    de4c:	0000e54c 	andi	zero,zero,917
    de50:	0000e788 	cmpgei	zero,zero,926
    de54:	0000e788 	cmpgei	zero,zero,926
    de58:	0000e56c 	andhi	zero,zero,917
    de5c:	0000e788 	cmpgei	zero,zero,926
    de60:	0000e788 	cmpgei	zero,zero,926
    de64:	0000e788 	cmpgei	zero,zero,926
    de68:	0000e788 	cmpgei	zero,zero,926
    de6c:	0000e788 	cmpgei	zero,zero,926
    de70:	0000e788 	cmpgei	zero,zero,926
    de74:	0000e57c 	xorhi	zero,zero,917
    de78:	0000e59c 	xori	zero,zero,918
    de7c:	0000e788 	cmpgei	zero,zero,926
    de80:	0000e3c4 	movi	zero,911
    de84:	0000e4b0 	cmpltui	zero,zero,914
    de88:	0000e788 	cmpgei	zero,zero,926
    de8c:	0000e430 	cmpltui	zero,zero,912
    de90:	0000e440 	call	e44 <endGame+0x8>
    de94:	0000e440 	call	e44 <endGame+0x8>
    de98:	0000e440 	call	e44 <endGame+0x8>
    de9c:	0000e440 	call	e44 <endGame+0x8>
    dea0:	0000e440 	call	e44 <endGame+0x8>
    dea4:	0000e440 	call	e44 <endGame+0x8>
    dea8:	0000e440 	call	e44 <endGame+0x8>
    deac:	0000e440 	call	e44 <endGame+0x8>
    deb0:	0000e440 	call	e44 <endGame+0x8>
    deb4:	0000e788 	cmpgei	zero,zero,926
    deb8:	0000e788 	cmpgei	zero,zero,926
    debc:	0000e788 	cmpgei	zero,zero,926
    dec0:	0000e788 	cmpgei	zero,zero,926
    dec4:	0000e788 	cmpgei	zero,zero,926
    dec8:	0000e788 	cmpgei	zero,zero,926
    decc:	0000e788 	cmpgei	zero,zero,926
    ded0:	0000e788 	cmpgei	zero,zero,926
    ded4:	0000e788 	cmpgei	zero,zero,926
    ded8:	0000e788 	cmpgei	zero,zero,926
    dedc:	0000e46c 	andhi	zero,zero,913
    dee0:	0000e788 	cmpgei	zero,zero,926
    dee4:	0000e788 	cmpgei	zero,zero,926
    dee8:	0000e788 	cmpgei	zero,zero,926
    deec:	0000e788 	cmpgei	zero,zero,926
    def0:	0000e788 	cmpgei	zero,zero,926
    def4:	0000e788 	cmpgei	zero,zero,926
    def8:	0000e788 	cmpgei	zero,zero,926
    defc:	0000e788 	cmpgei	zero,zero,926
    df00:	0000e788 	cmpgei	zero,zero,926
    df04:	0000e788 	cmpgei	zero,zero,926
    df08:	0000dff8 	rdprs	zero,zero,895
    df0c:	0000e788 	cmpgei	zero,zero,926
    df10:	0000e788 	cmpgei	zero,zero,926
    df14:	0000e788 	cmpgei	zero,zero,926
    df18:	0000e788 	cmpgei	zero,zero,926
    df1c:	0000e788 	cmpgei	zero,zero,926
    df20:	0000dfc4 	movi	zero,895
    df24:	0000e788 	cmpgei	zero,zero,926
    df28:	0000e788 	cmpgei	zero,zero,926
    df2c:	0000e60c 	andi	zero,zero,920
    df30:	0000e788 	cmpgei	zero,zero,926
    df34:	0000e788 	cmpgei	zero,zero,926
    df38:	0000e788 	cmpgei	zero,zero,926
    df3c:	0000e788 	cmpgei	zero,zero,926
    df40:	0000e788 	cmpgei	zero,zero,926
    df44:	0000e788 	cmpgei	zero,zero,926
    df48:	0000e788 	cmpgei	zero,zero,926
    df4c:	0000e788 	cmpgei	zero,zero,926
    df50:	0000e788 	cmpgei	zero,zero,926
    df54:	0000e788 	cmpgei	zero,zero,926
    df58:	0000e5ac 	andhi	zero,zero,918
    df5c:	0000e5d8 	cmpnei	zero,zero,919
    df60:	0000e788 	cmpgei	zero,zero,926
    df64:	0000e788 	cmpgei	zero,zero,926
    df68:	0000e788 	cmpgei	zero,zero,926
    df6c:	0000e6b4 	movhi	zero,922
    df70:	0000e5d8 	cmpnei	zero,zero,919
    df74:	0000e788 	cmpgei	zero,zero,926
    df78:	0000e788 	cmpgei	zero,zero,926
    df7c:	0000e6c4 	movi	zero,923
    df80:	0000e788 	cmpgei	zero,zero,926
    df84:	0000e4f0 	cmpltui	zero,zero,915
    df88:	0000dffc 	xorhi	zero,zero,895
    df8c:	0000e6d8 	cmpnei	zero,zero,923
    df90:	0000e718 	cmpnei	zero,zero,924
    df94:	0000e788 	cmpgei	zero,zero,926
    df98:	0000e660 	cmpeqi	zero,zero,921
    df9c:	0000e788 	cmpgei	zero,zero,926
    dfa0:	0000dfc8 	cmpgei	zero,zero,895
    dfa4:	0000e788 	cmpgei	zero,zero,926
    dfa8:	0000e788 	cmpgei	zero,zero,926
    dfac:	0000e728 	cmpgeui	zero,zero,924
    dfb0:	42000204 	addi	r8,r8,8
    dfb4:	d8802317 	ldw	r2,140(sp)
    dfb8:	1485883a 	add	r2,r2,r18
    dfbc:	d8802315 	stw	r2,140(sp)
    dfc0:	003f8c06 	br	ddf4 <__alt_mem_Flash_flash_data+0xf400ddf4>
    dfc4:	ad400414 	ori	r21,r21,16
    dfc8:	a880080c 	andi	r2,r21,32
    dfcc:	1001e61e 	bne	r2,zero,e768 <___vfiprintf_internal_r+0xab8>
    dfd0:	a880040c 	andi	r2,r21,16
    dfd4:	10034726 	beq	r2,zero,ecf4 <___vfiprintf_internal_r+0x1044>
    dfd8:	d8802217 	ldw	r2,136(sp)
    dfdc:	001b883a 	mov	r13,zero
    dfe0:	15800017 	ldw	r22,0(r2)
    dfe4:	10800104 	addi	r2,r2,4
    dfe8:	d8802215 	stw	r2,136(sp)
    dfec:	b009883a 	mov	r4,r22
    dff0:	00800044 	movi	r2,1
    dff4:	00000c06 	br	e028 <___vfiprintf_internal_r+0x378>
    dff8:	ad400414 	ori	r21,r21,16
    dffc:	a880080c 	andi	r2,r21,32
    e000:	1001491e 	bne	r2,zero,e528 <___vfiprintf_internal_r+0x878>
    e004:	a880040c 	andi	r2,r21,16
    e008:	10032d26 	beq	r2,zero,ecc0 <___vfiprintf_internal_r+0x1010>
    e00c:	d9002217 	ldw	r4,136(sp)
    e010:	001b883a 	mov	r13,zero
    e014:	0005883a 	mov	r2,zero
    e018:	25800017 	ldw	r22,0(r4)
    e01c:	21000104 	addi	r4,r4,4
    e020:	d9002215 	stw	r4,136(sp)
    e024:	b009883a 	mov	r4,r22
    e028:	d8001d85 	stb	zero,118(sp)
    e02c:	4827883a 	mov	r19,r9
    e030:	001d883a 	mov	r14,zero
    e034:	48000216 	blt	r9,zero,e040 <___vfiprintf_internal_r+0x390>
    e038:	00ffdfc4 	movi	r3,-129
    e03c:	a8ea703a 	and	r21,r21,r3
    e040:	2002071e 	bne	r4,zero,e860 <___vfiprintf_internal_r+0xbb0>
    e044:	4802ad26 	beq	r9,zero,eafc <___vfiprintf_internal_r+0xe4c>
    e048:	10803fcc 	andi	r2,r2,255
    e04c:	00c00044 	movi	r3,1
    e050:	10c22b26 	beq	r2,r3,e900 <___vfiprintf_internal_r+0xc50>
    e054:	00c00084 	movi	r3,2
    e058:	dd001a04 	addi	r20,sp,104
    e05c:	10c0dd1e 	bne	r2,r3,e3d4 <___vfiprintf_internal_r+0x724>
    e060:	d9002617 	ldw	r4,152(sp)
    e064:	b08003cc 	andi	r2,r22,15
    e068:	6806973a 	slli	r3,r13,28
    e06c:	2085883a 	add	r2,r4,r2
    e070:	b02cd13a 	srli	r22,r22,4
    e074:	10800003 	ldbu	r2,0(r2)
    e078:	681ad13a 	srli	r13,r13,4
    e07c:	a53fffc4 	addi	r20,r20,-1
    e080:	1dacb03a 	or	r22,r3,r22
    e084:	a0800005 	stb	r2,0(r20)
    e088:	b344b03a 	or	r2,r22,r13
    e08c:	103ff51e 	bne	r2,zero,e064 <__alt_mem_Flash_flash_data+0xf400e064>
    e090:	d9001e17 	ldw	r4,120(sp)
    e094:	2527c83a 	sub	r19,r4,r20
    e098:	9823883a 	mov	r17,r19
    e09c:	9a40010e 	bge	r19,r9,e0a4 <___vfiprintf_internal_r+0x3f4>
    e0a0:	4823883a 	mov	r17,r9
    e0a4:	73803fcc 	andi	r14,r14,255
    e0a8:	7380201c 	xori	r14,r14,128
    e0ac:	73bfe004 	addi	r14,r14,-128
    e0b0:	70000126 	beq	r14,zero,e0b8 <___vfiprintf_internal_r+0x408>
    e0b4:	8c400044 	addi	r17,r17,1
    e0b8:	ab40008c 	andi	r13,r21,2
    e0bc:	68000126 	beq	r13,zero,e0c4 <___vfiprintf_internal_r+0x414>
    e0c0:	8c400084 	addi	r17,r17,2
    e0c4:	ad80210c 	andi	r22,r21,132
    e0c8:	b001c51e 	bne	r22,zero,e7e0 <___vfiprintf_internal_r+0xb30>
    e0cc:	9447c83a 	sub	r3,r18,r17
    e0d0:	00c1c30e 	bge	zero,r3,e7e0 <___vfiprintf_internal_r+0xb30>
    e0d4:	01c00404 	movi	r7,16
    e0d8:	d8801c17 	ldw	r2,112(sp)
    e0dc:	38c37b0e 	bge	r7,r3,eecc <___vfiprintf_internal_r+0x121c>
    e0e0:	010000b4 	movhi	r4,2
    e0e4:	2100f304 	addi	r4,r4,972
    e0e8:	dc002915 	stw	r16,164(sp)
    e0ec:	d9801b17 	ldw	r6,108(sp)
    e0f0:	d9002415 	stw	r4,144(sp)
    e0f4:	03c001c4 	movi	r15,7
    e0f8:	da402515 	stw	r9,148(sp)
    e0fc:	db402815 	stw	r13,160(sp)
    e100:	1821883a 	mov	r16,r3
    e104:	00000506 	br	e11c <___vfiprintf_internal_r+0x46c>
    e108:	31400084 	addi	r5,r6,2
    e10c:	42000204 	addi	r8,r8,8
    e110:	200d883a 	mov	r6,r4
    e114:	843ffc04 	addi	r16,r16,-16
    e118:	3c000d0e 	bge	r7,r16,e150 <___vfiprintf_internal_r+0x4a0>
    e11c:	10800404 	addi	r2,r2,16
    e120:	31000044 	addi	r4,r6,1
    e124:	47000015 	stw	fp,0(r8)
    e128:	41c00115 	stw	r7,4(r8)
    e12c:	d8801c15 	stw	r2,112(sp)
    e130:	d9001b15 	stw	r4,108(sp)
    e134:	793ff40e 	bge	r15,r4,e108 <__alt_mem_Flash_flash_data+0xf400e108>
    e138:	10019b1e 	bne	r2,zero,e7a8 <___vfiprintf_internal_r+0xaf8>
    e13c:	843ffc04 	addi	r16,r16,-16
    e140:	000d883a 	mov	r6,zero
    e144:	01400044 	movi	r5,1
    e148:	d811883a 	mov	r8,sp
    e14c:	3c3ff316 	blt	r7,r16,e11c <__alt_mem_Flash_flash_data+0xf400e11c>
    e150:	8007883a 	mov	r3,r16
    e154:	da402517 	ldw	r9,148(sp)
    e158:	db402817 	ldw	r13,160(sp)
    e15c:	dc002917 	ldw	r16,164(sp)
    e160:	d9002417 	ldw	r4,144(sp)
    e164:	1885883a 	add	r2,r3,r2
    e168:	40c00115 	stw	r3,4(r8)
    e16c:	41000015 	stw	r4,0(r8)
    e170:	d8801c15 	stw	r2,112(sp)
    e174:	d9401b15 	stw	r5,108(sp)
    e178:	00c001c4 	movi	r3,7
    e17c:	19426a16 	blt	r3,r5,eb28 <___vfiprintf_internal_r+0xe78>
    e180:	d8c01d87 	ldb	r3,118(sp)
    e184:	42000204 	addi	r8,r8,8
    e188:	29000044 	addi	r4,r5,1
    e18c:	1801991e 	bne	r3,zero,e7f4 <___vfiprintf_internal_r+0xb44>
    e190:	68000c26 	beq	r13,zero,e1c4 <___vfiprintf_internal_r+0x514>
    e194:	d8c01d04 	addi	r3,sp,116
    e198:	10800084 	addi	r2,r2,2
    e19c:	40c00015 	stw	r3,0(r8)
    e1a0:	00c00084 	movi	r3,2
    e1a4:	40c00115 	stw	r3,4(r8)
    e1a8:	d8801c15 	stw	r2,112(sp)
    e1ac:	d9001b15 	stw	r4,108(sp)
    e1b0:	00c001c4 	movi	r3,7
    e1b4:	19024c16 	blt	r3,r4,eae8 <___vfiprintf_internal_r+0xe38>
    e1b8:	200b883a 	mov	r5,r4
    e1bc:	42000204 	addi	r8,r8,8
    e1c0:	21000044 	addi	r4,r4,1
    e1c4:	00c02004 	movi	r3,128
    e1c8:	b0c20126 	beq	r22,r3,e9d0 <___vfiprintf_internal_r+0xd20>
    e1cc:	4cedc83a 	sub	r22,r9,r19
    e1d0:	0580230e 	bge	zero,r22,e260 <___vfiprintf_internal_r+0x5b0>
    e1d4:	01c00404 	movi	r7,16
    e1d8:	3d83140e 	bge	r7,r22,ee2c <___vfiprintf_internal_r+0x117c>
    e1dc:	010000b4 	movhi	r4,2
    e1e0:	2100ef04 	addi	r4,r4,956
    e1e4:	d9002415 	stw	r4,144(sp)
    e1e8:	034001c4 	movi	r13,7
    e1ec:	00000506 	br	e204 <___vfiprintf_internal_r+0x554>
    e1f0:	29000084 	addi	r4,r5,2
    e1f4:	42000204 	addi	r8,r8,8
    e1f8:	180b883a 	mov	r5,r3
    e1fc:	b5bffc04 	addi	r22,r22,-16
    e200:	3d800d0e 	bge	r7,r22,e238 <___vfiprintf_internal_r+0x588>
    e204:	10800404 	addi	r2,r2,16
    e208:	28c00044 	addi	r3,r5,1
    e20c:	45c00015 	stw	r23,0(r8)
    e210:	41c00115 	stw	r7,4(r8)
    e214:	d8801c15 	stw	r2,112(sp)
    e218:	d8c01b15 	stw	r3,108(sp)
    e21c:	68fff40e 	bge	r13,r3,e1f0 <__alt_mem_Flash_flash_data+0xf400e1f0>
    e220:	1001811e 	bne	r2,zero,e828 <___vfiprintf_internal_r+0xb78>
    e224:	b5bffc04 	addi	r22,r22,-16
    e228:	01000044 	movi	r4,1
    e22c:	000b883a 	mov	r5,zero
    e230:	d811883a 	mov	r8,sp
    e234:	3dbff316 	blt	r7,r22,e204 <__alt_mem_Flash_flash_data+0xf400e204>
    e238:	d8c02417 	ldw	r3,144(sp)
    e23c:	1585883a 	add	r2,r2,r22
    e240:	45800115 	stw	r22,4(r8)
    e244:	40c00015 	stw	r3,0(r8)
    e248:	d8801c15 	stw	r2,112(sp)
    e24c:	d9001b15 	stw	r4,108(sp)
    e250:	00c001c4 	movi	r3,7
    e254:	1901d016 	blt	r3,r4,e998 <___vfiprintf_internal_r+0xce8>
    e258:	42000204 	addi	r8,r8,8
    e25c:	21000044 	addi	r4,r4,1
    e260:	14c5883a 	add	r2,r2,r19
    e264:	45000015 	stw	r20,0(r8)
    e268:	44c00115 	stw	r19,4(r8)
    e26c:	d8801c15 	stw	r2,112(sp)
    e270:	d9001b15 	stw	r4,108(sp)
    e274:	00c001c4 	movi	r3,7
    e278:	1901cf0e 	bge	r3,r4,e9b8 <___vfiprintf_internal_r+0xd08>
    e27c:	1002361e 	bne	r2,zero,eb58 <___vfiprintf_internal_r+0xea8>
    e280:	d8001b15 	stw	zero,108(sp)
    e284:	aac0010c 	andi	r11,r21,4
    e288:	58002826 	beq	r11,zero,e32c <___vfiprintf_internal_r+0x67c>
    e28c:	9467c83a 	sub	r19,r18,r17
    e290:	d811883a 	mov	r8,sp
    e294:	04c3340e 	bge	zero,r19,ef68 <___vfiprintf_internal_r+0x12b8>
    e298:	01c00404 	movi	r7,16
    e29c:	3cc31b0e 	bge	r7,r19,ef0c <___vfiprintf_internal_r+0x125c>
    e2a0:	00c000b4 	movhi	r3,2
    e2a4:	18c0f304 	addi	r3,r3,972
    e2a8:	d9001b17 	ldw	r4,108(sp)
    e2ac:	d8c02415 	stw	r3,144(sp)
    e2b0:	382b883a 	mov	r21,r7
    e2b4:	050001c4 	movi	r20,7
    e2b8:	dd802017 	ldw	r22,128(sp)
    e2bc:	00000506 	br	e2d4 <___vfiprintf_internal_r+0x624>
    e2c0:	21400084 	addi	r5,r4,2
    e2c4:	42000204 	addi	r8,r8,8
    e2c8:	1809883a 	mov	r4,r3
    e2cc:	9cfffc04 	addi	r19,r19,-16
    e2d0:	acc00d0e 	bge	r21,r19,e308 <___vfiprintf_internal_r+0x658>
    e2d4:	10800404 	addi	r2,r2,16
    e2d8:	20c00044 	addi	r3,r4,1
    e2dc:	47000015 	stw	fp,0(r8)
    e2e0:	45400115 	stw	r21,4(r8)
    e2e4:	d8801c15 	stw	r2,112(sp)
    e2e8:	d8c01b15 	stw	r3,108(sp)
    e2ec:	a0fff40e 	bge	r20,r3,e2c0 <__alt_mem_Flash_flash_data+0xf400e2c0>
    e2f0:	10019f1e 	bne	r2,zero,e970 <___vfiprintf_internal_r+0xcc0>
    e2f4:	9cfffc04 	addi	r19,r19,-16
    e2f8:	01400044 	movi	r5,1
    e2fc:	0009883a 	mov	r4,zero
    e300:	d811883a 	mov	r8,sp
    e304:	acfff316 	blt	r21,r19,e2d4 <__alt_mem_Flash_flash_data+0xf400e2d4>
    e308:	d8c02417 	ldw	r3,144(sp)
    e30c:	14c5883a 	add	r2,r2,r19
    e310:	44c00115 	stw	r19,4(r8)
    e314:	40c00015 	stw	r3,0(r8)
    e318:	d8801c15 	stw	r2,112(sp)
    e31c:	d9401b15 	stw	r5,108(sp)
    e320:	00c001c4 	movi	r3,7
    e324:	1941810e 	bge	r3,r5,e92c <___vfiprintf_internal_r+0xc7c>
    e328:	10017a1e 	bne	r2,zero,e914 <___vfiprintf_internal_r+0xc64>
    e32c:	8c82a416 	blt	r17,r18,edc0 <___vfiprintf_internal_r+0x1110>
    e330:	d9002317 	ldw	r4,140(sp)
    e334:	2449883a 	add	r4,r4,r17
    e338:	d9002315 	stw	r4,140(sp)
    e33c:	d8001b15 	stw	zero,108(sp)
    e340:	d811883a 	mov	r8,sp
    e344:	003e8e06 	br	dd80 <__alt_mem_Flash_flash_data+0xf400dd80>
    e348:	d9002017 	ldw	r4,128(sp)
    e34c:	a80b883a 	mov	r5,r21
    e350:	00077fc0 	call	77fc <__swsetup_r>
    e354:	10000c1e 	bne	r2,zero,e388 <___vfiprintf_internal_r+0x6d8>
    e358:	a880030b 	ldhu	r2,12(r21)
    e35c:	00c00284 	movi	r3,10
    e360:	1080068c 	andi	r2,r2,26
    e364:	10fe741e 	bne	r2,r3,dd38 <__alt_mem_Flash_flash_data+0xf400dd38>
    e368:	a880038f 	ldh	r2,14(r21)
    e36c:	103e7216 	blt	r2,zero,dd38 <__alt_mem_Flash_flash_data+0xf400dd38>
    e370:	d9002017 	ldw	r4,128(sp)
    e374:	d9c02217 	ldw	r7,136(sp)
    e378:	a80b883a 	mov	r5,r21
    e37c:	b00d883a 	mov	r6,r22
    e380:	000efa40 	call	efa4 <__sbprintf>
    e384:	00000106 	br	e38c <___vfiprintf_internal_r+0x6dc>
    e388:	00bfffc4 	movi	r2,-1
    e38c:	dfc03517 	ldw	ra,212(sp)
    e390:	df003417 	ldw	fp,208(sp)
    e394:	ddc03317 	ldw	r23,204(sp)
    e398:	dd803217 	ldw	r22,200(sp)
    e39c:	dd403117 	ldw	r21,196(sp)
    e3a0:	dd003017 	ldw	r20,192(sp)
    e3a4:	dcc02f17 	ldw	r19,188(sp)
    e3a8:	dc802e17 	ldw	r18,184(sp)
    e3ac:	dc402d17 	ldw	r17,180(sp)
    e3b0:	dc002c17 	ldw	r16,176(sp)
    e3b4:	dec03604 	addi	sp,sp,216
    e3b8:	f800283a 	ret
    e3bc:	000985c0 	call	985c <__sinit>
    e3c0:	003e4d06 	br	dcf8 <__alt_mem_Flash_flash_data+0xf400dcf8>
    e3c4:	8005883a 	mov	r2,r16
    e3c8:	ad400114 	ori	r21,r21,4
    e3cc:	80c00007 	ldb	r3,0(r16)
    e3d0:	003e9506 	br	de28 <__alt_mem_Flash_flash_data+0xf400de28>
    e3d4:	b006d0fa 	srli	r3,r22,3
    e3d8:	6808977a 	slli	r4,r13,29
    e3dc:	681ad0fa 	srli	r13,r13,3
    e3e0:	b58001cc 	andi	r22,r22,7
    e3e4:	b0800c04 	addi	r2,r22,48
    e3e8:	a53fffc4 	addi	r20,r20,-1
    e3ec:	20ecb03a 	or	r22,r4,r3
    e3f0:	a0800005 	stb	r2,0(r20)
    e3f4:	b346b03a 	or	r3,r22,r13
    e3f8:	183ff61e 	bne	r3,zero,e3d4 <__alt_mem_Flash_flash_data+0xf400e3d4>
    e3fc:	a8c0004c 	andi	r3,r21,1
    e400:	a009883a 	mov	r4,r20
    e404:	18013b26 	beq	r3,zero,e8f4 <___vfiprintf_internal_r+0xc44>
    e408:	10803fcc 	andi	r2,r2,255
    e40c:	1080201c 	xori	r2,r2,128
    e410:	10bfe004 	addi	r2,r2,-128
    e414:	00c00c04 	movi	r3,48
    e418:	10ff1d26 	beq	r2,r3,e090 <__alt_mem_Flash_flash_data+0xf400e090>
    e41c:	d8801e17 	ldw	r2,120(sp)
    e420:	a53fffc4 	addi	r20,r20,-1
    e424:	20ffffc5 	stb	r3,-1(r4)
    e428:	1527c83a 	sub	r19,r2,r20
    e42c:	003f1a06 	br	e098 <__alt_mem_Flash_flash_data+0xf400e098>
    e430:	ad402014 	ori	r21,r21,128
    e434:	8005883a 	mov	r2,r16
    e438:	80c00007 	ldb	r3,0(r16)
    e43c:	003e7a06 	br	de28 <__alt_mem_Flash_flash_data+0xf400de28>
    e440:	8005883a 	mov	r2,r16
    e444:	0025883a 	mov	r18,zero
    e448:	193ff404 	addi	r4,r3,-48
    e44c:	10c00007 	ldb	r3,0(r2)
    e450:	948002a4 	muli	r18,r18,10
    e454:	84000044 	addi	r16,r16,1
    e458:	8005883a 	mov	r2,r16
    e45c:	9125883a 	add	r18,r18,r4
    e460:	193ff404 	addi	r4,r3,-48
    e464:	313ff92e 	bgeu	r6,r4,e44c <__alt_mem_Flash_flash_data+0xf400e44c>
    e468:	003e7006 	br	de2c <__alt_mem_Flash_flash_data+0xf400de2c>
    e46c:	ad400414 	ori	r21,r21,16
    e470:	d9c01d85 	stb	r7,118(sp)
    e474:	a880080c 	andi	r2,r21,32
    e478:	d8c02217 	ldw	r3,136(sp)
    e47c:	10005a26 	beq	r2,zero,e5e8 <___vfiprintf_internal_r+0x938>
    e480:	d9002217 	ldw	r4,136(sp)
    e484:	18800117 	ldw	r2,4(r3)
    e488:	1d800017 	ldw	r22,0(r3)
    e48c:	21000204 	addi	r4,r4,8
    e490:	d9002215 	stw	r4,136(sp)
    e494:	101b883a 	mov	r13,r2
    e498:	1001f416 	blt	r2,zero,ec6c <___vfiprintf_internal_r+0xfbc>
    e49c:	db801d83 	ldbu	r14,118(sp)
    e4a0:	4827883a 	mov	r19,r9
    e4a4:	00800044 	movi	r2,1
    e4a8:	b348b03a 	or	r4,r22,r13
    e4ac:	003ee106 	br	e034 <__alt_mem_Flash_flash_data+0xf400e034>
    e4b0:	80c00007 	ldb	r3,0(r16)
    e4b4:	80800044 	addi	r2,r16,1
    e4b8:	1b42a326 	beq	r3,r13,ef48 <___vfiprintf_internal_r+0x1298>
    e4bc:	193ff404 	addi	r4,r3,-48
    e4c0:	1021883a 	mov	r16,r2
    e4c4:	0013883a 	mov	r9,zero
    e4c8:	313e5836 	bltu	r6,r4,de2c <__alt_mem_Flash_flash_data+0xf400de2c>
    e4cc:	80c00007 	ldb	r3,0(r16)
    e4d0:	4a4002a4 	muli	r9,r9,10
    e4d4:	84000044 	addi	r16,r16,1
    e4d8:	2253883a 	add	r9,r4,r9
    e4dc:	193ff404 	addi	r4,r3,-48
    e4e0:	313ffa2e 	bgeu	r6,r4,e4cc <__alt_mem_Flash_flash_data+0xf400e4cc>
    e4e4:	483e510e 	bge	r9,zero,de2c <__alt_mem_Flash_flash_data+0xf400de2c>
    e4e8:	027fffc4 	movi	r9,-1
    e4ec:	003e4f06 	br	de2c <__alt_mem_Flash_flash_data+0xf400de2c>
    e4f0:	d9c01d85 	stb	r7,118(sp)
    e4f4:	a880080c 	andi	r2,r21,32
    e4f8:	10020826 	beq	r2,zero,ed1c <___vfiprintf_internal_r+0x106c>
    e4fc:	d8c02217 	ldw	r3,136(sp)
    e500:	d9002317 	ldw	r4,140(sp)
    e504:	18800017 	ldw	r2,0(r3)
    e508:	2007d7fa 	srai	r3,r4,31
    e50c:	d9002217 	ldw	r4,136(sp)
    e510:	10c00115 	stw	r3,4(r2)
    e514:	21000104 	addi	r4,r4,4
    e518:	d9002215 	stw	r4,136(sp)
    e51c:	d9002317 	ldw	r4,140(sp)
    e520:	11000015 	stw	r4,0(r2)
    e524:	003e1606 	br	dd80 <__alt_mem_Flash_flash_data+0xf400dd80>
    e528:	d8802217 	ldw	r2,136(sp)
    e52c:	d8c02217 	ldw	r3,136(sp)
    e530:	15800017 	ldw	r22,0(r2)
    e534:	13400117 	ldw	r13,4(r2)
    e538:	18c00204 	addi	r3,r3,8
    e53c:	0005883a 	mov	r2,zero
    e540:	d8c02215 	stw	r3,136(sp)
    e544:	b348b03a 	or	r4,r22,r13
    e548:	003eb706 	br	e028 <__alt_mem_Flash_flash_data+0xf400e028>
    e54c:	38803fcc 	andi	r2,r7,255
    e550:	1080201c 	xori	r2,r2,128
    e554:	10bfe004 	addi	r2,r2,-128
    e558:	1001e31e 	bne	r2,zero,ece8 <___vfiprintf_internal_r+0x1038>
    e55c:	8005883a 	mov	r2,r16
    e560:	01c00804 	movi	r7,32
    e564:	80c00007 	ldb	r3,0(r16)
    e568:	003e2f06 	br	de28 <__alt_mem_Flash_flash_data+0xf400de28>
    e56c:	ad400054 	ori	r21,r21,1
    e570:	8005883a 	mov	r2,r16
    e574:	80c00007 	ldb	r3,0(r16)
    e578:	003e2b06 	br	de28 <__alt_mem_Flash_flash_data+0xf400de28>
    e57c:	d8c02217 	ldw	r3,136(sp)
    e580:	1c800017 	ldw	r18,0(r3)
    e584:	18c00104 	addi	r3,r3,4
    e588:	90023816 	blt	r18,zero,ee6c <___vfiprintf_internal_r+0x11bc>
    e58c:	d8c02215 	stw	r3,136(sp)
    e590:	8005883a 	mov	r2,r16
    e594:	80c00007 	ldb	r3,0(r16)
    e598:	003e2306 	br	de28 <__alt_mem_Flash_flash_data+0xf400de28>
    e59c:	8005883a 	mov	r2,r16
    e5a0:	01c00ac4 	movi	r7,43
    e5a4:	80c00007 	ldb	r3,0(r16)
    e5a8:	003e1f06 	br	de28 <__alt_mem_Flash_flash_data+0xf400de28>
    e5ac:	d8c02217 	ldw	r3,136(sp)
    e5b0:	04400044 	movi	r17,1
    e5b4:	d8001d85 	stb	zero,118(sp)
    e5b8:	18800017 	ldw	r2,0(r3)
    e5bc:	18c00104 	addi	r3,r3,4
    e5c0:	d8c02215 	stw	r3,136(sp)
    e5c4:	d8801005 	stb	r2,64(sp)
    e5c8:	8827883a 	mov	r19,r17
    e5cc:	dd001004 	addi	r20,sp,64
    e5d0:	0013883a 	mov	r9,zero
    e5d4:	003eb806 	br	e0b8 <__alt_mem_Flash_flash_data+0xf400e0b8>
    e5d8:	d9c01d85 	stb	r7,118(sp)
    e5dc:	a880080c 	andi	r2,r21,32
    e5e0:	d8c02217 	ldw	r3,136(sp)
    e5e4:	103fa61e 	bne	r2,zero,e480 <__alt_mem_Flash_flash_data+0xf400e480>
    e5e8:	a880040c 	andi	r2,r21,16
    e5ec:	1001dd26 	beq	r2,zero,ed64 <___vfiprintf_internal_r+0x10b4>
    e5f0:	1d800017 	ldw	r22,0(r3)
    e5f4:	d8802217 	ldw	r2,136(sp)
    e5f8:	b01bd7fa 	srai	r13,r22,31
    e5fc:	10800104 	addi	r2,r2,4
    e600:	d8802215 	stw	r2,136(sp)
    e604:	6805883a 	mov	r2,r13
    e608:	003fa306 	br	e498 <__alt_mem_Flash_flash_data+0xf400e498>
    e60c:	008000b4 	movhi	r2,2
    e610:	10807904 	addi	r2,r2,484
    e614:	d8802615 	stw	r2,152(sp)
    e618:	d9c01d85 	stb	r7,118(sp)
    e61c:	a880080c 	andi	r2,r21,32
    e620:	10004726 	beq	r2,zero,e740 <___vfiprintf_internal_r+0xa90>
    e624:	d9002217 	ldw	r4,136(sp)
    e628:	25800017 	ldw	r22,0(r4)
    e62c:	23400117 	ldw	r13,4(r4)
    e630:	21000204 	addi	r4,r4,8
    e634:	d9002215 	stw	r4,136(sp)
    e638:	a880004c 	andi	r2,r21,1
    e63c:	10014e26 	beq	r2,zero,eb78 <___vfiprintf_internal_r+0xec8>
    e640:	b348b03a 	or	r4,r22,r13
    e644:	20019c26 	beq	r4,zero,ecb8 <___vfiprintf_internal_r+0x1008>
    e648:	00800c04 	movi	r2,48
    e64c:	d8801d05 	stb	r2,116(sp)
    e650:	d8c01d45 	stb	r3,117(sp)
    e654:	ad400094 	ori	r21,r21,2
    e658:	00800084 	movi	r2,2
    e65c:	003e7206 	br	e028 <__alt_mem_Flash_flash_data+0xf400e028>
    e660:	d8c02217 	ldw	r3,136(sp)
    e664:	d8001d85 	stb	zero,118(sp)
    e668:	1d000017 	ldw	r20,0(r3)
    e66c:	1d800104 	addi	r22,r3,4
    e670:	a0021c26 	beq	r20,zero,eee4 <___vfiprintf_internal_r+0x1234>
    e674:	a009883a 	mov	r4,r20
    e678:	48020016 	blt	r9,zero,ee7c <___vfiprintf_internal_r+0x11cc>
    e67c:	480d883a 	mov	r6,r9
    e680:	000b883a 	mov	r5,zero
    e684:	da002a15 	stw	r8,168(sp)
    e688:	da402b15 	stw	r9,172(sp)
    e68c:	000ad480 	call	ad48 <memchr>
    e690:	da002a17 	ldw	r8,168(sp)
    e694:	da402b17 	ldw	r9,172(sp)
    e698:	10022226 	beq	r2,zero,ef24 <___vfiprintf_internal_r+0x1274>
    e69c:	1527c83a 	sub	r19,r2,r20
    e6a0:	4cc1c916 	blt	r9,r19,edc8 <___vfiprintf_internal_r+0x1118>
    e6a4:	db801d83 	ldbu	r14,118(sp)
    e6a8:	dd802215 	stw	r22,136(sp)
    e6ac:	0013883a 	mov	r9,zero
    e6b0:	003e7906 	br	e098 <__alt_mem_Flash_flash_data+0xf400e098>
    e6b4:	ad401014 	ori	r21,r21,64
    e6b8:	8005883a 	mov	r2,r16
    e6bc:	80c00007 	ldb	r3,0(r16)
    e6c0:	003dd906 	br	de28 <__alt_mem_Flash_flash_data+0xf400de28>
    e6c4:	80c00007 	ldb	r3,0(r16)
    e6c8:	8005883a 	mov	r2,r16
    e6cc:	1b01e326 	beq	r3,r12,ee5c <___vfiprintf_internal_r+0x11ac>
    e6d0:	ad400414 	ori	r21,r21,16
    e6d4:	003dd406 	br	de28 <__alt_mem_Flash_flash_data+0xf400de28>
    e6d8:	d9002217 	ldw	r4,136(sp)
    e6dc:	00800c04 	movi	r2,48
    e6e0:	d8801d05 	stb	r2,116(sp)
    e6e4:	25800017 	ldw	r22,0(r4)
    e6e8:	00801e04 	movi	r2,120
    e6ec:	d8801d45 	stb	r2,117(sp)
    e6f0:	008000b4 	movhi	r2,2
    e6f4:	21000104 	addi	r4,r4,4
    e6f8:	10807e04 	addi	r2,r2,504
    e6fc:	d9002215 	stw	r4,136(sp)
    e700:	d8802615 	stw	r2,152(sp)
    e704:	001b883a 	mov	r13,zero
    e708:	ad400094 	ori	r21,r21,2
    e70c:	00800084 	movi	r2,2
    e710:	b009883a 	mov	r4,r22
    e714:	003e4406 	br	e028 <__alt_mem_Flash_flash_data+0xf400e028>
    e718:	ad400814 	ori	r21,r21,32
    e71c:	8005883a 	mov	r2,r16
    e720:	80c00007 	ldb	r3,0(r16)
    e724:	003dc006 	br	de28 <__alt_mem_Flash_flash_data+0xf400de28>
    e728:	008000b4 	movhi	r2,2
    e72c:	10807e04 	addi	r2,r2,504
    e730:	d8802615 	stw	r2,152(sp)
    e734:	d9c01d85 	stb	r7,118(sp)
    e738:	a880080c 	andi	r2,r21,32
    e73c:	103fb91e 	bne	r2,zero,e624 <__alt_mem_Flash_flash_data+0xf400e624>
    e740:	a880040c 	andi	r2,r21,16
    e744:	10010f1e 	bne	r2,zero,eb84 <___vfiprintf_internal_r+0xed4>
    e748:	a880100c 	andi	r2,r21,64
    e74c:	10010d26 	beq	r2,zero,eb84 <___vfiprintf_internal_r+0xed4>
    e750:	d9002217 	ldw	r4,136(sp)
    e754:	001b883a 	mov	r13,zero
    e758:	2580000b 	ldhu	r22,0(r4)
    e75c:	21000104 	addi	r4,r4,4
    e760:	d9002215 	stw	r4,136(sp)
    e764:	003fb406 	br	e638 <__alt_mem_Flash_flash_data+0xf400e638>
    e768:	d9002217 	ldw	r4,136(sp)
    e76c:	00800044 	movi	r2,1
    e770:	25800017 	ldw	r22,0(r4)
    e774:	23400117 	ldw	r13,4(r4)
    e778:	21000204 	addi	r4,r4,8
    e77c:	d9002215 	stw	r4,136(sp)
    e780:	b348b03a 	or	r4,r22,r13
    e784:	003e2806 	br	e028 <__alt_mem_Flash_flash_data+0xf400e028>
    e788:	d9c01d85 	stb	r7,118(sp)
    e78c:	1801ab26 	beq	r3,zero,ee3c <___vfiprintf_internal_r+0x118c>
    e790:	04400044 	movi	r17,1
    e794:	d8c01005 	stb	r3,64(sp)
    e798:	d8001d85 	stb	zero,118(sp)
    e79c:	8827883a 	mov	r19,r17
    e7a0:	dd001004 	addi	r20,sp,64
    e7a4:	003f8a06 	br	e5d0 <__alt_mem_Flash_flash_data+0xf400e5d0>
    e7a8:	d9002017 	ldw	r4,128(sp)
    e7ac:	d9402117 	ldw	r5,132(sp)
    e7b0:	d9801a04 	addi	r6,sp,104
    e7b4:	d9c02b15 	stw	r7,172(sp)
    e7b8:	dbc02a15 	stw	r15,168(sp)
    e7bc:	000db9c0 	call	db9c <__sprint_r.part.0>
    e7c0:	d9c02b17 	ldw	r7,172(sp)
    e7c4:	dbc02a17 	ldw	r15,168(sp)
    e7c8:	1000631e 	bne	r2,zero,e958 <___vfiprintf_internal_r+0xca8>
    e7cc:	d9801b17 	ldw	r6,108(sp)
    e7d0:	d8801c17 	ldw	r2,112(sp)
    e7d4:	d811883a 	mov	r8,sp
    e7d8:	31400044 	addi	r5,r6,1
    e7dc:	003e4d06 	br	e114 <__alt_mem_Flash_flash_data+0xf400e114>
    e7e0:	d9401b17 	ldw	r5,108(sp)
    e7e4:	d8801c17 	ldw	r2,112(sp)
    e7e8:	29000044 	addi	r4,r5,1
    e7ec:	d8c01d87 	ldb	r3,118(sp)
    e7f0:	183e6726 	beq	r3,zero,e190 <__alt_mem_Flash_flash_data+0xf400e190>
    e7f4:	00c00044 	movi	r3,1
    e7f8:	d9401d84 	addi	r5,sp,118
    e7fc:	10c5883a 	add	r2,r2,r3
    e800:	41400015 	stw	r5,0(r8)
    e804:	40c00115 	stw	r3,4(r8)
    e808:	d8801c15 	stw	r2,112(sp)
    e80c:	d9001b15 	stw	r4,108(sp)
    e810:	014001c4 	movi	r5,7
    e814:	2900ab16 	blt	r5,r4,eac4 <___vfiprintf_internal_r+0xe14>
    e818:	200b883a 	mov	r5,r4
    e81c:	42000204 	addi	r8,r8,8
    e820:	21000044 	addi	r4,r4,1
    e824:	003e5a06 	br	e190 <__alt_mem_Flash_flash_data+0xf400e190>
    e828:	d9002017 	ldw	r4,128(sp)
    e82c:	d9402117 	ldw	r5,132(sp)
    e830:	d9801a04 	addi	r6,sp,104
    e834:	d9c02b15 	stw	r7,172(sp)
    e838:	db402a15 	stw	r13,168(sp)
    e83c:	000db9c0 	call	db9c <__sprint_r.part.0>
    e840:	d9c02b17 	ldw	r7,172(sp)
    e844:	db402a17 	ldw	r13,168(sp)
    e848:	1000431e 	bne	r2,zero,e958 <___vfiprintf_internal_r+0xca8>
    e84c:	d9401b17 	ldw	r5,108(sp)
    e850:	d8801c17 	ldw	r2,112(sp)
    e854:	d811883a 	mov	r8,sp
    e858:	29000044 	addi	r4,r5,1
    e85c:	003e6706 	br	e1fc <__alt_mem_Flash_flash_data+0xf400e1fc>
    e860:	10803fcc 	andi	r2,r2,255
    e864:	00c00044 	movi	r3,1
    e868:	10fdfa1e 	bne	r2,r3,e054 <__alt_mem_Flash_flash_data+0xf400e054>
    e86c:	6800021e 	bne	r13,zero,e878 <___vfiprintf_internal_r+0xbc8>
    e870:	00800244 	movi	r2,9
    e874:	1580222e 	bgeu	r2,r22,e900 <___vfiprintf_internal_r+0xc50>
    e878:	dc802415 	stw	r18,144(sp)
    e87c:	dc002515 	stw	r16,148(sp)
    e880:	dc401a04 	addi	r17,sp,104
    e884:	b021883a 	mov	r16,r22
    e888:	4827883a 	mov	r19,r9
    e88c:	4029883a 	mov	r20,r8
    e890:	702d883a 	mov	r22,r14
    e894:	6825883a 	mov	r18,r13
    e898:	8009883a 	mov	r4,r16
    e89c:	900b883a 	mov	r5,r18
    e8a0:	01800284 	movi	r6,10
    e8a4:	000f883a 	mov	r7,zero
    e8a8:	000ff180 	call	ff18 <__umoddi3>
    e8ac:	10800c04 	addi	r2,r2,48
    e8b0:	8c7fffc4 	addi	r17,r17,-1
    e8b4:	8009883a 	mov	r4,r16
    e8b8:	900b883a 	mov	r5,r18
    e8bc:	01800284 	movi	r6,10
    e8c0:	000f883a 	mov	r7,zero
    e8c4:	88800005 	stb	r2,0(r17)
    e8c8:	000f9580 	call	f958 <__udivdi3>
    e8cc:	1021883a 	mov	r16,r2
    e8d0:	10c4b03a 	or	r2,r2,r3
    e8d4:	1825883a 	mov	r18,r3
    e8d8:	103fef1e 	bne	r2,zero,e898 <__alt_mem_Flash_flash_data+0xf400e898>
    e8dc:	dc802417 	ldw	r18,144(sp)
    e8e0:	dc002517 	ldw	r16,148(sp)
    e8e4:	a011883a 	mov	r8,r20
    e8e8:	9813883a 	mov	r9,r19
    e8ec:	b01d883a 	mov	r14,r22
    e8f0:	8829883a 	mov	r20,r17
    e8f4:	d8c01e17 	ldw	r3,120(sp)
    e8f8:	1d27c83a 	sub	r19,r3,r20
    e8fc:	003de606 	br	e098 <__alt_mem_Flash_flash_data+0xf400e098>
    e900:	b5800c04 	addi	r22,r22,48
    e904:	dd8019c5 	stb	r22,103(sp)
    e908:	dcc02717 	ldw	r19,156(sp)
    e90c:	dd0019c4 	addi	r20,sp,103
    e910:	003de106 	br	e098 <__alt_mem_Flash_flash_data+0xf400e098>
    e914:	d9002017 	ldw	r4,128(sp)
    e918:	d9402117 	ldw	r5,132(sp)
    e91c:	d9801a04 	addi	r6,sp,104
    e920:	000db9c0 	call	db9c <__sprint_r.part.0>
    e924:	10000c1e 	bne	r2,zero,e958 <___vfiprintf_internal_r+0xca8>
    e928:	d8801c17 	ldw	r2,112(sp)
    e92c:	8c80010e 	bge	r17,r18,e934 <___vfiprintf_internal_r+0xc84>
    e930:	9023883a 	mov	r17,r18
    e934:	d8c02317 	ldw	r3,140(sp)
    e938:	1c47883a 	add	r3,r3,r17
    e93c:	d8c02315 	stw	r3,140(sp)
    e940:	103e7e26 	beq	r2,zero,e33c <__alt_mem_Flash_flash_data+0xf400e33c>
    e944:	d9002017 	ldw	r4,128(sp)
    e948:	d9402117 	ldw	r5,132(sp)
    e94c:	d9801a04 	addi	r6,sp,104
    e950:	000db9c0 	call	db9c <__sprint_r.part.0>
    e954:	103e7926 	beq	r2,zero,e33c <__alt_mem_Flash_flash_data+0xf400e33c>
    e958:	dd402117 	ldw	r21,132(sp)
    e95c:	a880030b 	ldhu	r2,12(r21)
    e960:	1080100c 	andi	r2,r2,64
    e964:	103e881e 	bne	r2,zero,e388 <__alt_mem_Flash_flash_data+0xf400e388>
    e968:	d8802317 	ldw	r2,140(sp)
    e96c:	003e8706 	br	e38c <__alt_mem_Flash_flash_data+0xf400e38c>
    e970:	d9402117 	ldw	r5,132(sp)
    e974:	b009883a 	mov	r4,r22
    e978:	d9801a04 	addi	r6,sp,104
    e97c:	000db9c0 	call	db9c <__sprint_r.part.0>
    e980:	103ff51e 	bne	r2,zero,e958 <__alt_mem_Flash_flash_data+0xf400e958>
    e984:	d9001b17 	ldw	r4,108(sp)
    e988:	d8801c17 	ldw	r2,112(sp)
    e98c:	d811883a 	mov	r8,sp
    e990:	21400044 	addi	r5,r4,1
    e994:	003e4d06 	br	e2cc <__alt_mem_Flash_flash_data+0xf400e2cc>
    e998:	1000aa1e 	bne	r2,zero,ec44 <___vfiprintf_internal_r+0xf94>
    e99c:	00c00044 	movi	r3,1
    e9a0:	9805883a 	mov	r2,r19
    e9a4:	dd000015 	stw	r20,0(sp)
    e9a8:	dcc00115 	stw	r19,4(sp)
    e9ac:	dcc01c15 	stw	r19,112(sp)
    e9b0:	d8c01b15 	stw	r3,108(sp)
    e9b4:	d811883a 	mov	r8,sp
    e9b8:	42000204 	addi	r8,r8,8
    e9bc:	aac0010c 	andi	r11,r21,4
    e9c0:	583fda26 	beq	r11,zero,e92c <__alt_mem_Flash_flash_data+0xf400e92c>
    e9c4:	9467c83a 	sub	r19,r18,r17
    e9c8:	04fe3316 	blt	zero,r19,e298 <__alt_mem_Flash_flash_data+0xf400e298>
    e9cc:	003fd706 	br	e92c <__alt_mem_Flash_flash_data+0xf400e92c>
    e9d0:	946dc83a 	sub	r22,r18,r17
    e9d4:	05bdfd0e 	bge	zero,r22,e1cc <__alt_mem_Flash_flash_data+0xf400e1cc>
    e9d8:	00c000b4 	movhi	r3,2
    e9dc:	18c0ef04 	addi	r3,r3,956
    e9e0:	01c00404 	movi	r7,16
    e9e4:	d8c02415 	stw	r3,144(sp)
    e9e8:	3d81530e 	bge	r7,r22,ef38 <___vfiprintf_internal_r+0x1288>
    e9ec:	8007883a 	mov	r3,r16
    e9f0:	034001c4 	movi	r13,7
    e9f4:	b021883a 	mov	r16,r22
    e9f8:	da402515 	stw	r9,148(sp)
    e9fc:	182d883a 	mov	r22,r3
    ea00:	00000506 	br	ea18 <___vfiprintf_internal_r+0xd68>
    ea04:	29800084 	addi	r6,r5,2
    ea08:	42000204 	addi	r8,r8,8
    ea0c:	180b883a 	mov	r5,r3
    ea10:	843ffc04 	addi	r16,r16,-16
    ea14:	3c000d0e 	bge	r7,r16,ea4c <___vfiprintf_internal_r+0xd9c>
    ea18:	10800404 	addi	r2,r2,16
    ea1c:	28c00044 	addi	r3,r5,1
    ea20:	45c00015 	stw	r23,0(r8)
    ea24:	41c00115 	stw	r7,4(r8)
    ea28:	d8801c15 	stw	r2,112(sp)
    ea2c:	d8c01b15 	stw	r3,108(sp)
    ea30:	68fff40e 	bge	r13,r3,ea04 <__alt_mem_Flash_flash_data+0xf400ea04>
    ea34:	1000151e 	bne	r2,zero,ea8c <___vfiprintf_internal_r+0xddc>
    ea38:	843ffc04 	addi	r16,r16,-16
    ea3c:	01800044 	movi	r6,1
    ea40:	000b883a 	mov	r5,zero
    ea44:	d811883a 	mov	r8,sp
    ea48:	3c3ff316 	blt	r7,r16,ea18 <__alt_mem_Flash_flash_data+0xf400ea18>
    ea4c:	da402517 	ldw	r9,148(sp)
    ea50:	b007883a 	mov	r3,r22
    ea54:	802d883a 	mov	r22,r16
    ea58:	1821883a 	mov	r16,r3
    ea5c:	d8c02417 	ldw	r3,144(sp)
    ea60:	1585883a 	add	r2,r2,r22
    ea64:	45800115 	stw	r22,4(r8)
    ea68:	40c00015 	stw	r3,0(r8)
    ea6c:	d8801c15 	stw	r2,112(sp)
    ea70:	d9801b15 	stw	r6,108(sp)
    ea74:	00c001c4 	movi	r3,7
    ea78:	19806d16 	blt	r3,r6,ec30 <___vfiprintf_internal_r+0xf80>
    ea7c:	42000204 	addi	r8,r8,8
    ea80:	31000044 	addi	r4,r6,1
    ea84:	300b883a 	mov	r5,r6
    ea88:	003dd006 	br	e1cc <__alt_mem_Flash_flash_data+0xf400e1cc>
    ea8c:	d9002017 	ldw	r4,128(sp)
    ea90:	d9402117 	ldw	r5,132(sp)
    ea94:	d9801a04 	addi	r6,sp,104
    ea98:	d9c02b15 	stw	r7,172(sp)
    ea9c:	db402a15 	stw	r13,168(sp)
    eaa0:	000db9c0 	call	db9c <__sprint_r.part.0>
    eaa4:	d9c02b17 	ldw	r7,172(sp)
    eaa8:	db402a17 	ldw	r13,168(sp)
    eaac:	103faa1e 	bne	r2,zero,e958 <__alt_mem_Flash_flash_data+0xf400e958>
    eab0:	d9401b17 	ldw	r5,108(sp)
    eab4:	d8801c17 	ldw	r2,112(sp)
    eab8:	d811883a 	mov	r8,sp
    eabc:	29800044 	addi	r6,r5,1
    eac0:	003fd306 	br	ea10 <__alt_mem_Flash_flash_data+0xf400ea10>
    eac4:	1000401e 	bne	r2,zero,ebc8 <___vfiprintf_internal_r+0xf18>
    eac8:	68003b26 	beq	r13,zero,ebb8 <___vfiprintf_internal_r+0xf08>
    eacc:	d9001d04 	addi	r4,sp,116
    ead0:	00800084 	movi	r2,2
    ead4:	d9000015 	stw	r4,0(sp)
    ead8:	d8800115 	stw	r2,4(sp)
    eadc:	1809883a 	mov	r4,r3
    eae0:	d811883a 	mov	r8,sp
    eae4:	003db406 	br	e1b8 <__alt_mem_Flash_flash_data+0xf400e1b8>
    eae8:	1000451e 	bne	r2,zero,ec00 <___vfiprintf_internal_r+0xf50>
    eaec:	01000044 	movi	r4,1
    eaf0:	000b883a 	mov	r5,zero
    eaf4:	d811883a 	mov	r8,sp
    eaf8:	003db206 	br	e1c4 <__alt_mem_Flash_flash_data+0xf400e1c4>
    eafc:	10803fcc 	andi	r2,r2,255
    eb00:	1000071e 	bne	r2,zero,eb20 <___vfiprintf_internal_r+0xe70>
    eb04:	a880004c 	andi	r2,r21,1
    eb08:	10000526 	beq	r2,zero,eb20 <___vfiprintf_internal_r+0xe70>
    eb0c:	00800c04 	movi	r2,48
    eb10:	d88019c5 	stb	r2,103(sp)
    eb14:	dcc02717 	ldw	r19,156(sp)
    eb18:	dd0019c4 	addi	r20,sp,103
    eb1c:	003d5e06 	br	e098 <__alt_mem_Flash_flash_data+0xf400e098>
    eb20:	dd001a04 	addi	r20,sp,104
    eb24:	003d5c06 	br	e098 <__alt_mem_Flash_flash_data+0xf400e098>
    eb28:	1000971e 	bne	r2,zero,ed88 <___vfiprintf_internal_r+0x10d8>
    eb2c:	d8c01d87 	ldb	r3,118(sp)
    eb30:	18005826 	beq	r3,zero,ec94 <___vfiprintf_internal_r+0xfe4>
    eb34:	00800044 	movi	r2,1
    eb38:	d8c01d84 	addi	r3,sp,118
    eb3c:	1009883a 	mov	r4,r2
    eb40:	d8c00015 	stw	r3,0(sp)
    eb44:	d8800115 	stw	r2,4(sp)
    eb48:	d811883a 	mov	r8,sp
    eb4c:	003f3206 	br	e818 <__alt_mem_Flash_flash_data+0xf400e818>
    eb50:	8023883a 	mov	r17,r16
    eb54:	003ca706 	br	ddf4 <__alt_mem_Flash_flash_data+0xf400ddf4>
    eb58:	d9002017 	ldw	r4,128(sp)
    eb5c:	d9402117 	ldw	r5,132(sp)
    eb60:	d9801a04 	addi	r6,sp,104
    eb64:	000db9c0 	call	db9c <__sprint_r.part.0>
    eb68:	103f7b1e 	bne	r2,zero,e958 <__alt_mem_Flash_flash_data+0xf400e958>
    eb6c:	d8801c17 	ldw	r2,112(sp)
    eb70:	d811883a 	mov	r8,sp
    eb74:	003f9106 	br	e9bc <__alt_mem_Flash_flash_data+0xf400e9bc>
    eb78:	00800084 	movi	r2,2
    eb7c:	b348b03a 	or	r4,r22,r13
    eb80:	003d2906 	br	e028 <__alt_mem_Flash_flash_data+0xf400e028>
    eb84:	d8802217 	ldw	r2,136(sp)
    eb88:	001b883a 	mov	r13,zero
    eb8c:	15800017 	ldw	r22,0(r2)
    eb90:	10800104 	addi	r2,r2,4
    eb94:	d8802215 	stw	r2,136(sp)
    eb98:	003ea706 	br	e638 <__alt_mem_Flash_flash_data+0xf400e638>
    eb9c:	d9002017 	ldw	r4,128(sp)
    eba0:	d9402117 	ldw	r5,132(sp)
    eba4:	d9801a04 	addi	r6,sp,104
    eba8:	000db9c0 	call	db9c <__sprint_r.part.0>
    ebac:	103f6a1e 	bne	r2,zero,e958 <__alt_mem_Flash_flash_data+0xf400e958>
    ebb0:	d811883a 	mov	r8,sp
    ebb4:	003cff06 	br	dfb4 <__alt_mem_Flash_flash_data+0xf400dfb4>
    ebb8:	000b883a 	mov	r5,zero
    ebbc:	1809883a 	mov	r4,r3
    ebc0:	d811883a 	mov	r8,sp
    ebc4:	003d7f06 	br	e1c4 <__alt_mem_Flash_flash_data+0xf400e1c4>
    ebc8:	d9002017 	ldw	r4,128(sp)
    ebcc:	d9402117 	ldw	r5,132(sp)
    ebd0:	d9801a04 	addi	r6,sp,104
    ebd4:	da402b15 	stw	r9,172(sp)
    ebd8:	db402a15 	stw	r13,168(sp)
    ebdc:	000db9c0 	call	db9c <__sprint_r.part.0>
    ebe0:	da402b17 	ldw	r9,172(sp)
    ebe4:	db402a17 	ldw	r13,168(sp)
    ebe8:	103f5b1e 	bne	r2,zero,e958 <__alt_mem_Flash_flash_data+0xf400e958>
    ebec:	d9401b17 	ldw	r5,108(sp)
    ebf0:	d8801c17 	ldw	r2,112(sp)
    ebf4:	d811883a 	mov	r8,sp
    ebf8:	29000044 	addi	r4,r5,1
    ebfc:	003d6406 	br	e190 <__alt_mem_Flash_flash_data+0xf400e190>
    ec00:	d9002017 	ldw	r4,128(sp)
    ec04:	d9402117 	ldw	r5,132(sp)
    ec08:	d9801a04 	addi	r6,sp,104
    ec0c:	da402b15 	stw	r9,172(sp)
    ec10:	000db9c0 	call	db9c <__sprint_r.part.0>
    ec14:	da402b17 	ldw	r9,172(sp)
    ec18:	103f4f1e 	bne	r2,zero,e958 <__alt_mem_Flash_flash_data+0xf400e958>
    ec1c:	d9401b17 	ldw	r5,108(sp)
    ec20:	d8801c17 	ldw	r2,112(sp)
    ec24:	d811883a 	mov	r8,sp
    ec28:	29000044 	addi	r4,r5,1
    ec2c:	003d6506 	br	e1c4 <__alt_mem_Flash_flash_data+0xf400e1c4>
    ec30:	10009a1e 	bne	r2,zero,ee9c <___vfiprintf_internal_r+0x11ec>
    ec34:	01000044 	movi	r4,1
    ec38:	000b883a 	mov	r5,zero
    ec3c:	d811883a 	mov	r8,sp
    ec40:	003d6206 	br	e1cc <__alt_mem_Flash_flash_data+0xf400e1cc>
    ec44:	d9002017 	ldw	r4,128(sp)
    ec48:	d9402117 	ldw	r5,132(sp)
    ec4c:	d9801a04 	addi	r6,sp,104
    ec50:	000db9c0 	call	db9c <__sprint_r.part.0>
    ec54:	103f401e 	bne	r2,zero,e958 <__alt_mem_Flash_flash_data+0xf400e958>
    ec58:	d9001b17 	ldw	r4,108(sp)
    ec5c:	d8801c17 	ldw	r2,112(sp)
    ec60:	d811883a 	mov	r8,sp
    ec64:	21000044 	addi	r4,r4,1
    ec68:	003d7d06 	br	e260 <__alt_mem_Flash_flash_data+0xf400e260>
    ec6c:	05adc83a 	sub	r22,zero,r22
    ec70:	b004c03a 	cmpne	r2,r22,zero
    ec74:	035bc83a 	sub	r13,zero,r13
    ec78:	689bc83a 	sub	r13,r13,r2
    ec7c:	03800b44 	movi	r14,45
    ec80:	db801d85 	stb	r14,118(sp)
    ec84:	4827883a 	mov	r19,r9
    ec88:	00800044 	movi	r2,1
    ec8c:	b348b03a 	or	r4,r22,r13
    ec90:	003ce806 	br	e034 <__alt_mem_Flash_flash_data+0xf400e034>
    ec94:	000b883a 	mov	r5,zero
    ec98:	01000044 	movi	r4,1
    ec9c:	d811883a 	mov	r8,sp
    eca0:	683d4826 	beq	r13,zero,e1c4 <__alt_mem_Flash_flash_data+0xf400e1c4>
    eca4:	00800084 	movi	r2,2
    eca8:	d8c01d04 	addi	r3,sp,116
    ecac:	d8c00015 	stw	r3,0(sp)
    ecb0:	d8800115 	stw	r2,4(sp)
    ecb4:	003d4006 	br	e1b8 <__alt_mem_Flash_flash_data+0xf400e1b8>
    ecb8:	00800084 	movi	r2,2
    ecbc:	003cda06 	br	e028 <__alt_mem_Flash_flash_data+0xf400e028>
    ecc0:	a880100c 	andi	r2,r21,64
    ecc4:	10004226 	beq	r2,zero,edd0 <___vfiprintf_internal_r+0x1120>
    ecc8:	d8802217 	ldw	r2,136(sp)
    eccc:	001b883a 	mov	r13,zero
    ecd0:	1580000b 	ldhu	r22,0(r2)
    ecd4:	10800104 	addi	r2,r2,4
    ecd8:	d8802215 	stw	r2,136(sp)
    ecdc:	b009883a 	mov	r4,r22
    ece0:	0005883a 	mov	r2,zero
    ece4:	003cd006 	br	e028 <__alt_mem_Flash_flash_data+0xf400e028>
    ece8:	80c00007 	ldb	r3,0(r16)
    ecec:	8005883a 	mov	r2,r16
    ecf0:	003c4d06 	br	de28 <__alt_mem_Flash_flash_data+0xf400de28>
    ecf4:	a880100c 	andi	r2,r21,64
    ecf8:	10004426 	beq	r2,zero,ee0c <___vfiprintf_internal_r+0x115c>
    ecfc:	d8c02217 	ldw	r3,136(sp)
    ed00:	001b883a 	mov	r13,zero
    ed04:	00800044 	movi	r2,1
    ed08:	1d80000b 	ldhu	r22,0(r3)
    ed0c:	18c00104 	addi	r3,r3,4
    ed10:	d8c02215 	stw	r3,136(sp)
    ed14:	b009883a 	mov	r4,r22
    ed18:	003cc306 	br	e028 <__alt_mem_Flash_flash_data+0xf400e028>
    ed1c:	a880040c 	andi	r2,r21,16
    ed20:	1000091e 	bne	r2,zero,ed48 <___vfiprintf_internal_r+0x1098>
    ed24:	aac0100c 	andi	r11,r21,64
    ed28:	58000726 	beq	r11,zero,ed48 <___vfiprintf_internal_r+0x1098>
    ed2c:	d8c02217 	ldw	r3,136(sp)
    ed30:	d9002317 	ldw	r4,140(sp)
    ed34:	18800017 	ldw	r2,0(r3)
    ed38:	18c00104 	addi	r3,r3,4
    ed3c:	d8c02215 	stw	r3,136(sp)
    ed40:	1100000d 	sth	r4,0(r2)
    ed44:	003c0e06 	br	dd80 <__alt_mem_Flash_flash_data+0xf400dd80>
    ed48:	d8c02217 	ldw	r3,136(sp)
    ed4c:	d9002317 	ldw	r4,140(sp)
    ed50:	18800017 	ldw	r2,0(r3)
    ed54:	18c00104 	addi	r3,r3,4
    ed58:	d8c02215 	stw	r3,136(sp)
    ed5c:	11000015 	stw	r4,0(r2)
    ed60:	003c0706 	br	dd80 <__alt_mem_Flash_flash_data+0xf400dd80>
    ed64:	a880100c 	andi	r2,r21,64
    ed68:	10002126 	beq	r2,zero,edf0 <___vfiprintf_internal_r+0x1140>
    ed6c:	1d80000f 	ldh	r22,0(r3)
    ed70:	d8c02217 	ldw	r3,136(sp)
    ed74:	b01bd7fa 	srai	r13,r22,31
    ed78:	18c00104 	addi	r3,r3,4
    ed7c:	d8c02215 	stw	r3,136(sp)
    ed80:	6805883a 	mov	r2,r13
    ed84:	003dc406 	br	e498 <__alt_mem_Flash_flash_data+0xf400e498>
    ed88:	d9002017 	ldw	r4,128(sp)
    ed8c:	d9402117 	ldw	r5,132(sp)
    ed90:	d9801a04 	addi	r6,sp,104
    ed94:	da402b15 	stw	r9,172(sp)
    ed98:	db402a15 	stw	r13,168(sp)
    ed9c:	000db9c0 	call	db9c <__sprint_r.part.0>
    eda0:	da402b17 	ldw	r9,172(sp)
    eda4:	db402a17 	ldw	r13,168(sp)
    eda8:	103eeb1e 	bne	r2,zero,e958 <__alt_mem_Flash_flash_data+0xf400e958>
    edac:	d9401b17 	ldw	r5,108(sp)
    edb0:	d8801c17 	ldw	r2,112(sp)
    edb4:	d811883a 	mov	r8,sp
    edb8:	29000044 	addi	r4,r5,1
    edbc:	003e8b06 	br	e7ec <__alt_mem_Flash_flash_data+0xf400e7ec>
    edc0:	9023883a 	mov	r17,r18
    edc4:	003d5a06 	br	e330 <__alt_mem_Flash_flash_data+0xf400e330>
    edc8:	4827883a 	mov	r19,r9
    edcc:	003e3506 	br	e6a4 <__alt_mem_Flash_flash_data+0xf400e6a4>
    edd0:	d8c02217 	ldw	r3,136(sp)
    edd4:	001b883a 	mov	r13,zero
    edd8:	0005883a 	mov	r2,zero
    eddc:	1d800017 	ldw	r22,0(r3)
    ede0:	18c00104 	addi	r3,r3,4
    ede4:	d8c02215 	stw	r3,136(sp)
    ede8:	b009883a 	mov	r4,r22
    edec:	003c8e06 	br	e028 <__alt_mem_Flash_flash_data+0xf400e028>
    edf0:	1d800017 	ldw	r22,0(r3)
    edf4:	d9002217 	ldw	r4,136(sp)
    edf8:	b01bd7fa 	srai	r13,r22,31
    edfc:	21000104 	addi	r4,r4,4
    ee00:	d9002215 	stw	r4,136(sp)
    ee04:	6805883a 	mov	r2,r13
    ee08:	003da306 	br	e498 <__alt_mem_Flash_flash_data+0xf400e498>
    ee0c:	d9002217 	ldw	r4,136(sp)
    ee10:	001b883a 	mov	r13,zero
    ee14:	00800044 	movi	r2,1
    ee18:	25800017 	ldw	r22,0(r4)
    ee1c:	21000104 	addi	r4,r4,4
    ee20:	d9002215 	stw	r4,136(sp)
    ee24:	b009883a 	mov	r4,r22
    ee28:	003c7f06 	br	e028 <__alt_mem_Flash_flash_data+0xf400e028>
    ee2c:	00c000b4 	movhi	r3,2
    ee30:	18c0ef04 	addi	r3,r3,956
    ee34:	d8c02415 	stw	r3,144(sp)
    ee38:	003cff06 	br	e238 <__alt_mem_Flash_flash_data+0xf400e238>
    ee3c:	d8801c17 	ldw	r2,112(sp)
    ee40:	dd402117 	ldw	r21,132(sp)
    ee44:	103ec526 	beq	r2,zero,e95c <__alt_mem_Flash_flash_data+0xf400e95c>
    ee48:	d9002017 	ldw	r4,128(sp)
    ee4c:	a80b883a 	mov	r5,r21
    ee50:	d9801a04 	addi	r6,sp,104
    ee54:	000db9c0 	call	db9c <__sprint_r.part.0>
    ee58:	003ec006 	br	e95c <__alt_mem_Flash_flash_data+0xf400e95c>
    ee5c:	80800044 	addi	r2,r16,1
    ee60:	ad400814 	ori	r21,r21,32
    ee64:	80c00047 	ldb	r3,1(r16)
    ee68:	003bef06 	br	de28 <__alt_mem_Flash_flash_data+0xf400de28>
    ee6c:	04a5c83a 	sub	r18,zero,r18
    ee70:	8005883a 	mov	r2,r16
    ee74:	d8c02215 	stw	r3,136(sp)
    ee78:	003d5306 	br	e3c8 <__alt_mem_Flash_flash_data+0xf400e3c8>
    ee7c:	da002a15 	stw	r8,168(sp)
    ee80:	00037a40 	call	37a4 <strlen>
    ee84:	1027883a 	mov	r19,r2
    ee88:	db801d83 	ldbu	r14,118(sp)
    ee8c:	dd802215 	stw	r22,136(sp)
    ee90:	0013883a 	mov	r9,zero
    ee94:	da002a17 	ldw	r8,168(sp)
    ee98:	003c7f06 	br	e098 <__alt_mem_Flash_flash_data+0xf400e098>
    ee9c:	d9002017 	ldw	r4,128(sp)
    eea0:	d9402117 	ldw	r5,132(sp)
    eea4:	d9801a04 	addi	r6,sp,104
    eea8:	da402b15 	stw	r9,172(sp)
    eeac:	000db9c0 	call	db9c <__sprint_r.part.0>
    eeb0:	da402b17 	ldw	r9,172(sp)
    eeb4:	103ea81e 	bne	r2,zero,e958 <__alt_mem_Flash_flash_data+0xf400e958>
    eeb8:	d9401b17 	ldw	r5,108(sp)
    eebc:	d8801c17 	ldw	r2,112(sp)
    eec0:	d811883a 	mov	r8,sp
    eec4:	29000044 	addi	r4,r5,1
    eec8:	003cc006 	br	e1cc <__alt_mem_Flash_flash_data+0xf400e1cc>
    eecc:	d9401b17 	ldw	r5,108(sp)
    eed0:	010000b4 	movhi	r4,2
    eed4:	2100f304 	addi	r4,r4,972
    eed8:	d9002415 	stw	r4,144(sp)
    eedc:	29400044 	addi	r5,r5,1
    eee0:	003c9f06 	br	e160 <__alt_mem_Flash_flash_data+0xf400e160>
    eee4:	00800184 	movi	r2,6
    eee8:	1240012e 	bgeu	r2,r9,eef0 <___vfiprintf_internal_r+0x1240>
    eeec:	1013883a 	mov	r9,r2
    eef0:	4827883a 	mov	r19,r9
    eef4:	4823883a 	mov	r17,r9
    eef8:	48001116 	blt	r9,zero,ef40 <___vfiprintf_internal_r+0x1290>
    eefc:	050000b4 	movhi	r20,2
    ef00:	dd802215 	stw	r22,136(sp)
    ef04:	a5008304 	addi	r20,r20,524
    ef08:	003db106 	br	e5d0 <__alt_mem_Flash_flash_data+0xf400e5d0>
    ef0c:	d9401b17 	ldw	r5,108(sp)
    ef10:	010000b4 	movhi	r4,2
    ef14:	2100f304 	addi	r4,r4,972
    ef18:	d9002415 	stw	r4,144(sp)
    ef1c:	29400044 	addi	r5,r5,1
    ef20:	003cf906 	br	e308 <__alt_mem_Flash_flash_data+0xf400e308>
    ef24:	4827883a 	mov	r19,r9
    ef28:	db801d83 	ldbu	r14,118(sp)
    ef2c:	dd802215 	stw	r22,136(sp)
    ef30:	0013883a 	mov	r9,zero
    ef34:	003c5806 	br	e098 <__alt_mem_Flash_flash_data+0xf400e098>
    ef38:	200d883a 	mov	r6,r4
    ef3c:	003ec706 	br	ea5c <__alt_mem_Flash_flash_data+0xf400ea5c>
    ef40:	0023883a 	mov	r17,zero
    ef44:	003fed06 	br	eefc <__alt_mem_Flash_flash_data+0xf400eefc>
    ef48:	d9002217 	ldw	r4,136(sp)
    ef4c:	22400017 	ldw	r9,0(r4)
    ef50:	20c00104 	addi	r3,r4,4
    ef54:	d8c02215 	stw	r3,136(sp)
    ef58:	483fc20e 	bge	r9,zero,ee64 <__alt_mem_Flash_flash_data+0xf400ee64>
    ef5c:	027fffc4 	movi	r9,-1
    ef60:	80c00047 	ldb	r3,1(r16)
    ef64:	003bb006 	br	de28 <__alt_mem_Flash_flash_data+0xf400de28>
    ef68:	8c80010e 	bge	r17,r18,ef70 <___vfiprintf_internal_r+0x12c0>
    ef6c:	9023883a 	mov	r17,r18
    ef70:	d8802317 	ldw	r2,140(sp)
    ef74:	1445883a 	add	r2,r2,r17
    ef78:	d8802315 	stw	r2,140(sp)
    ef7c:	003cef06 	br	e33c <__alt_mem_Flash_flash_data+0xf400e33c>

0000ef80 <__vfiprintf_internal>:
    ef80:	2007883a 	mov	r3,r4
    ef84:	010000b4 	movhi	r4,2
    ef88:	21099904 	addi	r4,r4,9828
    ef8c:	21000017 	ldw	r4,0(r4)
    ef90:	2805883a 	mov	r2,r5
    ef94:	300f883a 	mov	r7,r6
    ef98:	180b883a 	mov	r5,r3
    ef9c:	100d883a 	mov	r6,r2
    efa0:	000dcb01 	jmpi	dcb0 <___vfiprintf_internal_r>

0000efa4 <__sbprintf>:
    efa4:	2880030b 	ldhu	r2,12(r5)
    efa8:	2ac01917 	ldw	r11,100(r5)
    efac:	2a80038b 	ldhu	r10,14(r5)
    efb0:	2a400717 	ldw	r9,28(r5)
    efb4:	2a000917 	ldw	r8,36(r5)
    efb8:	defee204 	addi	sp,sp,-1144
    efbc:	00c10004 	movi	r3,1024
    efc0:	dc011a15 	stw	r16,1128(sp)
    efc4:	10bfff4c 	andi	r2,r2,65533
    efc8:	2821883a 	mov	r16,r5
    efcc:	d8cb883a 	add	r5,sp,r3
    efd0:	dc811c15 	stw	r18,1136(sp)
    efd4:	dc411b15 	stw	r17,1132(sp)
    efd8:	dfc11d15 	stw	ra,1140(sp)
    efdc:	2025883a 	mov	r18,r4
    efe0:	d881030d 	sth	r2,1036(sp)
    efe4:	dac11915 	stw	r11,1124(sp)
    efe8:	da81038d 	sth	r10,1038(sp)
    efec:	da410715 	stw	r9,1052(sp)
    eff0:	da010915 	stw	r8,1060(sp)
    eff4:	dec10015 	stw	sp,1024(sp)
    eff8:	dec10415 	stw	sp,1040(sp)
    effc:	d8c10215 	stw	r3,1032(sp)
    f000:	d8c10515 	stw	r3,1044(sp)
    f004:	d8010615 	stw	zero,1048(sp)
    f008:	000dcb00 	call	dcb0 <___vfiprintf_internal_r>
    f00c:	1023883a 	mov	r17,r2
    f010:	10000416 	blt	r2,zero,f024 <__sbprintf+0x80>
    f014:	9009883a 	mov	r4,r18
    f018:	d9410004 	addi	r5,sp,1024
    f01c:	00094800 	call	9480 <_fflush_r>
    f020:	10000d1e 	bne	r2,zero,f058 <__sbprintf+0xb4>
    f024:	d8c1030b 	ldhu	r3,1036(sp)
    f028:	18c0100c 	andi	r3,r3,64
    f02c:	18000326 	beq	r3,zero,f03c <__sbprintf+0x98>
    f030:	8080030b 	ldhu	r2,12(r16)
    f034:	10801014 	ori	r2,r2,64
    f038:	8080030d 	sth	r2,12(r16)
    f03c:	8805883a 	mov	r2,r17
    f040:	dfc11d17 	ldw	ra,1140(sp)
    f044:	dc811c17 	ldw	r18,1136(sp)
    f048:	dc411b17 	ldw	r17,1132(sp)
    f04c:	dc011a17 	ldw	r16,1128(sp)
    f050:	dec11e04 	addi	sp,sp,1144
    f054:	f800283a 	ret
    f058:	047fffc4 	movi	r17,-1
    f05c:	003ff106 	br	f024 <__alt_mem_Flash_flash_data+0xf400f024>

0000f060 <_write_r>:
    f060:	defffd04 	addi	sp,sp,-12
    f064:	dc000015 	stw	r16,0(sp)
    f068:	040000b4 	movhi	r16,2
    f06c:	dc400115 	stw	r17,4(sp)
    f070:	8411bd04 	addi	r16,r16,18164
    f074:	2023883a 	mov	r17,r4
    f078:	2809883a 	mov	r4,r5
    f07c:	300b883a 	mov	r5,r6
    f080:	380d883a 	mov	r6,r7
    f084:	dfc00215 	stw	ra,8(sp)
    f088:	80000015 	stw	zero,0(r16)
    f08c:	001349c0 	call	1349c <write>
    f090:	00ffffc4 	movi	r3,-1
    f094:	10c00526 	beq	r2,r3,f0ac <_write_r+0x4c>
    f098:	dfc00217 	ldw	ra,8(sp)
    f09c:	dc400117 	ldw	r17,4(sp)
    f0a0:	dc000017 	ldw	r16,0(sp)
    f0a4:	dec00304 	addi	sp,sp,12
    f0a8:	f800283a 	ret
    f0ac:	80c00017 	ldw	r3,0(r16)
    f0b0:	183ff926 	beq	r3,zero,f098 <__alt_mem_Flash_flash_data+0xf400f098>
    f0b4:	88c00015 	stw	r3,0(r17)
    f0b8:	003ff706 	br	f098 <__alt_mem_Flash_flash_data+0xf400f098>

0000f0bc <_close_r>:
    f0bc:	defffd04 	addi	sp,sp,-12
    f0c0:	dc000015 	stw	r16,0(sp)
    f0c4:	040000b4 	movhi	r16,2
    f0c8:	dc400115 	stw	r17,4(sp)
    f0cc:	8411bd04 	addi	r16,r16,18164
    f0d0:	2023883a 	mov	r17,r4
    f0d4:	2809883a 	mov	r4,r5
    f0d8:	dfc00215 	stw	ra,8(sp)
    f0dc:	80000015 	stw	zero,0(r16)
    f0e0:	0012c240 	call	12c24 <close>
    f0e4:	00ffffc4 	movi	r3,-1
    f0e8:	10c00526 	beq	r2,r3,f100 <_close_r+0x44>
    f0ec:	dfc00217 	ldw	ra,8(sp)
    f0f0:	dc400117 	ldw	r17,4(sp)
    f0f4:	dc000017 	ldw	r16,0(sp)
    f0f8:	dec00304 	addi	sp,sp,12
    f0fc:	f800283a 	ret
    f100:	80c00017 	ldw	r3,0(r16)
    f104:	183ff926 	beq	r3,zero,f0ec <__alt_mem_Flash_flash_data+0xf400f0ec>
    f108:	88c00015 	stw	r3,0(r17)
    f10c:	003ff706 	br	f0ec <__alt_mem_Flash_flash_data+0xf400f0ec>

0000f110 <_calloc_r>:
    f110:	298b383a 	mul	r5,r5,r6
    f114:	defffe04 	addi	sp,sp,-8
    f118:	dc000015 	stw	r16,0(sp)
    f11c:	dfc00115 	stw	ra,4(sp)
    f120:	000a5a00 	call	a5a0 <_malloc_r>
    f124:	1021883a 	mov	r16,r2
    f128:	10002826 	beq	r2,zero,f1cc <_calloc_r+0xbc>
    f12c:	11bfff17 	ldw	r6,-4(r2)
    f130:	00bfff04 	movi	r2,-4
    f134:	00c00904 	movi	r3,36
    f138:	308c703a 	and	r6,r6,r2
    f13c:	308d883a 	add	r6,r6,r2
    f140:	19801436 	bltu	r3,r6,f194 <_calloc_r+0x84>
    f144:	008004c4 	movi	r2,19
    f148:	11800936 	bltu	r2,r6,f170 <_calloc_r+0x60>
    f14c:	8005883a 	mov	r2,r16
    f150:	10000015 	stw	zero,0(r2)
    f154:	10000115 	stw	zero,4(r2)
    f158:	10000215 	stw	zero,8(r2)
    f15c:	8005883a 	mov	r2,r16
    f160:	dfc00117 	ldw	ra,4(sp)
    f164:	dc000017 	ldw	r16,0(sp)
    f168:	dec00204 	addi	sp,sp,8
    f16c:	f800283a 	ret
    f170:	80000015 	stw	zero,0(r16)
    f174:	80000115 	stw	zero,4(r16)
    f178:	008006c4 	movi	r2,27
    f17c:	11800d2e 	bgeu	r2,r6,f1b4 <_calloc_r+0xa4>
    f180:	80000215 	stw	zero,8(r16)
    f184:	80000315 	stw	zero,12(r16)
    f188:	30c00c26 	beq	r6,r3,f1bc <_calloc_r+0xac>
    f18c:	80800404 	addi	r2,r16,16
    f190:	003fef06 	br	f150 <__alt_mem_Flash_flash_data+0xf400f150>
    f194:	8009883a 	mov	r4,r16
    f198:	000b883a 	mov	r5,zero
    f19c:	000b0c40 	call	b0c4 <memset>
    f1a0:	8005883a 	mov	r2,r16
    f1a4:	dfc00117 	ldw	ra,4(sp)
    f1a8:	dc000017 	ldw	r16,0(sp)
    f1ac:	dec00204 	addi	sp,sp,8
    f1b0:	f800283a 	ret
    f1b4:	80800204 	addi	r2,r16,8
    f1b8:	003fe506 	br	f150 <__alt_mem_Flash_flash_data+0xf400f150>
    f1bc:	80000415 	stw	zero,16(r16)
    f1c0:	80800604 	addi	r2,r16,24
    f1c4:	80000515 	stw	zero,20(r16)
    f1c8:	003fe106 	br	f150 <__alt_mem_Flash_flash_data+0xf400f150>
    f1cc:	0005883a 	mov	r2,zero
    f1d0:	003fe306 	br	f160 <__alt_mem_Flash_flash_data+0xf400f160>

0000f1d4 <_fclose_r>:
    f1d4:	28003926 	beq	r5,zero,f2bc <_fclose_r+0xe8>
    f1d8:	defffc04 	addi	sp,sp,-16
    f1dc:	dc400115 	stw	r17,4(sp)
    f1e0:	dc000015 	stw	r16,0(sp)
    f1e4:	dfc00315 	stw	ra,12(sp)
    f1e8:	dc800215 	stw	r18,8(sp)
    f1ec:	2023883a 	mov	r17,r4
    f1f0:	2821883a 	mov	r16,r5
    f1f4:	20000226 	beq	r4,zero,f200 <_fclose_r+0x2c>
    f1f8:	20800e17 	ldw	r2,56(r4)
    f1fc:	10002726 	beq	r2,zero,f29c <_fclose_r+0xc8>
    f200:	8080030f 	ldh	r2,12(r16)
    f204:	1000071e 	bne	r2,zero,f224 <_fclose_r+0x50>
    f208:	0005883a 	mov	r2,zero
    f20c:	dfc00317 	ldw	ra,12(sp)
    f210:	dc800217 	ldw	r18,8(sp)
    f214:	dc400117 	ldw	r17,4(sp)
    f218:	dc000017 	ldw	r16,0(sp)
    f21c:	dec00404 	addi	sp,sp,16
    f220:	f800283a 	ret
    f224:	8809883a 	mov	r4,r17
    f228:	800b883a 	mov	r5,r16
    f22c:	00092780 	call	9278 <__sflush_r>
    f230:	1025883a 	mov	r18,r2
    f234:	80800b17 	ldw	r2,44(r16)
    f238:	10000426 	beq	r2,zero,f24c <_fclose_r+0x78>
    f23c:	81400717 	ldw	r5,28(r16)
    f240:	8809883a 	mov	r4,r17
    f244:	103ee83a 	callr	r2
    f248:	10001616 	blt	r2,zero,f2a4 <_fclose_r+0xd0>
    f24c:	8080030b 	ldhu	r2,12(r16)
    f250:	1080200c 	andi	r2,r2,128
    f254:	1000151e 	bne	r2,zero,f2ac <_fclose_r+0xd8>
    f258:	81400c17 	ldw	r5,48(r16)
    f25c:	28000526 	beq	r5,zero,f274 <_fclose_r+0xa0>
    f260:	80801004 	addi	r2,r16,64
    f264:	28800226 	beq	r5,r2,f270 <_fclose_r+0x9c>
    f268:	8809883a 	mov	r4,r17
    f26c:	00099d00 	call	99d0 <_free_r>
    f270:	80000c15 	stw	zero,48(r16)
    f274:	81401117 	ldw	r5,68(r16)
    f278:	28000326 	beq	r5,zero,f288 <_fclose_r+0xb4>
    f27c:	8809883a 	mov	r4,r17
    f280:	00099d00 	call	99d0 <_free_r>
    f284:	80001115 	stw	zero,68(r16)
    f288:	000986c0 	call	986c <__sfp_lock_acquire>
    f28c:	8000030d 	sth	zero,12(r16)
    f290:	00098700 	call	9870 <__sfp_lock_release>
    f294:	9005883a 	mov	r2,r18
    f298:	003fdc06 	br	f20c <__alt_mem_Flash_flash_data+0xf400f20c>
    f29c:	000985c0 	call	985c <__sinit>
    f2a0:	003fd706 	br	f200 <__alt_mem_Flash_flash_data+0xf400f200>
    f2a4:	04bfffc4 	movi	r18,-1
    f2a8:	003fe806 	br	f24c <__alt_mem_Flash_flash_data+0xf400f24c>
    f2ac:	81400417 	ldw	r5,16(r16)
    f2b0:	8809883a 	mov	r4,r17
    f2b4:	00099d00 	call	99d0 <_free_r>
    f2b8:	003fe706 	br	f258 <__alt_mem_Flash_flash_data+0xf400f258>
    f2bc:	0005883a 	mov	r2,zero
    f2c0:	f800283a 	ret

0000f2c4 <fclose>:
    f2c4:	008000b4 	movhi	r2,2
    f2c8:	10899904 	addi	r2,r2,9828
    f2cc:	200b883a 	mov	r5,r4
    f2d0:	11000017 	ldw	r4,0(r2)
    f2d4:	000f1d41 	jmpi	f1d4 <_fclose_r>

0000f2d8 <_fputwc_r>:
    f2d8:	3080030b 	ldhu	r2,12(r6)
    f2dc:	defff804 	addi	sp,sp,-32
    f2e0:	dcc00415 	stw	r19,16(sp)
    f2e4:	dc800315 	stw	r18,12(sp)
    f2e8:	dc000115 	stw	r16,4(sp)
    f2ec:	dfc00715 	stw	ra,28(sp)
    f2f0:	dd400615 	stw	r21,24(sp)
    f2f4:	dd000515 	stw	r20,20(sp)
    f2f8:	dc400215 	stw	r17,8(sp)
    f2fc:	10c8000c 	andi	r3,r2,8192
    f300:	3021883a 	mov	r16,r6
    f304:	2027883a 	mov	r19,r4
    f308:	2825883a 	mov	r18,r5
    f30c:	1800051e 	bne	r3,zero,f324 <_fputwc_r+0x4c>
    f310:	30c01917 	ldw	r3,100(r6)
    f314:	10880014 	ori	r2,r2,8192
    f318:	3080030d 	sth	r2,12(r6)
    f31c:	18880014 	ori	r2,r3,8192
    f320:	30801915 	stw	r2,100(r6)
    f324:	000a3900 	call	a390 <__locale_mb_cur_max>
    f328:	00c00044 	movi	r3,1
    f32c:	10c03e26 	beq	r2,r3,f428 <_fputwc_r+0x150>
    f330:	9809883a 	mov	r4,r19
    f334:	d80b883a 	mov	r5,sp
    f338:	900d883a 	mov	r6,r18
    f33c:	81c01704 	addi	r7,r16,92
    f340:	000f7700 	call	f770 <_wcrtomb_r>
    f344:	1029883a 	mov	r20,r2
    f348:	00bfffc4 	movi	r2,-1
    f34c:	a0802026 	beq	r20,r2,f3d0 <_fputwc_r+0xf8>
    f350:	d9400003 	ldbu	r5,0(sp)
    f354:	a0001c26 	beq	r20,zero,f3c8 <_fputwc_r+0xf0>
    f358:	0023883a 	mov	r17,zero
    f35c:	05400284 	movi	r21,10
    f360:	00000906 	br	f388 <_fputwc_r+0xb0>
    f364:	80800017 	ldw	r2,0(r16)
    f368:	11400005 	stb	r5,0(r2)
    f36c:	80c00017 	ldw	r3,0(r16)
    f370:	18c00044 	addi	r3,r3,1
    f374:	80c00015 	stw	r3,0(r16)
    f378:	8c400044 	addi	r17,r17,1
    f37c:	dc45883a 	add	r2,sp,r17
    f380:	8d00112e 	bgeu	r17,r20,f3c8 <_fputwc_r+0xf0>
    f384:	11400003 	ldbu	r5,0(r2)
    f388:	80c00217 	ldw	r3,8(r16)
    f38c:	18ffffc4 	addi	r3,r3,-1
    f390:	80c00215 	stw	r3,8(r16)
    f394:	183ff30e 	bge	r3,zero,f364 <__alt_mem_Flash_flash_data+0xf400f364>
    f398:	80800617 	ldw	r2,24(r16)
    f39c:	18801916 	blt	r3,r2,f404 <_fputwc_r+0x12c>
    f3a0:	80800017 	ldw	r2,0(r16)
    f3a4:	11400005 	stb	r5,0(r2)
    f3a8:	80800017 	ldw	r2,0(r16)
    f3ac:	10c00003 	ldbu	r3,0(r2)
    f3b0:	10800044 	addi	r2,r2,1
    f3b4:	1d402326 	beq	r3,r21,f444 <_fputwc_r+0x16c>
    f3b8:	80800015 	stw	r2,0(r16)
    f3bc:	8c400044 	addi	r17,r17,1
    f3c0:	dc45883a 	add	r2,sp,r17
    f3c4:	8d3fef36 	bltu	r17,r20,f384 <__alt_mem_Flash_flash_data+0xf400f384>
    f3c8:	9005883a 	mov	r2,r18
    f3cc:	00000406 	br	f3e0 <_fputwc_r+0x108>
    f3d0:	80c0030b 	ldhu	r3,12(r16)
    f3d4:	a005883a 	mov	r2,r20
    f3d8:	18c01014 	ori	r3,r3,64
    f3dc:	80c0030d 	sth	r3,12(r16)
    f3e0:	dfc00717 	ldw	ra,28(sp)
    f3e4:	dd400617 	ldw	r21,24(sp)
    f3e8:	dd000517 	ldw	r20,20(sp)
    f3ec:	dcc00417 	ldw	r19,16(sp)
    f3f0:	dc800317 	ldw	r18,12(sp)
    f3f4:	dc400217 	ldw	r17,8(sp)
    f3f8:	dc000117 	ldw	r16,4(sp)
    f3fc:	dec00804 	addi	sp,sp,32
    f400:	f800283a 	ret
    f404:	9809883a 	mov	r4,r19
    f408:	29403fcc 	andi	r5,r5,255
    f40c:	800d883a 	mov	r6,r16
    f410:	000f61c0 	call	f61c <__swbuf_r>
    f414:	10bfffe0 	cmpeqi	r2,r2,-1
    f418:	10803fcc 	andi	r2,r2,255
    f41c:	103fd626 	beq	r2,zero,f378 <__alt_mem_Flash_flash_data+0xf400f378>
    f420:	00bfffc4 	movi	r2,-1
    f424:	003fee06 	br	f3e0 <__alt_mem_Flash_flash_data+0xf400f3e0>
    f428:	90ffffc4 	addi	r3,r18,-1
    f42c:	01003f84 	movi	r4,254
    f430:	20ffbf36 	bltu	r4,r3,f330 <__alt_mem_Flash_flash_data+0xf400f330>
    f434:	900b883a 	mov	r5,r18
    f438:	dc800005 	stb	r18,0(sp)
    f43c:	1029883a 	mov	r20,r2
    f440:	003fc506 	br	f358 <__alt_mem_Flash_flash_data+0xf400f358>
    f444:	9809883a 	mov	r4,r19
    f448:	a80b883a 	mov	r5,r21
    f44c:	800d883a 	mov	r6,r16
    f450:	000f61c0 	call	f61c <__swbuf_r>
    f454:	10bfffe0 	cmpeqi	r2,r2,-1
    f458:	003fef06 	br	f418 <__alt_mem_Flash_flash_data+0xf400f418>

0000f45c <fputwc>:
    f45c:	008000b4 	movhi	r2,2
    f460:	defffc04 	addi	sp,sp,-16
    f464:	10899904 	addi	r2,r2,9828
    f468:	dc000115 	stw	r16,4(sp)
    f46c:	14000017 	ldw	r16,0(r2)
    f470:	dc400215 	stw	r17,8(sp)
    f474:	dfc00315 	stw	ra,12(sp)
    f478:	2023883a 	mov	r17,r4
    f47c:	280d883a 	mov	r6,r5
    f480:	80000626 	beq	r16,zero,f49c <fputwc+0x40>
    f484:	80800e17 	ldw	r2,56(r16)
    f488:	1000041e 	bne	r2,zero,f49c <fputwc+0x40>
    f48c:	8009883a 	mov	r4,r16
    f490:	d9400015 	stw	r5,0(sp)
    f494:	000985c0 	call	985c <__sinit>
    f498:	d9800017 	ldw	r6,0(sp)
    f49c:	8009883a 	mov	r4,r16
    f4a0:	880b883a 	mov	r5,r17
    f4a4:	dfc00317 	ldw	ra,12(sp)
    f4a8:	dc400217 	ldw	r17,8(sp)
    f4ac:	dc000117 	ldw	r16,4(sp)
    f4b0:	dec00404 	addi	sp,sp,16
    f4b4:	000f2d81 	jmpi	f2d8 <_fputwc_r>

0000f4b8 <_fstat_r>:
    f4b8:	defffd04 	addi	sp,sp,-12
    f4bc:	dc000015 	stw	r16,0(sp)
    f4c0:	040000b4 	movhi	r16,2
    f4c4:	dc400115 	stw	r17,4(sp)
    f4c8:	8411bd04 	addi	r16,r16,18164
    f4cc:	2023883a 	mov	r17,r4
    f4d0:	2809883a 	mov	r4,r5
    f4d4:	300b883a 	mov	r5,r6
    f4d8:	dfc00215 	stw	ra,8(sp)
    f4dc:	80000015 	stw	zero,0(r16)
    f4e0:	0012d700 	call	12d70 <fstat>
    f4e4:	00ffffc4 	movi	r3,-1
    f4e8:	10c00526 	beq	r2,r3,f500 <_fstat_r+0x48>
    f4ec:	dfc00217 	ldw	ra,8(sp)
    f4f0:	dc400117 	ldw	r17,4(sp)
    f4f4:	dc000017 	ldw	r16,0(sp)
    f4f8:	dec00304 	addi	sp,sp,12
    f4fc:	f800283a 	ret
    f500:	80c00017 	ldw	r3,0(r16)
    f504:	183ff926 	beq	r3,zero,f4ec <__alt_mem_Flash_flash_data+0xf400f4ec>
    f508:	88c00015 	stw	r3,0(r17)
    f50c:	003ff706 	br	f4ec <__alt_mem_Flash_flash_data+0xf400f4ec>

0000f510 <_isatty_r>:
    f510:	defffd04 	addi	sp,sp,-12
    f514:	dc000015 	stw	r16,0(sp)
    f518:	040000b4 	movhi	r16,2
    f51c:	dc400115 	stw	r17,4(sp)
    f520:	8411bd04 	addi	r16,r16,18164
    f524:	2023883a 	mov	r17,r4
    f528:	2809883a 	mov	r4,r5
    f52c:	dfc00215 	stw	ra,8(sp)
    f530:	80000015 	stw	zero,0(r16)
    f534:	0012e700 	call	12e70 <isatty>
    f538:	00ffffc4 	movi	r3,-1
    f53c:	10c00526 	beq	r2,r3,f554 <_isatty_r+0x44>
    f540:	dfc00217 	ldw	ra,8(sp)
    f544:	dc400117 	ldw	r17,4(sp)
    f548:	dc000017 	ldw	r16,0(sp)
    f54c:	dec00304 	addi	sp,sp,12
    f550:	f800283a 	ret
    f554:	80c00017 	ldw	r3,0(r16)
    f558:	183ff926 	beq	r3,zero,f540 <__alt_mem_Flash_flash_data+0xf400f540>
    f55c:	88c00015 	stw	r3,0(r17)
    f560:	003ff706 	br	f540 <__alt_mem_Flash_flash_data+0xf400f540>

0000f564 <_lseek_r>:
    f564:	defffd04 	addi	sp,sp,-12
    f568:	dc000015 	stw	r16,0(sp)
    f56c:	040000b4 	movhi	r16,2
    f570:	dc400115 	stw	r17,4(sp)
    f574:	8411bd04 	addi	r16,r16,18164
    f578:	2023883a 	mov	r17,r4
    f57c:	2809883a 	mov	r4,r5
    f580:	300b883a 	mov	r5,r6
    f584:	380d883a 	mov	r6,r7
    f588:	dfc00215 	stw	ra,8(sp)
    f58c:	80000015 	stw	zero,0(r16)
    f590:	00130480 	call	13048 <lseek>
    f594:	00ffffc4 	movi	r3,-1
    f598:	10c00526 	beq	r2,r3,f5b0 <_lseek_r+0x4c>
    f59c:	dfc00217 	ldw	ra,8(sp)
    f5a0:	dc400117 	ldw	r17,4(sp)
    f5a4:	dc000017 	ldw	r16,0(sp)
    f5a8:	dec00304 	addi	sp,sp,12
    f5ac:	f800283a 	ret
    f5b0:	80c00017 	ldw	r3,0(r16)
    f5b4:	183ff926 	beq	r3,zero,f59c <__alt_mem_Flash_flash_data+0xf400f59c>
    f5b8:	88c00015 	stw	r3,0(r17)
    f5bc:	003ff706 	br	f59c <__alt_mem_Flash_flash_data+0xf400f59c>

0000f5c0 <_read_r>:
    f5c0:	defffd04 	addi	sp,sp,-12
    f5c4:	dc000015 	stw	r16,0(sp)
    f5c8:	040000b4 	movhi	r16,2
    f5cc:	dc400115 	stw	r17,4(sp)
    f5d0:	8411bd04 	addi	r16,r16,18164
    f5d4:	2023883a 	mov	r17,r4
    f5d8:	2809883a 	mov	r4,r5
    f5dc:	300b883a 	mov	r5,r6
    f5e0:	380d883a 	mov	r6,r7
    f5e4:	dfc00215 	stw	ra,8(sp)
    f5e8:	80000015 	stw	zero,0(r16)
    f5ec:	00132400 	call	13240 <read>
    f5f0:	00ffffc4 	movi	r3,-1
    f5f4:	10c00526 	beq	r2,r3,f60c <_read_r+0x4c>
    f5f8:	dfc00217 	ldw	ra,8(sp)
    f5fc:	dc400117 	ldw	r17,4(sp)
    f600:	dc000017 	ldw	r16,0(sp)
    f604:	dec00304 	addi	sp,sp,12
    f608:	f800283a 	ret
    f60c:	80c00017 	ldw	r3,0(r16)
    f610:	183ff926 	beq	r3,zero,f5f8 <__alt_mem_Flash_flash_data+0xf400f5f8>
    f614:	88c00015 	stw	r3,0(r17)
    f618:	003ff706 	br	f5f8 <__alt_mem_Flash_flash_data+0xf400f5f8>

0000f61c <__swbuf_r>:
    f61c:	defffc04 	addi	sp,sp,-16
    f620:	dc800215 	stw	r18,8(sp)
    f624:	dc400115 	stw	r17,4(sp)
    f628:	dc000015 	stw	r16,0(sp)
    f62c:	dfc00315 	stw	ra,12(sp)
    f630:	2025883a 	mov	r18,r4
    f634:	2823883a 	mov	r17,r5
    f638:	3021883a 	mov	r16,r6
    f63c:	20000226 	beq	r4,zero,f648 <__swbuf_r+0x2c>
    f640:	20800e17 	ldw	r2,56(r4)
    f644:	10004126 	beq	r2,zero,f74c <__swbuf_r+0x130>
    f648:	80c00617 	ldw	r3,24(r16)
    f64c:	8180030b 	ldhu	r6,12(r16)
    f650:	80c00215 	stw	r3,8(r16)
    f654:	30c0020c 	andi	r3,r6,8
    f658:	18003526 	beq	r3,zero,f730 <__swbuf_r+0x114>
    f65c:	80c00417 	ldw	r3,16(r16)
    f660:	18003326 	beq	r3,zero,f730 <__swbuf_r+0x114>
    f664:	3088000c 	andi	r2,r6,8192
    f668:	8c403fcc 	andi	r17,r17,255
    f66c:	10001726 	beq	r2,zero,f6cc <__swbuf_r+0xb0>
    f670:	80800017 	ldw	r2,0(r16)
    f674:	81000517 	ldw	r4,20(r16)
    f678:	10c7c83a 	sub	r3,r2,r3
    f67c:	19001d0e 	bge	r3,r4,f6f4 <__swbuf_r+0xd8>
    f680:	18c00044 	addi	r3,r3,1
    f684:	81400217 	ldw	r5,8(r16)
    f688:	11000044 	addi	r4,r2,1
    f68c:	81000015 	stw	r4,0(r16)
    f690:	297fffc4 	addi	r5,r5,-1
    f694:	81400215 	stw	r5,8(r16)
    f698:	14400005 	stb	r17,0(r2)
    f69c:	80800517 	ldw	r2,20(r16)
    f6a0:	10c01d26 	beq	r2,r3,f718 <__swbuf_r+0xfc>
    f6a4:	8080030b 	ldhu	r2,12(r16)
    f6a8:	1080004c 	andi	r2,r2,1
    f6ac:	1000181e 	bne	r2,zero,f710 <__swbuf_r+0xf4>
    f6b0:	8805883a 	mov	r2,r17
    f6b4:	dfc00317 	ldw	ra,12(sp)
    f6b8:	dc800217 	ldw	r18,8(sp)
    f6bc:	dc400117 	ldw	r17,4(sp)
    f6c0:	dc000017 	ldw	r16,0(sp)
    f6c4:	dec00404 	addi	sp,sp,16
    f6c8:	f800283a 	ret
    f6cc:	81001917 	ldw	r4,100(r16)
    f6d0:	00b7ffc4 	movi	r2,-8193
    f6d4:	31880014 	ori	r6,r6,8192
    f6d8:	2084703a 	and	r2,r4,r2
    f6dc:	80801915 	stw	r2,100(r16)
    f6e0:	80800017 	ldw	r2,0(r16)
    f6e4:	81000517 	ldw	r4,20(r16)
    f6e8:	8180030d 	sth	r6,12(r16)
    f6ec:	10c7c83a 	sub	r3,r2,r3
    f6f0:	193fe316 	blt	r3,r4,f680 <__alt_mem_Flash_flash_data+0xf400f680>
    f6f4:	9009883a 	mov	r4,r18
    f6f8:	800b883a 	mov	r5,r16
    f6fc:	00094800 	call	9480 <_fflush_r>
    f700:	1000091e 	bne	r2,zero,f728 <__swbuf_r+0x10c>
    f704:	80800017 	ldw	r2,0(r16)
    f708:	00c00044 	movi	r3,1
    f70c:	003fdd06 	br	f684 <__alt_mem_Flash_flash_data+0xf400f684>
    f710:	00800284 	movi	r2,10
    f714:	88bfe61e 	bne	r17,r2,f6b0 <__alt_mem_Flash_flash_data+0xf400f6b0>
    f718:	9009883a 	mov	r4,r18
    f71c:	800b883a 	mov	r5,r16
    f720:	00094800 	call	9480 <_fflush_r>
    f724:	103fe226 	beq	r2,zero,f6b0 <__alt_mem_Flash_flash_data+0xf400f6b0>
    f728:	00bfffc4 	movi	r2,-1
    f72c:	003fe106 	br	f6b4 <__alt_mem_Flash_flash_data+0xf400f6b4>
    f730:	9009883a 	mov	r4,r18
    f734:	800b883a 	mov	r5,r16
    f738:	00077fc0 	call	77fc <__swsetup_r>
    f73c:	103ffa1e 	bne	r2,zero,f728 <__alt_mem_Flash_flash_data+0xf400f728>
    f740:	8180030b 	ldhu	r6,12(r16)
    f744:	80c00417 	ldw	r3,16(r16)
    f748:	003fc606 	br	f664 <__alt_mem_Flash_flash_data+0xf400f664>
    f74c:	000985c0 	call	985c <__sinit>
    f750:	003fbd06 	br	f648 <__alt_mem_Flash_flash_data+0xf400f648>

0000f754 <__swbuf>:
    f754:	00c000b4 	movhi	r3,2
    f758:	18c99904 	addi	r3,r3,9828
    f75c:	2005883a 	mov	r2,r4
    f760:	19000017 	ldw	r4,0(r3)
    f764:	280d883a 	mov	r6,r5
    f768:	100b883a 	mov	r5,r2
    f76c:	000f61c1 	jmpi	f61c <__swbuf_r>

0000f770 <_wcrtomb_r>:
    f770:	defff604 	addi	sp,sp,-40
    f774:	008000b4 	movhi	r2,2
    f778:	dc800815 	stw	r18,32(sp)
    f77c:	dc400715 	stw	r17,28(sp)
    f780:	dc000615 	stw	r16,24(sp)
    f784:	10899d04 	addi	r2,r2,9844
    f788:	dfc00915 	stw	ra,36(sp)
    f78c:	2021883a 	mov	r16,r4
    f790:	3823883a 	mov	r17,r7
    f794:	14800017 	ldw	r18,0(r2)
    f798:	28001426 	beq	r5,zero,f7ec <_wcrtomb_r+0x7c>
    f79c:	d9400415 	stw	r5,16(sp)
    f7a0:	d9800515 	stw	r6,20(sp)
    f7a4:	000a3840 	call	a384 <__locale_charset>
    f7a8:	d9400417 	ldw	r5,16(sp)
    f7ac:	d9800517 	ldw	r6,20(sp)
    f7b0:	8009883a 	mov	r4,r16
    f7b4:	dc400015 	stw	r17,0(sp)
    f7b8:	100f883a 	mov	r7,r2
    f7bc:	903ee83a 	callr	r18
    f7c0:	00ffffc4 	movi	r3,-1
    f7c4:	10c0031e 	bne	r2,r3,f7d4 <_wcrtomb_r+0x64>
    f7c8:	88000015 	stw	zero,0(r17)
    f7cc:	00c02284 	movi	r3,138
    f7d0:	80c00015 	stw	r3,0(r16)
    f7d4:	dfc00917 	ldw	ra,36(sp)
    f7d8:	dc800817 	ldw	r18,32(sp)
    f7dc:	dc400717 	ldw	r17,28(sp)
    f7e0:	dc000617 	ldw	r16,24(sp)
    f7e4:	dec00a04 	addi	sp,sp,40
    f7e8:	f800283a 	ret
    f7ec:	000a3840 	call	a384 <__locale_charset>
    f7f0:	8009883a 	mov	r4,r16
    f7f4:	dc400015 	stw	r17,0(sp)
    f7f8:	d9400104 	addi	r5,sp,4
    f7fc:	000d883a 	mov	r6,zero
    f800:	100f883a 	mov	r7,r2
    f804:	903ee83a 	callr	r18
    f808:	003fed06 	br	f7c0 <__alt_mem_Flash_flash_data+0xf400f7c0>

0000f80c <wcrtomb>:
    f80c:	defff604 	addi	sp,sp,-40
    f810:	008000b4 	movhi	r2,2
    f814:	dc800615 	stw	r18,24(sp)
    f818:	dc400515 	stw	r17,20(sp)
    f81c:	dc000415 	stw	r16,16(sp)
    f820:	10899904 	addi	r2,r2,9828
    f824:	dfc00915 	stw	ra,36(sp)
    f828:	dd000815 	stw	r20,32(sp)
    f82c:	dcc00715 	stw	r19,28(sp)
    f830:	2021883a 	mov	r16,r4
    f834:	3025883a 	mov	r18,r6
    f838:	14400017 	ldw	r17,0(r2)
    f83c:	20001826 	beq	r4,zero,f8a0 <wcrtomb+0x94>
    f840:	008000b4 	movhi	r2,2
    f844:	10899d04 	addi	r2,r2,9844
    f848:	15000017 	ldw	r20,0(r2)
    f84c:	2827883a 	mov	r19,r5
    f850:	000a3840 	call	a384 <__locale_charset>
    f854:	8809883a 	mov	r4,r17
    f858:	dc800015 	stw	r18,0(sp)
    f85c:	800b883a 	mov	r5,r16
    f860:	980d883a 	mov	r6,r19
    f864:	100f883a 	mov	r7,r2
    f868:	a03ee83a 	callr	r20
    f86c:	00ffffc4 	movi	r3,-1
    f870:	10c0031e 	bne	r2,r3,f880 <wcrtomb+0x74>
    f874:	90000015 	stw	zero,0(r18)
    f878:	00c02284 	movi	r3,138
    f87c:	88c00015 	stw	r3,0(r17)
    f880:	dfc00917 	ldw	ra,36(sp)
    f884:	dd000817 	ldw	r20,32(sp)
    f888:	dcc00717 	ldw	r19,28(sp)
    f88c:	dc800617 	ldw	r18,24(sp)
    f890:	dc400517 	ldw	r17,20(sp)
    f894:	dc000417 	ldw	r16,16(sp)
    f898:	dec00a04 	addi	sp,sp,40
    f89c:	f800283a 	ret
    f8a0:	008000b4 	movhi	r2,2
    f8a4:	10899d04 	addi	r2,r2,9844
    f8a8:	14000017 	ldw	r16,0(r2)
    f8ac:	000a3840 	call	a384 <__locale_charset>
    f8b0:	8809883a 	mov	r4,r17
    f8b4:	dc800015 	stw	r18,0(sp)
    f8b8:	d9400104 	addi	r5,sp,4
    f8bc:	000d883a 	mov	r6,zero
    f8c0:	100f883a 	mov	r7,r2
    f8c4:	803ee83a 	callr	r16
    f8c8:	003fe806 	br	f86c <__alt_mem_Flash_flash_data+0xf400f86c>

0000f8cc <__ascii_wctomb>:
    f8cc:	28000526 	beq	r5,zero,f8e4 <__ascii_wctomb+0x18>
    f8d0:	00803fc4 	movi	r2,255
    f8d4:	11800536 	bltu	r2,r6,f8ec <__ascii_wctomb+0x20>
    f8d8:	29800005 	stb	r6,0(r5)
    f8dc:	00800044 	movi	r2,1
    f8e0:	f800283a 	ret
    f8e4:	0005883a 	mov	r2,zero
    f8e8:	f800283a 	ret
    f8ec:	00802284 	movi	r2,138
    f8f0:	20800015 	stw	r2,0(r4)
    f8f4:	00bfffc4 	movi	r2,-1
    f8f8:	f800283a 	ret

0000f8fc <_wctomb_r>:
    f8fc:	008000b4 	movhi	r2,2
    f900:	defff904 	addi	sp,sp,-28
    f904:	10899d04 	addi	r2,r2,9844
    f908:	dfc00615 	stw	ra,24(sp)
    f90c:	dc400515 	stw	r17,20(sp)
    f910:	dc000415 	stw	r16,16(sp)
    f914:	3823883a 	mov	r17,r7
    f918:	14000017 	ldw	r16,0(r2)
    f91c:	d9000115 	stw	r4,4(sp)
    f920:	d9400215 	stw	r5,8(sp)
    f924:	d9800315 	stw	r6,12(sp)
    f928:	000a3840 	call	a384 <__locale_charset>
    f92c:	d9000117 	ldw	r4,4(sp)
    f930:	d9400217 	ldw	r5,8(sp)
    f934:	d9800317 	ldw	r6,12(sp)
    f938:	dc400015 	stw	r17,0(sp)
    f93c:	100f883a 	mov	r7,r2
    f940:	803ee83a 	callr	r16
    f944:	dfc00617 	ldw	ra,24(sp)
    f948:	dc400517 	ldw	r17,20(sp)
    f94c:	dc000417 	ldw	r16,16(sp)
    f950:	dec00704 	addi	sp,sp,28
    f954:	f800283a 	ret

0000f958 <__udivdi3>:
    f958:	defff504 	addi	sp,sp,-44
    f95c:	dcc00415 	stw	r19,16(sp)
    f960:	dc000115 	stw	r16,4(sp)
    f964:	dfc00a15 	stw	ra,40(sp)
    f968:	df000915 	stw	fp,36(sp)
    f96c:	ddc00815 	stw	r23,32(sp)
    f970:	dd800715 	stw	r22,28(sp)
    f974:	dd400615 	stw	r21,24(sp)
    f978:	dd000515 	stw	r20,20(sp)
    f97c:	dc800315 	stw	r18,12(sp)
    f980:	dc400215 	stw	r17,8(sp)
    f984:	2027883a 	mov	r19,r4
    f988:	2821883a 	mov	r16,r5
    f98c:	3800421e 	bne	r7,zero,fa98 <__udivdi3+0x140>
    f990:	3025883a 	mov	r18,r6
    f994:	2023883a 	mov	r17,r4
    f998:	2980542e 	bgeu	r5,r6,faec <__udivdi3+0x194>
    f99c:	00bfffd4 	movui	r2,65535
    f9a0:	282d883a 	mov	r22,r5
    f9a4:	1180a836 	bltu	r2,r6,fc48 <__udivdi3+0x2f0>
    f9a8:	00803fc4 	movi	r2,255
    f9ac:	1181422e 	bgeu	r2,r6,feb8 <__udivdi3+0x560>
    f9b0:	00800204 	movi	r2,8
    f9b4:	1007883a 	mov	r3,r2
    f9b8:	3084d83a 	srl	r2,r6,r2
    f9bc:	010000b4 	movhi	r4,2
    f9c0:	2100f704 	addi	r4,r4,988
    f9c4:	2085883a 	add	r2,r4,r2
    f9c8:	10800003 	ldbu	r2,0(r2)
    f9cc:	10c7883a 	add	r3,r2,r3
    f9d0:	00800804 	movi	r2,32
    f9d4:	10c5c83a 	sub	r2,r2,r3
    f9d8:	10000526 	beq	r2,zero,f9f0 <__udivdi3+0x98>
    f9dc:	80a0983a 	sll	r16,r16,r2
    f9e0:	98c6d83a 	srl	r3,r19,r3
    f9e4:	30a4983a 	sll	r18,r6,r2
    f9e8:	98a2983a 	sll	r17,r19,r2
    f9ec:	80ecb03a 	or	r22,r16,r3
    f9f0:	902ad43a 	srli	r21,r18,16
    f9f4:	b009883a 	mov	r4,r22
    f9f8:	953fffcc 	andi	r20,r18,65535
    f9fc:	a80b883a 	mov	r5,r21
    fa00:	00105cc0 	call	105cc <__umodsi3>
    fa04:	b009883a 	mov	r4,r22
    fa08:	a80b883a 	mov	r5,r21
    fa0c:	1027883a 	mov	r19,r2
    fa10:	00105c40 	call	105c4 <__udivsi3>
    fa14:	1021883a 	mov	r16,r2
    fa18:	8806d43a 	srli	r3,r17,16
    fa1c:	9804943a 	slli	r2,r19,16
    fa20:	8527383a 	mul	r19,r16,r20
    fa24:	10c4b03a 	or	r2,r2,r3
    fa28:	14c0052e 	bgeu	r2,r19,fa40 <__udivdi3+0xe8>
    fa2c:	1485883a 	add	r2,r2,r18
    fa30:	80ffffc4 	addi	r3,r16,-1
    fa34:	14800136 	bltu	r2,r18,fa3c <__udivdi3+0xe4>
    fa38:	14c13436 	bltu	r2,r19,ff0c <__udivdi3+0x5b4>
    fa3c:	1821883a 	mov	r16,r3
    fa40:	14e7c83a 	sub	r19,r2,r19
    fa44:	9809883a 	mov	r4,r19
    fa48:	a80b883a 	mov	r5,r21
    fa4c:	00105cc0 	call	105cc <__umodsi3>
    fa50:	102d883a 	mov	r22,r2
    fa54:	9809883a 	mov	r4,r19
    fa58:	a80b883a 	mov	r5,r21
    fa5c:	00105c40 	call	105c4 <__udivsi3>
    fa60:	b02c943a 	slli	r22,r22,16
    fa64:	1529383a 	mul	r20,r2,r20
    fa68:	8c7fffcc 	andi	r17,r17,65535
    fa6c:	b462b03a 	or	r17,r22,r17
    fa70:	8d00052e 	bgeu	r17,r20,fa88 <__udivdi3+0x130>
    fa74:	8ca3883a 	add	r17,r17,r18
    fa78:	10ffffc4 	addi	r3,r2,-1
    fa7c:	8c80f636 	bltu	r17,r18,fe58 <__udivdi3+0x500>
    fa80:	8d00f52e 	bgeu	r17,r20,fe58 <__udivdi3+0x500>
    fa84:	10bfff84 	addi	r2,r2,-2
    fa88:	8020943a 	slli	r16,r16,16
    fa8c:	0007883a 	mov	r3,zero
    fa90:	1404b03a 	or	r2,r2,r16
    fa94:	00005b06 	br	fc04 <__udivdi3+0x2ac>
    fa98:	29c05836 	bltu	r5,r7,fbfc <__udivdi3+0x2a4>
    fa9c:	00bfffd4 	movui	r2,65535
    faa0:	11c0642e 	bgeu	r2,r7,fc34 <__udivdi3+0x2dc>
    faa4:	00804034 	movhi	r2,256
    faa8:	10bfffc4 	addi	r2,r2,-1
    faac:	11c0f32e 	bgeu	r2,r7,fe7c <__udivdi3+0x524>
    fab0:	00c00604 	movi	r3,24
    fab4:	180b883a 	mov	r5,r3
    fab8:	38c6d83a 	srl	r3,r7,r3
    fabc:	008000b4 	movhi	r2,2
    fac0:	1080f704 	addi	r2,r2,988
    fac4:	10c7883a 	add	r3,r2,r3
    fac8:	18c00003 	ldbu	r3,0(r3)
    facc:	01000804 	movi	r4,32
    fad0:	1947883a 	add	r3,r3,r5
    fad4:	20e5c83a 	sub	r18,r4,r3
    fad8:	9000661e 	bne	r18,zero,fc74 <__udivdi3+0x31c>
    fadc:	3c00f936 	bltu	r7,r16,fec4 <__udivdi3+0x56c>
    fae0:	9985403a 	cmpgeu	r2,r19,r6
    fae4:	0007883a 	mov	r3,zero
    fae8:	00004606 	br	fc04 <__udivdi3+0x2ac>
    faec:	3000041e 	bne	r6,zero,fb00 <__udivdi3+0x1a8>
    faf0:	01000044 	movi	r4,1
    faf4:	000b883a 	mov	r5,zero
    faf8:	00105c40 	call	105c4 <__udivsi3>
    fafc:	1025883a 	mov	r18,r2
    fb00:	00bfffd4 	movui	r2,65535
    fb04:	1480562e 	bgeu	r2,r18,fc60 <__udivdi3+0x308>
    fb08:	00804034 	movhi	r2,256
    fb0c:	10bfffc4 	addi	r2,r2,-1
    fb10:	1480e32e 	bgeu	r2,r18,fea0 <__udivdi3+0x548>
    fb14:	00800604 	movi	r2,24
    fb18:	1007883a 	mov	r3,r2
    fb1c:	9084d83a 	srl	r2,r18,r2
    fb20:	010000b4 	movhi	r4,2
    fb24:	2100f704 	addi	r4,r4,988
    fb28:	2085883a 	add	r2,r4,r2
    fb2c:	10800003 	ldbu	r2,0(r2)
    fb30:	10c5883a 	add	r2,r2,r3
    fb34:	00c00804 	movi	r3,32
    fb38:	1887c83a 	sub	r3,r3,r2
    fb3c:	1800911e 	bne	r3,zero,fd84 <__udivdi3+0x42c>
    fb40:	9028d43a 	srli	r20,r18,16
    fb44:	84a1c83a 	sub	r16,r16,r18
    fb48:	957fffcc 	andi	r21,r18,65535
    fb4c:	00c00044 	movi	r3,1
    fb50:	8009883a 	mov	r4,r16
    fb54:	a00b883a 	mov	r5,r20
    fb58:	d8c00015 	stw	r3,0(sp)
    fb5c:	00105cc0 	call	105cc <__umodsi3>
    fb60:	8009883a 	mov	r4,r16
    fb64:	a00b883a 	mov	r5,r20
    fb68:	1027883a 	mov	r19,r2
    fb6c:	00105c40 	call	105c4 <__udivsi3>
    fb70:	1021883a 	mov	r16,r2
    fb74:	880cd43a 	srli	r6,r17,16
    fb78:	9804943a 	slli	r2,r19,16
    fb7c:	8567383a 	mul	r19,r16,r21
    fb80:	d8c00017 	ldw	r3,0(sp)
    fb84:	1188b03a 	or	r4,r2,r6
    fb88:	24c0052e 	bgeu	r4,r19,fba0 <__udivdi3+0x248>
    fb8c:	2489883a 	add	r4,r4,r18
    fb90:	80bfffc4 	addi	r2,r16,-1
    fb94:	24800136 	bltu	r4,r18,fb9c <__udivdi3+0x244>
    fb98:	24c0d936 	bltu	r4,r19,ff00 <__udivdi3+0x5a8>
    fb9c:	1021883a 	mov	r16,r2
    fba0:	24e7c83a 	sub	r19,r4,r19
    fba4:	9809883a 	mov	r4,r19
    fba8:	a00b883a 	mov	r5,r20
    fbac:	d8c00015 	stw	r3,0(sp)
    fbb0:	00105cc0 	call	105cc <__umodsi3>
    fbb4:	102d883a 	mov	r22,r2
    fbb8:	9809883a 	mov	r4,r19
    fbbc:	a00b883a 	mov	r5,r20
    fbc0:	00105c40 	call	105c4 <__udivsi3>
    fbc4:	b02c943a 	slli	r22,r22,16
    fbc8:	156b383a 	mul	r21,r2,r21
    fbcc:	8c7fffcc 	andi	r17,r17,65535
    fbd0:	b462b03a 	or	r17,r22,r17
    fbd4:	d8c00017 	ldw	r3,0(sp)
    fbd8:	8d40052e 	bgeu	r17,r21,fbf0 <__udivdi3+0x298>
    fbdc:	8ca3883a 	add	r17,r17,r18
    fbe0:	113fffc4 	addi	r4,r2,-1
    fbe4:	8c809a36 	bltu	r17,r18,fe50 <__udivdi3+0x4f8>
    fbe8:	8d40992e 	bgeu	r17,r21,fe50 <__udivdi3+0x4f8>
    fbec:	10bfff84 	addi	r2,r2,-2
    fbf0:	8020943a 	slli	r16,r16,16
    fbf4:	1404b03a 	or	r2,r2,r16
    fbf8:	00000206 	br	fc04 <__udivdi3+0x2ac>
    fbfc:	0007883a 	mov	r3,zero
    fc00:	0005883a 	mov	r2,zero
    fc04:	dfc00a17 	ldw	ra,40(sp)
    fc08:	df000917 	ldw	fp,36(sp)
    fc0c:	ddc00817 	ldw	r23,32(sp)
    fc10:	dd800717 	ldw	r22,28(sp)
    fc14:	dd400617 	ldw	r21,24(sp)
    fc18:	dd000517 	ldw	r20,20(sp)
    fc1c:	dcc00417 	ldw	r19,16(sp)
    fc20:	dc800317 	ldw	r18,12(sp)
    fc24:	dc400217 	ldw	r17,8(sp)
    fc28:	dc000117 	ldw	r16,4(sp)
    fc2c:	dec00b04 	addi	sp,sp,44
    fc30:	f800283a 	ret
    fc34:	00803fc4 	movi	r2,255
    fc38:	11c0932e 	bgeu	r2,r7,fe88 <__udivdi3+0x530>
    fc3c:	00c00204 	movi	r3,8
    fc40:	180b883a 	mov	r5,r3
    fc44:	003f9c06 	br	fab8 <__alt_mem_Flash_flash_data+0xf400fab8>
    fc48:	00804034 	movhi	r2,256
    fc4c:	10bfffc4 	addi	r2,r2,-1
    fc50:	1180902e 	bgeu	r2,r6,fe94 <__udivdi3+0x53c>
    fc54:	00800604 	movi	r2,24
    fc58:	1007883a 	mov	r3,r2
    fc5c:	003f5606 	br	f9b8 <__alt_mem_Flash_flash_data+0xf400f9b8>
    fc60:	00803fc4 	movi	r2,255
    fc64:	1480912e 	bgeu	r2,r18,feac <__udivdi3+0x554>
    fc68:	00800204 	movi	r2,8
    fc6c:	1007883a 	mov	r3,r2
    fc70:	003faa06 	br	fb1c <__alt_mem_Flash_flash_data+0xf400fb1c>
    fc74:	30eed83a 	srl	r23,r6,r3
    fc78:	3c8e983a 	sll	r7,r7,r18
    fc7c:	80f8d83a 	srl	fp,r16,r3
    fc80:	98c6d83a 	srl	r3,r19,r3
    fc84:	3deeb03a 	or	r23,r7,r23
    fc88:	b828d43a 	srli	r20,r23,16
    fc8c:	84a0983a 	sll	r16,r16,r18
    fc90:	e009883a 	mov	r4,fp
    fc94:	a00b883a 	mov	r5,r20
    fc98:	80e2b03a 	or	r17,r16,r3
    fc9c:	34aa983a 	sll	r21,r6,r18
    fca0:	00105cc0 	call	105cc <__umodsi3>
    fca4:	e009883a 	mov	r4,fp
    fca8:	a00b883a 	mov	r5,r20
    fcac:	102d883a 	mov	r22,r2
    fcb0:	00105c40 	call	105c4 <__udivsi3>
    fcb4:	1021883a 	mov	r16,r2
    fcb8:	bf3fffcc 	andi	fp,r23,65535
    fcbc:	b004943a 	slli	r2,r22,16
    fcc0:	8808d43a 	srli	r4,r17,16
    fcc4:	872d383a 	mul	r22,r16,fp
    fcc8:	1104b03a 	or	r2,r2,r4
    fccc:	1580042e 	bgeu	r2,r22,fce0 <__udivdi3+0x388>
    fcd0:	15c5883a 	add	r2,r2,r23
    fcd4:	80ffffc4 	addi	r3,r16,-1
    fcd8:	15c0812e 	bgeu	r2,r23,fee0 <__udivdi3+0x588>
    fcdc:	1821883a 	mov	r16,r3
    fce0:	15adc83a 	sub	r22,r2,r22
    fce4:	b009883a 	mov	r4,r22
    fce8:	a00b883a 	mov	r5,r20
    fcec:	00105cc0 	call	105cc <__umodsi3>
    fcf0:	a00b883a 	mov	r5,r20
    fcf4:	b009883a 	mov	r4,r22
    fcf8:	d8800015 	stw	r2,0(sp)
    fcfc:	00105c40 	call	105c4 <__udivsi3>
    fd00:	d8c00017 	ldw	r3,0(sp)
    fd04:	170b383a 	mul	r5,r2,fp
    fd08:	8c7fffcc 	andi	r17,r17,65535
    fd0c:	1806943a 	slli	r3,r3,16
    fd10:	1c46b03a 	or	r3,r3,r17
    fd14:	1940042e 	bgeu	r3,r5,fd28 <__udivdi3+0x3d0>
    fd18:	1dc7883a 	add	r3,r3,r23
    fd1c:	113fffc4 	addi	r4,r2,-1
    fd20:	1dc06b2e 	bgeu	r3,r23,fed0 <__udivdi3+0x578>
    fd24:	2005883a 	mov	r2,r4
    fd28:	8020943a 	slli	r16,r16,16
    fd2c:	a9ffffcc 	andi	r7,r21,65535
    fd30:	a82ad43a 	srli	r21,r21,16
    fd34:	1404b03a 	or	r2,r2,r16
    fd38:	113fffcc 	andi	r4,r2,65535
    fd3c:	100cd43a 	srli	r6,r2,16
    fd40:	21d3383a 	mul	r9,r4,r7
    fd44:	2549383a 	mul	r4,r4,r21
    fd48:	31cf383a 	mul	r7,r6,r7
    fd4c:	4810d43a 	srli	r8,r9,16
    fd50:	1947c83a 	sub	r3,r3,r5
    fd54:	3909883a 	add	r4,r7,r4
    fd58:	2209883a 	add	r4,r4,r8
    fd5c:	354d383a 	mul	r6,r6,r21
    fd60:	21c0022e 	bgeu	r4,r7,fd6c <__udivdi3+0x414>
    fd64:	01400074 	movhi	r5,1
    fd68:	314d883a 	add	r6,r6,r5
    fd6c:	202ad43a 	srli	r21,r4,16
    fd70:	354d883a 	add	r6,r6,r21
    fd74:	19803f36 	bltu	r3,r6,fe74 <__udivdi3+0x51c>
    fd78:	19803926 	beq	r3,r6,fe60 <__udivdi3+0x508>
    fd7c:	0007883a 	mov	r3,zero
    fd80:	003fa006 	br	fc04 <__alt_mem_Flash_flash_data+0xf400fc04>
    fd84:	90e4983a 	sll	r18,r18,r3
    fd88:	80aad83a 	srl	r21,r16,r2
    fd8c:	80e0983a 	sll	r16,r16,r3
    fd90:	9028d43a 	srli	r20,r18,16
    fd94:	9884d83a 	srl	r2,r19,r2
    fd98:	a809883a 	mov	r4,r21
    fd9c:	a00b883a 	mov	r5,r20
    fda0:	80acb03a 	or	r22,r16,r2
    fda4:	98e2983a 	sll	r17,r19,r3
    fda8:	00105cc0 	call	105cc <__umodsi3>
    fdac:	a809883a 	mov	r4,r21
    fdb0:	a00b883a 	mov	r5,r20
    fdb4:	1021883a 	mov	r16,r2
    fdb8:	00105c40 	call	105c4 <__udivsi3>
    fdbc:	957fffcc 	andi	r21,r18,65535
    fdc0:	8020943a 	slli	r16,r16,16
    fdc4:	b00ad43a 	srli	r5,r22,16
    fdc8:	1567383a 	mul	r19,r2,r21
    fdcc:	102f883a 	mov	r23,r2
    fdd0:	8148b03a 	or	r4,r16,r5
    fdd4:	24c0062e 	bgeu	r4,r19,fdf0 <__udivdi3+0x498>
    fdd8:	2489883a 	add	r4,r4,r18
    fddc:	10bfffc4 	addi	r2,r2,-1
    fde0:	24804536 	bltu	r4,r18,fef8 <__udivdi3+0x5a0>
    fde4:	24c0442e 	bgeu	r4,r19,fef8 <__udivdi3+0x5a0>
    fde8:	bdffff84 	addi	r23,r23,-2
    fdec:	2489883a 	add	r4,r4,r18
    fdf0:	24e7c83a 	sub	r19,r4,r19
    fdf4:	9809883a 	mov	r4,r19
    fdf8:	a00b883a 	mov	r5,r20
    fdfc:	00105cc0 	call	105cc <__umodsi3>
    fe00:	1021883a 	mov	r16,r2
    fe04:	9809883a 	mov	r4,r19
    fe08:	a00b883a 	mov	r5,r20
    fe0c:	00105c40 	call	105c4 <__udivsi3>
    fe10:	8020943a 	slli	r16,r16,16
    fe14:	1007883a 	mov	r3,r2
    fe18:	1545383a 	mul	r2,r2,r21
    fe1c:	b13fffcc 	andi	r4,r22,65535
    fe20:	8108b03a 	or	r4,r16,r4
    fe24:	2080062e 	bgeu	r4,r2,fe40 <__udivdi3+0x4e8>
    fe28:	2489883a 	add	r4,r4,r18
    fe2c:	197fffc4 	addi	r5,r3,-1
    fe30:	24802f36 	bltu	r4,r18,fef0 <__udivdi3+0x598>
    fe34:	20802e2e 	bgeu	r4,r2,fef0 <__udivdi3+0x598>
    fe38:	18ffff84 	addi	r3,r3,-2
    fe3c:	2489883a 	add	r4,r4,r18
    fe40:	b82e943a 	slli	r23,r23,16
    fe44:	20a1c83a 	sub	r16,r4,r2
    fe48:	1dc6b03a 	or	r3,r3,r23
    fe4c:	003f4006 	br	fb50 <__alt_mem_Flash_flash_data+0xf400fb50>
    fe50:	2005883a 	mov	r2,r4
    fe54:	003f6606 	br	fbf0 <__alt_mem_Flash_flash_data+0xf400fbf0>
    fe58:	1805883a 	mov	r2,r3
    fe5c:	003f0a06 	br	fa88 <__alt_mem_Flash_flash_data+0xf400fa88>
    fe60:	2006943a 	slli	r3,r4,16
    fe64:	9c88983a 	sll	r4,r19,r18
    fe68:	4a7fffcc 	andi	r9,r9,65535
    fe6c:	1a47883a 	add	r3,r3,r9
    fe70:	20ffc22e 	bgeu	r4,r3,fd7c <__alt_mem_Flash_flash_data+0xf400fd7c>
    fe74:	10bfffc4 	addi	r2,r2,-1
    fe78:	003fc006 	br	fd7c <__alt_mem_Flash_flash_data+0xf400fd7c>
    fe7c:	00c00404 	movi	r3,16
    fe80:	180b883a 	mov	r5,r3
    fe84:	003f0c06 	br	fab8 <__alt_mem_Flash_flash_data+0xf400fab8>
    fe88:	0007883a 	mov	r3,zero
    fe8c:	000b883a 	mov	r5,zero
    fe90:	003f0906 	br	fab8 <__alt_mem_Flash_flash_data+0xf400fab8>
    fe94:	00800404 	movi	r2,16
    fe98:	1007883a 	mov	r3,r2
    fe9c:	003ec606 	br	f9b8 <__alt_mem_Flash_flash_data+0xf400f9b8>
    fea0:	00800404 	movi	r2,16
    fea4:	1007883a 	mov	r3,r2
    fea8:	003f1c06 	br	fb1c <__alt_mem_Flash_flash_data+0xf400fb1c>
    feac:	0005883a 	mov	r2,zero
    feb0:	0007883a 	mov	r3,zero
    feb4:	003f1906 	br	fb1c <__alt_mem_Flash_flash_data+0xf400fb1c>
    feb8:	0005883a 	mov	r2,zero
    febc:	0007883a 	mov	r3,zero
    fec0:	003ebd06 	br	f9b8 <__alt_mem_Flash_flash_data+0xf400f9b8>
    fec4:	0007883a 	mov	r3,zero
    fec8:	00800044 	movi	r2,1
    fecc:	003f4d06 	br	fc04 <__alt_mem_Flash_flash_data+0xf400fc04>
    fed0:	197f942e 	bgeu	r3,r5,fd24 <__alt_mem_Flash_flash_data+0xf400fd24>
    fed4:	10bfff84 	addi	r2,r2,-2
    fed8:	1dc7883a 	add	r3,r3,r23
    fedc:	003f9206 	br	fd28 <__alt_mem_Flash_flash_data+0xf400fd28>
    fee0:	15bf7e2e 	bgeu	r2,r22,fcdc <__alt_mem_Flash_flash_data+0xf400fcdc>
    fee4:	843fff84 	addi	r16,r16,-2
    fee8:	15c5883a 	add	r2,r2,r23
    feec:	003f7c06 	br	fce0 <__alt_mem_Flash_flash_data+0xf400fce0>
    fef0:	2807883a 	mov	r3,r5
    fef4:	003fd206 	br	fe40 <__alt_mem_Flash_flash_data+0xf400fe40>
    fef8:	102f883a 	mov	r23,r2
    fefc:	003fbc06 	br	fdf0 <__alt_mem_Flash_flash_data+0xf400fdf0>
    ff00:	843fff84 	addi	r16,r16,-2
    ff04:	2489883a 	add	r4,r4,r18
    ff08:	003f2506 	br	fba0 <__alt_mem_Flash_flash_data+0xf400fba0>
    ff0c:	843fff84 	addi	r16,r16,-2
    ff10:	1485883a 	add	r2,r2,r18
    ff14:	003eca06 	br	fa40 <__alt_mem_Flash_flash_data+0xf400fa40>

0000ff18 <__umoddi3>:
    ff18:	defff404 	addi	sp,sp,-48
    ff1c:	ddc00915 	stw	r23,36(sp)
    ff20:	dc400315 	stw	r17,12(sp)
    ff24:	dc000215 	stw	r16,8(sp)
    ff28:	dfc00b15 	stw	ra,44(sp)
    ff2c:	df000a15 	stw	fp,40(sp)
    ff30:	dd800815 	stw	r22,32(sp)
    ff34:	dd400715 	stw	r21,28(sp)
    ff38:	dd000615 	stw	r20,24(sp)
    ff3c:	dcc00515 	stw	r19,20(sp)
    ff40:	dc800415 	stw	r18,16(sp)
    ff44:	2021883a 	mov	r16,r4
    ff48:	2823883a 	mov	r17,r5
    ff4c:	282f883a 	mov	r23,r5
    ff50:	3800381e 	bne	r7,zero,10034 <__umoddi3+0x11c>
    ff54:	3027883a 	mov	r19,r6
    ff58:	2029883a 	mov	r20,r4
    ff5c:	29804e2e 	bgeu	r5,r6,10098 <__umoddi3+0x180>
    ff60:	00bfffd4 	movui	r2,65535
    ff64:	11809c36 	bltu	r2,r6,101d8 <__umoddi3+0x2c0>
    ff68:	00803fc4 	movi	r2,255
    ff6c:	11813b2e 	bgeu	r2,r6,1045c <__umoddi3+0x544>
    ff70:	01400204 	movi	r5,8
    ff74:	2805883a 	mov	r2,r5
    ff78:	314ad83a 	srl	r5,r6,r5
    ff7c:	00c000b4 	movhi	r3,2
    ff80:	18c0f704 	addi	r3,r3,988
    ff84:	194b883a 	add	r5,r3,r5
    ff88:	29000003 	ldbu	r4,0(r5)
    ff8c:	2089883a 	add	r4,r4,r2
    ff90:	00800804 	movi	r2,32
    ff94:	1105c83a 	sub	r2,r2,r4
    ff98:	1000ec26 	beq	r2,zero,1034c <__umoddi3+0x434>
    ff9c:	88a2983a 	sll	r17,r17,r2
    ffa0:	8108d83a 	srl	r4,r16,r4
    ffa4:	30a6983a 	sll	r19,r6,r2
    ffa8:	80a8983a 	sll	r20,r16,r2
    ffac:	1025883a 	mov	r18,r2
    ffb0:	892eb03a 	or	r23,r17,r4
    ffb4:	982cd43a 	srli	r22,r19,16
    ffb8:	b809883a 	mov	r4,r23
    ffbc:	9d7fffcc 	andi	r21,r19,65535
    ffc0:	b00b883a 	mov	r5,r22
    ffc4:	00105cc0 	call	105cc <__umodsi3>
    ffc8:	b809883a 	mov	r4,r23
    ffcc:	b00b883a 	mov	r5,r22
    ffd0:	1021883a 	mov	r16,r2
    ffd4:	00105c40 	call	105c4 <__udivsi3>
    ffd8:	8020943a 	slli	r16,r16,16
    ffdc:	a00cd43a 	srli	r6,r20,16
    ffe0:	1545383a 	mul	r2,r2,r21
    ffe4:	8188b03a 	or	r4,r16,r6
    ffe8:	2080042e 	bgeu	r4,r2,fffc <__umoddi3+0xe4>
    ffec:	24c9883a 	add	r4,r4,r19
    fff0:	24c00236 	bltu	r4,r19,fffc <__umoddi3+0xe4>
    fff4:	2080012e 	bgeu	r4,r2,fffc <__umoddi3+0xe4>
    fff8:	24c9883a 	add	r4,r4,r19
    fffc:	20a3c83a 	sub	r17,r4,r2
   10000:	8809883a 	mov	r4,r17
   10004:	b00b883a 	mov	r5,r22
   10008:	00105cc0 	call	105cc <__umodsi3>
   1000c:	8809883a 	mov	r4,r17
   10010:	b00b883a 	mov	r5,r22
   10014:	1021883a 	mov	r16,r2
   10018:	00105c40 	call	105c4 <__udivsi3>
   1001c:	8006943a 	slli	r3,r16,16
   10020:	1545383a 	mul	r2,r2,r21
   10024:	a13fffcc 	andi	r4,r20,65535
   10028:	1906b03a 	or	r3,r3,r4
   1002c:	1880532e 	bgeu	r3,r2,1017c <__umoddi3+0x264>
   10030:	00004e06 	br	1016c <__umoddi3+0x254>
   10034:	29c05536 	bltu	r5,r7,1018c <__umoddi3+0x274>
   10038:	00bfffd4 	movui	r2,65535
   1003c:	11c0612e 	bgeu	r2,r7,101c4 <__umoddi3+0x2ac>
   10040:	00804034 	movhi	r2,256
   10044:	10bfffc4 	addi	r2,r2,-1
   10048:	11c0f82e 	bgeu	r2,r7,1042c <__umoddi3+0x514>
   1004c:	01400604 	movi	r5,24
   10050:	282b883a 	mov	r21,r5
   10054:	394ad83a 	srl	r5,r7,r5
   10058:	00c000b4 	movhi	r3,2
   1005c:	18c0f704 	addi	r3,r3,988
   10060:	194b883a 	add	r5,r3,r5
   10064:	28800003 	ldbu	r2,0(r5)
   10068:	00c00804 	movi	r3,32
   1006c:	156b883a 	add	r21,r2,r21
   10070:	1d69c83a 	sub	r20,r3,r21
   10074:	a000631e 	bne	r20,zero,10204 <__umoddi3+0x2ec>
   10078:	3c400136 	bltu	r7,r17,10080 <__umoddi3+0x168>
   1007c:	81810436 	bltu	r16,r6,10490 <__umoddi3+0x578>
   10080:	8185c83a 	sub	r2,r16,r6
   10084:	89e3c83a 	sub	r17,r17,r7
   10088:	8087803a 	cmpltu	r3,r16,r2
   1008c:	88efc83a 	sub	r23,r17,r3
   10090:	b807883a 	mov	r3,r23
   10094:	00003f06 	br	10194 <__umoddi3+0x27c>
   10098:	3000041e 	bne	r6,zero,100ac <__umoddi3+0x194>
   1009c:	01000044 	movi	r4,1
   100a0:	000b883a 	mov	r5,zero
   100a4:	00105c40 	call	105c4 <__udivsi3>
   100a8:	1027883a 	mov	r19,r2
   100ac:	00bfffd4 	movui	r2,65535
   100b0:	14c04f2e 	bgeu	r2,r19,101f0 <__umoddi3+0x2d8>
   100b4:	00804034 	movhi	r2,256
   100b8:	10bfffc4 	addi	r2,r2,-1
   100bc:	14c0e42e 	bgeu	r2,r19,10450 <__umoddi3+0x538>
   100c0:	00800604 	movi	r2,24
   100c4:	1007883a 	mov	r3,r2
   100c8:	9884d83a 	srl	r2,r19,r2
   100cc:	010000b4 	movhi	r4,2
   100d0:	2100f704 	addi	r4,r4,988
   100d4:	2085883a 	add	r2,r4,r2
   100d8:	11000003 	ldbu	r4,0(r2)
   100dc:	00800804 	movi	r2,32
   100e0:	20c7883a 	add	r3,r4,r3
   100e4:	10c5c83a 	sub	r2,r2,r3
   100e8:	10009a1e 	bne	r2,zero,10354 <__umoddi3+0x43c>
   100ec:	982cd43a 	srli	r22,r19,16
   100f0:	8ce3c83a 	sub	r17,r17,r19
   100f4:	9c3fffcc 	andi	r16,r19,65535
   100f8:	0025883a 	mov	r18,zero
   100fc:	8809883a 	mov	r4,r17
   10100:	b00b883a 	mov	r5,r22
   10104:	00105cc0 	call	105cc <__umodsi3>
   10108:	8809883a 	mov	r4,r17
   1010c:	b00b883a 	mov	r5,r22
   10110:	102b883a 	mov	r21,r2
   10114:	00105c40 	call	105c4 <__udivsi3>
   10118:	a806943a 	slli	r3,r21,16
   1011c:	a008d43a 	srli	r4,r20,16
   10120:	1405383a 	mul	r2,r2,r16
   10124:	190cb03a 	or	r6,r3,r4
   10128:	3080032e 	bgeu	r6,r2,10138 <__umoddi3+0x220>
   1012c:	34cd883a 	add	r6,r6,r19
   10130:	34c00136 	bltu	r6,r19,10138 <__umoddi3+0x220>
   10134:	3080d436 	bltu	r6,r2,10488 <__umoddi3+0x570>
   10138:	30abc83a 	sub	r21,r6,r2
   1013c:	a809883a 	mov	r4,r21
   10140:	b00b883a 	mov	r5,r22
   10144:	00105cc0 	call	105cc <__umodsi3>
   10148:	1023883a 	mov	r17,r2
   1014c:	a809883a 	mov	r4,r21
   10150:	b00b883a 	mov	r5,r22
   10154:	00105c40 	call	105c4 <__udivsi3>
   10158:	8822943a 	slli	r17,r17,16
   1015c:	1405383a 	mul	r2,r2,r16
   10160:	a13fffcc 	andi	r4,r20,65535
   10164:	8906b03a 	or	r3,r17,r4
   10168:	1880042e 	bgeu	r3,r2,1017c <__umoddi3+0x264>
   1016c:	1cc7883a 	add	r3,r3,r19
   10170:	1cc00236 	bltu	r3,r19,1017c <__umoddi3+0x264>
   10174:	1880012e 	bgeu	r3,r2,1017c <__umoddi3+0x264>
   10178:	1cc7883a 	add	r3,r3,r19
   1017c:	1887c83a 	sub	r3,r3,r2
   10180:	1c84d83a 	srl	r2,r3,r18
   10184:	0007883a 	mov	r3,zero
   10188:	00000206 	br	10194 <__umoddi3+0x27c>
   1018c:	2005883a 	mov	r2,r4
   10190:	2807883a 	mov	r3,r5
   10194:	dfc00b17 	ldw	ra,44(sp)
   10198:	df000a17 	ldw	fp,40(sp)
   1019c:	ddc00917 	ldw	r23,36(sp)
   101a0:	dd800817 	ldw	r22,32(sp)
   101a4:	dd400717 	ldw	r21,28(sp)
   101a8:	dd000617 	ldw	r20,24(sp)
   101ac:	dcc00517 	ldw	r19,20(sp)
   101b0:	dc800417 	ldw	r18,16(sp)
   101b4:	dc400317 	ldw	r17,12(sp)
   101b8:	dc000217 	ldw	r16,8(sp)
   101bc:	dec00c04 	addi	sp,sp,48
   101c0:	f800283a 	ret
   101c4:	00803fc4 	movi	r2,255
   101c8:	11c0952e 	bgeu	r2,r7,10420 <__umoddi3+0x508>
   101cc:	01400204 	movi	r5,8
   101d0:	282b883a 	mov	r21,r5
   101d4:	003f9f06 	br	10054 <__alt_mem_Flash_flash_data+0xf4010054>
   101d8:	00804034 	movhi	r2,256
   101dc:	10bfffc4 	addi	r2,r2,-1
   101e0:	1180952e 	bgeu	r2,r6,10438 <__umoddi3+0x520>
   101e4:	01400604 	movi	r5,24
   101e8:	2805883a 	mov	r2,r5
   101ec:	003f6206 	br	ff78 <__alt_mem_Flash_flash_data+0xf400ff78>
   101f0:	00803fc4 	movi	r2,255
   101f4:	14c0932e 	bgeu	r2,r19,10444 <__umoddi3+0x52c>
   101f8:	00800204 	movi	r2,8
   101fc:	1007883a 	mov	r3,r2
   10200:	003fb106 	br	100c8 <__alt_mem_Flash_flash_data+0xf40100c8>
   10204:	3548d83a 	srl	r4,r6,r21
   10208:	3d0e983a 	sll	r7,r7,r20
   1020c:	8d10983a 	sll	r8,r17,r20
   10210:	8d6cd83a 	srl	r22,r17,r21
   10214:	3922b03a 	or	r17,r7,r4
   10218:	882ed43a 	srli	r23,r17,16
   1021c:	8564d83a 	srl	r18,r16,r21
   10220:	b009883a 	mov	r4,r22
   10224:	b80b883a 	mov	r5,r23
   10228:	44a4b03a 	or	r18,r8,r18
   1022c:	3526983a 	sll	r19,r6,r20
   10230:	00105cc0 	call	105cc <__umodsi3>
   10234:	b009883a 	mov	r4,r22
   10238:	b80b883a 	mov	r5,r23
   1023c:	1039883a 	mov	fp,r2
   10240:	00105c40 	call	105c4 <__udivsi3>
   10244:	102d883a 	mov	r22,r2
   10248:	8a3fffcc 	andi	r8,r17,65535
   1024c:	e004943a 	slli	r2,fp,16
   10250:	900cd43a 	srli	r6,r18,16
   10254:	b239383a 	mul	fp,r22,r8
   10258:	8520983a 	sll	r16,r16,r20
   1025c:	118ab03a 	or	r5,r2,r6
   10260:	2f00042e 	bgeu	r5,fp,10274 <__umoddi3+0x35c>
   10264:	2c4b883a 	add	r5,r5,r17
   10268:	b0bfffc4 	addi	r2,r22,-1
   1026c:	2c40822e 	bgeu	r5,r17,10478 <__umoddi3+0x560>
   10270:	102d883a 	mov	r22,r2
   10274:	2f39c83a 	sub	fp,r5,fp
   10278:	e009883a 	mov	r4,fp
   1027c:	b80b883a 	mov	r5,r23
   10280:	da000115 	stw	r8,4(sp)
   10284:	00105cc0 	call	105cc <__umodsi3>
   10288:	e009883a 	mov	r4,fp
   1028c:	b80b883a 	mov	r5,r23
   10290:	d8800015 	stw	r2,0(sp)
   10294:	00105c40 	call	105c4 <__udivsi3>
   10298:	d9800017 	ldw	r6,0(sp)
   1029c:	da000117 	ldw	r8,4(sp)
   102a0:	94bfffcc 	andi	r18,r18,65535
   102a4:	300c943a 	slli	r6,r6,16
   102a8:	1209383a 	mul	r4,r2,r8
   102ac:	3490b03a 	or	r8,r6,r18
   102b0:	4100042e 	bgeu	r8,r4,102c4 <__umoddi3+0x3ac>
   102b4:	4451883a 	add	r8,r8,r17
   102b8:	10ffffc4 	addi	r3,r2,-1
   102bc:	44406a2e 	bgeu	r8,r17,10468 <__umoddi3+0x550>
   102c0:	1805883a 	mov	r2,r3
   102c4:	b012943a 	slli	r9,r22,16
   102c8:	9abfffcc 	andi	r10,r19,65535
   102cc:	980ed43a 	srli	r7,r19,16
   102d0:	124ab03a 	or	r5,r2,r9
   102d4:	2a7fffcc 	andi	r9,r5,65535
   102d8:	280ad43a 	srli	r5,r5,16
   102dc:	4a8d383a 	mul	r6,r9,r10
   102e0:	49d3383a 	mul	r9,r9,r7
   102e4:	2a95383a 	mul	r10,r5,r10
   102e8:	3004d43a 	srli	r2,r6,16
   102ec:	4111c83a 	sub	r8,r8,r4
   102f0:	5253883a 	add	r9,r10,r9
   102f4:	4893883a 	add	r9,r9,r2
   102f8:	29cb383a 	mul	r5,r5,r7
   102fc:	4a80022e 	bgeu	r9,r10,10308 <__umoddi3+0x3f0>
   10300:	00800074 	movhi	r2,1
   10304:	288b883a 	add	r5,r5,r2
   10308:	4808d43a 	srli	r4,r9,16
   1030c:	4812943a 	slli	r9,r9,16
   10310:	31bfffcc 	andi	r6,r6,65535
   10314:	290b883a 	add	r5,r5,r4
   10318:	498d883a 	add	r6,r9,r6
   1031c:	41403a36 	bltu	r8,r5,10408 <__umoddi3+0x4f0>
   10320:	41405d26 	beq	r8,r5,10498 <__umoddi3+0x580>
   10324:	4149c83a 	sub	r4,r8,r5
   10328:	300f883a 	mov	r7,r6
   1032c:	81cfc83a 	sub	r7,r16,r7
   10330:	81c7803a 	cmpltu	r3,r16,r7
   10334:	20c7c83a 	sub	r3,r4,r3
   10338:	1d44983a 	sll	r2,r3,r21
   1033c:	3d0ed83a 	srl	r7,r7,r20
   10340:	1d06d83a 	srl	r3,r3,r20
   10344:	11c4b03a 	or	r2,r2,r7
   10348:	003f9206 	br	10194 <__alt_mem_Flash_flash_data+0xf4010194>
   1034c:	0025883a 	mov	r18,zero
   10350:	003f1806 	br	ffb4 <__alt_mem_Flash_flash_data+0xf400ffb4>
   10354:	98a6983a 	sll	r19,r19,r2
   10358:	88e8d83a 	srl	r20,r17,r3
   1035c:	80c6d83a 	srl	r3,r16,r3
   10360:	982cd43a 	srli	r22,r19,16
   10364:	88a2983a 	sll	r17,r17,r2
   10368:	a009883a 	mov	r4,r20
   1036c:	b00b883a 	mov	r5,r22
   10370:	88eab03a 	or	r21,r17,r3
   10374:	1025883a 	mov	r18,r2
   10378:	00105cc0 	call	105cc <__umodsi3>
   1037c:	a009883a 	mov	r4,r20
   10380:	b00b883a 	mov	r5,r22
   10384:	1023883a 	mov	r17,r2
   10388:	00105c40 	call	105c4 <__udivsi3>
   1038c:	9f3fffcc 	andi	fp,r19,65535
   10390:	8822943a 	slli	r17,r17,16
   10394:	a80ad43a 	srli	r5,r21,16
   10398:	1705383a 	mul	r2,r2,fp
   1039c:	84a8983a 	sll	r20,r16,r18
   103a0:	8948b03a 	or	r4,r17,r5
   103a4:	2080042e 	bgeu	r4,r2,103b8 <__umoddi3+0x4a0>
   103a8:	24c9883a 	add	r4,r4,r19
   103ac:	24c00236 	bltu	r4,r19,103b8 <__umoddi3+0x4a0>
   103b0:	2080012e 	bgeu	r4,r2,103b8 <__umoddi3+0x4a0>
   103b4:	24c9883a 	add	r4,r4,r19
   103b8:	20afc83a 	sub	r23,r4,r2
   103bc:	b809883a 	mov	r4,r23
   103c0:	b00b883a 	mov	r5,r22
   103c4:	00105cc0 	call	105cc <__umodsi3>
   103c8:	1023883a 	mov	r17,r2
   103cc:	b809883a 	mov	r4,r23
   103d0:	b00b883a 	mov	r5,r22
   103d4:	00105c40 	call	105c4 <__udivsi3>
   103d8:	8822943a 	slli	r17,r17,16
   103dc:	1705383a 	mul	r2,r2,fp
   103e0:	a93fffcc 	andi	r4,r21,65535
   103e4:	8908b03a 	or	r4,r17,r4
   103e8:	2080042e 	bgeu	r4,r2,103fc <__umoddi3+0x4e4>
   103ec:	24c9883a 	add	r4,r4,r19
   103f0:	24c00236 	bltu	r4,r19,103fc <__umoddi3+0x4e4>
   103f4:	2080012e 	bgeu	r4,r2,103fc <__umoddi3+0x4e4>
   103f8:	24c9883a 	add	r4,r4,r19
   103fc:	20a3c83a 	sub	r17,r4,r2
   10400:	e021883a 	mov	r16,fp
   10404:	003f3d06 	br	100fc <__alt_mem_Flash_flash_data+0xf40100fc>
   10408:	34cfc83a 	sub	r7,r6,r19
   1040c:	2c4bc83a 	sub	r5,r5,r17
   10410:	31cd803a 	cmpltu	r6,r6,r7
   10414:	298dc83a 	sub	r6,r5,r6
   10418:	4189c83a 	sub	r4,r8,r6
   1041c:	003fc306 	br	1032c <__alt_mem_Flash_flash_data+0xf401032c>
   10420:	000b883a 	mov	r5,zero
   10424:	002b883a 	mov	r21,zero
   10428:	003f0a06 	br	10054 <__alt_mem_Flash_flash_data+0xf4010054>
   1042c:	01400404 	movi	r5,16
   10430:	282b883a 	mov	r21,r5
   10434:	003f0706 	br	10054 <__alt_mem_Flash_flash_data+0xf4010054>
   10438:	01400404 	movi	r5,16
   1043c:	2805883a 	mov	r2,r5
   10440:	003ecd06 	br	ff78 <__alt_mem_Flash_flash_data+0xf400ff78>
   10444:	0005883a 	mov	r2,zero
   10448:	0007883a 	mov	r3,zero
   1044c:	003f1e06 	br	100c8 <__alt_mem_Flash_flash_data+0xf40100c8>
   10450:	00800404 	movi	r2,16
   10454:	1007883a 	mov	r3,r2
   10458:	003f1b06 	br	100c8 <__alt_mem_Flash_flash_data+0xf40100c8>
   1045c:	000b883a 	mov	r5,zero
   10460:	0005883a 	mov	r2,zero
   10464:	003ec406 	br	ff78 <__alt_mem_Flash_flash_data+0xf400ff78>
   10468:	413f952e 	bgeu	r8,r4,102c0 <__alt_mem_Flash_flash_data+0xf40102c0>
   1046c:	10bfff84 	addi	r2,r2,-2
   10470:	4451883a 	add	r8,r8,r17
   10474:	003f9306 	br	102c4 <__alt_mem_Flash_flash_data+0xf40102c4>
   10478:	2f3f7d2e 	bgeu	r5,fp,10270 <__alt_mem_Flash_flash_data+0xf4010270>
   1047c:	b5bfff84 	addi	r22,r22,-2
   10480:	2c4b883a 	add	r5,r5,r17
   10484:	003f7b06 	br	10274 <__alt_mem_Flash_flash_data+0xf4010274>
   10488:	34cd883a 	add	r6,r6,r19
   1048c:	003f2a06 	br	10138 <__alt_mem_Flash_flash_data+0xf4010138>
   10490:	8005883a 	mov	r2,r16
   10494:	003efe06 	br	10090 <__alt_mem_Flash_flash_data+0xf4010090>
   10498:	81bfdb36 	bltu	r16,r6,10408 <__alt_mem_Flash_flash_data+0xf4010408>
   1049c:	300f883a 	mov	r7,r6
   104a0:	0009883a 	mov	r4,zero
   104a4:	003fa106 	br	1032c <__alt_mem_Flash_flash_data+0xf401032c>

000104a8 <udivmodsi4>:
   104a8:	2900182e 	bgeu	r5,r4,1050c <udivmodsi4+0x64>
   104ac:	28001716 	blt	r5,zero,1050c <udivmodsi4+0x64>
   104b0:	00800804 	movi	r2,32
   104b4:	00c00044 	movi	r3,1
   104b8:	00000206 	br	104c4 <udivmodsi4+0x1c>
   104bc:	10001126 	beq	r2,zero,10504 <udivmodsi4+0x5c>
   104c0:	28000516 	blt	r5,zero,104d8 <udivmodsi4+0x30>
   104c4:	294b883a 	add	r5,r5,r5
   104c8:	10bfffc4 	addi	r2,r2,-1
   104cc:	18c7883a 	add	r3,r3,r3
   104d0:	293ffa36 	bltu	r5,r4,104bc <__alt_mem_Flash_flash_data+0xf40104bc>
   104d4:	18000b26 	beq	r3,zero,10504 <udivmodsi4+0x5c>
   104d8:	0005883a 	mov	r2,zero
   104dc:	21400236 	bltu	r4,r5,104e8 <udivmodsi4+0x40>
   104e0:	2149c83a 	sub	r4,r4,r5
   104e4:	10c4b03a 	or	r2,r2,r3
   104e8:	1806d07a 	srli	r3,r3,1
   104ec:	280ad07a 	srli	r5,r5,1
   104f0:	183ffa1e 	bne	r3,zero,104dc <__alt_mem_Flash_flash_data+0xf40104dc>
   104f4:	3000011e 	bne	r6,zero,104fc <udivmodsi4+0x54>
   104f8:	f800283a 	ret
   104fc:	2005883a 	mov	r2,r4
   10500:	f800283a 	ret
   10504:	0005883a 	mov	r2,zero
   10508:	003ffa06 	br	104f4 <__alt_mem_Flash_flash_data+0xf40104f4>
   1050c:	00c00044 	movi	r3,1
   10510:	003ff106 	br	104d8 <__alt_mem_Flash_flash_data+0xf40104d8>

00010514 <__divsi3>:
   10514:	defffe04 	addi	sp,sp,-8
   10518:	dfc00115 	stw	ra,4(sp)
   1051c:	dc000015 	stw	r16,0(sp)
   10520:	20000b16 	blt	r4,zero,10550 <__divsi3+0x3c>
   10524:	0021883a 	mov	r16,zero
   10528:	28000c16 	blt	r5,zero,1055c <__divsi3+0x48>
   1052c:	000d883a 	mov	r6,zero
   10530:	00104a80 	call	104a8 <udivmodsi4>
   10534:	0407c83a 	sub	r3,zero,r16
   10538:	1884f03a 	xor	r2,r3,r2
   1053c:	1405883a 	add	r2,r2,r16
   10540:	dfc00117 	ldw	ra,4(sp)
   10544:	dc000017 	ldw	r16,0(sp)
   10548:	dec00204 	addi	sp,sp,8
   1054c:	f800283a 	ret
   10550:	0109c83a 	sub	r4,zero,r4
   10554:	04000044 	movi	r16,1
   10558:	283ff40e 	bge	r5,zero,1052c <__alt_mem_Flash_flash_data+0xf401052c>
   1055c:	014bc83a 	sub	r5,zero,r5
   10560:	8400005c 	xori	r16,r16,1
   10564:	003ff106 	br	1052c <__alt_mem_Flash_flash_data+0xf401052c>

00010568 <__modsi3>:
   10568:	defffd04 	addi	sp,sp,-12
   1056c:	dfc00215 	stw	ra,8(sp)
   10570:	dc400115 	stw	r17,4(sp)
   10574:	dc000015 	stw	r16,0(sp)
   10578:	20000c16 	blt	r4,zero,105ac <__modsi3+0x44>
   1057c:	0023883a 	mov	r17,zero
   10580:	0021883a 	mov	r16,zero
   10584:	28000d16 	blt	r5,zero,105bc <__modsi3+0x54>
   10588:	01800044 	movi	r6,1
   1058c:	00104a80 	call	104a8 <udivmodsi4>
   10590:	1404f03a 	xor	r2,r2,r16
   10594:	8885883a 	add	r2,r17,r2
   10598:	dfc00217 	ldw	ra,8(sp)
   1059c:	dc400117 	ldw	r17,4(sp)
   105a0:	dc000017 	ldw	r16,0(sp)
   105a4:	dec00304 	addi	sp,sp,12
   105a8:	f800283a 	ret
   105ac:	0109c83a 	sub	r4,zero,r4
   105b0:	04400044 	movi	r17,1
   105b4:	043fffc4 	movi	r16,-1
   105b8:	283ff30e 	bge	r5,zero,10588 <__alt_mem_Flash_flash_data+0xf4010588>
   105bc:	014bc83a 	sub	r5,zero,r5
   105c0:	003ff106 	br	10588 <__alt_mem_Flash_flash_data+0xf4010588>

000105c4 <__udivsi3>:
   105c4:	000d883a 	mov	r6,zero
   105c8:	00104a81 	jmpi	104a8 <udivmodsi4>

000105cc <__umodsi3>:
   105cc:	01800044 	movi	r6,1
   105d0:	00104a81 	jmpi	104a8 <udivmodsi4>

000105d4 <__adddf3>:
   105d4:	02000434 	movhi	r8,16
   105d8:	423fffc4 	addi	r8,r8,-1
   105dc:	defffb04 	addi	sp,sp,-20
   105e0:	2a12703a 	and	r9,r5,r8
   105e4:	2806d7fa 	srli	r3,r5,31
   105e8:	3a10703a 	and	r8,r7,r8
   105ec:	3804d53a 	srli	r2,r7,20
   105f0:	3014d77a 	srli	r10,r6,29
   105f4:	dc000015 	stw	r16,0(sp)
   105f8:	481290fa 	slli	r9,r9,3
   105fc:	2820d53a 	srli	r16,r5,20
   10600:	401090fa 	slli	r8,r8,3
   10604:	200ad77a 	srli	r5,r4,29
   10608:	380ed7fa 	srli	r7,r7,31
   1060c:	dc800215 	stw	r18,8(sp)
   10610:	dc400115 	stw	r17,4(sp)
   10614:	dfc00415 	stw	ra,16(sp)
   10618:	dcc00315 	stw	r19,12(sp)
   1061c:	1c803fcc 	andi	r18,r3,255
   10620:	8401ffcc 	andi	r16,r16,2047
   10624:	494ab03a 	or	r5,r9,r5
   10628:	202290fa 	slli	r17,r4,3
   1062c:	1081ffcc 	andi	r2,r2,2047
   10630:	4290b03a 	or	r8,r8,r10
   10634:	300c90fa 	slli	r6,r6,3
   10638:	91c07026 	beq	r18,r7,107fc <__adddf3+0x228>
   1063c:	8087c83a 	sub	r3,r16,r2
   10640:	00c0b30e 	bge	zero,r3,10910 <__adddf3+0x33c>
   10644:	10002a1e 	bne	r2,zero,106f0 <__adddf3+0x11c>
   10648:	4184b03a 	or	r2,r8,r6
   1064c:	1000991e 	bne	r2,zero,108b4 <__adddf3+0x2e0>
   10650:	888001cc 	andi	r2,r17,7
   10654:	10005b26 	beq	r2,zero,107c4 <__adddf3+0x1f0>
   10658:	88c003cc 	andi	r3,r17,15
   1065c:	00800104 	movi	r2,4
   10660:	18805826 	beq	r3,r2,107c4 <__adddf3+0x1f0>
   10664:	89800104 	addi	r6,r17,4
   10668:	3463803a 	cmpltu	r17,r6,r17
   1066c:	2c4b883a 	add	r5,r5,r17
   10670:	2880202c 	andhi	r2,r5,128
   10674:	9007883a 	mov	r3,r18
   10678:	3023883a 	mov	r17,r6
   1067c:	10005426 	beq	r2,zero,107d0 <__adddf3+0x1fc>
   10680:	84000044 	addi	r16,r16,1
   10684:	0081ffc4 	movi	r2,2047
   10688:	8080c126 	beq	r16,r2,10990 <__adddf3+0x3bc>
   1068c:	013fe034 	movhi	r4,65408
   10690:	213fffc4 	addi	r4,r4,-1
   10694:	290a703a 	and	r5,r5,r4
   10698:	2804977a 	slli	r2,r5,29
   1069c:	280a927a 	slli	r5,r5,9
   106a0:	8822d0fa 	srli	r17,r17,3
   106a4:	8401ffcc 	andi	r16,r16,2047
   106a8:	2808d33a 	srli	r4,r5,12
   106ac:	1444b03a 	or	r2,r2,r17
   106b0:	8401ffcc 	andi	r16,r16,2047
   106b4:	800a953a 	slli	r5,r16,20
   106b8:	18c03fcc 	andi	r3,r3,255
   106bc:	04000434 	movhi	r16,16
   106c0:	180697fa 	slli	r3,r3,31
   106c4:	843fffc4 	addi	r16,r16,-1
   106c8:	2420703a 	and	r16,r4,r16
   106cc:	8160b03a 	or	r16,r16,r5
   106d0:	80c6b03a 	or	r3,r16,r3
   106d4:	dfc00417 	ldw	ra,16(sp)
   106d8:	dcc00317 	ldw	r19,12(sp)
   106dc:	dc800217 	ldw	r18,8(sp)
   106e0:	dc400117 	ldw	r17,4(sp)
   106e4:	dc000017 	ldw	r16,0(sp)
   106e8:	dec00504 	addi	sp,sp,20
   106ec:	f800283a 	ret
   106f0:	0081ffc4 	movi	r2,2047
   106f4:	80bfd626 	beq	r16,r2,10650 <__alt_mem_Flash_flash_data+0xf4010650>
   106f8:	42002034 	orhi	r8,r8,128
   106fc:	00800e04 	movi	r2,56
   10700:	10c0a616 	blt	r2,r3,1099c <__adddf3+0x3c8>
   10704:	008007c4 	movi	r2,31
   10708:	10c0c916 	blt	r2,r3,10a30 <__adddf3+0x45c>
   1070c:	00800804 	movi	r2,32
   10710:	10c5c83a 	sub	r2,r2,r3
   10714:	408e983a 	sll	r7,r8,r2
   10718:	30c8d83a 	srl	r4,r6,r3
   1071c:	3084983a 	sll	r2,r6,r2
   10720:	40c6d83a 	srl	r3,r8,r3
   10724:	390cb03a 	or	r6,r7,r4
   10728:	1004c03a 	cmpne	r2,r2,zero
   1072c:	308cb03a 	or	r6,r6,r2
   10730:	898dc83a 	sub	r6,r17,r6
   10734:	89a3803a 	cmpltu	r17,r17,r6
   10738:	28cbc83a 	sub	r5,r5,r3
   1073c:	2c4bc83a 	sub	r5,r5,r17
   10740:	3023883a 	mov	r17,r6
   10744:	2880202c 	andhi	r2,r5,128
   10748:	10006d26 	beq	r2,zero,10900 <__adddf3+0x32c>
   1074c:	04c02034 	movhi	r19,128
   10750:	9cffffc4 	addi	r19,r19,-1
   10754:	2ce6703a 	and	r19,r5,r19
   10758:	98007e26 	beq	r19,zero,10954 <__adddf3+0x380>
   1075c:	9809883a 	mov	r4,r19
   10760:	0012b700 	call	12b70 <__clzsi2>
   10764:	10fffe04 	addi	r3,r2,-8
   10768:	010007c4 	movi	r4,31
   1076c:	20c07f16 	blt	r4,r3,1096c <__adddf3+0x398>
   10770:	01400a04 	movi	r5,40
   10774:	2885c83a 	sub	r2,r5,r2
   10778:	888ad83a 	srl	r5,r17,r2
   1077c:	98e6983a 	sll	r19,r19,r3
   10780:	88e2983a 	sll	r17,r17,r3
   10784:	2ce6b03a 	or	r19,r5,r19
   10788:	1c007c16 	blt	r3,r16,1097c <__adddf3+0x3a8>
   1078c:	1c21c83a 	sub	r16,r3,r16
   10790:	81400044 	addi	r5,r16,1
   10794:	00c007c4 	movi	r3,31
   10798:	19409816 	blt	r3,r5,109fc <__adddf3+0x428>
   1079c:	1c21c83a 	sub	r16,r3,r16
   107a0:	8c08983a 	sll	r4,r17,r16
   107a4:	8946d83a 	srl	r3,r17,r5
   107a8:	9c20983a 	sll	r16,r19,r16
   107ac:	2008c03a 	cmpne	r4,r4,zero
   107b0:	994ad83a 	srl	r5,r19,r5
   107b4:	1c06b03a 	or	r3,r3,r16
   107b8:	1922b03a 	or	r17,r3,r4
   107bc:	0021883a 	mov	r16,zero
   107c0:	003fa306 	br	10650 <__alt_mem_Flash_flash_data+0xf4010650>
   107c4:	2880202c 	andhi	r2,r5,128
   107c8:	9007883a 	mov	r3,r18
   107cc:	103fac1e 	bne	r2,zero,10680 <__alt_mem_Flash_flash_data+0xf4010680>
   107d0:	2804977a 	slli	r2,r5,29
   107d4:	8822d0fa 	srli	r17,r17,3
   107d8:	0101ffc4 	movi	r4,2047
   107dc:	280ad0fa 	srli	r5,r5,3
   107e0:	1444b03a 	or	r2,r2,r17
   107e4:	81002c26 	beq	r16,r4,10898 <__adddf3+0x2c4>
   107e8:	8120703a 	and	r16,r16,r4
   107ec:	01000434 	movhi	r4,16
   107f0:	213fffc4 	addi	r4,r4,-1
   107f4:	2908703a 	and	r4,r5,r4
   107f8:	003fad06 	br	106b0 <__alt_mem_Flash_flash_data+0xf40106b0>
   107fc:	8089c83a 	sub	r4,r16,r2
   10800:	01006a0e 	bge	zero,r4,109ac <__adddf3+0x3d8>
   10804:	10003326 	beq	r2,zero,108d4 <__adddf3+0x300>
   10808:	0081ffc4 	movi	r2,2047
   1080c:	80bf9026 	beq	r16,r2,10650 <__alt_mem_Flash_flash_data+0xf4010650>
   10810:	42002034 	orhi	r8,r8,128
   10814:	00800e04 	movi	r2,56
   10818:	1100b116 	blt	r2,r4,10ae0 <__adddf3+0x50c>
   1081c:	008007c4 	movi	r2,31
   10820:	1100e216 	blt	r2,r4,10bac <__adddf3+0x5d8>
   10824:	00800804 	movi	r2,32
   10828:	1105c83a 	sub	r2,r2,r4
   1082c:	4092983a 	sll	r9,r8,r2
   10830:	310ed83a 	srl	r7,r6,r4
   10834:	3084983a 	sll	r2,r6,r2
   10838:	4110d83a 	srl	r8,r8,r4
   1083c:	49ccb03a 	or	r6,r9,r7
   10840:	1004c03a 	cmpne	r2,r2,zero
   10844:	308cb03a 	or	r6,r6,r2
   10848:	344d883a 	add	r6,r6,r17
   1084c:	3463803a 	cmpltu	r17,r6,r17
   10850:	414b883a 	add	r5,r8,r5
   10854:	2c4b883a 	add	r5,r5,r17
   10858:	3023883a 	mov	r17,r6
   1085c:	2880202c 	andhi	r2,r5,128
   10860:	10002726 	beq	r2,zero,10900 <__adddf3+0x32c>
   10864:	84000044 	addi	r16,r16,1
   10868:	0081ffc4 	movi	r2,2047
   1086c:	8080ae26 	beq	r16,r2,10b28 <__adddf3+0x554>
   10870:	00bfe034 	movhi	r2,65408
   10874:	10bfffc4 	addi	r2,r2,-1
   10878:	288a703a 	and	r5,r5,r2
   1087c:	880cd07a 	srli	r6,r17,1
   10880:	280897fa 	slli	r4,r5,31
   10884:	88c0004c 	andi	r3,r17,1
   10888:	30e2b03a 	or	r17,r6,r3
   1088c:	280ad07a 	srli	r5,r5,1
   10890:	8922b03a 	or	r17,r17,r4
   10894:	003f6e06 	br	10650 <__alt_mem_Flash_flash_data+0xf4010650>
   10898:	1148b03a 	or	r4,r2,r5
   1089c:	20003c26 	beq	r4,zero,10990 <__adddf3+0x3bc>
   108a0:	29000234 	orhi	r4,r5,8
   108a4:	01400434 	movhi	r5,16
   108a8:	297fffc4 	addi	r5,r5,-1
   108ac:	2148703a 	and	r4,r4,r5
   108b0:	003f7f06 	br	106b0 <__alt_mem_Flash_flash_data+0xf40106b0>
   108b4:	18ffffc4 	addi	r3,r3,-1
   108b8:	18004d1e 	bne	r3,zero,109f0 <__adddf3+0x41c>
   108bc:	898dc83a 	sub	r6,r17,r6
   108c0:	89a3803a 	cmpltu	r17,r17,r6
   108c4:	2a0bc83a 	sub	r5,r5,r8
   108c8:	2c4bc83a 	sub	r5,r5,r17
   108cc:	3023883a 	mov	r17,r6
   108d0:	003f9c06 	br	10744 <__alt_mem_Flash_flash_data+0xf4010744>
   108d4:	4184b03a 	or	r2,r8,r6
   108d8:	103f5d26 	beq	r2,zero,10650 <__alt_mem_Flash_flash_data+0xf4010650>
   108dc:	213fffc4 	addi	r4,r4,-1
   108e0:	203fd926 	beq	r4,zero,10848 <__alt_mem_Flash_flash_data+0xf4010848>
   108e4:	0081ffc4 	movi	r2,2047
   108e8:	80bfca1e 	bne	r16,r2,10814 <__alt_mem_Flash_flash_data+0xf4010814>
   108ec:	003f5806 	br	10650 <__alt_mem_Flash_flash_data+0xf4010650>
   108f0:	10c8b03a 	or	r4,r2,r3
   108f4:	20008b26 	beq	r4,zero,10b24 <__adddf3+0x550>
   108f8:	100b883a 	mov	r5,r2
   108fc:	1823883a 	mov	r17,r3
   10900:	888001cc 	andi	r2,r17,7
   10904:	103f541e 	bne	r2,zero,10658 <__alt_mem_Flash_flash_data+0xf4010658>
   10908:	9007883a 	mov	r3,r18
   1090c:	003fb006 	br	107d0 <__alt_mem_Flash_flash_data+0xf40107d0>
   10910:	1800531e 	bne	r3,zero,10a60 <__adddf3+0x48c>
   10914:	80800044 	addi	r2,r16,1
   10918:	1081ffcc 	andi	r2,r2,2047
   1091c:	00c00044 	movi	r3,1
   10920:	1880990e 	bge	r3,r2,10b88 <__adddf3+0x5b4>
   10924:	8985c83a 	sub	r2,r17,r6
   10928:	8887803a 	cmpltu	r3,r17,r2
   1092c:	2a27c83a 	sub	r19,r5,r8
   10930:	98e7c83a 	sub	r19,r19,r3
   10934:	98c0202c 	andhi	r3,r19,128
   10938:	18006226 	beq	r3,zero,10ac4 <__adddf3+0x4f0>
   1093c:	3463c83a 	sub	r17,r6,r17
   10940:	4151c83a 	sub	r8,r8,r5
   10944:	344d803a 	cmpltu	r6,r6,r17
   10948:	41a7c83a 	sub	r19,r8,r6
   1094c:	3825883a 	mov	r18,r7
   10950:	983f821e 	bne	r19,zero,1075c <__alt_mem_Flash_flash_data+0xf401075c>
   10954:	8809883a 	mov	r4,r17
   10958:	0012b700 	call	12b70 <__clzsi2>
   1095c:	10800804 	addi	r2,r2,32
   10960:	10fffe04 	addi	r3,r2,-8
   10964:	010007c4 	movi	r4,31
   10968:	20ff810e 	bge	r4,r3,10770 <__alt_mem_Flash_flash_data+0xf4010770>
   1096c:	14fff604 	addi	r19,r2,-40
   10970:	8ce6983a 	sll	r19,r17,r19
   10974:	0023883a 	mov	r17,zero
   10978:	1c3f840e 	bge	r3,r16,1078c <__alt_mem_Flash_flash_data+0xf401078c>
   1097c:	017fe034 	movhi	r5,65408
   10980:	297fffc4 	addi	r5,r5,-1
   10984:	80e1c83a 	sub	r16,r16,r3
   10988:	994a703a 	and	r5,r19,r5
   1098c:	003f3006 	br	10650 <__alt_mem_Flash_flash_data+0xf4010650>
   10990:	0009883a 	mov	r4,zero
   10994:	0005883a 	mov	r2,zero
   10998:	003f4506 	br	106b0 <__alt_mem_Flash_flash_data+0xf40106b0>
   1099c:	418cb03a 	or	r6,r8,r6
   109a0:	300cc03a 	cmpne	r6,r6,zero
   109a4:	0007883a 	mov	r3,zero
   109a8:	003f6106 	br	10730 <__alt_mem_Flash_flash_data+0xf4010730>
   109ac:	2000921e 	bne	r4,zero,10bf8 <__adddf3+0x624>
   109b0:	80800044 	addi	r2,r16,1
   109b4:	11c1ffcc 	andi	r7,r2,2047
   109b8:	01000044 	movi	r4,1
   109bc:	21c0610e 	bge	r4,r7,10b44 <__adddf3+0x570>
   109c0:	0101ffc4 	movi	r4,2047
   109c4:	1100a326 	beq	r2,r4,10c54 <__adddf3+0x680>
   109c8:	344d883a 	add	r6,r6,r17
   109cc:	3463803a 	cmpltu	r17,r6,r17
   109d0:	414b883a 	add	r5,r8,r5
   109d4:	2c4b883a 	add	r5,r5,r17
   109d8:	282297fa 	slli	r17,r5,31
   109dc:	300cd07a 	srli	r6,r6,1
   109e0:	280ad07a 	srli	r5,r5,1
   109e4:	1021883a 	mov	r16,r2
   109e8:	89a2b03a 	or	r17,r17,r6
   109ec:	003f1806 	br	10650 <__alt_mem_Flash_flash_data+0xf4010650>
   109f0:	0081ffc4 	movi	r2,2047
   109f4:	80bf411e 	bne	r16,r2,106fc <__alt_mem_Flash_flash_data+0xf40106fc>
   109f8:	003f1506 	br	10650 <__alt_mem_Flash_flash_data+0xf4010650>
   109fc:	80bff844 	addi	r2,r16,-31
   10a00:	00c00804 	movi	r3,32
   10a04:	9884d83a 	srl	r2,r19,r2
   10a08:	28c04a26 	beq	r5,r3,10b34 <__adddf3+0x560>
   10a0c:	00c00fc4 	movi	r3,63
   10a10:	1c21c83a 	sub	r16,r3,r16
   10a14:	9c26983a 	sll	r19,r19,r16
   10a18:	9c62b03a 	or	r17,r19,r17
   10a1c:	8822c03a 	cmpne	r17,r17,zero
   10a20:	88a2b03a 	or	r17,r17,r2
   10a24:	000b883a 	mov	r5,zero
   10a28:	0021883a 	mov	r16,zero
   10a2c:	003fb406 	br	10900 <__alt_mem_Flash_flash_data+0xf4010900>
   10a30:	18bff804 	addi	r2,r3,-32
   10a34:	01000804 	movi	r4,32
   10a38:	4084d83a 	srl	r2,r8,r2
   10a3c:	19003f26 	beq	r3,r4,10b3c <__adddf3+0x568>
   10a40:	01001004 	movi	r4,64
   10a44:	20c7c83a 	sub	r3,r4,r3
   10a48:	40d0983a 	sll	r8,r8,r3
   10a4c:	418cb03a 	or	r6,r8,r6
   10a50:	300cc03a 	cmpne	r6,r6,zero
   10a54:	308cb03a 	or	r6,r6,r2
   10a58:	0007883a 	mov	r3,zero
   10a5c:	003f3406 	br	10730 <__alt_mem_Flash_flash_data+0xf4010730>
   10a60:	80002326 	beq	r16,zero,10af0 <__adddf3+0x51c>
   10a64:	0101ffc4 	movi	r4,2047
   10a68:	11005e26 	beq	r2,r4,10be4 <__adddf3+0x610>
   10a6c:	00c7c83a 	sub	r3,zero,r3
   10a70:	29402034 	orhi	r5,r5,128
   10a74:	01000e04 	movi	r4,56
   10a78:	20c07216 	blt	r4,r3,10c44 <__adddf3+0x670>
   10a7c:	010007c4 	movi	r4,31
   10a80:	20c0ce16 	blt	r4,r3,10dbc <__adddf3+0x7e8>
   10a84:	01000804 	movi	r4,32
   10a88:	20c9c83a 	sub	r4,r4,r3
   10a8c:	2914983a 	sll	r10,r5,r4
   10a90:	88d2d83a 	srl	r9,r17,r3
   10a94:	8908983a 	sll	r4,r17,r4
   10a98:	28c6d83a 	srl	r3,r5,r3
   10a9c:	5262b03a 	or	r17,r10,r9
   10aa0:	2008c03a 	cmpne	r4,r4,zero
   10aa4:	8922b03a 	or	r17,r17,r4
   10aa8:	3463c83a 	sub	r17,r6,r17
   10aac:	40c7c83a 	sub	r3,r8,r3
   10ab0:	344d803a 	cmpltu	r6,r6,r17
   10ab4:	198bc83a 	sub	r5,r3,r6
   10ab8:	1021883a 	mov	r16,r2
   10abc:	3825883a 	mov	r18,r7
   10ac0:	003f2006 	br	10744 <__alt_mem_Flash_flash_data+0xf4010744>
   10ac4:	9886b03a 	or	r3,r19,r2
   10ac8:	1800141e 	bne	r3,zero,10b1c <__adddf3+0x548>
   10acc:	0007883a 	mov	r3,zero
   10ad0:	000b883a 	mov	r5,zero
   10ad4:	0023883a 	mov	r17,zero
   10ad8:	0021883a 	mov	r16,zero
   10adc:	003f3c06 	br	107d0 <__alt_mem_Flash_flash_data+0xf40107d0>
   10ae0:	418cb03a 	or	r6,r8,r6
   10ae4:	300cc03a 	cmpne	r6,r6,zero
   10ae8:	0011883a 	mov	r8,zero
   10aec:	003f5606 	br	10848 <__alt_mem_Flash_flash_data+0xf4010848>
   10af0:	2c48b03a 	or	r4,r5,r17
   10af4:	20003b26 	beq	r4,zero,10be4 <__adddf3+0x610>
   10af8:	00c6303a 	nor	r3,zero,r3
   10afc:	1800371e 	bne	r3,zero,10bdc <__adddf3+0x608>
   10b00:	3463c83a 	sub	r17,r6,r17
   10b04:	414bc83a 	sub	r5,r8,r5
   10b08:	344d803a 	cmpltu	r6,r6,r17
   10b0c:	298bc83a 	sub	r5,r5,r6
   10b10:	1021883a 	mov	r16,r2
   10b14:	3825883a 	mov	r18,r7
   10b18:	003f0a06 	br	10744 <__alt_mem_Flash_flash_data+0xf4010744>
   10b1c:	1023883a 	mov	r17,r2
   10b20:	003f0d06 	br	10758 <__alt_mem_Flash_flash_data+0xf4010758>
   10b24:	0007883a 	mov	r3,zero
   10b28:	000b883a 	mov	r5,zero
   10b2c:	0023883a 	mov	r17,zero
   10b30:	003f2706 	br	107d0 <__alt_mem_Flash_flash_data+0xf40107d0>
   10b34:	0027883a 	mov	r19,zero
   10b38:	003fb706 	br	10a18 <__alt_mem_Flash_flash_data+0xf4010a18>
   10b3c:	0011883a 	mov	r8,zero
   10b40:	003fc206 	br	10a4c <__alt_mem_Flash_flash_data+0xf4010a4c>
   10b44:	2c44b03a 	or	r2,r5,r17
   10b48:	8000871e 	bne	r16,zero,10d68 <__adddf3+0x794>
   10b4c:	1000b126 	beq	r2,zero,10e14 <__adddf3+0x840>
   10b50:	4184b03a 	or	r2,r8,r6
   10b54:	103ebe26 	beq	r2,zero,10650 <__alt_mem_Flash_flash_data+0xf4010650>
   10b58:	3445883a 	add	r2,r6,r17
   10b5c:	1463803a 	cmpltu	r17,r2,r17
   10b60:	414b883a 	add	r5,r8,r5
   10b64:	2c4b883a 	add	r5,r5,r17
   10b68:	28c0202c 	andhi	r3,r5,128
   10b6c:	1023883a 	mov	r17,r2
   10b70:	183f6326 	beq	r3,zero,10900 <__alt_mem_Flash_flash_data+0xf4010900>
   10b74:	00bfe034 	movhi	r2,65408
   10b78:	10bfffc4 	addi	r2,r2,-1
   10b7c:	2021883a 	mov	r16,r4
   10b80:	288a703a 	and	r5,r5,r2
   10b84:	003eb206 	br	10650 <__alt_mem_Flash_flash_data+0xf4010650>
   10b88:	2c44b03a 	or	r2,r5,r17
   10b8c:	8000251e 	bne	r16,zero,10c24 <__adddf3+0x650>
   10b90:	10004b1e 	bne	r2,zero,10cc0 <__adddf3+0x6ec>
   10b94:	4184b03a 	or	r2,r8,r6
   10b98:	103fe226 	beq	r2,zero,10b24 <__alt_mem_Flash_flash_data+0xf4010b24>
   10b9c:	400b883a 	mov	r5,r8
   10ba0:	3023883a 	mov	r17,r6
   10ba4:	3825883a 	mov	r18,r7
   10ba8:	003ea906 	br	10650 <__alt_mem_Flash_flash_data+0xf4010650>
   10bac:	20bff804 	addi	r2,r4,-32
   10bb0:	01c00804 	movi	r7,32
   10bb4:	4084d83a 	srl	r2,r8,r2
   10bb8:	21c07e26 	beq	r4,r7,10db4 <__adddf3+0x7e0>
   10bbc:	01c01004 	movi	r7,64
   10bc0:	3909c83a 	sub	r4,r7,r4
   10bc4:	4110983a 	sll	r8,r8,r4
   10bc8:	418cb03a 	or	r6,r8,r6
   10bcc:	300cc03a 	cmpne	r6,r6,zero
   10bd0:	308cb03a 	or	r6,r6,r2
   10bd4:	0011883a 	mov	r8,zero
   10bd8:	003f1b06 	br	10848 <__alt_mem_Flash_flash_data+0xf4010848>
   10bdc:	0101ffc4 	movi	r4,2047
   10be0:	113fa41e 	bne	r2,r4,10a74 <__alt_mem_Flash_flash_data+0xf4010a74>
   10be4:	400b883a 	mov	r5,r8
   10be8:	3023883a 	mov	r17,r6
   10bec:	1021883a 	mov	r16,r2
   10bf0:	3825883a 	mov	r18,r7
   10bf4:	003e9606 	br	10650 <__alt_mem_Flash_flash_data+0xf4010650>
   10bf8:	80001a1e 	bne	r16,zero,10c64 <__adddf3+0x690>
   10bfc:	2c4eb03a 	or	r7,r5,r17
   10c00:	38005526 	beq	r7,zero,10d58 <__adddf3+0x784>
   10c04:	0108303a 	nor	r4,zero,r4
   10c08:	2000511e 	bne	r4,zero,10d50 <__adddf3+0x77c>
   10c0c:	89a3883a 	add	r17,r17,r6
   10c10:	414b883a 	add	r5,r8,r5
   10c14:	898d803a 	cmpltu	r6,r17,r6
   10c18:	298b883a 	add	r5,r5,r6
   10c1c:	1021883a 	mov	r16,r2
   10c20:	003f0e06 	br	1085c <__alt_mem_Flash_flash_data+0xf401085c>
   10c24:	1000341e 	bne	r2,zero,10cf8 <__adddf3+0x724>
   10c28:	4184b03a 	or	r2,r8,r6
   10c2c:	10006f26 	beq	r2,zero,10dec <__adddf3+0x818>
   10c30:	400b883a 	mov	r5,r8
   10c34:	3023883a 	mov	r17,r6
   10c38:	3825883a 	mov	r18,r7
   10c3c:	0401ffc4 	movi	r16,2047
   10c40:	003e8306 	br	10650 <__alt_mem_Flash_flash_data+0xf4010650>
   10c44:	2c62b03a 	or	r17,r5,r17
   10c48:	8822c03a 	cmpne	r17,r17,zero
   10c4c:	0007883a 	mov	r3,zero
   10c50:	003f9506 	br	10aa8 <__alt_mem_Flash_flash_data+0xf4010aa8>
   10c54:	1021883a 	mov	r16,r2
   10c58:	000b883a 	mov	r5,zero
   10c5c:	0023883a 	mov	r17,zero
   10c60:	003edb06 	br	107d0 <__alt_mem_Flash_flash_data+0xf40107d0>
   10c64:	01c1ffc4 	movi	r7,2047
   10c68:	11c03b26 	beq	r2,r7,10d58 <__adddf3+0x784>
   10c6c:	0109c83a 	sub	r4,zero,r4
   10c70:	29402034 	orhi	r5,r5,128
   10c74:	01c00e04 	movi	r7,56
   10c78:	39006216 	blt	r7,r4,10e04 <__adddf3+0x830>
   10c7c:	01c007c4 	movi	r7,31
   10c80:	39006b16 	blt	r7,r4,10e30 <__adddf3+0x85c>
   10c84:	01c00804 	movi	r7,32
   10c88:	390fc83a 	sub	r7,r7,r4
   10c8c:	29d4983a 	sll	r10,r5,r7
   10c90:	8912d83a 	srl	r9,r17,r4
   10c94:	89ce983a 	sll	r7,r17,r7
   10c98:	2908d83a 	srl	r4,r5,r4
   10c9c:	5262b03a 	or	r17,r10,r9
   10ca0:	380ac03a 	cmpne	r5,r7,zero
   10ca4:	8962b03a 	or	r17,r17,r5
   10ca8:	89a3883a 	add	r17,r17,r6
   10cac:	2211883a 	add	r8,r4,r8
   10cb0:	898d803a 	cmpltu	r6,r17,r6
   10cb4:	418b883a 	add	r5,r8,r6
   10cb8:	1021883a 	mov	r16,r2
   10cbc:	003ee706 	br	1085c <__alt_mem_Flash_flash_data+0xf401085c>
   10cc0:	4184b03a 	or	r2,r8,r6
   10cc4:	103e6226 	beq	r2,zero,10650 <__alt_mem_Flash_flash_data+0xf4010650>
   10cc8:	8987c83a 	sub	r3,r17,r6
   10ccc:	88c9803a 	cmpltu	r4,r17,r3
   10cd0:	2a05c83a 	sub	r2,r5,r8
   10cd4:	1105c83a 	sub	r2,r2,r4
   10cd8:	1100202c 	andhi	r4,r2,128
   10cdc:	203f0426 	beq	r4,zero,108f0 <__alt_mem_Flash_flash_data+0xf40108f0>
   10ce0:	3463c83a 	sub	r17,r6,r17
   10ce4:	414bc83a 	sub	r5,r8,r5
   10ce8:	344d803a 	cmpltu	r6,r6,r17
   10cec:	298bc83a 	sub	r5,r5,r6
   10cf0:	3825883a 	mov	r18,r7
   10cf4:	003e5606 	br	10650 <__alt_mem_Flash_flash_data+0xf4010650>
   10cf8:	4184b03a 	or	r2,r8,r6
   10cfc:	10002b26 	beq	r2,zero,10dac <__adddf3+0x7d8>
   10d00:	2804d0fa 	srli	r2,r5,3
   10d04:	8822d0fa 	srli	r17,r17,3
   10d08:	280a977a 	slli	r5,r5,29
   10d0c:	10c0022c 	andhi	r3,r2,8
   10d10:	2c62b03a 	or	r17,r5,r17
   10d14:	18000826 	beq	r3,zero,10d38 <__adddf3+0x764>
   10d18:	4008d0fa 	srli	r4,r8,3
   10d1c:	20c0022c 	andhi	r3,r4,8
   10d20:	1800051e 	bne	r3,zero,10d38 <__adddf3+0x764>
   10d24:	300cd0fa 	srli	r6,r6,3
   10d28:	4010977a 	slli	r8,r8,29
   10d2c:	2005883a 	mov	r2,r4
   10d30:	3825883a 	mov	r18,r7
   10d34:	41a2b03a 	or	r17,r8,r6
   10d38:	880ad77a 	srli	r5,r17,29
   10d3c:	100490fa 	slli	r2,r2,3
   10d40:	882290fa 	slli	r17,r17,3
   10d44:	0401ffc4 	movi	r16,2047
   10d48:	288ab03a 	or	r5,r5,r2
   10d4c:	003e4006 	br	10650 <__alt_mem_Flash_flash_data+0xf4010650>
   10d50:	01c1ffc4 	movi	r7,2047
   10d54:	11ffc71e 	bne	r2,r7,10c74 <__alt_mem_Flash_flash_data+0xf4010c74>
   10d58:	400b883a 	mov	r5,r8
   10d5c:	3023883a 	mov	r17,r6
   10d60:	1021883a 	mov	r16,r2
   10d64:	003e3a06 	br	10650 <__alt_mem_Flash_flash_data+0xf4010650>
   10d68:	10002d26 	beq	r2,zero,10e20 <__adddf3+0x84c>
   10d6c:	4184b03a 	or	r2,r8,r6
   10d70:	10000e26 	beq	r2,zero,10dac <__adddf3+0x7d8>
   10d74:	2804d0fa 	srli	r2,r5,3
   10d78:	8822d0fa 	srli	r17,r17,3
   10d7c:	280a977a 	slli	r5,r5,29
   10d80:	10c0022c 	andhi	r3,r2,8
   10d84:	2c62b03a 	or	r17,r5,r17
   10d88:	183feb26 	beq	r3,zero,10d38 <__alt_mem_Flash_flash_data+0xf4010d38>
   10d8c:	4008d0fa 	srli	r4,r8,3
   10d90:	20c0022c 	andhi	r3,r4,8
   10d94:	183fe81e 	bne	r3,zero,10d38 <__alt_mem_Flash_flash_data+0xf4010d38>
   10d98:	300cd0fa 	srli	r6,r6,3
   10d9c:	4010977a 	slli	r8,r8,29
   10da0:	2005883a 	mov	r2,r4
   10da4:	41a2b03a 	or	r17,r8,r6
   10da8:	003fe306 	br	10d38 <__alt_mem_Flash_flash_data+0xf4010d38>
   10dac:	0401ffc4 	movi	r16,2047
   10db0:	003e2706 	br	10650 <__alt_mem_Flash_flash_data+0xf4010650>
   10db4:	0011883a 	mov	r8,zero
   10db8:	003f8306 	br	10bc8 <__alt_mem_Flash_flash_data+0xf4010bc8>
   10dbc:	193ff804 	addi	r4,r3,-32
   10dc0:	02400804 	movi	r9,32
   10dc4:	2908d83a 	srl	r4,r5,r4
   10dc8:	1a402526 	beq	r3,r9,10e60 <__adddf3+0x88c>
   10dcc:	02401004 	movi	r9,64
   10dd0:	48c7c83a 	sub	r3,r9,r3
   10dd4:	28ca983a 	sll	r5,r5,r3
   10dd8:	2c62b03a 	or	r17,r5,r17
   10ddc:	8822c03a 	cmpne	r17,r17,zero
   10de0:	8922b03a 	or	r17,r17,r4
   10de4:	0007883a 	mov	r3,zero
   10de8:	003f2f06 	br	10aa8 <__alt_mem_Flash_flash_data+0xf4010aa8>
   10dec:	01402034 	movhi	r5,128
   10df0:	0007883a 	mov	r3,zero
   10df4:	297fffc4 	addi	r5,r5,-1
   10df8:	047ffe04 	movi	r17,-8
   10dfc:	0401ffc4 	movi	r16,2047
   10e00:	003e7306 	br	107d0 <__alt_mem_Flash_flash_data+0xf40107d0>
   10e04:	2c62b03a 	or	r17,r5,r17
   10e08:	8822c03a 	cmpne	r17,r17,zero
   10e0c:	0009883a 	mov	r4,zero
   10e10:	003fa506 	br	10ca8 <__alt_mem_Flash_flash_data+0xf4010ca8>
   10e14:	400b883a 	mov	r5,r8
   10e18:	3023883a 	mov	r17,r6
   10e1c:	003e0c06 	br	10650 <__alt_mem_Flash_flash_data+0xf4010650>
   10e20:	400b883a 	mov	r5,r8
   10e24:	3023883a 	mov	r17,r6
   10e28:	0401ffc4 	movi	r16,2047
   10e2c:	003e0806 	br	10650 <__alt_mem_Flash_flash_data+0xf4010650>
   10e30:	21fff804 	addi	r7,r4,-32
   10e34:	02400804 	movi	r9,32
   10e38:	29ced83a 	srl	r7,r5,r7
   10e3c:	22400a26 	beq	r4,r9,10e68 <__adddf3+0x894>
   10e40:	02401004 	movi	r9,64
   10e44:	4909c83a 	sub	r4,r9,r4
   10e48:	290a983a 	sll	r5,r5,r4
   10e4c:	2c62b03a 	or	r17,r5,r17
   10e50:	8822c03a 	cmpne	r17,r17,zero
   10e54:	89e2b03a 	or	r17,r17,r7
   10e58:	0009883a 	mov	r4,zero
   10e5c:	003f9206 	br	10ca8 <__alt_mem_Flash_flash_data+0xf4010ca8>
   10e60:	000b883a 	mov	r5,zero
   10e64:	003fdc06 	br	10dd8 <__alt_mem_Flash_flash_data+0xf4010dd8>
   10e68:	000b883a 	mov	r5,zero
   10e6c:	003ff706 	br	10e4c <__alt_mem_Flash_flash_data+0xf4010e4c>

00010e70 <__divdf3>:
   10e70:	defff204 	addi	sp,sp,-56
   10e74:	dd000815 	stw	r20,32(sp)
   10e78:	2828d53a 	srli	r20,r5,20
   10e7c:	dd800a15 	stw	r22,40(sp)
   10e80:	282cd7fa 	srli	r22,r5,31
   10e84:	dc000415 	stw	r16,16(sp)
   10e88:	04000434 	movhi	r16,16
   10e8c:	df000c15 	stw	fp,48(sp)
   10e90:	dcc00715 	stw	r19,28(sp)
   10e94:	dc800615 	stw	r18,24(sp)
   10e98:	dc400515 	stw	r17,20(sp)
   10e9c:	843fffc4 	addi	r16,r16,-1
   10ea0:	dfc00d15 	stw	ra,52(sp)
   10ea4:	ddc00b15 	stw	r23,44(sp)
   10ea8:	dd400915 	stw	r21,36(sp)
   10eac:	a501ffcc 	andi	r20,r20,2047
   10eb0:	2025883a 	mov	r18,r4
   10eb4:	2027883a 	mov	r19,r4
   10eb8:	2c22703a 	and	r17,r5,r16
   10ebc:	b7003fcc 	andi	fp,r22,255
   10ec0:	a0005e26 	beq	r20,zero,1103c <__divdf3+0x1cc>
   10ec4:	0081ffc4 	movi	r2,2047
   10ec8:	a0803526 	beq	r20,r2,10fa0 <__divdf3+0x130>
   10ecc:	8c000434 	orhi	r16,r17,16
   10ed0:	2004d77a 	srli	r2,r4,29
   10ed4:	802090fa 	slli	r16,r16,3
   10ed8:	202690fa 	slli	r19,r4,3
   10edc:	a53f0044 	addi	r20,r20,-1023
   10ee0:	80a2b03a 	or	r17,r16,r2
   10ee4:	0025883a 	mov	r18,zero
   10ee8:	0011883a 	mov	r8,zero
   10eec:	380ad53a 	srli	r5,r7,20
   10ef0:	382ed7fa 	srli	r23,r7,31
   10ef4:	04000434 	movhi	r16,16
   10ef8:	843fffc4 	addi	r16,r16,-1
   10efc:	2941ffcc 	andi	r5,r5,2047
   10f00:	302b883a 	mov	r21,r6
   10f04:	3c20703a 	and	r16,r7,r16
   10f08:	ba403fcc 	andi	r9,r23,255
   10f0c:	28006726 	beq	r5,zero,110ac <__divdf3+0x23c>
   10f10:	0081ffc4 	movi	r2,2047
   10f14:	28805f26 	beq	r5,r2,11094 <__divdf3+0x224>
   10f18:	84000434 	orhi	r16,r16,16
   10f1c:	3004d77a 	srli	r2,r6,29
   10f20:	802090fa 	slli	r16,r16,3
   10f24:	302a90fa 	slli	r21,r6,3
   10f28:	297f0044 	addi	r5,r5,-1023
   10f2c:	80a0b03a 	or	r16,r16,r2
   10f30:	000f883a 	mov	r7,zero
   10f34:	3c86b03a 	or	r3,r7,r18
   10f38:	180690ba 	slli	r3,r3,2
   10f3c:	00800074 	movhi	r2,1
   10f40:	1083d804 	addi	r2,r2,3936
   10f44:	1887883a 	add	r3,r3,r2
   10f48:	18c00017 	ldw	r3,0(r3)
   10f4c:	b5c8f03a 	xor	r4,r22,r23
   10f50:	200d883a 	mov	r6,r4
   10f54:	24803fcc 	andi	r18,r4,255
   10f58:	a169c83a 	sub	r20,r20,r5
   10f5c:	1800683a 	jmp	r3
   10f60:	000111a8 	cmpgeui	zero,zero,1094
   10f64:	00010fd8 	cmpnei	zero,zero,1087
   10f68:	0001116c 	andhi	zero,zero,1093
   10f6c:	00010fbc 	xorhi	zero,zero,1086
   10f70:	0001116c 	andhi	zero,zero,1093
   10f74:	00011140 	call	1114 <Singleplayer+0x24>
   10f78:	0001116c 	andhi	zero,zero,1093
   10f7c:	00010fbc 	xorhi	zero,zero,1086
   10f80:	00010fd8 	cmpnei	zero,zero,1087
   10f84:	00010fd8 	cmpnei	zero,zero,1087
   10f88:	00011140 	call	1114 <Singleplayer+0x24>
   10f8c:	00010fbc 	xorhi	zero,zero,1086
   10f90:	00010fcc 	andi	zero,zero,1087
   10f94:	00010fcc 	andi	zero,zero,1087
   10f98:	00010fcc 	andi	zero,zero,1087
   10f9c:	0001117c 	xorhi	zero,zero,1093
   10fa0:	8904b03a 	or	r2,r17,r4
   10fa4:	1000631e 	bne	r2,zero,11134 <__divdf3+0x2c4>
   10fa8:	04800204 	movi	r18,8
   10fac:	0023883a 	mov	r17,zero
   10fb0:	0027883a 	mov	r19,zero
   10fb4:	02000084 	movi	r8,2
   10fb8:	003fcc06 	br	10eec <__alt_mem_Flash_flash_data+0xf4010eec>
   10fbc:	8023883a 	mov	r17,r16
   10fc0:	a827883a 	mov	r19,r21
   10fc4:	4839883a 	mov	fp,r9
   10fc8:	3811883a 	mov	r8,r7
   10fcc:	00800084 	movi	r2,2
   10fd0:	40812a1e 	bne	r8,r2,1147c <__divdf3+0x60c>
   10fd4:	e025883a 	mov	r18,fp
   10fd8:	9180004c 	andi	r6,r18,1
   10fdc:	0101ffc4 	movi	r4,2047
   10fe0:	000b883a 	mov	r5,zero
   10fe4:	0027883a 	mov	r19,zero
   10fe8:	2008953a 	slli	r4,r4,20
   10fec:	30c03fcc 	andi	r3,r6,255
   10ff0:	04000434 	movhi	r16,16
   10ff4:	180697fa 	slli	r3,r3,31
   10ff8:	843fffc4 	addi	r16,r16,-1
   10ffc:	2c20703a 	and	r16,r5,r16
   11000:	8120b03a 	or	r16,r16,r4
   11004:	80c6b03a 	or	r3,r16,r3
   11008:	9805883a 	mov	r2,r19
   1100c:	dfc00d17 	ldw	ra,52(sp)
   11010:	df000c17 	ldw	fp,48(sp)
   11014:	ddc00b17 	ldw	r23,44(sp)
   11018:	dd800a17 	ldw	r22,40(sp)
   1101c:	dd400917 	ldw	r21,36(sp)
   11020:	dd000817 	ldw	r20,32(sp)
   11024:	dcc00717 	ldw	r19,28(sp)
   11028:	dc800617 	ldw	r18,24(sp)
   1102c:	dc400517 	ldw	r17,20(sp)
   11030:	dc000417 	ldw	r16,16(sp)
   11034:	dec00e04 	addi	sp,sp,56
   11038:	f800283a 	ret
   1103c:	8904b03a 	or	r2,r17,r4
   11040:	10003726 	beq	r2,zero,11120 <__divdf3+0x2b0>
   11044:	88011c26 	beq	r17,zero,114b8 <__divdf3+0x648>
   11048:	8809883a 	mov	r4,r17
   1104c:	d9800315 	stw	r6,12(sp)
   11050:	d9c00115 	stw	r7,4(sp)
   11054:	0012b700 	call	12b70 <__clzsi2>
   11058:	d9800317 	ldw	r6,12(sp)
   1105c:	d9c00117 	ldw	r7,4(sp)
   11060:	1007883a 	mov	r3,r2
   11064:	01000a04 	movi	r4,40
   11068:	1cfffe04 	addi	r19,r3,-8
   1106c:	20c9c83a 	sub	r4,r4,r3
   11070:	8cca983a 	sll	r5,r17,r19
   11074:	9108d83a 	srl	r4,r18,r4
   11078:	94e6983a 	sll	r19,r18,r19
   1107c:	2162b03a 	or	r17,r4,r5
   11080:	053f0344 	movi	r20,-1011
   11084:	a0e9c83a 	sub	r20,r20,r3
   11088:	0025883a 	mov	r18,zero
   1108c:	0011883a 	mov	r8,zero
   11090:	003f9606 	br	10eec <__alt_mem_Flash_flash_data+0xf4010eec>
   11094:	8184b03a 	or	r2,r16,r6
   11098:	10001f1e 	bne	r2,zero,11118 <__divdf3+0x2a8>
   1109c:	0021883a 	mov	r16,zero
   110a0:	002b883a 	mov	r21,zero
   110a4:	01c00084 	movi	r7,2
   110a8:	003fa206 	br	10f34 <__alt_mem_Flash_flash_data+0xf4010f34>
   110ac:	8184b03a 	or	r2,r16,r6
   110b0:	10001526 	beq	r2,zero,11108 <__divdf3+0x298>
   110b4:	80010c26 	beq	r16,zero,114e8 <__divdf3+0x678>
   110b8:	8009883a 	mov	r4,r16
   110bc:	d9800315 	stw	r6,12(sp)
   110c0:	da000215 	stw	r8,8(sp)
   110c4:	da400015 	stw	r9,0(sp)
   110c8:	0012b700 	call	12b70 <__clzsi2>
   110cc:	d9800317 	ldw	r6,12(sp)
   110d0:	da000217 	ldw	r8,8(sp)
   110d4:	da400017 	ldw	r9,0(sp)
   110d8:	1007883a 	mov	r3,r2
   110dc:	01000a04 	movi	r4,40
   110e0:	1d7ffe04 	addi	r21,r3,-8
   110e4:	20c9c83a 	sub	r4,r4,r3
   110e8:	8560983a 	sll	r16,r16,r21
   110ec:	3108d83a 	srl	r4,r6,r4
   110f0:	356a983a 	sll	r21,r6,r21
   110f4:	2420b03a 	or	r16,r4,r16
   110f8:	017f0344 	movi	r5,-1011
   110fc:	28cbc83a 	sub	r5,r5,r3
   11100:	000f883a 	mov	r7,zero
   11104:	003f8b06 	br	10f34 <__alt_mem_Flash_flash_data+0xf4010f34>
   11108:	0021883a 	mov	r16,zero
   1110c:	002b883a 	mov	r21,zero
   11110:	01c00044 	movi	r7,1
   11114:	003f8706 	br	10f34 <__alt_mem_Flash_flash_data+0xf4010f34>
   11118:	01c000c4 	movi	r7,3
   1111c:	003f8506 	br	10f34 <__alt_mem_Flash_flash_data+0xf4010f34>
   11120:	04800104 	movi	r18,4
   11124:	0023883a 	mov	r17,zero
   11128:	0027883a 	mov	r19,zero
   1112c:	02000044 	movi	r8,1
   11130:	003f6e06 	br	10eec <__alt_mem_Flash_flash_data+0xf4010eec>
   11134:	04800304 	movi	r18,12
   11138:	020000c4 	movi	r8,3
   1113c:	003f6b06 	br	10eec <__alt_mem_Flash_flash_data+0xf4010eec>
   11140:	01400434 	movhi	r5,16
   11144:	000d883a 	mov	r6,zero
   11148:	297fffc4 	addi	r5,r5,-1
   1114c:	04ffffc4 	movi	r19,-1
   11150:	0101ffc4 	movi	r4,2047
   11154:	003fa406 	br	10fe8 <__alt_mem_Flash_flash_data+0xf4010fe8>
   11158:	043f0084 	movi	r16,-1022
   1115c:	8521c83a 	sub	r16,r16,r20
   11160:	00800e04 	movi	r2,56
   11164:	1401200e 	bge	r2,r16,115e8 <__divdf3+0x778>
   11168:	9180004c 	andi	r6,r18,1
   1116c:	0009883a 	mov	r4,zero
   11170:	000b883a 	mov	r5,zero
   11174:	0027883a 	mov	r19,zero
   11178:	003f9b06 	br	10fe8 <__alt_mem_Flash_flash_data+0xf4010fe8>
   1117c:	8880022c 	andhi	r2,r17,8
   11180:	1000c726 	beq	r2,zero,114a0 <__divdf3+0x630>
   11184:	8080022c 	andhi	r2,r16,8
   11188:	1000c51e 	bne	r2,zero,114a0 <__divdf3+0x630>
   1118c:	00800434 	movhi	r2,16
   11190:	81400234 	orhi	r5,r16,8
   11194:	10bfffc4 	addi	r2,r2,-1
   11198:	b80d883a 	mov	r6,r23
   1119c:	288a703a 	and	r5,r5,r2
   111a0:	a827883a 	mov	r19,r21
   111a4:	003fea06 	br	11150 <__alt_mem_Flash_flash_data+0xf4011150>
   111a8:	8440ea36 	bltu	r16,r17,11554 <__divdf3+0x6e4>
   111ac:	8c00e826 	beq	r17,r16,11550 <__divdf3+0x6e0>
   111b0:	a53fffc4 	addi	r20,r20,-1
   111b4:	882d883a 	mov	r22,r17
   111b8:	000d883a 	mov	r6,zero
   111bc:	a804d63a 	srli	r2,r21,24
   111c0:	8020923a 	slli	r16,r16,8
   111c4:	b009883a 	mov	r4,r22
   111c8:	d9800315 	stw	r6,12(sp)
   111cc:	1420b03a 	or	r16,r2,r16
   111d0:	802ed43a 	srli	r23,r16,16
   111d4:	873fffcc 	andi	fp,r16,65535
   111d8:	a82a923a 	slli	r21,r21,8
   111dc:	b80b883a 	mov	r5,r23
   111e0:	00105c40 	call	105c4 <__udivsi3>
   111e4:	b009883a 	mov	r4,r22
   111e8:	b80b883a 	mov	r5,r23
   111ec:	1023883a 	mov	r17,r2
   111f0:	00105cc0 	call	105cc <__umodsi3>
   111f4:	1004943a 	slli	r2,r2,16
   111f8:	9808d43a 	srli	r4,r19,16
   111fc:	8f2d383a 	mul	r22,r17,fp
   11200:	d9800317 	ldw	r6,12(sp)
   11204:	1106b03a 	or	r3,r2,r4
   11208:	1d80062e 	bgeu	r3,r22,11224 <__divdf3+0x3b4>
   1120c:	1c07883a 	add	r3,r3,r16
   11210:	88bfffc4 	addi	r2,r17,-1
   11214:	1c00dc36 	bltu	r3,r16,11588 <__divdf3+0x718>
   11218:	1d80db2e 	bgeu	r3,r22,11588 <__divdf3+0x718>
   1121c:	8c7fff84 	addi	r17,r17,-2
   11220:	1c07883a 	add	r3,r3,r16
   11224:	1dadc83a 	sub	r22,r3,r22
   11228:	b009883a 	mov	r4,r22
   1122c:	b80b883a 	mov	r5,r23
   11230:	d9800315 	stw	r6,12(sp)
   11234:	00105c40 	call	105c4 <__udivsi3>
   11238:	b009883a 	mov	r4,r22
   1123c:	b80b883a 	mov	r5,r23
   11240:	d8800015 	stw	r2,0(sp)
   11244:	00105cc0 	call	105cc <__umodsi3>
   11248:	da400017 	ldw	r9,0(sp)
   1124c:	1004943a 	slli	r2,r2,16
   11250:	9cffffcc 	andi	r19,r19,65535
   11254:	4f07383a 	mul	r3,r9,fp
   11258:	14c8b03a 	or	r4,r2,r19
   1125c:	d9800317 	ldw	r6,12(sp)
   11260:	20c0062e 	bgeu	r4,r3,1127c <__divdf3+0x40c>
   11264:	2409883a 	add	r4,r4,r16
   11268:	48bfffc4 	addi	r2,r9,-1
   1126c:	2400c436 	bltu	r4,r16,11580 <__divdf3+0x710>
   11270:	20c0c32e 	bgeu	r4,r3,11580 <__divdf3+0x710>
   11274:	4a7fff84 	addi	r9,r9,-2
   11278:	2409883a 	add	r4,r4,r16
   1127c:	8822943a 	slli	r17,r17,16
   11280:	a80ed43a 	srli	r7,r21,16
   11284:	aa3fffcc 	andi	r8,r21,65535
   11288:	4c62b03a 	or	r17,r9,r17
   1128c:	8816d43a 	srli	r11,r17,16
   11290:	897fffcc 	andi	r5,r17,65535
   11294:	2a15383a 	mul	r10,r5,r8
   11298:	5a19383a 	mul	r12,r11,r8
   1129c:	29cb383a 	mul	r5,r5,r7
   112a0:	5012d43a 	srli	r9,r10,16
   112a4:	20c5c83a 	sub	r2,r4,r3
   112a8:	614b883a 	add	r5,r12,r5
   112ac:	2a4b883a 	add	r5,r5,r9
   112b0:	59c7383a 	mul	r3,r11,r7
   112b4:	2b00022e 	bgeu	r5,r12,112c0 <__divdf3+0x450>
   112b8:	01000074 	movhi	r4,1
   112bc:	1907883a 	add	r3,r3,r4
   112c0:	2808d43a 	srli	r4,r5,16
   112c4:	280a943a 	slli	r5,r5,16
   112c8:	54ffffcc 	andi	r19,r10,65535
   112cc:	1907883a 	add	r3,r3,r4
   112d0:	2ccb883a 	add	r5,r5,r19
   112d4:	10c09336 	bltu	r2,r3,11524 <__divdf3+0x6b4>
   112d8:	10c0ad26 	beq	r2,r3,11590 <__divdf3+0x720>
   112dc:	10c7c83a 	sub	r3,r2,r3
   112e0:	3167c83a 	sub	r19,r6,r5
   112e4:	34ed803a 	cmpltu	r22,r6,r19
   112e8:	1dadc83a 	sub	r22,r3,r22
   112ec:	b400b226 	beq	r22,r16,115b8 <__divdf3+0x748>
   112f0:	b009883a 	mov	r4,r22
   112f4:	b80b883a 	mov	r5,r23
   112f8:	d9c00115 	stw	r7,4(sp)
   112fc:	da000215 	stw	r8,8(sp)
   11300:	00105c40 	call	105c4 <__udivsi3>
   11304:	b009883a 	mov	r4,r22
   11308:	b80b883a 	mov	r5,r23
   1130c:	d8800315 	stw	r2,12(sp)
   11310:	00105cc0 	call	105cc <__umodsi3>
   11314:	d9800317 	ldw	r6,12(sp)
   11318:	1004943a 	slli	r2,r2,16
   1131c:	9808d43a 	srli	r4,r19,16
   11320:	372d383a 	mul	r22,r6,fp
   11324:	d9c00117 	ldw	r7,4(sp)
   11328:	1106b03a 	or	r3,r2,r4
   1132c:	da000217 	ldw	r8,8(sp)
   11330:	1d80062e 	bgeu	r3,r22,1134c <__divdf3+0x4dc>
   11334:	1c07883a 	add	r3,r3,r16
   11338:	30bfffc4 	addi	r2,r6,-1
   1133c:	1c00a036 	bltu	r3,r16,115c0 <__divdf3+0x750>
   11340:	1d809f2e 	bgeu	r3,r22,115c0 <__divdf3+0x750>
   11344:	31bfff84 	addi	r6,r6,-2
   11348:	1c07883a 	add	r3,r3,r16
   1134c:	1dadc83a 	sub	r22,r3,r22
   11350:	b009883a 	mov	r4,r22
   11354:	b80b883a 	mov	r5,r23
   11358:	d9800315 	stw	r6,12(sp)
   1135c:	d9c00115 	stw	r7,4(sp)
   11360:	da000215 	stw	r8,8(sp)
   11364:	00105c40 	call	105c4 <__udivsi3>
   11368:	b009883a 	mov	r4,r22
   1136c:	b80b883a 	mov	r5,r23
   11370:	d8800015 	stw	r2,0(sp)
   11374:	00105cc0 	call	105cc <__umodsi3>
   11378:	da400017 	ldw	r9,0(sp)
   1137c:	1004943a 	slli	r2,r2,16
   11380:	993fffcc 	andi	r4,r19,65535
   11384:	4f39383a 	mul	fp,r9,fp
   11388:	1106b03a 	or	r3,r2,r4
   1138c:	d9800317 	ldw	r6,12(sp)
   11390:	d9c00117 	ldw	r7,4(sp)
   11394:	da000217 	ldw	r8,8(sp)
   11398:	1f00062e 	bgeu	r3,fp,113b4 <__divdf3+0x544>
   1139c:	1c07883a 	add	r3,r3,r16
   113a0:	48bfffc4 	addi	r2,r9,-1
   113a4:	1c008836 	bltu	r3,r16,115c8 <__divdf3+0x758>
   113a8:	1f00872e 	bgeu	r3,fp,115c8 <__divdf3+0x758>
   113ac:	4a7fff84 	addi	r9,r9,-2
   113b0:	1c07883a 	add	r3,r3,r16
   113b4:	3008943a 	slli	r4,r6,16
   113b8:	1f07c83a 	sub	r3,r3,fp
   113bc:	4926b03a 	or	r19,r9,r4
   113c0:	993fffcc 	andi	r4,r19,65535
   113c4:	980cd43a 	srli	r6,r19,16
   113c8:	220b383a 	mul	r5,r4,r8
   113cc:	21c5383a 	mul	r2,r4,r7
   113d0:	3211383a 	mul	r8,r6,r8
   113d4:	2808d43a 	srli	r4,r5,16
   113d8:	31cf383a 	mul	r7,r6,r7
   113dc:	4085883a 	add	r2,r8,r2
   113e0:	1105883a 	add	r2,r2,r4
   113e4:	1200022e 	bgeu	r2,r8,113f0 <__divdf3+0x580>
   113e8:	01000074 	movhi	r4,1
   113ec:	390f883a 	add	r7,r7,r4
   113f0:	1008d43a 	srli	r4,r2,16
   113f4:	1004943a 	slli	r2,r2,16
   113f8:	297fffcc 	andi	r5,r5,65535
   113fc:	390f883a 	add	r7,r7,r4
   11400:	1145883a 	add	r2,r2,r5
   11404:	19c06536 	bltu	r3,r7,1159c <__divdf3+0x72c>
   11408:	19c09f26 	beq	r3,r7,11688 <__divdf3+0x818>
   1140c:	9cc00054 	ori	r19,r19,1
   11410:	a100ffc4 	addi	r4,r20,1023
   11414:	013f500e 	bge	zero,r4,11158 <__alt_mem_Flash_flash_data+0xf4011158>
   11418:	988001cc 	andi	r2,r19,7
   1141c:	10000726 	beq	r2,zero,1143c <__divdf3+0x5cc>
   11420:	98c003cc 	andi	r3,r19,15
   11424:	00800104 	movi	r2,4
   11428:	18800426 	beq	r3,r2,1143c <__divdf3+0x5cc>
   1142c:	9885883a 	add	r2,r19,r2
   11430:	14e1803a 	cmpltu	r16,r2,r19
   11434:	8c23883a 	add	r17,r17,r16
   11438:	1027883a 	mov	r19,r2
   1143c:	8880402c 	andhi	r2,r17,256
   11440:	10000426 	beq	r2,zero,11454 <__divdf3+0x5e4>
   11444:	00bfc034 	movhi	r2,65280
   11448:	10bfffc4 	addi	r2,r2,-1
   1144c:	a1010004 	addi	r4,r20,1024
   11450:	88a2703a 	and	r17,r17,r2
   11454:	0081ff84 	movi	r2,2046
   11458:	113edf16 	blt	r2,r4,10fd8 <__alt_mem_Flash_flash_data+0xf4010fd8>
   1145c:	9826d0fa 	srli	r19,r19,3
   11460:	8804977a 	slli	r2,r17,29
   11464:	8820927a 	slli	r16,r17,9
   11468:	2101ffcc 	andi	r4,r4,2047
   1146c:	14e6b03a 	or	r19,r2,r19
   11470:	800ad33a 	srli	r5,r16,12
   11474:	9180004c 	andi	r6,r18,1
   11478:	003edb06 	br	10fe8 <__alt_mem_Flash_flash_data+0xf4010fe8>
   1147c:	008000c4 	movi	r2,3
   11480:	4080a826 	beq	r8,r2,11724 <__divdf3+0x8b4>
   11484:	00800044 	movi	r2,1
   11488:	4080551e 	bne	r8,r2,115e0 <__divdf3+0x770>
   1148c:	e00d883a 	mov	r6,fp
   11490:	0009883a 	mov	r4,zero
   11494:	000b883a 	mov	r5,zero
   11498:	0027883a 	mov	r19,zero
   1149c:	003ed206 	br	10fe8 <__alt_mem_Flash_flash_data+0xf4010fe8>
   114a0:	00800434 	movhi	r2,16
   114a4:	89400234 	orhi	r5,r17,8
   114a8:	10bfffc4 	addi	r2,r2,-1
   114ac:	b00d883a 	mov	r6,r22
   114b0:	288a703a 	and	r5,r5,r2
   114b4:	003f2606 	br	11150 <__alt_mem_Flash_flash_data+0xf4011150>
   114b8:	d9800315 	stw	r6,12(sp)
   114bc:	d9c00115 	stw	r7,4(sp)
   114c0:	0012b700 	call	12b70 <__clzsi2>
   114c4:	10c00804 	addi	r3,r2,32
   114c8:	010009c4 	movi	r4,39
   114cc:	d9800317 	ldw	r6,12(sp)
   114d0:	d9c00117 	ldw	r7,4(sp)
   114d4:	20fee30e 	bge	r4,r3,11064 <__alt_mem_Flash_flash_data+0xf4011064>
   114d8:	117ffe04 	addi	r5,r2,-8
   114dc:	9162983a 	sll	r17,r18,r5
   114e0:	0027883a 	mov	r19,zero
   114e4:	003ee606 	br	11080 <__alt_mem_Flash_flash_data+0xf4011080>
   114e8:	3009883a 	mov	r4,r6
   114ec:	d9800315 	stw	r6,12(sp)
   114f0:	da000215 	stw	r8,8(sp)
   114f4:	da400015 	stw	r9,0(sp)
   114f8:	0012b700 	call	12b70 <__clzsi2>
   114fc:	10c00804 	addi	r3,r2,32
   11500:	010009c4 	movi	r4,39
   11504:	d9800317 	ldw	r6,12(sp)
   11508:	da000217 	ldw	r8,8(sp)
   1150c:	da400017 	ldw	r9,0(sp)
   11510:	20fef20e 	bge	r4,r3,110dc <__alt_mem_Flash_flash_data+0xf40110dc>
   11514:	10bffe04 	addi	r2,r2,-8
   11518:	a8a0983a 	sll	r16,r21,r2
   1151c:	002b883a 	mov	r21,zero
   11520:	003ef506 	br	110f8 <__alt_mem_Flash_flash_data+0xf40110f8>
   11524:	354d883a 	add	r6,r6,r21
   11528:	3549803a 	cmpltu	r4,r6,r21
   1152c:	2409883a 	add	r4,r4,r16
   11530:	2089883a 	add	r4,r4,r2
   11534:	88bfffc4 	addi	r2,r17,-1
   11538:	81000c2e 	bgeu	r16,r4,1156c <__divdf3+0x6fc>
   1153c:	20c04436 	bltu	r4,r3,11650 <__divdf3+0x7e0>
   11540:	19006f26 	beq	r3,r4,11700 <__divdf3+0x890>
   11544:	20c7c83a 	sub	r3,r4,r3
   11548:	1023883a 	mov	r17,r2
   1154c:	003f6406 	br	112e0 <__alt_mem_Flash_flash_data+0xf40112e0>
   11550:	9d7f1736 	bltu	r19,r21,111b0 <__alt_mem_Flash_flash_data+0xf40111b0>
   11554:	9806d07a 	srli	r3,r19,1
   11558:	880497fa 	slli	r2,r17,31
   1155c:	980c97fa 	slli	r6,r19,31
   11560:	882cd07a 	srli	r22,r17,1
   11564:	18a6b03a 	or	r19,r3,r2
   11568:	003f1406 	br	111bc <__alt_mem_Flash_flash_data+0xf40111bc>
   1156c:	243ff51e 	bne	r4,r16,11544 <__alt_mem_Flash_flash_data+0xf4011544>
   11570:	357ff22e 	bgeu	r6,r21,1153c <__alt_mem_Flash_flash_data+0xf401153c>
   11574:	80c7c83a 	sub	r3,r16,r3
   11578:	1023883a 	mov	r17,r2
   1157c:	003f5806 	br	112e0 <__alt_mem_Flash_flash_data+0xf40112e0>
   11580:	1013883a 	mov	r9,r2
   11584:	003f3d06 	br	1127c <__alt_mem_Flash_flash_data+0xf401127c>
   11588:	1023883a 	mov	r17,r2
   1158c:	003f2506 	br	11224 <__alt_mem_Flash_flash_data+0xf4011224>
   11590:	317fe436 	bltu	r6,r5,11524 <__alt_mem_Flash_flash_data+0xf4011524>
   11594:	0007883a 	mov	r3,zero
   11598:	003f5106 	br	112e0 <__alt_mem_Flash_flash_data+0xf40112e0>
   1159c:	1c07883a 	add	r3,r3,r16
   115a0:	993fffc4 	addi	r4,r19,-1
   115a4:	1c000a2e 	bgeu	r3,r16,115d0 <__divdf3+0x760>
   115a8:	2027883a 	mov	r19,r4
   115ac:	19ff971e 	bne	r3,r7,1140c <__alt_mem_Flash_flash_data+0xf401140c>
   115b0:	a8bf961e 	bne	r21,r2,1140c <__alt_mem_Flash_flash_data+0xf401140c>
   115b4:	003f9606 	br	11410 <__alt_mem_Flash_flash_data+0xf4011410>
   115b8:	04ffffc4 	movi	r19,-1
   115bc:	003f9406 	br	11410 <__alt_mem_Flash_flash_data+0xf4011410>
   115c0:	100d883a 	mov	r6,r2
   115c4:	003f6106 	br	1134c <__alt_mem_Flash_flash_data+0xf401134c>
   115c8:	1013883a 	mov	r9,r2
   115cc:	003f7906 	br	113b4 <__alt_mem_Flash_flash_data+0xf40113b4>
   115d0:	19c02636 	bltu	r3,r7,1166c <__divdf3+0x7fc>
   115d4:	38c04d26 	beq	r7,r3,1170c <__divdf3+0x89c>
   115d8:	2027883a 	mov	r19,r4
   115dc:	003f8b06 	br	1140c <__alt_mem_Flash_flash_data+0xf401140c>
   115e0:	e025883a 	mov	r18,fp
   115e4:	003f8a06 	br	11410 <__alt_mem_Flash_flash_data+0xf4011410>
   115e8:	008007c4 	movi	r2,31
   115ec:	14002a16 	blt	r2,r16,11698 <__divdf3+0x828>
   115f0:	a5010784 	addi	r20,r20,1054
   115f4:	8d04983a 	sll	r2,r17,r20
   115f8:	9c06d83a 	srl	r3,r19,r16
   115fc:	9d28983a 	sll	r20,r19,r20
   11600:	8c20d83a 	srl	r16,r17,r16
   11604:	1886b03a 	or	r3,r3,r2
   11608:	a004c03a 	cmpne	r2,r20,zero
   1160c:	1884b03a 	or	r2,r3,r2
   11610:	10c001cc 	andi	r3,r2,7
   11614:	18000726 	beq	r3,zero,11634 <__divdf3+0x7c4>
   11618:	110003cc 	andi	r4,r2,15
   1161c:	00c00104 	movi	r3,4
   11620:	20c00426 	beq	r4,r3,11634 <__divdf3+0x7c4>
   11624:	10c00104 	addi	r3,r2,4
   11628:	1885803a 	cmpltu	r2,r3,r2
   1162c:	80a1883a 	add	r16,r16,r2
   11630:	1805883a 	mov	r2,r3
   11634:	80c0202c 	andhi	r3,r16,128
   11638:	18002d26 	beq	r3,zero,116f0 <__divdf3+0x880>
   1163c:	9180004c 	andi	r6,r18,1
   11640:	01000044 	movi	r4,1
   11644:	000b883a 	mov	r5,zero
   11648:	0027883a 	mov	r19,zero
   1164c:	003e6606 	br	10fe8 <__alt_mem_Flash_flash_data+0xf4010fe8>
   11650:	354d883a 	add	r6,r6,r21
   11654:	356d803a 	cmpltu	r22,r6,r21
   11658:	b42d883a 	add	r22,r22,r16
   1165c:	b12d883a 	add	r22,r22,r4
   11660:	8c7fff84 	addi	r17,r17,-2
   11664:	b0c7c83a 	sub	r3,r22,r3
   11668:	003f1d06 	br	112e0 <__alt_mem_Flash_flash_data+0xf40112e0>
   1166c:	ad4b883a 	add	r5,r21,r21
   11670:	2d6b803a 	cmpltu	r21,r5,r21
   11674:	ac2b883a 	add	r21,r21,r16
   11678:	1d47883a 	add	r3,r3,r21
   1167c:	993fff84 	addi	r4,r19,-2
   11680:	282b883a 	mov	r21,r5
   11684:	003fc806 	br	115a8 <__alt_mem_Flash_flash_data+0xf40115a8>
   11688:	103fc41e 	bne	r2,zero,1159c <__alt_mem_Flash_flash_data+0xf401159c>
   1168c:	002b883a 	mov	r21,zero
   11690:	a8bf5e1e 	bne	r21,r2,1140c <__alt_mem_Flash_flash_data+0xf401140c>
   11694:	003f5e06 	br	11410 <__alt_mem_Flash_flash_data+0xf4011410>
   11698:	00bef884 	movi	r2,-1054
   1169c:	1505c83a 	sub	r2,r2,r20
   116a0:	00c00804 	movi	r3,32
   116a4:	8884d83a 	srl	r2,r17,r2
   116a8:	80c01c26 	beq	r16,r3,1171c <__divdf3+0x8ac>
   116ac:	a0c10f84 	addi	r3,r20,1086
   116b0:	88c6983a 	sll	r3,r17,r3
   116b4:	1cc6b03a 	or	r3,r3,r19
   116b8:	1806c03a 	cmpne	r3,r3,zero
   116bc:	1884b03a 	or	r2,r3,r2
   116c0:	140001cc 	andi	r16,r2,7
   116c4:	8000061e 	bne	r16,zero,116e0 <__divdf3+0x870>
   116c8:	000b883a 	mov	r5,zero
   116cc:	1004d0fa 	srli	r2,r2,3
   116d0:	9180004c 	andi	r6,r18,1
   116d4:	0009883a 	mov	r4,zero
   116d8:	1426b03a 	or	r19,r2,r16
   116dc:	003e4206 	br	10fe8 <__alt_mem_Flash_flash_data+0xf4010fe8>
   116e0:	110003cc 	andi	r4,r2,15
   116e4:	00c00104 	movi	r3,4
   116e8:	0021883a 	mov	r16,zero
   116ec:	20ffcd1e 	bne	r4,r3,11624 <__alt_mem_Flash_flash_data+0xf4011624>
   116f0:	800a927a 	slli	r5,r16,9
   116f4:	8020977a 	slli	r16,r16,29
   116f8:	280ad33a 	srli	r5,r5,12
   116fc:	003ff306 	br	116cc <__alt_mem_Flash_flash_data+0xf40116cc>
   11700:	317fd336 	bltu	r6,r5,11650 <__alt_mem_Flash_flash_data+0xf4011650>
   11704:	1023883a 	mov	r17,r2
   11708:	003fa206 	br	11594 <__alt_mem_Flash_flash_data+0xf4011594>
   1170c:	a8bfd736 	bltu	r21,r2,1166c <__alt_mem_Flash_flash_data+0xf401166c>
   11710:	2027883a 	mov	r19,r4
   11714:	a8bf3d1e 	bne	r21,r2,1140c <__alt_mem_Flash_flash_data+0xf401140c>
   11718:	003f3d06 	br	11410 <__alt_mem_Flash_flash_data+0xf4011410>
   1171c:	0007883a 	mov	r3,zero
   11720:	003fe406 	br	116b4 <__alt_mem_Flash_flash_data+0xf40116b4>
   11724:	00800434 	movhi	r2,16
   11728:	89400234 	orhi	r5,r17,8
   1172c:	10bfffc4 	addi	r2,r2,-1
   11730:	e00d883a 	mov	r6,fp
   11734:	288a703a 	and	r5,r5,r2
   11738:	003e8506 	br	11150 <__alt_mem_Flash_flash_data+0xf4011150>

0001173c <__eqdf2>:
   1173c:	2804d53a 	srli	r2,r5,20
   11740:	3806d53a 	srli	r3,r7,20
   11744:	02000434 	movhi	r8,16
   11748:	423fffc4 	addi	r8,r8,-1
   1174c:	1081ffcc 	andi	r2,r2,2047
   11750:	0241ffc4 	movi	r9,2047
   11754:	2a14703a 	and	r10,r5,r8
   11758:	18c1ffcc 	andi	r3,r3,2047
   1175c:	3a10703a 	and	r8,r7,r8
   11760:	280ad7fa 	srli	r5,r5,31
   11764:	380ed7fa 	srli	r7,r7,31
   11768:	12400f26 	beq	r2,r9,117a8 <__eqdf2+0x6c>
   1176c:	0241ffc4 	movi	r9,2047
   11770:	1a400326 	beq	r3,r9,11780 <__eqdf2+0x44>
   11774:	10c00526 	beq	r2,r3,1178c <__eqdf2+0x50>
   11778:	00800044 	movi	r2,1
   1177c:	f800283a 	ret
   11780:	4192b03a 	or	r9,r8,r6
   11784:	483ffc1e 	bne	r9,zero,11778 <__alt_mem_Flash_flash_data+0xf4011778>
   11788:	10fffb1e 	bne	r2,r3,11778 <__alt_mem_Flash_flash_data+0xf4011778>
   1178c:	523ffa1e 	bne	r10,r8,11778 <__alt_mem_Flash_flash_data+0xf4011778>
   11790:	21bff91e 	bne	r4,r6,11778 <__alt_mem_Flash_flash_data+0xf4011778>
   11794:	29c00826 	beq	r5,r7,117b8 <__eqdf2+0x7c>
   11798:	103ff71e 	bne	r2,zero,11778 <__alt_mem_Flash_flash_data+0xf4011778>
   1179c:	5104b03a 	or	r2,r10,r4
   117a0:	1004c03a 	cmpne	r2,r2,zero
   117a4:	f800283a 	ret
   117a8:	5112b03a 	or	r9,r10,r4
   117ac:	483fef26 	beq	r9,zero,1176c <__alt_mem_Flash_flash_data+0xf401176c>
   117b0:	00800044 	movi	r2,1
   117b4:	f800283a 	ret
   117b8:	0005883a 	mov	r2,zero
   117bc:	f800283a 	ret

000117c0 <__gedf2>:
   117c0:	2804d53a 	srli	r2,r5,20
   117c4:	3806d53a 	srli	r3,r7,20
   117c8:	02000434 	movhi	r8,16
   117cc:	423fffc4 	addi	r8,r8,-1
   117d0:	0241ffc4 	movi	r9,2047
   117d4:	1081ffcc 	andi	r2,r2,2047
   117d8:	2a14703a 	and	r10,r5,r8
   117dc:	1a46703a 	and	r3,r3,r9
   117e0:	3a10703a 	and	r8,r7,r8
   117e4:	280ad7fa 	srli	r5,r5,31
   117e8:	380ed7fa 	srli	r7,r7,31
   117ec:	12400b26 	beq	r2,r9,1181c <__gedf2+0x5c>
   117f0:	1a401626 	beq	r3,r9,1184c <__gedf2+0x8c>
   117f4:	10000c1e 	bne	r2,zero,11828 <__gedf2+0x68>
   117f8:	5112b03a 	or	r9,r10,r4
   117fc:	4813003a 	cmpeq	r9,r9,zero
   11800:	4817883a 	mov	r11,r9
   11804:	18000c1e 	bne	r3,zero,11838 <__gedf2+0x78>
   11808:	4198b03a 	or	r12,r8,r6
   1180c:	60000a1e 	bne	r12,zero,11838 <__gedf2+0x78>
   11810:	48001326 	beq	r9,zero,11860 <__gedf2+0xa0>
   11814:	0005883a 	mov	r2,zero
   11818:	f800283a 	ret
   1181c:	5112b03a 	or	r9,r10,r4
   11820:	4800191e 	bne	r9,zero,11888 <__gedf2+0xc8>
   11824:	18800926 	beq	r3,r2,1184c <__gedf2+0x8c>
   11828:	18000b1e 	bne	r3,zero,11858 <__gedf2+0x98>
   1182c:	4192b03a 	or	r9,r8,r6
   11830:	0017883a 	mov	r11,zero
   11834:	48000a26 	beq	r9,zero,11860 <__gedf2+0xa0>
   11838:	39c03fcc 	andi	r7,r7,255
   1183c:	58000726 	beq	r11,zero,1185c <__gedf2+0x9c>
   11840:	3800081e 	bne	r7,zero,11864 <__gedf2+0xa4>
   11844:	00bfffc4 	movi	r2,-1
   11848:	f800283a 	ret
   1184c:	4192b03a 	or	r9,r8,r6
   11850:	48000d1e 	bne	r9,zero,11888 <__gedf2+0xc8>
   11854:	103fe826 	beq	r2,zero,117f8 <__alt_mem_Flash_flash_data+0xf40117f8>
   11858:	39c03fcc 	andi	r7,r7,255
   1185c:	29c00326 	beq	r5,r7,1186c <__gedf2+0xac>
   11860:	283ff81e 	bne	r5,zero,11844 <__alt_mem_Flash_flash_data+0xf4011844>
   11864:	00800044 	movi	r2,1
   11868:	f800283a 	ret
   1186c:	18bffc16 	blt	r3,r2,11860 <__alt_mem_Flash_flash_data+0xf4011860>
   11870:	10c00316 	blt	r2,r3,11880 <__gedf2+0xc0>
   11874:	42bffa36 	bltu	r8,r10,11860 <__alt_mem_Flash_flash_data+0xf4011860>
   11878:	52000526 	beq	r10,r8,11890 <__gedf2+0xd0>
   1187c:	523fe52e 	bgeu	r10,r8,11814 <__alt_mem_Flash_flash_data+0xf4011814>
   11880:	283ff026 	beq	r5,zero,11844 <__alt_mem_Flash_flash_data+0xf4011844>
   11884:	003ff706 	br	11864 <__alt_mem_Flash_flash_data+0xf4011864>
   11888:	00bfff84 	movi	r2,-2
   1188c:	f800283a 	ret
   11890:	313ff336 	bltu	r6,r4,11860 <__alt_mem_Flash_flash_data+0xf4011860>
   11894:	21bfdf2e 	bgeu	r4,r6,11814 <__alt_mem_Flash_flash_data+0xf4011814>
   11898:	283fea26 	beq	r5,zero,11844 <__alt_mem_Flash_flash_data+0xf4011844>
   1189c:	003ff106 	br	11864 <__alt_mem_Flash_flash_data+0xf4011864>

000118a0 <__ledf2>:
   118a0:	2804d53a 	srli	r2,r5,20
   118a4:	3810d53a 	srli	r8,r7,20
   118a8:	00c00434 	movhi	r3,16
   118ac:	18ffffc4 	addi	r3,r3,-1
   118b0:	0241ffc4 	movi	r9,2047
   118b4:	1081ffcc 	andi	r2,r2,2047
   118b8:	28d4703a 	and	r10,r5,r3
   118bc:	4250703a 	and	r8,r8,r9
   118c0:	38c6703a 	and	r3,r7,r3
   118c4:	280ad7fa 	srli	r5,r5,31
   118c8:	380ed7fa 	srli	r7,r7,31
   118cc:	12400b26 	beq	r2,r9,118fc <__ledf2+0x5c>
   118d0:	42401926 	beq	r8,r9,11938 <__ledf2+0x98>
   118d4:	10000c1e 	bne	r2,zero,11908 <__ledf2+0x68>
   118d8:	5112b03a 	or	r9,r10,r4
   118dc:	4813003a 	cmpeq	r9,r9,zero
   118e0:	4817883a 	mov	r11,r9
   118e4:	40000f26 	beq	r8,zero,11924 <__ledf2+0x84>
   118e8:	39c03fcc 	andi	r7,r7,255
   118ec:	58001826 	beq	r11,zero,11950 <__ledf2+0xb0>
   118f0:	38000a1e 	bne	r7,zero,1191c <__ledf2+0x7c>
   118f4:	00bfffc4 	movi	r2,-1
   118f8:	f800283a 	ret
   118fc:	5112b03a 	or	r9,r10,r4
   11900:	48000f1e 	bne	r9,zero,11940 <__ledf2+0xa0>
   11904:	40800c26 	beq	r8,r2,11938 <__ledf2+0x98>
   11908:	4000101e 	bne	r8,zero,1194c <__ledf2+0xac>
   1190c:	1992b03a 	or	r9,r3,r6
   11910:	0017883a 	mov	r11,zero
   11914:	483ff41e 	bne	r9,zero,118e8 <__alt_mem_Flash_flash_data+0xf40118e8>
   11918:	283ff61e 	bne	r5,zero,118f4 <__alt_mem_Flash_flash_data+0xf40118f4>
   1191c:	00800044 	movi	r2,1
   11920:	f800283a 	ret
   11924:	1998b03a 	or	r12,r3,r6
   11928:	603fef1e 	bne	r12,zero,118e8 <__alt_mem_Flash_flash_data+0xf40118e8>
   1192c:	483ffa26 	beq	r9,zero,11918 <__alt_mem_Flash_flash_data+0xf4011918>
   11930:	0005883a 	mov	r2,zero
   11934:	f800283a 	ret
   11938:	1992b03a 	or	r9,r3,r6
   1193c:	48000226 	beq	r9,zero,11948 <__ledf2+0xa8>
   11940:	00800084 	movi	r2,2
   11944:	f800283a 	ret
   11948:	103fe326 	beq	r2,zero,118d8 <__alt_mem_Flash_flash_data+0xf40118d8>
   1194c:	39c03fcc 	andi	r7,r7,255
   11950:	29fff11e 	bne	r5,r7,11918 <__alt_mem_Flash_flash_data+0xf4011918>
   11954:	40bff016 	blt	r8,r2,11918 <__alt_mem_Flash_flash_data+0xf4011918>
   11958:	12000316 	blt	r2,r8,11968 <__ledf2+0xc8>
   1195c:	1abfee36 	bltu	r3,r10,11918 <__alt_mem_Flash_flash_data+0xf4011918>
   11960:	50c00326 	beq	r10,r3,11970 <__ledf2+0xd0>
   11964:	50fff22e 	bgeu	r10,r3,11930 <__alt_mem_Flash_flash_data+0xf4011930>
   11968:	283fe226 	beq	r5,zero,118f4 <__alt_mem_Flash_flash_data+0xf40118f4>
   1196c:	003feb06 	br	1191c <__alt_mem_Flash_flash_data+0xf401191c>
   11970:	313fe936 	bltu	r6,r4,11918 <__alt_mem_Flash_flash_data+0xf4011918>
   11974:	21bfee2e 	bgeu	r4,r6,11930 <__alt_mem_Flash_flash_data+0xf4011930>
   11978:	283fde26 	beq	r5,zero,118f4 <__alt_mem_Flash_flash_data+0xf40118f4>
   1197c:	003fe706 	br	1191c <__alt_mem_Flash_flash_data+0xf401191c>

00011980 <__muldf3>:
   11980:	defff204 	addi	sp,sp,-56
   11984:	2804d53a 	srli	r2,r5,20
   11988:	dd800a15 	stw	r22,40(sp)
   1198c:	282cd7fa 	srli	r22,r5,31
   11990:	dc000415 	stw	r16,16(sp)
   11994:	04000434 	movhi	r16,16
   11998:	df000c15 	stw	fp,48(sp)
   1199c:	dd000815 	stw	r20,32(sp)
   119a0:	dcc00715 	stw	r19,28(sp)
   119a4:	dc800615 	stw	r18,24(sp)
   119a8:	dc400515 	stw	r17,20(sp)
   119ac:	843fffc4 	addi	r16,r16,-1
   119b0:	dfc00d15 	stw	ra,52(sp)
   119b4:	ddc00b15 	stw	r23,44(sp)
   119b8:	dd400915 	stw	r21,36(sp)
   119bc:	1501ffcc 	andi	r20,r2,2047
   119c0:	2023883a 	mov	r17,r4
   119c4:	2025883a 	mov	r18,r4
   119c8:	2c20703a 	and	r16,r5,r16
   119cc:	b027883a 	mov	r19,r22
   119d0:	b7003fcc 	andi	fp,r22,255
   119d4:	a0005926 	beq	r20,zero,11b3c <__muldf3+0x1bc>
   119d8:	0081ffc4 	movi	r2,2047
   119dc:	a0803426 	beq	r20,r2,11ab0 <__muldf3+0x130>
   119e0:	84000434 	orhi	r16,r16,16
   119e4:	2004d77a 	srli	r2,r4,29
   119e8:	802090fa 	slli	r16,r16,3
   119ec:	202490fa 	slli	r18,r4,3
   119f0:	a53f0044 	addi	r20,r20,-1023
   119f4:	80a0b03a 	or	r16,r16,r2
   119f8:	002b883a 	mov	r21,zero
   119fc:	0015883a 	mov	r10,zero
   11a00:	3812d53a 	srli	r9,r7,20
   11a04:	3806d7fa 	srli	r3,r7,31
   11a08:	02000434 	movhi	r8,16
   11a0c:	423fffc4 	addi	r8,r8,-1
   11a10:	4941ffcc 	andi	r5,r9,2047
   11a14:	302f883a 	mov	r23,r6
   11a18:	3a22703a 	and	r17,r7,r8
   11a1c:	1ac03fcc 	andi	r11,r3,255
   11a20:	28006226 	beq	r5,zero,11bac <__muldf3+0x22c>
   11a24:	0081ffc4 	movi	r2,2047
   11a28:	28805a26 	beq	r5,r2,11b94 <__muldf3+0x214>
   11a2c:	8a000434 	orhi	r8,r17,16
   11a30:	3004d77a 	srli	r2,r6,29
   11a34:	401090fa 	slli	r8,r8,3
   11a38:	302e90fa 	slli	r23,r6,3
   11a3c:	297f0044 	addi	r5,r5,-1023
   11a40:	40a2b03a 	or	r17,r8,r2
   11a44:	0013883a 	mov	r9,zero
   11a48:	4d4cb03a 	or	r6,r9,r21
   11a4c:	300c90ba 	slli	r6,r6,2
   11a50:	02000074 	movhi	r8,1
   11a54:	42069c04 	addi	r8,r8,6768
   11a58:	320d883a 	add	r6,r6,r8
   11a5c:	31800017 	ldw	r6,0(r6)
   11a60:	a14b883a 	add	r5,r20,r5
   11a64:	1dacf03a 	xor	r22,r3,r22
   11a68:	2b000044 	addi	r12,r5,1
   11a6c:	3000683a 	jmp	r6
   11a70:	00011cac 	andhi	zero,zero,1138
   11a74:	00011c98 	cmpnei	zero,zero,1138
   11a78:	00011c98 	cmpnei	zero,zero,1138
   11a7c:	00011c84 	movi	zero,1138
   11a80:	00011acc 	andi	zero,zero,1131
   11a84:	00011acc 	andi	zero,zero,1131
   11a88:	00011c6c 	andhi	zero,zero,1137
   11a8c:	00011c84 	movi	zero,1138
   11a90:	00011acc 	andi	zero,zero,1131
   11a94:	00011c6c 	andhi	zero,zero,1137
   11a98:	00011acc 	andi	zero,zero,1131
   11a9c:	00011c84 	movi	zero,1138
   11aa0:	00011ad0 	cmplti	zero,zero,1131
   11aa4:	00011ad0 	cmplti	zero,zero,1131
   11aa8:	00011ad0 	cmplti	zero,zero,1131
   11aac:	00011ea8 	cmpgeui	zero,zero,1146
   11ab0:	8104b03a 	or	r2,r16,r4
   11ab4:	10006a1e 	bne	r2,zero,11c60 <__muldf3+0x2e0>
   11ab8:	05400204 	movi	r21,8
   11abc:	0021883a 	mov	r16,zero
   11ac0:	0025883a 	mov	r18,zero
   11ac4:	02800084 	movi	r10,2
   11ac8:	003fcd06 	br	11a00 <__alt_mem_Flash_flash_data+0xf4011a00>
   11acc:	b039883a 	mov	fp,r22
   11ad0:	00800084 	movi	r2,2
   11ad4:	50804e1e 	bne	r10,r2,11c10 <__muldf3+0x290>
   11ad8:	e4c0004c 	andi	r19,fp,1
   11adc:	0101ffc4 	movi	r4,2047
   11ae0:	0021883a 	mov	r16,zero
   11ae4:	0025883a 	mov	r18,zero
   11ae8:	2008953a 	slli	r4,r4,20
   11aec:	98c03fcc 	andi	r3,r19,255
   11af0:	01400434 	movhi	r5,16
   11af4:	297fffc4 	addi	r5,r5,-1
   11af8:	180697fa 	slli	r3,r3,31
   11afc:	8160703a 	and	r16,r16,r5
   11b00:	8120b03a 	or	r16,r16,r4
   11b04:	80c6b03a 	or	r3,r16,r3
   11b08:	9005883a 	mov	r2,r18
   11b0c:	dfc00d17 	ldw	ra,52(sp)
   11b10:	df000c17 	ldw	fp,48(sp)
   11b14:	ddc00b17 	ldw	r23,44(sp)
   11b18:	dd800a17 	ldw	r22,40(sp)
   11b1c:	dd400917 	ldw	r21,36(sp)
   11b20:	dd000817 	ldw	r20,32(sp)
   11b24:	dcc00717 	ldw	r19,28(sp)
   11b28:	dc800617 	ldw	r18,24(sp)
   11b2c:	dc400517 	ldw	r17,20(sp)
   11b30:	dc000417 	ldw	r16,16(sp)
   11b34:	dec00e04 	addi	sp,sp,56
   11b38:	f800283a 	ret
   11b3c:	8104b03a 	or	r2,r16,r4
   11b40:	10004226 	beq	r2,zero,11c4c <__muldf3+0x2cc>
   11b44:	8000f926 	beq	r16,zero,11f2c <__muldf3+0x5ac>
   11b48:	8009883a 	mov	r4,r16
   11b4c:	d9800315 	stw	r6,12(sp)
   11b50:	d9c00015 	stw	r7,0(sp)
   11b54:	0012b700 	call	12b70 <__clzsi2>
   11b58:	d9800317 	ldw	r6,12(sp)
   11b5c:	d9c00017 	ldw	r7,0(sp)
   11b60:	1007883a 	mov	r3,r2
   11b64:	01000a04 	movi	r4,40
   11b68:	18bffe04 	addi	r2,r3,-8
   11b6c:	20c9c83a 	sub	r4,r4,r3
   11b70:	80a0983a 	sll	r16,r16,r2
   11b74:	8908d83a 	srl	r4,r17,r4
   11b78:	88a4983a 	sll	r18,r17,r2
   11b7c:	2420b03a 	or	r16,r4,r16
   11b80:	017f0344 	movi	r5,-1011
   11b84:	28e9c83a 	sub	r20,r5,r3
   11b88:	002b883a 	mov	r21,zero
   11b8c:	0015883a 	mov	r10,zero
   11b90:	003f9b06 	br	11a00 <__alt_mem_Flash_flash_data+0xf4011a00>
   11b94:	8984b03a 	or	r2,r17,r6
   11b98:	10002a1e 	bne	r2,zero,11c44 <__muldf3+0x2c4>
   11b9c:	0023883a 	mov	r17,zero
   11ba0:	002f883a 	mov	r23,zero
   11ba4:	02400084 	movi	r9,2
   11ba8:	003fa706 	br	11a48 <__alt_mem_Flash_flash_data+0xf4011a48>
   11bac:	8984b03a 	or	r2,r17,r6
   11bb0:	10002026 	beq	r2,zero,11c34 <__muldf3+0x2b4>
   11bb4:	8800cc26 	beq	r17,zero,11ee8 <__muldf3+0x568>
   11bb8:	8809883a 	mov	r4,r17
   11bbc:	d8c00215 	stw	r3,8(sp)
   11bc0:	d9800315 	stw	r6,12(sp)
   11bc4:	da800015 	stw	r10,0(sp)
   11bc8:	dac00115 	stw	r11,4(sp)
   11bcc:	0012b700 	call	12b70 <__clzsi2>
   11bd0:	d8c00217 	ldw	r3,8(sp)
   11bd4:	d9800317 	ldw	r6,12(sp)
   11bd8:	da800017 	ldw	r10,0(sp)
   11bdc:	dac00117 	ldw	r11,4(sp)
   11be0:	1009883a 	mov	r4,r2
   11be4:	01400a04 	movi	r5,40
   11be8:	25fffe04 	addi	r23,r4,-8
   11bec:	290bc83a 	sub	r5,r5,r4
   11bf0:	8dd0983a 	sll	r8,r17,r23
   11bf4:	314ad83a 	srl	r5,r6,r5
   11bf8:	35ee983a 	sll	r23,r6,r23
   11bfc:	2a22b03a 	or	r17,r5,r8
   11c00:	017f0344 	movi	r5,-1011
   11c04:	290bc83a 	sub	r5,r5,r4
   11c08:	0013883a 	mov	r9,zero
   11c0c:	003f8e06 	br	11a48 <__alt_mem_Flash_flash_data+0xf4011a48>
   11c10:	008000c4 	movi	r2,3
   11c14:	50811d26 	beq	r10,r2,1208c <__muldf3+0x70c>
   11c18:	00800044 	movi	r2,1
   11c1c:	5080e01e 	bne	r10,r2,11fa0 <__muldf3+0x620>
   11c20:	e0a6703a 	and	r19,fp,r2
   11c24:	0009883a 	mov	r4,zero
   11c28:	0021883a 	mov	r16,zero
   11c2c:	0025883a 	mov	r18,zero
   11c30:	003fad06 	br	11ae8 <__alt_mem_Flash_flash_data+0xf4011ae8>
   11c34:	0023883a 	mov	r17,zero
   11c38:	002f883a 	mov	r23,zero
   11c3c:	02400044 	movi	r9,1
   11c40:	003f8106 	br	11a48 <__alt_mem_Flash_flash_data+0xf4011a48>
   11c44:	024000c4 	movi	r9,3
   11c48:	003f7f06 	br	11a48 <__alt_mem_Flash_flash_data+0xf4011a48>
   11c4c:	05400104 	movi	r21,4
   11c50:	0021883a 	mov	r16,zero
   11c54:	0025883a 	mov	r18,zero
   11c58:	02800044 	movi	r10,1
   11c5c:	003f6806 	br	11a00 <__alt_mem_Flash_flash_data+0xf4011a00>
   11c60:	05400304 	movi	r21,12
   11c64:	028000c4 	movi	r10,3
   11c68:	003f6506 	br	11a00 <__alt_mem_Flash_flash_data+0xf4011a00>
   11c6c:	04000434 	movhi	r16,16
   11c70:	0027883a 	mov	r19,zero
   11c74:	843fffc4 	addi	r16,r16,-1
   11c78:	04bfffc4 	movi	r18,-1
   11c7c:	0101ffc4 	movi	r4,2047
   11c80:	003f9906 	br	11ae8 <__alt_mem_Flash_flash_data+0xf4011ae8>
   11c84:	8821883a 	mov	r16,r17
   11c88:	b825883a 	mov	r18,r23
   11c8c:	5839883a 	mov	fp,r11
   11c90:	4815883a 	mov	r10,r9
   11c94:	003f8e06 	br	11ad0 <__alt_mem_Flash_flash_data+0xf4011ad0>
   11c98:	8821883a 	mov	r16,r17
   11c9c:	b825883a 	mov	r18,r23
   11ca0:	b039883a 	mov	fp,r22
   11ca4:	4815883a 	mov	r10,r9
   11ca8:	003f8906 	br	11ad0 <__alt_mem_Flash_flash_data+0xf4011ad0>
   11cac:	b80cd43a 	srli	r6,r23,16
   11cb0:	9006d43a 	srli	r3,r18,16
   11cb4:	90bfffcc 	andi	r2,r18,65535
   11cb8:	bdffffcc 	andi	r23,r23,65535
   11cbc:	b891383a 	mul	r8,r23,r2
   11cc0:	b8c9383a 	mul	r4,r23,r3
   11cc4:	309b383a 	mul	r13,r6,r2
   11cc8:	400ed43a 	srli	r7,r8,16
   11ccc:	30df383a 	mul	r15,r6,r3
   11cd0:	235b883a 	add	r13,r4,r13
   11cd4:	69db883a 	add	r13,r13,r7
   11cd8:	6900022e 	bgeu	r13,r4,11ce4 <__muldf3+0x364>
   11cdc:	01000074 	movhi	r4,1
   11ce0:	791f883a 	add	r15,r15,r4
   11ce4:	8828d43a 	srli	r20,r17,16
   11ce8:	8c7fffcc 	andi	r17,r17,65535
   11cec:	888f383a 	mul	r7,r17,r2
   11cf0:	88d3383a 	mul	r9,r17,r3
   11cf4:	a0a5383a 	mul	r18,r20,r2
   11cf8:	3816d43a 	srli	r11,r7,16
   11cfc:	6814943a 	slli	r10,r13,16
   11d00:	4ca5883a 	add	r18,r9,r18
   11d04:	423fffcc 	andi	r8,r8,65535
   11d08:	92e5883a 	add	r18,r18,r11
   11d0c:	6808d43a 	srli	r4,r13,16
   11d10:	5215883a 	add	r10,r10,r8
   11d14:	a0c7383a 	mul	r3,r20,r3
   11d18:	9240022e 	bgeu	r18,r9,11d24 <__muldf3+0x3a4>
   11d1c:	00800074 	movhi	r2,1
   11d20:	1887883a 	add	r3,r3,r2
   11d24:	802ad43a 	srli	r21,r16,16
   11d28:	80bfffcc 	andi	r2,r16,65535
   11d2c:	b893383a 	mul	r9,r23,r2
   11d30:	3091383a 	mul	r8,r6,r2
   11d34:	bd6f383a 	mul	r23,r23,r21
   11d38:	9026943a 	slli	r19,r18,16
   11d3c:	481ad43a 	srli	r13,r9,16
   11d40:	9024d43a 	srli	r18,r18,16
   11d44:	39ffffcc 	andi	r7,r7,65535
   11d48:	ba11883a 	add	r8,r23,r8
   11d4c:	99e7883a 	add	r19,r19,r7
   11d50:	4351883a 	add	r8,r8,r13
   11d54:	1c97883a 	add	r11,r3,r18
   11d58:	354d383a 	mul	r6,r6,r21
   11d5c:	9925883a 	add	r18,r19,r4
   11d60:	45c0022e 	bgeu	r8,r23,11d6c <__muldf3+0x3ec>
   11d64:	00c00074 	movhi	r3,1
   11d68:	30cd883a 	add	r6,r6,r3
   11d6c:	8889383a 	mul	r4,r17,r2
   11d70:	8d63383a 	mul	r17,r17,r21
   11d74:	a085383a 	mul	r2,r20,r2
   11d78:	200ed43a 	srli	r7,r4,16
   11d7c:	401cd43a 	srli	r14,r8,16
   11d80:	401a943a 	slli	r13,r8,16
   11d84:	8885883a 	add	r2,r17,r2
   11d88:	4a3fffcc 	andi	r8,r9,65535
   11d8c:	11c5883a 	add	r2,r2,r7
   11d90:	339d883a 	add	r14,r6,r14
   11d94:	6a11883a 	add	r8,r13,r8
   11d98:	a561383a 	mul	r16,r20,r21
   11d9c:	1440022e 	bgeu	r2,r17,11da8 <__muldf3+0x428>
   11da0:	00c00074 	movhi	r3,1
   11da4:	80e1883a 	add	r16,r16,r3
   11da8:	1006943a 	slli	r3,r2,16
   11dac:	213fffcc 	andi	r4,r4,65535
   11db0:	93db883a 	add	r13,r18,r15
   11db4:	1909883a 	add	r4,r3,r4
   11db8:	22c7883a 	add	r3,r4,r11
   11dbc:	6cd3803a 	cmpltu	r9,r13,r19
   11dc0:	6a09883a 	add	r4,r13,r8
   11dc4:	1a5b883a 	add	r13,r3,r9
   11dc8:	2211803a 	cmpltu	r8,r4,r8
   11dcc:	734d883a 	add	r6,r14,r13
   11dd0:	100ed43a 	srli	r7,r2,16
   11dd4:	6a53803a 	cmpltu	r9,r13,r9
   11dd8:	3205883a 	add	r2,r6,r8
   11ddc:	1ac7803a 	cmpltu	r3,r3,r11
   11de0:	1211803a 	cmpltu	r8,r2,r8
   11de4:	48c6b03a 	or	r3,r9,r3
   11de8:	338d803a 	cmpltu	r6,r6,r14
   11dec:	19c7883a 	add	r3,r3,r7
   11df0:	418cb03a 	or	r6,r8,r6
   11df4:	1987883a 	add	r3,r3,r6
   11df8:	2024927a 	slli	r18,r4,9
   11dfc:	1c07883a 	add	r3,r3,r16
   11e00:	1806927a 	slli	r3,r3,9
   11e04:	1020d5fa 	srli	r16,r2,23
   11e08:	2008d5fa 	srli	r4,r4,23
   11e0c:	9294b03a 	or	r10,r18,r10
   11e10:	1004927a 	slli	r2,r2,9
   11e14:	5024c03a 	cmpne	r18,r10,zero
   11e18:	1c20b03a 	or	r16,r3,r16
   11e1c:	9108b03a 	or	r4,r18,r4
   11e20:	80c0402c 	andhi	r3,r16,256
   11e24:	20a4b03a 	or	r18,r4,r2
   11e28:	18000726 	beq	r3,zero,11e48 <__muldf3+0x4c8>
   11e2c:	9006d07a 	srli	r3,r18,1
   11e30:	800897fa 	slli	r4,r16,31
   11e34:	9080004c 	andi	r2,r18,1
   11e38:	8020d07a 	srli	r16,r16,1
   11e3c:	10c4b03a 	or	r2,r2,r3
   11e40:	1124b03a 	or	r18,r2,r4
   11e44:	600b883a 	mov	r5,r12
   11e48:	2900ffc4 	addi	r4,r5,1023
   11e4c:	01004b0e 	bge	zero,r4,11f7c <__muldf3+0x5fc>
   11e50:	908001cc 	andi	r2,r18,7
   11e54:	10000726 	beq	r2,zero,11e74 <__muldf3+0x4f4>
   11e58:	90c003cc 	andi	r3,r18,15
   11e5c:	00800104 	movi	r2,4
   11e60:	18800426 	beq	r3,r2,11e74 <__muldf3+0x4f4>
   11e64:	9087883a 	add	r3,r18,r2
   11e68:	1c85803a 	cmpltu	r2,r3,r18
   11e6c:	80a1883a 	add	r16,r16,r2
   11e70:	1825883a 	mov	r18,r3
   11e74:	8080402c 	andhi	r2,r16,256
   11e78:	10000426 	beq	r2,zero,11e8c <__muldf3+0x50c>
   11e7c:	00bfc034 	movhi	r2,65280
   11e80:	10bfffc4 	addi	r2,r2,-1
   11e84:	29010004 	addi	r4,r5,1024
   11e88:	80a0703a 	and	r16,r16,r2
   11e8c:	0081ff84 	movi	r2,2046
   11e90:	1100320e 	bge	r2,r4,11f5c <__muldf3+0x5dc>
   11e94:	b4c0004c 	andi	r19,r22,1
   11e98:	0101ffc4 	movi	r4,2047
   11e9c:	0021883a 	mov	r16,zero
   11ea0:	0025883a 	mov	r18,zero
   11ea4:	003f1006 	br	11ae8 <__alt_mem_Flash_flash_data+0xf4011ae8>
   11ea8:	8080022c 	andhi	r2,r16,8
   11eac:	10000926 	beq	r2,zero,11ed4 <__muldf3+0x554>
   11eb0:	8880022c 	andhi	r2,r17,8
   11eb4:	1000071e 	bne	r2,zero,11ed4 <__muldf3+0x554>
   11eb8:	00800434 	movhi	r2,16
   11ebc:	8c000234 	orhi	r16,r17,8
   11ec0:	10bfffc4 	addi	r2,r2,-1
   11ec4:	1827883a 	mov	r19,r3
   11ec8:	80a0703a 	and	r16,r16,r2
   11ecc:	b825883a 	mov	r18,r23
   11ed0:	003f6a06 	br	11c7c <__alt_mem_Flash_flash_data+0xf4011c7c>
   11ed4:	00800434 	movhi	r2,16
   11ed8:	84000234 	orhi	r16,r16,8
   11edc:	10bfffc4 	addi	r2,r2,-1
   11ee0:	80a0703a 	and	r16,r16,r2
   11ee4:	003f6506 	br	11c7c <__alt_mem_Flash_flash_data+0xf4011c7c>
   11ee8:	3009883a 	mov	r4,r6
   11eec:	d8c00215 	stw	r3,8(sp)
   11ef0:	d9800315 	stw	r6,12(sp)
   11ef4:	da800015 	stw	r10,0(sp)
   11ef8:	dac00115 	stw	r11,4(sp)
   11efc:	0012b700 	call	12b70 <__clzsi2>
   11f00:	11000804 	addi	r4,r2,32
   11f04:	014009c4 	movi	r5,39
   11f08:	d8c00217 	ldw	r3,8(sp)
   11f0c:	d9800317 	ldw	r6,12(sp)
   11f10:	da800017 	ldw	r10,0(sp)
   11f14:	dac00117 	ldw	r11,4(sp)
   11f18:	293f320e 	bge	r5,r4,11be4 <__alt_mem_Flash_flash_data+0xf4011be4>
   11f1c:	10bffe04 	addi	r2,r2,-8
   11f20:	b8a2983a 	sll	r17,r23,r2
   11f24:	002f883a 	mov	r23,zero
   11f28:	003f3506 	br	11c00 <__alt_mem_Flash_flash_data+0xf4011c00>
   11f2c:	d9800315 	stw	r6,12(sp)
   11f30:	d9c00015 	stw	r7,0(sp)
   11f34:	0012b700 	call	12b70 <__clzsi2>
   11f38:	10c00804 	addi	r3,r2,32
   11f3c:	010009c4 	movi	r4,39
   11f40:	d9800317 	ldw	r6,12(sp)
   11f44:	d9c00017 	ldw	r7,0(sp)
   11f48:	20ff060e 	bge	r4,r3,11b64 <__alt_mem_Flash_flash_data+0xf4011b64>
   11f4c:	10bffe04 	addi	r2,r2,-8
   11f50:	88a0983a 	sll	r16,r17,r2
   11f54:	0025883a 	mov	r18,zero
   11f58:	003f0906 	br	11b80 <__alt_mem_Flash_flash_data+0xf4011b80>
   11f5c:	9004d0fa 	srli	r2,r18,3
   11f60:	8024977a 	slli	r18,r16,29
   11f64:	8020927a 	slli	r16,r16,9
   11f68:	2101ffcc 	andi	r4,r4,2047
   11f6c:	90a4b03a 	or	r18,r18,r2
   11f70:	8020d33a 	srli	r16,r16,12
   11f74:	b4c0004c 	andi	r19,r22,1
   11f78:	003edb06 	br	11ae8 <__alt_mem_Flash_flash_data+0xf4011ae8>
   11f7c:	00ff0084 	movi	r3,-1022
   11f80:	1947c83a 	sub	r3,r3,r5
   11f84:	00800e04 	movi	r2,56
   11f88:	10c0080e 	bge	r2,r3,11fac <__muldf3+0x62c>
   11f8c:	b4c0004c 	andi	r19,r22,1
   11f90:	0009883a 	mov	r4,zero
   11f94:	0021883a 	mov	r16,zero
   11f98:	0025883a 	mov	r18,zero
   11f9c:	003ed206 	br	11ae8 <__alt_mem_Flash_flash_data+0xf4011ae8>
   11fa0:	600b883a 	mov	r5,r12
   11fa4:	e02d883a 	mov	r22,fp
   11fa8:	003fa706 	br	11e48 <__alt_mem_Flash_flash_data+0xf4011e48>
   11fac:	008007c4 	movi	r2,31
   11fb0:	10c01816 	blt	r2,r3,12014 <__muldf3+0x694>
   11fb4:	29410784 	addi	r5,r5,1054
   11fb8:	8144983a 	sll	r2,r16,r5
   11fbc:	90c8d83a 	srl	r4,r18,r3
   11fc0:	914a983a 	sll	r5,r18,r5
   11fc4:	80c6d83a 	srl	r3,r16,r3
   11fc8:	2088b03a 	or	r4,r4,r2
   11fcc:	2804c03a 	cmpne	r2,r5,zero
   11fd0:	2084b03a 	or	r2,r4,r2
   11fd4:	110001cc 	andi	r4,r2,7
   11fd8:	20000726 	beq	r4,zero,11ff8 <__muldf3+0x678>
   11fdc:	114003cc 	andi	r5,r2,15
   11fe0:	01000104 	movi	r4,4
   11fe4:	29000426 	beq	r5,r4,11ff8 <__muldf3+0x678>
   11fe8:	11000104 	addi	r4,r2,4
   11fec:	2085803a 	cmpltu	r2,r4,r2
   11ff0:	1887883a 	add	r3,r3,r2
   11ff4:	2005883a 	mov	r2,r4
   11ff8:	1900202c 	andhi	r4,r3,128
   11ffc:	20001826 	beq	r4,zero,12060 <__muldf3+0x6e0>
   12000:	b4c0004c 	andi	r19,r22,1
   12004:	01000044 	movi	r4,1
   12008:	0021883a 	mov	r16,zero
   1200c:	0025883a 	mov	r18,zero
   12010:	003eb506 	br	11ae8 <__alt_mem_Flash_flash_data+0xf4011ae8>
   12014:	00bef884 	movi	r2,-1054
   12018:	1145c83a 	sub	r2,r2,r5
   1201c:	8088d83a 	srl	r4,r16,r2
   12020:	00800804 	movi	r2,32
   12024:	18801726 	beq	r3,r2,12084 <__muldf3+0x704>
   12028:	28810f84 	addi	r2,r5,1086
   1202c:	8084983a 	sll	r2,r16,r2
   12030:	1484b03a 	or	r2,r2,r18
   12034:	1004c03a 	cmpne	r2,r2,zero
   12038:	1104b03a 	or	r2,r2,r4
   1203c:	10c001cc 	andi	r3,r2,7
   12040:	18000b1e 	bne	r3,zero,12070 <__muldf3+0x6f0>
   12044:	0021883a 	mov	r16,zero
   12048:	1004d0fa 	srli	r2,r2,3
   1204c:	b4c0004c 	andi	r19,r22,1
   12050:	0009883a 	mov	r4,zero
   12054:	10e4b03a 	or	r18,r2,r3
   12058:	003ea306 	br	11ae8 <__alt_mem_Flash_flash_data+0xf4011ae8>
   1205c:	0007883a 	mov	r3,zero
   12060:	1820927a 	slli	r16,r3,9
   12064:	1806977a 	slli	r3,r3,29
   12068:	8020d33a 	srli	r16,r16,12
   1206c:	003ff606 	br	12048 <__alt_mem_Flash_flash_data+0xf4012048>
   12070:	110003cc 	andi	r4,r2,15
   12074:	00c00104 	movi	r3,4
   12078:	20fff826 	beq	r4,r3,1205c <__alt_mem_Flash_flash_data+0xf401205c>
   1207c:	0007883a 	mov	r3,zero
   12080:	003fd906 	br	11fe8 <__alt_mem_Flash_flash_data+0xf4011fe8>
   12084:	0005883a 	mov	r2,zero
   12088:	003fe906 	br	12030 <__alt_mem_Flash_flash_data+0xf4012030>
   1208c:	00800434 	movhi	r2,16
   12090:	84000234 	orhi	r16,r16,8
   12094:	10bfffc4 	addi	r2,r2,-1
   12098:	e4c0004c 	andi	r19,fp,1
   1209c:	80a0703a 	and	r16,r16,r2
   120a0:	003ef606 	br	11c7c <__alt_mem_Flash_flash_data+0xf4011c7c>

000120a4 <__subdf3>:
   120a4:	00c00434 	movhi	r3,16
   120a8:	18ffffc4 	addi	r3,r3,-1
   120ac:	defffb04 	addi	sp,sp,-20
   120b0:	28d2703a 	and	r9,r5,r3
   120b4:	3814d53a 	srli	r10,r7,20
   120b8:	38c6703a 	and	r3,r7,r3
   120bc:	3004d77a 	srli	r2,r6,29
   120c0:	dc800215 	stw	r18,8(sp)
   120c4:	dc000015 	stw	r16,0(sp)
   120c8:	2824d7fa 	srli	r18,r5,31
   120cc:	2820d53a 	srli	r16,r5,20
   120d0:	481290fa 	slli	r9,r9,3
   120d4:	200ad77a 	srli	r5,r4,29
   120d8:	180690fa 	slli	r3,r3,3
   120dc:	dc400115 	stw	r17,4(sp)
   120e0:	dfc00415 	stw	ra,16(sp)
   120e4:	202290fa 	slli	r17,r4,3
   120e8:	dcc00315 	stw	r19,12(sp)
   120ec:	5281ffcc 	andi	r10,r10,2047
   120f0:	0101ffc4 	movi	r4,2047
   120f4:	9011883a 	mov	r8,r18
   120f8:	8401ffcc 	andi	r16,r16,2047
   120fc:	94803fcc 	andi	r18,r18,255
   12100:	494ab03a 	or	r5,r9,r5
   12104:	380ed7fa 	srli	r7,r7,31
   12108:	1886b03a 	or	r3,r3,r2
   1210c:	300c90fa 	slli	r6,r6,3
   12110:	51009026 	beq	r10,r4,12354 <__subdf3+0x2b0>
   12114:	39c0005c 	xori	r7,r7,1
   12118:	8285c83a 	sub	r2,r16,r10
   1211c:	91c06f26 	beq	r18,r7,122dc <__subdf3+0x238>
   12120:	0080b10e 	bge	zero,r2,123e8 <__subdf3+0x344>
   12124:	50002a1e 	bne	r10,zero,121d0 <__subdf3+0x12c>
   12128:	1988b03a 	or	r4,r3,r6
   1212c:	2000941e 	bne	r4,zero,12380 <__subdf3+0x2dc>
   12130:	888001cc 	andi	r2,r17,7
   12134:	10005b26 	beq	r2,zero,122a4 <__subdf3+0x200>
   12138:	88c003cc 	andi	r3,r17,15
   1213c:	00800104 	movi	r2,4
   12140:	18805826 	beq	r3,r2,122a4 <__subdf3+0x200>
   12144:	88c00104 	addi	r3,r17,4
   12148:	1c63803a 	cmpltu	r17,r3,r17
   1214c:	2c4b883a 	add	r5,r5,r17
   12150:	2880202c 	andhi	r2,r5,128
   12154:	9200004c 	andi	r8,r18,1
   12158:	1823883a 	mov	r17,r3
   1215c:	10005426 	beq	r2,zero,122b0 <__subdf3+0x20c>
   12160:	84000044 	addi	r16,r16,1
   12164:	0081ffc4 	movi	r2,2047
   12168:	8080bf26 	beq	r16,r2,12468 <__subdf3+0x3c4>
   1216c:	013fe034 	movhi	r4,65408
   12170:	213fffc4 	addi	r4,r4,-1
   12174:	290a703a 	and	r5,r5,r4
   12178:	2804977a 	slli	r2,r5,29
   1217c:	280a927a 	slli	r5,r5,9
   12180:	8822d0fa 	srli	r17,r17,3
   12184:	8401ffcc 	andi	r16,r16,2047
   12188:	2808d33a 	srli	r4,r5,12
   1218c:	1444b03a 	or	r2,r2,r17
   12190:	8401ffcc 	andi	r16,r16,2047
   12194:	800a953a 	slli	r5,r16,20
   12198:	40c03fcc 	andi	r3,r8,255
   1219c:	04000434 	movhi	r16,16
   121a0:	180697fa 	slli	r3,r3,31
   121a4:	843fffc4 	addi	r16,r16,-1
   121a8:	2420703a 	and	r16,r4,r16
   121ac:	8160b03a 	or	r16,r16,r5
   121b0:	80c6b03a 	or	r3,r16,r3
   121b4:	dfc00417 	ldw	ra,16(sp)
   121b8:	dcc00317 	ldw	r19,12(sp)
   121bc:	dc800217 	ldw	r18,8(sp)
   121c0:	dc400117 	ldw	r17,4(sp)
   121c4:	dc000017 	ldw	r16,0(sp)
   121c8:	dec00504 	addi	sp,sp,20
   121cc:	f800283a 	ret
   121d0:	0101ffc4 	movi	r4,2047
   121d4:	813fd626 	beq	r16,r4,12130 <__alt_mem_Flash_flash_data+0xf4012130>
   121d8:	18c02034 	orhi	r3,r3,128
   121dc:	01000e04 	movi	r4,56
   121e0:	2080a416 	blt	r4,r2,12474 <__subdf3+0x3d0>
   121e4:	010007c4 	movi	r4,31
   121e8:	2080c716 	blt	r4,r2,12508 <__subdf3+0x464>
   121ec:	01000804 	movi	r4,32
   121f0:	2089c83a 	sub	r4,r4,r2
   121f4:	1910983a 	sll	r8,r3,r4
   121f8:	308ed83a 	srl	r7,r6,r2
   121fc:	3108983a 	sll	r4,r6,r4
   12200:	1884d83a 	srl	r2,r3,r2
   12204:	41ccb03a 	or	r6,r8,r7
   12208:	2008c03a 	cmpne	r4,r4,zero
   1220c:	310cb03a 	or	r6,r6,r4
   12210:	898dc83a 	sub	r6,r17,r6
   12214:	89a3803a 	cmpltu	r17,r17,r6
   12218:	288bc83a 	sub	r5,r5,r2
   1221c:	2c4bc83a 	sub	r5,r5,r17
   12220:	3023883a 	mov	r17,r6
   12224:	2880202c 	andhi	r2,r5,128
   12228:	10006b26 	beq	r2,zero,123d8 <__subdf3+0x334>
   1222c:	04c02034 	movhi	r19,128
   12230:	9cffffc4 	addi	r19,r19,-1
   12234:	2ce6703a 	and	r19,r5,r19
   12238:	98007c26 	beq	r19,zero,1242c <__subdf3+0x388>
   1223c:	9809883a 	mov	r4,r19
   12240:	0012b700 	call	12b70 <__clzsi2>
   12244:	10fffe04 	addi	r3,r2,-8
   12248:	010007c4 	movi	r4,31
   1224c:	20c07d16 	blt	r4,r3,12444 <__subdf3+0x3a0>
   12250:	01400a04 	movi	r5,40
   12254:	2885c83a 	sub	r2,r5,r2
   12258:	888ad83a 	srl	r5,r17,r2
   1225c:	98e6983a 	sll	r19,r19,r3
   12260:	88e2983a 	sll	r17,r17,r3
   12264:	2ce6b03a 	or	r19,r5,r19
   12268:	1c007a16 	blt	r3,r16,12454 <__subdf3+0x3b0>
   1226c:	1c21c83a 	sub	r16,r3,r16
   12270:	81400044 	addi	r5,r16,1
   12274:	00c007c4 	movi	r3,31
   12278:	19409616 	blt	r3,r5,124d4 <__subdf3+0x430>
   1227c:	1c21c83a 	sub	r16,r3,r16
   12280:	8c08983a 	sll	r4,r17,r16
   12284:	8946d83a 	srl	r3,r17,r5
   12288:	9c20983a 	sll	r16,r19,r16
   1228c:	2008c03a 	cmpne	r4,r4,zero
   12290:	994ad83a 	srl	r5,r19,r5
   12294:	1c06b03a 	or	r3,r3,r16
   12298:	1922b03a 	or	r17,r3,r4
   1229c:	0021883a 	mov	r16,zero
   122a0:	003fa306 	br	12130 <__alt_mem_Flash_flash_data+0xf4012130>
   122a4:	2880202c 	andhi	r2,r5,128
   122a8:	9200004c 	andi	r8,r18,1
   122ac:	103fac1e 	bne	r2,zero,12160 <__alt_mem_Flash_flash_data+0xf4012160>
   122b0:	2804977a 	slli	r2,r5,29
   122b4:	8822d0fa 	srli	r17,r17,3
   122b8:	00c1ffc4 	movi	r3,2047
   122bc:	280ad0fa 	srli	r5,r5,3
   122c0:	1444b03a 	or	r2,r2,r17
   122c4:	80c02726 	beq	r16,r3,12364 <__subdf3+0x2c0>
   122c8:	01000434 	movhi	r4,16
   122cc:	213fffc4 	addi	r4,r4,-1
   122d0:	80e0703a 	and	r16,r16,r3
   122d4:	2908703a 	and	r4,r5,r4
   122d8:	003fad06 	br	12190 <__alt_mem_Flash_flash_data+0xf4012190>
   122dc:	0080690e 	bge	zero,r2,12484 <__subdf3+0x3e0>
   122e0:	50002f26 	beq	r10,zero,123a0 <__subdf3+0x2fc>
   122e4:	0101ffc4 	movi	r4,2047
   122e8:	813f9126 	beq	r16,r4,12130 <__alt_mem_Flash_flash_data+0xf4012130>
   122ec:	18c02034 	orhi	r3,r3,128
   122f0:	01000e04 	movi	r4,56
   122f4:	2080b00e 	bge	r4,r2,125b8 <__subdf3+0x514>
   122f8:	198cb03a 	or	r6,r3,r6
   122fc:	300ec03a 	cmpne	r7,r6,zero
   12300:	0005883a 	mov	r2,zero
   12304:	3c4f883a 	add	r7,r7,r17
   12308:	3c63803a 	cmpltu	r17,r7,r17
   1230c:	114b883a 	add	r5,r2,r5
   12310:	2c4b883a 	add	r5,r5,r17
   12314:	3823883a 	mov	r17,r7
   12318:	2880202c 	andhi	r2,r5,128
   1231c:	10002e26 	beq	r2,zero,123d8 <__subdf3+0x334>
   12320:	84000044 	addi	r16,r16,1
   12324:	0081ffc4 	movi	r2,2047
   12328:	8080de26 	beq	r16,r2,126a4 <__subdf3+0x600>
   1232c:	00bfe034 	movhi	r2,65408
   12330:	10bfffc4 	addi	r2,r2,-1
   12334:	288a703a 	and	r5,r5,r2
   12338:	880cd07a 	srli	r6,r17,1
   1233c:	280897fa 	slli	r4,r5,31
   12340:	88c0004c 	andi	r3,r17,1
   12344:	30e2b03a 	or	r17,r6,r3
   12348:	280ad07a 	srli	r5,r5,1
   1234c:	8922b03a 	or	r17,r17,r4
   12350:	003f7706 	br	12130 <__alt_mem_Flash_flash_data+0xf4012130>
   12354:	1984b03a 	or	r2,r3,r6
   12358:	103f6e26 	beq	r2,zero,12114 <__alt_mem_Flash_flash_data+0xf4012114>
   1235c:	39c03fcc 	andi	r7,r7,255
   12360:	003f6d06 	br	12118 <__alt_mem_Flash_flash_data+0xf4012118>
   12364:	1146b03a 	or	r3,r2,r5
   12368:	18003f26 	beq	r3,zero,12468 <__subdf3+0x3c4>
   1236c:	00c00434 	movhi	r3,16
   12370:	29000234 	orhi	r4,r5,8
   12374:	18ffffc4 	addi	r3,r3,-1
   12378:	20c8703a 	and	r4,r4,r3
   1237c:	003f8406 	br	12190 <__alt_mem_Flash_flash_data+0xf4012190>
   12380:	10bfffc4 	addi	r2,r2,-1
   12384:	1000501e 	bne	r2,zero,124c8 <__subdf3+0x424>
   12388:	898fc83a 	sub	r7,r17,r6
   1238c:	89e3803a 	cmpltu	r17,r17,r7
   12390:	28cbc83a 	sub	r5,r5,r3
   12394:	2c4bc83a 	sub	r5,r5,r17
   12398:	3823883a 	mov	r17,r7
   1239c:	003fa106 	br	12224 <__alt_mem_Flash_flash_data+0xf4012224>
   123a0:	1988b03a 	or	r4,r3,r6
   123a4:	203f6226 	beq	r4,zero,12130 <__alt_mem_Flash_flash_data+0xf4012130>
   123a8:	10bfffc4 	addi	r2,r2,-1
   123ac:	10009b1e 	bne	r2,zero,1261c <__subdf3+0x578>
   123b0:	344d883a 	add	r6,r6,r17
   123b4:	3463803a 	cmpltu	r17,r6,r17
   123b8:	194b883a 	add	r5,r3,r5
   123bc:	2c4b883a 	add	r5,r5,r17
   123c0:	3023883a 	mov	r17,r6
   123c4:	003fd406 	br	12318 <__alt_mem_Flash_flash_data+0xf4012318>
   123c8:	1106b03a 	or	r3,r2,r4
   123cc:	1800b426 	beq	r3,zero,126a0 <__subdf3+0x5fc>
   123d0:	100b883a 	mov	r5,r2
   123d4:	2023883a 	mov	r17,r4
   123d8:	888001cc 	andi	r2,r17,7
   123dc:	103f561e 	bne	r2,zero,12138 <__alt_mem_Flash_flash_data+0xf4012138>
   123e0:	9200004c 	andi	r8,r18,1
   123e4:	003fb206 	br	122b0 <__alt_mem_Flash_flash_data+0xf40122b0>
   123e8:	1000531e 	bne	r2,zero,12538 <__subdf3+0x494>
   123ec:	80800044 	addi	r2,r16,1
   123f0:	1081ffcc 	andi	r2,r2,2047
   123f4:	01000044 	movi	r4,1
   123f8:	2080a00e 	bge	r4,r2,1267c <__subdf3+0x5d8>
   123fc:	8985c83a 	sub	r2,r17,r6
   12400:	8889803a 	cmpltu	r4,r17,r2
   12404:	28e7c83a 	sub	r19,r5,r3
   12408:	9927c83a 	sub	r19,r19,r4
   1240c:	9900202c 	andhi	r4,r19,128
   12410:	20006226 	beq	r4,zero,1259c <__subdf3+0x4f8>
   12414:	3463c83a 	sub	r17,r6,r17
   12418:	194bc83a 	sub	r5,r3,r5
   1241c:	344d803a 	cmpltu	r6,r6,r17
   12420:	29a7c83a 	sub	r19,r5,r6
   12424:	3825883a 	mov	r18,r7
   12428:	983f841e 	bne	r19,zero,1223c <__alt_mem_Flash_flash_data+0xf401223c>
   1242c:	8809883a 	mov	r4,r17
   12430:	0012b700 	call	12b70 <__clzsi2>
   12434:	10800804 	addi	r2,r2,32
   12438:	10fffe04 	addi	r3,r2,-8
   1243c:	010007c4 	movi	r4,31
   12440:	20ff830e 	bge	r4,r3,12250 <__alt_mem_Flash_flash_data+0xf4012250>
   12444:	14fff604 	addi	r19,r2,-40
   12448:	8ce6983a 	sll	r19,r17,r19
   1244c:	0023883a 	mov	r17,zero
   12450:	1c3f860e 	bge	r3,r16,1226c <__alt_mem_Flash_flash_data+0xf401226c>
   12454:	017fe034 	movhi	r5,65408
   12458:	297fffc4 	addi	r5,r5,-1
   1245c:	80e1c83a 	sub	r16,r16,r3
   12460:	994a703a 	and	r5,r19,r5
   12464:	003f3206 	br	12130 <__alt_mem_Flash_flash_data+0xf4012130>
   12468:	0009883a 	mov	r4,zero
   1246c:	0005883a 	mov	r2,zero
   12470:	003f4706 	br	12190 <__alt_mem_Flash_flash_data+0xf4012190>
   12474:	198cb03a 	or	r6,r3,r6
   12478:	300cc03a 	cmpne	r6,r6,zero
   1247c:	0005883a 	mov	r2,zero
   12480:	003f6306 	br	12210 <__alt_mem_Flash_flash_data+0xf4012210>
   12484:	10009d1e 	bne	r2,zero,126fc <__subdf3+0x658>
   12488:	81c00044 	addi	r7,r16,1
   1248c:	3881ffcc 	andi	r2,r7,2047
   12490:	02400044 	movi	r9,1
   12494:	4880680e 	bge	r9,r2,12638 <__subdf3+0x594>
   12498:	0081ffc4 	movi	r2,2047
   1249c:	3880ae26 	beq	r7,r2,12758 <__subdf3+0x6b4>
   124a0:	344d883a 	add	r6,r6,r17
   124a4:	3463803a 	cmpltu	r17,r6,r17
   124a8:	194b883a 	add	r5,r3,r5
   124ac:	2c4b883a 	add	r5,r5,r17
   124b0:	282297fa 	slli	r17,r5,31
   124b4:	300cd07a 	srli	r6,r6,1
   124b8:	280ad07a 	srli	r5,r5,1
   124bc:	3821883a 	mov	r16,r7
   124c0:	89a2b03a 	or	r17,r17,r6
   124c4:	003f1a06 	br	12130 <__alt_mem_Flash_flash_data+0xf4012130>
   124c8:	0101ffc4 	movi	r4,2047
   124cc:	813f431e 	bne	r16,r4,121dc <__alt_mem_Flash_flash_data+0xf40121dc>
   124d0:	003f1706 	br	12130 <__alt_mem_Flash_flash_data+0xf4012130>
   124d4:	80bff844 	addi	r2,r16,-31
   124d8:	00c00804 	movi	r3,32
   124dc:	9884d83a 	srl	r2,r19,r2
   124e0:	28c05126 	beq	r5,r3,12628 <__subdf3+0x584>
   124e4:	00c00fc4 	movi	r3,63
   124e8:	1c21c83a 	sub	r16,r3,r16
   124ec:	9c26983a 	sll	r19,r19,r16
   124f0:	9c62b03a 	or	r17,r19,r17
   124f4:	8822c03a 	cmpne	r17,r17,zero
   124f8:	88a2b03a 	or	r17,r17,r2
   124fc:	000b883a 	mov	r5,zero
   12500:	0021883a 	mov	r16,zero
   12504:	003fb406 	br	123d8 <__alt_mem_Flash_flash_data+0xf40123d8>
   12508:	113ff804 	addi	r4,r2,-32
   1250c:	01c00804 	movi	r7,32
   12510:	1908d83a 	srl	r4,r3,r4
   12514:	11c04626 	beq	r2,r7,12630 <__subdf3+0x58c>
   12518:	01c01004 	movi	r7,64
   1251c:	3885c83a 	sub	r2,r7,r2
   12520:	1884983a 	sll	r2,r3,r2
   12524:	118cb03a 	or	r6,r2,r6
   12528:	300cc03a 	cmpne	r6,r6,zero
   1252c:	310cb03a 	or	r6,r6,r4
   12530:	0005883a 	mov	r2,zero
   12534:	003f3606 	br	12210 <__alt_mem_Flash_flash_data+0xf4012210>
   12538:	80002b26 	beq	r16,zero,125e8 <__subdf3+0x544>
   1253c:	0101ffc4 	movi	r4,2047
   12540:	51006926 	beq	r10,r4,126e8 <__subdf3+0x644>
   12544:	0085c83a 	sub	r2,zero,r2
   12548:	29402034 	orhi	r5,r5,128
   1254c:	01000e04 	movi	r4,56
   12550:	20807d16 	blt	r4,r2,12748 <__subdf3+0x6a4>
   12554:	010007c4 	movi	r4,31
   12558:	2080d916 	blt	r4,r2,128c0 <__subdf3+0x81c>
   1255c:	01000804 	movi	r4,32
   12560:	2089c83a 	sub	r4,r4,r2
   12564:	2912983a 	sll	r9,r5,r4
   12568:	8890d83a 	srl	r8,r17,r2
   1256c:	8908983a 	sll	r4,r17,r4
   12570:	2884d83a 	srl	r2,r5,r2
   12574:	4a22b03a 	or	r17,r9,r8
   12578:	2008c03a 	cmpne	r4,r4,zero
   1257c:	8922b03a 	or	r17,r17,r4
   12580:	3463c83a 	sub	r17,r6,r17
   12584:	1885c83a 	sub	r2,r3,r2
   12588:	344d803a 	cmpltu	r6,r6,r17
   1258c:	118bc83a 	sub	r5,r2,r6
   12590:	5021883a 	mov	r16,r10
   12594:	3825883a 	mov	r18,r7
   12598:	003f2206 	br	12224 <__alt_mem_Flash_flash_data+0xf4012224>
   1259c:	9886b03a 	or	r3,r19,r2
   125a0:	18001c1e 	bne	r3,zero,12614 <__subdf3+0x570>
   125a4:	0011883a 	mov	r8,zero
   125a8:	000b883a 	mov	r5,zero
   125ac:	0023883a 	mov	r17,zero
   125b0:	0021883a 	mov	r16,zero
   125b4:	003f3e06 	br	122b0 <__alt_mem_Flash_flash_data+0xf40122b0>
   125b8:	010007c4 	movi	r4,31
   125bc:	20803c16 	blt	r4,r2,126b0 <__subdf3+0x60c>
   125c0:	01000804 	movi	r4,32
   125c4:	2089c83a 	sub	r4,r4,r2
   125c8:	1912983a 	sll	r9,r3,r4
   125cc:	308ed83a 	srl	r7,r6,r2
   125d0:	3108983a 	sll	r4,r6,r4
   125d4:	1884d83a 	srl	r2,r3,r2
   125d8:	49ceb03a 	or	r7,r9,r7
   125dc:	2008c03a 	cmpne	r4,r4,zero
   125e0:	390eb03a 	or	r7,r7,r4
   125e4:	003f4706 	br	12304 <__alt_mem_Flash_flash_data+0xf4012304>
   125e8:	2c48b03a 	or	r4,r5,r17
   125ec:	20003e26 	beq	r4,zero,126e8 <__subdf3+0x644>
   125f0:	0084303a 	nor	r2,zero,r2
   125f4:	10003a1e 	bne	r2,zero,126e0 <__subdf3+0x63c>
   125f8:	3463c83a 	sub	r17,r6,r17
   125fc:	194bc83a 	sub	r5,r3,r5
   12600:	344d803a 	cmpltu	r6,r6,r17
   12604:	298bc83a 	sub	r5,r5,r6
   12608:	5021883a 	mov	r16,r10
   1260c:	3825883a 	mov	r18,r7
   12610:	003f0406 	br	12224 <__alt_mem_Flash_flash_data+0xf4012224>
   12614:	1023883a 	mov	r17,r2
   12618:	003f0706 	br	12238 <__alt_mem_Flash_flash_data+0xf4012238>
   1261c:	0101ffc4 	movi	r4,2047
   12620:	813f331e 	bne	r16,r4,122f0 <__alt_mem_Flash_flash_data+0xf40122f0>
   12624:	003ec206 	br	12130 <__alt_mem_Flash_flash_data+0xf4012130>
   12628:	0027883a 	mov	r19,zero
   1262c:	003fb006 	br	124f0 <__alt_mem_Flash_flash_data+0xf40124f0>
   12630:	0005883a 	mov	r2,zero
   12634:	003fbb06 	br	12524 <__alt_mem_Flash_flash_data+0xf4012524>
   12638:	2c44b03a 	or	r2,r5,r17
   1263c:	80008b1e 	bne	r16,zero,1286c <__subdf3+0x7c8>
   12640:	1000b526 	beq	r2,zero,12918 <__subdf3+0x874>
   12644:	1984b03a 	or	r2,r3,r6
   12648:	103eb926 	beq	r2,zero,12130 <__alt_mem_Flash_flash_data+0xf4012130>
   1264c:	3449883a 	add	r4,r6,r17
   12650:	2463803a 	cmpltu	r17,r4,r17
   12654:	194b883a 	add	r5,r3,r5
   12658:	2c4b883a 	add	r5,r5,r17
   1265c:	2880202c 	andhi	r2,r5,128
   12660:	2023883a 	mov	r17,r4
   12664:	103f5c26 	beq	r2,zero,123d8 <__alt_mem_Flash_flash_data+0xf40123d8>
   12668:	00bfe034 	movhi	r2,65408
   1266c:	10bfffc4 	addi	r2,r2,-1
   12670:	4821883a 	mov	r16,r9
   12674:	288a703a 	and	r5,r5,r2
   12678:	003ead06 	br	12130 <__alt_mem_Flash_flash_data+0xf4012130>
   1267c:	2c44b03a 	or	r2,r5,r17
   12680:	8000291e 	bne	r16,zero,12728 <__subdf3+0x684>
   12684:	10004f1e 	bne	r2,zero,127c4 <__subdf3+0x720>
   12688:	1984b03a 	or	r2,r3,r6
   1268c:	10000426 	beq	r2,zero,126a0 <__subdf3+0x5fc>
   12690:	180b883a 	mov	r5,r3
   12694:	3023883a 	mov	r17,r6
   12698:	3825883a 	mov	r18,r7
   1269c:	003ea406 	br	12130 <__alt_mem_Flash_flash_data+0xf4012130>
   126a0:	0011883a 	mov	r8,zero
   126a4:	000b883a 	mov	r5,zero
   126a8:	0023883a 	mov	r17,zero
   126ac:	003f0006 	br	122b0 <__alt_mem_Flash_flash_data+0xf40122b0>
   126b0:	11fff804 	addi	r7,r2,-32
   126b4:	19c8d83a 	srl	r4,r3,r7
   126b8:	01c00804 	movi	r7,32
   126bc:	11c07e26 	beq	r2,r7,128b8 <__subdf3+0x814>
   126c0:	01c01004 	movi	r7,64
   126c4:	3885c83a 	sub	r2,r7,r2
   126c8:	1884983a 	sll	r2,r3,r2
   126cc:	118cb03a 	or	r6,r2,r6
   126d0:	300ec03a 	cmpne	r7,r6,zero
   126d4:	390eb03a 	or	r7,r7,r4
   126d8:	0005883a 	mov	r2,zero
   126dc:	003f0906 	br	12304 <__alt_mem_Flash_flash_data+0xf4012304>
   126e0:	0101ffc4 	movi	r4,2047
   126e4:	513f991e 	bne	r10,r4,1254c <__alt_mem_Flash_flash_data+0xf401254c>
   126e8:	180b883a 	mov	r5,r3
   126ec:	3023883a 	mov	r17,r6
   126f0:	5021883a 	mov	r16,r10
   126f4:	3825883a 	mov	r18,r7
   126f8:	003e8d06 	br	12130 <__alt_mem_Flash_flash_data+0xf4012130>
   126fc:	80001a1e 	bne	r16,zero,12768 <__subdf3+0x6c4>
   12700:	2c48b03a 	or	r4,r5,r17
   12704:	20005526 	beq	r4,zero,1285c <__subdf3+0x7b8>
   12708:	0084303a 	nor	r2,zero,r2
   1270c:	1000511e 	bne	r2,zero,12854 <__subdf3+0x7b0>
   12710:	89a3883a 	add	r17,r17,r6
   12714:	194b883a 	add	r5,r3,r5
   12718:	898d803a 	cmpltu	r6,r17,r6
   1271c:	298b883a 	add	r5,r5,r6
   12720:	5021883a 	mov	r16,r10
   12724:	003efc06 	br	12318 <__alt_mem_Flash_flash_data+0xf4012318>
   12728:	1000341e 	bne	r2,zero,127fc <__subdf3+0x758>
   1272c:	1984b03a 	or	r2,r3,r6
   12730:	10006f26 	beq	r2,zero,128f0 <__subdf3+0x84c>
   12734:	180b883a 	mov	r5,r3
   12738:	3023883a 	mov	r17,r6
   1273c:	3825883a 	mov	r18,r7
   12740:	0401ffc4 	movi	r16,2047
   12744:	003e7a06 	br	12130 <__alt_mem_Flash_flash_data+0xf4012130>
   12748:	2c62b03a 	or	r17,r5,r17
   1274c:	8822c03a 	cmpne	r17,r17,zero
   12750:	0005883a 	mov	r2,zero
   12754:	003f8a06 	br	12580 <__alt_mem_Flash_flash_data+0xf4012580>
   12758:	3821883a 	mov	r16,r7
   1275c:	000b883a 	mov	r5,zero
   12760:	0023883a 	mov	r17,zero
   12764:	003ed206 	br	122b0 <__alt_mem_Flash_flash_data+0xf40122b0>
   12768:	0101ffc4 	movi	r4,2047
   1276c:	51003b26 	beq	r10,r4,1285c <__subdf3+0x7b8>
   12770:	0085c83a 	sub	r2,zero,r2
   12774:	29402034 	orhi	r5,r5,128
   12778:	01000e04 	movi	r4,56
   1277c:	20806216 	blt	r4,r2,12908 <__subdf3+0x864>
   12780:	010007c4 	movi	r4,31
   12784:	20806b16 	blt	r4,r2,12934 <__subdf3+0x890>
   12788:	01000804 	movi	r4,32
   1278c:	2089c83a 	sub	r4,r4,r2
   12790:	2912983a 	sll	r9,r5,r4
   12794:	888ed83a 	srl	r7,r17,r2
   12798:	8908983a 	sll	r4,r17,r4
   1279c:	2884d83a 	srl	r2,r5,r2
   127a0:	49e2b03a 	or	r17,r9,r7
   127a4:	2008c03a 	cmpne	r4,r4,zero
   127a8:	8922b03a 	or	r17,r17,r4
   127ac:	89a3883a 	add	r17,r17,r6
   127b0:	10c5883a 	add	r2,r2,r3
   127b4:	898d803a 	cmpltu	r6,r17,r6
   127b8:	118b883a 	add	r5,r2,r6
   127bc:	5021883a 	mov	r16,r10
   127c0:	003ed506 	br	12318 <__alt_mem_Flash_flash_data+0xf4012318>
   127c4:	1984b03a 	or	r2,r3,r6
   127c8:	103e5926 	beq	r2,zero,12130 <__alt_mem_Flash_flash_data+0xf4012130>
   127cc:	8989c83a 	sub	r4,r17,r6
   127d0:	8911803a 	cmpltu	r8,r17,r4
   127d4:	28c5c83a 	sub	r2,r5,r3
   127d8:	1205c83a 	sub	r2,r2,r8
   127dc:	1200202c 	andhi	r8,r2,128
   127e0:	403ef926 	beq	r8,zero,123c8 <__alt_mem_Flash_flash_data+0xf40123c8>
   127e4:	3463c83a 	sub	r17,r6,r17
   127e8:	194bc83a 	sub	r5,r3,r5
   127ec:	344d803a 	cmpltu	r6,r6,r17
   127f0:	298bc83a 	sub	r5,r5,r6
   127f4:	3825883a 	mov	r18,r7
   127f8:	003e4d06 	br	12130 <__alt_mem_Flash_flash_data+0xf4012130>
   127fc:	1984b03a 	or	r2,r3,r6
   12800:	10002b26 	beq	r2,zero,128b0 <__subdf3+0x80c>
   12804:	2808d0fa 	srli	r4,r5,3
   12808:	8822d0fa 	srli	r17,r17,3
   1280c:	280a977a 	slli	r5,r5,29
   12810:	2080022c 	andhi	r2,r4,8
   12814:	2c62b03a 	or	r17,r5,r17
   12818:	10000826 	beq	r2,zero,1283c <__subdf3+0x798>
   1281c:	1810d0fa 	srli	r8,r3,3
   12820:	4080022c 	andhi	r2,r8,8
   12824:	1000051e 	bne	r2,zero,1283c <__subdf3+0x798>
   12828:	300cd0fa 	srli	r6,r6,3
   1282c:	1804977a 	slli	r2,r3,29
   12830:	4009883a 	mov	r4,r8
   12834:	3825883a 	mov	r18,r7
   12838:	11a2b03a 	or	r17,r2,r6
   1283c:	880ad77a 	srli	r5,r17,29
   12840:	200890fa 	slli	r4,r4,3
   12844:	882290fa 	slli	r17,r17,3
   12848:	0401ffc4 	movi	r16,2047
   1284c:	290ab03a 	or	r5,r5,r4
   12850:	003e3706 	br	12130 <__alt_mem_Flash_flash_data+0xf4012130>
   12854:	0101ffc4 	movi	r4,2047
   12858:	513fc71e 	bne	r10,r4,12778 <__alt_mem_Flash_flash_data+0xf4012778>
   1285c:	180b883a 	mov	r5,r3
   12860:	3023883a 	mov	r17,r6
   12864:	5021883a 	mov	r16,r10
   12868:	003e3106 	br	12130 <__alt_mem_Flash_flash_data+0xf4012130>
   1286c:	10002d26 	beq	r2,zero,12924 <__subdf3+0x880>
   12870:	1984b03a 	or	r2,r3,r6
   12874:	10000e26 	beq	r2,zero,128b0 <__subdf3+0x80c>
   12878:	2808d0fa 	srli	r4,r5,3
   1287c:	8822d0fa 	srli	r17,r17,3
   12880:	280a977a 	slli	r5,r5,29
   12884:	2080022c 	andhi	r2,r4,8
   12888:	2c62b03a 	or	r17,r5,r17
   1288c:	103feb26 	beq	r2,zero,1283c <__alt_mem_Flash_flash_data+0xf401283c>
   12890:	180ed0fa 	srli	r7,r3,3
   12894:	3880022c 	andhi	r2,r7,8
   12898:	103fe81e 	bne	r2,zero,1283c <__alt_mem_Flash_flash_data+0xf401283c>
   1289c:	300cd0fa 	srli	r6,r6,3
   128a0:	1804977a 	slli	r2,r3,29
   128a4:	3809883a 	mov	r4,r7
   128a8:	11a2b03a 	or	r17,r2,r6
   128ac:	003fe306 	br	1283c <__alt_mem_Flash_flash_data+0xf401283c>
   128b0:	0401ffc4 	movi	r16,2047
   128b4:	003e1e06 	br	12130 <__alt_mem_Flash_flash_data+0xf4012130>
   128b8:	0005883a 	mov	r2,zero
   128bc:	003f8306 	br	126cc <__alt_mem_Flash_flash_data+0xf40126cc>
   128c0:	113ff804 	addi	r4,r2,-32
   128c4:	02000804 	movi	r8,32
   128c8:	2908d83a 	srl	r4,r5,r4
   128cc:	12002526 	beq	r2,r8,12964 <__subdf3+0x8c0>
   128d0:	02001004 	movi	r8,64
   128d4:	4085c83a 	sub	r2,r8,r2
   128d8:	288a983a 	sll	r5,r5,r2
   128dc:	2c62b03a 	or	r17,r5,r17
   128e0:	8822c03a 	cmpne	r17,r17,zero
   128e4:	8922b03a 	or	r17,r17,r4
   128e8:	0005883a 	mov	r2,zero
   128ec:	003f2406 	br	12580 <__alt_mem_Flash_flash_data+0xf4012580>
   128f0:	01402034 	movhi	r5,128
   128f4:	0011883a 	mov	r8,zero
   128f8:	297fffc4 	addi	r5,r5,-1
   128fc:	047ffe04 	movi	r17,-8
   12900:	0401ffc4 	movi	r16,2047
   12904:	003e6a06 	br	122b0 <__alt_mem_Flash_flash_data+0xf40122b0>
   12908:	2c62b03a 	or	r17,r5,r17
   1290c:	8822c03a 	cmpne	r17,r17,zero
   12910:	0005883a 	mov	r2,zero
   12914:	003fa506 	br	127ac <__alt_mem_Flash_flash_data+0xf40127ac>
   12918:	180b883a 	mov	r5,r3
   1291c:	3023883a 	mov	r17,r6
   12920:	003e0306 	br	12130 <__alt_mem_Flash_flash_data+0xf4012130>
   12924:	180b883a 	mov	r5,r3
   12928:	3023883a 	mov	r17,r6
   1292c:	0401ffc4 	movi	r16,2047
   12930:	003dff06 	br	12130 <__alt_mem_Flash_flash_data+0xf4012130>
   12934:	113ff804 	addi	r4,r2,-32
   12938:	01c00804 	movi	r7,32
   1293c:	2908d83a 	srl	r4,r5,r4
   12940:	11c00a26 	beq	r2,r7,1296c <__subdf3+0x8c8>
   12944:	01c01004 	movi	r7,64
   12948:	3885c83a 	sub	r2,r7,r2
   1294c:	288a983a 	sll	r5,r5,r2
   12950:	2c62b03a 	or	r17,r5,r17
   12954:	8822c03a 	cmpne	r17,r17,zero
   12958:	8922b03a 	or	r17,r17,r4
   1295c:	0005883a 	mov	r2,zero
   12960:	003f9206 	br	127ac <__alt_mem_Flash_flash_data+0xf40127ac>
   12964:	000b883a 	mov	r5,zero
   12968:	003fdc06 	br	128dc <__alt_mem_Flash_flash_data+0xf40128dc>
   1296c:	000b883a 	mov	r5,zero
   12970:	003ff706 	br	12950 <__alt_mem_Flash_flash_data+0xf4012950>

00012974 <__fixdfsi>:
   12974:	2806d53a 	srli	r3,r5,20
   12978:	00800434 	movhi	r2,16
   1297c:	10bfffc4 	addi	r2,r2,-1
   12980:	18c1ffcc 	andi	r3,r3,2047
   12984:	0180ff84 	movi	r6,1022
   12988:	2884703a 	and	r2,r5,r2
   1298c:	280ad7fa 	srli	r5,r5,31
   12990:	30c0130e 	bge	r6,r3,129e0 <__fixdfsi+0x6c>
   12994:	01810744 	movi	r6,1053
   12998:	30c00d16 	blt	r6,r3,129d0 <__fixdfsi+0x5c>
   1299c:	01810cc4 	movi	r6,1075
   129a0:	30cdc83a 	sub	r6,r6,r3
   129a4:	01c007c4 	movi	r7,31
   129a8:	10800434 	orhi	r2,r2,16
   129ac:	39800e0e 	bge	r7,r6,129e8 <__fixdfsi+0x74>
   129b0:	010104c4 	movi	r4,1043
   129b4:	20c7c83a 	sub	r3,r4,r3
   129b8:	10c6d83a 	srl	r3,r2,r3
   129bc:	29403fcc 	andi	r5,r5,255
   129c0:	0145c83a 	sub	r2,zero,r5
   129c4:	1884f03a 	xor	r2,r3,r2
   129c8:	1145883a 	add	r2,r2,r5
   129cc:	f800283a 	ret
   129d0:	00a00034 	movhi	r2,32768
   129d4:	10bfffc4 	addi	r2,r2,-1
   129d8:	2885883a 	add	r2,r5,r2
   129dc:	f800283a 	ret
   129e0:	0005883a 	mov	r2,zero
   129e4:	f800283a 	ret
   129e8:	18fefb44 	addi	r3,r3,-1043
   129ec:	2188d83a 	srl	r4,r4,r6
   129f0:	10c6983a 	sll	r3,r2,r3
   129f4:	20c6b03a 	or	r3,r4,r3
   129f8:	003ff006 	br	129bc <__alt_mem_Flash_flash_data+0xf40129bc>

000129fc <__floatsidf>:
   129fc:	defffd04 	addi	sp,sp,-12
   12a00:	dc400115 	stw	r17,4(sp)
   12a04:	dfc00215 	stw	ra,8(sp)
   12a08:	dc000015 	stw	r16,0(sp)
   12a0c:	2023883a 	mov	r17,r4
   12a10:	20001426 	beq	r4,zero,12a64 <__floatsidf+0x68>
   12a14:	2020d7fa 	srli	r16,r4,31
   12a18:	80000126 	beq	r16,zero,12a20 <__floatsidf+0x24>
   12a1c:	0123c83a 	sub	r17,zero,r4
   12a20:	8809883a 	mov	r4,r17
   12a24:	0012b700 	call	12b70 <__clzsi2>
   12a28:	01410784 	movi	r5,1054
   12a2c:	00c00284 	movi	r3,10
   12a30:	288bc83a 	sub	r5,r5,r2
   12a34:	18801c16 	blt	r3,r2,12aa8 <__floatsidf+0xac>
   12a38:	00c002c4 	movi	r3,11
   12a3c:	1887c83a 	sub	r3,r3,r2
   12a40:	88c8d83a 	srl	r4,r17,r3
   12a44:	00c00434 	movhi	r3,16
   12a48:	18ffffc4 	addi	r3,r3,-1
   12a4c:	10800544 	addi	r2,r2,21
   12a50:	20c8703a 	and	r4,r4,r3
   12a54:	8884983a 	sll	r2,r17,r2
   12a58:	28c1ffcc 	andi	r3,r5,2047
   12a5c:	800d883a 	mov	r6,r16
   12a60:	00000406 	br	12a74 <__floatsidf+0x78>
   12a64:	000d883a 	mov	r6,zero
   12a68:	0007883a 	mov	r3,zero
   12a6c:	0009883a 	mov	r4,zero
   12a70:	0005883a 	mov	r2,zero
   12a74:	180a953a 	slli	r5,r3,20
   12a78:	31803fcc 	andi	r6,r6,255
   12a7c:	00c00434 	movhi	r3,16
   12a80:	300c97fa 	slli	r6,r6,31
   12a84:	18ffffc4 	addi	r3,r3,-1
   12a88:	20c6703a 	and	r3,r4,r3
   12a8c:	1946b03a 	or	r3,r3,r5
   12a90:	1986b03a 	or	r3,r3,r6
   12a94:	dfc00217 	ldw	ra,8(sp)
   12a98:	dc400117 	ldw	r17,4(sp)
   12a9c:	dc000017 	ldw	r16,0(sp)
   12aa0:	dec00304 	addi	sp,sp,12
   12aa4:	f800283a 	ret
   12aa8:	10fffd44 	addi	r3,r2,-11
   12aac:	88c8983a 	sll	r4,r17,r3
   12ab0:	00800434 	movhi	r2,16
   12ab4:	10bfffc4 	addi	r2,r2,-1
   12ab8:	2088703a 	and	r4,r4,r2
   12abc:	28c1ffcc 	andi	r3,r5,2047
   12ac0:	800d883a 	mov	r6,r16
   12ac4:	0005883a 	mov	r2,zero
   12ac8:	003fea06 	br	12a74 <__alt_mem_Flash_flash_data+0xf4012a74>

00012acc <__floatunsidf>:
   12acc:	defffe04 	addi	sp,sp,-8
   12ad0:	dc000015 	stw	r16,0(sp)
   12ad4:	dfc00115 	stw	ra,4(sp)
   12ad8:	2021883a 	mov	r16,r4
   12adc:	20001026 	beq	r4,zero,12b20 <__floatunsidf+0x54>
   12ae0:	0012b700 	call	12b70 <__clzsi2>
   12ae4:	01410784 	movi	r5,1054
   12ae8:	100d883a 	mov	r6,r2
   12aec:	288bc83a 	sub	r5,r5,r2
   12af0:	00800284 	movi	r2,10
   12af4:	11801616 	blt	r2,r6,12b50 <__floatunsidf+0x84>
   12af8:	008002c4 	movi	r2,11
   12afc:	1185c83a 	sub	r2,r2,r6
   12b00:	8084d83a 	srl	r2,r16,r2
   12b04:	00c00434 	movhi	r3,16
   12b08:	31c00544 	addi	r7,r6,21
   12b0c:	18ffffc4 	addi	r3,r3,-1
   12b10:	81e0983a 	sll	r16,r16,r7
   12b14:	10cc703a 	and	r6,r2,r3
   12b18:	2941ffcc 	andi	r5,r5,2047
   12b1c:	00000206 	br	12b28 <__floatunsidf+0x5c>
   12b20:	000b883a 	mov	r5,zero
   12b24:	000d883a 	mov	r6,zero
   12b28:	280a953a 	slli	r5,r5,20
   12b2c:	00c00434 	movhi	r3,16
   12b30:	18ffffc4 	addi	r3,r3,-1
   12b34:	30c6703a 	and	r3,r6,r3
   12b38:	8005883a 	mov	r2,r16
   12b3c:	1946b03a 	or	r3,r3,r5
   12b40:	dfc00117 	ldw	ra,4(sp)
   12b44:	dc000017 	ldw	r16,0(sp)
   12b48:	dec00204 	addi	sp,sp,8
   12b4c:	f800283a 	ret
   12b50:	31bffd44 	addi	r6,r6,-11
   12b54:	818c983a 	sll	r6,r16,r6
   12b58:	00800434 	movhi	r2,16
   12b5c:	10bfffc4 	addi	r2,r2,-1
   12b60:	2941ffcc 	andi	r5,r5,2047
   12b64:	0021883a 	mov	r16,zero
   12b68:	308c703a 	and	r6,r6,r2
   12b6c:	003fee06 	br	12b28 <__alt_mem_Flash_flash_data+0xf4012b28>

00012b70 <__clzsi2>:
   12b70:	00bfffd4 	movui	r2,65535
   12b74:	11000b36 	bltu	r2,r4,12ba4 <__clzsi2+0x34>
   12b78:	00803fc4 	movi	r2,255
   12b7c:	1100122e 	bgeu	r2,r4,12bc8 <__clzsi2+0x58>
   12b80:	00c00204 	movi	r3,8
   12b84:	01400604 	movi	r5,24
   12b88:	20c8d83a 	srl	r4,r4,r3
   12b8c:	008000b4 	movhi	r2,2
   12b90:	1080f704 	addi	r2,r2,988
   12b94:	1109883a 	add	r4,r2,r4
   12b98:	20800003 	ldbu	r2,0(r4)
   12b9c:	2885c83a 	sub	r2,r5,r2
   12ba0:	f800283a 	ret
   12ba4:	00804034 	movhi	r2,256
   12ba8:	10bfffc4 	addi	r2,r2,-1
   12bac:	11000336 	bltu	r2,r4,12bbc <__clzsi2+0x4c>
   12bb0:	00c00404 	movi	r3,16
   12bb4:	180b883a 	mov	r5,r3
   12bb8:	003ff306 	br	12b88 <__alt_mem_Flash_flash_data+0xf4012b88>
   12bbc:	00c00604 	movi	r3,24
   12bc0:	01400204 	movi	r5,8
   12bc4:	003ff006 	br	12b88 <__alt_mem_Flash_flash_data+0xf4012b88>
   12bc8:	0007883a 	mov	r3,zero
   12bcc:	01400804 	movi	r5,32
   12bd0:	003fed06 	br	12b88 <__alt_mem_Flash_flash_data+0xf4012b88>

00012bd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12bd4:	defffe04 	addi	sp,sp,-8
   12bd8:	dfc00115 	stw	ra,4(sp)
   12bdc:	df000015 	stw	fp,0(sp)
   12be0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12be4:	008000b4 	movhi	r2,2
   12be8:	1089a304 	addi	r2,r2,9868
   12bec:	10800017 	ldw	r2,0(r2)
   12bf0:	10000526 	beq	r2,zero,12c08 <alt_get_errno+0x34>
   12bf4:	008000b4 	movhi	r2,2
   12bf8:	1089a304 	addi	r2,r2,9868
   12bfc:	10800017 	ldw	r2,0(r2)
   12c00:	103ee83a 	callr	r2
   12c04:	00000206 	br	12c10 <alt_get_errno+0x3c>
   12c08:	008000b4 	movhi	r2,2
   12c0c:	1091bd04 	addi	r2,r2,18164
}
   12c10:	e037883a 	mov	sp,fp
   12c14:	dfc00117 	ldw	ra,4(sp)
   12c18:	df000017 	ldw	fp,0(sp)
   12c1c:	dec00204 	addi	sp,sp,8
   12c20:	f800283a 	ret

00012c24 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12c24:	defffb04 	addi	sp,sp,-20
   12c28:	dfc00415 	stw	ra,16(sp)
   12c2c:	df000315 	stw	fp,12(sp)
   12c30:	df000304 	addi	fp,sp,12
   12c34:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12c38:	e0bfff17 	ldw	r2,-4(fp)
   12c3c:	10000616 	blt	r2,zero,12c58 <close+0x34>
   12c40:	e0bfff17 	ldw	r2,-4(fp)
   12c44:	10c00324 	muli	r3,r2,12
   12c48:	008000b4 	movhi	r2,2
   12c4c:	10842f04 	addi	r2,r2,4284
   12c50:	1885883a 	add	r2,r3,r2
   12c54:	00000106 	br	12c5c <close+0x38>
   12c58:	0005883a 	mov	r2,zero
   12c5c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   12c60:	e0bffd17 	ldw	r2,-12(fp)
   12c64:	10001926 	beq	r2,zero,12ccc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12c68:	e0bffd17 	ldw	r2,-12(fp)
   12c6c:	10800017 	ldw	r2,0(r2)
   12c70:	10800417 	ldw	r2,16(r2)
   12c74:	10000626 	beq	r2,zero,12c90 <close+0x6c>
   12c78:	e0bffd17 	ldw	r2,-12(fp)
   12c7c:	10800017 	ldw	r2,0(r2)
   12c80:	10800417 	ldw	r2,16(r2)
   12c84:	e13ffd17 	ldw	r4,-12(fp)
   12c88:	103ee83a 	callr	r2
   12c8c:	00000106 	br	12c94 <close+0x70>
   12c90:	0005883a 	mov	r2,zero
   12c94:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   12c98:	e13fff17 	ldw	r4,-4(fp)
   12c9c:	001333c0 	call	1333c <alt_release_fd>
    if (rval < 0)
   12ca0:	e0bffe17 	ldw	r2,-8(fp)
   12ca4:	1000070e 	bge	r2,zero,12cc4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   12ca8:	0012bd40 	call	12bd4 <alt_get_errno>
   12cac:	1007883a 	mov	r3,r2
   12cb0:	e0bffe17 	ldw	r2,-8(fp)
   12cb4:	0085c83a 	sub	r2,zero,r2
   12cb8:	18800015 	stw	r2,0(r3)
      return -1;
   12cbc:	00bfffc4 	movi	r2,-1
   12cc0:	00000706 	br	12ce0 <close+0xbc>
    }
    return 0;
   12cc4:	0005883a 	mov	r2,zero
   12cc8:	00000506 	br	12ce0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12ccc:	0012bd40 	call	12bd4 <alt_get_errno>
   12cd0:	1007883a 	mov	r3,r2
   12cd4:	00801444 	movi	r2,81
   12cd8:	18800015 	stw	r2,0(r3)
    return -1;
   12cdc:	00bfffc4 	movi	r2,-1
  }
}
   12ce0:	e037883a 	mov	sp,fp
   12ce4:	dfc00117 	ldw	ra,4(sp)
   12ce8:	df000017 	ldw	fp,0(sp)
   12cec:	dec00204 	addi	sp,sp,8
   12cf0:	f800283a 	ret

00012cf4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   12cf4:	defffc04 	addi	sp,sp,-16
   12cf8:	df000315 	stw	fp,12(sp)
   12cfc:	df000304 	addi	fp,sp,12
   12d00:	e13ffd15 	stw	r4,-12(fp)
   12d04:	e17ffe15 	stw	r5,-8(fp)
   12d08:	e1bfff15 	stw	r6,-4(fp)
  return len;
   12d0c:	e0bfff17 	ldw	r2,-4(fp)
}
   12d10:	e037883a 	mov	sp,fp
   12d14:	df000017 	ldw	fp,0(sp)
   12d18:	dec00104 	addi	sp,sp,4
   12d1c:	f800283a 	ret

00012d20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12d20:	defffe04 	addi	sp,sp,-8
   12d24:	dfc00115 	stw	ra,4(sp)
   12d28:	df000015 	stw	fp,0(sp)
   12d2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12d30:	008000b4 	movhi	r2,2
   12d34:	1089a304 	addi	r2,r2,9868
   12d38:	10800017 	ldw	r2,0(r2)
   12d3c:	10000526 	beq	r2,zero,12d54 <alt_get_errno+0x34>
   12d40:	008000b4 	movhi	r2,2
   12d44:	1089a304 	addi	r2,r2,9868
   12d48:	10800017 	ldw	r2,0(r2)
   12d4c:	103ee83a 	callr	r2
   12d50:	00000206 	br	12d5c <alt_get_errno+0x3c>
   12d54:	008000b4 	movhi	r2,2
   12d58:	1091bd04 	addi	r2,r2,18164
}
   12d5c:	e037883a 	mov	sp,fp
   12d60:	dfc00117 	ldw	ra,4(sp)
   12d64:	df000017 	ldw	fp,0(sp)
   12d68:	dec00204 	addi	sp,sp,8
   12d6c:	f800283a 	ret

00012d70 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   12d70:	defffb04 	addi	sp,sp,-20
   12d74:	dfc00415 	stw	ra,16(sp)
   12d78:	df000315 	stw	fp,12(sp)
   12d7c:	df000304 	addi	fp,sp,12
   12d80:	e13ffe15 	stw	r4,-8(fp)
   12d84:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12d88:	e0bffe17 	ldw	r2,-8(fp)
   12d8c:	10000616 	blt	r2,zero,12da8 <fstat+0x38>
   12d90:	e0bffe17 	ldw	r2,-8(fp)
   12d94:	10c00324 	muli	r3,r2,12
   12d98:	008000b4 	movhi	r2,2
   12d9c:	10842f04 	addi	r2,r2,4284
   12da0:	1885883a 	add	r2,r3,r2
   12da4:	00000106 	br	12dac <fstat+0x3c>
   12da8:	0005883a 	mov	r2,zero
   12dac:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   12db0:	e0bffd17 	ldw	r2,-12(fp)
   12db4:	10001026 	beq	r2,zero,12df8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   12db8:	e0bffd17 	ldw	r2,-12(fp)
   12dbc:	10800017 	ldw	r2,0(r2)
   12dc0:	10800817 	ldw	r2,32(r2)
   12dc4:	10000726 	beq	r2,zero,12de4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   12dc8:	e0bffd17 	ldw	r2,-12(fp)
   12dcc:	10800017 	ldw	r2,0(r2)
   12dd0:	10800817 	ldw	r2,32(r2)
   12dd4:	e13ffd17 	ldw	r4,-12(fp)
   12dd8:	e17fff17 	ldw	r5,-4(fp)
   12ddc:	103ee83a 	callr	r2
   12de0:	00000a06 	br	12e0c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   12de4:	e0bfff17 	ldw	r2,-4(fp)
   12de8:	00c80004 	movi	r3,8192
   12dec:	10c00115 	stw	r3,4(r2)
      return 0;
   12df0:	0005883a 	mov	r2,zero
   12df4:	00000506 	br	12e0c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12df8:	0012d200 	call	12d20 <alt_get_errno>
   12dfc:	1007883a 	mov	r3,r2
   12e00:	00801444 	movi	r2,81
   12e04:	18800015 	stw	r2,0(r3)
    return -1;
   12e08:	00bfffc4 	movi	r2,-1
  }
}
   12e0c:	e037883a 	mov	sp,fp
   12e10:	dfc00117 	ldw	ra,4(sp)
   12e14:	df000017 	ldw	fp,0(sp)
   12e18:	dec00204 	addi	sp,sp,8
   12e1c:	f800283a 	ret

00012e20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12e20:	defffe04 	addi	sp,sp,-8
   12e24:	dfc00115 	stw	ra,4(sp)
   12e28:	df000015 	stw	fp,0(sp)
   12e2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12e30:	008000b4 	movhi	r2,2
   12e34:	1089a304 	addi	r2,r2,9868
   12e38:	10800017 	ldw	r2,0(r2)
   12e3c:	10000526 	beq	r2,zero,12e54 <alt_get_errno+0x34>
   12e40:	008000b4 	movhi	r2,2
   12e44:	1089a304 	addi	r2,r2,9868
   12e48:	10800017 	ldw	r2,0(r2)
   12e4c:	103ee83a 	callr	r2
   12e50:	00000206 	br	12e5c <alt_get_errno+0x3c>
   12e54:	008000b4 	movhi	r2,2
   12e58:	1091bd04 	addi	r2,r2,18164
}
   12e5c:	e037883a 	mov	sp,fp
   12e60:	dfc00117 	ldw	ra,4(sp)
   12e64:	df000017 	ldw	fp,0(sp)
   12e68:	dec00204 	addi	sp,sp,8
   12e6c:	f800283a 	ret

00012e70 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   12e70:	deffed04 	addi	sp,sp,-76
   12e74:	dfc01215 	stw	ra,72(sp)
   12e78:	df001115 	stw	fp,68(sp)
   12e7c:	df001104 	addi	fp,sp,68
   12e80:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12e84:	e0bfff17 	ldw	r2,-4(fp)
   12e88:	10000616 	blt	r2,zero,12ea4 <isatty+0x34>
   12e8c:	e0bfff17 	ldw	r2,-4(fp)
   12e90:	10c00324 	muli	r3,r2,12
   12e94:	008000b4 	movhi	r2,2
   12e98:	10842f04 	addi	r2,r2,4284
   12e9c:	1885883a 	add	r2,r3,r2
   12ea0:	00000106 	br	12ea8 <isatty+0x38>
   12ea4:	0005883a 	mov	r2,zero
   12ea8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   12eac:	e0bfef17 	ldw	r2,-68(fp)
   12eb0:	10000e26 	beq	r2,zero,12eec <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   12eb4:	e0bfef17 	ldw	r2,-68(fp)
   12eb8:	10800017 	ldw	r2,0(r2)
   12ebc:	10800817 	ldw	r2,32(r2)
   12ec0:	1000021e 	bne	r2,zero,12ecc <isatty+0x5c>
    {
      return 1;
   12ec4:	00800044 	movi	r2,1
   12ec8:	00000d06 	br	12f00 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   12ecc:	e0bff004 	addi	r2,fp,-64
   12ed0:	e13fff17 	ldw	r4,-4(fp)
   12ed4:	100b883a 	mov	r5,r2
   12ed8:	0012d700 	call	12d70 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   12edc:	e0bff117 	ldw	r2,-60(fp)
   12ee0:	10880020 	cmpeqi	r2,r2,8192
   12ee4:	10803fcc 	andi	r2,r2,255
   12ee8:	00000506 	br	12f00 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12eec:	0012e200 	call	12e20 <alt_get_errno>
   12ef0:	1007883a 	mov	r3,r2
   12ef4:	00801444 	movi	r2,81
   12ef8:	18800015 	stw	r2,0(r3)
    return 0;
   12efc:	0005883a 	mov	r2,zero
  }
}
   12f00:	e037883a 	mov	sp,fp
   12f04:	dfc00117 	ldw	ra,4(sp)
   12f08:	df000017 	ldw	fp,0(sp)
   12f0c:	dec00204 	addi	sp,sp,8
   12f10:	f800283a 	ret

00012f14 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   12f14:	defffc04 	addi	sp,sp,-16
   12f18:	df000315 	stw	fp,12(sp)
   12f1c:	df000304 	addi	fp,sp,12
   12f20:	e13ffd15 	stw	r4,-12(fp)
   12f24:	e17ffe15 	stw	r5,-8(fp)
   12f28:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   12f2c:	e0fffe17 	ldw	r3,-8(fp)
   12f30:	e0bffd17 	ldw	r2,-12(fp)
   12f34:	18800c26 	beq	r3,r2,12f68 <alt_load_section+0x54>
  {
    while( to != end )
   12f38:	00000806 	br	12f5c <alt_load_section+0x48>
    {
      *to++ = *from++;
   12f3c:	e0bffe17 	ldw	r2,-8(fp)
   12f40:	10c00104 	addi	r3,r2,4
   12f44:	e0fffe15 	stw	r3,-8(fp)
   12f48:	e0fffd17 	ldw	r3,-12(fp)
   12f4c:	19000104 	addi	r4,r3,4
   12f50:	e13ffd15 	stw	r4,-12(fp)
   12f54:	18c00017 	ldw	r3,0(r3)
   12f58:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   12f5c:	e0fffe17 	ldw	r3,-8(fp)
   12f60:	e0bfff17 	ldw	r2,-4(fp)
   12f64:	18bff51e 	bne	r3,r2,12f3c <__alt_mem_Flash_flash_data+0xf4012f3c>
    {
      *to++ = *from++;
    }
  }
}
   12f68:	e037883a 	mov	sp,fp
   12f6c:	df000017 	ldw	fp,0(sp)
   12f70:	dec00104 	addi	sp,sp,4
   12f74:	f800283a 	ret

00012f78 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12f78:	defffe04 	addi	sp,sp,-8
   12f7c:	dfc00115 	stw	ra,4(sp)
   12f80:	df000015 	stw	fp,0(sp)
   12f84:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   12f88:	010000b4 	movhi	r4,2
   12f8c:	2109c704 	addi	r4,r4,10012
   12f90:	014000b4 	movhi	r5,2
   12f94:	2941f204 	addi	r5,r5,1992
   12f98:	018000b4 	movhi	r6,2
   12f9c:	3189c704 	addi	r6,r6,10012
   12fa0:	0012f140 	call	12f14 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   12fa4:	01000034 	movhi	r4,0
   12fa8:	21000804 	addi	r4,r4,32
   12fac:	01400034 	movhi	r5,0
   12fb0:	29400804 	addi	r5,r5,32
   12fb4:	01800034 	movhi	r6,0
   12fb8:	31809104 	addi	r6,r6,580
   12fbc:	0012f140 	call	12f14 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   12fc0:	010000b4 	movhi	r4,2
   12fc4:	213f7604 	addi	r4,r4,-552
   12fc8:	014000b4 	movhi	r5,2
   12fcc:	297f7604 	addi	r5,r5,-552
   12fd0:	018000b4 	movhi	r6,2
   12fd4:	3181f204 	addi	r6,r6,1992
   12fd8:	0012f140 	call	12f14 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   12fdc:	001ea200 	call	1ea20 <alt_dcache_flush_all>
  alt_icache_flush_all();
   12fe0:	001ec780 	call	1ec78 <alt_icache_flush_all>
}
   12fe4:	e037883a 	mov	sp,fp
   12fe8:	dfc00117 	ldw	ra,4(sp)
   12fec:	df000017 	ldw	fp,0(sp)
   12ff0:	dec00204 	addi	sp,sp,8
   12ff4:	f800283a 	ret

00012ff8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12ff8:	defffe04 	addi	sp,sp,-8
   12ffc:	dfc00115 	stw	ra,4(sp)
   13000:	df000015 	stw	fp,0(sp)
   13004:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13008:	008000b4 	movhi	r2,2
   1300c:	1089a304 	addi	r2,r2,9868
   13010:	10800017 	ldw	r2,0(r2)
   13014:	10000526 	beq	r2,zero,1302c <alt_get_errno+0x34>
   13018:	008000b4 	movhi	r2,2
   1301c:	1089a304 	addi	r2,r2,9868
   13020:	10800017 	ldw	r2,0(r2)
   13024:	103ee83a 	callr	r2
   13028:	00000206 	br	13034 <alt_get_errno+0x3c>
   1302c:	008000b4 	movhi	r2,2
   13030:	1091bd04 	addi	r2,r2,18164
}
   13034:	e037883a 	mov	sp,fp
   13038:	dfc00117 	ldw	ra,4(sp)
   1303c:	df000017 	ldw	fp,0(sp)
   13040:	dec00204 	addi	sp,sp,8
   13044:	f800283a 	ret

00013048 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13048:	defff904 	addi	sp,sp,-28
   1304c:	dfc00615 	stw	ra,24(sp)
   13050:	df000515 	stw	fp,20(sp)
   13054:	df000504 	addi	fp,sp,20
   13058:	e13ffd15 	stw	r4,-12(fp)
   1305c:	e17ffe15 	stw	r5,-8(fp)
   13060:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13064:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13068:	e0bffd17 	ldw	r2,-12(fp)
   1306c:	10000616 	blt	r2,zero,13088 <lseek+0x40>
   13070:	e0bffd17 	ldw	r2,-12(fp)
   13074:	10c00324 	muli	r3,r2,12
   13078:	008000b4 	movhi	r2,2
   1307c:	10842f04 	addi	r2,r2,4284
   13080:	1885883a 	add	r2,r3,r2
   13084:	00000106 	br	1308c <lseek+0x44>
   13088:	0005883a 	mov	r2,zero
   1308c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   13090:	e0bffc17 	ldw	r2,-16(fp)
   13094:	10001026 	beq	r2,zero,130d8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13098:	e0bffc17 	ldw	r2,-16(fp)
   1309c:	10800017 	ldw	r2,0(r2)
   130a0:	10800717 	ldw	r2,28(r2)
   130a4:	10000926 	beq	r2,zero,130cc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   130a8:	e0bffc17 	ldw	r2,-16(fp)
   130ac:	10800017 	ldw	r2,0(r2)
   130b0:	10800717 	ldw	r2,28(r2)
   130b4:	e13ffc17 	ldw	r4,-16(fp)
   130b8:	e17ffe17 	ldw	r5,-8(fp)
   130bc:	e1bfff17 	ldw	r6,-4(fp)
   130c0:	103ee83a 	callr	r2
   130c4:	e0bffb15 	stw	r2,-20(fp)
   130c8:	00000506 	br	130e0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   130cc:	00bfde84 	movi	r2,-134
   130d0:	e0bffb15 	stw	r2,-20(fp)
   130d4:	00000206 	br	130e0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   130d8:	00bfebc4 	movi	r2,-81
   130dc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   130e0:	e0bffb17 	ldw	r2,-20(fp)
   130e4:	1000070e 	bge	r2,zero,13104 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   130e8:	0012ff80 	call	12ff8 <alt_get_errno>
   130ec:	1007883a 	mov	r3,r2
   130f0:	e0bffb17 	ldw	r2,-20(fp)
   130f4:	0085c83a 	sub	r2,zero,r2
   130f8:	18800015 	stw	r2,0(r3)
    rc = -1;
   130fc:	00bfffc4 	movi	r2,-1
   13100:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   13104:	e0bffb17 	ldw	r2,-20(fp)
}
   13108:	e037883a 	mov	sp,fp
   1310c:	dfc00117 	ldw	ra,4(sp)
   13110:	df000017 	ldw	fp,0(sp)
   13114:	dec00204 	addi	sp,sp,8
   13118:	f800283a 	ret

0001311c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1311c:	defff904 	addi	sp,sp,-28
   13120:	dfc00615 	stw	ra,24(sp)
   13124:	df000515 	stw	fp,20(sp)
   13128:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1312c:	0009883a 	mov	r4,zero
   13130:	001c0f00 	call	1c0f0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   13134:	001410c0 	call	1410c <OSInit>
   13138:	01000044 	movi	r4,1
   1313c:	00198040 	call	19804 <OSSemCreate>
   13140:	1007883a 	mov	r3,r2
   13144:	008000b4 	movhi	r2,2
   13148:	1091c304 	addi	r2,r2,18188
   1314c:	10c00015 	stw	r3,0(r2)
   13150:	01000044 	movi	r4,1
   13154:	00198040 	call	19804 <OSSemCreate>
   13158:	1007883a 	mov	r3,r2
   1315c:	008000b4 	movhi	r2,2
   13160:	1091c504 	addi	r2,r2,18196
   13164:	10c00015 	stw	r3,0(r2)
   13168:	008000b4 	movhi	r2,2
   1316c:	1091be04 	addi	r2,r2,18168
   13170:	e0bffc15 	stw	r2,-16(fp)
   13174:	00800044 	movi	r2,1
   13178:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   1317c:	e0bffd0b 	ldhu	r2,-12(fp)
   13180:	1009883a 	mov	r4,r2
   13184:	00198040 	call	19804 <OSSemCreate>
   13188:	1007883a 	mov	r3,r2
   1318c:	e0bffc17 	ldw	r2,-16(fp)
   13190:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13194:	001c1240 	call	1c124 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13198:	010000b4 	movhi	r4,2
   1319c:	21013a04 	addi	r4,r4,1256
   131a0:	014000b4 	movhi	r5,2
   131a4:	29413a04 	addi	r5,r5,1256
   131a8:	018000b4 	movhi	r6,2
   131ac:	31813a04 	addi	r6,r6,1256
   131b0:	001ed680 	call	1ed68 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   131b4:	001eb300 	call	1eb30 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   131b8:	010000b4 	movhi	r4,2
   131bc:	213ae304 	addi	r4,r4,-5236
   131c0:	001fa2c0 	call	1fa2c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   131c4:	d1283417 	ldw	r4,-24368(gp)
   131c8:	d0e83517 	ldw	r3,-24364(gp)
   131cc:	d0a83617 	ldw	r2,-24360(gp)
   131d0:	180b883a 	mov	r5,r3
   131d4:	100d883a 	mov	r6,r2
   131d8:	0002a3c0 	call	2a3c <main>
   131dc:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   131e0:	01000044 	movi	r4,1
   131e4:	0012c240 	call	12c24 <close>
  exit (result);
   131e8:	e13ffb17 	ldw	r4,-20(fp)
   131ec:	001fa400 	call	1fa40 <exit>

000131f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   131f0:	defffe04 	addi	sp,sp,-8
   131f4:	dfc00115 	stw	ra,4(sp)
   131f8:	df000015 	stw	fp,0(sp)
   131fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13200:	008000b4 	movhi	r2,2
   13204:	1089a304 	addi	r2,r2,9868
   13208:	10800017 	ldw	r2,0(r2)
   1320c:	10000526 	beq	r2,zero,13224 <alt_get_errno+0x34>
   13210:	008000b4 	movhi	r2,2
   13214:	1089a304 	addi	r2,r2,9868
   13218:	10800017 	ldw	r2,0(r2)
   1321c:	103ee83a 	callr	r2
   13220:	00000206 	br	1322c <alt_get_errno+0x3c>
   13224:	008000b4 	movhi	r2,2
   13228:	1091bd04 	addi	r2,r2,18164
}
   1322c:	e037883a 	mov	sp,fp
   13230:	dfc00117 	ldw	ra,4(sp)
   13234:	df000017 	ldw	fp,0(sp)
   13238:	dec00204 	addi	sp,sp,8
   1323c:	f800283a 	ret

00013240 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   13240:	defff904 	addi	sp,sp,-28
   13244:	dfc00615 	stw	ra,24(sp)
   13248:	df000515 	stw	fp,20(sp)
   1324c:	df000504 	addi	fp,sp,20
   13250:	e13ffd15 	stw	r4,-12(fp)
   13254:	e17ffe15 	stw	r5,-8(fp)
   13258:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1325c:	e0bffd17 	ldw	r2,-12(fp)
   13260:	10000616 	blt	r2,zero,1327c <read+0x3c>
   13264:	e0bffd17 	ldw	r2,-12(fp)
   13268:	10c00324 	muli	r3,r2,12
   1326c:	008000b4 	movhi	r2,2
   13270:	10842f04 	addi	r2,r2,4284
   13274:	1885883a 	add	r2,r3,r2
   13278:	00000106 	br	13280 <read+0x40>
   1327c:	0005883a 	mov	r2,zero
   13280:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13284:	e0bffb17 	ldw	r2,-20(fp)
   13288:	10002226 	beq	r2,zero,13314 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1328c:	e0bffb17 	ldw	r2,-20(fp)
   13290:	10800217 	ldw	r2,8(r2)
   13294:	108000cc 	andi	r2,r2,3
   13298:	10800060 	cmpeqi	r2,r2,1
   1329c:	1000181e 	bne	r2,zero,13300 <read+0xc0>
        (fd->dev->read))
   132a0:	e0bffb17 	ldw	r2,-20(fp)
   132a4:	10800017 	ldw	r2,0(r2)
   132a8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   132ac:	10001426 	beq	r2,zero,13300 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   132b0:	e0bffb17 	ldw	r2,-20(fp)
   132b4:	10800017 	ldw	r2,0(r2)
   132b8:	10800517 	ldw	r2,20(r2)
   132bc:	e0ffff17 	ldw	r3,-4(fp)
   132c0:	e13ffb17 	ldw	r4,-20(fp)
   132c4:	e17ffe17 	ldw	r5,-8(fp)
   132c8:	180d883a 	mov	r6,r3
   132cc:	103ee83a 	callr	r2
   132d0:	e0bffc15 	stw	r2,-16(fp)
   132d4:	e0bffc17 	ldw	r2,-16(fp)
   132d8:	1000070e 	bge	r2,zero,132f8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   132dc:	00131f00 	call	131f0 <alt_get_errno>
   132e0:	1007883a 	mov	r3,r2
   132e4:	e0bffc17 	ldw	r2,-16(fp)
   132e8:	0085c83a 	sub	r2,zero,r2
   132ec:	18800015 	stw	r2,0(r3)
          return -1;
   132f0:	00bfffc4 	movi	r2,-1
   132f4:	00000c06 	br	13328 <read+0xe8>
        }
        return rval;
   132f8:	e0bffc17 	ldw	r2,-16(fp)
   132fc:	00000a06 	br	13328 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13300:	00131f00 	call	131f0 <alt_get_errno>
   13304:	1007883a 	mov	r3,r2
   13308:	00800344 	movi	r2,13
   1330c:	18800015 	stw	r2,0(r3)
   13310:	00000406 	br	13324 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   13314:	00131f00 	call	131f0 <alt_get_errno>
   13318:	1007883a 	mov	r3,r2
   1331c:	00801444 	movi	r2,81
   13320:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13324:	00bfffc4 	movi	r2,-1
}
   13328:	e037883a 	mov	sp,fp
   1332c:	dfc00117 	ldw	ra,4(sp)
   13330:	df000017 	ldw	fp,0(sp)
   13334:	dec00204 	addi	sp,sp,8
   13338:	f800283a 	ret

0001333c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1333c:	defffe04 	addi	sp,sp,-8
   13340:	df000115 	stw	fp,4(sp)
   13344:	df000104 	addi	fp,sp,4
   13348:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1334c:	e0bfff17 	ldw	r2,-4(fp)
   13350:	108000d0 	cmplti	r2,r2,3
   13354:	10000d1e 	bne	r2,zero,1338c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   13358:	008000b4 	movhi	r2,2
   1335c:	10842f04 	addi	r2,r2,4284
   13360:	e0ffff17 	ldw	r3,-4(fp)
   13364:	18c00324 	muli	r3,r3,12
   13368:	18c00204 	addi	r3,r3,8
   1336c:	10c5883a 	add	r2,r2,r3
   13370:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   13374:	008000b4 	movhi	r2,2
   13378:	10842f04 	addi	r2,r2,4284
   1337c:	e0ffff17 	ldw	r3,-4(fp)
   13380:	18c00324 	muli	r3,r3,12
   13384:	10c5883a 	add	r2,r2,r3
   13388:	10000015 	stw	zero,0(r2)
  }
}
   1338c:	e037883a 	mov	sp,fp
   13390:	df000017 	ldw	fp,0(sp)
   13394:	dec00104 	addi	sp,sp,4
   13398:	f800283a 	ret

0001339c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1339c:	defff904 	addi	sp,sp,-28
   133a0:	df000615 	stw	fp,24(sp)
   133a4:	df000604 	addi	fp,sp,24
   133a8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   133ac:	0005303a 	rdctl	r2,status
   133b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   133b4:	e0fffc17 	ldw	r3,-16(fp)
   133b8:	00bfff84 	movi	r2,-2
   133bc:	1884703a 	and	r2,r3,r2
   133c0:	1001703a 	wrctl	status,r2
  
  return context;
   133c4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   133c8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   133cc:	d0a01917 	ldw	r2,-32668(gp)
   133d0:	10c000c4 	addi	r3,r2,3
   133d4:	00bfff04 	movi	r2,-4
   133d8:	1884703a 	and	r2,r3,r2
   133dc:	d0a01915 	stw	r2,-32668(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   133e0:	d0e01917 	ldw	r3,-32668(gp)
   133e4:	e0bfff17 	ldw	r2,-4(fp)
   133e8:	1887883a 	add	r3,r3,r2
   133ec:	00810034 	movhi	r2,1024
   133f0:	10800004 	addi	r2,r2,0
   133f4:	10c0062e 	bgeu	r2,r3,13410 <sbrk+0x74>
   133f8:	e0bffa17 	ldw	r2,-24(fp)
   133fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13400:	e0bffd17 	ldw	r2,-12(fp)
   13404:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13408:	00bfffc4 	movi	r2,-1
   1340c:	00000b06 	br	1343c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   13410:	d0a01917 	ldw	r2,-32668(gp)
   13414:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   13418:	d0e01917 	ldw	r3,-32668(gp)
   1341c:	e0bfff17 	ldw	r2,-4(fp)
   13420:	1885883a 	add	r2,r3,r2
   13424:	d0a01915 	stw	r2,-32668(gp)
   13428:	e0bffa17 	ldw	r2,-24(fp)
   1342c:	e0bffe15 	stw	r2,-8(fp)
   13430:	e0bffe17 	ldw	r2,-8(fp)
   13434:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13438:	e0bffb17 	ldw	r2,-20(fp)
} 
   1343c:	e037883a 	mov	sp,fp
   13440:	df000017 	ldw	fp,0(sp)
   13444:	dec00104 	addi	sp,sp,4
   13448:	f800283a 	ret

0001344c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1344c:	defffe04 	addi	sp,sp,-8
   13450:	dfc00115 	stw	ra,4(sp)
   13454:	df000015 	stw	fp,0(sp)
   13458:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1345c:	008000b4 	movhi	r2,2
   13460:	1089a304 	addi	r2,r2,9868
   13464:	10800017 	ldw	r2,0(r2)
   13468:	10000526 	beq	r2,zero,13480 <alt_get_errno+0x34>
   1346c:	008000b4 	movhi	r2,2
   13470:	1089a304 	addi	r2,r2,9868
   13474:	10800017 	ldw	r2,0(r2)
   13478:	103ee83a 	callr	r2
   1347c:	00000206 	br	13488 <alt_get_errno+0x3c>
   13480:	008000b4 	movhi	r2,2
   13484:	1091bd04 	addi	r2,r2,18164
}
   13488:	e037883a 	mov	sp,fp
   1348c:	dfc00117 	ldw	ra,4(sp)
   13490:	df000017 	ldw	fp,0(sp)
   13494:	dec00204 	addi	sp,sp,8
   13498:	f800283a 	ret

0001349c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1349c:	defff904 	addi	sp,sp,-28
   134a0:	dfc00615 	stw	ra,24(sp)
   134a4:	df000515 	stw	fp,20(sp)
   134a8:	df000504 	addi	fp,sp,20
   134ac:	e13ffd15 	stw	r4,-12(fp)
   134b0:	e17ffe15 	stw	r5,-8(fp)
   134b4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   134b8:	e0bffd17 	ldw	r2,-12(fp)
   134bc:	10000616 	blt	r2,zero,134d8 <write+0x3c>
   134c0:	e0bffd17 	ldw	r2,-12(fp)
   134c4:	10c00324 	muli	r3,r2,12
   134c8:	008000b4 	movhi	r2,2
   134cc:	10842f04 	addi	r2,r2,4284
   134d0:	1885883a 	add	r2,r3,r2
   134d4:	00000106 	br	134dc <write+0x40>
   134d8:	0005883a 	mov	r2,zero
   134dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   134e0:	e0bffb17 	ldw	r2,-20(fp)
   134e4:	10002126 	beq	r2,zero,1356c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   134e8:	e0bffb17 	ldw	r2,-20(fp)
   134ec:	10800217 	ldw	r2,8(r2)
   134f0:	108000cc 	andi	r2,r2,3
   134f4:	10001826 	beq	r2,zero,13558 <write+0xbc>
   134f8:	e0bffb17 	ldw	r2,-20(fp)
   134fc:	10800017 	ldw	r2,0(r2)
   13500:	10800617 	ldw	r2,24(r2)
   13504:	10001426 	beq	r2,zero,13558 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   13508:	e0bffb17 	ldw	r2,-20(fp)
   1350c:	10800017 	ldw	r2,0(r2)
   13510:	10800617 	ldw	r2,24(r2)
   13514:	e0ffff17 	ldw	r3,-4(fp)
   13518:	e13ffb17 	ldw	r4,-20(fp)
   1351c:	e17ffe17 	ldw	r5,-8(fp)
   13520:	180d883a 	mov	r6,r3
   13524:	103ee83a 	callr	r2
   13528:	e0bffc15 	stw	r2,-16(fp)
   1352c:	e0bffc17 	ldw	r2,-16(fp)
   13530:	1000070e 	bge	r2,zero,13550 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   13534:	001344c0 	call	1344c <alt_get_errno>
   13538:	1007883a 	mov	r3,r2
   1353c:	e0bffc17 	ldw	r2,-16(fp)
   13540:	0085c83a 	sub	r2,zero,r2
   13544:	18800015 	stw	r2,0(r3)
        return -1;
   13548:	00bfffc4 	movi	r2,-1
   1354c:	00000c06 	br	13580 <write+0xe4>
      }
      return rval;
   13550:	e0bffc17 	ldw	r2,-16(fp)
   13554:	00000a06 	br	13580 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13558:	001344c0 	call	1344c <alt_get_errno>
   1355c:	1007883a 	mov	r3,r2
   13560:	00800344 	movi	r2,13
   13564:	18800015 	stw	r2,0(r3)
   13568:	00000406 	br	1357c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1356c:	001344c0 	call	1344c <alt_get_errno>
   13570:	1007883a 	mov	r3,r2
   13574:	00801444 	movi	r2,81
   13578:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1357c:	00bfffc4 	movi	r2,-1
}
   13580:	e037883a 	mov	sp,fp
   13584:	dfc00117 	ldw	ra,4(sp)
   13588:	df000017 	ldw	fp,0(sp)
   1358c:	dec00204 	addi	sp,sp,8
   13590:	f800283a 	ret

00013594 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   13594:	deffdf04 	addi	sp,sp,-132
   13598:	dfc02015 	stw	ra,128(sp)
   1359c:	df001f15 	stw	fp,124(sp)
   135a0:	df001f04 	addi	fp,sp,124
   135a4:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   135a8:	e0bfe204 	addi	r2,fp,-120
   135ac:	01003fc4 	movi	r4,255
   135b0:	100b883a 	mov	r5,r2
   135b4:	001b9b80 	call	1b9b8 <OSTaskQuery>
   135b8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   135bc:	e0bffe83 	ldbu	r2,-6(fp)
   135c0:	10803fcc 	andi	r2,r2,255
   135c4:	10000126 	beq	r2,zero,135cc <__env_lock+0x38>
    return;
   135c8:	00001d06 	br	13640 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
   135cc:	e0bfee83 	ldbu	r2,-70(fp)
   135d0:	10803fcc 	andi	r2,r2,255
   135d4:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   135d8:	d0e83817 	ldw	r3,-24352(gp)
   135dc:	e0bffd04 	addi	r2,fp,-12
   135e0:	1809883a 	mov	r4,r3
   135e4:	100b883a 	mov	r5,r2
   135e8:	001a0500 	call	1a050 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   135ec:	e0bffe43 	ldbu	r2,-7(fp)
   135f0:	10803fcc 	andi	r2,r2,255
   135f4:	10000726 	beq	r2,zero,13614 <__env_lock+0x80>
   135f8:	d0a01a17 	ldw	r2,-32664(gp)
   135fc:	e0ffe117 	ldw	r3,-124(fp)
   13600:	1880041e 	bne	r3,r2,13614 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
   13604:	d0a83717 	ldw	r2,-24356(gp)
   13608:	10800044 	addi	r2,r2,1
   1360c:	d0a83715 	stw	r2,-24356(gp)
   13610:	00000a06 	br	1363c <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   13614:	d0e83817 	ldw	r3,-24352(gp)
   13618:	e0bffe84 	addi	r2,fp,-6
   1361c:	1809883a 	mov	r4,r3
   13620:	000b883a 	mov	r5,zero
   13624:	100d883a 	mov	r6,r2
   13628:	0019b6c0 	call	19b6c <OSSemPend>
    locks  = 1;
   1362c:	00800044 	movi	r2,1
   13630:	d0a83715 	stw	r2,-24356(gp)
    lockid = id;
   13634:	e0bfe117 	ldw	r2,-124(fp)
   13638:	d0a01a15 	stw	r2,-32664(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   1363c:	0001883a 	nop
}
   13640:	e037883a 	mov	sp,fp
   13644:	dfc00117 	ldw	ra,4(sp)
   13648:	df000017 	ldw	fp,0(sp)
   1364c:	dec00204 	addi	sp,sp,8
   13650:	f800283a 	ret

00013654 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   13654:	defffd04 	addi	sp,sp,-12
   13658:	dfc00215 	stw	ra,8(sp)
   1365c:	df000115 	stw	fp,4(sp)
   13660:	df000104 	addi	fp,sp,4
   13664:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   13668:	d0a83717 	ldw	r2,-24356(gp)
   1366c:	1000011e 	bne	r2,zero,13674 <__env_unlock+0x20>
    return;
   13670:	00000a06 	br	1369c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   13674:	d0a83717 	ldw	r2,-24356(gp)
   13678:	10bfffc4 	addi	r2,r2,-1
   1367c:	d0a83715 	stw	r2,-24356(gp)
   13680:	d0a83717 	ldw	r2,-24356(gp)
   13684:	1000051e 	bne	r2,zero,1369c <__env_unlock+0x48>
  {
    lockid = -1;
   13688:	00bfffc4 	movi	r2,-1
   1368c:	d0a01a15 	stw	r2,-32664(gp)
    OSSemPost( alt_envsem );
   13690:	d0a83817 	ldw	r2,-24352(gp)
   13694:	1009883a 	mov	r4,r2
   13698:	0019f400 	call	19f40 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   1369c:	e037883a 	mov	sp,fp
   136a0:	dfc00117 	ldw	ra,4(sp)
   136a4:	df000017 	ldw	fp,0(sp)
   136a8:	dec00204 	addi	sp,sp,8
   136ac:	f800283a 	ret

000136b0 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   136b0:	deffdb04 	addi	sp,sp,-148
   136b4:	dfc02415 	stw	ra,144(sp)
   136b8:	df002315 	stw	fp,140(sp)
   136bc:	df002304 	addi	fp,sp,140
   136c0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   136c4:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   136c8:	008000b4 	movhi	r2,2
   136cc:	1091c644 	addi	r2,r2,18201
   136d0:	10800003 	ldbu	r2,0(r2)
   136d4:	10803fcc 	andi	r2,r2,255
   136d8:	10800060 	cmpeqi	r2,r2,1
   136dc:	1000011e 	bne	r2,zero,136e4 <__malloc_lock+0x34>
      return;
   136e0:	00003606 	br	137bc <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   136e4:	e0bfe204 	addi	r2,fp,-120
   136e8:	01003fc4 	movi	r4,255
   136ec:	100b883a 	mov	r5,r2
   136f0:	001b9b80 	call	1b9b8 <OSTaskQuery>
   136f4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   136f8:	e0bffe83 	ldbu	r2,-6(fp)
   136fc:	10803fcc 	andi	r2,r2,255
   13700:	10000126 	beq	r2,zero,13708 <__malloc_lock+0x58>
    return;
   13704:	00002d06 	br	137bc <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
   13708:	e0bfee83 	ldbu	r2,-70(fp)
   1370c:	10803fcc 	andi	r2,r2,255
   13710:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   13714:	d0e83a17 	ldw	r3,-24344(gp)
   13718:	e0bffd04 	addi	r2,fp,-12
   1371c:	1809883a 	mov	r4,r3
   13720:	100b883a 	mov	r5,r2
   13724:	001a0500 	call	1a050 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13728:	0005303a 	rdctl	r2,status
   1372c:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13730:	e0ffdf17 	ldw	r3,-132(fp)
   13734:	00bfff84 	movi	r2,-2
   13738:	1884703a 	and	r2,r3,r2
   1373c:	1001703a 	wrctl	status,r2
  
  return context;
   13740:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   13744:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   13748:	e0bffd0b 	ldhu	r2,-12(fp)
   1374c:	10bfffcc 	andi	r2,r2,65535
   13750:	10000b1e 	bne	r2,zero,13780 <__malloc_lock+0xd0>
   13754:	d0a01b17 	ldw	r2,-32660(gp)
   13758:	e0ffde17 	ldw	r3,-136(fp)
   1375c:	1880081e 	bne	r3,r2,13780 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
   13760:	d0a83917 	ldw	r2,-24348(gp)
   13764:	10800044 	addi	r2,r2,1
   13768:	d0a83915 	stw	r2,-24348(gp)
   1376c:	e0bfdd17 	ldw	r2,-140(fp)
   13770:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13774:	e0bfe017 	ldw	r2,-128(fp)
   13778:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   1377c:	00000e06 	br	137b8 <__malloc_lock+0x108>
   13780:	e0bfdd17 	ldw	r2,-140(fp)
   13784:	e0bfe115 	stw	r2,-124(fp)
   13788:	e0bfe117 	ldw	r2,-124(fp)
   1378c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   13790:	d0e83a17 	ldw	r3,-24344(gp)
   13794:	e0bffe84 	addi	r2,fp,-6
   13798:	1809883a 	mov	r4,r3
   1379c:	000b883a 	mov	r5,zero
   137a0:	100d883a 	mov	r6,r2
   137a4:	0019b6c0 	call	19b6c <OSSemPend>
    locks  = 1;
   137a8:	00800044 	movi	r2,1
   137ac:	d0a83915 	stw	r2,-24348(gp)
    lockid = id;
   137b0:	e0bfde17 	ldw	r2,-136(fp)
   137b4:	d0a01b15 	stw	r2,-32660(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   137b8:	0001883a 	nop
}
   137bc:	e037883a 	mov	sp,fp
   137c0:	dfc00117 	ldw	ra,4(sp)
   137c4:	df000017 	ldw	fp,0(sp)
   137c8:	dec00204 	addi	sp,sp,8
   137cc:	f800283a 	ret

000137d0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   137d0:	defff804 	addi	sp,sp,-32
   137d4:	dfc00715 	stw	ra,28(sp)
   137d8:	df000615 	stw	fp,24(sp)
   137dc:	df000604 	addi	fp,sp,24
   137e0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   137e4:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   137e8:	008000b4 	movhi	r2,2
   137ec:	1091c644 	addi	r2,r2,18201
   137f0:	10800003 	ldbu	r2,0(r2)
   137f4:	10803fcc 	andi	r2,r2,255
   137f8:	10800060 	cmpeqi	r2,r2,1
   137fc:	1000011e 	bne	r2,zero,13804 <__malloc_unlock+0x34>
      return;
   13800:	00002206 	br	1388c <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13804:	0005303a 	rdctl	r2,status
   13808:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1380c:	e0fffb17 	ldw	r3,-20(fp)
   13810:	00bfff84 	movi	r2,-2
   13814:	1884703a 	and	r2,r3,r2
   13818:	1001703a 	wrctl	status,r2
  
  return context;
   1381c:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
   13820:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   13824:	d0a83917 	ldw	r2,-24348(gp)
   13828:	1000051e 	bne	r2,zero,13840 <__malloc_unlock+0x70>
   1382c:	e0bffa17 	ldw	r2,-24(fp)
   13830:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13834:	e0bffc17 	ldw	r2,-16(fp)
   13838:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   1383c:	00001306 	br	1388c <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   13840:	d0a83917 	ldw	r2,-24348(gp)
   13844:	10bfffc4 	addi	r2,r2,-1
   13848:	d0a83915 	stw	r2,-24348(gp)
   1384c:	d0a83917 	ldw	r2,-24348(gp)
   13850:	10000a1e 	bne	r2,zero,1387c <__malloc_unlock+0xac>
  {
    lockid = -1;
   13854:	00bfffc4 	movi	r2,-1
   13858:	d0a01b15 	stw	r2,-32660(gp)
   1385c:	e0bffa17 	ldw	r2,-24(fp)
   13860:	e0bffd15 	stw	r2,-12(fp)
   13864:	e0bffd17 	ldw	r2,-12(fp)
   13868:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   1386c:	d0a83a17 	ldw	r2,-24344(gp)
   13870:	1009883a 	mov	r4,r2
   13874:	0019f400 	call	19f40 <OSSemPost>
   13878:	00000406 	br	1388c <__malloc_unlock+0xbc>
   1387c:	e0bffa17 	ldw	r2,-24(fp)
   13880:	e0bffe15 	stw	r2,-8(fp)
   13884:	e0bffe17 	ldw	r2,-8(fp)
   13888:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   1388c:	e037883a 	mov	sp,fp
   13890:	dfc00117 	ldw	ra,4(sp)
   13894:	df000017 	ldw	fp,0(sp)
   13898:	dec00204 	addi	sp,sp,8
   1389c:	f800283a 	ret

000138a0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   138a0:	defff704 	addi	sp,sp,-36
   138a4:	dfc00815 	stw	ra,32(sp)
   138a8:	df000715 	stw	fp,28(sp)
   138ac:	df000704 	addi	fp,sp,28
   138b0:	e13ffd15 	stw	r4,-12(fp)
   138b4:	e17ffe15 	stw	r5,-8(fp)
   138b8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   138bc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   138c0:	e0bfff17 	ldw	r2,-4(fp)
   138c4:	1000021e 	bne	r2,zero,138d0 <OSEventNameGet+0x30>
        return (0);
   138c8:	0005883a 	mov	r2,zero
   138cc:	00003706 	br	139ac <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   138d0:	e0bffd17 	ldw	r2,-12(fp)
   138d4:	1000051e 	bne	r2,zero,138ec <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   138d8:	e0bfff17 	ldw	r2,-4(fp)
   138dc:	00c00104 	movi	r3,4
   138e0:	10c00005 	stb	r3,0(r2)
        return (0);
   138e4:	0005883a 	mov	r2,zero
   138e8:	00003006 	br	139ac <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   138ec:	e0bffe17 	ldw	r2,-8(fp)
   138f0:	1000051e 	bne	r2,zero,13908 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   138f4:	e0bfff17 	ldw	r2,-4(fp)
   138f8:	00c00304 	movi	r3,12
   138fc:	10c00005 	stb	r3,0(r2)
        return (0);
   13900:	0005883a 	mov	r2,zero
   13904:	00002906 	br	139ac <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13908:	d0a84903 	ldbu	r2,-24284(gp)
   1390c:	10803fcc 	andi	r2,r2,255
   13910:	10000526 	beq	r2,zero,13928 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   13914:	e0bfff17 	ldw	r2,-4(fp)
   13918:	00c00444 	movi	r3,17
   1391c:	10c00005 	stb	r3,0(r2)
        return (0);
   13920:	0005883a 	mov	r2,zero
   13924:	00002106 	br	139ac <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   13928:	e0bffd17 	ldw	r2,-12(fp)
   1392c:	10800003 	ldbu	r2,0(r2)
   13930:	10803fcc 	andi	r2,r2,255
   13934:	10bfffc4 	addi	r2,r2,-1
   13938:	10800128 	cmpgeui	r2,r2,4
   1393c:	10000526 	beq	r2,zero,13954 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   13940:	e0bfff17 	ldw	r2,-4(fp)
   13944:	00c00044 	movi	r3,1
   13948:	10c00005 	stb	r3,0(r2)
             return (0);
   1394c:	0005883a 	mov	r2,zero
   13950:	00001606 	br	139ac <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   13954:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13958:	0005303a 	rdctl	r2,status
   1395c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13960:	e0fffb17 	ldw	r3,-20(fp)
   13964:	00bfff84 	movi	r2,-2
   13968:	1884703a 	and	r2,r3,r2
   1396c:	1001703a 	wrctl	status,r2
  
  return context;
   13970:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   13974:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   13978:	e0bffd17 	ldw	r2,-12(fp)
   1397c:	10800384 	addi	r2,r2,14
   13980:	e13ffe17 	ldw	r4,-8(fp)
   13984:	100b883a 	mov	r5,r2
   13988:	00152f40 	call	152f4 <OS_StrCopy>
   1398c:	e0bffa05 	stb	r2,-24(fp)
   13990:	e0bff917 	ldw	r2,-28(fp)
   13994:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13998:	e0bffc17 	ldw	r2,-16(fp)
   1399c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   139a0:	e0bfff17 	ldw	r2,-4(fp)
   139a4:	10000005 	stb	zero,0(r2)
    return (len);
   139a8:	e0bffa03 	ldbu	r2,-24(fp)
}
   139ac:	e037883a 	mov	sp,fp
   139b0:	dfc00117 	ldw	ra,4(sp)
   139b4:	df000017 	ldw	fp,0(sp)
   139b8:	dec00204 	addi	sp,sp,8
   139bc:	f800283a 	ret

000139c0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   139c0:	defff604 	addi	sp,sp,-40
   139c4:	dfc00915 	stw	ra,36(sp)
   139c8:	df000815 	stw	fp,32(sp)
   139cc:	df000804 	addi	fp,sp,32
   139d0:	e13ffd15 	stw	r4,-12(fp)
   139d4:	e17ffe15 	stw	r5,-8(fp)
   139d8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   139dc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   139e0:	e0bfff17 	ldw	r2,-4(fp)
   139e4:	1000011e 	bne	r2,zero,139ec <OSEventNameSet+0x2c>
        return;
   139e8:	00003f06 	br	13ae8 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   139ec:	e0bffd17 	ldw	r2,-12(fp)
   139f0:	1000041e 	bne	r2,zero,13a04 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   139f4:	e0bfff17 	ldw	r2,-4(fp)
   139f8:	00c00104 	movi	r3,4
   139fc:	10c00005 	stb	r3,0(r2)
        return;
   13a00:	00003906 	br	13ae8 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13a04:	e0bffe17 	ldw	r2,-8(fp)
   13a08:	1000041e 	bne	r2,zero,13a1c <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   13a0c:	e0bfff17 	ldw	r2,-4(fp)
   13a10:	00c00304 	movi	r3,12
   13a14:	10c00005 	stb	r3,0(r2)
        return;
   13a18:	00003306 	br	13ae8 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13a1c:	d0a84903 	ldbu	r2,-24284(gp)
   13a20:	10803fcc 	andi	r2,r2,255
   13a24:	10000426 	beq	r2,zero,13a38 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
   13a28:	e0bfff17 	ldw	r2,-4(fp)
   13a2c:	00c00484 	movi	r3,18
   13a30:	10c00005 	stb	r3,0(r2)
        return;
   13a34:	00002c06 	br	13ae8 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
   13a38:	e0bffd17 	ldw	r2,-12(fp)
   13a3c:	10800003 	ldbu	r2,0(r2)
   13a40:	10803fcc 	andi	r2,r2,255
   13a44:	10bfffc4 	addi	r2,r2,-1
   13a48:	10800128 	cmpgeui	r2,r2,4
   13a4c:	10000426 	beq	r2,zero,13a60 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   13a50:	e0bfff17 	ldw	r2,-4(fp)
   13a54:	00c00044 	movi	r3,1
   13a58:	10c00005 	stb	r3,0(r2)
             return;
   13a5c:	00002206 	br	13ae8 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   13a60:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a64:	0005303a 	rdctl	r2,status
   13a68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a6c:	e0fffa17 	ldw	r3,-24(fp)
   13a70:	00bfff84 	movi	r2,-2
   13a74:	1884703a 	and	r2,r3,r2
   13a78:	1001703a 	wrctl	status,r2
  
  return context;
   13a7c:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   13a80:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   13a84:	e13ffe17 	ldw	r4,-8(fp)
   13a88:	00153680 	call	15368 <OS_StrLen>
   13a8c:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   13a90:	e0bff903 	ldbu	r2,-28(fp)
   13a94:	10800830 	cmpltui	r2,r2,32
   13a98:	1000081e 	bne	r2,zero,13abc <OSEventNameSet+0xfc>
   13a9c:	e0bff817 	ldw	r2,-32(fp)
   13aa0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13aa4:	e0bffb17 	ldw	r2,-20(fp)
   13aa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   13aac:	e0bfff17 	ldw	r2,-4(fp)
   13ab0:	00c002c4 	movi	r3,11
   13ab4:	10c00005 	stb	r3,0(r2)
        return;
   13ab8:	00000b06 	br	13ae8 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   13abc:	e0bffd17 	ldw	r2,-12(fp)
   13ac0:	10800384 	addi	r2,r2,14
   13ac4:	1009883a 	mov	r4,r2
   13ac8:	e17ffe17 	ldw	r5,-8(fp)
   13acc:	00152f40 	call	152f4 <OS_StrCopy>
   13ad0:	e0bff817 	ldw	r2,-32(fp)
   13ad4:	e0bffc15 	stw	r2,-16(fp)
   13ad8:	e0bffc17 	ldw	r2,-16(fp)
   13adc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13ae0:	e0bfff17 	ldw	r2,-4(fp)
   13ae4:	10000005 	stb	zero,0(r2)
}
   13ae8:	e037883a 	mov	sp,fp
   13aec:	dfc00117 	ldw	ra,4(sp)
   13af0:	df000017 	ldw	fp,0(sp)
   13af4:	dec00204 	addi	sp,sp,8
   13af8:	f800283a 	ret

00013afc <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   13afc:	deffed04 	addi	sp,sp,-76
   13b00:	dfc01215 	stw	ra,72(sp)
   13b04:	df001115 	stw	fp,68(sp)
   13b08:	df001104 	addi	fp,sp,68
   13b0c:	e13ffc15 	stw	r4,-16(fp)
   13b10:	e17ffd15 	stw	r5,-12(fp)
   13b14:	e1bffe15 	stw	r6,-8(fp)
   13b18:	3805883a 	mov	r2,r7
   13b1c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   13b20:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   13b24:	e0800217 	ldw	r2,8(fp)
   13b28:	1000021e 	bne	r2,zero,13b34 <OSEventPendMulti+0x38>
        return (0);
   13b2c:	0005883a 	mov	r2,zero
   13b30:	00017106 	br	140f8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   13b34:	e0bffc17 	ldw	r2,-16(fp)
   13b38:	1000051e 	bne	r2,zero,13b50 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   13b3c:	e0800217 	ldw	r2,8(fp)
   13b40:	00c00104 	movi	r3,4
   13b44:	10c00005 	stb	r3,0(r2)
        return (0);
   13b48:	0005883a 	mov	r2,zero
   13b4c:	00016a06 	br	140f8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   13b50:	e0bffd17 	ldw	r2,-12(fp)
   13b54:	1000051e 	bne	r2,zero,13b6c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   13b58:	e0800217 	ldw	r2,8(fp)
   13b5c:	00c00104 	movi	r3,4
   13b60:	10c00005 	stb	r3,0(r2)
        return (0);
   13b64:	0005883a 	mov	r2,zero
   13b68:	00016306 	br	140f8 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   13b6c:	e0bffe17 	ldw	r2,-8(fp)
   13b70:	1000051e 	bne	r2,zero,13b88 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   13b74:	e0800217 	ldw	r2,8(fp)
   13b78:	00c00104 	movi	r3,4
   13b7c:	10c00005 	stb	r3,0(r2)
        return (0);
   13b80:	0005883a 	mov	r2,zero
   13b84:	00015c06 	br	140f8 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   13b88:	e0bffd17 	ldw	r2,-12(fp)
   13b8c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   13b90:	e0bffc17 	ldw	r2,-16(fp)
   13b94:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   13b98:	e0bfef17 	ldw	r2,-68(fp)
   13b9c:	10800017 	ldw	r2,0(r2)
   13ba0:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   13ba4:	00001906 	br	13c0c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   13ba8:	e0bff017 	ldw	r2,-64(fp)
   13bac:	10800003 	ldbu	r2,0(r2)
   13bb0:	10803fcc 	andi	r2,r2,255
   13bb4:	10c000a0 	cmpeqi	r3,r2,2
   13bb8:	1800091e 	bne	r3,zero,13be0 <OSEventPendMulti+0xe4>
   13bbc:	10c000e0 	cmpeqi	r3,r2,3
   13bc0:	1800091e 	bne	r3,zero,13be8 <OSEventPendMulti+0xec>
   13bc4:	10800060 	cmpeqi	r2,r2,1
   13bc8:	1000091e 	bne	r2,zero,13bf0 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   13bcc:	e0800217 	ldw	r2,8(fp)
   13bd0:	00c00044 	movi	r3,1
   13bd4:	10c00005 	stb	r3,0(r2)
                 return (0);
   13bd8:	0005883a 	mov	r2,zero
   13bdc:	00014606 	br	140f8 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   13be0:	0001883a 	nop
   13be4:	00000306 	br	13bf4 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   13be8:	0001883a 	nop
   13bec:	00000106 	br	13bf4 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   13bf0:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   13bf4:	e0bfef17 	ldw	r2,-68(fp)
   13bf8:	10800104 	addi	r2,r2,4
   13bfc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   13c00:	e0bfef17 	ldw	r2,-68(fp)
   13c04:	10800017 	ldw	r2,0(r2)
   13c08:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   13c0c:	e0bff017 	ldw	r2,-64(fp)
   13c10:	103fe51e 	bne	r2,zero,13ba8 <__alt_mem_Flash_flash_data+0xf4013ba8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   13c14:	d0a84903 	ldbu	r2,-24284(gp)
   13c18:	10803fcc 	andi	r2,r2,255
   13c1c:	10000526 	beq	r2,zero,13c34 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   13c20:	e0800217 	ldw	r2,8(fp)
   13c24:	00c00084 	movi	r3,2
   13c28:	10c00005 	stb	r3,0(r2)
        return (0);
   13c2c:	0005883a 	mov	r2,zero
   13c30:	00013106 	br	140f8 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   13c34:	d0a83b03 	ldbu	r2,-24340(gp)
   13c38:	10803fcc 	andi	r2,r2,255
   13c3c:	10000526 	beq	r2,zero,13c54 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   13c40:	e0800217 	ldw	r2,8(fp)
   13c44:	00c00344 	movi	r3,13
   13c48:	10c00005 	stb	r3,0(r2)
        return (0);
   13c4c:	0005883a 	mov	r2,zero
   13c50:	00012906 	br	140f8 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c54:	0005303a 	rdctl	r2,status
   13c58:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c5c:	e0fff517 	ldw	r3,-44(fp)
   13c60:	00bfff84 	movi	r2,-2
   13c64:	1884703a 	and	r2,r3,r2
   13c68:	1001703a 	wrctl	status,r2
  
  return context;
   13c6c:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   13c70:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   13c74:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   13c78:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   13c7c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   13c80:	e0bffc17 	ldw	r2,-16(fp)
   13c84:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   13c88:	e0bfef17 	ldw	r2,-68(fp)
   13c8c:	10800017 	ldw	r2,0(r2)
   13c90:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   13c94:	00008106 	br	13e9c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   13c98:	e0bff017 	ldw	r2,-64(fp)
   13c9c:	10800003 	ldbu	r2,0(r2)
   13ca0:	10803fcc 	andi	r2,r2,255
   13ca4:	10c000a0 	cmpeqi	r3,r2,2
   13ca8:	18003c1e 	bne	r3,zero,13d9c <OSEventPendMulti+0x2a0>
   13cac:	10c000e0 	cmpeqi	r3,r2,3
   13cb0:	1800031e 	bne	r3,zero,13cc0 <OSEventPendMulti+0x1c4>
   13cb4:	10800060 	cmpeqi	r2,r2,1
   13cb8:	10001e1e 	bne	r2,zero,13d34 <OSEventPendMulti+0x238>
   13cbc:	00006606 	br	13e58 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   13cc0:	e0bff017 	ldw	r2,-64(fp)
   13cc4:	1080020b 	ldhu	r2,8(r2)
   13cc8:	10bfffcc 	andi	r2,r2,65535
   13ccc:	10001526 	beq	r2,zero,13d24 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   13cd0:	e0bff017 	ldw	r2,-64(fp)
   13cd4:	1080020b 	ldhu	r2,8(r2)
   13cd8:	10bfffc4 	addi	r2,r2,-1
   13cdc:	1007883a 	mov	r3,r2
   13ce0:	e0bff017 	ldw	r2,-64(fp)
   13ce4:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   13ce8:	e0bffd17 	ldw	r2,-12(fp)
   13cec:	10c00104 	addi	r3,r2,4
   13cf0:	e0fffd15 	stw	r3,-12(fp)
   13cf4:	e0fff017 	ldw	r3,-64(fp)
   13cf8:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   13cfc:	00800044 	movi	r2,1
   13d00:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   13d04:	e0bffe17 	ldw	r2,-8(fp)
   13d08:	10c00104 	addi	r3,r2,4
   13d0c:	e0fffe15 	stw	r3,-8(fp)
   13d10:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   13d14:	e0bff18b 	ldhu	r2,-58(fp)
   13d18:	10800044 	addi	r2,r2,1
   13d1c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   13d20:	00005806 	br	13e84 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   13d24:	e0bff203 	ldbu	r2,-56(fp)
   13d28:	10800054 	ori	r2,r2,1
   13d2c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   13d30:	00005406 	br	13e84 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   13d34:	e0bff017 	ldw	r2,-64(fp)
   13d38:	10800117 	ldw	r2,4(r2)
   13d3c:	10001326 	beq	r2,zero,13d8c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   13d40:	e0bffe17 	ldw	r2,-8(fp)
   13d44:	10c00104 	addi	r3,r2,4
   13d48:	e0fffe15 	stw	r3,-8(fp)
   13d4c:	e0fff017 	ldw	r3,-64(fp)
   13d50:	18c00117 	ldw	r3,4(r3)
   13d54:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   13d58:	e0bff017 	ldw	r2,-64(fp)
   13d5c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   13d60:	e0bffd17 	ldw	r2,-12(fp)
   13d64:	10c00104 	addi	r3,r2,4
   13d68:	e0fffd15 	stw	r3,-12(fp)
   13d6c:	e0fff017 	ldw	r3,-64(fp)
   13d70:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   13d74:	00800044 	movi	r2,1
   13d78:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   13d7c:	e0bff18b 	ldhu	r2,-58(fp)
   13d80:	10800044 	addi	r2,r2,1
   13d84:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   13d88:	00003e06 	br	13e84 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   13d8c:	e0bff203 	ldbu	r2,-56(fp)
   13d90:	10800094 	ori	r2,r2,2
   13d94:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   13d98:	00003a06 	br	13e84 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   13d9c:	e0bff017 	ldw	r2,-64(fp)
   13da0:	10800117 	ldw	r2,4(r2)
   13da4:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   13da8:	e0bff417 	ldw	r2,-48(fp)
   13dac:	1080058b 	ldhu	r2,22(r2)
   13db0:	10bfffcc 	andi	r2,r2,65535
   13db4:	10002426 	beq	r2,zero,13e48 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   13db8:	e0bffe17 	ldw	r2,-8(fp)
   13dbc:	10c00104 	addi	r3,r2,4
   13dc0:	e0fffe15 	stw	r3,-8(fp)
   13dc4:	e0fff417 	ldw	r3,-48(fp)
   13dc8:	18c00417 	ldw	r3,16(r3)
   13dcc:	19400104 	addi	r5,r3,4
   13dd0:	e13ff417 	ldw	r4,-48(fp)
   13dd4:	21400415 	stw	r5,16(r4)
   13dd8:	18c00017 	ldw	r3,0(r3)
   13ddc:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   13de0:	e0bff417 	ldw	r2,-48(fp)
   13de4:	10c00417 	ldw	r3,16(r2)
   13de8:	e0bff417 	ldw	r2,-48(fp)
   13dec:	10800217 	ldw	r2,8(r2)
   13df0:	1880041e 	bne	r3,r2,13e04 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   13df4:	e0bff417 	ldw	r2,-48(fp)
   13df8:	10c00117 	ldw	r3,4(r2)
   13dfc:	e0bff417 	ldw	r2,-48(fp)
   13e00:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   13e04:	e0bff417 	ldw	r2,-48(fp)
   13e08:	1080058b 	ldhu	r2,22(r2)
   13e0c:	10bfffc4 	addi	r2,r2,-1
   13e10:	1007883a 	mov	r3,r2
   13e14:	e0bff417 	ldw	r2,-48(fp)
   13e18:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   13e1c:	e0bffd17 	ldw	r2,-12(fp)
   13e20:	10c00104 	addi	r3,r2,4
   13e24:	e0fffd15 	stw	r3,-12(fp)
   13e28:	e0fff017 	ldw	r3,-64(fp)
   13e2c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   13e30:	00800044 	movi	r2,1
   13e34:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   13e38:	e0bff18b 	ldhu	r2,-58(fp)
   13e3c:	10800044 	addi	r2,r2,1
   13e40:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   13e44:	00000f06 	br	13e84 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   13e48:	e0bff203 	ldbu	r2,-56(fp)
   13e4c:	10800114 	ori	r2,r2,4
   13e50:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   13e54:	00000b06 	br	13e84 <OSEventPendMulti+0x388>
   13e58:	e0bff317 	ldw	r2,-52(fp)
   13e5c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e60:	e0bff617 	ldw	r2,-40(fp)
   13e64:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   13e68:	e0bffd17 	ldw	r2,-12(fp)
   13e6c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   13e70:	e0800217 	ldw	r2,8(fp)
   13e74:	00c00044 	movi	r3,1
   13e78:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   13e7c:	e0bff18b 	ldhu	r2,-58(fp)
   13e80:	00009d06 	br	140f8 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   13e84:	e0bfef17 	ldw	r2,-68(fp)
   13e88:	10800104 	addi	r2,r2,4
   13e8c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   13e90:	e0bfef17 	ldw	r2,-68(fp)
   13e94:	10800017 	ldw	r2,0(r2)
   13e98:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   13e9c:	e0bff017 	ldw	r2,-64(fp)
   13ea0:	103f7d1e 	bne	r2,zero,13c98 <__alt_mem_Flash_flash_data+0xf4013c98>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   13ea4:	e0bff103 	ldbu	r2,-60(fp)
   13ea8:	10800058 	cmpnei	r2,r2,1
   13eac:	10000a1e 	bne	r2,zero,13ed8 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   13eb0:	e0bffd17 	ldw	r2,-12(fp)
   13eb4:	10000015 	stw	zero,0(r2)
   13eb8:	e0bff317 	ldw	r2,-52(fp)
   13ebc:	e0bff715 	stw	r2,-36(fp)
   13ec0:	e0bff717 	ldw	r2,-36(fp)
   13ec4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   13ec8:	e0800217 	ldw	r2,8(fp)
   13ecc:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   13ed0:	e0bff18b 	ldhu	r2,-58(fp)
   13ed4:	00008806 	br	140f8 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   13ed8:	d0a84a17 	ldw	r2,-24280(gp)
   13edc:	d0e84a17 	ldw	r3,-24280(gp)
   13ee0:	19000c03 	ldbu	r4,48(r3)
   13ee4:	e0fff203 	ldbu	r3,-56(fp)
   13ee8:	20c6b03a 	or	r3,r4,r3
   13eec:	1809883a 	mov	r4,r3
   13ef0:	00ffe004 	movi	r3,-128
   13ef4:	20c6b03a 	or	r3,r4,r3
   13ef8:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13efc:	d0a84a17 	ldw	r2,-24280(gp)
   13f00:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   13f04:	d0a84a17 	ldw	r2,-24280(gp)
   13f08:	e0ffff0b 	ldhu	r3,-4(fp)
   13f0c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   13f10:	e13ffc17 	ldw	r4,-16(fp)
   13f14:	0014a440 	call	14a44 <OS_EventTaskWaitMulti>
   13f18:	e0bff317 	ldw	r2,-52(fp)
   13f1c:	e0bff815 	stw	r2,-32(fp)
   13f20:	e0bff817 	ldw	r2,-32(fp)
   13f24:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   13f28:	00151b80 	call	151b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f2c:	0005303a 	rdctl	r2,status
   13f30:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f34:	e0fff917 	ldw	r3,-28(fp)
   13f38:	00bfff84 	movi	r2,-2
   13f3c:	1884703a 	and	r2,r3,r2
   13f40:	1001703a 	wrctl	status,r2
  
  return context;
   13f44:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   13f48:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   13f4c:	d0a84a17 	ldw	r2,-24280(gp)
   13f50:	10800c43 	ldbu	r2,49(r2)
   13f54:	10803fcc 	andi	r2,r2,255
   13f58:	10000226 	beq	r2,zero,13f64 <OSEventPendMulti+0x468>
   13f5c:	108000a0 	cmpeqi	r2,r2,2
   13f60:	10001826 	beq	r2,zero,13fc4 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   13f64:	d0a84a17 	ldw	r2,-24280(gp)
   13f68:	10800717 	ldw	r2,28(r2)
   13f6c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   13f70:	e0bff017 	ldw	r2,-64(fp)
   13f74:	10000b26 	beq	r2,zero,13fa4 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   13f78:	e0bffd17 	ldw	r2,-12(fp)
   13f7c:	10c00104 	addi	r3,r2,4
   13f80:	e0fffd15 	stw	r3,-12(fp)
   13f84:	e0fff017 	ldw	r3,-64(fp)
   13f88:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   13f8c:	e0bffd17 	ldw	r2,-12(fp)
   13f90:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   13f94:	e0bff18b 	ldhu	r2,-58(fp)
   13f98:	10800044 	addi	r2,r2,1
   13f9c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   13fa0:	00000d06 	br	13fd8 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   13fa4:	d0a84a17 	ldw	r2,-24280(gp)
   13fa8:	00c00044 	movi	r3,1
   13fac:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   13fb0:	d0a84a17 	ldw	r2,-24280(gp)
   13fb4:	1009883a 	mov	r4,r2
   13fb8:	e17ffc17 	ldw	r5,-16(fp)
   13fbc:	0014c440 	call	14c44 <OS_EventTaskRemoveMulti>
             }
			 break;
   13fc0:	00000506 	br	13fd8 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   13fc4:	d0a84a17 	ldw	r2,-24280(gp)
   13fc8:	1009883a 	mov	r4,r2
   13fcc:	e17ffc17 	ldw	r5,-16(fp)
   13fd0:	0014c440 	call	14c44 <OS_EventTaskRemoveMulti>
             break;
   13fd4:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   13fd8:	d0a84a17 	ldw	r2,-24280(gp)
   13fdc:	10800c43 	ldbu	r2,49(r2)
   13fe0:	10803fcc 	andi	r2,r2,255
   13fe4:	10000326 	beq	r2,zero,13ff4 <OSEventPendMulti+0x4f8>
   13fe8:	108000a0 	cmpeqi	r2,r2,2
   13fec:	1000231e 	bne	r2,zero,1407c <OSEventPendMulti+0x580>
   13ff0:	00002a06 	br	1409c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   13ff4:	e0bff017 	ldw	r2,-64(fp)
   13ff8:	10800003 	ldbu	r2,0(r2)
   13ffc:	10803fcc 	andi	r2,r2,255
   14000:	0080100e 	bge	zero,r2,14044 <OSEventPendMulti+0x548>
   14004:	10c000d0 	cmplti	r3,r2,3
   14008:	1800071e 	bne	r3,zero,14028 <OSEventPendMulti+0x52c>
   1400c:	108000e0 	cmpeqi	r2,r2,3
   14010:	10000c26 	beq	r2,zero,14044 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   14014:	e0bffe17 	ldw	r2,-8(fp)
   14018:	10c00104 	addi	r3,r2,4
   1401c:	e0fffe15 	stw	r3,-8(fp)
   14020:	10000015 	stw	zero,0(r2)
                      break;
   14024:	00001206 	br	14070 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   14028:	e0bffe17 	ldw	r2,-8(fp)
   1402c:	10c00104 	addi	r3,r2,4
   14030:	e0fffe15 	stw	r3,-8(fp)
   14034:	d0e84a17 	ldw	r3,-24280(gp)
   14038:	18c00917 	ldw	r3,36(r3)
   1403c:	10c00015 	stw	r3,0(r2)
                      break;
   14040:	00000b06 	br	14070 <OSEventPendMulti+0x574>
   14044:	e0bff317 	ldw	r2,-52(fp)
   14048:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1404c:	e0bffa17 	ldw	r2,-24(fp)
   14050:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   14054:	e0bffd17 	ldw	r2,-12(fp)
   14058:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   1405c:	e0800217 	ldw	r2,8(fp)
   14060:	00c00044 	movi	r3,1
   14064:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   14068:	e0bff18b 	ldhu	r2,-58(fp)
   1406c:	00002206 	br	140f8 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   14070:	e0800217 	ldw	r2,8(fp)
   14074:	10000005 	stb	zero,0(r2)
             break;
   14078:	00001006 	br	140bc <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   1407c:	e0bffe17 	ldw	r2,-8(fp)
   14080:	10c00104 	addi	r3,r2,4
   14084:	e0fffe15 	stw	r3,-8(fp)
   14088:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   1408c:	e0800217 	ldw	r2,8(fp)
   14090:	00c00384 	movi	r3,14
   14094:	10c00005 	stb	r3,0(r2)
             break;
   14098:	00000806 	br	140bc <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   1409c:	e0bffe17 	ldw	r2,-8(fp)
   140a0:	10c00104 	addi	r3,r2,4
   140a4:	e0fffe15 	stw	r3,-8(fp)
   140a8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   140ac:	e0800217 	ldw	r2,8(fp)
   140b0:	00c00284 	movi	r3,10
   140b4:	10c00005 	stb	r3,0(r2)
             break;
   140b8:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   140bc:	d0a84a17 	ldw	r2,-24280(gp)
   140c0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   140c4:	d0a84a17 	ldw	r2,-24280(gp)
   140c8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   140cc:	d0a84a17 	ldw	r2,-24280(gp)
   140d0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   140d4:	d0a84a17 	ldw	r2,-24280(gp)
   140d8:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   140dc:	d0a84a17 	ldw	r2,-24280(gp)
   140e0:	10000915 	stw	zero,36(r2)
   140e4:	e0bff317 	ldw	r2,-52(fp)
   140e8:	e0bffb15 	stw	r2,-20(fp)
   140ec:	e0bffb17 	ldw	r2,-20(fp)
   140f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   140f4:	e0bff18b 	ldhu	r2,-58(fp)
}
   140f8:	e037883a 	mov	sp,fp
   140fc:	dfc00117 	ldw	ra,4(sp)
   14100:	df000017 	ldw	fp,0(sp)
   14104:	dec00204 	addi	sp,sp,8
   14108:	f800283a 	ret

0001410c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   1410c:	defffe04 	addi	sp,sp,-8
   14110:	dfc00115 	stw	ra,4(sp)
   14114:	df000015 	stw	fp,0(sp)
   14118:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   1411c:	001f6800 	call	1f680 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   14120:	0014e800 	call	14e80 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   14124:	0014ec40 	call	14ec4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   14128:	00150240 	call	15024 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   1412c:	0014da40 	call	14da4 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   14130:	0016fa40 	call	16fa4 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   14134:	00184740 	call	18474 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   14138:	00196a80 	call	196a8 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   1413c:	0014f2c0 	call	14f2c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   14140:	0014fa80 	call	14fa8 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   14144:	001f69c0 	call	1f69c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   14148:	00158900 	call	15890 <OSDebugInit>
#endif
}
   1414c:	e037883a 	mov	sp,fp
   14150:	dfc00117 	ldw	ra,4(sp)
   14154:	df000017 	ldw	fp,0(sp)
   14158:	dec00204 	addi	sp,sp,8
   1415c:	f800283a 	ret

00014160 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   14160:	defffc04 	addi	sp,sp,-16
   14164:	df000315 	stw	fp,12(sp)
   14168:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1416c:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
   14170:	d0a83b43 	ldbu	r2,-24339(gp)
   14174:	10803fcc 	andi	r2,r2,255
   14178:	10800058 	cmpnei	r2,r2,1
   1417c:	1000131e 	bne	r2,zero,141cc <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14180:	0005303a 	rdctl	r2,status
   14184:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14188:	e0fffe17 	ldw	r3,-8(fp)
   1418c:	00bfff84 	movi	r2,-2
   14190:	1884703a 	and	r2,r3,r2
   14194:	1001703a 	wrctl	status,r2
  
  return context;
   14198:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   1419c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
   141a0:	d0a84903 	ldbu	r2,-24284(gp)
   141a4:	10803fcc 	andi	r2,r2,255
   141a8:	10803fe0 	cmpeqi	r2,r2,255
   141ac:	1000031e 	bne	r2,zero,141bc <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   141b0:	d0a84903 	ldbu	r2,-24284(gp)
   141b4:	10800044 	addi	r2,r2,1
   141b8:	d0a84905 	stb	r2,-24284(gp)
   141bc:	e0bffd17 	ldw	r2,-12(fp)
   141c0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   141c4:	e0bfff17 	ldw	r2,-4(fp)
   141c8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   141cc:	e037883a 	mov	sp,fp
   141d0:	df000017 	ldw	fp,0(sp)
   141d4:	dec00104 	addi	sp,sp,4
   141d8:	f800283a 	ret

000141dc <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   141dc:	defffb04 	addi	sp,sp,-20
   141e0:	dfc00415 	stw	ra,16(sp)
   141e4:	df000315 	stw	fp,12(sp)
   141e8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   141ec:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   141f0:	d0a83b43 	ldbu	r2,-24339(gp)
   141f4:	10803fcc 	andi	r2,r2,255
   141f8:	10800058 	cmpnei	r2,r2,1
   141fc:	10002f1e 	bne	r2,zero,142bc <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14200:	0005303a 	rdctl	r2,status
   14204:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14208:	e0fffe17 	ldw	r3,-8(fp)
   1420c:	00bfff84 	movi	r2,-2
   14210:	1884703a 	and	r2,r3,r2
   14214:	1001703a 	wrctl	status,r2
  
  return context;
   14218:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   1421c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   14220:	d0a84903 	ldbu	r2,-24284(gp)
   14224:	10803fcc 	andi	r2,r2,255
   14228:	10000326 	beq	r2,zero,14238 <OSIntExit+0x5c>
            OSIntNesting--;
   1422c:	d0a84903 	ldbu	r2,-24284(gp)
   14230:	10bfffc4 	addi	r2,r2,-1
   14234:	d0a84905 	stb	r2,-24284(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   14238:	d0a84903 	ldbu	r2,-24284(gp)
   1423c:	10803fcc 	andi	r2,r2,255
   14240:	10001a1e 	bne	r2,zero,142ac <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   14244:	d0a83b03 	ldbu	r2,-24340(gp)
   14248:	10803fcc 	andi	r2,r2,255
   1424c:	1000171e 	bne	r2,zero,142ac <OSIntExit+0xd0>
                OS_SchedNew();
   14250:	00152840 	call	15284 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   14254:	d0e83d03 	ldbu	r3,-24332(gp)
   14258:	d0a83d43 	ldbu	r2,-24331(gp)
   1425c:	18c03fcc 	andi	r3,r3,255
   14260:	10803fcc 	andi	r2,r2,255
   14264:	18801126 	beq	r3,r2,142ac <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   14268:	d0a83d03 	ldbu	r2,-24332(gp)
   1426c:	10c03fcc 	andi	r3,r2,255
   14270:	008000f4 	movhi	r2,3
   14274:	10985004 	addi	r2,r2,24896
   14278:	18c7883a 	add	r3,r3,r3
   1427c:	18c7883a 	add	r3,r3,r3
   14280:	10c5883a 	add	r2,r2,r3
   14284:	10800017 	ldw	r2,0(r2)
   14288:	d0a84515 	stw	r2,-24300(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   1428c:	d0a84517 	ldw	r2,-24300(gp)
   14290:	10c00e17 	ldw	r3,56(r2)
   14294:	18c00044 	addi	r3,r3,1
   14298:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   1429c:	d0a84017 	ldw	r2,-24320(gp)
   142a0:	10800044 	addi	r2,r2,1
   142a4:	d0a84015 	stw	r2,-24320(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   142a8:	001f3c00 	call	1f3c0 <OSCtxSw>
   142ac:	e0bffd17 	ldw	r2,-12(fp)
   142b0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   142b4:	e0bfff17 	ldw	r2,-4(fp)
   142b8:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   142bc:	e037883a 	mov	sp,fp
   142c0:	dfc00117 	ldw	ra,4(sp)
   142c4:	df000017 	ldw	fp,0(sp)
   142c8:	dec00204 	addi	sp,sp,8
   142cc:	f800283a 	ret

000142d0 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   142d0:	defffc04 	addi	sp,sp,-16
   142d4:	df000315 	stw	fp,12(sp)
   142d8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   142dc:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   142e0:	d0a83b43 	ldbu	r2,-24339(gp)
   142e4:	10803fcc 	andi	r2,r2,255
   142e8:	10800058 	cmpnei	r2,r2,1
   142ec:	1000161e 	bne	r2,zero,14348 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   142f0:	0005303a 	rdctl	r2,status
   142f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   142f8:	e0fffe17 	ldw	r3,-8(fp)
   142fc:	00bfff84 	movi	r2,-2
   14300:	1884703a 	and	r2,r3,r2
   14304:	1001703a 	wrctl	status,r2
  
  return context;
   14308:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   1430c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   14310:	d0a84903 	ldbu	r2,-24284(gp)
   14314:	10803fcc 	andi	r2,r2,255
   14318:	1000071e 	bne	r2,zero,14338 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   1431c:	d0a83b03 	ldbu	r2,-24340(gp)
   14320:	10803fcc 	andi	r2,r2,255
   14324:	10803fe0 	cmpeqi	r2,r2,255
   14328:	1000031e 	bne	r2,zero,14338 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   1432c:	d0a83b03 	ldbu	r2,-24340(gp)
   14330:	10800044 	addi	r2,r2,1
   14334:	d0a83b05 	stb	r2,-24340(gp)
   14338:	e0bffd17 	ldw	r2,-12(fp)
   1433c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14340:	e0bfff17 	ldw	r2,-4(fp)
   14344:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   14348:	e037883a 	mov	sp,fp
   1434c:	df000017 	ldw	fp,0(sp)
   14350:	dec00104 	addi	sp,sp,4
   14354:	f800283a 	ret

00014358 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   14358:	defff804 	addi	sp,sp,-32
   1435c:	dfc00715 	stw	ra,28(sp)
   14360:	df000615 	stw	fp,24(sp)
   14364:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14368:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   1436c:	d0a83b43 	ldbu	r2,-24339(gp)
   14370:	10803fcc 	andi	r2,r2,255
   14374:	10800058 	cmpnei	r2,r2,1
   14378:	1000281e 	bne	r2,zero,1441c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1437c:	0005303a 	rdctl	r2,status
   14380:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14384:	e0fffb17 	ldw	r3,-20(fp)
   14388:	00bfff84 	movi	r2,-2
   1438c:	1884703a 	and	r2,r3,r2
   14390:	1001703a 	wrctl	status,r2
  
  return context;
   14394:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   14398:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   1439c:	d0a83b03 	ldbu	r2,-24340(gp)
   143a0:	10803fcc 	andi	r2,r2,255
   143a4:	10001926 	beq	r2,zero,1440c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   143a8:	d0a83b03 	ldbu	r2,-24340(gp)
   143ac:	10bfffc4 	addi	r2,r2,-1
   143b0:	d0a83b05 	stb	r2,-24340(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   143b4:	d0a83b03 	ldbu	r2,-24340(gp)
   143b8:	10803fcc 	andi	r2,r2,255
   143bc:	10000e1e 	bne	r2,zero,143f8 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   143c0:	d0a84903 	ldbu	r2,-24284(gp)
   143c4:	10803fcc 	andi	r2,r2,255
   143c8:	1000061e 	bne	r2,zero,143e4 <OSSchedUnlock+0x8c>
   143cc:	e0bffa17 	ldw	r2,-24(fp)
   143d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   143d4:	e0bffc17 	ldw	r2,-16(fp)
   143d8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   143dc:	00151b80 	call	151b8 <OS_Sched>
   143e0:	00000e06 	br	1441c <OSSchedUnlock+0xc4>
   143e4:	e0bffa17 	ldw	r2,-24(fp)
   143e8:	e0bffd15 	stw	r2,-12(fp)
   143ec:	e0bffd17 	ldw	r2,-12(fp)
   143f0:	1001703a 	wrctl	status,r2
   143f4:	00000906 	br	1441c <OSSchedUnlock+0xc4>
   143f8:	e0bffa17 	ldw	r2,-24(fp)
   143fc:	e0bffe15 	stw	r2,-8(fp)
   14400:	e0bffe17 	ldw	r2,-8(fp)
   14404:	1001703a 	wrctl	status,r2
   14408:	00000406 	br	1441c <OSSchedUnlock+0xc4>
   1440c:	e0bffa17 	ldw	r2,-24(fp)
   14410:	e0bfff15 	stw	r2,-4(fp)
   14414:	e0bfff17 	ldw	r2,-4(fp)
   14418:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   1441c:	e037883a 	mov	sp,fp
   14420:	dfc00117 	ldw	ra,4(sp)
   14424:	df000017 	ldw	fp,0(sp)
   14428:	dec00204 	addi	sp,sp,8
   1442c:	f800283a 	ret

00014430 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   14430:	defffe04 	addi	sp,sp,-8
   14434:	dfc00115 	stw	ra,4(sp)
   14438:	df000015 	stw	fp,0(sp)
   1443c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   14440:	d0a83b43 	ldbu	r2,-24339(gp)
   14444:	10803fcc 	andi	r2,r2,255
   14448:	10000f1e 	bne	r2,zero,14488 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   1444c:	00152840 	call	15284 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   14450:	d0a83d03 	ldbu	r2,-24332(gp)
   14454:	d0a83d45 	stb	r2,-24331(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   14458:	d0a83d03 	ldbu	r2,-24332(gp)
   1445c:	10c03fcc 	andi	r3,r2,255
   14460:	008000f4 	movhi	r2,3
   14464:	10985004 	addi	r2,r2,24896
   14468:	18c7883a 	add	r3,r3,r3
   1446c:	18c7883a 	add	r3,r3,r3
   14470:	10c5883a 	add	r2,r2,r3
   14474:	10800017 	ldw	r2,0(r2)
   14478:	d0a84515 	stw	r2,-24300(gp)
        OSTCBCur      = OSTCBHighRdy;
   1447c:	d0a84517 	ldw	r2,-24300(gp)
   14480:	d0a84a15 	stw	r2,-24280(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   14484:	001f44c0 	call	1f44c <OSStartHighRdy>
    }
}
   14488:	e037883a 	mov	sp,fp
   1448c:	dfc00117 	ldw	ra,4(sp)
   14490:	df000017 	ldw	fp,0(sp)
   14494:	dec00204 	addi	sp,sp,8
   14498:	f800283a 	ret

0001449c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   1449c:	defff904 	addi	sp,sp,-28
   144a0:	dfc00615 	stw	ra,24(sp)
   144a4:	df000515 	stw	fp,20(sp)
   144a8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   144ac:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   144b0:	01000084 	movi	r4,2
   144b4:	001bb500 	call	1bb50 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   144b8:	0005303a 	rdctl	r2,status
   144bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   144c0:	e0fffc17 	ldw	r3,-16(fp)
   144c4:	00bfff84 	movi	r2,-2
   144c8:	1884703a 	and	r2,r3,r2
   144cc:	1001703a 	wrctl	status,r2
  
  return context;
   144d0:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   144d4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   144d8:	d0283c15 	stw	zero,-24336(gp)
   144dc:	e0bffb17 	ldw	r2,-20(fp)
   144e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   144e4:	e0bffd17 	ldw	r2,-12(fp)
   144e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   144ec:	0009883a 	mov	r4,zero
   144f0:	001bb500 	call	1bb50 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   144f4:	0005303a 	rdctl	r2,status
   144f8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   144fc:	e0fffe17 	ldw	r3,-8(fp)
   14500:	00bfff84 	movi	r2,-2
   14504:	1884703a 	and	r2,r3,r2
   14508:	1001703a 	wrctl	status,r2
  
  return context;
   1450c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   14510:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   14514:	d0a83c17 	ldw	r2,-24336(gp)
   14518:	d0a84115 	stw	r2,-24316(gp)
    OSStatRdy    = OS_TRUE;
   1451c:	00800044 	movi	r2,1
   14520:	d0a84d05 	stb	r2,-24268(gp)
   14524:	e0bffb17 	ldw	r2,-20(fp)
   14528:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1452c:	e0bfff17 	ldw	r2,-4(fp)
   14530:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   14534:	e037883a 	mov	sp,fp
   14538:	dfc00117 	ldw	ra,4(sp)
   1453c:	df000017 	ldw	fp,0(sp)
   14540:	dec00204 	addi	sp,sp,8
   14544:	f800283a 	ret

00014548 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   14548:	defff704 	addi	sp,sp,-36
   1454c:	dfc00815 	stw	ra,32(sp)
   14550:	df000715 	stw	fp,28(sp)
   14554:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14558:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   1455c:	001f6640 	call	1f664 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14560:	0005303a 	rdctl	r2,status
   14564:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14568:	e0fffc17 	ldw	r3,-16(fp)
   1456c:	00bfff84 	movi	r2,-2
   14570:	1884703a 	and	r2,r3,r2
   14574:	1001703a 	wrctl	status,r2
  
  return context;
   14578:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   1457c:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   14580:	d0a84b17 	ldw	r2,-24276(gp)
   14584:	10800044 	addi	r2,r2,1
   14588:	d0a84b15 	stw	r2,-24276(gp)
   1458c:	e0bffb17 	ldw	r2,-20(fp)
   14590:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14594:	e0bffd17 	ldw	r2,-12(fp)
   14598:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   1459c:	d0a83b43 	ldbu	r2,-24339(gp)
   145a0:	10803fcc 	andi	r2,r2,255
   145a4:	10800058 	cmpnei	r2,r2,1
   145a8:	1000691e 	bne	r2,zero,14750 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   145ac:	d0a83f03 	ldbu	r2,-24324(gp)
   145b0:	10803fcc 	andi	r2,r2,255
   145b4:	10c00060 	cmpeqi	r3,r2,1
   145b8:	1800061e 	bne	r3,zero,145d4 <OSTimeTick+0x8c>
   145bc:	10c000a0 	cmpeqi	r3,r2,2
   145c0:	1800061e 	bne	r3,zero,145dc <OSTimeTick+0x94>
   145c4:	10000a1e 	bne	r2,zero,145f0 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   145c8:	00800044 	movi	r2,1
   145cc:	e0bffa05 	stb	r2,-24(fp)
                 break;
   145d0:	00000b06 	br	14600 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   145d4:	e03ffa05 	stb	zero,-24(fp)
                 break;
   145d8:	00000906 	br	14600 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   145dc:	00800044 	movi	r2,1
   145e0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   145e4:	00800044 	movi	r2,1
   145e8:	d0a83f05 	stb	r2,-24324(gp)
                 break;
   145ec:	00000406 	br	14600 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   145f0:	00800044 	movi	r2,1
   145f4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   145f8:	d0283f05 	stb	zero,-24324(gp)
                 break;
   145fc:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   14600:	e0bffa03 	ldbu	r2,-24(fp)
   14604:	1000011e 	bne	r2,zero,1460c <OSTimeTick+0xc4>
            return;
   14608:	00005106 	br	14750 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   1460c:	d0a83e17 	ldw	r2,-24328(gp)
   14610:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   14614:	00004906 	br	1473c <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14618:	0005303a 	rdctl	r2,status
   1461c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14620:	e0fffe17 	ldw	r3,-8(fp)
   14624:	00bfff84 	movi	r2,-2
   14628:	1884703a 	and	r2,r3,r2
   1462c:	1001703a 	wrctl	status,r2
  
  return context;
   14630:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
   14634:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   14638:	e0bff917 	ldw	r2,-28(fp)
   1463c:	10800b8b 	ldhu	r2,46(r2)
   14640:	10bfffcc 	andi	r2,r2,65535
   14644:	10003626 	beq	r2,zero,14720 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   14648:	e0bff917 	ldw	r2,-28(fp)
   1464c:	10800b8b 	ldhu	r2,46(r2)
   14650:	10bfffc4 	addi	r2,r2,-1
   14654:	1007883a 	mov	r3,r2
   14658:	e0bff917 	ldw	r2,-28(fp)
   1465c:	10c00b8d 	sth	r3,46(r2)
   14660:	e0bff917 	ldw	r2,-28(fp)
   14664:	10800b8b 	ldhu	r2,46(r2)
   14668:	10bfffcc 	andi	r2,r2,65535
   1466c:	10002c1e 	bne	r2,zero,14720 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   14670:	e0bff917 	ldw	r2,-28(fp)
   14674:	10800c03 	ldbu	r2,48(r2)
   14678:	10803fcc 	andi	r2,r2,255
   1467c:	10800dcc 	andi	r2,r2,55
   14680:	10000b26 	beq	r2,zero,146b0 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   14684:	e0bff917 	ldw	r2,-28(fp)
   14688:	10c00c03 	ldbu	r3,48(r2)
   1468c:	00bff204 	movi	r2,-56
   14690:	1884703a 	and	r2,r3,r2
   14694:	1007883a 	mov	r3,r2
   14698:	e0bff917 	ldw	r2,-28(fp)
   1469c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   146a0:	e0bff917 	ldw	r2,-28(fp)
   146a4:	00c00044 	movi	r3,1
   146a8:	10c00c45 	stb	r3,49(r2)
   146ac:	00000206 	br	146b8 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   146b0:	e0bff917 	ldw	r2,-28(fp)
   146b4:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   146b8:	e0bff917 	ldw	r2,-28(fp)
   146bc:	10800c03 	ldbu	r2,48(r2)
   146c0:	10803fcc 	andi	r2,r2,255
   146c4:	1080020c 	andi	r2,r2,8
   146c8:	1000151e 	bne	r2,zero,14720 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   146cc:	e0bff917 	ldw	r2,-28(fp)
   146d0:	10c00d83 	ldbu	r3,54(r2)
   146d4:	d0a84703 	ldbu	r2,-24292(gp)
   146d8:	1884b03a 	or	r2,r3,r2
   146dc:	d0a84705 	stb	r2,-24292(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   146e0:	e0bff917 	ldw	r2,-28(fp)
   146e4:	10800d03 	ldbu	r2,52(r2)
   146e8:	10c03fcc 	andi	r3,r2,255
   146ec:	e0bff917 	ldw	r2,-28(fp)
   146f0:	10800d03 	ldbu	r2,52(r2)
   146f4:	11003fcc 	andi	r4,r2,255
   146f8:	d0a84744 	addi	r2,gp,-24291
   146fc:	2085883a 	add	r2,r4,r2
   14700:	11000003 	ldbu	r4,0(r2)
   14704:	e0bff917 	ldw	r2,-28(fp)
   14708:	10800d43 	ldbu	r2,53(r2)
   1470c:	2084b03a 	or	r2,r4,r2
   14710:	1009883a 	mov	r4,r2
   14714:	d0a84744 	addi	r2,gp,-24291
   14718:	1885883a 	add	r2,r3,r2
   1471c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   14720:	e0bff917 	ldw	r2,-28(fp)
   14724:	10800517 	ldw	r2,20(r2)
   14728:	e0bff915 	stw	r2,-28(fp)
   1472c:	e0bffb17 	ldw	r2,-20(fp)
   14730:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14734:	e0bfff17 	ldw	r2,-4(fp)
   14738:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   1473c:	e0bff917 	ldw	r2,-28(fp)
   14740:	10800c83 	ldbu	r2,50(r2)
   14744:	10803fcc 	andi	r2,r2,255
   14748:	10800518 	cmpnei	r2,r2,20
   1474c:	103fb21e 	bne	r2,zero,14618 <__alt_mem_Flash_flash_data+0xf4014618>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   14750:	e037883a 	mov	sp,fp
   14754:	dfc00117 	ldw	ra,4(sp)
   14758:	df000017 	ldw	fp,0(sp)
   1475c:	dec00204 	addi	sp,sp,8
   14760:	f800283a 	ret

00014764 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   14764:	deffff04 	addi	sp,sp,-4
   14768:	df000015 	stw	fp,0(sp)
   1476c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   14770:	00804784 	movi	r2,286
}
   14774:	e037883a 	mov	sp,fp
   14778:	df000017 	ldw	fp,0(sp)
   1477c:	dec00104 	addi	sp,sp,4
   14780:	f800283a 	ret

00014784 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   14784:	deffff04 	addi	sp,sp,-4
   14788:	df000015 	stw	fp,0(sp)
   1478c:	d839883a 	mov	fp,sp
}
   14790:	e037883a 	mov	sp,fp
   14794:	df000017 	ldw	fp,0(sp)
   14798:	dec00104 	addi	sp,sp,4
   1479c:	f800283a 	ret

000147a0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   147a0:	defff804 	addi	sp,sp,-32
   147a4:	dfc00715 	stw	ra,28(sp)
   147a8:	df000615 	stw	fp,24(sp)
   147ac:	df000604 	addi	fp,sp,24
   147b0:	e13ffc15 	stw	r4,-16(fp)
   147b4:	e17ffd15 	stw	r5,-12(fp)
   147b8:	3007883a 	mov	r3,r6
   147bc:	3805883a 	mov	r2,r7
   147c0:	e0fffe05 	stb	r3,-8(fp)
   147c4:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   147c8:	e0bffc17 	ldw	r2,-16(fp)
   147cc:	10800283 	ldbu	r2,10(r2)
   147d0:	10c03fcc 	andi	r3,r2,255
   147d4:	008000b4 	movhi	r2,2
   147d8:	10813e04 	addi	r2,r2,1272
   147dc:	10c5883a 	add	r2,r2,r3
   147e0:	10800003 	ldbu	r2,0(r2)
   147e4:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   147e8:	e0bffa03 	ldbu	r2,-24(fp)
   147ec:	e0fffc17 	ldw	r3,-16(fp)
   147f0:	1885883a 	add	r2,r3,r2
   147f4:	10800204 	addi	r2,r2,8
   147f8:	108000c3 	ldbu	r2,3(r2)
   147fc:	10c03fcc 	andi	r3,r2,255
   14800:	008000b4 	movhi	r2,2
   14804:	10813e04 	addi	r2,r2,1272
   14808:	10c5883a 	add	r2,r2,r3
   1480c:	10800003 	ldbu	r2,0(r2)
   14810:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   14814:	e0bffa03 	ldbu	r2,-24(fp)
   14818:	100490fa 	slli	r2,r2,3
   1481c:	1007883a 	mov	r3,r2
   14820:	e0bffa43 	ldbu	r2,-23(fp)
   14824:	1885883a 	add	r2,r3,r2
   14828:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   1482c:	e0fffa83 	ldbu	r3,-22(fp)
   14830:	008000f4 	movhi	r2,3
   14834:	10985004 	addi	r2,r2,24896
   14838:	18c7883a 	add	r3,r3,r3
   1483c:	18c7883a 	add	r3,r3,r3
   14840:	10c5883a 	add	r2,r2,r3
   14844:	10800017 	ldw	r2,0(r2)
   14848:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   1484c:	e0bffb17 	ldw	r2,-20(fp)
   14850:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   14854:	e0bffb17 	ldw	r2,-20(fp)
   14858:	e0fffd17 	ldw	r3,-12(fp)
   1485c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   14860:	e0bffb17 	ldw	r2,-20(fp)
   14864:	10800c03 	ldbu	r2,48(r2)
   14868:	1007883a 	mov	r3,r2
   1486c:	e0bffe03 	ldbu	r2,-8(fp)
   14870:	0084303a 	nor	r2,zero,r2
   14874:	1884703a 	and	r2,r3,r2
   14878:	1007883a 	mov	r3,r2
   1487c:	e0bffb17 	ldw	r2,-20(fp)
   14880:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   14884:	e0bffb17 	ldw	r2,-20(fp)
   14888:	e0ffff03 	ldbu	r3,-4(fp)
   1488c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   14890:	e0bffb17 	ldw	r2,-20(fp)
   14894:	10800c03 	ldbu	r2,48(r2)
   14898:	10803fcc 	andi	r2,r2,255
   1489c:	1080020c 	andi	r2,r2,8
   148a0:	1000111e 	bne	r2,zero,148e8 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   148a4:	e0bffb17 	ldw	r2,-20(fp)
   148a8:	10c00d83 	ldbu	r3,54(r2)
   148ac:	d0a84703 	ldbu	r2,-24292(gp)
   148b0:	1884b03a 	or	r2,r3,r2
   148b4:	d0a84705 	stb	r2,-24292(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   148b8:	e0fffa03 	ldbu	r3,-24(fp)
   148bc:	e13ffa03 	ldbu	r4,-24(fp)
   148c0:	d0a84744 	addi	r2,gp,-24291
   148c4:	2085883a 	add	r2,r4,r2
   148c8:	11000003 	ldbu	r4,0(r2)
   148cc:	e0bffb17 	ldw	r2,-20(fp)
   148d0:	10800d43 	ldbu	r2,53(r2)
   148d4:	2084b03a 	or	r2,r4,r2
   148d8:	1009883a 	mov	r4,r2
   148dc:	d0a84744 	addi	r2,gp,-24291
   148e0:	1885883a 	add	r2,r3,r2
   148e4:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   148e8:	e13ffb17 	ldw	r4,-20(fp)
   148ec:	e17ffc17 	ldw	r5,-16(fp)
   148f0:	0014b900 	call	14b90 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   148f4:	e0bffb17 	ldw	r2,-20(fp)
   148f8:	10800817 	ldw	r2,32(r2)
   148fc:	10000826 	beq	r2,zero,14920 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   14900:	e0bffb17 	ldw	r2,-20(fp)
   14904:	10800817 	ldw	r2,32(r2)
   14908:	e13ffb17 	ldw	r4,-20(fp)
   1490c:	100b883a 	mov	r5,r2
   14910:	0014c440 	call	14c44 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   14914:	e0bffb17 	ldw	r2,-20(fp)
   14918:	e0fffc17 	ldw	r3,-16(fp)
   1491c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   14920:	e0bffa83 	ldbu	r2,-22(fp)
}
   14924:	e037883a 	mov	sp,fp
   14928:	dfc00117 	ldw	ra,4(sp)
   1492c:	df000017 	ldw	fp,0(sp)
   14930:	dec00204 	addi	sp,sp,8
   14934:	f800283a 	ret

00014938 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   14938:	defffd04 	addi	sp,sp,-12
   1493c:	df000215 	stw	fp,8(sp)
   14940:	df000204 	addi	fp,sp,8
   14944:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   14948:	d0a84a17 	ldw	r2,-24280(gp)
   1494c:	e0ffff17 	ldw	r3,-4(fp)
   14950:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   14954:	d0a84a17 	ldw	r2,-24280(gp)
   14958:	10800d03 	ldbu	r2,52(r2)
   1495c:	10803fcc 	andi	r2,r2,255
   14960:	d0e84a17 	ldw	r3,-24280(gp)
   14964:	18c00d03 	ldbu	r3,52(r3)
   14968:	18c03fcc 	andi	r3,r3,255
   1496c:	e13fff17 	ldw	r4,-4(fp)
   14970:	20c7883a 	add	r3,r4,r3
   14974:	18c00204 	addi	r3,r3,8
   14978:	190000c3 	ldbu	r4,3(r3)
   1497c:	d0e84a17 	ldw	r3,-24280(gp)
   14980:	18c00d43 	ldbu	r3,53(r3)
   14984:	20c6b03a 	or	r3,r4,r3
   14988:	1809883a 	mov	r4,r3
   1498c:	e0ffff17 	ldw	r3,-4(fp)
   14990:	1885883a 	add	r2,r3,r2
   14994:	10800204 	addi	r2,r2,8
   14998:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   1499c:	e0bfff17 	ldw	r2,-4(fp)
   149a0:	10c00283 	ldbu	r3,10(r2)
   149a4:	d0a84a17 	ldw	r2,-24280(gp)
   149a8:	10800d83 	ldbu	r2,54(r2)
   149ac:	1884b03a 	or	r2,r3,r2
   149b0:	1007883a 	mov	r3,r2
   149b4:	e0bfff17 	ldw	r2,-4(fp)
   149b8:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   149bc:	d0a84a17 	ldw	r2,-24280(gp)
   149c0:	10800d03 	ldbu	r2,52(r2)
   149c4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   149c8:	e0fffe03 	ldbu	r3,-8(fp)
   149cc:	e13ffe03 	ldbu	r4,-8(fp)
   149d0:	d0a84744 	addi	r2,gp,-24291
   149d4:	2085883a 	add	r2,r4,r2
   149d8:	10800003 	ldbu	r2,0(r2)
   149dc:	1009883a 	mov	r4,r2
   149e0:	d0a84a17 	ldw	r2,-24280(gp)
   149e4:	10800d43 	ldbu	r2,53(r2)
   149e8:	0084303a 	nor	r2,zero,r2
   149ec:	2084703a 	and	r2,r4,r2
   149f0:	1009883a 	mov	r4,r2
   149f4:	d0a84744 	addi	r2,gp,-24291
   149f8:	1885883a 	add	r2,r3,r2
   149fc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14a00:	e0fffe03 	ldbu	r3,-8(fp)
   14a04:	d0a84744 	addi	r2,gp,-24291
   14a08:	1885883a 	add	r2,r3,r2
   14a0c:	10800003 	ldbu	r2,0(r2)
   14a10:	10803fcc 	andi	r2,r2,255
   14a14:	1000071e 	bne	r2,zero,14a34 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   14a18:	d0a84a17 	ldw	r2,-24280(gp)
   14a1c:	10800d83 	ldbu	r2,54(r2)
   14a20:	0084303a 	nor	r2,zero,r2
   14a24:	1007883a 	mov	r3,r2
   14a28:	d0a84703 	ldbu	r2,-24292(gp)
   14a2c:	1884703a 	and	r2,r3,r2
   14a30:	d0a84705 	stb	r2,-24292(gp)
    }
}
   14a34:	e037883a 	mov	sp,fp
   14a38:	df000017 	ldw	fp,0(sp)
   14a3c:	dec00104 	addi	sp,sp,4
   14a40:	f800283a 	ret

00014a44 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   14a44:	defffb04 	addi	sp,sp,-20
   14a48:	df000415 	stw	fp,16(sp)
   14a4c:	df000404 	addi	fp,sp,16
   14a50:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   14a54:	d0a84a17 	ldw	r2,-24280(gp)
   14a58:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   14a5c:	d0a84a17 	ldw	r2,-24280(gp)
   14a60:	e0ffff17 	ldw	r3,-4(fp)
   14a64:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   14a68:	e0bfff17 	ldw	r2,-4(fp)
   14a6c:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   14a70:	e0bffc17 	ldw	r2,-16(fp)
   14a74:	10800017 	ldw	r2,0(r2)
   14a78:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   14a7c:	00002006 	br	14b00 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   14a80:	d0a84a17 	ldw	r2,-24280(gp)
   14a84:	10800d03 	ldbu	r2,52(r2)
   14a88:	10803fcc 	andi	r2,r2,255
   14a8c:	d0e84a17 	ldw	r3,-24280(gp)
   14a90:	18c00d03 	ldbu	r3,52(r3)
   14a94:	18c03fcc 	andi	r3,r3,255
   14a98:	e13ffd17 	ldw	r4,-12(fp)
   14a9c:	20c7883a 	add	r3,r4,r3
   14aa0:	18c00204 	addi	r3,r3,8
   14aa4:	190000c3 	ldbu	r4,3(r3)
   14aa8:	d0e84a17 	ldw	r3,-24280(gp)
   14aac:	18c00d43 	ldbu	r3,53(r3)
   14ab0:	20c6b03a 	or	r3,r4,r3
   14ab4:	1809883a 	mov	r4,r3
   14ab8:	e0fffd17 	ldw	r3,-12(fp)
   14abc:	1885883a 	add	r2,r3,r2
   14ac0:	10800204 	addi	r2,r2,8
   14ac4:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   14ac8:	e0bffd17 	ldw	r2,-12(fp)
   14acc:	10c00283 	ldbu	r3,10(r2)
   14ad0:	d0a84a17 	ldw	r2,-24280(gp)
   14ad4:	10800d83 	ldbu	r2,54(r2)
   14ad8:	1884b03a 	or	r2,r3,r2
   14adc:	1007883a 	mov	r3,r2
   14ae0:	e0bffd17 	ldw	r2,-12(fp)
   14ae4:	10c00285 	stb	r3,10(r2)
        pevents++;
   14ae8:	e0bffc17 	ldw	r2,-16(fp)
   14aec:	10800104 	addi	r2,r2,4
   14af0:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   14af4:	e0bffc17 	ldw	r2,-16(fp)
   14af8:	10800017 	ldw	r2,0(r2)
   14afc:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   14b00:	e0bffd17 	ldw	r2,-12(fp)
   14b04:	103fde1e 	bne	r2,zero,14a80 <__alt_mem_Flash_flash_data+0xf4014a80>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   14b08:	d0a84a17 	ldw	r2,-24280(gp)
   14b0c:	10800d03 	ldbu	r2,52(r2)
   14b10:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   14b14:	e0fffe03 	ldbu	r3,-8(fp)
   14b18:	e13ffe03 	ldbu	r4,-8(fp)
   14b1c:	d0a84744 	addi	r2,gp,-24291
   14b20:	2085883a 	add	r2,r4,r2
   14b24:	10800003 	ldbu	r2,0(r2)
   14b28:	1009883a 	mov	r4,r2
   14b2c:	d0a84a17 	ldw	r2,-24280(gp)
   14b30:	10800d43 	ldbu	r2,53(r2)
   14b34:	0084303a 	nor	r2,zero,r2
   14b38:	2084703a 	and	r2,r4,r2
   14b3c:	1009883a 	mov	r4,r2
   14b40:	d0a84744 	addi	r2,gp,-24291
   14b44:	1885883a 	add	r2,r3,r2
   14b48:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14b4c:	e0fffe03 	ldbu	r3,-8(fp)
   14b50:	d0a84744 	addi	r2,gp,-24291
   14b54:	1885883a 	add	r2,r3,r2
   14b58:	10800003 	ldbu	r2,0(r2)
   14b5c:	10803fcc 	andi	r2,r2,255
   14b60:	1000071e 	bne	r2,zero,14b80 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   14b64:	d0a84a17 	ldw	r2,-24280(gp)
   14b68:	10800d83 	ldbu	r2,54(r2)
   14b6c:	0084303a 	nor	r2,zero,r2
   14b70:	1007883a 	mov	r3,r2
   14b74:	d0a84703 	ldbu	r2,-24292(gp)
   14b78:	1884703a 	and	r2,r3,r2
   14b7c:	d0a84705 	stb	r2,-24292(gp)
    }
}
   14b80:	e037883a 	mov	sp,fp
   14b84:	df000017 	ldw	fp,0(sp)
   14b88:	dec00104 	addi	sp,sp,4
   14b8c:	f800283a 	ret

00014b90 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   14b90:	defffc04 	addi	sp,sp,-16
   14b94:	df000315 	stw	fp,12(sp)
   14b98:	df000304 	addi	fp,sp,12
   14b9c:	e13ffe15 	stw	r4,-8(fp)
   14ba0:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   14ba4:	e0bffe17 	ldw	r2,-8(fp)
   14ba8:	10800d03 	ldbu	r2,52(r2)
   14bac:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   14bb0:	e0bffd03 	ldbu	r2,-12(fp)
   14bb4:	e0fffd03 	ldbu	r3,-12(fp)
   14bb8:	e13fff17 	ldw	r4,-4(fp)
   14bbc:	20c7883a 	add	r3,r4,r3
   14bc0:	18c00204 	addi	r3,r3,8
   14bc4:	18c000c3 	ldbu	r3,3(r3)
   14bc8:	1809883a 	mov	r4,r3
   14bcc:	e0fffe17 	ldw	r3,-8(fp)
   14bd0:	18c00d43 	ldbu	r3,53(r3)
   14bd4:	00c6303a 	nor	r3,zero,r3
   14bd8:	20c6703a 	and	r3,r4,r3
   14bdc:	1809883a 	mov	r4,r3
   14be0:	e0ffff17 	ldw	r3,-4(fp)
   14be4:	1885883a 	add	r2,r3,r2
   14be8:	10800204 	addi	r2,r2,8
   14bec:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   14bf0:	e0bffd03 	ldbu	r2,-12(fp)
   14bf4:	e0ffff17 	ldw	r3,-4(fp)
   14bf8:	1885883a 	add	r2,r3,r2
   14bfc:	10800204 	addi	r2,r2,8
   14c00:	108000c3 	ldbu	r2,3(r2)
   14c04:	10803fcc 	andi	r2,r2,255
   14c08:	10000a1e 	bne	r2,zero,14c34 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   14c0c:	e0bfff17 	ldw	r2,-4(fp)
   14c10:	10800283 	ldbu	r2,10(r2)
   14c14:	1007883a 	mov	r3,r2
   14c18:	e0bffe17 	ldw	r2,-8(fp)
   14c1c:	10800d83 	ldbu	r2,54(r2)
   14c20:	0084303a 	nor	r2,zero,r2
   14c24:	1884703a 	and	r2,r3,r2
   14c28:	1007883a 	mov	r3,r2
   14c2c:	e0bfff17 	ldw	r2,-4(fp)
   14c30:	10c00285 	stb	r3,10(r2)
    }
}
   14c34:	e037883a 	mov	sp,fp
   14c38:	df000017 	ldw	fp,0(sp)
   14c3c:	dec00104 	addi	sp,sp,4
   14c40:	f800283a 	ret

00014c44 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   14c44:	defffa04 	addi	sp,sp,-24
   14c48:	df000515 	stw	fp,20(sp)
   14c4c:	df000504 	addi	fp,sp,20
   14c50:	e13ffe15 	stw	r4,-8(fp)
   14c54:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   14c58:	e0bffe17 	ldw	r2,-8(fp)
   14c5c:	10800d03 	ldbu	r2,52(r2)
   14c60:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   14c64:	e0bffe17 	ldw	r2,-8(fp)
   14c68:	10800d83 	ldbu	r2,54(r2)
   14c6c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   14c70:	e0bffe17 	ldw	r2,-8(fp)
   14c74:	10800d43 	ldbu	r2,53(r2)
   14c78:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   14c7c:	e0bfff17 	ldw	r2,-4(fp)
   14c80:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   14c84:	e0bffb17 	ldw	r2,-20(fp)
   14c88:	10800017 	ldw	r2,0(r2)
   14c8c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   14c90:	00002506 	br	14d28 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   14c94:	e0bffd03 	ldbu	r2,-12(fp)
   14c98:	e0fffd03 	ldbu	r3,-12(fp)
   14c9c:	e13ffc17 	ldw	r4,-16(fp)
   14ca0:	20c7883a 	add	r3,r4,r3
   14ca4:	18c00204 	addi	r3,r3,8
   14ca8:	18c000c3 	ldbu	r3,3(r3)
   14cac:	1809883a 	mov	r4,r3
   14cb0:	e0fffd83 	ldbu	r3,-10(fp)
   14cb4:	00c6303a 	nor	r3,zero,r3
   14cb8:	20c6703a 	and	r3,r4,r3
   14cbc:	1809883a 	mov	r4,r3
   14cc0:	e0fffc17 	ldw	r3,-16(fp)
   14cc4:	1885883a 	add	r2,r3,r2
   14cc8:	10800204 	addi	r2,r2,8
   14ccc:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   14cd0:	e0bffd03 	ldbu	r2,-12(fp)
   14cd4:	e0fffc17 	ldw	r3,-16(fp)
   14cd8:	1885883a 	add	r2,r3,r2
   14cdc:	10800204 	addi	r2,r2,8
   14ce0:	108000c3 	ldbu	r2,3(r2)
   14ce4:	10803fcc 	andi	r2,r2,255
   14ce8:	1000091e 	bne	r2,zero,14d10 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   14cec:	e0bffc17 	ldw	r2,-16(fp)
   14cf0:	10800283 	ldbu	r2,10(r2)
   14cf4:	1007883a 	mov	r3,r2
   14cf8:	e0bffd43 	ldbu	r2,-11(fp)
   14cfc:	0084303a 	nor	r2,zero,r2
   14d00:	1884703a 	and	r2,r3,r2
   14d04:	1007883a 	mov	r3,r2
   14d08:	e0bffc17 	ldw	r2,-16(fp)
   14d0c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   14d10:	e0bffb17 	ldw	r2,-20(fp)
   14d14:	10800104 	addi	r2,r2,4
   14d18:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   14d1c:	e0bffb17 	ldw	r2,-20(fp)
   14d20:	10800017 	ldw	r2,0(r2)
   14d24:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   14d28:	e0bffc17 	ldw	r2,-16(fp)
   14d2c:	103fd91e 	bne	r2,zero,14c94 <__alt_mem_Flash_flash_data+0xf4014c94>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   14d30:	e037883a 	mov	sp,fp
   14d34:	df000017 	ldw	fp,0(sp)
   14d38:	dec00104 	addi	sp,sp,4
   14d3c:	f800283a 	ret

00014d40 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   14d40:	defffc04 	addi	sp,sp,-16
   14d44:	df000315 	stw	fp,12(sp)
   14d48:	df000304 	addi	fp,sp,12
   14d4c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   14d50:	e0bfff17 	ldw	r2,-4(fp)
   14d54:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   14d58:	e0bfff17 	ldw	r2,-4(fp)
   14d5c:	108002c4 	addi	r2,r2,11
   14d60:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   14d64:	e03ffe05 	stb	zero,-8(fp)
   14d68:	00000706 	br	14d88 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   14d6c:	e0bffd17 	ldw	r2,-12(fp)
   14d70:	10c00044 	addi	r3,r2,1
   14d74:	e0fffd15 	stw	r3,-12(fp)
   14d78:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   14d7c:	e0bffe03 	ldbu	r2,-8(fp)
   14d80:	10800044 	addi	r2,r2,1
   14d84:	e0bffe05 	stb	r2,-8(fp)
   14d88:	e0bffe03 	ldbu	r2,-8(fp)
   14d8c:	108000f0 	cmpltui	r2,r2,3
   14d90:	103ff61e 	bne	r2,zero,14d6c <__alt_mem_Flash_flash_data+0xf4014d6c>
        *ptbl++ = 0;
    }
}
   14d94:	e037883a 	mov	sp,fp
   14d98:	df000017 	ldw	fp,0(sp)
   14d9c:	dec00104 	addi	sp,sp,4
   14da0:	f800283a 	ret

00014da4 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   14da4:	defffb04 	addi	sp,sp,-20
   14da8:	dfc00415 	stw	ra,16(sp)
   14dac:	df000315 	stw	fp,12(sp)
   14db0:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   14db4:	010000f4 	movhi	r4,3
   14db8:	21143c04 	addi	r4,r4,20720
   14dbc:	0142d004 	movi	r5,2880
   14dc0:	00151040 	call	15104 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   14dc4:	008000f4 	movhi	r2,3
   14dc8:	10943c04 	addi	r2,r2,20720
   14dcc:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   14dd0:	008000f4 	movhi	r2,3
   14dd4:	10944804 	addi	r2,r2,20768
   14dd8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   14ddc:	e03ffd0d 	sth	zero,-12(fp)
   14de0:	00001306 	br	14e30 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   14de4:	e0bffe17 	ldw	r2,-8(fp)
   14de8:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   14dec:	e0bffe17 	ldw	r2,-8(fp)
   14df0:	e0ffff17 	ldw	r3,-4(fp)
   14df4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   14df8:	e0bffe17 	ldw	r2,-8(fp)
   14dfc:	00c00fc4 	movi	r3,63
   14e00:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   14e04:	e0bffe17 	ldw	r2,-8(fp)
   14e08:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   14e0c:	e0bffe17 	ldw	r2,-8(fp)
   14e10:	10800c04 	addi	r2,r2,48
   14e14:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   14e18:	e0bfff17 	ldw	r2,-4(fp)
   14e1c:	10800c04 	addi	r2,r2,48
   14e20:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   14e24:	e0bffd0b 	ldhu	r2,-12(fp)
   14e28:	10800044 	addi	r2,r2,1
   14e2c:	e0bffd0d 	sth	r2,-12(fp)
   14e30:	e0bffd0b 	ldhu	r2,-12(fp)
   14e34:	10800ef0 	cmpltui	r2,r2,59
   14e38:	103fea1e 	bne	r2,zero,14de4 <__alt_mem_Flash_flash_data+0xf4014de4>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   14e3c:	e0bffe17 	ldw	r2,-8(fp)
   14e40:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   14e44:	e0bffe17 	ldw	r2,-8(fp)
   14e48:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   14e4c:	e0bffe17 	ldw	r2,-8(fp)
   14e50:	00c00fc4 	movi	r3,63
   14e54:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   14e58:	e0bffe17 	ldw	r2,-8(fp)
   14e5c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   14e60:	008000f4 	movhi	r2,3
   14e64:	10943c04 	addi	r2,r2,20720
   14e68:	d0a84815 	stw	r2,-24288(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   14e6c:	e037883a 	mov	sp,fp
   14e70:	dfc00117 	ldw	ra,4(sp)
   14e74:	df000017 	ldw	fp,0(sp)
   14e78:	dec00204 	addi	sp,sp,8
   14e7c:	f800283a 	ret

00014e80 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   14e80:	deffff04 	addi	sp,sp,-4
   14e84:	df000015 	stw	fp,0(sp)
   14e88:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   14e8c:	d0284b15 	stw	zero,-24276(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   14e90:	d0284905 	stb	zero,-24284(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   14e94:	d0283b05 	stb	zero,-24340(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   14e98:	d0284345 	stb	zero,-24307(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   14e9c:	d0283b45 	stb	zero,-24339(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   14ea0:	d0284015 	stw	zero,-24320(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   14ea4:	d0283c15 	stw	zero,-24336(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   14ea8:	d0284e15 	stw	zero,-24264(gp)
    OSIdleCtrMax  = 0L;
   14eac:	d0284115 	stw	zero,-24316(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   14eb0:	d0284d05 	stb	zero,-24268(gp)
#endif
}
   14eb4:	e037883a 	mov	sp,fp
   14eb8:	df000017 	ldw	fp,0(sp)
   14ebc:	dec00104 	addi	sp,sp,4
   14ec0:	f800283a 	ret

00014ec4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   14ec4:	defffd04 	addi	sp,sp,-12
   14ec8:	df000215 	stw	fp,8(sp)
   14ecc:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   14ed0:	d0284705 	stb	zero,-24292(gp)
    prdytbl       = &OSRdyTbl[0];
   14ed4:	d0a84744 	addi	r2,gp,-24291
   14ed8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   14edc:	e03ffe05 	stb	zero,-8(fp)
   14ee0:	00000706 	br	14f00 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   14ee4:	e0bfff17 	ldw	r2,-4(fp)
   14ee8:	10c00044 	addi	r3,r2,1
   14eec:	e0ffff15 	stw	r3,-4(fp)
   14ef0:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   14ef4:	e0bffe03 	ldbu	r2,-8(fp)
   14ef8:	10800044 	addi	r2,r2,1
   14efc:	e0bffe05 	stb	r2,-8(fp)
   14f00:	e0bffe03 	ldbu	r2,-8(fp)
   14f04:	108000f0 	cmpltui	r2,r2,3
   14f08:	103ff61e 	bne	r2,zero,14ee4 <__alt_mem_Flash_flash_data+0xf4014ee4>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   14f0c:	d0283d45 	stb	zero,-24331(gp)
    OSPrioHighRdy = 0;
   14f10:	d0283d05 	stb	zero,-24332(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   14f14:	d0284515 	stw	zero,-24300(gp)
    OSTCBCur      = (OS_TCB *)0;
   14f18:	d0284a15 	stw	zero,-24280(gp)
}
   14f1c:	e037883a 	mov	sp,fp
   14f20:	df000017 	ldw	fp,0(sp)
   14f24:	dec00104 	addi	sp,sp,4
   14f28:	f800283a 	ret

00014f2c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   14f2c:	defff804 	addi	sp,sp,-32
   14f30:	dfc00715 	stw	ra,28(sp)
   14f34:	df000615 	stw	fp,24(sp)
   14f38:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   14f3c:	00bfffd4 	movui	r2,65535
   14f40:	d8800015 	stw	r2,0(sp)
   14f44:	008000f4 	movhi	r2,3
   14f48:	10923c04 	addi	r2,r2,18672
   14f4c:	d8800115 	stw	r2,4(sp)
   14f50:	00808004 	movi	r2,512
   14f54:	d8800215 	stw	r2,8(sp)
   14f58:	d8000315 	stw	zero,12(sp)
   14f5c:	008000c4 	movi	r2,3
   14f60:	d8800415 	stw	r2,16(sp)
   14f64:	01000074 	movhi	r4,1
   14f68:	2114ef04 	addi	r4,r4,21436
   14f6c:	000b883a 	mov	r5,zero
   14f70:	018000f4 	movhi	r6,3
   14f74:	31943b04 	addi	r6,r6,20716
   14f78:	01c00504 	movi	r7,20
   14f7c:	001a9580 	call	1a958 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   14f80:	01000504 	movi	r4,20
   14f84:	014000b4 	movhi	r5,2
   14f88:	29417e04 	addi	r5,r5,1528
   14f8c:	e1bfff04 	addi	r6,fp,-4
   14f90:	001b2240 	call	1b224 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   14f94:	e037883a 	mov	sp,fp
   14f98:	dfc00117 	ldw	ra,4(sp)
   14f9c:	df000017 	ldw	fp,0(sp)
   14fa0:	dec00204 	addi	sp,sp,8
   14fa4:	f800283a 	ret

00014fa8 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   14fa8:	defff804 	addi	sp,sp,-32
   14fac:	dfc00715 	stw	ra,28(sp)
   14fb0:	df000615 	stw	fp,24(sp)
   14fb4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   14fb8:	00bfff94 	movui	r2,65534
   14fbc:	d8800015 	stw	r2,0(sp)
   14fc0:	008000f4 	movhi	r2,3
   14fc4:	108fc404 	addi	r2,r2,16144
   14fc8:	d8800115 	stw	r2,4(sp)
   14fcc:	00808004 	movi	r2,512
   14fd0:	d8800215 	stw	r2,8(sp)
   14fd4:	d8000315 	stw	zero,12(sp)
   14fd8:	008000c4 	movi	r2,3
   14fdc:	d8800415 	stw	r2,16(sp)
   14fe0:	01000074 	movhi	r4,1
   14fe4:	21150604 	addi	r4,r4,21528
   14fe8:	000b883a 	mov	r5,zero
   14fec:	018000f4 	movhi	r6,3
   14ff0:	3191c304 	addi	r6,r6,18188
   14ff4:	01c004c4 	movi	r7,19
   14ff8:	001a9580 	call	1a958 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   14ffc:	010004c4 	movi	r4,19
   15000:	014000b4 	movhi	r5,2
   15004:	29418204 	addi	r5,r5,1544
   15008:	e1bfff04 	addi	r6,fp,-4
   1500c:	001b2240 	call	1b224 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   15010:	e037883a 	mov	sp,fp
   15014:	dfc00117 	ldw	ra,4(sp)
   15018:	df000017 	ldw	fp,0(sp)
   1501c:	dec00204 	addi	sp,sp,8
   15020:	f800283a 	ret

00015024 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   15024:	defffb04 	addi	sp,sp,-20
   15028:	dfc00415 	stw	ra,16(sp)
   1502c:	df000315 	stw	fp,12(sp)
   15030:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   15034:	010000f4 	movhi	r4,3
   15038:	21170c04 	addi	r4,r4,23600
   1503c:	01414404 	movi	r5,1296
   15040:	00151040 	call	15104 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   15044:	010000f4 	movhi	r4,3
   15048:	21185004 	addi	r4,r4,24896
   1504c:	01401504 	movi	r5,84
   15050:	00151040 	call	15104 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   15054:	008000f4 	movhi	r2,3
   15058:	10970c04 	addi	r2,r2,23600
   1505c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   15060:	008000f4 	movhi	r2,3
   15064:	10972704 	addi	r2,r2,23708
   15068:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   1506c:	e03ffd05 	stb	zero,-12(fp)
   15070:	00001106 	br	150b8 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   15074:	e0bffe17 	ldw	r2,-8(fp)
   15078:	e0ffff17 	ldw	r3,-4(fp)
   1507c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   15080:	e0bffe17 	ldw	r2,-8(fp)
   15084:	00c00fc4 	movi	r3,63
   15088:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   1508c:	e0bffe17 	ldw	r2,-8(fp)
   15090:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   15094:	e0bffe17 	ldw	r2,-8(fp)
   15098:	10801b04 	addi	r2,r2,108
   1509c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   150a0:	e0bfff17 	ldw	r2,-4(fp)
   150a4:	10801b04 	addi	r2,r2,108
   150a8:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   150ac:	e0bffd03 	ldbu	r2,-12(fp)
   150b0:	10800044 	addi	r2,r2,1
   150b4:	e0bffd05 	stb	r2,-12(fp)
   150b8:	e0bffd03 	ldbu	r2,-12(fp)
   150bc:	108002f0 	cmpltui	r2,r2,11
   150c0:	103fec1e 	bne	r2,zero,15074 <__alt_mem_Flash_flash_data+0xf4015074>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   150c4:	e0bffe17 	ldw	r2,-8(fp)
   150c8:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   150cc:	e0bffe17 	ldw	r2,-8(fp)
   150d0:	00c00fc4 	movi	r3,63
   150d4:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   150d8:	e0bffe17 	ldw	r2,-8(fp)
   150dc:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   150e0:	d0283e15 	stw	zero,-24328(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   150e4:	008000f4 	movhi	r2,3
   150e8:	10970c04 	addi	r2,r2,23600
   150ec:	d0a84215 	stw	r2,-24312(gp)
}
   150f0:	e037883a 	mov	sp,fp
   150f4:	dfc00117 	ldw	ra,4(sp)
   150f8:	df000017 	ldw	fp,0(sp)
   150fc:	dec00204 	addi	sp,sp,8
   15100:	f800283a 	ret

00015104 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   15104:	defffd04 	addi	sp,sp,-12
   15108:	df000215 	stw	fp,8(sp)
   1510c:	df000204 	addi	fp,sp,8
   15110:	e13ffe15 	stw	r4,-8(fp)
   15114:	2805883a 	mov	r2,r5
   15118:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   1511c:	00000706 	br	1513c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   15120:	e0bffe17 	ldw	r2,-8(fp)
   15124:	10c00044 	addi	r3,r2,1
   15128:	e0fffe15 	stw	r3,-8(fp)
   1512c:	10000005 	stb	zero,0(r2)
        size--;
   15130:	e0bfff0b 	ldhu	r2,-4(fp)
   15134:	10bfffc4 	addi	r2,r2,-1
   15138:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   1513c:	e0bfff0b 	ldhu	r2,-4(fp)
   15140:	103ff71e 	bne	r2,zero,15120 <__alt_mem_Flash_flash_data+0xf4015120>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   15144:	e037883a 	mov	sp,fp
   15148:	df000017 	ldw	fp,0(sp)
   1514c:	dec00104 	addi	sp,sp,4
   15150:	f800283a 	ret

00015154 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   15154:	defffc04 	addi	sp,sp,-16
   15158:	df000315 	stw	fp,12(sp)
   1515c:	df000304 	addi	fp,sp,12
   15160:	e13ffd15 	stw	r4,-12(fp)
   15164:	e17ffe15 	stw	r5,-8(fp)
   15168:	3005883a 	mov	r2,r6
   1516c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   15170:	00000b06 	br	151a0 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   15174:	e0bffd17 	ldw	r2,-12(fp)
   15178:	10c00044 	addi	r3,r2,1
   1517c:	e0fffd15 	stw	r3,-12(fp)
   15180:	e0fffe17 	ldw	r3,-8(fp)
   15184:	19000044 	addi	r4,r3,1
   15188:	e13ffe15 	stw	r4,-8(fp)
   1518c:	18c00003 	ldbu	r3,0(r3)
   15190:	10c00005 	stb	r3,0(r2)
        size--;
   15194:	e0bfff0b 	ldhu	r2,-4(fp)
   15198:	10bfffc4 	addi	r2,r2,-1
   1519c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   151a0:	e0bfff0b 	ldhu	r2,-4(fp)
   151a4:	103ff31e 	bne	r2,zero,15174 <__alt_mem_Flash_flash_data+0xf4015174>
        *pdest++ = *psrc++;
        size--;
    }
}
   151a8:	e037883a 	mov	sp,fp
   151ac:	df000017 	ldw	fp,0(sp)
   151b0:	dec00104 	addi	sp,sp,4
   151b4:	f800283a 	ret

000151b8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   151b8:	defffb04 	addi	sp,sp,-20
   151bc:	dfc00415 	stw	ra,16(sp)
   151c0:	df000315 	stw	fp,12(sp)
   151c4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   151c8:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   151cc:	0005303a 	rdctl	r2,status
   151d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   151d4:	e0fffe17 	ldw	r3,-8(fp)
   151d8:	00bfff84 	movi	r2,-2
   151dc:	1884703a 	and	r2,r3,r2
   151e0:	1001703a 	wrctl	status,r2
  
  return context;
   151e4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   151e8:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   151ec:	d0a84903 	ldbu	r2,-24284(gp)
   151f0:	10803fcc 	andi	r2,r2,255
   151f4:	10001a1e 	bne	r2,zero,15260 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   151f8:	d0a83b03 	ldbu	r2,-24340(gp)
   151fc:	10803fcc 	andi	r2,r2,255
   15200:	1000171e 	bne	r2,zero,15260 <OS_Sched+0xa8>
            OS_SchedNew();
   15204:	00152840 	call	15284 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   15208:	d0e83d03 	ldbu	r3,-24332(gp)
   1520c:	d0a83d43 	ldbu	r2,-24331(gp)
   15210:	18c03fcc 	andi	r3,r3,255
   15214:	10803fcc 	andi	r2,r2,255
   15218:	18801126 	beq	r3,r2,15260 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   1521c:	d0a83d03 	ldbu	r2,-24332(gp)
   15220:	10c03fcc 	andi	r3,r2,255
   15224:	008000f4 	movhi	r2,3
   15228:	10985004 	addi	r2,r2,24896
   1522c:	18c7883a 	add	r3,r3,r3
   15230:	18c7883a 	add	r3,r3,r3
   15234:	10c5883a 	add	r2,r2,r3
   15238:	10800017 	ldw	r2,0(r2)
   1523c:	d0a84515 	stw	r2,-24300(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   15240:	d0a84517 	ldw	r2,-24300(gp)
   15244:	10c00e17 	ldw	r3,56(r2)
   15248:	18c00044 	addi	r3,r3,1
   1524c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   15250:	d0a84017 	ldw	r2,-24320(gp)
   15254:	10800044 	addi	r2,r2,1
   15258:	d0a84015 	stw	r2,-24320(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   1525c:	001f3c00 	call	1f3c0 <OSCtxSw>
   15260:	e0bffd17 	ldw	r2,-12(fp)
   15264:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15268:	e0bfff17 	ldw	r2,-4(fp)
   1526c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   15270:	e037883a 	mov	sp,fp
   15274:	dfc00117 	ldw	ra,4(sp)
   15278:	df000017 	ldw	fp,0(sp)
   1527c:	dec00204 	addi	sp,sp,8
   15280:	f800283a 	ret

00015284 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   15284:	defffe04 	addi	sp,sp,-8
   15288:	df000115 	stw	fp,4(sp)
   1528c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   15290:	d0a84703 	ldbu	r2,-24292(gp)
   15294:	10c03fcc 	andi	r3,r2,255
   15298:	008000b4 	movhi	r2,2
   1529c:	10813e04 	addi	r2,r2,1272
   152a0:	10c5883a 	add	r2,r2,r3
   152a4:	10800003 	ldbu	r2,0(r2)
   152a8:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   152ac:	e0bfff03 	ldbu	r2,-4(fp)
   152b0:	100490fa 	slli	r2,r2,3
   152b4:	1009883a 	mov	r4,r2
   152b8:	e0ffff03 	ldbu	r3,-4(fp)
   152bc:	d0a84744 	addi	r2,gp,-24291
   152c0:	1885883a 	add	r2,r3,r2
   152c4:	10800003 	ldbu	r2,0(r2)
   152c8:	10c03fcc 	andi	r3,r2,255
   152cc:	008000b4 	movhi	r2,2
   152d0:	10813e04 	addi	r2,r2,1272
   152d4:	10c5883a 	add	r2,r2,r3
   152d8:	10800003 	ldbu	r2,0(r2)
   152dc:	2085883a 	add	r2,r4,r2
   152e0:	d0a83d05 	stb	r2,-24332(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   152e4:	e037883a 	mov	sp,fp
   152e8:	df000017 	ldw	fp,0(sp)
   152ec:	dec00104 	addi	sp,sp,4
   152f0:	f800283a 	ret

000152f4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   152f4:	defffc04 	addi	sp,sp,-16
   152f8:	df000315 	stw	fp,12(sp)
   152fc:	df000304 	addi	fp,sp,12
   15300:	e13ffe15 	stw	r4,-8(fp)
   15304:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   15308:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   1530c:	00000b06 	br	1533c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   15310:	e0bffe17 	ldw	r2,-8(fp)
   15314:	10c00044 	addi	r3,r2,1
   15318:	e0fffe15 	stw	r3,-8(fp)
   1531c:	e0ffff17 	ldw	r3,-4(fp)
   15320:	19000044 	addi	r4,r3,1
   15324:	e13fff15 	stw	r4,-4(fp)
   15328:	18c00003 	ldbu	r3,0(r3)
   1532c:	10c00005 	stb	r3,0(r2)
        len++;
   15330:	e0bffd03 	ldbu	r2,-12(fp)
   15334:	10800044 	addi	r2,r2,1
   15338:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   1533c:	e0bfff17 	ldw	r2,-4(fp)
   15340:	10800003 	ldbu	r2,0(r2)
   15344:	10803fcc 	andi	r2,r2,255
   15348:	103ff11e 	bne	r2,zero,15310 <__alt_mem_Flash_flash_data+0xf4015310>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   1534c:	e0bffe17 	ldw	r2,-8(fp)
   15350:	10000005 	stb	zero,0(r2)
    return (len);
   15354:	e0bffd03 	ldbu	r2,-12(fp)
}
   15358:	e037883a 	mov	sp,fp
   1535c:	df000017 	ldw	fp,0(sp)
   15360:	dec00104 	addi	sp,sp,4
   15364:	f800283a 	ret

00015368 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   15368:	defffd04 	addi	sp,sp,-12
   1536c:	df000215 	stw	fp,8(sp)
   15370:	df000204 	addi	fp,sp,8
   15374:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   15378:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   1537c:	00000606 	br	15398 <OS_StrLen+0x30>
        psrc++;
   15380:	e0bfff17 	ldw	r2,-4(fp)
   15384:	10800044 	addi	r2,r2,1
   15388:	e0bfff15 	stw	r2,-4(fp)
        len++;
   1538c:	e0bffe03 	ldbu	r2,-8(fp)
   15390:	10800044 	addi	r2,r2,1
   15394:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   15398:	e0bfff17 	ldw	r2,-4(fp)
   1539c:	10800003 	ldbu	r2,0(r2)
   153a0:	10803fcc 	andi	r2,r2,255
   153a4:	103ff61e 	bne	r2,zero,15380 <__alt_mem_Flash_flash_data+0xf4015380>
        psrc++;
        len++;
    }
    return (len);
   153a8:	e0bffe03 	ldbu	r2,-8(fp)
}
   153ac:	e037883a 	mov	sp,fp
   153b0:	df000017 	ldw	fp,0(sp)
   153b4:	dec00104 	addi	sp,sp,4
   153b8:	f800283a 	ret

000153bc <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   153bc:	defffa04 	addi	sp,sp,-24
   153c0:	dfc00515 	stw	ra,20(sp)
   153c4:	df000415 	stw	fp,16(sp)
   153c8:	df000404 	addi	fp,sp,16
   153cc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   153d0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   153d4:	0005303a 	rdctl	r2,status
   153d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   153dc:	e0fffd17 	ldw	r3,-12(fp)
   153e0:	00bfff84 	movi	r2,-2
   153e4:	1884703a 	and	r2,r3,r2
   153e8:	1001703a 	wrctl	status,r2
  
  return context;
   153ec:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   153f0:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   153f4:	d0a83c17 	ldw	r2,-24336(gp)
   153f8:	10800044 	addi	r2,r2,1
   153fc:	d0a83c15 	stw	r2,-24336(gp)
   15400:	e0bffc17 	ldw	r2,-16(fp)
   15404:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15408:	e0bffe17 	ldw	r2,-8(fp)
   1540c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   15410:	001f6b80 	call	1f6b8 <OSTaskIdleHook>
    }
   15414:	003fef06 	br	153d4 <__alt_mem_Flash_flash_data+0xf40153d4>

00015418 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   15418:	defff804 	addi	sp,sp,-32
   1541c:	dfc00715 	stw	ra,28(sp)
   15420:	df000615 	stw	fp,24(sp)
   15424:	dc400515 	stw	r17,20(sp)
   15428:	dc000415 	stw	r16,16(sp)
   1542c:	df000604 	addi	fp,sp,24
   15430:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15434:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   15438:	00000206 	br	15444 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   1543c:	01000044 	movi	r4,1
   15440:	001bb500 	call	1bb50 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   15444:	d0a84d03 	ldbu	r2,-24268(gp)
   15448:	10803fcc 	andi	r2,r2,255
   1544c:	103ffb26 	beq	r2,zero,1543c <__alt_mem_Flash_flash_data+0xf401543c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   15450:	d0e84117 	ldw	r3,-24316(gp)
   15454:	00947b34 	movhi	r2,20972
   15458:	10a147c4 	addi	r2,r2,-31457
   1545c:	1888383a 	mulxuu	r4,r3,r2
   15460:	1885383a 	mul	r2,r3,r2
   15464:	1021883a 	mov	r16,r2
   15468:	2023883a 	mov	r17,r4
   1546c:	8804d17a 	srli	r2,r17,5
   15470:	d0a84115 	stw	r2,-24316(gp)
    if (OSIdleCtrMax == 0L) {
   15474:	d0a84117 	ldw	r2,-24316(gp)
   15478:	1000031e 	bne	r2,zero,15488 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   1547c:	d0284305 	stb	zero,-24308(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   15480:	01003fc4 	movi	r4,255
   15484:	001b7a40 	call	1b7a4 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15488:	0005303a 	rdctl	r2,status
   1548c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15490:	e0fffb17 	ldw	r3,-20(fp)
   15494:	00bfff84 	movi	r2,-2
   15498:	1884703a 	and	r2,r3,r2
   1549c:	1001703a 	wrctl	status,r2
  
  return context;
   154a0:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   154a4:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   154a8:	d0a83c17 	ldw	r2,-24336(gp)
   154ac:	d0a84e15 	stw	r2,-24264(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   154b0:	d0283c15 	stw	zero,-24336(gp)
   154b4:	e0bffa17 	ldw	r2,-24(fp)
   154b8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   154bc:	e0bffc17 	ldw	r2,-16(fp)
   154c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   154c4:	d0e84e17 	ldw	r3,-24264(gp)
   154c8:	d0a84117 	ldw	r2,-24316(gp)
   154cc:	1885203a 	divu	r2,r3,r2
   154d0:	1007883a 	mov	r3,r2
   154d4:	00801904 	movi	r2,100
   154d8:	10c5c83a 	sub	r2,r2,r3
   154dc:	d0a84305 	stb	r2,-24308(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   154e0:	001f6480 	call	1f648 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   154e4:	00154f40 	call	154f4 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   154e8:	0009883a 	mov	r4,zero
   154ec:	001bb500 	call	1bb50 <OSTimeDly>
    }
   154f0:	003fe506 	br	15488 <__alt_mem_Flash_flash_data+0xf4015488>

000154f4 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   154f4:	defffa04 	addi	sp,sp,-24
   154f8:	dfc00515 	stw	ra,20(sp)
   154fc:	df000415 	stw	fp,16(sp)
   15500:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   15504:	e03ffc05 	stb	zero,-16(fp)
   15508:	00002406 	br	1559c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   1550c:	e0fffc03 	ldbu	r3,-16(fp)
   15510:	e0bffe04 	addi	r2,fp,-8
   15514:	1809883a 	mov	r4,r3
   15518:	100b883a 	mov	r5,r2
   1551c:	001b5dc0 	call	1b5dc <OSTaskStkChk>
   15520:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   15524:	e0bffc43 	ldbu	r2,-15(fp)
   15528:	1000191e 	bne	r2,zero,15590 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   1552c:	e0fffc03 	ldbu	r3,-16(fp)
   15530:	008000f4 	movhi	r2,3
   15534:	10985004 	addi	r2,r2,24896
   15538:	18c7883a 	add	r3,r3,r3
   1553c:	18c7883a 	add	r3,r3,r3
   15540:	10c5883a 	add	r2,r2,r3
   15544:	10800017 	ldw	r2,0(r2)
   15548:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   1554c:	e0bffd17 	ldw	r2,-12(fp)
   15550:	10000f26 	beq	r2,zero,15590 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   15554:	e0bffd17 	ldw	r2,-12(fp)
   15558:	10800060 	cmpeqi	r2,r2,1
   1555c:	10000c1e 	bne	r2,zero,15590 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   15560:	e0bffd17 	ldw	r2,-12(fp)
   15564:	10c00217 	ldw	r3,8(r2)
   15568:	e0bffd17 	ldw	r2,-12(fp)
   1556c:	10800317 	ldw	r2,12(r2)
   15570:	1085883a 	add	r2,r2,r2
   15574:	1085883a 	add	r2,r2,r2
   15578:	1887883a 	add	r3,r3,r2
   1557c:	e0bffd17 	ldw	r2,-12(fp)
   15580:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   15584:	e0ffff17 	ldw	r3,-4(fp)
   15588:	e0bffd17 	ldw	r2,-12(fp)
   1558c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   15590:	e0bffc03 	ldbu	r2,-16(fp)
   15594:	10800044 	addi	r2,r2,1
   15598:	e0bffc05 	stb	r2,-16(fp)
   1559c:	e0bffc03 	ldbu	r2,-16(fp)
   155a0:	10800570 	cmpltui	r2,r2,21
   155a4:	103fd91e 	bne	r2,zero,1550c <__alt_mem_Flash_flash_data+0xf401550c>
#endif
                }
            }
        }
    }
}
   155a8:	e037883a 	mov	sp,fp
   155ac:	dfc00117 	ldw	ra,4(sp)
   155b0:	df000017 	ldw	fp,0(sp)
   155b4:	dec00204 	addi	sp,sp,8
   155b8:	f800283a 	ret

000155bc <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   155bc:	defff204 	addi	sp,sp,-56
   155c0:	dfc00d15 	stw	ra,52(sp)
   155c4:	df000c15 	stw	fp,48(sp)
   155c8:	df000c04 	addi	fp,sp,48
   155cc:	e17ffc15 	stw	r5,-16(fp)
   155d0:	e1bffd15 	stw	r6,-12(fp)
   155d4:	3807883a 	mov	r3,r7
   155d8:	e0800417 	ldw	r2,16(fp)
   155dc:	e13ffb05 	stb	r4,-20(fp)
   155e0:	e0fffe0d 	sth	r3,-8(fp)
   155e4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   155e8:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   155ec:	0005303a 	rdctl	r2,status
   155f0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   155f4:	e0fff617 	ldw	r3,-40(fp)
   155f8:	00bfff84 	movi	r2,-2
   155fc:	1884703a 	and	r2,r3,r2
   15600:	1001703a 	wrctl	status,r2
  
  return context;
   15604:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   15608:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   1560c:	d0a84217 	ldw	r2,-24312(gp)
   15610:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   15614:	e0bff517 	ldw	r2,-44(fp)
   15618:	10009326 	beq	r2,zero,15868 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   1561c:	e0bff517 	ldw	r2,-44(fp)
   15620:	10800517 	ldw	r2,20(r2)
   15624:	d0a84215 	stw	r2,-24312(gp)
   15628:	e0bff417 	ldw	r2,-48(fp)
   1562c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15630:	e0bff717 	ldw	r2,-36(fp)
   15634:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   15638:	e0bff517 	ldw	r2,-44(fp)
   1563c:	e0fffc17 	ldw	r3,-16(fp)
   15640:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   15644:	e0bff517 	ldw	r2,-44(fp)
   15648:	e0fffb03 	ldbu	r3,-20(fp)
   1564c:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   15650:	e0bff517 	ldw	r2,-44(fp)
   15654:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   15658:	e0bff517 	ldw	r2,-44(fp)
   1565c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   15660:	e0bff517 	ldw	r2,-44(fp)
   15664:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   15668:	e0bff517 	ldw	r2,-44(fp)
   1566c:	e0c00317 	ldw	r3,12(fp)
   15670:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   15674:	e0bff517 	ldw	r2,-44(fp)
   15678:	e0c00217 	ldw	r3,8(fp)
   1567c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   15680:	e0bff517 	ldw	r2,-44(fp)
   15684:	e0fffd17 	ldw	r3,-12(fp)
   15688:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   1568c:	e0bff517 	ldw	r2,-44(fp)
   15690:	e0ffff0b 	ldhu	r3,-4(fp)
   15694:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   15698:	e0bff517 	ldw	r2,-44(fp)
   1569c:	e0fffe0b 	ldhu	r3,-8(fp)
   156a0:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   156a4:	e0bff517 	ldw	r2,-44(fp)
   156a8:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   156ac:	e0bffb03 	ldbu	r2,-20(fp)
   156b0:	1004d0fa 	srli	r2,r2,3
   156b4:	1007883a 	mov	r3,r2
   156b8:	e0bff517 	ldw	r2,-44(fp)
   156bc:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   156c0:	e0bffb03 	ldbu	r2,-20(fp)
   156c4:	108001cc 	andi	r2,r2,7
   156c8:	1007883a 	mov	r3,r2
   156cc:	e0bff517 	ldw	r2,-44(fp)
   156d0:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   156d4:	e0bff517 	ldw	r2,-44(fp)
   156d8:	10800d03 	ldbu	r2,52(r2)
   156dc:	10803fcc 	andi	r2,r2,255
   156e0:	00c00044 	movi	r3,1
   156e4:	1884983a 	sll	r2,r3,r2
   156e8:	1007883a 	mov	r3,r2
   156ec:	e0bff517 	ldw	r2,-44(fp)
   156f0:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   156f4:	e0bff517 	ldw	r2,-44(fp)
   156f8:	10800cc3 	ldbu	r2,51(r2)
   156fc:	10803fcc 	andi	r2,r2,255
   15700:	00c00044 	movi	r3,1
   15704:	1884983a 	sll	r2,r3,r2
   15708:	1007883a 	mov	r3,r2
   1570c:	e0bff517 	ldw	r2,-44(fp)
   15710:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   15714:	e0bff517 	ldw	r2,-44(fp)
   15718:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   1571c:	e0bff517 	ldw	r2,-44(fp)
   15720:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   15724:	e0bff517 	ldw	r2,-44(fp)
   15728:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   1572c:	e0bff517 	ldw	r2,-44(fp)
   15730:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   15734:	e0bff517 	ldw	r2,-44(fp)
   15738:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   1573c:	e0bff517 	ldw	r2,-44(fp)
   15740:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   15744:	e0bff517 	ldw	r2,-44(fp)
   15748:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   1574c:	e0bff517 	ldw	r2,-44(fp)
   15750:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   15754:	e0bff517 	ldw	r2,-44(fp)
   15758:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   1575c:	e0bff517 	ldw	r2,-44(fp)
   15760:	00c00fc4 	movi	r3,63
   15764:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   15768:	e0bff517 	ldw	r2,-44(fp)
   1576c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   15770:	e13ff517 	ldw	r4,-44(fp)
   15774:	001f6d40 	call	1f6d4 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   15778:	e13ff517 	ldw	r4,-44(fp)
   1577c:	001f5ec0 	call	1f5ec <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15780:	0005303a 	rdctl	r2,status
   15784:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15788:	e0fff817 	ldw	r3,-32(fp)
   1578c:	00bfff84 	movi	r2,-2
   15790:	1884703a 	and	r2,r3,r2
   15794:	1001703a 	wrctl	status,r2
  
  return context;
   15798:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   1579c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   157a0:	e0fffb03 	ldbu	r3,-20(fp)
   157a4:	008000f4 	movhi	r2,3
   157a8:	10985004 	addi	r2,r2,24896
   157ac:	18c7883a 	add	r3,r3,r3
   157b0:	18c7883a 	add	r3,r3,r3
   157b4:	10c5883a 	add	r2,r2,r3
   157b8:	e0fff517 	ldw	r3,-44(fp)
   157bc:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   157c0:	d0e83e17 	ldw	r3,-24328(gp)
   157c4:	e0bff517 	ldw	r2,-44(fp)
   157c8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   157cc:	e0bff517 	ldw	r2,-44(fp)
   157d0:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   157d4:	d0a83e17 	ldw	r2,-24328(gp)
   157d8:	10000326 	beq	r2,zero,157e8 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   157dc:	d0a83e17 	ldw	r2,-24328(gp)
   157e0:	e0fff517 	ldw	r3,-44(fp)
   157e4:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   157e8:	e0bff517 	ldw	r2,-44(fp)
   157ec:	d0a83e15 	stw	r2,-24328(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   157f0:	e0bff517 	ldw	r2,-44(fp)
   157f4:	10c00d83 	ldbu	r3,54(r2)
   157f8:	d0a84703 	ldbu	r2,-24292(gp)
   157fc:	1884b03a 	or	r2,r3,r2
   15800:	d0a84705 	stb	r2,-24292(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15804:	e0bff517 	ldw	r2,-44(fp)
   15808:	10800d03 	ldbu	r2,52(r2)
   1580c:	10c03fcc 	andi	r3,r2,255
   15810:	e0bff517 	ldw	r2,-44(fp)
   15814:	10800d03 	ldbu	r2,52(r2)
   15818:	11003fcc 	andi	r4,r2,255
   1581c:	d0a84744 	addi	r2,gp,-24291
   15820:	2085883a 	add	r2,r4,r2
   15824:	11000003 	ldbu	r4,0(r2)
   15828:	e0bff517 	ldw	r2,-44(fp)
   1582c:	10800d43 	ldbu	r2,53(r2)
   15830:	2084b03a 	or	r2,r4,r2
   15834:	1009883a 	mov	r4,r2
   15838:	d0a84744 	addi	r2,gp,-24291
   1583c:	1885883a 	add	r2,r3,r2
   15840:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   15844:	d0a84343 	ldbu	r2,-24307(gp)
   15848:	10800044 	addi	r2,r2,1
   1584c:	d0a84345 	stb	r2,-24307(gp)
   15850:	e0bff417 	ldw	r2,-48(fp)
   15854:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15858:	e0bff917 	ldw	r2,-28(fp)
   1585c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   15860:	0005883a 	mov	r2,zero
   15864:	00000506 	br	1587c <OS_TCBInit+0x2c0>
   15868:	e0bff417 	ldw	r2,-48(fp)
   1586c:	e0bffa15 	stw	r2,-24(fp)
   15870:	e0bffa17 	ldw	r2,-24(fp)
   15874:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   15878:	00801084 	movi	r2,66
}
   1587c:	e037883a 	mov	sp,fp
   15880:	dfc00117 	ldw	ra,4(sp)
   15884:	df000017 	ldw	fp,0(sp)
   15888:	dec00204 	addi	sp,sp,8
   1588c:	f800283a 	ret

00015890 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   15890:	defffe04 	addi	sp,sp,-8
   15894:	df000115 	stw	fp,4(sp)
   15898:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   1589c:	d0a01c04 	addi	r2,gp,-32656
   158a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   158a4:	d0a01d04 	addi	r2,gp,-32652
   158a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   158ac:	d0a01e84 	addi	r2,gp,-32646
   158b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   158b4:	d0a01f04 	addi	r2,gp,-32644
   158b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   158bc:	d0a01e04 	addi	r2,gp,-32648
   158c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   158c4:	d0a01f84 	addi	r2,gp,-32642
   158c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   158cc:	d0a02004 	addi	r2,gp,-32640
   158d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   158d4:	d0a02084 	addi	r2,gp,-32638
   158d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   158dc:	d0a02104 	addi	r2,gp,-32636
   158e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   158e4:	d0a02184 	addi	r2,gp,-32634
   158e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   158ec:	d0a02204 	addi	r2,gp,-32632
   158f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   158f4:	d0a02284 	addi	r2,gp,-32630
   158f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   158fc:	d0a02304 	addi	r2,gp,-32628
   15900:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   15904:	d0a02384 	addi	r2,gp,-32626
   15908:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   1590c:	d0a02404 	addi	r2,gp,-32624
   15910:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   15914:	d0a02484 	addi	r2,gp,-32622
   15918:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   1591c:	d0a02504 	addi	r2,gp,-32620
   15920:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   15924:	d0a02584 	addi	r2,gp,-32618
   15928:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   1592c:	d0a02604 	addi	r2,gp,-32616
   15930:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   15934:	d0a02684 	addi	r2,gp,-32614
   15938:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   1593c:	d0a02704 	addi	r2,gp,-32612
   15940:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   15944:	d0a02784 	addi	r2,gp,-32610
   15948:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   1594c:	d0a02804 	addi	r2,gp,-32608
   15950:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   15954:	d0a02884 	addi	r2,gp,-32606
   15958:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   1595c:	d0a02904 	addi	r2,gp,-32604
   15960:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   15964:	d0a02984 	addi	r2,gp,-32602
   15968:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   1596c:	d0a02a04 	addi	r2,gp,-32600
   15970:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   15974:	d0a02a84 	addi	r2,gp,-32598
   15978:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   1597c:	d0a02b04 	addi	r2,gp,-32596
   15980:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   15984:	d0a02b84 	addi	r2,gp,-32594
   15988:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   1598c:	d0a02c04 	addi	r2,gp,-32592
   15990:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   15994:	d0a02c84 	addi	r2,gp,-32590
   15998:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   1599c:	d0a02d04 	addi	r2,gp,-32588
   159a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   159a4:	d0a02d84 	addi	r2,gp,-32586
   159a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   159ac:	d0a02e04 	addi	r2,gp,-32584
   159b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   159b4:	d0a02e84 	addi	r2,gp,-32582
   159b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   159bc:	d0a02f04 	addi	r2,gp,-32580
   159c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   159c4:	d0a02f84 	addi	r2,gp,-32578
   159c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   159cc:	d0a03004 	addi	r2,gp,-32576
   159d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   159d4:	d0a03084 	addi	r2,gp,-32574
   159d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   159dc:	d0a03104 	addi	r2,gp,-32572
   159e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   159e4:	d0a03184 	addi	r2,gp,-32570
   159e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   159ec:	d0a03204 	addi	r2,gp,-32568
   159f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   159f4:	d0a03284 	addi	r2,gp,-32566
   159f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   159fc:	d0a03304 	addi	r2,gp,-32564
   15a00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   15a04:	d0a03804 	addi	r2,gp,-32544
   15a08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   15a0c:	e037883a 	mov	sp,fp
   15a10:	df000017 	ldw	fp,0(sp)
   15a14:	dec00104 	addi	sp,sp,4
   15a18:	f800283a 	ret

00015a1c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   15a1c:	defff204 	addi	sp,sp,-56
   15a20:	df000d15 	stw	fp,52(sp)
   15a24:	df000d04 	addi	fp,sp,52
   15a28:	e13ffc15 	stw	r4,-16(fp)
   15a2c:	2807883a 	mov	r3,r5
   15a30:	3005883a 	mov	r2,r6
   15a34:	e1ffff15 	stw	r7,-4(fp)
   15a38:	e0fffd0d 	sth	r3,-12(fp)
   15a3c:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   15a40:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15a44:	e0bfff17 	ldw	r2,-4(fp)
   15a48:	1000021e 	bne	r2,zero,15a54 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   15a4c:	0005883a 	mov	r2,zero
   15a50:	0000b006 	br	15d14 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   15a54:	e0bffc17 	ldw	r2,-16(fp)
   15a58:	1000051e 	bne	r2,zero,15a70 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15a5c:	e0bfff17 	ldw	r2,-4(fp)
   15a60:	00c01b84 	movi	r3,110
   15a64:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15a68:	0005883a 	mov	r2,zero
   15a6c:	0000a906 	br	15d14 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   15a70:	e0bffc17 	ldw	r2,-16(fp)
   15a74:	10800003 	ldbu	r2,0(r2)
   15a78:	10803fcc 	andi	r2,r2,255
   15a7c:	10800160 	cmpeqi	r2,r2,5
   15a80:	1000051e 	bne	r2,zero,15a98 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   15a84:	e0bfff17 	ldw	r2,-4(fp)
   15a88:	00c00044 	movi	r3,1
   15a8c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15a90:	0005883a 	mov	r2,zero
   15a94:	00009f06 	br	15d14 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   15a98:	e0fffe03 	ldbu	r3,-8(fp)
   15a9c:	00bfe004 	movi	r2,-128
   15aa0:	1884703a 	and	r2,r3,r2
   15aa4:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   15aa8:	e0bff503 	ldbu	r2,-44(fp)
   15aac:	10000626 	beq	r2,zero,15ac8 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   15ab0:	e0bffe03 	ldbu	r2,-8(fp)
   15ab4:	10801fcc 	andi	r2,r2,127
   15ab8:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   15abc:	00800044 	movi	r2,1
   15ac0:	e0bff385 	stb	r2,-50(fp)
   15ac4:	00000106 	br	15acc <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   15ac8:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   15acc:	e0bfff17 	ldw	r2,-4(fp)
   15ad0:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ad4:	0005303a 	rdctl	r2,status
   15ad8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15adc:	e0fff617 	ldw	r3,-40(fp)
   15ae0:	00bfff84 	movi	r2,-2
   15ae4:	1884703a 	and	r2,r3,r2
   15ae8:	1001703a 	wrctl	status,r2
  
  return context;
   15aec:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   15af0:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   15af4:	e0bffe03 	ldbu	r2,-8(fp)
   15af8:	10c00060 	cmpeqi	r3,r2,1
   15afc:	18005f1e 	bne	r3,zero,15c7c <OSFlagAccept+0x260>
   15b00:	10c00088 	cmpgei	r3,r2,2
   15b04:	1800021e 	bne	r3,zero,15b10 <OSFlagAccept+0xf4>
   15b08:	10003f26 	beq	r2,zero,15c08 <OSFlagAccept+0x1ec>
   15b0c:	00007706 	br	15cec <OSFlagAccept+0x2d0>
   15b10:	10c000a0 	cmpeqi	r3,r2,2
   15b14:	1800031e 	bne	r3,zero,15b24 <OSFlagAccept+0x108>
   15b18:	108000e0 	cmpeqi	r2,r2,3
   15b1c:	10001e1e 	bne	r2,zero,15b98 <OSFlagAccept+0x17c>
   15b20:	00007206 	br	15cec <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   15b24:	e0bffc17 	ldw	r2,-16(fp)
   15b28:	10c0020b 	ldhu	r3,8(r2)
   15b2c:	e0bffd0b 	ldhu	r2,-12(fp)
   15b30:	1884703a 	and	r2,r3,r2
   15b34:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15b38:	e0fff30b 	ldhu	r3,-52(fp)
   15b3c:	e0bffd0b 	ldhu	r2,-12(fp)
   15b40:	18800d1e 	bne	r3,r2,15b78 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15b44:	e0bff383 	ldbu	r2,-50(fp)
   15b48:	10800058 	cmpnei	r2,r2,1
   15b4c:	10000d1e 	bne	r2,zero,15b84 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   15b50:	e0bffc17 	ldw	r2,-16(fp)
   15b54:	1080020b 	ldhu	r2,8(r2)
   15b58:	1007883a 	mov	r3,r2
   15b5c:	e0bff30b 	ldhu	r2,-52(fp)
   15b60:	0084303a 	nor	r2,zero,r2
   15b64:	1884703a 	and	r2,r3,r2
   15b68:	1007883a 	mov	r3,r2
   15b6c:	e0bffc17 	ldw	r2,-16(fp)
   15b70:	10c0020d 	sth	r3,8(r2)
   15b74:	00000306 	br	15b84 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15b78:	e0bfff17 	ldw	r2,-4(fp)
   15b7c:	00c01c04 	movi	r3,112
   15b80:	10c00005 	stb	r3,0(r2)
   15b84:	e0bff417 	ldw	r2,-48(fp)
   15b88:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b8c:	e0bff717 	ldw	r2,-36(fp)
   15b90:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15b94:	00005e06 	br	15d10 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   15b98:	e0bffc17 	ldw	r2,-16(fp)
   15b9c:	10c0020b 	ldhu	r3,8(r2)
   15ba0:	e0bffd0b 	ldhu	r2,-12(fp)
   15ba4:	1884703a 	and	r2,r3,r2
   15ba8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   15bac:	e0bff30b 	ldhu	r2,-52(fp)
   15bb0:	10000d26 	beq	r2,zero,15be8 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15bb4:	e0bff383 	ldbu	r2,-50(fp)
   15bb8:	10800058 	cmpnei	r2,r2,1
   15bbc:	10000d1e 	bne	r2,zero,15bf4 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   15bc0:	e0bffc17 	ldw	r2,-16(fp)
   15bc4:	1080020b 	ldhu	r2,8(r2)
   15bc8:	1007883a 	mov	r3,r2
   15bcc:	e0bff30b 	ldhu	r2,-52(fp)
   15bd0:	0084303a 	nor	r2,zero,r2
   15bd4:	1884703a 	and	r2,r3,r2
   15bd8:	1007883a 	mov	r3,r2
   15bdc:	e0bffc17 	ldw	r2,-16(fp)
   15be0:	10c0020d 	sth	r3,8(r2)
   15be4:	00000306 	br	15bf4 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15be8:	e0bfff17 	ldw	r2,-4(fp)
   15bec:	00c01c04 	movi	r3,112
   15bf0:	10c00005 	stb	r3,0(r2)
   15bf4:	e0bff417 	ldw	r2,-48(fp)
   15bf8:	e0bff815 	stw	r2,-32(fp)
   15bfc:	e0bff817 	ldw	r2,-32(fp)
   15c00:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15c04:	00004206 	br	15d10 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   15c08:	e0bffc17 	ldw	r2,-16(fp)
   15c0c:	1080020b 	ldhu	r2,8(r2)
   15c10:	0084303a 	nor	r2,zero,r2
   15c14:	1007883a 	mov	r3,r2
   15c18:	e0bffd0b 	ldhu	r2,-12(fp)
   15c1c:	1884703a 	and	r2,r3,r2
   15c20:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15c24:	e0fff30b 	ldhu	r3,-52(fp)
   15c28:	e0bffd0b 	ldhu	r2,-12(fp)
   15c2c:	18800b1e 	bne	r3,r2,15c5c <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15c30:	e0bff383 	ldbu	r2,-50(fp)
   15c34:	10800058 	cmpnei	r2,r2,1
   15c38:	10000b1e 	bne	r2,zero,15c68 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   15c3c:	e0bffc17 	ldw	r2,-16(fp)
   15c40:	10c0020b 	ldhu	r3,8(r2)
   15c44:	e0bff30b 	ldhu	r2,-52(fp)
   15c48:	1884b03a 	or	r2,r3,r2
   15c4c:	1007883a 	mov	r3,r2
   15c50:	e0bffc17 	ldw	r2,-16(fp)
   15c54:	10c0020d 	sth	r3,8(r2)
   15c58:	00000306 	br	15c68 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15c5c:	e0bfff17 	ldw	r2,-4(fp)
   15c60:	00c01c04 	movi	r3,112
   15c64:	10c00005 	stb	r3,0(r2)
   15c68:	e0bff417 	ldw	r2,-48(fp)
   15c6c:	e0bff915 	stw	r2,-28(fp)
   15c70:	e0bff917 	ldw	r2,-28(fp)
   15c74:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15c78:	00002506 	br	15d10 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   15c7c:	e0bffc17 	ldw	r2,-16(fp)
   15c80:	1080020b 	ldhu	r2,8(r2)
   15c84:	0084303a 	nor	r2,zero,r2
   15c88:	1007883a 	mov	r3,r2
   15c8c:	e0bffd0b 	ldhu	r2,-12(fp)
   15c90:	1884703a 	and	r2,r3,r2
   15c94:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   15c98:	e0bff30b 	ldhu	r2,-52(fp)
   15c9c:	10000b26 	beq	r2,zero,15ccc <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15ca0:	e0bff383 	ldbu	r2,-50(fp)
   15ca4:	10800058 	cmpnei	r2,r2,1
   15ca8:	10000b1e 	bne	r2,zero,15cd8 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   15cac:	e0bffc17 	ldw	r2,-16(fp)
   15cb0:	10c0020b 	ldhu	r3,8(r2)
   15cb4:	e0bff30b 	ldhu	r2,-52(fp)
   15cb8:	1884b03a 	or	r2,r3,r2
   15cbc:	1007883a 	mov	r3,r2
   15cc0:	e0bffc17 	ldw	r2,-16(fp)
   15cc4:	10c0020d 	sth	r3,8(r2)
   15cc8:	00000306 	br	15cd8 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15ccc:	e0bfff17 	ldw	r2,-4(fp)
   15cd0:	00c01c04 	movi	r3,112
   15cd4:	10c00005 	stb	r3,0(r2)
   15cd8:	e0bff417 	ldw	r2,-48(fp)
   15cdc:	e0bffa15 	stw	r2,-24(fp)
   15ce0:	e0bffa17 	ldw	r2,-24(fp)
   15ce4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15ce8:	00000906 	br	15d10 <OSFlagAccept+0x2f4>
   15cec:	e0bff417 	ldw	r2,-48(fp)
   15cf0:	e0bffb15 	stw	r2,-20(fp)
   15cf4:	e0bffb17 	ldw	r2,-20(fp)
   15cf8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   15cfc:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   15d00:	e0bfff17 	ldw	r2,-4(fp)
   15d04:	00c01bc4 	movi	r3,111
   15d08:	10c00005 	stb	r3,0(r2)
             break;
   15d0c:	0001883a 	nop
    }
    return (flags_rdy);
   15d10:	e0bff30b 	ldhu	r2,-52(fp)
}
   15d14:	e037883a 	mov	sp,fp
   15d18:	df000017 	ldw	fp,0(sp)
   15d1c:	dec00104 	addi	sp,sp,4
   15d20:	f800283a 	ret

00015d24 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   15d24:	defff804 	addi	sp,sp,-32
   15d28:	df000715 	stw	fp,28(sp)
   15d2c:	df000704 	addi	fp,sp,28
   15d30:	2005883a 	mov	r2,r4
   15d34:	e17fff15 	stw	r5,-4(fp)
   15d38:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   15d3c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   15d40:	e0bfff17 	ldw	r2,-4(fp)
   15d44:	1000021e 	bne	r2,zero,15d50 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   15d48:	0005883a 	mov	r2,zero
   15d4c:	00003b06 	br	15e3c <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   15d50:	008000b4 	movhi	r2,2
   15d54:	1091d404 	addi	r2,r2,18256
   15d58:	10800003 	ldbu	r2,0(r2)
   15d5c:	10803fcc 	andi	r2,r2,255
   15d60:	10000526 	beq	r2,zero,15d78 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   15d64:	e0bfff17 	ldw	r2,-4(fp)
   15d68:	00c00404 	movi	r3,16
   15d6c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   15d70:	0005883a 	mov	r2,zero
   15d74:	00003106 	br	15e3c <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d78:	0005303a 	rdctl	r2,status
   15d7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d80:	e0fffb17 	ldw	r3,-20(fp)
   15d84:	00bfff84 	movi	r2,-2
   15d88:	1884703a 	and	r2,r3,r2
   15d8c:	1001703a 	wrctl	status,r2
  
  return context;
   15d90:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   15d94:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   15d98:	008000b4 	movhi	r2,2
   15d9c:	1091d704 	addi	r2,r2,18268
   15da0:	10800017 	ldw	r2,0(r2)
   15da4:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   15da8:	e0bffa17 	ldw	r2,-24(fp)
   15dac:	10001b26 	beq	r2,zero,15e1c <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   15db0:	008000b4 	movhi	r2,2
   15db4:	1091d704 	addi	r2,r2,18268
   15db8:	10800017 	ldw	r2,0(r2)
   15dbc:	10c00117 	ldw	r3,4(r2)
   15dc0:	008000b4 	movhi	r2,2
   15dc4:	1091d704 	addi	r2,r2,18268
   15dc8:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   15dcc:	e0bffa17 	ldw	r2,-24(fp)
   15dd0:	00c00144 	movi	r3,5
   15dd4:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   15dd8:	e0bffa17 	ldw	r2,-24(fp)
   15ddc:	e0fffe0b 	ldhu	r3,-8(fp)
   15de0:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   15de4:	e0bffa17 	ldw	r2,-24(fp)
   15de8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   15dec:	e0bffa17 	ldw	r2,-24(fp)
   15df0:	00c00fc4 	movi	r3,63
   15df4:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   15df8:	e0bffa17 	ldw	r2,-24(fp)
   15dfc:	100002c5 	stb	zero,11(r2)
   15e00:	e0bff917 	ldw	r2,-28(fp)
   15e04:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15e08:	e0bffc17 	ldw	r2,-16(fp)
   15e0c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   15e10:	e0bfff17 	ldw	r2,-4(fp)
   15e14:	10000005 	stb	zero,0(r2)
   15e18:	00000706 	br	15e38 <OSFlagCreate+0x114>
   15e1c:	e0bff917 	ldw	r2,-28(fp)
   15e20:	e0bffd15 	stw	r2,-12(fp)
   15e24:	e0bffd17 	ldw	r2,-12(fp)
   15e28:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   15e2c:	e0bfff17 	ldw	r2,-4(fp)
   15e30:	00c01c84 	movi	r3,114
   15e34:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   15e38:	e0bffa17 	ldw	r2,-24(fp)
}
   15e3c:	e037883a 	mov	sp,fp
   15e40:	df000017 	ldw	fp,0(sp)
   15e44:	dec00104 	addi	sp,sp,4
   15e48:	f800283a 	ret

00015e4c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   15e4c:	defff204 	addi	sp,sp,-56
   15e50:	dfc00d15 	stw	ra,52(sp)
   15e54:	df000c15 	stw	fp,48(sp)
   15e58:	df000c04 	addi	fp,sp,48
   15e5c:	e13ffd15 	stw	r4,-12(fp)
   15e60:	2805883a 	mov	r2,r5
   15e64:	e1bfff15 	stw	r6,-4(fp)
   15e68:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   15e6c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15e70:	e0bfff17 	ldw	r2,-4(fp)
   15e74:	1000021e 	bne	r2,zero,15e80 <OSFlagDel+0x34>
        return (pgrp);
   15e78:	e0bffd17 	ldw	r2,-12(fp)
   15e7c:	00008a06 	br	160a8 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   15e80:	e0bffd17 	ldw	r2,-12(fp)
   15e84:	1000051e 	bne	r2,zero,15e9c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15e88:	e0bfff17 	ldw	r2,-4(fp)
   15e8c:	00c01b84 	movi	r3,110
   15e90:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   15e94:	e0bffd17 	ldw	r2,-12(fp)
   15e98:	00008306 	br	160a8 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15e9c:	008000b4 	movhi	r2,2
   15ea0:	1091d404 	addi	r2,r2,18256
   15ea4:	10800003 	ldbu	r2,0(r2)
   15ea8:	10803fcc 	andi	r2,r2,255
   15eac:	10000526 	beq	r2,zero,15ec4 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   15eb0:	e0bfff17 	ldw	r2,-4(fp)
   15eb4:	00c003c4 	movi	r3,15
   15eb8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   15ebc:	e0bffd17 	ldw	r2,-12(fp)
   15ec0:	00007906 	br	160a8 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   15ec4:	e0bffd17 	ldw	r2,-12(fp)
   15ec8:	10800003 	ldbu	r2,0(r2)
   15ecc:	10803fcc 	andi	r2,r2,255
   15ed0:	10800160 	cmpeqi	r2,r2,5
   15ed4:	1000051e 	bne	r2,zero,15eec <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   15ed8:	e0bfff17 	ldw	r2,-4(fp)
   15edc:	00c00044 	movi	r3,1
   15ee0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   15ee4:	e0bffd17 	ldw	r2,-12(fp)
   15ee8:	00006f06 	br	160a8 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15eec:	0005303a 	rdctl	r2,status
   15ef0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ef4:	e0fff817 	ldw	r3,-32(fp)
   15ef8:	00bfff84 	movi	r2,-2
   15efc:	1884703a 	and	r2,r3,r2
   15f00:	1001703a 	wrctl	status,r2
  
  return context;
   15f04:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   15f08:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   15f0c:	e0bffd17 	ldw	r2,-12(fp)
   15f10:	10800117 	ldw	r2,4(r2)
   15f14:	10000326 	beq	r2,zero,15f24 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   15f18:	00800044 	movi	r2,1
   15f1c:	e0bff405 	stb	r2,-48(fp)
   15f20:	00000106 	br	15f28 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   15f24:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   15f28:	e0bffe03 	ldbu	r2,-8(fp)
   15f2c:	10000326 	beq	r2,zero,15f3c <OSFlagDel+0xf0>
   15f30:	10800060 	cmpeqi	r2,r2,1
   15f34:	1000271e 	bne	r2,zero,15fd4 <OSFlagDel+0x188>
   15f38:	00005006 	br	1607c <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   15f3c:	e0bff403 	ldbu	r2,-48(fp)
   15f40:	10001a1e 	bne	r2,zero,15fac <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   15f44:	e0bffd17 	ldw	r2,-12(fp)
   15f48:	00c00fc4 	movi	r3,63
   15f4c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   15f50:	e0bffd17 	ldw	r2,-12(fp)
   15f54:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   15f58:	e0bffd17 	ldw	r2,-12(fp)
   15f5c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   15f60:	008000b4 	movhi	r2,2
   15f64:	1091d704 	addi	r2,r2,18268
   15f68:	10c00017 	ldw	r3,0(r2)
   15f6c:	e0bffd17 	ldw	r2,-12(fp)
   15f70:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   15f74:	e0bffd17 	ldw	r2,-12(fp)
   15f78:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   15f7c:	008000b4 	movhi	r2,2
   15f80:	1091d704 	addi	r2,r2,18268
   15f84:	e0fffd17 	ldw	r3,-12(fp)
   15f88:	10c00015 	stw	r3,0(r2)
   15f8c:	e0bff717 	ldw	r2,-36(fp)
   15f90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f94:	e0bff917 	ldw	r2,-28(fp)
   15f98:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   15f9c:	e0bfff17 	ldw	r2,-4(fp)
   15fa0:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   15fa4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   15fa8:	00003e06 	br	160a4 <OSFlagDel+0x258>
   15fac:	e0bff717 	ldw	r2,-36(fp)
   15fb0:	e0bffa15 	stw	r2,-24(fp)
   15fb4:	e0bffa17 	ldw	r2,-24(fp)
   15fb8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   15fbc:	e0bfff17 	ldw	r2,-4(fp)
   15fc0:	00c01244 	movi	r3,73
   15fc4:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   15fc8:	e0bffd17 	ldw	r2,-12(fp)
   15fcc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   15fd0:	00003406 	br	160a4 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   15fd4:	e0bffd17 	ldw	r2,-12(fp)
   15fd8:	10800117 	ldw	r2,4(r2)
   15fdc:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   15fe0:	00000606 	br	15ffc <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   15fe4:	e13ff517 	ldw	r4,-44(fp)
   15fe8:	000b883a 	mov	r5,zero
   15fec:	00170880 	call	17088 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   15ff0:	e0bff517 	ldw	r2,-44(fp)
   15ff4:	10800017 	ldw	r2,0(r2)
   15ff8:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   15ffc:	e0bff517 	ldw	r2,-44(fp)
   16000:	103ff81e 	bne	r2,zero,15fe4 <__alt_mem_Flash_flash_data+0xf4015fe4>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   16004:	e0bffd17 	ldw	r2,-12(fp)
   16008:	00c00fc4 	movi	r3,63
   1600c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   16010:	e0bffd17 	ldw	r2,-12(fp)
   16014:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   16018:	e0bffd17 	ldw	r2,-12(fp)
   1601c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   16020:	008000b4 	movhi	r2,2
   16024:	1091d704 	addi	r2,r2,18268
   16028:	10c00017 	ldw	r3,0(r2)
   1602c:	e0bffd17 	ldw	r2,-12(fp)
   16030:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   16034:	e0bffd17 	ldw	r2,-12(fp)
   16038:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   1603c:	008000b4 	movhi	r2,2
   16040:	1091d704 	addi	r2,r2,18268
   16044:	e0fffd17 	ldw	r3,-12(fp)
   16048:	10c00015 	stw	r3,0(r2)
   1604c:	e0bff717 	ldw	r2,-36(fp)
   16050:	e0bffb15 	stw	r2,-20(fp)
   16054:	e0bffb17 	ldw	r2,-20(fp)
   16058:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1605c:	e0bff403 	ldbu	r2,-48(fp)
   16060:	10800058 	cmpnei	r2,r2,1
   16064:	1000011e 	bne	r2,zero,1606c <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   16068:	00151b80 	call	151b8 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   1606c:	e0bfff17 	ldw	r2,-4(fp)
   16070:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   16074:	e03ff615 	stw	zero,-40(fp)
             break;
   16078:	00000a06 	br	160a4 <OSFlagDel+0x258>
   1607c:	e0bff717 	ldw	r2,-36(fp)
   16080:	e0bffc15 	stw	r2,-16(fp)
   16084:	e0bffc17 	ldw	r2,-16(fp)
   16088:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   1608c:	e0bfff17 	ldw	r2,-4(fp)
   16090:	00c001c4 	movi	r3,7
   16094:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   16098:	e0bffd17 	ldw	r2,-12(fp)
   1609c:	e0bff615 	stw	r2,-40(fp)
             break;
   160a0:	0001883a 	nop
    }
    return (pgrp_return);
   160a4:	e0bff617 	ldw	r2,-40(fp)
}
   160a8:	e037883a 	mov	sp,fp
   160ac:	dfc00117 	ldw	ra,4(sp)
   160b0:	df000017 	ldw	fp,0(sp)
   160b4:	dec00204 	addi	sp,sp,8
   160b8:	f800283a 	ret

000160bc <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   160bc:	defff604 	addi	sp,sp,-40
   160c0:	dfc00915 	stw	ra,36(sp)
   160c4:	df000815 	stw	fp,32(sp)
   160c8:	df000804 	addi	fp,sp,32
   160cc:	e13ffd15 	stw	r4,-12(fp)
   160d0:	e17ffe15 	stw	r5,-8(fp)
   160d4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   160d8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   160dc:	e0bfff17 	ldw	r2,-4(fp)
   160e0:	1000021e 	bne	r2,zero,160ec <OSFlagNameGet+0x30>
        return (0);
   160e4:	0005883a 	mov	r2,zero
   160e8:	00003b06 	br	161d8 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   160ec:	e0bffd17 	ldw	r2,-12(fp)
   160f0:	1000051e 	bne	r2,zero,16108 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   160f4:	e0bfff17 	ldw	r2,-4(fp)
   160f8:	00c01b84 	movi	r3,110
   160fc:	10c00005 	stb	r3,0(r2)
        return (0);
   16100:	0005883a 	mov	r2,zero
   16104:	00003406 	br	161d8 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   16108:	e0bffe17 	ldw	r2,-8(fp)
   1610c:	1000051e 	bne	r2,zero,16124 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   16110:	e0bfff17 	ldw	r2,-4(fp)
   16114:	00c00304 	movi	r3,12
   16118:	10c00005 	stb	r3,0(r2)
        return (0);
   1611c:	0005883a 	mov	r2,zero
   16120:	00002d06 	br	161d8 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   16124:	008000b4 	movhi	r2,2
   16128:	1091d404 	addi	r2,r2,18256
   1612c:	10800003 	ldbu	r2,0(r2)
   16130:	10803fcc 	andi	r2,r2,255
   16134:	10000526 	beq	r2,zero,1614c <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   16138:	e0bfff17 	ldw	r2,-4(fp)
   1613c:	00c00444 	movi	r3,17
   16140:	10c00005 	stb	r3,0(r2)
        return (0);
   16144:	0005883a 	mov	r2,zero
   16148:	00002306 	br	161d8 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1614c:	0005303a 	rdctl	r2,status
   16150:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16154:	e0fffa17 	ldw	r3,-24(fp)
   16158:	00bfff84 	movi	r2,-2
   1615c:	1884703a 	and	r2,r3,r2
   16160:	1001703a 	wrctl	status,r2
  
  return context;
   16164:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   16168:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1616c:	e0bffd17 	ldw	r2,-12(fp)
   16170:	10800003 	ldbu	r2,0(r2)
   16174:	10803fcc 	andi	r2,r2,255
   16178:	10800160 	cmpeqi	r2,r2,5
   1617c:	1000091e 	bne	r2,zero,161a4 <OSFlagNameGet+0xe8>
   16180:	e0bff817 	ldw	r2,-32(fp)
   16184:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16188:	e0bffb17 	ldw	r2,-20(fp)
   1618c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   16190:	e0bfff17 	ldw	r2,-4(fp)
   16194:	00c00044 	movi	r3,1
   16198:	10c00005 	stb	r3,0(r2)
        return (0);
   1619c:	0005883a 	mov	r2,zero
   161a0:	00000d06 	br	161d8 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   161a4:	e0bffd17 	ldw	r2,-12(fp)
   161a8:	10800284 	addi	r2,r2,10
   161ac:	e13ffe17 	ldw	r4,-8(fp)
   161b0:	100b883a 	mov	r5,r2
   161b4:	00152f40 	call	152f4 <OS_StrCopy>
   161b8:	e0bff905 	stb	r2,-28(fp)
   161bc:	e0bff817 	ldw	r2,-32(fp)
   161c0:	e0bffc15 	stw	r2,-16(fp)
   161c4:	e0bffc17 	ldw	r2,-16(fp)
   161c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   161cc:	e0bfff17 	ldw	r2,-4(fp)
   161d0:	10000005 	stb	zero,0(r2)
    return (len);
   161d4:	e0bff903 	ldbu	r2,-28(fp)
}
   161d8:	e037883a 	mov	sp,fp
   161dc:	dfc00117 	ldw	ra,4(sp)
   161e0:	df000017 	ldw	fp,0(sp)
   161e4:	dec00204 	addi	sp,sp,8
   161e8:	f800283a 	ret

000161ec <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   161ec:	defff504 	addi	sp,sp,-44
   161f0:	dfc00a15 	stw	ra,40(sp)
   161f4:	df000915 	stw	fp,36(sp)
   161f8:	df000904 	addi	fp,sp,36
   161fc:	e13ffd15 	stw	r4,-12(fp)
   16200:	e17ffe15 	stw	r5,-8(fp)
   16204:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16208:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1620c:	e0bfff17 	ldw	r2,-4(fp)
   16210:	1000011e 	bne	r2,zero,16218 <OSFlagNameSet+0x2c>
        return;
   16214:	00004406 	br	16328 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   16218:	e0bffd17 	ldw	r2,-12(fp)
   1621c:	1000041e 	bne	r2,zero,16230 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16220:	e0bfff17 	ldw	r2,-4(fp)
   16224:	00c01b84 	movi	r3,110
   16228:	10c00005 	stb	r3,0(r2)
        return;
   1622c:	00003e06 	br	16328 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   16230:	e0bffe17 	ldw	r2,-8(fp)
   16234:	1000041e 	bne	r2,zero,16248 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   16238:	e0bfff17 	ldw	r2,-4(fp)
   1623c:	00c00304 	movi	r3,12
   16240:	10c00005 	stb	r3,0(r2)
        return;
   16244:	00003806 	br	16328 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   16248:	008000b4 	movhi	r2,2
   1624c:	1091d404 	addi	r2,r2,18256
   16250:	10800003 	ldbu	r2,0(r2)
   16254:	10803fcc 	andi	r2,r2,255
   16258:	10000426 	beq	r2,zero,1626c <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   1625c:	e0bfff17 	ldw	r2,-4(fp)
   16260:	00c00484 	movi	r3,18
   16264:	10c00005 	stb	r3,0(r2)
        return;
   16268:	00002f06 	br	16328 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1626c:	0005303a 	rdctl	r2,status
   16270:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16274:	e0fff917 	ldw	r3,-28(fp)
   16278:	00bfff84 	movi	r2,-2
   1627c:	1884703a 	and	r2,r3,r2
   16280:	1001703a 	wrctl	status,r2
  
  return context;
   16284:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   16288:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1628c:	e0bffd17 	ldw	r2,-12(fp)
   16290:	10800003 	ldbu	r2,0(r2)
   16294:	10803fcc 	andi	r2,r2,255
   16298:	10800160 	cmpeqi	r2,r2,5
   1629c:	1000081e 	bne	r2,zero,162c0 <OSFlagNameSet+0xd4>
   162a0:	e0bff717 	ldw	r2,-36(fp)
   162a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   162a8:	e0bffa17 	ldw	r2,-24(fp)
   162ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   162b0:	e0bfff17 	ldw	r2,-4(fp)
   162b4:	00c00044 	movi	r3,1
   162b8:	10c00005 	stb	r3,0(r2)
        return;
   162bc:	00001a06 	br	16328 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   162c0:	e13ffe17 	ldw	r4,-8(fp)
   162c4:	00153680 	call	15368 <OS_StrLen>
   162c8:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   162cc:	e0bff803 	ldbu	r2,-32(fp)
   162d0:	10800830 	cmpltui	r2,r2,32
   162d4:	1000081e 	bne	r2,zero,162f8 <OSFlagNameSet+0x10c>
   162d8:	e0bff717 	ldw	r2,-36(fp)
   162dc:	e0bffb15 	stw	r2,-20(fp)
   162e0:	e0bffb17 	ldw	r2,-20(fp)
   162e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   162e8:	e0bfff17 	ldw	r2,-4(fp)
   162ec:	00c01cc4 	movi	r3,115
   162f0:	10c00005 	stb	r3,0(r2)
        return;
   162f4:	00000c06 	br	16328 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   162f8:	e0bffd17 	ldw	r2,-12(fp)
   162fc:	10800284 	addi	r2,r2,10
   16300:	1009883a 	mov	r4,r2
   16304:	e17ffe17 	ldw	r5,-8(fp)
   16308:	00152f40 	call	152f4 <OS_StrCopy>
   1630c:	e0bff717 	ldw	r2,-36(fp)
   16310:	e0bffc15 	stw	r2,-16(fp)
   16314:	e0bffc17 	ldw	r2,-16(fp)
   16318:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1631c:	e0bfff17 	ldw	r2,-4(fp)
   16320:	10000005 	stb	zero,0(r2)
    return;
   16324:	0001883a 	nop
}
   16328:	e037883a 	mov	sp,fp
   1632c:	dfc00117 	ldw	ra,4(sp)
   16330:	df000017 	ldw	fp,0(sp)
   16334:	dec00204 	addi	sp,sp,8
   16338:	f800283a 	ret

0001633c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   1633c:	deffe204 	addi	sp,sp,-120
   16340:	dfc01d15 	stw	ra,116(sp)
   16344:	df001c15 	stw	fp,112(sp)
   16348:	df001c04 	addi	fp,sp,112
   1634c:	e13ffc15 	stw	r4,-16(fp)
   16350:	2809883a 	mov	r4,r5
   16354:	3007883a 	mov	r3,r6
   16358:	3805883a 	mov	r2,r7
   1635c:	e13ffd0d 	sth	r4,-12(fp)
   16360:	e0fffe05 	stb	r3,-8(fp)
   16364:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   16368:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1636c:	e0800217 	ldw	r2,8(fp)
   16370:	1000021e 	bne	r2,zero,1637c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   16374:	0005883a 	mov	r2,zero
   16378:	00016706 	br	16918 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1637c:	e0bffc17 	ldw	r2,-16(fp)
   16380:	1000051e 	bne	r2,zero,16398 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16384:	e0800217 	ldw	r2,8(fp)
   16388:	00c01b84 	movi	r3,110
   1638c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16390:	0005883a 	mov	r2,zero
   16394:	00016006 	br	16918 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   16398:	008000b4 	movhi	r2,2
   1639c:	1091d404 	addi	r2,r2,18256
   163a0:	10800003 	ldbu	r2,0(r2)
   163a4:	10803fcc 	andi	r2,r2,255
   163a8:	10000526 	beq	r2,zero,163c0 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   163ac:	e0800217 	ldw	r2,8(fp)
   163b0:	00c00084 	movi	r3,2
   163b4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   163b8:	0005883a 	mov	r2,zero
   163bc:	00015606 	br	16918 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   163c0:	008000b4 	movhi	r2,2
   163c4:	1091c604 	addi	r2,r2,18200
   163c8:	10800003 	ldbu	r2,0(r2)
   163cc:	10803fcc 	andi	r2,r2,255
   163d0:	10000526 	beq	r2,zero,163e8 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   163d4:	e0800217 	ldw	r2,8(fp)
   163d8:	00c00344 	movi	r3,13
   163dc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   163e0:	0005883a 	mov	r2,zero
   163e4:	00014c06 	br	16918 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   163e8:	e0bffc17 	ldw	r2,-16(fp)
   163ec:	10800003 	ldbu	r2,0(r2)
   163f0:	10803fcc 	andi	r2,r2,255
   163f4:	10800160 	cmpeqi	r2,r2,5
   163f8:	1000051e 	bne	r2,zero,16410 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   163fc:	e0800217 	ldw	r2,8(fp)
   16400:	00c00044 	movi	r3,1
   16404:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16408:	0005883a 	mov	r2,zero
   1640c:	00014206 	br	16918 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   16410:	e0fffe03 	ldbu	r3,-8(fp)
   16414:	00bfe004 	movi	r2,-128
   16418:	1884703a 	and	r2,r3,r2
   1641c:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   16420:	e0bfe703 	ldbu	r2,-100(fp)
   16424:	10000626 	beq	r2,zero,16440 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   16428:	e0bffe03 	ldbu	r2,-8(fp)
   1642c:	10801fcc 	andi	r2,r2,127
   16430:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   16434:	00800044 	movi	r2,1
   16438:	e0bfe505 	stb	r2,-108(fp)
   1643c:	00000106 	br	16444 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   16440:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16444:	0005303a 	rdctl	r2,status
   16448:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1644c:	e0ffe917 	ldw	r3,-92(fp)
   16450:	00bfff84 	movi	r2,-2
   16454:	1884703a 	and	r2,r3,r2
   16458:	1001703a 	wrctl	status,r2
  
  return context;
   1645c:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   16460:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   16464:	e0bffe03 	ldbu	r2,-8(fp)
   16468:	10c00060 	cmpeqi	r3,r2,1
   1646c:	1800921e 	bne	r3,zero,166b8 <OSFlagPend+0x37c>
   16470:	10c00088 	cmpgei	r3,r2,2
   16474:	1800021e 	bne	r3,zero,16480 <OSFlagPend+0x144>
   16478:	10006126 	beq	r2,zero,16600 <OSFlagPend+0x2c4>
   1647c:	0000bb06 	br	1676c <OSFlagPend+0x430>
   16480:	10c000a0 	cmpeqi	r3,r2,2
   16484:	1800031e 	bne	r3,zero,16494 <OSFlagPend+0x158>
   16488:	108000e0 	cmpeqi	r2,r2,3
   1648c:	10002f1e 	bne	r2,zero,1654c <OSFlagPend+0x210>
   16490:	0000b606 	br	1676c <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   16494:	e0bffc17 	ldw	r2,-16(fp)
   16498:	10c0020b 	ldhu	r3,8(r2)
   1649c:	e0bffd0b 	ldhu	r2,-12(fp)
   164a0:	1884703a 	and	r2,r3,r2
   164a4:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   164a8:	e0ffe78b 	ldhu	r3,-98(fp)
   164ac:	e0bffd0b 	ldhu	r2,-12(fp)
   164b0:	1880191e 	bne	r3,r2,16518 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   164b4:	e0bfe503 	ldbu	r2,-108(fp)
   164b8:	10800058 	cmpnei	r2,r2,1
   164bc:	1000091e 	bne	r2,zero,164e4 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   164c0:	e0bffc17 	ldw	r2,-16(fp)
   164c4:	1080020b 	ldhu	r2,8(r2)
   164c8:	1007883a 	mov	r3,r2
   164cc:	e0bfe78b 	ldhu	r2,-98(fp)
   164d0:	0084303a 	nor	r2,zero,r2
   164d4:	1884703a 	and	r2,r3,r2
   164d8:	1007883a 	mov	r3,r2
   164dc:	e0bffc17 	ldw	r2,-16(fp)
   164e0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   164e4:	008000b4 	movhi	r2,2
   164e8:	1091d504 	addi	r2,r2,18260
   164ec:	10800017 	ldw	r2,0(r2)
   164f0:	e0ffe78b 	ldhu	r3,-98(fp)
   164f4:	10c00b0d 	sth	r3,44(r2)
   164f8:	e0bfe617 	ldw	r2,-104(fp)
   164fc:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16500:	e0bfea17 	ldw	r2,-88(fp)
   16504:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   16508:	e0800217 	ldw	r2,8(fp)
   1650c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   16510:	e0bfe78b 	ldhu	r2,-98(fp)
   16514:	00010006 	br	16918 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   16518:	e1bffd0b 	ldhu	r6,-12(fp)
   1651c:	e0fffe03 	ldbu	r3,-8(fp)
   16520:	e0bfff0b 	ldhu	r2,-4(fp)
   16524:	e17ff704 	addi	r5,fp,-36
   16528:	d8800015 	stw	r2,0(sp)
   1652c:	e13ffc17 	ldw	r4,-16(fp)
   16530:	180f883a 	mov	r7,r3
   16534:	0016de00 	call	16de0 <OS_FlagBlock>
   16538:	e0bfe617 	ldw	r2,-104(fp)
   1653c:	e0bfeb15 	stw	r2,-84(fp)
   16540:	e0bfeb17 	ldw	r2,-84(fp)
   16544:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   16548:	00009206 	br	16794 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   1654c:	e0bffc17 	ldw	r2,-16(fp)
   16550:	10c0020b 	ldhu	r3,8(r2)
   16554:	e0bffd0b 	ldhu	r2,-12(fp)
   16558:	1884703a 	and	r2,r3,r2
   1655c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   16560:	e0bfe78b 	ldhu	r2,-98(fp)
   16564:	10001926 	beq	r2,zero,165cc <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16568:	e0bfe503 	ldbu	r2,-108(fp)
   1656c:	10800058 	cmpnei	r2,r2,1
   16570:	1000091e 	bne	r2,zero,16598 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   16574:	e0bffc17 	ldw	r2,-16(fp)
   16578:	1080020b 	ldhu	r2,8(r2)
   1657c:	1007883a 	mov	r3,r2
   16580:	e0bfe78b 	ldhu	r2,-98(fp)
   16584:	0084303a 	nor	r2,zero,r2
   16588:	1884703a 	and	r2,r3,r2
   1658c:	1007883a 	mov	r3,r2
   16590:	e0bffc17 	ldw	r2,-16(fp)
   16594:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   16598:	008000b4 	movhi	r2,2
   1659c:	1091d504 	addi	r2,r2,18260
   165a0:	10800017 	ldw	r2,0(r2)
   165a4:	e0ffe78b 	ldhu	r3,-98(fp)
   165a8:	10c00b0d 	sth	r3,44(r2)
   165ac:	e0bfe617 	ldw	r2,-104(fp)
   165b0:	e0bfec15 	stw	r2,-80(fp)
   165b4:	e0bfec17 	ldw	r2,-80(fp)
   165b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   165bc:	e0800217 	ldw	r2,8(fp)
   165c0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   165c4:	e0bfe78b 	ldhu	r2,-98(fp)
   165c8:	0000d306 	br	16918 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   165cc:	e1bffd0b 	ldhu	r6,-12(fp)
   165d0:	e0fffe03 	ldbu	r3,-8(fp)
   165d4:	e0bfff0b 	ldhu	r2,-4(fp)
   165d8:	e17ff704 	addi	r5,fp,-36
   165dc:	d8800015 	stw	r2,0(sp)
   165e0:	e13ffc17 	ldw	r4,-16(fp)
   165e4:	180f883a 	mov	r7,r3
   165e8:	0016de00 	call	16de0 <OS_FlagBlock>
   165ec:	e0bfe617 	ldw	r2,-104(fp)
   165f0:	e0bfed15 	stw	r2,-76(fp)
   165f4:	e0bfed17 	ldw	r2,-76(fp)
   165f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   165fc:	00006506 	br	16794 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   16600:	e0bffc17 	ldw	r2,-16(fp)
   16604:	1080020b 	ldhu	r2,8(r2)
   16608:	0084303a 	nor	r2,zero,r2
   1660c:	1007883a 	mov	r3,r2
   16610:	e0bffd0b 	ldhu	r2,-12(fp)
   16614:	1884703a 	and	r2,r3,r2
   16618:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1661c:	e0ffe78b 	ldhu	r3,-98(fp)
   16620:	e0bffd0b 	ldhu	r2,-12(fp)
   16624:	1880171e 	bne	r3,r2,16684 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16628:	e0bfe503 	ldbu	r2,-108(fp)
   1662c:	10800058 	cmpnei	r2,r2,1
   16630:	1000071e 	bne	r2,zero,16650 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   16634:	e0bffc17 	ldw	r2,-16(fp)
   16638:	10c0020b 	ldhu	r3,8(r2)
   1663c:	e0bfe78b 	ldhu	r2,-98(fp)
   16640:	1884b03a 	or	r2,r3,r2
   16644:	1007883a 	mov	r3,r2
   16648:	e0bffc17 	ldw	r2,-16(fp)
   1664c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   16650:	008000b4 	movhi	r2,2
   16654:	1091d504 	addi	r2,r2,18260
   16658:	10800017 	ldw	r2,0(r2)
   1665c:	e0ffe78b 	ldhu	r3,-98(fp)
   16660:	10c00b0d 	sth	r3,44(r2)
   16664:	e0bfe617 	ldw	r2,-104(fp)
   16668:	e0bfee15 	stw	r2,-72(fp)
   1666c:	e0bfee17 	ldw	r2,-72(fp)
   16670:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   16674:	e0800217 	ldw	r2,8(fp)
   16678:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1667c:	e0bfe78b 	ldhu	r2,-98(fp)
   16680:	0000a506 	br	16918 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   16684:	e1bffd0b 	ldhu	r6,-12(fp)
   16688:	e0fffe03 	ldbu	r3,-8(fp)
   1668c:	e0bfff0b 	ldhu	r2,-4(fp)
   16690:	e17ff704 	addi	r5,fp,-36
   16694:	d8800015 	stw	r2,0(sp)
   16698:	e13ffc17 	ldw	r4,-16(fp)
   1669c:	180f883a 	mov	r7,r3
   166a0:	0016de00 	call	16de0 <OS_FlagBlock>
   166a4:	e0bfe617 	ldw	r2,-104(fp)
   166a8:	e0bfef15 	stw	r2,-68(fp)
   166ac:	e0bfef17 	ldw	r2,-68(fp)
   166b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   166b4:	00003706 	br	16794 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   166b8:	e0bffc17 	ldw	r2,-16(fp)
   166bc:	1080020b 	ldhu	r2,8(r2)
   166c0:	0084303a 	nor	r2,zero,r2
   166c4:	1007883a 	mov	r3,r2
   166c8:	e0bffd0b 	ldhu	r2,-12(fp)
   166cc:	1884703a 	and	r2,r3,r2
   166d0:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   166d4:	e0bfe78b 	ldhu	r2,-98(fp)
   166d8:	10001726 	beq	r2,zero,16738 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   166dc:	e0bfe503 	ldbu	r2,-108(fp)
   166e0:	10800058 	cmpnei	r2,r2,1
   166e4:	1000071e 	bne	r2,zero,16704 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   166e8:	e0bffc17 	ldw	r2,-16(fp)
   166ec:	10c0020b 	ldhu	r3,8(r2)
   166f0:	e0bfe78b 	ldhu	r2,-98(fp)
   166f4:	1884b03a 	or	r2,r3,r2
   166f8:	1007883a 	mov	r3,r2
   166fc:	e0bffc17 	ldw	r2,-16(fp)
   16700:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   16704:	008000b4 	movhi	r2,2
   16708:	1091d504 	addi	r2,r2,18260
   1670c:	10800017 	ldw	r2,0(r2)
   16710:	e0ffe78b 	ldhu	r3,-98(fp)
   16714:	10c00b0d 	sth	r3,44(r2)
   16718:	e0bfe617 	ldw	r2,-104(fp)
   1671c:	e0bff015 	stw	r2,-64(fp)
   16720:	e0bff017 	ldw	r2,-64(fp)
   16724:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   16728:	e0800217 	ldw	r2,8(fp)
   1672c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   16730:	e0bfe78b 	ldhu	r2,-98(fp)
   16734:	00007806 	br	16918 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   16738:	e1bffd0b 	ldhu	r6,-12(fp)
   1673c:	e0fffe03 	ldbu	r3,-8(fp)
   16740:	e0bfff0b 	ldhu	r2,-4(fp)
   16744:	e17ff704 	addi	r5,fp,-36
   16748:	d8800015 	stw	r2,0(sp)
   1674c:	e13ffc17 	ldw	r4,-16(fp)
   16750:	180f883a 	mov	r7,r3
   16754:	0016de00 	call	16de0 <OS_FlagBlock>
   16758:	e0bfe617 	ldw	r2,-104(fp)
   1675c:	e0bff115 	stw	r2,-60(fp)
   16760:	e0bff117 	ldw	r2,-60(fp)
   16764:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   16768:	00000a06 	br	16794 <OSFlagPend+0x458>
   1676c:	e0bfe617 	ldw	r2,-104(fp)
   16770:	e0bff215 	stw	r2,-56(fp)
   16774:	e0bff217 	ldw	r2,-56(fp)
   16778:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   1677c:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   16780:	e0800217 	ldw	r2,8(fp)
   16784:	00c01bc4 	movi	r3,111
   16788:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   1678c:	e0bfe78b 	ldhu	r2,-98(fp)
   16790:	00006106 	br	16918 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   16794:	00151b80 	call	151b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16798:	0005303a 	rdctl	r2,status
   1679c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   167a0:	e0fff317 	ldw	r3,-52(fp)
   167a4:	00bfff84 	movi	r2,-2
   167a8:	1884703a 	and	r2,r3,r2
   167ac:	1001703a 	wrctl	status,r2
  
  return context;
   167b0:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   167b4:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   167b8:	008000b4 	movhi	r2,2
   167bc:	1091d504 	addi	r2,r2,18260
   167c0:	10800017 	ldw	r2,0(r2)
   167c4:	10800c43 	ldbu	r2,49(r2)
   167c8:	10803fcc 	andi	r2,r2,255
   167cc:	10002226 	beq	r2,zero,16858 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   167d0:	008000b4 	movhi	r2,2
   167d4:	1091d504 	addi	r2,r2,18260
   167d8:	10800017 	ldw	r2,0(r2)
   167dc:	10800c43 	ldbu	r2,49(r2)
   167e0:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   167e4:	008000b4 	movhi	r2,2
   167e8:	1091d504 	addi	r2,r2,18260
   167ec:	10800017 	ldw	r2,0(r2)
   167f0:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   167f4:	e0bff704 	addi	r2,fp,-36
   167f8:	1009883a 	mov	r4,r2
   167fc:	00171980 	call	17198 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   16800:	008000b4 	movhi	r2,2
   16804:	1091d504 	addi	r2,r2,18260
   16808:	10800017 	ldw	r2,0(r2)
   1680c:	10000c05 	stb	zero,48(r2)
   16810:	e0bfe617 	ldw	r2,-104(fp)
   16814:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16818:	e0bff417 	ldw	r2,-48(fp)
   1681c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   16820:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   16824:	e0bfe803 	ldbu	r2,-96(fp)
   16828:	108000a0 	cmpeqi	r2,r2,2
   1682c:	10000426 	beq	r2,zero,16840 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   16830:	e0800217 	ldw	r2,8(fp)
   16834:	00c00384 	movi	r3,14
   16838:	10c00005 	stb	r3,0(r2)
                 break;
   1683c:	00000406 	br	16850 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   16840:	e0800217 	ldw	r2,8(fp)
   16844:	00c00284 	movi	r3,10
   16848:	10c00005 	stb	r3,0(r2)
                 break;
   1684c:	0001883a 	nop
        }
        return (flags_rdy);
   16850:	e0bfe78b 	ldhu	r2,-98(fp)
   16854:	00003006 	br	16918 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   16858:	008000b4 	movhi	r2,2
   1685c:	1091d504 	addi	r2,r2,18260
   16860:	10800017 	ldw	r2,0(r2)
   16864:	10800b0b 	ldhu	r2,44(r2)
   16868:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   1686c:	e0bfe503 	ldbu	r2,-108(fp)
   16870:	10800058 	cmpnei	r2,r2,1
   16874:	1000211e 	bne	r2,zero,168fc <OSFlagPend+0x5c0>
        switch (wait_type) {
   16878:	e0bffe03 	ldbu	r2,-8(fp)
   1687c:	10001616 	blt	r2,zero,168d8 <OSFlagPend+0x59c>
   16880:	10c00090 	cmplti	r3,r2,2
   16884:	18000c1e 	bne	r3,zero,168b8 <OSFlagPend+0x57c>
   16888:	10800108 	cmpgei	r2,r2,4
   1688c:	1000121e 	bne	r2,zero,168d8 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   16890:	e0bffc17 	ldw	r2,-16(fp)
   16894:	1080020b 	ldhu	r2,8(r2)
   16898:	1007883a 	mov	r3,r2
   1689c:	e0bfe78b 	ldhu	r2,-98(fp)
   168a0:	0084303a 	nor	r2,zero,r2
   168a4:	1884703a 	and	r2,r3,r2
   168a8:	1007883a 	mov	r3,r2
   168ac:	e0bffc17 	ldw	r2,-16(fp)
   168b0:	10c0020d 	sth	r3,8(r2)
                 break;
   168b4:	00001106 	br	168fc <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   168b8:	e0bffc17 	ldw	r2,-16(fp)
   168bc:	10c0020b 	ldhu	r3,8(r2)
   168c0:	e0bfe78b 	ldhu	r2,-98(fp)
   168c4:	1884b03a 	or	r2,r3,r2
   168c8:	1007883a 	mov	r3,r2
   168cc:	e0bffc17 	ldw	r2,-16(fp)
   168d0:	10c0020d 	sth	r3,8(r2)
                 break;
   168d4:	00000906 	br	168fc <OSFlagPend+0x5c0>
   168d8:	e0bfe617 	ldw	r2,-104(fp)
   168dc:	e0bff515 	stw	r2,-44(fp)
   168e0:	e0bff517 	ldw	r2,-44(fp)
   168e4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   168e8:	e0800217 	ldw	r2,8(fp)
   168ec:	00c01bc4 	movi	r3,111
   168f0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   168f4:	0005883a 	mov	r2,zero
   168f8:	00000706 	br	16918 <OSFlagPend+0x5dc>
   168fc:	e0bfe617 	ldw	r2,-104(fp)
   16900:	e0bff615 	stw	r2,-40(fp)
   16904:	e0bff617 	ldw	r2,-40(fp)
   16908:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   1690c:	e0800217 	ldw	r2,8(fp)
   16910:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   16914:	e0bfe78b 	ldhu	r2,-98(fp)
}
   16918:	e037883a 	mov	sp,fp
   1691c:	dfc00117 	ldw	ra,4(sp)
   16920:	df000017 	ldw	fp,0(sp)
   16924:	dec00204 	addi	sp,sp,8
   16928:	f800283a 	ret

0001692c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   1692c:	defffb04 	addi	sp,sp,-20
   16930:	df000415 	stw	fp,16(sp)
   16934:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   16938:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1693c:	0005303a 	rdctl	r2,status
   16940:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16944:	e0fffe17 	ldw	r3,-8(fp)
   16948:	00bfff84 	movi	r2,-2
   1694c:	1884703a 	and	r2,r3,r2
   16950:	1001703a 	wrctl	status,r2
  
  return context;
   16954:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   16958:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   1695c:	008000b4 	movhi	r2,2
   16960:	1091d504 	addi	r2,r2,18260
   16964:	10800017 	ldw	r2,0(r2)
   16968:	10800b0b 	ldhu	r2,44(r2)
   1696c:	e0bffd0d 	sth	r2,-12(fp)
   16970:	e0bffc17 	ldw	r2,-16(fp)
   16974:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16978:	e0bfff17 	ldw	r2,-4(fp)
   1697c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   16980:	e0bffd0b 	ldhu	r2,-12(fp)
}
   16984:	e037883a 	mov	sp,fp
   16988:	df000017 	ldw	fp,0(sp)
   1698c:	dec00104 	addi	sp,sp,4
   16990:	f800283a 	ret

00016994 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   16994:	deffef04 	addi	sp,sp,-68
   16998:	dfc01015 	stw	ra,64(sp)
   1699c:	df000f15 	stw	fp,60(sp)
   169a0:	df000f04 	addi	fp,sp,60
   169a4:	e13ffc15 	stw	r4,-16(fp)
   169a8:	2807883a 	mov	r3,r5
   169ac:	3005883a 	mov	r2,r6
   169b0:	e1ffff15 	stw	r7,-4(fp)
   169b4:	e0fffd0d 	sth	r3,-12(fp)
   169b8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   169bc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   169c0:	e0bfff17 	ldw	r2,-4(fp)
   169c4:	1000021e 	bne	r2,zero,169d0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   169c8:	0005883a 	mov	r2,zero
   169cc:	0000ce06 	br	16d08 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   169d0:	e0bffc17 	ldw	r2,-16(fp)
   169d4:	1000051e 	bne	r2,zero,169ec <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   169d8:	e0bfff17 	ldw	r2,-4(fp)
   169dc:	00c01b84 	movi	r3,110
   169e0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   169e4:	0005883a 	mov	r2,zero
   169e8:	0000c706 	br	16d08 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   169ec:	e0bffc17 	ldw	r2,-16(fp)
   169f0:	10800003 	ldbu	r2,0(r2)
   169f4:	10803fcc 	andi	r2,r2,255
   169f8:	10800160 	cmpeqi	r2,r2,5
   169fc:	1000051e 	bne	r2,zero,16a14 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   16a00:	e0bfff17 	ldw	r2,-4(fp)
   16a04:	00c00044 	movi	r3,1
   16a08:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16a0c:	0005883a 	mov	r2,zero
   16a10:	0000bd06 	br	16d08 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16a14:	0005303a 	rdctl	r2,status
   16a18:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16a1c:	e0fff617 	ldw	r3,-40(fp)
   16a20:	00bfff84 	movi	r2,-2
   16a24:	1884703a 	and	r2,r3,r2
   16a28:	1001703a 	wrctl	status,r2
  
  return context;
   16a2c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   16a30:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   16a34:	e0bffe03 	ldbu	r2,-8(fp)
   16a38:	10000326 	beq	r2,zero,16a48 <OSFlagPost+0xb4>
   16a3c:	10800060 	cmpeqi	r2,r2,1
   16a40:	10000b1e 	bne	r2,zero,16a70 <OSFlagPost+0xdc>
   16a44:	00001206 	br	16a90 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   16a48:	e0bffc17 	ldw	r2,-16(fp)
   16a4c:	1080020b 	ldhu	r2,8(r2)
   16a50:	1007883a 	mov	r3,r2
   16a54:	e0bffd0b 	ldhu	r2,-12(fp)
   16a58:	0084303a 	nor	r2,zero,r2
   16a5c:	1884703a 	and	r2,r3,r2
   16a60:	1007883a 	mov	r3,r2
   16a64:	e0bffc17 	ldw	r2,-16(fp)
   16a68:	10c0020d 	sth	r3,8(r2)
             break;
   16a6c:	00001106 	br	16ab4 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   16a70:	e0bffc17 	ldw	r2,-16(fp)
   16a74:	10c0020b 	ldhu	r3,8(r2)
   16a78:	e0bffd0b 	ldhu	r2,-12(fp)
   16a7c:	1884b03a 	or	r2,r3,r2
   16a80:	1007883a 	mov	r3,r2
   16a84:	e0bffc17 	ldw	r2,-16(fp)
   16a88:	10c0020d 	sth	r3,8(r2)
             break;
   16a8c:	00000906 	br	16ab4 <OSFlagPost+0x120>
   16a90:	e0bff317 	ldw	r2,-52(fp)
   16a94:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a98:	e0bff717 	ldw	r2,-36(fp)
   16a9c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   16aa0:	e0bfff17 	ldw	r2,-4(fp)
   16aa4:	00c01c44 	movi	r3,113
   16aa8:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   16aac:	0005883a 	mov	r2,zero
   16ab0:	00009506 	br	16d08 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   16ab4:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   16ab8:	e0bffc17 	ldw	r2,-16(fp)
   16abc:	10800117 	ldw	r2,4(r2)
   16ac0:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   16ac4:	00007406 	br	16c98 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   16ac8:	e0bff117 	ldw	r2,-60(fp)
   16acc:	10800483 	ldbu	r2,18(r2)
   16ad0:	10803fcc 	andi	r2,r2,255
   16ad4:	10c00060 	cmpeqi	r3,r2,1
   16ad8:	18004d1e 	bne	r3,zero,16c10 <OSFlagPost+0x27c>
   16adc:	10c00088 	cmpgei	r3,r2,2
   16ae0:	1800021e 	bne	r3,zero,16aec <OSFlagPost+0x158>
   16ae4:	10003126 	beq	r2,zero,16bac <OSFlagPost+0x218>
   16ae8:	00005f06 	br	16c68 <OSFlagPost+0x2d4>
   16aec:	10c000a0 	cmpeqi	r3,r2,2
   16af0:	1800031e 	bne	r3,zero,16b00 <OSFlagPost+0x16c>
   16af4:	108000e0 	cmpeqi	r2,r2,3
   16af8:	1000181e 	bne	r2,zero,16b5c <OSFlagPost+0x1c8>
   16afc:	00005a06 	br	16c68 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16b00:	e0bffc17 	ldw	r2,-16(fp)
   16b04:	10c0020b 	ldhu	r3,8(r2)
   16b08:	e0bff117 	ldw	r2,-60(fp)
   16b0c:	1080040b 	ldhu	r2,16(r2)
   16b10:	1884703a 	and	r2,r3,r2
   16b14:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   16b18:	e0bff117 	ldw	r2,-60(fp)
   16b1c:	1080040b 	ldhu	r2,16(r2)
   16b20:	10ffffcc 	andi	r3,r2,65535
   16b24:	e0bff40b 	ldhu	r2,-48(fp)
   16b28:	18800b1e 	bne	r3,r2,16b58 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16b2c:	e0bff40b 	ldhu	r2,-48(fp)
   16b30:	e13ff117 	ldw	r4,-60(fp)
   16b34:	100b883a 	mov	r5,r2
   16b38:	00170880 	call	17088 <OS_FlagTaskRdy>
   16b3c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   16b40:	e0bff483 	ldbu	r2,-46(fp)
   16b44:	10800058 	cmpnei	r2,r2,1
   16b48:	1000031e 	bne	r2,zero,16b58 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   16b4c:	00800044 	movi	r2,1
   16b50:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16b54:	00004d06 	br	16c8c <OSFlagPost+0x2f8>
   16b58:	00004c06 	br	16c8c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16b5c:	e0bffc17 	ldw	r2,-16(fp)
   16b60:	10c0020b 	ldhu	r3,8(r2)
   16b64:	e0bff117 	ldw	r2,-60(fp)
   16b68:	1080040b 	ldhu	r2,16(r2)
   16b6c:	1884703a 	and	r2,r3,r2
   16b70:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   16b74:	e0bff40b 	ldhu	r2,-48(fp)
   16b78:	10000b26 	beq	r2,zero,16ba8 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16b7c:	e0bff40b 	ldhu	r2,-48(fp)
   16b80:	e13ff117 	ldw	r4,-60(fp)
   16b84:	100b883a 	mov	r5,r2
   16b88:	00170880 	call	17088 <OS_FlagTaskRdy>
   16b8c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   16b90:	e0bff483 	ldbu	r2,-46(fp)
   16b94:	10800058 	cmpnei	r2,r2,1
   16b98:	1000031e 	bne	r2,zero,16ba8 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   16b9c:	00800044 	movi	r2,1
   16ba0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16ba4:	00003906 	br	16c8c <OSFlagPost+0x2f8>
   16ba8:	00003806 	br	16c8c <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16bac:	e0bffc17 	ldw	r2,-16(fp)
   16bb0:	1080020b 	ldhu	r2,8(r2)
   16bb4:	0084303a 	nor	r2,zero,r2
   16bb8:	1007883a 	mov	r3,r2
   16bbc:	e0bff117 	ldw	r2,-60(fp)
   16bc0:	1080040b 	ldhu	r2,16(r2)
   16bc4:	1884703a 	and	r2,r3,r2
   16bc8:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   16bcc:	e0bff117 	ldw	r2,-60(fp)
   16bd0:	1080040b 	ldhu	r2,16(r2)
   16bd4:	10ffffcc 	andi	r3,r2,65535
   16bd8:	e0bff40b 	ldhu	r2,-48(fp)
   16bdc:	18800b1e 	bne	r3,r2,16c0c <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16be0:	e0bff40b 	ldhu	r2,-48(fp)
   16be4:	e13ff117 	ldw	r4,-60(fp)
   16be8:	100b883a 	mov	r5,r2
   16bec:	00170880 	call	17088 <OS_FlagTaskRdy>
   16bf0:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   16bf4:	e0bff483 	ldbu	r2,-46(fp)
   16bf8:	10800058 	cmpnei	r2,r2,1
   16bfc:	1000031e 	bne	r2,zero,16c0c <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   16c00:	00800044 	movi	r2,1
   16c04:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16c08:	00002006 	br	16c8c <OSFlagPost+0x2f8>
   16c0c:	00001f06 	br	16c8c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16c10:	e0bffc17 	ldw	r2,-16(fp)
   16c14:	1080020b 	ldhu	r2,8(r2)
   16c18:	0084303a 	nor	r2,zero,r2
   16c1c:	1007883a 	mov	r3,r2
   16c20:	e0bff117 	ldw	r2,-60(fp)
   16c24:	1080040b 	ldhu	r2,16(r2)
   16c28:	1884703a 	and	r2,r3,r2
   16c2c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   16c30:	e0bff40b 	ldhu	r2,-48(fp)
   16c34:	10000b26 	beq	r2,zero,16c64 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16c38:	e0bff40b 	ldhu	r2,-48(fp)
   16c3c:	e13ff117 	ldw	r4,-60(fp)
   16c40:	100b883a 	mov	r5,r2
   16c44:	00170880 	call	17088 <OS_FlagTaskRdy>
   16c48:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   16c4c:	e0bff483 	ldbu	r2,-46(fp)
   16c50:	10800058 	cmpnei	r2,r2,1
   16c54:	1000031e 	bne	r2,zero,16c64 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   16c58:	00800044 	movi	r2,1
   16c5c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16c60:	00000a06 	br	16c8c <OSFlagPost+0x2f8>
   16c64:	00000906 	br	16c8c <OSFlagPost+0x2f8>
   16c68:	e0bff317 	ldw	r2,-52(fp)
   16c6c:	e0bff815 	stw	r2,-32(fp)
   16c70:	e0bff817 	ldw	r2,-32(fp)
   16c74:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   16c78:	e0bfff17 	ldw	r2,-4(fp)
   16c7c:	00c01bc4 	movi	r3,111
   16c80:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   16c84:	0005883a 	mov	r2,zero
   16c88:	00001f06 	br	16d08 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   16c8c:	e0bff117 	ldw	r2,-60(fp)
   16c90:	10800017 	ldw	r2,0(r2)
   16c94:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   16c98:	e0bff117 	ldw	r2,-60(fp)
   16c9c:	103f8a1e 	bne	r2,zero,16ac8 <__alt_mem_Flash_flash_data+0xf4016ac8>
   16ca0:	e0bff317 	ldw	r2,-52(fp)
   16ca4:	e0bff915 	stw	r2,-28(fp)
   16ca8:	e0bff917 	ldw	r2,-28(fp)
   16cac:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   16cb0:	e0bff203 	ldbu	r2,-56(fp)
   16cb4:	10800058 	cmpnei	r2,r2,1
   16cb8:	1000011e 	bne	r2,zero,16cc0 <OSFlagPost+0x32c>
        OS_Sched();
   16cbc:	00151b80 	call	151b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16cc0:	0005303a 	rdctl	r2,status
   16cc4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16cc8:	e0fffa17 	ldw	r3,-24(fp)
   16ccc:	00bfff84 	movi	r2,-2
   16cd0:	1884703a 	and	r2,r3,r2
   16cd4:	1001703a 	wrctl	status,r2
  
  return context;
   16cd8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   16cdc:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   16ce0:	e0bffc17 	ldw	r2,-16(fp)
   16ce4:	1080020b 	ldhu	r2,8(r2)
   16ce8:	e0bff50d 	sth	r2,-44(fp)
   16cec:	e0bff317 	ldw	r2,-52(fp)
   16cf0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16cf4:	e0bffb17 	ldw	r2,-20(fp)
   16cf8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   16cfc:	e0bfff17 	ldw	r2,-4(fp)
   16d00:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   16d04:	e0bff50b 	ldhu	r2,-44(fp)
}
   16d08:	e037883a 	mov	sp,fp
   16d0c:	dfc00117 	ldw	ra,4(sp)
   16d10:	df000017 	ldw	fp,0(sp)
   16d14:	dec00204 	addi	sp,sp,8
   16d18:	f800283a 	ret

00016d1c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   16d1c:	defff904 	addi	sp,sp,-28
   16d20:	df000615 	stw	fp,24(sp)
   16d24:	df000604 	addi	fp,sp,24
   16d28:	e13ffe15 	stw	r4,-8(fp)
   16d2c:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   16d30:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   16d34:	e0bfff17 	ldw	r2,-4(fp)
   16d38:	1000021e 	bne	r2,zero,16d44 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   16d3c:	0005883a 	mov	r2,zero
   16d40:	00002306 	br	16dd0 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   16d44:	e0bffe17 	ldw	r2,-8(fp)
   16d48:	1000051e 	bne	r2,zero,16d60 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16d4c:	e0bfff17 	ldw	r2,-4(fp)
   16d50:	00c01b84 	movi	r3,110
   16d54:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16d58:	0005883a 	mov	r2,zero
   16d5c:	00001c06 	br	16dd0 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   16d60:	e0bffe17 	ldw	r2,-8(fp)
   16d64:	10800003 	ldbu	r2,0(r2)
   16d68:	10803fcc 	andi	r2,r2,255
   16d6c:	10800160 	cmpeqi	r2,r2,5
   16d70:	1000051e 	bne	r2,zero,16d88 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   16d74:	e0bfff17 	ldw	r2,-4(fp)
   16d78:	00c00044 	movi	r3,1
   16d7c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16d80:	0005883a 	mov	r2,zero
   16d84:	00001206 	br	16dd0 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16d88:	0005303a 	rdctl	r2,status
   16d8c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16d90:	e0fffc17 	ldw	r3,-16(fp)
   16d94:	00bfff84 	movi	r2,-2
   16d98:	1884703a 	and	r2,r3,r2
   16d9c:	1001703a 	wrctl	status,r2
  
  return context;
   16da0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16da4:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   16da8:	e0bffe17 	ldw	r2,-8(fp)
   16dac:	1080020b 	ldhu	r2,8(r2)
   16db0:	e0bffb0d 	sth	r2,-20(fp)
   16db4:	e0bffa17 	ldw	r2,-24(fp)
   16db8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16dbc:	e0bffd17 	ldw	r2,-12(fp)
   16dc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16dc4:	e0bfff17 	ldw	r2,-4(fp)
   16dc8:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   16dcc:	e0bffb0b 	ldhu	r2,-20(fp)
}
   16dd0:	e037883a 	mov	sp,fp
   16dd4:	df000017 	ldw	fp,0(sp)
   16dd8:	dec00104 	addi	sp,sp,4
   16ddc:	f800283a 	ret

00016de0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   16de0:	defff804 	addi	sp,sp,-32
   16de4:	df000715 	stw	fp,28(sp)
   16de8:	df000704 	addi	fp,sp,28
   16dec:	e13ffb15 	stw	r4,-20(fp)
   16df0:	e17ffc15 	stw	r5,-16(fp)
   16df4:	3009883a 	mov	r4,r6
   16df8:	3807883a 	mov	r3,r7
   16dfc:	e0800117 	ldw	r2,4(fp)
   16e00:	e13ffd0d 	sth	r4,-12(fp)
   16e04:	e0fffe05 	stb	r3,-8(fp)
   16e08:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   16e0c:	008000b4 	movhi	r2,2
   16e10:	1091d504 	addi	r2,r2,18260
   16e14:	10c00017 	ldw	r3,0(r2)
   16e18:	008000b4 	movhi	r2,2
   16e1c:	1091d504 	addi	r2,r2,18260
   16e20:	10800017 	ldw	r2,0(r2)
   16e24:	10800c03 	ldbu	r2,48(r2)
   16e28:	10800814 	ori	r2,r2,32
   16e2c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   16e30:	008000b4 	movhi	r2,2
   16e34:	1091d504 	addi	r2,r2,18260
   16e38:	10800017 	ldw	r2,0(r2)
   16e3c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   16e40:	008000b4 	movhi	r2,2
   16e44:	1091d504 	addi	r2,r2,18260
   16e48:	10800017 	ldw	r2,0(r2)
   16e4c:	e0ffff0b 	ldhu	r3,-4(fp)
   16e50:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   16e54:	008000b4 	movhi	r2,2
   16e58:	1091d504 	addi	r2,r2,18260
   16e5c:	10800017 	ldw	r2,0(r2)
   16e60:	e0fffc17 	ldw	r3,-16(fp)
   16e64:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   16e68:	e0bffc17 	ldw	r2,-16(fp)
   16e6c:	e0fffd0b 	ldhu	r3,-12(fp)
   16e70:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   16e74:	e0bffc17 	ldw	r2,-16(fp)
   16e78:	e0fffe03 	ldbu	r3,-8(fp)
   16e7c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   16e80:	008000b4 	movhi	r2,2
   16e84:	1091d504 	addi	r2,r2,18260
   16e88:	10c00017 	ldw	r3,0(r2)
   16e8c:	e0bffc17 	ldw	r2,-16(fp)
   16e90:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   16e94:	e0bffb17 	ldw	r2,-20(fp)
   16e98:	10c00117 	ldw	r3,4(r2)
   16e9c:	e0bffc17 	ldw	r2,-16(fp)
   16ea0:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   16ea4:	e0bffc17 	ldw	r2,-16(fp)
   16ea8:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   16eac:	e0bffc17 	ldw	r2,-16(fp)
   16eb0:	e0fffb17 	ldw	r3,-20(fp)
   16eb4:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   16eb8:	e0bffb17 	ldw	r2,-20(fp)
   16ebc:	10800117 	ldw	r2,4(r2)
   16ec0:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   16ec4:	e0bff917 	ldw	r2,-28(fp)
   16ec8:	10000326 	beq	r2,zero,16ed8 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   16ecc:	e0bff917 	ldw	r2,-28(fp)
   16ed0:	e0fffc17 	ldw	r3,-16(fp)
   16ed4:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   16ed8:	e0bffb17 	ldw	r2,-20(fp)
   16edc:	e0fffc17 	ldw	r3,-16(fp)
   16ee0:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   16ee4:	008000b4 	movhi	r2,2
   16ee8:	1091d504 	addi	r2,r2,18260
   16eec:	10800017 	ldw	r2,0(r2)
   16ef0:	10800d03 	ldbu	r2,52(r2)
   16ef4:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   16ef8:	e0fffa03 	ldbu	r3,-24(fp)
   16efc:	e13ffa03 	ldbu	r4,-24(fp)
   16f00:	008000b4 	movhi	r2,2
   16f04:	1091d244 	addi	r2,r2,18249
   16f08:	1105883a 	add	r2,r2,r4
   16f0c:	10800003 	ldbu	r2,0(r2)
   16f10:	1009883a 	mov	r4,r2
   16f14:	008000b4 	movhi	r2,2
   16f18:	1091d504 	addi	r2,r2,18260
   16f1c:	10800017 	ldw	r2,0(r2)
   16f20:	10800d43 	ldbu	r2,53(r2)
   16f24:	0084303a 	nor	r2,zero,r2
   16f28:	2084703a 	and	r2,r4,r2
   16f2c:	1009883a 	mov	r4,r2
   16f30:	008000b4 	movhi	r2,2
   16f34:	1091d244 	addi	r2,r2,18249
   16f38:	10c5883a 	add	r2,r2,r3
   16f3c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   16f40:	e0fffa03 	ldbu	r3,-24(fp)
   16f44:	008000b4 	movhi	r2,2
   16f48:	1091d244 	addi	r2,r2,18249
   16f4c:	10c5883a 	add	r2,r2,r3
   16f50:	10800003 	ldbu	r2,0(r2)
   16f54:	10803fcc 	andi	r2,r2,255
   16f58:	10000e1e 	bne	r2,zero,16f94 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   16f5c:	008000b4 	movhi	r2,2
   16f60:	1091d504 	addi	r2,r2,18260
   16f64:	10800017 	ldw	r2,0(r2)
   16f68:	10800d83 	ldbu	r2,54(r2)
   16f6c:	0084303a 	nor	r2,zero,r2
   16f70:	1007883a 	mov	r3,r2
   16f74:	008000b4 	movhi	r2,2
   16f78:	1091d204 	addi	r2,r2,18248
   16f7c:	10800003 	ldbu	r2,0(r2)
   16f80:	1884703a 	and	r2,r3,r2
   16f84:	1007883a 	mov	r3,r2
   16f88:	008000b4 	movhi	r2,2
   16f8c:	1091d204 	addi	r2,r2,18248
   16f90:	10c00005 	stb	r3,0(r2)
    }
}
   16f94:	e037883a 	mov	sp,fp
   16f98:	df000017 	ldw	fp,0(sp)
   16f9c:	dec00104 	addi	sp,sp,4
   16fa0:	f800283a 	ret

00016fa4 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   16fa4:	defffb04 	addi	sp,sp,-20
   16fa8:	dfc00415 	stw	ra,16(sp)
   16fac:	df000315 	stw	fp,12(sp)
   16fb0:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   16fb4:	010000f4 	movhi	r4,3
   16fb8:	210bdc04 	addi	r4,r4,12144
   16fbc:	0140dc04 	movi	r5,880
   16fc0:	00151040 	call	15104 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   16fc4:	008000f4 	movhi	r2,3
   16fc8:	108bdc04 	addi	r2,r2,12144
   16fcc:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   16fd0:	008000f4 	movhi	r2,3
   16fd4:	108be704 	addi	r2,r2,12188
   16fd8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   16fdc:	e03ffd0d 	sth	zero,-12(fp)
   16fe0:	00001306 	br	17030 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   16fe4:	e0bffe17 	ldw	r2,-8(fp)
   16fe8:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   16fec:	e0bffe17 	ldw	r2,-8(fp)
   16ff0:	e0ffff17 	ldw	r3,-4(fp)
   16ff4:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   16ff8:	e0bffe17 	ldw	r2,-8(fp)
   16ffc:	00c00fc4 	movi	r3,63
   17000:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   17004:	e0bffe17 	ldw	r2,-8(fp)
   17008:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   1700c:	e0bffe17 	ldw	r2,-8(fp)
   17010:	10800b04 	addi	r2,r2,44
   17014:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   17018:	e0bfff17 	ldw	r2,-4(fp)
   1701c:	10800b04 	addi	r2,r2,44
   17020:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   17024:	e0bffd0b 	ldhu	r2,-12(fp)
   17028:	10800044 	addi	r2,r2,1
   1702c:	e0bffd0d 	sth	r2,-12(fp)
   17030:	e0bffd0b 	ldhu	r2,-12(fp)
   17034:	108004f0 	cmpltui	r2,r2,19
   17038:	103fea1e 	bne	r2,zero,16fe4 <__alt_mem_Flash_flash_data+0xf4016fe4>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1703c:	e0bffe17 	ldw	r2,-8(fp)
   17040:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   17044:	e0bffe17 	ldw	r2,-8(fp)
   17048:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   1704c:	e0bffe17 	ldw	r2,-8(fp)
   17050:	00c00fc4 	movi	r3,63
   17054:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   17058:	e0bffe17 	ldw	r2,-8(fp)
   1705c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   17060:	008000b4 	movhi	r2,2
   17064:	1091d704 	addi	r2,r2,18268
   17068:	00c000f4 	movhi	r3,3
   1706c:	18cbdc04 	addi	r3,r3,12144
   17070:	10c00015 	stw	r3,0(r2)
#endif
}
   17074:	e037883a 	mov	sp,fp
   17078:	dfc00117 	ldw	ra,4(sp)
   1707c:	df000017 	ldw	fp,0(sp)
   17080:	dec00204 	addi	sp,sp,8
   17084:	f800283a 	ret

00017088 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   17088:	defffa04 	addi	sp,sp,-24
   1708c:	dfc00515 	stw	ra,20(sp)
   17090:	df000415 	stw	fp,16(sp)
   17094:	df000404 	addi	fp,sp,16
   17098:	e13ffe15 	stw	r4,-8(fp)
   1709c:	2805883a 	mov	r2,r5
   170a0:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   170a4:	e0bffe17 	ldw	r2,-8(fp)
   170a8:	10800217 	ldw	r2,8(r2)
   170ac:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   170b0:	e0bffd17 	ldw	r2,-12(fp)
   170b4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   170b8:	e0bffd17 	ldw	r2,-12(fp)
   170bc:	e0ffff0b 	ldhu	r3,-4(fp)
   170c0:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   170c4:	e0bffd17 	ldw	r2,-12(fp)
   170c8:	10c00c03 	ldbu	r3,48(r2)
   170cc:	00bff7c4 	movi	r2,-33
   170d0:	1884703a 	and	r2,r3,r2
   170d4:	1007883a 	mov	r3,r2
   170d8:	e0bffd17 	ldw	r2,-12(fp)
   170dc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   170e0:	e0bffd17 	ldw	r2,-12(fp)
   170e4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   170e8:	e0bffd17 	ldw	r2,-12(fp)
   170ec:	10800c03 	ldbu	r2,48(r2)
   170f0:	10803fcc 	andi	r2,r2,255
   170f4:	10001f1e 	bne	r2,zero,17174 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   170f8:	e0bffd17 	ldw	r2,-12(fp)
   170fc:	10c00d83 	ldbu	r3,54(r2)
   17100:	008000b4 	movhi	r2,2
   17104:	1091d204 	addi	r2,r2,18248
   17108:	10800003 	ldbu	r2,0(r2)
   1710c:	1884b03a 	or	r2,r3,r2
   17110:	1007883a 	mov	r3,r2
   17114:	008000b4 	movhi	r2,2
   17118:	1091d204 	addi	r2,r2,18248
   1711c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   17120:	e0bffd17 	ldw	r2,-12(fp)
   17124:	10800d03 	ldbu	r2,52(r2)
   17128:	10c03fcc 	andi	r3,r2,255
   1712c:	e0bffd17 	ldw	r2,-12(fp)
   17130:	10800d03 	ldbu	r2,52(r2)
   17134:	11003fcc 	andi	r4,r2,255
   17138:	008000b4 	movhi	r2,2
   1713c:	1091d244 	addi	r2,r2,18249
   17140:	1105883a 	add	r2,r2,r4
   17144:	11000003 	ldbu	r4,0(r2)
   17148:	e0bffd17 	ldw	r2,-12(fp)
   1714c:	10800d43 	ldbu	r2,53(r2)
   17150:	2084b03a 	or	r2,r4,r2
   17154:	1009883a 	mov	r4,r2
   17158:	008000b4 	movhi	r2,2
   1715c:	1091d244 	addi	r2,r2,18249
   17160:	10c5883a 	add	r2,r2,r3
   17164:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   17168:	00800044 	movi	r2,1
   1716c:	e0bffc05 	stb	r2,-16(fp)
   17170:	00000106 	br	17178 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   17174:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   17178:	e13ffe17 	ldw	r4,-8(fp)
   1717c:	00171980 	call	17198 <OS_FlagUnlink>
    return (sched);
   17180:	e0bffc03 	ldbu	r2,-16(fp)
}
   17184:	e037883a 	mov	sp,fp
   17188:	dfc00117 	ldw	ra,4(sp)
   1718c:	df000017 	ldw	fp,0(sp)
   17190:	dec00204 	addi	sp,sp,8
   17194:	f800283a 	ret

00017198 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   17198:	defffa04 	addi	sp,sp,-24
   1719c:	df000515 	stw	fp,20(sp)
   171a0:	df000504 	addi	fp,sp,20
   171a4:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   171a8:	e0bfff17 	ldw	r2,-4(fp)
   171ac:	10800117 	ldw	r2,4(r2)
   171b0:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   171b4:	e0bfff17 	ldw	r2,-4(fp)
   171b8:	10800017 	ldw	r2,0(r2)
   171bc:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   171c0:	e0bffb17 	ldw	r2,-20(fp)
   171c4:	10000b1e 	bne	r2,zero,171f4 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   171c8:	e0bfff17 	ldw	r2,-4(fp)
   171cc:	10800317 	ldw	r2,12(r2)
   171d0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   171d4:	e0bffd17 	ldw	r2,-12(fp)
   171d8:	e0fffc17 	ldw	r3,-16(fp)
   171dc:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   171e0:	e0bffc17 	ldw	r2,-16(fp)
   171e4:	10000b26 	beq	r2,zero,17214 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   171e8:	e0bffc17 	ldw	r2,-16(fp)
   171ec:	10000115 	stw	zero,4(r2)
   171f0:	00000806 	br	17214 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   171f4:	e0bffb17 	ldw	r2,-20(fp)
   171f8:	e0fffc17 	ldw	r3,-16(fp)
   171fc:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   17200:	e0bffc17 	ldw	r2,-16(fp)
   17204:	10000326 	beq	r2,zero,17214 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   17208:	e0bffc17 	ldw	r2,-16(fp)
   1720c:	e0fffb17 	ldw	r3,-20(fp)
   17210:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   17214:	e0bfff17 	ldw	r2,-4(fp)
   17218:	10800217 	ldw	r2,8(r2)
   1721c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   17220:	e0bffe17 	ldw	r2,-8(fp)
   17224:	10000a15 	stw	zero,40(r2)
#endif
}
   17228:	e037883a 	mov	sp,fp
   1722c:	df000017 	ldw	fp,0(sp)
   17230:	dec00104 	addi	sp,sp,4
   17234:	f800283a 	ret

00017238 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
   17238:	defffa04 	addi	sp,sp,-24
   1723c:	df000515 	stw	fp,20(sp)
   17240:	df000504 	addi	fp,sp,20
   17244:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
   17248:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
   1724c:	e0bfff17 	ldw	r2,-4(fp)
   17250:	1000021e 	bne	r2,zero,1725c <OSMboxAccept+0x24>
        return ((void *)0);
   17254:	0005883a 	mov	r2,zero
   17258:	00001906 	br	172c0 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
   1725c:	e0bfff17 	ldw	r2,-4(fp)
   17260:	10800003 	ldbu	r2,0(r2)
   17264:	10803fcc 	andi	r2,r2,255
   17268:	10800060 	cmpeqi	r2,r2,1
   1726c:	1000021e 	bne	r2,zero,17278 <OSMboxAccept+0x40>
        return ((void *)0);
   17270:	0005883a 	mov	r2,zero
   17274:	00001206 	br	172c0 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17278:	0005303a 	rdctl	r2,status
   1727c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17280:	e0fffd17 	ldw	r3,-12(fp)
   17284:	00bfff84 	movi	r2,-2
   17288:	1884703a 	and	r2,r3,r2
   1728c:	1001703a 	wrctl	status,r2
  
  return context;
   17290:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17294:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
   17298:	e0bfff17 	ldw	r2,-4(fp)
   1729c:	10800117 	ldw	r2,4(r2)
   172a0:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
   172a4:	e0bfff17 	ldw	r2,-4(fp)
   172a8:	10000115 	stw	zero,4(r2)
   172ac:	e0bffb17 	ldw	r2,-20(fp)
   172b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   172b4:	e0bffe17 	ldw	r2,-8(fp)
   172b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
   172bc:	e0bffc17 	ldw	r2,-16(fp)
}
   172c0:	e037883a 	mov	sp,fp
   172c4:	df000017 	ldw	fp,0(sp)
   172c8:	dec00104 	addi	sp,sp,4
   172cc:	f800283a 	ret

000172d0 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
   172d0:	defff904 	addi	sp,sp,-28
   172d4:	dfc00615 	stw	ra,24(sp)
   172d8:	df000515 	stw	fp,20(sp)
   172dc:	df000504 	addi	fp,sp,20
   172e0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   172e4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   172e8:	008000b4 	movhi	r2,2
   172ec:	1091d404 	addi	r2,r2,18256
   172f0:	10800003 	ldbu	r2,0(r2)
   172f4:	10803fcc 	andi	r2,r2,255
   172f8:	10000226 	beq	r2,zero,17304 <OSMboxCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   172fc:	0005883a 	mov	r2,zero
   17300:	00002d06 	br	173b8 <OSMboxCreate+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17304:	0005303a 	rdctl	r2,status
   17308:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1730c:	e0fffd17 	ldw	r3,-12(fp)
   17310:	00bfff84 	movi	r2,-2
   17314:	1884703a 	and	r2,r3,r2
   17318:	1001703a 	wrctl	status,r2
  
  return context;
   1731c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17320:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   17324:	008000b4 	movhi	r2,2
   17328:	1091d304 	addi	r2,r2,18252
   1732c:	10800017 	ldw	r2,0(r2)
   17330:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   17334:	008000b4 	movhi	r2,2
   17338:	1091d304 	addi	r2,r2,18252
   1733c:	10800017 	ldw	r2,0(r2)
   17340:	10000726 	beq	r2,zero,17360 <OSMboxCreate+0x90>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   17344:	008000b4 	movhi	r2,2
   17348:	1091d304 	addi	r2,r2,18252
   1734c:	10800017 	ldw	r2,0(r2)
   17350:	10c00117 	ldw	r3,4(r2)
   17354:	008000b4 	movhi	r2,2
   17358:	1091d304 	addi	r2,r2,18252
   1735c:	10c00015 	stw	r3,0(r2)
   17360:	e0bffb17 	ldw	r2,-20(fp)
   17364:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17368:	e0bffe17 	ldw	r2,-8(fp)
   1736c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
   17370:	e0bffc17 	ldw	r2,-16(fp)
   17374:	10000f26 	beq	r2,zero,173b4 <OSMboxCreate+0xe4>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
   17378:	e0bffc17 	ldw	r2,-16(fp)
   1737c:	00c00044 	movi	r3,1
   17380:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
   17384:	e0bffc17 	ldw	r2,-16(fp)
   17388:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
   1738c:	e0bffc17 	ldw	r2,-16(fp)
   17390:	e0ffff17 	ldw	r3,-4(fp)
   17394:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
   17398:	e0bffc17 	ldw	r2,-16(fp)
   1739c:	00c00fc4 	movi	r3,63
   173a0:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   173a4:	e0bffc17 	ldw	r2,-16(fp)
   173a8:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
   173ac:	e13ffc17 	ldw	r4,-16(fp)
   173b0:	0014d400 	call	14d40 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
   173b4:	e0bffc17 	ldw	r2,-16(fp)
}
   173b8:	e037883a 	mov	sp,fp
   173bc:	dfc00117 	ldw	ra,4(sp)
   173c0:	df000017 	ldw	fp,0(sp)
   173c4:	dec00204 	addi	sp,sp,8
   173c8:	f800283a 	ret

000173cc <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   173cc:	defff304 	addi	sp,sp,-52
   173d0:	dfc00c15 	stw	ra,48(sp)
   173d4:	df000b15 	stw	fp,44(sp)
   173d8:	df000b04 	addi	fp,sp,44
   173dc:	e13ffd15 	stw	r4,-12(fp)
   173e0:	2805883a 	mov	r2,r5
   173e4:	e1bfff15 	stw	r6,-4(fp)
   173e8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   173ec:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   173f0:	e0bfff17 	ldw	r2,-4(fp)
   173f4:	1000021e 	bne	r2,zero,17400 <OSMboxDel+0x34>
        return (pevent);
   173f8:	e0bffd17 	ldw	r2,-12(fp)
   173fc:	00008806 	br	17620 <OSMboxDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17400:	e0bffd17 	ldw	r2,-12(fp)
   17404:	1000051e 	bne	r2,zero,1741c <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17408:	e0bfff17 	ldw	r2,-4(fp)
   1740c:	00c00104 	movi	r3,4
   17410:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17414:	e0bffd17 	ldw	r2,-12(fp)
   17418:	00008106 	br	17620 <OSMboxDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   1741c:	e0bffd17 	ldw	r2,-12(fp)
   17420:	10800003 	ldbu	r2,0(r2)
   17424:	10803fcc 	andi	r2,r2,255
   17428:	10800060 	cmpeqi	r2,r2,1
   1742c:	1000051e 	bne	r2,zero,17444 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   17430:	e0bfff17 	ldw	r2,-4(fp)
   17434:	00c00044 	movi	r3,1
   17438:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1743c:	e0bffd17 	ldw	r2,-12(fp)
   17440:	00007706 	br	17620 <OSMboxDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   17444:	008000b4 	movhi	r2,2
   17448:	1091d404 	addi	r2,r2,18256
   1744c:	10800003 	ldbu	r2,0(r2)
   17450:	10803fcc 	andi	r2,r2,255
   17454:	10000526 	beq	r2,zero,1746c <OSMboxDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   17458:	e0bfff17 	ldw	r2,-4(fp)
   1745c:	00c003c4 	movi	r3,15
   17460:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17464:	e0bffd17 	ldw	r2,-12(fp)
   17468:	00006d06 	br	17620 <OSMboxDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1746c:	0005303a 	rdctl	r2,status
   17470:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17474:	e0fff817 	ldw	r3,-32(fp)
   17478:	00bfff84 	movi	r2,-2
   1747c:	1884703a 	and	r2,r3,r2
   17480:	1001703a 	wrctl	status,r2
  
  return context;
   17484:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   17488:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
   1748c:	e0bffd17 	ldw	r2,-12(fp)
   17490:	10800283 	ldbu	r2,10(r2)
   17494:	10803fcc 	andi	r2,r2,255
   17498:	10000326 	beq	r2,zero,174a8 <OSMboxDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1749c:	00800044 	movi	r2,1
   174a0:	e0bff505 	stb	r2,-44(fp)
   174a4:	00000106 	br	174ac <OSMboxDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   174a8:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   174ac:	e0bffe03 	ldbu	r2,-8(fp)
   174b0:	10000326 	beq	r2,zero,174c0 <OSMboxDel+0xf4>
   174b4:	10800060 	cmpeqi	r2,r2,1
   174b8:	10002c1e 	bne	r2,zero,1756c <OSMboxDel+0x1a0>
   174bc:	00004d06 	br	175f4 <OSMboxDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
   174c0:	e0bff503 	ldbu	r2,-44(fp)
   174c4:	10001a1e 	bne	r2,zero,17530 <OSMboxDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   174c8:	e0bffd17 	ldw	r2,-12(fp)
   174cc:	00c00fc4 	movi	r3,63
   174d0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   174d4:	e0bffd17 	ldw	r2,-12(fp)
   174d8:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   174dc:	e0bffd17 	ldw	r2,-12(fp)
   174e0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   174e4:	008000b4 	movhi	r2,2
   174e8:	1091d304 	addi	r2,r2,18252
   174ec:	10c00017 	ldw	r3,0(r2)
   174f0:	e0bffd17 	ldw	r2,-12(fp)
   174f4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
   174f8:	e0bffd17 	ldw	r2,-12(fp)
   174fc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
   17500:	008000b4 	movhi	r2,2
   17504:	1091d304 	addi	r2,r2,18252
   17508:	e0fffd17 	ldw	r3,-12(fp)
   1750c:	10c00015 	stw	r3,0(r2)
   17510:	e0bff717 	ldw	r2,-36(fp)
   17514:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17518:	e0bff917 	ldw	r2,-28(fp)
   1751c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
   17520:	e0bfff17 	ldw	r2,-4(fp)
   17524:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
   17528:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
   1752c:	00003b06 	br	1761c <OSMboxDel+0x250>
   17530:	e0bff717 	ldw	r2,-36(fp)
   17534:	e0bffa15 	stw	r2,-24(fp)
   17538:	e0bffa17 	ldw	r2,-24(fp)
   1753c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
   17540:	e0bfff17 	ldw	r2,-4(fp)
   17544:	00c01244 	movi	r3,73
   17548:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
   1754c:	e0bffd17 	ldw	r2,-12(fp)
   17550:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   17554:	00003106 	br	1761c <OSMboxDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
   17558:	e13ffd17 	ldw	r4,-12(fp)
   1755c:	000b883a 	mov	r5,zero
   17560:	01800084 	movi	r6,2
   17564:	000f883a 	mov	r7,zero
   17568:	00147a00 	call	147a0 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
   1756c:	e0bffd17 	ldw	r2,-12(fp)
   17570:	10800283 	ldbu	r2,10(r2)
   17574:	10803fcc 	andi	r2,r2,255
   17578:	103ff71e 	bne	r2,zero,17558 <__alt_mem_Flash_flash_data+0xf4017558>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1757c:	e0bffd17 	ldw	r2,-12(fp)
   17580:	00c00fc4 	movi	r3,63
   17584:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   17588:	e0bffd17 	ldw	r2,-12(fp)
   1758c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   17590:	e0bffd17 	ldw	r2,-12(fp)
   17594:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   17598:	008000b4 	movhi	r2,2
   1759c:	1091d304 	addi	r2,r2,18252
   175a0:	10c00017 	ldw	r3,0(r2)
   175a4:	e0bffd17 	ldw	r2,-12(fp)
   175a8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   175ac:	e0bffd17 	ldw	r2,-12(fp)
   175b0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   175b4:	008000b4 	movhi	r2,2
   175b8:	1091d304 	addi	r2,r2,18252
   175bc:	e0fffd17 	ldw	r3,-12(fp)
   175c0:	10c00015 	stw	r3,0(r2)
   175c4:	e0bff717 	ldw	r2,-36(fp)
   175c8:	e0bffb15 	stw	r2,-20(fp)
   175cc:	e0bffb17 	ldw	r2,-20(fp)
   175d0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   175d4:	e0bff503 	ldbu	r2,-44(fp)
   175d8:	10800058 	cmpnei	r2,r2,1
   175dc:	1000011e 	bne	r2,zero,175e4 <OSMboxDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   175e0:	00151b80 	call	151b8 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
   175e4:	e0bfff17 	ldw	r2,-4(fp)
   175e8:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
   175ec:	e03ff615 	stw	zero,-40(fp)
             break;
   175f0:	00000a06 	br	1761c <OSMboxDel+0x250>
   175f4:	e0bff717 	ldw	r2,-36(fp)
   175f8:	e0bffc15 	stw	r2,-16(fp)
   175fc:	e0bffc17 	ldw	r2,-16(fp)
   17600:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
   17604:	e0bfff17 	ldw	r2,-4(fp)
   17608:	00c001c4 	movi	r3,7
   1760c:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
   17610:	e0bffd17 	ldw	r2,-12(fp)
   17614:	e0bff615 	stw	r2,-40(fp)
             break;
   17618:	0001883a 	nop
    }
    return (pevent_return);
   1761c:	e0bff617 	ldw	r2,-40(fp)
}
   17620:	e037883a 	mov	sp,fp
   17624:	dfc00117 	ldw	ra,4(sp)
   17628:	df000017 	ldw	fp,0(sp)
   1762c:	dec00204 	addi	sp,sp,8
   17630:	f800283a 	ret

00017634 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   17634:	defff404 	addi	sp,sp,-48
   17638:	dfc00b15 	stw	ra,44(sp)
   1763c:	df000a15 	stw	fp,40(sp)
   17640:	df000a04 	addi	fp,sp,40
   17644:	e13ffd15 	stw	r4,-12(fp)
   17648:	2805883a 	mov	r2,r5
   1764c:	e1bfff15 	stw	r6,-4(fp)
   17650:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17654:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   17658:	e0bfff17 	ldw	r2,-4(fp)
   1765c:	1000021e 	bne	r2,zero,17668 <OSMboxPend+0x34>
        return ((void *)0);
   17660:	0005883a 	mov	r2,zero
   17664:	00009706 	br	178c4 <OSMboxPend+0x290>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17668:	e0bffd17 	ldw	r2,-12(fp)
   1766c:	1000051e 	bne	r2,zero,17684 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17670:	e0bfff17 	ldw	r2,-4(fp)
   17674:	00c00104 	movi	r3,4
   17678:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1767c:	0005883a 	mov	r2,zero
   17680:	00009006 	br	178c4 <OSMboxPend+0x290>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   17684:	e0bffd17 	ldw	r2,-12(fp)
   17688:	10800003 	ldbu	r2,0(r2)
   1768c:	10803fcc 	andi	r2,r2,255
   17690:	10800060 	cmpeqi	r2,r2,1
   17694:	1000051e 	bne	r2,zero,176ac <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   17698:	e0bfff17 	ldw	r2,-4(fp)
   1769c:	00c00044 	movi	r3,1
   176a0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   176a4:	0005883a 	mov	r2,zero
   176a8:	00008606 	br	178c4 <OSMboxPend+0x290>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   176ac:	008000b4 	movhi	r2,2
   176b0:	1091d404 	addi	r2,r2,18256
   176b4:	10800003 	ldbu	r2,0(r2)
   176b8:	10803fcc 	andi	r2,r2,255
   176bc:	10000526 	beq	r2,zero,176d4 <OSMboxPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   176c0:	e0bfff17 	ldw	r2,-4(fp)
   176c4:	00c00084 	movi	r3,2
   176c8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   176cc:	0005883a 	mov	r2,zero
   176d0:	00007c06 	br	178c4 <OSMboxPend+0x290>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   176d4:	008000b4 	movhi	r2,2
   176d8:	1091c604 	addi	r2,r2,18200
   176dc:	10800003 	ldbu	r2,0(r2)
   176e0:	10803fcc 	andi	r2,r2,255
   176e4:	10000526 	beq	r2,zero,176fc <OSMboxPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   176e8:	e0bfff17 	ldw	r2,-4(fp)
   176ec:	00c00344 	movi	r3,13
   176f0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   176f4:	0005883a 	mov	r2,zero
   176f8:	00007206 	br	178c4 <OSMboxPend+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   176fc:	0005303a 	rdctl	r2,status
   17700:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17704:	e0fff817 	ldw	r3,-32(fp)
   17708:	00bfff84 	movi	r2,-2
   1770c:	1884703a 	and	r2,r3,r2
   17710:	1001703a 	wrctl	status,r2
  
  return context;
   17714:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   17718:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
   1771c:	e0bffd17 	ldw	r2,-12(fp)
   17720:	10800117 	ldw	r2,4(r2)
   17724:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
   17728:	e0bff617 	ldw	r2,-40(fp)
   1772c:	10000a26 	beq	r2,zero,17758 <OSMboxPend+0x124>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
   17730:	e0bffd17 	ldw	r2,-12(fp)
   17734:	10000115 	stw	zero,4(r2)
   17738:	e0bff717 	ldw	r2,-36(fp)
   1773c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17740:	e0bff917 	ldw	r2,-28(fp)
   17744:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   17748:	e0bfff17 	ldw	r2,-4(fp)
   1774c:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
   17750:	e0bff617 	ldw	r2,-40(fp)
   17754:	00005b06 	br	178c4 <OSMboxPend+0x290>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
   17758:	008000b4 	movhi	r2,2
   1775c:	1091d504 	addi	r2,r2,18260
   17760:	10c00017 	ldw	r3,0(r2)
   17764:	008000b4 	movhi	r2,2
   17768:	1091d504 	addi	r2,r2,18260
   1776c:	10800017 	ldw	r2,0(r2)
   17770:	10800c03 	ldbu	r2,48(r2)
   17774:	10800094 	ori	r2,r2,2
   17778:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1777c:	008000b4 	movhi	r2,2
   17780:	1091d504 	addi	r2,r2,18260
   17784:	10800017 	ldw	r2,0(r2)
   17788:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
   1778c:	008000b4 	movhi	r2,2
   17790:	1091d504 	addi	r2,r2,18260
   17794:	10800017 	ldw	r2,0(r2)
   17798:	e0fffe0b 	ldhu	r3,-8(fp)
   1779c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   177a0:	e13ffd17 	ldw	r4,-12(fp)
   177a4:	00149380 	call	14938 <OS_EventTaskWait>
   177a8:	e0bff717 	ldw	r2,-36(fp)
   177ac:	e0bffa15 	stw	r2,-24(fp)
   177b0:	e0bffa17 	ldw	r2,-24(fp)
   177b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
   177b8:	00151b80 	call	151b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   177bc:	0005303a 	rdctl	r2,status
   177c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   177c4:	e0fffb17 	ldw	r3,-20(fp)
   177c8:	00bfff84 	movi	r2,-2
   177cc:	1884703a 	and	r2,r3,r2
   177d0:	1001703a 	wrctl	status,r2
  
  return context;
   177d4:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   177d8:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   177dc:	008000b4 	movhi	r2,2
   177e0:	1091d504 	addi	r2,r2,18260
   177e4:	10800017 	ldw	r2,0(r2)
   177e8:	10800c43 	ldbu	r2,49(r2)
   177ec:	10803fcc 	andi	r2,r2,255
   177f0:	10000326 	beq	r2,zero,17800 <OSMboxPend+0x1cc>
   177f4:	108000a0 	cmpeqi	r2,r2,2
   177f8:	1000091e 	bne	r2,zero,17820 <OSMboxPend+0x1ec>
   177fc:	00000d06 	br	17834 <OSMboxPend+0x200>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
   17800:	008000b4 	movhi	r2,2
   17804:	1091d504 	addi	r2,r2,18260
   17808:	10800017 	ldw	r2,0(r2)
   1780c:	10800917 	ldw	r2,36(r2)
   17810:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
   17814:	e0bfff17 	ldw	r2,-4(fp)
   17818:	10000005 	stb	zero,0(r2)
             break;
   1781c:	00001006 	br	17860 <OSMboxPend+0x22c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   17820:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   17824:	e0bfff17 	ldw	r2,-4(fp)
   17828:	00c00384 	movi	r3,14
   1782c:	10c00005 	stb	r3,0(r2)
             break;
   17830:	00000b06 	br	17860 <OSMboxPend+0x22c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   17834:	008000b4 	movhi	r2,2
   17838:	1091d504 	addi	r2,r2,18260
   1783c:	10800017 	ldw	r2,0(r2)
   17840:	1009883a 	mov	r4,r2
   17844:	e17ffd17 	ldw	r5,-12(fp)
   17848:	0014b900 	call	14b90 <OS_EventTaskRemove>
             pmsg = (void *)0;
   1784c:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   17850:	e0bfff17 	ldw	r2,-4(fp)
   17854:	00c00284 	movi	r3,10
   17858:	10c00005 	stb	r3,0(r2)
             break;
   1785c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   17860:	008000b4 	movhi	r2,2
   17864:	1091d504 	addi	r2,r2,18260
   17868:	10800017 	ldw	r2,0(r2)
   1786c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   17870:	008000b4 	movhi	r2,2
   17874:	1091d504 	addi	r2,r2,18260
   17878:	10800017 	ldw	r2,0(r2)
   1787c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   17880:	008000b4 	movhi	r2,2
   17884:	1091d504 	addi	r2,r2,18260
   17888:	10800017 	ldw	r2,0(r2)
   1788c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   17890:	008000b4 	movhi	r2,2
   17894:	1091d504 	addi	r2,r2,18260
   17898:	10800017 	ldw	r2,0(r2)
   1789c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   178a0:	008000b4 	movhi	r2,2
   178a4:	1091d504 	addi	r2,r2,18260
   178a8:	10800017 	ldw	r2,0(r2)
   178ac:	10000915 	stw	zero,36(r2)
   178b0:	e0bff717 	ldw	r2,-36(fp)
   178b4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   178b8:	e0bffc17 	ldw	r2,-16(fp)
   178bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   178c0:	e0bff617 	ldw	r2,-40(fp)
}
   178c4:	e037883a 	mov	sp,fp
   178c8:	dfc00117 	ldw	ra,4(sp)
   178cc:	df000017 	ldw	fp,0(sp)
   178d0:	dec00204 	addi	sp,sp,8
   178d4:	f800283a 	ret

000178d8 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   178d8:	defff604 	addi	sp,sp,-40
   178dc:	dfc00915 	stw	ra,36(sp)
   178e0:	df000815 	stw	fp,32(sp)
   178e4:	df000804 	addi	fp,sp,32
   178e8:	e13ffd15 	stw	r4,-12(fp)
   178ec:	2805883a 	mov	r2,r5
   178f0:	e1bfff15 	stw	r6,-4(fp)
   178f4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   178f8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   178fc:	e0bfff17 	ldw	r2,-4(fp)
   17900:	1000021e 	bne	r2,zero,1790c <OSMboxPendAbort+0x34>
        return (0);
   17904:	0005883a 	mov	r2,zero
   17908:	00004906 	br	17a30 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1790c:	e0bffd17 	ldw	r2,-12(fp)
   17910:	1000051e 	bne	r2,zero,17928 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17914:	e0bfff17 	ldw	r2,-4(fp)
   17918:	00c00104 	movi	r3,4
   1791c:	10c00005 	stb	r3,0(r2)
        return (0);
   17920:	0005883a 	mov	r2,zero
   17924:	00004206 	br	17a30 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   17928:	e0bffd17 	ldw	r2,-12(fp)
   1792c:	10800003 	ldbu	r2,0(r2)
   17930:	10803fcc 	andi	r2,r2,255
   17934:	10800060 	cmpeqi	r2,r2,1
   17938:	1000051e 	bne	r2,zero,17950 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1793c:	e0bfff17 	ldw	r2,-4(fp)
   17940:	00c00044 	movi	r3,1
   17944:	10c00005 	stb	r3,0(r2)
        return (0);
   17948:	0005883a 	mov	r2,zero
   1794c:	00003806 	br	17a30 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17950:	0005303a 	rdctl	r2,status
   17954:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17958:	e0fffa17 	ldw	r3,-24(fp)
   1795c:	00bfff84 	movi	r2,-2
   17960:	1884703a 	and	r2,r3,r2
   17964:	1001703a 	wrctl	status,r2
  
  return context;
   17968:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1796c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
   17970:	e0bffd17 	ldw	r2,-12(fp)
   17974:	10800283 	ldbu	r2,10(r2)
   17978:	10803fcc 	andi	r2,r2,255
   1797c:	10002526 	beq	r2,zero,17a14 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
   17980:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   17984:	e0bffe03 	ldbu	r2,-8(fp)
   17988:	10800060 	cmpeqi	r2,r2,1
   1798c:	10000e26 	beq	r2,zero,179c8 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   17990:	00000806 	br	179b4 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   17994:	e13ffd17 	ldw	r4,-12(fp)
   17998:	000b883a 	mov	r5,zero
   1799c:	01800084 	movi	r6,2
   179a0:	01c00084 	movi	r7,2
   179a4:	00147a00 	call	147a0 <OS_EventTaskRdy>
                     nbr_tasks++;
   179a8:	e0bff803 	ldbu	r2,-32(fp)
   179ac:	10800044 	addi	r2,r2,1
   179b0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   179b4:	e0bffd17 	ldw	r2,-12(fp)
   179b8:	10800283 	ldbu	r2,10(r2)
   179bc:	10803fcc 	andi	r2,r2,255
   179c0:	103ff41e 	bne	r2,zero,17994 <__alt_mem_Flash_flash_data+0xf4017994>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   179c4:	00000906 	br	179ec <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   179c8:	e13ffd17 	ldw	r4,-12(fp)
   179cc:	000b883a 	mov	r5,zero
   179d0:	01800084 	movi	r6,2
   179d4:	01c00084 	movi	r7,2
   179d8:	00147a00 	call	147a0 <OS_EventTaskRdy>
                 nbr_tasks++;
   179dc:	e0bff803 	ldbu	r2,-32(fp)
   179e0:	10800044 	addi	r2,r2,1
   179e4:	e0bff805 	stb	r2,-32(fp)
                 break;
   179e8:	0001883a 	nop
   179ec:	e0bff917 	ldw	r2,-28(fp)
   179f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   179f4:	e0bffb17 	ldw	r2,-20(fp)
   179f8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   179fc:	00151b80 	call	151b8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   17a00:	e0bfff17 	ldw	r2,-4(fp)
   17a04:	00c00384 	movi	r3,14
   17a08:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   17a0c:	e0bff803 	ldbu	r2,-32(fp)
   17a10:	00000706 	br	17a30 <OSMboxPendAbort+0x158>
   17a14:	e0bff917 	ldw	r2,-28(fp)
   17a18:	e0bffc15 	stw	r2,-16(fp)
   17a1c:	e0bffc17 	ldw	r2,-16(fp)
   17a20:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17a24:	e0bfff17 	ldw	r2,-4(fp)
   17a28:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
   17a2c:	0005883a 	mov	r2,zero
}
   17a30:	e037883a 	mov	sp,fp
   17a34:	dfc00117 	ldw	ra,4(sp)
   17a38:	df000017 	ldw	fp,0(sp)
   17a3c:	dec00204 	addi	sp,sp,8
   17a40:	f800283a 	ret

00017a44 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
   17a44:	defff704 	addi	sp,sp,-36
   17a48:	dfc00815 	stw	ra,32(sp)
   17a4c:	df000715 	stw	fp,28(sp)
   17a50:	df000704 	addi	fp,sp,28
   17a54:	e13ffe15 	stw	r4,-8(fp)
   17a58:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17a5c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17a60:	e0bffe17 	ldw	r2,-8(fp)
   17a64:	1000021e 	bne	r2,zero,17a70 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   17a68:	00800104 	movi	r2,4
   17a6c:	00003406 	br	17b40 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   17a70:	e0bfff17 	ldw	r2,-4(fp)
   17a74:	1000021e 	bne	r2,zero,17a80 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
   17a78:	008000c4 	movi	r2,3
   17a7c:	00003006 	br	17b40 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   17a80:	e0bffe17 	ldw	r2,-8(fp)
   17a84:	10800003 	ldbu	r2,0(r2)
   17a88:	10803fcc 	andi	r2,r2,255
   17a8c:	10800060 	cmpeqi	r2,r2,1
   17a90:	1000021e 	bne	r2,zero,17a9c <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
   17a94:	00800044 	movi	r2,1
   17a98:	00002906 	br	17b40 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17a9c:	0005303a 	rdctl	r2,status
   17aa0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17aa4:	e0fffa17 	ldw	r3,-24(fp)
   17aa8:	00bfff84 	movi	r2,-2
   17aac:	1884703a 	and	r2,r3,r2
   17ab0:	1001703a 	wrctl	status,r2
  
  return context;
   17ab4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   17ab8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   17abc:	e0bffe17 	ldw	r2,-8(fp)
   17ac0:	10800283 	ldbu	r2,10(r2)
   17ac4:	10803fcc 	andi	r2,r2,255
   17ac8:	10000c26 	beq	r2,zero,17afc <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   17acc:	e13ffe17 	ldw	r4,-8(fp)
   17ad0:	e17fff17 	ldw	r5,-4(fp)
   17ad4:	01800084 	movi	r6,2
   17ad8:	000f883a 	mov	r7,zero
   17adc:	00147a00 	call	147a0 <OS_EventTaskRdy>
   17ae0:	e0bff917 	ldw	r2,-28(fp)
   17ae4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17ae8:	e0bffb17 	ldw	r2,-20(fp)
   17aec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   17af0:	00151b80 	call	151b8 <OS_Sched>
        return (OS_ERR_NONE);
   17af4:	0005883a 	mov	r2,zero
   17af8:	00001106 	br	17b40 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   17afc:	e0bffe17 	ldw	r2,-8(fp)
   17b00:	10800117 	ldw	r2,4(r2)
   17b04:	10000626 	beq	r2,zero,17b20 <OSMboxPost+0xdc>
   17b08:	e0bff917 	ldw	r2,-28(fp)
   17b0c:	e0bffc15 	stw	r2,-16(fp)
   17b10:	e0bffc17 	ldw	r2,-16(fp)
   17b14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   17b18:	00800504 	movi	r2,20
   17b1c:	00000806 	br	17b40 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   17b20:	e0bffe17 	ldw	r2,-8(fp)
   17b24:	e0ffff17 	ldw	r3,-4(fp)
   17b28:	10c00115 	stw	r3,4(r2)
   17b2c:	e0bff917 	ldw	r2,-28(fp)
   17b30:	e0bffd15 	stw	r2,-12(fp)
   17b34:	e0bffd17 	ldw	r2,-12(fp)
   17b38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17b3c:	0005883a 	mov	r2,zero
}
   17b40:	e037883a 	mov	sp,fp
   17b44:	dfc00117 	ldw	ra,4(sp)
   17b48:	df000017 	ldw	fp,0(sp)
   17b4c:	dec00204 	addi	sp,sp,8
   17b50:	f800283a 	ret

00017b54 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   17b54:	defff604 	addi	sp,sp,-40
   17b58:	dfc00915 	stw	ra,36(sp)
   17b5c:	df000815 	stw	fp,32(sp)
   17b60:	df000804 	addi	fp,sp,32
   17b64:	e13ffd15 	stw	r4,-12(fp)
   17b68:	e17ffe15 	stw	r5,-8(fp)
   17b6c:	3005883a 	mov	r2,r6
   17b70:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17b74:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17b78:	e0bffd17 	ldw	r2,-12(fp)
   17b7c:	1000021e 	bne	r2,zero,17b88 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   17b80:	00800104 	movi	r2,4
   17b84:	00004506 	br	17c9c <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   17b88:	e0bffe17 	ldw	r2,-8(fp)
   17b8c:	1000021e 	bne	r2,zero,17b98 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
   17b90:	008000c4 	movi	r2,3
   17b94:	00004106 	br	17c9c <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   17b98:	e0bffd17 	ldw	r2,-12(fp)
   17b9c:	10800003 	ldbu	r2,0(r2)
   17ba0:	10803fcc 	andi	r2,r2,255
   17ba4:	10800060 	cmpeqi	r2,r2,1
   17ba8:	1000021e 	bne	r2,zero,17bb4 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
   17bac:	00800044 	movi	r2,1
   17bb0:	00003a06 	br	17c9c <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17bb4:	0005303a 	rdctl	r2,status
   17bb8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17bbc:	e0fff917 	ldw	r3,-28(fp)
   17bc0:	00bfff84 	movi	r2,-2
   17bc4:	1884703a 	and	r2,r3,r2
   17bc8:	1001703a 	wrctl	status,r2
  
  return context;
   17bcc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   17bd0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   17bd4:	e0bffd17 	ldw	r2,-12(fp)
   17bd8:	10800283 	ldbu	r2,10(r2)
   17bdc:	10803fcc 	andi	r2,r2,255
   17be0:	10001d26 	beq	r2,zero,17c58 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   17be4:	e0bfff03 	ldbu	r2,-4(fp)
   17be8:	1080004c 	andi	r2,r2,1
   17bec:	10000b26 	beq	r2,zero,17c1c <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   17bf0:	00000506 	br	17c08 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   17bf4:	e13ffd17 	ldw	r4,-12(fp)
   17bf8:	e17ffe17 	ldw	r5,-8(fp)
   17bfc:	01800084 	movi	r6,2
   17c00:	000f883a 	mov	r7,zero
   17c04:	00147a00 	call	147a0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   17c08:	e0bffd17 	ldw	r2,-12(fp)
   17c0c:	10800283 	ldbu	r2,10(r2)
   17c10:	10803fcc 	andi	r2,r2,255
   17c14:	103ff71e 	bne	r2,zero,17bf4 <__alt_mem_Flash_flash_data+0xf4017bf4>
   17c18:	00000506 	br	17c30 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   17c1c:	e13ffd17 	ldw	r4,-12(fp)
   17c20:	e17ffe17 	ldw	r5,-8(fp)
   17c24:	01800084 	movi	r6,2
   17c28:	000f883a 	mov	r7,zero
   17c2c:	00147a00 	call	147a0 <OS_EventTaskRdy>
   17c30:	e0bff817 	ldw	r2,-32(fp)
   17c34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17c38:	e0bffa17 	ldw	r2,-24(fp)
   17c3c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   17c40:	e0bfff03 	ldbu	r2,-4(fp)
   17c44:	1080010c 	andi	r2,r2,4
   17c48:	1000011e 	bne	r2,zero,17c50 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
   17c4c:	00151b80 	call	151b8 <OS_Sched>
        }
        return (OS_ERR_NONE);
   17c50:	0005883a 	mov	r2,zero
   17c54:	00001106 	br	17c9c <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   17c58:	e0bffd17 	ldw	r2,-12(fp)
   17c5c:	10800117 	ldw	r2,4(r2)
   17c60:	10000626 	beq	r2,zero,17c7c <OSMboxPostOpt+0x128>
   17c64:	e0bff817 	ldw	r2,-32(fp)
   17c68:	e0bffb15 	stw	r2,-20(fp)
   17c6c:	e0bffb17 	ldw	r2,-20(fp)
   17c70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   17c74:	00800504 	movi	r2,20
   17c78:	00000806 	br	17c9c <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   17c7c:	e0bffd17 	ldw	r2,-12(fp)
   17c80:	e0fffe17 	ldw	r3,-8(fp)
   17c84:	10c00115 	stw	r3,4(r2)
   17c88:	e0bff817 	ldw	r2,-32(fp)
   17c8c:	e0bffc15 	stw	r2,-16(fp)
   17c90:	e0bffc17 	ldw	r2,-16(fp)
   17c94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17c98:	0005883a 	mov	r2,zero
}
   17c9c:	e037883a 	mov	sp,fp
   17ca0:	dfc00117 	ldw	ra,4(sp)
   17ca4:	df000017 	ldw	fp,0(sp)
   17ca8:	dec00204 	addi	sp,sp,8
   17cac:	f800283a 	ret

00017cb0 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
   17cb0:	defff704 	addi	sp,sp,-36
   17cb4:	df000815 	stw	fp,32(sp)
   17cb8:	df000804 	addi	fp,sp,32
   17cbc:	e13ffe15 	stw	r4,-8(fp)
   17cc0:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17cc4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17cc8:	e0bffe17 	ldw	r2,-8(fp)
   17ccc:	1000021e 	bne	r2,zero,17cd8 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   17cd0:	00800104 	movi	r2,4
   17cd4:	00003606 	br	17db0 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
   17cd8:	e0bfff17 	ldw	r2,-4(fp)
   17cdc:	1000021e 	bne	r2,zero,17ce8 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   17ce0:	00800244 	movi	r2,9
   17ce4:	00003206 	br	17db0 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   17ce8:	e0bffe17 	ldw	r2,-8(fp)
   17cec:	10800003 	ldbu	r2,0(r2)
   17cf0:	10803fcc 	andi	r2,r2,255
   17cf4:	10800060 	cmpeqi	r2,r2,1
   17cf8:	1000021e 	bne	r2,zero,17d04 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   17cfc:	00800044 	movi	r2,1
   17d00:	00002b06 	br	17db0 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17d04:	0005303a 	rdctl	r2,status
   17d08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17d0c:	e0fffc17 	ldw	r3,-16(fp)
   17d10:	00bfff84 	movi	r2,-2
   17d14:	1884703a 	and	r2,r3,r2
   17d18:	1001703a 	wrctl	status,r2
  
  return context;
   17d1c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17d20:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
   17d24:	e0bffe17 	ldw	r2,-8(fp)
   17d28:	10c00283 	ldbu	r3,10(r2)
   17d2c:	e0bfff17 	ldw	r2,-4(fp)
   17d30:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
   17d34:	e0bffe17 	ldw	r2,-8(fp)
   17d38:	108002c4 	addi	r2,r2,11
   17d3c:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
   17d40:	e0bfff17 	ldw	r2,-4(fp)
   17d44:	10800104 	addi	r2,r2,4
   17d48:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   17d4c:	e03ff805 	stb	zero,-32(fp)
   17d50:	00000b06 	br	17d80 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
   17d54:	e0bffa17 	ldw	r2,-24(fp)
   17d58:	10c00044 	addi	r3,r2,1
   17d5c:	e0fffa15 	stw	r3,-24(fp)
   17d60:	e0fff917 	ldw	r3,-28(fp)
   17d64:	19000044 	addi	r4,r3,1
   17d68:	e13ff915 	stw	r4,-28(fp)
   17d6c:	18c00003 	ldbu	r3,0(r3)
   17d70:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   17d74:	e0bff803 	ldbu	r2,-32(fp)
   17d78:	10800044 	addi	r2,r2,1
   17d7c:	e0bff805 	stb	r2,-32(fp)
   17d80:	e0bff803 	ldbu	r2,-32(fp)
   17d84:	108000f0 	cmpltui	r2,r2,3
   17d88:	103ff21e 	bne	r2,zero,17d54 <__alt_mem_Flash_flash_data+0xf4017d54>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
   17d8c:	e0bffe17 	ldw	r2,-8(fp)
   17d90:	10c00117 	ldw	r3,4(r2)
   17d94:	e0bfff17 	ldw	r2,-4(fp)
   17d98:	10c00015 	stw	r3,0(r2)
   17d9c:	e0bffb17 	ldw	r2,-20(fp)
   17da0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17da4:	e0bffd17 	ldw	r2,-12(fp)
   17da8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17dac:	0005883a 	mov	r2,zero
}
   17db0:	e037883a 	mov	sp,fp
   17db4:	df000017 	ldw	fp,0(sp)
   17db8:	dec00104 	addi	sp,sp,4
   17dbc:	f800283a 	ret

00017dc0 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   17dc0:	defff404 	addi	sp,sp,-48
   17dc4:	df000b15 	stw	fp,44(sp)
   17dc8:	df000b04 	addi	fp,sp,44
   17dcc:	e13ffc15 	stw	r4,-16(fp)
   17dd0:	e17ffd15 	stw	r5,-12(fp)
   17dd4:	e1bffe15 	stw	r6,-8(fp)
   17dd8:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17ddc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   17de0:	e0bfff17 	ldw	r2,-4(fp)
   17de4:	1000021e 	bne	r2,zero,17df0 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   17de8:	0005883a 	mov	r2,zero
   17dec:	00006d06 	br	17fa4 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   17df0:	e0bffc17 	ldw	r2,-16(fp)
   17df4:	1000051e 	bne	r2,zero,17e0c <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   17df8:	e0bfff17 	ldw	r2,-4(fp)
   17dfc:	00c01884 	movi	r3,98
   17e00:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   17e04:	0005883a 	mov	r2,zero
   17e08:	00006606 	br	17fa4 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   17e0c:	e0bffc17 	ldw	r2,-16(fp)
   17e10:	108000cc 	andi	r2,r2,3
   17e14:	10000526 	beq	r2,zero,17e2c <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   17e18:	e0bfff17 	ldw	r2,-4(fp)
   17e1c:	00c01884 	movi	r3,98
   17e20:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   17e24:	0005883a 	mov	r2,zero
   17e28:	00005e06 	br	17fa4 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   17e2c:	e0bffd17 	ldw	r2,-12(fp)
   17e30:	108000a8 	cmpgeui	r2,r2,2
   17e34:	1000051e 	bne	r2,zero,17e4c <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   17e38:	e0bfff17 	ldw	r2,-4(fp)
   17e3c:	00c016c4 	movi	r3,91
   17e40:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   17e44:	0005883a 	mov	r2,zero
   17e48:	00005606 	br	17fa4 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   17e4c:	e0bffe17 	ldw	r2,-8(fp)
   17e50:	10800128 	cmpgeui	r2,r2,4
   17e54:	1000051e 	bne	r2,zero,17e6c <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   17e58:	e0bfff17 	ldw	r2,-4(fp)
   17e5c:	00c01704 	movi	r3,92
   17e60:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   17e64:	0005883a 	mov	r2,zero
   17e68:	00004e06 	br	17fa4 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17e6c:	0005303a 	rdctl	r2,status
   17e70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17e74:	e0fffa17 	ldw	r3,-24(fp)
   17e78:	00bfff84 	movi	r2,-2
   17e7c:	1884703a 	and	r2,r3,r2
   17e80:	1001703a 	wrctl	status,r2
  
  return context;
   17e84:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17e88:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   17e8c:	008000b4 	movhi	r2,2
   17e90:	1091cf04 	addi	r2,r2,18236
   17e94:	10800017 	ldw	r2,0(r2)
   17e98:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   17e9c:	008000b4 	movhi	r2,2
   17ea0:	1091cf04 	addi	r2,r2,18236
   17ea4:	10800017 	ldw	r2,0(r2)
   17ea8:	10000726 	beq	r2,zero,17ec8 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   17eac:	008000b4 	movhi	r2,2
   17eb0:	1091cf04 	addi	r2,r2,18236
   17eb4:	10800017 	ldw	r2,0(r2)
   17eb8:	10c00117 	ldw	r3,4(r2)
   17ebc:	008000b4 	movhi	r2,2
   17ec0:	1091cf04 	addi	r2,r2,18236
   17ec4:	10c00015 	stw	r3,0(r2)
   17ec8:	e0bff817 	ldw	r2,-32(fp)
   17ecc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17ed0:	e0bffb17 	ldw	r2,-20(fp)
   17ed4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   17ed8:	e0bff917 	ldw	r2,-28(fp)
   17edc:	1000051e 	bne	r2,zero,17ef4 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   17ee0:	e0bfff17 	ldw	r2,-4(fp)
   17ee4:	00c01684 	movi	r3,90
   17ee8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   17eec:	0005883a 	mov	r2,zero
   17ef0:	00002c06 	br	17fa4 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   17ef4:	e0bffc17 	ldw	r2,-16(fp)
   17ef8:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   17efc:	e0fffc17 	ldw	r3,-16(fp)
   17f00:	e0bffe17 	ldw	r2,-8(fp)
   17f04:	1885883a 	add	r2,r3,r2
   17f08:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   17f0c:	e03ff715 	stw	zero,-36(fp)
   17f10:	00000c06 	br	17f44 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   17f14:	e0bff617 	ldw	r2,-40(fp)
   17f18:	e0fff517 	ldw	r3,-44(fp)
   17f1c:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   17f20:	e0bff517 	ldw	r2,-44(fp)
   17f24:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   17f28:	e0fff517 	ldw	r3,-44(fp)
   17f2c:	e0bffe17 	ldw	r2,-8(fp)
   17f30:	1885883a 	add	r2,r3,r2
   17f34:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   17f38:	e0bff717 	ldw	r2,-36(fp)
   17f3c:	10800044 	addi	r2,r2,1
   17f40:	e0bff715 	stw	r2,-36(fp)
   17f44:	e0bffd17 	ldw	r2,-12(fp)
   17f48:	10bfffc4 	addi	r2,r2,-1
   17f4c:	e0fff717 	ldw	r3,-36(fp)
   17f50:	18bff036 	bltu	r3,r2,17f14 <__alt_mem_Flash_flash_data+0xf4017f14>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   17f54:	e0bff617 	ldw	r2,-40(fp)
   17f58:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   17f5c:	e0bff917 	ldw	r2,-28(fp)
   17f60:	e0fffc17 	ldw	r3,-16(fp)
   17f64:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   17f68:	e0bff917 	ldw	r2,-28(fp)
   17f6c:	e0fffc17 	ldw	r3,-16(fp)
   17f70:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   17f74:	e0bff917 	ldw	r2,-28(fp)
   17f78:	e0fffd17 	ldw	r3,-12(fp)
   17f7c:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   17f80:	e0bff917 	ldw	r2,-28(fp)
   17f84:	e0fffd17 	ldw	r3,-12(fp)
   17f88:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   17f8c:	e0bff917 	ldw	r2,-28(fp)
   17f90:	e0fffe17 	ldw	r3,-8(fp)
   17f94:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   17f98:	e0bfff17 	ldw	r2,-4(fp)
   17f9c:	10000005 	stb	zero,0(r2)
    return (pmem);
   17fa0:	e0bff917 	ldw	r2,-28(fp)
}
   17fa4:	e037883a 	mov	sp,fp
   17fa8:	df000017 	ldw	fp,0(sp)
   17fac:	dec00104 	addi	sp,sp,4
   17fb0:	f800283a 	ret

00017fb4 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   17fb4:	defff804 	addi	sp,sp,-32
   17fb8:	df000715 	stw	fp,28(sp)
   17fbc:	df000704 	addi	fp,sp,28
   17fc0:	e13ffe15 	stw	r4,-8(fp)
   17fc4:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17fc8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   17fcc:	e0bfff17 	ldw	r2,-4(fp)
   17fd0:	1000021e 	bne	r2,zero,17fdc <OSMemGet+0x28>
        return ((void *)0);
   17fd4:	0005883a 	mov	r2,zero
   17fd8:	00002e06 	br	18094 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   17fdc:	e0bffe17 	ldw	r2,-8(fp)
   17fe0:	1000051e 	bne	r2,zero,17ff8 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   17fe4:	e0bfff17 	ldw	r2,-4(fp)
   17fe8:	00c01804 	movi	r3,96
   17fec:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17ff0:	0005883a 	mov	r2,zero
   17ff4:	00002706 	br	18094 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17ff8:	0005303a 	rdctl	r2,status
   17ffc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18000:	e0fffb17 	ldw	r3,-20(fp)
   18004:	00bfff84 	movi	r2,-2
   18008:	1884703a 	and	r2,r3,r2
   1800c:	1001703a 	wrctl	status,r2
  
  return context;
   18010:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18014:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   18018:	e0bffe17 	ldw	r2,-8(fp)
   1801c:	10800417 	ldw	r2,16(r2)
   18020:	10001426 	beq	r2,zero,18074 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   18024:	e0bffe17 	ldw	r2,-8(fp)
   18028:	10800117 	ldw	r2,4(r2)
   1802c:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   18030:	e0bffa17 	ldw	r2,-24(fp)
   18034:	10c00017 	ldw	r3,0(r2)
   18038:	e0bffe17 	ldw	r2,-8(fp)
   1803c:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   18040:	e0bffe17 	ldw	r2,-8(fp)
   18044:	10800417 	ldw	r2,16(r2)
   18048:	10ffffc4 	addi	r3,r2,-1
   1804c:	e0bffe17 	ldw	r2,-8(fp)
   18050:	10c00415 	stw	r3,16(r2)
   18054:	e0bff917 	ldw	r2,-28(fp)
   18058:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1805c:	e0bffc17 	ldw	r2,-16(fp)
   18060:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   18064:	e0bfff17 	ldw	r2,-4(fp)
   18068:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   1806c:	e0bffa17 	ldw	r2,-24(fp)
   18070:	00000806 	br	18094 <OSMemGet+0xe0>
   18074:	e0bff917 	ldw	r2,-28(fp)
   18078:	e0bffd15 	stw	r2,-12(fp)
   1807c:	e0bffd17 	ldw	r2,-12(fp)
   18080:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   18084:	e0bfff17 	ldw	r2,-4(fp)
   18088:	00c01744 	movi	r3,93
   1808c:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   18090:	0005883a 	mov	r2,zero
}
   18094:	e037883a 	mov	sp,fp
   18098:	df000017 	ldw	fp,0(sp)
   1809c:	dec00104 	addi	sp,sp,4
   180a0:	f800283a 	ret

000180a4 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   180a4:	defff704 	addi	sp,sp,-36
   180a8:	dfc00815 	stw	ra,32(sp)
   180ac:	df000715 	stw	fp,28(sp)
   180b0:	df000704 	addi	fp,sp,28
   180b4:	e13ffd15 	stw	r4,-12(fp)
   180b8:	e17ffe15 	stw	r5,-8(fp)
   180bc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   180c0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   180c4:	e0bfff17 	ldw	r2,-4(fp)
   180c8:	1000021e 	bne	r2,zero,180d4 <OSMemNameGet+0x30>
        return (0);
   180cc:	0005883a 	mov	r2,zero
   180d0:	00002d06 	br	18188 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   180d4:	e0bffd17 	ldw	r2,-12(fp)
   180d8:	1000051e 	bne	r2,zero,180f0 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   180dc:	e0bfff17 	ldw	r2,-4(fp)
   180e0:	00c01804 	movi	r3,96
   180e4:	10c00005 	stb	r3,0(r2)
        return (0);
   180e8:	0005883a 	mov	r2,zero
   180ec:	00002606 	br	18188 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   180f0:	e0bffe17 	ldw	r2,-8(fp)
   180f4:	1000051e 	bne	r2,zero,1810c <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   180f8:	e0bfff17 	ldw	r2,-4(fp)
   180fc:	00c00304 	movi	r3,12
   18100:	10c00005 	stb	r3,0(r2)
        return (0);
   18104:	0005883a 	mov	r2,zero
   18108:	00001f06 	br	18188 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1810c:	008000b4 	movhi	r2,2
   18110:	1091d404 	addi	r2,r2,18256
   18114:	10800003 	ldbu	r2,0(r2)
   18118:	10803fcc 	andi	r2,r2,255
   1811c:	10000526 	beq	r2,zero,18134 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   18120:	e0bfff17 	ldw	r2,-4(fp)
   18124:	00c00444 	movi	r3,17
   18128:	10c00005 	stb	r3,0(r2)
        return (0);
   1812c:	0005883a 	mov	r2,zero
   18130:	00001506 	br	18188 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18134:	0005303a 	rdctl	r2,status
   18138:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1813c:	e0fffb17 	ldw	r3,-20(fp)
   18140:	00bfff84 	movi	r2,-2
   18144:	1884703a 	and	r2,r3,r2
   18148:	1001703a 	wrctl	status,r2
  
  return context;
   1814c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   18150:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   18154:	e0bffd17 	ldw	r2,-12(fp)
   18158:	10800504 	addi	r2,r2,20
   1815c:	e13ffe17 	ldw	r4,-8(fp)
   18160:	100b883a 	mov	r5,r2
   18164:	00152f40 	call	152f4 <OS_StrCopy>
   18168:	e0bffa05 	stb	r2,-24(fp)
   1816c:	e0bff917 	ldw	r2,-28(fp)
   18170:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18174:	e0bffc17 	ldw	r2,-16(fp)
   18178:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1817c:	e0bfff17 	ldw	r2,-4(fp)
   18180:	10000005 	stb	zero,0(r2)
    return (len);
   18184:	e0bffa03 	ldbu	r2,-24(fp)
}
   18188:	e037883a 	mov	sp,fp
   1818c:	dfc00117 	ldw	ra,4(sp)
   18190:	df000017 	ldw	fp,0(sp)
   18194:	dec00204 	addi	sp,sp,8
   18198:	f800283a 	ret

0001819c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1819c:	defff604 	addi	sp,sp,-40
   181a0:	dfc00915 	stw	ra,36(sp)
   181a4:	df000815 	stw	fp,32(sp)
   181a8:	df000804 	addi	fp,sp,32
   181ac:	e13ffd15 	stw	r4,-12(fp)
   181b0:	e17ffe15 	stw	r5,-8(fp)
   181b4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   181b8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   181bc:	e0bfff17 	ldw	r2,-4(fp)
   181c0:	1000011e 	bne	r2,zero,181c8 <OSMemNameSet+0x2c>
        return;
   181c4:	00003606 	br	182a0 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   181c8:	e0bffd17 	ldw	r2,-12(fp)
   181cc:	1000041e 	bne	r2,zero,181e0 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   181d0:	e0bfff17 	ldw	r2,-4(fp)
   181d4:	00c01804 	movi	r3,96
   181d8:	10c00005 	stb	r3,0(r2)
        return;
   181dc:	00003006 	br	182a0 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   181e0:	e0bffe17 	ldw	r2,-8(fp)
   181e4:	1000041e 	bne	r2,zero,181f8 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   181e8:	e0bfff17 	ldw	r2,-4(fp)
   181ec:	00c00304 	movi	r3,12
   181f0:	10c00005 	stb	r3,0(r2)
        return;
   181f4:	00002a06 	br	182a0 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   181f8:	008000b4 	movhi	r2,2
   181fc:	1091d404 	addi	r2,r2,18256
   18200:	10800003 	ldbu	r2,0(r2)
   18204:	10803fcc 	andi	r2,r2,255
   18208:	10000426 	beq	r2,zero,1821c <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   1820c:	e0bfff17 	ldw	r2,-4(fp)
   18210:	00c00484 	movi	r3,18
   18214:	10c00005 	stb	r3,0(r2)
        return;
   18218:	00002106 	br	182a0 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1821c:	0005303a 	rdctl	r2,status
   18220:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18224:	e0fffa17 	ldw	r3,-24(fp)
   18228:	00bfff84 	movi	r2,-2
   1822c:	1884703a 	and	r2,r3,r2
   18230:	1001703a 	wrctl	status,r2
  
  return context;
   18234:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   18238:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   1823c:	e13ffe17 	ldw	r4,-8(fp)
   18240:	00153680 	call	15368 <OS_StrLen>
   18244:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   18248:	e0bff903 	ldbu	r2,-28(fp)
   1824c:	10800830 	cmpltui	r2,r2,32
   18250:	1000081e 	bne	r2,zero,18274 <OSMemNameSet+0xd8>
   18254:	e0bff817 	ldw	r2,-32(fp)
   18258:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1825c:	e0bffb17 	ldw	r2,-20(fp)
   18260:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   18264:	e0bfff17 	ldw	r2,-4(fp)
   18268:	00c018c4 	movi	r3,99
   1826c:	10c00005 	stb	r3,0(r2)
        return;
   18270:	00000b06 	br	182a0 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   18274:	e0bffd17 	ldw	r2,-12(fp)
   18278:	10800504 	addi	r2,r2,20
   1827c:	1009883a 	mov	r4,r2
   18280:	e17ffe17 	ldw	r5,-8(fp)
   18284:	00152f40 	call	152f4 <OS_StrCopy>
   18288:	e0bff817 	ldw	r2,-32(fp)
   1828c:	e0bffc15 	stw	r2,-16(fp)
   18290:	e0bffc17 	ldw	r2,-16(fp)
   18294:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   18298:	e0bfff17 	ldw	r2,-4(fp)
   1829c:	10000005 	stb	zero,0(r2)
}
   182a0:	e037883a 	mov	sp,fp
   182a4:	dfc00117 	ldw	ra,4(sp)
   182a8:	df000017 	ldw	fp,0(sp)
   182ac:	dec00204 	addi	sp,sp,8
   182b0:	f800283a 	ret

000182b4 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   182b4:	defff904 	addi	sp,sp,-28
   182b8:	df000615 	stw	fp,24(sp)
   182bc:	df000604 	addi	fp,sp,24
   182c0:	e13ffe15 	stw	r4,-8(fp)
   182c4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   182c8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   182cc:	e0bffe17 	ldw	r2,-8(fp)
   182d0:	1000021e 	bne	r2,zero,182dc <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   182d4:	00801804 	movi	r2,96
   182d8:	00002806 	br	1837c <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   182dc:	e0bfff17 	ldw	r2,-4(fp)
   182e0:	1000021e 	bne	r2,zero,182ec <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   182e4:	008017c4 	movi	r2,95
   182e8:	00002406 	br	1837c <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   182ec:	0005303a 	rdctl	r2,status
   182f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   182f4:	e0fffb17 	ldw	r3,-20(fp)
   182f8:	00bfff84 	movi	r2,-2
   182fc:	1884703a 	and	r2,r3,r2
   18300:	1001703a 	wrctl	status,r2
  
  return context;
   18304:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18308:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   1830c:	e0bffe17 	ldw	r2,-8(fp)
   18310:	10c00417 	ldw	r3,16(r2)
   18314:	e0bffe17 	ldw	r2,-8(fp)
   18318:	10800317 	ldw	r2,12(r2)
   1831c:	18800636 	bltu	r3,r2,18338 <OSMemPut+0x84>
   18320:	e0bffa17 	ldw	r2,-24(fp)
   18324:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18328:	e0bffc17 	ldw	r2,-16(fp)
   1832c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   18330:	00801784 	movi	r2,94
   18334:	00001106 	br	1837c <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   18338:	e0bffe17 	ldw	r2,-8(fp)
   1833c:	10c00117 	ldw	r3,4(r2)
   18340:	e0bfff17 	ldw	r2,-4(fp)
   18344:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   18348:	e0bffe17 	ldw	r2,-8(fp)
   1834c:	e0ffff17 	ldw	r3,-4(fp)
   18350:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   18354:	e0bffe17 	ldw	r2,-8(fp)
   18358:	10800417 	ldw	r2,16(r2)
   1835c:	10c00044 	addi	r3,r2,1
   18360:	e0bffe17 	ldw	r2,-8(fp)
   18364:	10c00415 	stw	r3,16(r2)
   18368:	e0bffa17 	ldw	r2,-24(fp)
   1836c:	e0bffd15 	stw	r2,-12(fp)
   18370:	e0bffd17 	ldw	r2,-12(fp)
   18374:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   18378:	0005883a 	mov	r2,zero
}
   1837c:	e037883a 	mov	sp,fp
   18380:	df000017 	ldw	fp,0(sp)
   18384:	dec00104 	addi	sp,sp,4
   18388:	f800283a 	ret

0001838c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   1838c:	defffa04 	addi	sp,sp,-24
   18390:	df000515 	stw	fp,20(sp)
   18394:	df000504 	addi	fp,sp,20
   18398:	e13ffe15 	stw	r4,-8(fp)
   1839c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   183a0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   183a4:	e0bffe17 	ldw	r2,-8(fp)
   183a8:	1000021e 	bne	r2,zero,183b4 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   183ac:	00801804 	movi	r2,96
   183b0:	00002c06 	br	18464 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   183b4:	e0bfff17 	ldw	r2,-4(fp)
   183b8:	1000021e 	bne	r2,zero,183c4 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   183bc:	00801844 	movi	r2,97
   183c0:	00002806 	br	18464 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   183c4:	0005303a 	rdctl	r2,status
   183c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   183cc:	e0fffc17 	ldw	r3,-16(fp)
   183d0:	00bfff84 	movi	r2,-2
   183d4:	1884703a 	and	r2,r3,r2
   183d8:	1001703a 	wrctl	status,r2
  
  return context;
   183dc:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   183e0:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   183e4:	e0bffe17 	ldw	r2,-8(fp)
   183e8:	10c00017 	ldw	r3,0(r2)
   183ec:	e0bfff17 	ldw	r2,-4(fp)
   183f0:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   183f4:	e0bffe17 	ldw	r2,-8(fp)
   183f8:	10c00117 	ldw	r3,4(r2)
   183fc:	e0bfff17 	ldw	r2,-4(fp)
   18400:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   18404:	e0bffe17 	ldw	r2,-8(fp)
   18408:	10c00217 	ldw	r3,8(r2)
   1840c:	e0bfff17 	ldw	r2,-4(fp)
   18410:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   18414:	e0bffe17 	ldw	r2,-8(fp)
   18418:	10c00317 	ldw	r3,12(r2)
   1841c:	e0bfff17 	ldw	r2,-4(fp)
   18420:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   18424:	e0bffe17 	ldw	r2,-8(fp)
   18428:	10c00417 	ldw	r3,16(r2)
   1842c:	e0bfff17 	ldw	r2,-4(fp)
   18430:	10c00415 	stw	r3,16(r2)
   18434:	e0bffb17 	ldw	r2,-20(fp)
   18438:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1843c:	e0bffd17 	ldw	r2,-12(fp)
   18440:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   18444:	e0bfff17 	ldw	r2,-4(fp)
   18448:	10c00317 	ldw	r3,12(r2)
   1844c:	e0bfff17 	ldw	r2,-4(fp)
   18450:	10800417 	ldw	r2,16(r2)
   18454:	1887c83a 	sub	r3,r3,r2
   18458:	e0bfff17 	ldw	r2,-4(fp)
   1845c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   18460:	0005883a 	mov	r2,zero
}
   18464:	e037883a 	mov	sp,fp
   18468:	df000017 	ldw	fp,0(sp)
   1846c:	dec00104 	addi	sp,sp,4
   18470:	f800283a 	ret

00018474 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   18474:	defffc04 	addi	sp,sp,-16
   18478:	dfc00315 	stw	ra,12(sp)
   1847c:	df000215 	stw	fp,8(sp)
   18480:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   18484:	010000f4 	movhi	r4,3
   18488:	210cb804 	addi	r4,r4,13024
   1848c:	01430c04 	movi	r5,3120
   18490:	00151040 	call	15104 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   18494:	008000f4 	movhi	r2,3
   18498:	108cb804 	addi	r2,r2,13024
   1849c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   184a0:	e03fff0d 	sth	zero,-4(fp)
   184a4:	00001306 	br	184f4 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   184a8:	e0bfff0b 	ldhu	r2,-4(fp)
   184ac:	10800044 	addi	r2,r2,1
   184b0:	10c00d24 	muli	r3,r2,52
   184b4:	008000f4 	movhi	r2,3
   184b8:	108cb804 	addi	r2,r2,13024
   184bc:	1887883a 	add	r3,r3,r2
   184c0:	e0bffe17 	ldw	r2,-8(fp)
   184c4:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   184c8:	e0bffe17 	ldw	r2,-8(fp)
   184cc:	00c00fc4 	movi	r3,63
   184d0:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   184d4:	e0bffe17 	ldw	r2,-8(fp)
   184d8:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   184dc:	e0bffe17 	ldw	r2,-8(fp)
   184e0:	10800d04 	addi	r2,r2,52
   184e4:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   184e8:	e0bfff0b 	ldhu	r2,-4(fp)
   184ec:	10800044 	addi	r2,r2,1
   184f0:	e0bfff0d 	sth	r2,-4(fp)
   184f4:	e0bfff0b 	ldhu	r2,-4(fp)
   184f8:	10800ef0 	cmpltui	r2,r2,59
   184fc:	103fea1e 	bne	r2,zero,184a8 <__alt_mem_Flash_flash_data+0xf40184a8>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   18500:	e0bffe17 	ldw	r2,-8(fp)
   18504:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   18508:	e0bffe17 	ldw	r2,-8(fp)
   1850c:	00c00fc4 	movi	r3,63
   18510:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   18514:	e0bffe17 	ldw	r2,-8(fp)
   18518:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   1851c:	008000b4 	movhi	r2,2
   18520:	1091cf04 	addi	r2,r2,18236
   18524:	00c000f4 	movhi	r3,3
   18528:	18ccb804 	addi	r3,r3,13024
   1852c:	10c00015 	stw	r3,0(r2)
#endif
}
   18530:	e037883a 	mov	sp,fp
   18534:	dfc00117 	ldw	ra,4(sp)
   18538:	df000017 	ldw	fp,0(sp)
   1853c:	dec00204 	addi	sp,sp,8
   18540:	f800283a 	ret

00018544 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   18544:	defff804 	addi	sp,sp,-32
   18548:	df000715 	stw	fp,28(sp)
   1854c:	df000704 	addi	fp,sp,28
   18550:	e13ffe15 	stw	r4,-8(fp)
   18554:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18558:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1855c:	e0bfff17 	ldw	r2,-4(fp)
   18560:	1000021e 	bne	r2,zero,1856c <OSQAccept+0x28>
        return ((void *)0);
   18564:	0005883a 	mov	r2,zero
   18568:	00004206 	br	18674 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   1856c:	e0bffe17 	ldw	r2,-8(fp)
   18570:	1000051e 	bne	r2,zero,18588 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   18574:	e0bfff17 	ldw	r2,-4(fp)
   18578:	00c00104 	movi	r3,4
   1857c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18580:	0005883a 	mov	r2,zero
   18584:	00003b06 	br	18674 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   18588:	e0bffe17 	ldw	r2,-8(fp)
   1858c:	10800003 	ldbu	r2,0(r2)
   18590:	10803fcc 	andi	r2,r2,255
   18594:	108000a0 	cmpeqi	r2,r2,2
   18598:	1000051e 	bne	r2,zero,185b0 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1859c:	e0bfff17 	ldw	r2,-4(fp)
   185a0:	00c00044 	movi	r3,1
   185a4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   185a8:	0005883a 	mov	r2,zero
   185ac:	00003106 	br	18674 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   185b0:	0005303a 	rdctl	r2,status
   185b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   185b8:	e0fffc17 	ldw	r3,-16(fp)
   185bc:	00bfff84 	movi	r2,-2
   185c0:	1884703a 	and	r2,r3,r2
   185c4:	1001703a 	wrctl	status,r2
  
  return context;
   185c8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   185cc:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   185d0:	e0bffe17 	ldw	r2,-8(fp)
   185d4:	10800117 	ldw	r2,4(r2)
   185d8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   185dc:	e0bffb17 	ldw	r2,-20(fp)
   185e0:	1080058b 	ldhu	r2,22(r2)
   185e4:	10bfffcc 	andi	r2,r2,65535
   185e8:	10001926 	beq	r2,zero,18650 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   185ec:	e0bffb17 	ldw	r2,-20(fp)
   185f0:	10800417 	ldw	r2,16(r2)
   185f4:	11000104 	addi	r4,r2,4
   185f8:	e0fffb17 	ldw	r3,-20(fp)
   185fc:	19000415 	stw	r4,16(r3)
   18600:	10800017 	ldw	r2,0(r2)
   18604:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   18608:	e0bffb17 	ldw	r2,-20(fp)
   1860c:	1080058b 	ldhu	r2,22(r2)
   18610:	10bfffc4 	addi	r2,r2,-1
   18614:	1007883a 	mov	r3,r2
   18618:	e0bffb17 	ldw	r2,-20(fp)
   1861c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   18620:	e0bffb17 	ldw	r2,-20(fp)
   18624:	10c00417 	ldw	r3,16(r2)
   18628:	e0bffb17 	ldw	r2,-20(fp)
   1862c:	10800217 	ldw	r2,8(r2)
   18630:	1880041e 	bne	r3,r2,18644 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   18634:	e0bffb17 	ldw	r2,-20(fp)
   18638:	10c00117 	ldw	r3,4(r2)
   1863c:	e0bffb17 	ldw	r2,-20(fp)
   18640:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   18644:	e0bfff17 	ldw	r2,-4(fp)
   18648:	10000005 	stb	zero,0(r2)
   1864c:	00000406 	br	18660 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   18650:	e0bfff17 	ldw	r2,-4(fp)
   18654:	00c007c4 	movi	r3,31
   18658:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   1865c:	e03ff915 	stw	zero,-28(fp)
   18660:	e0bffa17 	ldw	r2,-24(fp)
   18664:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18668:	e0bffd17 	ldw	r2,-12(fp)
   1866c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   18670:	e0bff917 	ldw	r2,-28(fp)
}
   18674:	e037883a 	mov	sp,fp
   18678:	df000017 	ldw	fp,0(sp)
   1867c:	dec00104 	addi	sp,sp,4
   18680:	f800283a 	ret

00018684 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   18684:	defff404 	addi	sp,sp,-48
   18688:	dfc00b15 	stw	ra,44(sp)
   1868c:	df000a15 	stw	fp,40(sp)
   18690:	df000a04 	addi	fp,sp,40
   18694:	e13ffe15 	stw	r4,-8(fp)
   18698:	2805883a 	mov	r2,r5
   1869c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   186a0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   186a4:	008000b4 	movhi	r2,2
   186a8:	1091d404 	addi	r2,r2,18256
   186ac:	10800003 	ldbu	r2,0(r2)
   186b0:	10803fcc 	andi	r2,r2,255
   186b4:	10000226 	beq	r2,zero,186c0 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   186b8:	0005883a 	mov	r2,zero
   186bc:	00006b06 	br	1886c <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   186c0:	0005303a 	rdctl	r2,status
   186c4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   186c8:	e0fff917 	ldw	r3,-28(fp)
   186cc:	00bfff84 	movi	r2,-2
   186d0:	1884703a 	and	r2,r3,r2
   186d4:	1001703a 	wrctl	status,r2
  
  return context;
   186d8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   186dc:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   186e0:	008000b4 	movhi	r2,2
   186e4:	1091d304 	addi	r2,r2,18252
   186e8:	10800017 	ldw	r2,0(r2)
   186ec:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   186f0:	008000b4 	movhi	r2,2
   186f4:	1091d304 	addi	r2,r2,18252
   186f8:	10800017 	ldw	r2,0(r2)
   186fc:	10000726 	beq	r2,zero,1871c <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   18700:	008000b4 	movhi	r2,2
   18704:	1091d304 	addi	r2,r2,18252
   18708:	10800017 	ldw	r2,0(r2)
   1870c:	10c00117 	ldw	r3,4(r2)
   18710:	008000b4 	movhi	r2,2
   18714:	1091d304 	addi	r2,r2,18252
   18718:	10c00015 	stw	r3,0(r2)
   1871c:	e0bff717 	ldw	r2,-36(fp)
   18720:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18724:	e0bffa17 	ldw	r2,-24(fp)
   18728:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   1872c:	e0bff617 	ldw	r2,-40(fp)
   18730:	10004d26 	beq	r2,zero,18868 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18734:	0005303a 	rdctl	r2,status
   18738:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1873c:	e0fffb17 	ldw	r3,-20(fp)
   18740:	00bfff84 	movi	r2,-2
   18744:	1884703a 	and	r2,r3,r2
   18748:	1001703a 	wrctl	status,r2
  
  return context;
   1874c:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   18750:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   18754:	008000b4 	movhi	r2,2
   18758:	1091d104 	addi	r2,r2,18244
   1875c:	10800017 	ldw	r2,0(r2)
   18760:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   18764:	e0bff817 	ldw	r2,-32(fp)
   18768:	10003126 	beq	r2,zero,18830 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   1876c:	008000b4 	movhi	r2,2
   18770:	1091d104 	addi	r2,r2,18244
   18774:	10800017 	ldw	r2,0(r2)
   18778:	10c00017 	ldw	r3,0(r2)
   1877c:	008000b4 	movhi	r2,2
   18780:	1091d104 	addi	r2,r2,18244
   18784:	10c00015 	stw	r3,0(r2)
   18788:	e0bff717 	ldw	r2,-36(fp)
   1878c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18790:	e0bffc17 	ldw	r2,-16(fp)
   18794:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   18798:	e0bff817 	ldw	r2,-32(fp)
   1879c:	e0fffe17 	ldw	r3,-8(fp)
   187a0:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   187a4:	e0bfff0b 	ldhu	r2,-4(fp)
   187a8:	1085883a 	add	r2,r2,r2
   187ac:	1085883a 	add	r2,r2,r2
   187b0:	1007883a 	mov	r3,r2
   187b4:	e0bffe17 	ldw	r2,-8(fp)
   187b8:	10c7883a 	add	r3,r2,r3
   187bc:	e0bff817 	ldw	r2,-32(fp)
   187c0:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   187c4:	e0bff817 	ldw	r2,-32(fp)
   187c8:	e0fffe17 	ldw	r3,-8(fp)
   187cc:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   187d0:	e0bff817 	ldw	r2,-32(fp)
   187d4:	e0fffe17 	ldw	r3,-8(fp)
   187d8:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   187dc:	e0bff817 	ldw	r2,-32(fp)
   187e0:	e0ffff0b 	ldhu	r3,-4(fp)
   187e4:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   187e8:	e0bff817 	ldw	r2,-32(fp)
   187ec:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   187f0:	e0bff617 	ldw	r2,-40(fp)
   187f4:	00c00084 	movi	r3,2
   187f8:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   187fc:	e0bff617 	ldw	r2,-40(fp)
   18800:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   18804:	e0bff617 	ldw	r2,-40(fp)
   18808:	e0fff817 	ldw	r3,-32(fp)
   1880c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   18810:	e0bff617 	ldw	r2,-40(fp)
   18814:	00c00fc4 	movi	r3,63
   18818:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   1881c:	e0bff617 	ldw	r2,-40(fp)
   18820:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   18824:	e13ff617 	ldw	r4,-40(fp)
   18828:	0014d400 	call	14d40 <OS_EventWaitListInit>
   1882c:	00000e06 	br	18868 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   18830:	008000b4 	movhi	r2,2
   18834:	1091d304 	addi	r2,r2,18252
   18838:	10c00017 	ldw	r3,0(r2)
   1883c:	e0bff617 	ldw	r2,-40(fp)
   18840:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   18844:	008000b4 	movhi	r2,2
   18848:	1091d304 	addi	r2,r2,18252
   1884c:	e0fff617 	ldw	r3,-40(fp)
   18850:	10c00015 	stw	r3,0(r2)
   18854:	e0bff717 	ldw	r2,-36(fp)
   18858:	e0bffd15 	stw	r2,-12(fp)
   1885c:	e0bffd17 	ldw	r2,-12(fp)
   18860:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   18864:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   18868:	e0bff617 	ldw	r2,-40(fp)
}
   1886c:	e037883a 	mov	sp,fp
   18870:	dfc00117 	ldw	ra,4(sp)
   18874:	df000017 	ldw	fp,0(sp)
   18878:	dec00204 	addi	sp,sp,8
   1887c:	f800283a 	ret

00018880 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   18880:	defff204 	addi	sp,sp,-56
   18884:	dfc00d15 	stw	ra,52(sp)
   18888:	df000c15 	stw	fp,48(sp)
   1888c:	df000c04 	addi	fp,sp,48
   18890:	e13ffd15 	stw	r4,-12(fp)
   18894:	2805883a 	mov	r2,r5
   18898:	e1bfff15 	stw	r6,-4(fp)
   1889c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   188a0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   188a4:	e0bfff17 	ldw	r2,-4(fp)
   188a8:	1000021e 	bne	r2,zero,188b4 <OSQDel+0x34>
        return (pevent);
   188ac:	e0bffd17 	ldw	r2,-12(fp)
   188b0:	0000a006 	br	18b34 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   188b4:	e0bffd17 	ldw	r2,-12(fp)
   188b8:	1000051e 	bne	r2,zero,188d0 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   188bc:	e0bfff17 	ldw	r2,-4(fp)
   188c0:	00c00104 	movi	r3,4
   188c4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   188c8:	e0bffd17 	ldw	r2,-12(fp)
   188cc:	00009906 	br	18b34 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   188d0:	e0bffd17 	ldw	r2,-12(fp)
   188d4:	10800003 	ldbu	r2,0(r2)
   188d8:	10803fcc 	andi	r2,r2,255
   188dc:	108000a0 	cmpeqi	r2,r2,2
   188e0:	1000051e 	bne	r2,zero,188f8 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   188e4:	e0bfff17 	ldw	r2,-4(fp)
   188e8:	00c00044 	movi	r3,1
   188ec:	10c00005 	stb	r3,0(r2)
        return (pevent);
   188f0:	e0bffd17 	ldw	r2,-12(fp)
   188f4:	00008f06 	br	18b34 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   188f8:	008000b4 	movhi	r2,2
   188fc:	1091d404 	addi	r2,r2,18256
   18900:	10800003 	ldbu	r2,0(r2)
   18904:	10803fcc 	andi	r2,r2,255
   18908:	10000526 	beq	r2,zero,18920 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1890c:	e0bfff17 	ldw	r2,-4(fp)
   18910:	00c003c4 	movi	r3,15
   18914:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18918:	e0bffd17 	ldw	r2,-12(fp)
   1891c:	00008506 	br	18b34 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18920:	0005303a 	rdctl	r2,status
   18924:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18928:	e0fff817 	ldw	r3,-32(fp)
   1892c:	00bfff84 	movi	r2,-2
   18930:	1884703a 	and	r2,r3,r2
   18934:	1001703a 	wrctl	status,r2
  
  return context;
   18938:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1893c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   18940:	e0bffd17 	ldw	r2,-12(fp)
   18944:	10800283 	ldbu	r2,10(r2)
   18948:	10803fcc 	andi	r2,r2,255
   1894c:	10000326 	beq	r2,zero,1895c <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   18950:	00800044 	movi	r2,1
   18954:	e0bff405 	stb	r2,-48(fp)
   18958:	00000106 	br	18960 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1895c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   18960:	e0bffe03 	ldbu	r2,-8(fp)
   18964:	10000326 	beq	r2,zero,18974 <OSQDel+0xf4>
   18968:	10800060 	cmpeqi	r2,r2,1
   1896c:	1000381e 	bne	r2,zero,18a50 <OSQDel+0x1d0>
   18970:	00006506 	br	18b08 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   18974:	e0bff403 	ldbu	r2,-48(fp)
   18978:	1000261e 	bne	r2,zero,18a14 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1897c:	e0bffd17 	ldw	r2,-12(fp)
   18980:	00c00fc4 	movi	r3,63
   18984:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   18988:	e0bffd17 	ldw	r2,-12(fp)
   1898c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   18990:	e0bffd17 	ldw	r2,-12(fp)
   18994:	10800117 	ldw	r2,4(r2)
   18998:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   1899c:	008000b4 	movhi	r2,2
   189a0:	1091d104 	addi	r2,r2,18244
   189a4:	10c00017 	ldw	r3,0(r2)
   189a8:	e0bff717 	ldw	r2,-36(fp)
   189ac:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   189b0:	008000b4 	movhi	r2,2
   189b4:	1091d104 	addi	r2,r2,18244
   189b8:	e0fff717 	ldw	r3,-36(fp)
   189bc:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   189c0:	e0bffd17 	ldw	r2,-12(fp)
   189c4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   189c8:	008000b4 	movhi	r2,2
   189cc:	1091d304 	addi	r2,r2,18252
   189d0:	10c00017 	ldw	r3,0(r2)
   189d4:	e0bffd17 	ldw	r2,-12(fp)
   189d8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   189dc:	e0bffd17 	ldw	r2,-12(fp)
   189e0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   189e4:	008000b4 	movhi	r2,2
   189e8:	1091d304 	addi	r2,r2,18252
   189ec:	e0fffd17 	ldw	r3,-12(fp)
   189f0:	10c00015 	stw	r3,0(r2)
   189f4:	e0bff617 	ldw	r2,-40(fp)
   189f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   189fc:	e0bff917 	ldw	r2,-28(fp)
   18a00:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   18a04:	e0bfff17 	ldw	r2,-4(fp)
   18a08:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   18a0c:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   18a10:	00004706 	br	18b30 <OSQDel+0x2b0>
   18a14:	e0bff617 	ldw	r2,-40(fp)
   18a18:	e0bffa15 	stw	r2,-24(fp)
   18a1c:	e0bffa17 	ldw	r2,-24(fp)
   18a20:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   18a24:	e0bfff17 	ldw	r2,-4(fp)
   18a28:	00c01244 	movi	r3,73
   18a2c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   18a30:	e0bffd17 	ldw	r2,-12(fp)
   18a34:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   18a38:	00003d06 	br	18b30 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   18a3c:	e13ffd17 	ldw	r4,-12(fp)
   18a40:	000b883a 	mov	r5,zero
   18a44:	01800104 	movi	r6,4
   18a48:	000f883a 	mov	r7,zero
   18a4c:	00147a00 	call	147a0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   18a50:	e0bffd17 	ldw	r2,-12(fp)
   18a54:	10800283 	ldbu	r2,10(r2)
   18a58:	10803fcc 	andi	r2,r2,255
   18a5c:	103ff71e 	bne	r2,zero,18a3c <__alt_mem_Flash_flash_data+0xf4018a3c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   18a60:	e0bffd17 	ldw	r2,-12(fp)
   18a64:	00c00fc4 	movi	r3,63
   18a68:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   18a6c:	e0bffd17 	ldw	r2,-12(fp)
   18a70:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   18a74:	e0bffd17 	ldw	r2,-12(fp)
   18a78:	10800117 	ldw	r2,4(r2)
   18a7c:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   18a80:	008000b4 	movhi	r2,2
   18a84:	1091d104 	addi	r2,r2,18244
   18a88:	10c00017 	ldw	r3,0(r2)
   18a8c:	e0bff717 	ldw	r2,-36(fp)
   18a90:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   18a94:	008000b4 	movhi	r2,2
   18a98:	1091d104 	addi	r2,r2,18244
   18a9c:	e0fff717 	ldw	r3,-36(fp)
   18aa0:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   18aa4:	e0bffd17 	ldw	r2,-12(fp)
   18aa8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   18aac:	008000b4 	movhi	r2,2
   18ab0:	1091d304 	addi	r2,r2,18252
   18ab4:	10c00017 	ldw	r3,0(r2)
   18ab8:	e0bffd17 	ldw	r2,-12(fp)
   18abc:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   18ac0:	e0bffd17 	ldw	r2,-12(fp)
   18ac4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   18ac8:	008000b4 	movhi	r2,2
   18acc:	1091d304 	addi	r2,r2,18252
   18ad0:	e0fffd17 	ldw	r3,-12(fp)
   18ad4:	10c00015 	stw	r3,0(r2)
   18ad8:	e0bff617 	ldw	r2,-40(fp)
   18adc:	e0bffb15 	stw	r2,-20(fp)
   18ae0:	e0bffb17 	ldw	r2,-20(fp)
   18ae4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   18ae8:	e0bff403 	ldbu	r2,-48(fp)
   18aec:	10800058 	cmpnei	r2,r2,1
   18af0:	1000011e 	bne	r2,zero,18af8 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   18af4:	00151b80 	call	151b8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   18af8:	e0bfff17 	ldw	r2,-4(fp)
   18afc:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   18b00:	e03ff515 	stw	zero,-44(fp)
             break;
   18b04:	00000a06 	br	18b30 <OSQDel+0x2b0>
   18b08:	e0bff617 	ldw	r2,-40(fp)
   18b0c:	e0bffc15 	stw	r2,-16(fp)
   18b10:	e0bffc17 	ldw	r2,-16(fp)
   18b14:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   18b18:	e0bfff17 	ldw	r2,-4(fp)
   18b1c:	00c001c4 	movi	r3,7
   18b20:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   18b24:	e0bffd17 	ldw	r2,-12(fp)
   18b28:	e0bff515 	stw	r2,-44(fp)
             break;
   18b2c:	0001883a 	nop
    }
    return (pevent_return);
   18b30:	e0bff517 	ldw	r2,-44(fp)
}
   18b34:	e037883a 	mov	sp,fp
   18b38:	dfc00117 	ldw	ra,4(sp)
   18b3c:	df000017 	ldw	fp,0(sp)
   18b40:	dec00204 	addi	sp,sp,8
   18b44:	f800283a 	ret

00018b48 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   18b48:	defffa04 	addi	sp,sp,-24
   18b4c:	df000515 	stw	fp,20(sp)
   18b50:	df000504 	addi	fp,sp,20
   18b54:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18b58:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18b5c:	e0bfff17 	ldw	r2,-4(fp)
   18b60:	1000021e 	bne	r2,zero,18b6c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   18b64:	00800104 	movi	r2,4
   18b68:	00002106 	br	18bf0 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   18b6c:	e0bfff17 	ldw	r2,-4(fp)
   18b70:	10800003 	ldbu	r2,0(r2)
   18b74:	10803fcc 	andi	r2,r2,255
   18b78:	108000a0 	cmpeqi	r2,r2,2
   18b7c:	1000021e 	bne	r2,zero,18b88 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   18b80:	00800044 	movi	r2,1
   18b84:	00001a06 	br	18bf0 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18b88:	0005303a 	rdctl	r2,status
   18b8c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18b90:	e0fffd17 	ldw	r3,-12(fp)
   18b94:	00bfff84 	movi	r2,-2
   18b98:	1884703a 	and	r2,r3,r2
   18b9c:	1001703a 	wrctl	status,r2
  
  return context;
   18ba0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18ba4:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   18ba8:	e0bfff17 	ldw	r2,-4(fp)
   18bac:	10800117 	ldw	r2,4(r2)
   18bb0:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   18bb4:	e0bffc17 	ldw	r2,-16(fp)
   18bb8:	10c00117 	ldw	r3,4(r2)
   18bbc:	e0bffc17 	ldw	r2,-16(fp)
   18bc0:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   18bc4:	e0bffc17 	ldw	r2,-16(fp)
   18bc8:	10c00117 	ldw	r3,4(r2)
   18bcc:	e0bffc17 	ldw	r2,-16(fp)
   18bd0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   18bd4:	e0bffc17 	ldw	r2,-16(fp)
   18bd8:	1000058d 	sth	zero,22(r2)
   18bdc:	e0bffb17 	ldw	r2,-20(fp)
   18be0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18be4:	e0bffe17 	ldw	r2,-8(fp)
   18be8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18bec:	0005883a 	mov	r2,zero
}
   18bf0:	e037883a 	mov	sp,fp
   18bf4:	df000017 	ldw	fp,0(sp)
   18bf8:	dec00104 	addi	sp,sp,4
   18bfc:	f800283a 	ret

00018c00 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   18c00:	defff304 	addi	sp,sp,-52
   18c04:	dfc00c15 	stw	ra,48(sp)
   18c08:	df000b15 	stw	fp,44(sp)
   18c0c:	df000b04 	addi	fp,sp,44
   18c10:	e13ffd15 	stw	r4,-12(fp)
   18c14:	2805883a 	mov	r2,r5
   18c18:	e1bfff15 	stw	r6,-4(fp)
   18c1c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18c20:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   18c24:	e0bfff17 	ldw	r2,-4(fp)
   18c28:	1000021e 	bne	r2,zero,18c34 <OSQPend+0x34>
        return ((void *)0);
   18c2c:	0005883a 	mov	r2,zero
   18c30:	0000ad06 	br	18ee8 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   18c34:	e0bffd17 	ldw	r2,-12(fp)
   18c38:	1000051e 	bne	r2,zero,18c50 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18c3c:	e0bfff17 	ldw	r2,-4(fp)
   18c40:	00c00104 	movi	r3,4
   18c44:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18c48:	0005883a 	mov	r2,zero
   18c4c:	0000a606 	br	18ee8 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   18c50:	e0bffd17 	ldw	r2,-12(fp)
   18c54:	10800003 	ldbu	r2,0(r2)
   18c58:	10803fcc 	andi	r2,r2,255
   18c5c:	108000a0 	cmpeqi	r2,r2,2
   18c60:	1000051e 	bne	r2,zero,18c78 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   18c64:	e0bfff17 	ldw	r2,-4(fp)
   18c68:	00c00044 	movi	r3,1
   18c6c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18c70:	0005883a 	mov	r2,zero
   18c74:	00009c06 	br	18ee8 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   18c78:	008000b4 	movhi	r2,2
   18c7c:	1091d404 	addi	r2,r2,18256
   18c80:	10800003 	ldbu	r2,0(r2)
   18c84:	10803fcc 	andi	r2,r2,255
   18c88:	10000526 	beq	r2,zero,18ca0 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   18c8c:	e0bfff17 	ldw	r2,-4(fp)
   18c90:	00c00084 	movi	r3,2
   18c94:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18c98:	0005883a 	mov	r2,zero
   18c9c:	00009206 	br	18ee8 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   18ca0:	008000b4 	movhi	r2,2
   18ca4:	1091c604 	addi	r2,r2,18200
   18ca8:	10800003 	ldbu	r2,0(r2)
   18cac:	10803fcc 	andi	r2,r2,255
   18cb0:	10000526 	beq	r2,zero,18cc8 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   18cb4:	e0bfff17 	ldw	r2,-4(fp)
   18cb8:	00c00344 	movi	r3,13
   18cbc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18cc0:	0005883a 	mov	r2,zero
   18cc4:	00008806 	br	18ee8 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18cc8:	0005303a 	rdctl	r2,status
   18ccc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18cd0:	e0fff817 	ldw	r3,-32(fp)
   18cd4:	00bfff84 	movi	r2,-2
   18cd8:	1884703a 	and	r2,r3,r2
   18cdc:	1001703a 	wrctl	status,r2
  
  return context;
   18ce0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   18ce4:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   18ce8:	e0bffd17 	ldw	r2,-12(fp)
   18cec:	10800117 	ldw	r2,4(r2)
   18cf0:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   18cf4:	e0bff717 	ldw	r2,-36(fp)
   18cf8:	1080058b 	ldhu	r2,22(r2)
   18cfc:	10bfffcc 	andi	r2,r2,65535
   18d00:	10001e26 	beq	r2,zero,18d7c <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   18d04:	e0bff717 	ldw	r2,-36(fp)
   18d08:	10800417 	ldw	r2,16(r2)
   18d0c:	11000104 	addi	r4,r2,4
   18d10:	e0fff717 	ldw	r3,-36(fp)
   18d14:	19000415 	stw	r4,16(r3)
   18d18:	10800017 	ldw	r2,0(r2)
   18d1c:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   18d20:	e0bff717 	ldw	r2,-36(fp)
   18d24:	1080058b 	ldhu	r2,22(r2)
   18d28:	10bfffc4 	addi	r2,r2,-1
   18d2c:	1007883a 	mov	r3,r2
   18d30:	e0bff717 	ldw	r2,-36(fp)
   18d34:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   18d38:	e0bff717 	ldw	r2,-36(fp)
   18d3c:	10c00417 	ldw	r3,16(r2)
   18d40:	e0bff717 	ldw	r2,-36(fp)
   18d44:	10800217 	ldw	r2,8(r2)
   18d48:	1880041e 	bne	r3,r2,18d5c <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   18d4c:	e0bff717 	ldw	r2,-36(fp)
   18d50:	10c00117 	ldw	r3,4(r2)
   18d54:	e0bff717 	ldw	r2,-36(fp)
   18d58:	10c00415 	stw	r3,16(r2)
   18d5c:	e0bff617 	ldw	r2,-40(fp)
   18d60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18d64:	e0bff917 	ldw	r2,-28(fp)
   18d68:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   18d6c:	e0bfff17 	ldw	r2,-4(fp)
   18d70:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   18d74:	e0bff517 	ldw	r2,-44(fp)
   18d78:	00005b06 	br	18ee8 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   18d7c:	008000b4 	movhi	r2,2
   18d80:	1091d504 	addi	r2,r2,18260
   18d84:	10c00017 	ldw	r3,0(r2)
   18d88:	008000b4 	movhi	r2,2
   18d8c:	1091d504 	addi	r2,r2,18260
   18d90:	10800017 	ldw	r2,0(r2)
   18d94:	10800c03 	ldbu	r2,48(r2)
   18d98:	10800114 	ori	r2,r2,4
   18d9c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   18da0:	008000b4 	movhi	r2,2
   18da4:	1091d504 	addi	r2,r2,18260
   18da8:	10800017 	ldw	r2,0(r2)
   18dac:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   18db0:	008000b4 	movhi	r2,2
   18db4:	1091d504 	addi	r2,r2,18260
   18db8:	10800017 	ldw	r2,0(r2)
   18dbc:	e0fffe0b 	ldhu	r3,-8(fp)
   18dc0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   18dc4:	e13ffd17 	ldw	r4,-12(fp)
   18dc8:	00149380 	call	14938 <OS_EventTaskWait>
   18dcc:	e0bff617 	ldw	r2,-40(fp)
   18dd0:	e0bffa15 	stw	r2,-24(fp)
   18dd4:	e0bffa17 	ldw	r2,-24(fp)
   18dd8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   18ddc:	00151b80 	call	151b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18de0:	0005303a 	rdctl	r2,status
   18de4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18de8:	e0fffb17 	ldw	r3,-20(fp)
   18dec:	00bfff84 	movi	r2,-2
   18df0:	1884703a 	and	r2,r3,r2
   18df4:	1001703a 	wrctl	status,r2
  
  return context;
   18df8:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   18dfc:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   18e00:	008000b4 	movhi	r2,2
   18e04:	1091d504 	addi	r2,r2,18260
   18e08:	10800017 	ldw	r2,0(r2)
   18e0c:	10800c43 	ldbu	r2,49(r2)
   18e10:	10803fcc 	andi	r2,r2,255
   18e14:	10000326 	beq	r2,zero,18e24 <OSQPend+0x224>
   18e18:	108000a0 	cmpeqi	r2,r2,2
   18e1c:	1000091e 	bne	r2,zero,18e44 <OSQPend+0x244>
   18e20:	00000d06 	br	18e58 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   18e24:	008000b4 	movhi	r2,2
   18e28:	1091d504 	addi	r2,r2,18260
   18e2c:	10800017 	ldw	r2,0(r2)
   18e30:	10800917 	ldw	r2,36(r2)
   18e34:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   18e38:	e0bfff17 	ldw	r2,-4(fp)
   18e3c:	10000005 	stb	zero,0(r2)
             break;
   18e40:	00001006 	br	18e84 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   18e44:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   18e48:	e0bfff17 	ldw	r2,-4(fp)
   18e4c:	00c00384 	movi	r3,14
   18e50:	10c00005 	stb	r3,0(r2)
             break;
   18e54:	00000b06 	br	18e84 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   18e58:	008000b4 	movhi	r2,2
   18e5c:	1091d504 	addi	r2,r2,18260
   18e60:	10800017 	ldw	r2,0(r2)
   18e64:	1009883a 	mov	r4,r2
   18e68:	e17ffd17 	ldw	r5,-12(fp)
   18e6c:	0014b900 	call	14b90 <OS_EventTaskRemove>
             pmsg = (void *)0;
   18e70:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   18e74:	e0bfff17 	ldw	r2,-4(fp)
   18e78:	00c00284 	movi	r3,10
   18e7c:	10c00005 	stb	r3,0(r2)
             break;
   18e80:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   18e84:	008000b4 	movhi	r2,2
   18e88:	1091d504 	addi	r2,r2,18260
   18e8c:	10800017 	ldw	r2,0(r2)
   18e90:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   18e94:	008000b4 	movhi	r2,2
   18e98:	1091d504 	addi	r2,r2,18260
   18e9c:	10800017 	ldw	r2,0(r2)
   18ea0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   18ea4:	008000b4 	movhi	r2,2
   18ea8:	1091d504 	addi	r2,r2,18260
   18eac:	10800017 	ldw	r2,0(r2)
   18eb0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   18eb4:	008000b4 	movhi	r2,2
   18eb8:	1091d504 	addi	r2,r2,18260
   18ebc:	10800017 	ldw	r2,0(r2)
   18ec0:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   18ec4:	008000b4 	movhi	r2,2
   18ec8:	1091d504 	addi	r2,r2,18260
   18ecc:	10800017 	ldw	r2,0(r2)
   18ed0:	10000915 	stw	zero,36(r2)
   18ed4:	e0bff617 	ldw	r2,-40(fp)
   18ed8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18edc:	e0bffc17 	ldw	r2,-16(fp)
   18ee0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   18ee4:	e0bff517 	ldw	r2,-44(fp)
}
   18ee8:	e037883a 	mov	sp,fp
   18eec:	dfc00117 	ldw	ra,4(sp)
   18ef0:	df000017 	ldw	fp,0(sp)
   18ef4:	dec00204 	addi	sp,sp,8
   18ef8:	f800283a 	ret

00018efc <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   18efc:	defff604 	addi	sp,sp,-40
   18f00:	dfc00915 	stw	ra,36(sp)
   18f04:	df000815 	stw	fp,32(sp)
   18f08:	df000804 	addi	fp,sp,32
   18f0c:	e13ffd15 	stw	r4,-12(fp)
   18f10:	2805883a 	mov	r2,r5
   18f14:	e1bfff15 	stw	r6,-4(fp)
   18f18:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18f1c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   18f20:	e0bfff17 	ldw	r2,-4(fp)
   18f24:	1000021e 	bne	r2,zero,18f30 <OSQPendAbort+0x34>
        return (0);
   18f28:	0005883a 	mov	r2,zero
   18f2c:	00004906 	br	19054 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18f30:	e0bffd17 	ldw	r2,-12(fp)
   18f34:	1000051e 	bne	r2,zero,18f4c <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18f38:	e0bfff17 	ldw	r2,-4(fp)
   18f3c:	00c00104 	movi	r3,4
   18f40:	10c00005 	stb	r3,0(r2)
        return (0);
   18f44:	0005883a 	mov	r2,zero
   18f48:	00004206 	br	19054 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   18f4c:	e0bffd17 	ldw	r2,-12(fp)
   18f50:	10800003 	ldbu	r2,0(r2)
   18f54:	10803fcc 	andi	r2,r2,255
   18f58:	108000a0 	cmpeqi	r2,r2,2
   18f5c:	1000051e 	bne	r2,zero,18f74 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   18f60:	e0bfff17 	ldw	r2,-4(fp)
   18f64:	00c00044 	movi	r3,1
   18f68:	10c00005 	stb	r3,0(r2)
        return (0);
   18f6c:	0005883a 	mov	r2,zero
   18f70:	00003806 	br	19054 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18f74:	0005303a 	rdctl	r2,status
   18f78:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18f7c:	e0fffa17 	ldw	r3,-24(fp)
   18f80:	00bfff84 	movi	r2,-2
   18f84:	1884703a 	and	r2,r3,r2
   18f88:	1001703a 	wrctl	status,r2
  
  return context;
   18f8c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   18f90:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   18f94:	e0bffd17 	ldw	r2,-12(fp)
   18f98:	10800283 	ldbu	r2,10(r2)
   18f9c:	10803fcc 	andi	r2,r2,255
   18fa0:	10002526 	beq	r2,zero,19038 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   18fa4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   18fa8:	e0bffe03 	ldbu	r2,-8(fp)
   18fac:	10800060 	cmpeqi	r2,r2,1
   18fb0:	10000e26 	beq	r2,zero,18fec <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   18fb4:	00000806 	br	18fd8 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   18fb8:	e13ffd17 	ldw	r4,-12(fp)
   18fbc:	000b883a 	mov	r5,zero
   18fc0:	01800104 	movi	r6,4
   18fc4:	01c00084 	movi	r7,2
   18fc8:	00147a00 	call	147a0 <OS_EventTaskRdy>
                     nbr_tasks++;
   18fcc:	e0bff803 	ldbu	r2,-32(fp)
   18fd0:	10800044 	addi	r2,r2,1
   18fd4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   18fd8:	e0bffd17 	ldw	r2,-12(fp)
   18fdc:	10800283 	ldbu	r2,10(r2)
   18fe0:	10803fcc 	andi	r2,r2,255
   18fe4:	103ff41e 	bne	r2,zero,18fb8 <__alt_mem_Flash_flash_data+0xf4018fb8>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   18fe8:	00000906 	br	19010 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   18fec:	e13ffd17 	ldw	r4,-12(fp)
   18ff0:	000b883a 	mov	r5,zero
   18ff4:	01800104 	movi	r6,4
   18ff8:	01c00084 	movi	r7,2
   18ffc:	00147a00 	call	147a0 <OS_EventTaskRdy>
                 nbr_tasks++;
   19000:	e0bff803 	ldbu	r2,-32(fp)
   19004:	10800044 	addi	r2,r2,1
   19008:	e0bff805 	stb	r2,-32(fp)
                 break;
   1900c:	0001883a 	nop
   19010:	e0bff917 	ldw	r2,-28(fp)
   19014:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19018:	e0bffb17 	ldw	r2,-20(fp)
   1901c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   19020:	00151b80 	call	151b8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   19024:	e0bfff17 	ldw	r2,-4(fp)
   19028:	00c00384 	movi	r3,14
   1902c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   19030:	e0bff803 	ldbu	r2,-32(fp)
   19034:	00000706 	br	19054 <OSQPendAbort+0x158>
   19038:	e0bff917 	ldw	r2,-28(fp)
   1903c:	e0bffc15 	stw	r2,-16(fp)
   19040:	e0bffc17 	ldw	r2,-16(fp)
   19044:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   19048:	e0bfff17 	ldw	r2,-4(fp)
   1904c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   19050:	0005883a 	mov	r2,zero
}
   19054:	e037883a 	mov	sp,fp
   19058:	dfc00117 	ldw	ra,4(sp)
   1905c:	df000017 	ldw	fp,0(sp)
   19060:	dec00204 	addi	sp,sp,8
   19064:	f800283a 	ret

00019068 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   19068:	defff604 	addi	sp,sp,-40
   1906c:	dfc00915 	stw	ra,36(sp)
   19070:	df000815 	stw	fp,32(sp)
   19074:	df000804 	addi	fp,sp,32
   19078:	e13ffe15 	stw	r4,-8(fp)
   1907c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   19080:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   19084:	e0bffe17 	ldw	r2,-8(fp)
   19088:	1000021e 	bne	r2,zero,19094 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   1908c:	00800104 	movi	r2,4
   19090:	00004a06 	br	191bc <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   19094:	e0bffe17 	ldw	r2,-8(fp)
   19098:	10800003 	ldbu	r2,0(r2)
   1909c:	10803fcc 	andi	r2,r2,255
   190a0:	108000a0 	cmpeqi	r2,r2,2
   190a4:	1000021e 	bne	r2,zero,190b0 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   190a8:	00800044 	movi	r2,1
   190ac:	00004306 	br	191bc <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   190b0:	0005303a 	rdctl	r2,status
   190b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   190b8:	e0fffa17 	ldw	r3,-24(fp)
   190bc:	00bfff84 	movi	r2,-2
   190c0:	1884703a 	and	r2,r3,r2
   190c4:	1001703a 	wrctl	status,r2
  
  return context;
   190c8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   190cc:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   190d0:	e0bffe17 	ldw	r2,-8(fp)
   190d4:	10800283 	ldbu	r2,10(r2)
   190d8:	10803fcc 	andi	r2,r2,255
   190dc:	10000c26 	beq	r2,zero,19110 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   190e0:	e13ffe17 	ldw	r4,-8(fp)
   190e4:	e17fff17 	ldw	r5,-4(fp)
   190e8:	01800104 	movi	r6,4
   190ec:	000f883a 	mov	r7,zero
   190f0:	00147a00 	call	147a0 <OS_EventTaskRdy>
   190f4:	e0bff817 	ldw	r2,-32(fp)
   190f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   190fc:	e0bffb17 	ldw	r2,-20(fp)
   19100:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   19104:	00151b80 	call	151b8 <OS_Sched>
        return (OS_ERR_NONE);
   19108:	0005883a 	mov	r2,zero
   1910c:	00002b06 	br	191bc <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   19110:	e0bffe17 	ldw	r2,-8(fp)
   19114:	10800117 	ldw	r2,4(r2)
   19118:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   1911c:	e0bff917 	ldw	r2,-28(fp)
   19120:	10c0058b 	ldhu	r3,22(r2)
   19124:	e0bff917 	ldw	r2,-28(fp)
   19128:	1080050b 	ldhu	r2,20(r2)
   1912c:	18ffffcc 	andi	r3,r3,65535
   19130:	10bfffcc 	andi	r2,r2,65535
   19134:	18800636 	bltu	r3,r2,19150 <OSQPost+0xe8>
   19138:	e0bff817 	ldw	r2,-32(fp)
   1913c:	e0bffc15 	stw	r2,-16(fp)
   19140:	e0bffc17 	ldw	r2,-16(fp)
   19144:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   19148:	00800784 	movi	r2,30
   1914c:	00001b06 	br	191bc <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   19150:	e0bff917 	ldw	r2,-28(fp)
   19154:	10800317 	ldw	r2,12(r2)
   19158:	11000104 	addi	r4,r2,4
   1915c:	e0fff917 	ldw	r3,-28(fp)
   19160:	19000315 	stw	r4,12(r3)
   19164:	e0ffff17 	ldw	r3,-4(fp)
   19168:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   1916c:	e0bff917 	ldw	r2,-28(fp)
   19170:	1080058b 	ldhu	r2,22(r2)
   19174:	10800044 	addi	r2,r2,1
   19178:	1007883a 	mov	r3,r2
   1917c:	e0bff917 	ldw	r2,-28(fp)
   19180:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   19184:	e0bff917 	ldw	r2,-28(fp)
   19188:	10c00317 	ldw	r3,12(r2)
   1918c:	e0bff917 	ldw	r2,-28(fp)
   19190:	10800217 	ldw	r2,8(r2)
   19194:	1880041e 	bne	r3,r2,191a8 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   19198:	e0bff917 	ldw	r2,-28(fp)
   1919c:	10c00117 	ldw	r3,4(r2)
   191a0:	e0bff917 	ldw	r2,-28(fp)
   191a4:	10c00315 	stw	r3,12(r2)
   191a8:	e0bff817 	ldw	r2,-32(fp)
   191ac:	e0bffd15 	stw	r2,-12(fp)
   191b0:	e0bffd17 	ldw	r2,-12(fp)
   191b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   191b8:	0005883a 	mov	r2,zero
}
   191bc:	e037883a 	mov	sp,fp
   191c0:	dfc00117 	ldw	ra,4(sp)
   191c4:	df000017 	ldw	fp,0(sp)
   191c8:	dec00204 	addi	sp,sp,8
   191cc:	f800283a 	ret

000191d0 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   191d0:	defff604 	addi	sp,sp,-40
   191d4:	dfc00915 	stw	ra,36(sp)
   191d8:	df000815 	stw	fp,32(sp)
   191dc:	df000804 	addi	fp,sp,32
   191e0:	e13ffe15 	stw	r4,-8(fp)
   191e4:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   191e8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   191ec:	e0bffe17 	ldw	r2,-8(fp)
   191f0:	1000021e 	bne	r2,zero,191fc <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   191f4:	00800104 	movi	r2,4
   191f8:	00004c06 	br	1932c <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   191fc:	e0bffe17 	ldw	r2,-8(fp)
   19200:	10800003 	ldbu	r2,0(r2)
   19204:	10803fcc 	andi	r2,r2,255
   19208:	108000a0 	cmpeqi	r2,r2,2
   1920c:	1000021e 	bne	r2,zero,19218 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   19210:	00800044 	movi	r2,1
   19214:	00004506 	br	1932c <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19218:	0005303a 	rdctl	r2,status
   1921c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19220:	e0fffa17 	ldw	r3,-24(fp)
   19224:	00bfff84 	movi	r2,-2
   19228:	1884703a 	and	r2,r3,r2
   1922c:	1001703a 	wrctl	status,r2
  
  return context;
   19230:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   19234:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   19238:	e0bffe17 	ldw	r2,-8(fp)
   1923c:	10800283 	ldbu	r2,10(r2)
   19240:	10803fcc 	andi	r2,r2,255
   19244:	10000c26 	beq	r2,zero,19278 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   19248:	e13ffe17 	ldw	r4,-8(fp)
   1924c:	e17fff17 	ldw	r5,-4(fp)
   19250:	01800104 	movi	r6,4
   19254:	000f883a 	mov	r7,zero
   19258:	00147a00 	call	147a0 <OS_EventTaskRdy>
   1925c:	e0bff817 	ldw	r2,-32(fp)
   19260:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19264:	e0bffb17 	ldw	r2,-20(fp)
   19268:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   1926c:	00151b80 	call	151b8 <OS_Sched>
        return (OS_ERR_NONE);
   19270:	0005883a 	mov	r2,zero
   19274:	00002d06 	br	1932c <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   19278:	e0bffe17 	ldw	r2,-8(fp)
   1927c:	10800117 	ldw	r2,4(r2)
   19280:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   19284:	e0bff917 	ldw	r2,-28(fp)
   19288:	10c0058b 	ldhu	r3,22(r2)
   1928c:	e0bff917 	ldw	r2,-28(fp)
   19290:	1080050b 	ldhu	r2,20(r2)
   19294:	18ffffcc 	andi	r3,r3,65535
   19298:	10bfffcc 	andi	r2,r2,65535
   1929c:	18800636 	bltu	r3,r2,192b8 <OSQPostFront+0xe8>
   192a0:	e0bff817 	ldw	r2,-32(fp)
   192a4:	e0bffc15 	stw	r2,-16(fp)
   192a8:	e0bffc17 	ldw	r2,-16(fp)
   192ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   192b0:	00800784 	movi	r2,30
   192b4:	00001d06 	br	1932c <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   192b8:	e0bff917 	ldw	r2,-28(fp)
   192bc:	10c00417 	ldw	r3,16(r2)
   192c0:	e0bff917 	ldw	r2,-28(fp)
   192c4:	10800117 	ldw	r2,4(r2)
   192c8:	1880041e 	bne	r3,r2,192dc <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   192cc:	e0bff917 	ldw	r2,-28(fp)
   192d0:	10c00217 	ldw	r3,8(r2)
   192d4:	e0bff917 	ldw	r2,-28(fp)
   192d8:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   192dc:	e0bff917 	ldw	r2,-28(fp)
   192e0:	10800417 	ldw	r2,16(r2)
   192e4:	10ffff04 	addi	r3,r2,-4
   192e8:	e0bff917 	ldw	r2,-28(fp)
   192ec:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   192f0:	e0bff917 	ldw	r2,-28(fp)
   192f4:	10800417 	ldw	r2,16(r2)
   192f8:	e0ffff17 	ldw	r3,-4(fp)
   192fc:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   19300:	e0bff917 	ldw	r2,-28(fp)
   19304:	1080058b 	ldhu	r2,22(r2)
   19308:	10800044 	addi	r2,r2,1
   1930c:	1007883a 	mov	r3,r2
   19310:	e0bff917 	ldw	r2,-28(fp)
   19314:	10c0058d 	sth	r3,22(r2)
   19318:	e0bff817 	ldw	r2,-32(fp)
   1931c:	e0bffd15 	stw	r2,-12(fp)
   19320:	e0bffd17 	ldw	r2,-12(fp)
   19324:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19328:	0005883a 	mov	r2,zero
}
   1932c:	e037883a 	mov	sp,fp
   19330:	dfc00117 	ldw	ra,4(sp)
   19334:	df000017 	ldw	fp,0(sp)
   19338:	dec00204 	addi	sp,sp,8
   1933c:	f800283a 	ret

00019340 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   19340:	defff504 	addi	sp,sp,-44
   19344:	dfc00a15 	stw	ra,40(sp)
   19348:	df000915 	stw	fp,36(sp)
   1934c:	df000904 	addi	fp,sp,36
   19350:	e13ffd15 	stw	r4,-12(fp)
   19354:	e17ffe15 	stw	r5,-8(fp)
   19358:	3005883a 	mov	r2,r6
   1935c:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19360:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19364:	e0bffd17 	ldw	r2,-12(fp)
   19368:	1000021e 	bne	r2,zero,19374 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   1936c:	00800104 	movi	r2,4
   19370:	00007106 	br	19538 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   19374:	e0bffd17 	ldw	r2,-12(fp)
   19378:	10800003 	ldbu	r2,0(r2)
   1937c:	10803fcc 	andi	r2,r2,255
   19380:	108000a0 	cmpeqi	r2,r2,2
   19384:	1000021e 	bne	r2,zero,19390 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   19388:	00800044 	movi	r2,1
   1938c:	00006a06 	br	19538 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19390:	0005303a 	rdctl	r2,status
   19394:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19398:	e0fff917 	ldw	r3,-28(fp)
   1939c:	00bfff84 	movi	r2,-2
   193a0:	1884703a 	and	r2,r3,r2
   193a4:	1001703a 	wrctl	status,r2
  
  return context;
   193a8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   193ac:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   193b0:	e0bffd17 	ldw	r2,-12(fp)
   193b4:	10800283 	ldbu	r2,10(r2)
   193b8:	10803fcc 	andi	r2,r2,255
   193bc:	10001d26 	beq	r2,zero,19434 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   193c0:	e0bfff03 	ldbu	r2,-4(fp)
   193c4:	1080004c 	andi	r2,r2,1
   193c8:	10000b26 	beq	r2,zero,193f8 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   193cc:	00000506 	br	193e4 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   193d0:	e13ffd17 	ldw	r4,-12(fp)
   193d4:	e17ffe17 	ldw	r5,-8(fp)
   193d8:	01800104 	movi	r6,4
   193dc:	000f883a 	mov	r7,zero
   193e0:	00147a00 	call	147a0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   193e4:	e0bffd17 	ldw	r2,-12(fp)
   193e8:	10800283 	ldbu	r2,10(r2)
   193ec:	10803fcc 	andi	r2,r2,255
   193f0:	103ff71e 	bne	r2,zero,193d0 <__alt_mem_Flash_flash_data+0xf40193d0>
   193f4:	00000506 	br	1940c <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   193f8:	e13ffd17 	ldw	r4,-12(fp)
   193fc:	e17ffe17 	ldw	r5,-8(fp)
   19400:	01800104 	movi	r6,4
   19404:	000f883a 	mov	r7,zero
   19408:	00147a00 	call	147a0 <OS_EventTaskRdy>
   1940c:	e0bff717 	ldw	r2,-36(fp)
   19410:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19414:	e0bffa17 	ldw	r2,-24(fp)
   19418:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   1941c:	e0bfff03 	ldbu	r2,-4(fp)
   19420:	1080010c 	andi	r2,r2,4
   19424:	1000011e 	bne	r2,zero,1942c <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   19428:	00151b80 	call	151b8 <OS_Sched>
        }
        return (OS_ERR_NONE);
   1942c:	0005883a 	mov	r2,zero
   19430:	00004106 	br	19538 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   19434:	e0bffd17 	ldw	r2,-12(fp)
   19438:	10800117 	ldw	r2,4(r2)
   1943c:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   19440:	e0bff817 	ldw	r2,-32(fp)
   19444:	10c0058b 	ldhu	r3,22(r2)
   19448:	e0bff817 	ldw	r2,-32(fp)
   1944c:	1080050b 	ldhu	r2,20(r2)
   19450:	18ffffcc 	andi	r3,r3,65535
   19454:	10bfffcc 	andi	r2,r2,65535
   19458:	18800636 	bltu	r3,r2,19474 <OSQPostOpt+0x134>
   1945c:	e0bff717 	ldw	r2,-36(fp)
   19460:	e0bffb15 	stw	r2,-20(fp)
   19464:	e0bffb17 	ldw	r2,-20(fp)
   19468:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1946c:	00800784 	movi	r2,30
   19470:	00003106 	br	19538 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   19474:	e0bfff03 	ldbu	r2,-4(fp)
   19478:	1080008c 	andi	r2,r2,2
   1947c:	10001326 	beq	r2,zero,194cc <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   19480:	e0bff817 	ldw	r2,-32(fp)
   19484:	10c00417 	ldw	r3,16(r2)
   19488:	e0bff817 	ldw	r2,-32(fp)
   1948c:	10800117 	ldw	r2,4(r2)
   19490:	1880041e 	bne	r3,r2,194a4 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   19494:	e0bff817 	ldw	r2,-32(fp)
   19498:	10c00217 	ldw	r3,8(r2)
   1949c:	e0bff817 	ldw	r2,-32(fp)
   194a0:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   194a4:	e0bff817 	ldw	r2,-32(fp)
   194a8:	10800417 	ldw	r2,16(r2)
   194ac:	10ffff04 	addi	r3,r2,-4
   194b0:	e0bff817 	ldw	r2,-32(fp)
   194b4:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   194b8:	e0bff817 	ldw	r2,-32(fp)
   194bc:	10800417 	ldw	r2,16(r2)
   194c0:	e0fffe17 	ldw	r3,-8(fp)
   194c4:	10c00015 	stw	r3,0(r2)
   194c8:	00001006 	br	1950c <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   194cc:	e0bff817 	ldw	r2,-32(fp)
   194d0:	10800317 	ldw	r2,12(r2)
   194d4:	11000104 	addi	r4,r2,4
   194d8:	e0fff817 	ldw	r3,-32(fp)
   194dc:	19000315 	stw	r4,12(r3)
   194e0:	e0fffe17 	ldw	r3,-8(fp)
   194e4:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   194e8:	e0bff817 	ldw	r2,-32(fp)
   194ec:	10c00317 	ldw	r3,12(r2)
   194f0:	e0bff817 	ldw	r2,-32(fp)
   194f4:	10800217 	ldw	r2,8(r2)
   194f8:	1880041e 	bne	r3,r2,1950c <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   194fc:	e0bff817 	ldw	r2,-32(fp)
   19500:	10c00117 	ldw	r3,4(r2)
   19504:	e0bff817 	ldw	r2,-32(fp)
   19508:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   1950c:	e0bff817 	ldw	r2,-32(fp)
   19510:	1080058b 	ldhu	r2,22(r2)
   19514:	10800044 	addi	r2,r2,1
   19518:	1007883a 	mov	r3,r2
   1951c:	e0bff817 	ldw	r2,-32(fp)
   19520:	10c0058d 	sth	r3,22(r2)
   19524:	e0bff717 	ldw	r2,-36(fp)
   19528:	e0bffc15 	stw	r2,-16(fp)
   1952c:	e0bffc17 	ldw	r2,-16(fp)
   19530:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19534:	0005883a 	mov	r2,zero
}
   19538:	e037883a 	mov	sp,fp
   1953c:	dfc00117 	ldw	ra,4(sp)
   19540:	df000017 	ldw	fp,0(sp)
   19544:	dec00204 	addi	sp,sp,8
   19548:	f800283a 	ret

0001954c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   1954c:	defff604 	addi	sp,sp,-40
   19550:	df000915 	stw	fp,36(sp)
   19554:	df000904 	addi	fp,sp,36
   19558:	e13ffe15 	stw	r4,-8(fp)
   1955c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   19560:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   19564:	e0bffe17 	ldw	r2,-8(fp)
   19568:	1000021e 	bne	r2,zero,19574 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1956c:	00800104 	movi	r2,4
   19570:	00004906 	br	19698 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   19574:	e0bfff17 	ldw	r2,-4(fp)
   19578:	1000021e 	bne	r2,zero,19584 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1957c:	00800244 	movi	r2,9
   19580:	00004506 	br	19698 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   19584:	e0bffe17 	ldw	r2,-8(fp)
   19588:	10800003 	ldbu	r2,0(r2)
   1958c:	10803fcc 	andi	r2,r2,255
   19590:	108000a0 	cmpeqi	r2,r2,2
   19594:	1000021e 	bne	r2,zero,195a0 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   19598:	00800044 	movi	r2,1
   1959c:	00003e06 	br	19698 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   195a0:	0005303a 	rdctl	r2,status
   195a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   195a8:	e0fffc17 	ldw	r3,-16(fp)
   195ac:	00bfff84 	movi	r2,-2
   195b0:	1884703a 	and	r2,r3,r2
   195b4:	1001703a 	wrctl	status,r2
  
  return context;
   195b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   195bc:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   195c0:	e0bffe17 	ldw	r2,-8(fp)
   195c4:	10c00283 	ldbu	r3,10(r2)
   195c8:	e0bfff17 	ldw	r2,-4(fp)
   195cc:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   195d0:	e0bffe17 	ldw	r2,-8(fp)
   195d4:	108002c4 	addi	r2,r2,11
   195d8:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   195dc:	e0bfff17 	ldw	r2,-4(fp)
   195e0:	10800204 	addi	r2,r2,8
   195e4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   195e8:	e03ff705 	stb	zero,-36(fp)
   195ec:	00000b06 	br	1961c <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   195f0:	e0bff917 	ldw	r2,-28(fp)
   195f4:	10c00044 	addi	r3,r2,1
   195f8:	e0fff915 	stw	r3,-28(fp)
   195fc:	e0fff817 	ldw	r3,-32(fp)
   19600:	19000044 	addi	r4,r3,1
   19604:	e13ff815 	stw	r4,-32(fp)
   19608:	18c00003 	ldbu	r3,0(r3)
   1960c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   19610:	e0bff703 	ldbu	r2,-36(fp)
   19614:	10800044 	addi	r2,r2,1
   19618:	e0bff705 	stb	r2,-36(fp)
   1961c:	e0bff703 	ldbu	r2,-36(fp)
   19620:	108000f0 	cmpltui	r2,r2,3
   19624:	103ff21e 	bne	r2,zero,195f0 <__alt_mem_Flash_flash_data+0xf40195f0>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   19628:	e0bffe17 	ldw	r2,-8(fp)
   1962c:	10800117 	ldw	r2,4(r2)
   19630:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   19634:	e0bffb17 	ldw	r2,-20(fp)
   19638:	1080058b 	ldhu	r2,22(r2)
   1963c:	10bfffcc 	andi	r2,r2,65535
   19640:	10000626 	beq	r2,zero,1965c <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   19644:	e0bffb17 	ldw	r2,-20(fp)
   19648:	10800417 	ldw	r2,16(r2)
   1964c:	10c00017 	ldw	r3,0(r2)
   19650:	e0bfff17 	ldw	r2,-4(fp)
   19654:	10c00015 	stw	r3,0(r2)
   19658:	00000206 	br	19664 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   1965c:	e0bfff17 	ldw	r2,-4(fp)
   19660:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   19664:	e0bffb17 	ldw	r2,-20(fp)
   19668:	10c0058b 	ldhu	r3,22(r2)
   1966c:	e0bfff17 	ldw	r2,-4(fp)
   19670:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   19674:	e0bffb17 	ldw	r2,-20(fp)
   19678:	10c0050b 	ldhu	r3,20(r2)
   1967c:	e0bfff17 	ldw	r2,-4(fp)
   19680:	10c0018d 	sth	r3,6(r2)
   19684:	e0bffa17 	ldw	r2,-24(fp)
   19688:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1968c:	e0bffd17 	ldw	r2,-12(fp)
   19690:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19694:	0005883a 	mov	r2,zero
}
   19698:	e037883a 	mov	sp,fp
   1969c:	df000017 	ldw	fp,0(sp)
   196a0:	dec00104 	addi	sp,sp,4
   196a4:	f800283a 	ret

000196a8 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   196a8:	defffb04 	addi	sp,sp,-20
   196ac:	dfc00415 	stw	ra,16(sp)
   196b0:	df000315 	stw	fp,12(sp)
   196b4:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   196b8:	010000f4 	movhi	r4,3
   196bc:	2111c404 	addi	r4,r4,18192
   196c0:	01407804 	movi	r5,480
   196c4:	00151040 	call	15104 <OS_MemClr>
    pq1 = &OSQTbl[0];
   196c8:	008000f4 	movhi	r2,3
   196cc:	1091c404 	addi	r2,r2,18192
   196d0:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   196d4:	008000f4 	movhi	r2,3
   196d8:	1091ca04 	addi	r2,r2,18216
   196dc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   196e0:	e03ffd0d 	sth	zero,-12(fp)
   196e4:	00000c06 	br	19718 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   196e8:	e0bffe17 	ldw	r2,-8(fp)
   196ec:	e0ffff17 	ldw	r3,-4(fp)
   196f0:	10c00015 	stw	r3,0(r2)
        pq1++;
   196f4:	e0bffe17 	ldw	r2,-8(fp)
   196f8:	10800604 	addi	r2,r2,24
   196fc:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   19700:	e0bfff17 	ldw	r2,-4(fp)
   19704:	10800604 	addi	r2,r2,24
   19708:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1970c:	e0bffd0b 	ldhu	r2,-12(fp)
   19710:	10800044 	addi	r2,r2,1
   19714:	e0bffd0d 	sth	r2,-12(fp)
   19718:	e0bffd0b 	ldhu	r2,-12(fp)
   1971c:	108004f0 	cmpltui	r2,r2,19
   19720:	103ff11e 	bne	r2,zero,196e8 <__alt_mem_Flash_flash_data+0xf40196e8>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   19724:	e0bffe17 	ldw	r2,-8(fp)
   19728:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   1972c:	008000b4 	movhi	r2,2
   19730:	1091d104 	addi	r2,r2,18244
   19734:	00c000f4 	movhi	r3,3
   19738:	18d1c404 	addi	r3,r3,18192
   1973c:	10c00015 	stw	r3,0(r2)
#endif
}
   19740:	e037883a 	mov	sp,fp
   19744:	dfc00117 	ldw	ra,4(sp)
   19748:	df000017 	ldw	fp,0(sp)
   1974c:	dec00204 	addi	sp,sp,8
   19750:	f800283a 	ret

00019754 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   19754:	defffa04 	addi	sp,sp,-24
   19758:	df000515 	stw	fp,20(sp)
   1975c:	df000504 	addi	fp,sp,20
   19760:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19764:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19768:	e0bfff17 	ldw	r2,-4(fp)
   1976c:	1000021e 	bne	r2,zero,19778 <OSSemAccept+0x24>
        return (0);
   19770:	0005883a 	mov	r2,zero
   19774:	00001f06 	br	197f4 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   19778:	e0bfff17 	ldw	r2,-4(fp)
   1977c:	10800003 	ldbu	r2,0(r2)
   19780:	10803fcc 	andi	r2,r2,255
   19784:	108000e0 	cmpeqi	r2,r2,3
   19788:	1000021e 	bne	r2,zero,19794 <OSSemAccept+0x40>
        return (0);
   1978c:	0005883a 	mov	r2,zero
   19790:	00001806 	br	197f4 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19794:	0005303a 	rdctl	r2,status
   19798:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1979c:	e0fffd17 	ldw	r3,-12(fp)
   197a0:	00bfff84 	movi	r2,-2
   197a4:	1884703a 	and	r2,r3,r2
   197a8:	1001703a 	wrctl	status,r2
  
  return context;
   197ac:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   197b0:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   197b4:	e0bfff17 	ldw	r2,-4(fp)
   197b8:	1080020b 	ldhu	r2,8(r2)
   197bc:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   197c0:	e0bffc0b 	ldhu	r2,-16(fp)
   197c4:	10000626 	beq	r2,zero,197e0 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   197c8:	e0bfff17 	ldw	r2,-4(fp)
   197cc:	1080020b 	ldhu	r2,8(r2)
   197d0:	10bfffc4 	addi	r2,r2,-1
   197d4:	1007883a 	mov	r3,r2
   197d8:	e0bfff17 	ldw	r2,-4(fp)
   197dc:	10c0020d 	sth	r3,8(r2)
   197e0:	e0bffb17 	ldw	r2,-20(fp)
   197e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   197e8:	e0bffe17 	ldw	r2,-8(fp)
   197ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   197f0:	e0bffc0b 	ldhu	r2,-16(fp)
}
   197f4:	e037883a 	mov	sp,fp
   197f8:	df000017 	ldw	fp,0(sp)
   197fc:	dec00104 	addi	sp,sp,4
   19800:	f800283a 	ret

00019804 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   19804:	defff904 	addi	sp,sp,-28
   19808:	dfc00615 	stw	ra,24(sp)
   1980c:	df000515 	stw	fp,20(sp)
   19810:	df000504 	addi	fp,sp,20
   19814:	2005883a 	mov	r2,r4
   19818:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1981c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   19820:	008000b4 	movhi	r2,2
   19824:	1091d404 	addi	r2,r2,18256
   19828:	10800003 	ldbu	r2,0(r2)
   1982c:	10803fcc 	andi	r2,r2,255
   19830:	10000226 	beq	r2,zero,1983c <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   19834:	0005883a 	mov	r2,zero
   19838:	00002d06 	br	198f0 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1983c:	0005303a 	rdctl	r2,status
   19840:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19844:	e0fffd17 	ldw	r3,-12(fp)
   19848:	00bfff84 	movi	r2,-2
   1984c:	1884703a 	and	r2,r3,r2
   19850:	1001703a 	wrctl	status,r2
  
  return context;
   19854:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   19858:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   1985c:	008000b4 	movhi	r2,2
   19860:	1091d304 	addi	r2,r2,18252
   19864:	10800017 	ldw	r2,0(r2)
   19868:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   1986c:	008000b4 	movhi	r2,2
   19870:	1091d304 	addi	r2,r2,18252
   19874:	10800017 	ldw	r2,0(r2)
   19878:	10000726 	beq	r2,zero,19898 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1987c:	008000b4 	movhi	r2,2
   19880:	1091d304 	addi	r2,r2,18252
   19884:	10800017 	ldw	r2,0(r2)
   19888:	10c00117 	ldw	r3,4(r2)
   1988c:	008000b4 	movhi	r2,2
   19890:	1091d304 	addi	r2,r2,18252
   19894:	10c00015 	stw	r3,0(r2)
   19898:	e0bffb17 	ldw	r2,-20(fp)
   1989c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   198a0:	e0bffe17 	ldw	r2,-8(fp)
   198a4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   198a8:	e0bffc17 	ldw	r2,-16(fp)
   198ac:	10000f26 	beq	r2,zero,198ec <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   198b0:	e0bffc17 	ldw	r2,-16(fp)
   198b4:	00c000c4 	movi	r3,3
   198b8:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   198bc:	e0bffc17 	ldw	r2,-16(fp)
   198c0:	e0ffff0b 	ldhu	r3,-4(fp)
   198c4:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   198c8:	e0bffc17 	ldw	r2,-16(fp)
   198cc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   198d0:	e0bffc17 	ldw	r2,-16(fp)
   198d4:	00c00fc4 	movi	r3,63
   198d8:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   198dc:	e0bffc17 	ldw	r2,-16(fp)
   198e0:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   198e4:	e13ffc17 	ldw	r4,-16(fp)
   198e8:	0014d400 	call	14d40 <OS_EventWaitListInit>
    }
    return (pevent);
   198ec:	e0bffc17 	ldw	r2,-16(fp)
}
   198f0:	e037883a 	mov	sp,fp
   198f4:	dfc00117 	ldw	ra,4(sp)
   198f8:	df000017 	ldw	fp,0(sp)
   198fc:	dec00204 	addi	sp,sp,8
   19900:	f800283a 	ret

00019904 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   19904:	defff304 	addi	sp,sp,-52
   19908:	dfc00c15 	stw	ra,48(sp)
   1990c:	df000b15 	stw	fp,44(sp)
   19910:	df000b04 	addi	fp,sp,44
   19914:	e13ffd15 	stw	r4,-12(fp)
   19918:	2805883a 	mov	r2,r5
   1991c:	e1bfff15 	stw	r6,-4(fp)
   19920:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   19924:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   19928:	e0bfff17 	ldw	r2,-4(fp)
   1992c:	1000021e 	bne	r2,zero,19938 <OSSemDel+0x34>
        return (pevent);
   19930:	e0bffd17 	ldw	r2,-12(fp)
   19934:	00008806 	br	19b58 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   19938:	e0bffd17 	ldw	r2,-12(fp)
   1993c:	1000051e 	bne	r2,zero,19954 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   19940:	e0bfff17 	ldw	r2,-4(fp)
   19944:	00c00104 	movi	r3,4
   19948:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1994c:	e0bffd17 	ldw	r2,-12(fp)
   19950:	00008106 	br	19b58 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   19954:	e0bffd17 	ldw	r2,-12(fp)
   19958:	10800003 	ldbu	r2,0(r2)
   1995c:	10803fcc 	andi	r2,r2,255
   19960:	108000e0 	cmpeqi	r2,r2,3
   19964:	1000051e 	bne	r2,zero,1997c <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   19968:	e0bfff17 	ldw	r2,-4(fp)
   1996c:	00c00044 	movi	r3,1
   19970:	10c00005 	stb	r3,0(r2)
        return (pevent);
   19974:	e0bffd17 	ldw	r2,-12(fp)
   19978:	00007706 	br	19b58 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1997c:	008000b4 	movhi	r2,2
   19980:	1091d404 	addi	r2,r2,18256
   19984:	10800003 	ldbu	r2,0(r2)
   19988:	10803fcc 	andi	r2,r2,255
   1998c:	10000526 	beq	r2,zero,199a4 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   19990:	e0bfff17 	ldw	r2,-4(fp)
   19994:	00c003c4 	movi	r3,15
   19998:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1999c:	e0bffd17 	ldw	r2,-12(fp)
   199a0:	00006d06 	br	19b58 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   199a4:	0005303a 	rdctl	r2,status
   199a8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   199ac:	e0fff817 	ldw	r3,-32(fp)
   199b0:	00bfff84 	movi	r2,-2
   199b4:	1884703a 	and	r2,r3,r2
   199b8:	1001703a 	wrctl	status,r2
  
  return context;
   199bc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   199c0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   199c4:	e0bffd17 	ldw	r2,-12(fp)
   199c8:	10800283 	ldbu	r2,10(r2)
   199cc:	10803fcc 	andi	r2,r2,255
   199d0:	10000326 	beq	r2,zero,199e0 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   199d4:	00800044 	movi	r2,1
   199d8:	e0bff505 	stb	r2,-44(fp)
   199dc:	00000106 	br	199e4 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   199e0:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   199e4:	e0bffe03 	ldbu	r2,-8(fp)
   199e8:	10000326 	beq	r2,zero,199f8 <OSSemDel+0xf4>
   199ec:	10800060 	cmpeqi	r2,r2,1
   199f0:	10002c1e 	bne	r2,zero,19aa4 <OSSemDel+0x1a0>
   199f4:	00004d06 	br	19b2c <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   199f8:	e0bff503 	ldbu	r2,-44(fp)
   199fc:	10001a1e 	bne	r2,zero,19a68 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   19a00:	e0bffd17 	ldw	r2,-12(fp)
   19a04:	00c00fc4 	movi	r3,63
   19a08:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   19a0c:	e0bffd17 	ldw	r2,-12(fp)
   19a10:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   19a14:	e0bffd17 	ldw	r2,-12(fp)
   19a18:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   19a1c:	008000b4 	movhi	r2,2
   19a20:	1091d304 	addi	r2,r2,18252
   19a24:	10c00017 	ldw	r3,0(r2)
   19a28:	e0bffd17 	ldw	r2,-12(fp)
   19a2c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   19a30:	e0bffd17 	ldw	r2,-12(fp)
   19a34:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   19a38:	008000b4 	movhi	r2,2
   19a3c:	1091d304 	addi	r2,r2,18252
   19a40:	e0fffd17 	ldw	r3,-12(fp)
   19a44:	10c00015 	stw	r3,0(r2)
   19a48:	e0bff717 	ldw	r2,-36(fp)
   19a4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19a50:	e0bff917 	ldw	r2,-28(fp)
   19a54:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   19a58:	e0bfff17 	ldw	r2,-4(fp)
   19a5c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   19a60:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   19a64:	00003b06 	br	19b54 <OSSemDel+0x250>
   19a68:	e0bff717 	ldw	r2,-36(fp)
   19a6c:	e0bffa15 	stw	r2,-24(fp)
   19a70:	e0bffa17 	ldw	r2,-24(fp)
   19a74:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   19a78:	e0bfff17 	ldw	r2,-4(fp)
   19a7c:	00c01244 	movi	r3,73
   19a80:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   19a84:	e0bffd17 	ldw	r2,-12(fp)
   19a88:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   19a8c:	00003106 	br	19b54 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   19a90:	e13ffd17 	ldw	r4,-12(fp)
   19a94:	000b883a 	mov	r5,zero
   19a98:	01800044 	movi	r6,1
   19a9c:	000f883a 	mov	r7,zero
   19aa0:	00147a00 	call	147a0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   19aa4:	e0bffd17 	ldw	r2,-12(fp)
   19aa8:	10800283 	ldbu	r2,10(r2)
   19aac:	10803fcc 	andi	r2,r2,255
   19ab0:	103ff71e 	bne	r2,zero,19a90 <__alt_mem_Flash_flash_data+0xf4019a90>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   19ab4:	e0bffd17 	ldw	r2,-12(fp)
   19ab8:	00c00fc4 	movi	r3,63
   19abc:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   19ac0:	e0bffd17 	ldw	r2,-12(fp)
   19ac4:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   19ac8:	e0bffd17 	ldw	r2,-12(fp)
   19acc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   19ad0:	008000b4 	movhi	r2,2
   19ad4:	1091d304 	addi	r2,r2,18252
   19ad8:	10c00017 	ldw	r3,0(r2)
   19adc:	e0bffd17 	ldw	r2,-12(fp)
   19ae0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   19ae4:	e0bffd17 	ldw	r2,-12(fp)
   19ae8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   19aec:	008000b4 	movhi	r2,2
   19af0:	1091d304 	addi	r2,r2,18252
   19af4:	e0fffd17 	ldw	r3,-12(fp)
   19af8:	10c00015 	stw	r3,0(r2)
   19afc:	e0bff717 	ldw	r2,-36(fp)
   19b00:	e0bffb15 	stw	r2,-20(fp)
   19b04:	e0bffb17 	ldw	r2,-20(fp)
   19b08:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   19b0c:	e0bff503 	ldbu	r2,-44(fp)
   19b10:	10800058 	cmpnei	r2,r2,1
   19b14:	1000011e 	bne	r2,zero,19b1c <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   19b18:	00151b80 	call	151b8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   19b1c:	e0bfff17 	ldw	r2,-4(fp)
   19b20:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   19b24:	e03ff615 	stw	zero,-40(fp)
             break;
   19b28:	00000a06 	br	19b54 <OSSemDel+0x250>
   19b2c:	e0bff717 	ldw	r2,-36(fp)
   19b30:	e0bffc15 	stw	r2,-16(fp)
   19b34:	e0bffc17 	ldw	r2,-16(fp)
   19b38:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   19b3c:	e0bfff17 	ldw	r2,-4(fp)
   19b40:	00c001c4 	movi	r3,7
   19b44:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   19b48:	e0bffd17 	ldw	r2,-12(fp)
   19b4c:	e0bff615 	stw	r2,-40(fp)
             break;
   19b50:	0001883a 	nop
    }
    return (pevent_return);
   19b54:	e0bff617 	ldw	r2,-40(fp)
}
   19b58:	e037883a 	mov	sp,fp
   19b5c:	dfc00117 	ldw	ra,4(sp)
   19b60:	df000017 	ldw	fp,0(sp)
   19b64:	dec00204 	addi	sp,sp,8
   19b68:	f800283a 	ret

00019b6c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   19b6c:	defff504 	addi	sp,sp,-44
   19b70:	dfc00a15 	stw	ra,40(sp)
   19b74:	df000915 	stw	fp,36(sp)
   19b78:	df000904 	addi	fp,sp,36
   19b7c:	e13ffd15 	stw	r4,-12(fp)
   19b80:	2805883a 	mov	r2,r5
   19b84:	e1bfff15 	stw	r6,-4(fp)
   19b88:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19b8c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   19b90:	e0bfff17 	ldw	r2,-4(fp)
   19b94:	1000011e 	bne	r2,zero,19b9c <OSSemPend+0x30>
        return;
   19b98:	00008906 	br	19dc0 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19b9c:	e0bffd17 	ldw	r2,-12(fp)
   19ba0:	1000041e 	bne	r2,zero,19bb4 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   19ba4:	e0bfff17 	ldw	r2,-4(fp)
   19ba8:	00c00104 	movi	r3,4
   19bac:	10c00005 	stb	r3,0(r2)
        return;
   19bb0:	00008306 	br	19dc0 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   19bb4:	e0bffd17 	ldw	r2,-12(fp)
   19bb8:	10800003 	ldbu	r2,0(r2)
   19bbc:	10803fcc 	andi	r2,r2,255
   19bc0:	108000e0 	cmpeqi	r2,r2,3
   19bc4:	1000041e 	bne	r2,zero,19bd8 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   19bc8:	e0bfff17 	ldw	r2,-4(fp)
   19bcc:	00c00044 	movi	r3,1
   19bd0:	10c00005 	stb	r3,0(r2)
        return;
   19bd4:	00007a06 	br	19dc0 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   19bd8:	008000b4 	movhi	r2,2
   19bdc:	1091d404 	addi	r2,r2,18256
   19be0:	10800003 	ldbu	r2,0(r2)
   19be4:	10803fcc 	andi	r2,r2,255
   19be8:	10000426 	beq	r2,zero,19bfc <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   19bec:	e0bfff17 	ldw	r2,-4(fp)
   19bf0:	00c00084 	movi	r3,2
   19bf4:	10c00005 	stb	r3,0(r2)
        return;
   19bf8:	00007106 	br	19dc0 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   19bfc:	008000b4 	movhi	r2,2
   19c00:	1091c604 	addi	r2,r2,18200
   19c04:	10800003 	ldbu	r2,0(r2)
   19c08:	10803fcc 	andi	r2,r2,255
   19c0c:	10000426 	beq	r2,zero,19c20 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   19c10:	e0bfff17 	ldw	r2,-4(fp)
   19c14:	00c00344 	movi	r3,13
   19c18:	10c00005 	stb	r3,0(r2)
        return;
   19c1c:	00006806 	br	19dc0 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19c20:	0005303a 	rdctl	r2,status
   19c24:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19c28:	e0fff817 	ldw	r3,-32(fp)
   19c2c:	00bfff84 	movi	r2,-2
   19c30:	1884703a 	and	r2,r3,r2
   19c34:	1001703a 	wrctl	status,r2
  
  return context;
   19c38:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   19c3c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   19c40:	e0bffd17 	ldw	r2,-12(fp)
   19c44:	1080020b 	ldhu	r2,8(r2)
   19c48:	10bfffcc 	andi	r2,r2,65535
   19c4c:	10000d26 	beq	r2,zero,19c84 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   19c50:	e0bffd17 	ldw	r2,-12(fp)
   19c54:	1080020b 	ldhu	r2,8(r2)
   19c58:	10bfffc4 	addi	r2,r2,-1
   19c5c:	1007883a 	mov	r3,r2
   19c60:	e0bffd17 	ldw	r2,-12(fp)
   19c64:	10c0020d 	sth	r3,8(r2)
   19c68:	e0bff717 	ldw	r2,-36(fp)
   19c6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19c70:	e0bff917 	ldw	r2,-28(fp)
   19c74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   19c78:	e0bfff17 	ldw	r2,-4(fp)
   19c7c:	10000005 	stb	zero,0(r2)
        return;
   19c80:	00004f06 	br	19dc0 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   19c84:	008000b4 	movhi	r2,2
   19c88:	1091d504 	addi	r2,r2,18260
   19c8c:	10c00017 	ldw	r3,0(r2)
   19c90:	008000b4 	movhi	r2,2
   19c94:	1091d504 	addi	r2,r2,18260
   19c98:	10800017 	ldw	r2,0(r2)
   19c9c:	10800c03 	ldbu	r2,48(r2)
   19ca0:	10800054 	ori	r2,r2,1
   19ca4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   19ca8:	008000b4 	movhi	r2,2
   19cac:	1091d504 	addi	r2,r2,18260
   19cb0:	10800017 	ldw	r2,0(r2)
   19cb4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   19cb8:	008000b4 	movhi	r2,2
   19cbc:	1091d504 	addi	r2,r2,18260
   19cc0:	10800017 	ldw	r2,0(r2)
   19cc4:	e0fffe0b 	ldhu	r3,-8(fp)
   19cc8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   19ccc:	e13ffd17 	ldw	r4,-12(fp)
   19cd0:	00149380 	call	14938 <OS_EventTaskWait>
   19cd4:	e0bff717 	ldw	r2,-36(fp)
   19cd8:	e0bffa15 	stw	r2,-24(fp)
   19cdc:	e0bffa17 	ldw	r2,-24(fp)
   19ce0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   19ce4:	00151b80 	call	151b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19ce8:	0005303a 	rdctl	r2,status
   19cec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19cf0:	e0fffb17 	ldw	r3,-20(fp)
   19cf4:	00bfff84 	movi	r2,-2
   19cf8:	1884703a 	and	r2,r3,r2
   19cfc:	1001703a 	wrctl	status,r2
  
  return context;
   19d00:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   19d04:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   19d08:	008000b4 	movhi	r2,2
   19d0c:	1091d504 	addi	r2,r2,18260
   19d10:	10800017 	ldw	r2,0(r2)
   19d14:	10800c43 	ldbu	r2,49(r2)
   19d18:	10803fcc 	andi	r2,r2,255
   19d1c:	10000326 	beq	r2,zero,19d2c <OSSemPend+0x1c0>
   19d20:	108000a0 	cmpeqi	r2,r2,2
   19d24:	1000041e 	bne	r2,zero,19d38 <OSSemPend+0x1cc>
   19d28:	00000706 	br	19d48 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   19d2c:	e0bfff17 	ldw	r2,-4(fp)
   19d30:	10000005 	stb	zero,0(r2)
             break;
   19d34:	00000e06 	br	19d70 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   19d38:	e0bfff17 	ldw	r2,-4(fp)
   19d3c:	00c00384 	movi	r3,14
   19d40:	10c00005 	stb	r3,0(r2)
             break;
   19d44:	00000a06 	br	19d70 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   19d48:	008000b4 	movhi	r2,2
   19d4c:	1091d504 	addi	r2,r2,18260
   19d50:	10800017 	ldw	r2,0(r2)
   19d54:	1009883a 	mov	r4,r2
   19d58:	e17ffd17 	ldw	r5,-12(fp)
   19d5c:	0014b900 	call	14b90 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   19d60:	e0bfff17 	ldw	r2,-4(fp)
   19d64:	00c00284 	movi	r3,10
   19d68:	10c00005 	stb	r3,0(r2)
             break;
   19d6c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   19d70:	008000b4 	movhi	r2,2
   19d74:	1091d504 	addi	r2,r2,18260
   19d78:	10800017 	ldw	r2,0(r2)
   19d7c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   19d80:	008000b4 	movhi	r2,2
   19d84:	1091d504 	addi	r2,r2,18260
   19d88:	10800017 	ldw	r2,0(r2)
   19d8c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   19d90:	008000b4 	movhi	r2,2
   19d94:	1091d504 	addi	r2,r2,18260
   19d98:	10800017 	ldw	r2,0(r2)
   19d9c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   19da0:	008000b4 	movhi	r2,2
   19da4:	1091d504 	addi	r2,r2,18260
   19da8:	10800017 	ldw	r2,0(r2)
   19dac:	10000815 	stw	zero,32(r2)
   19db0:	e0bff717 	ldw	r2,-36(fp)
   19db4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19db8:	e0bffc17 	ldw	r2,-16(fp)
   19dbc:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   19dc0:	e037883a 	mov	sp,fp
   19dc4:	dfc00117 	ldw	ra,4(sp)
   19dc8:	df000017 	ldw	fp,0(sp)
   19dcc:	dec00204 	addi	sp,sp,8
   19dd0:	f800283a 	ret

00019dd4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   19dd4:	defff604 	addi	sp,sp,-40
   19dd8:	dfc00915 	stw	ra,36(sp)
   19ddc:	df000815 	stw	fp,32(sp)
   19de0:	df000804 	addi	fp,sp,32
   19de4:	e13ffd15 	stw	r4,-12(fp)
   19de8:	2805883a 	mov	r2,r5
   19dec:	e1bfff15 	stw	r6,-4(fp)
   19df0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19df4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   19df8:	e0bfff17 	ldw	r2,-4(fp)
   19dfc:	1000021e 	bne	r2,zero,19e08 <OSSemPendAbort+0x34>
        return (0);
   19e00:	0005883a 	mov	r2,zero
   19e04:	00004906 	br	19f2c <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19e08:	e0bffd17 	ldw	r2,-12(fp)
   19e0c:	1000051e 	bne	r2,zero,19e24 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   19e10:	e0bfff17 	ldw	r2,-4(fp)
   19e14:	00c00104 	movi	r3,4
   19e18:	10c00005 	stb	r3,0(r2)
        return (0);
   19e1c:	0005883a 	mov	r2,zero
   19e20:	00004206 	br	19f2c <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   19e24:	e0bffd17 	ldw	r2,-12(fp)
   19e28:	10800003 	ldbu	r2,0(r2)
   19e2c:	10803fcc 	andi	r2,r2,255
   19e30:	108000e0 	cmpeqi	r2,r2,3
   19e34:	1000051e 	bne	r2,zero,19e4c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   19e38:	e0bfff17 	ldw	r2,-4(fp)
   19e3c:	00c00044 	movi	r3,1
   19e40:	10c00005 	stb	r3,0(r2)
        return (0);
   19e44:	0005883a 	mov	r2,zero
   19e48:	00003806 	br	19f2c <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19e4c:	0005303a 	rdctl	r2,status
   19e50:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19e54:	e0fffa17 	ldw	r3,-24(fp)
   19e58:	00bfff84 	movi	r2,-2
   19e5c:	1884703a 	and	r2,r3,r2
   19e60:	1001703a 	wrctl	status,r2
  
  return context;
   19e64:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   19e68:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   19e6c:	e0bffd17 	ldw	r2,-12(fp)
   19e70:	10800283 	ldbu	r2,10(r2)
   19e74:	10803fcc 	andi	r2,r2,255
   19e78:	10002526 	beq	r2,zero,19f10 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   19e7c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   19e80:	e0bffe03 	ldbu	r2,-8(fp)
   19e84:	10800060 	cmpeqi	r2,r2,1
   19e88:	10000e26 	beq	r2,zero,19ec4 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   19e8c:	00000806 	br	19eb0 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   19e90:	e13ffd17 	ldw	r4,-12(fp)
   19e94:	000b883a 	mov	r5,zero
   19e98:	01800044 	movi	r6,1
   19e9c:	01c00084 	movi	r7,2
   19ea0:	00147a00 	call	147a0 <OS_EventTaskRdy>
                     nbr_tasks++;
   19ea4:	e0bff803 	ldbu	r2,-32(fp)
   19ea8:	10800044 	addi	r2,r2,1
   19eac:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   19eb0:	e0bffd17 	ldw	r2,-12(fp)
   19eb4:	10800283 	ldbu	r2,10(r2)
   19eb8:	10803fcc 	andi	r2,r2,255
   19ebc:	103ff41e 	bne	r2,zero,19e90 <__alt_mem_Flash_flash_data+0xf4019e90>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   19ec0:	00000906 	br	19ee8 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   19ec4:	e13ffd17 	ldw	r4,-12(fp)
   19ec8:	000b883a 	mov	r5,zero
   19ecc:	01800044 	movi	r6,1
   19ed0:	01c00084 	movi	r7,2
   19ed4:	00147a00 	call	147a0 <OS_EventTaskRdy>
                 nbr_tasks++;
   19ed8:	e0bff803 	ldbu	r2,-32(fp)
   19edc:	10800044 	addi	r2,r2,1
   19ee0:	e0bff805 	stb	r2,-32(fp)
                 break;
   19ee4:	0001883a 	nop
   19ee8:	e0bff917 	ldw	r2,-28(fp)
   19eec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19ef0:	e0bffb17 	ldw	r2,-20(fp)
   19ef4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   19ef8:	00151b80 	call	151b8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   19efc:	e0bfff17 	ldw	r2,-4(fp)
   19f00:	00c00384 	movi	r3,14
   19f04:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   19f08:	e0bff803 	ldbu	r2,-32(fp)
   19f0c:	00000706 	br	19f2c <OSSemPendAbort+0x158>
   19f10:	e0bff917 	ldw	r2,-28(fp)
   19f14:	e0bffc15 	stw	r2,-16(fp)
   19f18:	e0bffc17 	ldw	r2,-16(fp)
   19f1c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   19f20:	e0bfff17 	ldw	r2,-4(fp)
   19f24:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   19f28:	0005883a 	mov	r2,zero
}
   19f2c:	e037883a 	mov	sp,fp
   19f30:	dfc00117 	ldw	ra,4(sp)
   19f34:	df000017 	ldw	fp,0(sp)
   19f38:	dec00204 	addi	sp,sp,8
   19f3c:	f800283a 	ret

00019f40 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   19f40:	defff804 	addi	sp,sp,-32
   19f44:	dfc00715 	stw	ra,28(sp)
   19f48:	df000615 	stw	fp,24(sp)
   19f4c:	df000604 	addi	fp,sp,24
   19f50:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19f54:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19f58:	e0bfff17 	ldw	r2,-4(fp)
   19f5c:	1000021e 	bne	r2,zero,19f68 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   19f60:	00800104 	movi	r2,4
   19f64:	00003506 	br	1a03c <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   19f68:	e0bfff17 	ldw	r2,-4(fp)
   19f6c:	10800003 	ldbu	r2,0(r2)
   19f70:	10803fcc 	andi	r2,r2,255
   19f74:	108000e0 	cmpeqi	r2,r2,3
   19f78:	1000021e 	bne	r2,zero,19f84 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   19f7c:	00800044 	movi	r2,1
   19f80:	00002e06 	br	1a03c <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19f84:	0005303a 	rdctl	r2,status
   19f88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19f8c:	e0fffb17 	ldw	r3,-20(fp)
   19f90:	00bfff84 	movi	r2,-2
   19f94:	1884703a 	and	r2,r3,r2
   19f98:	1001703a 	wrctl	status,r2
  
  return context;
   19f9c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   19fa0:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   19fa4:	e0bfff17 	ldw	r2,-4(fp)
   19fa8:	10800283 	ldbu	r2,10(r2)
   19fac:	10803fcc 	andi	r2,r2,255
   19fb0:	10000c26 	beq	r2,zero,19fe4 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   19fb4:	e13fff17 	ldw	r4,-4(fp)
   19fb8:	000b883a 	mov	r5,zero
   19fbc:	01800044 	movi	r6,1
   19fc0:	000f883a 	mov	r7,zero
   19fc4:	00147a00 	call	147a0 <OS_EventTaskRdy>
   19fc8:	e0bffa17 	ldw	r2,-24(fp)
   19fcc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19fd0:	e0bffc17 	ldw	r2,-16(fp)
   19fd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   19fd8:	00151b80 	call	151b8 <OS_Sched>
        return (OS_ERR_NONE);
   19fdc:	0005883a 	mov	r2,zero
   19fe0:	00001606 	br	1a03c <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   19fe4:	e0bfff17 	ldw	r2,-4(fp)
   19fe8:	1080020b 	ldhu	r2,8(r2)
   19fec:	10ffffcc 	andi	r3,r2,65535
   19ff0:	00bfffd4 	movui	r2,65535
   19ff4:	18800c26 	beq	r3,r2,1a028 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   19ff8:	e0bfff17 	ldw	r2,-4(fp)
   19ffc:	1080020b 	ldhu	r2,8(r2)
   1a000:	10800044 	addi	r2,r2,1
   1a004:	1007883a 	mov	r3,r2
   1a008:	e0bfff17 	ldw	r2,-4(fp)
   1a00c:	10c0020d 	sth	r3,8(r2)
   1a010:	e0bffa17 	ldw	r2,-24(fp)
   1a014:	e0bffd15 	stw	r2,-12(fp)
   1a018:	e0bffd17 	ldw	r2,-12(fp)
   1a01c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1a020:	0005883a 	mov	r2,zero
   1a024:	00000506 	br	1a03c <OSSemPost+0xfc>
   1a028:	e0bffa17 	ldw	r2,-24(fp)
   1a02c:	e0bffe15 	stw	r2,-8(fp)
   1a030:	e0bffe17 	ldw	r2,-8(fp)
   1a034:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   1a038:	00800c84 	movi	r2,50
}
   1a03c:	e037883a 	mov	sp,fp
   1a040:	dfc00117 	ldw	ra,4(sp)
   1a044:	df000017 	ldw	fp,0(sp)
   1a048:	dec00204 	addi	sp,sp,8
   1a04c:	f800283a 	ret

0001a050 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   1a050:	defff704 	addi	sp,sp,-36
   1a054:	df000815 	stw	fp,32(sp)
   1a058:	df000804 	addi	fp,sp,32
   1a05c:	e13ffe15 	stw	r4,-8(fp)
   1a060:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1a064:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1a068:	e0bffe17 	ldw	r2,-8(fp)
   1a06c:	1000021e 	bne	r2,zero,1a078 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1a070:	00800104 	movi	r2,4
   1a074:	00003606 	br	1a150 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   1a078:	e0bfff17 	ldw	r2,-4(fp)
   1a07c:	1000021e 	bne	r2,zero,1a088 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1a080:	00800244 	movi	r2,9
   1a084:	00003206 	br	1a150 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   1a088:	e0bffe17 	ldw	r2,-8(fp)
   1a08c:	10800003 	ldbu	r2,0(r2)
   1a090:	10803fcc 	andi	r2,r2,255
   1a094:	108000e0 	cmpeqi	r2,r2,3
   1a098:	1000021e 	bne	r2,zero,1a0a4 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1a09c:	00800044 	movi	r2,1
   1a0a0:	00002b06 	br	1a150 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a0a4:	0005303a 	rdctl	r2,status
   1a0a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a0ac:	e0fffc17 	ldw	r3,-16(fp)
   1a0b0:	00bfff84 	movi	r2,-2
   1a0b4:	1884703a 	and	r2,r3,r2
   1a0b8:	1001703a 	wrctl	status,r2
  
  return context;
   1a0bc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1a0c0:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   1a0c4:	e0bffe17 	ldw	r2,-8(fp)
   1a0c8:	10c00283 	ldbu	r3,10(r2)
   1a0cc:	e0bfff17 	ldw	r2,-4(fp)
   1a0d0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   1a0d4:	e0bffe17 	ldw	r2,-8(fp)
   1a0d8:	108002c4 	addi	r2,r2,11
   1a0dc:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   1a0e0:	e0bfff17 	ldw	r2,-4(fp)
   1a0e4:	10800084 	addi	r2,r2,2
   1a0e8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1a0ec:	e03ffa05 	stb	zero,-24(fp)
   1a0f0:	00000b06 	br	1a120 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   1a0f4:	e0bff917 	ldw	r2,-28(fp)
   1a0f8:	10c00044 	addi	r3,r2,1
   1a0fc:	e0fff915 	stw	r3,-28(fp)
   1a100:	e0fff817 	ldw	r3,-32(fp)
   1a104:	19000044 	addi	r4,r3,1
   1a108:	e13ff815 	stw	r4,-32(fp)
   1a10c:	18c00003 	ldbu	r3,0(r3)
   1a110:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1a114:	e0bffa03 	ldbu	r2,-24(fp)
   1a118:	10800044 	addi	r2,r2,1
   1a11c:	e0bffa05 	stb	r2,-24(fp)
   1a120:	e0bffa03 	ldbu	r2,-24(fp)
   1a124:	108000f0 	cmpltui	r2,r2,3
   1a128:	103ff21e 	bne	r2,zero,1a0f4 <__alt_mem_Flash_flash_data+0xf401a0f4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   1a12c:	e0bffe17 	ldw	r2,-8(fp)
   1a130:	10c0020b 	ldhu	r3,8(r2)
   1a134:	e0bfff17 	ldw	r2,-4(fp)
   1a138:	10c0000d 	sth	r3,0(r2)
   1a13c:	e0bffb17 	ldw	r2,-20(fp)
   1a140:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a144:	e0bffd17 	ldw	r2,-12(fp)
   1a148:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1a14c:	0005883a 	mov	r2,zero
}
   1a150:	e037883a 	mov	sp,fp
   1a154:	df000017 	ldw	fp,0(sp)
   1a158:	dec00104 	addi	sp,sp,4
   1a15c:	f800283a 	ret

0001a160 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   1a160:	defff904 	addi	sp,sp,-28
   1a164:	df000615 	stw	fp,24(sp)
   1a168:	df000604 	addi	fp,sp,24
   1a16c:	e13ffd15 	stw	r4,-12(fp)
   1a170:	2805883a 	mov	r2,r5
   1a174:	e1bfff15 	stw	r6,-4(fp)
   1a178:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1a17c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1a180:	e0bfff17 	ldw	r2,-4(fp)
   1a184:	1000011e 	bne	r2,zero,1a18c <OSSemSet+0x2c>
        return;
   1a188:	00003006 	br	1a24c <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1a18c:	e0bffd17 	ldw	r2,-12(fp)
   1a190:	1000041e 	bne	r2,zero,1a1a4 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   1a194:	e0bfff17 	ldw	r2,-4(fp)
   1a198:	00c00104 	movi	r3,4
   1a19c:	10c00005 	stb	r3,0(r2)
        return;
   1a1a0:	00002a06 	br	1a24c <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1a1a4:	e0bffd17 	ldw	r2,-12(fp)
   1a1a8:	10800003 	ldbu	r2,0(r2)
   1a1ac:	10803fcc 	andi	r2,r2,255
   1a1b0:	108000e0 	cmpeqi	r2,r2,3
   1a1b4:	1000041e 	bne	r2,zero,1a1c8 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   1a1b8:	e0bfff17 	ldw	r2,-4(fp)
   1a1bc:	00c00044 	movi	r3,1
   1a1c0:	10c00005 	stb	r3,0(r2)
        return;
   1a1c4:	00002106 	br	1a24c <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a1c8:	0005303a 	rdctl	r2,status
   1a1cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a1d0:	e0fffb17 	ldw	r3,-20(fp)
   1a1d4:	00bfff84 	movi	r2,-2
   1a1d8:	1884703a 	and	r2,r3,r2
   1a1dc:	1001703a 	wrctl	status,r2
  
  return context;
   1a1e0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1a1e4:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   1a1e8:	e0bfff17 	ldw	r2,-4(fp)
   1a1ec:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   1a1f0:	e0bffd17 	ldw	r2,-12(fp)
   1a1f4:	1080020b 	ldhu	r2,8(r2)
   1a1f8:	10bfffcc 	andi	r2,r2,65535
   1a1fc:	10000426 	beq	r2,zero,1a210 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   1a200:	e0bffd17 	ldw	r2,-12(fp)
   1a204:	e0fffe0b 	ldhu	r3,-8(fp)
   1a208:	10c0020d 	sth	r3,8(r2)
   1a20c:	00000b06 	br	1a23c <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   1a210:	e0bffd17 	ldw	r2,-12(fp)
   1a214:	10800283 	ldbu	r2,10(r2)
   1a218:	10803fcc 	andi	r2,r2,255
   1a21c:	1000041e 	bne	r2,zero,1a230 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   1a220:	e0bffd17 	ldw	r2,-12(fp)
   1a224:	e0fffe0b 	ldhu	r3,-8(fp)
   1a228:	10c0020d 	sth	r3,8(r2)
   1a22c:	00000306 	br	1a23c <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   1a230:	e0bfff17 	ldw	r2,-4(fp)
   1a234:	00c01244 	movi	r3,73
   1a238:	10c00005 	stb	r3,0(r2)
   1a23c:	e0bffa17 	ldw	r2,-24(fp)
   1a240:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a244:	e0bffc17 	ldw	r2,-16(fp)
   1a248:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   1a24c:	e037883a 	mov	sp,fp
   1a250:	df000017 	ldw	fp,0(sp)
   1a254:	dec00104 	addi	sp,sp,4
   1a258:	f800283a 	ret

0001a25c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   1a25c:	defff104 	addi	sp,sp,-60
   1a260:	dfc00e15 	stw	ra,56(sp)
   1a264:	df000d15 	stw	fp,52(sp)
   1a268:	df000d04 	addi	fp,sp,52
   1a26c:	2007883a 	mov	r3,r4
   1a270:	2805883a 	mov	r2,r5
   1a274:	e0fffe05 	stb	r3,-8(fp)
   1a278:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   1a27c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   1a280:	e0bffe03 	ldbu	r2,-8(fp)
   1a284:	10800530 	cmpltui	r2,r2,20
   1a288:	1000051e 	bne	r2,zero,1a2a0 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   1a28c:	e0bffe03 	ldbu	r2,-8(fp)
   1a290:	10803fe0 	cmpeqi	r2,r2,255
   1a294:	1000021e 	bne	r2,zero,1a2a0 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   1a298:	00800a84 	movi	r2,42
   1a29c:	00013a06 	br	1a788 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   1a2a0:	e0bfff03 	ldbu	r2,-4(fp)
   1a2a4:	10800530 	cmpltui	r2,r2,20
   1a2a8:	1000021e 	bne	r2,zero,1a2b4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   1a2ac:	00800a84 	movi	r2,42
   1a2b0:	00013506 	br	1a788 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a2b4:	0005303a 	rdctl	r2,status
   1a2b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a2bc:	e0fff917 	ldw	r3,-28(fp)
   1a2c0:	00bfff84 	movi	r2,-2
   1a2c4:	1884703a 	and	r2,r3,r2
   1a2c8:	1001703a 	wrctl	status,r2
  
  return context;
   1a2cc:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1a2d0:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   1a2d4:	e0ffff03 	ldbu	r3,-4(fp)
   1a2d8:	008000f4 	movhi	r2,3
   1a2dc:	10985004 	addi	r2,r2,24896
   1a2e0:	18c7883a 	add	r3,r3,r3
   1a2e4:	18c7883a 	add	r3,r3,r3
   1a2e8:	10c5883a 	add	r2,r2,r3
   1a2ec:	10800017 	ldw	r2,0(r2)
   1a2f0:	10000626 	beq	r2,zero,1a30c <OSTaskChangePrio+0xb0>
   1a2f4:	e0bff517 	ldw	r2,-44(fp)
   1a2f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a2fc:	e0bffa17 	ldw	r2,-24(fp)
   1a300:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   1a304:	00800a04 	movi	r2,40
   1a308:	00011f06 	br	1a788 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   1a30c:	e0bffe03 	ldbu	r2,-8(fp)
   1a310:	10803fd8 	cmpnei	r2,r2,255
   1a314:	1000051e 	bne	r2,zero,1a32c <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   1a318:	008000b4 	movhi	r2,2
   1a31c:	1091d504 	addi	r2,r2,18260
   1a320:	10800017 	ldw	r2,0(r2)
   1a324:	10800c83 	ldbu	r2,50(r2)
   1a328:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   1a32c:	e0fffe03 	ldbu	r3,-8(fp)
   1a330:	008000f4 	movhi	r2,3
   1a334:	10985004 	addi	r2,r2,24896
   1a338:	18c7883a 	add	r3,r3,r3
   1a33c:	18c7883a 	add	r3,r3,r3
   1a340:	10c5883a 	add	r2,r2,r3
   1a344:	10800017 	ldw	r2,0(r2)
   1a348:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   1a34c:	e0bff617 	ldw	r2,-40(fp)
   1a350:	1000061e 	bne	r2,zero,1a36c <OSTaskChangePrio+0x110>
   1a354:	e0bff517 	ldw	r2,-44(fp)
   1a358:	e0bffb15 	stw	r2,-20(fp)
   1a35c:	e0bffb17 	ldw	r2,-20(fp)
   1a360:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   1a364:	00800a44 	movi	r2,41
   1a368:	00010706 	br	1a788 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   1a36c:	e0bff617 	ldw	r2,-40(fp)
   1a370:	10800058 	cmpnei	r2,r2,1
   1a374:	1000061e 	bne	r2,zero,1a390 <OSTaskChangePrio+0x134>
   1a378:	e0bff517 	ldw	r2,-44(fp)
   1a37c:	e0bffc15 	stw	r2,-16(fp)
   1a380:	e0bffc17 	ldw	r2,-16(fp)
   1a384:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   1a388:	008010c4 	movi	r2,67
   1a38c:	0000fe06 	br	1a788 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   1a390:	e0bfff03 	ldbu	r2,-4(fp)
   1a394:	1004d0fa 	srli	r2,r2,3
   1a398:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   1a39c:	e0bfff03 	ldbu	r2,-4(fp)
   1a3a0:	108001cc 	andi	r2,r2,7
   1a3a4:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   1a3a8:	e0bff703 	ldbu	r2,-36(fp)
   1a3ac:	00c00044 	movi	r3,1
   1a3b0:	1884983a 	sll	r2,r3,r2
   1a3b4:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   1a3b8:	e0bff743 	ldbu	r2,-35(fp)
   1a3bc:	00c00044 	movi	r3,1
   1a3c0:	1884983a 	sll	r2,r3,r2
   1a3c4:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   1a3c8:	e0fffe03 	ldbu	r3,-8(fp)
   1a3cc:	008000f4 	movhi	r2,3
   1a3d0:	10985004 	addi	r2,r2,24896
   1a3d4:	18c7883a 	add	r3,r3,r3
   1a3d8:	18c7883a 	add	r3,r3,r3
   1a3dc:	10c5883a 	add	r2,r2,r3
   1a3e0:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   1a3e4:	e0ffff03 	ldbu	r3,-4(fp)
   1a3e8:	008000f4 	movhi	r2,3
   1a3ec:	10985004 	addi	r2,r2,24896
   1a3f0:	18c7883a 	add	r3,r3,r3
   1a3f4:	18c7883a 	add	r3,r3,r3
   1a3f8:	10c5883a 	add	r2,r2,r3
   1a3fc:	e0fff617 	ldw	r3,-40(fp)
   1a400:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   1a404:	e0bff617 	ldw	r2,-40(fp)
   1a408:	10800d03 	ldbu	r2,52(r2)
   1a40c:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   1a410:	e0bff617 	ldw	r2,-40(fp)
   1a414:	10800d83 	ldbu	r2,54(r2)
   1a418:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   1a41c:	e0bff617 	ldw	r2,-40(fp)
   1a420:	10800d43 	ldbu	r2,53(r2)
   1a424:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   1a428:	e0fff803 	ldbu	r3,-32(fp)
   1a42c:	008000b4 	movhi	r2,2
   1a430:	1091d244 	addi	r2,r2,18249
   1a434:	10c5883a 	add	r2,r2,r3
   1a438:	10c00003 	ldbu	r3,0(r2)
   1a43c:	e0bff883 	ldbu	r2,-30(fp)
   1a440:	1884703a 	and	r2,r3,r2
   1a444:	10803fcc 	andi	r2,r2,255
   1a448:	10003726 	beq	r2,zero,1a528 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   1a44c:	e0fff803 	ldbu	r3,-32(fp)
   1a450:	e13ff803 	ldbu	r4,-32(fp)
   1a454:	008000b4 	movhi	r2,2
   1a458:	1091d244 	addi	r2,r2,18249
   1a45c:	1105883a 	add	r2,r2,r4
   1a460:	10800003 	ldbu	r2,0(r2)
   1a464:	1009883a 	mov	r4,r2
   1a468:	e0bff883 	ldbu	r2,-30(fp)
   1a46c:	0084303a 	nor	r2,zero,r2
   1a470:	2084703a 	and	r2,r4,r2
   1a474:	1009883a 	mov	r4,r2
   1a478:	008000b4 	movhi	r2,2
   1a47c:	1091d244 	addi	r2,r2,18249
   1a480:	10c5883a 	add	r2,r2,r3
   1a484:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   1a488:	e0fff803 	ldbu	r3,-32(fp)
   1a48c:	008000b4 	movhi	r2,2
   1a490:	1091d244 	addi	r2,r2,18249
   1a494:	10c5883a 	add	r2,r2,r3
   1a498:	10800003 	ldbu	r2,0(r2)
   1a49c:	10803fcc 	andi	r2,r2,255
   1a4a0:	10000b1e 	bne	r2,zero,1a4d0 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   1a4a4:	e0bff843 	ldbu	r2,-31(fp)
   1a4a8:	0084303a 	nor	r2,zero,r2
   1a4ac:	1007883a 	mov	r3,r2
   1a4b0:	008000b4 	movhi	r2,2
   1a4b4:	1091d204 	addi	r2,r2,18248
   1a4b8:	10800003 	ldbu	r2,0(r2)
   1a4bc:	1884703a 	and	r2,r3,r2
   1a4c0:	1007883a 	mov	r3,r2
   1a4c4:	008000b4 	movhi	r2,2
   1a4c8:	1091d204 	addi	r2,r2,18248
   1a4cc:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   1a4d0:	008000b4 	movhi	r2,2
   1a4d4:	1091d204 	addi	r2,r2,18248
   1a4d8:	10c00003 	ldbu	r3,0(r2)
   1a4dc:	e0bff783 	ldbu	r2,-34(fp)
   1a4e0:	1884b03a 	or	r2,r3,r2
   1a4e4:	1007883a 	mov	r3,r2
   1a4e8:	008000b4 	movhi	r2,2
   1a4ec:	1091d204 	addi	r2,r2,18248
   1a4f0:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   1a4f4:	e0fff703 	ldbu	r3,-36(fp)
   1a4f8:	e13ff703 	ldbu	r4,-36(fp)
   1a4fc:	008000b4 	movhi	r2,2
   1a500:	1091d244 	addi	r2,r2,18249
   1a504:	1105883a 	add	r2,r2,r4
   1a508:	11000003 	ldbu	r4,0(r2)
   1a50c:	e0bff7c3 	ldbu	r2,-33(fp)
   1a510:	2084b03a 	or	r2,r4,r2
   1a514:	1009883a 	mov	r4,r2
   1a518:	008000b4 	movhi	r2,2
   1a51c:	1091d244 	addi	r2,r2,18249
   1a520:	10c5883a 	add	r2,r2,r3
   1a524:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   1a528:	e0bff617 	ldw	r2,-40(fp)
   1a52c:	10800717 	ldw	r2,28(r2)
   1a530:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   1a534:	e0bff317 	ldw	r2,-52(fp)
   1a538:	10003326 	beq	r2,zero,1a608 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   1a53c:	e0bff803 	ldbu	r2,-32(fp)
   1a540:	e0fff803 	ldbu	r3,-32(fp)
   1a544:	e13ff317 	ldw	r4,-52(fp)
   1a548:	20c7883a 	add	r3,r4,r3
   1a54c:	18c00204 	addi	r3,r3,8
   1a550:	18c000c3 	ldbu	r3,3(r3)
   1a554:	1809883a 	mov	r4,r3
   1a558:	e0fff883 	ldbu	r3,-30(fp)
   1a55c:	00c6303a 	nor	r3,zero,r3
   1a560:	20c6703a 	and	r3,r4,r3
   1a564:	1809883a 	mov	r4,r3
   1a568:	e0fff317 	ldw	r3,-52(fp)
   1a56c:	1885883a 	add	r2,r3,r2
   1a570:	10800204 	addi	r2,r2,8
   1a574:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   1a578:	e0bff803 	ldbu	r2,-32(fp)
   1a57c:	e0fff317 	ldw	r3,-52(fp)
   1a580:	1885883a 	add	r2,r3,r2
   1a584:	10800204 	addi	r2,r2,8
   1a588:	108000c3 	ldbu	r2,3(r2)
   1a58c:	10803fcc 	andi	r2,r2,255
   1a590:	1000091e 	bne	r2,zero,1a5b8 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   1a594:	e0bff317 	ldw	r2,-52(fp)
   1a598:	10800283 	ldbu	r2,10(r2)
   1a59c:	1007883a 	mov	r3,r2
   1a5a0:	e0bff843 	ldbu	r2,-31(fp)
   1a5a4:	0084303a 	nor	r2,zero,r2
   1a5a8:	1884703a 	and	r2,r3,r2
   1a5ac:	1007883a 	mov	r3,r2
   1a5b0:	e0bff317 	ldw	r2,-52(fp)
   1a5b4:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   1a5b8:	e0bff317 	ldw	r2,-52(fp)
   1a5bc:	10c00283 	ldbu	r3,10(r2)
   1a5c0:	e0bff783 	ldbu	r2,-34(fp)
   1a5c4:	1884b03a 	or	r2,r3,r2
   1a5c8:	1007883a 	mov	r3,r2
   1a5cc:	e0bff317 	ldw	r2,-52(fp)
   1a5d0:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   1a5d4:	e0bff703 	ldbu	r2,-36(fp)
   1a5d8:	e0fff703 	ldbu	r3,-36(fp)
   1a5dc:	e13ff317 	ldw	r4,-52(fp)
   1a5e0:	20c7883a 	add	r3,r4,r3
   1a5e4:	18c00204 	addi	r3,r3,8
   1a5e8:	190000c3 	ldbu	r4,3(r3)
   1a5ec:	e0fff7c3 	ldbu	r3,-33(fp)
   1a5f0:	20c6b03a 	or	r3,r4,r3
   1a5f4:	1809883a 	mov	r4,r3
   1a5f8:	e0fff317 	ldw	r3,-52(fp)
   1a5fc:	1885883a 	add	r2,r3,r2
   1a600:	10800204 	addi	r2,r2,8
   1a604:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   1a608:	e0bff617 	ldw	r2,-40(fp)
   1a60c:	10800817 	ldw	r2,32(r2)
   1a610:	10004226 	beq	r2,zero,1a71c <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   1a614:	e0bff617 	ldw	r2,-40(fp)
   1a618:	10800817 	ldw	r2,32(r2)
   1a61c:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   1a620:	e0bff417 	ldw	r2,-48(fp)
   1a624:	10800017 	ldw	r2,0(r2)
   1a628:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   1a62c:	00003906 	br	1a714 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   1a630:	e0bff803 	ldbu	r2,-32(fp)
   1a634:	e0fff803 	ldbu	r3,-32(fp)
   1a638:	e13ff317 	ldw	r4,-52(fp)
   1a63c:	20c7883a 	add	r3,r4,r3
   1a640:	18c00204 	addi	r3,r3,8
   1a644:	18c000c3 	ldbu	r3,3(r3)
   1a648:	1809883a 	mov	r4,r3
   1a64c:	e0fff883 	ldbu	r3,-30(fp)
   1a650:	00c6303a 	nor	r3,zero,r3
   1a654:	20c6703a 	and	r3,r4,r3
   1a658:	1809883a 	mov	r4,r3
   1a65c:	e0fff317 	ldw	r3,-52(fp)
   1a660:	1885883a 	add	r2,r3,r2
   1a664:	10800204 	addi	r2,r2,8
   1a668:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   1a66c:	e0bff803 	ldbu	r2,-32(fp)
   1a670:	e0fff317 	ldw	r3,-52(fp)
   1a674:	1885883a 	add	r2,r3,r2
   1a678:	10800204 	addi	r2,r2,8
   1a67c:	108000c3 	ldbu	r2,3(r2)
   1a680:	10803fcc 	andi	r2,r2,255
   1a684:	1000091e 	bne	r2,zero,1a6ac <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   1a688:	e0bff317 	ldw	r2,-52(fp)
   1a68c:	10800283 	ldbu	r2,10(r2)
   1a690:	1007883a 	mov	r3,r2
   1a694:	e0bff843 	ldbu	r2,-31(fp)
   1a698:	0084303a 	nor	r2,zero,r2
   1a69c:	1884703a 	and	r2,r3,r2
   1a6a0:	1007883a 	mov	r3,r2
   1a6a4:	e0bff317 	ldw	r2,-52(fp)
   1a6a8:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   1a6ac:	e0bff317 	ldw	r2,-52(fp)
   1a6b0:	10c00283 	ldbu	r3,10(r2)
   1a6b4:	e0bff783 	ldbu	r2,-34(fp)
   1a6b8:	1884b03a 	or	r2,r3,r2
   1a6bc:	1007883a 	mov	r3,r2
   1a6c0:	e0bff317 	ldw	r2,-52(fp)
   1a6c4:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   1a6c8:	e0bff703 	ldbu	r2,-36(fp)
   1a6cc:	e0fff703 	ldbu	r3,-36(fp)
   1a6d0:	e13ff317 	ldw	r4,-52(fp)
   1a6d4:	20c7883a 	add	r3,r4,r3
   1a6d8:	18c00204 	addi	r3,r3,8
   1a6dc:	190000c3 	ldbu	r4,3(r3)
   1a6e0:	e0fff7c3 	ldbu	r3,-33(fp)
   1a6e4:	20c6b03a 	or	r3,r4,r3
   1a6e8:	1809883a 	mov	r4,r3
   1a6ec:	e0fff317 	ldw	r3,-52(fp)
   1a6f0:	1885883a 	add	r2,r3,r2
   1a6f4:	10800204 	addi	r2,r2,8
   1a6f8:	110000c5 	stb	r4,3(r2)
            pevents++;
   1a6fc:	e0bff417 	ldw	r2,-48(fp)
   1a700:	10800104 	addi	r2,r2,4
   1a704:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   1a708:	e0bff417 	ldw	r2,-48(fp)
   1a70c:	10800017 	ldw	r2,0(r2)
   1a710:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   1a714:	e0bff317 	ldw	r2,-52(fp)
   1a718:	103fc51e 	bne	r2,zero,1a630 <__alt_mem_Flash_flash_data+0xf401a630>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   1a71c:	e0bff617 	ldw	r2,-40(fp)
   1a720:	e0ffff03 	ldbu	r3,-4(fp)
   1a724:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   1a728:	e0bff617 	ldw	r2,-40(fp)
   1a72c:	e0fff703 	ldbu	r3,-36(fp)
   1a730:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   1a734:	e0bff617 	ldw	r2,-40(fp)
   1a738:	e0fff743 	ldbu	r3,-35(fp)
   1a73c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   1a740:	e0bff617 	ldw	r2,-40(fp)
   1a744:	e0fff783 	ldbu	r3,-34(fp)
   1a748:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   1a74c:	e0bff617 	ldw	r2,-40(fp)
   1a750:	e0fff7c3 	ldbu	r3,-33(fp)
   1a754:	10c00d45 	stb	r3,53(r2)
   1a758:	e0bff517 	ldw	r2,-44(fp)
   1a75c:	e0bffd15 	stw	r2,-12(fp)
   1a760:	e0bffd17 	ldw	r2,-12(fp)
   1a764:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1a768:	008000b4 	movhi	r2,2
   1a76c:	1091c644 	addi	r2,r2,18201
   1a770:	10800003 	ldbu	r2,0(r2)
   1a774:	10803fcc 	andi	r2,r2,255
   1a778:	10800058 	cmpnei	r2,r2,1
   1a77c:	1000011e 	bne	r2,zero,1a784 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   1a780:	00151b80 	call	151b8 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1a784:	0005883a 	mov	r2,zero
}
   1a788:	e037883a 	mov	sp,fp
   1a78c:	dfc00117 	ldw	ra,4(sp)
   1a790:	df000017 	ldw	fp,0(sp)
   1a794:	dec00204 	addi	sp,sp,8
   1a798:	f800283a 	ret

0001a79c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   1a79c:	deffee04 	addi	sp,sp,-72
   1a7a0:	dfc01115 	stw	ra,68(sp)
   1a7a4:	df001015 	stw	fp,64(sp)
   1a7a8:	df001004 	addi	fp,sp,64
   1a7ac:	e13ffc15 	stw	r4,-16(fp)
   1a7b0:	e17ffd15 	stw	r5,-12(fp)
   1a7b4:	e1bffe15 	stw	r6,-8(fp)
   1a7b8:	3805883a 	mov	r2,r7
   1a7bc:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1a7c0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1a7c4:	e0bfff03 	ldbu	r2,-4(fp)
   1a7c8:	10800570 	cmpltui	r2,r2,21
   1a7cc:	1000021e 	bne	r2,zero,1a7d8 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   1a7d0:	00800a84 	movi	r2,42
   1a7d4:	00005b06 	br	1a944 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a7d8:	0005303a 	rdctl	r2,status
   1a7dc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a7e0:	e0fff617 	ldw	r3,-40(fp)
   1a7e4:	00bfff84 	movi	r2,-2
   1a7e8:	1884703a 	and	r2,r3,r2
   1a7ec:	1001703a 	wrctl	status,r2
  
  return context;
   1a7f0:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1a7f4:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1a7f8:	008000b4 	movhi	r2,2
   1a7fc:	1091d404 	addi	r2,r2,18256
   1a800:	10800003 	ldbu	r2,0(r2)
   1a804:	10803fcc 	andi	r2,r2,255
   1a808:	10000626 	beq	r2,zero,1a824 <OSTaskCreate+0x88>
   1a80c:	e0bff317 	ldw	r2,-52(fp)
   1a810:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a814:	e0bff717 	ldw	r2,-36(fp)
   1a818:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1a81c:	00800f04 	movi	r2,60
   1a820:	00004806 	br	1a944 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1a824:	e0ffff03 	ldbu	r3,-4(fp)
   1a828:	008000f4 	movhi	r2,3
   1a82c:	10985004 	addi	r2,r2,24896
   1a830:	18c7883a 	add	r3,r3,r3
   1a834:	18c7883a 	add	r3,r3,r3
   1a838:	10c5883a 	add	r2,r2,r3
   1a83c:	10800017 	ldw	r2,0(r2)
   1a840:	10003b1e 	bne	r2,zero,1a930 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1a844:	e0ffff03 	ldbu	r3,-4(fp)
   1a848:	008000f4 	movhi	r2,3
   1a84c:	10985004 	addi	r2,r2,24896
   1a850:	18c7883a 	add	r3,r3,r3
   1a854:	18c7883a 	add	r3,r3,r3
   1a858:	10c5883a 	add	r2,r2,r3
   1a85c:	00c00044 	movi	r3,1
   1a860:	10c00015 	stw	r3,0(r2)
   1a864:	e0bff317 	ldw	r2,-52(fp)
   1a868:	e0bff815 	stw	r2,-32(fp)
   1a86c:	e0bff817 	ldw	r2,-32(fp)
   1a870:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   1a874:	e13ffc17 	ldw	r4,-16(fp)
   1a878:	e17ffd17 	ldw	r5,-12(fp)
   1a87c:	e1bffe17 	ldw	r6,-8(fp)
   1a880:	000f883a 	mov	r7,zero
   1a884:	001f4900 	call	1f490 <OSTaskStkInit>
   1a888:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   1a88c:	e0bfff03 	ldbu	r2,-4(fp)
   1a890:	d8000015 	stw	zero,0(sp)
   1a894:	d8000115 	stw	zero,4(sp)
   1a898:	d8000215 	stw	zero,8(sp)
   1a89c:	1009883a 	mov	r4,r2
   1a8a0:	e17ff417 	ldw	r5,-48(fp)
   1a8a4:	000d883a 	mov	r6,zero
   1a8a8:	000f883a 	mov	r7,zero
   1a8ac:	00155bc0 	call	155bc <OS_TCBInit>
   1a8b0:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   1a8b4:	e0bff503 	ldbu	r2,-44(fp)
   1a8b8:	1000081e 	bne	r2,zero,1a8dc <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   1a8bc:	008000b4 	movhi	r2,2
   1a8c0:	1091c644 	addi	r2,r2,18201
   1a8c4:	10800003 	ldbu	r2,0(r2)
   1a8c8:	10803fcc 	andi	r2,r2,255
   1a8cc:	10800058 	cmpnei	r2,r2,1
   1a8d0:	1000151e 	bne	r2,zero,1a928 <OSTaskCreate+0x18c>
                OS_Sched();
   1a8d4:	00151b80 	call	151b8 <OS_Sched>
   1a8d8:	00001306 	br	1a928 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a8dc:	0005303a 	rdctl	r2,status
   1a8e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a8e4:	e0fff917 	ldw	r3,-28(fp)
   1a8e8:	00bfff84 	movi	r2,-2
   1a8ec:	1884703a 	and	r2,r3,r2
   1a8f0:	1001703a 	wrctl	status,r2
  
  return context;
   1a8f4:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1a8f8:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   1a8fc:	e0ffff03 	ldbu	r3,-4(fp)
   1a900:	008000f4 	movhi	r2,3
   1a904:	10985004 	addi	r2,r2,24896
   1a908:	18c7883a 	add	r3,r3,r3
   1a90c:	18c7883a 	add	r3,r3,r3
   1a910:	10c5883a 	add	r2,r2,r3
   1a914:	10000015 	stw	zero,0(r2)
   1a918:	e0bff317 	ldw	r2,-52(fp)
   1a91c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a920:	e0bffa17 	ldw	r2,-24(fp)
   1a924:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1a928:	e0bff503 	ldbu	r2,-44(fp)
   1a92c:	00000506 	br	1a944 <OSTaskCreate+0x1a8>
   1a930:	e0bff317 	ldw	r2,-52(fp)
   1a934:	e0bffb15 	stw	r2,-20(fp)
   1a938:	e0bffb17 	ldw	r2,-20(fp)
   1a93c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1a940:	00800a04 	movi	r2,40
}
   1a944:	e037883a 	mov	sp,fp
   1a948:	dfc00117 	ldw	ra,4(sp)
   1a94c:	df000017 	ldw	fp,0(sp)
   1a950:	dec00204 	addi	sp,sp,8
   1a954:	f800283a 	ret

0001a958 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   1a958:	deffec04 	addi	sp,sp,-80
   1a95c:	dfc01315 	stw	ra,76(sp)
   1a960:	df001215 	stw	fp,72(sp)
   1a964:	df001204 	addi	fp,sp,72
   1a968:	e13ffa15 	stw	r4,-24(fp)
   1a96c:	e17ffb15 	stw	r5,-20(fp)
   1a970:	e1bffc15 	stw	r6,-16(fp)
   1a974:	3809883a 	mov	r4,r7
   1a978:	e0c00217 	ldw	r3,8(fp)
   1a97c:	e0800617 	ldw	r2,24(fp)
   1a980:	e13ffd05 	stb	r4,-12(fp)
   1a984:	e0fffe0d 	sth	r3,-8(fp)
   1a988:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1a98c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1a990:	e0bffd03 	ldbu	r2,-12(fp)
   1a994:	10800570 	cmpltui	r2,r2,21
   1a998:	1000021e 	bne	r2,zero,1a9a4 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   1a99c:	00800a84 	movi	r2,42
   1a9a0:	00006306 	br	1ab30 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a9a4:	0005303a 	rdctl	r2,status
   1a9a8:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a9ac:	e0fff417 	ldw	r3,-48(fp)
   1a9b0:	00bfff84 	movi	r2,-2
   1a9b4:	1884703a 	and	r2,r3,r2
   1a9b8:	1001703a 	wrctl	status,r2
  
  return context;
   1a9bc:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1a9c0:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1a9c4:	008000b4 	movhi	r2,2
   1a9c8:	1091d404 	addi	r2,r2,18256
   1a9cc:	10800003 	ldbu	r2,0(r2)
   1a9d0:	10803fcc 	andi	r2,r2,255
   1a9d4:	10000626 	beq	r2,zero,1a9f0 <OSTaskCreateExt+0x98>
   1a9d8:	e0bff117 	ldw	r2,-60(fp)
   1a9dc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a9e0:	e0bff517 	ldw	r2,-44(fp)
   1a9e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1a9e8:	00800f04 	movi	r2,60
   1a9ec:	00005006 	br	1ab30 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1a9f0:	e0fffd03 	ldbu	r3,-12(fp)
   1a9f4:	008000f4 	movhi	r2,3
   1a9f8:	10985004 	addi	r2,r2,24896
   1a9fc:	18c7883a 	add	r3,r3,r3
   1aa00:	18c7883a 	add	r3,r3,r3
   1aa04:	10c5883a 	add	r2,r2,r3
   1aa08:	10800017 	ldw	r2,0(r2)
   1aa0c:	1000431e 	bne	r2,zero,1ab1c <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1aa10:	e0fffd03 	ldbu	r3,-12(fp)
   1aa14:	008000f4 	movhi	r2,3
   1aa18:	10985004 	addi	r2,r2,24896
   1aa1c:	18c7883a 	add	r3,r3,r3
   1aa20:	18c7883a 	add	r3,r3,r3
   1aa24:	10c5883a 	add	r2,r2,r3
   1aa28:	00c00044 	movi	r3,1
   1aa2c:	10c00015 	stw	r3,0(r2)
   1aa30:	e0bff117 	ldw	r2,-60(fp)
   1aa34:	e0bff615 	stw	r2,-40(fp)
   1aa38:	e0bff617 	ldw	r2,-40(fp)
   1aa3c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   1aa40:	e0bfff0b 	ldhu	r2,-4(fp)
   1aa44:	e1000317 	ldw	r4,12(fp)
   1aa48:	e1400417 	ldw	r5,16(fp)
   1aa4c:	100d883a 	mov	r6,r2
   1aa50:	001bae40 	call	1bae4 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   1aa54:	e0bfff0b 	ldhu	r2,-4(fp)
   1aa58:	e13ffa17 	ldw	r4,-24(fp)
   1aa5c:	e17ffb17 	ldw	r5,-20(fp)
   1aa60:	e1bffc17 	ldw	r6,-16(fp)
   1aa64:	100f883a 	mov	r7,r2
   1aa68:	001f4900 	call	1f490 <OSTaskStkInit>
   1aa6c:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   1aa70:	e13ffd03 	ldbu	r4,-12(fp)
   1aa74:	e1fffe0b 	ldhu	r7,-8(fp)
   1aa78:	e0bfff0b 	ldhu	r2,-4(fp)
   1aa7c:	e0c00417 	ldw	r3,16(fp)
   1aa80:	d8c00015 	stw	r3,0(sp)
   1aa84:	e0c00517 	ldw	r3,20(fp)
   1aa88:	d8c00115 	stw	r3,4(sp)
   1aa8c:	d8800215 	stw	r2,8(sp)
   1aa90:	e17ff217 	ldw	r5,-56(fp)
   1aa94:	e1800317 	ldw	r6,12(fp)
   1aa98:	00155bc0 	call	155bc <OS_TCBInit>
   1aa9c:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   1aaa0:	e0bff303 	ldbu	r2,-52(fp)
   1aaa4:	1000081e 	bne	r2,zero,1aac8 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   1aaa8:	008000b4 	movhi	r2,2
   1aaac:	1091c644 	addi	r2,r2,18201
   1aab0:	10800003 	ldbu	r2,0(r2)
   1aab4:	10803fcc 	andi	r2,r2,255
   1aab8:	10800058 	cmpnei	r2,r2,1
   1aabc:	1000151e 	bne	r2,zero,1ab14 <OSTaskCreateExt+0x1bc>
                OS_Sched();
   1aac0:	00151b80 	call	151b8 <OS_Sched>
   1aac4:	00001306 	br	1ab14 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aac8:	0005303a 	rdctl	r2,status
   1aacc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aad0:	e0fff717 	ldw	r3,-36(fp)
   1aad4:	00bfff84 	movi	r2,-2
   1aad8:	1884703a 	and	r2,r3,r2
   1aadc:	1001703a 	wrctl	status,r2
  
  return context;
   1aae0:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1aae4:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   1aae8:	e0fffd03 	ldbu	r3,-12(fp)
   1aaec:	008000f4 	movhi	r2,3
   1aaf0:	10985004 	addi	r2,r2,24896
   1aaf4:	18c7883a 	add	r3,r3,r3
   1aaf8:	18c7883a 	add	r3,r3,r3
   1aafc:	10c5883a 	add	r2,r2,r3
   1ab00:	10000015 	stw	zero,0(r2)
   1ab04:	e0bff117 	ldw	r2,-60(fp)
   1ab08:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ab0c:	e0bff817 	ldw	r2,-32(fp)
   1ab10:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1ab14:	e0bff303 	ldbu	r2,-52(fp)
   1ab18:	00000506 	br	1ab30 <OSTaskCreateExt+0x1d8>
   1ab1c:	e0bff117 	ldw	r2,-60(fp)
   1ab20:	e0bff915 	stw	r2,-28(fp)
   1ab24:	e0bff917 	ldw	r2,-28(fp)
   1ab28:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1ab2c:	00800a04 	movi	r2,40
}
   1ab30:	e037883a 	mov	sp,fp
   1ab34:	dfc00117 	ldw	ra,4(sp)
   1ab38:	df000017 	ldw	fp,0(sp)
   1ab3c:	dec00204 	addi	sp,sp,8
   1ab40:	f800283a 	ret

0001ab44 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   1ab44:	defff404 	addi	sp,sp,-48
   1ab48:	dfc00b15 	stw	ra,44(sp)
   1ab4c:	df000a15 	stw	fp,40(sp)
   1ab50:	df000a04 	addi	fp,sp,40
   1ab54:	2005883a 	mov	r2,r4
   1ab58:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   1ab5c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   1ab60:	008000b4 	movhi	r2,2
   1ab64:	1091d404 	addi	r2,r2,18256
   1ab68:	10800003 	ldbu	r2,0(r2)
   1ab6c:	10803fcc 	andi	r2,r2,255
   1ab70:	10000226 	beq	r2,zero,1ab7c <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   1ab74:	00801004 	movi	r2,64
   1ab78:	0000e506 	br	1af10 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   1ab7c:	e0bfff03 	ldbu	r2,-4(fp)
   1ab80:	10800518 	cmpnei	r2,r2,20
   1ab84:	1000021e 	bne	r2,zero,1ab90 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   1ab88:	00800f84 	movi	r2,62
   1ab8c:	0000e006 	br	1af10 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   1ab90:	e0bfff03 	ldbu	r2,-4(fp)
   1ab94:	10800530 	cmpltui	r2,r2,20
   1ab98:	1000051e 	bne	r2,zero,1abb0 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   1ab9c:	e0bfff03 	ldbu	r2,-4(fp)
   1aba0:	10803fe0 	cmpeqi	r2,r2,255
   1aba4:	1000021e 	bne	r2,zero,1abb0 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   1aba8:	00800a84 	movi	r2,42
   1abac:	0000d806 	br	1af10 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1abb0:	0005303a 	rdctl	r2,status
   1abb4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1abb8:	e0fff917 	ldw	r3,-28(fp)
   1abbc:	00bfff84 	movi	r2,-2
   1abc0:	1884703a 	and	r2,r3,r2
   1abc4:	1001703a 	wrctl	status,r2
  
  return context;
   1abc8:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1abcc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   1abd0:	e0bfff03 	ldbu	r2,-4(fp)
   1abd4:	10803fd8 	cmpnei	r2,r2,255
   1abd8:	1000051e 	bne	r2,zero,1abf0 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   1abdc:	008000b4 	movhi	r2,2
   1abe0:	1091d504 	addi	r2,r2,18260
   1abe4:	10800017 	ldw	r2,0(r2)
   1abe8:	10800c83 	ldbu	r2,50(r2)
   1abec:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1abf0:	e0ffff03 	ldbu	r3,-4(fp)
   1abf4:	008000f4 	movhi	r2,3
   1abf8:	10985004 	addi	r2,r2,24896
   1abfc:	18c7883a 	add	r3,r3,r3
   1ac00:	18c7883a 	add	r3,r3,r3
   1ac04:	10c5883a 	add	r2,r2,r3
   1ac08:	10800017 	ldw	r2,0(r2)
   1ac0c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   1ac10:	e0bff717 	ldw	r2,-36(fp)
   1ac14:	1000061e 	bne	r2,zero,1ac30 <OSTaskDel+0xec>
   1ac18:	e0bff617 	ldw	r2,-40(fp)
   1ac1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ac20:	e0bffa17 	ldw	r2,-24(fp)
   1ac24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1ac28:	008010c4 	movi	r2,67
   1ac2c:	0000b806 	br	1af10 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   1ac30:	e0bff717 	ldw	r2,-36(fp)
   1ac34:	10800058 	cmpnei	r2,r2,1
   1ac38:	1000061e 	bne	r2,zero,1ac54 <OSTaskDel+0x110>
   1ac3c:	e0bff617 	ldw	r2,-40(fp)
   1ac40:	e0bffb15 	stw	r2,-20(fp)
   1ac44:	e0bffb17 	ldw	r2,-20(fp)
   1ac48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1ac4c:	00800f44 	movi	r2,61
   1ac50:	0000af06 	br	1af10 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   1ac54:	e0bff717 	ldw	r2,-36(fp)
   1ac58:	10800d03 	ldbu	r2,52(r2)
   1ac5c:	10c03fcc 	andi	r3,r2,255
   1ac60:	e0bff717 	ldw	r2,-36(fp)
   1ac64:	10800d03 	ldbu	r2,52(r2)
   1ac68:	11003fcc 	andi	r4,r2,255
   1ac6c:	008000b4 	movhi	r2,2
   1ac70:	1091d244 	addi	r2,r2,18249
   1ac74:	1105883a 	add	r2,r2,r4
   1ac78:	10800003 	ldbu	r2,0(r2)
   1ac7c:	1009883a 	mov	r4,r2
   1ac80:	e0bff717 	ldw	r2,-36(fp)
   1ac84:	10800d43 	ldbu	r2,53(r2)
   1ac88:	0084303a 	nor	r2,zero,r2
   1ac8c:	2084703a 	and	r2,r4,r2
   1ac90:	1009883a 	mov	r4,r2
   1ac94:	008000b4 	movhi	r2,2
   1ac98:	1091d244 	addi	r2,r2,18249
   1ac9c:	10c5883a 	add	r2,r2,r3
   1aca0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   1aca4:	e0bff717 	ldw	r2,-36(fp)
   1aca8:	10800d03 	ldbu	r2,52(r2)
   1acac:	10c03fcc 	andi	r3,r2,255
   1acb0:	008000b4 	movhi	r2,2
   1acb4:	1091d244 	addi	r2,r2,18249
   1acb8:	10c5883a 	add	r2,r2,r3
   1acbc:	10800003 	ldbu	r2,0(r2)
   1acc0:	10803fcc 	andi	r2,r2,255
   1acc4:	10000c1e 	bne	r2,zero,1acf8 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   1acc8:	e0bff717 	ldw	r2,-36(fp)
   1accc:	10800d83 	ldbu	r2,54(r2)
   1acd0:	0084303a 	nor	r2,zero,r2
   1acd4:	1007883a 	mov	r3,r2
   1acd8:	008000b4 	movhi	r2,2
   1acdc:	1091d204 	addi	r2,r2,18248
   1ace0:	10800003 	ldbu	r2,0(r2)
   1ace4:	1884703a 	and	r2,r3,r2
   1ace8:	1007883a 	mov	r3,r2
   1acec:	008000b4 	movhi	r2,2
   1acf0:	1091d204 	addi	r2,r2,18248
   1acf4:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   1acf8:	e0bff717 	ldw	r2,-36(fp)
   1acfc:	10800717 	ldw	r2,28(r2)
   1ad00:	10000526 	beq	r2,zero,1ad18 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1ad04:	e0bff717 	ldw	r2,-36(fp)
   1ad08:	10800717 	ldw	r2,28(r2)
   1ad0c:	e13ff717 	ldw	r4,-36(fp)
   1ad10:	100b883a 	mov	r5,r2
   1ad14:	0014b900 	call	14b90 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   1ad18:	e0bff717 	ldw	r2,-36(fp)
   1ad1c:	10800817 	ldw	r2,32(r2)
   1ad20:	10000526 	beq	r2,zero,1ad38 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1ad24:	e0bff717 	ldw	r2,-36(fp)
   1ad28:	10800817 	ldw	r2,32(r2)
   1ad2c:	e13ff717 	ldw	r4,-36(fp)
   1ad30:	100b883a 	mov	r5,r2
   1ad34:	0014c440 	call	14c44 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   1ad38:	e0bff717 	ldw	r2,-36(fp)
   1ad3c:	10800a17 	ldw	r2,40(r2)
   1ad40:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   1ad44:	e0bff817 	ldw	r2,-32(fp)
   1ad48:	10000226 	beq	r2,zero,1ad54 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   1ad4c:	e13ff817 	ldw	r4,-32(fp)
   1ad50:	00171980 	call	17198 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   1ad54:	e0bff717 	ldw	r2,-36(fp)
   1ad58:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   1ad5c:	e0bff717 	ldw	r2,-36(fp)
   1ad60:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1ad64:	e0bff717 	ldw	r2,-36(fp)
   1ad68:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   1ad6c:	008000b4 	movhi	r2,2
   1ad70:	1091c604 	addi	r2,r2,18200
   1ad74:	10800003 	ldbu	r2,0(r2)
   1ad78:	10803fcc 	andi	r2,r2,255
   1ad7c:	10803fe0 	cmpeqi	r2,r2,255
   1ad80:	1000081e 	bne	r2,zero,1ada4 <OSTaskDel+0x260>
        OSLockNesting++;
   1ad84:	008000b4 	movhi	r2,2
   1ad88:	1091c604 	addi	r2,r2,18200
   1ad8c:	10800003 	ldbu	r2,0(r2)
   1ad90:	10800044 	addi	r2,r2,1
   1ad94:	1007883a 	mov	r3,r2
   1ad98:	008000b4 	movhi	r2,2
   1ad9c:	1091c604 	addi	r2,r2,18200
   1ada0:	10c00005 	stb	r3,0(r2)
   1ada4:	e0bff617 	ldw	r2,-40(fp)
   1ada8:	e0bffc15 	stw	r2,-16(fp)
   1adac:	e0bffc17 	ldw	r2,-16(fp)
   1adb0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   1adb4:	00147840 	call	14784 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1adb8:	0005303a 	rdctl	r2,status
   1adbc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1adc0:	e0fffd17 	ldw	r3,-12(fp)
   1adc4:	00bfff84 	movi	r2,-2
   1adc8:	1884703a 	and	r2,r3,r2
   1adcc:	1001703a 	wrctl	status,r2
  
  return context;
   1add0:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   1add4:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   1add8:	008000b4 	movhi	r2,2
   1addc:	1091c604 	addi	r2,r2,18200
   1ade0:	10800003 	ldbu	r2,0(r2)
   1ade4:	10803fcc 	andi	r2,r2,255
   1ade8:	10000826 	beq	r2,zero,1ae0c <OSTaskDel+0x2c8>
        OSLockNesting--;
   1adec:	008000b4 	movhi	r2,2
   1adf0:	1091c604 	addi	r2,r2,18200
   1adf4:	10800003 	ldbu	r2,0(r2)
   1adf8:	10bfffc4 	addi	r2,r2,-1
   1adfc:	1007883a 	mov	r3,r2
   1ae00:	008000b4 	movhi	r2,2
   1ae04:	1091c604 	addi	r2,r2,18200
   1ae08:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   1ae0c:	e13ff717 	ldw	r4,-36(fp)
   1ae10:	001f60c0 	call	1f60c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   1ae14:	008000b4 	movhi	r2,2
   1ae18:	1091ce44 	addi	r2,r2,18233
   1ae1c:	10800003 	ldbu	r2,0(r2)
   1ae20:	10bfffc4 	addi	r2,r2,-1
   1ae24:	1007883a 	mov	r3,r2
   1ae28:	008000b4 	movhi	r2,2
   1ae2c:	1091ce44 	addi	r2,r2,18233
   1ae30:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   1ae34:	e0ffff03 	ldbu	r3,-4(fp)
   1ae38:	008000f4 	movhi	r2,3
   1ae3c:	10985004 	addi	r2,r2,24896
   1ae40:	18c7883a 	add	r3,r3,r3
   1ae44:	18c7883a 	add	r3,r3,r3
   1ae48:	10c5883a 	add	r2,r2,r3
   1ae4c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1ae50:	e0bff717 	ldw	r2,-36(fp)
   1ae54:	10800617 	ldw	r2,24(r2)
   1ae58:	1000091e 	bne	r2,zero,1ae80 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   1ae5c:	e0bff717 	ldw	r2,-36(fp)
   1ae60:	10800517 	ldw	r2,20(r2)
   1ae64:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   1ae68:	e0bff717 	ldw	r2,-36(fp)
   1ae6c:	10c00517 	ldw	r3,20(r2)
   1ae70:	008000b4 	movhi	r2,2
   1ae74:	1091c904 	addi	r2,r2,18212
   1ae78:	10c00015 	stw	r3,0(r2)
   1ae7c:	00000a06 	br	1aea8 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   1ae80:	e0bff717 	ldw	r2,-36(fp)
   1ae84:	10800617 	ldw	r2,24(r2)
   1ae88:	e0fff717 	ldw	r3,-36(fp)
   1ae8c:	18c00517 	ldw	r3,20(r3)
   1ae90:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   1ae94:	e0bff717 	ldw	r2,-36(fp)
   1ae98:	10800517 	ldw	r2,20(r2)
   1ae9c:	e0fff717 	ldw	r3,-36(fp)
   1aea0:	18c00617 	ldw	r3,24(r3)
   1aea4:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   1aea8:	008000b4 	movhi	r2,2
   1aeac:	1091cd04 	addi	r2,r2,18228
   1aeb0:	10c00017 	ldw	r3,0(r2)
   1aeb4:	e0bff717 	ldw	r2,-36(fp)
   1aeb8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   1aebc:	008000b4 	movhi	r2,2
   1aec0:	1091cd04 	addi	r2,r2,18228
   1aec4:	e0fff717 	ldw	r3,-36(fp)
   1aec8:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   1aecc:	e0bff717 	ldw	r2,-36(fp)
   1aed0:	00c00fc4 	movi	r3,63
   1aed4:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1aed8:	e0bff717 	ldw	r2,-36(fp)
   1aedc:	10001345 	stb	zero,77(r2)
   1aee0:	e0bff617 	ldw	r2,-40(fp)
   1aee4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aee8:	e0bffe17 	ldw	r2,-8(fp)
   1aeec:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1aef0:	008000b4 	movhi	r2,2
   1aef4:	1091c644 	addi	r2,r2,18201
   1aef8:	10800003 	ldbu	r2,0(r2)
   1aefc:	10803fcc 	andi	r2,r2,255
   1af00:	10800058 	cmpnei	r2,r2,1
   1af04:	1000011e 	bne	r2,zero,1af0c <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   1af08:	00151b80 	call	151b8 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1af0c:	0005883a 	mov	r2,zero
}
   1af10:	e037883a 	mov	sp,fp
   1af14:	dfc00117 	ldw	ra,4(sp)
   1af18:	df000017 	ldw	fp,0(sp)
   1af1c:	dec00204 	addi	sp,sp,8
   1af20:	f800283a 	ret

0001af24 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   1af24:	defff504 	addi	sp,sp,-44
   1af28:	df000a15 	stw	fp,40(sp)
   1af2c:	df000a04 	addi	fp,sp,40
   1af30:	2005883a 	mov	r2,r4
   1af34:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1af38:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   1af3c:	e0bfff03 	ldbu	r2,-4(fp)
   1af40:	10800518 	cmpnei	r2,r2,20
   1af44:	1000021e 	bne	r2,zero,1af50 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   1af48:	00800f84 	movi	r2,62
   1af4c:	00004706 	br	1b06c <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1af50:	e0bfff03 	ldbu	r2,-4(fp)
   1af54:	10800530 	cmpltui	r2,r2,20
   1af58:	1000051e 	bne	r2,zero,1af70 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   1af5c:	e0bfff03 	ldbu	r2,-4(fp)
   1af60:	10803fe0 	cmpeqi	r2,r2,255
   1af64:	1000021e 	bne	r2,zero,1af70 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   1af68:	00800a84 	movi	r2,42
   1af6c:	00003f06 	br	1b06c <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   1af70:	e0bfff03 	ldbu	r2,-4(fp)
   1af74:	10803fd8 	cmpnei	r2,r2,255
   1af78:	1000131e 	bne	r2,zero,1afc8 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1af7c:	0005303a 	rdctl	r2,status
   1af80:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1af84:	e0fff917 	ldw	r3,-28(fp)
   1af88:	00bfff84 	movi	r2,-2
   1af8c:	1884703a 	and	r2,r3,r2
   1af90:	1001703a 	wrctl	status,r2
  
  return context;
   1af94:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   1af98:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   1af9c:	008000b4 	movhi	r2,2
   1afa0:	1091d504 	addi	r2,r2,18260
   1afa4:	10800017 	ldw	r2,0(r2)
   1afa8:	10800dc3 	ldbu	r2,55(r2)
   1afac:	e0bff705 	stb	r2,-36(fp)
   1afb0:	e0bff617 	ldw	r2,-40(fp)
   1afb4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1afb8:	e0bffa17 	ldw	r2,-24(fp)
   1afbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   1afc0:	e0bff703 	ldbu	r2,-36(fp)
   1afc4:	00002906 	br	1b06c <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1afc8:	0005303a 	rdctl	r2,status
   1afcc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1afd0:	e0fffb17 	ldw	r3,-20(fp)
   1afd4:	00bfff84 	movi	r2,-2
   1afd8:	1884703a 	and	r2,r3,r2
   1afdc:	1001703a 	wrctl	status,r2
  
  return context;
   1afe0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1afe4:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1afe8:	e0ffff03 	ldbu	r3,-4(fp)
   1afec:	008000f4 	movhi	r2,3
   1aff0:	10985004 	addi	r2,r2,24896
   1aff4:	18c7883a 	add	r3,r3,r3
   1aff8:	18c7883a 	add	r3,r3,r3
   1affc:	10c5883a 	add	r2,r2,r3
   1b000:	10800017 	ldw	r2,0(r2)
   1b004:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   1b008:	e0bff817 	ldw	r2,-32(fp)
   1b00c:	1000061e 	bne	r2,zero,1b028 <OSTaskDelReq+0x104>
   1b010:	e0bff617 	ldw	r2,-40(fp)
   1b014:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b018:	e0bffc17 	ldw	r2,-16(fp)
   1b01c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   1b020:	008010c4 	movi	r2,67
   1b024:	00001106 	br	1b06c <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   1b028:	e0bff817 	ldw	r2,-32(fp)
   1b02c:	10800058 	cmpnei	r2,r2,1
   1b030:	1000061e 	bne	r2,zero,1b04c <OSTaskDelReq+0x128>
   1b034:	e0bff617 	ldw	r2,-40(fp)
   1b038:	e0bffd15 	stw	r2,-12(fp)
   1b03c:	e0bffd17 	ldw	r2,-12(fp)
   1b040:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1b044:	00800f44 	movi	r2,61
   1b048:	00000806 	br	1b06c <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   1b04c:	e0bff817 	ldw	r2,-32(fp)
   1b050:	00c00fc4 	movi	r3,63
   1b054:	10c00dc5 	stb	r3,55(r2)
   1b058:	e0bff617 	ldw	r2,-40(fp)
   1b05c:	e0bffe15 	stw	r2,-8(fp)
   1b060:	e0bffe17 	ldw	r2,-8(fp)
   1b064:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1b068:	0005883a 	mov	r2,zero
}
   1b06c:	e037883a 	mov	sp,fp
   1b070:	df000017 	ldw	fp,0(sp)
   1b074:	dec00104 	addi	sp,sp,4
   1b078:	f800283a 	ret

0001b07c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1b07c:	defff404 	addi	sp,sp,-48
   1b080:	dfc00b15 	stw	ra,44(sp)
   1b084:	df000a15 	stw	fp,40(sp)
   1b088:	df000a04 	addi	fp,sp,40
   1b08c:	2005883a 	mov	r2,r4
   1b090:	e17ffe15 	stw	r5,-8(fp)
   1b094:	e1bfff15 	stw	r6,-4(fp)
   1b098:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   1b09c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   1b0a0:	e0bfff17 	ldw	r2,-4(fp)
   1b0a4:	1000021e 	bne	r2,zero,1b0b0 <OSTaskNameGet+0x34>
        return (0);
   1b0a8:	0005883a 	mov	r2,zero
   1b0ac:	00005806 	br	1b210 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   1b0b0:	e0bffd03 	ldbu	r2,-12(fp)
   1b0b4:	10800570 	cmpltui	r2,r2,21
   1b0b8:	1000081e 	bne	r2,zero,1b0dc <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   1b0bc:	e0bffd03 	ldbu	r2,-12(fp)
   1b0c0:	10803fe0 	cmpeqi	r2,r2,255
   1b0c4:	1000051e 	bne	r2,zero,1b0dc <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   1b0c8:	e0bfff17 	ldw	r2,-4(fp)
   1b0cc:	00c00a84 	movi	r3,42
   1b0d0:	10c00005 	stb	r3,0(r2)
            return (0);
   1b0d4:	0005883a 	mov	r2,zero
   1b0d8:	00004d06 	br	1b210 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   1b0dc:	e0bffe17 	ldw	r2,-8(fp)
   1b0e0:	1000051e 	bne	r2,zero,1b0f8 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   1b0e4:	e0bfff17 	ldw	r2,-4(fp)
   1b0e8:	00c00304 	movi	r3,12
   1b0ec:	10c00005 	stb	r3,0(r2)
        return (0);
   1b0f0:	0005883a 	mov	r2,zero
   1b0f4:	00004606 	br	1b210 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   1b0f8:	008000b4 	movhi	r2,2
   1b0fc:	1091d404 	addi	r2,r2,18256
   1b100:	10800003 	ldbu	r2,0(r2)
   1b104:	10803fcc 	andi	r2,r2,255
   1b108:	10000526 	beq	r2,zero,1b120 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   1b10c:	e0bfff17 	ldw	r2,-4(fp)
   1b110:	00c00444 	movi	r3,17
   1b114:	10c00005 	stb	r3,0(r2)
        return (0);
   1b118:	0005883a 	mov	r2,zero
   1b11c:	00003c06 	br	1b210 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b120:	0005303a 	rdctl	r2,status
   1b124:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b128:	e0fff917 	ldw	r3,-28(fp)
   1b12c:	00bfff84 	movi	r2,-2
   1b130:	1884703a 	and	r2,r3,r2
   1b134:	1001703a 	wrctl	status,r2
  
  return context;
   1b138:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1b13c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1b140:	e0bffd03 	ldbu	r2,-12(fp)
   1b144:	10803fd8 	cmpnei	r2,r2,255
   1b148:	1000051e 	bne	r2,zero,1b160 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   1b14c:	008000b4 	movhi	r2,2
   1b150:	1091d504 	addi	r2,r2,18260
   1b154:	10800017 	ldw	r2,0(r2)
   1b158:	10800c83 	ldbu	r2,50(r2)
   1b15c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1b160:	e0fffd03 	ldbu	r3,-12(fp)
   1b164:	008000f4 	movhi	r2,3
   1b168:	10985004 	addi	r2,r2,24896
   1b16c:	18c7883a 	add	r3,r3,r3
   1b170:	18c7883a 	add	r3,r3,r3
   1b174:	10c5883a 	add	r2,r2,r3
   1b178:	10800017 	ldw	r2,0(r2)
   1b17c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   1b180:	e0bff717 	ldw	r2,-36(fp)
   1b184:	1000091e 	bne	r2,zero,1b1ac <OSTaskNameGet+0x130>
   1b188:	e0bff617 	ldw	r2,-40(fp)
   1b18c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b190:	e0bffa17 	ldw	r2,-24(fp)
   1b194:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1b198:	e0bfff17 	ldw	r2,-4(fp)
   1b19c:	00c010c4 	movi	r3,67
   1b1a0:	10c00005 	stb	r3,0(r2)
        return (0);
   1b1a4:	0005883a 	mov	r2,zero
   1b1a8:	00001906 	br	1b210 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   1b1ac:	e0bff717 	ldw	r2,-36(fp)
   1b1b0:	10800058 	cmpnei	r2,r2,1
   1b1b4:	1000091e 	bne	r2,zero,1b1dc <OSTaskNameGet+0x160>
   1b1b8:	e0bff617 	ldw	r2,-40(fp)
   1b1bc:	e0bffb15 	stw	r2,-20(fp)
   1b1c0:	e0bffb17 	ldw	r2,-20(fp)
   1b1c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1b1c8:	e0bfff17 	ldw	r2,-4(fp)
   1b1cc:	00c010c4 	movi	r3,67
   1b1d0:	10c00005 	stb	r3,0(r2)
        return (0);
   1b1d4:	0005883a 	mov	r2,zero
   1b1d8:	00000d06 	br	1b210 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   1b1dc:	e0bff717 	ldw	r2,-36(fp)
   1b1e0:	10801304 	addi	r2,r2,76
   1b1e4:	e13ffe17 	ldw	r4,-8(fp)
   1b1e8:	100b883a 	mov	r5,r2
   1b1ec:	00152f40 	call	152f4 <OS_StrCopy>
   1b1f0:	e0bff805 	stb	r2,-32(fp)
   1b1f4:	e0bff617 	ldw	r2,-40(fp)
   1b1f8:	e0bffc15 	stw	r2,-16(fp)
   1b1fc:	e0bffc17 	ldw	r2,-16(fp)
   1b200:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1b204:	e0bfff17 	ldw	r2,-4(fp)
   1b208:	10000005 	stb	zero,0(r2)
    return (len);
   1b20c:	e0bff803 	ldbu	r2,-32(fp)
}
   1b210:	e037883a 	mov	sp,fp
   1b214:	dfc00117 	ldw	ra,4(sp)
   1b218:	df000017 	ldw	fp,0(sp)
   1b21c:	dec00204 	addi	sp,sp,8
   1b220:	f800283a 	ret

0001b224 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1b224:	defff304 	addi	sp,sp,-52
   1b228:	dfc00c15 	stw	ra,48(sp)
   1b22c:	df000b15 	stw	fp,44(sp)
   1b230:	df000b04 	addi	fp,sp,44
   1b234:	2005883a 	mov	r2,r4
   1b238:	e17ffe15 	stw	r5,-8(fp)
   1b23c:	e1bfff15 	stw	r6,-4(fp)
   1b240:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1b244:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1b248:	e0bfff17 	ldw	r2,-4(fp)
   1b24c:	1000011e 	bne	r2,zero,1b254 <OSTaskNameSet+0x30>
        return;
   1b250:	00005f06 	br	1b3d0 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   1b254:	e0bffd03 	ldbu	r2,-12(fp)
   1b258:	10800570 	cmpltui	r2,r2,21
   1b25c:	1000071e 	bne	r2,zero,1b27c <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   1b260:	e0bffd03 	ldbu	r2,-12(fp)
   1b264:	10803fe0 	cmpeqi	r2,r2,255
   1b268:	1000041e 	bne	r2,zero,1b27c <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   1b26c:	e0bfff17 	ldw	r2,-4(fp)
   1b270:	00c00a84 	movi	r3,42
   1b274:	10c00005 	stb	r3,0(r2)
            return;
   1b278:	00005506 	br	1b3d0 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   1b27c:	e0bffe17 	ldw	r2,-8(fp)
   1b280:	1000041e 	bne	r2,zero,1b294 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   1b284:	e0bfff17 	ldw	r2,-4(fp)
   1b288:	00c00304 	movi	r3,12
   1b28c:	10c00005 	stb	r3,0(r2)
        return;
   1b290:	00004f06 	br	1b3d0 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   1b294:	008000b4 	movhi	r2,2
   1b298:	1091d404 	addi	r2,r2,18256
   1b29c:	10800003 	ldbu	r2,0(r2)
   1b2a0:	10803fcc 	andi	r2,r2,255
   1b2a4:	10000426 	beq	r2,zero,1b2b8 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   1b2a8:	e0bfff17 	ldw	r2,-4(fp)
   1b2ac:	00c00484 	movi	r3,18
   1b2b0:	10c00005 	stb	r3,0(r2)
        return;
   1b2b4:	00004606 	br	1b3d0 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b2b8:	0005303a 	rdctl	r2,status
   1b2bc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b2c0:	e0fff817 	ldw	r3,-32(fp)
   1b2c4:	00bfff84 	movi	r2,-2
   1b2c8:	1884703a 	and	r2,r3,r2
   1b2cc:	1001703a 	wrctl	status,r2
  
  return context;
   1b2d0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1b2d4:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   1b2d8:	e0bffd03 	ldbu	r2,-12(fp)
   1b2dc:	10803fd8 	cmpnei	r2,r2,255
   1b2e0:	1000051e 	bne	r2,zero,1b2f8 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   1b2e4:	008000b4 	movhi	r2,2
   1b2e8:	1091d504 	addi	r2,r2,18260
   1b2ec:	10800017 	ldw	r2,0(r2)
   1b2f0:	10800c83 	ldbu	r2,50(r2)
   1b2f4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1b2f8:	e0fffd03 	ldbu	r3,-12(fp)
   1b2fc:	008000f4 	movhi	r2,3
   1b300:	10985004 	addi	r2,r2,24896
   1b304:	18c7883a 	add	r3,r3,r3
   1b308:	18c7883a 	add	r3,r3,r3
   1b30c:	10c5883a 	add	r2,r2,r3
   1b310:	10800017 	ldw	r2,0(r2)
   1b314:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   1b318:	e0bff617 	ldw	r2,-40(fp)
   1b31c:	1000081e 	bne	r2,zero,1b340 <OSTaskNameSet+0x11c>
   1b320:	e0bff517 	ldw	r2,-44(fp)
   1b324:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b328:	e0bff917 	ldw	r2,-28(fp)
   1b32c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1b330:	e0bfff17 	ldw	r2,-4(fp)
   1b334:	00c010c4 	movi	r3,67
   1b338:	10c00005 	stb	r3,0(r2)
        return;
   1b33c:	00002406 	br	1b3d0 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   1b340:	e0bff617 	ldw	r2,-40(fp)
   1b344:	10800058 	cmpnei	r2,r2,1
   1b348:	1000081e 	bne	r2,zero,1b36c <OSTaskNameSet+0x148>
   1b34c:	e0bff517 	ldw	r2,-44(fp)
   1b350:	e0bffa15 	stw	r2,-24(fp)
   1b354:	e0bffa17 	ldw	r2,-24(fp)
   1b358:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1b35c:	e0bfff17 	ldw	r2,-4(fp)
   1b360:	00c010c4 	movi	r3,67
   1b364:	10c00005 	stb	r3,0(r2)
        return;
   1b368:	00001906 	br	1b3d0 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   1b36c:	e13ffe17 	ldw	r4,-8(fp)
   1b370:	00153680 	call	15368 <OS_StrLen>
   1b374:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   1b378:	e0bff703 	ldbu	r2,-36(fp)
   1b37c:	10800830 	cmpltui	r2,r2,32
   1b380:	1000081e 	bne	r2,zero,1b3a4 <OSTaskNameSet+0x180>
   1b384:	e0bff517 	ldw	r2,-44(fp)
   1b388:	e0bffb15 	stw	r2,-20(fp)
   1b38c:	e0bffb17 	ldw	r2,-20(fp)
   1b390:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   1b394:	e0bfff17 	ldw	r2,-4(fp)
   1b398:	00c01044 	movi	r3,65
   1b39c:	10c00005 	stb	r3,0(r2)
        return;
   1b3a0:	00000b06 	br	1b3d0 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   1b3a4:	e0bff617 	ldw	r2,-40(fp)
   1b3a8:	10801304 	addi	r2,r2,76
   1b3ac:	1009883a 	mov	r4,r2
   1b3b0:	e17ffe17 	ldw	r5,-8(fp)
   1b3b4:	00152f40 	call	152f4 <OS_StrCopy>
   1b3b8:	e0bff517 	ldw	r2,-44(fp)
   1b3bc:	e0bffc15 	stw	r2,-16(fp)
   1b3c0:	e0bffc17 	ldw	r2,-16(fp)
   1b3c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1b3c8:	e0bfff17 	ldw	r2,-4(fp)
   1b3cc:	10000005 	stb	zero,0(r2)
}
   1b3d0:	e037883a 	mov	sp,fp
   1b3d4:	dfc00117 	ldw	ra,4(sp)
   1b3d8:	df000017 	ldw	fp,0(sp)
   1b3dc:	dec00204 	addi	sp,sp,8
   1b3e0:	f800283a 	ret

0001b3e4 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   1b3e4:	defff404 	addi	sp,sp,-48
   1b3e8:	dfc00b15 	stw	ra,44(sp)
   1b3ec:	df000a15 	stw	fp,40(sp)
   1b3f0:	df000a04 	addi	fp,sp,40
   1b3f4:	2005883a 	mov	r2,r4
   1b3f8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1b3fc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   1b400:	e0bfff03 	ldbu	r2,-4(fp)
   1b404:	10800530 	cmpltui	r2,r2,20
   1b408:	1000021e 	bne	r2,zero,1b414 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1b40c:	00800a84 	movi	r2,42
   1b410:	00006d06 	br	1b5c8 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b414:	0005303a 	rdctl	r2,status
   1b418:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b41c:	e0fff817 	ldw	r3,-32(fp)
   1b420:	00bfff84 	movi	r2,-2
   1b424:	1884703a 	and	r2,r3,r2
   1b428:	1001703a 	wrctl	status,r2
  
  return context;
   1b42c:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1b430:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1b434:	e0ffff03 	ldbu	r3,-4(fp)
   1b438:	008000f4 	movhi	r2,3
   1b43c:	10985004 	addi	r2,r2,24896
   1b440:	18c7883a 	add	r3,r3,r3
   1b444:	18c7883a 	add	r3,r3,r3
   1b448:	10c5883a 	add	r2,r2,r3
   1b44c:	10800017 	ldw	r2,0(r2)
   1b450:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   1b454:	e0bff717 	ldw	r2,-36(fp)
   1b458:	1000061e 	bne	r2,zero,1b474 <OSTaskResume+0x90>
   1b45c:	e0bff617 	ldw	r2,-40(fp)
   1b460:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b464:	e0bff917 	ldw	r2,-28(fp)
   1b468:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   1b46c:	00801184 	movi	r2,70
   1b470:	00005506 	br	1b5c8 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   1b474:	e0bff717 	ldw	r2,-36(fp)
   1b478:	10800058 	cmpnei	r2,r2,1
   1b47c:	1000061e 	bne	r2,zero,1b498 <OSTaskResume+0xb4>
   1b480:	e0bff617 	ldw	r2,-40(fp)
   1b484:	e0bffa15 	stw	r2,-24(fp)
   1b488:	e0bffa17 	ldw	r2,-24(fp)
   1b48c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1b490:	008010c4 	movi	r2,67
   1b494:	00004c06 	br	1b5c8 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   1b498:	e0bff717 	ldw	r2,-36(fp)
   1b49c:	10800c03 	ldbu	r2,48(r2)
   1b4a0:	10803fcc 	andi	r2,r2,255
   1b4a4:	1080020c 	andi	r2,r2,8
   1b4a8:	10004226 	beq	r2,zero,1b5b4 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   1b4ac:	e0bff717 	ldw	r2,-36(fp)
   1b4b0:	10c00c03 	ldbu	r3,48(r2)
   1b4b4:	00bffdc4 	movi	r2,-9
   1b4b8:	1884703a 	and	r2,r3,r2
   1b4bc:	1007883a 	mov	r3,r2
   1b4c0:	e0bff717 	ldw	r2,-36(fp)
   1b4c4:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   1b4c8:	e0bff717 	ldw	r2,-36(fp)
   1b4cc:	10800c03 	ldbu	r2,48(r2)
   1b4d0:	10803fcc 	andi	r2,r2,255
   1b4d4:	1000311e 	bne	r2,zero,1b59c <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   1b4d8:	e0bff717 	ldw	r2,-36(fp)
   1b4dc:	10800b8b 	ldhu	r2,46(r2)
   1b4e0:	10bfffcc 	andi	r2,r2,65535
   1b4e4:	1000281e 	bne	r2,zero,1b588 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   1b4e8:	e0bff717 	ldw	r2,-36(fp)
   1b4ec:	10c00d83 	ldbu	r3,54(r2)
   1b4f0:	008000b4 	movhi	r2,2
   1b4f4:	1091d204 	addi	r2,r2,18248
   1b4f8:	10800003 	ldbu	r2,0(r2)
   1b4fc:	1884b03a 	or	r2,r3,r2
   1b500:	1007883a 	mov	r3,r2
   1b504:	008000b4 	movhi	r2,2
   1b508:	1091d204 	addi	r2,r2,18248
   1b50c:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1b510:	e0bff717 	ldw	r2,-36(fp)
   1b514:	10800d03 	ldbu	r2,52(r2)
   1b518:	10c03fcc 	andi	r3,r2,255
   1b51c:	e0bff717 	ldw	r2,-36(fp)
   1b520:	10800d03 	ldbu	r2,52(r2)
   1b524:	11003fcc 	andi	r4,r2,255
   1b528:	008000b4 	movhi	r2,2
   1b52c:	1091d244 	addi	r2,r2,18249
   1b530:	1105883a 	add	r2,r2,r4
   1b534:	11000003 	ldbu	r4,0(r2)
   1b538:	e0bff717 	ldw	r2,-36(fp)
   1b53c:	10800d43 	ldbu	r2,53(r2)
   1b540:	2084b03a 	or	r2,r4,r2
   1b544:	1009883a 	mov	r4,r2
   1b548:	008000b4 	movhi	r2,2
   1b54c:	1091d244 	addi	r2,r2,18249
   1b550:	10c5883a 	add	r2,r2,r3
   1b554:	11000005 	stb	r4,0(r2)
   1b558:	e0bff617 	ldw	r2,-40(fp)
   1b55c:	e0bffb15 	stw	r2,-20(fp)
   1b560:	e0bffb17 	ldw	r2,-20(fp)
   1b564:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   1b568:	008000b4 	movhi	r2,2
   1b56c:	1091c644 	addi	r2,r2,18201
   1b570:	10800003 	ldbu	r2,0(r2)
   1b574:	10803fcc 	andi	r2,r2,255
   1b578:	10800058 	cmpnei	r2,r2,1
   1b57c:	10000b1e 	bne	r2,zero,1b5ac <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   1b580:	00151b80 	call	151b8 <OS_Sched>
   1b584:	00000906 	br	1b5ac <OSTaskResume+0x1c8>
   1b588:	e0bff617 	ldw	r2,-40(fp)
   1b58c:	e0bffc15 	stw	r2,-16(fp)
   1b590:	e0bffc17 	ldw	r2,-16(fp)
   1b594:	1001703a 	wrctl	status,r2
   1b598:	00000406 	br	1b5ac <OSTaskResume+0x1c8>
   1b59c:	e0bff617 	ldw	r2,-40(fp)
   1b5a0:	e0bffd15 	stw	r2,-12(fp)
   1b5a4:	e0bffd17 	ldw	r2,-12(fp)
   1b5a8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   1b5ac:	0005883a 	mov	r2,zero
   1b5b0:	00000506 	br	1b5c8 <OSTaskResume+0x1e4>
   1b5b4:	e0bff617 	ldw	r2,-40(fp)
   1b5b8:	e0bffe15 	stw	r2,-8(fp)
   1b5bc:	e0bffe17 	ldw	r2,-8(fp)
   1b5c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   1b5c4:	00801104 	movi	r2,68
}
   1b5c8:	e037883a 	mov	sp,fp
   1b5cc:	dfc00117 	ldw	ra,4(sp)
   1b5d0:	df000017 	ldw	fp,0(sp)
   1b5d4:	dec00204 	addi	sp,sp,8
   1b5d8:	f800283a 	ret

0001b5dc <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   1b5dc:	defff304 	addi	sp,sp,-52
   1b5e0:	df000c15 	stw	fp,48(sp)
   1b5e4:	df000c04 	addi	fp,sp,48
   1b5e8:	2005883a 	mov	r2,r4
   1b5ec:	e17fff15 	stw	r5,-4(fp)
   1b5f0:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1b5f4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1b5f8:	e0bffe03 	ldbu	r2,-8(fp)
   1b5fc:	10800570 	cmpltui	r2,r2,21
   1b600:	1000051e 	bne	r2,zero,1b618 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   1b604:	e0bffe03 	ldbu	r2,-8(fp)
   1b608:	10803fe0 	cmpeqi	r2,r2,255
   1b60c:	1000021e 	bne	r2,zero,1b618 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   1b610:	00800a84 	movi	r2,42
   1b614:	00005f06 	br	1b794 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   1b618:	e0bfff17 	ldw	r2,-4(fp)
   1b61c:	1000021e 	bne	r2,zero,1b628 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   1b620:	00800244 	movi	r2,9
   1b624:	00005b06 	br	1b794 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   1b628:	e0bfff17 	ldw	r2,-4(fp)
   1b62c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   1b630:	e0bfff17 	ldw	r2,-4(fp)
   1b634:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b638:	0005303a 	rdctl	r2,status
   1b63c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b640:	e0fff917 	ldw	r3,-28(fp)
   1b644:	00bfff84 	movi	r2,-2
   1b648:	1884703a 	and	r2,r3,r2
   1b64c:	1001703a 	wrctl	status,r2
  
  return context;
   1b650:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1b654:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   1b658:	e0bffe03 	ldbu	r2,-8(fp)
   1b65c:	10803fd8 	cmpnei	r2,r2,255
   1b660:	1000051e 	bne	r2,zero,1b678 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1b664:	008000b4 	movhi	r2,2
   1b668:	1091d504 	addi	r2,r2,18260
   1b66c:	10800017 	ldw	r2,0(r2)
   1b670:	10800c83 	ldbu	r2,50(r2)
   1b674:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1b678:	e0fffe03 	ldbu	r3,-8(fp)
   1b67c:	008000f4 	movhi	r2,3
   1b680:	10985004 	addi	r2,r2,24896
   1b684:	18c7883a 	add	r3,r3,r3
   1b688:	18c7883a 	add	r3,r3,r3
   1b68c:	10c5883a 	add	r2,r2,r3
   1b690:	10800017 	ldw	r2,0(r2)
   1b694:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   1b698:	e0bff717 	ldw	r2,-36(fp)
   1b69c:	1000061e 	bne	r2,zero,1b6b8 <OSTaskStkChk+0xdc>
   1b6a0:	e0bff617 	ldw	r2,-40(fp)
   1b6a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b6a8:	e0bffa17 	ldw	r2,-24(fp)
   1b6ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1b6b0:	008010c4 	movi	r2,67
   1b6b4:	00003706 	br	1b794 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1b6b8:	e0bff717 	ldw	r2,-36(fp)
   1b6bc:	10800058 	cmpnei	r2,r2,1
   1b6c0:	1000061e 	bne	r2,zero,1b6dc <OSTaskStkChk+0x100>
   1b6c4:	e0bff617 	ldw	r2,-40(fp)
   1b6c8:	e0bffb15 	stw	r2,-20(fp)
   1b6cc:	e0bffb17 	ldw	r2,-20(fp)
   1b6d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1b6d4:	008010c4 	movi	r2,67
   1b6d8:	00002e06 	br	1b794 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   1b6dc:	e0bff717 	ldw	r2,-36(fp)
   1b6e0:	1080040b 	ldhu	r2,16(r2)
   1b6e4:	10bfffcc 	andi	r2,r2,65535
   1b6e8:	1080004c 	andi	r2,r2,1
   1b6ec:	1000061e 	bne	r2,zero,1b708 <OSTaskStkChk+0x12c>
   1b6f0:	e0bff617 	ldw	r2,-40(fp)
   1b6f4:	e0bffc15 	stw	r2,-16(fp)
   1b6f8:	e0bffc17 	ldw	r2,-16(fp)
   1b6fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1b700:	00801144 	movi	r2,69
   1b704:	00002306 	br	1b794 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   1b708:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   1b70c:	e0bff717 	ldw	r2,-36(fp)
   1b710:	10800317 	ldw	r2,12(r2)
   1b714:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   1b718:	e0bff717 	ldw	r2,-36(fp)
   1b71c:	10800217 	ldw	r2,8(r2)
   1b720:	e0bff415 	stw	r2,-48(fp)
   1b724:	e0bff617 	ldw	r2,-40(fp)
   1b728:	e0bffd15 	stw	r2,-12(fp)
   1b72c:	e0bffd17 	ldw	r2,-12(fp)
   1b730:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1b734:	00000306 	br	1b744 <OSTaskStkChk+0x168>
        nfree++;
   1b738:	e0bff517 	ldw	r2,-44(fp)
   1b73c:	10800044 	addi	r2,r2,1
   1b740:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1b744:	e0bff417 	ldw	r2,-48(fp)
   1b748:	10c00104 	addi	r3,r2,4
   1b74c:	e0fff415 	stw	r3,-48(fp)
   1b750:	10800017 	ldw	r2,0(r2)
   1b754:	103ff826 	beq	r2,zero,1b738 <__alt_mem_Flash_flash_data+0xf401b738>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   1b758:	e0bff517 	ldw	r2,-44(fp)
   1b75c:	1085883a 	add	r2,r2,r2
   1b760:	1085883a 	add	r2,r2,r2
   1b764:	1007883a 	mov	r3,r2
   1b768:	e0bfff17 	ldw	r2,-4(fp)
   1b76c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   1b770:	e0fff817 	ldw	r3,-32(fp)
   1b774:	e0bff517 	ldw	r2,-44(fp)
   1b778:	1885c83a 	sub	r2,r3,r2
   1b77c:	1085883a 	add	r2,r2,r2
   1b780:	1085883a 	add	r2,r2,r2
   1b784:	1007883a 	mov	r3,r2
   1b788:	e0bfff17 	ldw	r2,-4(fp)
   1b78c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   1b790:	0005883a 	mov	r2,zero
}
   1b794:	e037883a 	mov	sp,fp
   1b798:	df000017 	ldw	fp,0(sp)
   1b79c:	dec00104 	addi	sp,sp,4
   1b7a0:	f800283a 	ret

0001b7a4 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   1b7a4:	defff504 	addi	sp,sp,-44
   1b7a8:	dfc00a15 	stw	ra,40(sp)
   1b7ac:	df000915 	stw	fp,36(sp)
   1b7b0:	df000904 	addi	fp,sp,36
   1b7b4:	2005883a 	mov	r2,r4
   1b7b8:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b7bc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   1b7c0:	e0bfff03 	ldbu	r2,-4(fp)
   1b7c4:	10800518 	cmpnei	r2,r2,20
   1b7c8:	1000021e 	bne	r2,zero,1b7d4 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   1b7cc:	008011c4 	movi	r2,71
   1b7d0:	00007406 	br	1b9a4 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1b7d4:	e0bfff03 	ldbu	r2,-4(fp)
   1b7d8:	10800530 	cmpltui	r2,r2,20
   1b7dc:	1000051e 	bne	r2,zero,1b7f4 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1b7e0:	e0bfff03 	ldbu	r2,-4(fp)
   1b7e4:	10803fe0 	cmpeqi	r2,r2,255
   1b7e8:	1000021e 	bne	r2,zero,1b7f4 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   1b7ec:	00800a84 	movi	r2,42
   1b7f0:	00006c06 	br	1b9a4 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b7f4:	0005303a 	rdctl	r2,status
   1b7f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b7fc:	e0fffb17 	ldw	r3,-20(fp)
   1b800:	00bfff84 	movi	r2,-2
   1b804:	1884703a 	and	r2,r3,r2
   1b808:	1001703a 	wrctl	status,r2
  
  return context;
   1b80c:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1b810:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   1b814:	e0bfff03 	ldbu	r2,-4(fp)
   1b818:	10803fd8 	cmpnei	r2,r2,255
   1b81c:	1000081e 	bne	r2,zero,1b840 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1b820:	008000b4 	movhi	r2,2
   1b824:	1091d504 	addi	r2,r2,18260
   1b828:	10800017 	ldw	r2,0(r2)
   1b82c:	10800c83 	ldbu	r2,50(r2)
   1b830:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   1b834:	00800044 	movi	r2,1
   1b838:	e0bff705 	stb	r2,-36(fp)
   1b83c:	00000b06 	br	1b86c <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1b840:	008000b4 	movhi	r2,2
   1b844:	1091d504 	addi	r2,r2,18260
   1b848:	10800017 	ldw	r2,0(r2)
   1b84c:	10800c83 	ldbu	r2,50(r2)
   1b850:	10c03fcc 	andi	r3,r2,255
   1b854:	e0bfff03 	ldbu	r2,-4(fp)
   1b858:	1880031e 	bne	r3,r2,1b868 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   1b85c:	00800044 	movi	r2,1
   1b860:	e0bff705 	stb	r2,-36(fp)
   1b864:	00000106 	br	1b86c <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   1b868:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1b86c:	e0ffff03 	ldbu	r3,-4(fp)
   1b870:	008000f4 	movhi	r2,3
   1b874:	10985004 	addi	r2,r2,24896
   1b878:	18c7883a 	add	r3,r3,r3
   1b87c:	18c7883a 	add	r3,r3,r3
   1b880:	10c5883a 	add	r2,r2,r3
   1b884:	10800017 	ldw	r2,0(r2)
   1b888:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   1b88c:	e0bff917 	ldw	r2,-28(fp)
   1b890:	1000061e 	bne	r2,zero,1b8ac <OSTaskSuspend+0x108>
   1b894:	e0bff817 	ldw	r2,-32(fp)
   1b898:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b89c:	e0bffc17 	ldw	r2,-16(fp)
   1b8a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   1b8a4:	00801204 	movi	r2,72
   1b8a8:	00003e06 	br	1b9a4 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   1b8ac:	e0bff917 	ldw	r2,-28(fp)
   1b8b0:	10800058 	cmpnei	r2,r2,1
   1b8b4:	1000061e 	bne	r2,zero,1b8d0 <OSTaskSuspend+0x12c>
   1b8b8:	e0bff817 	ldw	r2,-32(fp)
   1b8bc:	e0bffd15 	stw	r2,-12(fp)
   1b8c0:	e0bffd17 	ldw	r2,-12(fp)
   1b8c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1b8c8:	008010c4 	movi	r2,67
   1b8cc:	00003506 	br	1b9a4 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   1b8d0:	e0bff917 	ldw	r2,-28(fp)
   1b8d4:	10800d03 	ldbu	r2,52(r2)
   1b8d8:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   1b8dc:	e0fffa03 	ldbu	r3,-24(fp)
   1b8e0:	e13ffa03 	ldbu	r4,-24(fp)
   1b8e4:	008000b4 	movhi	r2,2
   1b8e8:	1091d244 	addi	r2,r2,18249
   1b8ec:	1105883a 	add	r2,r2,r4
   1b8f0:	10800003 	ldbu	r2,0(r2)
   1b8f4:	1009883a 	mov	r4,r2
   1b8f8:	e0bff917 	ldw	r2,-28(fp)
   1b8fc:	10800d43 	ldbu	r2,53(r2)
   1b900:	0084303a 	nor	r2,zero,r2
   1b904:	2084703a 	and	r2,r4,r2
   1b908:	1009883a 	mov	r4,r2
   1b90c:	008000b4 	movhi	r2,2
   1b910:	1091d244 	addi	r2,r2,18249
   1b914:	10c5883a 	add	r2,r2,r3
   1b918:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1b91c:	e0fffa03 	ldbu	r3,-24(fp)
   1b920:	008000b4 	movhi	r2,2
   1b924:	1091d244 	addi	r2,r2,18249
   1b928:	10c5883a 	add	r2,r2,r3
   1b92c:	10800003 	ldbu	r2,0(r2)
   1b930:	10803fcc 	andi	r2,r2,255
   1b934:	10000c1e 	bne	r2,zero,1b968 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   1b938:	e0bff917 	ldw	r2,-28(fp)
   1b93c:	10800d83 	ldbu	r2,54(r2)
   1b940:	0084303a 	nor	r2,zero,r2
   1b944:	1007883a 	mov	r3,r2
   1b948:	008000b4 	movhi	r2,2
   1b94c:	1091d204 	addi	r2,r2,18248
   1b950:	10800003 	ldbu	r2,0(r2)
   1b954:	1884703a 	and	r2,r3,r2
   1b958:	1007883a 	mov	r3,r2
   1b95c:	008000b4 	movhi	r2,2
   1b960:	1091d204 	addi	r2,r2,18248
   1b964:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   1b968:	e0bff917 	ldw	r2,-28(fp)
   1b96c:	10800c03 	ldbu	r2,48(r2)
   1b970:	10800214 	ori	r2,r2,8
   1b974:	1007883a 	mov	r3,r2
   1b978:	e0bff917 	ldw	r2,-28(fp)
   1b97c:	10c00c05 	stb	r3,48(r2)
   1b980:	e0bff817 	ldw	r2,-32(fp)
   1b984:	e0bffe15 	stw	r2,-8(fp)
   1b988:	e0bffe17 	ldw	r2,-8(fp)
   1b98c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1b990:	e0bff703 	ldbu	r2,-36(fp)
   1b994:	10800058 	cmpnei	r2,r2,1
   1b998:	1000011e 	bne	r2,zero,1b9a0 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   1b99c:	00151b80 	call	151b8 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1b9a0:	0005883a 	mov	r2,zero
}
   1b9a4:	e037883a 	mov	sp,fp
   1b9a8:	dfc00117 	ldw	ra,4(sp)
   1b9ac:	df000017 	ldw	fp,0(sp)
   1b9b0:	dec00204 	addi	sp,sp,8
   1b9b4:	f800283a 	ret

0001b9b8 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   1b9b8:	defff604 	addi	sp,sp,-40
   1b9bc:	dfc00915 	stw	ra,36(sp)
   1b9c0:	df000815 	stw	fp,32(sp)
   1b9c4:	df000804 	addi	fp,sp,32
   1b9c8:	2005883a 	mov	r2,r4
   1b9cc:	e17fff15 	stw	r5,-4(fp)
   1b9d0:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b9d4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   1b9d8:	e0bffe03 	ldbu	r2,-8(fp)
   1b9dc:	10800570 	cmpltui	r2,r2,21
   1b9e0:	1000051e 	bne	r2,zero,1b9f8 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   1b9e4:	e0bffe03 	ldbu	r2,-8(fp)
   1b9e8:	10803fe0 	cmpeqi	r2,r2,255
   1b9ec:	1000021e 	bne	r2,zero,1b9f8 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1b9f0:	00800a84 	movi	r2,42
   1b9f4:	00003606 	br	1bad0 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1b9f8:	e0bfff17 	ldw	r2,-4(fp)
   1b9fc:	1000021e 	bne	r2,zero,1ba08 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1ba00:	00800244 	movi	r2,9
   1ba04:	00003206 	br	1bad0 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ba08:	0005303a 	rdctl	r2,status
   1ba0c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ba10:	e0fffa17 	ldw	r3,-24(fp)
   1ba14:	00bfff84 	movi	r2,-2
   1ba18:	1884703a 	and	r2,r3,r2
   1ba1c:	1001703a 	wrctl	status,r2
  
  return context;
   1ba20:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1ba24:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   1ba28:	e0bffe03 	ldbu	r2,-8(fp)
   1ba2c:	10803fd8 	cmpnei	r2,r2,255
   1ba30:	1000051e 	bne	r2,zero,1ba48 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   1ba34:	008000b4 	movhi	r2,2
   1ba38:	1091d504 	addi	r2,r2,18260
   1ba3c:	10800017 	ldw	r2,0(r2)
   1ba40:	10800c83 	ldbu	r2,50(r2)
   1ba44:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1ba48:	e0fffe03 	ldbu	r3,-8(fp)
   1ba4c:	008000f4 	movhi	r2,3
   1ba50:	10985004 	addi	r2,r2,24896
   1ba54:	18c7883a 	add	r3,r3,r3
   1ba58:	18c7883a 	add	r3,r3,r3
   1ba5c:	10c5883a 	add	r2,r2,r3
   1ba60:	10800017 	ldw	r2,0(r2)
   1ba64:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1ba68:	e0bff917 	ldw	r2,-28(fp)
   1ba6c:	1000061e 	bne	r2,zero,1ba88 <OSTaskQuery+0xd0>
   1ba70:	e0bff817 	ldw	r2,-32(fp)
   1ba74:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ba78:	e0bffb17 	ldw	r2,-20(fp)
   1ba7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1ba80:	00800a44 	movi	r2,41
   1ba84:	00001206 	br	1bad0 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1ba88:	e0bff917 	ldw	r2,-28(fp)
   1ba8c:	10800058 	cmpnei	r2,r2,1
   1ba90:	1000061e 	bne	r2,zero,1baac <OSTaskQuery+0xf4>
   1ba94:	e0bff817 	ldw	r2,-32(fp)
   1ba98:	e0bffc15 	stw	r2,-16(fp)
   1ba9c:	e0bffc17 	ldw	r2,-16(fp)
   1baa0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1baa4:	008010c4 	movi	r2,67
   1baa8:	00000906 	br	1bad0 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   1baac:	e13fff17 	ldw	r4,-4(fp)
   1bab0:	e17ff917 	ldw	r5,-28(fp)
   1bab4:	01801b04 	movi	r6,108
   1bab8:	00151540 	call	15154 <OS_MemCopy>
   1babc:	e0bff817 	ldw	r2,-32(fp)
   1bac0:	e0bffd15 	stw	r2,-12(fp)
   1bac4:	e0bffd17 	ldw	r2,-12(fp)
   1bac8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1bacc:	0005883a 	mov	r2,zero
}
   1bad0:	e037883a 	mov	sp,fp
   1bad4:	dfc00117 	ldw	ra,4(sp)
   1bad8:	df000017 	ldw	fp,0(sp)
   1badc:	dec00204 	addi	sp,sp,8
   1bae0:	f800283a 	ret

0001bae4 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1bae4:	defffc04 	addi	sp,sp,-16
   1bae8:	df000315 	stw	fp,12(sp)
   1baec:	df000304 	addi	fp,sp,12
   1baf0:	e13ffd15 	stw	r4,-12(fp)
   1baf4:	e17ffe15 	stw	r5,-8(fp)
   1baf8:	3005883a 	mov	r2,r6
   1bafc:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1bb00:	e0bfff0b 	ldhu	r2,-4(fp)
   1bb04:	1080004c 	andi	r2,r2,1
   1bb08:	10000d26 	beq	r2,zero,1bb40 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   1bb0c:	e0bfff0b 	ldhu	r2,-4(fp)
   1bb10:	1080008c 	andi	r2,r2,2
   1bb14:	10000a26 	beq	r2,zero,1bb40 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1bb18:	00000706 	br	1bb38 <OS_TaskStkClr+0x54>
                size--;
   1bb1c:	e0bffe17 	ldw	r2,-8(fp)
   1bb20:	10bfffc4 	addi	r2,r2,-1
   1bb24:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1bb28:	e0bffd17 	ldw	r2,-12(fp)
   1bb2c:	10c00104 	addi	r3,r2,4
   1bb30:	e0fffd15 	stw	r3,-12(fp)
   1bb34:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1bb38:	e0bffe17 	ldw	r2,-8(fp)
   1bb3c:	103ff71e 	bne	r2,zero,1bb1c <__alt_mem_Flash_flash_data+0xf401bb1c>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1bb40:	e037883a 	mov	sp,fp
   1bb44:	df000017 	ldw	fp,0(sp)
   1bb48:	dec00104 	addi	sp,sp,4
   1bb4c:	f800283a 	ret

0001bb50 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1bb50:	defff904 	addi	sp,sp,-28
   1bb54:	dfc00615 	stw	ra,24(sp)
   1bb58:	df000515 	stw	fp,20(sp)
   1bb5c:	df000504 	addi	fp,sp,20
   1bb60:	2005883a 	mov	r2,r4
   1bb64:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1bb68:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1bb6c:	008000b4 	movhi	r2,2
   1bb70:	1091d404 	addi	r2,r2,18256
   1bb74:	10800003 	ldbu	r2,0(r2)
   1bb78:	10803fcc 	andi	r2,r2,255
   1bb7c:	10000126 	beq	r2,zero,1bb84 <OSTimeDly+0x34>
        return;
   1bb80:	00004006 	br	1bc84 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   1bb84:	e0bfff0b 	ldhu	r2,-4(fp)
   1bb88:	10003e26 	beq	r2,zero,1bc84 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bb8c:	0005303a 	rdctl	r2,status
   1bb90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bb94:	e0fffd17 	ldw	r3,-12(fp)
   1bb98:	00bfff84 	movi	r2,-2
   1bb9c:	1884703a 	and	r2,r3,r2
   1bba0:	1001703a 	wrctl	status,r2
  
  return context;
   1bba4:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   1bba8:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   1bbac:	008000b4 	movhi	r2,2
   1bbb0:	1091d504 	addi	r2,r2,18260
   1bbb4:	10800017 	ldw	r2,0(r2)
   1bbb8:	10800d03 	ldbu	r2,52(r2)
   1bbbc:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1bbc0:	e0fffc03 	ldbu	r3,-16(fp)
   1bbc4:	e13ffc03 	ldbu	r4,-16(fp)
   1bbc8:	008000b4 	movhi	r2,2
   1bbcc:	1091d244 	addi	r2,r2,18249
   1bbd0:	1105883a 	add	r2,r2,r4
   1bbd4:	10800003 	ldbu	r2,0(r2)
   1bbd8:	1009883a 	mov	r4,r2
   1bbdc:	008000b4 	movhi	r2,2
   1bbe0:	1091d504 	addi	r2,r2,18260
   1bbe4:	10800017 	ldw	r2,0(r2)
   1bbe8:	10800d43 	ldbu	r2,53(r2)
   1bbec:	0084303a 	nor	r2,zero,r2
   1bbf0:	2084703a 	and	r2,r4,r2
   1bbf4:	1009883a 	mov	r4,r2
   1bbf8:	008000b4 	movhi	r2,2
   1bbfc:	1091d244 	addi	r2,r2,18249
   1bc00:	10c5883a 	add	r2,r2,r3
   1bc04:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1bc08:	e0fffc03 	ldbu	r3,-16(fp)
   1bc0c:	008000b4 	movhi	r2,2
   1bc10:	1091d244 	addi	r2,r2,18249
   1bc14:	10c5883a 	add	r2,r2,r3
   1bc18:	10800003 	ldbu	r2,0(r2)
   1bc1c:	10803fcc 	andi	r2,r2,255
   1bc20:	10000e1e 	bne	r2,zero,1bc5c <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1bc24:	008000b4 	movhi	r2,2
   1bc28:	1091d504 	addi	r2,r2,18260
   1bc2c:	10800017 	ldw	r2,0(r2)
   1bc30:	10800d83 	ldbu	r2,54(r2)
   1bc34:	0084303a 	nor	r2,zero,r2
   1bc38:	1007883a 	mov	r3,r2
   1bc3c:	008000b4 	movhi	r2,2
   1bc40:	1091d204 	addi	r2,r2,18248
   1bc44:	10800003 	ldbu	r2,0(r2)
   1bc48:	1884703a 	and	r2,r3,r2
   1bc4c:	1007883a 	mov	r3,r2
   1bc50:	008000b4 	movhi	r2,2
   1bc54:	1091d204 	addi	r2,r2,18248
   1bc58:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   1bc5c:	008000b4 	movhi	r2,2
   1bc60:	1091d504 	addi	r2,r2,18260
   1bc64:	10800017 	ldw	r2,0(r2)
   1bc68:	e0ffff0b 	ldhu	r3,-4(fp)
   1bc6c:	10c00b8d 	sth	r3,46(r2)
   1bc70:	e0bffb17 	ldw	r2,-20(fp)
   1bc74:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bc78:	e0bffe17 	ldw	r2,-8(fp)
   1bc7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1bc80:	00151b80 	call	151b8 <OS_Sched>
    }
}
   1bc84:	e037883a 	mov	sp,fp
   1bc88:	dfc00117 	ldw	ra,4(sp)
   1bc8c:	df000017 	ldw	fp,0(sp)
   1bc90:	dec00204 	addi	sp,sp,8
   1bc94:	f800283a 	ret

0001bc98 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1bc98:	defff804 	addi	sp,sp,-32
   1bc9c:	dfc00715 	stw	ra,28(sp)
   1bca0:	df000615 	stw	fp,24(sp)
   1bca4:	df000604 	addi	fp,sp,24
   1bca8:	2015883a 	mov	r10,r4
   1bcac:	2809883a 	mov	r4,r5
   1bcb0:	3007883a 	mov	r3,r6
   1bcb4:	3805883a 	mov	r2,r7
   1bcb8:	e2bffc05 	stb	r10,-16(fp)
   1bcbc:	e13ffd05 	stb	r4,-12(fp)
   1bcc0:	e0fffe05 	stb	r3,-8(fp)
   1bcc4:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1bcc8:	008000b4 	movhi	r2,2
   1bccc:	1091d404 	addi	r2,r2,18256
   1bcd0:	10800003 	ldbu	r2,0(r2)
   1bcd4:	10803fcc 	andi	r2,r2,255
   1bcd8:	10000226 	beq	r2,zero,1bce4 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   1bcdc:	00801544 	movi	r2,85
   1bce0:	00004206 	br	1bdec <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1bce4:	e0bffc03 	ldbu	r2,-16(fp)
   1bce8:	1000081e 	bne	r2,zero,1bd0c <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   1bcec:	e0bffd03 	ldbu	r2,-12(fp)
   1bcf0:	1000061e 	bne	r2,zero,1bd0c <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   1bcf4:	e0bffe03 	ldbu	r2,-8(fp)
   1bcf8:	1000041e 	bne	r2,zero,1bd0c <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   1bcfc:	e0bfff0b 	ldhu	r2,-4(fp)
   1bd00:	1000021e 	bne	r2,zero,1bd0c <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   1bd04:	00801504 	movi	r2,84
   1bd08:	00003806 	br	1bdec <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   1bd0c:	e0bffd03 	ldbu	r2,-12(fp)
   1bd10:	10800f30 	cmpltui	r2,r2,60
   1bd14:	1000021e 	bne	r2,zero,1bd20 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   1bd18:	00801444 	movi	r2,81
   1bd1c:	00003306 	br	1bdec <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   1bd20:	e0bffe03 	ldbu	r2,-8(fp)
   1bd24:	10800f30 	cmpltui	r2,r2,60
   1bd28:	1000021e 	bne	r2,zero,1bd34 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1bd2c:	00801484 	movi	r2,82
   1bd30:	00002e06 	br	1bdec <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   1bd34:	e0bfff0b 	ldhu	r2,-4(fp)
   1bd38:	1080fa30 	cmpltui	r2,r2,1000
   1bd3c:	1000021e 	bne	r2,zero,1bd48 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   1bd40:	008014c4 	movi	r2,83
   1bd44:	00002906 	br	1bdec <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1bd48:	e0bffc03 	ldbu	r2,-16(fp)
   1bd4c:	10c38424 	muli	r3,r2,3600
   1bd50:	e0bffd03 	ldbu	r2,-12(fp)
   1bd54:	10800f24 	muli	r2,r2,60
   1bd58:	1887883a 	add	r3,r3,r2
   1bd5c:	e0bffe03 	ldbu	r2,-8(fp)
   1bd60:	1885883a 	add	r2,r3,r2
   1bd64:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   1bd68:	e0bfff0b 	ldhu	r2,-4(fp)
   1bd6c:	10800f84 	addi	r2,r2,62
   1bd70:	100690fa 	slli	r3,r2,3
   1bd74:	008418b4 	movhi	r2,4194
   1bd78:	109374c4 	addi	r2,r2,19923
   1bd7c:	188a383a 	mulxuu	r5,r3,r2
   1bd80:	1885383a 	mul	r2,r3,r2
   1bd84:	1011883a 	mov	r8,r2
   1bd88:	2813883a 	mov	r9,r5
   1bd8c:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1bd90:	2085883a 	add	r2,r4,r2
   1bd94:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   1bd98:	e0bffb17 	ldw	r2,-20(fp)
   1bd9c:	1004d43a 	srli	r2,r2,16
   1bda0:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   1bda4:	e0bffb17 	ldw	r2,-20(fp)
   1bda8:	10bfffcc 	andi	r2,r2,65535
   1bdac:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   1bdb0:	e0bffb17 	ldw	r2,-20(fp)
   1bdb4:	10bfffcc 	andi	r2,r2,65535
   1bdb8:	1009883a 	mov	r4,r2
   1bdbc:	001bb500 	call	1bb50 <OSTimeDly>
    while (loops > 0) {
   1bdc0:	00000706 	br	1bde0 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   1bdc4:	01200014 	movui	r4,32768
   1bdc8:	001bb500 	call	1bb50 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   1bdcc:	01200014 	movui	r4,32768
   1bdd0:	001bb500 	call	1bb50 <OSTimeDly>
        loops--;
   1bdd4:	e0bffa0b 	ldhu	r2,-24(fp)
   1bdd8:	10bfffc4 	addi	r2,r2,-1
   1bddc:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1bde0:	e0bffa0b 	ldhu	r2,-24(fp)
   1bde4:	103ff71e 	bne	r2,zero,1bdc4 <__alt_mem_Flash_flash_data+0xf401bdc4>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1bde8:	0005883a 	mov	r2,zero
}
   1bdec:	e037883a 	mov	sp,fp
   1bdf0:	dfc00117 	ldw	ra,4(sp)
   1bdf4:	df000017 	ldw	fp,0(sp)
   1bdf8:	dec00204 	addi	sp,sp,8
   1bdfc:	f800283a 	ret

0001be00 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1be00:	defff504 	addi	sp,sp,-44
   1be04:	dfc00a15 	stw	ra,40(sp)
   1be08:	df000915 	stw	fp,36(sp)
   1be0c:	df000904 	addi	fp,sp,36
   1be10:	2005883a 	mov	r2,r4
   1be14:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1be18:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   1be1c:	e0bfff03 	ldbu	r2,-4(fp)
   1be20:	10800530 	cmpltui	r2,r2,20
   1be24:	1000021e 	bne	r2,zero,1be30 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1be28:	00800a84 	movi	r2,42
   1be2c:	00006b06 	br	1bfdc <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1be30:	0005303a 	rdctl	r2,status
   1be34:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1be38:	e0fff917 	ldw	r3,-28(fp)
   1be3c:	00bfff84 	movi	r2,-2
   1be40:	1884703a 	and	r2,r3,r2
   1be44:	1001703a 	wrctl	status,r2
  
  return context;
   1be48:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1be4c:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1be50:	e0ffff03 	ldbu	r3,-4(fp)
   1be54:	008000f4 	movhi	r2,3
   1be58:	10985004 	addi	r2,r2,24896
   1be5c:	18c7883a 	add	r3,r3,r3
   1be60:	18c7883a 	add	r3,r3,r3
   1be64:	10c5883a 	add	r2,r2,r3
   1be68:	10800017 	ldw	r2,0(r2)
   1be6c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   1be70:	e0bff817 	ldw	r2,-32(fp)
   1be74:	1000061e 	bne	r2,zero,1be90 <OSTimeDlyResume+0x90>
   1be78:	e0bff717 	ldw	r2,-36(fp)
   1be7c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1be80:	e0bffa17 	ldw	r2,-24(fp)
   1be84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1be88:	008010c4 	movi	r2,67
   1be8c:	00005306 	br	1bfdc <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1be90:	e0bff817 	ldw	r2,-32(fp)
   1be94:	10800058 	cmpnei	r2,r2,1
   1be98:	1000061e 	bne	r2,zero,1beb4 <OSTimeDlyResume+0xb4>
   1be9c:	e0bff717 	ldw	r2,-36(fp)
   1bea0:	e0bffb15 	stw	r2,-20(fp)
   1bea4:	e0bffb17 	ldw	r2,-20(fp)
   1bea8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1beac:	008010c4 	movi	r2,67
   1beb0:	00004a06 	br	1bfdc <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1beb4:	e0bff817 	ldw	r2,-32(fp)
   1beb8:	10800b8b 	ldhu	r2,46(r2)
   1bebc:	10bfffcc 	andi	r2,r2,65535
   1bec0:	1000061e 	bne	r2,zero,1bedc <OSTimeDlyResume+0xdc>
   1bec4:	e0bff717 	ldw	r2,-36(fp)
   1bec8:	e0bffc15 	stw	r2,-16(fp)
   1becc:	e0bffc17 	ldw	r2,-16(fp)
   1bed0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1bed4:	00801404 	movi	r2,80
   1bed8:	00004006 	br	1bfdc <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   1bedc:	e0bff817 	ldw	r2,-32(fp)
   1bee0:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1bee4:	e0bff817 	ldw	r2,-32(fp)
   1bee8:	10800c03 	ldbu	r2,48(r2)
   1beec:	10803fcc 	andi	r2,r2,255
   1bef0:	10800dcc 	andi	r2,r2,55
   1bef4:	10000b26 	beq	r2,zero,1bf24 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   1bef8:	e0bff817 	ldw	r2,-32(fp)
   1befc:	10c00c03 	ldbu	r3,48(r2)
   1bf00:	00bff204 	movi	r2,-56
   1bf04:	1884703a 	and	r2,r3,r2
   1bf08:	1007883a 	mov	r3,r2
   1bf0c:	e0bff817 	ldw	r2,-32(fp)
   1bf10:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1bf14:	e0bff817 	ldw	r2,-32(fp)
   1bf18:	00c00044 	movi	r3,1
   1bf1c:	10c00c45 	stb	r3,49(r2)
   1bf20:	00000206 	br	1bf2c <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1bf24:	e0bff817 	ldw	r2,-32(fp)
   1bf28:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1bf2c:	e0bff817 	ldw	r2,-32(fp)
   1bf30:	10800c03 	ldbu	r2,48(r2)
   1bf34:	10803fcc 	andi	r2,r2,255
   1bf38:	1080020c 	andi	r2,r2,8
   1bf3c:	1000221e 	bne	r2,zero,1bfc8 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1bf40:	e0bff817 	ldw	r2,-32(fp)
   1bf44:	10c00d83 	ldbu	r3,54(r2)
   1bf48:	008000b4 	movhi	r2,2
   1bf4c:	1091d204 	addi	r2,r2,18248
   1bf50:	10800003 	ldbu	r2,0(r2)
   1bf54:	1884b03a 	or	r2,r3,r2
   1bf58:	1007883a 	mov	r3,r2
   1bf5c:	008000b4 	movhi	r2,2
   1bf60:	1091d204 	addi	r2,r2,18248
   1bf64:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1bf68:	e0bff817 	ldw	r2,-32(fp)
   1bf6c:	10800d03 	ldbu	r2,52(r2)
   1bf70:	10c03fcc 	andi	r3,r2,255
   1bf74:	e0bff817 	ldw	r2,-32(fp)
   1bf78:	10800d03 	ldbu	r2,52(r2)
   1bf7c:	11003fcc 	andi	r4,r2,255
   1bf80:	008000b4 	movhi	r2,2
   1bf84:	1091d244 	addi	r2,r2,18249
   1bf88:	1105883a 	add	r2,r2,r4
   1bf8c:	11000003 	ldbu	r4,0(r2)
   1bf90:	e0bff817 	ldw	r2,-32(fp)
   1bf94:	10800d43 	ldbu	r2,53(r2)
   1bf98:	2084b03a 	or	r2,r4,r2
   1bf9c:	1009883a 	mov	r4,r2
   1bfa0:	008000b4 	movhi	r2,2
   1bfa4:	1091d244 	addi	r2,r2,18249
   1bfa8:	10c5883a 	add	r2,r2,r3
   1bfac:	11000005 	stb	r4,0(r2)
   1bfb0:	e0bff717 	ldw	r2,-36(fp)
   1bfb4:	e0bffd15 	stw	r2,-12(fp)
   1bfb8:	e0bffd17 	ldw	r2,-12(fp)
   1bfbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   1bfc0:	00151b80 	call	151b8 <OS_Sched>
   1bfc4:	00000406 	br	1bfd8 <OSTimeDlyResume+0x1d8>
   1bfc8:	e0bff717 	ldw	r2,-36(fp)
   1bfcc:	e0bffe15 	stw	r2,-8(fp)
   1bfd0:	e0bffe17 	ldw	r2,-8(fp)
   1bfd4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1bfd8:	0005883a 	mov	r2,zero
}
   1bfdc:	e037883a 	mov	sp,fp
   1bfe0:	dfc00117 	ldw	ra,4(sp)
   1bfe4:	df000017 	ldw	fp,0(sp)
   1bfe8:	dec00204 	addi	sp,sp,8
   1bfec:	f800283a 	ret

0001bff0 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1bff0:	defffb04 	addi	sp,sp,-20
   1bff4:	df000415 	stw	fp,16(sp)
   1bff8:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1bffc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c000:	0005303a 	rdctl	r2,status
   1c004:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c008:	e0fffe17 	ldw	r3,-8(fp)
   1c00c:	00bfff84 	movi	r2,-2
   1c010:	1884703a 	and	r2,r3,r2
   1c014:	1001703a 	wrctl	status,r2
  
  return context;
   1c018:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1c01c:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1c020:	008000b4 	movhi	r2,2
   1c024:	1091d604 	addi	r2,r2,18264
   1c028:	10800017 	ldw	r2,0(r2)
   1c02c:	e0bffd15 	stw	r2,-12(fp)
   1c030:	e0bffc17 	ldw	r2,-16(fp)
   1c034:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c038:	e0bfff17 	ldw	r2,-4(fp)
   1c03c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1c040:	e0bffd17 	ldw	r2,-12(fp)
}
   1c044:	e037883a 	mov	sp,fp
   1c048:	df000017 	ldw	fp,0(sp)
   1c04c:	dec00104 	addi	sp,sp,4
   1c050:	f800283a 	ret

0001c054 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   1c054:	defffb04 	addi	sp,sp,-20
   1c058:	df000415 	stw	fp,16(sp)
   1c05c:	df000404 	addi	fp,sp,16
   1c060:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c064:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c068:	0005303a 	rdctl	r2,status
   1c06c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c070:	e0fffd17 	ldw	r3,-12(fp)
   1c074:	00bfff84 	movi	r2,-2
   1c078:	1884703a 	and	r2,r3,r2
   1c07c:	1001703a 	wrctl	status,r2
  
  return context;
   1c080:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   1c084:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1c088:	008000b4 	movhi	r2,2
   1c08c:	1091d604 	addi	r2,r2,18264
   1c090:	e0ffff17 	ldw	r3,-4(fp)
   1c094:	10c00015 	stw	r3,0(r2)
   1c098:	e0bffc17 	ldw	r2,-16(fp)
   1c09c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c0a0:	e0bffe17 	ldw	r2,-8(fp)
   1c0a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1c0a8:	e037883a 	mov	sp,fp
   1c0ac:	df000017 	ldw	fp,0(sp)
   1c0b0:	dec00104 	addi	sp,sp,4
   1c0b4:	f800283a 	ret

0001c0b8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1c0b8:	defffd04 	addi	sp,sp,-12
   1c0bc:	dfc00215 	stw	ra,8(sp)
   1c0c0:	df000115 	stw	fp,4(sp)
   1c0c4:	df000104 	addi	fp,sp,4
   1c0c8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1c0cc:	e13fff17 	ldw	r4,-4(fp)
   1c0d0:	014000b4 	movhi	r5,2
   1c0d4:	2949a004 	addi	r5,r5,9856
   1c0d8:	001ea8c0 	call	1ea8c <alt_dev_llist_insert>
}
   1c0dc:	e037883a 	mov	sp,fp
   1c0e0:	dfc00117 	ldw	ra,4(sp)
   1c0e4:	df000017 	ldw	fp,0(sp)
   1c0e8:	dec00204 	addi	sp,sp,8
   1c0ec:	f800283a 	ret

0001c0f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1c0f0:	defffd04 	addi	sp,sp,-12
   1c0f4:	dfc00215 	stw	ra,8(sp)
   1c0f8:	df000115 	stw	fp,4(sp)
   1c0fc:	df000104 	addi	fp,sp,4
   1c100:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1c104:	001f3a00 	call	1f3a0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1c108:	00800044 	movi	r2,1
   1c10c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1c110:	e037883a 	mov	sp,fp
   1c114:	dfc00117 	ldw	ra,4(sp)
   1c118:	df000017 	ldw	fp,0(sp)
   1c11c:	dec00204 	addi	sp,sp,8
   1c120:	f800283a 	ret

0001c124 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1c124:	defffd04 	addi	sp,sp,-12
   1c128:	dfc00215 	stw	ra,8(sp)
   1c12c:	df000115 	stw	fp,4(sp)
   1c130:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1c134:	01040034 	movhi	r4,4096
   1c138:	21080004 	addi	r4,r4,8192
   1c13c:	000b883a 	mov	r5,zero
   1c140:	000d883a 	mov	r6,zero
   1c144:	01c00204 	movi	r7,8
   1c148:	001d2980 	call	1d298 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   1c14c:	010000b4 	movhi	r4,2
   1c150:	21049904 	addi	r4,r4,4708
   1c154:	000b883a 	mov	r5,zero
   1c158:	01800204 	movi	r6,8
   1c15c:	001c6600 	call	1c660 <altera_avalon_jtag_uart_init>
   1c160:	010000b4 	movhi	r4,2
   1c164:	21048f04 	addi	r4,r4,4668
   1c168:	001c0b80 	call	1c0b8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   1c16c:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1c170:	010000b4 	movhi	r4,2
   1c174:	2108aa04 	addi	r4,r4,8872
   1c178:	001c0b80 	call	1c0b8 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   1c17c:	010000b4 	movhi	r4,2
   1c180:	2108b604 	addi	r4,r4,8920
   1c184:	001c0b80 	call	1c0b8 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   1c188:	010000b4 	movhi	r4,2
   1c18c:	2108c204 	addi	r4,r4,8968
   1c190:	001d3c80 	call	1d3c8 <alt_up_character_lcd_init>
   1c194:	010000b4 	movhi	r4,2
   1c198:	2108c204 	addi	r4,r4,8968
   1c19c:	001c0b80 	call	1c0b8 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   1c1a0:	010000b4 	movhi	r4,2
   1c1a4:	2108cd04 	addi	r4,r4,9012
   1c1a8:	001c0b80 	call	1c0b8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   1c1ac:	010000b4 	movhi	r4,2
   1c1b0:	2108d804 	addi	r4,r4,9056
   1c1b4:	001c0b80 	call	1c0b8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   1c1b8:	010000b4 	movhi	r4,2
   1c1bc:	2108e304 	addi	r4,r4,9100
   1c1c0:	001c0b80 	call	1c0b8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   1c1c4:	010000b4 	movhi	r4,2
   1c1c8:	2108ee04 	addi	r4,r4,9144
   1c1cc:	001c0b80 	call	1c0b8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   1c1d0:	010000b4 	movhi	r4,2
   1c1d4:	2108f904 	addi	r4,r4,9188
   1c1d8:	001c0b80 	call	1c0b8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   1c1dc:	010000b4 	movhi	r4,2
   1c1e0:	21090404 	addi	r4,r4,9232
   1c1e4:	001c0b80 	call	1c0b8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   1c1e8:	010000b4 	movhi	r4,2
   1c1ec:	21090f04 	addi	r4,r4,9276
   1c1f0:	001c0b80 	call	1c0b8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   1c1f4:	010000b4 	movhi	r4,2
   1c1f8:	21091a04 	addi	r4,r4,9320
   1c1fc:	001c0b80 	call	1c0b8 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   1c200:	010000b4 	movhi	r4,2
   1c204:	21092504 	addi	r4,r4,9364
   1c208:	001dce00 	call	1dce0 <alt_up_ps2_init>
   1c20c:	010000b4 	movhi	r4,2
   1c210:	21092504 	addi	r4,r4,9364
   1c214:	001c0b80 	call	1c0b8 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   1c218:	010000b4 	movhi	r4,2
   1c21c:	21093304 	addi	r4,r4,9420
   1c220:	001dce00 	call	1dce0 <alt_up_ps2_init>
   1c224:	010000b4 	movhi	r4,2
   1c228:	21093304 	addi	r4,r4,9420
   1c22c:	001c0b80 	call	1c0b8 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1c230:	010000b4 	movhi	r4,2
   1c234:	21094104 	addi	r4,r4,9476
   1c238:	001c0b80 	call	1c0b8 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   1c23c:	010000b4 	movhi	r4,2
   1c240:	21094c04 	addi	r4,r4,9520
   1c244:	001c0b80 	call	1c0b8 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   1c248:	008000b4 	movhi	r2,2
   1c24c:	10895904 	addi	r2,r2,9572
   1c250:	10800a17 	ldw	r2,40(r2)
   1c254:	10800104 	addi	r2,r2,4
   1c258:	10800017 	ldw	r2,0(r2)
   1c25c:	10ffffcc 	andi	r3,r2,65535
   1c260:	008000b4 	movhi	r2,2
   1c264:	10895904 	addi	r2,r2,9572
   1c268:	10c00c15 	stw	r3,48(r2)
   1c26c:	008000b4 	movhi	r2,2
   1c270:	10895904 	addi	r2,r2,9572
   1c274:	10800a17 	ldw	r2,40(r2)
   1c278:	10800104 	addi	r2,r2,4
   1c27c:	10800017 	ldw	r2,0(r2)
   1c280:	1006d43a 	srli	r3,r2,16
   1c284:	008000b4 	movhi	r2,2
   1c288:	10895904 	addi	r2,r2,9572
   1c28c:	10c00d15 	stw	r3,52(r2)
   1c290:	008000b4 	movhi	r2,2
   1c294:	10895904 	addi	r2,r2,9572
   1c298:	10800c17 	ldw	r2,48(r2)
   1c29c:	10801068 	cmpgeui	r2,r2,65
   1c2a0:	1000081e 	bne	r2,zero,1c2c4 <alt_sys_init+0x1a0>
   1c2a4:	008000b4 	movhi	r2,2
   1c2a8:	10895904 	addi	r2,r2,9572
   1c2ac:	00c00fc4 	movi	r3,63
   1c2b0:	10c00f15 	stw	r3,60(r2)
   1c2b4:	008000b4 	movhi	r2,2
   1c2b8:	10895904 	addi	r2,r2,9572
   1c2bc:	00c00184 	movi	r3,6
   1c2c0:	10c01015 	stw	r3,64(r2)
   1c2c4:	008000b4 	movhi	r2,2
   1c2c8:	10895904 	addi	r2,r2,9572
   1c2cc:	10800d17 	ldw	r2,52(r2)
   1c2d0:	10800868 	cmpgeui	r2,r2,33
   1c2d4:	1000041e 	bne	r2,zero,1c2e8 <alt_sys_init+0x1c4>
   1c2d8:	008000b4 	movhi	r2,2
   1c2dc:	10895904 	addi	r2,r2,9572
   1c2e0:	00c007c4 	movi	r3,31
   1c2e4:	10c01115 	stw	r3,68(r2)
   1c2e8:	010000b4 	movhi	r4,2
   1c2ec:	21095904 	addi	r4,r4,9572
   1c2f0:	001e5f80 	call	1e5f8 <alt_up_char_buffer_init>
   1c2f4:	010000b4 	movhi	r4,2
   1c2f8:	21095904 	addi	r4,r4,9572
   1c2fc:	001c0b80 	call	1c0b8 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   1c300:	008000b4 	movhi	r2,2
   1c304:	10896b04 	addi	r2,r2,9644
   1c308:	10800a17 	ldw	r2,40(r2)
   1c30c:	10800017 	ldw	r2,0(r2)
   1c310:	1007883a 	mov	r3,r2
   1c314:	008000b4 	movhi	r2,2
   1c318:	10896b04 	addi	r2,r2,9644
   1c31c:	10c00b15 	stw	r3,44(r2)
   1c320:	008000b4 	movhi	r2,2
   1c324:	10896b04 	addi	r2,r2,9644
   1c328:	10800a17 	ldw	r2,40(r2)
   1c32c:	10800104 	addi	r2,r2,4
   1c330:	10800017 	ldw	r2,0(r2)
   1c334:	1007883a 	mov	r3,r2
   1c338:	008000b4 	movhi	r2,2
   1c33c:	10896b04 	addi	r2,r2,9644
   1c340:	10c00c15 	stw	r3,48(r2)
   1c344:	008000b4 	movhi	r2,2
   1c348:	10896b04 	addi	r2,r2,9644
   1c34c:	10800a17 	ldw	r2,40(r2)
   1c350:	10800204 	addi	r2,r2,8
   1c354:	10800017 	ldw	r2,0(r2)
   1c358:	10ffffcc 	andi	r3,r2,65535
   1c35c:	008000b4 	movhi	r2,2
   1c360:	10896b04 	addi	r2,r2,9644
   1c364:	10c00f15 	stw	r3,60(r2)
   1c368:	008000b4 	movhi	r2,2
   1c36c:	10896b04 	addi	r2,r2,9644
   1c370:	10800a17 	ldw	r2,40(r2)
   1c374:	10800204 	addi	r2,r2,8
   1c378:	10800017 	ldw	r2,0(r2)
   1c37c:	1006d43a 	srli	r3,r2,16
   1c380:	008000b4 	movhi	r2,2
   1c384:	10896b04 	addi	r2,r2,9644
   1c388:	10c01015 	stw	r3,64(r2)
   1c38c:	008000b4 	movhi	r2,2
   1c390:	10896b04 	addi	r2,r2,9644
   1c394:	10800a17 	ldw	r2,40(r2)
   1c398:	10800304 	addi	r2,r2,12
   1c39c:	10800017 	ldw	r2,0(r2)
   1c3a0:	1005d07a 	srai	r2,r2,1
   1c3a4:	10c0004c 	andi	r3,r2,1
   1c3a8:	008000b4 	movhi	r2,2
   1c3ac:	10896b04 	addi	r2,r2,9644
   1c3b0:	10c00d15 	stw	r3,52(r2)
   1c3b4:	008000b4 	movhi	r2,2
   1c3b8:	10896b04 	addi	r2,r2,9644
   1c3bc:	10800a17 	ldw	r2,40(r2)
   1c3c0:	10800304 	addi	r2,r2,12
   1c3c4:	10800017 	ldw	r2,0(r2)
   1c3c8:	1005d13a 	srai	r2,r2,4
   1c3cc:	10c003cc 	andi	r3,r2,15
   1c3d0:	008000b4 	movhi	r2,2
   1c3d4:	10896b04 	addi	r2,r2,9644
   1c3d8:	10c00e15 	stw	r3,56(r2)
   1c3dc:	008000b4 	movhi	r2,2
   1c3e0:	10896b04 	addi	r2,r2,9644
   1c3e4:	10800a17 	ldw	r2,40(r2)
   1c3e8:	10800304 	addi	r2,r2,12
   1c3ec:	10800017 	ldw	r2,0(r2)
   1c3f0:	1005d43a 	srai	r2,r2,16
   1c3f4:	e0bfff05 	stb	r2,-4(fp)
   1c3f8:	008000b4 	movhi	r2,2
   1c3fc:	10896b04 	addi	r2,r2,9644
   1c400:	10800a17 	ldw	r2,40(r2)
   1c404:	10800304 	addi	r2,r2,12
   1c408:	10800017 	ldw	r2,0(r2)
   1c40c:	1004d63a 	srli	r2,r2,24
   1c410:	e0bfff45 	stb	r2,-3(fp)
   1c414:	008000b4 	movhi	r2,2
   1c418:	10896b04 	addi	r2,r2,9644
   1c41c:	10800e17 	ldw	r2,56(r2)
   1c420:	10800058 	cmpnei	r2,r2,1
   1c424:	1000041e 	bne	r2,zero,1c438 <alt_sys_init+0x314>
   1c428:	008000b4 	movhi	r2,2
   1c42c:	10896b04 	addi	r2,r2,9644
   1c430:	10001115 	stw	zero,68(r2)
   1c434:	00000e06 	br	1c470 <alt_sys_init+0x34c>
   1c438:	008000b4 	movhi	r2,2
   1c43c:	10896b04 	addi	r2,r2,9644
   1c440:	10800e17 	ldw	r2,56(r2)
   1c444:	10800098 	cmpnei	r2,r2,2
   1c448:	1000051e 	bne	r2,zero,1c460 <alt_sys_init+0x33c>
   1c44c:	008000b4 	movhi	r2,2
   1c450:	10896b04 	addi	r2,r2,9644
   1c454:	00c00044 	movi	r3,1
   1c458:	10c01115 	stw	r3,68(r2)
   1c45c:	00000406 	br	1c470 <alt_sys_init+0x34c>
   1c460:	008000b4 	movhi	r2,2
   1c464:	10896b04 	addi	r2,r2,9644
   1c468:	00c00084 	movi	r3,2
   1c46c:	10c01115 	stw	r3,68(r2)
   1c470:	e0bfff03 	ldbu	r2,-4(fp)
   1c474:	00c00804 	movi	r3,32
   1c478:	1885c83a 	sub	r2,r3,r2
   1c47c:	00ffffc4 	movi	r3,-1
   1c480:	1886d83a 	srl	r3,r3,r2
   1c484:	008000b4 	movhi	r2,2
   1c488:	10896b04 	addi	r2,r2,9644
   1c48c:	10c01215 	stw	r3,72(r2)
   1c490:	e0ffff03 	ldbu	r3,-4(fp)
   1c494:	008000b4 	movhi	r2,2
   1c498:	10896b04 	addi	r2,r2,9644
   1c49c:	10801117 	ldw	r2,68(r2)
   1c4a0:	1887883a 	add	r3,r3,r2
   1c4a4:	008000b4 	movhi	r2,2
   1c4a8:	10896b04 	addi	r2,r2,9644
   1c4ac:	10c01315 	stw	r3,76(r2)
   1c4b0:	e0bfff43 	ldbu	r2,-3(fp)
   1c4b4:	00c00804 	movi	r3,32
   1c4b8:	1885c83a 	sub	r2,r3,r2
   1c4bc:	00ffffc4 	movi	r3,-1
   1c4c0:	1886d83a 	srl	r3,r3,r2
   1c4c4:	008000b4 	movhi	r2,2
   1c4c8:	10896b04 	addi	r2,r2,9644
   1c4cc:	10c01415 	stw	r3,80(r2)
   1c4d0:	010000b4 	movhi	r4,2
   1c4d4:	21096b04 	addi	r4,r4,9644
   1c4d8:	001c0b80 	call	1c0b8 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   1c4dc:	010000b4 	movhi	r4,2
   1c4e0:	21098004 	addi	r4,r4,9728
   1c4e4:	001c0b80 	call	1c0b8 <alt_dev_reg>
}
   1c4e8:	e037883a 	mov	sp,fp
   1c4ec:	dfc00117 	ldw	ra,4(sp)
   1c4f0:	df000017 	ldw	fp,0(sp)
   1c4f4:	dec00204 	addi	sp,sp,8
   1c4f8:	f800283a 	ret

0001c4fc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1c4fc:	defffa04 	addi	sp,sp,-24
   1c500:	dfc00515 	stw	ra,20(sp)
   1c504:	df000415 	stw	fp,16(sp)
   1c508:	df000404 	addi	fp,sp,16
   1c50c:	e13ffd15 	stw	r4,-12(fp)
   1c510:	e17ffe15 	stw	r5,-8(fp)
   1c514:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1c518:	e0bffd17 	ldw	r2,-12(fp)
   1c51c:	10800017 	ldw	r2,0(r2)
   1c520:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1c524:	e0bffc17 	ldw	r2,-16(fp)
   1c528:	10c00a04 	addi	r3,r2,40
   1c52c:	e0bffd17 	ldw	r2,-12(fp)
   1c530:	10800217 	ldw	r2,8(r2)
   1c534:	1809883a 	mov	r4,r3
   1c538:	e17ffe17 	ldw	r5,-8(fp)
   1c53c:	e1bfff17 	ldw	r6,-4(fp)
   1c540:	100f883a 	mov	r7,r2
   1c544:	001ccac0 	call	1ccac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1c548:	e037883a 	mov	sp,fp
   1c54c:	dfc00117 	ldw	ra,4(sp)
   1c550:	df000017 	ldw	fp,0(sp)
   1c554:	dec00204 	addi	sp,sp,8
   1c558:	f800283a 	ret

0001c55c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1c55c:	defffa04 	addi	sp,sp,-24
   1c560:	dfc00515 	stw	ra,20(sp)
   1c564:	df000415 	stw	fp,16(sp)
   1c568:	df000404 	addi	fp,sp,16
   1c56c:	e13ffd15 	stw	r4,-12(fp)
   1c570:	e17ffe15 	stw	r5,-8(fp)
   1c574:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1c578:	e0bffd17 	ldw	r2,-12(fp)
   1c57c:	10800017 	ldw	r2,0(r2)
   1c580:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1c584:	e0bffc17 	ldw	r2,-16(fp)
   1c588:	10c00a04 	addi	r3,r2,40
   1c58c:	e0bffd17 	ldw	r2,-12(fp)
   1c590:	10800217 	ldw	r2,8(r2)
   1c594:	1809883a 	mov	r4,r3
   1c598:	e17ffe17 	ldw	r5,-8(fp)
   1c59c:	e1bfff17 	ldw	r6,-4(fp)
   1c5a0:	100f883a 	mov	r7,r2
   1c5a4:	001cf600 	call	1cf60 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1c5a8:	e037883a 	mov	sp,fp
   1c5ac:	dfc00117 	ldw	ra,4(sp)
   1c5b0:	df000017 	ldw	fp,0(sp)
   1c5b4:	dec00204 	addi	sp,sp,8
   1c5b8:	f800283a 	ret

0001c5bc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1c5bc:	defffc04 	addi	sp,sp,-16
   1c5c0:	dfc00315 	stw	ra,12(sp)
   1c5c4:	df000215 	stw	fp,8(sp)
   1c5c8:	df000204 	addi	fp,sp,8
   1c5cc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1c5d0:	e0bfff17 	ldw	r2,-4(fp)
   1c5d4:	10800017 	ldw	r2,0(r2)
   1c5d8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1c5dc:	e0bffe17 	ldw	r2,-8(fp)
   1c5e0:	10c00a04 	addi	r3,r2,40
   1c5e4:	e0bfff17 	ldw	r2,-4(fp)
   1c5e8:	10800217 	ldw	r2,8(r2)
   1c5ec:	1809883a 	mov	r4,r3
   1c5f0:	100b883a 	mov	r5,r2
   1c5f4:	001cb580 	call	1cb58 <altera_avalon_jtag_uart_close>
}
   1c5f8:	e037883a 	mov	sp,fp
   1c5fc:	dfc00117 	ldw	ra,4(sp)
   1c600:	df000017 	ldw	fp,0(sp)
   1c604:	dec00204 	addi	sp,sp,8
   1c608:	f800283a 	ret

0001c60c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1c60c:	defffa04 	addi	sp,sp,-24
   1c610:	dfc00515 	stw	ra,20(sp)
   1c614:	df000415 	stw	fp,16(sp)
   1c618:	df000404 	addi	fp,sp,16
   1c61c:	e13ffd15 	stw	r4,-12(fp)
   1c620:	e17ffe15 	stw	r5,-8(fp)
   1c624:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1c628:	e0bffd17 	ldw	r2,-12(fp)
   1c62c:	10800017 	ldw	r2,0(r2)
   1c630:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1c634:	e0bffc17 	ldw	r2,-16(fp)
   1c638:	10800a04 	addi	r2,r2,40
   1c63c:	1009883a 	mov	r4,r2
   1c640:	e17ffe17 	ldw	r5,-8(fp)
   1c644:	e1bfff17 	ldw	r6,-4(fp)
   1c648:	001cbc00 	call	1cbc0 <altera_avalon_jtag_uart_ioctl>
}
   1c64c:	e037883a 	mov	sp,fp
   1c650:	dfc00117 	ldw	ra,4(sp)
   1c654:	df000017 	ldw	fp,0(sp)
   1c658:	dec00204 	addi	sp,sp,8
   1c65c:	f800283a 	ret

0001c660 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1c660:	defff104 	addi	sp,sp,-60
   1c664:	dfc00e15 	stw	ra,56(sp)
   1c668:	df000d15 	stw	fp,52(sp)
   1c66c:	df000d04 	addi	fp,sp,52
   1c670:	e13ff915 	stw	r4,-28(fp)
   1c674:	e17ffa15 	stw	r5,-24(fp)
   1c678:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   1c67c:	e0bff917 	ldw	r2,-28(fp)
   1c680:	10800c04 	addi	r2,r2,48
   1c684:	e0bff315 	stw	r2,-52(fp)
   1c688:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   1c68c:	e0fff40b 	ldhu	r3,-48(fp)
   1c690:	e0bff884 	addi	r2,fp,-30
   1c694:	1809883a 	mov	r4,r3
   1c698:	100b883a 	mov	r5,r2
   1c69c:	0015d240 	call	15d24 <OSFlagCreate>
   1c6a0:	1007883a 	mov	r3,r2
   1c6a4:	e0bff317 	ldw	r2,-52(fp)
   1c6a8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   1c6ac:	e0bff917 	ldw	r2,-28(fp)
   1c6b0:	10800a04 	addi	r2,r2,40
   1c6b4:	e0bff515 	stw	r2,-44(fp)
   1c6b8:	00800044 	movi	r2,1
   1c6bc:	e0bff60d 	sth	r2,-40(fp)
   1c6c0:	e0bff60b 	ldhu	r2,-40(fp)
   1c6c4:	1009883a 	mov	r4,r2
   1c6c8:	00198040 	call	19804 <OSSemCreate>
   1c6cc:	1007883a 	mov	r3,r2
   1c6d0:	e0bff517 	ldw	r2,-44(fp)
   1c6d4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   1c6d8:	e0bff917 	ldw	r2,-28(fp)
   1c6dc:	10800b04 	addi	r2,r2,44
   1c6e0:	e0bff715 	stw	r2,-36(fp)
   1c6e4:	00800044 	movi	r2,1
   1c6e8:	e0bff80d 	sth	r2,-32(fp)
   1c6ec:	e0bff80b 	ldhu	r2,-32(fp)
   1c6f0:	1009883a 	mov	r4,r2
   1c6f4:	00198040 	call	19804 <OSSemCreate>
   1c6f8:	1007883a 	mov	r3,r2
   1c6fc:	e0bff717 	ldw	r2,-36(fp)
   1c700:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1c704:	e0bff917 	ldw	r2,-28(fp)
   1c708:	00c00044 	movi	r3,1
   1c70c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1c710:	e0bff917 	ldw	r2,-28(fp)
   1c714:	10800017 	ldw	r2,0(r2)
   1c718:	10800104 	addi	r2,r2,4
   1c71c:	1007883a 	mov	r3,r2
   1c720:	e0bff917 	ldw	r2,-28(fp)
   1c724:	10800817 	ldw	r2,32(r2)
   1c728:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   1c72c:	e0bffb17 	ldw	r2,-20(fp)
   1c730:	1009883a 	mov	r4,r2
   1c734:	e17ff917 	ldw	r5,-28(fp)
   1c738:	018000b4 	movhi	r6,2
   1c73c:	31b1e804 	addi	r6,r6,-14432
   1c740:	001ede00 	call	1ede0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1c744:	e0bff917 	ldw	r2,-28(fp)
   1c748:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1c74c:	e0bff917 	ldw	r2,-28(fp)
   1c750:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1c754:	008000b4 	movhi	r2,2
   1c758:	1091db04 	addi	r2,r2,18284
   1c75c:	10800017 	ldw	r2,0(r2)
   1c760:	1809883a 	mov	r4,r3
   1c764:	100b883a 	mov	r5,r2
   1c768:	018000b4 	movhi	r6,2
   1c76c:	31b29204 	addi	r6,r6,-13752
   1c770:	e1fff917 	ldw	r7,-28(fp)
   1c774:	001e8e00 	call	1e8e0 <alt_alarm_start>
   1c778:	1000040e 	bge	r2,zero,1c78c <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1c77c:	e0fff917 	ldw	r3,-28(fp)
   1c780:	00a00034 	movhi	r2,32768
   1c784:	10bfffc4 	addi	r2,r2,-1
   1c788:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1c78c:	e037883a 	mov	sp,fp
   1c790:	dfc00117 	ldw	ra,4(sp)
   1c794:	df000017 	ldw	fp,0(sp)
   1c798:	dec00204 	addi	sp,sp,8
   1c79c:	f800283a 	ret

0001c7a0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1c7a0:	defff104 	addi	sp,sp,-60
   1c7a4:	dfc00e15 	stw	ra,56(sp)
   1c7a8:	df000d15 	stw	fp,52(sp)
   1c7ac:	df000d04 	addi	fp,sp,52
   1c7b0:	e13ffe15 	stw	r4,-8(fp)
   1c7b4:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1c7b8:	e0bffe17 	ldw	r2,-8(fp)
   1c7bc:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   1c7c0:	e0bff517 	ldw	r2,-44(fp)
   1c7c4:	10800017 	ldw	r2,0(r2)
   1c7c8:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1c7cc:	e0bff617 	ldw	r2,-40(fp)
   1c7d0:	10800104 	addi	r2,r2,4
   1c7d4:	10800037 	ldwio	r2,0(r2)
   1c7d8:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1c7dc:	e0bff717 	ldw	r2,-36(fp)
   1c7e0:	1080c00c 	andi	r2,r2,768
   1c7e4:	1000011e 	bne	r2,zero,1c7ec <altera_avalon_jtag_uart_irq+0x4c>
      break;
   1c7e8:	00009206 	br	1ca34 <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1c7ec:	e0bff717 	ldw	r2,-36(fp)
   1c7f0:	1080400c 	andi	r2,r2,256
   1c7f4:	10004726 	beq	r2,zero,1c914 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1c7f8:	00800074 	movhi	r2,1
   1c7fc:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c800:	e0bff517 	ldw	r2,-44(fp)
   1c804:	10800d17 	ldw	r2,52(r2)
   1c808:	10800044 	addi	r2,r2,1
   1c80c:	1081ffcc 	andi	r2,r2,2047
   1c810:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   1c814:	e0bff517 	ldw	r2,-44(fp)
   1c818:	10c00e17 	ldw	r3,56(r2)
   1c81c:	e0bff817 	ldw	r2,-32(fp)
   1c820:	1880011e 	bne	r3,r2,1c828 <altera_avalon_jtag_uart_irq+0x88>
          break;
   1c824:	00002906 	br	1c8cc <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1c828:	e0bff617 	ldw	r2,-40(fp)
   1c82c:	10800037 	ldwio	r2,0(r2)
   1c830:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1c834:	e0bff317 	ldw	r2,-52(fp)
   1c838:	10a0000c 	andi	r2,r2,32768
   1c83c:	1000011e 	bne	r2,zero,1c844 <altera_avalon_jtag_uart_irq+0xa4>
          break;
   1c840:	00002206 	br	1c8cc <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1c844:	e0bff517 	ldw	r2,-44(fp)
   1c848:	10800d17 	ldw	r2,52(r2)
   1c84c:	e0fff317 	ldw	r3,-52(fp)
   1c850:	1809883a 	mov	r4,r3
   1c854:	e0fff517 	ldw	r3,-44(fp)
   1c858:	1885883a 	add	r2,r3,r2
   1c85c:	10801104 	addi	r2,r2,68
   1c860:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c864:	e0bff517 	ldw	r2,-44(fp)
   1c868:	10800d17 	ldw	r2,52(r2)
   1c86c:	10800044 	addi	r2,r2,1
   1c870:	10c1ffcc 	andi	r3,r2,2047
   1c874:	e0bff517 	ldw	r2,-44(fp)
   1c878:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   1c87c:	e0bff517 	ldw	r2,-44(fp)
   1c880:	10800c17 	ldw	r2,48(r2)
   1c884:	e0bff915 	stw	r2,-28(fp)
   1c888:	00800044 	movi	r2,1
   1c88c:	e0bffa0d 	sth	r2,-24(fp)
   1c890:	00800044 	movi	r2,1
   1c894:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1c898:	008000b4 	movhi	r2,2
   1c89c:	1091c644 	addi	r2,r2,18201
   1c8a0:	10800003 	ldbu	r2,0(r2)
   1c8a4:	10803fcc 	andi	r2,r2,255
   1c8a8:	103fd526 	beq	r2,zero,1c800 <__alt_mem_Flash_flash_data+0xf401c800>
  {
    OSFlagPost (group, flags, opt, &err);
   1c8ac:	e17ffa0b 	ldhu	r5,-24(fp)
   1c8b0:	e0fffa83 	ldbu	r3,-22(fp)
   1c8b4:	e0bffcc4 	addi	r2,fp,-13
   1c8b8:	e13ff917 	ldw	r4,-28(fp)
   1c8bc:	180d883a 	mov	r6,r3
   1c8c0:	100f883a 	mov	r7,r2
   1c8c4:	00169940 	call	16994 <OSFlagPost>
      }
   1c8c8:	003fcd06 	br	1c800 <__alt_mem_Flash_flash_data+0xf401c800>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1c8cc:	e0bff317 	ldw	r2,-52(fp)
   1c8d0:	10bfffec 	andhi	r2,r2,65535
   1c8d4:	10000f26 	beq	r2,zero,1c914 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1c8d8:	e0bff517 	ldw	r2,-44(fp)
   1c8dc:	10c00817 	ldw	r3,32(r2)
   1c8e0:	00bfff84 	movi	r2,-2
   1c8e4:	1886703a 	and	r3,r3,r2
   1c8e8:	e0bff517 	ldw	r2,-44(fp)
   1c8ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1c8f0:	e0bff617 	ldw	r2,-40(fp)
   1c8f4:	10800104 	addi	r2,r2,4
   1c8f8:	1007883a 	mov	r3,r2
   1c8fc:	e0bff517 	ldw	r2,-44(fp)
   1c900:	10800817 	ldw	r2,32(r2)
   1c904:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1c908:	e0bff617 	ldw	r2,-40(fp)
   1c90c:	10800104 	addi	r2,r2,4
   1c910:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1c914:	e0bff717 	ldw	r2,-36(fp)
   1c918:	1080800c 	andi	r2,r2,512
   1c91c:	10004426 	beq	r2,zero,1ca30 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1c920:	e0bff717 	ldw	r2,-36(fp)
   1c924:	1004d43a 	srli	r2,r2,16
   1c928:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1c92c:	00002706 	br	1c9cc <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1c930:	e0bff617 	ldw	r2,-40(fp)
   1c934:	e0fff517 	ldw	r3,-44(fp)
   1c938:	18c01017 	ldw	r3,64(r3)
   1c93c:	e13ff517 	ldw	r4,-44(fp)
   1c940:	20c7883a 	add	r3,r4,r3
   1c944:	18c21104 	addi	r3,r3,2116
   1c948:	18c00003 	ldbu	r3,0(r3)
   1c94c:	18c03fcc 	andi	r3,r3,255
   1c950:	18c0201c 	xori	r3,r3,128
   1c954:	18ffe004 	addi	r3,r3,-128
   1c958:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c95c:	e0bff517 	ldw	r2,-44(fp)
   1c960:	10801017 	ldw	r2,64(r2)
   1c964:	10800044 	addi	r2,r2,1
   1c968:	10c1ffcc 	andi	r3,r2,2047
   1c96c:	e0bff517 	ldw	r2,-44(fp)
   1c970:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   1c974:	e0bff517 	ldw	r2,-44(fp)
   1c978:	10800c17 	ldw	r2,48(r2)
   1c97c:	e0bffb15 	stw	r2,-20(fp)
   1c980:	00800084 	movi	r2,2
   1c984:	e0bffc0d 	sth	r2,-16(fp)
   1c988:	00800044 	movi	r2,1
   1c98c:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1c990:	008000b4 	movhi	r2,2
   1c994:	1091c644 	addi	r2,r2,18201
   1c998:	10800003 	ldbu	r2,0(r2)
   1c99c:	10803fcc 	andi	r2,r2,255
   1c9a0:	10000726 	beq	r2,zero,1c9c0 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   1c9a4:	e17ffc0b 	ldhu	r5,-16(fp)
   1c9a8:	e0fffc83 	ldbu	r3,-14(fp)
   1c9ac:	e0bffd04 	addi	r2,fp,-12
   1c9b0:	e13ffb17 	ldw	r4,-20(fp)
   1c9b4:	180d883a 	mov	r6,r3
   1c9b8:	100f883a 	mov	r7,r2
   1c9bc:	00169940 	call	16994 <OSFlagPost>

        space--;
   1c9c0:	e0bff417 	ldw	r2,-48(fp)
   1c9c4:	10bfffc4 	addi	r2,r2,-1
   1c9c8:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1c9cc:	e0bff417 	ldw	r2,-48(fp)
   1c9d0:	10000526 	beq	r2,zero,1c9e8 <altera_avalon_jtag_uart_irq+0x248>
   1c9d4:	e0bff517 	ldw	r2,-44(fp)
   1c9d8:	10c01017 	ldw	r3,64(r2)
   1c9dc:	e0bff517 	ldw	r2,-44(fp)
   1c9e0:	10800f17 	ldw	r2,60(r2)
   1c9e4:	18bfd21e 	bne	r3,r2,1c930 <__alt_mem_Flash_flash_data+0xf401c930>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1c9e8:	e0bff417 	ldw	r2,-48(fp)
   1c9ec:	10001026 	beq	r2,zero,1ca30 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1c9f0:	e0bff517 	ldw	r2,-44(fp)
   1c9f4:	10c00817 	ldw	r3,32(r2)
   1c9f8:	00bfff44 	movi	r2,-3
   1c9fc:	1886703a 	and	r3,r3,r2
   1ca00:	e0bff517 	ldw	r2,-44(fp)
   1ca04:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1ca08:	e0bff517 	ldw	r2,-44(fp)
   1ca0c:	10800017 	ldw	r2,0(r2)
   1ca10:	10800104 	addi	r2,r2,4
   1ca14:	1007883a 	mov	r3,r2
   1ca18:	e0bff517 	ldw	r2,-44(fp)
   1ca1c:	10800817 	ldw	r2,32(r2)
   1ca20:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1ca24:	e0bff617 	ldw	r2,-40(fp)
   1ca28:	10800104 	addi	r2,r2,4
   1ca2c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1ca30:	003f6606 	br	1c7cc <__alt_mem_Flash_flash_data+0xf401c7cc>
}
   1ca34:	e037883a 	mov	sp,fp
   1ca38:	dfc00117 	ldw	ra,4(sp)
   1ca3c:	df000017 	ldw	fp,0(sp)
   1ca40:	dec00204 	addi	sp,sp,8
   1ca44:	f800283a 	ret

0001ca48 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1ca48:	defff904 	addi	sp,sp,-28
   1ca4c:	dfc00615 	stw	ra,24(sp)
   1ca50:	df000515 	stw	fp,20(sp)
   1ca54:	df000504 	addi	fp,sp,20
   1ca58:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1ca5c:	e0bfff17 	ldw	r2,-4(fp)
   1ca60:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1ca64:	e0bffb17 	ldw	r2,-20(fp)
   1ca68:	10800017 	ldw	r2,0(r2)
   1ca6c:	10800104 	addi	r2,r2,4
   1ca70:	10800037 	ldwio	r2,0(r2)
   1ca74:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1ca78:	e0bffc17 	ldw	r2,-16(fp)
   1ca7c:	1081000c 	andi	r2,r2,1024
   1ca80:	10000b26 	beq	r2,zero,1cab0 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1ca84:	e0bffb17 	ldw	r2,-20(fp)
   1ca88:	10800017 	ldw	r2,0(r2)
   1ca8c:	10800104 	addi	r2,r2,4
   1ca90:	1007883a 	mov	r3,r2
   1ca94:	e0bffb17 	ldw	r2,-20(fp)
   1ca98:	10800817 	ldw	r2,32(r2)
   1ca9c:	10810014 	ori	r2,r2,1024
   1caa0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1caa4:	e0bffb17 	ldw	r2,-20(fp)
   1caa8:	10000915 	stw	zero,36(r2)
   1caac:	00002206 	br	1cb38 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1cab0:	e0bffb17 	ldw	r2,-20(fp)
   1cab4:	10c00917 	ldw	r3,36(r2)
   1cab8:	00a00034 	movhi	r2,32768
   1cabc:	10bfff04 	addi	r2,r2,-4
   1cac0:	10c01d36 	bltu	r2,r3,1cb38 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   1cac4:	e0bffb17 	ldw	r2,-20(fp)
   1cac8:	10800917 	ldw	r2,36(r2)
   1cacc:	10c00044 	addi	r3,r2,1
   1cad0:	e0bffb17 	ldw	r2,-20(fp)
   1cad4:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   1cad8:	e0bffb17 	ldw	r2,-20(fp)
   1cadc:	10c00917 	ldw	r3,36(r2)
   1cae0:	e0bffb17 	ldw	r2,-20(fp)
   1cae4:	10800117 	ldw	r2,4(r2)
   1cae8:	18801336 	bltu	r3,r2,1cb38 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   1caec:	e0bffb17 	ldw	r2,-20(fp)
   1caf0:	10800c17 	ldw	r2,48(r2)
   1caf4:	e0bffd15 	stw	r2,-12(fp)
   1caf8:	00800104 	movi	r2,4
   1cafc:	e0bffe0d 	sth	r2,-8(fp)
   1cb00:	00800044 	movi	r2,1
   1cb04:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1cb08:	008000b4 	movhi	r2,2
   1cb0c:	1091c644 	addi	r2,r2,18201
   1cb10:	10800003 	ldbu	r2,0(r2)
   1cb14:	10803fcc 	andi	r2,r2,255
   1cb18:	10000726 	beq	r2,zero,1cb38 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   1cb1c:	e17ffe0b 	ldhu	r5,-8(fp)
   1cb20:	e0fffe83 	ldbu	r3,-6(fp)
   1cb24:	e0bffec4 	addi	r2,fp,-5
   1cb28:	e13ffd17 	ldw	r4,-12(fp)
   1cb2c:	180d883a 	mov	r6,r3
   1cb30:	100f883a 	mov	r7,r2
   1cb34:	00169940 	call	16994 <OSFlagPost>
   1cb38:	008000b4 	movhi	r2,2
   1cb3c:	1091db04 	addi	r2,r2,18284
   1cb40:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   1cb44:	e037883a 	mov	sp,fp
   1cb48:	dfc00117 	ldw	ra,4(sp)
   1cb4c:	df000017 	ldw	fp,0(sp)
   1cb50:	dec00204 	addi	sp,sp,8
   1cb54:	f800283a 	ret

0001cb58 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1cb58:	defffd04 	addi	sp,sp,-12
   1cb5c:	df000215 	stw	fp,8(sp)
   1cb60:	df000204 	addi	fp,sp,8
   1cb64:	e13ffe15 	stw	r4,-8(fp)
   1cb68:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1cb6c:	00000506 	br	1cb84 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1cb70:	e0bfff17 	ldw	r2,-4(fp)
   1cb74:	1090000c 	andi	r2,r2,16384
   1cb78:	10000226 	beq	r2,zero,1cb84 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1cb7c:	00bffd44 	movi	r2,-11
   1cb80:	00000b06 	br	1cbb0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1cb84:	e0bffe17 	ldw	r2,-8(fp)
   1cb88:	10c01017 	ldw	r3,64(r2)
   1cb8c:	e0bffe17 	ldw	r2,-8(fp)
   1cb90:	10800f17 	ldw	r2,60(r2)
   1cb94:	18800526 	beq	r3,r2,1cbac <altera_avalon_jtag_uart_close+0x54>
   1cb98:	e0bffe17 	ldw	r2,-8(fp)
   1cb9c:	10c00917 	ldw	r3,36(r2)
   1cba0:	e0bffe17 	ldw	r2,-8(fp)
   1cba4:	10800117 	ldw	r2,4(r2)
   1cba8:	18bff136 	bltu	r3,r2,1cb70 <__alt_mem_Flash_flash_data+0xf401cb70>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1cbac:	0005883a 	mov	r2,zero
}
   1cbb0:	e037883a 	mov	sp,fp
   1cbb4:	df000017 	ldw	fp,0(sp)
   1cbb8:	dec00104 	addi	sp,sp,4
   1cbbc:	f800283a 	ret

0001cbc0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1cbc0:	defffa04 	addi	sp,sp,-24
   1cbc4:	df000515 	stw	fp,20(sp)
   1cbc8:	df000504 	addi	fp,sp,20
   1cbcc:	e13ffd15 	stw	r4,-12(fp)
   1cbd0:	e17ffe15 	stw	r5,-8(fp)
   1cbd4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1cbd8:	00bff9c4 	movi	r2,-25
   1cbdc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1cbe0:	e0bffe17 	ldw	r2,-8(fp)
   1cbe4:	10da8060 	cmpeqi	r3,r2,27137
   1cbe8:	1800031e 	bne	r3,zero,1cbf8 <altera_avalon_jtag_uart_ioctl+0x38>
   1cbec:	109a80a0 	cmpeqi	r2,r2,27138
   1cbf0:	1000191e 	bne	r2,zero,1cc58 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   1cbf4:	00002806 	br	1cc98 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1cbf8:	e0bffd17 	ldw	r2,-12(fp)
   1cbfc:	10c00117 	ldw	r3,4(r2)
   1cc00:	00a00034 	movhi	r2,32768
   1cc04:	10bfffc4 	addi	r2,r2,-1
   1cc08:	18801226 	beq	r3,r2,1cc54 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   1cc0c:	e0bfff17 	ldw	r2,-4(fp)
   1cc10:	10800017 	ldw	r2,0(r2)
   1cc14:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1cc18:	e0bffc17 	ldw	r2,-16(fp)
   1cc1c:	10800090 	cmplti	r2,r2,2
   1cc20:	1000061e 	bne	r2,zero,1cc3c <altera_avalon_jtag_uart_ioctl+0x7c>
   1cc24:	e0fffc17 	ldw	r3,-16(fp)
   1cc28:	00a00034 	movhi	r2,32768
   1cc2c:	10bfffc4 	addi	r2,r2,-1
   1cc30:	18800226 	beq	r3,r2,1cc3c <altera_avalon_jtag_uart_ioctl+0x7c>
   1cc34:	e0bffc17 	ldw	r2,-16(fp)
   1cc38:	00000206 	br	1cc44 <altera_avalon_jtag_uart_ioctl+0x84>
   1cc3c:	00a00034 	movhi	r2,32768
   1cc40:	10bfff84 	addi	r2,r2,-2
   1cc44:	e0fffd17 	ldw	r3,-12(fp)
   1cc48:	18800115 	stw	r2,4(r3)
      rc = 0;
   1cc4c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1cc50:	00001106 	br	1cc98 <altera_avalon_jtag_uart_ioctl+0xd8>
   1cc54:	00001006 	br	1cc98 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1cc58:	e0bffd17 	ldw	r2,-12(fp)
   1cc5c:	10c00117 	ldw	r3,4(r2)
   1cc60:	00a00034 	movhi	r2,32768
   1cc64:	10bfffc4 	addi	r2,r2,-1
   1cc68:	18800a26 	beq	r3,r2,1cc94 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1cc6c:	e0bffd17 	ldw	r2,-12(fp)
   1cc70:	10c00917 	ldw	r3,36(r2)
   1cc74:	e0bffd17 	ldw	r2,-12(fp)
   1cc78:	10800117 	ldw	r2,4(r2)
   1cc7c:	1885803a 	cmpltu	r2,r3,r2
   1cc80:	10c03fcc 	andi	r3,r2,255
   1cc84:	e0bfff17 	ldw	r2,-4(fp)
   1cc88:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1cc8c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1cc90:	00000006 	br	1cc94 <altera_avalon_jtag_uart_ioctl+0xd4>
   1cc94:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1cc98:	e0bffb17 	ldw	r2,-20(fp)
}
   1cc9c:	e037883a 	mov	sp,fp
   1cca0:	df000017 	ldw	fp,0(sp)
   1cca4:	dec00104 	addi	sp,sp,4
   1cca8:	f800283a 	ret

0001ccac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1ccac:	deffec04 	addi	sp,sp,-80
   1ccb0:	dfc01315 	stw	ra,76(sp)
   1ccb4:	df001215 	stw	fp,72(sp)
   1ccb8:	df001204 	addi	fp,sp,72
   1ccbc:	e13ffc15 	stw	r4,-16(fp)
   1ccc0:	e17ffd15 	stw	r5,-12(fp)
   1ccc4:	e1bffe15 	stw	r6,-8(fp)
   1ccc8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1cccc:	e0bffd17 	ldw	r2,-12(fp)
   1ccd0:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1ccd4:	e0bffc17 	ldw	r2,-16(fp)
   1ccd8:	10800a17 	ldw	r2,40(r2)
   1ccdc:	e0bff415 	stw	r2,-48(fp)
   1cce0:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1cce4:	e0fff50b 	ldhu	r3,-44(fp)
   1cce8:	e0bffb04 	addi	r2,fp,-20
   1ccec:	e13ff417 	ldw	r4,-48(fp)
   1ccf0:	180b883a 	mov	r5,r3
   1ccf4:	100d883a 	mov	r6,r2
   1ccf8:	0019b6c0 	call	19b6c <OSSemPend>

  while (space > 0)
   1ccfc:	00006506 	br	1ce94 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1cd00:	e0bffc17 	ldw	r2,-16(fp)
   1cd04:	10800d17 	ldw	r2,52(r2)
   1cd08:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   1cd0c:	e0bffc17 	ldw	r2,-16(fp)
   1cd10:	10800e17 	ldw	r2,56(r2)
   1cd14:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   1cd18:	e0fff117 	ldw	r3,-60(fp)
   1cd1c:	e0bff217 	ldw	r2,-56(fp)
   1cd20:	18800536 	bltu	r3,r2,1cd38 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   1cd24:	e0fff117 	ldw	r3,-60(fp)
   1cd28:	e0bff217 	ldw	r2,-56(fp)
   1cd2c:	1885c83a 	sub	r2,r3,r2
   1cd30:	e0bff015 	stw	r2,-64(fp)
   1cd34:	00000406 	br	1cd48 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1cd38:	00c20004 	movi	r3,2048
   1cd3c:	e0bff217 	ldw	r2,-56(fp)
   1cd40:	1885c83a 	sub	r2,r3,r2
   1cd44:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   1cd48:	e0bff017 	ldw	r2,-64(fp)
   1cd4c:	1000011e 	bne	r2,zero,1cd54 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   1cd50:	00001d06 	br	1cdc8 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   1cd54:	e0fffe17 	ldw	r3,-8(fp)
   1cd58:	e0bff017 	ldw	r2,-64(fp)
   1cd5c:	1880022e 	bgeu	r3,r2,1cd68 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   1cd60:	e0bffe17 	ldw	r2,-8(fp)
   1cd64:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1cd68:	e0bff217 	ldw	r2,-56(fp)
   1cd6c:	10801104 	addi	r2,r2,68
   1cd70:	e0fffc17 	ldw	r3,-16(fp)
   1cd74:	1885883a 	add	r2,r3,r2
   1cd78:	e13fef17 	ldw	r4,-68(fp)
   1cd7c:	100b883a 	mov	r5,r2
   1cd80:	e1bff017 	ldw	r6,-64(fp)
   1cd84:	000ae300 	call	ae30 <memcpy>
      ptr   += n;
   1cd88:	e0ffef17 	ldw	r3,-68(fp)
   1cd8c:	e0bff017 	ldw	r2,-64(fp)
   1cd90:	1885883a 	add	r2,r3,r2
   1cd94:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   1cd98:	e0fffe17 	ldw	r3,-8(fp)
   1cd9c:	e0bff017 	ldw	r2,-64(fp)
   1cda0:	1885c83a 	sub	r2,r3,r2
   1cda4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1cda8:	e0fff217 	ldw	r3,-56(fp)
   1cdac:	e0bff017 	ldw	r2,-64(fp)
   1cdb0:	1885883a 	add	r2,r3,r2
   1cdb4:	10c1ffcc 	andi	r3,r2,2047
   1cdb8:	e0bffc17 	ldw	r2,-16(fp)
   1cdbc:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   1cdc0:	e0bffe17 	ldw	r2,-8(fp)
   1cdc4:	00bfce16 	blt	zero,r2,1cd00 <__alt_mem_Flash_flash_data+0xf401cd00>

    /* If we read any data then return it */
    if (ptr != buffer)
   1cdc8:	e0ffef17 	ldw	r3,-68(fp)
   1cdcc:	e0bffd17 	ldw	r2,-12(fp)
   1cdd0:	18800126 	beq	r3,r2,1cdd8 <altera_avalon_jtag_uart_read+0x12c>
      break;
   1cdd4:	00003106 	br	1ce9c <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1cdd8:	e0bfff17 	ldw	r2,-4(fp)
   1cddc:	1090000c 	andi	r2,r2,16384
   1cde0:	10000126 	beq	r2,zero,1cde8 <altera_avalon_jtag_uart_read+0x13c>
      break;
   1cde4:	00002d06 	br	1ce9c <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   1cde8:	008000b4 	movhi	r2,2
   1cdec:	1091c644 	addi	r2,r2,18201
   1cdf0:	10800003 	ldbu	r2,0(r2)
   1cdf4:	10803fcc 	andi	r2,r2,255
   1cdf8:	10800058 	cmpnei	r2,r2,1
   1cdfc:	1000161e 	bne	r2,zero,1ce58 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1ce00:	e0bffc17 	ldw	r2,-16(fp)
   1ce04:	10800c17 	ldw	r2,48(r2)
   1ce08:	e0bff615 	stw	r2,-40(fp)
   1ce0c:	00800144 	movi	r2,5
   1ce10:	e0bff70d 	sth	r2,-36(fp)
   1ce14:	00bfe0c4 	movi	r2,-125
   1ce18:	e0bff785 	stb	r2,-34(fp)
   1ce1c:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1ce20:	008000b4 	movhi	r2,2
   1ce24:	1091c644 	addi	r2,r2,18201
   1ce28:	10800003 	ldbu	r2,0(r2)
   1ce2c:	10803fcc 	andi	r2,r2,255
   1ce30:	10001326 	beq	r2,zero,1ce80 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1ce34:	e17ff70b 	ldhu	r5,-36(fp)
   1ce38:	e1bff783 	ldbu	r6,-34(fp)
   1ce3c:	e0fff80b 	ldhu	r3,-32(fp)
   1ce40:	e0bffb44 	addi	r2,fp,-19
   1ce44:	d8800015 	stw	r2,0(sp)
   1ce48:	e13ff617 	ldw	r4,-40(fp)
   1ce4c:	180f883a 	mov	r7,r3
   1ce50:	001633c0 	call	1633c <OSFlagPend>
   1ce54:	00000a06 	br	1ce80 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1ce58:	0001883a 	nop
   1ce5c:	e0bffc17 	ldw	r2,-16(fp)
   1ce60:	10c00d17 	ldw	r3,52(r2)
   1ce64:	e0bff117 	ldw	r2,-60(fp)
   1ce68:	1880051e 	bne	r3,r2,1ce80 <altera_avalon_jtag_uart_read+0x1d4>
   1ce6c:	e0bffc17 	ldw	r2,-16(fp)
   1ce70:	10c00917 	ldw	r3,36(r2)
   1ce74:	e0bffc17 	ldw	r2,-16(fp)
   1ce78:	10800117 	ldw	r2,4(r2)
   1ce7c:	18bff736 	bltu	r3,r2,1ce5c <__alt_mem_Flash_flash_data+0xf401ce5c>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1ce80:	e0bffc17 	ldw	r2,-16(fp)
   1ce84:	10c00d17 	ldw	r3,52(r2)
   1ce88:	e0bff117 	ldw	r2,-60(fp)
   1ce8c:	1880011e 	bne	r3,r2,1ce94 <altera_avalon_jtag_uart_read+0x1e8>
      break;
   1ce90:	00000206 	br	1ce9c <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1ce94:	e0bffe17 	ldw	r2,-8(fp)
   1ce98:	00bf9916 	blt	zero,r2,1cd00 <__alt_mem_Flash_flash_data+0xf401cd00>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   1ce9c:	e0bffc17 	ldw	r2,-16(fp)
   1cea0:	10800a17 	ldw	r2,40(r2)
   1cea4:	1009883a 	mov	r4,r2
   1cea8:	0019f400 	call	19f40 <OSSemPost>

  if (ptr != buffer)
   1ceac:	e0ffef17 	ldw	r3,-68(fp)
   1ceb0:	e0bffd17 	ldw	r2,-12(fp)
   1ceb4:	18801826 	beq	r3,r2,1cf18 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ceb8:	0005303a 	rdctl	r2,status
   1cebc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cec0:	e0fff917 	ldw	r3,-28(fp)
   1cec4:	00bfff84 	movi	r2,-2
   1cec8:	1884703a 	and	r2,r3,r2
   1cecc:	1001703a 	wrctl	status,r2
  
  return context;
   1ced0:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1ced4:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1ced8:	e0bffc17 	ldw	r2,-16(fp)
   1cedc:	10800817 	ldw	r2,32(r2)
   1cee0:	10c00054 	ori	r3,r2,1
   1cee4:	e0bffc17 	ldw	r2,-16(fp)
   1cee8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1ceec:	e0bffc17 	ldw	r2,-16(fp)
   1cef0:	10800017 	ldw	r2,0(r2)
   1cef4:	10800104 	addi	r2,r2,4
   1cef8:	1007883a 	mov	r3,r2
   1cefc:	e0bffc17 	ldw	r2,-16(fp)
   1cf00:	10800817 	ldw	r2,32(r2)
   1cf04:	18800035 	stwio	r2,0(r3)
   1cf08:	e0bff317 	ldw	r2,-52(fp)
   1cf0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cf10:	e0bffa17 	ldw	r2,-24(fp)
   1cf14:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1cf18:	e0ffef17 	ldw	r3,-68(fp)
   1cf1c:	e0bffd17 	ldw	r2,-12(fp)
   1cf20:	18800426 	beq	r3,r2,1cf34 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   1cf24:	e0ffef17 	ldw	r3,-68(fp)
   1cf28:	e0bffd17 	ldw	r2,-12(fp)
   1cf2c:	1885c83a 	sub	r2,r3,r2
   1cf30:	00000606 	br	1cf4c <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   1cf34:	e0bfff17 	ldw	r2,-4(fp)
   1cf38:	1090000c 	andi	r2,r2,16384
   1cf3c:	10000226 	beq	r2,zero,1cf48 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   1cf40:	00bffd44 	movi	r2,-11
   1cf44:	00000106 	br	1cf4c <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   1cf48:	00bffec4 	movi	r2,-5
}
   1cf4c:	e037883a 	mov	sp,fp
   1cf50:	dfc00117 	ldw	ra,4(sp)
   1cf54:	df000017 	ldw	fp,0(sp)
   1cf58:	dec00204 	addi	sp,sp,8
   1cf5c:	f800283a 	ret

0001cf60 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1cf60:	deffed04 	addi	sp,sp,-76
   1cf64:	dfc01215 	stw	ra,72(sp)
   1cf68:	df001115 	stw	fp,68(sp)
   1cf6c:	df001104 	addi	fp,sp,68
   1cf70:	e13ffc15 	stw	r4,-16(fp)
   1cf74:	e17ffd15 	stw	r5,-12(fp)
   1cf78:	e1bffe15 	stw	r6,-8(fp)
   1cf7c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1cf80:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1cf84:	e0bffd17 	ldw	r2,-12(fp)
   1cf88:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   1cf8c:	e0bffc17 	ldw	r2,-16(fp)
   1cf90:	10800b17 	ldw	r2,44(r2)
   1cf94:	e0bff515 	stw	r2,-44(fp)
   1cf98:	e03ff60d 	sth	zero,-40(fp)
   1cf9c:	e0fff60b 	ldhu	r3,-40(fp)
   1cfa0:	e0bffbc4 	addi	r2,fp,-17
   1cfa4:	e13ff517 	ldw	r4,-44(fp)
   1cfa8:	180b883a 	mov	r5,r3
   1cfac:	100d883a 	mov	r6,r2
   1cfb0:	0019b6c0 	call	19b6c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1cfb4:	00003806 	br	1d098 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1cfb8:	e0bffc17 	ldw	r2,-16(fp)
   1cfbc:	10800f17 	ldw	r2,60(r2)
   1cfc0:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   1cfc4:	e0bffc17 	ldw	r2,-16(fp)
   1cfc8:	10801017 	ldw	r2,64(r2)
   1cfcc:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   1cfd0:	e0fff317 	ldw	r3,-52(fp)
   1cfd4:	e0bff017 	ldw	r2,-64(fp)
   1cfd8:	1880062e 	bgeu	r3,r2,1cff4 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   1cfdc:	e0fff017 	ldw	r3,-64(fp)
   1cfe0:	e0bff317 	ldw	r2,-52(fp)
   1cfe4:	1885c83a 	sub	r2,r3,r2
   1cfe8:	10bfffc4 	addi	r2,r2,-1
   1cfec:	e0bff115 	stw	r2,-60(fp)
   1cff0:	00000b06 	br	1d020 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   1cff4:	e0bff017 	ldw	r2,-64(fp)
   1cff8:	10000526 	beq	r2,zero,1d010 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1cffc:	00c20004 	movi	r3,2048
   1d000:	e0bff317 	ldw	r2,-52(fp)
   1d004:	1885c83a 	sub	r2,r3,r2
   1d008:	e0bff115 	stw	r2,-60(fp)
   1d00c:	00000406 	br	1d020 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1d010:	00c1ffc4 	movi	r3,2047
   1d014:	e0bff317 	ldw	r2,-52(fp)
   1d018:	1885c83a 	sub	r2,r3,r2
   1d01c:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1d020:	e0bff117 	ldw	r2,-60(fp)
   1d024:	1000011e 	bne	r2,zero,1d02c <altera_avalon_jtag_uart_write+0xcc>
        break;
   1d028:	00001d06 	br	1d0a0 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   1d02c:	e0fffe17 	ldw	r3,-8(fp)
   1d030:	e0bff117 	ldw	r2,-60(fp)
   1d034:	1880022e 	bgeu	r3,r2,1d040 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   1d038:	e0bffe17 	ldw	r2,-8(fp)
   1d03c:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1d040:	e0bff317 	ldw	r2,-52(fp)
   1d044:	10821104 	addi	r2,r2,2116
   1d048:	e0fffc17 	ldw	r3,-16(fp)
   1d04c:	1885883a 	add	r2,r3,r2
   1d050:	1009883a 	mov	r4,r2
   1d054:	e17ffd17 	ldw	r5,-12(fp)
   1d058:	e1bff117 	ldw	r6,-60(fp)
   1d05c:	000ae300 	call	ae30 <memcpy>
      ptr   += n;
   1d060:	e0fffd17 	ldw	r3,-12(fp)
   1d064:	e0bff117 	ldw	r2,-60(fp)
   1d068:	1885883a 	add	r2,r3,r2
   1d06c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1d070:	e0fffe17 	ldw	r3,-8(fp)
   1d074:	e0bff117 	ldw	r2,-60(fp)
   1d078:	1885c83a 	sub	r2,r3,r2
   1d07c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1d080:	e0fff317 	ldw	r3,-52(fp)
   1d084:	e0bff117 	ldw	r2,-60(fp)
   1d088:	1885883a 	add	r2,r3,r2
   1d08c:	10c1ffcc 	andi	r3,r2,2047
   1d090:	e0bffc17 	ldw	r2,-16(fp)
   1d094:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1d098:	e0bffe17 	ldw	r2,-8(fp)
   1d09c:	00bfc616 	blt	zero,r2,1cfb8 <__alt_mem_Flash_flash_data+0xf401cfb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d0a0:	0005303a 	rdctl	r2,status
   1d0a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d0a8:	e0fff717 	ldw	r3,-36(fp)
   1d0ac:	00bfff84 	movi	r2,-2
   1d0b0:	1884703a 	and	r2,r3,r2
   1d0b4:	1001703a 	wrctl	status,r2
  
  return context;
   1d0b8:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1d0bc:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1d0c0:	e0bffc17 	ldw	r2,-16(fp)
   1d0c4:	10800817 	ldw	r2,32(r2)
   1d0c8:	10c00094 	ori	r3,r2,2
   1d0cc:	e0bffc17 	ldw	r2,-16(fp)
   1d0d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1d0d4:	e0bffc17 	ldw	r2,-16(fp)
   1d0d8:	10800017 	ldw	r2,0(r2)
   1d0dc:	10800104 	addi	r2,r2,4
   1d0e0:	1007883a 	mov	r3,r2
   1d0e4:	e0bffc17 	ldw	r2,-16(fp)
   1d0e8:	10800817 	ldw	r2,32(r2)
   1d0ec:	18800035 	stwio	r2,0(r3)
   1d0f0:	e0bff417 	ldw	r2,-48(fp)
   1d0f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d0f8:	e0bff817 	ldw	r2,-32(fp)
   1d0fc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1d100:	e0bffe17 	ldw	r2,-8(fp)
   1d104:	00802e0e 	bge	zero,r2,1d1c0 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   1d108:	e0bfff17 	ldw	r2,-4(fp)
   1d10c:	1090000c 	andi	r2,r2,16384
   1d110:	10000126 	beq	r2,zero,1d118 <altera_avalon_jtag_uart_write+0x1b8>
        break;
   1d114:	00002c06 	br	1d1c8 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   1d118:	008000b4 	movhi	r2,2
   1d11c:	1091c644 	addi	r2,r2,18201
   1d120:	10800003 	ldbu	r2,0(r2)
   1d124:	10803fcc 	andi	r2,r2,255
   1d128:	10800058 	cmpnei	r2,r2,1
   1d12c:	1000161e 	bne	r2,zero,1d188 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1d130:	e0bffc17 	ldw	r2,-16(fp)
   1d134:	10800c17 	ldw	r2,48(r2)
   1d138:	e0bff915 	stw	r2,-28(fp)
   1d13c:	00800184 	movi	r2,6
   1d140:	e0bffa0d 	sth	r2,-24(fp)
   1d144:	00bfe0c4 	movi	r2,-125
   1d148:	e0bffa85 	stb	r2,-22(fp)
   1d14c:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1d150:	008000b4 	movhi	r2,2
   1d154:	1091c644 	addi	r2,r2,18201
   1d158:	10800003 	ldbu	r2,0(r2)
   1d15c:	10803fcc 	andi	r2,r2,255
   1d160:	10001326 	beq	r2,zero,1d1b0 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1d164:	e17ffa0b 	ldhu	r5,-24(fp)
   1d168:	e1bffa83 	ldbu	r6,-22(fp)
   1d16c:	e0fffb0b 	ldhu	r3,-20(fp)
   1d170:	e0bffb84 	addi	r2,fp,-18
   1d174:	d8800015 	stw	r2,0(sp)
   1d178:	e13ff917 	ldw	r4,-28(fp)
   1d17c:	180f883a 	mov	r7,r3
   1d180:	001633c0 	call	1633c <OSFlagPend>
   1d184:	00000a06 	br	1d1b0 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1d188:	0001883a 	nop
   1d18c:	e0bffc17 	ldw	r2,-16(fp)
   1d190:	10c01017 	ldw	r3,64(r2)
   1d194:	e0bff017 	ldw	r2,-64(fp)
   1d198:	1880051e 	bne	r3,r2,1d1b0 <altera_avalon_jtag_uart_write+0x250>
   1d19c:	e0bffc17 	ldw	r2,-16(fp)
   1d1a0:	10c00917 	ldw	r3,36(r2)
   1d1a4:	e0bffc17 	ldw	r2,-16(fp)
   1d1a8:	10800117 	ldw	r2,4(r2)
   1d1ac:	18bff736 	bltu	r3,r2,1d18c <__alt_mem_Flash_flash_data+0xf401d18c>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1d1b0:	e0bffc17 	ldw	r2,-16(fp)
   1d1b4:	10800917 	ldw	r2,36(r2)
   1d1b8:	10000126 	beq	r2,zero,1d1c0 <altera_avalon_jtag_uart_write+0x260>
         break;
   1d1bc:	00000206 	br	1d1c8 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   1d1c0:	e0bffe17 	ldw	r2,-8(fp)
   1d1c4:	00bf7b16 	blt	zero,r2,1cfb4 <__alt_mem_Flash_flash_data+0xf401cfb4>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   1d1c8:	e0bffc17 	ldw	r2,-16(fp)
   1d1cc:	10800b17 	ldw	r2,44(r2)
   1d1d0:	1009883a 	mov	r4,r2
   1d1d4:	0019f400 	call	19f40 <OSSemPost>

  if (ptr != start)
   1d1d8:	e0fffd17 	ldw	r3,-12(fp)
   1d1dc:	e0bff217 	ldw	r2,-56(fp)
   1d1e0:	18800426 	beq	r3,r2,1d1f4 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   1d1e4:	e0fffd17 	ldw	r3,-12(fp)
   1d1e8:	e0bff217 	ldw	r2,-56(fp)
   1d1ec:	1885c83a 	sub	r2,r3,r2
   1d1f0:	00000606 	br	1d20c <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   1d1f4:	e0bfff17 	ldw	r2,-4(fp)
   1d1f8:	1090000c 	andi	r2,r2,16384
   1d1fc:	10000226 	beq	r2,zero,1d208 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   1d200:	00bffd44 	movi	r2,-11
   1d204:	00000106 	br	1d20c <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1d208:	00bffec4 	movi	r2,-5
}
   1d20c:	e037883a 	mov	sp,fp
   1d210:	dfc00117 	ldw	ra,4(sp)
   1d214:	df000017 	ldw	fp,0(sp)
   1d218:	dec00204 	addi	sp,sp,8
   1d21c:	f800283a 	ret

0001d220 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1d220:	defff904 	addi	sp,sp,-28
   1d224:	dfc00615 	stw	ra,24(sp)
   1d228:	df000515 	stw	fp,20(sp)
   1d22c:	df000504 	addi	fp,sp,20
   1d230:	e13ffe15 	stw	r4,-8(fp)
   1d234:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1d238:	0007883a 	mov	r3,zero
   1d23c:	e0bffe17 	ldw	r2,-8(fp)
   1d240:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1d244:	e0bffe17 	ldw	r2,-8(fp)
   1d248:	10800104 	addi	r2,r2,4
   1d24c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d250:	0005303a 	rdctl	r2,status
   1d254:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d258:	e0fffc17 	ldw	r3,-16(fp)
   1d25c:	00bfff84 	movi	r2,-2
   1d260:	1884703a 	and	r2,r3,r2
   1d264:	1001703a 	wrctl	status,r2
  
  return context;
   1d268:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1d26c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   1d270:	001f29c0 	call	1f29c <alt_tick>
   1d274:	e0bffb17 	ldw	r2,-20(fp)
   1d278:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d27c:	e0bffd17 	ldw	r2,-12(fp)
   1d280:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1d284:	e037883a 	mov	sp,fp
   1d288:	dfc00117 	ldw	ra,4(sp)
   1d28c:	df000017 	ldw	fp,0(sp)
   1d290:	dec00204 	addi	sp,sp,8
   1d294:	f800283a 	ret

0001d298 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1d298:	defff904 	addi	sp,sp,-28
   1d29c:	dfc00615 	stw	ra,24(sp)
   1d2a0:	df000515 	stw	fp,20(sp)
   1d2a4:	df000504 	addi	fp,sp,20
   1d2a8:	e13ffc15 	stw	r4,-16(fp)
   1d2ac:	e17ffd15 	stw	r5,-12(fp)
   1d2b0:	e1bffe15 	stw	r6,-8(fp)
   1d2b4:	e1ffff15 	stw	r7,-4(fp)
   1d2b8:	e0bfff17 	ldw	r2,-4(fp)
   1d2bc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1d2c0:	008000b4 	movhi	r2,2
   1d2c4:	1091db04 	addi	r2,r2,18284
   1d2c8:	10800017 	ldw	r2,0(r2)
   1d2cc:	1000041e 	bne	r2,zero,1d2e0 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   1d2d0:	008000b4 	movhi	r2,2
   1d2d4:	1091db04 	addi	r2,r2,18284
   1d2d8:	e0fffb17 	ldw	r3,-20(fp)
   1d2dc:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1d2e0:	e0bffc17 	ldw	r2,-16(fp)
   1d2e4:	10800104 	addi	r2,r2,4
   1d2e8:	00c001c4 	movi	r3,7
   1d2ec:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1d2f0:	e13ffe17 	ldw	r4,-8(fp)
   1d2f4:	e17ffc17 	ldw	r5,-16(fp)
   1d2f8:	018000b4 	movhi	r6,2
   1d2fc:	31b48804 	addi	r6,r6,-11744
   1d300:	001ede00 	call	1ede0 <alt_irq_register>
#endif  
}
   1d304:	e037883a 	mov	sp,fp
   1d308:	dfc00117 	ldw	ra,4(sp)
   1d30c:	df000017 	ldw	fp,0(sp)
   1d310:	dec00204 	addi	sp,sp,8
   1d314:	f800283a 	ret

0001d318 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   1d318:	defffc04 	addi	sp,sp,-16
   1d31c:	df000315 	stw	fp,12(sp)
   1d320:	df000304 	addi	fp,sp,12
   1d324:	e13ffe15 	stw	r4,-8(fp)
   1d328:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   1d32c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   1d330:	e0bfff17 	ldw	r2,-4(fp)
   1d334:	1000061e 	bne	r2,zero,1d350 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   1d338:	e0bffe17 	ldw	r2,-8(fp)
   1d33c:	1007883a 	mov	r3,r2
   1d340:	e0bffd03 	ldbu	r2,-12(fp)
   1d344:	1884b03a 	or	r2,r3,r2
   1d348:	e0bffd05 	stb	r2,-12(fp)
   1d34c:	00000806 	br	1d370 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   1d350:	e0bffe17 	ldw	r2,-8(fp)
   1d354:	1007883a 	mov	r3,r2
   1d358:	e0bffd03 	ldbu	r2,-12(fp)
   1d35c:	1884b03a 	or	r2,r3,r2
   1d360:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   1d364:	e0bffd03 	ldbu	r2,-12(fp)
   1d368:	10801014 	ori	r2,r2,64
   1d36c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   1d370:	e0fffd03 	ldbu	r3,-12(fp)
   1d374:	00bfe004 	movi	r2,-128
   1d378:	1884b03a 	or	r2,r3,r2
}
   1d37c:	e037883a 	mov	sp,fp
   1d380:	df000017 	ldw	fp,0(sp)
   1d384:	dec00104 	addi	sp,sp,4
   1d388:	f800283a 	ret

0001d38c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   1d38c:	defffd04 	addi	sp,sp,-12
   1d390:	df000215 	stw	fp,8(sp)
   1d394:	df000204 	addi	fp,sp,8
   1d398:	e13ffe15 	stw	r4,-8(fp)
   1d39c:	2805883a 	mov	r2,r5
   1d3a0:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   1d3a4:	e0bffe17 	ldw	r2,-8(fp)
   1d3a8:	10800a17 	ldw	r2,40(r2)
   1d3ac:	1007883a 	mov	r3,r2
   1d3b0:	e0bfff03 	ldbu	r2,-4(fp)
   1d3b4:	18800025 	stbio	r2,0(r3)
}
   1d3b8:	e037883a 	mov	sp,fp
   1d3bc:	df000017 	ldw	fp,0(sp)
   1d3c0:	dec00104 	addi	sp,sp,4
   1d3c4:	f800283a 	ret

0001d3c8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   1d3c8:	defffe04 	addi	sp,sp,-8
   1d3cc:	df000115 	stw	fp,4(sp)
   1d3d0:	df000104 	addi	fp,sp,4
   1d3d4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   1d3d8:	e0bfff17 	ldw	r2,-4(fp)
   1d3dc:	10800a17 	ldw	r2,40(r2)
   1d3e0:	1007883a 	mov	r3,r2
   1d3e4:	00800044 	movi	r2,1
   1d3e8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   1d3ec:	e037883a 	mov	sp,fp
   1d3f0:	df000017 	ldw	fp,0(sp)
   1d3f4:	dec00104 	addi	sp,sp,4
   1d3f8:	f800283a 	ret

0001d3fc <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   1d3fc:	defffc04 	addi	sp,sp,-16
   1d400:	dfc00315 	stw	ra,12(sp)
   1d404:	df000215 	stw	fp,8(sp)
   1d408:	df000204 	addi	fp,sp,8
   1d40c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1d410:	e13fff17 	ldw	r4,-4(fp)
   1d414:	014000b4 	movhi	r5,2
   1d418:	2949a004 	addi	r5,r5,9856
   1d41c:	001ebe80 	call	1ebe8 <alt_find_dev>
   1d420:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1d424:	e0bffe17 	ldw	r2,-8(fp)
}
   1d428:	e037883a 	mov	sp,fp
   1d42c:	dfc00117 	ldw	ra,4(sp)
   1d430:	df000017 	ldw	fp,0(sp)
   1d434:	dec00204 	addi	sp,sp,8
   1d438:	f800283a 	ret

0001d43c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   1d43c:	defffb04 	addi	sp,sp,-20
   1d440:	df000415 	stw	fp,16(sp)
   1d444:	df000404 	addi	fp,sp,16
   1d448:	e13ffd15 	stw	r4,-12(fp)
   1d44c:	e17ffe15 	stw	r5,-8(fp)
   1d450:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   1d454:	e03ffc15 	stw	zero,-16(fp)
   1d458:	00000f06 	br	1d498 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   1d45c:	e0bffd17 	ldw	r2,-12(fp)
   1d460:	10800a17 	ldw	r2,40(r2)
   1d464:	10800044 	addi	r2,r2,1
   1d468:	1009883a 	mov	r4,r2
   1d46c:	e0fffe17 	ldw	r3,-8(fp)
   1d470:	e0bffc17 	ldw	r2,-16(fp)
   1d474:	1885883a 	add	r2,r3,r2
   1d478:	10800003 	ldbu	r2,0(r2)
   1d47c:	10803fcc 	andi	r2,r2,255
   1d480:	1080201c 	xori	r2,r2,128
   1d484:	10bfe004 	addi	r2,r2,-128
   1d488:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   1d48c:	e0bffc17 	ldw	r2,-16(fp)
   1d490:	10800044 	addi	r2,r2,1
   1d494:	e0bffc15 	stw	r2,-16(fp)
   1d498:	e0fffc17 	ldw	r3,-16(fp)
   1d49c:	e0bfff17 	ldw	r2,-4(fp)
   1d4a0:	18bfee36 	bltu	r3,r2,1d45c <__alt_mem_Flash_flash_data+0xf401d45c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   1d4a4:	e037883a 	mov	sp,fp
   1d4a8:	df000017 	ldw	fp,0(sp)
   1d4ac:	dec00104 	addi	sp,sp,4
   1d4b0:	f800283a 	ret

0001d4b4 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   1d4b4:	defffd04 	addi	sp,sp,-12
   1d4b8:	df000215 	stw	fp,8(sp)
   1d4bc:	df000204 	addi	fp,sp,8
   1d4c0:	e13ffe15 	stw	r4,-8(fp)
   1d4c4:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   1d4c8:	00000d06 	br	1d500 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   1d4cc:	e0bffe17 	ldw	r2,-8(fp)
   1d4d0:	10800a17 	ldw	r2,40(r2)
   1d4d4:	10800044 	addi	r2,r2,1
   1d4d8:	1007883a 	mov	r3,r2
   1d4dc:	e0bfff17 	ldw	r2,-4(fp)
   1d4e0:	10800003 	ldbu	r2,0(r2)
   1d4e4:	10803fcc 	andi	r2,r2,255
   1d4e8:	1080201c 	xori	r2,r2,128
   1d4ec:	10bfe004 	addi	r2,r2,-128
   1d4f0:	18800025 	stbio	r2,0(r3)
		++ptr;
   1d4f4:	e0bfff17 	ldw	r2,-4(fp)
   1d4f8:	10800044 	addi	r2,r2,1
   1d4fc:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   1d500:	e0bfff17 	ldw	r2,-4(fp)
   1d504:	10800003 	ldbu	r2,0(r2)
   1d508:	10803fcc 	andi	r2,r2,255
   1d50c:	1080201c 	xori	r2,r2,128
   1d510:	10bfe004 	addi	r2,r2,-128
   1d514:	103fed1e 	bne	r2,zero,1d4cc <__alt_mem_Flash_flash_data+0xf401d4cc>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   1d518:	e037883a 	mov	sp,fp
   1d51c:	df000017 	ldw	fp,0(sp)
   1d520:	dec00104 	addi	sp,sp,4
   1d524:	f800283a 	ret

0001d528 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   1d528:	defffb04 	addi	sp,sp,-20
   1d52c:	dfc00415 	stw	ra,16(sp)
   1d530:	df000315 	stw	fp,12(sp)
   1d534:	df000304 	addi	fp,sp,12
   1d538:	e13ffd15 	stw	r4,-12(fp)
   1d53c:	e17ffe15 	stw	r5,-8(fp)
   1d540:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   1d544:	e0bffd17 	ldw	r2,-12(fp)
   1d548:	10c00017 	ldw	r3,0(r2)
   1d54c:	e0bfff17 	ldw	r2,-4(fp)
   1d550:	1809883a 	mov	r4,r3
   1d554:	e17ffe17 	ldw	r5,-8(fp)
   1d558:	100d883a 	mov	r6,r2
   1d55c:	001d43c0 	call	1d43c <alt_up_character_lcd_write>
	return 0;
   1d560:	0005883a 	mov	r2,zero
}
   1d564:	e037883a 	mov	sp,fp
   1d568:	dfc00117 	ldw	ra,4(sp)
   1d56c:	df000017 	ldw	fp,0(sp)
   1d570:	dec00204 	addi	sp,sp,8
   1d574:	f800283a 	ret

0001d578 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   1d578:	defffa04 	addi	sp,sp,-24
   1d57c:	dfc00515 	stw	ra,20(sp)
   1d580:	df000415 	stw	fp,16(sp)
   1d584:	df000404 	addi	fp,sp,16
   1d588:	e13ffd15 	stw	r4,-12(fp)
   1d58c:	e17ffe15 	stw	r5,-8(fp)
   1d590:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   1d594:	e0bffe17 	ldw	r2,-8(fp)
   1d598:	10800a28 	cmpgeui	r2,r2,40
   1d59c:	1000031e 	bne	r2,zero,1d5ac <alt_up_character_lcd_set_cursor_pos+0x34>
   1d5a0:	e0bfff17 	ldw	r2,-4(fp)
   1d5a4:	108000b0 	cmpltui	r2,r2,2
   1d5a8:	1000021e 	bne	r2,zero,1d5b4 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   1d5ac:	00bfffc4 	movi	r2,-1
   1d5b0:	00000906 	br	1d5d8 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1d5b4:	e13ffe17 	ldw	r4,-8(fp)
   1d5b8:	e17fff17 	ldw	r5,-4(fp)
   1d5bc:	001d3180 	call	1d318 <get_DDRAM_addr>
   1d5c0:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   1d5c4:	e0bffc03 	ldbu	r2,-16(fp)
   1d5c8:	e13ffd17 	ldw	r4,-12(fp)
   1d5cc:	100b883a 	mov	r5,r2
   1d5d0:	001d38c0 	call	1d38c <alt_up_character_lcd_send_cmd>
	return 0;
   1d5d4:	0005883a 	mov	r2,zero
}
   1d5d8:	e037883a 	mov	sp,fp
   1d5dc:	dfc00117 	ldw	ra,4(sp)
   1d5e0:	df000017 	ldw	fp,0(sp)
   1d5e4:	dec00204 	addi	sp,sp,8
   1d5e8:	f800283a 	ret

0001d5ec <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1d5ec:	defffb04 	addi	sp,sp,-20
   1d5f0:	dfc00415 	stw	ra,16(sp)
   1d5f4:	df000315 	stw	fp,12(sp)
   1d5f8:	df000304 	addi	fp,sp,12
   1d5fc:	e13ffe15 	stw	r4,-8(fp)
   1d600:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1d604:	e0bfff17 	ldw	r2,-4(fp)
   1d608:	1000011e 	bne	r2,zero,1d610 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   1d60c:	00001406 	br	1d660 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1d610:	e0bfff17 	ldw	r2,-4(fp)
   1d614:	0080020e 	bge	zero,r2,1d620 <alt_up_character_lcd_shift_cursor+0x34>
   1d618:	00800504 	movi	r2,20
   1d61c:	00000106 	br	1d624 <alt_up_character_lcd_shift_cursor+0x38>
   1d620:	00800404 	movi	r2,16
   1d624:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1d628:	e0bfff17 	ldw	r2,-4(fp)
   1d62c:	1000010e 	bge	r2,zero,1d634 <alt_up_character_lcd_shift_cursor+0x48>
   1d630:	0085c83a 	sub	r2,zero,r2
   1d634:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1d638:	00000406 	br	1d64c <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1d63c:	e0bffd43 	ldbu	r2,-11(fp)
   1d640:	e13ffe17 	ldw	r4,-8(fp)
   1d644:	100b883a 	mov	r5,r2
   1d648:	001d38c0 	call	1d38c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1d64c:	e0bffd03 	ldbu	r2,-12(fp)
   1d650:	10ffffc4 	addi	r3,r2,-1
   1d654:	e0fffd05 	stb	r3,-12(fp)
   1d658:	10803fcc 	andi	r2,r2,255
   1d65c:	103ff71e 	bne	r2,zero,1d63c <__alt_mem_Flash_flash_data+0xf401d63c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1d660:	e037883a 	mov	sp,fp
   1d664:	dfc00117 	ldw	ra,4(sp)
   1d668:	df000017 	ldw	fp,0(sp)
   1d66c:	dec00204 	addi	sp,sp,8
   1d670:	f800283a 	ret

0001d674 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1d674:	defffb04 	addi	sp,sp,-20
   1d678:	dfc00415 	stw	ra,16(sp)
   1d67c:	df000315 	stw	fp,12(sp)
   1d680:	df000304 	addi	fp,sp,12
   1d684:	e13ffe15 	stw	r4,-8(fp)
   1d688:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1d68c:	e0bfff17 	ldw	r2,-4(fp)
   1d690:	1000011e 	bne	r2,zero,1d698 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   1d694:	00001406 	br	1d6e8 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1d698:	e0bfff17 	ldw	r2,-4(fp)
   1d69c:	0080020e 	bge	zero,r2,1d6a8 <alt_up_character_lcd_shift_display+0x34>
   1d6a0:	00800704 	movi	r2,28
   1d6a4:	00000106 	br	1d6ac <alt_up_character_lcd_shift_display+0x38>
   1d6a8:	00800604 	movi	r2,24
   1d6ac:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1d6b0:	e0bfff17 	ldw	r2,-4(fp)
   1d6b4:	1000010e 	bge	r2,zero,1d6bc <alt_up_character_lcd_shift_display+0x48>
   1d6b8:	0085c83a 	sub	r2,zero,r2
   1d6bc:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1d6c0:	00000406 	br	1d6d4 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1d6c4:	e0bffd43 	ldbu	r2,-11(fp)
   1d6c8:	e13ffe17 	ldw	r4,-8(fp)
   1d6cc:	100b883a 	mov	r5,r2
   1d6d0:	001d38c0 	call	1d38c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1d6d4:	e0bffd03 	ldbu	r2,-12(fp)
   1d6d8:	10ffffc4 	addi	r3,r2,-1
   1d6dc:	e0fffd05 	stb	r3,-12(fp)
   1d6e0:	10803fcc 	andi	r2,r2,255
   1d6e4:	103ff71e 	bne	r2,zero,1d6c4 <__alt_mem_Flash_flash_data+0xf401d6c4>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1d6e8:	e037883a 	mov	sp,fp
   1d6ec:	dfc00117 	ldw	ra,4(sp)
   1d6f0:	df000017 	ldw	fp,0(sp)
   1d6f4:	dec00204 	addi	sp,sp,8
   1d6f8:	f800283a 	ret

0001d6fc <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   1d6fc:	defffa04 	addi	sp,sp,-24
   1d700:	dfc00515 	stw	ra,20(sp)
   1d704:	df000415 	stw	fp,16(sp)
   1d708:	df000404 	addi	fp,sp,16
   1d70c:	e13ffd15 	stw	r4,-12(fp)
   1d710:	e17ffe15 	stw	r5,-8(fp)
   1d714:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   1d718:	e0bffe17 	ldw	r2,-8(fp)
   1d71c:	10800a28 	cmpgeui	r2,r2,40
   1d720:	1000031e 	bne	r2,zero,1d730 <alt_up_character_lcd_erase_pos+0x34>
   1d724:	e0bfff17 	ldw	r2,-4(fp)
   1d728:	108000b0 	cmpltui	r2,r2,2
   1d72c:	1000021e 	bne	r2,zero,1d738 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   1d730:	00bfffc4 	movi	r2,-1
   1d734:	00000f06 	br	1d774 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1d738:	e13ffe17 	ldw	r4,-8(fp)
   1d73c:	e17fff17 	ldw	r5,-4(fp)
   1d740:	001d3180 	call	1d318 <get_DDRAM_addr>
   1d744:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   1d748:	e0bffc03 	ldbu	r2,-16(fp)
   1d74c:	e13ffd17 	ldw	r4,-12(fp)
   1d750:	100b883a 	mov	r5,r2
   1d754:	001d38c0 	call	1d38c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   1d758:	e0bffd17 	ldw	r2,-12(fp)
   1d75c:	10800a17 	ldw	r2,40(r2)
   1d760:	10800044 	addi	r2,r2,1
   1d764:	1007883a 	mov	r3,r2
   1d768:	00800084 	movi	r2,2
   1d76c:	18800025 	stbio	r2,0(r3)
	return 0;
   1d770:	0005883a 	mov	r2,zero
}
   1d774:	e037883a 	mov	sp,fp
   1d778:	dfc00117 	ldw	ra,4(sp)
   1d77c:	df000017 	ldw	fp,0(sp)
   1d780:	dec00204 	addi	sp,sp,8
   1d784:	f800283a 	ret

0001d788 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   1d788:	defffd04 	addi	sp,sp,-12
   1d78c:	dfc00215 	stw	ra,8(sp)
   1d790:	df000115 	stw	fp,4(sp)
   1d794:	df000104 	addi	fp,sp,4
   1d798:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   1d79c:	e13fff17 	ldw	r4,-4(fp)
   1d7a0:	01400304 	movi	r5,12
   1d7a4:	001d38c0 	call	1d38c <alt_up_character_lcd_send_cmd>
}
   1d7a8:	e037883a 	mov	sp,fp
   1d7ac:	dfc00117 	ldw	ra,4(sp)
   1d7b0:	df000017 	ldw	fp,0(sp)
   1d7b4:	dec00204 	addi	sp,sp,8
   1d7b8:	f800283a 	ret

0001d7bc <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   1d7bc:	defffd04 	addi	sp,sp,-12
   1d7c0:	dfc00215 	stw	ra,8(sp)
   1d7c4:	df000115 	stw	fp,4(sp)
   1d7c8:	df000104 	addi	fp,sp,4
   1d7cc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1d7d0:	e13fff17 	ldw	r4,-4(fp)
   1d7d4:	014003c4 	movi	r5,15
   1d7d8:	001d38c0 	call	1d38c <alt_up_character_lcd_send_cmd>
}
   1d7dc:	e037883a 	mov	sp,fp
   1d7e0:	dfc00117 	ldw	ra,4(sp)
   1d7e4:	df000017 	ldw	fp,0(sp)
   1d7e8:	dec00204 	addi	sp,sp,8
   1d7ec:	f800283a 	ret

0001d7f0 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1d7f0:	defffd04 	addi	sp,sp,-12
   1d7f4:	df000215 	stw	fp,8(sp)
   1d7f8:	df000204 	addi	fp,sp,8
   1d7fc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1d800:	e0bfff17 	ldw	r2,-4(fp)
   1d804:	10800a17 	ldw	r2,40(r2)
   1d808:	10800104 	addi	r2,r2,4
   1d80c:	10800037 	ldwio	r2,0(r2)
   1d810:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   1d814:	e0bffe17 	ldw	r2,-8(fp)
   1d818:	10800054 	ori	r2,r2,1
   1d81c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1d820:	e0bfff17 	ldw	r2,-4(fp)
   1d824:	10800a17 	ldw	r2,40(r2)
   1d828:	10800104 	addi	r2,r2,4
   1d82c:	1007883a 	mov	r3,r2
   1d830:	e0bffe17 	ldw	r2,-8(fp)
   1d834:	18800035 	stwio	r2,0(r3)
}
   1d838:	e037883a 	mov	sp,fp
   1d83c:	df000017 	ldw	fp,0(sp)
   1d840:	dec00104 	addi	sp,sp,4
   1d844:	f800283a 	ret

0001d848 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   1d848:	defffd04 	addi	sp,sp,-12
   1d84c:	df000215 	stw	fp,8(sp)
   1d850:	df000204 	addi	fp,sp,8
   1d854:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1d858:	e0bfff17 	ldw	r2,-4(fp)
   1d85c:	10800a17 	ldw	r2,40(r2)
   1d860:	10800104 	addi	r2,r2,4
   1d864:	10800037 	ldwio	r2,0(r2)
   1d868:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   1d86c:	e0fffe17 	ldw	r3,-8(fp)
   1d870:	00bfff84 	movi	r2,-2
   1d874:	1884703a 	and	r2,r3,r2
   1d878:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1d87c:	e0bfff17 	ldw	r2,-4(fp)
   1d880:	10800a17 	ldw	r2,40(r2)
   1d884:	10800104 	addi	r2,r2,4
   1d888:	1007883a 	mov	r3,r2
   1d88c:	e0bffe17 	ldw	r2,-8(fp)
   1d890:	18800035 	stwio	r2,0(r3)
}
   1d894:	e037883a 	mov	sp,fp
   1d898:	df000017 	ldw	fp,0(sp)
   1d89c:	dec00104 	addi	sp,sp,4
   1d8a0:	f800283a 	ret

0001d8a4 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   1d8a4:	defffd04 	addi	sp,sp,-12
   1d8a8:	df000215 	stw	fp,8(sp)
   1d8ac:	df000204 	addi	fp,sp,8
   1d8b0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1d8b4:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   1d8b8:	e0bfff17 	ldw	r2,-4(fp)
   1d8bc:	10800a17 	ldw	r2,40(r2)
   1d8c0:	10800084 	addi	r2,r2,2
   1d8c4:	1080002b 	ldhuio	r2,0(r2)
   1d8c8:	10bfffcc 	andi	r2,r2,65535
   1d8cc:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1d8d0:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1d8d4:	e037883a 	mov	sp,fp
   1d8d8:	df000017 	ldw	fp,0(sp)
   1d8dc:	dec00104 	addi	sp,sp,4
   1d8e0:	f800283a 	ret

0001d8e4 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1d8e4:	defffd04 	addi	sp,sp,-12
   1d8e8:	df000215 	stw	fp,8(sp)
   1d8ec:	df000204 	addi	fp,sp,8
   1d8f0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1d8f4:	e0bfff17 	ldw	r2,-4(fp)
   1d8f8:	10800a17 	ldw	r2,40(r2)
   1d8fc:	10800104 	addi	r2,r2,4
   1d900:	10800037 	ldwio	r2,0(r2)
   1d904:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   1d908:	e0bffe17 	ldw	r2,-8(fp)
   1d90c:	1004d43a 	srli	r2,r2,16
}
   1d910:	e037883a 	mov	sp,fp
   1d914:	df000017 	ldw	fp,0(sp)
   1d918:	dec00104 	addi	sp,sp,4
   1d91c:	f800283a 	ret

0001d920 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1d920:	defffd04 	addi	sp,sp,-12
   1d924:	df000215 	stw	fp,8(sp)
   1d928:	df000204 	addi	fp,sp,8
   1d92c:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1d930:	e0bfff17 	ldw	r2,-4(fp)
   1d934:	1080800c 	andi	r2,r2,512
   1d938:	1004d27a 	srli	r2,r2,9
   1d93c:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1d940:	e0bffe17 	ldw	r2,-8(fp)
   1d944:	10000226 	beq	r2,zero,1d950 <alt_up_irda_check_parity+0x30>
   1d948:	00bfffc4 	movi	r2,-1
   1d94c:	00000106 	br	1d954 <alt_up_irda_check_parity+0x34>
   1d950:	0005883a 	mov	r2,zero
}
   1d954:	e037883a 	mov	sp,fp
   1d958:	df000017 	ldw	fp,0(sp)
   1d95c:	dec00104 	addi	sp,sp,4
   1d960:	f800283a 	ret

0001d964 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   1d964:	defffd04 	addi	sp,sp,-12
   1d968:	df000215 	stw	fp,8(sp)
   1d96c:	df000204 	addi	fp,sp,8
   1d970:	e13ffe15 	stw	r4,-8(fp)
   1d974:	2805883a 	mov	r2,r5
   1d978:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   1d97c:	e0bffe17 	ldw	r2,-8(fp)
   1d980:	10800a17 	ldw	r2,40(r2)
   1d984:	1007883a 	mov	r3,r2
   1d988:	e0bfff03 	ldbu	r2,-4(fp)
   1d98c:	18800035 	stwio	r2,0(r3)
	return 0;
   1d990:	0005883a 	mov	r2,zero
}
   1d994:	e037883a 	mov	sp,fp
   1d998:	df000017 	ldw	fp,0(sp)
   1d99c:	dec00104 	addi	sp,sp,4
   1d9a0:	f800283a 	ret

0001d9a4 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1d9a4:	defffa04 	addi	sp,sp,-24
   1d9a8:	dfc00515 	stw	ra,20(sp)
   1d9ac:	df000415 	stw	fp,16(sp)
   1d9b0:	df000404 	addi	fp,sp,16
   1d9b4:	e13ffd15 	stw	r4,-12(fp)
   1d9b8:	e17ffe15 	stw	r5,-8(fp)
   1d9bc:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1d9c0:	e0bffd17 	ldw	r2,-12(fp)
   1d9c4:	10800a17 	ldw	r2,40(r2)
   1d9c8:	10800037 	ldwio	r2,0(r2)
   1d9cc:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1d9d0:	e0bffc17 	ldw	r2,-16(fp)
   1d9d4:	1007883a 	mov	r3,r2
   1d9d8:	e0bffe17 	ldw	r2,-8(fp)
   1d9dc:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   1d9e0:	e13ffc17 	ldw	r4,-16(fp)
   1d9e4:	001d9200 	call	1d920 <alt_up_irda_check_parity>
   1d9e8:	1007883a 	mov	r3,r2
   1d9ec:	e0bfff17 	ldw	r2,-4(fp)
   1d9f0:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1d9f4:	e0bffc17 	ldw	r2,-16(fp)
   1d9f8:	10a0000c 	andi	r2,r2,32768
   1d9fc:	1004d3fa 	srli	r2,r2,15
   1da00:	10bfffc4 	addi	r2,r2,-1
}
   1da04:	e037883a 	mov	sp,fp
   1da08:	dfc00117 	ldw	ra,4(sp)
   1da0c:	df000017 	ldw	fp,0(sp)
   1da10:	dec00204 	addi	sp,sp,8
   1da14:	f800283a 	ret

0001da18 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   1da18:	defff804 	addi	sp,sp,-32
   1da1c:	dfc00715 	stw	ra,28(sp)
   1da20:	df000615 	stw	fp,24(sp)
   1da24:	df000604 	addi	fp,sp,24
   1da28:	e13ffd15 	stw	r4,-12(fp)
   1da2c:	e17ffe15 	stw	r5,-8(fp)
   1da30:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1da34:	e0bffd17 	ldw	r2,-12(fp)
   1da38:	10800017 	ldw	r2,0(r2)
   1da3c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1da40:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1da44:	00000e06 	br	1da80 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   1da48:	e0bffe17 	ldw	r2,-8(fp)
   1da4c:	10c00044 	addi	r3,r2,1
   1da50:	e0fffe15 	stw	r3,-8(fp)
   1da54:	e0fffc04 	addi	r3,fp,-16
   1da58:	e13ffb17 	ldw	r4,-20(fp)
   1da5c:	100b883a 	mov	r5,r2
   1da60:	180d883a 	mov	r6,r3
   1da64:	001d9a40 	call	1d9a4 <alt_up_irda_read_data>
   1da68:	1000041e 	bne	r2,zero,1da7c <alt_up_irda_read_fd+0x64>
			count++;
   1da6c:	e0bffa17 	ldw	r2,-24(fp)
   1da70:	10800044 	addi	r2,r2,1
   1da74:	e0bffa15 	stw	r2,-24(fp)
   1da78:	00000106 	br	1da80 <alt_up_irda_read_fd+0x68>
		else
			break;
   1da7c:	00000406 	br	1da90 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1da80:	e0bfff17 	ldw	r2,-4(fp)
   1da84:	10ffffc4 	addi	r3,r2,-1
   1da88:	e0ffff15 	stw	r3,-4(fp)
   1da8c:	103fee1e 	bne	r2,zero,1da48 <__alt_mem_Flash_flash_data+0xf401da48>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1da90:	e0bffa17 	ldw	r2,-24(fp)
}
   1da94:	e037883a 	mov	sp,fp
   1da98:	dfc00117 	ldw	ra,4(sp)
   1da9c:	df000017 	ldw	fp,0(sp)
   1daa0:	dec00204 	addi	sp,sp,8
   1daa4:	f800283a 	ret

0001daa8 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1daa8:	defff904 	addi	sp,sp,-28
   1daac:	dfc00615 	stw	ra,24(sp)
   1dab0:	df000515 	stw	fp,20(sp)
   1dab4:	df000504 	addi	fp,sp,20
   1dab8:	e13ffd15 	stw	r4,-12(fp)
   1dabc:	e17ffe15 	stw	r5,-8(fp)
   1dac0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1dac4:	e0bffd17 	ldw	r2,-12(fp)
   1dac8:	10800017 	ldw	r2,0(r2)
   1dacc:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1dad0:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1dad4:	00000e06 	br	1db10 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   1dad8:	e0bffe17 	ldw	r2,-8(fp)
   1dadc:	10c00044 	addi	r3,r2,1
   1dae0:	e0fffe15 	stw	r3,-8(fp)
   1dae4:	10800003 	ldbu	r2,0(r2)
   1dae8:	10803fcc 	andi	r2,r2,255
   1daec:	e13ffc17 	ldw	r4,-16(fp)
   1daf0:	100b883a 	mov	r5,r2
   1daf4:	001d9640 	call	1d964 <alt_up_irda_write_data>
   1daf8:	1000041e 	bne	r2,zero,1db0c <alt_up_irda_write_fd+0x64>
			count++;
   1dafc:	e0bffb17 	ldw	r2,-20(fp)
   1db00:	10800044 	addi	r2,r2,1
   1db04:	e0bffb15 	stw	r2,-20(fp)
   1db08:	00000106 	br	1db10 <alt_up_irda_write_fd+0x68>
		else
			break;
   1db0c:	00000406 	br	1db20 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1db10:	e0bfff17 	ldw	r2,-4(fp)
   1db14:	10ffffc4 	addi	r3,r2,-1
   1db18:	e0ffff15 	stw	r3,-4(fp)
   1db1c:	103fee1e 	bne	r2,zero,1dad8 <__alt_mem_Flash_flash_data+0xf401dad8>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   1db20:	e0bffb17 	ldw	r2,-20(fp)
}
   1db24:	e037883a 	mov	sp,fp
   1db28:	dfc00117 	ldw	ra,4(sp)
   1db2c:	df000017 	ldw	fp,0(sp)
   1db30:	dec00204 	addi	sp,sp,8
   1db34:	f800283a 	ret

0001db38 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   1db38:	defffc04 	addi	sp,sp,-16
   1db3c:	dfc00315 	stw	ra,12(sp)
   1db40:	df000215 	stw	fp,8(sp)
   1db44:	df000204 	addi	fp,sp,8
   1db48:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   1db4c:	e13fff17 	ldw	r4,-4(fp)
   1db50:	014000b4 	movhi	r5,2
   1db54:	2949a004 	addi	r5,r5,9856
   1db58:	001ebe80 	call	1ebe8 <alt_find_dev>
   1db5c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1db60:	e0bffe17 	ldw	r2,-8(fp)
}
   1db64:	e037883a 	mov	sp,fp
   1db68:	dfc00117 	ldw	ra,4(sp)
   1db6c:	df000017 	ldw	fp,0(sp)
   1db70:	dec00204 	addi	sp,sp,8
   1db74:	f800283a 	ret

0001db78 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
   1db78:	defffc04 	addi	sp,sp,-16
   1db7c:	dfc00315 	stw	ra,12(sp)
   1db80:	df000215 	stw	fp,8(sp)
   1db84:	df000204 	addi	fp,sp,8
   1db88:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
   1db8c:	e13fff17 	ldw	r4,-4(fp)
   1db90:	014000b4 	movhi	r5,2
   1db94:	2949a004 	addi	r5,r5,9856
   1db98:	001ebe80 	call	1ebe8 <alt_find_dev>
   1db9c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1dba0:	e0bffe17 	ldw	r2,-8(fp)
}
   1dba4:	e037883a 	mov	sp,fp
   1dba8:	dfc00117 	ldw	ra,4(sp)
   1dbac:	df000017 	ldw	fp,0(sp)
   1dbb0:	dec00204 	addi	sp,sp,8
   1dbb4:	f800283a 	ret

0001dbb8 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   1dbb8:	defffd04 	addi	sp,sp,-12
   1dbbc:	df000215 	stw	fp,8(sp)
   1dbc0:	df000204 	addi	fp,sp,8
   1dbc4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   1dbc8:	e0bfff17 	ldw	r2,-4(fp)
   1dbcc:	1080400c 	andi	r2,r2,256
   1dbd0:	1004d23a 	srli	r2,r2,8
   1dbd4:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   1dbd8:	e0bffe03 	ldbu	r2,-8(fp)
}
   1dbdc:	e037883a 	mov	sp,fp
   1dbe0:	df000017 	ldw	fp,0(sp)
   1dbe4:	dec00104 	addi	sp,sp,4
   1dbe8:	f800283a 	ret

0001dbec <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1dbec:	defffd04 	addi	sp,sp,-12
   1dbf0:	df000215 	stw	fp,8(sp)
   1dbf4:	df000204 	addi	fp,sp,8
   1dbf8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1dbfc:	e0bfff17 	ldw	r2,-4(fp)
   1dc00:	1080004c 	andi	r2,r2,1
   1dc04:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1dc08:	e0bffe03 	ldbu	r2,-8(fp)
}
   1dc0c:	e037883a 	mov	sp,fp
   1dc10:	df000017 	ldw	fp,0(sp)
   1dc14:	dec00104 	addi	sp,sp,4
   1dc18:	f800283a 	ret

0001dc1c <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1dc1c:	defffd04 	addi	sp,sp,-12
   1dc20:	df000215 	stw	fp,8(sp)
   1dc24:	df000204 	addi	fp,sp,8
   1dc28:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1dc2c:	e0bfff17 	ldw	r2,-4(fp)
   1dc30:	1081000c 	andi	r2,r2,1024
   1dc34:	1004d2ba 	srli	r2,r2,10
   1dc38:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1dc3c:	e0bffe03 	ldbu	r2,-8(fp)
}
   1dc40:	e037883a 	mov	sp,fp
   1dc44:	df000017 	ldw	fp,0(sp)
   1dc48:	dec00104 	addi	sp,sp,4
   1dc4c:	f800283a 	ret

0001dc50 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1dc50:	defffd04 	addi	sp,sp,-12
   1dc54:	df000215 	stw	fp,8(sp)
   1dc58:	df000204 	addi	fp,sp,8
   1dc5c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1dc60:	e0bfff17 	ldw	r2,-4(fp)
   1dc64:	1004d43a 	srli	r2,r2,16
   1dc68:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1dc6c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1dc70:	e037883a 	mov	sp,fp
   1dc74:	df000017 	ldw	fp,0(sp)
   1dc78:	dec00104 	addi	sp,sp,4
   1dc7c:	f800283a 	ret

0001dc80 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1dc80:	defffd04 	addi	sp,sp,-12
   1dc84:	df000215 	stw	fp,8(sp)
   1dc88:	df000204 	addi	fp,sp,8
   1dc8c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1dc90:	e0bfff17 	ldw	r2,-4(fp)
   1dc94:	10a0000c 	andi	r2,r2,32768
   1dc98:	1004d3fa 	srli	r2,r2,15
   1dc9c:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1dca0:	e0bffe03 	ldbu	r2,-8(fp)
}
   1dca4:	e037883a 	mov	sp,fp
   1dca8:	df000017 	ldw	fp,0(sp)
   1dcac:	dec00104 	addi	sp,sp,4
   1dcb0:	f800283a 	ret

0001dcb4 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1dcb4:	defffd04 	addi	sp,sp,-12
   1dcb8:	df000215 	stw	fp,8(sp)
   1dcbc:	df000204 	addi	fp,sp,8
   1dcc0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1dcc4:	e0bfff17 	ldw	r2,-4(fp)
   1dcc8:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1dccc:	e0bffe03 	ldbu	r2,-8(fp)
}
   1dcd0:	e037883a 	mov	sp,fp
   1dcd4:	df000017 	ldw	fp,0(sp)
   1dcd8:	dec00104 	addi	sp,sp,4
   1dcdc:	f800283a 	ret

0001dce0 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1dce0:	defffb04 	addi	sp,sp,-20
   1dce4:	dfc00415 	stw	ra,16(sp)
   1dce8:	df000315 	stw	fp,12(sp)
   1dcec:	df000304 	addi	fp,sp,12
   1dcf0:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1dcf4:	e13fff17 	ldw	r4,-4(fp)
   1dcf8:	01403fc4 	movi	r5,255
   1dcfc:	001df3c0 	call	1df3c <alt_up_ps2_write_data_byte_with_ack>
   1dd00:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1dd04:	e0bffd17 	ldw	r2,-12(fp)
   1dd08:	1000211e 	bne	r2,zero,1dd90 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1dd0c:	e0bffe04 	addi	r2,fp,-8
   1dd10:	e13fff17 	ldw	r4,-4(fp)
   1dd14:	100b883a 	mov	r5,r2
   1dd18:	001dfa00 	call	1dfa0 <alt_up_ps2_read_data_byte_timeout>
   1dd1c:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1dd20:	e0bffd17 	ldw	r2,-12(fp)
   1dd24:	10001a1e 	bne	r2,zero,1dd90 <alt_up_ps2_init+0xb0>
   1dd28:	e0bffe03 	ldbu	r2,-8(fp)
   1dd2c:	10803fcc 	andi	r2,r2,255
   1dd30:	10802a98 	cmpnei	r2,r2,170
   1dd34:	1000161e 	bne	r2,zero,1dd90 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1dd38:	e0bffe04 	addi	r2,fp,-8
   1dd3c:	e13fff17 	ldw	r4,-4(fp)
   1dd40:	100b883a 	mov	r5,r2
   1dd44:	001dfa00 	call	1dfa0 <alt_up_ps2_read_data_byte_timeout>
   1dd48:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1dd4c:	e0bffd17 	ldw	r2,-12(fp)
   1dd50:	10bfe318 	cmpnei	r2,r2,-116
   1dd54:	1000041e 	bne	r2,zero,1dd68 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1dd58:	e0bfff17 	ldw	r2,-4(fp)
   1dd5c:	00c00044 	movi	r3,1
   1dd60:	10c00d15 	stw	r3,52(r2)
   1dd64:	00000a06 	br	1dd90 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   1dd68:	e0bffd17 	ldw	r2,-12(fp)
   1dd6c:	1000081e 	bne	r2,zero,1dd90 <alt_up_ps2_init+0xb0>
   1dd70:	e0bffe03 	ldbu	r2,-8(fp)
   1dd74:	10803fcc 	andi	r2,r2,255
   1dd78:	1000051e 	bne	r2,zero,1dd90 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1dd7c:	e0bfff17 	ldw	r2,-4(fp)
   1dd80:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1dd84:	e13fff17 	ldw	r4,-4(fp)
   1dd88:	01403d04 	movi	r5,244
   1dd8c:	001de580 	call	1de58 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   1dd90:	e037883a 	mov	sp,fp
   1dd94:	dfc00117 	ldw	ra,4(sp)
   1dd98:	df000017 	ldw	fp,0(sp)
   1dd9c:	dec00204 	addi	sp,sp,8
   1dda0:	f800283a 	ret

0001dda4 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1dda4:	defffd04 	addi	sp,sp,-12
   1dda8:	df000215 	stw	fp,8(sp)
   1ddac:	df000204 	addi	fp,sp,8
   1ddb0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1ddb4:	e0bfff17 	ldw	r2,-4(fp)
   1ddb8:	10800a17 	ldw	r2,40(r2)
   1ddbc:	10800104 	addi	r2,r2,4
   1ddc0:	10800037 	ldwio	r2,0(r2)
   1ddc4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1ddc8:	e0bffe17 	ldw	r2,-8(fp)
   1ddcc:	10800054 	ori	r2,r2,1
   1ddd0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1ddd4:	e0bfff17 	ldw	r2,-4(fp)
   1ddd8:	10800a17 	ldw	r2,40(r2)
   1dddc:	10800104 	addi	r2,r2,4
   1dde0:	1007883a 	mov	r3,r2
   1dde4:	e0bffe17 	ldw	r2,-8(fp)
   1dde8:	18800035 	stwio	r2,0(r3)
}
   1ddec:	e037883a 	mov	sp,fp
   1ddf0:	df000017 	ldw	fp,0(sp)
   1ddf4:	dec00104 	addi	sp,sp,4
   1ddf8:	f800283a 	ret

0001ddfc <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1ddfc:	defffd04 	addi	sp,sp,-12
   1de00:	df000215 	stw	fp,8(sp)
   1de04:	df000204 	addi	fp,sp,8
   1de08:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1de0c:	e0bfff17 	ldw	r2,-4(fp)
   1de10:	10800a17 	ldw	r2,40(r2)
   1de14:	10800104 	addi	r2,r2,4
   1de18:	10800037 	ldwio	r2,0(r2)
   1de1c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1de20:	e0fffe17 	ldw	r3,-8(fp)
   1de24:	00bfff84 	movi	r2,-2
   1de28:	1884703a 	and	r2,r3,r2
   1de2c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1de30:	e0bfff17 	ldw	r2,-4(fp)
   1de34:	10800a17 	ldw	r2,40(r2)
   1de38:	10800104 	addi	r2,r2,4
   1de3c:	1007883a 	mov	r3,r2
   1de40:	e0bffe17 	ldw	r2,-8(fp)
   1de44:	18800035 	stwio	r2,0(r3)
}
   1de48:	e037883a 	mov	sp,fp
   1de4c:	df000017 	ldw	fp,0(sp)
   1de50:	dec00104 	addi	sp,sp,4
   1de54:	f800283a 	ret

0001de58 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1de58:	defffb04 	addi	sp,sp,-20
   1de5c:	dfc00415 	stw	ra,16(sp)
   1de60:	df000315 	stw	fp,12(sp)
   1de64:	df000304 	addi	fp,sp,12
   1de68:	e13ffe15 	stw	r4,-8(fp)
   1de6c:	2805883a 	mov	r2,r5
   1de70:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1de74:	e0bffe17 	ldw	r2,-8(fp)
   1de78:	10800a17 	ldw	r2,40(r2)
   1de7c:	1007883a 	mov	r3,r2
   1de80:	e0bfff03 	ldbu	r2,-4(fp)
   1de84:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1de88:	e0bffe17 	ldw	r2,-8(fp)
   1de8c:	10800a17 	ldw	r2,40(r2)
   1de90:	10800104 	addi	r2,r2,4
   1de94:	10800037 	ldwio	r2,0(r2)
   1de98:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1de9c:	e13ffd17 	ldw	r4,-12(fp)
   1dea0:	001dc1c0 	call	1dc1c <read_CE_bit>
   1dea4:	10803fcc 	andi	r2,r2,255
   1dea8:	10000226 	beq	r2,zero,1deb4 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   1deac:	00bffec4 	movi	r2,-5
   1deb0:	00000106 	br	1deb8 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1deb4:	0005883a 	mov	r2,zero
}
   1deb8:	e037883a 	mov	sp,fp
   1debc:	dfc00117 	ldw	ra,4(sp)
   1dec0:	df000017 	ldw	fp,0(sp)
   1dec4:	dec00204 	addi	sp,sp,8
   1dec8:	f800283a 	ret

0001decc <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1decc:	defffc04 	addi	sp,sp,-16
   1ded0:	dfc00315 	stw	ra,12(sp)
   1ded4:	df000215 	stw	fp,8(sp)
   1ded8:	df000204 	addi	fp,sp,8
   1dedc:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1dee0:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1dee4:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   1dee8:	e0bffe44 	addi	r2,fp,-7
   1deec:	e13fff17 	ldw	r4,-4(fp)
   1def0:	100b883a 	mov	r5,r2
   1def4:	001dfa00 	call	1dfa0 <alt_up_ps2_read_data_byte_timeout>
   1def8:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   1defc:	e0bffe03 	ldbu	r2,-8(fp)
   1df00:	1000061e 	bne	r2,zero,1df1c <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1df04:	e0bffe43 	ldbu	r2,-7(fp)
   1df08:	10803fcc 	andi	r2,r2,255
   1df0c:	10803e98 	cmpnei	r2,r2,250
   1df10:	1000041e 	bne	r2,zero,1df24 <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   1df14:	0005883a 	mov	r2,zero
   1df18:	00000306 	br	1df28 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   1df1c:	e0bffe03 	ldbu	r2,-8(fp)
   1df20:	00000106 	br	1df28 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   1df24:	003ff006 	br	1dee8 <__alt_mem_Flash_flash_data+0xf401dee8>
	return -ETIMEDOUT;
}
   1df28:	e037883a 	mov	sp,fp
   1df2c:	dfc00117 	ldw	ra,4(sp)
   1df30:	df000017 	ldw	fp,0(sp)
   1df34:	dec00204 	addi	sp,sp,8
   1df38:	f800283a 	ret

0001df3c <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1df3c:	defffa04 	addi	sp,sp,-24
   1df40:	dfc00515 	stw	ra,20(sp)
   1df44:	df000415 	stw	fp,16(sp)
   1df48:	df000404 	addi	fp,sp,16
   1df4c:	e13ffe15 	stw	r4,-8(fp)
   1df50:	2805883a 	mov	r2,r5
   1df54:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1df58:	e0bfff03 	ldbu	r2,-4(fp)
   1df5c:	e13ffe17 	ldw	r4,-8(fp)
   1df60:	100b883a 	mov	r5,r2
   1df64:	001de580 	call	1de58 <alt_up_ps2_write_data_byte>
   1df68:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1df6c:	e0bffc17 	ldw	r2,-16(fp)
   1df70:	10000226 	beq	r2,zero,1df7c <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1df74:	e0bffc17 	ldw	r2,-16(fp)
   1df78:	00000406 	br	1df8c <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1df7c:	e13ffe17 	ldw	r4,-8(fp)
   1df80:	001decc0 	call	1decc <alt_up_ps2_wait_for_ack>
   1df84:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   1df88:	e0bffd17 	ldw	r2,-12(fp)
}
   1df8c:	e037883a 	mov	sp,fp
   1df90:	dfc00117 	ldw	ra,4(sp)
   1df94:	df000017 	ldw	fp,0(sp)
   1df98:	dec00204 	addi	sp,sp,8
   1df9c:	f800283a 	ret

0001dfa0 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1dfa0:	defffa04 	addi	sp,sp,-24
   1dfa4:	dfc00515 	stw	ra,20(sp)
   1dfa8:	df000415 	stw	fp,16(sp)
   1dfac:	df000404 	addi	fp,sp,16
   1dfb0:	e13ffe15 	stw	r4,-8(fp)
   1dfb4:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1dfb8:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   1dfbc:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1dfc0:	e0bffc17 	ldw	r2,-16(fp)
   1dfc4:	10800044 	addi	r2,r2,1
   1dfc8:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1dfcc:	e0bffe17 	ldw	r2,-8(fp)
   1dfd0:	10800a17 	ldw	r2,40(r2)
   1dfd4:	10800037 	ldwio	r2,0(r2)
   1dfd8:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   1dfdc:	e13ffd17 	ldw	r4,-12(fp)
   1dfe0:	001dc800 	call	1dc80 <read_data_valid>
   1dfe4:	10803fcc 	andi	r2,r2,255
   1dfe8:	10000726 	beq	r2,zero,1e008 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   1dfec:	e13ffd17 	ldw	r4,-12(fp)
   1dff0:	001dcb40 	call	1dcb4 <read_data_byte>
   1dff4:	1007883a 	mov	r3,r2
   1dff8:	e0bfff17 	ldw	r2,-4(fp)
   1dffc:	10c00005 	stb	r3,0(r2)
			return 0;
   1e000:	0005883a 	mov	r2,zero
   1e004:	00000a06 	br	1e030 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1e008:	e0bffe17 	ldw	r2,-8(fp)
   1e00c:	10800c17 	ldw	r2,48(r2)
   1e010:	10000626 	beq	r2,zero,1e02c <alt_up_ps2_read_data_byte_timeout+0x8c>
   1e014:	e0bffe17 	ldw	r2,-8(fp)
   1e018:	10c00c17 	ldw	r3,48(r2)
   1e01c:	e0bffc17 	ldw	r2,-16(fp)
   1e020:	1880022e 	bgeu	r3,r2,1e02c <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   1e024:	00bfe304 	movi	r2,-116
   1e028:	00000106 	br	1e030 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   1e02c:	003fe406 	br	1dfc0 <__alt_mem_Flash_flash_data+0xf401dfc0>
}
   1e030:	e037883a 	mov	sp,fp
   1e034:	dfc00117 	ldw	ra,4(sp)
   1e038:	df000017 	ldw	fp,0(sp)
   1e03c:	dec00204 	addi	sp,sp,8
   1e040:	f800283a 	ret

0001e044 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1e044:	defffb04 	addi	sp,sp,-20
   1e048:	dfc00415 	stw	ra,16(sp)
   1e04c:	df000315 	stw	fp,12(sp)
   1e050:	df000304 	addi	fp,sp,12
   1e054:	e13ffe15 	stw	r4,-8(fp)
   1e058:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1e05c:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1e060:	e0bffe17 	ldw	r2,-8(fp)
   1e064:	10800a17 	ldw	r2,40(r2)
   1e068:	10800037 	ldwio	r2,0(r2)
   1e06c:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1e070:	e13ffd17 	ldw	r4,-12(fp)
   1e074:	001dc800 	call	1dc80 <read_data_valid>
   1e078:	10803fcc 	andi	r2,r2,255
   1e07c:	10000726 	beq	r2,zero,1e09c <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1e080:	e13ffd17 	ldw	r4,-12(fp)
   1e084:	001dcb40 	call	1dcb4 <read_data_byte>
   1e088:	1007883a 	mov	r3,r2
   1e08c:	e0bfff17 	ldw	r2,-4(fp)
   1e090:	10c00005 	stb	r3,0(r2)
		return 0;
   1e094:	0005883a 	mov	r2,zero
   1e098:	00000106 	br	1e0a0 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1e09c:	00bfffc4 	movi	r2,-1
}
   1e0a0:	e037883a 	mov	sp,fp
   1e0a4:	dfc00117 	ldw	ra,4(sp)
   1e0a8:	df000017 	ldw	fp,0(sp)
   1e0ac:	dec00204 	addi	sp,sp,8
   1e0b0:	f800283a 	ret

0001e0b4 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1e0b4:	defffb04 	addi	sp,sp,-20
   1e0b8:	dfc00415 	stw	ra,16(sp)
   1e0bc:	df000315 	stw	fp,12(sp)
   1e0c0:	df000304 	addi	fp,sp,12
   1e0c4:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1e0c8:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   1e0cc:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1e0d0:	e0bfff17 	ldw	r2,-4(fp)
   1e0d4:	10800a17 	ldw	r2,40(r2)
   1e0d8:	10800037 	ldwio	r2,0(r2)
   1e0dc:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1e0e0:	e13ffe17 	ldw	r4,-8(fp)
   1e0e4:	001dc500 	call	1dc50 <read_num_bytes_available>
   1e0e8:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   1e0ec:	e0bffd0b 	ldhu	r2,-12(fp)
   1e0f0:	103ff71e 	bne	r2,zero,1e0d0 <__alt_mem_Flash_flash_data+0xf401e0d0>
}
   1e0f4:	e037883a 	mov	sp,fp
   1e0f8:	dfc00117 	ldw	ra,4(sp)
   1e0fc:	df000017 	ldw	fp,0(sp)
   1e100:	dec00204 	addi	sp,sp,8
   1e104:	f800283a 	ret

0001e108 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1e108:	defff804 	addi	sp,sp,-32
   1e10c:	dfc00715 	stw	ra,28(sp)
   1e110:	df000615 	stw	fp,24(sp)
   1e114:	df000604 	addi	fp,sp,24
   1e118:	e13ffd15 	stw	r4,-12(fp)
   1e11c:	e17ffe15 	stw	r5,-8(fp)
   1e120:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1e124:	e0bffd17 	ldw	r2,-12(fp)
   1e128:	10800017 	ldw	r2,0(r2)
   1e12c:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1e130:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1e134:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1e138:	e0fffc17 	ldw	r3,-16(fp)
   1e13c:	e0bfff17 	ldw	r2,-4(fp)
   1e140:	18bffd16 	blt	r3,r2,1e138 <__alt_mem_Flash_flash_data+0xf401e138>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1e144:	e0bffe17 	ldw	r2,-8(fp)
   1e148:	10c00044 	addi	r3,r2,1
   1e14c:	e0fffe15 	stw	r3,-8(fp)
   1e150:	e13ffa17 	ldw	r4,-24(fp)
   1e154:	100b883a 	mov	r5,r2
   1e158:	001dfa00 	call	1dfa0 <alt_up_ps2_read_data_byte_timeout>
   1e15c:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1e160:	e0bffb17 	ldw	r2,-20(fp)
   1e164:	10000226 	beq	r2,zero,1e170 <alt_up_ps2_read_fd+0x68>
			return count;
   1e168:	e0bffc17 	ldw	r2,-16(fp)
   1e16c:	00000406 	br	1e180 <alt_up_ps2_read_fd+0x78>
		count++;
   1e170:	e0bffc17 	ldw	r2,-16(fp)
   1e174:	10800044 	addi	r2,r2,1
   1e178:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   1e17c:	e0bffc17 	ldw	r2,-16(fp)
}
   1e180:	e037883a 	mov	sp,fp
   1e184:	dfc00117 	ldw	ra,4(sp)
   1e188:	df000017 	ldw	fp,0(sp)
   1e18c:	dec00204 	addi	sp,sp,8
   1e190:	f800283a 	ret

0001e194 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1e194:	defff804 	addi	sp,sp,-32
   1e198:	dfc00715 	stw	ra,28(sp)
   1e19c:	df000615 	stw	fp,24(sp)
   1e1a0:	df000604 	addi	fp,sp,24
   1e1a4:	e13ffd15 	stw	r4,-12(fp)
   1e1a8:	e17ffe15 	stw	r5,-8(fp)
   1e1ac:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1e1b0:	e0bffd17 	ldw	r2,-12(fp)
   1e1b4:	10800017 	ldw	r2,0(r2)
   1e1b8:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1e1bc:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1e1c0:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1e1c4:	00001006 	br	1e208 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1e1c8:	e0bffe17 	ldw	r2,-8(fp)
   1e1cc:	10c00044 	addi	r3,r2,1
   1e1d0:	e0fffe15 	stw	r3,-8(fp)
   1e1d4:	10800003 	ldbu	r2,0(r2)
   1e1d8:	10803fcc 	andi	r2,r2,255
   1e1dc:	e13ffb17 	ldw	r4,-20(fp)
   1e1e0:	100b883a 	mov	r5,r2
   1e1e4:	001de580 	call	1de58 <alt_up_ps2_write_data_byte>
   1e1e8:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1e1ec:	e0bffc17 	ldw	r2,-16(fp)
   1e1f0:	10000226 	beq	r2,zero,1e1fc <alt_up_ps2_write_fd+0x68>
			return count;
   1e1f4:	e0bffa17 	ldw	r2,-24(fp)
   1e1f8:	00000706 	br	1e218 <alt_up_ps2_write_fd+0x84>
		count++;
   1e1fc:	e0bffa17 	ldw	r2,-24(fp)
   1e200:	10800044 	addi	r2,r2,1
   1e204:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1e208:	e0fffa17 	ldw	r3,-24(fp)
   1e20c:	e0bfff17 	ldw	r2,-4(fp)
   1e210:	18bfed16 	blt	r3,r2,1e1c8 <__alt_mem_Flash_flash_data+0xf401e1c8>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1e214:	e0bffa17 	ldw	r2,-24(fp)
}
   1e218:	e037883a 	mov	sp,fp
   1e21c:	dfc00117 	ldw	ra,4(sp)
   1e220:	df000017 	ldw	fp,0(sp)
   1e224:	dec00204 	addi	sp,sp,8
   1e228:	f800283a 	ret

0001e22c <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1e22c:	defffc04 	addi	sp,sp,-16
   1e230:	dfc00315 	stw	ra,12(sp)
   1e234:	df000215 	stw	fp,8(sp)
   1e238:	df000204 	addi	fp,sp,8
   1e23c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1e240:	e13fff17 	ldw	r4,-4(fp)
   1e244:	014000b4 	movhi	r5,2
   1e248:	2949a004 	addi	r5,r5,9856
   1e24c:	001ebe80 	call	1ebe8 <alt_find_dev>
   1e250:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1e254:	e0bffe17 	ldw	r2,-8(fp)
}
   1e258:	e037883a 	mov	sp,fp
   1e25c:	dfc00117 	ldw	ra,4(sp)
   1e260:	df000017 	ldw	fp,0(sp)
   1e264:	dec00204 	addi	sp,sp,8
   1e268:	f800283a 	ret

0001e26c <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1e26c:	defffd04 	addi	sp,sp,-12
   1e270:	df000215 	stw	fp,8(sp)
   1e274:	df000204 	addi	fp,sp,8
   1e278:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1e27c:	e0bfff17 	ldw	r2,-4(fp)
   1e280:	10800a17 	ldw	r2,40(r2)
   1e284:	10800104 	addi	r2,r2,4
   1e288:	10800037 	ldwio	r2,0(r2)
   1e28c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1e290:	e0bffe17 	ldw	r2,-8(fp)
   1e294:	10800054 	ori	r2,r2,1
   1e298:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1e29c:	e0bfff17 	ldw	r2,-4(fp)
   1e2a0:	10800a17 	ldw	r2,40(r2)
   1e2a4:	10800104 	addi	r2,r2,4
   1e2a8:	1007883a 	mov	r3,r2
   1e2ac:	e0bffe17 	ldw	r2,-8(fp)
   1e2b0:	18800035 	stwio	r2,0(r3)
}
   1e2b4:	e037883a 	mov	sp,fp
   1e2b8:	df000017 	ldw	fp,0(sp)
   1e2bc:	dec00104 	addi	sp,sp,4
   1e2c0:	f800283a 	ret

0001e2c4 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1e2c4:	defffd04 	addi	sp,sp,-12
   1e2c8:	df000215 	stw	fp,8(sp)
   1e2cc:	df000204 	addi	fp,sp,8
   1e2d0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1e2d4:	e0bfff17 	ldw	r2,-4(fp)
   1e2d8:	10800a17 	ldw	r2,40(r2)
   1e2dc:	10800104 	addi	r2,r2,4
   1e2e0:	10800037 	ldwio	r2,0(r2)
   1e2e4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1e2e8:	e0fffe17 	ldw	r3,-8(fp)
   1e2ec:	00bfff84 	movi	r2,-2
   1e2f0:	1884703a 	and	r2,r3,r2
   1e2f4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1e2f8:	e0bfff17 	ldw	r2,-4(fp)
   1e2fc:	10800a17 	ldw	r2,40(r2)
   1e300:	10800104 	addi	r2,r2,4
   1e304:	1007883a 	mov	r3,r2
   1e308:	e0bffe17 	ldw	r2,-8(fp)
   1e30c:	18800035 	stwio	r2,0(r3)
}
   1e310:	e037883a 	mov	sp,fp
   1e314:	df000017 	ldw	fp,0(sp)
   1e318:	dec00104 	addi	sp,sp,4
   1e31c:	f800283a 	ret

0001e320 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1e320:	defffd04 	addi	sp,sp,-12
   1e324:	df000215 	stw	fp,8(sp)
   1e328:	df000204 	addi	fp,sp,8
   1e32c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1e330:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1e334:	e0bfff17 	ldw	r2,-4(fp)
   1e338:	10800a17 	ldw	r2,40(r2)
   1e33c:	10800084 	addi	r2,r2,2
   1e340:	1080002b 	ldhuio	r2,0(r2)
   1e344:	10bfffcc 	andi	r2,r2,65535
   1e348:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1e34c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1e350:	e037883a 	mov	sp,fp
   1e354:	df000017 	ldw	fp,0(sp)
   1e358:	dec00104 	addi	sp,sp,4
   1e35c:	f800283a 	ret

0001e360 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1e360:	defffd04 	addi	sp,sp,-12
   1e364:	df000215 	stw	fp,8(sp)
   1e368:	df000204 	addi	fp,sp,8
   1e36c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1e370:	e0bfff17 	ldw	r2,-4(fp)
   1e374:	10800a17 	ldw	r2,40(r2)
   1e378:	10800104 	addi	r2,r2,4
   1e37c:	10800037 	ldwio	r2,0(r2)
   1e380:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1e384:	e0bffe17 	ldw	r2,-8(fp)
   1e388:	1004d43a 	srli	r2,r2,16
}
   1e38c:	e037883a 	mov	sp,fp
   1e390:	df000017 	ldw	fp,0(sp)
   1e394:	dec00104 	addi	sp,sp,4
   1e398:	f800283a 	ret

0001e39c <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1e39c:	defffd04 	addi	sp,sp,-12
   1e3a0:	df000215 	stw	fp,8(sp)
   1e3a4:	df000204 	addi	fp,sp,8
   1e3a8:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1e3ac:	e0bfff17 	ldw	r2,-4(fp)
   1e3b0:	1080800c 	andi	r2,r2,512
   1e3b4:	1004d27a 	srli	r2,r2,9
   1e3b8:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1e3bc:	e0bffe17 	ldw	r2,-8(fp)
   1e3c0:	10000226 	beq	r2,zero,1e3cc <alt_up_rs232_check_parity+0x30>
   1e3c4:	00bfffc4 	movi	r2,-1
   1e3c8:	00000106 	br	1e3d0 <alt_up_rs232_check_parity+0x34>
   1e3cc:	0005883a 	mov	r2,zero
}
   1e3d0:	e037883a 	mov	sp,fp
   1e3d4:	df000017 	ldw	fp,0(sp)
   1e3d8:	dec00104 	addi	sp,sp,4
   1e3dc:	f800283a 	ret

0001e3e0 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1e3e0:	defffd04 	addi	sp,sp,-12
   1e3e4:	df000215 	stw	fp,8(sp)
   1e3e8:	df000204 	addi	fp,sp,8
   1e3ec:	e13ffe15 	stw	r4,-8(fp)
   1e3f0:	2805883a 	mov	r2,r5
   1e3f4:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1e3f8:	e0bffe17 	ldw	r2,-8(fp)
   1e3fc:	10800a17 	ldw	r2,40(r2)
   1e400:	1007883a 	mov	r3,r2
   1e404:	e0bfff03 	ldbu	r2,-4(fp)
   1e408:	18800035 	stwio	r2,0(r3)
	return 0;
   1e40c:	0005883a 	mov	r2,zero
}
   1e410:	e037883a 	mov	sp,fp
   1e414:	df000017 	ldw	fp,0(sp)
   1e418:	dec00104 	addi	sp,sp,4
   1e41c:	f800283a 	ret

0001e420 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1e420:	defffa04 	addi	sp,sp,-24
   1e424:	dfc00515 	stw	ra,20(sp)
   1e428:	df000415 	stw	fp,16(sp)
   1e42c:	df000404 	addi	fp,sp,16
   1e430:	e13ffd15 	stw	r4,-12(fp)
   1e434:	e17ffe15 	stw	r5,-8(fp)
   1e438:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1e43c:	e0bffd17 	ldw	r2,-12(fp)
   1e440:	10800a17 	ldw	r2,40(r2)
   1e444:	10800037 	ldwio	r2,0(r2)
   1e448:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1e44c:	e0bffc17 	ldw	r2,-16(fp)
   1e450:	1007883a 	mov	r3,r2
   1e454:	e0bffe17 	ldw	r2,-8(fp)
   1e458:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1e45c:	e13ffc17 	ldw	r4,-16(fp)
   1e460:	001e39c0 	call	1e39c <alt_up_rs232_check_parity>
   1e464:	1007883a 	mov	r3,r2
   1e468:	e0bfff17 	ldw	r2,-4(fp)
   1e46c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1e470:	e0bffc17 	ldw	r2,-16(fp)
   1e474:	10a0000c 	andi	r2,r2,32768
   1e478:	1004d3fa 	srli	r2,r2,15
   1e47c:	10bfffc4 	addi	r2,r2,-1
}
   1e480:	e037883a 	mov	sp,fp
   1e484:	dfc00117 	ldw	ra,4(sp)
   1e488:	df000017 	ldw	fp,0(sp)
   1e48c:	dec00204 	addi	sp,sp,8
   1e490:	f800283a 	ret

0001e494 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1e494:	defff804 	addi	sp,sp,-32
   1e498:	dfc00715 	stw	ra,28(sp)
   1e49c:	df000615 	stw	fp,24(sp)
   1e4a0:	df000604 	addi	fp,sp,24
   1e4a4:	e13ffd15 	stw	r4,-12(fp)
   1e4a8:	e17ffe15 	stw	r5,-8(fp)
   1e4ac:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1e4b0:	e0bffd17 	ldw	r2,-12(fp)
   1e4b4:	10800017 	ldw	r2,0(r2)
   1e4b8:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1e4bc:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1e4c0:	00000e06 	br	1e4fc <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1e4c4:	e0bffe17 	ldw	r2,-8(fp)
   1e4c8:	10c00044 	addi	r3,r2,1
   1e4cc:	e0fffe15 	stw	r3,-8(fp)
   1e4d0:	e0fffc04 	addi	r3,fp,-16
   1e4d4:	e13ffb17 	ldw	r4,-20(fp)
   1e4d8:	100b883a 	mov	r5,r2
   1e4dc:	180d883a 	mov	r6,r3
   1e4e0:	001e4200 	call	1e420 <alt_up_rs232_read_data>
   1e4e4:	1000041e 	bne	r2,zero,1e4f8 <alt_up_rs232_read_fd+0x64>
			count++;
   1e4e8:	e0bffa17 	ldw	r2,-24(fp)
   1e4ec:	10800044 	addi	r2,r2,1
   1e4f0:	e0bffa15 	stw	r2,-24(fp)
   1e4f4:	00000106 	br	1e4fc <alt_up_rs232_read_fd+0x68>
		else
			break;
   1e4f8:	00000406 	br	1e50c <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1e4fc:	e0bfff17 	ldw	r2,-4(fp)
   1e500:	10ffffc4 	addi	r3,r2,-1
   1e504:	e0ffff15 	stw	r3,-4(fp)
   1e508:	103fee1e 	bne	r2,zero,1e4c4 <__alt_mem_Flash_flash_data+0xf401e4c4>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1e50c:	e0bffa17 	ldw	r2,-24(fp)
}
   1e510:	e037883a 	mov	sp,fp
   1e514:	dfc00117 	ldw	ra,4(sp)
   1e518:	df000017 	ldw	fp,0(sp)
   1e51c:	dec00204 	addi	sp,sp,8
   1e520:	f800283a 	ret

0001e524 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1e524:	defff904 	addi	sp,sp,-28
   1e528:	dfc00615 	stw	ra,24(sp)
   1e52c:	df000515 	stw	fp,20(sp)
   1e530:	df000504 	addi	fp,sp,20
   1e534:	e13ffd15 	stw	r4,-12(fp)
   1e538:	e17ffe15 	stw	r5,-8(fp)
   1e53c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1e540:	e0bffd17 	ldw	r2,-12(fp)
   1e544:	10800017 	ldw	r2,0(r2)
   1e548:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1e54c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1e550:	00000f06 	br	1e590 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1e554:	e0bffe17 	ldw	r2,-8(fp)
   1e558:	10800003 	ldbu	r2,0(r2)
   1e55c:	10803fcc 	andi	r2,r2,255
   1e560:	e13ffc17 	ldw	r4,-16(fp)
   1e564:	100b883a 	mov	r5,r2
   1e568:	001e3e00 	call	1e3e0 <alt_up_rs232_write_data>
   1e56c:	1000071e 	bne	r2,zero,1e58c <alt_up_rs232_write_fd+0x68>
		{
			count++;
   1e570:	e0bffb17 	ldw	r2,-20(fp)
   1e574:	10800044 	addi	r2,r2,1
   1e578:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1e57c:	e0bffe17 	ldw	r2,-8(fp)
   1e580:	10800044 	addi	r2,r2,1
   1e584:	e0bffe15 	stw	r2,-8(fp)
   1e588:	00000106 	br	1e590 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   1e58c:	00000406 	br	1e5a0 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1e590:	e0bfff17 	ldw	r2,-4(fp)
   1e594:	10ffffc4 	addi	r3,r2,-1
   1e598:	e0ffff15 	stw	r3,-4(fp)
   1e59c:	103fed1e 	bne	r2,zero,1e554 <__alt_mem_Flash_flash_data+0xf401e554>
			ptr++;
		}
		else
			break;
	}
	return count;
   1e5a0:	e0bffb17 	ldw	r2,-20(fp)
}
   1e5a4:	e037883a 	mov	sp,fp
   1e5a8:	dfc00117 	ldw	ra,4(sp)
   1e5ac:	df000017 	ldw	fp,0(sp)
   1e5b0:	dec00204 	addi	sp,sp,8
   1e5b4:	f800283a 	ret

0001e5b8 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1e5b8:	defffc04 	addi	sp,sp,-16
   1e5bc:	dfc00315 	stw	ra,12(sp)
   1e5c0:	df000215 	stw	fp,8(sp)
   1e5c4:	df000204 	addi	fp,sp,8
   1e5c8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1e5cc:	e13fff17 	ldw	r4,-4(fp)
   1e5d0:	014000b4 	movhi	r5,2
   1e5d4:	2949a004 	addi	r5,r5,9856
   1e5d8:	001ebe80 	call	1ebe8 <alt_find_dev>
   1e5dc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1e5e0:	e0bffe17 	ldw	r2,-8(fp)
}
   1e5e4:	e037883a 	mov	sp,fp
   1e5e8:	dfc00117 	ldw	ra,4(sp)
   1e5ec:	df000017 	ldw	fp,0(sp)
   1e5f0:	dec00204 	addi	sp,sp,8
   1e5f4:	f800283a 	ret

0001e5f8 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   1e5f8:	defffc04 	addi	sp,sp,-16
   1e5fc:	dfc00315 	stw	ra,12(sp)
   1e600:	df000215 	stw	fp,8(sp)
   1e604:	df000204 	addi	fp,sp,8
   1e608:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   1e60c:	e0bfff17 	ldw	r2,-4(fp)
   1e610:	10800217 	ldw	r2,8(r2)
   1e614:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   1e618:	00000b06 	br	1e648 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   1e61c:	e13ffe17 	ldw	r4,-8(fp)
   1e620:	014000b4 	movhi	r5,2
   1e624:	2941ea04 	addi	r5,r5,1960
   1e628:	000c8f40 	call	c8f4 <strcmp>
   1e62c:	1000031e 	bne	r2,zero,1e63c <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   1e630:	e0bffe17 	ldw	r2,-8(fp)
   1e634:	10000005 	stb	zero,0(r2)
			break;
   1e638:	00000906 	br	1e660 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   1e63c:	e0bffe17 	ldw	r2,-8(fp)
   1e640:	10800044 	addi	r2,r2,1
   1e644:	e0bffe15 	stw	r2,-8(fp)
   1e648:	e0bffe17 	ldw	r2,-8(fp)
   1e64c:	10800003 	ldbu	r2,0(r2)
   1e650:	10803fcc 	andi	r2,r2,255
   1e654:	1080201c 	xori	r2,r2,128
   1e658:	10bfe004 	addi	r2,r2,-128
   1e65c:	103fef1e 	bne	r2,zero,1e61c <__alt_mem_Flash_flash_data+0xf401e61c>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   1e660:	0001883a 	nop
}
   1e664:	e037883a 	mov	sp,fp
   1e668:	dfc00117 	ldw	ra,4(sp)
   1e66c:	df000017 	ldw	fp,0(sp)
   1e670:	dec00204 	addi	sp,sp,8
   1e674:	f800283a 	ret

0001e678 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   1e678:	defffc04 	addi	sp,sp,-16
   1e67c:	dfc00315 	stw	ra,12(sp)
   1e680:	df000215 	stw	fp,8(sp)
   1e684:	df000204 	addi	fp,sp,8
   1e688:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   1e68c:	e13fff17 	ldw	r4,-4(fp)
   1e690:	014000b4 	movhi	r5,2
   1e694:	2949a004 	addi	r5,r5,9856
   1e698:	001ebe80 	call	1ebe8 <alt_find_dev>
   1e69c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1e6a0:	e0bffe17 	ldw	r2,-8(fp)
}
   1e6a4:	e037883a 	mov	sp,fp
   1e6a8:	dfc00117 	ldw	ra,4(sp)
   1e6ac:	df000017 	ldw	fp,0(sp)
   1e6b0:	dec00204 	addi	sp,sp,8
   1e6b4:	f800283a 	ret

0001e6b8 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   1e6b8:	defffa04 	addi	sp,sp,-24
   1e6bc:	df000515 	stw	fp,20(sp)
   1e6c0:	df000504 	addi	fp,sp,20
   1e6c4:	e13ffc15 	stw	r4,-16(fp)
   1e6c8:	2805883a 	mov	r2,r5
   1e6cc:	e1bffe15 	stw	r6,-8(fp)
   1e6d0:	e1ffff15 	stw	r7,-4(fp)
   1e6d4:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1e6d8:	e0bffc17 	ldw	r2,-16(fp)
   1e6dc:	10800c17 	ldw	r2,48(r2)
   1e6e0:	e0fffe17 	ldw	r3,-8(fp)
   1e6e4:	1880042e 	bgeu	r3,r2,1e6f8 <alt_up_char_buffer_draw+0x40>
   1e6e8:	e0bffc17 	ldw	r2,-16(fp)
   1e6ec:	10800d17 	ldw	r2,52(r2)
   1e6f0:	e0ffff17 	ldw	r3,-4(fp)
   1e6f4:	18800236 	bltu	r3,r2,1e700 <alt_up_char_buffer_draw+0x48>
		return -1;
   1e6f8:	00bfffc4 	movi	r2,-1
   1e6fc:	00001d06 	br	1e774 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   1e700:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   1e704:	e0bffc17 	ldw	r2,-16(fp)
   1e708:	10c00f17 	ldw	r3,60(r2)
   1e70c:	e0bffe17 	ldw	r2,-8(fp)
   1e710:	1884703a 	and	r2,r3,r2
   1e714:	e0fffc17 	ldw	r3,-16(fp)
   1e718:	18c00e17 	ldw	r3,56(r3)
   1e71c:	10c4983a 	sll	r2,r2,r3
   1e720:	e0fffb17 	ldw	r3,-20(fp)
   1e724:	1884b03a 	or	r2,r3,r2
   1e728:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   1e72c:	e0bffc17 	ldw	r2,-16(fp)
   1e730:	10c01117 	ldw	r3,68(r2)
   1e734:	e0bfff17 	ldw	r2,-4(fp)
   1e738:	1884703a 	and	r2,r3,r2
   1e73c:	e0fffc17 	ldw	r3,-16(fp)
   1e740:	18c01017 	ldw	r3,64(r3)
   1e744:	10c4983a 	sll	r2,r2,r3
   1e748:	e0fffb17 	ldw	r3,-20(fp)
   1e74c:	1884b03a 	or	r2,r3,r2
   1e750:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   1e754:	e0bffc17 	ldw	r2,-16(fp)
   1e758:	10c00b17 	ldw	r3,44(r2)
   1e75c:	e0bffb17 	ldw	r2,-20(fp)
   1e760:	1885883a 	add	r2,r3,r2
   1e764:	1007883a 	mov	r3,r2
   1e768:	e0bffd03 	ldbu	r2,-12(fp)
   1e76c:	18800025 	stbio	r2,0(r3)

	return 0;
   1e770:	0005883a 	mov	r2,zero
}
   1e774:	e037883a 	mov	sp,fp
   1e778:	df000017 	ldw	fp,0(sp)
   1e77c:	dec00104 	addi	sp,sp,4
   1e780:	f800283a 	ret

0001e784 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   1e784:	defffa04 	addi	sp,sp,-24
   1e788:	df000515 	stw	fp,20(sp)
   1e78c:	df000504 	addi	fp,sp,20
   1e790:	e13ffc15 	stw	r4,-16(fp)
   1e794:	e17ffd15 	stw	r5,-12(fp)
   1e798:	e1bffe15 	stw	r6,-8(fp)
   1e79c:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1e7a0:	e0bffc17 	ldw	r2,-16(fp)
   1e7a4:	10800c17 	ldw	r2,48(r2)
   1e7a8:	e0fffe17 	ldw	r3,-8(fp)
   1e7ac:	1880042e 	bgeu	r3,r2,1e7c0 <alt_up_char_buffer_string+0x3c>
   1e7b0:	e0bffc17 	ldw	r2,-16(fp)
   1e7b4:	10800d17 	ldw	r2,52(r2)
   1e7b8:	e0ffff17 	ldw	r3,-4(fp)
   1e7bc:	18800236 	bltu	r3,r2,1e7c8 <alt_up_char_buffer_string+0x44>
		return -1;
   1e7c0:	00bfffc4 	movi	r2,-1
   1e7c4:	00002b06 	br	1e874 <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   1e7c8:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   1e7cc:	e0bffc17 	ldw	r2,-16(fp)
   1e7d0:	10801017 	ldw	r2,64(r2)
   1e7d4:	1007883a 	mov	r3,r2
   1e7d8:	e0bfff17 	ldw	r2,-4(fp)
   1e7dc:	10c6983a 	sll	r3,r2,r3
   1e7e0:	e0bffe17 	ldw	r2,-8(fp)
   1e7e4:	1885883a 	add	r2,r3,r2
   1e7e8:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   1e7ec:	00001a06 	br	1e858 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   1e7f0:	e0bffc17 	ldw	r2,-16(fp)
   1e7f4:	10c00b17 	ldw	r3,44(r2)
   1e7f8:	e0bffb17 	ldw	r2,-20(fp)
   1e7fc:	1885883a 	add	r2,r3,r2
   1e800:	1007883a 	mov	r3,r2
   1e804:	e0bffd17 	ldw	r2,-12(fp)
   1e808:	10800003 	ldbu	r2,0(r2)
   1e80c:	10803fcc 	andi	r2,r2,255
   1e810:	1080201c 	xori	r2,r2,128
   1e814:	10bfe004 	addi	r2,r2,-128
   1e818:	18800025 	stbio	r2,0(r3)
		++ptr;
   1e81c:	e0bffd17 	ldw	r2,-12(fp)
   1e820:	10800044 	addi	r2,r2,1
   1e824:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   1e828:	e0bffe17 	ldw	r2,-8(fp)
   1e82c:	10800044 	addi	r2,r2,1
   1e830:	e0bffe15 	stw	r2,-8(fp)
   1e834:	e0bffc17 	ldw	r2,-16(fp)
   1e838:	10800c17 	ldw	r2,48(r2)
   1e83c:	e0fffe17 	ldw	r3,-8(fp)
   1e840:	18800236 	bltu	r3,r2,1e84c <alt_up_char_buffer_string+0xc8>
			return -1;
   1e844:	00bfffc4 	movi	r2,-1
   1e848:	00000a06 	br	1e874 <alt_up_char_buffer_string+0xf0>
		++offset;
   1e84c:	e0bffb17 	ldw	r2,-20(fp)
   1e850:	10800044 	addi	r2,r2,1
   1e854:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   1e858:	e0bffd17 	ldw	r2,-12(fp)
   1e85c:	10800003 	ldbu	r2,0(r2)
   1e860:	10803fcc 	andi	r2,r2,255
   1e864:	1080201c 	xori	r2,r2,128
   1e868:	10bfe004 	addi	r2,r2,-128
   1e86c:	103fe01e 	bne	r2,zero,1e7f0 <__alt_mem_Flash_flash_data+0xf401e7f0>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   1e870:	0005883a 	mov	r2,zero
}
   1e874:	e037883a 	mov	sp,fp
   1e878:	df000017 	ldw	fp,0(sp)
   1e87c:	dec00104 	addi	sp,sp,4
   1e880:	f800283a 	ret

0001e884 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   1e884:	defffe04 	addi	sp,sp,-8
   1e888:	df000115 	stw	fp,4(sp)
   1e88c:	df000104 	addi	fp,sp,4
   1e890:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   1e894:	e0bfff17 	ldw	r2,-4(fp)
   1e898:	10800a17 	ldw	r2,40(r2)
   1e89c:	10800084 	addi	r2,r2,2
   1e8a0:	1007883a 	mov	r3,r2
   1e8a4:	00800044 	movi	r2,1
   1e8a8:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   1e8ac:	0001883a 	nop
   1e8b0:	e0bfff17 	ldw	r2,-4(fp)
   1e8b4:	10800a17 	ldw	r2,40(r2)
   1e8b8:	10800084 	addi	r2,r2,2
   1e8bc:	10800023 	ldbuio	r2,0(r2)
   1e8c0:	10803fcc 	andi	r2,r2,255
   1e8c4:	1080004c 	andi	r2,r2,1
   1e8c8:	103ff91e 	bne	r2,zero,1e8b0 <__alt_mem_Flash_flash_data+0xf401e8b0>
	return 0;
   1e8cc:	0005883a 	mov	r2,zero
}
   1e8d0:	e037883a 	mov	sp,fp
   1e8d4:	df000017 	ldw	fp,0(sp)
   1e8d8:	dec00104 	addi	sp,sp,4
   1e8dc:	f800283a 	ret

0001e8e0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1e8e0:	defff504 	addi	sp,sp,-44
   1e8e4:	df000a15 	stw	fp,40(sp)
   1e8e8:	df000a04 	addi	fp,sp,40
   1e8ec:	e13ffc15 	stw	r4,-16(fp)
   1e8f0:	e17ffd15 	stw	r5,-12(fp)
   1e8f4:	e1bffe15 	stw	r6,-8(fp)
   1e8f8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1e8fc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1e900:	008000b4 	movhi	r2,2
   1e904:	1091db04 	addi	r2,r2,18284
   1e908:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1e90c:	10003f26 	beq	r2,zero,1ea0c <alt_alarm_start+0x12c>
  {
    if (alarm)
   1e910:	e0bffc17 	ldw	r2,-16(fp)
   1e914:	10003b26 	beq	r2,zero,1ea04 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1e918:	e0bffc17 	ldw	r2,-16(fp)
   1e91c:	e0fffe17 	ldw	r3,-8(fp)
   1e920:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1e924:	e0bffc17 	ldw	r2,-16(fp)
   1e928:	e0ffff17 	ldw	r3,-4(fp)
   1e92c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e930:	0005303a 	rdctl	r2,status
   1e934:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e938:	e0fff817 	ldw	r3,-32(fp)
   1e93c:	00bfff84 	movi	r2,-2
   1e940:	1884703a 	and	r2,r3,r2
   1e944:	1001703a 	wrctl	status,r2
  
  return context;
   1e948:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1e94c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1e950:	008000b4 	movhi	r2,2
   1e954:	1091dc04 	addi	r2,r2,18288
   1e958:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1e95c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1e960:	e0fffd17 	ldw	r3,-12(fp)
   1e964:	e0bff617 	ldw	r2,-40(fp)
   1e968:	1885883a 	add	r2,r3,r2
   1e96c:	10c00044 	addi	r3,r2,1
   1e970:	e0bffc17 	ldw	r2,-16(fp)
   1e974:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1e978:	e0bffc17 	ldw	r2,-16(fp)
   1e97c:	10c00217 	ldw	r3,8(r2)
   1e980:	e0bff617 	ldw	r2,-40(fp)
   1e984:	1880042e 	bgeu	r3,r2,1e998 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1e988:	e0bffc17 	ldw	r2,-16(fp)
   1e98c:	00c00044 	movi	r3,1
   1e990:	10c00405 	stb	r3,16(r2)
   1e994:	00000206 	br	1e9a0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1e998:	e0bffc17 	ldw	r2,-16(fp)
   1e99c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1e9a0:	e0fffc17 	ldw	r3,-16(fp)
   1e9a4:	008000b4 	movhi	r2,2
   1e9a8:	1089c504 	addi	r2,r2,10004
   1e9ac:	e0bff915 	stw	r2,-28(fp)
   1e9b0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1e9b4:	e0bffa17 	ldw	r2,-24(fp)
   1e9b8:	e0fff917 	ldw	r3,-28(fp)
   1e9bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1e9c0:	e0bff917 	ldw	r2,-28(fp)
   1e9c4:	10c00017 	ldw	r3,0(r2)
   1e9c8:	e0bffa17 	ldw	r2,-24(fp)
   1e9cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1e9d0:	e0bff917 	ldw	r2,-28(fp)
   1e9d4:	10800017 	ldw	r2,0(r2)
   1e9d8:	e0fffa17 	ldw	r3,-24(fp)
   1e9dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1e9e0:	e0bff917 	ldw	r2,-28(fp)
   1e9e4:	e0fffa17 	ldw	r3,-24(fp)
   1e9e8:	10c00015 	stw	r3,0(r2)
   1e9ec:	e0bff717 	ldw	r2,-36(fp)
   1e9f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e9f4:	e0bffb17 	ldw	r2,-20(fp)
   1e9f8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1e9fc:	0005883a 	mov	r2,zero
   1ea00:	00000306 	br	1ea10 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1ea04:	00bffa84 	movi	r2,-22
   1ea08:	00000106 	br	1ea10 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1ea0c:	00bfde84 	movi	r2,-134
  }
}
   1ea10:	e037883a 	mov	sp,fp
   1ea14:	df000017 	ldw	fp,0(sp)
   1ea18:	dec00104 	addi	sp,sp,4
   1ea1c:	f800283a 	ret

0001ea20 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1ea20:	deffff04 	addi	sp,sp,-4
   1ea24:	df000015 	stw	fp,0(sp)
   1ea28:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1ea2c:	e037883a 	mov	sp,fp
   1ea30:	df000017 	ldw	fp,0(sp)
   1ea34:	dec00104 	addi	sp,sp,4
   1ea38:	f800283a 	ret

0001ea3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1ea3c:	defffe04 	addi	sp,sp,-8
   1ea40:	dfc00115 	stw	ra,4(sp)
   1ea44:	df000015 	stw	fp,0(sp)
   1ea48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ea4c:	008000b4 	movhi	r2,2
   1ea50:	1089a304 	addi	r2,r2,9868
   1ea54:	10800017 	ldw	r2,0(r2)
   1ea58:	10000526 	beq	r2,zero,1ea70 <alt_get_errno+0x34>
   1ea5c:	008000b4 	movhi	r2,2
   1ea60:	1089a304 	addi	r2,r2,9868
   1ea64:	10800017 	ldw	r2,0(r2)
   1ea68:	103ee83a 	callr	r2
   1ea6c:	00000206 	br	1ea78 <alt_get_errno+0x3c>
   1ea70:	008000b4 	movhi	r2,2
   1ea74:	1091bd04 	addi	r2,r2,18164
}
   1ea78:	e037883a 	mov	sp,fp
   1ea7c:	dfc00117 	ldw	ra,4(sp)
   1ea80:	df000017 	ldw	fp,0(sp)
   1ea84:	dec00204 	addi	sp,sp,8
   1ea88:	f800283a 	ret

0001ea8c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1ea8c:	defffa04 	addi	sp,sp,-24
   1ea90:	dfc00515 	stw	ra,20(sp)
   1ea94:	df000415 	stw	fp,16(sp)
   1ea98:	df000404 	addi	fp,sp,16
   1ea9c:	e13ffe15 	stw	r4,-8(fp)
   1eaa0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1eaa4:	e0bffe17 	ldw	r2,-8(fp)
   1eaa8:	10000326 	beq	r2,zero,1eab8 <alt_dev_llist_insert+0x2c>
   1eaac:	e0bffe17 	ldw	r2,-8(fp)
   1eab0:	10800217 	ldw	r2,8(r2)
   1eab4:	1000061e 	bne	r2,zero,1ead0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1eab8:	001ea3c0 	call	1ea3c <alt_get_errno>
   1eabc:	1007883a 	mov	r3,r2
   1eac0:	00800584 	movi	r2,22
   1eac4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1eac8:	00bffa84 	movi	r2,-22
   1eacc:	00001306 	br	1eb1c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1ead0:	e0bffe17 	ldw	r2,-8(fp)
   1ead4:	e0ffff17 	ldw	r3,-4(fp)
   1ead8:	e0fffc15 	stw	r3,-16(fp)
   1eadc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1eae0:	e0bffd17 	ldw	r2,-12(fp)
   1eae4:	e0fffc17 	ldw	r3,-16(fp)
   1eae8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1eaec:	e0bffc17 	ldw	r2,-16(fp)
   1eaf0:	10c00017 	ldw	r3,0(r2)
   1eaf4:	e0bffd17 	ldw	r2,-12(fp)
   1eaf8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1eafc:	e0bffc17 	ldw	r2,-16(fp)
   1eb00:	10800017 	ldw	r2,0(r2)
   1eb04:	e0fffd17 	ldw	r3,-12(fp)
   1eb08:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1eb0c:	e0bffc17 	ldw	r2,-16(fp)
   1eb10:	e0fffd17 	ldw	r3,-12(fp)
   1eb14:	10c00015 	stw	r3,0(r2)

  return 0;  
   1eb18:	0005883a 	mov	r2,zero
}
   1eb1c:	e037883a 	mov	sp,fp
   1eb20:	dfc00117 	ldw	ra,4(sp)
   1eb24:	df000017 	ldw	fp,0(sp)
   1eb28:	dec00204 	addi	sp,sp,8
   1eb2c:	f800283a 	ret

0001eb30 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1eb30:	defffd04 	addi	sp,sp,-12
   1eb34:	dfc00215 	stw	ra,8(sp)
   1eb38:	df000115 	stw	fp,4(sp)
   1eb3c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1eb40:	008000b4 	movhi	r2,2
   1eb44:	10bf7504 	addi	r2,r2,-556
   1eb48:	e0bfff15 	stw	r2,-4(fp)
   1eb4c:	00000606 	br	1eb68 <_do_ctors+0x38>
        (*ctor) (); 
   1eb50:	e0bfff17 	ldw	r2,-4(fp)
   1eb54:	10800017 	ldw	r2,0(r2)
   1eb58:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1eb5c:	e0bfff17 	ldw	r2,-4(fp)
   1eb60:	10bfff04 	addi	r2,r2,-4
   1eb64:	e0bfff15 	stw	r2,-4(fp)
   1eb68:	e0ffff17 	ldw	r3,-4(fp)
   1eb6c:	008000b4 	movhi	r2,2
   1eb70:	10bf7604 	addi	r2,r2,-552
   1eb74:	18bff62e 	bgeu	r3,r2,1eb50 <__alt_mem_Flash_flash_data+0xf401eb50>
        (*ctor) (); 
}
   1eb78:	e037883a 	mov	sp,fp
   1eb7c:	dfc00117 	ldw	ra,4(sp)
   1eb80:	df000017 	ldw	fp,0(sp)
   1eb84:	dec00204 	addi	sp,sp,8
   1eb88:	f800283a 	ret

0001eb8c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1eb8c:	defffd04 	addi	sp,sp,-12
   1eb90:	dfc00215 	stw	ra,8(sp)
   1eb94:	df000115 	stw	fp,4(sp)
   1eb98:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1eb9c:	008000b4 	movhi	r2,2
   1eba0:	10bf7504 	addi	r2,r2,-556
   1eba4:	e0bfff15 	stw	r2,-4(fp)
   1eba8:	00000606 	br	1ebc4 <_do_dtors+0x38>
        (*dtor) (); 
   1ebac:	e0bfff17 	ldw	r2,-4(fp)
   1ebb0:	10800017 	ldw	r2,0(r2)
   1ebb4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1ebb8:	e0bfff17 	ldw	r2,-4(fp)
   1ebbc:	10bfff04 	addi	r2,r2,-4
   1ebc0:	e0bfff15 	stw	r2,-4(fp)
   1ebc4:	e0ffff17 	ldw	r3,-4(fp)
   1ebc8:	008000b4 	movhi	r2,2
   1ebcc:	10bf7604 	addi	r2,r2,-552
   1ebd0:	18bff62e 	bgeu	r3,r2,1ebac <__alt_mem_Flash_flash_data+0xf401ebac>
        (*dtor) (); 
}
   1ebd4:	e037883a 	mov	sp,fp
   1ebd8:	dfc00117 	ldw	ra,4(sp)
   1ebdc:	df000017 	ldw	fp,0(sp)
   1ebe0:	dec00204 	addi	sp,sp,8
   1ebe4:	f800283a 	ret

0001ebe8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1ebe8:	defffa04 	addi	sp,sp,-24
   1ebec:	dfc00515 	stw	ra,20(sp)
   1ebf0:	df000415 	stw	fp,16(sp)
   1ebf4:	df000404 	addi	fp,sp,16
   1ebf8:	e13ffe15 	stw	r4,-8(fp)
   1ebfc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1ec00:	e0bfff17 	ldw	r2,-4(fp)
   1ec04:	10800017 	ldw	r2,0(r2)
   1ec08:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1ec0c:	e13ffe17 	ldw	r4,-8(fp)
   1ec10:	00037a40 	call	37a4 <strlen>
   1ec14:	10800044 	addi	r2,r2,1
   1ec18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1ec1c:	00000d06 	br	1ec54 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1ec20:	e0bffc17 	ldw	r2,-16(fp)
   1ec24:	10c00217 	ldw	r3,8(r2)
   1ec28:	e0bffd17 	ldw	r2,-12(fp)
   1ec2c:	1809883a 	mov	r4,r3
   1ec30:	e17ffe17 	ldw	r5,-8(fp)
   1ec34:	100d883a 	mov	r6,r2
   1ec38:	001fa780 	call	1fa78 <memcmp>
   1ec3c:	1000021e 	bne	r2,zero,1ec48 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1ec40:	e0bffc17 	ldw	r2,-16(fp)
   1ec44:	00000706 	br	1ec64 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1ec48:	e0bffc17 	ldw	r2,-16(fp)
   1ec4c:	10800017 	ldw	r2,0(r2)
   1ec50:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1ec54:	e0fffc17 	ldw	r3,-16(fp)
   1ec58:	e0bfff17 	ldw	r2,-4(fp)
   1ec5c:	18bff01e 	bne	r3,r2,1ec20 <__alt_mem_Flash_flash_data+0xf401ec20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1ec60:	0005883a 	mov	r2,zero
}
   1ec64:	e037883a 	mov	sp,fp
   1ec68:	dfc00117 	ldw	ra,4(sp)
   1ec6c:	df000017 	ldw	fp,0(sp)
   1ec70:	dec00204 	addi	sp,sp,8
   1ec74:	f800283a 	ret

0001ec78 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1ec78:	defffe04 	addi	sp,sp,-8
   1ec7c:	dfc00115 	stw	ra,4(sp)
   1ec80:	df000015 	stw	fp,0(sp)
   1ec84:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1ec88:	0009883a 	mov	r4,zero
   1ec8c:	01440004 	movi	r5,4096
   1ec90:	001f9040 	call	1f904 <alt_icache_flush>
#endif
}
   1ec94:	e037883a 	mov	sp,fp
   1ec98:	dfc00117 	ldw	ra,4(sp)
   1ec9c:	df000017 	ldw	fp,0(sp)
   1eca0:	dec00204 	addi	sp,sp,8
   1eca4:	f800283a 	ret

0001eca8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1eca8:	defff904 	addi	sp,sp,-28
   1ecac:	dfc00615 	stw	ra,24(sp)
   1ecb0:	df000515 	stw	fp,20(sp)
   1ecb4:	df000504 	addi	fp,sp,20
   1ecb8:	e13ffc15 	stw	r4,-16(fp)
   1ecbc:	e17ffd15 	stw	r5,-12(fp)
   1ecc0:	e1bffe15 	stw	r6,-8(fp)
   1ecc4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1ecc8:	e13ffd17 	ldw	r4,-12(fp)
   1eccc:	e17ffe17 	ldw	r5,-8(fp)
   1ecd0:	e1bfff17 	ldw	r6,-4(fp)
   1ecd4:	001f0ac0 	call	1f0ac <open>
   1ecd8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1ecdc:	e0bffb17 	ldw	r2,-20(fp)
   1ece0:	10001c16 	blt	r2,zero,1ed54 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1ece4:	008000b4 	movhi	r2,2
   1ece8:	10842f04 	addi	r2,r2,4284
   1ecec:	e0fffb17 	ldw	r3,-20(fp)
   1ecf0:	18c00324 	muli	r3,r3,12
   1ecf4:	10c5883a 	add	r2,r2,r3
   1ecf8:	10c00017 	ldw	r3,0(r2)
   1ecfc:	e0bffc17 	ldw	r2,-16(fp)
   1ed00:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1ed04:	008000b4 	movhi	r2,2
   1ed08:	10842f04 	addi	r2,r2,4284
   1ed0c:	e0fffb17 	ldw	r3,-20(fp)
   1ed10:	18c00324 	muli	r3,r3,12
   1ed14:	18c00104 	addi	r3,r3,4
   1ed18:	10c5883a 	add	r2,r2,r3
   1ed1c:	10c00017 	ldw	r3,0(r2)
   1ed20:	e0bffc17 	ldw	r2,-16(fp)
   1ed24:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1ed28:	008000b4 	movhi	r2,2
   1ed2c:	10842f04 	addi	r2,r2,4284
   1ed30:	e0fffb17 	ldw	r3,-20(fp)
   1ed34:	18c00324 	muli	r3,r3,12
   1ed38:	18c00204 	addi	r3,r3,8
   1ed3c:	10c5883a 	add	r2,r2,r3
   1ed40:	10c00017 	ldw	r3,0(r2)
   1ed44:	e0bffc17 	ldw	r2,-16(fp)
   1ed48:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1ed4c:	e13ffb17 	ldw	r4,-20(fp)
   1ed50:	001333c0 	call	1333c <alt_release_fd>
  }
} 
   1ed54:	e037883a 	mov	sp,fp
   1ed58:	dfc00117 	ldw	ra,4(sp)
   1ed5c:	df000017 	ldw	fp,0(sp)
   1ed60:	dec00204 	addi	sp,sp,8
   1ed64:	f800283a 	ret

0001ed68 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1ed68:	defffb04 	addi	sp,sp,-20
   1ed6c:	dfc00415 	stw	ra,16(sp)
   1ed70:	df000315 	stw	fp,12(sp)
   1ed74:	df000304 	addi	fp,sp,12
   1ed78:	e13ffd15 	stw	r4,-12(fp)
   1ed7c:	e17ffe15 	stw	r5,-8(fp)
   1ed80:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1ed84:	010000b4 	movhi	r4,2
   1ed88:	21043204 	addi	r4,r4,4296
   1ed8c:	e17ffd17 	ldw	r5,-12(fp)
   1ed90:	01800044 	movi	r6,1
   1ed94:	01c07fc4 	movi	r7,511
   1ed98:	001eca80 	call	1eca8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1ed9c:	010000b4 	movhi	r4,2
   1eda0:	21042f04 	addi	r4,r4,4284
   1eda4:	e17ffe17 	ldw	r5,-8(fp)
   1eda8:	000d883a 	mov	r6,zero
   1edac:	01c07fc4 	movi	r7,511
   1edb0:	001eca80 	call	1eca8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1edb4:	010000b4 	movhi	r4,2
   1edb8:	21043504 	addi	r4,r4,4308
   1edbc:	e17fff17 	ldw	r5,-4(fp)
   1edc0:	01800044 	movi	r6,1
   1edc4:	01c07fc4 	movi	r7,511
   1edc8:	001eca80 	call	1eca8 <alt_open_fd>
}  
   1edcc:	e037883a 	mov	sp,fp
   1edd0:	dfc00117 	ldw	ra,4(sp)
   1edd4:	df000017 	ldw	fp,0(sp)
   1edd8:	dec00204 	addi	sp,sp,8
   1eddc:	f800283a 	ret

0001ede0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1ede0:	defff004 	addi	sp,sp,-64
   1ede4:	df000f15 	stw	fp,60(sp)
   1ede8:	df000f04 	addi	fp,sp,60
   1edec:	e13ffd15 	stw	r4,-12(fp)
   1edf0:	e17ffe15 	stw	r5,-8(fp)
   1edf4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1edf8:	00bffa84 	movi	r2,-22
   1edfc:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1ee00:	e0bffd17 	ldw	r2,-12(fp)
   1ee04:	10800828 	cmpgeui	r2,r2,32
   1ee08:	10005c1e 	bne	r2,zero,1ef7c <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ee0c:	0005303a 	rdctl	r2,status
   1ee10:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ee14:	e0fff317 	ldw	r3,-52(fp)
   1ee18:	00bfff84 	movi	r2,-2
   1ee1c:	1884703a 	and	r2,r3,r2
   1ee20:	1001703a 	wrctl	status,r2
  
  return context;
   1ee24:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1ee28:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   1ee2c:	008000f4 	movhi	r2,3
   1ee30:	10986504 	addi	r2,r2,24980
   1ee34:	e0fffd17 	ldw	r3,-12(fp)
   1ee38:	180690fa 	slli	r3,r3,3
   1ee3c:	10c5883a 	add	r2,r2,r3
   1ee40:	e0ffff17 	ldw	r3,-4(fp)
   1ee44:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1ee48:	008000f4 	movhi	r2,3
   1ee4c:	10986504 	addi	r2,r2,24980
   1ee50:	e0fffd17 	ldw	r3,-12(fp)
   1ee54:	180690fa 	slli	r3,r3,3
   1ee58:	18c00104 	addi	r3,r3,4
   1ee5c:	10c5883a 	add	r2,r2,r3
   1ee60:	e0fffe17 	ldw	r3,-8(fp)
   1ee64:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1ee68:	e0bfff17 	ldw	r2,-4(fp)
   1ee6c:	10001f26 	beq	r2,zero,1eeec <alt_irq_register+0x10c>
   1ee70:	e0bffd17 	ldw	r2,-12(fp)
   1ee74:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ee78:	0005303a 	rdctl	r2,status
   1ee7c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ee80:	e0fff517 	ldw	r3,-44(fp)
   1ee84:	00bfff84 	movi	r2,-2
   1ee88:	1884703a 	and	r2,r3,r2
   1ee8c:	1001703a 	wrctl	status,r2
  
  return context;
   1ee90:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1ee94:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   1ee98:	e0bff417 	ldw	r2,-48(fp)
   1ee9c:	00c00044 	movi	r3,1
   1eea0:	1884983a 	sll	r2,r3,r2
   1eea4:	1007883a 	mov	r3,r2
   1eea8:	008000b4 	movhi	r2,2
   1eeac:	1091da04 	addi	r2,r2,18280
   1eeb0:	10800017 	ldw	r2,0(r2)
   1eeb4:	1886b03a 	or	r3,r3,r2
   1eeb8:	008000b4 	movhi	r2,2
   1eebc:	1091da04 	addi	r2,r2,18280
   1eec0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1eec4:	008000b4 	movhi	r2,2
   1eec8:	1091da04 	addi	r2,r2,18280
   1eecc:	10800017 	ldw	r2,0(r2)
   1eed0:	100170fa 	wrctl	ienable,r2
   1eed4:	e0bff617 	ldw	r2,-40(fp)
   1eed8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1eedc:	e0bff717 	ldw	r2,-36(fp)
   1eee0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1eee4:	0005883a 	mov	r2,zero
   1eee8:	00001f06 	br	1ef68 <alt_irq_register+0x188>
   1eeec:	e0bffd17 	ldw	r2,-12(fp)
   1eef0:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1eef4:	0005303a 	rdctl	r2,status
   1eef8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1eefc:	e0fff917 	ldw	r3,-28(fp)
   1ef00:	00bfff84 	movi	r2,-2
   1ef04:	1884703a 	and	r2,r3,r2
   1ef08:	1001703a 	wrctl	status,r2
  
  return context;
   1ef0c:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1ef10:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   1ef14:	e0bff817 	ldw	r2,-32(fp)
   1ef18:	00c00044 	movi	r3,1
   1ef1c:	1884983a 	sll	r2,r3,r2
   1ef20:	0084303a 	nor	r2,zero,r2
   1ef24:	1007883a 	mov	r3,r2
   1ef28:	008000b4 	movhi	r2,2
   1ef2c:	1091da04 	addi	r2,r2,18280
   1ef30:	10800017 	ldw	r2,0(r2)
   1ef34:	1886703a 	and	r3,r3,r2
   1ef38:	008000b4 	movhi	r2,2
   1ef3c:	1091da04 	addi	r2,r2,18280
   1ef40:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1ef44:	008000b4 	movhi	r2,2
   1ef48:	1091da04 	addi	r2,r2,18280
   1ef4c:	10800017 	ldw	r2,0(r2)
   1ef50:	100170fa 	wrctl	ienable,r2
   1ef54:	e0bffa17 	ldw	r2,-24(fp)
   1ef58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ef5c:	e0bffb17 	ldw	r2,-20(fp)
   1ef60:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1ef64:	0005883a 	mov	r2,zero
   1ef68:	e0bff115 	stw	r2,-60(fp)
   1ef6c:	e0bff217 	ldw	r2,-56(fp)
   1ef70:	e0bffc15 	stw	r2,-16(fp)
   1ef74:	e0bffc17 	ldw	r2,-16(fp)
   1ef78:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1ef7c:	e0bff117 	ldw	r2,-60(fp)
}
   1ef80:	e037883a 	mov	sp,fp
   1ef84:	df000017 	ldw	fp,0(sp)
   1ef88:	dec00104 	addi	sp,sp,4
   1ef8c:	f800283a 	ret

0001ef90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1ef90:	defffe04 	addi	sp,sp,-8
   1ef94:	dfc00115 	stw	ra,4(sp)
   1ef98:	df000015 	stw	fp,0(sp)
   1ef9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1efa0:	008000b4 	movhi	r2,2
   1efa4:	1089a304 	addi	r2,r2,9868
   1efa8:	10800017 	ldw	r2,0(r2)
   1efac:	10000526 	beq	r2,zero,1efc4 <alt_get_errno+0x34>
   1efb0:	008000b4 	movhi	r2,2
   1efb4:	1089a304 	addi	r2,r2,9868
   1efb8:	10800017 	ldw	r2,0(r2)
   1efbc:	103ee83a 	callr	r2
   1efc0:	00000206 	br	1efcc <alt_get_errno+0x3c>
   1efc4:	008000b4 	movhi	r2,2
   1efc8:	1091bd04 	addi	r2,r2,18164
}
   1efcc:	e037883a 	mov	sp,fp
   1efd0:	dfc00117 	ldw	ra,4(sp)
   1efd4:	df000017 	ldw	fp,0(sp)
   1efd8:	dec00204 	addi	sp,sp,8
   1efdc:	f800283a 	ret

0001efe0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1efe0:	defffd04 	addi	sp,sp,-12
   1efe4:	df000215 	stw	fp,8(sp)
   1efe8:	df000204 	addi	fp,sp,8
   1efec:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1eff0:	e0bfff17 	ldw	r2,-4(fp)
   1eff4:	10800217 	ldw	r2,8(r2)
   1eff8:	10d00034 	orhi	r3,r2,16384
   1effc:	e0bfff17 	ldw	r2,-4(fp)
   1f000:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1f004:	e03ffe15 	stw	zero,-8(fp)
   1f008:	00001d06 	br	1f080 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1f00c:	008000b4 	movhi	r2,2
   1f010:	10842f04 	addi	r2,r2,4284
   1f014:	e0fffe17 	ldw	r3,-8(fp)
   1f018:	18c00324 	muli	r3,r3,12
   1f01c:	10c5883a 	add	r2,r2,r3
   1f020:	10c00017 	ldw	r3,0(r2)
   1f024:	e0bfff17 	ldw	r2,-4(fp)
   1f028:	10800017 	ldw	r2,0(r2)
   1f02c:	1880111e 	bne	r3,r2,1f074 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1f030:	008000b4 	movhi	r2,2
   1f034:	10842f04 	addi	r2,r2,4284
   1f038:	e0fffe17 	ldw	r3,-8(fp)
   1f03c:	18c00324 	muli	r3,r3,12
   1f040:	18c00204 	addi	r3,r3,8
   1f044:	10c5883a 	add	r2,r2,r3
   1f048:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1f04c:	1000090e 	bge	r2,zero,1f074 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1f050:	e0bffe17 	ldw	r2,-8(fp)
   1f054:	10c00324 	muli	r3,r2,12
   1f058:	008000b4 	movhi	r2,2
   1f05c:	10842f04 	addi	r2,r2,4284
   1f060:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1f064:	e0bfff17 	ldw	r2,-4(fp)
   1f068:	18800226 	beq	r3,r2,1f074 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1f06c:	00bffcc4 	movi	r2,-13
   1f070:	00000a06 	br	1f09c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1f074:	e0bffe17 	ldw	r2,-8(fp)
   1f078:	10800044 	addi	r2,r2,1
   1f07c:	e0bffe15 	stw	r2,-8(fp)
   1f080:	008000b4 	movhi	r2,2
   1f084:	1089a204 	addi	r2,r2,9864
   1f088:	10800017 	ldw	r2,0(r2)
   1f08c:	1007883a 	mov	r3,r2
   1f090:	e0bffe17 	ldw	r2,-8(fp)
   1f094:	18bfdd2e 	bgeu	r3,r2,1f00c <__alt_mem_Flash_flash_data+0xf401f00c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1f098:	0005883a 	mov	r2,zero
}
   1f09c:	e037883a 	mov	sp,fp
   1f0a0:	df000017 	ldw	fp,0(sp)
   1f0a4:	dec00104 	addi	sp,sp,4
   1f0a8:	f800283a 	ret

0001f0ac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1f0ac:	defff604 	addi	sp,sp,-40
   1f0b0:	dfc00915 	stw	ra,36(sp)
   1f0b4:	df000815 	stw	fp,32(sp)
   1f0b8:	df000804 	addi	fp,sp,32
   1f0bc:	e13ffd15 	stw	r4,-12(fp)
   1f0c0:	e17ffe15 	stw	r5,-8(fp)
   1f0c4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1f0c8:	00bfffc4 	movi	r2,-1
   1f0cc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1f0d0:	00bffb44 	movi	r2,-19
   1f0d4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1f0d8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1f0dc:	e13ffd17 	ldw	r4,-12(fp)
   1f0e0:	014000b4 	movhi	r5,2
   1f0e4:	2949a004 	addi	r5,r5,9856
   1f0e8:	001ebe80 	call	1ebe8 <alt_find_dev>
   1f0ec:	e0bff815 	stw	r2,-32(fp)
   1f0f0:	e0bff817 	ldw	r2,-32(fp)
   1f0f4:	1000051e 	bne	r2,zero,1f10c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1f0f8:	e13ffd17 	ldw	r4,-12(fp)
   1f0fc:	001f6f40 	call	1f6f4 <alt_find_file>
   1f100:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1f104:	00800044 	movi	r2,1
   1f108:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1f10c:	e0bff817 	ldw	r2,-32(fp)
   1f110:	10002926 	beq	r2,zero,1f1b8 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1f114:	e13ff817 	ldw	r4,-32(fp)
   1f118:	001f8080 	call	1f808 <alt_get_fd>
   1f11c:	e0bff915 	stw	r2,-28(fp)
   1f120:	e0bff917 	ldw	r2,-28(fp)
   1f124:	1000030e 	bge	r2,zero,1f134 <open+0x88>
    {
      status = index;
   1f128:	e0bff917 	ldw	r2,-28(fp)
   1f12c:	e0bffa15 	stw	r2,-24(fp)
   1f130:	00002306 	br	1f1c0 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   1f134:	e0bff917 	ldw	r2,-28(fp)
   1f138:	10c00324 	muli	r3,r2,12
   1f13c:	008000b4 	movhi	r2,2
   1f140:	10842f04 	addi	r2,r2,4284
   1f144:	1885883a 	add	r2,r3,r2
   1f148:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1f14c:	e0fffe17 	ldw	r3,-8(fp)
   1f150:	00900034 	movhi	r2,16384
   1f154:	10bfffc4 	addi	r2,r2,-1
   1f158:	1886703a 	and	r3,r3,r2
   1f15c:	e0bffc17 	ldw	r2,-16(fp)
   1f160:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1f164:	e0bffb17 	ldw	r2,-20(fp)
   1f168:	1000051e 	bne	r2,zero,1f180 <open+0xd4>
   1f16c:	e13ffc17 	ldw	r4,-16(fp)
   1f170:	001efe00 	call	1efe0 <alt_file_locked>
   1f174:	e0bffa15 	stw	r2,-24(fp)
   1f178:	e0bffa17 	ldw	r2,-24(fp)
   1f17c:	10001016 	blt	r2,zero,1f1c0 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1f180:	e0bff817 	ldw	r2,-32(fp)
   1f184:	10800317 	ldw	r2,12(r2)
   1f188:	10000826 	beq	r2,zero,1f1ac <open+0x100>
   1f18c:	e0bff817 	ldw	r2,-32(fp)
   1f190:	10800317 	ldw	r2,12(r2)
   1f194:	e13ffc17 	ldw	r4,-16(fp)
   1f198:	e17ffd17 	ldw	r5,-12(fp)
   1f19c:	e1bffe17 	ldw	r6,-8(fp)
   1f1a0:	e1ffff17 	ldw	r7,-4(fp)
   1f1a4:	103ee83a 	callr	r2
   1f1a8:	00000106 	br	1f1b0 <open+0x104>
   1f1ac:	0005883a 	mov	r2,zero
   1f1b0:	e0bffa15 	stw	r2,-24(fp)
   1f1b4:	00000206 	br	1f1c0 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1f1b8:	00bffb44 	movi	r2,-19
   1f1bc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1f1c0:	e0bffa17 	ldw	r2,-24(fp)
   1f1c4:	1000090e 	bge	r2,zero,1f1ec <open+0x140>
  {
    alt_release_fd (index);  
   1f1c8:	e13ff917 	ldw	r4,-28(fp)
   1f1cc:	001333c0 	call	1333c <alt_release_fd>
    ALT_ERRNO = -status;
   1f1d0:	001ef900 	call	1ef90 <alt_get_errno>
   1f1d4:	1007883a 	mov	r3,r2
   1f1d8:	e0bffa17 	ldw	r2,-24(fp)
   1f1dc:	0085c83a 	sub	r2,zero,r2
   1f1e0:	18800015 	stw	r2,0(r3)
    return -1;
   1f1e4:	00bfffc4 	movi	r2,-1
   1f1e8:	00000106 	br	1f1f0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   1f1ec:	e0bff917 	ldw	r2,-28(fp)
}
   1f1f0:	e037883a 	mov	sp,fp
   1f1f4:	dfc00117 	ldw	ra,4(sp)
   1f1f8:	df000017 	ldw	fp,0(sp)
   1f1fc:	dec00204 	addi	sp,sp,8
   1f200:	f800283a 	ret

0001f204 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1f204:	defffa04 	addi	sp,sp,-24
   1f208:	df000515 	stw	fp,20(sp)
   1f20c:	df000504 	addi	fp,sp,20
   1f210:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f214:	0005303a 	rdctl	r2,status
   1f218:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f21c:	e0fffc17 	ldw	r3,-16(fp)
   1f220:	00bfff84 	movi	r2,-2
   1f224:	1884703a 	and	r2,r3,r2
   1f228:	1001703a 	wrctl	status,r2
  
  return context;
   1f22c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1f230:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1f234:	e0bfff17 	ldw	r2,-4(fp)
   1f238:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1f23c:	e0bffd17 	ldw	r2,-12(fp)
   1f240:	10800017 	ldw	r2,0(r2)
   1f244:	e0fffd17 	ldw	r3,-12(fp)
   1f248:	18c00117 	ldw	r3,4(r3)
   1f24c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1f250:	e0bffd17 	ldw	r2,-12(fp)
   1f254:	10800117 	ldw	r2,4(r2)
   1f258:	e0fffd17 	ldw	r3,-12(fp)
   1f25c:	18c00017 	ldw	r3,0(r3)
   1f260:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1f264:	e0bffd17 	ldw	r2,-12(fp)
   1f268:	e0fffd17 	ldw	r3,-12(fp)
   1f26c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1f270:	e0bffd17 	ldw	r2,-12(fp)
   1f274:	e0fffd17 	ldw	r3,-12(fp)
   1f278:	10c00015 	stw	r3,0(r2)
   1f27c:	e0bffb17 	ldw	r2,-20(fp)
   1f280:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f284:	e0bffe17 	ldw	r2,-8(fp)
   1f288:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1f28c:	e037883a 	mov	sp,fp
   1f290:	df000017 	ldw	fp,0(sp)
   1f294:	dec00104 	addi	sp,sp,4
   1f298:	f800283a 	ret

0001f29c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1f29c:	defffb04 	addi	sp,sp,-20
   1f2a0:	dfc00415 	stw	ra,16(sp)
   1f2a4:	df000315 	stw	fp,12(sp)
   1f2a8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1f2ac:	d0a03a17 	ldw	r2,-32536(gp)
   1f2b0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1f2b4:	d0a85117 	ldw	r2,-24252(gp)
   1f2b8:	10800044 	addi	r2,r2,1
   1f2bc:	d0a85115 	stw	r2,-24252(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1f2c0:	00002e06 	br	1f37c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1f2c4:	e0bffd17 	ldw	r2,-12(fp)
   1f2c8:	10800017 	ldw	r2,0(r2)
   1f2cc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1f2d0:	e0bffd17 	ldw	r2,-12(fp)
   1f2d4:	10800403 	ldbu	r2,16(r2)
   1f2d8:	10803fcc 	andi	r2,r2,255
   1f2dc:	10000426 	beq	r2,zero,1f2f0 <alt_tick+0x54>
   1f2e0:	d0a85117 	ldw	r2,-24252(gp)
   1f2e4:	1000021e 	bne	r2,zero,1f2f0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1f2e8:	e0bffd17 	ldw	r2,-12(fp)
   1f2ec:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1f2f0:	e0bffd17 	ldw	r2,-12(fp)
   1f2f4:	10800217 	ldw	r2,8(r2)
   1f2f8:	d0e85117 	ldw	r3,-24252(gp)
   1f2fc:	18801d36 	bltu	r3,r2,1f374 <alt_tick+0xd8>
   1f300:	e0bffd17 	ldw	r2,-12(fp)
   1f304:	10800403 	ldbu	r2,16(r2)
   1f308:	10803fcc 	andi	r2,r2,255
   1f30c:	1000191e 	bne	r2,zero,1f374 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1f310:	e0bffd17 	ldw	r2,-12(fp)
   1f314:	10800317 	ldw	r2,12(r2)
   1f318:	e0fffd17 	ldw	r3,-12(fp)
   1f31c:	18c00517 	ldw	r3,20(r3)
   1f320:	1809883a 	mov	r4,r3
   1f324:	103ee83a 	callr	r2
   1f328:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1f32c:	e0bfff17 	ldw	r2,-4(fp)
   1f330:	1000031e 	bne	r2,zero,1f340 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1f334:	e13ffd17 	ldw	r4,-12(fp)
   1f338:	001f2040 	call	1f204 <alt_alarm_stop>
   1f33c:	00000d06 	br	1f374 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1f340:	e0bffd17 	ldw	r2,-12(fp)
   1f344:	10c00217 	ldw	r3,8(r2)
   1f348:	e0bfff17 	ldw	r2,-4(fp)
   1f34c:	1887883a 	add	r3,r3,r2
   1f350:	e0bffd17 	ldw	r2,-12(fp)
   1f354:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1f358:	e0bffd17 	ldw	r2,-12(fp)
   1f35c:	10c00217 	ldw	r3,8(r2)
   1f360:	d0a85117 	ldw	r2,-24252(gp)
   1f364:	1880032e 	bgeu	r3,r2,1f374 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1f368:	e0bffd17 	ldw	r2,-12(fp)
   1f36c:	00c00044 	movi	r3,1
   1f370:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1f374:	e0bffe17 	ldw	r2,-8(fp)
   1f378:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1f37c:	e0fffd17 	ldw	r3,-12(fp)
   1f380:	d0a03a04 	addi	r2,gp,-32536
   1f384:	18bfcf1e 	bne	r3,r2,1f2c4 <__alt_mem_Flash_flash_data+0xf401f2c4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1f388:	00145480 	call	14548 <OSTimeTick>
}
   1f38c:	e037883a 	mov	sp,fp
   1f390:	dfc00117 	ldw	ra,4(sp)
   1f394:	df000017 	ldw	fp,0(sp)
   1f398:	dec00204 	addi	sp,sp,8
   1f39c:	f800283a 	ret

0001f3a0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1f3a0:	deffff04 	addi	sp,sp,-4
   1f3a4:	df000015 	stw	fp,0(sp)
   1f3a8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1f3ac:	000170fa 	wrctl	ienable,zero
}
   1f3b0:	e037883a 	mov	sp,fp
   1f3b4:	df000017 	ldw	fp,0(sp)
   1f3b8:	dec00104 	addi	sp,sp,4
   1f3bc:	f800283a 	ret

0001f3c0 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1f3c0:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1f3c4:	d0e00e17 	ldw	r3,-32712(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1f3c8:	d1284a17 	ldw	r4,-24280(gp)

      stw ra,  0(sp)
   1f3cc:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1f3d0:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1f3d4:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1f3d8:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1f3dc:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1f3e0:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1f3e4:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1f3e8:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1f3ec:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1f3f0:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1f3f4:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1f3f8:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1f3fc:	001f62c0 	call	1f62c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1f400:	d1284517 	ldw	r4,-24300(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1f404:	d1683d07 	ldb	r5,-24332(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1f408:	d1284a15 	stw	r4,-24280(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1f40c:	d1683d45 	stb	r5,-24331(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1f410:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1f414:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1f418:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1f41c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1f420:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1f424:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1f428:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1f42c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1f430:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1f434:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1f438:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1f43c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1f440:	d0e00e15 	stw	r3,-32712(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1f444:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1f448:	f800283a 	ret

0001f44c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1f44c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1f450:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1f454:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1f458:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1f45c:	001f62c0 	call	1f62c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1f460:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1f464:	d4a83b45 	stb	r18,-24339(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1f468:	003fe506 	br	1f400 <__alt_mem_Flash_flash_data+0xf401f400>

0001f46c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1f46c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1f470:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1f474:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1f478:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1f47c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1f480:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1f484:	dec00204 	addi	sp,sp,8

      callr r2
   1f488:	103ee83a 	callr	r2

      nop
   1f48c:	0001883a 	nop

0001f490 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1f490:	defff704 	addi	sp,sp,-36
   1f494:	dfc00815 	stw	ra,32(sp)
   1f498:	df000715 	stw	fp,28(sp)
   1f49c:	df000704 	addi	fp,sp,28
   1f4a0:	e13ffc15 	stw	r4,-16(fp)
   1f4a4:	e17ffd15 	stw	r5,-12(fp)
   1f4a8:	e1bffe15 	stw	r6,-8(fp)
   1f4ac:	3805883a 	mov	r2,r7
   1f4b0:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1f4b4:	e0fffe17 	ldw	r3,-8(fp)
   1f4b8:	00bfff04 	movi	r2,-4
   1f4bc:	1884703a 	and	r2,r3,r2
   1f4c0:	10bef704 	addi	r2,r2,-1060
   1f4c4:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1f4c8:	e13ff917 	ldw	r4,-28(fp)
   1f4cc:	000b883a 	mov	r5,zero
   1f4d0:	01810904 	movi	r6,1060
   1f4d4:	000b0c40 	call	b0c4 <memset>
   1f4d8:	e0bff917 	ldw	r2,-28(fp)
   1f4dc:	10c0bb04 	addi	r3,r2,748
   1f4e0:	e0bff917 	ldw	r2,-28(fp)
   1f4e4:	10c00115 	stw	r3,4(r2)
   1f4e8:	e0bff917 	ldw	r2,-28(fp)
   1f4ec:	10c0d504 	addi	r3,r2,852
   1f4f0:	e0bff917 	ldw	r2,-28(fp)
   1f4f4:	10c00215 	stw	r3,8(r2)
   1f4f8:	e0bff917 	ldw	r2,-28(fp)
   1f4fc:	10c0ef04 	addi	r3,r2,956
   1f500:	e0bff917 	ldw	r2,-28(fp)
   1f504:	10c00315 	stw	r3,12(r2)
   1f508:	e0fff917 	ldw	r3,-28(fp)
   1f50c:	008000b4 	movhi	r2,2
   1f510:	1081f104 	addi	r2,r2,1988
   1f514:	18800d15 	stw	r2,52(r3)
   1f518:	e0bff917 	ldw	r2,-28(fp)
   1f51c:	00c00044 	movi	r3,1
   1f520:	10c02915 	stw	r3,164(r2)
   1f524:	10002a15 	stw	zero,168(r2)
   1f528:	e0bff917 	ldw	r2,-28(fp)
   1f52c:	00ccc384 	movi	r3,13070
   1f530:	10c02b0d 	sth	r3,172(r2)
   1f534:	e0bff917 	ldw	r2,-28(fp)
   1f538:	00eaf344 	movi	r3,-21555
   1f53c:	10c02b8d 	sth	r3,174(r2)
   1f540:	e0bff917 	ldw	r2,-28(fp)
   1f544:	00c48d04 	movi	r3,4660
   1f548:	10c02c0d 	sth	r3,176(r2)
   1f54c:	e0bff917 	ldw	r2,-28(fp)
   1f550:	00f99b44 	movi	r3,-6547
   1f554:	10c02c8d 	sth	r3,178(r2)
   1f558:	e0bff917 	ldw	r2,-28(fp)
   1f55c:	00f7bb04 	movi	r3,-8468
   1f560:	10c02d0d 	sth	r3,180(r2)
   1f564:	e0bff917 	ldw	r2,-28(fp)
   1f568:	00c00144 	movi	r3,5
   1f56c:	10c02d8d 	sth	r3,182(r2)
   1f570:	e0bff917 	ldw	r2,-28(fp)
   1f574:	00c002c4 	movi	r3,11
   1f578:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1f57c:	e0bff917 	ldw	r2,-28(fp)
   1f580:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1f584:	e0bffa17 	ldw	r2,-24(fp)
   1f588:	10bff304 	addi	r2,r2,-52
   1f58c:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1f590:	e0bffb17 	ldw	r2,-20(fp)
   1f594:	10800c04 	addi	r2,r2,48
   1f598:	e0fffc17 	ldw	r3,-16(fp)
   1f59c:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1f5a0:	e0bffb17 	ldw	r2,-20(fp)
   1f5a4:	10800b04 	addi	r2,r2,44
   1f5a8:	e0fffd17 	ldw	r3,-12(fp)
   1f5ac:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1f5b0:	e0bffb17 	ldw	r2,-20(fp)
   1f5b4:	10800a04 	addi	r2,r2,40
   1f5b8:	e0fff917 	ldw	r3,-28(fp)
   1f5bc:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1f5c0:	008000b4 	movhi	r2,2
   1f5c4:	10bd1b04 	addi	r2,r2,-2964
   1f5c8:	10c00104 	addi	r3,r2,4
   1f5cc:	e0bffb17 	ldw	r2,-20(fp)
   1f5d0:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1f5d4:	e0bffb17 	ldw	r2,-20(fp)
}
   1f5d8:	e037883a 	mov	sp,fp
   1f5dc:	dfc00117 	ldw	ra,4(sp)
   1f5e0:	df000017 	ldw	fp,0(sp)
   1f5e4:	dec00204 	addi	sp,sp,8
   1f5e8:	f800283a 	ret

0001f5ec <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1f5ec:	defffe04 	addi	sp,sp,-8
   1f5f0:	df000115 	stw	fp,4(sp)
   1f5f4:	df000104 	addi	fp,sp,4
   1f5f8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1f5fc:	e037883a 	mov	sp,fp
   1f600:	df000017 	ldw	fp,0(sp)
   1f604:	dec00104 	addi	sp,sp,4
   1f608:	f800283a 	ret

0001f60c <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1f60c:	defffe04 	addi	sp,sp,-8
   1f610:	df000115 	stw	fp,4(sp)
   1f614:	df000104 	addi	fp,sp,4
   1f618:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1f61c:	e037883a 	mov	sp,fp
   1f620:	df000017 	ldw	fp,0(sp)
   1f624:	dec00104 	addi	sp,sp,4
   1f628:	f800283a 	ret

0001f62c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1f62c:	deffff04 	addi	sp,sp,-4
   1f630:	df000015 	stw	fp,0(sp)
   1f634:	d839883a 	mov	fp,sp
}
   1f638:	e037883a 	mov	sp,fp
   1f63c:	df000017 	ldw	fp,0(sp)
   1f640:	dec00104 	addi	sp,sp,4
   1f644:	f800283a 	ret

0001f648 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1f648:	deffff04 	addi	sp,sp,-4
   1f64c:	df000015 	stw	fp,0(sp)
   1f650:	d839883a 	mov	fp,sp
}
   1f654:	e037883a 	mov	sp,fp
   1f658:	df000017 	ldw	fp,0(sp)
   1f65c:	dec00104 	addi	sp,sp,4
   1f660:	f800283a 	ret

0001f664 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1f664:	deffff04 	addi	sp,sp,-4
   1f668:	df000015 	stw	fp,0(sp)
   1f66c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1f670:	e037883a 	mov	sp,fp
   1f674:	df000017 	ldw	fp,0(sp)
   1f678:	dec00104 	addi	sp,sp,4
   1f67c:	f800283a 	ret

0001f680 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1f680:	deffff04 	addi	sp,sp,-4
   1f684:	df000015 	stw	fp,0(sp)
   1f688:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1f68c:	e037883a 	mov	sp,fp
   1f690:	df000017 	ldw	fp,0(sp)
   1f694:	dec00104 	addi	sp,sp,4
   1f698:	f800283a 	ret

0001f69c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1f69c:	deffff04 	addi	sp,sp,-4
   1f6a0:	df000015 	stw	fp,0(sp)
   1f6a4:	d839883a 	mov	fp,sp
}
   1f6a8:	e037883a 	mov	sp,fp
   1f6ac:	df000017 	ldw	fp,0(sp)
   1f6b0:	dec00104 	addi	sp,sp,4
   1f6b4:	f800283a 	ret

0001f6b8 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1f6b8:	deffff04 	addi	sp,sp,-4
   1f6bc:	df000015 	stw	fp,0(sp)
   1f6c0:	d839883a 	mov	fp,sp
}
   1f6c4:	e037883a 	mov	sp,fp
   1f6c8:	df000017 	ldw	fp,0(sp)
   1f6cc:	dec00104 	addi	sp,sp,4
   1f6d0:	f800283a 	ret

0001f6d4 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1f6d4:	defffe04 	addi	sp,sp,-8
   1f6d8:	df000115 	stw	fp,4(sp)
   1f6dc:	df000104 	addi	fp,sp,4
   1f6e0:	e13fff15 	stw	r4,-4(fp)
}
   1f6e4:	e037883a 	mov	sp,fp
   1f6e8:	df000017 	ldw	fp,0(sp)
   1f6ec:	dec00104 	addi	sp,sp,4
   1f6f0:	f800283a 	ret

0001f6f4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1f6f4:	defffb04 	addi	sp,sp,-20
   1f6f8:	dfc00415 	stw	ra,16(sp)
   1f6fc:	df000315 	stw	fp,12(sp)
   1f700:	df000304 	addi	fp,sp,12
   1f704:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1f708:	008000b4 	movhi	r2,2
   1f70c:	10899e04 	addi	r2,r2,9848
   1f710:	10800017 	ldw	r2,0(r2)
   1f714:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1f718:	00003106 	br	1f7e0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1f71c:	e0bffd17 	ldw	r2,-12(fp)
   1f720:	10800217 	ldw	r2,8(r2)
   1f724:	1009883a 	mov	r4,r2
   1f728:	00037a40 	call	37a4 <strlen>
   1f72c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1f730:	e0bffd17 	ldw	r2,-12(fp)
   1f734:	10c00217 	ldw	r3,8(r2)
   1f738:	e0bffe17 	ldw	r2,-8(fp)
   1f73c:	10bfffc4 	addi	r2,r2,-1
   1f740:	1885883a 	add	r2,r3,r2
   1f744:	10800003 	ldbu	r2,0(r2)
   1f748:	10803fcc 	andi	r2,r2,255
   1f74c:	1080201c 	xori	r2,r2,128
   1f750:	10bfe004 	addi	r2,r2,-128
   1f754:	10800bd8 	cmpnei	r2,r2,47
   1f758:	1000031e 	bne	r2,zero,1f768 <alt_find_file+0x74>
    {
      len -= 1;
   1f75c:	e0bffe17 	ldw	r2,-8(fp)
   1f760:	10bfffc4 	addi	r2,r2,-1
   1f764:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1f768:	e0bffe17 	ldw	r2,-8(fp)
   1f76c:	e0ffff17 	ldw	r3,-4(fp)
   1f770:	1885883a 	add	r2,r3,r2
   1f774:	10800003 	ldbu	r2,0(r2)
   1f778:	10803fcc 	andi	r2,r2,255
   1f77c:	1080201c 	xori	r2,r2,128
   1f780:	10bfe004 	addi	r2,r2,-128
   1f784:	10800be0 	cmpeqi	r2,r2,47
   1f788:	1000081e 	bne	r2,zero,1f7ac <alt_find_file+0xb8>
   1f78c:	e0bffe17 	ldw	r2,-8(fp)
   1f790:	e0ffff17 	ldw	r3,-4(fp)
   1f794:	1885883a 	add	r2,r3,r2
   1f798:	10800003 	ldbu	r2,0(r2)
   1f79c:	10803fcc 	andi	r2,r2,255
   1f7a0:	1080201c 	xori	r2,r2,128
   1f7a4:	10bfe004 	addi	r2,r2,-128
   1f7a8:	10000a1e 	bne	r2,zero,1f7d4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1f7ac:	e0bffd17 	ldw	r2,-12(fp)
   1f7b0:	10c00217 	ldw	r3,8(r2)
   1f7b4:	e0bffe17 	ldw	r2,-8(fp)
   1f7b8:	1809883a 	mov	r4,r3
   1f7bc:	e17fff17 	ldw	r5,-4(fp)
   1f7c0:	100d883a 	mov	r6,r2
   1f7c4:	001fa780 	call	1fa78 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1f7c8:	1000021e 	bne	r2,zero,1f7d4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1f7cc:	e0bffd17 	ldw	r2,-12(fp)
   1f7d0:	00000806 	br	1f7f4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1f7d4:	e0bffd17 	ldw	r2,-12(fp)
   1f7d8:	10800017 	ldw	r2,0(r2)
   1f7dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1f7e0:	e0fffd17 	ldw	r3,-12(fp)
   1f7e4:	008000b4 	movhi	r2,2
   1f7e8:	10899e04 	addi	r2,r2,9848
   1f7ec:	18bfcb1e 	bne	r3,r2,1f71c <__alt_mem_Flash_flash_data+0xf401f71c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1f7f0:	0005883a 	mov	r2,zero
}
   1f7f4:	e037883a 	mov	sp,fp
   1f7f8:	dfc00117 	ldw	ra,4(sp)
   1f7fc:	df000017 	ldw	fp,0(sp)
   1f800:	dec00204 	addi	sp,sp,8
   1f804:	f800283a 	ret

0001f808 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1f808:	defff904 	addi	sp,sp,-28
   1f80c:	dfc00615 	stw	ra,24(sp)
   1f810:	df000515 	stw	fp,20(sp)
   1f814:	df000504 	addi	fp,sp,20
   1f818:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1f81c:	00bffa04 	movi	r2,-24
   1f820:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1f824:	008000b4 	movhi	r2,2
   1f828:	1091be04 	addi	r2,r2,18168
   1f82c:	10800017 	ldw	r2,0(r2)
   1f830:	e0bffd15 	stw	r2,-12(fp)
   1f834:	e03ffe0d 	sth	zero,-8(fp)
   1f838:	e0fffe0b 	ldhu	r3,-8(fp)
   1f83c:	e0bffe84 	addi	r2,fp,-6
   1f840:	e13ffd17 	ldw	r4,-12(fp)
   1f844:	180b883a 	mov	r5,r3
   1f848:	100d883a 	mov	r6,r2
   1f84c:	0019b6c0 	call	19b6c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1f850:	e03ffb15 	stw	zero,-20(fp)
   1f854:	00001d06 	br	1f8cc <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   1f858:	008000b4 	movhi	r2,2
   1f85c:	10842f04 	addi	r2,r2,4284
   1f860:	e0fffb17 	ldw	r3,-20(fp)
   1f864:	18c00324 	muli	r3,r3,12
   1f868:	10c5883a 	add	r2,r2,r3
   1f86c:	10800017 	ldw	r2,0(r2)
   1f870:	1000131e 	bne	r2,zero,1f8c0 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   1f874:	008000b4 	movhi	r2,2
   1f878:	10842f04 	addi	r2,r2,4284
   1f87c:	e0fffb17 	ldw	r3,-20(fp)
   1f880:	18c00324 	muli	r3,r3,12
   1f884:	10c5883a 	add	r2,r2,r3
   1f888:	e0ffff17 	ldw	r3,-4(fp)
   1f88c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1f890:	008000b4 	movhi	r2,2
   1f894:	1089a204 	addi	r2,r2,9864
   1f898:	10c00017 	ldw	r3,0(r2)
   1f89c:	e0bffb17 	ldw	r2,-20(fp)
   1f8a0:	1880040e 	bge	r3,r2,1f8b4 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   1f8a4:	008000b4 	movhi	r2,2
   1f8a8:	1089a204 	addi	r2,r2,9864
   1f8ac:	e0fffb17 	ldw	r3,-20(fp)
   1f8b0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1f8b4:	e0bffb17 	ldw	r2,-20(fp)
   1f8b8:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1f8bc:	00000606 	br	1f8d8 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1f8c0:	e0bffb17 	ldw	r2,-20(fp)
   1f8c4:	10800044 	addi	r2,r2,1
   1f8c8:	e0bffb15 	stw	r2,-20(fp)
   1f8cc:	e0bffb17 	ldw	r2,-20(fp)
   1f8d0:	10800810 	cmplti	r2,r2,32
   1f8d4:	103fe01e 	bne	r2,zero,1f858 <__alt_mem_Flash_flash_data+0xf401f858>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1f8d8:	008000b4 	movhi	r2,2
   1f8dc:	1091be04 	addi	r2,r2,18168
   1f8e0:	10800017 	ldw	r2,0(r2)
   1f8e4:	1009883a 	mov	r4,r2
   1f8e8:	0019f400 	call	19f40 <OSSemPost>

  return rc;
   1f8ec:	e0bffc17 	ldw	r2,-16(fp)
}
   1f8f0:	e037883a 	mov	sp,fp
   1f8f4:	dfc00117 	ldw	ra,4(sp)
   1f8f8:	df000017 	ldw	fp,0(sp)
   1f8fc:	dec00204 	addi	sp,sp,8
   1f900:	f800283a 	ret

0001f904 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1f904:	defffb04 	addi	sp,sp,-20
   1f908:	df000415 	stw	fp,16(sp)
   1f90c:	df000404 	addi	fp,sp,16
   1f910:	e13ffe15 	stw	r4,-8(fp)
   1f914:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1f918:	e0bfff17 	ldw	r2,-4(fp)
   1f91c:	10840070 	cmpltui	r2,r2,4097
   1f920:	1000021e 	bne	r2,zero,1f92c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1f924:	00840004 	movi	r2,4096
   1f928:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1f92c:	e0fffe17 	ldw	r3,-8(fp)
   1f930:	e0bfff17 	ldw	r2,-4(fp)
   1f934:	1885883a 	add	r2,r3,r2
   1f938:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1f93c:	e0bffe17 	ldw	r2,-8(fp)
   1f940:	e0bffc15 	stw	r2,-16(fp)
   1f944:	00000506 	br	1f95c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1f948:	e0bffc17 	ldw	r2,-16(fp)
   1f94c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1f950:	e0bffc17 	ldw	r2,-16(fp)
   1f954:	10800804 	addi	r2,r2,32
   1f958:	e0bffc15 	stw	r2,-16(fp)
   1f95c:	e0fffc17 	ldw	r3,-16(fp)
   1f960:	e0bffd17 	ldw	r2,-12(fp)
   1f964:	18bff836 	bltu	r3,r2,1f948 <__alt_mem_Flash_flash_data+0xf401f948>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1f968:	e0bffe17 	ldw	r2,-8(fp)
   1f96c:	108007cc 	andi	r2,r2,31
   1f970:	10000226 	beq	r2,zero,1f97c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1f974:	e0bffc17 	ldw	r2,-16(fp)
   1f978:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1f97c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1f980:	e037883a 	mov	sp,fp
   1f984:	df000017 	ldw	fp,0(sp)
   1f988:	dec00104 	addi	sp,sp,4
   1f98c:	f800283a 	ret

0001f990 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1f990:	defffe04 	addi	sp,sp,-8
   1f994:	df000115 	stw	fp,4(sp)
   1f998:	df000104 	addi	fp,sp,4
   1f99c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1f9a0:	e0bfff17 	ldw	r2,-4(fp)
   1f9a4:	10bffe84 	addi	r2,r2,-6
   1f9a8:	10c00428 	cmpgeui	r3,r2,16
   1f9ac:	18001a1e 	bne	r3,zero,1fa18 <alt_exception_cause_generated_bad_addr+0x88>
   1f9b0:	100690ba 	slli	r3,r2,2
   1f9b4:	008000b4 	movhi	r2,2
   1f9b8:	10be7204 	addi	r2,r2,-1592
   1f9bc:	1885883a 	add	r2,r3,r2
   1f9c0:	10800017 	ldw	r2,0(r2)
   1f9c4:	1000683a 	jmp	r2
   1f9c8:	0001fa08 	cmpgei	zero,zero,2024
   1f9cc:	0001fa08 	cmpgei	zero,zero,2024
   1f9d0:	0001fa18 	cmpnei	zero,zero,2024
   1f9d4:	0001fa18 	cmpnei	zero,zero,2024
   1f9d8:	0001fa18 	cmpnei	zero,zero,2024
   1f9dc:	0001fa08 	cmpgei	zero,zero,2024
   1f9e0:	0001fa10 	cmplti	zero,zero,2024
   1f9e4:	0001fa18 	cmpnei	zero,zero,2024
   1f9e8:	0001fa08 	cmpgei	zero,zero,2024
   1f9ec:	0001fa08 	cmpgei	zero,zero,2024
   1f9f0:	0001fa18 	cmpnei	zero,zero,2024
   1f9f4:	0001fa08 	cmpgei	zero,zero,2024
   1f9f8:	0001fa10 	cmplti	zero,zero,2024
   1f9fc:	0001fa18 	cmpnei	zero,zero,2024
   1fa00:	0001fa18 	cmpnei	zero,zero,2024
   1fa04:	0001fa08 	cmpgei	zero,zero,2024
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1fa08:	00800044 	movi	r2,1
   1fa0c:	00000306 	br	1fa1c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1fa10:	0005883a 	mov	r2,zero
   1fa14:	00000106 	br	1fa1c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1fa18:	0005883a 	mov	r2,zero
  }
}
   1fa1c:	e037883a 	mov	sp,fp
   1fa20:	df000017 	ldw	fp,0(sp)
   1fa24:	dec00104 	addi	sp,sp,4
   1fa28:	f800283a 	ret

0001fa2c <atexit>:
   1fa2c:	200b883a 	mov	r5,r4
   1fa30:	000d883a 	mov	r6,zero
   1fa34:	0009883a 	mov	r4,zero
   1fa38:	000f883a 	mov	r7,zero
   1fa3c:	001faf41 	jmpi	1faf4 <__register_exitproc>

0001fa40 <exit>:
   1fa40:	defffe04 	addi	sp,sp,-8
   1fa44:	000b883a 	mov	r5,zero
   1fa48:	dc000015 	stw	r16,0(sp)
   1fa4c:	dfc00115 	stw	ra,4(sp)
   1fa50:	2021883a 	mov	r16,r4
   1fa54:	001fc080 	call	1fc08 <__call_exitprocs>
   1fa58:	008000b4 	movhi	r2,2
   1fa5c:	10899804 	addi	r2,r2,9824
   1fa60:	11000017 	ldw	r4,0(r2)
   1fa64:	20800f17 	ldw	r2,60(r4)
   1fa68:	10000126 	beq	r2,zero,1fa70 <exit+0x30>
   1fa6c:	103ee83a 	callr	r2
   1fa70:	8009883a 	mov	r4,r16
   1fa74:	001fd9c0 	call	1fd9c <_exit>

0001fa78 <memcmp>:
   1fa78:	01c000c4 	movi	r7,3
   1fa7c:	3980192e 	bgeu	r7,r6,1fae4 <memcmp+0x6c>
   1fa80:	2144b03a 	or	r2,r4,r5
   1fa84:	11c4703a 	and	r2,r2,r7
   1fa88:	10000f26 	beq	r2,zero,1fac8 <memcmp+0x50>
   1fa8c:	20800003 	ldbu	r2,0(r4)
   1fa90:	28c00003 	ldbu	r3,0(r5)
   1fa94:	10c0151e 	bne	r2,r3,1faec <memcmp+0x74>
   1fa98:	31bfff84 	addi	r6,r6,-2
   1fa9c:	01ffffc4 	movi	r7,-1
   1faa0:	00000406 	br	1fab4 <memcmp+0x3c>
   1faa4:	20800003 	ldbu	r2,0(r4)
   1faa8:	28c00003 	ldbu	r3,0(r5)
   1faac:	31bfffc4 	addi	r6,r6,-1
   1fab0:	10c00e1e 	bne	r2,r3,1faec <memcmp+0x74>
   1fab4:	21000044 	addi	r4,r4,1
   1fab8:	29400044 	addi	r5,r5,1
   1fabc:	31fff91e 	bne	r6,r7,1faa4 <__alt_mem_Flash_flash_data+0xf401faa4>
   1fac0:	0005883a 	mov	r2,zero
   1fac4:	f800283a 	ret
   1fac8:	20c00017 	ldw	r3,0(r4)
   1facc:	28800017 	ldw	r2,0(r5)
   1fad0:	1880041e 	bne	r3,r2,1fae4 <memcmp+0x6c>
   1fad4:	31bfff04 	addi	r6,r6,-4
   1fad8:	21000104 	addi	r4,r4,4
   1fadc:	29400104 	addi	r5,r5,4
   1fae0:	39bff936 	bltu	r7,r6,1fac8 <__alt_mem_Flash_flash_data+0xf401fac8>
   1fae4:	303fe91e 	bne	r6,zero,1fa8c <__alt_mem_Flash_flash_data+0xf401fa8c>
   1fae8:	003ff506 	br	1fac0 <__alt_mem_Flash_flash_data+0xf401fac0>
   1faec:	10c5c83a 	sub	r2,r2,r3
   1faf0:	f800283a 	ret

0001faf4 <__register_exitproc>:
   1faf4:	008000b4 	movhi	r2,2
   1faf8:	defffa04 	addi	sp,sp,-24
   1fafc:	10899804 	addi	r2,r2,9824
   1fb00:	dc000315 	stw	r16,12(sp)
   1fb04:	14000017 	ldw	r16,0(r2)
   1fb08:	dc400415 	stw	r17,16(sp)
   1fb0c:	dfc00515 	stw	ra,20(sp)
   1fb10:	80805217 	ldw	r2,328(r16)
   1fb14:	2023883a 	mov	r17,r4
   1fb18:	10003626 	beq	r2,zero,1fbf4 <__register_exitproc+0x100>
   1fb1c:	10c00117 	ldw	r3,4(r2)
   1fb20:	010007c4 	movi	r4,31
   1fb24:	20c00e16 	blt	r4,r3,1fb60 <__register_exitproc+0x6c>
   1fb28:	1a400044 	addi	r9,r3,1
   1fb2c:	8800211e 	bne	r17,zero,1fbb4 <__register_exitproc+0xc0>
   1fb30:	18c00084 	addi	r3,r3,2
   1fb34:	18c7883a 	add	r3,r3,r3
   1fb38:	18c7883a 	add	r3,r3,r3
   1fb3c:	12400115 	stw	r9,4(r2)
   1fb40:	10c7883a 	add	r3,r2,r3
   1fb44:	19400015 	stw	r5,0(r3)
   1fb48:	0005883a 	mov	r2,zero
   1fb4c:	dfc00517 	ldw	ra,20(sp)
   1fb50:	dc400417 	ldw	r17,16(sp)
   1fb54:	dc000317 	ldw	r16,12(sp)
   1fb58:	dec00604 	addi	sp,sp,24
   1fb5c:	f800283a 	ret
   1fb60:	00800034 	movhi	r2,0
   1fb64:	10800004 	addi	r2,r2,0
   1fb68:	10002526 	beq	r2,zero,1fc00 <__register_exitproc+0x10c>
   1fb6c:	01006404 	movi	r4,400
   1fb70:	d9400015 	stw	r5,0(sp)
   1fb74:	d9800115 	stw	r6,4(sp)
   1fb78:	d9c00215 	stw	r7,8(sp)
   1fb7c:	00000000 	call	0 <__alt_mem_SDRAM>
   1fb80:	d9400017 	ldw	r5,0(sp)
   1fb84:	d9800117 	ldw	r6,4(sp)
   1fb88:	d9c00217 	ldw	r7,8(sp)
   1fb8c:	10001c26 	beq	r2,zero,1fc00 <__register_exitproc+0x10c>
   1fb90:	80c05217 	ldw	r3,328(r16)
   1fb94:	10000115 	stw	zero,4(r2)
   1fb98:	02400044 	movi	r9,1
   1fb9c:	10c00015 	stw	r3,0(r2)
   1fba0:	80805215 	stw	r2,328(r16)
   1fba4:	10006215 	stw	zero,392(r2)
   1fba8:	10006315 	stw	zero,396(r2)
   1fbac:	0007883a 	mov	r3,zero
   1fbb0:	883fdf26 	beq	r17,zero,1fb30 <__alt_mem_Flash_flash_data+0xf401fb30>
   1fbb4:	18d1883a 	add	r8,r3,r3
   1fbb8:	4211883a 	add	r8,r8,r8
   1fbbc:	1211883a 	add	r8,r2,r8
   1fbc0:	41802215 	stw	r6,136(r8)
   1fbc4:	01000044 	movi	r4,1
   1fbc8:	11806217 	ldw	r6,392(r2)
   1fbcc:	20c8983a 	sll	r4,r4,r3
   1fbd0:	310cb03a 	or	r6,r6,r4
   1fbd4:	11806215 	stw	r6,392(r2)
   1fbd8:	41c04215 	stw	r7,264(r8)
   1fbdc:	01800084 	movi	r6,2
   1fbe0:	89bfd31e 	bne	r17,r6,1fb30 <__alt_mem_Flash_flash_data+0xf401fb30>
   1fbe4:	11806317 	ldw	r6,396(r2)
   1fbe8:	3108b03a 	or	r4,r6,r4
   1fbec:	11006315 	stw	r4,396(r2)
   1fbf0:	003fcf06 	br	1fb30 <__alt_mem_Flash_flash_data+0xf401fb30>
   1fbf4:	80805304 	addi	r2,r16,332
   1fbf8:	80805215 	stw	r2,328(r16)
   1fbfc:	003fc706 	br	1fb1c <__alt_mem_Flash_flash_data+0xf401fb1c>
   1fc00:	00bfffc4 	movi	r2,-1
   1fc04:	003fd106 	br	1fb4c <__alt_mem_Flash_flash_data+0xf401fb4c>

0001fc08 <__call_exitprocs>:
   1fc08:	008000b4 	movhi	r2,2
   1fc0c:	10899804 	addi	r2,r2,9824
   1fc10:	10800017 	ldw	r2,0(r2)
   1fc14:	defff404 	addi	sp,sp,-48
   1fc18:	dd800815 	stw	r22,32(sp)
   1fc1c:	d8800015 	stw	r2,0(sp)
   1fc20:	10805204 	addi	r2,r2,328
   1fc24:	dd000615 	stw	r20,24(sp)
   1fc28:	dc800415 	stw	r18,16(sp)
   1fc2c:	dfc00b15 	stw	ra,44(sp)
   1fc30:	df000a15 	stw	fp,40(sp)
   1fc34:	ddc00915 	stw	r23,36(sp)
   1fc38:	dd400715 	stw	r21,28(sp)
   1fc3c:	dcc00515 	stw	r19,20(sp)
   1fc40:	dc400315 	stw	r17,12(sp)
   1fc44:	dc000215 	stw	r16,8(sp)
   1fc48:	2025883a 	mov	r18,r4
   1fc4c:	2829883a 	mov	r20,r5
   1fc50:	d8800115 	stw	r2,4(sp)
   1fc54:	05bfffc4 	movi	r22,-1
   1fc58:	d8800017 	ldw	r2,0(sp)
   1fc5c:	14c05217 	ldw	r19,328(r2)
   1fc60:	98001d26 	beq	r19,zero,1fcd8 <__call_exitprocs+0xd0>
   1fc64:	dd400117 	ldw	r21,4(sp)
   1fc68:	98800117 	ldw	r2,4(r19)
   1fc6c:	173fffc4 	addi	fp,r2,-1
   1fc70:	e0000d16 	blt	fp,zero,1fca8 <__call_exitprocs+0xa0>
   1fc74:	14000044 	addi	r16,r2,1
   1fc78:	8421883a 	add	r16,r16,r16
   1fc7c:	8421883a 	add	r16,r16,r16
   1fc80:	84402004 	addi	r17,r16,128
   1fc84:	9c63883a 	add	r17,r19,r17
   1fc88:	9c21883a 	add	r16,r19,r16
   1fc8c:	a0001e26 	beq	r20,zero,1fd08 <__call_exitprocs+0x100>
   1fc90:	80804017 	ldw	r2,256(r16)
   1fc94:	15001c26 	beq	r2,r20,1fd08 <__call_exitprocs+0x100>
   1fc98:	e73fffc4 	addi	fp,fp,-1
   1fc9c:	843fff04 	addi	r16,r16,-4
   1fca0:	8c7fff04 	addi	r17,r17,-4
   1fca4:	e5bff91e 	bne	fp,r22,1fc8c <__alt_mem_Flash_flash_data+0xf401fc8c>
   1fca8:	00800034 	movhi	r2,0
   1fcac:	10800004 	addi	r2,r2,0
   1fcb0:	10000926 	beq	r2,zero,1fcd8 <__call_exitprocs+0xd0>
   1fcb4:	98800117 	ldw	r2,4(r19)
   1fcb8:	1000311e 	bne	r2,zero,1fd80 <__call_exitprocs+0x178>
   1fcbc:	98800017 	ldw	r2,0(r19)
   1fcc0:	10003426 	beq	r2,zero,1fd94 <__call_exitprocs+0x18c>
   1fcc4:	9809883a 	mov	r4,r19
   1fcc8:	a8800015 	stw	r2,0(r21)
   1fccc:	00000000 	call	0 <__alt_mem_SDRAM>
   1fcd0:	acc00017 	ldw	r19,0(r21)
   1fcd4:	983fe41e 	bne	r19,zero,1fc68 <__alt_mem_Flash_flash_data+0xf401fc68>
   1fcd8:	dfc00b17 	ldw	ra,44(sp)
   1fcdc:	df000a17 	ldw	fp,40(sp)
   1fce0:	ddc00917 	ldw	r23,36(sp)
   1fce4:	dd800817 	ldw	r22,32(sp)
   1fce8:	dd400717 	ldw	r21,28(sp)
   1fcec:	dd000617 	ldw	r20,24(sp)
   1fcf0:	dcc00517 	ldw	r19,20(sp)
   1fcf4:	dc800417 	ldw	r18,16(sp)
   1fcf8:	dc400317 	ldw	r17,12(sp)
   1fcfc:	dc000217 	ldw	r16,8(sp)
   1fd00:	dec00c04 	addi	sp,sp,48
   1fd04:	f800283a 	ret
   1fd08:	98800117 	ldw	r2,4(r19)
   1fd0c:	80c00017 	ldw	r3,0(r16)
   1fd10:	10bfffc4 	addi	r2,r2,-1
   1fd14:	17001526 	beq	r2,fp,1fd6c <__call_exitprocs+0x164>
   1fd18:	80000015 	stw	zero,0(r16)
   1fd1c:	183fde26 	beq	r3,zero,1fc98 <__alt_mem_Flash_flash_data+0xf401fc98>
   1fd20:	00800044 	movi	r2,1
   1fd24:	1708983a 	sll	r4,r2,fp
   1fd28:	98806217 	ldw	r2,392(r19)
   1fd2c:	9dc00117 	ldw	r23,4(r19)
   1fd30:	2084703a 	and	r2,r4,r2
   1fd34:	1000061e 	bne	r2,zero,1fd50 <__call_exitprocs+0x148>
   1fd38:	183ee83a 	callr	r3
   1fd3c:	98800117 	ldw	r2,4(r19)
   1fd40:	15ffc51e 	bne	r2,r23,1fc58 <__alt_mem_Flash_flash_data+0xf401fc58>
   1fd44:	a8800017 	ldw	r2,0(r21)
   1fd48:	14ffd326 	beq	r2,r19,1fc98 <__alt_mem_Flash_flash_data+0xf401fc98>
   1fd4c:	003fc206 	br	1fc58 <__alt_mem_Flash_flash_data+0xf401fc58>
   1fd50:	98806317 	ldw	r2,396(r19)
   1fd54:	2084703a 	and	r2,r4,r2
   1fd58:	1000061e 	bne	r2,zero,1fd74 <__call_exitprocs+0x16c>
   1fd5c:	89400017 	ldw	r5,0(r17)
   1fd60:	9009883a 	mov	r4,r18
   1fd64:	183ee83a 	callr	r3
   1fd68:	003ff406 	br	1fd3c <__alt_mem_Flash_flash_data+0xf401fd3c>
   1fd6c:	9f000115 	stw	fp,4(r19)
   1fd70:	003fea06 	br	1fd1c <__alt_mem_Flash_flash_data+0xf401fd1c>
   1fd74:	89000017 	ldw	r4,0(r17)
   1fd78:	183ee83a 	callr	r3
   1fd7c:	003fef06 	br	1fd3c <__alt_mem_Flash_flash_data+0xf401fd3c>
   1fd80:	98800017 	ldw	r2,0(r19)
   1fd84:	982b883a 	mov	r21,r19
   1fd88:	1027883a 	mov	r19,r2
   1fd8c:	983fb61e 	bne	r19,zero,1fc68 <__alt_mem_Flash_flash_data+0xf401fc68>
   1fd90:	003fd106 	br	1fcd8 <__alt_mem_Flash_flash_data+0xf401fcd8>
   1fd94:	0005883a 	mov	r2,zero
   1fd98:	003ffa06 	br	1fd84 <__alt_mem_Flash_flash_data+0xf401fd84>

0001fd9c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1fd9c:	defffd04 	addi	sp,sp,-12
   1fda0:	df000215 	stw	fp,8(sp)
   1fda4:	df000204 	addi	fp,sp,8
   1fda8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1fdac:	008000b4 	movhi	r2,2
   1fdb0:	1091c644 	addi	r2,r2,18201
   1fdb4:	10000005 	stb	zero,0(r2)
   1fdb8:	e0bfff17 	ldw	r2,-4(fp)
   1fdbc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1fdc0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1fdc4:	10000226 	beq	r2,zero,1fdd0 <_exit+0x34>
    ALT_SIM_FAIL();
   1fdc8:	002af070 	cmpltui	zero,zero,43969
   1fdcc:	00000106 	br	1fdd4 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   1fdd0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1fdd4:	003fff06 	br	1fdd4 <__alt_mem_Flash_flash_data+0xf401fdd4>
