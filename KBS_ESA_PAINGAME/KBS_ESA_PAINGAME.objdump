
KBS_ESA_PAINGAME.elf:     file format elf32-littlenios2
KBS_ESA_PAINGAME.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000130c4 memsz 0x000130c4 flags r-x
    LOAD off    0x000140e4 vaddr 0x000130e4 paddr 0x00014fb4 align 2**12
         filesz 0x00001ed0 memsz 0x00001ed0 flags rw-
    LOAD off    0x00016e84 vaddr 0x00016e84 paddr 0x00016e84 align 2**12
         filesz 0x00000000 memsz 0x0000fc10 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000129a4  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004fc  00012be8  00012be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ed0  000130e4  00014fb4  000140e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000fc10  00016e84  00016e84  00016e84  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00026a94  00026a94  00015fb4  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  00015fb4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015fb4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cf0  00000000  00000000  00015fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00024a1e  00000000  00000000  00016cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008adf  00000000  00000000  0003b6e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000abb4  00000000  00000000  000441c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000034ec  00000000  00000000  0004ed7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000047ad  00000000  00000000  00052268  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000047e0  00000000  00000000  00056a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0005b1f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000005e8  00000000  00000000  0005b218  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00060ca7  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00060cad  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00060cb2  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00060cb3  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00060cb4  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00060cb8  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00060cbc  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00060cc0  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00060cc9  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00060cd2  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00060cdb  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  00060ce6  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  00060d44  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  0006b909  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00012be8 l    d  .rodata	00000000 .rodata
000130e4 l    d  .rwdata	00000000 .rwdata
00016e84 l    d  .bss	00000000 .bss
00026a94 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/rickert/Documents/GitHub/KBS_ESA_PAINGAME/KBS_ESA_PAINGAME_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Contoller.c
00000000 l    df *ABS*	00000000 Game.c
0000120c l     F .text	00000060 nummer1
0000126c l     F .text	000000f4 nummer2
00001360 l     F .text	000000cc nummer3
0000142c l     F .text	000000a4 nummer4
000014d0 l     F .text	000000f4 nummer5
000015c4 l     F .text	000000f4 nummer6
000016b8 l     F .text	0000007c nummer7
00001734 l     F .text	000000f4 nummer8
00001828 l     F .text	000000f4 nummer9
0000191c l     F .text	000000cc nummer0
00000000 l    df *ABS*	00000000 Menu.c
00000000 l    df *ABS*	00000000 Singleplayer.c
00000000 l    df *ABS*	00000000 Tutorial.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0001310c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000047a8 l     F .text	00000008 __fp_lock
000047b0 l     F .text	00000008 __fp_unlock
000047c4 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00005814 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00005940 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00005a60 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00005a8c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00005b8c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00005c80 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00005d64 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00005f5c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014f28 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000061b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00014f2c l     O .rwdata	00000004 lockid
00016f08 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00014f30 l     O .rwdata	00000004 lockid
00016f10 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00007bec l     F .text	00000044 OS_InitMisc
00007c30 l     F .text	00000068 OS_InitRdyList
00007d90 l     F .text	000000e0 OS_InitTCBList
00007b10 l     F .text	000000dc OS_InitEventList
00007c98 l     F .text	0000007c OS_InitTaskIdle
00007d14 l     F .text	0000007c OS_InitTaskStat
00007ff0 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00009df4 l     F .text	00000110 OS_FlagTaskRdy
00009b4c l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000ee24 l     F .text	00000038 alt_dev_reg
00013ae0 l     O .rwdata	0000106c JTAG_UART
00014b4c l     O .rwdata	00000030 AV_Config
00014b7c l     O .rwdata	00000030 Audio_Subsystem_Audio
00014bac l     O .rwdata	0000002c Char_LCD_16x2
00014bd8 l     O .rwdata	0000002c IrDA
00014c04 l     O .rwdata	0000002c Expansion_JP5
00014c30 l     O .rwdata	0000002c Green_LEDs
00014c5c l     O .rwdata	0000002c HEX3_HEX0
00014c88 l     O .rwdata	0000002c HEX7_HEX4
00014cb4 l     O .rwdata	0000002c Pushbuttons
00014ce0 l     O .rwdata	0000002c Red_LEDs
00014d0c l     O .rwdata	0000002c Slider_Switches
00014d38 l     O .rwdata	00000038 PS2_Port
00014d70 l     O .rwdata	00000038 PS2_Port_Dual
00014da8 l     O .rwdata	0000002c Serial_Port
00014dd4 l     O .rwdata	00000034 USB
00014e08 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
00014e50 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
00014ea4 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f50c l     F .text	000002a8 altera_avalon_jtag_uart_irq
0000f7b4 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000ff8c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000117a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011a14 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00011cfc l     F .text	00000050 alt_get_errno
00011d4c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00016f74 g     O .bss	00000004 alt_instruction_exception_handler
00014f7e g     O .rwdata	00000002 OSTaskNameSize
00005708 g     F .text	00000054 _isatty_r
00005e88 g     F .text	000000d4 alt_main
00002ccc g     F .text	000000a8 _puts_r
00026994 g     O .bss	00000100 alt_irq
00010b68 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
0000575c g     F .text	0000005c _lseek_r
0000b1e0 g     F .text	000000d0 OS_MemInit
00014fb4 g       *ABS*	00000000 __flash_rwdata_start
0000edc0 g     F .text	00000064 OSTimeSet
000100f8 g     F .text	0000003c alt_up_character_lcd_send_cmd
00006868 g     F .text	00000610 OSEventPendMulti
00026a94 g       *ABS*	00000000 __alt_heap_start
00012358 g     F .text	00000020 OSTaskCreateHook
00014f56 g     O .rwdata	00000002 OSMboxEn
00016ea8 g     O .bss	00000004 random
00006ecc g     F .text	0000007c OSIntEnter
00005498 g     F .text	0000005c __sseek
00004af8 g     F .text	00000010 __sinit
000114f0 g     F .text	00000100 alt_up_char_buffer_string
00010988 g     F .text	00000034 read_CE_bit
00014f66 g     O .rwdata	00000002 OSQEn
00004960 g     F .text	00000068 __sfmoreglue
0000653c g     F .text	000000d0 __malloc_unlock
000123b4 g     F .text	0000001c OSTaskStatHook
00010d0c g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
00011200 g     F .text	00000090 alt_up_rs232_read_fd
00016f18 g     O .bss	00000001 OSLockNesting
00001a5c g     F .text	000000ec menu
00014fa4 g     O .rwdata	00000002 OSDataSize
00016f19 g     O .bss	00000001 OSRunning
00011424 g     F .text	000000cc alt_up_char_buffer_draw
00016fa0 g     O .bss	00002000 Singleplayer_stk
00016e84 g     O .bss	00000004 counter3
00003ca8 g     F .text	0000015c memmove
000123ec g     F .text	0000001c OSInitHookBegin
00014f9c g     O .rwdata	00000002 OSTmrSize
00004ae0 g     F .text	00000018 _cleanup
00014ed8 g     O .rwdata	00000004 gameModeMenu
00016f1c g     O .bss	00000004 OSIdleCtr
00014ee0 g     O .rwdata	00000004 xRechts
0001210c g     F .text	00000020 altera_nios2_gen2_irq_init
000121d8 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00010084 g     F .text	00000074 get_DDRAM_addr
00008328 g     F .text	000002d4 OS_TCBInit
00014ef0 g     O .rwdata	00000004 yMenu
00000000 g     F .entry	0000001c __reset
00014fa2 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00014f42 g     O .rwdata	00000002 OSEventSize
00016f20 g     O .bss	00000001 OSPrioHighRdy
000056b0 g     F .text	00000058 _fstat_r
00012378 g     F .text	00000020 OSTaskDelHook
00016ef4 g     O .bss	00000004 errno
00005414 g     F .text	00000008 __seofread
000121b8 g       .text	00000000 OSStartHighRdy
00016eac g     O .bss	00000004 pixel_buffer_y
0000d6c4 g     F .text	000001ec OSTaskCreateExt
00009698 g     F .text	00000068 OSFlagPendGetFlagsRdy
00014f82 g     O .rwdata	00000002 OSTaskStatStkSize
00008788 g     F .text	00000308 OSFlagAccept
0000b8b4 g     F .text	000000b8 OSQFlush
0000b2b0 g     F .text	00000140 OSQAccept
00016f00 g     O .bss	00000004 alt_argv
00016eb0 g     O .bss	00000004 score1
0001ced0 g       *ABS*	00000000 _gp
0000d508 g     F .text	000001bc OSTaskCreate
0000cfc8 g     F .text	00000540 OSTaskChangePrio
00016f14 g     O .bss	00000004 alt_heapsem
00002510 g     F .text	0000003c del_middenlijn
000085fc g     F .text	0000018c OSDebugInit
0000d8b0 g     F .text	000003e0 OSTaskDel
00014ee4 g     O .rwdata	00000004 xBoven
00013960 g     O .rwdata	00000180 alt_fd_list
00014ef8 g     O .rwdata	00000004 onePress
00023770 g     O .bss	00000370 OSFlagTbl
000078fc g     F .text	000000b4 OS_EventTaskRemove
00011954 g     F .text	00000090 alt_find_dev
00003b70 g     F .text	00000138 memcpy
00014f6c g     O .rwdata	00000002 OSRdyTblSize
00010294 g     F .text	00000050 alt_up_character_lcd_write_fd
000115f0 g     F .text	0000005c alt_up_char_buffer_clear
000047b8 g     F .text	0000000c _cleanup_r
00011ad4 g     F .text	00000078 alt_io_redirect
00012be8 g       *ABS*	00000000 __DTOR_END__
00010814 g     F .text	00000090 alt_up_irda_write_fd
0001118c g     F .text	00000074 alt_up_rs232_read_data
00002d74 g     F .text	00000014 puts
000126fc g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000660c g     F .text	00000120 OSEventNameGet
00014f50 g     O .rwdata	00000002 OSFlagMax
00016ed8 g     O .bss	00000004 last
00006f48 g     F .text	000000f4 OSIntExit
00014f8a g     O .rwdata	00000002 OSTCBSize
00016f21 g     O .bss	00000001 OSPrioCur
00010610 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0000fa18 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00005930 g     F .text	00000008 .hidden __udivsi3
00005bdc g     F .text	000000a4 isatty
00014f70 g     O .rwdata	00000002 OSStkWidth
00014f64 g     O .rwdata	00000002 OSPtrSize
00014f44 g     O .rwdata	00000002 OSEventTblSize
000105b4 g     F .text	0000005c alt_up_irda_disable_read_interrupt
00014eec g     O .rwdata	00000004 xMenu
0001212c g       .text	00000000 OSCtxSw
00012670 g     F .text	0000008c alt_icache_flush
00016ef0 g     O .bss	00000004 __malloc_top_pad
00000648 g     F .text	00000104 moveDown
00016f24 g     O .bss	00000004 OSTCBList
00016e88 g     O .bss	00000004 gpio_dev
00016ef8 g     O .bss	00000004 alt_fd_list_lock
00002e20 g     F .text	000004c0 __sfvwrite_r
00023ae0 g     O .bss	00000c30 OSMemTbl
00016f28 g     O .bss	00000001 OSTickStepState
0000436c g     F .text	00000054 _sbrk_r
00018fa0 g     O .bss	00002000 menu_stk
00014f68 g     O .rwdata	00000002 OSQMax
00024710 g     O .bss	00000800 OSTaskStatStk
0000ae10 g     F .text	000000f8 OSMemNameGet
00014f48 g     O .rwdata	00000002 OSFlagEn
000057b8 g     F .text	0000005c _read_r
00014f8e g     O .rwdata	00000002 OSTimeTickHookEn
0000bdd4 g     F .text	00000168 OSQPost
00009f04 g     F .text	000000a0 OS_FlagUnlink
00014f20 g     O .rwdata	00000004 alt_max_fd
00011108 g     F .text	00000044 alt_up_rs232_check_parity
00007ec0 g     F .text	00000064 OS_MemCopy
00007f24 g     F .text	000000cc OS_Sched
000055ac g     F .text	000000f0 _fclose_r
0000ad20 g     F .text	000000f0 OSMemGet
0000aa1c g     F .text	00000110 OSMboxQuery
0000df90 g     F .text	000001c0 OSTaskNameSet
000109bc g     F .text	00000030 read_num_bytes_available
00004778 g     F .text	00000030 fflush
00016eec g     O .bss	00000004 __malloc_max_sbrked_mem
00016f2c g     O .bss	00000004 OSCtxSwCtr
000123d0 g     F .text	0000001c OSTimeTickHook
00011b4c g     F .text	000001b0 alt_irq_register
00014f52 g     O .rwdata	00000002 OSFlagNameSize
00010924 g     F .text	00000034 read_RI_bit
000079b0 g     F .text	000000fc OS_EventTaskRemoveMulti
00016e8c g     O .bss	00000004 controllerSem
000077b0 g     F .text	0000014c OS_EventTaskWaitMulti
00014f6a g     O .rwdata	00000002 OSQSize
00005db4 g     F .text	000000d4 lseek
0000c8d8 g     F .text	00000268 OSSemPend
00014f00 g     O .rwdata	00000004 _global_impure_ptr
00003e04 g     F .text	00000568 _realloc_r
00016ed4 g     O .bss	00000004 vorige
00014f54 g     O .rwdata	00000002 OSLowestPrio
00026a94 g       *ABS*	00000000 __bss_end
00012440 g     F .text	00000020 OSTCBInitHook
00014f9a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00012008 g     F .text	00000104 alt_tick
0000a7b0 g     F .text	00000110 OSMboxPost
00016e90 g     O .bss	00000004 counter1
00014f3c g     O .rwdata	00000002 OSEventEn
00014f96 g     O .rwdata	00000002 OSTmrCfgNameSize
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
00010a20 g     F .text	0000002c read_data_byte
00004b18 g     F .text	00000018 __fp_lock_all
00009d10 g     F .text	000000e4 OS_FlagInit
00011f70 g     F .text	00000098 alt_alarm_stop
00010958 g     F .text	00000030 read_RE_bit
00014f78 g     O .rwdata	00000002 OSTaskIdleStkSize
00016f68 g     O .bss	00000004 alt_irq_active
0000c4c0 g     F .text	000000b0 OSSemAccept
00002418 g     F .text	00000090 VGA_text
0000b020 g     F .text	000000d8 OSMemPut
00016eb4 g     O .bss	00000004 pixel_buffer_x
0000ab2c g     F .text	000001f4 OSMemCreate
00016f30 g     O .bss	00000004 OSIdleCtrMax
0001afa0 g     O .bss	00002000 controller1_stk
00010650 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
00013938 g     O .rwdata	00000028 alt_dev_null
00014f8c g     O .rwdata	00000002 OSTicksPerSec
00010528 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
000108e4 g     F .text	00000040 alt_up_parallel_port_open_dev
0001212c g       .text	00000000 OSIntCtxSw
00010bc4 g     F .text	00000074 alt_up_ps2_write_data_byte
00000dc8 g     F .text	0000015c endGame
0001178c g     F .text	0000001c alt_dcache_flush_all
00016f34 g     O .bss	00000004 OSTCBFreeList
00014fb4 g       *ABS*	00000000 __ram_rwdata_end
0000cb40 g     F .text	0000016c OSSemPendAbort
00014f18 g     O .rwdata	00000008 alt_dev_list
00006208 g     F .text	000000f8 write
00014f90 g     O .rwdata	00000002 OSVersionNbr
000130e4 g       *ABS*	00000000 __ram_rodata_end
00005adc g     F .text	000000b0 fstat
00011290 g     F .text	00000094 alt_up_rs232_write_fd
00001b48 g     F .text	00000380 selecteerMenu
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00014f38 g     O .rwdata	00000004 OSEndiannessTest
00005938 g     F .text	00000008 .hidden __umodsi3
00014f4a g     O .rwdata	00000002 OSFlagGrpSize
00000280 g     F .text	000000dc controllers
00026a94 g       *ABS*	00000000 end
00010f00 g     F .text	00000098 alt_up_ps2_write_fd
0001068c g     F .text	00000044 alt_up_irda_check_parity
00011364 g     F .text	00000080 alt_up_char_buffer_init
000130e4 g     O .rwdata	00000028 nummer
00002088 g     F .text	000000f8 teken_menu
0000f3cc g     F .text	00000140 altera_avalon_jtag_uart_init
00008184 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000074c g     F .text	00000458 Game
00014ed4 g     O .rwdata	00000004 check
00012be8 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00010004 g     F .text	00000080 alt_avalon_timer_sc_init
0000fccc g     F .text	000002c0 altera_avalon_jtag_uart_write
00004b08 g     F .text	00000004 __sfp_lock_acquire
000019e8 g     F .text	00000074 exec
00003a88 g     F .text	000000e8 memchr
00007e70 g     F .text	00000050 OS_MemClr
000101a8 g     F .text	00000078 alt_up_character_lcd_write
000121fc g     F .text	0000015c OSTaskStkInit
00004c6c g     F .text	000002f0 _free_r
0000750c g     F .text	00000198 OS_EventTaskRdy
00012a18 g     F .text	00000194 __call_exitprocs
00016f38 g     O .bss	00000001 OSCPUUsage
00014f08 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
000025bc g     F .text	0000003c deleteNummer
00016f6c g     O .bss	00000004 _alt_tick_rate
0000b96c g     F .text	000002fc OSQPend
0000e8bc g     F .text	00000148 OSTimeDly
0001cfa0 g     O .bss	00002000 controller2_stk
00016f70 g     O .bss	00000004 _alt_nticks
00005fac g     F .text	000000fc read
0000ee90 g     F .text	000003d8 alt_sys_init
000103e0 g     F .text	00000088 alt_up_character_lcd_shift_display
00012904 g     F .text	00000114 __register_exitproc
00016f39 g     O .bss	00000001 OSTaskCtr
00010e20 g     F .text	00000054 alt_up_ps2_clear_fifo
000110cc g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00016ea4 g     O .bss	00000004 score2
00016e94 g     O .bss	00000004 MailBox2
00002364 g     F .text	000000b4 VGA_box
0000ea04 g     F .text	00000168 OSTimeDlyHMSM
00000f24 g     F .text	000002e8 Singleplayer
00010468 g     F .text	0000008c alt_up_character_lcd_erase_pos
0000f8c4 g     F .text	00000068 altera_avalon_jtag_uart_close
000130e4 g       *ABS*	00000000 __ram_rwdata_start
00012be8 g       *ABS*	00000000 __ram_rodata_start
00016f78 g     O .bss	00000028 __malloc_current_mallinfo
00014f3e g     O .rwdata	00000002 OSEventMax
0000ccac g     F .text	00000110 OSSemPost
000070c4 g     F .text	000000d8 OSSchedUnlock
000024a8 g     F .text	00000068 draw_middenlijn
0000f268 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00012574 g     F .text	000000fc alt_get_fd
00016f3c g     O .bss	00000004 OSMemFreeList
00007208 g     F .text	000000ac OSStatInit
00009a88 g     F .text	000000c4 OSFlagQuery
00014f74 g     O .rwdata	00000002 OSTaskCreateExtEn
00005558 g     F .text	00000054 _close_r
000127e4 g     F .text	0000007c memcmp
000074f0 g     F .text	0000001c OS_Dummy
0000f328 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00026a94 g       *ABS*	00000000 __alt_stack_base
0000f378 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00016edc g     O .bss	00000004 changed
0001055c g     F .text	00000058 alt_up_irda_enable_read_interrupt
000043c0 g     F .text	00000154 __swsetup_r
00024f10 g     O .bss	000001e0 OSQTbl
0000035c g     F .text	000001a0 controller
000049c8 g     F .text	00000118 __sfp
00013530 g     O .rwdata	00000408 __malloc_av_
00016eb8 g     O .bss	00000004 ALT_y
00004b14 g     F .text	00000004 __sinit_lock_release
00016f40 g     O .bss	00000004 OSTCBHighRdy
000053c0 g     F .text	00000054 __sread
00016f44 g     O .bss	00000004 OSQFreeList
00011030 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
00012460 g     F .text	00000114 alt_find_file
000117f8 g     F .text	000000a4 alt_dev_llist_insert
0000641c g     F .text	00000120 __malloc_lock
00006108 g     F .text	000000b0 sbrk
00016ebc g     O .bss	00000004 ALT_inc_y
0000672c g     F .text	0000013c OSEventNameSet
0000471c g     F .text	0000005c _fflush_r
00016f48 g     O .bss	00000001 OSRdyGrp
00016e84 g       *ABS*	00000000 __bss_start
0000529c g     F .text	00000124 memset
00002180 g     F .text	000001e4 main
00016f04 g     O .bss	00000004 alt_envp
00016ee8 g     O .bss	00000004 __malloc_max_total_mem
000113e4 g     F .text	00000040 alt_up_char_buffer_open_dev
0000f2c8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00012e14 g     O .rodata	00000100 OSUnMapTbl
00014f6e g     O .rwdata	00000002 OSSemEn
00010358 g     F .text	00000088 alt_up_character_lcd_shift_cursor
00009700 g     F .text	00000388 OSFlagPost
000054f4 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000569c g     F .text	00000014 fclose
000076a4 g     F .text	0000010c OS_EventTaskWait
00010db0 g     F .text	00000070 alt_up_ps2_read_data_byte
00016ee4 g     O .bss	00000004 timeout
00008260 g     F .text	000000c8 OS_TaskStatStkChk
0000dc90 g     F .text	00000158 OSTaskDelReq
000032e0 g     F .text	000007a8 _malloc_r
00014f24 g     O .rwdata	00000004 alt_errno
0000719c g     F .text	0000006c OSStart
000063c0 g     F .text	0000005c __env_unlock
00004f5c g     F .text	000000c4 _fwalk
0000e150 g     F .text	000001f8 OSTaskResume
0000b0f8 g     F .text	000000e8 OSMemQuery
00014f80 g     O .rwdata	00000002 OSTaskStatEn
0001efa0 g     O .bss	00002000 Game_stk
000106d0 g     F .text	00000040 alt_up_irda_write_data
00014f5a g     O .rwdata	00000002 OSMemMax
0000bf3c g     F .text	00000170 OSQPostFront
00010f98 g     F .text	00000040 alt_up_ps2_open_dev
00005880 g     F .text	00000054 .hidden __divsi3
00016f49 g     O .bss	00000003 OSRdyTbl
00014f34 g     O .rwdata	00000002 OSDebugEn
00010168 g     F .text	00000040 alt_up_character_lcd_open_dev
00004b48 g     F .text	00000124 _malloc_trim_r
00010b10 g     F .text	00000058 alt_up_ps2_enable_read_interrupt
00012be8 g       *ABS*	00000000 __CTOR_END__
00014f4c g     O .rwdata	00000002 OSFlagNodeSize
00014f94 g     O .rwdata	00000002 OSTmrCfgMax
00010134 g     F .text	00000034 alt_up_character_lcd_init
00012860 g     F .text	000000a4 strcmp
0000b3f0 g     F .text	000001fc OSQCreate
0000dde8 g     F .text	000001a8 OSTaskNameGet
00012be8 g       *ABS*	00000000 __flash_rodata_start
0000c0ac g     F .text	0000020c OSQPostOpt
000072b4 g     F .text	0000021c OSTimeTick
00014f7c g     O .rwdata	00000002 OSTaskMax
00012be8 g       *ABS*	00000000 __DTOR_LIST__
0000c570 g     F .text	00000100 OSSemCreate
00014fa0 g     O .rwdata	00000002 OSTmrWheelSize
00011324 g     F .text	00000040 alt_up_rs232_open_dev
00016ec0 g     O .bss	00000004 gameSem
00014f76 g     O .rwdata	00000002 OSTaskDelEn
0000cdbc g     F .text	00000110 OSSemQuery
0000b5ec g     F .text	000002c8 OSQDel
0000bc68 g     F .text	0000016c OSQPendAbort
0000ee5c g     F .text	00000034 alt_irq_init
000060a8 g     F .text	00000060 alt_release_fd
000004fc g     F .text	0000004c checkID
000109ec g     F .text	00000034 read_data_valid
000104f4 g     F .text	00000034 alt_up_character_lcd_cursor_off
00010ca8 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00012798 g     F .text	00000014 atexit
0000254c g     F .text	00000070 del_number
000054fc g     F .text	0000005c _write_r
0000703c g     F .text	00000088 OSSchedLock
00008a90 g     F .text	00000128 OSFlagCreate
00014f04 g     O .rwdata	00000004 _impure_ptr
00016efc g     O .bss	00000004 alt_argc
00004514 g     F .text	00000208 __sflush_r
000118f8 g     F .text	0000005c _do_dtors
00014f46 g     O .rwdata	00000002 OSEventMultiEn
00008bb8 g     F .text	00000270 OSFlagDel
00016f4c g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
0000a644 g     F .text	0000016c OSMboxPendAbort
00014f92 g     O .rwdata	00000002 OSTmrEn
000090a8 g     F .text	000005f0 OSFlagPend
00004b30 g     F .text	00000018 __fp_unlock_all
00014f10 g     O .rwdata	00000008 alt_fs_list
00008060 g     F .text	00000074 OS_StrCopy
00010fd8 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0001114c g     F .text	00000040 alt_up_rs232_write_data
00000548 g     F .text	00000100 moveUp
00014f5c g     O .rwdata	00000002 OSMemNameSize
00016ec4 g     O .bss	00000004 ALT_x1
00012408 g     F .text	0000001c OSInitHookEnd
00020fa0 g     O .bss	000007d0 Messages
000025f8 g     F .text	00000674 draw_number
00000020 g       *ABS*	00000000 __ram_exceptions_start
00014f88 g     O .rwdata	00000002 OSTCBPrioTblMax
00014f84 g     O .rwdata	00000002 OSTaskStatStkChkEn
0000a03c g     F .text	000000fc OSMboxCreate
00014f58 g     O .rwdata	00000002 OSMemEn
00014ed0 g     O .rwdata	00000004 first
00014f62 g     O .rwdata	00000002 OSMutexEn
00014fb4 g       *ABS*	00000000 _edata
00014efc g     O .rwdata	00000004 interval_timer_ptr
00026a94 g       *ABS*	00000000 _end
00016f50 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000f92c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0000eb6c g     F .text	000001f0 OSTimeDlyResume
00008f58 g     F .text	00000150 OSFlagNameSet
00001f08 g     F .text	000000a0 clearText
0000a3a0 g     F .text	000002a4 OSMboxPend
0000e348 g     F .text	000001c8 OSTaskStkChk
00014f5e g     O .rwdata	00000002 OSMemSize
0000541c g     F .text	0000007c __swrite
00014f0c g     O .rwdata	00000004 __malloc_trim_threshold
00016f54 g     O .bss	00000004 OSTCBCur
000127ac g     F .text	00000038 exit
00002c6c g     F .text	00000060 checkIDScore
00010710 g     F .text	00000074 alt_up_irda_read_data
00014f60 g     O .rwdata	00000002 OSMemTblSize
00005020 g     F .text	000000c4 _fwalk_reent
00010a4c g     F .text	000000c4 alt_up_ps2_init
000058d4 g     F .text	0000005c .hidden __modsi3
00021770 g     O .bss	00002000 menu_stk2
00009fa4 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004b0c g     F .text	00000004 __sfp_lock_release
00006e78 g     F .text	00000054 OSInit
0000e724 g     F .text	0000012c OSTaskQuery
00010220 g     F .text	00000074 alt_up_character_lcd_string
0000c414 g     F .text	000000ac OS_QInit
000080d4 g     F .text	00000054 OS_StrLen
000108a4 g     F .text	00000040 alt_up_irda_open_dev
0000af08 g     F .text	00000118 OSMemNameSet
00000ba4 g     F .text	00000224 gescoord
00014f7a g     O .rwdata	00000002 OSTaskProfileEn
00016f58 g     O .bss	00000004 OSTime
00016e98 g     O .bss	00000004 Flags
00001fa8 g     F .text	00000058 tekenBox
000250f0 g     O .bss	00000800 OSTaskIdleStk
00012bac g     F .text	0000003c _exit
00016ec8 g     O .bss	00000004 ALT_inc_x
0000a8c0 g     F .text	0000015c OSMboxPostOpt
0001164c g     F .text	00000140 alt_alarm_start
00008e28 g     F .text	00000130 OSFlagNameGet
0000ed5c g     F .text	00000064 OSTimeGet
000050e4 g     F .text	000001b8 __smakebuf_r
00010c38 g     F .text	00000070 alt_up_ps2_wait_for_ack
00002d88 g     F .text	00000098 strlen
00012398 g     F .text	0000001c OSTaskSwHook
00011e18 g     F .text	00000158 open
000258f0 g     O .bss	00000b40 OSEventTbl
00026430 g     O .bss	00000510 OSTCBTbl
0000cecc g     F .text	000000fc OSSemSet
00014ef4 g     O .rwdata	00000004 eenkeer
00001ec8 g     F .text	00000040 clearScreen
00016ecc g     O .bss	00000004 ALT_x2
000119e4 g     F .text	00000030 alt_icache_flush_all
000102e4 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00014fa8 g     O .rwdata	00000004 alt_priority_mask
0000c670 g     F .text	00000268 OSSemDel
00016f5c g     O .bss	00000004 OSFlagFreeList
00014f40 g     O .rwdata	00000002 OSEventNameSize
0000a138 g     F .text	00000268 OSMboxDel
00016f60 g     O .bss	00000001 OSStatRdy
00016e9c g     O .bss	00000004 MailBox
00026940 g     O .bss	00000054 OSTCBPrioTbl
00006300 g     F .text	000000c0 __env_lock
00010e74 g     F .text	0000008c alt_up_ps2_read_fd
00014f86 g     O .rwdata	00000002 OSTaskSwHookEn
00014edc g     O .rwdata	00000004 xLinks
00010784 g     F .text	00000090 alt_up_irda_read_fd
00014fac g     O .rwdata	00000008 alt_alarm_list
00014f4e g     O .rwdata	00000002 OSFlagWidth
0001189c g     F .text	0000005c _do_ctors
0001108c g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00005990 g     F .text	000000d0 close
00016f0c g     O .bss	00000004 alt_envsem
00016f64 g     O .bss	00000004 OSIdleCtrRun
00014ee8 g     O .rwdata	00000004 xOnder
000074d0 g     F .text	00000020 OSVersion
00014f98 g     O .rwdata	00000002 OSTmrCfgWheelSize
00005ce4 g     F .text	00000080 alt_load
0000e850 g     F .text	0000006c OS_TaskStkClr
00002000 g     F .text	00000088 tekenBox2
00014f72 g     O .rwdata	00000002 OSTaskCreateEn
00016ee0 g     O .bss	00000004 menuSem
00007aac g     F .text	00000064 OS_EventWaitListInit
00012424 g     F .text	0000001c OSTaskIdleHook
00016ed0 g     O .bss	00000004 X
00000000  w      *UND*	00000000 free
00004b10 g     F .text	00000004 __sinit_lock_acquire
0000e510 g     F .text	00000214 OSTaskSuspend
00016ea0 g     O .bss	00000004 counter2
00008128 g     F .text	0000005c OS_TaskIdle
00014f9e g     O .rwdata	00000002 OSTmrTblSize
0000c2b8 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0006ecc0 	call	6ecc <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	109a6504 	addi	r2,r2,27028
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	109a6504 	addi	r2,r2,27028
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0006f480 	call	6f48 <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a82917 	ldw	r2,-24412(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a82917 	ldw	r2,-24412(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     250:	d6b3b414 	ori	gp,gp,52944
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	109ba114 	ori	r2,r2,28292

    movhi r3, %hi(__bss_end)
     25c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     260:	18daa514 	ori	r3,r3,27284

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	0005ce40 	call	5ce4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	0005e880 	call	5e88 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <controllers>:
}Balk;

alt_up_parallel_port_dev *gpio_dev; //	gpio device


void controllers(void* pdata) {
     280:	defff804 	addi	sp,sp,-32
     284:	dfc00715 	stw	ra,28(sp)
     288:	df000615 	stw	fp,24(sp)
     28c:	df000604 	addi	fp,sp,24
     290:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	int ID = (int*) pdata;
     294:	e0bfff17 	ldw	r2,-4(fp)
     298:	e0bffc15 	stw	r2,-16(fp)
	int hoogte = 50;
     29c:	00800c84 	movi	r2,50
     2a0:	e0bffb15 	stw	r2,-20(fp)

	Balk balkje;

	while (1) {
		OSFlagPend(Flags, C1_Flag + C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     2a4:	d0e7f217 	ldw	r3,-24632(gp)
     2a8:	e0bffd04 	addi	r2,fp,-12
     2ac:	d8800015 	stw	r2,0(sp)
     2b0:	1809883a 	mov	r4,r3
     2b4:	01400304 	movi	r5,12
     2b8:	01800044 	movi	r6,1
     2bc:	000f883a 	mov	r7,zero
     2c0:	00090a80 	call	90a8 <OSFlagPend>
		balkje.Hoogte = hoogte;
     2c4:	e0bffb17 	ldw	r2,-20(fp)
     2c8:	e0bffe15 	stw	r2,-8(fp)

		if (controller(ID) == 1) {
     2cc:	e13ffc17 	ldw	r4,-16(fp)
     2d0:	000035c0 	call	35c <controller>
     2d4:	10800058 	cmpnei	r2,r2,1
     2d8:	1000051e 	bne	r2,zero,2f0 <controllers+0x70>
			hoogte = moveDown(ID, hoogte);
     2dc:	e13ffc17 	ldw	r4,-16(fp)
     2e0:	e17ffb17 	ldw	r5,-20(fp)
     2e4:	00006480 	call	648 <moveDown>
     2e8:	e0bffb15 	stw	r2,-20(fp)
     2ec:	00000706 	br	30c <controllers+0x8c>
		} else if (controller(ID) == 0) {
     2f0:	e13ffc17 	ldw	r4,-16(fp)
     2f4:	000035c0 	call	35c <controller>
     2f8:	1000041e 	bne	r2,zero,30c <controllers+0x8c>
			hoogte = moveUp(ID, hoogte);
     2fc:	e13ffc17 	ldw	r4,-16(fp)
     300:	e17ffb17 	ldw	r5,-20(fp)
     304:	00005480 	call	548 <moveUp>
     308:	e0bffb15 	stw	r2,-20(fp)
		}

		if(ID == 1){
     30c:	e0bffc17 	ldw	r2,-16(fp)
     310:	10800058 	cmpnei	r2,r2,1
     314:	1000061e 	bne	r2,zero,330 <controllers+0xb0>
			OSMboxPost(MailBox, (void*)&balkje);
     318:	d0e7f317 	ldw	r3,-24628(gp)
     31c:	e0bffe04 	addi	r2,fp,-8
     320:	1809883a 	mov	r4,r3
     324:	100b883a 	mov	r5,r2
     328:	000a7b00 	call	a7b0 <OSMboxPost>
     32c:	00000806 	br	350 <controllers+0xd0>
		}else if(ID == 2){
     330:	e0bffc17 	ldw	r2,-16(fp)
     334:	10800098 	cmpnei	r2,r2,2
     338:	1000051e 	bne	r2,zero,350 <controllers+0xd0>
			OSMboxPost(MailBox2, (void*)&balkje);
     33c:	d0e7f117 	ldw	r3,-24636(gp)
     340:	e0bffe04 	addi	r2,fp,-8
     344:	1809883a 	mov	r4,r3
     348:	100b883a 	mov	r5,r2
     34c:	000a7b00 	call	a7b0 <OSMboxPost>
		}

		OSTimeDly(1);
     350:	01000044 	movi	r4,1
     354:	000e8bc0 	call	e8bc <OSTimeDly>
	}
     358:	003fd206 	br	2a4 <__alt_mem_Flash_flash_data+0xf40002a4>

0000035c <controller>:

}

int controller(int ID) {
     35c:	defff804 	addi	sp,sp,-32
     360:	dfc00715 	stw	ra,28(sp)
     364:	df000615 	stw	fp,24(sp)
     368:	df000604 	addi	fp,sp,24
     36c:	e13fff15 	stw	r4,-4(fp)
	alt_up_parallel_port_dev * KEY_ptr = alt_up_parallel_port_open_dev(
     370:	01000074 	movhi	r4,1
     374:	210afa04 	addi	r4,r4,11240
     378:	00108e40 	call	108e4 <alt_up_parallel_port_open_dev>
     37c:	e0bffa15 	stw	r2,-24(fp)
			"/dev/Pushbuttons");
	alt_up_parallel_port_dev * SW_switch_ptr = alt_up_parallel_port_open_dev(
     380:	01000074 	movhi	r4,1
     384:	210aff04 	addi	r4,r4,11260
     388:	00108e40 	call	108e4 <alt_up_parallel_port_open_dev>
     38c:	e0bffb15 	stw	r2,-20(fp)
			"/dev/Slider_Switches");
	gpio_dev = alt_up_parallel_port_open_dev("/dev/Expansion_JP5");		//	DE2-115 gpio
     390:	01000074 	movhi	r4,1
     394:	210b0504 	addi	r4,r4,11284
     398:	00108e40 	call	108e4 <alt_up_parallel_port_open_dev>
     39c:	d0a7ee15 	stw	r2,-24648(gp)
	alt_up_parallel_port_set_port_direction(gpio_dev, 0x00000001);		// 1-0-1-1	(1 = output; 0 = input)
     3a0:	d0a7ee17 	ldw	r2,-24648(gp)
     3a4:	10800a17 	ldw	r2,40(r2)
     3a8:	10800104 	addi	r2,r2,4
     3ac:	1007883a 	mov	r3,r2
     3b0:	00800044 	movi	r2,1
     3b4:	18800035 	stwio	r2,0(r3)

	int KEY_value, SW_value, gpio_values;
	INT8U err;

	SW_value = alt_up_parallel_port_read_data(SW_switch_ptr);
     3b8:	e0bffb17 	ldw	r2,-20(fp)
     3bc:	10800a17 	ldw	r2,40(r2)
     3c0:	10800037 	ldwio	r2,0(r2)
     3c4:	e0bffc15 	stw	r2,-16(fp)
	KEY_value = alt_up_parallel_port_read_data(KEY_ptr); // read the pushbutton KEY values
     3c8:	e0bffa17 	ldw	r2,-24(fp)
     3cc:	10800a17 	ldw	r2,40(r2)
     3d0:	10800037 	ldwio	r2,0(r2)
     3d4:	e0bffd15 	stw	r2,-12(fp)
	gpio_values = alt_up_parallel_port_read_data(gpio_dev);
     3d8:	d0a7ee17 	ldw	r2,-24648(gp)
     3dc:	10800a17 	ldw	r2,40(r2)
     3e0:	10800037 	ldwio	r2,0(r2)
     3e4:	e0bffe15 	stw	r2,-8(fp)

	//printf("SW_value is: %d\n", SW_value);

	if (ID == 2) {
     3e8:	e0bfff17 	ldw	r2,-4(fp)
     3ec:	10800098 	cmpnei	r2,r2,2
     3f0:	1000131e 	bne	r2,zero,440 <controller+0xe4>
		if (KEY_value != 0) {
     3f4:	e0bffd17 	ldw	r2,-12(fp)
     3f8:	10000f26 	beq	r2,zero,438 <controller+0xdc>
			if (KEY_value == 8) {
     3fc:	e0bffd17 	ldw	r2,-12(fp)
     400:	10800218 	cmpnei	r2,r2,8
     404:	1000021e 	bne	r2,zero,410 <controller+0xb4>
				return 1;
     408:	00800044 	movi	r2,1
     40c:	00003606 	br	4e8 <controller+0x18c>
			}
			if (KEY_value == 4) {
     410:	e0bffd17 	ldw	r2,-12(fp)
     414:	10800118 	cmpnei	r2,r2,4
     418:	1000021e 	bne	r2,zero,424 <controller+0xc8>
				return 0;
     41c:	0005883a 	mov	r2,zero
     420:	00003106 	br	4e8 <controller+0x18c>
			}
			if (KEY_value == 2) {
     424:	e0bffd17 	ldw	r2,-12(fp)
     428:	10800098 	cmpnei	r2,r2,2
     42c:	10002b1e 	bne	r2,zero,4dc <controller+0x180>
				return 2;
     430:	00800084 	movi	r2,2
     434:	00002c06 	br	4e8 <controller+0x18c>
			}
		} else {
			return 3;
     438:	008000c4 	movi	r2,3
     43c:	00002a06 	br	4e8 <controller+0x18c>
		}

	} else if (ID == 1) {
     440:	e0bfff17 	ldw	r2,-4(fp)
     444:	10800058 	cmpnei	r2,r2,1
     448:	10000e1e 	bne	r2,zero,484 <controller+0x128>
		if (SW_value != 0) {
     44c:	e0bffc17 	ldw	r2,-16(fp)
     450:	10000a26 	beq	r2,zero,47c <controller+0x120>
			if (SW_value == 131072) {
     454:	e0fffc17 	ldw	r3,-16(fp)
     458:	008000b4 	movhi	r2,2
     45c:	1880021e 	bne	r3,r2,468 <controller+0x10c>
				return 0;
     460:	0005883a 	mov	r2,zero
     464:	00002006 	br	4e8 <controller+0x18c>
			}else if(SW_value == 4){
     468:	e0bffc17 	ldw	r2,-16(fp)
     46c:	10800118 	cmpnei	r2,r2,4
     470:	10001a1e 	bne	r2,zero,4dc <controller+0x180>
				return 4;
     474:	00800104 	movi	r2,4
     478:	00001b06 	br	4e8 <controller+0x18c>
			}
		} else {
			return 1;
     47c:	00800044 	movi	r2,1
     480:	00001906 	br	4e8 <controller+0x18c>
		}
	} else if(ID == 3){
     484:	e0bfff17 	ldw	r2,-4(fp)
     488:	108000d8 	cmpnei	r2,r2,3
     48c:	1000131e 	bne	r2,zero,4dc <controller+0x180>
		if(gpio_values != 0){
     490:	e0bffe17 	ldw	r2,-8(fp)
     494:	10000f26 	beq	r2,zero,4d4 <controller+0x178>
			if(gpio_values == -1){
     498:	e0bffe17 	ldw	r2,-8(fp)
     49c:	10bfffd8 	cmpnei	r2,r2,-1
     4a0:	1000021e 	bne	r2,zero,4ac <controller+0x150>
				return 1;
     4a4:	00800044 	movi	r2,1
     4a8:	00000f06 	br	4e8 <controller+0x18c>
			} else if(gpio_values == -2){
     4ac:	e0bffe17 	ldw	r2,-8(fp)
     4b0:	10bfff98 	cmpnei	r2,r2,-2
     4b4:	1000021e 	bne	r2,zero,4c0 <controller+0x164>
				return 2;
     4b8:	00800084 	movi	r2,2
     4bc:	00000a06 	br	4e8 <controller+0x18c>
			} else if(gpio_values == -3){
     4c0:	e0bffe17 	ldw	r2,-8(fp)
     4c4:	10bfff58 	cmpnei	r2,r2,-3
     4c8:	1000041e 	bne	r2,zero,4dc <controller+0x180>
				return 3;
     4cc:	008000c4 	movi	r2,3
     4d0:	00000506 	br	4e8 <controller+0x18c>
			}
		}else{
			return 0;
     4d4:	0005883a 	mov	r2,zero
     4d8:	00000306 	br	4e8 <controller+0x18c>
		}
	}
	gpio_values &= 0x80000000;		//	negeer alle andere bits, die zijn waarschijnlijk HOOG !
     4dc:	e0bffe17 	ldw	r2,-8(fp)
     4e0:	10a0002c 	andhi	r2,r2,32768
     4e4:	e0bffe15 	stw	r2,-8(fp)

}
     4e8:	e037883a 	mov	sp,fp
     4ec:	dfc00117 	ldw	ra,4(sp)
     4f0:	df000017 	ldw	fp,0(sp)
     4f4:	dec00204 	addi	sp,sp,8
     4f8:	f800283a 	ret

000004fc <checkID>:

int checkID(int ID) {
     4fc:	defffe04 	addi	sp,sp,-8
     500:	df000115 	stw	fp,4(sp)
     504:	df000104 	addi	fp,sp,4
     508:	e13fff15 	stw	r4,-4(fp)
	if (ID == 1) {
     50c:	e0bfff17 	ldw	r2,-4(fp)
     510:	10800058 	cmpnei	r2,r2,1
     514:	1000021e 	bne	r2,zero,520 <checkID+0x24>
		return 15;
     518:	008003c4 	movi	r2,15
     51c:	00000606 	br	538 <checkID+0x3c>
	} else if (ID == 2) {
     520:	e0bfff17 	ldw	r2,-4(fp)
     524:	10800098 	cmpnei	r2,r2,2
     528:	1000021e 	bne	r2,zero,534 <checkID+0x38>
		return 300;
     52c:	00804b04 	movi	r2,300
     530:	00000106 	br	538 <checkID+0x3c>

	}
	return 0;
     534:	0005883a 	mov	r2,zero
}
     538:	e037883a 	mov	sp,fp
     53c:	df000017 	ldw	fp,0(sp)
     540:	dec00104 	addi	sp,sp,4
     544:	f800283a 	ret

00000548 <moveUp>:

int moveUp(int ID, int current) {
     548:	defff904 	addi	sp,sp,-28
     54c:	dfc00615 	stw	ra,24(sp)
     550:	df000515 	stw	fp,20(sp)
     554:	df000504 	addi	fp,sp,20
     558:	e13ffe15 	stw	r4,-8(fp)
     55c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     560:	e0bfff17 	ldw	r2,-4(fp)
     564:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     568:	e13ffe17 	ldw	r4,-8(fp)
     56c:	00004fc0 	call	4fc <checkID>
     570:	e0bffd15 	stw	r2,-12(fp)

	if (boven >= 4 && boven <= 184) {
     574:	e0bffc17 	ldw	r2,-16(fp)
     578:	10800110 	cmplti	r2,r2,4
     57c:	10001c1e 	bne	r2,zero,5f0 <moveUp+0xa8>
     580:	e0bffc17 	ldw	r2,-16(fp)
     584:	10802e48 	cmpgei	r2,r2,185
     588:	1000191e 	bne	r2,zero,5f0 <moveUp+0xa8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
     58c:	e0bffd17 	ldw	r2,-12(fp)
     590:	11800144 	addi	r6,r2,5
     594:	e0bffc17 	ldw	r2,-16(fp)
     598:	10c00044 	addi	r3,r2,1
     59c:	00803fc4 	movi	r2,255
     5a0:	d8800015 	stw	r2,0(sp)
     5a4:	e13ffd17 	ldw	r4,-12(fp)
     5a8:	e17ffc17 	ldw	r5,-16(fp)
     5ac:	180f883a 	mov	r7,r3
     5b0:	00023640 	call	2364 <VGA_box>
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
     5b4:	e0bffc17 	ldw	r2,-16(fp)
     5b8:	11400c84 	addi	r5,r2,50
     5bc:	e0bffd17 	ldw	r2,-12(fp)
     5c0:	10c00144 	addi	r3,r2,5
     5c4:	e0bffc17 	ldw	r2,-16(fp)
     5c8:	10800cc4 	addi	r2,r2,51
     5cc:	d8000015 	stw	zero,0(sp)
     5d0:	e13ffd17 	ldw	r4,-12(fp)
     5d4:	180d883a 	mov	r6,r3
     5d8:	100f883a 	mov	r7,r2
     5dc:	00023640 	call	2364 <VGA_box>
		boven--;
     5e0:	e0bffc17 	ldw	r2,-16(fp)
     5e4:	10bfffc4 	addi	r2,r2,-1
     5e8:	e0bffc15 	stw	r2,-16(fp)
int moveUp(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven >= 4 && boven <= 184) {
     5ec:	00001006 	br	630 <moveUp+0xe8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
		boven--;
	} else if (boven > 184) {
     5f0:	e0bffc17 	ldw	r2,-16(fp)
     5f4:	10802e50 	cmplti	r2,r2,185
     5f8:	10000d1e 	bne	r2,zero,630 <moveUp+0xe8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
     5fc:	e0bffd17 	ldw	r2,-12(fp)
     600:	11800144 	addi	r6,r2,5
     604:	e0bffc17 	ldw	r2,-16(fp)
     608:	10c00044 	addi	r3,r2,1
     60c:	00803fc4 	movi	r2,255
     610:	d8800015 	stw	r2,0(sp)
     614:	e13ffd17 	ldw	r4,-12(fp)
     618:	e17ffc17 	ldw	r5,-16(fp)
     61c:	180f883a 	mov	r7,r3
     620:	00023640 	call	2364 <VGA_box>
		boven--;
     624:	e0bffc17 	ldw	r2,-16(fp)
     628:	10bfffc4 	addi	r2,r2,-1
     62c:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     630:	e0bffc17 	ldw	r2,-16(fp)

}
     634:	e037883a 	mov	sp,fp
     638:	dfc00117 	ldw	ra,4(sp)
     63c:	df000017 	ldw	fp,0(sp)
     640:	dec00204 	addi	sp,sp,8
     644:	f800283a 	ret

00000648 <moveDown>:
int moveDown(int ID, int current) {
     648:	defff904 	addi	sp,sp,-28
     64c:	dfc00615 	stw	ra,24(sp)
     650:	df000515 	stw	fp,20(sp)
     654:	df000504 	addi	fp,sp,20
     658:	e13ffe15 	stw	r4,-8(fp)
     65c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     660:	e0bfff17 	ldw	r2,-4(fp)
     664:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     668:	e13ffe17 	ldw	r4,-8(fp)
     66c:	00004fc0 	call	4fc <checkID>
     670:	e0bffd15 	stw	r2,-12(fp)

	if (boven <= 184 && boven >= 4) {
     674:	e0bffc17 	ldw	r2,-16(fp)
     678:	10802e48 	cmpgei	r2,r2,185
     67c:	10001c1e 	bne	r2,zero,6f0 <moveDown+0xa8>
     680:	e0bffc17 	ldw	r2,-16(fp)
     684:	10800110 	cmplti	r2,r2,4
     688:	1000191e 	bne	r2,zero,6f0 <moveDown+0xa8>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
     68c:	e0bffc17 	ldw	r2,-16(fp)
     690:	11400c84 	addi	r5,r2,50
     694:	e0bffd17 	ldw	r2,-12(fp)
     698:	11800144 	addi	r6,r2,5
     69c:	e0bffc17 	ldw	r2,-16(fp)
     6a0:	10c00cc4 	addi	r3,r2,51
     6a4:	00803fc4 	movi	r2,255
     6a8:	d8800015 	stw	r2,0(sp)
     6ac:	e13ffd17 	ldw	r4,-12(fp)
     6b0:	180f883a 	mov	r7,r3
     6b4:	00023640 	call	2364 <VGA_box>
		VGA_box(X, boven, X + 5, boven + 1, 0);
     6b8:	e0bffd17 	ldw	r2,-12(fp)
     6bc:	10c00144 	addi	r3,r2,5
     6c0:	e0bffc17 	ldw	r2,-16(fp)
     6c4:	10800044 	addi	r2,r2,1
     6c8:	d8000015 	stw	zero,0(sp)
     6cc:	e13ffd17 	ldw	r4,-12(fp)
     6d0:	e17ffc17 	ldw	r5,-16(fp)
     6d4:	180d883a 	mov	r6,r3
     6d8:	100f883a 	mov	r7,r2
     6dc:	00023640 	call	2364 <VGA_box>
		boven++;
     6e0:	e0bffc17 	ldw	r2,-16(fp)
     6e4:	10800044 	addi	r2,r2,1
     6e8:	e0bffc15 	stw	r2,-16(fp)
int moveDown(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven <= 184 && boven >= 4) {
     6ec:	00001106 	br	734 <moveDown+0xec>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
		VGA_box(X, boven, X + 5, boven + 1, 0);
		boven++;
	} else if (boven < 4) {
     6f0:	e0bffc17 	ldw	r2,-16(fp)
     6f4:	10800108 	cmpgei	r2,r2,4
     6f8:	10000e1e 	bne	r2,zero,734 <moveDown+0xec>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
     6fc:	e0bffc17 	ldw	r2,-16(fp)
     700:	11400c84 	addi	r5,r2,50
     704:	e0bffd17 	ldw	r2,-12(fp)
     708:	11800144 	addi	r6,r2,5
     70c:	e0bffc17 	ldw	r2,-16(fp)
     710:	10c00cc4 	addi	r3,r2,51
     714:	00803fc4 	movi	r2,255
     718:	d8800015 	stw	r2,0(sp)
     71c:	e13ffd17 	ldw	r4,-12(fp)
     720:	180f883a 	mov	r7,r3
     724:	00023640 	call	2364 <VGA_box>
		boven++;
     728:	e0bffc17 	ldw	r2,-16(fp)
     72c:	10800044 	addi	r2,r2,1
     730:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     734:	e0bffc17 	ldw	r2,-16(fp)

}
     738:	e037883a 	mov	sp,fp
     73c:	dfc00117 	ldw	ra,4(sp)
     740:	df000017 	ldw	fp,0(sp)
     744:	dec00204 	addi	sp,sp,8
     748:	f800283a 	ret

0000074c <Game>:

typedef struct balk {
	int Hoogte;
} Balk;

void Game(void* pdata) {
     74c:	defff604 	addi	sp,sp,-40
     750:	dfc00915 	stw	ra,36(sp)
     754:	df000815 	stw	fp,32(sp)
     758:	df000804 	addi	fp,sp,32
     75c:	e13ffd15 	stw	r4,-12(fp)


	ALT_x1 = 0;
     760:	d027fd15 	stw	zero,-24588(gp)
	ALT_x2 = 165;
     764:	00802944 	movi	r2,165
     768:	d0a7ff15 	stw	r2,-24580(gp)
	ALT_y = 100;
     76c:	00801904 	movi	r2,100
     770:	d0a7fa15 	stw	r2,-24600(gp)
	ALT_inc_x = 1;
     774:	00800044 	movi	r2,1
     778:	d0a7fe15 	stw	r2,-24584(gp)
	ALT_inc_y = 1;
     77c:	00800044 	movi	r2,1
     780:	d0a7fb15 	stw	r2,-24596(gp)

	pixel_buffer_x = 319;
     784:	00804fc4 	movi	r2,319
     788:	d0a7f915 	stw	r2,-24604(gp)
	pixel_buffer_y = 230;
     78c:	00803984 	movi	r2,230
     790:	d0a7f715 	stw	r2,-24612(gp)
	//char_buffer_x = 79; char_buffer_y = 59;

	//blue_x1 = 28; blue_x2 = 52; blue_y1 = 26; blue_y2 = 34;

	while (1) {
		OSFlagPend(Flags, Game_Flag + C1_Flag + C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     794:	d0e7f217 	ldw	r3,-24632(gp)
     798:	e0bffc04 	addi	r2,fp,-16
     79c:	d8800015 	stw	r2,0(sp)
     7a0:	1809883a 	mov	r4,r3
     7a4:	01400384 	movi	r5,14
     7a8:	01800044 	movi	r6,1
     7ac:	000f883a 	mov	r7,zero
     7b0:	00090a80 	call	90a8 <OSFlagPend>

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
     7b4:	d0e7f317 	ldw	r3,-24628(gp)
     7b8:	e0bffc04 	addi	r2,fp,-16
     7bc:	1809883a 	mov	r4,r3
     7c0:	000b883a 	mov	r5,zero
     7c4:	100d883a 	mov	r6,r2
     7c8:	000a3a00 	call	a3a0 <OSMboxPend>
     7cc:	e0bffa15 	stw	r2,-24(fp)
		balkje2 = (Balk*) OSMboxPend(MailBox2, 0, &err);
     7d0:	d0e7f117 	ldw	r3,-24636(gp)
     7d4:	e0bffc04 	addi	r2,fp,-16
     7d8:	1809883a 	mov	r4,r3
     7dc:	000b883a 	mov	r5,zero
     7e0:	100d883a 	mov	r6,r2
     7e4:	000a3a00 	call	a3a0 <OSMboxPend>
     7e8:	e0bffb15 	stw	r2,-20(fp)



		for (i = 0; i <= 9; i++) {
     7ec:	e03ff915 	stw	zero,-28(fp)
     7f0:	00001706 	br	850 <Game+0x104>

			if (score1 == i) {
     7f4:	d0e7f817 	ldw	r3,-24608(gp)
     7f8:	e0bff917 	ldw	r2,-28(fp)
     7fc:	1880031e 	bne	r3,r2,80c <Game+0xc0>
				draw_number(i, 1);
     800:	e13ff917 	ldw	r4,-28(fp)
     804:	01400044 	movi	r5,1
     808:	00025f80 	call	25f8 <draw_number>
			}
			if (score2 == i) {
     80c:	d0e7f517 	ldw	r3,-24620(gp)
     810:	e0bff917 	ldw	r2,-28(fp)
     814:	1880031e 	bne	r3,r2,824 <Game+0xd8>
				draw_number(i, 3);
     818:	e13ff917 	ldw	r4,-28(fp)
     81c:	014000c4 	movi	r5,3
     820:	00025f80 	call	25f8 <draw_number>
			}
			if(score1 == 9 || score2 == 9){
     824:	d0a7f817 	ldw	r2,-24608(gp)
     828:	10800260 	cmpeqi	r2,r2,9
     82c:	1000031e 	bne	r2,zero,83c <Game+0xf0>
     830:	d0a7f517 	ldw	r2,-24620(gp)
     834:	10800258 	cmpnei	r2,r2,9
     838:	1000021e 	bne	r2,zero,844 <Game+0xf8>
				score1 =0;
     83c:	d027f815 	stw	zero,-24608(gp)
				score2 =0;
     840:	d027f515 	stw	zero,-24620(gp)
		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
		balkje2 = (Balk*) OSMboxPend(MailBox2, 0, &err);



		for (i = 0; i <= 9; i++) {
     844:	e0bff917 	ldw	r2,-28(fp)
     848:	10800044 	addi	r2,r2,1
     84c:	e0bff915 	stw	r2,-28(fp)
     850:	e0bff917 	ldw	r2,-28(fp)
     854:	10800290 	cmplti	r2,r2,10
     858:	103fe61e 	bne	r2,zero,7f4 <__alt_mem_Flash_flash_data+0xf40007f4>
				score1 =0;
				score2 =0;

			}
		}
		draw_middenlijn();
     85c:	00024a80 	call	24a8 <draw_middenlijn>
		if (check == 1) {
     860:	d0a00117 	ldw	r2,-32764(gp)
     864:	10800058 	cmpnei	r2,r2,1
     868:	1000181e 	bne	r2,zero,8cc <Game+0x180>
			del_middenlijn();
     86c:	00025100 	call	2510 <del_middenlijn>
			VGA_text(20, 20, "Houdt de knop ingedrukt om te spelen");
     870:	01000504 	movi	r4,20
     874:	01400504 	movi	r5,20
     878:	01800074 	movhi	r6,1
     87c:	318b0a04 	addi	r6,r6,11304
     880:	00024180 	call	2418 <VGA_text>
			OSTimeDlyHMSM(0, 1, 0, 0);
     884:	0009883a 	mov	r4,zero
     888:	01400044 	movi	r5,1
     88c:	000d883a 	mov	r6,zero
     890:	000f883a 	mov	r7,zero
     894:	000ea040 	call	ea04 <OSTimeDlyHMSM>
			VGA_text(20, 20, "                                    ");
     898:	01000504 	movi	r4,20
     89c:	01400504 	movi	r5,20
     8a0:	01800074 	movhi	r6,1
     8a4:	318b1404 	addi	r6,r6,11344
     8a8:	00024180 	call	2418 <VGA_text>

			del_number(1);
     8ac:	01000044 	movi	r4,1
     8b0:	000254c0 	call	254c <del_number>
			del_number(2);
     8b4:	01000084 	movi	r4,2
     8b8:	000254c0 	call	254c <del_number>

			score1 = 0;
     8bc:	d027f815 	stw	zero,-24608(gp)
			score2 = 0;
     8c0:	d027f515 	stw	zero,-24620(gp)

			i = 0;
     8c4:	e03ff915 	stw	zero,-28(fp)

			check = 0;
     8c8:	d0200115 	stw	zero,-32764(gp)
		}

		if (controller(3) == 1) {
     8cc:	010000c4 	movi	r4,3
     8d0:	000035c0 	call	35c <controller>
     8d4:	10800058 	cmpnei	r2,r2,1
     8d8:	1000a41e 	bne	r2,zero,b6c <Game+0x420>

			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     8dc:	d127fd17 	ldw	r4,-24588(gp)
     8e0:	d167fa17 	ldw	r5,-24600(gp)
     8e4:	d0a7fd17 	ldw	r2,-24588(gp)
     8e8:	10c00144 	addi	r3,r2,5
     8ec:	d0a7fa17 	ldw	r2,-24600(gp)
     8f0:	10800144 	addi	r2,r2,5
     8f4:	d8000015 	stw	zero,0(sp)
     8f8:	180d883a 	mov	r6,r3
     8fc:	100f883a 	mov	r7,r2
     900:	00023640 	call	2364 <VGA_box>
			if (first == 1) {
     904:	d0a00017 	ldw	r2,-32768(gp)
     908:	10800058 	cmpnei	r2,r2,1
     90c:	10000f1e 	bne	r2,zero,94c <Game+0x200>
				ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
     910:	d0a7fd17 	ldw	r2,-24588(gp)
     914:	10c02804 	addi	r3,r2,160
     918:	d0a7fe17 	ldw	r2,-24584(gp)
     91c:	1885883a 	add	r2,r3,r2
     920:	d0a7fd15 	stw	r2,-24588(gp)
				ALT_x2 += ALT_inc_x;
     924:	d0e7ff17 	ldw	r3,-24580(gp)
     928:	d0a7fe17 	ldw	r2,-24584(gp)
     92c:	1885883a 	add	r2,r3,r2
     930:	d0a7ff15 	stw	r2,-24580(gp)
				ALT_y += ALT_inc_y;
     934:	d0e7fa17 	ldw	r3,-24600(gp)
     938:	d0a7fb17 	ldw	r2,-24596(gp)
     93c:	1885883a 	add	r2,r3,r2
     940:	d0a7fa15 	stw	r2,-24600(gp)
				first = 0;
     944:	d0200015 	stw	zero,-32768(gp)
     948:	00000c06 	br	97c <Game+0x230>
			} else {
				ALT_x1 += ALT_inc_x;
     94c:	d0e7fd17 	ldw	r3,-24588(gp)
     950:	d0a7fe17 	ldw	r2,-24584(gp)
     954:	1885883a 	add	r2,r3,r2
     958:	d0a7fd15 	stw	r2,-24588(gp)
				ALT_x2 += ALT_inc_x;
     95c:	d0e7ff17 	ldw	r3,-24580(gp)
     960:	d0a7fe17 	ldw	r2,-24584(gp)
     964:	1885883a 	add	r2,r3,r2
     968:	d0a7ff15 	stw	r2,-24580(gp)
				ALT_y += ALT_inc_y;
     96c:	d0e7fa17 	ldw	r3,-24600(gp)
     970:	d0a7fb17 	ldw	r2,-24596(gp)
     974:	1885883a 	add	r2,r3,r2
     978:	d0a7fa15 	stw	r2,-24600(gp)
			}
			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
     97c:	d127fd17 	ldw	r4,-24588(gp)
     980:	d167fa17 	ldw	r5,-24600(gp)
     984:	d0a7fd17 	ldw	r2,-24588(gp)
     988:	11800144 	addi	r6,r2,5
     98c:	d0a7fa17 	ldw	r2,-24600(gp)
     990:	10c00144 	addi	r3,r2,5
     994:	00804034 	movhi	r2,256
     998:	10bfffc4 	addi	r2,r2,-1
     99c:	d8800015 	stw	r2,0(sp)
     9a0:	180f883a 	mov	r7,r3
     9a4:	00023640 	call	2364 <VGA_box>

			//collision rand boven en onder
			if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
     9a8:	d0e7fa17 	ldw	r3,-24600(gp)
     9ac:	d0a7f717 	ldw	r2,-24612(gp)
     9b0:	18800326 	beq	r3,r2,9c0 <Game+0x274>
     9b4:	d0a7fa17 	ldw	r2,-24600(gp)
     9b8:	10800118 	cmpnei	r2,r2,4
     9bc:	1000031e 	bne	r2,zero,9cc <Game+0x280>
				ALT_inc_y = -(ALT_inc_y);
     9c0:	d0a7fb17 	ldw	r2,-24596(gp)
     9c4:	0085c83a 	sub	r2,zero,r2
     9c8:	d0a7fb15 	stw	r2,-24596(gp)
			if ((ALT_x2 == pixel_buffer_x) || (ALT_x1 == 0)) {
				//ALT_inc_x = -(ALT_inc_x);
			}

			//links dood
			if (ALT_x1 == 0) {
     9cc:	d0a7fd17 	ldw	r2,-24588(gp)
     9d0:	1000071e 	bne	r2,zero,9f0 <Game+0x2a4>
				score2++;
     9d4:	d0a7f517 	ldw	r2,-24620(gp)
     9d8:	10800044 	addi	r2,r2,1
     9dc:	d0a7f515 	stw	r2,-24620(gp)
				gescoord(2);
     9e0:	01000084 	movi	r4,2
     9e4:	0000ba40 	call	ba4 <gescoord>
				del_number(2);
     9e8:	01000084 	movi	r4,2
     9ec:	000254c0 	call	254c <del_number>
			}

			//rechts dood
			if (ALT_x2 == pixel_buffer_x) {
     9f0:	d0e7ff17 	ldw	r3,-24580(gp)
     9f4:	d0a7f917 	ldw	r2,-24604(gp)
     9f8:	1880071e 	bne	r3,r2,a18 <Game+0x2cc>
				score1++;
     9fc:	d0a7f817 	ldw	r2,-24608(gp)
     a00:	10800044 	addi	r2,r2,1
     a04:	d0a7f815 	stw	r2,-24608(gp)
				gescoord(1);
     a08:	01000044 	movi	r4,1
     a0c:	0000ba40 	call	ba4 <gescoord>
				del_number(1);
     a10:	01000044 	movi	r4,1
     a14:	000254c0 	call	254c <del_number>
			}

			//collision linker balkje
			//lange zijde
			if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte - 6 && ALT_y < balkje->Hoogte + 50)){
     a18:	d0a7fd17 	ldw	r2,-24588(gp)
     a1c:	10800558 	cmpnei	r2,r2,21
     a20:	10000d1e 	bne	r2,zero,a58 <Game+0x30c>
     a24:	e0bffa17 	ldw	r2,-24(fp)
     a28:	10800017 	ldw	r2,0(r2)
     a2c:	10fffe84 	addi	r3,r2,-6
     a30:	d0a7fa17 	ldw	r2,-24600(gp)
     a34:	1880080e 	bge	r3,r2,a58 <Game+0x30c>
     a38:	e0bffa17 	ldw	r2,-24(fp)
     a3c:	10800017 	ldw	r2,0(r2)
     a40:	10800c84 	addi	r2,r2,50
     a44:	d0e7fa17 	ldw	r3,-24600(gp)
     a48:	1880030e 	bge	r3,r2,a58 <Game+0x30c>
				ALT_inc_x = -(ALT_inc_x);
     a4c:	d0a7fe17 	ldw	r2,-24584(gp)
     a50:	0085c83a 	sub	r2,zero,r2
     a54:	d0a7fe15 	stw	r2,-24584(gp)
			}
			//boven
			if(((ALT_x1 <= 20 && ALT_x1 >= 15) && ALT_y == balkje->Hoogte - 6) || ((ALT_x1 <= 20 && ALT_x1 >= 15) && ALT_y == balkje->Hoogte + 50)){
     a58:	d0a7fd17 	ldw	r2,-24588(gp)
     a5c:	10800548 	cmpgei	r2,r2,21
     a60:	1000081e 	bne	r2,zero,a84 <Game+0x338>
     a64:	d0a7fd17 	ldw	r2,-24588(gp)
     a68:	108003d0 	cmplti	r2,r2,15
     a6c:	1000051e 	bne	r2,zero,a84 <Game+0x338>
     a70:	e0bffa17 	ldw	r2,-24(fp)
     a74:	10800017 	ldw	r2,0(r2)
     a78:	10fffe84 	addi	r3,r2,-6
     a7c:	d0a7fa17 	ldw	r2,-24600(gp)
     a80:	18800b26 	beq	r3,r2,ab0 <Game+0x364>
     a84:	d0a7fd17 	ldw	r2,-24588(gp)
     a88:	10800548 	cmpgei	r2,r2,21
     a8c:	10000b1e 	bne	r2,zero,abc <Game+0x370>
     a90:	d0a7fd17 	ldw	r2,-24588(gp)
     a94:	108003d0 	cmplti	r2,r2,15
     a98:	1000081e 	bne	r2,zero,abc <Game+0x370>
     a9c:	e0bffa17 	ldw	r2,-24(fp)
     aa0:	10800017 	ldw	r2,0(r2)
     aa4:	10c00c84 	addi	r3,r2,50
     aa8:	d0a7fa17 	ldw	r2,-24600(gp)
     aac:	1880031e 	bne	r3,r2,abc <Game+0x370>
				ALT_inc_y = -(ALT_inc_y);
     ab0:	d0a7fb17 	ldw	r2,-24596(gp)
     ab4:	0085c83a 	sub	r2,zero,r2
     ab8:	d0a7fb15 	stw	r2,-24596(gp)
			}

			//collision rechter balkje
			//lange zijde
			if(ALT_x2 == 299 && (ALT_y > balkje2->Hoogte - 6 && ALT_y < balkje2->Hoogte + 50)){
     abc:	d0a7ff17 	ldw	r2,-24580(gp)
     ac0:	10804ad8 	cmpnei	r2,r2,299
     ac4:	10000d1e 	bne	r2,zero,afc <Game+0x3b0>
     ac8:	e0bffb17 	ldw	r2,-20(fp)
     acc:	10800017 	ldw	r2,0(r2)
     ad0:	10fffe84 	addi	r3,r2,-6
     ad4:	d0a7fa17 	ldw	r2,-24600(gp)
     ad8:	1880080e 	bge	r3,r2,afc <Game+0x3b0>
     adc:	e0bffb17 	ldw	r2,-20(fp)
     ae0:	10800017 	ldw	r2,0(r2)
     ae4:	10800c84 	addi	r2,r2,50
     ae8:	d0e7fa17 	ldw	r3,-24600(gp)
     aec:	1880030e 	bge	r3,r2,afc <Game+0x3b0>
				ALT_inc_x = -(ALT_inc_x);
     af0:	d0a7fe17 	ldw	r2,-24584(gp)
     af4:	0085c83a 	sub	r2,zero,r2
     af8:	d0a7fe15 	stw	r2,-24584(gp)
			}
			//boven
			if(((ALT_x2 <= 305 && ALT_x2 >= 300) && ALT_y == balkje2->Hoogte - 6) || ((ALT_x2 <= 305 && ALT_x2 >= 300) && ALT_y == balkje2->Hoogte + 50)){
     afc:	d0a7ff17 	ldw	r2,-24580(gp)
     b00:	10804c88 	cmpgei	r2,r2,306
     b04:	1000081e 	bne	r2,zero,b28 <Game+0x3dc>
     b08:	d0a7ff17 	ldw	r2,-24580(gp)
     b0c:	10804b10 	cmplti	r2,r2,300
     b10:	1000051e 	bne	r2,zero,b28 <Game+0x3dc>
     b14:	e0bffb17 	ldw	r2,-20(fp)
     b18:	10800017 	ldw	r2,0(r2)
     b1c:	10fffe84 	addi	r3,r2,-6
     b20:	d0a7fa17 	ldw	r2,-24600(gp)
     b24:	18800b26 	beq	r3,r2,b54 <Game+0x408>
     b28:	d0a7ff17 	ldw	r2,-24580(gp)
     b2c:	10804c88 	cmpgei	r2,r2,306
     b30:	10000b1e 	bne	r2,zero,b60 <Game+0x414>
     b34:	d0a7ff17 	ldw	r2,-24580(gp)
     b38:	10804b10 	cmplti	r2,r2,300
     b3c:	1000081e 	bne	r2,zero,b60 <Game+0x414>
     b40:	e0bffb17 	ldw	r2,-20(fp)
     b44:	10800017 	ldw	r2,0(r2)
     b48:	10c00c84 	addi	r3,r2,50
     b4c:	d0a7fa17 	ldw	r2,-24600(gp)
     b50:	1880031e 	bne	r3,r2,b60 <Game+0x414>
				ALT_inc_y = -(ALT_inc_y);
     b54:	d0a7fb17 	ldw	r2,-24596(gp)
     b58:	0085c83a 	sub	r2,zero,r2
     b5c:	d0a7fb15 	stw	r2,-24596(gp)
			}



			OSTimeDly(1);
     b60:	01000044 	movi	r4,1
     b64:	000e8bc0 	call	e8bc <OSTimeDly>
     b68:	00000d06 	br	ba0 <Game+0x454>

		} else if (controller(2) == 2) {
     b6c:	01000084 	movi	r4,2
     b70:	000035c0 	call	35c <controller>
     b74:	10800098 	cmpnei	r2,r2,2
     b78:	1000031e 	bne	r2,zero,b88 <Game+0x43c>
			//links
			endGame(1);
     b7c:	01000044 	movi	r4,1
     b80:	0000dc80 	call	dc8 <endGame>
     b84:	00000606 	br	ba0 <Game+0x454>
		}else if(controller(2) == 3){
     b88:	01000084 	movi	r4,2
     b8c:	000035c0 	call	35c <controller>
     b90:	108000d8 	cmpnei	r2,r2,3
     b94:	1000021e 	bne	r2,zero,ba0 <Game+0x454>
			//rechts
			endGame(2);
     b98:	01000084 	movi	r4,2
     b9c:	0000dc80 	call	dc8 <endGame>
		}

	}
     ba0:	003efc06 	br	794 <__alt_mem_Flash_flash_data+0xf4000794>

00000ba4 <gescoord>:
}

void gescoord(int ID){
     ba4:	defffc04 	addi	sp,sp,-16
     ba8:	dfc00315 	stw	ra,12(sp)
     bac:	df000215 	stw	fp,8(sp)
     bb0:	df000204 	addi	fp,sp,8
     bb4:	e13fff15 	stw	r4,-4(fp)

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     bb8:	d127fd17 	ldw	r4,-24588(gp)
     bbc:	d167fa17 	ldw	r5,-24600(gp)
     bc0:	d0a7fd17 	ldw	r2,-24588(gp)
     bc4:	10c00144 	addi	r3,r2,5
     bc8:	d0a7fa17 	ldw	r2,-24600(gp)
     bcc:	10800144 	addi	r2,r2,5
     bd0:	d8000015 	stw	zero,0(sp)
     bd4:	180d883a 	mov	r6,r3
     bd8:	100f883a 	mov	r7,r2
     bdc:	00023640 	call	2364 <VGA_box>

	first = 1;
     be0:	00800044 	movi	r2,1
     be4:	d0a00015 	stw	r2,-32768(gp)

	if(ID == 1){
     be8:	e0bfff17 	ldw	r2,-4(fp)
     bec:	10800058 	cmpnei	r2,r2,1
     bf0:	1000221e 	bne	r2,zero,c7c <gescoord+0xd8>
		VGA_text(30, 25, "Speler 1 heeft gescoord!");
     bf4:	01000784 	movi	r4,30
     bf8:	01400644 	movi	r5,25
     bfc:	01800074 	movhi	r6,1
     c00:	318b1e04 	addi	r6,r6,11384
     c04:	00024180 	call	2418 <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     c08:	0009883a 	mov	r4,zero
     c0c:	000b883a 	mov	r5,zero
     c10:	018008c4 	movi	r6,35
     c14:	000f883a 	mov	r7,zero
     c18:	000ea040 	call	ea04 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                        ");
     c1c:	01000784 	movi	r4,30
     c20:	01400644 	movi	r5,25
     c24:	01800074 	movhi	r6,1
     c28:	318b2504 	addi	r6,r6,11412
     c2c:	00024180 	call	2418 <VGA_text>
		ALT_x1 = 0;
     c30:	d027fd15 	stw	zero,-24588(gp)
		ALT_x2 = 165;
     c34:	00802944 	movi	r2,165
     c38:	d0a7ff15 	stw	r2,-24580(gp)
		ALT_y = 100;
     c3c:	00801904 	movi	r2,100
     c40:	d0a7fa15 	stw	r2,-24600(gp)
		ALT_inc_x = -1;
     c44:	00bfffc4 	movi	r2,-1
     c48:	d0a7fe15 	stw	r2,-24584(gp)
		if(random == 1){
     c4c:	d0a7f617 	ldw	r2,-24616(gp)
     c50:	10800058 	cmpnei	r2,r2,1
     c54:	1000031e 	bne	r2,zero,c64 <gescoord+0xc0>
			ALT_inc_y = -1;
     c58:	00bfffc4 	movi	r2,-1
     c5c:	d0a7fb15 	stw	r2,-24596(gp)
     c60:	00000506 	br	c78 <gescoord+0xd4>
			random == 0;
		}else if(random == 0){
     c64:	d0a7f617 	ldw	r2,-24616(gp)
     c68:	1000031e 	bne	r2,zero,c78 <gescoord+0xd4>
			ALT_inc_y = 1;
     c6c:	00800044 	movi	r2,1
     c70:	d0a7fb15 	stw	r2,-24596(gp)
     c74:	00004f06 	br	db4 <gescoord+0x210>
     c78:	00004e06 	br	db4 <gescoord+0x210>
			random == 1;
		}
	}else if(ID == 2){
     c7c:	e0bfff17 	ldw	r2,-4(fp)
     c80:	10800098 	cmpnei	r2,r2,2
     c84:	1000251e 	bne	r2,zero,d1c <gescoord+0x178>
		VGA_text(30, 25, "Speler 2 heeft gescoord!");
     c88:	01000784 	movi	r4,30
     c8c:	01400644 	movi	r5,25
     c90:	01800074 	movhi	r6,1
     c94:	318b2c04 	addi	r6,r6,11440
     c98:	00024180 	call	2418 <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     c9c:	0009883a 	mov	r4,zero
     ca0:	000b883a 	mov	r5,zero
     ca4:	018008c4 	movi	r6,35
     ca8:	000f883a 	mov	r7,zero
     cac:	000ea040 	call	ea04 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                        ");
     cb0:	01000784 	movi	r4,30
     cb4:	01400644 	movi	r5,25
     cb8:	01800074 	movhi	r6,1
     cbc:	318b2504 	addi	r6,r6,11412
     cc0:	00024180 	call	2418 <VGA_text>
		ALT_x1 = 0;
     cc4:	d027fd15 	stw	zero,-24588(gp)
		ALT_x2 = 165;
     cc8:	00802944 	movi	r2,165
     ccc:	d0a7ff15 	stw	r2,-24580(gp)
		ALT_y = 100;
     cd0:	00801904 	movi	r2,100
     cd4:	d0a7fa15 	stw	r2,-24600(gp)
		ALT_inc_x = 1;
     cd8:	00800044 	movi	r2,1
     cdc:	d0a7fe15 	stw	r2,-24584(gp)
		if(random == 1){
     ce0:	d0a7f617 	ldw	r2,-24616(gp)
     ce4:	10800058 	cmpnei	r2,r2,1
     ce8:	1000041e 	bne	r2,zero,cfc <gescoord+0x158>
			ALT_inc_y = 1;
     cec:	00800044 	movi	r2,1
     cf0:	d0a7fb15 	stw	r2,-24596(gp)
			random = 0;
     cf4:	d027f615 	stw	zero,-24616(gp)
     cf8:	00000706 	br	d18 <gescoord+0x174>
		}else if(random == 0){
     cfc:	d0a7f617 	ldw	r2,-24616(gp)
     d00:	1000051e 	bne	r2,zero,d18 <gescoord+0x174>
			ALT_inc_y = -1;
     d04:	00bfffc4 	movi	r2,-1
     d08:	d0a7fb15 	stw	r2,-24596(gp)
			random = 1;
     d0c:	00800044 	movi	r2,1
     d10:	d0a7f615 	stw	r2,-24616(gp)
     d14:	00002706 	br	db4 <gescoord+0x210>
     d18:	00002606 	br	db4 <gescoord+0x210>
		}
	}else if(ID == 3){
     d1c:	e0bfff17 	ldw	r2,-4(fp)
     d20:	108000d8 	cmpnei	r2,r2,3
     d24:	1000231e 	bne	r2,zero,db4 <gescoord+0x210>
		VGA_text(30, 25, "De computer heeft gescoord!");
     d28:	01000784 	movi	r4,30
     d2c:	01400644 	movi	r5,25
     d30:	01800074 	movhi	r6,1
     d34:	318b3304 	addi	r6,r6,11468
     d38:	00024180 	call	2418 <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     d3c:	0009883a 	mov	r4,zero
     d40:	000b883a 	mov	r5,zero
     d44:	018008c4 	movi	r6,35
     d48:	000f883a 	mov	r7,zero
     d4c:	000ea040 	call	ea04 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                           ");
     d50:	01000784 	movi	r4,30
     d54:	01400644 	movi	r5,25
     d58:	01800074 	movhi	r6,1
     d5c:	318b3a04 	addi	r6,r6,11496
     d60:	00024180 	call	2418 <VGA_text>
		ALT_x1 = 0;
     d64:	d027fd15 	stw	zero,-24588(gp)
		ALT_x2 = 165;
     d68:	00802944 	movi	r2,165
     d6c:	d0a7ff15 	stw	r2,-24580(gp)
		ALT_y = 100;
     d70:	00801904 	movi	r2,100
     d74:	d0a7fa15 	stw	r2,-24600(gp)
		ALT_inc_x = -1;
     d78:	00bfffc4 	movi	r2,-1
     d7c:	d0a7fe15 	stw	r2,-24584(gp)
		if(random == 1){
     d80:	d0a7f617 	ldw	r2,-24616(gp)
     d84:	10800058 	cmpnei	r2,r2,1
     d88:	1000041e 	bne	r2,zero,d9c <gescoord+0x1f8>
			ALT_inc_y = 1;
     d8c:	00800044 	movi	r2,1
     d90:	d0a7fb15 	stw	r2,-24596(gp)
			random = 0;
     d94:	d027f615 	stw	zero,-24616(gp)
     d98:	00000606 	br	db4 <gescoord+0x210>
		}else if(random == 0){
     d9c:	d0a7f617 	ldw	r2,-24616(gp)
     da0:	1000041e 	bne	r2,zero,db4 <gescoord+0x210>
			ALT_inc_y = -1;
     da4:	00bfffc4 	movi	r2,-1
     da8:	d0a7fb15 	stw	r2,-24596(gp)
			random = 1;
     dac:	00800044 	movi	r2,1
     db0:	d0a7f615 	stw	r2,-24616(gp)
		}
	}

}
     db4:	e037883a 	mov	sp,fp
     db8:	dfc00117 	ldw	ra,4(sp)
     dbc:	df000017 	ldw	fp,0(sp)
     dc0:	dec00204 	addi	sp,sp,8
     dc4:	f800283a 	ret

00000dc8 <endGame>:

void endGame(int ID) {
     dc8:	defffb04 	addi	sp,sp,-20
     dcc:	dfc00415 	stw	ra,16(sp)
     dd0:	df000315 	stw	fp,12(sp)
     dd4:	df000304 	addi	fp,sp,12
     dd8:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	printf("end game\n");
     ddc:	01000074 	movhi	r4,1
     de0:	210b4104 	addi	r4,r4,11524
     de4:	0002d740 	call	2d74 <puts>

	clearScreen();
     de8:	0001ec80 	call	1ec8 <clearScreen>

	OSFlagPost(Flags, Game_Flag + C1_Flag + C2_Flag, OS_FLAG_SET, &err);
     dec:	d0a7f217 	ldw	r2,-24632(gp)
     df0:	1009883a 	mov	r4,r2
     df4:	01400384 	movi	r5,14
     df8:	01800044 	movi	r6,1
     dfc:	e1fffe04 	addi	r7,fp,-8
     e00:	00097000 	call	9700 <OSFlagPost>

	if(ID == 1){
     e04:	e0bfff17 	ldw	r2,-4(fp)
     e08:	10800058 	cmpnei	r2,r2,1
     e0c:	1000101e 	bne	r2,zero,e50 <endGame+0x88>
		VGA_text(35, 25, "Player 1 lost");
     e10:	010008c4 	movi	r4,35
     e14:	01400644 	movi	r5,25
     e18:	01800074 	movhi	r6,1
     e1c:	318b4404 	addi	r6,r6,11536
     e20:	00024180 	call	2418 <VGA_text>
		OSTimeDlyHMSM(0, 0, 40, 0);
     e24:	0009883a 	mov	r4,zero
     e28:	000b883a 	mov	r5,zero
     e2c:	01800a04 	movi	r6,40
     e30:	000f883a 	mov	r7,zero
     e34:	000ea040 	call	ea04 <OSTimeDlyHMSM>
		VGA_text(35, 25, "             ");
     e38:	010008c4 	movi	r4,35
     e3c:	01400644 	movi	r5,25
     e40:	01800074 	movhi	r6,1
     e44:	318b4804 	addi	r6,r6,11552
     e48:	00024180 	call	2418 <VGA_text>
     e4c:	00001206 	br	e98 <endGame+0xd0>
	} else if(ID == 2){
     e50:	e0bfff17 	ldw	r2,-4(fp)
     e54:	10800098 	cmpnei	r2,r2,2
     e58:	10000f1e 	bne	r2,zero,e98 <endGame+0xd0>
		VGA_text(35, 25, "Player 2 lost");
     e5c:	010008c4 	movi	r4,35
     e60:	01400644 	movi	r5,25
     e64:	01800074 	movhi	r6,1
     e68:	318b4c04 	addi	r6,r6,11568
     e6c:	00024180 	call	2418 <VGA_text>
		OSTimeDlyHMSM(0, 0, 40, 0);
     e70:	0009883a 	mov	r4,zero
     e74:	000b883a 	mov	r5,zero
     e78:	01800a04 	movi	r6,40
     e7c:	000f883a 	mov	r7,zero
     e80:	000ea040 	call	ea04 <OSTimeDlyHMSM>
		VGA_text(35, 25, "             ");
     e84:	010008c4 	movi	r4,35
     e88:	01400644 	movi	r5,25
     e8c:	01800074 	movhi	r6,1
     e90:	318b4804 	addi	r6,r6,11552
     e94:	00024180 	call	2418 <VGA_text>
	}


	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
     e98:	d0a7f217 	ldw	r2,-24632(gp)
     e9c:	1009883a 	mov	r4,r2
     ea0:	01400444 	movi	r5,17
     ea4:	000d883a 	mov	r6,zero
     ea8:	e1fffe04 	addi	r7,fp,-8
     eac:	00097000 	call	9700 <OSFlagPost>

	teken_menu();
     eb0:	00020880 	call	2088 <teken_menu>
	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     eb4:	d127fd17 	ldw	r4,-24588(gp)
     eb8:	d167fa17 	ldw	r5,-24600(gp)
     ebc:	d0a7fd17 	ldw	r2,-24588(gp)
     ec0:	10c00144 	addi	r3,r2,5
     ec4:	d0a7fa17 	ldw	r2,-24600(gp)
     ec8:	10800144 	addi	r2,r2,5
     ecc:	d8000015 	stw	zero,0(sp)
     ed0:	180d883a 	mov	r6,r3
     ed4:	100f883a 	mov	r7,r2
     ed8:	00023640 	call	2364 <VGA_box>

	ALT_x1 = 0;
     edc:	d027fd15 	stw	zero,-24588(gp)
	ALT_x2 = 165;
     ee0:	00802944 	movi	r2,165
     ee4:	d0a7ff15 	stw	r2,-24580(gp)
	ALT_y = 100;
     ee8:	00801904 	movi	r2,100
     eec:	d0a7fa15 	stw	r2,-24600(gp)
	ALT_inc_x = 1;
     ef0:	00800044 	movi	r2,1
     ef4:	d0a7fe15 	stw	r2,-24584(gp)
	ALT_inc_y = 1;
     ef8:	00800044 	movi	r2,1
     efc:	d0a7fb15 	stw	r2,-24596(gp)

	check = 1;
     f00:	00800044 	movi	r2,1
     f04:	d0a00115 	stw	r2,-32764(gp)
	first = 1;
     f08:	00800044 	movi	r2,1
     f0c:	d0a00015 	stw	r2,-32768(gp)

}
     f10:	e037883a 	mov	sp,fp
     f14:	dfc00117 	ldw	ra,4(sp)
     f18:	df000017 	ldw	fp,0(sp)
     f1c:	dec00204 	addi	sp,sp,8
     f20:	f800283a 	ret

00000f24 <Singleplayer>:

void Singleplayer(void* pdata){
     f24:	defff704 	addi	sp,sp,-36
     f28:	dfc00815 	stw	ra,32(sp)
     f2c:	df000715 	stw	fp,28(sp)
     f30:	df000704 	addi	fp,sp,28
     f34:	e13fff15 	stw	r4,-4(fp)
	
	ALT_x1 = 0;
     f38:	d027fd15 	stw	zero,-24588(gp)
	ALT_x2 = 165;
     f3c:	00802944 	movi	r2,165
     f40:	d0a7ff15 	stw	r2,-24580(gp)
	ALT_y = 100;
     f44:	00801904 	movi	r2,100
     f48:	d0a7fa15 	stw	r2,-24600(gp)
	ALT_inc_x = 1;
     f4c:	00800044 	movi	r2,1
     f50:	d0a7fe15 	stw	r2,-24584(gp)
	ALT_inc_y = 1;
     f54:	00800044 	movi	r2,1
     f58:	d0a7fb15 	stw	r2,-24596(gp)

	pixel_buffer_x = 315;
     f5c:	00804ec4 	movi	r2,315
     f60:	d0a7f915 	stw	r2,-24604(gp)
	pixel_buffer_y = 230;
     f64:	00803984 	movi	r2,230
     f68:	d0a7f715 	stw	r2,-24612(gp)
	int ID;
	int count;
	Balk * balkje;
	Balk * balkje2;
	
	int score3 = 0;
     f6c:	e03ffb15 	stw	zero,-20(fp)
	int leven = 3;
     f70:	008000c4 	movi	r2,3
     f74:	e0bffc15 	stw	r2,-16(fp)
	
	
	VGA_box (316, 0, 319, 239, groen); 					// rechts
     f78:	0081a5c4 	movi	r2,1687
     f7c:	d8800015 	stw	r2,0(sp)
     f80:	01004f04 	movi	r4,316
     f84:	000b883a 	mov	r5,zero
     f88:	01804fc4 	movi	r6,319
     f8c:	01c03bc4 	movi	r7,239
     f90:	00023640 	call	2364 <VGA_box>
	
	while (1) {
		OSFlagPend(Flags, Singleplayer_Flag + C1_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     f94:	d0e7f217 	ldw	r3,-24632(gp)
     f98:	e0bffe04 	addi	r2,fp,-8
     f9c:	d8800015 	stw	r2,0(sp)
     fa0:	1809883a 	mov	r4,r3
     fa4:	01400904 	movi	r5,36
     fa8:	01800044 	movi	r6,1
     fac:	000f883a 	mov	r7,zero
     fb0:	00090a80 	call	90a8 <OSFlagPend>

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
     fb4:	d0e7f317 	ldw	r3,-24628(gp)
     fb8:	e0bffe04 	addi	r2,fp,-8
     fbc:	1809883a 	mov	r4,r3
     fc0:	000b883a 	mov	r5,zero
     fc4:	100d883a 	mov	r6,r2
     fc8:	000a3a00 	call	a3a0 <OSMboxPend>
     fcc:	e0bffd15 	stw	r2,-12(fp)

		//printf("ID is: %d\tHoogte is: %d\n", balkje->ID, balkje->Hoogte);

		for (i = 0; i <= 999; i++) {
     fd0:	e03ffa15 	stw	zero,-24(fp)
     fd4:	00001106 	br	101c <Singleplayer+0xf8>
			if (score3 == i) {
     fd8:	e0fffb17 	ldw	r3,-20(fp)
     fdc:	e0bffa17 	ldw	r2,-24(fp)
     fe0:	1880031e 	bne	r3,r2,ff0 <Singleplayer+0xcc>
				deleteNummer();
     fe4:	00025bc0 	call	25bc <deleteNummer>
				exec(i);
     fe8:	e13ffa17 	ldw	r4,-24(fp)
     fec:	00019e80 	call	19e8 <exec>
			}
			if((score3 == 999) || (leven == 0)){ // max score of geen levens meer, spel eindigt.
     ff0:	e0bffb17 	ldw	r2,-20(fp)
     ff4:	1080f9e0 	cmpeqi	r2,r2,999
     ff8:	1000021e 	bne	r2,zero,1004 <Singleplayer+0xe0>
     ffc:	e0bffc17 	ldw	r2,-16(fp)
    1000:	1000031e 	bne	r2,zero,1010 <Singleplayer+0xec>
				score3 =0;
    1004:	e03ffb15 	stw	zero,-20(fp)
				endGame(1);
    1008:	01000044 	movi	r4,1
    100c:	0000dc80 	call	dc8 <endGame>

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);

		//printf("ID is: %d\tHoogte is: %d\n", balkje->ID, balkje->Hoogte);

		for (i = 0; i <= 999; i++) {
    1010:	e0bffa17 	ldw	r2,-24(fp)
    1014:	10800044 	addi	r2,r2,1
    1018:	e0bffa15 	stw	r2,-24(fp)
    101c:	e0bffa17 	ldw	r2,-24(fp)
    1020:	1080fa10 	cmplti	r2,r2,1000
    1024:	103fec1e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
//
//			check = 0;
//		}


		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1028:	d127fd17 	ldw	r4,-24588(gp)
    102c:	d167fa17 	ldw	r5,-24600(gp)
    1030:	d0a7fd17 	ldw	r2,-24588(gp)
    1034:	10c00144 	addi	r3,r2,5
    1038:	d0a7fa17 	ldw	r2,-24600(gp)
    103c:	10800144 	addi	r2,r2,5
    1040:	d8000015 	stw	zero,0(sp)
    1044:	180d883a 	mov	r6,r3
    1048:	100f883a 	mov	r7,r2
    104c:	00023640 	call	2364 <VGA_box>

		if (first == 1) {
    1050:	d0a00017 	ldw	r2,-32768(gp)
    1054:	10800058 	cmpnei	r2,r2,1
    1058:	10000f1e 	bne	r2,zero,1098 <Singleplayer+0x174>
			ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
    105c:	d0a7fd17 	ldw	r2,-24588(gp)
    1060:	10c02804 	addi	r3,r2,160
    1064:	d0a7fe17 	ldw	r2,-24584(gp)
    1068:	1885883a 	add	r2,r3,r2
    106c:	d0a7fd15 	stw	r2,-24588(gp)
			ALT_x2 += ALT_inc_x;
    1070:	d0e7ff17 	ldw	r3,-24580(gp)
    1074:	d0a7fe17 	ldw	r2,-24584(gp)
    1078:	1885883a 	add	r2,r3,r2
    107c:	d0a7ff15 	stw	r2,-24580(gp)
			ALT_y += ALT_inc_y;
    1080:	d0e7fa17 	ldw	r3,-24600(gp)
    1084:	d0a7fb17 	ldw	r2,-24596(gp)
    1088:	1885883a 	add	r2,r3,r2
    108c:	d0a7fa15 	stw	r2,-24600(gp)
			first = 0;
    1090:	d0200015 	stw	zero,-32768(gp)
    1094:	00000c06 	br	10c8 <Singleplayer+0x1a4>
		} else {
			ALT_x1 += ALT_inc_x;
    1098:	d0e7fd17 	ldw	r3,-24588(gp)
    109c:	d0a7fe17 	ldw	r2,-24584(gp)
    10a0:	1885883a 	add	r2,r3,r2
    10a4:	d0a7fd15 	stw	r2,-24588(gp)
			ALT_x2 += ALT_inc_x;
    10a8:	d0e7ff17 	ldw	r3,-24580(gp)
    10ac:	d0a7fe17 	ldw	r2,-24584(gp)
    10b0:	1885883a 	add	r2,r3,r2
    10b4:	d0a7ff15 	stw	r2,-24580(gp)
			ALT_y += ALT_inc_y;
    10b8:	d0e7fa17 	ldw	r3,-24600(gp)
    10bc:	d0a7fb17 	ldw	r2,-24596(gp)
    10c0:	1885883a 	add	r2,r3,r2
    10c4:	d0a7fa15 	stw	r2,-24600(gp)
		}
		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
    10c8:	d127fd17 	ldw	r4,-24588(gp)
    10cc:	d167fa17 	ldw	r5,-24600(gp)
    10d0:	d0a7fd17 	ldw	r2,-24588(gp)
    10d4:	11800144 	addi	r6,r2,5
    10d8:	d0a7fa17 	ldw	r2,-24600(gp)
    10dc:	10c00144 	addi	r3,r2,5
    10e0:	00804034 	movhi	r2,256
    10e4:	10bfffc4 	addi	r2,r2,-1
    10e8:	d8800015 	stw	r2,0(sp)
    10ec:	180f883a 	mov	r7,r3
    10f0:	00023640 	call	2364 <VGA_box>

		//collision rand boven en onder
		if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
    10f4:	d0e7fa17 	ldw	r3,-24600(gp)
    10f8:	d0a7f717 	ldw	r2,-24612(gp)
    10fc:	18800326 	beq	r3,r2,110c <Singleplayer+0x1e8>
    1100:	d0a7fa17 	ldw	r2,-24600(gp)
    1104:	10800118 	cmpnei	r2,r2,4
    1108:	1000031e 	bne	r2,zero,1118 <Singleplayer+0x1f4>
			ALT_inc_y = -(ALT_inc_y);
    110c:	d0a7fb17 	ldw	r2,-24596(gp)
    1110:	0085c83a 	sub	r2,zero,r2
    1114:	d0a7fb15 	stw	r2,-24596(gp)
		}
		//collision rand rechts en links
		if ((ALT_x2 == pixel_buffer_x)) {
    1118:	d0e7ff17 	ldw	r3,-24580(gp)
    111c:	d0a7f917 	ldw	r2,-24604(gp)
    1120:	1880061e 	bne	r3,r2,113c <Singleplayer+0x218>
			ALT_inc_x = -(ALT_inc_x);
    1124:	d0a7fe17 	ldw	r2,-24584(gp)
    1128:	0085c83a 	sub	r2,zero,r2
    112c:	d0a7fe15 	stw	r2,-24584(gp)
			score3++;
    1130:	e0bffb17 	ldw	r2,-20(fp)
    1134:	10800044 	addi	r2,r2,1
    1138:	e0bffb15 	stw	r2,-20(fp)
		}

		//links dood
		if (ALT_x1 == 0) {
    113c:	d0a7fd17 	ldw	r2,-24588(gp)
    1140:	1000051e 	bne	r2,zero,1158 <Singleplayer+0x234>
			leven--;
    1144:	e0bffc17 	ldw	r2,-16(fp)
    1148:	10bfffc4 	addi	r2,r2,-1
    114c:	e0bffc15 	stw	r2,-16(fp)
			gescoord(3);
    1150:	010000c4 	movi	r4,3
    1154:	0000ba40 	call	ba4 <gescoord>
//				score3++;
//			}

		//collision linker balkje
		//lange zijde
		if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte && ALT_y < balkje->Hoogte + 50)){
    1158:	d0a7fd17 	ldw	r2,-24588(gp)
    115c:	10800558 	cmpnei	r2,r2,21
    1160:	10000c1e 	bne	r2,zero,1194 <Singleplayer+0x270>
    1164:	e0bffd17 	ldw	r2,-12(fp)
    1168:	10c00017 	ldw	r3,0(r2)
    116c:	d0a7fa17 	ldw	r2,-24600(gp)
    1170:	1880080e 	bge	r3,r2,1194 <Singleplayer+0x270>
    1174:	e0bffd17 	ldw	r2,-12(fp)
    1178:	10800017 	ldw	r2,0(r2)
    117c:	10800c84 	addi	r2,r2,50
    1180:	d0e7fa17 	ldw	r3,-24600(gp)
    1184:	1880030e 	bge	r3,r2,1194 <Singleplayer+0x270>
			ALT_inc_x = -(ALT_inc_x);
    1188:	d0a7fe17 	ldw	r2,-24584(gp)
    118c:	0085c83a 	sub	r2,zero,r2
    1190:	d0a7fe15 	stw	r2,-24584(gp)
		}
		//boven
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte){
    1194:	d0a7fd17 	ldw	r2,-24588(gp)
    1198:	10800608 	cmpgei	r2,r2,24
    119c:	10000a1e 	bne	r2,zero,11c8 <Singleplayer+0x2a4>
    11a0:	d0a7fd17 	ldw	r2,-24588(gp)
    11a4:	10800590 	cmplti	r2,r2,22
    11a8:	1000071e 	bne	r2,zero,11c8 <Singleplayer+0x2a4>
    11ac:	e0bffd17 	ldw	r2,-12(fp)
    11b0:	10c00017 	ldw	r3,0(r2)
    11b4:	d0a7fa17 	ldw	r2,-24600(gp)
    11b8:	1880031e 	bne	r3,r2,11c8 <Singleplayer+0x2a4>
			ALT_inc_y = -(ALT_inc_y);
    11bc:	d0a7fb17 	ldw	r2,-24596(gp)
    11c0:	0085c83a 	sub	r2,zero,r2
    11c4:	d0a7fb15 	stw	r2,-24596(gp)
		}
		//onder
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte + 50){
    11c8:	d0a7fd17 	ldw	r2,-24588(gp)
    11cc:	10800608 	cmpgei	r2,r2,24
    11d0:	10000b1e 	bne	r2,zero,1200 <Singleplayer+0x2dc>
    11d4:	d0a7fd17 	ldw	r2,-24588(gp)
    11d8:	10800590 	cmplti	r2,r2,22
    11dc:	1000081e 	bne	r2,zero,1200 <Singleplayer+0x2dc>
    11e0:	e0bffd17 	ldw	r2,-12(fp)
    11e4:	10800017 	ldw	r2,0(r2)
    11e8:	10c00c84 	addi	r3,r2,50
    11ec:	d0a7fa17 	ldw	r2,-24600(gp)
    11f0:	1880031e 	bne	r3,r2,1200 <Singleplayer+0x2dc>
			ALT_inc_y = -(ALT_inc_y);
    11f4:	d0a7fb17 	ldw	r2,-24596(gp)
    11f8:	0085c83a 	sub	r2,zero,r2
    11fc:	d0a7fb15 	stw	r2,-24596(gp)
		}



		OSTimeDly(1);
    1200:	01000044 	movi	r4,1
    1204:	000e8bc0 	call	e8bc <OSTimeDly>


	}
    1208:	003f6206 	br	f94 <__alt_mem_Flash_flash_data+0xf4000f94>

0000120c <nummer1>:
	
}

static void nummer1(int q){
    120c:	defffc04 	addi	sp,sp,-16
    1210:	dfc00315 	stw	ra,12(sp)
    1214:	df000215 	stw	fp,8(sp)
    1218:	df000204 	addi	fp,sp,8
    121c:	e13fff15 	stw	r4,-4(fp)
	X = checkIDScore(q);
    1220:	e13fff17 	ldw	r4,-4(fp)
    1224:	0002c6c0 	call	2c6c <checkIDScore>
    1228:	d0a80015 	stw	r2,-24576(gp)

	VGA_box(X + 5, 20, X+7, 60, wit);
    122c:	d0a80017 	ldw	r2,-24576(gp)
    1230:	11000144 	addi	r4,r2,5
    1234:	d0a80017 	ldw	r2,-24576(gp)
    1238:	10c001c4 	addi	r3,r2,7
    123c:	00804034 	movhi	r2,256
    1240:	10bfffc4 	addi	r2,r2,-1
    1244:	d8800015 	stw	r2,0(sp)
    1248:	01400504 	movi	r5,20
    124c:	180d883a 	mov	r6,r3
    1250:	01c00f04 	movi	r7,60
    1254:	00023640 	call	2364 <VGA_box>
}
    1258:	e037883a 	mov	sp,fp
    125c:	dfc00117 	ldw	ra,4(sp)
    1260:	df000017 	ldw	fp,0(sp)
    1264:	dec00204 	addi	sp,sp,8
    1268:	f800283a 	ret

0000126c <nummer2>:

static void nummer2(int q){
    126c:	defffc04 	addi	sp,sp,-16
    1270:	dfc00315 	stw	ra,12(sp)
    1274:	df000215 	stw	fp,8(sp)
    1278:	df000204 	addi	fp,sp,8
    127c:	e13fff15 	stw	r4,-4(fp)
	VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1280:	d1280017 	ldw	r4,-24576(gp)
    1284:	d0a80017 	ldw	r2,-24576(gp)
    1288:	10c00504 	addi	r3,r2,20
    128c:	00804034 	movhi	r2,256
    1290:	10bfffc4 	addi	r2,r2,-1
    1294:	d8800015 	stw	r2,0(sp)
    1298:	01400504 	movi	r5,20
    129c:	180d883a 	mov	r6,r3
    12a0:	01c00584 	movi	r7,22
    12a4:	00023640 	call	2364 <VGA_box>
	VGA_box(X + 18, 22, X+ 20, 38, wit);			//lijn naar beneden
    12a8:	d0a80017 	ldw	r2,-24576(gp)
    12ac:	11000484 	addi	r4,r2,18
    12b0:	d0a80017 	ldw	r2,-24576(gp)
    12b4:	10c00504 	addi	r3,r2,20
    12b8:	00804034 	movhi	r2,256
    12bc:	10bfffc4 	addi	r2,r2,-1
    12c0:	d8800015 	stw	r2,0(sp)
    12c4:	01400584 	movi	r5,22
    12c8:	180d883a 	mov	r6,r3
    12cc:	01c00984 	movi	r7,38
    12d0:	00023640 	call	2364 <VGA_box>
	VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    12d4:	d1280017 	ldw	r4,-24576(gp)
    12d8:	d0a80017 	ldw	r2,-24576(gp)
    12dc:	10c00504 	addi	r3,r2,20
    12e0:	00804034 	movhi	r2,256
    12e4:	10bfffc4 	addi	r2,r2,-1
    12e8:	d8800015 	stw	r2,0(sp)
    12ec:	01400984 	movi	r5,38
    12f0:	180d883a 	mov	r6,r3
    12f4:	01c00a04 	movi	r7,40
    12f8:	00023640 	call	2364 <VGA_box>
	VGA_box(X, 40, X+ 2, 58, wit);					//lijn naar beneden
    12fc:	d1280017 	ldw	r4,-24576(gp)
    1300:	d0a80017 	ldw	r2,-24576(gp)
    1304:	10c00084 	addi	r3,r2,2
    1308:	00804034 	movhi	r2,256
    130c:	10bfffc4 	addi	r2,r2,-1
    1310:	d8800015 	stw	r2,0(sp)
    1314:	01400a04 	movi	r5,40
    1318:	180d883a 	mov	r6,r3
    131c:	01c00e84 	movi	r7,58
    1320:	00023640 	call	2364 <VGA_box>
	VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    1324:	d1280017 	ldw	r4,-24576(gp)
    1328:	d0a80017 	ldw	r2,-24576(gp)
    132c:	10c00504 	addi	r3,r2,20
    1330:	00804034 	movhi	r2,256
    1334:	10bfffc4 	addi	r2,r2,-1
    1338:	d8800015 	stw	r2,0(sp)
    133c:	01400e84 	movi	r5,58
    1340:	180d883a 	mov	r6,r3
    1344:	01c00f04 	movi	r7,60
    1348:	00023640 	call	2364 <VGA_box>
}
    134c:	e037883a 	mov	sp,fp
    1350:	dfc00117 	ldw	ra,4(sp)
    1354:	df000017 	ldw	fp,0(sp)
    1358:	dec00204 	addi	sp,sp,8
    135c:	f800283a 	ret

00001360 <nummer3>:

static void nummer3(int q){
    1360:	defffc04 	addi	sp,sp,-16
    1364:	dfc00315 	stw	ra,12(sp)
    1368:	df000215 	stw	fp,8(sp)
    136c:	df000204 	addi	fp,sp,8
    1370:	e13fff15 	stw	r4,-4(fp)
	VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1374:	d1280017 	ldw	r4,-24576(gp)
    1378:	d0a80017 	ldw	r2,-24576(gp)
    137c:	10c00504 	addi	r3,r2,20
    1380:	00804034 	movhi	r2,256
    1384:	10bfffc4 	addi	r2,r2,-1
    1388:	d8800015 	stw	r2,0(sp)
    138c:	01400504 	movi	r5,20
    1390:	180d883a 	mov	r6,r3
    1394:	01c00584 	movi	r7,22
    1398:	00023640 	call	2364 <VGA_box>
	VGA_box(X + 18, 22, X+ 20, 60, wit);			//rechter lijn
    139c:	d0a80017 	ldw	r2,-24576(gp)
    13a0:	11000484 	addi	r4,r2,18
    13a4:	d0a80017 	ldw	r2,-24576(gp)
    13a8:	10c00504 	addi	r3,r2,20
    13ac:	00804034 	movhi	r2,256
    13b0:	10bfffc4 	addi	r2,r2,-1
    13b4:	d8800015 	stw	r2,0(sp)
    13b8:	01400584 	movi	r5,22
    13bc:	180d883a 	mov	r6,r3
    13c0:	01c00f04 	movi	r7,60
    13c4:	00023640 	call	2364 <VGA_box>
	VGA_box(X, 39, X+ 20, 41, wit);					//midden lijn
    13c8:	d1280017 	ldw	r4,-24576(gp)
    13cc:	d0a80017 	ldw	r2,-24576(gp)
    13d0:	10c00504 	addi	r3,r2,20
    13d4:	00804034 	movhi	r2,256
    13d8:	10bfffc4 	addi	r2,r2,-1
    13dc:	d8800015 	stw	r2,0(sp)
    13e0:	014009c4 	movi	r5,39
    13e4:	180d883a 	mov	r6,r3
    13e8:	01c00a44 	movi	r7,41
    13ec:	00023640 	call	2364 <VGA_box>
	VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    13f0:	d1280017 	ldw	r4,-24576(gp)
    13f4:	d0a80017 	ldw	r2,-24576(gp)
    13f8:	10c00504 	addi	r3,r2,20
    13fc:	00804034 	movhi	r2,256
    1400:	10bfffc4 	addi	r2,r2,-1
    1404:	d8800015 	stw	r2,0(sp)
    1408:	01400e84 	movi	r5,58
    140c:	180d883a 	mov	r6,r3
    1410:	01c00f04 	movi	r7,60
    1414:	00023640 	call	2364 <VGA_box>
}
    1418:	e037883a 	mov	sp,fp
    141c:	dfc00117 	ldw	ra,4(sp)
    1420:	df000017 	ldw	fp,0(sp)
    1424:	dec00204 	addi	sp,sp,8
    1428:	f800283a 	ret

0000142c <nummer4>:

static void nummer4(int q){
    142c:	defffc04 	addi	sp,sp,-16
    1430:	dfc00315 	stw	ra,12(sp)
    1434:	df000215 	stw	fp,8(sp)
    1438:	df000204 	addi	fp,sp,8
    143c:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    1440:	d1280017 	ldw	r4,-24576(gp)
    1444:	d0a80017 	ldw	r2,-24576(gp)
    1448:	10c00084 	addi	r3,r2,2
    144c:	00804034 	movhi	r2,256
    1450:	10bfffc4 	addi	r2,r2,-1
    1454:	d8800015 	stw	r2,0(sp)
    1458:	01400504 	movi	r5,20
    145c:	180d883a 	mov	r6,r3
    1460:	01c00a04 	movi	r7,40
    1464:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    1468:	d1280017 	ldw	r4,-24576(gp)
    146c:	d0a80017 	ldw	r2,-24576(gp)
    1470:	10c00504 	addi	r3,r2,20
    1474:	00804034 	movhi	r2,256
    1478:	10bfffc4 	addi	r2,r2,-1
    147c:	d8800015 	stw	r2,0(sp)
    1480:	014009c4 	movi	r5,39
    1484:	180d883a 	mov	r6,r3
    1488:	01c00a44 	movi	r7,41
    148c:	00023640 	call	2364 <VGA_box>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1490:	d0a80017 	ldw	r2,-24576(gp)
    1494:	11000484 	addi	r4,r2,18
    1498:	d0a80017 	ldw	r2,-24576(gp)
    149c:	10c00504 	addi	r3,r2,20
    14a0:	00804034 	movhi	r2,256
    14a4:	10bfffc4 	addi	r2,r2,-1
    14a8:	d8800015 	stw	r2,0(sp)
    14ac:	01400504 	movi	r5,20
    14b0:	180d883a 	mov	r6,r3
    14b4:	01c00f04 	movi	r7,60
    14b8:	00023640 	call	2364 <VGA_box>
}
    14bc:	e037883a 	mov	sp,fp
    14c0:	dfc00117 	ldw	ra,4(sp)
    14c4:	df000017 	ldw	fp,0(sp)
    14c8:	dec00204 	addi	sp,sp,8
    14cc:	f800283a 	ret

000014d0 <nummer5>:

static void nummer5(int q){
    14d0:	defffc04 	addi	sp,sp,-16
    14d4:	dfc00315 	stw	ra,12(sp)
    14d8:	df000215 	stw	fp,8(sp)
    14dc:	df000204 	addi	fp,sp,8
    14e0:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    14e4:	d1280017 	ldw	r4,-24576(gp)
    14e8:	d0a80017 	ldw	r2,-24576(gp)
    14ec:	10c00504 	addi	r3,r2,20
    14f0:	00804034 	movhi	r2,256
    14f4:	10bfffc4 	addi	r2,r2,-1
    14f8:	d8800015 	stw	r2,0(sp)
    14fc:	01400504 	movi	r5,20
    1500:	180d883a 	mov	r6,r3
    1504:	01c00584 	movi	r7,22
    1508:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 22, X+ 2, 38, wit);					//lijn naar beneden
    150c:	d1280017 	ldw	r4,-24576(gp)
    1510:	d0a80017 	ldw	r2,-24576(gp)
    1514:	10c00084 	addi	r3,r2,2
    1518:	00804034 	movhi	r2,256
    151c:	10bfffc4 	addi	r2,r2,-1
    1520:	d8800015 	stw	r2,0(sp)
    1524:	01400584 	movi	r5,22
    1528:	180d883a 	mov	r6,r3
    152c:	01c00984 	movi	r7,38
    1530:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    1534:	d1280017 	ldw	r4,-24576(gp)
    1538:	d0a80017 	ldw	r2,-24576(gp)
    153c:	10c00504 	addi	r3,r2,20
    1540:	00804034 	movhi	r2,256
    1544:	10bfffc4 	addi	r2,r2,-1
    1548:	d8800015 	stw	r2,0(sp)
    154c:	01400984 	movi	r5,38
    1550:	180d883a 	mov	r6,r3
    1554:	01c00a04 	movi	r7,40
    1558:	00023640 	call	2364 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn naar beneden
    155c:	d0a80017 	ldw	r2,-24576(gp)
    1560:	11000484 	addi	r4,r2,18
    1564:	d0a80017 	ldw	r2,-24576(gp)
    1568:	10c00504 	addi	r3,r2,20
    156c:	00804034 	movhi	r2,256
    1570:	10bfffc4 	addi	r2,r2,-1
    1574:	d8800015 	stw	r2,0(sp)
    1578:	01400a04 	movi	r5,40
    157c:	180d883a 	mov	r6,r3
    1580:	01c00e84 	movi	r7,58
    1584:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    1588:	d1280017 	ldw	r4,-24576(gp)
    158c:	d0a80017 	ldw	r2,-24576(gp)
    1590:	10c00504 	addi	r3,r2,20
    1594:	00804034 	movhi	r2,256
    1598:	10bfffc4 	addi	r2,r2,-1
    159c:	d8800015 	stw	r2,0(sp)
    15a0:	01400e84 	movi	r5,58
    15a4:	180d883a 	mov	r6,r3
    15a8:	01c00f04 	movi	r7,60
    15ac:	00023640 	call	2364 <VGA_box>
}
    15b0:	e037883a 	mov	sp,fp
    15b4:	dfc00117 	ldw	ra,4(sp)
    15b8:	df000017 	ldw	fp,0(sp)
    15bc:	dec00204 	addi	sp,sp,8
    15c0:	f800283a 	ret

000015c4 <nummer6>:

static void nummer6(int q){
    15c4:	defffc04 	addi	sp,sp,-16
    15c8:	dfc00315 	stw	ra,12(sp)
    15cc:	df000215 	stw	fp,8(sp)
    15d0:	df000204 	addi	fp,sp,8
    15d4:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    15d8:	d1280017 	ldw	r4,-24576(gp)
    15dc:	d0a80017 	ldw	r2,-24576(gp)
    15e0:	10c00084 	addi	r3,r2,2
    15e4:	00804034 	movhi	r2,256
    15e8:	10bfffc4 	addi	r2,r2,-1
    15ec:	d8800015 	stw	r2,0(sp)
    15f0:	01400504 	movi	r5,20
    15f4:	180d883a 	mov	r6,r3
    15f8:	01c00f04 	movi	r7,60
    15fc:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1600:	d1280017 	ldw	r4,-24576(gp)
    1604:	d0a80017 	ldw	r2,-24576(gp)
    1608:	10c00504 	addi	r3,r2,20
    160c:	00804034 	movhi	r2,256
    1610:	10bfffc4 	addi	r2,r2,-1
    1614:	d8800015 	stw	r2,0(sp)
    1618:	01400504 	movi	r5,20
    161c:	180d883a 	mov	r6,r3
    1620:	01c00584 	movi	r7,22
    1624:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    1628:	d1280017 	ldw	r4,-24576(gp)
    162c:	d0a80017 	ldw	r2,-24576(gp)
    1630:	10c00504 	addi	r3,r2,20
    1634:	00804034 	movhi	r2,256
    1638:	10bfffc4 	addi	r2,r2,-1
    163c:	d8800015 	stw	r2,0(sp)
    1640:	01400e84 	movi	r5,58
    1644:	180d883a 	mov	r6,r3
    1648:	01c00f04 	movi	r7,60
    164c:	00023640 	call	2364 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn rechts
    1650:	d0a80017 	ldw	r2,-24576(gp)
    1654:	11000484 	addi	r4,r2,18
    1658:	d0a80017 	ldw	r2,-24576(gp)
    165c:	10c00504 	addi	r3,r2,20
    1660:	00804034 	movhi	r2,256
    1664:	10bfffc4 	addi	r2,r2,-1
    1668:	d8800015 	stw	r2,0(sp)
    166c:	01400a04 	movi	r5,40
    1670:	180d883a 	mov	r6,r3
    1674:	01c00e84 	movi	r7,58
    1678:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    167c:	d1280017 	ldw	r4,-24576(gp)
    1680:	d0a80017 	ldw	r2,-24576(gp)
    1684:	10c00504 	addi	r3,r2,20
    1688:	00804034 	movhi	r2,256
    168c:	10bfffc4 	addi	r2,r2,-1
    1690:	d8800015 	stw	r2,0(sp)
    1694:	014009c4 	movi	r5,39
    1698:	180d883a 	mov	r6,r3
    169c:	01c00a44 	movi	r7,41
    16a0:	00023640 	call	2364 <VGA_box>
}
    16a4:	e037883a 	mov	sp,fp
    16a8:	dfc00117 	ldw	ra,4(sp)
    16ac:	df000017 	ldw	fp,0(sp)
    16b0:	dec00204 	addi	sp,sp,8
    16b4:	f800283a 	ret

000016b8 <nummer7>:

static void nummer7(int q){
    16b8:	defffc04 	addi	sp,sp,-16
    16bc:	dfc00315 	stw	ra,12(sp)
    16c0:	df000215 	stw	fp,8(sp)
    16c4:	df000204 	addi	fp,sp,8
    16c8:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    16cc:	d0a80017 	ldw	r2,-24576(gp)
    16d0:	11000484 	addi	r4,r2,18
    16d4:	d0a80017 	ldw	r2,-24576(gp)
    16d8:	10c00504 	addi	r3,r2,20
    16dc:	00804034 	movhi	r2,256
    16e0:	10bfffc4 	addi	r2,r2,-1
    16e4:	d8800015 	stw	r2,0(sp)
    16e8:	01400504 	movi	r5,20
    16ec:	180d883a 	mov	r6,r3
    16f0:	01c00f04 	movi	r7,60
    16f4:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    16f8:	d1280017 	ldw	r4,-24576(gp)
    16fc:	d0a80017 	ldw	r2,-24576(gp)
    1700:	10c00504 	addi	r3,r2,20
    1704:	00804034 	movhi	r2,256
    1708:	10bfffc4 	addi	r2,r2,-1
    170c:	d8800015 	stw	r2,0(sp)
    1710:	01400504 	movi	r5,20
    1714:	180d883a 	mov	r6,r3
    1718:	01c00584 	movi	r7,22
    171c:	00023640 	call	2364 <VGA_box>
}
    1720:	e037883a 	mov	sp,fp
    1724:	dfc00117 	ldw	ra,4(sp)
    1728:	df000017 	ldw	fp,0(sp)
    172c:	dec00204 	addi	sp,sp,8
    1730:	f800283a 	ret

00001734 <nummer8>:

static void nummer8(int q){
    1734:	defffc04 	addi	sp,sp,-16
    1738:	dfc00315 	stw	ra,12(sp)
    173c:	df000215 	stw	fp,8(sp)
    1740:	df000204 	addi	fp,sp,8
    1744:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1748:	d0a80017 	ldw	r2,-24576(gp)
    174c:	11000484 	addi	r4,r2,18
    1750:	d0a80017 	ldw	r2,-24576(gp)
    1754:	10c00504 	addi	r3,r2,20
    1758:	00804034 	movhi	r2,256
    175c:	10bfffc4 	addi	r2,r2,-1
    1760:	d8800015 	stw	r2,0(sp)
    1764:	01400504 	movi	r5,20
    1768:	180d883a 	mov	r6,r3
    176c:	01c00f04 	movi	r7,60
    1770:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    1774:	d1280017 	ldw	r4,-24576(gp)
    1778:	d0a80017 	ldw	r2,-24576(gp)
    177c:	10c00084 	addi	r3,r2,2
    1780:	00804034 	movhi	r2,256
    1784:	10bfffc4 	addi	r2,r2,-1
    1788:	d8800015 	stw	r2,0(sp)
    178c:	01400504 	movi	r5,20
    1790:	180d883a 	mov	r6,r3
    1794:	01c00f04 	movi	r7,60
    1798:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    179c:	d1280017 	ldw	r4,-24576(gp)
    17a0:	d0a80017 	ldw	r2,-24576(gp)
    17a4:	10c00504 	addi	r3,r2,20
    17a8:	00804034 	movhi	r2,256
    17ac:	10bfffc4 	addi	r2,r2,-1
    17b0:	d8800015 	stw	r2,0(sp)
    17b4:	01400504 	movi	r5,20
    17b8:	180d883a 	mov	r6,r3
    17bc:	01c00584 	movi	r7,22
    17c0:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    17c4:	d1280017 	ldw	r4,-24576(gp)
    17c8:	d0a80017 	ldw	r2,-24576(gp)
    17cc:	10c00504 	addi	r3,r2,20
    17d0:	00804034 	movhi	r2,256
    17d4:	10bfffc4 	addi	r2,r2,-1
    17d8:	d8800015 	stw	r2,0(sp)
    17dc:	014009c4 	movi	r5,39
    17e0:	180d883a 	mov	r6,r3
    17e4:	01c00a44 	movi	r7,41
    17e8:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    17ec:	d1280017 	ldw	r4,-24576(gp)
    17f0:	d0a80017 	ldw	r2,-24576(gp)
    17f4:	10c00504 	addi	r3,r2,20
    17f8:	00804034 	movhi	r2,256
    17fc:	10bfffc4 	addi	r2,r2,-1
    1800:	d8800015 	stw	r2,0(sp)
    1804:	01400e84 	movi	r5,58
    1808:	180d883a 	mov	r6,r3
    180c:	01c00f04 	movi	r7,60
    1810:	00023640 	call	2364 <VGA_box>
}
    1814:	e037883a 	mov	sp,fp
    1818:	dfc00117 	ldw	ra,4(sp)
    181c:	df000017 	ldw	fp,0(sp)
    1820:	dec00204 	addi	sp,sp,8
    1824:	f800283a 	ret

00001828 <nummer9>:

static void nummer9(int q){
    1828:	defffc04 	addi	sp,sp,-16
    182c:	dfc00315 	stw	ra,12(sp)
    1830:	df000215 	stw	fp,8(sp)
    1834:	df000204 	addi	fp,sp,8
    1838:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    183c:	d0a80017 	ldw	r2,-24576(gp)
    1840:	11000484 	addi	r4,r2,18
    1844:	d0a80017 	ldw	r2,-24576(gp)
    1848:	10c00504 	addi	r3,r2,20
    184c:	00804034 	movhi	r2,256
    1850:	10bfffc4 	addi	r2,r2,-1
    1854:	d8800015 	stw	r2,0(sp)
    1858:	01400504 	movi	r5,20
    185c:	180d883a 	mov	r6,r3
    1860:	01c00f04 	movi	r7,60
    1864:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    1868:	d1280017 	ldw	r4,-24576(gp)
    186c:	d0a80017 	ldw	r2,-24576(gp)
    1870:	10c00084 	addi	r3,r2,2
    1874:	00804034 	movhi	r2,256
    1878:	10bfffc4 	addi	r2,r2,-1
    187c:	d8800015 	stw	r2,0(sp)
    1880:	01400504 	movi	r5,20
    1884:	180d883a 	mov	r6,r3
    1888:	01c00a04 	movi	r7,40
    188c:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1890:	d1280017 	ldw	r4,-24576(gp)
    1894:	d0a80017 	ldw	r2,-24576(gp)
    1898:	10c00504 	addi	r3,r2,20
    189c:	00804034 	movhi	r2,256
    18a0:	10bfffc4 	addi	r2,r2,-1
    18a4:	d8800015 	stw	r2,0(sp)
    18a8:	01400504 	movi	r5,20
    18ac:	180d883a 	mov	r6,r3
    18b0:	01c00584 	movi	r7,22
    18b4:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    18b8:	d1280017 	ldw	r4,-24576(gp)
    18bc:	d0a80017 	ldw	r2,-24576(gp)
    18c0:	10c00504 	addi	r3,r2,20
    18c4:	00804034 	movhi	r2,256
    18c8:	10bfffc4 	addi	r2,r2,-1
    18cc:	d8800015 	stw	r2,0(sp)
    18d0:	014009c4 	movi	r5,39
    18d4:	180d883a 	mov	r6,r3
    18d8:	01c00a44 	movi	r7,41
    18dc:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    18e0:	d1280017 	ldw	r4,-24576(gp)
    18e4:	d0a80017 	ldw	r2,-24576(gp)
    18e8:	10c00504 	addi	r3,r2,20
    18ec:	00804034 	movhi	r2,256
    18f0:	10bfffc4 	addi	r2,r2,-1
    18f4:	d8800015 	stw	r2,0(sp)
    18f8:	01400e84 	movi	r5,58
    18fc:	180d883a 	mov	r6,r3
    1900:	01c00f04 	movi	r7,60
    1904:	00023640 	call	2364 <VGA_box>
}
    1908:	e037883a 	mov	sp,fp
    190c:	dfc00117 	ldw	ra,4(sp)
    1910:	df000017 	ldw	fp,0(sp)
    1914:	dec00204 	addi	sp,sp,8
    1918:	f800283a 	ret

0000191c <nummer0>:

static void nummer0(int q){
    191c:	defffc04 	addi	sp,sp,-16
    1920:	dfc00315 	stw	ra,12(sp)
    1924:	df000215 	stw	fp,8(sp)
    1928:	df000204 	addi	fp,sp,8
    192c:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1930:	d0a80017 	ldw	r2,-24576(gp)
    1934:	11000484 	addi	r4,r2,18
    1938:	d0a80017 	ldw	r2,-24576(gp)
    193c:	10c00504 	addi	r3,r2,20
    1940:	00804034 	movhi	r2,256
    1944:	10bfffc4 	addi	r2,r2,-1
    1948:	d8800015 	stw	r2,0(sp)
    194c:	01400504 	movi	r5,20
    1950:	180d883a 	mov	r6,r3
    1954:	01c00f04 	movi	r7,60
    1958:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    195c:	d1280017 	ldw	r4,-24576(gp)
    1960:	d0a80017 	ldw	r2,-24576(gp)
    1964:	10c00084 	addi	r3,r2,2
    1968:	00804034 	movhi	r2,256
    196c:	10bfffc4 	addi	r2,r2,-1
    1970:	d8800015 	stw	r2,0(sp)
    1974:	01400504 	movi	r5,20
    1978:	180d883a 	mov	r6,r3
    197c:	01c00f04 	movi	r7,60
    1980:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1984:	d1280017 	ldw	r4,-24576(gp)
    1988:	d0a80017 	ldw	r2,-24576(gp)
    198c:	10c00504 	addi	r3,r2,20
    1990:	00804034 	movhi	r2,256
    1994:	10bfffc4 	addi	r2,r2,-1
    1998:	d8800015 	stw	r2,0(sp)
    199c:	01400504 	movi	r5,20
    19a0:	180d883a 	mov	r6,r3
    19a4:	01c00584 	movi	r7,22
    19a8:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    19ac:	d1280017 	ldw	r4,-24576(gp)
    19b0:	d0a80017 	ldw	r2,-24576(gp)
    19b4:	10c00504 	addi	r3,r2,20
    19b8:	00804034 	movhi	r2,256
    19bc:	10bfffc4 	addi	r2,r2,-1
    19c0:	d8800015 	stw	r2,0(sp)
    19c4:	01400e84 	movi	r5,58
    19c8:	180d883a 	mov	r6,r3
    19cc:	01c00f04 	movi	r7,60
    19d0:	00023640 	call	2364 <VGA_box>
}
    19d4:	e037883a 	mov	sp,fp
    19d8:	dfc00117 	ldw	ra,4(sp)
    19dc:	df000017 	ldw	fp,0(sp)
    19e0:	dec00204 	addi	sp,sp,8
    19e4:	f800283a 	ret

000019e8 <exec>:

void(*nummer[])(void) = { nummer0, nummer1, nummer2, nummer3, nummer4, nummer5, nummer6, nummer7, nummer8, nummer9 };

void exec(int value)
{
    19e8:	defffd04 	addi	sp,sp,-12
    19ec:	dfc00215 	stw	ra,8(sp)
    19f0:	df000115 	stw	fp,4(sp)
    19f4:	df000104 	addi	fp,sp,4
    19f8:	e13fff15 	stw	r4,-4(fp)
	if (value) {
    19fc:	e0bfff17 	ldw	r2,-4(fp)
    1a00:	10001126 	beq	r2,zero,1a48 <exec+0x60>
		exec(value / 10);
    1a04:	e0ffff17 	ldw	r3,-4(fp)
    1a08:	00800284 	movi	r2,10
    1a0c:	1885283a 	div	r2,r3,r2
    1a10:	1009883a 	mov	r4,r2
    1a14:	00019e80 	call	19e8 <exec>
		nummer[value % 10]();
    1a18:	e0bfff17 	ldw	r2,-4(fp)
    1a1c:	00c00284 	movi	r3,10
    1a20:	10c7283a 	div	r3,r2,r3
    1a24:	18c002a4 	muli	r3,r3,10
    1a28:	10c7c83a 	sub	r3,r2,r3
    1a2c:	00800074 	movhi	r2,1
    1a30:	108c3904 	addi	r2,r2,12516
    1a34:	18c7883a 	add	r3,r3,r3
    1a38:	18c7883a 	add	r3,r3,r3
    1a3c:	10c5883a 	add	r2,r2,r3
    1a40:	10800017 	ldw	r2,0(r2)
    1a44:	103ee83a 	callr	r2
	}
}
    1a48:	e037883a 	mov	sp,fp
    1a4c:	dfc00117 	ldw	ra,4(sp)
    1a50:	df000017 	ldw	fp,0(sp)
    1a54:	dec00204 	addi	sp,sp,8
    1a58:	f800283a 	ret

00001a5c <menu>:
int eenkeer = 1;
int onePress = 1;
int last;
int changed;

void menu(void* pdata){
    1a5c:	defffa04 	addi	sp,sp,-24
    1a60:	dfc00515 	stw	ra,20(sp)
    1a64:	df000415 	stw	fp,16(sp)
    1a68:	df000404 	addi	fp,sp,16
    1a6c:	e13fff15 	stw	r4,-4(fp)
	int ID = (int*)pdata;
    1a70:	e0bfff17 	ldw	r2,-4(fp)
    1a74:	e0bffd15 	stw	r2,-12(fp)
	INT8U err;

	teken_menu();
    1a78:	00020880 	call	2088 <teken_menu>

	while(1){
		OSFlagPend(Flags, Menu_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    1a7c:	d0e7f217 	ldw	r3,-24632(gp)
    1a80:	e0bffe04 	addi	r2,fp,-8
    1a84:	d8800015 	stw	r2,0(sp)
    1a88:	1809883a 	mov	r4,r3
    1a8c:	01400044 	movi	r5,1
    1a90:	000d883a 	mov	r6,zero
    1a94:	000f883a 	mov	r7,zero
    1a98:	00090a80 	call	90a8 <OSFlagPend>

		if (controller(ID) == 1){
    1a9c:	e13ffd17 	ldw	r4,-12(fp)
    1aa0:	000035c0 	call	35c <controller>
    1aa4:	10800058 	cmpnei	r2,r2,1
    1aa8:	1000111e 	bne	r2,zero,1af0 <menu+0x94>
			if(changed != 0){
    1aac:	d0a80317 	ldw	r2,-24564(gp)
    1ab0:	10000926 	beq	r2,zero,1ad8 <menu+0x7c>
				gameModeMenu++;
    1ab4:	d0a00217 	ldw	r2,-32760(gp)
    1ab8:	10800044 	addi	r2,r2,1
    1abc:	d0a00215 	stw	r2,-32760(gp)
				eenkeer = 1;
    1ac0:	00800044 	movi	r2,1
    1ac4:	d0a00915 	stw	r2,-32732(gp)
				changed=0;
    1ac8:	d0280315 	stw	zero,-24564(gp)
				printf("heeft 1 gereturned \n");
    1acc:	01000074 	movhi	r4,1
    1ad0:	210b5004 	addi	r4,r4,11584
    1ad4:	0002d740 	call	2d74 <puts>
			}
			if (gameModeMenu >= 5){
    1ad8:	d0a00217 	ldw	r2,-32760(gp)
    1adc:	10800150 	cmplti	r2,r2,5
    1ae0:	1000161e 	bne	r2,zero,1b3c <menu+0xe0>
				gameModeMenu = 1;
    1ae4:	00800044 	movi	r2,1
    1ae8:	d0a00215 	stw	r2,-32760(gp)
    1aec:	00001306 	br	1b3c <menu+0xe0>
			}
		} else if (controller(ID) == 0){
    1af0:	e13ffd17 	ldw	r4,-12(fp)
    1af4:	000035c0 	call	35c <controller>
    1af8:	1000101e 	bne	r2,zero,1b3c <menu+0xe0>
			if(changed !=0){
    1afc:	d0a80317 	ldw	r2,-24564(gp)
    1b00:	10000a26 	beq	r2,zero,1b2c <menu+0xd0>
				gameModeMenu--;
    1b04:	d0a00217 	ldw	r2,-32760(gp)
    1b08:	10bfffc4 	addi	r2,r2,-1
    1b0c:	d0a00215 	stw	r2,-32760(gp)
				last=0;
    1b10:	d0280215 	stw	zero,-24568(gp)
				changed=0;
    1b14:	d0280315 	stw	zero,-24564(gp)
				eenkeer = 1;
    1b18:	00800044 	movi	r2,1
    1b1c:	d0a00915 	stw	r2,-32732(gp)
				printf("heeft 0 gereturned \n");
    1b20:	01000074 	movhi	r4,1
    1b24:	210b5504 	addi	r4,r4,11604
    1b28:	0002d740 	call	2d74 <puts>
			}
			if (gameModeMenu <= 0){
    1b2c:	d0a00217 	ldw	r2,-32760(gp)
    1b30:	00800216 	blt	zero,r2,1b3c <menu+0xe0>
				gameModeMenu = 4;
    1b34:	00800104 	movi	r2,4
    1b38:	d0a00215 	stw	r2,-32760(gp)
			}
		}
		OSTimeDly(20);
    1b3c:	01000504 	movi	r4,20
    1b40:	000e8bc0 	call	e8bc <OSTimeDly>
	}
    1b44:	003fcd06 	br	1a7c <__alt_mem_Flash_flash_data+0xf4001a7c>

00001b48 <selecteerMenu>:

}

void selecteerMenu(void *pdata){
    1b48:	defffa04 	addi	sp,sp,-24
    1b4c:	dfc00515 	stw	ra,20(sp)
    1b50:	df000415 	stw	fp,16(sp)
    1b54:	df000404 	addi	fp,sp,16
    1b58:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	int ID = (int*)pdata;
    1b5c:	e0bfff17 	ldw	r2,-4(fp)
    1b60:	e0bffd15 	stw	r2,-12(fp)



	while(1){
	OSFlagPend(Flags, Menu2_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    1b64:	d0e7f217 	ldw	r3,-24632(gp)
    1b68:	e0bffe04 	addi	r2,fp,-8
    1b6c:	d8800015 	stw	r2,0(sp)
    1b70:	1809883a 	mov	r4,r3
    1b74:	01400404 	movi	r5,16
    1b78:	000d883a 	mov	r6,zero
    1b7c:	000f883a 	mov	r7,zero
    1b80:	00090a80 	call	90a8 <OSFlagPend>

		if (gameModeMenu == 1){
    1b84:	d0a00217 	ldw	r2,-32760(gp)
    1b88:	10800058 	cmpnei	r2,r2,1
    1b8c:	10003a1e 	bne	r2,zero,1c78 <selecteerMenu+0x130>
			if(eenkeer == 1){
    1b90:	d0a00917 	ldw	r2,-32732(gp)
    1b94:	10800058 	cmpnei	r2,r2,1
    1b98:	10001f1e 	bne	r2,zero,1c18 <selecteerMenu+0xd0>
				clearScreen();
    1b9c:	0001ec80 	call	1ec8 <clearScreen>
				VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
    1ba0:	d0a00317 	ldw	r2,-32756(gp)
    1ba4:	1085883a 	add	r2,r2,r2
    1ba8:	1085883a 	add	r2,r2,r2
    1bac:	1009883a 	mov	r4,r2
    1bb0:	d0a00517 	ldw	r2,-32748(gp)
    1bb4:	1085883a 	add	r2,r2,r2
    1bb8:	1085883a 	add	r2,r2,r2
    1bbc:	100b883a 	mov	r5,r2
    1bc0:	d0a00417 	ldw	r2,-32752(gp)
    1bc4:	1085883a 	add	r2,r2,r2
    1bc8:	1085883a 	add	r2,r2,r2
    1bcc:	100d883a 	mov	r6,r2
    1bd0:	d0a00617 	ldw	r2,-32744(gp)
    1bd4:	1085883a 	add	r2,r2,r2
    1bd8:	1085883a 	add	r2,r2,r2
    1bdc:	1007883a 	mov	r3,r2
    1be0:	00be0014 	movui	r2,63488
    1be4:	d8800015 	stw	r2,0(sp)
    1be8:	180f883a 	mov	r7,r3
    1bec:	00023640 	call	2364 <VGA_box>
				VGA_text (xMenu, yMenu, "Singleplayer");
    1bf0:	d0e00717 	ldw	r3,-32740(gp)
    1bf4:	d0a00817 	ldw	r2,-32736(gp)
    1bf8:	1809883a 	mov	r4,r3
    1bfc:	100b883a 	mov	r5,r2
    1c00:	01800074 	movhi	r6,1
    1c04:	318b5a04 	addi	r6,r6,11624
    1c08:	00024180 	call	2418 <VGA_text>
				eenkeer = 0;
    1c0c:	d0200915 	stw	zero,-32732(gp)
				changed = 1;
    1c10:	00800044 	movi	r2,1
    1c14:	d0a80315 	stw	r2,-24564(gp)
			}
			if(controller(ID) == 2){
    1c18:	e13ffd17 	ldw	r4,-12(fp)
    1c1c:	000035c0 	call	35c <controller>
    1c20:	10800098 	cmpnei	r2,r2,2
    1c24:	1000a51e 	bne	r2,zero,1ebc <selecteerMenu+0x374>
				clearScreen();
    1c28:	0001ec80 	call	1ec8 <clearScreen>
				clearText();
    1c2c:	0001f080 	call	1f08 <clearText>
				printf("start Singleplayer\n");
    1c30:	01000074 	movhi	r4,1
    1c34:	210b5e04 	addi	r4,r4,11640
    1c38:	0002d740 	call	2d74 <puts>
				OSFlagPost(Flags, Singleplayer_Flag + C1_Flag, OS_FLAG_CLR, &err);
    1c3c:	d0e7f217 	ldw	r3,-24632(gp)
    1c40:	e0bffe04 	addi	r2,fp,-8
    1c44:	1809883a 	mov	r4,r3
    1c48:	01400904 	movi	r5,36
    1c4c:	000d883a 	mov	r6,zero
    1c50:	100f883a 	mov	r7,r2
    1c54:	00097000 	call	9700 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag + C2_Flag, OS_FLAG_SET, &err);
    1c58:	d0e7f217 	ldw	r3,-24632(gp)
    1c5c:	e0bffe04 	addi	r2,fp,-8
    1c60:	1809883a 	mov	r4,r3
    1c64:	01400644 	movi	r5,25
    1c68:	01800044 	movi	r6,1
    1c6c:	100f883a 	mov	r7,r2
    1c70:	00097000 	call	9700 <OSFlagPost>
    1c74:	00009106 	br	1ebc <selecteerMenu+0x374>
			}
		} else if (gameModeMenu == 2){
    1c78:	d0a00217 	ldw	r2,-32760(gp)
    1c7c:	10800098 	cmpnei	r2,r2,2
    1c80:	10003d1e 	bne	r2,zero,1d78 <selecteerMenu+0x230>
			if(eenkeer == 1){
    1c84:	d0a00917 	ldw	r2,-32732(gp)
    1c88:	10800058 	cmpnei	r2,r2,1
    1c8c:	1000221e 	bne	r2,zero,1d18 <selecteerMenu+0x1d0>
				clearScreen();
    1c90:	0001ec80 	call	1ec8 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    1c94:	d0a00317 	ldw	r2,-32756(gp)
    1c98:	1085883a 	add	r2,r2,r2
    1c9c:	1085883a 	add	r2,r2,r2
    1ca0:	1009883a 	mov	r4,r2
    1ca4:	d0a00517 	ldw	r2,-32748(gp)
    1ca8:	10800104 	addi	r2,r2,4
    1cac:	1085883a 	add	r2,r2,r2
    1cb0:	1085883a 	add	r2,r2,r2
    1cb4:	100b883a 	mov	r5,r2
    1cb8:	d0a00417 	ldw	r2,-32752(gp)
    1cbc:	1085883a 	add	r2,r2,r2
    1cc0:	1085883a 	add	r2,r2,r2
    1cc4:	100d883a 	mov	r6,r2
    1cc8:	d0a00617 	ldw	r2,-32744(gp)
    1ccc:	10800104 	addi	r2,r2,4
    1cd0:	1085883a 	add	r2,r2,r2
    1cd4:	1085883a 	add	r2,r2,r2
    1cd8:	1007883a 	mov	r3,r2
    1cdc:	00be0014 	movui	r2,63488
    1ce0:	d8800015 	stw	r2,0(sp)
    1ce4:	180f883a 	mov	r7,r3
    1ce8:	00023640 	call	2364 <VGA_box>
				VGA_text (xMenu, yMenu + 4, "Multiplayer");
    1cec:	d0e00717 	ldw	r3,-32740(gp)
    1cf0:	d0a00817 	ldw	r2,-32736(gp)
    1cf4:	10800104 	addi	r2,r2,4
    1cf8:	1809883a 	mov	r4,r3
    1cfc:	100b883a 	mov	r5,r2
    1d00:	01800074 	movhi	r6,1
    1d04:	318b6304 	addi	r6,r6,11660
    1d08:	00024180 	call	2418 <VGA_text>
				eenkeer = 0;
    1d0c:	d0200915 	stw	zero,-32732(gp)
				changed = 1;
    1d10:	00800044 	movi	r2,1
    1d14:	d0a80315 	stw	r2,-24564(gp)
			}
			if(controller(ID) == 2){
    1d18:	e13ffd17 	ldw	r4,-12(fp)
    1d1c:	000035c0 	call	35c <controller>
    1d20:	10800098 	cmpnei	r2,r2,2
    1d24:	1000651e 	bne	r2,zero,1ebc <selecteerMenu+0x374>
				clearScreen();
    1d28:	0001ec80 	call	1ec8 <clearScreen>
				clearText();
    1d2c:	0001f080 	call	1f08 <clearText>
				printf("start game\n");
    1d30:	01000074 	movhi	r4,1
    1d34:	210b6604 	addi	r4,r4,11672
    1d38:	0002d740 	call	2d74 <puts>
				OSFlagPost(Flags, Game_Flag + C1_Flag + C2_Flag, OS_FLAG_CLR, &err);
    1d3c:	d0e7f217 	ldw	r3,-24632(gp)
    1d40:	e0bffe04 	addi	r2,fp,-8
    1d44:	1809883a 	mov	r4,r3
    1d48:	01400384 	movi	r5,14
    1d4c:	000d883a 	mov	r6,zero
    1d50:	100f883a 	mov	r7,r2
    1d54:	00097000 	call	9700 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    1d58:	d0e7f217 	ldw	r3,-24632(gp)
    1d5c:	e0bffe04 	addi	r2,fp,-8
    1d60:	1809883a 	mov	r4,r3
    1d64:	01400444 	movi	r5,17
    1d68:	01800044 	movi	r6,1
    1d6c:	100f883a 	mov	r7,r2
    1d70:	00097000 	call	9700 <OSFlagPost>
    1d74:	00005106 	br	1ebc <selecteerMenu+0x374>
			}

		} else if (gameModeMenu == 3){
    1d78:	d0a00217 	ldw	r2,-32760(gp)
    1d7c:	108000d8 	cmpnei	r2,r2,3
    1d80:	1000261e 	bne	r2,zero,1e1c <selecteerMenu+0x2d4>
			if(eenkeer == 1){
    1d84:	d0a00917 	ldw	r2,-32732(gp)
    1d88:	10800058 	cmpnei	r2,r2,1
    1d8c:	10004b1e 	bne	r2,zero,1ebc <selecteerMenu+0x374>
				clearScreen();
    1d90:	0001ec80 	call	1ec8 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 32, xRechts*4, xOnder*4 + 32, rood);
    1d94:	d0a00317 	ldw	r2,-32756(gp)
    1d98:	1085883a 	add	r2,r2,r2
    1d9c:	1085883a 	add	r2,r2,r2
    1da0:	1009883a 	mov	r4,r2
    1da4:	d0a00517 	ldw	r2,-32748(gp)
    1da8:	10800204 	addi	r2,r2,8
    1dac:	1085883a 	add	r2,r2,r2
    1db0:	1085883a 	add	r2,r2,r2
    1db4:	100b883a 	mov	r5,r2
    1db8:	d0a00417 	ldw	r2,-32752(gp)
    1dbc:	1085883a 	add	r2,r2,r2
    1dc0:	1085883a 	add	r2,r2,r2
    1dc4:	100d883a 	mov	r6,r2
    1dc8:	d0a00617 	ldw	r2,-32744(gp)
    1dcc:	10800204 	addi	r2,r2,8
    1dd0:	1085883a 	add	r2,r2,r2
    1dd4:	1085883a 	add	r2,r2,r2
    1dd8:	1007883a 	mov	r3,r2
    1ddc:	00be0014 	movui	r2,63488
    1de0:	d8800015 	stw	r2,0(sp)
    1de4:	180f883a 	mov	r7,r3
    1de8:	00023640 	call	2364 <VGA_box>
				VGA_text (xMenu, yMenu +  8, "Highscores");
    1dec:	d0e00717 	ldw	r3,-32740(gp)
    1df0:	d0a00817 	ldw	r2,-32736(gp)
    1df4:	10800204 	addi	r2,r2,8
    1df8:	1809883a 	mov	r4,r3
    1dfc:	100b883a 	mov	r5,r2
    1e00:	01800074 	movhi	r6,1
    1e04:	318b6904 	addi	r6,r6,11684
    1e08:	00024180 	call	2418 <VGA_text>
				eenkeer = 0;
    1e0c:	d0200915 	stw	zero,-32732(gp)
				changed = 1;
    1e10:	00800044 	movi	r2,1
    1e14:	d0a80315 	stw	r2,-24564(gp)
    1e18:	00002806 	br	1ebc <selecteerMenu+0x374>

			}
		} else if (gameModeMenu == 4){
    1e1c:	d0a00217 	ldw	r2,-32760(gp)
    1e20:	10800118 	cmpnei	r2,r2,4
    1e24:	1000251e 	bne	r2,zero,1ebc <selecteerMenu+0x374>
			if(eenkeer == 1){
    1e28:	d0a00917 	ldw	r2,-32732(gp)
    1e2c:	10800058 	cmpnei	r2,r2,1
    1e30:	1000221e 	bne	r2,zero,1ebc <selecteerMenu+0x374>
				clearScreen();
    1e34:	0001ec80 	call	1ec8 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 48, xRechts*4, xOnder*4 + 48, rood);
    1e38:	d0a00317 	ldw	r2,-32756(gp)
    1e3c:	1085883a 	add	r2,r2,r2
    1e40:	1085883a 	add	r2,r2,r2
    1e44:	1009883a 	mov	r4,r2
    1e48:	d0a00517 	ldw	r2,-32748(gp)
    1e4c:	10800304 	addi	r2,r2,12
    1e50:	1085883a 	add	r2,r2,r2
    1e54:	1085883a 	add	r2,r2,r2
    1e58:	100b883a 	mov	r5,r2
    1e5c:	d0a00417 	ldw	r2,-32752(gp)
    1e60:	1085883a 	add	r2,r2,r2
    1e64:	1085883a 	add	r2,r2,r2
    1e68:	100d883a 	mov	r6,r2
    1e6c:	d0a00617 	ldw	r2,-32744(gp)
    1e70:	10800304 	addi	r2,r2,12
    1e74:	1085883a 	add	r2,r2,r2
    1e78:	1085883a 	add	r2,r2,r2
    1e7c:	1007883a 	mov	r3,r2
    1e80:	00be0014 	movui	r2,63488
    1e84:	d8800015 	stw	r2,0(sp)
    1e88:	180f883a 	mov	r7,r3
    1e8c:	00023640 	call	2364 <VGA_box>
				VGA_text (xMenu, yMenu + 12, "Tutorial");
    1e90:	d0e00717 	ldw	r3,-32740(gp)
    1e94:	d0a00817 	ldw	r2,-32736(gp)
    1e98:	10800304 	addi	r2,r2,12
    1e9c:	1809883a 	mov	r4,r3
    1ea0:	100b883a 	mov	r5,r2
    1ea4:	01800074 	movhi	r6,1
    1ea8:	318b6c04 	addi	r6,r6,11696
    1eac:	00024180 	call	2418 <VGA_text>
				eenkeer = 0;
    1eb0:	d0200915 	stw	zero,-32732(gp)
				changed = 1;
    1eb4:	00800044 	movi	r2,1
    1eb8:	d0a80315 	stw	r2,-24564(gp)

			}
		}

		OSTimeDly(20);
    1ebc:	01000504 	movi	r4,20
    1ec0:	000e8bc0 	call	e8bc <OSTimeDly>
	}
    1ec4:	003f2706 	br	1b64 <__alt_mem_Flash_flash_data+0xf4001b64>

00001ec8 <clearScreen>:
}

void clearScreen(){
    1ec8:	defffd04 	addi	sp,sp,-12
    1ecc:	dfc00215 	stw	ra,8(sp)
    1ed0:	df000115 	stw	fp,4(sp)
    1ed4:	df000104 	addi	fp,sp,4
	VGA_box(25,70, 200,135, 0);
    1ed8:	d8000015 	stw	zero,0(sp)
    1edc:	01000644 	movi	r4,25
    1ee0:	01401184 	movi	r5,70
    1ee4:	01803204 	movi	r6,200
    1ee8:	01c021c4 	movi	r7,135
    1eec:	00023640 	call	2364 <VGA_box>
	del_middenlijn();
    1ef0:	00025100 	call	2510 <del_middenlijn>
}
    1ef4:	e037883a 	mov	sp,fp
    1ef8:	dfc00117 	ldw	ra,4(sp)
    1efc:	df000017 	ldw	fp,0(sp)
    1f00:	dec00204 	addi	sp,sp,8
    1f04:	f800283a 	ret

00001f08 <clearText>:

void clearText(){
    1f08:	defffe04 	addi	sp,sp,-8
    1f0c:	dfc00115 	stw	ra,4(sp)
    1f10:	df000015 	stw	fp,0(sp)
    1f14:	d839883a 	mov	fp,sp
	VGA_text (xMenu, yMenu, "            ");
    1f18:	d0e00717 	ldw	r3,-32740(gp)
    1f1c:	d0a00817 	ldw	r2,-32736(gp)
    1f20:	1809883a 	mov	r4,r3
    1f24:	100b883a 	mov	r5,r2
    1f28:	01800074 	movhi	r6,1
    1f2c:	318b6f04 	addi	r6,r6,11708
    1f30:	00024180 	call	2418 <VGA_text>
	VGA_text (xMenu, yMenu + 4, "           ");
    1f34:	d0e00717 	ldw	r3,-32740(gp)
    1f38:	d0a00817 	ldw	r2,-32736(gp)
    1f3c:	10800104 	addi	r2,r2,4
    1f40:	1809883a 	mov	r4,r3
    1f44:	100b883a 	mov	r5,r2
    1f48:	01800074 	movhi	r6,1
    1f4c:	318b7304 	addi	r6,r6,11724
    1f50:	00024180 	call	2418 <VGA_text>
	VGA_text (xMenu, yMenu+8, "          ");
    1f54:	d0e00717 	ldw	r3,-32740(gp)
    1f58:	d0a00817 	ldw	r2,-32736(gp)
    1f5c:	10800204 	addi	r2,r2,8
    1f60:	1809883a 	mov	r4,r3
    1f64:	100b883a 	mov	r5,r2
    1f68:	01800074 	movhi	r6,1
    1f6c:	318b7604 	addi	r6,r6,11736
    1f70:	00024180 	call	2418 <VGA_text>
	VGA_text (xMenu, yMenu+12, "        ");
    1f74:	d0e00717 	ldw	r3,-32740(gp)
    1f78:	d0a00817 	ldw	r2,-32736(gp)
    1f7c:	10800304 	addi	r2,r2,12
    1f80:	1809883a 	mov	r4,r3
    1f84:	100b883a 	mov	r5,r2
    1f88:	01800074 	movhi	r6,1
    1f8c:	318b7904 	addi	r6,r6,11748
    1f90:	00024180 	call	2418 <VGA_text>
}
    1f94:	e037883a 	mov	sp,fp
    1f98:	dfc00117 	ldw	ra,4(sp)
    1f9c:	df000017 	ldw	fp,0(sp)
    1fa0:	dec00204 	addi	sp,sp,8
    1fa4:	f800283a 	ret

00001fa8 <tekenBox>:

void tekenBox(int Links, int Boven, int Rechts, int Onder, short Kleur){
    1fa8:	defff804 	addi	sp,sp,-32
    1fac:	dfc00715 	stw	ra,28(sp)
    1fb0:	df000615 	stw	fp,24(sp)
    1fb4:	df000604 	addi	fp,sp,24
    1fb8:	e13ffb15 	stw	r4,-20(fp)
    1fbc:	e17ffc15 	stw	r5,-16(fp)
    1fc0:	e1bffd15 	stw	r6,-12(fp)
    1fc4:	e1fffe15 	stw	r7,-8(fp)
    1fc8:	e0800217 	ldw	r2,8(fp)
    1fcc:	e0bfff0d 	sth	r2,-4(fp)
	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    1fd0:	e0bfff0f 	ldh	r2,-4(fp)
    1fd4:	d8800015 	stw	r2,0(sp)
    1fd8:	e13ffb17 	ldw	r4,-20(fp)
    1fdc:	e17ffc17 	ldw	r5,-16(fp)
    1fe0:	e1bffd17 	ldw	r6,-12(fp)
    1fe4:	e1fffe17 	ldw	r7,-8(fp)
    1fe8:	00023640 	call	2364 <VGA_box>
}
    1fec:	e037883a 	mov	sp,fp
    1ff0:	dfc00117 	ldw	ra,4(sp)
    1ff4:	df000017 	ldw	fp,0(sp)
    1ff8:	dec00204 	addi	sp,sp,8
    1ffc:	f800283a 	ret

00002000 <tekenBox2>:
// tekenBox en tekenBox2 maken samen het visuele effect van het selecteren van een menu optie.
void tekenBox2(int Links, int Boven, int Rechts, int Onder, short Kleur){
    2000:	defff804 	addi	sp,sp,-32
    2004:	dfc00715 	stw	ra,28(sp)
    2008:	df000615 	stw	fp,24(sp)
    200c:	df000604 	addi	fp,sp,24
    2010:	e13ffb15 	stw	r4,-20(fp)
    2014:	e17ffc15 	stw	r5,-16(fp)
    2018:	e1bffd15 	stw	r6,-12(fp)
    201c:	e1fffe15 	stw	r7,-8(fp)
    2020:	e0800217 	ldw	r2,8(fp)
    2024:	e0bfff0d 	sth	r2,-4(fp)
	Links = Links + 1;
    2028:	e0bffb17 	ldw	r2,-20(fp)
    202c:	10800044 	addi	r2,r2,1
    2030:	e0bffb15 	stw	r2,-20(fp)
	Boven = Boven + 1;
    2034:	e0bffc17 	ldw	r2,-16(fp)
    2038:	10800044 	addi	r2,r2,1
    203c:	e0bffc15 	stw	r2,-16(fp)
	Rechts = Rechts - 1;
    2040:	e0bffd17 	ldw	r2,-12(fp)
    2044:	10bfffc4 	addi	r2,r2,-1
    2048:	e0bffd15 	stw	r2,-12(fp)
	Onder = Onder -1;
    204c:	e0bffe17 	ldw	r2,-8(fp)
    2050:	10bfffc4 	addi	r2,r2,-1
    2054:	e0bffe15 	stw	r2,-8(fp)

	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    2058:	e0bfff0f 	ldh	r2,-4(fp)
    205c:	d8800015 	stw	r2,0(sp)
    2060:	e13ffb17 	ldw	r4,-20(fp)
    2064:	e17ffc17 	ldw	r5,-16(fp)
    2068:	e1bffd17 	ldw	r6,-12(fp)
    206c:	e1fffe17 	ldw	r7,-8(fp)
    2070:	00023640 	call	2364 <VGA_box>
}
    2074:	e037883a 	mov	sp,fp
    2078:	dfc00117 	ldw	ra,4(sp)
    207c:	df000017 	ldw	fp,0(sp)
    2080:	dec00204 	addi	sp,sp,8
    2084:	f800283a 	ret

00002088 <teken_menu>:

void teken_menu(){
    2088:	defffd04 	addi	sp,sp,-12
    208c:	dfc00215 	stw	ra,8(sp)
    2090:	df000115 	stw	fp,4(sp)
    2094:	df000104 	addi	fp,sp,4
	VGA_text (xMenu, yMenu, "Singleplayer");
    2098:	d0e00717 	ldw	r3,-32740(gp)
    209c:	d0a00817 	ldw	r2,-32736(gp)
    20a0:	1809883a 	mov	r4,r3
    20a4:	100b883a 	mov	r5,r2
    20a8:	01800074 	movhi	r6,1
    20ac:	318b5a04 	addi	r6,r6,11624
    20b0:	00024180 	call	2418 <VGA_text>
	VGA_text (xMenu, yMenu + 4, "Multiplayer");
    20b4:	d0e00717 	ldw	r3,-32740(gp)
    20b8:	d0a00817 	ldw	r2,-32736(gp)
    20bc:	10800104 	addi	r2,r2,4
    20c0:	1809883a 	mov	r4,r3
    20c4:	100b883a 	mov	r5,r2
    20c8:	01800074 	movhi	r6,1
    20cc:	318b6304 	addi	r6,r6,11660
    20d0:	00024180 	call	2418 <VGA_text>
	VGA_text (xMenu, yMenu+8, "Highscores");
    20d4:	d0e00717 	ldw	r3,-32740(gp)
    20d8:	d0a00817 	ldw	r2,-32736(gp)
    20dc:	10800204 	addi	r2,r2,8
    20e0:	1809883a 	mov	r4,r3
    20e4:	100b883a 	mov	r5,r2
    20e8:	01800074 	movhi	r6,1
    20ec:	318b6904 	addi	r6,r6,11684
    20f0:	00024180 	call	2418 <VGA_text>
	VGA_text (xMenu, yMenu+12, "Tutorial");
    20f4:	d0e00717 	ldw	r3,-32740(gp)
    20f8:	d0a00817 	ldw	r2,-32736(gp)
    20fc:	10800304 	addi	r2,r2,12
    2100:	1809883a 	mov	r4,r3
    2104:	100b883a 	mov	r5,r2
    2108:	01800074 	movhi	r6,1
    210c:	318b6c04 	addi	r6,r6,11696
    2110:	00024180 	call	2418 <VGA_text>
	VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    2114:	d0a00317 	ldw	r2,-32756(gp)
    2118:	1085883a 	add	r2,r2,r2
    211c:	1085883a 	add	r2,r2,r2
    2120:	1009883a 	mov	r4,r2
    2124:	d0a00517 	ldw	r2,-32748(gp)
    2128:	10800104 	addi	r2,r2,4
    212c:	1085883a 	add	r2,r2,r2
    2130:	1085883a 	add	r2,r2,r2
    2134:	100b883a 	mov	r5,r2
    2138:	d0a00417 	ldw	r2,-32752(gp)
    213c:	1085883a 	add	r2,r2,r2
    2140:	1085883a 	add	r2,r2,r2
    2144:	100d883a 	mov	r6,r2
    2148:	d0a00617 	ldw	r2,-32744(gp)
    214c:	10800104 	addi	r2,r2,4
    2150:	1085883a 	add	r2,r2,r2
    2154:	1085883a 	add	r2,r2,r2
    2158:	1007883a 	mov	r3,r2
    215c:	00be0014 	movui	r2,63488
    2160:	d8800015 	stw	r2,0(sp)
    2164:	180f883a 	mov	r7,r3
    2168:	00023640 	call	2364 <VGA_box>

}
    216c:	e037883a 	mov	sp,fp
    2170:	dfc00117 	ldw	ra,4(sp)
    2174:	df000017 	ldw	fp,0(sp)
    2178:	dec00204 	addi	sp,sp,8
    217c:	f800283a 	ret

00002180 <main>:
void * Messages[500];


/* The main function creates two task and starts multi-tasking */
int main(void)
{
    2180:	defffb04 	addi	sp,sp,-20
    2184:	dfc00415 	stw	ra,16(sp)
    2188:	df000315 	stw	fp,12(sp)
    218c:	df000304 	addi	fp,sp,12
	INT8U err;
	OSInit();
    2190:	0006e780 	call	6e78 <OSInit>
	int counter = 0x50000;				// 1/(50 MHz) x (0x960000) ~= 200 msec
    2194:	00800174 	movhi	r2,5
    2198:	e0bffe15 	stw	r2,-8(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
    219c:	d0a00b17 	ldw	r2,-32724(gp)
    21a0:	10800204 	addi	r2,r2,8
    21a4:	e0fffe17 	ldw	r3,-8(fp)
    21a8:	18ffffcc 	andi	r3,r3,65535
    21ac:	10c00015 	stw	r3,0(r2)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
    21b0:	d0a00b17 	ldw	r2,-32724(gp)
    21b4:	10800304 	addi	r2,r2,12
    21b8:	e0fffe17 	ldw	r3,-8(fp)
    21bc:	1806d43a 	srli	r3,r3,16
    21c0:	10c00015 	stw	r3,0(r2)

	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
    21c4:	d0a00b17 	ldw	r2,-32724(gp)
    21c8:	10800104 	addi	r2,r2,4
    21cc:	00c001c4 	movi	r3,7
    21d0:	10c00015 	stw	r3,0(r2)

	Flags = OSFlagCreate(Game_Flag + C1_Flag + C2_Flag, &err);
    21d4:	e0bfff04 	addi	r2,fp,-4
    21d8:	01000384 	movi	r4,14
    21dc:	100b883a 	mov	r5,r2
    21e0:	0008a900 	call	8a90 <OSFlagCreate>
    21e4:	d0a7f215 	stw	r2,-24632(gp)

	gameSem = OSSemCreate(0);
    21e8:	0009883a 	mov	r4,zero
    21ec:	000c5700 	call	c570 <OSSemCreate>
    21f0:	d0a7fc15 	stw	r2,-24592(gp)
	controllerSem = OSSemCreate(0);
    21f4:	0009883a 	mov	r4,zero
    21f8:	000c5700 	call	c570 <OSSemCreate>
    21fc:	d0a7ef15 	stw	r2,-24644(gp)

	MailBox = OSMboxCreate((void *)0);
    2200:	0009883a 	mov	r4,zero
    2204:	000a03c0 	call	a03c <OSMboxCreate>
    2208:	d0a7f315 	stw	r2,-24628(gp)
	MailBox2 = OSMboxCreate((void *)0);
    220c:	0009883a 	mov	r4,zero
    2210:	000a03c0 	call	a03c <OSMboxCreate>
    2214:	d0a7f115 	stw	r2,-24636(gp)


	VGA_box (0, 0, 319, 239, 0);						//clear screen
    2218:	d8000015 	stw	zero,0(sp)
    221c:	0009883a 	mov	r4,zero
    2220:	000b883a 	mov	r5,zero
    2224:	01804fc4 	movi	r6,319
    2228:	01c03bc4 	movi	r7,239
    222c:	00023640 	call	2364 <VGA_box>
	VGA_box (15, 50, 20, 100, 0x0000ff);				// links
    2230:	00803fc4 	movi	r2,255
    2234:	d8800015 	stw	r2,0(sp)
    2238:	010003c4 	movi	r4,15
    223c:	01400c84 	movi	r5,50
    2240:	01800504 	movi	r6,20
    2244:	01c01904 	movi	r7,100
    2248:	00023640 	call	2364 <VGA_box>
	VGA_box (300, 50, 305, 100, 0x0000ff);				// rechts
    224c:	00803fc4 	movi	r2,255
    2250:	d8800015 	stw	r2,0(sp)
    2254:	01004b04 	movi	r4,300
    2258:	01400c84 	movi	r5,50
    225c:	01804c44 	movi	r6,305
    2260:	01c01904 	movi	r7,100
    2264:	00023640 	call	2364 <VGA_box>

	VGA_box (0, 0, 319, 3, groen);					// boven
    2268:	0081a5c4 	movi	r2,1687
    226c:	d8800015 	stw	r2,0(sp)
    2270:	0009883a 	mov	r4,zero
    2274:	000b883a 	mov	r5,zero
    2278:	01804fc4 	movi	r6,319
    227c:	01c000c4 	movi	r7,3
    2280:	00023640 	call	2364 <VGA_box>
	VGA_box (0, 236, 319, 239, groen);				// onder
    2284:	0081a5c4 	movi	r2,1687
    2288:	d8800015 	stw	r2,0(sp)
    228c:	0009883a 	mov	r4,zero
    2290:	01403b04 	movi	r5,236
    2294:	01804fc4 	movi	r6,319
    2298:	01c03bc4 	movi	r7,239
    229c:	00023640 	call	2364 <VGA_box>


	OSTaskCreate(controllers,(void*) 1,&controller1_stk[TASK_STACKSIZE-1],controller1_PRIORITY);
    22a0:	01000034 	movhi	r4,0
    22a4:	2100a004 	addi	r4,r4,640
    22a8:	01400044 	movi	r5,1
    22ac:	018000b4 	movhi	r6,2
    22b0:	31b3e704 	addi	r6,r6,-12388
    22b4:	01c002c4 	movi	r7,11
    22b8:	000d5080 	call	d508 <OSTaskCreate>
	OSTaskCreate(controllers,(void*) 2,&controller2_stk[TASK_STACKSIZE-1],controller2_PRIORITY);
    22bc:	01000034 	movhi	r4,0
    22c0:	2100a004 	addi	r4,r4,640
    22c4:	01400084 	movi	r5,2
    22c8:	018000b4 	movhi	r6,2
    22cc:	31bbe704 	addi	r6,r6,-4196
    22d0:	01c00304 	movi	r7,12
    22d4:	000d5080 	call	d508 <OSTaskCreate>
	OSTaskCreate(Game,(void*) 0, &Game_stk[TASK_STACKSIZE-1],Game_PRIORITY);
    22d8:	01000034 	movhi	r4,0
    22dc:	2101d304 	addi	r4,r4,1868
    22e0:	000b883a 	mov	r5,zero
    22e4:	018000b4 	movhi	r6,2
    22e8:	3183e704 	addi	r6,r6,3996
    22ec:	01c00184 	movi	r7,6
    22f0:	000d5080 	call	d508 <OSTaskCreate>
	OSTaskCreate(Singleplayer,(void*) 0, &Singleplayer_stk[TASK_STACKSIZE-1],Singleplayer_PRIORITY);
    22f4:	01000034 	movhi	r4,0
    22f8:	2103c904 	addi	r4,r4,3876
    22fc:	000b883a 	mov	r5,zero
    2300:	018000b4 	movhi	r6,2
    2304:	31a3e704 	addi	r6,r6,-28772
    2308:	01c001c4 	movi	r7,7
    230c:	000d5080 	call	d508 <OSTaskCreate>


	OSTaskCreate(menu, (void*) 2, &menu_stk[TASK_STACKSIZE-1],menu_PRIORITY);
    2310:	01000034 	movhi	r4,0
    2314:	21069704 	addi	r4,r4,6748
    2318:	01400084 	movi	r5,2
    231c:	018000b4 	movhi	r6,2
    2320:	31abe704 	addi	r6,r6,-20580
    2324:	01c00244 	movi	r7,9
    2328:	000d5080 	call	d508 <OSTaskCreate>
	OSTaskCreate(selecteerMenu, (void*) 3, &menu_stk2[TASK_STACKSIZE-1], menu_PRIORITY +1);
    232c:	01000034 	movhi	r4,0
    2330:	2106d204 	addi	r4,r4,6984
    2334:	014000c4 	movi	r5,3
    2338:	018000b4 	movhi	r6,2
    233c:	318ddb04 	addi	r6,r6,14188
    2340:	01c00284 	movi	r7,10
    2344:	000d5080 	call	d508 <OSTaskCreate>
	OSStart();
    2348:	000719c0 	call	719c <OSStart>
	return 0;
    234c:	0005883a 	mov	r2,zero
}
    2350:	e037883a 	mov	sp,fp
    2354:	dfc00117 	ldw	ra,4(sp)
    2358:	df000017 	ldw	fp,0(sp)
    235c:	dec00204 	addi	sp,sp,8
    2360:	f800283a 	ret

00002364 <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
    2364:	defff604 	addi	sp,sp,-40
    2368:	df000915 	stw	fp,36(sp)
    236c:	df000904 	addi	fp,sp,36
    2370:	e13ffb15 	stw	r4,-20(fp)
    2374:	e17ffc15 	stw	r5,-16(fp)
    2378:	e1bffd15 	stw	r6,-12(fp)
    237c:	e1fffe15 	stw	r7,-8(fp)
    2380:	e0800117 	ldw	r2,4(fp)
    2384:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
    2388:	00820034 	movhi	r2,2048
    238c:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    2390:	e0bffc17 	ldw	r2,-16(fp)
    2394:	e0bff715 	stw	r2,-36(fp)
    2398:	00001806 	br	23fc <VGA_box+0x98>
	{
		col = x1;
    239c:	e0bffb17 	ldw	r2,-20(fp)
    23a0:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
    23a4:	00000f06 	br	23e4 <VGA_box+0x80>
		{
			offset = (row << 9) + col;
    23a8:	e0bff717 	ldw	r2,-36(fp)
    23ac:	1006927a 	slli	r3,r2,9
    23b0:	e0bff817 	ldw	r2,-32(fp)
    23b4:	1885883a 	add	r2,r3,r2
    23b8:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
    23bc:	e0bffa17 	ldw	r2,-24(fp)
    23c0:	1085883a 	add	r2,r2,r2
    23c4:	1007883a 	mov	r3,r2
    23c8:	e0bff917 	ldw	r2,-28(fp)
    23cc:	10c5883a 	add	r2,r2,r3
    23d0:	e0ffff0b 	ldhu	r3,-4(fp)
    23d4:	10c0000d 	sth	r3,0(r2)
			++col;
    23d8:	e0bff817 	ldw	r2,-32(fp)
    23dc:	10800044 	addi	r2,r2,1
    23e0:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
    23e4:	e0bff817 	ldw	r2,-32(fp)
    23e8:	e0fffd17 	ldw	r3,-12(fp)
    23ec:	18bfee0e 	bge	r3,r2,23a8 <__alt_mem_Flash_flash_data+0xf40023a8>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    23f0:	e0bff717 	ldw	r2,-36(fp)
    23f4:	10800044 	addi	r2,r2,1
    23f8:	e0bff715 	stw	r2,-36(fp)
    23fc:	e0bff717 	ldw	r2,-36(fp)
    2400:	e0fffe17 	ldw	r3,-8(fp)
    2404:	18bfe50e 	bge	r3,r2,239c <__alt_mem_Flash_flash_data+0xf400239c>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
    2408:	e037883a 	mov	sp,fp
    240c:	df000017 	ldw	fp,0(sp)
    2410:	dec00104 	addi	sp,sp,4
    2414:	f800283a 	ret

00002418 <VGA_text>:

void VGA_text(int x, int y, char * text_ptr)
{
    2418:	defffa04 	addi	sp,sp,-24
    241c:	df000515 	stw	fp,20(sp)
    2420:	df000504 	addi	fp,sp,20
    2424:	e13ffd15 	stw	r4,-12(fp)
    2428:	e17ffe15 	stw	r5,-8(fp)
    242c:	e1bfff15 	stw	r6,-4(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer
    2430:	00824034 	movhi	r2,2304
    2434:	e0bffc15 	stw	r2,-16(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
    2438:	e0bffe17 	ldw	r2,-8(fp)
    243c:	100691fa 	slli	r3,r2,7
    2440:	e0bffd17 	ldw	r2,-12(fp)
    2444:	1885883a 	add	r2,r3,r2
    2448:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
    244c:	00000c06 	br	2480 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
    2450:	e0bffb17 	ldw	r2,-20(fp)
    2454:	e0fffc17 	ldw	r3,-16(fp)
    2458:	1885883a 	add	r2,r3,r2
    245c:	e0ffff17 	ldw	r3,-4(fp)
    2460:	18c00003 	ldbu	r3,0(r3)
    2464:	10c00005 	stb	r3,0(r2)
		++text_ptr;
    2468:	e0bfff17 	ldw	r2,-4(fp)
    246c:	10800044 	addi	r2,r2,1
    2470:	e0bfff15 	stw	r2,-4(fp)
		++offset;
    2474:	e0bffb17 	ldw	r2,-20(fp)
    2478:	10800044 	addi	r2,r2,1
    247c:	e0bffb15 	stw	r2,-20(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
    2480:	e0bfff17 	ldw	r2,-4(fp)
    2484:	10800003 	ldbu	r2,0(r2)
    2488:	10803fcc 	andi	r2,r2,255
    248c:	1080201c 	xori	r2,r2,128
    2490:	10bfe004 	addi	r2,r2,-128
    2494:	103fee1e 	bne	r2,zero,2450 <__alt_mem_Flash_flash_data+0xf4002450>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
    2498:	e037883a 	mov	sp,fp
    249c:	df000017 	ldw	fp,0(sp)
    24a0:	dec00104 	addi	sp,sp,4
    24a4:	f800283a 	ret

000024a8 <draw_middenlijn>:

void draw_middenlijn(){
    24a8:	defffc04 	addi	sp,sp,-16
    24ac:	dfc00315 	stw	ra,12(sp)
    24b0:	df000215 	stw	fp,8(sp)
    24b4:	df000204 	addi	fp,sp,8
	int i = 0;
    24b8:	e03fff15 	stw	zero,-4(fp)
	while(i < 240){
    24bc:	00000c06 	br	24f0 <draw_middenlijn+0x48>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
    24c0:	e0bfff17 	ldw	r2,-4(fp)
    24c4:	10c001c4 	addi	r3,r2,7
    24c8:	0081a5c4 	movi	r2,1687
    24cc:	d8800015 	stw	r2,0(sp)
    24d0:	010027c4 	movi	r4,159
    24d4:	e17fff17 	ldw	r5,-4(fp)
    24d8:	01802804 	movi	r6,160
    24dc:	180f883a 	mov	r7,r3
    24e0:	00023640 	call	2364 <VGA_box>
		i = i + 11;
    24e4:	e0bfff17 	ldw	r2,-4(fp)
    24e8:	108002c4 	addi	r2,r2,11
    24ec:	e0bfff15 	stw	r2,-4(fp)
	}
}

void draw_middenlijn(){
	int i = 0;
	while(i < 240){
    24f0:	e0bfff17 	ldw	r2,-4(fp)
    24f4:	10803c10 	cmplti	r2,r2,240
    24f8:	103ff11e 	bne	r2,zero,24c0 <__alt_mem_Flash_flash_data+0xf40024c0>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
		i = i + 11;
	}
}
    24fc:	e037883a 	mov	sp,fp
    2500:	dfc00117 	ldw	ra,4(sp)
    2504:	df000017 	ldw	fp,0(sp)
    2508:	dec00204 	addi	sp,sp,8
    250c:	f800283a 	ret

00002510 <del_middenlijn>:

void del_middenlijn(){
    2510:	defffd04 	addi	sp,sp,-12
    2514:	dfc00215 	stw	ra,8(sp)
    2518:	df000115 	stw	fp,4(sp)
    251c:	df000104 	addi	fp,sp,4
	VGA_box(159, 4, 160, 235, 0);
    2520:	d8000015 	stw	zero,0(sp)
    2524:	010027c4 	movi	r4,159
    2528:	01400104 	movi	r5,4
    252c:	01802804 	movi	r6,160
    2530:	01c03ac4 	movi	r7,235
    2534:	00023640 	call	2364 <VGA_box>
}
    2538:	e037883a 	mov	sp,fp
    253c:	dfc00117 	ldw	ra,4(sp)
    2540:	df000017 	ldw	fp,0(sp)
    2544:	dec00204 	addi	sp,sp,8
    2548:	f800283a 	ret

0000254c <del_number>:

void del_number(int side){
    254c:	defffc04 	addi	sp,sp,-16
    2550:	dfc00315 	stw	ra,12(sp)
    2554:	df000215 	stw	fp,8(sp)
    2558:	df000204 	addi	fp,sp,8
    255c:	e13fff15 	stw	r4,-4(fp)
	if(side == 1){
    2560:	e0bfff17 	ldw	r2,-4(fp)
    2564:	10800058 	cmpnei	r2,r2,1
    2568:	1000061e 	bne	r2,zero,2584 <del_number+0x38>
		VGA_box(120, 20, 140, 60, 0);
    256c:	d8000015 	stw	zero,0(sp)
    2570:	01001e04 	movi	r4,120
    2574:	01400504 	movi	r5,20
    2578:	01802304 	movi	r6,140
    257c:	01c00f04 	movi	r7,60
    2580:	00023640 	call	2364 <VGA_box>
	}
	if(side == 2){
    2584:	e0bfff17 	ldw	r2,-4(fp)
    2588:	10800098 	cmpnei	r2,r2,2
    258c:	1000061e 	bne	r2,zero,25a8 <del_number+0x5c>
		VGA_box(180, 20, 200, 60, 0);
    2590:	d8000015 	stw	zero,0(sp)
    2594:	01002d04 	movi	r4,180
    2598:	01400504 	movi	r5,20
    259c:	01803204 	movi	r6,200
    25a0:	01c00f04 	movi	r7,60
    25a4:	00023640 	call	2364 <VGA_box>
	}
}
    25a8:	e037883a 	mov	sp,fp
    25ac:	dfc00117 	ldw	ra,4(sp)
    25b0:	df000017 	ldw	fp,0(sp)
    25b4:	dec00204 	addi	sp,sp,8
    25b8:	f800283a 	ret

000025bc <deleteNummer>:

void deleteNummer(){
    25bc:	defffd04 	addi	sp,sp,-12
    25c0:	dfc00215 	stw	ra,8(sp)
    25c4:	df000115 	stw	fp,4(sp)
    25c8:	df000104 	addi	fp,sp,4
	VGA_box(120, 20, 180, 60, 0);
    25cc:	d8000015 	stw	zero,0(sp)
    25d0:	01001e04 	movi	r4,120
    25d4:	01400504 	movi	r5,20
    25d8:	01802d04 	movi	r6,180
    25dc:	01c00f04 	movi	r7,60
    25e0:	00023640 	call	2364 <VGA_box>
}
    25e4:	e037883a 	mov	sp,fp
    25e8:	dfc00117 	ldw	ra,4(sp)
    25ec:	df000017 	ldw	fp,0(sp)
    25f0:	dec00204 	addi	sp,sp,8
    25f4:	f800283a 	ret

000025f8 <draw_number>:

void draw_number(int nummer, int ID){
    25f8:	defffa04 	addi	sp,sp,-24
    25fc:	dfc00515 	stw	ra,20(sp)
    2600:	df000415 	stw	fp,16(sp)
    2604:	df000404 	addi	fp,sp,16
    2608:	e13ffe15 	stw	r4,-8(fp)
    260c:	e17fff15 	stw	r5,-4(fp)

	int X = checkIDScore(ID);
    2610:	e13fff17 	ldw	r4,-4(fp)
    2614:	0002c6c0 	call	2c6c <checkIDScore>
    2618:	e0bffd15 	stw	r2,-12(fp)

	if(nummer == 1){
    261c:	e0bffe17 	ldw	r2,-8(fp)
    2620:	10800058 	cmpnei	r2,r2,1
    2624:	10000b1e 	bne	r2,zero,2654 <draw_number+0x5c>
		VGA_box(X + 5, 20, X+7, 60, wit);
    2628:	e0bffd17 	ldw	r2,-12(fp)
    262c:	11000144 	addi	r4,r2,5
    2630:	e0bffd17 	ldw	r2,-12(fp)
    2634:	10c001c4 	addi	r3,r2,7
    2638:	00bfffc4 	movi	r2,-1
    263c:	d8800015 	stw	r2,0(sp)
    2640:	01400504 	movi	r5,20
    2644:	180d883a 	mov	r6,r3
    2648:	01c00f04 	movi	r7,60
    264c:	00023640 	call	2364 <VGA_box>
    2650:	00018106 	br	2c58 <draw_number+0x660>
	}else if(nummer == 2){
    2654:	e0bffe17 	ldw	r2,-8(fp)
    2658:	10800098 	cmpnei	r2,r2,2
    265c:	10002f1e 	bne	r2,zero,271c <draw_number+0x124>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2660:	e0bffd17 	ldw	r2,-12(fp)
    2664:	10c00504 	addi	r3,r2,20
    2668:	00bfffc4 	movi	r2,-1
    266c:	d8800015 	stw	r2,0(sp)
    2670:	e13ffd17 	ldw	r4,-12(fp)
    2674:	01400504 	movi	r5,20
    2678:	180d883a 	mov	r6,r3
    267c:	01c00584 	movi	r7,22
    2680:	00023640 	call	2364 <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 38, wit);			//lijn naar beneden
    2684:	e0bffd17 	ldw	r2,-12(fp)
    2688:	11000484 	addi	r4,r2,18
    268c:	e0bffd17 	ldw	r2,-12(fp)
    2690:	10c00504 	addi	r3,r2,20
    2694:	00bfffc4 	movi	r2,-1
    2698:	d8800015 	stw	r2,0(sp)
    269c:	01400584 	movi	r5,22
    26a0:	180d883a 	mov	r6,r3
    26a4:	01c00984 	movi	r7,38
    26a8:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    26ac:	e0bffd17 	ldw	r2,-12(fp)
    26b0:	10c00504 	addi	r3,r2,20
    26b4:	00bfffc4 	movi	r2,-1
    26b8:	d8800015 	stw	r2,0(sp)
    26bc:	e13ffd17 	ldw	r4,-12(fp)
    26c0:	01400984 	movi	r5,38
    26c4:	180d883a 	mov	r6,r3
    26c8:	01c00a04 	movi	r7,40
    26cc:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 40, X+ 2, 58, wit);					//lijn naar beneden
    26d0:	e0bffd17 	ldw	r2,-12(fp)
    26d4:	10c00084 	addi	r3,r2,2
    26d8:	00bfffc4 	movi	r2,-1
    26dc:	d8800015 	stw	r2,0(sp)
    26e0:	e13ffd17 	ldw	r4,-12(fp)
    26e4:	01400a04 	movi	r5,40
    26e8:	180d883a 	mov	r6,r3
    26ec:	01c00e84 	movi	r7,58
    26f0:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    26f4:	e0bffd17 	ldw	r2,-12(fp)
    26f8:	10c00504 	addi	r3,r2,20
    26fc:	00bfffc4 	movi	r2,-1
    2700:	d8800015 	stw	r2,0(sp)
    2704:	e13ffd17 	ldw	r4,-12(fp)
    2708:	01400e84 	movi	r5,58
    270c:	180d883a 	mov	r6,r3
    2710:	01c00f04 	movi	r7,60
    2714:	00023640 	call	2364 <VGA_box>
    2718:	00014f06 	br	2c58 <draw_number+0x660>
	}else if(nummer == 3){
    271c:	e0bffe17 	ldw	r2,-8(fp)
    2720:	108000d8 	cmpnei	r2,r2,3
    2724:	1000261e 	bne	r2,zero,27c0 <draw_number+0x1c8>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2728:	e0bffd17 	ldw	r2,-12(fp)
    272c:	10c00504 	addi	r3,r2,20
    2730:	00bfffc4 	movi	r2,-1
    2734:	d8800015 	stw	r2,0(sp)
    2738:	e13ffd17 	ldw	r4,-12(fp)
    273c:	01400504 	movi	r5,20
    2740:	180d883a 	mov	r6,r3
    2744:	01c00584 	movi	r7,22
    2748:	00023640 	call	2364 <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 60, wit);			//rechter lijn
    274c:	e0bffd17 	ldw	r2,-12(fp)
    2750:	11000484 	addi	r4,r2,18
    2754:	e0bffd17 	ldw	r2,-12(fp)
    2758:	10c00504 	addi	r3,r2,20
    275c:	00bfffc4 	movi	r2,-1
    2760:	d8800015 	stw	r2,0(sp)
    2764:	01400584 	movi	r5,22
    2768:	180d883a 	mov	r6,r3
    276c:	01c00f04 	movi	r7,60
    2770:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 39, X+ 20, 41, wit);					//midden lijn
    2774:	e0bffd17 	ldw	r2,-12(fp)
    2778:	10c00504 	addi	r3,r2,20
    277c:	00bfffc4 	movi	r2,-1
    2780:	d8800015 	stw	r2,0(sp)
    2784:	e13ffd17 	ldw	r4,-12(fp)
    2788:	014009c4 	movi	r5,39
    278c:	180d883a 	mov	r6,r3
    2790:	01c00a44 	movi	r7,41
    2794:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2798:	e0bffd17 	ldw	r2,-12(fp)
    279c:	10c00504 	addi	r3,r2,20
    27a0:	00bfffc4 	movi	r2,-1
    27a4:	d8800015 	stw	r2,0(sp)
    27a8:	e13ffd17 	ldw	r4,-12(fp)
    27ac:	01400e84 	movi	r5,58
    27b0:	180d883a 	mov	r6,r3
    27b4:	01c00f04 	movi	r7,60
    27b8:	00023640 	call	2364 <VGA_box>
    27bc:	00012606 	br	2c58 <draw_number+0x660>
	}else if(nummer == 4){
    27c0:	e0bffe17 	ldw	r2,-8(fp)
    27c4:	10800118 	cmpnei	r2,r2,4
    27c8:	10001d1e 	bne	r2,zero,2840 <draw_number+0x248>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    27cc:	e0bffd17 	ldw	r2,-12(fp)
    27d0:	10c00084 	addi	r3,r2,2
    27d4:	00bfffc4 	movi	r2,-1
    27d8:	d8800015 	stw	r2,0(sp)
    27dc:	e13ffd17 	ldw	r4,-12(fp)
    27e0:	01400504 	movi	r5,20
    27e4:	180d883a 	mov	r6,r3
    27e8:	01c00a04 	movi	r7,40
    27ec:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    27f0:	e0bffd17 	ldw	r2,-12(fp)
    27f4:	10c00504 	addi	r3,r2,20
    27f8:	00bfffc4 	movi	r2,-1
    27fc:	d8800015 	stw	r2,0(sp)
    2800:	e13ffd17 	ldw	r4,-12(fp)
    2804:	014009c4 	movi	r5,39
    2808:	180d883a 	mov	r6,r3
    280c:	01c00a44 	movi	r7,41
    2810:	00023640 	call	2364 <VGA_box>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    2814:	e0bffd17 	ldw	r2,-12(fp)
    2818:	11000484 	addi	r4,r2,18
    281c:	e0bffd17 	ldw	r2,-12(fp)
    2820:	10c00504 	addi	r3,r2,20
    2824:	00bfffc4 	movi	r2,-1
    2828:	d8800015 	stw	r2,0(sp)
    282c:	01400504 	movi	r5,20
    2830:	180d883a 	mov	r6,r3
    2834:	01c00f04 	movi	r7,60
    2838:	00023640 	call	2364 <VGA_box>
    283c:	00010606 	br	2c58 <draw_number+0x660>
	}else if(nummer == 5){
    2840:	e0bffe17 	ldw	r2,-8(fp)
    2844:	10800158 	cmpnei	r2,r2,5
    2848:	10002f1e 	bne	r2,zero,2908 <draw_number+0x310>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    284c:	e0bffd17 	ldw	r2,-12(fp)
    2850:	10c00504 	addi	r3,r2,20
    2854:	00bfffc4 	movi	r2,-1
    2858:	d8800015 	stw	r2,0(sp)
    285c:	e13ffd17 	ldw	r4,-12(fp)
    2860:	01400504 	movi	r5,20
    2864:	180d883a 	mov	r6,r3
    2868:	01c00584 	movi	r7,22
    286c:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 22, X+ 2, 38, wit);					//lijn naar beneden
    2870:	e0bffd17 	ldw	r2,-12(fp)
    2874:	10c00084 	addi	r3,r2,2
    2878:	00bfffc4 	movi	r2,-1
    287c:	d8800015 	stw	r2,0(sp)
    2880:	e13ffd17 	ldw	r4,-12(fp)
    2884:	01400584 	movi	r5,22
    2888:	180d883a 	mov	r6,r3
    288c:	01c00984 	movi	r7,38
    2890:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    2894:	e0bffd17 	ldw	r2,-12(fp)
    2898:	10c00504 	addi	r3,r2,20
    289c:	00bfffc4 	movi	r2,-1
    28a0:	d8800015 	stw	r2,0(sp)
    28a4:	e13ffd17 	ldw	r4,-12(fp)
    28a8:	01400984 	movi	r5,38
    28ac:	180d883a 	mov	r6,r3
    28b0:	01c00a04 	movi	r7,40
    28b4:	00023640 	call	2364 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn naar beneden
    28b8:	e0bffd17 	ldw	r2,-12(fp)
    28bc:	11000484 	addi	r4,r2,18
    28c0:	e0bffd17 	ldw	r2,-12(fp)
    28c4:	10c00504 	addi	r3,r2,20
    28c8:	00bfffc4 	movi	r2,-1
    28cc:	d8800015 	stw	r2,0(sp)
    28d0:	01400a04 	movi	r5,40
    28d4:	180d883a 	mov	r6,r3
    28d8:	01c00e84 	movi	r7,58
    28dc:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    28e0:	e0bffd17 	ldw	r2,-12(fp)
    28e4:	10c00504 	addi	r3,r2,20
    28e8:	00bfffc4 	movi	r2,-1
    28ec:	d8800015 	stw	r2,0(sp)
    28f0:	e13ffd17 	ldw	r4,-12(fp)
    28f4:	01400e84 	movi	r5,58
    28f8:	180d883a 	mov	r6,r3
    28fc:	01c00f04 	movi	r7,60
    2900:	00023640 	call	2364 <VGA_box>
    2904:	0000d406 	br	2c58 <draw_number+0x660>
	}else if(nummer == 6){
    2908:	e0bffe17 	ldw	r2,-8(fp)
    290c:	10800198 	cmpnei	r2,r2,6
    2910:	10002f1e 	bne	r2,zero,29d0 <draw_number+0x3d8>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    2914:	e0bffd17 	ldw	r2,-12(fp)
    2918:	10c00084 	addi	r3,r2,2
    291c:	00bfffc4 	movi	r2,-1
    2920:	d8800015 	stw	r2,0(sp)
    2924:	e13ffd17 	ldw	r4,-12(fp)
    2928:	01400504 	movi	r5,20
    292c:	180d883a 	mov	r6,r3
    2930:	01c00f04 	movi	r7,60
    2934:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2938:	e0bffd17 	ldw	r2,-12(fp)
    293c:	10c00504 	addi	r3,r2,20
    2940:	00bfffc4 	movi	r2,-1
    2944:	d8800015 	stw	r2,0(sp)
    2948:	e13ffd17 	ldw	r4,-12(fp)
    294c:	01400504 	movi	r5,20
    2950:	180d883a 	mov	r6,r3
    2954:	01c00584 	movi	r7,22
    2958:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    295c:	e0bffd17 	ldw	r2,-12(fp)
    2960:	10c00504 	addi	r3,r2,20
    2964:	00bfffc4 	movi	r2,-1
    2968:	d8800015 	stw	r2,0(sp)
    296c:	e13ffd17 	ldw	r4,-12(fp)
    2970:	01400e84 	movi	r5,58
    2974:	180d883a 	mov	r6,r3
    2978:	01c00f04 	movi	r7,60
    297c:	00023640 	call	2364 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn rechts
    2980:	e0bffd17 	ldw	r2,-12(fp)
    2984:	11000484 	addi	r4,r2,18
    2988:	e0bffd17 	ldw	r2,-12(fp)
    298c:	10c00504 	addi	r3,r2,20
    2990:	00bfffc4 	movi	r2,-1
    2994:	d8800015 	stw	r2,0(sp)
    2998:	01400a04 	movi	r5,40
    299c:	180d883a 	mov	r6,r3
    29a0:	01c00e84 	movi	r7,58
    29a4:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    29a8:	e0bffd17 	ldw	r2,-12(fp)
    29ac:	10c00504 	addi	r3,r2,20
    29b0:	00bfffc4 	movi	r2,-1
    29b4:	d8800015 	stw	r2,0(sp)
    29b8:	e13ffd17 	ldw	r4,-12(fp)
    29bc:	014009c4 	movi	r5,39
    29c0:	180d883a 	mov	r6,r3
    29c4:	01c00a44 	movi	r7,41
    29c8:	00023640 	call	2364 <VGA_box>
    29cc:	0000a206 	br	2c58 <draw_number+0x660>
	}else if(nummer == 7){
    29d0:	e0bffe17 	ldw	r2,-8(fp)
    29d4:	108001d8 	cmpnei	r2,r2,7
    29d8:	1000141e 	bne	r2,zero,2a2c <draw_number+0x434>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    29dc:	e0bffd17 	ldw	r2,-12(fp)
    29e0:	11000484 	addi	r4,r2,18
    29e4:	e0bffd17 	ldw	r2,-12(fp)
    29e8:	10c00504 	addi	r3,r2,20
    29ec:	00bfffc4 	movi	r2,-1
    29f0:	d8800015 	stw	r2,0(sp)
    29f4:	01400504 	movi	r5,20
    29f8:	180d883a 	mov	r6,r3
    29fc:	01c00f04 	movi	r7,60
    2a00:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2a04:	e0bffd17 	ldw	r2,-12(fp)
    2a08:	10c00504 	addi	r3,r2,20
    2a0c:	00bfffc4 	movi	r2,-1
    2a10:	d8800015 	stw	r2,0(sp)
    2a14:	e13ffd17 	ldw	r4,-12(fp)
    2a18:	01400504 	movi	r5,20
    2a1c:	180d883a 	mov	r6,r3
    2a20:	01c00584 	movi	r7,22
    2a24:	00023640 	call	2364 <VGA_box>
    2a28:	00008b06 	br	2c58 <draw_number+0x660>
	}else if(nummer == 8){
    2a2c:	e0bffe17 	ldw	r2,-8(fp)
    2a30:	10800218 	cmpnei	r2,r2,8
    2a34:	10002f1e 	bne	r2,zero,2af4 <draw_number+0x4fc>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    2a38:	e0bffd17 	ldw	r2,-12(fp)
    2a3c:	11000484 	addi	r4,r2,18
    2a40:	e0bffd17 	ldw	r2,-12(fp)
    2a44:	10c00504 	addi	r3,r2,20
    2a48:	00bfffc4 	movi	r2,-1
    2a4c:	d8800015 	stw	r2,0(sp)
    2a50:	01400504 	movi	r5,20
    2a54:	180d883a 	mov	r6,r3
    2a58:	01c00f04 	movi	r7,60
    2a5c:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    2a60:	e0bffd17 	ldw	r2,-12(fp)
    2a64:	10c00084 	addi	r3,r2,2
    2a68:	00bfffc4 	movi	r2,-1
    2a6c:	d8800015 	stw	r2,0(sp)
    2a70:	e13ffd17 	ldw	r4,-12(fp)
    2a74:	01400504 	movi	r5,20
    2a78:	180d883a 	mov	r6,r3
    2a7c:	01c00f04 	movi	r7,60
    2a80:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2a84:	e0bffd17 	ldw	r2,-12(fp)
    2a88:	10c00504 	addi	r3,r2,20
    2a8c:	00bfffc4 	movi	r2,-1
    2a90:	d8800015 	stw	r2,0(sp)
    2a94:	e13ffd17 	ldw	r4,-12(fp)
    2a98:	01400504 	movi	r5,20
    2a9c:	180d883a 	mov	r6,r3
    2aa0:	01c00584 	movi	r7,22
    2aa4:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    2aa8:	e0bffd17 	ldw	r2,-12(fp)
    2aac:	10c00504 	addi	r3,r2,20
    2ab0:	00bfffc4 	movi	r2,-1
    2ab4:	d8800015 	stw	r2,0(sp)
    2ab8:	e13ffd17 	ldw	r4,-12(fp)
    2abc:	014009c4 	movi	r5,39
    2ac0:	180d883a 	mov	r6,r3
    2ac4:	01c00a44 	movi	r7,41
    2ac8:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2acc:	e0bffd17 	ldw	r2,-12(fp)
    2ad0:	10c00504 	addi	r3,r2,20
    2ad4:	00bfffc4 	movi	r2,-1
    2ad8:	d8800015 	stw	r2,0(sp)
    2adc:	e13ffd17 	ldw	r4,-12(fp)
    2ae0:	01400e84 	movi	r5,58
    2ae4:	180d883a 	mov	r6,r3
    2ae8:	01c00f04 	movi	r7,60
    2aec:	00023640 	call	2364 <VGA_box>
    2af0:	00005906 	br	2c58 <draw_number+0x660>
	}else if(nummer == 9){
    2af4:	e0bffe17 	ldw	r2,-8(fp)
    2af8:	10800258 	cmpnei	r2,r2,9
    2afc:	10002f1e 	bne	r2,zero,2bbc <draw_number+0x5c4>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    2b00:	e0bffd17 	ldw	r2,-12(fp)
    2b04:	11000484 	addi	r4,r2,18
    2b08:	e0bffd17 	ldw	r2,-12(fp)
    2b0c:	10c00504 	addi	r3,r2,20
    2b10:	00bfffc4 	movi	r2,-1
    2b14:	d8800015 	stw	r2,0(sp)
    2b18:	01400504 	movi	r5,20
    2b1c:	180d883a 	mov	r6,r3
    2b20:	01c00f04 	movi	r7,60
    2b24:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    2b28:	e0bffd17 	ldw	r2,-12(fp)
    2b2c:	10c00084 	addi	r3,r2,2
    2b30:	00bfffc4 	movi	r2,-1
    2b34:	d8800015 	stw	r2,0(sp)
    2b38:	e13ffd17 	ldw	r4,-12(fp)
    2b3c:	01400504 	movi	r5,20
    2b40:	180d883a 	mov	r6,r3
    2b44:	01c00a04 	movi	r7,40
    2b48:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2b4c:	e0bffd17 	ldw	r2,-12(fp)
    2b50:	10c00504 	addi	r3,r2,20
    2b54:	00bfffc4 	movi	r2,-1
    2b58:	d8800015 	stw	r2,0(sp)
    2b5c:	e13ffd17 	ldw	r4,-12(fp)
    2b60:	01400504 	movi	r5,20
    2b64:	180d883a 	mov	r6,r3
    2b68:	01c00584 	movi	r7,22
    2b6c:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    2b70:	e0bffd17 	ldw	r2,-12(fp)
    2b74:	10c00504 	addi	r3,r2,20
    2b78:	00bfffc4 	movi	r2,-1
    2b7c:	d8800015 	stw	r2,0(sp)
    2b80:	e13ffd17 	ldw	r4,-12(fp)
    2b84:	014009c4 	movi	r5,39
    2b88:	180d883a 	mov	r6,r3
    2b8c:	01c00a44 	movi	r7,41
    2b90:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2b94:	e0bffd17 	ldw	r2,-12(fp)
    2b98:	10c00504 	addi	r3,r2,20
    2b9c:	00bfffc4 	movi	r2,-1
    2ba0:	d8800015 	stw	r2,0(sp)
    2ba4:	e13ffd17 	ldw	r4,-12(fp)
    2ba8:	01400e84 	movi	r5,58
    2bac:	180d883a 	mov	r6,r3
    2bb0:	01c00f04 	movi	r7,60
    2bb4:	00023640 	call	2364 <VGA_box>
    2bb8:	00002706 	br	2c58 <draw_number+0x660>
	}else if(nummer == 0){
    2bbc:	e0bffe17 	ldw	r2,-8(fp)
    2bc0:	1000251e 	bne	r2,zero,2c58 <draw_number+0x660>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    2bc4:	e0bffd17 	ldw	r2,-12(fp)
    2bc8:	11000484 	addi	r4,r2,18
    2bcc:	e0bffd17 	ldw	r2,-12(fp)
    2bd0:	10c00504 	addi	r3,r2,20
    2bd4:	00bfffc4 	movi	r2,-1
    2bd8:	d8800015 	stw	r2,0(sp)
    2bdc:	01400504 	movi	r5,20
    2be0:	180d883a 	mov	r6,r3
    2be4:	01c00f04 	movi	r7,60
    2be8:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    2bec:	e0bffd17 	ldw	r2,-12(fp)
    2bf0:	10c00084 	addi	r3,r2,2
    2bf4:	00bfffc4 	movi	r2,-1
    2bf8:	d8800015 	stw	r2,0(sp)
    2bfc:	e13ffd17 	ldw	r4,-12(fp)
    2c00:	01400504 	movi	r5,20
    2c04:	180d883a 	mov	r6,r3
    2c08:	01c00f04 	movi	r7,60
    2c0c:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2c10:	e0bffd17 	ldw	r2,-12(fp)
    2c14:	10c00504 	addi	r3,r2,20
    2c18:	00bfffc4 	movi	r2,-1
    2c1c:	d8800015 	stw	r2,0(sp)
    2c20:	e13ffd17 	ldw	r4,-12(fp)
    2c24:	01400504 	movi	r5,20
    2c28:	180d883a 	mov	r6,r3
    2c2c:	01c00584 	movi	r7,22
    2c30:	00023640 	call	2364 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2c34:	e0bffd17 	ldw	r2,-12(fp)
    2c38:	10c00504 	addi	r3,r2,20
    2c3c:	00bfffc4 	movi	r2,-1
    2c40:	d8800015 	stw	r2,0(sp)
    2c44:	e13ffd17 	ldw	r4,-12(fp)
    2c48:	01400e84 	movi	r5,58
    2c4c:	180d883a 	mov	r6,r3
    2c50:	01c00f04 	movi	r7,60
    2c54:	00023640 	call	2364 <VGA_box>
	}
}
    2c58:	e037883a 	mov	sp,fp
    2c5c:	dfc00117 	ldw	ra,4(sp)
    2c60:	df000017 	ldw	fp,0(sp)
    2c64:	dec00204 	addi	sp,sp,8
    2c68:	f800283a 	ret

00002c6c <checkIDScore>:

int checkIDScore(int ID){
    2c6c:	defffe04 	addi	sp,sp,-8
    2c70:	df000115 	stw	fp,4(sp)
    2c74:	df000104 	addi	fp,sp,4
    2c78:	e13fff15 	stw	r4,-4(fp)
	if(ID == 1){
    2c7c:	e0bfff17 	ldw	r2,-4(fp)
    2c80:	10800058 	cmpnei	r2,r2,1
    2c84:	1000021e 	bne	r2,zero,2c90 <checkIDScore+0x24>
		return 120;
    2c88:	00801e04 	movi	r2,120
    2c8c:	00000b06 	br	2cbc <checkIDScore+0x50>
	}else if(ID == 2){
    2c90:	e0bfff17 	ldw	r2,-4(fp)
    2c94:	10800098 	cmpnei	r2,r2,2
    2c98:	1000021e 	bne	r2,zero,2ca4 <checkIDScore+0x38>
		return 150;
    2c9c:	00802584 	movi	r2,150
    2ca0:	00000606 	br	2cbc <checkIDScore+0x50>
	}else if(ID == 3){
    2ca4:	e0bfff17 	ldw	r2,-4(fp)
    2ca8:	108000d8 	cmpnei	r2,r2,3
    2cac:	1000021e 	bne	r2,zero,2cb8 <checkIDScore+0x4c>
		return 180;
    2cb0:	00802d04 	movi	r2,180
    2cb4:	00000106 	br	2cbc <checkIDScore+0x50>
	}
	
	return 0;
    2cb8:	0005883a 	mov	r2,zero
}
    2cbc:	e037883a 	mov	sp,fp
    2cc0:	df000017 	ldw	fp,0(sp)
    2cc4:	dec00104 	addi	sp,sp,4
    2cc8:	f800283a 	ret

00002ccc <_puts_r>:
    2ccc:	defff604 	addi	sp,sp,-40
    2cd0:	dc000715 	stw	r16,28(sp)
    2cd4:	2021883a 	mov	r16,r4
    2cd8:	2809883a 	mov	r4,r5
    2cdc:	dc400815 	stw	r17,32(sp)
    2ce0:	dfc00915 	stw	ra,36(sp)
    2ce4:	2823883a 	mov	r17,r5
    2ce8:	0002d880 	call	2d88 <strlen>
    2cec:	81400217 	ldw	r5,8(r16)
    2cf0:	11000044 	addi	r4,r2,1
    2cf4:	d8800115 	stw	r2,4(sp)
    2cf8:	00800074 	movhi	r2,1
    2cfc:	2980030b 	ldhu	r6,12(r5)
    2d00:	108b7c04 	addi	r2,r2,11760
    2d04:	d8800215 	stw	r2,8(sp)
    2d08:	00800044 	movi	r2,1
    2d0c:	d8800315 	stw	r2,12(sp)
    2d10:	00800084 	movi	r2,2
    2d14:	d8800515 	stw	r2,20(sp)
    2d18:	dc400015 	stw	r17,0(sp)
    2d1c:	d9000615 	stw	r4,24(sp)
    2d20:	dec00415 	stw	sp,16(sp)
    2d24:	3088000c 	andi	r2,r6,8192
    2d28:	1000061e 	bne	r2,zero,2d44 <_puts_r+0x78>
    2d2c:	29001917 	ldw	r4,100(r5)
    2d30:	00b7ffc4 	movi	r2,-8193
    2d34:	31880014 	ori	r6,r6,8192
    2d38:	2084703a 	and	r2,r4,r2
    2d3c:	2980030d 	sth	r6,12(r5)
    2d40:	28801915 	stw	r2,100(r5)
    2d44:	8009883a 	mov	r4,r16
    2d48:	d9800404 	addi	r6,sp,16
    2d4c:	0002e200 	call	2e20 <__sfvwrite_r>
    2d50:	1000061e 	bne	r2,zero,2d6c <_puts_r+0xa0>
    2d54:	00800284 	movi	r2,10
    2d58:	dfc00917 	ldw	ra,36(sp)
    2d5c:	dc400817 	ldw	r17,32(sp)
    2d60:	dc000717 	ldw	r16,28(sp)
    2d64:	dec00a04 	addi	sp,sp,40
    2d68:	f800283a 	ret
    2d6c:	00bfffc4 	movi	r2,-1
    2d70:	003ff906 	br	2d58 <__alt_mem_Flash_flash_data+0xf4002d58>

00002d74 <puts>:
    2d74:	00800074 	movhi	r2,1
    2d78:	1093c104 	addi	r2,r2,20228
    2d7c:	200b883a 	mov	r5,r4
    2d80:	11000017 	ldw	r4,0(r2)
    2d84:	0002ccc1 	jmpi	2ccc <_puts_r>

00002d88 <strlen>:
    2d88:	208000cc 	andi	r2,r4,3
    2d8c:	10002026 	beq	r2,zero,2e10 <strlen+0x88>
    2d90:	20800007 	ldb	r2,0(r4)
    2d94:	10002026 	beq	r2,zero,2e18 <strlen+0x90>
    2d98:	2005883a 	mov	r2,r4
    2d9c:	00000206 	br	2da8 <strlen+0x20>
    2da0:	10c00007 	ldb	r3,0(r2)
    2da4:	18001826 	beq	r3,zero,2e08 <strlen+0x80>
    2da8:	10800044 	addi	r2,r2,1
    2dac:	10c000cc 	andi	r3,r2,3
    2db0:	183ffb1e 	bne	r3,zero,2da0 <__alt_mem_Flash_flash_data+0xf4002da0>
    2db4:	10c00017 	ldw	r3,0(r2)
    2db8:	01ffbff4 	movhi	r7,65279
    2dbc:	39ffbfc4 	addi	r7,r7,-257
    2dc0:	00ca303a 	nor	r5,zero,r3
    2dc4:	01a02074 	movhi	r6,32897
    2dc8:	19c7883a 	add	r3,r3,r7
    2dcc:	31a02004 	addi	r6,r6,-32640
    2dd0:	1946703a 	and	r3,r3,r5
    2dd4:	1986703a 	and	r3,r3,r6
    2dd8:	1800091e 	bne	r3,zero,2e00 <strlen+0x78>
    2ddc:	10800104 	addi	r2,r2,4
    2de0:	10c00017 	ldw	r3,0(r2)
    2de4:	19cb883a 	add	r5,r3,r7
    2de8:	00c6303a 	nor	r3,zero,r3
    2dec:	28c6703a 	and	r3,r5,r3
    2df0:	1986703a 	and	r3,r3,r6
    2df4:	183ff926 	beq	r3,zero,2ddc <__alt_mem_Flash_flash_data+0xf4002ddc>
    2df8:	00000106 	br	2e00 <strlen+0x78>
    2dfc:	10800044 	addi	r2,r2,1
    2e00:	10c00007 	ldb	r3,0(r2)
    2e04:	183ffd1e 	bne	r3,zero,2dfc <__alt_mem_Flash_flash_data+0xf4002dfc>
    2e08:	1105c83a 	sub	r2,r2,r4
    2e0c:	f800283a 	ret
    2e10:	2005883a 	mov	r2,r4
    2e14:	003fe706 	br	2db4 <__alt_mem_Flash_flash_data+0xf4002db4>
    2e18:	0005883a 	mov	r2,zero
    2e1c:	f800283a 	ret

00002e20 <__sfvwrite_r>:
    2e20:	30800217 	ldw	r2,8(r6)
    2e24:	10006726 	beq	r2,zero,2fc4 <__sfvwrite_r+0x1a4>
    2e28:	defff404 	addi	sp,sp,-48
    2e2c:	dd000615 	stw	r20,24(sp)
    2e30:	2029883a 	mov	r20,r4
    2e34:	2900030b 	ldhu	r4,12(r5)
    2e38:	ddc00915 	stw	r23,36(sp)
    2e3c:	dc000215 	stw	r16,8(sp)
    2e40:	dfc00b15 	stw	ra,44(sp)
    2e44:	df000a15 	stw	fp,40(sp)
    2e48:	dd800815 	stw	r22,32(sp)
    2e4c:	dd400715 	stw	r21,28(sp)
    2e50:	dcc00515 	stw	r19,20(sp)
    2e54:	dc800415 	stw	r18,16(sp)
    2e58:	dc400315 	stw	r17,12(sp)
    2e5c:	2080020c 	andi	r2,r4,8
    2e60:	2821883a 	mov	r16,r5
    2e64:	302f883a 	mov	r23,r6
    2e68:	10002726 	beq	r2,zero,2f08 <__sfvwrite_r+0xe8>
    2e6c:	28800417 	ldw	r2,16(r5)
    2e70:	10002526 	beq	r2,zero,2f08 <__sfvwrite_r+0xe8>
    2e74:	2080008c 	andi	r2,r4,2
    2e78:	bc400017 	ldw	r17,0(r23)
    2e7c:	10002a26 	beq	r2,zero,2f28 <__sfvwrite_r+0x108>
    2e80:	05600034 	movhi	r21,32768
    2e84:	0027883a 	mov	r19,zero
    2e88:	0025883a 	mov	r18,zero
    2e8c:	ad7f0004 	addi	r21,r21,-1024
    2e90:	980d883a 	mov	r6,r19
    2e94:	a009883a 	mov	r4,r20
    2e98:	90004626 	beq	r18,zero,2fb4 <__sfvwrite_r+0x194>
    2e9c:	900f883a 	mov	r7,r18
    2ea0:	81400717 	ldw	r5,28(r16)
    2ea4:	ac80022e 	bgeu	r21,r18,2eb0 <__sfvwrite_r+0x90>
    2ea8:	01e00034 	movhi	r7,32768
    2eac:	39ff0004 	addi	r7,r7,-1024
    2eb0:	80800917 	ldw	r2,36(r16)
    2eb4:	103ee83a 	callr	r2
    2eb8:	0080520e 	bge	zero,r2,3004 <__sfvwrite_r+0x1e4>
    2ebc:	b8c00217 	ldw	r3,8(r23)
    2ec0:	98a7883a 	add	r19,r19,r2
    2ec4:	90a5c83a 	sub	r18,r18,r2
    2ec8:	1885c83a 	sub	r2,r3,r2
    2ecc:	b8800215 	stw	r2,8(r23)
    2ed0:	103fef1e 	bne	r2,zero,2e90 <__alt_mem_Flash_flash_data+0xf4002e90>
    2ed4:	0005883a 	mov	r2,zero
    2ed8:	dfc00b17 	ldw	ra,44(sp)
    2edc:	df000a17 	ldw	fp,40(sp)
    2ee0:	ddc00917 	ldw	r23,36(sp)
    2ee4:	dd800817 	ldw	r22,32(sp)
    2ee8:	dd400717 	ldw	r21,28(sp)
    2eec:	dd000617 	ldw	r20,24(sp)
    2ef0:	dcc00517 	ldw	r19,20(sp)
    2ef4:	dc800417 	ldw	r18,16(sp)
    2ef8:	dc400317 	ldw	r17,12(sp)
    2efc:	dc000217 	ldw	r16,8(sp)
    2f00:	dec00c04 	addi	sp,sp,48
    2f04:	f800283a 	ret
    2f08:	a009883a 	mov	r4,r20
    2f0c:	800b883a 	mov	r5,r16
    2f10:	00043c00 	call	43c0 <__swsetup_r>
    2f14:	1000ec1e 	bne	r2,zero,32c8 <__sfvwrite_r+0x4a8>
    2f18:	8100030b 	ldhu	r4,12(r16)
    2f1c:	bc400017 	ldw	r17,0(r23)
    2f20:	2080008c 	andi	r2,r4,2
    2f24:	103fd61e 	bne	r2,zero,2e80 <__alt_mem_Flash_flash_data+0xf4002e80>
    2f28:	2080004c 	andi	r2,r4,1
    2f2c:	10003a1e 	bne	r2,zero,3018 <__sfvwrite_r+0x1f8>
    2f30:	0039883a 	mov	fp,zero
    2f34:	0025883a 	mov	r18,zero
    2f38:	90001a26 	beq	r18,zero,2fa4 <__sfvwrite_r+0x184>
    2f3c:	2080800c 	andi	r2,r4,512
    2f40:	85800217 	ldw	r22,8(r16)
    2f44:	10007626 	beq	r2,zero,3120 <__sfvwrite_r+0x300>
    2f48:	b027883a 	mov	r19,r22
    2f4c:	95809436 	bltu	r18,r22,31a0 <__sfvwrite_r+0x380>
    2f50:	2081200c 	andi	r2,r4,1152
    2f54:	10009f1e 	bne	r2,zero,31d4 <__sfvwrite_r+0x3b4>
    2f58:	81000017 	ldw	r4,0(r16)
    2f5c:	e00b883a 	mov	r5,fp
    2f60:	980d883a 	mov	r6,r19
    2f64:	0003ca80 	call	3ca8 <memmove>
    2f68:	81000217 	ldw	r4,8(r16)
    2f6c:	81400017 	ldw	r5,0(r16)
    2f70:	9005883a 	mov	r2,r18
    2f74:	2587c83a 	sub	r3,r4,r22
    2f78:	2ce7883a 	add	r19,r5,r19
    2f7c:	80c00215 	stw	r3,8(r16)
    2f80:	84c00015 	stw	r19,0(r16)
    2f84:	b8c00217 	ldw	r3,8(r23)
    2f88:	e0b9883a 	add	fp,fp,r2
    2f8c:	90a5c83a 	sub	r18,r18,r2
    2f90:	1885c83a 	sub	r2,r3,r2
    2f94:	b8800215 	stw	r2,8(r23)
    2f98:	103fce26 	beq	r2,zero,2ed4 <__alt_mem_Flash_flash_data+0xf4002ed4>
    2f9c:	8100030b 	ldhu	r4,12(r16)
    2fa0:	903fe61e 	bne	r18,zero,2f3c <__alt_mem_Flash_flash_data+0xf4002f3c>
    2fa4:	8f000017 	ldw	fp,0(r17)
    2fa8:	8c800117 	ldw	r18,4(r17)
    2fac:	8c400204 	addi	r17,r17,8
    2fb0:	003fe106 	br	2f38 <__alt_mem_Flash_flash_data+0xf4002f38>
    2fb4:	8cc00017 	ldw	r19,0(r17)
    2fb8:	8c800117 	ldw	r18,4(r17)
    2fbc:	8c400204 	addi	r17,r17,8
    2fc0:	003fb306 	br	2e90 <__alt_mem_Flash_flash_data+0xf4002e90>
    2fc4:	0005883a 	mov	r2,zero
    2fc8:	f800283a 	ret
    2fcc:	00a00034 	movhi	r2,32768
    2fd0:	10bfffc4 	addi	r2,r2,-1
    2fd4:	9009883a 	mov	r4,r18
    2fd8:	1480012e 	bgeu	r2,r18,2fe0 <__sfvwrite_r+0x1c0>
    2fdc:	1009883a 	mov	r4,r2
    2fe0:	980b883a 	mov	r5,r19
    2fe4:	00058800 	call	5880 <__divsi3>
    2fe8:	81400717 	ldw	r5,28(r16)
    2fec:	80c00917 	ldw	r3,36(r16)
    2ff0:	988f383a 	mul	r7,r19,r2
    2ff4:	a009883a 	mov	r4,r20
    2ff8:	e00d883a 	mov	r6,fp
    2ffc:	183ee83a 	callr	r3
    3000:	00bfe016 	blt	zero,r2,2f84 <__alt_mem_Flash_flash_data+0xf4002f84>
    3004:	8080030b 	ldhu	r2,12(r16)
    3008:	10801014 	ori	r2,r2,64
    300c:	8080030d 	sth	r2,12(r16)
    3010:	00bfffc4 	movi	r2,-1
    3014:	003fb006 	br	2ed8 <__alt_mem_Flash_flash_data+0xf4002ed8>
    3018:	0027883a 	mov	r19,zero
    301c:	0011883a 	mov	r8,zero
    3020:	0039883a 	mov	fp,zero
    3024:	0025883a 	mov	r18,zero
    3028:	90001f26 	beq	r18,zero,30a8 <__sfvwrite_r+0x288>
    302c:	40006026 	beq	r8,zero,31b0 <__sfvwrite_r+0x390>
    3030:	982b883a 	mov	r21,r19
    3034:	94c0012e 	bgeu	r18,r19,303c <__sfvwrite_r+0x21c>
    3038:	902b883a 	mov	r21,r18
    303c:	81000017 	ldw	r4,0(r16)
    3040:	80800417 	ldw	r2,16(r16)
    3044:	a82d883a 	mov	r22,r21
    3048:	81800217 	ldw	r6,8(r16)
    304c:	81c00517 	ldw	r7,20(r16)
    3050:	1100022e 	bgeu	r2,r4,305c <__sfvwrite_r+0x23c>
    3054:	31c7883a 	add	r3,r6,r7
    3058:	1d401816 	blt	r3,r21,30bc <__sfvwrite_r+0x29c>
    305c:	a9c04416 	blt	r21,r7,3170 <__sfvwrite_r+0x350>
    3060:	80800917 	ldw	r2,36(r16)
    3064:	81400717 	ldw	r5,28(r16)
    3068:	a009883a 	mov	r4,r20
    306c:	da000115 	stw	r8,4(sp)
    3070:	e00d883a 	mov	r6,fp
    3074:	103ee83a 	callr	r2
    3078:	102d883a 	mov	r22,r2
    307c:	da000117 	ldw	r8,4(sp)
    3080:	00bfe00e 	bge	zero,r2,3004 <__alt_mem_Flash_flash_data+0xf4003004>
    3084:	9da7c83a 	sub	r19,r19,r22
    3088:	98001f26 	beq	r19,zero,3108 <__sfvwrite_r+0x2e8>
    308c:	b8800217 	ldw	r2,8(r23)
    3090:	e5b9883a 	add	fp,fp,r22
    3094:	95a5c83a 	sub	r18,r18,r22
    3098:	15adc83a 	sub	r22,r2,r22
    309c:	bd800215 	stw	r22,8(r23)
    30a0:	b03f8c26 	beq	r22,zero,2ed4 <__alt_mem_Flash_flash_data+0xf4002ed4>
    30a4:	903fe11e 	bne	r18,zero,302c <__alt_mem_Flash_flash_data+0xf400302c>
    30a8:	8f000017 	ldw	fp,0(r17)
    30ac:	8c800117 	ldw	r18,4(r17)
    30b0:	0011883a 	mov	r8,zero
    30b4:	8c400204 	addi	r17,r17,8
    30b8:	003fdb06 	br	3028 <__alt_mem_Flash_flash_data+0xf4003028>
    30bc:	180d883a 	mov	r6,r3
    30c0:	e00b883a 	mov	r5,fp
    30c4:	da000115 	stw	r8,4(sp)
    30c8:	d8c00015 	stw	r3,0(sp)
    30cc:	0003ca80 	call	3ca8 <memmove>
    30d0:	d8c00017 	ldw	r3,0(sp)
    30d4:	80800017 	ldw	r2,0(r16)
    30d8:	a009883a 	mov	r4,r20
    30dc:	800b883a 	mov	r5,r16
    30e0:	10c5883a 	add	r2,r2,r3
    30e4:	80800015 	stw	r2,0(r16)
    30e8:	d8c00015 	stw	r3,0(sp)
    30ec:	000471c0 	call	471c <_fflush_r>
    30f0:	d8c00017 	ldw	r3,0(sp)
    30f4:	da000117 	ldw	r8,4(sp)
    30f8:	103fc21e 	bne	r2,zero,3004 <__alt_mem_Flash_flash_data+0xf4003004>
    30fc:	182d883a 	mov	r22,r3
    3100:	9da7c83a 	sub	r19,r19,r22
    3104:	983fe11e 	bne	r19,zero,308c <__alt_mem_Flash_flash_data+0xf400308c>
    3108:	a009883a 	mov	r4,r20
    310c:	800b883a 	mov	r5,r16
    3110:	000471c0 	call	471c <_fflush_r>
    3114:	103fbb1e 	bne	r2,zero,3004 <__alt_mem_Flash_flash_data+0xf4003004>
    3118:	0011883a 	mov	r8,zero
    311c:	003fdb06 	br	308c <__alt_mem_Flash_flash_data+0xf400308c>
    3120:	81000017 	ldw	r4,0(r16)
    3124:	80800417 	ldw	r2,16(r16)
    3128:	11000236 	bltu	r2,r4,3134 <__sfvwrite_r+0x314>
    312c:	84c00517 	ldw	r19,20(r16)
    3130:	94ffa62e 	bgeu	r18,r19,2fcc <__alt_mem_Flash_flash_data+0xf4002fcc>
    3134:	9027883a 	mov	r19,r18
    3138:	b480012e 	bgeu	r22,r18,3140 <__sfvwrite_r+0x320>
    313c:	b027883a 	mov	r19,r22
    3140:	e00b883a 	mov	r5,fp
    3144:	980d883a 	mov	r6,r19
    3148:	0003ca80 	call	3ca8 <memmove>
    314c:	80800217 	ldw	r2,8(r16)
    3150:	80c00017 	ldw	r3,0(r16)
    3154:	14c5c83a 	sub	r2,r2,r19
    3158:	1cc7883a 	add	r3,r3,r19
    315c:	80800215 	stw	r2,8(r16)
    3160:	80c00015 	stw	r3,0(r16)
    3164:	10004326 	beq	r2,zero,3274 <__sfvwrite_r+0x454>
    3168:	9805883a 	mov	r2,r19
    316c:	003f8506 	br	2f84 <__alt_mem_Flash_flash_data+0xf4002f84>
    3170:	a80d883a 	mov	r6,r21
    3174:	e00b883a 	mov	r5,fp
    3178:	da000115 	stw	r8,4(sp)
    317c:	0003ca80 	call	3ca8 <memmove>
    3180:	80800217 	ldw	r2,8(r16)
    3184:	80c00017 	ldw	r3,0(r16)
    3188:	da000117 	ldw	r8,4(sp)
    318c:	1545c83a 	sub	r2,r2,r21
    3190:	1d6b883a 	add	r21,r3,r21
    3194:	80800215 	stw	r2,8(r16)
    3198:	85400015 	stw	r21,0(r16)
    319c:	003fb906 	br	3084 <__alt_mem_Flash_flash_data+0xf4003084>
    31a0:	81000017 	ldw	r4,0(r16)
    31a4:	902d883a 	mov	r22,r18
    31a8:	9027883a 	mov	r19,r18
    31ac:	003f6b06 	br	2f5c <__alt_mem_Flash_flash_data+0xf4002f5c>
    31b0:	e009883a 	mov	r4,fp
    31b4:	01400284 	movi	r5,10
    31b8:	900d883a 	mov	r6,r18
    31bc:	0003a880 	call	3a88 <memchr>
    31c0:	10003e26 	beq	r2,zero,32bc <__sfvwrite_r+0x49c>
    31c4:	10800044 	addi	r2,r2,1
    31c8:	1727c83a 	sub	r19,r2,fp
    31cc:	02000044 	movi	r8,1
    31d0:	003f9706 	br	3030 <__alt_mem_Flash_flash_data+0xf4003030>
    31d4:	80800517 	ldw	r2,20(r16)
    31d8:	81400417 	ldw	r5,16(r16)
    31dc:	80c00017 	ldw	r3,0(r16)
    31e0:	10a7883a 	add	r19,r2,r2
    31e4:	9885883a 	add	r2,r19,r2
    31e8:	1026d7fa 	srli	r19,r2,31
    31ec:	196bc83a 	sub	r21,r3,r5
    31f0:	a9800044 	addi	r6,r21,1
    31f4:	9885883a 	add	r2,r19,r2
    31f8:	1027d07a 	srai	r19,r2,1
    31fc:	3485883a 	add	r2,r6,r18
    3200:	980d883a 	mov	r6,r19
    3204:	9880022e 	bgeu	r19,r2,3210 <__sfvwrite_r+0x3f0>
    3208:	1027883a 	mov	r19,r2
    320c:	100d883a 	mov	r6,r2
    3210:	2101000c 	andi	r4,r4,1024
    3214:	20001c26 	beq	r4,zero,3288 <__sfvwrite_r+0x468>
    3218:	a009883a 	mov	r4,r20
    321c:	300b883a 	mov	r5,r6
    3220:	00032e00 	call	32e0 <_malloc_r>
    3224:	102d883a 	mov	r22,r2
    3228:	10002926 	beq	r2,zero,32d0 <__sfvwrite_r+0x4b0>
    322c:	81400417 	ldw	r5,16(r16)
    3230:	1009883a 	mov	r4,r2
    3234:	a80d883a 	mov	r6,r21
    3238:	0003b700 	call	3b70 <memcpy>
    323c:	8080030b 	ldhu	r2,12(r16)
    3240:	00fedfc4 	movi	r3,-1153
    3244:	10c4703a 	and	r2,r2,r3
    3248:	10802014 	ori	r2,r2,128
    324c:	8080030d 	sth	r2,12(r16)
    3250:	b549883a 	add	r4,r22,r21
    3254:	9d4bc83a 	sub	r5,r19,r21
    3258:	85800415 	stw	r22,16(r16)
    325c:	84c00515 	stw	r19,20(r16)
    3260:	81000015 	stw	r4,0(r16)
    3264:	902d883a 	mov	r22,r18
    3268:	81400215 	stw	r5,8(r16)
    326c:	9027883a 	mov	r19,r18
    3270:	003f3a06 	br	2f5c <__alt_mem_Flash_flash_data+0xf4002f5c>
    3274:	a009883a 	mov	r4,r20
    3278:	800b883a 	mov	r5,r16
    327c:	000471c0 	call	471c <_fflush_r>
    3280:	103fb926 	beq	r2,zero,3168 <__alt_mem_Flash_flash_data+0xf4003168>
    3284:	003f5f06 	br	3004 <__alt_mem_Flash_flash_data+0xf4003004>
    3288:	a009883a 	mov	r4,r20
    328c:	0003e040 	call	3e04 <_realloc_r>
    3290:	102d883a 	mov	r22,r2
    3294:	103fee1e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    3298:	81400417 	ldw	r5,16(r16)
    329c:	a009883a 	mov	r4,r20
    32a0:	0004c6c0 	call	4c6c <_free_r>
    32a4:	8080030b 	ldhu	r2,12(r16)
    32a8:	00ffdfc4 	movi	r3,-129
    32ac:	1884703a 	and	r2,r3,r2
    32b0:	00c00304 	movi	r3,12
    32b4:	a0c00015 	stw	r3,0(r20)
    32b8:	003f5306 	br	3008 <__alt_mem_Flash_flash_data+0xf4003008>
    32bc:	94c00044 	addi	r19,r18,1
    32c0:	02000044 	movi	r8,1
    32c4:	003f5a06 	br	3030 <__alt_mem_Flash_flash_data+0xf4003030>
    32c8:	00bfffc4 	movi	r2,-1
    32cc:	003f0206 	br	2ed8 <__alt_mem_Flash_flash_data+0xf4002ed8>
    32d0:	00800304 	movi	r2,12
    32d4:	a0800015 	stw	r2,0(r20)
    32d8:	8080030b 	ldhu	r2,12(r16)
    32dc:	003f4a06 	br	3008 <__alt_mem_Flash_flash_data+0xf4003008>

000032e0 <_malloc_r>:
    32e0:	defff504 	addi	sp,sp,-44
    32e4:	dc800315 	stw	r18,12(sp)
    32e8:	dfc00a15 	stw	ra,40(sp)
    32ec:	df000915 	stw	fp,36(sp)
    32f0:	ddc00815 	stw	r23,32(sp)
    32f4:	dd800715 	stw	r22,28(sp)
    32f8:	dd400615 	stw	r21,24(sp)
    32fc:	dd000515 	stw	r20,20(sp)
    3300:	dcc00415 	stw	r19,16(sp)
    3304:	dc400215 	stw	r17,8(sp)
    3308:	dc000115 	stw	r16,4(sp)
    330c:	288002c4 	addi	r2,r5,11
    3310:	00c00584 	movi	r3,22
    3314:	2025883a 	mov	r18,r4
    3318:	18802a2e 	bgeu	r3,r2,33c4 <_malloc_r+0xe4>
    331c:	047ffe04 	movi	r17,-8
    3320:	1462703a 	and	r17,r2,r17
    3324:	88009e16 	blt	r17,zero,35a0 <_malloc_r+0x2c0>
    3328:	89409d36 	bltu	r17,r5,35a0 <_malloc_r+0x2c0>
    332c:	000641c0 	call	641c <__malloc_lock>
    3330:	00807dc4 	movi	r2,503
    3334:	14402736 	bltu	r2,r17,33d4 <_malloc_r+0xf4>
    3338:	8806d0fa 	srli	r3,r17,3
    333c:	04c00074 	movhi	r19,1
    3340:	9ccd4c04 	addi	r19,r19,13616
    3344:	18c5883a 	add	r2,r3,r3
    3348:	1085883a 	add	r2,r2,r2
    334c:	1085883a 	add	r2,r2,r2
    3350:	9885883a 	add	r2,r19,r2
    3354:	14000317 	ldw	r16,12(r2)
    3358:	80814a26 	beq	r16,r2,3884 <_malloc_r+0x5a4>
    335c:	80c00117 	ldw	r3,4(r16)
    3360:	81000317 	ldw	r4,12(r16)
    3364:	00bfff04 	movi	r2,-4
    3368:	1884703a 	and	r2,r3,r2
    336c:	81400217 	ldw	r5,8(r16)
    3370:	8085883a 	add	r2,r16,r2
    3374:	10c00117 	ldw	r3,4(r2)
    3378:	29000315 	stw	r4,12(r5)
    337c:	21400215 	stw	r5,8(r4)
    3380:	18c00054 	ori	r3,r3,1
    3384:	10c00115 	stw	r3,4(r2)
    3388:	9009883a 	mov	r4,r18
    338c:	000653c0 	call	653c <__malloc_unlock>
    3390:	80800204 	addi	r2,r16,8
    3394:	dfc00a17 	ldw	ra,40(sp)
    3398:	df000917 	ldw	fp,36(sp)
    339c:	ddc00817 	ldw	r23,32(sp)
    33a0:	dd800717 	ldw	r22,28(sp)
    33a4:	dd400617 	ldw	r21,24(sp)
    33a8:	dd000517 	ldw	r20,20(sp)
    33ac:	dcc00417 	ldw	r19,16(sp)
    33b0:	dc800317 	ldw	r18,12(sp)
    33b4:	dc400217 	ldw	r17,8(sp)
    33b8:	dc000117 	ldw	r16,4(sp)
    33bc:	dec00b04 	addi	sp,sp,44
    33c0:	f800283a 	ret
    33c4:	04400404 	movi	r17,16
    33c8:	89407536 	bltu	r17,r5,35a0 <_malloc_r+0x2c0>
    33cc:	000641c0 	call	641c <__malloc_lock>
    33d0:	003fd906 	br	3338 <__alt_mem_Flash_flash_data+0xf4003338>
    33d4:	8806d27a 	srli	r3,r17,9
    33d8:	18007526 	beq	r3,zero,35b0 <_malloc_r+0x2d0>
    33dc:	00800104 	movi	r2,4
    33e0:	10c0ef36 	bltu	r2,r3,37a0 <_malloc_r+0x4c0>
    33e4:	8806d1ba 	srli	r3,r17,6
    33e8:	19c00e04 	addi	r7,r3,56
    33ec:	39cb883a 	add	r5,r7,r7
    33f0:	04c00074 	movhi	r19,1
    33f4:	294b883a 	add	r5,r5,r5
    33f8:	9ccd4c04 	addi	r19,r19,13616
    33fc:	294b883a 	add	r5,r5,r5
    3400:	994b883a 	add	r5,r19,r5
    3404:	2c000317 	ldw	r16,12(r5)
    3408:	2c000e26 	beq	r5,r16,3444 <_malloc_r+0x164>
    340c:	80800117 	ldw	r2,4(r16)
    3410:	01bfff04 	movi	r6,-4
    3414:	010003c4 	movi	r4,15
    3418:	1184703a 	and	r2,r2,r6
    341c:	1447c83a 	sub	r3,r2,r17
    3420:	20c00716 	blt	r4,r3,3440 <_malloc_r+0x160>
    3424:	1800650e 	bge	r3,zero,35bc <_malloc_r+0x2dc>
    3428:	84000317 	ldw	r16,12(r16)
    342c:	2c000526 	beq	r5,r16,3444 <_malloc_r+0x164>
    3430:	80800117 	ldw	r2,4(r16)
    3434:	1184703a 	and	r2,r2,r6
    3438:	1447c83a 	sub	r3,r2,r17
    343c:	20fff90e 	bge	r4,r3,3424 <__alt_mem_Flash_flash_data+0xf4003424>
    3440:	39ffffc4 	addi	r7,r7,-1
    3444:	38c00044 	addi	r3,r7,1
    3448:	01800074 	movhi	r6,1
    344c:	9c000417 	ldw	r16,16(r19)
    3450:	318d4c04 	addi	r6,r6,13616
    3454:	32400204 	addi	r9,r6,8
    3458:	82410326 	beq	r16,r9,3868 <_malloc_r+0x588>
    345c:	81000117 	ldw	r4,4(r16)
    3460:	00bfff04 	movi	r2,-4
    3464:	208e703a 	and	r7,r4,r2
    3468:	3c45c83a 	sub	r2,r7,r17
    346c:	010003c4 	movi	r4,15
    3470:	2080ee16 	blt	r4,r2,382c <_malloc_r+0x54c>
    3474:	32400515 	stw	r9,20(r6)
    3478:	32400415 	stw	r9,16(r6)
    347c:	1000510e 	bge	r2,zero,35c4 <_malloc_r+0x2e4>
    3480:	00807fc4 	movi	r2,511
    3484:	11c0ce36 	bltu	r2,r7,37c0 <_malloc_r+0x4e0>
    3488:	3808d0fa 	srli	r4,r7,3
    348c:	01c00044 	movi	r7,1
    3490:	30800117 	ldw	r2,4(r6)
    3494:	210b883a 	add	r5,r4,r4
    3498:	294b883a 	add	r5,r5,r5
    349c:	2009d0ba 	srai	r4,r4,2
    34a0:	294b883a 	add	r5,r5,r5
    34a4:	298b883a 	add	r5,r5,r6
    34a8:	2a000217 	ldw	r8,8(r5)
    34ac:	3908983a 	sll	r4,r7,r4
    34b0:	81400315 	stw	r5,12(r16)
    34b4:	82000215 	stw	r8,8(r16)
    34b8:	2088b03a 	or	r4,r4,r2
    34bc:	2c000215 	stw	r16,8(r5)
    34c0:	31000115 	stw	r4,4(r6)
    34c4:	44000315 	stw	r16,12(r8)
    34c8:	1805d0ba 	srai	r2,r3,2
    34cc:	01400044 	movi	r5,1
    34d0:	288a983a 	sll	r5,r5,r2
    34d4:	21404336 	bltu	r4,r5,35e4 <_malloc_r+0x304>
    34d8:	2144703a 	and	r2,r4,r5
    34dc:	10000a1e 	bne	r2,zero,3508 <_malloc_r+0x228>
    34e0:	00bfff04 	movi	r2,-4
    34e4:	294b883a 	add	r5,r5,r5
    34e8:	1886703a 	and	r3,r3,r2
    34ec:	2144703a 	and	r2,r4,r5
    34f0:	18c00104 	addi	r3,r3,4
    34f4:	1000041e 	bne	r2,zero,3508 <_malloc_r+0x228>
    34f8:	294b883a 	add	r5,r5,r5
    34fc:	2144703a 	and	r2,r4,r5
    3500:	18c00104 	addi	r3,r3,4
    3504:	103ffc26 	beq	r2,zero,34f8 <__alt_mem_Flash_flash_data+0xf40034f8>
    3508:	023fff04 	movi	r8,-4
    350c:	01c003c4 	movi	r7,15
    3510:	18c5883a 	add	r2,r3,r3
    3514:	1085883a 	add	r2,r2,r2
    3518:	1085883a 	add	r2,r2,r2
    351c:	9895883a 	add	r10,r19,r2
    3520:	52c00304 	addi	r11,r10,12
    3524:	1819883a 	mov	r12,r3
    3528:	5c000017 	ldw	r16,0(r11)
    352c:	59bffd04 	addi	r6,r11,-12
    3530:	8180041e 	bne	r16,r6,3544 <_malloc_r+0x264>
    3534:	0000ce06 	br	3870 <_malloc_r+0x590>
    3538:	2000d70e 	bge	r4,zero,3898 <_malloc_r+0x5b8>
    353c:	84000317 	ldw	r16,12(r16)
    3540:	8180cb26 	beq	r16,r6,3870 <_malloc_r+0x590>
    3544:	80800117 	ldw	r2,4(r16)
    3548:	1204703a 	and	r2,r2,r8
    354c:	1449c83a 	sub	r4,r2,r17
    3550:	393ff90e 	bge	r7,r4,3538 <__alt_mem_Flash_flash_data+0xf4003538>
    3554:	80800317 	ldw	r2,12(r16)
    3558:	80c00217 	ldw	r3,8(r16)
    355c:	89400054 	ori	r5,r17,1
    3560:	81400115 	stw	r5,4(r16)
    3564:	18800315 	stw	r2,12(r3)
    3568:	10c00215 	stw	r3,8(r2)
    356c:	8463883a 	add	r17,r16,r17
    3570:	9c400515 	stw	r17,20(r19)
    3574:	9c400415 	stw	r17,16(r19)
    3578:	20800054 	ori	r2,r4,1
    357c:	88800115 	stw	r2,4(r17)
    3580:	8a400315 	stw	r9,12(r17)
    3584:	8a400215 	stw	r9,8(r17)
    3588:	8923883a 	add	r17,r17,r4
    358c:	89000015 	stw	r4,0(r17)
    3590:	9009883a 	mov	r4,r18
    3594:	000653c0 	call	653c <__malloc_unlock>
    3598:	80800204 	addi	r2,r16,8
    359c:	003f7d06 	br	3394 <__alt_mem_Flash_flash_data+0xf4003394>
    35a0:	00800304 	movi	r2,12
    35a4:	90800015 	stw	r2,0(r18)
    35a8:	0005883a 	mov	r2,zero
    35ac:	003f7906 	br	3394 <__alt_mem_Flash_flash_data+0xf4003394>
    35b0:	01401f84 	movi	r5,126
    35b4:	01c00fc4 	movi	r7,63
    35b8:	003f8d06 	br	33f0 <__alt_mem_Flash_flash_data+0xf40033f0>
    35bc:	81000317 	ldw	r4,12(r16)
    35c0:	003f6a06 	br	336c <__alt_mem_Flash_flash_data+0xf400336c>
    35c4:	81c5883a 	add	r2,r16,r7
    35c8:	10c00117 	ldw	r3,4(r2)
    35cc:	9009883a 	mov	r4,r18
    35d0:	18c00054 	ori	r3,r3,1
    35d4:	10c00115 	stw	r3,4(r2)
    35d8:	000653c0 	call	653c <__malloc_unlock>
    35dc:	80800204 	addi	r2,r16,8
    35e0:	003f6c06 	br	3394 <__alt_mem_Flash_flash_data+0xf4003394>
    35e4:	9c000217 	ldw	r16,8(r19)
    35e8:	00bfff04 	movi	r2,-4
    35ec:	85800117 	ldw	r22,4(r16)
    35f0:	b0ac703a 	and	r22,r22,r2
    35f4:	b4400336 	bltu	r22,r17,3604 <_malloc_r+0x324>
    35f8:	b445c83a 	sub	r2,r22,r17
    35fc:	00c003c4 	movi	r3,15
    3600:	18805d16 	blt	r3,r2,3778 <_malloc_r+0x498>
    3604:	05c00074 	movhi	r23,1
    3608:	00800074 	movhi	r2,1
    360c:	bdd3c204 	addi	r23,r23,20232
    3610:	109bbc04 	addi	r2,r2,28400
    3614:	15400017 	ldw	r21,0(r2)
    3618:	b9000017 	ldw	r4,0(r23)
    361c:	00ffffc4 	movi	r3,-1
    3620:	858d883a 	add	r6,r16,r22
    3624:	8d6b883a 	add	r21,r17,r21
    3628:	20c0e426 	beq	r4,r3,39bc <_malloc_r+0x6dc>
    362c:	ad4403c4 	addi	r21,r21,4111
    3630:	00fc0004 	movi	r3,-4096
    3634:	a8ea703a 	and	r21,r21,r3
    3638:	9009883a 	mov	r4,r18
    363c:	a80b883a 	mov	r5,r21
    3640:	d9800015 	stw	r6,0(sp)
    3644:	000436c0 	call	436c <_sbrk_r>
    3648:	00ffffc4 	movi	r3,-1
    364c:	1029883a 	mov	r20,r2
    3650:	d9800017 	ldw	r6,0(sp)
    3654:	10c0a426 	beq	r2,r3,38e8 <_malloc_r+0x608>
    3658:	1180a236 	bltu	r2,r6,38e4 <_malloc_r+0x604>
    365c:	07000074 	movhi	fp,1
    3660:	e71bde04 	addi	fp,fp,28536
    3664:	e0c00017 	ldw	r3,0(fp)
    3668:	a8c7883a 	add	r3,r21,r3
    366c:	e0c00015 	stw	r3,0(fp)
    3670:	3500da26 	beq	r6,r20,39dc <_malloc_r+0x6fc>
    3674:	b9000017 	ldw	r4,0(r23)
    3678:	00bfffc4 	movi	r2,-1
    367c:	2080e426 	beq	r4,r2,3a10 <_malloc_r+0x730>
    3680:	a185c83a 	sub	r2,r20,r6
    3684:	1885883a 	add	r2,r3,r2
    3688:	e0800015 	stw	r2,0(fp)
    368c:	a0c001cc 	andi	r3,r20,7
    3690:	1800b526 	beq	r3,zero,3968 <_malloc_r+0x688>
    3694:	a0e9c83a 	sub	r20,r20,r3
    3698:	00840204 	movi	r2,4104
    369c:	a5000204 	addi	r20,r20,8
    36a0:	10c7c83a 	sub	r3,r2,r3
    36a4:	a545883a 	add	r2,r20,r21
    36a8:	1083ffcc 	andi	r2,r2,4095
    36ac:	18abc83a 	sub	r21,r3,r2
    36b0:	9009883a 	mov	r4,r18
    36b4:	a80b883a 	mov	r5,r21
    36b8:	000436c0 	call	436c <_sbrk_r>
    36bc:	00ffffc4 	movi	r3,-1
    36c0:	10c0d026 	beq	r2,r3,3a04 <_malloc_r+0x724>
    36c4:	1507c83a 	sub	r3,r2,r20
    36c8:	a8c7883a 	add	r3,r21,r3
    36cc:	18c00054 	ori	r3,r3,1
    36d0:	e0800017 	ldw	r2,0(fp)
    36d4:	9d000215 	stw	r20,8(r19)
    36d8:	a0c00115 	stw	r3,4(r20)
    36dc:	a887883a 	add	r3,r21,r2
    36e0:	e0c00015 	stw	r3,0(fp)
    36e4:	84c00e26 	beq	r16,r19,3720 <_malloc_r+0x440>
    36e8:	018003c4 	movi	r6,15
    36ec:	3580a02e 	bgeu	r6,r22,3970 <_malloc_r+0x690>
    36f0:	81400117 	ldw	r5,4(r16)
    36f4:	013ffe04 	movi	r4,-8
    36f8:	b0bffd04 	addi	r2,r22,-12
    36fc:	1104703a 	and	r2,r2,r4
    3700:	2900004c 	andi	r4,r5,1
    3704:	1108b03a 	or	r4,r2,r4
    3708:	81000115 	stw	r4,4(r16)
    370c:	01400144 	movi	r5,5
    3710:	8089883a 	add	r4,r16,r2
    3714:	21400115 	stw	r5,4(r4)
    3718:	21400215 	stw	r5,8(r4)
    371c:	3080c036 	bltu	r6,r2,3a20 <_malloc_r+0x740>
    3720:	00800074 	movhi	r2,1
    3724:	109bbb04 	addi	r2,r2,28396
    3728:	11000017 	ldw	r4,0(r2)
    372c:	20c0012e 	bgeu	r4,r3,3734 <_malloc_r+0x454>
    3730:	10c00015 	stw	r3,0(r2)
    3734:	00800074 	movhi	r2,1
    3738:	109bba04 	addi	r2,r2,28392
    373c:	11000017 	ldw	r4,0(r2)
    3740:	9c000217 	ldw	r16,8(r19)
    3744:	20c0012e 	bgeu	r4,r3,374c <_malloc_r+0x46c>
    3748:	10c00015 	stw	r3,0(r2)
    374c:	80c00117 	ldw	r3,4(r16)
    3750:	00bfff04 	movi	r2,-4
    3754:	1886703a 	and	r3,r3,r2
    3758:	1c45c83a 	sub	r2,r3,r17
    375c:	1c400236 	bltu	r3,r17,3768 <_malloc_r+0x488>
    3760:	00c003c4 	movi	r3,15
    3764:	18800416 	blt	r3,r2,3778 <_malloc_r+0x498>
    3768:	9009883a 	mov	r4,r18
    376c:	000653c0 	call	653c <__malloc_unlock>
    3770:	0005883a 	mov	r2,zero
    3774:	003f0706 	br	3394 <__alt_mem_Flash_flash_data+0xf4003394>
    3778:	88c00054 	ori	r3,r17,1
    377c:	80c00115 	stw	r3,4(r16)
    3780:	8463883a 	add	r17,r16,r17
    3784:	10800054 	ori	r2,r2,1
    3788:	9c400215 	stw	r17,8(r19)
    378c:	88800115 	stw	r2,4(r17)
    3790:	9009883a 	mov	r4,r18
    3794:	000653c0 	call	653c <__malloc_unlock>
    3798:	80800204 	addi	r2,r16,8
    379c:	003efd06 	br	3394 <__alt_mem_Flash_flash_data+0xf4003394>
    37a0:	00800504 	movi	r2,20
    37a4:	10c0482e 	bgeu	r2,r3,38c8 <_malloc_r+0x5e8>
    37a8:	00801504 	movi	r2,84
    37ac:	10c06836 	bltu	r2,r3,3950 <_malloc_r+0x670>
    37b0:	8806d33a 	srli	r3,r17,12
    37b4:	19c01b84 	addi	r7,r3,110
    37b8:	39cb883a 	add	r5,r7,r7
    37bc:	003f0c06 	br	33f0 <__alt_mem_Flash_flash_data+0xf40033f0>
    37c0:	3804d27a 	srli	r2,r7,9
    37c4:	01000104 	movi	r4,4
    37c8:	2080422e 	bgeu	r4,r2,38d4 <_malloc_r+0x5f4>
    37cc:	01000504 	movi	r4,20
    37d0:	20807c36 	bltu	r4,r2,39c4 <_malloc_r+0x6e4>
    37d4:	110016c4 	addi	r4,r2,91
    37d8:	210b883a 	add	r5,r4,r4
    37dc:	294b883a 	add	r5,r5,r5
    37e0:	294b883a 	add	r5,r5,r5
    37e4:	994b883a 	add	r5,r19,r5
    37e8:	28800217 	ldw	r2,8(r5)
    37ec:	02000074 	movhi	r8,1
    37f0:	420d4c04 	addi	r8,r8,13616
    37f4:	11406326 	beq	r2,r5,3984 <_malloc_r+0x6a4>
    37f8:	01bfff04 	movi	r6,-4
    37fc:	11000117 	ldw	r4,4(r2)
    3800:	2188703a 	and	r4,r4,r6
    3804:	3900022e 	bgeu	r7,r4,3810 <_malloc_r+0x530>
    3808:	10800217 	ldw	r2,8(r2)
    380c:	28bffb1e 	bne	r5,r2,37fc <__alt_mem_Flash_flash_data+0xf40037fc>
    3810:	11800317 	ldw	r6,12(r2)
    3814:	99000117 	ldw	r4,4(r19)
    3818:	81800315 	stw	r6,12(r16)
    381c:	80800215 	stw	r2,8(r16)
    3820:	34000215 	stw	r16,8(r6)
    3824:	14000315 	stw	r16,12(r2)
    3828:	003f2706 	br	34c8 <__alt_mem_Flash_flash_data+0xf40034c8>
    382c:	88c00054 	ori	r3,r17,1
    3830:	80c00115 	stw	r3,4(r16)
    3834:	8463883a 	add	r17,r16,r17
    3838:	34400515 	stw	r17,20(r6)
    383c:	34400415 	stw	r17,16(r6)
    3840:	10c00054 	ori	r3,r2,1
    3844:	8a400315 	stw	r9,12(r17)
    3848:	8a400215 	stw	r9,8(r17)
    384c:	88c00115 	stw	r3,4(r17)
    3850:	88a3883a 	add	r17,r17,r2
    3854:	88800015 	stw	r2,0(r17)
    3858:	9009883a 	mov	r4,r18
    385c:	000653c0 	call	653c <__malloc_unlock>
    3860:	80800204 	addi	r2,r16,8
    3864:	003ecb06 	br	3394 <__alt_mem_Flash_flash_data+0xf4003394>
    3868:	31000117 	ldw	r4,4(r6)
    386c:	003f1606 	br	34c8 <__alt_mem_Flash_flash_data+0xf40034c8>
    3870:	63000044 	addi	r12,r12,1
    3874:	608000cc 	andi	r2,r12,3
    3878:	5ac00204 	addi	r11,r11,8
    387c:	103f2a1e 	bne	r2,zero,3528 <__alt_mem_Flash_flash_data+0xf4003528>
    3880:	00002106 	br	3908 <_malloc_r+0x628>
    3884:	80800204 	addi	r2,r16,8
    3888:	84000517 	ldw	r16,20(r16)
    388c:	143eb31e 	bne	r2,r16,335c <__alt_mem_Flash_flash_data+0xf400335c>
    3890:	18c00084 	addi	r3,r3,2
    3894:	003eec06 	br	3448 <__alt_mem_Flash_flash_data+0xf4003448>
    3898:	8085883a 	add	r2,r16,r2
    389c:	10c00117 	ldw	r3,4(r2)
    38a0:	81000317 	ldw	r4,12(r16)
    38a4:	81400217 	ldw	r5,8(r16)
    38a8:	18c00054 	ori	r3,r3,1
    38ac:	10c00115 	stw	r3,4(r2)
    38b0:	29000315 	stw	r4,12(r5)
    38b4:	21400215 	stw	r5,8(r4)
    38b8:	9009883a 	mov	r4,r18
    38bc:	000653c0 	call	653c <__malloc_unlock>
    38c0:	80800204 	addi	r2,r16,8
    38c4:	003eb306 	br	3394 <__alt_mem_Flash_flash_data+0xf4003394>
    38c8:	19c016c4 	addi	r7,r3,91
    38cc:	39cb883a 	add	r5,r7,r7
    38d0:	003ec706 	br	33f0 <__alt_mem_Flash_flash_data+0xf40033f0>
    38d4:	3804d1ba 	srli	r2,r7,6
    38d8:	11000e04 	addi	r4,r2,56
    38dc:	210b883a 	add	r5,r4,r4
    38e0:	003fbe06 	br	37dc <__alt_mem_Flash_flash_data+0xf40037dc>
    38e4:	84ff5d26 	beq	r16,r19,365c <__alt_mem_Flash_flash_data+0xf400365c>
    38e8:	9c000217 	ldw	r16,8(r19)
    38ec:	00bfff04 	movi	r2,-4
    38f0:	80c00117 	ldw	r3,4(r16)
    38f4:	1886703a 	and	r3,r3,r2
    38f8:	003f9706 	br	3758 <__alt_mem_Flash_flash_data+0xf4003758>
    38fc:	52800017 	ldw	r10,0(r10)
    3900:	18ffffc4 	addi	r3,r3,-1
    3904:	50805c1e 	bne	r10,r2,3a78 <_malloc_r+0x798>
    3908:	190000cc 	andi	r4,r3,3
    390c:	50bffe04 	addi	r2,r10,-8
    3910:	203ffa1e 	bne	r4,zero,38fc <__alt_mem_Flash_flash_data+0xf40038fc>
    3914:	98800117 	ldw	r2,4(r19)
    3918:	0146303a 	nor	r3,zero,r5
    391c:	1884703a 	and	r2,r3,r2
    3920:	98800115 	stw	r2,4(r19)
    3924:	294b883a 	add	r5,r5,r5
    3928:	117f2e36 	bltu	r2,r5,35e4 <__alt_mem_Flash_flash_data+0xf40035e4>
    392c:	283f2d26 	beq	r5,zero,35e4 <__alt_mem_Flash_flash_data+0xf40035e4>
    3930:	1146703a 	and	r3,r2,r5
    3934:	1800521e 	bne	r3,zero,3a80 <_malloc_r+0x7a0>
    3938:	6007883a 	mov	r3,r12
    393c:	294b883a 	add	r5,r5,r5
    3940:	1148703a 	and	r4,r2,r5
    3944:	18c00104 	addi	r3,r3,4
    3948:	203ffc26 	beq	r4,zero,393c <__alt_mem_Flash_flash_data+0xf400393c>
    394c:	003ef006 	br	3510 <__alt_mem_Flash_flash_data+0xf4003510>
    3950:	00805504 	movi	r2,340
    3954:	10c01336 	bltu	r2,r3,39a4 <_malloc_r+0x6c4>
    3958:	8806d3fa 	srli	r3,r17,15
    395c:	19c01dc4 	addi	r7,r3,119
    3960:	39cb883a 	add	r5,r7,r7
    3964:	003ea206 	br	33f0 <__alt_mem_Flash_flash_data+0xf40033f0>
    3968:	00c40004 	movi	r3,4096
    396c:	003f4d06 	br	36a4 <__alt_mem_Flash_flash_data+0xf40036a4>
    3970:	00800044 	movi	r2,1
    3974:	a0800115 	stw	r2,4(r20)
    3978:	a021883a 	mov	r16,r20
    397c:	0007883a 	mov	r3,zero
    3980:	003f7506 	br	3758 <__alt_mem_Flash_flash_data+0xf4003758>
    3984:	200bd0ba 	srai	r5,r4,2
    3988:	01800044 	movi	r6,1
    398c:	41000117 	ldw	r4,4(r8)
    3990:	314a983a 	sll	r5,r6,r5
    3994:	100d883a 	mov	r6,r2
    3998:	2908b03a 	or	r4,r5,r4
    399c:	41000115 	stw	r4,4(r8)
    39a0:	003f9d06 	br	3818 <__alt_mem_Flash_flash_data+0xf4003818>
    39a4:	00815504 	movi	r2,1364
    39a8:	10c01336 	bltu	r2,r3,39f8 <_malloc_r+0x718>
    39ac:	8806d4ba 	srli	r3,r17,18
    39b0:	19c01f04 	addi	r7,r3,124
    39b4:	39cb883a 	add	r5,r7,r7
    39b8:	003e8d06 	br	33f0 <__alt_mem_Flash_flash_data+0xf40033f0>
    39bc:	ad400404 	addi	r21,r21,16
    39c0:	003f1d06 	br	3638 <__alt_mem_Flash_flash_data+0xf4003638>
    39c4:	01001504 	movi	r4,84
    39c8:	20801c36 	bltu	r4,r2,3a3c <_malloc_r+0x75c>
    39cc:	3804d33a 	srli	r2,r7,12
    39d0:	11001b84 	addi	r4,r2,110
    39d4:	210b883a 	add	r5,r4,r4
    39d8:	003f8006 	br	37dc <__alt_mem_Flash_flash_data+0xf40037dc>
    39dc:	3083ffcc 	andi	r2,r6,4095
    39e0:	103f241e 	bne	r2,zero,3674 <__alt_mem_Flash_flash_data+0xf4003674>
    39e4:	99000217 	ldw	r4,8(r19)
    39e8:	ad85883a 	add	r2,r21,r22
    39ec:	10800054 	ori	r2,r2,1
    39f0:	20800115 	stw	r2,4(r4)
    39f4:	003f4a06 	br	3720 <__alt_mem_Flash_flash_data+0xf4003720>
    39f8:	01403f04 	movi	r5,252
    39fc:	01c01f84 	movi	r7,126
    3a00:	003e7b06 	br	33f0 <__alt_mem_Flash_flash_data+0xf40033f0>
    3a04:	00c00044 	movi	r3,1
    3a08:	002b883a 	mov	r21,zero
    3a0c:	003f3006 	br	36d0 <__alt_mem_Flash_flash_data+0xf40036d0>
    3a10:	00800074 	movhi	r2,1
    3a14:	1093c204 	addi	r2,r2,20232
    3a18:	15000015 	stw	r20,0(r2)
    3a1c:	003f1b06 	br	368c <__alt_mem_Flash_flash_data+0xf400368c>
    3a20:	9009883a 	mov	r4,r18
    3a24:	81400204 	addi	r5,r16,8
    3a28:	0004c6c0 	call	4c6c <_free_r>
    3a2c:	00800074 	movhi	r2,1
    3a30:	109bde04 	addi	r2,r2,28536
    3a34:	10c00017 	ldw	r3,0(r2)
    3a38:	003f3906 	br	3720 <__alt_mem_Flash_flash_data+0xf4003720>
    3a3c:	01005504 	movi	r4,340
    3a40:	20800436 	bltu	r4,r2,3a54 <_malloc_r+0x774>
    3a44:	3804d3fa 	srli	r2,r7,15
    3a48:	11001dc4 	addi	r4,r2,119
    3a4c:	210b883a 	add	r5,r4,r4
    3a50:	003f6206 	br	37dc <__alt_mem_Flash_flash_data+0xf40037dc>
    3a54:	01015504 	movi	r4,1364
    3a58:	20800436 	bltu	r4,r2,3a6c <_malloc_r+0x78c>
    3a5c:	3804d4ba 	srli	r2,r7,18
    3a60:	11001f04 	addi	r4,r2,124
    3a64:	210b883a 	add	r5,r4,r4
    3a68:	003f5c06 	br	37dc <__alt_mem_Flash_flash_data+0xf40037dc>
    3a6c:	01403f04 	movi	r5,252
    3a70:	01001f84 	movi	r4,126
    3a74:	003f5906 	br	37dc <__alt_mem_Flash_flash_data+0xf40037dc>
    3a78:	98800117 	ldw	r2,4(r19)
    3a7c:	003fa906 	br	3924 <__alt_mem_Flash_flash_data+0xf4003924>
    3a80:	6007883a 	mov	r3,r12
    3a84:	003ea206 	br	3510 <__alt_mem_Flash_flash_data+0xf4003510>

00003a88 <memchr>:
    3a88:	208000cc 	andi	r2,r4,3
    3a8c:	280f883a 	mov	r7,r5
    3a90:	10003526 	beq	r2,zero,3b68 <memchr+0xe0>
    3a94:	30bfffc4 	addi	r2,r6,-1
    3a98:	30001b26 	beq	r6,zero,3b08 <memchr+0x80>
    3a9c:	21800003 	ldbu	r6,0(r4)
    3aa0:	28c03fcc 	andi	r3,r5,255
    3aa4:	30c01a26 	beq	r6,r3,3b10 <memchr+0x88>
    3aa8:	180d883a 	mov	r6,r3
    3aac:	00000406 	br	3ac0 <memchr+0x38>
    3ab0:	10001526 	beq	r2,zero,3b08 <memchr+0x80>
    3ab4:	20c00003 	ldbu	r3,0(r4)
    3ab8:	10bfffc4 	addi	r2,r2,-1
    3abc:	19801426 	beq	r3,r6,3b10 <memchr+0x88>
    3ac0:	21000044 	addi	r4,r4,1
    3ac4:	20c000cc 	andi	r3,r4,3
    3ac8:	183ff91e 	bne	r3,zero,3ab0 <__alt_mem_Flash_flash_data+0xf4003ab0>
    3acc:	024000c4 	movi	r9,3
    3ad0:	48801136 	bltu	r9,r2,3b18 <memchr+0x90>
    3ad4:	10000c26 	beq	r2,zero,3b08 <memchr+0x80>
    3ad8:	20c00003 	ldbu	r3,0(r4)
    3adc:	29403fcc 	andi	r5,r5,255
    3ae0:	19400b26 	beq	r3,r5,3b10 <memchr+0x88>
    3ae4:	20c00044 	addi	r3,r4,1
    3ae8:	2085883a 	add	r2,r4,r2
    3aec:	39803fcc 	andi	r6,r7,255
    3af0:	00000306 	br	3b00 <memchr+0x78>
    3af4:	18c00044 	addi	r3,r3,1
    3af8:	197fffc3 	ldbu	r5,-1(r3)
    3afc:	29800426 	beq	r5,r6,3b10 <memchr+0x88>
    3b00:	1809883a 	mov	r4,r3
    3b04:	18bffb1e 	bne	r3,r2,3af4 <__alt_mem_Flash_flash_data+0xf4003af4>
    3b08:	0005883a 	mov	r2,zero
    3b0c:	f800283a 	ret
    3b10:	2005883a 	mov	r2,r4
    3b14:	f800283a 	ret
    3b18:	28c03fcc 	andi	r3,r5,255
    3b1c:	1810923a 	slli	r8,r3,8
    3b20:	02ffbff4 	movhi	r11,65279
    3b24:	02a02074 	movhi	r10,32897
    3b28:	40c6b03a 	or	r3,r8,r3
    3b2c:	1810943a 	slli	r8,r3,16
    3b30:	5affbfc4 	addi	r11,r11,-257
    3b34:	52a02004 	addi	r10,r10,-32640
    3b38:	40d0b03a 	or	r8,r8,r3
    3b3c:	20c00017 	ldw	r3,0(r4)
    3b40:	40c6f03a 	xor	r3,r8,r3
    3b44:	1acd883a 	add	r6,r3,r11
    3b48:	00c6303a 	nor	r3,zero,r3
    3b4c:	30c6703a 	and	r3,r6,r3
    3b50:	1a86703a 	and	r3,r3,r10
    3b54:	183fdf1e 	bne	r3,zero,3ad4 <__alt_mem_Flash_flash_data+0xf4003ad4>
    3b58:	10bfff04 	addi	r2,r2,-4
    3b5c:	21000104 	addi	r4,r4,4
    3b60:	48bff636 	bltu	r9,r2,3b3c <__alt_mem_Flash_flash_data+0xf4003b3c>
    3b64:	003fdb06 	br	3ad4 <__alt_mem_Flash_flash_data+0xf4003ad4>
    3b68:	3005883a 	mov	r2,r6
    3b6c:	003fd706 	br	3acc <__alt_mem_Flash_flash_data+0xf4003acc>

00003b70 <memcpy>:
    3b70:	deffff04 	addi	sp,sp,-4
    3b74:	dc000015 	stw	r16,0(sp)
    3b78:	00c003c4 	movi	r3,15
    3b7c:	2005883a 	mov	r2,r4
    3b80:	1980432e 	bgeu	r3,r6,3c90 <memcpy+0x120>
    3b84:	2146b03a 	or	r3,r4,r5
    3b88:	18c000cc 	andi	r3,r3,3
    3b8c:	1800421e 	bne	r3,zero,3c98 <memcpy+0x128>
    3b90:	343ffc04 	addi	r16,r6,-16
    3b94:	8020d13a 	srli	r16,r16,4
    3b98:	28c00104 	addi	r3,r5,4
    3b9c:	23400104 	addi	r13,r4,4
    3ba0:	801e913a 	slli	r15,r16,4
    3ba4:	2b000204 	addi	r12,r5,8
    3ba8:	22c00204 	addi	r11,r4,8
    3bac:	7bc00504 	addi	r15,r15,20
    3bb0:	2a800304 	addi	r10,r5,12
    3bb4:	22400304 	addi	r9,r4,12
    3bb8:	2bdf883a 	add	r15,r5,r15
    3bbc:	2811883a 	mov	r8,r5
    3bc0:	200f883a 	mov	r7,r4
    3bc4:	41000017 	ldw	r4,0(r8)
    3bc8:	39c00404 	addi	r7,r7,16
    3bcc:	18c00404 	addi	r3,r3,16
    3bd0:	393ffc15 	stw	r4,-16(r7)
    3bd4:	1bbffc17 	ldw	r14,-16(r3)
    3bd8:	6b400404 	addi	r13,r13,16
    3bdc:	5ac00404 	addi	r11,r11,16
    3be0:	6bbffc15 	stw	r14,-16(r13)
    3be4:	63800017 	ldw	r14,0(r12)
    3be8:	4a400404 	addi	r9,r9,16
    3bec:	42000404 	addi	r8,r8,16
    3bf0:	5bbffc15 	stw	r14,-16(r11)
    3bf4:	53800017 	ldw	r14,0(r10)
    3bf8:	63000404 	addi	r12,r12,16
    3bfc:	52800404 	addi	r10,r10,16
    3c00:	4bbffc15 	stw	r14,-16(r9)
    3c04:	1bffef1e 	bne	r3,r15,3bc4 <__alt_mem_Flash_flash_data+0xf4003bc4>
    3c08:	81c00044 	addi	r7,r16,1
    3c0c:	380e913a 	slli	r7,r7,4
    3c10:	310003cc 	andi	r4,r6,15
    3c14:	02c000c4 	movi	r11,3
    3c18:	11c7883a 	add	r3,r2,r7
    3c1c:	29cb883a 	add	r5,r5,r7
    3c20:	59001f2e 	bgeu	r11,r4,3ca0 <memcpy+0x130>
    3c24:	1813883a 	mov	r9,r3
    3c28:	2811883a 	mov	r8,r5
    3c2c:	200f883a 	mov	r7,r4
    3c30:	42800017 	ldw	r10,0(r8)
    3c34:	4a400104 	addi	r9,r9,4
    3c38:	39ffff04 	addi	r7,r7,-4
    3c3c:	4abfff15 	stw	r10,-4(r9)
    3c40:	42000104 	addi	r8,r8,4
    3c44:	59fffa36 	bltu	r11,r7,3c30 <__alt_mem_Flash_flash_data+0xf4003c30>
    3c48:	213fff04 	addi	r4,r4,-4
    3c4c:	2008d0ba 	srli	r4,r4,2
    3c50:	318000cc 	andi	r6,r6,3
    3c54:	21000044 	addi	r4,r4,1
    3c58:	2109883a 	add	r4,r4,r4
    3c5c:	2109883a 	add	r4,r4,r4
    3c60:	1907883a 	add	r3,r3,r4
    3c64:	290b883a 	add	r5,r5,r4
    3c68:	30000626 	beq	r6,zero,3c84 <memcpy+0x114>
    3c6c:	198d883a 	add	r6,r3,r6
    3c70:	29c00003 	ldbu	r7,0(r5)
    3c74:	18c00044 	addi	r3,r3,1
    3c78:	29400044 	addi	r5,r5,1
    3c7c:	19ffffc5 	stb	r7,-1(r3)
    3c80:	19bffb1e 	bne	r3,r6,3c70 <__alt_mem_Flash_flash_data+0xf4003c70>
    3c84:	dc000017 	ldw	r16,0(sp)
    3c88:	dec00104 	addi	sp,sp,4
    3c8c:	f800283a 	ret
    3c90:	2007883a 	mov	r3,r4
    3c94:	003ff406 	br	3c68 <__alt_mem_Flash_flash_data+0xf4003c68>
    3c98:	2007883a 	mov	r3,r4
    3c9c:	003ff306 	br	3c6c <__alt_mem_Flash_flash_data+0xf4003c6c>
    3ca0:	200d883a 	mov	r6,r4
    3ca4:	003ff006 	br	3c68 <__alt_mem_Flash_flash_data+0xf4003c68>

00003ca8 <memmove>:
    3ca8:	2005883a 	mov	r2,r4
    3cac:	29000b2e 	bgeu	r5,r4,3cdc <memmove+0x34>
    3cb0:	298f883a 	add	r7,r5,r6
    3cb4:	21c0092e 	bgeu	r4,r7,3cdc <memmove+0x34>
    3cb8:	2187883a 	add	r3,r4,r6
    3cbc:	198bc83a 	sub	r5,r3,r6
    3cc0:	30004b26 	beq	r6,zero,3df0 <memmove+0x148>
    3cc4:	39ffffc4 	addi	r7,r7,-1
    3cc8:	39000003 	ldbu	r4,0(r7)
    3ccc:	18ffffc4 	addi	r3,r3,-1
    3cd0:	19000005 	stb	r4,0(r3)
    3cd4:	197ffb1e 	bne	r3,r5,3cc4 <__alt_mem_Flash_flash_data+0xf4003cc4>
    3cd8:	f800283a 	ret
    3cdc:	00c003c4 	movi	r3,15
    3ce0:	1980412e 	bgeu	r3,r6,3de8 <memmove+0x140>
    3ce4:	1146b03a 	or	r3,r2,r5
    3ce8:	18c000cc 	andi	r3,r3,3
    3cec:	1800411e 	bne	r3,zero,3df4 <memmove+0x14c>
    3cf0:	33fffc04 	addi	r15,r6,-16
    3cf4:	781ed13a 	srli	r15,r15,4
    3cf8:	28c00104 	addi	r3,r5,4
    3cfc:	13400104 	addi	r13,r2,4
    3d00:	781c913a 	slli	r14,r15,4
    3d04:	2b000204 	addi	r12,r5,8
    3d08:	12c00204 	addi	r11,r2,8
    3d0c:	73800504 	addi	r14,r14,20
    3d10:	2a800304 	addi	r10,r5,12
    3d14:	12400304 	addi	r9,r2,12
    3d18:	2b9d883a 	add	r14,r5,r14
    3d1c:	2811883a 	mov	r8,r5
    3d20:	100f883a 	mov	r7,r2
    3d24:	41000017 	ldw	r4,0(r8)
    3d28:	39c00404 	addi	r7,r7,16
    3d2c:	18c00404 	addi	r3,r3,16
    3d30:	393ffc15 	stw	r4,-16(r7)
    3d34:	193ffc17 	ldw	r4,-16(r3)
    3d38:	6b400404 	addi	r13,r13,16
    3d3c:	5ac00404 	addi	r11,r11,16
    3d40:	693ffc15 	stw	r4,-16(r13)
    3d44:	61000017 	ldw	r4,0(r12)
    3d48:	4a400404 	addi	r9,r9,16
    3d4c:	42000404 	addi	r8,r8,16
    3d50:	593ffc15 	stw	r4,-16(r11)
    3d54:	51000017 	ldw	r4,0(r10)
    3d58:	63000404 	addi	r12,r12,16
    3d5c:	52800404 	addi	r10,r10,16
    3d60:	493ffc15 	stw	r4,-16(r9)
    3d64:	1bbfef1e 	bne	r3,r14,3d24 <__alt_mem_Flash_flash_data+0xf4003d24>
    3d68:	79000044 	addi	r4,r15,1
    3d6c:	2008913a 	slli	r4,r4,4
    3d70:	328003cc 	andi	r10,r6,15
    3d74:	02c000c4 	movi	r11,3
    3d78:	1107883a 	add	r3,r2,r4
    3d7c:	290b883a 	add	r5,r5,r4
    3d80:	5a801e2e 	bgeu	r11,r10,3dfc <memmove+0x154>
    3d84:	1813883a 	mov	r9,r3
    3d88:	2811883a 	mov	r8,r5
    3d8c:	500f883a 	mov	r7,r10
    3d90:	41000017 	ldw	r4,0(r8)
    3d94:	4a400104 	addi	r9,r9,4
    3d98:	39ffff04 	addi	r7,r7,-4
    3d9c:	493fff15 	stw	r4,-4(r9)
    3da0:	42000104 	addi	r8,r8,4
    3da4:	59fffa36 	bltu	r11,r7,3d90 <__alt_mem_Flash_flash_data+0xf4003d90>
    3da8:	513fff04 	addi	r4,r10,-4
    3dac:	2008d0ba 	srli	r4,r4,2
    3db0:	318000cc 	andi	r6,r6,3
    3db4:	21000044 	addi	r4,r4,1
    3db8:	2109883a 	add	r4,r4,r4
    3dbc:	2109883a 	add	r4,r4,r4
    3dc0:	1907883a 	add	r3,r3,r4
    3dc4:	290b883a 	add	r5,r5,r4
    3dc8:	30000926 	beq	r6,zero,3df0 <memmove+0x148>
    3dcc:	198d883a 	add	r6,r3,r6
    3dd0:	29c00003 	ldbu	r7,0(r5)
    3dd4:	18c00044 	addi	r3,r3,1
    3dd8:	29400044 	addi	r5,r5,1
    3ddc:	19ffffc5 	stb	r7,-1(r3)
    3de0:	19bffb1e 	bne	r3,r6,3dd0 <__alt_mem_Flash_flash_data+0xf4003dd0>
    3de4:	f800283a 	ret
    3de8:	1007883a 	mov	r3,r2
    3dec:	003ff606 	br	3dc8 <__alt_mem_Flash_flash_data+0xf4003dc8>
    3df0:	f800283a 	ret
    3df4:	1007883a 	mov	r3,r2
    3df8:	003ff406 	br	3dcc <__alt_mem_Flash_flash_data+0xf4003dcc>
    3dfc:	500d883a 	mov	r6,r10
    3e00:	003ff106 	br	3dc8 <__alt_mem_Flash_flash_data+0xf4003dc8>

00003e04 <_realloc_r>:
    3e04:	defff604 	addi	sp,sp,-40
    3e08:	dd000415 	stw	r20,16(sp)
    3e0c:	dc400115 	stw	r17,4(sp)
    3e10:	dfc00915 	stw	ra,36(sp)
    3e14:	df000815 	stw	fp,32(sp)
    3e18:	ddc00715 	stw	r23,28(sp)
    3e1c:	dd800615 	stw	r22,24(sp)
    3e20:	dd400515 	stw	r21,20(sp)
    3e24:	dcc00315 	stw	r19,12(sp)
    3e28:	dc800215 	stw	r18,8(sp)
    3e2c:	dc000015 	stw	r16,0(sp)
    3e30:	2829883a 	mov	r20,r5
    3e34:	3023883a 	mov	r17,r6
    3e38:	2800ad26 	beq	r5,zero,40f0 <_realloc_r+0x2ec>
    3e3c:	2025883a 	mov	r18,r4
    3e40:	000641c0 	call	641c <__malloc_lock>
    3e44:	a0ffff17 	ldw	r3,-4(r20)
    3e48:	043fff04 	movi	r16,-4
    3e4c:	890002c4 	addi	r4,r17,11
    3e50:	01c00584 	movi	r7,22
    3e54:	a57ffe04 	addi	r21,r20,-8
    3e58:	1c20703a 	and	r16,r3,r16
    3e5c:	39001d2e 	bgeu	r7,r4,3ed4 <_realloc_r+0xd0>
    3e60:	05bffe04 	movi	r22,-8
    3e64:	25ac703a 	and	r22,r4,r22
    3e68:	b00f883a 	mov	r7,r22
    3e6c:	b0006516 	blt	r22,zero,4004 <_realloc_r+0x200>
    3e70:	b4406436 	bltu	r22,r17,4004 <_realloc_r+0x200>
    3e74:	81c01a0e 	bge	r16,r7,3ee0 <_realloc_r+0xdc>
    3e78:	07000074 	movhi	fp,1
    3e7c:	e70d4c04 	addi	fp,fp,13616
    3e80:	e1400217 	ldw	r5,8(fp)
    3e84:	ac11883a 	add	r8,r21,r16
    3e88:	2a006226 	beq	r5,r8,4014 <_realloc_r+0x210>
    3e8c:	41800117 	ldw	r6,4(r8)
    3e90:	027fff84 	movi	r9,-2
    3e94:	3252703a 	and	r9,r6,r9
    3e98:	4253883a 	add	r9,r8,r9
    3e9c:	49000117 	ldw	r4,4(r9)
    3ea0:	2100004c 	andi	r4,r4,1
    3ea4:	2000281e 	bne	r4,zero,3f48 <_realloc_r+0x144>
    3ea8:	00bfff04 	movi	r2,-4
    3eac:	3084703a 	and	r2,r6,r2
    3eb0:	1409883a 	add	r4,r2,r16
    3eb4:	21c05e16 	blt	r4,r7,4030 <_realloc_r+0x22c>
    3eb8:	40800317 	ldw	r2,12(r8)
    3ebc:	41400217 	ldw	r5,8(r8)
    3ec0:	a023883a 	mov	r17,r20
    3ec4:	2021883a 	mov	r16,r4
    3ec8:	28800315 	stw	r2,12(r5)
    3ecc:	11400215 	stw	r5,8(r2)
    3ed0:	00000406 	br	3ee4 <_realloc_r+0xe0>
    3ed4:	01c00404 	movi	r7,16
    3ed8:	382d883a 	mov	r22,r7
    3edc:	003fe406 	br	3e70 <__alt_mem_Flash_flash_data+0xf4003e70>
    3ee0:	a023883a 	mov	r17,r20
    3ee4:	858fc83a 	sub	r7,r16,r22
    3ee8:	008003c4 	movi	r2,15
    3eec:	18c0004c 	andi	r3,r3,1
    3ef0:	11c07236 	bltu	r2,r7,40bc <_realloc_r+0x2b8>
    3ef4:	1c06b03a 	or	r3,r3,r16
    3ef8:	a8c00115 	stw	r3,4(r21)
    3efc:	ac21883a 	add	r16,r21,r16
    3f00:	80800117 	ldw	r2,4(r16)
    3f04:	10800054 	ori	r2,r2,1
    3f08:	80800115 	stw	r2,4(r16)
    3f0c:	9009883a 	mov	r4,r18
    3f10:	000653c0 	call	653c <__malloc_unlock>
    3f14:	8805883a 	mov	r2,r17
    3f18:	dfc00917 	ldw	ra,36(sp)
    3f1c:	df000817 	ldw	fp,32(sp)
    3f20:	ddc00717 	ldw	r23,28(sp)
    3f24:	dd800617 	ldw	r22,24(sp)
    3f28:	dd400517 	ldw	r21,20(sp)
    3f2c:	dd000417 	ldw	r20,16(sp)
    3f30:	dcc00317 	ldw	r19,12(sp)
    3f34:	dc800217 	ldw	r18,8(sp)
    3f38:	dc400117 	ldw	r17,4(sp)
    3f3c:	dc000017 	ldw	r16,0(sp)
    3f40:	dec00a04 	addi	sp,sp,40
    3f44:	f800283a 	ret
    3f48:	18c0004c 	andi	r3,r3,1
    3f4c:	1800081e 	bne	r3,zero,3f70 <_realloc_r+0x16c>
    3f50:	a4fffe17 	ldw	r19,-8(r20)
    3f54:	00bfff04 	movi	r2,-4
    3f58:	ace7c83a 	sub	r19,r21,r19
    3f5c:	98c00117 	ldw	r3,4(r19)
    3f60:	1886703a 	and	r3,r3,r2
    3f64:	98000226 	beq	r19,zero,3f70 <_realloc_r+0x16c>
    3f68:	1c2f883a 	add	r23,r3,r16
    3f6c:	b9c06d0e 	bge	r23,r7,4124 <_realloc_r+0x320>
    3f70:	880b883a 	mov	r5,r17
    3f74:	9009883a 	mov	r4,r18
    3f78:	00032e00 	call	32e0 <_malloc_r>
    3f7c:	1023883a 	mov	r17,r2
    3f80:	1000ef26 	beq	r2,zero,4340 <_realloc_r+0x53c>
    3f84:	a0ffff17 	ldw	r3,-4(r20)
    3f88:	113ffe04 	addi	r4,r2,-8
    3f8c:	00bfff84 	movi	r2,-2
    3f90:	1884703a 	and	r2,r3,r2
    3f94:	a885883a 	add	r2,r21,r2
    3f98:	2080bf26 	beq	r4,r2,4298 <_realloc_r+0x494>
    3f9c:	81bfff04 	addi	r6,r16,-4
    3fa0:	00800904 	movi	r2,36
    3fa4:	11808936 	bltu	r2,r6,41cc <_realloc_r+0x3c8>
    3fa8:	00c004c4 	movi	r3,19
    3fac:	19806c2e 	bgeu	r3,r6,4160 <_realloc_r+0x35c>
    3fb0:	a0c00017 	ldw	r3,0(r20)
    3fb4:	88c00015 	stw	r3,0(r17)
    3fb8:	a0c00117 	ldw	r3,4(r20)
    3fbc:	88c00115 	stw	r3,4(r17)
    3fc0:	00c006c4 	movi	r3,27
    3fc4:	1980ac36 	bltu	r3,r6,4278 <_realloc_r+0x474>
    3fc8:	88800204 	addi	r2,r17,8
    3fcc:	a0c00204 	addi	r3,r20,8
    3fd0:	19000017 	ldw	r4,0(r3)
    3fd4:	11000015 	stw	r4,0(r2)
    3fd8:	19000117 	ldw	r4,4(r3)
    3fdc:	11000115 	stw	r4,4(r2)
    3fe0:	18c00217 	ldw	r3,8(r3)
    3fe4:	10c00215 	stw	r3,8(r2)
    3fe8:	a00b883a 	mov	r5,r20
    3fec:	9009883a 	mov	r4,r18
    3ff0:	0004c6c0 	call	4c6c <_free_r>
    3ff4:	9009883a 	mov	r4,r18
    3ff8:	000653c0 	call	653c <__malloc_unlock>
    3ffc:	8805883a 	mov	r2,r17
    4000:	003fc506 	br	3f18 <__alt_mem_Flash_flash_data+0xf4003f18>
    4004:	00800304 	movi	r2,12
    4008:	90800015 	stw	r2,0(r18)
    400c:	0005883a 	mov	r2,zero
    4010:	003fc106 	br	3f18 <__alt_mem_Flash_flash_data+0xf4003f18>
    4014:	29800117 	ldw	r6,4(r5)
    4018:	00bfff04 	movi	r2,-4
    401c:	b1000404 	addi	r4,r22,16
    4020:	3084703a 	and	r2,r6,r2
    4024:	140d883a 	add	r6,r2,r16
    4028:	31005b0e 	bge	r6,r4,4198 <_realloc_r+0x394>
    402c:	2811883a 	mov	r8,r5
    4030:	18c0004c 	andi	r3,r3,1
    4034:	183fce1e 	bne	r3,zero,3f70 <__alt_mem_Flash_flash_data+0xf4003f70>
    4038:	a4fffe17 	ldw	r19,-8(r20)
    403c:	00ffff04 	movi	r3,-4
    4040:	ace7c83a 	sub	r19,r21,r19
    4044:	99000117 	ldw	r4,4(r19)
    4048:	20c6703a 	and	r3,r4,r3
    404c:	403fc526 	beq	r8,zero,3f64 <__alt_mem_Flash_flash_data+0xf4003f64>
    4050:	1c2f883a 	add	r23,r3,r16
    4054:	b8af883a 	add	r23,r23,r2
    4058:	41406026 	beq	r8,r5,41dc <_realloc_r+0x3d8>
    405c:	b9ffc116 	blt	r23,r7,3f64 <__alt_mem_Flash_flash_data+0xf4003f64>
    4060:	40c00217 	ldw	r3,8(r8)
    4064:	40800317 	ldw	r2,12(r8)
    4068:	81bfff04 	addi	r6,r16,-4
    406c:	01000904 	movi	r4,36
    4070:	18800315 	stw	r2,12(r3)
    4074:	10c00215 	stw	r3,8(r2)
    4078:	99400217 	ldw	r5,8(r19)
    407c:	98c00317 	ldw	r3,12(r19)
    4080:	9c400204 	addi	r17,r19,8
    4084:	28c00315 	stw	r3,12(r5)
    4088:	19400215 	stw	r5,8(r3)
    408c:	21802d36 	bltu	r4,r6,4144 <_realloc_r+0x340>
    4090:	008004c4 	movi	r2,19
    4094:	1180352e 	bgeu	r2,r6,416c <_realloc_r+0x368>
    4098:	a0800017 	ldw	r2,0(r20)
    409c:	98800215 	stw	r2,8(r19)
    40a0:	a0800117 	ldw	r2,4(r20)
    40a4:	98800315 	stw	r2,12(r19)
    40a8:	008006c4 	movi	r2,27
    40ac:	11808036 	bltu	r2,r6,42b0 <_realloc_r+0x4ac>
    40b0:	98c00404 	addi	r3,r19,16
    40b4:	a5000204 	addi	r20,r20,8
    40b8:	00002d06 	br	4170 <_realloc_r+0x36c>
    40bc:	1d86b03a 	or	r3,r3,r22
    40c0:	ad8b883a 	add	r5,r21,r22
    40c4:	a8c00115 	stw	r3,4(r21)
    40c8:	38800054 	ori	r2,r7,1
    40cc:	28800115 	stw	r2,4(r5)
    40d0:	29cf883a 	add	r7,r5,r7
    40d4:	38800117 	ldw	r2,4(r7)
    40d8:	9009883a 	mov	r4,r18
    40dc:	29400204 	addi	r5,r5,8
    40e0:	10800054 	ori	r2,r2,1
    40e4:	38800115 	stw	r2,4(r7)
    40e8:	0004c6c0 	call	4c6c <_free_r>
    40ec:	003f8706 	br	3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    40f0:	300b883a 	mov	r5,r6
    40f4:	dfc00917 	ldw	ra,36(sp)
    40f8:	df000817 	ldw	fp,32(sp)
    40fc:	ddc00717 	ldw	r23,28(sp)
    4100:	dd800617 	ldw	r22,24(sp)
    4104:	dd400517 	ldw	r21,20(sp)
    4108:	dd000417 	ldw	r20,16(sp)
    410c:	dcc00317 	ldw	r19,12(sp)
    4110:	dc800217 	ldw	r18,8(sp)
    4114:	dc400117 	ldw	r17,4(sp)
    4118:	dc000017 	ldw	r16,0(sp)
    411c:	dec00a04 	addi	sp,sp,40
    4120:	00032e01 	jmpi	32e0 <_malloc_r>
    4124:	98800317 	ldw	r2,12(r19)
    4128:	98c00217 	ldw	r3,8(r19)
    412c:	81bfff04 	addi	r6,r16,-4
    4130:	01000904 	movi	r4,36
    4134:	18800315 	stw	r2,12(r3)
    4138:	10c00215 	stw	r3,8(r2)
    413c:	9c400204 	addi	r17,r19,8
    4140:	21bfd32e 	bgeu	r4,r6,4090 <__alt_mem_Flash_flash_data+0xf4004090>
    4144:	8809883a 	mov	r4,r17
    4148:	a00b883a 	mov	r5,r20
    414c:	0003ca80 	call	3ca8 <memmove>
    4150:	98c00117 	ldw	r3,4(r19)
    4154:	b821883a 	mov	r16,r23
    4158:	982b883a 	mov	r21,r19
    415c:	003f6106 	br	3ee4 <__alt_mem_Flash_flash_data+0xf4003ee4>
    4160:	8805883a 	mov	r2,r17
    4164:	a007883a 	mov	r3,r20
    4168:	003f9906 	br	3fd0 <__alt_mem_Flash_flash_data+0xf4003fd0>
    416c:	8807883a 	mov	r3,r17
    4170:	a0800017 	ldw	r2,0(r20)
    4174:	b821883a 	mov	r16,r23
    4178:	982b883a 	mov	r21,r19
    417c:	18800015 	stw	r2,0(r3)
    4180:	a0800117 	ldw	r2,4(r20)
    4184:	18800115 	stw	r2,4(r3)
    4188:	a0800217 	ldw	r2,8(r20)
    418c:	18800215 	stw	r2,8(r3)
    4190:	98c00117 	ldw	r3,4(r19)
    4194:	003f5306 	br	3ee4 <__alt_mem_Flash_flash_data+0xf4003ee4>
    4198:	adab883a 	add	r21,r21,r22
    419c:	3585c83a 	sub	r2,r6,r22
    41a0:	e5400215 	stw	r21,8(fp)
    41a4:	10800054 	ori	r2,r2,1
    41a8:	a8800115 	stw	r2,4(r21)
    41ac:	a0bfff17 	ldw	r2,-4(r20)
    41b0:	9009883a 	mov	r4,r18
    41b4:	1080004c 	andi	r2,r2,1
    41b8:	b0acb03a 	or	r22,r22,r2
    41bc:	a5bfff15 	stw	r22,-4(r20)
    41c0:	000653c0 	call	653c <__malloc_unlock>
    41c4:	a005883a 	mov	r2,r20
    41c8:	003f5306 	br	3f18 <__alt_mem_Flash_flash_data+0xf4003f18>
    41cc:	8809883a 	mov	r4,r17
    41d0:	a00b883a 	mov	r5,r20
    41d4:	0003ca80 	call	3ca8 <memmove>
    41d8:	003f8306 	br	3fe8 <__alt_mem_Flash_flash_data+0xf4003fe8>
    41dc:	b0800404 	addi	r2,r22,16
    41e0:	b8bf6016 	blt	r23,r2,3f64 <__alt_mem_Flash_flash_data+0xf4003f64>
    41e4:	98800317 	ldw	r2,12(r19)
    41e8:	98c00217 	ldw	r3,8(r19)
    41ec:	81bfff04 	addi	r6,r16,-4
    41f0:	01000904 	movi	r4,36
    41f4:	18800315 	stw	r2,12(r3)
    41f8:	10c00215 	stw	r3,8(r2)
    41fc:	9c400204 	addi	r17,r19,8
    4200:	21804336 	bltu	r4,r6,4310 <_realloc_r+0x50c>
    4204:	008004c4 	movi	r2,19
    4208:	11803f2e 	bgeu	r2,r6,4308 <_realloc_r+0x504>
    420c:	a0800017 	ldw	r2,0(r20)
    4210:	98800215 	stw	r2,8(r19)
    4214:	a0800117 	ldw	r2,4(r20)
    4218:	98800315 	stw	r2,12(r19)
    421c:	008006c4 	movi	r2,27
    4220:	11803f36 	bltu	r2,r6,4320 <_realloc_r+0x51c>
    4224:	98800404 	addi	r2,r19,16
    4228:	a5000204 	addi	r20,r20,8
    422c:	a0c00017 	ldw	r3,0(r20)
    4230:	10c00015 	stw	r3,0(r2)
    4234:	a0c00117 	ldw	r3,4(r20)
    4238:	10c00115 	stw	r3,4(r2)
    423c:	a0c00217 	ldw	r3,8(r20)
    4240:	10c00215 	stw	r3,8(r2)
    4244:	9d87883a 	add	r3,r19,r22
    4248:	bd85c83a 	sub	r2,r23,r22
    424c:	e0c00215 	stw	r3,8(fp)
    4250:	10800054 	ori	r2,r2,1
    4254:	18800115 	stw	r2,4(r3)
    4258:	98800117 	ldw	r2,4(r19)
    425c:	9009883a 	mov	r4,r18
    4260:	1080004c 	andi	r2,r2,1
    4264:	b0acb03a 	or	r22,r22,r2
    4268:	9d800115 	stw	r22,4(r19)
    426c:	000653c0 	call	653c <__malloc_unlock>
    4270:	8805883a 	mov	r2,r17
    4274:	003f2806 	br	3f18 <__alt_mem_Flash_flash_data+0xf4003f18>
    4278:	a0c00217 	ldw	r3,8(r20)
    427c:	88c00215 	stw	r3,8(r17)
    4280:	a0c00317 	ldw	r3,12(r20)
    4284:	88c00315 	stw	r3,12(r17)
    4288:	30801126 	beq	r6,r2,42d0 <_realloc_r+0x4cc>
    428c:	88800404 	addi	r2,r17,16
    4290:	a0c00404 	addi	r3,r20,16
    4294:	003f4e06 	br	3fd0 <__alt_mem_Flash_flash_data+0xf4003fd0>
    4298:	893fff17 	ldw	r4,-4(r17)
    429c:	00bfff04 	movi	r2,-4
    42a0:	a023883a 	mov	r17,r20
    42a4:	2084703a 	and	r2,r4,r2
    42a8:	80a1883a 	add	r16,r16,r2
    42ac:	003f0d06 	br	3ee4 <__alt_mem_Flash_flash_data+0xf4003ee4>
    42b0:	a0800217 	ldw	r2,8(r20)
    42b4:	98800415 	stw	r2,16(r19)
    42b8:	a0800317 	ldw	r2,12(r20)
    42bc:	98800515 	stw	r2,20(r19)
    42c0:	31000a26 	beq	r6,r4,42ec <_realloc_r+0x4e8>
    42c4:	98c00604 	addi	r3,r19,24
    42c8:	a5000404 	addi	r20,r20,16
    42cc:	003fa806 	br	4170 <__alt_mem_Flash_flash_data+0xf4004170>
    42d0:	a1000417 	ldw	r4,16(r20)
    42d4:	88800604 	addi	r2,r17,24
    42d8:	a0c00604 	addi	r3,r20,24
    42dc:	89000415 	stw	r4,16(r17)
    42e0:	a1000517 	ldw	r4,20(r20)
    42e4:	89000515 	stw	r4,20(r17)
    42e8:	003f3906 	br	3fd0 <__alt_mem_Flash_flash_data+0xf4003fd0>
    42ec:	a0800417 	ldw	r2,16(r20)
    42f0:	a5000604 	addi	r20,r20,24
    42f4:	98c00804 	addi	r3,r19,32
    42f8:	98800615 	stw	r2,24(r19)
    42fc:	a0bfff17 	ldw	r2,-4(r20)
    4300:	98800715 	stw	r2,28(r19)
    4304:	003f9a06 	br	4170 <__alt_mem_Flash_flash_data+0xf4004170>
    4308:	8805883a 	mov	r2,r17
    430c:	003fc706 	br	422c <__alt_mem_Flash_flash_data+0xf400422c>
    4310:	8809883a 	mov	r4,r17
    4314:	a00b883a 	mov	r5,r20
    4318:	0003ca80 	call	3ca8 <memmove>
    431c:	003fc906 	br	4244 <__alt_mem_Flash_flash_data+0xf4004244>
    4320:	a0800217 	ldw	r2,8(r20)
    4324:	98800415 	stw	r2,16(r19)
    4328:	a0800317 	ldw	r2,12(r20)
    432c:	98800515 	stw	r2,20(r19)
    4330:	31000726 	beq	r6,r4,4350 <_realloc_r+0x54c>
    4334:	98800604 	addi	r2,r19,24
    4338:	a5000404 	addi	r20,r20,16
    433c:	003fbb06 	br	422c <__alt_mem_Flash_flash_data+0xf400422c>
    4340:	9009883a 	mov	r4,r18
    4344:	000653c0 	call	653c <__malloc_unlock>
    4348:	0005883a 	mov	r2,zero
    434c:	003ef206 	br	3f18 <__alt_mem_Flash_flash_data+0xf4003f18>
    4350:	a0c00417 	ldw	r3,16(r20)
    4354:	a5000604 	addi	r20,r20,24
    4358:	98800804 	addi	r2,r19,32
    435c:	98c00615 	stw	r3,24(r19)
    4360:	a0ffff17 	ldw	r3,-4(r20)
    4364:	98c00715 	stw	r3,28(r19)
    4368:	003fb006 	br	422c <__alt_mem_Flash_flash_data+0xf400422c>

0000436c <_sbrk_r>:
    436c:	defffd04 	addi	sp,sp,-12
    4370:	dc000015 	stw	r16,0(sp)
    4374:	04000074 	movhi	r16,1
    4378:	dc400115 	stw	r17,4(sp)
    437c:	841bbd04 	addi	r16,r16,28404
    4380:	2023883a 	mov	r17,r4
    4384:	2809883a 	mov	r4,r5
    4388:	dfc00215 	stw	ra,8(sp)
    438c:	80000015 	stw	zero,0(r16)
    4390:	00061080 	call	6108 <sbrk>
    4394:	00ffffc4 	movi	r3,-1
    4398:	10c00526 	beq	r2,r3,43b0 <_sbrk_r+0x44>
    439c:	dfc00217 	ldw	ra,8(sp)
    43a0:	dc400117 	ldw	r17,4(sp)
    43a4:	dc000017 	ldw	r16,0(sp)
    43a8:	dec00304 	addi	sp,sp,12
    43ac:	f800283a 	ret
    43b0:	80c00017 	ldw	r3,0(r16)
    43b4:	183ff926 	beq	r3,zero,439c <__alt_mem_Flash_flash_data+0xf400439c>
    43b8:	88c00015 	stw	r3,0(r17)
    43bc:	003ff706 	br	439c <__alt_mem_Flash_flash_data+0xf400439c>

000043c0 <__swsetup_r>:
    43c0:	00800074 	movhi	r2,1
    43c4:	defffd04 	addi	sp,sp,-12
    43c8:	1093c104 	addi	r2,r2,20228
    43cc:	dc400115 	stw	r17,4(sp)
    43d0:	2023883a 	mov	r17,r4
    43d4:	11000017 	ldw	r4,0(r2)
    43d8:	dc000015 	stw	r16,0(sp)
    43dc:	dfc00215 	stw	ra,8(sp)
    43e0:	2821883a 	mov	r16,r5
    43e4:	20000226 	beq	r4,zero,43f0 <__swsetup_r+0x30>
    43e8:	20c00e17 	ldw	r3,56(r4)
    43ec:	18003126 	beq	r3,zero,44b4 <__swsetup_r+0xf4>
    43f0:	8080030b 	ldhu	r2,12(r16)
    43f4:	10c0020c 	andi	r3,r2,8
    43f8:	100d883a 	mov	r6,r2
    43fc:	18000f26 	beq	r3,zero,443c <__swsetup_r+0x7c>
    4400:	80c00417 	ldw	r3,16(r16)
    4404:	18001526 	beq	r3,zero,445c <__swsetup_r+0x9c>
    4408:	1100004c 	andi	r4,r2,1
    440c:	20001c1e 	bne	r4,zero,4480 <__swsetup_r+0xc0>
    4410:	1080008c 	andi	r2,r2,2
    4414:	1000291e 	bne	r2,zero,44bc <__swsetup_r+0xfc>
    4418:	80800517 	ldw	r2,20(r16)
    441c:	80800215 	stw	r2,8(r16)
    4420:	18001c26 	beq	r3,zero,4494 <__swsetup_r+0xd4>
    4424:	0005883a 	mov	r2,zero
    4428:	dfc00217 	ldw	ra,8(sp)
    442c:	dc400117 	ldw	r17,4(sp)
    4430:	dc000017 	ldw	r16,0(sp)
    4434:	dec00304 	addi	sp,sp,12
    4438:	f800283a 	ret
    443c:	3080040c 	andi	r2,r6,16
    4440:	10002e26 	beq	r2,zero,44fc <__swsetup_r+0x13c>
    4444:	3080010c 	andi	r2,r6,4
    4448:	10001e1e 	bne	r2,zero,44c4 <__swsetup_r+0x104>
    444c:	80c00417 	ldw	r3,16(r16)
    4450:	30800214 	ori	r2,r6,8
    4454:	8080030d 	sth	r2,12(r16)
    4458:	183feb1e 	bne	r3,zero,4408 <__alt_mem_Flash_flash_data+0xf4004408>
    445c:	1140a00c 	andi	r5,r2,640
    4460:	01008004 	movi	r4,512
    4464:	293fe826 	beq	r5,r4,4408 <__alt_mem_Flash_flash_data+0xf4004408>
    4468:	8809883a 	mov	r4,r17
    446c:	800b883a 	mov	r5,r16
    4470:	00050e40 	call	50e4 <__smakebuf_r>
    4474:	8080030b 	ldhu	r2,12(r16)
    4478:	80c00417 	ldw	r3,16(r16)
    447c:	003fe206 	br	4408 <__alt_mem_Flash_flash_data+0xf4004408>
    4480:	80800517 	ldw	r2,20(r16)
    4484:	80000215 	stw	zero,8(r16)
    4488:	0085c83a 	sub	r2,zero,r2
    448c:	80800615 	stw	r2,24(r16)
    4490:	183fe41e 	bne	r3,zero,4424 <__alt_mem_Flash_flash_data+0xf4004424>
    4494:	80c0030b 	ldhu	r3,12(r16)
    4498:	0005883a 	mov	r2,zero
    449c:	1900200c 	andi	r4,r3,128
    44a0:	203fe126 	beq	r4,zero,4428 <__alt_mem_Flash_flash_data+0xf4004428>
    44a4:	18c01014 	ori	r3,r3,64
    44a8:	80c0030d 	sth	r3,12(r16)
    44ac:	00bfffc4 	movi	r2,-1
    44b0:	003fdd06 	br	4428 <__alt_mem_Flash_flash_data+0xf4004428>
    44b4:	0004af80 	call	4af8 <__sinit>
    44b8:	003fcd06 	br	43f0 <__alt_mem_Flash_flash_data+0xf40043f0>
    44bc:	0005883a 	mov	r2,zero
    44c0:	003fd606 	br	441c <__alt_mem_Flash_flash_data+0xf400441c>
    44c4:	81400c17 	ldw	r5,48(r16)
    44c8:	28000626 	beq	r5,zero,44e4 <__swsetup_r+0x124>
    44cc:	80801004 	addi	r2,r16,64
    44d0:	28800326 	beq	r5,r2,44e0 <__swsetup_r+0x120>
    44d4:	8809883a 	mov	r4,r17
    44d8:	0004c6c0 	call	4c6c <_free_r>
    44dc:	8180030b 	ldhu	r6,12(r16)
    44e0:	80000c15 	stw	zero,48(r16)
    44e4:	80c00417 	ldw	r3,16(r16)
    44e8:	00bff6c4 	movi	r2,-37
    44ec:	118c703a 	and	r6,r2,r6
    44f0:	80000115 	stw	zero,4(r16)
    44f4:	80c00015 	stw	r3,0(r16)
    44f8:	003fd506 	br	4450 <__alt_mem_Flash_flash_data+0xf4004450>
    44fc:	00800244 	movi	r2,9
    4500:	88800015 	stw	r2,0(r17)
    4504:	30801014 	ori	r2,r6,64
    4508:	8080030d 	sth	r2,12(r16)
    450c:	00bfffc4 	movi	r2,-1
    4510:	003fc506 	br	4428 <__alt_mem_Flash_flash_data+0xf4004428>

00004514 <__sflush_r>:
    4514:	2880030b 	ldhu	r2,12(r5)
    4518:	defffb04 	addi	sp,sp,-20
    451c:	dcc00315 	stw	r19,12(sp)
    4520:	dc400115 	stw	r17,4(sp)
    4524:	dfc00415 	stw	ra,16(sp)
    4528:	dc800215 	stw	r18,8(sp)
    452c:	dc000015 	stw	r16,0(sp)
    4530:	10c0020c 	andi	r3,r2,8
    4534:	2823883a 	mov	r17,r5
    4538:	2027883a 	mov	r19,r4
    453c:	1800311e 	bne	r3,zero,4604 <__sflush_r+0xf0>
    4540:	28c00117 	ldw	r3,4(r5)
    4544:	10820014 	ori	r2,r2,2048
    4548:	2880030d 	sth	r2,12(r5)
    454c:	00c04b0e 	bge	zero,r3,467c <__sflush_r+0x168>
    4550:	8a000a17 	ldw	r8,40(r17)
    4554:	40002326 	beq	r8,zero,45e4 <__sflush_r+0xd0>
    4558:	9c000017 	ldw	r16,0(r19)
    455c:	10c4000c 	andi	r3,r2,4096
    4560:	98000015 	stw	zero,0(r19)
    4564:	18004826 	beq	r3,zero,4688 <__sflush_r+0x174>
    4568:	89801417 	ldw	r6,80(r17)
    456c:	10c0010c 	andi	r3,r2,4
    4570:	18000626 	beq	r3,zero,458c <__sflush_r+0x78>
    4574:	88c00117 	ldw	r3,4(r17)
    4578:	88800c17 	ldw	r2,48(r17)
    457c:	30cdc83a 	sub	r6,r6,r3
    4580:	10000226 	beq	r2,zero,458c <__sflush_r+0x78>
    4584:	88800f17 	ldw	r2,60(r17)
    4588:	308dc83a 	sub	r6,r6,r2
    458c:	89400717 	ldw	r5,28(r17)
    4590:	9809883a 	mov	r4,r19
    4594:	000f883a 	mov	r7,zero
    4598:	403ee83a 	callr	r8
    459c:	00ffffc4 	movi	r3,-1
    45a0:	10c04426 	beq	r2,r3,46b4 <__sflush_r+0x1a0>
    45a4:	88c0030b 	ldhu	r3,12(r17)
    45a8:	89000417 	ldw	r4,16(r17)
    45ac:	88000115 	stw	zero,4(r17)
    45b0:	197dffcc 	andi	r5,r3,63487
    45b4:	8940030d 	sth	r5,12(r17)
    45b8:	89000015 	stw	r4,0(r17)
    45bc:	18c4000c 	andi	r3,r3,4096
    45c0:	18002c1e 	bne	r3,zero,4674 <__sflush_r+0x160>
    45c4:	89400c17 	ldw	r5,48(r17)
    45c8:	9c000015 	stw	r16,0(r19)
    45cc:	28000526 	beq	r5,zero,45e4 <__sflush_r+0xd0>
    45d0:	88801004 	addi	r2,r17,64
    45d4:	28800226 	beq	r5,r2,45e0 <__sflush_r+0xcc>
    45d8:	9809883a 	mov	r4,r19
    45dc:	0004c6c0 	call	4c6c <_free_r>
    45e0:	88000c15 	stw	zero,48(r17)
    45e4:	0005883a 	mov	r2,zero
    45e8:	dfc00417 	ldw	ra,16(sp)
    45ec:	dcc00317 	ldw	r19,12(sp)
    45f0:	dc800217 	ldw	r18,8(sp)
    45f4:	dc400117 	ldw	r17,4(sp)
    45f8:	dc000017 	ldw	r16,0(sp)
    45fc:	dec00504 	addi	sp,sp,20
    4600:	f800283a 	ret
    4604:	2c800417 	ldw	r18,16(r5)
    4608:	903ff626 	beq	r18,zero,45e4 <__alt_mem_Flash_flash_data+0xf40045e4>
    460c:	2c000017 	ldw	r16,0(r5)
    4610:	108000cc 	andi	r2,r2,3
    4614:	2c800015 	stw	r18,0(r5)
    4618:	84a1c83a 	sub	r16,r16,r18
    461c:	1000131e 	bne	r2,zero,466c <__sflush_r+0x158>
    4620:	28800517 	ldw	r2,20(r5)
    4624:	88800215 	stw	r2,8(r17)
    4628:	04000316 	blt	zero,r16,4638 <__sflush_r+0x124>
    462c:	003fed06 	br	45e4 <__alt_mem_Flash_flash_data+0xf40045e4>
    4630:	90a5883a 	add	r18,r18,r2
    4634:	043feb0e 	bge	zero,r16,45e4 <__alt_mem_Flash_flash_data+0xf40045e4>
    4638:	88800917 	ldw	r2,36(r17)
    463c:	89400717 	ldw	r5,28(r17)
    4640:	800f883a 	mov	r7,r16
    4644:	900d883a 	mov	r6,r18
    4648:	9809883a 	mov	r4,r19
    464c:	103ee83a 	callr	r2
    4650:	80a1c83a 	sub	r16,r16,r2
    4654:	00bff616 	blt	zero,r2,4630 <__alt_mem_Flash_flash_data+0xf4004630>
    4658:	88c0030b 	ldhu	r3,12(r17)
    465c:	00bfffc4 	movi	r2,-1
    4660:	18c01014 	ori	r3,r3,64
    4664:	88c0030d 	sth	r3,12(r17)
    4668:	003fdf06 	br	45e8 <__alt_mem_Flash_flash_data+0xf40045e8>
    466c:	0005883a 	mov	r2,zero
    4670:	003fec06 	br	4624 <__alt_mem_Flash_flash_data+0xf4004624>
    4674:	88801415 	stw	r2,80(r17)
    4678:	003fd206 	br	45c4 <__alt_mem_Flash_flash_data+0xf40045c4>
    467c:	28c00f17 	ldw	r3,60(r5)
    4680:	00ffb316 	blt	zero,r3,4550 <__alt_mem_Flash_flash_data+0xf4004550>
    4684:	003fd706 	br	45e4 <__alt_mem_Flash_flash_data+0xf40045e4>
    4688:	89400717 	ldw	r5,28(r17)
    468c:	000d883a 	mov	r6,zero
    4690:	9809883a 	mov	r4,r19
    4694:	01c00044 	movi	r7,1
    4698:	403ee83a 	callr	r8
    469c:	100d883a 	mov	r6,r2
    46a0:	00bfffc4 	movi	r2,-1
    46a4:	30801426 	beq	r6,r2,46f8 <__sflush_r+0x1e4>
    46a8:	8880030b 	ldhu	r2,12(r17)
    46ac:	8a000a17 	ldw	r8,40(r17)
    46b0:	003fae06 	br	456c <__alt_mem_Flash_flash_data+0xf400456c>
    46b4:	98c00017 	ldw	r3,0(r19)
    46b8:	183fba26 	beq	r3,zero,45a4 <__alt_mem_Flash_flash_data+0xf40045a4>
    46bc:	01000744 	movi	r4,29
    46c0:	19000626 	beq	r3,r4,46dc <__sflush_r+0x1c8>
    46c4:	01000584 	movi	r4,22
    46c8:	19000426 	beq	r3,r4,46dc <__sflush_r+0x1c8>
    46cc:	88c0030b 	ldhu	r3,12(r17)
    46d0:	18c01014 	ori	r3,r3,64
    46d4:	88c0030d 	sth	r3,12(r17)
    46d8:	003fc306 	br	45e8 <__alt_mem_Flash_flash_data+0xf40045e8>
    46dc:	8880030b 	ldhu	r2,12(r17)
    46e0:	88c00417 	ldw	r3,16(r17)
    46e4:	88000115 	stw	zero,4(r17)
    46e8:	10bdffcc 	andi	r2,r2,63487
    46ec:	8880030d 	sth	r2,12(r17)
    46f0:	88c00015 	stw	r3,0(r17)
    46f4:	003fb306 	br	45c4 <__alt_mem_Flash_flash_data+0xf40045c4>
    46f8:	98800017 	ldw	r2,0(r19)
    46fc:	103fea26 	beq	r2,zero,46a8 <__alt_mem_Flash_flash_data+0xf40046a8>
    4700:	00c00744 	movi	r3,29
    4704:	10c00226 	beq	r2,r3,4710 <__sflush_r+0x1fc>
    4708:	00c00584 	movi	r3,22
    470c:	10ffd21e 	bne	r2,r3,4658 <__alt_mem_Flash_flash_data+0xf4004658>
    4710:	9c000015 	stw	r16,0(r19)
    4714:	0005883a 	mov	r2,zero
    4718:	003fb306 	br	45e8 <__alt_mem_Flash_flash_data+0xf40045e8>

0000471c <_fflush_r>:
    471c:	defffd04 	addi	sp,sp,-12
    4720:	dc000115 	stw	r16,4(sp)
    4724:	dfc00215 	stw	ra,8(sp)
    4728:	2021883a 	mov	r16,r4
    472c:	20000226 	beq	r4,zero,4738 <_fflush_r+0x1c>
    4730:	20800e17 	ldw	r2,56(r4)
    4734:	10000c26 	beq	r2,zero,4768 <_fflush_r+0x4c>
    4738:	2880030f 	ldh	r2,12(r5)
    473c:	1000051e 	bne	r2,zero,4754 <_fflush_r+0x38>
    4740:	0005883a 	mov	r2,zero
    4744:	dfc00217 	ldw	ra,8(sp)
    4748:	dc000117 	ldw	r16,4(sp)
    474c:	dec00304 	addi	sp,sp,12
    4750:	f800283a 	ret
    4754:	8009883a 	mov	r4,r16
    4758:	dfc00217 	ldw	ra,8(sp)
    475c:	dc000117 	ldw	r16,4(sp)
    4760:	dec00304 	addi	sp,sp,12
    4764:	00045141 	jmpi	4514 <__sflush_r>
    4768:	d9400015 	stw	r5,0(sp)
    476c:	0004af80 	call	4af8 <__sinit>
    4770:	d9400017 	ldw	r5,0(sp)
    4774:	003ff006 	br	4738 <__alt_mem_Flash_flash_data+0xf4004738>

00004778 <fflush>:
    4778:	20000526 	beq	r4,zero,4790 <fflush+0x18>
    477c:	00800074 	movhi	r2,1
    4780:	1093c104 	addi	r2,r2,20228
    4784:	200b883a 	mov	r5,r4
    4788:	11000017 	ldw	r4,0(r2)
    478c:	000471c1 	jmpi	471c <_fflush_r>
    4790:	00800074 	movhi	r2,1
    4794:	1093c004 	addi	r2,r2,20224
    4798:	11000017 	ldw	r4,0(r2)
    479c:	01400034 	movhi	r5,0
    47a0:	2951c704 	addi	r5,r5,18204
    47a4:	00050201 	jmpi	5020 <_fwalk_reent>

000047a8 <__fp_lock>:
    47a8:	0005883a 	mov	r2,zero
    47ac:	f800283a 	ret

000047b0 <__fp_unlock>:
    47b0:	0005883a 	mov	r2,zero
    47b4:	f800283a 	ret

000047b8 <_cleanup_r>:
    47b8:	01400034 	movhi	r5,0
    47bc:	29556b04 	addi	r5,r5,21932
    47c0:	00050201 	jmpi	5020 <_fwalk_reent>

000047c4 <__sinit.part.1>:
    47c4:	defff704 	addi	sp,sp,-36
    47c8:	00c00034 	movhi	r3,0
    47cc:	dfc00815 	stw	ra,32(sp)
    47d0:	ddc00715 	stw	r23,28(sp)
    47d4:	dd800615 	stw	r22,24(sp)
    47d8:	dd400515 	stw	r21,20(sp)
    47dc:	dd000415 	stw	r20,16(sp)
    47e0:	dcc00315 	stw	r19,12(sp)
    47e4:	dc800215 	stw	r18,8(sp)
    47e8:	dc400115 	stw	r17,4(sp)
    47ec:	dc000015 	stw	r16,0(sp)
    47f0:	18d1ee04 	addi	r3,r3,18360
    47f4:	24000117 	ldw	r16,4(r4)
    47f8:	20c00f15 	stw	r3,60(r4)
    47fc:	2080bb04 	addi	r2,r4,748
    4800:	00c000c4 	movi	r3,3
    4804:	20c0b915 	stw	r3,740(r4)
    4808:	2080ba15 	stw	r2,744(r4)
    480c:	2000b815 	stw	zero,736(r4)
    4810:	05c00204 	movi	r23,8
    4814:	00800104 	movi	r2,4
    4818:	2025883a 	mov	r18,r4
    481c:	b80d883a 	mov	r6,r23
    4820:	81001704 	addi	r4,r16,92
    4824:	000b883a 	mov	r5,zero
    4828:	80000015 	stw	zero,0(r16)
    482c:	80000115 	stw	zero,4(r16)
    4830:	80000215 	stw	zero,8(r16)
    4834:	8080030d 	sth	r2,12(r16)
    4838:	80001915 	stw	zero,100(r16)
    483c:	8000038d 	sth	zero,14(r16)
    4840:	80000415 	stw	zero,16(r16)
    4844:	80000515 	stw	zero,20(r16)
    4848:	80000615 	stw	zero,24(r16)
    484c:	000529c0 	call	529c <memset>
    4850:	05800034 	movhi	r22,0
    4854:	94400217 	ldw	r17,8(r18)
    4858:	05400034 	movhi	r21,0
    485c:	05000034 	movhi	r20,0
    4860:	04c00034 	movhi	r19,0
    4864:	b594f004 	addi	r22,r22,21440
    4868:	ad550704 	addi	r21,r21,21532
    486c:	a5152604 	addi	r20,r20,21656
    4870:	9cd53d04 	addi	r19,r19,21748
    4874:	85800815 	stw	r22,32(r16)
    4878:	85400915 	stw	r21,36(r16)
    487c:	85000a15 	stw	r20,40(r16)
    4880:	84c00b15 	stw	r19,44(r16)
    4884:	84000715 	stw	r16,28(r16)
    4888:	00800284 	movi	r2,10
    488c:	8880030d 	sth	r2,12(r17)
    4890:	00800044 	movi	r2,1
    4894:	89001704 	addi	r4,r17,92
    4898:	b80d883a 	mov	r6,r23
    489c:	000b883a 	mov	r5,zero
    48a0:	88000015 	stw	zero,0(r17)
    48a4:	88000115 	stw	zero,4(r17)
    48a8:	88000215 	stw	zero,8(r17)
    48ac:	88001915 	stw	zero,100(r17)
    48b0:	8880038d 	sth	r2,14(r17)
    48b4:	88000415 	stw	zero,16(r17)
    48b8:	88000515 	stw	zero,20(r17)
    48bc:	88000615 	stw	zero,24(r17)
    48c0:	000529c0 	call	529c <memset>
    48c4:	94000317 	ldw	r16,12(r18)
    48c8:	00800484 	movi	r2,18
    48cc:	8c400715 	stw	r17,28(r17)
    48d0:	8d800815 	stw	r22,32(r17)
    48d4:	8d400915 	stw	r21,36(r17)
    48d8:	8d000a15 	stw	r20,40(r17)
    48dc:	8cc00b15 	stw	r19,44(r17)
    48e0:	8080030d 	sth	r2,12(r16)
    48e4:	00800084 	movi	r2,2
    48e8:	80000015 	stw	zero,0(r16)
    48ec:	80000115 	stw	zero,4(r16)
    48f0:	80000215 	stw	zero,8(r16)
    48f4:	80001915 	stw	zero,100(r16)
    48f8:	8080038d 	sth	r2,14(r16)
    48fc:	80000415 	stw	zero,16(r16)
    4900:	80000515 	stw	zero,20(r16)
    4904:	80000615 	stw	zero,24(r16)
    4908:	81001704 	addi	r4,r16,92
    490c:	000b883a 	mov	r5,zero
    4910:	b80d883a 	mov	r6,r23
    4914:	000529c0 	call	529c <memset>
    4918:	00800044 	movi	r2,1
    491c:	84000715 	stw	r16,28(r16)
    4920:	85800815 	stw	r22,32(r16)
    4924:	85400915 	stw	r21,36(r16)
    4928:	85000a15 	stw	r20,40(r16)
    492c:	84c00b15 	stw	r19,44(r16)
    4930:	90800e15 	stw	r2,56(r18)
    4934:	dfc00817 	ldw	ra,32(sp)
    4938:	ddc00717 	ldw	r23,28(sp)
    493c:	dd800617 	ldw	r22,24(sp)
    4940:	dd400517 	ldw	r21,20(sp)
    4944:	dd000417 	ldw	r20,16(sp)
    4948:	dcc00317 	ldw	r19,12(sp)
    494c:	dc800217 	ldw	r18,8(sp)
    4950:	dc400117 	ldw	r17,4(sp)
    4954:	dc000017 	ldw	r16,0(sp)
    4958:	dec00904 	addi	sp,sp,36
    495c:	f800283a 	ret

00004960 <__sfmoreglue>:
    4960:	defffc04 	addi	sp,sp,-16
    4964:	dc400115 	stw	r17,4(sp)
    4968:	2c7fffc4 	addi	r17,r5,-1
    496c:	8c401a24 	muli	r17,r17,104
    4970:	dc800215 	stw	r18,8(sp)
    4974:	2825883a 	mov	r18,r5
    4978:	89401d04 	addi	r5,r17,116
    497c:	dc000015 	stw	r16,0(sp)
    4980:	dfc00315 	stw	ra,12(sp)
    4984:	00032e00 	call	32e0 <_malloc_r>
    4988:	1021883a 	mov	r16,r2
    498c:	10000726 	beq	r2,zero,49ac <__sfmoreglue+0x4c>
    4990:	11000304 	addi	r4,r2,12
    4994:	10000015 	stw	zero,0(r2)
    4998:	14800115 	stw	r18,4(r2)
    499c:	11000215 	stw	r4,8(r2)
    49a0:	000b883a 	mov	r5,zero
    49a4:	89801a04 	addi	r6,r17,104
    49a8:	000529c0 	call	529c <memset>
    49ac:	8005883a 	mov	r2,r16
    49b0:	dfc00317 	ldw	ra,12(sp)
    49b4:	dc800217 	ldw	r18,8(sp)
    49b8:	dc400117 	ldw	r17,4(sp)
    49bc:	dc000017 	ldw	r16,0(sp)
    49c0:	dec00404 	addi	sp,sp,16
    49c4:	f800283a 	ret

000049c8 <__sfp>:
    49c8:	00800074 	movhi	r2,1
    49cc:	defffb04 	addi	sp,sp,-20
    49d0:	1093c004 	addi	r2,r2,20224
    49d4:	dc800215 	stw	r18,8(sp)
    49d8:	14800017 	ldw	r18,0(r2)
    49dc:	dcc00315 	stw	r19,12(sp)
    49e0:	dfc00415 	stw	ra,16(sp)
    49e4:	90800e17 	ldw	r2,56(r18)
    49e8:	dc400115 	stw	r17,4(sp)
    49ec:	dc000015 	stw	r16,0(sp)
    49f0:	2027883a 	mov	r19,r4
    49f4:	1000021e 	bne	r2,zero,4a00 <__sfp+0x38>
    49f8:	9009883a 	mov	r4,r18
    49fc:	00047c40 	call	47c4 <__sinit.part.1>
    4a00:	9480b804 	addi	r18,r18,736
    4a04:	047fffc4 	movi	r17,-1
    4a08:	91400117 	ldw	r5,4(r18)
    4a0c:	94000217 	ldw	r16,8(r18)
    4a10:	297fffc4 	addi	r5,r5,-1
    4a14:	28000a16 	blt	r5,zero,4a40 <__sfp+0x78>
    4a18:	8080030f 	ldh	r2,12(r16)
    4a1c:	10000c26 	beq	r2,zero,4a50 <__sfp+0x88>
    4a20:	80c01d04 	addi	r3,r16,116
    4a24:	00000206 	br	4a30 <__sfp+0x68>
    4a28:	18bfe60f 	ldh	r2,-104(r3)
    4a2c:	10000826 	beq	r2,zero,4a50 <__sfp+0x88>
    4a30:	297fffc4 	addi	r5,r5,-1
    4a34:	1c3ffd04 	addi	r16,r3,-12
    4a38:	18c01a04 	addi	r3,r3,104
    4a3c:	2c7ffa1e 	bne	r5,r17,4a28 <__alt_mem_Flash_flash_data+0xf4004a28>
    4a40:	90800017 	ldw	r2,0(r18)
    4a44:	10001d26 	beq	r2,zero,4abc <__sfp+0xf4>
    4a48:	1025883a 	mov	r18,r2
    4a4c:	003fee06 	br	4a08 <__alt_mem_Flash_flash_data+0xf4004a08>
    4a50:	00bfffc4 	movi	r2,-1
    4a54:	8080038d 	sth	r2,14(r16)
    4a58:	00800044 	movi	r2,1
    4a5c:	8080030d 	sth	r2,12(r16)
    4a60:	80001915 	stw	zero,100(r16)
    4a64:	80000015 	stw	zero,0(r16)
    4a68:	80000215 	stw	zero,8(r16)
    4a6c:	80000115 	stw	zero,4(r16)
    4a70:	80000415 	stw	zero,16(r16)
    4a74:	80000515 	stw	zero,20(r16)
    4a78:	80000615 	stw	zero,24(r16)
    4a7c:	81001704 	addi	r4,r16,92
    4a80:	000b883a 	mov	r5,zero
    4a84:	01800204 	movi	r6,8
    4a88:	000529c0 	call	529c <memset>
    4a8c:	8005883a 	mov	r2,r16
    4a90:	80000c15 	stw	zero,48(r16)
    4a94:	80000d15 	stw	zero,52(r16)
    4a98:	80001115 	stw	zero,68(r16)
    4a9c:	80001215 	stw	zero,72(r16)
    4aa0:	dfc00417 	ldw	ra,16(sp)
    4aa4:	dcc00317 	ldw	r19,12(sp)
    4aa8:	dc800217 	ldw	r18,8(sp)
    4aac:	dc400117 	ldw	r17,4(sp)
    4ab0:	dc000017 	ldw	r16,0(sp)
    4ab4:	dec00504 	addi	sp,sp,20
    4ab8:	f800283a 	ret
    4abc:	9809883a 	mov	r4,r19
    4ac0:	01400104 	movi	r5,4
    4ac4:	00049600 	call	4960 <__sfmoreglue>
    4ac8:	90800015 	stw	r2,0(r18)
    4acc:	103fde1e 	bne	r2,zero,4a48 <__alt_mem_Flash_flash_data+0xf4004a48>
    4ad0:	00800304 	movi	r2,12
    4ad4:	98800015 	stw	r2,0(r19)
    4ad8:	0005883a 	mov	r2,zero
    4adc:	003ff006 	br	4aa0 <__alt_mem_Flash_flash_data+0xf4004aa0>

00004ae0 <_cleanup>:
    4ae0:	00800074 	movhi	r2,1
    4ae4:	1093c004 	addi	r2,r2,20224
    4ae8:	11000017 	ldw	r4,0(r2)
    4aec:	01400034 	movhi	r5,0
    4af0:	29556b04 	addi	r5,r5,21932
    4af4:	00050201 	jmpi	5020 <_fwalk_reent>

00004af8 <__sinit>:
    4af8:	20800e17 	ldw	r2,56(r4)
    4afc:	10000126 	beq	r2,zero,4b04 <__sinit+0xc>
    4b00:	f800283a 	ret
    4b04:	00047c41 	jmpi	47c4 <__sinit.part.1>

00004b08 <__sfp_lock_acquire>:
    4b08:	f800283a 	ret

00004b0c <__sfp_lock_release>:
    4b0c:	f800283a 	ret

00004b10 <__sinit_lock_acquire>:
    4b10:	f800283a 	ret

00004b14 <__sinit_lock_release>:
    4b14:	f800283a 	ret

00004b18 <__fp_lock_all>:
    4b18:	00800074 	movhi	r2,1
    4b1c:	1093c104 	addi	r2,r2,20228
    4b20:	11000017 	ldw	r4,0(r2)
    4b24:	01400034 	movhi	r5,0
    4b28:	2951ea04 	addi	r5,r5,18344
    4b2c:	0004f5c1 	jmpi	4f5c <_fwalk>

00004b30 <__fp_unlock_all>:
    4b30:	00800074 	movhi	r2,1
    4b34:	1093c104 	addi	r2,r2,20228
    4b38:	11000017 	ldw	r4,0(r2)
    4b3c:	01400034 	movhi	r5,0
    4b40:	2951ec04 	addi	r5,r5,18352
    4b44:	0004f5c1 	jmpi	4f5c <_fwalk>

00004b48 <_malloc_trim_r>:
    4b48:	defffb04 	addi	sp,sp,-20
    4b4c:	dcc00315 	stw	r19,12(sp)
    4b50:	04c00074 	movhi	r19,1
    4b54:	dc800215 	stw	r18,8(sp)
    4b58:	dc400115 	stw	r17,4(sp)
    4b5c:	dc000015 	stw	r16,0(sp)
    4b60:	dfc00415 	stw	ra,16(sp)
    4b64:	2821883a 	mov	r16,r5
    4b68:	9ccd4c04 	addi	r19,r19,13616
    4b6c:	2025883a 	mov	r18,r4
    4b70:	000641c0 	call	641c <__malloc_lock>
    4b74:	98800217 	ldw	r2,8(r19)
    4b78:	14400117 	ldw	r17,4(r2)
    4b7c:	00bfff04 	movi	r2,-4
    4b80:	88a2703a 	and	r17,r17,r2
    4b84:	8c21c83a 	sub	r16,r17,r16
    4b88:	8403fbc4 	addi	r16,r16,4079
    4b8c:	8020d33a 	srli	r16,r16,12
    4b90:	0083ffc4 	movi	r2,4095
    4b94:	843fffc4 	addi	r16,r16,-1
    4b98:	8020933a 	slli	r16,r16,12
    4b9c:	1400060e 	bge	r2,r16,4bb8 <_malloc_trim_r+0x70>
    4ba0:	9009883a 	mov	r4,r18
    4ba4:	000b883a 	mov	r5,zero
    4ba8:	000436c0 	call	436c <_sbrk_r>
    4bac:	98c00217 	ldw	r3,8(r19)
    4bb0:	1c47883a 	add	r3,r3,r17
    4bb4:	10c00a26 	beq	r2,r3,4be0 <_malloc_trim_r+0x98>
    4bb8:	9009883a 	mov	r4,r18
    4bbc:	000653c0 	call	653c <__malloc_unlock>
    4bc0:	0005883a 	mov	r2,zero
    4bc4:	dfc00417 	ldw	ra,16(sp)
    4bc8:	dcc00317 	ldw	r19,12(sp)
    4bcc:	dc800217 	ldw	r18,8(sp)
    4bd0:	dc400117 	ldw	r17,4(sp)
    4bd4:	dc000017 	ldw	r16,0(sp)
    4bd8:	dec00504 	addi	sp,sp,20
    4bdc:	f800283a 	ret
    4be0:	9009883a 	mov	r4,r18
    4be4:	040bc83a 	sub	r5,zero,r16
    4be8:	000436c0 	call	436c <_sbrk_r>
    4bec:	00ffffc4 	movi	r3,-1
    4bf0:	10c00d26 	beq	r2,r3,4c28 <_malloc_trim_r+0xe0>
    4bf4:	00c00074 	movhi	r3,1
    4bf8:	18dbde04 	addi	r3,r3,28536
    4bfc:	18800017 	ldw	r2,0(r3)
    4c00:	99000217 	ldw	r4,8(r19)
    4c04:	8c23c83a 	sub	r17,r17,r16
    4c08:	8c400054 	ori	r17,r17,1
    4c0c:	1421c83a 	sub	r16,r2,r16
    4c10:	24400115 	stw	r17,4(r4)
    4c14:	9009883a 	mov	r4,r18
    4c18:	1c000015 	stw	r16,0(r3)
    4c1c:	000653c0 	call	653c <__malloc_unlock>
    4c20:	00800044 	movi	r2,1
    4c24:	003fe706 	br	4bc4 <__alt_mem_Flash_flash_data+0xf4004bc4>
    4c28:	9009883a 	mov	r4,r18
    4c2c:	000b883a 	mov	r5,zero
    4c30:	000436c0 	call	436c <_sbrk_r>
    4c34:	99000217 	ldw	r4,8(r19)
    4c38:	014003c4 	movi	r5,15
    4c3c:	1107c83a 	sub	r3,r2,r4
    4c40:	28ffdd0e 	bge	r5,r3,4bb8 <__alt_mem_Flash_flash_data+0xf4004bb8>
    4c44:	01400074 	movhi	r5,1
    4c48:	2953c204 	addi	r5,r5,20232
    4c4c:	29400017 	ldw	r5,0(r5)
    4c50:	18c00054 	ori	r3,r3,1
    4c54:	20c00115 	stw	r3,4(r4)
    4c58:	00c00074 	movhi	r3,1
    4c5c:	1145c83a 	sub	r2,r2,r5
    4c60:	18dbde04 	addi	r3,r3,28536
    4c64:	18800015 	stw	r2,0(r3)
    4c68:	003fd306 	br	4bb8 <__alt_mem_Flash_flash_data+0xf4004bb8>

00004c6c <_free_r>:
    4c6c:	28004c26 	beq	r5,zero,4da0 <_free_r+0x134>
    4c70:	defffd04 	addi	sp,sp,-12
    4c74:	dc400115 	stw	r17,4(sp)
    4c78:	dc000015 	stw	r16,0(sp)
    4c7c:	2023883a 	mov	r17,r4
    4c80:	2821883a 	mov	r16,r5
    4c84:	dfc00215 	stw	ra,8(sp)
    4c88:	000641c0 	call	641c <__malloc_lock>
    4c8c:	813fff17 	ldw	r4,-4(r16)
    4c90:	00bfff84 	movi	r2,-2
    4c94:	02400074 	movhi	r9,1
    4c98:	81bffe04 	addi	r6,r16,-8
    4c9c:	2084703a 	and	r2,r4,r2
    4ca0:	4a4d4c04 	addi	r9,r9,13616
    4ca4:	308b883a 	add	r5,r6,r2
    4ca8:	2a000117 	ldw	r8,4(r5)
    4cac:	49c00217 	ldw	r7,8(r9)
    4cb0:	00ffff04 	movi	r3,-4
    4cb4:	40c6703a 	and	r3,r8,r3
    4cb8:	39405326 	beq	r7,r5,4e08 <_free_r+0x19c>
    4cbc:	28c00115 	stw	r3,4(r5)
    4cc0:	2100004c 	andi	r4,r4,1
    4cc4:	2000091e 	bne	r4,zero,4cec <_free_r+0x80>
    4cc8:	81fffe17 	ldw	r7,-8(r16)
    4ccc:	4a000204 	addi	r8,r9,8
    4cd0:	31cdc83a 	sub	r6,r6,r7
    4cd4:	31000217 	ldw	r4,8(r6)
    4cd8:	11c5883a 	add	r2,r2,r7
    4cdc:	22006126 	beq	r4,r8,4e64 <_free_r+0x1f8>
    4ce0:	31c00317 	ldw	r7,12(r6)
    4ce4:	21c00315 	stw	r7,12(r4)
    4ce8:	39000215 	stw	r4,8(r7)
    4cec:	28c9883a 	add	r4,r5,r3
    4cf0:	21c00117 	ldw	r7,4(r4)
    4cf4:	39c0004c 	andi	r7,r7,1
    4cf8:	38000d1e 	bne	r7,zero,4d30 <_free_r+0xc4>
    4cfc:	29000217 	ldw	r4,8(r5)
    4d00:	10c5883a 	add	r2,r2,r3
    4d04:	00c00074 	movhi	r3,1
    4d08:	18cd4e04 	addi	r3,r3,13624
    4d0c:	20c07526 	beq	r4,r3,4ee4 <_free_r+0x278>
    4d10:	29c00317 	ldw	r7,12(r5)
    4d14:	11400054 	ori	r5,r2,1
    4d18:	3087883a 	add	r3,r6,r2
    4d1c:	21c00315 	stw	r7,12(r4)
    4d20:	39000215 	stw	r4,8(r7)
    4d24:	31400115 	stw	r5,4(r6)
    4d28:	18800015 	stw	r2,0(r3)
    4d2c:	00000406 	br	4d40 <_free_r+0xd4>
    4d30:	10c00054 	ori	r3,r2,1
    4d34:	30c00115 	stw	r3,4(r6)
    4d38:	3087883a 	add	r3,r6,r2
    4d3c:	18800015 	stw	r2,0(r3)
    4d40:	00c07fc4 	movi	r3,511
    4d44:	18801736 	bltu	r3,r2,4da4 <_free_r+0x138>
    4d48:	1004d0fa 	srli	r2,r2,3
    4d4c:	01400044 	movi	r5,1
    4d50:	49000117 	ldw	r4,4(r9)
    4d54:	1087883a 	add	r3,r2,r2
    4d58:	18c7883a 	add	r3,r3,r3
    4d5c:	1005d0ba 	srai	r2,r2,2
    4d60:	18c7883a 	add	r3,r3,r3
    4d64:	1a47883a 	add	r3,r3,r9
    4d68:	19c00217 	ldw	r7,8(r3)
    4d6c:	2884983a 	sll	r2,r5,r2
    4d70:	30c00315 	stw	r3,12(r6)
    4d74:	31c00215 	stw	r7,8(r6)
    4d78:	1104b03a 	or	r2,r2,r4
    4d7c:	19800215 	stw	r6,8(r3)
    4d80:	48800115 	stw	r2,4(r9)
    4d84:	39800315 	stw	r6,12(r7)
    4d88:	8809883a 	mov	r4,r17
    4d8c:	dfc00217 	ldw	ra,8(sp)
    4d90:	dc400117 	ldw	r17,4(sp)
    4d94:	dc000017 	ldw	r16,0(sp)
    4d98:	dec00304 	addi	sp,sp,12
    4d9c:	000653c1 	jmpi	653c <__malloc_unlock>
    4da0:	f800283a 	ret
    4da4:	1006d27a 	srli	r3,r2,9
    4da8:	01000104 	movi	r4,4
    4dac:	20c04036 	bltu	r4,r3,4eb0 <_free_r+0x244>
    4db0:	1006d1ba 	srli	r3,r2,6
    4db4:	19400e04 	addi	r5,r3,56
    4db8:	2947883a 	add	r3,r5,r5
    4dbc:	18c7883a 	add	r3,r3,r3
    4dc0:	18c7883a 	add	r3,r3,r3
    4dc4:	1a49883a 	add	r4,r3,r9
    4dc8:	20c00217 	ldw	r3,8(r4)
    4dcc:	01c00074 	movhi	r7,1
    4dd0:	39cd4c04 	addi	r7,r7,13616
    4dd4:	19003b26 	beq	r3,r4,4ec4 <_free_r+0x258>
    4dd8:	01ffff04 	movi	r7,-4
    4ddc:	19400117 	ldw	r5,4(r3)
    4de0:	29ca703a 	and	r5,r5,r7
    4de4:	1140022e 	bgeu	r2,r5,4df0 <_free_r+0x184>
    4de8:	18c00217 	ldw	r3,8(r3)
    4dec:	20fffb1e 	bne	r4,r3,4ddc <__alt_mem_Flash_flash_data+0xf4004ddc>
    4df0:	18800317 	ldw	r2,12(r3)
    4df4:	30800315 	stw	r2,12(r6)
    4df8:	30c00215 	stw	r3,8(r6)
    4dfc:	11800215 	stw	r6,8(r2)
    4e00:	19800315 	stw	r6,12(r3)
    4e04:	003fe006 	br	4d88 <__alt_mem_Flash_flash_data+0xf4004d88>
    4e08:	2100004c 	andi	r4,r4,1
    4e0c:	1885883a 	add	r2,r3,r2
    4e10:	2000071e 	bne	r4,zero,4e30 <_free_r+0x1c4>
    4e14:	817ffe17 	ldw	r5,-8(r16)
    4e18:	314dc83a 	sub	r6,r6,r5
    4e1c:	30c00317 	ldw	r3,12(r6)
    4e20:	31000217 	ldw	r4,8(r6)
    4e24:	1145883a 	add	r2,r2,r5
    4e28:	20c00315 	stw	r3,12(r4)
    4e2c:	19000215 	stw	r4,8(r3)
    4e30:	10c00054 	ori	r3,r2,1
    4e34:	30c00115 	stw	r3,4(r6)
    4e38:	00c00074 	movhi	r3,1
    4e3c:	18d3c304 	addi	r3,r3,20236
    4e40:	18c00017 	ldw	r3,0(r3)
    4e44:	49800215 	stw	r6,8(r9)
    4e48:	10ffcf36 	bltu	r2,r3,4d88 <__alt_mem_Flash_flash_data+0xf4004d88>
    4e4c:	00800074 	movhi	r2,1
    4e50:	109bbc04 	addi	r2,r2,28400
    4e54:	11400017 	ldw	r5,0(r2)
    4e58:	8809883a 	mov	r4,r17
    4e5c:	0004b480 	call	4b48 <_malloc_trim_r>
    4e60:	003fc906 	br	4d88 <__alt_mem_Flash_flash_data+0xf4004d88>
    4e64:	28c9883a 	add	r4,r5,r3
    4e68:	21000117 	ldw	r4,4(r4)
    4e6c:	2100004c 	andi	r4,r4,1
    4e70:	20000a1e 	bne	r4,zero,4e9c <_free_r+0x230>
    4e74:	29000317 	ldw	r4,12(r5)
    4e78:	29400217 	ldw	r5,8(r5)
    4e7c:	10c5883a 	add	r2,r2,r3
    4e80:	10c00054 	ori	r3,r2,1
    4e84:	29000315 	stw	r4,12(r5)
    4e88:	21400215 	stw	r5,8(r4)
    4e8c:	30c00115 	stw	r3,4(r6)
    4e90:	308d883a 	add	r6,r6,r2
    4e94:	30800015 	stw	r2,0(r6)
    4e98:	003fbb06 	br	4d88 <__alt_mem_Flash_flash_data+0xf4004d88>
    4e9c:	10c00054 	ori	r3,r2,1
    4ea0:	30c00115 	stw	r3,4(r6)
    4ea4:	308d883a 	add	r6,r6,r2
    4ea8:	30800015 	stw	r2,0(r6)
    4eac:	003fb606 	br	4d88 <__alt_mem_Flash_flash_data+0xf4004d88>
    4eb0:	01000504 	movi	r4,20
    4eb4:	20c01436 	bltu	r4,r3,4f08 <_free_r+0x29c>
    4eb8:	194016c4 	addi	r5,r3,91
    4ebc:	2947883a 	add	r3,r5,r5
    4ec0:	003fbe06 	br	4dbc <__alt_mem_Flash_flash_data+0xf4004dbc>
    4ec4:	280bd0ba 	srai	r5,r5,2
    4ec8:	00800044 	movi	r2,1
    4ecc:	39000117 	ldw	r4,4(r7)
    4ed0:	114a983a 	sll	r5,r2,r5
    4ed4:	1805883a 	mov	r2,r3
    4ed8:	2908b03a 	or	r4,r5,r4
    4edc:	39000115 	stw	r4,4(r7)
    4ee0:	003fc406 	br	4df4 <__alt_mem_Flash_flash_data+0xf4004df4>
    4ee4:	49800515 	stw	r6,20(r9)
    4ee8:	49800415 	stw	r6,16(r9)
    4eec:	10c00054 	ori	r3,r2,1
    4ef0:	31000315 	stw	r4,12(r6)
    4ef4:	31000215 	stw	r4,8(r6)
    4ef8:	30c00115 	stw	r3,4(r6)
    4efc:	308d883a 	add	r6,r6,r2
    4f00:	30800015 	stw	r2,0(r6)
    4f04:	003fa006 	br	4d88 <__alt_mem_Flash_flash_data+0xf4004d88>
    4f08:	01001504 	movi	r4,84
    4f0c:	20c00436 	bltu	r4,r3,4f20 <_free_r+0x2b4>
    4f10:	1006d33a 	srli	r3,r2,12
    4f14:	19401b84 	addi	r5,r3,110
    4f18:	2947883a 	add	r3,r5,r5
    4f1c:	003fa706 	br	4dbc <__alt_mem_Flash_flash_data+0xf4004dbc>
    4f20:	01005504 	movi	r4,340
    4f24:	20c00436 	bltu	r4,r3,4f38 <_free_r+0x2cc>
    4f28:	1006d3fa 	srli	r3,r2,15
    4f2c:	19401dc4 	addi	r5,r3,119
    4f30:	2947883a 	add	r3,r5,r5
    4f34:	003fa106 	br	4dbc <__alt_mem_Flash_flash_data+0xf4004dbc>
    4f38:	01015504 	movi	r4,1364
    4f3c:	20c00436 	bltu	r4,r3,4f50 <_free_r+0x2e4>
    4f40:	1006d4ba 	srli	r3,r2,18
    4f44:	19401f04 	addi	r5,r3,124
    4f48:	2947883a 	add	r3,r5,r5
    4f4c:	003f9b06 	br	4dbc <__alt_mem_Flash_flash_data+0xf4004dbc>
    4f50:	00c03f04 	movi	r3,252
    4f54:	01401f84 	movi	r5,126
    4f58:	003f9806 	br	4dbc <__alt_mem_Flash_flash_data+0xf4004dbc>

00004f5c <_fwalk>:
    4f5c:	defff704 	addi	sp,sp,-36
    4f60:	dd000415 	stw	r20,16(sp)
    4f64:	dfc00815 	stw	ra,32(sp)
    4f68:	ddc00715 	stw	r23,28(sp)
    4f6c:	dd800615 	stw	r22,24(sp)
    4f70:	dd400515 	stw	r21,20(sp)
    4f74:	dcc00315 	stw	r19,12(sp)
    4f78:	dc800215 	stw	r18,8(sp)
    4f7c:	dc400115 	stw	r17,4(sp)
    4f80:	dc000015 	stw	r16,0(sp)
    4f84:	2500b804 	addi	r20,r4,736
    4f88:	a0002326 	beq	r20,zero,5018 <_fwalk+0xbc>
    4f8c:	282b883a 	mov	r21,r5
    4f90:	002f883a 	mov	r23,zero
    4f94:	05800044 	movi	r22,1
    4f98:	04ffffc4 	movi	r19,-1
    4f9c:	a4400117 	ldw	r17,4(r20)
    4fa0:	a4800217 	ldw	r18,8(r20)
    4fa4:	8c7fffc4 	addi	r17,r17,-1
    4fa8:	88000d16 	blt	r17,zero,4fe0 <_fwalk+0x84>
    4fac:	94000304 	addi	r16,r18,12
    4fb0:	94800384 	addi	r18,r18,14
    4fb4:	80c0000b 	ldhu	r3,0(r16)
    4fb8:	8c7fffc4 	addi	r17,r17,-1
    4fbc:	813ffd04 	addi	r4,r16,-12
    4fc0:	b0c0042e 	bgeu	r22,r3,4fd4 <_fwalk+0x78>
    4fc4:	90c0000f 	ldh	r3,0(r18)
    4fc8:	1cc00226 	beq	r3,r19,4fd4 <_fwalk+0x78>
    4fcc:	a83ee83a 	callr	r21
    4fd0:	b8aeb03a 	or	r23,r23,r2
    4fd4:	84001a04 	addi	r16,r16,104
    4fd8:	94801a04 	addi	r18,r18,104
    4fdc:	8cfff51e 	bne	r17,r19,4fb4 <__alt_mem_Flash_flash_data+0xf4004fb4>
    4fe0:	a5000017 	ldw	r20,0(r20)
    4fe4:	a03fed1e 	bne	r20,zero,4f9c <__alt_mem_Flash_flash_data+0xf4004f9c>
    4fe8:	b805883a 	mov	r2,r23
    4fec:	dfc00817 	ldw	ra,32(sp)
    4ff0:	ddc00717 	ldw	r23,28(sp)
    4ff4:	dd800617 	ldw	r22,24(sp)
    4ff8:	dd400517 	ldw	r21,20(sp)
    4ffc:	dd000417 	ldw	r20,16(sp)
    5000:	dcc00317 	ldw	r19,12(sp)
    5004:	dc800217 	ldw	r18,8(sp)
    5008:	dc400117 	ldw	r17,4(sp)
    500c:	dc000017 	ldw	r16,0(sp)
    5010:	dec00904 	addi	sp,sp,36
    5014:	f800283a 	ret
    5018:	002f883a 	mov	r23,zero
    501c:	003ff206 	br	4fe8 <__alt_mem_Flash_flash_data+0xf4004fe8>

00005020 <_fwalk_reent>:
    5020:	defff704 	addi	sp,sp,-36
    5024:	dd400515 	stw	r21,20(sp)
    5028:	dfc00815 	stw	ra,32(sp)
    502c:	ddc00715 	stw	r23,28(sp)
    5030:	dd800615 	stw	r22,24(sp)
    5034:	dd000415 	stw	r20,16(sp)
    5038:	dcc00315 	stw	r19,12(sp)
    503c:	dc800215 	stw	r18,8(sp)
    5040:	dc400115 	stw	r17,4(sp)
    5044:	dc000015 	stw	r16,0(sp)
    5048:	2540b804 	addi	r21,r4,736
    504c:	a8002326 	beq	r21,zero,50dc <_fwalk_reent+0xbc>
    5050:	2829883a 	mov	r20,r5
    5054:	202d883a 	mov	r22,r4
    5058:	002f883a 	mov	r23,zero
    505c:	04c00044 	movi	r19,1
    5060:	04bfffc4 	movi	r18,-1
    5064:	ac400117 	ldw	r17,4(r21)
    5068:	ac000217 	ldw	r16,8(r21)
    506c:	8c7fffc4 	addi	r17,r17,-1
    5070:	88000c16 	blt	r17,zero,50a4 <_fwalk_reent+0x84>
    5074:	84000304 	addi	r16,r16,12
    5078:	80c0000b 	ldhu	r3,0(r16)
    507c:	8c7fffc4 	addi	r17,r17,-1
    5080:	817ffd04 	addi	r5,r16,-12
    5084:	98c0052e 	bgeu	r19,r3,509c <_fwalk_reent+0x7c>
    5088:	80c0008f 	ldh	r3,2(r16)
    508c:	b009883a 	mov	r4,r22
    5090:	1c800226 	beq	r3,r18,509c <_fwalk_reent+0x7c>
    5094:	a03ee83a 	callr	r20
    5098:	b8aeb03a 	or	r23,r23,r2
    509c:	84001a04 	addi	r16,r16,104
    50a0:	8cbff51e 	bne	r17,r18,5078 <__alt_mem_Flash_flash_data+0xf4005078>
    50a4:	ad400017 	ldw	r21,0(r21)
    50a8:	a83fee1e 	bne	r21,zero,5064 <__alt_mem_Flash_flash_data+0xf4005064>
    50ac:	b805883a 	mov	r2,r23
    50b0:	dfc00817 	ldw	ra,32(sp)
    50b4:	ddc00717 	ldw	r23,28(sp)
    50b8:	dd800617 	ldw	r22,24(sp)
    50bc:	dd400517 	ldw	r21,20(sp)
    50c0:	dd000417 	ldw	r20,16(sp)
    50c4:	dcc00317 	ldw	r19,12(sp)
    50c8:	dc800217 	ldw	r18,8(sp)
    50cc:	dc400117 	ldw	r17,4(sp)
    50d0:	dc000017 	ldw	r16,0(sp)
    50d4:	dec00904 	addi	sp,sp,36
    50d8:	f800283a 	ret
    50dc:	002f883a 	mov	r23,zero
    50e0:	003ff206 	br	50ac <__alt_mem_Flash_flash_data+0xf40050ac>

000050e4 <__smakebuf_r>:
    50e4:	2880030b 	ldhu	r2,12(r5)
    50e8:	10c0008c 	andi	r3,r2,2
    50ec:	1800401e 	bne	r3,zero,51f0 <__smakebuf_r+0x10c>
    50f0:	deffec04 	addi	sp,sp,-80
    50f4:	dc000f15 	stw	r16,60(sp)
    50f8:	2821883a 	mov	r16,r5
    50fc:	2940038f 	ldh	r5,14(r5)
    5100:	dc401015 	stw	r17,64(sp)
    5104:	dfc01315 	stw	ra,76(sp)
    5108:	dcc01215 	stw	r19,72(sp)
    510c:	dc801115 	stw	r18,68(sp)
    5110:	2023883a 	mov	r17,r4
    5114:	28001b16 	blt	r5,zero,5184 <__smakebuf_r+0xa0>
    5118:	d80d883a 	mov	r6,sp
    511c:	00056b00 	call	56b0 <_fstat_r>
    5120:	10001716 	blt	r2,zero,5180 <__smakebuf_r+0x9c>
    5124:	d8800117 	ldw	r2,4(sp)
    5128:	00e00014 	movui	r3,32768
    512c:	10bc000c 	andi	r2,r2,61440
    5130:	10c03726 	beq	r2,r3,5210 <__smakebuf_r+0x12c>
    5134:	80c0030b 	ldhu	r3,12(r16)
    5138:	18c20014 	ori	r3,r3,2048
    513c:	80c0030d 	sth	r3,12(r16)
    5140:	00c80004 	movi	r3,8192
    5144:	10c03c1e 	bne	r2,r3,5238 <__smakebuf_r+0x154>
    5148:	8140038f 	ldh	r5,14(r16)
    514c:	8809883a 	mov	r4,r17
    5150:	00057080 	call	5708 <_isatty_r>
    5154:	10004e26 	beq	r2,zero,5290 <__smakebuf_r+0x1ac>
    5158:	8080030b 	ldhu	r2,12(r16)
    515c:	04c00044 	movi	r19,1
    5160:	80c010c4 	addi	r3,r16,67
    5164:	14c4b03a 	or	r2,r2,r19
    5168:	8080030d 	sth	r2,12(r16)
    516c:	80c00015 	stw	r3,0(r16)
    5170:	80c00415 	stw	r3,16(r16)
    5174:	84c00515 	stw	r19,20(r16)
    5178:	04810004 	movi	r18,1024
    517c:	00000706 	br	519c <__smakebuf_r+0xb8>
    5180:	8080030b 	ldhu	r2,12(r16)
    5184:	10c0200c 	andi	r3,r2,128
    5188:	18001f1e 	bne	r3,zero,5208 <__smakebuf_r+0x124>
    518c:	04810004 	movi	r18,1024
    5190:	10820014 	ori	r2,r2,2048
    5194:	8080030d 	sth	r2,12(r16)
    5198:	0027883a 	mov	r19,zero
    519c:	8809883a 	mov	r4,r17
    51a0:	900b883a 	mov	r5,r18
    51a4:	00032e00 	call	32e0 <_malloc_r>
    51a8:	10002e26 	beq	r2,zero,5264 <__smakebuf_r+0x180>
    51ac:	80c0030b 	ldhu	r3,12(r16)
    51b0:	01000034 	movhi	r4,0
    51b4:	2111ee04 	addi	r4,r4,18360
    51b8:	89000f15 	stw	r4,60(r17)
    51bc:	18c02014 	ori	r3,r3,128
    51c0:	80c0030d 	sth	r3,12(r16)
    51c4:	80800015 	stw	r2,0(r16)
    51c8:	80800415 	stw	r2,16(r16)
    51cc:	84800515 	stw	r18,20(r16)
    51d0:	98001c1e 	bne	r19,zero,5244 <__smakebuf_r+0x160>
    51d4:	dfc01317 	ldw	ra,76(sp)
    51d8:	dcc01217 	ldw	r19,72(sp)
    51dc:	dc801117 	ldw	r18,68(sp)
    51e0:	dc401017 	ldw	r17,64(sp)
    51e4:	dc000f17 	ldw	r16,60(sp)
    51e8:	dec01404 	addi	sp,sp,80
    51ec:	f800283a 	ret
    51f0:	288010c4 	addi	r2,r5,67
    51f4:	28800015 	stw	r2,0(r5)
    51f8:	28800415 	stw	r2,16(r5)
    51fc:	00800044 	movi	r2,1
    5200:	28800515 	stw	r2,20(r5)
    5204:	f800283a 	ret
    5208:	04801004 	movi	r18,64
    520c:	003fe006 	br	5190 <__alt_mem_Flash_flash_data+0xf4005190>
    5210:	81000a17 	ldw	r4,40(r16)
    5214:	00c00034 	movhi	r3,0
    5218:	18d52604 	addi	r3,r3,21656
    521c:	20ffc51e 	bne	r4,r3,5134 <__alt_mem_Flash_flash_data+0xf4005134>
    5220:	80c0030b 	ldhu	r3,12(r16)
    5224:	01010004 	movi	r4,1024
    5228:	81001315 	stw	r4,76(r16)
    522c:	1906b03a 	or	r3,r3,r4
    5230:	80c0030d 	sth	r3,12(r16)
    5234:	003fc206 	br	5140 <__alt_mem_Flash_flash_data+0xf4005140>
    5238:	0027883a 	mov	r19,zero
    523c:	04810004 	movi	r18,1024
    5240:	003fd606 	br	519c <__alt_mem_Flash_flash_data+0xf400519c>
    5244:	8140038f 	ldh	r5,14(r16)
    5248:	8809883a 	mov	r4,r17
    524c:	00057080 	call	5708 <_isatty_r>
    5250:	103fe026 	beq	r2,zero,51d4 <__alt_mem_Flash_flash_data+0xf40051d4>
    5254:	8080030b 	ldhu	r2,12(r16)
    5258:	10800054 	ori	r2,r2,1
    525c:	8080030d 	sth	r2,12(r16)
    5260:	003fdc06 	br	51d4 <__alt_mem_Flash_flash_data+0xf40051d4>
    5264:	8080030b 	ldhu	r2,12(r16)
    5268:	10c0800c 	andi	r3,r2,512
    526c:	183fd91e 	bne	r3,zero,51d4 <__alt_mem_Flash_flash_data+0xf40051d4>
    5270:	10800094 	ori	r2,r2,2
    5274:	80c010c4 	addi	r3,r16,67
    5278:	8080030d 	sth	r2,12(r16)
    527c:	00800044 	movi	r2,1
    5280:	80c00015 	stw	r3,0(r16)
    5284:	80c00415 	stw	r3,16(r16)
    5288:	80800515 	stw	r2,20(r16)
    528c:	003fd106 	br	51d4 <__alt_mem_Flash_flash_data+0xf40051d4>
    5290:	04c00044 	movi	r19,1
    5294:	04810004 	movi	r18,1024
    5298:	003fc006 	br	519c <__alt_mem_Flash_flash_data+0xf400519c>

0000529c <memset>:
    529c:	20c000cc 	andi	r3,r4,3
    52a0:	2005883a 	mov	r2,r4
    52a4:	18004326 	beq	r3,zero,53b4 <memset+0x118>
    52a8:	31ffffc4 	addi	r7,r6,-1
    52ac:	30004026 	beq	r6,zero,53b0 <memset+0x114>
    52b0:	2813883a 	mov	r9,r5
    52b4:	200d883a 	mov	r6,r4
    52b8:	2007883a 	mov	r3,r4
    52bc:	00000406 	br	52d0 <memset+0x34>
    52c0:	3a3fffc4 	addi	r8,r7,-1
    52c4:	31800044 	addi	r6,r6,1
    52c8:	38003926 	beq	r7,zero,53b0 <memset+0x114>
    52cc:	400f883a 	mov	r7,r8
    52d0:	18c00044 	addi	r3,r3,1
    52d4:	32400005 	stb	r9,0(r6)
    52d8:	1a0000cc 	andi	r8,r3,3
    52dc:	403ff81e 	bne	r8,zero,52c0 <__alt_mem_Flash_flash_data+0xf40052c0>
    52e0:	010000c4 	movi	r4,3
    52e4:	21c02d2e 	bgeu	r4,r7,539c <memset+0x100>
    52e8:	29803fcc 	andi	r6,r5,255
    52ec:	3008923a 	slli	r4,r6,8
    52f0:	218cb03a 	or	r6,r4,r6
    52f4:	3008943a 	slli	r4,r6,16
    52f8:	218cb03a 	or	r6,r4,r6
    52fc:	010003c4 	movi	r4,15
    5300:	21c0182e 	bgeu	r4,r7,5364 <memset+0xc8>
    5304:	3b3ffc04 	addi	r12,r7,-16
    5308:	6018d13a 	srli	r12,r12,4
    530c:	1a000104 	addi	r8,r3,4
    5310:	1ac00204 	addi	r11,r3,8
    5314:	6008913a 	slli	r4,r12,4
    5318:	1a800304 	addi	r10,r3,12
    531c:	1813883a 	mov	r9,r3
    5320:	21000504 	addi	r4,r4,20
    5324:	1909883a 	add	r4,r3,r4
    5328:	49800015 	stw	r6,0(r9)
    532c:	41800015 	stw	r6,0(r8)
    5330:	59800015 	stw	r6,0(r11)
    5334:	51800015 	stw	r6,0(r10)
    5338:	42000404 	addi	r8,r8,16
    533c:	4a400404 	addi	r9,r9,16
    5340:	5ac00404 	addi	r11,r11,16
    5344:	52800404 	addi	r10,r10,16
    5348:	413ff71e 	bne	r8,r4,5328 <__alt_mem_Flash_flash_data+0xf4005328>
    534c:	63000044 	addi	r12,r12,1
    5350:	6018913a 	slli	r12,r12,4
    5354:	39c003cc 	andi	r7,r7,15
    5358:	010000c4 	movi	r4,3
    535c:	1b07883a 	add	r3,r3,r12
    5360:	21c00e2e 	bgeu	r4,r7,539c <memset+0x100>
    5364:	1813883a 	mov	r9,r3
    5368:	3811883a 	mov	r8,r7
    536c:	010000c4 	movi	r4,3
    5370:	49800015 	stw	r6,0(r9)
    5374:	423fff04 	addi	r8,r8,-4
    5378:	4a400104 	addi	r9,r9,4
    537c:	223ffc36 	bltu	r4,r8,5370 <__alt_mem_Flash_flash_data+0xf4005370>
    5380:	393fff04 	addi	r4,r7,-4
    5384:	2008d0ba 	srli	r4,r4,2
    5388:	39c000cc 	andi	r7,r7,3
    538c:	21000044 	addi	r4,r4,1
    5390:	2109883a 	add	r4,r4,r4
    5394:	2109883a 	add	r4,r4,r4
    5398:	1907883a 	add	r3,r3,r4
    539c:	38000426 	beq	r7,zero,53b0 <memset+0x114>
    53a0:	19cf883a 	add	r7,r3,r7
    53a4:	19400005 	stb	r5,0(r3)
    53a8:	18c00044 	addi	r3,r3,1
    53ac:	19fffd1e 	bne	r3,r7,53a4 <__alt_mem_Flash_flash_data+0xf40053a4>
    53b0:	f800283a 	ret
    53b4:	2007883a 	mov	r3,r4
    53b8:	300f883a 	mov	r7,r6
    53bc:	003fc806 	br	52e0 <__alt_mem_Flash_flash_data+0xf40052e0>

000053c0 <__sread>:
    53c0:	defffe04 	addi	sp,sp,-8
    53c4:	dc000015 	stw	r16,0(sp)
    53c8:	2821883a 	mov	r16,r5
    53cc:	2940038f 	ldh	r5,14(r5)
    53d0:	dfc00115 	stw	ra,4(sp)
    53d4:	00057b80 	call	57b8 <_read_r>
    53d8:	10000716 	blt	r2,zero,53f8 <__sread+0x38>
    53dc:	80c01417 	ldw	r3,80(r16)
    53e0:	1887883a 	add	r3,r3,r2
    53e4:	80c01415 	stw	r3,80(r16)
    53e8:	dfc00117 	ldw	ra,4(sp)
    53ec:	dc000017 	ldw	r16,0(sp)
    53f0:	dec00204 	addi	sp,sp,8
    53f4:	f800283a 	ret
    53f8:	80c0030b 	ldhu	r3,12(r16)
    53fc:	18fbffcc 	andi	r3,r3,61439
    5400:	80c0030d 	sth	r3,12(r16)
    5404:	dfc00117 	ldw	ra,4(sp)
    5408:	dc000017 	ldw	r16,0(sp)
    540c:	dec00204 	addi	sp,sp,8
    5410:	f800283a 	ret

00005414 <__seofread>:
    5414:	0005883a 	mov	r2,zero
    5418:	f800283a 	ret

0000541c <__swrite>:
    541c:	2880030b 	ldhu	r2,12(r5)
    5420:	defffb04 	addi	sp,sp,-20
    5424:	dcc00315 	stw	r19,12(sp)
    5428:	dc800215 	stw	r18,8(sp)
    542c:	dc400115 	stw	r17,4(sp)
    5430:	dc000015 	stw	r16,0(sp)
    5434:	dfc00415 	stw	ra,16(sp)
    5438:	10c0400c 	andi	r3,r2,256
    543c:	2821883a 	mov	r16,r5
    5440:	2027883a 	mov	r19,r4
    5444:	3025883a 	mov	r18,r6
    5448:	3823883a 	mov	r17,r7
    544c:	18000526 	beq	r3,zero,5464 <__swrite+0x48>
    5450:	2940038f 	ldh	r5,14(r5)
    5454:	000d883a 	mov	r6,zero
    5458:	01c00084 	movi	r7,2
    545c:	000575c0 	call	575c <_lseek_r>
    5460:	8080030b 	ldhu	r2,12(r16)
    5464:	8140038f 	ldh	r5,14(r16)
    5468:	10bbffcc 	andi	r2,r2,61439
    546c:	9809883a 	mov	r4,r19
    5470:	900d883a 	mov	r6,r18
    5474:	880f883a 	mov	r7,r17
    5478:	8080030d 	sth	r2,12(r16)
    547c:	dfc00417 	ldw	ra,16(sp)
    5480:	dcc00317 	ldw	r19,12(sp)
    5484:	dc800217 	ldw	r18,8(sp)
    5488:	dc400117 	ldw	r17,4(sp)
    548c:	dc000017 	ldw	r16,0(sp)
    5490:	dec00504 	addi	sp,sp,20
    5494:	00054fc1 	jmpi	54fc <_write_r>

00005498 <__sseek>:
    5498:	defffe04 	addi	sp,sp,-8
    549c:	dc000015 	stw	r16,0(sp)
    54a0:	2821883a 	mov	r16,r5
    54a4:	2940038f 	ldh	r5,14(r5)
    54a8:	dfc00115 	stw	ra,4(sp)
    54ac:	000575c0 	call	575c <_lseek_r>
    54b0:	00ffffc4 	movi	r3,-1
    54b4:	10c00826 	beq	r2,r3,54d8 <__sseek+0x40>
    54b8:	80c0030b 	ldhu	r3,12(r16)
    54bc:	80801415 	stw	r2,80(r16)
    54c0:	18c40014 	ori	r3,r3,4096
    54c4:	80c0030d 	sth	r3,12(r16)
    54c8:	dfc00117 	ldw	ra,4(sp)
    54cc:	dc000017 	ldw	r16,0(sp)
    54d0:	dec00204 	addi	sp,sp,8
    54d4:	f800283a 	ret
    54d8:	80c0030b 	ldhu	r3,12(r16)
    54dc:	18fbffcc 	andi	r3,r3,61439
    54e0:	80c0030d 	sth	r3,12(r16)
    54e4:	dfc00117 	ldw	ra,4(sp)
    54e8:	dc000017 	ldw	r16,0(sp)
    54ec:	dec00204 	addi	sp,sp,8
    54f0:	f800283a 	ret

000054f4 <__sclose>:
    54f4:	2940038f 	ldh	r5,14(r5)
    54f8:	00055581 	jmpi	5558 <_close_r>

000054fc <_write_r>:
    54fc:	defffd04 	addi	sp,sp,-12
    5500:	dc000015 	stw	r16,0(sp)
    5504:	04000074 	movhi	r16,1
    5508:	dc400115 	stw	r17,4(sp)
    550c:	841bbd04 	addi	r16,r16,28404
    5510:	2023883a 	mov	r17,r4
    5514:	2809883a 	mov	r4,r5
    5518:	300b883a 	mov	r5,r6
    551c:	380d883a 	mov	r6,r7
    5520:	dfc00215 	stw	ra,8(sp)
    5524:	80000015 	stw	zero,0(r16)
    5528:	00062080 	call	6208 <write>
    552c:	00ffffc4 	movi	r3,-1
    5530:	10c00526 	beq	r2,r3,5548 <_write_r+0x4c>
    5534:	dfc00217 	ldw	ra,8(sp)
    5538:	dc400117 	ldw	r17,4(sp)
    553c:	dc000017 	ldw	r16,0(sp)
    5540:	dec00304 	addi	sp,sp,12
    5544:	f800283a 	ret
    5548:	80c00017 	ldw	r3,0(r16)
    554c:	183ff926 	beq	r3,zero,5534 <__alt_mem_Flash_flash_data+0xf4005534>
    5550:	88c00015 	stw	r3,0(r17)
    5554:	003ff706 	br	5534 <__alt_mem_Flash_flash_data+0xf4005534>

00005558 <_close_r>:
    5558:	defffd04 	addi	sp,sp,-12
    555c:	dc000015 	stw	r16,0(sp)
    5560:	04000074 	movhi	r16,1
    5564:	dc400115 	stw	r17,4(sp)
    5568:	841bbd04 	addi	r16,r16,28404
    556c:	2023883a 	mov	r17,r4
    5570:	2809883a 	mov	r4,r5
    5574:	dfc00215 	stw	ra,8(sp)
    5578:	80000015 	stw	zero,0(r16)
    557c:	00059900 	call	5990 <close>
    5580:	00ffffc4 	movi	r3,-1
    5584:	10c00526 	beq	r2,r3,559c <_close_r+0x44>
    5588:	dfc00217 	ldw	ra,8(sp)
    558c:	dc400117 	ldw	r17,4(sp)
    5590:	dc000017 	ldw	r16,0(sp)
    5594:	dec00304 	addi	sp,sp,12
    5598:	f800283a 	ret
    559c:	80c00017 	ldw	r3,0(r16)
    55a0:	183ff926 	beq	r3,zero,5588 <__alt_mem_Flash_flash_data+0xf4005588>
    55a4:	88c00015 	stw	r3,0(r17)
    55a8:	003ff706 	br	5588 <__alt_mem_Flash_flash_data+0xf4005588>

000055ac <_fclose_r>:
    55ac:	28003926 	beq	r5,zero,5694 <_fclose_r+0xe8>
    55b0:	defffc04 	addi	sp,sp,-16
    55b4:	dc400115 	stw	r17,4(sp)
    55b8:	dc000015 	stw	r16,0(sp)
    55bc:	dfc00315 	stw	ra,12(sp)
    55c0:	dc800215 	stw	r18,8(sp)
    55c4:	2023883a 	mov	r17,r4
    55c8:	2821883a 	mov	r16,r5
    55cc:	20000226 	beq	r4,zero,55d8 <_fclose_r+0x2c>
    55d0:	20800e17 	ldw	r2,56(r4)
    55d4:	10002726 	beq	r2,zero,5674 <_fclose_r+0xc8>
    55d8:	8080030f 	ldh	r2,12(r16)
    55dc:	1000071e 	bne	r2,zero,55fc <_fclose_r+0x50>
    55e0:	0005883a 	mov	r2,zero
    55e4:	dfc00317 	ldw	ra,12(sp)
    55e8:	dc800217 	ldw	r18,8(sp)
    55ec:	dc400117 	ldw	r17,4(sp)
    55f0:	dc000017 	ldw	r16,0(sp)
    55f4:	dec00404 	addi	sp,sp,16
    55f8:	f800283a 	ret
    55fc:	8809883a 	mov	r4,r17
    5600:	800b883a 	mov	r5,r16
    5604:	00045140 	call	4514 <__sflush_r>
    5608:	1025883a 	mov	r18,r2
    560c:	80800b17 	ldw	r2,44(r16)
    5610:	10000426 	beq	r2,zero,5624 <_fclose_r+0x78>
    5614:	81400717 	ldw	r5,28(r16)
    5618:	8809883a 	mov	r4,r17
    561c:	103ee83a 	callr	r2
    5620:	10001616 	blt	r2,zero,567c <_fclose_r+0xd0>
    5624:	8080030b 	ldhu	r2,12(r16)
    5628:	1080200c 	andi	r2,r2,128
    562c:	1000151e 	bne	r2,zero,5684 <_fclose_r+0xd8>
    5630:	81400c17 	ldw	r5,48(r16)
    5634:	28000526 	beq	r5,zero,564c <_fclose_r+0xa0>
    5638:	80801004 	addi	r2,r16,64
    563c:	28800226 	beq	r5,r2,5648 <_fclose_r+0x9c>
    5640:	8809883a 	mov	r4,r17
    5644:	0004c6c0 	call	4c6c <_free_r>
    5648:	80000c15 	stw	zero,48(r16)
    564c:	81401117 	ldw	r5,68(r16)
    5650:	28000326 	beq	r5,zero,5660 <_fclose_r+0xb4>
    5654:	8809883a 	mov	r4,r17
    5658:	0004c6c0 	call	4c6c <_free_r>
    565c:	80001115 	stw	zero,68(r16)
    5660:	0004b080 	call	4b08 <__sfp_lock_acquire>
    5664:	8000030d 	sth	zero,12(r16)
    5668:	0004b0c0 	call	4b0c <__sfp_lock_release>
    566c:	9005883a 	mov	r2,r18
    5670:	003fdc06 	br	55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    5674:	0004af80 	call	4af8 <__sinit>
    5678:	003fd706 	br	55d8 <__alt_mem_Flash_flash_data+0xf40055d8>
    567c:	04bfffc4 	movi	r18,-1
    5680:	003fe806 	br	5624 <__alt_mem_Flash_flash_data+0xf4005624>
    5684:	81400417 	ldw	r5,16(r16)
    5688:	8809883a 	mov	r4,r17
    568c:	0004c6c0 	call	4c6c <_free_r>
    5690:	003fe706 	br	5630 <__alt_mem_Flash_flash_data+0xf4005630>
    5694:	0005883a 	mov	r2,zero
    5698:	f800283a 	ret

0000569c <fclose>:
    569c:	00800074 	movhi	r2,1
    56a0:	1093c104 	addi	r2,r2,20228
    56a4:	200b883a 	mov	r5,r4
    56a8:	11000017 	ldw	r4,0(r2)
    56ac:	00055ac1 	jmpi	55ac <_fclose_r>

000056b0 <_fstat_r>:
    56b0:	defffd04 	addi	sp,sp,-12
    56b4:	dc000015 	stw	r16,0(sp)
    56b8:	04000074 	movhi	r16,1
    56bc:	dc400115 	stw	r17,4(sp)
    56c0:	841bbd04 	addi	r16,r16,28404
    56c4:	2023883a 	mov	r17,r4
    56c8:	2809883a 	mov	r4,r5
    56cc:	300b883a 	mov	r5,r6
    56d0:	dfc00215 	stw	ra,8(sp)
    56d4:	80000015 	stw	zero,0(r16)
    56d8:	0005adc0 	call	5adc <fstat>
    56dc:	00ffffc4 	movi	r3,-1
    56e0:	10c00526 	beq	r2,r3,56f8 <_fstat_r+0x48>
    56e4:	dfc00217 	ldw	ra,8(sp)
    56e8:	dc400117 	ldw	r17,4(sp)
    56ec:	dc000017 	ldw	r16,0(sp)
    56f0:	dec00304 	addi	sp,sp,12
    56f4:	f800283a 	ret
    56f8:	80c00017 	ldw	r3,0(r16)
    56fc:	183ff926 	beq	r3,zero,56e4 <__alt_mem_Flash_flash_data+0xf40056e4>
    5700:	88c00015 	stw	r3,0(r17)
    5704:	003ff706 	br	56e4 <__alt_mem_Flash_flash_data+0xf40056e4>

00005708 <_isatty_r>:
    5708:	defffd04 	addi	sp,sp,-12
    570c:	dc000015 	stw	r16,0(sp)
    5710:	04000074 	movhi	r16,1
    5714:	dc400115 	stw	r17,4(sp)
    5718:	841bbd04 	addi	r16,r16,28404
    571c:	2023883a 	mov	r17,r4
    5720:	2809883a 	mov	r4,r5
    5724:	dfc00215 	stw	ra,8(sp)
    5728:	80000015 	stw	zero,0(r16)
    572c:	0005bdc0 	call	5bdc <isatty>
    5730:	00ffffc4 	movi	r3,-1
    5734:	10c00526 	beq	r2,r3,574c <_isatty_r+0x44>
    5738:	dfc00217 	ldw	ra,8(sp)
    573c:	dc400117 	ldw	r17,4(sp)
    5740:	dc000017 	ldw	r16,0(sp)
    5744:	dec00304 	addi	sp,sp,12
    5748:	f800283a 	ret
    574c:	80c00017 	ldw	r3,0(r16)
    5750:	183ff926 	beq	r3,zero,5738 <__alt_mem_Flash_flash_data+0xf4005738>
    5754:	88c00015 	stw	r3,0(r17)
    5758:	003ff706 	br	5738 <__alt_mem_Flash_flash_data+0xf4005738>

0000575c <_lseek_r>:
    575c:	defffd04 	addi	sp,sp,-12
    5760:	dc000015 	stw	r16,0(sp)
    5764:	04000074 	movhi	r16,1
    5768:	dc400115 	stw	r17,4(sp)
    576c:	841bbd04 	addi	r16,r16,28404
    5770:	2023883a 	mov	r17,r4
    5774:	2809883a 	mov	r4,r5
    5778:	300b883a 	mov	r5,r6
    577c:	380d883a 	mov	r6,r7
    5780:	dfc00215 	stw	ra,8(sp)
    5784:	80000015 	stw	zero,0(r16)
    5788:	0005db40 	call	5db4 <lseek>
    578c:	00ffffc4 	movi	r3,-1
    5790:	10c00526 	beq	r2,r3,57a8 <_lseek_r+0x4c>
    5794:	dfc00217 	ldw	ra,8(sp)
    5798:	dc400117 	ldw	r17,4(sp)
    579c:	dc000017 	ldw	r16,0(sp)
    57a0:	dec00304 	addi	sp,sp,12
    57a4:	f800283a 	ret
    57a8:	80c00017 	ldw	r3,0(r16)
    57ac:	183ff926 	beq	r3,zero,5794 <__alt_mem_Flash_flash_data+0xf4005794>
    57b0:	88c00015 	stw	r3,0(r17)
    57b4:	003ff706 	br	5794 <__alt_mem_Flash_flash_data+0xf4005794>

000057b8 <_read_r>:
    57b8:	defffd04 	addi	sp,sp,-12
    57bc:	dc000015 	stw	r16,0(sp)
    57c0:	04000074 	movhi	r16,1
    57c4:	dc400115 	stw	r17,4(sp)
    57c8:	841bbd04 	addi	r16,r16,28404
    57cc:	2023883a 	mov	r17,r4
    57d0:	2809883a 	mov	r4,r5
    57d4:	300b883a 	mov	r5,r6
    57d8:	380d883a 	mov	r6,r7
    57dc:	dfc00215 	stw	ra,8(sp)
    57e0:	80000015 	stw	zero,0(r16)
    57e4:	0005fac0 	call	5fac <read>
    57e8:	00ffffc4 	movi	r3,-1
    57ec:	10c00526 	beq	r2,r3,5804 <_read_r+0x4c>
    57f0:	dfc00217 	ldw	ra,8(sp)
    57f4:	dc400117 	ldw	r17,4(sp)
    57f8:	dc000017 	ldw	r16,0(sp)
    57fc:	dec00304 	addi	sp,sp,12
    5800:	f800283a 	ret
    5804:	80c00017 	ldw	r3,0(r16)
    5808:	183ff926 	beq	r3,zero,57f0 <__alt_mem_Flash_flash_data+0xf40057f0>
    580c:	88c00015 	stw	r3,0(r17)
    5810:	003ff706 	br	57f0 <__alt_mem_Flash_flash_data+0xf40057f0>

00005814 <udivmodsi4>:
    5814:	2900182e 	bgeu	r5,r4,5878 <udivmodsi4+0x64>
    5818:	28001716 	blt	r5,zero,5878 <udivmodsi4+0x64>
    581c:	00800804 	movi	r2,32
    5820:	00c00044 	movi	r3,1
    5824:	00000206 	br	5830 <udivmodsi4+0x1c>
    5828:	10001126 	beq	r2,zero,5870 <udivmodsi4+0x5c>
    582c:	28000516 	blt	r5,zero,5844 <udivmodsi4+0x30>
    5830:	294b883a 	add	r5,r5,r5
    5834:	10bfffc4 	addi	r2,r2,-1
    5838:	18c7883a 	add	r3,r3,r3
    583c:	293ffa36 	bltu	r5,r4,5828 <__alt_mem_Flash_flash_data+0xf4005828>
    5840:	18000b26 	beq	r3,zero,5870 <udivmodsi4+0x5c>
    5844:	0005883a 	mov	r2,zero
    5848:	21400236 	bltu	r4,r5,5854 <udivmodsi4+0x40>
    584c:	2149c83a 	sub	r4,r4,r5
    5850:	10c4b03a 	or	r2,r2,r3
    5854:	1806d07a 	srli	r3,r3,1
    5858:	280ad07a 	srli	r5,r5,1
    585c:	183ffa1e 	bne	r3,zero,5848 <__alt_mem_Flash_flash_data+0xf4005848>
    5860:	3000011e 	bne	r6,zero,5868 <udivmodsi4+0x54>
    5864:	f800283a 	ret
    5868:	2005883a 	mov	r2,r4
    586c:	f800283a 	ret
    5870:	0005883a 	mov	r2,zero
    5874:	003ffa06 	br	5860 <__alt_mem_Flash_flash_data+0xf4005860>
    5878:	00c00044 	movi	r3,1
    587c:	003ff106 	br	5844 <__alt_mem_Flash_flash_data+0xf4005844>

00005880 <__divsi3>:
    5880:	defffe04 	addi	sp,sp,-8
    5884:	dfc00115 	stw	ra,4(sp)
    5888:	dc000015 	stw	r16,0(sp)
    588c:	20000b16 	blt	r4,zero,58bc <__divsi3+0x3c>
    5890:	0021883a 	mov	r16,zero
    5894:	28000c16 	blt	r5,zero,58c8 <__divsi3+0x48>
    5898:	000d883a 	mov	r6,zero
    589c:	00058140 	call	5814 <udivmodsi4>
    58a0:	0407c83a 	sub	r3,zero,r16
    58a4:	1884f03a 	xor	r2,r3,r2
    58a8:	1405883a 	add	r2,r2,r16
    58ac:	dfc00117 	ldw	ra,4(sp)
    58b0:	dc000017 	ldw	r16,0(sp)
    58b4:	dec00204 	addi	sp,sp,8
    58b8:	f800283a 	ret
    58bc:	0109c83a 	sub	r4,zero,r4
    58c0:	04000044 	movi	r16,1
    58c4:	283ff40e 	bge	r5,zero,5898 <__alt_mem_Flash_flash_data+0xf4005898>
    58c8:	014bc83a 	sub	r5,zero,r5
    58cc:	8400005c 	xori	r16,r16,1
    58d0:	003ff106 	br	5898 <__alt_mem_Flash_flash_data+0xf4005898>

000058d4 <__modsi3>:
    58d4:	defffd04 	addi	sp,sp,-12
    58d8:	dfc00215 	stw	ra,8(sp)
    58dc:	dc400115 	stw	r17,4(sp)
    58e0:	dc000015 	stw	r16,0(sp)
    58e4:	20000c16 	blt	r4,zero,5918 <__modsi3+0x44>
    58e8:	0023883a 	mov	r17,zero
    58ec:	0021883a 	mov	r16,zero
    58f0:	28000d16 	blt	r5,zero,5928 <__modsi3+0x54>
    58f4:	01800044 	movi	r6,1
    58f8:	00058140 	call	5814 <udivmodsi4>
    58fc:	1404f03a 	xor	r2,r2,r16
    5900:	8885883a 	add	r2,r17,r2
    5904:	dfc00217 	ldw	ra,8(sp)
    5908:	dc400117 	ldw	r17,4(sp)
    590c:	dc000017 	ldw	r16,0(sp)
    5910:	dec00304 	addi	sp,sp,12
    5914:	f800283a 	ret
    5918:	0109c83a 	sub	r4,zero,r4
    591c:	04400044 	movi	r17,1
    5920:	043fffc4 	movi	r16,-1
    5924:	283ff30e 	bge	r5,zero,58f4 <__alt_mem_Flash_flash_data+0xf40058f4>
    5928:	014bc83a 	sub	r5,zero,r5
    592c:	003ff106 	br	58f4 <__alt_mem_Flash_flash_data+0xf40058f4>

00005930 <__udivsi3>:
    5930:	000d883a 	mov	r6,zero
    5934:	00058141 	jmpi	5814 <udivmodsi4>

00005938 <__umodsi3>:
    5938:	01800044 	movi	r6,1
    593c:	00058141 	jmpi	5814 <udivmodsi4>

00005940 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5940:	defffe04 	addi	sp,sp,-8
    5944:	dfc00115 	stw	ra,4(sp)
    5948:	df000015 	stw	fp,0(sp)
    594c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5950:	00800074 	movhi	r2,1
    5954:	1093c904 	addi	r2,r2,20260
    5958:	10800017 	ldw	r2,0(r2)
    595c:	10000526 	beq	r2,zero,5974 <alt_get_errno+0x34>
    5960:	00800074 	movhi	r2,1
    5964:	1093c904 	addi	r2,r2,20260
    5968:	10800017 	ldw	r2,0(r2)
    596c:	103ee83a 	callr	r2
    5970:	00000206 	br	597c <alt_get_errno+0x3c>
    5974:	00800074 	movhi	r2,1
    5978:	109bbd04 	addi	r2,r2,28404
}
    597c:	e037883a 	mov	sp,fp
    5980:	dfc00117 	ldw	ra,4(sp)
    5984:	df000017 	ldw	fp,0(sp)
    5988:	dec00204 	addi	sp,sp,8
    598c:	f800283a 	ret

00005990 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    5990:	defffb04 	addi	sp,sp,-20
    5994:	dfc00415 	stw	ra,16(sp)
    5998:	df000315 	stw	fp,12(sp)
    599c:	df000304 	addi	fp,sp,12
    59a0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    59a4:	e0bfff17 	ldw	r2,-4(fp)
    59a8:	10000616 	blt	r2,zero,59c4 <close+0x34>
    59ac:	e0bfff17 	ldw	r2,-4(fp)
    59b0:	10c00324 	muli	r3,r2,12
    59b4:	00800074 	movhi	r2,1
    59b8:	108e5804 	addi	r2,r2,14688
    59bc:	1885883a 	add	r2,r3,r2
    59c0:	00000106 	br	59c8 <close+0x38>
    59c4:	0005883a 	mov	r2,zero
    59c8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    59cc:	e0bffd17 	ldw	r2,-12(fp)
    59d0:	10001926 	beq	r2,zero,5a38 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    59d4:	e0bffd17 	ldw	r2,-12(fp)
    59d8:	10800017 	ldw	r2,0(r2)
    59dc:	10800417 	ldw	r2,16(r2)
    59e0:	10000626 	beq	r2,zero,59fc <close+0x6c>
    59e4:	e0bffd17 	ldw	r2,-12(fp)
    59e8:	10800017 	ldw	r2,0(r2)
    59ec:	10800417 	ldw	r2,16(r2)
    59f0:	e13ffd17 	ldw	r4,-12(fp)
    59f4:	103ee83a 	callr	r2
    59f8:	00000106 	br	5a00 <close+0x70>
    59fc:	0005883a 	mov	r2,zero
    5a00:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    5a04:	e13fff17 	ldw	r4,-4(fp)
    5a08:	00060a80 	call	60a8 <alt_release_fd>
    if (rval < 0)
    5a0c:	e0bffe17 	ldw	r2,-8(fp)
    5a10:	1000070e 	bge	r2,zero,5a30 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    5a14:	00059400 	call	5940 <alt_get_errno>
    5a18:	1007883a 	mov	r3,r2
    5a1c:	e0bffe17 	ldw	r2,-8(fp)
    5a20:	0085c83a 	sub	r2,zero,r2
    5a24:	18800015 	stw	r2,0(r3)
      return -1;
    5a28:	00bfffc4 	movi	r2,-1
    5a2c:	00000706 	br	5a4c <close+0xbc>
    }
    return 0;
    5a30:	0005883a 	mov	r2,zero
    5a34:	00000506 	br	5a4c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5a38:	00059400 	call	5940 <alt_get_errno>
    5a3c:	1007883a 	mov	r3,r2
    5a40:	00801444 	movi	r2,81
    5a44:	18800015 	stw	r2,0(r3)
    return -1;
    5a48:	00bfffc4 	movi	r2,-1
  }
}
    5a4c:	e037883a 	mov	sp,fp
    5a50:	dfc00117 	ldw	ra,4(sp)
    5a54:	df000017 	ldw	fp,0(sp)
    5a58:	dec00204 	addi	sp,sp,8
    5a5c:	f800283a 	ret

00005a60 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    5a60:	defffc04 	addi	sp,sp,-16
    5a64:	df000315 	stw	fp,12(sp)
    5a68:	df000304 	addi	fp,sp,12
    5a6c:	e13ffd15 	stw	r4,-12(fp)
    5a70:	e17ffe15 	stw	r5,-8(fp)
    5a74:	e1bfff15 	stw	r6,-4(fp)
  return len;
    5a78:	e0bfff17 	ldw	r2,-4(fp)
}
    5a7c:	e037883a 	mov	sp,fp
    5a80:	df000017 	ldw	fp,0(sp)
    5a84:	dec00104 	addi	sp,sp,4
    5a88:	f800283a 	ret

00005a8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5a8c:	defffe04 	addi	sp,sp,-8
    5a90:	dfc00115 	stw	ra,4(sp)
    5a94:	df000015 	stw	fp,0(sp)
    5a98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5a9c:	00800074 	movhi	r2,1
    5aa0:	1093c904 	addi	r2,r2,20260
    5aa4:	10800017 	ldw	r2,0(r2)
    5aa8:	10000526 	beq	r2,zero,5ac0 <alt_get_errno+0x34>
    5aac:	00800074 	movhi	r2,1
    5ab0:	1093c904 	addi	r2,r2,20260
    5ab4:	10800017 	ldw	r2,0(r2)
    5ab8:	103ee83a 	callr	r2
    5abc:	00000206 	br	5ac8 <alt_get_errno+0x3c>
    5ac0:	00800074 	movhi	r2,1
    5ac4:	109bbd04 	addi	r2,r2,28404
}
    5ac8:	e037883a 	mov	sp,fp
    5acc:	dfc00117 	ldw	ra,4(sp)
    5ad0:	df000017 	ldw	fp,0(sp)
    5ad4:	dec00204 	addi	sp,sp,8
    5ad8:	f800283a 	ret

00005adc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    5adc:	defffb04 	addi	sp,sp,-20
    5ae0:	dfc00415 	stw	ra,16(sp)
    5ae4:	df000315 	stw	fp,12(sp)
    5ae8:	df000304 	addi	fp,sp,12
    5aec:	e13ffe15 	stw	r4,-8(fp)
    5af0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5af4:	e0bffe17 	ldw	r2,-8(fp)
    5af8:	10000616 	blt	r2,zero,5b14 <fstat+0x38>
    5afc:	e0bffe17 	ldw	r2,-8(fp)
    5b00:	10c00324 	muli	r3,r2,12
    5b04:	00800074 	movhi	r2,1
    5b08:	108e5804 	addi	r2,r2,14688
    5b0c:	1885883a 	add	r2,r3,r2
    5b10:	00000106 	br	5b18 <fstat+0x3c>
    5b14:	0005883a 	mov	r2,zero
    5b18:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    5b1c:	e0bffd17 	ldw	r2,-12(fp)
    5b20:	10001026 	beq	r2,zero,5b64 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    5b24:	e0bffd17 	ldw	r2,-12(fp)
    5b28:	10800017 	ldw	r2,0(r2)
    5b2c:	10800817 	ldw	r2,32(r2)
    5b30:	10000726 	beq	r2,zero,5b50 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    5b34:	e0bffd17 	ldw	r2,-12(fp)
    5b38:	10800017 	ldw	r2,0(r2)
    5b3c:	10800817 	ldw	r2,32(r2)
    5b40:	e13ffd17 	ldw	r4,-12(fp)
    5b44:	e17fff17 	ldw	r5,-4(fp)
    5b48:	103ee83a 	callr	r2
    5b4c:	00000a06 	br	5b78 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    5b50:	e0bfff17 	ldw	r2,-4(fp)
    5b54:	00c80004 	movi	r3,8192
    5b58:	10c00115 	stw	r3,4(r2)
      return 0;
    5b5c:	0005883a 	mov	r2,zero
    5b60:	00000506 	br	5b78 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5b64:	0005a8c0 	call	5a8c <alt_get_errno>
    5b68:	1007883a 	mov	r3,r2
    5b6c:	00801444 	movi	r2,81
    5b70:	18800015 	stw	r2,0(r3)
    return -1;
    5b74:	00bfffc4 	movi	r2,-1
  }
}
    5b78:	e037883a 	mov	sp,fp
    5b7c:	dfc00117 	ldw	ra,4(sp)
    5b80:	df000017 	ldw	fp,0(sp)
    5b84:	dec00204 	addi	sp,sp,8
    5b88:	f800283a 	ret

00005b8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5b8c:	defffe04 	addi	sp,sp,-8
    5b90:	dfc00115 	stw	ra,4(sp)
    5b94:	df000015 	stw	fp,0(sp)
    5b98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5b9c:	00800074 	movhi	r2,1
    5ba0:	1093c904 	addi	r2,r2,20260
    5ba4:	10800017 	ldw	r2,0(r2)
    5ba8:	10000526 	beq	r2,zero,5bc0 <alt_get_errno+0x34>
    5bac:	00800074 	movhi	r2,1
    5bb0:	1093c904 	addi	r2,r2,20260
    5bb4:	10800017 	ldw	r2,0(r2)
    5bb8:	103ee83a 	callr	r2
    5bbc:	00000206 	br	5bc8 <alt_get_errno+0x3c>
    5bc0:	00800074 	movhi	r2,1
    5bc4:	109bbd04 	addi	r2,r2,28404
}
    5bc8:	e037883a 	mov	sp,fp
    5bcc:	dfc00117 	ldw	ra,4(sp)
    5bd0:	df000017 	ldw	fp,0(sp)
    5bd4:	dec00204 	addi	sp,sp,8
    5bd8:	f800283a 	ret

00005bdc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    5bdc:	deffed04 	addi	sp,sp,-76
    5be0:	dfc01215 	stw	ra,72(sp)
    5be4:	df001115 	stw	fp,68(sp)
    5be8:	df001104 	addi	fp,sp,68
    5bec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5bf0:	e0bfff17 	ldw	r2,-4(fp)
    5bf4:	10000616 	blt	r2,zero,5c10 <isatty+0x34>
    5bf8:	e0bfff17 	ldw	r2,-4(fp)
    5bfc:	10c00324 	muli	r3,r2,12
    5c00:	00800074 	movhi	r2,1
    5c04:	108e5804 	addi	r2,r2,14688
    5c08:	1885883a 	add	r2,r3,r2
    5c0c:	00000106 	br	5c14 <isatty+0x38>
    5c10:	0005883a 	mov	r2,zero
    5c14:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    5c18:	e0bfef17 	ldw	r2,-68(fp)
    5c1c:	10000e26 	beq	r2,zero,5c58 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    5c20:	e0bfef17 	ldw	r2,-68(fp)
    5c24:	10800017 	ldw	r2,0(r2)
    5c28:	10800817 	ldw	r2,32(r2)
    5c2c:	1000021e 	bne	r2,zero,5c38 <isatty+0x5c>
    {
      return 1;
    5c30:	00800044 	movi	r2,1
    5c34:	00000d06 	br	5c6c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    5c38:	e0bff004 	addi	r2,fp,-64
    5c3c:	e13fff17 	ldw	r4,-4(fp)
    5c40:	100b883a 	mov	r5,r2
    5c44:	0005adc0 	call	5adc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    5c48:	e0bff117 	ldw	r2,-60(fp)
    5c4c:	10880020 	cmpeqi	r2,r2,8192
    5c50:	10803fcc 	andi	r2,r2,255
    5c54:	00000506 	br	5c6c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5c58:	0005b8c0 	call	5b8c <alt_get_errno>
    5c5c:	1007883a 	mov	r3,r2
    5c60:	00801444 	movi	r2,81
    5c64:	18800015 	stw	r2,0(r3)
    return 0;
    5c68:	0005883a 	mov	r2,zero
  }
}
    5c6c:	e037883a 	mov	sp,fp
    5c70:	dfc00117 	ldw	ra,4(sp)
    5c74:	df000017 	ldw	fp,0(sp)
    5c78:	dec00204 	addi	sp,sp,8
    5c7c:	f800283a 	ret

00005c80 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    5c80:	defffc04 	addi	sp,sp,-16
    5c84:	df000315 	stw	fp,12(sp)
    5c88:	df000304 	addi	fp,sp,12
    5c8c:	e13ffd15 	stw	r4,-12(fp)
    5c90:	e17ffe15 	stw	r5,-8(fp)
    5c94:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    5c98:	e0fffe17 	ldw	r3,-8(fp)
    5c9c:	e0bffd17 	ldw	r2,-12(fp)
    5ca0:	18800c26 	beq	r3,r2,5cd4 <alt_load_section+0x54>
  {
    while( to != end )
    5ca4:	00000806 	br	5cc8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    5ca8:	e0bffe17 	ldw	r2,-8(fp)
    5cac:	10c00104 	addi	r3,r2,4
    5cb0:	e0fffe15 	stw	r3,-8(fp)
    5cb4:	e0fffd17 	ldw	r3,-12(fp)
    5cb8:	19000104 	addi	r4,r3,4
    5cbc:	e13ffd15 	stw	r4,-12(fp)
    5cc0:	18c00017 	ldw	r3,0(r3)
    5cc4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    5cc8:	e0fffe17 	ldw	r3,-8(fp)
    5ccc:	e0bfff17 	ldw	r2,-4(fp)
    5cd0:	18bff51e 	bne	r3,r2,5ca8 <__alt_mem_Flash_flash_data+0xf4005ca8>
    {
      *to++ = *from++;
    }
  }
}
    5cd4:	e037883a 	mov	sp,fp
    5cd8:	df000017 	ldw	fp,0(sp)
    5cdc:	dec00104 	addi	sp,sp,4
    5ce0:	f800283a 	ret

00005ce4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    5ce4:	defffe04 	addi	sp,sp,-8
    5ce8:	dfc00115 	stw	ra,4(sp)
    5cec:	df000015 	stw	fp,0(sp)
    5cf0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    5cf4:	01000074 	movhi	r4,1
    5cf8:	2113ed04 	addi	r4,r4,20404
    5cfc:	01400074 	movhi	r5,1
    5d00:	294c3904 	addi	r5,r5,12516
    5d04:	01800074 	movhi	r6,1
    5d08:	3193ed04 	addi	r6,r6,20404
    5d0c:	0005c800 	call	5c80 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    5d10:	01000034 	movhi	r4,0
    5d14:	21000804 	addi	r4,r4,32
    5d18:	01400034 	movhi	r5,0
    5d1c:	29400804 	addi	r5,r5,32
    5d20:	01800034 	movhi	r6,0
    5d24:	31809104 	addi	r6,r6,580
    5d28:	0005c800 	call	5c80 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    5d2c:	01000074 	movhi	r4,1
    5d30:	210afa04 	addi	r4,r4,11240
    5d34:	01400074 	movhi	r5,1
    5d38:	294afa04 	addi	r5,r5,11240
    5d3c:	01800074 	movhi	r6,1
    5d40:	318c3904 	addi	r6,r6,12516
    5d44:	0005c800 	call	5c80 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    5d48:	001178c0 	call	1178c <alt_dcache_flush_all>
  alt_icache_flush_all();
    5d4c:	00119e40 	call	119e4 <alt_icache_flush_all>
}
    5d50:	e037883a 	mov	sp,fp
    5d54:	dfc00117 	ldw	ra,4(sp)
    5d58:	df000017 	ldw	fp,0(sp)
    5d5c:	dec00204 	addi	sp,sp,8
    5d60:	f800283a 	ret

00005d64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5d64:	defffe04 	addi	sp,sp,-8
    5d68:	dfc00115 	stw	ra,4(sp)
    5d6c:	df000015 	stw	fp,0(sp)
    5d70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5d74:	00800074 	movhi	r2,1
    5d78:	1093c904 	addi	r2,r2,20260
    5d7c:	10800017 	ldw	r2,0(r2)
    5d80:	10000526 	beq	r2,zero,5d98 <alt_get_errno+0x34>
    5d84:	00800074 	movhi	r2,1
    5d88:	1093c904 	addi	r2,r2,20260
    5d8c:	10800017 	ldw	r2,0(r2)
    5d90:	103ee83a 	callr	r2
    5d94:	00000206 	br	5da0 <alt_get_errno+0x3c>
    5d98:	00800074 	movhi	r2,1
    5d9c:	109bbd04 	addi	r2,r2,28404
}
    5da0:	e037883a 	mov	sp,fp
    5da4:	dfc00117 	ldw	ra,4(sp)
    5da8:	df000017 	ldw	fp,0(sp)
    5dac:	dec00204 	addi	sp,sp,8
    5db0:	f800283a 	ret

00005db4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    5db4:	defff904 	addi	sp,sp,-28
    5db8:	dfc00615 	stw	ra,24(sp)
    5dbc:	df000515 	stw	fp,20(sp)
    5dc0:	df000504 	addi	fp,sp,20
    5dc4:	e13ffd15 	stw	r4,-12(fp)
    5dc8:	e17ffe15 	stw	r5,-8(fp)
    5dcc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    5dd0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5dd4:	e0bffd17 	ldw	r2,-12(fp)
    5dd8:	10000616 	blt	r2,zero,5df4 <lseek+0x40>
    5ddc:	e0bffd17 	ldw	r2,-12(fp)
    5de0:	10c00324 	muli	r3,r2,12
    5de4:	00800074 	movhi	r2,1
    5de8:	108e5804 	addi	r2,r2,14688
    5dec:	1885883a 	add	r2,r3,r2
    5df0:	00000106 	br	5df8 <lseek+0x44>
    5df4:	0005883a 	mov	r2,zero
    5df8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    5dfc:	e0bffc17 	ldw	r2,-16(fp)
    5e00:	10001026 	beq	r2,zero,5e44 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    5e04:	e0bffc17 	ldw	r2,-16(fp)
    5e08:	10800017 	ldw	r2,0(r2)
    5e0c:	10800717 	ldw	r2,28(r2)
    5e10:	10000926 	beq	r2,zero,5e38 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    5e14:	e0bffc17 	ldw	r2,-16(fp)
    5e18:	10800017 	ldw	r2,0(r2)
    5e1c:	10800717 	ldw	r2,28(r2)
    5e20:	e13ffc17 	ldw	r4,-16(fp)
    5e24:	e17ffe17 	ldw	r5,-8(fp)
    5e28:	e1bfff17 	ldw	r6,-4(fp)
    5e2c:	103ee83a 	callr	r2
    5e30:	e0bffb15 	stw	r2,-20(fp)
    5e34:	00000506 	br	5e4c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    5e38:	00bfde84 	movi	r2,-134
    5e3c:	e0bffb15 	stw	r2,-20(fp)
    5e40:	00000206 	br	5e4c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    5e44:	00bfebc4 	movi	r2,-81
    5e48:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    5e4c:	e0bffb17 	ldw	r2,-20(fp)
    5e50:	1000070e 	bge	r2,zero,5e70 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    5e54:	0005d640 	call	5d64 <alt_get_errno>
    5e58:	1007883a 	mov	r3,r2
    5e5c:	e0bffb17 	ldw	r2,-20(fp)
    5e60:	0085c83a 	sub	r2,zero,r2
    5e64:	18800015 	stw	r2,0(r3)
    rc = -1;
    5e68:	00bfffc4 	movi	r2,-1
    5e6c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    5e70:	e0bffb17 	ldw	r2,-20(fp)
}
    5e74:	e037883a 	mov	sp,fp
    5e78:	dfc00117 	ldw	ra,4(sp)
    5e7c:	df000017 	ldw	fp,0(sp)
    5e80:	dec00204 	addi	sp,sp,8
    5e84:	f800283a 	ret

00005e88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5e88:	defff904 	addi	sp,sp,-28
    5e8c:	dfc00615 	stw	ra,24(sp)
    5e90:	df000515 	stw	fp,20(sp)
    5e94:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5e98:	0009883a 	mov	r4,zero
    5e9c:	000ee5c0 	call	ee5c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    5ea0:	0006e780 	call	6e78 <OSInit>
    5ea4:	01000044 	movi	r4,1
    5ea8:	000c5700 	call	c570 <OSSemCreate>
    5eac:	1007883a 	mov	r3,r2
    5eb0:	00800074 	movhi	r2,1
    5eb4:	109bc304 	addi	r2,r2,28428
    5eb8:	10c00015 	stw	r3,0(r2)
    5ebc:	01000044 	movi	r4,1
    5ec0:	000c5700 	call	c570 <OSSemCreate>
    5ec4:	1007883a 	mov	r3,r2
    5ec8:	00800074 	movhi	r2,1
    5ecc:	109bc504 	addi	r2,r2,28436
    5ed0:	10c00015 	stw	r3,0(r2)
    5ed4:	00800074 	movhi	r2,1
    5ed8:	109bbe04 	addi	r2,r2,28408
    5edc:	e0bffc15 	stw	r2,-16(fp)
    5ee0:	00800044 	movi	r2,1
    5ee4:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    5ee8:	e0bffd0b 	ldhu	r2,-12(fp)
    5eec:	1009883a 	mov	r4,r2
    5ef0:	000c5700 	call	c570 <OSSemCreate>
    5ef4:	1007883a 	mov	r3,r2
    5ef8:	e0bffc17 	ldw	r2,-16(fp)
    5efc:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    5f00:	000ee900 	call	ee90 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    5f04:	01000074 	movhi	r4,1
    5f08:	210b8104 	addi	r4,r4,11780
    5f0c:	01400074 	movhi	r5,1
    5f10:	294b8104 	addi	r5,r5,11780
    5f14:	01800074 	movhi	r6,1
    5f18:	318b8104 	addi	r6,r6,11780
    5f1c:	0011ad40 	call	11ad4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    5f20:	001189c0 	call	1189c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    5f24:	01000074 	movhi	r4,1
    5f28:	21063e04 	addi	r4,r4,6392
    5f2c:	00127980 	call	12798 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    5f30:	d1280b17 	ldw	r4,-24532(gp)
    5f34:	d0e80c17 	ldw	r3,-24528(gp)
    5f38:	d0a80d17 	ldw	r2,-24524(gp)
    5f3c:	180b883a 	mov	r5,r3
    5f40:	100d883a 	mov	r6,r2
    5f44:	00021800 	call	2180 <main>
    5f48:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    5f4c:	01000044 	movi	r4,1
    5f50:	00059900 	call	5990 <close>
  exit (result);
    5f54:	e13ffb17 	ldw	r4,-20(fp)
    5f58:	00127ac0 	call	127ac <exit>

00005f5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5f5c:	defffe04 	addi	sp,sp,-8
    5f60:	dfc00115 	stw	ra,4(sp)
    5f64:	df000015 	stw	fp,0(sp)
    5f68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5f6c:	00800074 	movhi	r2,1
    5f70:	1093c904 	addi	r2,r2,20260
    5f74:	10800017 	ldw	r2,0(r2)
    5f78:	10000526 	beq	r2,zero,5f90 <alt_get_errno+0x34>
    5f7c:	00800074 	movhi	r2,1
    5f80:	1093c904 	addi	r2,r2,20260
    5f84:	10800017 	ldw	r2,0(r2)
    5f88:	103ee83a 	callr	r2
    5f8c:	00000206 	br	5f98 <alt_get_errno+0x3c>
    5f90:	00800074 	movhi	r2,1
    5f94:	109bbd04 	addi	r2,r2,28404
}
    5f98:	e037883a 	mov	sp,fp
    5f9c:	dfc00117 	ldw	ra,4(sp)
    5fa0:	df000017 	ldw	fp,0(sp)
    5fa4:	dec00204 	addi	sp,sp,8
    5fa8:	f800283a 	ret

00005fac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    5fac:	defff904 	addi	sp,sp,-28
    5fb0:	dfc00615 	stw	ra,24(sp)
    5fb4:	df000515 	stw	fp,20(sp)
    5fb8:	df000504 	addi	fp,sp,20
    5fbc:	e13ffd15 	stw	r4,-12(fp)
    5fc0:	e17ffe15 	stw	r5,-8(fp)
    5fc4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5fc8:	e0bffd17 	ldw	r2,-12(fp)
    5fcc:	10000616 	blt	r2,zero,5fe8 <read+0x3c>
    5fd0:	e0bffd17 	ldw	r2,-12(fp)
    5fd4:	10c00324 	muli	r3,r2,12
    5fd8:	00800074 	movhi	r2,1
    5fdc:	108e5804 	addi	r2,r2,14688
    5fe0:	1885883a 	add	r2,r3,r2
    5fe4:	00000106 	br	5fec <read+0x40>
    5fe8:	0005883a 	mov	r2,zero
    5fec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    5ff0:	e0bffb17 	ldw	r2,-20(fp)
    5ff4:	10002226 	beq	r2,zero,6080 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    5ff8:	e0bffb17 	ldw	r2,-20(fp)
    5ffc:	10800217 	ldw	r2,8(r2)
    6000:	108000cc 	andi	r2,r2,3
    6004:	10800060 	cmpeqi	r2,r2,1
    6008:	1000181e 	bne	r2,zero,606c <read+0xc0>
        (fd->dev->read))
    600c:	e0bffb17 	ldw	r2,-20(fp)
    6010:	10800017 	ldw	r2,0(r2)
    6014:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    6018:	10001426 	beq	r2,zero,606c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    601c:	e0bffb17 	ldw	r2,-20(fp)
    6020:	10800017 	ldw	r2,0(r2)
    6024:	10800517 	ldw	r2,20(r2)
    6028:	e0ffff17 	ldw	r3,-4(fp)
    602c:	e13ffb17 	ldw	r4,-20(fp)
    6030:	e17ffe17 	ldw	r5,-8(fp)
    6034:	180d883a 	mov	r6,r3
    6038:	103ee83a 	callr	r2
    603c:	e0bffc15 	stw	r2,-16(fp)
    6040:	e0bffc17 	ldw	r2,-16(fp)
    6044:	1000070e 	bge	r2,zero,6064 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    6048:	0005f5c0 	call	5f5c <alt_get_errno>
    604c:	1007883a 	mov	r3,r2
    6050:	e0bffc17 	ldw	r2,-16(fp)
    6054:	0085c83a 	sub	r2,zero,r2
    6058:	18800015 	stw	r2,0(r3)
          return -1;
    605c:	00bfffc4 	movi	r2,-1
    6060:	00000c06 	br	6094 <read+0xe8>
        }
        return rval;
    6064:	e0bffc17 	ldw	r2,-16(fp)
    6068:	00000a06 	br	6094 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    606c:	0005f5c0 	call	5f5c <alt_get_errno>
    6070:	1007883a 	mov	r3,r2
    6074:	00800344 	movi	r2,13
    6078:	18800015 	stw	r2,0(r3)
    607c:	00000406 	br	6090 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    6080:	0005f5c0 	call	5f5c <alt_get_errno>
    6084:	1007883a 	mov	r3,r2
    6088:	00801444 	movi	r2,81
    608c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    6090:	00bfffc4 	movi	r2,-1
}
    6094:	e037883a 	mov	sp,fp
    6098:	dfc00117 	ldw	ra,4(sp)
    609c:	df000017 	ldw	fp,0(sp)
    60a0:	dec00204 	addi	sp,sp,8
    60a4:	f800283a 	ret

000060a8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    60a8:	defffe04 	addi	sp,sp,-8
    60ac:	df000115 	stw	fp,4(sp)
    60b0:	df000104 	addi	fp,sp,4
    60b4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    60b8:	e0bfff17 	ldw	r2,-4(fp)
    60bc:	108000d0 	cmplti	r2,r2,3
    60c0:	10000d1e 	bne	r2,zero,60f8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    60c4:	00800074 	movhi	r2,1
    60c8:	108e5804 	addi	r2,r2,14688
    60cc:	e0ffff17 	ldw	r3,-4(fp)
    60d0:	18c00324 	muli	r3,r3,12
    60d4:	18c00204 	addi	r3,r3,8
    60d8:	10c5883a 	add	r2,r2,r3
    60dc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    60e0:	00800074 	movhi	r2,1
    60e4:	108e5804 	addi	r2,r2,14688
    60e8:	e0ffff17 	ldw	r3,-4(fp)
    60ec:	18c00324 	muli	r3,r3,12
    60f0:	10c5883a 	add	r2,r2,r3
    60f4:	10000015 	stw	zero,0(r2)
  }
}
    60f8:	e037883a 	mov	sp,fp
    60fc:	df000017 	ldw	fp,0(sp)
    6100:	dec00104 	addi	sp,sp,4
    6104:	f800283a 	ret

00006108 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    6108:	defff904 	addi	sp,sp,-28
    610c:	df000615 	stw	fp,24(sp)
    6110:	df000604 	addi	fp,sp,24
    6114:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6118:	0005303a 	rdctl	r2,status
    611c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6120:	e0fffc17 	ldw	r3,-16(fp)
    6124:	00bfff84 	movi	r2,-2
    6128:	1884703a 	and	r2,r3,r2
    612c:	1001703a 	wrctl	status,r2
  
  return context;
    6130:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    6134:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    6138:	d0a01617 	ldw	r2,-32680(gp)
    613c:	10c000c4 	addi	r3,r2,3
    6140:	00bfff04 	movi	r2,-4
    6144:	1884703a 	and	r2,r3,r2
    6148:	d0a01615 	stw	r2,-32680(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    614c:	d0e01617 	ldw	r3,-32680(gp)
    6150:	e0bfff17 	ldw	r2,-4(fp)
    6154:	1887883a 	add	r3,r3,r2
    6158:	00810034 	movhi	r2,1024
    615c:	10800004 	addi	r2,r2,0
    6160:	10c0062e 	bgeu	r2,r3,617c <sbrk+0x74>
    6164:	e0bffa17 	ldw	r2,-24(fp)
    6168:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    616c:	e0bffd17 	ldw	r2,-12(fp)
    6170:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    6174:	00bfffc4 	movi	r2,-1
    6178:	00000b06 	br	61a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    617c:	d0a01617 	ldw	r2,-32680(gp)
    6180:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    6184:	d0e01617 	ldw	r3,-32680(gp)
    6188:	e0bfff17 	ldw	r2,-4(fp)
    618c:	1885883a 	add	r2,r3,r2
    6190:	d0a01615 	stw	r2,-32680(gp)
    6194:	e0bffa17 	ldw	r2,-24(fp)
    6198:	e0bffe15 	stw	r2,-8(fp)
    619c:	e0bffe17 	ldw	r2,-8(fp)
    61a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    61a4:	e0bffb17 	ldw	r2,-20(fp)
} 
    61a8:	e037883a 	mov	sp,fp
    61ac:	df000017 	ldw	fp,0(sp)
    61b0:	dec00104 	addi	sp,sp,4
    61b4:	f800283a 	ret

000061b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    61b8:	defffe04 	addi	sp,sp,-8
    61bc:	dfc00115 	stw	ra,4(sp)
    61c0:	df000015 	stw	fp,0(sp)
    61c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    61c8:	00800074 	movhi	r2,1
    61cc:	1093c904 	addi	r2,r2,20260
    61d0:	10800017 	ldw	r2,0(r2)
    61d4:	10000526 	beq	r2,zero,61ec <alt_get_errno+0x34>
    61d8:	00800074 	movhi	r2,1
    61dc:	1093c904 	addi	r2,r2,20260
    61e0:	10800017 	ldw	r2,0(r2)
    61e4:	103ee83a 	callr	r2
    61e8:	00000206 	br	61f4 <alt_get_errno+0x3c>
    61ec:	00800074 	movhi	r2,1
    61f0:	109bbd04 	addi	r2,r2,28404
}
    61f4:	e037883a 	mov	sp,fp
    61f8:	dfc00117 	ldw	ra,4(sp)
    61fc:	df000017 	ldw	fp,0(sp)
    6200:	dec00204 	addi	sp,sp,8
    6204:	f800283a 	ret

00006208 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    6208:	defff904 	addi	sp,sp,-28
    620c:	dfc00615 	stw	ra,24(sp)
    6210:	df000515 	stw	fp,20(sp)
    6214:	df000504 	addi	fp,sp,20
    6218:	e13ffd15 	stw	r4,-12(fp)
    621c:	e17ffe15 	stw	r5,-8(fp)
    6220:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    6224:	e0bffd17 	ldw	r2,-12(fp)
    6228:	10000616 	blt	r2,zero,6244 <write+0x3c>
    622c:	e0bffd17 	ldw	r2,-12(fp)
    6230:	10c00324 	muli	r3,r2,12
    6234:	00800074 	movhi	r2,1
    6238:	108e5804 	addi	r2,r2,14688
    623c:	1885883a 	add	r2,r3,r2
    6240:	00000106 	br	6248 <write+0x40>
    6244:	0005883a 	mov	r2,zero
    6248:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    624c:	e0bffb17 	ldw	r2,-20(fp)
    6250:	10002126 	beq	r2,zero,62d8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    6254:	e0bffb17 	ldw	r2,-20(fp)
    6258:	10800217 	ldw	r2,8(r2)
    625c:	108000cc 	andi	r2,r2,3
    6260:	10001826 	beq	r2,zero,62c4 <write+0xbc>
    6264:	e0bffb17 	ldw	r2,-20(fp)
    6268:	10800017 	ldw	r2,0(r2)
    626c:	10800617 	ldw	r2,24(r2)
    6270:	10001426 	beq	r2,zero,62c4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    6274:	e0bffb17 	ldw	r2,-20(fp)
    6278:	10800017 	ldw	r2,0(r2)
    627c:	10800617 	ldw	r2,24(r2)
    6280:	e0ffff17 	ldw	r3,-4(fp)
    6284:	e13ffb17 	ldw	r4,-20(fp)
    6288:	e17ffe17 	ldw	r5,-8(fp)
    628c:	180d883a 	mov	r6,r3
    6290:	103ee83a 	callr	r2
    6294:	e0bffc15 	stw	r2,-16(fp)
    6298:	e0bffc17 	ldw	r2,-16(fp)
    629c:	1000070e 	bge	r2,zero,62bc <write+0xb4>
      {
        ALT_ERRNO = -rval;
    62a0:	00061b80 	call	61b8 <alt_get_errno>
    62a4:	1007883a 	mov	r3,r2
    62a8:	e0bffc17 	ldw	r2,-16(fp)
    62ac:	0085c83a 	sub	r2,zero,r2
    62b0:	18800015 	stw	r2,0(r3)
        return -1;
    62b4:	00bfffc4 	movi	r2,-1
    62b8:	00000c06 	br	62ec <write+0xe4>
      }
      return rval;
    62bc:	e0bffc17 	ldw	r2,-16(fp)
    62c0:	00000a06 	br	62ec <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    62c4:	00061b80 	call	61b8 <alt_get_errno>
    62c8:	1007883a 	mov	r3,r2
    62cc:	00800344 	movi	r2,13
    62d0:	18800015 	stw	r2,0(r3)
    62d4:	00000406 	br	62e8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    62d8:	00061b80 	call	61b8 <alt_get_errno>
    62dc:	1007883a 	mov	r3,r2
    62e0:	00801444 	movi	r2,81
    62e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    62e8:	00bfffc4 	movi	r2,-1
}
    62ec:	e037883a 	mov	sp,fp
    62f0:	dfc00117 	ldw	ra,4(sp)
    62f4:	df000017 	ldw	fp,0(sp)
    62f8:	dec00204 	addi	sp,sp,8
    62fc:	f800283a 	ret

00006300 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    6300:	deffdf04 	addi	sp,sp,-132
    6304:	dfc02015 	stw	ra,128(sp)
    6308:	df001f15 	stw	fp,124(sp)
    630c:	df001f04 	addi	fp,sp,124
    6310:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    6314:	e0bfe204 	addi	r2,fp,-120
    6318:	01003fc4 	movi	r4,255
    631c:	100b883a 	mov	r5,r2
    6320:	000e7240 	call	e724 <OSTaskQuery>
    6324:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    6328:	e0bffe83 	ldbu	r2,-6(fp)
    632c:	10803fcc 	andi	r2,r2,255
    6330:	10000126 	beq	r2,zero,6338 <__env_lock+0x38>
    return;
    6334:	00001d06 	br	63ac <__env_lock+0xac>

  id = tcb.OSTCBPrio;
    6338:	e0bfee83 	ldbu	r2,-70(fp)
    633c:	10803fcc 	andi	r2,r2,255
    6340:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    6344:	d0e80f17 	ldw	r3,-24516(gp)
    6348:	e0bffd04 	addi	r2,fp,-12
    634c:	1809883a 	mov	r4,r3
    6350:	100b883a 	mov	r5,r2
    6354:	000cdbc0 	call	cdbc <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    6358:	e0bffe43 	ldbu	r2,-7(fp)
    635c:	10803fcc 	andi	r2,r2,255
    6360:	10000726 	beq	r2,zero,6380 <__env_lock+0x80>
    6364:	d0a01717 	ldw	r2,-32676(gp)
    6368:	e0ffe117 	ldw	r3,-124(fp)
    636c:	1880041e 	bne	r3,r2,6380 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
    6370:	d0a80e17 	ldw	r2,-24520(gp)
    6374:	10800044 	addi	r2,r2,1
    6378:	d0a80e15 	stw	r2,-24520(gp)
    637c:	00000a06 	br	63a8 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    6380:	d0e80f17 	ldw	r3,-24516(gp)
    6384:	e0bffe84 	addi	r2,fp,-6
    6388:	1809883a 	mov	r4,r3
    638c:	000b883a 	mov	r5,zero
    6390:	100d883a 	mov	r6,r2
    6394:	000c8d80 	call	c8d8 <OSSemPend>
    locks  = 1;
    6398:	00800044 	movi	r2,1
    639c:	d0a80e15 	stw	r2,-24520(gp)
    lockid = id;
    63a0:	e0bfe117 	ldw	r2,-124(fp)
    63a4:	d0a01715 	stw	r2,-32676(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    63a8:	0001883a 	nop
}
    63ac:	e037883a 	mov	sp,fp
    63b0:	dfc00117 	ldw	ra,4(sp)
    63b4:	df000017 	ldw	fp,0(sp)
    63b8:	dec00204 	addi	sp,sp,8
    63bc:	f800283a 	ret

000063c0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    63c0:	defffd04 	addi	sp,sp,-12
    63c4:	dfc00215 	stw	ra,8(sp)
    63c8:	df000115 	stw	fp,4(sp)
    63cc:	df000104 	addi	fp,sp,4
    63d0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    63d4:	d0a80e17 	ldw	r2,-24520(gp)
    63d8:	1000011e 	bne	r2,zero,63e0 <__env_unlock+0x20>
    return;
    63dc:	00000a06 	br	6408 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    63e0:	d0a80e17 	ldw	r2,-24520(gp)
    63e4:	10bfffc4 	addi	r2,r2,-1
    63e8:	d0a80e15 	stw	r2,-24520(gp)
    63ec:	d0a80e17 	ldw	r2,-24520(gp)
    63f0:	1000051e 	bne	r2,zero,6408 <__env_unlock+0x48>
  {
    lockid = -1;
    63f4:	00bfffc4 	movi	r2,-1
    63f8:	d0a01715 	stw	r2,-32676(gp)
    OSSemPost( alt_envsem );
    63fc:	d0a80f17 	ldw	r2,-24516(gp)
    6400:	1009883a 	mov	r4,r2
    6404:	000ccac0 	call	ccac <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    6408:	e037883a 	mov	sp,fp
    640c:	dfc00117 	ldw	ra,4(sp)
    6410:	df000017 	ldw	fp,0(sp)
    6414:	dec00204 	addi	sp,sp,8
    6418:	f800283a 	ret

0000641c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    641c:	deffdb04 	addi	sp,sp,-148
    6420:	dfc02415 	stw	ra,144(sp)
    6424:	df002315 	stw	fp,140(sp)
    6428:	df002304 	addi	fp,sp,140
    642c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6430:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    6434:	00800074 	movhi	r2,1
    6438:	109bc644 	addi	r2,r2,28441
    643c:	10800003 	ldbu	r2,0(r2)
    6440:	10803fcc 	andi	r2,r2,255
    6444:	10800060 	cmpeqi	r2,r2,1
    6448:	1000011e 	bne	r2,zero,6450 <__malloc_lock+0x34>
      return;
    644c:	00003606 	br	6528 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    6450:	e0bfe204 	addi	r2,fp,-120
    6454:	01003fc4 	movi	r4,255
    6458:	100b883a 	mov	r5,r2
    645c:	000e7240 	call	e724 <OSTaskQuery>
    6460:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    6464:	e0bffe83 	ldbu	r2,-6(fp)
    6468:	10803fcc 	andi	r2,r2,255
    646c:	10000126 	beq	r2,zero,6474 <__malloc_lock+0x58>
    return;
    6470:	00002d06 	br	6528 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
    6474:	e0bfee83 	ldbu	r2,-70(fp)
    6478:	10803fcc 	andi	r2,r2,255
    647c:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    6480:	d0e81117 	ldw	r3,-24508(gp)
    6484:	e0bffd04 	addi	r2,fp,-12
    6488:	1809883a 	mov	r4,r3
    648c:	100b883a 	mov	r5,r2
    6490:	000cdbc0 	call	cdbc <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6494:	0005303a 	rdctl	r2,status
    6498:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    649c:	e0ffdf17 	ldw	r3,-132(fp)
    64a0:	00bfff84 	movi	r2,-2
    64a4:	1884703a 	and	r2,r3,r2
    64a8:	1001703a 	wrctl	status,r2
  
  return context;
    64ac:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
    64b0:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    64b4:	e0bffd0b 	ldhu	r2,-12(fp)
    64b8:	10bfffcc 	andi	r2,r2,65535
    64bc:	10000b1e 	bne	r2,zero,64ec <__malloc_lock+0xd0>
    64c0:	d0a01817 	ldw	r2,-32672(gp)
    64c4:	e0ffde17 	ldw	r3,-136(fp)
    64c8:	1880081e 	bne	r3,r2,64ec <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
    64cc:	d0a81017 	ldw	r2,-24512(gp)
    64d0:	10800044 	addi	r2,r2,1
    64d4:	d0a81015 	stw	r2,-24512(gp)
    64d8:	e0bfdd17 	ldw	r2,-140(fp)
    64dc:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    64e0:	e0bfe017 	ldw	r2,-128(fp)
    64e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    64e8:	00000e06 	br	6524 <__malloc_lock+0x108>
    64ec:	e0bfdd17 	ldw	r2,-140(fp)
    64f0:	e0bfe115 	stw	r2,-124(fp)
    64f4:	e0bfe117 	ldw	r2,-124(fp)
    64f8:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    64fc:	d0e81117 	ldw	r3,-24508(gp)
    6500:	e0bffe84 	addi	r2,fp,-6
    6504:	1809883a 	mov	r4,r3
    6508:	000b883a 	mov	r5,zero
    650c:	100d883a 	mov	r6,r2
    6510:	000c8d80 	call	c8d8 <OSSemPend>
    locks  = 1;
    6514:	00800044 	movi	r2,1
    6518:	d0a81015 	stw	r2,-24512(gp)
    lockid = id;
    651c:	e0bfde17 	ldw	r2,-136(fp)
    6520:	d0a01815 	stw	r2,-32672(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    6524:	0001883a 	nop
}
    6528:	e037883a 	mov	sp,fp
    652c:	dfc00117 	ldw	ra,4(sp)
    6530:	df000017 	ldw	fp,0(sp)
    6534:	dec00204 	addi	sp,sp,8
    6538:	f800283a 	ret

0000653c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    653c:	defff804 	addi	sp,sp,-32
    6540:	dfc00715 	stw	ra,28(sp)
    6544:	df000615 	stw	fp,24(sp)
    6548:	df000604 	addi	fp,sp,24
    654c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6550:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    6554:	00800074 	movhi	r2,1
    6558:	109bc644 	addi	r2,r2,28441
    655c:	10800003 	ldbu	r2,0(r2)
    6560:	10803fcc 	andi	r2,r2,255
    6564:	10800060 	cmpeqi	r2,r2,1
    6568:	1000011e 	bne	r2,zero,6570 <__malloc_unlock+0x34>
      return;
    656c:	00002206 	br	65f8 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6570:	0005303a 	rdctl	r2,status
    6574:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6578:	e0fffb17 	ldw	r3,-20(fp)
    657c:	00bfff84 	movi	r2,-2
    6580:	1884703a 	and	r2,r3,r2
    6584:	1001703a 	wrctl	status,r2
  
  return context;
    6588:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
    658c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    6590:	d0a81017 	ldw	r2,-24512(gp)
    6594:	1000051e 	bne	r2,zero,65ac <__malloc_unlock+0x70>
    6598:	e0bffa17 	ldw	r2,-24(fp)
    659c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    65a0:	e0bffc17 	ldw	r2,-16(fp)
    65a4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    65a8:	00001306 	br	65f8 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    65ac:	d0a81017 	ldw	r2,-24512(gp)
    65b0:	10bfffc4 	addi	r2,r2,-1
    65b4:	d0a81015 	stw	r2,-24512(gp)
    65b8:	d0a81017 	ldw	r2,-24512(gp)
    65bc:	10000a1e 	bne	r2,zero,65e8 <__malloc_unlock+0xac>
  {
    lockid = -1;
    65c0:	00bfffc4 	movi	r2,-1
    65c4:	d0a01815 	stw	r2,-32672(gp)
    65c8:	e0bffa17 	ldw	r2,-24(fp)
    65cc:	e0bffd15 	stw	r2,-12(fp)
    65d0:	e0bffd17 	ldw	r2,-12(fp)
    65d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    65d8:	d0a81117 	ldw	r2,-24508(gp)
    65dc:	1009883a 	mov	r4,r2
    65e0:	000ccac0 	call	ccac <OSSemPost>
    65e4:	00000406 	br	65f8 <__malloc_unlock+0xbc>
    65e8:	e0bffa17 	ldw	r2,-24(fp)
    65ec:	e0bffe15 	stw	r2,-8(fp)
    65f0:	e0bffe17 	ldw	r2,-8(fp)
    65f4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    65f8:	e037883a 	mov	sp,fp
    65fc:	dfc00117 	ldw	ra,4(sp)
    6600:	df000017 	ldw	fp,0(sp)
    6604:	dec00204 	addi	sp,sp,8
    6608:	f800283a 	ret

0000660c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    660c:	defff704 	addi	sp,sp,-36
    6610:	dfc00815 	stw	ra,32(sp)
    6614:	df000715 	stw	fp,28(sp)
    6618:	df000704 	addi	fp,sp,28
    661c:	e13ffd15 	stw	r4,-12(fp)
    6620:	e17ffe15 	stw	r5,-8(fp)
    6624:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6628:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    662c:	e0bfff17 	ldw	r2,-4(fp)
    6630:	1000021e 	bne	r2,zero,663c <OSEventNameGet+0x30>
        return (0);
    6634:	0005883a 	mov	r2,zero
    6638:	00003706 	br	6718 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    663c:	e0bffd17 	ldw	r2,-12(fp)
    6640:	1000051e 	bne	r2,zero,6658 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    6644:	e0bfff17 	ldw	r2,-4(fp)
    6648:	00c00104 	movi	r3,4
    664c:	10c00005 	stb	r3,0(r2)
        return (0);
    6650:	0005883a 	mov	r2,zero
    6654:	00003006 	br	6718 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    6658:	e0bffe17 	ldw	r2,-8(fp)
    665c:	1000051e 	bne	r2,zero,6674 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    6660:	e0bfff17 	ldw	r2,-4(fp)
    6664:	00c00304 	movi	r3,12
    6668:	10c00005 	stb	r3,0(r2)
        return (0);
    666c:	0005883a 	mov	r2,zero
    6670:	00002906 	br	6718 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    6674:	d0a82003 	ldbu	r2,-24448(gp)
    6678:	10803fcc 	andi	r2,r2,255
    667c:	10000526 	beq	r2,zero,6694 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    6680:	e0bfff17 	ldw	r2,-4(fp)
    6684:	00c00444 	movi	r3,17
    6688:	10c00005 	stb	r3,0(r2)
        return (0);
    668c:	0005883a 	mov	r2,zero
    6690:	00002106 	br	6718 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    6694:	e0bffd17 	ldw	r2,-12(fp)
    6698:	10800003 	ldbu	r2,0(r2)
    669c:	10803fcc 	andi	r2,r2,255
    66a0:	10bfffc4 	addi	r2,r2,-1
    66a4:	10800128 	cmpgeui	r2,r2,4
    66a8:	10000526 	beq	r2,zero,66c0 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    66ac:	e0bfff17 	ldw	r2,-4(fp)
    66b0:	00c00044 	movi	r3,1
    66b4:	10c00005 	stb	r3,0(r2)
             return (0);
    66b8:	0005883a 	mov	r2,zero
    66bc:	00001606 	br	6718 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    66c0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    66c4:	0005303a 	rdctl	r2,status
    66c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    66cc:	e0fffb17 	ldw	r3,-20(fp)
    66d0:	00bfff84 	movi	r2,-2
    66d4:	1884703a 	and	r2,r3,r2
    66d8:	1001703a 	wrctl	status,r2
  
  return context;
    66dc:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    66e0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    66e4:	e0bffd17 	ldw	r2,-12(fp)
    66e8:	10800384 	addi	r2,r2,14
    66ec:	e13ffe17 	ldw	r4,-8(fp)
    66f0:	100b883a 	mov	r5,r2
    66f4:	00080600 	call	8060 <OS_StrCopy>
    66f8:	e0bffa05 	stb	r2,-24(fp)
    66fc:	e0bff917 	ldw	r2,-28(fp)
    6700:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6704:	e0bffc17 	ldw	r2,-16(fp)
    6708:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    670c:	e0bfff17 	ldw	r2,-4(fp)
    6710:	10000005 	stb	zero,0(r2)
    return (len);
    6714:	e0bffa03 	ldbu	r2,-24(fp)
}
    6718:	e037883a 	mov	sp,fp
    671c:	dfc00117 	ldw	ra,4(sp)
    6720:	df000017 	ldw	fp,0(sp)
    6724:	dec00204 	addi	sp,sp,8
    6728:	f800283a 	ret

0000672c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    672c:	defff604 	addi	sp,sp,-40
    6730:	dfc00915 	stw	ra,36(sp)
    6734:	df000815 	stw	fp,32(sp)
    6738:	df000804 	addi	fp,sp,32
    673c:	e13ffd15 	stw	r4,-12(fp)
    6740:	e17ffe15 	stw	r5,-8(fp)
    6744:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6748:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    674c:	e0bfff17 	ldw	r2,-4(fp)
    6750:	1000011e 	bne	r2,zero,6758 <OSEventNameSet+0x2c>
        return;
    6754:	00003f06 	br	6854 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    6758:	e0bffd17 	ldw	r2,-12(fp)
    675c:	1000041e 	bne	r2,zero,6770 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    6760:	e0bfff17 	ldw	r2,-4(fp)
    6764:	00c00104 	movi	r3,4
    6768:	10c00005 	stb	r3,0(r2)
        return;
    676c:	00003906 	br	6854 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    6770:	e0bffe17 	ldw	r2,-8(fp)
    6774:	1000041e 	bne	r2,zero,6788 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    6778:	e0bfff17 	ldw	r2,-4(fp)
    677c:	00c00304 	movi	r3,12
    6780:	10c00005 	stb	r3,0(r2)
        return;
    6784:	00003306 	br	6854 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    6788:	d0a82003 	ldbu	r2,-24448(gp)
    678c:	10803fcc 	andi	r2,r2,255
    6790:	10000426 	beq	r2,zero,67a4 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
    6794:	e0bfff17 	ldw	r2,-4(fp)
    6798:	00c00484 	movi	r3,18
    679c:	10c00005 	stb	r3,0(r2)
        return;
    67a0:	00002c06 	br	6854 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
    67a4:	e0bffd17 	ldw	r2,-12(fp)
    67a8:	10800003 	ldbu	r2,0(r2)
    67ac:	10803fcc 	andi	r2,r2,255
    67b0:	10bfffc4 	addi	r2,r2,-1
    67b4:	10800128 	cmpgeui	r2,r2,4
    67b8:	10000426 	beq	r2,zero,67cc <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    67bc:	e0bfff17 	ldw	r2,-4(fp)
    67c0:	00c00044 	movi	r3,1
    67c4:	10c00005 	stb	r3,0(r2)
             return;
    67c8:	00002206 	br	6854 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    67cc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    67d0:	0005303a 	rdctl	r2,status
    67d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    67d8:	e0fffa17 	ldw	r3,-24(fp)
    67dc:	00bfff84 	movi	r2,-2
    67e0:	1884703a 	and	r2,r3,r2
    67e4:	1001703a 	wrctl	status,r2
  
  return context;
    67e8:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    67ec:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    67f0:	e13ffe17 	ldw	r4,-8(fp)
    67f4:	00080d40 	call	80d4 <OS_StrLen>
    67f8:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    67fc:	e0bff903 	ldbu	r2,-28(fp)
    6800:	10800830 	cmpltui	r2,r2,32
    6804:	1000081e 	bne	r2,zero,6828 <OSEventNameSet+0xfc>
    6808:	e0bff817 	ldw	r2,-32(fp)
    680c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6810:	e0bffb17 	ldw	r2,-20(fp)
    6814:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    6818:	e0bfff17 	ldw	r2,-4(fp)
    681c:	00c002c4 	movi	r3,11
    6820:	10c00005 	stb	r3,0(r2)
        return;
    6824:	00000b06 	br	6854 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    6828:	e0bffd17 	ldw	r2,-12(fp)
    682c:	10800384 	addi	r2,r2,14
    6830:	1009883a 	mov	r4,r2
    6834:	e17ffe17 	ldw	r5,-8(fp)
    6838:	00080600 	call	8060 <OS_StrCopy>
    683c:	e0bff817 	ldw	r2,-32(fp)
    6840:	e0bffc15 	stw	r2,-16(fp)
    6844:	e0bffc17 	ldw	r2,-16(fp)
    6848:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    684c:	e0bfff17 	ldw	r2,-4(fp)
    6850:	10000005 	stb	zero,0(r2)
}
    6854:	e037883a 	mov	sp,fp
    6858:	dfc00117 	ldw	ra,4(sp)
    685c:	df000017 	ldw	fp,0(sp)
    6860:	dec00204 	addi	sp,sp,8
    6864:	f800283a 	ret

00006868 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    6868:	deffed04 	addi	sp,sp,-76
    686c:	dfc01215 	stw	ra,72(sp)
    6870:	df001115 	stw	fp,68(sp)
    6874:	df001104 	addi	fp,sp,68
    6878:	e13ffc15 	stw	r4,-16(fp)
    687c:	e17ffd15 	stw	r5,-12(fp)
    6880:	e1bffe15 	stw	r6,-8(fp)
    6884:	3805883a 	mov	r2,r7
    6888:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    688c:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    6890:	e0800217 	ldw	r2,8(fp)
    6894:	1000021e 	bne	r2,zero,68a0 <OSEventPendMulti+0x38>
        return (0);
    6898:	0005883a 	mov	r2,zero
    689c:	00017106 	br	6e64 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    68a0:	e0bffc17 	ldw	r2,-16(fp)
    68a4:	1000051e 	bne	r2,zero,68bc <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    68a8:	e0800217 	ldw	r2,8(fp)
    68ac:	00c00104 	movi	r3,4
    68b0:	10c00005 	stb	r3,0(r2)
        return (0);
    68b4:	0005883a 	mov	r2,zero
    68b8:	00016a06 	br	6e64 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    68bc:	e0bffd17 	ldw	r2,-12(fp)
    68c0:	1000051e 	bne	r2,zero,68d8 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    68c4:	e0800217 	ldw	r2,8(fp)
    68c8:	00c00104 	movi	r3,4
    68cc:	10c00005 	stb	r3,0(r2)
        return (0);
    68d0:	0005883a 	mov	r2,zero
    68d4:	00016306 	br	6e64 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    68d8:	e0bffe17 	ldw	r2,-8(fp)
    68dc:	1000051e 	bne	r2,zero,68f4 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    68e0:	e0800217 	ldw	r2,8(fp)
    68e4:	00c00104 	movi	r3,4
    68e8:	10c00005 	stb	r3,0(r2)
        return (0);
    68ec:	0005883a 	mov	r2,zero
    68f0:	00015c06 	br	6e64 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    68f4:	e0bffd17 	ldw	r2,-12(fp)
    68f8:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    68fc:	e0bffc17 	ldw	r2,-16(fp)
    6900:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    6904:	e0bfef17 	ldw	r2,-68(fp)
    6908:	10800017 	ldw	r2,0(r2)
    690c:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    6910:	00001906 	br	6978 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    6914:	e0bff017 	ldw	r2,-64(fp)
    6918:	10800003 	ldbu	r2,0(r2)
    691c:	10803fcc 	andi	r2,r2,255
    6920:	10c000a0 	cmpeqi	r3,r2,2
    6924:	1800091e 	bne	r3,zero,694c <OSEventPendMulti+0xe4>
    6928:	10c000e0 	cmpeqi	r3,r2,3
    692c:	1800091e 	bne	r3,zero,6954 <OSEventPendMulti+0xec>
    6930:	10800060 	cmpeqi	r2,r2,1
    6934:	1000091e 	bne	r2,zero,695c <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    6938:	e0800217 	ldw	r2,8(fp)
    693c:	00c00044 	movi	r3,1
    6940:	10c00005 	stb	r3,0(r2)
                 return (0);
    6944:	0005883a 	mov	r2,zero
    6948:	00014606 	br	6e64 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    694c:	0001883a 	nop
    6950:	00000306 	br	6960 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    6954:	0001883a 	nop
    6958:	00000106 	br	6960 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    695c:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    6960:	e0bfef17 	ldw	r2,-68(fp)
    6964:	10800104 	addi	r2,r2,4
    6968:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    696c:	e0bfef17 	ldw	r2,-68(fp)
    6970:	10800017 	ldw	r2,0(r2)
    6974:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    6978:	e0bff017 	ldw	r2,-64(fp)
    697c:	103fe51e 	bne	r2,zero,6914 <__alt_mem_Flash_flash_data+0xf4006914>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    6980:	d0a82003 	ldbu	r2,-24448(gp)
    6984:	10803fcc 	andi	r2,r2,255
    6988:	10000526 	beq	r2,zero,69a0 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    698c:	e0800217 	ldw	r2,8(fp)
    6990:	00c00084 	movi	r3,2
    6994:	10c00005 	stb	r3,0(r2)
        return (0);
    6998:	0005883a 	mov	r2,zero
    699c:	00013106 	br	6e64 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    69a0:	d0a81203 	ldbu	r2,-24504(gp)
    69a4:	10803fcc 	andi	r2,r2,255
    69a8:	10000526 	beq	r2,zero,69c0 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    69ac:	e0800217 	ldw	r2,8(fp)
    69b0:	00c00344 	movi	r3,13
    69b4:	10c00005 	stb	r3,0(r2)
        return (0);
    69b8:	0005883a 	mov	r2,zero
    69bc:	00012906 	br	6e64 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    69c0:	0005303a 	rdctl	r2,status
    69c4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    69c8:	e0fff517 	ldw	r3,-44(fp)
    69cc:	00bfff84 	movi	r2,-2
    69d0:	1884703a 	and	r2,r3,r2
    69d4:	1001703a 	wrctl	status,r2
  
  return context;
    69d8:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    69dc:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    69e0:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    69e4:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    69e8:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    69ec:	e0bffc17 	ldw	r2,-16(fp)
    69f0:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    69f4:	e0bfef17 	ldw	r2,-68(fp)
    69f8:	10800017 	ldw	r2,0(r2)
    69fc:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    6a00:	00008106 	br	6c08 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    6a04:	e0bff017 	ldw	r2,-64(fp)
    6a08:	10800003 	ldbu	r2,0(r2)
    6a0c:	10803fcc 	andi	r2,r2,255
    6a10:	10c000a0 	cmpeqi	r3,r2,2
    6a14:	18003c1e 	bne	r3,zero,6b08 <OSEventPendMulti+0x2a0>
    6a18:	10c000e0 	cmpeqi	r3,r2,3
    6a1c:	1800031e 	bne	r3,zero,6a2c <OSEventPendMulti+0x1c4>
    6a20:	10800060 	cmpeqi	r2,r2,1
    6a24:	10001e1e 	bne	r2,zero,6aa0 <OSEventPendMulti+0x238>
    6a28:	00006606 	br	6bc4 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    6a2c:	e0bff017 	ldw	r2,-64(fp)
    6a30:	1080020b 	ldhu	r2,8(r2)
    6a34:	10bfffcc 	andi	r2,r2,65535
    6a38:	10001526 	beq	r2,zero,6a90 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    6a3c:	e0bff017 	ldw	r2,-64(fp)
    6a40:	1080020b 	ldhu	r2,8(r2)
    6a44:	10bfffc4 	addi	r2,r2,-1
    6a48:	1007883a 	mov	r3,r2
    6a4c:	e0bff017 	ldw	r2,-64(fp)
    6a50:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    6a54:	e0bffd17 	ldw	r2,-12(fp)
    6a58:	10c00104 	addi	r3,r2,4
    6a5c:	e0fffd15 	stw	r3,-12(fp)
    6a60:	e0fff017 	ldw	r3,-64(fp)
    6a64:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    6a68:	00800044 	movi	r2,1
    6a6c:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    6a70:	e0bffe17 	ldw	r2,-8(fp)
    6a74:	10c00104 	addi	r3,r2,4
    6a78:	e0fffe15 	stw	r3,-8(fp)
    6a7c:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    6a80:	e0bff18b 	ldhu	r2,-58(fp)
    6a84:	10800044 	addi	r2,r2,1
    6a88:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    6a8c:	00005806 	br	6bf0 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    6a90:	e0bff203 	ldbu	r2,-56(fp)
    6a94:	10800054 	ori	r2,r2,1
    6a98:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    6a9c:	00005406 	br	6bf0 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    6aa0:	e0bff017 	ldw	r2,-64(fp)
    6aa4:	10800117 	ldw	r2,4(r2)
    6aa8:	10001326 	beq	r2,zero,6af8 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    6aac:	e0bffe17 	ldw	r2,-8(fp)
    6ab0:	10c00104 	addi	r3,r2,4
    6ab4:	e0fffe15 	stw	r3,-8(fp)
    6ab8:	e0fff017 	ldw	r3,-64(fp)
    6abc:	18c00117 	ldw	r3,4(r3)
    6ac0:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    6ac4:	e0bff017 	ldw	r2,-64(fp)
    6ac8:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    6acc:	e0bffd17 	ldw	r2,-12(fp)
    6ad0:	10c00104 	addi	r3,r2,4
    6ad4:	e0fffd15 	stw	r3,-12(fp)
    6ad8:	e0fff017 	ldw	r3,-64(fp)
    6adc:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    6ae0:	00800044 	movi	r2,1
    6ae4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    6ae8:	e0bff18b 	ldhu	r2,-58(fp)
    6aec:	10800044 	addi	r2,r2,1
    6af0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    6af4:	00003e06 	br	6bf0 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    6af8:	e0bff203 	ldbu	r2,-56(fp)
    6afc:	10800094 	ori	r2,r2,2
    6b00:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    6b04:	00003a06 	br	6bf0 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    6b08:	e0bff017 	ldw	r2,-64(fp)
    6b0c:	10800117 	ldw	r2,4(r2)
    6b10:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    6b14:	e0bff417 	ldw	r2,-48(fp)
    6b18:	1080058b 	ldhu	r2,22(r2)
    6b1c:	10bfffcc 	andi	r2,r2,65535
    6b20:	10002426 	beq	r2,zero,6bb4 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    6b24:	e0bffe17 	ldw	r2,-8(fp)
    6b28:	10c00104 	addi	r3,r2,4
    6b2c:	e0fffe15 	stw	r3,-8(fp)
    6b30:	e0fff417 	ldw	r3,-48(fp)
    6b34:	18c00417 	ldw	r3,16(r3)
    6b38:	19400104 	addi	r5,r3,4
    6b3c:	e13ff417 	ldw	r4,-48(fp)
    6b40:	21400415 	stw	r5,16(r4)
    6b44:	18c00017 	ldw	r3,0(r3)
    6b48:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    6b4c:	e0bff417 	ldw	r2,-48(fp)
    6b50:	10c00417 	ldw	r3,16(r2)
    6b54:	e0bff417 	ldw	r2,-48(fp)
    6b58:	10800217 	ldw	r2,8(r2)
    6b5c:	1880041e 	bne	r3,r2,6b70 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    6b60:	e0bff417 	ldw	r2,-48(fp)
    6b64:	10c00117 	ldw	r3,4(r2)
    6b68:	e0bff417 	ldw	r2,-48(fp)
    6b6c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    6b70:	e0bff417 	ldw	r2,-48(fp)
    6b74:	1080058b 	ldhu	r2,22(r2)
    6b78:	10bfffc4 	addi	r2,r2,-1
    6b7c:	1007883a 	mov	r3,r2
    6b80:	e0bff417 	ldw	r2,-48(fp)
    6b84:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    6b88:	e0bffd17 	ldw	r2,-12(fp)
    6b8c:	10c00104 	addi	r3,r2,4
    6b90:	e0fffd15 	stw	r3,-12(fp)
    6b94:	e0fff017 	ldw	r3,-64(fp)
    6b98:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    6b9c:	00800044 	movi	r2,1
    6ba0:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    6ba4:	e0bff18b 	ldhu	r2,-58(fp)
    6ba8:	10800044 	addi	r2,r2,1
    6bac:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    6bb0:	00000f06 	br	6bf0 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    6bb4:	e0bff203 	ldbu	r2,-56(fp)
    6bb8:	10800114 	ori	r2,r2,4
    6bbc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    6bc0:	00000b06 	br	6bf0 <OSEventPendMulti+0x388>
    6bc4:	e0bff317 	ldw	r2,-52(fp)
    6bc8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6bcc:	e0bff617 	ldw	r2,-40(fp)
    6bd0:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    6bd4:	e0bffd17 	ldw	r2,-12(fp)
    6bd8:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    6bdc:	e0800217 	ldw	r2,8(fp)
    6be0:	00c00044 	movi	r3,1
    6be4:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    6be8:	e0bff18b 	ldhu	r2,-58(fp)
    6bec:	00009d06 	br	6e64 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    6bf0:	e0bfef17 	ldw	r2,-68(fp)
    6bf4:	10800104 	addi	r2,r2,4
    6bf8:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    6bfc:	e0bfef17 	ldw	r2,-68(fp)
    6c00:	10800017 	ldw	r2,0(r2)
    6c04:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    6c08:	e0bff017 	ldw	r2,-64(fp)
    6c0c:	103f7d1e 	bne	r2,zero,6a04 <__alt_mem_Flash_flash_data+0xf4006a04>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    6c10:	e0bff103 	ldbu	r2,-60(fp)
    6c14:	10800058 	cmpnei	r2,r2,1
    6c18:	10000a1e 	bne	r2,zero,6c44 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    6c1c:	e0bffd17 	ldw	r2,-12(fp)
    6c20:	10000015 	stw	zero,0(r2)
    6c24:	e0bff317 	ldw	r2,-52(fp)
    6c28:	e0bff715 	stw	r2,-36(fp)
    6c2c:	e0bff717 	ldw	r2,-36(fp)
    6c30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    6c34:	e0800217 	ldw	r2,8(fp)
    6c38:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    6c3c:	e0bff18b 	ldhu	r2,-58(fp)
    6c40:	00008806 	br	6e64 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    6c44:	d0a82117 	ldw	r2,-24444(gp)
    6c48:	d0e82117 	ldw	r3,-24444(gp)
    6c4c:	19000c03 	ldbu	r4,48(r3)
    6c50:	e0fff203 	ldbu	r3,-56(fp)
    6c54:	20c6b03a 	or	r3,r4,r3
    6c58:	1809883a 	mov	r4,r3
    6c5c:	00ffe004 	movi	r3,-128
    6c60:	20c6b03a 	or	r3,r4,r3
    6c64:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    6c68:	d0a82117 	ldw	r2,-24444(gp)
    6c6c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    6c70:	d0a82117 	ldw	r2,-24444(gp)
    6c74:	e0ffff0b 	ldhu	r3,-4(fp)
    6c78:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    6c7c:	e13ffc17 	ldw	r4,-16(fp)
    6c80:	00077b00 	call	77b0 <OS_EventTaskWaitMulti>
    6c84:	e0bff317 	ldw	r2,-52(fp)
    6c88:	e0bff815 	stw	r2,-32(fp)
    6c8c:	e0bff817 	ldw	r2,-32(fp)
    6c90:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    6c94:	0007f240 	call	7f24 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6c98:	0005303a 	rdctl	r2,status
    6c9c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6ca0:	e0fff917 	ldw	r3,-28(fp)
    6ca4:	00bfff84 	movi	r2,-2
    6ca8:	1884703a 	and	r2,r3,r2
    6cac:	1001703a 	wrctl	status,r2
  
  return context;
    6cb0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    6cb4:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    6cb8:	d0a82117 	ldw	r2,-24444(gp)
    6cbc:	10800c43 	ldbu	r2,49(r2)
    6cc0:	10803fcc 	andi	r2,r2,255
    6cc4:	10000226 	beq	r2,zero,6cd0 <OSEventPendMulti+0x468>
    6cc8:	108000a0 	cmpeqi	r2,r2,2
    6ccc:	10001826 	beq	r2,zero,6d30 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    6cd0:	d0a82117 	ldw	r2,-24444(gp)
    6cd4:	10800717 	ldw	r2,28(r2)
    6cd8:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    6cdc:	e0bff017 	ldw	r2,-64(fp)
    6ce0:	10000b26 	beq	r2,zero,6d10 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    6ce4:	e0bffd17 	ldw	r2,-12(fp)
    6ce8:	10c00104 	addi	r3,r2,4
    6cec:	e0fffd15 	stw	r3,-12(fp)
    6cf0:	e0fff017 	ldw	r3,-64(fp)
    6cf4:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    6cf8:	e0bffd17 	ldw	r2,-12(fp)
    6cfc:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    6d00:	e0bff18b 	ldhu	r2,-58(fp)
    6d04:	10800044 	addi	r2,r2,1
    6d08:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    6d0c:	00000d06 	br	6d44 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    6d10:	d0a82117 	ldw	r2,-24444(gp)
    6d14:	00c00044 	movi	r3,1
    6d18:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    6d1c:	d0a82117 	ldw	r2,-24444(gp)
    6d20:	1009883a 	mov	r4,r2
    6d24:	e17ffc17 	ldw	r5,-16(fp)
    6d28:	00079b00 	call	79b0 <OS_EventTaskRemoveMulti>
             }
			 break;
    6d2c:	00000506 	br	6d44 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    6d30:	d0a82117 	ldw	r2,-24444(gp)
    6d34:	1009883a 	mov	r4,r2
    6d38:	e17ffc17 	ldw	r5,-16(fp)
    6d3c:	00079b00 	call	79b0 <OS_EventTaskRemoveMulti>
             break;
    6d40:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    6d44:	d0a82117 	ldw	r2,-24444(gp)
    6d48:	10800c43 	ldbu	r2,49(r2)
    6d4c:	10803fcc 	andi	r2,r2,255
    6d50:	10000326 	beq	r2,zero,6d60 <OSEventPendMulti+0x4f8>
    6d54:	108000a0 	cmpeqi	r2,r2,2
    6d58:	1000231e 	bne	r2,zero,6de8 <OSEventPendMulti+0x580>
    6d5c:	00002a06 	br	6e08 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    6d60:	e0bff017 	ldw	r2,-64(fp)
    6d64:	10800003 	ldbu	r2,0(r2)
    6d68:	10803fcc 	andi	r2,r2,255
    6d6c:	0080100e 	bge	zero,r2,6db0 <OSEventPendMulti+0x548>
    6d70:	10c000d0 	cmplti	r3,r2,3
    6d74:	1800071e 	bne	r3,zero,6d94 <OSEventPendMulti+0x52c>
    6d78:	108000e0 	cmpeqi	r2,r2,3
    6d7c:	10000c26 	beq	r2,zero,6db0 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    6d80:	e0bffe17 	ldw	r2,-8(fp)
    6d84:	10c00104 	addi	r3,r2,4
    6d88:	e0fffe15 	stw	r3,-8(fp)
    6d8c:	10000015 	stw	zero,0(r2)
                      break;
    6d90:	00001206 	br	6ddc <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    6d94:	e0bffe17 	ldw	r2,-8(fp)
    6d98:	10c00104 	addi	r3,r2,4
    6d9c:	e0fffe15 	stw	r3,-8(fp)
    6da0:	d0e82117 	ldw	r3,-24444(gp)
    6da4:	18c00917 	ldw	r3,36(r3)
    6da8:	10c00015 	stw	r3,0(r2)
                      break;
    6dac:	00000b06 	br	6ddc <OSEventPendMulti+0x574>
    6db0:	e0bff317 	ldw	r2,-52(fp)
    6db4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6db8:	e0bffa17 	ldw	r2,-24(fp)
    6dbc:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    6dc0:	e0bffd17 	ldw	r2,-12(fp)
    6dc4:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    6dc8:	e0800217 	ldw	r2,8(fp)
    6dcc:	00c00044 	movi	r3,1
    6dd0:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    6dd4:	e0bff18b 	ldhu	r2,-58(fp)
    6dd8:	00002206 	br	6e64 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    6ddc:	e0800217 	ldw	r2,8(fp)
    6de0:	10000005 	stb	zero,0(r2)
             break;
    6de4:	00001006 	br	6e28 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    6de8:	e0bffe17 	ldw	r2,-8(fp)
    6dec:	10c00104 	addi	r3,r2,4
    6df0:	e0fffe15 	stw	r3,-8(fp)
    6df4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    6df8:	e0800217 	ldw	r2,8(fp)
    6dfc:	00c00384 	movi	r3,14
    6e00:	10c00005 	stb	r3,0(r2)
             break;
    6e04:	00000806 	br	6e28 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    6e08:	e0bffe17 	ldw	r2,-8(fp)
    6e0c:	10c00104 	addi	r3,r2,4
    6e10:	e0fffe15 	stw	r3,-8(fp)
    6e14:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    6e18:	e0800217 	ldw	r2,8(fp)
    6e1c:	00c00284 	movi	r3,10
    6e20:	10c00005 	stb	r3,0(r2)
             break;
    6e24:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    6e28:	d0a82117 	ldw	r2,-24444(gp)
    6e2c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    6e30:	d0a82117 	ldw	r2,-24444(gp)
    6e34:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    6e38:	d0a82117 	ldw	r2,-24444(gp)
    6e3c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    6e40:	d0a82117 	ldw	r2,-24444(gp)
    6e44:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    6e48:	d0a82117 	ldw	r2,-24444(gp)
    6e4c:	10000915 	stw	zero,36(r2)
    6e50:	e0bff317 	ldw	r2,-52(fp)
    6e54:	e0bffb15 	stw	r2,-20(fp)
    6e58:	e0bffb17 	ldw	r2,-20(fp)
    6e5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    6e60:	e0bff18b 	ldhu	r2,-58(fp)
}
    6e64:	e037883a 	mov	sp,fp
    6e68:	dfc00117 	ldw	ra,4(sp)
    6e6c:	df000017 	ldw	fp,0(sp)
    6e70:	dec00204 	addi	sp,sp,8
    6e74:	f800283a 	ret

00006e78 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    6e78:	defffe04 	addi	sp,sp,-8
    6e7c:	dfc00115 	stw	ra,4(sp)
    6e80:	df000015 	stw	fp,0(sp)
    6e84:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    6e88:	00123ec0 	call	123ec <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    6e8c:	0007bec0 	call	7bec <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    6e90:	0007c300 	call	7c30 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    6e94:	0007d900 	call	7d90 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    6e98:	0007b100 	call	7b10 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    6e9c:	0009d100 	call	9d10 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    6ea0:	000b1e00 	call	b1e0 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    6ea4:	000c4140 	call	c414 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    6ea8:	0007c980 	call	7c98 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    6eac:	0007d140 	call	7d14 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    6eb0:	00124080 	call	12408 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    6eb4:	00085fc0 	call	85fc <OSDebugInit>
#endif
}
    6eb8:	e037883a 	mov	sp,fp
    6ebc:	dfc00117 	ldw	ra,4(sp)
    6ec0:	df000017 	ldw	fp,0(sp)
    6ec4:	dec00204 	addi	sp,sp,8
    6ec8:	f800283a 	ret

00006ecc <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    6ecc:	defffc04 	addi	sp,sp,-16
    6ed0:	df000315 	stw	fp,12(sp)
    6ed4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    6ed8:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
    6edc:	d0a81243 	ldbu	r2,-24503(gp)
    6ee0:	10803fcc 	andi	r2,r2,255
    6ee4:	10800058 	cmpnei	r2,r2,1
    6ee8:	1000131e 	bne	r2,zero,6f38 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6eec:	0005303a 	rdctl	r2,status
    6ef0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6ef4:	e0fffe17 	ldw	r3,-8(fp)
    6ef8:	00bfff84 	movi	r2,-2
    6efc:	1884703a 	and	r2,r3,r2
    6f00:	1001703a 	wrctl	status,r2
  
  return context;
    6f04:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    6f08:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
    6f0c:	d0a82003 	ldbu	r2,-24448(gp)
    6f10:	10803fcc 	andi	r2,r2,255
    6f14:	10803fe0 	cmpeqi	r2,r2,255
    6f18:	1000031e 	bne	r2,zero,6f28 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    6f1c:	d0a82003 	ldbu	r2,-24448(gp)
    6f20:	10800044 	addi	r2,r2,1
    6f24:	d0a82005 	stb	r2,-24448(gp)
    6f28:	e0bffd17 	ldw	r2,-12(fp)
    6f2c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6f30:	e0bfff17 	ldw	r2,-4(fp)
    6f34:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
    6f38:	e037883a 	mov	sp,fp
    6f3c:	df000017 	ldw	fp,0(sp)
    6f40:	dec00104 	addi	sp,sp,4
    6f44:	f800283a 	ret

00006f48 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    6f48:	defffb04 	addi	sp,sp,-20
    6f4c:	dfc00415 	stw	ra,16(sp)
    6f50:	df000315 	stw	fp,12(sp)
    6f54:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    6f58:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    6f5c:	d0a81243 	ldbu	r2,-24503(gp)
    6f60:	10803fcc 	andi	r2,r2,255
    6f64:	10800058 	cmpnei	r2,r2,1
    6f68:	10002f1e 	bne	r2,zero,7028 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6f6c:	0005303a 	rdctl	r2,status
    6f70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6f74:	e0fffe17 	ldw	r3,-8(fp)
    6f78:	00bfff84 	movi	r2,-2
    6f7c:	1884703a 	and	r2,r3,r2
    6f80:	1001703a 	wrctl	status,r2
  
  return context;
    6f84:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    6f88:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    6f8c:	d0a82003 	ldbu	r2,-24448(gp)
    6f90:	10803fcc 	andi	r2,r2,255
    6f94:	10000326 	beq	r2,zero,6fa4 <OSIntExit+0x5c>
            OSIntNesting--;
    6f98:	d0a82003 	ldbu	r2,-24448(gp)
    6f9c:	10bfffc4 	addi	r2,r2,-1
    6fa0:	d0a82005 	stb	r2,-24448(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    6fa4:	d0a82003 	ldbu	r2,-24448(gp)
    6fa8:	10803fcc 	andi	r2,r2,255
    6fac:	10001a1e 	bne	r2,zero,7018 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    6fb0:	d0a81203 	ldbu	r2,-24504(gp)
    6fb4:	10803fcc 	andi	r2,r2,255
    6fb8:	1000171e 	bne	r2,zero,7018 <OSIntExit+0xd0>
                OS_SchedNew();
    6fbc:	0007ff00 	call	7ff0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    6fc0:	d0e81403 	ldbu	r3,-24496(gp)
    6fc4:	d0a81443 	ldbu	r2,-24495(gp)
    6fc8:	18c03fcc 	andi	r3,r3,255
    6fcc:	10803fcc 	andi	r2,r2,255
    6fd0:	18801126 	beq	r3,r2,7018 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    6fd4:	d0a81403 	ldbu	r2,-24496(gp)
    6fd8:	10c03fcc 	andi	r3,r2,255
    6fdc:	008000b4 	movhi	r2,2
    6fe0:	109a5004 	addi	r2,r2,26944
    6fe4:	18c7883a 	add	r3,r3,r3
    6fe8:	18c7883a 	add	r3,r3,r3
    6fec:	10c5883a 	add	r2,r2,r3
    6ff0:	10800017 	ldw	r2,0(r2)
    6ff4:	d0a81c15 	stw	r2,-24464(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    6ff8:	d0a81c17 	ldw	r2,-24464(gp)
    6ffc:	10c00e17 	ldw	r3,56(r2)
    7000:	18c00044 	addi	r3,r3,1
    7004:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    7008:	d0a81717 	ldw	r2,-24484(gp)
    700c:	10800044 	addi	r2,r2,1
    7010:	d0a81715 	stw	r2,-24484(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    7014:	001212c0 	call	1212c <OSCtxSw>
    7018:	e0bffd17 	ldw	r2,-12(fp)
    701c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7020:	e0bfff17 	ldw	r2,-4(fp)
    7024:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    7028:	e037883a 	mov	sp,fp
    702c:	dfc00117 	ldw	ra,4(sp)
    7030:	df000017 	ldw	fp,0(sp)
    7034:	dec00204 	addi	sp,sp,8
    7038:	f800283a 	ret

0000703c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    703c:	defffc04 	addi	sp,sp,-16
    7040:	df000315 	stw	fp,12(sp)
    7044:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7048:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    704c:	d0a81243 	ldbu	r2,-24503(gp)
    7050:	10803fcc 	andi	r2,r2,255
    7054:	10800058 	cmpnei	r2,r2,1
    7058:	1000161e 	bne	r2,zero,70b4 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    705c:	0005303a 	rdctl	r2,status
    7060:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7064:	e0fffe17 	ldw	r3,-8(fp)
    7068:	00bfff84 	movi	r2,-2
    706c:	1884703a 	and	r2,r3,r2
    7070:	1001703a 	wrctl	status,r2
  
  return context;
    7074:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    7078:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    707c:	d0a82003 	ldbu	r2,-24448(gp)
    7080:	10803fcc 	andi	r2,r2,255
    7084:	1000071e 	bne	r2,zero,70a4 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    7088:	d0a81203 	ldbu	r2,-24504(gp)
    708c:	10803fcc 	andi	r2,r2,255
    7090:	10803fe0 	cmpeqi	r2,r2,255
    7094:	1000031e 	bne	r2,zero,70a4 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    7098:	d0a81203 	ldbu	r2,-24504(gp)
    709c:	10800044 	addi	r2,r2,1
    70a0:	d0a81205 	stb	r2,-24504(gp)
    70a4:	e0bffd17 	ldw	r2,-12(fp)
    70a8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    70ac:	e0bfff17 	ldw	r2,-4(fp)
    70b0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    70b4:	e037883a 	mov	sp,fp
    70b8:	df000017 	ldw	fp,0(sp)
    70bc:	dec00104 	addi	sp,sp,4
    70c0:	f800283a 	ret

000070c4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    70c4:	defff804 	addi	sp,sp,-32
    70c8:	dfc00715 	stw	ra,28(sp)
    70cc:	df000615 	stw	fp,24(sp)
    70d0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    70d4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    70d8:	d0a81243 	ldbu	r2,-24503(gp)
    70dc:	10803fcc 	andi	r2,r2,255
    70e0:	10800058 	cmpnei	r2,r2,1
    70e4:	1000281e 	bne	r2,zero,7188 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    70e8:	0005303a 	rdctl	r2,status
    70ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    70f0:	e0fffb17 	ldw	r3,-20(fp)
    70f4:	00bfff84 	movi	r2,-2
    70f8:	1884703a 	and	r2,r3,r2
    70fc:	1001703a 	wrctl	status,r2
  
  return context;
    7100:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    7104:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    7108:	d0a81203 	ldbu	r2,-24504(gp)
    710c:	10803fcc 	andi	r2,r2,255
    7110:	10001926 	beq	r2,zero,7178 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    7114:	d0a81203 	ldbu	r2,-24504(gp)
    7118:	10bfffc4 	addi	r2,r2,-1
    711c:	d0a81205 	stb	r2,-24504(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    7120:	d0a81203 	ldbu	r2,-24504(gp)
    7124:	10803fcc 	andi	r2,r2,255
    7128:	10000e1e 	bne	r2,zero,7164 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    712c:	d0a82003 	ldbu	r2,-24448(gp)
    7130:	10803fcc 	andi	r2,r2,255
    7134:	1000061e 	bne	r2,zero,7150 <OSSchedUnlock+0x8c>
    7138:	e0bffa17 	ldw	r2,-24(fp)
    713c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7140:	e0bffc17 	ldw	r2,-16(fp)
    7144:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    7148:	0007f240 	call	7f24 <OS_Sched>
    714c:	00000e06 	br	7188 <OSSchedUnlock+0xc4>
    7150:	e0bffa17 	ldw	r2,-24(fp)
    7154:	e0bffd15 	stw	r2,-12(fp)
    7158:	e0bffd17 	ldw	r2,-12(fp)
    715c:	1001703a 	wrctl	status,r2
    7160:	00000906 	br	7188 <OSSchedUnlock+0xc4>
    7164:	e0bffa17 	ldw	r2,-24(fp)
    7168:	e0bffe15 	stw	r2,-8(fp)
    716c:	e0bffe17 	ldw	r2,-8(fp)
    7170:	1001703a 	wrctl	status,r2
    7174:	00000406 	br	7188 <OSSchedUnlock+0xc4>
    7178:	e0bffa17 	ldw	r2,-24(fp)
    717c:	e0bfff15 	stw	r2,-4(fp)
    7180:	e0bfff17 	ldw	r2,-4(fp)
    7184:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    7188:	e037883a 	mov	sp,fp
    718c:	dfc00117 	ldw	ra,4(sp)
    7190:	df000017 	ldw	fp,0(sp)
    7194:	dec00204 	addi	sp,sp,8
    7198:	f800283a 	ret

0000719c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    719c:	defffe04 	addi	sp,sp,-8
    71a0:	dfc00115 	stw	ra,4(sp)
    71a4:	df000015 	stw	fp,0(sp)
    71a8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    71ac:	d0a81243 	ldbu	r2,-24503(gp)
    71b0:	10803fcc 	andi	r2,r2,255
    71b4:	10000f1e 	bne	r2,zero,71f4 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    71b8:	0007ff00 	call	7ff0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    71bc:	d0a81403 	ldbu	r2,-24496(gp)
    71c0:	d0a81445 	stb	r2,-24495(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    71c4:	d0a81403 	ldbu	r2,-24496(gp)
    71c8:	10c03fcc 	andi	r3,r2,255
    71cc:	008000b4 	movhi	r2,2
    71d0:	109a5004 	addi	r2,r2,26944
    71d4:	18c7883a 	add	r3,r3,r3
    71d8:	18c7883a 	add	r3,r3,r3
    71dc:	10c5883a 	add	r2,r2,r3
    71e0:	10800017 	ldw	r2,0(r2)
    71e4:	d0a81c15 	stw	r2,-24464(gp)
        OSTCBCur      = OSTCBHighRdy;
    71e8:	d0a81c17 	ldw	r2,-24464(gp)
    71ec:	d0a82115 	stw	r2,-24444(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    71f0:	00121b80 	call	121b8 <OSStartHighRdy>
    }
}
    71f4:	e037883a 	mov	sp,fp
    71f8:	dfc00117 	ldw	ra,4(sp)
    71fc:	df000017 	ldw	fp,0(sp)
    7200:	dec00204 	addi	sp,sp,8
    7204:	f800283a 	ret

00007208 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    7208:	defff904 	addi	sp,sp,-28
    720c:	dfc00615 	stw	ra,24(sp)
    7210:	df000515 	stw	fp,20(sp)
    7214:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7218:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    721c:	01000084 	movi	r4,2
    7220:	000e8bc0 	call	e8bc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7224:	0005303a 	rdctl	r2,status
    7228:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    722c:	e0fffc17 	ldw	r3,-16(fp)
    7230:	00bfff84 	movi	r2,-2
    7234:	1884703a 	and	r2,r3,r2
    7238:	1001703a 	wrctl	status,r2
  
  return context;
    723c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    7240:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    7244:	d0281315 	stw	zero,-24500(gp)
    7248:	e0bffb17 	ldw	r2,-20(fp)
    724c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7250:	e0bffd17 	ldw	r2,-12(fp)
    7254:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    7258:	0009883a 	mov	r4,zero
    725c:	000e8bc0 	call	e8bc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7260:	0005303a 	rdctl	r2,status
    7264:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7268:	e0fffe17 	ldw	r3,-8(fp)
    726c:	00bfff84 	movi	r2,-2
    7270:	1884703a 	and	r2,r3,r2
    7274:	1001703a 	wrctl	status,r2
  
  return context;
    7278:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    727c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    7280:	d0a81317 	ldw	r2,-24500(gp)
    7284:	d0a81815 	stw	r2,-24480(gp)
    OSStatRdy    = OS_TRUE;
    7288:	00800044 	movi	r2,1
    728c:	d0a82405 	stb	r2,-24432(gp)
    7290:	e0bffb17 	ldw	r2,-20(fp)
    7294:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7298:	e0bfff17 	ldw	r2,-4(fp)
    729c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    72a0:	e037883a 	mov	sp,fp
    72a4:	dfc00117 	ldw	ra,4(sp)
    72a8:	df000017 	ldw	fp,0(sp)
    72ac:	dec00204 	addi	sp,sp,8
    72b0:	f800283a 	ret

000072b4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    72b4:	defff704 	addi	sp,sp,-36
    72b8:	dfc00815 	stw	ra,32(sp)
    72bc:	df000715 	stw	fp,28(sp)
    72c0:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    72c4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    72c8:	00123d00 	call	123d0 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    72cc:	0005303a 	rdctl	r2,status
    72d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    72d4:	e0fffc17 	ldw	r3,-16(fp)
    72d8:	00bfff84 	movi	r2,-2
    72dc:	1884703a 	and	r2,r3,r2
    72e0:	1001703a 	wrctl	status,r2
  
  return context;
    72e4:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    72e8:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    72ec:	d0a82217 	ldw	r2,-24440(gp)
    72f0:	10800044 	addi	r2,r2,1
    72f4:	d0a82215 	stw	r2,-24440(gp)
    72f8:	e0bffb17 	ldw	r2,-20(fp)
    72fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7300:	e0bffd17 	ldw	r2,-12(fp)
    7304:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    7308:	d0a81243 	ldbu	r2,-24503(gp)
    730c:	10803fcc 	andi	r2,r2,255
    7310:	10800058 	cmpnei	r2,r2,1
    7314:	1000691e 	bne	r2,zero,74bc <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    7318:	d0a81603 	ldbu	r2,-24488(gp)
    731c:	10803fcc 	andi	r2,r2,255
    7320:	10c00060 	cmpeqi	r3,r2,1
    7324:	1800061e 	bne	r3,zero,7340 <OSTimeTick+0x8c>
    7328:	10c000a0 	cmpeqi	r3,r2,2
    732c:	1800061e 	bne	r3,zero,7348 <OSTimeTick+0x94>
    7330:	10000a1e 	bne	r2,zero,735c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    7334:	00800044 	movi	r2,1
    7338:	e0bffa05 	stb	r2,-24(fp)
                 break;
    733c:	00000b06 	br	736c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    7340:	e03ffa05 	stb	zero,-24(fp)
                 break;
    7344:	00000906 	br	736c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    7348:	00800044 	movi	r2,1
    734c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    7350:	00800044 	movi	r2,1
    7354:	d0a81605 	stb	r2,-24488(gp)
                 break;
    7358:	00000406 	br	736c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    735c:	00800044 	movi	r2,1
    7360:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    7364:	d0281605 	stb	zero,-24488(gp)
                 break;
    7368:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    736c:	e0bffa03 	ldbu	r2,-24(fp)
    7370:	1000011e 	bne	r2,zero,7378 <OSTimeTick+0xc4>
            return;
    7374:	00005106 	br	74bc <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    7378:	d0a81517 	ldw	r2,-24492(gp)
    737c:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    7380:	00004906 	br	74a8 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7384:	0005303a 	rdctl	r2,status
    7388:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    738c:	e0fffe17 	ldw	r3,-8(fp)
    7390:	00bfff84 	movi	r2,-2
    7394:	1884703a 	and	r2,r3,r2
    7398:	1001703a 	wrctl	status,r2
  
  return context;
    739c:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
    73a0:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    73a4:	e0bff917 	ldw	r2,-28(fp)
    73a8:	10800b8b 	ldhu	r2,46(r2)
    73ac:	10bfffcc 	andi	r2,r2,65535
    73b0:	10003626 	beq	r2,zero,748c <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    73b4:	e0bff917 	ldw	r2,-28(fp)
    73b8:	10800b8b 	ldhu	r2,46(r2)
    73bc:	10bfffc4 	addi	r2,r2,-1
    73c0:	1007883a 	mov	r3,r2
    73c4:	e0bff917 	ldw	r2,-28(fp)
    73c8:	10c00b8d 	sth	r3,46(r2)
    73cc:	e0bff917 	ldw	r2,-28(fp)
    73d0:	10800b8b 	ldhu	r2,46(r2)
    73d4:	10bfffcc 	andi	r2,r2,65535
    73d8:	10002c1e 	bne	r2,zero,748c <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    73dc:	e0bff917 	ldw	r2,-28(fp)
    73e0:	10800c03 	ldbu	r2,48(r2)
    73e4:	10803fcc 	andi	r2,r2,255
    73e8:	10800dcc 	andi	r2,r2,55
    73ec:	10000b26 	beq	r2,zero,741c <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    73f0:	e0bff917 	ldw	r2,-28(fp)
    73f4:	10c00c03 	ldbu	r3,48(r2)
    73f8:	00bff204 	movi	r2,-56
    73fc:	1884703a 	and	r2,r3,r2
    7400:	1007883a 	mov	r3,r2
    7404:	e0bff917 	ldw	r2,-28(fp)
    7408:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    740c:	e0bff917 	ldw	r2,-28(fp)
    7410:	00c00044 	movi	r3,1
    7414:	10c00c45 	stb	r3,49(r2)
    7418:	00000206 	br	7424 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    741c:	e0bff917 	ldw	r2,-28(fp)
    7420:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    7424:	e0bff917 	ldw	r2,-28(fp)
    7428:	10800c03 	ldbu	r2,48(r2)
    742c:	10803fcc 	andi	r2,r2,255
    7430:	1080020c 	andi	r2,r2,8
    7434:	1000151e 	bne	r2,zero,748c <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    7438:	e0bff917 	ldw	r2,-28(fp)
    743c:	10c00d83 	ldbu	r3,54(r2)
    7440:	d0a81e03 	ldbu	r2,-24456(gp)
    7444:	1884b03a 	or	r2,r3,r2
    7448:	d0a81e05 	stb	r2,-24456(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    744c:	e0bff917 	ldw	r2,-28(fp)
    7450:	10800d03 	ldbu	r2,52(r2)
    7454:	10c03fcc 	andi	r3,r2,255
    7458:	e0bff917 	ldw	r2,-28(fp)
    745c:	10800d03 	ldbu	r2,52(r2)
    7460:	11003fcc 	andi	r4,r2,255
    7464:	d0a81e44 	addi	r2,gp,-24455
    7468:	2085883a 	add	r2,r4,r2
    746c:	11000003 	ldbu	r4,0(r2)
    7470:	e0bff917 	ldw	r2,-28(fp)
    7474:	10800d43 	ldbu	r2,53(r2)
    7478:	2084b03a 	or	r2,r4,r2
    747c:	1009883a 	mov	r4,r2
    7480:	d0a81e44 	addi	r2,gp,-24455
    7484:	1885883a 	add	r2,r3,r2
    7488:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    748c:	e0bff917 	ldw	r2,-28(fp)
    7490:	10800517 	ldw	r2,20(r2)
    7494:	e0bff915 	stw	r2,-28(fp)
    7498:	e0bffb17 	ldw	r2,-20(fp)
    749c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    74a0:	e0bfff17 	ldw	r2,-4(fp)
    74a4:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    74a8:	e0bff917 	ldw	r2,-28(fp)
    74ac:	10800c83 	ldbu	r2,50(r2)
    74b0:	10803fcc 	andi	r2,r2,255
    74b4:	10800518 	cmpnei	r2,r2,20
    74b8:	103fb21e 	bne	r2,zero,7384 <__alt_mem_Flash_flash_data+0xf4007384>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    74bc:	e037883a 	mov	sp,fp
    74c0:	dfc00117 	ldw	ra,4(sp)
    74c4:	df000017 	ldw	fp,0(sp)
    74c8:	dec00204 	addi	sp,sp,8
    74cc:	f800283a 	ret

000074d0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    74d0:	deffff04 	addi	sp,sp,-4
    74d4:	df000015 	stw	fp,0(sp)
    74d8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    74dc:	00804784 	movi	r2,286
}
    74e0:	e037883a 	mov	sp,fp
    74e4:	df000017 	ldw	fp,0(sp)
    74e8:	dec00104 	addi	sp,sp,4
    74ec:	f800283a 	ret

000074f0 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    74f0:	deffff04 	addi	sp,sp,-4
    74f4:	df000015 	stw	fp,0(sp)
    74f8:	d839883a 	mov	fp,sp
}
    74fc:	e037883a 	mov	sp,fp
    7500:	df000017 	ldw	fp,0(sp)
    7504:	dec00104 	addi	sp,sp,4
    7508:	f800283a 	ret

0000750c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    750c:	defff804 	addi	sp,sp,-32
    7510:	dfc00715 	stw	ra,28(sp)
    7514:	df000615 	stw	fp,24(sp)
    7518:	df000604 	addi	fp,sp,24
    751c:	e13ffc15 	stw	r4,-16(fp)
    7520:	e17ffd15 	stw	r5,-12(fp)
    7524:	3007883a 	mov	r3,r6
    7528:	3805883a 	mov	r2,r7
    752c:	e0fffe05 	stb	r3,-8(fp)
    7530:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    7534:	e0bffc17 	ldw	r2,-16(fp)
    7538:	10800283 	ldbu	r2,10(r2)
    753c:	10c03fcc 	andi	r3,r2,255
    7540:	00800074 	movhi	r2,1
    7544:	108b8504 	addi	r2,r2,11796
    7548:	10c5883a 	add	r2,r2,r3
    754c:	10800003 	ldbu	r2,0(r2)
    7550:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    7554:	e0bffa03 	ldbu	r2,-24(fp)
    7558:	e0fffc17 	ldw	r3,-16(fp)
    755c:	1885883a 	add	r2,r3,r2
    7560:	10800204 	addi	r2,r2,8
    7564:	108000c3 	ldbu	r2,3(r2)
    7568:	10c03fcc 	andi	r3,r2,255
    756c:	00800074 	movhi	r2,1
    7570:	108b8504 	addi	r2,r2,11796
    7574:	10c5883a 	add	r2,r2,r3
    7578:	10800003 	ldbu	r2,0(r2)
    757c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    7580:	e0bffa03 	ldbu	r2,-24(fp)
    7584:	100490fa 	slli	r2,r2,3
    7588:	1007883a 	mov	r3,r2
    758c:	e0bffa43 	ldbu	r2,-23(fp)
    7590:	1885883a 	add	r2,r3,r2
    7594:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    7598:	e0fffa83 	ldbu	r3,-22(fp)
    759c:	008000b4 	movhi	r2,2
    75a0:	109a5004 	addi	r2,r2,26944
    75a4:	18c7883a 	add	r3,r3,r3
    75a8:	18c7883a 	add	r3,r3,r3
    75ac:	10c5883a 	add	r2,r2,r3
    75b0:	10800017 	ldw	r2,0(r2)
    75b4:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    75b8:	e0bffb17 	ldw	r2,-20(fp)
    75bc:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    75c0:	e0bffb17 	ldw	r2,-20(fp)
    75c4:	e0fffd17 	ldw	r3,-12(fp)
    75c8:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    75cc:	e0bffb17 	ldw	r2,-20(fp)
    75d0:	10800c03 	ldbu	r2,48(r2)
    75d4:	1007883a 	mov	r3,r2
    75d8:	e0bffe03 	ldbu	r2,-8(fp)
    75dc:	0084303a 	nor	r2,zero,r2
    75e0:	1884703a 	and	r2,r3,r2
    75e4:	1007883a 	mov	r3,r2
    75e8:	e0bffb17 	ldw	r2,-20(fp)
    75ec:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    75f0:	e0bffb17 	ldw	r2,-20(fp)
    75f4:	e0ffff03 	ldbu	r3,-4(fp)
    75f8:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    75fc:	e0bffb17 	ldw	r2,-20(fp)
    7600:	10800c03 	ldbu	r2,48(r2)
    7604:	10803fcc 	andi	r2,r2,255
    7608:	1080020c 	andi	r2,r2,8
    760c:	1000111e 	bne	r2,zero,7654 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    7610:	e0bffb17 	ldw	r2,-20(fp)
    7614:	10c00d83 	ldbu	r3,54(r2)
    7618:	d0a81e03 	ldbu	r2,-24456(gp)
    761c:	1884b03a 	or	r2,r3,r2
    7620:	d0a81e05 	stb	r2,-24456(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    7624:	e0fffa03 	ldbu	r3,-24(fp)
    7628:	e13ffa03 	ldbu	r4,-24(fp)
    762c:	d0a81e44 	addi	r2,gp,-24455
    7630:	2085883a 	add	r2,r4,r2
    7634:	11000003 	ldbu	r4,0(r2)
    7638:	e0bffb17 	ldw	r2,-20(fp)
    763c:	10800d43 	ldbu	r2,53(r2)
    7640:	2084b03a 	or	r2,r4,r2
    7644:	1009883a 	mov	r4,r2
    7648:	d0a81e44 	addi	r2,gp,-24455
    764c:	1885883a 	add	r2,r3,r2
    7650:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    7654:	e13ffb17 	ldw	r4,-20(fp)
    7658:	e17ffc17 	ldw	r5,-16(fp)
    765c:	00078fc0 	call	78fc <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    7660:	e0bffb17 	ldw	r2,-20(fp)
    7664:	10800817 	ldw	r2,32(r2)
    7668:	10000826 	beq	r2,zero,768c <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    766c:	e0bffb17 	ldw	r2,-20(fp)
    7670:	10800817 	ldw	r2,32(r2)
    7674:	e13ffb17 	ldw	r4,-20(fp)
    7678:	100b883a 	mov	r5,r2
    767c:	00079b00 	call	79b0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    7680:	e0bffb17 	ldw	r2,-20(fp)
    7684:	e0fffc17 	ldw	r3,-16(fp)
    7688:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    768c:	e0bffa83 	ldbu	r2,-22(fp)
}
    7690:	e037883a 	mov	sp,fp
    7694:	dfc00117 	ldw	ra,4(sp)
    7698:	df000017 	ldw	fp,0(sp)
    769c:	dec00204 	addi	sp,sp,8
    76a0:	f800283a 	ret

000076a4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    76a4:	defffd04 	addi	sp,sp,-12
    76a8:	df000215 	stw	fp,8(sp)
    76ac:	df000204 	addi	fp,sp,8
    76b0:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    76b4:	d0a82117 	ldw	r2,-24444(gp)
    76b8:	e0ffff17 	ldw	r3,-4(fp)
    76bc:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    76c0:	d0a82117 	ldw	r2,-24444(gp)
    76c4:	10800d03 	ldbu	r2,52(r2)
    76c8:	10803fcc 	andi	r2,r2,255
    76cc:	d0e82117 	ldw	r3,-24444(gp)
    76d0:	18c00d03 	ldbu	r3,52(r3)
    76d4:	18c03fcc 	andi	r3,r3,255
    76d8:	e13fff17 	ldw	r4,-4(fp)
    76dc:	20c7883a 	add	r3,r4,r3
    76e0:	18c00204 	addi	r3,r3,8
    76e4:	190000c3 	ldbu	r4,3(r3)
    76e8:	d0e82117 	ldw	r3,-24444(gp)
    76ec:	18c00d43 	ldbu	r3,53(r3)
    76f0:	20c6b03a 	or	r3,r4,r3
    76f4:	1809883a 	mov	r4,r3
    76f8:	e0ffff17 	ldw	r3,-4(fp)
    76fc:	1885883a 	add	r2,r3,r2
    7700:	10800204 	addi	r2,r2,8
    7704:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    7708:	e0bfff17 	ldw	r2,-4(fp)
    770c:	10c00283 	ldbu	r3,10(r2)
    7710:	d0a82117 	ldw	r2,-24444(gp)
    7714:	10800d83 	ldbu	r2,54(r2)
    7718:	1884b03a 	or	r2,r3,r2
    771c:	1007883a 	mov	r3,r2
    7720:	e0bfff17 	ldw	r2,-4(fp)
    7724:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    7728:	d0a82117 	ldw	r2,-24444(gp)
    772c:	10800d03 	ldbu	r2,52(r2)
    7730:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    7734:	e0fffe03 	ldbu	r3,-8(fp)
    7738:	e13ffe03 	ldbu	r4,-8(fp)
    773c:	d0a81e44 	addi	r2,gp,-24455
    7740:	2085883a 	add	r2,r4,r2
    7744:	10800003 	ldbu	r2,0(r2)
    7748:	1009883a 	mov	r4,r2
    774c:	d0a82117 	ldw	r2,-24444(gp)
    7750:	10800d43 	ldbu	r2,53(r2)
    7754:	0084303a 	nor	r2,zero,r2
    7758:	2084703a 	and	r2,r4,r2
    775c:	1009883a 	mov	r4,r2
    7760:	d0a81e44 	addi	r2,gp,-24455
    7764:	1885883a 	add	r2,r3,r2
    7768:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    776c:	e0fffe03 	ldbu	r3,-8(fp)
    7770:	d0a81e44 	addi	r2,gp,-24455
    7774:	1885883a 	add	r2,r3,r2
    7778:	10800003 	ldbu	r2,0(r2)
    777c:	10803fcc 	andi	r2,r2,255
    7780:	1000071e 	bne	r2,zero,77a0 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    7784:	d0a82117 	ldw	r2,-24444(gp)
    7788:	10800d83 	ldbu	r2,54(r2)
    778c:	0084303a 	nor	r2,zero,r2
    7790:	1007883a 	mov	r3,r2
    7794:	d0a81e03 	ldbu	r2,-24456(gp)
    7798:	1884703a 	and	r2,r3,r2
    779c:	d0a81e05 	stb	r2,-24456(gp)
    }
}
    77a0:	e037883a 	mov	sp,fp
    77a4:	df000017 	ldw	fp,0(sp)
    77a8:	dec00104 	addi	sp,sp,4
    77ac:	f800283a 	ret

000077b0 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    77b0:	defffb04 	addi	sp,sp,-20
    77b4:	df000415 	stw	fp,16(sp)
    77b8:	df000404 	addi	fp,sp,16
    77bc:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    77c0:	d0a82117 	ldw	r2,-24444(gp)
    77c4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    77c8:	d0a82117 	ldw	r2,-24444(gp)
    77cc:	e0ffff17 	ldw	r3,-4(fp)
    77d0:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    77d4:	e0bfff17 	ldw	r2,-4(fp)
    77d8:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    77dc:	e0bffc17 	ldw	r2,-16(fp)
    77e0:	10800017 	ldw	r2,0(r2)
    77e4:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    77e8:	00002006 	br	786c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    77ec:	d0a82117 	ldw	r2,-24444(gp)
    77f0:	10800d03 	ldbu	r2,52(r2)
    77f4:	10803fcc 	andi	r2,r2,255
    77f8:	d0e82117 	ldw	r3,-24444(gp)
    77fc:	18c00d03 	ldbu	r3,52(r3)
    7800:	18c03fcc 	andi	r3,r3,255
    7804:	e13ffd17 	ldw	r4,-12(fp)
    7808:	20c7883a 	add	r3,r4,r3
    780c:	18c00204 	addi	r3,r3,8
    7810:	190000c3 	ldbu	r4,3(r3)
    7814:	d0e82117 	ldw	r3,-24444(gp)
    7818:	18c00d43 	ldbu	r3,53(r3)
    781c:	20c6b03a 	or	r3,r4,r3
    7820:	1809883a 	mov	r4,r3
    7824:	e0fffd17 	ldw	r3,-12(fp)
    7828:	1885883a 	add	r2,r3,r2
    782c:	10800204 	addi	r2,r2,8
    7830:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    7834:	e0bffd17 	ldw	r2,-12(fp)
    7838:	10c00283 	ldbu	r3,10(r2)
    783c:	d0a82117 	ldw	r2,-24444(gp)
    7840:	10800d83 	ldbu	r2,54(r2)
    7844:	1884b03a 	or	r2,r3,r2
    7848:	1007883a 	mov	r3,r2
    784c:	e0bffd17 	ldw	r2,-12(fp)
    7850:	10c00285 	stb	r3,10(r2)
        pevents++;
    7854:	e0bffc17 	ldw	r2,-16(fp)
    7858:	10800104 	addi	r2,r2,4
    785c:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    7860:	e0bffc17 	ldw	r2,-16(fp)
    7864:	10800017 	ldw	r2,0(r2)
    7868:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    786c:	e0bffd17 	ldw	r2,-12(fp)
    7870:	103fde1e 	bne	r2,zero,77ec <__alt_mem_Flash_flash_data+0xf40077ec>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    7874:	d0a82117 	ldw	r2,-24444(gp)
    7878:	10800d03 	ldbu	r2,52(r2)
    787c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    7880:	e0fffe03 	ldbu	r3,-8(fp)
    7884:	e13ffe03 	ldbu	r4,-8(fp)
    7888:	d0a81e44 	addi	r2,gp,-24455
    788c:	2085883a 	add	r2,r4,r2
    7890:	10800003 	ldbu	r2,0(r2)
    7894:	1009883a 	mov	r4,r2
    7898:	d0a82117 	ldw	r2,-24444(gp)
    789c:	10800d43 	ldbu	r2,53(r2)
    78a0:	0084303a 	nor	r2,zero,r2
    78a4:	2084703a 	and	r2,r4,r2
    78a8:	1009883a 	mov	r4,r2
    78ac:	d0a81e44 	addi	r2,gp,-24455
    78b0:	1885883a 	add	r2,r3,r2
    78b4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    78b8:	e0fffe03 	ldbu	r3,-8(fp)
    78bc:	d0a81e44 	addi	r2,gp,-24455
    78c0:	1885883a 	add	r2,r3,r2
    78c4:	10800003 	ldbu	r2,0(r2)
    78c8:	10803fcc 	andi	r2,r2,255
    78cc:	1000071e 	bne	r2,zero,78ec <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    78d0:	d0a82117 	ldw	r2,-24444(gp)
    78d4:	10800d83 	ldbu	r2,54(r2)
    78d8:	0084303a 	nor	r2,zero,r2
    78dc:	1007883a 	mov	r3,r2
    78e0:	d0a81e03 	ldbu	r2,-24456(gp)
    78e4:	1884703a 	and	r2,r3,r2
    78e8:	d0a81e05 	stb	r2,-24456(gp)
    }
}
    78ec:	e037883a 	mov	sp,fp
    78f0:	df000017 	ldw	fp,0(sp)
    78f4:	dec00104 	addi	sp,sp,4
    78f8:	f800283a 	ret

000078fc <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    78fc:	defffc04 	addi	sp,sp,-16
    7900:	df000315 	stw	fp,12(sp)
    7904:	df000304 	addi	fp,sp,12
    7908:	e13ffe15 	stw	r4,-8(fp)
    790c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    7910:	e0bffe17 	ldw	r2,-8(fp)
    7914:	10800d03 	ldbu	r2,52(r2)
    7918:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    791c:	e0bffd03 	ldbu	r2,-12(fp)
    7920:	e0fffd03 	ldbu	r3,-12(fp)
    7924:	e13fff17 	ldw	r4,-4(fp)
    7928:	20c7883a 	add	r3,r4,r3
    792c:	18c00204 	addi	r3,r3,8
    7930:	18c000c3 	ldbu	r3,3(r3)
    7934:	1809883a 	mov	r4,r3
    7938:	e0fffe17 	ldw	r3,-8(fp)
    793c:	18c00d43 	ldbu	r3,53(r3)
    7940:	00c6303a 	nor	r3,zero,r3
    7944:	20c6703a 	and	r3,r4,r3
    7948:	1809883a 	mov	r4,r3
    794c:	e0ffff17 	ldw	r3,-4(fp)
    7950:	1885883a 	add	r2,r3,r2
    7954:	10800204 	addi	r2,r2,8
    7958:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
    795c:	e0bffd03 	ldbu	r2,-12(fp)
    7960:	e0ffff17 	ldw	r3,-4(fp)
    7964:	1885883a 	add	r2,r3,r2
    7968:	10800204 	addi	r2,r2,8
    796c:	108000c3 	ldbu	r2,3(r2)
    7970:	10803fcc 	andi	r2,r2,255
    7974:	10000a1e 	bne	r2,zero,79a0 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    7978:	e0bfff17 	ldw	r2,-4(fp)
    797c:	10800283 	ldbu	r2,10(r2)
    7980:	1007883a 	mov	r3,r2
    7984:	e0bffe17 	ldw	r2,-8(fp)
    7988:	10800d83 	ldbu	r2,54(r2)
    798c:	0084303a 	nor	r2,zero,r2
    7990:	1884703a 	and	r2,r3,r2
    7994:	1007883a 	mov	r3,r2
    7998:	e0bfff17 	ldw	r2,-4(fp)
    799c:	10c00285 	stb	r3,10(r2)
    }
}
    79a0:	e037883a 	mov	sp,fp
    79a4:	df000017 	ldw	fp,0(sp)
    79a8:	dec00104 	addi	sp,sp,4
    79ac:	f800283a 	ret

000079b0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    79b0:	defffa04 	addi	sp,sp,-24
    79b4:	df000515 	stw	fp,20(sp)
    79b8:	df000504 	addi	fp,sp,20
    79bc:	e13ffe15 	stw	r4,-8(fp)
    79c0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    79c4:	e0bffe17 	ldw	r2,-8(fp)
    79c8:	10800d03 	ldbu	r2,52(r2)
    79cc:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    79d0:	e0bffe17 	ldw	r2,-8(fp)
    79d4:	10800d83 	ldbu	r2,54(r2)
    79d8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    79dc:	e0bffe17 	ldw	r2,-8(fp)
    79e0:	10800d43 	ldbu	r2,53(r2)
    79e4:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    79e8:	e0bfff17 	ldw	r2,-4(fp)
    79ec:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    79f0:	e0bffb17 	ldw	r2,-20(fp)
    79f4:	10800017 	ldw	r2,0(r2)
    79f8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    79fc:	00002506 	br	7a94 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    7a00:	e0bffd03 	ldbu	r2,-12(fp)
    7a04:	e0fffd03 	ldbu	r3,-12(fp)
    7a08:	e13ffc17 	ldw	r4,-16(fp)
    7a0c:	20c7883a 	add	r3,r4,r3
    7a10:	18c00204 	addi	r3,r3,8
    7a14:	18c000c3 	ldbu	r3,3(r3)
    7a18:	1809883a 	mov	r4,r3
    7a1c:	e0fffd83 	ldbu	r3,-10(fp)
    7a20:	00c6303a 	nor	r3,zero,r3
    7a24:	20c6703a 	and	r3,r4,r3
    7a28:	1809883a 	mov	r4,r3
    7a2c:	e0fffc17 	ldw	r3,-16(fp)
    7a30:	1885883a 	add	r2,r3,r2
    7a34:	10800204 	addi	r2,r2,8
    7a38:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
    7a3c:	e0bffd03 	ldbu	r2,-12(fp)
    7a40:	e0fffc17 	ldw	r3,-16(fp)
    7a44:	1885883a 	add	r2,r3,r2
    7a48:	10800204 	addi	r2,r2,8
    7a4c:	108000c3 	ldbu	r2,3(r2)
    7a50:	10803fcc 	andi	r2,r2,255
    7a54:	1000091e 	bne	r2,zero,7a7c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    7a58:	e0bffc17 	ldw	r2,-16(fp)
    7a5c:	10800283 	ldbu	r2,10(r2)
    7a60:	1007883a 	mov	r3,r2
    7a64:	e0bffd43 	ldbu	r2,-11(fp)
    7a68:	0084303a 	nor	r2,zero,r2
    7a6c:	1884703a 	and	r2,r3,r2
    7a70:	1007883a 	mov	r3,r2
    7a74:	e0bffc17 	ldw	r2,-16(fp)
    7a78:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    7a7c:	e0bffb17 	ldw	r2,-20(fp)
    7a80:	10800104 	addi	r2,r2,4
    7a84:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    7a88:	e0bffb17 	ldw	r2,-20(fp)
    7a8c:	10800017 	ldw	r2,0(r2)
    7a90:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    7a94:	e0bffc17 	ldw	r2,-16(fp)
    7a98:	103fd91e 	bne	r2,zero,7a00 <__alt_mem_Flash_flash_data+0xf4007a00>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    7a9c:	e037883a 	mov	sp,fp
    7aa0:	df000017 	ldw	fp,0(sp)
    7aa4:	dec00104 	addi	sp,sp,4
    7aa8:	f800283a 	ret

00007aac <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    7aac:	defffc04 	addi	sp,sp,-16
    7ab0:	df000315 	stw	fp,12(sp)
    7ab4:	df000304 	addi	fp,sp,12
    7ab8:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    7abc:	e0bfff17 	ldw	r2,-4(fp)
    7ac0:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    7ac4:	e0bfff17 	ldw	r2,-4(fp)
    7ac8:	108002c4 	addi	r2,r2,11
    7acc:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    7ad0:	e03ffe05 	stb	zero,-8(fp)
    7ad4:	00000706 	br	7af4 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    7ad8:	e0bffd17 	ldw	r2,-12(fp)
    7adc:	10c00044 	addi	r3,r2,1
    7ae0:	e0fffd15 	stw	r3,-12(fp)
    7ae4:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    7ae8:	e0bffe03 	ldbu	r2,-8(fp)
    7aec:	10800044 	addi	r2,r2,1
    7af0:	e0bffe05 	stb	r2,-8(fp)
    7af4:	e0bffe03 	ldbu	r2,-8(fp)
    7af8:	108000f0 	cmpltui	r2,r2,3
    7afc:	103ff61e 	bne	r2,zero,7ad8 <__alt_mem_Flash_flash_data+0xf4007ad8>
        *ptbl++ = 0;
    }
}
    7b00:	e037883a 	mov	sp,fp
    7b04:	df000017 	ldw	fp,0(sp)
    7b08:	dec00104 	addi	sp,sp,4
    7b0c:	f800283a 	ret

00007b10 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    7b10:	defffb04 	addi	sp,sp,-20
    7b14:	dfc00415 	stw	ra,16(sp)
    7b18:	df000315 	stw	fp,12(sp)
    7b1c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    7b20:	010000b4 	movhi	r4,2
    7b24:	21163c04 	addi	r4,r4,22768
    7b28:	0142d004 	movi	r5,2880
    7b2c:	0007e700 	call	7e70 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    7b30:	008000b4 	movhi	r2,2
    7b34:	10963c04 	addi	r2,r2,22768
    7b38:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    7b3c:	008000b4 	movhi	r2,2
    7b40:	10964804 	addi	r2,r2,22816
    7b44:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    7b48:	e03ffd0d 	sth	zero,-12(fp)
    7b4c:	00001306 	br	7b9c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    7b50:	e0bffe17 	ldw	r2,-8(fp)
    7b54:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    7b58:	e0bffe17 	ldw	r2,-8(fp)
    7b5c:	e0ffff17 	ldw	r3,-4(fp)
    7b60:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    7b64:	e0bffe17 	ldw	r2,-8(fp)
    7b68:	00c00fc4 	movi	r3,63
    7b6c:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    7b70:	e0bffe17 	ldw	r2,-8(fp)
    7b74:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    7b78:	e0bffe17 	ldw	r2,-8(fp)
    7b7c:	10800c04 	addi	r2,r2,48
    7b80:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    7b84:	e0bfff17 	ldw	r2,-4(fp)
    7b88:	10800c04 	addi	r2,r2,48
    7b8c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    7b90:	e0bffd0b 	ldhu	r2,-12(fp)
    7b94:	10800044 	addi	r2,r2,1
    7b98:	e0bffd0d 	sth	r2,-12(fp)
    7b9c:	e0bffd0b 	ldhu	r2,-12(fp)
    7ba0:	10800ef0 	cmpltui	r2,r2,59
    7ba4:	103fea1e 	bne	r2,zero,7b50 <__alt_mem_Flash_flash_data+0xf4007b50>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    7ba8:	e0bffe17 	ldw	r2,-8(fp)
    7bac:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    7bb0:	e0bffe17 	ldw	r2,-8(fp)
    7bb4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    7bb8:	e0bffe17 	ldw	r2,-8(fp)
    7bbc:	00c00fc4 	movi	r3,63
    7bc0:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    7bc4:	e0bffe17 	ldw	r2,-8(fp)
    7bc8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    7bcc:	008000b4 	movhi	r2,2
    7bd0:	10963c04 	addi	r2,r2,22768
    7bd4:	d0a81f15 	stw	r2,-24452(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    7bd8:	e037883a 	mov	sp,fp
    7bdc:	dfc00117 	ldw	ra,4(sp)
    7be0:	df000017 	ldw	fp,0(sp)
    7be4:	dec00204 	addi	sp,sp,8
    7be8:	f800283a 	ret

00007bec <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    7bec:	deffff04 	addi	sp,sp,-4
    7bf0:	df000015 	stw	fp,0(sp)
    7bf4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    7bf8:	d0282215 	stw	zero,-24440(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    7bfc:	d0282005 	stb	zero,-24448(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    7c00:	d0281205 	stb	zero,-24504(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    7c04:	d0281a45 	stb	zero,-24471(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    7c08:	d0281245 	stb	zero,-24503(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    7c0c:	d0281715 	stw	zero,-24484(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    7c10:	d0281315 	stw	zero,-24500(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    7c14:	d0282515 	stw	zero,-24428(gp)
    OSIdleCtrMax  = 0L;
    7c18:	d0281815 	stw	zero,-24480(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    7c1c:	d0282405 	stb	zero,-24432(gp)
#endif
}
    7c20:	e037883a 	mov	sp,fp
    7c24:	df000017 	ldw	fp,0(sp)
    7c28:	dec00104 	addi	sp,sp,4
    7c2c:	f800283a 	ret

00007c30 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    7c30:	defffd04 	addi	sp,sp,-12
    7c34:	df000215 	stw	fp,8(sp)
    7c38:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    7c3c:	d0281e05 	stb	zero,-24456(gp)
    prdytbl       = &OSRdyTbl[0];
    7c40:	d0a81e44 	addi	r2,gp,-24455
    7c44:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    7c48:	e03ffe05 	stb	zero,-8(fp)
    7c4c:	00000706 	br	7c6c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    7c50:	e0bfff17 	ldw	r2,-4(fp)
    7c54:	10c00044 	addi	r3,r2,1
    7c58:	e0ffff15 	stw	r3,-4(fp)
    7c5c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    7c60:	e0bffe03 	ldbu	r2,-8(fp)
    7c64:	10800044 	addi	r2,r2,1
    7c68:	e0bffe05 	stb	r2,-8(fp)
    7c6c:	e0bffe03 	ldbu	r2,-8(fp)
    7c70:	108000f0 	cmpltui	r2,r2,3
    7c74:	103ff61e 	bne	r2,zero,7c50 <__alt_mem_Flash_flash_data+0xf4007c50>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    7c78:	d0281445 	stb	zero,-24495(gp)
    OSPrioHighRdy = 0;
    7c7c:	d0281405 	stb	zero,-24496(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    7c80:	d0281c15 	stw	zero,-24464(gp)
    OSTCBCur      = (OS_TCB *)0;
    7c84:	d0282115 	stw	zero,-24444(gp)
}
    7c88:	e037883a 	mov	sp,fp
    7c8c:	df000017 	ldw	fp,0(sp)
    7c90:	dec00104 	addi	sp,sp,4
    7c94:	f800283a 	ret

00007c98 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    7c98:	defff804 	addi	sp,sp,-32
    7c9c:	dfc00715 	stw	ra,28(sp)
    7ca0:	df000615 	stw	fp,24(sp)
    7ca4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    7ca8:	00bfffd4 	movui	r2,65535
    7cac:	d8800015 	stw	r2,0(sp)
    7cb0:	008000b4 	movhi	r2,2
    7cb4:	10943c04 	addi	r2,r2,20720
    7cb8:	d8800115 	stw	r2,4(sp)
    7cbc:	00808004 	movi	r2,512
    7cc0:	d8800215 	stw	r2,8(sp)
    7cc4:	d8000315 	stw	zero,12(sp)
    7cc8:	008000c4 	movi	r2,3
    7ccc:	d8800415 	stw	r2,16(sp)
    7cd0:	01000074 	movhi	r4,1
    7cd4:	21204a04 	addi	r4,r4,-32472
    7cd8:	000b883a 	mov	r5,zero
    7cdc:	018000b4 	movhi	r6,2
    7ce0:	31963b04 	addi	r6,r6,22764
    7ce4:	01c00504 	movi	r7,20
    7ce8:	000d6c40 	call	d6c4 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    7cec:	01000504 	movi	r4,20
    7cf0:	01400074 	movhi	r5,1
    7cf4:	294bc504 	addi	r5,r5,12052
    7cf8:	e1bfff04 	addi	r6,fp,-4
    7cfc:	000df900 	call	df90 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    7d00:	e037883a 	mov	sp,fp
    7d04:	dfc00117 	ldw	ra,4(sp)
    7d08:	df000017 	ldw	fp,0(sp)
    7d0c:	dec00204 	addi	sp,sp,8
    7d10:	f800283a 	ret

00007d14 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    7d14:	defff804 	addi	sp,sp,-32
    7d18:	dfc00715 	stw	ra,28(sp)
    7d1c:	df000615 	stw	fp,24(sp)
    7d20:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    7d24:	00bfff94 	movui	r2,65534
    7d28:	d8800015 	stw	r2,0(sp)
    7d2c:	008000b4 	movhi	r2,2
    7d30:	1091c404 	addi	r2,r2,18192
    7d34:	d8800115 	stw	r2,4(sp)
    7d38:	00808004 	movi	r2,512
    7d3c:	d8800215 	stw	r2,8(sp)
    7d40:	d8000315 	stw	zero,12(sp)
    7d44:	008000c4 	movi	r2,3
    7d48:	d8800415 	stw	r2,16(sp)
    7d4c:	01000074 	movhi	r4,1
    7d50:	21206104 	addi	r4,r4,-32380
    7d54:	000b883a 	mov	r5,zero
    7d58:	018000b4 	movhi	r6,2
    7d5c:	3193c304 	addi	r6,r6,20236
    7d60:	01c004c4 	movi	r7,19
    7d64:	000d6c40 	call	d6c4 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    7d68:	010004c4 	movi	r4,19
    7d6c:	01400074 	movhi	r5,1
    7d70:	294bc904 	addi	r5,r5,12068
    7d74:	e1bfff04 	addi	r6,fp,-4
    7d78:	000df900 	call	df90 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    7d7c:	e037883a 	mov	sp,fp
    7d80:	dfc00117 	ldw	ra,4(sp)
    7d84:	df000017 	ldw	fp,0(sp)
    7d88:	dec00204 	addi	sp,sp,8
    7d8c:	f800283a 	ret

00007d90 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    7d90:	defffb04 	addi	sp,sp,-20
    7d94:	dfc00415 	stw	ra,16(sp)
    7d98:	df000315 	stw	fp,12(sp)
    7d9c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    7da0:	010000b4 	movhi	r4,2
    7da4:	21190c04 	addi	r4,r4,25648
    7da8:	01414404 	movi	r5,1296
    7dac:	0007e700 	call	7e70 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    7db0:	010000b4 	movhi	r4,2
    7db4:	211a5004 	addi	r4,r4,26944
    7db8:	01401504 	movi	r5,84
    7dbc:	0007e700 	call	7e70 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    7dc0:	008000b4 	movhi	r2,2
    7dc4:	10990c04 	addi	r2,r2,25648
    7dc8:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    7dcc:	008000b4 	movhi	r2,2
    7dd0:	10992704 	addi	r2,r2,25756
    7dd4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    7dd8:	e03ffd05 	stb	zero,-12(fp)
    7ddc:	00001106 	br	7e24 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    7de0:	e0bffe17 	ldw	r2,-8(fp)
    7de4:	e0ffff17 	ldw	r3,-4(fp)
    7de8:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    7dec:	e0bffe17 	ldw	r2,-8(fp)
    7df0:	00c00fc4 	movi	r3,63
    7df4:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    7df8:	e0bffe17 	ldw	r2,-8(fp)
    7dfc:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    7e00:	e0bffe17 	ldw	r2,-8(fp)
    7e04:	10801b04 	addi	r2,r2,108
    7e08:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    7e0c:	e0bfff17 	ldw	r2,-4(fp)
    7e10:	10801b04 	addi	r2,r2,108
    7e14:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    7e18:	e0bffd03 	ldbu	r2,-12(fp)
    7e1c:	10800044 	addi	r2,r2,1
    7e20:	e0bffd05 	stb	r2,-12(fp)
    7e24:	e0bffd03 	ldbu	r2,-12(fp)
    7e28:	108002f0 	cmpltui	r2,r2,11
    7e2c:	103fec1e 	bne	r2,zero,7de0 <__alt_mem_Flash_flash_data+0xf4007de0>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    7e30:	e0bffe17 	ldw	r2,-8(fp)
    7e34:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    7e38:	e0bffe17 	ldw	r2,-8(fp)
    7e3c:	00c00fc4 	movi	r3,63
    7e40:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    7e44:	e0bffe17 	ldw	r2,-8(fp)
    7e48:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    7e4c:	d0281515 	stw	zero,-24492(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    7e50:	008000b4 	movhi	r2,2
    7e54:	10990c04 	addi	r2,r2,25648
    7e58:	d0a81915 	stw	r2,-24476(gp)
}
    7e5c:	e037883a 	mov	sp,fp
    7e60:	dfc00117 	ldw	ra,4(sp)
    7e64:	df000017 	ldw	fp,0(sp)
    7e68:	dec00204 	addi	sp,sp,8
    7e6c:	f800283a 	ret

00007e70 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    7e70:	defffd04 	addi	sp,sp,-12
    7e74:	df000215 	stw	fp,8(sp)
    7e78:	df000204 	addi	fp,sp,8
    7e7c:	e13ffe15 	stw	r4,-8(fp)
    7e80:	2805883a 	mov	r2,r5
    7e84:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    7e88:	00000706 	br	7ea8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    7e8c:	e0bffe17 	ldw	r2,-8(fp)
    7e90:	10c00044 	addi	r3,r2,1
    7e94:	e0fffe15 	stw	r3,-8(fp)
    7e98:	10000005 	stb	zero,0(r2)
        size--;
    7e9c:	e0bfff0b 	ldhu	r2,-4(fp)
    7ea0:	10bfffc4 	addi	r2,r2,-1
    7ea4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    7ea8:	e0bfff0b 	ldhu	r2,-4(fp)
    7eac:	103ff71e 	bne	r2,zero,7e8c <__alt_mem_Flash_flash_data+0xf4007e8c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    7eb0:	e037883a 	mov	sp,fp
    7eb4:	df000017 	ldw	fp,0(sp)
    7eb8:	dec00104 	addi	sp,sp,4
    7ebc:	f800283a 	ret

00007ec0 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    7ec0:	defffc04 	addi	sp,sp,-16
    7ec4:	df000315 	stw	fp,12(sp)
    7ec8:	df000304 	addi	fp,sp,12
    7ecc:	e13ffd15 	stw	r4,-12(fp)
    7ed0:	e17ffe15 	stw	r5,-8(fp)
    7ed4:	3005883a 	mov	r2,r6
    7ed8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    7edc:	00000b06 	br	7f0c <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    7ee0:	e0bffd17 	ldw	r2,-12(fp)
    7ee4:	10c00044 	addi	r3,r2,1
    7ee8:	e0fffd15 	stw	r3,-12(fp)
    7eec:	e0fffe17 	ldw	r3,-8(fp)
    7ef0:	19000044 	addi	r4,r3,1
    7ef4:	e13ffe15 	stw	r4,-8(fp)
    7ef8:	18c00003 	ldbu	r3,0(r3)
    7efc:	10c00005 	stb	r3,0(r2)
        size--;
    7f00:	e0bfff0b 	ldhu	r2,-4(fp)
    7f04:	10bfffc4 	addi	r2,r2,-1
    7f08:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    7f0c:	e0bfff0b 	ldhu	r2,-4(fp)
    7f10:	103ff31e 	bne	r2,zero,7ee0 <__alt_mem_Flash_flash_data+0xf4007ee0>
        *pdest++ = *psrc++;
        size--;
    }
}
    7f14:	e037883a 	mov	sp,fp
    7f18:	df000017 	ldw	fp,0(sp)
    7f1c:	dec00104 	addi	sp,sp,4
    7f20:	f800283a 	ret

00007f24 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    7f24:	defffb04 	addi	sp,sp,-20
    7f28:	dfc00415 	stw	ra,16(sp)
    7f2c:	df000315 	stw	fp,12(sp)
    7f30:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    7f34:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7f38:	0005303a 	rdctl	r2,status
    7f3c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7f40:	e0fffe17 	ldw	r3,-8(fp)
    7f44:	00bfff84 	movi	r2,-2
    7f48:	1884703a 	and	r2,r3,r2
    7f4c:	1001703a 	wrctl	status,r2
  
  return context;
    7f50:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    7f54:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    7f58:	d0a82003 	ldbu	r2,-24448(gp)
    7f5c:	10803fcc 	andi	r2,r2,255
    7f60:	10001a1e 	bne	r2,zero,7fcc <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    7f64:	d0a81203 	ldbu	r2,-24504(gp)
    7f68:	10803fcc 	andi	r2,r2,255
    7f6c:	1000171e 	bne	r2,zero,7fcc <OS_Sched+0xa8>
            OS_SchedNew();
    7f70:	0007ff00 	call	7ff0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    7f74:	d0e81403 	ldbu	r3,-24496(gp)
    7f78:	d0a81443 	ldbu	r2,-24495(gp)
    7f7c:	18c03fcc 	andi	r3,r3,255
    7f80:	10803fcc 	andi	r2,r2,255
    7f84:	18801126 	beq	r3,r2,7fcc <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    7f88:	d0a81403 	ldbu	r2,-24496(gp)
    7f8c:	10c03fcc 	andi	r3,r2,255
    7f90:	008000b4 	movhi	r2,2
    7f94:	109a5004 	addi	r2,r2,26944
    7f98:	18c7883a 	add	r3,r3,r3
    7f9c:	18c7883a 	add	r3,r3,r3
    7fa0:	10c5883a 	add	r2,r2,r3
    7fa4:	10800017 	ldw	r2,0(r2)
    7fa8:	d0a81c15 	stw	r2,-24464(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    7fac:	d0a81c17 	ldw	r2,-24464(gp)
    7fb0:	10c00e17 	ldw	r3,56(r2)
    7fb4:	18c00044 	addi	r3,r3,1
    7fb8:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    7fbc:	d0a81717 	ldw	r2,-24484(gp)
    7fc0:	10800044 	addi	r2,r2,1
    7fc4:	d0a81715 	stw	r2,-24484(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    7fc8:	001212c0 	call	1212c <OSCtxSw>
    7fcc:	e0bffd17 	ldw	r2,-12(fp)
    7fd0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7fd4:	e0bfff17 	ldw	r2,-4(fp)
    7fd8:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    7fdc:	e037883a 	mov	sp,fp
    7fe0:	dfc00117 	ldw	ra,4(sp)
    7fe4:	df000017 	ldw	fp,0(sp)
    7fe8:	dec00204 	addi	sp,sp,8
    7fec:	f800283a 	ret

00007ff0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    7ff0:	defffe04 	addi	sp,sp,-8
    7ff4:	df000115 	stw	fp,4(sp)
    7ff8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    7ffc:	d0a81e03 	ldbu	r2,-24456(gp)
    8000:	10c03fcc 	andi	r3,r2,255
    8004:	00800074 	movhi	r2,1
    8008:	108b8504 	addi	r2,r2,11796
    800c:	10c5883a 	add	r2,r2,r3
    8010:	10800003 	ldbu	r2,0(r2)
    8014:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    8018:	e0bfff03 	ldbu	r2,-4(fp)
    801c:	100490fa 	slli	r2,r2,3
    8020:	1009883a 	mov	r4,r2
    8024:	e0ffff03 	ldbu	r3,-4(fp)
    8028:	d0a81e44 	addi	r2,gp,-24455
    802c:	1885883a 	add	r2,r3,r2
    8030:	10800003 	ldbu	r2,0(r2)
    8034:	10c03fcc 	andi	r3,r2,255
    8038:	00800074 	movhi	r2,1
    803c:	108b8504 	addi	r2,r2,11796
    8040:	10c5883a 	add	r2,r2,r3
    8044:	10800003 	ldbu	r2,0(r2)
    8048:	2085883a 	add	r2,r4,r2
    804c:	d0a81405 	stb	r2,-24496(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    8050:	e037883a 	mov	sp,fp
    8054:	df000017 	ldw	fp,0(sp)
    8058:	dec00104 	addi	sp,sp,4
    805c:	f800283a 	ret

00008060 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    8060:	defffc04 	addi	sp,sp,-16
    8064:	df000315 	stw	fp,12(sp)
    8068:	df000304 	addi	fp,sp,12
    806c:	e13ffe15 	stw	r4,-8(fp)
    8070:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    8074:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    8078:	00000b06 	br	80a8 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    807c:	e0bffe17 	ldw	r2,-8(fp)
    8080:	10c00044 	addi	r3,r2,1
    8084:	e0fffe15 	stw	r3,-8(fp)
    8088:	e0ffff17 	ldw	r3,-4(fp)
    808c:	19000044 	addi	r4,r3,1
    8090:	e13fff15 	stw	r4,-4(fp)
    8094:	18c00003 	ldbu	r3,0(r3)
    8098:	10c00005 	stb	r3,0(r2)
        len++;
    809c:	e0bffd03 	ldbu	r2,-12(fp)
    80a0:	10800044 	addi	r2,r2,1
    80a4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    80a8:	e0bfff17 	ldw	r2,-4(fp)
    80ac:	10800003 	ldbu	r2,0(r2)
    80b0:	10803fcc 	andi	r2,r2,255
    80b4:	103ff11e 	bne	r2,zero,807c <__alt_mem_Flash_flash_data+0xf400807c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    80b8:	e0bffe17 	ldw	r2,-8(fp)
    80bc:	10000005 	stb	zero,0(r2)
    return (len);
    80c0:	e0bffd03 	ldbu	r2,-12(fp)
}
    80c4:	e037883a 	mov	sp,fp
    80c8:	df000017 	ldw	fp,0(sp)
    80cc:	dec00104 	addi	sp,sp,4
    80d0:	f800283a 	ret

000080d4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    80d4:	defffd04 	addi	sp,sp,-12
    80d8:	df000215 	stw	fp,8(sp)
    80dc:	df000204 	addi	fp,sp,8
    80e0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    80e4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    80e8:	00000606 	br	8104 <OS_StrLen+0x30>
        psrc++;
    80ec:	e0bfff17 	ldw	r2,-4(fp)
    80f0:	10800044 	addi	r2,r2,1
    80f4:	e0bfff15 	stw	r2,-4(fp)
        len++;
    80f8:	e0bffe03 	ldbu	r2,-8(fp)
    80fc:	10800044 	addi	r2,r2,1
    8100:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    8104:	e0bfff17 	ldw	r2,-4(fp)
    8108:	10800003 	ldbu	r2,0(r2)
    810c:	10803fcc 	andi	r2,r2,255
    8110:	103ff61e 	bne	r2,zero,80ec <__alt_mem_Flash_flash_data+0xf40080ec>
        psrc++;
        len++;
    }
    return (len);
    8114:	e0bffe03 	ldbu	r2,-8(fp)
}
    8118:	e037883a 	mov	sp,fp
    811c:	df000017 	ldw	fp,0(sp)
    8120:	dec00104 	addi	sp,sp,4
    8124:	f800283a 	ret

00008128 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    8128:	defffa04 	addi	sp,sp,-24
    812c:	dfc00515 	stw	ra,20(sp)
    8130:	df000415 	stw	fp,16(sp)
    8134:	df000404 	addi	fp,sp,16
    8138:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    813c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8140:	0005303a 	rdctl	r2,status
    8144:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8148:	e0fffd17 	ldw	r3,-12(fp)
    814c:	00bfff84 	movi	r2,-2
    8150:	1884703a 	and	r2,r3,r2
    8154:	1001703a 	wrctl	status,r2
  
  return context;
    8158:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    815c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    8160:	d0a81317 	ldw	r2,-24500(gp)
    8164:	10800044 	addi	r2,r2,1
    8168:	d0a81315 	stw	r2,-24500(gp)
    816c:	e0bffc17 	ldw	r2,-16(fp)
    8170:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8174:	e0bffe17 	ldw	r2,-8(fp)
    8178:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    817c:	00124240 	call	12424 <OSTaskIdleHook>
    }
    8180:	003fef06 	br	8140 <__alt_mem_Flash_flash_data+0xf4008140>

00008184 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    8184:	defff804 	addi	sp,sp,-32
    8188:	dfc00715 	stw	ra,28(sp)
    818c:	df000615 	stw	fp,24(sp)
    8190:	dc400515 	stw	r17,20(sp)
    8194:	dc000415 	stw	r16,16(sp)
    8198:	df000604 	addi	fp,sp,24
    819c:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    81a0:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    81a4:	00000206 	br	81b0 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    81a8:	01000044 	movi	r4,1
    81ac:	000e8bc0 	call	e8bc <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    81b0:	d0a82403 	ldbu	r2,-24432(gp)
    81b4:	10803fcc 	andi	r2,r2,255
    81b8:	103ffb26 	beq	r2,zero,81a8 <__alt_mem_Flash_flash_data+0xf40081a8>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    81bc:	d0e81817 	ldw	r3,-24480(gp)
    81c0:	00947b34 	movhi	r2,20972
    81c4:	10a147c4 	addi	r2,r2,-31457
    81c8:	1888383a 	mulxuu	r4,r3,r2
    81cc:	1885383a 	mul	r2,r3,r2
    81d0:	1021883a 	mov	r16,r2
    81d4:	2023883a 	mov	r17,r4
    81d8:	8804d17a 	srli	r2,r17,5
    81dc:	d0a81815 	stw	r2,-24480(gp)
    if (OSIdleCtrMax == 0L) {
    81e0:	d0a81817 	ldw	r2,-24480(gp)
    81e4:	1000031e 	bne	r2,zero,81f4 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
    81e8:	d0281a05 	stb	zero,-24472(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    81ec:	01003fc4 	movi	r4,255
    81f0:	000e5100 	call	e510 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    81f4:	0005303a 	rdctl	r2,status
    81f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    81fc:	e0fffb17 	ldw	r3,-20(fp)
    8200:	00bfff84 	movi	r2,-2
    8204:	1884703a 	and	r2,r3,r2
    8208:	1001703a 	wrctl	status,r2
  
  return context;
    820c:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    8210:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    8214:	d0a81317 	ldw	r2,-24500(gp)
    8218:	d0a82515 	stw	r2,-24428(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    821c:	d0281315 	stw	zero,-24500(gp)
    8220:	e0bffa17 	ldw	r2,-24(fp)
    8224:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8228:	e0bffc17 	ldw	r2,-16(fp)
    822c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    8230:	d0e82517 	ldw	r3,-24428(gp)
    8234:	d0a81817 	ldw	r2,-24480(gp)
    8238:	1885203a 	divu	r2,r3,r2
    823c:	1007883a 	mov	r3,r2
    8240:	00801904 	movi	r2,100
    8244:	10c5c83a 	sub	r2,r2,r3
    8248:	d0a81a05 	stb	r2,-24472(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    824c:	00123b40 	call	123b4 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    8250:	00082600 	call	8260 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    8254:	0009883a 	mov	r4,zero
    8258:	000e8bc0 	call	e8bc <OSTimeDly>
    }
    825c:	003fe506 	br	81f4 <__alt_mem_Flash_flash_data+0xf40081f4>

00008260 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    8260:	defffa04 	addi	sp,sp,-24
    8264:	dfc00515 	stw	ra,20(sp)
    8268:	df000415 	stw	fp,16(sp)
    826c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    8270:	e03ffc05 	stb	zero,-16(fp)
    8274:	00002406 	br	8308 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    8278:	e0fffc03 	ldbu	r3,-16(fp)
    827c:	e0bffe04 	addi	r2,fp,-8
    8280:	1809883a 	mov	r4,r3
    8284:	100b883a 	mov	r5,r2
    8288:	000e3480 	call	e348 <OSTaskStkChk>
    828c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    8290:	e0bffc43 	ldbu	r2,-15(fp)
    8294:	1000191e 	bne	r2,zero,82fc <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    8298:	e0fffc03 	ldbu	r3,-16(fp)
    829c:	008000b4 	movhi	r2,2
    82a0:	109a5004 	addi	r2,r2,26944
    82a4:	18c7883a 	add	r3,r3,r3
    82a8:	18c7883a 	add	r3,r3,r3
    82ac:	10c5883a 	add	r2,r2,r3
    82b0:	10800017 	ldw	r2,0(r2)
    82b4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    82b8:	e0bffd17 	ldw	r2,-12(fp)
    82bc:	10000f26 	beq	r2,zero,82fc <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    82c0:	e0bffd17 	ldw	r2,-12(fp)
    82c4:	10800060 	cmpeqi	r2,r2,1
    82c8:	10000c1e 	bne	r2,zero,82fc <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    82cc:	e0bffd17 	ldw	r2,-12(fp)
    82d0:	10c00217 	ldw	r3,8(r2)
    82d4:	e0bffd17 	ldw	r2,-12(fp)
    82d8:	10800317 	ldw	r2,12(r2)
    82dc:	1085883a 	add	r2,r2,r2
    82e0:	1085883a 	add	r2,r2,r2
    82e4:	1887883a 	add	r3,r3,r2
    82e8:	e0bffd17 	ldw	r2,-12(fp)
    82ec:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    82f0:	e0ffff17 	ldw	r3,-4(fp)
    82f4:	e0bffd17 	ldw	r2,-12(fp)
    82f8:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    82fc:	e0bffc03 	ldbu	r2,-16(fp)
    8300:	10800044 	addi	r2,r2,1
    8304:	e0bffc05 	stb	r2,-16(fp)
    8308:	e0bffc03 	ldbu	r2,-16(fp)
    830c:	10800570 	cmpltui	r2,r2,21
    8310:	103fd91e 	bne	r2,zero,8278 <__alt_mem_Flash_flash_data+0xf4008278>
#endif
                }
            }
        }
    }
}
    8314:	e037883a 	mov	sp,fp
    8318:	dfc00117 	ldw	ra,4(sp)
    831c:	df000017 	ldw	fp,0(sp)
    8320:	dec00204 	addi	sp,sp,8
    8324:	f800283a 	ret

00008328 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    8328:	defff204 	addi	sp,sp,-56
    832c:	dfc00d15 	stw	ra,52(sp)
    8330:	df000c15 	stw	fp,48(sp)
    8334:	df000c04 	addi	fp,sp,48
    8338:	e17ffc15 	stw	r5,-16(fp)
    833c:	e1bffd15 	stw	r6,-12(fp)
    8340:	3807883a 	mov	r3,r7
    8344:	e0800417 	ldw	r2,16(fp)
    8348:	e13ffb05 	stb	r4,-20(fp)
    834c:	e0fffe0d 	sth	r3,-8(fp)
    8350:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    8354:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8358:	0005303a 	rdctl	r2,status
    835c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8360:	e0fff617 	ldw	r3,-40(fp)
    8364:	00bfff84 	movi	r2,-2
    8368:	1884703a 	and	r2,r3,r2
    836c:	1001703a 	wrctl	status,r2
  
  return context;
    8370:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
    8374:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    8378:	d0a81917 	ldw	r2,-24476(gp)
    837c:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
    8380:	e0bff517 	ldw	r2,-44(fp)
    8384:	10009326 	beq	r2,zero,85d4 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    8388:	e0bff517 	ldw	r2,-44(fp)
    838c:	10800517 	ldw	r2,20(r2)
    8390:	d0a81915 	stw	r2,-24476(gp)
    8394:	e0bff417 	ldw	r2,-48(fp)
    8398:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    839c:	e0bff717 	ldw	r2,-36(fp)
    83a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    83a4:	e0bff517 	ldw	r2,-44(fp)
    83a8:	e0fffc17 	ldw	r3,-16(fp)
    83ac:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    83b0:	e0bff517 	ldw	r2,-44(fp)
    83b4:	e0fffb03 	ldbu	r3,-20(fp)
    83b8:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    83bc:	e0bff517 	ldw	r2,-44(fp)
    83c0:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    83c4:	e0bff517 	ldw	r2,-44(fp)
    83c8:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    83cc:	e0bff517 	ldw	r2,-44(fp)
    83d0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    83d4:	e0bff517 	ldw	r2,-44(fp)
    83d8:	e0c00317 	ldw	r3,12(fp)
    83dc:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    83e0:	e0bff517 	ldw	r2,-44(fp)
    83e4:	e0c00217 	ldw	r3,8(fp)
    83e8:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    83ec:	e0bff517 	ldw	r2,-44(fp)
    83f0:	e0fffd17 	ldw	r3,-12(fp)
    83f4:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    83f8:	e0bff517 	ldw	r2,-44(fp)
    83fc:	e0ffff0b 	ldhu	r3,-4(fp)
    8400:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    8404:	e0bff517 	ldw	r2,-44(fp)
    8408:	e0fffe0b 	ldhu	r3,-8(fp)
    840c:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    8410:	e0bff517 	ldw	r2,-44(fp)
    8414:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    8418:	e0bffb03 	ldbu	r2,-20(fp)
    841c:	1004d0fa 	srli	r2,r2,3
    8420:	1007883a 	mov	r3,r2
    8424:	e0bff517 	ldw	r2,-44(fp)
    8428:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    842c:	e0bffb03 	ldbu	r2,-20(fp)
    8430:	108001cc 	andi	r2,r2,7
    8434:	1007883a 	mov	r3,r2
    8438:	e0bff517 	ldw	r2,-44(fp)
    843c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    8440:	e0bff517 	ldw	r2,-44(fp)
    8444:	10800d03 	ldbu	r2,52(r2)
    8448:	10803fcc 	andi	r2,r2,255
    844c:	00c00044 	movi	r3,1
    8450:	1884983a 	sll	r2,r3,r2
    8454:	1007883a 	mov	r3,r2
    8458:	e0bff517 	ldw	r2,-44(fp)
    845c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    8460:	e0bff517 	ldw	r2,-44(fp)
    8464:	10800cc3 	ldbu	r2,51(r2)
    8468:	10803fcc 	andi	r2,r2,255
    846c:	00c00044 	movi	r3,1
    8470:	1884983a 	sll	r2,r3,r2
    8474:	1007883a 	mov	r3,r2
    8478:	e0bff517 	ldw	r2,-44(fp)
    847c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    8480:	e0bff517 	ldw	r2,-44(fp)
    8484:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    8488:	e0bff517 	ldw	r2,-44(fp)
    848c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    8490:	e0bff517 	ldw	r2,-44(fp)
    8494:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    8498:	e0bff517 	ldw	r2,-44(fp)
    849c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    84a0:	e0bff517 	ldw	r2,-44(fp)
    84a4:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    84a8:	e0bff517 	ldw	r2,-44(fp)
    84ac:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    84b0:	e0bff517 	ldw	r2,-44(fp)
    84b4:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    84b8:	e0bff517 	ldw	r2,-44(fp)
    84bc:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    84c0:	e0bff517 	ldw	r2,-44(fp)
    84c4:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    84c8:	e0bff517 	ldw	r2,-44(fp)
    84cc:	00c00fc4 	movi	r3,63
    84d0:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    84d4:	e0bff517 	ldw	r2,-44(fp)
    84d8:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    84dc:	e13ff517 	ldw	r4,-44(fp)
    84e0:	00124400 	call	12440 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    84e4:	e13ff517 	ldw	r4,-44(fp)
    84e8:	00123580 	call	12358 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    84ec:	0005303a 	rdctl	r2,status
    84f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    84f4:	e0fff817 	ldw	r3,-32(fp)
    84f8:	00bfff84 	movi	r2,-2
    84fc:	1884703a 	and	r2,r3,r2
    8500:	1001703a 	wrctl	status,r2
  
  return context;
    8504:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
    8508:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    850c:	e0fffb03 	ldbu	r3,-20(fp)
    8510:	008000b4 	movhi	r2,2
    8514:	109a5004 	addi	r2,r2,26944
    8518:	18c7883a 	add	r3,r3,r3
    851c:	18c7883a 	add	r3,r3,r3
    8520:	10c5883a 	add	r2,r2,r3
    8524:	e0fff517 	ldw	r3,-44(fp)
    8528:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    852c:	d0e81517 	ldw	r3,-24492(gp)
    8530:	e0bff517 	ldw	r2,-44(fp)
    8534:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    8538:	e0bff517 	ldw	r2,-44(fp)
    853c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    8540:	d0a81517 	ldw	r2,-24492(gp)
    8544:	10000326 	beq	r2,zero,8554 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    8548:	d0a81517 	ldw	r2,-24492(gp)
    854c:	e0fff517 	ldw	r3,-44(fp)
    8550:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    8554:	e0bff517 	ldw	r2,-44(fp)
    8558:	d0a81515 	stw	r2,-24492(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    855c:	e0bff517 	ldw	r2,-44(fp)
    8560:	10c00d83 	ldbu	r3,54(r2)
    8564:	d0a81e03 	ldbu	r2,-24456(gp)
    8568:	1884b03a 	or	r2,r3,r2
    856c:	d0a81e05 	stb	r2,-24456(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    8570:	e0bff517 	ldw	r2,-44(fp)
    8574:	10800d03 	ldbu	r2,52(r2)
    8578:	10c03fcc 	andi	r3,r2,255
    857c:	e0bff517 	ldw	r2,-44(fp)
    8580:	10800d03 	ldbu	r2,52(r2)
    8584:	11003fcc 	andi	r4,r2,255
    8588:	d0a81e44 	addi	r2,gp,-24455
    858c:	2085883a 	add	r2,r4,r2
    8590:	11000003 	ldbu	r4,0(r2)
    8594:	e0bff517 	ldw	r2,-44(fp)
    8598:	10800d43 	ldbu	r2,53(r2)
    859c:	2084b03a 	or	r2,r4,r2
    85a0:	1009883a 	mov	r4,r2
    85a4:	d0a81e44 	addi	r2,gp,-24455
    85a8:	1885883a 	add	r2,r3,r2
    85ac:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    85b0:	d0a81a43 	ldbu	r2,-24471(gp)
    85b4:	10800044 	addi	r2,r2,1
    85b8:	d0a81a45 	stb	r2,-24471(gp)
    85bc:	e0bff417 	ldw	r2,-48(fp)
    85c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    85c4:	e0bff917 	ldw	r2,-28(fp)
    85c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    85cc:	0005883a 	mov	r2,zero
    85d0:	00000506 	br	85e8 <OS_TCBInit+0x2c0>
    85d4:	e0bff417 	ldw	r2,-48(fp)
    85d8:	e0bffa15 	stw	r2,-24(fp)
    85dc:	e0bffa17 	ldw	r2,-24(fp)
    85e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    85e4:	00801084 	movi	r2,66
}
    85e8:	e037883a 	mov	sp,fp
    85ec:	dfc00117 	ldw	ra,4(sp)
    85f0:	df000017 	ldw	fp,0(sp)
    85f4:	dec00204 	addi	sp,sp,8
    85f8:	f800283a 	ret

000085fc <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    85fc:	defffe04 	addi	sp,sp,-8
    8600:	df000115 	stw	fp,4(sp)
    8604:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    8608:	d0a01904 	addi	r2,gp,-32668
    860c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    8610:	d0a01a04 	addi	r2,gp,-32664
    8614:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    8618:	d0a01b84 	addi	r2,gp,-32658
    861c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    8620:	d0a01c04 	addi	r2,gp,-32656
    8624:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    8628:	d0a01b04 	addi	r2,gp,-32660
    862c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    8630:	d0a01c84 	addi	r2,gp,-32654
    8634:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    8638:	d0a01d04 	addi	r2,gp,-32652
    863c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    8640:	d0a01d84 	addi	r2,gp,-32650
    8644:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    8648:	d0a01e04 	addi	r2,gp,-32648
    864c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    8650:	d0a01e84 	addi	r2,gp,-32646
    8654:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    8658:	d0a01f04 	addi	r2,gp,-32644
    865c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    8660:	d0a01f84 	addi	r2,gp,-32642
    8664:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    8668:	d0a02004 	addi	r2,gp,-32640
    866c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    8670:	d0a02084 	addi	r2,gp,-32638
    8674:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    8678:	d0a02104 	addi	r2,gp,-32636
    867c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    8680:	d0a02184 	addi	r2,gp,-32634
    8684:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    8688:	d0a02204 	addi	r2,gp,-32632
    868c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    8690:	d0a02284 	addi	r2,gp,-32630
    8694:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    8698:	d0a02304 	addi	r2,gp,-32628
    869c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    86a0:	d0a02384 	addi	r2,gp,-32626
    86a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    86a8:	d0a02404 	addi	r2,gp,-32624
    86ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    86b0:	d0a02484 	addi	r2,gp,-32622
    86b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    86b8:	d0a02504 	addi	r2,gp,-32620
    86bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    86c0:	d0a02584 	addi	r2,gp,-32618
    86c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    86c8:	d0a02604 	addi	r2,gp,-32616
    86cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    86d0:	d0a02684 	addi	r2,gp,-32614
    86d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    86d8:	d0a02704 	addi	r2,gp,-32612
    86dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    86e0:	d0a02784 	addi	r2,gp,-32610
    86e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    86e8:	d0a02804 	addi	r2,gp,-32608
    86ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    86f0:	d0a02884 	addi	r2,gp,-32606
    86f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    86f8:	d0a02904 	addi	r2,gp,-32604
    86fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    8700:	d0a02984 	addi	r2,gp,-32602
    8704:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    8708:	d0a02a04 	addi	r2,gp,-32600
    870c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    8710:	d0a02a84 	addi	r2,gp,-32598
    8714:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    8718:	d0a02b04 	addi	r2,gp,-32596
    871c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    8720:	d0a02b84 	addi	r2,gp,-32594
    8724:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    8728:	d0a02c04 	addi	r2,gp,-32592
    872c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    8730:	d0a02c84 	addi	r2,gp,-32590
    8734:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    8738:	d0a02d04 	addi	r2,gp,-32588
    873c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    8740:	d0a02d84 	addi	r2,gp,-32586
    8744:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    8748:	d0a02e04 	addi	r2,gp,-32584
    874c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    8750:	d0a02e84 	addi	r2,gp,-32582
    8754:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    8758:	d0a02f04 	addi	r2,gp,-32580
    875c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    8760:	d0a02f84 	addi	r2,gp,-32578
    8764:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    8768:	d0a03004 	addi	r2,gp,-32576
    876c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    8770:	d0a03504 	addi	r2,gp,-32556
    8774:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    8778:	e037883a 	mov	sp,fp
    877c:	df000017 	ldw	fp,0(sp)
    8780:	dec00104 	addi	sp,sp,4
    8784:	f800283a 	ret

00008788 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    8788:	defff204 	addi	sp,sp,-56
    878c:	df000d15 	stw	fp,52(sp)
    8790:	df000d04 	addi	fp,sp,52
    8794:	e13ffc15 	stw	r4,-16(fp)
    8798:	2807883a 	mov	r3,r5
    879c:	3005883a 	mov	r2,r6
    87a0:	e1ffff15 	stw	r7,-4(fp)
    87a4:	e0fffd0d 	sth	r3,-12(fp)
    87a8:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    87ac:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    87b0:	e0bfff17 	ldw	r2,-4(fp)
    87b4:	1000021e 	bne	r2,zero,87c0 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    87b8:	0005883a 	mov	r2,zero
    87bc:	0000b006 	br	8a80 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    87c0:	e0bffc17 	ldw	r2,-16(fp)
    87c4:	1000051e 	bne	r2,zero,87dc <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    87c8:	e0bfff17 	ldw	r2,-4(fp)
    87cc:	00c01b84 	movi	r3,110
    87d0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    87d4:	0005883a 	mov	r2,zero
    87d8:	0000a906 	br	8a80 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    87dc:	e0bffc17 	ldw	r2,-16(fp)
    87e0:	10800003 	ldbu	r2,0(r2)
    87e4:	10803fcc 	andi	r2,r2,255
    87e8:	10800160 	cmpeqi	r2,r2,5
    87ec:	1000051e 	bne	r2,zero,8804 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    87f0:	e0bfff17 	ldw	r2,-4(fp)
    87f4:	00c00044 	movi	r3,1
    87f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    87fc:	0005883a 	mov	r2,zero
    8800:	00009f06 	br	8a80 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    8804:	e0fffe03 	ldbu	r3,-8(fp)
    8808:	00bfe004 	movi	r2,-128
    880c:	1884703a 	and	r2,r3,r2
    8810:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    8814:	e0bff503 	ldbu	r2,-44(fp)
    8818:	10000626 	beq	r2,zero,8834 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    881c:	e0bffe03 	ldbu	r2,-8(fp)
    8820:	10801fcc 	andi	r2,r2,127
    8824:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    8828:	00800044 	movi	r2,1
    882c:	e0bff385 	stb	r2,-50(fp)
    8830:	00000106 	br	8838 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    8834:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    8838:	e0bfff17 	ldw	r2,-4(fp)
    883c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8840:	0005303a 	rdctl	r2,status
    8844:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8848:	e0fff617 	ldw	r3,-40(fp)
    884c:	00bfff84 	movi	r2,-2
    8850:	1884703a 	and	r2,r3,r2
    8854:	1001703a 	wrctl	status,r2
  
  return context;
    8858:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
    885c:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    8860:	e0bffe03 	ldbu	r2,-8(fp)
    8864:	10c00060 	cmpeqi	r3,r2,1
    8868:	18005f1e 	bne	r3,zero,89e8 <OSFlagAccept+0x260>
    886c:	10c00088 	cmpgei	r3,r2,2
    8870:	1800021e 	bne	r3,zero,887c <OSFlagAccept+0xf4>
    8874:	10003f26 	beq	r2,zero,8974 <OSFlagAccept+0x1ec>
    8878:	00007706 	br	8a58 <OSFlagAccept+0x2d0>
    887c:	10c000a0 	cmpeqi	r3,r2,2
    8880:	1800031e 	bne	r3,zero,8890 <OSFlagAccept+0x108>
    8884:	108000e0 	cmpeqi	r2,r2,3
    8888:	10001e1e 	bne	r2,zero,8904 <OSFlagAccept+0x17c>
    888c:	00007206 	br	8a58 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    8890:	e0bffc17 	ldw	r2,-16(fp)
    8894:	10c0020b 	ldhu	r3,8(r2)
    8898:	e0bffd0b 	ldhu	r2,-12(fp)
    889c:	1884703a 	and	r2,r3,r2
    88a0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    88a4:	e0fff30b 	ldhu	r3,-52(fp)
    88a8:	e0bffd0b 	ldhu	r2,-12(fp)
    88ac:	18800d1e 	bne	r3,r2,88e4 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    88b0:	e0bff383 	ldbu	r2,-50(fp)
    88b4:	10800058 	cmpnei	r2,r2,1
    88b8:	10000d1e 	bne	r2,zero,88f0 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    88bc:	e0bffc17 	ldw	r2,-16(fp)
    88c0:	1080020b 	ldhu	r2,8(r2)
    88c4:	1007883a 	mov	r3,r2
    88c8:	e0bff30b 	ldhu	r2,-52(fp)
    88cc:	0084303a 	nor	r2,zero,r2
    88d0:	1884703a 	and	r2,r3,r2
    88d4:	1007883a 	mov	r3,r2
    88d8:	e0bffc17 	ldw	r2,-16(fp)
    88dc:	10c0020d 	sth	r3,8(r2)
    88e0:	00000306 	br	88f0 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    88e4:	e0bfff17 	ldw	r2,-4(fp)
    88e8:	00c01c04 	movi	r3,112
    88ec:	10c00005 	stb	r3,0(r2)
    88f0:	e0bff417 	ldw	r2,-48(fp)
    88f4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    88f8:	e0bff717 	ldw	r2,-36(fp)
    88fc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    8900:	00005e06 	br	8a7c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    8904:	e0bffc17 	ldw	r2,-16(fp)
    8908:	10c0020b 	ldhu	r3,8(r2)
    890c:	e0bffd0b 	ldhu	r2,-12(fp)
    8910:	1884703a 	and	r2,r3,r2
    8914:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    8918:	e0bff30b 	ldhu	r2,-52(fp)
    891c:	10000d26 	beq	r2,zero,8954 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    8920:	e0bff383 	ldbu	r2,-50(fp)
    8924:	10800058 	cmpnei	r2,r2,1
    8928:	10000d1e 	bne	r2,zero,8960 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    892c:	e0bffc17 	ldw	r2,-16(fp)
    8930:	1080020b 	ldhu	r2,8(r2)
    8934:	1007883a 	mov	r3,r2
    8938:	e0bff30b 	ldhu	r2,-52(fp)
    893c:	0084303a 	nor	r2,zero,r2
    8940:	1884703a 	and	r2,r3,r2
    8944:	1007883a 	mov	r3,r2
    8948:	e0bffc17 	ldw	r2,-16(fp)
    894c:	10c0020d 	sth	r3,8(r2)
    8950:	00000306 	br	8960 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    8954:	e0bfff17 	ldw	r2,-4(fp)
    8958:	00c01c04 	movi	r3,112
    895c:	10c00005 	stb	r3,0(r2)
    8960:	e0bff417 	ldw	r2,-48(fp)
    8964:	e0bff815 	stw	r2,-32(fp)
    8968:	e0bff817 	ldw	r2,-32(fp)
    896c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    8970:	00004206 	br	8a7c <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    8974:	e0bffc17 	ldw	r2,-16(fp)
    8978:	1080020b 	ldhu	r2,8(r2)
    897c:	0084303a 	nor	r2,zero,r2
    8980:	1007883a 	mov	r3,r2
    8984:	e0bffd0b 	ldhu	r2,-12(fp)
    8988:	1884703a 	and	r2,r3,r2
    898c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    8990:	e0fff30b 	ldhu	r3,-52(fp)
    8994:	e0bffd0b 	ldhu	r2,-12(fp)
    8998:	18800b1e 	bne	r3,r2,89c8 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    899c:	e0bff383 	ldbu	r2,-50(fp)
    89a0:	10800058 	cmpnei	r2,r2,1
    89a4:	10000b1e 	bne	r2,zero,89d4 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    89a8:	e0bffc17 	ldw	r2,-16(fp)
    89ac:	10c0020b 	ldhu	r3,8(r2)
    89b0:	e0bff30b 	ldhu	r2,-52(fp)
    89b4:	1884b03a 	or	r2,r3,r2
    89b8:	1007883a 	mov	r3,r2
    89bc:	e0bffc17 	ldw	r2,-16(fp)
    89c0:	10c0020d 	sth	r3,8(r2)
    89c4:	00000306 	br	89d4 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    89c8:	e0bfff17 	ldw	r2,-4(fp)
    89cc:	00c01c04 	movi	r3,112
    89d0:	10c00005 	stb	r3,0(r2)
    89d4:	e0bff417 	ldw	r2,-48(fp)
    89d8:	e0bff915 	stw	r2,-28(fp)
    89dc:	e0bff917 	ldw	r2,-28(fp)
    89e0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    89e4:	00002506 	br	8a7c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    89e8:	e0bffc17 	ldw	r2,-16(fp)
    89ec:	1080020b 	ldhu	r2,8(r2)
    89f0:	0084303a 	nor	r2,zero,r2
    89f4:	1007883a 	mov	r3,r2
    89f8:	e0bffd0b 	ldhu	r2,-12(fp)
    89fc:	1884703a 	and	r2,r3,r2
    8a00:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    8a04:	e0bff30b 	ldhu	r2,-52(fp)
    8a08:	10000b26 	beq	r2,zero,8a38 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    8a0c:	e0bff383 	ldbu	r2,-50(fp)
    8a10:	10800058 	cmpnei	r2,r2,1
    8a14:	10000b1e 	bne	r2,zero,8a44 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    8a18:	e0bffc17 	ldw	r2,-16(fp)
    8a1c:	10c0020b 	ldhu	r3,8(r2)
    8a20:	e0bff30b 	ldhu	r2,-52(fp)
    8a24:	1884b03a 	or	r2,r3,r2
    8a28:	1007883a 	mov	r3,r2
    8a2c:	e0bffc17 	ldw	r2,-16(fp)
    8a30:	10c0020d 	sth	r3,8(r2)
    8a34:	00000306 	br	8a44 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    8a38:	e0bfff17 	ldw	r2,-4(fp)
    8a3c:	00c01c04 	movi	r3,112
    8a40:	10c00005 	stb	r3,0(r2)
    8a44:	e0bff417 	ldw	r2,-48(fp)
    8a48:	e0bffa15 	stw	r2,-24(fp)
    8a4c:	e0bffa17 	ldw	r2,-24(fp)
    8a50:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    8a54:	00000906 	br	8a7c <OSFlagAccept+0x2f4>
    8a58:	e0bff417 	ldw	r2,-48(fp)
    8a5c:	e0bffb15 	stw	r2,-20(fp)
    8a60:	e0bffb17 	ldw	r2,-20(fp)
    8a64:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    8a68:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    8a6c:	e0bfff17 	ldw	r2,-4(fp)
    8a70:	00c01bc4 	movi	r3,111
    8a74:	10c00005 	stb	r3,0(r2)
             break;
    8a78:	0001883a 	nop
    }
    return (flags_rdy);
    8a7c:	e0bff30b 	ldhu	r2,-52(fp)
}
    8a80:	e037883a 	mov	sp,fp
    8a84:	df000017 	ldw	fp,0(sp)
    8a88:	dec00104 	addi	sp,sp,4
    8a8c:	f800283a 	ret

00008a90 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    8a90:	defff804 	addi	sp,sp,-32
    8a94:	df000715 	stw	fp,28(sp)
    8a98:	df000704 	addi	fp,sp,28
    8a9c:	2005883a 	mov	r2,r4
    8aa0:	e17fff15 	stw	r5,-4(fp)
    8aa4:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    8aa8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    8aac:	e0bfff17 	ldw	r2,-4(fp)
    8ab0:	1000021e 	bne	r2,zero,8abc <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    8ab4:	0005883a 	mov	r2,zero
    8ab8:	00003b06 	br	8ba8 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    8abc:	00800074 	movhi	r2,1
    8ac0:	109bd404 	addi	r2,r2,28496
    8ac4:	10800003 	ldbu	r2,0(r2)
    8ac8:	10803fcc 	andi	r2,r2,255
    8acc:	10000526 	beq	r2,zero,8ae4 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    8ad0:	e0bfff17 	ldw	r2,-4(fp)
    8ad4:	00c00404 	movi	r3,16
    8ad8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    8adc:	0005883a 	mov	r2,zero
    8ae0:	00003106 	br	8ba8 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8ae4:	0005303a 	rdctl	r2,status
    8ae8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8aec:	e0fffb17 	ldw	r3,-20(fp)
    8af0:	00bfff84 	movi	r2,-2
    8af4:	1884703a 	and	r2,r3,r2
    8af8:	1001703a 	wrctl	status,r2
  
  return context;
    8afc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    8b00:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    8b04:	00800074 	movhi	r2,1
    8b08:	109bd704 	addi	r2,r2,28508
    8b0c:	10800017 	ldw	r2,0(r2)
    8b10:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    8b14:	e0bffa17 	ldw	r2,-24(fp)
    8b18:	10001b26 	beq	r2,zero,8b88 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    8b1c:	00800074 	movhi	r2,1
    8b20:	109bd704 	addi	r2,r2,28508
    8b24:	10800017 	ldw	r2,0(r2)
    8b28:	10c00117 	ldw	r3,4(r2)
    8b2c:	00800074 	movhi	r2,1
    8b30:	109bd704 	addi	r2,r2,28508
    8b34:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    8b38:	e0bffa17 	ldw	r2,-24(fp)
    8b3c:	00c00144 	movi	r3,5
    8b40:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    8b44:	e0bffa17 	ldw	r2,-24(fp)
    8b48:	e0fffe0b 	ldhu	r3,-8(fp)
    8b4c:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    8b50:	e0bffa17 	ldw	r2,-24(fp)
    8b54:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    8b58:	e0bffa17 	ldw	r2,-24(fp)
    8b5c:	00c00fc4 	movi	r3,63
    8b60:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    8b64:	e0bffa17 	ldw	r2,-24(fp)
    8b68:	100002c5 	stb	zero,11(r2)
    8b6c:	e0bff917 	ldw	r2,-28(fp)
    8b70:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8b74:	e0bffc17 	ldw	r2,-16(fp)
    8b78:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    8b7c:	e0bfff17 	ldw	r2,-4(fp)
    8b80:	10000005 	stb	zero,0(r2)
    8b84:	00000706 	br	8ba4 <OSFlagCreate+0x114>
    8b88:	e0bff917 	ldw	r2,-28(fp)
    8b8c:	e0bffd15 	stw	r2,-12(fp)
    8b90:	e0bffd17 	ldw	r2,-12(fp)
    8b94:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    8b98:	e0bfff17 	ldw	r2,-4(fp)
    8b9c:	00c01c84 	movi	r3,114
    8ba0:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    8ba4:	e0bffa17 	ldw	r2,-24(fp)
}
    8ba8:	e037883a 	mov	sp,fp
    8bac:	df000017 	ldw	fp,0(sp)
    8bb0:	dec00104 	addi	sp,sp,4
    8bb4:	f800283a 	ret

00008bb8 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    8bb8:	defff204 	addi	sp,sp,-56
    8bbc:	dfc00d15 	stw	ra,52(sp)
    8bc0:	df000c15 	stw	fp,48(sp)
    8bc4:	df000c04 	addi	fp,sp,48
    8bc8:	e13ffd15 	stw	r4,-12(fp)
    8bcc:	2805883a 	mov	r2,r5
    8bd0:	e1bfff15 	stw	r6,-4(fp)
    8bd4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    8bd8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    8bdc:	e0bfff17 	ldw	r2,-4(fp)
    8be0:	1000021e 	bne	r2,zero,8bec <OSFlagDel+0x34>
        return (pgrp);
    8be4:	e0bffd17 	ldw	r2,-12(fp)
    8be8:	00008a06 	br	8e14 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    8bec:	e0bffd17 	ldw	r2,-12(fp)
    8bf0:	1000051e 	bne	r2,zero,8c08 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    8bf4:	e0bfff17 	ldw	r2,-4(fp)
    8bf8:	00c01b84 	movi	r3,110
    8bfc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    8c00:	e0bffd17 	ldw	r2,-12(fp)
    8c04:	00008306 	br	8e14 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    8c08:	00800074 	movhi	r2,1
    8c0c:	109bd404 	addi	r2,r2,28496
    8c10:	10800003 	ldbu	r2,0(r2)
    8c14:	10803fcc 	andi	r2,r2,255
    8c18:	10000526 	beq	r2,zero,8c30 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    8c1c:	e0bfff17 	ldw	r2,-4(fp)
    8c20:	00c003c4 	movi	r3,15
    8c24:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    8c28:	e0bffd17 	ldw	r2,-12(fp)
    8c2c:	00007906 	br	8e14 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    8c30:	e0bffd17 	ldw	r2,-12(fp)
    8c34:	10800003 	ldbu	r2,0(r2)
    8c38:	10803fcc 	andi	r2,r2,255
    8c3c:	10800160 	cmpeqi	r2,r2,5
    8c40:	1000051e 	bne	r2,zero,8c58 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
    8c44:	e0bfff17 	ldw	r2,-4(fp)
    8c48:	00c00044 	movi	r3,1
    8c4c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    8c50:	e0bffd17 	ldw	r2,-12(fp)
    8c54:	00006f06 	br	8e14 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8c58:	0005303a 	rdctl	r2,status
    8c5c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8c60:	e0fff817 	ldw	r3,-32(fp)
    8c64:	00bfff84 	movi	r2,-2
    8c68:	1884703a 	and	r2,r3,r2
    8c6c:	1001703a 	wrctl	status,r2
  
  return context;
    8c70:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    8c74:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    8c78:	e0bffd17 	ldw	r2,-12(fp)
    8c7c:	10800117 	ldw	r2,4(r2)
    8c80:	10000326 	beq	r2,zero,8c90 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    8c84:	00800044 	movi	r2,1
    8c88:	e0bff405 	stb	r2,-48(fp)
    8c8c:	00000106 	br	8c94 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    8c90:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    8c94:	e0bffe03 	ldbu	r2,-8(fp)
    8c98:	10000326 	beq	r2,zero,8ca8 <OSFlagDel+0xf0>
    8c9c:	10800060 	cmpeqi	r2,r2,1
    8ca0:	1000271e 	bne	r2,zero,8d40 <OSFlagDel+0x188>
    8ca4:	00005006 	br	8de8 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    8ca8:	e0bff403 	ldbu	r2,-48(fp)
    8cac:	10001a1e 	bne	r2,zero,8d18 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    8cb0:	e0bffd17 	ldw	r2,-12(fp)
    8cb4:	00c00fc4 	movi	r3,63
    8cb8:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    8cbc:	e0bffd17 	ldw	r2,-12(fp)
    8cc0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    8cc4:	e0bffd17 	ldw	r2,-12(fp)
    8cc8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    8ccc:	00800074 	movhi	r2,1
    8cd0:	109bd704 	addi	r2,r2,28508
    8cd4:	10c00017 	ldw	r3,0(r2)
    8cd8:	e0bffd17 	ldw	r2,-12(fp)
    8cdc:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    8ce0:	e0bffd17 	ldw	r2,-12(fp)
    8ce4:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    8ce8:	00800074 	movhi	r2,1
    8cec:	109bd704 	addi	r2,r2,28508
    8cf0:	e0fffd17 	ldw	r3,-12(fp)
    8cf4:	10c00015 	stw	r3,0(r2)
    8cf8:	e0bff717 	ldw	r2,-36(fp)
    8cfc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8d00:	e0bff917 	ldw	r2,-28(fp)
    8d04:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    8d08:	e0bfff17 	ldw	r2,-4(fp)
    8d0c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    8d10:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    8d14:	00003e06 	br	8e10 <OSFlagDel+0x258>
    8d18:	e0bff717 	ldw	r2,-36(fp)
    8d1c:	e0bffa15 	stw	r2,-24(fp)
    8d20:	e0bffa17 	ldw	r2,-24(fp)
    8d24:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    8d28:	e0bfff17 	ldw	r2,-4(fp)
    8d2c:	00c01244 	movi	r3,73
    8d30:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    8d34:	e0bffd17 	ldw	r2,-12(fp)
    8d38:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    8d3c:	00003406 	br	8e10 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    8d40:	e0bffd17 	ldw	r2,-12(fp)
    8d44:	10800117 	ldw	r2,4(r2)
    8d48:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    8d4c:	00000606 	br	8d68 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    8d50:	e13ff517 	ldw	r4,-44(fp)
    8d54:	000b883a 	mov	r5,zero
    8d58:	0009df40 	call	9df4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    8d5c:	e0bff517 	ldw	r2,-44(fp)
    8d60:	10800017 	ldw	r2,0(r2)
    8d64:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    8d68:	e0bff517 	ldw	r2,-44(fp)
    8d6c:	103ff81e 	bne	r2,zero,8d50 <__alt_mem_Flash_flash_data+0xf4008d50>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    8d70:	e0bffd17 	ldw	r2,-12(fp)
    8d74:	00c00fc4 	movi	r3,63
    8d78:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    8d7c:	e0bffd17 	ldw	r2,-12(fp)
    8d80:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    8d84:	e0bffd17 	ldw	r2,-12(fp)
    8d88:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    8d8c:	00800074 	movhi	r2,1
    8d90:	109bd704 	addi	r2,r2,28508
    8d94:	10c00017 	ldw	r3,0(r2)
    8d98:	e0bffd17 	ldw	r2,-12(fp)
    8d9c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    8da0:	e0bffd17 	ldw	r2,-12(fp)
    8da4:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    8da8:	00800074 	movhi	r2,1
    8dac:	109bd704 	addi	r2,r2,28508
    8db0:	e0fffd17 	ldw	r3,-12(fp)
    8db4:	10c00015 	stw	r3,0(r2)
    8db8:	e0bff717 	ldw	r2,-36(fp)
    8dbc:	e0bffb15 	stw	r2,-20(fp)
    8dc0:	e0bffb17 	ldw	r2,-20(fp)
    8dc4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    8dc8:	e0bff403 	ldbu	r2,-48(fp)
    8dcc:	10800058 	cmpnei	r2,r2,1
    8dd0:	1000011e 	bne	r2,zero,8dd8 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    8dd4:	0007f240 	call	7f24 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    8dd8:	e0bfff17 	ldw	r2,-4(fp)
    8ddc:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    8de0:	e03ff615 	stw	zero,-40(fp)
             break;
    8de4:	00000a06 	br	8e10 <OSFlagDel+0x258>
    8de8:	e0bff717 	ldw	r2,-36(fp)
    8dec:	e0bffc15 	stw	r2,-16(fp)
    8df0:	e0bffc17 	ldw	r2,-16(fp)
    8df4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    8df8:	e0bfff17 	ldw	r2,-4(fp)
    8dfc:	00c001c4 	movi	r3,7
    8e00:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    8e04:	e0bffd17 	ldw	r2,-12(fp)
    8e08:	e0bff615 	stw	r2,-40(fp)
             break;
    8e0c:	0001883a 	nop
    }
    return (pgrp_return);
    8e10:	e0bff617 	ldw	r2,-40(fp)
}
    8e14:	e037883a 	mov	sp,fp
    8e18:	dfc00117 	ldw	ra,4(sp)
    8e1c:	df000017 	ldw	fp,0(sp)
    8e20:	dec00204 	addi	sp,sp,8
    8e24:	f800283a 	ret

00008e28 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    8e28:	defff604 	addi	sp,sp,-40
    8e2c:	dfc00915 	stw	ra,36(sp)
    8e30:	df000815 	stw	fp,32(sp)
    8e34:	df000804 	addi	fp,sp,32
    8e38:	e13ffd15 	stw	r4,-12(fp)
    8e3c:	e17ffe15 	stw	r5,-8(fp)
    8e40:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8e44:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    8e48:	e0bfff17 	ldw	r2,-4(fp)
    8e4c:	1000021e 	bne	r2,zero,8e58 <OSFlagNameGet+0x30>
        return (0);
    8e50:	0005883a 	mov	r2,zero
    8e54:	00003b06 	br	8f44 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    8e58:	e0bffd17 	ldw	r2,-12(fp)
    8e5c:	1000051e 	bne	r2,zero,8e74 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    8e60:	e0bfff17 	ldw	r2,-4(fp)
    8e64:	00c01b84 	movi	r3,110
    8e68:	10c00005 	stb	r3,0(r2)
        return (0);
    8e6c:	0005883a 	mov	r2,zero
    8e70:	00003406 	br	8f44 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    8e74:	e0bffe17 	ldw	r2,-8(fp)
    8e78:	1000051e 	bne	r2,zero,8e90 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    8e7c:	e0bfff17 	ldw	r2,-4(fp)
    8e80:	00c00304 	movi	r3,12
    8e84:	10c00005 	stb	r3,0(r2)
        return (0);
    8e88:	0005883a 	mov	r2,zero
    8e8c:	00002d06 	br	8f44 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    8e90:	00800074 	movhi	r2,1
    8e94:	109bd404 	addi	r2,r2,28496
    8e98:	10800003 	ldbu	r2,0(r2)
    8e9c:	10803fcc 	andi	r2,r2,255
    8ea0:	10000526 	beq	r2,zero,8eb8 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    8ea4:	e0bfff17 	ldw	r2,-4(fp)
    8ea8:	00c00444 	movi	r3,17
    8eac:	10c00005 	stb	r3,0(r2)
        return (0);
    8eb0:	0005883a 	mov	r2,zero
    8eb4:	00002306 	br	8f44 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8eb8:	0005303a 	rdctl	r2,status
    8ebc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8ec0:	e0fffa17 	ldw	r3,-24(fp)
    8ec4:	00bfff84 	movi	r2,-2
    8ec8:	1884703a 	and	r2,r3,r2
    8ecc:	1001703a 	wrctl	status,r2
  
  return context;
    8ed0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    8ed4:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    8ed8:	e0bffd17 	ldw	r2,-12(fp)
    8edc:	10800003 	ldbu	r2,0(r2)
    8ee0:	10803fcc 	andi	r2,r2,255
    8ee4:	10800160 	cmpeqi	r2,r2,5
    8ee8:	1000091e 	bne	r2,zero,8f10 <OSFlagNameGet+0xe8>
    8eec:	e0bff817 	ldw	r2,-32(fp)
    8ef0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8ef4:	e0bffb17 	ldw	r2,-20(fp)
    8ef8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    8efc:	e0bfff17 	ldw	r2,-4(fp)
    8f00:	00c00044 	movi	r3,1
    8f04:	10c00005 	stb	r3,0(r2)
        return (0);
    8f08:	0005883a 	mov	r2,zero
    8f0c:	00000d06 	br	8f44 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    8f10:	e0bffd17 	ldw	r2,-12(fp)
    8f14:	10800284 	addi	r2,r2,10
    8f18:	e13ffe17 	ldw	r4,-8(fp)
    8f1c:	100b883a 	mov	r5,r2
    8f20:	00080600 	call	8060 <OS_StrCopy>
    8f24:	e0bff905 	stb	r2,-28(fp)
    8f28:	e0bff817 	ldw	r2,-32(fp)
    8f2c:	e0bffc15 	stw	r2,-16(fp)
    8f30:	e0bffc17 	ldw	r2,-16(fp)
    8f34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    8f38:	e0bfff17 	ldw	r2,-4(fp)
    8f3c:	10000005 	stb	zero,0(r2)
    return (len);
    8f40:	e0bff903 	ldbu	r2,-28(fp)
}
    8f44:	e037883a 	mov	sp,fp
    8f48:	dfc00117 	ldw	ra,4(sp)
    8f4c:	df000017 	ldw	fp,0(sp)
    8f50:	dec00204 	addi	sp,sp,8
    8f54:	f800283a 	ret

00008f58 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    8f58:	defff504 	addi	sp,sp,-44
    8f5c:	dfc00a15 	stw	ra,40(sp)
    8f60:	df000915 	stw	fp,36(sp)
    8f64:	df000904 	addi	fp,sp,36
    8f68:	e13ffd15 	stw	r4,-12(fp)
    8f6c:	e17ffe15 	stw	r5,-8(fp)
    8f70:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8f74:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    8f78:	e0bfff17 	ldw	r2,-4(fp)
    8f7c:	1000011e 	bne	r2,zero,8f84 <OSFlagNameSet+0x2c>
        return;
    8f80:	00004406 	br	9094 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    8f84:	e0bffd17 	ldw	r2,-12(fp)
    8f88:	1000041e 	bne	r2,zero,8f9c <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    8f8c:	e0bfff17 	ldw	r2,-4(fp)
    8f90:	00c01b84 	movi	r3,110
    8f94:	10c00005 	stb	r3,0(r2)
        return;
    8f98:	00003e06 	br	9094 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    8f9c:	e0bffe17 	ldw	r2,-8(fp)
    8fa0:	1000041e 	bne	r2,zero,8fb4 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    8fa4:	e0bfff17 	ldw	r2,-4(fp)
    8fa8:	00c00304 	movi	r3,12
    8fac:	10c00005 	stb	r3,0(r2)
        return;
    8fb0:	00003806 	br	9094 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    8fb4:	00800074 	movhi	r2,1
    8fb8:	109bd404 	addi	r2,r2,28496
    8fbc:	10800003 	ldbu	r2,0(r2)
    8fc0:	10803fcc 	andi	r2,r2,255
    8fc4:	10000426 	beq	r2,zero,8fd8 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
    8fc8:	e0bfff17 	ldw	r2,-4(fp)
    8fcc:	00c00484 	movi	r3,18
    8fd0:	10c00005 	stb	r3,0(r2)
        return;
    8fd4:	00002f06 	br	9094 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8fd8:	0005303a 	rdctl	r2,status
    8fdc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8fe0:	e0fff917 	ldw	r3,-28(fp)
    8fe4:	00bfff84 	movi	r2,-2
    8fe8:	1884703a 	and	r2,r3,r2
    8fec:	1001703a 	wrctl	status,r2
  
  return context;
    8ff0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    8ff4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    8ff8:	e0bffd17 	ldw	r2,-12(fp)
    8ffc:	10800003 	ldbu	r2,0(r2)
    9000:	10803fcc 	andi	r2,r2,255
    9004:	10800160 	cmpeqi	r2,r2,5
    9008:	1000081e 	bne	r2,zero,902c <OSFlagNameSet+0xd4>
    900c:	e0bff717 	ldw	r2,-36(fp)
    9010:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9014:	e0bffa17 	ldw	r2,-24(fp)
    9018:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    901c:	e0bfff17 	ldw	r2,-4(fp)
    9020:	00c00044 	movi	r3,1
    9024:	10c00005 	stb	r3,0(r2)
        return;
    9028:	00001a06 	br	9094 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    902c:	e13ffe17 	ldw	r4,-8(fp)
    9030:	00080d40 	call	80d4 <OS_StrLen>
    9034:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    9038:	e0bff803 	ldbu	r2,-32(fp)
    903c:	10800830 	cmpltui	r2,r2,32
    9040:	1000081e 	bne	r2,zero,9064 <OSFlagNameSet+0x10c>
    9044:	e0bff717 	ldw	r2,-36(fp)
    9048:	e0bffb15 	stw	r2,-20(fp)
    904c:	e0bffb17 	ldw	r2,-20(fp)
    9050:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    9054:	e0bfff17 	ldw	r2,-4(fp)
    9058:	00c01cc4 	movi	r3,115
    905c:	10c00005 	stb	r3,0(r2)
        return;
    9060:	00000c06 	br	9094 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    9064:	e0bffd17 	ldw	r2,-12(fp)
    9068:	10800284 	addi	r2,r2,10
    906c:	1009883a 	mov	r4,r2
    9070:	e17ffe17 	ldw	r5,-8(fp)
    9074:	00080600 	call	8060 <OS_StrCopy>
    9078:	e0bff717 	ldw	r2,-36(fp)
    907c:	e0bffc15 	stw	r2,-16(fp)
    9080:	e0bffc17 	ldw	r2,-16(fp)
    9084:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    9088:	e0bfff17 	ldw	r2,-4(fp)
    908c:	10000005 	stb	zero,0(r2)
    return;
    9090:	0001883a 	nop
}
    9094:	e037883a 	mov	sp,fp
    9098:	dfc00117 	ldw	ra,4(sp)
    909c:	df000017 	ldw	fp,0(sp)
    90a0:	dec00204 	addi	sp,sp,8
    90a4:	f800283a 	ret

000090a8 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    90a8:	deffe204 	addi	sp,sp,-120
    90ac:	dfc01d15 	stw	ra,116(sp)
    90b0:	df001c15 	stw	fp,112(sp)
    90b4:	df001c04 	addi	fp,sp,112
    90b8:	e13ffc15 	stw	r4,-16(fp)
    90bc:	2809883a 	mov	r4,r5
    90c0:	3007883a 	mov	r3,r6
    90c4:	3805883a 	mov	r2,r7
    90c8:	e13ffd0d 	sth	r4,-12(fp)
    90cc:	e0fffe05 	stb	r3,-8(fp)
    90d0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    90d4:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    90d8:	e0800217 	ldw	r2,8(fp)
    90dc:	1000021e 	bne	r2,zero,90e8 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
    90e0:	0005883a 	mov	r2,zero
    90e4:	00016706 	br	9684 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    90e8:	e0bffc17 	ldw	r2,-16(fp)
    90ec:	1000051e 	bne	r2,zero,9104 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    90f0:	e0800217 	ldw	r2,8(fp)
    90f4:	00c01b84 	movi	r3,110
    90f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    90fc:	0005883a 	mov	r2,zero
    9100:	00016006 	br	9684 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    9104:	00800074 	movhi	r2,1
    9108:	109bd404 	addi	r2,r2,28496
    910c:	10800003 	ldbu	r2,0(r2)
    9110:	10803fcc 	andi	r2,r2,255
    9114:	10000526 	beq	r2,zero,912c <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    9118:	e0800217 	ldw	r2,8(fp)
    911c:	00c00084 	movi	r3,2
    9120:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    9124:	0005883a 	mov	r2,zero
    9128:	00015606 	br	9684 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    912c:	00800074 	movhi	r2,1
    9130:	109bc604 	addi	r2,r2,28440
    9134:	10800003 	ldbu	r2,0(r2)
    9138:	10803fcc 	andi	r2,r2,255
    913c:	10000526 	beq	r2,zero,9154 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    9140:	e0800217 	ldw	r2,8(fp)
    9144:	00c00344 	movi	r3,13
    9148:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    914c:	0005883a 	mov	r2,zero
    9150:	00014c06 	br	9684 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    9154:	e0bffc17 	ldw	r2,-16(fp)
    9158:	10800003 	ldbu	r2,0(r2)
    915c:	10803fcc 	andi	r2,r2,255
    9160:	10800160 	cmpeqi	r2,r2,5
    9164:	1000051e 	bne	r2,zero,917c <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
    9168:	e0800217 	ldw	r2,8(fp)
    916c:	00c00044 	movi	r3,1
    9170:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    9174:	0005883a 	mov	r2,zero
    9178:	00014206 	br	9684 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    917c:	e0fffe03 	ldbu	r3,-8(fp)
    9180:	00bfe004 	movi	r2,-128
    9184:	1884703a 	and	r2,r3,r2
    9188:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    918c:	e0bfe703 	ldbu	r2,-100(fp)
    9190:	10000626 	beq	r2,zero,91ac <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    9194:	e0bffe03 	ldbu	r2,-8(fp)
    9198:	10801fcc 	andi	r2,r2,127
    919c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    91a0:	00800044 	movi	r2,1
    91a4:	e0bfe505 	stb	r2,-108(fp)
    91a8:	00000106 	br	91b0 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
    91ac:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    91b0:	0005303a 	rdctl	r2,status
    91b4:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    91b8:	e0ffe917 	ldw	r3,-92(fp)
    91bc:	00bfff84 	movi	r2,-2
    91c0:	1884703a 	and	r2,r3,r2
    91c4:	1001703a 	wrctl	status,r2
  
  return context;
    91c8:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    91cc:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
    91d0:	e0bffe03 	ldbu	r2,-8(fp)
    91d4:	10c00060 	cmpeqi	r3,r2,1
    91d8:	1800921e 	bne	r3,zero,9424 <OSFlagPend+0x37c>
    91dc:	10c00088 	cmpgei	r3,r2,2
    91e0:	1800021e 	bne	r3,zero,91ec <OSFlagPend+0x144>
    91e4:	10006126 	beq	r2,zero,936c <OSFlagPend+0x2c4>
    91e8:	0000bb06 	br	94d8 <OSFlagPend+0x430>
    91ec:	10c000a0 	cmpeqi	r3,r2,2
    91f0:	1800031e 	bne	r3,zero,9200 <OSFlagPend+0x158>
    91f4:	108000e0 	cmpeqi	r2,r2,3
    91f8:	10002f1e 	bne	r2,zero,92b8 <OSFlagPend+0x210>
    91fc:	0000b606 	br	94d8 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    9200:	e0bffc17 	ldw	r2,-16(fp)
    9204:	10c0020b 	ldhu	r3,8(r2)
    9208:	e0bffd0b 	ldhu	r2,-12(fp)
    920c:	1884703a 	and	r2,r3,r2
    9210:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    9214:	e0ffe78b 	ldhu	r3,-98(fp)
    9218:	e0bffd0b 	ldhu	r2,-12(fp)
    921c:	1880191e 	bne	r3,r2,9284 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    9220:	e0bfe503 	ldbu	r2,-108(fp)
    9224:	10800058 	cmpnei	r2,r2,1
    9228:	1000091e 	bne	r2,zero,9250 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    922c:	e0bffc17 	ldw	r2,-16(fp)
    9230:	1080020b 	ldhu	r2,8(r2)
    9234:	1007883a 	mov	r3,r2
    9238:	e0bfe78b 	ldhu	r2,-98(fp)
    923c:	0084303a 	nor	r2,zero,r2
    9240:	1884703a 	and	r2,r3,r2
    9244:	1007883a 	mov	r3,r2
    9248:	e0bffc17 	ldw	r2,-16(fp)
    924c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    9250:	00800074 	movhi	r2,1
    9254:	109bd504 	addi	r2,r2,28500
    9258:	10800017 	ldw	r2,0(r2)
    925c:	e0ffe78b 	ldhu	r3,-98(fp)
    9260:	10c00b0d 	sth	r3,44(r2)
    9264:	e0bfe617 	ldw	r2,-104(fp)
    9268:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    926c:	e0bfea17 	ldw	r2,-88(fp)
    9270:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    9274:	e0800217 	ldw	r2,8(fp)
    9278:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    927c:	e0bfe78b 	ldhu	r2,-98(fp)
    9280:	00010006 	br	9684 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    9284:	e1bffd0b 	ldhu	r6,-12(fp)
    9288:	e0fffe03 	ldbu	r3,-8(fp)
    928c:	e0bfff0b 	ldhu	r2,-4(fp)
    9290:	e17ff704 	addi	r5,fp,-36
    9294:	d8800015 	stw	r2,0(sp)
    9298:	e13ffc17 	ldw	r4,-16(fp)
    929c:	180f883a 	mov	r7,r3
    92a0:	0009b4c0 	call	9b4c <OS_FlagBlock>
    92a4:	e0bfe617 	ldw	r2,-104(fp)
    92a8:	e0bfeb15 	stw	r2,-84(fp)
    92ac:	e0bfeb17 	ldw	r2,-84(fp)
    92b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    92b4:	00009206 	br	9500 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    92b8:	e0bffc17 	ldw	r2,-16(fp)
    92bc:	10c0020b 	ldhu	r3,8(r2)
    92c0:	e0bffd0b 	ldhu	r2,-12(fp)
    92c4:	1884703a 	and	r2,r3,r2
    92c8:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    92cc:	e0bfe78b 	ldhu	r2,-98(fp)
    92d0:	10001926 	beq	r2,zero,9338 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    92d4:	e0bfe503 	ldbu	r2,-108(fp)
    92d8:	10800058 	cmpnei	r2,r2,1
    92dc:	1000091e 	bne	r2,zero,9304 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    92e0:	e0bffc17 	ldw	r2,-16(fp)
    92e4:	1080020b 	ldhu	r2,8(r2)
    92e8:	1007883a 	mov	r3,r2
    92ec:	e0bfe78b 	ldhu	r2,-98(fp)
    92f0:	0084303a 	nor	r2,zero,r2
    92f4:	1884703a 	and	r2,r3,r2
    92f8:	1007883a 	mov	r3,r2
    92fc:	e0bffc17 	ldw	r2,-16(fp)
    9300:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    9304:	00800074 	movhi	r2,1
    9308:	109bd504 	addi	r2,r2,28500
    930c:	10800017 	ldw	r2,0(r2)
    9310:	e0ffe78b 	ldhu	r3,-98(fp)
    9314:	10c00b0d 	sth	r3,44(r2)
    9318:	e0bfe617 	ldw	r2,-104(fp)
    931c:	e0bfec15 	stw	r2,-80(fp)
    9320:	e0bfec17 	ldw	r2,-80(fp)
    9324:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    9328:	e0800217 	ldw	r2,8(fp)
    932c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    9330:	e0bfe78b 	ldhu	r2,-98(fp)
    9334:	0000d306 	br	9684 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    9338:	e1bffd0b 	ldhu	r6,-12(fp)
    933c:	e0fffe03 	ldbu	r3,-8(fp)
    9340:	e0bfff0b 	ldhu	r2,-4(fp)
    9344:	e17ff704 	addi	r5,fp,-36
    9348:	d8800015 	stw	r2,0(sp)
    934c:	e13ffc17 	ldw	r4,-16(fp)
    9350:	180f883a 	mov	r7,r3
    9354:	0009b4c0 	call	9b4c <OS_FlagBlock>
    9358:	e0bfe617 	ldw	r2,-104(fp)
    935c:	e0bfed15 	stw	r2,-76(fp)
    9360:	e0bfed17 	ldw	r2,-76(fp)
    9364:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    9368:	00006506 	br	9500 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    936c:	e0bffc17 	ldw	r2,-16(fp)
    9370:	1080020b 	ldhu	r2,8(r2)
    9374:	0084303a 	nor	r2,zero,r2
    9378:	1007883a 	mov	r3,r2
    937c:	e0bffd0b 	ldhu	r2,-12(fp)
    9380:	1884703a 	and	r2,r3,r2
    9384:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    9388:	e0ffe78b 	ldhu	r3,-98(fp)
    938c:	e0bffd0b 	ldhu	r2,-12(fp)
    9390:	1880171e 	bne	r3,r2,93f0 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    9394:	e0bfe503 	ldbu	r2,-108(fp)
    9398:	10800058 	cmpnei	r2,r2,1
    939c:	1000071e 	bne	r2,zero,93bc <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    93a0:	e0bffc17 	ldw	r2,-16(fp)
    93a4:	10c0020b 	ldhu	r3,8(r2)
    93a8:	e0bfe78b 	ldhu	r2,-98(fp)
    93ac:	1884b03a 	or	r2,r3,r2
    93b0:	1007883a 	mov	r3,r2
    93b4:	e0bffc17 	ldw	r2,-16(fp)
    93b8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    93bc:	00800074 	movhi	r2,1
    93c0:	109bd504 	addi	r2,r2,28500
    93c4:	10800017 	ldw	r2,0(r2)
    93c8:	e0ffe78b 	ldhu	r3,-98(fp)
    93cc:	10c00b0d 	sth	r3,44(r2)
    93d0:	e0bfe617 	ldw	r2,-104(fp)
    93d4:	e0bfee15 	stw	r2,-72(fp)
    93d8:	e0bfee17 	ldw	r2,-72(fp)
    93dc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    93e0:	e0800217 	ldw	r2,8(fp)
    93e4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    93e8:	e0bfe78b 	ldhu	r2,-98(fp)
    93ec:	0000a506 	br	9684 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    93f0:	e1bffd0b 	ldhu	r6,-12(fp)
    93f4:	e0fffe03 	ldbu	r3,-8(fp)
    93f8:	e0bfff0b 	ldhu	r2,-4(fp)
    93fc:	e17ff704 	addi	r5,fp,-36
    9400:	d8800015 	stw	r2,0(sp)
    9404:	e13ffc17 	ldw	r4,-16(fp)
    9408:	180f883a 	mov	r7,r3
    940c:	0009b4c0 	call	9b4c <OS_FlagBlock>
    9410:	e0bfe617 	ldw	r2,-104(fp)
    9414:	e0bfef15 	stw	r2,-68(fp)
    9418:	e0bfef17 	ldw	r2,-68(fp)
    941c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    9420:	00003706 	br	9500 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    9424:	e0bffc17 	ldw	r2,-16(fp)
    9428:	1080020b 	ldhu	r2,8(r2)
    942c:	0084303a 	nor	r2,zero,r2
    9430:	1007883a 	mov	r3,r2
    9434:	e0bffd0b 	ldhu	r2,-12(fp)
    9438:	1884703a 	and	r2,r3,r2
    943c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    9440:	e0bfe78b 	ldhu	r2,-98(fp)
    9444:	10001726 	beq	r2,zero,94a4 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    9448:	e0bfe503 	ldbu	r2,-108(fp)
    944c:	10800058 	cmpnei	r2,r2,1
    9450:	1000071e 	bne	r2,zero,9470 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    9454:	e0bffc17 	ldw	r2,-16(fp)
    9458:	10c0020b 	ldhu	r3,8(r2)
    945c:	e0bfe78b 	ldhu	r2,-98(fp)
    9460:	1884b03a 	or	r2,r3,r2
    9464:	1007883a 	mov	r3,r2
    9468:	e0bffc17 	ldw	r2,-16(fp)
    946c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    9470:	00800074 	movhi	r2,1
    9474:	109bd504 	addi	r2,r2,28500
    9478:	10800017 	ldw	r2,0(r2)
    947c:	e0ffe78b 	ldhu	r3,-98(fp)
    9480:	10c00b0d 	sth	r3,44(r2)
    9484:	e0bfe617 	ldw	r2,-104(fp)
    9488:	e0bff015 	stw	r2,-64(fp)
    948c:	e0bff017 	ldw	r2,-64(fp)
    9490:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    9494:	e0800217 	ldw	r2,8(fp)
    9498:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    949c:	e0bfe78b 	ldhu	r2,-98(fp)
    94a0:	00007806 	br	9684 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    94a4:	e1bffd0b 	ldhu	r6,-12(fp)
    94a8:	e0fffe03 	ldbu	r3,-8(fp)
    94ac:	e0bfff0b 	ldhu	r2,-4(fp)
    94b0:	e17ff704 	addi	r5,fp,-36
    94b4:	d8800015 	stw	r2,0(sp)
    94b8:	e13ffc17 	ldw	r4,-16(fp)
    94bc:	180f883a 	mov	r7,r3
    94c0:	0009b4c0 	call	9b4c <OS_FlagBlock>
    94c4:	e0bfe617 	ldw	r2,-104(fp)
    94c8:	e0bff115 	stw	r2,-60(fp)
    94cc:	e0bff117 	ldw	r2,-60(fp)
    94d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    94d4:	00000a06 	br	9500 <OSFlagPend+0x458>
    94d8:	e0bfe617 	ldw	r2,-104(fp)
    94dc:	e0bff215 	stw	r2,-56(fp)
    94e0:	e0bff217 	ldw	r2,-56(fp)
    94e4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    94e8:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    94ec:	e0800217 	ldw	r2,8(fp)
    94f0:	00c01bc4 	movi	r3,111
    94f4:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    94f8:	e0bfe78b 	ldhu	r2,-98(fp)
    94fc:	00006106 	br	9684 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    9500:	0007f240 	call	7f24 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9504:	0005303a 	rdctl	r2,status
    9508:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    950c:	e0fff317 	ldw	r3,-52(fp)
    9510:	00bfff84 	movi	r2,-2
    9514:	1884703a 	and	r2,r3,r2
    9518:	1001703a 	wrctl	status,r2
  
  return context;
    951c:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
    9520:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    9524:	00800074 	movhi	r2,1
    9528:	109bd504 	addi	r2,r2,28500
    952c:	10800017 	ldw	r2,0(r2)
    9530:	10800c43 	ldbu	r2,49(r2)
    9534:	10803fcc 	andi	r2,r2,255
    9538:	10002226 	beq	r2,zero,95c4 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    953c:	00800074 	movhi	r2,1
    9540:	109bd504 	addi	r2,r2,28500
    9544:	10800017 	ldw	r2,0(r2)
    9548:	10800c43 	ldbu	r2,49(r2)
    954c:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    9550:	00800074 	movhi	r2,1
    9554:	109bd504 	addi	r2,r2,28500
    9558:	10800017 	ldw	r2,0(r2)
    955c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    9560:	e0bff704 	addi	r2,fp,-36
    9564:	1009883a 	mov	r4,r2
    9568:	0009f040 	call	9f04 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    956c:	00800074 	movhi	r2,1
    9570:	109bd504 	addi	r2,r2,28500
    9574:	10800017 	ldw	r2,0(r2)
    9578:	10000c05 	stb	zero,48(r2)
    957c:	e0bfe617 	ldw	r2,-104(fp)
    9580:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9584:	e0bff417 	ldw	r2,-48(fp)
    9588:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    958c:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
    9590:	e0bfe803 	ldbu	r2,-96(fp)
    9594:	108000a0 	cmpeqi	r2,r2,2
    9598:	10000426 	beq	r2,zero,95ac <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    959c:	e0800217 	ldw	r2,8(fp)
    95a0:	00c00384 	movi	r3,14
    95a4:	10c00005 	stb	r3,0(r2)
                 break;
    95a8:	00000406 	br	95bc <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    95ac:	e0800217 	ldw	r2,8(fp)
    95b0:	00c00284 	movi	r3,10
    95b4:	10c00005 	stb	r3,0(r2)
                 break;
    95b8:	0001883a 	nop
        }
        return (flags_rdy);
    95bc:	e0bfe78b 	ldhu	r2,-98(fp)
    95c0:	00003006 	br	9684 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    95c4:	00800074 	movhi	r2,1
    95c8:	109bd504 	addi	r2,r2,28500
    95cc:	10800017 	ldw	r2,0(r2)
    95d0:	10800b0b 	ldhu	r2,44(r2)
    95d4:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    95d8:	e0bfe503 	ldbu	r2,-108(fp)
    95dc:	10800058 	cmpnei	r2,r2,1
    95e0:	1000211e 	bne	r2,zero,9668 <OSFlagPend+0x5c0>
        switch (wait_type) {
    95e4:	e0bffe03 	ldbu	r2,-8(fp)
    95e8:	10001616 	blt	r2,zero,9644 <OSFlagPend+0x59c>
    95ec:	10c00090 	cmplti	r3,r2,2
    95f0:	18000c1e 	bne	r3,zero,9624 <OSFlagPend+0x57c>
    95f4:	10800108 	cmpgei	r2,r2,4
    95f8:	1000121e 	bne	r2,zero,9644 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    95fc:	e0bffc17 	ldw	r2,-16(fp)
    9600:	1080020b 	ldhu	r2,8(r2)
    9604:	1007883a 	mov	r3,r2
    9608:	e0bfe78b 	ldhu	r2,-98(fp)
    960c:	0084303a 	nor	r2,zero,r2
    9610:	1884703a 	and	r2,r3,r2
    9614:	1007883a 	mov	r3,r2
    9618:	e0bffc17 	ldw	r2,-16(fp)
    961c:	10c0020d 	sth	r3,8(r2)
                 break;
    9620:	00001106 	br	9668 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    9624:	e0bffc17 	ldw	r2,-16(fp)
    9628:	10c0020b 	ldhu	r3,8(r2)
    962c:	e0bfe78b 	ldhu	r2,-98(fp)
    9630:	1884b03a 	or	r2,r3,r2
    9634:	1007883a 	mov	r3,r2
    9638:	e0bffc17 	ldw	r2,-16(fp)
    963c:	10c0020d 	sth	r3,8(r2)
                 break;
    9640:	00000906 	br	9668 <OSFlagPend+0x5c0>
    9644:	e0bfe617 	ldw	r2,-104(fp)
    9648:	e0bff515 	stw	r2,-44(fp)
    964c:	e0bff517 	ldw	r2,-44(fp)
    9650:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    9654:	e0800217 	ldw	r2,8(fp)
    9658:	00c01bc4 	movi	r3,111
    965c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    9660:	0005883a 	mov	r2,zero
    9664:	00000706 	br	9684 <OSFlagPend+0x5dc>
    9668:	e0bfe617 	ldw	r2,-104(fp)
    966c:	e0bff615 	stw	r2,-40(fp)
    9670:	e0bff617 	ldw	r2,-40(fp)
    9674:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    9678:	e0800217 	ldw	r2,8(fp)
    967c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    9680:	e0bfe78b 	ldhu	r2,-98(fp)
}
    9684:	e037883a 	mov	sp,fp
    9688:	dfc00117 	ldw	ra,4(sp)
    968c:	df000017 	ldw	fp,0(sp)
    9690:	dec00204 	addi	sp,sp,8
    9694:	f800283a 	ret

00009698 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    9698:	defffb04 	addi	sp,sp,-20
    969c:	df000415 	stw	fp,16(sp)
    96a0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    96a4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    96a8:	0005303a 	rdctl	r2,status
    96ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    96b0:	e0fffe17 	ldw	r3,-8(fp)
    96b4:	00bfff84 	movi	r2,-2
    96b8:	1884703a 	and	r2,r3,r2
    96bc:	1001703a 	wrctl	status,r2
  
  return context;
    96c0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    96c4:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    96c8:	00800074 	movhi	r2,1
    96cc:	109bd504 	addi	r2,r2,28500
    96d0:	10800017 	ldw	r2,0(r2)
    96d4:	10800b0b 	ldhu	r2,44(r2)
    96d8:	e0bffd0d 	sth	r2,-12(fp)
    96dc:	e0bffc17 	ldw	r2,-16(fp)
    96e0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    96e4:	e0bfff17 	ldw	r2,-4(fp)
    96e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
    96ec:	e0bffd0b 	ldhu	r2,-12(fp)
}
    96f0:	e037883a 	mov	sp,fp
    96f4:	df000017 	ldw	fp,0(sp)
    96f8:	dec00104 	addi	sp,sp,4
    96fc:	f800283a 	ret

00009700 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    9700:	deffef04 	addi	sp,sp,-68
    9704:	dfc01015 	stw	ra,64(sp)
    9708:	df000f15 	stw	fp,60(sp)
    970c:	df000f04 	addi	fp,sp,60
    9710:	e13ffc15 	stw	r4,-16(fp)
    9714:	2807883a 	mov	r3,r5
    9718:	3005883a 	mov	r2,r6
    971c:	e1ffff15 	stw	r7,-4(fp)
    9720:	e0fffd0d 	sth	r3,-12(fp)
    9724:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    9728:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    972c:	e0bfff17 	ldw	r2,-4(fp)
    9730:	1000021e 	bne	r2,zero,973c <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
    9734:	0005883a 	mov	r2,zero
    9738:	0000ce06 	br	9a74 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    973c:	e0bffc17 	ldw	r2,-16(fp)
    9740:	1000051e 	bne	r2,zero,9758 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    9744:	e0bfff17 	ldw	r2,-4(fp)
    9748:	00c01b84 	movi	r3,110
    974c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    9750:	0005883a 	mov	r2,zero
    9754:	0000c706 	br	9a74 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    9758:	e0bffc17 	ldw	r2,-16(fp)
    975c:	10800003 	ldbu	r2,0(r2)
    9760:	10803fcc 	andi	r2,r2,255
    9764:	10800160 	cmpeqi	r2,r2,5
    9768:	1000051e 	bne	r2,zero,9780 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    976c:	e0bfff17 	ldw	r2,-4(fp)
    9770:	00c00044 	movi	r3,1
    9774:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    9778:	0005883a 	mov	r2,zero
    977c:	0000bd06 	br	9a74 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9780:	0005303a 	rdctl	r2,status
    9784:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9788:	e0fff617 	ldw	r3,-40(fp)
    978c:	00bfff84 	movi	r2,-2
    9790:	1884703a 	and	r2,r3,r2
    9794:	1001703a 	wrctl	status,r2
  
  return context;
    9798:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    979c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
    97a0:	e0bffe03 	ldbu	r2,-8(fp)
    97a4:	10000326 	beq	r2,zero,97b4 <OSFlagPost+0xb4>
    97a8:	10800060 	cmpeqi	r2,r2,1
    97ac:	10000b1e 	bne	r2,zero,97dc <OSFlagPost+0xdc>
    97b0:	00001206 	br	97fc <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    97b4:	e0bffc17 	ldw	r2,-16(fp)
    97b8:	1080020b 	ldhu	r2,8(r2)
    97bc:	1007883a 	mov	r3,r2
    97c0:	e0bffd0b 	ldhu	r2,-12(fp)
    97c4:	0084303a 	nor	r2,zero,r2
    97c8:	1884703a 	and	r2,r3,r2
    97cc:	1007883a 	mov	r3,r2
    97d0:	e0bffc17 	ldw	r2,-16(fp)
    97d4:	10c0020d 	sth	r3,8(r2)
             break;
    97d8:	00001106 	br	9820 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    97dc:	e0bffc17 	ldw	r2,-16(fp)
    97e0:	10c0020b 	ldhu	r3,8(r2)
    97e4:	e0bffd0b 	ldhu	r2,-12(fp)
    97e8:	1884b03a 	or	r2,r3,r2
    97ec:	1007883a 	mov	r3,r2
    97f0:	e0bffc17 	ldw	r2,-16(fp)
    97f4:	10c0020d 	sth	r3,8(r2)
             break;
    97f8:	00000906 	br	9820 <OSFlagPost+0x120>
    97fc:	e0bff317 	ldw	r2,-52(fp)
    9800:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9804:	e0bff717 	ldw	r2,-36(fp)
    9808:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    980c:	e0bfff17 	ldw	r2,-4(fp)
    9810:	00c01c44 	movi	r3,113
    9814:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
    9818:	0005883a 	mov	r2,zero
    981c:	00009506 	br	9a74 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    9820:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    9824:	e0bffc17 	ldw	r2,-16(fp)
    9828:	10800117 	ldw	r2,4(r2)
    982c:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    9830:	00007406 	br	9a04 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
    9834:	e0bff117 	ldw	r2,-60(fp)
    9838:	10800483 	ldbu	r2,18(r2)
    983c:	10803fcc 	andi	r2,r2,255
    9840:	10c00060 	cmpeqi	r3,r2,1
    9844:	18004d1e 	bne	r3,zero,997c <OSFlagPost+0x27c>
    9848:	10c00088 	cmpgei	r3,r2,2
    984c:	1800021e 	bne	r3,zero,9858 <OSFlagPost+0x158>
    9850:	10003126 	beq	r2,zero,9918 <OSFlagPost+0x218>
    9854:	00005f06 	br	99d4 <OSFlagPost+0x2d4>
    9858:	10c000a0 	cmpeqi	r3,r2,2
    985c:	1800031e 	bne	r3,zero,986c <OSFlagPost+0x16c>
    9860:	108000e0 	cmpeqi	r2,r2,3
    9864:	1000181e 	bne	r2,zero,98c8 <OSFlagPost+0x1c8>
    9868:	00005a06 	br	99d4 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    986c:	e0bffc17 	ldw	r2,-16(fp)
    9870:	10c0020b 	ldhu	r3,8(r2)
    9874:	e0bff117 	ldw	r2,-60(fp)
    9878:	1080040b 	ldhu	r2,16(r2)
    987c:	1884703a 	and	r2,r3,r2
    9880:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    9884:	e0bff117 	ldw	r2,-60(fp)
    9888:	1080040b 	ldhu	r2,16(r2)
    988c:	10ffffcc 	andi	r3,r2,65535
    9890:	e0bff40b 	ldhu	r2,-48(fp)
    9894:	18800b1e 	bne	r3,r2,98c4 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    9898:	e0bff40b 	ldhu	r2,-48(fp)
    989c:	e13ff117 	ldw	r4,-60(fp)
    98a0:	100b883a 	mov	r5,r2
    98a4:	0009df40 	call	9df4 <OS_FlagTaskRdy>
    98a8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    98ac:	e0bff483 	ldbu	r2,-46(fp)
    98b0:	10800058 	cmpnei	r2,r2,1
    98b4:	1000031e 	bne	r2,zero,98c4 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    98b8:	00800044 	movi	r2,1
    98bc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    98c0:	00004d06 	br	99f8 <OSFlagPost+0x2f8>
    98c4:	00004c06 	br	99f8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    98c8:	e0bffc17 	ldw	r2,-16(fp)
    98cc:	10c0020b 	ldhu	r3,8(r2)
    98d0:	e0bff117 	ldw	r2,-60(fp)
    98d4:	1080040b 	ldhu	r2,16(r2)
    98d8:	1884703a 	and	r2,r3,r2
    98dc:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    98e0:	e0bff40b 	ldhu	r2,-48(fp)
    98e4:	10000b26 	beq	r2,zero,9914 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    98e8:	e0bff40b 	ldhu	r2,-48(fp)
    98ec:	e13ff117 	ldw	r4,-60(fp)
    98f0:	100b883a 	mov	r5,r2
    98f4:	0009df40 	call	9df4 <OS_FlagTaskRdy>
    98f8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    98fc:	e0bff483 	ldbu	r2,-46(fp)
    9900:	10800058 	cmpnei	r2,r2,1
    9904:	1000031e 	bne	r2,zero,9914 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    9908:	00800044 	movi	r2,1
    990c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    9910:	00003906 	br	99f8 <OSFlagPost+0x2f8>
    9914:	00003806 	br	99f8 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    9918:	e0bffc17 	ldw	r2,-16(fp)
    991c:	1080020b 	ldhu	r2,8(r2)
    9920:	0084303a 	nor	r2,zero,r2
    9924:	1007883a 	mov	r3,r2
    9928:	e0bff117 	ldw	r2,-60(fp)
    992c:	1080040b 	ldhu	r2,16(r2)
    9930:	1884703a 	and	r2,r3,r2
    9934:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    9938:	e0bff117 	ldw	r2,-60(fp)
    993c:	1080040b 	ldhu	r2,16(r2)
    9940:	10ffffcc 	andi	r3,r2,65535
    9944:	e0bff40b 	ldhu	r2,-48(fp)
    9948:	18800b1e 	bne	r3,r2,9978 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    994c:	e0bff40b 	ldhu	r2,-48(fp)
    9950:	e13ff117 	ldw	r4,-60(fp)
    9954:	100b883a 	mov	r5,r2
    9958:	0009df40 	call	9df4 <OS_FlagTaskRdy>
    995c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    9960:	e0bff483 	ldbu	r2,-46(fp)
    9964:	10800058 	cmpnei	r2,r2,1
    9968:	1000031e 	bne	r2,zero,9978 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    996c:	00800044 	movi	r2,1
    9970:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    9974:	00002006 	br	99f8 <OSFlagPost+0x2f8>
    9978:	00001f06 	br	99f8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    997c:	e0bffc17 	ldw	r2,-16(fp)
    9980:	1080020b 	ldhu	r2,8(r2)
    9984:	0084303a 	nor	r2,zero,r2
    9988:	1007883a 	mov	r3,r2
    998c:	e0bff117 	ldw	r2,-60(fp)
    9990:	1080040b 	ldhu	r2,16(r2)
    9994:	1884703a 	and	r2,r3,r2
    9998:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    999c:	e0bff40b 	ldhu	r2,-48(fp)
    99a0:	10000b26 	beq	r2,zero,99d0 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    99a4:	e0bff40b 	ldhu	r2,-48(fp)
    99a8:	e13ff117 	ldw	r4,-60(fp)
    99ac:	100b883a 	mov	r5,r2
    99b0:	0009df40 	call	9df4 <OS_FlagTaskRdy>
    99b4:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    99b8:	e0bff483 	ldbu	r2,-46(fp)
    99bc:	10800058 	cmpnei	r2,r2,1
    99c0:	1000031e 	bne	r2,zero,99d0 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    99c4:	00800044 	movi	r2,1
    99c8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    99cc:	00000a06 	br	99f8 <OSFlagPost+0x2f8>
    99d0:	00000906 	br	99f8 <OSFlagPost+0x2f8>
    99d4:	e0bff317 	ldw	r2,-52(fp)
    99d8:	e0bff815 	stw	r2,-32(fp)
    99dc:	e0bff817 	ldw	r2,-32(fp)
    99e0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    99e4:	e0bfff17 	ldw	r2,-4(fp)
    99e8:	00c01bc4 	movi	r3,111
    99ec:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    99f0:	0005883a 	mov	r2,zero
    99f4:	00001f06 	br	9a74 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    99f8:	e0bff117 	ldw	r2,-60(fp)
    99fc:	10800017 	ldw	r2,0(r2)
    9a00:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    9a04:	e0bff117 	ldw	r2,-60(fp)
    9a08:	103f8a1e 	bne	r2,zero,9834 <__alt_mem_Flash_flash_data+0xf4009834>
    9a0c:	e0bff317 	ldw	r2,-52(fp)
    9a10:	e0bff915 	stw	r2,-28(fp)
    9a14:	e0bff917 	ldw	r2,-28(fp)
    9a18:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    9a1c:	e0bff203 	ldbu	r2,-56(fp)
    9a20:	10800058 	cmpnei	r2,r2,1
    9a24:	1000011e 	bne	r2,zero,9a2c <OSFlagPost+0x32c>
        OS_Sched();
    9a28:	0007f240 	call	7f24 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9a2c:	0005303a 	rdctl	r2,status
    9a30:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9a34:	e0fffa17 	ldw	r3,-24(fp)
    9a38:	00bfff84 	movi	r2,-2
    9a3c:	1884703a 	and	r2,r3,r2
    9a40:	1001703a 	wrctl	status,r2
  
  return context;
    9a44:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    9a48:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
    9a4c:	e0bffc17 	ldw	r2,-16(fp)
    9a50:	1080020b 	ldhu	r2,8(r2)
    9a54:	e0bff50d 	sth	r2,-44(fp)
    9a58:	e0bff317 	ldw	r2,-52(fp)
    9a5c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9a60:	e0bffb17 	ldw	r2,-20(fp)
    9a64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    9a68:	e0bfff17 	ldw	r2,-4(fp)
    9a6c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    9a70:	e0bff50b 	ldhu	r2,-44(fp)
}
    9a74:	e037883a 	mov	sp,fp
    9a78:	dfc00117 	ldw	ra,4(sp)
    9a7c:	df000017 	ldw	fp,0(sp)
    9a80:	dec00204 	addi	sp,sp,8
    9a84:	f800283a 	ret

00009a88 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    9a88:	defff904 	addi	sp,sp,-28
    9a8c:	df000615 	stw	fp,24(sp)
    9a90:	df000604 	addi	fp,sp,24
    9a94:	e13ffe15 	stw	r4,-8(fp)
    9a98:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    9a9c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    9aa0:	e0bfff17 	ldw	r2,-4(fp)
    9aa4:	1000021e 	bne	r2,zero,9ab0 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    9aa8:	0005883a 	mov	r2,zero
    9aac:	00002306 	br	9b3c <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    9ab0:	e0bffe17 	ldw	r2,-8(fp)
    9ab4:	1000051e 	bne	r2,zero,9acc <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    9ab8:	e0bfff17 	ldw	r2,-4(fp)
    9abc:	00c01b84 	movi	r3,110
    9ac0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    9ac4:	0005883a 	mov	r2,zero
    9ac8:	00001c06 	br	9b3c <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    9acc:	e0bffe17 	ldw	r2,-8(fp)
    9ad0:	10800003 	ldbu	r2,0(r2)
    9ad4:	10803fcc 	andi	r2,r2,255
    9ad8:	10800160 	cmpeqi	r2,r2,5
    9adc:	1000051e 	bne	r2,zero,9af4 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    9ae0:	e0bfff17 	ldw	r2,-4(fp)
    9ae4:	00c00044 	movi	r3,1
    9ae8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    9aec:	0005883a 	mov	r2,zero
    9af0:	00001206 	br	9b3c <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9af4:	0005303a 	rdctl	r2,status
    9af8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9afc:	e0fffc17 	ldw	r3,-16(fp)
    9b00:	00bfff84 	movi	r2,-2
    9b04:	1884703a 	and	r2,r3,r2
    9b08:	1001703a 	wrctl	status,r2
  
  return context;
    9b0c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9b10:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
    9b14:	e0bffe17 	ldw	r2,-8(fp)
    9b18:	1080020b 	ldhu	r2,8(r2)
    9b1c:	e0bffb0d 	sth	r2,-20(fp)
    9b20:	e0bffa17 	ldw	r2,-24(fp)
    9b24:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9b28:	e0bffd17 	ldw	r2,-12(fp)
    9b2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    9b30:	e0bfff17 	ldw	r2,-4(fp)
    9b34:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    9b38:	e0bffb0b 	ldhu	r2,-20(fp)
}
    9b3c:	e037883a 	mov	sp,fp
    9b40:	df000017 	ldw	fp,0(sp)
    9b44:	dec00104 	addi	sp,sp,4
    9b48:	f800283a 	ret

00009b4c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    9b4c:	defff804 	addi	sp,sp,-32
    9b50:	df000715 	stw	fp,28(sp)
    9b54:	df000704 	addi	fp,sp,28
    9b58:	e13ffb15 	stw	r4,-20(fp)
    9b5c:	e17ffc15 	stw	r5,-16(fp)
    9b60:	3009883a 	mov	r4,r6
    9b64:	3807883a 	mov	r3,r7
    9b68:	e0800117 	ldw	r2,4(fp)
    9b6c:	e13ffd0d 	sth	r4,-12(fp)
    9b70:	e0fffe05 	stb	r3,-8(fp)
    9b74:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    9b78:	00800074 	movhi	r2,1
    9b7c:	109bd504 	addi	r2,r2,28500
    9b80:	10c00017 	ldw	r3,0(r2)
    9b84:	00800074 	movhi	r2,1
    9b88:	109bd504 	addi	r2,r2,28500
    9b8c:	10800017 	ldw	r2,0(r2)
    9b90:	10800c03 	ldbu	r2,48(r2)
    9b94:	10800814 	ori	r2,r2,32
    9b98:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    9b9c:	00800074 	movhi	r2,1
    9ba0:	109bd504 	addi	r2,r2,28500
    9ba4:	10800017 	ldw	r2,0(r2)
    9ba8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    9bac:	00800074 	movhi	r2,1
    9bb0:	109bd504 	addi	r2,r2,28500
    9bb4:	10800017 	ldw	r2,0(r2)
    9bb8:	e0ffff0b 	ldhu	r3,-4(fp)
    9bbc:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    9bc0:	00800074 	movhi	r2,1
    9bc4:	109bd504 	addi	r2,r2,28500
    9bc8:	10800017 	ldw	r2,0(r2)
    9bcc:	e0fffc17 	ldw	r3,-16(fp)
    9bd0:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    9bd4:	e0bffc17 	ldw	r2,-16(fp)
    9bd8:	e0fffd0b 	ldhu	r3,-12(fp)
    9bdc:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    9be0:	e0bffc17 	ldw	r2,-16(fp)
    9be4:	e0fffe03 	ldbu	r3,-8(fp)
    9be8:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    9bec:	00800074 	movhi	r2,1
    9bf0:	109bd504 	addi	r2,r2,28500
    9bf4:	10c00017 	ldw	r3,0(r2)
    9bf8:	e0bffc17 	ldw	r2,-16(fp)
    9bfc:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    9c00:	e0bffb17 	ldw	r2,-20(fp)
    9c04:	10c00117 	ldw	r3,4(r2)
    9c08:	e0bffc17 	ldw	r2,-16(fp)
    9c0c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    9c10:	e0bffc17 	ldw	r2,-16(fp)
    9c14:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    9c18:	e0bffc17 	ldw	r2,-16(fp)
    9c1c:	e0fffb17 	ldw	r3,-20(fp)
    9c20:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    9c24:	e0bffb17 	ldw	r2,-20(fp)
    9c28:	10800117 	ldw	r2,4(r2)
    9c2c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    9c30:	e0bff917 	ldw	r2,-28(fp)
    9c34:	10000326 	beq	r2,zero,9c44 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    9c38:	e0bff917 	ldw	r2,-28(fp)
    9c3c:	e0fffc17 	ldw	r3,-16(fp)
    9c40:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    9c44:	e0bffb17 	ldw	r2,-20(fp)
    9c48:	e0fffc17 	ldw	r3,-16(fp)
    9c4c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    9c50:	00800074 	movhi	r2,1
    9c54:	109bd504 	addi	r2,r2,28500
    9c58:	10800017 	ldw	r2,0(r2)
    9c5c:	10800d03 	ldbu	r2,52(r2)
    9c60:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    9c64:	e0fffa03 	ldbu	r3,-24(fp)
    9c68:	e13ffa03 	ldbu	r4,-24(fp)
    9c6c:	00800074 	movhi	r2,1
    9c70:	109bd244 	addi	r2,r2,28489
    9c74:	1105883a 	add	r2,r2,r4
    9c78:	10800003 	ldbu	r2,0(r2)
    9c7c:	1009883a 	mov	r4,r2
    9c80:	00800074 	movhi	r2,1
    9c84:	109bd504 	addi	r2,r2,28500
    9c88:	10800017 	ldw	r2,0(r2)
    9c8c:	10800d43 	ldbu	r2,53(r2)
    9c90:	0084303a 	nor	r2,zero,r2
    9c94:	2084703a 	and	r2,r4,r2
    9c98:	1009883a 	mov	r4,r2
    9c9c:	00800074 	movhi	r2,1
    9ca0:	109bd244 	addi	r2,r2,28489
    9ca4:	10c5883a 	add	r2,r2,r3
    9ca8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    9cac:	e0fffa03 	ldbu	r3,-24(fp)
    9cb0:	00800074 	movhi	r2,1
    9cb4:	109bd244 	addi	r2,r2,28489
    9cb8:	10c5883a 	add	r2,r2,r3
    9cbc:	10800003 	ldbu	r2,0(r2)
    9cc0:	10803fcc 	andi	r2,r2,255
    9cc4:	10000e1e 	bne	r2,zero,9d00 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    9cc8:	00800074 	movhi	r2,1
    9ccc:	109bd504 	addi	r2,r2,28500
    9cd0:	10800017 	ldw	r2,0(r2)
    9cd4:	10800d83 	ldbu	r2,54(r2)
    9cd8:	0084303a 	nor	r2,zero,r2
    9cdc:	1007883a 	mov	r3,r2
    9ce0:	00800074 	movhi	r2,1
    9ce4:	109bd204 	addi	r2,r2,28488
    9ce8:	10800003 	ldbu	r2,0(r2)
    9cec:	1884703a 	and	r2,r3,r2
    9cf0:	1007883a 	mov	r3,r2
    9cf4:	00800074 	movhi	r2,1
    9cf8:	109bd204 	addi	r2,r2,28488
    9cfc:	10c00005 	stb	r3,0(r2)
    }
}
    9d00:	e037883a 	mov	sp,fp
    9d04:	df000017 	ldw	fp,0(sp)
    9d08:	dec00104 	addi	sp,sp,4
    9d0c:	f800283a 	ret

00009d10 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    9d10:	defffb04 	addi	sp,sp,-20
    9d14:	dfc00415 	stw	ra,16(sp)
    9d18:	df000315 	stw	fp,12(sp)
    9d1c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    9d20:	010000b4 	movhi	r4,2
    9d24:	210ddc04 	addi	r4,r4,14192
    9d28:	0140dc04 	movi	r5,880
    9d2c:	0007e700 	call	7e70 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    9d30:	008000b4 	movhi	r2,2
    9d34:	108ddc04 	addi	r2,r2,14192
    9d38:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    9d3c:	008000b4 	movhi	r2,2
    9d40:	108de704 	addi	r2,r2,14236
    9d44:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    9d48:	e03ffd0d 	sth	zero,-12(fp)
    9d4c:	00001306 	br	9d9c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    9d50:	e0bffe17 	ldw	r2,-8(fp)
    9d54:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    9d58:	e0bffe17 	ldw	r2,-8(fp)
    9d5c:	e0ffff17 	ldw	r3,-4(fp)
    9d60:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    9d64:	e0bffe17 	ldw	r2,-8(fp)
    9d68:	00c00fc4 	movi	r3,63
    9d6c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    9d70:	e0bffe17 	ldw	r2,-8(fp)
    9d74:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    9d78:	e0bffe17 	ldw	r2,-8(fp)
    9d7c:	10800b04 	addi	r2,r2,44
    9d80:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    9d84:	e0bfff17 	ldw	r2,-4(fp)
    9d88:	10800b04 	addi	r2,r2,44
    9d8c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    9d90:	e0bffd0b 	ldhu	r2,-12(fp)
    9d94:	10800044 	addi	r2,r2,1
    9d98:	e0bffd0d 	sth	r2,-12(fp)
    9d9c:	e0bffd0b 	ldhu	r2,-12(fp)
    9da0:	108004f0 	cmpltui	r2,r2,19
    9da4:	103fea1e 	bne	r2,zero,9d50 <__alt_mem_Flash_flash_data+0xf4009d50>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    9da8:	e0bffe17 	ldw	r2,-8(fp)
    9dac:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    9db0:	e0bffe17 	ldw	r2,-8(fp)
    9db4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    9db8:	e0bffe17 	ldw	r2,-8(fp)
    9dbc:	00c00fc4 	movi	r3,63
    9dc0:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    9dc4:	e0bffe17 	ldw	r2,-8(fp)
    9dc8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    9dcc:	00800074 	movhi	r2,1
    9dd0:	109bd704 	addi	r2,r2,28508
    9dd4:	00c000b4 	movhi	r3,2
    9dd8:	18cddc04 	addi	r3,r3,14192
    9ddc:	10c00015 	stw	r3,0(r2)
#endif
}
    9de0:	e037883a 	mov	sp,fp
    9de4:	dfc00117 	ldw	ra,4(sp)
    9de8:	df000017 	ldw	fp,0(sp)
    9dec:	dec00204 	addi	sp,sp,8
    9df0:	f800283a 	ret

00009df4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    9df4:	defffa04 	addi	sp,sp,-24
    9df8:	dfc00515 	stw	ra,20(sp)
    9dfc:	df000415 	stw	fp,16(sp)
    9e00:	df000404 	addi	fp,sp,16
    9e04:	e13ffe15 	stw	r4,-8(fp)
    9e08:	2805883a 	mov	r2,r5
    9e0c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    9e10:	e0bffe17 	ldw	r2,-8(fp)
    9e14:	10800217 	ldw	r2,8(r2)
    9e18:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
    9e1c:	e0bffd17 	ldw	r2,-12(fp)
    9e20:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    9e24:	e0bffd17 	ldw	r2,-12(fp)
    9e28:	e0ffff0b 	ldhu	r3,-4(fp)
    9e2c:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    9e30:	e0bffd17 	ldw	r2,-12(fp)
    9e34:	10c00c03 	ldbu	r3,48(r2)
    9e38:	00bff7c4 	movi	r2,-33
    9e3c:	1884703a 	and	r2,r3,r2
    9e40:	1007883a 	mov	r3,r2
    9e44:	e0bffd17 	ldw	r2,-12(fp)
    9e48:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    9e4c:	e0bffd17 	ldw	r2,-12(fp)
    9e50:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    9e54:	e0bffd17 	ldw	r2,-12(fp)
    9e58:	10800c03 	ldbu	r2,48(r2)
    9e5c:	10803fcc 	andi	r2,r2,255
    9e60:	10001f1e 	bne	r2,zero,9ee0 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    9e64:	e0bffd17 	ldw	r2,-12(fp)
    9e68:	10c00d83 	ldbu	r3,54(r2)
    9e6c:	00800074 	movhi	r2,1
    9e70:	109bd204 	addi	r2,r2,28488
    9e74:	10800003 	ldbu	r2,0(r2)
    9e78:	1884b03a 	or	r2,r3,r2
    9e7c:	1007883a 	mov	r3,r2
    9e80:	00800074 	movhi	r2,1
    9e84:	109bd204 	addi	r2,r2,28488
    9e88:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    9e8c:	e0bffd17 	ldw	r2,-12(fp)
    9e90:	10800d03 	ldbu	r2,52(r2)
    9e94:	10c03fcc 	andi	r3,r2,255
    9e98:	e0bffd17 	ldw	r2,-12(fp)
    9e9c:	10800d03 	ldbu	r2,52(r2)
    9ea0:	11003fcc 	andi	r4,r2,255
    9ea4:	00800074 	movhi	r2,1
    9ea8:	109bd244 	addi	r2,r2,28489
    9eac:	1105883a 	add	r2,r2,r4
    9eb0:	11000003 	ldbu	r4,0(r2)
    9eb4:	e0bffd17 	ldw	r2,-12(fp)
    9eb8:	10800d43 	ldbu	r2,53(r2)
    9ebc:	2084b03a 	or	r2,r4,r2
    9ec0:	1009883a 	mov	r4,r2
    9ec4:	00800074 	movhi	r2,1
    9ec8:	109bd244 	addi	r2,r2,28489
    9ecc:	10c5883a 	add	r2,r2,r3
    9ed0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
    9ed4:	00800044 	movi	r2,1
    9ed8:	e0bffc05 	stb	r2,-16(fp)
    9edc:	00000106 	br	9ee4 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
    9ee0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
    9ee4:	e13ffe17 	ldw	r4,-8(fp)
    9ee8:	0009f040 	call	9f04 <OS_FlagUnlink>
    return (sched);
    9eec:	e0bffc03 	ldbu	r2,-16(fp)
}
    9ef0:	e037883a 	mov	sp,fp
    9ef4:	dfc00117 	ldw	ra,4(sp)
    9ef8:	df000017 	ldw	fp,0(sp)
    9efc:	dec00204 	addi	sp,sp,8
    9f00:	f800283a 	ret

00009f04 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    9f04:	defffa04 	addi	sp,sp,-24
    9f08:	df000515 	stw	fp,20(sp)
    9f0c:	df000504 	addi	fp,sp,20
    9f10:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    9f14:	e0bfff17 	ldw	r2,-4(fp)
    9f18:	10800117 	ldw	r2,4(r2)
    9f1c:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    9f20:	e0bfff17 	ldw	r2,-4(fp)
    9f24:	10800017 	ldw	r2,0(r2)
    9f28:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    9f2c:	e0bffb17 	ldw	r2,-20(fp)
    9f30:	10000b1e 	bne	r2,zero,9f60 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    9f34:	e0bfff17 	ldw	r2,-4(fp)
    9f38:	10800317 	ldw	r2,12(r2)
    9f3c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    9f40:	e0bffd17 	ldw	r2,-12(fp)
    9f44:	e0fffc17 	ldw	r3,-16(fp)
    9f48:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    9f4c:	e0bffc17 	ldw	r2,-16(fp)
    9f50:	10000b26 	beq	r2,zero,9f80 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    9f54:	e0bffc17 	ldw	r2,-16(fp)
    9f58:	10000115 	stw	zero,4(r2)
    9f5c:	00000806 	br	9f80 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    9f60:	e0bffb17 	ldw	r2,-20(fp)
    9f64:	e0fffc17 	ldw	r3,-16(fp)
    9f68:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    9f6c:	e0bffc17 	ldw	r2,-16(fp)
    9f70:	10000326 	beq	r2,zero,9f80 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    9f74:	e0bffc17 	ldw	r2,-16(fp)
    9f78:	e0fffb17 	ldw	r3,-20(fp)
    9f7c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    9f80:	e0bfff17 	ldw	r2,-4(fp)
    9f84:	10800217 	ldw	r2,8(r2)
    9f88:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    9f8c:	e0bffe17 	ldw	r2,-8(fp)
    9f90:	10000a15 	stw	zero,40(r2)
#endif
}
    9f94:	e037883a 	mov	sp,fp
    9f98:	df000017 	ldw	fp,0(sp)
    9f9c:	dec00104 	addi	sp,sp,4
    9fa0:	f800283a 	ret

00009fa4 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
    9fa4:	defffa04 	addi	sp,sp,-24
    9fa8:	df000515 	stw	fp,20(sp)
    9fac:	df000504 	addi	fp,sp,20
    9fb0:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
    9fb4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
    9fb8:	e0bfff17 	ldw	r2,-4(fp)
    9fbc:	1000021e 	bne	r2,zero,9fc8 <OSMboxAccept+0x24>
        return ((void *)0);
    9fc0:	0005883a 	mov	r2,zero
    9fc4:	00001906 	br	a02c <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
    9fc8:	e0bfff17 	ldw	r2,-4(fp)
    9fcc:	10800003 	ldbu	r2,0(r2)
    9fd0:	10803fcc 	andi	r2,r2,255
    9fd4:	10800060 	cmpeqi	r2,r2,1
    9fd8:	1000021e 	bne	r2,zero,9fe4 <OSMboxAccept+0x40>
        return ((void *)0);
    9fdc:	0005883a 	mov	r2,zero
    9fe0:	00001206 	br	a02c <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9fe4:	0005303a 	rdctl	r2,status
    9fe8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9fec:	e0fffd17 	ldw	r3,-12(fp)
    9ff0:	00bfff84 	movi	r2,-2
    9ff4:	1884703a 	and	r2,r3,r2
    9ff8:	1001703a 	wrctl	status,r2
  
  return context;
    9ffc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    a000:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
    a004:	e0bfff17 	ldw	r2,-4(fp)
    a008:	10800117 	ldw	r2,4(r2)
    a00c:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
    a010:	e0bfff17 	ldw	r2,-4(fp)
    a014:	10000115 	stw	zero,4(r2)
    a018:	e0bffb17 	ldw	r2,-20(fp)
    a01c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a020:	e0bffe17 	ldw	r2,-8(fp)
    a024:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
    a028:	e0bffc17 	ldw	r2,-16(fp)
}
    a02c:	e037883a 	mov	sp,fp
    a030:	df000017 	ldw	fp,0(sp)
    a034:	dec00104 	addi	sp,sp,4
    a038:	f800283a 	ret

0000a03c <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
    a03c:	defff904 	addi	sp,sp,-28
    a040:	dfc00615 	stw	ra,24(sp)
    a044:	df000515 	stw	fp,20(sp)
    a048:	df000504 	addi	fp,sp,20
    a04c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    a050:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    a054:	00800074 	movhi	r2,1
    a058:	109bd404 	addi	r2,r2,28496
    a05c:	10800003 	ldbu	r2,0(r2)
    a060:	10803fcc 	andi	r2,r2,255
    a064:	10000226 	beq	r2,zero,a070 <OSMboxCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    a068:	0005883a 	mov	r2,zero
    a06c:	00002d06 	br	a124 <OSMboxCreate+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a070:	0005303a 	rdctl	r2,status
    a074:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a078:	e0fffd17 	ldw	r3,-12(fp)
    a07c:	00bfff84 	movi	r2,-2
    a080:	1884703a 	and	r2,r3,r2
    a084:	1001703a 	wrctl	status,r2
  
  return context;
    a088:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    a08c:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    a090:	00800074 	movhi	r2,1
    a094:	109bd304 	addi	r2,r2,28492
    a098:	10800017 	ldw	r2,0(r2)
    a09c:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    a0a0:	00800074 	movhi	r2,1
    a0a4:	109bd304 	addi	r2,r2,28492
    a0a8:	10800017 	ldw	r2,0(r2)
    a0ac:	10000726 	beq	r2,zero,a0cc <OSMboxCreate+0x90>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    a0b0:	00800074 	movhi	r2,1
    a0b4:	109bd304 	addi	r2,r2,28492
    a0b8:	10800017 	ldw	r2,0(r2)
    a0bc:	10c00117 	ldw	r3,4(r2)
    a0c0:	00800074 	movhi	r2,1
    a0c4:	109bd304 	addi	r2,r2,28492
    a0c8:	10c00015 	stw	r3,0(r2)
    a0cc:	e0bffb17 	ldw	r2,-20(fp)
    a0d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a0d4:	e0bffe17 	ldw	r2,-8(fp)
    a0d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
    a0dc:	e0bffc17 	ldw	r2,-16(fp)
    a0e0:	10000f26 	beq	r2,zero,a120 <OSMboxCreate+0xe4>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
    a0e4:	e0bffc17 	ldw	r2,-16(fp)
    a0e8:	00c00044 	movi	r3,1
    a0ec:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
    a0f0:	e0bffc17 	ldw	r2,-16(fp)
    a0f4:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
    a0f8:	e0bffc17 	ldw	r2,-16(fp)
    a0fc:	e0ffff17 	ldw	r3,-4(fp)
    a100:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
    a104:	e0bffc17 	ldw	r2,-16(fp)
    a108:	00c00fc4 	movi	r3,63
    a10c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    a110:	e0bffc17 	ldw	r2,-16(fp)
    a114:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
    a118:	e13ffc17 	ldw	r4,-16(fp)
    a11c:	0007aac0 	call	7aac <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
    a120:	e0bffc17 	ldw	r2,-16(fp)
}
    a124:	e037883a 	mov	sp,fp
    a128:	dfc00117 	ldw	ra,4(sp)
    a12c:	df000017 	ldw	fp,0(sp)
    a130:	dec00204 	addi	sp,sp,8
    a134:	f800283a 	ret

0000a138 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    a138:	defff304 	addi	sp,sp,-52
    a13c:	dfc00c15 	stw	ra,48(sp)
    a140:	df000b15 	stw	fp,44(sp)
    a144:	df000b04 	addi	fp,sp,44
    a148:	e13ffd15 	stw	r4,-12(fp)
    a14c:	2805883a 	mov	r2,r5
    a150:	e1bfff15 	stw	r6,-4(fp)
    a154:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    a158:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    a15c:	e0bfff17 	ldw	r2,-4(fp)
    a160:	1000021e 	bne	r2,zero,a16c <OSMboxDel+0x34>
        return (pevent);
    a164:	e0bffd17 	ldw	r2,-12(fp)
    a168:	00008806 	br	a38c <OSMboxDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    a16c:	e0bffd17 	ldw	r2,-12(fp)
    a170:	1000051e 	bne	r2,zero,a188 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    a174:	e0bfff17 	ldw	r2,-4(fp)
    a178:	00c00104 	movi	r3,4
    a17c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    a180:	e0bffd17 	ldw	r2,-12(fp)
    a184:	00008106 	br	a38c <OSMboxDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
    a188:	e0bffd17 	ldw	r2,-12(fp)
    a18c:	10800003 	ldbu	r2,0(r2)
    a190:	10803fcc 	andi	r2,r2,255
    a194:	10800060 	cmpeqi	r2,r2,1
    a198:	1000051e 	bne	r2,zero,a1b0 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    a19c:	e0bfff17 	ldw	r2,-4(fp)
    a1a0:	00c00044 	movi	r3,1
    a1a4:	10c00005 	stb	r3,0(r2)
        return (pevent);
    a1a8:	e0bffd17 	ldw	r2,-12(fp)
    a1ac:	00007706 	br	a38c <OSMboxDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    a1b0:	00800074 	movhi	r2,1
    a1b4:	109bd404 	addi	r2,r2,28496
    a1b8:	10800003 	ldbu	r2,0(r2)
    a1bc:	10803fcc 	andi	r2,r2,255
    a1c0:	10000526 	beq	r2,zero,a1d8 <OSMboxDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    a1c4:	e0bfff17 	ldw	r2,-4(fp)
    a1c8:	00c003c4 	movi	r3,15
    a1cc:	10c00005 	stb	r3,0(r2)
        return (pevent);
    a1d0:	e0bffd17 	ldw	r2,-12(fp)
    a1d4:	00006d06 	br	a38c <OSMboxDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a1d8:	0005303a 	rdctl	r2,status
    a1dc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a1e0:	e0fff817 	ldw	r3,-32(fp)
    a1e4:	00bfff84 	movi	r2,-2
    a1e8:	1884703a 	and	r2,r3,r2
    a1ec:	1001703a 	wrctl	status,r2
  
  return context;
    a1f0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    a1f4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
    a1f8:	e0bffd17 	ldw	r2,-12(fp)
    a1fc:	10800283 	ldbu	r2,10(r2)
    a200:	10803fcc 	andi	r2,r2,255
    a204:	10000326 	beq	r2,zero,a214 <OSMboxDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    a208:	00800044 	movi	r2,1
    a20c:	e0bff505 	stb	r2,-44(fp)
    a210:	00000106 	br	a218 <OSMboxDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    a214:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
    a218:	e0bffe03 	ldbu	r2,-8(fp)
    a21c:	10000326 	beq	r2,zero,a22c <OSMboxDel+0xf4>
    a220:	10800060 	cmpeqi	r2,r2,1
    a224:	10002c1e 	bne	r2,zero,a2d8 <OSMboxDel+0x1a0>
    a228:	00004d06 	br	a360 <OSMboxDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
    a22c:	e0bff503 	ldbu	r2,-44(fp)
    a230:	10001a1e 	bne	r2,zero,a29c <OSMboxDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    a234:	e0bffd17 	ldw	r2,-12(fp)
    a238:	00c00fc4 	movi	r3,63
    a23c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    a240:	e0bffd17 	ldw	r2,-12(fp)
    a244:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
    a248:	e0bffd17 	ldw	r2,-12(fp)
    a24c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
    a250:	00800074 	movhi	r2,1
    a254:	109bd304 	addi	r2,r2,28492
    a258:	10c00017 	ldw	r3,0(r2)
    a25c:	e0bffd17 	ldw	r2,-12(fp)
    a260:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
    a264:	e0bffd17 	ldw	r2,-12(fp)
    a268:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
    a26c:	00800074 	movhi	r2,1
    a270:	109bd304 	addi	r2,r2,28492
    a274:	e0fffd17 	ldw	r3,-12(fp)
    a278:	10c00015 	stw	r3,0(r2)
    a27c:	e0bff717 	ldw	r2,-36(fp)
    a280:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a284:	e0bff917 	ldw	r2,-28(fp)
    a288:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
    a28c:	e0bfff17 	ldw	r2,-4(fp)
    a290:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
    a294:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
    a298:	00003b06 	br	a388 <OSMboxDel+0x250>
    a29c:	e0bff717 	ldw	r2,-36(fp)
    a2a0:	e0bffa15 	stw	r2,-24(fp)
    a2a4:	e0bffa17 	ldw	r2,-24(fp)
    a2a8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
    a2ac:	e0bfff17 	ldw	r2,-4(fp)
    a2b0:	00c01244 	movi	r3,73
    a2b4:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
    a2b8:	e0bffd17 	ldw	r2,-12(fp)
    a2bc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    a2c0:	00003106 	br	a388 <OSMboxDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
    a2c4:	e13ffd17 	ldw	r4,-12(fp)
    a2c8:	000b883a 	mov	r5,zero
    a2cc:	01800084 	movi	r6,2
    a2d0:	000f883a 	mov	r7,zero
    a2d4:	000750c0 	call	750c <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
    a2d8:	e0bffd17 	ldw	r2,-12(fp)
    a2dc:	10800283 	ldbu	r2,10(r2)
    a2e0:	10803fcc 	andi	r2,r2,255
    a2e4:	103ff71e 	bne	r2,zero,a2c4 <__alt_mem_Flash_flash_data+0xf400a2c4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    a2e8:	e0bffd17 	ldw	r2,-12(fp)
    a2ec:	00c00fc4 	movi	r3,63
    a2f0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    a2f4:	e0bffd17 	ldw	r2,-12(fp)
    a2f8:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    a2fc:	e0bffd17 	ldw	r2,-12(fp)
    a300:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    a304:	00800074 	movhi	r2,1
    a308:	109bd304 	addi	r2,r2,28492
    a30c:	10c00017 	ldw	r3,0(r2)
    a310:	e0bffd17 	ldw	r2,-12(fp)
    a314:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    a318:	e0bffd17 	ldw	r2,-12(fp)
    a31c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    a320:	00800074 	movhi	r2,1
    a324:	109bd304 	addi	r2,r2,28492
    a328:	e0fffd17 	ldw	r3,-12(fp)
    a32c:	10c00015 	stw	r3,0(r2)
    a330:	e0bff717 	ldw	r2,-36(fp)
    a334:	e0bffb15 	stw	r2,-20(fp)
    a338:	e0bffb17 	ldw	r2,-20(fp)
    a33c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    a340:	e0bff503 	ldbu	r2,-44(fp)
    a344:	10800058 	cmpnei	r2,r2,1
    a348:	1000011e 	bne	r2,zero,a350 <OSMboxDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    a34c:	0007f240 	call	7f24 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
    a350:	e0bfff17 	ldw	r2,-4(fp)
    a354:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
    a358:	e03ff615 	stw	zero,-40(fp)
             break;
    a35c:	00000a06 	br	a388 <OSMboxDel+0x250>
    a360:	e0bff717 	ldw	r2,-36(fp)
    a364:	e0bffc15 	stw	r2,-16(fp)
    a368:	e0bffc17 	ldw	r2,-16(fp)
    a36c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
    a370:	e0bfff17 	ldw	r2,-4(fp)
    a374:	00c001c4 	movi	r3,7
    a378:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
    a37c:	e0bffd17 	ldw	r2,-12(fp)
    a380:	e0bff615 	stw	r2,-40(fp)
             break;
    a384:	0001883a 	nop
    }
    return (pevent_return);
    a388:	e0bff617 	ldw	r2,-40(fp)
}
    a38c:	e037883a 	mov	sp,fp
    a390:	dfc00117 	ldw	ra,4(sp)
    a394:	df000017 	ldw	fp,0(sp)
    a398:	dec00204 	addi	sp,sp,8
    a39c:	f800283a 	ret

0000a3a0 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    a3a0:	defff404 	addi	sp,sp,-48
    a3a4:	dfc00b15 	stw	ra,44(sp)
    a3a8:	df000a15 	stw	fp,40(sp)
    a3ac:	df000a04 	addi	fp,sp,40
    a3b0:	e13ffd15 	stw	r4,-12(fp)
    a3b4:	2805883a 	mov	r2,r5
    a3b8:	e1bfff15 	stw	r6,-4(fp)
    a3bc:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a3c0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    a3c4:	e0bfff17 	ldw	r2,-4(fp)
    a3c8:	1000021e 	bne	r2,zero,a3d4 <OSMboxPend+0x34>
        return ((void *)0);
    a3cc:	0005883a 	mov	r2,zero
    a3d0:	00009706 	br	a630 <OSMboxPend+0x290>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    a3d4:	e0bffd17 	ldw	r2,-12(fp)
    a3d8:	1000051e 	bne	r2,zero,a3f0 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    a3dc:	e0bfff17 	ldw	r2,-4(fp)
    a3e0:	00c00104 	movi	r3,4
    a3e4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    a3e8:	0005883a 	mov	r2,zero
    a3ec:	00009006 	br	a630 <OSMboxPend+0x290>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
    a3f0:	e0bffd17 	ldw	r2,-12(fp)
    a3f4:	10800003 	ldbu	r2,0(r2)
    a3f8:	10803fcc 	andi	r2,r2,255
    a3fc:	10800060 	cmpeqi	r2,r2,1
    a400:	1000051e 	bne	r2,zero,a418 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    a404:	e0bfff17 	ldw	r2,-4(fp)
    a408:	00c00044 	movi	r3,1
    a40c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    a410:	0005883a 	mov	r2,zero
    a414:	00008606 	br	a630 <OSMboxPend+0x290>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    a418:	00800074 	movhi	r2,1
    a41c:	109bd404 	addi	r2,r2,28496
    a420:	10800003 	ldbu	r2,0(r2)
    a424:	10803fcc 	andi	r2,r2,255
    a428:	10000526 	beq	r2,zero,a440 <OSMboxPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    a42c:	e0bfff17 	ldw	r2,-4(fp)
    a430:	00c00084 	movi	r3,2
    a434:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    a438:	0005883a 	mov	r2,zero
    a43c:	00007c06 	br	a630 <OSMboxPend+0x290>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    a440:	00800074 	movhi	r2,1
    a444:	109bc604 	addi	r2,r2,28440
    a448:	10800003 	ldbu	r2,0(r2)
    a44c:	10803fcc 	andi	r2,r2,255
    a450:	10000526 	beq	r2,zero,a468 <OSMboxPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    a454:	e0bfff17 	ldw	r2,-4(fp)
    a458:	00c00344 	movi	r3,13
    a45c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    a460:	0005883a 	mov	r2,zero
    a464:	00007206 	br	a630 <OSMboxPend+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a468:	0005303a 	rdctl	r2,status
    a46c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a470:	e0fff817 	ldw	r3,-32(fp)
    a474:	00bfff84 	movi	r2,-2
    a478:	1884703a 	and	r2,r3,r2
    a47c:	1001703a 	wrctl	status,r2
  
  return context;
    a480:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    a484:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
    a488:	e0bffd17 	ldw	r2,-12(fp)
    a48c:	10800117 	ldw	r2,4(r2)
    a490:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
    a494:	e0bff617 	ldw	r2,-40(fp)
    a498:	10000a26 	beq	r2,zero,a4c4 <OSMboxPend+0x124>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
    a49c:	e0bffd17 	ldw	r2,-12(fp)
    a4a0:	10000115 	stw	zero,4(r2)
    a4a4:	e0bff717 	ldw	r2,-36(fp)
    a4a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a4ac:	e0bff917 	ldw	r2,-28(fp)
    a4b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    a4b4:	e0bfff17 	ldw	r2,-4(fp)
    a4b8:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
    a4bc:	e0bff617 	ldw	r2,-40(fp)
    a4c0:	00005b06 	br	a630 <OSMboxPend+0x290>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
    a4c4:	00800074 	movhi	r2,1
    a4c8:	109bd504 	addi	r2,r2,28500
    a4cc:	10c00017 	ldw	r3,0(r2)
    a4d0:	00800074 	movhi	r2,1
    a4d4:	109bd504 	addi	r2,r2,28500
    a4d8:	10800017 	ldw	r2,0(r2)
    a4dc:	10800c03 	ldbu	r2,48(r2)
    a4e0:	10800094 	ori	r2,r2,2
    a4e4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    a4e8:	00800074 	movhi	r2,1
    a4ec:	109bd504 	addi	r2,r2,28500
    a4f0:	10800017 	ldw	r2,0(r2)
    a4f4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
    a4f8:	00800074 	movhi	r2,1
    a4fc:	109bd504 	addi	r2,r2,28500
    a500:	10800017 	ldw	r2,0(r2)
    a504:	e0fffe0b 	ldhu	r3,-8(fp)
    a508:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    a50c:	e13ffd17 	ldw	r4,-12(fp)
    a510:	00076a40 	call	76a4 <OS_EventTaskWait>
    a514:	e0bff717 	ldw	r2,-36(fp)
    a518:	e0bffa15 	stw	r2,-24(fp)
    a51c:	e0bffa17 	ldw	r2,-24(fp)
    a520:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
    a524:	0007f240 	call	7f24 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a528:	0005303a 	rdctl	r2,status
    a52c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a530:	e0fffb17 	ldw	r3,-20(fp)
    a534:	00bfff84 	movi	r2,-2
    a538:	1884703a 	and	r2,r3,r2
    a53c:	1001703a 	wrctl	status,r2
  
  return context;
    a540:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    a544:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    a548:	00800074 	movhi	r2,1
    a54c:	109bd504 	addi	r2,r2,28500
    a550:	10800017 	ldw	r2,0(r2)
    a554:	10800c43 	ldbu	r2,49(r2)
    a558:	10803fcc 	andi	r2,r2,255
    a55c:	10000326 	beq	r2,zero,a56c <OSMboxPend+0x1cc>
    a560:	108000a0 	cmpeqi	r2,r2,2
    a564:	1000091e 	bne	r2,zero,a58c <OSMboxPend+0x1ec>
    a568:	00000d06 	br	a5a0 <OSMboxPend+0x200>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
    a56c:	00800074 	movhi	r2,1
    a570:	109bd504 	addi	r2,r2,28500
    a574:	10800017 	ldw	r2,0(r2)
    a578:	10800917 	ldw	r2,36(r2)
    a57c:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
    a580:	e0bfff17 	ldw	r2,-4(fp)
    a584:	10000005 	stb	zero,0(r2)
             break;
    a588:	00001006 	br	a5cc <OSMboxPend+0x22c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    a58c:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    a590:	e0bfff17 	ldw	r2,-4(fp)
    a594:	00c00384 	movi	r3,14
    a598:	10c00005 	stb	r3,0(r2)
             break;
    a59c:	00000b06 	br	a5cc <OSMboxPend+0x22c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    a5a0:	00800074 	movhi	r2,1
    a5a4:	109bd504 	addi	r2,r2,28500
    a5a8:	10800017 	ldw	r2,0(r2)
    a5ac:	1009883a 	mov	r4,r2
    a5b0:	e17ffd17 	ldw	r5,-12(fp)
    a5b4:	00078fc0 	call	78fc <OS_EventTaskRemove>
             pmsg = (void *)0;
    a5b8:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    a5bc:	e0bfff17 	ldw	r2,-4(fp)
    a5c0:	00c00284 	movi	r3,10
    a5c4:	10c00005 	stb	r3,0(r2)
             break;
    a5c8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    a5cc:	00800074 	movhi	r2,1
    a5d0:	109bd504 	addi	r2,r2,28500
    a5d4:	10800017 	ldw	r2,0(r2)
    a5d8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    a5dc:	00800074 	movhi	r2,1
    a5e0:	109bd504 	addi	r2,r2,28500
    a5e4:	10800017 	ldw	r2,0(r2)
    a5e8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    a5ec:	00800074 	movhi	r2,1
    a5f0:	109bd504 	addi	r2,r2,28500
    a5f4:	10800017 	ldw	r2,0(r2)
    a5f8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    a5fc:	00800074 	movhi	r2,1
    a600:	109bd504 	addi	r2,r2,28500
    a604:	10800017 	ldw	r2,0(r2)
    a608:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    a60c:	00800074 	movhi	r2,1
    a610:	109bd504 	addi	r2,r2,28500
    a614:	10800017 	ldw	r2,0(r2)
    a618:	10000915 	stw	zero,36(r2)
    a61c:	e0bff717 	ldw	r2,-36(fp)
    a620:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a624:	e0bffc17 	ldw	r2,-16(fp)
    a628:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    a62c:	e0bff617 	ldw	r2,-40(fp)
}
    a630:	e037883a 	mov	sp,fp
    a634:	dfc00117 	ldw	ra,4(sp)
    a638:	df000017 	ldw	fp,0(sp)
    a63c:	dec00204 	addi	sp,sp,8
    a640:	f800283a 	ret

0000a644 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    a644:	defff604 	addi	sp,sp,-40
    a648:	dfc00915 	stw	ra,36(sp)
    a64c:	df000815 	stw	fp,32(sp)
    a650:	df000804 	addi	fp,sp,32
    a654:	e13ffd15 	stw	r4,-12(fp)
    a658:	2805883a 	mov	r2,r5
    a65c:	e1bfff15 	stw	r6,-4(fp)
    a660:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    a664:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    a668:	e0bfff17 	ldw	r2,-4(fp)
    a66c:	1000021e 	bne	r2,zero,a678 <OSMboxPendAbort+0x34>
        return (0);
    a670:	0005883a 	mov	r2,zero
    a674:	00004906 	br	a79c <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    a678:	e0bffd17 	ldw	r2,-12(fp)
    a67c:	1000051e 	bne	r2,zero,a694 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    a680:	e0bfff17 	ldw	r2,-4(fp)
    a684:	00c00104 	movi	r3,4
    a688:	10c00005 	stb	r3,0(r2)
        return (0);
    a68c:	0005883a 	mov	r2,zero
    a690:	00004206 	br	a79c <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
    a694:	e0bffd17 	ldw	r2,-12(fp)
    a698:	10800003 	ldbu	r2,0(r2)
    a69c:	10803fcc 	andi	r2,r2,255
    a6a0:	10800060 	cmpeqi	r2,r2,1
    a6a4:	1000051e 	bne	r2,zero,a6bc <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    a6a8:	e0bfff17 	ldw	r2,-4(fp)
    a6ac:	00c00044 	movi	r3,1
    a6b0:	10c00005 	stb	r3,0(r2)
        return (0);
    a6b4:	0005883a 	mov	r2,zero
    a6b8:	00003806 	br	a79c <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a6bc:	0005303a 	rdctl	r2,status
    a6c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a6c4:	e0fffa17 	ldw	r3,-24(fp)
    a6c8:	00bfff84 	movi	r2,-2
    a6cc:	1884703a 	and	r2,r3,r2
    a6d0:	1001703a 	wrctl	status,r2
  
  return context;
    a6d4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    a6d8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
    a6dc:	e0bffd17 	ldw	r2,-12(fp)
    a6e0:	10800283 	ldbu	r2,10(r2)
    a6e4:	10803fcc 	andi	r2,r2,255
    a6e8:	10002526 	beq	r2,zero,a780 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
    a6ec:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    a6f0:	e0bffe03 	ldbu	r2,-8(fp)
    a6f4:	10800060 	cmpeqi	r2,r2,1
    a6f8:	10000e26 	beq	r2,zero,a734 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
    a6fc:	00000806 	br	a720 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
    a700:	e13ffd17 	ldw	r4,-12(fp)
    a704:	000b883a 	mov	r5,zero
    a708:	01800084 	movi	r6,2
    a70c:	01c00084 	movi	r7,2
    a710:	000750c0 	call	750c <OS_EventTaskRdy>
                     nbr_tasks++;
    a714:	e0bff803 	ldbu	r2,-32(fp)
    a718:	10800044 	addi	r2,r2,1
    a71c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
    a720:	e0bffd17 	ldw	r2,-12(fp)
    a724:	10800283 	ldbu	r2,10(r2)
    a728:	10803fcc 	andi	r2,r2,255
    a72c:	103ff41e 	bne	r2,zero,a700 <__alt_mem_Flash_flash_data+0xf400a700>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    a730:	00000906 	br	a758 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
    a734:	e13ffd17 	ldw	r4,-12(fp)
    a738:	000b883a 	mov	r5,zero
    a73c:	01800084 	movi	r6,2
    a740:	01c00084 	movi	r7,2
    a744:	000750c0 	call	750c <OS_EventTaskRdy>
                 nbr_tasks++;
    a748:	e0bff803 	ldbu	r2,-32(fp)
    a74c:	10800044 	addi	r2,r2,1
    a750:	e0bff805 	stb	r2,-32(fp)
                 break;
    a754:	0001883a 	nop
    a758:	e0bff917 	ldw	r2,-28(fp)
    a75c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a760:	e0bffb17 	ldw	r2,-20(fp)
    a764:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    a768:	0007f240 	call	7f24 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    a76c:	e0bfff17 	ldw	r2,-4(fp)
    a770:	00c00384 	movi	r3,14
    a774:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    a778:	e0bff803 	ldbu	r2,-32(fp)
    a77c:	00000706 	br	a79c <OSMboxPendAbort+0x158>
    a780:	e0bff917 	ldw	r2,-28(fp)
    a784:	e0bffc15 	stw	r2,-16(fp)
    a788:	e0bffc17 	ldw	r2,-16(fp)
    a78c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    a790:	e0bfff17 	ldw	r2,-4(fp)
    a794:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
    a798:	0005883a 	mov	r2,zero
}
    a79c:	e037883a 	mov	sp,fp
    a7a0:	dfc00117 	ldw	ra,4(sp)
    a7a4:	df000017 	ldw	fp,0(sp)
    a7a8:	dec00204 	addi	sp,sp,8
    a7ac:	f800283a 	ret

0000a7b0 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
    a7b0:	defff704 	addi	sp,sp,-36
    a7b4:	dfc00815 	stw	ra,32(sp)
    a7b8:	df000715 	stw	fp,28(sp)
    a7bc:	df000704 	addi	fp,sp,28
    a7c0:	e13ffe15 	stw	r4,-8(fp)
    a7c4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a7c8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    a7cc:	e0bffe17 	ldw	r2,-8(fp)
    a7d0:	1000021e 	bne	r2,zero,a7dc <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    a7d4:	00800104 	movi	r2,4
    a7d8:	00003406 	br	a8ac <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
    a7dc:	e0bfff17 	ldw	r2,-4(fp)
    a7e0:	1000021e 	bne	r2,zero,a7ec <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
    a7e4:	008000c4 	movi	r2,3
    a7e8:	00003006 	br	a8ac <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
    a7ec:	e0bffe17 	ldw	r2,-8(fp)
    a7f0:	10800003 	ldbu	r2,0(r2)
    a7f4:	10803fcc 	andi	r2,r2,255
    a7f8:	10800060 	cmpeqi	r2,r2,1
    a7fc:	1000021e 	bne	r2,zero,a808 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
    a800:	00800044 	movi	r2,1
    a804:	00002906 	br	a8ac <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a808:	0005303a 	rdctl	r2,status
    a80c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a810:	e0fffa17 	ldw	r3,-24(fp)
    a814:	00bfff84 	movi	r2,-2
    a818:	1884703a 	and	r2,r3,r2
    a81c:	1001703a 	wrctl	status,r2
  
  return context;
    a820:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    a824:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
    a828:	e0bffe17 	ldw	r2,-8(fp)
    a82c:	10800283 	ldbu	r2,10(r2)
    a830:	10803fcc 	andi	r2,r2,255
    a834:	10000c26 	beq	r2,zero,a868 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
    a838:	e13ffe17 	ldw	r4,-8(fp)
    a83c:	e17fff17 	ldw	r5,-4(fp)
    a840:	01800084 	movi	r6,2
    a844:	000f883a 	mov	r7,zero
    a848:	000750c0 	call	750c <OS_EventTaskRdy>
    a84c:	e0bff917 	ldw	r2,-28(fp)
    a850:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a854:	e0bffb17 	ldw	r2,-20(fp)
    a858:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    a85c:	0007f240 	call	7f24 <OS_Sched>
        return (OS_ERR_NONE);
    a860:	0005883a 	mov	r2,zero
    a864:	00001106 	br	a8ac <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
    a868:	e0bffe17 	ldw	r2,-8(fp)
    a86c:	10800117 	ldw	r2,4(r2)
    a870:	10000626 	beq	r2,zero,a88c <OSMboxPost+0xdc>
    a874:	e0bff917 	ldw	r2,-28(fp)
    a878:	e0bffc15 	stw	r2,-16(fp)
    a87c:	e0bffc17 	ldw	r2,-16(fp)
    a880:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
    a884:	00800504 	movi	r2,20
    a888:	00000806 	br	a8ac <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
    a88c:	e0bffe17 	ldw	r2,-8(fp)
    a890:	e0ffff17 	ldw	r3,-4(fp)
    a894:	10c00115 	stw	r3,4(r2)
    a898:	e0bff917 	ldw	r2,-28(fp)
    a89c:	e0bffd15 	stw	r2,-12(fp)
    a8a0:	e0bffd17 	ldw	r2,-12(fp)
    a8a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a8a8:	0005883a 	mov	r2,zero
}
    a8ac:	e037883a 	mov	sp,fp
    a8b0:	dfc00117 	ldw	ra,4(sp)
    a8b4:	df000017 	ldw	fp,0(sp)
    a8b8:	dec00204 	addi	sp,sp,8
    a8bc:	f800283a 	ret

0000a8c0 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    a8c0:	defff604 	addi	sp,sp,-40
    a8c4:	dfc00915 	stw	ra,36(sp)
    a8c8:	df000815 	stw	fp,32(sp)
    a8cc:	df000804 	addi	fp,sp,32
    a8d0:	e13ffd15 	stw	r4,-12(fp)
    a8d4:	e17ffe15 	stw	r5,-8(fp)
    a8d8:	3005883a 	mov	r2,r6
    a8dc:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a8e0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    a8e4:	e0bffd17 	ldw	r2,-12(fp)
    a8e8:	1000021e 	bne	r2,zero,a8f4 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    a8ec:	00800104 	movi	r2,4
    a8f0:	00004506 	br	aa08 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
    a8f4:	e0bffe17 	ldw	r2,-8(fp)
    a8f8:	1000021e 	bne	r2,zero,a904 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
    a8fc:	008000c4 	movi	r2,3
    a900:	00004106 	br	aa08 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
    a904:	e0bffd17 	ldw	r2,-12(fp)
    a908:	10800003 	ldbu	r2,0(r2)
    a90c:	10803fcc 	andi	r2,r2,255
    a910:	10800060 	cmpeqi	r2,r2,1
    a914:	1000021e 	bne	r2,zero,a920 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
    a918:	00800044 	movi	r2,1
    a91c:	00003a06 	br	aa08 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a920:	0005303a 	rdctl	r2,status
    a924:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a928:	e0fff917 	ldw	r3,-28(fp)
    a92c:	00bfff84 	movi	r2,-2
    a930:	1884703a 	and	r2,r3,r2
    a934:	1001703a 	wrctl	status,r2
  
  return context;
    a938:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    a93c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
    a940:	e0bffd17 	ldw	r2,-12(fp)
    a944:	10800283 	ldbu	r2,10(r2)
    a948:	10803fcc 	andi	r2,r2,255
    a94c:	10001d26 	beq	r2,zero,a9c4 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    a950:	e0bfff03 	ldbu	r2,-4(fp)
    a954:	1080004c 	andi	r2,r2,1
    a958:	10000b26 	beq	r2,zero,a988 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
    a95c:	00000506 	br	a974 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
    a960:	e13ffd17 	ldw	r4,-12(fp)
    a964:	e17ffe17 	ldw	r5,-8(fp)
    a968:	01800084 	movi	r6,2
    a96c:	000f883a 	mov	r7,zero
    a970:	000750c0 	call	750c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
    a974:	e0bffd17 	ldw	r2,-12(fp)
    a978:	10800283 	ldbu	r2,10(r2)
    a97c:	10803fcc 	andi	r2,r2,255
    a980:	103ff71e 	bne	r2,zero,a960 <__alt_mem_Flash_flash_data+0xf400a960>
    a984:	00000506 	br	a99c <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
    a988:	e13ffd17 	ldw	r4,-12(fp)
    a98c:	e17ffe17 	ldw	r5,-8(fp)
    a990:	01800084 	movi	r6,2
    a994:	000f883a 	mov	r7,zero
    a998:	000750c0 	call	750c <OS_EventTaskRdy>
    a99c:	e0bff817 	ldw	r2,-32(fp)
    a9a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a9a4:	e0bffa17 	ldw	r2,-24(fp)
    a9a8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    a9ac:	e0bfff03 	ldbu	r2,-4(fp)
    a9b0:	1080010c 	andi	r2,r2,4
    a9b4:	1000011e 	bne	r2,zero,a9bc <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
    a9b8:	0007f240 	call	7f24 <OS_Sched>
        }
        return (OS_ERR_NONE);
    a9bc:	0005883a 	mov	r2,zero
    a9c0:	00001106 	br	aa08 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
    a9c4:	e0bffd17 	ldw	r2,-12(fp)
    a9c8:	10800117 	ldw	r2,4(r2)
    a9cc:	10000626 	beq	r2,zero,a9e8 <OSMboxPostOpt+0x128>
    a9d0:	e0bff817 	ldw	r2,-32(fp)
    a9d4:	e0bffb15 	stw	r2,-20(fp)
    a9d8:	e0bffb17 	ldw	r2,-20(fp)
    a9dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
    a9e0:	00800504 	movi	r2,20
    a9e4:	00000806 	br	aa08 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
    a9e8:	e0bffd17 	ldw	r2,-12(fp)
    a9ec:	e0fffe17 	ldw	r3,-8(fp)
    a9f0:	10c00115 	stw	r3,4(r2)
    a9f4:	e0bff817 	ldw	r2,-32(fp)
    a9f8:	e0bffc15 	stw	r2,-16(fp)
    a9fc:	e0bffc17 	ldw	r2,-16(fp)
    aa00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    aa04:	0005883a 	mov	r2,zero
}
    aa08:	e037883a 	mov	sp,fp
    aa0c:	dfc00117 	ldw	ra,4(sp)
    aa10:	df000017 	ldw	fp,0(sp)
    aa14:	dec00204 	addi	sp,sp,8
    aa18:	f800283a 	ret

0000aa1c <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
    aa1c:	defff704 	addi	sp,sp,-36
    aa20:	df000815 	stw	fp,32(sp)
    aa24:	df000804 	addi	fp,sp,32
    aa28:	e13ffe15 	stw	r4,-8(fp)
    aa2c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    aa30:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    aa34:	e0bffe17 	ldw	r2,-8(fp)
    aa38:	1000021e 	bne	r2,zero,aa44 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    aa3c:	00800104 	movi	r2,4
    aa40:	00003606 	br	ab1c <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
    aa44:	e0bfff17 	ldw	r2,-4(fp)
    aa48:	1000021e 	bne	r2,zero,aa54 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    aa4c:	00800244 	movi	r2,9
    aa50:	00003206 	br	ab1c <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
    aa54:	e0bffe17 	ldw	r2,-8(fp)
    aa58:	10800003 	ldbu	r2,0(r2)
    aa5c:	10803fcc 	andi	r2,r2,255
    aa60:	10800060 	cmpeqi	r2,r2,1
    aa64:	1000021e 	bne	r2,zero,aa70 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    aa68:	00800044 	movi	r2,1
    aa6c:	00002b06 	br	ab1c <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    aa70:	0005303a 	rdctl	r2,status
    aa74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    aa78:	e0fffc17 	ldw	r3,-16(fp)
    aa7c:	00bfff84 	movi	r2,-2
    aa80:	1884703a 	and	r2,r3,r2
    aa84:	1001703a 	wrctl	status,r2
  
  return context;
    aa88:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    aa8c:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    aa90:	e0bffe17 	ldw	r2,-8(fp)
    aa94:	10c00283 	ldbu	r3,10(r2)
    aa98:	e0bfff17 	ldw	r2,-4(fp)
    aa9c:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
    aaa0:	e0bffe17 	ldw	r2,-8(fp)
    aaa4:	108002c4 	addi	r2,r2,11
    aaa8:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
    aaac:	e0bfff17 	ldw	r2,-4(fp)
    aab0:	10800104 	addi	r2,r2,4
    aab4:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    aab8:	e03ff805 	stb	zero,-32(fp)
    aabc:	00000b06 	br	aaec <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
    aac0:	e0bffa17 	ldw	r2,-24(fp)
    aac4:	10c00044 	addi	r3,r2,1
    aac8:	e0fffa15 	stw	r3,-24(fp)
    aacc:	e0fff917 	ldw	r3,-28(fp)
    aad0:	19000044 	addi	r4,r3,1
    aad4:	e13ff915 	stw	r4,-28(fp)
    aad8:	18c00003 	ldbu	r3,0(r3)
    aadc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    aae0:	e0bff803 	ldbu	r2,-32(fp)
    aae4:	10800044 	addi	r2,r2,1
    aae8:	e0bff805 	stb	r2,-32(fp)
    aaec:	e0bff803 	ldbu	r2,-32(fp)
    aaf0:	108000f0 	cmpltui	r2,r2,3
    aaf4:	103ff21e 	bne	r2,zero,aac0 <__alt_mem_Flash_flash_data+0xf400aac0>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
    aaf8:	e0bffe17 	ldw	r2,-8(fp)
    aafc:	10c00117 	ldw	r3,4(r2)
    ab00:	e0bfff17 	ldw	r2,-4(fp)
    ab04:	10c00015 	stw	r3,0(r2)
    ab08:	e0bffb17 	ldw	r2,-20(fp)
    ab0c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ab10:	e0bffd17 	ldw	r2,-12(fp)
    ab14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    ab18:	0005883a 	mov	r2,zero
}
    ab1c:	e037883a 	mov	sp,fp
    ab20:	df000017 	ldw	fp,0(sp)
    ab24:	dec00104 	addi	sp,sp,4
    ab28:	f800283a 	ret

0000ab2c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    ab2c:	defff404 	addi	sp,sp,-48
    ab30:	df000b15 	stw	fp,44(sp)
    ab34:	df000b04 	addi	fp,sp,44
    ab38:	e13ffc15 	stw	r4,-16(fp)
    ab3c:	e17ffd15 	stw	r5,-12(fp)
    ab40:	e1bffe15 	stw	r6,-8(fp)
    ab44:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    ab48:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    ab4c:	e0bfff17 	ldw	r2,-4(fp)
    ab50:	1000021e 	bne	r2,zero,ab5c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
    ab54:	0005883a 	mov	r2,zero
    ab58:	00006d06 	br	ad10 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    ab5c:	e0bffc17 	ldw	r2,-16(fp)
    ab60:	1000051e 	bne	r2,zero,ab78 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    ab64:	e0bfff17 	ldw	r2,-4(fp)
    ab68:	00c01884 	movi	r3,98
    ab6c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    ab70:	0005883a 	mov	r2,zero
    ab74:	00006606 	br	ad10 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    ab78:	e0bffc17 	ldw	r2,-16(fp)
    ab7c:	108000cc 	andi	r2,r2,3
    ab80:	10000526 	beq	r2,zero,ab98 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    ab84:	e0bfff17 	ldw	r2,-4(fp)
    ab88:	00c01884 	movi	r3,98
    ab8c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    ab90:	0005883a 	mov	r2,zero
    ab94:	00005e06 	br	ad10 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    ab98:	e0bffd17 	ldw	r2,-12(fp)
    ab9c:	108000a8 	cmpgeui	r2,r2,2
    aba0:	1000051e 	bne	r2,zero,abb8 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    aba4:	e0bfff17 	ldw	r2,-4(fp)
    aba8:	00c016c4 	movi	r3,91
    abac:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    abb0:	0005883a 	mov	r2,zero
    abb4:	00005606 	br	ad10 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    abb8:	e0bffe17 	ldw	r2,-8(fp)
    abbc:	10800128 	cmpgeui	r2,r2,4
    abc0:	1000051e 	bne	r2,zero,abd8 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    abc4:	e0bfff17 	ldw	r2,-4(fp)
    abc8:	00c01704 	movi	r3,92
    abcc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    abd0:	0005883a 	mov	r2,zero
    abd4:	00004e06 	br	ad10 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    abd8:	0005303a 	rdctl	r2,status
    abdc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    abe0:	e0fffa17 	ldw	r3,-24(fp)
    abe4:	00bfff84 	movi	r2,-2
    abe8:	1884703a 	and	r2,r3,r2
    abec:	1001703a 	wrctl	status,r2
  
  return context;
    abf0:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    abf4:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    abf8:	00800074 	movhi	r2,1
    abfc:	109bcf04 	addi	r2,r2,28476
    ac00:	10800017 	ldw	r2,0(r2)
    ac04:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    ac08:	00800074 	movhi	r2,1
    ac0c:	109bcf04 	addi	r2,r2,28476
    ac10:	10800017 	ldw	r2,0(r2)
    ac14:	10000726 	beq	r2,zero,ac34 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    ac18:	00800074 	movhi	r2,1
    ac1c:	109bcf04 	addi	r2,r2,28476
    ac20:	10800017 	ldw	r2,0(r2)
    ac24:	10c00117 	ldw	r3,4(r2)
    ac28:	00800074 	movhi	r2,1
    ac2c:	109bcf04 	addi	r2,r2,28476
    ac30:	10c00015 	stw	r3,0(r2)
    ac34:	e0bff817 	ldw	r2,-32(fp)
    ac38:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ac3c:	e0bffb17 	ldw	r2,-20(fp)
    ac40:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    ac44:	e0bff917 	ldw	r2,-28(fp)
    ac48:	1000051e 	bne	r2,zero,ac60 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
    ac4c:	e0bfff17 	ldw	r2,-4(fp)
    ac50:	00c01684 	movi	r3,90
    ac54:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    ac58:	0005883a 	mov	r2,zero
    ac5c:	00002c06 	br	ad10 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    ac60:	e0bffc17 	ldw	r2,-16(fp)
    ac64:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    ac68:	e0fffc17 	ldw	r3,-16(fp)
    ac6c:	e0bffe17 	ldw	r2,-8(fp)
    ac70:	1885883a 	add	r2,r3,r2
    ac74:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
    ac78:	e03ff715 	stw	zero,-36(fp)
    ac7c:	00000c06 	br	acb0 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    ac80:	e0bff617 	ldw	r2,-40(fp)
    ac84:	e0fff517 	ldw	r3,-44(fp)
    ac88:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    ac8c:	e0bff517 	ldw	r2,-44(fp)
    ac90:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    ac94:	e0fff517 	ldw	r3,-44(fp)
    ac98:	e0bffe17 	ldw	r2,-8(fp)
    ac9c:	1885883a 	add	r2,r3,r2
    aca0:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
    aca4:	e0bff717 	ldw	r2,-36(fp)
    aca8:	10800044 	addi	r2,r2,1
    acac:	e0bff715 	stw	r2,-36(fp)
    acb0:	e0bffd17 	ldw	r2,-12(fp)
    acb4:	10bfffc4 	addi	r2,r2,-1
    acb8:	e0fff717 	ldw	r3,-36(fp)
    acbc:	18bff036 	bltu	r3,r2,ac80 <__alt_mem_Flash_flash_data+0xf400ac80>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    acc0:	e0bff617 	ldw	r2,-40(fp)
    acc4:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    acc8:	e0bff917 	ldw	r2,-28(fp)
    accc:	e0fffc17 	ldw	r3,-16(fp)
    acd0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    acd4:	e0bff917 	ldw	r2,-28(fp)
    acd8:	e0fffc17 	ldw	r3,-16(fp)
    acdc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    ace0:	e0bff917 	ldw	r2,-28(fp)
    ace4:	e0fffd17 	ldw	r3,-12(fp)
    ace8:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
    acec:	e0bff917 	ldw	r2,-28(fp)
    acf0:	e0fffd17 	ldw	r3,-12(fp)
    acf4:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    acf8:	e0bff917 	ldw	r2,-28(fp)
    acfc:	e0fffe17 	ldw	r3,-8(fp)
    ad00:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
    ad04:	e0bfff17 	ldw	r2,-4(fp)
    ad08:	10000005 	stb	zero,0(r2)
    return (pmem);
    ad0c:	e0bff917 	ldw	r2,-28(fp)
}
    ad10:	e037883a 	mov	sp,fp
    ad14:	df000017 	ldw	fp,0(sp)
    ad18:	dec00104 	addi	sp,sp,4
    ad1c:	f800283a 	ret

0000ad20 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    ad20:	defff804 	addi	sp,sp,-32
    ad24:	df000715 	stw	fp,28(sp)
    ad28:	df000704 	addi	fp,sp,28
    ad2c:	e13ffe15 	stw	r4,-8(fp)
    ad30:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    ad34:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    ad38:	e0bfff17 	ldw	r2,-4(fp)
    ad3c:	1000021e 	bne	r2,zero,ad48 <OSMemGet+0x28>
        return ((void *)0);
    ad40:	0005883a 	mov	r2,zero
    ad44:	00002e06 	br	ae00 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    ad48:	e0bffe17 	ldw	r2,-8(fp)
    ad4c:	1000051e 	bne	r2,zero,ad64 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    ad50:	e0bfff17 	ldw	r2,-4(fp)
    ad54:	00c01804 	movi	r3,96
    ad58:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    ad5c:	0005883a 	mov	r2,zero
    ad60:	00002706 	br	ae00 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ad64:	0005303a 	rdctl	r2,status
    ad68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ad6c:	e0fffb17 	ldw	r3,-20(fp)
    ad70:	00bfff84 	movi	r2,-2
    ad74:	1884703a 	and	r2,r3,r2
    ad78:	1001703a 	wrctl	status,r2
  
  return context;
    ad7c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    ad80:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    ad84:	e0bffe17 	ldw	r2,-8(fp)
    ad88:	10800417 	ldw	r2,16(r2)
    ad8c:	10001426 	beq	r2,zero,ade0 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    ad90:	e0bffe17 	ldw	r2,-8(fp)
    ad94:	10800117 	ldw	r2,4(r2)
    ad98:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    ad9c:	e0bffa17 	ldw	r2,-24(fp)
    ada0:	10c00017 	ldw	r3,0(r2)
    ada4:	e0bffe17 	ldw	r2,-8(fp)
    ada8:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    adac:	e0bffe17 	ldw	r2,-8(fp)
    adb0:	10800417 	ldw	r2,16(r2)
    adb4:	10ffffc4 	addi	r3,r2,-1
    adb8:	e0bffe17 	ldw	r2,-8(fp)
    adbc:	10c00415 	stw	r3,16(r2)
    adc0:	e0bff917 	ldw	r2,-28(fp)
    adc4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    adc8:	e0bffc17 	ldw	r2,-16(fp)
    adcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    add0:	e0bfff17 	ldw	r2,-4(fp)
    add4:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    add8:	e0bffa17 	ldw	r2,-24(fp)
    addc:	00000806 	br	ae00 <OSMemGet+0xe0>
    ade0:	e0bff917 	ldw	r2,-28(fp)
    ade4:	e0bffd15 	stw	r2,-12(fp)
    ade8:	e0bffd17 	ldw	r2,-12(fp)
    adec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    adf0:	e0bfff17 	ldw	r2,-4(fp)
    adf4:	00c01744 	movi	r3,93
    adf8:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    adfc:	0005883a 	mov	r2,zero
}
    ae00:	e037883a 	mov	sp,fp
    ae04:	df000017 	ldw	fp,0(sp)
    ae08:	dec00104 	addi	sp,sp,4
    ae0c:	f800283a 	ret

0000ae10 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    ae10:	defff704 	addi	sp,sp,-36
    ae14:	dfc00815 	stw	ra,32(sp)
    ae18:	df000715 	stw	fp,28(sp)
    ae1c:	df000704 	addi	fp,sp,28
    ae20:	e13ffd15 	stw	r4,-12(fp)
    ae24:	e17ffe15 	stw	r5,-8(fp)
    ae28:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ae2c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    ae30:	e0bfff17 	ldw	r2,-4(fp)
    ae34:	1000021e 	bne	r2,zero,ae40 <OSMemNameGet+0x30>
        return (0);
    ae38:	0005883a 	mov	r2,zero
    ae3c:	00002d06 	br	aef4 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    ae40:	e0bffd17 	ldw	r2,-12(fp)
    ae44:	1000051e 	bne	r2,zero,ae5c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    ae48:	e0bfff17 	ldw	r2,-4(fp)
    ae4c:	00c01804 	movi	r3,96
    ae50:	10c00005 	stb	r3,0(r2)
        return (0);
    ae54:	0005883a 	mov	r2,zero
    ae58:	00002606 	br	aef4 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    ae5c:	e0bffe17 	ldw	r2,-8(fp)
    ae60:	1000051e 	bne	r2,zero,ae78 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    ae64:	e0bfff17 	ldw	r2,-4(fp)
    ae68:	00c00304 	movi	r3,12
    ae6c:	10c00005 	stb	r3,0(r2)
        return (0);
    ae70:	0005883a 	mov	r2,zero
    ae74:	00001f06 	br	aef4 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    ae78:	00800074 	movhi	r2,1
    ae7c:	109bd404 	addi	r2,r2,28496
    ae80:	10800003 	ldbu	r2,0(r2)
    ae84:	10803fcc 	andi	r2,r2,255
    ae88:	10000526 	beq	r2,zero,aea0 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    ae8c:	e0bfff17 	ldw	r2,-4(fp)
    ae90:	00c00444 	movi	r3,17
    ae94:	10c00005 	stb	r3,0(r2)
        return (0);
    ae98:	0005883a 	mov	r2,zero
    ae9c:	00001506 	br	aef4 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    aea0:	0005303a 	rdctl	r2,status
    aea4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    aea8:	e0fffb17 	ldw	r3,-20(fp)
    aeac:	00bfff84 	movi	r2,-2
    aeb0:	1884703a 	and	r2,r3,r2
    aeb4:	1001703a 	wrctl	status,r2
  
  return context;
    aeb8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    aebc:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    aec0:	e0bffd17 	ldw	r2,-12(fp)
    aec4:	10800504 	addi	r2,r2,20
    aec8:	e13ffe17 	ldw	r4,-8(fp)
    aecc:	100b883a 	mov	r5,r2
    aed0:	00080600 	call	8060 <OS_StrCopy>
    aed4:	e0bffa05 	stb	r2,-24(fp)
    aed8:	e0bff917 	ldw	r2,-28(fp)
    aedc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    aee0:	e0bffc17 	ldw	r2,-16(fp)
    aee4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    aee8:	e0bfff17 	ldw	r2,-4(fp)
    aeec:	10000005 	stb	zero,0(r2)
    return (len);
    aef0:	e0bffa03 	ldbu	r2,-24(fp)
}
    aef4:	e037883a 	mov	sp,fp
    aef8:	dfc00117 	ldw	ra,4(sp)
    aefc:	df000017 	ldw	fp,0(sp)
    af00:	dec00204 	addi	sp,sp,8
    af04:	f800283a 	ret

0000af08 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    af08:	defff604 	addi	sp,sp,-40
    af0c:	dfc00915 	stw	ra,36(sp)
    af10:	df000815 	stw	fp,32(sp)
    af14:	df000804 	addi	fp,sp,32
    af18:	e13ffd15 	stw	r4,-12(fp)
    af1c:	e17ffe15 	stw	r5,-8(fp)
    af20:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    af24:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    af28:	e0bfff17 	ldw	r2,-4(fp)
    af2c:	1000011e 	bne	r2,zero,af34 <OSMemNameSet+0x2c>
        return;
    af30:	00003606 	br	b00c <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    af34:	e0bffd17 	ldw	r2,-12(fp)
    af38:	1000041e 	bne	r2,zero,af4c <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    af3c:	e0bfff17 	ldw	r2,-4(fp)
    af40:	00c01804 	movi	r3,96
    af44:	10c00005 	stb	r3,0(r2)
        return;
    af48:	00003006 	br	b00c <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    af4c:	e0bffe17 	ldw	r2,-8(fp)
    af50:	1000041e 	bne	r2,zero,af64 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    af54:	e0bfff17 	ldw	r2,-4(fp)
    af58:	00c00304 	movi	r3,12
    af5c:	10c00005 	stb	r3,0(r2)
        return;
    af60:	00002a06 	br	b00c <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    af64:	00800074 	movhi	r2,1
    af68:	109bd404 	addi	r2,r2,28496
    af6c:	10800003 	ldbu	r2,0(r2)
    af70:	10803fcc 	andi	r2,r2,255
    af74:	10000426 	beq	r2,zero,af88 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
    af78:	e0bfff17 	ldw	r2,-4(fp)
    af7c:	00c00484 	movi	r3,18
    af80:	10c00005 	stb	r3,0(r2)
        return;
    af84:	00002106 	br	b00c <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    af88:	0005303a 	rdctl	r2,status
    af8c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    af90:	e0fffa17 	ldw	r3,-24(fp)
    af94:	00bfff84 	movi	r2,-2
    af98:	1884703a 	and	r2,r3,r2
    af9c:	1001703a 	wrctl	status,r2
  
  return context;
    afa0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    afa4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    afa8:	e13ffe17 	ldw	r4,-8(fp)
    afac:	00080d40 	call	80d4 <OS_StrLen>
    afb0:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    afb4:	e0bff903 	ldbu	r2,-28(fp)
    afb8:	10800830 	cmpltui	r2,r2,32
    afbc:	1000081e 	bne	r2,zero,afe0 <OSMemNameSet+0xd8>
    afc0:	e0bff817 	ldw	r2,-32(fp)
    afc4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    afc8:	e0bffb17 	ldw	r2,-20(fp)
    afcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    afd0:	e0bfff17 	ldw	r2,-4(fp)
    afd4:	00c018c4 	movi	r3,99
    afd8:	10c00005 	stb	r3,0(r2)
        return;
    afdc:	00000b06 	br	b00c <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    afe0:	e0bffd17 	ldw	r2,-12(fp)
    afe4:	10800504 	addi	r2,r2,20
    afe8:	1009883a 	mov	r4,r2
    afec:	e17ffe17 	ldw	r5,-8(fp)
    aff0:	00080600 	call	8060 <OS_StrCopy>
    aff4:	e0bff817 	ldw	r2,-32(fp)
    aff8:	e0bffc15 	stw	r2,-16(fp)
    affc:	e0bffc17 	ldw	r2,-16(fp)
    b000:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    b004:	e0bfff17 	ldw	r2,-4(fp)
    b008:	10000005 	stb	zero,0(r2)
}
    b00c:	e037883a 	mov	sp,fp
    b010:	dfc00117 	ldw	ra,4(sp)
    b014:	df000017 	ldw	fp,0(sp)
    b018:	dec00204 	addi	sp,sp,8
    b01c:	f800283a 	ret

0000b020 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    b020:	defff904 	addi	sp,sp,-28
    b024:	df000615 	stw	fp,24(sp)
    b028:	df000604 	addi	fp,sp,24
    b02c:	e13ffe15 	stw	r4,-8(fp)
    b030:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b034:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    b038:	e0bffe17 	ldw	r2,-8(fp)
    b03c:	1000021e 	bne	r2,zero,b048 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    b040:	00801804 	movi	r2,96
    b044:	00002806 	br	b0e8 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    b048:	e0bfff17 	ldw	r2,-4(fp)
    b04c:	1000021e 	bne	r2,zero,b058 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    b050:	008017c4 	movi	r2,95
    b054:	00002406 	br	b0e8 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b058:	0005303a 	rdctl	r2,status
    b05c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b060:	e0fffb17 	ldw	r3,-20(fp)
    b064:	00bfff84 	movi	r2,-2
    b068:	1884703a 	and	r2,r3,r2
    b06c:	1001703a 	wrctl	status,r2
  
  return context;
    b070:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    b074:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    b078:	e0bffe17 	ldw	r2,-8(fp)
    b07c:	10c00417 	ldw	r3,16(r2)
    b080:	e0bffe17 	ldw	r2,-8(fp)
    b084:	10800317 	ldw	r2,12(r2)
    b088:	18800636 	bltu	r3,r2,b0a4 <OSMemPut+0x84>
    b08c:	e0bffa17 	ldw	r2,-24(fp)
    b090:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b094:	e0bffc17 	ldw	r2,-16(fp)
    b098:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    b09c:	00801784 	movi	r2,94
    b0a0:	00001106 	br	b0e8 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    b0a4:	e0bffe17 	ldw	r2,-8(fp)
    b0a8:	10c00117 	ldw	r3,4(r2)
    b0ac:	e0bfff17 	ldw	r2,-4(fp)
    b0b0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
    b0b4:	e0bffe17 	ldw	r2,-8(fp)
    b0b8:	e0ffff17 	ldw	r3,-4(fp)
    b0bc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    b0c0:	e0bffe17 	ldw	r2,-8(fp)
    b0c4:	10800417 	ldw	r2,16(r2)
    b0c8:	10c00044 	addi	r3,r2,1
    b0cc:	e0bffe17 	ldw	r2,-8(fp)
    b0d0:	10c00415 	stw	r3,16(r2)
    b0d4:	e0bffa17 	ldw	r2,-24(fp)
    b0d8:	e0bffd15 	stw	r2,-12(fp)
    b0dc:	e0bffd17 	ldw	r2,-12(fp)
    b0e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    b0e4:	0005883a 	mov	r2,zero
}
    b0e8:	e037883a 	mov	sp,fp
    b0ec:	df000017 	ldw	fp,0(sp)
    b0f0:	dec00104 	addi	sp,sp,4
    b0f4:	f800283a 	ret

0000b0f8 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    b0f8:	defffa04 	addi	sp,sp,-24
    b0fc:	df000515 	stw	fp,20(sp)
    b100:	df000504 	addi	fp,sp,20
    b104:	e13ffe15 	stw	r4,-8(fp)
    b108:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b10c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    b110:	e0bffe17 	ldw	r2,-8(fp)
    b114:	1000021e 	bne	r2,zero,b120 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    b118:	00801804 	movi	r2,96
    b11c:	00002c06 	br	b1d0 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    b120:	e0bfff17 	ldw	r2,-4(fp)
    b124:	1000021e 	bne	r2,zero,b130 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    b128:	00801844 	movi	r2,97
    b12c:	00002806 	br	b1d0 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b130:	0005303a 	rdctl	r2,status
    b134:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b138:	e0fffc17 	ldw	r3,-16(fp)
    b13c:	00bfff84 	movi	r2,-2
    b140:	1884703a 	and	r2,r3,r2
    b144:	1001703a 	wrctl	status,r2
  
  return context;
    b148:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    b14c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    b150:	e0bffe17 	ldw	r2,-8(fp)
    b154:	10c00017 	ldw	r3,0(r2)
    b158:	e0bfff17 	ldw	r2,-4(fp)
    b15c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    b160:	e0bffe17 	ldw	r2,-8(fp)
    b164:	10c00117 	ldw	r3,4(r2)
    b168:	e0bfff17 	ldw	r2,-4(fp)
    b16c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    b170:	e0bffe17 	ldw	r2,-8(fp)
    b174:	10c00217 	ldw	r3,8(r2)
    b178:	e0bfff17 	ldw	r2,-4(fp)
    b17c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    b180:	e0bffe17 	ldw	r2,-8(fp)
    b184:	10c00317 	ldw	r3,12(r2)
    b188:	e0bfff17 	ldw	r2,-4(fp)
    b18c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    b190:	e0bffe17 	ldw	r2,-8(fp)
    b194:	10c00417 	ldw	r3,16(r2)
    b198:	e0bfff17 	ldw	r2,-4(fp)
    b19c:	10c00415 	stw	r3,16(r2)
    b1a0:	e0bffb17 	ldw	r2,-20(fp)
    b1a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b1a8:	e0bffd17 	ldw	r2,-12(fp)
    b1ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    b1b0:	e0bfff17 	ldw	r2,-4(fp)
    b1b4:	10c00317 	ldw	r3,12(r2)
    b1b8:	e0bfff17 	ldw	r2,-4(fp)
    b1bc:	10800417 	ldw	r2,16(r2)
    b1c0:	1887c83a 	sub	r3,r3,r2
    b1c4:	e0bfff17 	ldw	r2,-4(fp)
    b1c8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    b1cc:	0005883a 	mov	r2,zero
}
    b1d0:	e037883a 	mov	sp,fp
    b1d4:	df000017 	ldw	fp,0(sp)
    b1d8:	dec00104 	addi	sp,sp,4
    b1dc:	f800283a 	ret

0000b1e0 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    b1e0:	defffc04 	addi	sp,sp,-16
    b1e4:	dfc00315 	stw	ra,12(sp)
    b1e8:	df000215 	stw	fp,8(sp)
    b1ec:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    b1f0:	010000b4 	movhi	r4,2
    b1f4:	210eb804 	addi	r4,r4,15072
    b1f8:	01430c04 	movi	r5,3120
    b1fc:	0007e700 	call	7e70 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    b200:	008000b4 	movhi	r2,2
    b204:	108eb804 	addi	r2,r2,15072
    b208:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    b20c:	e03fff0d 	sth	zero,-4(fp)
    b210:	00001306 	br	b260 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    b214:	e0bfff0b 	ldhu	r2,-4(fp)
    b218:	10800044 	addi	r2,r2,1
    b21c:	10c00d24 	muli	r3,r2,52
    b220:	008000b4 	movhi	r2,2
    b224:	108eb804 	addi	r2,r2,15072
    b228:	1887883a 	add	r3,r3,r2
    b22c:	e0bffe17 	ldw	r2,-8(fp)
    b230:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    b234:	e0bffe17 	ldw	r2,-8(fp)
    b238:	00c00fc4 	movi	r3,63
    b23c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    b240:	e0bffe17 	ldw	r2,-8(fp)
    b244:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    b248:	e0bffe17 	ldw	r2,-8(fp)
    b24c:	10800d04 	addi	r2,r2,52
    b250:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    b254:	e0bfff0b 	ldhu	r2,-4(fp)
    b258:	10800044 	addi	r2,r2,1
    b25c:	e0bfff0d 	sth	r2,-4(fp)
    b260:	e0bfff0b 	ldhu	r2,-4(fp)
    b264:	10800ef0 	cmpltui	r2,r2,59
    b268:	103fea1e 	bne	r2,zero,b214 <__alt_mem_Flash_flash_data+0xf400b214>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    b26c:	e0bffe17 	ldw	r2,-8(fp)
    b270:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    b274:	e0bffe17 	ldw	r2,-8(fp)
    b278:	00c00fc4 	movi	r3,63
    b27c:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    b280:	e0bffe17 	ldw	r2,-8(fp)
    b284:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    b288:	00800074 	movhi	r2,1
    b28c:	109bcf04 	addi	r2,r2,28476
    b290:	00c000b4 	movhi	r3,2
    b294:	18ceb804 	addi	r3,r3,15072
    b298:	10c00015 	stw	r3,0(r2)
#endif
}
    b29c:	e037883a 	mov	sp,fp
    b2a0:	dfc00117 	ldw	ra,4(sp)
    b2a4:	df000017 	ldw	fp,0(sp)
    b2a8:	dec00204 	addi	sp,sp,8
    b2ac:	f800283a 	ret

0000b2b0 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    b2b0:	defff804 	addi	sp,sp,-32
    b2b4:	df000715 	stw	fp,28(sp)
    b2b8:	df000704 	addi	fp,sp,28
    b2bc:	e13ffe15 	stw	r4,-8(fp)
    b2c0:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b2c4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    b2c8:	e0bfff17 	ldw	r2,-4(fp)
    b2cc:	1000021e 	bne	r2,zero,b2d8 <OSQAccept+0x28>
        return ((void *)0);
    b2d0:	0005883a 	mov	r2,zero
    b2d4:	00004206 	br	b3e0 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    b2d8:	e0bffe17 	ldw	r2,-8(fp)
    b2dc:	1000051e 	bne	r2,zero,b2f4 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    b2e0:	e0bfff17 	ldw	r2,-4(fp)
    b2e4:	00c00104 	movi	r3,4
    b2e8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    b2ec:	0005883a 	mov	r2,zero
    b2f0:	00003b06 	br	b3e0 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    b2f4:	e0bffe17 	ldw	r2,-8(fp)
    b2f8:	10800003 	ldbu	r2,0(r2)
    b2fc:	10803fcc 	andi	r2,r2,255
    b300:	108000a0 	cmpeqi	r2,r2,2
    b304:	1000051e 	bne	r2,zero,b31c <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    b308:	e0bfff17 	ldw	r2,-4(fp)
    b30c:	00c00044 	movi	r3,1
    b310:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    b314:	0005883a 	mov	r2,zero
    b318:	00003106 	br	b3e0 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b31c:	0005303a 	rdctl	r2,status
    b320:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b324:	e0fffc17 	ldw	r3,-16(fp)
    b328:	00bfff84 	movi	r2,-2
    b32c:	1884703a 	and	r2,r3,r2
    b330:	1001703a 	wrctl	status,r2
  
  return context;
    b334:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    b338:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    b33c:	e0bffe17 	ldw	r2,-8(fp)
    b340:	10800117 	ldw	r2,4(r2)
    b344:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    b348:	e0bffb17 	ldw	r2,-20(fp)
    b34c:	1080058b 	ldhu	r2,22(r2)
    b350:	10bfffcc 	andi	r2,r2,65535
    b354:	10001926 	beq	r2,zero,b3bc <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    b358:	e0bffb17 	ldw	r2,-20(fp)
    b35c:	10800417 	ldw	r2,16(r2)
    b360:	11000104 	addi	r4,r2,4
    b364:	e0fffb17 	ldw	r3,-20(fp)
    b368:	19000415 	stw	r4,16(r3)
    b36c:	10800017 	ldw	r2,0(r2)
    b370:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    b374:	e0bffb17 	ldw	r2,-20(fp)
    b378:	1080058b 	ldhu	r2,22(r2)
    b37c:	10bfffc4 	addi	r2,r2,-1
    b380:	1007883a 	mov	r3,r2
    b384:	e0bffb17 	ldw	r2,-20(fp)
    b388:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    b38c:	e0bffb17 	ldw	r2,-20(fp)
    b390:	10c00417 	ldw	r3,16(r2)
    b394:	e0bffb17 	ldw	r2,-20(fp)
    b398:	10800217 	ldw	r2,8(r2)
    b39c:	1880041e 	bne	r3,r2,b3b0 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
    b3a0:	e0bffb17 	ldw	r2,-20(fp)
    b3a4:	10c00117 	ldw	r3,4(r2)
    b3a8:	e0bffb17 	ldw	r2,-20(fp)
    b3ac:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    b3b0:	e0bfff17 	ldw	r2,-4(fp)
    b3b4:	10000005 	stb	zero,0(r2)
    b3b8:	00000406 	br	b3cc <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    b3bc:	e0bfff17 	ldw	r2,-4(fp)
    b3c0:	00c007c4 	movi	r3,31
    b3c4:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    b3c8:	e03ff915 	stw	zero,-28(fp)
    b3cc:	e0bffa17 	ldw	r2,-24(fp)
    b3d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b3d4:	e0bffd17 	ldw	r2,-12(fp)
    b3d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    b3dc:	e0bff917 	ldw	r2,-28(fp)
}
    b3e0:	e037883a 	mov	sp,fp
    b3e4:	df000017 	ldw	fp,0(sp)
    b3e8:	dec00104 	addi	sp,sp,4
    b3ec:	f800283a 	ret

0000b3f0 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    b3f0:	defff404 	addi	sp,sp,-48
    b3f4:	dfc00b15 	stw	ra,44(sp)
    b3f8:	df000a15 	stw	fp,40(sp)
    b3fc:	df000a04 	addi	fp,sp,40
    b400:	e13ffe15 	stw	r4,-8(fp)
    b404:	2805883a 	mov	r2,r5
    b408:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b40c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    b410:	00800074 	movhi	r2,1
    b414:	109bd404 	addi	r2,r2,28496
    b418:	10800003 	ldbu	r2,0(r2)
    b41c:	10803fcc 	andi	r2,r2,255
    b420:	10000226 	beq	r2,zero,b42c <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    b424:	0005883a 	mov	r2,zero
    b428:	00006b06 	br	b5d8 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b42c:	0005303a 	rdctl	r2,status
    b430:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b434:	e0fff917 	ldw	r3,-28(fp)
    b438:	00bfff84 	movi	r2,-2
    b43c:	1884703a 	and	r2,r3,r2
    b440:	1001703a 	wrctl	status,r2
  
  return context;
    b444:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    b448:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    b44c:	00800074 	movhi	r2,1
    b450:	109bd304 	addi	r2,r2,28492
    b454:	10800017 	ldw	r2,0(r2)
    b458:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    b45c:	00800074 	movhi	r2,1
    b460:	109bd304 	addi	r2,r2,28492
    b464:	10800017 	ldw	r2,0(r2)
    b468:	10000726 	beq	r2,zero,b488 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    b46c:	00800074 	movhi	r2,1
    b470:	109bd304 	addi	r2,r2,28492
    b474:	10800017 	ldw	r2,0(r2)
    b478:	10c00117 	ldw	r3,4(r2)
    b47c:	00800074 	movhi	r2,1
    b480:	109bd304 	addi	r2,r2,28492
    b484:	10c00015 	stw	r3,0(r2)
    b488:	e0bff717 	ldw	r2,-36(fp)
    b48c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b490:	e0bffa17 	ldw	r2,-24(fp)
    b494:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    b498:	e0bff617 	ldw	r2,-40(fp)
    b49c:	10004d26 	beq	r2,zero,b5d4 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b4a0:	0005303a 	rdctl	r2,status
    b4a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b4a8:	e0fffb17 	ldw	r3,-20(fp)
    b4ac:	00bfff84 	movi	r2,-2
    b4b0:	1884703a 	and	r2,r3,r2
    b4b4:	1001703a 	wrctl	status,r2
  
  return context;
    b4b8:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    b4bc:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    b4c0:	00800074 	movhi	r2,1
    b4c4:	109bd104 	addi	r2,r2,28484
    b4c8:	10800017 	ldw	r2,0(r2)
    b4cc:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    b4d0:	e0bff817 	ldw	r2,-32(fp)
    b4d4:	10003126 	beq	r2,zero,b59c <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    b4d8:	00800074 	movhi	r2,1
    b4dc:	109bd104 	addi	r2,r2,28484
    b4e0:	10800017 	ldw	r2,0(r2)
    b4e4:	10c00017 	ldw	r3,0(r2)
    b4e8:	00800074 	movhi	r2,1
    b4ec:	109bd104 	addi	r2,r2,28484
    b4f0:	10c00015 	stw	r3,0(r2)
    b4f4:	e0bff717 	ldw	r2,-36(fp)
    b4f8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b4fc:	e0bffc17 	ldw	r2,-16(fp)
    b500:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    b504:	e0bff817 	ldw	r2,-32(fp)
    b508:	e0fffe17 	ldw	r3,-8(fp)
    b50c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
    b510:	e0bfff0b 	ldhu	r2,-4(fp)
    b514:	1085883a 	add	r2,r2,r2
    b518:	1085883a 	add	r2,r2,r2
    b51c:	1007883a 	mov	r3,r2
    b520:	e0bffe17 	ldw	r2,-8(fp)
    b524:	10c7883a 	add	r3,r2,r3
    b528:	e0bff817 	ldw	r2,-32(fp)
    b52c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    b530:	e0bff817 	ldw	r2,-32(fp)
    b534:	e0fffe17 	ldw	r3,-8(fp)
    b538:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
    b53c:	e0bff817 	ldw	r2,-32(fp)
    b540:	e0fffe17 	ldw	r3,-8(fp)
    b544:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
    b548:	e0bff817 	ldw	r2,-32(fp)
    b54c:	e0ffff0b 	ldhu	r3,-4(fp)
    b550:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
    b554:	e0bff817 	ldw	r2,-32(fp)
    b558:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    b55c:	e0bff617 	ldw	r2,-40(fp)
    b560:	00c00084 	movi	r3,2
    b564:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
    b568:	e0bff617 	ldw	r2,-40(fp)
    b56c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    b570:	e0bff617 	ldw	r2,-40(fp)
    b574:	e0fff817 	ldw	r3,-32(fp)
    b578:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    b57c:	e0bff617 	ldw	r2,-40(fp)
    b580:	00c00fc4 	movi	r3,63
    b584:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    b588:	e0bff617 	ldw	r2,-40(fp)
    b58c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    b590:	e13ff617 	ldw	r4,-40(fp)
    b594:	0007aac0 	call	7aac <OS_EventWaitListInit>
    b598:	00000e06 	br	b5d4 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    b59c:	00800074 	movhi	r2,1
    b5a0:	109bd304 	addi	r2,r2,28492
    b5a4:	10c00017 	ldw	r3,0(r2)
    b5a8:	e0bff617 	ldw	r2,-40(fp)
    b5ac:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    b5b0:	00800074 	movhi	r2,1
    b5b4:	109bd304 	addi	r2,r2,28492
    b5b8:	e0fff617 	ldw	r3,-40(fp)
    b5bc:	10c00015 	stw	r3,0(r2)
    b5c0:	e0bff717 	ldw	r2,-36(fp)
    b5c4:	e0bffd15 	stw	r2,-12(fp)
    b5c8:	e0bffd17 	ldw	r2,-12(fp)
    b5cc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    b5d0:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
    b5d4:	e0bff617 	ldw	r2,-40(fp)
}
    b5d8:	e037883a 	mov	sp,fp
    b5dc:	dfc00117 	ldw	ra,4(sp)
    b5e0:	df000017 	ldw	fp,0(sp)
    b5e4:	dec00204 	addi	sp,sp,8
    b5e8:	f800283a 	ret

0000b5ec <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    b5ec:	defff204 	addi	sp,sp,-56
    b5f0:	dfc00d15 	stw	ra,52(sp)
    b5f4:	df000c15 	stw	fp,48(sp)
    b5f8:	df000c04 	addi	fp,sp,48
    b5fc:	e13ffd15 	stw	r4,-12(fp)
    b600:	2805883a 	mov	r2,r5
    b604:	e1bfff15 	stw	r6,-4(fp)
    b608:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    b60c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    b610:	e0bfff17 	ldw	r2,-4(fp)
    b614:	1000021e 	bne	r2,zero,b620 <OSQDel+0x34>
        return (pevent);
    b618:	e0bffd17 	ldw	r2,-12(fp)
    b61c:	0000a006 	br	b8a0 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    b620:	e0bffd17 	ldw	r2,-12(fp)
    b624:	1000051e 	bne	r2,zero,b63c <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    b628:	e0bfff17 	ldw	r2,-4(fp)
    b62c:	00c00104 	movi	r3,4
    b630:	10c00005 	stb	r3,0(r2)
        return (pevent);
    b634:	e0bffd17 	ldw	r2,-12(fp)
    b638:	00009906 	br	b8a0 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    b63c:	e0bffd17 	ldw	r2,-12(fp)
    b640:	10800003 	ldbu	r2,0(r2)
    b644:	10803fcc 	andi	r2,r2,255
    b648:	108000a0 	cmpeqi	r2,r2,2
    b64c:	1000051e 	bne	r2,zero,b664 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    b650:	e0bfff17 	ldw	r2,-4(fp)
    b654:	00c00044 	movi	r3,1
    b658:	10c00005 	stb	r3,0(r2)
        return (pevent);
    b65c:	e0bffd17 	ldw	r2,-12(fp)
    b660:	00008f06 	br	b8a0 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    b664:	00800074 	movhi	r2,1
    b668:	109bd404 	addi	r2,r2,28496
    b66c:	10800003 	ldbu	r2,0(r2)
    b670:	10803fcc 	andi	r2,r2,255
    b674:	10000526 	beq	r2,zero,b68c <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    b678:	e0bfff17 	ldw	r2,-4(fp)
    b67c:	00c003c4 	movi	r3,15
    b680:	10c00005 	stb	r3,0(r2)
        return (pevent);
    b684:	e0bffd17 	ldw	r2,-12(fp)
    b688:	00008506 	br	b8a0 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b68c:	0005303a 	rdctl	r2,status
    b690:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b694:	e0fff817 	ldw	r3,-32(fp)
    b698:	00bfff84 	movi	r2,-2
    b69c:	1884703a 	and	r2,r3,r2
    b6a0:	1001703a 	wrctl	status,r2
  
  return context;
    b6a4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    b6a8:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    b6ac:	e0bffd17 	ldw	r2,-12(fp)
    b6b0:	10800283 	ldbu	r2,10(r2)
    b6b4:	10803fcc 	andi	r2,r2,255
    b6b8:	10000326 	beq	r2,zero,b6c8 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    b6bc:	00800044 	movi	r2,1
    b6c0:	e0bff405 	stb	r2,-48(fp)
    b6c4:	00000106 	br	b6cc <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    b6c8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    b6cc:	e0bffe03 	ldbu	r2,-8(fp)
    b6d0:	10000326 	beq	r2,zero,b6e0 <OSQDel+0xf4>
    b6d4:	10800060 	cmpeqi	r2,r2,1
    b6d8:	1000381e 	bne	r2,zero,b7bc <OSQDel+0x1d0>
    b6dc:	00006506 	br	b874 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    b6e0:	e0bff403 	ldbu	r2,-48(fp)
    b6e4:	1000261e 	bne	r2,zero,b780 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    b6e8:	e0bffd17 	ldw	r2,-12(fp)
    b6ec:	00c00fc4 	movi	r3,63
    b6f0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    b6f4:	e0bffd17 	ldw	r2,-12(fp)
    b6f8:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    b6fc:	e0bffd17 	ldw	r2,-12(fp)
    b700:	10800117 	ldw	r2,4(r2)
    b704:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
    b708:	00800074 	movhi	r2,1
    b70c:	109bd104 	addi	r2,r2,28484
    b710:	10c00017 	ldw	r3,0(r2)
    b714:	e0bff717 	ldw	r2,-36(fp)
    b718:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    b71c:	00800074 	movhi	r2,1
    b720:	109bd104 	addi	r2,r2,28484
    b724:	e0fff717 	ldw	r3,-36(fp)
    b728:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    b72c:	e0bffd17 	ldw	r2,-12(fp)
    b730:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    b734:	00800074 	movhi	r2,1
    b738:	109bd304 	addi	r2,r2,28492
    b73c:	10c00017 	ldw	r3,0(r2)
    b740:	e0bffd17 	ldw	r2,-12(fp)
    b744:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    b748:	e0bffd17 	ldw	r2,-12(fp)
    b74c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    b750:	00800074 	movhi	r2,1
    b754:	109bd304 	addi	r2,r2,28492
    b758:	e0fffd17 	ldw	r3,-12(fp)
    b75c:	10c00015 	stw	r3,0(r2)
    b760:	e0bff617 	ldw	r2,-40(fp)
    b764:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b768:	e0bff917 	ldw	r2,-28(fp)
    b76c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    b770:	e0bfff17 	ldw	r2,-4(fp)
    b774:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    b778:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    b77c:	00004706 	br	b89c <OSQDel+0x2b0>
    b780:	e0bff617 	ldw	r2,-40(fp)
    b784:	e0bffa15 	stw	r2,-24(fp)
    b788:	e0bffa17 	ldw	r2,-24(fp)
    b78c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    b790:	e0bfff17 	ldw	r2,-4(fp)
    b794:	00c01244 	movi	r3,73
    b798:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    b79c:	e0bffd17 	ldw	r2,-12(fp)
    b7a0:	e0bff515 	stw	r2,-44(fp)
             }
             break;
    b7a4:	00003d06 	br	b89c <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    b7a8:	e13ffd17 	ldw	r4,-12(fp)
    b7ac:	000b883a 	mov	r5,zero
    b7b0:	01800104 	movi	r6,4
    b7b4:	000f883a 	mov	r7,zero
    b7b8:	000750c0 	call	750c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    b7bc:	e0bffd17 	ldw	r2,-12(fp)
    b7c0:	10800283 	ldbu	r2,10(r2)
    b7c4:	10803fcc 	andi	r2,r2,255
    b7c8:	103ff71e 	bne	r2,zero,b7a8 <__alt_mem_Flash_flash_data+0xf400b7a8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    b7cc:	e0bffd17 	ldw	r2,-12(fp)
    b7d0:	00c00fc4 	movi	r3,63
    b7d4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    b7d8:	e0bffd17 	ldw	r2,-12(fp)
    b7dc:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    b7e0:	e0bffd17 	ldw	r2,-12(fp)
    b7e4:	10800117 	ldw	r2,4(r2)
    b7e8:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
    b7ec:	00800074 	movhi	r2,1
    b7f0:	109bd104 	addi	r2,r2,28484
    b7f4:	10c00017 	ldw	r3,0(r2)
    b7f8:	e0bff717 	ldw	r2,-36(fp)
    b7fc:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    b800:	00800074 	movhi	r2,1
    b804:	109bd104 	addi	r2,r2,28484
    b808:	e0fff717 	ldw	r3,-36(fp)
    b80c:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    b810:	e0bffd17 	ldw	r2,-12(fp)
    b814:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    b818:	00800074 	movhi	r2,1
    b81c:	109bd304 	addi	r2,r2,28492
    b820:	10c00017 	ldw	r3,0(r2)
    b824:	e0bffd17 	ldw	r2,-12(fp)
    b828:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    b82c:	e0bffd17 	ldw	r2,-12(fp)
    b830:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    b834:	00800074 	movhi	r2,1
    b838:	109bd304 	addi	r2,r2,28492
    b83c:	e0fffd17 	ldw	r3,-12(fp)
    b840:	10c00015 	stw	r3,0(r2)
    b844:	e0bff617 	ldw	r2,-40(fp)
    b848:	e0bffb15 	stw	r2,-20(fp)
    b84c:	e0bffb17 	ldw	r2,-20(fp)
    b850:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    b854:	e0bff403 	ldbu	r2,-48(fp)
    b858:	10800058 	cmpnei	r2,r2,1
    b85c:	1000011e 	bne	r2,zero,b864 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    b860:	0007f240 	call	7f24 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    b864:	e0bfff17 	ldw	r2,-4(fp)
    b868:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    b86c:	e03ff515 	stw	zero,-44(fp)
             break;
    b870:	00000a06 	br	b89c <OSQDel+0x2b0>
    b874:	e0bff617 	ldw	r2,-40(fp)
    b878:	e0bffc15 	stw	r2,-16(fp)
    b87c:	e0bffc17 	ldw	r2,-16(fp)
    b880:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    b884:	e0bfff17 	ldw	r2,-4(fp)
    b888:	00c001c4 	movi	r3,7
    b88c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    b890:	e0bffd17 	ldw	r2,-12(fp)
    b894:	e0bff515 	stw	r2,-44(fp)
             break;
    b898:	0001883a 	nop
    }
    return (pevent_return);
    b89c:	e0bff517 	ldw	r2,-44(fp)
}
    b8a0:	e037883a 	mov	sp,fp
    b8a4:	dfc00117 	ldw	ra,4(sp)
    b8a8:	df000017 	ldw	fp,0(sp)
    b8ac:	dec00204 	addi	sp,sp,8
    b8b0:	f800283a 	ret

0000b8b4 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    b8b4:	defffa04 	addi	sp,sp,-24
    b8b8:	df000515 	stw	fp,20(sp)
    b8bc:	df000504 	addi	fp,sp,20
    b8c0:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    b8c4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    b8c8:	e0bfff17 	ldw	r2,-4(fp)
    b8cc:	1000021e 	bne	r2,zero,b8d8 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    b8d0:	00800104 	movi	r2,4
    b8d4:	00002106 	br	b95c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    b8d8:	e0bfff17 	ldw	r2,-4(fp)
    b8dc:	10800003 	ldbu	r2,0(r2)
    b8e0:	10803fcc 	andi	r2,r2,255
    b8e4:	108000a0 	cmpeqi	r2,r2,2
    b8e8:	1000021e 	bne	r2,zero,b8f4 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
    b8ec:	00800044 	movi	r2,1
    b8f0:	00001a06 	br	b95c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b8f4:	0005303a 	rdctl	r2,status
    b8f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b8fc:	e0fffd17 	ldw	r3,-12(fp)
    b900:	00bfff84 	movi	r2,-2
    b904:	1884703a 	and	r2,r3,r2
    b908:	1001703a 	wrctl	status,r2
  
  return context;
    b90c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    b910:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    b914:	e0bfff17 	ldw	r2,-4(fp)
    b918:	10800117 	ldw	r2,4(r2)
    b91c:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
    b920:	e0bffc17 	ldw	r2,-16(fp)
    b924:	10c00117 	ldw	r3,4(r2)
    b928:	e0bffc17 	ldw	r2,-16(fp)
    b92c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    b930:	e0bffc17 	ldw	r2,-16(fp)
    b934:	10c00117 	ldw	r3,4(r2)
    b938:	e0bffc17 	ldw	r2,-16(fp)
    b93c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    b940:	e0bffc17 	ldw	r2,-16(fp)
    b944:	1000058d 	sth	zero,22(r2)
    b948:	e0bffb17 	ldw	r2,-20(fp)
    b94c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b950:	e0bffe17 	ldw	r2,-8(fp)
    b954:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    b958:	0005883a 	mov	r2,zero
}
    b95c:	e037883a 	mov	sp,fp
    b960:	df000017 	ldw	fp,0(sp)
    b964:	dec00104 	addi	sp,sp,4
    b968:	f800283a 	ret

0000b96c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    b96c:	defff304 	addi	sp,sp,-52
    b970:	dfc00c15 	stw	ra,48(sp)
    b974:	df000b15 	stw	fp,44(sp)
    b978:	df000b04 	addi	fp,sp,44
    b97c:	e13ffd15 	stw	r4,-12(fp)
    b980:	2805883a 	mov	r2,r5
    b984:	e1bfff15 	stw	r6,-4(fp)
    b988:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b98c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    b990:	e0bfff17 	ldw	r2,-4(fp)
    b994:	1000021e 	bne	r2,zero,b9a0 <OSQPend+0x34>
        return ((void *)0);
    b998:	0005883a 	mov	r2,zero
    b99c:	0000ad06 	br	bc54 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    b9a0:	e0bffd17 	ldw	r2,-12(fp)
    b9a4:	1000051e 	bne	r2,zero,b9bc <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    b9a8:	e0bfff17 	ldw	r2,-4(fp)
    b9ac:	00c00104 	movi	r3,4
    b9b0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    b9b4:	0005883a 	mov	r2,zero
    b9b8:	0000a606 	br	bc54 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    b9bc:	e0bffd17 	ldw	r2,-12(fp)
    b9c0:	10800003 	ldbu	r2,0(r2)
    b9c4:	10803fcc 	andi	r2,r2,255
    b9c8:	108000a0 	cmpeqi	r2,r2,2
    b9cc:	1000051e 	bne	r2,zero,b9e4 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    b9d0:	e0bfff17 	ldw	r2,-4(fp)
    b9d4:	00c00044 	movi	r3,1
    b9d8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    b9dc:	0005883a 	mov	r2,zero
    b9e0:	00009c06 	br	bc54 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    b9e4:	00800074 	movhi	r2,1
    b9e8:	109bd404 	addi	r2,r2,28496
    b9ec:	10800003 	ldbu	r2,0(r2)
    b9f0:	10803fcc 	andi	r2,r2,255
    b9f4:	10000526 	beq	r2,zero,ba0c <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    b9f8:	e0bfff17 	ldw	r2,-4(fp)
    b9fc:	00c00084 	movi	r3,2
    ba00:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    ba04:	0005883a 	mov	r2,zero
    ba08:	00009206 	br	bc54 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    ba0c:	00800074 	movhi	r2,1
    ba10:	109bc604 	addi	r2,r2,28440
    ba14:	10800003 	ldbu	r2,0(r2)
    ba18:	10803fcc 	andi	r2,r2,255
    ba1c:	10000526 	beq	r2,zero,ba34 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    ba20:	e0bfff17 	ldw	r2,-4(fp)
    ba24:	00c00344 	movi	r3,13
    ba28:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    ba2c:	0005883a 	mov	r2,zero
    ba30:	00008806 	br	bc54 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba34:	0005303a 	rdctl	r2,status
    ba38:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba3c:	e0fff817 	ldw	r3,-32(fp)
    ba40:	00bfff84 	movi	r2,-2
    ba44:	1884703a 	and	r2,r3,r2
    ba48:	1001703a 	wrctl	status,r2
  
  return context;
    ba4c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    ba50:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    ba54:	e0bffd17 	ldw	r2,-12(fp)
    ba58:	10800117 	ldw	r2,4(r2)
    ba5c:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    ba60:	e0bff717 	ldw	r2,-36(fp)
    ba64:	1080058b 	ldhu	r2,22(r2)
    ba68:	10bfffcc 	andi	r2,r2,65535
    ba6c:	10001e26 	beq	r2,zero,bae8 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    ba70:	e0bff717 	ldw	r2,-36(fp)
    ba74:	10800417 	ldw	r2,16(r2)
    ba78:	11000104 	addi	r4,r2,4
    ba7c:	e0fff717 	ldw	r3,-36(fp)
    ba80:	19000415 	stw	r4,16(r3)
    ba84:	10800017 	ldw	r2,0(r2)
    ba88:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    ba8c:	e0bff717 	ldw	r2,-36(fp)
    ba90:	1080058b 	ldhu	r2,22(r2)
    ba94:	10bfffc4 	addi	r2,r2,-1
    ba98:	1007883a 	mov	r3,r2
    ba9c:	e0bff717 	ldw	r2,-36(fp)
    baa0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    baa4:	e0bff717 	ldw	r2,-36(fp)
    baa8:	10c00417 	ldw	r3,16(r2)
    baac:	e0bff717 	ldw	r2,-36(fp)
    bab0:	10800217 	ldw	r2,8(r2)
    bab4:	1880041e 	bne	r3,r2,bac8 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
    bab8:	e0bff717 	ldw	r2,-36(fp)
    babc:	10c00117 	ldw	r3,4(r2)
    bac0:	e0bff717 	ldw	r2,-36(fp)
    bac4:	10c00415 	stw	r3,16(r2)
    bac8:	e0bff617 	ldw	r2,-40(fp)
    bacc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bad0:	e0bff917 	ldw	r2,-28(fp)
    bad4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    bad8:	e0bfff17 	ldw	r2,-4(fp)
    badc:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    bae0:	e0bff517 	ldw	r2,-44(fp)
    bae4:	00005b06 	br	bc54 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    bae8:	00800074 	movhi	r2,1
    baec:	109bd504 	addi	r2,r2,28500
    baf0:	10c00017 	ldw	r3,0(r2)
    baf4:	00800074 	movhi	r2,1
    baf8:	109bd504 	addi	r2,r2,28500
    bafc:	10800017 	ldw	r2,0(r2)
    bb00:	10800c03 	ldbu	r2,48(r2)
    bb04:	10800114 	ori	r2,r2,4
    bb08:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    bb0c:	00800074 	movhi	r2,1
    bb10:	109bd504 	addi	r2,r2,28500
    bb14:	10800017 	ldw	r2,0(r2)
    bb18:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    bb1c:	00800074 	movhi	r2,1
    bb20:	109bd504 	addi	r2,r2,28500
    bb24:	10800017 	ldw	r2,0(r2)
    bb28:	e0fffe0b 	ldhu	r3,-8(fp)
    bb2c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    bb30:	e13ffd17 	ldw	r4,-12(fp)
    bb34:	00076a40 	call	76a4 <OS_EventTaskWait>
    bb38:	e0bff617 	ldw	r2,-40(fp)
    bb3c:	e0bffa15 	stw	r2,-24(fp)
    bb40:	e0bffa17 	ldw	r2,-24(fp)
    bb44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    bb48:	0007f240 	call	7f24 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb4c:	0005303a 	rdctl	r2,status
    bb50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bb54:	e0fffb17 	ldw	r3,-20(fp)
    bb58:	00bfff84 	movi	r2,-2
    bb5c:	1884703a 	and	r2,r3,r2
    bb60:	1001703a 	wrctl	status,r2
  
  return context;
    bb64:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    bb68:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    bb6c:	00800074 	movhi	r2,1
    bb70:	109bd504 	addi	r2,r2,28500
    bb74:	10800017 	ldw	r2,0(r2)
    bb78:	10800c43 	ldbu	r2,49(r2)
    bb7c:	10803fcc 	andi	r2,r2,255
    bb80:	10000326 	beq	r2,zero,bb90 <OSQPend+0x224>
    bb84:	108000a0 	cmpeqi	r2,r2,2
    bb88:	1000091e 	bne	r2,zero,bbb0 <OSQPend+0x244>
    bb8c:	00000d06 	br	bbc4 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    bb90:	00800074 	movhi	r2,1
    bb94:	109bd504 	addi	r2,r2,28500
    bb98:	10800017 	ldw	r2,0(r2)
    bb9c:	10800917 	ldw	r2,36(r2)
    bba0:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
    bba4:	e0bfff17 	ldw	r2,-4(fp)
    bba8:	10000005 	stb	zero,0(r2)
             break;
    bbac:	00001006 	br	bbf0 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    bbb0:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    bbb4:	e0bfff17 	ldw	r2,-4(fp)
    bbb8:	00c00384 	movi	r3,14
    bbbc:	10c00005 	stb	r3,0(r2)
             break;
    bbc0:	00000b06 	br	bbf0 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    bbc4:	00800074 	movhi	r2,1
    bbc8:	109bd504 	addi	r2,r2,28500
    bbcc:	10800017 	ldw	r2,0(r2)
    bbd0:	1009883a 	mov	r4,r2
    bbd4:	e17ffd17 	ldw	r5,-12(fp)
    bbd8:	00078fc0 	call	78fc <OS_EventTaskRemove>
             pmsg = (void *)0;
    bbdc:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    bbe0:	e0bfff17 	ldw	r2,-4(fp)
    bbe4:	00c00284 	movi	r3,10
    bbe8:	10c00005 	stb	r3,0(r2)
             break;
    bbec:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    bbf0:	00800074 	movhi	r2,1
    bbf4:	109bd504 	addi	r2,r2,28500
    bbf8:	10800017 	ldw	r2,0(r2)
    bbfc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    bc00:	00800074 	movhi	r2,1
    bc04:	109bd504 	addi	r2,r2,28500
    bc08:	10800017 	ldw	r2,0(r2)
    bc0c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    bc10:	00800074 	movhi	r2,1
    bc14:	109bd504 	addi	r2,r2,28500
    bc18:	10800017 	ldw	r2,0(r2)
    bc1c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    bc20:	00800074 	movhi	r2,1
    bc24:	109bd504 	addi	r2,r2,28500
    bc28:	10800017 	ldw	r2,0(r2)
    bc2c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    bc30:	00800074 	movhi	r2,1
    bc34:	109bd504 	addi	r2,r2,28500
    bc38:	10800017 	ldw	r2,0(r2)
    bc3c:	10000915 	stw	zero,36(r2)
    bc40:	e0bff617 	ldw	r2,-40(fp)
    bc44:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bc48:	e0bffc17 	ldw	r2,-16(fp)
    bc4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    bc50:	e0bff517 	ldw	r2,-44(fp)
}
    bc54:	e037883a 	mov	sp,fp
    bc58:	dfc00117 	ldw	ra,4(sp)
    bc5c:	df000017 	ldw	fp,0(sp)
    bc60:	dec00204 	addi	sp,sp,8
    bc64:	f800283a 	ret

0000bc68 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    bc68:	defff604 	addi	sp,sp,-40
    bc6c:	dfc00915 	stw	ra,36(sp)
    bc70:	df000815 	stw	fp,32(sp)
    bc74:	df000804 	addi	fp,sp,32
    bc78:	e13ffd15 	stw	r4,-12(fp)
    bc7c:	2805883a 	mov	r2,r5
    bc80:	e1bfff15 	stw	r6,-4(fp)
    bc84:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    bc88:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    bc8c:	e0bfff17 	ldw	r2,-4(fp)
    bc90:	1000021e 	bne	r2,zero,bc9c <OSQPendAbort+0x34>
        return (0);
    bc94:	0005883a 	mov	r2,zero
    bc98:	00004906 	br	bdc0 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    bc9c:	e0bffd17 	ldw	r2,-12(fp)
    bca0:	1000051e 	bne	r2,zero,bcb8 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    bca4:	e0bfff17 	ldw	r2,-4(fp)
    bca8:	00c00104 	movi	r3,4
    bcac:	10c00005 	stb	r3,0(r2)
        return (0);
    bcb0:	0005883a 	mov	r2,zero
    bcb4:	00004206 	br	bdc0 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    bcb8:	e0bffd17 	ldw	r2,-12(fp)
    bcbc:	10800003 	ldbu	r2,0(r2)
    bcc0:	10803fcc 	andi	r2,r2,255
    bcc4:	108000a0 	cmpeqi	r2,r2,2
    bcc8:	1000051e 	bne	r2,zero,bce0 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    bccc:	e0bfff17 	ldw	r2,-4(fp)
    bcd0:	00c00044 	movi	r3,1
    bcd4:	10c00005 	stb	r3,0(r2)
        return (0);
    bcd8:	0005883a 	mov	r2,zero
    bcdc:	00003806 	br	bdc0 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bce0:	0005303a 	rdctl	r2,status
    bce4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bce8:	e0fffa17 	ldw	r3,-24(fp)
    bcec:	00bfff84 	movi	r2,-2
    bcf0:	1884703a 	and	r2,r3,r2
    bcf4:	1001703a 	wrctl	status,r2
  
  return context;
    bcf8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    bcfc:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    bd00:	e0bffd17 	ldw	r2,-12(fp)
    bd04:	10800283 	ldbu	r2,10(r2)
    bd08:	10803fcc 	andi	r2,r2,255
    bd0c:	10002526 	beq	r2,zero,bda4 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
    bd10:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    bd14:	e0bffe03 	ldbu	r2,-8(fp)
    bd18:	10800060 	cmpeqi	r2,r2,1
    bd1c:	10000e26 	beq	r2,zero,bd58 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    bd20:	00000806 	br	bd44 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    bd24:	e13ffd17 	ldw	r4,-12(fp)
    bd28:	000b883a 	mov	r5,zero
    bd2c:	01800104 	movi	r6,4
    bd30:	01c00084 	movi	r7,2
    bd34:	000750c0 	call	750c <OS_EventTaskRdy>
                     nbr_tasks++;
    bd38:	e0bff803 	ldbu	r2,-32(fp)
    bd3c:	10800044 	addi	r2,r2,1
    bd40:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    bd44:	e0bffd17 	ldw	r2,-12(fp)
    bd48:	10800283 	ldbu	r2,10(r2)
    bd4c:	10803fcc 	andi	r2,r2,255
    bd50:	103ff41e 	bne	r2,zero,bd24 <__alt_mem_Flash_flash_data+0xf400bd24>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    bd54:	00000906 	br	bd7c <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    bd58:	e13ffd17 	ldw	r4,-12(fp)
    bd5c:	000b883a 	mov	r5,zero
    bd60:	01800104 	movi	r6,4
    bd64:	01c00084 	movi	r7,2
    bd68:	000750c0 	call	750c <OS_EventTaskRdy>
                 nbr_tasks++;
    bd6c:	e0bff803 	ldbu	r2,-32(fp)
    bd70:	10800044 	addi	r2,r2,1
    bd74:	e0bff805 	stb	r2,-32(fp)
                 break;
    bd78:	0001883a 	nop
    bd7c:	e0bff917 	ldw	r2,-28(fp)
    bd80:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bd84:	e0bffb17 	ldw	r2,-20(fp)
    bd88:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    bd8c:	0007f240 	call	7f24 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    bd90:	e0bfff17 	ldw	r2,-4(fp)
    bd94:	00c00384 	movi	r3,14
    bd98:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    bd9c:	e0bff803 	ldbu	r2,-32(fp)
    bda0:	00000706 	br	bdc0 <OSQPendAbort+0x158>
    bda4:	e0bff917 	ldw	r2,-28(fp)
    bda8:	e0bffc15 	stw	r2,-16(fp)
    bdac:	e0bffc17 	ldw	r2,-16(fp)
    bdb0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    bdb4:	e0bfff17 	ldw	r2,-4(fp)
    bdb8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    bdbc:	0005883a 	mov	r2,zero
}
    bdc0:	e037883a 	mov	sp,fp
    bdc4:	dfc00117 	ldw	ra,4(sp)
    bdc8:	df000017 	ldw	fp,0(sp)
    bdcc:	dec00204 	addi	sp,sp,8
    bdd0:	f800283a 	ret

0000bdd4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    bdd4:	defff604 	addi	sp,sp,-40
    bdd8:	dfc00915 	stw	ra,36(sp)
    bddc:	df000815 	stw	fp,32(sp)
    bde0:	df000804 	addi	fp,sp,32
    bde4:	e13ffe15 	stw	r4,-8(fp)
    bde8:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    bdec:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    bdf0:	e0bffe17 	ldw	r2,-8(fp)
    bdf4:	1000021e 	bne	r2,zero,be00 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    bdf8:	00800104 	movi	r2,4
    bdfc:	00004a06 	br	bf28 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    be00:	e0bffe17 	ldw	r2,-8(fp)
    be04:	10800003 	ldbu	r2,0(r2)
    be08:	10803fcc 	andi	r2,r2,255
    be0c:	108000a0 	cmpeqi	r2,r2,2
    be10:	1000021e 	bne	r2,zero,be1c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
    be14:	00800044 	movi	r2,1
    be18:	00004306 	br	bf28 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    be1c:	0005303a 	rdctl	r2,status
    be20:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    be24:	e0fffa17 	ldw	r3,-24(fp)
    be28:	00bfff84 	movi	r2,-2
    be2c:	1884703a 	and	r2,r3,r2
    be30:	1001703a 	wrctl	status,r2
  
  return context;
    be34:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    be38:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    be3c:	e0bffe17 	ldw	r2,-8(fp)
    be40:	10800283 	ldbu	r2,10(r2)
    be44:	10803fcc 	andi	r2,r2,255
    be48:	10000c26 	beq	r2,zero,be7c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    be4c:	e13ffe17 	ldw	r4,-8(fp)
    be50:	e17fff17 	ldw	r5,-4(fp)
    be54:	01800104 	movi	r6,4
    be58:	000f883a 	mov	r7,zero
    be5c:	000750c0 	call	750c <OS_EventTaskRdy>
    be60:	e0bff817 	ldw	r2,-32(fp)
    be64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    be68:	e0bffb17 	ldw	r2,-20(fp)
    be6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    be70:	0007f240 	call	7f24 <OS_Sched>
        return (OS_ERR_NONE);
    be74:	0005883a 	mov	r2,zero
    be78:	00002b06 	br	bf28 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    be7c:	e0bffe17 	ldw	r2,-8(fp)
    be80:	10800117 	ldw	r2,4(r2)
    be84:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    be88:	e0bff917 	ldw	r2,-28(fp)
    be8c:	10c0058b 	ldhu	r3,22(r2)
    be90:	e0bff917 	ldw	r2,-28(fp)
    be94:	1080050b 	ldhu	r2,20(r2)
    be98:	18ffffcc 	andi	r3,r3,65535
    be9c:	10bfffcc 	andi	r2,r2,65535
    bea0:	18800636 	bltu	r3,r2,bebc <OSQPost+0xe8>
    bea4:	e0bff817 	ldw	r2,-32(fp)
    bea8:	e0bffc15 	stw	r2,-16(fp)
    beac:	e0bffc17 	ldw	r2,-16(fp)
    beb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    beb4:	00800784 	movi	r2,30
    beb8:	00001b06 	br	bf28 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    bebc:	e0bff917 	ldw	r2,-28(fp)
    bec0:	10800317 	ldw	r2,12(r2)
    bec4:	11000104 	addi	r4,r2,4
    bec8:	e0fff917 	ldw	r3,-28(fp)
    becc:	19000315 	stw	r4,12(r3)
    bed0:	e0ffff17 	ldw	r3,-4(fp)
    bed4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    bed8:	e0bff917 	ldw	r2,-28(fp)
    bedc:	1080058b 	ldhu	r2,22(r2)
    bee0:	10800044 	addi	r2,r2,1
    bee4:	1007883a 	mov	r3,r2
    bee8:	e0bff917 	ldw	r2,-28(fp)
    beec:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    bef0:	e0bff917 	ldw	r2,-28(fp)
    bef4:	10c00317 	ldw	r3,12(r2)
    bef8:	e0bff917 	ldw	r2,-28(fp)
    befc:	10800217 	ldw	r2,8(r2)
    bf00:	1880041e 	bne	r3,r2,bf14 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
    bf04:	e0bff917 	ldw	r2,-28(fp)
    bf08:	10c00117 	ldw	r3,4(r2)
    bf0c:	e0bff917 	ldw	r2,-28(fp)
    bf10:	10c00315 	stw	r3,12(r2)
    bf14:	e0bff817 	ldw	r2,-32(fp)
    bf18:	e0bffd15 	stw	r2,-12(fp)
    bf1c:	e0bffd17 	ldw	r2,-12(fp)
    bf20:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    bf24:	0005883a 	mov	r2,zero
}
    bf28:	e037883a 	mov	sp,fp
    bf2c:	dfc00117 	ldw	ra,4(sp)
    bf30:	df000017 	ldw	fp,0(sp)
    bf34:	dec00204 	addi	sp,sp,8
    bf38:	f800283a 	ret

0000bf3c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    bf3c:	defff604 	addi	sp,sp,-40
    bf40:	dfc00915 	stw	ra,36(sp)
    bf44:	df000815 	stw	fp,32(sp)
    bf48:	df000804 	addi	fp,sp,32
    bf4c:	e13ffe15 	stw	r4,-8(fp)
    bf50:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    bf54:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    bf58:	e0bffe17 	ldw	r2,-8(fp)
    bf5c:	1000021e 	bne	r2,zero,bf68 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    bf60:	00800104 	movi	r2,4
    bf64:	00004c06 	br	c098 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    bf68:	e0bffe17 	ldw	r2,-8(fp)
    bf6c:	10800003 	ldbu	r2,0(r2)
    bf70:	10803fcc 	andi	r2,r2,255
    bf74:	108000a0 	cmpeqi	r2,r2,2
    bf78:	1000021e 	bne	r2,zero,bf84 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
    bf7c:	00800044 	movi	r2,1
    bf80:	00004506 	br	c098 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bf84:	0005303a 	rdctl	r2,status
    bf88:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bf8c:	e0fffa17 	ldw	r3,-24(fp)
    bf90:	00bfff84 	movi	r2,-2
    bf94:	1884703a 	and	r2,r3,r2
    bf98:	1001703a 	wrctl	status,r2
  
  return context;
    bf9c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    bfa0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    bfa4:	e0bffe17 	ldw	r2,-8(fp)
    bfa8:	10800283 	ldbu	r2,10(r2)
    bfac:	10803fcc 	andi	r2,r2,255
    bfb0:	10000c26 	beq	r2,zero,bfe4 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    bfb4:	e13ffe17 	ldw	r4,-8(fp)
    bfb8:	e17fff17 	ldw	r5,-4(fp)
    bfbc:	01800104 	movi	r6,4
    bfc0:	000f883a 	mov	r7,zero
    bfc4:	000750c0 	call	750c <OS_EventTaskRdy>
    bfc8:	e0bff817 	ldw	r2,-32(fp)
    bfcc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bfd0:	e0bffb17 	ldw	r2,-20(fp)
    bfd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    bfd8:	0007f240 	call	7f24 <OS_Sched>
        return (OS_ERR_NONE);
    bfdc:	0005883a 	mov	r2,zero
    bfe0:	00002d06 	br	c098 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    bfe4:	e0bffe17 	ldw	r2,-8(fp)
    bfe8:	10800117 	ldw	r2,4(r2)
    bfec:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    bff0:	e0bff917 	ldw	r2,-28(fp)
    bff4:	10c0058b 	ldhu	r3,22(r2)
    bff8:	e0bff917 	ldw	r2,-28(fp)
    bffc:	1080050b 	ldhu	r2,20(r2)
    c000:	18ffffcc 	andi	r3,r3,65535
    c004:	10bfffcc 	andi	r2,r2,65535
    c008:	18800636 	bltu	r3,r2,c024 <OSQPostFront+0xe8>
    c00c:	e0bff817 	ldw	r2,-32(fp)
    c010:	e0bffc15 	stw	r2,-16(fp)
    c014:	e0bffc17 	ldw	r2,-16(fp)
    c018:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    c01c:	00800784 	movi	r2,30
    c020:	00001d06 	br	c098 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    c024:	e0bff917 	ldw	r2,-28(fp)
    c028:	10c00417 	ldw	r3,16(r2)
    c02c:	e0bff917 	ldw	r2,-28(fp)
    c030:	10800117 	ldw	r2,4(r2)
    c034:	1880041e 	bne	r3,r2,c048 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
    c038:	e0bff917 	ldw	r2,-28(fp)
    c03c:	10c00217 	ldw	r3,8(r2)
    c040:	e0bff917 	ldw	r2,-28(fp)
    c044:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    c048:	e0bff917 	ldw	r2,-28(fp)
    c04c:	10800417 	ldw	r2,16(r2)
    c050:	10ffff04 	addi	r3,r2,-4
    c054:	e0bff917 	ldw	r2,-28(fp)
    c058:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    c05c:	e0bff917 	ldw	r2,-28(fp)
    c060:	10800417 	ldw	r2,16(r2)
    c064:	e0ffff17 	ldw	r3,-4(fp)
    c068:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    c06c:	e0bff917 	ldw	r2,-28(fp)
    c070:	1080058b 	ldhu	r2,22(r2)
    c074:	10800044 	addi	r2,r2,1
    c078:	1007883a 	mov	r3,r2
    c07c:	e0bff917 	ldw	r2,-28(fp)
    c080:	10c0058d 	sth	r3,22(r2)
    c084:	e0bff817 	ldw	r2,-32(fp)
    c088:	e0bffd15 	stw	r2,-12(fp)
    c08c:	e0bffd17 	ldw	r2,-12(fp)
    c090:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    c094:	0005883a 	mov	r2,zero
}
    c098:	e037883a 	mov	sp,fp
    c09c:	dfc00117 	ldw	ra,4(sp)
    c0a0:	df000017 	ldw	fp,0(sp)
    c0a4:	dec00204 	addi	sp,sp,8
    c0a8:	f800283a 	ret

0000c0ac <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    c0ac:	defff504 	addi	sp,sp,-44
    c0b0:	dfc00a15 	stw	ra,40(sp)
    c0b4:	df000915 	stw	fp,36(sp)
    c0b8:	df000904 	addi	fp,sp,36
    c0bc:	e13ffd15 	stw	r4,-12(fp)
    c0c0:	e17ffe15 	stw	r5,-8(fp)
    c0c4:	3005883a 	mov	r2,r6
    c0c8:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    c0cc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    c0d0:	e0bffd17 	ldw	r2,-12(fp)
    c0d4:	1000021e 	bne	r2,zero,c0e0 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    c0d8:	00800104 	movi	r2,4
    c0dc:	00007106 	br	c2a4 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    c0e0:	e0bffd17 	ldw	r2,-12(fp)
    c0e4:	10800003 	ldbu	r2,0(r2)
    c0e8:	10803fcc 	andi	r2,r2,255
    c0ec:	108000a0 	cmpeqi	r2,r2,2
    c0f0:	1000021e 	bne	r2,zero,c0fc <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
    c0f4:	00800044 	movi	r2,1
    c0f8:	00006a06 	br	c2a4 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c0fc:	0005303a 	rdctl	r2,status
    c100:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c104:	e0fff917 	ldw	r3,-28(fp)
    c108:	00bfff84 	movi	r2,-2
    c10c:	1884703a 	and	r2,r3,r2
    c110:	1001703a 	wrctl	status,r2
  
  return context;
    c114:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    c118:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    c11c:	e0bffd17 	ldw	r2,-12(fp)
    c120:	10800283 	ldbu	r2,10(r2)
    c124:	10803fcc 	andi	r2,r2,255
    c128:	10001d26 	beq	r2,zero,c1a0 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    c12c:	e0bfff03 	ldbu	r2,-4(fp)
    c130:	1080004c 	andi	r2,r2,1
    c134:	10000b26 	beq	r2,zero,c164 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    c138:	00000506 	br	c150 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    c13c:	e13ffd17 	ldw	r4,-12(fp)
    c140:	e17ffe17 	ldw	r5,-8(fp)
    c144:	01800104 	movi	r6,4
    c148:	000f883a 	mov	r7,zero
    c14c:	000750c0 	call	750c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    c150:	e0bffd17 	ldw	r2,-12(fp)
    c154:	10800283 	ldbu	r2,10(r2)
    c158:	10803fcc 	andi	r2,r2,255
    c15c:	103ff71e 	bne	r2,zero,c13c <__alt_mem_Flash_flash_data+0xf400c13c>
    c160:	00000506 	br	c178 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    c164:	e13ffd17 	ldw	r4,-12(fp)
    c168:	e17ffe17 	ldw	r5,-8(fp)
    c16c:	01800104 	movi	r6,4
    c170:	000f883a 	mov	r7,zero
    c174:	000750c0 	call	750c <OS_EventTaskRdy>
    c178:	e0bff717 	ldw	r2,-36(fp)
    c17c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c180:	e0bffa17 	ldw	r2,-24(fp)
    c184:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    c188:	e0bfff03 	ldbu	r2,-4(fp)
    c18c:	1080010c 	andi	r2,r2,4
    c190:	1000011e 	bne	r2,zero,c198 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
    c194:	0007f240 	call	7f24 <OS_Sched>
        }
        return (OS_ERR_NONE);
    c198:	0005883a 	mov	r2,zero
    c19c:	00004106 	br	c2a4 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    c1a0:	e0bffd17 	ldw	r2,-12(fp)
    c1a4:	10800117 	ldw	r2,4(r2)
    c1a8:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    c1ac:	e0bff817 	ldw	r2,-32(fp)
    c1b0:	10c0058b 	ldhu	r3,22(r2)
    c1b4:	e0bff817 	ldw	r2,-32(fp)
    c1b8:	1080050b 	ldhu	r2,20(r2)
    c1bc:	18ffffcc 	andi	r3,r3,65535
    c1c0:	10bfffcc 	andi	r2,r2,65535
    c1c4:	18800636 	bltu	r3,r2,c1e0 <OSQPostOpt+0x134>
    c1c8:	e0bff717 	ldw	r2,-36(fp)
    c1cc:	e0bffb15 	stw	r2,-20(fp)
    c1d0:	e0bffb17 	ldw	r2,-20(fp)
    c1d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    c1d8:	00800784 	movi	r2,30
    c1dc:	00003106 	br	c2a4 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    c1e0:	e0bfff03 	ldbu	r2,-4(fp)
    c1e4:	1080008c 	andi	r2,r2,2
    c1e8:	10001326 	beq	r2,zero,c238 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    c1ec:	e0bff817 	ldw	r2,-32(fp)
    c1f0:	10c00417 	ldw	r3,16(r2)
    c1f4:	e0bff817 	ldw	r2,-32(fp)
    c1f8:	10800117 	ldw	r2,4(r2)
    c1fc:	1880041e 	bne	r3,r2,c210 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    c200:	e0bff817 	ldw	r2,-32(fp)
    c204:	10c00217 	ldw	r3,8(r2)
    c208:	e0bff817 	ldw	r2,-32(fp)
    c20c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    c210:	e0bff817 	ldw	r2,-32(fp)
    c214:	10800417 	ldw	r2,16(r2)
    c218:	10ffff04 	addi	r3,r2,-4
    c21c:	e0bff817 	ldw	r2,-32(fp)
    c220:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    c224:	e0bff817 	ldw	r2,-32(fp)
    c228:	10800417 	ldw	r2,16(r2)
    c22c:	e0fffe17 	ldw	r3,-8(fp)
    c230:	10c00015 	stw	r3,0(r2)
    c234:	00001006 	br	c278 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    c238:	e0bff817 	ldw	r2,-32(fp)
    c23c:	10800317 	ldw	r2,12(r2)
    c240:	11000104 	addi	r4,r2,4
    c244:	e0fff817 	ldw	r3,-32(fp)
    c248:	19000315 	stw	r4,12(r3)
    c24c:	e0fffe17 	ldw	r3,-8(fp)
    c250:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    c254:	e0bff817 	ldw	r2,-32(fp)
    c258:	10c00317 	ldw	r3,12(r2)
    c25c:	e0bff817 	ldw	r2,-32(fp)
    c260:	10800217 	ldw	r2,8(r2)
    c264:	1880041e 	bne	r3,r2,c278 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
    c268:	e0bff817 	ldw	r2,-32(fp)
    c26c:	10c00117 	ldw	r3,4(r2)
    c270:	e0bff817 	ldw	r2,-32(fp)
    c274:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    c278:	e0bff817 	ldw	r2,-32(fp)
    c27c:	1080058b 	ldhu	r2,22(r2)
    c280:	10800044 	addi	r2,r2,1
    c284:	1007883a 	mov	r3,r2
    c288:	e0bff817 	ldw	r2,-32(fp)
    c28c:	10c0058d 	sth	r3,22(r2)
    c290:	e0bff717 	ldw	r2,-36(fp)
    c294:	e0bffc15 	stw	r2,-16(fp)
    c298:	e0bffc17 	ldw	r2,-16(fp)
    c29c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    c2a0:	0005883a 	mov	r2,zero
}
    c2a4:	e037883a 	mov	sp,fp
    c2a8:	dfc00117 	ldw	ra,4(sp)
    c2ac:	df000017 	ldw	fp,0(sp)
    c2b0:	dec00204 	addi	sp,sp,8
    c2b4:	f800283a 	ret

0000c2b8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    c2b8:	defff604 	addi	sp,sp,-40
    c2bc:	df000915 	stw	fp,36(sp)
    c2c0:	df000904 	addi	fp,sp,36
    c2c4:	e13ffe15 	stw	r4,-8(fp)
    c2c8:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    c2cc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    c2d0:	e0bffe17 	ldw	r2,-8(fp)
    c2d4:	1000021e 	bne	r2,zero,c2e0 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    c2d8:	00800104 	movi	r2,4
    c2dc:	00004906 	br	c404 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    c2e0:	e0bfff17 	ldw	r2,-4(fp)
    c2e4:	1000021e 	bne	r2,zero,c2f0 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    c2e8:	00800244 	movi	r2,9
    c2ec:	00004506 	br	c404 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    c2f0:	e0bffe17 	ldw	r2,-8(fp)
    c2f4:	10800003 	ldbu	r2,0(r2)
    c2f8:	10803fcc 	andi	r2,r2,255
    c2fc:	108000a0 	cmpeqi	r2,r2,2
    c300:	1000021e 	bne	r2,zero,c30c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    c304:	00800044 	movi	r2,1
    c308:	00003e06 	br	c404 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c30c:	0005303a 	rdctl	r2,status
    c310:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c314:	e0fffc17 	ldw	r3,-16(fp)
    c318:	00bfff84 	movi	r2,-2
    c31c:	1884703a 	and	r2,r3,r2
    c320:	1001703a 	wrctl	status,r2
  
  return context;
    c324:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    c328:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    c32c:	e0bffe17 	ldw	r2,-8(fp)
    c330:	10c00283 	ldbu	r3,10(r2)
    c334:	e0bfff17 	ldw	r2,-4(fp)
    c338:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
    c33c:	e0bffe17 	ldw	r2,-8(fp)
    c340:	108002c4 	addi	r2,r2,11
    c344:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    c348:	e0bfff17 	ldw	r2,-4(fp)
    c34c:	10800204 	addi	r2,r2,8
    c350:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    c354:	e03ff705 	stb	zero,-36(fp)
    c358:	00000b06 	br	c388 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
    c35c:	e0bff917 	ldw	r2,-28(fp)
    c360:	10c00044 	addi	r3,r2,1
    c364:	e0fff915 	stw	r3,-28(fp)
    c368:	e0fff817 	ldw	r3,-32(fp)
    c36c:	19000044 	addi	r4,r3,1
    c370:	e13ff815 	stw	r4,-32(fp)
    c374:	18c00003 	ldbu	r3,0(r3)
    c378:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    c37c:	e0bff703 	ldbu	r2,-36(fp)
    c380:	10800044 	addi	r2,r2,1
    c384:	e0bff705 	stb	r2,-36(fp)
    c388:	e0bff703 	ldbu	r2,-36(fp)
    c38c:	108000f0 	cmpltui	r2,r2,3
    c390:	103ff21e 	bne	r2,zero,c35c <__alt_mem_Flash_flash_data+0xf400c35c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    c394:	e0bffe17 	ldw	r2,-8(fp)
    c398:	10800117 	ldw	r2,4(r2)
    c39c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
    c3a0:	e0bffb17 	ldw	r2,-20(fp)
    c3a4:	1080058b 	ldhu	r2,22(r2)
    c3a8:	10bfffcc 	andi	r2,r2,65535
    c3ac:	10000626 	beq	r2,zero,c3c8 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    c3b0:	e0bffb17 	ldw	r2,-20(fp)
    c3b4:	10800417 	ldw	r2,16(r2)
    c3b8:	10c00017 	ldw	r3,0(r2)
    c3bc:	e0bfff17 	ldw	r2,-4(fp)
    c3c0:	10c00015 	stw	r3,0(r2)
    c3c4:	00000206 	br	c3d0 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
    c3c8:	e0bfff17 	ldw	r2,-4(fp)
    c3cc:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    c3d0:	e0bffb17 	ldw	r2,-20(fp)
    c3d4:	10c0058b 	ldhu	r3,22(r2)
    c3d8:	e0bfff17 	ldw	r2,-4(fp)
    c3dc:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    c3e0:	e0bffb17 	ldw	r2,-20(fp)
    c3e4:	10c0050b 	ldhu	r3,20(r2)
    c3e8:	e0bfff17 	ldw	r2,-4(fp)
    c3ec:	10c0018d 	sth	r3,6(r2)
    c3f0:	e0bffa17 	ldw	r2,-24(fp)
    c3f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c3f8:	e0bffd17 	ldw	r2,-12(fp)
    c3fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    c400:	0005883a 	mov	r2,zero
}
    c404:	e037883a 	mov	sp,fp
    c408:	df000017 	ldw	fp,0(sp)
    c40c:	dec00104 	addi	sp,sp,4
    c410:	f800283a 	ret

0000c414 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    c414:	defffb04 	addi	sp,sp,-20
    c418:	dfc00415 	stw	ra,16(sp)
    c41c:	df000315 	stw	fp,12(sp)
    c420:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    c424:	010000b4 	movhi	r4,2
    c428:	2113c404 	addi	r4,r4,20240
    c42c:	01407804 	movi	r5,480
    c430:	0007e700 	call	7e70 <OS_MemClr>
    pq1 = &OSQTbl[0];
    c434:	008000b4 	movhi	r2,2
    c438:	1093c404 	addi	r2,r2,20240
    c43c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    c440:	008000b4 	movhi	r2,2
    c444:	1093ca04 	addi	r2,r2,20264
    c448:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    c44c:	e03ffd0d 	sth	zero,-12(fp)
    c450:	00000c06 	br	c484 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    c454:	e0bffe17 	ldw	r2,-8(fp)
    c458:	e0ffff17 	ldw	r3,-4(fp)
    c45c:	10c00015 	stw	r3,0(r2)
        pq1++;
    c460:	e0bffe17 	ldw	r2,-8(fp)
    c464:	10800604 	addi	r2,r2,24
    c468:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    c46c:	e0bfff17 	ldw	r2,-4(fp)
    c470:	10800604 	addi	r2,r2,24
    c474:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    c478:	e0bffd0b 	ldhu	r2,-12(fp)
    c47c:	10800044 	addi	r2,r2,1
    c480:	e0bffd0d 	sth	r2,-12(fp)
    c484:	e0bffd0b 	ldhu	r2,-12(fp)
    c488:	108004f0 	cmpltui	r2,r2,19
    c48c:	103ff11e 	bne	r2,zero,c454 <__alt_mem_Flash_flash_data+0xf400c454>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    c490:	e0bffe17 	ldw	r2,-8(fp)
    c494:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    c498:	00800074 	movhi	r2,1
    c49c:	109bd104 	addi	r2,r2,28484
    c4a0:	00c000b4 	movhi	r3,2
    c4a4:	18d3c404 	addi	r3,r3,20240
    c4a8:	10c00015 	stw	r3,0(r2)
#endif
}
    c4ac:	e037883a 	mov	sp,fp
    c4b0:	dfc00117 	ldw	ra,4(sp)
    c4b4:	df000017 	ldw	fp,0(sp)
    c4b8:	dec00204 	addi	sp,sp,8
    c4bc:	f800283a 	ret

0000c4c0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    c4c0:	defffa04 	addi	sp,sp,-24
    c4c4:	df000515 	stw	fp,20(sp)
    c4c8:	df000504 	addi	fp,sp,20
    c4cc:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    c4d0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    c4d4:	e0bfff17 	ldw	r2,-4(fp)
    c4d8:	1000021e 	bne	r2,zero,c4e4 <OSSemAccept+0x24>
        return (0);
    c4dc:	0005883a 	mov	r2,zero
    c4e0:	00001f06 	br	c560 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    c4e4:	e0bfff17 	ldw	r2,-4(fp)
    c4e8:	10800003 	ldbu	r2,0(r2)
    c4ec:	10803fcc 	andi	r2,r2,255
    c4f0:	108000e0 	cmpeqi	r2,r2,3
    c4f4:	1000021e 	bne	r2,zero,c500 <OSSemAccept+0x40>
        return (0);
    c4f8:	0005883a 	mov	r2,zero
    c4fc:	00001806 	br	c560 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c500:	0005303a 	rdctl	r2,status
    c504:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c508:	e0fffd17 	ldw	r3,-12(fp)
    c50c:	00bfff84 	movi	r2,-2
    c510:	1884703a 	and	r2,r3,r2
    c514:	1001703a 	wrctl	status,r2
  
  return context;
    c518:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    c51c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
    c520:	e0bfff17 	ldw	r2,-4(fp)
    c524:	1080020b 	ldhu	r2,8(r2)
    c528:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    c52c:	e0bffc0b 	ldhu	r2,-16(fp)
    c530:	10000626 	beq	r2,zero,c54c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    c534:	e0bfff17 	ldw	r2,-4(fp)
    c538:	1080020b 	ldhu	r2,8(r2)
    c53c:	10bfffc4 	addi	r2,r2,-1
    c540:	1007883a 	mov	r3,r2
    c544:	e0bfff17 	ldw	r2,-4(fp)
    c548:	10c0020d 	sth	r3,8(r2)
    c54c:	e0bffb17 	ldw	r2,-20(fp)
    c550:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c554:	e0bffe17 	ldw	r2,-8(fp)
    c558:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    c55c:	e0bffc0b 	ldhu	r2,-16(fp)
}
    c560:	e037883a 	mov	sp,fp
    c564:	df000017 	ldw	fp,0(sp)
    c568:	dec00104 	addi	sp,sp,4
    c56c:	f800283a 	ret

0000c570 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    c570:	defff904 	addi	sp,sp,-28
    c574:	dfc00615 	stw	ra,24(sp)
    c578:	df000515 	stw	fp,20(sp)
    c57c:	df000504 	addi	fp,sp,20
    c580:	2005883a 	mov	r2,r4
    c584:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    c588:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    c58c:	00800074 	movhi	r2,1
    c590:	109bd404 	addi	r2,r2,28496
    c594:	10800003 	ldbu	r2,0(r2)
    c598:	10803fcc 	andi	r2,r2,255
    c59c:	10000226 	beq	r2,zero,c5a8 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    c5a0:	0005883a 	mov	r2,zero
    c5a4:	00002d06 	br	c65c <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c5a8:	0005303a 	rdctl	r2,status
    c5ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c5b0:	e0fffd17 	ldw	r3,-12(fp)
    c5b4:	00bfff84 	movi	r2,-2
    c5b8:	1884703a 	and	r2,r3,r2
    c5bc:	1001703a 	wrctl	status,r2
  
  return context;
    c5c0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    c5c4:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    c5c8:	00800074 	movhi	r2,1
    c5cc:	109bd304 	addi	r2,r2,28492
    c5d0:	10800017 	ldw	r2,0(r2)
    c5d4:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    c5d8:	00800074 	movhi	r2,1
    c5dc:	109bd304 	addi	r2,r2,28492
    c5e0:	10800017 	ldw	r2,0(r2)
    c5e4:	10000726 	beq	r2,zero,c604 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    c5e8:	00800074 	movhi	r2,1
    c5ec:	109bd304 	addi	r2,r2,28492
    c5f0:	10800017 	ldw	r2,0(r2)
    c5f4:	10c00117 	ldw	r3,4(r2)
    c5f8:	00800074 	movhi	r2,1
    c5fc:	109bd304 	addi	r2,r2,28492
    c600:	10c00015 	stw	r3,0(r2)
    c604:	e0bffb17 	ldw	r2,-20(fp)
    c608:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c60c:	e0bffe17 	ldw	r2,-8(fp)
    c610:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    c614:	e0bffc17 	ldw	r2,-16(fp)
    c618:	10000f26 	beq	r2,zero,c658 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    c61c:	e0bffc17 	ldw	r2,-16(fp)
    c620:	00c000c4 	movi	r3,3
    c624:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    c628:	e0bffc17 	ldw	r2,-16(fp)
    c62c:	e0ffff0b 	ldhu	r3,-4(fp)
    c630:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    c634:	e0bffc17 	ldw	r2,-16(fp)
    c638:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    c63c:	e0bffc17 	ldw	r2,-16(fp)
    c640:	00c00fc4 	movi	r3,63
    c644:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    c648:	e0bffc17 	ldw	r2,-16(fp)
    c64c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    c650:	e13ffc17 	ldw	r4,-16(fp)
    c654:	0007aac0 	call	7aac <OS_EventWaitListInit>
    }
    return (pevent);
    c658:	e0bffc17 	ldw	r2,-16(fp)
}
    c65c:	e037883a 	mov	sp,fp
    c660:	dfc00117 	ldw	ra,4(sp)
    c664:	df000017 	ldw	fp,0(sp)
    c668:	dec00204 	addi	sp,sp,8
    c66c:	f800283a 	ret

0000c670 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    c670:	defff304 	addi	sp,sp,-52
    c674:	dfc00c15 	stw	ra,48(sp)
    c678:	df000b15 	stw	fp,44(sp)
    c67c:	df000b04 	addi	fp,sp,44
    c680:	e13ffd15 	stw	r4,-12(fp)
    c684:	2805883a 	mov	r2,r5
    c688:	e1bfff15 	stw	r6,-4(fp)
    c68c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    c690:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    c694:	e0bfff17 	ldw	r2,-4(fp)
    c698:	1000021e 	bne	r2,zero,c6a4 <OSSemDel+0x34>
        return (pevent);
    c69c:	e0bffd17 	ldw	r2,-12(fp)
    c6a0:	00008806 	br	c8c4 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    c6a4:	e0bffd17 	ldw	r2,-12(fp)
    c6a8:	1000051e 	bne	r2,zero,c6c0 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    c6ac:	e0bfff17 	ldw	r2,-4(fp)
    c6b0:	00c00104 	movi	r3,4
    c6b4:	10c00005 	stb	r3,0(r2)
        return (pevent);
    c6b8:	e0bffd17 	ldw	r2,-12(fp)
    c6bc:	00008106 	br	c8c4 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    c6c0:	e0bffd17 	ldw	r2,-12(fp)
    c6c4:	10800003 	ldbu	r2,0(r2)
    c6c8:	10803fcc 	andi	r2,r2,255
    c6cc:	108000e0 	cmpeqi	r2,r2,3
    c6d0:	1000051e 	bne	r2,zero,c6e8 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    c6d4:	e0bfff17 	ldw	r2,-4(fp)
    c6d8:	00c00044 	movi	r3,1
    c6dc:	10c00005 	stb	r3,0(r2)
        return (pevent);
    c6e0:	e0bffd17 	ldw	r2,-12(fp)
    c6e4:	00007706 	br	c8c4 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    c6e8:	00800074 	movhi	r2,1
    c6ec:	109bd404 	addi	r2,r2,28496
    c6f0:	10800003 	ldbu	r2,0(r2)
    c6f4:	10803fcc 	andi	r2,r2,255
    c6f8:	10000526 	beq	r2,zero,c710 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    c6fc:	e0bfff17 	ldw	r2,-4(fp)
    c700:	00c003c4 	movi	r3,15
    c704:	10c00005 	stb	r3,0(r2)
        return (pevent);
    c708:	e0bffd17 	ldw	r2,-12(fp)
    c70c:	00006d06 	br	c8c4 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c710:	0005303a 	rdctl	r2,status
    c714:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c718:	e0fff817 	ldw	r3,-32(fp)
    c71c:	00bfff84 	movi	r2,-2
    c720:	1884703a 	and	r2,r3,r2
    c724:	1001703a 	wrctl	status,r2
  
  return context;
    c728:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    c72c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    c730:	e0bffd17 	ldw	r2,-12(fp)
    c734:	10800283 	ldbu	r2,10(r2)
    c738:	10803fcc 	andi	r2,r2,255
    c73c:	10000326 	beq	r2,zero,c74c <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    c740:	00800044 	movi	r2,1
    c744:	e0bff505 	stb	r2,-44(fp)
    c748:	00000106 	br	c750 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    c74c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
    c750:	e0bffe03 	ldbu	r2,-8(fp)
    c754:	10000326 	beq	r2,zero,c764 <OSSemDel+0xf4>
    c758:	10800060 	cmpeqi	r2,r2,1
    c75c:	10002c1e 	bne	r2,zero,c810 <OSSemDel+0x1a0>
    c760:	00004d06 	br	c898 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    c764:	e0bff503 	ldbu	r2,-44(fp)
    c768:	10001a1e 	bne	r2,zero,c7d4 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    c76c:	e0bffd17 	ldw	r2,-12(fp)
    c770:	00c00fc4 	movi	r3,63
    c774:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    c778:	e0bffd17 	ldw	r2,-12(fp)
    c77c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    c780:	e0bffd17 	ldw	r2,-12(fp)
    c784:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    c788:	00800074 	movhi	r2,1
    c78c:	109bd304 	addi	r2,r2,28492
    c790:	10c00017 	ldw	r3,0(r2)
    c794:	e0bffd17 	ldw	r2,-12(fp)
    c798:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    c79c:	e0bffd17 	ldw	r2,-12(fp)
    c7a0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    c7a4:	00800074 	movhi	r2,1
    c7a8:	109bd304 	addi	r2,r2,28492
    c7ac:	e0fffd17 	ldw	r3,-12(fp)
    c7b0:	10c00015 	stw	r3,0(r2)
    c7b4:	e0bff717 	ldw	r2,-36(fp)
    c7b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c7bc:	e0bff917 	ldw	r2,-28(fp)
    c7c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    c7c4:	e0bfff17 	ldw	r2,-4(fp)
    c7c8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    c7cc:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    c7d0:	00003b06 	br	c8c0 <OSSemDel+0x250>
    c7d4:	e0bff717 	ldw	r2,-36(fp)
    c7d8:	e0bffa15 	stw	r2,-24(fp)
    c7dc:	e0bffa17 	ldw	r2,-24(fp)
    c7e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    c7e4:	e0bfff17 	ldw	r2,-4(fp)
    c7e8:	00c01244 	movi	r3,73
    c7ec:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    c7f0:	e0bffd17 	ldw	r2,-12(fp)
    c7f4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    c7f8:	00003106 	br	c8c0 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    c7fc:	e13ffd17 	ldw	r4,-12(fp)
    c800:	000b883a 	mov	r5,zero
    c804:	01800044 	movi	r6,1
    c808:	000f883a 	mov	r7,zero
    c80c:	000750c0 	call	750c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    c810:	e0bffd17 	ldw	r2,-12(fp)
    c814:	10800283 	ldbu	r2,10(r2)
    c818:	10803fcc 	andi	r2,r2,255
    c81c:	103ff71e 	bne	r2,zero,c7fc <__alt_mem_Flash_flash_data+0xf400c7fc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    c820:	e0bffd17 	ldw	r2,-12(fp)
    c824:	00c00fc4 	movi	r3,63
    c828:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    c82c:	e0bffd17 	ldw	r2,-12(fp)
    c830:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    c834:	e0bffd17 	ldw	r2,-12(fp)
    c838:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    c83c:	00800074 	movhi	r2,1
    c840:	109bd304 	addi	r2,r2,28492
    c844:	10c00017 	ldw	r3,0(r2)
    c848:	e0bffd17 	ldw	r2,-12(fp)
    c84c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    c850:	e0bffd17 	ldw	r2,-12(fp)
    c854:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    c858:	00800074 	movhi	r2,1
    c85c:	109bd304 	addi	r2,r2,28492
    c860:	e0fffd17 	ldw	r3,-12(fp)
    c864:	10c00015 	stw	r3,0(r2)
    c868:	e0bff717 	ldw	r2,-36(fp)
    c86c:	e0bffb15 	stw	r2,-20(fp)
    c870:	e0bffb17 	ldw	r2,-20(fp)
    c874:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    c878:	e0bff503 	ldbu	r2,-44(fp)
    c87c:	10800058 	cmpnei	r2,r2,1
    c880:	1000011e 	bne	r2,zero,c888 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    c884:	0007f240 	call	7f24 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    c888:	e0bfff17 	ldw	r2,-4(fp)
    c88c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    c890:	e03ff615 	stw	zero,-40(fp)
             break;
    c894:	00000a06 	br	c8c0 <OSSemDel+0x250>
    c898:	e0bff717 	ldw	r2,-36(fp)
    c89c:	e0bffc15 	stw	r2,-16(fp)
    c8a0:	e0bffc17 	ldw	r2,-16(fp)
    c8a4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    c8a8:	e0bfff17 	ldw	r2,-4(fp)
    c8ac:	00c001c4 	movi	r3,7
    c8b0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    c8b4:	e0bffd17 	ldw	r2,-12(fp)
    c8b8:	e0bff615 	stw	r2,-40(fp)
             break;
    c8bc:	0001883a 	nop
    }
    return (pevent_return);
    c8c0:	e0bff617 	ldw	r2,-40(fp)
}
    c8c4:	e037883a 	mov	sp,fp
    c8c8:	dfc00117 	ldw	ra,4(sp)
    c8cc:	df000017 	ldw	fp,0(sp)
    c8d0:	dec00204 	addi	sp,sp,8
    c8d4:	f800283a 	ret

0000c8d8 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    c8d8:	defff504 	addi	sp,sp,-44
    c8dc:	dfc00a15 	stw	ra,40(sp)
    c8e0:	df000915 	stw	fp,36(sp)
    c8e4:	df000904 	addi	fp,sp,36
    c8e8:	e13ffd15 	stw	r4,-12(fp)
    c8ec:	2805883a 	mov	r2,r5
    c8f0:	e1bfff15 	stw	r6,-4(fp)
    c8f4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    c8f8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    c8fc:	e0bfff17 	ldw	r2,-4(fp)
    c900:	1000011e 	bne	r2,zero,c908 <OSSemPend+0x30>
        return;
    c904:	00008906 	br	cb2c <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    c908:	e0bffd17 	ldw	r2,-12(fp)
    c90c:	1000041e 	bne	r2,zero,c920 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
    c910:	e0bfff17 	ldw	r2,-4(fp)
    c914:	00c00104 	movi	r3,4
    c918:	10c00005 	stb	r3,0(r2)
        return;
    c91c:	00008306 	br	cb2c <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    c920:	e0bffd17 	ldw	r2,-12(fp)
    c924:	10800003 	ldbu	r2,0(r2)
    c928:	10803fcc 	andi	r2,r2,255
    c92c:	108000e0 	cmpeqi	r2,r2,3
    c930:	1000041e 	bne	r2,zero,c944 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    c934:	e0bfff17 	ldw	r2,-4(fp)
    c938:	00c00044 	movi	r3,1
    c93c:	10c00005 	stb	r3,0(r2)
        return;
    c940:	00007a06 	br	cb2c <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    c944:	00800074 	movhi	r2,1
    c948:	109bd404 	addi	r2,r2,28496
    c94c:	10800003 	ldbu	r2,0(r2)
    c950:	10803fcc 	andi	r2,r2,255
    c954:	10000426 	beq	r2,zero,c968 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    c958:	e0bfff17 	ldw	r2,-4(fp)
    c95c:	00c00084 	movi	r3,2
    c960:	10c00005 	stb	r3,0(r2)
        return;
    c964:	00007106 	br	cb2c <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    c968:	00800074 	movhi	r2,1
    c96c:	109bc604 	addi	r2,r2,28440
    c970:	10800003 	ldbu	r2,0(r2)
    c974:	10803fcc 	andi	r2,r2,255
    c978:	10000426 	beq	r2,zero,c98c <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    c97c:	e0bfff17 	ldw	r2,-4(fp)
    c980:	00c00344 	movi	r3,13
    c984:	10c00005 	stb	r3,0(r2)
        return;
    c988:	00006806 	br	cb2c <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c98c:	0005303a 	rdctl	r2,status
    c990:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c994:	e0fff817 	ldw	r3,-32(fp)
    c998:	00bfff84 	movi	r2,-2
    c99c:	1884703a 	and	r2,r3,r2
    c9a0:	1001703a 	wrctl	status,r2
  
  return context;
    c9a4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    c9a8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    c9ac:	e0bffd17 	ldw	r2,-12(fp)
    c9b0:	1080020b 	ldhu	r2,8(r2)
    c9b4:	10bfffcc 	andi	r2,r2,65535
    c9b8:	10000d26 	beq	r2,zero,c9f0 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    c9bc:	e0bffd17 	ldw	r2,-12(fp)
    c9c0:	1080020b 	ldhu	r2,8(r2)
    c9c4:	10bfffc4 	addi	r2,r2,-1
    c9c8:	1007883a 	mov	r3,r2
    c9cc:	e0bffd17 	ldw	r2,-12(fp)
    c9d0:	10c0020d 	sth	r3,8(r2)
    c9d4:	e0bff717 	ldw	r2,-36(fp)
    c9d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c9dc:	e0bff917 	ldw	r2,-28(fp)
    c9e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    c9e4:	e0bfff17 	ldw	r2,-4(fp)
    c9e8:	10000005 	stb	zero,0(r2)
        return;
    c9ec:	00004f06 	br	cb2c <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    c9f0:	00800074 	movhi	r2,1
    c9f4:	109bd504 	addi	r2,r2,28500
    c9f8:	10c00017 	ldw	r3,0(r2)
    c9fc:	00800074 	movhi	r2,1
    ca00:	109bd504 	addi	r2,r2,28500
    ca04:	10800017 	ldw	r2,0(r2)
    ca08:	10800c03 	ldbu	r2,48(r2)
    ca0c:	10800054 	ori	r2,r2,1
    ca10:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    ca14:	00800074 	movhi	r2,1
    ca18:	109bd504 	addi	r2,r2,28500
    ca1c:	10800017 	ldw	r2,0(r2)
    ca20:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    ca24:	00800074 	movhi	r2,1
    ca28:	109bd504 	addi	r2,r2,28500
    ca2c:	10800017 	ldw	r2,0(r2)
    ca30:	e0fffe0b 	ldhu	r3,-8(fp)
    ca34:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    ca38:	e13ffd17 	ldw	r4,-12(fp)
    ca3c:	00076a40 	call	76a4 <OS_EventTaskWait>
    ca40:	e0bff717 	ldw	r2,-36(fp)
    ca44:	e0bffa15 	stw	r2,-24(fp)
    ca48:	e0bffa17 	ldw	r2,-24(fp)
    ca4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    ca50:	0007f240 	call	7f24 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ca54:	0005303a 	rdctl	r2,status
    ca58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ca5c:	e0fffb17 	ldw	r3,-20(fp)
    ca60:	00bfff84 	movi	r2,-2
    ca64:	1884703a 	and	r2,r3,r2
    ca68:	1001703a 	wrctl	status,r2
  
  return context;
    ca6c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    ca70:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    ca74:	00800074 	movhi	r2,1
    ca78:	109bd504 	addi	r2,r2,28500
    ca7c:	10800017 	ldw	r2,0(r2)
    ca80:	10800c43 	ldbu	r2,49(r2)
    ca84:	10803fcc 	andi	r2,r2,255
    ca88:	10000326 	beq	r2,zero,ca98 <OSSemPend+0x1c0>
    ca8c:	108000a0 	cmpeqi	r2,r2,2
    ca90:	1000041e 	bne	r2,zero,caa4 <OSSemPend+0x1cc>
    ca94:	00000706 	br	cab4 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    ca98:	e0bfff17 	ldw	r2,-4(fp)
    ca9c:	10000005 	stb	zero,0(r2)
             break;
    caa0:	00000e06 	br	cadc <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    caa4:	e0bfff17 	ldw	r2,-4(fp)
    caa8:	00c00384 	movi	r3,14
    caac:	10c00005 	stb	r3,0(r2)
             break;
    cab0:	00000a06 	br	cadc <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    cab4:	00800074 	movhi	r2,1
    cab8:	109bd504 	addi	r2,r2,28500
    cabc:	10800017 	ldw	r2,0(r2)
    cac0:	1009883a 	mov	r4,r2
    cac4:	e17ffd17 	ldw	r5,-12(fp)
    cac8:	00078fc0 	call	78fc <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    cacc:	e0bfff17 	ldw	r2,-4(fp)
    cad0:	00c00284 	movi	r3,10
    cad4:	10c00005 	stb	r3,0(r2)
             break;
    cad8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    cadc:	00800074 	movhi	r2,1
    cae0:	109bd504 	addi	r2,r2,28500
    cae4:	10800017 	ldw	r2,0(r2)
    cae8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    caec:	00800074 	movhi	r2,1
    caf0:	109bd504 	addi	r2,r2,28500
    caf4:	10800017 	ldw	r2,0(r2)
    caf8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    cafc:	00800074 	movhi	r2,1
    cb00:	109bd504 	addi	r2,r2,28500
    cb04:	10800017 	ldw	r2,0(r2)
    cb08:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    cb0c:	00800074 	movhi	r2,1
    cb10:	109bd504 	addi	r2,r2,28500
    cb14:	10800017 	ldw	r2,0(r2)
    cb18:	10000815 	stw	zero,32(r2)
    cb1c:	e0bff717 	ldw	r2,-36(fp)
    cb20:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cb24:	e0bffc17 	ldw	r2,-16(fp)
    cb28:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
    cb2c:	e037883a 	mov	sp,fp
    cb30:	dfc00117 	ldw	ra,4(sp)
    cb34:	df000017 	ldw	fp,0(sp)
    cb38:	dec00204 	addi	sp,sp,8
    cb3c:	f800283a 	ret

0000cb40 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    cb40:	defff604 	addi	sp,sp,-40
    cb44:	dfc00915 	stw	ra,36(sp)
    cb48:	df000815 	stw	fp,32(sp)
    cb4c:	df000804 	addi	fp,sp,32
    cb50:	e13ffd15 	stw	r4,-12(fp)
    cb54:	2805883a 	mov	r2,r5
    cb58:	e1bfff15 	stw	r6,-4(fp)
    cb5c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    cb60:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    cb64:	e0bfff17 	ldw	r2,-4(fp)
    cb68:	1000021e 	bne	r2,zero,cb74 <OSSemPendAbort+0x34>
        return (0);
    cb6c:	0005883a 	mov	r2,zero
    cb70:	00004906 	br	cc98 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    cb74:	e0bffd17 	ldw	r2,-12(fp)
    cb78:	1000051e 	bne	r2,zero,cb90 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    cb7c:	e0bfff17 	ldw	r2,-4(fp)
    cb80:	00c00104 	movi	r3,4
    cb84:	10c00005 	stb	r3,0(r2)
        return (0);
    cb88:	0005883a 	mov	r2,zero
    cb8c:	00004206 	br	cc98 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    cb90:	e0bffd17 	ldw	r2,-12(fp)
    cb94:	10800003 	ldbu	r2,0(r2)
    cb98:	10803fcc 	andi	r2,r2,255
    cb9c:	108000e0 	cmpeqi	r2,r2,3
    cba0:	1000051e 	bne	r2,zero,cbb8 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    cba4:	e0bfff17 	ldw	r2,-4(fp)
    cba8:	00c00044 	movi	r3,1
    cbac:	10c00005 	stb	r3,0(r2)
        return (0);
    cbb0:	0005883a 	mov	r2,zero
    cbb4:	00003806 	br	cc98 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cbb8:	0005303a 	rdctl	r2,status
    cbbc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cbc0:	e0fffa17 	ldw	r3,-24(fp)
    cbc4:	00bfff84 	movi	r2,-2
    cbc8:	1884703a 	and	r2,r3,r2
    cbcc:	1001703a 	wrctl	status,r2
  
  return context;
    cbd0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    cbd4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    cbd8:	e0bffd17 	ldw	r2,-12(fp)
    cbdc:	10800283 	ldbu	r2,10(r2)
    cbe0:	10803fcc 	andi	r2,r2,255
    cbe4:	10002526 	beq	r2,zero,cc7c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
    cbe8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    cbec:	e0bffe03 	ldbu	r2,-8(fp)
    cbf0:	10800060 	cmpeqi	r2,r2,1
    cbf4:	10000e26 	beq	r2,zero,cc30 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    cbf8:	00000806 	br	cc1c <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    cbfc:	e13ffd17 	ldw	r4,-12(fp)
    cc00:	000b883a 	mov	r5,zero
    cc04:	01800044 	movi	r6,1
    cc08:	01c00084 	movi	r7,2
    cc0c:	000750c0 	call	750c <OS_EventTaskRdy>
                     nbr_tasks++;
    cc10:	e0bff803 	ldbu	r2,-32(fp)
    cc14:	10800044 	addi	r2,r2,1
    cc18:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    cc1c:	e0bffd17 	ldw	r2,-12(fp)
    cc20:	10800283 	ldbu	r2,10(r2)
    cc24:	10803fcc 	andi	r2,r2,255
    cc28:	103ff41e 	bne	r2,zero,cbfc <__alt_mem_Flash_flash_data+0xf400cbfc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    cc2c:	00000906 	br	cc54 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    cc30:	e13ffd17 	ldw	r4,-12(fp)
    cc34:	000b883a 	mov	r5,zero
    cc38:	01800044 	movi	r6,1
    cc3c:	01c00084 	movi	r7,2
    cc40:	000750c0 	call	750c <OS_EventTaskRdy>
                 nbr_tasks++;
    cc44:	e0bff803 	ldbu	r2,-32(fp)
    cc48:	10800044 	addi	r2,r2,1
    cc4c:	e0bff805 	stb	r2,-32(fp)
                 break;
    cc50:	0001883a 	nop
    cc54:	e0bff917 	ldw	r2,-28(fp)
    cc58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cc5c:	e0bffb17 	ldw	r2,-20(fp)
    cc60:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    cc64:	0007f240 	call	7f24 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    cc68:	e0bfff17 	ldw	r2,-4(fp)
    cc6c:	00c00384 	movi	r3,14
    cc70:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    cc74:	e0bff803 	ldbu	r2,-32(fp)
    cc78:	00000706 	br	cc98 <OSSemPendAbort+0x158>
    cc7c:	e0bff917 	ldw	r2,-28(fp)
    cc80:	e0bffc15 	stw	r2,-16(fp)
    cc84:	e0bffc17 	ldw	r2,-16(fp)
    cc88:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    cc8c:	e0bfff17 	ldw	r2,-4(fp)
    cc90:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    cc94:	0005883a 	mov	r2,zero
}
    cc98:	e037883a 	mov	sp,fp
    cc9c:	dfc00117 	ldw	ra,4(sp)
    cca0:	df000017 	ldw	fp,0(sp)
    cca4:	dec00204 	addi	sp,sp,8
    cca8:	f800283a 	ret

0000ccac <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    ccac:	defff804 	addi	sp,sp,-32
    ccb0:	dfc00715 	stw	ra,28(sp)
    ccb4:	df000615 	stw	fp,24(sp)
    ccb8:	df000604 	addi	fp,sp,24
    ccbc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    ccc0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    ccc4:	e0bfff17 	ldw	r2,-4(fp)
    ccc8:	1000021e 	bne	r2,zero,ccd4 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    cccc:	00800104 	movi	r2,4
    ccd0:	00003506 	br	cda8 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    ccd4:	e0bfff17 	ldw	r2,-4(fp)
    ccd8:	10800003 	ldbu	r2,0(r2)
    ccdc:	10803fcc 	andi	r2,r2,255
    cce0:	108000e0 	cmpeqi	r2,r2,3
    cce4:	1000021e 	bne	r2,zero,ccf0 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
    cce8:	00800044 	movi	r2,1
    ccec:	00002e06 	br	cda8 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ccf0:	0005303a 	rdctl	r2,status
    ccf4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ccf8:	e0fffb17 	ldw	r3,-20(fp)
    ccfc:	00bfff84 	movi	r2,-2
    cd00:	1884703a 	and	r2,r3,r2
    cd04:	1001703a 	wrctl	status,r2
  
  return context;
    cd08:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    cd0c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    cd10:	e0bfff17 	ldw	r2,-4(fp)
    cd14:	10800283 	ldbu	r2,10(r2)
    cd18:	10803fcc 	andi	r2,r2,255
    cd1c:	10000c26 	beq	r2,zero,cd50 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    cd20:	e13fff17 	ldw	r4,-4(fp)
    cd24:	000b883a 	mov	r5,zero
    cd28:	01800044 	movi	r6,1
    cd2c:	000f883a 	mov	r7,zero
    cd30:	000750c0 	call	750c <OS_EventTaskRdy>
    cd34:	e0bffa17 	ldw	r2,-24(fp)
    cd38:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cd3c:	e0bffc17 	ldw	r2,-16(fp)
    cd40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    cd44:	0007f240 	call	7f24 <OS_Sched>
        return (OS_ERR_NONE);
    cd48:	0005883a 	mov	r2,zero
    cd4c:	00001606 	br	cda8 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    cd50:	e0bfff17 	ldw	r2,-4(fp)
    cd54:	1080020b 	ldhu	r2,8(r2)
    cd58:	10ffffcc 	andi	r3,r2,65535
    cd5c:	00bfffd4 	movui	r2,65535
    cd60:	18800c26 	beq	r3,r2,cd94 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    cd64:	e0bfff17 	ldw	r2,-4(fp)
    cd68:	1080020b 	ldhu	r2,8(r2)
    cd6c:	10800044 	addi	r2,r2,1
    cd70:	1007883a 	mov	r3,r2
    cd74:	e0bfff17 	ldw	r2,-4(fp)
    cd78:	10c0020d 	sth	r3,8(r2)
    cd7c:	e0bffa17 	ldw	r2,-24(fp)
    cd80:	e0bffd15 	stw	r2,-12(fp)
    cd84:	e0bffd17 	ldw	r2,-12(fp)
    cd88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    cd8c:	0005883a 	mov	r2,zero
    cd90:	00000506 	br	cda8 <OSSemPost+0xfc>
    cd94:	e0bffa17 	ldw	r2,-24(fp)
    cd98:	e0bffe15 	stw	r2,-8(fp)
    cd9c:	e0bffe17 	ldw	r2,-8(fp)
    cda0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    cda4:	00800c84 	movi	r2,50
}
    cda8:	e037883a 	mov	sp,fp
    cdac:	dfc00117 	ldw	ra,4(sp)
    cdb0:	df000017 	ldw	fp,0(sp)
    cdb4:	dec00204 	addi	sp,sp,8
    cdb8:	f800283a 	ret

0000cdbc <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    cdbc:	defff704 	addi	sp,sp,-36
    cdc0:	df000815 	stw	fp,32(sp)
    cdc4:	df000804 	addi	fp,sp,32
    cdc8:	e13ffe15 	stw	r4,-8(fp)
    cdcc:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    cdd0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    cdd4:	e0bffe17 	ldw	r2,-8(fp)
    cdd8:	1000021e 	bne	r2,zero,cde4 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    cddc:	00800104 	movi	r2,4
    cde0:	00003606 	br	cebc <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    cde4:	e0bfff17 	ldw	r2,-4(fp)
    cde8:	1000021e 	bne	r2,zero,cdf4 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    cdec:	00800244 	movi	r2,9
    cdf0:	00003206 	br	cebc <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    cdf4:	e0bffe17 	ldw	r2,-8(fp)
    cdf8:	10800003 	ldbu	r2,0(r2)
    cdfc:	10803fcc 	andi	r2,r2,255
    ce00:	108000e0 	cmpeqi	r2,r2,3
    ce04:	1000021e 	bne	r2,zero,ce10 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    ce08:	00800044 	movi	r2,1
    ce0c:	00002b06 	br	cebc <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ce10:	0005303a 	rdctl	r2,status
    ce14:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ce18:	e0fffc17 	ldw	r3,-16(fp)
    ce1c:	00bfff84 	movi	r2,-2
    ce20:	1884703a 	and	r2,r3,r2
    ce24:	1001703a 	wrctl	status,r2
  
  return context;
    ce28:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    ce2c:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    ce30:	e0bffe17 	ldw	r2,-8(fp)
    ce34:	10c00283 	ldbu	r3,10(r2)
    ce38:	e0bfff17 	ldw	r2,-4(fp)
    ce3c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
    ce40:	e0bffe17 	ldw	r2,-8(fp)
    ce44:	108002c4 	addi	r2,r2,11
    ce48:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    ce4c:	e0bfff17 	ldw	r2,-4(fp)
    ce50:	10800084 	addi	r2,r2,2
    ce54:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    ce58:	e03ffa05 	stb	zero,-24(fp)
    ce5c:	00000b06 	br	ce8c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
    ce60:	e0bff917 	ldw	r2,-28(fp)
    ce64:	10c00044 	addi	r3,r2,1
    ce68:	e0fff915 	stw	r3,-28(fp)
    ce6c:	e0fff817 	ldw	r3,-32(fp)
    ce70:	19000044 	addi	r4,r3,1
    ce74:	e13ff815 	stw	r4,-32(fp)
    ce78:	18c00003 	ldbu	r3,0(r3)
    ce7c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    ce80:	e0bffa03 	ldbu	r2,-24(fp)
    ce84:	10800044 	addi	r2,r2,1
    ce88:	e0bffa05 	stb	r2,-24(fp)
    ce8c:	e0bffa03 	ldbu	r2,-24(fp)
    ce90:	108000f0 	cmpltui	r2,r2,3
    ce94:	103ff21e 	bne	r2,zero,ce60 <__alt_mem_Flash_flash_data+0xf400ce60>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    ce98:	e0bffe17 	ldw	r2,-8(fp)
    ce9c:	10c0020b 	ldhu	r3,8(r2)
    cea0:	e0bfff17 	ldw	r2,-4(fp)
    cea4:	10c0000d 	sth	r3,0(r2)
    cea8:	e0bffb17 	ldw	r2,-20(fp)
    ceac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ceb0:	e0bffd17 	ldw	r2,-12(fp)
    ceb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    ceb8:	0005883a 	mov	r2,zero
}
    cebc:	e037883a 	mov	sp,fp
    cec0:	df000017 	ldw	fp,0(sp)
    cec4:	dec00104 	addi	sp,sp,4
    cec8:	f800283a 	ret

0000cecc <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    cecc:	defff904 	addi	sp,sp,-28
    ced0:	df000615 	stw	fp,24(sp)
    ced4:	df000604 	addi	fp,sp,24
    ced8:	e13ffd15 	stw	r4,-12(fp)
    cedc:	2805883a 	mov	r2,r5
    cee0:	e1bfff15 	stw	r6,-4(fp)
    cee4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    cee8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    ceec:	e0bfff17 	ldw	r2,-4(fp)
    cef0:	1000011e 	bne	r2,zero,cef8 <OSSemSet+0x2c>
        return;
    cef4:	00003006 	br	cfb8 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    cef8:	e0bffd17 	ldw	r2,-12(fp)
    cefc:	1000041e 	bne	r2,zero,cf10 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    cf00:	e0bfff17 	ldw	r2,-4(fp)
    cf04:	00c00104 	movi	r3,4
    cf08:	10c00005 	stb	r3,0(r2)
        return;
    cf0c:	00002a06 	br	cfb8 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    cf10:	e0bffd17 	ldw	r2,-12(fp)
    cf14:	10800003 	ldbu	r2,0(r2)
    cf18:	10803fcc 	andi	r2,r2,255
    cf1c:	108000e0 	cmpeqi	r2,r2,3
    cf20:	1000041e 	bne	r2,zero,cf34 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    cf24:	e0bfff17 	ldw	r2,-4(fp)
    cf28:	00c00044 	movi	r3,1
    cf2c:	10c00005 	stb	r3,0(r2)
        return;
    cf30:	00002106 	br	cfb8 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cf34:	0005303a 	rdctl	r2,status
    cf38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cf3c:	e0fffb17 	ldw	r3,-20(fp)
    cf40:	00bfff84 	movi	r2,-2
    cf44:	1884703a 	and	r2,r3,r2
    cf48:	1001703a 	wrctl	status,r2
  
  return context;
    cf4c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    cf50:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
    cf54:	e0bfff17 	ldw	r2,-4(fp)
    cf58:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    cf5c:	e0bffd17 	ldw	r2,-12(fp)
    cf60:	1080020b 	ldhu	r2,8(r2)
    cf64:	10bfffcc 	andi	r2,r2,65535
    cf68:	10000426 	beq	r2,zero,cf7c <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    cf6c:	e0bffd17 	ldw	r2,-12(fp)
    cf70:	e0fffe0b 	ldhu	r3,-8(fp)
    cf74:	10c0020d 	sth	r3,8(r2)
    cf78:	00000b06 	br	cfa8 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    cf7c:	e0bffd17 	ldw	r2,-12(fp)
    cf80:	10800283 	ldbu	r2,10(r2)
    cf84:	10803fcc 	andi	r2,r2,255
    cf88:	1000041e 	bne	r2,zero,cf9c <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    cf8c:	e0bffd17 	ldw	r2,-12(fp)
    cf90:	e0fffe0b 	ldhu	r3,-8(fp)
    cf94:	10c0020d 	sth	r3,8(r2)
    cf98:	00000306 	br	cfa8 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    cf9c:	e0bfff17 	ldw	r2,-4(fp)
    cfa0:	00c01244 	movi	r3,73
    cfa4:	10c00005 	stb	r3,0(r2)
    cfa8:	e0bffa17 	ldw	r2,-24(fp)
    cfac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cfb0:	e0bffc17 	ldw	r2,-16(fp)
    cfb4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
    cfb8:	e037883a 	mov	sp,fp
    cfbc:	df000017 	ldw	fp,0(sp)
    cfc0:	dec00104 	addi	sp,sp,4
    cfc4:	f800283a 	ret

0000cfc8 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    cfc8:	defff104 	addi	sp,sp,-60
    cfcc:	dfc00e15 	stw	ra,56(sp)
    cfd0:	df000d15 	stw	fp,52(sp)
    cfd4:	df000d04 	addi	fp,sp,52
    cfd8:	2007883a 	mov	r3,r4
    cfdc:	2805883a 	mov	r2,r5
    cfe0:	e0fffe05 	stb	r3,-8(fp)
    cfe4:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    cfe8:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    cfec:	e0bffe03 	ldbu	r2,-8(fp)
    cff0:	10800530 	cmpltui	r2,r2,20
    cff4:	1000051e 	bne	r2,zero,d00c <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
    cff8:	e0bffe03 	ldbu	r2,-8(fp)
    cffc:	10803fe0 	cmpeqi	r2,r2,255
    d000:	1000021e 	bne	r2,zero,d00c <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
    d004:	00800a84 	movi	r2,42
    d008:	00013a06 	br	d4f4 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    d00c:	e0bfff03 	ldbu	r2,-4(fp)
    d010:	10800530 	cmpltui	r2,r2,20
    d014:	1000021e 	bne	r2,zero,d020 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
    d018:	00800a84 	movi	r2,42
    d01c:	00013506 	br	d4f4 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d020:	0005303a 	rdctl	r2,status
    d024:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d028:	e0fff917 	ldw	r3,-28(fp)
    d02c:	00bfff84 	movi	r2,-2
    d030:	1884703a 	and	r2,r3,r2
    d034:	1001703a 	wrctl	status,r2
  
  return context;
    d038:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    d03c:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    d040:	e0ffff03 	ldbu	r3,-4(fp)
    d044:	008000b4 	movhi	r2,2
    d048:	109a5004 	addi	r2,r2,26944
    d04c:	18c7883a 	add	r3,r3,r3
    d050:	18c7883a 	add	r3,r3,r3
    d054:	10c5883a 	add	r2,r2,r3
    d058:	10800017 	ldw	r2,0(r2)
    d05c:	10000626 	beq	r2,zero,d078 <OSTaskChangePrio+0xb0>
    d060:	e0bff517 	ldw	r2,-44(fp)
    d064:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d068:	e0bffa17 	ldw	r2,-24(fp)
    d06c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    d070:	00800a04 	movi	r2,40
    d074:	00011f06 	br	d4f4 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    d078:	e0bffe03 	ldbu	r2,-8(fp)
    d07c:	10803fd8 	cmpnei	r2,r2,255
    d080:	1000051e 	bne	r2,zero,d098 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    d084:	00800074 	movhi	r2,1
    d088:	109bd504 	addi	r2,r2,28500
    d08c:	10800017 	ldw	r2,0(r2)
    d090:	10800c83 	ldbu	r2,50(r2)
    d094:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    d098:	e0fffe03 	ldbu	r3,-8(fp)
    d09c:	008000b4 	movhi	r2,2
    d0a0:	109a5004 	addi	r2,r2,26944
    d0a4:	18c7883a 	add	r3,r3,r3
    d0a8:	18c7883a 	add	r3,r3,r3
    d0ac:	10c5883a 	add	r2,r2,r3
    d0b0:	10800017 	ldw	r2,0(r2)
    d0b4:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    d0b8:	e0bff617 	ldw	r2,-40(fp)
    d0bc:	1000061e 	bne	r2,zero,d0d8 <OSTaskChangePrio+0x110>
    d0c0:	e0bff517 	ldw	r2,-44(fp)
    d0c4:	e0bffb15 	stw	r2,-20(fp)
    d0c8:	e0bffb17 	ldw	r2,-20(fp)
    d0cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    d0d0:	00800a44 	movi	r2,41
    d0d4:	00010706 	br	d4f4 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    d0d8:	e0bff617 	ldw	r2,-40(fp)
    d0dc:	10800058 	cmpnei	r2,r2,1
    d0e0:	1000061e 	bne	r2,zero,d0fc <OSTaskChangePrio+0x134>
    d0e4:	e0bff517 	ldw	r2,-44(fp)
    d0e8:	e0bffc15 	stw	r2,-16(fp)
    d0ec:	e0bffc17 	ldw	r2,-16(fp)
    d0f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    d0f4:	008010c4 	movi	r2,67
    d0f8:	0000fe06 	br	d4f4 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    d0fc:	e0bfff03 	ldbu	r2,-4(fp)
    d100:	1004d0fa 	srli	r2,r2,3
    d104:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    d108:	e0bfff03 	ldbu	r2,-4(fp)
    d10c:	108001cc 	andi	r2,r2,7
    d110:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
    d114:	e0bff703 	ldbu	r2,-36(fp)
    d118:	00c00044 	movi	r3,1
    d11c:	1884983a 	sll	r2,r3,r2
    d120:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
    d124:	e0bff743 	ldbu	r2,-35(fp)
    d128:	00c00044 	movi	r3,1
    d12c:	1884983a 	sll	r2,r3,r2
    d130:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    d134:	e0fffe03 	ldbu	r3,-8(fp)
    d138:	008000b4 	movhi	r2,2
    d13c:	109a5004 	addi	r2,r2,26944
    d140:	18c7883a 	add	r3,r3,r3
    d144:	18c7883a 	add	r3,r3,r3
    d148:	10c5883a 	add	r2,r2,r3
    d14c:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    d150:	e0ffff03 	ldbu	r3,-4(fp)
    d154:	008000b4 	movhi	r2,2
    d158:	109a5004 	addi	r2,r2,26944
    d15c:	18c7883a 	add	r3,r3,r3
    d160:	18c7883a 	add	r3,r3,r3
    d164:	10c5883a 	add	r2,r2,r3
    d168:	e0fff617 	ldw	r3,-40(fp)
    d16c:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
    d170:	e0bff617 	ldw	r2,-40(fp)
    d174:	10800d03 	ldbu	r2,52(r2)
    d178:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
    d17c:	e0bff617 	ldw	r2,-40(fp)
    d180:	10800d83 	ldbu	r2,54(r2)
    d184:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    d188:	e0bff617 	ldw	r2,-40(fp)
    d18c:	10800d43 	ldbu	r2,53(r2)
    d190:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    d194:	e0fff803 	ldbu	r3,-32(fp)
    d198:	00800074 	movhi	r2,1
    d19c:	109bd244 	addi	r2,r2,28489
    d1a0:	10c5883a 	add	r2,r2,r3
    d1a4:	10c00003 	ldbu	r3,0(r2)
    d1a8:	e0bff883 	ldbu	r2,-30(fp)
    d1ac:	1884703a 	and	r2,r3,r2
    d1b0:	10803fcc 	andi	r2,r2,255
    d1b4:	10003726 	beq	r2,zero,d294 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
    d1b8:	e0fff803 	ldbu	r3,-32(fp)
    d1bc:	e13ff803 	ldbu	r4,-32(fp)
    d1c0:	00800074 	movhi	r2,1
    d1c4:	109bd244 	addi	r2,r2,28489
    d1c8:	1105883a 	add	r2,r2,r4
    d1cc:	10800003 	ldbu	r2,0(r2)
    d1d0:	1009883a 	mov	r4,r2
    d1d4:	e0bff883 	ldbu	r2,-30(fp)
    d1d8:	0084303a 	nor	r2,zero,r2
    d1dc:	2084703a 	and	r2,r4,r2
    d1e0:	1009883a 	mov	r4,r2
    d1e4:	00800074 	movhi	r2,1
    d1e8:	109bd244 	addi	r2,r2,28489
    d1ec:	10c5883a 	add	r2,r2,r3
    d1f0:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    d1f4:	e0fff803 	ldbu	r3,-32(fp)
    d1f8:	00800074 	movhi	r2,1
    d1fc:	109bd244 	addi	r2,r2,28489
    d200:	10c5883a 	add	r2,r2,r3
    d204:	10800003 	ldbu	r2,0(r2)
    d208:	10803fcc 	andi	r2,r2,255
    d20c:	10000b1e 	bne	r2,zero,d23c <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
    d210:	e0bff843 	ldbu	r2,-31(fp)
    d214:	0084303a 	nor	r2,zero,r2
    d218:	1007883a 	mov	r3,r2
    d21c:	00800074 	movhi	r2,1
    d220:	109bd204 	addi	r2,r2,28488
    d224:	10800003 	ldbu	r2,0(r2)
    d228:	1884703a 	and	r2,r3,r2
    d22c:	1007883a 	mov	r3,r2
    d230:	00800074 	movhi	r2,1
    d234:	109bd204 	addi	r2,r2,28488
    d238:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    d23c:	00800074 	movhi	r2,1
    d240:	109bd204 	addi	r2,r2,28488
    d244:	10c00003 	ldbu	r3,0(r2)
    d248:	e0bff783 	ldbu	r2,-34(fp)
    d24c:	1884b03a 	or	r2,r3,r2
    d250:	1007883a 	mov	r3,r2
    d254:	00800074 	movhi	r2,1
    d258:	109bd204 	addi	r2,r2,28488
    d25c:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
    d260:	e0fff703 	ldbu	r3,-36(fp)
    d264:	e13ff703 	ldbu	r4,-36(fp)
    d268:	00800074 	movhi	r2,1
    d26c:	109bd244 	addi	r2,r2,28489
    d270:	1105883a 	add	r2,r2,r4
    d274:	11000003 	ldbu	r4,0(r2)
    d278:	e0bff7c3 	ldbu	r2,-33(fp)
    d27c:	2084b03a 	or	r2,r4,r2
    d280:	1009883a 	mov	r4,r2
    d284:	00800074 	movhi	r2,1
    d288:	109bd244 	addi	r2,r2,28489
    d28c:	10c5883a 	add	r2,r2,r3
    d290:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    d294:	e0bff617 	ldw	r2,-40(fp)
    d298:	10800717 	ldw	r2,28(r2)
    d29c:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
    d2a0:	e0bff317 	ldw	r2,-52(fp)
    d2a4:	10003326 	beq	r2,zero,d374 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    d2a8:	e0bff803 	ldbu	r2,-32(fp)
    d2ac:	e0fff803 	ldbu	r3,-32(fp)
    d2b0:	e13ff317 	ldw	r4,-52(fp)
    d2b4:	20c7883a 	add	r3,r4,r3
    d2b8:	18c00204 	addi	r3,r3,8
    d2bc:	18c000c3 	ldbu	r3,3(r3)
    d2c0:	1809883a 	mov	r4,r3
    d2c4:	e0fff883 	ldbu	r3,-30(fp)
    d2c8:	00c6303a 	nor	r3,zero,r3
    d2cc:	20c6703a 	and	r3,r4,r3
    d2d0:	1809883a 	mov	r4,r3
    d2d4:	e0fff317 	ldw	r3,-52(fp)
    d2d8:	1885883a 	add	r2,r3,r2
    d2dc:	10800204 	addi	r2,r2,8
    d2e0:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    d2e4:	e0bff803 	ldbu	r2,-32(fp)
    d2e8:	e0fff317 	ldw	r3,-52(fp)
    d2ec:	1885883a 	add	r2,r3,r2
    d2f0:	10800204 	addi	r2,r2,8
    d2f4:	108000c3 	ldbu	r2,3(r2)
    d2f8:	10803fcc 	andi	r2,r2,255
    d2fc:	1000091e 	bne	r2,zero,d324 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
    d300:	e0bff317 	ldw	r2,-52(fp)
    d304:	10800283 	ldbu	r2,10(r2)
    d308:	1007883a 	mov	r3,r2
    d30c:	e0bff843 	ldbu	r2,-31(fp)
    d310:	0084303a 	nor	r2,zero,r2
    d314:	1884703a 	and	r2,r3,r2
    d318:	1007883a 	mov	r3,r2
    d31c:	e0bff317 	ldw	r2,-52(fp)
    d320:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    d324:	e0bff317 	ldw	r2,-52(fp)
    d328:	10c00283 	ldbu	r3,10(r2)
    d32c:	e0bff783 	ldbu	r2,-34(fp)
    d330:	1884b03a 	or	r2,r3,r2
    d334:	1007883a 	mov	r3,r2
    d338:	e0bff317 	ldw	r2,-52(fp)
    d33c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    d340:	e0bff703 	ldbu	r2,-36(fp)
    d344:	e0fff703 	ldbu	r3,-36(fp)
    d348:	e13ff317 	ldw	r4,-52(fp)
    d34c:	20c7883a 	add	r3,r4,r3
    d350:	18c00204 	addi	r3,r3,8
    d354:	190000c3 	ldbu	r4,3(r3)
    d358:	e0fff7c3 	ldbu	r3,-33(fp)
    d35c:	20c6b03a 	or	r3,r4,r3
    d360:	1809883a 	mov	r4,r3
    d364:	e0fff317 	ldw	r3,-52(fp)
    d368:	1885883a 	add	r2,r3,r2
    d36c:	10800204 	addi	r2,r2,8
    d370:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    d374:	e0bff617 	ldw	r2,-40(fp)
    d378:	10800817 	ldw	r2,32(r2)
    d37c:	10004226 	beq	r2,zero,d488 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
    d380:	e0bff617 	ldw	r2,-40(fp)
    d384:	10800817 	ldw	r2,32(r2)
    d388:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
    d38c:	e0bff417 	ldw	r2,-48(fp)
    d390:	10800017 	ldw	r2,0(r2)
    d394:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
    d398:	00003906 	br	d480 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    d39c:	e0bff803 	ldbu	r2,-32(fp)
    d3a0:	e0fff803 	ldbu	r3,-32(fp)
    d3a4:	e13ff317 	ldw	r4,-52(fp)
    d3a8:	20c7883a 	add	r3,r4,r3
    d3ac:	18c00204 	addi	r3,r3,8
    d3b0:	18c000c3 	ldbu	r3,3(r3)
    d3b4:	1809883a 	mov	r4,r3
    d3b8:	e0fff883 	ldbu	r3,-30(fp)
    d3bc:	00c6303a 	nor	r3,zero,r3
    d3c0:	20c6703a 	and	r3,r4,r3
    d3c4:	1809883a 	mov	r4,r3
    d3c8:	e0fff317 	ldw	r3,-52(fp)
    d3cc:	1885883a 	add	r2,r3,r2
    d3d0:	10800204 	addi	r2,r2,8
    d3d4:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    d3d8:	e0bff803 	ldbu	r2,-32(fp)
    d3dc:	e0fff317 	ldw	r3,-52(fp)
    d3e0:	1885883a 	add	r2,r3,r2
    d3e4:	10800204 	addi	r2,r2,8
    d3e8:	108000c3 	ldbu	r2,3(r2)
    d3ec:	10803fcc 	andi	r2,r2,255
    d3f0:	1000091e 	bne	r2,zero,d418 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
    d3f4:	e0bff317 	ldw	r2,-52(fp)
    d3f8:	10800283 	ldbu	r2,10(r2)
    d3fc:	1007883a 	mov	r3,r2
    d400:	e0bff843 	ldbu	r2,-31(fp)
    d404:	0084303a 	nor	r2,zero,r2
    d408:	1884703a 	and	r2,r3,r2
    d40c:	1007883a 	mov	r3,r2
    d410:	e0bff317 	ldw	r2,-52(fp)
    d414:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    d418:	e0bff317 	ldw	r2,-52(fp)
    d41c:	10c00283 	ldbu	r3,10(r2)
    d420:	e0bff783 	ldbu	r2,-34(fp)
    d424:	1884b03a 	or	r2,r3,r2
    d428:	1007883a 	mov	r3,r2
    d42c:	e0bff317 	ldw	r2,-52(fp)
    d430:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    d434:	e0bff703 	ldbu	r2,-36(fp)
    d438:	e0fff703 	ldbu	r3,-36(fp)
    d43c:	e13ff317 	ldw	r4,-52(fp)
    d440:	20c7883a 	add	r3,r4,r3
    d444:	18c00204 	addi	r3,r3,8
    d448:	190000c3 	ldbu	r4,3(r3)
    d44c:	e0fff7c3 	ldbu	r3,-33(fp)
    d450:	20c6b03a 	or	r3,r4,r3
    d454:	1809883a 	mov	r4,r3
    d458:	e0fff317 	ldw	r3,-52(fp)
    d45c:	1885883a 	add	r2,r3,r2
    d460:	10800204 	addi	r2,r2,8
    d464:	110000c5 	stb	r4,3(r2)
            pevents++;
    d468:	e0bff417 	ldw	r2,-48(fp)
    d46c:	10800104 	addi	r2,r2,4
    d470:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
    d474:	e0bff417 	ldw	r2,-48(fp)
    d478:	10800017 	ldw	r2,0(r2)
    d47c:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
    d480:	e0bff317 	ldw	r2,-52(fp)
    d484:	103fc51e 	bne	r2,zero,d39c <__alt_mem_Flash_flash_data+0xf400d39c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    d488:	e0bff617 	ldw	r2,-40(fp)
    d48c:	e0ffff03 	ldbu	r3,-4(fp)
    d490:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
    d494:	e0bff617 	ldw	r2,-40(fp)
    d498:	e0fff703 	ldbu	r3,-36(fp)
    d49c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
    d4a0:	e0bff617 	ldw	r2,-40(fp)
    d4a4:	e0fff743 	ldbu	r3,-35(fp)
    d4a8:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
    d4ac:	e0bff617 	ldw	r2,-40(fp)
    d4b0:	e0fff783 	ldbu	r3,-34(fp)
    d4b4:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
    d4b8:	e0bff617 	ldw	r2,-40(fp)
    d4bc:	e0fff7c3 	ldbu	r3,-33(fp)
    d4c0:	10c00d45 	stb	r3,53(r2)
    d4c4:	e0bff517 	ldw	r2,-44(fp)
    d4c8:	e0bffd15 	stw	r2,-12(fp)
    d4cc:	e0bffd17 	ldw	r2,-12(fp)
    d4d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    d4d4:	00800074 	movhi	r2,1
    d4d8:	109bc644 	addi	r2,r2,28441
    d4dc:	10800003 	ldbu	r2,0(r2)
    d4e0:	10803fcc 	andi	r2,r2,255
    d4e4:	10800058 	cmpnei	r2,r2,1
    d4e8:	1000011e 	bne	r2,zero,d4f0 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
    d4ec:	0007f240 	call	7f24 <OS_Sched>
    }
    return (OS_ERR_NONE);
    d4f0:	0005883a 	mov	r2,zero
}
    d4f4:	e037883a 	mov	sp,fp
    d4f8:	dfc00117 	ldw	ra,4(sp)
    d4fc:	df000017 	ldw	fp,0(sp)
    d500:	dec00204 	addi	sp,sp,8
    d504:	f800283a 	ret

0000d508 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    d508:	deffee04 	addi	sp,sp,-72
    d50c:	dfc01115 	stw	ra,68(sp)
    d510:	df001015 	stw	fp,64(sp)
    d514:	df001004 	addi	fp,sp,64
    d518:	e13ffc15 	stw	r4,-16(fp)
    d51c:	e17ffd15 	stw	r5,-12(fp)
    d520:	e1bffe15 	stw	r6,-8(fp)
    d524:	3805883a 	mov	r2,r7
    d528:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    d52c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    d530:	e0bfff03 	ldbu	r2,-4(fp)
    d534:	10800570 	cmpltui	r2,r2,21
    d538:	1000021e 	bne	r2,zero,d544 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    d53c:	00800a84 	movi	r2,42
    d540:	00005b06 	br	d6b0 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d544:	0005303a 	rdctl	r2,status
    d548:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d54c:	e0fff617 	ldw	r3,-40(fp)
    d550:	00bfff84 	movi	r2,-2
    d554:	1884703a 	and	r2,r3,r2
    d558:	1001703a 	wrctl	status,r2
  
  return context;
    d55c:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    d560:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    d564:	00800074 	movhi	r2,1
    d568:	109bd404 	addi	r2,r2,28496
    d56c:	10800003 	ldbu	r2,0(r2)
    d570:	10803fcc 	andi	r2,r2,255
    d574:	10000626 	beq	r2,zero,d590 <OSTaskCreate+0x88>
    d578:	e0bff317 	ldw	r2,-52(fp)
    d57c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d580:	e0bff717 	ldw	r2,-36(fp)
    d584:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    d588:	00800f04 	movi	r2,60
    d58c:	00004806 	br	d6b0 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    d590:	e0ffff03 	ldbu	r3,-4(fp)
    d594:	008000b4 	movhi	r2,2
    d598:	109a5004 	addi	r2,r2,26944
    d59c:	18c7883a 	add	r3,r3,r3
    d5a0:	18c7883a 	add	r3,r3,r3
    d5a4:	10c5883a 	add	r2,r2,r3
    d5a8:	10800017 	ldw	r2,0(r2)
    d5ac:	10003b1e 	bne	r2,zero,d69c <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    d5b0:	e0ffff03 	ldbu	r3,-4(fp)
    d5b4:	008000b4 	movhi	r2,2
    d5b8:	109a5004 	addi	r2,r2,26944
    d5bc:	18c7883a 	add	r3,r3,r3
    d5c0:	18c7883a 	add	r3,r3,r3
    d5c4:	10c5883a 	add	r2,r2,r3
    d5c8:	00c00044 	movi	r3,1
    d5cc:	10c00015 	stw	r3,0(r2)
    d5d0:	e0bff317 	ldw	r2,-52(fp)
    d5d4:	e0bff815 	stw	r2,-32(fp)
    d5d8:	e0bff817 	ldw	r2,-32(fp)
    d5dc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    d5e0:	e13ffc17 	ldw	r4,-16(fp)
    d5e4:	e17ffd17 	ldw	r5,-12(fp)
    d5e8:	e1bffe17 	ldw	r6,-8(fp)
    d5ec:	000f883a 	mov	r7,zero
    d5f0:	00121fc0 	call	121fc <OSTaskStkInit>
    d5f4:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    d5f8:	e0bfff03 	ldbu	r2,-4(fp)
    d5fc:	d8000015 	stw	zero,0(sp)
    d600:	d8000115 	stw	zero,4(sp)
    d604:	d8000215 	stw	zero,8(sp)
    d608:	1009883a 	mov	r4,r2
    d60c:	e17ff417 	ldw	r5,-48(fp)
    d610:	000d883a 	mov	r6,zero
    d614:	000f883a 	mov	r7,zero
    d618:	00083280 	call	8328 <OS_TCBInit>
    d61c:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
    d620:	e0bff503 	ldbu	r2,-44(fp)
    d624:	1000081e 	bne	r2,zero,d648 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    d628:	00800074 	movhi	r2,1
    d62c:	109bc644 	addi	r2,r2,28441
    d630:	10800003 	ldbu	r2,0(r2)
    d634:	10803fcc 	andi	r2,r2,255
    d638:	10800058 	cmpnei	r2,r2,1
    d63c:	1000151e 	bne	r2,zero,d694 <OSTaskCreate+0x18c>
                OS_Sched();
    d640:	0007f240 	call	7f24 <OS_Sched>
    d644:	00001306 	br	d694 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d648:	0005303a 	rdctl	r2,status
    d64c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d650:	e0fff917 	ldw	r3,-28(fp)
    d654:	00bfff84 	movi	r2,-2
    d658:	1884703a 	and	r2,r3,r2
    d65c:	1001703a 	wrctl	status,r2
  
  return context;
    d660:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    d664:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    d668:	e0ffff03 	ldbu	r3,-4(fp)
    d66c:	008000b4 	movhi	r2,2
    d670:	109a5004 	addi	r2,r2,26944
    d674:	18c7883a 	add	r3,r3,r3
    d678:	18c7883a 	add	r3,r3,r3
    d67c:	10c5883a 	add	r2,r2,r3
    d680:	10000015 	stw	zero,0(r2)
    d684:	e0bff317 	ldw	r2,-52(fp)
    d688:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d68c:	e0bffa17 	ldw	r2,-24(fp)
    d690:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    d694:	e0bff503 	ldbu	r2,-44(fp)
    d698:	00000506 	br	d6b0 <OSTaskCreate+0x1a8>
    d69c:	e0bff317 	ldw	r2,-52(fp)
    d6a0:	e0bffb15 	stw	r2,-20(fp)
    d6a4:	e0bffb17 	ldw	r2,-20(fp)
    d6a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    d6ac:	00800a04 	movi	r2,40
}
    d6b0:	e037883a 	mov	sp,fp
    d6b4:	dfc00117 	ldw	ra,4(sp)
    d6b8:	df000017 	ldw	fp,0(sp)
    d6bc:	dec00204 	addi	sp,sp,8
    d6c0:	f800283a 	ret

0000d6c4 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    d6c4:	deffec04 	addi	sp,sp,-80
    d6c8:	dfc01315 	stw	ra,76(sp)
    d6cc:	df001215 	stw	fp,72(sp)
    d6d0:	df001204 	addi	fp,sp,72
    d6d4:	e13ffa15 	stw	r4,-24(fp)
    d6d8:	e17ffb15 	stw	r5,-20(fp)
    d6dc:	e1bffc15 	stw	r6,-16(fp)
    d6e0:	3809883a 	mov	r4,r7
    d6e4:	e0c00217 	ldw	r3,8(fp)
    d6e8:	e0800617 	ldw	r2,24(fp)
    d6ec:	e13ffd05 	stb	r4,-12(fp)
    d6f0:	e0fffe0d 	sth	r3,-8(fp)
    d6f4:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    d6f8:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    d6fc:	e0bffd03 	ldbu	r2,-12(fp)
    d700:	10800570 	cmpltui	r2,r2,21
    d704:	1000021e 	bne	r2,zero,d710 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    d708:	00800a84 	movi	r2,42
    d70c:	00006306 	br	d89c <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d710:	0005303a 	rdctl	r2,status
    d714:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d718:	e0fff417 	ldw	r3,-48(fp)
    d71c:	00bfff84 	movi	r2,-2
    d720:	1884703a 	and	r2,r3,r2
    d724:	1001703a 	wrctl	status,r2
  
  return context;
    d728:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    d72c:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    d730:	00800074 	movhi	r2,1
    d734:	109bd404 	addi	r2,r2,28496
    d738:	10800003 	ldbu	r2,0(r2)
    d73c:	10803fcc 	andi	r2,r2,255
    d740:	10000626 	beq	r2,zero,d75c <OSTaskCreateExt+0x98>
    d744:	e0bff117 	ldw	r2,-60(fp)
    d748:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d74c:	e0bff517 	ldw	r2,-44(fp)
    d750:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    d754:	00800f04 	movi	r2,60
    d758:	00005006 	br	d89c <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    d75c:	e0fffd03 	ldbu	r3,-12(fp)
    d760:	008000b4 	movhi	r2,2
    d764:	109a5004 	addi	r2,r2,26944
    d768:	18c7883a 	add	r3,r3,r3
    d76c:	18c7883a 	add	r3,r3,r3
    d770:	10c5883a 	add	r2,r2,r3
    d774:	10800017 	ldw	r2,0(r2)
    d778:	1000431e 	bne	r2,zero,d888 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    d77c:	e0fffd03 	ldbu	r3,-12(fp)
    d780:	008000b4 	movhi	r2,2
    d784:	109a5004 	addi	r2,r2,26944
    d788:	18c7883a 	add	r3,r3,r3
    d78c:	18c7883a 	add	r3,r3,r3
    d790:	10c5883a 	add	r2,r2,r3
    d794:	00c00044 	movi	r3,1
    d798:	10c00015 	stw	r3,0(r2)
    d79c:	e0bff117 	ldw	r2,-60(fp)
    d7a0:	e0bff615 	stw	r2,-40(fp)
    d7a4:	e0bff617 	ldw	r2,-40(fp)
    d7a8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    d7ac:	e0bfff0b 	ldhu	r2,-4(fp)
    d7b0:	e1000317 	ldw	r4,12(fp)
    d7b4:	e1400417 	ldw	r5,16(fp)
    d7b8:	100d883a 	mov	r6,r2
    d7bc:	000e8500 	call	e850 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    d7c0:	e0bfff0b 	ldhu	r2,-4(fp)
    d7c4:	e13ffa17 	ldw	r4,-24(fp)
    d7c8:	e17ffb17 	ldw	r5,-20(fp)
    d7cc:	e1bffc17 	ldw	r6,-16(fp)
    d7d0:	100f883a 	mov	r7,r2
    d7d4:	00121fc0 	call	121fc <OSTaskStkInit>
    d7d8:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    d7dc:	e13ffd03 	ldbu	r4,-12(fp)
    d7e0:	e1fffe0b 	ldhu	r7,-8(fp)
    d7e4:	e0bfff0b 	ldhu	r2,-4(fp)
    d7e8:	e0c00417 	ldw	r3,16(fp)
    d7ec:	d8c00015 	stw	r3,0(sp)
    d7f0:	e0c00517 	ldw	r3,20(fp)
    d7f4:	d8c00115 	stw	r3,4(sp)
    d7f8:	d8800215 	stw	r2,8(sp)
    d7fc:	e17ff217 	ldw	r5,-56(fp)
    d800:	e1800317 	ldw	r6,12(fp)
    d804:	00083280 	call	8328 <OS_TCBInit>
    d808:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
    d80c:	e0bff303 	ldbu	r2,-52(fp)
    d810:	1000081e 	bne	r2,zero,d834 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    d814:	00800074 	movhi	r2,1
    d818:	109bc644 	addi	r2,r2,28441
    d81c:	10800003 	ldbu	r2,0(r2)
    d820:	10803fcc 	andi	r2,r2,255
    d824:	10800058 	cmpnei	r2,r2,1
    d828:	1000151e 	bne	r2,zero,d880 <OSTaskCreateExt+0x1bc>
                OS_Sched();
    d82c:	0007f240 	call	7f24 <OS_Sched>
    d830:	00001306 	br	d880 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d834:	0005303a 	rdctl	r2,status
    d838:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d83c:	e0fff717 	ldw	r3,-36(fp)
    d840:	00bfff84 	movi	r2,-2
    d844:	1884703a 	and	r2,r3,r2
    d848:	1001703a 	wrctl	status,r2
  
  return context;
    d84c:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    d850:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    d854:	e0fffd03 	ldbu	r3,-12(fp)
    d858:	008000b4 	movhi	r2,2
    d85c:	109a5004 	addi	r2,r2,26944
    d860:	18c7883a 	add	r3,r3,r3
    d864:	18c7883a 	add	r3,r3,r3
    d868:	10c5883a 	add	r2,r2,r3
    d86c:	10000015 	stw	zero,0(r2)
    d870:	e0bff117 	ldw	r2,-60(fp)
    d874:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d878:	e0bff817 	ldw	r2,-32(fp)
    d87c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    d880:	e0bff303 	ldbu	r2,-52(fp)
    d884:	00000506 	br	d89c <OSTaskCreateExt+0x1d8>
    d888:	e0bff117 	ldw	r2,-60(fp)
    d88c:	e0bff915 	stw	r2,-28(fp)
    d890:	e0bff917 	ldw	r2,-28(fp)
    d894:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    d898:	00800a04 	movi	r2,40
}
    d89c:	e037883a 	mov	sp,fp
    d8a0:	dfc00117 	ldw	ra,4(sp)
    d8a4:	df000017 	ldw	fp,0(sp)
    d8a8:	dec00204 	addi	sp,sp,8
    d8ac:	f800283a 	ret

0000d8b0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    d8b0:	defff404 	addi	sp,sp,-48
    d8b4:	dfc00b15 	stw	ra,44(sp)
    d8b8:	df000a15 	stw	fp,40(sp)
    d8bc:	df000a04 	addi	fp,sp,40
    d8c0:	2005883a 	mov	r2,r4
    d8c4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    d8c8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    d8cc:	00800074 	movhi	r2,1
    d8d0:	109bd404 	addi	r2,r2,28496
    d8d4:	10800003 	ldbu	r2,0(r2)
    d8d8:	10803fcc 	andi	r2,r2,255
    d8dc:	10000226 	beq	r2,zero,d8e8 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
    d8e0:	00801004 	movi	r2,64
    d8e4:	0000e506 	br	dc7c <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    d8e8:	e0bfff03 	ldbu	r2,-4(fp)
    d8ec:	10800518 	cmpnei	r2,r2,20
    d8f0:	1000021e 	bne	r2,zero,d8fc <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
    d8f4:	00800f84 	movi	r2,62
    d8f8:	0000e006 	br	dc7c <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    d8fc:	e0bfff03 	ldbu	r2,-4(fp)
    d900:	10800530 	cmpltui	r2,r2,20
    d904:	1000051e 	bne	r2,zero,d91c <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
    d908:	e0bfff03 	ldbu	r2,-4(fp)
    d90c:	10803fe0 	cmpeqi	r2,r2,255
    d910:	1000021e 	bne	r2,zero,d91c <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
    d914:	00800a84 	movi	r2,42
    d918:	0000d806 	br	dc7c <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d91c:	0005303a 	rdctl	r2,status
    d920:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d924:	e0fff917 	ldw	r3,-28(fp)
    d928:	00bfff84 	movi	r2,-2
    d92c:	1884703a 	and	r2,r3,r2
    d930:	1001703a 	wrctl	status,r2
  
  return context;
    d934:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    d938:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    d93c:	e0bfff03 	ldbu	r2,-4(fp)
    d940:	10803fd8 	cmpnei	r2,r2,255
    d944:	1000051e 	bne	r2,zero,d95c <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    d948:	00800074 	movhi	r2,1
    d94c:	109bd504 	addi	r2,r2,28500
    d950:	10800017 	ldw	r2,0(r2)
    d954:	10800c83 	ldbu	r2,50(r2)
    d958:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    d95c:	e0ffff03 	ldbu	r3,-4(fp)
    d960:	008000b4 	movhi	r2,2
    d964:	109a5004 	addi	r2,r2,26944
    d968:	18c7883a 	add	r3,r3,r3
    d96c:	18c7883a 	add	r3,r3,r3
    d970:	10c5883a 	add	r2,r2,r3
    d974:	10800017 	ldw	r2,0(r2)
    d978:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    d97c:	e0bff717 	ldw	r2,-36(fp)
    d980:	1000061e 	bne	r2,zero,d99c <OSTaskDel+0xec>
    d984:	e0bff617 	ldw	r2,-40(fp)
    d988:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d98c:	e0bffa17 	ldw	r2,-24(fp)
    d990:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    d994:	008010c4 	movi	r2,67
    d998:	0000b806 	br	dc7c <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    d99c:	e0bff717 	ldw	r2,-36(fp)
    d9a0:	10800058 	cmpnei	r2,r2,1
    d9a4:	1000061e 	bne	r2,zero,d9c0 <OSTaskDel+0x110>
    d9a8:	e0bff617 	ldw	r2,-40(fp)
    d9ac:	e0bffb15 	stw	r2,-20(fp)
    d9b0:	e0bffb17 	ldw	r2,-20(fp)
    d9b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    d9b8:	00800f44 	movi	r2,61
    d9bc:	0000af06 	br	dc7c <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    d9c0:	e0bff717 	ldw	r2,-36(fp)
    d9c4:	10800d03 	ldbu	r2,52(r2)
    d9c8:	10c03fcc 	andi	r3,r2,255
    d9cc:	e0bff717 	ldw	r2,-36(fp)
    d9d0:	10800d03 	ldbu	r2,52(r2)
    d9d4:	11003fcc 	andi	r4,r2,255
    d9d8:	00800074 	movhi	r2,1
    d9dc:	109bd244 	addi	r2,r2,28489
    d9e0:	1105883a 	add	r2,r2,r4
    d9e4:	10800003 	ldbu	r2,0(r2)
    d9e8:	1009883a 	mov	r4,r2
    d9ec:	e0bff717 	ldw	r2,-36(fp)
    d9f0:	10800d43 	ldbu	r2,53(r2)
    d9f4:	0084303a 	nor	r2,zero,r2
    d9f8:	2084703a 	and	r2,r4,r2
    d9fc:	1009883a 	mov	r4,r2
    da00:	00800074 	movhi	r2,1
    da04:	109bd244 	addi	r2,r2,28489
    da08:	10c5883a 	add	r2,r2,r3
    da0c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    da10:	e0bff717 	ldw	r2,-36(fp)
    da14:	10800d03 	ldbu	r2,52(r2)
    da18:	10c03fcc 	andi	r3,r2,255
    da1c:	00800074 	movhi	r2,1
    da20:	109bd244 	addi	r2,r2,28489
    da24:	10c5883a 	add	r2,r2,r3
    da28:	10800003 	ldbu	r2,0(r2)
    da2c:	10803fcc 	andi	r2,r2,255
    da30:	10000c1e 	bne	r2,zero,da64 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    da34:	e0bff717 	ldw	r2,-36(fp)
    da38:	10800d83 	ldbu	r2,54(r2)
    da3c:	0084303a 	nor	r2,zero,r2
    da40:	1007883a 	mov	r3,r2
    da44:	00800074 	movhi	r2,1
    da48:	109bd204 	addi	r2,r2,28488
    da4c:	10800003 	ldbu	r2,0(r2)
    da50:	1884703a 	and	r2,r3,r2
    da54:	1007883a 	mov	r3,r2
    da58:	00800074 	movhi	r2,1
    da5c:	109bd204 	addi	r2,r2,28488
    da60:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    da64:	e0bff717 	ldw	r2,-36(fp)
    da68:	10800717 	ldw	r2,28(r2)
    da6c:	10000526 	beq	r2,zero,da84 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    da70:	e0bff717 	ldw	r2,-36(fp)
    da74:	10800717 	ldw	r2,28(r2)
    da78:	e13ff717 	ldw	r4,-36(fp)
    da7c:	100b883a 	mov	r5,r2
    da80:	00078fc0 	call	78fc <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    da84:	e0bff717 	ldw	r2,-36(fp)
    da88:	10800817 	ldw	r2,32(r2)
    da8c:	10000526 	beq	r2,zero,daa4 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    da90:	e0bff717 	ldw	r2,-36(fp)
    da94:	10800817 	ldw	r2,32(r2)
    da98:	e13ff717 	ldw	r4,-36(fp)
    da9c:	100b883a 	mov	r5,r2
    daa0:	00079b00 	call	79b0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    daa4:	e0bff717 	ldw	r2,-36(fp)
    daa8:	10800a17 	ldw	r2,40(r2)
    daac:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    dab0:	e0bff817 	ldw	r2,-32(fp)
    dab4:	10000226 	beq	r2,zero,dac0 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    dab8:	e13ff817 	ldw	r4,-32(fp)
    dabc:	0009f040 	call	9f04 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    dac0:	e0bff717 	ldw	r2,-36(fp)
    dac4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    dac8:	e0bff717 	ldw	r2,-36(fp)
    dacc:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    dad0:	e0bff717 	ldw	r2,-36(fp)
    dad4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    dad8:	00800074 	movhi	r2,1
    dadc:	109bc604 	addi	r2,r2,28440
    dae0:	10800003 	ldbu	r2,0(r2)
    dae4:	10803fcc 	andi	r2,r2,255
    dae8:	10803fe0 	cmpeqi	r2,r2,255
    daec:	1000081e 	bne	r2,zero,db10 <OSTaskDel+0x260>
        OSLockNesting++;
    daf0:	00800074 	movhi	r2,1
    daf4:	109bc604 	addi	r2,r2,28440
    daf8:	10800003 	ldbu	r2,0(r2)
    dafc:	10800044 	addi	r2,r2,1
    db00:	1007883a 	mov	r3,r2
    db04:	00800074 	movhi	r2,1
    db08:	109bc604 	addi	r2,r2,28440
    db0c:	10c00005 	stb	r3,0(r2)
    db10:	e0bff617 	ldw	r2,-40(fp)
    db14:	e0bffc15 	stw	r2,-16(fp)
    db18:	e0bffc17 	ldw	r2,-16(fp)
    db1c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    db20:	00074f00 	call	74f0 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    db24:	0005303a 	rdctl	r2,status
    db28:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    db2c:	e0fffd17 	ldw	r3,-12(fp)
    db30:	00bfff84 	movi	r2,-2
    db34:	1884703a 	and	r2,r3,r2
    db38:	1001703a 	wrctl	status,r2
  
  return context;
    db3c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    db40:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    db44:	00800074 	movhi	r2,1
    db48:	109bc604 	addi	r2,r2,28440
    db4c:	10800003 	ldbu	r2,0(r2)
    db50:	10803fcc 	andi	r2,r2,255
    db54:	10000826 	beq	r2,zero,db78 <OSTaskDel+0x2c8>
        OSLockNesting--;
    db58:	00800074 	movhi	r2,1
    db5c:	109bc604 	addi	r2,r2,28440
    db60:	10800003 	ldbu	r2,0(r2)
    db64:	10bfffc4 	addi	r2,r2,-1
    db68:	1007883a 	mov	r3,r2
    db6c:	00800074 	movhi	r2,1
    db70:	109bc604 	addi	r2,r2,28440
    db74:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    db78:	e13ff717 	ldw	r4,-36(fp)
    db7c:	00123780 	call	12378 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    db80:	00800074 	movhi	r2,1
    db84:	109bce44 	addi	r2,r2,28473
    db88:	10800003 	ldbu	r2,0(r2)
    db8c:	10bfffc4 	addi	r2,r2,-1
    db90:	1007883a 	mov	r3,r2
    db94:	00800074 	movhi	r2,1
    db98:	109bce44 	addi	r2,r2,28473
    db9c:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    dba0:	e0ffff03 	ldbu	r3,-4(fp)
    dba4:	008000b4 	movhi	r2,2
    dba8:	109a5004 	addi	r2,r2,26944
    dbac:	18c7883a 	add	r3,r3,r3
    dbb0:	18c7883a 	add	r3,r3,r3
    dbb4:	10c5883a 	add	r2,r2,r3
    dbb8:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    dbbc:	e0bff717 	ldw	r2,-36(fp)
    dbc0:	10800617 	ldw	r2,24(r2)
    dbc4:	1000091e 	bne	r2,zero,dbec <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    dbc8:	e0bff717 	ldw	r2,-36(fp)
    dbcc:	10800517 	ldw	r2,20(r2)
    dbd0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    dbd4:	e0bff717 	ldw	r2,-36(fp)
    dbd8:	10c00517 	ldw	r3,20(r2)
    dbdc:	00800074 	movhi	r2,1
    dbe0:	109bc904 	addi	r2,r2,28452
    dbe4:	10c00015 	stw	r3,0(r2)
    dbe8:	00000a06 	br	dc14 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    dbec:	e0bff717 	ldw	r2,-36(fp)
    dbf0:	10800617 	ldw	r2,24(r2)
    dbf4:	e0fff717 	ldw	r3,-36(fp)
    dbf8:	18c00517 	ldw	r3,20(r3)
    dbfc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    dc00:	e0bff717 	ldw	r2,-36(fp)
    dc04:	10800517 	ldw	r2,20(r2)
    dc08:	e0fff717 	ldw	r3,-36(fp)
    dc0c:	18c00617 	ldw	r3,24(r3)
    dc10:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    dc14:	00800074 	movhi	r2,1
    dc18:	109bcd04 	addi	r2,r2,28468
    dc1c:	10c00017 	ldw	r3,0(r2)
    dc20:	e0bff717 	ldw	r2,-36(fp)
    dc24:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    dc28:	00800074 	movhi	r2,1
    dc2c:	109bcd04 	addi	r2,r2,28468
    dc30:	e0fff717 	ldw	r3,-36(fp)
    dc34:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    dc38:	e0bff717 	ldw	r2,-36(fp)
    dc3c:	00c00fc4 	movi	r3,63
    dc40:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    dc44:	e0bff717 	ldw	r2,-36(fp)
    dc48:	10001345 	stb	zero,77(r2)
    dc4c:	e0bff617 	ldw	r2,-40(fp)
    dc50:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dc54:	e0bffe17 	ldw	r2,-8(fp)
    dc58:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    dc5c:	00800074 	movhi	r2,1
    dc60:	109bc644 	addi	r2,r2,28441
    dc64:	10800003 	ldbu	r2,0(r2)
    dc68:	10803fcc 	andi	r2,r2,255
    dc6c:	10800058 	cmpnei	r2,r2,1
    dc70:	1000011e 	bne	r2,zero,dc78 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
    dc74:	0007f240 	call	7f24 <OS_Sched>
    }
    return (OS_ERR_NONE);
    dc78:	0005883a 	mov	r2,zero
}
    dc7c:	e037883a 	mov	sp,fp
    dc80:	dfc00117 	ldw	ra,4(sp)
    dc84:	df000017 	ldw	fp,0(sp)
    dc88:	dec00204 	addi	sp,sp,8
    dc8c:	f800283a 	ret

0000dc90 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    dc90:	defff504 	addi	sp,sp,-44
    dc94:	df000a15 	stw	fp,40(sp)
    dc98:	df000a04 	addi	fp,sp,40
    dc9c:	2005883a 	mov	r2,r4
    dca0:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    dca4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    dca8:	e0bfff03 	ldbu	r2,-4(fp)
    dcac:	10800518 	cmpnei	r2,r2,20
    dcb0:	1000021e 	bne	r2,zero,dcbc <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    dcb4:	00800f84 	movi	r2,62
    dcb8:	00004706 	br	ddd8 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    dcbc:	e0bfff03 	ldbu	r2,-4(fp)
    dcc0:	10800530 	cmpltui	r2,r2,20
    dcc4:	1000051e 	bne	r2,zero,dcdc <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    dcc8:	e0bfff03 	ldbu	r2,-4(fp)
    dccc:	10803fe0 	cmpeqi	r2,r2,255
    dcd0:	1000021e 	bne	r2,zero,dcdc <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    dcd4:	00800a84 	movi	r2,42
    dcd8:	00003f06 	br	ddd8 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    dcdc:	e0bfff03 	ldbu	r2,-4(fp)
    dce0:	10803fd8 	cmpnei	r2,r2,255
    dce4:	1000131e 	bne	r2,zero,dd34 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dce8:	0005303a 	rdctl	r2,status
    dcec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dcf0:	e0fff917 	ldw	r3,-28(fp)
    dcf4:	00bfff84 	movi	r2,-2
    dcf8:	1884703a 	and	r2,r3,r2
    dcfc:	1001703a 	wrctl	status,r2
  
  return context;
    dd00:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    dd04:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    dd08:	00800074 	movhi	r2,1
    dd0c:	109bd504 	addi	r2,r2,28500
    dd10:	10800017 	ldw	r2,0(r2)
    dd14:	10800dc3 	ldbu	r2,55(r2)
    dd18:	e0bff705 	stb	r2,-36(fp)
    dd1c:	e0bff617 	ldw	r2,-40(fp)
    dd20:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dd24:	e0bffa17 	ldw	r2,-24(fp)
    dd28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
    dd2c:	e0bff703 	ldbu	r2,-36(fp)
    dd30:	00002906 	br	ddd8 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dd34:	0005303a 	rdctl	r2,status
    dd38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dd3c:	e0fffb17 	ldw	r3,-20(fp)
    dd40:	00bfff84 	movi	r2,-2
    dd44:	1884703a 	and	r2,r3,r2
    dd48:	1001703a 	wrctl	status,r2
  
  return context;
    dd4c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    dd50:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    dd54:	e0ffff03 	ldbu	r3,-4(fp)
    dd58:	008000b4 	movhi	r2,2
    dd5c:	109a5004 	addi	r2,r2,26944
    dd60:	18c7883a 	add	r3,r3,r3
    dd64:	18c7883a 	add	r3,r3,r3
    dd68:	10c5883a 	add	r2,r2,r3
    dd6c:	10800017 	ldw	r2,0(r2)
    dd70:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    dd74:	e0bff817 	ldw	r2,-32(fp)
    dd78:	1000061e 	bne	r2,zero,dd94 <OSTaskDelReq+0x104>
    dd7c:	e0bff617 	ldw	r2,-40(fp)
    dd80:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dd84:	e0bffc17 	ldw	r2,-16(fp)
    dd88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    dd8c:	008010c4 	movi	r2,67
    dd90:	00001106 	br	ddd8 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    dd94:	e0bff817 	ldw	r2,-32(fp)
    dd98:	10800058 	cmpnei	r2,r2,1
    dd9c:	1000061e 	bne	r2,zero,ddb8 <OSTaskDelReq+0x128>
    dda0:	e0bff617 	ldw	r2,-40(fp)
    dda4:	e0bffd15 	stw	r2,-12(fp)
    dda8:	e0bffd17 	ldw	r2,-12(fp)
    ddac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    ddb0:	00800f44 	movi	r2,61
    ddb4:	00000806 	br	ddd8 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    ddb8:	e0bff817 	ldw	r2,-32(fp)
    ddbc:	00c00fc4 	movi	r3,63
    ddc0:	10c00dc5 	stb	r3,55(r2)
    ddc4:	e0bff617 	ldw	r2,-40(fp)
    ddc8:	e0bffe15 	stw	r2,-8(fp)
    ddcc:	e0bffe17 	ldw	r2,-8(fp)
    ddd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    ddd4:	0005883a 	mov	r2,zero
}
    ddd8:	e037883a 	mov	sp,fp
    dddc:	df000017 	ldw	fp,0(sp)
    dde0:	dec00104 	addi	sp,sp,4
    dde4:	f800283a 	ret

0000dde8 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    dde8:	defff404 	addi	sp,sp,-48
    ddec:	dfc00b15 	stw	ra,44(sp)
    ddf0:	df000a15 	stw	fp,40(sp)
    ddf4:	df000a04 	addi	fp,sp,40
    ddf8:	2005883a 	mov	r2,r4
    ddfc:	e17ffe15 	stw	r5,-8(fp)
    de00:	e1bfff15 	stw	r6,-4(fp)
    de04:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    de08:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    de0c:	e0bfff17 	ldw	r2,-4(fp)
    de10:	1000021e 	bne	r2,zero,de1c <OSTaskNameGet+0x34>
        return (0);
    de14:	0005883a 	mov	r2,zero
    de18:	00005806 	br	df7c <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    de1c:	e0bffd03 	ldbu	r2,-12(fp)
    de20:	10800570 	cmpltui	r2,r2,21
    de24:	1000081e 	bne	r2,zero,de48 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    de28:	e0bffd03 	ldbu	r2,-12(fp)
    de2c:	10803fe0 	cmpeqi	r2,r2,255
    de30:	1000051e 	bne	r2,zero,de48 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    de34:	e0bfff17 	ldw	r2,-4(fp)
    de38:	00c00a84 	movi	r3,42
    de3c:	10c00005 	stb	r3,0(r2)
            return (0);
    de40:	0005883a 	mov	r2,zero
    de44:	00004d06 	br	df7c <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    de48:	e0bffe17 	ldw	r2,-8(fp)
    de4c:	1000051e 	bne	r2,zero,de64 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    de50:	e0bfff17 	ldw	r2,-4(fp)
    de54:	00c00304 	movi	r3,12
    de58:	10c00005 	stb	r3,0(r2)
        return (0);
    de5c:	0005883a 	mov	r2,zero
    de60:	00004606 	br	df7c <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    de64:	00800074 	movhi	r2,1
    de68:	109bd404 	addi	r2,r2,28496
    de6c:	10800003 	ldbu	r2,0(r2)
    de70:	10803fcc 	andi	r2,r2,255
    de74:	10000526 	beq	r2,zero,de8c <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
    de78:	e0bfff17 	ldw	r2,-4(fp)
    de7c:	00c00444 	movi	r3,17
    de80:	10c00005 	stb	r3,0(r2)
        return (0);
    de84:	0005883a 	mov	r2,zero
    de88:	00003c06 	br	df7c <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    de8c:	0005303a 	rdctl	r2,status
    de90:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    de94:	e0fff917 	ldw	r3,-28(fp)
    de98:	00bfff84 	movi	r2,-2
    de9c:	1884703a 	and	r2,r3,r2
    dea0:	1001703a 	wrctl	status,r2
  
  return context;
    dea4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    dea8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    deac:	e0bffd03 	ldbu	r2,-12(fp)
    deb0:	10803fd8 	cmpnei	r2,r2,255
    deb4:	1000051e 	bne	r2,zero,decc <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
    deb8:	00800074 	movhi	r2,1
    debc:	109bd504 	addi	r2,r2,28500
    dec0:	10800017 	ldw	r2,0(r2)
    dec4:	10800c83 	ldbu	r2,50(r2)
    dec8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    decc:	e0fffd03 	ldbu	r3,-12(fp)
    ded0:	008000b4 	movhi	r2,2
    ded4:	109a5004 	addi	r2,r2,26944
    ded8:	18c7883a 	add	r3,r3,r3
    dedc:	18c7883a 	add	r3,r3,r3
    dee0:	10c5883a 	add	r2,r2,r3
    dee4:	10800017 	ldw	r2,0(r2)
    dee8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    deec:	e0bff717 	ldw	r2,-36(fp)
    def0:	1000091e 	bne	r2,zero,df18 <OSTaskNameGet+0x130>
    def4:	e0bff617 	ldw	r2,-40(fp)
    def8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    defc:	e0bffa17 	ldw	r2,-24(fp)
    df00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    df04:	e0bfff17 	ldw	r2,-4(fp)
    df08:	00c010c4 	movi	r3,67
    df0c:	10c00005 	stb	r3,0(r2)
        return (0);
    df10:	0005883a 	mov	r2,zero
    df14:	00001906 	br	df7c <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    df18:	e0bff717 	ldw	r2,-36(fp)
    df1c:	10800058 	cmpnei	r2,r2,1
    df20:	1000091e 	bne	r2,zero,df48 <OSTaskNameGet+0x160>
    df24:	e0bff617 	ldw	r2,-40(fp)
    df28:	e0bffb15 	stw	r2,-20(fp)
    df2c:	e0bffb17 	ldw	r2,-20(fp)
    df30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    df34:	e0bfff17 	ldw	r2,-4(fp)
    df38:	00c010c4 	movi	r3,67
    df3c:	10c00005 	stb	r3,0(r2)
        return (0);
    df40:	0005883a 	mov	r2,zero
    df44:	00000d06 	br	df7c <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    df48:	e0bff717 	ldw	r2,-36(fp)
    df4c:	10801304 	addi	r2,r2,76
    df50:	e13ffe17 	ldw	r4,-8(fp)
    df54:	100b883a 	mov	r5,r2
    df58:	00080600 	call	8060 <OS_StrCopy>
    df5c:	e0bff805 	stb	r2,-32(fp)
    df60:	e0bff617 	ldw	r2,-40(fp)
    df64:	e0bffc15 	stw	r2,-16(fp)
    df68:	e0bffc17 	ldw	r2,-16(fp)
    df6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    df70:	e0bfff17 	ldw	r2,-4(fp)
    df74:	10000005 	stb	zero,0(r2)
    return (len);
    df78:	e0bff803 	ldbu	r2,-32(fp)
}
    df7c:	e037883a 	mov	sp,fp
    df80:	dfc00117 	ldw	ra,4(sp)
    df84:	df000017 	ldw	fp,0(sp)
    df88:	dec00204 	addi	sp,sp,8
    df8c:	f800283a 	ret

0000df90 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    df90:	defff304 	addi	sp,sp,-52
    df94:	dfc00c15 	stw	ra,48(sp)
    df98:	df000b15 	stw	fp,44(sp)
    df9c:	df000b04 	addi	fp,sp,44
    dfa0:	2005883a 	mov	r2,r4
    dfa4:	e17ffe15 	stw	r5,-8(fp)
    dfa8:	e1bfff15 	stw	r6,-4(fp)
    dfac:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    dfb0:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    dfb4:	e0bfff17 	ldw	r2,-4(fp)
    dfb8:	1000011e 	bne	r2,zero,dfc0 <OSTaskNameSet+0x30>
        return;
    dfbc:	00005f06 	br	e13c <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    dfc0:	e0bffd03 	ldbu	r2,-12(fp)
    dfc4:	10800570 	cmpltui	r2,r2,21
    dfc8:	1000071e 	bne	r2,zero,dfe8 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
    dfcc:	e0bffd03 	ldbu	r2,-12(fp)
    dfd0:	10803fe0 	cmpeqi	r2,r2,255
    dfd4:	1000041e 	bne	r2,zero,dfe8 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    dfd8:	e0bfff17 	ldw	r2,-4(fp)
    dfdc:	00c00a84 	movi	r3,42
    dfe0:	10c00005 	stb	r3,0(r2)
            return;
    dfe4:	00005506 	br	e13c <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    dfe8:	e0bffe17 	ldw	r2,-8(fp)
    dfec:	1000041e 	bne	r2,zero,e000 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    dff0:	e0bfff17 	ldw	r2,-4(fp)
    dff4:	00c00304 	movi	r3,12
    dff8:	10c00005 	stb	r3,0(r2)
        return;
    dffc:	00004f06 	br	e13c <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    e000:	00800074 	movhi	r2,1
    e004:	109bd404 	addi	r2,r2,28496
    e008:	10800003 	ldbu	r2,0(r2)
    e00c:	10803fcc 	andi	r2,r2,255
    e010:	10000426 	beq	r2,zero,e024 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
    e014:	e0bfff17 	ldw	r2,-4(fp)
    e018:	00c00484 	movi	r3,18
    e01c:	10c00005 	stb	r3,0(r2)
        return;
    e020:	00004606 	br	e13c <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e024:	0005303a 	rdctl	r2,status
    e028:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e02c:	e0fff817 	ldw	r3,-32(fp)
    e030:	00bfff84 	movi	r2,-2
    e034:	1884703a 	and	r2,r3,r2
    e038:	1001703a 	wrctl	status,r2
  
  return context;
    e03c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    e040:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    e044:	e0bffd03 	ldbu	r2,-12(fp)
    e048:	10803fd8 	cmpnei	r2,r2,255
    e04c:	1000051e 	bne	r2,zero,e064 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
    e050:	00800074 	movhi	r2,1
    e054:	109bd504 	addi	r2,r2,28500
    e058:	10800017 	ldw	r2,0(r2)
    e05c:	10800c83 	ldbu	r2,50(r2)
    e060:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    e064:	e0fffd03 	ldbu	r3,-12(fp)
    e068:	008000b4 	movhi	r2,2
    e06c:	109a5004 	addi	r2,r2,26944
    e070:	18c7883a 	add	r3,r3,r3
    e074:	18c7883a 	add	r3,r3,r3
    e078:	10c5883a 	add	r2,r2,r3
    e07c:	10800017 	ldw	r2,0(r2)
    e080:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    e084:	e0bff617 	ldw	r2,-40(fp)
    e088:	1000081e 	bne	r2,zero,e0ac <OSTaskNameSet+0x11c>
    e08c:	e0bff517 	ldw	r2,-44(fp)
    e090:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e094:	e0bff917 	ldw	r2,-28(fp)
    e098:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    e09c:	e0bfff17 	ldw	r2,-4(fp)
    e0a0:	00c010c4 	movi	r3,67
    e0a4:	10c00005 	stb	r3,0(r2)
        return;
    e0a8:	00002406 	br	e13c <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    e0ac:	e0bff617 	ldw	r2,-40(fp)
    e0b0:	10800058 	cmpnei	r2,r2,1
    e0b4:	1000081e 	bne	r2,zero,e0d8 <OSTaskNameSet+0x148>
    e0b8:	e0bff517 	ldw	r2,-44(fp)
    e0bc:	e0bffa15 	stw	r2,-24(fp)
    e0c0:	e0bffa17 	ldw	r2,-24(fp)
    e0c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    e0c8:	e0bfff17 	ldw	r2,-4(fp)
    e0cc:	00c010c4 	movi	r3,67
    e0d0:	10c00005 	stb	r3,0(r2)
        return;
    e0d4:	00001906 	br	e13c <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    e0d8:	e13ffe17 	ldw	r4,-8(fp)
    e0dc:	00080d40 	call	80d4 <OS_StrLen>
    e0e0:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    e0e4:	e0bff703 	ldbu	r2,-36(fp)
    e0e8:	10800830 	cmpltui	r2,r2,32
    e0ec:	1000081e 	bne	r2,zero,e110 <OSTaskNameSet+0x180>
    e0f0:	e0bff517 	ldw	r2,-44(fp)
    e0f4:	e0bffb15 	stw	r2,-20(fp)
    e0f8:	e0bffb17 	ldw	r2,-20(fp)
    e0fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    e100:	e0bfff17 	ldw	r2,-4(fp)
    e104:	00c01044 	movi	r3,65
    e108:	10c00005 	stb	r3,0(r2)
        return;
    e10c:	00000b06 	br	e13c <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    e110:	e0bff617 	ldw	r2,-40(fp)
    e114:	10801304 	addi	r2,r2,76
    e118:	1009883a 	mov	r4,r2
    e11c:	e17ffe17 	ldw	r5,-8(fp)
    e120:	00080600 	call	8060 <OS_StrCopy>
    e124:	e0bff517 	ldw	r2,-44(fp)
    e128:	e0bffc15 	stw	r2,-16(fp)
    e12c:	e0bffc17 	ldw	r2,-16(fp)
    e130:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    e134:	e0bfff17 	ldw	r2,-4(fp)
    e138:	10000005 	stb	zero,0(r2)
}
    e13c:	e037883a 	mov	sp,fp
    e140:	dfc00117 	ldw	ra,4(sp)
    e144:	df000017 	ldw	fp,0(sp)
    e148:	dec00204 	addi	sp,sp,8
    e14c:	f800283a 	ret

0000e150 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    e150:	defff404 	addi	sp,sp,-48
    e154:	dfc00b15 	stw	ra,44(sp)
    e158:	df000a15 	stw	fp,40(sp)
    e15c:	df000a04 	addi	fp,sp,40
    e160:	2005883a 	mov	r2,r4
    e164:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    e168:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    e16c:	e0bfff03 	ldbu	r2,-4(fp)
    e170:	10800530 	cmpltui	r2,r2,20
    e174:	1000021e 	bne	r2,zero,e180 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    e178:	00800a84 	movi	r2,42
    e17c:	00006d06 	br	e334 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e180:	0005303a 	rdctl	r2,status
    e184:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e188:	e0fff817 	ldw	r3,-32(fp)
    e18c:	00bfff84 	movi	r2,-2
    e190:	1884703a 	and	r2,r3,r2
    e194:	1001703a 	wrctl	status,r2
  
  return context;
    e198:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    e19c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    e1a0:	e0ffff03 	ldbu	r3,-4(fp)
    e1a4:	008000b4 	movhi	r2,2
    e1a8:	109a5004 	addi	r2,r2,26944
    e1ac:	18c7883a 	add	r3,r3,r3
    e1b0:	18c7883a 	add	r3,r3,r3
    e1b4:	10c5883a 	add	r2,r2,r3
    e1b8:	10800017 	ldw	r2,0(r2)
    e1bc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    e1c0:	e0bff717 	ldw	r2,-36(fp)
    e1c4:	1000061e 	bne	r2,zero,e1e0 <OSTaskResume+0x90>
    e1c8:	e0bff617 	ldw	r2,-40(fp)
    e1cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e1d0:	e0bff917 	ldw	r2,-28(fp)
    e1d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    e1d8:	00801184 	movi	r2,70
    e1dc:	00005506 	br	e334 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    e1e0:	e0bff717 	ldw	r2,-36(fp)
    e1e4:	10800058 	cmpnei	r2,r2,1
    e1e8:	1000061e 	bne	r2,zero,e204 <OSTaskResume+0xb4>
    e1ec:	e0bff617 	ldw	r2,-40(fp)
    e1f0:	e0bffa15 	stw	r2,-24(fp)
    e1f4:	e0bffa17 	ldw	r2,-24(fp)
    e1f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    e1fc:	008010c4 	movi	r2,67
    e200:	00004c06 	br	e334 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    e204:	e0bff717 	ldw	r2,-36(fp)
    e208:	10800c03 	ldbu	r2,48(r2)
    e20c:	10803fcc 	andi	r2,r2,255
    e210:	1080020c 	andi	r2,r2,8
    e214:	10004226 	beq	r2,zero,e320 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    e218:	e0bff717 	ldw	r2,-36(fp)
    e21c:	10c00c03 	ldbu	r3,48(r2)
    e220:	00bffdc4 	movi	r2,-9
    e224:	1884703a 	and	r2,r3,r2
    e228:	1007883a 	mov	r3,r2
    e22c:	e0bff717 	ldw	r2,-36(fp)
    e230:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    e234:	e0bff717 	ldw	r2,-36(fp)
    e238:	10800c03 	ldbu	r2,48(r2)
    e23c:	10803fcc 	andi	r2,r2,255
    e240:	1000311e 	bne	r2,zero,e308 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
    e244:	e0bff717 	ldw	r2,-36(fp)
    e248:	10800b8b 	ldhu	r2,46(r2)
    e24c:	10bfffcc 	andi	r2,r2,65535
    e250:	1000281e 	bne	r2,zero,e2f4 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    e254:	e0bff717 	ldw	r2,-36(fp)
    e258:	10c00d83 	ldbu	r3,54(r2)
    e25c:	00800074 	movhi	r2,1
    e260:	109bd204 	addi	r2,r2,28488
    e264:	10800003 	ldbu	r2,0(r2)
    e268:	1884b03a 	or	r2,r3,r2
    e26c:	1007883a 	mov	r3,r2
    e270:	00800074 	movhi	r2,1
    e274:	109bd204 	addi	r2,r2,28488
    e278:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    e27c:	e0bff717 	ldw	r2,-36(fp)
    e280:	10800d03 	ldbu	r2,52(r2)
    e284:	10c03fcc 	andi	r3,r2,255
    e288:	e0bff717 	ldw	r2,-36(fp)
    e28c:	10800d03 	ldbu	r2,52(r2)
    e290:	11003fcc 	andi	r4,r2,255
    e294:	00800074 	movhi	r2,1
    e298:	109bd244 	addi	r2,r2,28489
    e29c:	1105883a 	add	r2,r2,r4
    e2a0:	11000003 	ldbu	r4,0(r2)
    e2a4:	e0bff717 	ldw	r2,-36(fp)
    e2a8:	10800d43 	ldbu	r2,53(r2)
    e2ac:	2084b03a 	or	r2,r4,r2
    e2b0:	1009883a 	mov	r4,r2
    e2b4:	00800074 	movhi	r2,1
    e2b8:	109bd244 	addi	r2,r2,28489
    e2bc:	10c5883a 	add	r2,r2,r3
    e2c0:	11000005 	stb	r4,0(r2)
    e2c4:	e0bff617 	ldw	r2,-40(fp)
    e2c8:	e0bffb15 	stw	r2,-20(fp)
    e2cc:	e0bffb17 	ldw	r2,-20(fp)
    e2d0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    e2d4:	00800074 	movhi	r2,1
    e2d8:	109bc644 	addi	r2,r2,28441
    e2dc:	10800003 	ldbu	r2,0(r2)
    e2e0:	10803fcc 	andi	r2,r2,255
    e2e4:	10800058 	cmpnei	r2,r2,1
    e2e8:	10000b1e 	bne	r2,zero,e318 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
    e2ec:	0007f240 	call	7f24 <OS_Sched>
    e2f0:	00000906 	br	e318 <OSTaskResume+0x1c8>
    e2f4:	e0bff617 	ldw	r2,-40(fp)
    e2f8:	e0bffc15 	stw	r2,-16(fp)
    e2fc:	e0bffc17 	ldw	r2,-16(fp)
    e300:	1001703a 	wrctl	status,r2
    e304:	00000406 	br	e318 <OSTaskResume+0x1c8>
    e308:	e0bff617 	ldw	r2,-40(fp)
    e30c:	e0bffd15 	stw	r2,-12(fp)
    e310:	e0bffd17 	ldw	r2,-12(fp)
    e314:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    e318:	0005883a 	mov	r2,zero
    e31c:	00000506 	br	e334 <OSTaskResume+0x1e4>
    e320:	e0bff617 	ldw	r2,-40(fp)
    e324:	e0bffe15 	stw	r2,-8(fp)
    e328:	e0bffe17 	ldw	r2,-8(fp)
    e32c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    e330:	00801104 	movi	r2,68
}
    e334:	e037883a 	mov	sp,fp
    e338:	dfc00117 	ldw	ra,4(sp)
    e33c:	df000017 	ldw	fp,0(sp)
    e340:	dec00204 	addi	sp,sp,8
    e344:	f800283a 	ret

0000e348 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    e348:	defff304 	addi	sp,sp,-52
    e34c:	df000c15 	stw	fp,48(sp)
    e350:	df000c04 	addi	fp,sp,48
    e354:	2005883a 	mov	r2,r4
    e358:	e17fff15 	stw	r5,-4(fp)
    e35c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    e360:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    e364:	e0bffe03 	ldbu	r2,-8(fp)
    e368:	10800570 	cmpltui	r2,r2,21
    e36c:	1000051e 	bne	r2,zero,e384 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    e370:	e0bffe03 	ldbu	r2,-8(fp)
    e374:	10803fe0 	cmpeqi	r2,r2,255
    e378:	1000021e 	bne	r2,zero,e384 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    e37c:	00800a84 	movi	r2,42
    e380:	00005f06 	br	e500 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    e384:	e0bfff17 	ldw	r2,-4(fp)
    e388:	1000021e 	bne	r2,zero,e394 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    e38c:	00800244 	movi	r2,9
    e390:	00005b06 	br	e500 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    e394:	e0bfff17 	ldw	r2,-4(fp)
    e398:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    e39c:	e0bfff17 	ldw	r2,-4(fp)
    e3a0:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e3a4:	0005303a 	rdctl	r2,status
    e3a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e3ac:	e0fff917 	ldw	r3,-28(fp)
    e3b0:	00bfff84 	movi	r2,-2
    e3b4:	1884703a 	and	r2,r3,r2
    e3b8:	1001703a 	wrctl	status,r2
  
  return context;
    e3bc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    e3c0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    e3c4:	e0bffe03 	ldbu	r2,-8(fp)
    e3c8:	10803fd8 	cmpnei	r2,r2,255
    e3cc:	1000051e 	bne	r2,zero,e3e4 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
    e3d0:	00800074 	movhi	r2,1
    e3d4:	109bd504 	addi	r2,r2,28500
    e3d8:	10800017 	ldw	r2,0(r2)
    e3dc:	10800c83 	ldbu	r2,50(r2)
    e3e0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    e3e4:	e0fffe03 	ldbu	r3,-8(fp)
    e3e8:	008000b4 	movhi	r2,2
    e3ec:	109a5004 	addi	r2,r2,26944
    e3f0:	18c7883a 	add	r3,r3,r3
    e3f4:	18c7883a 	add	r3,r3,r3
    e3f8:	10c5883a 	add	r2,r2,r3
    e3fc:	10800017 	ldw	r2,0(r2)
    e400:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    e404:	e0bff717 	ldw	r2,-36(fp)
    e408:	1000061e 	bne	r2,zero,e424 <OSTaskStkChk+0xdc>
    e40c:	e0bff617 	ldw	r2,-40(fp)
    e410:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e414:	e0bffa17 	ldw	r2,-24(fp)
    e418:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    e41c:	008010c4 	movi	r2,67
    e420:	00003706 	br	e500 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
    e424:	e0bff717 	ldw	r2,-36(fp)
    e428:	10800058 	cmpnei	r2,r2,1
    e42c:	1000061e 	bne	r2,zero,e448 <OSTaskStkChk+0x100>
    e430:	e0bff617 	ldw	r2,-40(fp)
    e434:	e0bffb15 	stw	r2,-20(fp)
    e438:	e0bffb17 	ldw	r2,-20(fp)
    e43c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    e440:	008010c4 	movi	r2,67
    e444:	00002e06 	br	e500 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    e448:	e0bff717 	ldw	r2,-36(fp)
    e44c:	1080040b 	ldhu	r2,16(r2)
    e450:	10bfffcc 	andi	r2,r2,65535
    e454:	1080004c 	andi	r2,r2,1
    e458:	1000061e 	bne	r2,zero,e474 <OSTaskStkChk+0x12c>
    e45c:	e0bff617 	ldw	r2,-40(fp)
    e460:	e0bffc15 	stw	r2,-16(fp)
    e464:	e0bffc17 	ldw	r2,-16(fp)
    e468:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    e46c:	00801144 	movi	r2,69
    e470:	00002306 	br	e500 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
    e474:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
    e478:	e0bff717 	ldw	r2,-36(fp)
    e47c:	10800317 	ldw	r2,12(r2)
    e480:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
    e484:	e0bff717 	ldw	r2,-36(fp)
    e488:	10800217 	ldw	r2,8(r2)
    e48c:	e0bff415 	stw	r2,-48(fp)
    e490:	e0bff617 	ldw	r2,-40(fp)
    e494:	e0bffd15 	stw	r2,-12(fp)
    e498:	e0bffd17 	ldw	r2,-12(fp)
    e49c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    e4a0:	00000306 	br	e4b0 <OSTaskStkChk+0x168>
        nfree++;
    e4a4:	e0bff517 	ldw	r2,-44(fp)
    e4a8:	10800044 	addi	r2,r2,1
    e4ac:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    e4b0:	e0bff417 	ldw	r2,-48(fp)
    e4b4:	10c00104 	addi	r3,r2,4
    e4b8:	e0fff415 	stw	r3,-48(fp)
    e4bc:	10800017 	ldw	r2,0(r2)
    e4c0:	103ff826 	beq	r2,zero,e4a4 <__alt_mem_Flash_flash_data+0xf400e4a4>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    e4c4:	e0bff517 	ldw	r2,-44(fp)
    e4c8:	1085883a 	add	r2,r2,r2
    e4cc:	1085883a 	add	r2,r2,r2
    e4d0:	1007883a 	mov	r3,r2
    e4d4:	e0bfff17 	ldw	r2,-4(fp)
    e4d8:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    e4dc:	e0fff817 	ldw	r3,-32(fp)
    e4e0:	e0bff517 	ldw	r2,-44(fp)
    e4e4:	1885c83a 	sub	r2,r3,r2
    e4e8:	1085883a 	add	r2,r2,r2
    e4ec:	1085883a 	add	r2,r2,r2
    e4f0:	1007883a 	mov	r3,r2
    e4f4:	e0bfff17 	ldw	r2,-4(fp)
    e4f8:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    e4fc:	0005883a 	mov	r2,zero
}
    e500:	e037883a 	mov	sp,fp
    e504:	df000017 	ldw	fp,0(sp)
    e508:	dec00104 	addi	sp,sp,4
    e50c:	f800283a 	ret

0000e510 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    e510:	defff504 	addi	sp,sp,-44
    e514:	dfc00a15 	stw	ra,40(sp)
    e518:	df000915 	stw	fp,36(sp)
    e51c:	df000904 	addi	fp,sp,36
    e520:	2005883a 	mov	r2,r4
    e524:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e528:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    e52c:	e0bfff03 	ldbu	r2,-4(fp)
    e530:	10800518 	cmpnei	r2,r2,20
    e534:	1000021e 	bne	r2,zero,e540 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    e538:	008011c4 	movi	r2,71
    e53c:	00007406 	br	e710 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    e540:	e0bfff03 	ldbu	r2,-4(fp)
    e544:	10800530 	cmpltui	r2,r2,20
    e548:	1000051e 	bne	r2,zero,e560 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    e54c:	e0bfff03 	ldbu	r2,-4(fp)
    e550:	10803fe0 	cmpeqi	r2,r2,255
    e554:	1000021e 	bne	r2,zero,e560 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    e558:	00800a84 	movi	r2,42
    e55c:	00006c06 	br	e710 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e560:	0005303a 	rdctl	r2,status
    e564:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e568:	e0fffb17 	ldw	r3,-20(fp)
    e56c:	00bfff84 	movi	r2,-2
    e570:	1884703a 	and	r2,r3,r2
    e574:	1001703a 	wrctl	status,r2
  
  return context;
    e578:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    e57c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    e580:	e0bfff03 	ldbu	r2,-4(fp)
    e584:	10803fd8 	cmpnei	r2,r2,255
    e588:	1000081e 	bne	r2,zero,e5ac <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
    e58c:	00800074 	movhi	r2,1
    e590:	109bd504 	addi	r2,r2,28500
    e594:	10800017 	ldw	r2,0(r2)
    e598:	10800c83 	ldbu	r2,50(r2)
    e59c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
    e5a0:	00800044 	movi	r2,1
    e5a4:	e0bff705 	stb	r2,-36(fp)
    e5a8:	00000b06 	br	e5d8 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    e5ac:	00800074 	movhi	r2,1
    e5b0:	109bd504 	addi	r2,r2,28500
    e5b4:	10800017 	ldw	r2,0(r2)
    e5b8:	10800c83 	ldbu	r2,50(r2)
    e5bc:	10c03fcc 	andi	r3,r2,255
    e5c0:	e0bfff03 	ldbu	r2,-4(fp)
    e5c4:	1880031e 	bne	r3,r2,e5d4 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
    e5c8:	00800044 	movi	r2,1
    e5cc:	e0bff705 	stb	r2,-36(fp)
    e5d0:	00000106 	br	e5d8 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    e5d4:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    e5d8:	e0ffff03 	ldbu	r3,-4(fp)
    e5dc:	008000b4 	movhi	r2,2
    e5e0:	109a5004 	addi	r2,r2,26944
    e5e4:	18c7883a 	add	r3,r3,r3
    e5e8:	18c7883a 	add	r3,r3,r3
    e5ec:	10c5883a 	add	r2,r2,r3
    e5f0:	10800017 	ldw	r2,0(r2)
    e5f4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    e5f8:	e0bff917 	ldw	r2,-28(fp)
    e5fc:	1000061e 	bne	r2,zero,e618 <OSTaskSuspend+0x108>
    e600:	e0bff817 	ldw	r2,-32(fp)
    e604:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e608:	e0bffc17 	ldw	r2,-16(fp)
    e60c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    e610:	00801204 	movi	r2,72
    e614:	00003e06 	br	e710 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    e618:	e0bff917 	ldw	r2,-28(fp)
    e61c:	10800058 	cmpnei	r2,r2,1
    e620:	1000061e 	bne	r2,zero,e63c <OSTaskSuspend+0x12c>
    e624:	e0bff817 	ldw	r2,-32(fp)
    e628:	e0bffd15 	stw	r2,-12(fp)
    e62c:	e0bffd17 	ldw	r2,-12(fp)
    e630:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    e634:	008010c4 	movi	r2,67
    e638:	00003506 	br	e710 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
    e63c:	e0bff917 	ldw	r2,-28(fp)
    e640:	10800d03 	ldbu	r2,52(r2)
    e644:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    e648:	e0fffa03 	ldbu	r3,-24(fp)
    e64c:	e13ffa03 	ldbu	r4,-24(fp)
    e650:	00800074 	movhi	r2,1
    e654:	109bd244 	addi	r2,r2,28489
    e658:	1105883a 	add	r2,r2,r4
    e65c:	10800003 	ldbu	r2,0(r2)
    e660:	1009883a 	mov	r4,r2
    e664:	e0bff917 	ldw	r2,-28(fp)
    e668:	10800d43 	ldbu	r2,53(r2)
    e66c:	0084303a 	nor	r2,zero,r2
    e670:	2084703a 	and	r2,r4,r2
    e674:	1009883a 	mov	r4,r2
    e678:	00800074 	movhi	r2,1
    e67c:	109bd244 	addi	r2,r2,28489
    e680:	10c5883a 	add	r2,r2,r3
    e684:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    e688:	e0fffa03 	ldbu	r3,-24(fp)
    e68c:	00800074 	movhi	r2,1
    e690:	109bd244 	addi	r2,r2,28489
    e694:	10c5883a 	add	r2,r2,r3
    e698:	10800003 	ldbu	r2,0(r2)
    e69c:	10803fcc 	andi	r2,r2,255
    e6a0:	10000c1e 	bne	r2,zero,e6d4 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    e6a4:	e0bff917 	ldw	r2,-28(fp)
    e6a8:	10800d83 	ldbu	r2,54(r2)
    e6ac:	0084303a 	nor	r2,zero,r2
    e6b0:	1007883a 	mov	r3,r2
    e6b4:	00800074 	movhi	r2,1
    e6b8:	109bd204 	addi	r2,r2,28488
    e6bc:	10800003 	ldbu	r2,0(r2)
    e6c0:	1884703a 	and	r2,r3,r2
    e6c4:	1007883a 	mov	r3,r2
    e6c8:	00800074 	movhi	r2,1
    e6cc:	109bd204 	addi	r2,r2,28488
    e6d0:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    e6d4:	e0bff917 	ldw	r2,-28(fp)
    e6d8:	10800c03 	ldbu	r2,48(r2)
    e6dc:	10800214 	ori	r2,r2,8
    e6e0:	1007883a 	mov	r3,r2
    e6e4:	e0bff917 	ldw	r2,-28(fp)
    e6e8:	10c00c05 	stb	r3,48(r2)
    e6ec:	e0bff817 	ldw	r2,-32(fp)
    e6f0:	e0bffe15 	stw	r2,-8(fp)
    e6f4:	e0bffe17 	ldw	r2,-8(fp)
    e6f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    e6fc:	e0bff703 	ldbu	r2,-36(fp)
    e700:	10800058 	cmpnei	r2,r2,1
    e704:	1000011e 	bne	r2,zero,e70c <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
    e708:	0007f240 	call	7f24 <OS_Sched>
    }
    return (OS_ERR_NONE);
    e70c:	0005883a 	mov	r2,zero
}
    e710:	e037883a 	mov	sp,fp
    e714:	dfc00117 	ldw	ra,4(sp)
    e718:	df000017 	ldw	fp,0(sp)
    e71c:	dec00204 	addi	sp,sp,8
    e720:	f800283a 	ret

0000e724 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    e724:	defff604 	addi	sp,sp,-40
    e728:	dfc00915 	stw	ra,36(sp)
    e72c:	df000815 	stw	fp,32(sp)
    e730:	df000804 	addi	fp,sp,32
    e734:	2005883a 	mov	r2,r4
    e738:	e17fff15 	stw	r5,-4(fp)
    e73c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e740:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    e744:	e0bffe03 	ldbu	r2,-8(fp)
    e748:	10800570 	cmpltui	r2,r2,21
    e74c:	1000051e 	bne	r2,zero,e764 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    e750:	e0bffe03 	ldbu	r2,-8(fp)
    e754:	10803fe0 	cmpeqi	r2,r2,255
    e758:	1000021e 	bne	r2,zero,e764 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    e75c:	00800a84 	movi	r2,42
    e760:	00003606 	br	e83c <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    e764:	e0bfff17 	ldw	r2,-4(fp)
    e768:	1000021e 	bne	r2,zero,e774 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    e76c:	00800244 	movi	r2,9
    e770:	00003206 	br	e83c <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e774:	0005303a 	rdctl	r2,status
    e778:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e77c:	e0fffa17 	ldw	r3,-24(fp)
    e780:	00bfff84 	movi	r2,-2
    e784:	1884703a 	and	r2,r3,r2
    e788:	1001703a 	wrctl	status,r2
  
  return context;
    e78c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    e790:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    e794:	e0bffe03 	ldbu	r2,-8(fp)
    e798:	10803fd8 	cmpnei	r2,r2,255
    e79c:	1000051e 	bne	r2,zero,e7b4 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
    e7a0:	00800074 	movhi	r2,1
    e7a4:	109bd504 	addi	r2,r2,28500
    e7a8:	10800017 	ldw	r2,0(r2)
    e7ac:	10800c83 	ldbu	r2,50(r2)
    e7b0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    e7b4:	e0fffe03 	ldbu	r3,-8(fp)
    e7b8:	008000b4 	movhi	r2,2
    e7bc:	109a5004 	addi	r2,r2,26944
    e7c0:	18c7883a 	add	r3,r3,r3
    e7c4:	18c7883a 	add	r3,r3,r3
    e7c8:	10c5883a 	add	r2,r2,r3
    e7cc:	10800017 	ldw	r2,0(r2)
    e7d0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    e7d4:	e0bff917 	ldw	r2,-28(fp)
    e7d8:	1000061e 	bne	r2,zero,e7f4 <OSTaskQuery+0xd0>
    e7dc:	e0bff817 	ldw	r2,-32(fp)
    e7e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e7e4:	e0bffb17 	ldw	r2,-20(fp)
    e7e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    e7ec:	00800a44 	movi	r2,41
    e7f0:	00001206 	br	e83c <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    e7f4:	e0bff917 	ldw	r2,-28(fp)
    e7f8:	10800058 	cmpnei	r2,r2,1
    e7fc:	1000061e 	bne	r2,zero,e818 <OSTaskQuery+0xf4>
    e800:	e0bff817 	ldw	r2,-32(fp)
    e804:	e0bffc15 	stw	r2,-16(fp)
    e808:	e0bffc17 	ldw	r2,-16(fp)
    e80c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    e810:	008010c4 	movi	r2,67
    e814:	00000906 	br	e83c <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    e818:	e13fff17 	ldw	r4,-4(fp)
    e81c:	e17ff917 	ldw	r5,-28(fp)
    e820:	01801b04 	movi	r6,108
    e824:	0007ec00 	call	7ec0 <OS_MemCopy>
    e828:	e0bff817 	ldw	r2,-32(fp)
    e82c:	e0bffd15 	stw	r2,-12(fp)
    e830:	e0bffd17 	ldw	r2,-12(fp)
    e834:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    e838:	0005883a 	mov	r2,zero
}
    e83c:	e037883a 	mov	sp,fp
    e840:	dfc00117 	ldw	ra,4(sp)
    e844:	df000017 	ldw	fp,0(sp)
    e848:	dec00204 	addi	sp,sp,8
    e84c:	f800283a 	ret

0000e850 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    e850:	defffc04 	addi	sp,sp,-16
    e854:	df000315 	stw	fp,12(sp)
    e858:	df000304 	addi	fp,sp,12
    e85c:	e13ffd15 	stw	r4,-12(fp)
    e860:	e17ffe15 	stw	r5,-8(fp)
    e864:	3005883a 	mov	r2,r6
    e868:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    e86c:	e0bfff0b 	ldhu	r2,-4(fp)
    e870:	1080004c 	andi	r2,r2,1
    e874:	10000d26 	beq	r2,zero,e8ac <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    e878:	e0bfff0b 	ldhu	r2,-4(fp)
    e87c:	1080008c 	andi	r2,r2,2
    e880:	10000a26 	beq	r2,zero,e8ac <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    e884:	00000706 	br	e8a4 <OS_TaskStkClr+0x54>
                size--;
    e888:	e0bffe17 	ldw	r2,-8(fp)
    e88c:	10bfffc4 	addi	r2,r2,-1
    e890:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    e894:	e0bffd17 	ldw	r2,-12(fp)
    e898:	10c00104 	addi	r3,r2,4
    e89c:	e0fffd15 	stw	r3,-12(fp)
    e8a0:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    e8a4:	e0bffe17 	ldw	r2,-8(fp)
    e8a8:	103ff71e 	bne	r2,zero,e888 <__alt_mem_Flash_flash_data+0xf400e888>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    e8ac:	e037883a 	mov	sp,fp
    e8b0:	df000017 	ldw	fp,0(sp)
    e8b4:	dec00104 	addi	sp,sp,4
    e8b8:	f800283a 	ret

0000e8bc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    e8bc:	defff904 	addi	sp,sp,-28
    e8c0:	dfc00615 	stw	ra,24(sp)
    e8c4:	df000515 	stw	fp,20(sp)
    e8c8:	df000504 	addi	fp,sp,20
    e8cc:	2005883a 	mov	r2,r4
    e8d0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e8d4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    e8d8:	00800074 	movhi	r2,1
    e8dc:	109bd404 	addi	r2,r2,28496
    e8e0:	10800003 	ldbu	r2,0(r2)
    e8e4:	10803fcc 	andi	r2,r2,255
    e8e8:	10000126 	beq	r2,zero,e8f0 <OSTimeDly+0x34>
        return;
    e8ec:	00004006 	br	e9f0 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    e8f0:	e0bfff0b 	ldhu	r2,-4(fp)
    e8f4:	10003e26 	beq	r2,zero,e9f0 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e8f8:	0005303a 	rdctl	r2,status
    e8fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e900:	e0fffd17 	ldw	r3,-12(fp)
    e904:	00bfff84 	movi	r2,-2
    e908:	1884703a 	and	r2,r3,r2
    e90c:	1001703a 	wrctl	status,r2
  
  return context;
    e910:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
    e914:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    e918:	00800074 	movhi	r2,1
    e91c:	109bd504 	addi	r2,r2,28500
    e920:	10800017 	ldw	r2,0(r2)
    e924:	10800d03 	ldbu	r2,52(r2)
    e928:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    e92c:	e0fffc03 	ldbu	r3,-16(fp)
    e930:	e13ffc03 	ldbu	r4,-16(fp)
    e934:	00800074 	movhi	r2,1
    e938:	109bd244 	addi	r2,r2,28489
    e93c:	1105883a 	add	r2,r2,r4
    e940:	10800003 	ldbu	r2,0(r2)
    e944:	1009883a 	mov	r4,r2
    e948:	00800074 	movhi	r2,1
    e94c:	109bd504 	addi	r2,r2,28500
    e950:	10800017 	ldw	r2,0(r2)
    e954:	10800d43 	ldbu	r2,53(r2)
    e958:	0084303a 	nor	r2,zero,r2
    e95c:	2084703a 	and	r2,r4,r2
    e960:	1009883a 	mov	r4,r2
    e964:	00800074 	movhi	r2,1
    e968:	109bd244 	addi	r2,r2,28489
    e96c:	10c5883a 	add	r2,r2,r3
    e970:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
    e974:	e0fffc03 	ldbu	r3,-16(fp)
    e978:	00800074 	movhi	r2,1
    e97c:	109bd244 	addi	r2,r2,28489
    e980:	10c5883a 	add	r2,r2,r3
    e984:	10800003 	ldbu	r2,0(r2)
    e988:	10803fcc 	andi	r2,r2,255
    e98c:	10000e1e 	bne	r2,zero,e9c8 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    e990:	00800074 	movhi	r2,1
    e994:	109bd504 	addi	r2,r2,28500
    e998:	10800017 	ldw	r2,0(r2)
    e99c:	10800d83 	ldbu	r2,54(r2)
    e9a0:	0084303a 	nor	r2,zero,r2
    e9a4:	1007883a 	mov	r3,r2
    e9a8:	00800074 	movhi	r2,1
    e9ac:	109bd204 	addi	r2,r2,28488
    e9b0:	10800003 	ldbu	r2,0(r2)
    e9b4:	1884703a 	and	r2,r3,r2
    e9b8:	1007883a 	mov	r3,r2
    e9bc:	00800074 	movhi	r2,1
    e9c0:	109bd204 	addi	r2,r2,28488
    e9c4:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    e9c8:	00800074 	movhi	r2,1
    e9cc:	109bd504 	addi	r2,r2,28500
    e9d0:	10800017 	ldw	r2,0(r2)
    e9d4:	e0ffff0b 	ldhu	r3,-4(fp)
    e9d8:	10c00b8d 	sth	r3,46(r2)
    e9dc:	e0bffb17 	ldw	r2,-20(fp)
    e9e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e9e4:	e0bffe17 	ldw	r2,-8(fp)
    e9e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    e9ec:	0007f240 	call	7f24 <OS_Sched>
    }
}
    e9f0:	e037883a 	mov	sp,fp
    e9f4:	dfc00117 	ldw	ra,4(sp)
    e9f8:	df000017 	ldw	fp,0(sp)
    e9fc:	dec00204 	addi	sp,sp,8
    ea00:	f800283a 	ret

0000ea04 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    ea04:	defff804 	addi	sp,sp,-32
    ea08:	dfc00715 	stw	ra,28(sp)
    ea0c:	df000615 	stw	fp,24(sp)
    ea10:	df000604 	addi	fp,sp,24
    ea14:	2015883a 	mov	r10,r4
    ea18:	2809883a 	mov	r4,r5
    ea1c:	3007883a 	mov	r3,r6
    ea20:	3805883a 	mov	r2,r7
    ea24:	e2bffc05 	stb	r10,-16(fp)
    ea28:	e13ffd05 	stb	r4,-12(fp)
    ea2c:	e0fffe05 	stb	r3,-8(fp)
    ea30:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    ea34:	00800074 	movhi	r2,1
    ea38:	109bd404 	addi	r2,r2,28496
    ea3c:	10800003 	ldbu	r2,0(r2)
    ea40:	10803fcc 	andi	r2,r2,255
    ea44:	10000226 	beq	r2,zero,ea50 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
    ea48:	00801544 	movi	r2,85
    ea4c:	00004206 	br	eb58 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    ea50:	e0bffc03 	ldbu	r2,-16(fp)
    ea54:	1000081e 	bne	r2,zero,ea78 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
    ea58:	e0bffd03 	ldbu	r2,-12(fp)
    ea5c:	1000061e 	bne	r2,zero,ea78 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
    ea60:	e0bffe03 	ldbu	r2,-8(fp)
    ea64:	1000041e 	bne	r2,zero,ea78 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
    ea68:	e0bfff0b 	ldhu	r2,-4(fp)
    ea6c:	1000021e 	bne	r2,zero,ea78 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
    ea70:	00801504 	movi	r2,84
    ea74:	00003806 	br	eb58 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
    ea78:	e0bffd03 	ldbu	r2,-12(fp)
    ea7c:	10800f30 	cmpltui	r2,r2,60
    ea80:	1000021e 	bne	r2,zero,ea8c <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    ea84:	00801444 	movi	r2,81
    ea88:	00003306 	br	eb58 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
    ea8c:	e0bffe03 	ldbu	r2,-8(fp)
    ea90:	10800f30 	cmpltui	r2,r2,60
    ea94:	1000021e 	bne	r2,zero,eaa0 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
    ea98:	00801484 	movi	r2,82
    ea9c:	00002e06 	br	eb58 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
    eaa0:	e0bfff0b 	ldhu	r2,-4(fp)
    eaa4:	1080fa30 	cmpltui	r2,r2,1000
    eaa8:	1000021e 	bne	r2,zero,eab4 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
    eaac:	008014c4 	movi	r2,83
    eab0:	00002906 	br	eb58 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    eab4:	e0bffc03 	ldbu	r2,-16(fp)
    eab8:	10c38424 	muli	r3,r2,3600
    eabc:	e0bffd03 	ldbu	r2,-12(fp)
    eac0:	10800f24 	muli	r2,r2,60
    eac4:	1887883a 	add	r3,r3,r2
    eac8:	e0bffe03 	ldbu	r2,-8(fp)
    eacc:	1885883a 	add	r2,r3,r2
    ead0:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    ead4:	e0bfff0b 	ldhu	r2,-4(fp)
    ead8:	10800f84 	addi	r2,r2,62
    eadc:	100690fa 	slli	r3,r2,3
    eae0:	008418b4 	movhi	r2,4194
    eae4:	109374c4 	addi	r2,r2,19923
    eae8:	188a383a 	mulxuu	r5,r3,r2
    eaec:	1885383a 	mul	r2,r3,r2
    eaf0:	1011883a 	mov	r8,r2
    eaf4:	2813883a 	mov	r9,r5
    eaf8:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    eafc:	2085883a 	add	r2,r4,r2
    eb00:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    eb04:	e0bffb17 	ldw	r2,-20(fp)
    eb08:	1004d43a 	srli	r2,r2,16
    eb0c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    eb10:	e0bffb17 	ldw	r2,-20(fp)
    eb14:	10bfffcc 	andi	r2,r2,65535
    eb18:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
    eb1c:	e0bffb17 	ldw	r2,-20(fp)
    eb20:	10bfffcc 	andi	r2,r2,65535
    eb24:	1009883a 	mov	r4,r2
    eb28:	000e8bc0 	call	e8bc <OSTimeDly>
    while (loops > 0) {
    eb2c:	00000706 	br	eb4c <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
    eb30:	01200014 	movui	r4,32768
    eb34:	000e8bc0 	call	e8bc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    eb38:	01200014 	movui	r4,32768
    eb3c:	000e8bc0 	call	e8bc <OSTimeDly>
        loops--;
    eb40:	e0bffa0b 	ldhu	r2,-24(fp)
    eb44:	10bfffc4 	addi	r2,r2,-1
    eb48:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    eb4c:	e0bffa0b 	ldhu	r2,-24(fp)
    eb50:	103ff71e 	bne	r2,zero,eb30 <__alt_mem_Flash_flash_data+0xf400eb30>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    eb54:	0005883a 	mov	r2,zero
}
    eb58:	e037883a 	mov	sp,fp
    eb5c:	dfc00117 	ldw	ra,4(sp)
    eb60:	df000017 	ldw	fp,0(sp)
    eb64:	dec00204 	addi	sp,sp,8
    eb68:	f800283a 	ret

0000eb6c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    eb6c:	defff504 	addi	sp,sp,-44
    eb70:	dfc00a15 	stw	ra,40(sp)
    eb74:	df000915 	stw	fp,36(sp)
    eb78:	df000904 	addi	fp,sp,36
    eb7c:	2005883a 	mov	r2,r4
    eb80:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    eb84:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    eb88:	e0bfff03 	ldbu	r2,-4(fp)
    eb8c:	10800530 	cmpltui	r2,r2,20
    eb90:	1000021e 	bne	r2,zero,eb9c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    eb94:	00800a84 	movi	r2,42
    eb98:	00006b06 	br	ed48 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eb9c:	0005303a 	rdctl	r2,status
    eba0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eba4:	e0fff917 	ldw	r3,-28(fp)
    eba8:	00bfff84 	movi	r2,-2
    ebac:	1884703a 	and	r2,r3,r2
    ebb0:	1001703a 	wrctl	status,r2
  
  return context;
    ebb4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    ebb8:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    ebbc:	e0ffff03 	ldbu	r3,-4(fp)
    ebc0:	008000b4 	movhi	r2,2
    ebc4:	109a5004 	addi	r2,r2,26944
    ebc8:	18c7883a 	add	r3,r3,r3
    ebcc:	18c7883a 	add	r3,r3,r3
    ebd0:	10c5883a 	add	r2,r2,r3
    ebd4:	10800017 	ldw	r2,0(r2)
    ebd8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
    ebdc:	e0bff817 	ldw	r2,-32(fp)
    ebe0:	1000061e 	bne	r2,zero,ebfc <OSTimeDlyResume+0x90>
    ebe4:	e0bff717 	ldw	r2,-36(fp)
    ebe8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ebec:	e0bffa17 	ldw	r2,-24(fp)
    ebf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    ebf4:	008010c4 	movi	r2,67
    ebf8:	00005306 	br	ed48 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
    ebfc:	e0bff817 	ldw	r2,-32(fp)
    ec00:	10800058 	cmpnei	r2,r2,1
    ec04:	1000061e 	bne	r2,zero,ec20 <OSTimeDlyResume+0xb4>
    ec08:	e0bff717 	ldw	r2,-36(fp)
    ec0c:	e0bffb15 	stw	r2,-20(fp)
    ec10:	e0bffb17 	ldw	r2,-20(fp)
    ec14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    ec18:	008010c4 	movi	r2,67
    ec1c:	00004a06 	br	ed48 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    ec20:	e0bff817 	ldw	r2,-32(fp)
    ec24:	10800b8b 	ldhu	r2,46(r2)
    ec28:	10bfffcc 	andi	r2,r2,65535
    ec2c:	1000061e 	bne	r2,zero,ec48 <OSTimeDlyResume+0xdc>
    ec30:	e0bff717 	ldw	r2,-36(fp)
    ec34:	e0bffc15 	stw	r2,-16(fp)
    ec38:	e0bffc17 	ldw	r2,-16(fp)
    ec3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    ec40:	00801404 	movi	r2,80
    ec44:	00004006 	br	ed48 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    ec48:	e0bff817 	ldw	r2,-32(fp)
    ec4c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    ec50:	e0bff817 	ldw	r2,-32(fp)
    ec54:	10800c03 	ldbu	r2,48(r2)
    ec58:	10803fcc 	andi	r2,r2,255
    ec5c:	10800dcc 	andi	r2,r2,55
    ec60:	10000b26 	beq	r2,zero,ec90 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    ec64:	e0bff817 	ldw	r2,-32(fp)
    ec68:	10c00c03 	ldbu	r3,48(r2)
    ec6c:	00bff204 	movi	r2,-56
    ec70:	1884703a 	and	r2,r3,r2
    ec74:	1007883a 	mov	r3,r2
    ec78:	e0bff817 	ldw	r2,-32(fp)
    ec7c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    ec80:	e0bff817 	ldw	r2,-32(fp)
    ec84:	00c00044 	movi	r3,1
    ec88:	10c00c45 	stb	r3,49(r2)
    ec8c:	00000206 	br	ec98 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    ec90:	e0bff817 	ldw	r2,-32(fp)
    ec94:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    ec98:	e0bff817 	ldw	r2,-32(fp)
    ec9c:	10800c03 	ldbu	r2,48(r2)
    eca0:	10803fcc 	andi	r2,r2,255
    eca4:	1080020c 	andi	r2,r2,8
    eca8:	1000221e 	bne	r2,zero,ed34 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    ecac:	e0bff817 	ldw	r2,-32(fp)
    ecb0:	10c00d83 	ldbu	r3,54(r2)
    ecb4:	00800074 	movhi	r2,1
    ecb8:	109bd204 	addi	r2,r2,28488
    ecbc:	10800003 	ldbu	r2,0(r2)
    ecc0:	1884b03a 	or	r2,r3,r2
    ecc4:	1007883a 	mov	r3,r2
    ecc8:	00800074 	movhi	r2,1
    eccc:	109bd204 	addi	r2,r2,28488
    ecd0:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    ecd4:	e0bff817 	ldw	r2,-32(fp)
    ecd8:	10800d03 	ldbu	r2,52(r2)
    ecdc:	10c03fcc 	andi	r3,r2,255
    ece0:	e0bff817 	ldw	r2,-32(fp)
    ece4:	10800d03 	ldbu	r2,52(r2)
    ece8:	11003fcc 	andi	r4,r2,255
    ecec:	00800074 	movhi	r2,1
    ecf0:	109bd244 	addi	r2,r2,28489
    ecf4:	1105883a 	add	r2,r2,r4
    ecf8:	11000003 	ldbu	r4,0(r2)
    ecfc:	e0bff817 	ldw	r2,-32(fp)
    ed00:	10800d43 	ldbu	r2,53(r2)
    ed04:	2084b03a 	or	r2,r4,r2
    ed08:	1009883a 	mov	r4,r2
    ed0c:	00800074 	movhi	r2,1
    ed10:	109bd244 	addi	r2,r2,28489
    ed14:	10c5883a 	add	r2,r2,r3
    ed18:	11000005 	stb	r4,0(r2)
    ed1c:	e0bff717 	ldw	r2,-36(fp)
    ed20:	e0bffd15 	stw	r2,-12(fp)
    ed24:	e0bffd17 	ldw	r2,-12(fp)
    ed28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    ed2c:	0007f240 	call	7f24 <OS_Sched>
    ed30:	00000406 	br	ed44 <OSTimeDlyResume+0x1d8>
    ed34:	e0bff717 	ldw	r2,-36(fp)
    ed38:	e0bffe15 	stw	r2,-8(fp)
    ed3c:	e0bffe17 	ldw	r2,-8(fp)
    ed40:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    ed44:	0005883a 	mov	r2,zero
}
    ed48:	e037883a 	mov	sp,fp
    ed4c:	dfc00117 	ldw	ra,4(sp)
    ed50:	df000017 	ldw	fp,0(sp)
    ed54:	dec00204 	addi	sp,sp,8
    ed58:	f800283a 	ret

0000ed5c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    ed5c:	defffb04 	addi	sp,sp,-20
    ed60:	df000415 	stw	fp,16(sp)
    ed64:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ed68:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ed6c:	0005303a 	rdctl	r2,status
    ed70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ed74:	e0fffe17 	ldw	r3,-8(fp)
    ed78:	00bfff84 	movi	r2,-2
    ed7c:	1884703a 	and	r2,r3,r2
    ed80:	1001703a 	wrctl	status,r2
  
  return context;
    ed84:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    ed88:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
    ed8c:	00800074 	movhi	r2,1
    ed90:	109bd604 	addi	r2,r2,28504
    ed94:	10800017 	ldw	r2,0(r2)
    ed98:	e0bffd15 	stw	r2,-12(fp)
    ed9c:	e0bffc17 	ldw	r2,-16(fp)
    eda0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eda4:	e0bfff17 	ldw	r2,-4(fp)
    eda8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
    edac:	e0bffd17 	ldw	r2,-12(fp)
}
    edb0:	e037883a 	mov	sp,fp
    edb4:	df000017 	ldw	fp,0(sp)
    edb8:	dec00104 	addi	sp,sp,4
    edbc:	f800283a 	ret

0000edc0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    edc0:	defffb04 	addi	sp,sp,-20
    edc4:	df000415 	stw	fp,16(sp)
    edc8:	df000404 	addi	fp,sp,16
    edcc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    edd0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    edd4:	0005303a 	rdctl	r2,status
    edd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eddc:	e0fffd17 	ldw	r3,-12(fp)
    ede0:	00bfff84 	movi	r2,-2
    ede4:	1884703a 	and	r2,r3,r2
    ede8:	1001703a 	wrctl	status,r2
  
  return context;
    edec:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    edf0:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
    edf4:	00800074 	movhi	r2,1
    edf8:	109bd604 	addi	r2,r2,28504
    edfc:	e0ffff17 	ldw	r3,-4(fp)
    ee00:	10c00015 	stw	r3,0(r2)
    ee04:	e0bffc17 	ldw	r2,-16(fp)
    ee08:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ee0c:	e0bffe17 	ldw	r2,-8(fp)
    ee10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    ee14:	e037883a 	mov	sp,fp
    ee18:	df000017 	ldw	fp,0(sp)
    ee1c:	dec00104 	addi	sp,sp,4
    ee20:	f800283a 	ret

0000ee24 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    ee24:	defffd04 	addi	sp,sp,-12
    ee28:	dfc00215 	stw	ra,8(sp)
    ee2c:	df000115 	stw	fp,4(sp)
    ee30:	df000104 	addi	fp,sp,4
    ee34:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    ee38:	e13fff17 	ldw	r4,-4(fp)
    ee3c:	01400074 	movhi	r5,1
    ee40:	2953c604 	addi	r5,r5,20248
    ee44:	00117f80 	call	117f8 <alt_dev_llist_insert>
}
    ee48:	e037883a 	mov	sp,fp
    ee4c:	dfc00117 	ldw	ra,4(sp)
    ee50:	df000017 	ldw	fp,0(sp)
    ee54:	dec00204 	addi	sp,sp,8
    ee58:	f800283a 	ret

0000ee5c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ee5c:	defffd04 	addi	sp,sp,-12
    ee60:	dfc00215 	stw	ra,8(sp)
    ee64:	df000115 	stw	fp,4(sp)
    ee68:	df000104 	addi	fp,sp,4
    ee6c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    ee70:	001210c0 	call	1210c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ee74:	00800044 	movi	r2,1
    ee78:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ee7c:	e037883a 	mov	sp,fp
    ee80:	dfc00117 	ldw	ra,4(sp)
    ee84:	df000017 	ldw	fp,0(sp)
    ee88:	dec00204 	addi	sp,sp,8
    ee8c:	f800283a 	ret

0000ee90 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ee90:	defffd04 	addi	sp,sp,-12
    ee94:	dfc00215 	stw	ra,8(sp)
    ee98:	df000115 	stw	fp,4(sp)
    ee9c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    eea0:	01040034 	movhi	r4,4096
    eea4:	21080004 	addi	r4,r4,8192
    eea8:	000b883a 	mov	r5,zero
    eeac:	000d883a 	mov	r6,zero
    eeb0:	01c00204 	movi	r7,8
    eeb4:	00100040 	call	10004 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    eeb8:	01000074 	movhi	r4,1
    eebc:	210ec204 	addi	r4,r4,15112
    eec0:	000b883a 	mov	r5,zero
    eec4:	01800204 	movi	r6,8
    eec8:	000f3cc0 	call	f3cc <altera_avalon_jtag_uart_init>
    eecc:	01000074 	movhi	r4,1
    eed0:	210eb804 	addi	r4,r4,15072
    eed4:	000ee240 	call	ee24 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    eed8:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    eedc:	01000074 	movhi	r4,1
    eee0:	2112d304 	addi	r4,r4,19276
    eee4:	000ee240 	call	ee24 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    eee8:	01000074 	movhi	r4,1
    eeec:	2112df04 	addi	r4,r4,19324
    eef0:	000ee240 	call	ee24 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    eef4:	01000074 	movhi	r4,1
    eef8:	2112eb04 	addi	r4,r4,19372
    eefc:	00101340 	call	10134 <alt_up_character_lcd_init>
    ef00:	01000074 	movhi	r4,1
    ef04:	2112eb04 	addi	r4,r4,19372
    ef08:	000ee240 	call	ee24 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
    ef0c:	01000074 	movhi	r4,1
    ef10:	2112f604 	addi	r4,r4,19416
    ef14:	000ee240 	call	ee24 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
    ef18:	01000074 	movhi	r4,1
    ef1c:	21130104 	addi	r4,r4,19460
    ef20:	000ee240 	call	ee24 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    ef24:	01000074 	movhi	r4,1
    ef28:	21130c04 	addi	r4,r4,19504
    ef2c:	000ee240 	call	ee24 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    ef30:	01000074 	movhi	r4,1
    ef34:	21131704 	addi	r4,r4,19548
    ef38:	000ee240 	call	ee24 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    ef3c:	01000074 	movhi	r4,1
    ef40:	21132204 	addi	r4,r4,19592
    ef44:	000ee240 	call	ee24 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ef48:	01000074 	movhi	r4,1
    ef4c:	21132d04 	addi	r4,r4,19636
    ef50:	000ee240 	call	ee24 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ef54:	01000074 	movhi	r4,1
    ef58:	21133804 	addi	r4,r4,19680
    ef5c:	000ee240 	call	ee24 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ef60:	01000074 	movhi	r4,1
    ef64:	21134304 	addi	r4,r4,19724
    ef68:	000ee240 	call	ee24 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    ef6c:	01000074 	movhi	r4,1
    ef70:	21134e04 	addi	r4,r4,19768
    ef74:	0010a4c0 	call	10a4c <alt_up_ps2_init>
    ef78:	01000074 	movhi	r4,1
    ef7c:	21134e04 	addi	r4,r4,19768
    ef80:	000ee240 	call	ee24 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    ef84:	01000074 	movhi	r4,1
    ef88:	21135c04 	addi	r4,r4,19824
    ef8c:	0010a4c0 	call	10a4c <alt_up_ps2_init>
    ef90:	01000074 	movhi	r4,1
    ef94:	21135c04 	addi	r4,r4,19824
    ef98:	000ee240 	call	ee24 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ef9c:	01000074 	movhi	r4,1
    efa0:	21136a04 	addi	r4,r4,19880
    efa4:	000ee240 	call	ee24 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    efa8:	01000074 	movhi	r4,1
    efac:	21137504 	addi	r4,r4,19924
    efb0:	000ee240 	call	ee24 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
    efb4:	00800074 	movhi	r2,1
    efb8:	10938204 	addi	r2,r2,19976
    efbc:	10800a17 	ldw	r2,40(r2)
    efc0:	10800104 	addi	r2,r2,4
    efc4:	10800017 	ldw	r2,0(r2)
    efc8:	10ffffcc 	andi	r3,r2,65535
    efcc:	00800074 	movhi	r2,1
    efd0:	10938204 	addi	r2,r2,19976
    efd4:	10c00c15 	stw	r3,48(r2)
    efd8:	00800074 	movhi	r2,1
    efdc:	10938204 	addi	r2,r2,19976
    efe0:	10800a17 	ldw	r2,40(r2)
    efe4:	10800104 	addi	r2,r2,4
    efe8:	10800017 	ldw	r2,0(r2)
    efec:	1006d43a 	srli	r3,r2,16
    eff0:	00800074 	movhi	r2,1
    eff4:	10938204 	addi	r2,r2,19976
    eff8:	10c00d15 	stw	r3,52(r2)
    effc:	00800074 	movhi	r2,1
    f000:	10938204 	addi	r2,r2,19976
    f004:	10800c17 	ldw	r2,48(r2)
    f008:	10801068 	cmpgeui	r2,r2,65
    f00c:	1000081e 	bne	r2,zero,f030 <alt_sys_init+0x1a0>
    f010:	00800074 	movhi	r2,1
    f014:	10938204 	addi	r2,r2,19976
    f018:	00c00fc4 	movi	r3,63
    f01c:	10c00f15 	stw	r3,60(r2)
    f020:	00800074 	movhi	r2,1
    f024:	10938204 	addi	r2,r2,19976
    f028:	00c00184 	movi	r3,6
    f02c:	10c01015 	stw	r3,64(r2)
    f030:	00800074 	movhi	r2,1
    f034:	10938204 	addi	r2,r2,19976
    f038:	10800d17 	ldw	r2,52(r2)
    f03c:	10800868 	cmpgeui	r2,r2,33
    f040:	1000041e 	bne	r2,zero,f054 <alt_sys_init+0x1c4>
    f044:	00800074 	movhi	r2,1
    f048:	10938204 	addi	r2,r2,19976
    f04c:	00c007c4 	movi	r3,31
    f050:	10c01115 	stw	r3,68(r2)
    f054:	01000074 	movhi	r4,1
    f058:	21138204 	addi	r4,r4,19976
    f05c:	00113640 	call	11364 <alt_up_char_buffer_init>
    f060:	01000074 	movhi	r4,1
    f064:	21138204 	addi	r4,r4,19976
    f068:	000ee240 	call	ee24 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
    f06c:	00800074 	movhi	r2,1
    f070:	10939404 	addi	r2,r2,20048
    f074:	10800a17 	ldw	r2,40(r2)
    f078:	10800017 	ldw	r2,0(r2)
    f07c:	1007883a 	mov	r3,r2
    f080:	00800074 	movhi	r2,1
    f084:	10939404 	addi	r2,r2,20048
    f088:	10c00b15 	stw	r3,44(r2)
    f08c:	00800074 	movhi	r2,1
    f090:	10939404 	addi	r2,r2,20048
    f094:	10800a17 	ldw	r2,40(r2)
    f098:	10800104 	addi	r2,r2,4
    f09c:	10800017 	ldw	r2,0(r2)
    f0a0:	1007883a 	mov	r3,r2
    f0a4:	00800074 	movhi	r2,1
    f0a8:	10939404 	addi	r2,r2,20048
    f0ac:	10c00c15 	stw	r3,48(r2)
    f0b0:	00800074 	movhi	r2,1
    f0b4:	10939404 	addi	r2,r2,20048
    f0b8:	10800a17 	ldw	r2,40(r2)
    f0bc:	10800204 	addi	r2,r2,8
    f0c0:	10800017 	ldw	r2,0(r2)
    f0c4:	10ffffcc 	andi	r3,r2,65535
    f0c8:	00800074 	movhi	r2,1
    f0cc:	10939404 	addi	r2,r2,20048
    f0d0:	10c00f15 	stw	r3,60(r2)
    f0d4:	00800074 	movhi	r2,1
    f0d8:	10939404 	addi	r2,r2,20048
    f0dc:	10800a17 	ldw	r2,40(r2)
    f0e0:	10800204 	addi	r2,r2,8
    f0e4:	10800017 	ldw	r2,0(r2)
    f0e8:	1006d43a 	srli	r3,r2,16
    f0ec:	00800074 	movhi	r2,1
    f0f0:	10939404 	addi	r2,r2,20048
    f0f4:	10c01015 	stw	r3,64(r2)
    f0f8:	00800074 	movhi	r2,1
    f0fc:	10939404 	addi	r2,r2,20048
    f100:	10800a17 	ldw	r2,40(r2)
    f104:	10800304 	addi	r2,r2,12
    f108:	10800017 	ldw	r2,0(r2)
    f10c:	1005d07a 	srai	r2,r2,1
    f110:	10c0004c 	andi	r3,r2,1
    f114:	00800074 	movhi	r2,1
    f118:	10939404 	addi	r2,r2,20048
    f11c:	10c00d15 	stw	r3,52(r2)
    f120:	00800074 	movhi	r2,1
    f124:	10939404 	addi	r2,r2,20048
    f128:	10800a17 	ldw	r2,40(r2)
    f12c:	10800304 	addi	r2,r2,12
    f130:	10800017 	ldw	r2,0(r2)
    f134:	1005d13a 	srai	r2,r2,4
    f138:	10c003cc 	andi	r3,r2,15
    f13c:	00800074 	movhi	r2,1
    f140:	10939404 	addi	r2,r2,20048
    f144:	10c00e15 	stw	r3,56(r2)
    f148:	00800074 	movhi	r2,1
    f14c:	10939404 	addi	r2,r2,20048
    f150:	10800a17 	ldw	r2,40(r2)
    f154:	10800304 	addi	r2,r2,12
    f158:	10800017 	ldw	r2,0(r2)
    f15c:	1005d43a 	srai	r2,r2,16
    f160:	e0bfff05 	stb	r2,-4(fp)
    f164:	00800074 	movhi	r2,1
    f168:	10939404 	addi	r2,r2,20048
    f16c:	10800a17 	ldw	r2,40(r2)
    f170:	10800304 	addi	r2,r2,12
    f174:	10800017 	ldw	r2,0(r2)
    f178:	1004d63a 	srli	r2,r2,24
    f17c:	e0bfff45 	stb	r2,-3(fp)
    f180:	00800074 	movhi	r2,1
    f184:	10939404 	addi	r2,r2,20048
    f188:	10800e17 	ldw	r2,56(r2)
    f18c:	10800058 	cmpnei	r2,r2,1
    f190:	1000041e 	bne	r2,zero,f1a4 <alt_sys_init+0x314>
    f194:	00800074 	movhi	r2,1
    f198:	10939404 	addi	r2,r2,20048
    f19c:	10001115 	stw	zero,68(r2)
    f1a0:	00000e06 	br	f1dc <alt_sys_init+0x34c>
    f1a4:	00800074 	movhi	r2,1
    f1a8:	10939404 	addi	r2,r2,20048
    f1ac:	10800e17 	ldw	r2,56(r2)
    f1b0:	10800098 	cmpnei	r2,r2,2
    f1b4:	1000051e 	bne	r2,zero,f1cc <alt_sys_init+0x33c>
    f1b8:	00800074 	movhi	r2,1
    f1bc:	10939404 	addi	r2,r2,20048
    f1c0:	00c00044 	movi	r3,1
    f1c4:	10c01115 	stw	r3,68(r2)
    f1c8:	00000406 	br	f1dc <alt_sys_init+0x34c>
    f1cc:	00800074 	movhi	r2,1
    f1d0:	10939404 	addi	r2,r2,20048
    f1d4:	00c00084 	movi	r3,2
    f1d8:	10c01115 	stw	r3,68(r2)
    f1dc:	e0bfff03 	ldbu	r2,-4(fp)
    f1e0:	00c00804 	movi	r3,32
    f1e4:	1885c83a 	sub	r2,r3,r2
    f1e8:	00ffffc4 	movi	r3,-1
    f1ec:	1886d83a 	srl	r3,r3,r2
    f1f0:	00800074 	movhi	r2,1
    f1f4:	10939404 	addi	r2,r2,20048
    f1f8:	10c01215 	stw	r3,72(r2)
    f1fc:	e0ffff03 	ldbu	r3,-4(fp)
    f200:	00800074 	movhi	r2,1
    f204:	10939404 	addi	r2,r2,20048
    f208:	10801117 	ldw	r2,68(r2)
    f20c:	1887883a 	add	r3,r3,r2
    f210:	00800074 	movhi	r2,1
    f214:	10939404 	addi	r2,r2,20048
    f218:	10c01315 	stw	r3,76(r2)
    f21c:	e0bfff43 	ldbu	r2,-3(fp)
    f220:	00c00804 	movi	r3,32
    f224:	1885c83a 	sub	r2,r3,r2
    f228:	00ffffc4 	movi	r3,-1
    f22c:	1886d83a 	srl	r3,r3,r2
    f230:	00800074 	movhi	r2,1
    f234:	10939404 	addi	r2,r2,20048
    f238:	10c01415 	stw	r3,80(r2)
    f23c:	01000074 	movhi	r4,1
    f240:	21139404 	addi	r4,r4,20048
    f244:	000ee240 	call	ee24 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    f248:	01000074 	movhi	r4,1
    f24c:	2113a904 	addi	r4,r4,20132
    f250:	000ee240 	call	ee24 <alt_dev_reg>
}
    f254:	e037883a 	mov	sp,fp
    f258:	dfc00117 	ldw	ra,4(sp)
    f25c:	df000017 	ldw	fp,0(sp)
    f260:	dec00204 	addi	sp,sp,8
    f264:	f800283a 	ret

0000f268 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f268:	defffa04 	addi	sp,sp,-24
    f26c:	dfc00515 	stw	ra,20(sp)
    f270:	df000415 	stw	fp,16(sp)
    f274:	df000404 	addi	fp,sp,16
    f278:	e13ffd15 	stw	r4,-12(fp)
    f27c:	e17ffe15 	stw	r5,-8(fp)
    f280:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f284:	e0bffd17 	ldw	r2,-12(fp)
    f288:	10800017 	ldw	r2,0(r2)
    f28c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f290:	e0bffc17 	ldw	r2,-16(fp)
    f294:	10c00a04 	addi	r3,r2,40
    f298:	e0bffd17 	ldw	r2,-12(fp)
    f29c:	10800217 	ldw	r2,8(r2)
    f2a0:	1809883a 	mov	r4,r3
    f2a4:	e17ffe17 	ldw	r5,-8(fp)
    f2a8:	e1bfff17 	ldw	r6,-4(fp)
    f2ac:	100f883a 	mov	r7,r2
    f2b0:	000fa180 	call	fa18 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f2b4:	e037883a 	mov	sp,fp
    f2b8:	dfc00117 	ldw	ra,4(sp)
    f2bc:	df000017 	ldw	fp,0(sp)
    f2c0:	dec00204 	addi	sp,sp,8
    f2c4:	f800283a 	ret

0000f2c8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f2c8:	defffa04 	addi	sp,sp,-24
    f2cc:	dfc00515 	stw	ra,20(sp)
    f2d0:	df000415 	stw	fp,16(sp)
    f2d4:	df000404 	addi	fp,sp,16
    f2d8:	e13ffd15 	stw	r4,-12(fp)
    f2dc:	e17ffe15 	stw	r5,-8(fp)
    f2e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f2e4:	e0bffd17 	ldw	r2,-12(fp)
    f2e8:	10800017 	ldw	r2,0(r2)
    f2ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f2f0:	e0bffc17 	ldw	r2,-16(fp)
    f2f4:	10c00a04 	addi	r3,r2,40
    f2f8:	e0bffd17 	ldw	r2,-12(fp)
    f2fc:	10800217 	ldw	r2,8(r2)
    f300:	1809883a 	mov	r4,r3
    f304:	e17ffe17 	ldw	r5,-8(fp)
    f308:	e1bfff17 	ldw	r6,-4(fp)
    f30c:	100f883a 	mov	r7,r2
    f310:	000fccc0 	call	fccc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f314:	e037883a 	mov	sp,fp
    f318:	dfc00117 	ldw	ra,4(sp)
    f31c:	df000017 	ldw	fp,0(sp)
    f320:	dec00204 	addi	sp,sp,8
    f324:	f800283a 	ret

0000f328 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f328:	defffc04 	addi	sp,sp,-16
    f32c:	dfc00315 	stw	ra,12(sp)
    f330:	df000215 	stw	fp,8(sp)
    f334:	df000204 	addi	fp,sp,8
    f338:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f33c:	e0bfff17 	ldw	r2,-4(fp)
    f340:	10800017 	ldw	r2,0(r2)
    f344:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f348:	e0bffe17 	ldw	r2,-8(fp)
    f34c:	10c00a04 	addi	r3,r2,40
    f350:	e0bfff17 	ldw	r2,-4(fp)
    f354:	10800217 	ldw	r2,8(r2)
    f358:	1809883a 	mov	r4,r3
    f35c:	100b883a 	mov	r5,r2
    f360:	000f8c40 	call	f8c4 <altera_avalon_jtag_uart_close>
}
    f364:	e037883a 	mov	sp,fp
    f368:	dfc00117 	ldw	ra,4(sp)
    f36c:	df000017 	ldw	fp,0(sp)
    f370:	dec00204 	addi	sp,sp,8
    f374:	f800283a 	ret

0000f378 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f378:	defffa04 	addi	sp,sp,-24
    f37c:	dfc00515 	stw	ra,20(sp)
    f380:	df000415 	stw	fp,16(sp)
    f384:	df000404 	addi	fp,sp,16
    f388:	e13ffd15 	stw	r4,-12(fp)
    f38c:	e17ffe15 	stw	r5,-8(fp)
    f390:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f394:	e0bffd17 	ldw	r2,-12(fp)
    f398:	10800017 	ldw	r2,0(r2)
    f39c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f3a0:	e0bffc17 	ldw	r2,-16(fp)
    f3a4:	10800a04 	addi	r2,r2,40
    f3a8:	1009883a 	mov	r4,r2
    f3ac:	e17ffe17 	ldw	r5,-8(fp)
    f3b0:	e1bfff17 	ldw	r6,-4(fp)
    f3b4:	000f92c0 	call	f92c <altera_avalon_jtag_uart_ioctl>
}
    f3b8:	e037883a 	mov	sp,fp
    f3bc:	dfc00117 	ldw	ra,4(sp)
    f3c0:	df000017 	ldw	fp,0(sp)
    f3c4:	dec00204 	addi	sp,sp,8
    f3c8:	f800283a 	ret

0000f3cc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f3cc:	defff104 	addi	sp,sp,-60
    f3d0:	dfc00e15 	stw	ra,56(sp)
    f3d4:	df000d15 	stw	fp,52(sp)
    f3d8:	df000d04 	addi	fp,sp,52
    f3dc:	e13ff915 	stw	r4,-28(fp)
    f3e0:	e17ffa15 	stw	r5,-24(fp)
    f3e4:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    f3e8:	e0bff917 	ldw	r2,-28(fp)
    f3ec:	10800c04 	addi	r2,r2,48
    f3f0:	e0bff315 	stw	r2,-52(fp)
    f3f4:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    f3f8:	e0fff40b 	ldhu	r3,-48(fp)
    f3fc:	e0bff884 	addi	r2,fp,-30
    f400:	1809883a 	mov	r4,r3
    f404:	100b883a 	mov	r5,r2
    f408:	0008a900 	call	8a90 <OSFlagCreate>
    f40c:	1007883a 	mov	r3,r2
    f410:	e0bff317 	ldw	r2,-52(fp)
    f414:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    f418:	e0bff917 	ldw	r2,-28(fp)
    f41c:	10800a04 	addi	r2,r2,40
    f420:	e0bff515 	stw	r2,-44(fp)
    f424:	00800044 	movi	r2,1
    f428:	e0bff60d 	sth	r2,-40(fp)
    f42c:	e0bff60b 	ldhu	r2,-40(fp)
    f430:	1009883a 	mov	r4,r2
    f434:	000c5700 	call	c570 <OSSemCreate>
    f438:	1007883a 	mov	r3,r2
    f43c:	e0bff517 	ldw	r2,-44(fp)
    f440:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
    f444:	e0bff917 	ldw	r2,-28(fp)
    f448:	10800b04 	addi	r2,r2,44
    f44c:	e0bff715 	stw	r2,-36(fp)
    f450:	00800044 	movi	r2,1
    f454:	e0bff80d 	sth	r2,-32(fp)
    f458:	e0bff80b 	ldhu	r2,-32(fp)
    f45c:	1009883a 	mov	r4,r2
    f460:	000c5700 	call	c570 <OSSemCreate>
    f464:	1007883a 	mov	r3,r2
    f468:	e0bff717 	ldw	r2,-36(fp)
    f46c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f470:	e0bff917 	ldw	r2,-28(fp)
    f474:	00c00044 	movi	r3,1
    f478:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f47c:	e0bff917 	ldw	r2,-28(fp)
    f480:	10800017 	ldw	r2,0(r2)
    f484:	10800104 	addi	r2,r2,4
    f488:	1007883a 	mov	r3,r2
    f48c:	e0bff917 	ldw	r2,-28(fp)
    f490:	10800817 	ldw	r2,32(r2)
    f494:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    f498:	e0bffb17 	ldw	r2,-20(fp)
    f49c:	1009883a 	mov	r4,r2
    f4a0:	e17ff917 	ldw	r5,-28(fp)
    f4a4:	01800074 	movhi	r6,1
    f4a8:	31bd4304 	addi	r6,r6,-2804
    f4ac:	0011b4c0 	call	11b4c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f4b0:	e0bff917 	ldw	r2,-28(fp)
    f4b4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f4b8:	e0bff917 	ldw	r2,-28(fp)
    f4bc:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f4c0:	00800074 	movhi	r2,1
    f4c4:	109bdb04 	addi	r2,r2,28524
    f4c8:	10800017 	ldw	r2,0(r2)
    f4cc:	1809883a 	mov	r4,r3
    f4d0:	100b883a 	mov	r5,r2
    f4d4:	01800074 	movhi	r6,1
    f4d8:	31bded04 	addi	r6,r6,-2124
    f4dc:	e1fff917 	ldw	r7,-28(fp)
    f4e0:	001164c0 	call	1164c <alt_alarm_start>
    f4e4:	1000040e 	bge	r2,zero,f4f8 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f4e8:	e0fff917 	ldw	r3,-28(fp)
    f4ec:	00a00034 	movhi	r2,32768
    f4f0:	10bfffc4 	addi	r2,r2,-1
    f4f4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f4f8:	e037883a 	mov	sp,fp
    f4fc:	dfc00117 	ldw	ra,4(sp)
    f500:	df000017 	ldw	fp,0(sp)
    f504:	dec00204 	addi	sp,sp,8
    f508:	f800283a 	ret

0000f50c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f50c:	defff104 	addi	sp,sp,-60
    f510:	dfc00e15 	stw	ra,56(sp)
    f514:	df000d15 	stw	fp,52(sp)
    f518:	df000d04 	addi	fp,sp,52
    f51c:	e13ffe15 	stw	r4,-8(fp)
    f520:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f524:	e0bffe17 	ldw	r2,-8(fp)
    f528:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
    f52c:	e0bff517 	ldw	r2,-44(fp)
    f530:	10800017 	ldw	r2,0(r2)
    f534:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f538:	e0bff617 	ldw	r2,-40(fp)
    f53c:	10800104 	addi	r2,r2,4
    f540:	10800037 	ldwio	r2,0(r2)
    f544:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f548:	e0bff717 	ldw	r2,-36(fp)
    f54c:	1080c00c 	andi	r2,r2,768
    f550:	1000011e 	bne	r2,zero,f558 <altera_avalon_jtag_uart_irq+0x4c>
      break;
    f554:	00009206 	br	f7a0 <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f558:	e0bff717 	ldw	r2,-36(fp)
    f55c:	1080400c 	andi	r2,r2,256
    f560:	10004726 	beq	r2,zero,f680 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f564:	00800074 	movhi	r2,1
    f568:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f56c:	e0bff517 	ldw	r2,-44(fp)
    f570:	10800d17 	ldw	r2,52(r2)
    f574:	10800044 	addi	r2,r2,1
    f578:	1081ffcc 	andi	r2,r2,2047
    f57c:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
    f580:	e0bff517 	ldw	r2,-44(fp)
    f584:	10c00e17 	ldw	r3,56(r2)
    f588:	e0bff817 	ldw	r2,-32(fp)
    f58c:	1880011e 	bne	r3,r2,f594 <altera_avalon_jtag_uart_irq+0x88>
          break;
    f590:	00002906 	br	f638 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f594:	e0bff617 	ldw	r2,-40(fp)
    f598:	10800037 	ldwio	r2,0(r2)
    f59c:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f5a0:	e0bff317 	ldw	r2,-52(fp)
    f5a4:	10a0000c 	andi	r2,r2,32768
    f5a8:	1000011e 	bne	r2,zero,f5b0 <altera_avalon_jtag_uart_irq+0xa4>
          break;
    f5ac:	00002206 	br	f638 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f5b0:	e0bff517 	ldw	r2,-44(fp)
    f5b4:	10800d17 	ldw	r2,52(r2)
    f5b8:	e0fff317 	ldw	r3,-52(fp)
    f5bc:	1809883a 	mov	r4,r3
    f5c0:	e0fff517 	ldw	r3,-44(fp)
    f5c4:	1885883a 	add	r2,r3,r2
    f5c8:	10801104 	addi	r2,r2,68
    f5cc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f5d0:	e0bff517 	ldw	r2,-44(fp)
    f5d4:	10800d17 	ldw	r2,52(r2)
    f5d8:	10800044 	addi	r2,r2,1
    f5dc:	10c1ffcc 	andi	r3,r2,2047
    f5e0:	e0bff517 	ldw	r2,-44(fp)
    f5e4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    f5e8:	e0bff517 	ldw	r2,-44(fp)
    f5ec:	10800c17 	ldw	r2,48(r2)
    f5f0:	e0bff915 	stw	r2,-28(fp)
    f5f4:	00800044 	movi	r2,1
    f5f8:	e0bffa0d 	sth	r2,-24(fp)
    f5fc:	00800044 	movi	r2,1
    f600:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    f604:	00800074 	movhi	r2,1
    f608:	109bc644 	addi	r2,r2,28441
    f60c:	10800003 	ldbu	r2,0(r2)
    f610:	10803fcc 	andi	r2,r2,255
    f614:	103fd526 	beq	r2,zero,f56c <__alt_mem_Flash_flash_data+0xf400f56c>
  {
    OSFlagPost (group, flags, opt, &err);
    f618:	e17ffa0b 	ldhu	r5,-24(fp)
    f61c:	e0fffa83 	ldbu	r3,-22(fp)
    f620:	e0bffcc4 	addi	r2,fp,-13
    f624:	e13ff917 	ldw	r4,-28(fp)
    f628:	180d883a 	mov	r6,r3
    f62c:	100f883a 	mov	r7,r2
    f630:	00097000 	call	9700 <OSFlagPost>
      }
    f634:	003fcd06 	br	f56c <__alt_mem_Flash_flash_data+0xf400f56c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f638:	e0bff317 	ldw	r2,-52(fp)
    f63c:	10bfffec 	andhi	r2,r2,65535
    f640:	10000f26 	beq	r2,zero,f680 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f644:	e0bff517 	ldw	r2,-44(fp)
    f648:	10c00817 	ldw	r3,32(r2)
    f64c:	00bfff84 	movi	r2,-2
    f650:	1886703a 	and	r3,r3,r2
    f654:	e0bff517 	ldw	r2,-44(fp)
    f658:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f65c:	e0bff617 	ldw	r2,-40(fp)
    f660:	10800104 	addi	r2,r2,4
    f664:	1007883a 	mov	r3,r2
    f668:	e0bff517 	ldw	r2,-44(fp)
    f66c:	10800817 	ldw	r2,32(r2)
    f670:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f674:	e0bff617 	ldw	r2,-40(fp)
    f678:	10800104 	addi	r2,r2,4
    f67c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f680:	e0bff717 	ldw	r2,-36(fp)
    f684:	1080800c 	andi	r2,r2,512
    f688:	10004426 	beq	r2,zero,f79c <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f68c:	e0bff717 	ldw	r2,-36(fp)
    f690:	1004d43a 	srli	r2,r2,16
    f694:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f698:	00002706 	br	f738 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f69c:	e0bff617 	ldw	r2,-40(fp)
    f6a0:	e0fff517 	ldw	r3,-44(fp)
    f6a4:	18c01017 	ldw	r3,64(r3)
    f6a8:	e13ff517 	ldw	r4,-44(fp)
    f6ac:	20c7883a 	add	r3,r4,r3
    f6b0:	18c21104 	addi	r3,r3,2116
    f6b4:	18c00003 	ldbu	r3,0(r3)
    f6b8:	18c03fcc 	andi	r3,r3,255
    f6bc:	18c0201c 	xori	r3,r3,128
    f6c0:	18ffe004 	addi	r3,r3,-128
    f6c4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f6c8:	e0bff517 	ldw	r2,-44(fp)
    f6cc:	10801017 	ldw	r2,64(r2)
    f6d0:	10800044 	addi	r2,r2,1
    f6d4:	10c1ffcc 	andi	r3,r2,2047
    f6d8:	e0bff517 	ldw	r2,-44(fp)
    f6dc:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    f6e0:	e0bff517 	ldw	r2,-44(fp)
    f6e4:	10800c17 	ldw	r2,48(r2)
    f6e8:	e0bffb15 	stw	r2,-20(fp)
    f6ec:	00800084 	movi	r2,2
    f6f0:	e0bffc0d 	sth	r2,-16(fp)
    f6f4:	00800044 	movi	r2,1
    f6f8:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    f6fc:	00800074 	movhi	r2,1
    f700:	109bc644 	addi	r2,r2,28441
    f704:	10800003 	ldbu	r2,0(r2)
    f708:	10803fcc 	andi	r2,r2,255
    f70c:	10000726 	beq	r2,zero,f72c <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
    f710:	e17ffc0b 	ldhu	r5,-16(fp)
    f714:	e0fffc83 	ldbu	r3,-14(fp)
    f718:	e0bffd04 	addi	r2,fp,-12
    f71c:	e13ffb17 	ldw	r4,-20(fp)
    f720:	180d883a 	mov	r6,r3
    f724:	100f883a 	mov	r7,r2
    f728:	00097000 	call	9700 <OSFlagPost>

        space--;
    f72c:	e0bff417 	ldw	r2,-48(fp)
    f730:	10bfffc4 	addi	r2,r2,-1
    f734:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f738:	e0bff417 	ldw	r2,-48(fp)
    f73c:	10000526 	beq	r2,zero,f754 <altera_avalon_jtag_uart_irq+0x248>
    f740:	e0bff517 	ldw	r2,-44(fp)
    f744:	10c01017 	ldw	r3,64(r2)
    f748:	e0bff517 	ldw	r2,-44(fp)
    f74c:	10800f17 	ldw	r2,60(r2)
    f750:	18bfd21e 	bne	r3,r2,f69c <__alt_mem_Flash_flash_data+0xf400f69c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f754:	e0bff417 	ldw	r2,-48(fp)
    f758:	10001026 	beq	r2,zero,f79c <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f75c:	e0bff517 	ldw	r2,-44(fp)
    f760:	10c00817 	ldw	r3,32(r2)
    f764:	00bfff44 	movi	r2,-3
    f768:	1886703a 	and	r3,r3,r2
    f76c:	e0bff517 	ldw	r2,-44(fp)
    f770:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f774:	e0bff517 	ldw	r2,-44(fp)
    f778:	10800017 	ldw	r2,0(r2)
    f77c:	10800104 	addi	r2,r2,4
    f780:	1007883a 	mov	r3,r2
    f784:	e0bff517 	ldw	r2,-44(fp)
    f788:	10800817 	ldw	r2,32(r2)
    f78c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f790:	e0bff617 	ldw	r2,-40(fp)
    f794:	10800104 	addi	r2,r2,4
    f798:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f79c:	003f6606 	br	f538 <__alt_mem_Flash_flash_data+0xf400f538>
}
    f7a0:	e037883a 	mov	sp,fp
    f7a4:	dfc00117 	ldw	ra,4(sp)
    f7a8:	df000017 	ldw	fp,0(sp)
    f7ac:	dec00204 	addi	sp,sp,8
    f7b0:	f800283a 	ret

0000f7b4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f7b4:	defff904 	addi	sp,sp,-28
    f7b8:	dfc00615 	stw	ra,24(sp)
    f7bc:	df000515 	stw	fp,20(sp)
    f7c0:	df000504 	addi	fp,sp,20
    f7c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f7c8:	e0bfff17 	ldw	r2,-4(fp)
    f7cc:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f7d0:	e0bffb17 	ldw	r2,-20(fp)
    f7d4:	10800017 	ldw	r2,0(r2)
    f7d8:	10800104 	addi	r2,r2,4
    f7dc:	10800037 	ldwio	r2,0(r2)
    f7e0:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f7e4:	e0bffc17 	ldw	r2,-16(fp)
    f7e8:	1081000c 	andi	r2,r2,1024
    f7ec:	10000b26 	beq	r2,zero,f81c <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f7f0:	e0bffb17 	ldw	r2,-20(fp)
    f7f4:	10800017 	ldw	r2,0(r2)
    f7f8:	10800104 	addi	r2,r2,4
    f7fc:	1007883a 	mov	r3,r2
    f800:	e0bffb17 	ldw	r2,-20(fp)
    f804:	10800817 	ldw	r2,32(r2)
    f808:	10810014 	ori	r2,r2,1024
    f80c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f810:	e0bffb17 	ldw	r2,-20(fp)
    f814:	10000915 	stw	zero,36(r2)
    f818:	00002206 	br	f8a4 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f81c:	e0bffb17 	ldw	r2,-20(fp)
    f820:	10c00917 	ldw	r3,36(r2)
    f824:	00a00034 	movhi	r2,32768
    f828:	10bfff04 	addi	r2,r2,-4
    f82c:	10c01d36 	bltu	r2,r3,f8a4 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
    f830:	e0bffb17 	ldw	r2,-20(fp)
    f834:	10800917 	ldw	r2,36(r2)
    f838:	10c00044 	addi	r3,r2,1
    f83c:	e0bffb17 	ldw	r2,-20(fp)
    f840:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    f844:	e0bffb17 	ldw	r2,-20(fp)
    f848:	10c00917 	ldw	r3,36(r2)
    f84c:	e0bffb17 	ldw	r2,-20(fp)
    f850:	10800117 	ldw	r2,4(r2)
    f854:	18801336 	bltu	r3,r2,f8a4 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    f858:	e0bffb17 	ldw	r2,-20(fp)
    f85c:	10800c17 	ldw	r2,48(r2)
    f860:	e0bffd15 	stw	r2,-12(fp)
    f864:	00800104 	movi	r2,4
    f868:	e0bffe0d 	sth	r2,-8(fp)
    f86c:	00800044 	movi	r2,1
    f870:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    f874:	00800074 	movhi	r2,1
    f878:	109bc644 	addi	r2,r2,28441
    f87c:	10800003 	ldbu	r2,0(r2)
    f880:	10803fcc 	andi	r2,r2,255
    f884:	10000726 	beq	r2,zero,f8a4 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
    f888:	e17ffe0b 	ldhu	r5,-8(fp)
    f88c:	e0fffe83 	ldbu	r3,-6(fp)
    f890:	e0bffec4 	addi	r2,fp,-5
    f894:	e13ffd17 	ldw	r4,-12(fp)
    f898:	180d883a 	mov	r6,r3
    f89c:	100f883a 	mov	r7,r2
    f8a0:	00097000 	call	9700 <OSFlagPost>
    f8a4:	00800074 	movhi	r2,1
    f8a8:	109bdb04 	addi	r2,r2,28524
    f8ac:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
    f8b0:	e037883a 	mov	sp,fp
    f8b4:	dfc00117 	ldw	ra,4(sp)
    f8b8:	df000017 	ldw	fp,0(sp)
    f8bc:	dec00204 	addi	sp,sp,8
    f8c0:	f800283a 	ret

0000f8c4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f8c4:	defffd04 	addi	sp,sp,-12
    f8c8:	df000215 	stw	fp,8(sp)
    f8cc:	df000204 	addi	fp,sp,8
    f8d0:	e13ffe15 	stw	r4,-8(fp)
    f8d4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f8d8:	00000506 	br	f8f0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f8dc:	e0bfff17 	ldw	r2,-4(fp)
    f8e0:	1090000c 	andi	r2,r2,16384
    f8e4:	10000226 	beq	r2,zero,f8f0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f8e8:	00bffd44 	movi	r2,-11
    f8ec:	00000b06 	br	f91c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f8f0:	e0bffe17 	ldw	r2,-8(fp)
    f8f4:	10c01017 	ldw	r3,64(r2)
    f8f8:	e0bffe17 	ldw	r2,-8(fp)
    f8fc:	10800f17 	ldw	r2,60(r2)
    f900:	18800526 	beq	r3,r2,f918 <altera_avalon_jtag_uart_close+0x54>
    f904:	e0bffe17 	ldw	r2,-8(fp)
    f908:	10c00917 	ldw	r3,36(r2)
    f90c:	e0bffe17 	ldw	r2,-8(fp)
    f910:	10800117 	ldw	r2,4(r2)
    f914:	18bff136 	bltu	r3,r2,f8dc <__alt_mem_Flash_flash_data+0xf400f8dc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f918:	0005883a 	mov	r2,zero
}
    f91c:	e037883a 	mov	sp,fp
    f920:	df000017 	ldw	fp,0(sp)
    f924:	dec00104 	addi	sp,sp,4
    f928:	f800283a 	ret

0000f92c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    f92c:	defffa04 	addi	sp,sp,-24
    f930:	df000515 	stw	fp,20(sp)
    f934:	df000504 	addi	fp,sp,20
    f938:	e13ffd15 	stw	r4,-12(fp)
    f93c:	e17ffe15 	stw	r5,-8(fp)
    f940:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    f944:	00bff9c4 	movi	r2,-25
    f948:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    f94c:	e0bffe17 	ldw	r2,-8(fp)
    f950:	10da8060 	cmpeqi	r3,r2,27137
    f954:	1800031e 	bne	r3,zero,f964 <altera_avalon_jtag_uart_ioctl+0x38>
    f958:	109a80a0 	cmpeqi	r2,r2,27138
    f95c:	1000191e 	bne	r2,zero,f9c4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    f960:	00002806 	br	fa04 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f964:	e0bffd17 	ldw	r2,-12(fp)
    f968:	10c00117 	ldw	r3,4(r2)
    f96c:	00a00034 	movhi	r2,32768
    f970:	10bfffc4 	addi	r2,r2,-1
    f974:	18801226 	beq	r3,r2,f9c0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    f978:	e0bfff17 	ldw	r2,-4(fp)
    f97c:	10800017 	ldw	r2,0(r2)
    f980:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f984:	e0bffc17 	ldw	r2,-16(fp)
    f988:	10800090 	cmplti	r2,r2,2
    f98c:	1000061e 	bne	r2,zero,f9a8 <altera_avalon_jtag_uart_ioctl+0x7c>
    f990:	e0fffc17 	ldw	r3,-16(fp)
    f994:	00a00034 	movhi	r2,32768
    f998:	10bfffc4 	addi	r2,r2,-1
    f99c:	18800226 	beq	r3,r2,f9a8 <altera_avalon_jtag_uart_ioctl+0x7c>
    f9a0:	e0bffc17 	ldw	r2,-16(fp)
    f9a4:	00000206 	br	f9b0 <altera_avalon_jtag_uart_ioctl+0x84>
    f9a8:	00a00034 	movhi	r2,32768
    f9ac:	10bfff84 	addi	r2,r2,-2
    f9b0:	e0fffd17 	ldw	r3,-12(fp)
    f9b4:	18800115 	stw	r2,4(r3)
      rc = 0;
    f9b8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f9bc:	00001106 	br	fa04 <altera_avalon_jtag_uart_ioctl+0xd8>
    f9c0:	00001006 	br	fa04 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f9c4:	e0bffd17 	ldw	r2,-12(fp)
    f9c8:	10c00117 	ldw	r3,4(r2)
    f9cc:	00a00034 	movhi	r2,32768
    f9d0:	10bfffc4 	addi	r2,r2,-1
    f9d4:	18800a26 	beq	r3,r2,fa00 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f9d8:	e0bffd17 	ldw	r2,-12(fp)
    f9dc:	10c00917 	ldw	r3,36(r2)
    f9e0:	e0bffd17 	ldw	r2,-12(fp)
    f9e4:	10800117 	ldw	r2,4(r2)
    f9e8:	1885803a 	cmpltu	r2,r3,r2
    f9ec:	10c03fcc 	andi	r3,r2,255
    f9f0:	e0bfff17 	ldw	r2,-4(fp)
    f9f4:	10c00015 	stw	r3,0(r2)
      rc = 0;
    f9f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f9fc:	00000006 	br	fa00 <altera_avalon_jtag_uart_ioctl+0xd4>
    fa00:	0001883a 	nop

  default:
    break;
  }

  return rc;
    fa04:	e0bffb17 	ldw	r2,-20(fp)
}
    fa08:	e037883a 	mov	sp,fp
    fa0c:	df000017 	ldw	fp,0(sp)
    fa10:	dec00104 	addi	sp,sp,4
    fa14:	f800283a 	ret

0000fa18 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    fa18:	deffec04 	addi	sp,sp,-80
    fa1c:	dfc01315 	stw	ra,76(sp)
    fa20:	df001215 	stw	fp,72(sp)
    fa24:	df001204 	addi	fp,sp,72
    fa28:	e13ffc15 	stw	r4,-16(fp)
    fa2c:	e17ffd15 	stw	r5,-12(fp)
    fa30:	e1bffe15 	stw	r6,-8(fp)
    fa34:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    fa38:	e0bffd17 	ldw	r2,-12(fp)
    fa3c:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    fa40:	e0bffc17 	ldw	r2,-16(fp)
    fa44:	10800a17 	ldw	r2,40(r2)
    fa48:	e0bff415 	stw	r2,-48(fp)
    fa4c:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    fa50:	e0fff50b 	ldhu	r3,-44(fp)
    fa54:	e0bffb04 	addi	r2,fp,-20
    fa58:	e13ff417 	ldw	r4,-48(fp)
    fa5c:	180b883a 	mov	r5,r3
    fa60:	100d883a 	mov	r6,r2
    fa64:	000c8d80 	call	c8d8 <OSSemPend>

  while (space > 0)
    fa68:	00006506 	br	fc00 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    fa6c:	e0bffc17 	ldw	r2,-16(fp)
    fa70:	10800d17 	ldw	r2,52(r2)
    fa74:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
    fa78:	e0bffc17 	ldw	r2,-16(fp)
    fa7c:	10800e17 	ldw	r2,56(r2)
    fa80:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
    fa84:	e0fff117 	ldw	r3,-60(fp)
    fa88:	e0bff217 	ldw	r2,-56(fp)
    fa8c:	18800536 	bltu	r3,r2,faa4 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    fa90:	e0fff117 	ldw	r3,-60(fp)
    fa94:	e0bff217 	ldw	r2,-56(fp)
    fa98:	1885c83a 	sub	r2,r3,r2
    fa9c:	e0bff015 	stw	r2,-64(fp)
    faa0:	00000406 	br	fab4 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    faa4:	00c20004 	movi	r3,2048
    faa8:	e0bff217 	ldw	r2,-56(fp)
    faac:	1885c83a 	sub	r2,r3,r2
    fab0:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
    fab4:	e0bff017 	ldw	r2,-64(fp)
    fab8:	1000011e 	bne	r2,zero,fac0 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
    fabc:	00001d06 	br	fb34 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
    fac0:	e0fffe17 	ldw	r3,-8(fp)
    fac4:	e0bff017 	ldw	r2,-64(fp)
    fac8:	1880022e 	bgeu	r3,r2,fad4 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
    facc:	e0bffe17 	ldw	r2,-8(fp)
    fad0:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    fad4:	e0bff217 	ldw	r2,-56(fp)
    fad8:	10801104 	addi	r2,r2,68
    fadc:	e0fffc17 	ldw	r3,-16(fp)
    fae0:	1885883a 	add	r2,r3,r2
    fae4:	e13fef17 	ldw	r4,-68(fp)
    fae8:	100b883a 	mov	r5,r2
    faec:	e1bff017 	ldw	r6,-64(fp)
    faf0:	0003b700 	call	3b70 <memcpy>
      ptr   += n;
    faf4:	e0ffef17 	ldw	r3,-68(fp)
    faf8:	e0bff017 	ldw	r2,-64(fp)
    fafc:	1885883a 	add	r2,r3,r2
    fb00:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
    fb04:	e0fffe17 	ldw	r3,-8(fp)
    fb08:	e0bff017 	ldw	r2,-64(fp)
    fb0c:	1885c83a 	sub	r2,r3,r2
    fb10:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fb14:	e0fff217 	ldw	r3,-56(fp)
    fb18:	e0bff017 	ldw	r2,-64(fp)
    fb1c:	1885883a 	add	r2,r3,r2
    fb20:	10c1ffcc 	andi	r3,r2,2047
    fb24:	e0bffc17 	ldw	r2,-16(fp)
    fb28:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    fb2c:	e0bffe17 	ldw	r2,-8(fp)
    fb30:	00bfce16 	blt	zero,r2,fa6c <__alt_mem_Flash_flash_data+0xf400fa6c>

    /* If we read any data then return it */
    if (ptr != buffer)
    fb34:	e0ffef17 	ldw	r3,-68(fp)
    fb38:	e0bffd17 	ldw	r2,-12(fp)
    fb3c:	18800126 	beq	r3,r2,fb44 <altera_avalon_jtag_uart_read+0x12c>
      break;
    fb40:	00003106 	br	fc08 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    fb44:	e0bfff17 	ldw	r2,-4(fp)
    fb48:	1090000c 	andi	r2,r2,16384
    fb4c:	10000126 	beq	r2,zero,fb54 <altera_avalon_jtag_uart_read+0x13c>
      break;
    fb50:	00002d06 	br	fc08 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    fb54:	00800074 	movhi	r2,1
    fb58:	109bc644 	addi	r2,r2,28441
    fb5c:	10800003 	ldbu	r2,0(r2)
    fb60:	10803fcc 	andi	r2,r2,255
    fb64:	10800058 	cmpnei	r2,r2,1
    fb68:	1000161e 	bne	r2,zero,fbc4 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    fb6c:	e0bffc17 	ldw	r2,-16(fp)
    fb70:	10800c17 	ldw	r2,48(r2)
    fb74:	e0bff615 	stw	r2,-40(fp)
    fb78:	00800144 	movi	r2,5
    fb7c:	e0bff70d 	sth	r2,-36(fp)
    fb80:	00bfe0c4 	movi	r2,-125
    fb84:	e0bff785 	stb	r2,-34(fp)
    fb88:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    fb8c:	00800074 	movhi	r2,1
    fb90:	109bc644 	addi	r2,r2,28441
    fb94:	10800003 	ldbu	r2,0(r2)
    fb98:	10803fcc 	andi	r2,r2,255
    fb9c:	10001326 	beq	r2,zero,fbec <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    fba0:	e17ff70b 	ldhu	r5,-36(fp)
    fba4:	e1bff783 	ldbu	r6,-34(fp)
    fba8:	e0fff80b 	ldhu	r3,-32(fp)
    fbac:	e0bffb44 	addi	r2,fp,-19
    fbb0:	d8800015 	stw	r2,0(sp)
    fbb4:	e13ff617 	ldw	r4,-40(fp)
    fbb8:	180f883a 	mov	r7,r3
    fbbc:	00090a80 	call	90a8 <OSFlagPend>
    fbc0:	00000a06 	br	fbec <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    fbc4:	0001883a 	nop
    fbc8:	e0bffc17 	ldw	r2,-16(fp)
    fbcc:	10c00d17 	ldw	r3,52(r2)
    fbd0:	e0bff117 	ldw	r2,-60(fp)
    fbd4:	1880051e 	bne	r3,r2,fbec <altera_avalon_jtag_uart_read+0x1d4>
    fbd8:	e0bffc17 	ldw	r2,-16(fp)
    fbdc:	10c00917 	ldw	r3,36(r2)
    fbe0:	e0bffc17 	ldw	r2,-16(fp)
    fbe4:	10800117 	ldw	r2,4(r2)
    fbe8:	18bff736 	bltu	r3,r2,fbc8 <__alt_mem_Flash_flash_data+0xf400fbc8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    fbec:	e0bffc17 	ldw	r2,-16(fp)
    fbf0:	10c00d17 	ldw	r3,52(r2)
    fbf4:	e0bff117 	ldw	r2,-60(fp)
    fbf8:	1880011e 	bne	r3,r2,fc00 <altera_avalon_jtag_uart_read+0x1e8>
      break;
    fbfc:	00000206 	br	fc08 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fc00:	e0bffe17 	ldw	r2,-8(fp)
    fc04:	00bf9916 	blt	zero,r2,fa6c <__alt_mem_Flash_flash_data+0xf400fa6c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    fc08:	e0bffc17 	ldw	r2,-16(fp)
    fc0c:	10800a17 	ldw	r2,40(r2)
    fc10:	1009883a 	mov	r4,r2
    fc14:	000ccac0 	call	ccac <OSSemPost>

  if (ptr != buffer)
    fc18:	e0ffef17 	ldw	r3,-68(fp)
    fc1c:	e0bffd17 	ldw	r2,-12(fp)
    fc20:	18801826 	beq	r3,r2,fc84 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc24:	0005303a 	rdctl	r2,status
    fc28:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc2c:	e0fff917 	ldw	r3,-28(fp)
    fc30:	00bfff84 	movi	r2,-2
    fc34:	1884703a 	and	r2,r3,r2
    fc38:	1001703a 	wrctl	status,r2
  
  return context;
    fc3c:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    fc40:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fc44:	e0bffc17 	ldw	r2,-16(fp)
    fc48:	10800817 	ldw	r2,32(r2)
    fc4c:	10c00054 	ori	r3,r2,1
    fc50:	e0bffc17 	ldw	r2,-16(fp)
    fc54:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fc58:	e0bffc17 	ldw	r2,-16(fp)
    fc5c:	10800017 	ldw	r2,0(r2)
    fc60:	10800104 	addi	r2,r2,4
    fc64:	1007883a 	mov	r3,r2
    fc68:	e0bffc17 	ldw	r2,-16(fp)
    fc6c:	10800817 	ldw	r2,32(r2)
    fc70:	18800035 	stwio	r2,0(r3)
    fc74:	e0bff317 	ldw	r2,-52(fp)
    fc78:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc7c:	e0bffa17 	ldw	r2,-24(fp)
    fc80:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    fc84:	e0ffef17 	ldw	r3,-68(fp)
    fc88:	e0bffd17 	ldw	r2,-12(fp)
    fc8c:	18800426 	beq	r3,r2,fca0 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
    fc90:	e0ffef17 	ldw	r3,-68(fp)
    fc94:	e0bffd17 	ldw	r2,-12(fp)
    fc98:	1885c83a 	sub	r2,r3,r2
    fc9c:	00000606 	br	fcb8 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
    fca0:	e0bfff17 	ldw	r2,-4(fp)
    fca4:	1090000c 	andi	r2,r2,16384
    fca8:	10000226 	beq	r2,zero,fcb4 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
    fcac:	00bffd44 	movi	r2,-11
    fcb0:	00000106 	br	fcb8 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
    fcb4:	00bffec4 	movi	r2,-5
}
    fcb8:	e037883a 	mov	sp,fp
    fcbc:	dfc00117 	ldw	ra,4(sp)
    fcc0:	df000017 	ldw	fp,0(sp)
    fcc4:	dec00204 	addi	sp,sp,8
    fcc8:	f800283a 	ret

0000fccc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    fccc:	deffed04 	addi	sp,sp,-76
    fcd0:	dfc01215 	stw	ra,72(sp)
    fcd4:	df001115 	stw	fp,68(sp)
    fcd8:	df001104 	addi	fp,sp,68
    fcdc:	e13ffc15 	stw	r4,-16(fp)
    fce0:	e17ffd15 	stw	r5,-12(fp)
    fce4:	e1bffe15 	stw	r6,-8(fp)
    fce8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    fcec:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    fcf0:	e0bffd17 	ldw	r2,-12(fp)
    fcf4:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    fcf8:	e0bffc17 	ldw	r2,-16(fp)
    fcfc:	10800b17 	ldw	r2,44(r2)
    fd00:	e0bff515 	stw	r2,-44(fp)
    fd04:	e03ff60d 	sth	zero,-40(fp)
    fd08:	e0fff60b 	ldhu	r3,-40(fp)
    fd0c:	e0bffbc4 	addi	r2,fp,-17
    fd10:	e13ff517 	ldw	r4,-44(fp)
    fd14:	180b883a 	mov	r5,r3
    fd18:	100d883a 	mov	r6,r2
    fd1c:	000c8d80 	call	c8d8 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fd20:	00003806 	br	fe04 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    fd24:	e0bffc17 	ldw	r2,-16(fp)
    fd28:	10800f17 	ldw	r2,60(r2)
    fd2c:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
    fd30:	e0bffc17 	ldw	r2,-16(fp)
    fd34:	10801017 	ldw	r2,64(r2)
    fd38:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
    fd3c:	e0fff317 	ldw	r3,-52(fp)
    fd40:	e0bff017 	ldw	r2,-64(fp)
    fd44:	1880062e 	bgeu	r3,r2,fd60 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
    fd48:	e0fff017 	ldw	r3,-64(fp)
    fd4c:	e0bff317 	ldw	r2,-52(fp)
    fd50:	1885c83a 	sub	r2,r3,r2
    fd54:	10bfffc4 	addi	r2,r2,-1
    fd58:	e0bff115 	stw	r2,-60(fp)
    fd5c:	00000b06 	br	fd8c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
    fd60:	e0bff017 	ldw	r2,-64(fp)
    fd64:	10000526 	beq	r2,zero,fd7c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    fd68:	00c20004 	movi	r3,2048
    fd6c:	e0bff317 	ldw	r2,-52(fp)
    fd70:	1885c83a 	sub	r2,r3,r2
    fd74:	e0bff115 	stw	r2,-60(fp)
    fd78:	00000406 	br	fd8c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    fd7c:	00c1ffc4 	movi	r3,2047
    fd80:	e0bff317 	ldw	r2,-52(fp)
    fd84:	1885c83a 	sub	r2,r3,r2
    fd88:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    fd8c:	e0bff117 	ldw	r2,-60(fp)
    fd90:	1000011e 	bne	r2,zero,fd98 <altera_avalon_jtag_uart_write+0xcc>
        break;
    fd94:	00001d06 	br	fe0c <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
    fd98:	e0fffe17 	ldw	r3,-8(fp)
    fd9c:	e0bff117 	ldw	r2,-60(fp)
    fda0:	1880022e 	bgeu	r3,r2,fdac <altera_avalon_jtag_uart_write+0xe0>
        n = count;
    fda4:	e0bffe17 	ldw	r2,-8(fp)
    fda8:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    fdac:	e0bff317 	ldw	r2,-52(fp)
    fdb0:	10821104 	addi	r2,r2,2116
    fdb4:	e0fffc17 	ldw	r3,-16(fp)
    fdb8:	1885883a 	add	r2,r3,r2
    fdbc:	1009883a 	mov	r4,r2
    fdc0:	e17ffd17 	ldw	r5,-12(fp)
    fdc4:	e1bff117 	ldw	r6,-60(fp)
    fdc8:	0003b700 	call	3b70 <memcpy>
      ptr   += n;
    fdcc:	e0fffd17 	ldw	r3,-12(fp)
    fdd0:	e0bff117 	ldw	r2,-60(fp)
    fdd4:	1885883a 	add	r2,r3,r2
    fdd8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    fddc:	e0fffe17 	ldw	r3,-8(fp)
    fde0:	e0bff117 	ldw	r2,-60(fp)
    fde4:	1885c83a 	sub	r2,r3,r2
    fde8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fdec:	e0fff317 	ldw	r3,-52(fp)
    fdf0:	e0bff117 	ldw	r2,-60(fp)
    fdf4:	1885883a 	add	r2,r3,r2
    fdf8:	10c1ffcc 	andi	r3,r2,2047
    fdfc:	e0bffc17 	ldw	r2,-16(fp)
    fe00:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fe04:	e0bffe17 	ldw	r2,-8(fp)
    fe08:	00bfc616 	blt	zero,r2,fd24 <__alt_mem_Flash_flash_data+0xf400fd24>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe0c:	0005303a 	rdctl	r2,status
    fe10:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe14:	e0fff717 	ldw	r3,-36(fp)
    fe18:	00bfff84 	movi	r2,-2
    fe1c:	1884703a 	and	r2,r3,r2
    fe20:	1001703a 	wrctl	status,r2
  
  return context;
    fe24:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    fe28:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    fe2c:	e0bffc17 	ldw	r2,-16(fp)
    fe30:	10800817 	ldw	r2,32(r2)
    fe34:	10c00094 	ori	r3,r2,2
    fe38:	e0bffc17 	ldw	r2,-16(fp)
    fe3c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fe40:	e0bffc17 	ldw	r2,-16(fp)
    fe44:	10800017 	ldw	r2,0(r2)
    fe48:	10800104 	addi	r2,r2,4
    fe4c:	1007883a 	mov	r3,r2
    fe50:	e0bffc17 	ldw	r2,-16(fp)
    fe54:	10800817 	ldw	r2,32(r2)
    fe58:	18800035 	stwio	r2,0(r3)
    fe5c:	e0bff417 	ldw	r2,-48(fp)
    fe60:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fe64:	e0bff817 	ldw	r2,-32(fp)
    fe68:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    fe6c:	e0bffe17 	ldw	r2,-8(fp)
    fe70:	00802e0e 	bge	zero,r2,ff2c <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
    fe74:	e0bfff17 	ldw	r2,-4(fp)
    fe78:	1090000c 	andi	r2,r2,16384
    fe7c:	10000126 	beq	r2,zero,fe84 <altera_avalon_jtag_uart_write+0x1b8>
        break;
    fe80:	00002c06 	br	ff34 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    fe84:	00800074 	movhi	r2,1
    fe88:	109bc644 	addi	r2,r2,28441
    fe8c:	10800003 	ldbu	r2,0(r2)
    fe90:	10803fcc 	andi	r2,r2,255
    fe94:	10800058 	cmpnei	r2,r2,1
    fe98:	1000161e 	bne	r2,zero,fef4 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    fe9c:	e0bffc17 	ldw	r2,-16(fp)
    fea0:	10800c17 	ldw	r2,48(r2)
    fea4:	e0bff915 	stw	r2,-28(fp)
    fea8:	00800184 	movi	r2,6
    feac:	e0bffa0d 	sth	r2,-24(fp)
    feb0:	00bfe0c4 	movi	r2,-125
    feb4:	e0bffa85 	stb	r2,-22(fp)
    feb8:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    febc:	00800074 	movhi	r2,1
    fec0:	109bc644 	addi	r2,r2,28441
    fec4:	10800003 	ldbu	r2,0(r2)
    fec8:	10803fcc 	andi	r2,r2,255
    fecc:	10001326 	beq	r2,zero,ff1c <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    fed0:	e17ffa0b 	ldhu	r5,-24(fp)
    fed4:	e1bffa83 	ldbu	r6,-22(fp)
    fed8:	e0fffb0b 	ldhu	r3,-20(fp)
    fedc:	e0bffb84 	addi	r2,fp,-18
    fee0:	d8800015 	stw	r2,0(sp)
    fee4:	e13ff917 	ldw	r4,-28(fp)
    fee8:	180f883a 	mov	r7,r3
    feec:	00090a80 	call	90a8 <OSFlagPend>
    fef0:	00000a06 	br	ff1c <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    fef4:	0001883a 	nop
    fef8:	e0bffc17 	ldw	r2,-16(fp)
    fefc:	10c01017 	ldw	r3,64(r2)
    ff00:	e0bff017 	ldw	r2,-64(fp)
    ff04:	1880051e 	bne	r3,r2,ff1c <altera_avalon_jtag_uart_write+0x250>
    ff08:	e0bffc17 	ldw	r2,-16(fp)
    ff0c:	10c00917 	ldw	r3,36(r2)
    ff10:	e0bffc17 	ldw	r2,-16(fp)
    ff14:	10800117 	ldw	r2,4(r2)
    ff18:	18bff736 	bltu	r3,r2,fef8 <__alt_mem_Flash_flash_data+0xf400fef8>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    ff1c:	e0bffc17 	ldw	r2,-16(fp)
    ff20:	10800917 	ldw	r2,36(r2)
    ff24:	10000126 	beq	r2,zero,ff2c <altera_avalon_jtag_uart_write+0x260>
         break;
    ff28:	00000206 	br	ff34 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
    ff2c:	e0bffe17 	ldw	r2,-8(fp)
    ff30:	00bf7b16 	blt	zero,r2,fd20 <__alt_mem_Flash_flash_data+0xf400fd20>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    ff34:	e0bffc17 	ldw	r2,-16(fp)
    ff38:	10800b17 	ldw	r2,44(r2)
    ff3c:	1009883a 	mov	r4,r2
    ff40:	000ccac0 	call	ccac <OSSemPost>

  if (ptr != start)
    ff44:	e0fffd17 	ldw	r3,-12(fp)
    ff48:	e0bff217 	ldw	r2,-56(fp)
    ff4c:	18800426 	beq	r3,r2,ff60 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
    ff50:	e0fffd17 	ldw	r3,-12(fp)
    ff54:	e0bff217 	ldw	r2,-56(fp)
    ff58:	1885c83a 	sub	r2,r3,r2
    ff5c:	00000606 	br	ff78 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
    ff60:	e0bfff17 	ldw	r2,-4(fp)
    ff64:	1090000c 	andi	r2,r2,16384
    ff68:	10000226 	beq	r2,zero,ff74 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
    ff6c:	00bffd44 	movi	r2,-11
    ff70:	00000106 	br	ff78 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    ff74:	00bffec4 	movi	r2,-5
}
    ff78:	e037883a 	mov	sp,fp
    ff7c:	dfc00117 	ldw	ra,4(sp)
    ff80:	df000017 	ldw	fp,0(sp)
    ff84:	dec00204 	addi	sp,sp,8
    ff88:	f800283a 	ret

0000ff8c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    ff8c:	defff904 	addi	sp,sp,-28
    ff90:	dfc00615 	stw	ra,24(sp)
    ff94:	df000515 	stw	fp,20(sp)
    ff98:	df000504 	addi	fp,sp,20
    ff9c:	e13ffe15 	stw	r4,-8(fp)
    ffa0:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    ffa4:	0007883a 	mov	r3,zero
    ffa8:	e0bffe17 	ldw	r2,-8(fp)
    ffac:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    ffb0:	e0bffe17 	ldw	r2,-8(fp)
    ffb4:	10800104 	addi	r2,r2,4
    ffb8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ffbc:	0005303a 	rdctl	r2,status
    ffc0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ffc4:	e0fffc17 	ldw	r3,-16(fp)
    ffc8:	00bfff84 	movi	r2,-2
    ffcc:	1884703a 	and	r2,r3,r2
    ffd0:	1001703a 	wrctl	status,r2
  
  return context;
    ffd4:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    ffd8:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    ffdc:	00120080 	call	12008 <alt_tick>
    ffe0:	e0bffb17 	ldw	r2,-20(fp)
    ffe4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ffe8:	e0bffd17 	ldw	r2,-12(fp)
    ffec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    fff0:	e037883a 	mov	sp,fp
    fff4:	dfc00117 	ldw	ra,4(sp)
    fff8:	df000017 	ldw	fp,0(sp)
    fffc:	dec00204 	addi	sp,sp,8
   10000:	f800283a 	ret

00010004 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10004:	defff904 	addi	sp,sp,-28
   10008:	dfc00615 	stw	ra,24(sp)
   1000c:	df000515 	stw	fp,20(sp)
   10010:	df000504 	addi	fp,sp,20
   10014:	e13ffc15 	stw	r4,-16(fp)
   10018:	e17ffd15 	stw	r5,-12(fp)
   1001c:	e1bffe15 	stw	r6,-8(fp)
   10020:	e1ffff15 	stw	r7,-4(fp)
   10024:	e0bfff17 	ldw	r2,-4(fp)
   10028:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1002c:	00800074 	movhi	r2,1
   10030:	109bdb04 	addi	r2,r2,28524
   10034:	10800017 	ldw	r2,0(r2)
   10038:	1000041e 	bne	r2,zero,1004c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   1003c:	00800074 	movhi	r2,1
   10040:	109bdb04 	addi	r2,r2,28524
   10044:	e0fffb17 	ldw	r3,-20(fp)
   10048:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1004c:	e0bffc17 	ldw	r2,-16(fp)
   10050:	10800104 	addi	r2,r2,4
   10054:	00c001c4 	movi	r3,7
   10058:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1005c:	e13ffe17 	ldw	r4,-8(fp)
   10060:	e17ffc17 	ldw	r5,-16(fp)
   10064:	01800074 	movhi	r6,1
   10068:	31bfe304 	addi	r6,r6,-116
   1006c:	0011b4c0 	call	11b4c <alt_irq_register>
#endif  
}
   10070:	e037883a 	mov	sp,fp
   10074:	dfc00117 	ldw	ra,4(sp)
   10078:	df000017 	ldw	fp,0(sp)
   1007c:	dec00204 	addi	sp,sp,8
   10080:	f800283a 	ret

00010084 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   10084:	defffc04 	addi	sp,sp,-16
   10088:	df000315 	stw	fp,12(sp)
   1008c:	df000304 	addi	fp,sp,12
   10090:	e13ffe15 	stw	r4,-8(fp)
   10094:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   10098:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   1009c:	e0bfff17 	ldw	r2,-4(fp)
   100a0:	1000061e 	bne	r2,zero,100bc <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   100a4:	e0bffe17 	ldw	r2,-8(fp)
   100a8:	1007883a 	mov	r3,r2
   100ac:	e0bffd03 	ldbu	r2,-12(fp)
   100b0:	1884b03a 	or	r2,r3,r2
   100b4:	e0bffd05 	stb	r2,-12(fp)
   100b8:	00000806 	br	100dc <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   100bc:	e0bffe17 	ldw	r2,-8(fp)
   100c0:	1007883a 	mov	r3,r2
   100c4:	e0bffd03 	ldbu	r2,-12(fp)
   100c8:	1884b03a 	or	r2,r3,r2
   100cc:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   100d0:	e0bffd03 	ldbu	r2,-12(fp)
   100d4:	10801014 	ori	r2,r2,64
   100d8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   100dc:	e0fffd03 	ldbu	r3,-12(fp)
   100e0:	00bfe004 	movi	r2,-128
   100e4:	1884b03a 	or	r2,r3,r2
}
   100e8:	e037883a 	mov	sp,fp
   100ec:	df000017 	ldw	fp,0(sp)
   100f0:	dec00104 	addi	sp,sp,4
   100f4:	f800283a 	ret

000100f8 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   100f8:	defffd04 	addi	sp,sp,-12
   100fc:	df000215 	stw	fp,8(sp)
   10100:	df000204 	addi	fp,sp,8
   10104:	e13ffe15 	stw	r4,-8(fp)
   10108:	2805883a 	mov	r2,r5
   1010c:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   10110:	e0bffe17 	ldw	r2,-8(fp)
   10114:	10800a17 	ldw	r2,40(r2)
   10118:	1007883a 	mov	r3,r2
   1011c:	e0bfff03 	ldbu	r2,-4(fp)
   10120:	18800025 	stbio	r2,0(r3)
}
   10124:	e037883a 	mov	sp,fp
   10128:	df000017 	ldw	fp,0(sp)
   1012c:	dec00104 	addi	sp,sp,4
   10130:	f800283a 	ret

00010134 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   10134:	defffe04 	addi	sp,sp,-8
   10138:	df000115 	stw	fp,4(sp)
   1013c:	df000104 	addi	fp,sp,4
   10140:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   10144:	e0bfff17 	ldw	r2,-4(fp)
   10148:	10800a17 	ldw	r2,40(r2)
   1014c:	1007883a 	mov	r3,r2
   10150:	00800044 	movi	r2,1
   10154:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   10158:	e037883a 	mov	sp,fp
   1015c:	df000017 	ldw	fp,0(sp)
   10160:	dec00104 	addi	sp,sp,4
   10164:	f800283a 	ret

00010168 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   10168:	defffc04 	addi	sp,sp,-16
   1016c:	dfc00315 	stw	ra,12(sp)
   10170:	df000215 	stw	fp,8(sp)
   10174:	df000204 	addi	fp,sp,8
   10178:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1017c:	e13fff17 	ldw	r4,-4(fp)
   10180:	01400074 	movhi	r5,1
   10184:	2953c604 	addi	r5,r5,20248
   10188:	00119540 	call	11954 <alt_find_dev>
   1018c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   10190:	e0bffe17 	ldw	r2,-8(fp)
}
   10194:	e037883a 	mov	sp,fp
   10198:	dfc00117 	ldw	ra,4(sp)
   1019c:	df000017 	ldw	fp,0(sp)
   101a0:	dec00204 	addi	sp,sp,8
   101a4:	f800283a 	ret

000101a8 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   101a8:	defffb04 	addi	sp,sp,-20
   101ac:	df000415 	stw	fp,16(sp)
   101b0:	df000404 	addi	fp,sp,16
   101b4:	e13ffd15 	stw	r4,-12(fp)
   101b8:	e17ffe15 	stw	r5,-8(fp)
   101bc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   101c0:	e03ffc15 	stw	zero,-16(fp)
   101c4:	00000f06 	br	10204 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   101c8:	e0bffd17 	ldw	r2,-12(fp)
   101cc:	10800a17 	ldw	r2,40(r2)
   101d0:	10800044 	addi	r2,r2,1
   101d4:	1009883a 	mov	r4,r2
   101d8:	e0fffe17 	ldw	r3,-8(fp)
   101dc:	e0bffc17 	ldw	r2,-16(fp)
   101e0:	1885883a 	add	r2,r3,r2
   101e4:	10800003 	ldbu	r2,0(r2)
   101e8:	10803fcc 	andi	r2,r2,255
   101ec:	1080201c 	xori	r2,r2,128
   101f0:	10bfe004 	addi	r2,r2,-128
   101f4:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   101f8:	e0bffc17 	ldw	r2,-16(fp)
   101fc:	10800044 	addi	r2,r2,1
   10200:	e0bffc15 	stw	r2,-16(fp)
   10204:	e0fffc17 	ldw	r3,-16(fp)
   10208:	e0bfff17 	ldw	r2,-4(fp)
   1020c:	18bfee36 	bltu	r3,r2,101c8 <__alt_mem_Flash_flash_data+0xf40101c8>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   10210:	e037883a 	mov	sp,fp
   10214:	df000017 	ldw	fp,0(sp)
   10218:	dec00104 	addi	sp,sp,4
   1021c:	f800283a 	ret

00010220 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   10220:	defffd04 	addi	sp,sp,-12
   10224:	df000215 	stw	fp,8(sp)
   10228:	df000204 	addi	fp,sp,8
   1022c:	e13ffe15 	stw	r4,-8(fp)
   10230:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   10234:	00000d06 	br	1026c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   10238:	e0bffe17 	ldw	r2,-8(fp)
   1023c:	10800a17 	ldw	r2,40(r2)
   10240:	10800044 	addi	r2,r2,1
   10244:	1007883a 	mov	r3,r2
   10248:	e0bfff17 	ldw	r2,-4(fp)
   1024c:	10800003 	ldbu	r2,0(r2)
   10250:	10803fcc 	andi	r2,r2,255
   10254:	1080201c 	xori	r2,r2,128
   10258:	10bfe004 	addi	r2,r2,-128
   1025c:	18800025 	stbio	r2,0(r3)
		++ptr;
   10260:	e0bfff17 	ldw	r2,-4(fp)
   10264:	10800044 	addi	r2,r2,1
   10268:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   1026c:	e0bfff17 	ldw	r2,-4(fp)
   10270:	10800003 	ldbu	r2,0(r2)
   10274:	10803fcc 	andi	r2,r2,255
   10278:	1080201c 	xori	r2,r2,128
   1027c:	10bfe004 	addi	r2,r2,-128
   10280:	103fed1e 	bne	r2,zero,10238 <__alt_mem_Flash_flash_data+0xf4010238>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   10284:	e037883a 	mov	sp,fp
   10288:	df000017 	ldw	fp,0(sp)
   1028c:	dec00104 	addi	sp,sp,4
   10290:	f800283a 	ret

00010294 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   10294:	defffb04 	addi	sp,sp,-20
   10298:	dfc00415 	stw	ra,16(sp)
   1029c:	df000315 	stw	fp,12(sp)
   102a0:	df000304 	addi	fp,sp,12
   102a4:	e13ffd15 	stw	r4,-12(fp)
   102a8:	e17ffe15 	stw	r5,-8(fp)
   102ac:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   102b0:	e0bffd17 	ldw	r2,-12(fp)
   102b4:	10c00017 	ldw	r3,0(r2)
   102b8:	e0bfff17 	ldw	r2,-4(fp)
   102bc:	1809883a 	mov	r4,r3
   102c0:	e17ffe17 	ldw	r5,-8(fp)
   102c4:	100d883a 	mov	r6,r2
   102c8:	00101a80 	call	101a8 <alt_up_character_lcd_write>
	return 0;
   102cc:	0005883a 	mov	r2,zero
}
   102d0:	e037883a 	mov	sp,fp
   102d4:	dfc00117 	ldw	ra,4(sp)
   102d8:	df000017 	ldw	fp,0(sp)
   102dc:	dec00204 	addi	sp,sp,8
   102e0:	f800283a 	ret

000102e4 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   102e4:	defffa04 	addi	sp,sp,-24
   102e8:	dfc00515 	stw	ra,20(sp)
   102ec:	df000415 	stw	fp,16(sp)
   102f0:	df000404 	addi	fp,sp,16
   102f4:	e13ffd15 	stw	r4,-12(fp)
   102f8:	e17ffe15 	stw	r5,-8(fp)
   102fc:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   10300:	e0bffe17 	ldw	r2,-8(fp)
   10304:	10800a28 	cmpgeui	r2,r2,40
   10308:	1000031e 	bne	r2,zero,10318 <alt_up_character_lcd_set_cursor_pos+0x34>
   1030c:	e0bfff17 	ldw	r2,-4(fp)
   10310:	108000b0 	cmpltui	r2,r2,2
   10314:	1000021e 	bne	r2,zero,10320 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   10318:	00bfffc4 	movi	r2,-1
   1031c:	00000906 	br	10344 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   10320:	e13ffe17 	ldw	r4,-8(fp)
   10324:	e17fff17 	ldw	r5,-4(fp)
   10328:	00100840 	call	10084 <get_DDRAM_addr>
   1032c:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   10330:	e0bffc03 	ldbu	r2,-16(fp)
   10334:	e13ffd17 	ldw	r4,-12(fp)
   10338:	100b883a 	mov	r5,r2
   1033c:	00100f80 	call	100f8 <alt_up_character_lcd_send_cmd>
	return 0;
   10340:	0005883a 	mov	r2,zero
}
   10344:	e037883a 	mov	sp,fp
   10348:	dfc00117 	ldw	ra,4(sp)
   1034c:	df000017 	ldw	fp,0(sp)
   10350:	dec00204 	addi	sp,sp,8
   10354:	f800283a 	ret

00010358 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   10358:	defffb04 	addi	sp,sp,-20
   1035c:	dfc00415 	stw	ra,16(sp)
   10360:	df000315 	stw	fp,12(sp)
   10364:	df000304 	addi	fp,sp,12
   10368:	e13ffe15 	stw	r4,-8(fp)
   1036c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   10370:	e0bfff17 	ldw	r2,-4(fp)
   10374:	1000011e 	bne	r2,zero,1037c <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   10378:	00001406 	br	103cc <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1037c:	e0bfff17 	ldw	r2,-4(fp)
   10380:	0080020e 	bge	zero,r2,1038c <alt_up_character_lcd_shift_cursor+0x34>
   10384:	00800504 	movi	r2,20
   10388:	00000106 	br	10390 <alt_up_character_lcd_shift_cursor+0x38>
   1038c:	00800404 	movi	r2,16
   10390:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   10394:	e0bfff17 	ldw	r2,-4(fp)
   10398:	1000010e 	bge	r2,zero,103a0 <alt_up_character_lcd_shift_cursor+0x48>
   1039c:	0085c83a 	sub	r2,zero,r2
   103a0:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   103a4:	00000406 	br	103b8 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   103a8:	e0bffd43 	ldbu	r2,-11(fp)
   103ac:	e13ffe17 	ldw	r4,-8(fp)
   103b0:	100b883a 	mov	r5,r2
   103b4:	00100f80 	call	100f8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   103b8:	e0bffd03 	ldbu	r2,-12(fp)
   103bc:	10ffffc4 	addi	r3,r2,-1
   103c0:	e0fffd05 	stb	r3,-12(fp)
   103c4:	10803fcc 	andi	r2,r2,255
   103c8:	103ff71e 	bne	r2,zero,103a8 <__alt_mem_Flash_flash_data+0xf40103a8>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   103cc:	e037883a 	mov	sp,fp
   103d0:	dfc00117 	ldw	ra,4(sp)
   103d4:	df000017 	ldw	fp,0(sp)
   103d8:	dec00204 	addi	sp,sp,8
   103dc:	f800283a 	ret

000103e0 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   103e0:	defffb04 	addi	sp,sp,-20
   103e4:	dfc00415 	stw	ra,16(sp)
   103e8:	df000315 	stw	fp,12(sp)
   103ec:	df000304 	addi	fp,sp,12
   103f0:	e13ffe15 	stw	r4,-8(fp)
   103f4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   103f8:	e0bfff17 	ldw	r2,-4(fp)
   103fc:	1000011e 	bne	r2,zero,10404 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   10400:	00001406 	br	10454 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   10404:	e0bfff17 	ldw	r2,-4(fp)
   10408:	0080020e 	bge	zero,r2,10414 <alt_up_character_lcd_shift_display+0x34>
   1040c:	00800704 	movi	r2,28
   10410:	00000106 	br	10418 <alt_up_character_lcd_shift_display+0x38>
   10414:	00800604 	movi	r2,24
   10418:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1041c:	e0bfff17 	ldw	r2,-4(fp)
   10420:	1000010e 	bge	r2,zero,10428 <alt_up_character_lcd_shift_display+0x48>
   10424:	0085c83a 	sub	r2,zero,r2
   10428:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1042c:	00000406 	br	10440 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   10430:	e0bffd43 	ldbu	r2,-11(fp)
   10434:	e13ffe17 	ldw	r4,-8(fp)
   10438:	100b883a 	mov	r5,r2
   1043c:	00100f80 	call	100f8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   10440:	e0bffd03 	ldbu	r2,-12(fp)
   10444:	10ffffc4 	addi	r3,r2,-1
   10448:	e0fffd05 	stb	r3,-12(fp)
   1044c:	10803fcc 	andi	r2,r2,255
   10450:	103ff71e 	bne	r2,zero,10430 <__alt_mem_Flash_flash_data+0xf4010430>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   10454:	e037883a 	mov	sp,fp
   10458:	dfc00117 	ldw	ra,4(sp)
   1045c:	df000017 	ldw	fp,0(sp)
   10460:	dec00204 	addi	sp,sp,8
   10464:	f800283a 	ret

00010468 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   10468:	defffa04 	addi	sp,sp,-24
   1046c:	dfc00515 	stw	ra,20(sp)
   10470:	df000415 	stw	fp,16(sp)
   10474:	df000404 	addi	fp,sp,16
   10478:	e13ffd15 	stw	r4,-12(fp)
   1047c:	e17ffe15 	stw	r5,-8(fp)
   10480:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   10484:	e0bffe17 	ldw	r2,-8(fp)
   10488:	10800a28 	cmpgeui	r2,r2,40
   1048c:	1000031e 	bne	r2,zero,1049c <alt_up_character_lcd_erase_pos+0x34>
   10490:	e0bfff17 	ldw	r2,-4(fp)
   10494:	108000b0 	cmpltui	r2,r2,2
   10498:	1000021e 	bne	r2,zero,104a4 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   1049c:	00bfffc4 	movi	r2,-1
   104a0:	00000f06 	br	104e0 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   104a4:	e13ffe17 	ldw	r4,-8(fp)
   104a8:	e17fff17 	ldw	r5,-4(fp)
   104ac:	00100840 	call	10084 <get_DDRAM_addr>
   104b0:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   104b4:	e0bffc03 	ldbu	r2,-16(fp)
   104b8:	e13ffd17 	ldw	r4,-12(fp)
   104bc:	100b883a 	mov	r5,r2
   104c0:	00100f80 	call	100f8 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   104c4:	e0bffd17 	ldw	r2,-12(fp)
   104c8:	10800a17 	ldw	r2,40(r2)
   104cc:	10800044 	addi	r2,r2,1
   104d0:	1007883a 	mov	r3,r2
   104d4:	00800084 	movi	r2,2
   104d8:	18800025 	stbio	r2,0(r3)
	return 0;
   104dc:	0005883a 	mov	r2,zero
}
   104e0:	e037883a 	mov	sp,fp
   104e4:	dfc00117 	ldw	ra,4(sp)
   104e8:	df000017 	ldw	fp,0(sp)
   104ec:	dec00204 	addi	sp,sp,8
   104f0:	f800283a 	ret

000104f4 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   104f4:	defffd04 	addi	sp,sp,-12
   104f8:	dfc00215 	stw	ra,8(sp)
   104fc:	df000115 	stw	fp,4(sp)
   10500:	df000104 	addi	fp,sp,4
   10504:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   10508:	e13fff17 	ldw	r4,-4(fp)
   1050c:	01400304 	movi	r5,12
   10510:	00100f80 	call	100f8 <alt_up_character_lcd_send_cmd>
}
   10514:	e037883a 	mov	sp,fp
   10518:	dfc00117 	ldw	ra,4(sp)
   1051c:	df000017 	ldw	fp,0(sp)
   10520:	dec00204 	addi	sp,sp,8
   10524:	f800283a 	ret

00010528 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   10528:	defffd04 	addi	sp,sp,-12
   1052c:	dfc00215 	stw	ra,8(sp)
   10530:	df000115 	stw	fp,4(sp)
   10534:	df000104 	addi	fp,sp,4
   10538:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1053c:	e13fff17 	ldw	r4,-4(fp)
   10540:	014003c4 	movi	r5,15
   10544:	00100f80 	call	100f8 <alt_up_character_lcd_send_cmd>
}
   10548:	e037883a 	mov	sp,fp
   1054c:	dfc00117 	ldw	ra,4(sp)
   10550:	df000017 	ldw	fp,0(sp)
   10554:	dec00204 	addi	sp,sp,8
   10558:	f800283a 	ret

0001055c <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1055c:	defffd04 	addi	sp,sp,-12
   10560:	df000215 	stw	fp,8(sp)
   10564:	df000204 	addi	fp,sp,8
   10568:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1056c:	e0bfff17 	ldw	r2,-4(fp)
   10570:	10800a17 	ldw	r2,40(r2)
   10574:	10800104 	addi	r2,r2,4
   10578:	10800037 	ldwio	r2,0(r2)
   1057c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   10580:	e0bffe17 	ldw	r2,-8(fp)
   10584:	10800054 	ori	r2,r2,1
   10588:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1058c:	e0bfff17 	ldw	r2,-4(fp)
   10590:	10800a17 	ldw	r2,40(r2)
   10594:	10800104 	addi	r2,r2,4
   10598:	1007883a 	mov	r3,r2
   1059c:	e0bffe17 	ldw	r2,-8(fp)
   105a0:	18800035 	stwio	r2,0(r3)
}
   105a4:	e037883a 	mov	sp,fp
   105a8:	df000017 	ldw	fp,0(sp)
   105ac:	dec00104 	addi	sp,sp,4
   105b0:	f800283a 	ret

000105b4 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   105b4:	defffd04 	addi	sp,sp,-12
   105b8:	df000215 	stw	fp,8(sp)
   105bc:	df000204 	addi	fp,sp,8
   105c0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   105c4:	e0bfff17 	ldw	r2,-4(fp)
   105c8:	10800a17 	ldw	r2,40(r2)
   105cc:	10800104 	addi	r2,r2,4
   105d0:	10800037 	ldwio	r2,0(r2)
   105d4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   105d8:	e0fffe17 	ldw	r3,-8(fp)
   105dc:	00bfff84 	movi	r2,-2
   105e0:	1884703a 	and	r2,r3,r2
   105e4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   105e8:	e0bfff17 	ldw	r2,-4(fp)
   105ec:	10800a17 	ldw	r2,40(r2)
   105f0:	10800104 	addi	r2,r2,4
   105f4:	1007883a 	mov	r3,r2
   105f8:	e0bffe17 	ldw	r2,-8(fp)
   105fc:	18800035 	stwio	r2,0(r3)
}
   10600:	e037883a 	mov	sp,fp
   10604:	df000017 	ldw	fp,0(sp)
   10608:	dec00104 	addi	sp,sp,4
   1060c:	f800283a 	ret

00010610 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   10610:	defffd04 	addi	sp,sp,-12
   10614:	df000215 	stw	fp,8(sp)
   10618:	df000204 	addi	fp,sp,8
   1061c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   10620:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   10624:	e0bfff17 	ldw	r2,-4(fp)
   10628:	10800a17 	ldw	r2,40(r2)
   1062c:	10800084 	addi	r2,r2,2
   10630:	1080002b 	ldhuio	r2,0(r2)
   10634:	10bfffcc 	andi	r2,r2,65535
   10638:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1063c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   10640:	e037883a 	mov	sp,fp
   10644:	df000017 	ldw	fp,0(sp)
   10648:	dec00104 	addi	sp,sp,4
   1064c:	f800283a 	ret

00010650 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   10650:	defffd04 	addi	sp,sp,-12
   10654:	df000215 	stw	fp,8(sp)
   10658:	df000204 	addi	fp,sp,8
   1065c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   10660:	e0bfff17 	ldw	r2,-4(fp)
   10664:	10800a17 	ldw	r2,40(r2)
   10668:	10800104 	addi	r2,r2,4
   1066c:	10800037 	ldwio	r2,0(r2)
   10670:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   10674:	e0bffe17 	ldw	r2,-8(fp)
   10678:	1004d43a 	srli	r2,r2,16
}
   1067c:	e037883a 	mov	sp,fp
   10680:	df000017 	ldw	fp,0(sp)
   10684:	dec00104 	addi	sp,sp,4
   10688:	f800283a 	ret

0001068c <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1068c:	defffd04 	addi	sp,sp,-12
   10690:	df000215 	stw	fp,8(sp)
   10694:	df000204 	addi	fp,sp,8
   10698:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1069c:	e0bfff17 	ldw	r2,-4(fp)
   106a0:	1080800c 	andi	r2,r2,512
   106a4:	1004d27a 	srli	r2,r2,9
   106a8:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   106ac:	e0bffe17 	ldw	r2,-8(fp)
   106b0:	10000226 	beq	r2,zero,106bc <alt_up_irda_check_parity+0x30>
   106b4:	00bfffc4 	movi	r2,-1
   106b8:	00000106 	br	106c0 <alt_up_irda_check_parity+0x34>
   106bc:	0005883a 	mov	r2,zero
}
   106c0:	e037883a 	mov	sp,fp
   106c4:	df000017 	ldw	fp,0(sp)
   106c8:	dec00104 	addi	sp,sp,4
   106cc:	f800283a 	ret

000106d0 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   106d0:	defffd04 	addi	sp,sp,-12
   106d4:	df000215 	stw	fp,8(sp)
   106d8:	df000204 	addi	fp,sp,8
   106dc:	e13ffe15 	stw	r4,-8(fp)
   106e0:	2805883a 	mov	r2,r5
   106e4:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   106e8:	e0bffe17 	ldw	r2,-8(fp)
   106ec:	10800a17 	ldw	r2,40(r2)
   106f0:	1007883a 	mov	r3,r2
   106f4:	e0bfff03 	ldbu	r2,-4(fp)
   106f8:	18800035 	stwio	r2,0(r3)
	return 0;
   106fc:	0005883a 	mov	r2,zero
}
   10700:	e037883a 	mov	sp,fp
   10704:	df000017 	ldw	fp,0(sp)
   10708:	dec00104 	addi	sp,sp,4
   1070c:	f800283a 	ret

00010710 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   10710:	defffa04 	addi	sp,sp,-24
   10714:	dfc00515 	stw	ra,20(sp)
   10718:	df000415 	stw	fp,16(sp)
   1071c:	df000404 	addi	fp,sp,16
   10720:	e13ffd15 	stw	r4,-12(fp)
   10724:	e17ffe15 	stw	r5,-8(fp)
   10728:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1072c:	e0bffd17 	ldw	r2,-12(fp)
   10730:	10800a17 	ldw	r2,40(r2)
   10734:	10800037 	ldwio	r2,0(r2)
   10738:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1073c:	e0bffc17 	ldw	r2,-16(fp)
   10740:	1007883a 	mov	r3,r2
   10744:	e0bffe17 	ldw	r2,-8(fp)
   10748:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   1074c:	e13ffc17 	ldw	r4,-16(fp)
   10750:	001068c0 	call	1068c <alt_up_irda_check_parity>
   10754:	1007883a 	mov	r3,r2
   10758:	e0bfff17 	ldw	r2,-4(fp)
   1075c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   10760:	e0bffc17 	ldw	r2,-16(fp)
   10764:	10a0000c 	andi	r2,r2,32768
   10768:	1004d3fa 	srli	r2,r2,15
   1076c:	10bfffc4 	addi	r2,r2,-1
}
   10770:	e037883a 	mov	sp,fp
   10774:	dfc00117 	ldw	ra,4(sp)
   10778:	df000017 	ldw	fp,0(sp)
   1077c:	dec00204 	addi	sp,sp,8
   10780:	f800283a 	ret

00010784 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   10784:	defff804 	addi	sp,sp,-32
   10788:	dfc00715 	stw	ra,28(sp)
   1078c:	df000615 	stw	fp,24(sp)
   10790:	df000604 	addi	fp,sp,24
   10794:	e13ffd15 	stw	r4,-12(fp)
   10798:	e17ffe15 	stw	r5,-8(fp)
   1079c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   107a0:	e0bffd17 	ldw	r2,-12(fp)
   107a4:	10800017 	ldw	r2,0(r2)
   107a8:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   107ac:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   107b0:	00000e06 	br	107ec <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   107b4:	e0bffe17 	ldw	r2,-8(fp)
   107b8:	10c00044 	addi	r3,r2,1
   107bc:	e0fffe15 	stw	r3,-8(fp)
   107c0:	e0fffc04 	addi	r3,fp,-16
   107c4:	e13ffb17 	ldw	r4,-20(fp)
   107c8:	100b883a 	mov	r5,r2
   107cc:	180d883a 	mov	r6,r3
   107d0:	00107100 	call	10710 <alt_up_irda_read_data>
   107d4:	1000041e 	bne	r2,zero,107e8 <alt_up_irda_read_fd+0x64>
			count++;
   107d8:	e0bffa17 	ldw	r2,-24(fp)
   107dc:	10800044 	addi	r2,r2,1
   107e0:	e0bffa15 	stw	r2,-24(fp)
   107e4:	00000106 	br	107ec <alt_up_irda_read_fd+0x68>
		else
			break;
   107e8:	00000406 	br	107fc <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   107ec:	e0bfff17 	ldw	r2,-4(fp)
   107f0:	10ffffc4 	addi	r3,r2,-1
   107f4:	e0ffff15 	stw	r3,-4(fp)
   107f8:	103fee1e 	bne	r2,zero,107b4 <__alt_mem_Flash_flash_data+0xf40107b4>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   107fc:	e0bffa17 	ldw	r2,-24(fp)
}
   10800:	e037883a 	mov	sp,fp
   10804:	dfc00117 	ldw	ra,4(sp)
   10808:	df000017 	ldw	fp,0(sp)
   1080c:	dec00204 	addi	sp,sp,8
   10810:	f800283a 	ret

00010814 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   10814:	defff904 	addi	sp,sp,-28
   10818:	dfc00615 	stw	ra,24(sp)
   1081c:	df000515 	stw	fp,20(sp)
   10820:	df000504 	addi	fp,sp,20
   10824:	e13ffd15 	stw	r4,-12(fp)
   10828:	e17ffe15 	stw	r5,-8(fp)
   1082c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   10830:	e0bffd17 	ldw	r2,-12(fp)
   10834:	10800017 	ldw	r2,0(r2)
   10838:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1083c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   10840:	00000e06 	br	1087c <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   10844:	e0bffe17 	ldw	r2,-8(fp)
   10848:	10c00044 	addi	r3,r2,1
   1084c:	e0fffe15 	stw	r3,-8(fp)
   10850:	10800003 	ldbu	r2,0(r2)
   10854:	10803fcc 	andi	r2,r2,255
   10858:	e13ffc17 	ldw	r4,-16(fp)
   1085c:	100b883a 	mov	r5,r2
   10860:	00106d00 	call	106d0 <alt_up_irda_write_data>
   10864:	1000041e 	bne	r2,zero,10878 <alt_up_irda_write_fd+0x64>
			count++;
   10868:	e0bffb17 	ldw	r2,-20(fp)
   1086c:	10800044 	addi	r2,r2,1
   10870:	e0bffb15 	stw	r2,-20(fp)
   10874:	00000106 	br	1087c <alt_up_irda_write_fd+0x68>
		else
			break;
   10878:	00000406 	br	1088c <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1087c:	e0bfff17 	ldw	r2,-4(fp)
   10880:	10ffffc4 	addi	r3,r2,-1
   10884:	e0ffff15 	stw	r3,-4(fp)
   10888:	103fee1e 	bne	r2,zero,10844 <__alt_mem_Flash_flash_data+0xf4010844>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   1088c:	e0bffb17 	ldw	r2,-20(fp)
}
   10890:	e037883a 	mov	sp,fp
   10894:	dfc00117 	ldw	ra,4(sp)
   10898:	df000017 	ldw	fp,0(sp)
   1089c:	dec00204 	addi	sp,sp,8
   108a0:	f800283a 	ret

000108a4 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   108a4:	defffc04 	addi	sp,sp,-16
   108a8:	dfc00315 	stw	ra,12(sp)
   108ac:	df000215 	stw	fp,8(sp)
   108b0:	df000204 	addi	fp,sp,8
   108b4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   108b8:	e13fff17 	ldw	r4,-4(fp)
   108bc:	01400074 	movhi	r5,1
   108c0:	2953c604 	addi	r5,r5,20248
   108c4:	00119540 	call	11954 <alt_find_dev>
   108c8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   108cc:	e0bffe17 	ldw	r2,-8(fp)
}
   108d0:	e037883a 	mov	sp,fp
   108d4:	dfc00117 	ldw	ra,4(sp)
   108d8:	df000017 	ldw	fp,0(sp)
   108dc:	dec00204 	addi	sp,sp,8
   108e0:	f800283a 	ret

000108e4 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
   108e4:	defffc04 	addi	sp,sp,-16
   108e8:	dfc00315 	stw	ra,12(sp)
   108ec:	df000215 	stw	fp,8(sp)
   108f0:	df000204 	addi	fp,sp,8
   108f4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
   108f8:	e13fff17 	ldw	r4,-4(fp)
   108fc:	01400074 	movhi	r5,1
   10900:	2953c604 	addi	r5,r5,20248
   10904:	00119540 	call	11954 <alt_find_dev>
   10908:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1090c:	e0bffe17 	ldw	r2,-8(fp)
}
   10910:	e037883a 	mov	sp,fp
   10914:	dfc00117 	ldw	ra,4(sp)
   10918:	df000017 	ldw	fp,0(sp)
   1091c:	dec00204 	addi	sp,sp,8
   10920:	f800283a 	ret

00010924 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   10924:	defffd04 	addi	sp,sp,-12
   10928:	df000215 	stw	fp,8(sp)
   1092c:	df000204 	addi	fp,sp,8
   10930:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   10934:	e0bfff17 	ldw	r2,-4(fp)
   10938:	1080400c 	andi	r2,r2,256
   1093c:	1004d23a 	srli	r2,r2,8
   10940:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   10944:	e0bffe03 	ldbu	r2,-8(fp)
}
   10948:	e037883a 	mov	sp,fp
   1094c:	df000017 	ldw	fp,0(sp)
   10950:	dec00104 	addi	sp,sp,4
   10954:	f800283a 	ret

00010958 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   10958:	defffd04 	addi	sp,sp,-12
   1095c:	df000215 	stw	fp,8(sp)
   10960:	df000204 	addi	fp,sp,8
   10964:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   10968:	e0bfff17 	ldw	r2,-4(fp)
   1096c:	1080004c 	andi	r2,r2,1
   10970:	e0bffe05 	stb	r2,-8(fp)
	return re;
   10974:	e0bffe03 	ldbu	r2,-8(fp)
}
   10978:	e037883a 	mov	sp,fp
   1097c:	df000017 	ldw	fp,0(sp)
   10980:	dec00104 	addi	sp,sp,4
   10984:	f800283a 	ret

00010988 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   10988:	defffd04 	addi	sp,sp,-12
   1098c:	df000215 	stw	fp,8(sp)
   10990:	df000204 	addi	fp,sp,8
   10994:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   10998:	e0bfff17 	ldw	r2,-4(fp)
   1099c:	1081000c 	andi	r2,r2,1024
   109a0:	1004d2ba 	srli	r2,r2,10
   109a4:	e0bffe05 	stb	r2,-8(fp)
	return re;
   109a8:	e0bffe03 	ldbu	r2,-8(fp)
}
   109ac:	e037883a 	mov	sp,fp
   109b0:	df000017 	ldw	fp,0(sp)
   109b4:	dec00104 	addi	sp,sp,4
   109b8:	f800283a 	ret

000109bc <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   109bc:	defffd04 	addi	sp,sp,-12
   109c0:	df000215 	stw	fp,8(sp)
   109c4:	df000204 	addi	fp,sp,8
   109c8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   109cc:	e0bfff17 	ldw	r2,-4(fp)
   109d0:	1004d43a 	srli	r2,r2,16
   109d4:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   109d8:	e0bffe0b 	ldhu	r2,-8(fp)
}
   109dc:	e037883a 	mov	sp,fp
   109e0:	df000017 	ldw	fp,0(sp)
   109e4:	dec00104 	addi	sp,sp,4
   109e8:	f800283a 	ret

000109ec <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   109ec:	defffd04 	addi	sp,sp,-12
   109f0:	df000215 	stw	fp,8(sp)
   109f4:	df000204 	addi	fp,sp,8
   109f8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   109fc:	e0bfff17 	ldw	r2,-4(fp)
   10a00:	10a0000c 	andi	r2,r2,32768
   10a04:	1004d3fa 	srli	r2,r2,15
   10a08:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   10a0c:	e0bffe03 	ldbu	r2,-8(fp)
}
   10a10:	e037883a 	mov	sp,fp
   10a14:	df000017 	ldw	fp,0(sp)
   10a18:	dec00104 	addi	sp,sp,4
   10a1c:	f800283a 	ret

00010a20 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   10a20:	defffd04 	addi	sp,sp,-12
   10a24:	df000215 	stw	fp,8(sp)
   10a28:	df000204 	addi	fp,sp,8
   10a2c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   10a30:	e0bfff17 	ldw	r2,-4(fp)
   10a34:	e0bffe05 	stb	r2,-8(fp)
	return data;
   10a38:	e0bffe03 	ldbu	r2,-8(fp)
}
   10a3c:	e037883a 	mov	sp,fp
   10a40:	df000017 	ldw	fp,0(sp)
   10a44:	dec00104 	addi	sp,sp,4
   10a48:	f800283a 	ret

00010a4c <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   10a4c:	defffb04 	addi	sp,sp,-20
   10a50:	dfc00415 	stw	ra,16(sp)
   10a54:	df000315 	stw	fp,12(sp)
   10a58:	df000304 	addi	fp,sp,12
   10a5c:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   10a60:	e13fff17 	ldw	r4,-4(fp)
   10a64:	01403fc4 	movi	r5,255
   10a68:	0010ca80 	call	10ca8 <alt_up_ps2_write_data_byte_with_ack>
   10a6c:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   10a70:	e0bffd17 	ldw	r2,-12(fp)
   10a74:	1000211e 	bne	r2,zero,10afc <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   10a78:	e0bffe04 	addi	r2,fp,-8
   10a7c:	e13fff17 	ldw	r4,-4(fp)
   10a80:	100b883a 	mov	r5,r2
   10a84:	0010d0c0 	call	10d0c <alt_up_ps2_read_data_byte_timeout>
   10a88:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   10a8c:	e0bffd17 	ldw	r2,-12(fp)
   10a90:	10001a1e 	bne	r2,zero,10afc <alt_up_ps2_init+0xb0>
   10a94:	e0bffe03 	ldbu	r2,-8(fp)
   10a98:	10803fcc 	andi	r2,r2,255
   10a9c:	10802a98 	cmpnei	r2,r2,170
   10aa0:	1000161e 	bne	r2,zero,10afc <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   10aa4:	e0bffe04 	addi	r2,fp,-8
   10aa8:	e13fff17 	ldw	r4,-4(fp)
   10aac:	100b883a 	mov	r5,r2
   10ab0:	0010d0c0 	call	10d0c <alt_up_ps2_read_data_byte_timeout>
   10ab4:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   10ab8:	e0bffd17 	ldw	r2,-12(fp)
   10abc:	10bfe318 	cmpnei	r2,r2,-116
   10ac0:	1000041e 	bne	r2,zero,10ad4 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   10ac4:	e0bfff17 	ldw	r2,-4(fp)
   10ac8:	00c00044 	movi	r3,1
   10acc:	10c00d15 	stw	r3,52(r2)
   10ad0:	00000a06 	br	10afc <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   10ad4:	e0bffd17 	ldw	r2,-12(fp)
   10ad8:	1000081e 	bne	r2,zero,10afc <alt_up_ps2_init+0xb0>
   10adc:	e0bffe03 	ldbu	r2,-8(fp)
   10ae0:	10803fcc 	andi	r2,r2,255
   10ae4:	1000051e 	bne	r2,zero,10afc <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   10ae8:	e0bfff17 	ldw	r2,-4(fp)
   10aec:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   10af0:	e13fff17 	ldw	r4,-4(fp)
   10af4:	01403d04 	movi	r5,244
   10af8:	0010bc40 	call	10bc4 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   10afc:	e037883a 	mov	sp,fp
   10b00:	dfc00117 	ldw	ra,4(sp)
   10b04:	df000017 	ldw	fp,0(sp)
   10b08:	dec00204 	addi	sp,sp,8
   10b0c:	f800283a 	ret

00010b10 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   10b10:	defffd04 	addi	sp,sp,-12
   10b14:	df000215 	stw	fp,8(sp)
   10b18:	df000204 	addi	fp,sp,8
   10b1c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   10b20:	e0bfff17 	ldw	r2,-4(fp)
   10b24:	10800a17 	ldw	r2,40(r2)
   10b28:	10800104 	addi	r2,r2,4
   10b2c:	10800037 	ldwio	r2,0(r2)
   10b30:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   10b34:	e0bffe17 	ldw	r2,-8(fp)
   10b38:	10800054 	ori	r2,r2,1
   10b3c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   10b40:	e0bfff17 	ldw	r2,-4(fp)
   10b44:	10800a17 	ldw	r2,40(r2)
   10b48:	10800104 	addi	r2,r2,4
   10b4c:	1007883a 	mov	r3,r2
   10b50:	e0bffe17 	ldw	r2,-8(fp)
   10b54:	18800035 	stwio	r2,0(r3)
}
   10b58:	e037883a 	mov	sp,fp
   10b5c:	df000017 	ldw	fp,0(sp)
   10b60:	dec00104 	addi	sp,sp,4
   10b64:	f800283a 	ret

00010b68 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   10b68:	defffd04 	addi	sp,sp,-12
   10b6c:	df000215 	stw	fp,8(sp)
   10b70:	df000204 	addi	fp,sp,8
   10b74:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   10b78:	e0bfff17 	ldw	r2,-4(fp)
   10b7c:	10800a17 	ldw	r2,40(r2)
   10b80:	10800104 	addi	r2,r2,4
   10b84:	10800037 	ldwio	r2,0(r2)
   10b88:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   10b8c:	e0fffe17 	ldw	r3,-8(fp)
   10b90:	00bfff84 	movi	r2,-2
   10b94:	1884703a 	and	r2,r3,r2
   10b98:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   10b9c:	e0bfff17 	ldw	r2,-4(fp)
   10ba0:	10800a17 	ldw	r2,40(r2)
   10ba4:	10800104 	addi	r2,r2,4
   10ba8:	1007883a 	mov	r3,r2
   10bac:	e0bffe17 	ldw	r2,-8(fp)
   10bb0:	18800035 	stwio	r2,0(r3)
}
   10bb4:	e037883a 	mov	sp,fp
   10bb8:	df000017 	ldw	fp,0(sp)
   10bbc:	dec00104 	addi	sp,sp,4
   10bc0:	f800283a 	ret

00010bc4 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   10bc4:	defffb04 	addi	sp,sp,-20
   10bc8:	dfc00415 	stw	ra,16(sp)
   10bcc:	df000315 	stw	fp,12(sp)
   10bd0:	df000304 	addi	fp,sp,12
   10bd4:	e13ffe15 	stw	r4,-8(fp)
   10bd8:	2805883a 	mov	r2,r5
   10bdc:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   10be0:	e0bffe17 	ldw	r2,-8(fp)
   10be4:	10800a17 	ldw	r2,40(r2)
   10be8:	1007883a 	mov	r3,r2
   10bec:	e0bfff03 	ldbu	r2,-4(fp)
   10bf0:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   10bf4:	e0bffe17 	ldw	r2,-8(fp)
   10bf8:	10800a17 	ldw	r2,40(r2)
   10bfc:	10800104 	addi	r2,r2,4
   10c00:	10800037 	ldwio	r2,0(r2)
   10c04:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   10c08:	e13ffd17 	ldw	r4,-12(fp)
   10c0c:	00109880 	call	10988 <read_CE_bit>
   10c10:	10803fcc 	andi	r2,r2,255
   10c14:	10000226 	beq	r2,zero,10c20 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   10c18:	00bffec4 	movi	r2,-5
   10c1c:	00000106 	br	10c24 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   10c20:	0005883a 	mov	r2,zero
}
   10c24:	e037883a 	mov	sp,fp
   10c28:	dfc00117 	ldw	ra,4(sp)
   10c2c:	df000017 	ldw	fp,0(sp)
   10c30:	dec00204 	addi	sp,sp,8
   10c34:	f800283a 	ret

00010c38 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   10c38:	defffc04 	addi	sp,sp,-16
   10c3c:	dfc00315 	stw	ra,12(sp)
   10c40:	df000215 	stw	fp,8(sp)
   10c44:	df000204 	addi	fp,sp,8
   10c48:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   10c4c:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   10c50:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   10c54:	e0bffe44 	addi	r2,fp,-7
   10c58:	e13fff17 	ldw	r4,-4(fp)
   10c5c:	100b883a 	mov	r5,r2
   10c60:	0010d0c0 	call	10d0c <alt_up_ps2_read_data_byte_timeout>
   10c64:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   10c68:	e0bffe03 	ldbu	r2,-8(fp)
   10c6c:	1000061e 	bne	r2,zero,10c88 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   10c70:	e0bffe43 	ldbu	r2,-7(fp)
   10c74:	10803fcc 	andi	r2,r2,255
   10c78:	10803e98 	cmpnei	r2,r2,250
   10c7c:	1000041e 	bne	r2,zero,10c90 <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   10c80:	0005883a 	mov	r2,zero
   10c84:	00000306 	br	10c94 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   10c88:	e0bffe03 	ldbu	r2,-8(fp)
   10c8c:	00000106 	br	10c94 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   10c90:	003ff006 	br	10c54 <__alt_mem_Flash_flash_data+0xf4010c54>
	return -ETIMEDOUT;
}
   10c94:	e037883a 	mov	sp,fp
   10c98:	dfc00117 	ldw	ra,4(sp)
   10c9c:	df000017 	ldw	fp,0(sp)
   10ca0:	dec00204 	addi	sp,sp,8
   10ca4:	f800283a 	ret

00010ca8 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   10ca8:	defffa04 	addi	sp,sp,-24
   10cac:	dfc00515 	stw	ra,20(sp)
   10cb0:	df000415 	stw	fp,16(sp)
   10cb4:	df000404 	addi	fp,sp,16
   10cb8:	e13ffe15 	stw	r4,-8(fp)
   10cbc:	2805883a 	mov	r2,r5
   10cc0:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   10cc4:	e0bfff03 	ldbu	r2,-4(fp)
   10cc8:	e13ffe17 	ldw	r4,-8(fp)
   10ccc:	100b883a 	mov	r5,r2
   10cd0:	0010bc40 	call	10bc4 <alt_up_ps2_write_data_byte>
   10cd4:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   10cd8:	e0bffc17 	ldw	r2,-16(fp)
   10cdc:	10000226 	beq	r2,zero,10ce8 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   10ce0:	e0bffc17 	ldw	r2,-16(fp)
   10ce4:	00000406 	br	10cf8 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   10ce8:	e13ffe17 	ldw	r4,-8(fp)
   10cec:	0010c380 	call	10c38 <alt_up_ps2_wait_for_ack>
   10cf0:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   10cf4:	e0bffd17 	ldw	r2,-12(fp)
}
   10cf8:	e037883a 	mov	sp,fp
   10cfc:	dfc00117 	ldw	ra,4(sp)
   10d00:	df000017 	ldw	fp,0(sp)
   10d04:	dec00204 	addi	sp,sp,8
   10d08:	f800283a 	ret

00010d0c <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   10d0c:	defffa04 	addi	sp,sp,-24
   10d10:	dfc00515 	stw	ra,20(sp)
   10d14:	df000415 	stw	fp,16(sp)
   10d18:	df000404 	addi	fp,sp,16
   10d1c:	e13ffe15 	stw	r4,-8(fp)
   10d20:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   10d24:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   10d28:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   10d2c:	e0bffc17 	ldw	r2,-16(fp)
   10d30:	10800044 	addi	r2,r2,1
   10d34:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   10d38:	e0bffe17 	ldw	r2,-8(fp)
   10d3c:	10800a17 	ldw	r2,40(r2)
   10d40:	10800037 	ldwio	r2,0(r2)
   10d44:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   10d48:	e13ffd17 	ldw	r4,-12(fp)
   10d4c:	00109ec0 	call	109ec <read_data_valid>
   10d50:	10803fcc 	andi	r2,r2,255
   10d54:	10000726 	beq	r2,zero,10d74 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   10d58:	e13ffd17 	ldw	r4,-12(fp)
   10d5c:	0010a200 	call	10a20 <read_data_byte>
   10d60:	1007883a 	mov	r3,r2
   10d64:	e0bfff17 	ldw	r2,-4(fp)
   10d68:	10c00005 	stb	r3,0(r2)
			return 0;
   10d6c:	0005883a 	mov	r2,zero
   10d70:	00000a06 	br	10d9c <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   10d74:	e0bffe17 	ldw	r2,-8(fp)
   10d78:	10800c17 	ldw	r2,48(r2)
   10d7c:	10000626 	beq	r2,zero,10d98 <alt_up_ps2_read_data_byte_timeout+0x8c>
   10d80:	e0bffe17 	ldw	r2,-8(fp)
   10d84:	10c00c17 	ldw	r3,48(r2)
   10d88:	e0bffc17 	ldw	r2,-16(fp)
   10d8c:	1880022e 	bgeu	r3,r2,10d98 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   10d90:	00bfe304 	movi	r2,-116
   10d94:	00000106 	br	10d9c <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   10d98:	003fe406 	br	10d2c <__alt_mem_Flash_flash_data+0xf4010d2c>
}
   10d9c:	e037883a 	mov	sp,fp
   10da0:	dfc00117 	ldw	ra,4(sp)
   10da4:	df000017 	ldw	fp,0(sp)
   10da8:	dec00204 	addi	sp,sp,8
   10dac:	f800283a 	ret

00010db0 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   10db0:	defffb04 	addi	sp,sp,-20
   10db4:	dfc00415 	stw	ra,16(sp)
   10db8:	df000315 	stw	fp,12(sp)
   10dbc:	df000304 	addi	fp,sp,12
   10dc0:	e13ffe15 	stw	r4,-8(fp)
   10dc4:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   10dc8:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   10dcc:	e0bffe17 	ldw	r2,-8(fp)
   10dd0:	10800a17 	ldw	r2,40(r2)
   10dd4:	10800037 	ldwio	r2,0(r2)
   10dd8:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   10ddc:	e13ffd17 	ldw	r4,-12(fp)
   10de0:	00109ec0 	call	109ec <read_data_valid>
   10de4:	10803fcc 	andi	r2,r2,255
   10de8:	10000726 	beq	r2,zero,10e08 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   10dec:	e13ffd17 	ldw	r4,-12(fp)
   10df0:	0010a200 	call	10a20 <read_data_byte>
   10df4:	1007883a 	mov	r3,r2
   10df8:	e0bfff17 	ldw	r2,-4(fp)
   10dfc:	10c00005 	stb	r3,0(r2)
		return 0;
   10e00:	0005883a 	mov	r2,zero
   10e04:	00000106 	br	10e0c <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   10e08:	00bfffc4 	movi	r2,-1
}
   10e0c:	e037883a 	mov	sp,fp
   10e10:	dfc00117 	ldw	ra,4(sp)
   10e14:	df000017 	ldw	fp,0(sp)
   10e18:	dec00204 	addi	sp,sp,8
   10e1c:	f800283a 	ret

00010e20 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   10e20:	defffb04 	addi	sp,sp,-20
   10e24:	dfc00415 	stw	ra,16(sp)
   10e28:	df000315 	stw	fp,12(sp)
   10e2c:	df000304 	addi	fp,sp,12
   10e30:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   10e34:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   10e38:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   10e3c:	e0bfff17 	ldw	r2,-4(fp)
   10e40:	10800a17 	ldw	r2,40(r2)
   10e44:	10800037 	ldwio	r2,0(r2)
   10e48:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   10e4c:	e13ffe17 	ldw	r4,-8(fp)
   10e50:	00109bc0 	call	109bc <read_num_bytes_available>
   10e54:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   10e58:	e0bffd0b 	ldhu	r2,-12(fp)
   10e5c:	103ff71e 	bne	r2,zero,10e3c <__alt_mem_Flash_flash_data+0xf4010e3c>
}
   10e60:	e037883a 	mov	sp,fp
   10e64:	dfc00117 	ldw	ra,4(sp)
   10e68:	df000017 	ldw	fp,0(sp)
   10e6c:	dec00204 	addi	sp,sp,8
   10e70:	f800283a 	ret

00010e74 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   10e74:	defff804 	addi	sp,sp,-32
   10e78:	dfc00715 	stw	ra,28(sp)
   10e7c:	df000615 	stw	fp,24(sp)
   10e80:	df000604 	addi	fp,sp,24
   10e84:	e13ffd15 	stw	r4,-12(fp)
   10e88:	e17ffe15 	stw	r5,-8(fp)
   10e8c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   10e90:	e0bffd17 	ldw	r2,-12(fp)
   10e94:	10800017 	ldw	r2,0(r2)
   10e98:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   10e9c:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   10ea0:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   10ea4:	e0fffc17 	ldw	r3,-16(fp)
   10ea8:	e0bfff17 	ldw	r2,-4(fp)
   10eac:	18bffd16 	blt	r3,r2,10ea4 <__alt_mem_Flash_flash_data+0xf4010ea4>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   10eb0:	e0bffe17 	ldw	r2,-8(fp)
   10eb4:	10c00044 	addi	r3,r2,1
   10eb8:	e0fffe15 	stw	r3,-8(fp)
   10ebc:	e13ffa17 	ldw	r4,-24(fp)
   10ec0:	100b883a 	mov	r5,r2
   10ec4:	0010d0c0 	call	10d0c <alt_up_ps2_read_data_byte_timeout>
   10ec8:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   10ecc:	e0bffb17 	ldw	r2,-20(fp)
   10ed0:	10000226 	beq	r2,zero,10edc <alt_up_ps2_read_fd+0x68>
			return count;
   10ed4:	e0bffc17 	ldw	r2,-16(fp)
   10ed8:	00000406 	br	10eec <alt_up_ps2_read_fd+0x78>
		count++;
   10edc:	e0bffc17 	ldw	r2,-16(fp)
   10ee0:	10800044 	addi	r2,r2,1
   10ee4:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   10ee8:	e0bffc17 	ldw	r2,-16(fp)
}
   10eec:	e037883a 	mov	sp,fp
   10ef0:	dfc00117 	ldw	ra,4(sp)
   10ef4:	df000017 	ldw	fp,0(sp)
   10ef8:	dec00204 	addi	sp,sp,8
   10efc:	f800283a 	ret

00010f00 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   10f00:	defff804 	addi	sp,sp,-32
   10f04:	dfc00715 	stw	ra,28(sp)
   10f08:	df000615 	stw	fp,24(sp)
   10f0c:	df000604 	addi	fp,sp,24
   10f10:	e13ffd15 	stw	r4,-12(fp)
   10f14:	e17ffe15 	stw	r5,-8(fp)
   10f18:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   10f1c:	e0bffd17 	ldw	r2,-12(fp)
   10f20:	10800017 	ldw	r2,0(r2)
   10f24:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   10f28:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   10f2c:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   10f30:	00001006 	br	10f74 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   10f34:	e0bffe17 	ldw	r2,-8(fp)
   10f38:	10c00044 	addi	r3,r2,1
   10f3c:	e0fffe15 	stw	r3,-8(fp)
   10f40:	10800003 	ldbu	r2,0(r2)
   10f44:	10803fcc 	andi	r2,r2,255
   10f48:	e13ffb17 	ldw	r4,-20(fp)
   10f4c:	100b883a 	mov	r5,r2
   10f50:	0010bc40 	call	10bc4 <alt_up_ps2_write_data_byte>
   10f54:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   10f58:	e0bffc17 	ldw	r2,-16(fp)
   10f5c:	10000226 	beq	r2,zero,10f68 <alt_up_ps2_write_fd+0x68>
			return count;
   10f60:	e0bffa17 	ldw	r2,-24(fp)
   10f64:	00000706 	br	10f84 <alt_up_ps2_write_fd+0x84>
		count++;
   10f68:	e0bffa17 	ldw	r2,-24(fp)
   10f6c:	10800044 	addi	r2,r2,1
   10f70:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   10f74:	e0fffa17 	ldw	r3,-24(fp)
   10f78:	e0bfff17 	ldw	r2,-4(fp)
   10f7c:	18bfed16 	blt	r3,r2,10f34 <__alt_mem_Flash_flash_data+0xf4010f34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   10f80:	e0bffa17 	ldw	r2,-24(fp)
}
   10f84:	e037883a 	mov	sp,fp
   10f88:	dfc00117 	ldw	ra,4(sp)
   10f8c:	df000017 	ldw	fp,0(sp)
   10f90:	dec00204 	addi	sp,sp,8
   10f94:	f800283a 	ret

00010f98 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   10f98:	defffc04 	addi	sp,sp,-16
   10f9c:	dfc00315 	stw	ra,12(sp)
   10fa0:	df000215 	stw	fp,8(sp)
   10fa4:	df000204 	addi	fp,sp,8
   10fa8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   10fac:	e13fff17 	ldw	r4,-4(fp)
   10fb0:	01400074 	movhi	r5,1
   10fb4:	2953c604 	addi	r5,r5,20248
   10fb8:	00119540 	call	11954 <alt_find_dev>
   10fbc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   10fc0:	e0bffe17 	ldw	r2,-8(fp)
}
   10fc4:	e037883a 	mov	sp,fp
   10fc8:	dfc00117 	ldw	ra,4(sp)
   10fcc:	df000017 	ldw	fp,0(sp)
   10fd0:	dec00204 	addi	sp,sp,8
   10fd4:	f800283a 	ret

00010fd8 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   10fd8:	defffd04 	addi	sp,sp,-12
   10fdc:	df000215 	stw	fp,8(sp)
   10fe0:	df000204 	addi	fp,sp,8
   10fe4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   10fe8:	e0bfff17 	ldw	r2,-4(fp)
   10fec:	10800a17 	ldw	r2,40(r2)
   10ff0:	10800104 	addi	r2,r2,4
   10ff4:	10800037 	ldwio	r2,0(r2)
   10ff8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   10ffc:	e0bffe17 	ldw	r2,-8(fp)
   11000:	10800054 	ori	r2,r2,1
   11004:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   11008:	e0bfff17 	ldw	r2,-4(fp)
   1100c:	10800a17 	ldw	r2,40(r2)
   11010:	10800104 	addi	r2,r2,4
   11014:	1007883a 	mov	r3,r2
   11018:	e0bffe17 	ldw	r2,-8(fp)
   1101c:	18800035 	stwio	r2,0(r3)
}
   11020:	e037883a 	mov	sp,fp
   11024:	df000017 	ldw	fp,0(sp)
   11028:	dec00104 	addi	sp,sp,4
   1102c:	f800283a 	ret

00011030 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   11030:	defffd04 	addi	sp,sp,-12
   11034:	df000215 	stw	fp,8(sp)
   11038:	df000204 	addi	fp,sp,8
   1103c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   11040:	e0bfff17 	ldw	r2,-4(fp)
   11044:	10800a17 	ldw	r2,40(r2)
   11048:	10800104 	addi	r2,r2,4
   1104c:	10800037 	ldwio	r2,0(r2)
   11050:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   11054:	e0fffe17 	ldw	r3,-8(fp)
   11058:	00bfff84 	movi	r2,-2
   1105c:	1884703a 	and	r2,r3,r2
   11060:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   11064:	e0bfff17 	ldw	r2,-4(fp)
   11068:	10800a17 	ldw	r2,40(r2)
   1106c:	10800104 	addi	r2,r2,4
   11070:	1007883a 	mov	r3,r2
   11074:	e0bffe17 	ldw	r2,-8(fp)
   11078:	18800035 	stwio	r2,0(r3)
}
   1107c:	e037883a 	mov	sp,fp
   11080:	df000017 	ldw	fp,0(sp)
   11084:	dec00104 	addi	sp,sp,4
   11088:	f800283a 	ret

0001108c <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1108c:	defffd04 	addi	sp,sp,-12
   11090:	df000215 	stw	fp,8(sp)
   11094:	df000204 	addi	fp,sp,8
   11098:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1109c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   110a0:	e0bfff17 	ldw	r2,-4(fp)
   110a4:	10800a17 	ldw	r2,40(r2)
   110a8:	10800084 	addi	r2,r2,2
   110ac:	1080002b 	ldhuio	r2,0(r2)
   110b0:	10bfffcc 	andi	r2,r2,65535
   110b4:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   110b8:	e0bffe0b 	ldhu	r2,-8(fp)
}
   110bc:	e037883a 	mov	sp,fp
   110c0:	df000017 	ldw	fp,0(sp)
   110c4:	dec00104 	addi	sp,sp,4
   110c8:	f800283a 	ret

000110cc <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   110cc:	defffd04 	addi	sp,sp,-12
   110d0:	df000215 	stw	fp,8(sp)
   110d4:	df000204 	addi	fp,sp,8
   110d8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   110dc:	e0bfff17 	ldw	r2,-4(fp)
   110e0:	10800a17 	ldw	r2,40(r2)
   110e4:	10800104 	addi	r2,r2,4
   110e8:	10800037 	ldwio	r2,0(r2)
   110ec:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   110f0:	e0bffe17 	ldw	r2,-8(fp)
   110f4:	1004d43a 	srli	r2,r2,16
}
   110f8:	e037883a 	mov	sp,fp
   110fc:	df000017 	ldw	fp,0(sp)
   11100:	dec00104 	addi	sp,sp,4
   11104:	f800283a 	ret

00011108 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   11108:	defffd04 	addi	sp,sp,-12
   1110c:	df000215 	stw	fp,8(sp)
   11110:	df000204 	addi	fp,sp,8
   11114:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   11118:	e0bfff17 	ldw	r2,-4(fp)
   1111c:	1080800c 	andi	r2,r2,512
   11120:	1004d27a 	srli	r2,r2,9
   11124:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   11128:	e0bffe17 	ldw	r2,-8(fp)
   1112c:	10000226 	beq	r2,zero,11138 <alt_up_rs232_check_parity+0x30>
   11130:	00bfffc4 	movi	r2,-1
   11134:	00000106 	br	1113c <alt_up_rs232_check_parity+0x34>
   11138:	0005883a 	mov	r2,zero
}
   1113c:	e037883a 	mov	sp,fp
   11140:	df000017 	ldw	fp,0(sp)
   11144:	dec00104 	addi	sp,sp,4
   11148:	f800283a 	ret

0001114c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1114c:	defffd04 	addi	sp,sp,-12
   11150:	df000215 	stw	fp,8(sp)
   11154:	df000204 	addi	fp,sp,8
   11158:	e13ffe15 	stw	r4,-8(fp)
   1115c:	2805883a 	mov	r2,r5
   11160:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   11164:	e0bffe17 	ldw	r2,-8(fp)
   11168:	10800a17 	ldw	r2,40(r2)
   1116c:	1007883a 	mov	r3,r2
   11170:	e0bfff03 	ldbu	r2,-4(fp)
   11174:	18800035 	stwio	r2,0(r3)
	return 0;
   11178:	0005883a 	mov	r2,zero
}
   1117c:	e037883a 	mov	sp,fp
   11180:	df000017 	ldw	fp,0(sp)
   11184:	dec00104 	addi	sp,sp,4
   11188:	f800283a 	ret

0001118c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1118c:	defffa04 	addi	sp,sp,-24
   11190:	dfc00515 	stw	ra,20(sp)
   11194:	df000415 	stw	fp,16(sp)
   11198:	df000404 	addi	fp,sp,16
   1119c:	e13ffd15 	stw	r4,-12(fp)
   111a0:	e17ffe15 	stw	r5,-8(fp)
   111a4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   111a8:	e0bffd17 	ldw	r2,-12(fp)
   111ac:	10800a17 	ldw	r2,40(r2)
   111b0:	10800037 	ldwio	r2,0(r2)
   111b4:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   111b8:	e0bffc17 	ldw	r2,-16(fp)
   111bc:	1007883a 	mov	r3,r2
   111c0:	e0bffe17 	ldw	r2,-8(fp)
   111c4:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   111c8:	e13ffc17 	ldw	r4,-16(fp)
   111cc:	00111080 	call	11108 <alt_up_rs232_check_parity>
   111d0:	1007883a 	mov	r3,r2
   111d4:	e0bfff17 	ldw	r2,-4(fp)
   111d8:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   111dc:	e0bffc17 	ldw	r2,-16(fp)
   111e0:	10a0000c 	andi	r2,r2,32768
   111e4:	1004d3fa 	srli	r2,r2,15
   111e8:	10bfffc4 	addi	r2,r2,-1
}
   111ec:	e037883a 	mov	sp,fp
   111f0:	dfc00117 	ldw	ra,4(sp)
   111f4:	df000017 	ldw	fp,0(sp)
   111f8:	dec00204 	addi	sp,sp,8
   111fc:	f800283a 	ret

00011200 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   11200:	defff804 	addi	sp,sp,-32
   11204:	dfc00715 	stw	ra,28(sp)
   11208:	df000615 	stw	fp,24(sp)
   1120c:	df000604 	addi	fp,sp,24
   11210:	e13ffd15 	stw	r4,-12(fp)
   11214:	e17ffe15 	stw	r5,-8(fp)
   11218:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1121c:	e0bffd17 	ldw	r2,-12(fp)
   11220:	10800017 	ldw	r2,0(r2)
   11224:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   11228:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1122c:	00000e06 	br	11268 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   11230:	e0bffe17 	ldw	r2,-8(fp)
   11234:	10c00044 	addi	r3,r2,1
   11238:	e0fffe15 	stw	r3,-8(fp)
   1123c:	e0fffc04 	addi	r3,fp,-16
   11240:	e13ffb17 	ldw	r4,-20(fp)
   11244:	100b883a 	mov	r5,r2
   11248:	180d883a 	mov	r6,r3
   1124c:	001118c0 	call	1118c <alt_up_rs232_read_data>
   11250:	1000041e 	bne	r2,zero,11264 <alt_up_rs232_read_fd+0x64>
			count++;
   11254:	e0bffa17 	ldw	r2,-24(fp)
   11258:	10800044 	addi	r2,r2,1
   1125c:	e0bffa15 	stw	r2,-24(fp)
   11260:	00000106 	br	11268 <alt_up_rs232_read_fd+0x68>
		else
			break;
   11264:	00000406 	br	11278 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   11268:	e0bfff17 	ldw	r2,-4(fp)
   1126c:	10ffffc4 	addi	r3,r2,-1
   11270:	e0ffff15 	stw	r3,-4(fp)
   11274:	103fee1e 	bne	r2,zero,11230 <__alt_mem_Flash_flash_data+0xf4011230>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   11278:	e0bffa17 	ldw	r2,-24(fp)
}
   1127c:	e037883a 	mov	sp,fp
   11280:	dfc00117 	ldw	ra,4(sp)
   11284:	df000017 	ldw	fp,0(sp)
   11288:	dec00204 	addi	sp,sp,8
   1128c:	f800283a 	ret

00011290 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   11290:	defff904 	addi	sp,sp,-28
   11294:	dfc00615 	stw	ra,24(sp)
   11298:	df000515 	stw	fp,20(sp)
   1129c:	df000504 	addi	fp,sp,20
   112a0:	e13ffd15 	stw	r4,-12(fp)
   112a4:	e17ffe15 	stw	r5,-8(fp)
   112a8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   112ac:	e0bffd17 	ldw	r2,-12(fp)
   112b0:	10800017 	ldw	r2,0(r2)
   112b4:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   112b8:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   112bc:	00000f06 	br	112fc <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   112c0:	e0bffe17 	ldw	r2,-8(fp)
   112c4:	10800003 	ldbu	r2,0(r2)
   112c8:	10803fcc 	andi	r2,r2,255
   112cc:	e13ffc17 	ldw	r4,-16(fp)
   112d0:	100b883a 	mov	r5,r2
   112d4:	001114c0 	call	1114c <alt_up_rs232_write_data>
   112d8:	1000071e 	bne	r2,zero,112f8 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   112dc:	e0bffb17 	ldw	r2,-20(fp)
   112e0:	10800044 	addi	r2,r2,1
   112e4:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   112e8:	e0bffe17 	ldw	r2,-8(fp)
   112ec:	10800044 	addi	r2,r2,1
   112f0:	e0bffe15 	stw	r2,-8(fp)
   112f4:	00000106 	br	112fc <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   112f8:	00000406 	br	1130c <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   112fc:	e0bfff17 	ldw	r2,-4(fp)
   11300:	10ffffc4 	addi	r3,r2,-1
   11304:	e0ffff15 	stw	r3,-4(fp)
   11308:	103fed1e 	bne	r2,zero,112c0 <__alt_mem_Flash_flash_data+0xf40112c0>
			ptr++;
		}
		else
			break;
	}
	return count;
   1130c:	e0bffb17 	ldw	r2,-20(fp)
}
   11310:	e037883a 	mov	sp,fp
   11314:	dfc00117 	ldw	ra,4(sp)
   11318:	df000017 	ldw	fp,0(sp)
   1131c:	dec00204 	addi	sp,sp,8
   11320:	f800283a 	ret

00011324 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   11324:	defffc04 	addi	sp,sp,-16
   11328:	dfc00315 	stw	ra,12(sp)
   1132c:	df000215 	stw	fp,8(sp)
   11330:	df000204 	addi	fp,sp,8
   11334:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   11338:	e13fff17 	ldw	r4,-4(fp)
   1133c:	01400074 	movhi	r5,1
   11340:	2953c604 	addi	r5,r5,20248
   11344:	00119540 	call	11954 <alt_find_dev>
   11348:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1134c:	e0bffe17 	ldw	r2,-8(fp)
}
   11350:	e037883a 	mov	sp,fp
   11354:	dfc00117 	ldw	ra,4(sp)
   11358:	df000017 	ldw	fp,0(sp)
   1135c:	dec00204 	addi	sp,sp,8
   11360:	f800283a 	ret

00011364 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   11364:	defffc04 	addi	sp,sp,-16
   11368:	dfc00315 	stw	ra,12(sp)
   1136c:	df000215 	stw	fp,8(sp)
   11370:	df000204 	addi	fp,sp,8
   11374:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   11378:	e0bfff17 	ldw	r2,-4(fp)
   1137c:	10800217 	ldw	r2,8(r2)
   11380:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   11384:	00000b06 	br	113b4 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   11388:	e13ffe17 	ldw	r4,-8(fp)
   1138c:	01400074 	movhi	r5,1
   11390:	294c3104 	addi	r5,r5,12484
   11394:	00128600 	call	12860 <strcmp>
   11398:	1000031e 	bne	r2,zero,113a8 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   1139c:	e0bffe17 	ldw	r2,-8(fp)
   113a0:	10000005 	stb	zero,0(r2)
			break;
   113a4:	00000906 	br	113cc <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   113a8:	e0bffe17 	ldw	r2,-8(fp)
   113ac:	10800044 	addi	r2,r2,1
   113b0:	e0bffe15 	stw	r2,-8(fp)
   113b4:	e0bffe17 	ldw	r2,-8(fp)
   113b8:	10800003 	ldbu	r2,0(r2)
   113bc:	10803fcc 	andi	r2,r2,255
   113c0:	1080201c 	xori	r2,r2,128
   113c4:	10bfe004 	addi	r2,r2,-128
   113c8:	103fef1e 	bne	r2,zero,11388 <__alt_mem_Flash_flash_data+0xf4011388>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   113cc:	0001883a 	nop
}
   113d0:	e037883a 	mov	sp,fp
   113d4:	dfc00117 	ldw	ra,4(sp)
   113d8:	df000017 	ldw	fp,0(sp)
   113dc:	dec00204 	addi	sp,sp,8
   113e0:	f800283a 	ret

000113e4 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   113e4:	defffc04 	addi	sp,sp,-16
   113e8:	dfc00315 	stw	ra,12(sp)
   113ec:	df000215 	stw	fp,8(sp)
   113f0:	df000204 	addi	fp,sp,8
   113f4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   113f8:	e13fff17 	ldw	r4,-4(fp)
   113fc:	01400074 	movhi	r5,1
   11400:	2953c604 	addi	r5,r5,20248
   11404:	00119540 	call	11954 <alt_find_dev>
   11408:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1140c:	e0bffe17 	ldw	r2,-8(fp)
}
   11410:	e037883a 	mov	sp,fp
   11414:	dfc00117 	ldw	ra,4(sp)
   11418:	df000017 	ldw	fp,0(sp)
   1141c:	dec00204 	addi	sp,sp,8
   11420:	f800283a 	ret

00011424 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   11424:	defffa04 	addi	sp,sp,-24
   11428:	df000515 	stw	fp,20(sp)
   1142c:	df000504 	addi	fp,sp,20
   11430:	e13ffc15 	stw	r4,-16(fp)
   11434:	2805883a 	mov	r2,r5
   11438:	e1bffe15 	stw	r6,-8(fp)
   1143c:	e1ffff15 	stw	r7,-4(fp)
   11440:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   11444:	e0bffc17 	ldw	r2,-16(fp)
   11448:	10800c17 	ldw	r2,48(r2)
   1144c:	e0fffe17 	ldw	r3,-8(fp)
   11450:	1880042e 	bgeu	r3,r2,11464 <alt_up_char_buffer_draw+0x40>
   11454:	e0bffc17 	ldw	r2,-16(fp)
   11458:	10800d17 	ldw	r2,52(r2)
   1145c:	e0ffff17 	ldw	r3,-4(fp)
   11460:	18800236 	bltu	r3,r2,1146c <alt_up_char_buffer_draw+0x48>
		return -1;
   11464:	00bfffc4 	movi	r2,-1
   11468:	00001d06 	br	114e0 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   1146c:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   11470:	e0bffc17 	ldw	r2,-16(fp)
   11474:	10c00f17 	ldw	r3,60(r2)
   11478:	e0bffe17 	ldw	r2,-8(fp)
   1147c:	1884703a 	and	r2,r3,r2
   11480:	e0fffc17 	ldw	r3,-16(fp)
   11484:	18c00e17 	ldw	r3,56(r3)
   11488:	10c4983a 	sll	r2,r2,r3
   1148c:	e0fffb17 	ldw	r3,-20(fp)
   11490:	1884b03a 	or	r2,r3,r2
   11494:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   11498:	e0bffc17 	ldw	r2,-16(fp)
   1149c:	10c01117 	ldw	r3,68(r2)
   114a0:	e0bfff17 	ldw	r2,-4(fp)
   114a4:	1884703a 	and	r2,r3,r2
   114a8:	e0fffc17 	ldw	r3,-16(fp)
   114ac:	18c01017 	ldw	r3,64(r3)
   114b0:	10c4983a 	sll	r2,r2,r3
   114b4:	e0fffb17 	ldw	r3,-20(fp)
   114b8:	1884b03a 	or	r2,r3,r2
   114bc:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   114c0:	e0bffc17 	ldw	r2,-16(fp)
   114c4:	10c00b17 	ldw	r3,44(r2)
   114c8:	e0bffb17 	ldw	r2,-20(fp)
   114cc:	1885883a 	add	r2,r3,r2
   114d0:	1007883a 	mov	r3,r2
   114d4:	e0bffd03 	ldbu	r2,-12(fp)
   114d8:	18800025 	stbio	r2,0(r3)

	return 0;
   114dc:	0005883a 	mov	r2,zero
}
   114e0:	e037883a 	mov	sp,fp
   114e4:	df000017 	ldw	fp,0(sp)
   114e8:	dec00104 	addi	sp,sp,4
   114ec:	f800283a 	ret

000114f0 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   114f0:	defffa04 	addi	sp,sp,-24
   114f4:	df000515 	stw	fp,20(sp)
   114f8:	df000504 	addi	fp,sp,20
   114fc:	e13ffc15 	stw	r4,-16(fp)
   11500:	e17ffd15 	stw	r5,-12(fp)
   11504:	e1bffe15 	stw	r6,-8(fp)
   11508:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1150c:	e0bffc17 	ldw	r2,-16(fp)
   11510:	10800c17 	ldw	r2,48(r2)
   11514:	e0fffe17 	ldw	r3,-8(fp)
   11518:	1880042e 	bgeu	r3,r2,1152c <alt_up_char_buffer_string+0x3c>
   1151c:	e0bffc17 	ldw	r2,-16(fp)
   11520:	10800d17 	ldw	r2,52(r2)
   11524:	e0ffff17 	ldw	r3,-4(fp)
   11528:	18800236 	bltu	r3,r2,11534 <alt_up_char_buffer_string+0x44>
		return -1;
   1152c:	00bfffc4 	movi	r2,-1
   11530:	00002b06 	br	115e0 <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   11534:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   11538:	e0bffc17 	ldw	r2,-16(fp)
   1153c:	10801017 	ldw	r2,64(r2)
   11540:	1007883a 	mov	r3,r2
   11544:	e0bfff17 	ldw	r2,-4(fp)
   11548:	10c6983a 	sll	r3,r2,r3
   1154c:	e0bffe17 	ldw	r2,-8(fp)
   11550:	1885883a 	add	r2,r3,r2
   11554:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   11558:	00001a06 	br	115c4 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   1155c:	e0bffc17 	ldw	r2,-16(fp)
   11560:	10c00b17 	ldw	r3,44(r2)
   11564:	e0bffb17 	ldw	r2,-20(fp)
   11568:	1885883a 	add	r2,r3,r2
   1156c:	1007883a 	mov	r3,r2
   11570:	e0bffd17 	ldw	r2,-12(fp)
   11574:	10800003 	ldbu	r2,0(r2)
   11578:	10803fcc 	andi	r2,r2,255
   1157c:	1080201c 	xori	r2,r2,128
   11580:	10bfe004 	addi	r2,r2,-128
   11584:	18800025 	stbio	r2,0(r3)
		++ptr;
   11588:	e0bffd17 	ldw	r2,-12(fp)
   1158c:	10800044 	addi	r2,r2,1
   11590:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   11594:	e0bffe17 	ldw	r2,-8(fp)
   11598:	10800044 	addi	r2,r2,1
   1159c:	e0bffe15 	stw	r2,-8(fp)
   115a0:	e0bffc17 	ldw	r2,-16(fp)
   115a4:	10800c17 	ldw	r2,48(r2)
   115a8:	e0fffe17 	ldw	r3,-8(fp)
   115ac:	18800236 	bltu	r3,r2,115b8 <alt_up_char_buffer_string+0xc8>
			return -1;
   115b0:	00bfffc4 	movi	r2,-1
   115b4:	00000a06 	br	115e0 <alt_up_char_buffer_string+0xf0>
		++offset;
   115b8:	e0bffb17 	ldw	r2,-20(fp)
   115bc:	10800044 	addi	r2,r2,1
   115c0:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   115c4:	e0bffd17 	ldw	r2,-12(fp)
   115c8:	10800003 	ldbu	r2,0(r2)
   115cc:	10803fcc 	andi	r2,r2,255
   115d0:	1080201c 	xori	r2,r2,128
   115d4:	10bfe004 	addi	r2,r2,-128
   115d8:	103fe01e 	bne	r2,zero,1155c <__alt_mem_Flash_flash_data+0xf401155c>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   115dc:	0005883a 	mov	r2,zero
}
   115e0:	e037883a 	mov	sp,fp
   115e4:	df000017 	ldw	fp,0(sp)
   115e8:	dec00104 	addi	sp,sp,4
   115ec:	f800283a 	ret

000115f0 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   115f0:	defffe04 	addi	sp,sp,-8
   115f4:	df000115 	stw	fp,4(sp)
   115f8:	df000104 	addi	fp,sp,4
   115fc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   11600:	e0bfff17 	ldw	r2,-4(fp)
   11604:	10800a17 	ldw	r2,40(r2)
   11608:	10800084 	addi	r2,r2,2
   1160c:	1007883a 	mov	r3,r2
   11610:	00800044 	movi	r2,1
   11614:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   11618:	0001883a 	nop
   1161c:	e0bfff17 	ldw	r2,-4(fp)
   11620:	10800a17 	ldw	r2,40(r2)
   11624:	10800084 	addi	r2,r2,2
   11628:	10800023 	ldbuio	r2,0(r2)
   1162c:	10803fcc 	andi	r2,r2,255
   11630:	1080004c 	andi	r2,r2,1
   11634:	103ff91e 	bne	r2,zero,1161c <__alt_mem_Flash_flash_data+0xf401161c>
	return 0;
   11638:	0005883a 	mov	r2,zero
}
   1163c:	e037883a 	mov	sp,fp
   11640:	df000017 	ldw	fp,0(sp)
   11644:	dec00104 	addi	sp,sp,4
   11648:	f800283a 	ret

0001164c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1164c:	defff504 	addi	sp,sp,-44
   11650:	df000a15 	stw	fp,40(sp)
   11654:	df000a04 	addi	fp,sp,40
   11658:	e13ffc15 	stw	r4,-16(fp)
   1165c:	e17ffd15 	stw	r5,-12(fp)
   11660:	e1bffe15 	stw	r6,-8(fp)
   11664:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   11668:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1166c:	00800074 	movhi	r2,1
   11670:	109bdb04 	addi	r2,r2,28524
   11674:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   11678:	10003f26 	beq	r2,zero,11778 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1167c:	e0bffc17 	ldw	r2,-16(fp)
   11680:	10003b26 	beq	r2,zero,11770 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   11684:	e0bffc17 	ldw	r2,-16(fp)
   11688:	e0fffe17 	ldw	r3,-8(fp)
   1168c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   11690:	e0bffc17 	ldw	r2,-16(fp)
   11694:	e0ffff17 	ldw	r3,-4(fp)
   11698:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1169c:	0005303a 	rdctl	r2,status
   116a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   116a4:	e0fff817 	ldw	r3,-32(fp)
   116a8:	00bfff84 	movi	r2,-2
   116ac:	1884703a 	and	r2,r3,r2
   116b0:	1001703a 	wrctl	status,r2
  
  return context;
   116b4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   116b8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   116bc:	00800074 	movhi	r2,1
   116c0:	109bdc04 	addi	r2,r2,28528
   116c4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   116c8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   116cc:	e0fffd17 	ldw	r3,-12(fp)
   116d0:	e0bff617 	ldw	r2,-40(fp)
   116d4:	1885883a 	add	r2,r3,r2
   116d8:	10c00044 	addi	r3,r2,1
   116dc:	e0bffc17 	ldw	r2,-16(fp)
   116e0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   116e4:	e0bffc17 	ldw	r2,-16(fp)
   116e8:	10c00217 	ldw	r3,8(r2)
   116ec:	e0bff617 	ldw	r2,-40(fp)
   116f0:	1880042e 	bgeu	r3,r2,11704 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   116f4:	e0bffc17 	ldw	r2,-16(fp)
   116f8:	00c00044 	movi	r3,1
   116fc:	10c00405 	stb	r3,16(r2)
   11700:	00000206 	br	1170c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   11704:	e0bffc17 	ldw	r2,-16(fp)
   11708:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1170c:	e0fffc17 	ldw	r3,-16(fp)
   11710:	00800074 	movhi	r2,1
   11714:	1093eb04 	addi	r2,r2,20396
   11718:	e0bff915 	stw	r2,-28(fp)
   1171c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11720:	e0bffa17 	ldw	r2,-24(fp)
   11724:	e0fff917 	ldw	r3,-28(fp)
   11728:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1172c:	e0bff917 	ldw	r2,-28(fp)
   11730:	10c00017 	ldw	r3,0(r2)
   11734:	e0bffa17 	ldw	r2,-24(fp)
   11738:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1173c:	e0bff917 	ldw	r2,-28(fp)
   11740:	10800017 	ldw	r2,0(r2)
   11744:	e0fffa17 	ldw	r3,-24(fp)
   11748:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1174c:	e0bff917 	ldw	r2,-28(fp)
   11750:	e0fffa17 	ldw	r3,-24(fp)
   11754:	10c00015 	stw	r3,0(r2)
   11758:	e0bff717 	ldw	r2,-36(fp)
   1175c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11760:	e0bffb17 	ldw	r2,-20(fp)
   11764:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   11768:	0005883a 	mov	r2,zero
   1176c:	00000306 	br	1177c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   11770:	00bffa84 	movi	r2,-22
   11774:	00000106 	br	1177c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   11778:	00bfde84 	movi	r2,-134
  }
}
   1177c:	e037883a 	mov	sp,fp
   11780:	df000017 	ldw	fp,0(sp)
   11784:	dec00104 	addi	sp,sp,4
   11788:	f800283a 	ret

0001178c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1178c:	deffff04 	addi	sp,sp,-4
   11790:	df000015 	stw	fp,0(sp)
   11794:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11798:	e037883a 	mov	sp,fp
   1179c:	df000017 	ldw	fp,0(sp)
   117a0:	dec00104 	addi	sp,sp,4
   117a4:	f800283a 	ret

000117a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   117a8:	defffe04 	addi	sp,sp,-8
   117ac:	dfc00115 	stw	ra,4(sp)
   117b0:	df000015 	stw	fp,0(sp)
   117b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   117b8:	00800074 	movhi	r2,1
   117bc:	1093c904 	addi	r2,r2,20260
   117c0:	10800017 	ldw	r2,0(r2)
   117c4:	10000526 	beq	r2,zero,117dc <alt_get_errno+0x34>
   117c8:	00800074 	movhi	r2,1
   117cc:	1093c904 	addi	r2,r2,20260
   117d0:	10800017 	ldw	r2,0(r2)
   117d4:	103ee83a 	callr	r2
   117d8:	00000206 	br	117e4 <alt_get_errno+0x3c>
   117dc:	00800074 	movhi	r2,1
   117e0:	109bbd04 	addi	r2,r2,28404
}
   117e4:	e037883a 	mov	sp,fp
   117e8:	dfc00117 	ldw	ra,4(sp)
   117ec:	df000017 	ldw	fp,0(sp)
   117f0:	dec00204 	addi	sp,sp,8
   117f4:	f800283a 	ret

000117f8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   117f8:	defffa04 	addi	sp,sp,-24
   117fc:	dfc00515 	stw	ra,20(sp)
   11800:	df000415 	stw	fp,16(sp)
   11804:	df000404 	addi	fp,sp,16
   11808:	e13ffe15 	stw	r4,-8(fp)
   1180c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11810:	e0bffe17 	ldw	r2,-8(fp)
   11814:	10000326 	beq	r2,zero,11824 <alt_dev_llist_insert+0x2c>
   11818:	e0bffe17 	ldw	r2,-8(fp)
   1181c:	10800217 	ldw	r2,8(r2)
   11820:	1000061e 	bne	r2,zero,1183c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   11824:	00117a80 	call	117a8 <alt_get_errno>
   11828:	1007883a 	mov	r3,r2
   1182c:	00800584 	movi	r2,22
   11830:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11834:	00bffa84 	movi	r2,-22
   11838:	00001306 	br	11888 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1183c:	e0bffe17 	ldw	r2,-8(fp)
   11840:	e0ffff17 	ldw	r3,-4(fp)
   11844:	e0fffc15 	stw	r3,-16(fp)
   11848:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1184c:	e0bffd17 	ldw	r2,-12(fp)
   11850:	e0fffc17 	ldw	r3,-16(fp)
   11854:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11858:	e0bffc17 	ldw	r2,-16(fp)
   1185c:	10c00017 	ldw	r3,0(r2)
   11860:	e0bffd17 	ldw	r2,-12(fp)
   11864:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11868:	e0bffc17 	ldw	r2,-16(fp)
   1186c:	10800017 	ldw	r2,0(r2)
   11870:	e0fffd17 	ldw	r3,-12(fp)
   11874:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11878:	e0bffc17 	ldw	r2,-16(fp)
   1187c:	e0fffd17 	ldw	r3,-12(fp)
   11880:	10c00015 	stw	r3,0(r2)

  return 0;  
   11884:	0005883a 	mov	r2,zero
}
   11888:	e037883a 	mov	sp,fp
   1188c:	dfc00117 	ldw	ra,4(sp)
   11890:	df000017 	ldw	fp,0(sp)
   11894:	dec00204 	addi	sp,sp,8
   11898:	f800283a 	ret

0001189c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1189c:	defffd04 	addi	sp,sp,-12
   118a0:	dfc00215 	stw	ra,8(sp)
   118a4:	df000115 	stw	fp,4(sp)
   118a8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   118ac:	00800074 	movhi	r2,1
   118b0:	108af904 	addi	r2,r2,11236
   118b4:	e0bfff15 	stw	r2,-4(fp)
   118b8:	00000606 	br	118d4 <_do_ctors+0x38>
        (*ctor) (); 
   118bc:	e0bfff17 	ldw	r2,-4(fp)
   118c0:	10800017 	ldw	r2,0(r2)
   118c4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   118c8:	e0bfff17 	ldw	r2,-4(fp)
   118cc:	10bfff04 	addi	r2,r2,-4
   118d0:	e0bfff15 	stw	r2,-4(fp)
   118d4:	e0ffff17 	ldw	r3,-4(fp)
   118d8:	00800074 	movhi	r2,1
   118dc:	108afa04 	addi	r2,r2,11240
   118e0:	18bff62e 	bgeu	r3,r2,118bc <__alt_mem_Flash_flash_data+0xf40118bc>
        (*ctor) (); 
}
   118e4:	e037883a 	mov	sp,fp
   118e8:	dfc00117 	ldw	ra,4(sp)
   118ec:	df000017 	ldw	fp,0(sp)
   118f0:	dec00204 	addi	sp,sp,8
   118f4:	f800283a 	ret

000118f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   118f8:	defffd04 	addi	sp,sp,-12
   118fc:	dfc00215 	stw	ra,8(sp)
   11900:	df000115 	stw	fp,4(sp)
   11904:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11908:	00800074 	movhi	r2,1
   1190c:	108af904 	addi	r2,r2,11236
   11910:	e0bfff15 	stw	r2,-4(fp)
   11914:	00000606 	br	11930 <_do_dtors+0x38>
        (*dtor) (); 
   11918:	e0bfff17 	ldw	r2,-4(fp)
   1191c:	10800017 	ldw	r2,0(r2)
   11920:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11924:	e0bfff17 	ldw	r2,-4(fp)
   11928:	10bfff04 	addi	r2,r2,-4
   1192c:	e0bfff15 	stw	r2,-4(fp)
   11930:	e0ffff17 	ldw	r3,-4(fp)
   11934:	00800074 	movhi	r2,1
   11938:	108afa04 	addi	r2,r2,11240
   1193c:	18bff62e 	bgeu	r3,r2,11918 <__alt_mem_Flash_flash_data+0xf4011918>
        (*dtor) (); 
}
   11940:	e037883a 	mov	sp,fp
   11944:	dfc00117 	ldw	ra,4(sp)
   11948:	df000017 	ldw	fp,0(sp)
   1194c:	dec00204 	addi	sp,sp,8
   11950:	f800283a 	ret

00011954 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11954:	defffa04 	addi	sp,sp,-24
   11958:	dfc00515 	stw	ra,20(sp)
   1195c:	df000415 	stw	fp,16(sp)
   11960:	df000404 	addi	fp,sp,16
   11964:	e13ffe15 	stw	r4,-8(fp)
   11968:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1196c:	e0bfff17 	ldw	r2,-4(fp)
   11970:	10800017 	ldw	r2,0(r2)
   11974:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11978:	e13ffe17 	ldw	r4,-8(fp)
   1197c:	0002d880 	call	2d88 <strlen>
   11980:	10800044 	addi	r2,r2,1
   11984:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11988:	00000d06 	br	119c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1198c:	e0bffc17 	ldw	r2,-16(fp)
   11990:	10c00217 	ldw	r3,8(r2)
   11994:	e0bffd17 	ldw	r2,-12(fp)
   11998:	1809883a 	mov	r4,r3
   1199c:	e17ffe17 	ldw	r5,-8(fp)
   119a0:	100d883a 	mov	r6,r2
   119a4:	00127e40 	call	127e4 <memcmp>
   119a8:	1000021e 	bne	r2,zero,119b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   119ac:	e0bffc17 	ldw	r2,-16(fp)
   119b0:	00000706 	br	119d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   119b4:	e0bffc17 	ldw	r2,-16(fp)
   119b8:	10800017 	ldw	r2,0(r2)
   119bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   119c0:	e0fffc17 	ldw	r3,-16(fp)
   119c4:	e0bfff17 	ldw	r2,-4(fp)
   119c8:	18bff01e 	bne	r3,r2,1198c <__alt_mem_Flash_flash_data+0xf401198c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   119cc:	0005883a 	mov	r2,zero
}
   119d0:	e037883a 	mov	sp,fp
   119d4:	dfc00117 	ldw	ra,4(sp)
   119d8:	df000017 	ldw	fp,0(sp)
   119dc:	dec00204 	addi	sp,sp,8
   119e0:	f800283a 	ret

000119e4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   119e4:	defffe04 	addi	sp,sp,-8
   119e8:	dfc00115 	stw	ra,4(sp)
   119ec:	df000015 	stw	fp,0(sp)
   119f0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   119f4:	0009883a 	mov	r4,zero
   119f8:	01440004 	movi	r5,4096
   119fc:	00126700 	call	12670 <alt_icache_flush>
#endif
}
   11a00:	e037883a 	mov	sp,fp
   11a04:	dfc00117 	ldw	ra,4(sp)
   11a08:	df000017 	ldw	fp,0(sp)
   11a0c:	dec00204 	addi	sp,sp,8
   11a10:	f800283a 	ret

00011a14 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11a14:	defff904 	addi	sp,sp,-28
   11a18:	dfc00615 	stw	ra,24(sp)
   11a1c:	df000515 	stw	fp,20(sp)
   11a20:	df000504 	addi	fp,sp,20
   11a24:	e13ffc15 	stw	r4,-16(fp)
   11a28:	e17ffd15 	stw	r5,-12(fp)
   11a2c:	e1bffe15 	stw	r6,-8(fp)
   11a30:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   11a34:	e13ffd17 	ldw	r4,-12(fp)
   11a38:	e17ffe17 	ldw	r5,-8(fp)
   11a3c:	e1bfff17 	ldw	r6,-4(fp)
   11a40:	0011e180 	call	11e18 <open>
   11a44:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   11a48:	e0bffb17 	ldw	r2,-20(fp)
   11a4c:	10001c16 	blt	r2,zero,11ac0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   11a50:	00800074 	movhi	r2,1
   11a54:	108e5804 	addi	r2,r2,14688
   11a58:	e0fffb17 	ldw	r3,-20(fp)
   11a5c:	18c00324 	muli	r3,r3,12
   11a60:	10c5883a 	add	r2,r2,r3
   11a64:	10c00017 	ldw	r3,0(r2)
   11a68:	e0bffc17 	ldw	r2,-16(fp)
   11a6c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11a70:	00800074 	movhi	r2,1
   11a74:	108e5804 	addi	r2,r2,14688
   11a78:	e0fffb17 	ldw	r3,-20(fp)
   11a7c:	18c00324 	muli	r3,r3,12
   11a80:	18c00104 	addi	r3,r3,4
   11a84:	10c5883a 	add	r2,r2,r3
   11a88:	10c00017 	ldw	r3,0(r2)
   11a8c:	e0bffc17 	ldw	r2,-16(fp)
   11a90:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11a94:	00800074 	movhi	r2,1
   11a98:	108e5804 	addi	r2,r2,14688
   11a9c:	e0fffb17 	ldw	r3,-20(fp)
   11aa0:	18c00324 	muli	r3,r3,12
   11aa4:	18c00204 	addi	r3,r3,8
   11aa8:	10c5883a 	add	r2,r2,r3
   11aac:	10c00017 	ldw	r3,0(r2)
   11ab0:	e0bffc17 	ldw	r2,-16(fp)
   11ab4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11ab8:	e13ffb17 	ldw	r4,-20(fp)
   11abc:	00060a80 	call	60a8 <alt_release_fd>
  }
} 
   11ac0:	e037883a 	mov	sp,fp
   11ac4:	dfc00117 	ldw	ra,4(sp)
   11ac8:	df000017 	ldw	fp,0(sp)
   11acc:	dec00204 	addi	sp,sp,8
   11ad0:	f800283a 	ret

00011ad4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11ad4:	defffb04 	addi	sp,sp,-20
   11ad8:	dfc00415 	stw	ra,16(sp)
   11adc:	df000315 	stw	fp,12(sp)
   11ae0:	df000304 	addi	fp,sp,12
   11ae4:	e13ffd15 	stw	r4,-12(fp)
   11ae8:	e17ffe15 	stw	r5,-8(fp)
   11aec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11af0:	01000074 	movhi	r4,1
   11af4:	210e5b04 	addi	r4,r4,14700
   11af8:	e17ffd17 	ldw	r5,-12(fp)
   11afc:	01800044 	movi	r6,1
   11b00:	01c07fc4 	movi	r7,511
   11b04:	0011a140 	call	11a14 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11b08:	01000074 	movhi	r4,1
   11b0c:	210e5804 	addi	r4,r4,14688
   11b10:	e17ffe17 	ldw	r5,-8(fp)
   11b14:	000d883a 	mov	r6,zero
   11b18:	01c07fc4 	movi	r7,511
   11b1c:	0011a140 	call	11a14 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11b20:	01000074 	movhi	r4,1
   11b24:	210e5e04 	addi	r4,r4,14712
   11b28:	e17fff17 	ldw	r5,-4(fp)
   11b2c:	01800044 	movi	r6,1
   11b30:	01c07fc4 	movi	r7,511
   11b34:	0011a140 	call	11a14 <alt_open_fd>
}  
   11b38:	e037883a 	mov	sp,fp
   11b3c:	dfc00117 	ldw	ra,4(sp)
   11b40:	df000017 	ldw	fp,0(sp)
   11b44:	dec00204 	addi	sp,sp,8
   11b48:	f800283a 	ret

00011b4c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   11b4c:	defff004 	addi	sp,sp,-64
   11b50:	df000f15 	stw	fp,60(sp)
   11b54:	df000f04 	addi	fp,sp,60
   11b58:	e13ffd15 	stw	r4,-12(fp)
   11b5c:	e17ffe15 	stw	r5,-8(fp)
   11b60:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   11b64:	00bffa84 	movi	r2,-22
   11b68:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11b6c:	e0bffd17 	ldw	r2,-12(fp)
   11b70:	10800828 	cmpgeui	r2,r2,32
   11b74:	10005c1e 	bne	r2,zero,11ce8 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11b78:	0005303a 	rdctl	r2,status
   11b7c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11b80:	e0fff317 	ldw	r3,-52(fp)
   11b84:	00bfff84 	movi	r2,-2
   11b88:	1884703a 	and	r2,r3,r2
   11b8c:	1001703a 	wrctl	status,r2
  
  return context;
   11b90:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   11b94:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   11b98:	008000b4 	movhi	r2,2
   11b9c:	109a6504 	addi	r2,r2,27028
   11ba0:	e0fffd17 	ldw	r3,-12(fp)
   11ba4:	180690fa 	slli	r3,r3,3
   11ba8:	10c5883a 	add	r2,r2,r3
   11bac:	e0ffff17 	ldw	r3,-4(fp)
   11bb0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   11bb4:	008000b4 	movhi	r2,2
   11bb8:	109a6504 	addi	r2,r2,27028
   11bbc:	e0fffd17 	ldw	r3,-12(fp)
   11bc0:	180690fa 	slli	r3,r3,3
   11bc4:	18c00104 	addi	r3,r3,4
   11bc8:	10c5883a 	add	r2,r2,r3
   11bcc:	e0fffe17 	ldw	r3,-8(fp)
   11bd0:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   11bd4:	e0bfff17 	ldw	r2,-4(fp)
   11bd8:	10001f26 	beq	r2,zero,11c58 <alt_irq_register+0x10c>
   11bdc:	e0bffd17 	ldw	r2,-12(fp)
   11be0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11be4:	0005303a 	rdctl	r2,status
   11be8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11bec:	e0fff517 	ldw	r3,-44(fp)
   11bf0:	00bfff84 	movi	r2,-2
   11bf4:	1884703a 	and	r2,r3,r2
   11bf8:	1001703a 	wrctl	status,r2
  
  return context;
   11bfc:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11c00:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   11c04:	e0bff417 	ldw	r2,-48(fp)
   11c08:	00c00044 	movi	r3,1
   11c0c:	1884983a 	sll	r2,r3,r2
   11c10:	1007883a 	mov	r3,r2
   11c14:	00800074 	movhi	r2,1
   11c18:	109bda04 	addi	r2,r2,28520
   11c1c:	10800017 	ldw	r2,0(r2)
   11c20:	1886b03a 	or	r3,r3,r2
   11c24:	00800074 	movhi	r2,1
   11c28:	109bda04 	addi	r2,r2,28520
   11c2c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11c30:	00800074 	movhi	r2,1
   11c34:	109bda04 	addi	r2,r2,28520
   11c38:	10800017 	ldw	r2,0(r2)
   11c3c:	100170fa 	wrctl	ienable,r2
   11c40:	e0bff617 	ldw	r2,-40(fp)
   11c44:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c48:	e0bff717 	ldw	r2,-36(fp)
   11c4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11c50:	0005883a 	mov	r2,zero
   11c54:	00001f06 	br	11cd4 <alt_irq_register+0x188>
   11c58:	e0bffd17 	ldw	r2,-12(fp)
   11c5c:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11c60:	0005303a 	rdctl	r2,status
   11c64:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c68:	e0fff917 	ldw	r3,-28(fp)
   11c6c:	00bfff84 	movi	r2,-2
   11c70:	1884703a 	and	r2,r3,r2
   11c74:	1001703a 	wrctl	status,r2
  
  return context;
   11c78:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11c7c:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   11c80:	e0bff817 	ldw	r2,-32(fp)
   11c84:	00c00044 	movi	r3,1
   11c88:	1884983a 	sll	r2,r3,r2
   11c8c:	0084303a 	nor	r2,zero,r2
   11c90:	1007883a 	mov	r3,r2
   11c94:	00800074 	movhi	r2,1
   11c98:	109bda04 	addi	r2,r2,28520
   11c9c:	10800017 	ldw	r2,0(r2)
   11ca0:	1886703a 	and	r3,r3,r2
   11ca4:	00800074 	movhi	r2,1
   11ca8:	109bda04 	addi	r2,r2,28520
   11cac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11cb0:	00800074 	movhi	r2,1
   11cb4:	109bda04 	addi	r2,r2,28520
   11cb8:	10800017 	ldw	r2,0(r2)
   11cbc:	100170fa 	wrctl	ienable,r2
   11cc0:	e0bffa17 	ldw	r2,-24(fp)
   11cc4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11cc8:	e0bffb17 	ldw	r2,-20(fp)
   11ccc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11cd0:	0005883a 	mov	r2,zero
   11cd4:	e0bff115 	stw	r2,-60(fp)
   11cd8:	e0bff217 	ldw	r2,-56(fp)
   11cdc:	e0bffc15 	stw	r2,-16(fp)
   11ce0:	e0bffc17 	ldw	r2,-16(fp)
   11ce4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   11ce8:	e0bff117 	ldw	r2,-60(fp)
}
   11cec:	e037883a 	mov	sp,fp
   11cf0:	df000017 	ldw	fp,0(sp)
   11cf4:	dec00104 	addi	sp,sp,4
   11cf8:	f800283a 	ret

00011cfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11cfc:	defffe04 	addi	sp,sp,-8
   11d00:	dfc00115 	stw	ra,4(sp)
   11d04:	df000015 	stw	fp,0(sp)
   11d08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11d0c:	00800074 	movhi	r2,1
   11d10:	1093c904 	addi	r2,r2,20260
   11d14:	10800017 	ldw	r2,0(r2)
   11d18:	10000526 	beq	r2,zero,11d30 <alt_get_errno+0x34>
   11d1c:	00800074 	movhi	r2,1
   11d20:	1093c904 	addi	r2,r2,20260
   11d24:	10800017 	ldw	r2,0(r2)
   11d28:	103ee83a 	callr	r2
   11d2c:	00000206 	br	11d38 <alt_get_errno+0x3c>
   11d30:	00800074 	movhi	r2,1
   11d34:	109bbd04 	addi	r2,r2,28404
}
   11d38:	e037883a 	mov	sp,fp
   11d3c:	dfc00117 	ldw	ra,4(sp)
   11d40:	df000017 	ldw	fp,0(sp)
   11d44:	dec00204 	addi	sp,sp,8
   11d48:	f800283a 	ret

00011d4c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11d4c:	defffd04 	addi	sp,sp,-12
   11d50:	df000215 	stw	fp,8(sp)
   11d54:	df000204 	addi	fp,sp,8
   11d58:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11d5c:	e0bfff17 	ldw	r2,-4(fp)
   11d60:	10800217 	ldw	r2,8(r2)
   11d64:	10d00034 	orhi	r3,r2,16384
   11d68:	e0bfff17 	ldw	r2,-4(fp)
   11d6c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11d70:	e03ffe15 	stw	zero,-8(fp)
   11d74:	00001d06 	br	11dec <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11d78:	00800074 	movhi	r2,1
   11d7c:	108e5804 	addi	r2,r2,14688
   11d80:	e0fffe17 	ldw	r3,-8(fp)
   11d84:	18c00324 	muli	r3,r3,12
   11d88:	10c5883a 	add	r2,r2,r3
   11d8c:	10c00017 	ldw	r3,0(r2)
   11d90:	e0bfff17 	ldw	r2,-4(fp)
   11d94:	10800017 	ldw	r2,0(r2)
   11d98:	1880111e 	bne	r3,r2,11de0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11d9c:	00800074 	movhi	r2,1
   11da0:	108e5804 	addi	r2,r2,14688
   11da4:	e0fffe17 	ldw	r3,-8(fp)
   11da8:	18c00324 	muli	r3,r3,12
   11dac:	18c00204 	addi	r3,r3,8
   11db0:	10c5883a 	add	r2,r2,r3
   11db4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11db8:	1000090e 	bge	r2,zero,11de0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11dbc:	e0bffe17 	ldw	r2,-8(fp)
   11dc0:	10c00324 	muli	r3,r2,12
   11dc4:	00800074 	movhi	r2,1
   11dc8:	108e5804 	addi	r2,r2,14688
   11dcc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11dd0:	e0bfff17 	ldw	r2,-4(fp)
   11dd4:	18800226 	beq	r3,r2,11de0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11dd8:	00bffcc4 	movi	r2,-13
   11ddc:	00000a06 	br	11e08 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11de0:	e0bffe17 	ldw	r2,-8(fp)
   11de4:	10800044 	addi	r2,r2,1
   11de8:	e0bffe15 	stw	r2,-8(fp)
   11dec:	00800074 	movhi	r2,1
   11df0:	1093c804 	addi	r2,r2,20256
   11df4:	10800017 	ldw	r2,0(r2)
   11df8:	1007883a 	mov	r3,r2
   11dfc:	e0bffe17 	ldw	r2,-8(fp)
   11e00:	18bfdd2e 	bgeu	r3,r2,11d78 <__alt_mem_Flash_flash_data+0xf4011d78>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11e04:	0005883a 	mov	r2,zero
}
   11e08:	e037883a 	mov	sp,fp
   11e0c:	df000017 	ldw	fp,0(sp)
   11e10:	dec00104 	addi	sp,sp,4
   11e14:	f800283a 	ret

00011e18 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11e18:	defff604 	addi	sp,sp,-40
   11e1c:	dfc00915 	stw	ra,36(sp)
   11e20:	df000815 	stw	fp,32(sp)
   11e24:	df000804 	addi	fp,sp,32
   11e28:	e13ffd15 	stw	r4,-12(fp)
   11e2c:	e17ffe15 	stw	r5,-8(fp)
   11e30:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11e34:	00bfffc4 	movi	r2,-1
   11e38:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11e3c:	00bffb44 	movi	r2,-19
   11e40:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11e44:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11e48:	e13ffd17 	ldw	r4,-12(fp)
   11e4c:	01400074 	movhi	r5,1
   11e50:	2953c604 	addi	r5,r5,20248
   11e54:	00119540 	call	11954 <alt_find_dev>
   11e58:	e0bff815 	stw	r2,-32(fp)
   11e5c:	e0bff817 	ldw	r2,-32(fp)
   11e60:	1000051e 	bne	r2,zero,11e78 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11e64:	e13ffd17 	ldw	r4,-12(fp)
   11e68:	00124600 	call	12460 <alt_find_file>
   11e6c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11e70:	00800044 	movi	r2,1
   11e74:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11e78:	e0bff817 	ldw	r2,-32(fp)
   11e7c:	10002926 	beq	r2,zero,11f24 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11e80:	e13ff817 	ldw	r4,-32(fp)
   11e84:	00125740 	call	12574 <alt_get_fd>
   11e88:	e0bff915 	stw	r2,-28(fp)
   11e8c:	e0bff917 	ldw	r2,-28(fp)
   11e90:	1000030e 	bge	r2,zero,11ea0 <open+0x88>
    {
      status = index;
   11e94:	e0bff917 	ldw	r2,-28(fp)
   11e98:	e0bffa15 	stw	r2,-24(fp)
   11e9c:	00002306 	br	11f2c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   11ea0:	e0bff917 	ldw	r2,-28(fp)
   11ea4:	10c00324 	muli	r3,r2,12
   11ea8:	00800074 	movhi	r2,1
   11eac:	108e5804 	addi	r2,r2,14688
   11eb0:	1885883a 	add	r2,r3,r2
   11eb4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11eb8:	e0fffe17 	ldw	r3,-8(fp)
   11ebc:	00900034 	movhi	r2,16384
   11ec0:	10bfffc4 	addi	r2,r2,-1
   11ec4:	1886703a 	and	r3,r3,r2
   11ec8:	e0bffc17 	ldw	r2,-16(fp)
   11ecc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11ed0:	e0bffb17 	ldw	r2,-20(fp)
   11ed4:	1000051e 	bne	r2,zero,11eec <open+0xd4>
   11ed8:	e13ffc17 	ldw	r4,-16(fp)
   11edc:	0011d4c0 	call	11d4c <alt_file_locked>
   11ee0:	e0bffa15 	stw	r2,-24(fp)
   11ee4:	e0bffa17 	ldw	r2,-24(fp)
   11ee8:	10001016 	blt	r2,zero,11f2c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11eec:	e0bff817 	ldw	r2,-32(fp)
   11ef0:	10800317 	ldw	r2,12(r2)
   11ef4:	10000826 	beq	r2,zero,11f18 <open+0x100>
   11ef8:	e0bff817 	ldw	r2,-32(fp)
   11efc:	10800317 	ldw	r2,12(r2)
   11f00:	e13ffc17 	ldw	r4,-16(fp)
   11f04:	e17ffd17 	ldw	r5,-12(fp)
   11f08:	e1bffe17 	ldw	r6,-8(fp)
   11f0c:	e1ffff17 	ldw	r7,-4(fp)
   11f10:	103ee83a 	callr	r2
   11f14:	00000106 	br	11f1c <open+0x104>
   11f18:	0005883a 	mov	r2,zero
   11f1c:	e0bffa15 	stw	r2,-24(fp)
   11f20:	00000206 	br	11f2c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11f24:	00bffb44 	movi	r2,-19
   11f28:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11f2c:	e0bffa17 	ldw	r2,-24(fp)
   11f30:	1000090e 	bge	r2,zero,11f58 <open+0x140>
  {
    alt_release_fd (index);  
   11f34:	e13ff917 	ldw	r4,-28(fp)
   11f38:	00060a80 	call	60a8 <alt_release_fd>
    ALT_ERRNO = -status;
   11f3c:	0011cfc0 	call	11cfc <alt_get_errno>
   11f40:	1007883a 	mov	r3,r2
   11f44:	e0bffa17 	ldw	r2,-24(fp)
   11f48:	0085c83a 	sub	r2,zero,r2
   11f4c:	18800015 	stw	r2,0(r3)
    return -1;
   11f50:	00bfffc4 	movi	r2,-1
   11f54:	00000106 	br	11f5c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   11f58:	e0bff917 	ldw	r2,-28(fp)
}
   11f5c:	e037883a 	mov	sp,fp
   11f60:	dfc00117 	ldw	ra,4(sp)
   11f64:	df000017 	ldw	fp,0(sp)
   11f68:	dec00204 	addi	sp,sp,8
   11f6c:	f800283a 	ret

00011f70 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11f70:	defffa04 	addi	sp,sp,-24
   11f74:	df000515 	stw	fp,20(sp)
   11f78:	df000504 	addi	fp,sp,20
   11f7c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f80:	0005303a 	rdctl	r2,status
   11f84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11f88:	e0fffc17 	ldw	r3,-16(fp)
   11f8c:	00bfff84 	movi	r2,-2
   11f90:	1884703a 	and	r2,r3,r2
   11f94:	1001703a 	wrctl	status,r2
  
  return context;
   11f98:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   11f9c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   11fa0:	e0bfff17 	ldw	r2,-4(fp)
   11fa4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11fa8:	e0bffd17 	ldw	r2,-12(fp)
   11fac:	10800017 	ldw	r2,0(r2)
   11fb0:	e0fffd17 	ldw	r3,-12(fp)
   11fb4:	18c00117 	ldw	r3,4(r3)
   11fb8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   11fbc:	e0bffd17 	ldw	r2,-12(fp)
   11fc0:	10800117 	ldw	r2,4(r2)
   11fc4:	e0fffd17 	ldw	r3,-12(fp)
   11fc8:	18c00017 	ldw	r3,0(r3)
   11fcc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11fd0:	e0bffd17 	ldw	r2,-12(fp)
   11fd4:	e0fffd17 	ldw	r3,-12(fp)
   11fd8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11fdc:	e0bffd17 	ldw	r2,-12(fp)
   11fe0:	e0fffd17 	ldw	r3,-12(fp)
   11fe4:	10c00015 	stw	r3,0(r2)
   11fe8:	e0bffb17 	ldw	r2,-20(fp)
   11fec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ff0:	e0bffe17 	ldw	r2,-8(fp)
   11ff4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11ff8:	e037883a 	mov	sp,fp
   11ffc:	df000017 	ldw	fp,0(sp)
   12000:	dec00104 	addi	sp,sp,4
   12004:	f800283a 	ret

00012008 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12008:	defffb04 	addi	sp,sp,-20
   1200c:	dfc00415 	stw	ra,16(sp)
   12010:	df000315 	stw	fp,12(sp)
   12014:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   12018:	d0a03717 	ldw	r2,-32548(gp)
   1201c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   12020:	d0a82817 	ldw	r2,-24416(gp)
   12024:	10800044 	addi	r2,r2,1
   12028:	d0a82815 	stw	r2,-24416(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1202c:	00002e06 	br	120e8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   12030:	e0bffd17 	ldw	r2,-12(fp)
   12034:	10800017 	ldw	r2,0(r2)
   12038:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1203c:	e0bffd17 	ldw	r2,-12(fp)
   12040:	10800403 	ldbu	r2,16(r2)
   12044:	10803fcc 	andi	r2,r2,255
   12048:	10000426 	beq	r2,zero,1205c <alt_tick+0x54>
   1204c:	d0a82817 	ldw	r2,-24416(gp)
   12050:	1000021e 	bne	r2,zero,1205c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   12054:	e0bffd17 	ldw	r2,-12(fp)
   12058:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1205c:	e0bffd17 	ldw	r2,-12(fp)
   12060:	10800217 	ldw	r2,8(r2)
   12064:	d0e82817 	ldw	r3,-24416(gp)
   12068:	18801d36 	bltu	r3,r2,120e0 <alt_tick+0xd8>
   1206c:	e0bffd17 	ldw	r2,-12(fp)
   12070:	10800403 	ldbu	r2,16(r2)
   12074:	10803fcc 	andi	r2,r2,255
   12078:	1000191e 	bne	r2,zero,120e0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1207c:	e0bffd17 	ldw	r2,-12(fp)
   12080:	10800317 	ldw	r2,12(r2)
   12084:	e0fffd17 	ldw	r3,-12(fp)
   12088:	18c00517 	ldw	r3,20(r3)
   1208c:	1809883a 	mov	r4,r3
   12090:	103ee83a 	callr	r2
   12094:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   12098:	e0bfff17 	ldw	r2,-4(fp)
   1209c:	1000031e 	bne	r2,zero,120ac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   120a0:	e13ffd17 	ldw	r4,-12(fp)
   120a4:	0011f700 	call	11f70 <alt_alarm_stop>
   120a8:	00000d06 	br	120e0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   120ac:	e0bffd17 	ldw	r2,-12(fp)
   120b0:	10c00217 	ldw	r3,8(r2)
   120b4:	e0bfff17 	ldw	r2,-4(fp)
   120b8:	1887883a 	add	r3,r3,r2
   120bc:	e0bffd17 	ldw	r2,-12(fp)
   120c0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   120c4:	e0bffd17 	ldw	r2,-12(fp)
   120c8:	10c00217 	ldw	r3,8(r2)
   120cc:	d0a82817 	ldw	r2,-24416(gp)
   120d0:	1880032e 	bgeu	r3,r2,120e0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   120d4:	e0bffd17 	ldw	r2,-12(fp)
   120d8:	00c00044 	movi	r3,1
   120dc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   120e0:	e0bffe17 	ldw	r2,-8(fp)
   120e4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   120e8:	e0fffd17 	ldw	r3,-12(fp)
   120ec:	d0a03704 	addi	r2,gp,-32548
   120f0:	18bfcf1e 	bne	r3,r2,12030 <__alt_mem_Flash_flash_data+0xf4012030>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   120f4:	00072b40 	call	72b4 <OSTimeTick>
}
   120f8:	e037883a 	mov	sp,fp
   120fc:	dfc00117 	ldw	ra,4(sp)
   12100:	df000017 	ldw	fp,0(sp)
   12104:	dec00204 	addi	sp,sp,8
   12108:	f800283a 	ret

0001210c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1210c:	deffff04 	addi	sp,sp,-4
   12110:	df000015 	stw	fp,0(sp)
   12114:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   12118:	000170fa 	wrctl	ienable,zero
}
   1211c:	e037883a 	mov	sp,fp
   12120:	df000017 	ldw	fp,0(sp)
   12124:	dec00104 	addi	sp,sp,4
   12128:	f800283a 	ret

0001212c <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1212c:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   12130:	d0e00d17 	ldw	r3,-32716(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   12134:	d1282117 	ldw	r4,-24444(gp)

      stw ra,  0(sp)
   12138:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1213c:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   12140:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   12144:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   12148:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1214c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   12150:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   12154:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   12158:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1215c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   12160:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   12164:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   12168:	00123980 	call	12398 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1216c:	d1281c17 	ldw	r4,-24464(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   12170:	d1681407 	ldb	r5,-24496(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   12174:	d1282115 	stw	r4,-24444(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   12178:	d1681445 	stb	r5,-24495(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1217c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   12180:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   12184:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   12188:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1218c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   12190:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   12194:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   12198:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1219c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   121a0:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   121a4:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   121a8:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   121ac:	d0e00d15 	stw	r3,-32716(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   121b0:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   121b4:	f800283a 	ret

000121b8 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   121b8:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   121bc:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   121c0:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   121c4:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   121c8:	00123980 	call	12398 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   121cc:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   121d0:	d4a81245 	stb	r18,-24503(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   121d4:	003fe506 	br	1216c <__alt_mem_Flash_flash_data+0xf401216c>

000121d8 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   121d8:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   121dc:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   121e0:	10800054 	ori	r2,r2,1
      wrctl status, r2
   121e4:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   121e8:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   121ec:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   121f0:	dec00204 	addi	sp,sp,8

      callr r2
   121f4:	103ee83a 	callr	r2

      nop
   121f8:	0001883a 	nop

000121fc <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   121fc:	defff704 	addi	sp,sp,-36
   12200:	dfc00815 	stw	ra,32(sp)
   12204:	df000715 	stw	fp,28(sp)
   12208:	df000704 	addi	fp,sp,28
   1220c:	e13ffc15 	stw	r4,-16(fp)
   12210:	e17ffd15 	stw	r5,-12(fp)
   12214:	e1bffe15 	stw	r6,-8(fp)
   12218:	3805883a 	mov	r2,r7
   1221c:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   12220:	e0fffe17 	ldw	r3,-8(fp)
   12224:	00bfff04 	movi	r2,-4
   12228:	1884703a 	and	r2,r3,r2
   1222c:	10bef704 	addi	r2,r2,-1060
   12230:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   12234:	e13ff917 	ldw	r4,-28(fp)
   12238:	000b883a 	mov	r5,zero
   1223c:	01810904 	movi	r6,1060
   12240:	000529c0 	call	529c <memset>
   12244:	e0bff917 	ldw	r2,-28(fp)
   12248:	10c0bb04 	addi	r3,r2,748
   1224c:	e0bff917 	ldw	r2,-28(fp)
   12250:	10c00115 	stw	r3,4(r2)
   12254:	e0bff917 	ldw	r2,-28(fp)
   12258:	10c0d504 	addi	r3,r2,852
   1225c:	e0bff917 	ldw	r2,-28(fp)
   12260:	10c00215 	stw	r3,8(r2)
   12264:	e0bff917 	ldw	r2,-28(fp)
   12268:	10c0ef04 	addi	r3,r2,956
   1226c:	e0bff917 	ldw	r2,-28(fp)
   12270:	10c00315 	stw	r3,12(r2)
   12274:	e0fff917 	ldw	r3,-28(fp)
   12278:	00800074 	movhi	r2,1
   1227c:	108c3804 	addi	r2,r2,12512
   12280:	18800d15 	stw	r2,52(r3)
   12284:	e0bff917 	ldw	r2,-28(fp)
   12288:	00c00044 	movi	r3,1
   1228c:	10c02915 	stw	r3,164(r2)
   12290:	10002a15 	stw	zero,168(r2)
   12294:	e0bff917 	ldw	r2,-28(fp)
   12298:	00ccc384 	movi	r3,13070
   1229c:	10c02b0d 	sth	r3,172(r2)
   122a0:	e0bff917 	ldw	r2,-28(fp)
   122a4:	00eaf344 	movi	r3,-21555
   122a8:	10c02b8d 	sth	r3,174(r2)
   122ac:	e0bff917 	ldw	r2,-28(fp)
   122b0:	00c48d04 	movi	r3,4660
   122b4:	10c02c0d 	sth	r3,176(r2)
   122b8:	e0bff917 	ldw	r2,-28(fp)
   122bc:	00f99b44 	movi	r3,-6547
   122c0:	10c02c8d 	sth	r3,178(r2)
   122c4:	e0bff917 	ldw	r2,-28(fp)
   122c8:	00f7bb04 	movi	r3,-8468
   122cc:	10c02d0d 	sth	r3,180(r2)
   122d0:	e0bff917 	ldw	r2,-28(fp)
   122d4:	00c00144 	movi	r3,5
   122d8:	10c02d8d 	sth	r3,182(r2)
   122dc:	e0bff917 	ldw	r2,-28(fp)
   122e0:	00c002c4 	movi	r3,11
   122e4:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   122e8:	e0bff917 	ldw	r2,-28(fp)
   122ec:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   122f0:	e0bffa17 	ldw	r2,-24(fp)
   122f4:	10bff304 	addi	r2,r2,-52
   122f8:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   122fc:	e0bffb17 	ldw	r2,-20(fp)
   12300:	10800c04 	addi	r2,r2,48
   12304:	e0fffc17 	ldw	r3,-16(fp)
   12308:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1230c:	e0bffb17 	ldw	r2,-20(fp)
   12310:	10800b04 	addi	r2,r2,44
   12314:	e0fffd17 	ldw	r3,-12(fp)
   12318:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1231c:	e0bffb17 	ldw	r2,-20(fp)
   12320:	10800a04 	addi	r2,r2,40
   12324:	e0fff917 	ldw	r3,-28(fp)
   12328:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1232c:	00800074 	movhi	r2,1
   12330:	10887604 	addi	r2,r2,8664
   12334:	10c00104 	addi	r3,r2,4
   12338:	e0bffb17 	ldw	r2,-20(fp)
   1233c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   12340:	e0bffb17 	ldw	r2,-20(fp)
}
   12344:	e037883a 	mov	sp,fp
   12348:	dfc00117 	ldw	ra,4(sp)
   1234c:	df000017 	ldw	fp,0(sp)
   12350:	dec00204 	addi	sp,sp,8
   12354:	f800283a 	ret

00012358 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   12358:	defffe04 	addi	sp,sp,-8
   1235c:	df000115 	stw	fp,4(sp)
   12360:	df000104 	addi	fp,sp,4
   12364:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   12368:	e037883a 	mov	sp,fp
   1236c:	df000017 	ldw	fp,0(sp)
   12370:	dec00104 	addi	sp,sp,4
   12374:	f800283a 	ret

00012378 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   12378:	defffe04 	addi	sp,sp,-8
   1237c:	df000115 	stw	fp,4(sp)
   12380:	df000104 	addi	fp,sp,4
   12384:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   12388:	e037883a 	mov	sp,fp
   1238c:	df000017 	ldw	fp,0(sp)
   12390:	dec00104 	addi	sp,sp,4
   12394:	f800283a 	ret

00012398 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   12398:	deffff04 	addi	sp,sp,-4
   1239c:	df000015 	stw	fp,0(sp)
   123a0:	d839883a 	mov	fp,sp
}
   123a4:	e037883a 	mov	sp,fp
   123a8:	df000017 	ldw	fp,0(sp)
   123ac:	dec00104 	addi	sp,sp,4
   123b0:	f800283a 	ret

000123b4 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   123b4:	deffff04 	addi	sp,sp,-4
   123b8:	df000015 	stw	fp,0(sp)
   123bc:	d839883a 	mov	fp,sp
}
   123c0:	e037883a 	mov	sp,fp
   123c4:	df000017 	ldw	fp,0(sp)
   123c8:	dec00104 	addi	sp,sp,4
   123cc:	f800283a 	ret

000123d0 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   123d0:	deffff04 	addi	sp,sp,-4
   123d4:	df000015 	stw	fp,0(sp)
   123d8:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   123dc:	e037883a 	mov	sp,fp
   123e0:	df000017 	ldw	fp,0(sp)
   123e4:	dec00104 	addi	sp,sp,4
   123e8:	f800283a 	ret

000123ec <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   123ec:	deffff04 	addi	sp,sp,-4
   123f0:	df000015 	stw	fp,0(sp)
   123f4:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   123f8:	e037883a 	mov	sp,fp
   123fc:	df000017 	ldw	fp,0(sp)
   12400:	dec00104 	addi	sp,sp,4
   12404:	f800283a 	ret

00012408 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   12408:	deffff04 	addi	sp,sp,-4
   1240c:	df000015 	stw	fp,0(sp)
   12410:	d839883a 	mov	fp,sp
}
   12414:	e037883a 	mov	sp,fp
   12418:	df000017 	ldw	fp,0(sp)
   1241c:	dec00104 	addi	sp,sp,4
   12420:	f800283a 	ret

00012424 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   12424:	deffff04 	addi	sp,sp,-4
   12428:	df000015 	stw	fp,0(sp)
   1242c:	d839883a 	mov	fp,sp
}
   12430:	e037883a 	mov	sp,fp
   12434:	df000017 	ldw	fp,0(sp)
   12438:	dec00104 	addi	sp,sp,4
   1243c:	f800283a 	ret

00012440 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   12440:	defffe04 	addi	sp,sp,-8
   12444:	df000115 	stw	fp,4(sp)
   12448:	df000104 	addi	fp,sp,4
   1244c:	e13fff15 	stw	r4,-4(fp)
}
   12450:	e037883a 	mov	sp,fp
   12454:	df000017 	ldw	fp,0(sp)
   12458:	dec00104 	addi	sp,sp,4
   1245c:	f800283a 	ret

00012460 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   12460:	defffb04 	addi	sp,sp,-20
   12464:	dfc00415 	stw	ra,16(sp)
   12468:	df000315 	stw	fp,12(sp)
   1246c:	df000304 	addi	fp,sp,12
   12470:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   12474:	00800074 	movhi	r2,1
   12478:	1093c404 	addi	r2,r2,20240
   1247c:	10800017 	ldw	r2,0(r2)
   12480:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12484:	00003106 	br	1254c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   12488:	e0bffd17 	ldw	r2,-12(fp)
   1248c:	10800217 	ldw	r2,8(r2)
   12490:	1009883a 	mov	r4,r2
   12494:	0002d880 	call	2d88 <strlen>
   12498:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1249c:	e0bffd17 	ldw	r2,-12(fp)
   124a0:	10c00217 	ldw	r3,8(r2)
   124a4:	e0bffe17 	ldw	r2,-8(fp)
   124a8:	10bfffc4 	addi	r2,r2,-1
   124ac:	1885883a 	add	r2,r3,r2
   124b0:	10800003 	ldbu	r2,0(r2)
   124b4:	10803fcc 	andi	r2,r2,255
   124b8:	1080201c 	xori	r2,r2,128
   124bc:	10bfe004 	addi	r2,r2,-128
   124c0:	10800bd8 	cmpnei	r2,r2,47
   124c4:	1000031e 	bne	r2,zero,124d4 <alt_find_file+0x74>
    {
      len -= 1;
   124c8:	e0bffe17 	ldw	r2,-8(fp)
   124cc:	10bfffc4 	addi	r2,r2,-1
   124d0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   124d4:	e0bffe17 	ldw	r2,-8(fp)
   124d8:	e0ffff17 	ldw	r3,-4(fp)
   124dc:	1885883a 	add	r2,r3,r2
   124e0:	10800003 	ldbu	r2,0(r2)
   124e4:	10803fcc 	andi	r2,r2,255
   124e8:	1080201c 	xori	r2,r2,128
   124ec:	10bfe004 	addi	r2,r2,-128
   124f0:	10800be0 	cmpeqi	r2,r2,47
   124f4:	1000081e 	bne	r2,zero,12518 <alt_find_file+0xb8>
   124f8:	e0bffe17 	ldw	r2,-8(fp)
   124fc:	e0ffff17 	ldw	r3,-4(fp)
   12500:	1885883a 	add	r2,r3,r2
   12504:	10800003 	ldbu	r2,0(r2)
   12508:	10803fcc 	andi	r2,r2,255
   1250c:	1080201c 	xori	r2,r2,128
   12510:	10bfe004 	addi	r2,r2,-128
   12514:	10000a1e 	bne	r2,zero,12540 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   12518:	e0bffd17 	ldw	r2,-12(fp)
   1251c:	10c00217 	ldw	r3,8(r2)
   12520:	e0bffe17 	ldw	r2,-8(fp)
   12524:	1809883a 	mov	r4,r3
   12528:	e17fff17 	ldw	r5,-4(fp)
   1252c:	100d883a 	mov	r6,r2
   12530:	00127e40 	call	127e4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12534:	1000021e 	bne	r2,zero,12540 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   12538:	e0bffd17 	ldw	r2,-12(fp)
   1253c:	00000806 	br	12560 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   12540:	e0bffd17 	ldw	r2,-12(fp)
   12544:	10800017 	ldw	r2,0(r2)
   12548:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1254c:	e0fffd17 	ldw	r3,-12(fp)
   12550:	00800074 	movhi	r2,1
   12554:	1093c404 	addi	r2,r2,20240
   12558:	18bfcb1e 	bne	r3,r2,12488 <__alt_mem_Flash_flash_data+0xf4012488>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1255c:	0005883a 	mov	r2,zero
}
   12560:	e037883a 	mov	sp,fp
   12564:	dfc00117 	ldw	ra,4(sp)
   12568:	df000017 	ldw	fp,0(sp)
   1256c:	dec00204 	addi	sp,sp,8
   12570:	f800283a 	ret

00012574 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   12574:	defff904 	addi	sp,sp,-28
   12578:	dfc00615 	stw	ra,24(sp)
   1257c:	df000515 	stw	fp,20(sp)
   12580:	df000504 	addi	fp,sp,20
   12584:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   12588:	00bffa04 	movi	r2,-24
   1258c:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   12590:	00800074 	movhi	r2,1
   12594:	109bbe04 	addi	r2,r2,28408
   12598:	10800017 	ldw	r2,0(r2)
   1259c:	e0bffd15 	stw	r2,-12(fp)
   125a0:	e03ffe0d 	sth	zero,-8(fp)
   125a4:	e0fffe0b 	ldhu	r3,-8(fp)
   125a8:	e0bffe84 	addi	r2,fp,-6
   125ac:	e13ffd17 	ldw	r4,-12(fp)
   125b0:	180b883a 	mov	r5,r3
   125b4:	100d883a 	mov	r6,r2
   125b8:	000c8d80 	call	c8d8 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   125bc:	e03ffb15 	stw	zero,-20(fp)
   125c0:	00001d06 	br	12638 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   125c4:	00800074 	movhi	r2,1
   125c8:	108e5804 	addi	r2,r2,14688
   125cc:	e0fffb17 	ldw	r3,-20(fp)
   125d0:	18c00324 	muli	r3,r3,12
   125d4:	10c5883a 	add	r2,r2,r3
   125d8:	10800017 	ldw	r2,0(r2)
   125dc:	1000131e 	bne	r2,zero,1262c <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   125e0:	00800074 	movhi	r2,1
   125e4:	108e5804 	addi	r2,r2,14688
   125e8:	e0fffb17 	ldw	r3,-20(fp)
   125ec:	18c00324 	muli	r3,r3,12
   125f0:	10c5883a 	add	r2,r2,r3
   125f4:	e0ffff17 	ldw	r3,-4(fp)
   125f8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   125fc:	00800074 	movhi	r2,1
   12600:	1093c804 	addi	r2,r2,20256
   12604:	10c00017 	ldw	r3,0(r2)
   12608:	e0bffb17 	ldw	r2,-20(fp)
   1260c:	1880040e 	bge	r3,r2,12620 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   12610:	00800074 	movhi	r2,1
   12614:	1093c804 	addi	r2,r2,20256
   12618:	e0fffb17 	ldw	r3,-20(fp)
   1261c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   12620:	e0bffb17 	ldw	r2,-20(fp)
   12624:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   12628:	00000606 	br	12644 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1262c:	e0bffb17 	ldw	r2,-20(fp)
   12630:	10800044 	addi	r2,r2,1
   12634:	e0bffb15 	stw	r2,-20(fp)
   12638:	e0bffb17 	ldw	r2,-20(fp)
   1263c:	10800810 	cmplti	r2,r2,32
   12640:	103fe01e 	bne	r2,zero,125c4 <__alt_mem_Flash_flash_data+0xf40125c4>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   12644:	00800074 	movhi	r2,1
   12648:	109bbe04 	addi	r2,r2,28408
   1264c:	10800017 	ldw	r2,0(r2)
   12650:	1009883a 	mov	r4,r2
   12654:	000ccac0 	call	ccac <OSSemPost>

  return rc;
   12658:	e0bffc17 	ldw	r2,-16(fp)
}
   1265c:	e037883a 	mov	sp,fp
   12660:	dfc00117 	ldw	ra,4(sp)
   12664:	df000017 	ldw	fp,0(sp)
   12668:	dec00204 	addi	sp,sp,8
   1266c:	f800283a 	ret

00012670 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   12670:	defffb04 	addi	sp,sp,-20
   12674:	df000415 	stw	fp,16(sp)
   12678:	df000404 	addi	fp,sp,16
   1267c:	e13ffe15 	stw	r4,-8(fp)
   12680:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   12684:	e0bfff17 	ldw	r2,-4(fp)
   12688:	10840070 	cmpltui	r2,r2,4097
   1268c:	1000021e 	bne	r2,zero,12698 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   12690:	00840004 	movi	r2,4096
   12694:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   12698:	e0fffe17 	ldw	r3,-8(fp)
   1269c:	e0bfff17 	ldw	r2,-4(fp)
   126a0:	1885883a 	add	r2,r3,r2
   126a4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   126a8:	e0bffe17 	ldw	r2,-8(fp)
   126ac:	e0bffc15 	stw	r2,-16(fp)
   126b0:	00000506 	br	126c8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   126b4:	e0bffc17 	ldw	r2,-16(fp)
   126b8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   126bc:	e0bffc17 	ldw	r2,-16(fp)
   126c0:	10800804 	addi	r2,r2,32
   126c4:	e0bffc15 	stw	r2,-16(fp)
   126c8:	e0fffc17 	ldw	r3,-16(fp)
   126cc:	e0bffd17 	ldw	r2,-12(fp)
   126d0:	18bff836 	bltu	r3,r2,126b4 <__alt_mem_Flash_flash_data+0xf40126b4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   126d4:	e0bffe17 	ldw	r2,-8(fp)
   126d8:	108007cc 	andi	r2,r2,31
   126dc:	10000226 	beq	r2,zero,126e8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   126e0:	e0bffc17 	ldw	r2,-16(fp)
   126e4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   126e8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   126ec:	e037883a 	mov	sp,fp
   126f0:	df000017 	ldw	fp,0(sp)
   126f4:	dec00104 	addi	sp,sp,4
   126f8:	f800283a 	ret

000126fc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   126fc:	defffe04 	addi	sp,sp,-8
   12700:	df000115 	stw	fp,4(sp)
   12704:	df000104 	addi	fp,sp,4
   12708:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1270c:	e0bfff17 	ldw	r2,-4(fp)
   12710:	10bffe84 	addi	r2,r2,-6
   12714:	10c00428 	cmpgeui	r3,r2,16
   12718:	18001a1e 	bne	r3,zero,12784 <alt_exception_cause_generated_bad_addr+0x88>
   1271c:	100690ba 	slli	r3,r2,2
   12720:	00800074 	movhi	r2,1
   12724:	1089cd04 	addi	r2,r2,10036
   12728:	1885883a 	add	r2,r3,r2
   1272c:	10800017 	ldw	r2,0(r2)
   12730:	1000683a 	jmp	r2
   12734:	00012774 	movhi	zero,1181
   12738:	00012774 	movhi	zero,1181
   1273c:	00012784 	movi	zero,1182
   12740:	00012784 	movi	zero,1182
   12744:	00012784 	movi	zero,1182
   12748:	00012774 	movhi	zero,1181
   1274c:	0001277c 	xorhi	zero,zero,1181
   12750:	00012784 	movi	zero,1182
   12754:	00012774 	movhi	zero,1181
   12758:	00012774 	movhi	zero,1181
   1275c:	00012784 	movi	zero,1182
   12760:	00012774 	movhi	zero,1181
   12764:	0001277c 	xorhi	zero,zero,1181
   12768:	00012784 	movi	zero,1182
   1276c:	00012784 	movi	zero,1182
   12770:	00012774 	movhi	zero,1181
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   12774:	00800044 	movi	r2,1
   12778:	00000306 	br	12788 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1277c:	0005883a 	mov	r2,zero
   12780:	00000106 	br	12788 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   12784:	0005883a 	mov	r2,zero
  }
}
   12788:	e037883a 	mov	sp,fp
   1278c:	df000017 	ldw	fp,0(sp)
   12790:	dec00104 	addi	sp,sp,4
   12794:	f800283a 	ret

00012798 <atexit>:
   12798:	200b883a 	mov	r5,r4
   1279c:	000d883a 	mov	r6,zero
   127a0:	0009883a 	mov	r4,zero
   127a4:	000f883a 	mov	r7,zero
   127a8:	00129041 	jmpi	12904 <__register_exitproc>

000127ac <exit>:
   127ac:	defffe04 	addi	sp,sp,-8
   127b0:	000b883a 	mov	r5,zero
   127b4:	dc000015 	stw	r16,0(sp)
   127b8:	dfc00115 	stw	ra,4(sp)
   127bc:	2021883a 	mov	r16,r4
   127c0:	0012a180 	call	12a18 <__call_exitprocs>
   127c4:	00800074 	movhi	r2,1
   127c8:	1093c004 	addi	r2,r2,20224
   127cc:	11000017 	ldw	r4,0(r2)
   127d0:	20800f17 	ldw	r2,60(r4)
   127d4:	10000126 	beq	r2,zero,127dc <exit+0x30>
   127d8:	103ee83a 	callr	r2
   127dc:	8009883a 	mov	r4,r16
   127e0:	0012bac0 	call	12bac <_exit>

000127e4 <memcmp>:
   127e4:	01c000c4 	movi	r7,3
   127e8:	3980192e 	bgeu	r7,r6,12850 <memcmp+0x6c>
   127ec:	2144b03a 	or	r2,r4,r5
   127f0:	11c4703a 	and	r2,r2,r7
   127f4:	10000f26 	beq	r2,zero,12834 <memcmp+0x50>
   127f8:	20800003 	ldbu	r2,0(r4)
   127fc:	28c00003 	ldbu	r3,0(r5)
   12800:	10c0151e 	bne	r2,r3,12858 <memcmp+0x74>
   12804:	31bfff84 	addi	r6,r6,-2
   12808:	01ffffc4 	movi	r7,-1
   1280c:	00000406 	br	12820 <memcmp+0x3c>
   12810:	20800003 	ldbu	r2,0(r4)
   12814:	28c00003 	ldbu	r3,0(r5)
   12818:	31bfffc4 	addi	r6,r6,-1
   1281c:	10c00e1e 	bne	r2,r3,12858 <memcmp+0x74>
   12820:	21000044 	addi	r4,r4,1
   12824:	29400044 	addi	r5,r5,1
   12828:	31fff91e 	bne	r6,r7,12810 <__alt_mem_Flash_flash_data+0xf4012810>
   1282c:	0005883a 	mov	r2,zero
   12830:	f800283a 	ret
   12834:	20c00017 	ldw	r3,0(r4)
   12838:	28800017 	ldw	r2,0(r5)
   1283c:	1880041e 	bne	r3,r2,12850 <memcmp+0x6c>
   12840:	31bfff04 	addi	r6,r6,-4
   12844:	21000104 	addi	r4,r4,4
   12848:	29400104 	addi	r5,r5,4
   1284c:	39bff936 	bltu	r7,r6,12834 <__alt_mem_Flash_flash_data+0xf4012834>
   12850:	303fe91e 	bne	r6,zero,127f8 <__alt_mem_Flash_flash_data+0xf40127f8>
   12854:	003ff506 	br	1282c <__alt_mem_Flash_flash_data+0xf401282c>
   12858:	10c5c83a 	sub	r2,r2,r3
   1285c:	f800283a 	ret

00012860 <strcmp>:
   12860:	2144b03a 	or	r2,r4,r5
   12864:	108000cc 	andi	r2,r2,3
   12868:	1000171e 	bne	r2,zero,128c8 <strcmp+0x68>
   1286c:	20800017 	ldw	r2,0(r4)
   12870:	28c00017 	ldw	r3,0(r5)
   12874:	10c0141e 	bne	r2,r3,128c8 <strcmp+0x68>
   12878:	027fbff4 	movhi	r9,65279
   1287c:	4a7fbfc4 	addi	r9,r9,-257
   12880:	0086303a 	nor	r3,zero,r2
   12884:	02202074 	movhi	r8,32897
   12888:	1245883a 	add	r2,r2,r9
   1288c:	42202004 	addi	r8,r8,-32640
   12890:	10c4703a 	and	r2,r2,r3
   12894:	1204703a 	and	r2,r2,r8
   12898:	10000226 	beq	r2,zero,128a4 <strcmp+0x44>
   1289c:	00001706 	br	128fc <strcmp+0x9c>
   128a0:	1000161e 	bne	r2,zero,128fc <strcmp+0x9c>
   128a4:	21000104 	addi	r4,r4,4
   128a8:	20c00017 	ldw	r3,0(r4)
   128ac:	29400104 	addi	r5,r5,4
   128b0:	29800017 	ldw	r6,0(r5)
   128b4:	1a4f883a 	add	r7,r3,r9
   128b8:	00c4303a 	nor	r2,zero,r3
   128bc:	3884703a 	and	r2,r7,r2
   128c0:	1204703a 	and	r2,r2,r8
   128c4:	19bff626 	beq	r3,r6,128a0 <__alt_mem_Flash_flash_data+0xf40128a0>
   128c8:	20800007 	ldb	r2,0(r4)
   128cc:	1000051e 	bne	r2,zero,128e4 <strcmp+0x84>
   128d0:	00000606 	br	128ec <strcmp+0x8c>
   128d4:	21000044 	addi	r4,r4,1
   128d8:	20800007 	ldb	r2,0(r4)
   128dc:	29400044 	addi	r5,r5,1
   128e0:	10000226 	beq	r2,zero,128ec <strcmp+0x8c>
   128e4:	28c00007 	ldb	r3,0(r5)
   128e8:	10fffa26 	beq	r2,r3,128d4 <__alt_mem_Flash_flash_data+0xf40128d4>
   128ec:	20800003 	ldbu	r2,0(r4)
   128f0:	28c00003 	ldbu	r3,0(r5)
   128f4:	10c5c83a 	sub	r2,r2,r3
   128f8:	f800283a 	ret
   128fc:	0005883a 	mov	r2,zero
   12900:	f800283a 	ret

00012904 <__register_exitproc>:
   12904:	00800074 	movhi	r2,1
   12908:	defffa04 	addi	sp,sp,-24
   1290c:	1093c004 	addi	r2,r2,20224
   12910:	dc000315 	stw	r16,12(sp)
   12914:	14000017 	ldw	r16,0(r2)
   12918:	dc400415 	stw	r17,16(sp)
   1291c:	dfc00515 	stw	ra,20(sp)
   12920:	80805217 	ldw	r2,328(r16)
   12924:	2023883a 	mov	r17,r4
   12928:	10003626 	beq	r2,zero,12a04 <__register_exitproc+0x100>
   1292c:	10c00117 	ldw	r3,4(r2)
   12930:	010007c4 	movi	r4,31
   12934:	20c00e16 	blt	r4,r3,12970 <__register_exitproc+0x6c>
   12938:	1a400044 	addi	r9,r3,1
   1293c:	8800211e 	bne	r17,zero,129c4 <__register_exitproc+0xc0>
   12940:	18c00084 	addi	r3,r3,2
   12944:	18c7883a 	add	r3,r3,r3
   12948:	18c7883a 	add	r3,r3,r3
   1294c:	12400115 	stw	r9,4(r2)
   12950:	10c7883a 	add	r3,r2,r3
   12954:	19400015 	stw	r5,0(r3)
   12958:	0005883a 	mov	r2,zero
   1295c:	dfc00517 	ldw	ra,20(sp)
   12960:	dc400417 	ldw	r17,16(sp)
   12964:	dc000317 	ldw	r16,12(sp)
   12968:	dec00604 	addi	sp,sp,24
   1296c:	f800283a 	ret
   12970:	00800034 	movhi	r2,0
   12974:	10800004 	addi	r2,r2,0
   12978:	10002526 	beq	r2,zero,12a10 <__register_exitproc+0x10c>
   1297c:	01006404 	movi	r4,400
   12980:	d9400015 	stw	r5,0(sp)
   12984:	d9800115 	stw	r6,4(sp)
   12988:	d9c00215 	stw	r7,8(sp)
   1298c:	00000000 	call	0 <__alt_mem_SDRAM>
   12990:	d9400017 	ldw	r5,0(sp)
   12994:	d9800117 	ldw	r6,4(sp)
   12998:	d9c00217 	ldw	r7,8(sp)
   1299c:	10001c26 	beq	r2,zero,12a10 <__register_exitproc+0x10c>
   129a0:	80c05217 	ldw	r3,328(r16)
   129a4:	10000115 	stw	zero,4(r2)
   129a8:	02400044 	movi	r9,1
   129ac:	10c00015 	stw	r3,0(r2)
   129b0:	80805215 	stw	r2,328(r16)
   129b4:	10006215 	stw	zero,392(r2)
   129b8:	10006315 	stw	zero,396(r2)
   129bc:	0007883a 	mov	r3,zero
   129c0:	883fdf26 	beq	r17,zero,12940 <__alt_mem_Flash_flash_data+0xf4012940>
   129c4:	18d1883a 	add	r8,r3,r3
   129c8:	4211883a 	add	r8,r8,r8
   129cc:	1211883a 	add	r8,r2,r8
   129d0:	41802215 	stw	r6,136(r8)
   129d4:	01000044 	movi	r4,1
   129d8:	11806217 	ldw	r6,392(r2)
   129dc:	20c8983a 	sll	r4,r4,r3
   129e0:	310cb03a 	or	r6,r6,r4
   129e4:	11806215 	stw	r6,392(r2)
   129e8:	41c04215 	stw	r7,264(r8)
   129ec:	01800084 	movi	r6,2
   129f0:	89bfd31e 	bne	r17,r6,12940 <__alt_mem_Flash_flash_data+0xf4012940>
   129f4:	11806317 	ldw	r6,396(r2)
   129f8:	3108b03a 	or	r4,r6,r4
   129fc:	11006315 	stw	r4,396(r2)
   12a00:	003fcf06 	br	12940 <__alt_mem_Flash_flash_data+0xf4012940>
   12a04:	80805304 	addi	r2,r16,332
   12a08:	80805215 	stw	r2,328(r16)
   12a0c:	003fc706 	br	1292c <__alt_mem_Flash_flash_data+0xf401292c>
   12a10:	00bfffc4 	movi	r2,-1
   12a14:	003fd106 	br	1295c <__alt_mem_Flash_flash_data+0xf401295c>

00012a18 <__call_exitprocs>:
   12a18:	00800074 	movhi	r2,1
   12a1c:	1093c004 	addi	r2,r2,20224
   12a20:	10800017 	ldw	r2,0(r2)
   12a24:	defff404 	addi	sp,sp,-48
   12a28:	dd800815 	stw	r22,32(sp)
   12a2c:	d8800015 	stw	r2,0(sp)
   12a30:	10805204 	addi	r2,r2,328
   12a34:	dd000615 	stw	r20,24(sp)
   12a38:	dc800415 	stw	r18,16(sp)
   12a3c:	dfc00b15 	stw	ra,44(sp)
   12a40:	df000a15 	stw	fp,40(sp)
   12a44:	ddc00915 	stw	r23,36(sp)
   12a48:	dd400715 	stw	r21,28(sp)
   12a4c:	dcc00515 	stw	r19,20(sp)
   12a50:	dc400315 	stw	r17,12(sp)
   12a54:	dc000215 	stw	r16,8(sp)
   12a58:	2025883a 	mov	r18,r4
   12a5c:	2829883a 	mov	r20,r5
   12a60:	d8800115 	stw	r2,4(sp)
   12a64:	05bfffc4 	movi	r22,-1
   12a68:	d8800017 	ldw	r2,0(sp)
   12a6c:	14c05217 	ldw	r19,328(r2)
   12a70:	98001d26 	beq	r19,zero,12ae8 <__call_exitprocs+0xd0>
   12a74:	dd400117 	ldw	r21,4(sp)
   12a78:	98800117 	ldw	r2,4(r19)
   12a7c:	173fffc4 	addi	fp,r2,-1
   12a80:	e0000d16 	blt	fp,zero,12ab8 <__call_exitprocs+0xa0>
   12a84:	14000044 	addi	r16,r2,1
   12a88:	8421883a 	add	r16,r16,r16
   12a8c:	8421883a 	add	r16,r16,r16
   12a90:	84402004 	addi	r17,r16,128
   12a94:	9c63883a 	add	r17,r19,r17
   12a98:	9c21883a 	add	r16,r19,r16
   12a9c:	a0001e26 	beq	r20,zero,12b18 <__call_exitprocs+0x100>
   12aa0:	80804017 	ldw	r2,256(r16)
   12aa4:	15001c26 	beq	r2,r20,12b18 <__call_exitprocs+0x100>
   12aa8:	e73fffc4 	addi	fp,fp,-1
   12aac:	843fff04 	addi	r16,r16,-4
   12ab0:	8c7fff04 	addi	r17,r17,-4
   12ab4:	e5bff91e 	bne	fp,r22,12a9c <__alt_mem_Flash_flash_data+0xf4012a9c>
   12ab8:	00800034 	movhi	r2,0
   12abc:	10800004 	addi	r2,r2,0
   12ac0:	10000926 	beq	r2,zero,12ae8 <__call_exitprocs+0xd0>
   12ac4:	98800117 	ldw	r2,4(r19)
   12ac8:	1000311e 	bne	r2,zero,12b90 <__call_exitprocs+0x178>
   12acc:	98800017 	ldw	r2,0(r19)
   12ad0:	10003426 	beq	r2,zero,12ba4 <__call_exitprocs+0x18c>
   12ad4:	9809883a 	mov	r4,r19
   12ad8:	a8800015 	stw	r2,0(r21)
   12adc:	00000000 	call	0 <__alt_mem_SDRAM>
   12ae0:	acc00017 	ldw	r19,0(r21)
   12ae4:	983fe41e 	bne	r19,zero,12a78 <__alt_mem_Flash_flash_data+0xf4012a78>
   12ae8:	dfc00b17 	ldw	ra,44(sp)
   12aec:	df000a17 	ldw	fp,40(sp)
   12af0:	ddc00917 	ldw	r23,36(sp)
   12af4:	dd800817 	ldw	r22,32(sp)
   12af8:	dd400717 	ldw	r21,28(sp)
   12afc:	dd000617 	ldw	r20,24(sp)
   12b00:	dcc00517 	ldw	r19,20(sp)
   12b04:	dc800417 	ldw	r18,16(sp)
   12b08:	dc400317 	ldw	r17,12(sp)
   12b0c:	dc000217 	ldw	r16,8(sp)
   12b10:	dec00c04 	addi	sp,sp,48
   12b14:	f800283a 	ret
   12b18:	98800117 	ldw	r2,4(r19)
   12b1c:	80c00017 	ldw	r3,0(r16)
   12b20:	10bfffc4 	addi	r2,r2,-1
   12b24:	17001526 	beq	r2,fp,12b7c <__call_exitprocs+0x164>
   12b28:	80000015 	stw	zero,0(r16)
   12b2c:	183fde26 	beq	r3,zero,12aa8 <__alt_mem_Flash_flash_data+0xf4012aa8>
   12b30:	00800044 	movi	r2,1
   12b34:	1708983a 	sll	r4,r2,fp
   12b38:	98806217 	ldw	r2,392(r19)
   12b3c:	9dc00117 	ldw	r23,4(r19)
   12b40:	2084703a 	and	r2,r4,r2
   12b44:	1000061e 	bne	r2,zero,12b60 <__call_exitprocs+0x148>
   12b48:	183ee83a 	callr	r3
   12b4c:	98800117 	ldw	r2,4(r19)
   12b50:	15ffc51e 	bne	r2,r23,12a68 <__alt_mem_Flash_flash_data+0xf4012a68>
   12b54:	a8800017 	ldw	r2,0(r21)
   12b58:	14ffd326 	beq	r2,r19,12aa8 <__alt_mem_Flash_flash_data+0xf4012aa8>
   12b5c:	003fc206 	br	12a68 <__alt_mem_Flash_flash_data+0xf4012a68>
   12b60:	98806317 	ldw	r2,396(r19)
   12b64:	2084703a 	and	r2,r4,r2
   12b68:	1000061e 	bne	r2,zero,12b84 <__call_exitprocs+0x16c>
   12b6c:	89400017 	ldw	r5,0(r17)
   12b70:	9009883a 	mov	r4,r18
   12b74:	183ee83a 	callr	r3
   12b78:	003ff406 	br	12b4c <__alt_mem_Flash_flash_data+0xf4012b4c>
   12b7c:	9f000115 	stw	fp,4(r19)
   12b80:	003fea06 	br	12b2c <__alt_mem_Flash_flash_data+0xf4012b2c>
   12b84:	89000017 	ldw	r4,0(r17)
   12b88:	183ee83a 	callr	r3
   12b8c:	003fef06 	br	12b4c <__alt_mem_Flash_flash_data+0xf4012b4c>
   12b90:	98800017 	ldw	r2,0(r19)
   12b94:	982b883a 	mov	r21,r19
   12b98:	1027883a 	mov	r19,r2
   12b9c:	983fb61e 	bne	r19,zero,12a78 <__alt_mem_Flash_flash_data+0xf4012a78>
   12ba0:	003fd106 	br	12ae8 <__alt_mem_Flash_flash_data+0xf4012ae8>
   12ba4:	0005883a 	mov	r2,zero
   12ba8:	003ffa06 	br	12b94 <__alt_mem_Flash_flash_data+0xf4012b94>

00012bac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12bac:	defffd04 	addi	sp,sp,-12
   12bb0:	df000215 	stw	fp,8(sp)
   12bb4:	df000204 	addi	fp,sp,8
   12bb8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   12bbc:	00800074 	movhi	r2,1
   12bc0:	109bc644 	addi	r2,r2,28441
   12bc4:	10000005 	stb	zero,0(r2)
   12bc8:	e0bfff17 	ldw	r2,-4(fp)
   12bcc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   12bd0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   12bd4:	10000226 	beq	r2,zero,12be0 <_exit+0x34>
    ALT_SIM_FAIL();
   12bd8:	002af070 	cmpltui	zero,zero,43969
   12bdc:	00000106 	br	12be4 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   12be0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12be4:	003fff06 	br	12be4 <__alt_mem_Flash_flash_data+0xf4012be4>
